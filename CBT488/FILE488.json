{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012147000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 6054958, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 40, "INMDSNAM": "CBT.V500.FILE488.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 6054958, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 6054958, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE488.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00`\\n'", "DS1TRBAL": "b'#v'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\x86\\x00\\t\\x03\\x8d\\x00\\x00\\x00a'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04c\\x00\\x02\\x01 \\x07\\x0f\\x01 \\x07\\x0f\"U\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf9@@@'", "ispf": {"version": "04.99", "flags": 0, "createdate": "2020-03-10T00:00:00", "modifydate": "2020-03-10T22:55:02", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-499"}, "text": "REGULAR CBT TAPE - VERSION 499    FILE:  488\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT499.FILE488\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 206 MEMBERS COUNTED; CUMULATIVE SIZE IS 56,183 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   03/10/20    22:55:02    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE01": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x13\\x01\\x192_\\x01\\x192_\\t4\\x008\\x008\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-11-21T00:00:00", "modifydate": "2019-11-21T09:34:13", "lines": 56, "newlines": 56, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  CBT 488 - Iannone - 2019/11/20\nFrom:     \"Iannone, Jim\" <Jim.Iannone@nsg.com>\nDate:     11/20/2019, 8:57 AM\nTo:       Sam Golob <sbgolob@cbttape.org>\n\nHello Sam\n\nWell since I've been updating this file recently and because I\nhave time on my hands I decided I might as well go all the way.\n\nI altered most of the programs to look the same.\u00a0 They all\ngenerate lower-case display statements in the same layout.\n\nI altered most JCL to be fairly uniform, trying to make it as\nflexible as possible for most shops.\n\nI renamed numerous members so if something was added or deleted\nthen it was intentional - for this update I just assumed\nyou'd replace everything.\n\nThese members have been added:\n$UPDATE to track updates to CBT 488\nS0400B\nSTV0400T\nS0530B\nSTV0530T\nCHNGTST\nCHNGEXMP\nM0425B\nSTV0530B\nSTV0150B\nSTV0270B\n\nThese members have been removed:\n$UTILITY\nCHNG005A\nSTV1270B\nSTV1280B\n\nLots of members were renamed which probably should have been\nincluded in the added/removed list above.\n\nI recompiled a few of the older programs just to be sure they\nstill worked and made a few tweaks.\n\nPlease see $UPDATE for most of the changes.\u00a0 Thank you in advance -\nhope this isn't too much trouble.\n\nJim Iannone - Contractor\nNSG : Nippon Sheet Glass\nNA EDI : North America Electronic Data Interchange\nOffice:\u00a0 419-247-4818\nMobile:\u00a0 419-250-6014\nJim.iannone@nsg.com\nhttp://www.nsg.com/disclaimer\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$DOC": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01!\\x00\"\\x01\\x19\\x07/\\x01 \\x00?\\x08P\\x020\\x01\\x1b\\x00\\x00\\xd4\\xc9\\xe2\\xf1\\xf4\\xf6@@@@'", "ispf": {"version": "01.33", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2020-01-03T08:50:22", "lines": 560, "newlines": 283, "modlines": 0, "user": "MIS146"}, "text": "\n\n The standard copyright applies to all members submitted.\n\n   ALTHOUGH THESE PROGRAMS HAVE BEEN TESTED AND ARE IN USE IN A\n   PRODUCTION ENVIRONMENT, NO GUARANTEE IS MADE OF, OR\n   RESPONSIBILITY ASSUMED FOR, CORRECT OR RELIABLE OPERATION.\n   THE USE OF THESE PROGRAMS, OR RESULTS THEREOF, IS ENTIRELY\n   AT THE RISK OF THE USER.\n\n   THESE PROGRAMS ARE DONATED TO THE PUBLIC DOMAIN AND MAY\n   BE FREELY COPIED. THEY MAY BE FREELY DISTRIBUTED TO ANY\n   OTHER PARTY ON CONDITION THAT NO INDUCEMENT BEYOND\n   REASONABLE HANDLING COSTS BE OFFERED OR ACCEPTED FOR\n   SUCH DISTRIBUTION.\n\n   THE AUTHOR DOES ASK THAT YOU LEAVE HIS NAME IN THE FILES\n   AND GIVE CREDIT TO HIM AS THE ORIGINAL PROGRAMMER.\n\n\n  ------------------------------------------------------------------\n\n  NEWWAIT is used throughout these utilities and is located\n  on CBT file 270.\n\n  Note that most of the date format symbolic or 'keyword' names\n  are the same throughout the different programs.\n  Most of these systems draw upon multiple utilities to\n  complete their tasks.  Many of the programs rely on the\n  date offset system to process dates.\n\n  EXAMPLE:\n    You have a report that you pull into a file every day.\n    The pull process sometimes results in an empty file,\n    or yesterdays file (instead of todays).\n    You use CHNGFILE to search for a date in the file and\n    set a condition code of 0004 if the date is not found\n    (condition code 0000 means you have todays file).\n\n    What if the job is delayed and runs 5 minutes past midnight?\n    How will your process know to use yesterdays date\n    (ie: processing date), rather than todays?\n\n    since CHNGFILE works with the OFFSET processing system,\n    this will be properly handled.\n\n\n  Although it is the use of call programs that make these\n  systems powerful, it also makes implementation more difficult.\n\n  ------------------------------------------------------------------\n\n  Overview\n  --------\n\n!!  NEW (as of 2019) items added to tape:\n\n  COBNEAT      depending on selection parms:\n               Clean up cobol programs, alter comments to lower case\n               Format IF statements with clean indenting\n               Align \"TO\" statements, \"VALUE\" statements, \"PIC\" etc\n               Renumber 01 level working storage field groups\n               Renumber cobol paragraph names\n               Use with CHNGCASE to upgrade your Cobol experience :)\n               Associated items: COBNEAT1   input parm\n                                 COBNRUN    jcl\n                                 COBNOTE    documentation\n\n  JCLSPLT      split long JCL lines into separate lines, leaving\n               room on the right for documentation\n               Associated items: JCLSPLT1   input parm\n                                 JCLSRUN    jcl\n                                 JCLNOTE    documentation\n\n  JCLNEAT      use in conjunction with JCLSPLT\n               depending on selection parms:\n               Clean up JCL procs/jobs, alter comments to lower case\n               Rename/renumber proc step names and job step names\n               Swap DISP=SHR and DSN= so DISP=SHR occurs first\n               (NOTE: also see Carl Hafner  CBT tape #357 member DISPDSN\n                which also does this swapping)\n               Add file disposition note at end of JCL line:\n                   shr, old, new, del, mod\n               Associated items: JCLNEAT1   input parm\n                                 JCLNRUN    jcl\n                                 JCLNOTE    documentation\n\n  X12SHOW      Loop through X12 and generate descriptions for all fields\n               Associated items: X12SRUN    jcl\n                                 X12INPUT   X12 field descriptions\n                                 X12FILE    simple X12 input file\n\n\n  XLT04650     Allow replacing or removing strings within lrecl 32700\n               variable length records.  Also can zap trailing spaces\n               from files prior to FTP - helps with EDI scenarios where\n               trailing spaces flummox the EDI engine.\n               Associated items: X04650     jcl\n                                 X04650P    input parm\n\n  MIS0655B     Batch job waits for:  CICS to be up\n                                     time of day\n                                     string to exist in file\n                                     another job to finish\n\n  MIS0700B     Force a gap between batch job runs\n\n  MHP0775B     Purge records from standard-record-length files\n\n  STV0150B     Center a 79 byte field (generally for report headings)\n\n  STV0270B     Center a 40 byte field (generally for report headings)\n\n  XLT04660     zap pages for a group from report when totals are\n               zero or blank.  specify search criteria and total field\n               format.  zap all pages for group or just pages with\n               zero totals.  see X04660D.\n\n  FTPGDG       discussion and example of FTPing files to mainframe\n\n  ------------------------------------------------------------------\n\n  Originally on CBT 488 - some items updated as of 2019:\n\n  - STV0400B   Y2K compliant date conversion routine with an 80/20\n               sliding window\n               This is called by almost all the other programs listed\n               and can generate the following:\n\n               '+00134'      '19980731  '   days future\n               '-00023'      '19980224  '   days past\n               'I00134'      '15380000  '   increment # minutes\n                                    '--> ## nbr days calc'd past\n               'D00023'      '13010000  '   decrement # minutes\n               'AGE   '      '0450210   '   YYYMMDD\n               'CDDEY2'      '1996366   '   EOY - CYDDD - past\n               'CDDE02'      '1998031   '   EOM - CYDDD - past\n               'CDD002'      '1998076   '   CYDDD minus 2 days\n               'CDFEY2'      '2000366   '   EOY - CYDDD - future\n               'CDFE02'      '1998151   '   EOM - CYDDD - future\n               'CDF002'      '1998080   '   CYDDD plus 2 days\n               'CMDEY2'      '19961231  '   EOY - CYMD - past\n               'CMDE02'      '19980131  '   EOM - CYMD - past\n               'CMDX  '      '19980319  '   CYMD\n               'CMD002'      '19980317  '   CYMD minus 2 days\n               'CMFEY2'      '20001231  '   EOY - CYMD - future\n               'CMFE02'      '19980531  '   EOM - CYMD - future\n               'CMF002'      '19980321  '   CYMD plus 2 days\n               'CY    '      '1998      '\n               'CY/DDD'      '1998/078  '\n               'CY/M/D'      '1998/03/19'\n               'CYDDD '      '1998078   '\n               'CYDX  '      '1998      '\n               'CYD002'      '1996      '   CY minus 2 years\n               'CYF002'      '2000      '   CY plus 2 years\n               'CYMD  '      '19980319  '\n               'D     '      '19        '\n               'DAY   '      'THURSDAY 4'   MON=1...SUN=7\n               'DAYS  '      '00034     '   CURR - IN-DATE\n               'DDD   '      '078       '\n               'HMM   '      '1324      '   MILITARY TIME\n               'HMSM  '      '132400    '   MILITARY TIME\n               'HMSM8 '      '13240012  '   MILITARY TIME\n               'H:MM  '      '13:24     '   MILITARY TIME\n               'H:M:SM'      '13:24:00  '   MILITARY TIME\n               'HMP   '      '0124PM    '   STANDARD TIME\n               'HMSP  '      '012400PM  '   STANDARD TIME\n               'H:M P '      '01:24 PM  '   STANDARD TIME\n               'H:MP  '      '01:24PM   '   STANDARD TIME\n               'H:M:SP'      '01:24:00PM'   STANDARD TIME\n               'KEY   '      '19980319  '   = 30019681\n               'M     '      '03        '\n               'M/D   '      '03/19     '\n               'M/D/CY'      '03/19/1998'\n               'M/D/Y '      '03/19/98  '\n               'MD    '      '0319      '\n               'MDCY  '      '03191998  '\n               'MDY   '      '031998    '\n               'MIN   '      '001440    '  # MINUTES BETWEEN TIMES\n               'MIN - note: time can be passed as HHMMSS## where\n                            ## = number days in past (or future\n                            if valueing DATA2) if input is 'HMSM  '\n               'MMM   '      'MAR       '\n               'MMMCY '      'MAR1998   '\n               'MMMD  '      'MAR19     '\n               'MMMYD '      'MAR9819   '\n               'MONTH '      'MARCH     '\n               'MYDEY2'      '123196    '   EOY - MDY - past\n               'MYDE03'      '123197    '   EOM - MDY - past\n               'MYD002'      '031798    '   MDY minus 2 days\n               'MYFEY2'      '123100    '   EOY - MDY - future\n               'MYFE03'      '063098    '   EOM - MDY - future\n               'MYF002'      '032198    '   MDY plus 2 days\n               'QTR   '      '1         '   1/2/3/4\n               'SUFFIX'      'MARCH     '   IN=' 1ST'  OUT='1998'\n               'Y     '      '98        '\n               'YDDEY2'      '96366     '   EOY - YDDD - past\n               'YDDE03'      '97365     '   EOM - YDDD - past\n               'YDD002'      '98076     '   YDDD minus 2 days\n               'YDFEY2'      '00366     '   EOY - YDDD - future\n               'YDFE03'      '98181     '   EOM - YDDD - future\n               'YDF002'      '98080     '   YDDD plus 2 days\n               'YMDEY2'      '961231    '   EOY - YMD - past\n               'YMDE03'      '971231    '   EOM - YMD - past\n               'YMD002'      '980317    '   YMD minus 2 days\n               'YMFEY2'      '001231    '   EOY - YMD - future\n               'YMFE03'      '980630    '   EOM - YMD - future\n               'YMF002'      '980321    '   YMD plus 2 days\n               'Y/DDD '      '98/078    '\n               'Y/M/D '      '98/03/19  '\n               'YDDD  '      '98078     '\n               'YMD   '      '980319    '\n\n               The above conversions can be tested dynamically\n               using CICS programs - See $INDEX.  This allows\n               you to test all your batch calls online.\n               See STVDOCU\n\n  ------------------------------------------------------------------\n\n  SYMBOLICS    Date symbolics in JCL can be set using these\n               utilities.  Coordinated with OFFSET processing so\n               the dates reflect processing date as well as\n               current date.\n               Basically, to use this, schedule a job ahead of each\n               of your current jobs that use date symbolics, to\n               update the symbolic dynamically right before it runs.\n\n  - MIS0425B   place dates/other data at a specified location\n               in a static parm.  mostly replaced by CHNGFILE which\n               provides more flexible date manipulations.\n\n  - MIS0500B   change symbolics in jcl\n\n               OFFX=        Reflects offset processing  Y or N\n\n               EOMDATE=     mm/dd/yy  previous end of month\n               CURDATE=     mm/dd/yy  current date\n               CURREOM=     mm/dd/yy  current end of month\n               YESTDAY=     mm/dd/yy  yesterday\n               EOYDATE=     mm/dd/yy  previous end of year\n               PREVMON=     mmmccyy   month and year 1 month ago\n               LASTMON=     mmmccyy   month and year 2 months ago\n\n               CYDX=        current ccyy\n               CYD###=      prev ccyy\n               CYF###=      future ccyy\n\n               QTRX=        1, 2, 3, or 4\n\n               CMDX=        current ccyymmdd\n               CMD###=      prev ccyymmdd\n               CMDE##=      prev eom ccyymmdd\n               CMDEY#=      prev eoy ccyymmdd\n               CMF###=      future ccyymmdd\n               CMFE##=      future eom ccyymmdd\n               CMFEY#=      future eoy ccyymmdd\n               CDDX=        current ccyyddd\n               CDD###=      prev ccyyddd\n               CDDE##=      prev eom ccyyddd\n               CDDEY#=      prev eoy ccyyddd\n               CDF###=      future ccyyddd\n               CDFE##=      future eom ccyyddd\n               CDFEY#=      future eoy ccyyddd\n\n               YMDX=        current yymmdd\n               YMD###=      prev yymmdd\n               YMDE##=      prev eom yymmdd\n               YMDEY#=      prev eoy yymmdd\n               YMF###=      future yymmdd\n               YMFE##=      future eom yymmdd\n               YMFEY#=      future eoy yymmdd\n               YDDX=        current yyddd\n               YDD###=      prev yyddd\n               YDDE##=      prev eom yyddd\n               YDDEY#=      prev eoy yyddd\n               YDF###=      future yyddd\n               YDFE##=      future eom yyddd\n               YDFEY#=      future eoy yyddd\n\n               Note: To obtain current eom or eoy, pass zero for the\n                     numeric value\n\n               DAYX=        nbr days between current date and\n                            Y--### or C--###\n               DAYM=        nbr days between current date and\n                            Y--E## or C--E##\n               DAYY=        nbr days between current date and\n                            Y--EY# or C--EY#\n\n               RUNX=        2 digit sequential counter\n               HMSX=        hhmms\n\n               Reflects the offset processing switch passed in the\n                 programs parm\n\n  ------------------------------------------------------------------\n\n  COUNT PIC DEFINITIONS\n\n  - JCI0049B   count PIC X clauses and give a total.  useful for\n               maintaining print programs or developing new programs.\n               - skips redefining fields\n               - handles occurs clauses\n\n  ------------------------------------------------------------------\n\n  OFFSET       OFFSET processing allows batch processing,\n               pulling 'current date', to continue pulling the\n               correct date when batch is late and runs past\n               midnight.  Allows a single manual date change to be\n               reflected across the board for participating batch\n               applications.  Date may be altered 99599 days forward\n               or backward.\n               See OFFSET1 and OFFSET2\n\n  ------------------------------------------------------------------\n\n  CHNGFILE     Works with STV0400B to provide string find-and-replace,\n               and date/time aging and format alteration.\n               Allows for changes only when strings are found\n               on multiple records.  jcl SPACE= replacements.\n               I combine this with PULLFILE to do many different\n               tasks involving string and date and condition code\n               manipulation.\n               Deceptively powerful.\n\n  - CHNGFILE\n\n    via batch, will allow you to replace strings in pds members or\n    10-9999 byte files with other data, and optionally insert data\n    (ie: add or remove spaces so the data to the right of the string\n    stays positionally stable) similar to the SCAN and REPLACE\n    function of CA-EZYEDIT.\n\n    Data from the search record may be used as replace data.\n\n    The move/replace may occur either at the same location the search\n    data was found, or at a specified location, or at a location\n    relative to the found location (+ or -).  A replace position in all\n    rcds may be specified, bypassing the string search, to allow data\n    movement/replacement for all records.\n\n    The program will also search for a string, and if found, generate\n    a specified return-code (condition-code) for use in procs.\n    return code may also be dependent on a certain day of the week or\n    month.  a default return-code may be set so that a specified code\n    is set if a string is NOT found.\n\n    Numeric fields may be altered via math statements\n    (ie: add 200 to all numerics in column 12).\n    Date fields in multiple formats may be altered x days past\n    or future, or to a different format,\n    ie: convert YMD to CYMD and increment 2 years ahead.\n    The 'to' format is anything usable by stv0400b.\n    partially numeric fields (   4) may be converted to numeric (0004).\n    the numeric sum for a column of data can be calculated\n    (w/wo string search).\n\n    Time formats may be changed, and times may be\n    incremented/decremented by x nbr of minutes.\n\n    Reflects the offset processing switch passed in the programs parm\n\n    Note: If compiling CHNGFILE for 80 byte records,\n          Alter CHNGCPY2 prior to the compile and change the\n            output load module name to CHNG0080.\n\n          I setup a separate compiler that plugs values into\n            CHNGCPY2 (using MIS0425B) so the following\n            modules are produced:\n            CHNG0080  CHNG0081  CHNG0121  CHNG0132  CHNG0133\n            CHNG0300\n\n  ------------------------------------------------------------------\n\n  PULLFILE     Pull records or partial strings from files at\n               relative locations.\n               Change portions to upper/lowercase.\n\n  - PULLFILE\n\n    see PULLDOCU for documentation and examples\n\n    NOTE:  Because PULLFILE has the ability to loop through an\n           input file twice, it allows you to specify to start\n           pulling records PRIOR to a found string, and to stop\n           pulling PRIOR to an end string.  ie:  when a particular\n           ledger is found on a report, pull that page's headers\n           (assuming the ledger prints a bit further down on the\n           page) and continue pulling until the next ledger is found -\n           but exclude that page's headers.\n\n    Search for a string in any fixed length file and, when found, pull\n    that record or a portion of that record, plus all or a specified\n    number of subsequent records (ie: only pull those selected).\n    (xsi = blank).\n\n    Also allows for pulling all records except those specified\n    (ie: pull all except those excluded). (xsi = X and I).\n\n    Also allows for pulling all records until a specified string\n    is found (ie: pull all until string found).  The ending string\n    may be included or excluded.\n    (xsi = I and S).\n\n    Also allows for pulling records from one found string to\n    another found string.\n    The ending string may be included or excluded. (xsi = blank and S).\n\n    Combinations of the above may be coded, within the operating rules.\n\n    example:\n        exclude record with string AAA      (xsi = X)\n        exclude record with string BBB      (xsi = X)\n        Include all other records           (xsi = I)\n        until record with string CCC found  (xsi = S)\n\n    After string is found, start and end positions for output\n    may be determined by:\n    1) specifying a fixed position\n    2) searching for a delimiting string, position based on\n       found position, or a number +/- to found position,\n       and allow include or exclude of found string\n    3) a position relative to the starting or ending position\n\n    Allows insertion of a counter or specified title or\n    specified number of spaces in front of the output record.\n\n    Pull if a string at a location is numeric.\n\n    Convert all or portions of pulled data to upper or lowercase.\n\n  ------------------------------------------------------------------\n\n  DFSMShsm     System to condense the active logs into a single file\n               with automatic expiration of records.\n               An idcams list of log files is dynamically\n               concatentated into jcl, which is then submitted.\n               The logs are condensed and written to a single file,\n               where the records are then managed individually\n               via user defined expiration criteria.\n               See HSMDOCU\n\n  ------------------------------------------------------------------\n\n  EXTENTS      The 'high extent checking' system is a bit crude since\n               it relies on IEHLIST output.  But I find it quite\n               useful to track trouble datasets before they become\n               an issue.  Basically, IEHLIST output from each dasd\n               volume is concatentated and sorted, and extents for\n               a file are summed.  The count is then compared to a\n               user maintained table, and a TSO message is sent\n               to specified users.  It runs against 120 3390-3 volumes\n               in three minutes.\n               See $INDEX\n\n  ------------------------------------------------------------------\n\n  SCHEDULING   Send TSO messages or set condition codes\n\n  - MIS0685B  powerful scheduling system\n              see M0685P1 and M0685P2 for input examples                es\n\n              send TSO messages, or set condition codes, based on a\n              specified schedule.\n\n              specific or generic date:  2000 01 24 or\n                                         2000 01 ** or\n                                         2000 ** 24 or\n                                         **** ** **\n\n    duration of days:    match across multiple days\n    repeating days:      match every ## days (ie: biweekly)\n    specified day of the week: match every monday or every weekday\n    specified 'occurs':  3rd tuesday and wednesday of the month\n                         Last thursday of the month\n                         second to last day of the month\n\n    Adjust match day backwards or forwards, so that actual day\n    (ie:  20001225) can be specified, but notification occurs\n    earlier or later (20001223).\n\n    upon a match:\n      send a message:  send a tso message prefixed with mm-dd-yy\n                       to up to 12 tso users\n      set a cond code: CCC = set when date matches\n                       CCN = set when date does not match\n                       CTM = set when within specific time ranges\n      abend\n\n    Reflects the offset processing switch passed in the programs parm\n\n  ------------------------------------------------------------------\n\n  DSN MASKS    MIS0540B is a called program to return 'YES' or 'NO'\n               if a dataset name matches a dataset mask.\n               Use for PDS member names as well.\n               Will perform DSN syntax checking.\n\n\n  - MIS0540B   compare a dataset name to a dataset mask, return\n               'yes' or 'no'.\n\n               masks are the same type used by RMM:  * ** %\n               may also be used to compare member names to a member mask\n               may be used to validate dsn names.\n\n  ------------------------------------------------------------------\n\n  REPORT ALTERATION\n               Keeps 100 lines in an internal buffer, to allow you to\n               plug codes into reports (on, above, or below the search\n               string) to aid in report distribution.\n               We use these programs to avoid printing UB92 bills\n               that have particular codes in specified locations.\n\n  - MIS0081B   alter an 81 or 133 byte report (assuming a carriage\n    MIS0133B   control byte is in pos 1):\n               load 100 record buffer and search for a string.\n\n               when found, place a specified string ON or ABOVE\n               or BELOW the record where the string was found\n               up to 78 records away.\n               -and/or-\n               when found, insert a record from another file: ABOVE or\n               BELOW the record where the string was found,\n               up to 78 records away.\n\n               write report records to a separate file.\n\n  ------------------------------------------------------------------\n\n  - PRNTFILE  Print files in a structured format to easily locate\n              an exact position in the file.  Replaces IDCAMS print.\n\n              Places a scale bar above and below output and allows for\n              spacing between output lines.\n              Print only those records containing a specified search\n              string, or print from a specified search string.\n              Print a specified # of lines, and allow skipping\n              initial # of lines.\n\n  ------------------------------------------------------------------\n\n  COBOL SHELLS I've used these for years to quickly throw together\n               a program that is pre-formatted with highly\n               reliable print logic and field edit logic.\n               I much prefer this method - pre-formatted shells -\n               to borrowing other peoples code to use as a base.\n               see $INDEX - DOC* members\n\n  ------------------------------------------------------------------\n\n  - STV0530B   convert number to alpha equivalent\n    STV0530T   test STV0530B\n    S0530B     JCL to invoke STV0530T\n\n  ------------------------------------------------------------------\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$INDEX": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x013\\x00(\\x01\\x19\\x07/\\x01 \\x00?\\x08Q\\x01\\x14\\x00\\xc4\\x00\\x00\\xd4\\xc9\\xe2\\xf1\\xf4\\xf6@@@@'", "ispf": {"version": "01.51", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2020-01-03T08:51:28", "lines": 276, "newlines": 196, "modlines": 0, "user": "MIS146"}, "text": "\n Members grouped by function\n\n miscellaneous ---------------------------------------------------\n $DOC       overview of programs/systems\n $INDEX     programs/systems sorted by function\n $INDEX2    programs/systems sorted alphabetically\n CX003B     cobol 3 compile proc\n\n clean-up Cobol programs -----------------------------------------\n COBNEAT    clean-up Cobol programs\n COBNEAT1   parm input for cobneat\n COBNOTE    cobneat documentation\n COBNRUN    jcl for cobneat\n CHNGCASE   change cobol programs various items upper-case to lower-case\n CHNGCASP   input to chngcase\n\n clean-up JCL ----------------------------------------------------\n JCLNEAT    clean-up JCL jobs and procs\n JCLNEAT1   parm input for jclneat\n JCLNOTE    jclneat and jclsplt documentation\n JCLNRUN    jcl for jclneat\n JCLSPLT    split long JCL lines\n JCLSPLT1   parm input for jclsplt\n JCLSRUN    jcl for jclsplt\n\n x12 field descriptions ------------------------------------------\n X12FILE    simple X12 example input file\n X12INPUT   X12 field description list\n X12SHOW    generate X12 field descriptions\n X12SRUN    jcl for X12SHOW\n\n chngfile --------------------------------------------------------\n CHNGCALL   cobol call program: change strings (variant of chngfile)\n CHNGCPY1   copybook, compiled into CHNGFILE\n CHNGCPY2   copybook, compiled into CHNGFILE\n CHNGDOCU   chngfile documentation\n CHNGEXMP   additional chngfile examples\n CHNGFILE   cobol: change strings, convert fixed length files\n CHNGPARM   input to chngfile\n CHNGPROC   chngfile jcl\n CHNGTSTA   chngfile example: jcl\n CHNG005B   chngfile example: changed data - before  (ymd)\n CHNG005C   chngfile example: input parms\n CHNG005F   chngfile example: changed data - after   (cymd + 300 days)\n\n determine if a dsn matches a dataset mask -----------------------\n MIS0540B   given a dataset mask, determine if a match\n\n cobol syntax checking -------------------------------------------\n MIS0400B   edit cobol programs for invalid commands\n CX002B     cobol II compile proc including cobol syntax validation\n CXPARM     input for MIS0400B - cobol syntax validation\n\n count cobol pic clauses -----------------------------------------\n JCI0049B   count cobol PIC clauses\n J0049B     jcl for JCI0049B\n\n purge/alter jes jcl/reports -------------------------------------\n JESJOB2    jcl for MIS0525B: purge/alter jes jobs/reports\n MIS0525B   submit commands to alter jobs in the jes queue\n\n set date symbolics ----------------------------------------------\n MIS0425B   place dates/other data in input parms\n MIS0500B   change date symbolics in jcl\n JMIS20D    example date symbolic update job\n PMIS20D    example of job with date symbolics\n MIS10      proc for MIS0500B - also see MIS10010\n MIS10010   input to offset date processing\n MIS20      example of proc with date symbolics\n M0425B     JCL for testing MIS0425B\n\n alter VB lrecl 32700 records ------------------------------------\n XLT04650   alter strings in VB lrecl 32700 files\n X04650     jcl for XLT04650\n X04650P    input parms for X04650\n\n automatic processing-date retention past midnight ---------------\n OFFSET1    documentation for 'offset date' processing\n OFFSET2    documentation for 'offset date' processing\n MIS0660B   change offset value for j-jobs\n MID97      see OFFSET1\n MID98      see OFFSET1\n MID99      see OFFSET1\n MIS10010   input to offset date processing\n\n date manipulation -----------------------------------------------\n S0400B     JCL to invoke STV0400T for testing STV0400B\n STV0400T   cobol program to test STV0400B\n STV0280B   cobol call program: patient age calculation\n STV0295B   cobol call program: return month name and day suffix\n STV0320B   cobol call program: time conversion\n STV0400B   cobol call program: y2k date/time conversion program\n STVDOCU    documentation for STV0400B\n STV0405B   cobol call program: edit a cymd date\n STV0410B   cobol call program: julian/gregorian date conversion\n STV0420B   cobol call program: nbr of days between dates\n STV0805B   cobol call program: return day of the week\n\n online date manipulation ----------------------------------------\n STV0110C   cics: hex / dec conversions\n STV0115C   cics: julian/gregorian online conversion & STV0400B testing\n STV110M    cics: map for STV0110C\n STV115M    cics: map for STV0115C\n STV1270B   removed: see STV0150B and STV0270B\n STV1280B   removed: see STV0280B\n STV1295B   cics: cobol call program: month name/day suffix\n STV1320B   cics: cobol call program: military/standard time\n STV1400B   cics: cobol call program: online version of stv0400b\n STV1405B   cics: cobol call program: edit dates\n STV1410B   cics: cobol call program: julian/gregorian conversion\n STV1420B   cics: cobol call program: nbr of days between dates\n STV1805B   cics: cobol call program: return day of the week\n\n high dataset extent checking and notification -------------------\n HIGHEXT    documentation\n MIS0440B   see HIGHEXT\n MIS0585B   see HIGHEXT\n MISA1      see HIGHEXT\n MISA1010   see HIGHEXT\n MISA1030   see HIGHEXT\n MISA1040   see HIGHEXT\n MISA2      see HIGHEXT\n MISA2030   see HIGHEXT\n MISA2040   see HIGHEXT\n MISA9      see HIGHEXT\n MISA9010   see HIGHEXT\n MISA9020   see HIGHEXT\n MISA9040   see HIGHEXT\n MISA9050   see HIGHEXT\n MISA9060   see HIGHEXT\n MISA9070   see HIGHEXT\n MISA9130   see HIGHEXT\n PMISA1D    see HIGHEXT\n PMISA2D    see HIGHEXT\n PMISA9D    see HIGHEXT\n\n send tso messages/set condition codes ---------------------------\n MIS0685B   send messages/set condition codes\n M0685B     proc for MIS0685B\n M0685P1    input parm for MIS0685B\n M0685P2    input parm for MIS0685B\n\n batch job wait for event ----------------------------------------\n MIS0655B   wait for parm value to change / CICS to startup.\n            works with larger time gaps in minutes.\n            MIS0700B works with shorter time gaps in seconds.\n M0655A     jcl to test MIS0655B\n M0655A01   Y/N parm releases MIS0655B to continue running\n M0655A02   MIS0655B example input parm - wait for up to 5 hours\n M0655A0T   MIS0655B time tracking parm\n M0655B     jcl to test MIS0655B\n M0655B01   Y/N parm releases MIS0655B to continue running\n M0655B02   MIS0655B example input parm - wait for time of day\n M0655B03   MIS0655B example input parm - wait for 'Y'\n M0655B0T   MIS0655B time tracking parm\n\n batch job gap between jobs --------------------------------------\n MIS0700B   wait for parm time, update time for next job.\n            works with shorter time gaps in seconds.\n            MIS0655B works with larger time gaps in minutes.\n M0700B     test MIS0700B\n M0700P     time tracking parm for MIS0700B\n\n build smtp commands ---------------------------------------------\n MIS0590B   build smtp mail\n MISBI      proc for MIS0590B\n PARM0060   input to MIS0590B: build smtp mail\n\n FTP files to mainframe-------------------------------------------\n FTPGDG     discussion and example of FTPing files to mainframe\n\n IBM DFSMShsm activity log consolidation -------------------------\n HSMDOCU    documentation for the hsm log consolidation system\n MIS0465B   consolidate hsm activity records\n MIS0470B   maintain hsm activity records\n MIS0475B   maintain hsm activity records\n JMISB1D    date symbolic update for PMISB1D\n PMISB1D    jcl for MIS0465B\n MISB1      consolidate hsm activity records\n MISB1020   input to MISB1\n MISB1030   input to MISB1\n PMIS34W    jcl for MIS0470B\n MIS34      maintain hsm activity records\n MIS34010   input to MIS34\n MIS34020   input to MIS34\n MIS34040   input to MIS34\n\n update reports - change strings and insert lines ----------------\n MIS0081B   update report data or insert lines into reports\n MIS0133B   update report data or insert lines into reports\n MIS12      proc for MIS0081B and MIS0133B\n MIS12070   input parm for MIS0081B and MIS0133B\n\n generate tape vol=ser= statement for uncat datasets -------------\n MIS0520B   generate tape dsn volume list for jcl\n TAPEDD     jcl and documentation for MIS0520B\n\n purge records from standard record length files -----------------\n            For files with lengths 80, 81, 132, 133, 100, 200,\n            300, 500:  purge records if older than parm # days\n MHP0775B   purge records based on date in file\n M0775B     jcl and documentation for MHP0775B\n\n print files with ....+....2....+ placemarker --------------------\n PRNTCPY1   copybook, compiled into PRNTFILE\n PRNTCPY2   copybook, compiled into PRNTFILE\n PRNTDOCU   print files with column markers\n PRNTFILE   cobol: print files with column markers\n PRNTPARM   print files with column markers\n PRNTPROC   print files with column markers\n\n Mantissa RMS-Online report processing ---------------------------\n MIS0380B   delete MANTISSA RMS-ONLINE reports from repository\n MIS11      proc for MIS0380B\n MIS11010   input to MIS0380B\n MIS11030   input to MIS0380B\n\n HL7 stream into separate records --------------------------------\n MIS0550B   turn an hl7 stream into sep rcds\n MHPB6      JCL for MIS0550B\n\n Convert number to alpha equivalent-------------------------------\n STV0530B   convert number to alpha equivalent\n STV0530T   program used for testing STV0530B\n S0530B     JCL to invoke STV0530T for testing STV0530B\n\n Zap blank or zero totals pages-----------------------------------\n XLT04660   remove pages from report if totals are zeroes or blank\n X04660     JCL for running XLT04660\n X04660D    documentation for XLT04660\n X04660P    input parm to X04660 when running XLT04660\n\n Center field contents--------------------------------------------\n STV0150B   center a 79 byte field (generally for report headings)\n STV0270B   center a 40 byte field (generally for report headings)\n\n pull records/strings from files ---------------------------------\n PULLCPY1   copybook, compiled into PULLFILE\n PULLCPY2   copybook, compiled into PULLFILE\n PULLCPY3   copybook, compiled into PULLFILE\n PULLDOCU   pullfile documentation\n PULLFILE   cobol: pull strings/records from files\n PULLPARM   input to pullfile\n PULLPROC   jcl for pullfile\n PULL001    example of PULLFILE\n PULLDSN    pull dsn's from jcl\n PULLDSNS   pull dsn's from jcl and sort\n\n COBOL shells/JCL shells -----------------------------------------\n DOCCHNG    cobol shell - standard program change comment\n DOCCNS1    cobol shell - send messages to consoles\n DOCCSV     cobol shell - logic to easily generate .csv records\n DOCDOC     cobol shell - documentation plug-in\n DOCEND     cobol shell - end-of-program marker\n DOCHDG1    cobol shell - 8.5 x 14 headings\n DOCHDG2    cobol shell - 8.5 x 11 headings\n DOCID      cobol shell - preformatted cobol program syntax\n DOCIDCAM   cobol shell - IDCAMS standard step JCL\n DOCIEBG    cobol shell - IEBGENER standard step JCL\n DOCIEFBR   cobol shell - IEFBR14 standard step JCL\n DOCJOB     jcl shell   - job jcl\n DOCLINE    cobol shell - standard comment line\n DOCLOAD    cobol shell - load static input into ws table\n DOCPARM    cobol shell - standard parm layout\n DOCPRINT   cobol shell - standard print/break logic\n DOCPROB    cobol shell - batch procedure division\n DOCPROC    jcl shell   - proc jcl\n DOCPROO    cobol shell - cics procedure division\n DOCREPRO   cobol shell - REPRO standard step JCL\n DOCRIGHT   cobol shell - cobol right-justify a number\n DOCRULE    cobol shell - cobol length ruler\n DOCTOP     cobol shell - standard job template\n DOCWSB     cobol shell - batch working storage\n DOCWSO     cobol shell - cics working storage\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$INDEX2": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01/\\x009\\x01\\x19\\x07/\\x01 \\x00?\\x08Q\\x00\\xd1\\x00\\xa0\\x00\\x00\\xd4\\xc9\\xe2\\xf1\\xf4\\xf6@@@@'", "ispf": {"version": "01.47", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2020-01-03T08:51:39", "lines": 209, "newlines": 160, "modlines": 0, "user": "MIS146"}, "text": "\n Members indexed alphabetically  -  see $INDEX for groupings\n\n\n Note: these 4 members all refer to the same set of programs\n $DOC       overview of programs/systems\n $INDEX     programs/systems sorted by function\n $INDEX2    programs/systems sorted alphabetically\n\n CHNGCALL   cobol call program: change strings (variant of chngfile)\n CHNGCASE   change cobol programs various items upper-case to lower-case\n CHNGCASP   input to chngcase\n CHNGCPY1   copybook, compiled into CHNGFILE\n CHNGCPY2   copybook, compiled into CHNGFILE\n CHNGDOCU   chngfile documentation\n CHNGEXMP   additional chngfile examples\n CHNGFILE   cobol: change strings, convert fixed length files\n CHNGPARM   input to chngfile\n CHNGPROC   chngfile jcl\n CHNGTSTA   chngfile example: jcl\n CHNG005B   chngfile example: changed data - before  (ymd)\n CHNG005C   chngfile example: input parms\n CHNG005F   chngfile example: changed data - after   (cymd + 300 days)\n COBNEAT    clean-up Cobol programs\n COBNEAT1   parm input for cobneat\n COBNOTE    cobneat documentation\n COBNRUN    jcl for cobneat\n CXPARM     input for MIS0400B - cobol syntax validation\n CX002B     cobol II compile proc including cobol syntax validation\n CX003B     cobol 3 compile proc\n DOCCHNG    cobol shell - standard program change comment\n DOCCNS1    cobol shell - send messages to consoles\n DOCCSV     cobol shell - logic to easily generate .csv records\n DOCDOC     cobol shell - documentation plug-in\n DOCEND     cobol shell - end-of-program marker\n DOCHDG1    cobol shell - 8.5 x 14 headings\n DOCHDG2    cobol shell - 8.5 x 11 headings\n DOCID      cobol shell - preformatted cobol program syntax\n DOCIDCAM   cobol shell - IDCAMS standard step JCL\n DOCIEBG    cobol shell - IEBGENER standard step JCL\n DOCIEFBR   cobol shell - IEFBR14 standard step JCL\n DOCJOB     jcl shell   - job jcl\n DOCLINE    cobol shell - standard comment line\n DOCLOAD    cobol shell - load static input into ws table\n DOCPARM    cobol shell - standard parm layout\n DOCPRINT   cobol shell - standard print/break logic\n DOCPROB    cobol shell - batch procedure division\n DOCPROC    jcl shell   - proc jcl\n DOCPROO    cobol shell - cics procedure division\n DOCREPRO   cobol shell - REPRO standard step JCL\n DOCRIGHT   cobol shell - cobol right-justify a number\n DOCRULE    cobol shell - cobol length ruler\n DOCTOP     cobol shell - standard job template\n DOCWSB     cobol shell - batch working storage\n DOCWSO     cobol shell - cics working storage\n FTPGDG     discussion and example of FTPing files to mainframe\n HIGHEXT    documentation: high dataset extent notification system\n HSMDOCU    documentation for the hsm log consolidation system\n JCI0049B   count cobol PIC clauses\n JCLNEAT    clean-up JCL jobs and procs\n JCLNEAT1   parm input for jclneat\n JCLNOTE    jclneat and jclsplt documentation\n JCLNRUN    jcl for jclneat\n JCLSPLT    split long JCL lines\n JCLSPLT1   parm input for jclsplt\n JCLSRUN    jcl for jclsplt\n JESJOB2    jcl for MIS0525B: purge/alter jes jobs/reports\n JMISB1D    date symbolic update for PMISB1D\n JMIS20D    example date symbolic update job\n J0049B     jcl for JCI0049B\n MHPB6      JCL for MIS0550B\n MHP0775B   purge records based on date in file\n MID97      see OFFSET1\n MID98      see OFFSET1\n MID99      see OFFSET1\n MISA1      see HIGHEXT\n MISA1010   see HIGHEXT\n MISA1030   see HIGHEXT\n MISA1040   see HIGHEXT\n MISA2      see HIGHEXT\n MISA2030   see HIGHEXT\n MISA2040   see HIGHEXT\n MISA9      see HIGHEXT\n MISA9010   see HIGHEXT\n MISA9020   see HIGHEXT\n MISA9040   see HIGHEXT\n MISA9050   see HIGHEXT\n MISA9060   see HIGHEXT\n MISA9070   see HIGHEXT\n MISA9130   see HIGHEXT\n MISBI      proc for MIS0590B\n MISB1      consolidate hsm activity records\n MISB1020   input to MISB1\n MISB1030   input to MISB1\n MIS0081B   update report data or insert lines into reports\n MIS0133B   update report data or insert lines into reports\n MIS0380B   delete MANTISSA RMS-ONLINE reports from repository\n MIS0400B   edit cobol programs for invalid commands\n MIS0425B   place dates/other data in input parms\n MIS0440B   see HIGHEXT\n MIS0465B   consolidate hsm activity records\n MIS0470B   maintain hsm activity records\n MIS0475B   maintain hsm activity records\n MIS0500B   change date symbolics in jcl\n MIS0520B   generate tape dsn volume list for jcl\n MIS0525B   submit commands to alter jobs in the jes queue\n MIS0540B   given a dataset mask, determine if a match\n MIS0550B   turn an hl7 stream into sep rcds\n MIS0585B   see HIGHEXT\n MIS0590B   build smtp mail\n MIS0655B   wait for parm value to change / CICS to startup\n MIS0660B   change offset value for j-jobs\n MIS0685B   send messages/set condition codes\n MIS0700B   delay run until parm time, update time for next job\n MIS10      proc for MIS0500B (see JMIS20D PMIS20D)\n MIS10010   input to offset date processing\n MIS11      proc for MIS0380B\n MIS11010   input to MIS0380B\n MIS11030   input to MIS0380B\n MIS12      proc for MIS0081B and MIS0133B\n MIS12070   input parm for MIS0081B and MIS0133B\n MIS20      example of proc with date symbolics\n MIS34      maintain hsm activity records\n MIS34010   input to MIS34\n MIS34020   input to MIS34\n MIS34040   input to MIS34\n M0425B     JCL for testing MIS0425B\n M0655A     jcl to test MIS0655B\n M0655A0T   MIS0655B time tracking parm\n M0655A01   Y/N parm releases MIS0655B to continue running\n M0655A02   MIS0655B example input parm - wait for up to 5 hours\n M0655B     jcl to test MIS0655B\n M0655B0T   MIS0655B time tracking parm\n M0655B01   Y/N parm releases MIS0655B to continue running\n M0655B02   MIS0655B example input parm - wait for time of day\n M0655B03   MIS0655B example input parm - wait for 'Y'\n M0685B     proc for MIS0685B\n M0685P1    input parm for MIS0685B\n M0685P2    input parm for MIS0685B\n M0700B     test MIS0700B\n M0700P     time tracking parm for MIS0700B\n M0775B     jcl and documentation for MHP0775B\n OFFSET1    documentation for 'offset date' processing\n OFFSET2    documentation for 'offset date' processing\n PARM0060   input to MIS0590B: build smtp mail\n PMISA1D    see HIGHEXT\n PMISA2D    see HIGHEXT\n PMISA9D    see HIGHEXT\n PMISB1D    jcl for MIS0465B\n PMIS20D    example of job with date symbolics\n PMIS34W    jcl for MIS0470B\n PRNTCPY1   copybook, compiled into PRNTFILE\n PRNTCPY2   copybook, compiled into PRNTFILE\n PRNTDOCU   print files with column markers\n PRNTFILE   cobol: print files with column markers\n PRNTPARM   print files with column markers\n PRNTPROC   print files with column markers\n PULLCPY1   copybook, compiled into PULLFILE\n PULLCPY2   copybook, compiled into PULLFILE\n PULLCPY3   copybook, compiled into PULLFILE\n PULLDOCU   pullfile documentation\n PULLDSN    pull dsn's from jcl\n PULLDSNS   pull dsn's from jcl and sort\n PULLFILE   cobol: pull strings/records from files\n PULLPARM   input to pullfile\n PULLPROC   jcl for pullfile\n PULL001    example of PULLFILE\n STVDOCU    documentation for STV0400B\n STV0110C   cics: hex / dec conversions\n STV0115C   cics: julian/gregorian online conversion & STV0400B testing\n STV0150B   cobol call program: center a 79 byte field\n STV0270B   cobol call program: center a 40 byte field\n STV0280B   cobol call program: patient age calculation\n STV0295B   cobol call program: return month name and day suffix\n STV0320B   cobol call program: time conversion\n STV0400B   cobol call program: y2k date/time conversion program\n STV0405B   cobol call program: edit a cymd date\n STV0410B   cobol call program: julian/gregorian date conversion\n STV0420B   cobol call program: nbr of days between dates\n STV0530B   cobol call program: convert number to alpha equivalent\n STV0530T   program used for testing STV0530B\n STV0805B   cobol call program: return day of the week\n STV110M    cics: map for STV0110C\n STV115M    cics: map for STV0115C\n STV1270B   removed: see STV0150B and STV0270B\n STV1280B   removed: see STV0280B\n STV1295B   cics: cobol call program: month name/day suffix\n STV1320B   cics: cobol call program: military/standard time\n STV1400B   cics: cobol call program: online version of stv0400b\n STV1405B   cics: cobol call program: edit dates\n STV1410B   cics: cobol call program: julian/gregorian conversion\n STV1420B   cics: cobol call program: nbr of days between dates\n STV1805B   cics: cobol call program: return day of the week\n STV0400T   cobol program to test STV0400B\n S0400B     JCL to invoke STV0400T for testing STV0400B\n S0530B     JCL to invoke STV0530T for testing STV0530B\n TAPEDD     jcl and documentation for MIS0520B\n XLT04650   alter strings in VB lrecl 32700 files\n XLT04660   remove pages from report if totals are zeroes or blank\n X04650     jcl for XLT04650\n X04650P    input parms for X04650\n X04660     jcl for running XLT04660\n X04660D    documentation for XLT04660\n X04660P    input parms for X04660\n X12FILE    simple X12 example input file\n X12INPUT   X12 field description list\n X12SHOW    generate X12 field descriptions\n X12SRUN    jcl for X12SHOW\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$UPDATE": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01%\\x00B\\x01\\x191_\\x01 \\x07\\x0f\\x08 \\x00\\x97\\x00F\\x00\\x00\\xd4\\xc9\\xe2\\xf1\\xf4\\xf6@@@@'", "ispf": {"version": "01.37", "flags": 0, "createdate": "2019-11-11T00:00:00", "modifydate": "2020-03-10T08:20:42", "lines": 151, "newlines": 70, "modlines": 0, "user": "MIS146"}, "text": "\n  Recent update documentation\n\n\n  2020-01-30\n    Change MIS0425B to call STV0400B dynamic rather than static\n    Add logic to XLT04650 to only alter strings within lrecl 32700\n      records if wrapped in EDI separator or EOR characters\n    Add member S0400A for testing the 80/20 year window in STV0400B\n\n  2020-01-01\n    Add member FTPGDG - example of FTPing files to mainframe\n    Add member XLT04660 - discard print pages when totals are zero\n    Add member X04660D to further document XLT04660\n    Add member X04660 and X04660P for running XLT04660\n    Alter MIS0590B to format SMTP \"Date:\" lines\n    Alter PARM0060 to specify 'From' and 'to' and 'reply-to' SMTP lines\n    Alter DOCCSV to allow for variable working field lengths\n\n  2019-11-19\n    Merged member $UTILITY into $DOC and removed $UTILITY\n    Add members S0400B and STV0400T for testing STV0400B\n    Add member CHNGEXMP to show additional CHNGFILE examples\n    Add member M0425B - JCL for testing MIS0425B\n    Add member STV0530B - convert number to alpha equivalent\n    Add members S0530B and STV0530T for testing STV0530B\n    Add member STV0150B - center a 79 byte message (below)\n    Add member STV0270B - center a 40 byte message (below)\n    Remove STV1270B since a duplicate of STV0270B\n    Remove STV1280B since a duplicate of STV0280B\n    Rename \"TST\" jobs and other members to match program name\n    Alter all programs to generate lower-case display statements\n\n    Altered the wait-on-event program MIS0655B:\n      a target wait-until time is entered as HH:MM -\n      if the delay is set high, like three minutes, then once the\n      specifed time arrives there still could be a delay of up to\n      three minutes before the program continues.  this was changed\n      to reset the delay to fall on the specified time exactly.\n      Reworked program to make logic more streamlined.\n\n    Added logic to JCLNEAT:\n      add ability to attempt to keep file names within comments\n      in uppercase when comments are being converted to lowercase.\n\n    CHNGFILE:\n      expand logic for #CNV# - allow converting numbers such as\n      '   1 ' to '00001' internally and as output in files.\n\n    PULLFILE:\n      convert messages to lowercase. adjust IF indenting.\n      improvements to PULLDOCU documentation.\n\n    STV0400B:\n      get current date and time using function rather than ACCEPT.\n      add 'H:M:SP' time format and rename time formats:\n        'HMSS  ' to 'HMP   '\n        'H:M SS' to 'H:M P '\n        'H:MSS ' to 'H:MP  '\n      handle changes to STV0320B - allow for 8 digit time converions.\n\n    STV0320B:\n      expand time length to 8 digits to allow including seconds when\n        converting military and standard times\n\n    STV0150B:\n      center a 79 byte field.  generally used when generating reports\n      and you want the contents of a field to appear centered on the\n      report.  Can also pass \"XX\" and have the program return\n      \"YOUR INSTITUTION NAME\" centered in the field, or pass \"XXL\"\n      to have the same string returned in lower-case, etc.\n      Alter the programs to pass whetever your institution uses...\n\n      Example:  05  WS-CALL-STV0270B      PIC  X(08)  VALUE 'STV0270B'.\n                05  HDG-TITLE             PIC  X(40).\n                MOVE 'USA'                TO HDG-TITLE.\n                CALL WS-CALL-STV0270B USING HDG-TITLE.\n                HDG-TITLE is now:\n                             '        UNITED STATES OF AMERICA        '\n\n                MOVE 'USL'                TO HDG-TITLE.\n                CALL WS-CALL-STV0270B USING HDG-TITLE.\n                HDG-TITLE is now:\n                             '        United States of America        '\n\n    STV0270B:\n      center a 40 byte field.  see STV0150B.\n\n\n  2019-10-23\n    Found an issue in COBNEAT where Cobol comments were not\n      being converted to lower-case when over on the far right.\n    Added the ability to indicate which records were changed by COBNEAT.\n\n    Added logic to JCLNEAT to convert file names within comments\n      to upper-case.\n    Added logic to JCLNEAT to convert words containing numbers\n      to upper-case while leaving non-numerics unchanged:\n      For example string \" ex\" with \"W\" conversion code:\n        \"EXTRAPOLATE\" \"EXEDI540\"  \"EXAMINE\" \"EXGEN120\"\n      For example string \" ex\" with \"N\" conversion code:\n        \"extrapolate\" \"EXEDI540\"  \"examine\" \"EXGEN120\"\n\n  2019-10-10\n    So I wrote another program to solidify the whole JCL cleanup\n      process.  The new program - JCLSPLT - allows users to\n      split long JCL lines prior to re-formatting with JCLNEAT.\n      This will allow users to generate space on the right for\n      documentation, and reduce the clutter of excessively long\n      JCL lines.  I had to write a new program, rather than\n      update JCLNEAT, because JCLNEAT alters items in-place - it\n      only does rewrites on records rather than writing records\n      to a separate file, which allows adding additional records\n      (the result of the split process).\n\n  2019-10-03\n    COBNEAT has been changed to better handle locating PERFORM\n      statements when embedded within IF statements.\n    Added logic to format SORT statements.\n    Added reserved words to reserved word table in COBNEAT1.\n    Addressed issue when splitting \"ELSE IF\" statements into two\n      separate lines.\n    Added ability to properly place lines following \"ELSE IF\" statements\n      when not splitting into two separate lines.\n    Display statements have been revised.\n    New capability to limit which records within a Cobol program\n      are altered by the program.\n    New capability to limit which changes are displayed, to reduce\n      SYSOUT file sizes when altering large programs.\n    Updated documentation related to these changes.\n\n  2019-09-20\n    Found an issue with COBNEAT where, under rare circumstances,\n      it might move Cobol paragraph names to unwanted locations.\n    Added additional test display statements.\n    Added a parameter to allow users to specify the initial\n      \"Cobol paragraph name prefix length\" when renumbering Cobol\n      paragraph names.\n    Added a display message if attempting to renumber a Cobol\n      paragraph and it expands the length beyond 30.\n    For field names ending in position 72, fixed an issue where the\n      character in position 72 was being left behind when moving\n      fields to the left.\n    Further documentation was added to COBNOTE.\n\n  2019\n    Further updates to file 488 and 489\n\n  2000\n    Initial submission to CBT\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE488": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04c\\x00G\\x01 \\x07\\x0f\\x01 \\x07\\x0f\"T\\x00!\\x00!\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf9@@@'", "ispf": {"version": "04.99", "flags": 0, "createdate": "2020-03-10T00:00:00", "modifydate": "2020-03-10T22:54:47", "lines": 33, "newlines": 33, "modlines": 0, "user": "CBT-499"}, "text": "//***FILE 488 is from Jim Iannone and contains utilities, mostly    *   FILE 488\n//*           written in COBOL, that help control the daily         *   FILE 488\n//*           production at his site.  There are many utilities     *   FILE 488\n//*           included here.  Please see members $DOC, $INDEX,      *   FILE 488\n//*           and $INDEX2 to see some of the details of what        *   FILE 488\n//*           these utilities do, and how they work.                *   FILE 488\n//*                                                                 *   FILE 488\n//*           It is well worth investigating these utilities        *   FILE 488\n//*           for production control purposes, and as a help        *   FILE 488\n//*           for Operations.                                       *   FILE 488\n//*                                                                 *   FILE 488\n//*           These are utilities developed over 20 years at        *   FILE 488\n//*           St. Vincent Medical Center in Toledo, Ohio.           *   FILE 488\n//*                                                                 *   FILE 488\n//*           St. Vincents is now part of Mercy Health Partners,    *   FILE 488\n//*           which is controlled by Catholic Health Partners       *   FILE 488\n//*           of Cincinnati. This all recently merged into          *   FILE 488\n//*           \"Bon Secours Mercy Health\".                           *   FILE 488\n//*                                                                 *   FILE 488\n//*           They were submitted by, and primarily authored by:    *   FILE 488\n//*                                                                 *   FILE 488\n//*           Jim Iannone                                           *   FILE 488\n//*           Systems / Applications Programmer                     *   FILE 488\n//*           Mercy Health Partners                                 *   FILE 488\n//*           Toledo, Ohio                                          *   FILE 488\n//*           jiannon@me.com                                        *   FILE 488\n//*                                                                 *   FILE 488\n//*           --------                                              *   FILE 488\n//*           Overview                                              *   FILE 488\n//*           --------                                              *   FILE 488\n//*                                                                 *   FILE 488\n//*           See file $DOC                                         *   FILE 488\n//*                                                                 *   FILE 488\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CHNGCALL": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\"\\x01\\x19\\x07O\\x01\\x192?\\x104\\x05i\\x05k\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2019-03-15T00:00:00", "modifydate": "2019-11-19T10:34:22", "lines": 1385, "newlines": 1387, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  CHNGCALL: replace strings in files'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    CHNGCALL.\n       AUTHOR.        MERCY HEALTH PARTNERS.\n      ******************************************************************\n      *@@@ II replace strings within passed data\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     email:  jiannon@me.com\n      *\n      ******************************************************************\n      * Date written: 03/29/96\n      * Author      : Jim Iannone\n      *\n      *               create CHNGCALL from CHNGFILE to make\n      *               line at a time changes to passed data\n      *\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' WORKING STORAGE CHNGCALL START '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-SET-CODE             PIC S9(04)    VALUE ZERO COMP.\n           05  WS-DEFAULT-CODE         PIC S9(04)    VALUE ZERO COMP.\n           05  WS-PARM01-MAX           PIC  999      VALUE ZERO.\n           05  WS-DAY-NBR              PIC  99       VALUE ZERO.\n           05  WS-LEN1                 PIC S9(05)    VALUE ZERO.\n           05  WS-LEN2                 PIC S9(05)    VALUE ZERO.\n           05  WS-FIND-POS             PIC  9(05)    VALUE ZERO.\n           05  WS-LEN-DIFF             PIC  9(05)    VALUE ZERO.\n           05  WS-AHEAD-LOC            PIC  9(05)    VALUE ZERO.\n           05  WS-RCD-N                PIC  9(09)    VALUE ZERO.\n           05  WS-F-MAX                PIC  9(05)    VALUE ZERO.\n           05  WS-F-LEN                PIC  9(05)    VALUE ZERO.\n           05  WS-F-POS                PIC S9(04)    VALUE ZERO.\n           05  WS-F-MPOS               PIC S9(04)    VALUE ZERO.\n           05  WS-F-FLAG               PIC  X        VALUE SPACE.\n           05  WS-F-PULL               PIC  X        VALUE SPACE.\n           05  WS-F-SAVE-POS           PIC  9(04)    VALUE ZERO.\n           05  WS-F-AHEAD-POS          PIC  9(05)    VALUE ZERO.\n           05  WS-F-TYPE               PIC  X        VALUE SPACE.\n           05  WS-R-MAX                PIC  9(05)    VALUE ZERO.\n           05  WS-R-LEN                PIC  9(05)    VALUE ZERO.\n           05  WS-R-POS                PIC S9(04)    VALUE ZERO.\n           05  WS-R-MPOS               PIC S9(04)    VALUE ZERO.\n           05  WS-R-FLAG               PIC  X        VALUE SPACE.\n           05  WS-R-PULL               PIC  X        VALUE SPACE.\n           05  WS-R-ADJ                PIC  X        VALUE SPACE.\n           05  WS-R-AHEAD-POS          PIC  9(05)    VALUE ZERO.\n           05  WS-MATH-VALUE           PIC  9(12)    VALUE ZERO.\n           05  WS-MATH-INC             PIC  9(05)    VALUE ZERO.\n           05  WS-HOLD-IN              PIC  X(06)    VALUE SPACE.\n           05  WS-FILE-LEN             PIC  9(05)    VALUE ZERO.\n           05  WS-HOLD-DATE            PIC  X(20)    VALUE SPACE.\n           05  WS-ODO-PRE              PIC  9(06)    VALUE ZERO.\n           05  WS-ODO-POST             PIC  9(06)    VALUE ZERO.\n           05  WS-UNPACK-6             PIC  9(06)    VALUE ZERO.\n\n       01  WS-LARGE-FIELDS.\n           05  WS-F-DATA               PIC  X(10000) VALUE SPACE.\n           05  FILLER REDEFINES WS-F-DATA.\n               10  WS-F-DATA-1         PIC  X.\n               10  FILLER              PIC  X(9999).\n           05  WS-F-HOLD-DATA          PIC  X(10000) VALUE SPACE.\n           05  WS-R-DATA               PIC  X(10000) VALUE SPACE.\n           05  WS-R-HOLD-DATA          PIC  X(10000) VALUE SPACE.\n           05  WS-ADD-DATA             PIC  X(80)    VALUE SPACE.\n           05  WS-PRE-DATA             PIC  X(44)    VALUE SPACE.\n\n       01  WS-VARIABLE-FIELD.\n           05  WS-HOLD-PACKED.\n               10  WS-F-HOLD-PRE       PIC  X\n                                       OCCURS 1 TO 9999 TIMES\n                                       DEPENDING ON WS-ODO-PRE.\n               10  WS-PACK-4           PIC  9(07)  COMP-3.\n               10  WS-F-HOLD-POST      PIC  X\n                                       OCCURS 1 TO 9999 TIMES\n                                       DEPENDING ON WS-ODO-POST.\n\n       01  WS-COND-FIELDS.\n           05  WS-COND-DATA                          VALUE SPACE.\n               10  WS-COND-CODE        PIC  X(04).\n               10  FILLER              PIC  X.\n               10  WS-COND-DAY         PIC  XX.\n               10  WS-COND-DAY-N REDEFINES WS-COND-DAY\n                                       PIC  99.\n               10  FILLER              PIC  X.\n               10  WS-COND-FLAG        PIC  X.\n           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-1-CYMD.\n               10  WS-1-CYMD-CC        PIC  XX.\n               10  WS-1-CYMD-YY        PIC  XX.\n               10  WS-1-CYMD-MM        PIC  XX.\n               10  WS-1-CYMD-DD        PIC  XX.\n           05  FILLER REDEFINES WS-1-CYMD.\n               10  FILLER              PIC  XX.\n               10  WS-1-CYMD-YMD       PIC  X(06).\n\n       01  WS-SUBSCRIPTS.\n           05  WS-SUB1                 PIC  9(05)    VALUE ZERO.\n           05  WS-SUB2                 PIC  9(05)    VALUE ZERO.\n           05  WS-SUB3                 PIC  9(05)    VALUE ZERO.\n           05  WS-SUB4                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB5                 PIC  9(05)    VALUE ZERO.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-RCD-CNT         PIC S9(09)    VALUE ZERO.\n           05  WS-REWRITE-RCD-CNT      PIC S9(09)    VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  WS-END-PARM01-SW        PIC  X        VALUE 'N'.\n               88  END-OF-PARM01                     VALUE 'Y'.\n               88  MORE-PARM01-RCDS                  VALUE 'N'.\n           05  WS-END-CHANGED-SW       PIC  X        VALUE 'N'.\n               88  END-OF-CHANGED                    VALUE 'Y'.\n               88  MORE-CHANGED-RCDS                 VALUE 'N'.\n           05  WS-DIFF-SW              PIC  X        VALUE SPACE.\n           05  WS-SPACE-SW             PIC  X        VALUE SPACE.\n           05  WS-REWRITE-SW           PIC  X        VALUE SPACE.\n           05  WS-WRITE-SW             PIC  X        VALUE SPACE.\n           05  WS-EDIT-S-SW            PIC  X        VALUE SPACE.\n           05  WS-REPLACE-SW           PIC  X        VALUE SPACE.\n           05  WS-CALC-POS-SW          PIC  X        VALUE SPACE.\n           05  WS-CONVERT-SW           PIC  X        VALUE SPACE.\n           05  WS-IGNORE-ERR-SW        PIC  X        VALUE SPACE.\n           05  WS-COND-CODE-SW         PIC  X        VALUE SPACE.\n           05  WS-POINT-SW             PIC  X        VALUE SPACE.\n               88  POINTER-RCD                       VALUE ' ' 'F'\n                                                     'N' 'R' 'S'.\n\n       01  WS-PARM-TABLE.\n           05  WS-PARM-LINES           PIC  X(5680)  VALUE SPACE.\n           05  WS-PARM-LINE REDEFINES WS-PARM-LINES\n                                       OCCURS 80 TIMES.\n               10  WS-LEN              PIC  9(04).\n               10  WS-POS              PIC  9(04).\n               10  WS-MPOS             PIC  9(04).\n               10  WS-INCL             PIC  99.\n               10  WS-CNT              PIC  99.\n               10  WS-FPOS             PIC  9(04).\n               10  WS-PNT1             PIC  X.\n               10  WS-PNT2             PIC  X.\n               10  WS-TYPE             PIC  X.\n               10  WS-FLAG             PIC  X.\n               10  WS-PULL             PIC  X.\n               10  WS-ADJ              PIC  X.\n               10  WS-SUPPR            PIC  X.\n               10  WS-DATA             PIC  X(44).\n\n      *    YEAR 2000 COMPATIBLE DATE ROUTINE\n       01  WS-STV0400B-FIELDS.\n           05  STV0400B-DATA           PIC  X(10)   VALUE SPACE.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-ERROR      PIC  X(06).\n               10  STV0400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-CYMD       PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAYS       PIC  X(05).\n               10  FILLER              PIC  X(05).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAY        PIC  X(09).\n               10  STV0400B-DAY-NBR    PIC  X.\n           05  STV0400B-DATA2          PIC  X(10)   VALUE SPACE.\n           05  STV0400B-IN             PIC  X(06)   VALUE SPACE.\n           05  STV0400B-OUT            PIC  X(06)   VALUE SPACE.\n\n      *\n      *    format as a standard CHNGFILE parm entry\n      *\n      *    ...+....1....+....2....\n      *                                   1         2         3\n      *    TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+...\n      *\n       01  PARM01-RECORD.\n           05  PARM01-COMMENT          PIC  X.\n           05  PARM01-TYPE             PIC  X.\n           05  PARM01-INCLUDE-CNT      PIC  XX.\n           05  PARM01-POINT-12.\n               10  PARM01-POINT1       PIC  X.\n               10  PARM01-POINT2       PIC  X.\n           05  PARM01-FLAG             PIC  X.\n           05  PARM01-POS              PIC  X(04).\n           05  PARM01-MAX-POS          PIC  X(04).\n           05  PARM01-PULL-PUT         PIC  X.\n           05  PARM01-ADJUST           PIC  X.\n           05  PARM01-LEN              PIC  X(04).\n           05  FILLER                  PIC  XX.\n           05  PARM01-DATA             PIC  X(44).\n           05  PARM01-FILL             PIC  X(05).\n           05  PARM01-NO-USE           PIC  X(08).\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  CHNGCALL END  '.\n\n       LINKAGE SECTION.\n\n       01  PARM-FIELD.\n           05  LS-FILE-LEN             PIC  X(04).\n           05  LS-IGNORE-ERR-SW        PIC  X.\n           05  LS-SUPPRESS-DISPLAY     PIC  X.\n           05  LS-RETURN-CODE          PIC  9(05).\n           05  LS-PARM-RCD1            PIC  X(80).\n           05  LS-PARM-RCD2            PIC  X(80).\n           05  LS-DATA                 PIC  X(10000).\n\n      /\n\n       PROCEDURE DIVISION USING PARM-FIELD.\n\n       0100-PROGRAM-ENTRY.\n\n           INITIALIZE WS-WORK-FIELDS.\n           INITIALIZE WS-LARGE-FIELDS.\n           INITIALIZE WS-COND-FIELDS.\n           INITIALIZE WS-SUBSCRIPTS.\n           INITIALIZE WS-COUNT-FIELDS.\n           INITIALIZE WS-SWITCHES.\n           INITIALIZE WS-PARM-TABLE.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           CALL 'STV0400B' USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-CYMD                 TO WS-1-CYMD.\n\n           IF LS-FILE-LEN NUMERIC\n               MOVE LS-FILE-LEN               TO WS-FILE-LEN\n               MOVE LS-IGNORE-ERR-SW          TO WS-IGNORE-ERR-SW\n           ELSE\n               DISPLAY '**** CHNGCALL file length not specified'\n               MOVE +0100                     TO WS-RETURN-CODE.\n           IF WS-RETURN-CODE = ZERO\n               MOVE 'X'                       TO WS-EDIT-S-SW\n               PERFORM 0400-LOAD-LINKAGE THRU\n                       0400-LOAD-LINKAGE-EXIT.\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                      TO WS-READ-RCD-CNT\n               MOVE SPACE                     TO WS-DIFF-SW\n               PERFORM 0700-READ-CHANGED\n                   UNTIL END-OF-CHANGED.\n\n           IF WS-IGNORE-ERR-SW = 'Y'\n             IF LS-SUPPRESS-DISPLAY = SPACE\n               DISPLAY '**** Ignore date convert error switch = y'.\n           IF LS-SUPPRESS-DISPLAY = SPACE\n               DISPLAY '**** File length specified ' WS-FILE-LEN\n               DISPLAY '**** Change records read   ' WS-READ-RCD-CNT\n               DISPLAY '**** PARM records accepted ' WS-PARM01-MAX\n               DISPLAY '**** Records updated       ' WS-REWRITE-RCD-CNT\n               DISPLAY '**** CHNGCALL EOJ encountered '.\n\n           IF WS-RETURN-CODE = ZERO\n               IF WS-COND-CODE-SW = 'Y'\n                 IF LS-SUPPRESS-DISPLAY = SPACE\n                     DISPLAY '**** CHNGCALL cond code ' WS-SET-CODE\n                         ' requested by user'\n                     MOVE WS-SET-CODE         TO LS-RETURN-CODE\n                 ELSE\n                     MOVE WS-SET-CODE         TO LS-RETURN-CODE\n               ELSE\n                   MOVE WS-DEFAULT-CODE       TO LS-RETURN-CODE\n           ELSE\n               DISPLAY '**** CHNGCALL cond code ' WS-RETURN-CODE\n                       ' sent by program'\n               MOVE WS-RETURN-CODE            TO LS-RETURN-CODE.\n\n           GOBACK.\n\n      ****************************************\n      *    LOAD A WS TABLE WITH UP TO 80 RECORDS FROM PARM 01\n      *    (UP TO 40 CHANGES)\n      ****************************************\n       0400-LOAD-LINKAGE.\n           IF WS-READ-RCD-CNT = 1\n               IF PARM01-FLAG = SPACE OR 'N' OR 'S'\n                   MOVE LS-PARM-RCD2          TO PARM01-RECORD\n               ELSE\n                   MOVE WS-SUB1               TO WS-PARM01-MAX\n                   GO TO 0400-LOAD-LINKAGE-EXIT\n           ELSE\n           IF WS-READ-RCD-CNT > 1\n               MOVE WS-SUB1                   TO WS-PARM01-MAX\n               GO TO 0400-LOAD-LINKAGE-EXIT\n           ELSE\n               MOVE LS-PARM-RCD1              TO PARM01-RECORD.\n\n           ADD 1                              TO WS-READ-RCD-CNT.\n           IF PARM01-COMMENT = '*'\n               GO TO 0400-LOAD-LINKAGE.\n           IF WS-SUB1 > 79\n               GO TO 0400-LOAD-LINKAGE.\n           MOVE ZERO                          TO WS-F-POS WS-LEN1\n                                                 WS-F-MPOS.\n      ****************************************\n      *    EDIT PARM ENTRIES\n      ****************************************\n           IF PARM01-INCLUDE-CNT = SPACE\n               MOVE '00'                      TO PARM01-INCLUDE-CNT\n           ELSE\n           IF PARM01-INCLUDE-CNT NOT NUMERIC\n               DISPLAY '**** Include count not numeric'\n               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE\n               GO TO 0400-LOAD-LINKAGE.\n           IF PARM01-POS NUMERIC\n               MOVE PARM01-POS                TO WS-F-POS.\n           IF PARM01-MAX-POS NUMERIC\n               MOVE PARM01-MAX-POS            TO WS-F-MPOS.\n           IF PARM01-LEN NUMERIC\n               MOVE PARM01-LEN                TO WS-LEN1\n           ELSE\n           IF PARM01-DATA = SPACE OR LOW-VALUE\n               DISPLAY '**** Length required if data = spaces'\n               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n               MOVE +0401                     TO WS-RETURN-CODE\n               GO TO 0400-LOAD-LINKAGE\n           ELSE\n           IF PARM01-LEN = 'CCCC'\n                PERFORM 0600-CALC-PARM-LEN\n                   VARYING WS-LEN2 FROM 44 BY -1\n                   UNTIL WS-LEN2 < 1\n           ELSE\n               DISPLAY '**** Parm length not numeric'\n               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n               MOVE +0402                     TO WS-RETURN-CODE\n               GO TO 0400-LOAD-LINKAGE.\n\n           IF WS-F-POS > WS-FILE-LEN\n               DISPLAY '**** Parm position > file length'\n               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n               MOVE +0403                     TO WS-RETURN-CODE\n               GO TO 0400-LOAD-LINKAGE.\n           IF WS-F-MPOS > WS-FILE-LEN\n               DISPLAY '**** Max position > file length'\n               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n               MOVE +0404                     TO WS-RETURN-CODE\n               GO TO 0400-LOAD-LINKAGE\n           ELSE\n           IF WS-F-MPOS = ZERO\n               MOVE WS-FILE-LEN               TO WS-F-MPOS.\n           IF PARM01-TYPE = 'S'\n               IF PARM01-PULL-PUT = 'P'\n                   DISPLAY '**** S not allowed with P'\n                   DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n                   MOVE +0405                 TO WS-RETURN-CODE\n                   GO TO 0400-LOAD-LINKAGE.\n           IF PARM01-TYPE = 'R'\n               IF PARM01-POINT-12 = SPACE\n                   AND WS-F-POS < 1\n                   DISPLAY '**** R with no pointers: pos > 0 req'\n                   DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n                   MOVE +0406                 TO WS-RETURN-CODE\n               ELSE\n               IF PARM01-FLAG = '+' OR '-'\n                   PERFORM 0450-EDIT-PARM\n                   IF WS-DIFF-SW > SPACE\n                       PERFORM 0480-DISPLAY-POINTER-ERR.\n           IF PARM01-TYPE = 'A'\n               IF WS-FILE-LEN = 80\n                   MOVE WS-FILE-LEN           TO WS-LEN1\n               ELSE\n                   DISPLAY '** A : requires lrecl of 80 '\n                   MOVE +0407                 TO WS-RETURN-CODE\n                   GO TO 0400-LOAD-LINKAGE.\n           IF WS-LEN1 > WS-FILE-LEN\n               OR WS-LEN1 < 1\n               DISPLAY '**** Parm length < 1 or > file length'\n               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n               MOVE +0408                     TO WS-RETURN-CODE\n               GO TO 0400-LOAD-LINKAGE.\n\n           IF WS-EDIT-S-SW = SPACE OR 'N' OR 'S'\n               IF PARM01-TYPE = WS-EDIT-S-SW\n                   MOVE 'X'                   TO WS-EDIT-S-SW\n                   IF PARM01-FLAG = 'L'\n                       DISPLAY '**** Space/N/S line 2: L flag ignored'\n                       DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n                   ELSE\n                       CONTINUE\n               ELSE\n                   MOVE 'X'                   TO WS-EDIT-S-SW\n                   DISPLAY '**** Space/N/S should occur in pairs'\n                   DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n                   MOVE +0409                 TO WS-RETURN-CODE\n                   GO TO 0400-LOAD-LINKAGE\n           ELSE\n           IF PARM01-TYPE = SPACE OR 'N' OR 'S'\n               MOVE PARM01-TYPE               TO WS-EDIT-S-SW\n               IF PARM01-ADJUST = '1' OR '2'\n                   DISPLAY '**** Space/N/S 1: insert fnd with find/pull'\n                   DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n                   MOVE +0410                 TO WS-RETURN-CODE\n               ELSE\n               IF PARM01-FLAG = '+' OR '-'\n                   PERFORM 0450-EDIT-PARM\n                   IF WS-DIFF-SW > SPACE\n                       PERFORM 0480-DISPLAY-POINTER-ERR\n                   ELSE\n                       CONTINUE\n               ELSE\n                   CONTINUE\n           ELSE\n               MOVE 'X'                       TO WS-EDIT-S-SW.\n\n           IF PARM01-TYPE = 'A'\n               PERFORM 0450-EDIT-PARM\n               IF WS-DIFF-SW > SPACE\n                   PERFORM 0480-DISPLAY-POINTER-ERR.\n\n           COMPUTE WS-F-MAX = WS-LEN1 + WS-F-POS - 1.\n           IF WS-F-MAX > WS-F-MPOS\n               DISPLAY '**** Len + pos > max pos or file length'\n               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n               MOVE +0411                     TO WS-RETURN-CODE\n               GO TO 0400-LOAD-LINKAGE.\n           ADD 1                              TO WS-SUB1.\n           MOVE WS-LEN1                       TO WS-LEN(WS-SUB1).\n           MOVE WS-F-POS                      TO WS-POS(WS-SUB1).\n           MOVE WS-F-MPOS                     TO WS-MPOS(WS-SUB1).\n           MOVE ZERO                          TO WS-CNT(WS-SUB1).\n           MOVE ZERO                          TO WS-FPOS(WS-SUB1).\n           MOVE PARM01-INCLUDE-CNT            TO WS-INCL(WS-SUB1).\n           MOVE PARM01-POINT1                 TO WS-PNT1(WS-SUB1).\n           MOVE PARM01-POINT2                 TO WS-PNT2(WS-SUB1).\n           MOVE PARM01-FLAG                   TO WS-FLAG(WS-SUB1).\n           MOVE PARM01-PULL-PUT               TO WS-PULL(WS-SUB1).\n           MOVE PARM01-TYPE                   TO WS-TYPE(WS-SUB1).\n           MOVE PARM01-ADJUST                 TO WS-ADJ(WS-SUB1).\n           MOVE PARM01-COMMENT                TO WS-SUPPR(WS-SUB1).\n           MOVE PARM01-DATA                   TO WS-DATA(WS-SUB1).\n\n           GO TO 0400-LOAD-LINKAGE.\n\n       0400-LOAD-LINKAGE-EXIT. EXIT.\n\n       0450-EDIT-PARM.\n           MOVE SPACE                         TO WS-DIFF-SW.\n           IF PARM01-POINT-12 = SPACE\n               MOVE '1'                       TO WS-DIFF-SW\n           ELSE\n               MOVE ZERO                      TO WS-SUB2 WS-SUB3\n               PERFORM VARYING WS-SUB4 FROM 1 BY 1\n                   UNTIL WS-SUB4 > WS-SUB1\n                   IF WS-PNT1(WS-SUB4) = PARM01-POINT1\n                       ADD 1                  TO WS-SUB2\n                   END-IF\n                   IF WS-PNT2(WS-SUB4) = PARM01-POINT2\n                       ADD 1                  TO WS-SUB3\n                   END-IF\n               END-PERFORM\n               IF PARM01-POINT1 > SPACE\n                   AND WS-SUB2 = ZERO\n                   MOVE '2'                   TO WS-DIFF-SW\n               ELSE\n               IF PARM01-POINT2 > SPACE\n                   AND WS-SUB3 = ZERO\n                   MOVE '3'                   TO WS-DIFF-SW.\n\n       0480-DISPLAY-POINTER-ERR.\n           IF WS-DIFF-SW = '1'\n             IF PARM01-TYPE = 'A'\n                 DISPLAY '**** A records require a pointer'\n             ELSE\n             IF PARM01-TYPE = 'R'\n                 DISPLAY '**** R records with +/- require a pointer'\n             ELSE\n                 DISPLAY '**** Space/N/S line 1: +/- requires pointer'\n           ELSE\n           IF WS-DIFF-SW = '2'\n             IF PARM01-TYPE = 'A'\n                 DISPLAY '**** A record: no prev pointer 1 found'\n             ELSE\n             IF PARM01-TYPE = 'R'\n                 DISPLAY '**** R record: no prev pointer 1 found'\n             ELSE\n                 DISPLAY '**** Space/N/S line 1: no prev pointer '\n                         '1 found'\n           ELSE\n           IF PARM01-TYPE = 'A'\n               DISPLAY '**** A record: no prev pointer 1 found'\n           ELSE\n           IF PARM01-TYPE = 'R'\n               DISPLAY '**** R record: no prev pointer 1 found'\n           ELSE\n               DISPLAY '**** Space/N/S line 1: no prev pointer '\n                       '1 found'.\n\n           DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT.\n           MOVE +0412                         TO WS-RETURN-CODE.\n\n       0600-CALC-PARM-LEN.\n           IF PARM01-DATA(WS-LEN2: 1) NOT = SPACE\n               MOVE WS-LEN2                   TO WS-LEN1\n               MOVE ZERO                      TO WS-LEN2.\n\n      ****************************************\n      ****************************************\n      ****************************************\n      ****************************************\n      ****************************************\n\n       0700-READ-CHANGED.\n           ADD 1                              TO WS-READ-RCD-CNT.\n           PERFORM 0800-NEXT-RECORD THRU\n                   0800-NEXT-RECORD-EXIT.\n           MOVE 'Y'                           TO WS-END-CHANGED-SW.\n\n      ****************************************\n      *    LOOP THROUGH THE PARM RECORDS (IE: 1, 3, 5, 7, ETC)\n      *    CONTAINING THE SEARCH DATA.  REPLACE WITH DATA IN THE\n      *    ALTERNATE PARM RECORDS (IE: 2, 4, 6, 8, ETC).\n      *+**************************************\n       0800-NEXT-RECORD.\n           MOVE SPACE                         TO WS-REWRITE-SW.\n           MOVE SPACE                         TO WS-WRITE-SW.\n           MOVE WS-READ-RCD-CNT               TO WS-RCD-N.\n           PERFORM 1000-PARM-LOOP THRU\n                   1000-PARM-LOOP-EXIT\n                   VARYING WS-SUB1 FROM 1 BY 1\n                   UNTIL WS-SUB1 > WS-PARM01-MAX.\n\n           PERFORM 0900-INCREMENT-COUNT\n               VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > WS-PARM01-MAX.\n\n           IF WS-REWRITE-SW = 'Y'\n               PERFORM 3000-REWRITE-CHANGED.\n           IF WS-WRITE-SW = 'Y'\n               MOVE WS-ADD-DATA               TO LS-DATA\n               PERFORM 3000-REWRITE-CHANGED\n               DISPLAY '**** Add:  ' WS-ADD-DATA.\n\n       0800-NEXT-RECORD-EXIT. EXIT.\n\n       0900-INCREMENT-COUNT.\n           IF WS-FPOS(WS-SUB1) > ZERO\n             IF WS-INCL(WS-SUB1) NOT = 99\n               IF WS-CNT(WS-SUB1) < 99\n                   ADD 1                      TO WS-CNT(WS-SUB1)\n                   IF WS-CNT(WS-SUB1) > WS-INCL(WS-SUB1)\n                       MOVE ZERO              TO WS-CNT(WS-SUB1)\n                       MOVE ZERO              TO WS-FPOS(WS-SUB1).\n\n      ****************************************\n      *    IF STRING IS 5 BYTES, WS-F-MAX WILL BE (LRECL - STRING + 1).\n      *    IF MAX POS IS SET, WS-F-MAX WILL REFLECT MAX SEARCH POS.\n      ****************************************\n       1000-PARM-LOOP.\n           MOVE WS-TYPE(WS-SUB1)              TO WS-F-TYPE.\n           MOVE WS-SUB1                       TO WS-SUB5.\n           PERFORM 2700-LOAD-F-FIELDS.\n           MOVE WS-F-POS                      TO WS-F-SAVE-POS.\n           COMPUTE WS-F-MAX = WS-F-MPOS - WS-F-LEN + 1.\n           ADD 1 TO WS-SUB1 GIVING WS-SUB2.\n\n      ****************************************\n      *    TYPES SPACE/S/N REQUIRE AND USE Parm rcd 2\n      ****************************************\n      *    TYPE = SPACE  FIND AND REPLACE DATA, GO TO NEW RCD\n      *    TYPE = N      FIND AND REPLACE DATA, KEEP RCD, USE NEXT PARM\n      *    TYPE = S      FIND AND REPLACE DATA, KEEP RCD, USE SAME PARM\n      *    TYPE = F      SAVE STRING POS AND LENGTH\n      *    TYPE = R      PLACE/REPLACE DATA\n      *    TYPE = C      SET CONDITION CODE\n      *    TYPE = D      SET DEFAULT CONDITION CODE\n      *    TYPE = A      OVERLAY BLANK COMMENT LINE W/ COMMENT\n      ****************************************\n      *    WS-SUB1 = RECORD 1 DATA\n      *    WS-SUB2 = RECORD 2 DATA\n      *    WS-SUB3 = CALCULATED FIND OR REPLACE POSITION\n      *    WS-SUB4 = GENERAL HOLD FIELD FOR LOOPS\n      *              ALSO USED IN INSERT DELETE CALCULATIONS\n      *    WS-SUB5 = HOLDS WS-SUB1 OR WS-SUB2 IN 2700-LOAD-X-FIELDS\n      ****************************************\n           PERFORM 1300-GET-PUT-POS THRU\n                   1300-GET-PUT-POS-EXIT.\n           IF WS-F-TYPE = 'F'\n               PERFORM 1500-FIND THRU\n                       1500-FIND-EXIT.\n\n           IF WS-F-TYPE = 'S' OR 'N' OR SPACE\n               IF WS-REPLACE-SW = 'Y'\n                   PERFORM 1500-FIND THRU\n                           1500-FIND-EXIT.\n\n           IF WS-F-TYPE = 'R'\n               IF WS-REPLACE-SW = 'Y'\n                   PERFORM 1700-PUT-DATA THRU\n                           1700-PUT-DATA-EXIT.\n\n           IF WS-F-TYPE = 'C' OR 'D'\n               IF WS-REPLACE-SW = 'Y'\n                   PERFORM 2800-SET-RETURN-CODE THRU\n                           2800-SET-RETURN-EXIT.\n\n           IF WS-F-TYPE = 'A'\n               IF WS-REPLACE-SW = 'Y'\n                   PERFORM 3100-ADD-LINE THRU\n                           3100-ADD-LINE-EXIT.\n\n           IF WS-F-TYPE = SPACE OR 'N' OR 'S'\n               ADD 1                          TO WS-SUB1.\n\n       1000-PARM-LOOP-EXIT. EXIT.\n\n      ****************************************\n      *    IF THE PARM REFERS BACK TO A PREVIOUS PARM, SEE\n      *    IF THE FIELD WAS FOUND AND SAVE THE POSITION WHERE IT\n      *    WAS FOUND.\n      ****************************************\n       1300-GET-PUT-POS.\n           MOVE SPACE                         TO WS-REPLACE-SW.\n           IF WS-PNT1(WS-SUB1) NOT = SPACE\n               PERFORM VARYING WS-SUB4 FROM 1 BY 1\n                   UNTIL WS-SUB4 NOT < WS-SUB1\n                   IF WS-PNT1(WS-SUB1) = WS-PNT1(WS-SUB4)\n                       MOVE WS-TYPE(WS-SUB4)  TO WS-POINT-SW\n                       IF POINTER-RCD\n                         IF WS-FPOS(WS-SUB4) > ZERO\n                             MOVE WS-FPOS(WS-SUB4) TO WS-F-SAVE-POS\n                             MOVE 'Y'         TO WS-REPLACE-SW\n                         ELSE\n                             MOVE 'N'         TO WS-REPLACE-SW\n                             MOVE 80          TO WS-SUB4\n                         END-IF\n                       END-IF\n                   END-IF\n               END-PERFORM.\n           IF WS-PNT2(WS-SUB1) NOT = SPACE\n             IF WS-REPLACE-SW NOT = 'Y'\n                 PERFORM VARYING WS-SUB4 FROM 1 BY 1\n                     UNTIL WS-SUB4 NOT < WS-SUB1\n                     IF WS-PNT2(WS-SUB1) = WS-PNT2(WS-SUB4)\n                         MOVE WS-TYPE(WS-SUB4)  TO WS-POINT-SW\n                         IF POINTER-RCD\n                           IF WS-FPOS(WS-SUB4) > ZERO\n                               MOVE WS-FPOS(WS-SUB4) TO WS-F-SAVE-POS\n                               MOVE 'Y'         TO WS-REPLACE-SW\n                           ELSE\n                               MOVE 'N'         TO WS-REPLACE-SW\n                               MOVE 80          TO WS-SUB4\n                           END-IF\n                         END-IF\n                     END-IF\n                 END-PERFORM.\n           IF WS-REPLACE-SW = SPACE\n               MOVE 'Y'                       TO WS-REPLACE-SW.\n\n       1300-GET-PUT-POS-EXIT. EXIT.\n\n      ****************************************\n      *    'P' MEANS PULL DATA FOR LATER PLACEMENT\n      *    'L' MEANS START SEARCH AT POS > 1\n      ****************************************\n       1500-FIND.\n           IF WS-F-PULL = 'P'\n               PERFORM 1600-PULL-DATA THRU\n                       1600-PULL-DATA-EXIT\n           ELSE\n           IF WS-F-FLAG = 'L'\n               PERFORM 1800-FIND-STRING\n                   VARYING WS-SUB3 FROM WS-F-POS BY 1\n                   UNTIL WS-SUB3 > WS-F-MAX\n           ELSE\n           IF WS-F-POS > ZERO\n               IF WS-F-FLAG = '+' OR '-'\n                   MOVE WS-F-SAVE-POS         TO WS-SUB3\n                   MOVE WS-SUB1               TO WS-SUB5\n                   PERFORM 2700-LOAD-R-FIELDS\n                   PERFORM 2000-PLUS-MINUS-POS\n                   IF WS-CALC-POS-SW = 'N'\n                       CONTINUE\n                   ELSE\n                       PERFORM 1800-FIND-STRING\n               ELSE\n                   MOVE WS-F-POS              TO WS-SUB3\n                   PERFORM 1800-FIND-STRING\n           ELSE\n               PERFORM 1800-FIND-STRING\n                   VARYING WS-SUB3 FROM 1 BY 1\n                   UNTIL WS-SUB3 > WS-F-MAX.\n\n       1500-FIND-EXIT. EXIT.\n\n       1600-PULL-DATA.\n           MOVE WS-SUB1                       TO WS-SUB5.\n           PERFORM 2700-LOAD-R-FIELDS.\n           IF WS-R-POS = ZERO\n               OR WS-R-FLAG = '+' OR '-'\n               MOVE WS-F-SAVE-POS             TO WS-SUB3\n           ELSE\n               MOVE WS-R-POS                  TO WS-SUB3.\n           PERFORM 2000-PLUS-MINUS-POS.\n           IF WS-CALC-POS-SW = 'N'\n               GO TO 1600-PULL-DATA-EXIT.\n           MOVE WS-SUB3                       TO WS-FPOS(WS-SUB1).\n           MOVE LS-DATA(WS-SUB3: WS-R-LEN) TO WS-F-DATA.\n           IF WS-R-ADJ = 'S'\n               MOVE SPACE TO LS-DATA(WS-SUB3: WS-R-LEN)\n           ELSE\n           IF WS-R-ADJ = '3' OR '4'\n               PERFORM 2400-POSITION-DELETE.\n           IF WS-SUB3 > WS-FILE-LEN\n               GO TO 1600-PULL-DATA-EXIT.\n           MOVE WS-SUB2                       TO WS-SUB5.\n           PERFORM 2700-LOAD-R-FIELDS.\n           IF WS-R-PULL = 'P'\n               MOVE WS-F-DATA                 TO WS-R-DATA.\n           IF WS-R-POS = ZERO\n               OR WS-R-FLAG = '+' OR '-'\n               CONTINUE\n           ELSE\n               MOVE WS-R-POS                  TO WS-SUB3.\n           PERFORM 1900-REPLACE THRU\n                   1900-REPLACE-EXIT.\n\n       1600-PULL-DATA-EXIT. EXIT.\n\n      ****************************************\n      *    R parm - place data\n      *    IF  #+00000#XXXXXX# THEN CONVERT DATE OR TIME.\n      ****************************************\n       1700-PUT-DATA.\n           MOVE WS-SUB1                       TO WS-SUB5.\n           PERFORM 2700-LOAD-R-FIELDS.\n           IF WS-R-POS = ZERO\n               OR WS-R-FLAG = '+' OR '-'\n               MOVE WS-F-SAVE-POS             TO WS-SUB3\n           ELSE\n               MOVE WS-R-POS                  TO WS-SUB3.\n           MOVE 'Y'                           TO WS-CONVERT-SW.\n           IF WS-F-DATA-1 = '#'\n               AND WS-R-DATA(8: 1) = '#'\n               PERFORM 2700-CONVERT-NUMERICS.\n           IF WS-CONVERT-SW NOT = 'N'\n               PERFORM 1900-REPLACE THRU\n                       1900-REPLACE-EXIT.\n\n       1700-PUT-DATA-EXIT. EXIT.\n\n       1800-FIND-STRING.\n           IF WS-F-DATA-1 = '#'\n               MOVE SPACE                     TO WS-CONVERT-SW\n               PERFORM 1800-TEST-MATCH\n               IF WS-CONVERT-SW = 'Y'\n                   PERFORM 1800-MATCH\n               ELSE\n               IF WS-CONVERT-SW = 'N'\n                   CONTINUE\n               ELSE\n               IF WS-F-DATA(1: WS-F-LEN) =\n                               LS-DATA(WS-SUB3: WS-F-LEN)\n                   PERFORM 1800-MATCH\n               ELSE\n                   CONTINUE\n           ELSE\n           IF WS-F-DATA(1: WS-F-LEN) =\n                               LS-DATA(WS-SUB3: WS-F-LEN)\n               PERFORM 1800-MATCH.\n\n       1800-TEST-MATCH.\n           EVALUATE WS-F-DATA\n             WHEN '#CY#'\n             WHEN '#CYDDD#'\n             WHEN '#CYMD#'\n             WHEN '#DDD#'\n             WHEN '#HMM#'\n             WHEN '#HMSM#'\n             WHEN '#MD#'\n             WHEN '#MDCY#'\n             WHEN '#MDY#'\n             WHEN '#NBR#'\n             WHEN '#YDDD#'\n             WHEN '#YMD#'\n               IF LS-DATA(WS-SUB3: WS-F-LEN) NUMERIC\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#M/D/Y#'\n             WHEN '#Y/M/D#'\n               IF LS-DATA(WS-SUB3 + 2: 1) = '/'\n                   AND LS-DATA(WS-SUB3 + 5: 1) = '/'\n                   AND LS-DATA(WS-SUB3: 2) NUMERIC\n                   AND LS-DATA(WS-SUB3 + 3: 2) NUMERIC\n                   AND LS-DATA(WS-SUB3 + 6: 2) NUMERIC\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#M/D#'\n               IF LS-DATA(WS-SUB3 + 2: 1) = '/'\n                   AND LS-DATA(WS-SUB3: 2) NUMERIC\n                   AND LS-DATA(WS-SUB3 + 3: 2) NUMERIC\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#M/D/CY#'\n               IF LS-DATA(WS-SUB3 + 2: 1) = '/'\n                   AND LS-DATA(WS-SUB3 + 5: 1) = '/'\n                   AND LS-DATA(WS-SUB3: 2) NUMERIC\n                   AND LS-DATA(WS-SUB3 + 3: 2) NUMERIC\n                   AND LS-DATA(WS-SUB3 + 6: 4) NUMERIC\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#Y/DDD#'\n               IF LS-DATA(WS-SUB3 + 2: 1) = '/'\n                   AND LS-DATA(WS-SUB3: 2) NUMERIC\n                   AND LS-DATA(WS-SUB3 + 3: 3) NUMERIC\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#CY/DDD#'\n               IF LS-DATA(WS-SUB3 + 4: 1) = '/'\n                   AND LS-DATA(WS-SUB3: 4) NUMERIC\n                   AND LS-DATA(WS-SUB3 + 5: 3) NUMERIC\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#CY/M/D#'\n               IF LS-DATA(WS-SUB3 + 4: 1) = '/'\n                   AND LS-DATA(WS-SUB3 + 7: 1) = '/'\n                   AND LS-DATA(WS-SUB3: 4) NUMERIC\n                   AND LS-DATA(WS-SUB3 + 5: 2) NUMERIC\n                   AND LS-DATA(WS-SUB3 + 8: 2) NUMERIC\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#H:M:SM#'\n               IF LS-DATA(WS-SUB3 + 2: 1) = ':'\n                   AND LS-DATA(WS-SUB3 + 5: 1) = ':'\n                   AND LS-DATA(WS-SUB3: 2) NUMERIC\n                   AND LS-DATA(WS-SUB3 + 3: 2) NUMERIC\n                   AND LS-DATA(WS-SUB3 + 6: 2) NUMERIC\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#H:MM#'\n               IF LS-DATA(WS-SUB3 + 2: 1) = ':'\n                   AND LS-DATA(WS-SUB3: 2) NUMERIC\n                   AND LS-DATA(WS-SUB3 + 3: 2) NUMERIC\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#HMP#'\n               IF LS-DATA(WS-SUB3: 4) NUMERIC\n                   AND LS-DATA(WS-SUB3 + 4: 2) = 'AM' OR 'PM'\n                                                   OR 'am' OR 'pm'\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#H:M P#'\n               IF LS-DATA(WS-SUB3 + 2: 1) = ':'\n                   AND LS-DATA(WS-SUB3 + 5: 1) = ' '\n                   AND LS-DATA(WS-SUB3: 2) NUMERIC\n                   AND LS-DATA(WS-SUB3 + 3: 2) NUMERIC\n                   AND LS-DATA(WS-SUB3 + 6: 2) = 'AM' OR 'PM'\n                                                   OR 'am' OR 'pm'\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#MDY4#'\n             WHEN '#YMD4#'\n                 MOVE 'Y'                     TO WS-CONVERT-SW\n             WHEN OTHER\n                 CONTINUE\n           END-EVALUATE.\n\n       1800-MATCH.\n           MOVE ZERO                          TO WS-CNT(WS-SUB1).\n           MOVE WS-SUB3                       TO WS-FPOS(WS-SUB1).\n           IF WS-TYPE(WS-SUB1) = 'F'\n               MOVE WS-FILE-LEN               TO WS-SUB3\n           ELSE\n               MOVE WS-SUB2                   TO WS-SUB5\n               PERFORM 2700-LOAD-R-FIELDS\n               PERFORM 2700-CONVERT-NUMERICS\n               IF WS-CONVERT-SW NOT = 'N'\n                   PERFORM 1900-REPLACE THRU\n                           1900-REPLACE-EXIT.\n\n       1900-REPLACE.\n           MOVE SPACE                         TO WS-F-HOLD-DATA\n                                                 WS-R-HOLD-DATA\n                                                 WS-PRE-DATA.\n           PERFORM 2000-PLUS-MINUS-POS.\n           IF WS-CALC-POS-SW = 'N'\n               GO TO 1900-REPLACE-EXIT.\n      ****************************************\n      *    LOAD REPLACE DATA POINTERS\n      ****************************************\n           COMPUTE WS-R-MAX = WS-R-LEN + WS-SUB3 - 1.\n           IF WS-R-MAX > WS-R-MPOS\n               DISPLAY '**** Skipping: replacement length error'\n               DISPLAY '**** Position:  RCD ' WS-RCD-N\n                       '  POS ' WS-SUB3 '  LEN ' WS-R-LEN\n               DISPLAY '**** Data: ' WS-R-DATA(1: 44)\n               MOVE WS-FILE-LEN               TO WS-SUB3\n               GO TO 1900-REPLACE-EXIT.\n\n      ****************************************\n      *    '1' MEANS THAT REPLACE DATA IS BEING INSERTED\n      *    '2' MEANS THAT REPLACE DATA IS BEING INSERTED AND ADJUSTED\n      *    '3' MEANS THAT REPLACE DATA IS BEING DELETED\n      *    '4' MEANS THAT REPLACE DATA IS BEING DELETED AND ADJUSTED\n      *    'S' MEANS THAT REPLACE DATA IS SPACES\n      ****************************************\n           IF WS-R-ADJ = '1' OR '2'\n               IF WS-R-POS > ZERO\n                   PERFORM 2300-POSITION-INSERT\n                   GO TO 1900-REPLACE-EXIT\n               ELSE\n               IF (WS-F-LEN NOT = WS-R-LEN)\n                   PERFORM 2100-CALC-INSERT\n                   GO TO 1900-REPLACE-EXIT.\n           IF WS-R-ADJ = '3' OR '4'\n               PERFORM 2400-POSITION-DELETE\n               IF WS-SUB3 > WS-FILE-LEN\n                   GO TO 1900-REPLACE-EXIT\n               ELSE\n                   PERFORM 2700-POST-UPDATE\n                   GO TO 1900-REPLACE-EXIT.\n\n           IF WS-R-ADJ = 'S'\n               MOVE LS-DATA(WS-SUB3: WS-R-LEN) TO WS-PRE-DATA\n               MOVE SPACE    TO LS-DATA(WS-SUB3: WS-R-LEN)\n           ELSE\n               MOVE LS-DATA(WS-SUB3: WS-R-LEN) TO WS-PRE-DATA\n               MOVE WS-R-DATA(1: WS-R-LEN)\n                             TO LS-DATA(WS-SUB3: WS-R-LEN).\n           PERFORM 2700-POST-UPDATE.\n\n       1900-REPLACE-EXIT. EXIT.\n\n      ****************************************\n      *    DETERMINE FIND/REPLACEMENT LOCATION\n      ****************************************\n       2000-PLUS-MINUS-POS.\n           MOVE 'Y'                           TO WS-CALC-POS-SW.\n           MOVE WS-SUB3                       TO WS-SUB4 WS-FIND-POS.\n           IF WS-R-FLAG = '-'\n               COMPUTE WS-SUB4 = WS-SUB4 - WS-R-POS\n           ELSE\n           IF WS-R-FLAG = '+'\n               COMPUTE WS-SUB4 = WS-SUB4 + WS-R-POS\n           ELSE\n           IF WS-R-POS > ZERO\n               MOVE WS-R-POS                  TO WS-SUB4.\n           IF WS-SUB4 < 1\n               OR WS-SUB4 > WS-FILE-LEN\n               DISPLAY '**** Skipping: find or replacement length error'\n               DISPLAY '**** Position:  RCD ' WS-RCD-N\n                       '  POS ' WS-SUB4 '  LEN ' WS-R-LEN\n               DISPLAY '**** Data: ' WS-R-DATA(1: 44)\n               MOVE WS-FILE-LEN               TO WS-SUB3\n               MOVE 'N'                       TO WS-CALC-POS-SW\n           ELSE\n               MOVE WS-SUB4                   TO WS-SUB3.\n\n      ****************************************\n      *    IF REPLACEMENT LENGTH GREATER THAN FIELD:\n      *        LOGIC SIMILAR TO POSITION-INSERT PARAGRAPH\n      *    ELSE\n      *        DELETE THE DIFFERENCE IN THEIR LENGTHS (IE: ADJUST\n      *        DATA TO THE LEFT WS-LEN-DIFF AMOUNT)\n      *        IF DATA ADJUSTMENT REQUESTED, INSERT SPACES TO THE\n      *        RIGHT TO KEEP RIGHT-MOST DATA POSITIONALLY STABLE\n      ****************************************\n       2100-CALC-INSERT.\n           COMPUTE WS-F-AHEAD-POS = WS-SUB3 + WS-F-LEN.\n           COMPUTE WS-R-AHEAD-POS = WS-SUB3 + WS-R-LEN.\n           IF WS-F-LEN > WS-R-LEN\n               COMPUTE WS-LEN-DIFF = WS-F-LEN - WS-R-LEN\n               MOVE 'I'                       TO WS-DIFF-SW\n           ELSE\n               COMPUTE WS-LEN-DIFF = WS-R-LEN - WS-F-LEN\n               MOVE 'D'                       TO WS-DIFF-SW.\n           MOVE LS-DATA                       TO WS-F-HOLD-DATA\n                                                 WS-R-HOLD-DATA.\n           MOVE SPACE                         TO WS-SPACE-SW.\n           IF WS-DIFF-SW = 'I'\n               MOVE WS-R-HOLD-DATA(WS-R-AHEAD-POS: ) TO WS-PRE-DATA\n               MOVE WS-F-HOLD-DATA(WS-F-AHEAD-POS: ) TO\n                         WS-R-HOLD-DATA(WS-R-AHEAD-POS: )\n               MOVE WS-R-HOLD-DATA            TO WS-F-HOLD-DATA\n               IF WS-R-ADJ = '2'\n                 PERFORM 2500-FIND-SPACE-INS\n                     VARYING WS-SUB4 FROM WS-R-AHEAD-POS BY 1\n                     UNTIL WS-SUB4 > WS-R-MPOS\n                 IF WS-SPACE-SW = SPACE\n                     DISPLAY '**** Skipping: unable to insert spaces'\n                     DISPLAY '**** Record: ' WS-READ-RCD-CNT\n                         '  POS ' WS-SUB3 '  LEN ' WS-R-LEN\n                     DISPLAY '**** Data:   ' WS-R-DATA(1: 44)\n                     MOVE WS-FILE-LEN         TO WS-SUB3\n                 ELSE\n                     MOVE WS-R-DATA(1: WS-R-LEN)\n                               TO WS-F-HOLD-DATA(WS-SUB3: WS-R-LEN)\n                     MOVE WS-F-HOLD-DATA      TO LS-DATA\n                     PERFORM 2700-POST-UPDATE\n               ELSE\n                   MOVE WS-R-DATA(1: WS-R-LEN)\n                             TO WS-F-HOLD-DATA(WS-SUB3: WS-R-LEN)\n                   MOVE WS-F-HOLD-DATA        TO LS-DATA\n                   PERFORM 2700-POST-UPDATE\n           ELSE\n               COMPUTE WS-R-MAX = WS-R-MPOS - WS-LEN-DIFF\n               IF WS-R-ADJ = '2'\n                 PERFORM 2500-FIND-SPACE-DEL\n                     VARYING WS-SUB4 FROM WS-R-AHEAD-POS BY 1\n                     UNTIL WS-SUB4 > WS-R-MAX\n                 IF WS-SPACE-SW = SPACE\n                     DISPLAY '**** Skipping: unable to find del spaces'\n                     DISPLAY '**** Record: ' WS-READ-RCD-CNT\n                         '  POS ' WS-SUB3 '  LEN ' WS-R-LEN\n                     DISPLAY '**** Data:   ' WS-R-DATA(1: 44)\n                     MOVE WS-FILE-LEN         TO WS-SUB3\n                 ELSE\n                     MOVE WS-F-HOLD-DATA(WS-SUB3: ) TO WS-PRE-DATA\n                     MOVE WS-R-HOLD-DATA(WS-F-AHEAD-POS: ) TO\n                           WS-F-HOLD-DATA(WS-R-AHEAD-POS: )\n                     MOVE WS-R-DATA(1: WS-R-LEN)\n                             TO WS-F-HOLD-DATA(WS-SUB3: WS-R-LEN)\n                     MOVE WS-F-HOLD-DATA      TO LS-DATA\n                     PERFORM 2700-POST-UPDATE\n               ELSE\n                   MOVE WS-F-HOLD-DATA(WS-SUB3: ) TO WS-PRE-DATA\n                   MOVE WS-R-HOLD-DATA(WS-F-AHEAD-POS: ) TO\n                         WS-F-HOLD-DATA(WS-R-AHEAD-POS: )\n                   MOVE WS-R-DATA(1: WS-R-LEN)\n                           TO WS-F-HOLD-DATA(WS-SUB3: WS-R-LEN)\n                   MOVE WS-F-HOLD-DATA        TO LS-DATA\n                   PERFORM 2700-POST-UPDATE.\n\n      ****************************************\n      *    IF ADJUSTMENT REQUESTED, SEARCH FOR SPACES OCCURRING\n      *    AFTER FOUND FIELD.  IF FOUND, DELETE THE SPACES.\n      *\n      *    MOVE DATA FROM FOUND FIELD LOCATION TO THE RIGHT.\n      *    INSERT FIELD.\n      ****************************************\n       2300-POSITION-INSERT.\n           COMPUTE WS-R-AHEAD-POS = WS-SUB3 + WS-R-LEN.\n           MOVE 'D'                           TO WS-DIFF-SW.\n           MOVE LS-DATA                       TO WS-F-HOLD-DATA\n                                                 WS-R-HOLD-DATA.\n           MOVE SPACE                         TO WS-SPACE-SW.\n           MOVE WS-R-LEN                      TO WS-LEN-DIFF.\n           COMPUTE WS-R-MAX = WS-R-MPOS - WS-R-LEN.\n           IF WS-R-ADJ = '2'\n               PERFORM 2500-FIND-SPACE-DEL\n                   VARYING WS-SUB4 FROM WS-R-AHEAD-POS BY 1\n                   UNTIL WS-SUB4 > WS-R-MAX\n               IF WS-SPACE-SW = SPACE\n                   DISPLAY '**** Skipping: unable to find del spaces'\n                   DISPLAY '**** Record: ' WS-READ-RCD-CNT\n                       '  POS ' WS-SUB3 '  LEN ' WS-R-LEN\n                   DISPLAY '**** Data:   ' WS-R-DATA(1: 44)\n                   MOVE WS-FILE-LEN           TO WS-SUB3\n               ELSE\n                   MOVE WS-F-HOLD-DATA(WS-SUB3: ) TO WS-PRE-DATA\n                   MOVE WS-R-HOLD-DATA(WS-SUB3: ) TO\n                         WS-F-HOLD-DATA(WS-R-AHEAD-POS: )\n                   MOVE WS-R-DATA(1: WS-R-LEN)\n                           TO WS-F-HOLD-DATA(WS-SUB3: WS-R-LEN)\n                   MOVE WS-F-HOLD-DATA        TO LS-DATA\n                   PERFORM 2700-POST-UPDATE\n           ELSE\n               MOVE WS-F-HOLD-DATA(WS-SUB3: ) TO WS-PRE-DATA\n               MOVE WS-R-HOLD-DATA(WS-SUB3: ) TO\n                     WS-F-HOLD-DATA(WS-R-AHEAD-POS: )\n               MOVE WS-R-DATA(1: WS-R-LEN)\n                       TO WS-F-HOLD-DATA(WS-SUB3: WS-R-LEN)\n               MOVE WS-F-HOLD-DATA            TO LS-DATA\n               PERFORM 2700-POST-UPDATE.\n\n      ****************************************\n      *    MOVE ALL DATA FROM (FOUND POS + LEN) TO FOUND POS,\n      *    THEREBY DELETING THE FIELD.  OPTIONALLY INSERT SPACES\n      *    TO RE-ADJUST DATA.\n      ****************************************\n       2400-POSITION-DELETE.\n           COMPUTE WS-R-AHEAD-POS = WS-SUB3 + WS-R-LEN.\n           MOVE 'I'                           TO WS-DIFF-SW.\n           MOVE LS-DATA                       TO WS-F-HOLD-DATA\n                                                 WS-R-HOLD-DATA.\n           MOVE SPACE                         TO WS-SPACE-SW.\n           MOVE WS-R-LEN                      TO WS-LEN-DIFF.\n           COMPUTE WS-R-MAX = WS-R-MPOS - WS-R-LEN.\n           MOVE WS-F-HOLD-DATA(WS-R-AHEAD-POS: ) TO\n                         WS-R-HOLD-DATA(WS-SUB3: ).\n           MOVE WS-R-HOLD-DATA                TO WS-F-HOLD-DATA.\n           IF WS-R-ADJ = '4'\n               PERFORM 2500-FIND-SPACE-INS\n                   VARYING WS-SUB4 FROM WS-R-AHEAD-POS BY 1\n                   UNTIL WS-SUB4 > WS-R-MPOS\n               IF WS-SPACE-SW = SPACE\n                   DISPLAY '**** Skipping: unable to insert spaces'\n                   DISPLAY '**** Record: ' WS-READ-RCD-CNT\n                       '  POS ' WS-SUB3 '  LEN ' WS-R-LEN\n                   DISPLAY '**** Data:   ' WS-R-DATA(1: 44)\n                   MOVE WS-FILE-LEN           TO WS-SUB3\n               ELSE\n                   MOVE WS-F-HOLD-DATA        TO LS-DATA\n           ELSE\n               MOVE WS-F-HOLD-DATA            TO LS-DATA.\n\n       2500-FIND-SPACE-INS.\n           IF WS-R-HOLD-DATA(WS-SUB4: 1) = SPACE\n               MOVE 'Y'                       TO WS-SPACE-SW\n               COMPUTE WS-AHEAD-LOC = WS-SUB4 + WS-LEN-DIFF\n               MOVE WS-R-HOLD-DATA(WS-SUB4: ) TO\n                          WS-F-HOLD-DATA(WS-AHEAD-LOC: )\n               MOVE SPACE TO WS-F-HOLD-DATA(WS-SUB4: WS-LEN-DIFF)\n               MOVE WS-FILE-LEN               TO WS-SUB4.\n\n       2500-FIND-SPACE-DEL.\n           IF WS-R-HOLD-DATA(WS-SUB4: WS-LEN-DIFF) = SPACE\n               MOVE 'Y'                       TO WS-SPACE-SW\n               COMPUTE WS-AHEAD-LOC = WS-SUB4 + WS-LEN-DIFF\n               MOVE WS-F-HOLD-DATA(WS-AHEAD-LOC: ) TO\n                          WS-R-HOLD-DATA(WS-SUB4: )\n               MOVE WS-FILE-LEN               TO WS-SUB4.\n\n      ****************************************\n      *    HOLDING FIELDS\n      ****************************************\n       2700-LOAD-F-FIELDS.\n           MOVE WS-LEN(WS-SUB5)               TO WS-F-LEN.\n           MOVE WS-POS(WS-SUB5)               TO WS-F-POS.\n           MOVE WS-MPOS(WS-SUB5)              TO WS-F-MPOS.\n           MOVE WS-FLAG(WS-SUB5)              TO WS-F-FLAG.\n           MOVE WS-PULL(WS-SUB5)              TO WS-F-PULL.\n           MOVE WS-DATA(WS-SUB5)              TO WS-F-DATA.\n\n      ****************************************\n      *    HOLDING FIELDS, SOMETIMES CONTAINING LINE 1 DATA,\n      *    OTHER TIMES CONTAINING LINE 2 DATA.\n      ****************************************\n       2700-LOAD-R-FIELDS.\n           MOVE WS-LEN(WS-SUB5)               TO WS-R-LEN.\n           MOVE WS-POS(WS-SUB5)               TO WS-R-POS.\n           MOVE WS-MPOS(WS-SUB5)              TO WS-R-MPOS.\n           MOVE WS-FLAG(WS-SUB5)              TO WS-R-FLAG.\n           MOVE WS-PULL(WS-SUB5)              TO WS-R-PULL.\n           MOVE WS-ADJ(WS-SUB5)               TO WS-R-ADJ.\n           MOVE WS-DATA(WS-SUB5)              TO WS-R-DATA.\n\n      ****************************************\n      *    IF #NBR#, SEARCH WAS FOR A NUMERIC STRING.\n      *    ADD OR SUBTRACT TO THAT AMOUNT VIA THE #-00000# PARAMETER.\n      *\n      *    IF #XXXXXX#, SEARCH WAS FOR A DATE/TIME STRING.\n      *    ADD OR SUBTRACT THE NUMBER OF DAYS/MINUTES REQUESTED,\n      *    THEN CONVERT TO THE SAME OR A DIFFERENT FORMAT.\n      ****************************************\n       2700-CONVERT-NUMERICS.\n           IF WS-CONVERT-SW = 'Y'\n               IF WS-R-DATA(8: 5) = '#NBR#'\n                 IF WS-R-DATA(2: 1) = '+' OR '-' OR '/' OR '*'\n                     AND WS-R-DATA(3: 5) NUMERIC\n                     PERFORM 2700-DO-MATH\n                 ELSE\n                     CONTINUE\n               ELSE\n               IF WS-R-DATA(8: 8) = '#HMSM#' OR '#H:M:SM#' OR '#HMM#'\n                                 OR '#HMP#'  OR '#H:M P# ' OR '#H:MM#'\n                                 OR '#HMSP#' OR '#H:M:SP#' OR '#H:MP#'\n                   IF WS-R-DATA(2: 1) = 'I' OR 'D'\n                       AND WS-R-DATA(3: 5) NUMERIC\n                       MOVE 'HMSM  '          TO WS-HOLD-IN\n                       PERFORM 2700-CONVERT THRU\n                               2700-CONVERT-EXIT\n                   ELSE\n                       CONTINUE\n               ELSE\n               IF WS-R-DATA(2: 1) = '+' OR '-'\n                   AND WS-R-DATA(3: 5) NUMERIC\n                   MOVE 'CYMD  '          TO WS-HOLD-IN\n                   PERFORM 2700-CONVERT THRU\n                           2700-CONVERT-EXIT.\n\n       2700-DO-MATH.\n           MOVE ZERO                 TO WS-MATH-VALUE WS-MATH-INC.\n           MOVE LS-DATA(WS-SUB3: WS-F-LEN) TO WS-MATH-VALUE.\n           MOVE WS-R-DATA(3: 5)               TO WS-MATH-INC.\n           IF WS-R-DATA(2: 1) = '+'\n               ADD WS-MATH-INC TO WS-MATH-VALUE\n           ELSE\n           IF WS-R-DATA(2: 1) = '-'\n               SUBTRACT WS-MATH-INC FROM WS-MATH-VALUE\n           ELSE\n           IF WS-R-DATA(2: 1) = '*'\n               COMPUTE WS-MATH-VALUE = WS-MATH-INC * WS-MATH-VALUE\n           ELSE\n           IF WS-R-DATA(2: 1) = '/'\n               COMPUTE WS-MATH-VALUE = WS-MATH-VALUE / WS-MATH-INC.\n           COMPUTE WS-MATH-INC = 12 - WS-R-LEN + 1.\n           MOVE WS-MATH-VALUE(WS-MATH-INC: )  TO WS-R-DATA.\n\n      ****************************************\n      *    CONVERT +- NUMBER OF DAYS, OR INCREMENT/DECREMENT NUMBER\n      *    OF MINUTES, THEN PLACE IN DESIRED FORMAT\n      ****************************************\n       2700-CONVERT.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           IF WS-F-TYPE = 'R'\n               CONTINUE\n           ELSE\n           IF WS-F-DATA(2: 4) = 'MDY4' OR 'YMD4'\n               COMPUTE WS-ODO-POST = (WS-FILE-LEN - WS-SUB3) - 3\n               COMPUTE WS-ODO-PRE = (WS-FILE-LEN - WS-ODO-POST) - 4\n               MOVE LS-DATA                   TO WS-HOLD-PACKED\n               MOVE WS-PACK-4                 TO WS-UNPACK-6\n               IF WS-UNPACK-6 NOT NUMERIC\n                   DISPLAY '**** Packed field not numeric'\n                   DISPLAY '**** Record: ' WS-READ-RCD-CNT\n                           '  POS ' WS-SUB3 '  LEN ' WS-R-LEN\n                   DISPLAY '**** Data:   ' WS-PACK-4\n                   MOVE 'N'                   TO WS-CONVERT-SW\n                   GO TO 2700-CONVERT-EXIT\n               ELSE\n                   MOVE WS-UNPACK-6           TO STV0400B-DATA\n                                                 WS-HOLD-DATE\n                   IF WS-F-DATA(2: 4) = 'MDY4'\n                       MOVE '#MDY# '          TO WS-F-DATA\n                       MOVE 'MDY   '          TO STV0400B-IN\n                   ELSE\n                       MOVE '#YMD# '          TO WS-F-DATA\n                       MOVE 'YMD   '          TO STV0400B-IN\n           ELSE\n               MOVE LS-DATA(WS-SUB3: WS-F-LEN) TO STV0400B-DATA\n                                                       WS-HOLD-DATE\n               MOVE WS-F-DATA(2: 6)           TO STV0400B-IN.\n\n           MOVE WS-R-DATA(2: 6)               TO STV0400B-OUT.\n           INSPECT STV0400B-IN REPLACING ALL '#' BY SPACE.\n           CALL 'STV0400B' USING WS-STV0400B-FIELDS.\n           IF STV0400B-ERROR = 'ERROR'\n               DISPLAY '**** Skipping: unable to convert in data'\n               DISPLAY '**** Record: ' WS-READ-RCD-CNT\n                       '  POS ' WS-SUB3 '  LEN ' WS-R-LEN\n               DISPLAY '**** Data:   ' WS-HOLD-DATE\n               IF WS-IGNORE-ERR-SW = 'Y'\n                   MOVE WS-HOLD-DATE          TO WS-R-DATA\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n           ELSE\n               MOVE STV0400B-DATA             TO WS-HOLD-DATE\n               MOVE WS-HOLD-IN                TO STV0400B-IN\n               MOVE WS-R-DATA(9: 6)           TO STV0400B-OUT\n               INSPECT STV0400B-OUT REPLACING ALL '#' BY SPACE\n               CALL 'STV0400B' USING WS-STV0400B-FIELDS\n               IF STV0400B-ERROR = 'ERROR'\n                   DISPLAY '**** Skipping: unable to convert out data'\n                   DISPLAY '**** Record: ' WS-READ-RCD-CNT\n                           '  POS ' WS-SUB3 '  LEN ' WS-R-LEN\n                   DISPLAY '**** Data:   ' WS-HOLD-DATE\n                   IF WS-IGNORE-ERR-SW = 'Y'\n                       MOVE WS-HOLD-DATE      TO WS-R-DATA\n                   ELSE\n                       MOVE 'N'               TO WS-CONVERT-SW\n               ELSE\n                   MOVE STV0400B-DATA         TO WS-R-DATA.\n\n       2700-CONVERT-EXIT. EXIT.\n\n       2700-POST-UPDATE.\n           MOVE WS-SUB3                       TO WS-FPOS(WS-SUB5).\n           MOVE 'Y'                           TO WS-REWRITE-SW.\n           IF WS-SUPPR(WS-SUB1) NOT = 'A'\n               DISPLAY '**** Position:  RCD ' WS-RCD-N\n                         '  POS ' WS-SUB3 '  LEN ' WS-R-LEN.\n           IF WS-SUPPR(WS-SUB1) = SPACE OR 'I'\n               DISPLAY '**** Was : ' WS-PRE-DATA.\n           IF WS-SUPPR(WS-SUB1) = SPACE OR 'W'\n               DISPLAY '**** Is  : ' LS-DATA(WS-SUB3: 44).\n           IF WS-SUPPR(WS-SUB1) NOT = 'A'\n               IF WS-R-ADJ = '3' OR '4'\n                   DISPLAY '**** Del : ' WS-F-DATA(1: 44)\n               ELSE\n               IF WS-R-ADJ = '1' OR '2'\n                   DISPLAY '**** Ins : ' WS-R-DATA(1: 44)\n               ELSE\n                   DISPLAY '**** Data: ' WS-R-DATA(1: 44).\n           IF WS-TYPE(WS-SUB1) = 'N' OR 'F' OR 'R'\n               MOVE WS-FILE-LEN               TO WS-SUB3\n           ELSE\n           IF WS-TYPE(WS-SUB1) = 'S'\n               MOVE WS-FIND-POS               TO WS-SUB3\n           ELSE\n               MOVE WS-FILE-LEN               TO WS-SUB3\n               MOVE 80                        TO WS-SUB1.\n\n       2800-SET-RETURN-CODE.\n           MOVE WS-F-DATA                     TO WS-COND-DATA.\n           IF WS-COND-DAY NUMERIC\n             IF WS-COND-FLAG = 'W'\n                 MOVE SPACE                   TO WS-STV0400B-FIELDS\n                 MOVE WS-1-CYMD               TO STV0400B-CYMD\n                 MOVE 'CYMD  '                TO STV0400B-IN\n                 MOVE 'DAY   '                TO STV0400B-OUT\n                 CALL 'STV0400B' USING WS-STV0400B-FIELDS\n                 DISPLAY '**** STV0400B output: ' WS-STV0400B-FIELDS\n                 IF STV0400B-ERROR = 'ERROR'\n                     DISPLAY '**** STV0400B day calc error'\n                     MOVE +2800               TO WS-RETURN-CODE\n                 ELSE\n                 MOVE STV0400B-DAY-NBR        TO WS-DAY-NBR\n                 IF WS-DAY-NBR = WS-COND-DAY-N\n                     DISPLAY '**** Day of week match '\n                 ELSE\n                     GO TO 2800-SET-RETURN-EXIT\n             ELSE\n             IF WS-COND-FLAG = 'M'\n                 IF WS-COND-DAY = WS-1-CYMD-DD\n                     DISPLAY '**** Day of month match: ' WS-1-CYMD\n                 ELSE\n                     GO TO 2800-SET-RETURN-EXIT.\n\n           IF WS-COND-CODE NUMERIC\n               MOVE WS-COND-CODE              TO WS-SUB4\n               IF WS-SUB4 > 4095\n                   DISPLAY '**** Requested return code > 4095'\n                   MOVE +2800         TO WS-RETURN-CODE\n               ELSE\n               IF WS-F-TYPE = 'C'\n                   MOVE WS-SUB4       TO WS-SET-CODE\n                   MOVE 'Y'           TO WS-COND-CODE-SW\n               ELSE\n                   MOVE WS-SUB4       TO WS-DEFAULT-CODE.\n\n       2800-SET-RETURN-EXIT. EXIT.\n\n       3000-REWRITE-CHANGED.\n           ADD 1                              TO WS-REWRITE-RCD-CNT.\n\n       3100-ADD-LINE.\n           IF LS-DATA(1: 25) = '//*                      '\n                                 OR '//***********************'\n                                 OR '//*----------------------'\n               CONTINUE\n           ELSE\n               GO TO 3100-ADD-LINE-EXIT.\n           MOVE WS-F-DATA                     TO WS-ADD-DATA.\n           IF WS-F-DATA(15: 6) = 'YYMMDD'\n               MOVE WS-1-CYMD-YMD             TO WS-ADD-DATA(15: 6).\n           IF WS-F-DATA(44: 1) = '+'\n               ADD 1 TO WS-SUB1 GIVING WS-SUB4\n               IF WS-TYPE(WS-SUB4) = 'A'\n                   MOVE WS-DATA(WS-SUB4)      TO WS-ADD-DATA(44: )\n                   ADD 1                      TO WS-SUB1.\n           MOVE 'Y'                           TO WS-WRITE-SW.\n\n       3100-ADD-LINE-EXIT. EXIT.\n\n      ************************************ END CHNGCALL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CHNGCASE": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00F\\x01\\x180/\\x01\\x192?\\x11\\x03\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2018-10-29T00:00:00", "modifydate": "2019-11-19T11:03:46", "lines": 27, "newlines": 27, "modlines": 0, "user": "IANNONE"}, "text": "/*PRIORITY     01\n//useridJ  JOB (5000,'alter program case'),\n//             'alter program case',\n//             CLASS=x,\n//             MSGCLASS=x,\n//             MSGLEVEL=(1,1)\n//*-------------------------------------------------\n//JOBLIB   DD  DSN=userid.ISPF.OBJ,DISP=SHR\n//*-------------------------------------------------\n//CHNGCS   PROC SFX=,               *SFX=,\n//             PRG=program\n//*-------------------------------------------------\n//S010     EXEC PGM=CHNG0080,\n//             REGION=5120K,\n//             COND=(0,NE),\n//             PARM='0080N0000000000N    /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//CHANGED  DD  DISP=SHR,DSN=userid.ISPF.FILE488&SFX(&PRG)\n//OFFSET   DD  DUMMY\n//PARM01   DD  DISP=SHR,DSN=userid.ISPF.FILE488(CHNGCASP)\n//*-------------------------------------------------\n//         PEND\n//J010     EXEC CHNGCS\n//*-------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CHNGCASP": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\t\\x01\\x180/\\x01\\x19\\x01o\\x15\\x06\\x00<\\x00<\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-10-29T00:00:00", "modifydate": "2019-01-16T15:06:09", "lines": 60, "newlines": 60, "modlines": 0, "user": "IANNONE"}, "text": "*\n*  Convert case of program statements\n*\n*...+....1....+....2....\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n N00   00410000  0007  B START\n N00   00410000  0007  B start\n N00   00000000  0009  COND CODE\n N00   00000000  0009  cond code\n N00   00000000  0009  **** KEY\n N00   00000000  0009  **** Key\n N00   00000000  0010    display\n N00   00000000  0010    DISPLAY\n N00   00000000  0011  FILE STAT =\n N00   00000000  0011  File stat =\n N00   00000000  0011  **** DATE =\n N00   00000000  0011  **** Date =\n N00   00000000  0011  VSAM REASON\n N00   00000000  0011  VSAM reason\n N00   00000000  0013  **** FACILITY\n N00   00000000  0013  **** Facility\n N00   00000000  0013  READ ERROR ON\n N00   00000000  0013  read error on\n N00   00000000  0013  OPEN ERROR ON\n N00   00000000  0013  open error on\n N00   00000000  0014  SET BY PROGRAM\n N00   00000000  0014  set by program\n N00   00000000  0014  VSAM COMPONENT\n N00   00000000  0014  VSAM component\n N00   00000000  0016  REWRITE ERROR ON\n N00   00000000  0016  rewrite error on\n N00   00000000  0014  WRITE ERROR ON\n N00   00000000  0014  write error on\n N00   00000000  0014  **** PAGES OUT\n N00   00000000  0014  **** Pages out\n N00   00000000  0014  **** FILE STAT\n N00   00000000  0014  **** File stat\n N00   00000000  0015  **** RECORDS IN\n N00   00000000  0015  **** Records in\n N00   00000000  0015  DELETE ERROR ON\n N00   00000000  0015  delete error on\n N00   00000000  0015  EOJ ENCOUNTERED\n N00   00000000  0015  EOJ encountered\n N00   00000000  0015  WORKING STORAGE\n N00   00000000  0015  Working storage\n N00   00000000  0016  VSAM RETURN CODE\n N00   00000000  0016  VSAM return code\n N00   00000000  0019  **** RECORDS SORTED\n N00   00000000  0019  **** Records sorted\n N00   00000000  0019  PARM LENGTH IS ZERO\n N00   00000000  0019  Parm length is zero\n N00   00000000  0020  **** RECORDS WRITTEN\n N00   00000000  0020  **** Records written\n N00   00000000  0022  PARM DATE IS NOT VALID\n N00   00000000  0022  parm date is not valid\n N00   00000000  0024  PARM LENGTH IS EXCESSIVE\n N00   00000000  0024  Parm length is excessive\n N00   00000000  0035  NO RECORDS MATCH SELECTION CRITERIA\n N00   00000000  0035  No records match selection criteria\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CHNGCPY1": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x99\\x05?\\x01\\x00)\\x9f\\x15U\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1999-02-22T00:00:00", "modifydate": "2000-10-25T15:55:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "IANNONE"}, "text": "      *********************************\n      *  USED BY CHNGFILE\n      *********************************\n           SELECT CHANGED              ASSIGN TO CHANGED\n      *    SELECT CHANGED (ESDS)       ASSIGN TO AS-CHANGED\n                                       ACCESS MODE IS SEQUENTIAL\n      *********************************\n      **** ALTER: ORGANIZATION: SEQUENTIAL OR INDEXED\n                                       ORGANIZATION IS SEQUENTIAL\n      *                                ORGANIZATION IS INDEXED\n      *********************************\n      **** ALTER: RECORD KEY: USE IF INDEXED\n      *                                RECORD KEY IS CHANGED-KEY\n                                       FILE STATUS IS WS-STAT.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CHNGCPY2": {"ttr": 1549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x00\\x00\\x99\\x05?\\x01\\x00)\\x9f\\x15V\\x00\\x14\\x00\\x14\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "1999-02-22T00:00:00", "modifydate": "2000-10-25T15:56:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "IANNONE"}, "text": "      *********************************\n      *  USED BY CHNGFILE\n      *********************************\n       FD  CHANGED\n           RECORDING MODE IS F\n           BLOCK CONTAINS 0.\n\n      *********************************\n      **** ALTER: RECORD LENGTH: USE IF SEQUENTIAL\n       01  CHANGED-RECORD.\n           05  CHANGED-DATA            PIC  X(0080).\n\n      *********************************\n      **** ALTER: RECORD LENGTH: USE IF INDEXED\n      *01  CHANGED-RECORD.\n      *    02  CHANGED-DATA            PIC  X(0570).\n      *    02  FILLER REDEFINES CHANGED-DATA.\n      *        05  FILLER              PIC  XXX.\n      *        05  CHANGED-KEY         PIC  X(0009).\n      *        05  FILLER              PIC  X(0558).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CHNGDOCU": {"ttr": 1551, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x17\\x01\\x19\\x01o\\x01\\x191\\x8f\\x14R\\x01\\xec\\x08q\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2019-01-16T00:00:00", "modifydate": "2019-11-14T14:52:17", "lines": 492, "newlines": 2161, "modlines": 0, "user": "IANNONE"}, "text": "---------------------------------------------------------\n\n      CHNGFILE\n\n      Search for and replace strings in a file or pds member\n\n---------------------------------------------------------\n\n      !!  Linkage parm\n          -  4 byte numeric file lrecl (ie: 0001 TO 9999)\n          -  1 byte switch: 'y' = ignore date conversion errors\n               and expand date to keep columns lined up.\n          -  5 byte beginning record (begin changes at this record)\n             00000 = start changes at bof\n          -  5 byte ending record (end changes at this record)\n             00000 = continue changing through eof\n          -  1 byte switch: 'y' = when generating dates, include\n               offset in date calculations.  operations sets the\n               offset to -00001 when batch processing is delayed\n               and runs past midnight.\n          -  8 byte processing date.  when specified it is used\n               in place of current system date.  if the offset\n               switch above is 'y': if a hardcoded date is\n               specified the offset is ignored, else if generating\n               dates using CMD... the offset is considered.\n             date in cymd format, or CMD... or CMF...\n\n       PARM='0080N0000000000N00000000/'\n       PARM='0132N0000000000YCMD001/'\n       PARM='0080N0000500009NCMDX/'\n       PARM='0270N0000000000Y/'\n\n---------------------------------------------------------\n      allow up to 80 lines in the input parm\n---------------------------------------------------------\n\n      To use:  1. Update CHNGCPY1 and CHNGCPY2 in SYSP.CPYBKLIB.\n                  Indicate proper lrecl and record organization.\n\n               2. Recompile CHNGFILE, changing the load module name\n                  to CHNGxxxx, where xxxx is the record length\n                  of the file.\n                  (ie: CHNG0080 is used for updating members of a PDS)\n\n               3. Create an input parm for the PARM01 DD\n                  specifying what function will be performed\n\n               4. Be sure to pass the lrecl of the file in the\n                  linkage section at run-time.\n\n      THE NORMAL METHOD for finding and replacing data is via a\n      two record parm entry: line 1 is the find data,\n      line 2 is the replace data.  this is called a SPACE/N/S pair.\n      in the following example, the file is searched\n      for the 19 byte string 'string to find'. when found\n      it is overlayed with the 21 byte string 'REPLACEMENT DATA'.\n\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n  00   00000000  0019  string to find     (case sensitive)\n  00   00000000  0021  REPLACEMENT DATA\n\n\n      The exceptions to the 2 line format are noted under 'type'\n      below.\n\n  position 1   (*)\n       *     = commented line\n       W     = do not display 'WAS' records.\n       I     = do not display 'IS' records.\n       B     = do not display 'WAS' or 'IS' records.\n       A     = do not display 'WAS' or 'IS' records, or change position.\n\n  position 2   (T)     Type\n       SPACE = new record is loaded when data is found and\n               changed.  parm search restarts.\n               SPACE requires 2 parm line entries.\n       N     = same record is kept, next parm entry is used.\n               use when parm entries further down need to be accessed\n               while the same record is loaded.\n               N requires 2 parm line entries.\n       S     = same record is kept, same parm entry continues\n               to be used.  use when your find/replace logic needs\n               to be redriven for the same parm and same record.\n               example: changing ALL occurrences of ' ' to '-'.\n               S requires 2 parm line entries.\n       SPACE/N/S pair: use when searching for an existing date/time\n               and altering that found date/time.\n\n       F     = record is searched for a string.  position where\n               string is found is saved for passing to other\n               parm records.\n               same record is kept, next parm entry is used.\n               F requires 1 parm line entry.\n       R     = data is placed in the record, or data is deleted\n               from the record.\n               generally used when no previous find processing is\n               needed, ie: placing a string in all records in a file,\n               or deleting a column of data.\n               also used to perform repetitive updates after a string\n               is found (ie: make changes to lower records)\n               also used (with or without an F parm) to force data\n               insertion rather than data adjustment, as described\n               in (A) below.\n               same record is kept, next parm entry is used.\n               (the combination of F and R are similar to SPACE/N/S\n               entries. SPACE/N/S records are recommended).\n               R requires 1 parm line entry.\n       F/R pair: use when placing an internally generated date/time\n               into the file\n\n       A     = data is placed over a comment jcl line (//* ...).\n               if '+' is found in pos 44 of parm data, another\n               A record is assumed to exist, and this data is\n               appended to the previous data.\n               if YYMMDD is found in pos 15, it is replaced with\n               the current YYMMDD.\n               same record is kept, next parm entry is used.\n               A requires 1 parm line entry.\n       C     = a condition code may be generated by CHNG0080.\n               place the 4 byte condition code in pos 1-4 of the\n               data field.\n               new record is loaded, new parm entry is used.\n               C requires 1 parm line entry.\n\n               place a day of the week (01=mon ... 07=sun) in pos 6-7\n               and a 'W' in pos 9 to have the cond code set only on\n               that day of the week. otherwise leave blank.\n\n               place a day of the month (01 thru 31) in pos 6-7\n               and an 'M' in pos 9 to have the cond code set only on\n               that day of the month. otherwise leave blank.\n       D     = a default condition code may be set.  a 'C' record\n               (above) will override this code.  used to set a condition\n               when a string is NOT found.  all other 'C' logic applies.\n               new record is loaded, new parm entry is used.\n               D requires 1 parm line entry.\n\n  position 3   (II)    Include lines\n       ##    = generally used with a type F parm.  if following parms\n               reference this parm with a pointer (below), they will\n               only be processed if they occur within (II)\n               nbr of lines.\n               ignored on the second line of a SPACE/N/S pair.\n               00 = current record only\n               99 = all records\n\n               for SPACE/F/N/R/S records, when a string is found,\n               its starting location is saved.  later parms may\n               reference these starting locations.\n               if a parm references via a pointer a non\n               SPACE/F/N/R/S line, processing will continue,\n               ie: in a pointer chain (multiple parms using a\n               particular pointer) the (II) amount is ignored\n               and will not affect whether later parms are processed.\n\n               (II) can be used to control which updates occur after\n               a string is found, even if not in the line where\n               found.\n\n               example:   *TII12PPPPPMMMMPALLLL  1...+....1....+....2..\n                           F02A  00030000  0006  DSN01\n                           F02A  00000000  0011  DSN=DSN.ABC\n                            00A  00000000  0010  SPACE=(TRK\n                            00A  00000000  0010  SPACE=(CYL\n\n                  file:    //DSN01  DD  DSN=DSN.ABC\n                           //           DISP=(NEW,CATLG,DELETE),\n                           //           DCB=(DSORG=PS),LRECL=80,\n                           //           RECFM=FB,SPACE=(TRK,(20,5))\n\n                result:   the request is to change 'SPACE=(TRK' to\n                          'SPACE=(CYL' if the F lines are found.\n                          the space parameter is NOT changed.  'DSN01 '\n                          was found, and 'DSN=DSN.ABC' was found, but\n                          the SPACE/N/S line refers to the F lines\n                          via pointer 'A' which have an include amount\n                          of '02'.  the space parameter is 3 lines\n                          after the F line.\n\n  position 5   (1)     Pointer 1\n               generally used with a type F parm.  a pointer allows\n               following parms to refer back to previous parms.\n               it may be any character.\n               ignored on the second line of a SPACE/N/S pair.\n\n  position 6   (2)     Pointer 2\n               it may be any character.\n               same as pointer 1.  the pointers work with an OR\n               relationship, rather than an AND relationship.  ie:\n               if a parm uses pointer 1 and pointer 2 to refer back,\n               if the parms referenced by pointer 1 return negative,\n               and those by pointer 2 return positive, the parm IS\n               processed.\n               ignored on the second line of a SPACE/N/S pair.\n\n  position 7   (P)     Position flag\n       L     = position value (pos 8-9) is a starting location for a\n               string search, rather than a fixed search location.\n               ignored on the second line of a SPACE/N/S pair.\n       +     = offset (pos 8-9) is an amount ahead of the\n               found location.  if used by a parm referencing a\n               previous parm via a pointer, the location of the\n               string found by the referenced parm is used.\n               ie:  F parm finds 'DSN=' in pos 30.\n                    SPACE/N/S parm says +04 with string 'PDSMS'.\n                    if 'PDSMS' is found at pos 34, 2nd line of\n                    the SPACE/N/S is processed.\n       -     = offset (pos 8-9) is an amount behind the\n               found location.  if used by a parm referencing a\n               previous parm via a pointer, the location of the\n               string found by the referenced parm is used.\n\n  position 8   (PPPP)  Position or Offset\n       ####  = fixed position where search occurs.\n               if flag (above) is 'L', this is a starting position\n               for a string search.  if flag is '+ or '-', this\n               is an offset amount to whatever location is last\n               referenced.\n               values: 00-9999\n\n  position 12  (MMMM)  Max position\n       ####  = the maximum position in a record to be used in a\n               string search.\n               the maximum position where data can be inserted or\n               deleted when performing insert/delete adjusting.\n               ie: if adjusting replacement data in JCL, you might\n               not want '*', a continuation character in pos 72, to\n               move.  to avoid this, set the max pos to 71.\n               values: 00-9999\n\n  position 16  (P)     Pull/Put\n       P     = if referenced by line 1 of a SPACE/N/S pair, data\n               at the find location is saved for later processing.\n               if the adjust value is '2' or '3', the referenced\n               data is deleted after it is pulled.\n               if referenced by line 2 of a SPACE/N/S pair, the data\n               pulled via the line 1 parm is placed in the output,\n               or inserted if adjust value '1' or '2' is set.\n               (P) is ignored for R parms.\n\n               ------------------------------------------------\n               Example of re-arranging columns\n               ------------------------------------------------\n               *TII12PPPPPMMMMPALLLL  1...+....0....+.\n               AN00   00230000P30021\n               AN00   00100000P10021\n               AN00   01160000P30017\n               AN00   00340000P10017\n\n               - pull 21 bytes at pos 23.  delete from rcd.\n                   all data to the right is moved left.\n               - put 21 bytes at pos 10.  data is inserted.\n               - pull and put 17 bytes from pos 116 to pos 34.\n\n  position 17  (A)     Adjust\n       string manipulation functions, where aaa is the search string:\n       adjustment: aaabbb adjusted with 12345 becomes  12345bbb\n                   all data on the right is shifted diff bytes\n       overlay:    aaabbb overlayed with 12345 becomes 12345b\n       insertion:  aaabbb with 12345 inserted becomes  12345aaabbb\n                   all data on the right is shifted diff bytes\n       correction: data to the right is kept positionally stable\n\n       blank = data is overlayed\n       1     = SPACE/N/S:  data is adjusted\n               R parm:   data is inserted\n       2     = SPACE/N/S:  data is adjusted & corrected\n               R parm:   data is inserted & corrected\n               corrected = spaces are inserted/deleted to keep\n               data on the right of the spaces positionally stable.\n               use '2' when you want automatic data adjustment for\n               a SPACE/N/S pair, ie: regardless of whether the replace\n               string is longer or shorter than the found string, the\n               data on the right is adjusted to remain positionally\n               stable.\n       3     = data is deleted. data on right is moved left.\n       4     = data is deleted & corrected\n               spaces are inserted to keep data on the right\n               of the spaces positionally stable.\n       S     = spaces are placed at the position, regardless of data\n               entered in the data field.\n\n  position 18  (LLLL)  Length\n       ####  = length of data string.  if longer than actual data,\n               spaces are included in the search/replace.\n               ie:  string 'hello' length 07 - 'hello  ' is assumed.\n               'CCCC' = automatically calculate length.\n               values: 00001-9999,CCCC\n\n  position 24          Data to find or use for replacement\n               if line 1 of a SPACE/N/S pair: the string to find.\n               if line 2 of a SPACE/N/S pair: the string to use\n               for replacing the found string.\n               if a C parm: the condition code, day, and W or M flag.\n               if a D parm: the condition code, day, and W or M flag.\n               if an R parm: the replacement data.\n               if an A parm, the message data.\n               0-44 bytes of data\n\n               Search is case sensitive.  Use a 'U' or 'L' parm below\n               to convert the case of the searched file, if the case\n               of the search string can vary.\n\n               ------------------------------------------------\n               Note on numeric processing:\n               ------------------------------------------------\n                  '#CNV#' may be used in place of '#NBR#' to convert\n                    a non-numeric value such as\n                      '    1' to a numeric value of '00001'\n                      '  123' to a numeric value of '00123'\n                      '1    ' to a numeric value of '00001'\n                      '123  ' to a numeric value of '00123'\n                      use on line 1 of a space/n/s pair to convert\n                        the input data (internal to CHNGFILE)\n                      use on line 2 of a space/n/s pair to convert\n                        the output data (saved to the output file)\n\n               ------------------------------------------------\n               Use the following to alter the value of a NUMBER:\n               ------------------------------------------------\n                  use in line 1 of a space/n/s pair:\n                    #NBR#  search for a numeric value (LLLL) bytes long\n\n                  use in line 2 of a space/n/s pair:\n                    #+00000#NBR#\n\n                      the operation (+-/*) to perform\n                      the amount to alter the number by\n\n                      save output as (LLLL) bytes long\n\n               ------------------------------------------------\n               Use the following to sum a column of NUMBERS:\n               ------------------------------------------------\n                  use in line 1 of a space/n/s pair:\n                    #NBR#  search for a numeric value (LLLL) bytes long\n\n                  use in line 2 of a space/n/s pair:\n                    #S00000#NBR#\n\n                      the operation (sum) to perform\n                      00000 required\n\n               ------------------------------------------------\n               Use the following to alter the value of a DATE:\n               ------------------------------------------------\n                  use in line 1 of a space/n/s pair:\n                    #xxxxxx#\n\n                      the format of the date to find\n                      (ie: xxxxxx is placed in STV0400B-IN)\n\n                      be sure (LLLL) is valued to reflect the\n                      actual data length, not the parm length\n                      (#M/D/Y# would be coded as 0008, not 0005)\n\n                  use in line 2 of a space/n/s pair:\n                    #+00000#xxxxxx#\n\n                      the operation (past/future) to perform\n                      the number of days to adjust the date\n                      the format to write the date\n                      (ie: xxxxxx is placed in STV0400B-OUT)\n\n                      save output as (LLLL) bytes long\n\n                  line 1 data and line 2 data are used as input to\n                  STV0400B to calculate past and future dates, and to\n                  convert date formats\n\n                  if an R parm:\n                    system (w/wo offset) date is assumed and the\n                    data is formatted as line 2 data (above)\n\n                  order of operation:  input date is incremented\n                  first, then placed in xxxxxx format\n\n                  Example:  to convert '042397042497swartz...'\n                            to         '1997042319970424swartz...'\n\n                   N00   00010000  0006  #MDY#\n                   N00   00000000 10008  #+00000#CYMD#\n                    00   00090000  0006  #MDY#\n                    00   00000000 10008  #+00000#CYMD#\n\n                  Example:  to place an internally generated\n                            md date into  'FILEmmdd.TXT'\n                            giving        'FILE0423.TXT'\n\n                   F00A  00000000  0004  .TXT\n                   R00A -00040000  0004  #+00000#MDY#\n\n                Note:\n                  if LS-IGNORE-ERR-SW is set to 'y' in the\n                  linkage section at run-time, dates that are not\n                  valid will not be changed, but the field will\n                  still be reformatted the same as any fields that\n                  were valid so that all data will remain in the\n                  same column.\n                  if LS-IGNORE-ERR-SW is not set to 'y', invalid\n                  dates cause any field adjustment/insertion/\n                  deletion activity to be skipped.\n\n                PACKED DATES:\n                  4 byte dates may be converted to an unpacked format.\n                  use #MDY4# or #YMD4# in line 1.\n                  be sure (PPPP) reflects the position of the\n                  packed field and (LLLL) reflects the PACKED length\n                  (0004) as opposed to the unpacked length (6 or 7).\n                  Use (PPPP) on record 2 to place the date elsewhere.\n\n               ------------------------------------------------\n               Other examples using STV0400B\n               ------------------------------------------------\n                  To calculate age from a date in mdcy format in pos\n                  25 and place in position 40 for a length of 3:\n\n                   N00   00250000  0008  #MDCY#\n                   N00   00400000  0003  #+00000#AGE#\n\n                           2----+----3----+----4----+--\n                   result:      09081962       037\n\n               ------------------------------------------------\n               Use the following to alter the value of a TIME:\n               ------------------------------------------------\n                  use in line 1 of a space/n/s pair:\n                    #xxxxxx#\n\n                    search for a time value (LLLL) bytes long\n                    this is the format passed to STV0400B-IN\n\n                  use in line 2 of a space/n/s pair:\n                    #I00000#xxxxxx#  -or-\n                    #D00000#xxxxxx#\n\n                      the operation (increment/decrement) to perform\n                      the number of minutes to adjust the time\n                      the format to write the time\n                      (ie: xxxxxx is placed in STV0400B-OUT)\n\n                      be sure (LLLL) is valued to reflect the output\n\n                  line 1 data and line 2 data are used as input to\n                  STV0400B to calculate past and future times, and to\n                  convert time formats\n\n                  formats:\n                    'HMM   '      '1324      '\n                    'HMSM  '      '132400    '\n                    'HMSM8 '      '13240000  '\n                    'H:MM  '      '13:24     '\n                    'H:M:SM'      '13:24:00  '\n                    'HMP   '      '0124PM    '\n                    'HMSP  '      '012400PM  '\n                    'H:M P '      '01:24 PM  '\n                    'H:MP  '      '01:24PM   '\n                    'H:M:SP'      '01:24:00PM'\n\n                  order of operation:  input time is incremented\n                  first, then placed in xxxxxx format\n\n                  Example:  to convert 'Andrews 04:24 PM       '\n                            to         'Andrews 182400         '\n                            in position 9 and increment by two hours:\n\n                   N00   00009000  0008  #H:M P#\n                   N00   00009000  0006  #I00120#HMSM#\n\n               ------------------------------------------------\n               Use the following to alter a JCL SPACE= parameter\n               ------------------------------------------------\n                  use in line 1 of a space/n/s pair:\n                    #JCL#SPACE#   (set LLLL = 0006)\n\n                  use in line 2 of a space/n/s pair:\n                    SPACE=(...)   (set LLLL properly)\n\n                    search for 'SPACE=' and calculate length of\n                    entire SPACE parameter. allows replacing SPACE\n                    statements without knowing the statements length\n                    or contents.  include entire SPACE=(()) parameter\n                    as replacement, excluding trailing comma, if any.\n\n                    *TII12PPPPPMMMMPALLLL  1...+....0....+....\n                     F04A  00000000  0012  BDUTRANS(+1)\n                      04A  00000000  0006  #JCL#SPACE#\n                      00A  00000000 20017  SPACE=(TRK,(1,1))\n\n\n---------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CHNGEXMP": {"ttr": 1801, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01#\\x00F\\x01\\x191\\x8f\\x01\\x191\\x9f\\x10P\\x01\\xc3\\x00\\x0e\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.35", "flags": 0, "createdate": "2019-11-14T00:00:00", "modifydate": "2019-11-15T10:50:46", "lines": 451, "newlines": 14, "modlines": 0, "user": "IANNONE"}, "text": "\n-------------------\n CHNGFILE examples\n-------------------\n\n see CHNGDOCU for further clarification on individual columns\n\n\n\n* PLACE MONTH SHORT NAME IN FILENAME\n*\n*   example: before       file-to-server-mmm.dat\n*\n*            after        file-to-server-JAN.dat\n*\n*\n*...+....1....+....2....\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n F00A  00000000  0004  .dat\n R00A -00030000  0003  #-00000#MMM#\n\n\n\n* PLACE DATE INTO FTP FILENAME\n*\n*   If \"SVTR\" is found in member, place MDY formatted\n*     current date into filename in two places.  NOTE the\n*     second \"R\" parm is advanced by the previous \"R\" parm\n*     so the location is +11 rather than +15 - I fall for this\n*     myself even though I wrote the bloody thing.\n*\n*   example FTP member:\n*\n*     sign-on password\n*     put 'ACTP.SMSSSD.TRANAUD.AS400' SVTR122506.SOUT122506\n*     quit\n*\n*...+....1....+....2....\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n F00A  00000000  0004  SVTR\n R00A +00040000  0006  #+00000#MDY#\n R00A +00110000  0006  #+00000#MDY#\n\n\n\n* PLACE DAY NAME INTO FTP FILENAME\n*\n*   find .txt in filename and place day name into file name\n*     8 bytes prior to .txt for length of 2\n*\n*\n*   cd //svmn05s/vol1/MHPCMN/BExSAM/Download\n*   dele TUex1101.txt                   ;tuesday\n*   quit\n*\n*\n*...+....1....+....2....\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n F00A  00000000  0004  .txt\n R00A -00080000  0002  #+00000#DAY#\n\n\n\n* SET DATE IN JCL\n*\n*   Current date  11/14/2019\n*\n*   set DAYPREV dates to previous days date in M/D/Y format\n*\n*   set DATE= to end of previous year in CYMD format -\n*     so intermediate value for DATE= is:\n*     //             DATE='20181231'\n*     then convert to M/D/Y format\n*\n*   before (assumes DAYPREV symbolics were replaced the previous\n*           day, and DATE= was replaced previous year)\n*     //            DAYPREV3='11/10/19',\n*     //            DAYPREV4='11/09/19',\n*     //            DAYPREV5='11/08/19',\n*     //            DAYPREV7='11/06/19',\n*     //             DATE='12/31/17'\n*\n*   after:\n*     //            DAYPREV3='11/11/19',\n*     //            DAYPREV4='11/10/19',\n*     //            DAYPREV5='11/09/19',\n*     //            DAYPREV7='11/07/19',\n*     //             DATE='12/31/18'\n*\n*...+....1....+....2....\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n F00A  00000000  0009  DAYPREV3=\n R00A +00100000  0008  #-00003#M/D/Y#\n F00B  00000000  0009  DAYPREV4=\n R00B +00100000  0008  #-00004#M/D/Y#\n F00C  00000000  0009  DAYPREV5=\n R00C +00100000  0008  #-00005#M/D/Y#\n F00D  00000000  0009  DAYPREV7=\n R00D +00100000  0008  #-00007#M/D/Y#\n F00E  00160000  0005  DATE=\n R00E +00060000  0008  #+00000#CMDEY1#\n  00E  00220000  0008  #CYMD#\n  00E  00220000  0008  #+00000#M/D/Y#\n\n*\n*   subtract 10 days from current date and derive century-year,\n*   then update 'year=' symbolic in proc.\n*\n*   result    //             YEAR='2019',\n*\n*...+....1....+....2....\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n F00A  00000000  0005  YEAR=\n R00A +00060000  0004  #-00010#CY#\n\n\n* SUM A GIVEN COLUMN OF NUMBERS\n*\n*   Result displays in SYSOUT as  002189\n*\n*   000034\n*   000012\n*   001204\n*   000932\n*   000007\n*\n*\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n  00   00040000  0006  #NBR#\n  00   00000000  0006  #S00000#NBR#\n\n\n* SUM A GIVEN COLUMN OF NUMBERS\n*\n*   Internally convert non-numerics '    34' to numerics '000034'\n*   Result displays in SYSOUT as  002189\n*\n*       34\n*       12\n*     1204\n*      932\n*        7\n*\n*\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n  00   00040000  0006  #CNV#\n  00   00000000  0006  #S00000#NBR#\n\n\n* SUM A GIVEN COLUMN OF NUMBERS\n*\n*   Internally convert non-numerics '    34' to numerics '000034'\n*   Write out converted number to file\n*   Result displays in SYSOUT as  002416\n*\n*   before '    34'   after  '000034'\n*          '12    '          '000012'\n*          '  1204'          '001204'\n*          '   932'          '000932'\n*          '  234 '          '000234'\n*          '  7A  '          '  7A  '\n*\n*\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n  00   00040000  0006  #CNV#\n  00   00000000  0006  #S00000#CNV#\n\n\n* UPDATE DATES and PLACE DATES\n*\n*     Current date  11/14/2019\n*\n*     find 'pass' at position 1\n*     find 'MR D' anywhere\n*       if both found, find date in M/D/Y format 4 bytes after 'MR D'\n*         and advance by 1 day\n*\n*       this advances the date in the file ahead one day\n*\n*     find 'UT D' anywhere\n*       if found, place current date plus three days in Y/M/D format\n*         4 bytes after 'UT D'\n*\n*       this places current date plus three days into the file\n*\n*     userid\n*     password\n*     cd vmsysu:btchnwoh.z500\n*     put 'ACTP.TSISSD.XTRACT10.DAILY' 'MR D06/18/98'        Scroll\n*     put 'ACTP.TSISSD.XTRACT2.DAILY' 'UT D19/11/17'         Scroll\n*     put 'ACTP.TSISSD.AUDIT.DAILY' 'SVMAUDIT DAILY'\n*     quit\n*\n*\n*\n*...+....1....+....2....\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n F03A  00010000  0004  pass\n F00A  00000000  0004  MR D\n N00A +00040000  0008  #M/D/Y#\n N00A  00000000  0008  #+00001#M/D/Y#\n F00B  00000000  0004  UT D\n R00B +00040000  0008  #+00003#Y/M/D#\n\n\n* CALCULATE AGE\n*\n*     Current date  11/14/2019\n*\n*     Determine age based on MDCY date and place in pos 40\n*\n*                       09081893       126\n*                       09081963       056\n*                       09081964       055\n*                       09081965       054\n*                       09041894       125\n*                       09081967       052\n*\n*...+....1....+....2....\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n  00   00250000  0008  #MDCY#\n  00   00400000  0003  #+00000#AGE#\n\n\n* PULL AND PUT\n*\n*\n*   if '/' in position 51 and position 55 is blank then move\n*        column 56 to column 55\n*   'P4' means pull the data and adjust things on the right\n*        to remain positionally stable\n*   'P ' on next line means 'put' and overlay\n*   the specified length of '0001' in the 'P' parms is relative because\n*        the pull and put logic may affect more than one character\n*\n*\n*                   ----+----3----+----4----+----5----+----6\n*  before:\n*                                                 /    ABCDE\n*                                                 /    FGHIJ\n*\n*  after:\n*                                                 /   ABCDE\n*                                                 /   FGHIJ\n*\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n F00A  00510000  0001  /\n F00A  00550000  0001\nAN00A  00560000P40001\nAN00A  00550000P 0001\n\n\n* CONVERT CHARACTERS\n*\n*   note that column 'T' contains 'S' so the same parm record is kept\n*        when a search string is found.  otherwise only the first\n*        character in a record would get converted.\n*\n*   first example: convert all low-values to spaces\n*\n*     replace 'x' below with hex '00'\n*\n*     to do that, type 'HX' on the edit field prior to the line\n*       and press enter.\n*       then change 'A'  under the 'x' to '0'\n*                   '7'                   '0'\n*       then type 'HX' again to exit hex editing for that line\n*\n*   second example: convert '-' to '+' within columns 12 through 16\n*\n*\n*...+....1....+....2....\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n S00   00000000  0001  x\n S00   00000000  0001\n*\n S00  L00120016  0001  -\n S00   00000000  0001  +\n\n\n* CONVERT AND MOVE NUMBERS\n*\n*   move these numbers from column 12, length 8, to column 5\n*     and then convert them to be fully numeric\n*\n*   before:\n*          1\n*          23\n*          67890\n*          1790\n*                45\n*          4567890\n*\n*   after:\n*   00000001\n*   00000023\n*   00067890\n*   00001790\n*   00000045\n*   04567890\n*\n*...+....1....+....2....\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n N00   00120000P30008\n N00   00050000P10008\n  00   00050000  0008  #CNV#\n  00   00050000  0008  #+00000#CNV#\n\n\n* PLACE DATE AND TIME IN E-MAIL HEADER\n*\n*   result is:\n*   ----+----1----+----2----+----3----+----4----\n*                         11/14/2019 03:12PM\n*\n*\n*...+....1....+....2....\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n R00   00230000  0010  #+00000#M/D/CY#\n R00   00340000  0008  #+00000#H:MP  #\n\n\n* SET CONDITION CODES\n*\n*\n*   set code 0048 if FTP output contains a standard error signal\n*   set code 0002 if '.tst' found in position 12 of file\n*   set code 0002 each Sunday  (01=mon ... 07=sun)\n*   set code 0002 on the 12th of each month\n*   set default code of 0008 if current date not found in file\n*     date can be placed by MIS0425B or CHNGFILE\n*\n*\n*...+....1....+....2....\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n F00A  00000000  0017  Std Return Code =\n C00A  00000000  0004  0048\n*\n F00B  00120000  0004  .tst\n C00B  00000000  0004  0002\n*\n C00   00000000  0004  0002 07 W\n*\n C00   00000000  0004  0002 12 M\n*\n F00A  00000000  0008  20191114\n C00A  00000000  0004  0000\n D00   00000000  0004  0008\n\n\n* COMMENT OUT OR ALTER JCL LINES\n*\n*\n*   Column 'II' is set to '01' meaning if '//SORTLIB' is found\n*     then only comment out within 1 line of found line, to avoid\n*     accidentally commenting something further down.\n*   The 'A' in column '12' makes the commenting action dependent on\n*     finding '//SORTLIB'\n*\n*   replace //SORTLIB  DD  DSN=IFPS.SORT.PARMLIB,\n*           //             DISP=SHR\n*\n*   with    //*ORTLIB  DD  DSN=IFPS.SORT.PARMLIB,\n*           //*            DISP=SHR\n*\n*   also replace 'UNIT=SMSDA' with 'UNIT=SYSDA'\n*\n*...+....1....+....2....\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n F01A  00000000  0009  //SORTLIB\n  01A  00000000  0009  //SORTLIB\n  01A  00000000  0009  //*ORTLIB\n* include any 'DISP=SHR' continuation\n  01A  00000000  0003  //\n  01A  00000000  0003  //*\n  00   00000000  0010  UNIT=SMSDA\n  00   00000000  0010  UNIT=SYSDA\n*\n*\n*   find MSGCLASS=H in job\n*     if found, insert ',REGION=0M' directly after the '=H' to\n*       carryover any existing comma:\n*       before:   CLASS=R,MSGCLASS=H,NOTIFY=USER12\n*       after:    CLASS=R,MSGCLASS=H,REGION=0M,NOTIFY=USER12\n*   replace next commented line with ...SUT... line\n*     YYMMDD is replaced with current date\n*     '+' in column 45 appends following line to comment\n*   Note column 'II' is '03' which means the insertion of\n*     ',REGION=0M' will only occur within three lines of finding\n*     'MSGCLASS=H'.  '2' in column 'A' specifies to insert.\n*\n*\n*   Before:\n*     //PCP11RRT  JOB (12345,'SIEMENS JOB'),'PA OFFSETS',\n*     //             MSGLEVEL=1,CLASS=Y,NOTIFY=STANLEY,\n*     //             MSGCLASS=H\n*     //*------------------------------------------\n*\n*   After:\n*     //PCP11RRT  JOB (12345,'SIEMENS JOB'),'PA OFFSETS',\n*     //             MSGLEVEL=1,CLASS=Y,NOTIFY=STANLEY,\n*     //             MSGCLASS=H,REGION=0M\n*     //*....SUT....191115 PCP11RRT  add region statement REGION=0M\n*\n*\n*...+....1....+....2....\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n N03A  00000000  0010  MSGCLASS=H\n N03A +00100000 20010  ,REGION=0M\n A00A  00000000  0000  //*....SUT....YYMMDD PCP11RRT  add region s+\n A00A  00000000  0000  tatement REGION=0M\n*\n*\n*   find .CWREPORT(+1) starting in column 20\n*     if found, replace 'SPACE' parameter\n*\n*   Before:\n*     //CWREPORT DD  DISP=PDSMS.SMSSM004.CWREPORT(+1),\n*     //             DISP=(NEW,CATLG,DELETE),\n*     //             SPACE=(TRK,(10,4),RLSE),LRECL=80,\n*     //             UNIT=SYSDA,RECFM=FB,BLKSIZE=0\n*\n*   After:\n*     //CWREPORT DD  DISP=PDSMS.SMSSM004.CWREPORT(+1),\n*     //             DISP=(NEW,CATLG,DELETE),\n*     //             SPACE=(TRK,(1000,100),RLSE,,ROUND),LRECL=80,\n*     //             UNIT=SYSDA,RECFM=FB,BLKSIZE=0\n*\n*...+....1....+....2....\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n F04A L00200000  0013  .CWREPORT(+1)\n N04A  00000000  0006  #JCL#SPACE#\n N04A  00000000 20034  SPACE=(TRK,(1000,100),RLSE,,ROUND)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CHNGFILE": {"ttr": 2055, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x08\\x01\\x19\\x01o\\x01\\x192?\\x08\\x19\\x06\\xe5\\x06\\x96\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2019-01-16T00:00:00", "modifydate": "2019-11-19T08:19:08", "lines": 1765, "newlines": 1686, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  CHNGFILE: replace strings in files'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    CHNGFILE.\n      *******************************************CXCHNG in iannone lib\n      *@@@ C3 replace strings in files\n      ****************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * Date written: 03/29/96\n      * Author      : Jim Iannone\n      *               - search for strings in sequential files\n      *               - replace these strings with other data\n      *                 - when found or\n      *                 - only if strings in previous lines were found\n      *\n      *               see documentation in CHNGDOCU\n      ****************************************************************\n      * Date changed: 02/22/99\n      * Author      : Jim Iannone\n      *               - update files up to 9999 bytes\n      *               - allow expanding COMP-3 MDY or YMD dates\n      ****************************************************************\n      * Date changed: 12/28/2006\n      * Author      : Jim Iannone\n      *               recompile for Cobol 3\n      ****************************************************************\n      * Date changed: 11/06/2019\n      * Author      : Jim Iannone\n      *               additional capabilites for #CNV#\n      ****************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           COPY CHNGCPY1.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT OFFSET               ASSIGN TO OFFSET\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n           COPY CHNGCPY2.\n\n       FD  PARM01\n           RECORDING MODE F.\n       01  PARM01-RECORD.\n           05  PARM01-COMMENT          PIC  X.\n           05  PARM01-TYPE             PIC  X.\n           05  PARM01-INCLUDE-CNT      PIC  XX.\n           05  PARM01-POINT-12.\n               10  PARM01-POINT1       PIC  X.\n               10  PARM01-POINT2       PIC  X.\n           05  PARM01-FLAG             PIC  X.\n           05  PARM01-POS              PIC  X(04).\n           05  PARM01-MAX-POS          PIC  X(04).\n           05  PARM01-PULL-PUT         PIC  X.\n           05  PARM01-ADJUST           PIC  X.\n           05  PARM01-LEN              PIC  X(04).\n           05  FILLER                  PIC  XX.\n           05  PARM01-DATA             PIC  X(44).\n           05  PARM01-FILL             PIC  X(05).\n           05  PARM01-NO-USE           PIC  X(08).\n\n       FD  OFFSET\n           RECORDING MODE F.\n       01  OFFSET-RECORD.\n           05  OFFSET-DOCU             PIC  X.\n           05  OFFSET-AMOUNT.\n               10  OFFSET-PAST-FUT     PIC  X.\n               10  OFFSET-OFFSET       PIC  X(05).\n           05  FILLER                  PIC  X(10).\n           05  OFFSET-BATCH-SW         PIC  X.\n           05  FILLER                  PIC  X(62).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage CHNGFILE start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-SET-CODE             PIC S9(04)    VALUE ZERO COMP.\n           05  WS-DEFAULT-CODE         PIC S9(04)    VALUE ZERO COMP.\n           05  WS-PARM01-MAX           PIC  999      VALUE ZERO.\n           05  WS-NBR-DAY              PIC  99       VALUE ZERO.\n           05  WS-LEN1                 PIC S9(05)    VALUE ZERO.\n           05  WS-LEN2                 PIC S9(05)    VALUE ZERO.\n           05  WS-FIND-POS             PIC  9(05)    VALUE ZERO.\n           05  WS-LEN-DIFF             PIC  9(05)    VALUE ZERO.\n           05  WS-AHEAD-LOC            PIC  9(05)    VALUE ZERO.\n           05  WS-RCD-N                PIC  9(09)    VALUE ZERO.\n           05  WS-F-MAX                PIC  9(05)    VALUE ZERO.\n           05  WS-F-LEN                PIC  9(05)    VALUE ZERO.\n           05  WS-F-POS                PIC S9(04)    VALUE ZERO.\n           05  WS-F-MPOS               PIC S9(04)    VALUE ZERO.\n           05  WS-F-FLAG               PIC  X        VALUE SPACE.\n           05  WS-F-PULL               PIC  X        VALUE SPACE.\n           05  WS-F-SAVE-POS           PIC  9(04)    VALUE ZERO.\n           05  WS-F-AHEAD-POS          PIC  9(05)    VALUE ZERO.\n           05  WS-F-TYPE               PIC  X        VALUE SPACE.\n           05  WS-R-MAX                PIC  9(05)    VALUE ZERO.\n           05  WS-R-LEN                PIC  9(05)    VALUE ZERO.\n           05  WS-R-POS                PIC S9(04)    VALUE ZERO.\n           05  WS-R-MPOS               PIC S9(04)    VALUE ZERO.\n           05  WS-R-FLAG               PIC  X        VALUE SPACE.\n           05  WS-R-PULL               PIC  X        VALUE SPACE.\n           05  WS-R-ADJ                PIC  X        VALUE SPACE.\n           05  WS-R-AHEAD-POS          PIC  9(05)    VALUE ZERO.\n           05  WS-MATH-VALUE           PIC  9(10)    VALUE ZERO.\n           05  WS-MATH-VALUE-X         PIC  X(10)    VALUE SPACE.\n           05  WS-MATH-INC             PIC  9(05)    VALUE ZERO.\n           05  WS-HOLD-IN              PIC  X(06)    VALUE SPACE.\n           05  WS-FILE-LEN             PIC  9(05)    VALUE ZERO.\n           05  WS-HOLD-DATE            PIC  X(20)    VALUE SPACE.\n           05  WS-ODO-PRE              PIC  9(06)    VALUE ZERO.\n           05  WS-ODO-POST             PIC  9(06)    VALUE ZERO.\n           05  WS-UNPACK-6             PIC  9(06)    VALUE ZERO.\n           05  WS-BEGIN-RCD            PIC  9(05)    VALUE ZERO.\n           05  WS-END-RCD              PIC  9(05)    VALUE ZERO.\n           05  WS-OFFSET               PIC  X(06)    VALUE SPACE.\n           05  WS-CALL-STV0400B        PIC  X(08)    VALUE 'STV0400B'.\n           05  WS-HOLD10               PIC  X(10)    VALUE SPACE.\n\n       01  WS-LARGE-FIELDS.\n           05  WS-F-DATA               PIC  X(10000) VALUE SPACE.\n           05  FILLER REDEFINES WS-F-DATA.\n               10  WS-F-DATA-1         PIC  X.\n               10  FILLER              PIC  X(9999).\n           05  WS-F-HOLD-DATA          PIC  X(10000) VALUE SPACE.\n           05  WS-R-DATA               PIC  X(10000) VALUE SPACE.\n           05  WS-R-HOLD-DATA          PIC  X(10000) VALUE SPACE.\n           05  WS-ADD-DATA             PIC  X(80)    VALUE SPACE.\n           05  WS-PRE-DATA             PIC  X(44)    VALUE SPACE.\n\n       01  WS-VARIABLE-FIELD.\n           05  WS-HOLD-PACKED.\n               10  WS-F-HOLD-PRE       PIC  X\n                                       OCCURS 1 TO 9999 TIMES\n                                       DEPENDING ON WS-ODO-PRE.\n               10  WS-PACK-4           PIC  9(07)  COMP-3.\n               10  WS-F-HOLD-POST      PIC  X\n                                       OCCURS 1 TO 9999 TIMES\n                                       DEPENDING ON WS-ODO-POST.\n\n       01  WS-COND-FIELDS.\n           05  WS-COND-DATA                          VALUE SPACE.\n               10  WS-COND-CODE        PIC  X(04).\n               10  FILLER              PIC  X.\n               10  WS-COND-DAY         PIC  XX.\n               10  WS-COND-DAY-N REDEFINES WS-COND-DAY\n                                       PIC  99.\n               10  FILLER              PIC  X.\n               10  WS-COND-FLAG        PIC  X.\n           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-1-CYMD.\n               10  WS-1-CYMD-CC        PIC  XX.\n               10  WS-1-CYMD-YY        PIC  XX.\n               10  WS-1-CYMD-MM        PIC  XX.\n               10  WS-1-CYMD-DD        PIC  XX.\n           05  FILLER REDEFINES WS-1-CYMD.\n               10  FILLER              PIC  XX.\n               10  WS-1-CYMD-YMD       PIC  X(06).\n\n       01  WS-SUBSCRIPTS.\n           05  WS-SUB1                 PIC  9(05)    VALUE ZERO.\n           05  WS-SUB2                 PIC  9(05)    VALUE ZERO.\n           05  WS-SUB3                 PIC  9(05)    VALUE ZERO.\n           05  WS-SUB4                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB5                 PIC  9(05)    VALUE ZERO.\n           05  WS-SUB6                 PIC S9(05)    VALUE ZERO.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-RCD-CNT         PIC S9(09)    VALUE ZERO.\n           05  WS-REWRITE-RCD-CNT      PIC S9(09)    VALUE ZERO.\n           05  WS-JCL-CNT              PIC S9(03)    VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  WS-END-PARM01-SW        PIC  X        VALUE 'N'.\n               88  END-OF-PARM01                     VALUE 'Y'.\n               88  MORE-PARM01-RCDS                  VALUE 'N'.\n           05  WS-END-CHANGED-SW       PIC  X        VALUE 'N'.\n               88  END-OF-CHANGED                    VALUE 'Y'.\n               88  MORE-CHANGED-RCDS                 VALUE 'N'.\n           05  WS-DIFF-SW              PIC  X        VALUE SPACE.\n           05  WS-SPACE-SW             PIC  X        VALUE SPACE.\n           05  WS-REWRITE-SW           PIC  X        VALUE SPACE.\n           05  WS-WRITE-SW             PIC  X        VALUE SPACE.\n           05  WS-EDIT-S-SW            PIC  X        VALUE SPACE.\n           05  WS-REPLACE-SW           PIC  X        VALUE SPACE.\n           05  WS-CALC-POS-SW          PIC  X        VALUE SPACE.\n           05  WS-CONVERT-SW           PIC  X        VALUE SPACE.\n           05  WS-IGNORE-ERR-SW        PIC  X        VALUE SPACE.\n           05  WS-COND-CODE-SW         PIC  X        VALUE SPACE.\n           05  WS-DEFAULT-SW           PIC  X        VALUE SPACE.\n           05  WS-MATH-SUM-SW          PIC  X        VALUE SPACE.\n           05  WS-OFFSET-SW            PIC  X        VALUE SPACE.\n           05  WS-OFF-NOTIFY-SW        PIC  X        VALUE SPACE.\n           05  WS-JCL-SW               PIC  X        VALUE SPACE.\n           05  WS-POINT-SW             PIC  X        VALUE SPACE.\n               88  POINTER-RCD                       VALUE ' ' 'F'\n                                                     'N' 'R' 'S'.\n\n       01  WS-PARM-TABLE.\n           05  WS-PARM-LINES           PIC  X(6480)  VALUE SPACE.\n           05  WS-PARM-LINE REDEFINES WS-PARM-LINES\n                                       OCCURS 80 TIMES.\n               10  WS-LEN              PIC  9(04).\n               10  WS-POS              PIC  9(04).\n               10  WS-MPOS             PIC  9(04).\n               10  WS-INCL             PIC  99.\n               10  WS-CNT              PIC  99.\n               10  WS-FPOS             PIC  9(04).\n               10  WS-PNT1             PIC  X.\n               10  WS-PNT2             PIC  X.\n               10  WS-TYPE             PIC  X.\n               10  WS-FLAG             PIC  X.\n               10  WS-PULL             PIC  X.\n               10  WS-ADJ              PIC  X.\n               10  WS-SUPPR            PIC  X.\n               10  WS-DATA             PIC  X(44).\n               10  WS-SUM              PIC  9(10).\n\n      *    Year 2000 compatible date routine\n       01  WS-STV0400B-FIELDS.\n           05  STV0400B-DATA           PIC  X(10)   VALUE SPACE.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X6        PIC  X(06).\n               10  STV0400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X8        PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAYS       PIC  X(05).\n               10  FILLER              PIC  X(05).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAY        PIC  X(09).\n               10  STV0400B-DAY-NBR    PIC  X.\n           05  STV0400B-DATA2          PIC  X(10)   VALUE SPACE.\n           05  STV0400B-IN             PIC  X(06)   VALUE SPACE.\n           05  STV0400B-OUT            PIC  X(06)   VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  CHNGFILE END  '.\n\n       LINKAGE SECTION.\n\n       01  PARM-FIELD.\n           05  LS-LENGTH               PIC S9(04)    COMP.\n           05  LS-DATA                 PIC  X(24).\n           05  FILLER REDEFINES LS-DATA.\n               10  LS-FILE-LEN         PIC  X(04).\n               10  LS-IGNORE-ERR-SW    PIC  X.\n               10  LS-BEGIN-RCD        PIC  X(05).\n               10  LS-END-RCD          PIC  X(05).\n               10  LS-OFFSET-SW        PIC  X.\n               10  LS-CYMD             PIC  X(08).\n\n      /\n\n       PROCEDURE DIVISION USING PARM-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           PERFORM 0200-OPEN-FILES.\n\n           DISPLAY '          '.\n           DISPLAY '**** CHNGFILE edit replace strings'.\n      *---------------------------------------\n      *    option to obtain processing date from parm\n      *---------------------------------------\n           IF LS-LENGTH > ZERO\n             IF LS-LENGTH < 24\n                 MOVE SPACE TO LS-DATA(LS-LENGTH + 1: ).\n\n      *---------------------------------------\n      *    wherever CHNGFILE generates a date (rather than\n      *    altering an existing date), alter the date by\n      *    WS-OFFSET amount.\n      *---------------------------------------\n           MOVE '-00000'                      TO WS-OFFSET.\n           IF WS-RETURN-CODE = ZERO\n             IF LS-OFFSET-SW = 'Y'\n                 MOVE 'Y'                     TO WS-OFFSET-SW\n                 PERFORM 0300-LOAD-OFFSET THRU\n                         0300-LOAD-OFFSET-EXIT.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-OFFSET                     TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-1X8                  TO WS-1-CYMD.\n\n           IF LS-CYMD(1: 3) = 'CMD' OR 'CMF'\n               MOVE SPACE                     TO WS-STV0400B-FIELDS\n               MOVE WS-1-CYMD                 TO STV0400B-1X8\n               MOVE 'CYMD  '                  TO STV0400B-IN\n               MOVE LS-CYMD                   TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               IF STV0400B-1X6 = 'ERROR'\n                   DISPLAY '**** CHNGFILE parm CMD or CMF invalid '\n                   MOVE +0100                 TO WS-RETURN-CODE\n               ELSE\n                   MOVE STV0400B-1X8          TO WS-1-CYMD\n                   DISPLAY '**** CYMD derived date     ' WS-1-CYMD\n           ELSE\n      *---------------------------------------\n      *    date physically specified - ignore offset\n      *---------------------------------------\n           IF LS-CYMD NUMERIC\n             IF LS-CYMD NOT = '00000000'\n                 MOVE SPACE                   TO WS-STV0400B-FIELDS\n                 MOVE LS-CYMD                 TO STV0400B-1X8\n                 MOVE 'CYMD  '                TO STV0400B-IN\n                 MOVE 'CYMD  '                TO STV0400B-OUT\n                 CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n                 IF STV0400B-1X6 = 'ERROR'\n                     DISPLAY '**** CHNGFILE parm CYMD not valid'\n                     MOVE +0100               TO WS-RETURN-CODE\n                 ELSE\n                     MOVE STV0400B-1X8        TO WS-1-CYMD\n                     MOVE SPACE               TO WS-OFFSET-SW\n                     DISPLAY '**** CYMD date specified   ' WS-1-CYMD.\n\n           IF WS-RETURN-CODE = ZERO\n               IF LS-FILE-LEN NUMERIC\n                   MOVE LS-FILE-LEN           TO WS-FILE-LEN\n                   MOVE LS-IGNORE-ERR-SW      TO WS-IGNORE-ERR-SW\n               ELSE\n                   DISPLAY '**** CHNGFILE file length not specified'\n                   MOVE +0100                 TO WS-RETURN-CODE.\n           IF WS-RETURN-CODE = ZERO\n               IF LS-BEGIN-RCD NUMERIC\n                   MOVE LS-BEGIN-RCD          TO WS-BEGIN-RCD\n               ELSE\n               IF LS-BEGIN-RCD NOT = SPACE\n                   DISPLAY '**** CHNGFILE begin rcd not numeric'\n                   MOVE +0100                 TO WS-RETURN-CODE.\n           IF WS-RETURN-CODE = ZERO\n             IF LS-END-RCD NUMERIC\n                 MOVE LS-END-RCD              TO WS-END-RCD\n             ELSE\n             IF LS-END-RCD NOT = SPACE\n                 DISPLAY '**** CHNGFILE end rcd not numeric'\n                 MOVE +0100                   TO WS-RETURN-CODE.\n           IF WS-END-RCD NOT = ZERO\n             IF WS-BEGIN-RCD > WS-END-RCD\n                 DISPLAY '**** CHNGFILE begin rcd > end rcd'\n                 MOVE +0100                   TO WS-RETURN-CODE.\n\n           IF WS-RETURN-CODE = ZERO\n               MOVE 'X'                       TO WS-EDIT-S-SW\n               PERFORM 0400-LOAD-PARM01 THRU\n                       0400-LOAD-PARM01-EXIT.\n\n      *---------------------------------------\n      *    if a 'D' parm is specified, set the default code here\n      *    so a code is set even if input file has no records.\n      *+--------------------------------------\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0650-SET-DEFAULT-CODE\n                   VARYING WS-SUB1 FROM 1 BY 1\n                   UNTIL WS-SUB1 > WS-PARM01-MAX.\n\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                      TO WS-READ-RCD-CNT\n               MOVE SPACE                     TO WS-DIFF-SW\n               PERFORM 0700-READ-CHANGED\n                   UNTIL END-OF-CHANGED.\n\n           IF WS-IGNORE-ERR-SW = 'Y'\n               DISPLAY '**** Ignore date convert error switch = Y'.\n           IF WS-BEGIN-RCD > ZERO\n               DISPLAY '**** Begin record          ' WS-BEGIN-RCD.\n           IF WS-END-RCD > ZERO\n               DISPLAY '**** End record            ' WS-END-RCD.\n           IF WS-OFFSET NOT = '-00000'\n             IF WS-OFFSET-SW = 'Y'\n                 AND WS-OFF-NOTIFY-SW = 'Y'\n                 DISPLAY '---> Warning - derived dates offset by '\n                          WS-OFFSET ' days '.\n           DISPLAY '**** File length specified ' WS-FILE-LEN.\n           DISPLAY '**** Change records read   ' WS-READ-RCD-CNT.\n           DISPLAY '**** Parm records accepted ' WS-PARM01-MAX.\n           DISPLAY '**** Records updated       ' WS-REWRITE-RCD-CNT.\n           IF WS-MATH-SUM-SW = 'Y'\n               PERFORM VARYING WS-SUB5 FROM 1 BY 1\n                   UNTIL WS-SUB5 > WS-PARM01-MAX\n                   IF WS-DATA(WS-SUB5)(1: 2) = '#S'\n                       AND WS-DATA(WS-SUB5)(3: 5) NUMERIC\n                       DISPLAY '**** Parm: ' WS-SUB5\n                               '      sum: ' WS-SUM(WS-SUB5)\n                   END-IF\n               END-PERFORM\n           END-IF.\n           DISPLAY '**** CHNGFILE EOJ encountered '.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n               IF WS-COND-CODE-SW = 'Y'\n                   DISPLAY '**** CHNGFILE cond code ' WS-SET-CODE\n                       ' requested by user'\n                   MOVE WS-SET-CODE           TO RETURN-CODE\n               ELSE\n               IF WS-DEFAULT-SW = 'Y'\n                   DISPLAY '**** CHNGFILE cond code ' WS-DEFAULT-CODE\n                       ' set as default by user'\n                   MOVE WS-DEFAULT-CODE       TO RETURN-CODE\n               ELSE\n                   MOVE WS-DEFAULT-CODE       TO RETURN-CODE\n           ELSE\n               DISPLAY '**** CHNGFILE cond code ' WS-RETURN-CODE\n                       ' set by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** CHNGFILE open error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN INPUT OFFSET.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** CHNGFILE open error on OFFSET'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0201                     TO WS-RETURN-CODE.\n           OPEN I-O  CHANGED.\n           IF WS-STAT = 90\n               DISPLAY '**** CHNGFILE open skipped - member not found'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0004                     TO WS-RETURN-CODE\n           ELSE\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** CHNGFILE open error on CHANGED'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0201                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE CHANGED.\n           CLOSE OFFSET.\n           CLOSE PARM01.\n\n      *---------------------------------------\n      *    LOAD OFFSET\n      *---------------------------------------\n       0300-LOAD-OFFSET.\n           READ OFFSET.\n           IF WS-STAT = 10\n               GO TO 0300-LOAD-OFFSET-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** CHNGFILE read error on OFFSET'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0300                     TO WS-RETURN-CODE\n               GO TO 0300-LOAD-OFFSET-EXIT.\n\n           IF OFFSET-DOCU = '*'\n               GO TO 0300-LOAD-OFFSET.\n           IF OFFSET-OFFSET NUMERIC\n               MOVE OFFSET-AMOUNT             TO WS-OFFSET\n           ELSE\n               DISPLAY '**** Offset amount not numeric '\n               MOVE +0301                     TO WS-RETURN-CODE\n               GO TO 0300-LOAD-OFFSET-EXIT.\n\n       0300-LOAD-OFFSET-EXIT. EXIT.\n\n      *---------------------------------------\n      *    load a ws table with up to 80 records from PARM01\n      *    (up to 40 changes)\n      *---------------------------------------\n       0400-LOAD-PARM01.\n           READ PARM01.\n           IF WS-STAT = 10\n               MOVE WS-SUB1                   TO WS-PARM01-MAX\n               GO TO 0400-LOAD-PARM01-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** CHNGFILE read error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0400                     TO WS-RETURN-CODE\n               GO TO 0400-LOAD-PARM01-EXIT.\n\n           ADD 1                              TO WS-READ-RCD-CNT.\n           IF PARM01-COMMENT = '*'\n               GO TO 0400-LOAD-PARM01.\n           IF WS-SUB1 > 79\n               GO TO 0400-LOAD-PARM01.\n           MOVE ZERO                          TO WS-F-POS WS-LEN1\n                                                 WS-F-MPOS.\n      *---------------------------------------\n      *    edit parm entries\n      *---------------------------------------\n           IF PARM01-INCLUDE-CNT = SPACE\n               MOVE '00'                      TO PARM01-INCLUDE-CNT\n           ELSE\n           IF PARM01-INCLUDE-CNT NOT NUMERIC\n               DISPLAY '**** Include count not numeric'\n               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE\n               GO TO 0400-LOAD-PARM01.\n           IF PARM01-POS NUMERIC\n               MOVE PARM01-POS                TO WS-F-POS.\n           IF PARM01-MAX-POS NUMERIC\n               MOVE PARM01-MAX-POS            TO WS-F-MPOS.\n           IF PARM01-LEN NUMERIC\n               MOVE PARM01-LEN                TO WS-LEN1\n           ELSE\n           IF PARM01-DATA = SPACE OR LOW-VALUE\n               DISPLAY '**** Length required if data = spaces'\n               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE\n               GO TO 0400-LOAD-PARM01\n           ELSE\n           IF PARM01-LEN = 'CCCC'\n               PERFORM 0600-CALC-PARM-LEN\n                   VARYING WS-LEN2 FROM 44 BY -1\n                   UNTIL WS-LEN2 < 1\n           ELSE\n               DISPLAY '**** Parm length not numeric'\n               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE\n               GO TO 0400-LOAD-PARM01.\n\n           IF WS-F-POS > WS-FILE-LEN\n               DISPLAY '**** Parm position > file length'\n               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE\n               GO TO 0400-LOAD-PARM01.\n           IF WS-F-MPOS > WS-FILE-LEN\n               DISPLAY '**** Max position > file length'\n               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE\n               GO TO 0400-LOAD-PARM01\n           ELSE\n           IF WS-F-MPOS = ZERO\n               MOVE WS-FILE-LEN               TO WS-F-MPOS.\n           IF PARM01-TYPE = 'S'\n             IF PARM01-PULL-PUT = 'P'\n                 DISPLAY '**** S not allowed with P'\n                 DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n                 MOVE +0400                   TO WS-RETURN-CODE\n                 GO TO 0400-LOAD-PARM01.\n           IF PARM01-TYPE = 'R'\n             IF PARM01-POINT-12 = SPACE\n                 AND WS-F-POS < 1\n                 DISPLAY '**** R with no pointers: pos > 0 req'\n                 DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n                 MOVE +0400                   TO WS-RETURN-CODE\n             ELSE\n             IF PARM01-FLAG = '+' OR '-'\n                 PERFORM 0450-EDIT-PARM\n                 IF WS-DIFF-SW > SPACE\n                     PERFORM 0480-DISPLAY-POINTER-ERR.\n           IF PARM01-TYPE = 'A'\n             IF WS-FILE-LEN = 80\n                 MOVE WS-FILE-LEN             TO WS-LEN1\n             ELSE\n                 DISPLAY '** A : requires lrecl of 80 '\n                 MOVE +0400                   TO WS-RETURN-CODE\n                 GO TO 0400-LOAD-PARM01.\n           IF WS-LEN1 > WS-FILE-LEN\n               OR WS-LEN1 < 1\n               DISPLAY '**** Parm length < 1 or > file length'\n               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE\n               GO TO 0400-LOAD-PARM01.\n\n           IF WS-EDIT-S-SW = SPACE OR 'N' OR 'S'\n             IF PARM01-TYPE = WS-EDIT-S-SW\n                 MOVE 'X'                     TO WS-EDIT-S-SW\n                 IF PARM01-FLAG = 'L'\n                     DISPLAY '**** Space/N/S line 2: L flag ignored'\n                     DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n                 ELSE\n                     CONTINUE\n             ELSE\n                 MOVE 'X'                     TO WS-EDIT-S-SW\n                 DISPLAY '**** Space/N/S should occur in pairs'\n                 DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n                 MOVE +0400                   TO WS-RETURN-CODE\n                 GO TO 0400-LOAD-PARM01\n           ELSE\n           IF PARM01-TYPE = SPACE OR 'N' OR 'S'\n               MOVE PARM01-TYPE               TO WS-EDIT-S-SW\n               IF PARM01-ADJUST = '1' OR '2'\n                   DISPLAY '**** Space/N/S 1: insert found with'\n                           ' find/pull'\n                   DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n                   MOVE +0400                 TO WS-RETURN-CODE\n               ELSE\n               IF PARM01-FLAG = '+' OR '-'\n                   PERFORM 0450-EDIT-PARM\n                   IF WS-DIFF-SW > SPACE\n                       PERFORM 0480-DISPLAY-POINTER-ERR\n                   ELSE\n                       CONTINUE\n               ELSE\n                   CONTINUE\n           ELSE\n               MOVE 'X'                       TO WS-EDIT-S-SW.\n\n           IF PARM01-TYPE = 'A'\n               PERFORM 0450-EDIT-PARM\n               IF WS-DIFF-SW > SPACE\n                   PERFORM 0480-DISPLAY-POINTER-ERR.\n\n           COMPUTE WS-F-MAX = WS-LEN1 + WS-F-POS - 1.\n           IF WS-F-MAX > WS-F-MPOS\n               DISPLAY '**** Len + pos > max pos or file length'\n               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE\n               GO TO 0400-LOAD-PARM01.\n           IF PARM01-DATA = '#NBR#' OR '#CNV#'\n             IF WS-LEN1 > 10\n                 DISPLAY '**** #nbr# #cnv# max length is 10'\n                 DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n                 MOVE +0400                   TO WS-RETURN-CODE\n                 GO TO 0400-LOAD-PARM01.\n           ADD 1                              TO WS-SUB1.\n           MOVE WS-LEN1                       TO WS-LEN(WS-SUB1).\n           MOVE WS-F-POS                      TO WS-POS(WS-SUB1).\n           MOVE WS-F-MPOS                     TO WS-MPOS(WS-SUB1).\n           MOVE ZERO                          TO WS-CNT(WS-SUB1).\n           MOVE ZERO                          TO WS-FPOS(WS-SUB1).\n           MOVE PARM01-INCLUDE-CNT            TO WS-INCL(WS-SUB1).\n           MOVE PARM01-POINT1                 TO WS-PNT1(WS-SUB1).\n           MOVE PARM01-POINT2                 TO WS-PNT2(WS-SUB1).\n           MOVE PARM01-FLAG                   TO WS-FLAG(WS-SUB1).\n           MOVE PARM01-PULL-PUT               TO WS-PULL(WS-SUB1).\n           MOVE PARM01-TYPE                   TO WS-TYPE(WS-SUB1).\n           MOVE PARM01-ADJUST                 TO WS-ADJ(WS-SUB1).\n           MOVE PARM01-COMMENT                TO WS-SUPPR(WS-SUB1).\n           MOVE PARM01-DATA                   TO WS-DATA(WS-SUB1).\n\n           GO TO 0400-LOAD-PARM01.\n\n       0400-LOAD-PARM01-EXIT. EXIT.\n\n       0450-EDIT-PARM.\n           MOVE SPACE                         TO WS-DIFF-SW.\n           IF PARM01-POINT-12 = SPACE\n               MOVE '1'                       TO WS-DIFF-SW\n           ELSE\n               MOVE ZERO                      TO WS-SUB2 WS-SUB3\n               PERFORM VARYING WS-SUB4 FROM 1 BY 1\n                   UNTIL WS-SUB4 > WS-SUB1\n                   IF WS-PNT1(WS-SUB4) = PARM01-POINT1\n                       ADD 1                  TO WS-SUB2\n                   END-IF\n                   IF WS-PNT2(WS-SUB4) = PARM01-POINT2\n                       ADD 1                  TO WS-SUB3\n                   END-IF\n               END-PERFORM\n               IF PARM01-POINT1 > SPACE\n                   AND WS-SUB2 = ZERO\n                   MOVE '2'                   TO WS-DIFF-SW\n               ELSE\n               IF PARM01-POINT2 > SPACE\n                   AND WS-SUB3 = ZERO\n                   MOVE '3'                   TO WS-DIFF-SW.\n\n       0480-DISPLAY-POINTER-ERR.\n           IF WS-DIFF-SW = '1'\n             IF PARM01-TYPE = 'A'\n                 DISPLAY '**** A records require a pointer'\n             ELSE\n             IF PARM01-TYPE = 'R'\n                 DISPLAY '**** R records with +/- require a pointer'\n             ELSE\n                 DISPLAY '**** Space/N/S line 1: +/- requires pointer'\n           ELSE\n           IF WS-DIFF-SW = '2'\n             IF PARM01-TYPE = 'A'\n                 DISPLAY '**** A record: no prev pointer 1 found'\n             ELSE\n             IF PARM01-TYPE = 'R'\n                 DISPLAY '**** R record: no prev pointer 1 found'\n             ELSE\n                 DISPLAY '**** Space/N/S line 1: no prev pointer '\n                         '1 found'\n           ELSE\n           IF PARM01-TYPE = 'A'\n               DISPLAY '**** A record: no prev pointer 1 found'\n           ELSE\n           IF PARM01-TYPE = 'R'\n               DISPLAY '**** R record: no prev pointer 1 found'\n           ELSE\n               DISPLAY '**** Space/N/S line 1: no prev pointer '\n                       '1 found'.\n\n           DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT.\n           MOVE +0400                         TO WS-RETURN-CODE.\n\n       0600-CALC-PARM-LEN.\n           IF PARM01-DATA(WS-LEN2: 1) NOT = SPACE\n               MOVE WS-LEN2                   TO WS-LEN1\n               MOVE ZERO                      TO WS-LEN2.\n\n       0650-SET-DEFAULT-CODE.\n           IF WS-TYPE(WS-SUB1) = 'D'\n               MOVE WS-DATA(WS-SUB1)          TO WS-COND-DATA\n               IF WS-COND-CODE NUMERIC\n                   MOVE WS-COND-CODE          TO WS-SUB4\n                   IF WS-SUB4 > 4095\n                       DISPLAY '**** Requested return code > 4095'\n                       MOVE +0650             TO WS-RETURN-CODE\n                   ELSE\n                       MOVE 'Y'               TO WS-DEFAULT-SW\n                       MOVE WS-SUB4           TO WS-DEFAULT-CODE.\n\n      *---------------------------------------\n      *---------------------------------------\n      *---------------------------------------\n      *---------------------------------------\n      *---------------------------------------\n\n       0700-READ-CHANGED.\n           READ CHANGED.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-RCD-CNT\n               PERFORM 0800-NEXT-RECORD THRU\n                       0800-NEXT-RECORD-EXIT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-CHANGED-SW\n           ELSE\n               MOVE 'Y'                       TO WS-END-CHANGED-SW\n               DISPLAY '**** CHNGFILE read error on CHANGED'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0700                     TO WS-RETURN-CODE.\n\n      *---------------------------------------\n      *    loop through the parm records (ie: 1, 3, 5, 7, etc)\n      *    containing the search data.  replace with data in the\n      *    alternate parm records (ie: 2, 4, 6, 8, etc).\n      *+--------------------------------------\n       0800-NEXT-RECORD.\n           MOVE SPACE                         TO WS-REWRITE-SW.\n           MOVE SPACE                         TO WS-WRITE-SW.\n           MOVE WS-READ-RCD-CNT               TO WS-RCD-N.\n           IF WS-BEGIN-RCD > ZERO\n             IF WS-BEGIN-RCD > WS-RCD-N\n                 GO TO 0800-NEXT-RECORD-EXIT.\n           IF WS-END-RCD > ZERO\n             IF WS-RCD-N > WS-END-RCD\n                 MOVE 'Y'                     TO WS-END-CHANGED-SW\n                 GO TO 0800-NEXT-RECORD-EXIT.\n           PERFORM 1000-PARM-LOOP THRU\n                   1000-PARM-LOOP-EXIT\n                   VARYING WS-SUB1 FROM 1 BY 1\n                   UNTIL WS-SUB1 > WS-PARM01-MAX.\n\n           PERFORM 0900-INCREMENT-COUNT\n               VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > WS-PARM01-MAX.\n\n           IF WS-REWRITE-SW = 'Y'\n               PERFORM 3000-REWRITE-CHANGED.\n           IF WS-WRITE-SW = 'Y'\n               MOVE WS-ADD-DATA               TO CHANGED-DATA\n               PERFORM 3000-REWRITE-CHANGED\n               DISPLAY '**** Add:  ' WS-ADD-DATA.\n\n       0800-NEXT-RECORD-EXIT. EXIT.\n\n       0900-INCREMENT-COUNT.\n           IF WS-FPOS(WS-SUB1) > ZERO\n             IF WS-INCL(WS-SUB1) NOT = 99\n               IF WS-CNT(WS-SUB1) < 99\n                   ADD 1                      TO WS-CNT(WS-SUB1)\n                   IF WS-CNT(WS-SUB1) > WS-INCL(WS-SUB1)\n                       MOVE ZERO              TO WS-CNT(WS-SUB1)\n                       MOVE ZERO              TO WS-FPOS(WS-SUB1).\n\n      *---------------------------------------\n      *    if string is x bytes, WS-F-MAX will be (lrecl - string + 1).\n      *    if max pos is set, WS-F-MAX will reflect max search pos.\n      *---------------------------------------\n       1000-PARM-LOOP.\n           MOVE WS-TYPE(WS-SUB1)              TO WS-F-TYPE.\n           MOVE WS-SUB1                       TO WS-SUB5.\n           PERFORM 2700-LOAD-F-FIELDS.\n           MOVE WS-F-POS                      TO WS-F-SAVE-POS.\n           COMPUTE WS-F-MAX = WS-F-MPOS - WS-F-LEN + 1.\n           ADD 1 TO WS-SUB1 GIVING WS-SUB2.\n\n      *---------------------------------------\n      *    types space/s/n require and use parm rcd 2\n      *---------------------------------------\n      *    type = space  find and replace data, go to new rcd\n      *    type = N      find and replace data, keep rcd, use next parm\n      *    type = S      find and replace data, keep rcd, use same parm\n      *    type = F      save string pos and length\n      *    type = R      place/replace data\n      *    type = C      set condition code\n      *    type = D      set default condition code\n      *    type = A      overlay blank comment line w/ comment\n      *---------------------------------------\n      *    WS-SUB1 = record 1 data\n      *    WS-SUB2 = record 2 data\n      *    WS-SUB3 = calculated find or replace position\n      *    WS-SUB4 = general hold field for loops\n      *              also used in insert delete calculations\n      *    WS-SUB5 = holds ws-sub1 or ws-sub2 in 2700-LOAD-X-FIELDS\n      *    WS-SUB6 = general temp work subscript\n      *---------------------------------------\n           PERFORM 1300-GET-PUT-POS THRU\n                   1300-GET-PUT-POS-EXIT.\n           IF WS-F-TYPE = 'F'\n               PERFORM 1500-FIND THRU\n                       1500-FIND-EXIT.\n\n           IF WS-F-TYPE = 'S' OR 'N' OR SPACE\n             IF WS-REPLACE-SW = 'Y'\n                 PERFORM 1500-FIND THRU\n                         1500-FIND-EXIT.\n\n           IF WS-F-TYPE = 'R'\n             IF WS-REPLACE-SW = 'Y'\n                 PERFORM 1700-PUT-DATA THRU\n                         1700-PUT-DATA-EXIT.\n\n           IF WS-F-TYPE = 'C'\n             IF WS-REPLACE-SW = 'Y'\n                 PERFORM 2800-SET-RETURN-CODE THRU\n                         2800-SET-RETURN-EXIT.\n\n           IF WS-F-TYPE = 'A'\n             IF WS-REPLACE-SW = 'Y'\n                 PERFORM 3100-ADD-LINE THRU\n                         3100-ADD-LINE-EXIT.\n\n           IF WS-F-TYPE = SPACE OR 'N' OR 'S'\n               ADD 1                          TO WS-SUB1.\n\n       1000-PARM-LOOP-EXIT. EXIT.\n\n      *---------------------------------------\n      *    if the parm refers back to a previous parm, see\n      *    if the field was found and save the position where it\n      *    was found.\n      *---------------------------------------\n       1300-GET-PUT-POS.\n           MOVE SPACE                         TO WS-REPLACE-SW.\n           IF WS-PNT1(WS-SUB1) NOT = SPACE\n               PERFORM VARYING WS-SUB4 FROM 1 BY 1\n                   UNTIL WS-SUB4 NOT < WS-SUB1\n                   IF WS-PNT1(WS-SUB1) = WS-PNT1(WS-SUB4)\n                       MOVE WS-TYPE(WS-SUB4)  TO WS-POINT-SW\n                       IF POINTER-RCD\n                         IF WS-FPOS(WS-SUB4) > ZERO\n                             MOVE WS-FPOS(WS-SUB4) TO WS-F-SAVE-POS\n                             MOVE 'Y'         TO WS-REPLACE-SW\n                         ELSE\n                             MOVE 'N'         TO WS-REPLACE-SW\n                             MOVE 80          TO WS-SUB4\n                         END-IF\n                       END-IF\n                   END-IF\n               END-PERFORM.\n           IF WS-PNT2(WS-SUB1) NOT = SPACE\n             IF WS-REPLACE-SW NOT = 'Y'\n                 PERFORM VARYING WS-SUB4 FROM 1 BY 1\n                     UNTIL WS-SUB4 NOT < WS-SUB1\n                     IF WS-PNT2(WS-SUB1) = WS-PNT2(WS-SUB4)\n                         MOVE WS-TYPE(WS-SUB4)  TO WS-POINT-SW\n                         IF POINTER-RCD\n                           IF WS-FPOS(WS-SUB4) > ZERO\n                               MOVE WS-FPOS(WS-SUB4) TO WS-F-SAVE-POS\n                               MOVE 'Y'         TO WS-REPLACE-SW\n                           ELSE\n                               MOVE 'N'         TO WS-REPLACE-SW\n                               MOVE 80          TO WS-SUB4\n                           END-IF\n                         END-IF\n                     END-IF\n                 END-PERFORM.\n           IF WS-REPLACE-SW = SPACE\n               MOVE 'Y'                       TO WS-REPLACE-SW.\n\n       1300-GET-PUT-POS-EXIT. EXIT.\n\n      *\n      *                 \\\\\u00a6//\n      *                 (. .)\n      *-------------oOOo-(_)-oOOo-------------\n\n      *---------------------------------------\n      *    'P' means pull data for later placement\n      *    'L' means start search at pos > 1\n      *---------------------------------------\n       1500-FIND.\n           IF WS-F-PULL = 'P'\n               PERFORM 1600-PULL-DATA THRU\n                       1600-PULL-DATA-EXIT\n           ELSE\n           IF WS-F-FLAG = 'L'\n               PERFORM 1800-FIND-STRING\n                   VARYING WS-SUB3 FROM WS-F-POS BY 1\n                   UNTIL WS-SUB3 > WS-F-MAX\n           ELSE\n           IF WS-F-POS > ZERO\n             IF WS-F-FLAG = '+' OR '-'\n                 MOVE WS-F-SAVE-POS           TO WS-SUB3\n                 MOVE WS-SUB1                 TO WS-SUB5\n                 PERFORM 2700-LOAD-R-FIELDS\n                 PERFORM 2000-PLUS-MINUS-POS\n                 IF WS-CALC-POS-SW = 'N'\n                     CONTINUE\n                 ELSE\n                     PERFORM 1800-FIND-STRING\n             ELSE\n                 MOVE WS-F-POS                TO WS-SUB3\n                 PERFORM 1800-FIND-STRING\n           ELSE\n               PERFORM 1800-FIND-STRING\n                   VARYING WS-SUB3 FROM 1 BY 1\n                   UNTIL WS-SUB3 > WS-F-MAX.\n\n       1500-FIND-EXIT. EXIT.\n\n       1600-PULL-DATA.\n           MOVE WS-SUB1                       TO WS-SUB5.\n           PERFORM 2700-LOAD-R-FIELDS.\n           IF WS-R-POS = ZERO\n               OR WS-R-FLAG = '+' OR '-'\n               MOVE WS-F-SAVE-POS             TO WS-SUB3\n           ELSE\n               MOVE WS-R-POS                  TO WS-SUB3.\n           PERFORM 2000-PLUS-MINUS-POS.\n           IF WS-CALC-POS-SW = 'N'\n               GO TO 1600-PULL-DATA-EXIT.\n           MOVE WS-SUB3                       TO WS-FPOS(WS-SUB1).\n           MOVE CHANGED-DATA(WS-SUB3: WS-R-LEN) TO WS-F-DATA.\n           IF WS-R-ADJ = 'S'\n               MOVE SPACE TO CHANGED-DATA(WS-SUB3: WS-R-LEN)\n           ELSE\n           IF WS-R-ADJ = '3' OR '4'\n               PERFORM 2400-POSITION-DELETE.\n           IF WS-SUB3 > WS-FILE-LEN\n               GO TO 1600-PULL-DATA-EXIT.\n           MOVE WS-SUB2                       TO WS-SUB5.\n           PERFORM 2700-LOAD-R-FIELDS.\n           IF WS-R-PULL = 'P'\n               MOVE WS-F-DATA                 TO WS-R-DATA.\n           IF WS-R-POS = ZERO\n               OR WS-R-FLAG = '+' OR '-'\n               CONTINUE\n           ELSE\n               MOVE WS-R-POS                  TO WS-SUB3.\n           PERFORM 1900-REPLACE THRU\n                   1900-REPLACE-EXIT.\n\n       1600-PULL-DATA-EXIT. EXIT.\n\n      *---------------------------------------\n      *    R parm - place data\n      *    if  #+00000#xxxxxx# then convert date or time.\n      *---------------------------------------\n       1700-PUT-DATA.\n           MOVE WS-SUB1                       TO WS-SUB5.\n           PERFORM 2700-LOAD-R-FIELDS.\n           IF WS-R-POS = ZERO\n               OR WS-R-FLAG = '+' OR '-'\n               MOVE WS-F-SAVE-POS             TO WS-SUB3\n           ELSE\n               MOVE WS-R-POS                  TO WS-SUB3.\n           MOVE 'Y'                           TO WS-CONVERT-SW.\n           IF WS-F-DATA-1 = '#'\n               AND WS-R-DATA(8: 1) = '#'\n               PERFORM 2700-CONVERT-NUMERICS.\n           IF WS-CONVERT-SW NOT = 'N'\n               PERFORM 1900-REPLACE THRU\n                       1900-REPLACE-EXIT.\n\n       1700-PUT-DATA-EXIT. EXIT.\n\n       1800-FIND-STRING.\n           IF WS-F-DATA-1 = '#'\n               MOVE SPACE                     TO WS-CONVERT-SW\n               PERFORM 1800-TEST-MATCH\n               IF WS-CONVERT-SW = 'Y'\n                   PERFORM 1800-MATCH\n               ELSE\n               IF WS-CONVERT-SW = 'N'\n                   CONTINUE\n               ELSE\n               IF WS-F-DATA(1: WS-F-LEN) =\n                               CHANGED-DATA(WS-SUB3: WS-F-LEN)\n                   PERFORM 1800-MATCH\n               ELSE\n                   CONTINUE\n           ELSE\n           IF WS-F-DATA(1: WS-F-LEN) =\n                               CHANGED-DATA(WS-SUB3: WS-F-LEN)\n               PERFORM 1800-MATCH.\n\n       1800-TEST-MATCH.\n           EVALUATE WS-F-DATA\n             WHEN '#CY#'\n             WHEN '#CYDDD#'\n             WHEN '#CYMD#'\n             WHEN '#DDD#'\n             WHEN '#HMM#'\n             WHEN '#HMSM#'\n             WHEN '#HMSM8#'\n             WHEN '#MD#'\n             WHEN '#MDCY#'\n             WHEN '#MDY#'\n             WHEN '#YDDD#'\n             WHEN '#YMD#'\n             WHEN '#NBR#'\n               IF CHANGED-DATA(WS-SUB3: WS-F-LEN) NUMERIC\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n                   MOVE CHANGED-DATA(WS-SUB3: WS-F-LEN)\n                                              TO WS-MATH-VALUE\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#CNV#'\n               MOVE CHANGED-DATA(WS-SUB3: WS-F-LEN)\n                                              TO WS-MATH-VALUE-X\n               MOVE SPACE                     TO WS-HOLD10\n               MOVE 10                        TO WS-SUB6\n               PERFORM VARYING WS-SUB4 FROM 10 BY -1\n                   UNTIL WS-SUB4 < 1\n                   IF WS-MATH-VALUE-X(WS-SUB4: 1) = SPACE\n                       CONTINUE\n                   ELSE\n                       MOVE WS-MATH-VALUE-X(WS-SUB4: 1)\n                                   TO WS-HOLD10(WS-SUB6: 1)\n                       SUBTRACT 1 FROM WS-SUB6\n                   END-IF\n               END-PERFORM\n               MOVE WS-HOLD10                 TO WS-MATH-VALUE-X\n               INSPECT WS-MATH-VALUE-X REPLACING ALL SPACE BY ZERO\n               IF WS-MATH-VALUE-X NUMERIC\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n                   MOVE WS-MATH-VALUE-X       TO WS-MATH-VALUE\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#M/D/Y#'\n             WHEN '#Y/M/D#'\n               IF CHANGED-DATA(WS-SUB3 + 2: 1) = '/'\n                   AND CHANGED-DATA(WS-SUB3 + 5: 1) = '/'\n                   AND CHANGED-DATA(WS-SUB3: 2) NUMERIC\n                   AND CHANGED-DATA(WS-SUB3 + 3: 2) NUMERIC\n                   AND CHANGED-DATA(WS-SUB3 + 6: 2) NUMERIC\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#M/D#'\n               IF CHANGED-DATA(WS-SUB3 + 2: 1) = '/'\n                   AND CHANGED-DATA(WS-SUB3: 2) NUMERIC\n                   AND CHANGED-DATA(WS-SUB3 + 3: 2) NUMERIC\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#M/D/CY#'\n               IF CHANGED-DATA(WS-SUB3 + 2: 1) = '/'\n                   AND CHANGED-DATA(WS-SUB3 + 5: 1) = '/'\n                   AND CHANGED-DATA(WS-SUB3: 2) NUMERIC\n                   AND CHANGED-DATA(WS-SUB3 + 3: 2) NUMERIC\n                   AND CHANGED-DATA(WS-SUB3 + 6: 4) NUMERIC\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#Y/DDD#'\n               IF CHANGED-DATA(WS-SUB3 + 2: 1) = '/'\n                   AND CHANGED-DATA(WS-SUB3: 2) NUMERIC\n                   AND CHANGED-DATA(WS-SUB3 + 3: 3) NUMERIC\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#CY/DDD#'\n               IF CHANGED-DATA(WS-SUB3 + 4: 1) = '/'\n                   AND CHANGED-DATA(WS-SUB3: 4) NUMERIC\n                   AND CHANGED-DATA(WS-SUB3 + 5: 3) NUMERIC\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#CY/M/D#'\n               IF CHANGED-DATA(WS-SUB3 + 4: 1) = '/'\n                   AND CHANGED-DATA(WS-SUB3 + 7: 1) = '/'\n                   AND CHANGED-DATA(WS-SUB3: 4) NUMERIC\n                   AND CHANGED-DATA(WS-SUB3 + 5: 2) NUMERIC\n                   AND CHANGED-DATA(WS-SUB3 + 8: 2) NUMERIC\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#H:M:SM#'\n               IF CHANGED-DATA(WS-SUB3 + 2: 1) = ':'\n                   AND CHANGED-DATA(WS-SUB3 + 5: 1) = ':'\n                   AND CHANGED-DATA(WS-SUB3: 2) NUMERIC\n                   AND CHANGED-DATA(WS-SUB3 + 3: 2) NUMERIC\n                   AND CHANGED-DATA(WS-SUB3 + 6: 2) NUMERIC\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#H:MM#'\n               IF CHANGED-DATA(WS-SUB3 + 2: 1) = ':'\n                   AND CHANGED-DATA(WS-SUB3: 2) NUMERIC\n                   AND CHANGED-DATA(WS-SUB3 + 3: 2) NUMERIC\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#HMP#'\n               IF CHANGED-DATA(WS-SUB3: 4) NUMERIC\n                   AND CHANGED-DATA(WS-SUB3 + 4: 2) = 'AM' OR 'PM'\n                                                   OR 'am' OR 'pm'\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#HMSP#'\n               IF CHANGED-DATA(WS-SUB3: 6) NUMERIC\n                   AND CHANGED-DATA(WS-SUB3 + 6: 2) = 'AM' OR 'PM'\n                                                   OR 'am' OR 'pm'\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#H:M P#'\n               IF CHANGED-DATA(WS-SUB3 + 2: 1) = ':'\n                   AND CHANGED-DATA(WS-SUB3 + 5: 1) = ' '\n                   AND CHANGED-DATA(WS-SUB3: 2) NUMERIC\n                   AND CHANGED-DATA(WS-SUB3 + 3: 2) NUMERIC\n                   AND CHANGED-DATA(WS-SUB3 + 6: 2) = 'AM' OR 'PM'\n                                                   OR 'am' OR 'pm'\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#H:MP#'\n               IF CHANGED-DATA(WS-SUB3 + 2: 1) = ':'\n                   AND CHANGED-DATA(WS-SUB3: 2) NUMERIC\n                   AND CHANGED-DATA(WS-SUB3 + 3: 2) NUMERIC\n                   AND CHANGED-DATA(WS-SUB3 + 5: 2) = 'AM' OR 'PM'\n                                                   OR 'am' OR 'pm'\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#H:M:SP#'\n               IF CHANGED-DATA(WS-SUB3 + 2: 1) = ':'\n                   AND CHANGED-DATA(WS-SUB3 + 5: 1) = ':'\n                   AND CHANGED-DATA(WS-SUB3: 2) NUMERIC\n                   AND CHANGED-DATA(WS-SUB3 + 3: 2) NUMERIC\n                   AND CHANGED-DATA(WS-SUB3 + 8: 2) = 'AM' OR 'PM'\n                                                   OR 'am' OR 'pm'\n                   MOVE 'Y'                   TO WS-CONVERT-SW\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN '#MDY4#'\n             WHEN '#YMD4#'\n                 MOVE 'Y'                     TO WS-CONVERT-SW\n             WHEN '#JCL#SPACE#'\n               IF CHANGED-DATA(1: 3) = '// '\n                   AND CHANGED-DATA(WS-SUB3: 6) = 'SPACE='\n                   PERFORM 1800-RECONCILE-SPACE\n                   IF WS-JCL-SW = 'C'\n                       MOVE 'Y'               TO WS-CONVERT-SW\n                   ELSE\n                       MOVE 'N'               TO WS-CONVERT-SW\n                   END-IF\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               END-IF\n             WHEN OTHER\n                 CONTINUE\n           END-EVALUATE.\n\n      *---------------------------------------\n      *    search for SPACE=(xx,(xx,xx),xx) jcl statement and\n      *      calculate length - allows for replacing a jcl space\n      *      paramater without knowing its length or contents.\n      *---------------------------------------\n       1800-RECONCILE-SPACE.\n           MOVE SPACE                         TO WS-JCL-SW.\n           MOVE ZERO                          TO WS-JCL-CNT.\n           PERFORM VARYING WS-SUB4 FROM WS-SUB3 BY 1\n               UNTIL WS-SUB4 > WS-FILE-LEN\n               IF CHANGED-DATA(WS-SUB4: 1) = '('\n                   MOVE 'Y'                   TO WS-JCL-SW\n                   ADD 1                      TO WS-JCL-CNT\n               ELSE\n               IF CHANGED-DATA(WS-SUB4: 1) = ')'\n                   SUBTRACT 1 FROM WS-JCL-CNT\n               END-IF\n               END-IF\n               IF WS-JCL-CNT = ZERO\n                 IF WS-JCL-SW = 'Y'\n                     COMPUTE WS-F-LEN = WS-SUB4 - WS-SUB3 + 1\n                     MOVE WS-FILE-LEN         TO WS-SUB4\n                     COMPUTE WS-F-MAX = WS-F-MPOS - WS-F-LEN + 1\n                     MOVE 'C'                 TO WS-JCL-SW\n                 END-IF\n               END-IF\n           END-PERFORM.\n\n       1800-MATCH.\n           MOVE ZERO                          TO WS-CNT(WS-SUB1).\n           MOVE WS-SUB3                       TO WS-FPOS(WS-SUB1).\n           IF WS-TYPE(WS-SUB1) = 'F'\n               MOVE WS-FILE-LEN               TO WS-SUB3\n           ELSE\n               MOVE WS-SUB2                   TO WS-SUB5\n               PERFORM 2700-LOAD-R-FIELDS\n               PERFORM 2700-CONVERT-NUMERICS\n               IF WS-CONVERT-SW NOT = 'N'\n                   PERFORM 1900-REPLACE THRU\n                           1900-REPLACE-EXIT.\n\n       1900-REPLACE.\n           MOVE SPACE                         TO WS-F-HOLD-DATA\n                                                 WS-R-HOLD-DATA\n                                                 WS-PRE-DATA.\n           PERFORM 2000-PLUS-MINUS-POS.\n           IF WS-CALC-POS-SW = 'N'\n               GO TO 1900-REPLACE-EXIT.\n      *---------------------------------------\n      *    load replace data pointers\n      *---------------------------------------\n           COMPUTE WS-R-MAX = WS-R-LEN + WS-SUB3 - 1.\n           IF WS-R-MAX > WS-R-MPOS\n               DISPLAY '**** Skipping: replacement length error'\n               DISPLAY '**** Position:  rcd ' WS-RCD-N\n                       '  pos ' WS-SUB3 '  len ' WS-R-LEN\n               DISPLAY '**** Data: ' WS-R-DATA(1: 44)\n               MOVE WS-FILE-LEN               TO WS-SUB3\n               GO TO 1900-REPLACE-EXIT.\n\n      *---------------------------------------\n      *    '1' means that replace data is being inserted\n      *    '2' means that replace data is being inserted and adjusted\n      *    '3' means that replace data is being deleted\n      *    '4' means that replace data is being deleted and adjusted\n      *    's' means that replace data is spaces\n      *---------------------------------------\n           IF WS-R-ADJ = '1' OR '2'\n             IF WS-R-POS > ZERO\n                 PERFORM 2300-POSITION-INSERT\n                 GO TO 1900-REPLACE-EXIT\n             ELSE\n             IF (WS-F-LEN NOT = WS-R-LEN)\n                 PERFORM 2100-CALC-INSERT\n                 GO TO 1900-REPLACE-EXIT.\n           IF WS-R-ADJ = '3' OR '4'\n               PERFORM 2400-POSITION-DELETE\n               IF WS-SUB3 > WS-FILE-LEN\n                   GO TO 1900-REPLACE-EXIT\n               ELSE\n                   PERFORM 2700-POST-UPDATE\n                   GO TO 1900-REPLACE-EXIT.\n\n           IF WS-R-ADJ = 'S'\n               MOVE CHANGED-DATA(WS-SUB3: WS-R-LEN) TO WS-PRE-DATA\n               MOVE SPACE    TO CHANGED-DATA(WS-SUB3: WS-R-LEN)\n           ELSE\n               MOVE CHANGED-DATA(WS-SUB3: WS-R-LEN) TO WS-PRE-DATA\n               MOVE WS-R-DATA(1: WS-R-LEN)\n                             TO CHANGED-DATA(WS-SUB3: WS-R-LEN).\n           PERFORM 2700-POST-UPDATE.\n\n       1900-REPLACE-EXIT. EXIT.\n\n      *---------------------------------------\n      *    determine find/replacement location\n      *---------------------------------------\n       2000-PLUS-MINUS-POS.\n           MOVE 'Y'                           TO WS-CALC-POS-SW.\n           MOVE WS-SUB3                       TO WS-SUB4 WS-FIND-POS.\n           IF WS-R-FLAG = '-'\n               COMPUTE WS-SUB4 = WS-SUB4 - WS-R-POS\n           ELSE\n           IF WS-R-FLAG = '+'\n               COMPUTE WS-SUB4 = WS-SUB4 + WS-R-POS\n           ELSE\n           IF WS-R-POS > ZERO\n               MOVE WS-R-POS                  TO WS-SUB4.\n           IF WS-SUB4 < 1\n               OR WS-SUB4 > WS-FILE-LEN\n               DISPLAY '**** Skipping: find or replacement length error'\n               DISPLAY '**** Position:  rcd ' WS-RCD-N\n                       '  pos ' WS-SUB4 '  len ' WS-R-LEN\n               DISPLAY '**** Data: ' WS-R-DATA(1: 44)\n               MOVE WS-FILE-LEN               TO WS-SUB3\n               MOVE 'N'                       TO WS-CALC-POS-SW\n           ELSE\n               MOVE WS-SUB4                   TO WS-SUB3.\n\n      *---------------------------------------\n      *    if replacement length greater than field:\n      *        logic similar to position-insert paragraph\n      *    else\n      *        delete the difference in their lengths (ie: adjust\n      *        data to the left WS-LEN-DIFF amount)\n      *        if data adjustment requested, insert spaces to the\n      *        right to keep right-most data positionally stable\n      *---------------------------------------\n       2100-CALC-INSERT.\n           COMPUTE WS-F-AHEAD-POS = WS-SUB3 + WS-F-LEN.\n           COMPUTE WS-R-AHEAD-POS = WS-SUB3 + WS-R-LEN.\n           IF WS-F-LEN > WS-R-LEN\n               COMPUTE WS-LEN-DIFF = WS-F-LEN - WS-R-LEN\n               MOVE 'I'                       TO WS-DIFF-SW\n           ELSE\n               COMPUTE WS-LEN-DIFF = WS-R-LEN - WS-F-LEN\n               MOVE 'D'                       TO WS-DIFF-SW.\n           MOVE CHANGED-DATA                  TO WS-F-HOLD-DATA\n                                                 WS-R-HOLD-DATA.\n           MOVE SPACE                         TO WS-SPACE-SW.\n           IF WS-DIFF-SW = 'I'\n               MOVE WS-R-HOLD-DATA(WS-R-AHEAD-POS: ) TO WS-PRE-DATA\n               MOVE WS-F-HOLD-DATA(WS-F-AHEAD-POS: ) TO\n                         WS-R-HOLD-DATA(WS-R-AHEAD-POS: )\n               MOVE WS-R-HOLD-DATA            TO WS-F-HOLD-DATA\n               IF WS-R-ADJ = '2'\n                   PERFORM 2500-FIND-SPACE-INS\n                       VARYING WS-SUB4 FROM WS-R-AHEAD-POS BY 1\n                       UNTIL WS-SUB4 > WS-R-MPOS\n                   IF WS-SPACE-SW = SPACE\n                       DISPLAY '**** Skipping: unable to'\n                               ' insert spaces'\n                       DISPLAY '**** Record: ' WS-READ-RCD-CNT\n                               '  pos ' WS-SUB3 '  len ' WS-R-LEN\n                       DISPLAY '**** Data:   ' WS-R-DATA(1: 44)\n                       MOVE WS-FILE-LEN       TO WS-SUB3\n                   ELSE\n                       MOVE WS-R-DATA(1: WS-R-LEN)\n                               TO WS-F-HOLD-DATA(WS-SUB3: WS-R-LEN)\n                       MOVE WS-F-HOLD-DATA    TO CHANGED-DATA\n                       PERFORM 2700-POST-UPDATE\n               ELSE\n                   MOVE WS-R-DATA(1: WS-R-LEN)\n                             TO WS-F-HOLD-DATA(WS-SUB3: WS-R-LEN)\n                   MOVE WS-F-HOLD-DATA        TO CHANGED-DATA\n                   PERFORM 2700-POST-UPDATE\n           ELSE\n               COMPUTE WS-R-MAX = WS-R-MPOS - WS-LEN-DIFF\n               IF WS-R-ADJ = '2'\n                   PERFORM 2500-FIND-SPACE-DEL\n                       VARYING WS-SUB4 FROM WS-R-AHEAD-POS BY 1\n                       UNTIL WS-SUB4 > WS-R-MAX\n                   IF WS-SPACE-SW = SPACE\n                       DISPLAY '**** Skipping: unable to '\n                               'find del spaces'\n                       DISPLAY '**** Record: ' WS-READ-RCD-CNT\n                               '  pos ' WS-SUB3 '  len ' WS-R-LEN\n                       DISPLAY '**** Data:   ' WS-R-DATA(1: 44)\n                       MOVE WS-FILE-LEN       TO WS-SUB3\n                   ELSE\n                       MOVE WS-F-HOLD-DATA(WS-SUB3: ) TO WS-PRE-DATA\n                       MOVE WS-R-HOLD-DATA(WS-F-AHEAD-POS: ) TO\n                             WS-F-HOLD-DATA(WS-R-AHEAD-POS: )\n                       MOVE WS-R-DATA(1: WS-R-LEN)\n                               TO WS-F-HOLD-DATA(WS-SUB3: WS-R-LEN)\n                       MOVE WS-F-HOLD-DATA    TO CHANGED-DATA\n                       PERFORM 2700-POST-UPDATE\n               ELSE\n                   MOVE WS-F-HOLD-DATA(WS-SUB3: ) TO WS-PRE-DATA\n                   MOVE WS-R-HOLD-DATA(WS-F-AHEAD-POS: ) TO\n                         WS-F-HOLD-DATA(WS-R-AHEAD-POS: )\n                   MOVE WS-R-DATA(1: WS-R-LEN)\n                           TO WS-F-HOLD-DATA(WS-SUB3: WS-R-LEN)\n                   MOVE WS-F-HOLD-DATA        TO CHANGED-DATA\n                   PERFORM 2700-POST-UPDATE.\n\n      *---------------------------------------\n      *    if adjustment requested, search for spaces occurring\n      *    after found field.  if found, delete the spaces.\n      *\n      *    move data from found field location to the right.\n      *    insert field.\n      *---------------------------------------\n       2300-POSITION-INSERT.\n           COMPUTE WS-R-AHEAD-POS = WS-SUB3 + WS-R-LEN.\n           MOVE 'D'                           TO WS-DIFF-SW.\n           MOVE CHANGED-DATA                  TO WS-F-HOLD-DATA\n                                                 WS-R-HOLD-DATA.\n           MOVE SPACE                         TO WS-SPACE-SW.\n           MOVE WS-R-LEN                      TO WS-LEN-DIFF.\n           COMPUTE WS-R-MAX = WS-R-MPOS - WS-R-LEN.\n           IF WS-R-ADJ = '2'\n               PERFORM 2500-FIND-SPACE-DEL\n                   VARYING WS-SUB4 FROM WS-R-AHEAD-POS BY 1\n                   UNTIL WS-SUB4 > WS-R-MAX\n               IF WS-SPACE-SW = SPACE\n                   DISPLAY '**** Skipping: unable to find del spaces'\n                   DISPLAY '**** Record: ' WS-READ-RCD-CNT\n                       '  pos ' WS-SUB3 '  len ' WS-R-LEN\n                   DISPLAY '**** Data:   ' WS-R-DATA(1: 44)\n                   MOVE WS-FILE-LEN           TO WS-SUB3\n               ELSE\n                   MOVE WS-F-HOLD-DATA(WS-SUB3: ) TO WS-PRE-DATA\n                   MOVE WS-R-HOLD-DATA(WS-SUB3: ) TO\n                         WS-F-HOLD-DATA(WS-R-AHEAD-POS: )\n                   MOVE WS-R-DATA(1: WS-R-LEN)\n                           TO WS-F-HOLD-DATA(WS-SUB3: WS-R-LEN)\n                   MOVE WS-F-HOLD-DATA        TO CHANGED-DATA\n                   PERFORM 2700-POST-UPDATE\n           ELSE\n               MOVE WS-F-HOLD-DATA(WS-SUB3: ) TO WS-PRE-DATA\n               MOVE WS-R-HOLD-DATA(WS-SUB3: ) TO\n                     WS-F-HOLD-DATA(WS-R-AHEAD-POS: )\n               MOVE WS-R-DATA(1: WS-R-LEN)\n                       TO WS-F-HOLD-DATA(WS-SUB3: WS-R-LEN)\n               MOVE WS-F-HOLD-DATA            TO CHANGED-DATA\n               PERFORM 2700-POST-UPDATE.\n\n      *---------------------------------------\n      *    move all data from (found pos + len) to found pos,\n      *    thereby deleting the field.  optionally insert spaces\n      *    to re-adjust data.\n      *---------------------------------------\n       2400-POSITION-DELETE.\n           COMPUTE WS-R-AHEAD-POS = WS-SUB3 + WS-R-LEN.\n           MOVE 'I'                           TO WS-DIFF-SW.\n           MOVE CHANGED-DATA                  TO WS-F-HOLD-DATA\n                                                 WS-R-HOLD-DATA.\n           MOVE SPACE                         TO WS-SPACE-SW.\n           MOVE WS-R-LEN                      TO WS-LEN-DIFF.\n           COMPUTE WS-R-MAX = WS-R-MPOS - WS-R-LEN.\n           MOVE WS-F-HOLD-DATA(WS-R-AHEAD-POS: ) TO\n                         WS-R-HOLD-DATA(WS-SUB3: ).\n           MOVE WS-R-HOLD-DATA                TO WS-F-HOLD-DATA.\n           IF WS-R-ADJ = '4'\n               PERFORM 2500-FIND-SPACE-INS\n                   VARYING WS-SUB4 FROM WS-R-AHEAD-POS BY 1\n                   UNTIL WS-SUB4 > WS-R-MPOS\n               IF WS-SPACE-SW = SPACE\n                   DISPLAY '**** Skipping: unable to insert spaces'\n                   DISPLAY '**** Record: ' WS-READ-RCD-CNT\n                       '  pos ' WS-SUB3 '  len ' WS-R-LEN\n                   DISPLAY '**** Data:   ' WS-R-DATA(1: 44)\n                   MOVE WS-FILE-LEN           TO WS-SUB3\n               ELSE\n                   MOVE WS-F-HOLD-DATA        TO CHANGED-DATA\n           ELSE\n               MOVE WS-F-HOLD-DATA            TO CHANGED-DATA.\n\n       2500-FIND-SPACE-INS.\n           IF WS-R-HOLD-DATA(WS-SUB4: 1) = SPACE\n               MOVE 'Y'                       TO WS-SPACE-SW\n               COMPUTE WS-AHEAD-LOC = WS-SUB4 + WS-LEN-DIFF\n               MOVE WS-R-HOLD-DATA(WS-SUB4: ) TO\n                          WS-F-HOLD-DATA(WS-AHEAD-LOC: )\n               MOVE SPACE TO WS-F-HOLD-DATA(WS-SUB4: WS-LEN-DIFF)\n               MOVE WS-FILE-LEN               TO WS-SUB4.\n\n       2500-FIND-SPACE-DEL.\n           IF WS-R-HOLD-DATA(WS-SUB4: WS-LEN-DIFF) = SPACE\n               MOVE 'Y'                       TO WS-SPACE-SW\n               COMPUTE WS-AHEAD-LOC = WS-SUB4 + WS-LEN-DIFF\n               MOVE WS-F-HOLD-DATA(WS-AHEAD-LOC: ) TO\n                          WS-R-HOLD-DATA(WS-SUB4: )\n               MOVE WS-FILE-LEN               TO WS-SUB4.\n\n      *---------------------------------------\n      *    holding fields\n      *---------------------------------------\n       2700-LOAD-F-FIELDS.\n           MOVE WS-LEN(WS-SUB5)               TO WS-F-LEN.\n           MOVE WS-POS(WS-SUB5)               TO WS-F-POS.\n           MOVE WS-MPOS(WS-SUB5)              TO WS-F-MPOS.\n           MOVE WS-FLAG(WS-SUB5)              TO WS-F-FLAG.\n           MOVE WS-PULL(WS-SUB5)              TO WS-F-PULL.\n           MOVE WS-DATA(WS-SUB5)              TO WS-F-DATA.\n\n      *---------------------------------------\n      *    holding fields, sometimes containing line 1 data,\n      *    other times containing line 2 data.\n      *---------------------------------------\n       2700-LOAD-R-FIELDS.\n           MOVE WS-LEN(WS-SUB5)               TO WS-R-LEN.\n           MOVE WS-POS(WS-SUB5)               TO WS-R-POS.\n           MOVE WS-MPOS(WS-SUB5)              TO WS-R-MPOS.\n           MOVE WS-FLAG(WS-SUB5)              TO WS-R-FLAG.\n           MOVE WS-PULL(WS-SUB5)              TO WS-R-PULL.\n           MOVE WS-ADJ(WS-SUB5)               TO WS-R-ADJ.\n           MOVE WS-DATA(WS-SUB5)              TO WS-R-DATA.\n\n      *---------------------------------------\n      *    if #NBR#, search was for a numeric string.\n      *    add or subtract to that amount via the #-00000# parameter.\n      *\n      *    if #xxxxxx#, search was for a date/time string.\n      *    add or subtract the number of days/minutes requested,\n      *    then convert to the same or a different format.\n      *---------------------------------------\n       2700-CONVERT-NUMERICS.\n           IF WS-CONVERT-SW = 'Y'\n             IF WS-R-DATA(8: 5) = '#NBR#'\n               IF WS-R-DATA(2: 1) = '+' OR '-' OR '/' OR '*'\n                   AND WS-R-DATA(3: 5) NUMERIC\n                   PERFORM 2700-DO-MATH\n               ELSE\n               IF WS-R-DATA(2: 1) = 'S'\n                   AND WS-R-DATA(3: 5) NUMERIC\n                   PERFORM 2700-DO-SUM\n                   MOVE 'N'                   TO WS-CONVERT-SW\n               ELSE\n                   CONTINUE\n             ELSE\n             IF WS-R-DATA(8: 5) = '#CNV#'\n               IF WS-R-DATA(2: 1) = '+' OR '-' OR '/' OR '*'\n                   AND WS-R-DATA(3: 5) NUMERIC\n                   PERFORM 2700-DO-MATH\n               ELSE\n               IF WS-R-DATA(2: 1) = 'S'\n                   AND WS-R-DATA(3: 5) NUMERIC\n                   PERFORM 2700-DO-SUM-CNV\n               ELSE\n                   CONTINUE\n             ELSE\n             IF WS-R-DATA(8: 8) = '#HMSM#' OR '#H:M:SM#' OR '#HMM#'\n                               OR '#HMP#'  OR '#H:M P#'  OR '#H:MM#'\n                               OR '#HMSM8#' OR '#H:MP#'  OR '#HMSP#'\n                               OR '#H:M:SP#'\n               IF WS-R-DATA(2: 1) = 'I' OR 'D'\n                   AND WS-R-DATA(3: 5) NUMERIC\n                   MOVE SPACE                 TO WS-STV0400B-FIELDS\n                   MOVE 'HMSM  '              TO WS-HOLD-IN\n                   PERFORM 2700-CONVERT THRU\n                           2700-CONVERT-EXIT\n               ELSE\n                   CONTINUE\n             ELSE\n      *---------------------------------------\n      *    if an 'R' parm, take offset value into account\n      *---------------------------------------\n             IF WS-R-DATA(2: 1) = '+' OR '-'\n                 AND WS-R-DATA(3: 5) NUMERIC\n                 IF WS-F-TYPE = 'R'\n                     MOVE 'Y'                 TO WS-OFF-NOTIFY-SW\n                     MOVE SPACE               TO WS-STV0400B-FIELDS\n                     MOVE WS-1-CYMD           TO STV0400B-1X8\n                     MOVE 'CYMD  '            TO STV0400B-IN\n                     MOVE 'CYMD  '            TO WS-HOLD-IN\n                     PERFORM 2700-CONVERT THRU\n                             2700-CONVERT-EXIT\n                 ELSE\n                     MOVE SPACE               TO WS-STV0400B-FIELDS\n                     MOVE 'CYMD  '            TO WS-HOLD-IN\n                     PERFORM 2700-CONVERT THRU\n                             2700-CONVERT-EXIT.\n\n       2700-DO-MATH.\n           MOVE WS-R-DATA(3: 5)               TO WS-MATH-INC.\n           IF WS-R-DATA(2: 1) = '+'\n               ADD WS-MATH-INC TO WS-MATH-VALUE\n           ELSE\n           IF WS-R-DATA(2: 1) = '-'\n               SUBTRACT WS-MATH-INC FROM WS-MATH-VALUE\n           ELSE\n           IF WS-R-DATA(2: 1) = '*'\n               COMPUTE WS-MATH-VALUE = WS-MATH-INC * WS-MATH-VALUE\n           ELSE\n           IF WS-R-DATA(2: 1) = '/'\n               COMPUTE WS-MATH-VALUE = WS-MATH-VALUE / WS-MATH-INC.\n           COMPUTE WS-MATH-INC = 10 - WS-R-LEN + 1.\n           MOVE WS-MATH-VALUE(WS-MATH-INC: )  TO WS-R-DATA.\n\n       2700-DO-SUM.\n           ADD WS-MATH-VALUE                  TO WS-SUM(WS-SUB5).\n           MOVE 'Y'                           TO WS-MATH-SUM-SW.\n\n       2700-DO-SUM-CNV.\n           ADD WS-MATH-VALUE                  TO WS-SUM(WS-SUB5).\n           COMPUTE WS-MATH-INC = 10 - WS-R-LEN + 1.\n           MOVE WS-MATH-VALUE(WS-MATH-INC: )  TO WS-R-DATA.\n           MOVE 'Y'                           TO WS-MATH-SUM-SW.\n\n      *---------------------------------------\n      *    convert +- number of days, or increment/decrement number\n      *    of minutes, then place in desired format\n      *---------------------------------------\n       2700-CONVERT.\n           IF WS-F-TYPE = 'R'\n               CONTINUE\n           ELSE\n           IF WS-F-DATA(2: 4) = 'MDY4' OR 'YMD4'\n               COMPUTE WS-ODO-POST = (WS-FILE-LEN - WS-SUB3) - 3\n               COMPUTE WS-ODO-PRE = (WS-FILE-LEN - WS-ODO-POST) - 4\n               MOVE CHANGED-DATA              TO WS-HOLD-PACKED\n               MOVE WS-PACK-4                 TO WS-UNPACK-6\n               IF WS-UNPACK-6 NOT NUMERIC\n                   DISPLAY '**** Packed field not numeric'\n                   DISPLAY '**** Record: ' WS-READ-RCD-CNT\n                           '  pos ' WS-SUB3 '  len ' WS-R-LEN\n                   DISPLAY '**** Data:   ' WS-PACK-4\n                   MOVE 'N'                   TO WS-CONVERT-SW\n                   GO TO 2700-CONVERT-EXIT\n               ELSE\n                   MOVE WS-UNPACK-6           TO STV0400B-DATA\n                                                 WS-HOLD-DATE\n                   IF WS-F-DATA(2: 4) = 'MDY4'\n                       MOVE '#MDY# '          TO WS-F-DATA\n                       MOVE 'MDY   '          TO STV0400B-IN\n                   ELSE\n                       MOVE '#YMD# '          TO WS-F-DATA\n                       MOVE 'YMD   '          TO STV0400B-IN\n           ELSE\n               MOVE CHANGED-DATA(WS-SUB3: WS-F-LEN) TO STV0400B-DATA\n                                                       WS-HOLD-DATE\n               MOVE WS-F-DATA(2: 6)           TO STV0400B-IN.\n\n           MOVE WS-R-DATA(2: 6)               TO STV0400B-OUT.\n           INSPECT STV0400B-IN REPLACING ALL '#' BY SPACE.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           IF STV0400B-1X6 = 'ERROR'\n               DISPLAY '**** Skipping: unable to convert IN data'\n               DISPLAY '**** Record: ' WS-READ-RCD-CNT\n                       '  pos ' WS-SUB3 '  len ' WS-R-LEN\n               DISPLAY '**** Fields: ' WS-STV0400B-FIELDS\n               DISPLAY '**** Data:   ' WS-HOLD-DATE\n               IF WS-IGNORE-ERR-SW = 'Y'\n                   MOVE WS-HOLD-DATE          TO WS-R-DATA\n               ELSE\n                   MOVE 'N'                   TO WS-CONVERT-SW\n           ELSE\n               MOVE STV0400B-DATA             TO WS-HOLD-DATE\n               MOVE WS-HOLD-IN                TO STV0400B-IN\n               MOVE WS-R-DATA(9: 6)           TO STV0400B-OUT\n               INSPECT STV0400B-OUT REPLACING ALL '#' BY SPACE\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               IF STV0400B-1X6 = 'ERROR'\n                   DISPLAY '**** Skipping: unable to convert OUT data'\n                   DISPLAY '**** Record: ' WS-READ-RCD-CNT\n                           '  pos ' WS-SUB3 '  len ' WS-R-LEN\n                   DISPLAY '**** Fields: ' WS-STV0400B-FIELDS\n                   DISPLAY '**** Data:   ' WS-HOLD-DATE\n                   IF WS-IGNORE-ERR-SW = 'Y'\n                       MOVE WS-HOLD-DATE      TO WS-R-DATA\n                   ELSE\n                       MOVE 'N'               TO WS-CONVERT-SW\n               ELSE\n                   MOVE STV0400B-DATA         TO WS-R-DATA.\n\n       2700-CONVERT-EXIT. EXIT.\n\n       2700-POST-UPDATE.\n           MOVE WS-SUB3                       TO WS-FPOS(WS-SUB5).\n           MOVE 'Y'                           TO WS-REWRITE-SW.\n           IF WS-SUPPR(WS-SUB1) NOT = 'A'\n               DISPLAY '**** Position:  rcd ' WS-RCD-N\n                         '  pos ' WS-SUB3 '  len ' WS-R-LEN.\n           IF WS-SUPPR(WS-SUB1) = SPACE OR 'I'\n               INSPECT WS-PRE-DATA REPLACING ALL LOW-VALUE BY '.'\n               DISPLAY '**** Was : ' WS-PRE-DATA.\n           COMPUTE WS-SUB4 = WS-FILE-LEN - WS-SUB3.\n           IF WS-SUB4 > 44\n               MOVE 44                        TO WS-SUB4.\n           IF WS-SUPPR(WS-SUB1) = SPACE OR 'W'\n               DISPLAY '**** Is  : ' CHANGED-DATA(WS-SUB3: WS-SUB4).\n           IF WS-SUPPR(WS-SUB1) NOT = 'A'\n             IF WS-R-ADJ = '3' OR '4'\n                 DISPLAY '**** Del : ' WS-F-DATA(1: 44)\n             ELSE\n             IF WS-R-ADJ = '1' OR '2'\n                 DISPLAY '**** Ins : ' WS-R-DATA(1: 44)\n             ELSE\n                 DISPLAY '**** Data: ' WS-R-DATA(1: 44).\n           IF WS-TYPE(WS-SUB1) = 'N' OR 'F' OR 'R'\n               MOVE WS-FILE-LEN               TO WS-SUB3\n           ELSE\n           IF WS-TYPE(WS-SUB1) = 'S'\n               MOVE WS-FIND-POS               TO WS-SUB3\n           ELSE\n               MOVE WS-FILE-LEN               TO WS-SUB3\n               MOVE 80                        TO WS-SUB1.\n\n       2800-SET-RETURN-CODE.\n           MOVE WS-F-DATA                     TO WS-COND-DATA.\n           IF WS-COND-DAY NUMERIC\n             IF WS-COND-FLAG = 'W'\n                 MOVE 'Y'                     TO WS-OFF-NOTIFY-SW\n                 MOVE SPACE                   TO WS-STV0400B-FIELDS\n                 MOVE WS-1-CYMD               TO STV0400B-1X8\n                 MOVE 'CYMD  '                TO STV0400B-IN\n                 MOVE 'DAY   '                TO STV0400B-OUT\n                 CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n                 IF STV0400B-1X6 = 'ERROR'\n                     DISPLAY '**** STV0400B day calc error'\n                     MOVE +2800               TO WS-RETURN-CODE\n                 ELSE\n                 MOVE STV0400B-DAY-NBR        TO WS-NBR-DAY\n                 IF WS-NBR-DAY = WS-COND-DAY-N\n                     DISPLAY '**** Day of week match '\n                 ELSE\n                     GO TO 2800-SET-RETURN-EXIT\n             ELSE\n             IF WS-COND-FLAG = 'M'\n               IF WS-COND-DAY = WS-1-CYMD-DD\n                   DISPLAY '**** Day of month match: ' WS-1-CYMD\n               ELSE\n                   GO TO 2800-SET-RETURN-EXIT.\n\n           IF WS-COND-CODE NUMERIC\n               MOVE WS-COND-CODE              TO WS-SUB4\n               IF WS-SUB4 > 4095\n                   DISPLAY '**** Requested return code > 4095'\n                   MOVE +2800         TO WS-RETURN-CODE\n               ELSE\n                   MOVE WS-SUB4       TO WS-SET-CODE\n                   MOVE 'Y'           TO WS-COND-CODE-SW.\n\n       2800-SET-RETURN-EXIT. EXIT.\n\n       3000-REWRITE-CHANGED.\n           REWRITE CHANGED-RECORD.\n           IF WS-STAT > ZERO\n               DISPLAY '**** CHNGFILE rewrite error on CHANGED'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +3000                     TO WS-RETURN-CODE\n           ELSE\n               ADD 1                          TO WS-REWRITE-RCD-CNT.\n\n       3100-ADD-LINE.\n           IF CHANGED-DATA(1: 25) = '//*                      '\n                                 OR '//***********************'\n                                 OR '//*----------------------'\n               CONTINUE\n           ELSE\n               GO TO 3100-ADD-LINE-EXIT.\n           MOVE WS-F-DATA                     TO WS-ADD-DATA.\n           IF WS-F-DATA(15: 6) = 'YYMMDD'\n               MOVE WS-1-CYMD-YMD             TO WS-ADD-DATA(15: 6).\n           IF WS-F-DATA(44: 1) = '+'\n               ADD 1 TO WS-SUB1 GIVING WS-SUB4\n               IF WS-TYPE(WS-SUB4) = 'A'\n                   MOVE WS-DATA(WS-SUB4)      TO WS-ADD-DATA(44: )\n                   ADD 1                      TO WS-SUB1.\n           MOVE 'Y'                           TO WS-WRITE-SW.\n\n       3100-ADD-LINE-EXIT. EXIT.\n\n      ************************************ END CHNGFILE\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CHNGPARM": {"ttr": 2822, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00Q\\x01\\x19\\x07/\\x01\\x191\\x9f\\x11P\\x00@\\x00;\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-15T11:50:51", "lines": 64, "newlines": 59, "modlines": 0, "user": "IANNONE"}, "text": "* REPLACE LINE (RCD 2) ONLY USED FOR SPACE/N/S\n* --------FIND LINE--(RCD 1)--------  --------REPLACE LINE--(RCD 2)----\n* POS 1 : SPACE OR                    POS 1 : SAME AS RCD 1\n*         *=COMMENT\n*         W=SKIP 'WAS' DISPLAY\n*         I=SKIP 'IS' DISPLAY\n*         B=SKIP BOTH DISPLAYS\n*         A=SKIP ALL DISPLAYS\n* POS 2 : SPACE=IF FOUND, NEW RCD     POS 2 : SAME AS RCD 1\n*         N=KEEP RCD, USE NEXT PARM\n*         S=KEEP RCD, USE SAME PARM\n*         F=FIND AND SAVE POSITION\n*         R=PLACE/REPLACE\n*         A=ADD AN OVERLAY COMMENT\n*         C=SET CONDITION CODE\n*         D=DEFAULT CONDITION CODE\n* POS 3 : II=IF STRING FOUND IN PREV  POS 3 : IGNORED\n*         # OF RCDS, ALLOW REPLACE\n* POS 5 : POINTER BYTE TO PREV RCDS   POS 5 : IGNORED\n*         WITH SAME POINTER BYTE\n* POS 6 : POINTER BYTE TO PREV RCDS   POS 6 : IGNORED\n*         WITH SAME POINTER BYTE\n* POS 7 : SPACE                       POS 7 : SPACE\n*         +=FIND AT LOCATION                  +=REPLACE AT LOCATION\n*         -= RELATIVE TO PREV POS             -= RELATIVE TO FIND POS\n*         L=START FIND AT POS\n* POS 8 : ####=POSITION OF DATA       POS 8 : ####=POSITION OF DATA\n*         PREV FIND IF 00 & POINTER           OFFSET IF '+' OR '-'\n*         OFFSET IF '+' OR '-'                RCD 1 POS IF 00 USED\n* POS 12: ####=MAX POSITION OF DATA   POS 12: ####=MAX POSITION FOR\n*                                                DATA INSERTION\n* POS 16: P=PULL DATA                 POS 16: P=PUT DATA FROM PULL\n* POS 17: 1=INSERT OR ADJUST          POS 17: SAME AS RCD 1\n*         2=ADJUST AND CORRECT\n*         3=DELETE\n*         4=DELETE AND CORRECT\n*         S=IGNORE DATA, PUT SPACES\n* POS 18: ####=LENGTH OF DATA         POS 18: ####=LENGTH OF DATA\n*         CCCC= AUTO LENGTH CALC              CCCC=AUTO LENGTH CALC\n* POS 24: DATA TO FIND                POS 24: REPLACEMENT DATA\n*         CONDITION CODE\n*         DATA FOR OVERLAY COMMENT\n*         #NBR#  #CNV#                        #+00000#NBR#   +-/*S\n*         #XXXXXX#                            #+00000#XXXXXX#\n* POS 67: IF '+', NEXT 'A' RCD USED TO CONTINUE AN OVERLAY COMMENT\n*\n* UP TO 40 PAIRS OF CHANGES, OR 80 LINES, MAY BE ENTERED\n* SEE CHNGDOCU FOR FURTHER DETAILS\n*\n*...+....1....+....2....\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n F00   00000000  0000  DATA TO FIND\n  00   00000000  0000  RECORD 1 DATA (FIND/PULL)\n  00   00000000  0000  RECORD 2 DATA (REPLACE/PUT)\n R00   00000000  0000  DATA TO REPLACE\n A00   00000000  0000  //....JCI....YYMMDD SMHM..HCT0.HMMASTER  TR+\n A00   00000000  0000  K,(4000,1000),RLSE)\n C00   00000000  0000  1111\n\n\n see CHNGEXMP for actual usage examples\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CHNGPROC": {"ttr": 2824, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x04\\x01\\x19\\x07/\\x01\\x192?\\x11\\x04\\x00\\x0f\\x00\\x0b\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T11:04:04", "lines": 15, "newlines": 11, "modlines": 0, "user": "IANNONE"}, "text": "//*-------------------------------------------\n//*  this assumes program CHNGFILE has been recompiled\n//*  as CHNG0080\n//*-------------------------------------------\n//S000     EXEC PGM=CHNG0080,\n//             REGION=5120K,\n//             PARM='0080N0000000000&OFFX&CMDX/'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//CHANGED  DD  DISP=SHR,DSN=file to change\n//PARM01   DD  DISP=SHR,DSN=userid.ISPF.FILE488(CHNGPARM)\n//OFFSET   DD  DISP=SHR,DSN=userid.ISPF.FILE488(MIS10010)\n//*-------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CHNGTSTA": {"ttr": 2826, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x16\\x01\\x19\\x07?\\x01\\x192?\\x11\\x04\\x00\\x1d\\x00\\x19\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-11-19T11:04:16", "lines": 29, "newlines": 25, "modlines": 0, "user": "IANNONE"}, "text": "/*PRIORITY     07\n//useridJ  JOB (5000,'test CHNGFILE aka CHNG0080'),\n//             'test CHNG0080',\n//             CLASS=x,\n//             MSGCLASS=x,\n//*            RESTART=J010.S010,\n//*            TYPRUN=SCAN,\n//             MSGLEVEL=(1,1)\n//*-------------------------------------------\n//*  Example of CHNGFILE capabilities:\n//*  Convert YMD to CYMD format, add 300 days to CYMD date\n//*\n//*  Note: member CHNG005F shows the result of this conversion -\n//*        note that some dates did not convert because they were\n//*        invalid\n//*\n//*-------------------------------------------\n//S010     EXEC PGM=CHNG0080,\n//             REGION=5120K,\n//             COND=(0,NE),\n//             PARM='0080N0000000000N00000000/'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//CHANGED  DD  DISP=SHR,DSN=userid.ISPF.FILE488(CHNG005B)\n//PARM01   DD  DISP=SHR,DSN=userid.ISPF.FILE488(CHNG005C)\n//OFFSET   DD  DISP=SHR,DSN=userid.ISPF.FILE488(MIS10010)\n//*-------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CHNG005B": {"ttr": 2828, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x003o\\x01\\x003o\\x11%\\x00\\x15\\x00\\x15\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-12-01T00:00:00", "modifydate": "2000-12-01T11:25:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "IANNONE"}, "text": "AAAA  BBBB  CCCC  DDDD  990219EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990220EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990221EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990222EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990223EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990224EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990225EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990226EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990227EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990228EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990229EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990230EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990231EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990301EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990302EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990303EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990304EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990305EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990306EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990307EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990308EEEE  FFFF  GGGG\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CHNG005C": {"ttr": 2830, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00V\\x01\\x19\\x07?\\x01\\x191\\x8f\\x10 \\x00\\x08\\x00\\x06\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-11-14T10:20:56", "lines": 8, "newlines": 6, "modlines": 0, "user": "IANNONE"}, "text": "*\n*  Find YMD formatted date at pos 25 and convert to CYMD\n*  format.  Also advance the date 300 days forward.\n*\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n  00   00250000  0006  #YMD#\n  00   00000000  0008  #+00300#CYMD#\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CHNG005F": {"ttr": 2832, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x99\\x05\\x0f\\x00\\x99\\x05\\x0f\\t!\\x00\\x15\\x00\\x01\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1999-02-19T00:00:00", "modifydate": "1999-02-19T09:21:00", "lines": 21, "newlines": 1, "modlines": 0, "user": "IANNONE"}, "text": "AAAA  BBBB  CCCC  DDDD  19991216EE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  19991217EE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  19991218EE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  19991219EE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  19991220EE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  19991221EE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  19991222EE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  19991223EE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  19991224EE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  19991225EE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990229EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990230EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  990231EEEE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  19991226EE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  19991227EE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  19991228EE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  19991229EE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  19991230EE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  19991231EE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  20000101EE  FFFF  GGGG\nAAAA  BBBB  CCCC  DDDD  20000102EE  FFFF  GGGG\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COBNEAT": {"ttr": 2834, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x19\\x01\\x19\\x01o\\x01\\x192/\\x12 \\x0c\\x0f\\x02\\xd5\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2019-01-16T00:00:00", "modifydate": "2019-11-18T12:20:19", "lines": 3087, "newlines": 725, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  COBNEAT:  clean-up Cobol programs'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    COBNEAT.\n      **********************************************************CX003B\n      *@@@ C3 clean-up Cobol programs\n      *************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * Date written: 01/16/2019\n      * Author      : Jim Iannone\n      *               loop through Cobol programs and line things up\n      ****************************************************************\n      * Date changed: mm/dd/yyyy username\n      *               comments...\n      ****************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n           C01 IS PAGE-TOP.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT COBIN                ASSIGN TO COBIN\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT COBOUT               ASSIGN TO COBOUT\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  COBIN\n           RECORDING MODE F.\n       01  COBIN-RECORD.\n           05  COBIN-RCD               PIC  X(80).\n\n       FD  COBOUT\n           RECORDING MODE F.\n       01  COBOUT-RECORD.\n           05  COBOUT-RCD              PIC  X(80).\n\n       FD  PARM01\n           RECORDING MODE F.\n       01  PARM01-RECORD.\n           05  PARM01-DOCU             PIC  X.\n           05  FILLER                  PIC  X.\n           05  PARM01-FLAG             PIC  X.\n           05  FILLER                  PIC  X.\n           05  PARM01-ITEM             PIC  X(32).\n           05  FILLER                  PIC  X.\n           05  PARM01-LEN              PIC  XX.\n           05  FILLER                  PIC  X.\n           05  PARM01-OPTION           PIC  X(06).\n           05  FILLER                  PIC  X(26).\n           05  FILLER                  PIC  X(08).\n\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage COBNEAT start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-TALLY                PIC S9(04)    VALUE ZERO COMP.\n           05  WS-LS-DATA              PIC  X(10)    VALUE SPACE.\n           05  FILLER REDEFINES WS-LS-DATA.\n               10  WS-LS-TEST          PIC  X.\n               10  WS-LS-EXTRA         PIC  X(09).\n           05  WS-QUOTE                PIC  X        VALUE X'7D'.\n           05  WS-HOLD-RCD             PIC  X(80)    VALUE SPACE.\n           05  FILLER REDEFINES WS-HOLD-RCD.\n               10  WS-RCD-1X7          PIC  X(07).\n               10  WS-RCD-8X72         PIC  X(65).\n               10  WS-RCD-73X80        PIC  X(08).\n           05  WS-HOLD-RCD2            PIC  X(80)    VALUE SPACE.\n           05  WS-HOLD-RCD3            PIC  X(80)    VALUE SPACE.\n           05  WS-LOGIC-PLACE          PIC  X(30)    VALUE SPACE.\n           05  WS-HOLD-32-TEMP         PIC  X(32)    VALUE SPACE.\n           05  WS-HOLD-32              PIC  X(32)    VALUE SPACE.\n           05  FILLER REDEFINES WS-HOLD-32.\n               10  WS-HOLD-10.\n                   15  WS-HOLD-04      PIC  X(04).\n                   15  WS-HOLD-5X10    PIC  X(06).\n               10  FILLER              PIC  X(22).\n           05  WS-HOLD-08              PIC  X(08)    VALUE SPACE.\n           05  WS-HOLD-50              PIC  X(50)    VALUE SPACE.\n           05  WS-ITEM                 PIC  X(32)    VALUE SPACE.\n           05  FILLER REDEFINES WS-ITEM.\n               10  WS-ITEM-1X2         PIC  XX.\n               10  WS-ITEM-3           PIC  X.\n               10  FILLER              PIC  X(29).\n           05  WS-ITEM2                PIC  X(32)    VALUE SPACE.\n           05  WS-LC-ITEM              PIC  X(32)    VALUE SPACE.\n           05  WS-WORD                 PIC  X(32)    VALUE SPACE.\n           05  WS-UNSTR1               PIC  X(20)    VALUE SPACE.\n           05  WS-UNSTR2               PIC  X(20)    VALUE SPACE.\n           05  WS-PFX                  PIC  X(08)    VALUE SPACE.\n           05  WS-PFX-NEW              PIC  X(08)    VALUE SPACE.\n           05  WS-PROGRAM              PIC  X(08)    VALUE SPACE.\n           05  WS-PREV-ITEM            PIC  X(32)    VALUE SPACE.\n           05  WS-PAR-INCREMENT        PIC  9(04)    VALUE ZERO.\n           05  WS-PAR-INIT-LEN         PIC  9(04)    VALUE ZERO.\n           05  WS-PROGRAM-CNT          PIC  9(04)    VALUE ZERO.\n           05  WS-PAR-WRK              PIC  9(06)    VALUE ZERO.\n           05  WS-HOLD-SUB3            PIC  999      VALUE ZERO.\n           05  WS-P1-MAX               PIC  999      VALUE ZERO.\n           05  WS-R1-MAX               PIC  999      VALUE ZERO.\n           05  WS-W1-MAX               PIC  999      VALUE ZERO.\n           05  WS-IF-CNT               PIC  999      VALUE ZERO.\n           05  WS-IF-LOC               PIC  999      VALUE ZERO.\n           05  WS-COMMENT-POS          PIC  999      VALUE ZERO.\n           05  WS-MAX-LOOK             PIC  999      VALUE ZERO.\n           05  WS-AFTER-TO-LOC         PIC  99       VALUE ZERO.\n           05  WS-ALIGN-TO-LOC         PIC  99       VALUE ZERO.\n           05  WS-BLANK                PIC  99       VALUE ZERO.\n           05  WS-CHECK                PIC  99       VALUE ZERO.\n           05  WS-CONTINUE-POS         PIC  99       VALUE ZERO.\n           05  WS-DIFF                 PIC  99       VALUE ZERO.\n           05  WS-DOC-08-POS           PIC  99       VALUE ZERO.\n           05  WS-END-POS              PIC  99       VALUE ZERO.\n           05  WS-EVAL-POS             PIC  99       VALUE ZERO.\n           05  WS-FND-POS              PIC  99       VALUE ZERO.\n           05  WS-GAP-ADJ              PIC  99       VALUE ZERO.\n           05  WS-HOLD-LEN             PIC  99       VALUE ZERO.\n           05  WS-HOLD-NLEN            PIC  99       VALUE ZERO.\n           05  WS-IF-POS               PIC  99       VALUE ZERO.\n           05  WS-INCR-WRK             PIC  99       VALUE ZERO.\n           05  WS-INDENT               PIC  99       VALUE ZERO.\n           05  WS-INDENT-IF            PIC  99       VALUE ZERO.\n           05  WS-ITEM-LEN             PIC  99       VALUE ZERO.\n           05  WS-ITEM-POS             PIC  99       VALUE ZERO.\n           05  WS-LEN                  PIC  99       VALUE ZERO.\n           05  WS-LEVEL-INCR           PIC  99       VALUE ZERO.\n           05  WS-LEVEL-POS            PIC  99       VALUE ZERO.\n           05  WS-MOVE                 PIC  99       VALUE ZERO.\n           05  WS-MOVE-POS             PIC  99       VALUE ZERO.\n           05  WS-ORIG-INCR            PIC  99       VALUE ZERO.\n           05  WS-ORIG-LOC             PIC  99       VALUE ZERO.\n           05  WS-PAR-LEN              PIC  99       VALUE ZERO.\n           05  WS-PERFORM-POS          PIC  99       VALUE ZERO.\n           05  WS-PFX-LEN              PIC  99       VALUE ZERO.\n           05  WS-PFX-NLEN             PIC  99       VALUE ZERO.\n           05  WS-PIC-LOC              PIC  99       VALUE ZERO.\n           05  WS-POS                  PIC  99       VALUE ZERO.\n           05  WS-PREFIX               PIC  99       VALUE ZERO.\n           05  WS-PREFIX-POS           PIC  99       VALUE ZERO.\n           05  WS-PREV-POS             PIC  99       VALUE ZERO.\n           05  WS-SPACE-LEN            PIC  99       VALUE ZERO.\n           05  WS-SPACE-LOC            PIC  99       VALUE ZERO.\n           05  WS-START-POS            PIC  99       VALUE ZERO.\n           05  WS-VALUE-LOC            PIC  99       VALUE ZERO.\n           05  WS-D-START-RCD          PIC  9(09)    VALUE ZERO.\n           05  WS-D-END-RCD            PIC  9(09)    VALUE ZERO.\n           05  WS-S-START-RCD          PIC  9(09)    VALUE ZERO.\n           05  WS-S-END-RCD            PIC  9(09)    VALUE ZERO.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-COBIN-CNT       PIC S9(09)    VALUE ZERO.\n           05  WS-TRACK-COBIN-CNT      PIC S9(09)    VALUE ZERO.\n           05  WS-ELSE-IF-CNT          PIC S9(09)    VALUE ZERO.\n           05  WS-WRITE-COBOUT-CNT     PIC S9(09)    VALUE ZERO.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(04)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(04)    VALUE ZERO.\n           05  WS-SUB3                 PIC S9(04)    VALUE ZERO.\n           05  WS-STR1                 PIC S9(04)    VALUE ZERO.\n           05  WS-STR2                 PIC S9(04)    VALUE ZERO.\n\n       01  WS-TABLES.\n           05  WS-IF-TABLE             PIC  X(1000)  VALUE SPACE.\n           05  WS-IF-ITEM REDEFINES WS-IF-TABLE\n                                       OCCURS 200 TIMES.\n               10  WS-I1-POS           PIC  XX.\n               10  WS-I1-ELSE          PIC  X.\n               10  WS-I1-ENDIF         PIC  X.\n               10  WS-I1-NOT           PIC  X.\n           05  WS-P1-TABLE             PIC  X(6400)  VALUE SPACE.\n           05  WS-P1-ROW REDEFINES WS-P1-TABLE\n                                       OCCURS 200 TIMES.\n               10  WS-P1-ITEM          PIC  X(32).\n           05  WS-L1-TABLE             PIC  X(200)   VALUE SPACE.\n           05  WS-L1-ROW REDEFINES WS-L1-TABLE\n                                       OCCURS 50 TIMES.\n               10  WS-L1-LVL           PIC  XX.\n               10  WS-L1-NEW-LVL       PIC  XX.\n           05  WS-WORDS-TABLE          PIC  X(3000)  VALUE SPACE.\n           05  WS-WORDS-ITEM REDEFINES WS-WORDS-TABLE\n                                       OCCURS 200 TIMES.\n               10  WS-W1-ITEM          PIC  X(12).\n               10  WS-W1-LEN           PIC  99.\n               10  WS-W1-HANDLE        PIC  X.\n           05  WS-RENUM-TABLE          PIC  X(14500) VALUE SPACE.\n           05  WS-RENUM-ITEM REDEFINES WS-RENUM-TABLE\n                                       OCCURS 500 TIMES.\n               10  WS-R1-PROG          PIC  X(08).\n               10  WS-R1-PFX           PIC  X(08).\n               10  WS-R1-LEN           PIC  99.\n               10  WS-R1-NEW           PIC  X(08).\n               10  WS-R1-NLEN          PIC  99.\n               10  WS-R1-MATCH         PIC  X.\n\n       01  WS-SWITCHES.\n           05  WS-END-COBIN-SW         PIC  X        VALUE 'N'.\n               88  END-OF-COBIN                      VALUE 'Y'.\n               88  MORE-COBIN-RCDS                   VALUE 'N'.\n           05  WS-FLIP-SW              PIC  X        VALUE 'Y'.\n               88  NO-FLIP                           VALUE 'N'.\n           05  WS-ACTUAL-PAR-SW        PIC  X        VALUE SPACE.\n           05  WS-AFTER-DOT            PIC  X        VALUE SPACE.\n           05  WS-AFTER-SW             PIC  X        VALUE SPACE.\n           05  WS-ALIGN-PIC-SW         PIC  X        VALUE SPACE.\n           05  WS-ALIGN-TO-SW          PIC  X        VALUE SPACE.\n           05  WS-ALIGN-VALUE-SW       PIC  X        VALUE SPACE.\n           05  WS-ANOTHER-RCD-SW       PIC  X        VALUE SPACE.\n           05  WS-ANY-ITEMS-SW         PIC  X        VALUE SPACE.\n           05  WS-AT-SW                PIC  X        VALUE SPACE.\n           05  WS-CAP-FIRST            PIC  X        VALUE SPACE.\n           05  WS-COBOL-UPPER-SW       PIC  X        VALUE SPACE.\n           05  WS-COBOL-06             PIC  X        VALUE SPACE.\n           05  WS-COBOL-08             PIC  X        VALUE SPACE.\n           05  WS-COMMENT-CASE         PIC  X        VALUE SPACE.\n           05  WS-COMMENT-06           PIC  X        VALUE SPACE.\n           05  WS-COMMENT-08           PIC  X        VALUE SPACE.\n           05  WS-CONVERT-PIC-SW       PIC  X        VALUE SPACE.\n           05  WS-DOC-08               PIC  X        VALUE SPACE.\n           05  WS-DOT-SW               PIC  X        VALUE SPACE.\n           05  WS-ELSE-IF-SW           PIC  X        VALUE SPACE.\n           05  WS-ENVIRONMENT-SW       PIC  X        VALUE SPACE.\n           05  WS-EVALUATE-SW          PIC  X        VALUE SPACE.\n           05  WS-FIG-CONSTANT-SW      PIC  X        VALUE SPACE.\n           05  WS-FIRST-LINE-SW        PIC  X        VALUE SPACE.\n           05  WS-HOLD-LEVEL           PIC  X        VALUE SPACE.\n           05  WS-ITEMS-MOVED-SW       PIC  X        VALUE SPACE.\n           05  WS-LEVEL-INCR-SW        PIC  X        VALUE SPACE.\n           05  WS-LINE-TYPE            PIC  X        VALUE SPACE.\n           05  WS-NBR-PAR-SW           PIC  X        VALUE SPACE.\n           05  WS-NO-COMMENT-SW        PIC  X        VALUE SPACE.\n           05  WS-NO-LINEUP-SW         PIC  X        VALUE SPACE.\n           05  WS-NO-RENUM-SW          PIC  X        VALUE SPACE.\n           05  WS-OTHER-CHAR-SW        PIC  X        VALUE SPACE.\n           05  WS-OVERLAY-SW           PIC  X        VALUE SPACE.\n           05  WS-PERF-GROUP-SW        PIC  X        VALUE SPACE.\n           05  WS-PERFORM-SW           PIC  X        VALUE SPACE.\n           05  WS-POST-THRU-SW         PIC  X        VALUE SPACE.\n           05  WS-PRE-THRU-SW          PIC  X        VALUE SPACE.\n           05  WS-PROCEDURE-SW         PIC  X        VALUE SPACE.\n           05  WS-QUOTE-SW             PIC  X        VALUE SPACE.\n           05  WS-RENUM-MAX-MET        PIC  X        VALUE SPACE.\n           05  WS-RENUM-SW             PIC  X        VALUE SPACE.\n           05  WS-RESERVED-SW          PIC  X        VALUE SPACE.\n           05  WS-RESET-POS-SW         PIC  X        VALUE SPACE.\n           05  WS-SKIP-RCD-BY-REQ      PIC  X        VALUE SPACE.\n           05  WS-SHOW-SKIP-SW         PIC  X        VALUE SPACE.\n           05  WS-SHOW-RENUM-SW        PIC  X        VALUE SPACE.\n           05  WS-SHOW-LEVEL           PIC  X        VALUE SPACE.\n           05  WS-WHEN-SW              PIC  X        VALUE SPACE.\n           05  WS-WORKING-SW           PIC  X        VALUE SPACE.\n           05  WS-ZAP-EJECT-SW         PIC  X        VALUE SPACE.\n           05  WS-ZAP-LEAD-STAR        PIC  X        VALUE SPACE.\n           05  WS-ZAP-TRAIL-STAR       PIC  X        VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  COBNEAT END  '.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELD.\n           05  LS-LENGTH               PIC S9(04)    COMP.\n           05  LS-DATA                 PIC  X(10).\n           05  FILLER REDEFINES LS-DATA.\n               10  LS-TEST             PIC  X.\n               10  LS-EXTRA            PIC  X(09).\n\n      /\n\n       PROCEDURE DIVISION USING LS-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           MOVE +0000                         TO WS-RETURN-CODE.\n           MOVE 199999                        TO WS-TRACK-COBIN-CNT.\n           PERFORM 0200-OPEN-FILES.\n           DISPLAY '    '.\n           DISPLAY '**** COBNEAT clean-up Cobol programs'.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-COBIN.\n\n           DISPLAY '**** Records in COBIN         '\n                                             WS-READ-COBIN-CNT.\n           IF WS-ELSE-IF-CNT > ZERO\n               DISPLAY '**** ELSE IF rcds added       '\n                                             WS-ELSE-IF-CNT.\n           DISPLAY '**** Records written          '\n                                             WS-WRITE-COBOUT-CNT.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** COBNEAT cond code ' WS-RETURN-CODE\n                       ' set by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** COBNEAT EOJ encountered '.\n           DISPLAY '    '.\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** COBNEAT open error on PARM01'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN OUTPUT COBOUT.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** COBNEAT open error on COBOUT'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       0200-OPEN-COBIN-INPUT.\n           OPEN INPUT  COBIN.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** COBNEAT open error on COBIN'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE COBOUT.\n           CLOSE PARM01.\n           CLOSE COBIN.\n\n      *---------------------------------------\n      *    X\n      *---------------------------------------\n       0400-PROCESS-COBIN.\n\n           PERFORM 0500-GET-LINKAGE.\n\n           PERFORM 2900-SHOW-BLANK-LINE.\n           PERFORM VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > 200\n               MOVE SPACE                     TO WS-W1-ITEM(WS-SUB1)\n               MOVE ZERO                      TO WS-W1-LEN(WS-SUB1)\n               MOVE SPACE                     TO WS-W1-HANDLE(WS-SUB1)\n           END-PERFORM.\n\n           IF WS-RETURN-CODE = ZERO\n               MOVE SPACE                     TO WS-P1-TABLE\n               MOVE ZERO                      TO WS-SUB1\n               MOVE ZERO                      TO WS-SUB2\n               MOVE 'load PARM01'             TO WS-LOGIC-PLACE\n               PERFORM 0500-SET-DEFAULT-VALUES\n               PERFORM 0700-LOAD-PARM01 THRU\n                       0700-LOAD-PARM01-EXIT\n               PERFORM 0500-SET-DEFAULT-POS.\n\n           IF WS-RETURN-CODE = ZERO\n             IF WS-LEVEL-INCR-SW = 'Y'\n                 MOVE 'load INCR table'       TO WS-LOGIC-PLACE\n                 PERFORM 1500-LOAD-INCR-TABLE.\n\n           IF WS-NO-LINEUP-SW = 'Y'\n               OR WS-NO-COMMENT-SW = 'Y'\n               MOVE 'Y'                       TO WS-NO-RENUM-SW.\n           IF WS-SHOW-RENUM-SW = 'Y'\n               DISPLAY '**** Generating renum table by request'\n               DISPLAY '****   and skipping other processing'\n               MOVE 'Y'                       TO WS-RENUM-SW.\n           IF WS-RETURN-CODE = ZERO\n             IF WS-NO-RENUM-SW = SPACE\n               IF WS-RENUM-SW = 'Y'\n                   MOVE ZERO                  TO WS-SUB2\n                   MOVE ZERO                  TO WS-PAR-WRK\n                   MOVE 'build renum table'   TO WS-LOGIC-PLACE\n                   PERFORM 0200-OPEN-COBIN-INPUT\n                   PERFORM 2000-READ-COBIN\n                       UNTIL END-OF-COBIN\n                   MOVE WS-SUB2               TO WS-R1-MAX\n                   CLOSE COBIN.\n\n           IF WS-RETURN-CODE = ZERO\n             IF WS-SHOW-RENUM-SW = SPACE\n                 MOVE 'N'                     TO WS-END-COBIN-SW\n                 MOVE SPACE                   TO WS-PROCEDURE-SW\n                 MOVE ZERO                    TO WS-PROGRAM-CNT\n                 MOVE ZERO                    TO WS-READ-COBIN-CNT\n                 PERFORM 0200-OPEN-COBIN-INPUT\n                 PERFORM 1100-READ-COBIN THRU\n                         1100-READ-COBIN-EXIT\n                         UNTIL END-OF-COBIN.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0500-SHOW-FINAL-STATS.\n\n       0500-SET-DEFAULT-VALUES.\n           MOVE 40                            TO WS-PIC-LOC.\n           MOVE 54                            TO WS-VALUE-LOC.\n           MOVE 5                             TO WS-LEVEL-INCR.\n           MOVE 4                             TO WS-INDENT.\n           MOVE 2                             TO WS-INDENT-IF.\n           MOVE 12                            TO WS-ORIG-LOC.\n           MOVE 47                            TO WS-ALIGN-TO-LOC.\n           MOVE 'Y'                           TO WS-LEVEL-INCR-SW.\n           MOVE 'Y'                           TO WS-ALIGN-TO-SW.\n           MOVE 'Y'                           TO WS-ALIGN-VALUE-SW.\n           MOVE 'Y'                           TO WS-ALIGN-PIC-SW.\n           MOVE 100                           TO WS-PAR-INCREMENT.\n           MOVE 5                             TO WS-PAR-INIT-LEN.\n\n       0500-SET-DEFAULT-POS.\n           MOVE WS-ORIG-LOC                   TO WS-EVAL-POS\n                                                 WS-PERFORM-POS.\n\n       0500-SHOW-FINAL-STATS.\n           IF WS-SHOW-RENUM-SW = 'Y'\n               PERFORM 0500-SHOW-RENUM-TABLE\n           ELSE\n               PERFORM 0500-SHOW-MOST-STUFF\n               PERFORM 0500-SHOW-RENUM-TABLE.\n\n       0500-SHOW-MOST-STUFF.\n           IF WS-INDENT NOT = 4\n               DISPLAY '**** INDENT overridden with     ' WS-INDENT.\n           IF WS-INDENT-IF NOT = 2\n               DISPLAY '**** INDENT IF overridden with  ' WS-INDENT-IF.\n           IF WS-ORIG-LOC NOT = 12\n               DISPLAY '**** ORIG LOC overridden with   ' WS-ORIG-LOC.\n           IF WS-ALIGN-TO-SW = 'N'\n               DISPLAY '**** TO LOC adjustments set off'\n           ELSE\n           IF WS-ALIGN-TO-LOC NOT = 47\n               DISPLAY '**** TO LOC overridden with     '\n                                                   WS-ALIGN-TO-LOC.\n           IF WS-ALIGN-PIC-SW = 'N'\n               DISPLAY '**** PIC LOC adjustments set off'\n           ELSE\n           IF WS-PIC-LOC NOT = 40\n               DISPLAY '**** PIC LOC overridden with    '\n                                                   WS-PIC-LOC.\n           IF WS-ALIGN-VALUE-SW = 'N'\n               DISPLAY '**** VALUE LOC adjustments set off'\n           ELSE\n           IF WS-VALUE-LOC NOT = 54\n               DISPLAY '**** VALUE LOC overridden with  '\n                                                   WS-VALUE-LOC.\n           IF WS-COMMENT-CASE = 'I'\n               DISPLAY '**** Comments will be converted to lower case'\n           ELSE\n           IF WS-COMMENT-CASE = 'L'\n               DISPLAY '**** WS/procedure comments will be converted '\n                       'to lower case'\n           ELSE\n           IF WS-COMMENT-CASE = 'U'\n               DISPLAY '**** Comments will be converted to upper case'.\n\n           IF WS-P1-MAX > ZERO\n               DISPLAY '**** Reserved words            ' WS-P1-MAX\n                       ' of 200'.\n           IF WS-ELSE-IF-SW = 'Y'\n               DISPLAY '**** ELSE IF specified '.\n           IF WS-CONVERT-PIC-SW = 'Y'\n               DISPLAY '**** CONVERT PIC specified '.\n           IF WS-FIG-CONSTANT-SW = 'Y'\n               DISPLAY '**** FIG CONSTANT specified '.\n           IF WS-LEVEL-INCR-SW = 'N'\n               DISPLAY '**** LEVEL INCR adjustments set off'\n           ELSE\n               DISPLAY '**** LEVEL INCR value           '\n                                                    WS-ORIG-INCR.\n           IF WS-D-START-RCD > ZERO\n               DISPLAY '**** Skipped displays before  '\n                                                    WS-D-START-RCD.\n           IF WS-D-END-RCD > ZERO\n               DISPLAY '**** Skipped displays after   '\n                                                    WS-D-END-RCD.\n\n           IF WS-S-START-RCD > ZERO\n               OR WS-S-END-RCD > ZERO\n               PERFORM 0500-SHOW-SKIPPED.\n\n       0500-SHOW-SKIPPED.\n           DISPLAY '                   '.\n           DISPLAY ' !!  SKIPPED altering records as specified'\n                   ' by \"I\" parm entries'.\n           IF WS-S-START-RCD > ZERO\n               DISPLAY ' !!  SKIPPED records before   '\n                                                    WS-S-START-RCD.\n           IF WS-S-END-RCD > ZERO\n               DISPLAY ' !!  SKIPPED records after    '\n                                                    WS-S-END-RCD.\n           DISPLAY '                   '.\n\n       0500-SHOW-RENUM-TABLE.\n           IF WS-R1-MAX > ZERO\n               DISPLAY '**** Paragraph increment      '\n                                                    WS-PAR-INCREMENT\n               DISPLAY '**** Paragraph init length    '\n                                                    WS-PAR-INIT-LEN.\n\n           IF WS-R1-MAX > ZERO\n             IF WS-PROGRAM-CNT > 1\n                 DISPLAY '**** Programs encountered     '\n                                                    WS-PROGRAM-CNT\n             ELSE\n             IF WS-R1-MAX = 1\n                 DISPLAY '**** Paragraph to alter        ' WS-R1-MAX\n                         ' prefix  ' WS-R1-NEW(WS-R1-MAX)\n             ELSE\n                 DISPLAY '**** Paragraphs to alter       ' WS-R1-MAX\n                         '  prefix ' WS-R1-NEW(1) ' through '\n                                     WS-R1-NEW(WS-R1-MAX).\n           IF WS-SHOW-LEVEL = '1' OR '2' OR '3'\n             IF WS-RENUM-SW = 'Y'\n                 DISPLAY '   '\n                 DISPLAY '     Renum paragraph table'\n                 DISPLAY '     --------   -------- --   -------- --'\n                         '   ----'\n                 PERFORM VARYING WS-SUB3 FROM 1 BY 1\n                     UNTIL WS-SUB3 > WS-R1-MAX\n                     DISPLAY '     ' WS-R1-PROG(WS-SUB3)\n                             '   '   WS-R1-PFX(WS-SUB3)\n                             ' '     WS-R1-LEN(WS-SUB3)\n                             '   '   WS-R1-NEW(WS-SUB3)\n                             ' '     WS-R1-NLEN(WS-SUB3)\n                             '   '   WS-SUB3\n                 END-PERFORM\n                 DISPLAY '     --------   -------- --   -------- --'\n                         '   ----'\n                 DISPLAY '   '.\n\n       0500-GET-LINKAGE.\n           IF LS-LENGTH = ZERO\n               DISPLAY '**** Parm length is zero '\n               MOVE +0500                     TO WS-RETURN-CODE\n           ELSE\n           IF LS-LENGTH > LENGTH OF WS-LS-DATA\n               DISPLAY '**** Parm length is excessive '\n               MOVE +0500                     TO WS-RETURN-CODE\n           ELSE\n               MOVE LS-DATA(1: LS-LENGTH)     TO WS-LS-DATA.\n\n           IF WS-LS-TEST = 'T'\n               MOVE 'Y'                       TO WS-SHOW-RENUM-SW\n               MOVE '1'                       TO WS-SHOW-LEVEL\n           ELSE\n               MOVE WS-LS-TEST                TO WS-SHOW-LEVEL.\n           MOVE WS-SHOW-LEVEL                 TO WS-HOLD-LEVEL.\n\n      *---------------------------------------\n      *    load parm fields\n      *---------------------------------------\n       0700-LOAD-PARM01.\n           READ PARM01.\n           IF WS-STAT = 10\n               MOVE WS-SUB1                   TO WS-P1-MAX\n               MOVE WS-SUB2                   TO WS-W1-MAX\n               GO TO 0700-LOAD-PARM01-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** COBNEAT read error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0700                     TO WS-RETURN-CODE\n               GO TO 0700-LOAD-PARM01-EXIT.\n\n           IF PARM01-DOCU = '*'\n               GO TO 0700-LOAD-PARM01.\n\n           IF PARM01-FLAG = 'C'\n               PERFORM 0700-LOAD-FLAGS\n           ELSE\n           IF PARM01-FLAG = 'R'\n               PERFORM 0700-LOAD-RESERVED\n           ELSE\n           IF PARM01-FLAG = 'W'\n               PERFORM 0700-LOAD-WORDS\n           ELSE\n           IF PARM01-FLAG = 'D' OR 'S'\n               PERFORM 0700-LOAD-LIMITS.\n\n           GO TO 0700-LOAD-PARM01.\n\n       0700-LOAD-PARM01-EXIT. EXIT.\n\n       0700-LOAD-FLAGS.\n           MOVE FUNCTION UPPER-CASE(PARM01-ITEM) TO WS-ITEM.\n           IF WS-ITEM = 'INDENT'\n             IF PARM01-LEN NUMERIC\n                 MOVE PARM01-LEN              TO WS-INDENT\n                 IF WS-INDENT = ZERO\n                     MOVE 4                   TO WS-INDENT\n                 ELSE\n                 IF WS-INDENT > 6\n                     MOVE 6                   TO WS-INDENT\n                 ELSE\n                     CONTINUE\n             ELSE\n             IF PARM01-LEN = SPACE\n                 MOVE 4                       TO WS-INDENT\n             ELSE\n                 DISPLAY '**** COBNEAT PARM01 indent not numeric'\n                 MOVE +0700                   TO WS-RETURN-CODE.\n           IF WS-ITEM = 'INDENT IF'\n             IF PARM01-LEN NUMERIC\n                 MOVE PARM01-LEN              TO WS-INDENT-IF\n                 IF WS-INDENT-IF = ZERO\n                     MOVE 2                   TO WS-INDENT-IF\n                 ELSE\n                 IF WS-INDENT-IF > 6\n                     MOVE 6                   TO WS-INDENT-IF\n                 ELSE\n                     CONTINUE\n             ELSE\n             IF PARM01-LEN = SPACE\n                 MOVE 2                       TO WS-INDENT-IF\n             ELSE\n                 DISPLAY '**** COBNEAT PARM01 indent if not numeric'\n                 MOVE +0700                   TO WS-RETURN-CODE.\n           IF WS-ITEM = 'ORIG LOC'\n             IF PARM01-LEN NUMERIC\n                 MOVE PARM01-LEN              TO WS-ORIG-LOC\n                 IF WS-ORIG-LOC = ZERO\n                     MOVE 12                  TO WS-ORIG-LOC\n                 ELSE\n                 IF WS-ORIG-LOC < 8\n                     MOVE 8                   TO WS-ORIG-LOC\n                 ELSE\n                 IF WS-ORIG-LOC > 16\n                     MOVE 16                  TO WS-ORIG-LOC\n                 ELSE\n                     CONTINUE\n             ELSE\n             IF PARM01-LEN = SPACE\n                 MOVE 12                      TO WS-ORIG-LOC\n             ELSE\n                 DISPLAY '**** COBNEAT PARM01 original pos not numeric'\n                 MOVE +0700                   TO WS-RETURN-CODE.\n           IF WS-ITEM = 'TO LOC'\n             IF PARM01-LEN NUMERIC\n                 MOVE PARM01-LEN              TO WS-ALIGN-TO-LOC\n                 IF WS-ALIGN-TO-LOC = ZERO\n                     MOVE 47                  TO WS-ALIGN-TO-LOC\n                     MOVE 'N'                 TO WS-ALIGN-TO-SW\n                 ELSE\n                 IF WS-ALIGN-TO-LOC < 35\n                     MOVE 35                  TO WS-ALIGN-TO-LOC\n                 ELSE\n                 IF WS-ALIGN-TO-LOC > 55\n                     MOVE 55                  TO WS-ALIGN-TO-LOC\n                 ELSE\n                     CONTINUE\n             ELSE\n             IF PARM01-LEN = SPACE\n                 MOVE 47                      TO WS-ALIGN-TO-LOC\n             ELSE\n                 DISPLAY '**** COBNEAT PARM01 to location not numeric'\n                 MOVE +0700                   TO WS-RETURN-CODE.\n           IF WS-ITEM = 'LEVEL INCR'\n             IF PARM01-LEN NUMERIC\n                 MOVE PARM01-LEN              TO WS-LEVEL-INCR\n                 IF WS-LEVEL-INCR = ZERO\n                     MOVE 5                   TO WS-LEVEL-INCR\n                     MOVE 'N'                 TO WS-LEVEL-INCR-SW\n                 ELSE\n                 IF WS-LEVEL-INCR > 10\n                     MOVE 10                  TO WS-LEVEL-INCR\n                 ELSE\n                     CONTINUE\n             ELSE\n             IF PARM01-LEN = SPACE\n                 MOVE 5                       TO WS-LEVEL-INCR\n             ELSE\n                 DISPLAY '**** COBNEAT PARM01 level incr not numeric'\n                 MOVE +0700                   TO WS-RETURN-CODE.\n           MOVE WS-LEVEL-INCR                 TO WS-ORIG-INCR.\n           IF WS-ITEM = 'PIC LOC'\n             IF PARM01-LEN NUMERIC\n                 MOVE PARM01-LEN              TO WS-PIC-LOC\n                 IF WS-PIC-LOC = ZERO\n                     MOVE 40                  TO WS-PIC-LOC\n                     MOVE 'N'                 TO WS-ALIGN-PIC-SW\n                 ELSE\n                 IF WS-PIC-LOC < 34\n                     MOVE 34                  TO WS-PIC-LOC\n                 ELSE\n                 IF WS-PIC-LOC > 50\n                     MOVE 50                  TO WS-PIC-LOC\n                 ELSE\n                     CONTINUE\n             ELSE\n             IF PARM01-LEN = SPACE\n                 MOVE 40                      TO WS-PIC-LOC\n             ELSE\n                 DISPLAY '**** COBNEAT PARM01 pic loc not numeric'\n                 MOVE +0700                   TO WS-RETURN-CODE.\n           IF WS-ITEM = 'VALUE LOC'\n             IF PARM01-LEN NUMERIC\n                 MOVE PARM01-LEN              TO WS-VALUE-LOC\n                 IF WS-VALUE-LOC = ZERO\n                     MOVE 54                  TO WS-VALUE-LOC\n                     MOVE 'N'                 TO WS-ALIGN-VALUE-SW\n                 ELSE\n                 IF WS-VALUE-LOC < 42\n                     MOVE 42                  TO WS-VALUE-LOC\n                 ELSE\n                 IF WS-VALUE-LOC > 60\n                     MOVE 60                  TO WS-VALUE-LOC\n                 ELSE\n                     CONTINUE\n             ELSE\n             IF PARM01-LEN = SPACE\n                 MOVE 54                      TO WS-VALUE-LOC\n             ELSE\n                 DISPLAY '**** COBNEAT PARM01 value loc not numeric'\n                 MOVE +0700                   TO WS-RETURN-CODE.\n           IF WS-ITEM = 'ELSE IF'\n               MOVE 'Y'                       TO WS-ELSE-IF-SW.\n           IF WS-ITEM = 'CONVERT PIC'\n               MOVE 'Y'                       TO WS-CONVERT-PIC-SW.\n           IF WS-ITEM = 'FIG CONSTANT'\n               MOVE 'Y'                       TO WS-FIG-CONSTANT-SW.\n\n           IF WS-ITEM = 'NO RENUM'\n             IF WS-SHOW-RENUM-SW = SPACE\n                 DISPLAY ' Parm option \"no renum\" specified'\n                 MOVE 'Y'                     TO WS-NO-RENUM-SW.\n           IF WS-ITEM = 'NO LINEUP'\n               DISPLAY ' Parm option \"no lineup\" specified'\n               MOVE 'Y'                       TO WS-NO-LINEUP-SW.\n           IF WS-ITEM = 'NO COMMENT'\n               DISPLAY ' Parm option \"no comment\" specified'\n               MOVE 'Y'                       TO WS-NO-COMMENT-SW.\n           IF WS-ITEM = 'AFTER DOT'\n               MOVE 'Y'                       TO WS-AFTER-DOT.\n           IF WS-ITEM = 'CAP FIRST'\n               MOVE FUNCTION UPPER-CASE(PARM01-OPTION) TO WS-CAP-FIRST.\n           IF WS-ITEM = 'CASE'\n               MOVE FUNCTION UPPER-CASE(PARM01-OPTION)\n                                              TO WS-COMMENT-CASE.\n           IF WS-ITEM = 'LINE TYPE'\n               MOVE FUNCTION UPPER-CASE(PARM01-OPTION)\n                                              TO WS-LINE-TYPE.\n           IF WS-ITEM = 'MOVE COMMENT'\n               MOVE PARM01-OPTION             TO WS-HOLD-32\n               PERFORM 2800-SHIFT-LEFT\n               IF WS-HOLD-04 NUMERIC\n                   MOVE WS-HOLD-04            TO WS-COMMENT-POS\n                   IF WS-COMMENT-POS = ZERO\n                       MOVE 0012              TO WS-COMMENT-POS\n                   ELSE\n                   IF WS-COMMENT-POS < 8\n                       MOVE 0008              TO WS-COMMENT-POS\n                   ELSE\n                   IF WS-COMMENT-POS > 20\n                       MOVE 0020              TO WS-COMMENT-POS\n                   ELSE\n                       CONTINUE\n               ELSE\n                   MOVE 0012                  TO WS-COMMENT-POS.\n           IF WS-ITEM = 'ZAP STAR E'\n               MOVE 'Y'                       TO WS-ZAP-TRAIL-STAR.\n           IF WS-ITEM = 'ZAP STAR L'\n               MOVE 'Y'                       TO WS-ZAP-LEAD-STAR.\n           IF WS-ITEM = 'ZAP LAST C'\n               MOVE 'Y'                       TO WS-COMMENT-08.\n           IF WS-ITEM(1: 9)  = 'DOC LAST '\n               MOVE FUNCTION LOWER-CASE(WS-ITEM(10: 1))\n                                              TO WS-DOC-08\n               IF WS-DOC-08 NOT = 'b'\n                 IF WS-ITEM(12: 2) NUMERIC\n                     MOVE WS-ITEM(12: 2)      TO WS-DOC-08-POS\n                     IF WS-DOC-08-POS < 73\n                         MOVE 73              TO WS-DOC-08-POS\n                     ELSE\n                     IF WS-DOC-08-POS > 80\n                         MOVE 80              TO WS-DOC-08-POS\n                     ELSE\n                         CONTINUE\n                 ELSE\n                     MOVE 80                  TO WS-DOC-08-POS.\n           IF WS-ITEM = 'ZAP LAST B'\n               MOVE 'Y'                       TO WS-COBOL-08.\n           IF WS-ITEM = 'ZAP FIRST B'\n               MOVE 'Y'                       TO WS-COBOL-06.\n           IF WS-ITEM = 'ZAP FIRST C'\n               MOVE 'Y'                       TO WS-COMMENT-06.\n           IF WS-ITEM = 'ZAP EJECT'\n               MOVE 'Y'                       TO WS-ZAP-EJECT-SW.\n           IF WS-ITEM = 'COBOL UPPER'\n               MOVE 'Y'                       TO WS-COBOL-UPPER-SW.\n           IF WS-ITEM = 'RENUM PAR'\n               MOVE 'Y'                       TO WS-RENUM-SW.\n           IF WS-ITEM = 'RENUM PINCR'\n               MOVE PARM01-OPTION             TO WS-HOLD-32\n               PERFORM 2800-SHIFT-LEFT\n               IF WS-HOLD-04 NUMERIC\n                   MOVE WS-HOLD-04            TO WS-PAR-INCREMENT\n                   IF WS-PAR-INCREMENT = ZERO\n                       MOVE 0100              TO WS-PAR-INCREMENT\n                   ELSE\n                   IF WS-PAR-INCREMENT > 1000\n                       MOVE 1000              TO WS-PAR-INCREMENT\n                   ELSE\n                       CONTINUE\n               ELSE\n                   DISPLAY '**** COBNEAT renum pincr not numeric'\n                   MOVE +0700                 TO WS-RETURN-CODE.\n           IF WS-ITEM = 'RENUM INIT'\n               MOVE PARM01-OPTION             TO WS-HOLD-32\n               PERFORM 2800-SHIFT-LEFT\n               IF WS-HOLD-04 NUMERIC\n                   MOVE WS-HOLD-04            TO WS-PAR-INIT-LEN\n                   IF WS-PAR-INIT-LEN < 2\n                       MOVE 2                 TO WS-PAR-INIT-LEN\n                   ELSE\n                   IF WS-PAR-INIT-LEN > 5\n                       MOVE 5                 TO WS-PAR-INIT-LEN\n                   ELSE\n                       CONTINUE\n               ELSE\n                   DISPLAY '**** COBNEAT renum init not numeric'\n                   MOVE +0700                 TO WS-RETURN-CODE.\n\n       0700-LOAD-RESERVED.\n           IF WS-SUB1 < 200\n               ADD 1                          TO WS-SUB1\n               PERFORM 0700-PARM-RESERVED.\n\n       0700-PARM-RESERVED.\n           MOVE FUNCTION UPPER-CASE(PARM01-ITEM) TO WS-ITEM.\n           MOVE WS-ITEM                       TO WS-P1-ITEM(WS-SUB1).\n\n       0700-LOAD-WORDS.\n           IF WS-SUB2 < 200\n               ADD 1                          TO WS-SUB2\n               PERFORM 0700-PARM-WORDS.\n\n       0700-PARM-WORDS.\n           MOVE PARM01-ITEM                   TO WS-W1-ITEM(WS-SUB2).\n           IF PARM01-LEN NUMERIC\n               MOVE PARM01-LEN                TO WS-W1-LEN(WS-SUB2)\n               IF WS-W1-LEN(WS-SUB2) = ZERO\n                   DISPLAY '**** COBNEAT PARM01 word len = zero'\n                   MOVE +0700                 TO WS-RETURN-CODE\n               ELSE\n               IF WS-W1-LEN(WS-SUB2) > 20\n                   DISPLAY '**** COBNEAT PARM01 word len > 20'\n                   MOVE +0700                 TO WS-RETURN-CODE\n               ELSE\n                   CONTINUE\n           ELSE\n               DISPLAY '**** COBNEAT word len not numeric'\n               MOVE +0700                     TO WS-RETURN-CODE.\n           IF PARM01-OPTION = 'F' OR 'W' OR 'f' OR 'w'\n               MOVE FUNCTION UPPER-CASE(PARM01-OPTION)\n                                              TO WS-W1-HANDLE(WS-SUB2)\n           ELSE\n               DISPLAY '**** COBNEAT word option not F/W'\n               MOVE +0700                     TO WS-RETURN-CODE.\n\n       0700-LOAD-LIMITS.\n           MOVE FUNCTION UPPER-CASE(PARM01-ITEM) TO WS-ITEM.\n           IF PARM01-FLAG = 'D'\n             IF WS-ITEM(1: 5) = 'START'\n               IF WS-ITEM(7: 9) NUMERIC\n                   MOVE WS-ITEM(7: 9)         TO WS-D-START-RCD.\n           IF PARM01-FLAG = 'D'\n             IF WS-ITEM(1: 3) = 'END'\n               IF WS-ITEM(7: 9) NUMERIC\n                   MOVE WS-ITEM(7: 9)         TO WS-D-END-RCD.\n           IF PARM01-FLAG = 'S'\n             IF WS-ITEM(1: 5) = 'START'\n               IF WS-ITEM(7: 9) NUMERIC\n                   MOVE WS-ITEM(7: 9)         TO WS-S-START-RCD.\n           IF PARM01-FLAG = 'S'\n             IF WS-ITEM(1: 3) = 'END'\n               IF WS-ITEM(7: 9) NUMERIC\n                   MOVE WS-ITEM(7: 9)         TO WS-S-END-RCD.\n\n      *---------------------------------------\n\n       1100-READ-COBIN.\n           READ COBIN.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-COBIN-CNT\n               PERFORM 1200-SELECT THRU\n                       1200-SELECT-EXIT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-COBIN-SW\n           ELSE\n               DISPLAY '**** COBNEAT read error on COBIN '\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +1100                     TO WS-RETURN-CODE.\n\n       1100-READ-COBIN-EXIT. EXIT.\n\n      *---------------------------------------\n      *    x\n      *---------------------------------------\n       1200-SELECT.\n           IF WS-READ-COBIN-CNT > WS-TRACK-COBIN-CNT\n               DISPLAY ' Records read ...        ' WS-READ-COBIN-CNT\n               ADD 200000                     TO WS-TRACK-COBIN-CNT.\n\n           MOVE COBIN-RCD                     TO WS-HOLD-RCD.\n           MOVE COBIN-RCD                     TO WS-HOLD-RCD2.\n\n           PERFORM 1200-DETERMINE-SKIP-BY-REQ.\n           PERFORM 1200-SETUP-DEBUG-SWITCH.\n\n           IF WS-HOLD-RCD(1: 14) = './  ADD  NAME='\n               DISPLAY '**** New program break   '\n                                        WS-HOLD-RCD(15: 8)\n               MOVE WS-HOLD-RCD               TO COBOUT-RCD\n               PERFORM 3000-WRITE-COBOUT\n           ELSE\n           IF WS-HOLD-RCD(7: 1) = '*'\n             IF WS-NO-COMMENT-SW = SPACE\n                 MOVE 'comments'              TO WS-LOGIC-PLACE\n                 PERFORM 1500-CONVERT-COMMENTS THRU\n                         1500-CONVERT-EXIT\n             ELSE\n                 MOVE WS-HOLD-RCD             TO COBOUT-RCD\n                 PERFORM 3000-WRITE-COBOUT\n           ELSE\n           IF WS-NO-LINEUP-SW = SPACE\n               MOVE SPACE                     TO WS-FIRST-LINE-SW\n               MOVE SPACE                     TO WS-DOT-SW\n               MOVE SPACE                     TO WS-ANY-ITEMS-SW\n               MOVE 'main adjustments'        TO WS-LOGIC-PLACE\n               PERFORM 1200-ADJUST-COBOL-STUFF THRU\n                       1200-ADJUST-COBOL-STUFF-EXIT\n           ELSE\n               MOVE WS-HOLD-RCD               TO COBOUT-RCD\n               PERFORM 3000-WRITE-COBOUT.\n\n       1200-SELECT-EXIT. EXIT.\n\n      *---------------------------------------\n      *    setup debug display range\n      *----+----------------------------------\n       1200-SETUP-DEBUG-SWITCH.\n           MOVE SPACE                         TO WS-SHOW-SKIP-SW.\n           IF WS-D-START-RCD > ZERO\n             IF WS-D-END-RCD > ZERO\n               IF WS-READ-COBIN-CNT < WS-D-START-RCD\n                   OR WS-READ-COBIN-CNT > WS-D-END-RCD\n                   MOVE 'Y'                   TO WS-SHOW-SKIP-SW\n               ELSE\n                   CONTINUE\n             ELSE\n             IF WS-READ-COBIN-CNT < WS-D-START-RCD\n                 MOVE 'Y'                     TO WS-SHOW-SKIP-SW\n             ELSE\n                 CONTINUE\n           ELSE\n           IF WS-D-END-RCD > ZERO\n             IF WS-READ-COBIN-CNT > WS-D-END-RCD\n                 MOVE 'Y'                     TO WS-SHOW-SKIP-SW.\n\n           IF WS-SHOW-SKIP-SW = 'Y'\n               MOVE SPACE                     TO WS-SHOW-LEVEL\n           ELSE\n               MOVE WS-HOLD-LEVEL             TO WS-SHOW-LEVEL.\n\n      *---------------------------------------\n      *    skip records if requested in PARM01\n      *    skip if records outside specified range\n      *---------------------------------------\n       1200-DETERMINE-SKIP-BY-REQ.\n           MOVE SPACE                         TO WS-SKIP-RCD-BY-REQ.\n           IF WS-S-START-RCD > ZERO\n             IF WS-S-END-RCD > ZERO\n               IF WS-READ-COBIN-CNT < WS-S-START-RCD\n                   OR WS-READ-COBIN-CNT > WS-S-END-RCD\n                   MOVE 'Y'                   TO WS-SKIP-RCD-BY-REQ\n               ELSE\n                   CONTINUE\n             ELSE\n             IF WS-READ-COBIN-CNT < WS-S-START-RCD\n                 MOVE 'Y'                     TO WS-SKIP-RCD-BY-REQ\n             ELSE\n                 CONTINUE\n           ELSE\n           IF WS-S-END-RCD > ZERO\n             IF WS-READ-COBIN-CNT > WS-S-END-RCD\n                 MOVE 'Y'                     TO WS-SKIP-RCD-BY-REQ.\n\n      *---------------------------------------\n      *    line-up Cobol statements\n      *\n      *    WS-IF-POS is where you will place the next IF statement\n      *    WS-POS is where you will place the current statement\n      *----+----------------------------------\n       1200-ADJUST-COBOL-STUFF.\n           PERFORM 1300-FIND-LEAD-WORD.\n           IF WS-FND-POS = ZERO\n               GO TO 1200-FINAL-ADJUST.\n\n           IF WS-ITEM = 'ID' OR 'IDENTIFICATION'\n               MOVE SPACE                     TO WS-ENVIRONMENT-SW\n               MOVE SPACE                     TO WS-WORKING-SW\n               MOVE SPACE                     TO WS-PROCEDURE-SW.\n           IF WS-ITEM = 'PROGRAM-ID'\n               MOVE WS-ITEM2                  TO WS-PROGRAM\n               ADD 1                          TO WS-PROGRAM-CNT.\n\n           MOVE WS-FND-POS                    TO WS-ITEM-POS.\n           IF WS-ITEM = 'ENVIRONMENT'\n               MOVE 'Y'                       TO WS-ENVIRONMENT-SW.\n           IF WS-ITEM = 'WORKING-STORAGE'\n               MOVE 'Y'                       TO WS-WORKING-SW.\n           IF WS-ITEM = 'PROCEDURE'\n               MOVE 'Y'                       TO WS-PROCEDURE-SW.\n           IF WS-PROCEDURE-SW NOT = 'Y'\n             IF WS-WORKING-SW = 'Y'\n                 PERFORM 1500-WORKING-STORAGE THRU\n                         1500-WORKING-STORAGE-EXIT\n                 GO TO 1200-FINAL-ADJUST\n             ELSE\n             IF WS-ENVIRONMENT-SW = 'Y'\n                 PERFORM 1500-WORKING-STORAGE THRU\n                         1500-WORKING-STORAGE-EXIT.\n\n      *    determine if a cobol reserved word\n           MOVE SPACE                         TO WS-RESERVED-SW.\n           PERFORM VARYING WS-SUB3 FROM 1 BY 1\n               UNTIL WS-SUB3 > WS-P1-MAX\n               IF WS-ITEM = WS-P1-ITEM(WS-SUB3)\n                   MOVE 'Y'                   TO WS-RESERVED-SW\n                   MOVE WS-P1-MAX             TO WS-SUB3\n               END-IF\n           END-PERFORM.\n           IF WS-RESERVED-SW = 'Y'\n               MOVE ZERO                      TO WS-AFTER-TO-LOC\n               MOVE ZERO                      TO WS-CONTINUE-POS.\n           IF WS-AFTER-TO-LOC = ZERO\n               AND WS-CONTINUE-POS = ZERO\n               IF WS-RESERVED-SW = SPACE\n                   GO TO 1200-FINAL-ADJUST.\n\n      *    skip processing paragraph names etc as cobol logic\n           IF WS-ITEM-POS < 12\n             IF WS-PROCEDURE-SW = 'Y'\n                 GO TO 1200-FINAL-ADJUST.\n\n      *    skip records if requested in PARM01\n           IF WS-SKIP-RCD-BY-REQ = 'Y'\n               GO TO 1200-FINAL-ADJUST.\n\n      *    start main logic\n\n           MOVE SPACE                         TO WS-AFTER-SW.\n           IF WS-ITEM = 'PERFORM'\n               MOVE 'Y'                       TO WS-PERFORM-SW\n               PERFORM 1300-INSPECT-PERFORM\n           ELSE\n           IF WS-PERFORM-SW = 'Y'\n               PERFORM 1300-WORDS-AFTER-PERFORM\n               MOVE SPACE                     TO WS-PERF-GROUP-SW.\n\n           IF WS-ITEM = 'IF'\n               OR (WS-ITEM = 'NOT'\n               AND WS-ITEM2 = 'FOUND')\n               ADD 1                          TO WS-IF-CNT\n               MOVE WS-IF-CNT                 TO WS-IF-LOC\n               MOVE WS-IF-POS                 TO WS-I1-POS(WS-IF-CNT)\n               MOVE WS-IF-POS                 TO WS-POS\n               MOVE SPACE                     TO WS-WHEN-SW\n               ADD WS-INDENT-IF               TO WS-IF-POS\n               IF WS-ITEM = 'NOT'\n                   MOVE 'Y'                   TO WS-I1-NOT(WS-IF-CNT)\n               ELSE\n                   CONTINUE\n           ELSE\n           IF WS-PERF-GROUP-SW = 'Y'\n               OR WS-ITEM = 'SORT'\n               ADD 1                          TO WS-IF-CNT\n               MOVE WS-IF-CNT                 TO WS-IF-LOC\n               MOVE WS-IF-POS                 TO WS-I1-POS(WS-IF-CNT)\n               MOVE WS-IF-POS                 TO WS-POS\n               MOVE SPACE                     TO WS-WHEN-SW\n               ADD WS-INDENT-IF               TO WS-IF-POS\n               IF WS-PREV-ITEM = 'IF'\n                   ADD WS-INDENT-IF           TO WS-POS\n                   MOVE WS-POS                TO WS-I1-POS(WS-IF-CNT)\n               ELSE\n                   CONTINUE\n           ELSE\n           IF WS-ITEM = 'ELSE'\n               PERFORM 1300-FIND-PREV-ELSE-IF\n                   VARYING WS-SUB3 FROM 200 BY -1\n                   UNTIL WS-SUB3 < 1\n               MOVE WS-IF-POS                 TO WS-POS\n               PERFORM 1300-FIND-ELSE-IF\n           ELSE\n           IF WS-ITEM = 'END-IF' OR 'END-PERFORM'\n               PERFORM 1300-FIND-PREV-ENDIF-IF\n                   VARYING WS-SUB3 FROM 200 BY -1\n                   UNTIL WS-SUB3 < 1\n               MOVE WS-IF-POS                 TO WS-POS\n           ELSE\n           IF WS-WHEN-SW = 'Y'\n               MOVE WS-IF-POS                 TO WS-POS\n           ELSE\n           IF WS-IF-CNT > ZERO\n               MOVE WS-I1-POS(WS-IF-LOC)      TO WS-POS\n               ADD WS-INDENT                  TO WS-POS\n               MOVE WS-POS                    TO WS-IF-POS\n           ELSE\n               MOVE WS-IF-POS                 TO WS-POS.\n\n           IF WS-ITEM = 'AT'\n               MOVE 'Y'                       TO WS-AT-SW\n               MOVE WS-POS                    TO WS-EVAL-POS.\n           IF WS-ITEM = 'WHEN'\n               MOVE WS-EVAL-POS               TO WS-POS WS-IF-POS\n               ADD WS-INDENT                  TO WS-IF-POS\n               IF WS-AT-SW = SPACE\n                   MOVE 'Y'                   TO WS-WHEN-SW.\n           IF WS-ITEM = 'END-EVALUATE'\n               MOVE SPACE                     TO WS-EVALUATE-SW\n               MOVE SPACE                     TO WS-WHEN-SW\n               MOVE WS-EVAL-POS               TO WS-POS WS-IF-POS.\n\n           IF WS-AFTER-TO-LOC > ZERO\n               MOVE WS-AFTER-TO-LOC           TO WS-POS\n           ELSE\n           IF WS-CONTINUE-POS > ZERO\n               ADD WS-CONTINUE-POS            TO WS-POS\n           ELSE\n           IF WS-ITEM = 'REMAINDER' OR 'GIVING'\n               ADD WS-INDENT                  TO WS-POS\n           ELSE\n           IF WS-POST-THRU-SW = 'Y'\n               ADD 8                          TO WS-POS\n           ELSE\n           IF WS-EVALUATE-SW = 'Y'\n               OR WS-AT-SW = 'Y'\n               ADD WS-INDENT                  TO WS-POS\n           ELSE\n           IF WS-AFTER-SW = 'Y'\n             IF WS-POS = WS-PERFORM-POS\n                 ADD WS-INDENT                TO WS-POS.\n\n      *    WS-CONTINUE-POS is used to help place non-reserved-word\n      *    items such as additional display '  x  '  fields or\n      *    lone paragraph names or mathematical statements\n           IF WS-ITEM = 'EVALUATE'\n               MOVE 'Y'                       TO WS-EVALUATE-SW\n               MOVE WS-POS                    TO WS-EVAL-POS.\n           IF WS-ITEM = 'SORT'\n               MOVE 27                        TO WS-CONTINUE-POS.\n           IF WS-ITEM = 'ON'\n               MOVE 18                        TO WS-CONTINUE-POS.\n           IF WS-ITEM = 'OPEN'\n               MOVE 5                         TO WS-CONTINUE-POS.\n           IF WS-ITEM = 'CLOSE'\n               MOVE 6                         TO WS-CONTINUE-POS.\n           IF WS-ITEM = 'STRING'\n               MOVE 7                         TO WS-CONTINUE-POS.\n           IF WS-ITEM = 'UNSTRING'\n               MOVE 9                         TO WS-CONTINUE-POS.\n           IF WS-ITEM = 'DISPLAY' OR 'COMPUTE'\n               MOVE 8                         TO WS-CONTINUE-POS.\n           IF WS-ITEM = 'PERFORM'\n               MOVE 8                         TO WS-CONTINUE-POS\n               MOVE WS-POS                    TO WS-PERFORM-POS\n               PERFORM 1300-INSPECT-THRU.\n\n      *    set items at specific locations\n           IF WS-ALIGN-PIC-SW = 'Y'\n             IF WS-ITEM = 'ASSIGN' OR 'ORGANIZATION' OR 'ACCESS'\n                 MOVE WS-PIC-LOC              TO WS-POS.\n           IF WS-ALIGN-PIC-SW = 'Y'\n             IF WS-ITEM = 'FILE'\n               IF WS-ITEM2 = 'STATUS'\n                   MOVE WS-PIC-LOC            TO WS-POS.\n           IF WS-ALIGN-PIC-SW = 'Y'\n             IF WS-ITEM = 'RECORD'\n               IF WS-ITEM2 = 'KEY'\n                   MOVE WS-PIC-LOC            TO WS-POS.\n\n           IF WS-ITEM = 'FILE'\n             IF WS-ITEM2 = 'SECTION'\n                 MOVE 8                       TO WS-POS.\n           IF WS-ITEM = 'DATA'\n             IF WS-ITEM2 = 'DIVISION'\n                 MOVE 8                       TO WS-POS.\n           IF WS-ITEM = 'AUTHOR'              OR 'CBL'\n                     OR 'CONFIGURATION'       OR 'DATE-WRITTEN'\n                     OR 'ENVIRONMENT'         OR 'FD'\n                     OR 'FILE-CONTROL'        OR 'ID'\n                     OR 'IDENTIFICATION'      OR 'INPUT-OUTPUT'\n                     OR 'INSTALLATION'        OR 'LINKAGE'\n                     OR 'PROGRAM-ID'          OR 'RD'\n                     OR 'REMARKS'             OR 'REPORT'\n                     OR 'SD'                  OR 'SOURCE-COMPUTER'\n                     OR 'TITLE'\n                 MOVE 8                       TO WS-POS.\n\n           IF WS-SHOW-LEVEL = '3'\n               PERFORM 1200-SHOW-WORK-FIELDS.\n\n      *    move stuff\n           IF WS-FND-POS NOT = WS-POS\n               MOVE WS-ITEM-LEN               TO WS-LEN\n               PERFORM 2600-APPLY-DIFF-POS.\n\n      *---------------------------------------\n      *    align ' TO '\n      *----+----------------------------------\n           IF WS-ALIGN-TO-SW = 'Y'\n             IF WS-ITEM = 'SELECT'\n                 PERFORM 1400-ALIGN-ASSIGN.\n           IF WS-ALIGN-TO-SW = 'Y'\n             IF WS-ITEM NOT = 'GO'\n                 PERFORM 1400-ALIGN-TO\n                 IF WS-FND-POS > ZERO\n                   IF WS-FND-POS NOT = WS-POS\n                       MOVE 'align TO '       TO WS-LOGIC-PLACE\n                       PERFORM 2600-APPLY-DIFF-POS\n                       IF WS-ITEMS-MOVED-SW = 'E'\n                           SUBTRACT 3 FROM WS-POS\n                           PERFORM 2600-APPLY-DIFF-POS\n                           IF WS-ITEMS-MOVED-SW = 'E'\n                               SUBTRACT 3 FROM WS-POS\n                               PERFORM 2600-APPLY-DIFF-POS\n                               IF WS-ITEMS-MOVED-SW = 'E'\n                                   ADD 9          TO WS-POS\n                                   PERFORM 2600-APPLY-DIFF-POS.\n           IF WS-ALIGN-TO-SW = 'Y'\n               PERFORM 1400-ADJUST-AFTER-TO.\n\n      *---------------------------------------\n      *    replace SPACES with SPACE   ZEROS ZEROES with ZERO\n      *---------------------------------------\n           IF WS-FIG-CONSTANT-SW = 'Y'\n               MOVE SPACE                     TO WS-QUOTE-SW\n               PERFORM 1500-REPLACE-FIG-CONSTANTS\n                   VARYING WS-SUB3 FROM 8 BY 1\n                   UNTIL WS-SUB3 > 70.\n\n       1200-FINAL-ADJUST.\n           IF WS-SKIP-RCD-BY-REQ = 'Y'\n               GO TO 1200-SEND-AFTER-ADJUST.\n\n           IF WS-ZAP-EJECT-SW = 'Y'\n             IF WS-ITEM = 'EJECT' OR 'SKIP ' OR 'SKIP1'\n                       OR 'SKIP2' OR 'SKIP3'\n               MOVE SPACE           TO WS-HOLD-RCD(WS-ITEM-POS: 5).\n\n           IF WS-RENUM-SW = 'Y'\n             IF WS-NO-RENUM-SW = SPACE\n                 PERFORM 1500-REPLACE-PARAGRAPH-PREFIX.\n\n      *    zap positions 73 - 80\n           PERFORM 1200-HANDLE-LAST-EIGHT-BYTES.\n\n      *    zap positions 1 - 6\n           IF WS-COBOL-06 = 'Y'\n               MOVE SPACE                     TO WS-HOLD-RCD(1: 6).\n\n       1200-SEND-AFTER-ADJUST.\n           MOVE WS-POS                        TO WS-PREV-POS.\n           MOVE WS-ITEM                       TO WS-PREV-ITEM.\n           MOVE WS-HOLD-RCD                   TO COBOUT-RCD.\n           PERFORM 3000-WRITE-COBOUT.\n\n           IF WS-ANOTHER-RCD-SW = 'Y'\n               MOVE WS-HOLD-RCD3              TO WS-HOLD-RCD\n               MOVE SPACE                     TO WS-ANOTHER-RCD-SW\n               ADD 1                          TO WS-ELSE-IF-CNT\n               GO TO 1200-ADJUST-COBOL-STUFF.\n\n           MOVE SPACE                         TO WS-QUOTE-SW.\n           MOVE SPACE                         TO WS-RESET-POS-SW.\n           PERFORM 1200-FIND-LINE-END-DOT\n               VARYING WS-SUB1 FROM 72 BY -1\n               UNTIL WS-SUB1 < 13.\n           IF WS-RESET-POS-SW = 'Y'\n               MOVE WS-ORIG-LOC               TO WS-IF-POS\n               MOVE ZERO                      TO WS-IF-CNT WS-IF-LOC\n               MOVE SPACE                     TO WS-IF-TABLE\n               MOVE SPACE                     TO WS-EVALUATE-SW\n               MOVE SPACE                     TO WS-PERFORM-SW\n               MOVE SPACE                     TO WS-PERF-GROUP-SW\n               MOVE SPACE                     TO WS-POST-THRU-SW\n               MOVE SPACE                     TO WS-PRE-THRU-SW\n               MOVE SPACE                     TO WS-AT-SW\n               MOVE ZERO                      TO WS-AFTER-TO-LOC\n               MOVE ZERO                      TO WS-CONTINUE-POS.\n\n       1200-ADJUST-COBOL-STUFF-EXIT. EXIT.\n\n       1200-FIND-LINE-END-DOT.\n           IF WS-HOLD-RCD(WS-SUB1: 1) = WS-QUOTE\n             IF WS-QUOTE-SW = SPACE\n                 MOVE 'Y'                     TO WS-QUOTE-SW\n             ELSE\n             IF WS-QUOTE-SW = 'Y'\n                 MOVE SPACE                   TO WS-QUOTE-SW\n             ELSE\n                 CONTINUE\n           ELSE\n           IF WS-SUB1 = 72\n             IF WS-HOLD-RCD(WS-SUB1: 1) = '.'\n                 MOVE 'Y'                     TO WS-RESET-POS-SW\n                 MOVE ZERO                    TO WS-SUB1\n             ELSE\n                 CONTINUE\n           ELSE\n           IF WS-HOLD-RCD(WS-SUB1: 2) = '. '\n             IF WS-QUOTE-SW = SPACE\n                 MOVE 'Y'                     TO WS-RESET-POS-SW\n                 MOVE ZERO                    TO WS-SUB1.\n\n      *---------------------------------------\n      *    WS-ANY-ITEMS-SW is valued if the record has changed\n      *---------------------------------------\n       1200-HANDLE-LAST-EIGHT-BYTES.\n           IF WS-HOLD-RCD(73: 8) = SPACE\n             IF WS-ANY-ITEMS-SW = 'Y'\n               IF WS-DOC-08 = SPACE\n                   CONTINUE\n               ELSE\n               IF WS-DOC-08 = 'b'\n                   MOVE 'cobneat '            TO WS-HOLD-RCD(73: 8)\n               ELSE\n                   MOVE WS-DOC-08  TO WS-HOLD-RCD(WS-DOC-08-POS: 1)\n             ELSE\n                 CONTINUE\n           ELSE\n           IF WS-COBOL-08 = 'Y'\n             IF WS-ANY-ITEMS-SW = 'Y'\n               IF WS-DOC-08 = SPACE\n                   MOVE SPACE                 TO WS-HOLD-RCD(73: 8)\n               ELSE\n               IF WS-DOC-08 = 'b'\n                   MOVE 'cobneat '            TO WS-HOLD-RCD(73: 8)\n               ELSE\n                   MOVE SPACE                 TO WS-HOLD-RCD(73: 8)\n                   MOVE WS-DOC-08  TO WS-HOLD-RCD(WS-DOC-08-POS: 1)\n             ELSE\n                 MOVE SPACE                   TO WS-HOLD-RCD(73: 8)\n           ELSE\n           IF WS-ANY-ITEMS-SW = 'Y'\n             IF WS-DOC-08-POS = 73\n               IF WS-HOLD-RCD(74: 1) = SPACE\n                   MOVE WS-DOC-08  TO WS-HOLD-RCD(WS-DOC-08-POS: 1)\n               ELSE\n                   CONTINUE\n             ELSE\n             IF WS-DOC-08-POS = 80\n               IF WS-HOLD-RCD(79: 1) = SPACE\n                   MOVE WS-DOC-08  TO WS-HOLD-RCD(WS-DOC-08-POS: 1)\n               ELSE\n                   CONTINUE\n             ELSE\n             IF WS-DOC-08-POS > 73\n               IF WS-DOC-08-POS < 80\n                 IF WS-HOLD-RCD(WS-DOC-08-POS - 1: 1) = SPACE\n                     AND WS-HOLD-RCD(WS-DOC-08-POS + 1: 1) = SPACE\n                     MOVE WS-DOC-08 TO WS-HOLD-RCD(WS-DOC-08-POS: 1).\n\n       1200-SHOW-WORK-FIELDS.\n\n      *    DISPLAY '  item            ' WS-ITEM.\n      *    DISPLAY '  item pos        ' WS-ITEM-POS.\n      *    DISPLAY '  align pic sw    ' WS-ALIGN-PIC-SW.\n      *    DISPLAY '  continue pos    ' WS-CONTINUE-POS.\n      *    DISPLAY '  after to loc    ' WS-AFTER-TO-LOC.\n      *    DISPLAY '  perform group   ' WS-PERF-GROUP-SW.\n      *    DISPLAY '  perform pos     ' WS-PERFORM-POS.\n      *    DISPLAY '  evaluate sw     ' WS-EVALUATE-SW.\n      *    DISPLAY '  at sw           ' WS-AT-SW.\n      *    DISPLAY '  when sw         ' WS-WHEN-SW.\n      *    DISPLAY '  pre thru sw     ' WS-PRE-THRU-SW.\n      *    DISPLAY '  post thru sw    ' WS-POST-THRU-SW.\n\n           IF WS-IF-CNT > ZERO\n               PERFORM 1200-SHOW-IF-TABLE.\n\n       1200-SHOW-IF-TABLE.\n           DISPLAY '     if tbl ' WS-READ-COBIN-CNT\n                   '  ws-if-cnt ' WS-IF-CNT\n                   '  ws-if-loc ' WS-IF-LOC.\n           PERFORM VARYING WS-SUB3 FROM 1 BY 1\n               UNTIL WS-SUB3 > 200\n               IF WS-I1-POS(WS-SUB3) NOT = SPACE\n                   DISPLAY '            ' WS-SUB3\n                           '  pos: ' WS-I1-POS(WS-SUB3)\n                           '  else: ' WS-I1-ELSE(WS-SUB3)\n                           '  endif: ' WS-I1-ENDIF(WS-SUB3)\n                           '  not: ' WS-I1-NOT(WS-SUB3)\n               END-IF\n           END-PERFORM.\n           DISPLAY '            '.\n\n       1300-FIND-PREV-ELSE-IF.\n           IF WS-I1-POS(WS-SUB3) NOT = SPACE\n             IF WS-I1-ELSE(WS-SUB3) = SPACE\n                 MOVE 'Y'                     TO WS-I1-ELSE(WS-SUB3)\n                 MOVE WS-I1-POS(WS-SUB3)      TO WS-IF-POS\n                 MOVE WS-SUB3                 TO WS-IF-LOC\n                 MOVE ZERO                    TO WS-SUB3.\n\n       1300-FIND-PREV-ENDIF-IF.\n           IF WS-I1-POS(WS-SUB3) NOT = SPACE\n             IF WS-I1-NOT(WS-SUB3) = 'Y'\n                 MOVE 'Y'                     TO WS-I1-ELSE(WS-SUB3)\n                 MOVE 'Y'                     TO WS-I1-ENDIF(WS-SUB3)\n             ELSE\n             IF WS-I1-ENDIF(WS-SUB3) = SPACE\n                 MOVE 'Y'                     TO WS-I1-ELSE(WS-SUB3)\n                 MOVE 'Y'                     TO WS-I1-ENDIF(WS-SUB3)\n                 MOVE WS-I1-POS(WS-SUB3)      TO WS-IF-POS\n                 PERFORM 1300-FIND-PREVIOUS-IF\n                 MOVE ZERO                    TO WS-SUB3.\n\n       1300-FIND-PREVIOUS-IF.\n           PERFORM VARYING WS-SUB3 FROM WS-SUB3 BY -1\n               UNTIL WS-SUB3 < 1\n               IF WS-I1-ENDIF(WS-SUB3) = SPACE\n                   MOVE WS-SUB3               TO WS-IF-LOC\n                   MOVE ZERO                  TO WS-SUB3\n               END-IF\n           END-PERFORM.\n\n      *---------------------------------------\n      *    if WS-ELSE-IF-SW is 'Y' then split \"ELSE IF\"\n      *       into two separate lines\n      *    if not then add a level to the IF array\n      *---------------------------------------\n       1300-FIND-ELSE-IF.\n           IF WS-HOLD-RCD(WS-ITEM-POS: 7) = 'ELSE IF'\n             IF WS-ELSE-IF-SW = 'Y'\n                 MOVE ZERO                    TO WS-BLANK\n                 COMPUTE WS-BLANK = 69 - WS-ITEM-POS\n                 MOVE SPACE                   TO WS-HOLD-RCD3\n                 MOVE WS-HOLD-RCD(WS-ITEM-POS + 5: )\n                                TO WS-HOLD-RCD3(WS-ITEM-POS: )\n                 MOVE 'Y'                     TO WS-ANOTHER-RCD-SW\n                 IF WS-SHOW-LEVEL = '3'\n                     DISPLAY '     else-if pos   ' WS-ITEM-POS\n                     DISPLAY '     blank len     ' WS-BLANK\n                     DISPLAY '     pre-change    ' WS-HOLD-RCD\n                     DISPLAY '                '\n                     MOVE SPACE\n                              TO WS-HOLD-RCD(WS-ITEM-POS + 5: WS-BLANK)\n                 ELSE\n                     MOVE SPACE\n                              TO WS-HOLD-RCD(WS-ITEM-POS + 5: WS-BLANK)\n             ELSE\n                 ADD 1                        TO WS-IF-CNT\n                 MOVE WS-IF-CNT               TO WS-IF-LOC\n                 MOVE WS-IF-POS               TO WS-I1-POS(WS-IF-CNT)\n                 MOVE WS-IF-POS               TO WS-POS\n                 MOVE SPACE                   TO WS-WHEN-SW\n                 ADD WS-INDENT-IF             TO WS-IF-POS.\n\n       1300-INSPECT-PERFORM.\n           MOVE SPACE                         TO WS-PERF-GROUP-SW.\n           IF WS-ITEM2 = 'VARYING' OR SPACE\n               MOVE 'Y'                       TO WS-PERF-GROUP-SW.\n\n      *    perform 1000-check-stuff 12 times   NO\n      *    perform ws-loop-cnt times           YES\n      *    perform 12 times                    YES\n      *\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL 'TIMES'.\n           IF WS-TALLY > ZERO\n             IF WS-HOLD-RCD(WS-FND-POS + 8: 1) NUMERIC\n                 MOVE ZERO                    TO WS-TALLY\n                 INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '-'\n                 IF WS-TALLY > ZERO\n                     CONTINUE\n                 ELSE\n                     MOVE 'Y'                 TO WS-PERF-GROUP-SW\n             ELSE\n                 MOVE 'Y'                     TO WS-PERF-GROUP-SW.\n\n       1300-INSPECT-THRU.\n           MOVE SPACE                         TO WS-POST-THRU-SW.\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL ' THRU'.\n           IF WS-TALLY > ZERO\n               MOVE 'Y'                       TO WS-POST-THRU-SW.\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL ' THROUGH'.\n           IF WS-TALLY > ZERO\n               MOVE 'Y'                       TO WS-POST-THRU-SW.\n\n       1300-WORDS-AFTER-PERFORM.\n           IF WS-ITEM = 'VARYING' OR 'UNTIL'\n                     OR 'OR'      OR 'AND'\n                     OR 'GREATER' OR '>'      OR 'GT'\n                     OR 'LESS'    OR '<'      OR 'LT'\n                     OR 'EQUAL'   OR '='      OR 'EQ'\n                     OR 'GE'      OR '>='\n                     OR 'LE'      OR '<='\n                     OR 'NOT'     OR 'NE'     OR 'IS'\n               MOVE 'Y'                       TO WS-AFTER-SW\n           ELSE\n           IF WS-ITEM = 'THRU' OR 'THROUGH'\n               MOVE 'Y'                       TO WS-PRE-THRU-SW\n               MOVE 'Y'                       TO WS-AFTER-SW\n           ELSE\n           IF WS-CONTINUE-POS = ZERO\n               MOVE SPACE                     TO WS-AFTER-SW\n               MOVE SPACE                     TO WS-PERFORM-SW\n               MOVE SPACE                     TO WS-PRE-THRU-SW\n               MOVE SPACE                     TO WS-POST-THRU-SW.\n\n       1300-FIND-LEAD-WORD.\n           MOVE ZERO                          TO WS-FND-POS.\n           MOVE ZERO                          TO WS-ITEM-LEN.\n           MOVE SPACE                         TO WS-ITEM WS-ITEM2.\n           PERFORM VARYING WS-SUB3 FROM 8 BY 1\n               UNTIL WS-SUB3 > 69\n               IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE OR '*' OR '-'\n                   CONTINUE\n               ELSE\n                   MOVE WS-SUB3               TO WS-FND-POS\n                   MOVE 69                    TO WS-SUB3\n               END-IF\n           END-PERFORM.\n           IF WS-FND-POS > ZERO\n               MOVE WS-HOLD-RCD(WS-FND-POS: ) TO WS-HOLD-50\n               UNSTRING WS-HOLD-50            DELIMITED BY ALL SPACE\n                   INTO WS-ITEM WS-ITEM2\n               INSPECT WS-ITEM REPLACING ALL '.' BY SPACE\n               INSPECT WS-ITEM2 REPLACING ALL '.' BY SPACE\n               MOVE 72                        TO WS-END-POS\n               PERFORM VARYING WS-SUB3 FROM WS-FND-POS BY 1\n                   UNTIL WS-SUB3 > 72\n                   IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE\n                       MOVE WS-SUB3           TO WS-END-POS\n                       MOVE 72                TO WS-SUB3\n                   END-IF\n               END-PERFORM\n               COMPUTE WS-ITEM-LEN = WS-END-POS - WS-FND-POS.\n\n      *    ' TO  WS-FIELD'   -->  ' TO WS-FIELD '\n      *    ' TO   WS-FIELD'  -->  ' TO WS-FIELD '\n       1400-ADJUST-AFTER-TO.\n           MOVE ZERO                          TO WS-FND-POS.\n           PERFORM 1400-FIND-TO\n               VARYING WS-SUB3 FROM 8 BY 1\n               UNTIL WS-SUB3 > 69.\n      *    set ws-after-to-loc for ws fields occurring on separate line\n           IF WS-FND-POS > ZERO\n               MOVE WS-FND-POS                TO WS-AFTER-TO-LOC\n               ADD 4                          TO WS-AFTER-TO-LOC\n               IF WS-HOLD-RCD(WS-FND-POS + 4: 1) = SPACE\n                 IF WS-HOLD-RCD(WS-FND-POS + 5: 1) = SPACE\n                   IF WS-HOLD-RCD(WS-FND-POS + 6: 1) = SPACE\n                       CONTINUE\n                   ELSE\n                       MOVE WS-FND-POS        TO WS-POS\n                       ADD 6                  TO WS-FND-POS\n                       ADD 4                  TO WS-POS\n                       MOVE 'adjust after TO' TO WS-LOGIC-PLACE\n                       PERFORM 2600-APPLY-DIFF-POS\n                 ELSE\n                     MOVE WS-FND-POS          TO WS-POS\n                     ADD 5                    TO WS-FND-POS\n                     ADD 4                    TO WS-POS\n                     MOVE 'adjust after TO' TO WS-LOGIC-PLACE\n                     PERFORM 2600-APPLY-DIFF-POS.\n\n       1400-ALIGN-TO.\n           MOVE ZERO                          TO WS-FND-POS.\n           IF WS-WORKING-SW = 'Y'\n               PERFORM 1400-FIND-TO\n                   VARYING WS-SUB3 FROM 8 BY 1\n                   UNTIL WS-SUB3 > 67.\n           IF WS-FND-POS > ZERO\n               MOVE WS-ALIGN-TO-LOC           TO WS-POS\n               SUBTRACT 1 FROM WS-POS\n               MOVE ' TO '                    TO WS-ITEM\n               MOVE 4                         TO WS-LEN\n           ELSE\n               PERFORM 1400-FIND-DELIMITED\n                   VARYING WS-SUB3 FROM 8 BY 1\n                   UNTIL WS-SUB3 > 60\n               IF WS-FND-POS > ZERO\n                   MOVE WS-ALIGN-TO-LOC       TO WS-POS\n                   SUBTRACT 1 FROM WS-POS\n                   MOVE ' DELIMITED '         TO WS-ITEM\n                   MOVE 11                    TO WS-LEN\n               ELSE\n               IF WS-ITEM = 'PERFORM' OR 'VARYING'\n                   CONTINUE\n               ELSE\n               IF WS-ITEM NOT = 'FROM'\n                   PERFORM 1400-FIND-FROM\n                       VARYING WS-SUB3 FROM 8 BY 1\n                       UNTIL WS-SUB3 > 60\n                   IF WS-FND-POS > ZERO\n                       MOVE WS-ALIGN-TO-LOC   TO WS-POS\n                       SUBTRACT 1 FROM WS-POS\n                       MOVE ' FROM '          TO WS-ITEM\n                       MOVE 6                 TO WS-LEN.\n\n       1400-FIND-TO.\n           IF WS-HOLD-RCD(WS-SUB3: 4) = ' TO '\n               MOVE WS-SUB3                   TO WS-FND-POS\n               MOVE 67                        TO WS-SUB3.\n\n       1400-FIND-DELIMITED.\n           IF WS-HOLD-RCD(WS-SUB3: 13) = ' DELIMITED BY'\n               MOVE WS-SUB3                   TO WS-FND-POS\n               MOVE 60                        TO WS-SUB3.\n\n       1400-FIND-FROM.\n           IF WS-HOLD-RCD(WS-SUB3: 6) = ' FROM '\n               MOVE WS-SUB3                   TO WS-FND-POS\n               MOVE 60                        TO WS-SUB3.\n\n       1400-ALIGN-ASSIGN.\n           MOVE ZERO                          TO WS-FND-POS.\n           PERFORM 1400-FIND-ASSIGN\n               VARYING WS-SUB3 FROM 8 BY 1\n               UNTIL WS-SUB3 > 60.\n           IF WS-FND-POS > ZERO\n               MOVE WS-PIC-LOC                TO WS-POS\n               SUBTRACT 1 FROM WS-POS\n               IF WS-FND-POS NOT = WS-POS\n                   MOVE ' ASSIGN '            TO WS-ITEM\n                   MOVE 8                     TO WS-LEN\n                   MOVE 'align ASSIGN'        TO WS-LOGIC-PLACE\n                   PERFORM 2600-APPLY-DIFF-POS.\n\n       1400-FIND-ASSIGN.\n           IF WS-HOLD-RCD(WS-SUB3: 8) = ' ASSIGN '\n               MOVE WS-SUB3                   TO WS-FND-POS\n               MOVE 60                        TO WS-SUB3.\n\n      *----+----------------------------------\n\n      *---------------------------------------\n      *    load new increment values on right side of array\n      *----+----------------------------------\n       1500-LOAD-INCR-TABLE.\n           MOVE SPACE                         TO WS-L1-TABLE.\n           MOVE '01'                          TO WS-L1-LVL(1).\n           MOVE '01'                          TO WS-L1-NEW-LVL(1).\n           MOVE WS-LEVEL-INCR                 TO WS-INCR-WRK.\n           PERFORM VARYING WS-SUB3 FROM 2 BY 1\n               UNTIL WS-SUB3 > 50\n               MOVE WS-INCR-WRK         TO WS-L1-NEW-LVL(WS-SUB3)\n               ADD WS-LEVEL-INCR              TO WS-INCR-WRK\n               PERFORM 1500-INCR-WRK-ADJUST\n           END-PERFORM.\n\n       1500-INCR-WRK-ADJUST.\n           IF WS-INCR-WRK > 49\n               MOVE 49                        TO WS-INCR-WRK\n           ELSE\n           IF WS-INCR-WRK > 39\n               MOVE 1                         TO WS-LEVEL-INCR\n           ELSE\n           IF WS-INCR-WRK > 29\n             IF WS-LEVEL-INCR > 1\n                 MOVE 2                       TO WS-LEVEL-INCR.\n\n      *---------------------------------------\n      *    working storage alteration\n      *----+----------------------------------\n       1500-WORKING-STORAGE.\n           MOVE 'working storage'             TO WS-LOGIC-PLACE.\n           MOVE WS-ITEM-POS                   TO WS-FND-POS.\n\n      *    skip records if requested in PARM01\n           IF WS-SKIP-RCD-BY-REQ = 'Y'\n               GO TO 1500-WORKING-STORAGE-EXIT.\n\n           IF WS-LEVEL-INCR-SW = 'N'\n               GO TO 1500-MOVE-PIC-VALUE.\n           IF WS-ITEM-1X2 NUMERIC\n               AND WS-ITEM-3 = SPACE\n               CONTINUE\n           ELSE\n               GO TO 1500-MOVE-PIC-VALUE.\n      *---------------------------------------\n      *    blank out array in case next '01' level is\n      *    incremented differently than other '01' groups\n      *---------------------------------------\n           IF WS-ITEM-1X2 = '01'\n               PERFORM VARYING WS-SUB3 FROM 2 BY 1\n                   UNTIL WS-SUB3 > 50\n                   MOVE SPACE                 TO WS-L1-LVL(WS-SUB3)\n               END-PERFORM.\n      *---------------------------------------\n      *    lookup replacement increment and apply to output record\n      *    66 or 88 use previous prefix value\n      *---------------------------------------\n           IF WS-ITEM-1X2 = '77'\n               CONTINUE\n           ELSE\n           IF WS-ITEM-1X2 = '66' OR '88'\n               PERFORM 1500-ADJUST-PREFIX-POS\n           ELSE\n               MOVE ZERO                      TO WS-PREFIX\n               PERFORM VARYING WS-SUB3 FROM 1 BY 1\n                   UNTIL WS-SUB3 > 50\n                   IF WS-ITEM-1X2 = WS-L1-LVL(WS-SUB3)\n                       MOVE WS-L1-NEW-LVL(WS-SUB3)\n                                 TO WS-HOLD-RCD(WS-FND-POS: 2)\n                       MOVE WS-SUB3           TO WS-PREFIX\n                       MOVE 50                TO WS-SUB3\n                   ELSE\n                   IF WS-L1-LVL(WS-SUB3) = SPACE\n                       MOVE WS-ITEM-1X2       TO WS-L1-LVL(WS-SUB3)\n                       MOVE WS-L1-NEW-LVL(WS-SUB3)\n                                 TO WS-HOLD-RCD(WS-FND-POS: 2)\n                       MOVE WS-SUB3           TO WS-PREFIX\n                       MOVE 50                TO WS-SUB3\n                   END-IF\n                   END-IF\n               END-PERFORM\n               IF WS-PREFIX > 1\n                   PERFORM 1500-ADJUST-PREFIX-POS\n               END-IF\n           END-IF.\n\n      *---------------------------------------\n      *    move pic / value / redefines locations\n      *    search logic usually includes leading space ie: ' PIC'\n      *      so subtract 1 to include the leading space\n      *----+----------------------------------\n       1500-MOVE-PIC-VALUE.\n           IF WS-ALIGN-PIC-SW = 'Y'\n               MOVE ZERO                      TO WS-MOVE-POS\n               PERFORM 1500-FIND-PIC\n                   VARYING WS-SUB3 FROM 8 BY 1\n                   UNTIL WS-SUB3 > 67\n               IF WS-MOVE-POS > ZERO\n                   MOVE ' PIC'                TO WS-ITEM\n                   MOVE WS-MOVE-POS           TO WS-FND-POS\n                   MOVE WS-PIC-LOC            TO WS-POS\n                   SUBTRACT 1 FROM WS-POS\n                   IF WS-FND-POS NOT = WS-POS\n                       MOVE 'move PIC '       TO WS-LOGIC-PLACE\n                       MOVE WS-HOLD-LEN       TO WS-LEN\n                       PERFORM 2600-APPLY-DIFF-POS\n                       IF WS-ITEMS-MOVED-SW = 'E'\n                           ADD 5              TO WS-POS\n                           PERFORM 2600-APPLY-DIFF-POS.\n\n           IF WS-ALIGN-VALUE-SW = 'Y'\n               MOVE ZERO                      TO WS-MOVE-POS\n               PERFORM 1500-FIND-VALUE\n                   VARYING WS-SUB3 FROM 8 BY 1\n                   UNTIL WS-SUB3 > 65\n               IF WS-MOVE-POS > ZERO\n                   MOVE ' VALUE'              TO WS-ITEM\n                   MOVE WS-MOVE-POS           TO WS-FND-POS\n                   MOVE WS-VALUE-LOC          TO WS-POS\n                   SUBTRACT 1 FROM WS-POS\n                   IF WS-FND-POS NOT = WS-POS\n                       MOVE WS-HOLD-LEN       TO WS-LEN\n                       MOVE 'move VALUE'      TO WS-LOGIC-PLACE\n                       PERFORM 2600-APPLY-DIFF-POS.\n\n           IF WS-ALIGN-PIC-SW = 'Y'\n               MOVE ZERO                      TO WS-MOVE-POS\n               PERFORM 1500-FIND-COMP\n                   VARYING WS-SUB3 FROM 8 BY 1\n                   UNTIL WS-SUB3 > 65\n               IF WS-MOVE-POS > ZERO\n                   MOVE ' COMP'               TO WS-ITEM\n                   MOVE WS-MOVE-POS           TO WS-FND-POS\n                   MOVE WS-PIC-LOC            TO WS-POS\n                   SUBTRACT 1 FROM WS-POS\n                   IF WS-FND-POS NOT = WS-POS\n                       MOVE WS-HOLD-LEN       TO WS-LEN\n                       MOVE 'move COMP'       TO WS-LOGIC-PLACE\n                       PERFORM 2600-APPLY-DIFF-POS\n                       IF WS-ITEMS-MOVED-SW = 'E'\n                           MOVE WS-VALUE-LOC  TO WS-POS\n                           SUBTRACT 1 FROM WS-POS\n                           PERFORM 2600-APPLY-DIFF-POS.\n\n           IF WS-ALIGN-PIC-SW = 'Y'\n               MOVE ZERO                      TO WS-MOVE-POS\n               PERFORM 1500-FIND-REDEF\n                   VARYING WS-SUB3 FROM 8 BY 1\n                   UNTIL WS-SUB3 > 62\n               IF WS-MOVE-POS > ZERO\n                   MOVE ' REDEFINES'          TO WS-ITEM\n                   MOVE WS-MOVE-POS           TO WS-FND-POS\n                   MOVE WS-PIC-LOC            TO WS-POS\n                   SUBTRACT 1 FROM WS-POS\n                   IF WS-FND-POS NOT = WS-POS\n                       MOVE WS-HOLD-LEN       TO WS-LEN\n                       MOVE 'move REDEFINES'  TO WS-LOGIC-PLACE\n                       PERFORM 2600-APPLY-DIFF-POS\n                       IF WS-ITEMS-MOVED-SW = 'E'\n                           SUBTRACT 10        FROM WS-POS\n                           PERFORM 2600-APPLY-DIFF-POS.\n\n           IF WS-ALIGN-PIC-SW = 'Y'\n               MOVE ZERO                      TO WS-MOVE-POS\n               PERFORM 1500-FIND-OCCURS\n                   VARYING WS-SUB3 FROM 8 BY 1\n                   UNTIL WS-SUB3 > 64\n               IF WS-MOVE-POS > ZERO\n                   MOVE ' OCCURS'             TO WS-ITEM\n                   MOVE WS-MOVE-POS           TO WS-FND-POS\n                   MOVE WS-PIC-LOC            TO WS-POS\n                   SUBTRACT 1 FROM WS-POS\n                   IF WS-FND-POS NOT = WS-POS\n                       MOVE WS-HOLD-LEN       TO WS-LEN\n                       MOVE 'move OCCURS'     TO WS-LOGIC-PLACE\n                       PERFORM 2600-APPLY-DIFF-POS\n                       IF WS-ITEMS-MOVED-SW = 'E'\n                           ADD 5              TO WS-POS\n                           PERFORM 2600-APPLY-DIFF-POS.\n\n      *---------------------------------------\n      *    adjust gap between field level and WS field name\n      *    '02 ws-field'     -->   '02  ws-field'\n      *    '02    ws-field'  -->   '02  ws-field'\n      *---------------------------------------\n           PERFORM 1300-FIND-LEAD-WORD.\n           IF WS-FND-POS = ZERO\n               GO TO 1500-MOVE-PIC-DEFINITION.\n           MOVE WS-FND-POS                    TO WS-LEVEL-POS.\n           IF WS-ITEM-1X2 NUMERIC\n               AND WS-ITEM-3 = SPACE\n               CONTINUE\n           ELSE\n               GO TO 1500-MOVE-PIC-DEFINITION.\n\n           IF WS-HOLD-RCD(WS-LEVEL-POS + 3: 1) NOT = SPACE\n               MOVE 3                         TO WS-GAP-ADJ\n               MOVE WS-LEVEL-POS              TO WS-FND-POS\n               PERFORM 1500-INSERT-GAP.\n           IF WS-HOLD-RCD(WS-LEVEL-POS + 4: 1) = SPACE\n               MOVE 4                         TO WS-GAP-ADJ\n               MOVE WS-LEVEL-POS              TO WS-FND-POS\n               PERFORM 1500-ZAP-GAP.\n           IF WS-HOLD-RCD(WS-LEVEL-POS + 4: 1) = SPACE\n               MOVE 4                         TO WS-GAP-ADJ\n               MOVE WS-LEVEL-POS              TO WS-FND-POS\n               PERFORM 1500-ZAP-GAP.\n\n      *---------------------------------------\n      *    adjust gap between PIC and WS definition ie: X or 9\n      *    with different gap for PIC S9 statements\n      *    'PIC x    '       -->   'PIC  x   '\n      *    'PIC   x       '  -->   'PIC  x   '\n      *    'PIC   s       '  -->   'PIC s    '\n      *---------------------------------------\n       1500-MOVE-PIC-DEFINITION.\n           MOVE ZERO                          TO WS-MOVE-POS.\n           PERFORM 1500-FIND-PIC\n               VARYING WS-SUB3 FROM 8 BY 1\n               UNTIL WS-SUB3 > 67.\n           IF WS-MOVE-POS = ZERO\n               GO TO 1500-WORKING-STORAGE-EXIT.\n\n           ADD 1                              TO WS-MOVE-POS.\n           IF WS-HOLD-RCD(WS-MOVE-POS + 4: 1) NOT = SPACE\n             IF WS-HOLD-RCD(WS-MOVE-POS + 4: 1) NOT = 'S'\n                 MOVE 4                       TO WS-GAP-ADJ\n                 MOVE WS-MOVE-POS             TO WS-FND-POS\n                 PERFORM 1500-INSERT-GAP.\n           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 1) = SPACE\n               MOVE 5                         TO WS-GAP-ADJ\n               MOVE WS-MOVE-POS               TO WS-FND-POS\n               PERFORM 1500-ZAP-GAP.\n           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 1) = SPACE\n               MOVE 5                         TO WS-GAP-ADJ\n               MOVE WS-MOVE-POS               TO WS-FND-POS\n               PERFORM 1500-ZAP-GAP.\n           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 1) = 'S'\n               MOVE 5                         TO WS-GAP-ADJ\n               MOVE WS-MOVE-POS               TO WS-FND-POS\n               PERFORM 1500-ZAP-GAP.\n\n           IF WS-CONVERT-PIC-SW = 'Y'\n               PERFORM 1500-REPLACE-PIC-VALUES.\n\n      *    try moving 'VALUE' again if the logic above created\n      *    room for it\n           IF WS-ALIGN-VALUE-SW = 'Y'\n               MOVE ZERO                      TO WS-MOVE-POS\n               PERFORM 1500-FIND-VALUE\n                   VARYING WS-SUB3 FROM 8 BY 1\n                   UNTIL WS-SUB3 > 65\n               IF WS-MOVE-POS > ZERO\n                   MOVE WS-MOVE-POS           TO WS-FND-POS\n                   MOVE WS-VALUE-LOC          TO WS-POS\n                   SUBTRACT 1 FROM WS-POS\n                   IF WS-FND-POS NOT = WS-POS\n                       MOVE WS-HOLD-LEN       TO WS-LEN\n                       MOVE 'move VALUE again'   TO WS-LOGIC-PLACE\n                       PERFORM 2600-APPLY-DIFF-POS.\n\n      *     VALUE  '10'     -->   VALUE '10'\n      *     VALUE   '10'    -->   VALUE '10'\n           MOVE ZERO                          TO WS-MOVE-POS.\n           PERFORM 1500-FIND-VALUE\n               VARYING WS-SUB3 FROM 8 BY 1\n               UNTIL WS-SUB3 > 65.\n           IF WS-MOVE-POS > ZERO\n             IF WS-HOLD-RCD(WS-MOVE-POS + 7: 1) = SPACE\n               IF WS-HOLD-RCD(WS-FND-POS + 8: 1) = SPACE\n                 IF WS-HOLD-RCD(WS-FND-POS + 9: 1) = SPACE\n                     CONTINUE\n                 ELSE\n                     MOVE WS-MOVE-POS         TO WS-FND-POS WS-POS\n                     ADD 9                    TO WS-FND-POS\n                     ADD 7                    TO WS-POS\n                     MOVE 'realign VALUE'     TO WS-LOGIC-PLACE\n                     PERFORM 2600-APPLY-DIFF-POS\n               ELSE\n                   MOVE WS-MOVE-POS           TO WS-FND-POS WS-POS\n                   ADD 8                      TO WS-FND-POS\n                   ADD 7                      TO WS-POS\n                   MOVE 'realign VALUE'       TO WS-LOGIC-PLACE\n                   PERFORM 2600-APPLY-DIFF-POS.\n\n      *---------------------------------------\n      *    replace SPACES with SPACE   ZEROS ZEROES with ZERO\n      *---------------------------------------\n           IF WS-FIG-CONSTANT-SW = 'Y'\n               MOVE SPACE                     TO WS-QUOTE-SW\n               PERFORM 1500-REPLACE-FIG-CONSTANTS\n                   VARYING WS-SUB3 FROM 8 BY 1\n                   UNTIL WS-SUB3 > 70.\n\n       1500-WORKING-STORAGE-EXIT. EXIT.\n\n       1500-FIND-PIC.\n           IF WS-HOLD-RCD(WS-SUB3: 5) = ' PIC '\n               MOVE WS-SUB3                   TO WS-MOVE-POS\n               MOVE 5                         TO WS-HOLD-LEN\n               MOVE 67                        TO WS-SUB3.\n\n       1500-FIND-VALUE.\n           IF WS-HOLD-RCD(WS-SUB3: 7) = ' VALUE '\n               MOVE WS-SUB3                   TO WS-MOVE-POS\n               MOVE 7                         TO WS-HOLD-LEN\n               MOVE 65                        TO WS-SUB3.\n\n       1500-FIND-COMP.\n           IF WS-HOLD-RCD(WS-SUB3: 5) = ' COMP'\n               MOVE WS-SUB3                   TO WS-MOVE-POS\n               MOVE 5                         TO WS-HOLD-LEN\n               MOVE 65                        TO WS-SUB3.\n\n       1500-FIND-REDEF.\n           IF WS-HOLD-RCD(WS-SUB3: 11) = ' REDEFINES '\n               MOVE WS-SUB3                   TO WS-MOVE-POS\n               MOVE 11                        TO WS-HOLD-LEN\n               MOVE 62                        TO WS-SUB3.\n\n       1500-FIND-OCCURS.\n           IF WS-HOLD-RCD(WS-SUB3: 8) = ' OCCURS '\n               MOVE WS-SUB3                   TO WS-MOVE-POS\n               MOVE 8                         TO WS-HOLD-LEN\n               MOVE 64                        TO WS-SUB3.\n\n       1500-INSERT-GAP.\n           ADD WS-GAP-ADJ                     TO WS-FND-POS.\n           MOVE WS-FND-POS                    TO WS-POS.\n           ADD 1                              TO WS-POS.\n           IF WS-FND-POS NOT = WS-POS\n               MOVE 1                         TO WS-LEN\n               MOVE WS-HOLD-RCD(WS-FND-POS: 1)   TO WS-ITEM\n               MOVE 'insert gap'              TO WS-LOGIC-PLACE\n               PERFORM 2600-APPLY-DIFF-POS.\n\n       1500-ZAP-GAP.\n           ADD WS-GAP-ADJ                     TO WS-FND-POS.\n           MOVE WS-FND-POS                    TO WS-POS.\n           SUBTRACT 1 FROM WS-POS.\n           IF WS-FND-POS NOT = WS-POS\n               MOVE 1                         TO WS-LEN\n               MOVE WS-HOLD-RCD(WS-FND-POS: 1)   TO WS-ITEM\n               MOVE 'zap gap'                 TO WS-LOGIC-PLACE\n               PERFORM 2600-APPLY-DIFF-POS.\n\n       1500-ADJUST-PREFIX-POS.\n           MOVE 4                             TO WS-PREFIX-POS.\n           PERFORM 1500-COMPUTE-PREFIX-POS\n               VARYING WS-SUB3 FROM 1 BY 1\n               UNTIL WS-SUB3 > WS-PREFIX.\n           MOVE WS-ITEM-POS                   TO WS-FND-POS.\n           IF WS-ITEM-1X2 = '66' OR '88'\n               ADD 4                          TO WS-PREFIX-POS.\n           MOVE WS-PREFIX-POS                 TO WS-POS.\n           IF WS-FND-POS NOT = WS-POS\n               MOVE 2                         TO WS-LEN\n               MOVE 'adjust prefix pos'       TO WS-LOGIC-PLACE\n               PERFORM 2600-APPLY-DIFF-POS.\n\n       1500-COMPUTE-PREFIX-POS.\n           IF WS-SUB3 > 12\n               CONTINUE\n           ELSE IF WS-SUB3 > 9\n               ADD 1                          TO WS-PREFIX-POS\n           ELSE IF WS-SUB3 > 5\n               ADD 2                          TO WS-PREFIX-POS\n           ELSE\n               ADD 4                          TO WS-PREFIX-POS.\n\n      *    \"PIC  X(01). \"  -->  \"PIC  X.     \"\n       1500-REPLACE-PIC-VALUES.\n           INSPECT WS-HOLD-RCD REPLACING ALL '(1) ' BY '(01)'.\n           INSPECT WS-HOLD-RCD REPLACING ALL '(2) ' BY '(02)'.\n           INSPECT WS-HOLD-RCD REPLACING ALL '(3) ' BY '(03)'.\n           INSPECT WS-HOLD-RCD REPLACING ALL '(4) ' BY '(04)'.\n           INSPECT WS-HOLD-RCD REPLACING ALL '(5) ' BY '(05)'.\n           INSPECT WS-HOLD-RCD REPLACING ALL '(6) ' BY '(06)'.\n           INSPECT WS-HOLD-RCD REPLACING ALL '(7) ' BY '(07)'.\n           INSPECT WS-HOLD-RCD REPLACING ALL '(8) ' BY '(08)'.\n           INSPECT WS-HOLD-RCD REPLACING ALL '(9) ' BY '(09)'.\n           INSPECT WS-HOLD-RCD REPLACING ALL '(1). ' BY '(01).'.\n           INSPECT WS-HOLD-RCD REPLACING ALL '(2). ' BY '(02).'.\n           INSPECT WS-HOLD-RCD REPLACING ALL '(3). ' BY '(03).'.\n           INSPECT WS-HOLD-RCD REPLACING ALL '(4). ' BY '(04).'.\n           INSPECT WS-HOLD-RCD REPLACING ALL '(5). ' BY '(05).'.\n           INSPECT WS-HOLD-RCD REPLACING ALL '(6). ' BY '(06).'.\n           INSPECT WS-HOLD-RCD REPLACING ALL '(7). ' BY '(07).'.\n           INSPECT WS-HOLD-RCD REPLACING ALL '(8). ' BY '(08).'.\n           INSPECT WS-HOLD-RCD REPLACING ALL '(9). ' BY '(09).'.\n           IF WS-HOLD-RCD(WS-MOVE-POS + 6: 5) = '(01) '\n               MOVE SPACE       TO WS-HOLD-RCD(WS-MOVE-POS + 6: 4).\n           IF WS-HOLD-RCD(WS-MOVE-POS + 6: 6) = '(01). '\n               MOVE '.    '  TO WS-HOLD-RCD(WS-MOVE-POS + 6: 5).\n           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 6) = 'X(02) '\n               MOVE 'XX    '    TO WS-HOLD-RCD(WS-MOVE-POS + 5: 6).\n           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 7) = 'X(02). '\n               MOVE 'XX.    '   TO WS-HOLD-RCD(WS-MOVE-POS + 5: 7).\n           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 6) = '9(02) '\n               MOVE '99    '    TO WS-HOLD-RCD(WS-MOVE-POS + 5: 6).\n           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 7) = '9(02). '\n               MOVE '99.    '   TO WS-HOLD-RCD(WS-MOVE-POS + 5: 7).\n           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 6) = 'X(03) '\n               MOVE 'XXX   '    TO WS-HOLD-RCD(WS-MOVE-POS + 5: 6).\n           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 7) = 'X(03). '\n               MOVE 'XXX.   '   TO WS-HOLD-RCD(WS-MOVE-POS + 5: 7).\n           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 6) = '9(03) '\n               MOVE '999   '    TO WS-HOLD-RCD(WS-MOVE-POS + 5: 6).\n           IF WS-HOLD-RCD(WS-MOVE-POS + 5: 7) = '9(03). '\n               MOVE '999.   '   TO WS-HOLD-RCD(WS-MOVE-POS + 5: 7).\n\n       1500-REPLACE-FIG-CONSTANTS.\n           IF WS-HOLD-RCD(WS-SUB3: 1) = WS-QUOTE\n             IF WS-QUOTE-SW = SPACE\n                 MOVE 'Y'                     TO WS-QUOTE-SW\n             ELSE\n             IF WS-QUOTE-SW = 'Y'\n                 MOVE SPACE                   TO WS-QUOTE-SW\n             ELSE\n                 CONTINUE\n           ELSE\n           IF WS-QUOTE-SW = SPACE\n               PERFORM 1500-REPLACE-STUFF.\n\n       1500-REPLACE-STUFF.\n           IF WS-SUB3 < 67\n             IF WS-HOLD-RCD(WS-SUB3: 7) = ' ZEROS '\n                 MOVE ' ZERO  '       TO WS-HOLD-RCD(WS-SUB3: 7)\n             ELSE\n             IF WS-HOLD-RCD(WS-SUB3: 7) = ' ZEROS.'\n                 MOVE ' ZERO. '       TO WS-HOLD-RCD(WS-SUB3: 7)\n             ELSE\n             IF WS-HOLD-RCD(WS-SUB3: 7) = ' NULLS '\n                 MOVE ' NULL  '       TO WS-HOLD-RCD(WS-SUB3: 7)\n             ELSE\n             IF WS-HOLD-RCD(WS-SUB3: 7) = ' NULLS.'\n                 MOVE ' NULL. '       TO WS-HOLD-RCD(WS-SUB3: 7).\n           IF WS-SUB3 < 66\n             IF WS-HOLD-RCD(WS-SUB3: 8) = ' SPACES '\n                 MOVE ' SPACE  '      TO WS-HOLD-RCD(WS-SUB3: 8)\n             ELSE\n             IF WS-HOLD-RCD(WS-SUB3: 8) = ' SPACES.'\n                 MOVE ' SPACE. '      TO WS-HOLD-RCD(WS-SUB3: 8)\n             ELSE\n             IF WS-HOLD-RCD(WS-SUB3: 8) = ' ZEROES.'\n                 MOVE ' ZERO.  '      TO WS-HOLD-RCD(WS-SUB3: 8)\n             ELSE\n             IF WS-HOLD-RCD(WS-SUB3: 8) = ' ZEROES '\n                 MOVE ' ZERO   '      TO WS-HOLD-RCD(WS-SUB3: 8)\n             ELSE\n             IF WS-HOLD-RCD(WS-SUB3: 8) = ' QUOTES '\n                 MOVE ' QUOTE  '      TO WS-HOLD-RCD(WS-SUB3: 8)\n             ELSE\n             IF WS-HOLD-RCD(WS-SUB3: 8) = ' QUOTES.'\n                 MOVE ' QUOTE. '      TO WS-HOLD-RCD(WS-SUB3: 8).\n           IF WS-SUB3 < 62\n             IF WS-HOLD-RCD(WS-SUB3: 12) = ' LOW-VALUES '\n                 MOVE ' LOW-VALUE  '  TO WS-HOLD-RCD(WS-SUB3: 12)\n             ELSE\n             IF WS-HOLD-RCD(WS-SUB3: 12) = ' LOW-VALUES.'\n                 MOVE ' LOW-VALUE. '  TO WS-HOLD-RCD(WS-SUB3: 12).\n           IF WS-SUB3 < 61\n             IF WS-HOLD-RCD(WS-SUB3: 13) = ' HIGH-VALUES '\n                 MOVE ' HIGH-VALUE  ' TO WS-HOLD-RCD(WS-SUB3: 13)\n             ELSE\n             IF WS-HOLD-RCD(WS-SUB3: 13) = ' HIGH-VALUES.'\n                 MOVE ' HIGH-VALUE. ' TO WS-HOLD-RCD(WS-SUB3: 13).\n\n      *---------------------------------------\n      *    convert comment lines\n      *----+----------------------------------\n       1500-CONVERT-COMMENTS.\n\n      *    skip records if requested in PARM01\n           IF WS-SKIP-RCD-BY-REQ = 'Y'\n               GO TO 1500-CONVERT-BREAK.\n\n      *    blank out columns 1 - 6\n           IF WS-COMMENT-06 = 'Y'\n               MOVE SPACE                     TO WS-HOLD-RCD(1: 6).\n\n      *    blank out columns 73 - 80\n           IF WS-COMMENT-08 = 'Y'\n               MOVE SPACE                     TO WS-HOLD-RCD(73: 8).\n\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '*'.\n           IF WS-TALLY > 40\n               MOVE SPACE                     TO WS-DOT-SW\n               MOVE SPACE                     TO WS-FIRST-LINE-SW.\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '-'.\n           IF WS-TALLY > 40\n               MOVE SPACE                     TO WS-DOT-SW\n               MOVE SPACE                     TO WS-FIRST-LINE-SW.\n           IF WS-HOLD-RCD(8: 60) = SPACE\n               MOVE SPACE                     TO WS-DOT-SW\n               MOVE SPACE                     TO WS-FIRST-LINE-SW.\n\n      *    do not convert blank lines\n           IF WS-HOLD-RCD(8: 65) = SPACE\n               GO TO 1500-CONVERT-BREAK.\n\n      *    change comment case\n      *      note: avoid placing 'convert to upper-case' logic\n      *            above this step - it may be replaced by lowercase\n           IF WS-COMMENT-CASE = 'I'\n               PERFORM 1500-CONVERT-TO-LOWER\n           ELSE\n           IF WS-COMMENT-CASE = 'L'\n             IF WS-WORKING-SW = 'Y'\n                 PERFORM 1500-CONVERT-TO-LOWER\n             ELSE\n                 CONTINUE\n           ELSE\n           IF WS-COMMENT-CASE = 'U'\n               MOVE WS-HOLD-RCD               TO WS-HOLD-RCD2\n               MOVE FUNCTION UPPER-CASE(WS-HOLD-RCD2) TO WS-HOLD-RCD.\n\n      *    convert dash lines to asterisks\n           IF WS-LINE-TYPE = 'R'\n               MOVE SPACE                     TO WS-OTHER-CHAR-SW\n               PERFORM 1500-TEST-FOR-OTHER-CHARS\n               IF WS-OTHER-CHAR-SW = SPACE\n                   PERFORM 1500-CONVERT-FROM-DASHES.\n      *    convert asterisk lines to dashes in procedure division\n           IF WS-LINE-TYPE = 'D'\n             IF WS-WORKING-SW = 'Y'\n                 MOVE SPACE                   TO WS-OTHER-CHAR-SW\n                 PERFORM 1500-TEST-FOR-OTHER-CHARS\n                 IF WS-OTHER-CHAR-SW = SPACE\n                     PERFORM 1500-CONVERT-TO-DASHES.\n\n      *    move most comments to new position\n           IF WS-COMMENT-POS > ZERO\n               MOVE ZERO                      TO WS-FND-POS\n               PERFORM 1500-FIND-COMMENT-START\n                   VARYING WS-SUB1 FROM 8 BY 1\n                   UNTIL WS-SUB1 > 25\n               IF WS-FND-POS > ZERO\n                 IF WS-FND-POS NOT = WS-COMMENT-POS\n                     MOVE WS-HOLD-RCD         TO WS-HOLD-RCD2\n                     PERFORM 1500-MOVE-COMMENTS.\n\n      *    remove leading asterisks\n           IF WS-ZAP-LEAD-STAR = 'Y'\n               MOVE ZERO                      TO WS-TALLY\n               INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '*'\n               IF WS-TALLY < 10\n                   INSPECT WS-HOLD-RCD(8: 5) REPLACING ALL '*'\n                                             BY SPACE.\n\n      *    remove trailing asterisks\n           IF WS-ZAP-TRAIL-STAR = 'Y'\n               PERFORM 1500-ZAP-TRAIL-ASTERISKS.\n\n      *    in a group of comments, for the first line only,\n      *      convert first character to upper case\n           IF WS-CAP-FIRST = 'F'\n             IF WS-FIRST-LINE-SW = SPACE\n                 MOVE 8                       TO WS-SUB3\n                 PERFORM 1500-UPPER-CASE-FIRST\n                     UNTIL WS-SUB3 > 25.\n\n      *    for all lines in a group of comments,\n      *      convert first character to upper case\n           IF WS-CAP-FIRST = 'A'\n               MOVE 8                         TO WS-SUB3\n               PERFORM 1500-UPPER-CASE-FIRST\n                   UNTIL WS-SUB3 > 25.\n\n      *    for all lines in a group of comments, convert the\n      *      first character following '. ' to upper case\n           IF WS-AFTER-DOT = 'Y'\n               MOVE 8                         TO WS-SUB3\n               PERFORM 1500-UPPER-CASE-AFTER-DOT\n                   UNTIL WS-SUB3 > 70.\n\n           IF WS-RENUM-SW = 'Y'\n             IF WS-NO-RENUM-SW = SPACE\n                 PERFORM 1500-REPLACE-PARAGRAPH-PREFIX.\n\n       1500-CONVERT-BREAK.\n           MOVE WS-HOLD-RCD                   TO COBOUT-RCD.\n           PERFORM 3000-WRITE-COBOUT.\n\n       1500-CONVERT-EXIT. EXIT.\n\n       1500-TEST-FOR-OTHER-CHARS.\n           PERFORM VARYING WS-SUB3 FROM 8 BY 1\n               UNTIL WS-SUB3 > 71\n               IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE OR '*' OR '-'\n                                         OR '=' OR '+'\n                   CONTINUE\n               ELSE\n                   MOVE 'N'                   TO WS-OTHER-CHAR-SW\n                   MOVE 71                    TO WS-SUB3\n               END-IF\n           END-PERFORM.\n\n       1500-CONVERT-TO-LOWER.\n           MOVE SPACE                         TO WS-RESERVED-SW.\n           IF WS-COBOL-UPPER-SW = 'Y'\n             IF WS-PROCEDURE-SW = 'Y'\n                 PERFORM 1300-FIND-LEAD-WORD\n                 IF WS-FND-POS > ZERO\n                     PERFORM VARYING WS-SUB3 FROM 1 BY 1\n                         UNTIL WS-SUB3 > WS-P1-MAX\n                         IF WS-ITEM = WS-P1-ITEM(WS-SUB3)\n                             MOVE 'Y'         TO WS-RESERVED-SW\n                             MOVE WS-P1-MAX   TO WS-SUB3\n                         END-IF\n                     END-PERFORM.\n\n      *    do not lower-case convert paragraph names\n           IF WS-ITEM(1: 1) NUMERIC\n               MOVE ZERO                      TO WS-TALLY\n               INSPECT WS-ITEM TALLYING WS-TALLY FOR ALL '-'\n               IF WS-TALLY > ZERO\n                   MOVE 'Y'                   TO WS-RESERVED-SW.\n\n           IF WS-RESERVED-SW = SPACE\n               MOVE WS-HOLD-RCD               TO WS-HOLD-RCD2\n               MOVE FUNCTION LOWER-CASE(WS-HOLD-RCD2) TO WS-HOLD-RCD\n               PERFORM 1500-CHANGE-WORD-CASE.\n\n       1500-CONVERT-FROM-DASHES.\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '-'.\n           IF WS-TALLY > 10\n               MOVE SPACE                     TO WS-FIRST-LINE-SW\n               PERFORM VARYING WS-SUB1 FROM 8 BY 1\n                   UNTIL WS-SUB1 > 72\n                   IF WS-HOLD-RCD(WS-SUB1: 1) = '-'\n                     IF WS-SUB1 > 71\n                         MOVE SPACE        TO WS-HOLD-RCD(WS-SUB1: 1)\n                     ELSE\n                         MOVE '*'          TO WS-HOLD-RCD(WS-SUB1: 1)\n                     END-IF\n                   END-IF\n               END-PERFORM\n           END-IF.\n\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '*'.\n           IF WS-TALLY > 10\n               MOVE SPACE                     TO WS-FIRST-LINE-SW\n               PERFORM VARYING WS-SUB1 FROM 8 BY 1\n                   UNTIL WS-SUB1 > 72\n                   IF WS-SUB1 > 71\n                       MOVE SPACE          TO WS-HOLD-RCD(WS-SUB1: 1)\n                   ELSE\n                   IF WS-HOLD-RCD(WS-SUB1: 1) = SPACE\n                     IF WS-PROCEDURE-SW = 'Y'\n                       IF WS-SUB1 > 46\n                           MOVE SPACE      TO WS-HOLD-RCD(WS-SUB1: 1)\n                       ELSE\n                           MOVE '*'        TO WS-HOLD-RCD(WS-SUB1: 1)\n                       END-IF\n                     ELSE\n                         MOVE '*'          TO WS-HOLD-RCD(WS-SUB1: 1)\n                     END-IF\n                   END-IF\n                   END-IF\n               END-PERFORM\n           END-IF.\n\n       1500-CONVERT-TO-DASHES.\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '*'.\n           IF WS-TALLY > 10\n               MOVE SPACE                     TO WS-FIRST-LINE-SW\n               PERFORM VARYING WS-SUB1 FROM 8 BY 1\n                   UNTIL WS-SUB1 > 72\n                   IF WS-HOLD-RCD(WS-SUB1: 1) = '*'\n                     IF WS-SUB1 > 46\n                         MOVE SPACE        TO WS-HOLD-RCD(WS-SUB1: 1)\n                     ELSE\n                         MOVE '-'          TO WS-HOLD-RCD(WS-SUB1: 1)\n                     END-IF\n                   END-IF\n               END-PERFORM\n           END-IF.\n\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '-'.\n           IF WS-TALLY > 10\n               MOVE SPACE                     TO WS-FIRST-LINE-SW\n               PERFORM VARYING WS-SUB1 FROM 8 BY 1\n                   UNTIL WS-SUB1 > 72\n                   IF WS-HOLD-RCD(WS-SUB1: 1) = '-'\n                     IF WS-SUB1 > 46\n                         MOVE SPACE        TO WS-HOLD-RCD(WS-SUB1: 1)\n                     END-IF\n                   ELSE\n                   IF WS-HOLD-RCD(WS-SUB1: 1) = SPACE\n                     IF WS-SUB1 > 46\n                         CONTINUE\n                     ELSE\n                         MOVE '-'          TO WS-HOLD-RCD(WS-SUB1: 1)\n                     END-IF\n                   END-IF\n                   END-IF\n               END-PERFORM\n           END-IF.\n\n       1500-ZAP-TRAIL-ASTERISKS.\n           IF WS-HOLD-RCD(72: 1) = '*'\n               MOVE SPACE                     TO WS-HOLD-RCD(72: 1).\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '*'.\n           MOVE 13                            TO WS-SUB2.\n           IF WS-LINE-TYPE = 'R'\n             IF WS-PROCEDURE-SW = 'Y'\n                 MOVE 47                      TO WS-SUB2.\n           IF WS-TALLY < 58\n               PERFORM 1500-ZAP-HANGERS.\n\n       1500-ZAP-HANGERS.\n           PERFORM VARYING WS-SUB1 FROM 71 BY -1\n               UNTIL WS-SUB1 < WS-SUB2\n               IF WS-HOLD-RCD(WS-SUB1: 2) = '* '\n                   MOVE SPACE                 TO WS-HOLD-RCD(WS-SUB1: 1)\n               ELSE\n               IF WS-HOLD-RCD(WS-SUB1: 1) = SPACE OR '-' OR '+' OR '='\n                   CONTINUE\n               ELSE\n                   MOVE 1                     TO WS-SUB1\n               END-IF\n               END-IF\n           END-PERFORM.\n\n       1500-FIND-COMMENT-START.\n           IF WS-HOLD-RCD(WS-SUB1: 1) = SPACE OR '-' OR '*' OR '='\n               CONTINUE\n           ELSE\n               MOVE WS-SUB1                   TO WS-FND-POS\n               MOVE 72                        TO WS-SUB1.\n\n      *    do not move commented paragraph names\n       1500-MOVE-COMMENTS.\n           MOVE WS-FND-POS                    TO WS-SUB3.\n           IF WS-ITEM(1: 1) NUMERIC\n               MOVE ZERO                      TO WS-TALLY\n               INSPECT WS-ITEM TALLYING WS-TALLY FOR ALL '-'\n               IF WS-TALLY > ZERO\n                   CONTINUE\n               ELSE\n                   PERFORM 1500-COMMENT-LOOP\n           ELSE\n               PERFORM 1500-COMMENT-LOOP.\n\n       1500-COMMENT-LOOP.\n           PERFORM 1500-MOVE-COMMENTS-CHARS\n               VARYING WS-SUB2 FROM 8 BY 1\n               UNTIL WS-SUB2 > 72.\n\n       1500-MOVE-COMMENTS-CHARS.\n           IF WS-SUB2 < WS-COMMENT-POS\n               MOVE SPACE                  TO WS-HOLD-RCD(WS-SUB2: 1)\n           ELSE\n           IF WS-SUB3 > 72\n               MOVE SPACE                  TO WS-HOLD-RCD(WS-SUB2: 1)\n           ELSE\n               MOVE WS-HOLD-RCD2(WS-SUB3: 1)  TO WS-HOLD-RCD(WS-SUB2: 1)\n               ADD 1                          TO WS-SUB3.\n\n       1500-CHANGE-WORD-CASE.\n           MOVE ZERO                          TO WS-SUB3.\n           PERFORM 1500-FIND-VARIOUS-WORDS\n               VARYING WS-SUB1 FROM 8 BY 1\n               UNTIL WS-SUB1 > 72.\n\n      *    ws-sub1\n       1500-FIND-VARIOUS-WORDS.\n           PERFORM 1500-WORD-LOOP\n               VARYING WS-SUB2 FROM 1 BY 1\n               UNTIL WS-SUB2 > WS-W1-MAX.\n\n      *    ws-sub1 = record loc\n      *    ws-sub2 = parm item\n       1500-WORD-LOOP.\n           MOVE WS-W1-ITEM(WS-SUB2)           TO WS-WORD.\n           MOVE WS-W1-LEN(WS-SUB2)            TO WS-LEN.\n           MOVE ZERO                          TO WS-MAX-LOOK.\n           COMPUTE WS-MAX-LOOK = 73 - WS-LEN.\n\n           IF WS-SUB1 > WS-MAX-LOOK\n               CONTINUE\n           ELSE\n           IF WS-HOLD-RCD(WS-SUB1: WS-LEN)\n                                      = WS-WORD(1: WS-LEN)\n               MOVE WS-SUB1                   TO WS-SUB3\n               PERFORM 1500-CHANGE-START-LOC\n               IF WS-W1-HANDLE(WS-SUB2) = 'F'\n                   PERFORM 1500-UPPER-CASE-WORD\n                       UNTIL WS-SUB3 > 72\n               ELSE\n                   PERFORM 1500-UPPER-CASE\n                       UNTIL WS-SUB3 > 72.\n\n       1500-CHANGE-START-LOC.\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-WORD TALLYING WS-TALLY FOR LEADING SPACE.\n           ADD WS-TALLY                       TO WS-SUB3.\n\n      *    ws-sub3 = work subscript\n       1500-UPPER-CASE.\n           IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE\n               MOVE 73                        TO WS-SUB3\n           ELSE\n               INSPECT WS-HOLD-RCD(WS-SUB3: 1)\n                   CONVERTING 'abcdefghijklmnopqrstuvwxyz'\n                   TO         'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n               ADD 1                          TO WS-SUB3.\n\n      *    ws-sub3 = work subscript\n       1500-UPPER-CASE-WORD.\n           IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE\n               ADD 1                          TO WS-SUB3\n           ELSE\n           IF WS-HOLD-RCD(WS-SUB3: 1) ALPHABETIC\n               INSPECT WS-HOLD-RCD(WS-SUB3: 1)\n                   CONVERTING 'abcdefghijklmnopqrstuvwxyz'\n                   TO         'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n               MOVE 73                        TO WS-SUB3\n           ELSE\n               ADD 1                          TO WS-SUB3.\n\n      *    ws-sub3 = work subscript\n       1500-UPPER-CASE-FIRST.\n           IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE\n               ADD 1                          TO WS-SUB3\n           ELSE\n           IF WS-HOLD-RCD(WS-SUB3: 1) ALPHABETIC\n               INSPECT WS-HOLD-RCD(WS-SUB3: 1)\n                   CONVERTING 'abcdefghijklmnopqrstuvwxyz'\n                   TO         'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n               MOVE 71                        TO WS-SUB3\n               MOVE 'N'                       TO WS-FIRST-LINE-SW\n           ELSE\n               ADD 1                          TO WS-SUB3.\n\n      *    ws-sub3 = work subscript\n       1500-UPPER-CASE-AFTER-DOT.\n           IF WS-HOLD-RCD(WS-SUB3: 2) = '. ' OR ': '\n               ADD 1                          TO WS-SUB3\n               MOVE 'Y'                       TO WS-DOT-SW\n           ELSE\n           IF WS-DOT-SW = 'Y'\n             IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE\n                 ADD 1                        TO WS-SUB3\n             ELSE\n             IF WS-HOLD-RCD(WS-SUB3: 1) ALPHABETIC\n                 INSPECT WS-HOLD-RCD(WS-SUB3: 1)\n                     CONVERTING 'abcdefghijklmnopqrstuvwxyz'\n                     TO         'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n                 MOVE SPACE                   TO WS-DOT-SW\n             ELSE\n                 ADD 1                        TO WS-SUB3\n           ELSE\n               ADD 1                          TO WS-SUB3.\n\n      *---------------------------------------\n      *\n      *    RENUM paragraphs\n      *\n      *---------------------------------------\n       1500-REPLACE-PARAGRAPH-PREFIX.\n           MOVE SPACE                         TO WS-NBR-PAR-SW.\n           MOVE SPACE                         TO WS-ACTUAL-PAR-SW.\n           MOVE 'renumber paragraphs'         TO WS-LOGIC-PLACE.\n\n           IF WS-HOLD-RCD(7: 1) = '*'\n               PERFORM 1500-REPLACE-COMMENT-PAR\n           ELSE\n           IF WS-PROCEDURE-SW = 'Y'\n             IF WS-HOLD-RCD(8: 1) NUMERIC\n                 MOVE 8                       TO WS-SUB1\n                 MOVE 'Y'                     TO WS-ACTUAL-PAR-SW\n                 PERFORM 1500-FIND-PARAGRAPHS\n             ELSE\n             IF WS-HOLD-RCD(8: 1) = SPACE\n                 AND WS-HOLD-RCD(9: 1) NUMERIC\n                 MOVE 9                       TO WS-SUB1\n                 MOVE 'Y'                     TO WS-ACTUAL-PAR-SW\n                 PERFORM 1500-FIND-PARAGRAPHS\n             ELSE\n             IF WS-ITEM = 'PERFORM' OR 'ELSE' OR 'GO'\n                       OR 'IF' OR 'WHEN'\n                 PERFORM 1500-FIND-PARAGRAPHS\n                     VARYING WS-SUB1 FROM 8 BY 1\n                     UNTIL WS-SUB1 > 65\n             ELSE\n             IF WS-PRE-THRU-SW = 'Y'\n                 PERFORM 1500-FIND-PARAGRAPHS\n                     VARYING WS-SUB1 FROM 8 BY 1\n                     UNTIL WS-SUB1 > 65.\n\n      *---------------------------------------\n      *    if within procedure division and comment starts with a\n      *    number then assume it is a commented paragraph name\n      *---------------------------------------\n       1500-REPLACE-COMMENT-PAR.\n           PERFORM 1300-FIND-LEAD-WORD.\n           IF WS-FND-POS > ZERO\n             IF WS-PROCEDURE-SW = 'Y'\n               IF WS-ITEM-LEN < 7\n                 IF WS-ITEM(1: WS-ITEM-LEN) NUMERIC\n                     MOVE 'Y'                 TO WS-NBR-PAR-SW.\n           IF WS-NBR-PAR-SW = 'Y'\n               MOVE 'renum comment  par sw = Y   ' TO WS-LOGIC-PLACE\n               PERFORM 1500-FIND-PREV-MATCH\n               IF WS-HOLD-SUB3 > ZERO\n                   MOVE WS-FND-POS            TO WS-SUB1\n                   MOVE WS-HOLD-SUB3          TO WS-SUB2\n                   PERFORM 1500-FIND-PAR-WORD\n               ELSE\n                   CONTINUE\n           ELSE\n               MOVE 'renum comment  par sw = N   ' TO WS-LOGIC-PLACE\n               PERFORM 1500-FIND-PARAGRAPHS\n                   VARYING WS-SUB1 FROM 8 BY 1\n                   UNTIL WS-SUB1 > 65.\n\n      *    ws-sub1\n       1500-FIND-PARAGRAPHS.\n           PERFORM 1500-FIND-PAR-WORD\n               VARYING WS-SUB2 FROM 1 BY 1\n               UNTIL WS-SUB2 > WS-R1-MAX.\n\n      *    ws-sub1\n      *    ws-sub2\n       1500-FIND-PAR-WORD.\n           IF WS-R1-PROG(WS-SUB2) = WS-PROGRAM\n               MOVE WS-R1-PFX(WS-SUB2)        TO WS-PFX\n               MOVE WS-R1-LEN(WS-SUB2)        TO WS-PFX-LEN\n               MOVE WS-R1-NEW(WS-SUB2)        TO WS-PFX-NEW\n               MOVE WS-R1-NLEN(WS-SUB2)       TO WS-PFX-NLEN\n               IF WS-NBR-PAR-SW = 'Y'\n                   SUBTRACT 1                 FROM WS-PFX-LEN\n                   PERFORM 1500-TEST-PARAGRAPH\n               ELSE\n                   PERFORM 1500-TEST-PARAGRAPH.\n\n      *    only alter paragraph prefix if paragraph number preceded\n      *    by comment or space\n       1500-TEST-PARAGRAPH.\n           IF WS-HOLD-RCD(WS-SUB1: WS-PFX-LEN)\n                                 = WS-PFX(1: WS-PFX-LEN)\n             IF WS-HOLD-RCD(WS-SUB1 - 1: 1) = '*' OR SPACE\n                 PERFORM 1500-PARAGRAPH-FOUND.\n\n       1500-PARAGRAPH-FOUND.\n           IF WS-ACTUAL-PAR-SW = 'Y'\n               MOVE 'Y'                       TO WS-R1-MATCH(WS-SUB2).\n           MOVE WS-HOLD-RCD                   TO WS-HOLD-RCD2.\n           MOVE WS-SUB1                       TO WS-FND-POS WS-POS.\n           ADD WS-PFX-LEN                     TO WS-FND-POS.\n           ADD WS-PFX-NLEN                    TO WS-POS.\n           MOVE WS-PFX-LEN                    TO WS-LEN.\n           MOVE WS-PFX                        TO WS-ITEM.\n           IF WS-PFX-LEN = WS-PFX-NLEN\n             IF WS-PFX(1: WS-PFX-LEN) = WS-PFX-NEW(1: WS-PFX-NLEN)\n                 CONTINUE\n             ELSE\n                 PERFORM 1500-CHANGE-SAME-LEN\n           ELSE\n               PERFORM 1500-CHANGE-DIFF-LEN.\n\n           MOVE WS-R1-MAX                     TO WS-SUB2.\n\n      *---------------------------------------\n      *    only change this line:\n      *    *  0800 calculate launch trajectory\n      *    if next-to-match is same number:\n      *    0800-CALC-TRAJECTORY.\n      *---------------------------------------\n       1500-FIND-PREV-MATCH.\n           MOVE ZERO                          TO WS-HOLD-SUB3.\n           PERFORM VARYING WS-SUB3 FROM WS-R1-MAX BY -1\n               UNTIL WS-SUB3 < 1\n               IF WS-R1-PROG(WS-SUB3) = WS-PROGRAM\n                 IF WS-R1-MATCH(WS-SUB3) = SPACE\n                     MOVE WS-SUB3             TO WS-HOLD-SUB3\n                 ELSE\n                     MOVE ZERO                TO WS-SUB3\n                 END-IF\n               END-IF\n           END-PERFORM.\n\n       1500-CHANGE-SAME-LEN.\n           PERFORM 2900-SHOW-FOUND-MSG.\n           PERFORM 2900-SHOW-BEFORE.\n           MOVE WS-PFX-NEW(1: WS-PFX-NLEN)\n                          TO WS-HOLD-RCD(WS-SUB1: WS-PFX-NLEN).\n           MOVE 'Y'                           TO WS-ANY-ITEMS-SW.\n           PERFORM 2900-SHOW-AFTER.\n           PERFORM 2900-SHOW-BLANK-LINE.\n\n       1500-CHANGE-DIFF-LEN.\n           PERFORM 2900-SHOW-FOUND-MSG.\n           PERFORM 2900-SHOW-BEFORE.\n           MOVE 'Y'                           TO WS-OVERLAY-SW.\n           PERFORM 2700-ADJUST-THINGS.\n           IF WS-ITEMS-MOVED-SW = 'Y'\n               MOVE WS-PFX-NEW(1: WS-PFX-NLEN)\n                      TO WS-HOLD-RCD(WS-SUB1: WS-PFX-NLEN)\n               MOVE 'Y'                       TO WS-ANY-ITEMS-SW.\n           PERFORM 2900-SHOW-AFTER.\n           PERFORM 2900-SHOW-BLANK-LINE.\n\n      *---------------------------------------\n      *\n      *    BUILD paragraph number/renumber table\n      *\n      *---------------------------------------\n\n       2000-READ-COBIN.\n           READ COBIN.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-COBIN-CNT\n               IF COBIN-RCD(7: 1) = '*'\n                   CONTINUE\n               ELSE\n                   MOVE COBIN-RCD             TO WS-HOLD-RCD\n                   PERFORM 2000-SELECT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-COBIN-SW\n           ELSE\n               DISPLAY '**** COBNEAT read error on COBIN '\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +2000                     TO WS-RETURN-CODE.\n\n      *---------------------------------------\n      *    X\n      *---------------------------------------\n       2000-SELECT.\n           PERFORM 1300-FIND-LEAD-WORD.\n           IF WS-FND-POS > ZERO\n             IF WS-ITEM = 'PROCEDURE'\n                 MOVE 'Y'                     TO WS-PROCEDURE-SW\n             ELSE\n             IF WS-ITEM = 'PROGRAM-ID'\n                 MOVE WS-ITEM2                TO WS-PROGRAM\n                 MOVE ZERO                    TO WS-PAR-WRK\n                 ADD 1                        TO WS-PROGRAM-CNT\n                 MOVE SPACE                   TO WS-PROCEDURE-SW.\n           IF WS-PROCEDURE-SW = 'Y'\n             IF COBIN-RCD(8: 1) NUMERIC\n                 MOVE WS-HOLD-RCD(8: 50)      TO WS-HOLD-50\n                 PERFORM 2000-PARSE-PARAGRAPH\n             ELSE\n             IF COBIN-RCD(8: 1) = SPACE\n                 AND COBIN-RCD(9: 1) NUMERIC\n                 MOVE WS-HOLD-RCD(9: 50)      TO WS-HOLD-50\n                 PERFORM 2000-PARSE-PARAGRAPH.\n\n       2000-PARSE-PARAGRAPH.\n           MOVE WS-HOLD-50                    TO WS-HOLD-32.\n           PERFORM 2800-DETERMINE-FIELD-LEN.\n           MOVE WS-HOLD-LEN                   TO WS-PAR-LEN.\n           UNSTRING WS-HOLD-50                DELIMITED BY '-'\n               INTO WS-UNSTR1 WS-UNSTR2.\n           MOVE WS-UNSTR1                     TO WS-HOLD-32.\n           PERFORM 2800-DETERMINE-FIELD-LEN.\n           IF WS-HOLD-LEN < 7\n               ADD 1               TO WS-HOLD-LEN\n               MOVE '-'            TO WS-UNSTR1(WS-HOLD-LEN: 1)\n               IF WS-RENUM-MAX-MET = SPACE\n                   PERFORM 2000-ADD-TO-RENUM-TABLE\n                       VARYING WS-SUB3 FROM 1 BY 1\n                       UNTIL WS-SUB3 > 500\n               ELSE\n                   MOVE SPACE                 TO WS-FLIP-SW\n                   PERFORM 2000-ZAP-SAME-LOOP\n                   PERFORM 2000-REDUCE-TO-DIFF\n                       UNTIL NO-FLIP\n                   PERFORM 2000-ADD-TO-RENUM-TABLE\n                       VARYING WS-SUB3 FROM 1 BY 1\n                       UNTIL WS-SUB3 > 500\n                   IF WS-RENUM-MAX-MET = 'Y'\n                       MOVE 'Y'               TO WS-END-COBIN-SW\n                       PERFORM 2000-SHOW-MAX-MESSAGE.\n\n       2000-SHOW-MAX-MESSAGE.\n           DISPLAY '       '.\n           DISPLAY ' !!  The renumber table holds 500 '\n                   'paragraphs and it is full.  '\n           IF WS-SHOW-RENUM-SW = SPACE\n               DISPLAY ' !!  Other processing continues but '\n                       'renumbering stops.  '.\n           DISPLAY '       Program:               ' WS-PROGRAM.\n           DISPLAY '       Line:                  ' WS-READ-COBIN-CNT.\n           DISPLAY '       Paragraph:             ' WS-HOLD-50.\n           DISPLAY '       '.\n\n      *    ws-sub3\n       2000-ADD-TO-RENUM-TABLE.\n           IF WS-R1-PFX(WS-SUB3) = WS-UNSTR1\n             IF WS-R1-PROG(WS-SUB3) = WS-PROGRAM\n                 MOVE 500                     TO WS-SUB3\n             ELSE\n                 CONTINUE\n           ELSE\n           IF WS-R1-PFX(WS-SUB3) = SPACE\n               MOVE SPACE                     TO WS-HOLD-08\n               MOVE ZERO                      TO WS-HOLD-NLEN\n               PERFORM 2000-CALC-NEW-PFX\n               IF WS-PAR-LEN - WS-HOLD-LEN + WS-HOLD-NLEN > 30\n                   MOVE 500                   TO WS-SUB3\n                   PERFORM 2900-SHOW-PAR-LEN-ERR\n               ELSE\n                   MOVE WS-PROGRAM            TO WS-R1-PROG(WS-SUB3)\n                   MOVE WS-UNSTR1             TO WS-R1-PFX(WS-SUB3)\n                   MOVE WS-HOLD-LEN           TO WS-R1-LEN(WS-SUB3)\n                   MOVE WS-HOLD-08            TO WS-R1-NEW(WS-SUB3)\n                   MOVE WS-HOLD-NLEN          TO WS-R1-NLEN(WS-SUB3)\n                   MOVE SPACE                 TO WS-R1-MATCH(WS-SUB3)\n                   MOVE WS-SUB3               TO WS-SUB2\n                   ADD WS-PAR-INCREMENT       TO WS-PAR-WRK\n                   IF WS-SUB3 = 500\n                       MOVE 'Y'               TO WS-RENUM-MAX-MET\n                   ELSE\n                       MOVE SPACE             TO WS-RENUM-MAX-MET\n                       MOVE 500               TO WS-SUB3.\n\n      *    ws-sub3\n       2000-CALC-NEW-PFX.\n           IF WS-PAR-WRK < 10\n               MOVE WS-PAR-WRK(6: 1)          TO WS-HOLD-08\n               MOVE '-'                       TO WS-HOLD-08(2: 1)\n               MOVE 2                         TO WS-HOLD-NLEN\n           ELSE\n           IF WS-PAR-WRK < 100\n               MOVE WS-PAR-WRK(5: 2)          TO WS-HOLD-08\n               MOVE '-'                       TO WS-HOLD-08(3: 1)\n               MOVE 3                         TO WS-HOLD-NLEN\n           ELSE\n           IF WS-PAR-WRK < 1000\n               MOVE WS-PAR-WRK(4: 3)          TO WS-HOLD-08\n               MOVE '-'                       TO WS-HOLD-08(4: 1)\n               MOVE 4                         TO WS-HOLD-NLEN\n           ELSE\n           IF WS-PAR-WRK < 10000\n               MOVE WS-PAR-WRK(3: 4)          TO WS-HOLD-08\n               MOVE '-'                       TO WS-HOLD-08(5: 1)\n               MOVE 5                         TO WS-HOLD-NLEN\n           ELSE\n           IF WS-PAR-WRK < 100000\n               MOVE WS-PAR-WRK(2: 5)          TO WS-HOLD-08\n               MOVE '-'                       TO WS-HOLD-08(6: 1)\n               MOVE 6                         TO WS-HOLD-NLEN\n           ELSE\n               MOVE WS-PAR-WRK                TO WS-HOLD-08\n               MOVE '-'                       TO WS-HOLD-08(7: 1)\n               MOVE 7                         TO WS-HOLD-NLEN.\n\n           PERFORM 3 TIMES\n               IF WS-PAR-INIT-LEN > WS-HOLD-NLEN\n                   MOVE WS-HOLD-08            TO WS-HOLD-32-TEMP\n                   MOVE '0'                   TO WS-HOLD-08\n                   MOVE WS-HOLD-32-TEMP       TO WS-HOLD-08(2: )\n                   ADD 1                      TO WS-HOLD-NLEN\n               END-IF\n           END-PERFORM.\n\n      *    zap old/new duplicates in paragraph renum table\n       2000-ZAP-SAME-LOOP.\n           PERFORM VARYING WS-SUB3 FROM 1 BY 1\n               UNTIL WS-SUB3 > 500\n               IF WS-R1-PFX(WS-SUB3) = WS-R1-NEW(WS-SUB3)\n                   PERFORM 2000-BLANK-CURRENT-ITEM\n               END-IF\n           END-PERFORM.\n\n      *    move non-duplicates to the top\n       2000-REDUCE-TO-DIFF.\n           MOVE 'N'                           TO WS-FLIP-SW.\n           PERFORM 2000-REDUCE-TABLE\n               VARYING WS-SUB3 FROM 1 BY 1\n               UNTIL WS-SUB3 > 499.\n\n       2000-REDUCE-TABLE.\n           IF WS-R1-PFX(WS-SUB3) = WS-R1-NEW(WS-SUB3)\n             IF WS-R1-PFX(WS-SUB3 + 1) NOT = SPACE\n                 PERFORM 2000-ADJUST-TABLE-ITEMS\n                 PERFORM 2000-BLANK-NEXT-ITEM\n                 MOVE 'Y'                TO WS-FLIP-SW.\n\n       2000-ADJUST-TABLE-ITEMS.\n           MOVE WS-R1-PROG(WS-SUB3 + 1)   TO WS-R1-PROG(WS-SUB3).\n           MOVE WS-R1-PFX(WS-SUB3 + 1)    TO WS-R1-PFX(WS-SUB3).\n           MOVE WS-R1-LEN(WS-SUB3 + 1)    TO WS-R1-LEN(WS-SUB3).\n           MOVE WS-R1-NEW(WS-SUB3 + 1)    TO WS-R1-NEW(WS-SUB3).\n           MOVE WS-R1-NLEN(WS-SUB3 + 1)   TO WS-R1-NLEN(WS-SUB3).\n           MOVE WS-R1-MATCH(WS-SUB3 + 1)  TO WS-R1-MATCH(WS-SUB3).\n\n       2000-BLANK-NEXT-ITEM.\n           MOVE SPACE                     TO WS-R1-PROG(WS-SUB3 + 1).\n           MOVE SPACE                     TO WS-R1-PFX(WS-SUB3 + 1).\n           MOVE ZERO                      TO WS-R1-LEN(WS-SUB3 + 1).\n           MOVE SPACE                     TO WS-R1-NEW(WS-SUB3 + 1).\n           MOVE ZERO                      TO WS-R1-NLEN(WS-SUB3 + 1).\n           MOVE SPACE                     TO WS-R1-MATCH(WS-SUB3 + 1).\n\n       2000-BLANK-CURRENT-ITEM.\n           MOVE SPACE                     TO WS-R1-PROG(WS-SUB3).\n           MOVE SPACE                     TO WS-R1-PFX(WS-SUB3).\n           MOVE ZERO                      TO WS-R1-LEN(WS-SUB3).\n           MOVE SPACE                     TO WS-R1-NEW(WS-SUB3).\n           MOVE ZERO                      TO WS-R1-NLEN(WS-SUB3).\n           MOVE SPACE                     TO WS-R1-MATCH(WS-SUB3).\n\n      *----+----------------------------------\n\n       2600-APPLY-DIFF-POS.\n           MOVE WS-HOLD-RCD                   TO WS-HOLD-RCD2.\n           MOVE SPACE                         TO WS-ITEMS-MOVED-SW.\n           PERFORM 2900-SHOW-FOUND-MSG.\n           PERFORM 2900-SHOW-BEFORE.\n           MOVE SPACE                         TO WS-OVERLAY-SW.\n           PERFORM 2700-ADJUST-THINGS.\n           PERFORM 2900-SHOW-AFTER.\n           PERFORM 2900-SHOW-BLANK-LINE.\n           IF WS-ITEMS-MOVED-SW = 'Y'\n               MOVE 'Y'                       TO WS-ANY-ITEMS-SW.\n\n       2700-ADJUST-THINGS.\n           MOVE ZERO                          TO WS-DIFF.\n           MOVE ZERO                          TO WS-MOVE.\n           MOVE ZERO                          TO WS-BLANK.\n           MOVE ZERO                          TO WS-CHECK.\n           MOVE ZERO                          TO WS-SPACE-LEN.\n           MOVE ZERO                          TO WS-SPACE-LOC.\n           IF WS-POS > WS-FND-POS\n               PERFORM 2700-MOVE-DATA-RIGHT\n           ELSE\n           IF WS-POS < WS-FND-POS\n               PERFORM 2700-MOVE-DATA-LEFT.\n\n      *    ....+....+....+....+....+....+....+....+\n      *    //S010.SYSIN DD DUMMY           *msg\n      *    //EX0010.SYSIN DD DUMMY         *msg\n      *    diff= 2  fnd-pos 7  pos 9    space-loc= 22\n      *    space-len = 3       move = 15\n\n      *    ....+....+....+....+....+....+....+....+\n      *    //S010  EXEC  PGM=ABCD          *msg\n      *    //S010      EXEC  PGM=ABCD        *msg\n      *    diff= 4  fnd-pos 8  pos 12    space-loc= 23\n      *    space-len = 5       move= 15\n\n       2700-MOVE-DATA-RIGHT.\n           COMPUTE WS-DIFF = WS-POS - WS-FND-POS.\n           COMPUTE WS-SPACE-LEN = WS-DIFF + 1.\n           MOVE WS-FND-POS                    TO WS-BLANK.\n           MOVE WS-FND-POS                    TO WS-START-POS.\n           MOVE SPACE                         TO WS-QUOTE-SW.\n           PERFORM 2700-FIND-BLANK-AREA.\n           IF WS-SPACE-LOC = ZERO\n               PERFORM 2900-SHOW-NO-ROOM\n               MOVE 'E'                       TO WS-ITEMS-MOVED-SW\n           ELSE\n               COMPUTE WS-MOVE = WS-SPACE-LOC - WS-FND-POS\n               MOVE WS-HOLD-RCD2(1: WS-FND-POS - 1)\n                                 TO WS-HOLD-RCD(1: WS-FND-POS - 1)\n               MOVE WS-HOLD-RCD2(WS-FND-POS: WS-MOVE)\n                                 TO WS-HOLD-RCD(WS-POS: WS-MOVE)\n               MOVE SPACE        TO WS-HOLD-RCD(WS-BLANK: WS-DIFF)\n               MOVE 'Y'                       TO WS-ITEMS-MOVED-SW\n               PERFORM 2900-SHOW-WORK.\n\n      *    ....+....+....+....+....+....+....+....+\n      *    //EX0010.SYSIN DD DUMMY         *msg\n      *    //S010.SYSIN DD DUMMY           *msg\n      *    diff= 2  fnd-pos 9  pos 7    space-loc= 24\n      *    space-len = 3       move = 15\n      *    blank = 22\n\n      *    ....+....+....+....+....+....+....+....+\n      *    //S010      EXEC  PGM=ABCD        *msg\n      *    //S010  EXEC  PGM=ABCD          *msg\n      *    diff= 4  fnd-pos 12  pos 8     space-loc= 23\n      *    space-len = 5        move= 15\n      *    blank = 23\n\n       2700-MOVE-DATA-LEFT.\n           COMPUTE WS-DIFF = WS-FND-POS - WS-POS.\n           COMPUTE WS-SPACE-LEN = WS-DIFF + 1.\n           MOVE WS-POS                        TO WS-CHECK.\n           MOVE WS-FND-POS                    TO WS-START-POS.\n           MOVE SPACE                         TO WS-QUOTE-SW.\n           PERFORM 2700-FIND-BLANK-AREA.\n\n           IF WS-SPACE-LOC = ZERO\n               COMPUTE WS-MOVE = 73 - WS-FND-POS\n           ELSE\n               COMPUTE WS-MOVE = WS-SPACE-LOC - WS-FND-POS.\n           COMPUTE WS-BLANK = WS-POS + WS-MOVE.\n\n           IF WS-HOLD-RCD(WS-CHECK: WS-DIFF) = SPACE\n               OR WS-OVERLAY-SW = 'Y'\n               MOVE WS-HOLD-RCD2(1: WS-POS - 1)\n                                     TO WS-HOLD-RCD(1: WS-POS - 1)\n               MOVE WS-HOLD-RCD2(WS-FND-POS: WS-MOVE)\n                                     TO WS-HOLD-RCD(WS-POS: WS-MOVE)\n               MOVE SPACE        TO WS-HOLD-RCD(WS-BLANK: WS-DIFF)\n               PERFORM 2900-SHOW-WORK\n               MOVE 'Y'                       TO WS-ITEMS-MOVED-SW\n           ELSE\n               PERFORM 2900-SHOW-NO-ROOM\n               MOVE 'E'                       TO WS-ITEMS-MOVED-SW.\n\n       2700-FIND-BLANK-AREA.\n           MOVE ZERO                          TO WS-MAX-LOOK.\n           COMPUTE WS-MAX-LOOK = 73 - WS-DIFF.\n           PERFORM 2700-FIND-EMBEDDED-SPACE\n               VARYING WS-SUB3 FROM WS-START-POS BY 1\n               UNTIL WS-SUB3 > WS-MAX-LOOK.\n\n      *    ws-sub3\n       2700-FIND-EMBEDDED-SPACE.\n           IF WS-HOLD-RCD(WS-SUB3: 1) = WS-QUOTE\n             IF WS-QUOTE-SW = SPACE\n                 MOVE 'Y'                     TO WS-QUOTE-SW\n             ELSE\n             IF WS-QUOTE-SW = 'Y'\n                 MOVE SPACE                   TO WS-QUOTE-SW\n             ELSE\n                 CONTINUE\n           ELSE\n           IF WS-HOLD-RCD(WS-SUB3: WS-SPACE-LEN) = SPACE\n             IF WS-QUOTE-SW = SPACE\n                 MOVE WS-SUB3                 TO WS-SPACE-LOC\n                 MOVE 73                      TO WS-SUB3.\n\n      *---------------------------------------\n      *    left justify a field\n      *\n      *    '      hello'    --->   'hello      '\n      *---------------------------------------\n       2800-SHIFT-LEFT.\n           MOVE SPACE                         TO WS-HOLD-32-TEMP.\n           PERFORM VARYING WS-STR1 FROM 1 BY 1\n               UNTIL WS-STR1 > 32\n               IF WS-HOLD-32(WS-STR1: 1) NOT = SPACE\n                   MOVE WS-HOLD-32(WS-STR1: ) TO WS-HOLD-32-TEMP\n                   MOVE 32                    TO WS-STR1\n               END-IF\n           END-PERFORM.\n           MOVE WS-HOLD-32-TEMP               TO WS-HOLD-32.\n\n       2800-DETERMINE-FIELD-LEN.\n           PERFORM VARYING WS-SUB3 FROM 32 BY -1\n               UNTIL WS-SUB3 < 1\n               IF WS-HOLD-32(WS-SUB3: 1) = '.'\n                   CONTINUE\n               ELSE\n               IF WS-HOLD-32(WS-SUB3: 1) NOT = SPACE\n                   MOVE WS-SUB3               TO WS-HOLD-LEN\n                   MOVE ZERO                  TO WS-SUB3\n               END-IF\n               END-IF\n           END-PERFORM.\n\n      *---------------------------------------\n\n       2900-SHOW-FOUND-MSG.\n           IF WS-SHOW-LEVEL = '2' OR '3'\n               MOVE FUNCTION LOWER-CASE(WS-ITEM) TO WS-LC-ITEM\n               DISPLAY '     found  ' WS-READ-COBIN-CNT\n                       '  '  WS-LC-ITEM\n                       ' at ' WS-FND-POS\n                       ' req ' WS-POS ' len ' WS-LEN\n               DISPLAY '            ----+----1----+----2----+----'\n                       '3----+----4----+----5----+----6----+----7--'.\n\n       2900-SHOW-BEFORE.\n           IF WS-SHOW-LEVEL = '1' OR '2' OR '3'\n               DISPLAY '     before ' WS-HOLD-RCD2.\n\n       2900-SHOW-AFTER.\n           IF WS-SHOW-LEVEL = '1' OR '2' OR '3'\n               DISPLAY '     after  ' WS-HOLD-RCD.\n\n       2900-SHOW-WORK.\n           IF WS-SHOW-LEVEL = '3'\n               DISPLAY '       - fnd pos   ' WS-FND-POS\n                       '  new pos   ' WS-POS\n                       '  move len  ' WS-MOVE\n                       '  logic     ' WS-LOGIC-PLACE\n               DISPLAY '       - space loc ' WS-SPACE-LOC\n                       '  diff      ' WS-DIFF\n                       '  space len ' WS-SPACE-LEN\n                       '  blank loc ' WS-BLANK.\n\n       2900-SHOW-NO-ROOM.\n           IF WS-SHOW-LEVEL = '1' OR '2' OR '3'\n               DISPLAY ' --> no room for adjustment at pos '\n                         WS-POS ' for item ' WS-ITEM.\n\n       2900-SHOW-PAR-LEN-ERR.\n           IF WS-SHOW-LEVEL = '1' OR '2' OR '3'\n               DISPLAY ' --> new paragraph length would be > 30 '\n                       'for item ' WS-HOLD-50\n               DISPLAY '     curr: ' WS-UNSTR1 ' len ' WS-HOLD-LEN\n               DISPLAY '     skip: ' WS-HOLD-08 '            '\n                       ' len ' WS-HOLD-NLEN.\n\n       2900-SHOW-BLANK-LINE.\n           IF WS-SHOW-LEVEL = '1' OR '2' OR '3'\n               DISPLAY '          '.\n\n       3000-WRITE-COBOUT.\n           WRITE COBOUT-RECORD.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-WRITE-COBOUT-CNT\n           ELSE\n               DISPLAY '**** COBNEAT write error on COBOUT'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +3000                     TO WS-RETURN-CODE.\n\n      ************************************ END COBNEAT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COBNEAT1": {"ttr": 4105, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x000\\x01\\x19\\x01\\x7f\\x01\\x19)O\\x087\\x01K\\x00\\x10\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2019-01-17T00:00:00", "modifydate": "2019-10-21T08:37:30", "lines": 331, "newlines": 16, "modlines": 0, "user": "IANNONE"}, "text": "*\n*   COBNEAT   clean-up Cobol statements\n*\n*\n*             C=flags to pass to program: comment processing\n*                 options, master overrides, etc\n*             D=limit display statements related to specifed lines\n*             R=cobol reserved words\n*             S=limit which records are affected by COBNEAT\n*             W=if converting comments to lowercase, specify\n*                 words to convert back to uppercase so\n*                 comments look professional\n*\n*\n*   Cobol manipulation parms:\n*   ------------\n*\n*   indent       ##     standard amount to indent items after 'IF'\n*                         statements.  default is 04.\n*   indent if    ##     standard amount to indent an 'IF' if directly\n*                         following an 'IF'.  default is 02.\n*   level incr   ##     alter ws '01' field groups by this increment.\n*                         default is 05.  00 = skip processing.\n*   orig loc     ##     standard location for most statements.\n*                         default is 12.\n*   pic loc      ##     standard location for PIC statements.\n*                         default is 40.  00 = skip processing.\n*   to loc       ##     standard location for 'TO' statements.\n*                         default is 47.  00 = skip processing.\n*   value loc    ##     standard location for 'VALUE' statements.\n*                         default is 54.  00 = skip processing.\n*   else if             specify to split 'ELSE IF' statements\n*                         into two lines\n*   convert pic         replace \"PIC  9(02)\" with \"PIC  99\" etc\n*   fig constant        replace \"SPACES\" with \"SPACE\" etc\n*\n*\n*   Upper/lower case comment logic:\n*   ------------\n*   after dot     = capitalize first word after '. ' or ': '\n*   case          = I  convert comments to lower case\n*                   L  convert only WS/procedure comments to lower case\n*                   U  convert comments to upper case\n*   cap first     = F  capitalize first word of first line in group\n*                   A  capitalize first word for all lines in group\n*   cobol upper   = in procedure division, do not convert commented\n*                      lines starting with reserved words to lower case\n*\n*   Comment formatting:\n*   ------------\n*   line type     = R  change comment lines to asterisks pos 7 - 71\n*                   D  change comment lines to dashes pos 7 - 52\n*   move comment  = move most comments to specified position ####\n*                      default value is 0012\n*   zap star e    = blank trailing asterisks in comments\n*   zap star l    = blank leading asterisks in comments, pos 8-12\n*   zap first c   = blank out comment position 1 - 6\n*   zap last c    = blank out comment position 73 - 80\n*   zap eject     = blank out EJECT and SKIP statements\n*\n*   Cobol alteration options:\n*   ------------\n*   doc last b    = put \"cobneat \" in position 73-80 for changed rcds\n*   doc last x ## = put \"x\" in position ## (73-80) for changed rcds\n*   zap first b   = blank out Cobol position 1 - 6\n*   zap last b    = blank out Cobol position 73 - 80\n*   renum par     = renumber paragraphs (with numeric prefix)\n*   renum pincr   = step increment ####   ex: 0010   0001 - 1000\n*   renum init    = initial paragraph prefix length  0002 - 0005\n*\n*   Master overrides, so you don't have to comment-out each setting\n*   ------------\n*   no comment    = skip most comment alterations and renums\n*   no lineup     = skip most Cobol alterations and renums\n*   no renum      = skip renumbering paragraphs\n*\n*\n* flag:  \"C\" to specify processing options\n* |      \"D\" to limit internal field displays\n* |      \"R\" to specify Cobol reserved words\n* |      \"S\" to limit records processed by this program\n* |      \"W\" for uppercase word conversion in comments\n* |\n* | item\n* | |                                item length\n* | |                                blank = use default values\n* | |                                00    = turn off some options\n* | |                                |\n* | |                                |  options\n* | |                                |  |\n* - ----+----+----+----+----+----+-- -- ------\n* C indent                           04\n* C indent if                        02\n* C level incr                       05\n* C orig loc                         12\n* C pic loc                          40\n* C to loc                           47\n* C value loc                        54\n* - ----+----+----+----+----+----+-- -- ------\n* C no lineup\n* C no comment\n* C no renum\n* - ----+----+----+----+----+----+-- -- ------\n  C convert pic\n  C else if\n  C fig constant\n  C case                                L       I L U\n* C after dot\n* C cap first                           F       A F\n  C line type                           D       D R\n  C move comment                        0012\n  C cobol upper\n  C zap eject\n  C zap star e\n  C zap star l\n* C doc last b\n* C doc last % 80\n* C zap first b\n* C zap last b\n* C zap first c\n* C zap last c\n* C renum par\n  C renum pincr                         0100\n  C renum init                          0005\n* - ----+----+----+----+----+----+-- -- ------\n*\n*\n*   enter up to 200 reserved words\n*\n*   Cobol reserved word.  If not specified, items are not selected\n*   |     for positional adjustment.\n*   |\n* - ----+----+----+----+----+----+-- -- ------\n  R ACCEPT\n  R ACCESS\n  R ADD\n  R ALSO\n  R AND\n  R ASCENDING\n  R ASSIGN\n  R AT\n  R BLOCK\n  R BY\n  R CALL\n  R CANCEL\n  R CBL\n  R CLOSE\n  R COLLATING\n  R COMMIT\n  R COMPUTE\n  R CONTENT\n  R CONTINUE\n  R COPY\n  R CORR\n  R CORRESPONDING\n  R COUNT\n  R DATA\n  R DELETE\n  R DEPENDING\n  R DESCENDING\n  R DISPLAY\n  R DIVIDE\n  R DOWN\n  R DUPLICATES\n  R EJECT\n  R ELSE\n  R END-ADD\n  R END-CALL\n  R END-COMPUTE\n  R END-DELETE\n  R END-DIVIDE\n  R END-EVALUATE\n  R END-IF\n  R END-INVOKE\n  R END-MULTIPLY\n  R END-PERFORM\n  R END-READ\n  R END-RETURN\n  R END-REWRITE\n  R END-SEARCH\n  R END-START\n  R END-STRING\n  R END-SUBTRACT\n  R END-UNSTRING\n  R END-WRITE\n  R END-XML\n  R ENTRY\n  R EQ\n  R EQUAL\n  R EVALUATE\n  R EXIT\n  R EXHIBIT\n  R FILE\n  R FROM\n  R GE\n  R GENERATE\n  R GET\n  R GIVING\n  R GO\n  R GREATER\n  R GT\n  R IF\n  R INCLUDE\n  R INITIALIZE\n  R INPUT\n  R INSPECT\n  R INVALID\n  R INVOKE\n  R IS\n  R KEY\n  R LABEL\n  R LE\n  R LESS\n  R LT\n  R MERGE\n  R MOVE\n  R MULTIPLY\n  R NE\n  R NEXT\n  R NOT\n  R OCCURS\n  R ON\n  R OPEN\n  R OR\n  R ORGANIZATION\n  R OUTPUT\n  R OVERFLOW\n  R PERFORM\n  R READ\n  R READY\n  R RECORD\n  R RECORDING\n  R REFERENCE\n  R RELEASE\n  R REMAINDER\n  R REPLACING\n  R RETURNING\n  R REWRITE\n  R ROUNDED\n  R SEARCH\n  R SELECT\n  R SET\n  R SIGN-OFF\n  R SIGN-ON\n  R SIZE\n  R SKIP\n  R SKIP1\n  R SKIP2\n  R SKIP3\n  R SORT\n  R START\n  R STOP\n  R STRING\n  R SUBTRACT\n  R TALLYING\n  R TERMINATE\n  R THROUGH\n  R THRU\n  R TO\n  R UNSTRING\n  R UNTIL\n  R UP\n  R UPON\n  R USING\n  R VALUE\n  R VARYING\n  R WHEN\n  R WITH\n  R WRITE\n  R XML\n  R >\n  R <\n  R =\n  R >=\n  R <=\n* - ----+----+----+----+----+----+-- -- ------\n*\n*\n*----------------------------------------------\n*\n*   If 'comment lc' specified,\n*     convert these words within Cobol comments to uppercase\n*\n*   enter up to 200 items\n*\n*  bar helps show if spaces precede word\n*  |\n*  |                                    F=first character uppercase\n*  |                                    W=whole word (and connected\n*  |                            search  |   words) uppercase\n*  |word                        length  |\n*  ||                                |  |\n* - ----+----+----+----+----+----+-- -- ------\n  W| ftp                             04 W\n  W| gdg                             04 W\n  W| gm                              04 W\n  W| ws-                             04 W        working storage fields\n  W|(ws-                             04 W        working storage fields\n  W| pds                             04 W\n  W| ca7                             05 W\n  W| edi                             05 W\n  W| sar                             05 W\n  W| ifps.                           06 W\n  W| openc                           06 W\n  W| vsam                            06 W\n  W| chrys                           06 F\n  W| ford                            06 F\n  W| honda                           06 F\n  W| note:                           06 F\n  W| mitsub                          07 F\n  W| nissan                          08 F\n  W| subaru                          08 F\n  W| toyota                          08 F\n* - ----+----+----+----+----+----+-- -- ------\n*\n*   Display field values for specified record range\n*\n*   Restrict which records are processed by this program\n*\n*\n*   start = start displaying/including at this record\n*   end = stop displaying/including at this record\n*   |\n*   |     zero value causes parm to be ignored\n*   |     |\n* - ----- ---------\n  D start 000000000\n  D end   000000000\n  S start 000000000\n  S end   000000000\n* - ----- ---------\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COBNOTE": {"ttr": 4357, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01%\\x002\\x01\\x19\\x03/\\x01\\x19)\\x1f\\x14U\\x03k\\x02\\x9a\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.37", "flags": 0, "createdate": "2019-02-01T00:00:00", "modifydate": "2019-10-18T14:55:32", "lines": 875, "newlines": 666, "modlines": 0, "user": "IANNONE"}, "text": "\n  COBNEAT documentation                                    2/01/2019\n\n  --> because this program creates an altered copy of your program,\n      you should test it thoroughly before replacing the original\n      program.\n\n      general placement of cobol program items:\n\n      ---+----+----2----+----3----+----4----+----5----+----6----+----7--\n      *0000-paragraph-name\n           MOVE                        PIC    TO     VALUE\n\n\n  ==============\n  \"C\" parm items can be entered in upper or lower case\n  ==============\n\n  C no lineup\n\n     \"no lineup\" can be used as a master override.  it \"turns off\"\n     any of the parm options below that alter cobol processing\n     statements.  you can specify this option once rather\n     than comment each option individually.\n\n     note that specifying this option also stops paragraph\n     renumbering.\n\n\n  C no comment\n\n     \"no comment\" can be used as a master override.  it \"turns off\"\n     any of the parm options below that alter cobol comments.\n     you can specify this option once rather than comment each\n     option individually.\n\n     note that specifying this option also stops paragraph\n     renumbering.\n\n\n  C no renum\n\n     specify \"no renum\" as a master override.  it \"turns off\"\n     renumbering cobol paragraphs and also paragraph references\n     in comments.  it has the same effect as commenting out\n     option \"renum par\"\n\n\n  C convert pic\n\n     \"convert pic\" causes these replacements:\n\n        PIC  X(01)  -->  PIC  X\n        PIC  X(02)  -->  PIC  XX\n        PIC  X(03)  -->  PIC  XXX\n        PIC  X(04)  -->  PIC  X(04) no change\n\n        PIC  9(01)  -->  PIC  9\n        PIC  9(02)  -->  PIC  99\n        PIC  9(03)  -->  PIC  999\n        PIC  9(04)  -->  PIC  9(04) no change\n\n\n  C else if\n\n     \"else if\" causes ELSE IF statments in cobol to be separated\n     into two lines:\n\n     -before-\n           IF WS-FIELD > 30\n               ADD 4                          TO WS-FIELD4\n           ELSE IF WS-FIELD > 20\n               ADD 5                          TO WS-FIELD4.\n     -after-\n           IF WS-FIELD > 30\n               ADD 4                          TO WS-FIELD4\n           ELSE\n           IF WS-FIELD > 20\n               ADD 5                          TO WS-FIELD4.\n\n\n  C fig constant\n\n     \"fig constant\" causes COBNEAT to replace these words with\n     their simple counterparts:\n\n     -before-\n           05  WS-QUOTE                PIC  XX       VALUE QUOTES.\n           05  WS-NULL                 PIC  X(10)    VALUE NULLS.\n           05  WS-ZERO                 PIC  999      VALUE ZEROES.\n           05  WS-ZERO                 PIC  999      VALUE ZEROS.\n\n           MOVE SPACES                        TO WS-FIELD.\n           MOVE LOW-VALUES                    TO WS-FIELD.\n     -after-\n           05  WS-QUOTE                PIC  XX       VALUE QUOTE.\n           05  WS-NULL                 PIC  X(10)    VALUE NULL.\n           05  WS-ZERO                 PIC  999      VALUE ZERO.\n           05  WS-ZERO                 PIC  999      VALUE ZERO.\n\n           MOVE SPACE                         TO WS-FIELD.\n           MOVE LOW-VALUE                     TO WS-FIELD.\n\n\n  C indent                           04\n\n     \"indent\" is used to override the default indent value of 4.\n     allowable values 01 - 06.\n\n     specifying \"indent 03\" results in:\n\n     -before-\n           IF WS-FIELD > WS-FIELD2\n             IF WS-FIELD > WS-FIELD2\n                 MOVE WS-FIELD3               TO WS-FIELD4.\n     -after-\n           IF WS-FIELD > WS-FIELD2\n             IF WS-FIELD > WS-FIELD2\n                MOVE WS-FIELD3                TO WS-FIELD4.\n             ---\n               |\n               indent of 3\n\n\n  C indent if                        02\n\n     \"indent if\" is used to override the default indent-if value of 2.\n     this determines where an \"IF\" statement is placed when directly\n     following a previous \"IF\" statement.\n     allowable values 01 - 06.\n\n     specifying \"indent if 03\" results in:\n\n     -before-\n           IF WS-FIELD > WS-FIELD2\n             IF WS-FIELD > WS-FIELD2\n                 MOVE WS-FIELD3               TO WS-FIELD4.\n     -after-\n           IF WS-FIELD > WS-FIELD2\n              IF WS-FIELD > WS-FIELD2\n           ---    MOVE WS-FIELD3              TO WS-FIELD4.\n             |\n             |\n             indent-if of 3\n\n\n  C level incr                       05\n\n     \"level incr\" will automatically renumber \"01\" working storage\n     groups.  \"66\" and \"77\" and \"88\" level items are not altered.\n     allowable values are 00 and 01 - 10.\n     set the increment value to 00 to turn this feature off.\n\n     for example, specifying \"level incr 05\" will renumber as follows:\n\n     -before-\n       01  WS-WORK-FIELDS.\n           02  WS-STAT                 PIC  99       VALUE ZERO.\n           02  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n     -after-\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n\n     note that 49 is the highest allowable group prefix number.\n     when the group levels get deeper, the increment is\n     automatically lowered to 2 and then to 1 so the group\n     numbers do not increment past 49.\n\n     -before-\n       01  WS-FIELDS.\n           05  WS-ADDITIONAL-FIELDS.\n               10  WS-LS-DATA-9X10    PIC  XX.\n                  15  WS-15-DEEP   PIC X.\n                  20  WS-20-DEEP   PIC X.\n                  25  WS-25-DEEP   PIC X.\n                  30  WS-30-DEEP   PIC X.\n                  35  WS-35-DEEP   PIC X.\n                  40  WS-40-DEEP   PIC X.\n                  45  WS-45-DEEP   PIC X.\n                  46  WS-46-DEEP   PIC X.\n                  47  WS-47-DEEP   PIC X.\n                  48  WS-48-DEEP   PIC X.\n                  49  WS-49-DEEP   PIC X.\n     -after-\n       01  WS-FIELDS.\n           05  WS-ADDITIONAL-FIELDS.\n               10  WS-LS-DATA-9X10    PIC  XX.\n                  15  WS-15-DEEP   PIC X.\n                  20  WS-20-DEEP   PIC X.\n                  25  WS-25-DEEP   PIC X.\n                  30  WS-30-DEEP   PIC X.\n                  32  WS-35-DEEP   PIC X.\n                  34  WS-40-DEEP   PIC X.\n                  36  WS-45-DEEP   PIC X.\n                  38  WS-46-DEEP   PIC X.\n                  40  WS-47-DEEP   PIC X.\n                  41  WS-48-DEEP   PIC X.\n                  42  WS-49-DEEP   PIC X.\n\n\n  C orig loc                         12\n\n     \"orig loc\" is used as the \"global placement\" location for most\n     cobol words.  the default value is 12.\n     allowable values are 08 - 16.\n     there are few scenarios where this would need to change.\n\n  C pic loc                          40\n\n     \"pic loc\" is used to override the default location of 40 for \"PIC\"\n     statements.  allowable values are 00 and 34 - 50.\n     set the location value to 00 to turn this feature off.\n     note that most items in \"SELECT\" clauses line-up to this value.\n     also, REDEFINES and OCCURS statements also line-up to this value.\n\n     -before-\n           05 WS-QUOTE   PIC  XX    VALUE QUOTES.\n           05 WS-NULL    PIC  X(10) VALUE NULLS.\n     -after-\n           05 WS-QUOTE                 PIC  XX    VALUE QUOTES.\n           05 WS-NULL                  PIC  X(10) VALUE NULLS.\n\n\n  C to loc                           47\n\n     \"to loc\" is used to override the default location of 47 for \"TO\"\n     statements.  allowable values are 00 and 35 - 55.\n     set the location value to 00 to turn this feature off.\n     DELIMITED BY and FROM statements also line-up to this value.\n\n      *0000-  +----2----+----3----+----4----+----5----+----6----+----7--\n     -before-\n           MOVE WS-FIELD3     TO WS-FIELD4.\n     -after-\n           MOVE WS-FIELD3                     TO WS-FIELD4.\n\n     note that if the \"TO\" statement cannot be moved to the default\n     location then alternate locations are attempted.\n\n      *0000-  +----2----+----3----+----4----+----5----+----6----+----7--\n     -before-\n                       MOVE WS-LONGER-FIELD TO WS-FIELD4\n                       MOVE WS-LONGER-FIELD TO WS-FIELD5\n                       MOVE WS-REALLY-LONG-FIELD TO WS-FIELD6\n                       MOVE WS-SHORT TO WS-LONGER-RECEIVER-FIELD\n     -after-\n                       MOVE WS-LONGER-FIELD   TO WS-FIELD4\n                       MOVE WS-LONGER-FIELD   TO WS-FIELD5\n                       MOVE WS-REALLY-LONG-FIELD TO WS-FIELD6\n                       MOVE WS-SHORT       TO WS-LONGER-RECEIVER-FIELD\n\n  C value loc                        54\n\n     \"value loc\" is used to override the default location of 54 for\n     \"VALUE\" statements.  allowable values are 00 and 42 - 60.\n     set the location value to 00 to turn this feature off.\n\n      *0000-  +----2----+----3----+----4----+----5----+----6----+----7--\n     -before-\n           05 WS-QUOTE   PIC  XX    VALUE QUOTES.\n           05 WS-NULL    PIC  X(10) VALUE NULLS.\n     -after-\n           05 WS-QUOTE   PIC  XX                     VALUE QUOTES.\n           05 WS-NULL    PIC  X(10)                  VALUE NULLS.\n\n\n  C case                                I\n\n     \"case I\" is used to alter all comments to lower case, including\n     those in the identification division.  the identification\n     division often contains historical comments built-up over years\n     and altering the comments might not be advisable.\n\n  C case                                L\n\n     \"case L\" is used to alter comments on/after the working-storage\n     section to lower case.\n\n     converting comments to lower case is advisable - it separates\n     them visually from processing code and makes them easier to read.\n     in essence, the comments are not SHOUTING AT YOU.  however,\n     converting all characters to lower case might make them less\n     english like.  these options exist to try to ease the conversion\n     to lower case:  \"after dot\"  and  \"cap first\".\n     they are explained below.\n\n\n  C case                                U\n\n     \"case U\" is used to alter all comments to upper case.\n\n\n  C after dot\n\n     specify \"after dot\" to convert characters following\n     a period '. ' or a colon ': ' to upper-case.\n     this works well with comments entered in a flowing\n     paragraph style but not so well in list form:\n\n      *  list one - item one. Item two: Item three\n      *             item four item five.\n      *             Item six  item seven.  Item eight\n\n      *  here is another paragraph style comment.\n      *  Items following the period or colon are converted to\n      *  uppercase.  This might make paragraph style comments\n      *  more readable.  Note which items are capitalized here.\n\n\n  C cap first                    F\n\n     specify \"cap first f\" to convert the first character in\n     the first line in a group of lines to upper-case.\n     this works well with comments entered in a list form\n     but not so well in a prefixed list form.\n\n     characters up to position 25 are converted.\n\n    +----1----+----2----+----3--\n      * First, run job JOB001 to fix the issue\n      * second, run job JOB002 to fix issues from JOB001\n      * third, run job JOB003 to fix issues from JOB002\n\n      * Process: run job JOB001 to fix the issue\n      *\n      *          Run job JOB003 to fix issues from JOB001 and JOB002\n\n      * Process:          run job JOB001\n      *                   run job JOB002\n      *                   run job JOB003\n\n      * Here is another paragraph style comment. the first\n      * character in this paragraph is capitalized but\n      * the remaining lines are not converted to upper case.\n      * note which items are capitalized here.\n\n\n  C cap first                    A\n\n     specify \"cap first a\" to convert the first character in\n     all lines in a group of lines to upper-case.\n     this works well with comments entered in a list form\n     but not so well in a paragraph form.\n\n     Characters up to position 25 are converted.\n\n    +----1----+----2----+----3--\n      * First, run job JOB001 to fix the issue\n      * Second, run job JOB002 to fix issues from JOB001\n      * Third, run job JOB003 to fix issues from JOB002\n\n      * Process: run job JOB001 to fix the issue\n      *          Run job JOB002 to fix issues from JOB001\n      *          Run job JOB003 to fix issues from JOB002\n\n      * Process:          run job JOB001\n      *                   run job JOB002\n      *                   run job JOB003\n\n      * Here is another paragraph style comment.\n      * The first character in each line is converted to\n      * Upper case.  internal lines are not affected.\n      * Note which items are capitalized here.\n\n\n  C line type                           R\n\n     specify \"line type R\" to convert dash lines or shorter\n     asterisk lines to full length asterisk lines.\n\n     lines with at least 10 dashes or asterisks, and with no\n     intervening alpha or numeric characters, are converted\n     to asterisks up to column 71.  in the procedure division\n     they are converted to asterisks up to column 46.\n\n     these lines\n\n      *********\n      * * * * * * * * * * * * * *\n      *------------\n\n     become\n\n      *****************************************************************\n\n\n  C line type                    D\n\n     specify \"line type D\" to convert asterisk lines or shorter\n     dash lines to dash lines.\n\n     lines with at least 10 dashes or asterisks, and with no\n     intervening alpha or numeric characters, are converted\n     to dashes up to column 52\n\n     these lines\n\n      *********\n      * * * * * * * * * * * * * *\n      *------------\n\n     become\n\n      *---------------------------------------------\n\n\n  C move comment                 0012\n\n     specify \"move comment\" to move comments to a specified\n     location.  the default location is column 12.\n     allowable values are 0008 through 0020.\n     When all the comments in a job/proc are aligned they make\n     things look clean and organized.\n\n     characters up to position 25 signal the move process to select\n     that line for adjustment.  all items on the line are then moved\n     together.\n\n     this move logic does not attempt to keep disconnected words\n     'positionally stable.'\n\n     -before-\n      *       example message     with a five character gap\n     -after-\n      *    example message     with a five character gap\n\n     -not-\n      *    example message        with trailing chars at original pos\n\n\n     comment lists are often miss-aligned after comments are moved.\n     get around this by placing list items after column 25.\n\n          ----+----2----+----3--\n     list items on/before column 25:\n\n     -before-\n      * process: run job JOB001 to fix the issue\n      *          run job JOB002 to fix issues from JOB001\n      *          run job JOB003 to fix issues from JOB002\n\n     -after-\n      *    process: run job JOB001 to fix the issue\n      *    run job JOB002 to fix issues from JOB001\n      *    run job JOB003 to fix issues from JOB002\n\n          ----+----2----+----3--\n     list items on/before column 25:\n\n     -before-\n      * process order   run job JOB001\n      *                 run job JOB002\n      *                 run job JOB003\n     -after-\n      *    process order   run job JOB001\n      *    run job JOB002\n      *    run job JOB003\n\n          ----+----2----+----3--\n     list items after column 25:\n\n     -before-\n      * process order     run job JOB001\n      *                   run job JOB002\n      *                   run job JOB003\n     -after-\n      *    process order  run job JOB001\n      *                   run job JOB002\n      *                   run job JOB003\n\n\n  C cobol upper\n\n     specifying \"cobol upper\" (in conjuction with \"case I\" or \"case L\")\n     allows a comment line in the procedure division to remain\n     in upper case if it starts with a cobol reserved word.\n     this helps preserve commented logic in upper case\n     for future re-use.\n\n     -before-\n      *    HERE WE REPLACE ALL SPACES BY ATERISKS\n      *    INSPECT WS-FIELD REPLACING ALL SPACE BY '*'.\n      *    THIS RESULTS IN DEFINING THE MEANING OF LIFE\n     -after-\n      *    here we replace all spaces by aterisks\n      *    INSPECT WS-FIELD REPLACING ALL SPACE BY '*'.\n      *    actually this just changes values in a field\n\n\n  C zap eject\n\n     specifying \"zap eject\" with replace these items with spaces:\n     EJECT,  SKIP1, SKIP2, SKIP3\n\n\n  C zap star e\n\n     specifying \"zap star e\" will replace \"trailing\" asterisks with\n     spaces.  Only lines with less than 58 asterisks are altered.\n     alpha and numeric characters stop the right-to-left\n     conversion.\n     above the procedure division, asterisks are changed\n     to spaces in columns 13 through 71.\n     within the procedure division, asterisks are changed\n     to spaces in columns 47 through 71.\n\n     -before-\n      **   this is a line with trailing asterisks   **\n     -after-\n      **   this is a line with trailing asterisks\n\n\n  C zap star l\n\n     specifying \"zap star L\" will replace \"leading\" asterisks with\n     spaces.  only lines with less than 10 asterisks are altered.\n     asterisks are changed to spaces in columns 8 through 12.\n\n   -+----1----+-\n     -before-\n      **   this is a line with leading asterisks   **\n     -after-\n      *    this is a line with leading asterisks   **\n\n\n  C zap first b\n\n     for non-comment lines - ie: cobol processing lines -\n     specifying \"zap first b\" will replace any characters in\n     position 1 through 6 with spaces.\n\n\n  C zap last b\n\n     for non-comment lines - ie: cobol processing lines -\n     specifying \"zap last b\" will replace any characters in\n     position 73 through 80 with spaces, unless the \"doc last\"\n     option is specified (below)\n\n\n  C doc last b\n\n     for non-comment lines - ie: cobol processing lines -\n     if position 73-80 is blank:\n       if COBNEAT changed the record\n           place \"cobneat \" into positions 73-80\n     if position 73-80 is not blank:\n       if \"zap last b\" is specified:\n         if COBNEAT changed the record\n             place \"cobneat \" into positions 73-80\n         otherwise\n             blank out positions 73-80\n       if \"zap last b\" is not specified:\n           leave positions 73-80 unaltered: to still try to flag\n           a changed record while preserving comments in positions\n           73-80, see \"doc last x ##\" below\n\n     this allows for flagging records changed by COBNEAT,\n     either all changed records if \"zap last b\" is specified,\n     or only for changed records when position 73 - 80 was already\n     blank.\n\n\n  C doc last x ##\n\n     ## allows you to specify position 73 through 80\n\n     for non-comment lines - ie: cobol processing lines -\n     if position 73 - 80 is blank:\n       if COBNEAT changed the record\n           place whatever character follows \"doc last\" into\n           position ## of the changed record\n     if position 73 - 80 is not blank:\n       if \"zap last b\" is specified:\n         if COBNEAT changed the record\n             blank out positions 73-80, then\n             place whatever character follows \"doc last\" into\n             position ## of the changed record\n         otherwise\n             blank out positions 73-80\n       if \"zap last b\" is NOT specified:\n         if COBNEAT changed the record\n             place whatever character follows \"doc last\" into\n             position ## of the changed record only if there is space\n             to either side of that position\n             if position is 73, then position 74 must be blank\n             if position is 80, then position 79 must be blank\n\n     this allows for flagging records changed by COBNEAT,\n     either all changed records if \"zap last b\" is specified,\n     or only for changed records when position 73 - 80 contains\n     spaces near the specified position.\n\n     for example, if you use positions 73 through 78 to document\n     changes to programs then you could still place a percent sign\n     at position 80 whenever COBNEAT changed a record by specifying:\n     \"doc last % 80\"\n\n\n  C zap first c\n\n     in comment lines only,\n     specifying \"zap first c\" will replace any characters in\n     position 1 through 6 with spaces.\n\n\n  C zap last c\n\n     in comment lines only,\n     specifying \"zap last c\" will replace any characters in\n     position 73 through 80 with spaces.\n\n\n  C renum par\n\n     specifying \"renum par\" will tell COBNEAT to renumber\n     cobol paragraph names.  only paragraphs starting with a\n     number are renumbered.\n\n     using this option causes the program to loop through your\n     source program a second time - this may slightly increase\n     runtimes.\n\n     up to 500 paragraphs are renumbered.  If there are more than\n     that in your program or programs then those beyond 500\n     will not be altered.\n\n     if looping through an extract of a library with multiple\n     programs, or if you have multiple programs concatenated\n     in the COBIN DD definition:\n       for each program the increment numbering restarts at zero,\n       but each unique paragraph prefix name within that program\n       still occupies a position in the paragraph renum table,\n       and the max is 500 entries. if renumbering, try to limit the\n       number of programs to keep within the 500 paragraph limit.\n\n       test switch = \"T\"\n\n       you can accomplish this by running COBNEAT with test\n       switch set to 'T'.  this will generate a table listing\n       without changing things - and it will tell you the last\n       program and line where the table filled-up.  if the table\n       filled within your 15th program then run again with 14 and\n       start the next batch with the 15th.\n\n       if you run COBNEAT, replace the source program(s) with those\n       altered by COBNEAT, and then run again with the program(s) in\n       the same order as they were before then COBNEAT will calculate\n       the same paragraph names as it did before.\n       when the 500 slot internal table is full, COBNEAT will\n       crunch the internal table down (removing duplicate old/new\n       paragraph names) and then start generating new steps, up to\n       another 500 paragraph prefixes.  thus with multiple passes\n       you can renumber a very large program or multiple programs.\n\n     COBNEAT also attempts to replace paragraph references within\n     comments if the number matches a paragraph number and:\n       -  if the paragraph number includes a dash or\n       -  if the number is the first word in the comment\n          and is six characters or less in length\n          -and- the number matches the probable next paragraph\n          number\n     otherwise COBNEAT might inadvertently replace legitimate\n     numbers unrelated to paragraph names with different values.\n\n   -+----1----+-\n     -before-\n      *    1200 calc stuff\n      *    we add 1200 here to calculate moon trajectory\n      *    add this in 1200-CALC-STUFF\n       1200-CALC-STUFF.\n           ADD 1200                           TO WS-FIELD.\n\n     -after-\n      *    0400- calc stuff\n      *    we add 1200 here to calculate moon trajectory\n      *    add this in 0400-CALC-STUFF\n       0400-CALC-STUFF.\n           ADD 1200                           TO WS-FIELD.\n\n     -program does not do this-\n      *    0400- calc stuff\n      *    we add 0400 here to calculate moon trajectory\n      *    add this in 0400-CALC-STUFF\n       0400-CALC-STUFF.\n           ADD 0400                           TO WS-FIELD.\n\n     the renumber process does not attempt to group numbers\n     based on location in the program - ie: pre-and-post sort\n     groups. however, the renumber process does keep number\n     prefixes together - for example, all paragraphs beginning\n     with 0400- will be altered to the same new number.\n\n     after renumbering using COBNEAT you could still go back and\n     change the first character of paragraph names to separate\n     things as needed, and correct any issues with comments etc.\n\n\n  C renum pincr                         0100\n\n     specifying \"renum pincr\" overrides the default paragraph increment\n     value of 0100.  specifying zero defaults to 0100.\n     Any number greater than 1000 is set to 1000.\n\n     if the calculated paragraph name is longer than four characters\n     then it will expand to five and then six characters:\n     1000-CALC-MOVE\n     23000-CALC-MOVE\n     423000-CALC-MOVE\n\n     for example, if increment is 0100 then COBNEAT will number\n     paragraphs as follows:\n     0000-\n     0100-\n     .\n     .\n     0900-\n     1000-\n     1100-\n     1200-\n     .\n     .\n     9900-\n     10000-\n     10100-\n     10200-\n\n\n  C renum init                          0005\n\n     specifying \"renum init\" overrides the default paragraph prefix\n     length of 0005.  this indicates the length of the initial paragraph\n     prefix.  values can be 0002 through 0005.\n     ie: 0002 would generate a prefix of 0-\n     ie: 0005 would generate a prefix of 0000-\n\n     as the increment value (above) is applied, the prefix length\n     changes as described in \"renum pincr\".\n\n     inrement 0100   renum init 0002\n     -------------   ---------------\n     0-COBOL-PARAGRAPH-A\n     100-COBOL-PARAGRAPH-B\n     200-COBOL-PARAGRAPH-C\n     300-COBOL-PARAGRAPH-D\n     400-COBOL-PARAGRAPH-E\n\n\n     inrement 0100   renum init 0005\n     -------------   ---------------\n     0000-COBOL-PARAGRAPH-A\n     0100-COBOL-PARAGRAPH-B\n     0200-COBOL-PARAGRAPH-C\n     0300-COBOL-PARAGRAPH-D\n     0400-COBOL-PARAGRAPH-E\n\n\n  ==============\n  \"R\" parm items can be entered in upper or lower case\n  ==============\n\n     \"R\" parms are used to specify cobol reserved words.\n     generally, lines not starting with these words are ignored -\n     items are not moved to \"orig loc.\"  the exception to this\n     is for lines following \"TO\" and \"DISPLAY\" statements.\n\n     -before-\n           MOVE 20              TO WS-FIELD1\n                           WS-FIELD3\n                           WS-FIELD4\n\n     -after-\n           MOVE 20                           TO WS-FIELD1\n                                                WS-FIELD3\n                                                WS-FIELD4\n\n     if COBNEAT is moving words to the wrong location then you\n     might try removing the word from the \"R\" list, or adding it.\n\n*\n*\n*   enter up to 200 reserved words\n*\n*   Cobol reserved word.  If not specified, items are not selected\n*   |     for positional adjustment.\n*   |\n* - ----+----+----+----+----+----+-- -- ------\n  R ACCEPT\n  R ACCESS\n  R ADD\n  R AND\n  R ASSIGN\n  R DEPENDING\n  R DISPLAY\n  R DIVIDE\n  R EJECT\n  R ELSE\n  R END-EVALUATE\n  R END-IF\n  R END-PERFORM\n  etc\n\n\n  ==============\n  \"W\" parm items can be entered in upper or lower case\n  ==============\n\n     \"W\" parms are used to specify words to convert back to\n     upper-case within comments converted to lower-case.\n     although this is merely cosmetic, it seems to make programs\n     more readable.\n\n     the descriptions below are fairly straight-forward.\n*\n*   if 'comment lc' specified,\n*     convert these words within Cobol comments to uppercase\n*\n*   enter up to 200 items\n*\n*  bar helps show if spaces precede word\n*  |\n*  |                                    F=first character uppercase\n*  |                                    W=whole word (and connected\n*  |                            search  |   words) uppercase\n*  |word                        length  |\n*  ||                                |  |\n* - ----+----+----+----+----+----+-- -- ------\n  W| ftp                             04 W\n  W| gdg                             04 W\n  W| gm                              04 W\n  W| vsam                            06 W\n  W| chrys                           06 F\n  W| ford                            06 F\n  W| honda                           06 F\n  W| note:                           06 F\n\n\n  ==============\n  \"D\" parm items can be entered in upper or lower case\n  ==============\n\n     \"D\" parms are used to limit program display statements\n     to those within the specified record range.  this allows\n     limiting the impact of possible excessive display statements\n     when processing a large file.\n\n     if \"T\" is passed in the linkage section parm,\n     renumbering stats display but no program alteration occurs.\n\n     if \"1\" is passed in the linkage section parm,\n     basic program display fields are generated - ie: when altering\n     a record or renumbering a paragraph\n\n     if \"2\" is passed in the linkage section parm,\n     it is the same as specifying \"1\" but also shows a ruler line.\n\n     if \"3\" is passed in the linkage section parm,\n     more detailed display statements are generated.\n\n  ==============\n  \"S\" parm items can be entered in upper or lower case\n  ==============\n\n     \"S\" parms are used to limit which input file records are\n     actually altered.  for example, to be certain only working-\n     storage fields are altered you could specify which record\n     contains the PROCEDURE DIVISION line and have the program\n     stop making alterations at that spot.\n\n     all records are still written to the output file, but if\n     \"S\" records were specified then only the records falling within\n     the specified range are altered before being written.\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COBNRUN": {"ttr": 4617, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00@\\x01\\x19\\x01\\x7f\\x01\\x192?\\x11\\x04\\x00,\\x00!\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2019-01-17T00:00:00", "modifydate": "2019-11-19T11:04:40", "lines": 44, "newlines": 33, "modlines": 0, "user": "IANNONE"}, "text": "/*PRIORITY     01\n//useridJ  JOB (5000,'COBNEAT alter Cobol item alignment '),\n//             'Cobol cleanup',\n//             CLASS=x,REGION=30M,\n//             MSGCLASS=x,\n//             MSGLEVEL=(1,1)\n//JOBLIB   DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//*        DD  DISP=SHR,DSN=SYS2.LANGUAGE.ENVIRONM.RUN\n//*-------------------------------------------------\n//NEAT     PROC\n//*-------------------------------------------------\n//S010     EXEC PGM=IEFBR14,REGION=5120K\n//SYSPRINT DD  SYSOUT=*\n//DASD01   DD  DSN=userid.ISPF.COBOL.NEW,\n//             DISP=(MOD,DELETE,DELETE),\n//             SPACE=(TRK,(1,1)),UNIT=LOFDA\n//*-------------------------------------------------\n//*\n//*  Align cobol lines\n//*\n//*        T = only show renum table - no changes are made\n//*        1 = show basic display statements\n//*        2 = show basic display statements and ruler\n//*        3 = show maximum display statements\n//*        |\n//*  PARM='x         '\n//*\n//*-------------------------------------------------\n//S020     EXEC PGM=COBNEAT,\n//             COND=(0,NE),\n//             PARM='&TST.         /'\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//PARM01   DD  DISP=SHR,DSN=userid.ISPF.FILE488(COBNEAT1)\n//COBIN    DD  DISP=SHR,DSN=userid.ISPF.FILE488(program)\n//COBOUT   DD  DSN=userid.ISPF.COBOL.NEW,\n//             DISP=(NEW,CATLG,DELETE),\n//             SPACE=(TRK,(10,10)),UNIT=unit,\n//             RECFM=FB,LRECL=80,BLKSIZE=24000\n//*--------------------------------------\n//         PEND\n//J010     EXEC NEAT,TST=N\n//*-------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CXPARM": {"ttr": 4619, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x005\\x01\\x19\\x07O\\x01\\x192/\\x11\\x02\\x00\\xb2\\x00\\xb9\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-15T00:00:00", "modifydate": "2019-11-18T11:02:35", "lines": 178, "newlines": 185, "modlines": 0, "user": "IANNONE"}, "text": "*\n**\n***   THIS PARM IS USED BY MIS0400B FOR MOST COMPILE PROCEDURES.\n***   ENTER UP TO 120 TESTS PER COBOL TYPE.\n**\n*\n*   COBOL TYPE FOR WHICH YOU ARE TESTING, OR 'ALL'\n*   |\n*   |     C    = INCLUDE COMMENTED LINES IN SEARCH.  'C' ENTRIES\n*   |            MUST BE PLACED AT THE TOP OF THIS LIST.\n*   |     F    = SEARCH FOR STRING AT FRONT OF LINE\n*   |     W    = SEARCH FOR STRING IN WHOLE LINE\n*   |     |\n*   |     |#   = WS-ENVIRON-SW    1=ON, 2=OFF   (SEARCH ONLY OCCURS\n*   |     |#   = WS-WORKING-SW    3=ON, 4=OFF    WHILE CONDITION IS\n*   |     |#   = WS-LINKAGE-SW    5=ON, 6=OFF    TRUE)\n*   |     |#   = WS-PROCEDURE-SW  7=ON, 8=OFF\n*   |     ||\n*   |     ||N  = DO NOT TERMINATE MIS0400B WHEN FOUND\n*   |     |||\n*   |     |||Y = ERROR MESSAGE IF NOT FOUND IN PROGRAM\n*   |     ||||\n*   |     |||| LENGTH OF DATA STRING\n*   |     |||| |\n*   |     |||| |  POSITION OF DATA STRING (00 = RCD SEARCHED)\n*   |     |||| |  |\n*   |     |||| |  |  DATA STRING          MESSAGE\n*-------- ---- -- -- -------------------- ------------------------------\n ALL      C2NY 03 08 @@@                  @@@ COMMENT MISSING\n ALL      W7N  07 00  TO EIB              CREATE WS-EIBXXXXX AND USE\n COBOLII  F2NY 06 00  TITLE               TITLE STATEMENT MISSING\n COBOLII  F7   09 00  EXAMINE             EXAMINE STATEMENT FOUND\n COBOLII  F7   11 00  TRANSFORM           TRANSFORM STATEMENT FOUND\n COBOLII  W7   10 00 'STV0100B'           USE STV0400B INSTEAD\n COBOLII  W7   10 00 'STV0130B'           USE STV0410B INSTEAD\n COBOLII  W7   10 00 'STV0135B'           USE STV0333B INSTEAD\n COBOLII  W7   10 00 'STV0140B'           USE STV0333B INSTEAD\n COBOLII  W7   10 00 'STV0150B'           USE STV0270B INSTEAD\n COBOLII  W7   10 00 'STV0155B'           USE STV0420B INSTEAD\n COBOLII  W7   10 00 'STV0165B'           USE STV0320B INSTEAD\n COBOLII  W7   10 00 'STV0170B'           USE STV0280B INSTEAD\n COBOLII  W7   10 00 'STV0185B'           USE STV0290B INSTEAD\n COBOLII  W7   10 00 'STV0195B'           USE STV0295B INSTEAD\n COBOLII  W7   10 00 'STV0205B'           USE STV0405B INSTEAD\n COBOLII  W7   10 00 'STV0330B'           USE STV0280B INSTEAD\n COBOLII  W7   10 00 'STV0375B'           USE STV0380B INSTEAD\n COBOLII  W7   14 00  CURRENT-DATE        CURRENT-DATE FOUND\n COBOLII  W7N  10 00 'STV0300B'           CONSIDER USING STV0410B\n COBOLII  W7N  10 00 'STV0305B'           CONSIDER USING STV0405B\n COBOLII  W7N  10 00 'STV0310B'           CONSIDER USING STV0420B\n COBOLIIO F1   09 00  DISPLAY             DISPLAY STATEMENT FOUND\n COBOLIIO F2NY 06 00  TITLE               TITLE STATEMENT MISSING\n COBOLIIO F7   09 00  EXAMINE             EXAMINE STATEMENT FOUND\n COBOLIIO F7   11 00  TRANSFORM           TRANSFORM STATEMENT FOUND\n COBOLIIO W7   10 00 'STV0130B'           USE STV1410B INSTEAD\n COBOLIIO W7   10 00 'STV0135B'           USE STV1335B INSTEAD\n COBOLIIO W7   10 00 'STV0140B'           USE STV1335B INSTEAD\n COBOLIIO W7   10 00 'STV0155B'           USE STV1420B INSTEAD\n COBOLIIO W7   10 00 'STV0165B'           USE STV1320B INSTEAD\n COBOLIIO W7   10 00 'STV0170B'           USE STV0280B INSTEAD\n COBOLIIO W7   10 00 'STV0185B'           USE STV1290B INSTEAD\n COBOLIIO W7   10 00 'STV0195B'           USE STV1295B INSTEAD\n COBOLIIO W7   10 00 'STV0205B'           USE STV1405B INSTEAD\n COBOLIIO W7   10 00 'STV0290B'           USE STV1290B INSTEAD\n COBOLIIO W7   10 00 'STV0295B'           USE STV1295B INSTEAD\n COBOLIIO W7   10 00 'STV0300B'           USE STV1410B INSTEAD\n COBOLIIO W7   10 00 'STV0305B'           USE STV1405B INSTEAD\n COBOLIIO W7   10 00 'STV0310B'           USE STV1420B INSTEAD\n COBOLIIO W7   10 00 'STV0320B'           USE STV1320B INSTEAD\n COBOLIIO W7   10 00 'STV0330B'           USE STV0280B INSTEAD\n COBOLIIO W7   10 00 'STV0335B'           USE STV1335B INSTEAD\n COBOLIIO W7   10 00 'STV0350B'           USE STV1350B INSTEAD\n COBOLIIO W7   10 00 'STV0375B'           USE STV1380B INSTEAD\n COBOLIIO W7   10 00 'STV0380B'           USE STV1380B INSTEAD\n COBOLIIO W7   10 00 'STV0400B'           USE STV1400B INSTEAD\n COBOLIIO W7   10 00 'STV1150B'           USE STV0270B INSTEAD\n COBOLIIO W7   14 00  CURRENT-DATE        CURRENT-DATE FOUND\n COBOLIIO W7N  10 00 'STV1300B'           CONSIDER USING STV1410B\n COBOLIIO W7N  10 00 'STV1305B'           CONSIDER USING STV1405B\n COBOLIIO W7N  10 00 'STV1310B'           CONSIDER USING STV1420B\n COB390   F2NY 06 00  TITLE               TITLE STATEMENT MISSING\n COB390   W7   10 00 'STV0100B'           USE STV0400B INSTEAD\n COB390   W7   10 00 'STV0130B'           USE STV0410B INSTEAD\n COB390   W7   10 00 'STV0135B'           USE STV0333B INSTEAD\n COB390   W7   10 00 'STV0140B'           USE STV0333B INSTEAD\n COB390   W7   10 00 'STV0155B'           USE STV0420B INSTEAD\n COB390   W7   10 00 'STV0165B'           USE STV0320B INSTEAD\n COB390   W7   10 00 'STV0170B'           USE STV0280B INSTEAD\n COB390   W7   10 00 'STV0185B'           USE STV0290B INSTEAD\n COB390   W7   10 00 'STV0195B'           USE STV0295B INSTEAD\n COB390   W7   10 00 'STV0205B'           USE STV0405B INSTEAD\n COB390   W7   10 00 'STV0330B'           USE STV0280B INSTEAD\n COB390   W7   10 00 'STV0375B'           USE STV0380B INSTEAD\n COB390   W7   14 00  CURRENT-DATE        CURRENT-DATE FOUND\n COB390   W7N  10 00 'STV0300B'           CONSIDER USING STV0410B\n COB390   W7N  10 00 'STV0305B'           CONSIDER USING STV0405B\n COB390   W7N  10 00 'STV0310B'           CONSIDER USING STV0420B\n COB390O  F1   09 00  DISPLAY             DISPLAY STATEMENT FOUND\n COB390O  F2NY 06 00  TITLE               TITLE STATEMENT MISSING\n COB390O  W7   10 00 'STV0130B'           USE STV1410B INSTEAD\n COB390O  W7   10 00 'STV0135B'           USE STV1335B INSTEAD\n COB390O  W7   10 00 'STV0140B'           USE STV1335B INSTEAD\n COB390O  W7   10 00 'STV0155B'           USE STV1420B INSTEAD\n COB390O  W7   10 00 'STV0165B'           USE STV1320B INSTEAD\n COB390O  W7   10 00 'STV0170B'           USE STV0280B INSTEAD\n COB390O  W7   10 00 'STV0185B'           USE STV1290B INSTEAD\n COB390O  W7   10 00 'STV0195B'           USE STV1295B INSTEAD\n COB390O  W7   10 00 'STV0205B'           USE STV1405B INSTEAD\n COB390O  W7   10 00 'STV0290B'           USE STV1290B INSTEAD\n COB390O  W7   10 00 'STV0295B'           USE STV1295B INSTEAD\n COB390O  W7   10 00 'STV0300B'           USE STV1410B INSTEAD\n COB390O  W7   10 00 'STV0305B'           USE STV1405B INSTEAD\n COB390O  W7   10 00 'STV0310B'           USE STV1420B INSTEAD\n COB390O  W7   10 00 'STV0320B'           USE STV1320B INSTEAD\n COB390O  W7   10 00 'STV0330B'           USE STV0280B INSTEAD\n COB390O  W7   10 00 'STV0335B'           USE STV1335B INSTEAD\n COB390O  W7   10 00 'STV0350B'           USE STV1350B INSTEAD\n COB390O  W7   10 00 'STV0375B'           USE STV1380B INSTEAD\n COB390O  W7   10 00 'STV0380B'           USE STV1380B INSTEAD\n COB390O  W7   10 00 'STV0400B'           USE STV1400B INSTEAD\n COB390O  W7   10 00 'STV1150B'           USE STV0270B INSTEAD\n COB390O  W7   14 00  CURRENT-DATE        CURRENT-DATE FOUND\n COB390O  W7N  10 00 'STV1300B'           CONSIDER USING STV1410B\n COB390O  W7N  10 00 'STV1305B'           CONSIDER USING STV1405B\n COB390O  W7N  10 00 'STV1310B'           CONSIDER USING STV1420B\n VSCOBOL  F2   06 00  TITLE               TITLE STATEMENT FOUND\n VSCOBOL  F7   09 00  INSPECT             INSPECT STATEMENT FOUND\n VSCOBOL  F7   10 00  EVALUATE            EVALUATE STATEMENT FOUND\n VSCOBOL  W7   10 00 'MIS0540B'           MIS0540B IS COBOL II\n VSCOBOL  W7   10 00 'STV0270B'           USE STV0150B INSTEAD\n VSCOBOL  W7   10 00 'STV0280B'           USE STV0170B INSTEAD\n VSCOBOL  W7   10 00 'STV0290B'           USE STV0185B INSTEAD\n VSCOBOL  W7   10 00 'STV0295B'           USE STV0195B INSTEAD\n VSCOBOL  W7   10 00 'STV0300B'           USE STV0130B INSTEAD\n VSCOBOL  W7   10 00 'STV0305B'           USE STV0205B INSTEAD\n VSCOBOL  W7   10 00 'STV0310B'           USE STV0155B INSTEAD\n VSCOBOL  W7   10 00 'STV0320B'           USE STV0165B INSTEAD\n VSCOBOL  W7   10 00 'STV0330B'           USE STV0170B INSTEAD\n VSCOBOL  W7   10 00 'STV0335B'           USE STV0135B INSTEAD\n VSCOBOL  W7   10 00 'STV0380B'           USE STV0375B INSTEAD\n VSCOBOL  W7   10 00 'STV0385B'           STV0385B IS COBOL II\n VSCOBOL  W7   10 00 'STV0390B'           STV0390B IS COBOL II\n VSCOBOL  W7   10 00 'STV0400B'           USE STV0100B INSTEAD\n VSCOBOL  W7   10 00 'STV0410B'           USE STV0130B INSTEAD\n VSCOBOL  W7   10 00 'STV0420B'           USE STV0155B INSTEAD\n VSCOBOL  W7   10 00 'STV0805B'           STV0805B IS COBOL II\n VSCOBOL  W7N  10 00 'STV0130B'           CONSIDER USING STV0131B\n VSCOBOL  W7N  10 00 'STV0205B'           CONSIDER USING STV0215B\n VSCOBOLO F1   09 00  DISPLAY             DISPLAY STATEMENT FOUND\n VSCOBOLO F2   06 00  TITLE               TITLE STATEMENT FOUND\n VSCOBOLO F7   08 00  ACCEPT              ACCEPT STATEMENT FOUND\n VSCOBOLO F7   08 00  STRING              STRING STATEMENT FOUND\n VSCOBOLO F7   09 00  EXHIBIT             EXHIBIT STATEMENT FOUND\n VSCOBOLO F7   09 00  INSPECT             INSPECT STATEMENT FOUND\n VSCOBOLO F7   09 00  STOP RUN            STOP RUN STATEMENT FOUND\n VSCOBOLO F7   10 00  EVALUATE            EVALUATE STATEMENT FOUND\n VSCOBOLO F7   10 00  UNSTRING            UNSTRING STATEMENT FOUND\n VSCOBOLO W6   14 00  OCCURS DEPEND       OCCURS DEPENDING ON FOUND\n VSCOBOLO W7   10 00 'MIS0540B'           MIS0540B IS COBOL II\n VSCOBOLO W7   10 00 'STV0150B'           USE STV1150B INSTEAD\n VSCOBOLO W7   10 00 'STV0270B'           USE STV1150B INSTEAD\n VSCOBOLO W7   10 00 'STV0280B'           USE STV0170B INSTEAD\n VSCOBOLO W7   10 00 'STV0290B'           USE STV0185B INSTEAD\n VSCOBOLO W7   10 00 'STV0295B'           USE STV0195B INSTEAD\n VSCOBOLO W7   10 00 'STV0300B'           USE STV0130B INSTEAD\n VSCOBOLO W7   10 00 'STV0305B'           USE STV0205B INSTEAD\n VSCOBOLO W7   10 00 'STV0310B'           USE STV0155B INSTEAD\n VSCOBOLO W7   10 00 'STV0320B'           USE STV0165B INSTEAD\n VSCOBOLO W7   10 00 'STV0330B'           USE STV0170B INSTEAD\n VSCOBOLO W7   10 00 'STV0335B'           USE STV0135B INSTEAD\n VSCOBOLO W7   10 00 'STV0380B'           USE STV0375B INSTEAD\n VSCOBOLO W7   10 00 'STV0385B'           STV0385B IS COBOL II\n VSCOBOLO W7   10 00 'STV0390B'           STV0390B IS COBOL II\n VSCOBOLO W7   10 00 'STV0410B'           USE STV0130B INSTEAD\n VSCOBOLO W7   10 00 'STV0420B'           USE STV0155B INSTEAD\n VSCOBOLO W7   10 00 'STV0805B'           STV0805B IS COBOL II\n VSCOBOLO W7   10 00 'STV0270B'           USE STV1150B INSTEAD\n VSCOBOLO W7   14 00  CURRENT-DATE        CURRENT-DATE FOUND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CX002B": {"ttr": 4868, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x02\\x01\\x19\\x15\\x0f\\x01\\x192?\\x11\\x05\\x009\\x009\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-05-30T00:00:00", "modifydate": "2019-11-19T11:05:02", "lines": 57, "newlines": 57, "modlines": 0, "user": "IANNONE"}, "text": "//CX002B   PROC SOUTC='X',\n//             CPYBK='SYSP',\n//             LEVEL='COBOLII ',\n//             LNKPARM=,\n//             PROG=,\n//             NAME=,\n//             COBPARM=,\n//             WORK='V3330'\n//*-----------------------------------------------\n//*   COBOL II BATCH COMPILER\n//*-----------------------------------------------\n//COB2     EXEC PGM=IGYCRCTL,\n//             REGION=5120K,\n//             PARM='OBJ,&COBPARM,APOST,LIB,NODYN'\n//STEPLIB  DD  DSN=SYS1.COB2COMP,DISP=SHR\n//SYSIN    DD  DSN=&NAME..ISPF.LIBRARY(&PROG),DISP=SHR\n//SYSLIB   DD  DSN=&CPYBK..CPYBKLIB,DISP=SHR\n//         DD  DSN=SYSP.CPYBKLIB,DISP=SHR\n//         DD  DSN=PLSMS.SMSSM00L.P0000.COBLIB,DISP=SHR\n//SYSPRINT DD  SYSOUT=&SOUTC\n//SYSLIN   DD  DSN=&&LOADSET,\n//             UNIT=&WORK,\n//             DISP=(MOD,PASS),\n//             SPACE=(TRK,(5,5))\n//SYSUT1   DD  UNIT=&WORK,SPACE=(CYL,(1,1))\n//SYSUT2   DD  UNIT=&WORK,SPACE=(CYL,(1,1))\n//SYSUT3   DD  UNIT=&WORK,SPACE=(CYL,(1,1))\n//SYSUT4   DD  UNIT=&WORK,SPACE=(CYL,(1,1))\n//SYSUT5   DD  UNIT=&WORK,SPACE=(CYL,(1,1))\n//SYSUT6   DD  UNIT=&WORK,SPACE=(CYL,(1,1))\n//SYSUT7   DD  UNIT=&WORK,SPACE=(CYL,(1,1))\n//*-----------------------------------------------\n//CHECK    EXEC PGM=MIS0400B,\n//             REGION=5120K,\n//             COND=(5,LT,COB2),\n//             PARM='&LEVEL&PROG/'\n//SYSOUT   DD  SYSOUT=X\n//SYSUDUMP DD  SYSOUT=D\n//SYSDBOUT DD  SYSOUT=X\n//SYSABOUT DD  SYSOUT=X\n//SYSPRINT DD  SYSOUT=X\n//INPROG   DD  DSN=*.COB2.SYSIN,DISP=SHR\n//PARM01   DD  DISP=SHR,DSN=userid.ISPF.LIBRARY.F488(CXPARM)\n//*----------------------------------------------------\n//LKED     EXEC PGM=IEWL,\n//             COND=((5,LT,COB2),(0,NE,CHECK)),\n//             REGION=5120K,\n//             PARM='&LNKPARM,LIST,XREF,LET,MAP'\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD  DSN=&NAME..ISPF.OBJ(&PROG),DISP=SHR\n//SYSLIB   DD  DSN=&NAME..ISPF.OBJ,DISP=SHR\n//         DD  DSN=SYS1.COB2LIB,DISP=SHR\n//         DD  DSN=SYS2.LINKLIB,DISP=SHR\n//         DD  DSN=PLSMS.SMBSM00L.P0000.LOAD,DISP=SHR\n//SYSUT1   DD  UNIT=&WORK,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=&SOUTC\n//*-----------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CX003B": {"ttr": 4870, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00\\x02\\x01\\x180/\\x01\\x19\\x07O\\tY\\x00>\\x00!\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "2018-10-29T00:00:00", "modifydate": "2019-03-15T09:59:02", "lines": 62, "newlines": 33, "modlines": 0, "user": "IANNONE"}, "text": "//useridC  JOB (861310,'Z/OS batch COBOL'),\n//             'Z/OS batch COBOL',\n//             REGION=5120K,\n//             CLASS=x,\n//             MSGCLASS=x,\n//             MSGLEVEL=(1,1)\n//*-------------------------------------------------\n//*  COBOL FOR Z/OS BATCH COMPILER\n//*-------------------------------------------------\n//CX003B   PROC SOUTC='*',\n//             PROG=,\n//             CPYBK=,\n//             NAME=,\n//             COBPARM=,\n//             LNKPARM=\n//*-----------------------------------------------\n//*        Enterprise COBOL for z/OS\n//*-----------------------------------------------\n//COBOL    EXEC PGM=IGYCRCTL,\n//             REGION=20M,\n//             PARM='&COBPARM,LIB'\n//SYSIN    DD  DSN=&NAME..ISPF.FILE488(&PROG),DISP=SHR\n//SYSLIB   DD  DISP=SHR,DSN=&CPYBK..COPYLIB\n//         DD  DSN=&NAME..ISPF.FILE488,DISP=SHR\n//SYSPRINT DD  SYSOUT=&SOUTC\n//SYSLIN   DD  DSN=&&LOADSET,\n//             UNIT=VIO,\n//             DISP=(MOD,PASS),\n//             SPACE=(TRK,(5,5))\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSUT2   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSUT3   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSUT4   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSUT5   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSUT6   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSUT7   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//*-----------------------------------------------\n//*        Link Edit\n//*-----------------------------------------------\n//LKED     EXEC PGM=IEWL,\n//             COND=((5,LT,COBOL)),\n//             REGION=20M,\n//             PARM='&LNKPARM,XREF,LIST,LET,MAP'\n//SYSLIB   DD  DISP=SHR,DSN=&NAME..ISPF.OBJ\n//         DD  DISP=SHR,DSN=CEE.SCEELKED\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD  DSN=&NAME..ISPF.OBJ(&PROG),DISP=SHR\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=&SOUTC\n//*-----------------------------------------------\n//         PEND\n//J010     EXEC PROC=CX003B,\n//             NAME=userid,\n//             CPYBK=ENXLTNT,\n//*            COBPARM='OPT,DYNAM,RES',             *CALLED PROGRAMS\n//*            COBPARM='TEST(NONE,SYM,SEPARATE)',   *DEBUG VALUES\n//*            LNKPARM='AMODE=31,RMODE=ANY',\n//*            LEVEL='SKIP    ',\n//*\n//             PROG=program\n//*\n//*-------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DOCCHNG": {"ttr": 4872, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00&\\x01\\x180/\\x01\\x19\\x00/\\tI\\x00\\x06\\x00\\x06\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2018-10-29T00:00:00", "modifydate": "2019-01-02T09:49:26", "lines": 6, "newlines": 6, "modlines": 0, "user": "IANNONE"}, "text": "      * Date changed: MM/DD/2019 Jim Iannone\n      *               XXXXX...\n                      X\n                      X\n                      X\n      ****************************************************************\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DOCCNS1": {"ttr": 4874, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x98(\\x0f\\x00\\x98(\\x0f\\tA\\x00)\\x00\\x13\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-10-07T00:00:00", "modifydate": "1998-10-07T09:41:00", "lines": 41, "newlines": 19, "modlines": 0, "user": "IANNONE"}, "text": "      ****************************************\n      *    SEND A CONSOLE MESSAGE.\n      *    TTTT=TRANSACTION  XXXXXXXX=PROGRAM\n      *    TO HIGHLIGHT, SET WS-PAUSE TO 'P'.\n      *+**************************************\n       01  WS-OUTPUT.\n           05  WS-CONSOLE-MSG.\n               10  WS-PAUSE            PIC  X        VALUE SPACE.\n               10  WS-MSG-ID           PIC  X(13)    VALUE\n                   'TTTTXXXXXXXX '.\n               10  WS-REGION           PIC  X(05)    VALUE SPACE.\n               10  WS-MESSAGE          PIC  X(36)    VALUE SPACE.\n           05  WS-FACILITY             PIC  X(04)    VALUE SPACE.\n           05  WS-TERMINAL-SW          PIC  X        VALUE SPACE.\n\n       0000-\n           EXEC CICS ASSIGN\n               SYSID (WS-REGION)\n               FACILITY (WS-FACILITY)\n           END-EXEC.\n           IF WS-FACILITY = SPACE OR LOW-VALUE\n               OR EIBTRMID = SPACE OR LOW-VALUE\n               MOVE 'N'                      TO WS-TERMINAL-SW.\n\n           MOVE '----+----1----+----2----+----3----+-' TO WS-MESSAGE.\n\n       0000-SEND-MESSAGE.\n           IF WS-TERMINAL-SW = SPACE\n               EXEC CICS SEND\n                   FROM (WS-MESSAGE)\n                   LENGTH (36)\n                   ERASE\n               END-EXEC\n           ELSE\n               EXEC CICS WRITEQ TD\n                   FROM (WS-CONSOLE-MSG)\n                   LENGTH (55)\n                   QUEUE ('CNS1')\n                   NOHANDLE\n               END-EXEC.\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOCCSV": {"ttr": 4876, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x002\\x01\\x19\\tO\\x01\\x193o\\x10\\x19\\x01|\\x01D\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2019-04-04T00:00:00", "modifydate": "2019-12-02T10:19:32", "lines": 380, "newlines": 324, "modlines": 0, "user": "IANNONE"}, "text": "\n      *---------------------------------------\n      *    DOCCSV is used to build CSV delimited files - usually\n      *    for opening in Excel.\n      *    alter WS-CV1-RCD and WS-CV1-RCD-WARN prior to use.\n      *\n      *    Usage:  basically just move your field to WS-CV1-FIELD\n      *    and then PERFORM 6000-ADD-CV1 and it will append it to\n      *    a CSV record.\n      *\n      *    WS-CV1-QUOTE-SW:  set to 'Y' to wrap field in quotes\n      *    WS-CV1-SET-LEN:   force a fixed field length\n      *    WS-CV1-SKIP-DLM:  skip appending delimiter for this field\n      *---------------------------------------\n      *    include CV2 fields if creating more than one .CSV file\n      *---------------------------------------\n\n      *    WS-TALLY and WS-RETURN-CODE are also defined in DOCWSB\n      *    append to regular working storage fields\n      *    05  WS-TALLY                PIC S9(05)    VALUE ZERO.\n      *    05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n\n      *    append to regular subscript fields\n           05  WS-CV1A                 PIC S9(05)    VALUE ZERO.\n           05  WS-CV1B                 PIC S9(05)    VALUE ZERO.\n           05  WS-CV2A                 PIC S9(05)    VALUE ZERO.\n           05  WS-CV2B                 PIC S9(05)    VALUE ZERO.\n\n       01  WS-CSV-FIELDS.\n           05  WS-CV1-LEN              PIC S9(05)    VALUE ZERO.\n           05  WS-CV1-SET-LEN          PIC S9(05)    VALUE ZERO.\n           05  WS-CV1-TMP-LEN          PIC S9(05)    VALUE ZERO.\n           05  WS-CV1-START            PIC S9(05)    VALUE ZERO.\n           05  WS-CV1-QUOTE-SW         PIC  X        VALUE SPACE.\n           05  WS-CV1-SKIP-SW          PIC  X        VALUE SPACE.\n           05  WS-CV1-SKIP-DLM         PIC  X        VALUE SPACE.\n      *    hex X'6B' is a comma ','\n           05  WS-CV1-DELIM            PIC  X        VALUE X'6B'.\n      *    alter these field lengths and values as needed\n           05  WS-CV1-FIELD            PIC  X(60)    VALUE SPACE.\n           05  WS-CV1-RCD              PIC  X(300)   VALUE SPACE.\n      *    05  WS-CV1-RCD-WARN         PIC  9(05)    VALUE 0297.\n           05  WS-CV1-RCD-WARN         PIC  9(05)    VALUE ####.\n\n           05  WS-CV2-LEN              PIC S9(05)    VALUE ZERO.\n           05  WS-CV2-SET-LEN          PIC S9(05)    VALUE ZERO.\n           05  WS-CV2-TMP-LEN          PIC S9(05)    VALUE ZERO.\n           05  WS-CV2-START            PIC S9(05)    VALUE ZERO.\n           05  WS-CV2-QUOTE-SW         PIC  X        VALUE SPACE.\n           05  WS-CV2-SKIP-SW          PIC  X        VALUE SPACE.\n           05  WS-CV2-SKIP-DLM         PIC  X        VALUE SPACE.\n      *    hex X'6B' is a comma ','\n           05  WS-CV2-DELIM            PIC  X        VALUE X'6B'.\n      *    alter these field lengths and values as needed\n           05  WS-CV2-FIELD            PIC  X(60)    VALUE SPACE.\n           05  WS-CV2-RCD              PIC  X(600)   VALUE SPACE.\n      *    05  WS-CV2-RCD-WARN         PIC  9(05)    VALUE 0597.\n           05  WS-CV2-RCD-WARN         PIC  9(05)    VALUE ####.\n\n\n      *==============================================================\n      *    CV1 setup\n      *==============================================================\n\n       0000-PREPARE-CSV-01.\n\n           read new input record...\n\n      *    for each new CV1 record,\n      *    initialize CV1 fields prior to calling 6000-ADD-CV1\n           MOVE 1                             TO WS-CV1B.\n           MOVE SPACE                         TO VVVVVVVV-RCD.\n           MOVE SPACE                         TO WS-CV1-RCD.\n           MOVE SPACE                         TO WS-CV1-SKIP-SW.\n\n           PERFORM 0000-BUILD-CSV-01.\n\n      *    after all the input fields are stacked into WS-CV1-RCD,\n      *    move WS-CV1-RCD to the output record and write out.\n      *\n           MOVE WS-CV1-RCD                    TO VVVVVVVV-RCD.\n           MOVE WS-CV1B                       TO WS-VVVVVVVV-RCD-LEN.\n           SUBTRACT 1 FROM WS-VVVVVVVV-RCD-LEN.\n           PERFORM 1500-WRITE-VVVVVVVV.\n\n       0000-BUILD-CSV-01.\n\n      *    main logic to append fields into WS-CV1-RCD -\n      *    assume this is within a loop or paragraph where desired\n      *    input fields are stacked into the WS-CV1-RCD field\n      *    by calling 6000-ADD-CV1 once for each input field\n\n      *    to force the use of quotes\n      *    MOVE 'Y'                           TO WS-CV1-QUOTE-SW.\n      *    to force field to a set length\n      *    MOVE 20                            TO WS-CV1-SET-LEN.\n\n           MOVE INPUT FIELD 1                 TO WS-CV1-FIELD.\n           PERFORM 6000-ADD-CV1.\n           .\n           .\n           MOVE INPUT FIELD #                 TO WS-CV1-FIELD.\n           PERFORM 6000-ADD-CV1.\n\n      *==============================================================\n      *    CV2 setup\n      *==============================================================\n\n       0000-PREPARE-CSV-02.\n\n           read new input record...\n\n      *    for each new CV2 record,\n      *    initialize CV2 fields prior to calling 6000-ADD-CV2\n           MOVE 1                             TO WS-CV2B.\n           MOVE SPACE                         TO CCCCCCCC-RCD.\n           MOVE SPACE                         TO WS-CV2-RCD.\n           MOVE SPACE                         TO WS-CV2-SKIP-SW.\n\n           PERFORM 0000-BUILD-CSV-02.\n\n      *    after all the input fields are stacked into WS-CV2-RCD,\n      *    move WS-CV2-RCD to the output record and write out.\n      *\n           MOVE WS-CV2-RCD                    TO CCCCCCCC-RCD.\n           MOVE WS-CV2B                       TO WS-CCCCCCCC-RCD-LEN.\n           SUBTRACT 1 FROM WS-CCCCCCCC-RCD-LEN.\n           PERFORM 1500-WRITE-CCCCCCCC.\n\n       0000-BUILD-CSV-02.\n\n      *    main logic to append fields into WS-CV2-RCD -\n      *    assume this is within a loop or paragraph where desired\n      *    input fields are stacked into the WS-CV2-RCD field\n      *    by calling 6000-ADD-CV2 once for each input field\n\n      *    to force the use of quotes\n      *    MOVE 'Y'                           TO WS-CV2-QUOTE-SW.\n      *    to force field to a set length\n      *    MOVE 20                            TO WS-CV2-SET-LEN.\n\n           MOVE INPUT FIELD 1                 TO WS-CV2-FIELD.\n           PERFORM 6000-ADD-CV2.\n           .\n           .\n           MOVE INPUT FIELD #                 TO WS-CV2-FIELD.\n           PERFORM 6000-ADD-CV2.\n\n\n      *==============================================================\n      *    CV1 build output rcd\n      *==============================================================\n\n      *---------------------------------------\n      *    logic to stack a bunch of fields into CSV delimited format\n      *---------------------------------------\n       6000-ADD-CV1.\n           IF WS-RETURN-CODE > ZERO\n               OR WS-CV1-SKIP-SW = 'Y'\n               CONTINUE\n           ELSE\n           IF WS-CV1-FIELD = SPACE\n             IF WS-CV1-SET-LEN > ZERO\n                 ADD WS-CV1-SET-LEN        TO WS-CV1B\n                 IF WS-CV1-SKIP-DLM = SPACE\n                     MOVE WS-CV1-DELIM     TO WS-CV1-RCD(WS-CV1B: 1)\n                     ADD 1                 TO WS-CV1B\n                 ELSE\n                     CONTINUE\n             ELSE\n             IF WS-CV1-SKIP-DLM = SPACE\n                 MOVE WS-CV1-DELIM         TO WS-CV1-RCD(WS-CV1B: 1)\n                 ADD 1                     TO WS-CV1B\n             ELSE\n                 CONTINUE\n           ELSE\n           IF WS-CV1-QUOTE-SW = 'Y'\n               PERFORM 6000-APPEND-W-QUOTE-CV1\n               MOVE SPACE                  TO WS-CV1-QUOTE-SW\n           ELSE\n               MOVE ZERO                   TO WS-TALLY\n               INSPECT WS-CV1-FIELD TALLYING WS-TALLY\n                       FOR ALL WS-CV1-DELIM\n               IF WS-TALLY = ZERO\n                   PERFORM 6000-APPEND-WO-QUOTE-CV1\n               ELSE\n                   PERFORM 6000-APPEND-W-QUOTE-CV1.\n           MOVE ZERO                       TO WS-CV1-SET-LEN.\n           MOVE SPACE                      TO WS-CV1-SKIP-DLM.\n\n           (optional)\n           IF WS-CV1B > WS-CV1-RCD-WARN\n               DISPLAY '**** AAAAAAAA CV1 record length excessive'\n               MOVE +0600                  TO WS-RETURN-CODE.\n\n    ( or )     MOVE 'Y'                    TO WS-CV1-SKIP-SW.\n\n       6000-APPEND-WO-QUOTE-CV1.\n           PERFORM 6000-FIND-START-CV1\n               VARYING WS-CV1A FROM 1 BY 1\n               UNTIL WS-CV1A > LENGTH OF WS-CV1-FIELD.\n           PERFORM 6000-FIND-END-CV1\n               VARYING WS-CV1A FROM LENGTH OF WS-CV1-FIELD BY -1\n               UNTIL WS-CV1A < 1.\n           IF WS-CV1-SKIP-DLM = SPACE\n               MOVE WS-CV1-DELIM           TO WS-CV1-RCD(WS-CV1B: 1)\n               ADD 1                       TO WS-CV1B.\n\n       6000-APPEND-W-QUOTE-CV1.\n           MOVE '\"'                        TO WS-CV1-RCD(WS-CV1B: 1).\n           ADD 1                           TO WS-CV1B.\n           PERFORM 6000-FIND-START-CV1\n               VARYING WS-CV1A FROM 1 BY 1\n               UNTIL WS-CV1A > LENGTH OF WS-CV1-FIELD.\n           PERFORM 6000-FIND-END-CV1\n               VARYING WS-CV1A FROM LENGTH OF WS-CV1-FIELD BY -1\n               UNTIL WS-CV1A < 1.\n           MOVE '\"'                        TO WS-CV1-RCD(WS-CV1B: 1).\n           ADD 1                           TO WS-CV1B.\n           IF WS-CV1-SKIP-DLM = SPACE\n               MOVE WS-CV1-DELIM           TO WS-CV1-RCD(WS-CV1B: 1)\n               ADD 1                       TO WS-CV1B.\n\n       6000-FIND-START-CV1.\n           IF WS-CV1-FIELD(WS-CV1A: 1) = SPACE\n               CONTINUE\n           ELSE\n               MOVE WS-CV1A                TO WS-CV1-START\n               MOVE LENGTH OF WS-CV1-FIELD TO WS-CV1A.\n\n       6000-FIND-END-CV1.\n           IF WS-CV1-FIELD(WS-CV1A: 1) = SPACE\n               CONTINUE\n           ELSE\n               COMPUTE WS-CV1-LEN = (WS-CV1A - WS-CV1-START) + 1\n               PERFORM 6000-ADJUST-CV1-LENGTH\n               IF WS-CV1-START + WS-CV1-LEN - 1 > WS-CV1-RCD-WARN\n\n      (optional)   DISPLAY '**** VVVVVVVV CV1 record length excessive'\n                   DISPLAY '**** POS ' WS-CV1-START ' > '\n                                       WS-CV1-RCD-WARN\n\n      ( and )      MOVE +0600                 TO WS-RETURN-CODE\n      ( or )       MOVE 'Y'                   TO WS-CV1-SKIP-SW\n               ELSE\n                   MOVE WS-CV1-FIELD(WS-CV1-START: WS-CV1-LEN)\n                                              TO WS-CV1-RCD(WS-CV1B: )\n                   ADD WS-CV1-LEN             TO WS-CV1B\n                   MOVE ZERO                  TO WS-CV1A.\n\n      *---------------------------------------\n      *    logic if a specific length is specified\n      *---------------------------------------\n       6000-ADJUST-CV1-LENGTH.\n           IF WS-CV1-SET-LEN > ZERO\n             IF WS-CV1-SET-LEN > WS-CV1-LEN\n                 MOVE ZERO                    TO WS-CV1-TMP-LEN\n                 COMPUTE WS-CV1-TMP-LEN = WS-CV1-SET-LEN - WS-CV1-LEN\n                 ADD WS-CV1-TMP-LEN           TO WS-CV1B\n             ELSE\n                 MOVE WS-CV1-SET-LEN          TO WS-CV1-LEN.\n\n      *==============================================================\n      *    CV2 build output rcd\n      *==============================================================\n\n      *---------------------------------------\n      *    logic to stack a bunch of fields into CSV delimited format\n      *\n      *    file #2\n      *---------------------------------------\n       6000-ADD-CV2.\n           IF WS-RETURN-CODE > ZERO\n               OR WS-CV2-SKIP-SW = 'Y'\n               CONTINUE\n           ELSE\n           IF WS-CV2-FIELD = SPACE\n             IF WS-CV2-SET-LEN > ZERO\n                 ADD WS-CV2-SET-LEN        TO WS-CV2B\n                 IF WS-CV2-SKIP-DLM = SPACE\n                     MOVE WS-CV2-DELIM     TO WS-CV2-RCD(WS-CV2B: 1)\n                     ADD 1                 TO WS-CV2B\n                 ELSE\n                     CONTINUE\n             ELSE\n             IF WS-CV2-SKIP-DLM = SPACE\n                 MOVE WS-CV2-DELIM         TO WS-CV2-RCD(WS-CV2B: 1)\n                 ADD 1                     TO WS-CV2B\n             ELSE\n                 CONTINUE\n           ELSE\n           IF WS-CV2-QUOTE-SW = 'Y'\n               PERFORM 6000-APPEND-W-QUOTE-CV2\n               MOVE SPACE                  TO WS-CV2-QUOTE-SW\n           ELSE\n               MOVE ZERO                   TO WS-TALLY\n               INSPECT WS-CV2-FIELD TALLYING WS-TALLY\n                       FOR ALL WS-CV2-DELIM\n               IF WS-TALLY = ZERO\n                   PERFORM 6000-APPEND-WO-QUOTE-CV2\n               ELSE\n                   PERFORM 6000-APPEND-W-QUOTE-CV2.\n           MOVE ZERO                       TO WS-CV2-SET-LEN.\n           MOVE SPACE                      TO WS-CV2-SKIP-DLM.\n\n           (optional)\n           IF WS-CV2B > WS-CV2-RCD-WARN\n               DISPLAY '**** CCCCCCCC CV2 record length excessive'\n               MOVE +0600                  TO WS-RETURN-CODE.\n\n    ( or )     MOVE 'Y'                    TO WS-CV2-SKIP-SW.\n\n       6000-APPEND-WO-QUOTE-CV2.\n           PERFORM 6000-FIND-START-CV2\n               VARYING WS-CV2A FROM 1 BY 1\n               UNTIL WS-CV2A > LENGTH OF WS-CV2-FIELD.\n           PERFORM 6000-FIND-END-CV2\n               VARYING WS-CV2A FROM LENGTH OF WS-CV2-FIELD BY -1\n               UNTIL WS-CV2A < 1.\n           IF WS-CV2-SKIP-DLM = SPACE\n               MOVE WS-CV2-DELIM           TO WS-CV2-RCD(WS-CV2B: 1)\n               ADD 1                       TO WS-CV2B.\n\n       6000-APPEND-W-QUOTE-CV2.\n           MOVE '\"'                        TO WS-CV2-RCD(WS-CV2B: 1).\n           ADD 1                           TO WS-CV2B.\n           PERFORM 6000-FIND-START-CV2\n               VARYING WS-CV2A FROM 1 BY 1\n               UNTIL WS-CV2A > LENGTH OF WS-CV2-FIELD.\n           PERFORM 6000-FIND-END-CV2\n               VARYING WS-CV2A FROM LENGTH OF WS-CV2-FIELD BY -1\n               UNTIL WS-CV2A < 1.\n           MOVE '\"'                        TO WS-CV2-RCD(WS-CV2B: 1).\n           ADD 1                           TO WS-CV2B.\n           IF WS-CV2-SKIP-DLM = SPACE\n               MOVE WS-CV2-DELIM           TO WS-CV2-RCD(WS-CV2B: 1)\n               ADD 1                       TO WS-CV2B.\n\n       6000-FIND-START-CV2.\n           IF WS-CV2-FIELD(WS-CV2A: 1) = SPACE\n               CONTINUE\n           ELSE\n               MOVE WS-CV2A                TO WS-CV2-START\n               MOVE LENGTH OF WS-CV2-FIELD TO WS-CV2A.\n\n       6000-FIND-END-CV2.\n           IF WS-CV2-FIELD(WS-CV2A: 1) = SPACE\n               CONTINUE\n           ELSE\n               COMPUTE WS-CV2-LEN = (WS-CV2A - WS-CV2-START) + 1\n               PERFORM 6000-ADJUST-CV2-LENGTH\n               IF WS-CV2-START + WS-CV2-LEN - 1 > WS-CV2-RCD-WARN\n\n      (optional)   DISPLAY '**** CCCCCCCC CV2 record length excessive'\n                   DISPLAY '**** POS ' WS-CV2-START ' > '\n                                       WS-CV2-RCD-WARN\n\n      ( and )      MOVE +0600                 TO WS-RETURN-CODE\n      ( or )       MOVE 'Y'                   TO WS-CV2-SKIP-SW\n               ELSE\n                   MOVE WS-CV2-FIELD(WS-CV2-START: WS-CV2-LEN)\n                                              TO WS-CV2-RCD(WS-CV2B: )\n                   ADD WS-CV2-LEN             TO WS-CV2B\n                   MOVE ZERO                  TO WS-CV2A.\n\n      *---------------------------------------\n      *    logic if a specific length is specified\n      *---------------------------------------\n       6000-ADJUST-CV2-LENGTH.\n           IF WS-CV2-SET-LEN > ZERO\n             IF WS-CV2-SET-LEN > WS-CV2-LEN\n                 MOVE ZERO                    TO WS-CV2-TMP-LEN\n                 COMPUTE WS-CV2-TMP-LEN = WS-CV2-SET-LEN - WS-CV2-LEN\n                 ADD WS-CV2-TMP-LEN           TO WS-CV2B\n             ELSE\n                 MOVE WS-CV2-SET-LEN          TO WS-CV2-LEN.\n\n      *---------------------------------------\n      *    end CSV logic\n      *---------------------------------------\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DOCDOC": {"ttr": 5124, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00 \\x01\\x18)\\x9f\\x01\\x180O\\x13E\\x00\\x08\\x00\\x08\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-10-26T00:00:00", "modifydate": "2018-10-31T13:45:20", "lines": 8, "newlines": 8, "modlines": 0, "user": "IANNONE"}, "text": "      *---------------------------------------\n      *    X\n      *---------------------------------------\n      *----sub1-sub2--------------------------\n      *\n      *                 \\\\|//\n      *                 (. .)\n      *-------------oOOo-(_)-oOOo-------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DOCEND": {"ttr": 5126, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00Y\\x01\\x180/\\x01\\x180O\\x13E\\x00\\x02\\x00\\x02\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-10-29T00:00:00", "modifydate": "2018-10-31T13:45:59", "lines": 2, "newlines": 2, "modlines": 0, "user": "IANNONE"}, "text": "\n      ************************************ END XXXXXXXX\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOCHDG1": {"ttr": 5128, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00 \\x01\\x180/\\x01\\x180O\\x13F\\x00:\\x00:\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-10-29T00:00:00", "modifydate": "2018-10-31T13:46:20", "lines": 58, "newlines": 58, "modlines": 0, "user": "IANNONE"}, "text": "      *---------------------------------------\n      *    STANDARD MIS HEADINGS (8.5\" X 14\")\n      *---------------------------------------\n       01  HEADING-LINE-1.\n           05  FILLER                  PIC  X(08)    VALUE 'XXXXXXXX'.\n           05  FILLER                  PIC  XXX      VALUE SPACE.\n           05  H1-DATE                 PIC  X(08)    VALUE SPACE.\n           05  FILLER                  PIC  X(27)    VALUE SPACE.\n           05  H1-HDR1                 PIC  X(40)    VALUE SPACE.\n      *        CONTAINS \"Information and process services\"\n      *        OR FACILITY NAME CENTERED WITH STV0270B\n           05  FILLER                  PIC  X(36)    VALUE SPACE.\n           05  FILLER                  PIC  X(05)    VALUE 'Page '.\n           05  H1-PAGE                 PIC  ZZZZ9    VALUE ZERO.\n\n       01  HEADING-LINE-2.\n           05  FILLER                  PIC  X(11)    VALUE SPACE.\n           05  H2-TIME                 PIC  X(05)    VALUE SPACE.\n           05  FILLER                  PIC  X(30)    VALUE SPACE.\n           05  H2-HDR1                 PIC  X(40)    VALUE\n               'X--------X---------XX---------X--------X'.\n           05  FILLER                  PIC  X(36)    VALUE SPACE.\n           05  H2-RRHH                 PIC  X(04)    VALUE SPACE.\n           05  FILLER                  PIC  X(06)    VALUE SPACE.\n\n       01  HEADING-LINE-3.\n           05  FILLER                  PIC  X(33)    VALUE\n               '                                 '.\n           05  FILLER                  PIC  X(33)    VALUE\n               '                                 '.\n           05  FILLER                  PIC  X(33)    VALUE\n               '                                 '.\n           05  FILLER                  PIC  X(33)    VALUE\n               '                                 '.\n\n       01  HEADING-LINE-4.\n      *    COPY HEADING-LINE-3 AND CHANGE TITLES TO DASHES\n\n       01  DETAIL-LINE-1.\n           05  FILLER                  PIC  X(  )    VALUE\n           05  D1-                     PIC  Z,ZZZ,ZZ9.99-\n                                                     VALUE ZERO.\n           05  FILLER                  PIC  X(  )    VALUE\n\n       01  BREAK-LINE-1.\n           05  FILLER                  PIC  X(  )    VALUE '  * '.\n           05  FILLER                  PIC  X(  )    VALUE\n           05  B1-                     PIC  ZZ,ZZZ,ZZ9.99-\n                                                     VALUE ZERO.\n           05  FILLER                  PIC  X(  )    VALUE\n\n       01  TOTAL-LINE-1.\n           05  FILLER                  PIC  X(  )    VALUE '* * TOTAL'.\n           05  FILLER                  PIC  X(  )    VALUE\n           05  T1-                     PIC  ZZZ,ZZZ,ZZ9.99-\n                                                     VALUE ZERO.\n           05  FILLER                  PIC  X(  )    VALUE SPACE.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DOCHDG2": {"ttr": 5130, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00 \\x01\\x19\\x07O\\x01\\x192/\\x13G\\x00/\\x00,\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-15T00:00:00", "modifydate": "2019-11-18T13:47:20", "lines": 47, "newlines": 44, "modlines": 0, "user": "IANNONE"}, "text": "      ****************************************\n      *    STANDARD MIS HEADINGS (8.5\" X 11\")\n      ****************************************\n       01  HEADING-LINE-1.\n           05  FILLER                  PIC  X(08)    VALUE 'XXXXXXXX'.\n           05  FILLER                  PIC  X(08)    VALUE '  DATE  '.\n           05  H1-DATE                 PIC  X(08)    VALUE SPACE.\n           05  FILLER                  PIC  X(03)    VALUE SPACE.\n           05  FILLER                  PIC  X(26)    VALUE\n               'COMPANY NAME HERE         '.\n           05  FILLER                  PIC  X(17)    VALUE SPACE.\n           05  FILLER                  PIC  X(05)    VALUE 'PAGE '.\n           05  H1-PAGE                 PIC  ZZZZ9    VALUE ZERO.\n\n       01  HEADING-LINE-2.\n      *    05  FILLER                  PIC  X(25)    VALUE SPACE.\n\n           05  FILLER                  PIC  X(10)    VALUE SPACE.\n           05  FILLER                  PIC  X(06)    VALUE 'TIME  '.\n           05  H2-TIME                 PIC  X(05)    VALUE SPACE.\n           05  FILLER                  PIC  X(04)    VALUE SPACE.\n\n           05  FILLER                  PIC  X(30)    VALUE\n               'DEPARTMENT NAME HERE          '.\n           05  FILLER                  PIC  X(25)     VALUE SPACE.\n\n      *\n      *    HDG3-HDR can be centered with STV0270B\n      *\n       01  HEADING-LINE-3.\n           05  FILLER                  PIC  X(20)    VALUE SPACE.\n           05  HDG3-HDR                PIC  X(40)    VALUE\n               'X--------X---------XX---------X--------X'.\n           05  FILLER                  PIC  X(20)    VALUE SPACE.\n\n       01  HEADING-LINE-4.\n           05  FILLER                  PIC  X(40)    VALUE\n               '                                        '.\n           05  FILLER                  PIC  X(40)    VALUE\n               '                                        '.\n\n       01  HEADING-LINE-5.\n      *    COPY HEADING-LINE-4 AND CHANGE TITLES TO DASHES\n\n       01  DETAIL-LINE-1.\n           05  D1-XXXXX                PIC  X(  )    VALUE SPACE.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DOCID": {"ttr": 5132, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00(\\x01\\x180/\\x01 \\x07\\x0f\\x08!\\x00\\x81\\x00-\\x00\\x00\\xd4\\xc9\\xe2\\xf1\\xf4\\xf6@@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2018-10-29T00:00:00", "modifydate": "2020-03-10T08:21:28", "lines": 129, "newlines": 45, "modlines": 0, "user": "MIS146"}, "text": "\n   SHELL for cobol programs - this is the member to start with !\n\n   Members to further include are listed in various areas below.\n\n   After copying members to cobble a rough starting program,\n   \"replace all\" these items:\n\n   XXXXXXXX  with program name\n   AAAAAAAA  with main file name\n   BBBBBBBB  with second/output file name\n   TTTT      with CICS transaction ID\n   FFFFFF    online: main map field\n             batch: main file key\n   MAP010*   map name (* = A & M)\n\n\n   optional:\n          1) write the whole program in lowercase - unformatted etc.\n             when done, convert the entire program to upper case (except\n             any lower-case literals).\n          2) alter program with COBNEAT\n          3) alter select data back to lowercase by running CHNGCASE\n\n\n       TITLE '  XXXXXXXX: program description     '.     recommended\n       IDENTIFICATION DIVISION.                             compiler\n       PROGRAM-ID.    XXXXXXXX.                                 |\n      **********************************************************CX003B\n      *@@@ TTTT C3 XXX...\n      ****************************************************************\n      * Date written: mm/dd/2019\n      * Author      : Jim Iannone\n      *               comments...\n      ****************************************************************\n      * Date changed: mm/dd/yyyy username\n      *               comments...\n      ****************************************************************\n\n      DD**(KEEP FOR CICS)*********************************************\n       ENVIRONMENT DIVISION.\n       DATA DIVISION.\n\n      DD**(KEEP FOR BATCH)********************************************\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n           C01 IS PAGE-TOP.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n      *    ESDS FILE\n      *    SELECT XXXXXXX              ASSIGN TO AS-XXXXXXX\n      *                                ETC...\n\n           SELECT AAAAAAAA             ASSIGN TO AAAAAAAA\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ORGANIZATION IS INDEXED\n                                       ACCESS MODE IS DYNAMIC\n                                       ACCESS MODE IS SEQUENTIAL\n                                       ACCESS MODE IS RANDOM\n                                       RECORD KEY IS FFFFFF\n                                       FILE STATUS IS WS-STAT WS-VSAM.\n\n           SELECT BBBBBBBB             ASSIGN TO BBBBBBBB\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ORGANIZATION IS INDEXED\n                                       ACCESS MODE IS SEQUENTIAL\n                                       RECORD KEY IS BBBBBBBB\n                                       FILE STATUS IS WS-STAT WS-VSAM.\n\n           SELECT PRINT-AAAAAAAA       ASSIGN TO PRINTER.\n\n           SELECT SORT-AAAAAAAA        ASSIGN TO S-SORTWK01.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  AAAAAAAA\n           RECORDING MODE F.\n           BLOCK CONTAINS 0.\n           COPY AAAAAAAA.\n       01  AAAAAAAA-RECORD.\n           05  AAAAAAAA-RCD            PIC  X(80).\n           05  AAAAAAAA-RCD1           REDEFINES AAAAAAAA-RCD.\n               10  AAAAAAAA-FIELD1     PIC  X(04).\n               10  AAAAAAAA-FIELD2     PIC  X(04).\n               10  AAAAAAAA-FILL1      PIC  X(72).\n\n       FD  BBBBBBBB\n           RECORDING MODE F.\n           BLOCK CONTAINS 0.\n           COPY BBBBBBBB.\n\n      *    COPY BBBBBBBB REPLACING ==:XX:== BY ==XXXXXX==.\n      *    COPY FLAT001  REPLACING ==:F1:== BY ==FLAT01==.\n\n       FD  VVVVVVVV\n           RECORDING MODE V\n           RECORD IS VARYING IN SIZE\n                  FROM 1  TO 2000 CHARACTERS\n                  DEPENDING ON WS-VVVVVVVV-RCD-LEN.\n\n       01  VVVVVVVV-RECORD.\n           05  VVVVVVVV-FIELD1         PIC X(0003).\n           05  FILLER                  PIC X(1997).\n      *    if lrecl here is 2000, lrecl on tape is 2004 and vb\n      *    ws-stat may be 00 at eof.  use 'at end' to test eof.\n\n       FD  PRINT-AAAAAAAA\n           RECORDING MODE F.\n       01  PRINT-AREA.\n           05  FILLER                  PIC  X(132).\n\n        COPY 'DOCPARM'       static parm definition\n\n       SD  SORT-AAAAAAAA.\n       01  SORT-RECORD.\n           05  SR-XXXXXXX              PIC  X(  ).\n           05  SR-XXXXXXX              PIC  X(  ).\n           05  SR-XXXXXXX              PIC  X(  ).\n           05  SR-XXXXXXX              PIC  X(  ).\n           05  SR-XXXXXXX              PIC  X(  ).\n\n      DD**************************************************************\n       copy 'DOCWSB' or 'DOCWSO' here\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DOCIDCAM": {"ttr": 5135, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00G\\x01\\x180/\\x01\\x192?\\x11\\x05\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-10-29T00:00:00", "modifydate": "2019-11-19T11:05:47", "lines": 12, "newlines": 12, "modlines": 0, "user": "IANNONE"}, "text": "//*-------------------------------------------------\n//*  DELETE AND DEFINE XXXX.XXXXXX.XXXXXXXX\n//*-------------------------------------------------\n//S000     EXEC PGM=IDCAMS,\n//             REGION=5120K,\n//*            RESTART=J010.S010,\n//             COND=(0,NE)\n//SYSUDUMP DD  SYSOUT=D\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=&APSX..IDCAMS.PARMLIB(XXXXXXXX),    *DELETE/DEFINE\n//             DISP=SHR\n//*-------------------------------------------------\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOCIEBG": {"ttr": 5137, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00&\\x01\\x18)\\x8f\\x01\\x19\\x07O\\t\\x13\\x00\\x18\\x00\\r\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2018-10-25T00:00:00", "modifydate": "2019-03-15T09:13:26", "lines": 24, "newlines": 13, "modlines": 0, "user": "IANNONE"}, "text": "//useridI  JOB (5000,'standard IEBGENER'),\n//             'userid IEBGENER',CLASS=x,MSGCLASS=x,\n//             REGION=5120K\n/*ROUTE  PRINT DEVEL\n/*JOBPARM P=PROC22,S=ANY\n//*-------------------------------------------------\n//*  initial delete\n//*-------------------------------------------------\n//S010     EXEC PGM=IEFBR14\n//DD01     DD  DSN=resulting iebgener file,                   *delete\n//             DISP=(OLD,DELETE,DELETE),\n//             UNIT=SYSDA,SPACE=(TRK,(1,1))\n//*-------------------------------------------------\n//*  standard iebgener\n//*-------------------------------------------------\n//S020     EXEC PGM=IEBGENER\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DUMMY\n//SYSUT1   DD  DISP=SHR,DSN=iebgener input file               *input\n//SYSUT2   DD  DSN=resulting iebgener file,                   *output\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,SPACE=(TRK,(120,30),RLSE),\n//             RECFM=FB,LRECL=400,BLKSIZE=27600\n//*-------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DOCIEFBR": {"ttr": 5139, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x180/\\x01\\x192?\\x11\\x06\\x00\\x11\\x00\\x10\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2018-10-29T00:00:00", "modifydate": "2019-11-19T11:06:00", "lines": 17, "newlines": 16, "modlines": 0, "user": "IANNONE"}, "text": "//*-------------------------------------------------\n//*  delete xxxx.xxxxxx.xxxxxxxx\n//*  use IEFBR14 for deleting non-VSAM files only\n//*  use IDCAMS for VSAM files\n//*-------------------------------------------------\n//S000     EXEC PGM=IEFBR14,\n//             REGION=5120K,\n//*            RESTART=J010.S000,\n//             COND=(0,NE)\n//SYSPRINT DD  SYSOUT=*\n//DASD1    DD  DSN=&XXXX..XXXXXX.XXXXXXXX,                    *delete\n//             DISP=(MOD,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(1,0))\n//TAPE1    DD  DSN=&XXXX..XXXXXX.XXXXXXXX,                    *delete\n//             DISP=(MOD,DELETE),\n//             UNIT=3490\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DOCJOB": {"ttr": 5141, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00 \\x01\\x18)\\x9f\\x01\\x19\\x07O\\t \\x00n\\x00e\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2018-10-26T00:00:00", "modifydate": "2019-03-15T09:20:20", "lines": 110, "newlines": 101, "modlines": 0, "user": "IANNONE"}, "text": "//*-------------------------------------------------\n//*\n//*  JOB  examples/formats    shell for building new job, or\n//*                           reference for coding ideas\n//*\n//*-------------------------------------------------\n/*PRIORITY     01           OVERRIDES PRTY BELOW\n//useridJ  JOB 861310,\n//useridJ  JOB (861310,'********************* 142'),\n//             '***************** 20',CLASS=I,\n                                            |\n                                            A=test      E=prod\n                                            S=test      T=prod\n//             MSGCLASS=X,--  x=held\n                              x=CA-View  $SAVRS  etc\n\n//*            RESTART=J000.S000,USER=userid,\n//*                    |    |\n//*                    |    PROCSTEP: CONTAINS PGM= STATEMENT\n//*                    |\n//*                    JOBSTEP: CONTAINS EXEC STATEMENT\n//*\n//*            RESTART=S010.EXTRACEX,\n//             REGION=70M,     if region coded in job, step values\n//                             are ignored - job value overrides all\n//             TYPRUN=SCAN,\n//             TYPRUN=COPY     (IMMED TO SYSOUT)\n//             TYPRUN=HOLD     (A = RELEASE)\n//             TYPRUN=JCLHOLD  (A = RELEASE)\n//             LINES=999999    sysout in thousands of lines to jes\n//                             9999 = 9 million lines\n//                             99999 = 99 million lines\n//             LINES=(9999,CANCEL)  cancel job when limit reached\n//             LINES=(9999,DUMP)    dump when limit reached\n//             LINES=(9999,WARNING) warning when limit reached\n//\n//             NOTIFY=jes node:userid,\n//*            MSGCLASS=0,\n//*            MSGLEVEL=(0,0),\n//             PRTY=##,      JOB PRIORITY 0-15\n//             TIME=1440,    NOLIMIT,     PROCESSOR TIME in min\n//             TIME=(12,10),              12 MIN, 10 SEC\n//             USER=restricted userid\n/*NOTIFY jes node:userid\n//*-------------------------------------------------\n//*\n//*   Control-M did not like the '%' signs below, even though\n//*             the line in the job was commented:\n//*\n//*        ACTP.MHPSSD.ARX.%%%%.%\n//*\n//*  MARK G. SYSP-->APSP CHANGES 4-19-2006\n//JCLDYN   JCLLIB ORDER=APSP.PROCLIB\n//JOBLIB   DD  DSN=APSP.BATCH.LINKLIB,DISP=SHR\n//*-------------------------------------------------\n/*ROUTE        PRINT PRTC\n/*ROUTE        PRINT PRT22\n\n//*  STEPLIB replaces JOBLIB - if specified, JOBLIB is not referenced\n//JOBLIB   DD  DSN=TLSMS.SMSCUSTL.P0000.LOAD,DISP=SHR\n//JOBLIB   DD  DSN=PLSMS.SMSCUSTL.E0000.LOAD,DISP=SHR\n//         DD  DSN=PLSMS.SMSCUSTL.P0000.LOAD,DISP=SHR\n//         DD  DSN=TLSMS.SMBSM00L.P0000.LOAD,DISP=SHR\n//         DD  DSN=PLSMS.SMBSM00L.E0000.LOAD,DISP=SHR\n//         DD  DSN=PLSMS.SMBSM00L.P0000.LOAD,DISP=SHR\n//         DD  DSN=userid.ISPF.OBJ,DISP=SHR\n//         DD  DSN=APSP.BATCH.LINKLIB,DISP=SHR\n\n/*JOBPARM      PROCLIB=xxx\n//PROCLIB  JCLLIB ORDER=APSP.PROCLIB\n//PROCLIB  JCLLIB ORDER=(APSP.PROCLIB,PLSMS.SMSSM00L.P0000.PROC)\n//PROCLIB  JCLLIB ORDER=(PLSMS.SMSSM00L.P0000.PROC,\n//             PLSMS.SMSSM00L.H00T0.SYSIN)    * CONT ON 16\n//*-------------------------------------------------\n//*  INCLUDE    REFERENCES A LIBRARY LISTED IN A JCLLIB STATEMENT\n//*\n//INCPROC  INCLUDE MEMBER=COPYIN     *CANNOT BE A PARTIAL DD ENTRY\n//*-------------------------------------------------\n//*      ****  INSERT PROC HERE\n//*\n//*-------------------------------------------------\n//         PEND\n//J010     EXEC XXXXX\n//*\n//J010     EXEC TEST1\n//J020     EXEC TEST2,CONDT='(0,NE,J010.S010)'\n//*-------------------------------------------------\n//*\n//*      ****  INSERT 12 - 20 DOCJOBCA HERE\n./  ADD  NAME=DOCKWIK\n//*-------------------------------------------------\n//*   LOAD ALTERNATE INDEX FOR XXXX.XXXXXX.XXXXXXXX\n//*-------------------------------------------------\n//S000     EXEC PGM=KWIKKEY,\n//             REGION=2048K,\n//*            RESTART=S000,\n//             COND=(0,NE)\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=D\n//SYSPRINT DD  SYSOUT=*\n//KWIKWK01 DD  UNIT=SYSDA,SPACE=(CYL,20)\n//IN1      DD  DSN=&XXXX.XXXXXX.XXXXXXXX,              *BASE\n//             DISP=SHR\n//OUT1     DD  DSN=&XXXX.XXXXXX.XXXXXXXX.ALT1,         *ALT1\n//             DISP=SHR\n//OUT2     DD  DSN=&XXXX.XXXXXX.XXXXXXXX.ALT2,         *ALT2\n//             DISP=SHR\n//*YSIN    DD  DSN=&SYSX..IDCAMS.PARMLIB(XXXXXXXX),    *PARM0022\n//             DISP=SHR                                 PARM0023\n//*                                                     PARM0024\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DOCLINE": {"ttr": 5144, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00P\\x01\\x18)\\x9f\\x01\\x18)\\x9f\\x11\\x07\\x00\\x01\\x00\\x01\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-10-26T00:00:00", "modifydate": "2018-10-26T11:07:50", "lines": 1, "newlines": 1, "modlines": 0, "user": "IANNONE"}, "text": "//*-------------------------------------------------\n", "mimetype": "text/plain", "datatype": "us-ascii", "extension": ".txt"}, "DOCLOAD": {"ttr": 5377, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x07\\x01\\x180/\\x01\\x194\\x0f\\x14!\\x003\\x003\\x00\\x00\\xd4\\xc9\\xe2\\xf1\\xf4\\xf6@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2018-10-29T00:00:00", "modifydate": "2019-12-06T14:21:07", "lines": 51, "newlines": 51, "modlines": 0, "user": "MIS146"}, "text": "\n       copy 'DOCPARM' for WS fields\n\n      *---------------------------------------\n      *    load a parm table ...\n      *---------------------------------------\n       0700-LOAD-PARM01.\n           READ PARM01.\n           IF WS-STAT = 10\n               MOVE WS-SUB1                   TO WS-PARM01-MAX\n               GO TO 0700-LOAD-PARM01-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** XXXXXXXX read error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0700                     TO WS-RETURN-CODE\n               GO TO 0700-LOAD-PARM01-EXIT.\n\n           IF PARM01-DOCU = '*'\n               GO TO 0700-LOAD-PARM01.\n\n           IF PARM01-FACILITY = WS-LS-FACILITY\n               OR PARM01-FACILITY = '*'\n               OR PARM01-FACILITY = SPACE\n               CONTINUE\n           ELSE\n               GO TO 0700-LOAD-PARM01.\n\n           IF WS-SUB1 < 120\n               ADD 1                          TO WS-SUB1\n               PERFORM 0700-PARM01-FIELDS.\n\n           GO TO 0700-LOAD-PARM01.\n\n       0700-LOAD-PARM01-EXIT. EXIT.\n\n       0700-PARM01-FIELDS.\n           IF PARM01-FIELD NUMERIC\n             IF PARM01-FIELD = '00000'\n                 DISPLAY '**** XXXXXXXX PARM01 field = zero'\n                 MOVE +0700                   TO WS-RETURN-CODE\n             ELSE\n                 MOVE PARM01-FIELD            TO WS-FIELD(WS-SUB1)\n           ELSE\n               DISPLAY '**** XXXXXXXX PARM01 field not numeric'\n               MOVE +0700                     TO WS-RETURN-CODE.\n\n           MOVE PARM01-TYPE                   TO WS-TYPE(WS-SUB1).\n\n      *---------------------------------------\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DOCPARM": {"ttr": 5379, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x15\\x01\\x180/\\x01\\x180O\\x13I\\x00\\x14\\x00\\x14\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-10-29T00:00:00", "modifydate": "2018-10-31T13:49:15", "lines": 20, "newlines": 20, "modlines": 0, "user": "IANNONE"}, "text": "           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       FD  PARM01\n           RECORDING MODE F.\n       01  PARM01-RECORD.\n           05  PARM01-DOCU             PIC  X.\n           05  FILLER                  PIC  X.\n           05  PARM01-FACILITY         PIC  X.\n           05  FILLER                  PIC  X.\n           05  PARM01-CODE             PIC  X(05).\n           05  FILLER                  PIC  X.\n           05  PARM01-VALUE            PIC  X(10).\n           05  FILLER                  PIC  X(52).\n           05  FILLER                  PIC  X(08).\n\n           05  WS-PARM01-MAX           PIC  9(05)    VALUE ZERO.\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOCPRINT": {"ttr": 5381, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00P\\x01\\x180/\\x01\\x180O\\x13I\\x00;\\x00;\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-10-29T00:00:00", "modifydate": "2018-10-31T13:49:50", "lines": 59, "newlines": 59, "modlines": 0, "user": "IANNONE"}, "text": "      *\n      *  copy 'DOCHDG1' or 'DOCHDG2' at bottom of WS fields\n      *        (8.5X14)      (8.5X11)\n\n       0000-PRINT-BREAK-LINE.\n           MOVE WS-FFFFFF                     TO B1-FFFFFF.\n           MOVE WS-FFFFFF-CNT                 TO B1-FFFFFF-CNT.\n           ADD WS-FFFFFF-CNT                  TO WS-FFFFFF-FINAL.\n           MOVE ZERO                          TO WS-FFFFFF-CNT.\n           MOVE WS-PREV-                      TO B1-\n           MOVE 2                             TO WS-SPACE-CONTROL.\n           MOVE BREAK-LINE-1                  TO PRINT-AREA.\n           PERFORM 0000-WRITE-LINE.\n           MOVE SR-                           TO WS-PREV-\n           MOVE 3                             TO WS-SPACE-CONTROL.\n\n       0000-PRINT-DETAIL-LINE.\n           IF WS-LINE-SUM > WS-LINE-MAX\n               MOVE 1                         TO WS-LINE-SUM\n               PERFORM 0000-PRINT-HEADINGS.\n           MOVE SR-FFFFFF                     TO WS-FFFFFF.\n           ADD SR-FFFFFF-CNT                  TO WS-FFFFFF-CNT.\n           MOVE DETAIL-LINE-1                 TO PRINT-AREA.\n           PERFORM 0000-WRITE-LINE.\n      *    MOVE 1                             TO WS-SPACE-CONTROL.\n\n       0000-PRINT-TOTAL-LINE.\n           PERFORM 0000-PRINT-HEADINGS.\n           MOVE WS-FFFFFF-FINAL               TO T1-FFFFFF-FINAL.\n           MOVE 3                             TO WS-SPACE-CONTROL.\n           MOVE TOTAL-LINE-1                  TO PRINT-AREA.\n           PERFORM 0000-WRITE-LINE.\n\n       0000-PRINT-HEADINGS.\n           ADD 1                              TO WS-PAGE-CNT.\n           MOVE 1                             TO WS-SPACE-CONTROL.\n           MOVE WS-PAGE-CNT                   TO H1-PAGE.\n           MOVE HEADING-LINE-1                TO PRINT-AREA.\n           PERFORM 0000-WRITE-PAGE-TOP.\n           MOVE 2                             TO WS-SPACE-CONTROL.\n           MOVE HEADING-LINE-2                TO PRINT-AREA.\n           PERFORM 0000-WRITE-LINE.\n           MOVE HEADING-LINE-3                TO PRINT-AREA.\n           PERFORM 0000-WRITE-LINE.\n           MOVE 1                             TO WS-SPACE-CONTROL.\n           MOVE HEADING-LINE-4                TO PRINT-AREA.\n           PERFORM 0000-WRITE-LINE.\n      *    MOVE 2                             TO WS-SPACE-CONTROL.\n\n       0000-WRITE-LINE.\n           WRITE PRINT-AREA\n               AFTER ADVANCING WS-SPACE-CONTROL LINES.\n           ADD WS-SPACE-CONTROL               TO WS-LINE-SUM.\n\n       0000-WRITE-PAGE-TOP.\n           WRITE PRINT-AREA\n               AFTER ADVANCING PAGE-TOP.\n           ADD 1                              TO WS-WRITE-PAGE-CNT.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DOCPROB": {"ttr": 5383, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x14\\x004\\x01\\x180/\\x01 \\x05\\x0f\\x148\\x02#\\x00\\x82\\x00\\x00\\xd4\\xc9\\xe2\\xf1\\xf4\\xf6@@@@'", "ispf": {"version": "01.20", "flags": 0, "createdate": "2018-10-29T00:00:00", "modifydate": "2020-02-19T14:38:34", "lines": 547, "newlines": 130, "modlines": 0, "user": "MIS146"}, "text": "      *\n      *    standard COBOL procedure division with coding examples\n      *    just delete what you won't use\n      *\n       LINKAGE SECTION.\n\n       01  LS-FIELD.\n           05  LS-LENGTH               PIC S9(04)    COMP.\n           05  LS-DATA                 PIC  X(10).\n           05  FILLER REDEFINES LS-DATA.\n               10  LS-FACILITY         PIC  X.\n               10  LS-CYMD             PIC  X(08).\n               10  LS-EXTRA            PIC  X.\n\n      /\n\n       PROCEDURE DIVISION.\n       PROCEDURE DIVISION USING LS-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           MOVE +0000                         TO WS-RETURN-CODE.\n           PERFORM 0200-OPEN-FILES.\n           DISPLAY '    '.\n           DISPLAY '**** XXXXXXXX program purpose here'.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-AAAAAAAA.\n\n           DISPLAY '**** Records in AAAAAAAA ' WS-READ-AAAAAAAA-CNT.\n           DISPLAY '**** Records sorted      ' WS-SORT-RCD-CNT.\n           DISPLAY '**** Records written     ' WS-WRITE-BBBBBBBB-CNT.\n           DISPLAY '**** Pages out           ' WS-WRITE-PAGE-CNT.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** XXXXXXXX cond code ' WS-RETURN-CODE\n                       ' set by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** XXXXXXXX EOJ encountered '.\n           DISPLAY '    '.\n           STOP RUN.\n           GOBACK.\n\n       0200-OPEN-FILES.\n           OPEN OUTPUT AAAAAAAA.\n           OPEN I-O    AAAAAAAA.\n           OPEN EXTEND AAAAAAAA.\n\n           OPEN INPUT  AAAAAAAA.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** XXXXXXXX open error on AAAAAAAA'\n               DISPLAY '**** File stat           ' WS-STAT\n               PERFORM 3000-DISPLAY-VSAM-ERROR\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN OUTPUT BBBBBBBB.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** XXXXXXXX open error on BBBBBBBB'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN OUTPUT PRINT-AAAAAAAA.\n\n       0300-CLOSE-FILES.\n           CLOSE PRINT-AAAAAAAA.\n           CLOSE BBBBBBBB.\n           CLOSE AAAAAAAA.\n\n      *---------------------------------------\n      *    X\n      *---------------------------------------\n       0400-PROCESS-AAAAAAAA.\n\n      *----General\n      *    NOTE: A 'CALL' WILL ALTER THE VALUE OF RETURN-CODE.\n      *          USE 'WS-RETURN-CODE' AND MOVE TO RETURN-CODE AT END.\n      *    DISPLAY '**** RESPOND TO CONTINUE ' UPON CONSOLE.\n\n      *----Continuation\n      *        WHEN 'MI'  MOVE 'MI=planning schedule/material release is\n      -                        'suer'         TO WS-VALUE\n\n      *----Numbers\n      *    01 WS-A    PIC  X(10).     NUMBER:  -300  OR  1.23\n      *    01 WS-B    PIC  X(10).     CURRENCY: $12,345.67CR\n      *    01 WS-N    PIC S999V99.\n      *    COMPUTE WS-N = FUNCTION NUMVAL(WS-A)   : FOR NUMBERS\n      *    COMPUTE WS-N = FUNCTION NUMVAL-C(WS-B) : FOR CURRENCY\n      *\n      *    COMPUTE WS-N = FUNCTION ORD-MAX(ARG1 ARG2 ARG3)  :RESULT=3\n      *\n      *    COMPUTE X Y Z = A + B / C ** D - E\n      *    COMPUTE Z = FUNCTION REM(X 2)  :REMAINDER AFTER DIV X BY 2\n\n      *----Random numbers\n      *    01 MIN-NUMBER PIC 999 VALUE 120.\n      *    01 MAX-NUMBER PIC 999 VALUE 010.\n      *    01 RANDOM-NUMBER PIC 9999V9999.\n      *    01 RANDOM-SHOW PIC ZZZZ.9999.\n      *    COMPUTE RANDOM-NUMBER = FUNCTION RANDOM\n      *            * (MAX-NUMBER - MIN-NUMBER + 1) + MIN-NUMBER.\n      *    MOVE RANDOM-NUMBER TO RANDOM-SHOW.\n      *    DISPLAY 'RANDOM NUMBER: ' RANDOM-SHOW.\n\n      *----Dates as part of functions\n      *\n      *    note: define timestamp as   PIC  X(21)  VALUE SPACE.\n      *\n      *    CURRENT-DATE                CCYYMMDDHHMMSSHH+HHSS\n      *                                                -  GMT offset\n      *    MOVE FUNCTION CURRENT-DATE(1: 8)   TO WS-1-CYMD.\n      *    DATE-OF-INTEGER             CCYYMMDD\n      *    DATE-TO-YYYYMMDD            CCYYMMDD\n      *    DATEVAL                     WS-FIELD YY YYYY X XX XXX XXXX\n      *    DAY-OF-INTEGER              CCYYDDD\n      *    DAY-TO-YYYYDDD              convert YYDDD to CCYYDDD\n      *    INTEGER-OF-DATE             PIC S9(09)\n      *      obtained from the calculation:\n      *      (YYYY * 10,000) + (MM * 100) + DD\n      *    INTEGER-OF-DAY              PIC S9(09)\n      *    UNDATE\n      *    WHEN-COMPILED\n      *    YEAR-TO-YYYY                CCYY\n      *    YEARWINDOW\n      *\n      *    for certain versions of Cobol:\n      *    FIND-DURATION\n      *    SUBTRACT-DURATION\n      *    ADD-DURATION\n      *      MOVE FUNCTION ADD-DURATION (WW-TIMESTMP-1 YEARS 2\n      *                                  MONTHS 5 DAYS 23)\n      *                                  TO WS-TIMESTMP-2.\n      *      Like above this function allows to add HOURS, MINUTES,\n      *         SECONDS, and MICROSECONDS as well to a Timestamp.\n      *\n\n      *----Compute 90 days forward\n      *    01 WS-CYMD        PIC  9(08).\n      *    01 INTEGER-FORM   PIC S9(09).\n      *    MOVE FUNCTION CURRENT-DATE(1: 8) TO WS-CYMD\n      *    COMPUTE INTEGER-FORM = FUNCTION INTEGER-OF-DATE(WS-CYMD)\n      *    ADD 90 TO INTEGER-FORM\n      *    COMPUTE WS-CYMD = FUNCTION DATE-OF-INTEGER(INTEGER-FORM)\n      *    DISPLAY 'DUE DATE: ' WS-CYMD\n\n      *----Other\n      *    EVALUATE WS-FIELD\n      *      WHEN 'A'\n      *      WHEN 'B'\n      *          MOVE STUFF IF 'A' OR 'B'\n      *      WHEN 'C'\n      *          MOVE STUFF IF 'C'\n      *      WHEN OTHER\n      *    END-EVALUATE.\n\n      *----Strings\n      *    DISPLAY FUNCTION LOWER-CASE WS-FIELD.\n      *    DISPLAY FUNCTION UPPER-CASE WS-FIELD.\n      *    MOVE FUNCTION LOWER-CASE(WS-FIELD1) TO WS-FIELD2.\n      *    MOVE FUNCTION REVERSE(WS-L-TO-R) TO WS-R-TO-L.\n      *\n      *    note: \"length of\" moves defined field length,\n      *           not field content length  !!\n      *    MOVE ws-field1 to ws-field2(1: length of ws-field1).\n      *\n      *    INSPECT WS-FIELD                     CONVERTING\n      *            'abcdefghijklmnopqrstuvwxyz' TO\n      *            'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n      *\n      *    01 ARG1    PIC  X(10)  VALUE 'A'.\n      *    01 ARG2    PIC  X(10)  VALUE 'C'.\n      *    01 ARG3    PIC  X(10)  VALUE 'E'.\n      *    MOVE FUNCTION MAX(ARG1 ARG2 ARG3) TO ...   :RESULT=E\n      *    FUNCTION MAX(ALL) TO REFERENCE ALL OCCURRENCES OF A TABLE\n\n      *    STRING WS-field1                   DELIMITED BY SIZE\n      *           WS-field2                   DELIMITED BY '  '\n      *           INTO WS-field\n\n      *    WS-field = 'AA    BB'\n      *    |  UNSTRING WS-field               DELIMITED BY SPACE\n      *    |      INTO WS-UNSTR1 WS-UNSTR2\n      *    |           AA        empty\n      *    |\n      *    |  UNSTRING WS-field               DELIMITED BY ALL SPACE\n      *    |      INTO WS-UNSTR1 WS-UNSTR2\n      *    |           AA        BB\n      *\n      *    UNSTRING WS-field           DELIMITED BY (all) delimiter\n      *                                          OR (all) delimiter2\n      *             INTO WS-UNSTR(1)   COUNT IN WS-STR-CNT(1)\n      *             INTO WS-UNSTR(2)   COUNT IN WS-STR-CNT(2)\n      *             INTO WS-UNSTR(3)   COUNT IN WS-STR-CNT(3)\n      *             WITH POINTER WS-CHAR-COUNT\n      *             TALLYING IN WS-FIELD-COUNT\n      *    END-UNSTRING.\n\n      *    MOVE ZERO                          TO WS-TALLY.\n      *    INSPECT field TALLYING WS-TALLY FOR LEADING '0'.\n      *    INSPECT field TALLYING WS-TALLY FOR ALL '/'.\n      *\n      *    INSPECT field TALLYING WS-TALLY FOR LEADING '0'\n      *    |       REPLACING FIRST 'A' BY '2' AFTER INITIAL 'C'\n      *    |\n      *    ---->   field before   WS-TALLY after   field after\n      *            00ACADEMY00    2                00AC2DEMY00\n      *\n      *    INSPECT field\n      *    |       REPLACING CHARACTERS BY ZEROS BEFORE INITIAL QUOTE\n      *    |\n      *    ---->   field before   field after\n      *            ANDES\"12       00000\"12\n      *\n\n           PERFORM 0500-GET-LINKAGE.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0600-GET-PARM-CYMD.\n\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                      TO WS-SUB1\n               MOVE SPACE                     TO WS-PARM01-TABLE\n               PERFORM 0700-LOAD-PARM01 THRU\n                       0700-LOAD-PARM01-EXIT.\n\n      *    select one of these processing types\n\n      *    loop through primary file\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 1100-READ-AAAAAAAA THRU\n                       1100-READ-AAAAAAAA-EXIT\n                       UNTIL END-OF-AAAAAAAA.\n\n      *    compare two files\n           IF WS-RETURN-CODE = ZERO\n               MOVE 'Y'                       TO WS-READ-AAAAAAAA-SW\n               MOVE 'Y'                       TO WS-READ-BBBBBBBB-SW\n               PERFORM 1100-PROCESS-FILES THRU\n                       1100-PROCESS-FILES-EXIT.\n\n      *    sort\n           IF WS-RETURN-CODE = ZERO\n               SORT SORT-AAAAAAAA\n                   ON ASCENDING KEY  SR-FFFFFF\n                                     SR-\n                                     SR-\n                   ON DESCENDING KEY SR-\n                   WITH DUPLICATES IN ORDER\n                   USING AAAAAAAA  (INPUT FILE IS AUTOMATICALLY\n                                    OPENED, READ, AND CLOSED)\n                   INPUT PROCEDURE IS 1000-SORT-IN\n                   GIVING BBBBBBBB  (OUTPUT FILE IS AUTOMATICALLY\n                                    OPENED, WRITTEN, AND CLOSED)\n                   OUTPUT PROCEDURE IS 2000-SORT-OUT.\n\n       0500-GET-LINKAGE.\n           IF LS-LENGTH = ZERO\n               DISPLAY '**** Parm length is zero '\n               MOVE +0500                     TO WS-RETURN-CODE\n           ELSE\n           IF LS-LENGTH > LENGTH OF WS-LS-DATA\n               DISPLAY '**** Parm length is excessive '\n               MOVE +0500                     TO WS-RETURN-CODE\n           ELSE\n               MOVE LS-DATA(1: LS-LENGTH)     TO WS-LS-DATA.\n\n           MOVE WS-LS-FACILITY                TO H1-HDR1.\n           MOVE 'L'                           TO H1-HDR1(2: 1).\n      *    MOVE 'CHPL'                        TO H1-HDR1.\n           CALL WS-CALL-STV0270B USING H1-HDR1.\n\n       0600-GET-PARM-CYMD.\n\n      *    get current date\n      *    LANGUAGE ENVIRONMENT\n      *    CALL \"CEESERV\" USING PARM1 PARM2 ... PARMN FC\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-1X8                  TO WS-1-CYMD.\n\n      *    begin and end dates\n      *    MOVE WS-LS-BEG-CYMD                TO WS-2-CYMD.\n      *    PERFORM 0600-CONVERT-PARM-DATE.\n      *    IF WS-RETURN-CODE = ZERO\n      *        MOVE STV0400B-1X8              TO WS-BEG-CYMD.\n      *    MOVE WS-LS-END-CYMD                TO WS-2-CYMD.\n      *    PERFORM 0600-CONVERT-PARM-DATE.\n      *    IF WS-RETURN-CODE = ZERO\n      *        MOVE STV0400B-1X8              TO WS-END-CYMD.\n\n           MOVE WS-LS-CYMD                    TO WS-2-CYMD.\n           PERFORM 0600-CONVERT-PARM-DATE.\n      *    value report headers\n      *    IF WS-RETURN-CODE = ZERO\n      *        MOVE SPACE                     TO WS-STV0400B-FIELDS\n      *        MOVE WS-2-CYMD                 TO STV0400B-1X8\n      *        MOVE 'CYMD  '                  TO STV0400B-IN\n      *        MOVE 'M/D/Y '                  TO STV0400B-OUT\n      *        CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n      *        MOVE STV0400B-DATA             TO H1-DATE\n      *        IF WS-2-CYMD = WS-1-CYMD\n      *            MOVE SPACE                 TO WS-STV0400B-FIELDS\n      *            MOVE 'H:MM  '              TO STV0400B-OUT\n      *            CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n      *            MOVE STV0400B-DATA         TO H2-TIME\n      *        ELSE\n      *            MOVE SPACE                 TO H2-TIME.\n\n      *---------------------------------------\n      *    convert and validate parm date, place in WS-2-CYMD\n      *---------------------------------------\n       0600-CONVERT-PARM-DATE.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           IF WS-2-CYMD = '00000000'\n               MOVE SPACE                     TO WS-2-CYMD\n           ELSE\n           IF WS-2-CYMD(1: 3) = 'CMD' OR 'CMF'\n               MOVE WS-2-CYMD                 TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               MOVE STV0400B-1X8              TO WS-2-CYMD\n           ELSE\n           IF WS-2-CYMD(3: 1) = '/'\n               AND WS-2-CYMD(6: 1) = '/'\n               IF WS-2-CYMD = '01/01/01'\n                   MOVE WS-1-CYMD             TO WS-2-CYMD\n               ELSE\n                   MOVE WS-2-CYMD             TO STV0400B-1X8\n                   MOVE 'M/D/Y '              TO STV0400B-IN\n                   MOVE 'CYMD  '              TO STV0400B-OUT\n                   CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n                   MOVE STV0400B-1X8          TO WS-2-CYMD.\n\n           IF WS-2-CYMD NOT NUMERIC\n               MOVE WS-1-CYMD                 TO WS-2-CYMD.\n\n           MOVE WS-2-CYMD                     TO STV0400B-1X8.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'CYMD  '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           IF STV0400B-1X6 = 'ERROR'\n               DISPLAY '**** XXXXXXXX parm date is not valid'\n               DISPLAY '**** Date = ' WS-2-CYMD\n               MOVE +0600                     TO WS-RETURN-CODE\n           ELSE\n               MOVE 'CYMD  '                  TO STV0400B-IN\n               MOVE 'M/D/CY'                  TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               DISPLAY '**** Parm date           ' STV0400B-DATA.\n\n      *    COPY 'DOCOFF'      offset date processing\n      *    COPY 'DOCLOAD'     static parm load to WS\n\n      ****************************************\n\n      *    sort\n       1000-SORT-IN.\n           PERFORM 1100-READ-AAAAAAAA THRU\n                   1100-READ-AAAAAAAA-EXIT\n                   UNTIL END-OF-AAAAAAAA.\n           IF WS-RETURN-CODE = ZERO\n               MOVE 'Y'                       TO WS-READ-AAAAAAAA-SW\n               MOVE 'Y'                       TO WS-READ-BBBBBBBB-SW\n               PERFORM 1100-PROCESS-FILES THRU\n                       1100-PROCESS-FILES-EXIT.\n\n      *    compare two files\n       1100-PROCESS-FILES.\n           IF WS-READ-AAAAAAAA-SW = 'Y'\n               PERFORM 1100-READ-AAAAAAAA.\n      *    IF WS-READ-BBBBBBBB-SW = 'Y'\n      *        PERFORM 1100-READ-BBBBBBBB.\n\n           MOVE 'N'                           TO WS-READ-AAAAAAAA-SW.\n      *    MOVE 'N'                           TO WS-READ-BBBBBBBB-SW.\n\n           IF WS-RETURN-CODE > ZERO\n               OR END-OF-AAAAAAAA\n               GO TO 1100-PROCESS-FILES-EXIT.\n\n      *    IF AAAAAAAA-PT-NBR > BBBBBBBB-KEY\n      *        PERFORM 1200-KEY-LARGER\n      *        MOVE 'Y'                       TO WS-READ-BBBBBBBB-SW\n      *    ELSE\n      *    IF AAAAAAAA-PT-NBR < BBBBBBBB-KEY\n      *        PERFORM 1200-KEY-SMALLER\n      *        MOVE 'Y'                       TO WS-READ-AAAAAAAA-SW\n      *    ELSE\n      *        PERFORM 1200-KEY-MATCH\n      *        MOVE 'Y'                       TO WS-READ-AAAAAAAA-SW\n      *        MOVE 'Y'                       TO WS-READ-BBBBBBBB-SW.\n\n      *    MOVE 'Y'                           TO WS-READ-AAAAAAAA-SW.\n           GO TO 1100-PROCESS-FILES.\n\n       1100-PROCESS-FILES-EXIT. EXIT.\n\n       1100-READ-AAAAAAAA.\n           READ AAAAAAAA.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-AAAAAAAA-CNT\n               MOVE AAAAAAAA-PT-NBR           TO WS-AAAAAAAA-PT-NBR\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-AAAAAAAA-SW\n           ELSE\n               DISPLAY '**** XXXXXXXX read error on AAAAAAAA '\n               DISPLAY '**** Key                 ' FFFFFF\n               DISPLAY '**** File stat           ' WS-STAT\n               PERFORM 3000-DISPLAY-VSAM-ERROR\n               MOVE +1100                     TO WS-RETURN-CODE.\n      *    usually best to continue through the whole file\n      *    if ws-return-code not = zero\n      *        MOVE 'Y'                       TO WS-END-AAAAAAAA-SW.\n\n       1100-READ-BBBBBBBB.\n           READ BBBBBBBB.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-BBBBBBBB-CNT\n               MOVE BBBBBBBB-KEY              TO WS-BBBBBBBB-PT-NBR\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-BBBBBBBB-SW\n               MOVE 99999999999               TO WS-BBBBBBBB-PT-NBR\n           ELSE\n               DISPLAY '**** XXXXXXXX read error on BBBBBBBB '\n               DISPLAY '**** Key                 ' FFFFFF\n               DISPLAY '**** File stat           ' WS-STAT\n               PERFORM 3000-DISPLAY-VSAM-ERROR\n               MOVE +1100                     TO WS-RETURN-CODE.\n      *    usually best to continue through the whole file\n      *    if ws-return-code not = zero\n      *        MOVE 'Y'                       TO WS-END-BBBBBBBB-SW.\n\n       1200-KEY-LARGER.\n\n       1200-KEY-SMALLER.\n\n       1200-KEY-MATCH.\n\n      *    loop through primary file\n       1100-READ-AAAAAAAA.\n           READ AAAAAAAA.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-AAAAAAAA-CNT\n               PERFORM 1200-SELECT THRU\n                       1200-SELECT-EXIT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-AAAAAAAA-SW\n           ELSE\n               DISPLAY '**** XXXXXXXX read error on AAAAAAAA '\n               DISPLAY '**** Key                 ' FFFFFF\n               DISPLAY '**** File stat           ' WS-STAT\n               PERFORM 3000-DISPLAY-VSAM-ERROR\n               MOVE +1100                     TO WS-RETURN-CODE.\n      *    usually best to continue through the whole file\n      *    if ws-return-code not = zero\n      *        MOVE 'Y'                       TO WS-END-AAAAAAAA-SW.\n\n       1100-READ-AAAAAAAA-EXIT. EXIT.\n\n      *---------------------------------------\n      *    X\n      *---------------------------------------\n       1200-SELECT.\n           IF A\n               AND NOT B\n               PERFORM 1300-SEND-TO-SORT.\n\n           COPY 'DOCSORT2'    'manual' internal sort logic\n\n       1200-SELECT-EXIT. EXIT.\n\n       1300-SEND-TO-SORT.\n           MOVE PM-A                          TO SR-A.\n           MOVE PM-B                          TO SR-B.\n           MOVE PM-C                          TO SR-C.\n           MOVE PM-D                          TO SR-D.\n           MOVE PM-E                          TO SR-E.\n           MOVE PM-F                          TO SR-F.\n           MOVE PM-G                          TO SR-G.\n           RELEASE SORT-RECORD.\n\n      ****************************************\n      ****************************************\n      ****************************************\n\n       2000-SORT-OUT.\n           PERFORM 2100-RETURN-RECORDS\n               UNTIL END-OF-SORT.\n\n           IF WS-RETURN-CODE = ZERO\n               IF WS-SORT-RCD-CNT > ZERO\n                   PERFORM 0000-PRINT-TOTAL-LINE\n               ELSE\n                   PERFORM 0000-PRINT-HEADINGS\n                   MOVE '     No records match selection criteria'\n                                              TO PRINT-AREA\n                   PERFORM 0000-WRITE-LINE.\n\n       2100-RETURN-RECORDS.\n           PERFORM 2200-RETURN-SORT.\n\n           IF SR-        NOT = WS-PREV-\n               IF WS-LINE-SUM > 38\n                   PERFORM 0000-PRINT-BREAK-LINE\n                   PERFORM 0000-PRINT-HEADINGS\n               ELSE\n                   PERFORM 0000-PRINT-BREAK-LINE.\n           IF MORE-SORT-RCDS\n               ADD 1                          TO WS-SORT-RCD-CNT\n               PERFORM 0000-CALCULATE\n               PERFORM 0000-PRINT-DETAIL-LINE.\n\n       2200-RETURN-SORT.\n           RETURN SORT-AAAAAAAA\n               AT END\n                   MOVE HIGH-VALUE            TO MAIN BREAKER\n                   MOVE 'Y'                   TO WS-END-SORT-SW.\n           IF FIRST-RECORD\n               MOVE SR-                       TO WS-PREV-\n               MOVE 'N'                       TO WS-FIRST-RCD-SW.\n\n       0000-WRITE-BBBBBBBB.\n      *    AFTER A WRITE, THE DATA DOES NOT REMAIN IN THE RECORD\n           WRITE BBBBBBBB-RECORD.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-WRITE-BBBBBBBB-CNT\n           ELSE\n               DISPLAY '**** XXXXXXXX write error on BBBBBBBB'\n               DISPLAY '**** File stat           ' WS-STAT\n               DISPLAY '**** Key                 ' FFFFFF\n               PERFORM 3000-DISPLAY-VSAM-ERROR\n               MOVE 'Y'                       TO WS-END-AAAAAAAA-SW\n               MOVE +0000                     TO WS-RETURN-CODE.\n\n      *    COPY 'DOCPRINT'    report printing logic\n      *    COPY 'DOCLEFT'     left justify a number\n      *    COPY 'DOCRIGHT'    right justify a number\n      *    COPY 'DOCCSV'      csv comma delimited file\n\n       3000-DISPLAY-VSAM-ERROR.\n           DISPLAY '**** VSAM return code    ' WS-VSAM-RETURN.\n           DISPLAY '**** VSAM component      ' WS-VSAM-COMPONENT.\n           DISPLAY '**** VSAM reason         ' WS-VSAM-REASON.\n\n      ************************************ END XXXXXXXX\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DOCPROC": {"ttr": 5636, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x002\\x01\\x180/\\x01\\x19\\x07/\\x12&\\x01J\\x016\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2018-10-29T00:00:00", "modifydate": "2019-03-13T12:26:32", "lines": 330, "newlines": 310, "modlines": 0, "user": "IANNONE"}, "text": "//*-------------------------------------------------\n//*\n//*  JCL statement examples/formats\n//*\n//*-------------------------------------------------\n\n//XXXXX    PROC COPY01=1,\n//             SOUT01=X,\n//    8X14     FORM01=STD,\n//    8X14     FCB01=STD,\n//    8X11     FORM01=8X11,\n//    8X11     FCB01=X116,\n//             DPRTY=(##,##)    dispatching priority for step\n//*            APSX=APST,\n//*            MEDX=MEDT,\n//*            EOMDATE='MM/DD/YY'\n//             CMDX='CMDX'\n//*-------------------------------------------------\n//*\n//*   XXXXX    proc documentation here\n//*\n//*-------------------------------------------------\n//*  TO RUN FOR TODAY:       CMDX='CMDX' OR 'CMD000'\n//*  TO RUN FOR TODAY - 1:   CMDX='CMD001'\n//*  TO RUN FOR TODAY + 1:   CMDX='CMF001'\n//*  TO RUN FOR DATE:        CMDX='20061229'\n//*-------------------------------------------------\n     DOCIEFBR                             DOCADRD\n     DOCIDCAM (USE W/ DOCDEFIN)           DEFINE\n     DOCOPEN  (USE W/ DOCOP010)           REPRO\n     DOCCLOSE (USE W/ DOCCL010)\n     DOCKWIK  (USE W/ DOCKWIK1)\n//*-------------------------------------------------\n//         IF (RC = 8 | RC = 10 | RC = 12 |\n//             RC = 14) THEN            continue on cols 4-16\n//*\n//         IF (RC = 0) THEN             comments here are OK\n//         IF (STEPNAME.RC ^= 0) THEN\n//             PGM=\n//\n//         IF (STEPNAME.RC = 0 OR STEPNAME.RC = 48) THEN\n//         IF (RC = 8 OR RC = 10) THEN\n//         IF (RC > 4 AND (RC < 12 OR RC = 16)) AND\n//            (STEPNAME.RC = 0 AND STEPNAME.RC = 0) AND\n//            (STEPNAME.RC = 0) AND\n//            (STEPNAME.RC = 0) THEN\n//\n//         IF (STEPNAME.PROCSTEPNAME.RC = 0) THEN   <-- RC required\n//             EXEC    .PGM=        .RC\n//\n//         IF (STEPNAME.RUN=FALSE OR RC < 4) THEN\n//         IF (ABEND) THEN\n//*        note: .RC test to previous step is ignored if job has\n//*              abended... code  IF (ABEND AND S010.RC = 4) THEN\n//         IF (STEPNAME.ABEND = TRUE) THEN\n//         IF (ABEND OR S010.RC > 8) THEN\n//         IF (STEPNAME.ABENDCC = S317) THEN\n//         IF (STEPNAME.ABENDCC = U0550) THEN\n//*\n//IF01     IF (ABEND OR RC > 4) THEN\n//S010     EXEC PGM=XXXXXXXX,...\n//S010     EXEC PROC=XXXXXXXX,...\n//         ELSE\n//S020     EXEC PGM=XXXXXXXX,...\n//END01    ENDIF\n//*\n//*    note: condition logic S020 PROCESSES (ie: generates abend)\n//*          if previous step S010 flushed\n//S010     EXEC PGM=IEFBR14,COND=(logic that causes step to flush)\n//S020     EXEC PGM=ABEND,COND=(16,NE,S010)\n//*\n//*    instead handle it this way\n//S010     EXEC PGM=IEFBR14,COND=(logic that causes step to flush)\n//         IF (S010.RC EQ 16) THEN\n//S020     EXEC PGM=ABEND\n//         ENDIF\n//*-------------------------------------------------\n//*   XXXXXXX...\n//*-------------------------------------------------\n//S000     EXEC PGM=NEWWAIT,PARM='NUMBER OF SECONDS',\n//             REGION=5120K,\n//             COND=(0,NE)\n//*-------------------------------------------------\n//S000     EXEC PGM=XXXXXXXX,\n//             REGION=5120K,\n//*            RESTART=J000.S000,\n//             COND=(0,NE)\n//             COND=(8,LT,S060)\n//             COND=((4,NE,S060),(4,LT)) bypass if any test is true\n//             COND=(100,EQ,S070.EXTRACEX)\n//             COND=(EVEN)   even if a previous step abended\n//             COND=(ONLY)   only if a previous step abended\n//*  COBOL     PARM='&EOMDATE/'\n//*  COBOL     PARM='/UPSI=00000000'\n//*  COBOL     PARM='&EOMDATE/UPSI=00000000'\n//             PARM='this long string will terminate at column 71 on th\n//             e 1st line and continue on line 16 of the 2nd line/'\n//*  RPG       PARM=('DATE=&EOMDATE')\n//*  RPG       PARM=('UPSI=00000000')\n//*  RPG       PARM=('DATE=&EOMDATE','UPSI=00000000')\n\n//   debug     PARM='/TEST(ALL,,PROMPT,MFI%DBUGLU##:)'\n\n//             PARM=('&PL1OPT/DG=&DG,&MACP',             Continuation\n//             'UNILVL=&LVL,SITE=&SITE,AP=&AP',          at pos 4-16\n//             '&APPLOPT')\n\n//             VOL=SER=(SMS040,SMS041,SMS043,SMS044,\n//             SMS045,SMS046,SMS047),\n\n//ddname       ddname is 1 through 8 alphanumeric or national ($, #, @)\n               characters.\n\n//STEPLIB  DD  DSN=userid.ISPF.OBJ,DISP=SHR\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=D\n//SYSPRINT DD  SYSOUT=*\n//SYSDBOUT DD  SYSOUT=*\n//SYSABOUT DD  SYSOUT=*\n//SORTWK01 DD  UNIT=LOFDA,SPACE=(CYL,(50,10))\n//XXXXXXX  DD  DSN=XXXXXXXXXXXXXXXXXXX,                *SEQ INPUT\n//             DCB=EROPT=SKP,DCB=BUFNO=100,\n//             DISP=SHR\n//XXXXXXX  DD  DSN=XXXXXXXXXXXXXXXXXXX,                *VSAM INPUT\n//             DISP=SHR,\n//             AMP=('BUFNI=X,BUFND=X,BUFSP=XXXXXX')\n//XXXXXXX  DD  DSN=&SYSX..STATIC.PARMLIB(XXXXXXXX),    *INPUT\n//             DISP=SHR\n\n          send output to multiple destinations from one DD\n\n//OUT1     OUTPUT CLASS=X,FORMS=X116,DEST=U036,NOTIFY=MHPJES2.userid\n//OUT2     OUTPUT CLASS=X,FCB=STD,DEST=U336,PRTY=200  0-255\n//SYSUT2   DD  SYSOUT=(,TEST,),OUTPUT=(*.OUT1,*.OUT2)\n\n//OUT3     OUTPUT CLASS=E,DEST=U036\n//OUT4     OUTPUT CLASS=X,DEST=\n//PRINTER  DD  SYSOUT=(X,MHP0100B,X116),FCB=STD,OUTPUT=(*.OUT3,*.OUT4)\n\n//*-------------------------------------------------\n//*  DELETE DASD PRINT OUTPUT\n//*-------------------------------------------------\n//S010     EXEC PGM=IEFBR14,\n//             REGION=5120K,\n//             COND=(0,NE)\n//SYSPRINT DD  SYSOUT=*\n//DASD1    DD  DSN=userid.proc.PRINT1,\n//             DISP=(MOD,DELETE,DELETE),\n//             SPACE=(TRK,(30,10)),UNIT=LOFDA\n//*-------------------------------------------------\n//PRINTER  DD  DSN=userid.proc.PRINT1,\n//             DISP=(NEW,CATLG,DELETE),\n//             SPACE=(TRK,(30,10)),UNIT=LOFDA,\n//             DCB=(DSORG=PS),LRECL=81 or 133,RECFM=FBA\n//*-------------------------------------------------\n//PRINTER  DD  SYSOUT=(&SOUT01,,&FORM01),\n//             DCB=RECFM=FM,\n//             FCB=&FCB01,\n//             DEST=PRTC,\n//             HOLD=YES,         Retain report in hold queue\n//             COPIES=&COPY01\n\n//JESOUT   DD  SYSOUT=(A,INTRDR)  submit jobs/commands to the intrdr\n//TAPE     DD  DSN=XXXXXXXXXXXXXXXXXX,                 *OUTPUT\n//             DISP=(NEW,CATLG,DELETE),\n//*            DISP=(OLD,UNCATLG,KEEP),\n//             BLKSIZE=0,\n\n//             BLKSZLIM=2G, requests larges blk supported by hardware\n//             DATACLAS=MEDIA4              * 600000 series tapes\n//             DATACLAS=NOTMM,UNIT=3590     * 500000 series tapes\n//             UNIT=(3480,,DEFER),\n                since a step can include a dataset that the program\n                might not use, include DEFER to avoid mounting the\n                volume for the data set until the dataset is opened.\n\n//    UNIT=(/0491,,,SMSHONOR)   * send data to particular drive\n\n//             UNIT=(,,DEFER)   * use with iefbr14 to delete a migrated\n                                 dataset w/o recall\n\n//             LABEL=(4,SL),                * 4th file on tape\n                tape catalog entries contain the file sequence nbr\n//             LABEL=(,NL),\n//               VOL=SER=(PAATB1,PAATB2),   *NL to 2 vols: 2 names req\n//\n//             RETPD=#,                     * scratch after # days\n\n//             VOL=SER=XXXXXX,LABEL=##,\n//             VOL=(PRIVATE)                * new tape\n//             VOL=(,RETAIN),               * skip tape unload\n//             VOL=(,RETAIN,SER=XXXXXX),\n//             VOL=(,RETAIN,SER=(XXXXXX,XXXXXX)),\n//             VOL=(,,,6),                  * allow 5 to 20 tapes\n//             VOL=(,,2),\n                start searching at 2ND TAPE for dataset\n\n                VOL=SER and VOL=REF are mutually exclusive\n//             VOL=SER=JAN01,\n//             VOL=REF=DSNAME,\n//             VOL=REF=*.DDNAME,\n//             VOL=REF=*.STEPNAME.DDNAME,\n//             VOL=REF=*.STEPNAME.PROCSTEPNAME.DDNAME,\n//             VOL=(,RETAIN,,,REF=*.STEPNAME.PROCSTEPNAME.DDNAME),\n//             VOL=(,RETAIN,,6,REF=*.STEPNAME.PROCSTEPNAME.DDNAME),\n//             VOL=(,,,6,REF=*.STEPNAME.PROCSTEPNAME.DDNAME),\n\n//     ex:     VOL=(,RETAIN,,,REF=*.S050.PAXMST.PASMSTIN)\n\n//  job        LBL=7,RTN='(,RETAIN,,,REF=*.J060.S020.TAPE)',\n//     proc    LABEL=(&LBL,SL),\n//     proc    VOL=&RTN\n\n//             RECFM=FB,LRECL=\n//             DCB=(OPTCD=Q)   Convert EBCDIC to ASCII at tape write\n                              Convert ASCII to EBCDIC at tape read\n//             DCB=(OPTCD=W)   Validity check for write operations\n//             DCB=(OPTCD=C)   Chained scheduling\n//             DCB=(OPTCD=B)\n                qsam tape: requests that the eov routine\n                ignore the eof.  for sl labels, this allows tapes to\n                be read out of sequence, or concatenation of tapes\n                with the same dsn.\n//             DCB=(TRTCH=COMP/NOCOMP)   Tape compaction (3480 or lower)\n\n//DELTAP   DD  DSN=filename,\n//             UNIT=(CART,,DEFER)  * use UNIT=AFF= to force tape mounts\n//         DD  DSN=filename,       * to a single physical device\n//             UNIT=AFF=DELTAP\n\n//DASD     DD  DSN=XXXXXXXXXXXXXXXXXX,                 *OUTPUT\n//             DISP=(NEW,CATLG,DELETE),\n//             DATACLAS=D0C0PS,LRECL=80,RECFM=FB,\n//             FREE=CLOSE            release file upon close rather\n//*                                  than at end of step\n//DEBUGFL  DD  DISP=SHR,DSN=&ADMX..MHPSSD.DEBUG.FILE01,FREE=CLOSE\n//*\n//TEMP     DD  DSN=&&PHHOLD2,                          *OUTPUT\n//             DISP=(NEW,PASS,DELETE),\n//             UNIT=LOFDA,\n//             SPACE=(TRK,(15,2),RLSE),\n//             RECFM=FB,LRECL=80,DCB=(DSORG=PS)\n//KSDS     DD  DSN=XXXXXXXXXXXXXXXXXX,                 *define vsam\n//             DISP=(NEW,CATLG,DELETE),\n//             SPACE=(CYL,(20,5)),UNIT=LOFDA,\n//             LRECL=   ,KEYLEN=  ,KEYOFF=0,RECORG=KS,\n//             AMP=('BUFNI=3,BUFND=30')\n//DASD     DD  DSN=XXXXXXXXXXXXXXXXXX,                 *OUTPUT\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=(LOFDA,2),                         *multi-volume\n//             VOL=SER=SVMXXX,\n//             SPACE=(,(,,100))        override DFSMS directory only\n//             SPACE=(ABSTR,(qty,loc)) place at exact track location\n//             SPACE=(LRECL,(   ,  ,  ),RLSE),AVGREC=/U/K/M\n//             SPACE=(CYL/TRK/15476,(   ,  ,  ),RLSE,CONTIG),\n//             RECFM=FB,LRECL=    ,DCB=(DSORG=PS)\n//             DCB=(OPTCD=W)   WRITE CHECK\n//             DCB=YYYYYYYYYYYYYYYYYYY   allocate filex using filey dcb\n//             LIKE=YYYYYYYYYYYYYYYYYY   allocate filex using filey dcb\n//\n   variable   in program    100 lrecl\n              in jcl        104 lrecl\n\n   dsorg      po = partitioned dataset\n              ps = sequential dataset\n   recfm      f  = fixed            v  = variable\n              fb = fixed blocked    vb = variable blocked\n              u  = undefined length a  = iso/ansi control chars\n              m  = machine code control chars\n//\n//LOADLIB  DD  DSN=XXXXXXXXXXXXXXXXXX,                 *OUTPUT\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=LOFDA,VOL=SER=SVMXXX,\n//             DATACLAS=DLOAD,\n//             DSNTYPE=LIBRARY,        define PDSE extended library\n//             SPACE=(TRK,(150,0,80)),\n//             RECFM=U,LRECL=0,BLKSIZE=23476,DCB=(DSORG=PO,OPTCD=W)\n//\n//DD1      DD *,DLM=AA\n ASDFASDFASDFASDF\nAA\n//DD2      DD DATA\n//S000     EXEC PGM=XXXXXXXX               DATA: used to access jcl as\n//FILE     DD DSN=SYSP.CHESTER,DISP=SHR          instream data\n/*\n   block = multiple of record size < = 15476.\n   #1 = (((2 * #records) / block) * lrecl) rounded. #2 = 1/10th of #1.\n\n\n//*-------------------------------------------------\n//*  *$B1RSW1 AND *$B1RSW2 ARE HIGH PRIORITY ADHOCS.\n//*  LET THE JOBS THAT CREATE THEM - PCD02T03 AND PCD02T08 -\n//*  RUN FOR TWO HOURS AND THEN INCREASE THEIR PRIORITY.\n//*-------------------------------------------------\n//M010     EXEC PGM=MIS0685B,\n//             REGION=5120K,\n//             PARM='N00000000/'\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=D\n//SYSPRINT DD  SYSOUT=*\n//PARM01   DD  DISP=SHR,DSN=PLSMS.SMSSM00L.H00T0.SYSIN(PCD02T08)\n//OUTNOT   DD  DUMMY\n//OFFSET   DD  DISP=SHR,DSN=APSP.STATIC.PARMLIB(MIS10010)\n//*-------------------------------------------------\n//*  submit command to increase the priority on a job\n//*  -or-  submit job to internal reader\n//*-------------------------------------------------\n//M020     EXEC PGM=IEBGENER,REGION=5120K,\n//             COND=(4,NE,M010)\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DUMMY\n//SYSUT1   DD  DSN=PLSMS.SMSSM00L.H00T0.SYSIN(PCD02T06),DISP=SHR\n//SYSUT2   DD  SYSOUT=(A,INTRDR)\n//*  this command is submitted\n//*    /*$VS,'E PCD02T08,SRVCLASS=PRDBATHI'\n//*-------------------------------------------------\n//*  ISSUE COND CODE 0004 IF FILE IS EMPTY\n//*-------------------------------------------------\n//S030     EXEC PGM=IDCAMS,\n//             COND=(0,NE),\n//             REGION=5120K\n//SYSPRINT DD  SYSOUT=*\n//IFILE01  DD  DSN= filename\n//SYSIN    DD  DSN=APSP.IDCAMS.PARMLIB(PARM0006),DISP=SHR\n//*-------------------------------------------------\n\nMHP0775B - purge records from standard record length files\n Valid file lengths: 00080 00081 00100 00132 00133 00200 00300 00500\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DOCPROO": {"ttr": 5642, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00U\\x01\\x19\\x07O\\x01\\x19\\x07O\\t%\\x01\\x0e\\x01\\t\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-15T00:00:00", "modifydate": "2019-03-15T09:25:55", "lines": 270, "newlines": 265, "modlines": 0, "user": "IANNONE"}, "text": "      *\n      *   standard online COBOL procedure division\n      *   by now - 2019 - this is pretty old school\n      *   with the emphasis on pretty (insert dinosaur emoticon here)\n      *\n       LINKAGE SECTION.\n\n       01  DFHCOMMAREA.\n           05  DFH-COMMAREA            PIC  X(XXX).\n\n      /\n       PROCEDURE DIVISION.\n\n      ****************************************\n      *    VALUES OF EIBCALEN:\n      *      ZERO : INITIAL START - SEND FIRST MAP\n      *      1000 : INITIAL START - SEND FIRST MAP\n      *      1010 : EDIT INCOMING SCREEN & PROCESS\n      *      OTHER: ERROR - SEND MESSAGE\n      ****************************************\n       0100-START-PROCESS.\n      *    REFERENCE MODIFICATION    12345678\n      *    MOVE 123(1:3) TO X.   MOVE 345678(3:) TO X.\n      *    MOVE WS-ITEM(WS-SUB1)(4:5)  TO X.\n      *    SET (CONDITION) TO TRUE.\n      *    EVALUATE EIBCALEN      PERFORM VARYING X FROM 1 BY 1\n      *        WHEN 0  XXX...             UNTIL X > 10\n      *        WHEN 20 XXX...         MOVE A(X) TO B(X)\n      *        WHEN OTHER\n      *    END-EVALUATE           END-PERFORM\n      *    ITEMS UNDER OCCURS CLAUSES MAY BE ASSIGNED VALUES\n      *    EXEC CICS DUMP DUMPCODE('XXXX') END-EXEC.\n\n      *    LANGUAGE ENVIRONMENT\n      *    CALL \"CEESERV\" USING PARM1 PARM2 ... PARMN FC\n\n      *    EIBDATE    DATE IN 0CYYDDD FORMAT, where C is the\n      *               century indicator (0=1900, 1=2000 etc),\n      *               YY is the year and DDD is the day number.\n\n           EXEC CICS HANDLE CONDITION\n               MAPFAIL  (0000-MAPFAIL)\n               SYSIDERR (0000-SYSIDERR)\n               NOSPACE  (0000-NOSPACE)\n           END-EXEC.\n           MOVE EIBCALEN                      TO WS-EIBCALEN.\n           MOVE EIBAID                        TO WS-EIBAID.\n\n           IF WS-EIBAID = DFHCLEAR\n               EXEC CICS SEND CONTROL\n                   FREEKB\n                   ERASE\n               END-EXEC\n               EXEC CICS RETURN\n               END-EXEC.\n\n           IF WS-EIBCALEN = ZERO\n               MOVE ' ERROR INITIATING TTTT - PLEASE USE XXXX'\n                                              TO WS-MESSAGE\n               GO TO 0000-SEND-MESSAGE\n           ELSE\n           IF WS-EIBCALEN = ZERO\n               GO TO 0000-SEND-INITIAL-MAP\n           ELSE\n           IF WS-EIBCALEN = 1\n               MOVE DFH-COMMAREA              TO WS-COMMAREA\n               GO TO 0000-CHECK-KEYS.\n\n           MOVE ' UNABLE TO CONTINUE TTTT DUE TO AN INVALID COMMAREA'\n                                              TO WS-MESSAGE.\n           GO TO 0000-SEND-MESSAGE.\n\n       0000-SEND-INITIAL-MAP.\n           MOVE LOW-VALUE                    TO MAP010AI.\n           MOVE SPACE                        TO WS-COMMAREA.\n           INITIALIZE WS-COMMAREA.\n           MOVE SPACE                        TO WS-STV1400B-FIELDS.\n           MOVE 'M/D/Y '                     TO STV1400B-OUT.\n           CALL 'STV1400B' USING WS-STV1400B-FIELDS.\n           MOVE STV1400B-DATA                TO WS-1-MDY8.\n           EXEC CICS SEND\n               MAP ('MAP010A')\n               MAPSET ('MAP010M')\n               MAPONLY - DO NOT USE IF SENDING ANY DATA\n               ERASE\n               CURSOR - IC SET UP?\n           END-EXEC.\n           EXEC CICS RETURN\n               TRANSID ('TTTT')\n               COMMAREA (WS-COMMAREA)\n               LENGTH (XX)\n           END-EXEC.\n\n       0000-CHECK-KEYS.\n           IF WS-EIBAID = DFHENTER OR DFHPF8\n               GO TO 0000-PROCESS-MAP-A\n           ELSE\n           IF WS-EIBAID = DFHPF3\n               GO TO 0000-SEND-INITIAL-MAP\n           ELSE\n           IF WS-EIBAID = DFHPF7 OR DFHPF8\n               GO TO 0000-        .\n\n           MOVE 'INVALID KEY PRESSED'         TO STVMSGI.\n           MOVE -1                            TO FFFFFFL.\n           GO TO 0000-SEND-MAP-DATAONLY.\n\n      ****************************************\n      *    X\n      ****************************************\n       0000-PROCESS-MAP-A.\n           EXEC CICS RECEIVE\n               MAP ('MAP010A')\n               MAPSET ('MAP010M')\n           END-EXEC.\n\n           MOVE 'STVMSG' 'STVMSL'             TO STVMSGI.\n\n           PERFORM 0000-EDIT-FIELDS.\n\n           IF STVMSGI NOT = 'STVMSG'\n           IF STVMSGI NOT = 'STVMSL'\n               GO TO 0000-SEND-MAP-DATAONLY.\n\n           EXEC CICS HANDLE CONDITION\n               NOTFND (0000-NOTFND-AAAAAAAA)\n               NOTOPEN (0000-NOTOPEN-AAAAAAAA)\n           END-EXEC.\n           PERFORM 0000-READ-AAAAAAAA.\n\n      ****************************************\n      *    THE FOLLOWING CODE WAS BORROWED FROM ISR0220C\n      ****************************************\n      *    begin browse process - if dfhenter of dfhpf8, use\n      *    ca-bot-key, else use ca-top-key to start browse.\n      ****************************************\n           IF WS-EIBAID = DFHPF7\n               MOVE SPACE                     TO WS-TOP-SW\n               PERFORM 1200-BROWSE-PREV THRU\n                       1200-BROWSE-PREV-EXIT\n               IF WS-TOP-SW = 'Y'\n                   PERFORM 0900-BROWSE-LOOP THRU\n                           0900-BROWSE-LOOP-EXIT\n               ELSE\n                   CONTINUE\n           ELSE\n           IF CA-BOT-KEY = SPACE\n               MOVE 'N'                      TO WS-STARTBR-SW\n               MOVE 'End of file'            TO STVMSGI\n           ELSE\n               PERFORM 0900-BROWSE-LOOP THRU\n                       0900-BROWSE-LOOP-EXIT.\n           IF WS-STARTBR-SW = SPACE\n               PERFORM 1700-ENDBR-ISRREQ.\n           MOVE -1                            TO SEL01L.\n           GO TO 0000-SEND-MAP-DATAONLY.\n\n       0000-EDIT-FIELDS.\n           IF FFFFFFA = CC-EOF-KEY\n               MOVE 1                         TO FFFFFFL.\n           IF FFFFFFL > ZERO\n               MOVE NORM-UNPROT-ALPHA-FSET    TO FFFFFFA\n               INSPECT FFFFFFI REPLACING ALL LOW-VALUE BY '_'\n               INSPECT FFFFFFI REPLACING ALL     SPACE BY '_'\n               PERFORM 0000-JUSTIFY-NBR\n               MOVE FFFFFFI                   TO WS-FFFFFF\n               INSPECT WS-FFFFFF REPLACING ALL '_' BY SPACE.\n           IF FFFFFFL > ZERO\n               IF IN ERROR\n                   MOVE BRT-UNPROT-ALPHA-FSET TO FFFFFFA\n                   MOVE -1                    TO FFFFFFL\n                   MOVE 'This field is in error' TO STVMSGI.\n\n      ****************************************\n      *    I/O ROUTINES\n      ****************************************\n           COPY 'DOCFILE'\n\n       0000-READ-AAAAAAAA.\n           EXEC CICS READ\n               DATASET ('AAAAAAAA')\n               RIDFLD (FFFFFF)\n               INTO (AAAAAAAA-RECORD)\n           END-EXEC.\n\n       0000-READ-AAAAAAAA-UPDATE.\n           EXEC CICS READ\n               DATASET ('AAAAAAAA')\n               RIDFLD (FFFFFF)\n               INTO (AAAAAAAA-RECORD)\n               UPDATE\n           END-EXEC.\n\n       0000-REWRITE-AAAAAAAA.\n           EXEC CICS REWRITE\n               DATASET ('AAAAAAAA')\n               FROM (AAAAAAAA-RECORD)\n           END-EXEC.\n\n       0000-WRITE-AAAAAAAA.\n           EXEC CICS WRITE\n               DATASET ('AAAAAAAA')\n               RIDFLD (FFFFFF)\n               FROM (AAAAAAAA-RECORD)\n           END-EXEC.\n\n      ****************************************\n      *    CENTER OUTPUT MESSAGE AND SEND MAP\n      ****************************************\n       0000-SEND-MAP-DATAONLY.\n           CALL 'STV1270B' USING DFHEIBLK DFHCOMMAREA STVMSGI.\n           EXEC CICS SEND\n               MAP ('MAP010A')\n               MAPSET ('MAP010M')\n               CURSOR\n               DATAONLY\n           END-EXEC.\n           EXEC CICS RETURN\n               TRANSID ('TTTT')\n               COMMAREA (WS-COMMAREA)\n               LENGTH (##)\n           END-EXEC.\n\n      ****************************************\n      *    WARNING MESSAGES\n      ****************************************\n       0000-FFFFFF-ERROR-SETUP.\n           MOVE BRT-UNPROT-ALPHA-FSET         TO FFFFFFA.\n           MOVE -1                            TO FFFFFFL.\n           GO TO 0000-SEND-MAP-DATAONLY.\n\n       0000-NOTOPEN-AAAAAAAA.\n           MOVE 'THE AAAAAAAA FILE IS NOT CURRENTLY OPEN' TO STVMSGI.\n           MOVE -1                            TO FFFFFFL.\n           GO TO 0000-SEND-MAP-DATAONLY.\n\n      ****************************************\n      *    TERMINATION MESSAGES\n      ****************************************\n       0000-MAPFAIL.\n           MOVE ' UNABLE TO CONTINUE TTTT DUE TO A MAPFAIL'\n                                              TO WS-MESSAGE.\n           GO TO 0000-SEND-MESSAGE.\n\n       0000-SYSIDERR.\n           MOVE ' UNABLE TO CONTINUE TTTT DUE TO A SYSIDERR'\n                                              TO WS-MESSAGE.\n           GO TO 0000-SEND-MESSAGE.\n\n       0000-NOTFND-AAAAAAAA.\n           MOVE ' UNABLE TO CONTINUE TTTT - AAAAAAAA RECORD NOT FOUND'\n                                              TO WS-MESSAGE.\n           GO TO 0000-SEND-MESSAGE.\n\n       0000-NOSPACE.\n           MOVE ' UNABLE TO CONTINUE TTTT - NOSPACE ON AAAAAAAA'\n                                              TO WS-MESSAGE.\n           GO TO 0000-SEND-MESSAGE.\n\n       0000-SEND-MESSAGE.\n           EXEC CICS SEND\n               FROM (WS-MESSAGE)\n               LENGTH (80)\n               ERASE\n           END-EXEC.\n           EXEC CICS RETURN\n           END-EXEC.\n\n      ************************************ END XXXXXXXX\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DOCREPRO": {"ttr": 5892, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00&\\x01\\x180/\\x01\\x192?\\x11\\x06\\x00 \\x00 \\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-10-29T00:00:00", "modifydate": "2019-11-19T11:06:26", "lines": 32, "newlines": 32, "modlines": 0, "user": "IANNONE"}, "text": "//*-------------------------------------------------\n//*   REPRO XXXX.XXXXXX.XXXXXXXX TO XXXX.XXXXXX.XXXXXXXX\n//*-------------------------------------------------\n//S000     EXEC PGM=IDCAMS,\n//             REGION=5120K,\n//*            RESTART=J010.S000,\n//             COND=(0,NE)\n//SYSUDUMP DD  SYSOUT=D\n//SYSPRINT DD  SYSOUT=*\n//IFILE01  DD  DSN=&XXXX..XXXXXX.XXXXXXXX,             *INPUT\n//             AMP=('BUFNI=2,BUFND=20'),\n//             DISP=SHR\n//OFILE01  DD  DSN=&XXXX..XXXXXX.XXXXXXXX,             *OUTPUT TO VSAM\n//             AMP=('BUFNI=2,BUFND=20'),\n//             DISP=SHR\n//OFILE01  DD  DSN=&XXXX..XXXXXX.XXXXXXXX,             *OUTPUT TO DISK\n//             AMP=('BUFNI=2,BUFND=20'),\n//             DISP=(NEW,CATLG,DELETE),\n//*            DISP=(OLD,KEEP,KEEP),                    (RESTORE)\n//             UNIT=(SYSDA),\n//             SPACE=(XXXXX,(XXXX,XXX),RLSE),\n//             LRECL=   ,KEYLEN=  ,KEYOFF=0,RECORG=KS,\n//             AMP=('BUFNI=3,BUFND=30')\n//SYSIN    DD  DSN=APSP.IDCAMS.PARMLIB(PARM0002),      *INPUT\n//             DISP=SHR\n//*USE PARM0002 IF ADDING RECORDS TO FILE AND DUPLICATE RECORDS\n//*             SHOULD NOT BE REPLACED\n//*USE PARM0004 (W/REPLACE) IF ADDING RECORDS TO FILE AND DUPLICATE\n//*             RECORDS SHOULD BE REPLACED\n//*USE PARM0025 (W/REUSE) TO SET A REUSABLE VSAM FILE TO AN EMPTY STATE\n//*             BEFORE COPYING RECORDS\n//*-------------------------------------------------\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOCRIGHT": {"ttr": 5894, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00&\\x01\\x180/\\x01\\x180O\\x13Q\\x00_\\x00_\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-10-29T00:00:00", "modifydate": "2018-10-31T13:51:26", "lines": 95, "newlines": 95, "modlines": 0, "user": "IANNONE"}, "text": "\n      *---------------------------------------\n      *    right justify a number (without sign)\n      *\n      *    convert '  12345          '  to  '00000012345'\n      *---------------------------------------\n           05  WS-JR-NBR               PIC  X(11)    VALUE SPACE.\n           05  WS-JR-STRING            PIC  X(50)    VALUE SPACE.\n\n           MOVE NBR                           TO WS-JR-STRING.\n           PERFORM 0000-RIGHT-JUSTIFY-NBR.\n\n       0000-RIGHT-JUSTIFY-NBR.\n           MOVE SPACE                         TO WS-JR-NBR.\n           MOVE 11                            TO WS-STR2.\n           PERFORM VARYING WS-STR1 FROM 50 BY -1\n               UNTIL WS-STR1 < 1\n               IF WS-STR2 > ZERO\n                   IF WS-JR-STRING(WS-STR1: 1) NUMERIC\n                       MOVE WS-JR-STRING(WS-STR1: 1)\n                         TO WS-JR-NBR(WS-STR2: 1)\n                       SUBTRACT 1 FROM WS-STR2\n                   END-IF\n               END-IF\n           END-PERFORM.\n           INSPECT WS-JR-NBR REPLACING LEADING SPACE BY ZERO.\n\n      *---------------------------------------\n      *    right justify a number (with sign)\n      *\n      *    convert ' -12345.00       '  to  '00001234500'\n      *---------------------------------------\n           NOTE: DO NOT MOVE '.' INTO WS-JR-NBR - IT IS IMPLIED\n           05  WS-JR-STRING            PIC  X(50)    VALUE SPACE.\n           05  WS-JR-SIGN              PIC  X        VALUE SPACE.\n           05  WS-JR-NBR               PIC  X(11)    VALUE SPACE.\n           05  WS-JR-NBR-N REDEFINES WS-JR-NBR\n                                       PIC  9(09)V99.\n           05  WS-JR-NBR-S             PIC S9(09)V99 VALUE ZERO.\n\n           MOVE NBR                           TO WS-JR-STRING.\n           PERFORM 0000-RIGHT-JUSTIFY-WITH-SIGN.\n\n       0000-RIGHT-JUSTIFY-WITH-SIGN.\n           MOVE SPACE                         TO WS-JR-SIGN.\n           MOVE SPACE                         TO WS-JR-NBR.\n           MOVE 11                            TO WS-STR2.\n           PERFORM VARYING WS-STR1 FROM 50 BY -1\n               UNTIL WS-STR1 < 1\n               IF WS-STR2 > ZERO\n                   IF WS-JR-STRING(WS-STR1: 1) NUMERIC\n                       MOVE WS-JR-STRING(WS-STR1: 1)\n                         TO WS-JR-NBR(WS-STR2: 1)\n                       SUBTRACT 1 FROM WS-STR2\n                   ELSE\n                   IF WS-JR-STRING(WS-STR1: 1) = '-'\n                       MOVE 'Y'               TO WS-JR-SIGN\n                   END-IF\n                   END-IF\n               END-IF\n           END-PERFORM.\n           INSPECT WS-JR-NBR REPLACING LEADING SPACE BY ZERO.\n           MOVE WS-JR-NBR-N                   TO WS-JR-NBR-S.\n           IF WS-JR-SIGN = 'Y'\n               COMPUTE WS-JR-NBR-S = WS-JR-NBR-S * -1.\n\n\n      *---------------------------------------\n      *    right justify a string without removing imbedded spaces\n      *\n      *    convert ' A  BCDEF  123   '  to  '    A  BCDEF  123'\n      *---------------------------------------\n           05  WS-JR-STRING            PIC  X(50)    VALUE SPACE.\n           05  WS-JR-RIGHT             PIC  X(50)    VALUE SPACE.\n\n           MOVE STRING                        TO WS-JR-STRING.\n           PERFORM 0000-RIGHT-JUSTIFY-STRING.\n\n       0000-RIGHT-JUSTIFY-STRING.\n           MOVE SPACE                         TO WS-JR-RIGHT.\n           MOVE 50                            TO WS-STR2.\n           PERFORM VARYING WS-STR1 FROM 50 BY -1\n               UNTIL WS-STR1 < 1\n               IF (WS-JR-STRING(WS-STR1: 1) = SPACE OR LOW-VALUE)\n                   AND (WS-STR2 = 50)\n                   CONTINUE\n               ELSE\n                   MOVE WS-JR-STRING(WS-STR1: 1)\n                     TO WS-JR-RIGHT(WS-STR2: 1)\n                   SUBTRACT 1 FROM WS-STR2\n               END-IF\n           END-PERFORM.\n\n      *=============================================\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DOCRULE": {"ttr": 5897, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00B\\x01\\x180/\\x01\\x180O\\x13Q\\x00\\x02\\x00\\x02\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2018-10-29T00:00:00", "modifydate": "2018-10-31T13:51:42", "lines": 2, "newlines": 2, "modlines": 0, "user": "IANNONE"}, "text": "   +  *01  05  '         1         2         3         4         5\n   +  **********1234567890123456789012345678901234567890123456789012345*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOCTOP": {"ttr": 5899, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x007\\x01\\x18)\\x9f\\x01\\x19\\x07O\\tY\\x00\\x1b\\x00\\x19\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2018-10-26T00:00:00", "modifydate": "2019-03-15T09:59:37", "lines": 27, "newlines": 25, "modlines": 0, "user": "IANNONE"}, "text": "/*PRIORITY     01\n//useridJ  JOB (5000,'                           '),\n//             '                    ',\n//             CLASS=S,\n//             MSGCLASS=R,\n//*            RESTART=J010.S010,\n//*            RESTART=S000.EXTRACEX,\n//*            TYPRUN=SCAN,\n//             MSGLEVEL=(1,1)\n/*JOBPARM PROCLIB=PROCxx        prod\n/*JOBPARM PROCLIB=PROCxx        test\n//*-------------------------------------------------\n//*  DOCTOP is intended as a working new-job shell\n//*  DOCJOB is meant more for coding examples\n//*  alter and use in your library as needed\n//*-------------------------------------------------\n//PROCLIB  JCLLIB ORDER=(userid.ISPF.FILE488,\n//             prod prefix.PROCLIB,\n//             test prefix.PROCLIB)\n//JOBLIB   DD  DISP=SHR,DSN=test LOADLIB1\n//         DD  DISP=SHR,DSN=prod LOADLIB1\n//         DD  DISP=SHR,DSN=test LOADLIB2\n//         DD  DISP=SHR,DSN=prod LOADLIB2\n//*-------------------------------------------------\n//         PEND\n//J010     EXEC XXXXX,FAC=X\n//*-------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DOCWSB": {"ttr": 5901, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00X\\x01\\x180/\\x01 \\x03o\\x10\\x01\\x00v\\x00\\x81\\x00\\x00\\xd4\\xc9\\xe2\\xf1\\xf4\\xf6@@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2018-10-29T00:00:00", "modifydate": "2020-02-05T10:01:58", "lines": 118, "newlines": 129, "modlines": 0, "user": "MIS146"}, "text": "      *\n      *    \"batch\" working-storage section\n      *\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage XXXXXXXX start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-VSAM.\n               10  WS-VSAM-RETURN      PIC S99       USAGE BINARY.\n               10  WS-VSAM-COMPONENT   PIC S9        USAGE BINARY.\n               10  WS-VSAM-REASON      PIC S999      USAGE BINARY.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n      *    note: never set return code to '0519'.  CICS might not like.\n      *    note: return-code max value: 4095\n           05  WS-TALLY                PIC S9(04)    VALUE ZERO COMP.\n           05  WS-LS-DATA              PIC  X(10)    VALUE SPACE.\n           05  FILLER REDEFINES WS-LS-DATA.\n               10  WS-LS-FACILITY      PIC  X.\n               10  WS-LS-CYMD          PIC  X(08).\n               10  WS-LS-EXTRA         PIC  X.\n           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.\n           05  WS-2-CYMD               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-2-CYMD.\n               10  WS-2-CYMD-C         PIC  XX.\n               10  WS-2-CYMD-Y         PIC  XX.\n               10  WS-2-CYMD-M         PIC  XX.\n               10  WS-2-CYMD-D         PIC  XX.\n           05  WS-CALL-STV0270B        PIC  X(08)    VALUE 'STV0270B'.\n           05  WS-CALL-STV0400B        PIC  X(08)    VALUE 'STV0400B'.\n           05  WS-AAAAAAAA-PT-NBR      PIC  9(11)    VALUE ZERO.\n           05  WS-BBBBBBBB-PT-NBR      PIC  9(11)    VALUE ZERO.\n           05  WS-VVVVVVVV-RCD-LEN     PIC  9(05)    VALUE ZERO.\n           05  WS-INTRDR-END           PIC  X(05)    VALUE '/*EOF'.\n      *    DELIMITER |\n           05  WS-BAR1                 PIC  X        VALUE X'4F'.\n      *    DELIMITER \u00a6\n           05  WS-BAR2                 PIC  X        VALUE X'6A'.\n\n       01  WS-COPIED-FIELDS.\n      *    COPY FLAT002 REPLACING ==:F2:== BY ==FLAT02==.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-AAAAAAAA-CNT    PIC S9(07)    VALUE ZERO.\n           05  WS-SORT-RCD-CNT         PIC S9(07)    VALUE ZERO.\n           05  WS-WRITE-BBBBBBBB-CNT   PIC S9(07)    VALUE ZERO.\n\n       01  WS-PRINT-CONTROL            COMP.\n           05  WS-LINE-SUM             PIC S99       VALUE +90.\n           05  WS-LINE-MAX             PIC S99       VALUE +56.\n           05  WS-PAGE-CNT             PIC S9(05)    VALUE ZERO.\n           05  WS-SPACE-CONTROL        PIC S99       VALUE ZERO.\n           05  WS-WRITE-PAGE-CNT       PIC  9(05)    VALUE ZERO.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(07)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(07)    VALUE ZERO.\n           05  WS-SUB3                 PIC S9(07)    VALUE ZERO.\n           05  WS-STR1                 PIC S9(07)    VALUE ZERO.\n           05  WS-STR2                 PIC S9(07)    VALUE ZERO.\n\n      *  note: if parm table, do not include last 8 bytes\n      *  (these are sometimes filled with numeric digits)\n       01  WS-TABLES.\n           05  WS-PARM01-TABLE         PIC  X(XXX)   VALUE SPACE.\n           05  WS-PARM01-ITEM REDEFINES WS-PARM01-TABLE\n                                       OCCURS XX TIMES.\n               10  WS-ITEM1            PIC  X(XX).\n               10  WS-ITEM2            PIC  X(XX).\n\n       01  WS-SWITCHES.\n           05  WS-END-AAAAAAAA-SW      PIC  X        VALUE 'N'.\n               88  END-OF-AAAAAAAA                   VALUE 'Y'.\n               88  MORE-AAAAAAAA-RCDS                VALUE 'N'.\n           05  WS-END-BBBBBBBB-SW      PIC  X        VALUE 'N'.\n               88  END-OF-BBBBBBBB                   VALUE 'Y'.\n               88  MORE-BBBBBBBB-RCDS                VALUE 'N'.\n           05  WS-END-SORT-SW          PIC  X        VALUE 'N'.\n               88  END-OF-SORT                       VALUE 'Y'.\n               88  MORE-SORT-RCDS                    VALUE 'N'.\n           05  WS-FIRST-RCD-SW         PIC  X        VALUE 'Y'.\n               88  FIRST-RECORD                      VALUE 'Y'.\n           05  WS-READ-AAAAAAAA-SW     PIC  X        VALUE 'Y'.\n           05  WS-READ-BBBBBBBB-SW     PIC  X        VALUE 'Y'.\n\n      *    year 2000 compatible date routine\n       01  WS-STV0400B-FIELDS.\n           05  STV0400B-DATA           PIC  X(10)    VALUE SPACE.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X6        PIC  X(06).\n               10  STV0400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X8        PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAYS       PIC  X(05).\n               10  FILLER              PIC  X(05).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAY        PIC  X(09).\n               10  STV0400B-DAY-NBR    PIC  X.\n           05  STV0400B-DATA2          PIC  X(10)    VALUE SPACE.\n           05  STV0400B-IN             PIC  X(06)    VALUE SPACE.\n           05  STV0400B-OUT            PIC  X(06)    VALUE SPACE.\n\n      *\n      *  copy 'DOCHDG1' or 'DOCHDG2' here\n      *        (8.5X14)      (8.5X11)\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  XXXXXXXX END  '.\n\n      *  copy 'DOCPROB' here\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DOCWSO": {"ttr": 5904, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00X\\x01\\x19\\x07O\\x01\\x19\\x07O\\t3\\x00U\\x00Q\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-15T00:00:00", "modifydate": "2019-03-15T09:33:58", "lines": 85, "newlines": 81, "modlines": 0, "user": "IANNONE"}, "text": "      *\n      *    \"online\" working-storage section\n      *\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' WORKING STORAGE XXXXXXXX START '.\n\n       01  WS-OUTPUT.\n           05  WS-MESSAGE              PIC  X(80)    VALUE SPACE.\n\n       01  WS-WORK-FIELDS.\n           05  WS-EIBAID               PIC  X        VALUE SPACE.\n           05  WS-EIBCALEN             PIC S9(04)    VALUE ZERO COMP.\n           05  WS-ABSTIME              PIC S9(16)    VALUE ZERO COMP.\n           05  WS-1-MDY8               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-1-MDY8.\n               10  WS-1-MDY8-MM        PIC  XX.\n               10  FILLER              PIC  X.\n               10  WS-1-MDY8-DD        PIC  XX.\n               10  FILLER              PIC  X.\n               10  WS-1-MDY8-YY        PIC  XX.\n           05  WS-QUOTIENT             PIC S9(04)    VALUE ZERO COMP.\n           05  WS-REMAIN               PIC S99       VALUE ZERO COMP.\n           05  WS-TERMID                             VALUE SPACE.\n               10  WS-TERMID-1X3.\n                   15  WS-TERMID-1X2   PIC  XX.\n                   15  WS-TERMID-3     PIC  X.\n               10  FILLER              PIC  X.\n\n       01  WS-SWITCHES.\n           05  WS-VALID-SW             PIC  X        VALUE SPACE.\n               88  VALID-OUTPAT                      VALUE 'A' THRU 'D'\n                                                           'K' THRU 'R'.\n\n           COPY MAP010M.\n       01  FILLER REDEFINES MAP010AI.\n           05  FILLER                  PIC  X(150).\n           05  MAP010-MAP              OCCURS 14 TIMES.\n               10  SEL-L               PIC S9(04) COMP.\n               10  SEL-A               PIC  X.\n               10  SEL-I               PIC  X.\n\n      *    ROUTINE TO CENTER A 79 BYTE OUTPUT MESSAGE\n      *    COPY CNTRMSG1.\n           COPY ATTRIB.\n           COPY CNTLCHAR.\n           COPY DFHAID.\n           COPY ECTABLE.\n\n       01  WS-COMMAREA.\n           05  CA-NBR-1                PIC  X(07)    VALUE SPACE.\n           05  CA-NBR-2                PIC  X(07)    VALUE SPACE.\n           05  CA-NBR-3                PIC  X(07)    VALUE SPACE.\n           05  CA-NBR-4                PIC  X(07)    VALUE SPACE.\n           05  CA-NINTH-RCD-SW         PIC  X        VALUE SPACE.\n               88  NINTH-RCD                         VALUE 'Y'.\n           05  FILLER                  PIC  X        VALUE SPACE.\n\n       01  WS-STV1400B-FIELDS.\n           05  STV1400B-DATA           PIC  X(10)   VALUE SPACE.\n           05  FILLER REDEFINES STV1400B-DATA.\n               10  STV1400B-ERROR      PIC  X(06).\n               10  STV1400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV1400B-DATA.\n               10  STV1400B-CYMD       PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES STV1400B-DATA.\n               10  STV1400B-DAYS       PIC  X(05).\n               10  FILLER              PIC  X(05).\n           05  FILLER REDEFINES STV1400B-DATA.\n               10  STV1400B-DAY        PIC  X(09).\n               10  STV1400B-DAY-NBR    PIC  X.\n           05  STV1400B-DATA2          PIC  X(10)   VALUE SPACE.\n           05  STV1400B-IN             PIC  X(06)   VALUE SPACE.\n           05  STV1400B-OUT            PIC  X(06)   VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  XXXXXXXX END  '.\n\n       COPY 'DOCPROO' HERE\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FTPGDG": {"ttr": 5907, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x003\\x01 \\x00/\\x01 \\x00o\\t\\t\\x01A\\x00(\\x00\\x00\\xd4\\xc9\\xe2\\xf1\\xf4\\xf6@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2020-01-02T00:00:00", "modifydate": "2020-01-06T09:09:33", "lines": 321, "newlines": 40, "modlines": 0, "user": "MIS146"}, "text": "\n  FTP UNKNOWN QUANTITY OF SOURCE FILES TO THE MAINFRAME\n\n  When I worked for a local hospital we had issues figuring out how\n  to FTP files to the mainframe when the quantity of source files\n  was unknown.  I looked for examples in various books and then online\n  but could not find a solution.\n\n  I developed very elaborate processes by which new mainframe filenames\n  were built based on whatever contents were found in the source\n  filename - usually a date or a version number.  IEBGENER steps were\n  also built and then submitted after the FTP job - these consolidated\n  the individual mainframe files into one file for further processing.\n  This could sometimes be a two-job process.\n\n  I always thought GDG's were the answer to this issue but never\n  saw an example of how to use them.\n\n  Then I changed jobs and learned how this is done.\n\n\n  1)  Define GDG with 225 potential versions.\n      In this case, \"PFX.INBOUND.GDGFILE\" is the GDG.\n\n  2)  Next, get a list of what files are waiting to pull\n      to the mainframe.  FTP appends \"FTP.LSOUTPUT\" to the file name.\n      See step S0030 in the example jcl below.\n\n      These FTP input parameters create file \"PFX.INBOUND.FTP.LSOUTPUT\"\n      containing the FTP list of files waiting to be FTP'd...\n\n        sign-on\n        password\n        change directory as needed\n        may need to specify \"ascii\"\n        lcd 'PFX.INBOUND'\n        ls *.dat  (DISK\n        quit\n\n\n        lcd 'PFX.INBOUND' is used to specify the prefix of the\n        file name that FTP creates to hold the generated list of\n        source filenames.\n\n        ls *.dat  (DISK  lists all source files with the .dat\n        extension.  to list all files, change to \"ls *\"\n\n      Resulting list of source files:\n\n        20010232693792.dat\n        20010232693793.dat\n        20010232693794.dat\n        20010232693795.dat\n\n  3)  Run this list of file names through a program to generate\n      FTP \"get\" input parameters for each file.\n      See step S0060 in the example jcl below.\n      I recommend limiting the number of \"GET\" statements your program\n      can generate to 225 - the same number as the GDG version\n      definition.  If there are more than 225 source files then your\n      program should skip/ignore them - they will be picked-up the\n      next time the job runs. Yes - GDG's can be defined up to 255\n      versions so you could go that high if necessary.\n\n      The trick to everything is the +001 below ... I didn't know\n      this was how it was done, assuming it would need to be +001 and\n      then +002 and +003 etc.\n\n      Resulting \"GET\" statements in file \"PFX.INBOUND.FILEGET\"\n      generated by your program:\n\n      get  20010232693792.dat       'PFX.INBOUND.GDGFILE(+001)'\n      get  20010232693793.dat       'PFX.INBOUND.GDGFILE(+001)'\n      get  20010232693794.dat       'PFX.INBOUND.GDGFILE(+001)'\n      get  20010232693795.dat       'PFX.INBOUND.GDGFILE(+001)'\n\n      The same program could also generate the delete statements,\n      either in the same flow or in a separate step, but be certain\n      these deletes are generated from the original list of source\n      filenames held in \"PFX.INBOUND.FTP.LSOUTPUT\" above.  DO NOT\n      \"regenerate\" the source filename list by running 2) above.\n      Additional files could have been placed into the source directory\n      and you don't want to delete these new files without having\n      pulled and processed them.\n\n      Resulting \"DELETE\" statements in file \"PFX.INBOUND.FILEDEL\"\n      generated by your program:\n\n      delete 20010232693792.dat\n      delete 20010232693793.dat\n      delete 20010232693794.dat\n      delete 20010232693795.dat\n\n  4)  Pull the source files up to the mainframe as in step S0070 below.\n\n  5)  Pull the GDG versions into your process by referencing the\n      GDG without any versions as in step S0080 below.\n\n  6)  Delete the source files as in step S0110 below.\n\n\n//EXAMPLE  PROC\n//*-------------------------------------------------\n//*\n//*  pull files from source server:\n//*      perform DIR for .dat files in xxx directory\n//*      build list of mainframe files from source .dat files\n//*      FTP data to mainframe\n//*      IEBGENER all GDG versions into one file\n//*  purge source .dat files from server\n//*\n//*-------------------------------------------------\n//*  delete work files\n//*-------------------------------------------------\n//S0010    EXEC PGM=IEFBR14\n//SYSPRINT DD  SYSOUT=*\n//DD01     DD  DSN=PFX.INBOUND.FTP.LSOUTPUT,                       *del\n//             DISP=(MOD,DELETE,DELETE),\n//             UNIT=SYSDA,SPACE=(TRK,(1,1))\n//DD02     DD  DSN=PFX.INBOUND.FILEGET,                            *del\n//             DISP=(MOD,DELETE,DELETE),\n//             UNIT=SYSDA,SPACE=(TRK,(1,1))\n//DD03     DD  DSN=PFX.INBOUND.FILEDEL,                            *del\n//             DISP=(MOD,DELETE,DELETE),\n//             UNIT=SYSDA,SPACE=(TRK,(1,1))\n//DD04     DD  DSN=PFX.INBOUND.COMBINE,                            *del\n//             DISP=(MOD,DELETE,DELETE),\n//             UNIT=SYSDA,SPACE=(TRK,(1,1))\n//*\n//*-------------------------------------------------\n//*  define work files to avoid jcl errors further down\n//*-------------------------------------------------\n//S0020    EXEC PGM=IEFBR14\n//SYSPRINT DD  SYSOUT=*\n//DD01     DD  DSN=PFX.INBOUND.FTP.LSOUTPUT,                       *new\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,SPACE=(TRK,(10,40)),\n//             DSORG=PS,RECFM=VB,LRECL=1028,BLKSIZE=6144\n//DD02     DD  DSN=PFX.INBOUND.FILEGET,                            *new\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,SPACE=(TRK,(1,1)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920)\n//DD03     DD  DSN=PFX.INBOUND.FILEDEL,                            *new\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,SPACE=(TRK,(1,1)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920)\n//DD04     DD  DSN=PFX.INBOUND.COMBINE,                            *new\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,SPACE=(TRK,(10,40)),\n//             DSORG=PS,RECFM=FB,LRECL=160,BLKSIZE=27840\n//*-------------------------------------------------\n//*  read directory for file names to transfer\n//*  output goes to PFX.INBOUND.FTP.LSOUTPUT\n//*-------------------------------------------------\n//S0030    EXEC PGM=FTP,PARM='(EXIT)',REGION=6M\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\ninput parameters from step 2) above\n//*\n//*-------------------------------------------------\n//*  ABEND if non-standard FTP issues\n//*-------------------------------------------------\n//IF01     IF (S0030.RC NE 00) THEN\n//ABEND1   EXEC PGM=ABEND\n//END01    ENDIF\n//*-------------------------------------------------\n//*  check for empty file\n//*-------------------------------------------------\n//S0040    EXEC PGM=IDCAMS\n//SYSPRINT DD  SYSOUT=*\n//INDD01   DD  DSN=PFX.INBOUND.FTP.LSOUTPUT,                       *mod\n//             DISP=MOD,\n//             UNIT=SYSDA,SPACE=(TRK,(1,1)),\n//             DSORG=PS,RECFM=VB,LRECL=1028,BLKSIZE=6144\n//SYSIN    DD  *\n      PRINT INFILE (INDD01) COUNT(1)\n/*\n//*\n//*-------------------------------------------------\n//*  IEFBR14 deletes of a base GDG with no versions causes a JCL error\n//*  so we define one version here\n//*-------------------------------------------------\n//S0050    EXEC PGM=IEFBR14,REGION=5120K,\n//             COND=(0,NE,S0040)\n//SYSPRINT DD  SYSOUT=*\n//DD01     DD  DSN=PFX.INBOUND.GDGFILE(+1),                        *new\n//             DISP=(NEW,CATLG,KEEP),\n//             UNIT=SYSDA,SPACE=(TRK,(1,1)),\n//             DSORG=PS,RECFM=FB,LRECL=160,BLKSIZE=27840\n//*\n//*-------------------------------------------------\n//*  build list of all .dat files to transfer into one or more\n//*  mainframe file names PFX.INBOUND.GDGFILE(+1)\n//*  PFX.INBOUND.GDGFILE is defined for 225 versions\n//*-------------------------------------------------\n//S0060    EXEC PGM= program from step 3) above\n//             COND=(0,NE,S0040)\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSOUT   DD  SYSOUT=*\n//INDD     DD  DISP=SHR,DSN=PFX.INBOUND.FTP.LSOUTPUT               *shr\n//GETFL    DD  DSN=PFX.INBOUND.FILEGET,                            *mod\n//             DISP=(MOD,KEEP,DELETE),\n//             UNIT=SYSDA,SPACE=(TRK,(1,1),RLSE),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920)\n//DELFL    DD  DSN=PFX.INBOUND.FILEDEL,                            *mod\n//             DISP=(MOD,KEEP,DELETE),\n//             UNIT=SYSDA,SPACE=(TRK,(1,1),RLSE),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920)\n//*\n//*-------------------------------------------------\n//*  pull files from server\n//*  output goes to dsn=PFX.INBOUND.GDGFILE +1 through +225\n//*\n//*  if FTP issues, restart from top\n//*-------------------------------------------------\n//S0070    EXEC PGM=FTP,PARM='(EXIT)',REGION=6M,\n//             COND=(0,NE,S0040)\n//OUTPUT   DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DISP=SHR,DSN=sysin file #1                          *shr\n//         DD  DISP=SHR,DSN=PFX.INBOUND.FILEGET                    *shr\n//         DD  DISP=SHR,DSN=sysin file #3                          *shr\n//*  sysin file #1\nsign-on\npassword\npossibly specify \"ascii\" option\nchange directories as needed\nLOCSITE BLK=27840 FILE=SEQ LR=160 REC=FB WRAP DCBDSN='SYS1.DSCB'\nLOCSITE UNIT=SYSDA TRACKS PRIMARY=200 SECONDARY=50\n//*  sysin file #3\nquit\n//*\n//*-------------------------------------------------\n//*  ABEND if non-standard FTP issues\n//*-------------------------------------------------\n//IF02     IF (S0070.RC NE 00) THEN\n//*\n//ABDEL    EXEC PGM=IEFBR14,REGION=5120K\n//SYSPRINT DD  SYSOUT=*\n//DD01     DD  DSN=PFX.INBOUND.GDGFILE,                            *del\n//             DISP=(MOD,DELETE,DELETE),\n//             UNIT=SYSDA,SPACE=(TRK,(1,1))\n//*\n//ABEND2   EXEC PGM=ABEND\n//*\n//END02    ENDIF\n//*\n//*-------------------------------------------------\n//*  if needed, combine all GDG files into one file\n//*-------------------------------------------------\n//S0080    EXEC PGM=IEBGENER,COND=(0,NE,S0040)\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DUMMY\n//SYSUT1   DD  DSN=PFX.INBOUND.GDGFILE,                  *all gdg files\n//             DISP=SHR\n//SYSUT2   DD  DSN=PFX.INBOUND.COMBINE,                            *mod\n//             DISP=(MOD,KEEP,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(100,10),RLSE),\n//             RECFM=FB,LRECL=160,BLKSIZE=27840\n//*\n//*-------------------------------------------------\n//*  check for empty file\n//*-------------------------------------------------\n//S0090    EXEC PGM=IDCAMS\n//SYSPRINT DD  SYSOUT=*\n//INDD01   DD  DSN=PFX.INBOUND.COMBINE,                            *mod\n//             DISP=MOD,\n//             UNIT=SYSDA,SPACE=(TRK,(1,1)),\n//             RECFM=FB,LRECL=160,BLKSIZE=27840\n//SYSIN    DD  *\n      PRINT INFILE (INDD01) COUNT(1)\n//*\n//*-------------------------------------------------\n//*\n//IF03     IF (S0090.RC EQ 00) THEN\n//*\n//*-------------------------------------------------\n//*  make backup of combined file\n//*-------------------------------------------------\n//S0100    EXEC PGM=IEBGENER\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DUMMY\n//SYSUT1   DD  DISP=SHR,DSN=PFX.INBOUND.COMBINE\n//SYSUT2   DD  DSN=backup GDG(+1),\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,SPACE=(TRK,(50,20),RLSE),\n//             DSORG=PS,RECFM=FB,LRECL=160,BLKSIZE=27840\n//*\n//END03    ENDIF\n//*\n//*-------------------------------------------------\n//*  delete server files\n//*-------------------------------------------------\n//S0110    EXEC PGM=FTP,PARM='(EXIT)',\n//             REGION=6M,COND=(0,NE,S0040)\n//OUTPUT   DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DISP=SHR,DSN= sysin file #1\n//         DD  DISP=SHR,DSN=PFX.INBOUND.FILEDEL\n//         DD  DISP=SHR,DSN= sysin file #3\n//*  sysin file #1\nsign-on\npassword\npossibly specify \"ascii\" option\nchange directories as needed\n//*  sysin file #3\nquit\n//*\n//*-------------------------------------------------\n//*  delete all versions of GDG base\n//*-------------------------------------------------\n//S0120    EXEC PGM=IEFBR14,REGION=5120K,\n//             COND=(0,NE,S0090)\n//SYSPRINT DD  SYSOUT=*\n//DD01     DD  DSN=PFX.INBOUND.GDGFILE,                            *del\n//             DISP=(MOD,DELETE,DELETE),\n//             UNIT=SYSDA,SPACE=(TRK,(1,1))\n//*\n//*-------------------------------------------------\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HIGHEXT": {"ttr": 6150, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00X\\x01\\x19\\x07O\\x01\\x19\\x07O\\tY\\x005\\x005\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-15T00:00:00", "modifydate": "2019-03-15T09:59:58", "lines": 53, "newlines": 53, "modlines": 0, "user": "IANNONE"}, "text": "\n     Documentation for MIS0585B - high extent checking/notification.\n     This system also lists 'lost' extents (extents not deleted by\n     normal delete utilities) and new extents.\n\n 1.  setup a job that plugs dasd volumes into iehlist jcl\n     for all dasd that you want tested\n\n     see PMISA1D\n\n 2.  Run PMISA2D (and others - we run PMISA2D through PMISA7D)\n\n 3.  Run PMISA9D\n\n     the header file SYSP.STVSSD.DASD.DSNOTE contains the following\n     (line it up so the date is in position 60):\n\n  B = optimal block size selected by dadsm    12/01/2000\n  C = compression                             07:10\n  E = extended format\n  I = data set is a pdse                 DA = direct access\n  R = data set is reblockable            PO = partitioned\n  S = sms-managed dataset                PS = sequential\n  U = no bcs entry exists for dataset    U  = undefined\n  ? = see iehlist utilities manual       VS = vsam\n  .\n   . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n                                                         ----------\n\n\n 4.  output is placed in SYSP.STVSSD.DASD.DSNOTIF:\n\n SE ' ----- Files with extents: 12/01/00 07:12 --- --- ' U(xxxxx)\n SE ' ACTP.APSSSO.PS9601.PSFM120                VS  92 ' U(xxxxx)\n SE ' ACTP.TSISSY.EXTRACT.SEVENA.OLDJUN00       PS  42 ' U(xxxxx)\n SE ' USERS.ISPF.LIBRARY                        PO  16 ' U(xxxxx)\n SE ' PDSMS.SVPC.DGA6HCT0.CHPDTA60              VS  96 ' U(xxxxx)\n\n     and in SYSP.STVSSD.DASD.DSNOUT:\n\nSMSLIB PDSMS.INTELECT.P0405E.CMBASE.KBSPACE         PS 19950807 001\nSMSLIB PDSMS.INTELECT.P0405E.EMPBASE.KBSPACE        PS 19950807 001\nSMSLIB PDSMS.INTELECT.P0405E.EMPLOYEE.KBSPACE       PS 19950807 001\nSMSLIB PDSMS.INTELECT.P0405E.IQWORK10.KBSPACE       PS 19950807 001\nSMSLIB PDSMS.INTELECT.P0405E.IQWORK6.KBSPACE        PS 19950807 001 ...\n\n\n note:\n     iehlist does not give dataset attributes such as space usage.\n     this system could be vastly improved if that were the case.\n     also, occasionally a dataset is listed even though it is the\n     file ahead of it in the sort that had high extents.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HSMDOCU": {"ttr": 6152, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00V\\x01\\x19\\x07O\\x01\\x192?\\x081\\x00L\\x00L\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-15T00:00:00", "modifydate": "2019-11-19T08:31:56", "lines": 76, "newlines": 76, "modlines": 0, "user": "IANNONE"}, "text": "\n  HSM tends to create quite a few log files named as:\n\n  HSMACT.H1.MIGLOG.D00341.T140120\n  HSMACT.H1.MIGLOG.D00341.T180149\n\n  The 'log consolidation system' reads the hsm activity logs\n  that are 7 days old and writes the records to one sequential\n  file.  The records are marked with a delete code (info messages\n  delete sooner than migration messages, etc).  This file is\n  used for historical reporting purposes, and to avoid scanning\n  multiple files to obtain hsm info.\n\n  PMISB1D does an IDCAMS listing on the HSM catalog, obtains\n  HSM activity logs that are 7 days old, and builds JCL that\n  is then submitted.  This job pulls the contents of those logs,\n  writes their contents to a sequential file, and then optionally\n  deletes the logs.  I call the sequential file the SUMMLIST file.\n\n  PMIS34W maintains SUMMLIST, pruning unwanted records\n  based on a user determined scale.\n\n\n  The following header records should be connected together\n  (making two records of 132 bytes each).\n  It is used as a reference to SUMMLISTs contents.\n\nDate--------Message-----------Fromvol----------RC----\n-------Time----------Action----------Tovol-----------\n\nReason------------------------------------------\n---Filename-------------------------------------\n\n----------------Delete-code-->!\nAge----Tracks-----------------!\n\n\n  Another file, a PDS member, lists datasets that were\n  not deleted due to HSM requirements.  This allows\n  for manual deletion of those files.\n  I call the file SUMMDSN.\n\n\n  place the following documentation in the SUMMDSN pds -\n  name the member 'WHAT'\n\n  ---------------------------------------------------------------\n\n  THIS PDS IS USED TO HOLD THE NAMES OF FILES THAT HSM TRIED TO\n  DELETE BUT COULD NOT BECAUSE THE FILE HAD NOT YET BEEN BACKED UP\n  BY HSM.  THIS CAN BE HANDLED AS FOLLOWS:\n\n     -  RECALL THE DATASET AND GIVE IT A MANAGEMENT CLASS THAT\n        DOES NOT REQUEST BACKUP (SUCH AS MQNI1)\n\n     OR\n\n     -  IF THE DATASET WAS BACKED UP BY THE NORMAL SVMC DFDSS\n        BACKUPS, SIMPLY DELETE IT.\n\n  SETUP AN EZYEDIT VARIABLE OF @JYY000, THEN (WITH HSMACT.H1.SUMMDSN\n  AS DEFAULT LIBRARY) TYPE OVER THE YYDDD WITH THE JULIAN DATE.  THIS\n  WILL BRING UP THE LIST OF DATASETS CONTAINED WITHIN THIS MEMBER.\n  YOU CAN THEN DELETE AS NEEDED.\n\n  ---------------------------------------------------------------\n\n  Note: ezyedit is a CA product that greatly eases PDS member\n        maintenance.  I even highly recommend it (yes - a CA\n        product - but it was developed by Legent)\n\n\n  file definitions:\n  HSMACT.H1.SUMMDSN       PO  FB       80\n  HSMACT.H1.SUMMLIST      PS  FB      132\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JCI0049B": {"ttr": 6155, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00E\\x01\\x180_\\x01\\x192?\\x082\\x02d\\x02[\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2018-11-01T00:00:00", "modifydate": "2019-11-19T08:32:45", "lines": 612, "newlines": 603, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  JCI0049B: add picture clauses'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    JCI0049B.\n      ******************************************************************\n      *@@@ C3 count picture (PIC  X) clauses and report on total\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * Date written: 04/22/94\n      * Author      : Jim Iannone\n      *\n      *               Utility to add picture clauses, with these\n      *               features:\n      *               1)  will skip redefine values\n      *               2)  will handle elementary items in an occurs\n      *                   clause\n      *               3)  COMP and COMP-3 adjustments are displayed.\n      *                   it is suggested that these be reviewed.\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT INPROG               ASSIGN TO INPROG\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  INPROG\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  INPROG-RECORD.\n           05  FILLER                  PIC  X(80).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage JCI0049B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-LEVEL                PIC  99       VALUE ZERO.\n           05  FILLER REDEFINES WS-LEVEL.\n               10  WS-LEVEL-1          PIC  9.\n               10  WS-LEVEL-2          PIC  9.\n           05  WS-REDEF-LVL            PIC  99       VALUE ZERO.\n           05  WS-OCCUR-LVL            PIC  99       VALUE ZERO.\n           05  WS-COMP3-LVL            PIC  99       VALUE ZERO.\n           05  WS-BIN-LVL              PIC  99       VALUE ZERO.\n           05  WS-OCCUR-VAL            PIC  9(05)    VALUE ZERO.\n           05  WS-TALLY                PIC  9(07)    VALUE ZERO.\n           05  WS-FINAL-TOT            PIC  9(07)    VALUE ZERO.\n           05  WS-ADD-VAL              PIC  9(07)    VALUE ZERO.\n           05  WS-FINAL-OCCUR          PIC  9(07)    VALUE ZERO.\n           05  WS-OCCUR-HOLD           PIC  9(07)    VALUE ZERO.\n           05  WS-PREV-VAL             PIC  9(07)    VALUE ZERO.\n           05  WS-PREV-TOT             PIC  9(07)    VALUE ZERO.\n           05  WS-PREV-OCCUR           PIC  9(07)    VALUE ZERO.\n           05  WS-ALL-TOT              PIC  9(07)    VALUE ZERO.\n           05  WS-ALL-OCCUR            PIC  9(07)    VALUE ZERO.\n           05  WS-BIN-TOT              PIC  9(07)    VALUE ZERO.\n           05  WS-BIN-OCCUR            PIC  9(07)    VALUE ZERO.\n           05  WS-COMP3-OCCUR          PIC  9(07)    VALUE ZERO.\n           05  WS-COMP3-VAL            PIC  9(07)    VALUE ZERO.\n           05  WS-COMP3-TOT            PIC  9(07)    VALUE ZERO.\n           05  WS-COMP-TOT             PIC  9(07)    VALUE ZERO.\n           05  WS-PAREN-CNT            PIC  9(07)    VALUE ZERO.\n           05  WS-START-LINE           PIC  9(05)    VALUE ZERO.\n           05  WS-END-LINE             PIC  9(05)    VALUE ZERO.\n\n       01  WS-INPROG-RECORD.\n           05  WS-INPROG-TABLE         PIC  X(80)    VALUE SPACE.\n           05  FILLER REDEFINES WS-INPROG-TABLE.\n               10  FILLER              PIC  X(07).\n               10  WS-IP-8X11          PIC  X(04).\n               10  FILLER              PIC  X(06).\n               10  WS-IP-18X21         PIC  X(04).\n               10  FILLER              PIC  X(13).\n               10  WS-IP-35X62         PIC  X(28).\n               10  FILLER              PIC  X(18).\n           05  FILLER REDEFINES WS-INPROG-TABLE.\n               10  WS-BYTE             PIC  X\n                                       OCCURS 80 TIMES.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-CNT             PIC S9(07)    VALUE ZERO.\n           05  WS-PIC-CNT              PIC S9(07)    VALUE ZERO.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB3                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB4                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB5                 PIC S9(05)    VALUE ZERO.\n           05  WS-PLACE1               PIC S9(05)    VALUE ZERO.\n           05  WS-PLACE2               PIC S9(05)    VALUE ZERO.\n           05  WS-PLACE3               PIC S9(05)    VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  WS-END-INPROG-SW        PIC  X        VALUE 'N'.\n               88  END-OF-INPROG                     VALUE 'Y'.\n               88  MORE-INPROG-RCDS                  VALUE 'N'.\n           05  WS-END-PIC-SW           PIC  X        VALUE SPACE.\n           05  WS-REDEF-SW             PIC  X        VALUE SPACE.\n           05  WS-LEVEL-FND-SW         PIC  X        VALUE SPACE.\n           05  WS-OCCUR-SW             PIC  X        VALUE SPACE.\n           05  WS-COMP3-SW             PIC  X        VALUE SPACE.\n           05  WS-BIN-SW               PIC  X        VALUE SPACE.\n           05  WS-PIC-SW               PIC  X        VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  JCI0049B END  '.\n\n       LINKAGE SECTION.\n\n       01  PARM-FIELD.\n           05  PARM-LENGTH             PIC S9(04)    COMP.\n           05  PARM-START-LINE         PIC  X(05).\n           05  PARM-END-LINE           PIC  X(05).\n\n      /\n       PROCEDURE DIVISION USING PARM-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           DISPLAY '     '.\n           DISPLAY '**** JCI0049B calc working-storage PIC lines'.\n           PERFORM 0200-OPEN-FILES.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-INPROG.\n\n           DISPLAY '**** Records in INPROG     ' WS-READ-CNT.\n           IF WS-START-LINE > ZERO\n               DISPLAY '**** Start at line         ' WS-START-LINE.\n           IF WS-END-LINE > ZERO\n               DISPLAY '**** End at line           ' WS-END-LINE.\n           DISPLAY '**** Total pic lines       ' WS-PIC-CNT.\n           DISPLAY '**** Total pre-bin/comp3   ' WS-PREV-TOT.\n           DISPLAY '**** Total binary          ' WS-BIN-TOT.\n           DISPLAY '**** Total comp3           ' WS-COMP3-TOT.\n           DISPLAY '**** Total bin/comp3 adj   ' WS-COMP-TOT.\n           DISPLAY '**** Total unpacked bytes  ' WS-ALL-TOT.\n           DISPLAY '**** Final adjusted length ' WS-FINAL-TOT.\n           DISPLAY '**** JCI0049B EOJ encountered '.\n           DISPLAY '     '.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** JCI0049B cond code ' WS-RETURN-CODE\n                       ' sent by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  INPROG.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** JCI0049B open error on INPROG'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE INPROG.\n\n       0400-PROCESS-INPROG.\n           IF PARM-START-LINE NUMERIC\n               MOVE PARM-START-LINE           TO WS-START-LINE.\n           IF PARM-END-LINE NUMERIC\n               MOVE PARM-END-LINE             TO WS-END-LINE.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0500-READ-INPROG\n                   UNTIL END-OF-INPROG.\n\n           PERFORM 0700-TOTAL-PIC-CLAUSE.\n           IF WS-OCCUR-SW = 'Y'\n               IF WS-LEVEL NOT > WS-OCCUR-LVL\n                   PERFORM 1000-ADD-OCCURS.\n           COMPUTE WS-COMP-TOT = WS-PREV-TOT - WS-COMP3-TOT.\n           COMPUTE WS-COMP-TOT = WS-COMP-TOT - WS-BIN-TOT.\n\n       0500-READ-INPROG.\n           READ INPROG.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-CNT\n               PERFORM 0600-SELECT THRU\n                       0600-SELECT-EXIT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-INPROG-SW\n               MOVE ZERO                      TO WS-LEVEL\n           ELSE\n               DISPLAY '**** JCI0049B read error on INPROG '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0500                     TO WS-RETURN-CODE.\n\n      *---------------------------------------\n      *    SKIP LINES IF LINE NUMBERS/COUNTS SENT IN LINKAGE SECTION\n      *---------------------------------------\n        0600-SELECT.\n           IF WS-START-LINE > ZERO\n               IF WS-READ-CNT < WS-START-LINE\n                   GO TO 0600-SELECT-EXIT.\n           IF WS-END-LINE > ZERO\n               IF WS-READ-CNT > WS-END-LINE\n                   MOVE 'Y'                   TO WS-END-INPROG-SW\n                   MOVE ZERO                  TO WS-LEVEL\n                   GO TO 0600-SELECT-EXIT.\n\n           IF WS-IP-8X11 = 'PROC'\n               AND WS-IP-18X21 = 'DIVI'\n               MOVE 'Y'                       TO WS-END-INPROG-SW\n               GO TO 0600-SELECT-EXIT.\n\n           MOVE INPROG-RECORD                 TO WS-INPROG-RECORD.\n\n           IF WS-BYTE (7) = '*'\n               GO TO 0600-SELECT-EXIT.\n\n       0600-CONTINUE1.\n           MOVE SPACE                         TO WS-LEVEL-FND-SW.\n           PERFORM 1800-SAVE-LEVEL\n               VARYING WS-SUB2 FROM 7 BY 1\n               UNTIL WS-SUB2 > 50.\n\n           IF WS-LEVEL-FND-SW = 'Y'\n             IF WS-LEVEL = 88\n               GO TO 0600-SELECT-EXIT.\n\n      *---------------------------------------\n      *    SKIP LINES INCLUDED WITHIN A REDEFINE\n      *---------------------------------------\n           IF WS-REDEF-SW = SPACE\n               PERFORM 1500-CHECK-FOR-REDEFINES\n                   VARYING WS-SUB1 FROM 14 BY 1\n                   UNTIL WS-SUB1 > 60\n               IF WS-REDEF-LVL > ZERO\n                   GO TO 0600-SELECT-EXIT\n               ELSE\n                   CONTINUE\n           ELSE\n           IF WS-REDEF-SW = 'Y'\n               IF WS-LEVEL-FND-SW = SPACE\n                   GO TO 0600-SELECT-EXIT\n               ELSE\n               IF WS-LEVEL NOT > WS-REDEF-LVL\n                   MOVE SPACE                 TO WS-REDEF-SW\n                   MOVE ZERO                  TO WS-LEVEL WS-REDEF-LVL\n                   GO TO 0600-CONTINUE1\n               ELSE\n                   GO TO 0600-SELECT-EXIT.\n\n      *---------------------------------------\n      *    ADD VALUE FROM PREVIOUS PIC CLAUSE TO TOTAL COUNTERS\n      *---------------------------------------\n           IF WS-LEVEL-FND-SW = 'Y'\n               PERFORM 0700-TOTAL-PIC-CLAUSE.\n\n      *---------------------------------------\n      *    ACCUMULATE LINES WITHIN AN OCCURS\n      *---------------------------------------\n       0600-CONTINUE2.\n           IF WS-OCCUR-SW = SPACE\n               PERFORM 1600-CHECK-FOR-OCCURS\n                   VARYING WS-SUB1 FROM 10 BY 1\n                   UNTIL WS-SUB1 > 66\n               MOVE ZERO                      TO WS-PREV-OCCUR\n               MOVE ZERO                      TO WS-BIN-OCCUR\n               MOVE ZERO                      TO WS-COMP3-OCCUR\n               MOVE ZERO                      TO WS-ALL-OCCUR\n               MOVE ZERO                      TO WS-FINAL-OCCUR\n           ELSE\n           IF WS-OCCUR-SW = 'Y'\n               IF WS-LEVEL-FND-SW = SPACE\n                   CONTINUE\n               ELSE\n               IF WS-LEVEL NOT > WS-OCCUR-LVL\n                   PERFORM 1000-ADD-OCCURS\n                   GO TO 0600-CONTINUE2.\n\n      *---------------------------------------\n      *    FIND 'PIC'\n      *---------------------------------------\n           MOVE 'Y'                           TO WS-PIC-SW.\n           PERFORM 0800-FIND-PIC\n               VARYING WS-SUB1 FROM 25 BY 1\n               UNTIL WS-SUB1 > 60.\n           IF WS-SUB1 < 65\n               MOVE 'N'                       TO WS-PIC-SW\n           ELSE\n               ADD 1                          TO WS-PIC-CNT\n               MOVE SPACE                     TO WS-END-PIC-SW.\n\n      *---------------------------------------\n      *    HANDLE GROUP COMP-3/COMP VALUES\n      *---------------------------------------\n       0600-CONTINUE3.\n           IF WS-COMP3-SW = SPACE\n               PERFORM 0900-CHECK-FOR-COMP\n                   VARYING WS-SUB1 FROM 25 BY 1\n                   UNTIL WS-SUB1 > 68\n           ELSE\n           IF WS-LEVEL-FND-SW = SPACE\n               CONTINUE\n           ELSE\n           IF WS-LEVEL NOT > WS-COMP3-LVL\n               MOVE SPACE                    TO WS-COMP3-SW\n               MOVE ZERO                     TO WS-COMP3-LVL\n               GO TO 0600-CONTINUE3.\n\n       0600-CONTINUE4.\n           IF WS-BIN-SW = SPACE\n               PERFORM 0900-CHECK-FOR-BIN\n                   VARYING WS-SUB1 FROM 25 BY 1\n                   UNTIL WS-SUB1 > 68\n           ELSE\n           IF WS-LEVEL-FND-SW = SPACE\n               CONTINUE\n           ELSE\n           IF WS-LEVEL NOT > WS-BIN-LVL\n               MOVE SPACE                    TO WS-BIN-SW\n               MOVE ZERO                     TO WS-BIN-LVL\n               GO TO 0600-CONTINUE4.\n      *---------------------------------------\n      *    ADD PIC VALUES\n      *---------------------------------------\n           IF WS-PIC-SW = 'Y'\n               PERFORM 1200-ADD-LOOP\n                   VARYING WS-SUB1 FROM WS-PLACE1 BY 1\n                   UNTIL WS-SUB1 > 70\n               MOVE WS-ADD-VAL                TO WS-PREV-VAL.\n\n       0600-SELECT-EXIT. EXIT.\n\n      *---------------------------------------\n      *---------------------------------------\n      *---------------------------------------\n\n       0700-TOTAL-PIC-CLAUSE.\n           IF WS-BIN-SW = 'Y'\n             IF WS-PREV-VAL > ZERO\n               ADD WS-PREV-VAL                TO WS-PREV-TOT\n               ADD WS-PREV-VAL                TO WS-PREV-OCCUR\n               IF WS-PREV-VAL < 5\n                   MOVE 2                     TO WS-ADD-VAL\n                   ADD WS-ADD-VAL             TO WS-BIN-TOT\n                   ADD WS-ADD-VAL             TO WS-BIN-OCCUR\n               ELSE\n               IF WS-PREV-VAL < 10\n                   MOVE 4                     TO WS-ADD-VAL\n                   ADD WS-ADD-VAL             TO WS-BIN-TOT\n                   ADD WS-ADD-VAL             TO WS-BIN-OCCUR\n               ELSE\n                   MOVE 8                     TO WS-ADD-VAL\n                   ADD WS-ADD-VAL             TO WS-BIN-TOT\n                   ADD WS-ADD-VAL             TO WS-BIN-OCCUR.\n\n           IF WS-COMP3-SW = 'Y'\n             IF WS-PREV-VAL > ZERO\n                 ADD WS-PREV-VAL              TO WS-PREV-TOT\n                 ADD WS-PREV-VAL              TO WS-PREV-OCCUR\n                 COMPUTE WS-COMP3-VAL = (WS-PREV-VAL / 2) + 1\n                 MOVE WS-COMP3-VAL            TO WS-ADD-VAL\n                 ADD WS-COMP3-VAL             TO WS-COMP3-TOT\n                 ADD WS-COMP3-VAL             TO WS-COMP3-OCCUR.\n\n           ADD WS-PREV-VAL                    TO WS-ALL-TOT.\n           ADD WS-PREV-VAL                    TO WS-ALL-OCCUR.\n           ADD WS-ADD-VAL                     TO WS-FINAL-TOT.\n           ADD WS-ADD-VAL                     TO WS-FINAL-OCCUR.\n           MOVE ZERO                          TO WS-ADD-VAL.\n           MOVE ZERO                          TO WS-PREV-VAL.\n\n       0800-FIND-PIC.\n           IF WS-INPROG-TABLE(WS-SUB1: 4) = ' PIC'\n               MOVE WS-SUB1                   TO WS-PLACE1\n               ADD 4                          TO WS-PLACE1\n               MOVE 70                        TO WS-SUB1\n               IF WS-INPROG-TABLE(WS-PLACE1: 1) = 'T'\n                   ADD 4                      TO WS-PLACE1.\n\n      *---------------------------------------\n      *    COMP CLAUSE LOGIC\n      *---------------------------------------\n        0900-CHECK-FOR-BIN.\n           IF WS-INPROG-TABLE(WS-SUB1: 6) = ' COMP '\n               OR WS-INPROG-TABLE(WS-SUB1: 6) = ' COMP.'\n               MOVE WS-LEVEL                  TO WS-BIN-LVL\n               MOVE 'Y'                       TO WS-BIN-SW\n               MOVE 68                        TO WS-SUB1\n               DISPLAY '**** BIN level:      ' WS-BIN-LVL\n                       '  Line: ' WS-READ-CNT.\n\n       0900-CHECK-FOR-COMP.\n           IF WS-INPROG-TABLE(WS-SUB1: 8) = ' COMP-3 '\n               OR WS-INPROG-TABLE(WS-SUB1: 8) = ' COMP-3.'\n               MOVE WS-LEVEL                  TO WS-COMP3-LVL\n               MOVE 'Y'                       TO WS-COMP3-SW\n               MOVE 68                        TO WS-SUB1\n               DISPLAY '**** COMP level:     ' WS-COMP3-LVL\n                       '  Line: ' WS-READ-CNT.\n\n       1000-ADD-OCCURS.\n           MOVE SPACE                         TO WS-OCCUR-SW.\n           MOVE ZERO                          TO WS-OCCUR-LVL.\n           COMPUTE WS-OCCUR-HOLD = WS-FINAL-OCCUR * WS-OCCUR-VAL.\n           DISPLAY '**** Occurs total:   ' WS-OCCUR-HOLD.\n           SUBTRACT 1 FROM WS-OCCUR-VAL.\n           COMPUTE WS-PREV-OCCUR = WS-PREV-OCCUR * WS-OCCUR-VAL.\n           COMPUTE WS-BIN-OCCUR = WS-BIN-OCCUR * WS-OCCUR-VAL.\n           COMPUTE WS-COMP3-OCCUR = WS-COMP3-OCCUR * WS-OCCUR-VAL.\n           COMPUTE WS-ALL-OCCUR = WS-ALL-OCCUR * WS-OCCUR-VAL.\n           COMPUTE WS-FINAL-OCCUR = WS-FINAL-OCCUR * WS-OCCUR-VAL.\n           ADD WS-PREV-OCCUR                  TO WS-PREV-TOT.\n           ADD WS-BIN-OCCUR                   TO WS-BIN-TOT.\n           ADD WS-COMP3-OCCUR                 TO WS-COMP3-TOT.\n           ADD WS-ALL-OCCUR                   TO WS-ALL-TOT.\n           ADD WS-FINAL-OCCUR                 TO WS-FINAL-TOT.\n           MOVE ZERO                          TO WS-PREV-OCCUR.\n           MOVE ZERO                          TO WS-BIN-OCCUR.\n           MOVE ZERO                          TO WS-COMP3-OCCUR.\n           MOVE ZERO                          TO WS-ALL-OCCUR.\n           MOVE ZERO                          TO WS-FINAL-OCCUR.\n           MOVE ZERO                          TO WS-OCCUR-VAL.\n\n      *---------------------------------------\n      *    DISCONTINUE ADDING IF SPACE FOUND\n      *---------------------------------------\n       1200-ADD-LOOP.\n           IF WS-BYTE(WS-SUB1) > SPACE\n               MOVE 'Y'                       TO WS-END-PIC-SW.\n           IF WS-BYTE(WS-SUB1) = 'X' OR '9' OR 'A' OR '$'\n                              OR '+' OR '-' OR '*' OR ','\n                              OR 'B' OR '0' OR '/'\n               ADD 1                          TO WS-ADD-VAL\n           ELSE\n           IF WS-BYTE(WS-SUB1) = '.'\n               MOVE WS-SUB1                   TO WS-SUB2\n               ADD 1                          TO WS-SUB2\n               IF WS-BYTE(WS-SUB2) > SPACE\n                   ADD 1                      TO WS-ADD-VAL\n               ELSE\n                   CONTINUE\n           ELSE\n           IF WS-BYTE(WS-SUB1) = 'C'\n               MOVE WS-SUB1                   TO WS-SUB2\n               ADD 1                          TO WS-SUB2\n               IF WS-BYTE(WS-SUB2) = 'R'\n                   ADD 1                      TO WS-SUB2\n                   IF WS-BYTE(WS-SUB2) = ' ' OR '.'\n                       ADD 2                  TO WS-ADD-VAL\n                   ELSE\n                       CONTINUE\n               ELSE\n                   CONTINUE\n           ELSE\n           IF WS-BYTE(WS-SUB1) = 'D'\n               MOVE WS-SUB1                   TO WS-SUB2\n               ADD 1                          TO WS-SUB2\n               IF WS-BYTE(WS-SUB2) = 'B'\n                   ADD 1                      TO WS-SUB2\n                   IF WS-BYTE(WS-SUB2) = ' ' OR '.'\n                       ADD 2                  TO WS-ADD-VAL\n                   ELSE\n                       CONTINUE\n               ELSE\n                   CONTINUE\n           ELSE\n           IF WS-BYTE(WS-SUB1) = 'Z'\n               MOVE 'Y'                       TO WS-END-PIC-SW\n               MOVE WS-SUB1                   TO WS-SUB2\n               ADD 1                          TO WS-SUB2\n               IF WS-BYTE(WS-SUB2) = 'E'\n                   CONTINUE\n               ELSE\n                   ADD 1                      TO WS-ADD-VAL\n           ELSE\n           IF WS-BYTE(WS-SUB1) = '('\n               PERFORM 2000-FIND-RIGHT-PAREN\n                   VARYING WS-SUB5 FROM WS-SUB1 BY 1\n                   UNTIL WS-SUB5 > 70\n               ADD WS-PAREN-CNT               TO WS-ADD-VAL\n               MOVE ZERO                      TO WS-PAREN-CNT\n               MOVE WS-PLACE1                 TO WS-SUB1\n               SUBTRACT 1 FROM WS-ADD-VAL\n           ELSE\n           IF WS-BYTE(WS-SUB1) = SPACE\n               IF WS-END-PIC-SW = 'Y'\n                   MOVE 70                    TO WS-SUB1.\n\n       1500-CHECK-FOR-REDEFINES.\n           IF WS-INPROG-TABLE (WS-SUB1: 11) = ' REDEFINES '\n               MOVE 'Y'                       TO WS-REDEF-SW\n               MOVE WS-LEVEL                  TO WS-REDEF-LVL\n               MOVE 60                        TO WS-SUB1\n               DISPLAY '**** Redefine level: ' WS-REDEF-LVL\n                       '  Line: ' WS-READ-CNT.\n\n      *---------------------------------------\n      *    OCCURS CLAUSE LOGIC\n      *---------------------------------------\n       1600-CHECK-FOR-OCCURS.\n           IF WS-INPROG-TABLE (WS-SUB1: 8) = ' OCCURS '\n               MOVE WS-LEVEL                  TO WS-OCCUR-LVL\n               ADD 8                          TO WS-SUB1\n               MOVE ZERO                      TO WS-OCCUR-VAL\n               MOVE 5                         TO WS-SUB5\n               PERFORM 1600-GET-OCCURS-VAL\n                   VARYING WS-SUB2 FROM WS-SUB1 BY 1\n                   UNTIL WS-SUB2 > 70\n               MOVE 'Y'                       TO WS-OCCUR-SW\n               MOVE 66                        TO WS-SUB1\n               DISPLAY '**** Occurs level:   ' WS-OCCUR-LVL\n                       '  Line: ' WS-READ-CNT\n                       '  Value: ' WS-OCCUR-VAL.\n\n      *---------------------------------------\n      *    TO DETERMINE THE NUMBER OF TIMES THIS GROUP OCCURS,\n      *    FIND THE FIRST NUMERIC BYTE, LOOP UNTIL A NON-NUMERIC\n      *    IS FOUND, THEN LOAD THE BYTES IN REVERSE ORDER UNTIL\n      *    A NON-NUMERIC IS FOUND AT THE FRONT OF THE NUMBER.\n      *+--------------------------------------\n       1600-GET-OCCURS-VAL.\n           IF WS-BYTE(WS-SUB2) NUMERIC\n             PERFORM VARYING WS-SUB3 FROM WS-SUB2 BY 1\n                 UNTIL WS-SUB3 > 70\n                 IF WS-BYTE(WS-SUB3) NOT NUMERIC\n                     PERFORM VARYING WS-SUB4 FROM WS-SUB3 BY -1\n                         UNTIL WS-SUB4 < WS-SUB2\n                         IF WS-BYTE(WS-SUB4) NUMERIC\n                             MOVE WS-BYTE(WS-SUB4)\n                                  TO WS-OCCUR-VAL(WS-SUB5: 1)\n                             SUBTRACT 1 FROM WS-SUB5\n                         END-IF\n                     END-PERFORM\n                     MOVE 70                  TO WS-SUB3\n                 END-IF\n             END-PERFORM\n             MOVE 70                          TO WS-SUB2\n           END-IF.\n\n       1800-SAVE-LEVEL.\n           IF WS-BYTE(WS-SUB2) NUMERIC\n               MOVE WS-SUB2                   TO WS-SUB3\n               ADD 1                          TO WS-SUB3\n               IF WS-BYTE(WS-SUB3) NUMERIC\n                   MOVE WS-BYTE(WS-SUB3)      TO WS-LEVEL-2\n                   ADD 1                      TO WS-SUB3\n                   IF WS-BYTE(WS-SUB3) = SPACE\n                       MOVE WS-BYTE(WS-SUB2)  TO WS-LEVEL-1\n                       MOVE 50                TO WS-SUB2\n                       MOVE 'Y'               TO WS-LEVEL-FND-SW\n                   ELSE\n                       CONTINUE\n               ELSE\n               IF WS-BYTE(WS-SUB3) = SPACE\n                   MOVE WS-BYTE(WS-SUB2)      TO WS-LEVEL-2\n                   MOVE ZERO                  TO WS-LEVEL-1\n                   MOVE 50                    TO WS-SUB2\n                   MOVE 'Y'                   TO WS-LEVEL-FND-SW\n               ELSE\n                   CONTINUE\n           ELSE\n           IF WS-BYTE(WS-SUB2) NOT = SPACE\n               MOVE 50                        TO WS-SUB2.\n\n       2000-FIND-RIGHT-PAREN.\n           IF WS-BYTE(WS-SUB5) = ')'\n               MOVE WS-SUB5                   TO WS-SUB2 WS-PLACE1\n               MOVE 70                        TO WS-SUB5\n               SUBTRACT 1 FROM WS-SUB2\n               IF WS-BYTE(WS-SUB2) NUMERIC\n                   MOVE 'Y'                   TO WS-END-PIC-SW\n                   MOVE WS-BYTE(WS-SUB2)      TO WS-TALLY\n                   ADD WS-TALLY               TO WS-PAREN-CNT\n                   SUBTRACT 1 FROM WS-SUB2\n                   IF WS-BYTE(WS-SUB2) NUMERIC\n                       MOVE WS-BYTE(WS-SUB2)  TO WS-TALLY\n                       COMPUTE WS-TALLY = WS-TALLY * 10\n                       ADD WS-TALLY           TO WS-PAREN-CNT\n                       SUBTRACT 1 FROM WS-SUB2\n                     IF WS-BYTE(WS-SUB2) NUMERIC\n                         MOVE WS-BYTE(WS-SUB2) TO WS-TALLY\n                         COMPUTE WS-TALLY = WS-TALLY * 100\n                         ADD WS-TALLY       TO WS-PAREN-CNT\n                         SUBTRACT 1 FROM WS-SUB2\n                       IF WS-BYTE(WS-SUB2) NUMERIC\n                           MOVE WS-BYTE(WS-SUB2) TO WS-TALLY\n                           COMPUTE WS-TALLY = WS-TALLY * 1000\n                           ADD WS-TALLY   TO WS-PAREN-CNT\n                           SUBTRACT 1 FROM WS-SUB2\n                         IF WS-BYTE(WS-SUB2) NUMERIC\n                             MOVE WS-BYTE(WS-SUB2) TO WS-TALLY\n                             COMPUTE WS-TALLY = WS-TALLY * 10000\n                             ADD WS-TALLY TO WS-PAREN-CNT.\n\n      ************************************ END JCI0049B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JCLNEAT": {"ttr": 6408, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x05\\x01\\x184\\x8f\\x01\\x192/\\x12\"\\x0b\\xff\\x01\\x04\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2018-12-14T00:00:00", "modifydate": "2019-11-18T12:22:05", "lines": 3071, "newlines": 260, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  JCLNEAT: align JCL statements    '.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    JCLNEAT.\n      **********************************************************CX003B\n      *@@@ C3 align JCL statements\n      ****************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * Date written: 12/14/2018\n      * Author      : Jim Iannone\n      *               loop through JCL and make it pretty\n      *\n      *               Inspired by Carl Hafner who has \"NEATJCL\"\n      *               on CBT tape #357\n      *\n      * note:  find \"--+--\" to locate major logic steps in program\n      *\n      ****************************************************************\n      * Date changed: mm/dd/yyyy username\n      *               comments...\n      ****************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n           C01 IS PAGE-TOP.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT JCL01                ASSIGN TO JCL01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  JCL01\n           RECORDING MODE F.\n       01  JCL01-RECORD.\n           05  JCL01-RCD               PIC  X(80).\n\n       FD  PARM01\n           RECORDING MODE F.\n       01  PARM01-RECORD.\n           05  PARM01-RCD              PIC  X(80).\n           05  PARM01-RCD1             REDEFINES PARM01-RCD.\n               10  PARM01-DOCU         PIC  X.\n               10  FILLER              PIC  X.\n               10  PARM01-FLAG         PIC  X.\n               10  FILLER              PIC  X.\n               10  PARM01-ITEM         PIC  X(12).\n               10  FILLER              PIC  X.\n               10  PARM01-LEN          PIC  XXX.\n               10  FILLER              PIC  X.\n               10  PARM01-POS          PIC  XXX.\n               10  FILLER              PIC  X.\n               10  PARM01-ST-COL       PIC  XXX.\n               10  FILLER              PIC  X.\n               10  PARM01-END-COL      PIC  XXX.\n               10  FILLER              PIC  X.\n               10  PARM01-OPTION       PIC  X(08).\n               10  FILLER              PIC  X.\n               10  PARM01-EXCLUDE      PIC  X.\n               10  FILLER              PIC  X.\n               10  PARM01-OPTION2      PIC  X(06).\n               10  FILLER              PIC  X(22).\n               10  FILLER              PIC  X(08).\n           05  PARM01-RCD2             REDEFINES PARM01-RCD.\n               10  FILLER              PIC  X(04).\n               10  PARM01-ST-END       PIC  X(05).\n               10  FILLER              PIC  X.\n               10  PARM01-LINE         PIC  X(09).\n               10  FILLER              PIC  X(61).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage JCLNEAT start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-TALLY                PIC S9(04)    VALUE ZERO COMP.\n           05  WS-LS-DATA              PIC  X(10)    VALUE SPACE.\n           05  FILLER REDEFINES WS-LS-DATA.\n               10  WS-LS-TEST          PIC  X.\n               10  WS-LS-EXTRA         PIC  X(09).\n           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.\n           05  WS-QUOTE                PIC  X        VALUE X'7D'.\n           05  WS-ITEM                 PIC  X(20)    VALUE SPACE.\n           05  WS-ITEM-LC              PIC  X(20)    VALUE SPACE.\n           05  WS-OPTION               PIC  X(06)    VALUE SPACE.\n           05  WS-HOLD-RCD             PIC  X(80)    VALUE SPACE.\n           05  WS-HOLD-RCD2            PIC  X(80)    VALUE SPACE.\n           05  WS-HOLD-ORIG            PIC  X(80)    VALUE SPACE.\n           05  WS-UNSTR-FIELDS.\n               10  WS-DSN1             PIC  X(50)    VALUE SPACE.\n               10  WS-DSN2             PIC  X(50)    VALUE SPACE.\n               10  WS-DSN3             PIC  X(80)    VALUE SPACE.\n               10  WS-UNSTR1           PIC  X(20)    VALUE SPACE.\n               10  WS-UNSTR2           PIC  X(20)    VALUE SPACE.\n               10  WS-UNSTR3           PIC  X(20)    VALUE SPACE.\n               10  WS-UNSTR4           PIC  X(20)    VALUE SPACE.\n           05  WS-DELIM                PIC  X(10)    VALUE SPACE.\n           05  WS-HOLD-06              PIC  X(06)    VALUE SPACE.\n           05  WS-HOLD-20              PIC  X(20)    VALUE SPACE.\n           05  FILLER REDEFINES WS-HOLD-20.\n               10  WS-HOLD-10.\n                   15  WS-HOLD-04      PIC  X(04).\n                   15  WS-HOLD-5X10    PIC  X(06).\n               10  FILLER              PIC  X(10).\n           05  WS-HOLD-20-TEMP         PIC  X(20)    VALUE SPACE.\n           05  WS-HOLD-PROC            PIC  X(10)    VALUE SPACE.\n           05  WS-HOLD-JOB             PIC  X(10)    VALUE SPACE.\n           05  WS-HOLD-STEP            PIC  X(10)    VALUE SPACE.\n           05  WS-PROC                 PIC  X(10)    VALUE SPACE.\n           05  WS-PREV-PROC            PIC  X(10)    VALUE SPACE.\n           05  WS-PROGRAM              PIC  X(10)    VALUE SPACE.\n           05  WS-JOB                  PIC  X(10)    VALUE SPACE.\n           05  WS-STEP                 PIC  X(10)    VALUE SPACE.\n           05  WS-BEF                  PIC  X(10)    VALUE SPACE.\n           05  WS-AFT                  PIC  X(10)    VALUE SPACE.\n           05  WS-OLD-NEW              PIC  X(06)    VALUE SPACE.\n           05  WS-EXEC-PREFIX          PIC  X(06)    VALUE SPACE.\n           05  WS-PROG-PREFIX          PIC  X(06)    VALUE SPACE.\n           05  WS-JOB-PREFIX           PIC  X(06)    VALUE SPACE.\n           05  WS-I1-MAX               PIC  9(05)    VALUE ZERO.\n           05  WS-W1-MAX               PIC  9(05)    VALUE ZERO.\n           05  WS-D1-MAX               PIC  9(05)    VALUE ZERO.\n           05  WS-P1-MAX               PIC  9(05)    VALUE ZERO.\n           05  WS-J1-MAX               PIC  9(05)    VALUE ZERO.\n           05  WS-T1-MAX               PIC  9(05)    VALUE ZERO.\n           05  WS-EXEC-INCREMENT       PIC  9(04)    VALUE ZERO.\n           05  WS-EXEC-DIGITS          PIC  9(04)    VALUE ZERO.\n           05  WS-EXEC-NBR             PIC  9(04)    VALUE ZERO.\n           05  WS-JOB-INCREMENT        PIC  9(04)    VALUE ZERO.\n           05  WS-JOB-DIGITS           PIC  9(04)    VALUE ZERO.\n           05  WS-JOB-NBR              PIC  9(04)    VALUE ZERO.\n           05  WS-MAX-THRESH           PIC  9(05)    VALUE ZERO.\n           05  WS-MAX-DIGITS           PIC  9(07)    VALUE ZERO.\n           05  WS-BEF-LEN              PIC  99       VALUE ZERO.\n           05  WS-AFT-LEN              PIC  99       VALUE ZERO.\n           05  WS-HOLD-LEN             PIC  99       VALUE ZERO.\n           05  WS-IF-CNT               PIC  99       VALUE ZERO.\n           05  WS-PROG-CNT             PIC  99       VALUE ZERO.\n           05  WS-LEN                  PIC  999      VALUE ZERO.\n           05  WS-POS                  PIC  999      VALUE ZERO.\n           05  WS-SCOL                 PIC  999      VALUE ZERO.\n           05  WS-ECOL                 PIC  999      VALUE ZERO.\n           05  WS-FND-POS              PIC  999      VALUE ZERO.\n           05  WS-START-POS            PIC  999      VALUE ZERO.\n           05  WS-BLANK                PIC  999      VALUE ZERO.\n           05  WS-CHECK                PIC  999      VALUE ZERO.\n           05  WS-MOVE                 PIC  999      VALUE ZERO.\n           05  WS-DIFF                 PIC  999      VALUE ZERO.\n           05  WS-SPACE-LEN            PIC  999      VALUE ZERO.\n           05  WS-SPACE-LOC            PIC  999      VALUE ZERO.\n           05  WS-MAX-LOOK             PIC  999      VALUE ZERO.\n           05  WS-COMMENT-POS          PIC  999      VALUE ZERO.\n           05  WS-FLAG-D1-POS          PIC  999      VALUE ZERO.\n           05  WS-TEMP-SUB             PIC  9(05)    VALUE ZERO.\n           05  WS-JOB-CNT              PIC  9(05)    VALUE ZERO.\n           05  WS-PROC-CNT             PIC  9(05)    VALUE ZERO.\n           05  WS-HOLD-LINE            PIC  9(09)    VALUE ZERO.\n           05  WS-S-START-RCD          PIC  9(09)    VALUE ZERO.\n           05  WS-S-END-RCD            PIC  9(09)    VALUE ZERO.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-JCL01-CNT       PIC S9(09)    VALUE ZERO.\n           05  WS-HOLD-FILE-CNT        PIC S9(09)    VALUE ZERO.\n           05  WS-REWRITE-JCL01-CNT    PIC S9(09)    VALUE ZERO.\n           05  WS-REWRITE-JCL02-CNT    PIC S9(09)    VALUE ZERO.\n           05  WS-REWRITE-JCL03-CNT    PIC S9(09)    VALUE ZERO.\n           05  WS-REWRITE-JCL04-CNT    PIC S9(09)    VALUE ZERO.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(04)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(04)    VALUE ZERO.\n           05  WS-SUB3                 PIC S9(04)    VALUE ZERO.\n           05  WS-STR1                 PIC S9(04)    VALUE ZERO.\n           05  WS-STR2                 PIC S9(04)    VALUE ZERO.\n           05  WS-P1-SUB               PIC S9(04)    VALUE ZERO.\n           05  WS-J1-SUB               PIC S9(04)    VALUE ZERO.\n           05  WS-T1-SUB               PIC S9(04)    VALUE ZERO.\n           05  WS-HOLD-SUB2            PIC S9(04)    VALUE ZERO.\n\n       01  WS-TABLES.\n           05  WS-ITEM-TABLE           PIC  X(6200)  VALUE SPACE.\n           05  WS-PARM-ITEM REDEFINES WS-ITEM-TABLE\n                                       OCCURS 200 TIMES.\n               10  WS-I1-ITEM          PIC  X(12).\n               10  WS-I1-LEN           PIC  999.\n               10  WS-I1-POS           PIC  999.\n               10  WS-I1-SCOL          PIC  999.\n               10  WS-I1-ECOL          PIC  999.\n               10  WS-I1-OPT           PIC  X(06).\n               10  WS-I1-EXCL          PIC  X.\n           05  WS-WORDS-TABLE          PIC  X(3200)  VALUE SPACE.\n           05  WS-WORDS-ITEM REDEFINES WS-WORDS-TABLE\n                                       OCCURS 200 TIMES.\n               10  WS-W1-ITEM          PIC  X(12).\n               10  WS-W1-LEN           PIC  999.\n               10  WS-W1-HANDLE        PIC  X.\n           05  WS-ENDIF-TABLE          PIC  X(1188)  VALUE SPACE.\n           05  WS-ENDIF-ITEM REDEFINES WS-ENDIF-TABLE\n                                       OCCURS 99 TIMES.\n               10  WS-E1-IF            PIC  XX.\n               10  WS-E1-ENDIF         PIC  X.\n               10  WS-E1-RCD           PIC  9(09).\n           05  WS-PROC-TABLE           PIC  X(8925)  VALUE SPACE.\n           05  WS-PROC-ITEM REDEFINES WS-PROC-TABLE\n                                       OCCURS 255 TIMES.\n               10  WS-P1-PROC          PIC  X(10).\n               10  WS-P1-BEF           PIC  X(10).\n               10  WS-P1-AFT           PIC  X(10).\n               10  WS-P1-BLEN          PIC  99.\n               10  WS-P1-ALEN          PIC  99.\n               10  WS-P1-DONE          PIC  X.\n           05  WS-JOB-TABLE            PIC  X(6375)  VALUE SPACE.\n           05  WS-JOB-ITEM REDEFINES WS-JOB-TABLE\n                                       OCCURS 255 TIMES.\n               10  WS-J1-BEF           PIC  X(10).\n               10  WS-J1-AFT           PIC  X(10).\n               10  WS-J1-BLEN          PIC  99.\n               10  WS-J1-ALEN          PIC  99.\n               10  WS-J1-DONE          PIC  X.\n           05  WS-CONNECT-TABLE        PIC  X(800)   VALUE SPACE.\n           05  WS-CON-ITEM REDEFINES WS-CONNECT-TABLE\n                                       OCCURS 50 TIMES.\n               10  WS-T1-JOB           PIC  X(08).\n               10  WS-T1-PROC          PIC  X(08).\n           05  WS-PROGRAM-TABLE        PIC  X(140)   VALUE SPACE.\n           05  WS-PROG-ITEM REDEFINES WS-PROGRAM-TABLE\n                                       OCCURS 10 TIMES.\n               10  WS-G1-PROG          PIC  X(08).\n               10  WS-G1-PFX           PIC  X(06).\n           05  WS-DISP-ITEM            OCCURS 2000 TIMES.\n               10  WS-D1-LINE          PIC  9(09).\n               10  WS-D1-DISP          PIC  XXX.\n\n\n       01  WS-SWITCHES.\n           05  WS-END-JCL01-SW         PIC  X        VALUE 'N'.\n               88  END-OF-JCL01                      VALUE 'Y'.\n               88  MORE-JCL01-RCDS                   VALUE 'N'.\n           05  WS-AFTER-DOT            PIC  X        VALUE SPACE.\n           05  WS-COMMENT-CASE         PIC  X        VALUE SPACE.\n           05  WS-COMMENT-08           PIC  X        VALUE SPACE.\n           05  WS-DIFF-POS-SW          PIC  X        VALUE SPACE.\n           05  WS-DOT-SW               PIC  X        VALUE SPACE.\n           05  WS-FILE-NAME-UC-SW      PIC  X        VALUE SPACE.\n           05  WS-FIRST-CHAR-UC        PIC  X        VALUE SPACE.\n           05  WS-FIRST-LINE-SW        PIC  X        VALUE SPACE.\n           05  WS-FLAG-DISP-SW         PIC  X        VALUE SPACE.\n           05  WS-FLAG-PFX-SW          PIC  X        VALUE SPACE.\n           05  WS-IF-ENDIF-ERR         PIC  X        VALUE SPACE.\n           05  WS-IF-ENDIF-SW          PIC  X        VALUE SPACE.\n           05  WS-INLINE-SW            PIC  X        VALUE SPACE.\n           05  WS-ITEM-FND-SW          PIC  X        VALUE SPACE.\n           05  WS-JCL-08               PIC  X        VALUE SPACE.\n           05  WS-JCL-08-INLINE        PIC  X        VALUE SPACE.\n           05  WS-JOB-PROC-SW          PIC  X        VALUE SPACE.\n           05  WS-LINE-TYPE            PIC  X        VALUE SPACE.\n           05  WS-NEW-PROC-SW          PIC  X        VALUE SPACE.\n           05  WS-NO-COMMENT-SW        PIC  X        VALUE SPACE.\n           05  WS-NO-LINEUP-SW         PIC  X        VALUE SPACE.\n           05  WS-NO-RENUM-SW          PIC  X        VALUE SPACE.\n           05  WS-NUMERIC-WORD-SW      PIC  X        VALUE SPACE.\n           05  WS-ON-DISP-SW           PIC  X        VALUE SPACE.\n           05  WS-ON-DSN-SW            PIC  X        VALUE SPACE.\n           05  WS-OTHER-CHAR-SW        PIC  X        VALUE SPACE.\n           05  WS-OVERLAY-SW           PIC  X        VALUE SPACE.\n           05  WS-QUOTE-SW             PIC  X        VALUE SPACE.\n           05  WS-RCD-UPDATE-SW        PIC  X        VALUE SPACE.\n           05  WS-RENUM-JOB-SW         PIC  X        VALUE SPACE.\n           05  WS-RENUM-STEP-SW        PIC  X        VALUE SPACE.\n           05  WS-RESET-STEPS-SW       PIC  X        VALUE SPACE.\n           05  WS-SAME-POS-SW          PIC  X        VALUE SPACE.\n           05  WS-SKIP-RCD-BY-REQ      PIC  X        VALUE SPACE.\n           05  WS-SKIP-SW              PIC  X        VALUE SPACE.\n           05  WS-STEP-FND-SW          PIC  X        VALUE SPACE.\n           05  WS-SWAP-DISP-SW         PIC  X        VALUE SPACE.\n           05  WS-THIS-CHANGE-SW       PIC  X        VALUE SPACE.\n           05  WS-TOP-JCL-UC-SW        PIC  X        VALUE SPACE.\n           05  WS-UPDT-COMMENT-SW      PIC  X        VALUE SPACE.\n           05  WS-ZAP-STAR             PIC  X        VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  JCLNEAT END  '.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELD.\n           05  LS-LENGTH               PIC S9(04)    COMP.\n           05  LS-DATA                 PIC  X(10).\n           05  FILLER REDEFINES LS-DATA.\n               10  LS-TEST             PIC  X.\n               10  LS-EXTRA            PIC  X(09).\n\n      /\n\n       PROCEDURE DIVISION USING LS-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           MOVE +0000                         TO WS-RETURN-CODE.\n           PERFORM 0200-OPEN-FILES.\n           DISPLAY '    '.\n           DISPLAY '**** JCLNEAT arrange JCL statements'.\n           DISPLAY '    '.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-JCL01.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-SHOW-STATS.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** JCLNEAT cond code ' WS-RETURN-CODE\n                       ' set by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** JCLNEAT EOJ encountered '.\n           DISPLAY '    '.\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** JCLNEAT open error on PARM01'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       0200-OPEN-JCL01-INPUT.\n           OPEN INPUT  JCL01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** JCLNEAT open error on JCL01'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       0200-OPEN-JCL01-IO.\n           OPEN I-O    JCL01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** JCLNEAT open error on JCL01'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE PARM01.\n\n       0400-SHOW-STATS.\n           IF WS-RETURN-CODE = ZERO\n             IF WS-IF-ENDIF-ERR = 'Y'\n                 MOVE +0004                   TO WS-RETURN-CODE\n                 IF WS-LS-TEST NUMERIC\n                     DISPLAY '**** IF/ENDIF mismatch. Search for'\n                             ' !! above.'\n                     DISPLAY '**** Setting return code to        0004'\n                 ELSE\n                     DISPLAY '**** IF/ENDIF mismatch... setting '\n                             'return code to 0004'.\n\n           IF WS-JCL-08-INLINE = 'Y'\n               DISPLAY '**** \"ZAP LAST J\" specified. '\n               DISPLAY '     To change position 73-80 to spaces for'\n               DISPLAY '     inline JCL lines, use this command: '\n               DISPLAY '     \" C P''='' '' '' 73 80 \"    -or- '\n               DISPLAY '     \" C P''='' '' '' 73 80 ALL \" '.\n\n           IF WS-D1-MAX > ZERO\n               DISPLAY '**** DD flag disp lines           ' WS-D1-MAX.\n\n           IF WS-P1-MAX > ZERO\n             IF WS-PROC-CNT = 1\n               IF WS-P1-MAX = 1\n                   DISPLAY '**** Proc steps to alter          '\n                                                       WS-P1-MAX\n                           '   step  ' WS-P1-AFT(WS-P1-MAX)\n               ELSE\n                   DISPLAY '**** Proc steps to alter          '\n                                                       WS-P1-MAX\n                           '   steps ' WS-P1-AFT(1) ' through '\n                                       WS-P1-AFT(WS-P1-MAX)\n             ELSE\n                 DISPLAY '**** Procs encountered            '\n                                                       WS-PROC-CNT.\n           IF WS-J1-MAX > ZERO\n             IF WS-JOB-CNT = 1\n               IF WS-J1-MAX = 1\n                   DISPLAY '**** Job steps to alter           '\n                                                       WS-J1-MAX\n                           '   step  ' WS-J1-AFT(WS-J1-MAX)\n               ELSE\n                   DISPLAY '**** Job steps to alter           '\n                                                       WS-J1-MAX\n                           '   steps ' WS-J1-AFT(1) ' through '\n                                       WS-J1-AFT(WS-J1-MAX)\n             ELSE\n                 DISPLAY '**** Jobs encountered             '\n                                                       WS-JOB-CNT.\n           IF WS-READ-JCL01-CNT > ZERO\n               DISPLAY '**** Records in JCL01         '\n                                                WS-READ-JCL01-CNT.\n           IF WS-REWRITE-JCL01-CNT > ZERO\n               DISPLAY '**** JCL altered              '\n                                                WS-REWRITE-JCL01-CNT.\n           IF WS-REWRITE-JCL02-CNT > ZERO\n               DISPLAY '**** Exec steps altered       '\n                                                WS-REWRITE-JCL02-CNT.\n           IF WS-REWRITE-JCL03-CNT > ZERO\n               DISPLAY '**** Comments altered         '\n                                                WS-REWRITE-JCL03-CNT.\n           IF WS-REWRITE-JCL04-CNT > ZERO\n               DISPLAY '**** DD flag disp altered     '\n                                                WS-REWRITE-JCL04-CNT.\n\n           IF WS-S-START-RCD > ZERO\n               OR WS-S-END-RCD > ZERO\n               PERFORM 0500-SHOW-SKIPPED.\n\n       0500-SHOW-SKIPPED.\n           DISPLAY '                   '.\n           DISPLAY ' !!  SKIPPED altering records as specified'\n                   ' by \"S\" parm entries'.\n           IF WS-S-START-RCD > ZERO\n               DISPLAY ' !!  SKIPPED records before   '\n                                                    WS-S-START-RCD.\n           IF WS-S-END-RCD > ZERO\n               DISPLAY ' !!  SKIPPED records after    '\n                                                    WS-S-END-RCD.\n           DISPLAY '                   '.\n\n      *---------------------------------------\n      *    X\n      *---------------------------------------\n       0400-PROCESS-JCL01.\n\n           PERFORM 0500-GET-LINKAGE.\n\n           PERFORM VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > 200\n               MOVE SPACE                     TO WS-I1-ITEM(WS-SUB1)\n               MOVE ZERO                      TO WS-I1-LEN(WS-SUB1)\n               MOVE ZERO                      TO WS-I1-POS(WS-SUB1)\n               MOVE ZERO                      TO WS-I1-SCOL(WS-SUB1)\n               MOVE ZERO                      TO WS-I1-ECOL(WS-SUB1)\n               MOVE SPACE                     TO WS-I1-OPT(WS-SUB1)\n               MOVE SPACE                     TO WS-I1-EXCL(WS-SUB1)\n               MOVE SPACE                     TO WS-W1-ITEM(WS-SUB1)\n               MOVE ZERO                      TO WS-W1-LEN(WS-SUB1)\n               MOVE SPACE                     TO WS-W1-HANDLE(WS-SUB1)\n           END-PERFORM.\n           MOVE ZERO                          TO WS-IF-CNT.\n           MOVE SPACE                         TO WS-CONNECT-TABLE.\n           MOVE SPACE                         TO WS-PROGRAM-TABLE.\n           PERFORM VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > 99\n               MOVE SPACE                     TO WS-E1-IF(WS-SUB1)\n               MOVE SPACE                     TO WS-E1-ENDIF(WS-SUB1)\n               MOVE ZERO                      TO WS-E1-RCD(WS-SUB1)\n           END-PERFORM.\n           PERFORM VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > 255\n               MOVE SPACE                     TO WS-P1-PROC(WS-SUB1)\n               MOVE SPACE                     TO WS-P1-BEF(WS-SUB1)\n               MOVE SPACE                     TO WS-P1-AFT(WS-SUB1)\n               MOVE SPACE                     TO WS-P1-DONE(WS-SUB1)\n               MOVE ZERO                      TO WS-P1-BLEN(WS-SUB1)\n               MOVE ZERO                      TO WS-P1-ALEN(WS-SUB1)\n               MOVE SPACE                     TO WS-J1-BEF(WS-SUB1)\n               MOVE SPACE                     TO WS-J1-AFT(WS-SUB1)\n               MOVE SPACE                     TO WS-J1-DONE(WS-SUB1)\n               MOVE ZERO                      TO WS-J1-BLEN(WS-SUB1)\n               MOVE ZERO                      TO WS-J1-ALEN(WS-SUB1)\n           END-PERFORM.\n\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                      TO WS-SUB1\n               MOVE ZERO                      TO WS-SUB2\n               PERFORM 0700-LOAD-PARM01 THRU\n                       0700-LOAD-PARM01-EXIT\n               DISPLAY '          '.\n\n      *    renumber step names\n           IF WS-RETURN-CODE = ZERO\n             IF WS-RENUM-STEP-SW = 'Y'\n               IF WS-NO-RENUM-SW = SPACE\n                   PERFORM 2000-DETERMINE-NEW-STEPS\n                   PERFORM 2400-APPLY-NEW-STEPS.\n\n      *    alter JCL locations and comments\n           IF WS-RETURN-CODE = ZERO\n             IF WS-NO-COMMENT-SW = 'Y'\n                 AND WS-NO-LINEUP-SW = 'Y'\n                 CONTINUE\n             ELSE\n                 PERFORM 1100-CONVERT-PROC-AND-JOB.\n\n      *    place file dispositions to right of DSN=\n      *\n      *    this is located after 1100-CONVERT-PROC-AND-JOB\n      *    since disposition comments in 1900-APPLY-OLD-NEW\n      *    might be placed in columns 73-80 but option 'ZAP LAST J'\n      *    processed in 1100-CONVERT-PROC-AND-JOB would remove them.\n      *\n           IF WS-RETURN-CODE = ZERO\n             IF WS-FLAG-DISP-SW = 'Y'\n               IF WS-NO-COMMENT-SW = SPACE\n                   PERFORM 1800-DETERMINE-OLD-NEW\n                   PERFORM 1900-APPLY-OLD-NEW.\n\n       0500-GET-LINKAGE.\n           IF LS-LENGTH = ZERO\n               DISPLAY '**** Parm length is zero '\n               MOVE +0500                     TO WS-RETURN-CODE\n           ELSE\n           IF LS-LENGTH > LENGTH OF WS-LS-DATA\n               DISPLAY '**** Parm length is excessive '\n               MOVE +0500                     TO WS-RETURN-CODE\n           ELSE\n               MOVE LS-DATA(1: LS-LENGTH)     TO WS-LS-DATA.\n\n      *---------------------------------------\n      *    load XXX...\n      *---------------------------------------\n       0700-LOAD-PARM01.\n           READ PARM01.\n           IF WS-STAT = 10\n               MOVE WS-SUB1                   TO WS-I1-MAX\n               MOVE WS-SUB2                   TO WS-W1-MAX\n               GO TO 0700-LOAD-PARM01-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** JCLNEAT read error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0700                     TO WS-RETURN-CODE\n               GO TO 0700-LOAD-PARM01-EXIT.\n\n           IF PARM01-DOCU = '*'\n               GO TO 0700-LOAD-PARM01.\n\n           IF PARM01-FLAG = 'I' OR 'i'\n               PERFORM 0700-LOAD-JCL-ITEMS\n           ELSE\n           IF PARM01-FLAG = 'C' OR 'c'\n               PERFORM 0700-LOAD-COMMENT-FLAGS\n           ELSE\n           IF PARM01-FLAG = 'W' OR 'w'\n               PERFORM 0700-LOAD-COMMENT-WORDS\n           ELSE\n           IF PARM01-FLAG = 'S' OR 's'\n               PERFORM 0700-LOAD-LINES.\n\n           GO TO 0700-LOAD-PARM01.\n\n       0700-LOAD-PARM01-EXIT. EXIT.\n\n       0700-LOAD-JCL-ITEMS.\n           IF WS-SUB1 < 200\n               ADD 1                          TO WS-SUB1\n               PERFORM 0700-LOAD-JCL-ITEM.\n\n       0700-LOAD-JCL-ITEM.\n           MOVE FUNCTION UPPER-CASE(PARM01-ITEM) TO WS-ITEM.\n           MOVE WS-ITEM                       TO WS-I1-ITEM(WS-SUB1).\n           MOVE PARM01-OPTION                 TO WS-HOLD-20.\n           PERFORM 2800-SHIFT-LEFT.\n           MOVE FUNCTION UPPER-CASE(WS-HOLD-20)\n                                              TO WS-I1-OPT(WS-SUB1).\n           IF PARM01-LEN NUMERIC\n               MOVE PARM01-LEN                TO WS-I1-LEN(WS-SUB1)\n               IF WS-I1-LEN(WS-SUB1) = ZERO\n                   DISPLAY '**** JCLNEAT PARM01 len = zero'\n                   MOVE +0700                     TO WS-RETURN-CODE\n               ELSE\n               IF WS-I1-LEN(WS-SUB1) > 20\n                   DISPLAY '**** JCLNEAT PARM01 len > 20'\n                   MOVE +0700                     TO WS-RETURN-CODE\n               ELSE\n                   CONTINUE\n           ELSE\n               DISPLAY '**** JCLNEAT PARM01 len not numeric'\n               MOVE +0700                     TO WS-RETURN-CODE.\n           IF PARM01-POS NUMERIC\n               IF PARM01-POS = '000'\n                   DISPLAY '**** JCLNEAT PARM01 pos field = zero'\n                   MOVE +0700                 TO WS-RETURN-CODE\n               ELSE\n                   MOVE PARM01-POS            TO WS-I1-POS(WS-SUB1)\n           ELSE\n               DISPLAY '**** JCLNEAT PARM01 pos not numeric'\n               MOVE +0700                     TO WS-RETURN-CODE.\n           IF PARM01-ST-COL NUMERIC\n             IF PARM01-ST-COL = ZERO\n                 MOVE 0003                    TO WS-I1-SCOL(WS-SUB1)\n             ELSE\n                 MOVE PARM01-ST-COL           TO WS-I1-SCOL(WS-SUB1)\n           ELSE\n               DISPLAY '**** JCLNEAT PARM01 start column not numeric'\n               MOVE +0700                     TO WS-RETURN-CODE.\n           IF PARM01-END-COL NUMERIC\n             IF PARM01-END-COL = ZERO\n                 MOVE 0071                    TO WS-I1-ECOL(WS-SUB1)\n             ELSE\n                 MOVE PARM01-END-COL          TO WS-I1-ECOL(WS-SUB1)\n           ELSE\n               DISPLAY '**** JCLNEAT PARM01 end column not numeric'\n               MOVE +0700                     TO WS-RETURN-CODE.\n           MOVE FUNCTION UPPER-CASE(PARM01-EXCLUDE)\n                                              TO WS-I1-EXCL(WS-SUB1).\n\n       0700-LOAD-COMMENT-FLAGS.\n           MOVE FUNCTION UPPER-CASE(PARM01-ITEM) TO WS-ITEM.\n           IF WS-ITEM = 'NO RENUM'\n               DISPLAY ' Parm option \"no renum\" specified'\n               MOVE 'Y'                       TO WS-NO-RENUM-SW.\n           IF WS-ITEM = 'NO LINEUP'\n               DISPLAY ' Parm option \"no lineup\" specified'\n               MOVE 'Y'                       TO WS-NO-LINEUP-SW.\n           IF WS-ITEM = 'NO COMMENT'\n               DISPLAY ' Parm option \"no comment\" specified'\n               MOVE 'Y'                       TO WS-NO-COMMENT-SW.\n           IF WS-ITEM = 'AFTER DOT'\n               MOVE 'Y'                       TO WS-AFTER-DOT.\n           IF WS-ITEM = 'FILE NAME UC'\n               MOVE 'Y'                       TO WS-FILE-NAME-UC-SW.\n           IF WS-ITEM = 'CAP FIRST'\n               MOVE FUNCTION UPPER-CASE(PARM01-OPTION)\n                                              TO WS-FIRST-CHAR-UC.\n           IF WS-ITEM = 'CASE'\n               MOVE FUNCTION UPPER-CASE(PARM01-OPTION)\n                                              TO WS-COMMENT-CASE.\n           IF WS-ITEM = 'LINE TYPE'\n               MOVE FUNCTION UPPER-CASE(PARM01-OPTION)\n                                              TO WS-LINE-TYPE.\n           IF WS-ITEM = 'MOVE COMMENT'\n               MOVE PARM01-OPTION             TO WS-HOLD-20\n               PERFORM 2800-SHIFT-LEFT\n               IF WS-HOLD-04 NUMERIC\n                   MOVE WS-HOLD-04            TO WS-COMMENT-POS\n                   IF WS-COMMENT-POS = ZERO\n                       MOVE 0006              TO WS-COMMENT-POS\n                   ELSE\n                   IF WS-COMMENT-POS < 5\n                       MOVE 0005              TO WS-COMMENT-POS\n                   ELSE\n                   IF WS-COMMENT-POS > 20\n                       MOVE 0020              TO WS-COMMENT-POS\n                   ELSE\n                       CONTINUE\n               ELSE\n                   MOVE 0006                  TO WS-COMMENT-POS.\n           IF WS-ITEM = 'ZAP STAR'\n               MOVE 'Y'                       TO WS-ZAP-STAR.\n           IF WS-ITEM = 'ZAP LAST C'\n               MOVE 'Y'                       TO WS-COMMENT-08.\n           IF WS-ITEM = 'ZAP LAST J'\n               MOVE 'Y'                       TO WS-JCL-08.\n           IF WS-ITEM = 'FLAG DISP'\n               MOVE 'Y'                       TO WS-FLAG-DISP-SW\n               MOVE PARM01-OPTION             TO WS-HOLD-20\n               PERFORM 2800-SHIFT-LEFT\n               IF WS-HOLD-04 NUMERIC\n                   MOVE WS-HOLD-04            TO WS-FLAG-D1-POS\n                   IF WS-FLAG-D1-POS = ZERO\n                       MOVE 0069              TO WS-FLAG-D1-POS\n                   ELSE\n                   IF WS-FLAG-D1-POS < 60\n                       DISPLAY '**** JCLNEAT flag disp pos < 60'\n                       MOVE +0700             TO WS-RETURN-CODE\n                   ELSE\n                   IF WS-FLAG-D1-POS > 78\n                       DISPLAY '**** JCLNEAT flag disp pos > 78'\n                       MOVE +0700             TO WS-RETURN-CODE\n                   ELSE\n                       CONTINUE\n               ELSE\n                   MOVE 0069                  TO WS-FLAG-D1-POS.\n           IF WS-ITEM = 'FLAG PFX'\n               MOVE 'Y'                       TO WS-FLAG-PFX-SW.\n           IF WS-ITEM = 'SWAP DISP'\n               MOVE 'Y'                       TO WS-SWAP-DISP-SW.\n           IF WS-ITEM = 'RESET STEPS'\n               MOVE 'Y'                       TO WS-RESET-STEPS-SW.\n           IF WS-ITEM = 'RENUM PROC'\n               MOVE 'Y'                       TO WS-RENUM-STEP-SW\n               MOVE PARM01-OPTION2            TO WS-HOLD-20\n               PERFORM 2800-SHIFT-LEFT\n               IF WS-HOLD-5X10 = SPACE\n                   MOVE FUNCTION UPPER-CASE(WS-HOLD-10)\n                                              TO WS-EXEC-PREFIX\n               ELSE\n                   DISPLAY '**** JCLNEAT renum proc prefix > '\n                           '4 characters'\n                   MOVE +0700                 TO WS-RETURN-CODE.\n           IF WS-ITEM = 'RENUM PROG'\n             IF WS-PROG-CNT < 10\n                 ADD 1                        TO WS-PROG-CNT\n                 MOVE FUNCTION UPPER-CASE(PARM01-OPTION)\n                                           TO WS-G1-PROG(WS-PROG-CNT)\n                 MOVE FUNCTION UPPER-CASE(PARM01-OPTION2)\n                                           TO WS-G1-PFX(WS-PROG-CNT).\n           IF WS-ITEM = 'RENUM PINCR'\n               MOVE PARM01-OPTION             TO WS-HOLD-20\n               PERFORM 2800-SHIFT-LEFT\n               IF WS-HOLD-04 NUMERIC\n                   MOVE WS-HOLD-04            TO WS-EXEC-INCREMENT\n                   IF WS-EXEC-INCREMENT = ZERO\n                       DISPLAY '**** JCLNEAT renum pincr is zero'\n                       MOVE +0700             TO WS-RETURN-CODE\n                   ELSE\n                       CONTINUE\n               ELSE\n                   DISPLAY '**** JCLNEAT renum pincr not numeric'\n                   MOVE +0700                 TO WS-RETURN-CODE.\n           IF WS-ITEM = 'RENUM PDIGIT'\n               MOVE PARM01-OPTION             TO WS-HOLD-20\n               PERFORM 2800-SHIFT-LEFT\n               IF WS-HOLD-04 NUMERIC\n                   MOVE WS-HOLD-04            TO WS-EXEC-DIGITS\n                   IF WS-EXEC-DIGITS = ZERO\n                       DISPLAY '**** JCLNEAT renum pdigit is zero'\n                       MOVE +0700             TO WS-RETURN-CODE\n                   ELSE\n                       CONTINUE\n               ELSE\n                   DISPLAY '**** JCLNEAT renum pdigit not numeric'\n                   MOVE +0700                 TO WS-RETURN-CODE.\n           IF WS-ITEM = 'RENUM JOB'\n               MOVE 'Y'                       TO WS-RENUM-JOB-SW\n               MOVE PARM01-OPTION2            TO WS-HOLD-20\n               PERFORM 2800-SHIFT-LEFT\n               IF WS-HOLD-5X10 = SPACE\n                   MOVE FUNCTION UPPER-CASE(WS-HOLD-10)\n                                              TO WS-JOB-PREFIX\n               ELSE\n                   DISPLAY '**** JCLNEAT renum job prefix > '\n                           '4 characters'\n                   MOVE +0700                 TO WS-RETURN-CODE.\n           IF WS-ITEM = 'RENUM JINCR'\n               MOVE PARM01-OPTION             TO WS-HOLD-20\n               PERFORM 2800-SHIFT-LEFT\n               IF WS-HOLD-04 NUMERIC\n                   MOVE WS-HOLD-04            TO WS-JOB-INCREMENT\n                   IF WS-JOB-INCREMENT = ZERO\n                       DISPLAY '**** JCLNEAT renum jincr is zero'\n                       MOVE +0700             TO WS-RETURN-CODE\n                   ELSE\n                       CONTINUE\n               ELSE\n                   DISPLAY '**** JCLNEAT renum jincr not numeric'\n                   MOVE +0700                 TO WS-RETURN-CODE.\n           IF WS-ITEM = 'RENUM JDIGIT'\n               MOVE PARM01-OPTION             TO WS-HOLD-20\n               PERFORM 2800-SHIFT-LEFT\n               IF WS-HOLD-04 NUMERIC\n                   MOVE WS-HOLD-04            TO WS-JOB-DIGITS\n                   IF WS-JOB-DIGITS = ZERO\n                       DISPLAY '**** JCLNEAT renum jdigit is zero'\n                       MOVE +0700             TO WS-RETURN-CODE\n                   ELSE\n                       CONTINUE\n               ELSE\n                   DISPLAY '**** JCLNEAT renum jdigit not numeric'\n                   MOVE +0700                 TO WS-RETURN-CODE.\n\n       0700-LOAD-COMMENT-WORDS.\n           IF WS-SUB2 < 200\n               ADD 1                          TO WS-SUB2\n               PERFORM 0700-LOAD-COMMENT-WORD.\n\n       0700-LOAD-COMMENT-WORD.\n           MOVE FUNCTION LOWER-CASE(PARM01-ITEM)\n                                              TO WS-W1-ITEM(WS-SUB2).\n           IF PARM01-LEN NUMERIC\n               MOVE PARM01-LEN                TO WS-W1-LEN(WS-SUB2)\n               IF WS-W1-LEN(WS-SUB2) = ZERO\n                   DISPLAY '**** JCLNEAT PARM01 word len = zero'\n                   MOVE +0700                     TO WS-RETURN-CODE\n               ELSE\n               IF WS-W1-LEN(WS-SUB2) > 20\n                   DISPLAY '**** JCLNEAT PARM01 word len > 20'\n                   MOVE +0700                     TO WS-RETURN-CODE\n               ELSE\n                   CONTINUE\n           ELSE\n               DISPLAY '**** JCLNEAT word len not numeric'\n               MOVE +0700                     TO WS-RETURN-CODE.\n           IF PARM01-POS = 'F' OR 'W' OR 'f' OR 'w' OR 'N' OR 'n'\n               MOVE FUNCTION UPPER-CASE(PARM01-POS)\n                                              TO WS-W1-HANDLE(WS-SUB2)\n           ELSE\n               DISPLAY '**** JCLNEAT word handle flag not F/N/W'\n               MOVE +0700                     TO WS-RETURN-CODE.\n\n       0700-LOAD-LINES.\n           IF FUNCTION UPPER-CASE(PARM01-ST-END) = 'START'\n             IF PARM01-LINE NUMERIC\n                 MOVE PARM01-LINE             TO WS-S-START-RCD.\n           IF FUNCTION UPPER-CASE(PARM01-ST-END) = 'END'\n             IF PARM01-LINE NUMERIC\n                 MOVE PARM01-LINE             TO WS-S-END-RCD.\n\n      *----+----------------------------------\n\n       1100-CONVERT-PROC-AND-JOB.\n           IF WS-LS-TEST NUMERIC\n               PERFORM 1100-SHOW-1100-MSG\n               DISPLAY '          '.\n           MOVE ZERO                          TO WS-READ-JCL01-CNT.\n           PERFORM 0200-OPEN-JCL01-IO.\n           PERFORM 1100-READ-JCL01\n               UNTIL END-OF-JCL01.\n           CLOSE JCL01.\n      *    check \"IF\" array for each new proc within 1200-SELECT\n      *    and again here for the last (or only) proc\n           MOVE WS-PROC                       TO WS-PREV-PROC.\n           PERFORM 1200-SHOW-IF-RESULTS.\n           PERFORM 1600-SHOW-DIVIDING-LINE.\n\n       1100-SHOW-1100-MSG.\n           IF WS-NO-LINEUP-SW = 'Y'\n             IF WS-NO-COMMENT-SW = 'Y'\n                 CONTINUE\n             ELSE\n                 DISPLAY ' Converting comments'\n           ELSE\n           IF WS-NO-COMMENT-SW = 'Y'\n               DISPLAY ' Converting JCL:'\n           ELSE\n               DISPLAY ' Converting JCL and comments:'.\n\n       1100-READ-JCL01.\n           READ JCL01.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-JCL01-CNT\n               MOVE JCL01-RCD                 TO WS-HOLD-RCD\n               PERFORM 1200-SELECT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-JCL01-SW\n           ELSE\n               DISPLAY '**** JCLNEAT read error on JCL01 '\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +1100                     TO WS-RETURN-CODE.\n\n      *---------------------------------------\n      *    loop through file converting comments or JCL\n      *----+----------------------------------\n       1200-SELECT.\n           MOVE WS-HOLD-RCD                   TO WS-HOLD-RCD2.\n           MOVE WS-HOLD-RCD                   TO WS-HOLD-ORIG.\n           MOVE SPACE                         TO WS-UPDT-COMMENT-SW.\n\n           PERFORM 1200-DETERMINE-SKIP-BY-REQ.\n\n           IF WS-DELIM NOT = SPACE\n               MOVE SPACE                     TO WS-UNSTR-FIELDS\n               UNSTRING WS-HOLD-RCD           DELIMITED BY ALL SPACE\n                   INTO WS-UNSTR1 WS-UNSTR2 WS-UNSTR3 WS-UNSTR4\n               IF WS-DELIM = WS-UNSTR1 OR WS-UNSTR2 OR WS-UNSTR3\n                          OR WS-UNSTR4\n                   PERFORM 1500-RESET-INLINE\n               ELSE\n                   PERFORM 1600-SHOW-SKIP-MSG\n           ELSE\n           IF WS-HOLD-RCD(1: 3) = '/* '\n               PERFORM 1500-RESET-INLINE\n           ELSE\n           IF WS-HOLD-RCD(1: 3) = '//*'\n               PERFORM 1500-RESET-INLINE\n               IF WS-NO-COMMENT-SW = SPACE\n                   PERFORM 1500-CONVERT-COMMENTS THRU\n                           1500-CONVERT-EXIT\n                   IF WS-UPDT-COMMENT-SW = 'Y'\n                     IF WS-HOLD-RCD = WS-HOLD-ORIG\n                         CONTINUE\n                     ELSE\n                         MOVE WS-HOLD-RCD     TO JCL01-RCD\n                         PERFORM 3000-REWRITE-JCL01\n                         ADD 1                TO WS-REWRITE-JCL03-CNT\n                   ELSE\n                       CONTINUE\n               ELSE\n                   CONTINUE\n           ELSE\n           IF WS-INLINE-SW = 'Y'\n               PERFORM 1600-SHOW-SKIP-MSG\n           ELSE\n           IF WS-NO-LINEUP-SW = SPACE\n               MOVE SPACE                     TO WS-RCD-UPDATE-SW\n               MOVE SPACE                     TO WS-FIRST-LINE-SW\n               MOVE SPACE                     TO WS-DOT-SW\n               PERFORM 1200-SET-INLINE-SWITCH\n               PERFORM 1200-BLANK-TRAIL-AREA\n               PERFORM 1200-RESET-TOP-SWITCH\n               IF WS-SKIP-RCD-BY-REQ = 'Y'\n                   CONTINUE\n               ELSE\n                   PERFORM 1200-LOAD-FROM-PARM\n                       VARYING WS-SUB2 FROM 1 BY 1\n                       UNTIL WS-SUB2 > WS-I1-MAX\n                   PERFORM 1200-SWAP-DISP-LOGIC\n                   IF WS-RCD-UPDATE-SW = 'Y'\n                     IF WS-HOLD-RCD = WS-HOLD-ORIG\n                         CONTINUE\n                     ELSE\n                         MOVE WS-HOLD-RCD     TO JCL01-RCD\n                         PERFORM 3000-REWRITE-JCL01\n                         ADD 1                TO WS-REWRITE-JCL01-CNT.\n\n           IF WS-NEW-PROC-SW = 'Y'\n               MOVE SPACE                     TO WS-NEW-PROC-SW\n               PERFORM 1200-SHOW-IF-RESULTS\n               PERFORM 1600-SHOW-PROC.\n\n       1200-SHOW-IF-RESULTS.\n           IF WS-NO-LINEUP-SW = SPACE\n             IF WS-IF-ENDIF-SW = 'Y'\n                 PERFORM 1200-SHOW-MISSING-ENDIF\n                    VARYING WS-SUB3 FROM 99 BY -1\n                    UNTIL WS-SUB3 < 1\n                 MOVE ZERO                    TO WS-IF-CNT\n                 MOVE SPACE                   TO WS-ENDIF-TABLE\n                 IF WS-IF-ENDIF-SW = 'X'\n                     MOVE SPACE               TO WS-IF-ENDIF-SW\n                     MOVE 'Y'                 TO WS-IF-ENDIF-ERR.\n\n       1200-SHOW-MISSING-ENDIF.\n           IF WS-E1-IF(WS-SUB3) NOT = SPACE\n             IF WS-E1-ENDIF(WS-SUB3) = SPACE\n                 MOVE 'X'                     TO WS-IF-ENDIF-SW\n                 DISPLAY ' !! line   ' WS-E1-RCD(WS-SUB3)\n                         '   ' WS-PREV-PROC\n                         '  ENDIF value not found     END'\n                         WS-E1-IF(WS-SUB3).\n\n      *---------------------------------------\n      *    skip records if requested in PARM01\n      *    skip if records outside specified range\n      *---------------------------------------\n       1200-DETERMINE-SKIP-BY-REQ.\n           MOVE SPACE                         TO WS-SKIP-RCD-BY-REQ.\n           IF WS-S-START-RCD > ZERO\n             IF WS-S-END-RCD > ZERO\n               IF WS-READ-JCL01-CNT < WS-S-START-RCD\n                   OR WS-READ-JCL01-CNT > WS-S-END-RCD\n                   MOVE 'Y'                   TO WS-SKIP-RCD-BY-REQ\n               ELSE\n                   CONTINUE\n             ELSE\n             IF WS-READ-JCL01-CNT < WS-S-START-RCD\n                 MOVE 'Y'                     TO WS-SKIP-RCD-BY-REQ\n             ELSE\n                 CONTINUE\n           ELSE\n           IF WS-S-END-RCD > ZERO\n             IF WS-READ-JCL01-CNT > WS-S-END-RCD\n                 MOVE 'Y'                     TO WS-SKIP-RCD-BY-REQ.\n\n       1200-SET-INLINE-SWITCH.\n           MOVE SPACE                         TO WS-UNSTR-FIELDS.\n           MOVE SPACE                         TO WS-DELIM.\n           UNSTRING WS-HOLD-RCD               DELIMITED BY ALL SPACE\n               INTO WS-UNSTR1 WS-UNSTR2 WS-UNSTR3 WS-UNSTR4.\n           IF WS-UNSTR2 = 'DD'\n               MOVE 'Y'                       TO WS-TOP-JCL-UC-SW\n               IF WS-UNSTR3 = '*' OR 'DATA'\n                   MOVE 'Y'                   TO WS-INLINE-SW.\n           IF WS-UNSTR2 = 'DD'\n             IF WS-UNSTR3(1: 6) = '*,DLM='\n                 MOVE 'Y'                     TO WS-INLINE-SW\n                 MOVE WS-UNSTR3(7: 10)        TO WS-HOLD-20\n                 UNSTRING WS-HOLD-20 DELIMITED BY SPACE\n                     INTO WS-DELIM.\n           IF WS-UNSTR2 = 'DD'\n             IF WS-UNSTR3(1: 9) = 'DATA,DLM='\n                 MOVE 'Y'                     TO WS-INLINE-SW\n                 MOVE WS-UNSTR3(10: 10)       TO WS-HOLD-20\n                 UNSTRING WS-HOLD-20 DELIMITED BY SPACE\n                     INTO WS-DELIM.\n\n      *    blank out columns 73 - 80\n       1200-BLANK-TRAIL-AREA.\n           IF WS-JCL-08 = 'Y'\n             IF WS-INLINE-SW = 'Y'\n                 MOVE 'Y'                     TO WS-JCL-08-INLINE\n             ELSE\n                 MOVE 'Y'                     TO WS-RCD-UPDATE-SW\n                 MOVE SPACE                   TO WS-HOLD-RCD(73: 8).\n\n       1200-RESET-TOP-SWITCH.\n           MOVE ' PROC '                      TO WS-ITEM.\n           MOVE 6                             TO WS-LEN.\n           MOVE SPACE                         TO WS-SKIP-SW.\n           MOVE SPACE                         TO WS-QUOTE-SW.\n           MOVE SPACE                         TO WS-ITEM-FND-SW.\n           PERFORM 2400-FIND-ITEM\n               VARYING WS-SUB2 FROM 4 BY 1\n               UNTIL WS-SUB2 > 30.\n           IF WS-ITEM-FND-SW = 'Y'\n               MOVE 'Y'                       TO WS-NEW-PROC-SW\n               ADD 1                          TO WS-PROC-CNT\n               MOVE WS-PROC                   TO WS-PREV-PROC\n               MOVE SPACE                     TO WS-TOP-JCL-UC-SW\n               MOVE WS-HOLD-RCD(3: 8)         TO WS-HOLD-PROC\n               MOVE SPACE                     TO WS-PROC\n               UNSTRING WS-HOLD-PROC          DELIMITED BY SPACE\n                   INTO WS-PROC.\n\n           MOVE ' JOB '                       TO WS-ITEM.\n           MOVE 5                             TO WS-LEN.\n           MOVE SPACE                         TO WS-SKIP-SW.\n           MOVE SPACE                         TO WS-QUOTE-SW.\n           MOVE SPACE                         TO WS-ITEM-FND-SW.\n           PERFORM 2400-FIND-ITEM\n               VARYING WS-SUB2 FROM 4 BY 1\n               UNTIL WS-SUB2 > 30.\n           IF WS-ITEM-FND-SW = 'Y'\n               ADD 1                          TO WS-JOB-CNT\n               MOVE SPACE                     TO WS-TOP-JCL-UC-SW.\n\n      *----ws-sub2----------------------------\n      *    line-up JCL items by moving to requested location\n      *----+----------------------------------\n       1200-LOAD-FROM-PARM.\n           MOVE WS-I1-ITEM(WS-SUB2)           TO WS-ITEM.\n           MOVE WS-I1-LEN(WS-SUB2)            TO WS-LEN.\n           MOVE WS-I1-POS(WS-SUB2)            TO WS-POS.\n           MOVE WS-I1-SCOL(WS-SUB2)           TO WS-SCOL.\n           MOVE WS-I1-ECOL(WS-SUB2)           TO WS-ECOL.\n           MOVE WS-I1-OPT(WS-SUB2)            TO WS-OPTION.\n           MOVE ZERO                          TO WS-FND-POS.\n           MOVE SPACE                         TO WS-DIFF-POS-SW.\n           MOVE SPACE                         TO WS-SAME-POS-SW.\n           MOVE SPACE                         TO WS-THIS-CHANGE-SW.\n\n           PERFORM 1200-FIND-LOOP\n               VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > 71.\n\n           IF WS-SAME-POS-SW = 'Y'\n               PERFORM 1200-APPLY-SAME-POS\n           ELSE\n           IF WS-DIFF-POS-SW = 'Y'\n               PERFORM 1200-APPLY-DIFF-POS.\n\n      *    ws-sub2 ws-sub1\n       1200-FIND-LOOP.\n           IF WS-SUB1 < WS-SCOL\n               CONTINUE\n           ELSE\n           IF WS-SUB1 > WS-ECOL\n               CONTINUE\n           ELSE\n           IF WS-HOLD-RCD(WS-SUB1: WS-LEN) = WS-ITEM(1: WS-LEN)\n               MOVE WS-SUB1                   TO WS-FND-POS\n               MOVE 71                        TO WS-SUB1\n               IF WS-POS = WS-FND-POS\n                   MOVE 'Y'                   TO WS-SAME-POS-SW\n               ELSE\n                   MOVE 'Y'                   TO WS-DIFF-POS-SW.\n\n       1200-APPLY-SAME-POS.\n           MOVE WS-HOLD-RCD                   TO WS-HOLD-RCD2.\n           PERFORM 1300-PROCESS-OPTIONS.\n           IF WS-THIS-CHANGE-SW = 'Y'\n               PERFORM 1600-SHOW-FOUND-MSG\n               PERFORM 1600-SHOW-OPT-BEFORE\n               PERFORM 1600-SHOW-OPT-AFTER\n               PERFORM 1600-SHOW-BLANK-LINE.\n\n       1200-APPLY-DIFF-POS.\n           MOVE WS-HOLD-RCD                   TO WS-HOLD-RCD2.\n           PERFORM 1600-SHOW-FOUND-MSG.\n           PERFORM 1600-SHOW-BEFORE.\n           MOVE SPACE                         TO WS-OVERLAY-SW.\n           PERFORM 2700-ADJUST-THINGS.\n           PERFORM 1300-PROCESS-OPTIONS.\n           PERFORM 1600-SHOW-AFTER.\n           PERFORM 1600-SHOW-BLANK-LINE.\n\n      *    ----+----1----+----2----+----3----+----4\n      *    //DD01     DD  DSN=ABC,DISP=SHR   --.\n      *    //DD01     DD  DISP=SHR,DSN=ABC  <--'\n\n       1200-SWAP-DISP-LOGIC.\n           IF WS-SWAP-DISP-SW = 'Y'\n               PERFORM 1200-SWAP-DISP THRU\n                       1200-SWAP-DISP-EXIT.\n\n       1200-SWAP-DISP.\n           MOVE ' DSN='                       TO WS-ITEM.\n           MOVE 5                             TO WS-LEN.\n           MOVE SPACE                         TO WS-SKIP-SW.\n           MOVE SPACE                         TO WS-QUOTE-SW.\n           MOVE SPACE                         TO WS-ITEM-FND-SW.\n           PERFORM 2400-FIND-ITEM\n               VARYING WS-SUB2 FROM 4 BY 1\n               UNTIL WS-SUB2 > 63.\n           IF WS-ITEM-FND-SW = SPACE\n               GO TO 1200-SWAP-DISP-EXIT.\n           MOVE WS-TEMP-SUB                   TO WS-BEF-LEN.\n           ADD 1                              TO WS-BEF-LEN.\n\n           MOVE ',DISP=SHR '                  TO WS-ITEM.\n           MOVE 10                            TO WS-LEN.\n           MOVE SPACE                         TO WS-SKIP-SW.\n           MOVE SPACE                         TO WS-QUOTE-SW.\n           MOVE SPACE                         TO WS-ITEM-FND-SW.\n           PERFORM 2400-FIND-ITEM\n               VARYING WS-SUB2 FROM 4 BY 1\n               UNTIL WS-SUB2 > 63.\n           IF WS-ITEM-FND-SW = SPACE\n               GO TO 1200-SWAP-DISP-EXIT.\n           MOVE WS-TEMP-SUB                   TO WS-AFT-LEN.\n\n           IF WS-BEF-LEN > WS-AFT-LEN\n               GO TO 1200-SWAP-DISP-EXIT.\n\n      *    find location of trailing space\n           MOVE ZERO                          TO WS-TEMP-SUB.\n           PERFORM VARYING WS-SUB3 FROM WS-BEF-LEN BY 1\n               UNTIL WS-SUB3 > 72\n               IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE\n                   MOVE WS-SUB3               TO WS-TEMP-SUB\n                   MOVE 72                    TO WS-SUB3\n               END-IF\n           END-PERFORM.\n      *    determine length of dsn + disp string\n           COMPUTE WS-LEN = WS-TEMP-SUB - WS-BEF-LEN.\n\n      *    unstring then string with items flipped\n           MOVE WS-BEF-LEN                    TO WS-START-POS.\n           MOVE SPACE                         TO WS-UNSTR-FIELDS.\n           MOVE WS-HOLD-RCD(WS-START-POS: )   TO WS-HOLD-RCD2.\n           UNSTRING WS-HOLD-RCD2              DELIMITED BY ','\n               INTO WS-DSN1 WS-DSN2 WS-DSN3.\n           IF WS-DSN1(1: 4) NOT = 'DSN='\n               GO TO 1200-SWAP-DISP-EXIT.\n           IF WS-DSN2(1: 5) NOT = 'DISP='\n               GO TO 1200-SWAP-DISP-EXIT.\n           IF WS-DSN3 NOT = SPACE\n               GO TO 1200-SWAP-DISP-EXIT.\n           STRING WS-DSN2                     DELIMITED BY SPACE\n                  ','                         DELIMITED BY SIZE\n                  WS-DSN1                     DELIMITED BY SPACE\n                  INTO WS-DSN3.\n\n           MOVE 'Y'                           TO WS-RCD-UPDATE-SW.\n           MOVE WS-DSN3(1: WS-LEN)\n                             TO WS-HOLD-RCD(WS-START-POS: WS-LEN).\n\n       1200-SWAP-DISP-EXIT. EXIT.\n\n       1300-PROCESS-OPTIONS.\n           IF WS-OPTION = 'IF'\n             IF WS-HOLD-RCD(3: 5) = SPACE\n               IF WS-IF-CNT < 99\n                   ADD 1                      TO WS-IF-CNT\n                   MOVE WS-IF-CNT             TO WS-E1-IF(WS-IF-CNT)\n                   MOVE 'IF'                  TO WS-HOLD-RCD(3: 2)\n                   MOVE WS-IF-CNT             TO WS-HOLD-RCD(5: 2)\n                   MOVE 'Y'                   TO WS-RCD-UPDATE-SW\n                   MOVE 'Y'                   TO WS-THIS-CHANGE-SW\n                   MOVE 'Y'                   TO WS-IF-ENDIF-SW\n                   MOVE WS-READ-JCL01-CNT     TO WS-E1-RCD(WS-IF-CNT).\n\n           IF WS-OPTION = 'ENDIF'\n             IF WS-HOLD-RCD(3: 6) = SPACE\n                 PERFORM 1300-FIND-ENDIF\n                     VARYING WS-SUB3 FROM 99 BY -1\n                     UNTIL WS-SUB3 < 1.\n\n       1300-FIND-ENDIF.\n           IF WS-E1-IF(WS-SUB3) = SPACE\n               CONTINUE\n           ELSE\n           IF WS-E1-ENDIF(WS-SUB3) = SPACE\n               MOVE 'END'                     TO WS-HOLD-RCD(3: 3)\n               MOVE WS-E1-IF(WS-SUB3)         TO WS-HOLD-RCD(6: 2)\n               MOVE 'Y'                       TO WS-E1-ENDIF(WS-SUB3)\n               MOVE ZERO                      TO WS-SUB3\n               MOVE 'Y'                       TO WS-RCD-UPDATE-SW\n               MOVE 'Y'                       TO WS-THIS-CHANGE-SW\n               MOVE 'Y'                       TO WS-IF-ENDIF-SW.\n\n      *---------------------------------------\n      *    convert comment lines\n      *----+----------------------------------\n       1500-CONVERT-COMMENTS.\n           IF WS-SKIP-RCD-BY-REQ = 'Y'\n               GO TO 1500-CONVERT-EXIT.\n\n      *    blank out columns 73 - 80\n           IF WS-COMMENT-08 = 'Y'\n             IF WS-HOLD-RCD(73: 8) = SPACE\n                 CONTINUE\n             ELSE\n                 MOVE 'Y'                     TO WS-UPDT-COMMENT-SW\n                 MOVE SPACE                   TO WS-HOLD-RCD(73: 8).\n\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '*'.\n           IF WS-TALLY > 40\n               MOVE SPACE                     TO WS-DOT-SW\n               MOVE SPACE                     TO WS-FIRST-LINE-SW.\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '-'.\n           IF WS-TALLY > 40\n               MOVE SPACE                     TO WS-DOT-SW\n               MOVE SPACE                     TO WS-FIRST-LINE-SW.\n           IF WS-HOLD-RCD(4: 66) = SPACE\n               MOVE SPACE                     TO WS-DOT-SW\n               MOVE SPACE                     TO WS-FIRST-LINE-SW.\n\n      *    skip converting first batch of comments in job/proc\n           IF WS-TOP-JCL-UC-SW NOT = 'Y'\n             IF WS-HOLD-RCD(1: 4) = '//* '\n                 OR WS-HOLD-RCD(1: 5) = '//** '\n                 MOVE ZERO                    TO WS-TALLY\n                 PERFORM VARYING WS-SUB2 FROM 5 BY 1\n                     UNTIL WS-SUB2 > 50\n                     IF WS-HOLD-RCD(WS-SUB2: 1) = 'A' OR 'E' OR 'I'\n                                               OR 'O' OR 'U'\n                         ADD 1                TO WS-TALLY\n                     END-IF\n                 END-PERFORM\n                 IF WS-TALLY > 1\n                     MOVE 'T'                 TO WS-TOP-JCL-UC-SW\n                 ELSE\n                     CONTINUE\n             ELSE\n             IF WS-TOP-JCL-UC-SW = 'T'\n                 MOVE 'Y'                     TO WS-TOP-JCL-UC-SW.\n\n      *    do not convert blank lines\n           IF WS-HOLD-RCD(4: 69) = SPACE\n               GO TO 1500-CONVERT-EXIT.\n\n      *    do not convert commented lines to lower-case\n      *    when they appear to hold commented JCL\n           MOVE ZERO                          TO WS-TALLY.\n           PERFORM VARYING WS-SUB1 FROM 4 BY 1\n               UNTIL WS-SUB1 > 50\n               PERFORM 1500-LOOK-FOR-JCL-IN-COMMENTS\n                   VARYING WS-SUB2 FROM 1 BY 1\n                   UNTIL WS-SUB2 > WS-I1-MAX\n           END-PERFORM.\n           IF WS-TALLY > 1\n               GO TO 1500-CONVERT-EXIT.\n\n      *    convert to lower case\n      *\n      *    avoid placing 'convert to upper-case' logic above\n      *    this step - uppercase will be replaced by lowercase\n      *\n           IF WS-TOP-JCL-UC-SW = 'Y'\n             IF WS-COMMENT-CASE = 'L'\n                 MOVE 'Y'                     TO WS-UPDT-COMMENT-SW\n                 MOVE WS-HOLD-RCD             TO WS-HOLD-RCD2\n                 MOVE FUNCTION LOWER-CASE(WS-HOLD-RCD2) TO WS-HOLD-RCD\n                 PERFORM 1500-CHANGE-WORD-CASE.\n\n      *    convert to upper case\n           IF WS-COMMENT-CASE = 'U'\n               MOVE 'Y'                       TO WS-UPDT-COMMENT-SW\n               MOVE WS-HOLD-RCD               TO WS-HOLD-RCD2\n               MOVE FUNCTION UPPER-CASE(WS-HOLD-RCD2) TO WS-HOLD-RCD.\n\n      *    convert file names to uppercase\n           IF WS-FILE-NAME-UC-SW = 'Y'\n               PERFORM 1500-CONVERT-FILE-NAME-CASE\n                   VARYING WS-SUB1 FROM 4 BY 1\n                   UNTIL WS-SUB1 > 60.\n\n      *    convert dash lines to asterisks\n           IF WS-LINE-TYPE = 'R'\n               MOVE SPACE                     TO WS-OTHER-CHAR-SW\n               PERFORM 1500-TEST-FOR-OTHER-CHARS\n               IF WS-OTHER-CHAR-SW = SPACE\n                   PERFORM 1500-CONVERT-FROM-DASHES.\n      *    convert asterisk lines to dashes\n           IF WS-LINE-TYPE = 'D'\n               MOVE SPACE                     TO WS-OTHER-CHAR-SW\n               PERFORM 1500-TEST-FOR-OTHER-CHARS\n               IF WS-OTHER-CHAR-SW = SPACE\n                   PERFORM 1500-CONVERT-TO-DASHES.\n\n      *    move most comments to new position\n           IF WS-COMMENT-POS > ZERO\n               MOVE ZERO                      TO WS-FND-POS\n               PERFORM 1500-FIND-COMMENT-START\n                   VARYING WS-SUB1 FROM 4 BY 1\n                   UNTIL WS-SUB1 > 25\n               IF WS-FND-POS > ZERO\n                 IF WS-FND-POS NOT = WS-COMMENT-POS\n                     MOVE WS-HOLD-RCD         TO WS-HOLD-RCD2\n                     PERFORM 1500-MOVE-COMMENTS.\n\n      *    remove trailing asterisks\n           IF WS-ZAP-STAR = 'Y'\n               PERFORM 1500-ZAP-TRAIL-ASTERISKS.\n\n      *    in a group of comments, for the first line only,\n      *      convert first character to upper case\n           IF WS-FIRST-CHAR-UC = 'F'\n             IF WS-FIRST-LINE-SW = SPACE\n                 MOVE 4                       TO WS-SUB3\n                 PERFORM 1500-UPPER-CASE-FIRST\n                     UNTIL WS-SUB3 > 25.\n\n      *    for all lines in a group of comments,\n      *      convert first character to upper case\n           IF WS-FIRST-CHAR-UC = 'A'\n               MOVE 4                         TO WS-SUB3\n               PERFORM 1500-UPPER-CASE-FIRST\n                   UNTIL WS-SUB3 > 25.\n\n      *    for all lines in a group of comments, convert the\n      *      first character following '. ' to upper case\n           IF WS-AFTER-DOT = 'Y'\n               MOVE 4                         TO WS-SUB3\n               PERFORM 1500-UPPER-CASE-AFTER-DOT\n                   UNTIL WS-SUB3 > 70.\n\n       1500-CONVERT-EXIT. EXIT.\n\n      *---------------------------------------\n      *    file name rules: each qualifer may contain alphanumeric\n      *    or national characters ($, #, @) or hyphen (-), or x'C0'.\n      *    qualifer must start with alphabetic or national character.\n      *---------------------------------------\n       1500-CONVERT-FILE-NAME-CASE.\n           IF WS-HOLD-RCD(WS-SUB1: 1) = '.'\n             IF WS-HOLD-RCD(WS-SUB1 + 1: 1) = SPACE OR '.'\n                 CONTINUE\n             ELSE\n             IF WS-HOLD-RCD(WS-SUB1 + 1: 1) NUMERIC\n                 CONTINUE\n             ELSE\n             IF WS-HOLD-RCD(WS-SUB1 - 1: 1) = SPACE\n                 CONTINUE\n             ELSE\n                 PERFORM 1500-CONVERT-FILE-NAME-UC.\n\n       1500-CONVERT-FILE-NAME-UC.\n           MOVE ZERO                          TO WS-POS.\n           PERFORM VARYING WS-SUB3 FROM WS-SUB1 BY -1\n               UNTIL WS-SUB3 < 4\n               IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE\n                   MOVE WS-SUB3               TO WS-POS\n                   MOVE 3                     TO WS-SUB3\n               END-IF\n           END-PERFORM.\n           IF WS-POS > ZERO\n               MOVE WS-POS                    TO WS-SUB3\n               ADD 1                          TO WS-SUB3\n               MOVE 73                        TO WS-SUB1\n               PERFORM 1500-UPPER-CASE\n                   UNTIL WS-SUB3 > 72.\n\n       1500-TEST-FOR-OTHER-CHARS.\n           PERFORM VARYING WS-SUB3 FROM 4 BY 1\n               UNTIL WS-SUB3 > 71\n               IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE OR '*' OR '-'\n                                         OR '=' OR '+'\n                   CONTINUE\n               ELSE\n                   MOVE 'N'                   TO WS-OTHER-CHAR-SW\n                   MOVE 71                    TO WS-SUB3\n               END-IF\n           END-PERFORM.\n\n       1500-CONVERT-FROM-DASHES.\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '-'.\n           IF WS-TALLY > 10\n               MOVE SPACE                     TO WS-FIRST-LINE-SW\n               PERFORM VARYING WS-SUB1 FROM 4 BY 1\n                   UNTIL WS-SUB1 > 72\n                   IF WS-HOLD-RCD(WS-SUB1: 1) = '-'\n                     IF WS-SUB1 > 71\n                         MOVE SPACE        TO WS-HOLD-RCD(WS-SUB1: 1)\n                         MOVE 'Y'             TO WS-UPDT-COMMENT-SW\n                     ELSE\n                         MOVE '*'          TO WS-HOLD-RCD(WS-SUB1: 1)\n                         MOVE 'Y'             TO WS-UPDT-COMMENT-SW\n                     END-IF\n                   END-IF\n               END-PERFORM\n           END-IF.\n\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '*'.\n           IF WS-TALLY > 10\n               MOVE SPACE                     TO WS-FIRST-LINE-SW\n               PERFORM VARYING WS-SUB1 FROM 4 BY 1\n                   UNTIL WS-SUB1 > 72\n                   IF WS-SUB1 > 71\n                       MOVE SPACE          TO WS-HOLD-RCD(WS-SUB1: 1)\n                       MOVE 'Y'               TO WS-UPDT-COMMENT-SW\n                   ELSE\n                   IF WS-HOLD-RCD(WS-SUB1: 1) = SPACE\n                       MOVE '*'            TO WS-HOLD-RCD(WS-SUB1: 1)\n                       MOVE 'Y'               TO WS-UPDT-COMMENT-SW\n                   END-IF\n                   END-IF\n               END-PERFORM\n           END-IF.\n\n       1500-CONVERT-TO-DASHES.\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '*'.\n           IF WS-TALLY > 10\n               MOVE SPACE                     TO WS-FIRST-LINE-SW\n               PERFORM VARYING WS-SUB1 FROM 4 BY 1\n                   UNTIL WS-SUB1 > 72\n                   IF WS-HOLD-RCD(WS-SUB1: 1) = '*'\n                     IF WS-SUB1 > 52\n                         MOVE SPACE        TO WS-HOLD-RCD(WS-SUB1: 1)\n                         MOVE 'Y'             TO WS-UPDT-COMMENT-SW\n                     ELSE\n                         MOVE '-'          TO WS-HOLD-RCD(WS-SUB1: 1)\n                         MOVE 'Y'             TO WS-UPDT-COMMENT-SW\n                     END-IF\n                   END-IF\n               END-PERFORM\n           END-IF.\n\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '-'.\n           IF WS-TALLY > 10\n               MOVE SPACE                     TO WS-FIRST-LINE-SW\n               PERFORM VARYING WS-SUB1 FROM 4 BY 1\n                   UNTIL WS-SUB1 > 72\n                   IF WS-HOLD-RCD(WS-SUB1: 1) = '-'\n                     IF WS-SUB1 > 52\n                         MOVE SPACE        TO WS-HOLD-RCD(WS-SUB1: 1)\n                         MOVE 'Y'             TO WS-UPDT-COMMENT-SW\n                     END-IF\n                   ELSE\n                   IF WS-HOLD-RCD(WS-SUB1: 1) = SPACE\n                     IF WS-SUB1 > 52\n                         CONTINUE\n                     ELSE\n                         MOVE '-'          TO WS-HOLD-RCD(WS-SUB1: 1)\n                         MOVE 'Y'             TO WS-UPDT-COMMENT-SW\n                     END-IF\n                   END-IF\n                   END-IF\n               END-PERFORM\n           END-IF.\n\n       1500-ZAP-TRAIL-ASTERISKS.\n           IF WS-HOLD-RCD(72: 1) = '*'\n               MOVE SPACE                     TO WS-HOLD-RCD(72: 1)\n               MOVE 'Y'                       TO WS-UPDT-COMMENT-SW.\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-HOLD-RCD TALLYING WS-TALLY FOR ALL '*'.\n           IF WS-TALLY < 69\n               PERFORM 1500-ZAP-HANGERS\n                   VARYING WS-SUB1 FROM 71 BY -1\n                   UNTIL WS-SUB1 < 4.\n\n       1500-ZAP-HANGERS.\n           IF WS-HOLD-RCD(WS-SUB1: 2) = '* '\n               MOVE SPACE                     TO WS-HOLD-RCD(WS-SUB1: 1)\n               MOVE 'Y'                       TO WS-UPDT-COMMENT-SW\n           ELSE\n           IF WS-HOLD-RCD(WS-SUB1: 1) = SPACE OR '-' OR '=' OR '+'\n               CONTINUE\n           ELSE\n               MOVE 1                         TO WS-SUB1.\n\n       1500-LOOK-FOR-JCL-IN-COMMENTS.\n           MOVE WS-I1-ITEM(WS-SUB2)           TO WS-ITEM.\n           MOVE WS-I1-LEN(WS-SUB2)            TO WS-LEN.\n           IF WS-ITEM(1: 1) = SPACE\n               MOVE WS-ITEM                   TO WS-HOLD-20\n               MOVE WS-HOLD-20(2: )           TO WS-ITEM\n               SUBTRACT 1 FROM WS-LEN.\n           IF WS-I1-EXCL(WS-SUB2) = 'X'\n               CONTINUE\n           ELSE\n           IF WS-HOLD-RCD(WS-SUB1: WS-LEN) = WS-ITEM(1: WS-LEN)\n               ADD 1                          TO WS-TALLY.\n\n       1500-FIND-COMMENT-START.\n           IF WS-HOLD-RCD(WS-SUB1: 1) = '-' OR '*' OR '='\n                                     OR '+' OR SPACE\n               CONTINUE\n           ELSE\n               MOVE WS-SUB1                   TO WS-FND-POS\n               MOVE 72                        TO WS-SUB1.\n\n       1500-MOVE-COMMENTS.\n           MOVE WS-FND-POS                    TO WS-SUB3.\n           PERFORM 1500-MOVE-COMMENTS-CHARS\n               VARYING WS-SUB2 FROM 4 BY 1\n               UNTIL WS-SUB2 > 72.\n\n       1500-MOVE-COMMENTS-CHARS.\n           IF WS-SUB2 < WS-COMMENT-POS\n               MOVE SPACE                  TO WS-HOLD-RCD(WS-SUB2: 1)\n           ELSE\n           IF WS-SUB3 > 72\n               MOVE SPACE                  TO WS-HOLD-RCD(WS-SUB2: 1)\n           ELSE\n               MOVE WS-HOLD-RCD2(WS-SUB3: 1)  TO WS-HOLD-RCD(WS-SUB2: 1)\n               MOVE 'Y'                       TO WS-UPDT-COMMENT-SW\n               ADD 1                          TO WS-SUB3.\n\n       1500-CHANGE-WORD-CASE.\n           MOVE ZERO                          TO WS-SUB3.\n           PERFORM 1500-FIND-VARIOUS-WORDS\n               VARYING WS-SUB1 FROM 4 BY 1\n               UNTIL WS-SUB1 > 66.\n\n       1500-FIND-VARIOUS-WORDS.\n           PERFORM 1500-WORD-LOOP\n               VARYING WS-SUB2 FROM 1 BY 1\n               UNTIL WS-SUB2 > WS-W1-MAX.\n\n       1500-WORD-LOOP.\n           MOVE WS-W1-ITEM(WS-SUB2)           TO WS-ITEM.\n           MOVE WS-W1-LEN(WS-SUB2)            TO WS-LEN.\n\n           IF WS-HOLD-RCD(WS-SUB1: WS-LEN)\n                                      = WS-ITEM(1: WS-LEN)\n               MOVE WS-SUB1                   TO WS-SUB3\n               PERFORM 1500-CHANGE-START-LOC\n               IF WS-W1-HANDLE(WS-SUB2) = 'F'\n                   PERFORM 1500-UPPER-CASE-WORD\n                       UNTIL WS-SUB3 > 72\n               ELSE\n               IF WS-W1-HANDLE(WS-SUB2) = 'N'\n                   MOVE SPACE                 TO WS-NUMERIC-WORD-SW\n                   PERFORM 1500-NUMERIC-WORD\n                       UNTIL WS-SUB3 > 72\n                   IF WS-NUMERIC-WORD-SW = 'Y'\n                       MOVE WS-SUB1           TO WS-SUB3\n                       PERFORM 1500-CHANGE-START-LOC\n                       PERFORM 1500-UPPER-CASE\n                           UNTIL WS-SUB3 > 72\n                   ELSE\n                       CONTINUE\n               ELSE\n                   PERFORM 1500-UPPER-CASE\n                       UNTIL WS-SUB3 > 72.\n\n       1500-CHANGE-START-LOC.\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-ITEM TALLYING WS-TALLY FOR LEADING SPACE.\n           ADD WS-TALLY                       TO WS-SUB3.\n\n       1500-UPPER-CASE.\n           IF WS-HOLD-RCD(WS-SUB3: 1) = X'7D'\n             IF WS-ITEM(1: 1) = X'7D'\n                 OR WS-ITEM(2: 1) = X'7D'\n                 ADD 1                        TO WS-SUB3\n             ELSE\n                 MOVE 73                      TO WS-SUB3\n           ELSE\n           IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE\n               MOVE 73                        TO WS-SUB3\n           ELSE\n               INSPECT WS-HOLD-RCD(WS-SUB3: 1)\n                   CONVERTING 'abcdefghijklmnopqrstuvwxyz'\n                   TO         'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n               MOVE 'Y'                       TO WS-UPDT-COMMENT-SW\n               ADD 1                          TO WS-SUB3.\n\n       1500-NUMERIC-WORD.\n           IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE\n               MOVE 73                        TO WS-SUB3\n           ELSE\n           IF WS-HOLD-RCD(WS-SUB3: 1) NUMERIC\n               MOVE 73                        TO WS-SUB3\n               MOVE 'Y'                       TO WS-NUMERIC-WORD-SW\n           ELSE\n               ADD 1                          TO WS-SUB3.\n\n       1500-UPPER-CASE-WORD.\n           IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE\n               ADD 1                          TO WS-SUB3\n           ELSE\n           IF WS-HOLD-RCD(WS-SUB3: 1) ALPHABETIC\n               INSPECT WS-HOLD-RCD(WS-SUB3: 1)\n                   CONVERTING 'abcdefghijklmnopqrstuvwxyz'\n                   TO         'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n               MOVE 73                        TO WS-SUB3\n               MOVE 'Y'                       TO WS-UPDT-COMMENT-SW\n           ELSE\n               ADD 1                          TO WS-SUB3.\n\n       1500-UPPER-CASE-FIRST.\n           IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE\n               ADD 1                          TO WS-SUB3\n           ELSE\n           IF WS-HOLD-RCD(WS-SUB3: 1) ALPHABETIC\n               INSPECT WS-HOLD-RCD(WS-SUB3: 1)\n                   CONVERTING 'abcdefghijklmnopqrstuvwxyz'\n                   TO         'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n               MOVE 73                        TO WS-SUB3\n               MOVE 'N'                       TO WS-FIRST-LINE-SW\n               MOVE 'Y'                       TO WS-UPDT-COMMENT-SW\n           ELSE\n               ADD 1                          TO WS-SUB3.\n\n       1500-UPPER-CASE-AFTER-DOT.\n           IF WS-HOLD-RCD(WS-SUB3: 2) = '. ' OR ': '\n               ADD 1                          TO WS-SUB3\n               MOVE 'Y'                       TO WS-DOT-SW\n           ELSE\n           IF WS-DOT-SW = 'Y'\n             IF WS-HOLD-RCD(WS-SUB3: 1) = SPACE\n                 ADD 1                        TO WS-SUB3\n             ELSE\n             IF WS-HOLD-RCD(WS-SUB3: 1) ALPHABETIC\n                 INSPECT WS-HOLD-RCD(WS-SUB3: 1)\n                     CONVERTING 'abcdefghijklmnopqrstuvwxyz'\n                     TO         'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n                 MOVE SPACE                   TO WS-DOT-SW\n                 MOVE 'Y'                     TO WS-UPDT-COMMENT-SW\n             ELSE\n                 ADD 1                        TO WS-SUB3\n           ELSE\n               ADD 1                          TO WS-SUB3.\n\n       1500-RESET-INLINE.\n           IF WS-INLINE-SW = 'Y'\n               PERFORM 1600-SHOW-BLANK-LINE.\n           MOVE SPACE                         TO WS-DELIM.\n           MOVE SPACE                         TO WS-INLINE-SW.\n\n       1600-SHOW-FOUND-MSG.\n           IF WS-LS-TEST NUMERIC\n               MOVE FUNCTION LOWER-CASE(WS-ITEM) TO WS-ITEM-LC\n               DISPLAY '    found  ' WS-READ-JCL01-CNT\n                       '  ' WS-ITEM-LC '  at ' WS-FND-POS\n                       ' req ' WS-POS\n               IF WS-LS-TEST = '2' OR '3'\n                   DISPLAY '               ----+----1----+----2----'\n                        '+----3----+----4----+----5----+----6'\n                        '----+----7--'.\n\n       1600-SHOW-OPT-BEFORE.\n           IF WS-LS-TEST NUMERIC\n             IF WS-OPTION NOT = SPACE\n                 DISPLAY '       before ' WS-HOLD-RCD2.\n\n       1600-SHOW-BEFORE.\n           IF WS-LS-TEST NUMERIC\n               DISPLAY '       before ' WS-HOLD-RCD2.\n\n       1600-SHOW-OPT-AFTER.\n           IF WS-LS-TEST NUMERIC\n             IF WS-OPTION NOT = SPACE\n                 DISPLAY '       after  ' WS-HOLD-RCD.\n\n       1600-SHOW-AFTER.\n           IF WS-LS-TEST NUMERIC\n               DISPLAY '       after  ' WS-HOLD-RCD.\n\n       1600-SHOW-WORK.\n           IF WS-LS-TEST = '3'\n               DISPLAY '       - fnd pos ' WS-FND-POS\n                       '  new pos   ' WS-POS\n                       '  move len  ' WS-MOVE\n                       '  space loc ' WS-SPACE-LOC\n               DISPLAY '       - diff    ' WS-DIFF\n                       '  space len ' WS-SPACE-LEN\n                       '  blank loc ' WS-BLANK.\n\n       1600-SHOW-NO-ROOM.\n           IF WS-LS-TEST NUMERIC\n               DISPLAY '   --> no room for adjustment at pos '\n                         WS-POS ' for item ' WS-ITEM\n                         ' rcd ' WS-READ-JCL01-CNT.\n\n       1600-SHOW-SKIP-MSG.\n           IF WS-DELIM = SPACE\n               MOVE SPACE                     TO WS-HOLD-10\n           ELSE\n               MOVE 'delimiter '              TO WS-HOLD-10.\n           IF WS-LS-TEST NUMERIC\n               DISPLAY '       skip   ' WS-READ-JCL01-CNT\n                       '  inline JCL  ' WS-HOLD-10 ' ' WS-DELIM.\n\n       1600-SHOW-BLANK-LINE.\n           IF WS-LS-TEST NUMERIC\n               DISPLAY '          '.\n\n       1600-SHOW-DIVIDING-LINE.\n           IF WS-LS-TEST NUMERIC\n               DISPLAY '          '\n               DISPLAY '=====================break==================='\n                       '==='\n               DISPLAY '          '.\n\n       1600-SHOW-JOB.\n           IF WS-LS-TEST NUMERIC\n               DISPLAY '      '\n               DISPLAY ' Job   ' WS-JOB.\n\n       1600-SHOW-PROC.\n           IF WS-LS-TEST NUMERIC\n               DISPLAY '      '\n               DISPLAY ' Proc  ' WS-PROC.\n\n      *---------------------------------------\n      *    Determine file dispositions\n      *      Changes are applied in 1900-APPLY-OLD-NEW\n      *----+----------------------------------\n       1800-DETERMINE-OLD-NEW.\n           IF WS-LS-TEST NUMERIC\n               DISPLAY ' Option \"flag disp\" specified - '\n               DISPLAY '   determining and applying file dispositions'\n               DISPLAY '          '.\n           PERFORM VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > 2000\n               MOVE ZERO                      TO WS-D1-LINE(WS-SUB1)\n               MOVE SPACE                     TO WS-D1-DISP(WS-SUB1)\n           END-PERFORM.\n           MOVE ZERO                          TO WS-READ-JCL01-CNT.\n           MOVE ZERO                          TO WS-SUB1.\n           MOVE SPACE                         TO WS-INLINE-SW.\n           PERFORM 0200-OPEN-JCL01-INPUT.\n           PERFORM 1800-READ-JCL01 THRU\n                   1800-READ-JCL01-EXIT.\n           CLOSE JCL01.\n           MOVE WS-SUB1                       TO WS-D1-MAX.\n\n       1800-READ-JCL01.\n           READ JCL01.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-JCL01-CNT\n               MOVE WS-READ-JCL01-CNT         TO WS-HOLD-FILE-CNT\n               MOVE JCL01-RCD                 TO WS-HOLD-RCD\n               PERFORM 1800-SELECT-ACTIVE-LINES\n               GO TO 1800-READ-JCL01\n           ELSE\n           IF WS-STAT = 10\n               CONTINUE\n           ELSE\n               DISPLAY '**** JCLNEAT read error on JCL01 '\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +1800                     TO WS-RETURN-CODE.\n\n       1800-READ-JCL01-EXIT. EXIT.\n\n       1800-SELECT-ACTIVE-LINES.\n           IF WS-DELIM NOT = SPACE\n               MOVE SPACE                     TO WS-UNSTR-FIELDS\n               UNSTRING WS-HOLD-RCD           DELIMITED BY ALL SPACE\n                   INTO WS-UNSTR1 WS-UNSTR2 WS-UNSTR3 WS-UNSTR4\n               IF WS-DELIM = WS-UNSTR1 OR WS-UNSTR2 OR WS-UNSTR3\n                          OR WS-UNSTR4\n                   MOVE SPACE                 TO WS-DELIM\n                   MOVE SPACE                 TO WS-INLINE-SW\n               ELSE\n                   CONTINUE\n           ELSE\n           IF WS-HOLD-RCD(1: 3) = '/* '\n               MOVE SPACE                     TO WS-INLINE-SW\n           ELSE\n           IF WS-HOLD-RCD(1: 3) = '//*'\n               MOVE SPACE                     TO WS-INLINE-SW\n           ELSE\n           IF WS-INLINE-SW = 'Y'\n               CONTINUE\n           ELSE\n               PERFORM 1200-SET-INLINE-SWITCH\n               PERFORM 1800-FIND-FILE-LINES.\n\n       1800-FIND-FILE-LINES.\n           MOVE ' DD '                        TO WS-ITEM.\n           MOVE 4                             TO WS-LEN.\n           MOVE SPACE                         TO WS-SKIP-SW.\n           MOVE SPACE                         TO WS-QUOTE-SW.\n           MOVE SPACE                         TO WS-ITEM-FND-SW.\n           PERFORM 2400-FIND-ITEM\n               VARYING WS-SUB2 FROM 4 BY 1\n               UNTIL WS-SUB2 > 30.\n           IF WS-ITEM-FND-SW = 'Y'\n               MOVE SPACE                     TO WS-ON-DSN-SW\n               MOVE SPACE                     TO WS-ON-DISP-SW\n               MOVE WS-HOLD-FILE-CNT          TO WS-HOLD-LINE.\n\n           MOVE 'DSN='                        TO WS-ITEM.\n           MOVE 4                             TO WS-LEN.\n           MOVE SPACE                         TO WS-SKIP-SW.\n           MOVE SPACE                         TO WS-QUOTE-SW.\n           MOVE SPACE                         TO WS-ITEM-FND-SW.\n           PERFORM 2400-FIND-ITEM\n               VARYING WS-SUB2 FROM 4 BY 1\n               UNTIL WS-SUB2 > 60.\n           IF WS-ITEM-FND-SW = 'Y'\n               MOVE 'Y'                       TO WS-ON-DSN-SW.\n\n           MOVE 'DISP='                       TO WS-ITEM.\n           MOVE 5                             TO WS-LEN.\n           MOVE SPACE                         TO WS-SKIP-SW.\n           MOVE SPACE                         TO WS-QUOTE-SW.\n           MOVE SPACE                         TO WS-ITEM-FND-SW.\n           PERFORM 2400-FIND-ITEM\n               VARYING WS-SUB2 FROM 4 BY 1\n               UNTIL WS-SUB2 > 60.\n           IF WS-ITEM-FND-SW = 'Y'\n               MOVE 'Y'                       TO WS-ON-DISP-SW\n               PERFORM 1800-UNCLUTTER-FILE-DISP.\n\n           IF WS-ON-DSN-SW = 'Y'\n             IF WS-ON-DISP-SW = 'Y'\n                 PERFORM 1800-LOAD-D1-TABLE.\n\n      *    DISP=(MOD,DELETE,       DISP=SHR          DISP=MOD\n      *    DISP=(NEW,CATLG,DELE    DISP=(,CATLG),    DISP=OLD\n       1800-UNCLUTTER-FILE-DISP.\n           MOVE SPACE                         TO WS-OLD-NEW.\n           MOVE SPACE                         TO WS-UNSTR-FIELDS.\n           MOVE WS-HOLD-RCD(WS-TEMP-SUB + 5: )  TO WS-HOLD-20.\n           INSPECT WS-HOLD-20 REPLACING ALL '(' BY SPACE.\n           INSPECT WS-HOLD-20 REPLACING ALL ')' BY SPACE.\n           UNSTRING WS-HOLD-20 DELIMITED BY ','\n               INTO WS-UNSTR1 WS-UNSTR2 WS-UNSTR3.\n           MOVE WS-UNSTR1                     TO WS-HOLD-20.\n           PERFORM 2800-SHIFT-LEFT.\n           MOVE WS-HOLD-20                    TO WS-UNSTR1.\n\n           IF WS-UNSTR1 = 'MOD'\n             IF WS-UNSTR2 = 'DELETE'\n                 MOVE 'del'                   TO WS-OLD-NEW\n             ELSE\n                 MOVE 'mod'                   TO WS-OLD-NEW\n           ELSE\n           IF WS-UNSTR1 = 'SHR'\n               MOVE 'shr'                     TO WS-OLD-NEW\n           ELSE\n           IF WS-UNSTR1 = SPACE OR 'NEW'\n               MOVE 'new'                     TO WS-OLD-NEW\n           ELSE\n           IF WS-UNSTR1 = 'OLD'\n             IF WS-UNSTR2 = 'DELETE'\n                 MOVE 'del'                   TO WS-OLD-NEW\n             ELSE\n                 MOVE 'old'                   TO WS-OLD-NEW.\n\n       1800-LOAD-D1-TABLE.\n           MOVE SPACE                         TO WS-ON-DSN-SW.\n           MOVE SPACE                         TO WS-ON-DISP-SW.\n           IF WS-SUB1 < 2000\n               ADD 1                          TO WS-SUB1\n               MOVE WS-HOLD-LINE              TO WS-D1-LINE(WS-SUB1)\n               MOVE WS-OLD-NEW                TO WS-D1-DISP(WS-SUB1).\n\n      *---------------------------------------\n      *    Apply file dispositions\n      *----+----------------------------------\n       1900-APPLY-OLD-NEW.\n           MOVE ZERO                          TO WS-READ-JCL01-CNT.\n           MOVE ZERO                          TO WS-SUB1.\n           MOVE SPACE                         TO WS-INLINE-SW.\n           PERFORM 0200-OPEN-JCL01-IO.\n           PERFORM 1900-READ-JCL01 THRU\n                   1900-READ-JCL01-EXIT.\n           CLOSE JCL01.\n\n           PERFORM 1600-SHOW-DIVIDING-LINE.\n\n       1900-READ-JCL01.\n           READ JCL01.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-JCL01-CNT\n               MOVE WS-READ-JCL01-CNT         TO WS-HOLD-FILE-CNT\n               MOVE JCL01-RCD                 TO WS-HOLD-RCD\n               PERFORM 1900-SELECT-ACTIVE-LINES\n               GO TO 1900-READ-JCL01\n           ELSE\n           IF WS-STAT = 10\n               CONTINUE\n           ELSE\n               DISPLAY '**** JCLNEAT read error on JCL01 '\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +1900                     TO WS-RETURN-CODE.\n\n       1900-READ-JCL01-EXIT. EXIT.\n\n       1900-SELECT-ACTIVE-LINES.\n           PERFORM 1200-DETERMINE-SKIP-BY-REQ.\n           MOVE WS-HOLD-RCD                   TO WS-HOLD-ORIG.\n           IF WS-DELIM NOT = SPACE\n               MOVE SPACE                     TO WS-UNSTR-FIELDS\n               UNSTRING WS-HOLD-RCD           DELIMITED BY ALL SPACE\n                   INTO WS-UNSTR1 WS-UNSTR2 WS-UNSTR3 WS-UNSTR4\n               IF WS-DELIM = WS-UNSTR1 OR WS-UNSTR2 OR WS-UNSTR3\n                          OR WS-UNSTR4\n                   MOVE SPACE                 TO WS-DELIM\n                   MOVE SPACE                 TO WS-INLINE-SW\n               ELSE\n                   CONTINUE\n           ELSE\n           IF WS-HOLD-RCD(1: 3) = '/* '\n               MOVE SPACE                     TO WS-INLINE-SW\n           ELSE\n           IF WS-HOLD-RCD(1: 3) = '//*'\n               MOVE SPACE                     TO WS-INLINE-SW\n           ELSE\n           IF WS-INLINE-SW = 'Y'\n               CONTINUE\n           ELSE\n           IF WS-SKIP-RCD-BY-REQ = 'Y'\n               CONTINUE\n           ELSE\n               PERFORM 1200-SET-INLINE-SWITCH\n               PERFORM 1900-FIND-FILE-LINES\n               IF WS-RCD-UPDATE-SW = 'Y'\n                 IF WS-HOLD-RCD = WS-HOLD-ORIG\n                     CONTINUE\n                 ELSE\n                     MOVE WS-HOLD-RCD         TO JCL01-RCD\n                     PERFORM 3000-REWRITE-JCL01\n                     ADD 1                    TO WS-REWRITE-JCL04-CNT.\n\n       1900-FIND-FILE-LINES.\n           MOVE SPACE                         TO WS-RCD-UPDATE-SW.\n\n           MOVE ' DD '                        TO WS-ITEM.\n           MOVE 4                             TO WS-LEN.\n           MOVE SPACE                         TO WS-SKIP-SW.\n           MOVE SPACE                         TO WS-QUOTE-SW.\n           MOVE SPACE                         TO WS-ITEM-FND-SW.\n           PERFORM 2400-FIND-ITEM\n               VARYING WS-SUB2 FROM 4 BY 1\n               UNTIL WS-SUB2 > 30.\n           IF WS-ITEM-FND-SW = 'Y'\n               PERFORM 1900-ZAP-DISP-INTO-LINE.\n\n       1900-ZAP-DISP-INTO-LINE.\n           PERFORM VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > WS-D1-MAX\n               IF WS-D1-LINE(WS-SUB1) = WS-HOLD-FILE-CNT\n                   PERFORM 1900-PLACE-DISP-FLAG\n                   MOVE WS-D1-MAX             TO WS-SUB1\n               END-IF\n           END-PERFORM.\n\n       1900-PLACE-DISP-FLAG.\n           IF WS-FLAG-PFX-SW = 'Y'\n             IF WS-HOLD-RCD(WS-FLAG-D1-POS - 2: 5) = SPACE\n                 MOVE '*'      TO WS-HOLD-RCD(WS-FLAG-D1-POS - 1: 1)\n                 MOVE WS-D1-DISP(WS-SUB1)\n                                      TO WS-HOLD-RCD(WS-FLAG-D1-POS: 3)\n                 MOVE 'Y'                     TO WS-RCD-UPDATE-SW\n             ELSE\n                 CONTINUE\n           ELSE\n           IF WS-HOLD-RCD(WS-FLAG-D1-POS - 1: 4) = SPACE\n               MOVE WS-D1-DISP(WS-SUB1)\n                                    TO WS-HOLD-RCD(WS-FLAG-D1-POS: 3)\n               MOVE 'Y'                       TO WS-RCD-UPDATE-SW.\n\n      *---------------------------------------\n      *    Renumber EXEC steps\n      *      Determine old and new steps here\n      *      Changes are applied in 2400-APPLY-NEW-STEPS\n      *----+----------------------------------\n       2000-DETERMINE-NEW-STEPS.\n           IF WS-LS-TEST NUMERIC\n               DISPLAY ' Option \"renum\" specified - '\n               DISPLAY '   determining new step names:'\n               DISPLAY '          '.\n           MOVE ZERO                          TO WS-P1-SUB.\n           MOVE ZERO                          TO WS-J1-SUB.\n           MOVE ZERO                          TO WS-EXEC-NBR.\n           MOVE ZERO                          TO WS-JOB-NBR.\n           MOVE ZERO                          TO WS-READ-JCL01-CNT.\n           MOVE SPACE                         TO WS-INLINE-SW.\n           MOVE SPACE                         TO WS-PROC.\n           MOVE SPACE                         TO WS-STEP.\n           MOVE 'P'                           TO WS-JOB-PROC-SW.\n           PERFORM 0200-OPEN-JCL01-INPUT.\n           PERFORM 2000-READ-JCL01 THRU\n                   2000-READ-JCL01-EXIT.\n           CLOSE JCL01.\n           MOVE WS-P1-SUB                     TO WS-P1-MAX.\n           MOVE WS-J1-SUB                     TO WS-J1-MAX.\n           MOVE WS-T1-SUB                     TO WS-T1-MAX.\n\n           MOVE ZERO                          TO WS-MAX-THRESH.\n           EVALUATE WS-EXEC-DIGITS\n               WHEN 1    MOVE 9               TO WS-MAX-THRESH\n               WHEN 2    MOVE 99              TO WS-MAX-THRESH\n               WHEN 3    MOVE 999             TO WS-MAX-THRESH\n               WHEN 4    MOVE 9999            TO WS-MAX-THRESH\n           END-EVALUATE.\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                      TO WS-MAX-DIGITS\n               COMPUTE WS-MAX-DIGITS = WS-P1-MAX * WS-EXEC-INCREMENT\n               IF WS-MAX-DIGITS > WS-MAX-THRESH\n                   DISPLAY '              '\n                   DISPLAY ' number of steps found: ' WS-P1-MAX\n                   DISPLAY ' \"renum pdigit\" is:      ' WS-EXEC-DIGITS\n                   DISPLAY ' \"renum pincr\"  is:      '\n                                                    WS-EXEC-INCREMENT\n                   DISPLAY ' !! computed \"renum\" combination '\n                            WS-MAX-DIGITS ' exceeds the max '\n                           'threshold of ' WS-MAX-THRESH\n                   DISPLAY ' as determined from the \"renum pdigit\" '\n                           'setting'\n                   MOVE +0004                 TO WS-RETURN-CODE.\n\n           MOVE ZERO                          TO WS-MAX-THRESH.\n           EVALUATE WS-JOB-DIGITS\n               WHEN 1    MOVE 9               TO WS-MAX-THRESH\n               WHEN 2    MOVE 99              TO WS-MAX-THRESH\n               WHEN 3    MOVE 999             TO WS-MAX-THRESH\n               WHEN 4    MOVE 9999            TO WS-MAX-THRESH\n           END-EVALUATE.\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                      TO WS-MAX-DIGITS\n               COMPUTE WS-MAX-DIGITS = WS-J1-MAX * WS-JOB-INCREMENT\n               IF WS-JOB-DIGITS > WS-MAX-THRESH\n                   DISPLAY '              '\n                   DISPLAY ' number of steps found: ' WS-J1-MAX\n                   DISPLAY ' \"renum jdigit\" is:      ' WS-JOB-DIGITS\n                   DISPLAY ' \"renum jincr\"  is:      '\n                                                    WS-JOB-INCREMENT\n                   DISPLAY ' !! computed \"renum\" combination '\n                            WS-MAX-DIGITS ' exceeds the max '\n                           'threshold of ' WS-MAX-THRESH\n                   DISPLAY ' as determined from the \"renum jdigit\" '\n                           'setting'\n                   MOVE +0004                 TO WS-RETURN-CODE.\n           IF WS-LS-TEST NUMERIC\n             IF WS-T1-MAX > ZERO\n                 DISPLAY '              '\n                 DISPLAY ' Connect table'\n                 DISPLAY '       Job step   Proc'\n                 PERFORM VARYING WS-SUB3 FROM 1 BY 1\n                     UNTIL WS-SUB3 > WS-T1-MAX\n                     DISPLAY '       ' WS-T1-JOB(WS-SUB3)\n                             '   '   WS-T1-PROC(WS-SUB3)\n                 END-PERFORM.\n\n           PERFORM 1600-SHOW-DIVIDING-LINE.\n\n       2000-READ-JCL01.\n           READ JCL01.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-JCL01-CNT\n               MOVE WS-READ-JCL01-CNT         TO WS-HOLD-FILE-CNT\n               MOVE JCL01-RCD                 TO WS-HOLD-RCD\n               PERFORM 2100-SELECT-ACTIVE-LINES\n               GO TO 2000-READ-JCL01\n           ELSE\n           IF WS-STAT = 10\n               CONTINUE\n           ELSE\n               DISPLAY '**** JCLNEAT read error on JCL01 '\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +2000                     TO WS-RETURN-CODE.\n\n       2000-READ-JCL01-EXIT. EXIT.\n\n       2100-SELECT-ACTIVE-LINES.\n           IF WS-DELIM NOT = SPACE\n               MOVE SPACE                     TO WS-UNSTR-FIELDS\n               UNSTRING WS-HOLD-RCD           DELIMITED BY ALL SPACE\n                   INTO WS-UNSTR1 WS-UNSTR2 WS-UNSTR3 WS-UNSTR4\n               IF WS-DELIM = WS-UNSTR1 OR WS-UNSTR2 OR WS-UNSTR3\n                          OR WS-UNSTR4\n                   MOVE SPACE                 TO WS-DELIM\n                   MOVE SPACE                 TO WS-INLINE-SW\n               ELSE\n                   CONTINUE\n           ELSE\n           IF WS-HOLD-RCD(1: 3) = '/* '\n               MOVE SPACE                     TO WS-INLINE-SW\n           ELSE\n           IF WS-HOLD-RCD(1: 3) = '//*'\n               MOVE SPACE                     TO WS-INLINE-SW\n           ELSE\n           IF WS-INLINE-SW = 'Y'\n               CONTINUE\n           ELSE\n               PERFORM 1200-SET-INLINE-SWITCH\n               PERFORM 2100-SELECTED-LINES.\n\n       2100-SELECTED-LINES.\n           MOVE ' JOB '                       TO WS-ITEM.\n           MOVE 5                             TO WS-LEN.\n           MOVE SPACE                         TO WS-SKIP-SW.\n           MOVE SPACE                         TO WS-QUOTE-SW.\n           MOVE SPACE                         TO WS-ITEM-FND-SW.\n           PERFORM 2400-FIND-ITEM\n               VARYING WS-SUB2 FROM 4 BY 1\n               UNTIL WS-SUB2 > 30.\n           IF WS-ITEM-FND-SW = 'Y'\n               PERFORM 2100-RESET-JOB-STEPS\n               MOVE 'J'                       TO WS-JOB-PROC-SW\n               MOVE WS-HOLD-RCD(3: 8)         TO WS-HOLD-JOB\n               MOVE SPACE                     TO WS-JOB\n               UNSTRING WS-HOLD-JOB           DELIMITED BY SPACE\n                   INTO WS-JOB\n               PERFORM 1600-SHOW-JOB.\n\n           MOVE ' PROC '                      TO WS-ITEM.\n           MOVE 6                             TO WS-LEN.\n           MOVE SPACE                         TO WS-SKIP-SW.\n           MOVE SPACE                         TO WS-QUOTE-SW.\n           MOVE SPACE                         TO WS-ITEM-FND-SW.\n           PERFORM 2400-FIND-ITEM\n               VARYING WS-SUB2 FROM 4 BY 1\n               UNTIL WS-SUB2 > 30.\n           IF WS-ITEM-FND-SW = 'Y'\n               PERFORM 2100-RESET-PROC-STEPS\n               MOVE 'P'                       TO WS-JOB-PROC-SW\n               MOVE WS-HOLD-RCD(3: 8)         TO WS-HOLD-PROC\n               MOVE SPACE                     TO WS-PROC\n               UNSTRING WS-HOLD-PROC          DELIMITED BY SPACE\n                   INTO WS-PROC\n               PERFORM 1600-SHOW-PROC.\n\n           MOVE ' PEND '                      TO WS-ITEM.\n           MOVE 6                             TO WS-LEN.\n           MOVE SPACE                         TO WS-SKIP-SW.\n           MOVE SPACE                         TO WS-QUOTE-SW.\n           MOVE SPACE                         TO WS-ITEM-FND-SW.\n           PERFORM 2400-FIND-ITEM\n               VARYING WS-SUB2 FROM 4 BY 1\n               UNTIL WS-SUB2 > 30.\n           IF WS-ITEM-FND-SW = 'Y'\n               MOVE 'J'                       TO WS-JOB-PROC-SW.\n\n           MOVE ' EXEC '                      TO WS-ITEM.\n           MOVE 6                             TO WS-LEN.\n           MOVE SPACE                         TO WS-SKIP-SW.\n           MOVE SPACE                         TO WS-QUOTE-SW.\n           MOVE SPACE                         TO WS-ITEM-FND-SW.\n           PERFORM 2400-FIND-ITEM\n               VARYING WS-SUB2 FROM 4 BY 1\n               UNTIL WS-SUB2 > 30.\n           IF WS-ITEM-FND-SW = 'Y'\n               MOVE WS-HOLD-RCD(3: 8)         TO WS-HOLD-STEP\n               MOVE SPACE                     TO WS-STEP\n               UNSTRING WS-HOLD-STEP          DELIMITED BY SPACE\n                   INTO WS-STEP\n               PERFORM 2100-CAPTURE-PROGRAM\n               PERFORM 2100-EXEC-BREAK\n               IF WS-JOB-PROC-SW = 'J'\n                   PERFORM 2100-LOAD-CONNECT-TABLE.\n\n      *    hold proc names associated with job steps to allow\n      *    cross-checking when replacing job.step names\n       2100-LOAD-CONNECT-TABLE.\n           MOVE WS-HOLD-RCD(WS-TEMP-SUB + 6: 10) TO WS-HOLD-20.\n           PERFORM 2800-SHIFT-LEFT.\n           IF WS-HOLD-20(1: 4) NOT = 'PGM='\n               MOVE SPACE                     TO WS-HOLD-20-TEMP\n               PERFORM VARYING WS-SUB3 FROM 1 BY 1\n                   UNTIL WS-SUB3 > 20\n                   IF WS-HOLD-20(WS-SUB3: 1) = ',' OR SPACE\n                       MOVE WS-HOLD-20(1: WS-SUB3 - 1)\n                                                  TO WS-HOLD-20-TEMP\n                       MOVE 20                TO WS-SUB3\n                   END-IF\n               END-PERFORM\n               IF WS-HOLD-20-TEMP NOT = SPACE\n                 IF WS-T1-SUB < 50\n                     ADD 1                    TO WS-T1-SUB\n                     MOVE WS-STEP             TO WS-T1-JOB(WS-T1-SUB)\n                     MOVE WS-HOLD-20-TEMP     TO WS-T1-PROC(WS-T1-SUB).\n\n      *    'PGM=IEFBR14,'  -->  'IEFBR14'\n       2100-CAPTURE-PROGRAM.\n           MOVE WS-HOLD-RCD(WS-TEMP-SUB + 6: )\n                                              TO WS-HOLD-20.\n           PERFORM 2800-SHIFT-LEFT.\n           MOVE SPACE                         TO WS-PROGRAM.\n           IF WS-HOLD-20(1: 4) = 'PGM='\n               PERFORM VARYING WS-SUB3 FROM 5 BY 1\n                   UNTIL WS-SUB3 > 20\n                   IF WS-HOLD-20(WS-SUB3: 1) = '&'\n                       MOVE 20                TO WS-SUB3\n                   ELSE\n                   IF WS-HOLD-20(WS-SUB3: 1) = ',' OR SPACE\n                       MOVE WS-HOLD-20(5: WS-SUB3 - 5)\n                                              TO WS-PROGRAM\n                       MOVE 20                TO WS-SUB3\n                   END-IF\n                   END-IF\n               END-PERFORM\n           END-IF.\n\n       2100-EXEC-BREAK.\n           IF WS-JOB-PROC-SW = 'P'\n             IF WS-P1-SUB < 255\n                 ADD 1                        TO WS-P1-SUB\n                 PERFORM 2100-NEW-EXEC-NAME\n             ELSE\n                 CONTINUE\n           ELSE\n           IF WS-J1-SUB < 255\n               ADD 1                          TO WS-J1-SUB\n               PERFORM 2100-NEW-JOB-NAME.\n\n       2100-NEW-EXEC-NAME.\n           MOVE WS-PROC                       TO WS-P1-PROC(WS-P1-SUB).\n           MOVE WS-STEP                       TO WS-HOLD-20.\n           PERFORM 2800-DETERMINE-FIELD-LEN.\n           MOVE WS-HOLD-20                    TO WS-P1-BEF(WS-P1-SUB).\n           MOVE WS-HOLD-LEN                   TO WS-P1-BLEN(WS-P1-SUB).\n           ADD WS-EXEC-INCREMENT              TO WS-EXEC-NBR.\n           PERFORM 2100-FORMAT-NEW-EXEC.\n           PERFORM 2800-DETERMINE-FIELD-LEN.\n           MOVE WS-HOLD-20                    TO WS-P1-AFT(WS-P1-SUB).\n           MOVE WS-HOLD-LEN                   TO WS-P1-ALEN(WS-P1-SUB).\n           IF WS-LS-TEST NUMERIC\n               DISPLAY ' Step  ' WS-STEP\n                       ' len ' WS-P1-BLEN(WS-P1-SUB)\n                       '  ' WS-HOLD-10 ' len ' WS-HOLD-LEN\n                       '  ' WS-PROGRAM.\n\n       2100-FORMAT-NEW-EXEC.\n           MOVE SPACE                         TO WS-HOLD-20.\n           MOVE SPACE                         TO WS-HOLD-06.\n           IF WS-EXEC-DIGITS = 1\n               MOVE WS-EXEC-NBR(4: 1)         TO WS-HOLD-06.\n           IF WS-EXEC-DIGITS = 2\n               MOVE WS-EXEC-NBR(3: 2)         TO WS-HOLD-06.\n           IF WS-EXEC-DIGITS = 3\n               MOVE WS-EXEC-NBR(2: 3)         TO WS-HOLD-06.\n           IF WS-EXEC-DIGITS = 4\n               MOVE WS-EXEC-NBR               TO WS-HOLD-06.\n           MOVE SPACE                         TO WS-PROG-PREFIX.\n           IF WS-PROGRAM NOT = SPACE\n             IF WS-PROG-CNT > ZERO\n                 PERFORM 2100-MATCH-PROGRAM\n                     VARYING WS-SUB3 FROM 1 BY 1\n                     UNTIL WS-SUB3 > WS-PROG-CNT.\n           IF WS-PROG-PREFIX = SPACE\n               MOVE SPACE                     TO WS-PROGRAM\n               STRING WS-EXEC-PREFIX          DELIMITED BY SPACE\n                      WS-HOLD-06              DELIMITED BY SPACE\n                      INTO WS-HOLD-20\n           ELSE\n               STRING WS-PROG-PREFIX          DELIMITED BY SPACE\n                      WS-HOLD-06              DELIMITED BY SPACE\n                      INTO WS-HOLD-20.\n\n       2100-MATCH-PROGRAM.\n           IF WS-PROGRAM = WS-G1-PROG(WS-SUB3)\n               MOVE WS-G1-PFX(WS-SUB3)        TO WS-PROG-PREFIX.\n\n       2100-NEW-JOB-NAME.\n           MOVE WS-STEP                       TO WS-HOLD-20.\n           PERFORM 2800-DETERMINE-FIELD-LEN.\n           MOVE WS-HOLD-20                    TO WS-J1-BEF(WS-J1-SUB).\n           MOVE WS-HOLD-LEN                   TO WS-J1-BLEN(WS-J1-SUB).\n           ADD WS-JOB-INCREMENT               TO WS-JOB-NBR.\n           PERFORM 2100-FORMAT-NEW-JOB.\n           PERFORM 2800-DETERMINE-FIELD-LEN.\n           MOVE WS-HOLD-20                    TO WS-J1-AFT(WS-J1-SUB).\n           MOVE WS-HOLD-LEN                   TO WS-J1-ALEN(WS-J1-SUB).\n           IF WS-LS-TEST NUMERIC\n               DISPLAY ' Step  ' WS-STEP\n                       ' len ' WS-J1-BLEN(WS-J1-SUB)\n                       '  ' WS-HOLD-10 ' len ' WS-HOLD-LEN.\n\n       2100-FORMAT-NEW-JOB.\n           MOVE SPACE                         TO WS-HOLD-20.\n           MOVE SPACE                         TO WS-HOLD-06.\n           IF WS-JOB-DIGITS = 1\n               MOVE WS-JOB-NBR(4: 1)          TO WS-HOLD-06.\n           IF WS-JOB-DIGITS = 2\n               MOVE WS-JOB-NBR(3: 2)          TO WS-HOLD-06.\n           IF WS-JOB-DIGITS = 3\n               MOVE WS-JOB-NBR(2: 3)          TO WS-HOLD-06.\n           IF WS-JOB-DIGITS = 4\n               MOVE WS-JOB-NBR                TO WS-HOLD-06.\n           STRING WS-JOB-PREFIX               DELIMITED BY SPACE\n                  WS-HOLD-06                  DELIMITED BY SPACE\n                  INTO WS-HOLD-20.\n\n      *    if looping through multiple jobs/procs, allow step\n      *    renames to start over for each job/proc\n       2100-RESET-PROC-STEPS.\n           IF WS-RESET-STEPS-SW = 'Y'\n               MOVE ZERO                      TO WS-EXEC-NBR.\n\n       2100-RESET-JOB-STEPS.\n           IF WS-RESET-STEPS-SW = 'Y'\n               MOVE ZERO                      TO WS-JOB-NBR.\n\n      *---------------------------------------\n      *    Renumber EXEC steps\n      *      -and- job step references that override proc steps\n      *            ex: //EX010.SYSIN DD DUMMY\n      *      Apply changes here\n      *----+----------------------------------\n       2400-APPLY-NEW-STEPS.\n           IF WS-LS-TEST NUMERIC\n               DISPLAY ' Option \"renum\" specified - '\n               DISPLAY '   applying new step names:'\n               DISPLAY '          '.\n           MOVE ZERO                          TO WS-P1-SUB.\n           MOVE ZERO                          TO WS-J1-SUB.\n           MOVE ZERO                          TO WS-EXEC-NBR.\n           MOVE ZERO                          TO WS-JOB-NBR.\n           MOVE ZERO                          TO WS-READ-JCL01-CNT.\n           MOVE SPACE                         TO WS-INLINE-SW.\n           PERFORM 0200-OPEN-JCL01-IO.\n           PERFORM 2400-READ-JCL01 THRU\n                   2400-READ-JCL01-EXIT.\n           CLOSE JCL01.\n           PERFORM 1600-SHOW-DIVIDING-LINE.\n\n       2400-READ-JCL01.\n           READ JCL01.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-JCL01-CNT\n               MOVE JCL01-RCD                 TO WS-HOLD-RCD\n               PERFORM 2400-SELECT THRU\n                       2400-SELECT-EXIT\n               GO TO 2400-READ-JCL01\n           ELSE\n           IF WS-STAT = 10\n               CONTINUE\n           ELSE\n               DISPLAY '**** JCLNEAT read error on JCL01 '\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +2400                     TO WS-RETURN-CODE.\n\n       2400-READ-JCL01-EXIT. EXIT.\n\n       2400-SELECT.\n           MOVE SPACE                         TO WS-RCD-UPDATE-SW.\n           MOVE WS-HOLD-RCD                   TO WS-HOLD-ORIG.\n           MOVE WS-HOLD-RCD                   TO WS-HOLD-RCD2.\n\n           PERFORM 1200-DETERMINE-SKIP-BY-REQ.\n\n           IF WS-DELIM NOT = SPACE\n               MOVE SPACE                     TO WS-UNSTR-FIELDS\n               UNSTRING WS-HOLD-RCD           DELIMITED BY ALL SPACE\n                   INTO WS-UNSTR1 WS-UNSTR2 WS-UNSTR3 WS-UNSTR4\n               IF WS-DELIM = WS-UNSTR1 OR WS-UNSTR2 OR WS-UNSTR3\n                          OR WS-UNSTR4\n                   MOVE SPACE                 TO WS-DELIM\n                   MOVE SPACE                 TO WS-INLINE-SW\n                   GO TO 2400-SELECT-EXIT\n               ELSE\n                   GO TO 2400-SELECT-EXIT.\n\n           IF WS-HOLD-RCD(1: 3) = '/* '\n               MOVE SPACE                     TO WS-INLINE-SW\n               GO TO 2400-SELECT-EXIT.\n\n           IF WS-HOLD-RCD(1: 3) = '//*'\n               MOVE SPACE                     TO WS-INLINE-SW.\n\n           IF WS-INLINE-SW = 'Y'\n               CONTINUE\n           ELSE\n               PERFORM 1200-SET-INLINE-SWITCH\n               PERFORM 2400-SELECTED-JCL\n               IF WS-RCD-UPDATE-SW = 'Y'\n                 IF WS-HOLD-RCD = WS-HOLD-ORIG\n                     CONTINUE\n                 ELSE\n                     MOVE WS-HOLD-RCD         TO JCL01-RCD\n                     PERFORM 3000-REWRITE-JCL01\n                     ADD 1                    TO WS-REWRITE-JCL02-CNT.\n\n       2400-SELECT-EXIT. EXIT.\n\n       2400-SELECTED-JCL.\n           IF WS-HOLD-RCD(1: 3) = '//*'\n               CONTINUE\n           ELSE\n               MOVE ' JOB '                   TO WS-ITEM\n               MOVE 5                         TO WS-LEN\n               MOVE SPACE                     TO WS-SKIP-SW\n               MOVE SPACE                     TO WS-QUOTE-SW\n               MOVE SPACE                     TO WS-ITEM-FND-SW\n               PERFORM 2400-FIND-ITEM\n                   VARYING WS-SUB2 FROM 4 BY 1\n                   UNTIL WS-SUB2 > 30\n               IF WS-ITEM-FND-SW = 'Y'\n                   MOVE 'J'                   TO WS-JOB-PROC-SW\n                   MOVE WS-HOLD-RCD(3: 8)     TO WS-HOLD-JOB\n                   MOVE SPACE                 TO WS-JOB\n                   UNSTRING WS-HOLD-JOB       DELIMITED BY SPACE\n                       INTO WS-JOB\n                   PERFORM 1600-SHOW-JOB.\n\n           IF WS-HOLD-RCD(1: 3) = '//*'\n               CONTINUE\n           ELSE\n               MOVE ' PROC '                  TO WS-ITEM\n               MOVE 6                         TO WS-LEN\n               MOVE SPACE                     TO WS-SKIP-SW\n               MOVE SPACE                     TO WS-QUOTE-SW\n               MOVE SPACE                     TO WS-ITEM-FND-SW\n               PERFORM 2400-FIND-ITEM\n                   VARYING WS-SUB2 FROM 4 BY 1\n                   UNTIL WS-SUB2 > 30\n               IF WS-ITEM-FND-SW = 'Y'\n                   MOVE 'P'                   TO WS-JOB-PROC-SW\n                   MOVE WS-HOLD-RCD(3: 8)     TO WS-HOLD-PROC\n                   MOVE SPACE                 TO WS-PROC\n                   UNSTRING WS-HOLD-PROC      DELIMITED BY SPACE\n                       INTO WS-PROC\n                   PERFORM 1600-SHOW-PROC.\n\n           IF WS-HOLD-RCD(1: 3) = '//*'\n               CONTINUE\n           ELSE\n               MOVE ' PEND '                  TO WS-ITEM\n               MOVE 6                         TO WS-LEN\n               MOVE SPACE                     TO WS-SKIP-SW\n               MOVE SPACE                     TO WS-QUOTE-SW\n               MOVE SPACE                     TO WS-ITEM-FND-SW\n               PERFORM 2400-FIND-ITEM\n                   VARYING WS-SUB2 FROM 4 BY 1\n                   UNTIL WS-SUB2 > 30\n               IF WS-ITEM-FND-SW = 'Y'\n                   MOVE 'J'                   TO WS-JOB-PROC-SW.\n\n           IF WS-HOLD-RCD(1: 3) = '//*'\n               CONTINUE\n           ELSE\n           IF WS-JOB-PROC-SW = 'J'\n               MOVE SPACE                     TO WS-SKIP-SW\n               MOVE SPACE                     TO WS-QUOTE-SW\n               MOVE SPACE                     TO WS-ITEM-FND-SW\n               MOVE ' EXEC '                  TO WS-ITEM\n               MOVE 6                         TO WS-LEN\n               PERFORM 2400-FIND-ITEM\n                   VARYING WS-SUB2 FROM 4 BY 1\n                   UNTIL WS-SUB2 > 60\n               IF WS-ITEM-FND-SW = 'Y'\n                   MOVE WS-HOLD-RCD(WS-TEMP-SUB + 6: 10)\n                                            TO WS-HOLD-20\n                   PERFORM 2800-SHIFT-LEFT\n                   MOVE SPACE                 TO WS-STEP\n                   IF WS-HOLD-20(1: 4) NOT = 'PGM='\n                       UNSTRING WS-HOLD-20    DELIMITED BY SPACE\n                           INTO WS-STEP.\n\n           IF WS-SKIP-RCD-BY-REQ = 'Y'\n               CONTINUE\n           ELSE\n               PERFORM 2400-LOOP-THROUGH-LINE\n                   VARYING WS-SUB2 FROM 2 BY 1\n                   UNTIL WS-SUB2 > 65.\n\n      *---------------------------------------\n      *    alter job steps and handle situations where the\n      *    proc step is listed within the job area:\n      *    RESTART=JOB.STEP  or  COND=(0,NE,JOB.STEP)\n      *---------------------------------------\n           IF WS-SKIP-RCD-BY-REQ = 'Y'\n               CONTINUE\n           ELSE\n           IF WS-JOB-PROC-SW = 'J'\n               MOVE ZERO                      TO WS-HOLD-SUB2\n               PERFORM 2500-SELECTED-JCL.\n\n      *    ws-sub2\n       2400-LOOP-THROUGH-LINE.\n           PERFORM 2400-APPLY-NEW-EXEC\n               VARYING WS-P1-SUB FROM 1 BY 1\n               UNTIL WS-P1-SUB > WS-P1-MAX.\n\n      *    ws-sub2 ws-p1-sub\n      *    search for steps using '/step ' and '.step,' and '.step)'\n      *                       and '/step.' and ',step.' and ',step)'\n      *                       and ' step ' and '(step.' and ' step.'\n      *                       and '*step ' and '=step.' and '.step '\n      *                       and '/*tep ' and '=step.' and '.step '\n      *    to avoid situations\n      *    where        EX010  EX010B  EX010C  EX010D.SYSIN  EX010E)\n      *    becomes      EX430  EX430B  EX430C  EX430D.SYSIN  EX430E)\n      *    instead of   EX430  EX440   EX450   EX460.SYSIN   EX470)\n       2400-APPLY-NEW-EXEC.\n           IF WS-JOB-PROC-SW = 'P'\n             IF WS-P1-PROC(WS-P1-SUB) = WS-PROC\n                 PERFORM 2400-SEARCH-FOR-SPECIFIC-STEP.\n           IF WS-JOB-PROC-SW = 'J'\n             IF WS-P1-PROC(WS-P1-SUB) = WS-STEP\n                 PERFORM 2400-SEARCH-FOR-SPECIFIC-STEP.\n\n      *    ws-sub2 ws-p1-sub\n       2400-SEARCH-FOR-SPECIFIC-STEP.\n           MOVE SPACE                         TO WS-STEP-FND-SW.\n\n      *   '/step '\n           IF WS-P1-DONE(WS-P1-SUB) = SPACE\n               MOVE SPACE                     TO WS-BEF\n               MOVE '/'                       TO WS-BEF(1: 1)\n               MOVE WS-P1-BEF(WS-P1-SUB)      TO WS-BEF(2: )\n               MOVE WS-P1-BLEN(WS-P1-SUB)     TO WS-BEF-LEN\n               ADD 2                          TO WS-BEF-LEN\n               MOVE SPACE                     TO WS-AFT\n               MOVE '/'                       TO WS-AFT(1: 1)\n               MOVE WS-P1-AFT(WS-P1-SUB)      TO WS-AFT(2: )\n               MOVE WS-P1-ALEN(WS-P1-SUB)     TO WS-AFT-LEN\n               ADD 2                          TO WS-AFT-LEN\n               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                 = WS-BEF(1: WS-BEF-LEN)\n                   MOVE 'Y'                   TO WS-P1-DONE(WS-P1-SUB)\n                   PERFORM 2400-STEP-FOUND.\n\n      *   '.step,'\n           IF WS-STEP-FND-SW = SPACE\n               MOVE SPACE                     TO WS-BEF\n               MOVE '.'                       TO WS-BEF(1: 1)\n               MOVE WS-P1-BEF(WS-P1-SUB)      TO WS-BEF(2: )\n               MOVE WS-P1-BLEN(WS-P1-SUB)     TO WS-BEF-LEN\n               ADD 2                          TO WS-BEF-LEN\n               MOVE ','                       TO WS-BEF(WS-BEF-LEN: 1)\n               MOVE SPACE                     TO WS-AFT\n               MOVE '.'                       TO WS-AFT(1: 1)\n               MOVE WS-P1-AFT(WS-P1-SUB)      TO WS-AFT(2: )\n               MOVE WS-P1-ALEN(WS-P1-SUB)     TO WS-AFT-LEN\n               ADD 2                          TO WS-AFT-LEN\n               MOVE ','                       TO WS-AFT(WS-AFT-LEN: 1)\n               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                 = WS-BEF(1: WS-BEF-LEN)\n                   PERFORM 2400-STEP-FOUND.\n\n      *   '.step)'\n           IF WS-STEP-FND-SW = SPACE\n               MOVE ')'                       TO WS-BEF(WS-BEF-LEN: 1)\n               MOVE ')'                       TO WS-AFT(WS-AFT-LEN: 1)\n               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                 = WS-BEF(1: WS-BEF-LEN)\n                   PERFORM 2400-STEP-FOUND.\n\n      *   '.step '\n           IF WS-STEP-FND-SW = SPACE\n               MOVE SPACE                     TO WS-BEF(WS-BEF-LEN: 1)\n               MOVE SPACE                     TO WS-AFT(WS-AFT-LEN: 1)\n               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                 = WS-BEF(1: WS-BEF-LEN)\n                   PERFORM 2400-STEP-FOUND.\n\n      *   ',step.'\n           IF WS-STEP-FND-SW = SPACE\n               MOVE ','                       TO WS-BEF(1: 1)\n               MOVE ','                       TO WS-AFT(1: 1)\n               MOVE '.'                       TO WS-BEF(WS-BEF-LEN: 1)\n               MOVE '.'                       TO WS-AFT(WS-AFT-LEN: 1)\n               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                 = WS-BEF(1: WS-BEF-LEN)\n                   PERFORM 2400-STEP-FOUND.\n\n      *   ',step)'\n           IF WS-STEP-FND-SW = SPACE\n               MOVE ')'                       TO WS-BEF(WS-BEF-LEN: 1)\n               MOVE ')'                       TO WS-AFT(WS-AFT-LEN: 1)\n               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                 = WS-BEF(1: WS-BEF-LEN)\n                   PERFORM 2400-STEP-FOUND.\n\n      *   '(step.'\n           IF WS-STEP-FND-SW = SPACE\n               MOVE '('                       TO WS-BEF(1: 1)\n               MOVE '('                       TO WS-AFT(1: 1)\n               MOVE '.'                       TO WS-BEF(WS-BEF-LEN: 1)\n               MOVE '.'                       TO WS-AFT(WS-AFT-LEN: 1)\n               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                 = WS-BEF(1: WS-BEF-LEN)\n                   PERFORM 2400-STEP-FOUND.\n\n      *   ' step.'\n           IF WS-STEP-FND-SW = SPACE\n               MOVE SPACE                     TO WS-BEF(1: 1)\n               MOVE SPACE                     TO WS-AFT(1: 1)\n               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                 = WS-BEF(1: WS-BEF-LEN)\n                   PERFORM 2400-STEP-FOUND.\n\n      *   '/step.'\n           IF WS-STEP-FND-SW = SPACE\n               MOVE '/'                       TO WS-BEF(1: 1)\n               MOVE '/'                       TO WS-AFT(1: 1)\n               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                 = WS-BEF(1: WS-BEF-LEN)\n                   PERFORM 2400-STEP-FOUND.\n\n      *   '=step.'\n           IF WS-STEP-FND-SW = SPACE\n               MOVE '='                       TO WS-BEF(1: 1)\n               MOVE '='                       TO WS-AFT(1: 1)\n               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                 = WS-BEF(1: WS-BEF-LEN)\n                   PERFORM 2400-STEP-FOUND.\n\n      *    only in comments: search wrapped in spaces ' EX010 '\n      *    to avoid changing program names etc  PGM=EX010\n\n      *   ' step '\n           IF WS-STEP-FND-SW = SPACE\n             IF WS-HOLD-RCD(1: 3) = '//*'\n                 MOVE SPACE                   TO WS-BEF\n                 MOVE WS-P1-BEF(WS-P1-SUB)    TO WS-BEF(2: )\n                 MOVE WS-P1-BLEN(WS-P1-SUB)   TO WS-BEF-LEN\n                 ADD 2                        TO WS-BEF-LEN\n                 MOVE SPACE                   TO WS-AFT\n                 MOVE WS-P1-AFT(WS-P1-SUB)    TO WS-AFT(2: )\n                 MOVE WS-P1-ALEN(WS-P1-SUB)   TO WS-AFT-LEN\n                 ADD 2                        TO WS-AFT-LEN\n                 IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                   = WS-BEF(1: WS-BEF-LEN)\n                     PERFORM 2400-STEP-FOUND.\n\n      *   '*step '\n           IF WS-STEP-FND-SW = SPACE\n             IF WS-HOLD-RCD(1: 3) = '//*'\n                 MOVE '*'                     TO WS-BEF(1: 1)\n                 MOVE '*'                     TO WS-AFT(1: 1)\n                 IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                   = WS-BEF(1: WS-BEF-LEN)\n                     PERFORM 2400-STEP-FOUND.\n\n      *   '/*tep '\n           IF WS-STEP-FND-SW = SPACE\n             IF WS-HOLD-RCD(1: 3) = '//*'\n                 MOVE SPACE                   TO WS-BEF\n                 MOVE WS-P1-BEF(WS-P1-SUB)    TO WS-BEF(2: )\n                 MOVE '/*'                    TO WS-BEF(1: 2)\n                 MOVE WS-P1-BLEN(WS-P1-SUB)   TO WS-BEF-LEN\n                 ADD 2                        TO WS-BEF-LEN\n                 MOVE SPACE                   TO WS-AFT\n                 MOVE WS-P1-AFT(WS-P1-SUB)    TO WS-AFT(2: )\n                 MOVE '/*'                    TO WS-AFT(1: 2)\n                 MOVE WS-P1-ALEN(WS-P1-SUB)   TO WS-AFT-LEN\n                 ADD 2                        TO WS-AFT-LEN\n                 IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                   = WS-BEF(1: WS-BEF-LEN)\n                     PERFORM 2400-STEP-FOUND.\n\n       2400-STEP-FOUND.\n           MOVE WS-HOLD-RCD                   TO WS-HOLD-RCD2.\n           MOVE WS-SUB2                       TO WS-FND-POS WS-POS.\n           ADD WS-BEF-LEN                     TO WS-FND-POS.\n           ADD WS-AFT-LEN                     TO WS-POS.\n           MOVE WS-BEF(1: WS-BEF-LEN)         TO WS-ITEM.\n           IF WS-BEF-LEN = WS-AFT-LEN\n             IF WS-BEF(1: WS-BEF-LEN) = WS-AFT(1: WS-AFT-LEN)\n                 CONTINUE\n             ELSE\n                 PERFORM 2400-CHANGE-SAME-LEN\n           ELSE\n               PERFORM 2400-CHANGE-DIFF-LEN.\n\n           MOVE 'Y'                           TO WS-STEP-FND-SW.\n           MOVE WS-P1-MAX                     TO WS-P1-SUB.\n      *    do not stop looping through line:  ((4,NE,S060),(8,NE,S070))\n      *    MOVE 65                            TO WS-SUB2.\n\n       2400-CHANGE-SAME-LEN.\n           PERFORM 1600-SHOW-FOUND-MSG.\n           PERFORM 1600-SHOW-BEFORE.\n           MOVE WS-AFT(1: WS-AFT-LEN)\n                          TO WS-HOLD-RCD(WS-SUB2: WS-AFT-LEN).\n           MOVE 'Y'                           TO WS-RCD-UPDATE-SW.\n           PERFORM 1600-SHOW-AFTER.\n           PERFORM 1600-SHOW-BLANK-LINE.\n\n       2400-CHANGE-DIFF-LEN.\n           PERFORM 1600-SHOW-FOUND-MSG.\n           PERFORM 1600-SHOW-BEFORE.\n           MOVE 'Y'                           TO WS-OVERLAY-SW.\n           PERFORM 2700-ADJUST-THINGS.\n           IF WS-RCD-UPDATE-SW = 'Y'\n               MOVE WS-AFT(1: WS-AFT-LEN)\n                      TO WS-HOLD-RCD(WS-SUB2: WS-AFT-LEN).\n           PERFORM 1600-SHOW-AFTER.\n           PERFORM 1600-SHOW-BLANK-LINE.\n\n      *    ws-sub2\n       2400-FIND-ITEM.\n           IF WS-HOLD-RCD(WS-SUB2: 1) = '('\n               MOVE 'Y'                       TO WS-SKIP-SW\n           ELSE\n           IF WS-HOLD-RCD(WS-SUB2: 1) = ')'\n               MOVE SPACE                     TO WS-SKIP-SW\n           ELSE\n           IF WS-HOLD-RCD(WS-SUB2: 1) = WS-QUOTE\n             IF WS-QUOTE-SW = SPACE\n                 MOVE 'Y'                     TO WS-QUOTE-SW\n             ELSE\n             IF WS-QUOTE-SW = 'Y'\n                 MOVE SPACE                   TO WS-QUOTE-SW\n             ELSE\n                 CONTINUE\n           ELSE\n           IF WS-HOLD-RCD(WS-SUB2: WS-LEN) = WS-ITEM(1: WS-LEN)\n             IF WS-SKIP-SW = SPACE\n               IF WS-QUOTE-SW = SPACE\n                   MOVE WS-SUB2               TO WS-TEMP-SUB\n                   MOVE 60                    TO WS-SUB2\n                   MOVE 'Y'                   TO WS-ITEM-FND-SW.\n\n       2500-SELECTED-JCL.\n           PERFORM 2500-LOOP-THROUGH-LINE\n               VARYING WS-SUB2 FROM 2 BY 1\n               UNTIL WS-SUB2 > 65.\n\n      *    ws-sub2\n       2500-LOOP-THROUGH-LINE.\n           PERFORM 2500-SEARCH-FOR-SPECIFIC-STEP\n               VARYING WS-J1-SUB FROM 1 BY 1\n               UNTIL WS-J1-SUB > WS-J1-MAX.\n\n      *    ws-sub2 ws-j1-sub\n      *    search for steps using '/step ' and '.step ' and '(step.'\n      *                       and '/step.' and ',step.' and '.step)'\n      *                       and '*step ' and '=step.' and ',step)'\n      *    to avoid situations\n      *    where        EX010  EX010B  EX010C  EX010D.SYSIN  EX010E)\n      *    becomes      EX430  EX430B  EX430C  EX430D.SYSIN  EX430E)\n      *    instead of   EX430  EX440   EX450   EX460.SYSIN   EX470)\n\n      *    ws-sub2 ws-j1-sub\n       2500-SEARCH-FOR-SPECIFIC-STEP.\n           MOVE SPACE                         TO WS-STEP-FND-SW.\n\n      *   '/step '\n           IF WS-J1-DONE(WS-J1-SUB) = SPACE\n               MOVE SPACE                     TO WS-BEF\n               MOVE '/'                       TO WS-BEF(1: 1)\n               MOVE WS-J1-BEF(WS-J1-SUB)      TO WS-BEF(2: )\n               MOVE WS-J1-BLEN(WS-J1-SUB)     TO WS-BEF-LEN\n               ADD 2                          TO WS-BEF-LEN\n               MOVE SPACE                     TO WS-AFT\n               MOVE '/'                       TO WS-AFT(1: 1)\n               MOVE WS-J1-AFT(WS-J1-SUB)      TO WS-AFT(2: )\n               MOVE WS-J1-ALEN(WS-J1-SUB)     TO WS-AFT-LEN\n               ADD 2                          TO WS-AFT-LEN\n               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                 = WS-BEF(1: WS-BEF-LEN)\n                   MOVE 'Y'                   TO WS-J1-DONE(WS-J1-SUB)\n                   PERFORM 2500-STEP-FOUND.\n\n      *   '.step '\n           IF WS-STEP-FND-SW = SPACE\n               MOVE SPACE                     TO WS-BEF\n               MOVE '.'                       TO WS-BEF(1: 1)\n               MOVE WS-J1-BEF(WS-J1-SUB)      TO WS-BEF(2: )\n               MOVE WS-J1-BLEN(WS-J1-SUB)     TO WS-BEF-LEN\n               ADD 2                          TO WS-BEF-LEN\n               MOVE SPACE                     TO WS-AFT\n               MOVE '.'                       TO WS-AFT(1: 1)\n               MOVE WS-J1-AFT(WS-J1-SUB)      TO WS-AFT(2: )\n               MOVE WS-J1-ALEN(WS-J1-SUB)     TO WS-AFT-LEN\n               ADD 2                          TO WS-AFT-LEN\n               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                 = WS-BEF(1: WS-BEF-LEN)\n                   PERFORM 2500-STEP-FOUND.\n\n      *   '.step)'\n           IF WS-STEP-FND-SW = SPACE\n               MOVE ')'                       TO WS-BEF(WS-BEF-LEN: 1)\n               MOVE ')'                       TO WS-AFT(WS-AFT-LEN: 1)\n               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                 = WS-BEF(1: WS-BEF-LEN)\n                   PERFORM 2500-STEP-FOUND.\n\n      *   ',step)'\n           IF WS-STEP-FND-SW = SPACE\n               MOVE ','                       TO WS-BEF(1: 1)\n               MOVE ','                       TO WS-AFT(1: 1)\n               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                 = WS-BEF(1: WS-BEF-LEN)\n                   PERFORM 2500-STEP-FOUND.\n\n      *   '/step.'\n           IF WS-STEP-FND-SW = SPACE\n               MOVE '/'                       TO WS-BEF(1: 1)\n               MOVE '/'                       TO WS-AFT(1: 1)\n               MOVE '.'                       TO WS-BEF(WS-BEF-LEN: 1)\n               MOVE '.'                       TO WS-AFT(WS-AFT-LEN: 1)\n               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                 = WS-BEF(1: WS-BEF-LEN)\n                   PERFORM 2500-STEP-FOUND.\n\n      *   '(step.'\n           IF WS-STEP-FND-SW = SPACE\n               MOVE '('                       TO WS-BEF(1: 1)\n               MOVE '('                       TO WS-AFT(1: 1)\n               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                 = WS-BEF(1: WS-BEF-LEN)\n                   PERFORM 2500-STEP-FOUND.\n\n      *   ',step.'\n           IF WS-STEP-FND-SW = SPACE\n               MOVE ','                       TO WS-BEF(1: 1)\n               MOVE ','                       TO WS-AFT(1: 1)\n               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                 = WS-BEF(1: WS-BEF-LEN)\n                   MOVE WS-HOLD-RCD(WS-SUB2 + 1: WS-BEF-LEN - 2)\n                                              TO WS-HOLD-JOB\n                   MOVE ZERO                  TO WS-HOLD-SUB2\n                   COMPUTE WS-HOLD-SUB2 = WS-SUB2 + WS-AFT-LEN - 1\n                   PERFORM 2500-STEP-FOUND\n                   PERFORM 2500-ALTER-JOB-DOT-PROC.\n\n      *   '=step.'\n           IF WS-STEP-FND-SW = SPACE\n               MOVE '='                       TO WS-BEF(1: 1)\n               MOVE '='                       TO WS-AFT(1: 1)\n               IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                 = WS-BEF(1: WS-BEF-LEN)\n                   MOVE WS-HOLD-RCD(WS-SUB2 + 1: WS-BEF-LEN - 2)\n                                              TO WS-HOLD-JOB\n                   MOVE ZERO                  TO WS-HOLD-SUB2\n                   COMPUTE WS-HOLD-SUB2 = WS-SUB2 + WS-AFT-LEN - 1\n                   PERFORM 2500-STEP-FOUND\n                   PERFORM 2500-ALTER-JOB-DOT-PROC.\n\n      *    only in comments: search wrapped in spaces ' EX010 '\n      *    to avoid changing program names etc  PGM=EX010\n\n      *   ' step '\n           IF WS-STEP-FND-SW = SPACE\n             IF WS-HOLD-RCD(1: 3) = '//*'\n                 MOVE SPACE                   TO WS-BEF\n                 MOVE WS-J1-BEF(WS-J1-SUB)    TO WS-BEF(2: )\n                 MOVE WS-J1-BLEN(WS-J1-SUB)   TO WS-BEF-LEN\n                 ADD 2                        TO WS-BEF-LEN\n                 MOVE SPACE                   TO WS-AFT\n                 MOVE WS-J1-AFT(WS-J1-SUB)    TO WS-AFT(2: )\n                 MOVE WS-J1-ALEN(WS-J1-SUB)   TO WS-AFT-LEN\n                 ADD 2                        TO WS-AFT-LEN\n                 IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                   = WS-BEF(1: WS-BEF-LEN)\n                     PERFORM 2500-STEP-FOUND.\n\n      *   '*step '\n           IF WS-STEP-FND-SW = SPACE\n             IF WS-HOLD-RCD(1: 3) = '//*'\n                 MOVE '*'                     TO WS-BEF(1: 1)\n                 MOVE '*'                     TO WS-AFT(1: 1)\n                 IF WS-HOLD-RCD(WS-SUB2: WS-BEF-LEN)\n                                   = WS-BEF(1: WS-BEF-LEN)\n                     PERFORM 2500-STEP-FOUND.\n\n       2500-STEP-FOUND.\n           MOVE WS-HOLD-RCD                   TO WS-HOLD-RCD2.\n           MOVE WS-SUB2                       TO WS-FND-POS WS-POS.\n           ADD WS-BEF-LEN                     TO WS-FND-POS.\n           ADD WS-AFT-LEN                     TO WS-POS.\n           MOVE WS-BEF(1: WS-BEF-LEN)         TO WS-ITEM.\n           IF WS-BEF-LEN = WS-AFT-LEN\n             IF WS-BEF(1: WS-BEF-LEN) = WS-AFT(1: WS-AFT-LEN)\n                 CONTINUE\n             ELSE\n                 PERFORM 2500-CHANGE-SAME-LEN\n           ELSE\n               PERFORM 2500-CHANGE-DIFF-LEN.\n\n           MOVE 'Y'                           TO WS-STEP-FND-SW.\n           MOVE WS-J1-MAX                     TO WS-J1-SUB.\n      *    do not stop looping through line:  ((4,NE,S060),(8,NE,S070))\n      *    MOVE 65                            TO WS-SUB2.\n\n      *---------------------------------------\n      *    //             COND=((4,NE,JOB.PROC),(0,NE,JOB.PROC))\n      *                                  |               |\n      *\n      *                          alter proc steps within \"job\" logic\n      *---------------------------------------\n       2500-ALTER-JOB-DOT-PROC.\n           PERFORM VARYING WS-T1-SUB FROM 1 BY 1\n               UNTIL WS-T1-SUB > WS-T1-MAX\n               IF WS-T1-JOB(WS-T1-SUB) = WS-HOLD-JOB\n                   MOVE WS-T1-PROC(WS-T1-SUB) TO WS-STEP\n                   MOVE WS-T1-MAX             TO WS-T1-SUB\n               END-IF\n           END-PERFORM.\n           MOVE WS-HOLD-SUB2                  TO WS-SUB2.\n           PERFORM 2400-LOOP-THROUGH-LINE.\n\n       2500-CHANGE-SAME-LEN.\n           PERFORM 1600-SHOW-FOUND-MSG.\n           PERFORM 1600-SHOW-BEFORE.\n           MOVE WS-AFT(1: WS-AFT-LEN)\n                          TO WS-HOLD-RCD(WS-SUB2: WS-AFT-LEN).\n           MOVE 'Y'                           TO WS-RCD-UPDATE-SW.\n           PERFORM 1600-SHOW-AFTER.\n           PERFORM 1600-SHOW-BLANK-LINE.\n\n       2500-CHANGE-DIFF-LEN.\n           PERFORM 1600-SHOW-FOUND-MSG.\n           PERFORM 1600-SHOW-BEFORE.\n           MOVE 'Y'                           TO WS-OVERLAY-SW.\n           PERFORM 2700-ADJUST-THINGS.\n           IF WS-RCD-UPDATE-SW = 'Y'\n               MOVE WS-AFT(1: WS-AFT-LEN)\n                      TO WS-HOLD-RCD(WS-SUB2: WS-AFT-LEN).\n           PERFORM 1600-SHOW-AFTER.\n           PERFORM 1600-SHOW-BLANK-LINE.\n\n\n      *----+----------------------------------\n\n       2700-ADJUST-THINGS.\n           MOVE ZERO                          TO WS-DIFF.\n           MOVE ZERO                          TO WS-MOVE.\n           MOVE ZERO                          TO WS-BLANK.\n           MOVE ZERO                          TO WS-CHECK.\n           MOVE ZERO                          TO WS-SPACE-LEN.\n           MOVE ZERO                          TO WS-SPACE-LOC.\n           IF WS-POS > WS-FND-POS\n               PERFORM 2700-MOVE-DATA-RIGHT\n           ELSE\n           IF WS-POS < WS-FND-POS\n               PERFORM 2700-MOVE-DATA-LEFT.\n\n      *    ....+....+....+....+....+....+....+....+\n      *    //S010.SYSIN DD DUMMY           *msg\n      *    //EX0010.SYSIN DD DUMMY         *msg\n      *    diff= 2  fnd-pos 7  pos 9    space-loc= 22\n      *    space-len = 3       move = 15\n\n      *    ....+....+....+....+....+....+....+....+\n      *    //S010  EXEC  PGM=ABCD          *msg\n      *    //S010      EXEC  PGM=ABCD        *msg\n      *    diff= 4  fnd-pos 8  pos 12    space-loc= 23\n      *    space-len = 5       move= 15\n\n       2700-MOVE-DATA-RIGHT.\n           COMPUTE WS-DIFF = WS-POS - WS-FND-POS.\n           COMPUTE WS-SPACE-LEN = WS-DIFF + 1.\n           MOVE WS-FND-POS                    TO WS-BLANK.\n           MOVE WS-FND-POS                    TO WS-START-POS.\n           MOVE SPACE                         TO WS-QUOTE-SW.\n           PERFORM 2700-FIND-BLANK-AREA.\n           IF WS-SPACE-LOC = ZERO\n               MOVE ZERO                      TO WS-SCOL\n               PERFORM 1600-SHOW-NO-ROOM\n           ELSE\n               COMPUTE WS-MOVE = WS-SPACE-LOC - WS-FND-POS\n               MOVE WS-HOLD-RCD2(1: WS-FND-POS - 1)\n                                 TO WS-HOLD-RCD(1: WS-FND-POS - 1)\n               MOVE WS-HOLD-RCD2(WS-FND-POS: WS-MOVE)\n                                 TO WS-HOLD-RCD(WS-POS: WS-MOVE)\n               MOVE SPACE        TO WS-HOLD-RCD(WS-BLANK: WS-DIFF)\n               PERFORM 1600-SHOW-WORK\n               MOVE 'Y'                       TO WS-RCD-UPDATE-SW.\n\n      *    ....+....+....+....+....+....+....+....+\n      *    //EX0010.SYSIN DD DUMMY         *msg\n      *    //S010.SYSIN DD DUMMY           *msg\n      *    diff= 2  fnd-pos 9  pos 7    space-loc= 24\n      *    space-len = 3       move = 15\n      *    blank = 22\n\n      *    ....+....+....+....+....+....+....+....+\n      *    //S010      EXEC  PGM=ABCD        *msg\n      *    //S010  EXEC  PGM=ABCD          *msg\n      *    diff= 4  fnd-pos 12  pos 8     space-loc= 23\n      *    space-len = 5        move= 15\n      *    blank = 23\n\n       2700-MOVE-DATA-LEFT.\n           COMPUTE WS-DIFF = WS-FND-POS - WS-POS.\n           COMPUTE WS-SPACE-LEN = WS-DIFF + 1.\n           MOVE WS-POS                        TO WS-CHECK.\n           MOVE WS-FND-POS                    TO WS-START-POS.\n           MOVE SPACE                         TO WS-QUOTE-SW.\n           PERFORM 2700-FIND-BLANK-AREA.\n\n           IF WS-SPACE-LOC = ZERO\n               COMPUTE WS-MOVE = 72 - WS-FND-POS\n           ELSE\n               COMPUTE WS-MOVE = WS-SPACE-LOC - WS-FND-POS.\n           COMPUTE WS-BLANK = WS-POS + WS-MOVE.\n\n           IF WS-HOLD-RCD(WS-CHECK: WS-DIFF) = SPACE\n               OR WS-OVERLAY-SW = 'Y'\n               MOVE WS-HOLD-RCD2(1: WS-POS - 1)\n                                     TO WS-HOLD-RCD(1: WS-POS - 1)\n               MOVE WS-HOLD-RCD2(WS-FND-POS: WS-MOVE)\n                                     TO WS-HOLD-RCD(WS-POS: WS-MOVE)\n               MOVE SPACE        TO WS-HOLD-RCD(WS-BLANK: WS-DIFF)\n               PERFORM 1600-SHOW-WORK\n               MOVE 'Y'                       TO WS-RCD-UPDATE-SW\n           ELSE\n               MOVE ZERO                      TO WS-SCOL\n               PERFORM 1600-SHOW-NO-ROOM.\n\n       2700-FIND-BLANK-AREA.\n           MOVE ZERO                          TO WS-MAX-LOOK.\n           COMPUTE WS-MAX-LOOK = 72 - WS-DIFF.\n           PERFORM 2700-FIND-EMBEDDED-SPACE\n               VARYING WS-SUB3 FROM WS-START-POS BY 1\n               UNTIL WS-SUB3 > WS-MAX-LOOK.\n\n       2700-FIND-EMBEDDED-SPACE.\n           IF WS-HOLD-RCD(WS-SUB3: 1) = WS-QUOTE\n             IF WS-QUOTE-SW = SPACE\n                 MOVE 'Y'                     TO WS-QUOTE-SW\n             ELSE\n             IF WS-QUOTE-SW = 'Y'\n                 MOVE SPACE                   TO WS-QUOTE-SW\n             ELSE\n                 CONTINUE\n           ELSE\n           IF WS-HOLD-RCD(WS-SUB3: WS-SPACE-LEN) = SPACE\n             IF WS-QUOTE-SW = SPACE\n                 MOVE WS-SUB3                 TO WS-SPACE-LOC\n                 MOVE 72                      TO WS-SUB3.\n\n       2800-DETERMINE-FIELD-LEN.\n           PERFORM VARYING WS-SUB3 FROM 20 BY -1\n              UNTIL WS-SUB3 < 1\n              IF WS-HOLD-20(WS-SUB3: 1) NOT = SPACE\n                  MOVE WS-SUB3                TO WS-HOLD-LEN\n                  MOVE ZERO                   TO WS-SUB3\n              END-IF\n           END-PERFORM.\n\n      *---------------------------------------\n      *    left justify a field\n      *\n      *    '      hello'    --->   'hello      '\n      *---------------------------------------\n       2800-SHIFT-LEFT.\n           MOVE SPACE                         TO WS-HOLD-20-TEMP.\n           PERFORM VARYING WS-STR1 FROM 1 BY 1\n               UNTIL WS-STR1 > 20\n               IF WS-HOLD-20(WS-STR1: 1) NOT = SPACE\n                   MOVE WS-HOLD-20(WS-STR1: ) TO WS-HOLD-20-TEMP\n                   MOVE 20                    TO WS-STR1\n               END-IF\n           END-PERFORM.\n           MOVE WS-HOLD-20-TEMP               TO WS-HOLD-20.\n\n      *---------------------------------------\n\n       3000-REWRITE-JCL01.\n           REWRITE JCL01-RECORD.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** JCLNEAT rewrite error on JCL01'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE 'Y'                       TO WS-END-JCL01-SW\n               MOVE +3000                     TO WS-RETURN-CODE.\n\n      ************************************ END JCLNEAT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JCLNEAT1": {"ttr": 7687, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x12\\x01\\x184\\x8f\\x01\\x191_\\t&\\x00\\xf7\\x00\\x11\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2018-12-14T00:00:00", "modifydate": "2019-11-11T09:26:12", "lines": 247, "newlines": 17, "modlines": 0, "user": "IANNONE"}, "text": "*\n*\n*   JCLNEAT input parms\n*\n*\n*   Position 3 - all parm items:\n*\n*                C=flags to pass to program: comment processing\n*                    options, master overrides, etc\n*                I=JCL arrangement items: where to search for and\n*                    place various JCL statements so they line-up\n*                S=Specify which records are processed by this\n*                    program - records outside the range are unchanged\n*                W=if converting comments to lowercase, specify\n*                    words to convert back to uppercase so\n*                    comments look professional\n*\n*----------------------------------------------\n*\n*   Process flags\n*\n*   Upper/lower case comment logic:\n*   ------------\n*   after dot     = capitalize first word after '. ' or ': '\n*   case          = L  convert comments to lower case\n*                   U  convert comments to upper case\n*   cap first     = F  capitalize first word of first line in group\n*                   A  capitalize first word for all lines in group\n*   file name uc  = convert commented file names to upper case\n*\n*   Comment formatting:\n*   ------------\n*   line type     = R  change comment lines to asterisks pos 4 - 71\n*                   D  change comment lines to dashes pos 4 - 52\n*   move comment  = move most comments to specified position ####\n*                      default value is 0006\n*   zap star      = blank trailing asterisks\n*   zap last c    = blank out comment position 73 - 80\n*\n*   JCL alteration options:\n*   ------------\n*   zap last j    = blank out JCL position 73 - 80\n*   flag disp     = add 'new' etc at pos 0069 based on file disposition\n*                      location can be overridden (0060 - 0078)\n*   flag pfx      = prefix above comment with asterisk\n*   swap disp     = swap DSN= and DISP=SHR so DISP=SHR is in front\n*   reset steps   = reset proc and job numbering for each proc/job\n*   renum proc    = renumber proc EXEC steps in JCL.  specify step\n*                     name prefix in option3, one to four characters\n*   renum pincr   = step increment ####   ex: 0010\n*   renum pdigit  = step increment physical length ####\n*                             ex:  0001 = step1    0002 = step01\n*                                  0003 = step001  0004 = step0001\n*   renum prog    = specify a different prefix to use for steps\n*                     invoking this program.  enter up to 10\n*                     \"renum prog\" programs with prefix in option3.\n*   renum job     = renumber job EXEC steps in JCL.  specify job\n*                     name prefix in option3, one to four characters\n*   renum jincr   = job step increment ####   ex: 0010\n*   renum jdigit  = job step increment physical length ####\n*                             ex:  0001 = J1       0002 = J01\n*                                  0003 = J001     0004 = J0001\n*\n*   Master overrides, so you don't have to comment-out each setting\n*   ------------\n*   no comment    = skip most comment alterations (except step renums)\n*   no lineup     = skip most JCL alterations (except step renums)\n*   no renum      = skip renumbering both proc and job steps\n*\n*\n*   process flags                option1  option2\n*   |                            |        | option3\n*   |                            |        | |\n* - ------------                 -------- - ------\n* C no lineup\n* C no comment\n* C no renum\n* - ------------ --- --- --- --- -------- - ------\n  C case                         L                  L U\n* C after dot\n* C cap first                    F                  A F\n  C line type                    D                  D R\n  C file name uc\n  C move comment                 0006\n  C zap star\n* C zap last c\n* C zap last j\n  C flag disp                    0069\n  C flag pfx\n  C swap disp\n  C reset steps\n* C renum proc                              S\n  C renum pincr                  0010\n  C renum pdigit                 0004\n  C renum prog                   TPBDRIVE   TP\n  C renum prog                   IEFBR14    B4\n  C renum prog                   IEBGENER   G\n* C renum job                               J\n  C renum jincr                  0010\n  C renum jdigit                 0004\n* - ------------ --- --- --- --- -------- - ------\n*\n*\n*----------------------------------------------\n*\n*   JCL arrangement options\n*\n*   enter up to 200 items\n*\n*  bar helps show if spaces precede JCL word\n*  |\n*  |             search length of JCL item 001-020\n*  |             |\n*  |             |   position to place JCL item\n*  |             |   |\n*  |find in JCL  |   |   start search column\n*  ||            |   |   |   end search column\n*  ||            |   |   |   |\n*  ||            |   |   |   |   IF=alter IF with \"IF01\"\n*  ||            |   |   |   |   ENDIF=alter ENDIF with \"END01'\n*  ||            |   |   |   |   |\n*  ||            |   |   |   |   |        X=skip considering as JCL\n*  ||            |   |   |   |   |        |  to allow regular comments\n*  ||            |   |   |   |   |        |  to remain lower-case\n* - ----+----+-- --- --- --- --- -------- -\n  I| '           002 015 003 016          X\n  I| (           002 015 003 016          X\n  I| JOB         005 011 004 016          X\n  I| DD          004 011 004 020\n  I| IF          004 011 003 020 IF       X\n  I| ENDIF       006 011 003 016 ENDIF\n  I| AMP=        005 015 004 022\n  I| DCB=        005 015 004 022\n  I| DSN=        005 015 004 022\n  I| EXEC        005 011 004 016\n  I| PROC        005 011 004 022          X\n  I| PEND        005 011 004 022\n  I| PGM=        005 016 004 022\n  I| VOL=        005 016 004 022\n  I| COND=       006 015 004 022\n  I| DEST=       006 015 004 022\n  I| DISP=       006 015 004 022\n  I| DUMMY       006 015 004 022\n  I| PARM=       006 015 004 022\n  I| TIME=       006 015 004 022\n  I| UNIT=       006 015 004 022\n  I| CLASS=      007 015 004 022\n  I| DSORG=      007 015 004 022\n  I| LABEL=      007 015 004 022\n  I| LRECL=      007 015 004 022\n  I| RECFM=      007 015 004 022\n  I| SPACE=      007 015 004 022\n  I| REGION=     008 015 004 022\n  I| SYSOUT=     008 015 004 022\n  I| TYPRUN=     008 015 004 022\n  I| VOLUME=     008 015 004 022\n  I| RESTART=    009 015 004 022\n  I| MSGCLASS=   010 015 004 022\n  I| MSGLEVEL=   010 015 004 022\n* - ----+----+-- --- --- --- --- -------- -\n*\n*\n*----------------------------------------------\n*\n*   If 'comment lc' specified,\n*     convert these words within JCL comments to uppercase\n*\n*   enter up to 200 items\n*\n*  bar helps show if spaces precede JCL word\n*  |\n*  |   search length F=first character uppercase\n*  |               | N=whole word if contains any numeric ex: EXED234\n*  |JCL word       | W=whole word (and connected words) uppercase\n*  ||              | |\n* - ----+----+-- --- -\n  W| dd          003 W\n  W| ex          003 N\n  W|dcb          003 W\n  W|jit          003 W\n  W|gxs          003 W\n  W|xlt          003 W\n  W| agr         004 W\n  W| fgp         004 W\n  W| ftp         004 W\n  W| gdg         004 W\n  W| gl          004 W\n  W| gm          004 W\n  W| jcl         004 W\n  W| oe          004 W\n  W|pgm=         004 W\n  W|vol=         004 W\n  W| 'n'         005 W\n  W| 'y'         005 W\n  W| a/r         005 W\n  W| aiag        005 W\n  W| ca7         005 W\n  W| edi         005 W\n  W| g/l         005 W\n  W| hubg        005 W\n  W| sar         005 W\n  W| tmmc        005 W\n  W|disp=        005 W\n  W|dsorg        005 W\n  W|lrecl        005 W\n  W|recfm        005 W\n  W|parm=        005 W\n  W|unit=        005 W\n  W| edima       006 F\n  W| enmis       006 W\n  W| geisd       006 W\n  W| glble       006 W\n  W| ifps.       006 W\n  W| openc       006 W\n  W| tislv       006 W\n  W| vsam        006 W\n  W| chrys       006 F\n  W| ford        006 F\n  W| honda       006 F\n  W| note:       006 F\n  W|label=       006 W\n  W|space=       006 W\n  W| inalfa      007 F\n  W| magna       007 F\n  W| mitsub      007 F\n  W| navist      007 F\n  W| vanfax      007 F\n  W|blksize      007 W\n  W|iefbr14      007 W\n  W|volume=      007 W\n  W| nissan      008 F\n  W| subaru      008 F\n  W|iebgener     008 W\n* - ----+----+-- --- -\n*\n*\n*   Specify which records are processed by this program\n*\n*   start = start including at this record\n*   end = stop including at this record\n*   |\n*   |     zero value causes parm to be ignored\n*   |     |\n* - ----- ---------\n  S start 000000000\n  S end   000000000\n* - ----- ---------\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JCLNOTE": {"ttr": 7937, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01=\\x008\\x01\\x19\\x03\\x1f\\x01\\x191_\\x08A\\x03\\xc0\\x04B\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.61", "flags": 0, "createdate": "2019-01-31T00:00:00", "modifydate": "2019-11-11T08:41:38", "lines": 960, "newlines": 1090, "modlines": 0, "user": "IANNONE"}, "text": "\n  JCLNEAT documentation\n\n  JCLSPLT documentation is located at the bottom of this member\n\n  Inspired by Carl Hafner who has \"NEATJCL\" on CBT tape #357\n\n  ==============================================================\n  General advice for using these tools                10/10/2019\n  ==============================================================\n\n  make a copy of items prior to altering... these procs are setup\n  to alter members in-place rather than generating new copies.\n  try manipulating various versions of JCL prior to altering any\n  production members.\n\n  once your standard parm settings are setup, it might make\n  sense to run procs and jobs through these programs as a matter\n  of move-to-production preparation.  this will standardize\n  all your JCL (JCLSPLT and JCLNEAT) and Cobol (COBNEAT) source.\n  with the CBT tape, these processes are free, and have been\n  created for you only two or three decades too late!\n\n  these run great on an iPhone, as long as you also have Z/Os\n  running on your iPhone.\n\n  run JCLSRUN (program JCLSPLT) as many times as necessary to split\n  long JCL records prior to formatting with JCLNRUN.\n  then run JCLNRUN (program JCLNEAT) to format JCL, rename steps,\n  add file disposition documentation, etc. this may rearrange things\n  enough to warrant running JCLSRUN again.\n\n  note that JCLSRUN is setup to alter one member at a time.\n  If renumbering steps for both PROCS and JOBS then you will want\n  to use JCLSRUN against both members individually prior to\n  concatenating them in the JCL01 DD in JCLNRUN.\n\n  JCLNRUN DD example:\n\n  //JCL01    DD  DISP=SHR,DSN=userid.ISPF.FILE488(proc member)\n  //         DD  DISP=SHR,DSN=userid.ISPF.FILE488(job member)\n\n\n  ==============================================================\n  JCLNEAT documentation                                1/30/2019\n  ==============================================================\n\n  ==============\n  \"C\" parm items can be entered in upper or lower case\n  ==============\n\n  c no lineup\n\n     \"no lineup\" will skip most JCL alterations.  renumbering\n     still occurs.  this is a master override which allows you\n     to specify this option rather than commenting any of the\n     related JCL alteration parm options below.\n\n\n  c no comment\n\n     \"no comment\" will skip most comment alterations.  renumbering\n     still occurs.  this is a master override which allows you\n     to specify this option rather than commenting any of the\n     related comment alteration parm options below.\n\n\n  c no renum\n\n     \"no renum\" will skip renumbering proc or job steps.\n     this is a master override which allows you to specify\n     this option rather than commenting the related proc or\n     job renumbering parm options below.\n\n\n  c case                         L\n\n    converting comments to lower case is advisable - it separates\n    them visually from processing code and makes them easier to read.\n    in essence, the comments are not SHOUTING AT YOU.  however,\n    converting all characters to lower case might make them less\n    english like.  these options exist to try to ease the conversion\n    to lower case:  \"after dot\"  and  \"cap first\".\n    they are explained below.\n\n//*\n//*  IF YOU SPECIFY \"CASE L\" FOR LOWER-CASE CONVERSION OF COMMENTS\n//*  THE PROGRAM WILL STILL LEAVE THE TOP BATCH OF COMMENTS IN\n//*  UPPER-CASE.\n//*\n//*-------------------------------------------------\n//*  |\n//*  a break line will signal the program to start converting\n//*  to lower-case.\n//*\n//*-------------------------------------------------\n\n\n  C case                         U\n\n//*\n//*  IF YOU SPECIFY \"CASE U\" THEN COMMENTS ARE CONVERTED TO UPPER-CASE\n//*\n//*-------------------------------------------------\n\n\n  C after dot\n\n//*  specify \"after dot\" to convert characters following\n//*  a period '. ' or a colon ': ' to upper-case.\n//*  this works well with comments entered in a flowing\n//*  paragraph style but not so well in list form.\n//*\n//*  list one - item one. Item two: Item three\n//*             item four item five.\n//*             Item six  item seven.  Item eight\n//*\n//*  here is another paragraph style comment.\n//*  Items following the period or colon are converted to\n//*  uppercase.  This might make paragraph style comments\n//*  more readable.  Note which items are capitalized here.\n//*\n//*-------------------------------------------------\n\n\n  C cap first                    F\n\n//*  specify \"cap first f\" to convert the first character in\n//*  the first line in a group of lines to upper-case.\n//*  this works well with comments entered in a list form\n//*  but not so well in a prefixed list form.\n//*\n//*  characters up to position 25 are converted.\n//*\n//* +----1----+----2----+----3--\n//*     First, run job JOB001 to fix the issue\n//*     second, run job JOB002 to fix issues from JOB001\n//*     third, run job JOB003 to fix issues from JOB002\n//*\n//*     Process: run job JOB001 to fix the issue\n//*\n//*              Run job JOB003 to fix issues from JOB001 and JOB002\n//*\n//*     Process:          run job JOB001\n//*                       run job JOB002\n//*                       run job JOB003\n//*\n//*  Here is another paragraph style comment. the first\n//*  character in this paragraph is capitalized but the\n//*  remaining lines are not converted to upper case.\n//*  note which items are capitalized here.\n//*\n//*-------------------------------------------------\n\n\n  C cap first                    A\n\n//*  specify \"cap first a\" to convert the first character in\n//*  all lines in a group of lines to upper-case.\n//*  this works well with comments entered in a list form\n//*  but not so well in a paragraph form.\n//*\n//*  characters up to position 25 are converted.\n//*\n//* +----1----+----2----+----3--\n//*     First, run job JOB001 to fix the issue\n//*     Second, run job JOB002 to fix issues from JOB001\n//*     Third, run job JOB003 to fix issues from JOB002\n//*\n//*     Process: run job JOB001 to fix the issue\n//*              Run job JOB002 to fix issues from JOB001\n//*              Run job JOB003 to fix issues from JOB002\n//*\n//*     Process:          run job JOB001\n//*                       run job JOB002\n//*                       run job JOB003\n//*\n//*  Here is another paragraph style comment.\n//*  The first character in each line is converted to\n//*  Upper case.  internal lines are not affected.\n//*  Note which items are capitalized here.\n//*\n//*-------------------------------------------------\n\n\n  C line type                    R\n\n\n//*  specify \"line type R\" to convert dash lines or shorter\n//*  asterisk lines to full length asterisk lines.\n//*\n//*  lines with at least 10 dashes or asterisks, and with no\n//*  intervening alpha or numeric characters, are converted\n//*  to asterisks up to column 71\n//*\n//*  these lines\n//*\n//**********\n//* * * * * * * * * * * * * * *\n//*------------\n//*\n//*  become\n//*\n//*********************************************************************\n//*\n//*-------------------------------------------------\n\n\n  C line type                    D\n\n\n//*  specify \"line type D\" to convert asterisk lines or shorter\n//*  dash lines to dash lines.\n//*\n//*  lines with at least 10 dashes or asterisks, and with no\n//*  intervening alpha or numeric characters, are converted\n//*  to dashes up to column 52\n//*\n//*  these lines\n//*\n//**********\n//* * * * * * * * * * * * * * *\n//*------------\n//*\n//*  become\n//*\n//*-------------------------------------------------\n//*\n//*-------------------------------------------------\n\n\n  C file name uc\n\n\n//*  specify \"file name uc\" to convert file names within comments\n//*  to upper case\n//*\n//*  -before-\n//*         whimpets are saved in ext01.whimpet.storage.file\n//*  -after-\n//*         whimpets are saved in EXT01.WHIMPET.STORAGE.FILE\n//*\n\n\n  C move comment                 0006\n\n\n//*  specify \"move comment\" to move comments to a specified\n//*  location.  the default location is column 6.\n//*  allowable locations are 0005 through 0020.\n//*  when all the comments in a job/proc are aligned they make\n//*  things look clean and organized.\n//*\n//*  characters up to position 25 signal the move process to select\n//*  that line for adjustment.  all items on the line are then moved\n//*  together.\n//*\n//*  this move logic does not attempt to keep disconnected words\n//*  'positionally stable.'\n//*\n//*  -before-\n//*         example message     with a five character gap\n//*  -after-\n//*  example message     with a five character gap\n//*\n//*  -not-\n//*  example message            with trailing chars at original pos\n//*\n//*\n//*  comment lists are often miss-aligned after comments are moved.\n//*  get around this by placing list items after column 25.\n//*\n//*\n//*    --1----+----2----+----3--\n//*  list items on/before column 25:\n//*\n//*  -before-\n//*     process: run job JOB001 to fix the issue\n//*              run job JOB002 to fix issues from JOB001\n//*              run job JOB003 to fix issues from JOB002\n//*\n//*  -after-\n//*   process: run job JOB001 to fix the issue\n//*   run job JOB002 to fix issues from JOB001\n//*   run job JOB003 to fix issues from JOB002\n//*\n//*\n//*    --1----+----2----+----3--\n//*  list items on/before column 25:\n//*\n//*  -before-\n//*     process order   run job JOB001\n//*                     run job JOB002\n//*                     run job JOB003\n//*  -after-\n//*  process order   run job JOB001\n//*  run job JOB002\n//*  run job JOB003\n//*\n//*\n//*    --1----+----2----+----3--\n//*  list items after column 25:\n//*\n//*  -before-\n//*    process order     run job JOB001\n//*                      run job JOB002\n//*                      run job JOB003\n//*  -after-\n//*  process order       run job JOB001\n//*                      run job JOB002\n//*                      run job JOB003\n//*\n//*\n//*-------------------------------------------------\n\n\n  C zap star\n\n//*  specify \"zap star\" to remove trailing asterisks from\n//*  comment lines.  alphabetic or numeric characters\n//*  stop the right-to-left conversion.  '+', '=', and '-'\n//*  do not stop the conversion.\n//*  full asterisk lines are not altered.\n//*\n//*  -before-\n//********** WS-ORIGINAL-LOCATION is set on here **********************\n//*\n//*  -after-\n//********** WS-ORIGINAL-LOCATION is set on here\n//*\n//*  -before-\n//*******************************************************\n//*  comment boxes can be intrusive                     *\n//*******************************************************\n//*\n//*  -after-\n//*\n//*  comment boxes can be intrusive\n//*\n//*\n//*  note: \"line type R\" will replace this asterisk line with a full\n//*        asterisk line prior to \"zap star\" logic eliminating them,\n//*        so those in combination result in:\n//*  -after-\n//*********************************************************************\n//*  comment boxes can be intrusive\n//*********************************************************************\n//*\n//*  -before-\n//**********************************************************************\n//**                                                                  **\n//***  trailing asterisks can prevent coders from easily entering     **\n//**** additional text.  in some situations the editor will prevent   **\n//***  'insert' from pushing non-blank characters past column 72.     **\n//**                                                                  **\n//**********************************************************************\n//*  -after-\n//**********************************************************************\n//*\n//***  trailing asterisks can prevent coders from easily entering\n//**** additional text.  in some situations the editor will prevent\n//***  'insert' from pushing non-blank characters past column 72.\n//*\n//**********************************************************************\n//*\n     -before-\n\n//*****\n//******\n//*******\n//********  .\n//*******   +\n//******    -\n//*****     =\n//****      a\n//***       .\n//**\n\n     -after-\n\n//*\n//*\n//*\n//********  .\n//*         +\n//*         -\n//*         =\n//****      A\n//***       .\n//*\n\n//*-------------------------------------------------\n\n\n  C zap last c\n\n//*  specify \"zap last c\" to blank out columns 73-80\n//*  within comment lines.\n//*  specify \"zap last j\" to blank out columns 73-80\n//*  within jcl.\n//*\n//*-------------------------------------------------\n\n\n  C zap last j\n\n//*  specify \"zap last j\" to blank out columns 73-80\n//*  within jcl.\n//*  specify \"zap last c\" to blank out columns 73-80\n//*  within comment lines.\n//*\n//*-------------------------------------------------\n\n\n  C swap disp\n\n//*  specify \"swap disp\" to swap DSN= and DISP=SHR\n//*  so DISP=SHR occurs in front.  the conversion will not occur\n//*  if there are any additional items in the JCL.\n//*\n//*  -before-\n//DD01   DD  DSN=USERID.TEST.FILE,DISP=SHR         *dsn in front\n//*  -after-\n//DD01   DD  DISP=SHR,DSN=USERID.TEST.FILE         *disp in front\n//*\n//*  -before-\n//DD01   DD  DSN=USERID.TEST.FILE,DISP=SHR,RECFM=FB\n//*  -after-\n//DD01   DD  DSN=USERID.TEST.FILE,DISP=SHR,RECFM=FB  *no change\n//*\n//*-------------------------------------------------\n\n\n  C flag disp                    0069\n  C flag pfx\n\n//*  specify \"flag disp\" to analyze file dispositions and\n//*  then place a shortened comment on the line containing\n//*  the file name.\n//*\n//*  the default location is 69.  this can be overridden from\n//*  60 to 78.  the location must be blank before the comment is\n//*  placed on the line.\n//*\n//*  note that by specifying \"flag disp\" the program will loop\n//*  through the JCL a second time so the job will run longer.\n//*\n//*  dispositions:   'new'\n//*                  'old'\n//*                  'mod'\n//*                  'shr'\n//*                  'del'\n//*\n//*  -before-\n//         DD  DSN=SYS1.SYSTEM.FILE,DISP=SHR\n//*  -after-\n//         DD  DSN=SYS1.SYSTEM.FILE,DISP=SHR                        shr\n//*\n//*  specify \"flag pfx\" to precede the comment with an asterisk.\n//*\n//*  -before-\n//         DD  DSN=SYS1.SYSTEM.FILE,DISP=SHR\n//*  -after-\n//         DD  DSN=SYS1.SYSTEM.FILE,DISP=SHR                       *shr\n//*\n//*-------------------------------------------------\n\n\n  C renum proc                              S\n  C renum pincr                  0010\n  C renum pdigit                 0003\n\n//*  specify \"renum proc\" to renumber proc steps.\n//*\n//*  \"renum proc\" turns the renumber process on.\n//*  to prevent renumbering, either do not specify this\n//*  option or specify option \"no renum\"\n//*\n//*  \"renum proc\" will renumber steps within a proc and will also\n//*  alter job step overrides.\n//*\n//*  specify the step name prefix in field option3 - between\n//*    one and four characters long.\n//*  \"renum pdigit\" specifies the number length\n//*  \"renum pincr\" specifies the number increment\n//*\n//*  note that by specifying \"renum\" the program will loop\n//*  through the JCL a second time so the job will run longer.\n//*\n//*  given the proc renum attributes above, steps would be\n//*  renumbered like this:\n//*\n//*  -before-\n//EXEDI862 PROC\n//EX045    EXEC PGM=IEFBR14\n//EX099    EXEC PGM=IEFBR14\n//EX135    EXEC PGM=IEFBR14\n//EX12A    EXEC PGM=IEFBR14\n//EX12B    EXEC PGM=IEFBR14\n//ABEND1   EXEC PGM=IEFBR14\n//EX046    EXEC PGM=IEFBR14\n//\n//*  -after-\n//EXEDI862 PROC\n//S010     EXEC PGM=IEFBR14\n//S020     EXEC PGM=IEFBR14\n//S030     EXEC PGM=IEFBR14\n//S040     EXEC PGM=IEFBR14\n//S050     EXEC PGM=IEFBR14\n//S060     EXEC PGM=IEFBR14\n//S070     EXEC PGM=IEFBR14\n// ---\n//   |\n//   pdgit was specified as \"0003\" so the number portion of the\n//   step name is three digits long\n//\n//*\n//*\n//*  note: there is logic to try to prevent running over -\n//*        for example this combination does not work since 100\n//*        is more than two digits:\n//*        renum pincr                  0100\n//*        renum pdigit                 0002\n//*\n//*        the number of existing steps in the proc are included\n//*        in the above calculation.\n//*\n//*\n//*  job-step override logic:\n//*  to alter both a proc and a job with overrides to that proc,\n//*  concatenate the job under the proc in the JCL01 DD statement\n//*  in JCLNRUN like this:\n//*\n//JCL01   DD  DSN=ISPF.LIBRARY.WITH.PROC(PROCNAME),DISP=SHR\n//        DD  DSN=ISPF.LIBRARY.WITH.JOB(JOBNAME),DISP=SHR\n//*\n//*\n//*  -before-\n//E00080   EXEC EXEDI862\n//EX045.SYSIN DD DUMMY\n//*\n//E00090   EXEC EXEDI100\n//EX045.SYSIN DD DUMMY\n//*\n//*  -after-\n//E00080   EXEC EXEDI862\n//S010.SYSIN DD DUMMY\n//*\n//E00090   EXEC EXEDI100\n//EX045.SYSIN DD DUMMY\n//*\n\n     one aspect of this renumber process that is probably\n     different than any vendor offering: this process attempts\n     to rename steps mentioned within comments.  The step name\n     must be wrapped in spaces:  ' step '\n     this may present issues if the name of the step is\n     english-like - you could end up with comments such as:\n\n//*  -before-\n//************************************\n//*  SEND THE FILE TO HONDA\n//************************************\n//FILE     EXEC PGM=IEBGENER\n\n//*  -after-\n//************************************\n//*  SEND THE S010 TO HONDA\n//************************************\n//S010     EXEC PGM=IEBGENER\n\n     so after the renumbering is complete you should review\n     the JCL and fix any unintended alterations.\n\n//*-------------------------------------------------\n\n  C renum prog                   TAPEEXT    TX\n  C renum prog                   IEFBR14    BR\n  C renum prog                   IEBGENER   IEBG\n\n  specify up to ten \"renum prog\" entries.  these will tell JCLNEAT\n  to use a different step name prefix for these programs.\n\n\n//*-------------------------------------------------\n\n  C renum job                               J\n  C renum jincr                  0100\n  C renum jdigit                 0004\n\n//*  specify \"renum job\" to renumber job steps.\n//*\n//*  \"renum job\" turns the renumber process on.\n//*  to prevent renumbering, either do not specify this\n//*  option or specify option \"no renum\"\n//*\n//*  specify the job step prefix in field option3 - between\n//*    one and four characters long.\n//*  \"renum jdigit\" specifies the number length\n//*  \"renum jincr\" specifies the number increment\n//*\n//*  note that by specifying \"renum\" the program will loop\n//*  through the JCL a second time so the job will run longer.\n//*\n//*  examples of job step renumbering using the options above:\n//*\n//*  -before-\n//E00080   EXEC EXEDI862\n//EX045.SYSIN DD DUMMY\n//*\n//E00090   EXEC EXEDI100\n//\n//*  -after-\n//J0100    EXEC EXEDI862\n//EX045.SYSIN DD DUMMY\n//*\n//J0200    EXEC EXEDI100\n// ----\n//    |\n//    jdgit was specified as \"0004\" so the number portion of the\n//    step name is four digits long\n//*\n//*\n//*  note: there is logic to try to prevent running over -\n//*        see the \"renum proc\" comments above.\n//*        also, there is logic which attempts to change job step\n//*        names within comments - see the note under \"renum proc\"\n//*        above.\n//*\n//*-------------------------------------------------\n\n  C reset steps\n\n    if renumbering multiple jobs and/or procs, specifying\n    \"reset steps\" will cause new numbers to restart for\n    each proc or job, rather than continuously incrementing.\n\n    -without \"reset steps\"-\n    //EXEDI100 PROC\n    //S010     EXEC PGM=IEBGENER\n    //S020     EXEC PGM=IEBGENER\n    //S030     EXEC PGM=IEBGENER\n    //EXEDI200 PROC\n    //S040     EXEC PGM=IEBGENER\n    //S050     EXEC PGM=IEBGENER\n    //S060     EXEC PGM=IEBGENER\n\n    -with \"reset steps\"-\n    //EXEDI100 PROC\n    //S010     EXEC PGM=IEBGENER\n    //S020     EXEC PGM=IEBGENER\n    //S030     EXEC PGM=IEBGENER\n    //EXEDI200 PROC\n    //S010     EXEC PGM=IEBGENER\n    //S020     EXEC PGM=IEBGENER\n    //S030     EXEC PGM=IEBGENER\n\n\n\n  ==============\n  \"I\" parm items can be entered in upper or lower case\n  ==============\n\n     \"I\" parms are used to specify where you would like JCL words\n     placed.  you can limit which columns are searched - if the item\n     resides outside those columns it is not moved.\n\n     the field definitions below are fairly straight-forward except\n     for the following:\n\n                                    IF=alter IF with \"IF01\"\n                                    |\n     I| IF          004 011 003 020 IF     X\n\n     this logic allows a numeric \"prefix\" to be placed in front of\n     IF statements to help keep track of which ENDIF's belong with\n     which IF's in JCL.\n\n     -before-\n//   IF (8,NE,S040) THEN\n//S050     EXEC PGM=IDCAMS\n//   IF (8,NE,S050) THEN\n//S060     EXEC PGM=IDCAMS\n//  ENDIF\n//   IF (8,NE,S060) THEN\n//S070     EXEC PGM=IDCAMS\n//  ENDIF\n//   IF (8,NE,S070) THEN\n//  ENDIF\n//  ENDIF\n\n     -after-\n//IF01  IF (8,NE,S040) THEN\n//S050     EXEC PGM=IDCAMS\n//IF02  IF (8,NE,S050) THEN\n//S060     EXEC PGM=IDCAMS\n//  ENDIF\n//IF03  IF (8,NE,S060) THEN\n//S070     EXEC PGM=IDCAMS\n//  ENDIF\n//IF04  IF (8,NE,S070) THEN\n//  ENDIF\n//  ENDIF\n\n                                    ENDIF=alter ENDIF with \"END01\"\n                                    |\n     I| ENDIF       006 011 003 016 ENDIF  X\n\n     this logic allows a numeric \"prefix\" to be placed in front of\n     ENDIF statements to help keep track of which ENDIF's belong with\n     which IF's in JCL.\n\n     -before-\n//   IF (8,NE,S040) THEN\n//S050     EXEC PGM=IDCAMS\n//   IF (8,NE,S050) THEN\n//S060     EXEC PGM=IDCAMS\n//  ENDIF\n//   IF (8,NE,S060) THEN\n//S070     EXEC PGM=IDCAMS\n//  ENDIF\n//   IF (8,NE,S070) THEN\n//  ENDIF\n//  ENDIF\n\n     -after-\n//   IF (8,NE,S040) THEN\n//S050     EXEC PGM=IDCAMS\n//   IF (8,NE,S050) THEN\n//S060     EXEC PGM=IDCAMS\n//END02  ENDIF\n//   IF (8,NE,S060) THEN\n//S070     EXEC PGM=IDCAMS\n//END03  ENDIF\n//   IF (8,NE,S070) THEN\n//END04  ENDIF\n//END01  ENDIF\n\n     using them together and with option \"position to place JCL item\"\n     set to \"11\" (to include the leading space) results in:\n\n     -after-\n----+----1----+----2\n//IF01     IF (8,NE,S040) THEN\n//S050     EXEC PGM=IDCAMS\n//IF02     IF (8,NE,S050) THEN\n//S060     EXEC PGM=IDCAMS\n//END02    ENDIF\n//IF03     IF (8,NE,S060) THEN\n//S070     EXEC PGM=IDCAMS\n//END03    ENDIF\n//IF04     IF (8,NE,S070) THEN\n//END04    ENDIF\n//END01    ENDIF\n\n\n                                           X=exclude altering comments\n                                           |  if found in pos 4 - 20\n     I| EXEC        005 011 004 016        X\n\n     many JCL comments contain words that are similar to reserved\n     JCL words such as \"IF.\"  the program contains logic to avoid\n     converting commented JCL lines (ie: lines containing JCL\n     directives) to lower-case.\n     the \"X\" signals the program to NOT count the specified word\n     as a JCL reserved word when tallying JCL words.\n     this avoids leaving regular comments as uppercase.\n\n\n*\n*\n*   JCL arrangement options\n*\n*   enter up to 200 items\n*\n*  bar helps show if spaces precede JCL word\n*  |\n*  |             search length of JCL item 001-020\n*  |             |\n*  |             |   position to place JCL item\n*  |             |   |\n*  |find in JCL  |   |   start search column\n*  ||            |   |   |   end search column\n*  ||            |   |   |   |\n*  ||            |   |   |   |   IF=alter IF with \"IF01\"\n*  ||            |   |   |   |   ENDIF=alter ENDIF with \"END01'\n*  ||            |   |   |   |   |\n*  ||            |   |   |   |   |      X=exclude altering comments if\n*  ||            |   |   |   |   |      |  found in pos 4 - 20\n* - ----+----+-- --- --- --- --- ------ -\n  I| JOB         005 011 004 016        X\n  I| DD          004 011 004 020\n  I| IF          004 011 003 020 IF     X\n  I| ENDIF       006 011 003 016 ENDIF\n  I| AMP=        005 015 004 022\n  I| DCB=        005 015 004 022\n  etc\n\n\n  ==============\n  \"W\" parm items can be entered in upper or lower case\n  ==============\n\n     \"W\" parms are used to specify words to convert back to\n     upper-case within comments converted to lower-case.\n     although this is merely cosmetic, it seems to make JCL\n     more readable.\n\n     the descriptions below are fairly straight-forward.\n*\n*\n*   If \"case     L\" specified,\n*     convert these words within JCL comments to uppercase\n*\n*   enter up to 200 items\n*\n*  bar helps show if spaces precede JCL word\n*  |\n*  |   search length F=first character uppercase\n*  |               | N=whole word if contains any numeric\n*  |JCL word       | W=whole word (and connected words) uppercase\n*  ||              | |\n* - ----+----+-- --- -\n  W| dd          003 W\n  W| ex          003 N\n  W|gxs          003 W\n  W|xlt          003 W\n  W| ftp         004 W\n  W| gdg         004 W\n  W| vsam        006 W\n  W| chrys       006 F\n  W| ford        006 F\n  W| honda       006 F\n  W| note:       006 F\n\n  examples from above settings:\n\n     -before-\n//*  if program exedi050 issues exception code 12 for honda then\n//*  add record to vsam file and increment gdg\n//*  note: ford and chrysler are exempt for these dd's\n\n     -after-\n//*  if program EXEDI050 issues exception code 12 for Honda then\n//*  add record to VSAM file and increment GDG\n//*  Note: Ford and Chrysler are exempt for these DD's\n\n\n\n  ==============\n  \"S\" parm items can be entered in upper or lower case\n  ==============\n\n  S start 000000000\n  S end   000000000\n\n     \"S\" parms are used to limit which input file records are\n     actually altered.  for example, to be certain only records\n     within one proc are altered within a multi-proc input file\n     you could specify the starting and ending lines using \"S\"\n     records.\n\n\n  ==============================================================\n  JCLSPLT documentation                               10/09/2019\n  ==============================================================\n\n  ==============\n  \"C\" parm items can be entered in upper or lower case\n  ==============\n\n  C split start  040\n\n      value 016 through 065.  default value is 40.\n      indicates where in the record to look for commas when\n      splitting records into separate lines.  splitting does not\n      occur prior to this location.  to split all JCL statements\n      into separate lines then set the \"split start\" value to 016.\n\n      note the internal array in this program holds 5 lines, so\n      if more splitting needs to occur then run the JCL through\n      the program a second time.\n\n      also note that if you run JCLNEAT after JCLSPLT then it may\n      move statements to the \"split start\" location that were\n      previously located before that position.  running JCLSPLT\n      again may split things that did not split previously.\n\n      example:\n\n      if \"split start\" is set to 042 then this split occurs:\n          ----+----2----+----3----+----4----+----5----+----6----+\n      before   DISP=(MOD,DELETE,DELETE),UNIT=LOFDA,SPACE=(TRK,1),\n\n      after    DISP=(MOD,DELETE,DELETE),UNIT=LOFDA,\n               SPACE=(TRK,1),\n\n      if \"split start\" is set to 040 then this split occurs:\n          ----+----2----+----3----+----4----+----5----+----6----+\n      before   DISP=(MOD,DELETE,DELETE),UNIT=LOFDA,SPACE=(TRK,1),\n\n      after    DISP=(MOD,DELETE,DELETE),\n               UNIT=LOFDA,SPACE=(TRK,1),\n\n  C keep disp    050\n\n      value 016 through 063.  default value is 50.\n      do not split record when \"DISP=SHR\" is located at the\n      end of the record prior to or at this value.  The idea here\n      is to avoid generating extra JCL records when \"DISP=SHR\"\n      is the last item on the JCL line and it is not too far\n      to the right on the line.  \"DISP=OLD\" is also included in\n      this logic.\n\n      example:\n\n      if \"split start\" is set to 040 and \"keep disp\" is set to 050\n          then no change:\n          ----+----2----+----3----+----4----+----5----+----6----+\n      before   DSN=MISQZY.OUTPUT.STANDARD.FILE,DISP=SHR\n      after    DSN=MISQZY.OUTPUT.STANDARD.FILE,DISP=SHR\n\n      if \"split start\" is set to 036 and \"keep disp\" is set to 046\n          then record is split:\n          ----+----2----+----3----+----4----+----5----+----6----+\n      before   DSN=MISQZY.OUTPUT.STANDARD.FILE,DISP=SHR\n\n      after    DSN=MISQZY.OUTPUT.STANDARD.FILE,\n               DISP=SHR\n\n\n  C loc 73       x\n\n      C = copy contents of position 73-80 to new line.\n      S = move 'jclsplt' to position 73 in new line\n          and include a counter ie: \"jclsplt3\".\n      blank = position 73-80 of new line is blank.\n          this is the default value.\n\n      example:\n\n      \"x\" is set to \"C\"\n\n          ----+----3----+----4----+----5----+----6----+----7----+----8\n      before ...OUTPUT,UNIT=SYSDA,DISP=(OLD,DELETE,DELETE)    zzj00034\n\n      after  ...OUTPUT,                                       zzj00034\n             UNIT=SYSDA,                                      zzj00034\n             DISP=(OLD,DELETE,DELETE)                         zzj00034\n\n\n      \"x\" is set to \"S\"\n\n          ----+----3----+----4----+----5----+----6----+----7----+----8\n      before ...OUTPUT,UNIT=SYSDA,DISP=(OLD,DELETE,DELETE)    zzj00034\n\n      after  ...OUTPUT,                                       zzj00034\n             UNIT=SYSDA,                                      jclsplt1\n             DISP=(OLD,DELETE,DELETE)                         jclsplt2\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JCLNRUN": {"ttr": 8199, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1f\\x003\\x01\\x184\\x8f\\x01\\x19(/\\x12V\\x00,\\x00\"\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.31", "flags": 0, "createdate": "2018-12-14T00:00:00", "modifydate": "2019-10-09T12:56:33", "lines": 44, "newlines": 34, "modlines": 0, "user": "IANNONE"}, "text": "/*PRIORITY     01\n//useridJ  JOB (5000,'JCLNEAT alter JCL item alignment '),\n//             'JCLNEAT JCL cleanup',\n//             CLASS=x,REGION=60M,\n//             MSGCLASS=x,\n//             MSGLEVEL=(1,1)\n//JOBLIB   DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//*        DD  DISP=SHR,DSN=SYS2.LANGUAGE.ENVIRONM.RUN\n//*-------------------------------------------------\n//*\n//*  1.  set input libraries in step S010\n//*  2.  value TST and MEMBR symbolics at bottom\n//*  3.  run\n//*\n//*-------------------------------------------------\n//NEAT     PROC\n//*-------------------------------------------------\n//*\n//*  Align JCL\n//*  Renumber proc/job steps\n//*  Clean-up and enhance comments\n//*\n//*        1 = show basic display statements\n//*        2 = show basic display statements with ruler\n//*        3 = show display statements and 're-align' values\n//*        |\n//*  PARM='X         '\n//*\n//*  //JCL01 = proc or job to alter\n//*            concatenate job under proc if altering both\n//*\n//*-------------------------------------------------\n//S010     EXEC PGM=JCLNEAT,\n//             COND=(0,NE),\n//             PARM='&TST.         /'\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//PARM01   DD  DISP=SHR,DSN=userid.ISPF.FILE488(JCLNEAT1)     *input\n//JCL01    DD  DISP=SHR,DSN=userid.ISPF.FILE488(&MEMBR)       *update\n//*-------------------------------------------------\n//         PEND\n//J010     EXEC NEAT,TST=N,MEMBR=XXXXXXXX\n//*-------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JCLSPLT": {"ttr": 8201, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01(\\x00 \\x01\\x19(\\x1f\\x01\\x192/\\x12\"\\x01\\xd2\\x017\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.40", "flags": 0, "createdate": "2019-10-08T00:00:00", "modifydate": "2019-11-18T12:22:20", "lines": 466, "newlines": 311, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  JCLSPLT: separate long JCL lines'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    JCLSPLT.\n      **********************************************************CX003B\n      *@@@ C3 separate long JCL lines\n      ****************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * Date written: 10/08/2019\n      * Author      : Jim Iannone\n      *               separate long JCL lines\n      ****************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n           C01 IS PAGE-TOP.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT JCLIN                ASSIGN TO JCLIN\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT JCLOUT               ASSIGN TO JCLOUT\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  JCLIN\n           RECORDING MODE F.\n       01  JCLIN-RECORD.\n           05  JCLIN-RCD               PIC  X(80).\n\n       FD  JCLOUT\n           RECORDING MODE F.\n       01  JCLOUT-RECORD.\n           05  JCLOUT-RCD              PIC  X(80).\n\n      * - ------------ ---\n      * C split start  016\n\n       FD  PARM01\n           RECORDING MODE F.\n       01  PARM01-RECORD.\n           05  PARM01-DOCU             PIC  X.\n           05  FILLER                  PIC  X.\n           05  PARM01-CODE             PIC  X.\n           05  FILLER                  PIC  X.\n           05  PARM01-PARM             PIC  X(12).\n           05  FILLER                  PIC  X.\n           05  PARM01-VALUE            PIC  XXX.\n           05  FILLER                  PIC  X(52).\n           05  FILLER                  PIC  X(08).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage JCLSPLT start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-TALLY                PIC S9(05)    VALUE ZERO COMP.\n           05  WS-COMMA-LOC            PIC  999      VALUE ZERO.\n           05  WS-START-LOC            PIC  999      VALUE ZERO.\n           05  WS-DISP-LOC             PIC  999      VALUE ZERO.\n           05  WS-PAREN-CNT            PIC  999      VALUE ZERO.\n           05  WS-BLANK                PIC  999      VALUE ZERO.\n           05  WS-80-1                 PIC  9        VALUE ZERO.\n           05  WS-LS-DATA              PIC  X(10)    VALUE SPACE.\n           05  FILLER REDEFINES WS-LS-DATA.\n               10  WS-LS-TEST          PIC  X.\n               10  WS-LS-EXTRA         PIC  X(09).\n           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.\n           05  WS-ITEM                 PIC  X(12)    VALUE SPACE.\n           05  WS-QUOTE                PIC  X        VALUE X'7D'.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-JCLIN-CNT       PIC S9(09)    VALUE ZERO.\n           05  WS-WRITE-JCLOUT-CNT     PIC S9(09)    VALUE ZERO.\n           05  WS-SPLIT-CNT            PIC S9(09)    VALUE ZERO.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(07)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(07)    VALUE ZERO.\n           05  WS-SUB3                 PIC S9(07)    VALUE ZERO.\n           05  WS-STR1                 PIC S9(07)    VALUE ZERO.\n           05  WS-STR2                 PIC S9(07)    VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  WS-END-JCLIN-SW         PIC  X        VALUE 'N'.\n               88  END-OF-JCLIN                      VALUE 'Y'.\n               88  MORE-JCLIN-RCDS                   VALUE 'N'.\n           05  WS-QUOTE-SW             PIC  X        VALUE SPACE.\n           05  WS-73-CHOICE-SW         PIC  X        VALUE SPACE.\n           05  WS-DISP-SW              PIC  X        VALUE SPACE.\n\n       01  WS-TABLES.\n           05  WS-RCD-TABLE            PIC  X(400)   VALUE SPACE.\n           05  WS-RCD-ITEM             REDEFINES WS-RCD-TABLE\n                                       OCCURS 5 TIMES.\n               10  WS-RCD              PIC  X(80).\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  JCLSPLT END  '.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELD.\n           05  LS-LENGTH               PIC S9(04)    COMP.\n           05  LS-DATA                 PIC  X(10).\n           05  FILLER REDEFINES LS-DATA.\n               10  LS-TEST             PIC  X.\n               10  LS-EXTRA            PIC  X(09).\n\n      /\n\n       PROCEDURE DIVISION USING LS-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           MOVE +0000                         TO WS-RETURN-CODE.\n           PERFORM 0200-OPEN-FILES.\n           DISPLAY '    '.\n           DISPLAY '**** JCLSPLT separate long JCL lines'.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-JCLIN.\n\n           DISPLAY '**** Records in JCLIN          '\n                                               WS-READ-JCLIN-CNT.\n           IF WS-SPLIT-CNT = ZERO\n               DISPLAY '**** No records matched split criteria'\n           ELSE\n               DISPLAY '**** New records from split    '\n                                               WS-SPLIT-CNT.\n           DISPLAY '**** Records written           '\n                                               WS-WRITE-JCLOUT-CNT.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** JCLSPLT cond code ' WS-RETURN-CODE\n                       ' set by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** JCLSPLT EOJ encountered '.\n           DISPLAY '    '.\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  JCLIN.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** JCLSPLT open error on JCLIN'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN INPUT  PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** JCLSPLT open error on PARM01'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN OUTPUT JCLOUT.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** JCLSPLT open error on JCLOUT'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE JCLOUT.\n           CLOSE PARM01.\n           CLOSE JCLIN.\n\n      *---------------------------------------\n      *    X\n      *---------------------------------------\n       0400-PROCESS-JCLIN.\n\n           PERFORM 0500-GET-LINKAGE.\n\n           IF WS-RETURN-CODE = ZERO\n               MOVE 040                       TO WS-START-LOC\n               MOVE 050                       TO WS-DISP-LOC\n               MOVE SPACE                     TO WS-73-CHOICE-SW\n               PERFORM 0700-LOAD-PARM01 THRU\n                       0700-LOAD-PARM01-EXIT.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0800-SHOW-PARM-VALUES.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 1100-GET-JCLIN\n                   UNTIL END-OF-JCLIN.\n\n       0500-GET-LINKAGE.\n           IF LS-LENGTH = ZERO\n               DISPLAY '**** Parm length is zero '\n               MOVE +0500                     TO WS-RETURN-CODE\n           ELSE\n           IF LS-LENGTH > LENGTH OF WS-LS-DATA\n               DISPLAY '**** Parm length is excessive '\n               MOVE +0500                     TO WS-RETURN-CODE\n           ELSE\n               MOVE LS-DATA(1: LS-LENGTH)     TO WS-LS-DATA.\n\n      *---------------------------------------\n      *    load from parm file\n      *---------------------------------------\n       0700-LOAD-PARM01.\n           READ PARM01.\n           IF WS-STAT = 10\n               GO TO 0700-LOAD-PARM01-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** JCLSPLT read error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0700                     TO WS-RETURN-CODE\n               GO TO 0700-LOAD-PARM01-EXIT.\n\n           IF PARM01-DOCU = '*'\n               GO TO 0700-LOAD-PARM01.\n\n           IF PARM01-CODE = 'C' OR 'c'\n               PERFORM 0700-PARM01-FIELDS.\n\n           GO TO 0700-LOAD-PARM01.\n\n       0700-LOAD-PARM01-EXIT. EXIT.\n\n       0700-PARM01-FIELDS.\n           MOVE FUNCTION LOWER-CASE(PARM01-PARM) TO WS-ITEM.\n           IF WS-ITEM = 'split start'\n             IF PARM01-VALUE NUMERIC\n                 MOVE PARM01-VALUE            TO WS-START-LOC\n                 IF WS-START-LOC < 16\n                     MOVE 16                  TO WS-START-LOC\n                 ELSE\n                 IF WS-START-LOC > 65\n                     MOVE 65                  TO WS-START-LOC\n                 ELSE\n                     CONTINUE\n             ELSE\n                 DISPLAY '**** JCLSPLT split start value not numeric'\n                 MOVE +0700                   TO WS-RETURN-CODE.\n           IF WS-ITEM = 'keep disp  '\n             IF PARM01-VALUE NUMERIC\n                 MOVE PARM01-VALUE            TO WS-DISP-LOC\n                 IF WS-DISP-LOC < 16\n                     MOVE 16                  TO WS-DISP-LOC\n                 ELSE\n                 IF WS-DISP-LOC > 63\n                     MOVE 63                  TO WS-DISP-LOC\n                 ELSE\n                     CONTINUE\n             ELSE\n                 DISPLAY '**** JCLSPLT keep disp value not numeric'\n                 MOVE +0700                   TO WS-RETURN-CODE.\n             IF WS-ITEM = 'loc 73'\n                 MOVE PARM01-VALUE(1: 1)      TO WS-73-CHOICE-SW.\n\n      *---------------------------------------\n\n       0800-SHOW-PARM-VALUES.\n           DISPLAY '**** Split records at location       '\n                                               WS-START-LOC.\n           DISPLAY '**** Keep DISP location              '\n                                               WS-DISP-LOC.\n           IF WS-73-CHOICE-SW = 'C'\n               DISPLAY '**** Location 73 setting             '\n                       'copy from previous record'\n           ELSE\n           IF WS-73-CHOICE-SW = 'S'\n               DISPLAY '**** Location 73 setting             '\n                       'set to \"jclsplt#\"        '\n           ELSE\n               DISPLAY '**** Location 73 setting             '\n                       'leave blank'.\n           DISPLAY '             '.\n\n       1100-GET-JCLIN.\n           PERFORM 1100-READ-JCLIN.\n           IF MORE-JCLIN-RCDS\n               PERFORM 1200-SELECT THRU\n                       1200-SELECT-EXIT.\n\n       1100-READ-JCLIN.\n           READ JCLIN.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-JCLIN-CNT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-JCLIN-SW\n           ELSE\n               DISPLAY '**** JCLSPLT read error on JCLIN '\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +1100                     TO WS-RETURN-CODE.\n\n      *---------------------------------------\n      *    X\n      *---------------------------------------\n       1200-SELECT.\n           MOVE SPACE                         TO WS-RCD-TABLE.\n           MOVE 1                             TO WS-SUB1.\n           MOVE JCLIN-RCD                     TO WS-RCD(WS-SUB1).\n\n           IF JCLIN-RCD(1: 2) = '//'\n             IF JCLIN-RCD(3: 1) = '*'\n                 PERFORM 2000-GENERATE-RCDS\n             ELSE\n                 PERFORM 1300-SPLIT-RECORDS\n                     VARYING WS-SUB1 FROM 1 BY 1\n                     UNTIL WS-SUB1 > 4\n                 PERFORM 2000-GENERATE-RCDS\n           ELSE\n               PERFORM 2000-GENERATE-RCDS.\n\n       1200-SELECT-EXIT. EXIT.\n\n       1300-SPLIT-RECORDS.\n           MOVE SPACE                         TO WS-QUOTE-SW.\n           MOVE ZERO                          TO WS-PAREN-CNT.\n           MOVE ZERO                          TO WS-COMMA-LOC.\n           PERFORM 1300-LOOK-FOR-COMMA\n               VARYING WS-SUB2 FROM 3 BY 1\n               UNTIL WS-SUB2 > 68.\n           IF WS-COMMA-LOC > ZERO\n               PERFORM 1300-SPLIT-RCD\n           ELSE\n               MOVE 5                         TO WS-SUB1.\n\n      *---------------------------------------\n      *\n      *                 \\\\|//\n      *                 (. .)\n      *-------------oOOo-(_)-oOOo-------------\n       1300-LOOK-FOR-COMMA.\n           IF WS-RCD(WS-SUB1)(WS-SUB2: 1) = '('\n               ADD 1                          TO WS-PAREN-CNT\n           ELSE\n           IF WS-RCD(WS-SUB1)(WS-SUB2: 1) = ')'\n               SUBTRACT 1                     FROM WS-PAREN-CNT\n           ELSE\n           IF WS-RCD(WS-SUB1)(WS-SUB2: 1) = WS-QUOTE\n             IF WS-QUOTE-SW = SPACE\n                 MOVE 'Y'                     TO WS-QUOTE-SW\n             ELSE\n                 MOVE SPACE                   TO WS-QUOTE-SW\n           ELSE\n           IF WS-SUB2 < WS-START-LOC\n               CONTINUE\n           ELSE\n           IF WS-QUOTE-SW = SPACE\n             IF WS-PAREN-CNT = ZERO\n               IF WS-RCD(WS-SUB1)(WS-SUB2: 1) = ','\n                 IF WS-RCD(WS-SUB1)(WS-SUB2 + 1: 1) = SPACE\n                     MOVE 72                  TO WS-SUB2\n                 ELSE\n                     PERFORM 1300-FIND-DISP\n                     IF WS-DISP-SW = 'Y'\n                         MOVE 72              TO WS-SUB2\n                     ELSE\n                         MOVE WS-SUB2         TO WS-COMMA-LOC\n                         MOVE 72              TO WS-SUB2.\n\n      *---------------------------------------\n      *    do not split records if \"DISP=SHR\" is within\n      *    WS-DISP-LOC location.  this avoids generating\n      *    extra records when DISP is a short value.\n      *---------------------------------------\n       1300-FIND-DISP.\n           MOVE SPACE                         TO WS-DISP-SW.\n           IF WS-SUB2 < 64\n             IF WS-RCD(WS-SUB1)(WS-SUB2: 10) = ',DISP=SHR '\n                 OR ',DISP=OLD ' OR ',DISP=MOD ' OR ',DISP=NEW '\n                 IF WS-SUB2 > WS-DISP-LOC\n                     CONTINUE\n                 ELSE\n                     MOVE 'Y'                 TO WS-DISP-SW.\n\n      *---------------------------------------\n      *    break   //DD01  DD  DSN=LONG.FILE.NAME,DISP=(MOD,DELETE)\n      *\n      *    into    //DD01  DD  DSN=LONG.FILE.NAME,\n      *            //          DISP=(MOD,DELETE)\n      *---------------------------------------\n       1300-SPLIT-RCD.\n           PERFORM 1400-SHOW-BEFORE.\n\n           MOVE ZERO                  TO WS-BLANK.\n           COMPUTE WS-BLANK = 72 - WS-COMMA-LOC.\n           MOVE SPACE                 TO WS-RCD(WS-SUB1 + 1).\n           MOVE '//'                  TO WS-RCD(WS-SUB1 + 1)(1: 2).\n           MOVE WS-RCD(WS-SUB1)(WS-COMMA-LOC + 1: WS-BLANK)\n                                      TO WS-RCD(WS-SUB1 + 1)(16: ).\n           IF WS-73-CHOICE-SW = 'C'\n               MOVE WS-RCD(WS-SUB1)(73: 8)\n                                      TO WS-RCD(WS-SUB1 + 1)(73: 8)\n           ELSE\n           IF WS-73-CHOICE-SW = 'S'\n               MOVE 'jclsplt '        TO WS-RCD(WS-SUB1 + 1)(73: 8)\n               MOVE WS-SUB1           TO WS-80-1\n               MOVE WS-80-1           TO WS-RCD(WS-SUB1 + 1)(80: 1).\n           MOVE SPACE  TO WS-RCD(WS-SUB1)(WS-COMMA-LOC + 1: WS-BLANK).  .\n           ADD 1                      TO WS-SPLIT-CNT.\n\n           PERFORM 1400-SHOW-AFTER.\n\n       1400-SHOW-BEFORE.\n           IF WS-LS-TEST NUMERIC\n               DISPLAY ' record   ' WS-READ-JCLIN-CNT.\n           IF WS-LS-TEST = '2' OR '3'\n               DISPLAY '          ----+----1----+----2----'\n                    '+----3----+----4----+----5----+----6'\n                    '----+----7--'.\n           IF WS-LS-TEST NUMERIC\n               DISPLAY '  before  ' WS-RCD(WS-SUB1).\n           IF WS-LS-TEST = '3'\n               DISPLAY '       -   start loc: ' WS-START-LOC\n                       '  comma loc: ' WS-COMMA-LOC\n               DISPLAY '       -    disp loc: ' WS-DISP-LOC.\n\n       1400-SHOW-AFTER.\n           IF WS-LS-TEST NUMERIC\n               DISPLAY '   after  ' WS-RCD(WS-SUB1)\n               DISPLAY '          ' WS-RCD(WS-SUB1 + 1)\n               DISPLAY '          '.\n\n       2000-GENERATE-RCDS.\n           PERFORM VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > 5\n               IF WS-RCD(WS-SUB1) = SPACE\n                   CONTINUE\n               ELSE\n                   MOVE WS-RCD(WS-SUB1)       TO JCLOUT-RCD\n                   PERFORM 2300-WRITE-JCLOUT\n               END-IF\n           END-PERFORM.\n\n       2300-WRITE-JCLOUT.\n           WRITE JCLOUT-RECORD.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-WRITE-JCLOUT-CNT\n           ELSE\n               DISPLAY '**** JCLSPLT write error on JCLOUT'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE 'Y'                       TO WS-END-JCLIN-SW\n               MOVE +2300                     TO WS-RETURN-CODE.\n\n      ************************************ END JCLSPLT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JCLSPLT1": {"ttr": 8454, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00V\\x01\\x19(\\x1f\\x01\\x19(?\\x08\"\\x00\\x16\\x00\\x08\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "2019-10-08T00:00:00", "modifydate": "2019-10-10T08:22:56", "lines": 22, "newlines": 8, "modlines": 0, "user": "IANNONE"}, "text": "*\n*   JCLSPLT      split jcl lines to make more legible\n*\n*\n*   split start  ###    indicates where in the record to look for\n*                       commas when determining where to split\n*                       a record into separate lines.\n*                       value 016 through 065. default value 040.\n*\n*   keep disp    ###    do not split record when \"DISP=SHR\" is\n*                       located at EOR prior to this value.\n*                       value 016 through 063. default value 050.\n*\n*   loc 73       x      C = copy contents of position 73-80 to new line\n*                       S = move 'jclsplt' to position 73 in new line\n*                       blank = position 73-80 of new line is blank\n*                               default value is blank.\n*\n* - ------------ ---\n  C split start  040\n  C keep disp    050\n  C loc 73\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JCLSRUN": {"ttr": 8456, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00%\\x01\\x19(/\\x01\\x19(/\\x12T\\x005\\x005\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-10-09T00:00:00", "modifydate": "2019-10-09T12:54:25", "lines": 53, "newlines": 53, "modlines": 0, "user": "IANNONE"}, "text": "/*PRIORITY     01\n//useridJ  JOB (5000,'JCLSPLT split long JCL lines '),\n//             'JCLSPLT split JCL',\n//             CLASS=x,REGION=60M,\n//             MSGCLASS=x,\n//             MSGLEVEL=(1,1)\n//JOBLIB   DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//*        DD  DISP=SHR,DSN=SYS2.LANGUAGE.ENVIRONM.RUN\n//*-------------------------------------------------\n//*\n//*  1.  set input library in step S010\n//*  2.  set output library in step S020 -\n//*        default is to overwrite source JCL\n//*  3.  value TST and MEMBR symbolics at bottom\n//*  4.  run\n//*\n//*-------------------------------------------------\n//SPLT     PROC\n//*-------------------------------------------------\n//*\n//*  Split long JCL lines into separate records\n//*\n//*        1 = show basic display statements\n//*        2 = show basic display statements with ruler\n//*        3 = show working field values\n//*        |\n//*  PARM='X         '\n//*\n//*-------------------------------------------------\n//S010     EXEC PGM=JCLSPLT,\n//             COND=(0,NE),\n//             PARM='&TST.         /'\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//PARM01   DD  DISP=SHR,DSN=userid.ISPF.FILE488(JCLSPLT1)\n//JCLIN    DD  DISP=SHR,DSN=userid.ISPF.FILE488(&MEMBR)       *input\n//JCLOUT   DD  DSN=&&JNEAT,                                   *output\n//             DISP=(NEW,PASS,DELETE),\n//             UNIT=SYSDA,SPACE=(TRK,(2,6),RLSE),\n//             RECFM=FB,LRECL=80,BLKSIZE=16000\n//*-------------------------------------------------\n//*  standard iebgener\n//*-------------------------------------------------\n//S020     EXEC PGM=IEBGENER\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DUMMY\n//SYSUT1   DD  DSN=&&JNEAT,DISP=(OLD,DELETE)                  *input\n//SYSUT2   DD  DISP=SHR,DSN=userid.ISPF.FILE488(&MEMBR)       *output\n//*--------------------------------------\n//         PEND\n//J010     EXEC SPLT,TST=N,MEMBR=XXXXXXXX\n//*-------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JESJOB2": {"ttr": 8458, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00)\\x01\\x19\\x07/\\x01\\x192?\\x11\\x07\\x00_\\x00^\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T11:07:29", "lines": 95, "newlines": 94, "modlines": 0, "user": "IANNONE"}, "text": "//JESJOB2  JOB (8231,'JESQ COMMANDS'),\n//             'JESQ COMMANDS',CLASS=x,\n//             MSGCLASS=x,\n//             MSGLEVEL=(1,1)\n//*----------------------------------------------------\n//*  THIS JOB PURGES JOBS FROM THE HELD OR OUTPUT QUEUE,\n//*    OR CHANGES JOB/OUTPUT ATTRIBUTES IN JES\n//*\n//*    PARM='### ###'\n//*          ---       DELAY WHEN GENERIC JOBS SPECIFIED\n//*              ---   DELAY WHEN SPECIFIC JOBS SPECIFIED\n//*\n//*  !! BE CAREFUL WHEN EDITING INPUT PARM01.\n//*----------------------------------------------------\n//S020     EXEC PGM=MIS0525B,\n//             COND=(0,NE),\n//*            RESTART=S020,\n//             REGION=5120K,\n//             PARM='010 005/'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//INTRDR   DD  SYSOUT=(A,INTRDR)\n//PARM01   DD  *\n*------------------------------------------------------\n*   COMMANDS ISSUED BY MIS0525B\n*\n*   JOB NAME/STARTED TASK NAME/TSO USER NAME\n*   MAY INCLUDE GENERICS: *=ALL CHARACTERS, ?=SPECIFIC LOCATIONS\n*   -OR- 'WAIT ###' TO DELAY SUBMITTING NEXT COMMAND\n*   \u00a6\n*   \u00a6      PURGE: ENTER A CLASS HERE TO PURGE, FROM EITHER THE HELD\n*   \u00a6      OR OUTPUT QUEUE, ANYTHING IN THAT CLASS\n*   \u00a6      \u00a6\n*   \u00a6      \u00a6  DAYS OLD: 01=YESTERDAY OR OLDER  00=TODAY\n*   \u00a6      \u00a6  \u00a6   HOURS OLD, 00=NONE (IGNORED IF DAYS SPECIFIED)\n*   \u00a6      \u00a6  \u00a6   \u00a6   O=LOOK IN OUTPUT QUEUE ONLY\n*   \u00a6      \u00a6  \u00a6   \u00a6   H=LOOK IN HELD QUEUE ONLY\n*   \u00a6      \u00a6  \u00a6   \u00a6   \u00a6\n*   \u00a6      \u00a6  \u00a6   \u00a6   \u00a6  O=SEND TO OUTPUT QUEUE\n*   \u00a6      \u00a6  \u00a6   \u00a6   \u00a6  H=SEND BACK TO HOLD QUEUE\n*   \u00a6      \u00a6  \u00a6   \u00a6   \u00a6  \u00a6  NEW CLASS\n*   \u00a6      \u00a6  \u00a6   \u00a6   \u00a6  \u00a6  \u00a6 WRITER   NEW FCB       NEW WRITER\n*   \u00a6      \u00a6  \u00a6   \u00a6   \u00a6  \u00a6  \u00a6 \u00a6        \u00a6    NEW PRTY \u00a6     NEW DEST\n*   \u00a6      \u00a6  \u00a6   \u00a6   \u00a6  \u00a6  \u00a6 \u00a6        \u00a6    \u00a6 0-255  \u00a6     \u00a6\n*--------  -  --  --  -  -  - -------- ---- --- -------- --------\n PCAS02D          36  H  O  S\n PCAS01D          36  H  O  S\n POPS00D          36  H  O  S\n POPS01D          36  H  O  S\n PBAC*        01  00  H  O  S\n PACRRLD          36  H  O  S\n PDIE*            24  H  O  S\n PAPS02D      02  00  H  O  S\n PAPS04D      02  00  H  O  S\n POPS06D          36  H  O  S\n PCAS90R          24  H  O  S\n PCAS95R          24  H  O  S\n PINS*        02  00  H  O  S\n PAPS07D      02  00  H  O  S\n PACRSAR   X  00  00\n PFAX99R   X  00  00\n PFAX98R   X  00  00\n PFAX01R   Z  00  00\n IENAN*    D  00  00\n IENAN*    X\n CICST*    X\n TST*      X\n PMAI*     X\n PONC9*    X\n PAT*         02  00  O  O  0\n LIST*     X\n JESJOB*   X\n PSMS03D   X\n OIT*         01  00  H  O  S\n GQT*         01  00  H  O  S\n CCT*         01  00  H  O  S\n IFT*         02  00  O  O  0\n CIF*             08  H  O  0\n CIF*      0\n SCT*         02  00  O  O  0\n PCT*         02  00  O  O  0\n SCT*         01  00  H  O  S\n OAT*         01  00  H  O  S\n GLT*         01  00  H  O  S\n GQT*         02  00  O  O  0\n GST*         02  00  O  O  0\n PAT*         01  00  H  O  S\n PCT*         01  00  H  O  S\n PAT*      0  00  00\n IFT*      0  00  00\n/*\n//*---------------------------------------------------\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JMISB1D": {"ttr": 8461, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00V\\x01\\x19\\x07O\\x01\\x192/\\x13X\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2019-03-15T00:00:00", "modifydate": "2019-11-18T13:58:56", "lines": 15, "newlines": 15, "modlines": 0, "user": "IANNONE"}, "text": "//JMISB1D  JOB 8231,'UPDATE SYMBOLICS',\n//             CLASS=X,MSGCLASS=X,MSGLEVEL=(0,0)\n//*--------------------------------------------------\n//*   update symbolics in specified job JCL\n//*--------------------------------------------------\n//J001     EXEC MIS10,JOBJCL='PMISB1D',JOBLOC='SYSP.JCLLIB',OFFX=N\n//*--------------------------------------------------\n//*   submit JCL from same (now updated) job JCL\n//*--------------------------------------------------\n//J002     EXEC PGM=IEBGENER,COND=(0,NE)\n//SYSPRINT DD  SYSOUT=X\n//SYSUT1   DD  DSN=SYSP.JCLLIB(PMISB1D),DISP=SHR\n//SYSUT2   DD  SYSOUT=(A,INTRDR)\n//SYSIN    DD  DUMMY\n//*--------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JMIS20D": {"ttr": 8463, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x16\\x01\\x19\\x07O\\x01\\x192/\\x13Y\\x00\\x07\\x00\\x07\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2019-03-15T00:00:00", "modifydate": "2019-11-18T13:59:16", "lines": 7, "newlines": 7, "modlines": 0, "user": "IANNONE"}, "text": "//JMIS20D  JOB 8231,'UPDATE SYMBOLICS',\n//             CLASS=X,MSGCLASS=X,MSGLEVEL=(0,0)\n//*--------------------------------------------------\n//*   update symbolics in specified job JCL\n//*--------------------------------------------------\n//J001     EXEC MIS10,JOBJCL='PMIS20D',JOBLOC='SYSP.JCLLIB',OFFX=N\n//*--------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "J0049B": {"ttr": 8465, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00Y\\x01\\x180_\\x01\\x192O\\x08A\\x00\\x1e\\x00%\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "2018-11-01T00:00:00", "modifydate": "2019-11-20T08:41:59", "lines": 30, "newlines": 37, "modlines": 0, "user": "IANNONE"}, "text": "//useridJ  JOB (5000,'add picture clauses'),\n//             'JCI49B  JCI0049B',CLASS=x,\n//             MSGCLASS=x,\n//*            RESTART=J010.S010,\n//*            TYPRUN=SCAN,\n//             MSGLEVEL=(1,1)\n//*-------------------------------------------------\n//*  Update symbolics at bottom\n//*\n//*  Loop through a program/copybook and total the picture clauses\n//*-------------------------------------------------\n//J0049B   PROC STRTLN='00000',\n//             ENDLN='00000',      change these\n//             SFX='',             below\n//             PRG='XXXXXXXB'\n//*-------------------------------------------------\n//S010     EXEC PGM=JCI0049B,\n//             REGION=5120K,\n//             COND=(0,NE),\n//             PARM='&STRTLN&ENDLN/'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//INPROG   DD  DISP=SHR,DSN=userid.ISPF.FILE488&SFX(&PRG)\n//*-------------------------------------------------\n//         PEND\n//J010     EXEC J0049B,STRTLN='00000',ENDLN='00000',SFX='',\n//             PRG='program'\n//*-------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LIT": {"ttr": 8467, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x07\\x01\\x19\\t\\x1f\\x01\\x19\\x15\\x0f\\x11I\\x00k\\x00f\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2019-04-01T00:00:00", "modifydate": "2019-05-30T11:49:07", "lines": 107, "newlines": 102, "modlines": 0, "user": "IANNONE"}, "text": "  ISREDIT MACRO\n  CONTROL ASIS\n/********************************************************************/\n/*                                                                  */\n/*  WRITTEN BY TOM BARTHOLD (TBARTHOLD@COMCAST.NET)                 */\n/*  CBT tape #735   originally named  LIT                           */\n/*                                                                  */\n/*    THIS MACRO COMPUTES THE SIZE OF A LITERAL ON THE LINE WHERE   */\n/*    THE CURSOR IS                                                 */\n/*                                                                  */\n/*    THIS IS EASIER IF YOU SET IT UP AS A PFKEY FUNCTION           */\n/*                                                                  */\n/*    TYPE THE COMMAND 'LIT' IN THE COMMAND LINE AND PLACE THE      */\n/*    CURSOR ON A LINE THAT CONTAINS A LITERAL (ENCLOSED WITH       */\n/*    SINGLE QUOTES).  PRESS ENTER.                                 */\n/*                                                                  */\n/*    THIS MACRO WILL DISPLAY THE LENGTH OF THE LITERAL.            */\n/*                                                                  */\n/********************************************************************/\n/*                                                                  */\n/*  updated version on CBT #488 by Jim Iannone                      */\n/*    show length of two literals if two found on line              */\n/*    also handle \"and\" sign if found within literal                */\n/*                                                                  */\n/********************************************************************/\n  ISREDIT (OLD) = LINE .ZCSR\n  ISREDIT (NUM) = LINENUM .ZCSR\n/*     WRITE 'Num        = &NUM'             */\n  IF &NUM < 2 THEN +\n       GOTO SHOWU\n\n  ISREDIT F && .ZCSR .ZCSR 7 72\n  IF &LASTCC = 0 THEN DO\n       SET &ZEDSMSG = &STR(character '&&' found)\n       SET &ZEDLMSG = &STR(character '&&' in literals causes issues +\n          with the LIT macro)\n       ISPEXEC SETMSG MSG(ISRZ001)\n       EXIT CODE(0)\n  END\n\n  SET &CUR=1\n  SET &CHR=X\n  DO WHILE &STR(&CHR) NE &STR(')\n     SET &CHR = &SUBSTR(&CUR:&CUR,&STR(&OLD))\n     SET &CUR = &CUR + 1\n     IF &CUR > 72 THEN +\n        DO\n            GOTO ENDIT\n        END\n  END\n  SET &BEG = &CUR\n/*     WRITE 'BEG pos 1  = &BEG.'            */\n  SET &CUR = &CUR + 1\n  DO UNTIL &STR(&CHR) = &STR(')\n     SET &CHR = &SUBSTR(&CUR:&CUR,&STR(&OLD))\n     SET &CUR = &CUR + 1\n     IF &CUR > 72 THEN +\n        DO\n            GOTO ENDIT\n        END\n  END\n  SET &END = &CUR - 1\n/*     WRITE 'END pos 1  = &END.'            */\n  SET &LEN1 = &END - &BEG\n/*     WRITE 'LEN 1      = &LEN1.'           */\n\n  SET &LEN2 = 0\n  SET &CHR=X\n  DO WHILE &STR(&CHR) NE &STR(')\n     SET &CHR = &SUBSTR(&CUR:&CUR,&STR(&OLD))\n     SET &CUR = &CUR + 1\n     IF &CUR > 72 THEN +\n        DO\n          GOTO SHOWI\n        END\n  END\n  SET &BEG = &CUR\n/*     WRITE 'BEG pos 2  = &BEG.'            */\n  SET &CUR = &CUR + 1\n  DO UNTIL &STR(&CHR) = &STR(')\n     SET &CHR = &SUBSTR(&CUR:&CUR,&STR(&OLD))\n     SET &CUR = &CUR + 1\n     IF &CUR > 72 THEN +\n        DO\n          GOTO SHOWI\n        END\n  END\n  SET &END = &CUR - 1\n/*     WRITE 'END pos 2  = &END.'            */\n  SET &LEN2 = &END - &BEG\n/*     WRITE 'LEN 2      = &LEN2.'           */\n\nSHOWI: IF &LEN2 = 0 THEN +\n           SET &ZEDLMSG = &STR(Literal length = &LEN1.)\n       IF &LEN2 > 0 THEN +\n           SET &ZEDLMSG = &STR(Literal length = &LEN1 and &LEN2.)\n       ISPEXEC SETMSG MSG(ISRZ001)\n       EXIT CODE(0)\n\nENDIT: SET &ZEDLMSG = &STR(Literal not found)\n       ISPEXEC SETMSG MSG(ISRZ001)\n       EXIT CODE(0)\n\nSHOWU: SET &ZEDLMSG = &STR(Place cursor on line with ' ' literal)\n       ISPEXEC SETMSG MSG(ISRZ001)\n       EXIT CODE(0)\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MHPB6": {"ttr": 8707, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00V\\x01\\x19\\x07/\\x01\\x192?\\x11\\x07\\x00A\\x00@\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T11:07:56", "lines": 65, "newlines": 64, "modlines": 0, "user": "IANNONE"}, "text": "//*-------------------------------------------------\n//*   DELETE FILE\n//*-------------------------------------------------\n//S040     EXEC PGM=IEFBR14,\n//             REGION=5120K,\n//*            RESTART=J010.S010,\n//             COND=(0,NE)\n//SYSPRINT DD  SYSOUT=*\n//DASD1    DD  DSN=&prefix.JVHL.HL7.SPLIT,\n//             DISP=(MOD,DELETE,DELETE),\n//             SPACE=(TRK,(4,1),RLSE),\n//             DCB=(DSORG=PS),LRECL=10000,RECFM=FB\n//*-------------------------------------------------\n//*  SEPARATE HL7 OR 835 DATA STREAM INTO INDIVIDUAL SEGMENTS\n//*\n//*  VALUE PARM01 TO INCLUDE/EXCLUDE PARTICULAR SEGMENTS\n//*\n//*  PARM='ABX       '\n//*        |||\n//*        ||ALTERNATE DELIMITER (~,@ ETC)\n//*        |N=TRUNCATE RECORDS   IF SEG LENGTH > HL7SEGS LRECL\n//*        |Y=GENERATE CODE 0008 IF SEG LENGTH > HL7SEGS LRECL\n//*        Y=EXCLUDE DELIMITER AT END OF SEGMENTS (CR = '0D')\n//*\n//*-------------------------------------------------\n//S050     EXEC PGM=MIS0550B,\n//             REGION=60M,\n//*            RESTART=J010.S010,\n//             COND=(0,NE),\n//             PARM='&CRSKP&LERR.        /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=D\n//SYSPRINT DD  SYSOUT=*\n//SYSDBOUT DD  SYSOUT=*\n//SYSABOUT DD  SYSOUT=*\n//HL7FLOW  DD  DSN=&prefix.JVHL.HL7.SOURCE,     *INPUT\n//             DISP=SHR\n//HL7SEGS  DD  DSN=&prefix.JVHL.HL7.SPLIT,      *OUTPUT\n//             DISP=(NEW,CATLG,DELETE),\n//             SPACE=(TRK,(6000,200),RLSE),\n//             DCB=(DSORG=PS),LRECL=10000,RECFM=FB\n//PARM01   DD  *\n*\n* Include or exclude particular segments in program MIS0550B,\n*         which breaks an HL7 flow of data into separate records.\n*\n* Enter up to 20 segments\n*\n* I = include particular segments only\n* E = exclude particular segments\n* |\n* |   segment name:  example:  'PV1  '\n* |   |\n* - -----\n*\n*\n* Exclude this string whenever found in HL7FLOW\n* Enter up to 20 exclude strings\n* |\n* |                    Length of string (01-20)\n* |        1         2 |\n* ----+----0----+----0 --\n/*\n//*-------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MHP0775B": {"ttr": 8709, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x004\\x01\\x19\\x05\\x8f\\x01\\x192/\\x12\\x19\\x04\\x11\\x03\\xe7\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "2019-02-27T00:00:00", "modifydate": "2019-11-18T12:19:34", "lines": 1041, "newlines": 999, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  MHP0775B: purge records from standard files'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MHP0775B.\n      **********************************************************CX003B\n      *@@@ C3 purge records with standard file lengths by date\n      ****************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * Date written: 12/09/2011\n      * Author      : Jim Iannone\n      *               For files with lengths 80, 81, 132, 133,\n      *               100, 200, 300, 500:  purge records if older\n      *               than date determined by number of day setting\n      *               in PARM01\n      ****************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n           C01 IS PAGE-TOP.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT FIL80I               ASSIGN TO FIL80I\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT FIL80O               ASSIGN TO FIL80O\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT FIL81I               ASSIGN TO FIL81I\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT FIL81O               ASSIGN TO FIL81O\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT FIL132I              ASSIGN TO FIL132I\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT FIL132O              ASSIGN TO FIL132O\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT FIL133I              ASSIGN TO FIL133I\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT FIL133O              ASSIGN TO FIL133O\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT FIL100I              ASSIGN TO FIL100I\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT FIL100O              ASSIGN TO FIL100O\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT FIL200I              ASSIGN TO FIL200I\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT FIL200O              ASSIGN TO FIL200O\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT FIL300I              ASSIGN TO FIL300I\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT FIL300O              ASSIGN TO FIL300O\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT FIL500I              ASSIGN TO FIL500I\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT FIL500O              ASSIGN TO FIL500O\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  FIL80I\n           RECORDING MODE F.\n       01  FIL80I-RECORD.\n           05  FIL80I-RCD              PIC  X(80).\n\n       FD  FIL80O\n           RECORDING MODE F.\n       01  FIL80O-RECORD.\n           05  FIL80O-RCD              PIC  X(80).\n\n       FD  FIL81I\n           RECORDING MODE F.\n       01  FIL81I-RECORD.\n           05  FIL81I-RCD              PIC  X(81).\n\n       FD  FIL81O\n           RECORDING MODE F.\n       01  FIL81O-RECORD.\n           05  FIL81O-RCD              PIC  X(81).\n\n       FD  FIL132I\n           RECORDING MODE F.\n       01  FIL132I-RECORD.\n           05  FIL132I-RCD             PIC  X(132).\n\n       FD  FIL132O\n           RECORDING MODE F.\n       01  FIL132O-RECORD.\n           05  FIL132O-RCD             PIC  X(132).\n\n       FD  FIL133I\n           RECORDING MODE F.\n       01  FIL133I-RECORD.\n           05  FIL133I-RCD             PIC  X(133).\n\n       FD  FIL133O\n           RECORDING MODE F.\n       01  FIL133O-RECORD.\n           05  FIL133O-RCD             PIC  X(133).\n\n       FD  FIL100I\n           RECORDING MODE F.\n       01  FIL100I-RECORD.\n           05  FIL100I-RCD             PIC  X(100).\n\n       FD  FIL100O\n           RECORDING MODE F.\n       01  FIL100O-RECORD.\n           05  FIL100O-RCD             PIC  X(100).\n\n       FD  FIL200I\n           RECORDING MODE F.\n       01  FIL200I-RECORD.\n           05  FIL200I-RCD             PIC  X(200).\n\n       FD  FIL200O\n           RECORDING MODE F.\n       01  FIL200O-RECORD.\n           05  FIL200O-RCD             PIC  X(200).\n\n       FD  FIL300I\n           RECORDING MODE F.\n       01  FIL300I-RECORD.\n           05  FIL300I-RCD             PIC  X(300).\n\n       FD  FIL300O\n           RECORDING MODE F.\n       01  FIL300O-RECORD.\n           05  FIL300O-RCD             PIC  X(300).\n\n       FD  FIL500I\n           RECORDING MODE F.\n       01  FIL500I-RECORD.\n           05  FIL500I-RCD             PIC  X(500).\n\n       FD  FIL500O\n           RECORDING MODE F.\n       01  FIL500O-RECORD.\n           05  FIL500O-RCD             PIC  X(500).\n\n       FD  PARM01\n           RECORDING MODE F.\n       01  PARM01-RECORD.\n           05  PARM01-DOCU             PIC  X.\n           05  FILLER                  PIC  X.\n           05  PARM01-FILE-LEN         PIC  X(05).\n           05  FILLER                  PIC  X.\n           05  PARM01-DATE-POS         PIC  X(05).\n           05  FILLER                  PIC  X.\n           05  PARM01-DATE-FORMAT      PIC  X(06).\n           05  FILLER                  PIC  X.\n           05  PARM01-PURGE-DAYS       PIC  X(05).\n           05  FILLER                  PIC  X(46).\n           05  FILLER                  PIC  X(08).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage MHP0775B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-PARM01-MAX           PIC  9(05)    VALUE ZERO.\n           05  WS-END-POS              PIC  9(05)    VALUE ZERO.\n           05  WS-TALLY                PIC S9(04)    VALUE ZERO COMP.\n           05  WS-LS-DATA              PIC  X(10)    VALUE SPACE.\n           05  FILLER REDEFINES WS-LS-DATA.\n               10  WS-LS-CYMD          PIC  X(08).\n               10  WS-LS-EXTRA         PIC  XX.\n           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.\n           05  WS-2-CYMD               PIC  X(08)    VALUE SPACE.\n           05  WS-FILE-CYMD            PIC  9(08)    VALUE ZERO.\n           05  WS-PARM-CYMD            PIC  9(08)    VALUE ZERO.\n           05  WS-PARM-DAYS            PIC  X(05)    VALUE SPACE.\n           05  WS-OLDEST-CYMD          PIC  9(08)    VALUE ZERO.\n           05  WS-CALL-STV0270B        PIC  X(08)    VALUE 'STV0270B'.\n           05  WS-CALL-STV0400B        PIC  X(08)    VALUE 'STV0400B'.\n           05  WS-CALL-STV0460B        PIC  X(08)    VALUE 'STV0460B'.\n           05  WS-HOLD-STRING          PIC  X(10)    VALUE SPACE.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(04)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(04)    VALUE ZERO.\n\n       01  WS-TABLES.\n           05  WS-PARM01-TABLE         PIC  X(352)   VALUE SPACE.\n           05  WS-PARM01-ITEM REDEFINES WS-PARM01-TABLE\n                                       OCCURS 08 TIMES.\n               10  WS-FLEN             PIC  9(05).\n               10  WS-POS              PIC  9(05).\n               10  WS-FMT              PIC  X(06).\n               10  WS-DAYS             PIC  9(05).\n               10  WS-SLEN             PIC  99.\n               10  WS-READ-CNT         PIC  9(07).\n               10  WS-DEL-CNT          PIC  9(07).\n               10  WS-WRITE-CNT        PIC  9(07).\n\n       01  WS-SWITCHES.\n           05  WS-END-FIL80I-SW        PIC  X        VALUE 'N'.\n               88  END-OF-FIL80I                     VALUE 'Y'.\n           05  WS-END-FIL81I-SW        PIC  X        VALUE 'N'.\n               88  END-OF-FIL81I                     VALUE 'Y'.\n           05  WS-END-FIL132I-SW       PIC  X        VALUE 'N'.\n               88  END-OF-FIL132I                    VALUE 'Y'.\n           05  WS-END-FIL133I-SW       PIC  X        VALUE 'N'.\n               88  END-OF-FIL133I                    VALUE 'Y'.\n           05  WS-END-FIL100I-SW       PIC  X        VALUE 'N'.\n               88  END-OF-FIL100I                    VALUE 'Y'.\n           05  WS-END-FIL200I-SW       PIC  X        VALUE 'N'.\n               88  END-OF-FIL200I                    VALUE 'Y'.\n           05  WS-END-FIL300I-SW       PIC  X        VALUE 'N'.\n               88  END-OF-FIL300I                    VALUE 'Y'.\n           05  WS-END-FIL500I-SW       PIC  X        VALUE 'N'.\n               88  END-OF-FIL500I                    VALUE 'Y'.\n\n      *    YEAR 2000 COMPATIBLE DATE ROUTINE\n       01  WS-STV0400B-FIELDS.\n           05  STV0400B-DATA           PIC  X(10)    VALUE SPACE.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X6        PIC  X(06).\n               10  STV0400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X8        PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAYS       PIC  X(05).\n               10  FILLER              PIC  X(05).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAY        PIC  X(09).\n               10  STV0400B-DAY-NBR    PIC  X.\n           05  STV0400B-DATA2          PIC  X(10)    VALUE SPACE.\n           05  STV0400B-IN             PIC  X(06)    VALUE SPACE.\n           05  STV0400B-OUT            PIC  X(06)    VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MHP0775B END  '.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELD.\n           05  LS-LENGTH               PIC S9(04)    COMP.\n           05  LS-DATA                 PIC  X(10).\n           05  FILLER REDEFINES LS-DATA.\n               10  LS-CYMD             PIC  X(08).\n               10  LS-EXTRA            PIC  XX.\n\n      /\n\n       PROCEDURE DIVISION USING LS-FIELD.\n\n       0100-PROGRAM-ENTRY.\n\n           PERFORM 0200-OPEN-FILES.\n           DISPLAY '    '.\n           DISPLAY '**** MHP0775B purge file records'.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0500-GET-LINKAGE.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0600-GET-PARM-CYMD.\n\n           PERFORM VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > 8\n               MOVE ZERO                      TO WS-FLEN(WS-SUB1)\n               MOVE ZERO                      TO WS-POS(WS-SUB1)\n               MOVE SPACE                     TO WS-FMT(WS-SUB1)\n               MOVE ZERO                      TO WS-DAYS(WS-SUB1)\n               MOVE ZERO                      TO WS-SLEN(WS-SUB1)\n               MOVE ZERO                      TO WS-READ-CNT(WS-SUB1)\n               MOVE ZERO                      TO WS-DEL-CNT(WS-SUB1)\n               MOVE ZERO                      TO WS-WRITE-CNT(WS-SUB1)\n           END-PERFORM.\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                      TO WS-SUB1\n               PERFORM 0400-LOAD-PARM01 THRU\n                       0400-LOAD-PARM01-EXIT.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0700-PROCESS-FILES.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** MHP0775B cond code ' WS-RETURN-CODE\n                       ' set by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** MHP0775B EOJ encountered '.\n           DISPLAY '    '.\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MHP0775B open error on PARM01'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE PARM01.\n\n      *---------------------------------------\n      *    LOAD PARM01\n      *---------------------------------------\n       0400-LOAD-PARM01.\n           READ PARM01.\n           IF WS-STAT = 10\n               MOVE WS-SUB1                   TO WS-PARM01-MAX\n               GO TO 0400-LOAD-PARM01-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** MHP0775B read error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0400                     TO WS-RETURN-CODE\n               GO TO 0400-LOAD-PARM01-EXIT.\n\n           IF PARM01-DOCU = '*'\n               GO TO 0400-LOAD-PARM01.\n           IF WS-SUB1 < 8\n               ADD 1                          TO WS-SUB1\n               PERFORM 0400-PARM01-FIELDS.\n\n           GO TO 0400-LOAD-PARM01.\n\n       0400-LOAD-PARM01-EXIT. EXIT.\n\n       0400-PARM01-FIELDS.\n           IF PARM01-FILE-LEN NUMERIC\n               IF PARM01-FILE-LEN = '00080' OR '00081' OR '00132'\n                                 OR '00133' OR '00100' OR '00200'\n                                 OR '00300' OR '00500'\n                   MOVE PARM01-FILE-LEN       TO WS-FLEN(WS-SUB1)\n               ELSE\n                   DISPLAY 'MHP0775B parm01 file len not expected'\n                   MOVE +0400                 TO WS-RETURN-CODE\n           ELSE\n               DISPLAY 'MHP0775B parm01 file len not numeric'\n               MOVE +0400                     TO WS-RETURN-CODE.\n\n           IF PARM01-DATE-POS NUMERIC\n               IF PARM01-DATE-POS = '00000'\n                   DISPLAY 'MHP0775B parm01 date position = zero'\n                   MOVE +0400                 TO WS-RETURN-CODE\n               ELSE\n                   MOVE PARM01-DATE-POS       TO WS-POS(WS-SUB1)\n           ELSE\n               DISPLAY 'MHP0775B parm01 date pos not numeric'\n               MOVE +0400                     TO WS-RETURN-CODE.\n\n           MOVE PARM01-DATE-FORMAT            TO WS-FMT(WS-SUB1).\n           IF PARM01-DATE-FORMAT = 'MDY   '\n               MOVE 6                         TO WS-SLEN(WS-SUB1)\n           ELSE\n           IF PARM01-DATE-FORMAT = 'CYMD  ' OR 'M/D/Y ' OR 'MDCY  '\n               MOVE 8                         TO WS-SLEN(WS-SUB1)\n           ELSE\n           IF PARM01-DATE-FORMAT = 'M/D/CY'\n               MOVE 10                        TO WS-SLEN(WS-SUB1)\n           ELSE\n               DISPLAY 'MHP0775B unable to determine date string '\n               DISPLAY '         length for given date format'\n               MOVE +0400                     TO WS-RETURN-CODE.\n\n           IF PARM01-PURGE-DAYS NUMERIC\n               MOVE PARM01-PURGE-DAYS         TO WS-DAYS(WS-SUB1)\n           ELSE\n               DISPLAY 'MHP0775B parm01 days not numeric'\n               MOVE +0400                     TO WS-RETURN-CODE.\n\n           MOVE ZERO                          TO WS-END-POS.\n           IF WS-RETURN-CODE = ZERO\n               COMPUTE WS-END-POS = WS-POS(WS-SUB1) + WS-SLEN(WS-SUB1)\n               IF WS-END-POS > WS-FLEN(WS-SUB1)\n                   DISPLAY '**** Date position > record length'\n                   MOVE +0400                 TO WS-RETURN-CODE.\n\n       0500-GET-LINKAGE.\n           IF LS-LENGTH = ZERO\n               DISPLAY '**** Parm length is zero '\n               MOVE +0500                     TO WS-RETURN-CODE\n           ELSE\n           IF LS-LENGTH > LENGTH OF WS-LS-DATA\n               DISPLAY '**** Parm length is excessive '\n               MOVE +0500                     TO WS-RETURN-CODE\n           ELSE\n               MOVE LS-DATA(1: LS-LENGTH)     TO WS-LS-DATA.\n\n           MOVE WS-LS-CYMD                    TO WS-2-CYMD.\n\n       0600-GET-PARM-CYMD.\n      *---------------------------------------\n      *    GET CURRENT DATE\n      *---------------------------------------\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-1X8                  TO WS-1-CYMD.\n      *---------------------------------------\n      *    GET PARM DATE\n      *---------------------------------------\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           IF WS-2-CYMD = '00000000'\n               MOVE SPACE                     TO WS-2-CYMD\n           ELSE\n           IF WS-2-CYMD(3: 1) = '/'\n               AND WS-2-CYMD(6: 1) = '/'\n               MOVE WS-2-CYMD                 TO STV0400B-1X8\n               MOVE 'M/D/Y '                  TO STV0400B-IN\n               MOVE 'CYMD  '                  TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               MOVE STV0400B-1X8              TO WS-2-CYMD\n           ELSE\n           IF WS-2-CYMD(1: 3) = 'CMD' OR 'CMF'\n               MOVE WS-2-CYMD                 TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               MOVE STV0400B-1X8              TO WS-2-CYMD.\n\n           IF WS-2-CYMD NOT NUMERIC\n               MOVE WS-1-CYMD                 TO WS-2-CYMD.\n\n           MOVE WS-2-CYMD                     TO STV0400B-1X8.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'CYMD  '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           IF STV0400B-1X6 = 'ERROR'\n               DISPLAY '**** MHP0775B parm date is not valid'\n               DISPLAY '**** Date = ' WS-2-CYMD\n               MOVE +0600                     TO WS-RETURN-CODE.\n\n      *---------------------------------------\n      *  loop through the parm table and process\n      *  files listed there (identified by file length).\n      *  of course the jcl should match all parm01 entries.\n      *---------------------------------------\n       0700-PROCESS-FILES.\n           PERFORM 0800-FILE-LOOP\n               VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > WS-PARM01-MAX.\n\n       0800-FILE-LOOP.\n           MOVE 99999999                      TO WS-OLDEST-CYMD.\n           PERFORM 0900-GET-PARM-DAYS.\n           IF WS-FLEN(WS-SUB1) < 100\n               DISPLAY '**** Purge file FIL' WS-FLEN(WS-SUB1)(4: 2)\n                       'I rcds if <  ' WS-PARM-CYMD\n                       '  :  ' WS-PARM-DAYS ' days'\n           ELSE\n           IF WS-FLEN(WS-SUB1) < 1000\n               DISPLAY '**** Purge file FIL' WS-FLEN(WS-SUB1)(3: 3)\n                       'I rcds if < ' WS-PARM-CYMD\n                       '  :  ' WS-PARM-DAYS ' days'\n           ELSE\n           IF WS-FLEN(WS-SUB1) < 10000\n               DISPLAY '**** Purge file FIL' WS-FLEN(WS-SUB1)(2: 4)\n                       'I rcds if < ' WS-PARM-CYMD\n                       ' :  ' WS-PARM-DAYS ' days'\n           ELSE\n               DISPLAY '**** Purge file ' WS-FLEN(WS-SUB1)\n                       ' rcds if < ' WS-PARM-CYMD\n                       ' : ' WS-PARM-DAYS ' days'.\n\n           IF WS-FLEN(WS-SUB1) = 80\n               PERFORM 0800-FIL80-LOOP\n           ELSE\n           IF WS-FLEN(WS-SUB1) = 81\n               PERFORM 0800-FIL81-LOOP\n           ELSE\n           IF WS-FLEN(WS-SUB1) = 132\n               PERFORM 0800-FIL132-LOOP\n           ELSE\n           IF WS-FLEN(WS-SUB1) = 133\n               PERFORM 0800-FIL133-LOOP\n           ELSE\n           IF WS-FLEN(WS-SUB1) = 100\n               PERFORM 0800-FIL100-LOOP\n           ELSE\n           IF WS-FLEN(WS-SUB1) = 200\n               PERFORM 0800-FIL200-LOOP\n           ELSE\n           IF WS-FLEN(WS-SUB1) = 300\n               PERFORM 0800-FIL300-LOOP\n           ELSE\n           IF WS-FLEN(WS-SUB1) = 500\n               PERFORM 0800-FIL500-LOOP.\n\n      *---------------------------------------\n\n       0800-FIL80-LOOP.\n           OPEN INPUT  FIL80I.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MHP0775B open error on FIL80I'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n           OPEN OUTPUT FIL80O.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MHP0775B open error on FIL80O'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0800-READ-FIL80I\n                   UNTIL END-OF-FIL80I.\n           CLOSE FIL80O.\n           CLOSE FIL80I.\n           DISPLAY '**** FIL80I rcds read    ' WS-READ-CNT(WS-SUB1).\n           IF WS-DEL-CNT(WS-SUB1) > ZERO\n               DISPLAY '**** FIL80I purged       ' WS-DEL-CNT(WS-SUB1).\n           DISPLAY '**** FIL80I written      ' WS-WRITE-CNT(WS-SUB1).\n           IF WS-DEL-CNT(WS-SUB1) = ZERO\n               PERFORM 0900-SHOW-OLDEST.\n\n       0800-READ-FIL80I.\n           READ FIL80I.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-CNT(WS-SUB1)\n               PERFORM 0800-FIL80-SELECT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-FIL80I-SW\n           ELSE\n               DISPLAY '**** MHP0775B read error on FIL80I '\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n       0800-FIL80-SELECT.\n           MOVE FIL80I-RCD(WS-POS(WS-SUB1): WS-SLEN(WS-SUB1))\n                                              TO WS-HOLD-STRING.\n           PERFORM 0900-CONVERT-FILE-DATE.\n           IF WS-FILE-CYMD < WS-PARM-CYMD\n               ADD 1                          TO WS-DEL-CNT(WS-SUB1)\n           ELSE\n               MOVE FIL80I-RCD                TO FIL80O-RCD\n               PERFORM 0800-WRITE-FIL80O.\n\n       0800-WRITE-FIL80O.\n           WRITE FIL80O-RECORD.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-WRITE-CNT(WS-SUB1)\n           ELSE\n               DISPLAY '**** MHP0775B write error on FIL80O'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n      *---------------------------------------\n\n       0800-FIL81-LOOP.\n           OPEN INPUT  FIL81I.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MHP0775B open error on FIL81I'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n           OPEN OUTPUT FIL81O.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MHP0775B open error on FIL81O'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0800-READ-FIL81I\n                   UNTIL END-OF-FIL81I.\n           CLOSE FIL81O.\n           CLOSE FIL81I.\n           DISPLAY '**** FIL81I rcds read    ' WS-READ-CNT(WS-SUB1).\n           IF WS-DEL-CNT(WS-SUB1) > ZERO\n               DISPLAY '**** FIL81I purged       ' WS-DEL-CNT(WS-SUB1).\n           DISPLAY '**** FIL81I written      ' WS-WRITE-CNT(WS-SUB1).\n           IF WS-DEL-CNT(WS-SUB1) = ZERO\n               PERFORM 0900-SHOW-OLDEST.\n\n       0800-READ-FIL81I.\n           READ FIL81I.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-CNT(WS-SUB1)\n               PERFORM 0800-FIL81-SELECT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-FIL81I-SW\n           ELSE\n               DISPLAY '**** MHP0775B read error on FIL81I '\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n       0800-FIL81-SELECT.\n           MOVE FIL81I-RCD(WS-POS(WS-SUB1): WS-SLEN(WS-SUB1))\n                                              TO WS-HOLD-STRING.\n           PERFORM 0900-CONVERT-FILE-DATE.\n           IF WS-FILE-CYMD < WS-PARM-CYMD\n               ADD 1                          TO WS-DEL-CNT(WS-SUB1)\n           ELSE\n               MOVE FIL81I-RCD                TO FIL81O-RCD\n               PERFORM 0800-WRITE-FIL81O.\n\n       0800-WRITE-FIL81O.\n           WRITE FIL81O-RECORD.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-WRITE-CNT(WS-SUB1)\n           ELSE\n               DISPLAY '**** MHP0775B write error on FIL81O'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n      *---------------------------------------\n\n       0800-FIL132-LOOP.\n           OPEN INPUT  FIL132I.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MHP0775B open error on FIL132I'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n           OPEN OUTPUT FIL132O.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MHP0775B open error on FIL132O'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0800-READ-FIL132I\n                   UNTIL END-OF-FIL132I.\n           CLOSE FIL132O.\n           CLOSE FIL132I.\n           DISPLAY '**** FIL132I rcds read   ' WS-READ-CNT(WS-SUB1).\n           IF WS-DEL-CNT(WS-SUB1) > ZERO\n               DISPLAY '**** FIL132I purged      ' WS-DEL-CNT(WS-SUB1).\n           DISPLAY '**** FIL132I written     ' WS-WRITE-CNT(WS-SUB1).\n           IF WS-DEL-CNT(WS-SUB1) = ZERO\n               PERFORM 0900-SHOW-OLDEST.\n\n       0800-READ-FIL132I.\n           READ FIL132I.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-CNT(WS-SUB1)\n               PERFORM 0800-FIL132-SELECT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-FIL132I-SW\n           ELSE\n               DISPLAY '**** MHP0775B read error on FIL132I '\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n       0800-FIL132-SELECT.\n           MOVE FIL132I-RCD(WS-POS(WS-SUB1): WS-SLEN(WS-SUB1))\n                                              TO WS-HOLD-STRING.\n           PERFORM 0900-CONVERT-FILE-DATE.\n           IF WS-FILE-CYMD < WS-PARM-CYMD\n               ADD 1                          TO WS-DEL-CNT(WS-SUB1)\n           ELSE\n               MOVE FIL132I-RCD               TO FIL132O-RCD\n               PERFORM 0800-WRITE-FIL132O.\n\n       0800-WRITE-FIL132O.\n           WRITE FIL132O-RECORD.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-WRITE-CNT(WS-SUB1)\n           ELSE\n               DISPLAY '**** MHP0775B write error on FIL132O'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n      *---------------------------------------\n\n       0800-FIL133-LOOP.\n           OPEN INPUT  FIL133I.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MHP0775B open error on FIL133I'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n           OPEN OUTPUT FIL133O.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MHP0775B open error on FIL133O'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0800-READ-FIL133I\n                   UNTIL END-OF-FIL133I.\n           CLOSE FIL133O.\n           CLOSE FIL133I.\n           DISPLAY '**** FIL133I rcds read   ' WS-READ-CNT(WS-SUB1).\n           IF WS-DEL-CNT(WS-SUB1) > ZERO\n               DISPLAY '**** FIL133I purged      ' WS-DEL-CNT(WS-SUB1).\n           DISPLAY '**** FIL133I written     ' WS-WRITE-CNT(WS-SUB1).\n           IF WS-DEL-CNT(WS-SUB1) = ZERO\n               PERFORM 0900-SHOW-OLDEST.\n\n       0800-READ-FIL133I.\n           READ FIL133I.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-CNT(WS-SUB1)\n               PERFORM 0800-FIL133-SELECT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-FIL133I-SW\n           ELSE\n               DISPLAY '**** MHP0775B read error on FIL133I '\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n       0800-FIL133-SELECT.\n           MOVE FIL133I-RCD(WS-POS(WS-SUB1): WS-SLEN(WS-SUB1))\n                                              TO WS-HOLD-STRING.\n           PERFORM 0900-CONVERT-FILE-DATE.\n           IF WS-FILE-CYMD < WS-PARM-CYMD\n               ADD 1                          TO WS-DEL-CNT(WS-SUB1)\n           ELSE\n               MOVE FIL133I-RCD               TO FIL133O-RCD\n               PERFORM 0800-WRITE-FIL133O.\n\n       0800-WRITE-FIL133O.\n           WRITE FIL133O-RECORD.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-WRITE-CNT(WS-SUB1)\n           ELSE\n               DISPLAY '**** MHP0775B write error on FIL133O'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n      *---------------------------------------\n\n       0800-FIL100-LOOP.\n           OPEN INPUT  FIL100I.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MHP0775B open error on FIL100I'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n           OPEN OUTPUT FIL100O.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MHP0775B open error on FIL100O'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0800-READ-FIL100I\n                   UNTIL END-OF-FIL100I.\n           CLOSE FIL100O.\n           CLOSE FIL100I.\n           DISPLAY '**** FIL100I rcds read   ' WS-READ-CNT(WS-SUB1).\n           IF WS-DEL-CNT(WS-SUB1) > ZERO\n               DISPLAY '**** FIL100I purged      ' WS-DEL-CNT(WS-SUB1).\n           DISPLAY '**** FIL100I written     ' WS-WRITE-CNT(WS-SUB1).\n           IF WS-DEL-CNT(WS-SUB1) = ZERO\n               PERFORM 0900-SHOW-OLDEST.\n\n       0800-READ-FIL100I.\n           READ FIL100I.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-CNT(WS-SUB1)\n               PERFORM 0800-FIL100-SELECT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-FIL100I-SW\n           ELSE\n               DISPLAY '**** MHP0775B read error on FIL100I '\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n       0800-FIL100-SELECT.\n           MOVE FIL100I-RCD(WS-POS(WS-SUB1): WS-SLEN(WS-SUB1))\n                                              TO WS-HOLD-STRING.\n           PERFORM 0900-CONVERT-FILE-DATE.\n           IF WS-FILE-CYMD < WS-PARM-CYMD\n               ADD 1                          TO WS-DEL-CNT(WS-SUB1)\n           ELSE\n               MOVE FIL100I-RCD               TO FIL100O-RCD\n               PERFORM 0800-WRITE-FIL100O.\n\n       0800-WRITE-FIL100O.\n           WRITE FIL100O-RECORD.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-WRITE-CNT(WS-SUB1)\n           ELSE\n               DISPLAY '**** MHP0775B write error on FIL100O'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n      *---------------------------------------\n\n       0800-FIL200-LOOP.\n           OPEN INPUT  FIL200I.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MHP0775B open error on FIL200I'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n           OPEN OUTPUT FIL200O.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MHP0775B open error on FIL200O'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0800-READ-FIL200I\n                   UNTIL END-OF-FIL200I.\n           CLOSE FIL200O.\n           CLOSE FIL200I.\n           DISPLAY '**** FIL200I rcds read   ' WS-READ-CNT(WS-SUB1).\n           IF WS-DEL-CNT(WS-SUB1) > ZERO\n               DISPLAY '**** FIL200I purged      ' WS-DEL-CNT(WS-SUB1).\n           DISPLAY '**** FIL200I written     ' WS-WRITE-CNT(WS-SUB1).\n           IF WS-DEL-CNT(WS-SUB1) = ZERO\n               PERFORM 0900-SHOW-OLDEST.\n\n       0800-READ-FIL200I.\n           READ FIL200I.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-CNT(WS-SUB1)\n               PERFORM 0800-FIL200-SELECT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-FIL200I-SW\n           ELSE\n               DISPLAY '**** MHP0775B read error on FIL200I '\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n       0800-FIL200-SELECT.\n           MOVE FIL200I-RCD(WS-POS(WS-SUB1): WS-SLEN(WS-SUB1))\n                                              TO WS-HOLD-STRING.\n           PERFORM 0900-CONVERT-FILE-DATE.\n           IF WS-FILE-CYMD < WS-PARM-CYMD\n               ADD 1                          TO WS-DEL-CNT(WS-SUB1)\n           ELSE\n               MOVE FIL200I-RCD               TO FIL200O-RCD\n               PERFORM 0800-WRITE-FIL200O.\n\n       0800-WRITE-FIL200O.\n           WRITE FIL200O-RECORD.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-WRITE-CNT(WS-SUB1)\n           ELSE\n               DISPLAY '**** MHP0775B write error on FIL200O'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n      *---------------------------------------\n\n       0800-FIL300-LOOP.\n           OPEN INPUT  FIL300I.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MHP0775B open error on FIL300I'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n           OPEN OUTPUT FIL300O.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MHP0775B open error on FIL300O'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0800-READ-FIL300I\n                   UNTIL END-OF-FIL300I.\n           CLOSE FIL300O.\n           CLOSE FIL300I.\n           DISPLAY '**** FIL300I rcds read   ' WS-READ-CNT(WS-SUB1).\n           IF WS-DEL-CNT(WS-SUB1) > ZERO\n               DISPLAY '**** FIL300I purged      ' WS-DEL-CNT(WS-SUB1).\n           DISPLAY '**** FIL300I written     ' WS-WRITE-CNT(WS-SUB1).\n           IF WS-DEL-CNT(WS-SUB1) = ZERO\n               PERFORM 0900-SHOW-OLDEST.\n\n       0800-READ-FIL300I.\n           READ FIL300I.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-CNT(WS-SUB1)\n               PERFORM 0800-FIL300-SELECT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-FIL300I-SW\n           ELSE\n               DISPLAY '**** MHP0775B read error on FIL300I '\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n       0800-FIL300-SELECT.\n           MOVE FIL300I-RCD(WS-POS(WS-SUB1): WS-SLEN(WS-SUB1))\n                                              TO WS-HOLD-STRING.\n           PERFORM 0900-CONVERT-FILE-DATE.\n           IF WS-FILE-CYMD < WS-PARM-CYMD\n               ADD 1                          TO WS-DEL-CNT(WS-SUB1)\n           ELSE\n               MOVE FIL300I-RCD               TO FIL300O-RCD\n               PERFORM 0800-WRITE-FIL300O.\n\n       0800-WRITE-FIL300O.\n           WRITE FIL300O-RECORD.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-WRITE-CNT(WS-SUB1)\n           ELSE\n               DISPLAY '**** MHP0775B write error on FIL300O'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n      *---------------------------------------\n\n       0800-FIL500-LOOP.\n           OPEN INPUT  FIL500I.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MHP0775B open error on FIL500I'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n           OPEN OUTPUT FIL500O.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MHP0775B open error on FIL500O'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0800-READ-FIL500I\n                   UNTIL END-OF-FIL500I.\n           CLOSE FIL500O.\n           CLOSE FIL500I.\n           DISPLAY '**** FIL500I rcds read   ' WS-READ-CNT(WS-SUB1).\n           IF WS-DEL-CNT(WS-SUB1) > ZERO\n               DISPLAY '**** FIL500I purged      ' WS-DEL-CNT(WS-SUB1).\n           DISPLAY '**** FIL500I written     ' WS-WRITE-CNT(WS-SUB1).\n           IF WS-DEL-CNT(WS-SUB1) = ZERO\n               PERFORM 0900-SHOW-OLDEST.\n\n       0800-READ-FIL500I.\n           READ FIL500I.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-CNT(WS-SUB1)\n               PERFORM 0800-FIL500-SELECT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-FIL500I-SW\n           ELSE\n               DISPLAY '**** MHP0775B read error on FIL500I '\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n       0800-FIL500-SELECT.\n           MOVE FIL500I-RCD(WS-POS(WS-SUB1): WS-SLEN(WS-SUB1))\n                                              TO WS-HOLD-STRING.\n           PERFORM 0900-CONVERT-FILE-DATE.\n           IF WS-FILE-CYMD < WS-PARM-CYMD\n               ADD 1                          TO WS-DEL-CNT(WS-SUB1)\n           ELSE\n               MOVE FIL500I-RCD               TO FIL500O-RCD\n               PERFORM 0800-WRITE-FIL500O.\n\n       0800-WRITE-FIL500O.\n           WRITE FIL500O-RECORD.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-WRITE-CNT(WS-SUB1)\n           ELSE\n               DISPLAY '**** MHP0775B write error on FIL500O'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n      *---------------------------------------\n\n       0900-GET-PARM-DAYS.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-2-CYMD                     TO STV0400B-1X8.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE '-00000'                      TO STV0400B-OUT.\n           MOVE WS-DAYS(WS-SUB1)              TO STV0400B-OUT(2: 5)\n                                                 WS-PARM-DAYS.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           IF STV0400B-1X6 = 'ERROR'\n               DISPLAY '**** MHP0775B error converting parm01 days'\n               MOVE +0900                     TO WS-RETURN-CODE\n           ELSE\n               MOVE STV0400B-1X8              TO WS-PARM-CYMD.\n\n       0900-CONVERT-FILE-DATE.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-HOLD-STRING                TO STV0400B-DATA.\n           MOVE WS-FMT(WS-SUB1)               TO STV0400B-IN.\n           MOVE 'CYMD  '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           IF STV0400B-1X6 = 'ERROR'\n               MOVE 99999999                  TO WS-FILE-CYMD\n           ELSE\n               MOVE STV0400B-1X8              TO WS-FILE-CYMD\n               IF WS-FILE-CYMD < WS-OLDEST-CYMD\n                   MOVE WS-FILE-CYMD          TO WS-OLDEST-CYMD.\n\n       0900-SHOW-OLDEST.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-OLDEST-CYMD                TO STV0400B-1X8.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'DAYS  '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           IF STV0400B-1X6 NOT = 'ERROR'\n               DISPLAY '**** Oldest date days             '\n                        WS-OLDEST-CYMD\n                       '  :  ' STV0400B-DAYS ' days'.\n\n      ************************************ END MHP0775B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MID97": {"ttr": 8970, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\t\\x01\\x19\\x07O\\x01\\x192?\\x11\\x08\\x00$\\x00#\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2019-03-15T00:00:00", "modifydate": "2019-11-19T11:08:09", "lines": 36, "newlines": 35, "modlines": 0, "user": "IANNONE"}, "text": "//*********************************************************************\n//*                                                                   *\n//*                          M I D 9 7                                *\n//*                                                                   *\n//*        THIS JOB RUNS AS THE FIRST JOB OF POST-INVISION            *\n//*        PROCESSING.                                                *\n//*                                                                   *\n//*********************************************************************\n//*-------------------------------------------------\n//*  SET POST-DAYEND PROCESSING SWITCH IN MIS10010 TO 'Y'.\n//*\n//*  IF MID99 ENCOUNTERS 'Y' BEFORE MID98 RESETS, THEN IT CAN\n//*  BE ASSUMED THAT THE POST-DAYEND JOBS ARE RUNNING PAST\n//*  MIDNIGHT - SO THE OFFSET DATE CAN BE SET TO -00001.\n//*-------------------------------------------------\n//S010     EXEC PGM=CHNG0080,\n//             REGION=5120K,\n//             PARM='0080N0000000000N        /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//CHANGED  DD  DISP=SHR,DSN=userid.ISPF.FILE488(MIS10010)\n//OFFSET   DD  DUMMY\n//PARM01   DD  *,DLM=ZZ\n*\n*  PLACE 'Y' IN MIS10010 TO SIGNAL START OF POST-DAYEND PROCESSING\n*  SO THAT MID99 CAN AUTOMATICALLY SET THE OFFSET TO -00001 IF\n*  THE POST-DAYEND JOBS RUN PAST MIDNIGHT.\n*\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n F00A  00010000  0001\n R00A  00180000  0001  Y\nZZ\n//*-------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MID98": {"ttr": 9217, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00C\\x01\\x19\\x07/\\x01\\x192?\\x11\\x08\\x002\\x002\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T11:08:43", "lines": 50, "newlines": 50, "modlines": 0, "user": "IANNONE"}, "text": "//*********************************************************************\n//*                                                                   *\n//*                          M I D 9 8                                *\n//*                                                                   *\n//*        THIS JOB RUNS AS THE LAST JOB OF POST-INVISION             *\n//*        PROCESSING.                                                *\n//*                                                                   *\n//*********************************************************************\n//*-------------------------------------------------\n//*        ALLOW UPDATE OF THE J-DATE OVERRIDE PARM\n//*\n//*        PARM R = ISSUE RESET OVERRIDE MESSAGE TO CONSOLE\n//*-------------------------------------------------\n//S020     EXEC PGM=MIS0660B,\n//             REGION=5120K,\n//*            RESTART=S010,\n//             COND=(0,NE),\n//             PARM='R         /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//OFFSET   DD  DSN=userid.ISPF.FILE488(MIS10010),DISP=SHR\n//OFFCHK   DD  DSN=userid.ISPF.FILE488(MIS10010),DISP=SHR\n//*-------------------------------------------------\n//*  RESET POST-DAYEND PROCESSING SWITCH IN MIS10010\n//*-------------------------------------------------\n//S030     EXEC PGM=CHNG0080,\n//             COND=(0,NE),\n//             REGION=5120K,\n//             PARM='0080N0000000000N        /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//CHANGED  DD  DISP=SHR,DSN=userid.ISPF.FILE488(MIS10010)\n//OFFSET   DD  DUMMY\n//PARM01   DD  *,DLM=ZZ\n*\n*  PLACE 'N' IN MIS10010 TO SIGNAL END OF POST-DAYEND PROCESSING.\n*  (PREVIOUSLY SET TO 'Y' BY MID97 AT START OF POST-DAYEND\n*   PROCESSING, AND BY MID99 AFTER OFFSET VALUE SET).\n*\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n F00A  00010000  0001\n R00A  00180000  0001  N\nZZ\n//*-------------------------------------------------\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MID99": {"ttr": 9219, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x007\\x01\\x19\\x07/\\x01\\x192?\\x11\\x10\\x00\\x81\\x00~\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T11:10:37", "lines": 129, "newlines": 126, "modlines": 0, "user": "IANNONE"}, "text": "//*********************************************************************\n//*                                                                   *\n//*                          M I D 9 9                                *\n//*                                                                   *\n//*        THIS JOB MUST BE RUN AT MIDNIGHT, AND BEFORE ANY OTHER     *\n//*        THIRD SHIFT JOBS.                                          *\n//*                                                                   *\n//*********************************************************************\n//*-------------------------------------------------\n//*        ALLOW UPDATE OF THE J-DATE OVERRIDE PARM\n//*\n//*        PARM S = ISSUE SET OVERRIDE MESSAGE TO CONSOLE\n//*-------------------------------------------------\n//S040     EXEC PGM=MIS0660B,\n//             REGION=5120K,\n//*            RESTART=S010,\n//             COND=(0,NE),\n//             PARM='S         /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//OFFSET   DD  DSN=userid.ISPF.FILE488(MIS10010),DISP=SHR\n//OFFCHK   DD  DSN=userid.ISPF.FILE488(MIS10010),DISP=SHR\n//*-------------------------------------------------\n//*\n//*     SEND CONTENTS OF OFFSET AS TSO MESSAGE\n//*\n//*-------------------------------------------------\n//S050     EXEC PGM=PULL0080,\n//*            RESTART=S050,\n//             REGION=5120K,\n//             COND=(0,NE),\n//             PARM='0080NN    /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//INFILE   DD  DSN=userid.ISPF.FILE488(MIS10010),DISP=SHR\n//OUTFILE  DD  DSN=&&OFFST,\n//             DISP=(NEW,PASS,DELETE),\n//             LRECL=080,RECFM=FB,UNIT=SYSDA\n//OUTPRNT  DD  DUMMY\n//PARM01   DD  *,DLM=ZZ\n**\n**  <-------------------x-- ---- ----- -------- -------- ---------------\n**           a          sbb cccc ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---- ----- -------- -------- ---------------\n*                       X01 0001 00000   00000    00000\n                        I00 0000 00000   00000    00000  I12 SE ' OFFSET\nZZ\n//*-------------------------------------------------\n//S060     EXEC PGM=CHNG0080,\n//*            RESTART=S050,\n//             REGION=5120K,\n//             COND=(0,NE),\n//             PARM='0080N0000000000     /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//CHANGED  DD  DSN=&&OFFST,DISP=(OLD,PASS,DELETE)\n//OFFSET   DD  DSN=userid.ISPF.FILE488(MIS10010),DISP=SHR\n//PARM01   DD  *,DLM=ZZ\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\nNR00   00220000  0006  #+00000#MDY#\n R00   00330000  0019  ' U(userid) LOGON\nZZ\n//*-------------------------------------------------\n//S070     EXEC PGM=CHNG0080,\n//*            RESTART=S050,\n//             REGION=5120K,\n//             COND=(0,NE),\n//             PARM='0080N0000000000     /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//CHANGED  DD  DSN=&&OFFST,DISP=(OLD,PASS,DELETE)\n//OFFSET   DD  DSN=userid.ISPF.FILE488(MIS10010),DISP=SHR\n//PARM01   DD  *,DLM=ZZ\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n F00A  00000000  0005  -00000\n C00A  00000000  0004  0000\n D00   00000000  0004  0004\nZZ\n//*-------------------------------------------------\n//*  THIS STEP WILL FLUSH UNLESS THE OFFSET IS NOT -00000\n//*-------------------------------------------------\n//S080     EXEC PGM=IKJEFT01,\n//             REGION=5120K,\n//*            RESTART=S050,\n//             COND=(4,NE,S070)\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSOUT   DD  SYSOUT=*\n//SYSTSPRT DD  SYSOUT=*\n//SYSTSIN  DD  DSN=&&OFFST,DISP=(OLD,DELETE,DELETE)\n//*-------------------------------------------------\n//*  SET POST-DAYEND PROCESSING SWITCH IN MIS10010 TO 'Y'.\n//*  IF SMS DAYEND (VS POST-DAYEND) RUNS PAST MIDNIGHT,\n//*  MID97 WILL NOT HAVE SET THE SWITCH ON -\n//*  SO WE SET IT ON HERE TO ALLOW THE FOLLOWING MID99\n//*  TO SET THE OFFSET CORRECTLY.\n//*-------------------------------------------------\n//S090     EXEC PGM=CHNG0080,\n//             REGION=5120K,\n//             PARM='0080N0000000000N        /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//OFFSET   DD  DUMMY\n//CHANGED  DD  DISP=SHR,DSN=userid.ISPF.FILE488(MIS10010)\n//PARM01   DD  *\n*\n*  PLACE 'Y' IN MIS10010 TO SIGNAL START OF POST-DAYEND PROCESSING\n*  SO THAT MID99 CAN AUTOMATICALLY SET THE OFFSET TO -00001 IF\n*  THE POST-DAYEND JOBS RUN PAST MIDNIGHT.\n*\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n F00A  00010000  0001\n R00A  00180000  0001  Y\n/*\n//*-------------------------------------------------\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MISA1": {"ttr": 9222, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x14\\x01\\x19\\x07?\\x01\\x192?\\x11\\x11\\x00M\\x00M\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-11-19T11:11:14", "lines": 77, "newlines": 77, "modlines": 0, "user": "IANNONE"}, "text": "//MISA1    PROC\n//*--------------------------------------------------\n//*   DELETE WORK FILES\n//*--------------------------------------------------\n//S010     EXEC PGM=IDCAMS,\n//             REGION=5120K,\n//*            RESTART=S010,\n//             COND=(0,NE)\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=userid.ISPF.FILE488(MISA1010),      *DELETE\n//             DISP=SHR\n//*--------------------------------------------------\n//S020     EXEC PGM=IEFBR14,\n//             REGION=5120K,\n//*            RESTART=S020,\n//             COND=(0,NE)\n//DASD2    DD  DSN=SYSP.STVSSD.DASD.DSNOUA2,           *DEFINE\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(15,15)),\n//             DCB=(DSORG=PS),LRECL=121,RECFM=FBA\n//DASD3    DD  DSN=SYSP.STVSSD.DASD.DSNOUA3,           *DEFINE\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(15,15)),\n//             DCB=(DSORG=PS),LRECL=121,RECFM=FBA\n//DASD4    DD  DSN=SYSP.STVSSD.DASD.DSNOUA4,           *DEFINE\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(15,15)),\n//             DCB=(DSORG=PS),LRECL=121,RECFM=FBA\n//DASD5    DD  DSN=SYSP.STVSSD.DASD.DSNOUA5,           *DEFINE\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(15,15)),\n//             DCB=(DSORG=PS),LRECL=121,RECFM=FBA\n//DASD6    DD  DSN=SYSP.STVSSD.DASD.DSNOUA6,           *DEFINE\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(15,15)),\n//             DCB=(DSORG=PS),LRECL=121,RECFM=FBA\n//DASD7    DD  DSN=SYSP.STVSSD.DASD.DSNOUA7,           *DEFINE\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(15,15)),\n//             DCB=(DSORG=PS),LRECL=121,RECFM=FBA\n//DASD8    DD  DSN=SYSP.STVSSD.DASD.DSNOPDS,           *DEFINE\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(2,1,10)),\n//             DCB=(DSORG=PO),LRECL=80,RECFM=FB\n//*--------------------------------------------------\n//S030     EXEC  PGM=IEBCOPY,REGION=5120K\n//SYSPRINT DD  SYSOUT=*\n//IN1      DD  DISP=SHR,DSN=SYSP.STATIC.PARMLIB\n//OUT1     DD  DISP=SHR,DSN=SYSP.STVSSD.DASD.DSNOPDS\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(TRK,30)\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(TRK,30)\n//SYSIN    DD  DSN=userid.ISPF.FILE488(MISA1030),DISP=SHR\n//**-------------------------------------------------\n//*    PLACE TIME AND DATE IN HEADER FILE\n//*--------------------------------------------------\n//S040     EXEC PGM=CHNG0121,\n//             REGION=5120K,\n//*            RESTART=S030,\n//             COND=(0,NE),\n//             PARM='0121N0000000000     /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//CHANGED  DD  DSN=SYSP.STVSSD.DASD.DSNOTE,\n//             DISP=(OLD,KEEP,KEEP)\n//PARM01   DD  DSN=userid.ISPF.FILE488(MISA1040),DISP=SHR\n//OFFSET   DD  DSN=userid.ISPF.FILE488(MIS10010),DISP=SHR\n//*--------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MISA1010": {"ttr": 9225, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x00\\x99\\x05o\\x00\\x99\"/\\x14E\\x00\\x08\\x00\\x05\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1999-02-25T00:00:00", "modifydate": "1999-08-10T14:45:00", "lines": 8, "newlines": 5, "modlines": 0, "user": "IANNONE"}, "text": "   DELETE SYSP.STVSSD.DASD.DSNOPDS NONVSAM\n   DELETE SYSP.STVSSD.DASD.DSNOUA2 NONVSAM\n   DELETE SYSP.STVSSD.DASD.DSNOUA3 NONVSAM\n   DELETE SYSP.STVSSD.DASD.DSNOUA4 NONVSAM\n   DELETE SYSP.STVSSD.DASD.DSNOUA5 NONVSAM\n   DELETE SYSP.STVSSD.DASD.DSNOUA6 NONVSAM\n   DELETE SYSP.STVSSD.DASD.DSNOUA7 NONVSAM\n   IF MAXCC = 8 THEN SET MAXCC = 0\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MISA1030": {"ttr": 9227, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x01\\x19\\x07?\\x01\\x19\\x07?\\x081\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-03-14T08:31:39", "lines": 14, "newlines": 14, "modlines": 0, "user": "IANNONE"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "MISA1040": {"ttr": 9229, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x99\\x06\\x9f\\x01\\x004\\x8f\\x11\\x19\\x00\\x11\\x00\\x0b\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1999-03-10T00:00:00", "modifydate": "2000-12-13T11:19:00", "lines": 17, "newlines": 11, "modlines": 0, "user": "IANNONE"}, "text": "*\n* FIND DATE IN M/D/CY FORMAT, THEN PLACE CURRENT DATE IN SAME\n* FORMAT AT THAT LOCATION.\n*\n* FIND TIME IN HH:MM MILITARY FORMAT, THEN PLACE CURRENT TIME IN\n* SAME FORMAT AT THAT LOCATION.\n*\n* UP TO 40 PAIRS OF CHANGES, OR 80 LINES, MAY BE ENTERED\n* SEE CHNGFILE FOR FURTHER DETAILS\n*\n*...+....1....+....2....\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n F00A  00600000  0010  #M/D/CY#\nAR00A  00600000  0010  #+00000#M/D/CY#\n F00B  00600000  0005  #H:MM#\nAR00B  00600000  0005  #I00000#H:MM#\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MISA2": {"ttr": 9231, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x08\\x01\\x19\\x07?\\x01\\x192?\\x11\\x12\\x00F\\x00J\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-11-19T11:12:08", "lines": 70, "newlines": 74, "modlines": 0, "user": "IANNONE"}, "text": "//MISA2    PROC PARMFX1='XXX0621001N',\n//             PARMFX2='XXX0624008N',\n//             VOLSR='VOLSER'\n//*--------------------------------------------------\n//S010     EXEC PGM=MIS0425B,\n//             REGION=5120K,\n//*            RESTART=S010,\n//             COND=(0,NE),\n//             PARM='&PARMFX1&VOLSR/'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//OFFSET   DD  DISP=SHR,DSN=userid.ISPF.FILE488(MIS10010)\n//PARMFX   DD  DSN=SYSP.STVSSD.DASD.DSNOPDS(MISA2030), *UPDATE\n//             DISP=SHR\n//*--------------------------------------------------\n//S020     EXEC PGM=MIS0425B,\n//             REGION=5120K,\n//*            RESTART=S010,\n//             COND=(0,NE),\n//             PARM='&PARMFX2&VOLSR/'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//OFFSET   DD  DISP=SHR,DSN=userid.ISPF.FILE488(MIS10010)\n//PARMFX   DD  DSN=SYSP.STVSSD.DASD.DSNOPDS(MISA2040), *UPDATE\n//             DISP=SHR\n//*--------------------------------------------------\n//*        RUN VTOC LIST OF DATASETS FOR EXTENT CHECKING\n//*--------------------------------------------------\n//S030     EXEC PGM=IEHLIST,REGION=20M,\n//*            RESTART=S010,\n//             COND=(0,NE)\n//SYSPRINT DD  DSN=&&IEHLST1,\n//             DISP=(NEW,PASS,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(15,15)),\n//             LRECL=121,RECFM=FBA,DCB=(DSORG=PS)\n//DASD     DD  UNIT=3390,VOL=SER=&VOLSR,DISP=SHR\n//SYSIN    DD  DISP=SHR,DSN=SYSP.STVSSD.DASD.DSNOPDS(MISA2030)\n//*--------------------------------------------------\n//S040     EXEC PGM=CHNG0121,\n//             REGION=5120K,\n//*            RESTART=S010,\n//             COND=(0,NE),\n//             PARM='0121N0000000000     /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//CHANGED  DD  DSN=&&IEHLST1,\n//             DISP=(OLD,PASS,DELETE)\n//PARM01   DD  DISP=SHR,DSN=SYSP.STVSSD.DASD.DSNOPDS(MISA2040)\n//OFFSET   DD  DISP=SHR,DSN=userid.ISPF.FILE488(MIS10010)\n//*--------------------------------------------------\n//S050   EXEC  PGM=IEBGENER,REGION=5120K,\n//*            RESTART=S010,\n//             COND=(0,NE)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSN=&&IEHLST1,\n//             DISP=(OLD,DELETE,DELETE),\n//             DCB=(DSORG=PS),RECFM=FBA,LRECL=121\n//SYSUT2   DD  DSN=SYSP.STVSSD.DASD.DSNOUA2,\n//             DISP=(MOD,KEEP,DELETE),\n//             SPACE=(TRK,(15,15)),\n//             DCB=(DSORG=PS),RECFM=FBA,LRECL=121\n//SYSIN    DD  DUMMY\n//*--------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MISA2030": {"ttr": 9233, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x06\\x9f\\x00\\x99\\x06\\x9f\\tP\\x00\\x01\\x00\\x01\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-10T00:00:00", "modifydate": "1999-03-10T09:50:00", "lines": 1, "newlines": 1, "modlines": 0, "user": "IANNONE"}, "text": "  LISTVTOC VOL=3390=SVMM28\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MISA2040": {"ttr": 9235, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x06\\x9f\\x01\\x004\\x8f\\x11 \\x00\\n\\x00\\x08\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-10T00:00:00", "modifydate": "2000-12-13T11:20:00", "lines": 10, "newlines": 8, "modlines": 0, "user": "IANNONE"}, "text": "*\n* PLUG THE VOLSER INTO POSITION 94 OF THE UPDATE FILE\n*\n* UP TO 40 PAIRS OF CHANGES, OR 80 LINES, MAY BE ENTERED\n* SEE CHNGFILE FOR FURTHER DETAILS\n*\n*...+....1....+....2....\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\nAR00   00940000  0006  SVMM28\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MISA9": {"ttr": 9237, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x04\\x01\\x19\\x07?\\x01\\x192?\\x11\\x14\\x00\\xed\\x00\\xed\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-11-19T11:14:04", "lines": 237, "newlines": 237, "modlines": 0, "user": "IANNONE"}, "text": "//MISA9    PROC\n//*--------------------------------------------------\n//*  delete work files\n//*--------------------------------------------------\n//S010     EXEC PGM=IDCAMS,\n//             REGION=5120K,\n//*            RESTART=J010.S010,\n//             COND=(0,NE)\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=userid.ISPF.FILE488(MISA9010),      *delete\n//             DISP=SHR\n//*--------------------------------------------------\n//*  ELIMINATE IEHLIST EXTRANEOUS RECORDS\n//*--------------------------------------------------\n//S020     EXEC PGM=PULL0121,\n//*            RESTART=J010.S010,\n//             REGION=5120K,\n//             COND=(0,NE),\n//             PARM='0121NN    /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//INFILE   DD  DSN=SYSP.STVSSD.DASD.DSNOUA2,DISP=(OLD,KEEP)\n//         DD  DSN=SYSP.STVSSD.DASD.DSNOUA3,DISP=(OLD,KEEP)\n//         DD  DSN=SYSP.STVSSD.DASD.DSNOUA4,DISP=(OLD,KEEP)\n//         DD  DSN=SYSP.STVSSD.DASD.DSNOUA5,DISP=(OLD,KEEP)\n//         DD  DSN=SYSP.STVSSD.DASD.DSNOUA6,DISP=(OLD,KEEP)\n//         DD  DSN=SYSP.STVSSD.DASD.DSNOUA7,DISP=(OLD,KEEP)\n//OUTFILE  DD  DSN=SYSP.STVSSD.DASD.DSNOUTB,          *output\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(80,15)),\n//             RECFM=FBA,LRECL=121,DCB=(DSORG=PS)\n//OUTPRNT  DD  DUMMY                                  *output\n//PARM01   DD  DSN=userid.ISPF.FILE488(MISA9020),     *input\n//             DISP=SHR\n//*--------------------------------------------------\n//*  reformat file for better viewing\n//*--------------------------------------------------\n//S030     EXEC PGM=MIS0440B,\n//             REGION=5120K,\n//*            RESTART=J010.S010,\n//             COND=(0,NE)\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//DSNIN    DD  DSN=SYSP.STVSSD.DASD.DSNOUTB,\n//             DISP=(OLD,KEEP,KEEP)\n//DSNOUT   DD  DSN=SYSP.STVSSD.DASD.DSNOUTR,\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(80,15)),\n//             RECFM=FBA,LRECL=121,DCB=(DSORG=PS)\n//*--------------------------------------------------\n//*  SORT IEHLIST OUTPUT BY VOLUME\n//*--------------------------------------------------\n//S040     EXEC PGM=SORT,\n//             REGION=5120K,\n//*            RESTART=J010.S010,\n//             COND=(0,NE)\n//SORTMSG  DD  SYSOUT=*\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SORTIN   DD  DSN=SYSP.STVSSD.DASD.DSNOUTR,           *input\n//             DISP=(OLD,KEEP,KEEP)\n//SORTOUT  DD  DSN=SYSP.STVSSD.DASD.DSNOUTE,           *output\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(80,15),RLSE),\n//             RECFM=FBA,LRECL=121,DCB=(DSORG=PS)\n//SYSIN    DD  DSN=userid.ISPF.FILE488(MISA9040),      *input\n//             DISP=SHR\n//SORTWK01 DD  UNIT=SYSDA,SPACE=(TRK,(80))\n//SORTWK02 DD  UNIT=SYSDA,SPACE=(TRK,(80))\n//SORTWK03 DD  UNIT=SYSDA,SPACE=(TRK,(80))\n//*--------------------------------------------------\n//*  SORT IEHLIST OUTPUT BY DSN, DESCENDING SEQ\n//*--------------------------------------------------\n//S050     EXEC PGM=SORT,\n//             REGION=5120K,\n//*            RESTART=J010.S010,\n//             COND=(0,NE)\n//SORTMSG  DD  SYSOUT=*\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SORTIN   DD  DSN=SYSP.STVSSD.DASD.DSNOUTR,           *input\n//             DISP=(OLD,KEEP,KEEP)\n//SORTOUT  DD  DSN=SYSP.STVSSD.DASD.DSNOUTC,           *output\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(80,15),RLSE),\n//             RECFM=FBA,LRECL=121,DCB=(DSORG=PS)\n//SYSIN    DD  DSN=userid.ISPF.FILE488(MISA9050),      *input\n//             DISP=SHR\n//SORTWK01 DD  UNIT=SYSDA,SPACE=(TRK,(80))\n//SORTWK02 DD  UNIT=SYSDA,SPACE=(TRK,(80))\n//SORTWK03 DD  UNIT=SYSDA,SPACE=(TRK,(80))\n//*--------------------------------------------------\n//*  list files over ##### extents\n//*\n//*  ##### is passed via a static parm\n//*--------------------------------------------------\n//S060     EXEC PGM=MIS0585B,\n//*            RESTART=J010.S010,\n//             COND=(0,NE),\n//             REGION=5120K\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//INFILE   DD  DSN=SYSP.STVSSD.DASD.DSNOUTC,          *input\n//             DISP=(OLD,KEEP)\n//OUTNOT   DD  DSN=SYSP.STVSSD.DASD.DSNOTIF,          *input\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(4,2),RLSE),\n//             RECFM=FB,LRECL=80,DCB=(DSORG=PS)\n//PARM01   DD  DSN=userid.ISPF.FILE488(MISA9060),     *input\n//             DISP=SHR\n//*--------------------------------------------------\n//*  SORT IEHLIST OUTPUT BY DSN, ASCENDING SEQ\n//*--------------------------------------------------\n//S070     EXEC PGM=SORT,\n//             REGION=5120K,\n//*            RESTART=J010.S010,\n//             COND=(0,NE)\n//SORTMSG  DD  SYSOUT=*\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SORTIN   DD  DSN=SYSP.STVSSD.DASD.DSNOUTC,           *input\n//             DISP=(OLD,KEEP,KEEP)\n//SORTOUT  DD  DSN=SYSP.STVSSD.DASD.DSNOUTD,           *output\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(80,15),RLSE),\n//             RECFM=FBA,LRECL=121,DCB=(DSORG=PS)\n//SYSIN    DD  DSN=userid.ISPF.FILE488(MISA9070),      *input\n//             DISP=SHR\n//SORTWK01 DD  UNIT=SYSDA,SPACE=(TRK,(80))\n//SORTWK02 DD  UNIT=SYSDA,SPACE=(TRK,(80))\n//SORTWK03 DD  UNIT=SYSDA,SPACE=(TRK,(80))\n//*--------------------------------------------------\n//*  place 'directory data' at top of file\n//*  sorted by volume\n//*--------------------------------------------------\n//S080   EXEC  PGM=IEBGENER,\n//             REGION=5120K,\n//*            RESTART=J010.S010,\n//             COND=(0,NE)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSN=SYSP.STVSSD.DASD.DSNOTE,\n//             DISP=(OLD,KEEP,KEEP)\n//         DD  DSN=SYSP.STVSSD.DASD.DSNOUTE,\n//             DISP=(OLD,KEEP,KEEP)\n//SYSUT2   DD  DSN=SYSP.STVSSD.DASD.DSNOUT,\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=(SYSDA),\n//             SPACE=(TRK,(80,15),RLSE),\n//             RECFM=FBA,LRECL=121,DCB=(DSORG=PS)\n//SYSIN    DD  DUMMY\n//*--------------------------------------------------\n//*  place 'directory data' at top of file\n//*  sorted by dsn\n//*--------------------------------------------------\n//S090   EXEC  PGM=IEBGENER,\n//             REGION=5120K,\n//*            RESTART=J010.S010,\n//             COND=(0,NE)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSN=SYSP.STVSSD.DASD.DSNOTE,\n//             DISP=(OLD,KEEP,KEEP)\n//         DD  DSN=SYSP.STVSSD.DASD.DSNOUTD,\n//             DISP=(OLD,KEEP,KEEP)\n//SYSUT2   DD  DSN=SYSP.STVSSD.DASD.DSNOUT2,\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=(SYSDA),\n//             SPACE=(TRK,(80,15),RLSE),\n//             RECFM=FBA,LRECL=121,DCB=(DSORG=PS)\n//SYSIN    DD  DUMMY\n//*--------------------------------------------------\n//*  send contents of file to online report viewing product\n//*--------------------------------------------------\n//S100   EXEC  PGM=IEBGENER,\n//             REGION=5120K,\n//*            RESTART=J010.S100,\n//             COND=(0,NE)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSN=SYSP.STVSSD.DASD.DSNOUT2,\n//             DISP=(OLD,KEEP,KEEP)\n//SYSUT2   DD  SYSOUT=(R,VTOC,STD),\n//             FCB=STD\n//SYSIN    DD  DUMMY\n//*--------------------------------------------------\n//*  send notification of files that are over\n//*  specified number of extents\n//*--------------------------------------------------\n//S120     EXEC PGM=IKJEFT01,\n//             REGION=5120K,\n//*            RESTART=J010.S010,\n//             COND=(0,NE)\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSOUT   DD  SYSOUT=*\n//SYSTSPRT DD  SYSOUT=*\n//SYSTSIN  DD  DSN=SYSP.STVSSD.DASD.DSNOTIF,DISP=OLD\n//*--------------------------------------------------\n//*  delete work files\n//*--------------------------------------------------\n//S130     EXEC PGM=IDCAMS,\n//             REGION=5120K,\n//*            RESTART=J010.S130,\n//             COND=(0,NE)\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=SYSP.IDCAMS.PARMLIB(MISA9130),      *delete\n//             DISP=SHR\n//*--------------------------------------------------\n//*  make copy of dasd.dsnout to avoid user allocation\n//*  when creating disaster recovery diskette\n//*--------------------------------------------------\n//S140   EXEC  PGM=IEBGENER,\n//             REGION=5120K,\n//*            RESTART=J010.S010,\n//             COND=(0,NE)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSN=SYSP.STVSSD.DASD.DSNOUT,\n//             DISP=(OLD,KEEP,KEEP)\n//SYSUT2   DD  DSN=SYSP.STVSSD.DASD.DSNOUT.FTP,\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=(SYSDA),\n//             SPACE=(TRK,(80,15),RLSE),\n//             RECFM=FBA,LRECL=121,DCB=(DSORG=PS)\n//SYSIN    DD  DUMMY\n//*--------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MISA9010": {"ttr": 9476, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x01\\x01\\x19\\x07?\\x01\\x19\\x07?\\x087\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-03-14T08:37:01", "lines": 11, "newlines": 11, "modlines": 0, "user": "IANNONE"}, "text": "  DELETE SYSP.STVSSD.DASD.DSNOPDS NONVSAM\n  DELETE SYSP.STVSSD.DASD.DSNOTIF NONVSAM\n  DELETE SYSP.STVSSD.DASD.DSNOUT  NONVSAM\n  DELETE SYSP.STVSSD.DASD.DSNOUT.FTP NONVSAM\n  DELETE SYSP.STVSSD.DASD.DSNOUTB NONVSAM\n  DELETE SYSP.STVSSD.DASD.DSNOUTC NONVSAM\n  DELETE SYSP.STVSSD.DASD.DSNOUTD NONVSAM\n  DELETE SYSP.STVSSD.DASD.DSNOUTE NONVSAM\n  DELETE SYSP.STVSSD.DASD.DSNOUTR NONVSAM\n  DELETE SYSP.STVSSD.DASD.DSNOUT2 NONVSAM\n  IF MAXCC = 8 THEN SET MAXCC = 0\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MISA9020": {"ttr": 9478, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00C\\x01\\x19\\x07?\\x01\\x191\\x9f\\x13D\\x00\\x07\\x00\\x07\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-11-15T13:44:43", "lines": 7, "newlines": 7, "modlines": 0, "user": "IANNONE"}, "text": "**\n**  pull records with period in position 51\n**\n**  <-------------------X-- ---- ----- -------- -------- ---------------\n**           A          SBB CCCC DDEEE F.GGGGG# H.IIIII#       J\n**  <----+----+----+----I-- ---- ----- -------- -------- ---------------\n.                        01 0051 00000   00000    00000\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MISA9040": {"ttr": 9480, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x99\\x05o\\x00\\x99\\x05o\\x15T\\x00\\x02\\x00\\x02\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-02-25T00:00:00", "modifydate": "1999-02-25T15:54:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "IANNONE"}, "text": " SORT FIELDS=(3,6,A,10,44,A,84,5,A),FORMAT=CH\n END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MISA9050": {"ttr": 9482, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99\\x05o\\x00\\x99\\x05o\\x15T\\x00\\x02\\x00\\x02\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-02-25T00:00:00", "modifydate": "1999-02-25T15:54:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "IANNONE"}, "text": " SORT FIELDS=(10,44,A,84,5,D),FORMAT=CH\n END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MISA9060": {"ttr": 9484, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01<\\x00\\x00\\x00\\x99\\x05o\\x01\\x003o\\x13\\x16\\x00.\\x00\\x08\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.60", "flags": 0, "createdate": "1999-02-25T00:00:00", "modifydate": "2000-12-01T13:16:00", "lines": 46, "newlines": 8, "modlines": 0, "user": "IANNONE"}, "text": "*\n* USERID  USER THAT DESIRES TO BE NOTIFIED WHEN FILES REACH,\n*         OR ARE GREATER THAN, A PARTICULAR NUMBER OF EXTENTS.\n*         ALL  = USED ONLY WITH SKIP (BELOW)\n*\n* EXT  NUMBER OF EXTENTS\n*      3 DIGIT NUMERIC\n*      000 IF DAY = SKIP (BELOW)\n*      000 IF DSN = NEW (BELOW)\n*\n* S    LIMIT EXTENT CHECKING FOR DFSMS MANAGED DATASETS\n*      S     = DFSMS MANAGED\n*      N     = NON-DFSMS MANAGED\n*      BLANK = ALL DATASETS\n*\n* TP   SPECIFY THE TYPE OF DATASETS\n*      (ALLOWS DIFFERENT EXTENT VALUES)\n*      DA    = DIRECT ACCESS (ISAM)    U     = UNDEFINED\n*      PS    = SEQUENTIAL              VS    = VSAM\n*      PO    = PDS                     BLANK = ALL DATASETS\n*\n* DAY  DAYS TO BE NOTIFIED (1=MON...7=SUN) (REQUIRED)\n*      SKIP  = AVOID ANY NOTIFICATION\n*\n* DSN  SPECIFY A SPECIFIC DATASET, OR DATASET MASK, TO LIMIT\n*      NOTIFICATION TO THAT DATASET OR RANGE OF DATASETS.\n*      SEE MIS0540B FOR A DESCRIPTION OF DATASET MASKS.\n*      NEW = NOTIFICATION OF NEW OR POSSIBLY LOST EXTENTS\n*\n* PLACE MORE SPECIFIC DEFINITIONS ABOVE MORE GENERIC ONES\n*\n*-------- --- - -- ------- --------------------------------------------\n*USERID   EXT S TP DAY     DATASET NAME OR MASK\n*-------- --- - -- ------- --------------------------------------------\n ALL      000      SKIP    PDSMS.DSNDBD.PHA6T0PA.PIXICC.I0001.A001\n ALL      000      SKIP    SYSP.CAI.TSS.TSSPIBS\n ALL      000      SKIP    SYS1.VTAMLST\n ALL      000      SKIP    TDSMS.SVCC.CC02.DFHTS\n ALL      000      SKIP    PDSMS.SVCC.CC01.DFHTS\n ALL      000      SKIP    USER.ISPF.OBJ\n ALL      000      SKIP    USER.ISPF.**\n IANNONE  012   PO 12345\n IANNONE  060 S PS 12345\n IANNONE  040 N PS 12345\n IANNONE  090      12345\n IANNONE  000      135     NEW\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MISA9070": {"ttr": 9486, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x05o\\x00\\x99\\x05o\\x15U\\x00\\x02\\x00\\x02\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-02-25T00:00:00", "modifydate": "1999-02-25T15:55:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "IANNONE"}, "text": " SORT FIELDS=(10,44,A,84,5,A),FORMAT=CH\n END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MISA9130": {"ttr": 9488, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x03\\x01\\x19\\x07?\\x01\\x19\\x07?\\x08A\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-03-14T08:41:03", "lines": 12, "newlines": 12, "modlines": 0, "user": "IANNONE"}, "text": "  DELETE SYSP.STVSSD.DASD.DSNOUA2 NONVSAM\n  DELETE SYSP.STVSSD.DASD.DSNOUA3 NONVSAM\n  DELETE SYSP.STVSSD.DASD.DSNOUA4 NONVSAM\n  DELETE SYSP.STVSSD.DASD.DSNOUA5 NONVSAM\n  DELETE SYSP.STVSSD.DASD.DSNOUA6 NONVSAM\n  DELETE SYSP.STVSSD.DASD.DSNOUA7 NONVSAM\n  DELETE SYSP.STVSSD.DASD.DSNOUTB NONVSAM\n  DELETE SYSP.STVSSD.DASD.DSNOUTC NONVSAM\n  DELETE SYSP.STVSSD.DASD.DSNOUTD NONVSAM\n  DELETE SYSP.STVSSD.DASD.DSNOUTE NONVSAM\n  DELETE SYSP.STVSSD.DASD.DSNOUTR NONVSAM\n  IF MAXCC = 8 THEN SET MAXCC = 0\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MISBI": {"ttr": 9490, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00X\\x01\\x19\\x07?\\x01\\x193\\x1f\\tP\\x00a\\x00a\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-11-27T09:50:58", "lines": 97, "newlines": 97, "modlines": 0, "user": "IANNONE"}, "text": "//*----------------------------------------------\n//*\n//*  SEND ADSM STATS\n//*\n//*----------------------------------------------\n//*  delete work files\n//*----------------------------------------------\n//S010     EXEC PGM=IDCAMS,\n//             REGION=5120K,\n//*            RESTART=S010,\n//             COND=(0,NE)\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n    DELETE SYSP.STVSSD.ADSM.SMTP.A1  NONVSAM\n    DELETE SYSP.STVSSD.ADSM.SMTP.A2  NONVSAM\n    DELETE SYSP.STVSSD.ADSM.SMTP.A3  NONVSAM\n    IF MAXCC = 8 THEN SET MAXCC = 0\n/*\n//*-------------------------------------------\n//*  build SMTP commands.\n//*  cond code 0004 means no recipients selected.\n//*-------------------------------------------\n//S020     EXEC PGM=MIS0590B,\n//             REGION=5120K,\n//*            RESTART=S010,\n//             COND=(0,NE),\n//             PARM='A01/'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//OUTSMTP  DD  DSN=SYSP.STVSSD.ADSM.SMTP.A1,\n//             DISP=(NEW,CATLG,DELETE),\n//             DCB=(DSORG=PS),LRECL=80,RECFM=FB,\n//             DATACLAS=D0FBPS\n//PARM01   DD  DISP=SHR,DSN=userid.ISPF.FILE488(PARM0060)\n//*-------------------------------------------\n//S030     EXEC PGM=MIS0590B,\n//             REGION=5120K,\n//*            RESTART=S010,\n//             COND=(0,NE),\n//             PARM='END/'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//OUTSMTP  DD  DSN=SYSP.STVSSD.ADSM.SMTP.A2,\n//             DISP=(NEW,CATLG,DELETE),\n//             DCB=(DSORG=PS),LRECL=80,RECFM=FB,\n//             DATACLAS=D0FBPS\n//PARM01   DD  DISP=SHR,DSN=userid.ISPF.FILE488(PARM0060)\n//*-------------------------------------------\n//*  input file surrounded by SMTP statements\n//*-------------------------------------------\n//S040   EXEC  PGM=IEBGENER,\n//             REGION=5120K,\n//*            RESTART=S010,\n//             COND=(0,NE)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DISP=SHR,DSN=SYSP.STVSSD.ADSM.SMTP.A1\n//         DD  DISP=SHR,DSN=SYSP.STVSSD.ADSM.STATS\n//         DD  DISP=SHR,DSN=SYSP.STVSSD.ADSM.SMTP.A2\n//SYSUT2   DD  DSN=SYSP.STVSSD.ADSM.SMTP.A3,\n//             DISP=(NEW,CATLG,DELETE),\n//             DATACLAS=D0FBPS,\n//             DCB=(DSORG=PS),LRECL=80,RECFM=FB\n//SYSIN    DD  DUMMY\n//*-------------------------------------------\n//*  send via SMTP to selected recipients\n//*-------------------------------------------\n//S050     EXEC PGM=IKJEFT01,REGION=5120K,\n//*            RESTART=S010,\n//             COND=(0,NE)\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSOUT   DD  SYSOUT=*\n//SYSTSPRT DD  SYSOUT=*\n//SYSTSIN  DD  *\n  XMIT NODENAM.SMTP DA('SYSP.STVSSD.ADSM.SMTP.A3')\n/*\n//*----------------------------------------------\n//*  delete work files\n//*----------------------------------------------\n//S060     EXEC PGM=IDCAMS,\n//*            RESTART=S060,\n//             COND=(4,LT),\n//             REGION=5120K\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n    DELETE SYSP.STVSSD.ADSM.SMTP.A1  NONVSAM\n    DELETE SYSP.STVSSD.ADSM.SMTP.A2  NONVSAM\n    DELETE SYSP.STVSSD.ADSM.SMTP.A3  NONVSAM\n    IF MAXCC = 8 THEN SET MAXCC = 0\n/*\n//*----------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MISB1": {"ttr": 9493, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x006\\x01\\x19\\x07?\\x01\\x192?\\x11\\x15\\x00N\\x00Q\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-11-19T11:15:36", "lines": 78, "newlines": 81, "modlines": 0, "user": "IANNONE"}, "text": "//MISB1    PROC SOUTD=D,\n//             SOUTC=X,\n//             PARMFX1='JUL0539027N',\n//             PARMDX='1'\n//*---------------------------------------------\n//*  PARMFX1 = julian date in YYYDD format in pos 39 of line 29\n//*  PARMDX = 1: keep hsmact.h1 files   2: delete hsmact.h1 files\n//*---------------------------------------------\n//*  delete the previous listcat output file\n//*---------------------------------------------\n//S010     EXEC PGM=IEFBR14,\n//             REGION=5120K,\n//*            RESTART=S010,\n//             COND=(0,NE)\n//DASD     DD  DSN=SYSP.STVSSD.HSM.LISTCAT,            *delete\n//             DISP=(MOD,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(1,0))\n//*---------------------------------------------\n//*  list catalogs\n//*---------------------------------------------\n//S020     EXEC PGM=IDCAMS,\n//             REGION=5120K,\n//*            RESTART=S020,\n//             COND=(0,NE)\n//SYSUDUMP DD  SYSOUT=*\n//SYSOUT   DD  SYSOUT=*\n//SYSPRINT DD  DSN=SYSP.STVSSD.HSM.LISTCAT,\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(9040,(50,20),RLSE),\n//             DCB=(RECFM=VBA,LRECL=121)\n//SYSIN    DD  DSN=userid.ISPF.FILE488(MISB1020),\n//             DISP=SHR\n//*---------------------------------------------\n//*  update the static parm with the date for last week\n//*  ( YYDDD format in position 39 of record 27 )\n//*---------------------------------------------\n//S030     EXEC PGM=MIS0425B,\n//             REGION=5120K,\n//             COND=(0,NE),\n//             PARM='&PARMFX1&CMD007/'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//OFFSET   DD  DISP=SHR,DSN=userid.ISPF.FILE488(MIS10010)\n//PARMFX   DD  DISP=SHR,DSN=userid.ISPF.FILE488(MISB1030)\n//*---------------------------------------------\n//*  concatenate the hsm activity log names to the jcl which\n//*  will summarize the messages, and submit to the internal reader\n//*---------------------------------------------\n//S040     EXEC PGM=MIS0465B,\n//             REGION=5120K,\n//*            RESTART=S010,\n//             COND=(0,NE),\n//             PARM='&CMD007&PARMDX/'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSOUT   DD  SYSOUT=*\n//HSMIN    DD  DSN=SYSP.STVSSD.HSM.LISTCAT,\n//             DISP=SHR\n//JCLIN    DD  DSN=userid.ISPF.FILE488(MISB1030),\n//             DISP=SHR\n//JCLOUT   DD  SYSOUT=(A,INTRDR)\n//*---------------------------------------------\n//*  delete the previous listcat output file\n//*---------------------------------------------\n//S050     EXEC PGM=IEFBR14,\n//             REGION=5120K,\n//*            RESTART=S050,\n//             COND=(0,NE)\n//DASD     DD  DSN=SYSP.STVSSD.HSM.LISTCAT,            *delete\n//             DISP=(MOD,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(1,0))\n//*---------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MISB1020": {"ttr": 9496, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x01\\x19\\x07?\\x01\\x19\\x07?\\x08B\\x00\\x03\\x00\\x03\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-03-14T08:42:22", "lines": 3, "newlines": 3, "modlines": 0, "user": "IANNONE"}, "text": "  LISTCAT LEVEL(HSMACT.H1.BAKLOG) NAME\n  LISTCAT LEVEL(HSMACT.H1.DMPLOG) NAME\n  LISTCAT LEVEL(HSMACT.H1.MIGLOG) NAME\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MISB1030": {"ttr": 9498, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00H\\x01\\x19\\x07?\\x01\\x192?\\x11\\x15\\x00\\x1a\\x00\\x1c\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-11-19T11:15:48", "lines": 26, "newlines": 28, "modlines": 0, "user": "IANNONE"}, "text": "/*PRIORITY     07\n//PMISB1D  JOB (8231,'PROCESS HSM ACTIVITY LOGS'),\n//             'HSM LOG PROCESS',\n//             CLASS=X,\n//             MSGCLASS=X,\n//*            RESTART=J010.S010,\n//*            TYPRUN=SCAN,\n//             MSGLEVEL=(1,1)\n//*-------------------------------------------\n//*   This JCL is contained in static parm MISB1030\n//*\n//*   Concatenate HSM activity logs from a LISTCAT command,\n//*   summarize and write contents to HSM error/activity logs\n//*-------------------------------------------\n//**  !!!!! THE 'DSNOUT' LINE IS POSITION DEPENDENT !!!!!\n//*-------------------------------------------\n//S040     EXEC PGM=MIS0470B,\n//             REGION=5120K\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//HSMLIST  DD  DSN=HSMACT.H1.SUMMLIST,\n//             DISP=(MOD,KEEP,KEEP)\n//DSNOUT   DD  DSN=HSMACT.H1.SUMMDSN(J00336),    LINE 27, POS 39\n//             DISP=SHR\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS0081B": {"ttr": 9500, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x08\\x01\\x19\\x07/\\x01\\x193o\\x12\\x11\\x02\\x87\\x02\\x82\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-12-02T12:11:08", "lines": 647, "newlines": 642, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  MIS0081B: alter 81 byte lrecl files'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MIS0081B.\n      ******************************************************************\n      *@@@ II alter printed reports\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ******************************************************************\n      * DATE WRITTEN: 04/18/2000\n      * AUTHOR      : JIM IANNONE\n      *\n      *      Alter report data so that the Xerox laser printer will\n      *      correctly handle the offset\n      *\n      *      Load a 100 line table of report lines from the bottom\n      *      to the top until full.  While doing so, scan the data to\n      *      find a string specified in the parm.  If found, either\n      *      update the same or a different record in the table\n      *      (above or below where the string was found), or\n      *      insert a record from another file.\n      *\n      *      Continue to read INFILE, insert INFILE record at\n      *      bottom of table, and search for strings, etc.\n      *\n      *      As the table fills, write the lines from the top of\n      *      the table to OUTFILE.  When EOF is reached on INFILE,\n      *      place '*EOF*' in the table  - check for '*EOF*' when\n      *      writing OUTFILE - end processing when found.\n      *\n      ******************************************************************\n      *\n      * Example:   Search for ' 1 ' in pos 63\n      *            when found, place '.' in pos 65 of line minus 2\n      *\n      *123456789012 LL PPP  OF+ 123456789012 LL PPP I\n      * 1           03 063  02- .            01 065 0\n      *\n      *\n      * Example:   Search for 'TIME:'\n      *            when found, insert record 2 from dd inrcd\n      *\n      *123456789012 LL PPP  OF+ 123456789012 LL PPP I\n      *TIME:        05 000  00+              00 000 2\n      *\n      *\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT INFILE               ASSIGN TO INFILE\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT INRCD                ASSIGN TO INRCD\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT OUTFILE              ASSIGN TO OUTFILE\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  INFILE\n           RECORDING MODE F.\n       01  INFILE-RECORD.\n           05  INFILE-RCD              PIC  X(81).\n\n       FD  INRCD\n           RECORDING MODE F.\n       01  INRCD-RECORD.\n           05  INRCD-RCD               PIC  X(81).\n\n       FD  OUTFILE\n           RECORDING MODE F.\n       01  OUTFILE-RECORD.\n           05  OUTFILE-RCD             PIC  X(81).\n\n       FD  PARM01\n           RECORDING MODE F.\n       01  PARM01-RECORD.\n           05  PARM01-DOCU             PIC  X.\n           05  PARM01-DATA             PIC  X(12).\n           05  FILLER                  PIC  X.\n           05  PARM01-LEN              PIC  XX.\n           05  FILLER                  PIC  X.\n           05  PARM01-POS              PIC  XXX.\n           05  FILLER                  PIC  XX.\n           05  PARM01-OFFSET           PIC  XX.\n           05  PARM01-REL-LOC          PIC  X.\n           05  FILLER                  PIC  X.\n           05  PARM01-INS-DATA         PIC  X(12).\n           05  FILLER                  PIC  X.\n           05  PARM01-INS-LEN          PIC  XX.\n           05  FILLER                  PIC  X.\n           05  PARM01-INS-POS          PIC  XXX.\n           05  FILLER                  PIC  X.\n           05  PARM01-INS-RCD          PIC  X.\n           05  FILLER                  PIC  X(25).\n           05  FILLER                  PIC  X(08).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working Storage MIS0081B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-PARM01-MAX           PIC  9(05)    VALUE ZERO.\n           05  WS-INRCD-MAX            PIC  9(05)    VALUE ZERO.\n           05  WS-F-MAX                PIC  9(05)    VALUE ZERO.\n           05  WS-HLEN                 PIC  99       VALUE ZERO.\n           05  WS-HPOS                 PIC  999      VALUE ZERO.\n           05  WS-HOFF                 PIC  99       VALUE ZERO.\n           05  WS-HILEN                PIC  99       VALUE ZERO.\n           05  WS-HIPOS                PIC  999      VALUE ZERO.\n           05  WS-HIRCD                PIC  9        VALUE ZERO.\n           05  WS-HREL                 PIC  X        VALUE SPACE.\n           05  WS-HDATA                PIC  X(12)    VALUE SPACE.\n           05  WS-HIDATA               PIC  X(12)    VALUE SPACE.\n           05  WS-INFILE-RCD           PIC  X(81)    VALUE SPACE.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-RCD-CNT         PIC S9(07)    VALUE ZERO.\n           05  WS-WRITE-RCD-CNT        PIC S9(07)    VALUE ZERO.\n           05  WS-INS-RCD-CNT          PIC S9(07)    VALUE ZERO.\n           05  WS-OVERLAY-CNT          PIC S9(07)    VALUE ZERO.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB3                 PIC S9(05)    VALUE ZERO.\n           05  WS-LOW                  PIC S9(05)    VALUE ZERO.\n           05  WS-MAX                  PIC S9(05)    VALUE ZERO.\n           05  WS-MIN                  PIC S9(05)    VALUE ZERO.\n           05  WS-HIGH                 PIC S9(05)    VALUE ZERO.\n           05  WS-FROM                 PIC S9(05)    VALUE ZERO.\n           05  WS-TO                   PIC S9(05)    VALUE ZERO.\n           05  WS-WORK1                PIC S9(05)    VALUE ZERO.\n\n       01  WS-TABLES.\n           05  WS-LINE-TABLE                         VALUE SPACE.\n               10  WS-PAGE             OCCURS 100 TIMES.\n                   15  WS-FLAG         PIC  X.\n                   15  WS-CHNG         PIC  X.\n                   15  WS-LINE         PIC  X(81).\n           05  WS-INRCD-TABLE                        VALUE SPACE.\n               10  WS-INRCD            PIC  X(81)\n                                       OCCURS 9 TIMES.\n           05  WS-PARM-TABLE                         VALUE SPACE.\n               10  WS-PARM             OCCURS 20 TIMES.\n                   15  WS-DATA         PIC  X(12).\n                   15  WS-LEN          PIC  99.\n                   15  WS-POS          PIC  999.\n                   15  WS-OFF          PIC  99.\n                   15  WS-REL          PIC  X.\n                   15  WS-IDATA        PIC  X(12).\n                   15  WS-ILEN         PIC  99.\n                   15  WS-IPOS         PIC  999.\n                   15  WS-IRCD         PIC  9.\n\n       01  WS-SWITCHES.\n           05  WS-END-INFILE-SW        PIC  X        VALUE 'N'.\n               88  END-OF-INFILE                     VALUE 'Y'.\n               88  MORE-INFILE-RCDS                  VALUE 'N'.\n           05  WS-END-OUTFILE-SW       PIC  X        VALUE 'N'.\n               88  END-OF-OUTFILE                    VALUE 'Y'.\n               88  MORE-OUTFILE-RCDS                 VALUE 'N'.\n           05  WS-FOUND-SW             PIC  X        VALUE 'N'.\n           05  WS-OVERLAY-SW           PIC  X        VALUE 'N'.\n           05  WS-INSERT-SW            PIC  X        VALUE 'N'.\n\n       01  WS-STV0400B-FIELDS.\n           05  STV0400B-DATA           PIC  X(10)   VALUE SPACE.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-ERROR      PIC  X(06).\n               10  STV0400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-CYMD       PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAYS       PIC  X(05).\n               10  FILLER              PIC  X(05).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAY        PIC  X(09).\n               10  STV0400B-DAY-NBR    PIC  X.\n           05  STV0400B-DATA2          PIC  X(10)   VALUE SPACE.\n           05  STV0400B-IN             PIC  X(06)   VALUE SPACE.\n           05  STV0400B-OUT            PIC  X(06)   VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MIS0081B END  '.\n\n       LINKAGE SECTION.\n\n       01  PARM-FIELD.\n           05  PARM-LENGTH             PIC S9(04)    COMP.\n           05  PARM-PARM               PIC  X(10).\n\n      /\n       PROCEDURE DIVISION USING PARM-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           DISPLAY '     '.\n           DISPLAY '**** MIS0081B alter 81 byte records'.\n           PERFORM 0200-OPEN-FILES.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0000-PROCESS-INFILE.\n\n           DISPLAY '**** Records in INFILE   ' WS-READ-RCD-CNT.\n           DISPLAY '**** Records written     ' WS-WRITE-RCD-CNT.\n           DISPLAY '**** Records overlayed   ' WS-OVERLAY-CNT.\n           DISPLAY '**** Records inserted    ' WS-INS-RCD-CNT.\n           DISPLAY '**** Records in INRCD    ' WS-INRCD-MAX.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** MIS0081B cond code ' WS-RETURN-CODE\n                       ' sent by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** MIS0081B EOJ encountered '.\n           DISPLAY '     '.\n\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  INFILE.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0081B open error on INFILE'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN INPUT  INRCD.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0081B open error on INRCD'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0201                     TO WS-RETURN-CODE.\n           OPEN INPUT  PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0081B open error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0202                     TO WS-RETURN-CODE.\n           OPEN OUTPUT OUTFILE.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0081B open error on OUTFILE'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0201                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE OUTFILE.\n           CLOSE PARM01.\n           CLOSE INRCD.\n           CLOSE INFILE.\n\n       0000-PROCESS-INFILE.\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                      TO WS-SUB1\n               PERFORM 0000-LOAD-INRCD THRU\n                       0000-LOAD-INRCD-EXIT.\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                      TO WS-SUB1\n               PERFORM 0000-LOAD-PARM01 THRU\n                       0000-LOAD-PARM01-EXIT.\n           MOVE ZERO                          TO WS-READ-RCD-CNT.\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                      TO WS-SUB1 WS-SUB2\n               MOVE 1                         TO WS-HIGH\n               MOVE 2                         TO WS-LOW\n               MOVE 80                        TO WS-MAX\n               MOVE 2                         TO WS-MIN\n               PERFORM 0000-SELECT THRU\n                       0000-SELECT-EXIT\n                       UNTIL END-OF-OUTFILE.\n\n      ****************************************\n      *    load INRCD\n      ****************************************\n       0000-LOAD-INRCD.\n           READ INRCD.\n           IF WS-STAT = 10\n               MOVE WS-SUB1                   TO WS-INRCD-MAX\n               GO TO 0000-LOAD-INRCD-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0081B read error on INRCD'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0300                     TO WS-RETURN-CODE\n               GO TO 0000-LOAD-INRCD-EXIT.\n\n           IF WS-SUB1 < 9\n               ADD 1                          TO WS-SUB1\n               MOVE INRCD-RCD                 TO WS-INRCD(WS-SUB1).\n\n           GO TO 0000-LOAD-INRCD.\n\n       0000-LOAD-INRCD-EXIT. EXIT.\n\n      ****************************************\n      *    load PARM01\n      ****************************************\n       0000-LOAD-PARM01.\n           READ PARM01.\n           IF WS-STAT = 10\n               MOVE WS-SUB1                   TO WS-PARM01-MAX\n               GO TO 0000-LOAD-PARM01-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0081B read error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0700                     TO WS-RETURN-CODE\n               GO TO 0000-LOAD-PARM01-EXIT.\n\n           ADD 1                              TO WS-READ-RCD-CNT.\n           IF PARM01-DOCU = '*'\n               GO TO 0000-LOAD-PARM01.\n           IF WS-SUB1 < 20\n               ADD 1                          TO WS-SUB1\n           ELSE\n               DISPLAY '**** MIS0081B 10 parm limit reached'\n               GO TO 0000-LOAD-PARM01-EXIT.\n\n           MOVE PARM01-DATA                   TO WS-DATA(WS-SUB1).\n           IF PARM01-LEN NUMERIC\n               MOVE PARM01-LEN                TO WS-LEN(WS-SUB1)\n           ELSE\n               DISPLAY '**** Parm len is not numeric '\n               DISPLAY '**** Parm rcd: ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n           IF WS-LEN(WS-SUB1) < 1\n               OR WS-LEN(WS-SUB1) > 12\n               DISPLAY '**** Parm len: 01 - 12 '\n               DISPLAY '**** Parm rcd: ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n           IF PARM01-POS NUMERIC\n               MOVE PARM01-POS                TO WS-POS(WS-SUB1)\n           ELSE\n               DISPLAY '**** Parm pos is not numeric '\n               DISPLAY '**** Parm rcd: ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n           COMPUTE WS-F-MAX = WS-LEN(WS-SUB1) + WS-POS(WS-SUB1) - 1.\n           IF WS-F-MAX > 81\n               visplay '**** len + pos > file length'\n               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n           IF PARM01-OFFSET NUMERIC\n               MOVE PARM01-OFFSET             TO WS-OFF(WS-SUB1)\n           ELSE\n               DISPLAY '**** Parm offset is not numeric '\n               DISPLAY '**** Parm rcd: ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n           IF WS-OFF(WS-SUB1) > 78\n               DISPLAY '**** Parm offset: 00 - 78'\n               DISPLAY '**** Parm rcd: ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n           IF PARM01-REL-LOC = '+' OR '-' OR SPACE\n               MOVE PARM01-REL-LOC            TO WS-REL(WS-SUB1)\n           ELSE\n               DISPLAY '**** Parm rel loc: +/-/blank'\n               DISPLAY '**** Parm rcd: ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n\n           MOVE PARM01-INS-DATA               TO WS-IDATA(WS-SUB1).\n           IF PARM01-INS-LEN NUMERIC\n               MOVE PARM01-INS-LEN            TO WS-ILEN(WS-SUB1)\n           ELSE\n               DISPLAY '**** Parm ins-len is not numeric '\n               DISPLAY '**** Parm rcd: ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n           IF PARM01-INS-DATA > SPACE\n               OR WS-ILEN(WS-SUB1) > ZERO\n               IF WS-ILEN(WS-SUB1) < 1\n                   OR WS-ILEN(WS-SUB1) > 12\n                   DISPLAY '**** Parm ins len: 01 - 12 '\n                   DISPLAY '**** Parm rcd: ' WS-READ-RCD-CNT\n                   MOVE +0400                 TO WS-RETURN-CODE.\n           IF PARM01-INS-POS NUMERIC\n               MOVE PARM01-INS-POS            TO WS-IPOS(WS-SUB1)\n           ELSE\n               DISPLAY '**** Parm ins-pos is not numeric '\n               DISPLAY '**** Parm rcd: ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n           COMPUTE WS-F-MAX = WS-ILEN(WS-SUB1) + WS-IPOS(WS-SUB1) - 1.\n           IF WS-F-MAX > 81\n               DISPLAY '**** ins len + ins pos > file length'\n               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n           IF PARM01-INS-RCD NUMERIC\n               MOVE PARM01-INS-RCD            TO WS-IRCD(WS-SUB1)\n           ELSE\n               DISPLAY '**** Parm ins-rcd is not numeric '\n               DISPLAY '**** Parm rcd  ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n           IF WS-IRCD(WS-SUB1) > WS-INRCD-MAX\n               DISPLAY '**** Parm ins-rcd > actual ins-rcds '\n               DISPLAY '**** Parm rcd: ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n\n           GO TO 0000-LOAD-PARM01.\n\n       0000-LOAD-PARM01-EXIT. EXIT.\n\n       0000-SELECT.\n           IF MORE-INFILE-RCDS\n               PERFORM 0000-READ-INFILE.\n           IF WS-RETURN-CODE > ZERO\n               MOVE 'Y'                       TO WS-END-OUTFILE-SW\n               GO TO 0000-SELECT-EXIT.\n\n      *---------------------------------------\n      *     place INFILE record into table\n      *     loop through table, top to bottom, comparing\n      *       parms against record contents.\n      *     if string found, insert INRCD records or overlay\n      *       with parm string as requested.\n      *---------------------------------------\n           PERFORM 0000-ADVANCE-TABLE.\n           PERFORM 0000-DETERMINE-INSERT\n               VARYING WS-SUB3 FROM WS-HIGH BY -1\n               UNTIL WS-SUB3 < WS-LOW.\n\n       0000-SELECT-EXIT. EXIT.\n\n       0000-READ-INFILE.\n           READ INFILE.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-RCD-CNT\n               MOVE INFILE-RCD                TO WS-INFILE-RCD\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-INFILE-SW\n               MOVE '*EOF*'                   TO WS-INFILE-RCD\n           ELSE\n               DISPLAY '**** MIS0081B read error on INFILE '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +1200                     TO WS-RETURN-CODE.\n\n      *---------------------------------------\n      *     1.  if table has room, move INFILE line to table,\n      *          inserting at bottom\n      *     2.  if table full, write top line, advance rest,\n      *           write INFILE line at bottom\n      *     3.  if table overflow at top, write extra top rcds,\n      *           advance rest, write INFILE line at bottom\n      *     4.  if table overflow at bottom, write top rcds\n      *           until room, write INFILE line at bottom\n      *---------------------------------------\n       0000-ADVANCE-TABLE.\n           IF WS-LOW < WS-MIN\n               PERFORM UNTIL WS-LOW > WS-MIN\n                   MOVE WS-LINE(WS-HIGH)      TO OUTFILE-RCD\n                   PERFORM 0000-WRITE-OUTFILE\n                   MOVE WS-HIGH               TO WS-TO WS-FROM\n                   SUBTRACT 1 FROM WS-FROM\n                   PERFORM 0000-ADVANCE-POSITIONS\n                       UNTIL WS-FROM < WS-LOW\n                   ADD 1                      TO WS-LOW\n               END-PERFORM\n               SUBTRACT 1 FROM WS-LOW\n               MOVE WS-INFILE-RCD             TO WS-LINE(WS-LOW)\n               MOVE SPACE                     TO WS-CHNG(WS-LOW)\n               MOVE SPACE                     TO WS-FLAG(WS-LOW)\n           ELSE\n           IF WS-HIGH < WS-MAX\n               MOVE WS-HIGH                   TO WS-FROM WS-TO\n               ADD 1                          TO WS-TO\n               PERFORM 0000-ADVANCE-POSITIONS\n                   UNTIL WS-FROM < WS-LOW\n               ADD 1                          TO WS-HIGH\n               MOVE WS-INFILE-RCD             TO WS-LINE(WS-LOW)\n               MOVE SPACE                     TO WS-CHNG(WS-LOW)\n               MOVE SPACE                     TO WS-FLAG(WS-LOW)\n           ELSE\n           IF WS-HIGH > WS-MAX\n               PERFORM UNTIL WS-HIGH < WS-MAX\n                   MOVE WS-LINE(WS-HIGH)      TO OUTFILE-RCD\n                   PERFORM 0000-WRITE-OUTFILE\n                   SUBTRACT 1 FROM WS-HIGH\n               END-PERFORM\n               MOVE WS-MAX                    TO WS-TO\n               MOVE WS-HIGH                   TO WS-FROM\n               PERFORM 0000-ADVANCE-POSITIONS\n                   UNTIL WS-FROM < WS-LOW\n               ADD 1                          TO WS-HIGH\n               MOVE WS-INFILE-RCD             TO WS-LINE(WS-LOW)\n               MOVE SPACE                     TO WS-CHNG(WS-LOW)\n               MOVE SPACE                     TO WS-FLAG(WS-LOW)\n           ELSE\n               MOVE WS-LINE(WS-HIGH)          TO OUTFILE-RCD\n               PERFORM 0000-WRITE-OUTFILE\n               MOVE WS-HIGH                   TO WS-FROM WS-TO\n               SUBTRACT 1 FROM WS-FROM\n               PERFORM 0000-ADVANCE-POSITIONS\n                   UNTIL WS-FROM < WS-LOW\n               MOVE WS-INFILE-RCD             TO WS-LINE(WS-LOW)\n               MOVE SPACE                     TO WS-CHNG(WS-LOW)\n               MOVE SPACE                     TO WS-FLAG(WS-LOW)\n           END-IF\n           END-IF\n           END-IF.\n\n       0000-DETERMINE-INSERT.\n           MOVE 'N'                           TO WS-FOUND-SW.\n           IF WS-FLAG(WS-SUB3) = SPACE\n               PERFORM 0000-PARM-LOOP\n                   VARYING WS-SUB1 FROM 1 BY 1\n                   UNTIL WS-SUB1 > WS-PARM01-MAX\n               IF WS-FOUND-SW = 'N'\n                   MOVE 'N'                   TO WS-FLAG(WS-SUB3).\n\n      *                \\\\|//\n      *                (. .)\n      *------------O00O-(_)-O00O--------------\n\n      *---------------------------------------\n      *    WS-SUB1  parm table reference\n      *    WS-SUB2  data reference\n      *    WS-SUB3  line table reference\n      *\n      *    WS-FLAG  space  compare parms to line\n      *             N      no parms matched this line -\n      *                    skip future parm comparisons\n      *    WS-CHNG  O      parm data was placed on this rcd\n      *             I      insertion record\n      *+--------------------------------------\n\n       0000-PARM-LOOP.\n           MOVE WS-DATA(WS-SUB1)              TO WS-HDATA.\n           MOVE WS-LEN(WS-SUB1)               TO WS-HLEN.\n           MOVE WS-POS(WS-SUB1)               TO WS-HPOS.\n           MOVE 'N'                           TO WS-OVERLAY-SW.\n           MOVE 'N'                           TO WS-INSERT-SW.\n\n           IF WS-HPOS > ZERO\n               MOVE WS-HPOS                   TO WS-SUB2\n               PERFORM 0000-SEARCH-INFILE\n           ELSE\n               COMPUTE WS-F-MAX = 81 - WS-HLEN + 1\n               PERFORM 0000-SEARCH-INFILE\n                   VARYING WS-SUB2 FROM 1 BY 1\n                   UNTIL WS-SUB2 > WS-F-MAX.\n\n           IF WS-OVERLAY-SW = 'Y'\n               MOVE 'O'                       TO WS-CHNG(WS-WORK1)\n               MOVE 'N'                       TO WS-FLAG(WS-SUB3)\n               ADD 1                          TO WS-OVERLAY-CNT.\n           IF WS-INSERT-SW = 'Y'\n               MOVE 'I'                       TO WS-CHNG(WS-WORK1)\n               MOVE 'N'                       TO WS-FLAG(WS-SUB3)\n               ADD 1                          TO WS-INS-RCD-CNT.\n\n       0000-SEARCH-INFILE.\n           IF WS-LINE(WS-SUB3)(WS-SUB2: WS-HLEN) =\n               WS-HDATA(1: WS-HLEN)\n               MOVE 'Y'                       TO WS-FOUND-SW\n               PERFORM 0000-PROCESS-PARM THRU\n                       0000-PROCESS-PARM-EXIT\n               MOVE WS-F-MAX                  TO WS-SUB2.\n\n      *---------------------------------------\n      *     search string if file was found\n      *     place replacement string on record in table\n      *       at offset location (if requested)\n      *       place at requested location or found string location\n      *     insert record from INRCD into table at offset\n      *       location (if requested)\n      *---------------------------------------\n       0000-PROCESS-PARM.\n           MOVE WS-OFF(WS-SUB1)               TO WS-HOFF.\n           MOVE WS-REL(WS-SUB1)               TO WS-HREL.\n           MOVE WS-IDATA(WS-SUB1)             TO WS-HIDATA.\n           MOVE WS-ILEN(WS-SUB1)              TO WS-HILEN.\n           MOVE WS-IPOS(WS-SUB1)              TO WS-HIPOS.\n           IF WS-HIPOS = ZERO\n               MOVE WS-SUB2                   TO WS-HIPOS.\n           MOVE WS-IRCD(WS-SUB1)              TO WS-HIRCD.\n           IF WS-HREL = '-'\n               COMPUTE WS-WORK1 = WS-SUB3 + WS-HOFF\n           ELSE\n               COMPUTE WS-WORK1 = WS-SUB3 - WS-HOFF.\n           IF WS-WORK1 < WS-LOW\n               OR WS-WORK1 > WS-HIGH\n               GO TO 0000-PROCESS-PARM-EXIT.\n           IF WS-HILEN > ZERO\n               MOVE WS-HIDATA(1: WS-HILEN) TO\n                    WS-LINE(WS-WORK1)(WS-HIPOS: WS-HILEN)\n               MOVE 'Y'                       TO WS-OVERLAY-SW.\n           IF WS-HIRCD > ZERO\n               IF WS-HIGH > 99\n                   DISPLAY '**** Access beyond top of table'\n                   DISPLAY '**** Insert skipped at ' WS-READ-RCD-CNT\n               ELSE\n                   MOVE WS-HIGH               TO WS-FROM WS-TO\n                   ADD 1                      TO WS-TO WS-HIGH\n                   PERFORM 0000-ADVANCE-POSITIONS\n                       UNTIL WS-FROM < WS-WORK1\n                   MOVE WS-INRCD(WS-HIRCD)    TO WS-LINE(WS-WORK1)\n                   MOVE SPACE                 TO WS-CHNG(WS-WORK1)\n                   MOVE SPACE                 TO WS-FLAG(WS-WORK1)\n                   ADD 1                      TO WS-SUB3\n                   MOVE 'Y'                   TO WS-INSERT-SW.\n\n       0000-PROCESS-PARM-EXIT. EXIT.\n\n       0000-ADVANCE-POSITIONS.\n           MOVE WS-LINE(WS-FROM)              TO WS-LINE(WS-TO).\n           MOVE WS-CHNG(WS-FROM)              TO WS-CHNG(WS-TO).\n           MOVE WS-FLAG(WS-FROM)              TO WS-FLAG(WS-TO).\n           SUBTRACT 1 FROM WS-FROM.\n           SUBTRACT 1 FROM WS-TO.\n\n       0000-WRITE-OUTFILE.\n           IF OUTFILE-RCD = '*EOF*'\n               MOVE 'Y'                       TO WS-END-OUTFILE-SW\n           ELSE\n           WRITE OUTFILE-RECORD\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0081B write error on OUTFILE'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +1200                     TO WS-RETURN-CODE\n           ELSE\n               ADD 1                          TO WS-WRITE-RCD-CNT.\n\n      ************************************ END MIS0081B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS0133B": {"ttr": 9985, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00R\\x01\\x19\\x07/\\x01\\x193o\\x12\\x12\\x02\\x87\\x02\\x82\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-12-02T12:12:52", "lines": 647, "newlines": 642, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  MIS0133B: after 133 byte lrecl files'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MIS0133B.\n      ******************************************************************\n      *@@@ II alter printed reports\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ******************************************************************\n      * Date written: 04/18/2000\n      * Author      : Jim Iannone\n      *\n      *      Alter report data so that the Xerox laser printer\n      *      will correctly handle the offset\n      *\n      *      Load a 100 line table of report lines from the bottom\n      *      to the top until full.  While doing so, scan the data to\n      *      find a string specified in the parm.  If found, either\n      *      update the same or a different record in the table\n      *      (above or below where the string was found), or\n      *      insert a record from another file.\n      *\n      *      Continue to read INFILE, insert INFILE record at\n      *      bottom of table, and search for strings, etc.\n      *\n      *      As the table fills, write the lines from the top of\n      *      the table to OUTFILE.  When EOF is reached on INFILE,\n      *      place '*EOF*' in the table  - check for '*EOF*' when\n      *      writing OUTFILE - end processing when found.\n      *\n      ******************************************************************\n      *\n      * Example:   Search for ' 1 ' in pos 83\n      *            when found, place '.' in pos 85 of line minus 2\n      *\n      *123456789012 LL PPP  OF+ 123456789012 LL PPP I\n      * 1           03 083  02- .            01 085 0\n      *\n      *\n      * Example:   Search for 'TIME:'\n      *            when found, insert record 2 from dd inrcd\n      *\n      *123456789012 LL PPP  OF+ 123456789012 LL PPP I\n      *TIME:        05 000  00+              00 000 2\n      *\n      *\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT INFILE               ASSIGN TO INFILE\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT INRCD                ASSIGN TO INRCD\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT OUTFILE              ASSIGN TO OUTFILE\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  INFILE\n           RECORDING MODE F.\n       01  INFILE-RECORD.\n           05  INFILE-RCD              PIC  X(133).\n\n       FD  INRCD\n           RECORDING MODE F.\n       01  INRCD-RECORD.\n           05  INRCD-RCD               PIC  X(133).\n\n       FD  OUTFILE\n           RECORDING MODE F.\n       01  OUTFILE-RECORD.\n           05  OUTFILE-RCD             PIC  X(133).\n\n       FD  PARM01\n           RECORDING MODE F.\n       01  PARM01-RECORD.\n           05  PARM01-DOCU             PIC  X.\n           05  PARM01-DATA             PIC  X(12).\n           05  FILLER                  PIC  X.\n           05  PARM01-LEN              PIC  XX.\n           05  FILLER                  PIC  X.\n           05  PARM01-POS              PIC  XXX.\n           05  FILLER                  PIC  XX.\n           05  PARM01-OFFSET           PIC  XX.\n           05  PARM01-REL-LOC          PIC  X.\n           05  FILLER                  PIC  X.\n           05  PARM01-INS-DATA         PIC  X(12).\n           05  FILLER                  PIC  X.\n           05  PARM01-INS-LEN          PIC  XX.\n           05  FILLER                  PIC  X.\n           05  PARM01-INS-POS          PIC  XXX.\n           05  FILLER                  PIC  X.\n           05  PARM01-INS-RCD          PIC  X.\n           05  FILLER                  PIC  X(25).\n           05  FILLER                  PIC  X(08).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage MIS0133B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-PARM01-MAX           PIC  9(05)    VALUE ZERO.\n           05  WS-INRCD-MAX            PIC  9(05)    VALUE ZERO.\n           05  WS-F-MAX                PIC  9(05)    VALUE ZERO.\n           05  WS-HLEN                 PIC  99       VALUE ZERO.\n           05  WS-HPOS                 PIC  999      VALUE ZERO.\n           05  WS-HOFF                 PIC  99       VALUE ZERO.\n           05  WS-HILEN                PIC  99       VALUE ZERO.\n           05  WS-HIPOS                PIC  999      VALUE ZERO.\n           05  WS-HIRCD                PIC  9        VALUE ZERO.\n           05  WS-HREL                 PIC  X        VALUE SPACE.\n           05  WS-HDATA                PIC  X(12)    VALUE SPACE.\n           05  WS-HIDATA               PIC  X(12)    VALUE SPACE.\n           05  WS-INFILE-RCD           PIC  X(133)   VALUE SPACE.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-RCD-CNT         PIC S9(07)    VALUE ZERO.\n           05  WS-WRITE-RCD-CNT        PIC S9(07)    VALUE ZERO.\n           05  WS-INS-RCD-CNT          PIC S9(07)    VALUE ZERO.\n           05  WS-OVERLAY-CNT          PIC S9(07)    VALUE ZERO.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB3                 PIC S9(05)    VALUE ZERO.\n           05  WS-LOW                  PIC S9(05)    VALUE ZERO.\n           05  WS-MAX                  PIC S9(05)    VALUE ZERO.\n           05  WS-MIN                  PIC S9(05)    VALUE ZERO.\n           05  WS-HIGH                 PIC S9(05)    VALUE ZERO.\n           05  WS-FROM                 PIC S9(05)    VALUE ZERO.\n           05  WS-TO                   PIC S9(05)    VALUE ZERO.\n           05  WS-WORK1                PIC S9(05)    VALUE ZERO.\n\n       01  WS-TABLES.\n           05  WS-LINE-TABLE                         VALUE SPACE.\n               10  WS-PAGE             OCCURS 100 TIMES.\n                   15  WS-FLAG         PIC  X.\n                   15  WS-CHNG         PIC  X.\n                   15  WS-LINE         PIC  X(133).\n           05  WS-INRCD-TABLE                        VALUE SPACE.\n               10  WS-INRCD            PIC  X(133)\n                                       OCCURS 9 TIMES.\n           05  WS-PARM-TABLE                         VALUE SPACE.\n               10  WS-PARM             OCCURS 20 TIMES.\n                   15  WS-DATA         PIC  X(12).\n                   15  WS-LEN          PIC  99.\n                   15  WS-POS          PIC  999.\n                   15  WS-OFF          PIC  99.\n                   15  WS-REL          PIC  X.\n                   15  WS-IDATA        PIC  X(12).\n                   15  WS-ILEN         PIC  99.\n                   15  WS-IPOS         PIC  999.\n                   15  WS-IRCD         PIC  9.\n\n       01  WS-SWITCHES.\n           05  WS-END-INFILE-SW        PIC  X        VALUE 'N'.\n               88  END-OF-INFILE                     VALUE 'Y'.\n               88  MORE-INFILE-RCDS                  VALUE 'N'.\n           05  WS-END-OUTFILE-SW       PIC  X        VALUE 'N'.\n               88  END-OF-OUTFILE                    VALUE 'Y'.\n               88  MORE-OUTFILE-RCDS                 VALUE 'N'.\n           05  WS-FOUND-SW             PIC  X        VALUE 'N'.\n           05  WS-OVERLAY-SW           PIC  X        VALUE 'N'.\n           05  WS-INSERT-SW            PIC  X        VALUE 'N'.\n\n       01  WS-STV0400B-FIELDS.\n           05  STV0400B-DATA           PIC  X(10)   VALUE SPACE.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-ERROR      PIC  X(06).\n               10  STV0400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-CYMD       PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAYS       PIC  X(05).\n               10  FILLER              PIC  X(05).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAY        PIC  X(09).\n               10  STV0400B-DAY-NBR    PIC  X.\n           05  STV0400B-DATA2          PIC  X(10)   VALUE SPACE.\n           05  STV0400B-IN             PIC  X(06)   VALUE SPACE.\n           05  STV0400B-OUT            PIC  X(06)   VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MIS0133B END  '.\n\n       LINKAGE SECTION.\n\n       01  PARM-FIELD.\n           05  PARM-LENGTH             PIC S9(04)    COMP.\n           05  PARM-PARM               PIC  X(10).\n\n      /\n       PROCEDURE DIVISION USING PARM-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           DISPLAY '      '.\n           DISPLAY '**** MIS0133B alter lrecl 133 records'.\n           PERFORM 0200-OPEN-FILES.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0000-PROCESS-INFILE.\n\n           DISPLAY '**** Records in INFILE   ' WS-READ-RCD-CNT.\n           DISPLAY '**** Records written     ' WS-WRITE-RCD-CNT.\n           DISPLAY '**** Records overlayed   ' WS-OVERLAY-CNT.\n           DISPLAY '**** Records inserted    ' WS-INS-RCD-CNT.\n           DISPLAY '**** Records in INRCD    ' WS-INRCD-MAX.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** MIS0133B cond code ' WS-RETURN-CODE\n                       ' sent by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** MIS0133B EOJ encountered '.\n           DISPLAY '      '.\n\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  INFILE.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0133B open error on INFILE'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN INPUT  INRCD.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0133B open error on INRCD'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0201                     TO WS-RETURN-CODE.\n           OPEN INPUT  PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0133B open error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0202                     TO WS-RETURN-CODE.\n           OPEN OUTPUT OUTFILE.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0133B open error on OUTFILE'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0201                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE OUTFILE.\n           CLOSE PARM01.\n           CLOSE INRCD.\n           CLOSE INFILE.\n\n       0000-PROCESS-INFILE.\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                      TO WS-SUB1\n               PERFORM 0000-LOAD-INRCD THRU\n                       0000-LOAD-INRCD-EXIT.\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                      TO WS-SUB1\n               PERFORM 0000-LOAD-PARM01 THRU\n                       0000-LOAD-PARM01-EXIT.\n           MOVE ZERO                          TO WS-READ-RCD-CNT.\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                      TO WS-SUB1 WS-SUB2\n               MOVE 1                         TO WS-HIGH\n               MOVE 2                         TO WS-LOW\n               MOVE 80                        TO WS-MAX\n               MOVE 2                         TO WS-MIN\n               PERFORM 0000-SELECT THRU\n                       0000-SELECT-EXIT\n                       UNTIL END-OF-OUTFILE.\n\n      ****************************************\n      *    load INRCD\n      ****************************************\n       0000-LOAD-INRCD.\n           READ INRCD.\n           IF WS-STAT = 10\n               MOVE WS-SUB1                   TO WS-INRCD-MAX\n               GO TO 0000-LOAD-INRCD-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0133B read error on INRCD'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0300                     TO WS-RETURN-CODE\n               GO TO 0000-LOAD-INRCD-EXIT.\n\n           IF WS-SUB1 < 9\n               ADD 1                          TO WS-SUB1\n               MOVE INRCD-RCD                 TO WS-INRCD(WS-SUB1).\n\n           GO TO 0000-LOAD-INRCD.\n\n       0000-LOAD-INRCD-EXIT. EXIT.\n\n      ****************************************\n      *    load PARM01\n      ****************************************\n       0000-LOAD-PARM01.\n           READ PARM01.\n           IF WS-STAT = 10\n               MOVE WS-SUB1                   TO WS-PARM01-MAX\n               GO TO 0000-LOAD-PARM01-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0133B read error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0700                     TO WS-RETURN-CODE\n               GO TO 0000-LOAD-PARM01-EXIT.\n\n           ADD 1                              TO WS-READ-RCD-CNT.\n           IF PARM01-DOCU = '*'\n               GO TO 0000-LOAD-PARM01.\n           IF WS-SUB1 < 20\n               ADD 1                          TO WS-SUB1\n           ELSE\n               DISPLAY '**** MIS0133B 10 parm limit reached'\n               GO TO 0000-LOAD-PARM01-EXIT.\n\n           MOVE PARM01-DATA                   TO WS-DATA(WS-SUB1).\n           IF PARM01-LEN NUMERIC\n               MOVE PARM01-LEN                TO WS-LEN(WS-SUB1)\n           ELSE\n               DISPLAY '**** parm len is not numeric '\n               DISPLAY '**** parm rcd: ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n           IF WS-LEN(WS-SUB1) < 1\n               OR WS-LEN(WS-SUB1) > 12\n               DISPLAY '**** parm len: 01 - 12 '\n               DISPLAY '**** parm rcd: ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n           IF PARM01-POS NUMERIC\n               MOVE PARM01-POS                TO WS-POS(WS-SUB1)\n           ELSE\n               DISPLAY '**** parm pos is not numeric '\n               DISPLAY '**** parm rcd: ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n           COMPUTE WS-F-MAX = WS-LEN(WS-SUB1) + WS-POS(WS-SUB1) - 1.\n           IF WS-F-MAX > 133\n               DISPLAY '**** len + pos > file length'\n               DISPLAY '**** parm rcd  ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n           IF PARM01-OFFSET NUMERIC\n               MOVE PARM01-OFFSET             TO WS-OFF(WS-SUB1)\n           ELSE\n               DISPLAY '**** parm offset is not numeric '\n               DISPLAY '**** parm rcd: ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n           IF WS-OFF(WS-SUB1) > 78\n               DISPLAY '**** parm offset: 00 - 78'\n               DISPLAY '**** parm rcd: ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n           IF PARM01-REL-LOC = '+' OR '-' OR SPACE\n               MOVE PARM01-REL-LOC            TO WS-REL(WS-SUB1)\n           ELSE\n               DISPLAY '**** parm rel loc: +/-/blank'\n               DISPLAY '**** parm rcd: ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n\n           MOVE PARM01-INS-DATA               TO WS-IDATA(WS-SUB1).\n           IF PARM01-INS-LEN NUMERIC\n               MOVE PARM01-INS-LEN            TO WS-ILEN(WS-SUB1)\n           ELSE\n               DISPLAY '**** parm ins-len is not numeric '\n               DISPLAY '**** parm rcd: ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n           IF PARM01-INS-DATA > SPACE\n               OR WS-ILEN(WS-SUB1) > ZERO\n               IF WS-ILEN(WS-SUB1) < 1\n                   OR WS-ILEN(WS-SUB1) > 12\n                   DISPLAY '**** parm ins len: 01 - 12 '\n                   DISPLAY '**** parm rcd: ' WS-READ-RCD-CNT\n                   MOVE +0400                 TO WS-RETURN-CODE.\n           IF PARM01-INS-POS NUMERIC\n               MOVE PARM01-INS-POS            TO WS-IPOS(WS-SUB1)\n           ELSE\n               DISPLAY '**** parm ins-pos is not numeric '\n               DISPLAY '**** parm rcd: ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n           COMPUTE WS-F-MAX = WS-ILEN(WS-SUB1) + WS-IPOS(WS-SUB1) - 1.\n           IF WS-F-MAX > 133\n               DISPLAY '**** ins len + ins pos > file length'\n               DISPLAY '**** parm rcd  ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n           IF PARM01-INS-RCD NUMERIC\n               MOVE PARM01-INS-RCD            TO WS-IRCD(WS-SUB1)\n           ELSE\n               DISPLAY '**** parm ins-rcd is not numeric '\n               DISPLAY '**** parm rcd  ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n           IF WS-IRCD(WS-SUB1) > WS-INRCD-MAX\n               DISPLAY '**** parm ins-rcd > actual ins-rcds '\n               DISPLAY '**** parm rcd: ' WS-READ-RCD-CNT\n               MOVE +0400                     TO WS-RETURN-CODE.\n\n           GO TO 0000-LOAD-PARM01.\n\n       0000-LOAD-PARM01-EXIT. EXIT.\n\n       0000-SELECT.\n           IF MORE-INFILE-RCDS\n               PERFORM 0000-READ-INFILE.\n           IF WS-RETURN-CODE > ZERO\n               MOVE 'Y'                       TO WS-END-OUTFILE-SW\n               GO TO 0000-SELECT-EXIT.\n\n      *---------------------------------------\n      *     place INFILE record into table\n      *     loop through table, top to bottom, comparing\n      *       parms against record contents.\n      *     if string found, insert INRCD records or overlay\n      *       with parm string as requested.\n      *---------------------------------------\n           PERFORM 0000-ADVANCE-TABLE.\n           PERFORM 0000-DETERMINE-INSERT\n               VARYING WS-SUB3 FROM WS-HIGH BY -1\n               UNTIL WS-SUB3 < WS-LOW.\n\n       0000-SELECT-EXIT. EXIT.\n\n       0000-READ-INFILE.\n           READ INFILE.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-RCD-CNT\n               MOVE INFILE-RCD                TO WS-INFILE-RCD\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-INFILE-SW\n               MOVE '*EOF*'                   TO WS-INFILE-RCD\n           ELSE\n               DISPLAY '**** MIS0133B read error on INFILE '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +1200                     TO WS-RETURN-CODE.\n\n      *---------------------------------------\n      *     1.  if table has room, move INFILE line to table,\n      *          inserting at bottom\n      *     2.  if table full, write top line, advance rest,\n      *           write INFILE line at bottom\n      *     3.  if table overflow at top, write extra top rcds,\n      *           advance rest, write INFILE line at bottom\n      *     4.  if table overflow at bottom, write top rcds\n      *           until room, write INFILE line at bottom\n      *---------------------------------------\n       0000-ADVANCE-TABLE.\n           IF WS-LOW < WS-MIN\n               PERFORM UNTIL WS-LOW > WS-MIN\n                   MOVE WS-LINE(WS-HIGH)      TO OUTFILE-RCD\n                   PERFORM 0000-WRITE-OUTFILE\n                   MOVE WS-HIGH               TO WS-TO WS-FROM\n                   SUBTRACT 1 FROM WS-FROM\n                   PERFORM 0000-ADVANCE-POSITIONS\n                       UNTIL WS-FROM < WS-LOW\n                   ADD 1                      TO WS-LOW\n               END-PERFORM\n               SUBTRACT 1 FROM WS-LOW\n               MOVE WS-INFILE-RCD             TO WS-LINE(WS-LOW)\n               MOVE SPACE                     TO WS-CHNG(WS-LOW)\n               MOVE SPACE                     TO WS-FLAG(WS-LOW)\n           ELSE\n           IF WS-HIGH < WS-MAX\n               MOVE WS-HIGH                   TO WS-FROM WS-TO\n               ADD 1                          TO WS-TO\n               PERFORM 0000-ADVANCE-POSITIONS\n                   UNTIL WS-FROM < WS-LOW\n               ADD 1                          TO WS-HIGH\n               MOVE WS-INFILE-RCD             TO WS-LINE(WS-LOW)\n               MOVE SPACE                     TO WS-CHNG(WS-LOW)\n               MOVE SPACE                     TO WS-FLAG(WS-LOW)\n           ELSE\n           IF WS-HIGH > WS-MAX\n               PERFORM UNTIL WS-HIGH < WS-MAX\n                   MOVE WS-LINE(WS-HIGH)      TO OUTFILE-RCD\n                   PERFORM 0000-WRITE-OUTFILE\n                   SUBTRACT 1 FROM WS-HIGH\n               END-PERFORM\n               MOVE WS-MAX                    TO WS-TO\n               MOVE WS-HIGH                   TO WS-FROM\n               PERFORM 0000-ADVANCE-POSITIONS\n                   UNTIL WS-FROM < WS-LOW\n               ADD 1                          TO WS-HIGH\n               MOVE WS-INFILE-RCD             TO WS-LINE(WS-LOW)\n               MOVE SPACE                     TO WS-CHNG(WS-LOW)\n               MOVE SPACE                     TO WS-FLAG(WS-LOW)\n           ELSE\n               MOVE WS-LINE(WS-HIGH)          TO OUTFILE-RCD\n               PERFORM 0000-WRITE-OUTFILE\n               MOVE WS-HIGH                   TO WS-FROM WS-TO\n               SUBTRACT 1 FROM WS-FROM\n               PERFORM 0000-ADVANCE-POSITIONS\n                   UNTIL WS-FROM < WS-LOW\n               MOVE WS-INFILE-RCD             TO WS-LINE(WS-LOW)\n               MOVE SPACE                     TO WS-CHNG(WS-LOW)\n               MOVE SPACE                     TO WS-FLAG(WS-LOW)\n           END-IF\n           END-IF\n           END-IF.\n\n       0000-DETERMINE-INSERT.\n           MOVE 'N'                           TO WS-FOUND-SW.\n           IF WS-FLAG(WS-SUB3) = SPACE\n               PERFORM 0000-PARM-LOOP\n                   VARYING WS-SUB1 FROM 1 BY 1\n                   UNTIL WS-SUB1 > WS-PARM01-MAX\n               IF WS-FOUND-SW = 'N'\n                   MOVE 'N'                   TO WS-FLAG(WS-SUB3).\n\n      *                \\\\|//\n      *                (. .)\n      *------------O00O-(_)-O00O--------------\n\n      *---------------------------------------\n      *    WS-SUB1  parm table reference\n      *    WS-SUB2  data reference\n      *    WS-SUB3  line table reference\n      *\n      *    WS-FLAG  space  compare parms to line\n      *             N      no parms matched this line -\n      *                    skip future parm comparisons\n      *    WS-CHNG  O      parm data was placed on this rcd\n      *             I      insertion record\n      *+--------------------------------------\n\n       0000-PARM-LOOP.\n           MOVE WS-DATA(WS-SUB1)              TO WS-HDATA.\n           MOVE WS-LEN(WS-SUB1)               TO WS-HLEN.\n           MOVE WS-POS(WS-SUB1)               TO WS-HPOS.\n           MOVE 'N'                           TO WS-OVERLAY-SW.\n           MOVE 'N'                           TO WS-INSERT-SW.\n\n           IF WS-HPOS > ZERO\n               MOVE WS-HPOS                   TO WS-SUB2\n               PERFORM 0000-SEARCH-INFILE\n           ELSE\n               COMPUTE WS-F-MAX = 133 - WS-HLEN + 1\n               PERFORM 0000-SEARCH-INFILE\n                   VARYING WS-SUB2 FROM 1 BY 1\n                   UNTIL WS-SUB2 > WS-F-MAX.\n\n           IF WS-OVERLAY-SW = 'Y'\n               MOVE 'O'                       TO WS-CHNG(WS-WORK1)\n               MOVE 'N'                       TO WS-FLAG(WS-SUB3)\n               ADD 1                          TO WS-OVERLAY-CNT.\n           IF WS-INSERT-SW = 'Y'\n               MOVE 'I'                       TO WS-CHNG(WS-WORK1)\n               MOVE 'N'                       TO WS-FLAG(WS-SUB3)\n               ADD 1                          TO WS-INS-RCD-CNT.\n\n       0000-SEARCH-INFILE.\n           IF WS-LINE(WS-SUB3)(WS-SUB2: WS-HLEN) =\n               WS-HDATA(1: WS-HLEN)\n               MOVE 'Y'                       TO WS-FOUND-SW\n               PERFORM 0000-PROCESS-PARM THRU\n                       0000-PROCESS-PARM-EXIT\n               MOVE WS-F-MAX                  TO WS-SUB2.\n\n      *---------------------------------------\n      *     search string if file was found\n      *     place replacement string on record in table\n      *       at offset location (if requested)\n      *       place at requested location or found string location\n      *     insert record from INRCD into table at offset\n      *       location (if requested)\n      *---------------------------------------\n       0000-PROCESS-PARM.\n           MOVE WS-OFF(WS-SUB1)               TO WS-HOFF.\n           MOVE WS-REL(WS-SUB1)               TO WS-HREL.\n           MOVE WS-IDATA(WS-SUB1)             TO WS-HIDATA.\n           MOVE WS-ILEN(WS-SUB1)              TO WS-HILEN.\n           MOVE WS-IPOS(WS-SUB1)              TO WS-HIPOS.\n           IF WS-HIPOS = ZERO\n               MOVE WS-SUB2                   TO WS-HIPOS.\n           MOVE WS-IRCD(WS-SUB1)              TO WS-HIRCD.\n           IF WS-HREL = '-'\n               COMPUTE WS-WORK1 = WS-SUB3 + WS-HOFF\n           ELSE\n               COMPUTE WS-WORK1 = WS-SUB3 - WS-HOFF.\n           IF WS-WORK1 < WS-LOW\n               OR WS-WORK1 > WS-HIGH\n               GO TO 0000-PROCESS-PARM-EXIT.\n           IF WS-HILEN > ZERO\n               MOVE WS-HIDATA(1: WS-HILEN) TO\n                    WS-LINE(WS-WORK1)(WS-HIPOS: WS-HILEN)\n               MOVE 'Y'                       TO WS-OVERLAY-SW.\n           IF WS-HIRCD > ZERO\n               IF WS-HIGH > 99\n                   DISPLAY '**** Access beyond top of table'\n                   DISPLAY '**** Insert skipped at ' WS-READ-RCD-CNT\n               ELSE\n                   MOVE WS-HIGH               TO WS-FROM WS-TO\n                   ADD 1                      TO WS-TO WS-HIGH\n                   PERFORM 0000-ADVANCE-POSITIONS\n                       UNTIL WS-FROM < WS-WORK1\n                   MOVE WS-INRCD(WS-HIRCD)    TO WS-LINE(WS-WORK1)\n                   MOVE SPACE                 TO WS-CHNG(WS-WORK1)\n                   MOVE SPACE                 TO WS-FLAG(WS-WORK1)\n                   ADD 1                      TO WS-SUB3\n                   MOVE 'Y'                   TO WS-INSERT-SW.\n\n       0000-PROCESS-PARM-EXIT. EXIT.\n\n       0000-ADVANCE-POSITIONS.\n           MOVE WS-LINE(WS-FROM)              TO WS-LINE(WS-TO).\n           MOVE WS-CHNG(WS-FROM)              TO WS-CHNG(WS-TO).\n           MOVE WS-FLAG(WS-FROM)              TO WS-FLAG(WS-TO).\n           SUBTRACT 1 FROM WS-FROM.\n           SUBTRACT 1 FROM WS-TO.\n\n       0000-WRITE-OUTFILE.\n           IF OUTFILE-RCD = '*EOF*'\n               MOVE 'Y'                       TO WS-END-OUTFILE-SW\n           ELSE\n           WRITE OUTFILE-RECORD\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0133B write error on OUTFILE'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +1200                     TO WS-RETURN-CODE\n           ELSE\n               ADD 1                          TO WS-WRITE-RCD-CNT.\n\n      ************************************ END MIS0133B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS0380B": {"ttr": 10243, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\"\\x01\\x19\\x15\\x1f\\x01\\x193o\\x12\\x13\\x01\\xbe\\x01\\xc6\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2019-05-31T00:00:00", "modifydate": "2019-12-02T12:13:22", "lines": 446, "newlines": 454, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  MIS0380B: submit purge requests to RMS'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MIS0380B.\n      ******************************************************************\n      *@@@ II submit purge requests to RMS\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ******************************************************************\n      * Date written: 01/19/2000\n      * Author      : Jim Iannone\n      *               loop through a list of RMS reports and submit\n      *               RMS purge commands to the internal reader.\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT RMSDEL               ASSIGN TO RMSDEL\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT INTRDR               ASSIGN TO INTRDR\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  RMSDEL\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  RMSDEL-RECORD.\n           05  FILLER                  PIC  X.\n           05  RMSDEL-FILE             PIC  X(08).\n           05  FILLER                  PIC  X.\n           05  RMSDEL-CLASS            PIC  X.\n           05  FILLER                  PIC  X.\n           05  RMSDEL-QUEUE            PIC  X(07).\n           05  FILLER                  PIC  X.\n           05  RMSDEL-JOB              PIC  X(08).\n           05  RMSDEL-JOB-DASH         PIC  X.\n           05  RMSDEL-JOB-NBR          PIC  X(05).\n           05  FILLER                  PIC  X.\n           05  RMSDEL-MDY              PIC  X(08).\n           05  FILLER REDEFINES RMSDEL-MDY.\n               10  FILLER              PIC  XX.\n               10  RMSDEL-MDY-3X1      PIC  X.\n               10  FILLER              PIC  XX.\n               10  RMSDEL-MDY-6X1      PIC  X.\n               10  FILLER              PIC  XX.\n           05  FILLER                  PIC  X.\n           05  RMSDEL-HMS              PIC  X(08).\n           05  FILLER REDEFINES RMSDEL-HMS.\n               10  FILLER              PIC  XX.\n               10  RMSDEL-HMS-3X1      PIC  X.\n               10  FILLER              PIC  XX.\n               10  RMSDEL-HMS-6X1      PIC  X.\n               10  FILLER              PIC  XX.\n           05  FILLER                  PIC  X.\n           05  RMSDEL-PAGES            PIC  X(05).\n           05  FILLER                  PIC  XX.\n           05  RMSDEL-LINES            PIC  X(07).\n           05  FILLER                  PIC  X.\n           05  RMSDEL-FORM             PIC  X(05).\n           05  FILLER                  PIC  X(06).\n           05  RMSDEL-NODE             PIC  X(08).\n           05  FILLER                  PIC  X.\n           05  RMSDEL-CODE             PIC  X(12).\n           05  FILLER                  PIC  X(18).\n           05  RMSDEL-KB-IN            PIC  X(08).\n           05  RMSDEL-KB-OUT           PIC  X(07).\n\n       FD  PARM01\n           RECORDING MODE F.\n       01  PARM01-RECORD.\n           05  PARM01-DOCU             PIC  X.\n           05  PARM01-MASK             PIC  X(08).\n           05  PARM01-FILLER           PIC  X(63).\n           05  FILLER                  PIC  X(08).\n\n       FD  INTRDR\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  INTRDR-RECORD.\n           05  INTRDR-PREFIX           PIC  X(06).\n           05  INTRDR-QUOTE1           PIC  X.\n           05  INTRDR-DATA             PIC  X(17).\n           05  INTRDR-QUOTE2           PIC  X.\n           05  INTRDR-FILLER           PIC  X(55).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working Storage MIS0380B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-PARM01-MAX           PIC  9(05)    VALUE ZERO.\n           05  WS-PARM-DAYS            PIC  9(05)    VALUE ZERO.\n           05  WS-WAIT-SECONDS         PIC  9(07)    VALUE ZERO.\n           05  WS-WAIT-MINUTES         PIC  9(07)    VALUE ZERO.\n           05  WS-WAIT-REMAIN          PIC  9(05)    VALUE ZERO.\n           05  WS-CALC-DAYS            PIC  9(05)    VALUE ZERO.\n           05  WS-CALL-STV0400B        PIC  X(08)    VALUE 'STV0400B'.\n           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-1-CYMD.\n               10  WS-1-CYMD-CC        PIC  XX.\n               10  WS-1-CYMD-YY        PIC  XX.\n               10  WS-1-CYMD-MM        PIC  XX.\n               10  WS-1-CYMD-DD        PIC  XX.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-RCD-CNT         PIC S9(07)    VALUE ZERO.\n           05  WS-PURGE-CNT            PIC S9(07)    VALUE ZERO.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  WS-END-RMSDEL-SW        PIC  X        VALUE 'N'.\n               88  END-OF-RMSDEL                     VALUE 'Y'.\n               88  MORE-RMSDEL-RCDS                  VALUE 'N'.\n           05  WS-DAY-SW               PIC  X        VALUE SPACE.\n           05  WS-MASK-SW              PIC  X        VALUE SPACE.\n\n       01  WS-TABLES.\n           05  WS-MASK-TABLE                         VALUE SPACE.\n               10  WS-MASK             PIC  X(08)\n                                       OCCURS 20 TIMES.\n\n       01  NEWWAIT-DATA.\n           05  NEWWAIT-LEN             PIC S9999     VALUE +3 COMP.\n           05  NEWWAIT-DELAY           PIC  999.\n\n      *    dataset mask comparison\n       01  WS-MIS0540B-FIELDS.\n           05  MIS0540B-MASK           PIC  X(44).\n           05  MIS0540B-DSN            PIC  X(44).\n           05  MIS0540B-DISPLAY        PIC  X.\n           05  MIS0540B-EDIT-NAMES     PIC  X.\n           05  MIS0540B-MATCH          PIC  XXX.\n\n       01  WS-STV0400B-FIELDS.\n           05  STV0400B-DATA           PIC  X(10)   VALUE SPACE.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X6        PIC  X(06).\n               10  STV0400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X8        PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAYS       PIC  X(05).\n               10  FILLER              PIC  X(05).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAY        PIC  X(09).\n               10  STV0400B-DAY-NBR    PIC  X.\n           05  STV0400B-DATA2          PIC  X(10)   VALUE SPACE.\n           05  STV0400B-IN             PIC  X(06)   VALUE SPACE.\n           05  STV0400B-OUT            PIC  X(06)   VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MIS0380B END  '.\n\n       LINKAGE SECTION.\n\n       01  PARM-FIELD.\n           05  PARM-LENGTH             PIC S9(04)    COMP.\n           05  PARM-FACILITY           PIC  X.\n           05  PARM-PROCESS            PIC  X.\n           05  PARM-DEL-DAYS           PIC  XXX.\n           05  PARM-DELAY              PIC  XXX.\n           05  PARM-EMERG              PIC  X.\n\n      /\n       PROCEDURE DIVISION USING PARM-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           DISPLAY '     '.\n           DISPLAY '**** MIS0380B submit purge requests to RMS'.\n           PERFORM 0200-OPEN-FILES.\n\n           MOVE ZERO                          TO WS-SUB1.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-LOAD-PARM01 THRU\n                       0300-LOAD-PARM01-EXIT.\n      *---------------------------------------\n      *  if no mask entered in parm, or a single mask of '*'...\n      *---------------------------------------\n           IF WS-PARM01-MAX = ZERO\n               MOVE '*'                       TO WS-MASK-SW\n           ELSE\n               PERFORM VARYING WS-SUB1 FROM 1 BY 1\n                   UNTIL WS-SUB1 > WS-PARM01-MAX\n                   IF WS-MASK(WS-SUB1) = '*'\n                       MOVE '*'               TO WS-MASK-SW\n                   END-IF\n               END-PERFORM\n           END-IF.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-RMSDEL.\n\n           COMPUTE WS-WAIT-SECONDS = NEWWAIT-DELAY * WS-PURGE-CNT.\n           DIVIDE WS-WAIT-SECONDS BY 60 GIVING WS-WAIT-MINUTES\n                  REMAINDER WS-WAIT-REMAIN.\n\n           IF PARM-EMERG = 'Y'\n               DISPLAY '**** Emergency overrides allowed'.\n           DISPLAY '**** Parm mask entries   ' WS-PARM01-MAX.\n           DISPLAY '**** Process code        ' PARM-PROCESS.\n           DISPLAY '**** Facility code       ' PARM-FACILITY.\n           DISPLAY '**** Delete days         ' WS-PARM-DAYS.\n           DISPLAY '**** Records in RMSDEL   ' WS-READ-RCD-CNT.\n           DISPLAY '**** Reports purged      ' WS-PURGE-CNT.\n           DISPLAY '**** Delay interval      ' NEWWAIT-DELAY.\n           DISPLAY '**** Delay min/sec       ' WS-WAIT-MINUTES\n                                               ' ' WS-WAIT-REMAIN.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** MIS0380B cond code ' WS-RETURN-CODE\n                       ' sent by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** MIS0380B EOJ encountered '.\n           DISPLAY '     '.\n\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  RMSDEL.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0380B open error on RMSDEL'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN INPUT  PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0380B open error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0201                     TO WS-RETURN-CODE.\n           OPEN OUTPUT INTRDR.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0380B open error on INTRDR'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0202                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE INTRDR.\n           CLOSE PARM01.\n           CLOSE RMSDEL.\n\n      *---------------------------------------\n      *    load PARM01\n      *---------------------------------------\n       0300-LOAD-PARM01.\n           READ PARM01.\n           IF WS-STAT = 10\n               MOVE WS-SUB1                   TO WS-PARM01-MAX\n               GO TO 0300-LOAD-PARM01-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0380B read error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0300                     TO WS-RETURN-CODE\n               GO TO 0300-LOAD-PARM01-EXIT.\n\n           IF PARM01-DOCU = '*'\n               OR PARM01-MASK = SPACE\n               GO TO 0300-LOAD-PARM01.\n           IF WS-SUB1 < 20\n               ADD 1                          TO WS-SUB1\n               MOVE PARM01-MASK               TO WS-MASK(WS-SUB1).\n           GO TO 0300-LOAD-PARM01.\n\n       0300-LOAD-PARM01-EXIT. EXIT.\n\n       0400-PROCESS-RMSDEL.\n           IF PARM-DEL-DAYS NUMERIC\n               MOVE PARM-DEL-DAYS             TO WS-PARM-DAYS\n           ELSE\n               DISPLAY '**** Parm del days not numeric '\n               DISPLAY '**** ' PARM-DEL-DAYS\n               MOVE +0400                     TO WS-RETURN-CODE.\n           IF PARM-EMERG NOT = 'Y'\n               IF WS-PARM-DAYS < 032\n                   MOVE 032                   TO WS-PARM-DAYS.\n           IF PARM-DELAY NUMERIC\n               MOVE PARM-DELAY                TO NEWWAIT-DELAY.\n           IF PARM-EMERG NOT = 'Y'\n               IF NEWWAIT-DELAY < 2\n                   MOVE 2                     TO NEWWAIT-DELAY.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0500-READ-RMSDEL THRU\n                       0500-READ-RMSDEL-EXIT\n                       UNTIL END-OF-RMSDEL.\n\n       0500-READ-RMSDEL.\n           READ RMSDEL.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-RCD-CNT\n               PERFORM 0600-SELECT THRU\n                       0600-SELECT-EXIT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-RMSDEL-SW\n           ELSE\n               DISPLAY '**** MIS0380B read error on RMSDEL '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0500                     TO WS-RETURN-CODE.\n\n       0500-READ-RMSDEL-EXIT. EXIT.\n\n       0600-SELECT.\n           IF RMSDEL-MDY-3X1 = '/'\n               AND RMSDEL-MDY-6X1 = '/'\n               AND RMSDEL-HMS-3X1 = '.'\n               AND RMSDEL-HMS-6X1 = '.'\n               AND RMSDEL-JOB-DASH = '-'\n               GO TO 0600-CONTINUE.\n\n           GO TO 0600-SELECT-EXIT.\n\n       0600-CONTINUE.\n           IF RMSDEL-CODE NOT = SPACE\n               GO TO 0600-SELECT-EXIT.\n           MOVE SPACE                         TO WS-DAY-SW.\n           PERFORM 0800-DETERMINE-DAYS.\n           IF WS-MASK-SW NOT = '*'\n               MOVE SPACE                     TO WS-MASK-SW\n               PERFORM 1000-TEST-MASK\n                   VARYING WS-SUB1 FROM 1 BY 1\n                   UNTIL WS-SUB1 > WS-PARM01-MAX\n                   OR WS-MASK-SW = 'Y'.\n           IF WS-DAY-SW = 'Y'\n             IF WS-MASK-SW = 'Y' OR '*'\n                 PERFORM 0900-BUILD-DEL-RCD.\n\n       0600-SELECT-EXIT. EXIT.\n\n       0800-DETERMINE-DAYS.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE RMSDEL-MDY                    TO STV0400B-DATA.\n           MOVE 'M/D/Y '                      TO STV0400B-IN.\n           MOVE 'CYMD  '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           IF STV0400B-1X6 = 'ERROR'\n               DISPLAY '**** STV0400B date conversion error '\n               DISPLAY '**** Error = ' STV0400B-NBR\n               MOVE +0800                     TO WS-RETURN-CODE\n           ELSE\n               MOVE 'CYMD  '                  TO STV0400B-IN\n               MOVE 'DAYS  '                  TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               IF STV0400B-1X6 = 'ERROR'\n                   DISPLAY '**** STV0400B days calc error '\n                   DISPLAY '**** Error = ' STV0400B-NBR\n                   MOVE +0801                 TO WS-RETURN-CODE\n               ELSE\n               IF STV0400B-DAYS NOT NUMERIC\n                   DISPLAY '**** STV0400B days not numeric '\n                   DISPLAY '**** Error = ' STV0400B-DAYS\n                   MOVE +0802                 TO WS-RETURN-CODE\n               ELSE\n                   MOVE STV0400B-DAYS         TO WS-CALC-DAYS\n                   IF WS-CALC-DAYS > WS-PARM-DAYS\n                       MOVE 'Y'               TO WS-DAY-SW.\n\n       0900-BUILD-DEL-RCD.\n           MOVE SPACE                         TO INTRDR-DATA.\n           MOVE SPACE                         TO INTRDR-FILLER.\n           MOVE '/*$VS,'                      TO INTRDR-PREFIX.\n           IF PARM-FACILITY = 'C'\n               STRING 'F RMS2,PF '            DELIMITED BY SIZE\n                      RMSDEL-QUEUE            DELIMITED BY SIZE\n                      INTO INTRDR-DATA\n           ELSE\n               STRING 'F RMS,PF '             DELIMITED BY SIZE\n                      RMSDEL-QUEUE            DELIMITED BY SIZE\n                      INTO INTRDR-DATA.\n           MOVE QUOTE                         TO INTRDR-QUOTE1.\n           MOVE QUOTE                         TO INTRDR-QUOTE2.\n           PERFORM 1200-WRITE-INTRDR.\n\n      *---------------------------------------\n      *    Call NEWWAIT: delay processing to avoid flooding\n      *    the internal reader\n      *+--------------------------------------\n           IF PARM-PROCESS = 'Y'\n               CALL 'NEWWAIT' USING NEWWAIT-DATA.\n\n      *---------------------------------------\n      *    Test report name against a report name mask,\n      *    to select only specified reports for deletion.\n      *---------------------------------------\n       1000-TEST-MASK.\n           MOVE WS-MASK(WS-SUB1)              TO MIS0540B-MASK.\n           MOVE RMSDEL-FILE                   TO MIS0540B-DSN.\n           MOVE SPACE                         TO MIS0540B-MATCH\n                                                 MIS0540B-DISPLAY\n                                                 MIS0540B-EDIT-NAMES.\n           CALL 'MIS0540B' USING MIS0540B-MASK MIS0540B-DSN\n                                 MIS0540B-DISPLAY MIS0540B-EDIT-NAMES\n                                 MIS0540B-MATCH.\n           IF MIS0540B-MATCH NUMERIC\n               DISPLAY '**** MIS0545B call error to MIS0540B'\n               DISPLAY '**** Code = ' MIS0540B-MATCH\n               MOVE +0900                     TO WS-RETURN-CODE\n           ELSE\n           IF MIS0540B-MATCH = 'YES'\n               MOVE 'Y'                       TO WS-MASK-SW.\n\n       1200-WRITE-INTRDR.\n           IF PARM-PROCESS = 'Y'\n               WRITE INTRDR-RECORD\n               MOVE '/*EOF '                  TO INTRDR-RECORD\n               WRITE INTRDR-RECORD.\n           ADD 1                              TO WS-PURGE-CNT.\n           IF WS-PURGE-CNT = 1\n               DISPLAY '****'\n               DISPLAY '**** The following were selected for deletion '\n               DISPLAY '****'\n               DISPLAY '**** Report    Queue #  Date     # days'\n               DISPLAY '**** --------  -------  -------- ------'.\n           DISPLAY '**** ' RMSDEL-FILE '  ' RMSDEL-QUEUE\n                   '  ' RMSDEL-MDY '  ' WS-CALC-DAYS.\n\n      ************************************ END MIS0380B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS0400B": {"ttr": 10251, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x000\\x01\\x19\\x07/\\x01\\x193o\\x12\\x14\\x01x\\x01q\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-12-02T12:14:30", "lines": 376, "newlines": 369, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  MIS0400B: validate Cobol compiles '.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MIS0400B.\n      ******************************************************************\n      *@@@ II edit Cobol programs for invalid commands\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ******************************************************************\n      * Date written: 10/11/94\n      * Author      : Jim Iannone\n      *               Loop through Cobol program source searching for\n      *               Cobol II commands such as 'inspect' and 'string'.\n      *               Notify the user that such commands are present\n      *               in what should be OS/VS Cobol source.\n      *               Either the source should be changed or the\n      *               wrong compiler was accidently used.\n      *               Also check program for called programs compiled\n      *               using older versions of cobol, or vice versa,\n      *               based on manual entries in the input parm.\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT INPROG               ASSIGN TO INPROG\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  INPROG\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  INPROG-RECORD.\n           05  INPROG-AREA             PIC  X(80).\n           05  FILLER REDEFINES INPROG-AREA.\n               10  FILLER              PIC  X(06).\n               10  INPROG-COMMENT      PIC  X.\n               10  INPROG-LINE         PIC  X(65).\n               10  FILLER              PIC  X(08).\n           05  FILLER REDEFINES INPROG-AREA.\n               10  FILLER              PIC  X(07).\n               10  INPROG-LINKAGE      PIC  X(07).\n               10  FILLER REDEFINES INPROG-LINKAGE.\n                   15  INPROG-TITLE    PIC  X(05).\n                   15  FILLER          PIC  XX.\n               10  FILLER              PIC  X(66).\n\n       FD  PARM01\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  PARM01-RECORD.\n           05  PARM01-FLAG             PIC  X.\n           05  PARM01-LEVEL            PIC  X(08).\n           05  FILLER                  PIC  X.\n           05  PARM01-SW1              PIC  X.\n           05  PARM01-SW2              PIC  X.\n           05  PARM01-SW3              PIC  X.\n           05  PARM01-SW4              PIC  X.\n           05  FILLER                  PIC  X.\n           05  PARM01-LEN              PIC  XX.\n           05  FILLER                  PIC  X.\n           05  PARM01-POS              PIC  XX.\n           05  FILLER                  PIC  X.\n           05  PARM01-DATA             PIC  X(20).\n           05  FILLER                  PIC  X.\n           05  PARM01-MSG              PIC  X(30).\n           05  FILLER                  PIC  X(08).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage MIS0400B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-LENGTH               PIC  99       VALUE ZERO.\n           05  WS-POSITION             PIC  99       VALUE ZERO.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-RCD-CNT         PIC S9(07)    VALUE ZERO.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(05)    VALUE ZERO.\n           05  WS-PARM01-MAX           PIC S9(05)    VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  WS-END-INPROG-SW        PIC  X        VALUE 'N'.\n               88  END-OF-INPROG                     VALUE 'Y'.\n               88  MORE-INPROG-RCDS                  VALUE 'N'.\n           05  WS-ENVIRON-SW           PIC  X        VALUE SPACE.\n           05  WS-WORKING-SW           PIC  X        VALUE SPACE.\n           05  WS-LINKAGE-SW           PIC  X        VALUE SPACE.\n           05  WS-PROCEDURE-SW         PIC  X        VALUE SPACE.\n\n       01  WS-TABLES.\n           05  WS-PARM-TABLE.\n               10  WS-PARM             OCCURS 120 TIMES.\n                   15  WS-LEVEL        PIC  X(08).\n                   15  WS-SW1          PIC  X.\n                   15  WS-SW2          PIC  X.\n                   15  WS-SW3          PIC  X.\n                   15  WS-SW4          PIC  X.\n                   15  WS-LEN          PIC  XX.\n                   15  WS-POS          PIC  XX.\n                   15  WS-DATA         PIC  X(20).\n                   15  WS-MSG          PIC  X(30).\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MIS0400B END  '.\n\n\n       LINKAGE SECTION.\n\n       01  PARM-FIELD.\n           05  PARM-LENGTH             PIC S9(04)    COMP.\n           05  PARM-LEVEL              PIC  X(08).\n           05  PARM-PROG               PIC  X(08).\n\n      /\n       PROCEDURE DIVISION USING PARM-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           DISPLAY '     '.\n           DISPLAY '**** MIS0400B inspect for cobol program issues'.\n           IF PARM-LEVEL = 'SKIP    '\n               STOP RUN.\n           PERFORM 0200-OPEN-FILES.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-INPROG.\n\n           DISPLAY '**** Lines in ' PARM-PROG '  ' WS-READ-RCD-CNT.\n           DISPLAY '**** Compile type is ' PARM-LEVEL.\n\n           IF WS-RETURN-CODE = ZERO OR 0200\n               PERFORM 0300-CLOSE-FILES.\n           IF WS-RETURN-CODE NOT = ZERO\n               DISPLAY '**** MIS0400B cond code ' WS-RETURN-CODE\n                       ' sent by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** MIS0400B EOJ encountered '.\n           DISPLAY '     '.\n\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  INPROG.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0400B open error on INPROG'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0100                     TO WS-RETURN-CODE.\n           OPEN INPUT  PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0400B open error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0100                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE PARM01.\n           CLOSE INPROG.\n\n       0400-PROCESS-INPROG.\n           PERFORM\n               VARYING WS-SUB2 FROM 1 BY 1\n               UNTIL WS-SUB2 > 120\n               MOVE SPACE                     TO WS-PARM(WS-SUB2)\n           END-PERFORM.\n           PERFORM 0500-GET-PARM01 THRU\n                   0500-GET-PARM01-EXIT.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0600-READ-INPROG\n                   UNTIL END-OF-INPROG.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 1100-FIND-NOT-FOUND\n                   VARYING WS-SUB2 FROM 1 BY 1\n                   UNTIL WS-SUB2 > WS-PARM01-MAX.\n\n       0500-GET-PARM01.\n           READ PARM01.\n           IF WS-STAT = 10\n               GO TO 0500-GET-PARM01-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0400B read error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0500                     TO WS-RETURN-CODE\n               GO TO 0500-GET-PARM01-EXIT.\n\n           IF PARM01-FLAG = '*'\n               GO TO 0500-GET-PARM01.\n           IF PARM01-LEVEL = SPACE\n               DISPLAY '**** MIS0400B parm Cobol type not found'\n               GO TO 0500-GET-PARM01-EXIT.\n           IF PARM01-LEN NOT NUMERIC\n               DISPLAY '**** MIS0400B parm length not numeric'\n               GO TO 0500-GET-PARM01-EXIT.\n           IF PARM01-POS NOT NUMERIC\n               DISPLAY '**** MIS0400B parm position not numeric'\n               GO TO 0500-GET-PARM01-EXIT.\n           IF WS-PARM01-MAX < 120\n               ADD 1                      TO WS-PARM01-MAX\n               MOVE PARM01-LEVEL          TO WS-LEVEL (WS-PARM01-MAX)\n               MOVE PARM01-SW1            TO WS-SW1 (WS-PARM01-MAX)\n               MOVE PARM01-SW2            TO WS-SW2 (WS-PARM01-MAX)\n               MOVE PARM01-SW3            TO WS-SW3 (WS-PARM01-MAX)\n               MOVE PARM01-SW4            TO WS-SW4 (WS-PARM01-MAX)\n               MOVE PARM01-DATA           TO WS-DATA (WS-PARM01-MAX)\n               MOVE PARM01-MSG            TO WS-MSG (WS-PARM01-MAX)\n               MOVE PARM01-POS            TO WS-POS (WS-PARM01-MAX)\n               MOVE PARM01-LEN            TO WS-LEN (WS-PARM01-MAX).\n\n           GO TO 0500-GET-PARM01.\n\n       0500-GET-PARM01-EXIT. EXIT.\n\n       0600-READ-INPROG.\n           READ INPROG.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-RCD-CNT\n               PERFORM 0700-SELECT THRU\n                       0700-SELECT-EXIT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-INPROG-SW\n           ELSE\n               DISPLAY '**** MIS0400B read error on INPROG '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0100                     TO WS-RETURN-CODE.\n\n       0700-SELECT.\n           IF INPROG-LINE = SPACE\n               GO TO 0700-SELECT-EXIT.\n           IF INPROG-LINKAGE = 'ENVIRON'\n               MOVE 'Y'                       TO WS-ENVIRON-SW\n           ELSE IF INPROG-LINKAGE = 'WORKING'\n               MOVE 'Y'                       TO WS-WORKING-SW\n           ELSE IF INPROG-LINKAGE = 'LINKAGE'\n               MOVE 'Y'                       TO WS-LINKAGE-SW\n           ELSE IF INPROG-LINKAGE = 'PROCEDU'\n               MOVE 'Y'                       TO WS-PROCEDURE-SW\n               MOVE 'Y'                       TO WS-LINKAGE-SW.\n\n           PERFORM 0900-LOOP-THRU-PARM THRU\n                   0900-LOOP-THRU-PARM-EXIT\n                   VARYING WS-SUB2 FROM 1 BY 1\n                   UNTIL WS-SUB2 > WS-PARM01-MAX.\n\n       0700-SELECT-EXIT. EXIT.\n\n      ****************************************\n      *    It is important that 'C' records  (PARM01-SW1 = C)\n      *    be at the top of the parm.  Having this skip for\n      *    the commented records will reduce total I/O.\n      *    The 'C' allows for searches through commented lines.\n      ****************************************\n       0900-LOOP-THRU-PARM.\n           IF INPROG-COMMENT = '*' OR '-'\n               IF WS-SW1(WS-SUB2) NOT = 'C'\n                   MOVE WS-PARM01-MAX         TO WS-SUB2\n                   GO TO 0900-LOOP-THRU-PARM-EXIT.\n      ****************************************\n      *    ENVIRONMENT SW   perform search when 1=ON / 2=OFF\n      *    WORKING SW       perform search when 3=ON / 4=OFF\n      *    LINKAGE SW       perform search when 5=ON / 6=OFF\n      *    PROCEDURE SW     perform search when 7=ON / 8=OFF\n      ****************************************\n           IF WS-PROCEDURE-SW = 'Y'\n               AND WS-SW2(WS-SUB2) = '8'\n               GO TO 0900-LOOP-THRU-PARM-EXIT\n           ELSE IF WS-PROCEDURE-SW = SPACE\n               AND WS-SW2(WS-SUB2) = '7'\n               GO TO 0900-LOOP-THRU-PARM-EXIT\n           ELSE IF WS-LINKAGE-SW = 'Y'\n               AND WS-SW2(WS-SUB2) = '6'\n               GO TO 0900-LOOP-THRU-PARM-EXIT\n           ELSE IF WS-LINKAGE-SW = SPACE\n               AND WS-SW2(WS-SUB2) = '5'\n               GO TO 0900-LOOP-THRU-PARM-EXIT\n           ELSE IF WS-WORKING-SW = 'Y'\n               AND WS-SW2(WS-SUB2) = '4'\n               GO TO 0900-LOOP-THRU-PARM-EXIT\n           ELSE IF WS-WORKING-SW = SPACE\n               AND WS-SW2(WS-SUB2) = '3'\n               GO TO 0900-LOOP-THRU-PARM-EXIT\n           ELSE IF WS-ENVIRON-SW = 'Y'\n               AND WS-SW2(WS-SUB2) = '2'\n               GO TO 0900-LOOP-THRU-PARM-EXIT\n           ELSE IF WS-ENVIRON-SW = SPACE\n               AND WS-SW2(WS-SUB2) = '1'\n               GO TO 0900-LOOP-THRU-PARM-EXIT.\n\n           IF WS-LEVEL(WS-SUB2) NOT = 'ALL     '\n               IF PARM-LEVEL NOT = WS-LEVEL(WS-SUB2)\n                   GO TO 0900-LOOP-THRU-PARM-EXIT.\n\n           MOVE WS-LEN(WS-SUB2)               TO WS-LENGTH.\n           IF WS-POS(WS-SUB2) > ZERO\n               MOVE WS-POS(WS-SUB2)           TO WS-POSITION\n               MOVE WS-POSITION               TO WS-SUB1\n               PERFORM 1000-SEARCH-RCD THRU\n                       1000-SEARCH-RCD-EXIT\n           ELSE\n               PERFORM 1000-SEARCH-RCD THRU\n                       1000-SEARCH-RCD-EXIT\n                       VARYING WS-SUB1 FROM 7 BY 1\n                       UNTIL WS-SUB1 > 64.\n\n       0900-LOOP-THRU-PARM-EXIT. EXIT.\n\n      ****************************************\n      *    test for the word anywhere in the line\n      ****************************************\n       1000-SEARCH-RCD.\n           IF INPROG-RECORD(WS-SUB1: WS-LENGTH) =\n               WS-DATA(WS-SUB2)(1: WS-LENGTH)\n               IF WS-SW4(WS-SUB2) = 'Y' OR 'F'\n                   MOVE 'F'                   TO WS-SW4(WS-SUB2)\n                   IF WS-SW3(WS-SUB2) = 'N'\n                       MOVE 64                TO WS-SUB1\n                   ELSE\n                       MOVE 64                TO WS-SUB1\n                       MOVE +0200             TO WS-RETURN-CODE\n               ELSE\n                   DISPLAY '**** ' Parm-prog ': ' WS-MSG(WS-SUB2)\n                           '  Line: ' WS-READ-RCD-CNT\n                   IF WS-SW3(WS-SUB2) = 'N'\n                       MOVE 64                TO WS-SUB1\n                   ELSE\n                       MOVE 64                TO WS-SUB1\n                       MOVE +0200             TO WS-RETURN-CODE\n           ELSE\n      ****************************************\n      *    test for the word at the front of the line\n      ****************************************\n           IF WS-SW1(WS-SUB2) = 'F'\n               IF INPROG-RECORD(WS-SUB1: 1) > SPACE\n                   MOVE 64                    TO WS-SUB1.\n\n       1000-SEARCH-RCD-EXIT. EXIT.\n\n      ****************************************\n      *    loop through PARM01 array to determine, after the fact,\n      *    if any strings were not found that should have been found.\n      ****************************************\n       1100-FIND-NOT-FOUND.\n           IF WS-SW4(WS-SUB2) = 'Y'\n               IF PARM-LEVEL = WS-LEVEL(WS-SUB2)\n                   OR WS-LEVEL(WS-SUB2) = 'ALL     '\n                   DISPLAY '**** ' PARM-PROG ': ' WS-MSG(WS-SUB2)\n                   IF WS-SW3(WS-SUB2) = 'N'\n                       CONTINUE\n                   ELSE\n                       MOVE +0200                 TO WS-RETURN-CODE.\n\n      ************************************ END MIS0400B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS0425B": {"ttr": 10502, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x008\\x01\\x19\\x07/\\x01 \\x05/\\x14&\\x02\\xfd\\x02\\xf8\\x00\\x00\\xd4\\xc9\\xe2\\xf1\\xf4\\xf6@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2020-02-21T14:26:38", "lines": 765, "newlines": 760, "modlines": 0, "user": "MIS146"}, "text": "\n       TITLE '  MIS0425B: UPDATE DATES IN STATIC PARM'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MIS0425B.\n      ************************************************************CX003B\n      *@@@ C3 update dates and other data in static parm\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ******************************************************************\n      * Date written: 08/11/95\n      * Author      : Jim Iannone\n      *               Given the type of date, position of the date\n      *               in the record, and the record number, update\n      *               a static parm or other 80 byte record with\n      *               the date passed in the linkage section\n      *               (which, if desired, may be obtained using\n      *               input from MIS0500B).\n      *\n      *               Non-date data may be placed in the static\n      *               parm as well - see examples below.\n      *--------------------------------------------------------------\n      *\n      *    MIS0425B can also calculate the date, in which case a\n      *    previous update job is not required.\n      *    pass the following MIS0500B values and MIS0425B\n      *    will calculate the date:\n      *        CMDX   CMF###   CMFE##   CMFEY#\n      *               CMD###   CMDE##   CMDEY#\n      *\n      *    static parm 'offset' will allow an offset to\n      *    the current date if processing falls behind.\n      *\n      *--------------------------------------------------------------\n      *\n      *    example of symbolic passed in linkage section:\n      *\n      *    in JCL:   PARMFX='MDC1012001NCMD002'\n      *    in JCL:   PARM='&PARMFX/',\n      *    result    current date (19981209) minus 2 days:\n      *              12/07/1998 in pos 12 of 1st record\n      *\n      *--------------------------------------------------------------\n      *\n      *    example of input date passed in linkage section:\n      *\n      *    in JCL:   PARMFX='YMD0820002N',CMDX='19950811'\n      *    in JCL:   PARM='&PARMFX&CMDX/',\n      *    result    95/08/11 in pos 20 of 2nd record\n      *\n      *    in JCL:   PARMFX='MDC1012001N',CMDX='19950811'\n      *    in JCL:   PARM='&PARMFX&CMDX/',\n      *    result    08/11/1995 in pos 12 of 1st record\n      *\n      *    in JCL:   PARMFX='DMY0614001N',EOMDATE='08/31/95'\n      *    in JCL:   PARM='&PARMFX&EOMDATE/'\n      *    result    310895 in pos 14 of 1st record\n      *\n      *    in JCL:   PARMFX='CMD0415001N',CURREOM='08/31/95'\n      *    in JCL:   PARM='&PARMFX&CURREOM/'\n      *    result    1995 in pos 15 of 1st record\n      *\n      *    in JCL:   PARMFX='YMD0206123N',YESTDAY='08/31/95'\n      *    in JCL:   PARM='&PARMFX&YESTDAY/'\n      *    result    95 in pos 6 of 123rd record\n      *\n      *    in JCL:   PARMFX='HMS0506123N',HMSX=13213,\n      *    in JCL:   PARM='&PARMFX&HMSX/'\n      *    result    13:21 in pos 6 of 123rd record\n      *\n      *    in JCL:   PARMFX='JUL0509004N',CMDX='19951019'\n      *    in JCL:   PARM='&PARMFX&CMDX/'\n      *    result    95292 in pos 9 of 4th record\n      *\n      *    in JCL:   PARMFX='JUL0608006N',CMDE02='19950630'\n      *    in JCL:   PARM='&PARMFX&CMDE02/'\n      *    result    95/181 in pos 8 of 6th record\n      *\n      *    in JCL:   PARMFX='JUL0708006N',CMDX='19951019'\n      *    in JCL:   PARM='&PARMFX&CMDX/'\n      *    result    1995292 in pos 8 of 6th record\n      *\n      *    in JCL:   PARMFX='JUL0811009N',CMDEY1='19941231'\n      *    in JCL:   PARM='&PARMFX&CMDEY1/'\n      *    result    1994/365 in pos 11 of 9th record\n      *\n      *    Rules: 1  the date may only be passed in mm/dd/yy\n      *              or ccyymmdd format\n      *           2  format must be cmd,mdc,dmc,ymd,mdy,dmy,jul\n      *           3  ymd,mdy,dmy: length must be 02,04,05,06,08\n      *              cmd,mdc,dmc: length must be 04,06,07,08,10\n      *              jul: length must be 03,05,06,07,08\n      *           4  (position + length - 1) cannot exceed 72\n      *           5  if a time: length must be 02,04,05,06,07,08\n      *                         must be passed in hhmms format\n      *\n      *\n      *    note: to update multiple dates in a static parm, simply\n      *          run this job more than once against the same parm,\n      *          using different dates and/or format options,\n      *          or use CHNGFILE\n      *--------------------------------------------------------------\n      *\n      *    other types of data may be passed to a 80 byte record\n      *    as well:  simply place 'XXX' in the parm-seq field\n      *    and place the length of the data being passed in the\n      *    the parm-len field.\n      *\n      *    example of non-date data passed in linkage section:\n      *\n      *    in JCL:   PARMFX='XXX0420002N',DATA='PRGB'\n      *    in JCL:   PARM='&PARMFX&DATA/',\n      *    result    PRGB is placed in pos 20 of 2nd record\n      *\n      *    Rules: 1  format must be 'XXX'\n      *           2  (position + length - 1) cannot exceed 72\n      *           3  if length is greater than actual string length:\n      *              - '/' is included at end of string\n      *              - following that, low values are appended until\n      *                  stated length is reached\n      *--------------------------------------------------------------\n      *\n      *    condition code logic has been removed.  use MIS0685B.\n      *\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT PARMFX               ASSIGN TO PARMFX\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT OFFSET               ASSIGN TO OFFSET\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  PARMFX\n           RECORDING MODE F.\n       01  PARMFX-RECORD.\n           05  FILLER                  PIC  X(72).\n           05  FILLER                  PIC  X(08).\n\n       FD  OFFSET\n           RECORDING MODE F.\n       01  OFFSET-RECORD.\n           05  OFFSET-DOCU             PIC  X.\n           05  OFFSET-AMOUNT.\n               10  OFFSET-PAST-FUT     PIC  X.\n               10  OFFSET-OFFSET       PIC  X(05).\n           05  FILLER                  PIC  X(10).\n           05  OFFSET-BATCH-SW         PIC  X.\n           05  FILLER                  PIC  X(62).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage MIS0425B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-POS-N                PIC  999      VALUE ZERO.\n           05  WS-LEN-N                PIC  999      VALUE ZERO.\n           05  WS-SUM-N                PIC  9(04)    VALUE ZERO.\n           05  WS-CODE-N               PIC  9(04)    VALUE ZERO.\n           05  WS-FLAG-N               PIC  9        VALUE ZERO.\n           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-1-CYMD.\n               10  WS-1-CYMD-CC        PIC  99.\n               10  WS-1-CYMD-YY        PIC  99.\n               10  WS-1-CYMD-MM        PIC  99.\n               10  WS-1-CYMD-DD        PIC  99.\n           05  WS-1-MDY                PIC  X(06)    VALUE SPACE.\n           05  FILLER REDEFINES WS-1-MDY.\n               10  WS-1-MDY-MM         PIC  99.\n               10  WS-1-MDY-DD         PIC  99.\n               10  WS-1-MDY-YY         PIC  99.\n           05  WS-1-HMS                PIC  X(06)    VALUE SPACE.\n           05  WS-2-HMS                PIC  X(06)    VALUE SPACE.\n           05  WS-DATA                 PIC  X(72)    VALUE SPACE.\n           05  WS-OFFSET               PIC  X(06)    VALUE SPACE.\n           05  WS-CALL-STV0400B        PIC  X(08)    VALUE 'STV0400B'.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-RCD-CNT         PIC S9(07)    VALUE ZERO.\n           05  WS-RCD-N                PIC S9(07)    VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  WS-END-PARMFX-SW        PIC  X        VALUE 'N'.\n               88  END-OF-PARMFX                     VALUE 'Y'.\n               88  MORE-PARMFX-RCDS                  VALUE 'N'.\n           05  WS-REWRITE-SW           PIC  X        VALUE SPACE.\n           05  WS-OFFSET-SW            PIC  X        VALUE SPACE.\n\n      *    return the day of the week given a date in ccyymmdd format\n       01  WS-STV0400B-FIELDS.\n           05  STV0400B-DATA           PIC  X(10)   VALUE SPACE.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X6        PIC  X(06).\n               10  STV0400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X8        PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X9        PIC  X(09).\n               10  STV0400B-DAY-NBR    PIC  X.\n           05  STV0400B-DATA2          PIC  X(10)   VALUE SPACE.\n           05  STV0400B-IN             PIC  X(06)   VALUE SPACE.\n           05  STV0400B-OUT            PIC  X(06)   VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MIS0425B END  '.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELD.\n           05  LS-LENGTH               PIC S9(04)    COMP.\n           05  LS-INITIAL              PIC  X(10).\n           05  LS-PLACEMENT REDEFINES LS-INITIAL.\n               10  LS-SEQ              PIC  XXX.\n               10  LS-LEN              PIC  XX.\n               10  LS-POS              PIC  XX.\n               10  LS-RCD              PIC  XXX.\n           05  LS-OFFSET-SW            PIC  X.\n           05  LS-DATA                 PIC  X(70).\n           05  LS-LONG-DATE REDEFINES LS-DATA.\n               10  LS-L1               PIC  XX.\n               10  LS-SLASH1           PIC  X.\n               10  LS-L2               PIC  XX.\n               10  LS-SLASH2           PIC  X.\n               10  LS-L3               PIC  XX.\n               10  FILLER              PIC  X(62).\n           05  LS-SHORT-DATE REDEFINES LS-DATA.\n               10  LS-S1               PIC  XX.\n               10  LS-S2               PIC  XX.\n               10  LS-S3               PIC  XX.\n               10  LS-S4               PIC  XX.\n               10  FILLER              PIC  X(62).\n           05  LS-SYMBOLIC-DATA REDEFINES LS-DATA.\n               10  LS-SYMBOL           PIC  X(08).\n               10  FILLER              PIC  X(62).\n           05  FILLER                  PIC  X.\n\n      /\n       PROCEDURE DIVISION USING LS-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           DISPLAY '    '.\n           DISPLAY '**** MIS0425B place dates into files'.\n           PERFORM 0200-OPEN-FILES.\n\n      *---------------------------------------\n      *    wherever MIS0425B generates a date (rather than\n      *    passing along a parm date), alter the date by\n      *    ws-offset amount if requested (parm-offset-sw = y).\n      *+--------------------------------------\n           MOVE '-00000'                      TO WS-OFFSET.\n           MOVE SPACE                         TO WS-OFFSET-SW.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-LOAD-OFFSET THRU\n                       0300-LOAD-OFFSET-EXIT.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-OFFSET                     TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-1X8                  TO WS-1-CYMD.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-EDIT-PARM THRU\n                       0400-EDIT-PARM-EXIT.\n           IF WS-RETURN-CODE = ZERO\n               IF LS-SEQ = 'XXX'\n                   MOVE LS-DATA(1: WS-LEN-N)    TO WS-DATA\n               ELSE\n               IF LS-SEQ = 'HMS'\n                   PERFORM 0500-DETERMINE-TIME\n               ELSE\n                   PERFORM 0500-DETERMINE-DATE.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0600-READ-PARMFX\n                   UNTIL END-OF-PARMFX\n               IF WS-READ-RCD-CNT < WS-RCD-N\n                   DISPLAY '**** MIS0425B eof before parm rcd found'\n                   MOVE 0100                  TO WS-RETURN-CODE\n               ELSE\n                   DISPLAY '**** Parm records read: ' WS-READ-RCD-CNT.\n\n           IF WS-OFFSET NOT = '-00000'\n             IF WS-OFFSET-SW = 'Y'\n                 DISPLAY '---> Warning - dates offset by '\n                          WS-OFFSET ' days '.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** MIS0425B cond code ' WS-RETURN-CODE\n                       ' sent by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** MIS0425B EOJ encountered '.\n           DISPLAY '    '.\n\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN I-O  PARMFX.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0425B open error on PARMFX'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN INPUT OFFSET.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0425B open error on OFFSET'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0201                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE OFFSET.\n           CLOSE PARMFX.\n\n      ****************************************\n      *    LOAD OFFSET\n      ****************************************\n       0300-LOAD-OFFSET.\n           READ OFFSET.\n           IF WS-STAT = 10\n               GO TO 0300-LOAD-OFFSET-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0425B read error on OFFSET'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0300                     TO WS-RETURN-CODE\n               GO TO 0300-LOAD-OFFSET-EXIT.\n\n           IF OFFSET-DOCU = '*'\n               GO TO 0300-LOAD-OFFSET.\n           IF OFFSET-OFFSET NUMERIC\n             IF LS-OFFSET-SW = 'Y'\n                 MOVE OFFSET-AMOUNT           TO WS-OFFSET\n             ELSE\n                 CONTINUE\n           ELSE\n               DISPLAY '**** OFFSET amount not numeric '\n               MOVE +0301                     TO WS-RETURN-CODE\n               GO TO 0300-LOAD-OFFSET-EXIT.\n\n       0300-LOAD-OFFSET-EXIT. EXIT.\n\n       0400-EDIT-PARM.\n           IF LS-SEQ = 'YMD' OR 'MDY' OR 'DMY' OR 'XXX' OR 'JUL'\n                      OR 'CMD' OR 'MDC' OR 'DMC' OR 'QTR'\n                      OR 'HMS'\n               CONTINUE\n           ELSE\n               DISPLAY '**** MIS0425B parm seq error'\n               MOVE 0400                      TO WS-RETURN-CODE.\n\n           IF LS-LEN NOT NUMERIC\n               DISPLAY '**** MIS0425B parm length not numeric'\n               MOVE 0400                      TO WS-RETURN-CODE\n           ELSE\n           IF LS-SEQ = 'XXX'\n               MOVE LS-LEN                    TO WS-LEN-N\n           ELSE\n           IF LS-SEQ = 'JUL'\n               IF LS-LEN = '03' OR '05' OR '06' OR '07' OR '08'\n                   MOVE LS-LEN                TO WS-LEN-N\n               ELSE\n                   DISPLAY '**** MIS0425B JUL parm len = 03, 05-08'\n                   MOVE 0400                  TO WS-RETURN-CODE\n           ELSE\n           IF LS-SEQ = 'CMD' OR 'MDC' OR 'DMC'\n               IF LS-LEN = '04' OR '06' OR '07' OR '08' OR '10'\n                   MOVE LS-LEN                TO WS-LEN-N\n               ELSE\n                   DISPLAY '**** MIS0425B parm len = 4,6,7,8,10'\n                   MOVE 0400                  TO WS-RETURN-CODE\n           ELSE\n           IF LS-SEQ = 'QTR'\n               IF LS-LEN = '01'\n                   MOVE LS-LEN                TO WS-LEN-N\n               ELSE\n                   DISPLAY '**** MIS0425B parm len = 1 for QTR'\n                   MOVE 0400                  TO WS-RETURN-CODE\n           ELSE\n           IF LS-SEQ = 'HMS'\n               IF LS-LEN = '02' OR '04' OR '05' OR '06' OR\n                             '07' OR '08'\n                   MOVE LS-LEN                TO WS-LEN-N\n               ELSE\n                   DISPLAY '**** MIS0425B HMS parm len = 2,4,5,6,7,8'\n                   MOVE 0400                  TO WS-RETURN-CODE\n           ELSE\n           IF LS-LEN = '02' OR '04' OR '05' OR '06' OR '08'\n               MOVE LS-LEN                    TO WS-LEN-N\n           ELSE\n               DISPLAY '**** MIS0425B parm len = 2,4,5,6,8'\n               MOVE 0400                      TO WS-RETURN-CODE.\n\n           IF LS-POS NOT NUMERIC\n               DISPLAY '**** MIS0425B parm position error'\n               MOVE 0400                      TO WS-RETURN-CODE\n           ELSE\n               MOVE LS-POS                    TO WS-POS-N.\n\n           IF WS-RETURN-CODE = ZERO\n               COMPUTE WS-SUM-N = WS-LEN-N + WS-POS-N - 1\n               IF WS-SUM-N > 72\n                   DISPLAY '**** MIS0425B parm total length > 72'\n                   MOVE 0400                  TO WS-RETURN-CODE.\n\n           IF LS-RCD NOT NUMERIC\n               DISPLAY '**** MIS0425B parm record not numeric'\n               MOVE 0400                      TO WS-RETURN-CODE\n           ELSE\n           IF LS-RCD < '001'\n               DISPLAY '**** MIS0425B parm record error'\n               MOVE 0400                      TO WS-RETURN-CODE\n           ELSE\n               MOVE LS-RCD                    TO WS-RCD-N.\n\n      *---------------------------------------\n      *    do not reference past last byte passed to program\n      *+--------------------------------------\n           IF LS-SYMBOL(1: 4) = 'CMDX'\n               MOVE SPACE                     TO LS-SYMBOL(5: ).\n           IF LS-SYMBOL(1: 3) = 'CMD' OR 'CMF'\n               MOVE 'Y'                       TO WS-OFFSET-SW\n               MOVE SPACE                     TO WS-STV0400B-FIELDS\n               MOVE WS-1-CYMD                 TO STV0400B-1X8\n               MOVE 'CYMD  '                  TO STV0400B-IN\n               MOVE LS-SYMBOL                 TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               MOVE STV0400B-1X8              TO LS-SYMBOL.\n\n           IF LS-SEQ = 'HMS'\n               MOVE LS-S1                     TO WS-1-HMS(1: 2)\n               MOVE LS-S2                     TO WS-1-HMS(3: 2)\n               MOVE LS-S3(1: 1)               TO WS-1-HMS(5: 1)\n               MOVE '0'                       TO WS-1-HMS(6: 1)\n               MOVE WS-1-HMS                  TO WS-2-HMS\n               IF WS-LEN-N > 5\n                   CALL 'STV0320B' USING WS-2-HMS\n                   IF WS-2-HMS = WS-1-HMS\n                       DISPLAY '**** MIS0425B parm time is invalid'\n                       MOVE 0400              TO WS-RETURN-CODE\n                       GO TO 0400-EDIT-PARM-EXIT\n                   ELSE\n                       GO TO 0400-EDIT-PARM-EXIT\n               ELSE\n                   GO TO 0400-EDIT-PARM-EXIT.\n\n           IF LS-SEQ = 'XXX'\n               GO TO 0400-EDIT-PARM-EXIT.\n\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           IF LS-SLASH1 = '/'\n               AND LS-SLASH2 = '/'\n               MOVE LS-DATA(1: 8)             TO STV0400B-DATA\n               MOVE 'M/D/Y'                   TO STV0400B-IN\n               MOVE 'CYMD '                   TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               MOVE STV0400B-1X8              TO WS-1-CYMD\n           ELSE\n               MOVE LS-S1                     TO WS-1-CYMD(1: 2)\n               MOVE LS-S2                     TO WS-1-CYMD(3: 2)\n               MOVE LS-S3                     TO WS-1-CYMD(5: 2)\n               MOVE LS-S4                     TO WS-1-CYMD(7: 2).\n           IF WS-1-CYMD NOT NUMERIC\n               DISPLAY '**** MIS0425B parm date is not numeric'\n               DISPLAY '**** MIS0425B parm date ' LS-SYMBOL\n               MOVE 0400                      TO WS-RETURN-CODE\n           ELSE\n               CALL 'STV0405B' USING WS-1-CYMD\n               IF WS-1-CYMD NOT NUMERIC\n                   DISPLAY '**** MIS0425B parm date is invalid'\n                   DISPLAY '**** MIS0425B parm date ' WS-1-CYMD\n                   MOVE 0400                  TO WS-RETURN-CODE.\n\n       0400-EDIT-PARM-EXIT. EXIT.\n\n       0500-DETERMINE-TIME.\n           IF LS-LEN = '02'\n               MOVE WS-1-HMS(1: 2)            TO WS-DATA(1: 2)\n           ELSE\n           IF LS-LEN = '04'\n               MOVE WS-1-HMS(1: 4)            TO WS-DATA(1: 4)\n           ELSE\n           IF LS-LEN = '05'\n               MOVE WS-1-HMS(1: 2)            TO WS-DATA(1: 2)\n               MOVE ':'                       TO WS-DATA(3: 1)\n               MOVE WS-1-HMS(3: 2)            TO WS-DATA(4: 2)\n           ELSE\n           IF LS-LEN = '06'\n               MOVE WS-1-HMS                  TO WS-DATA\n           ELSE\n           IF LS-LEN = '07'\n               MOVE WS-2-HMS(1: 2)            TO WS-DATA(1: 2)\n               MOVE ':'                       TO WS-DATA(3: 1)\n               MOVE WS-2-HMS(3: 2)            TO WS-DATA(4: 2)\n               MOVE WS-2-HMS(5: 2)            TO WS-DATA(6: 2)\n           ELSE\n           IF LS-LEN = '08'\n               MOVE WS-1-HMS(1: 2)            TO WS-DATA(1: 2)\n               MOVE ':'                       TO WS-DATA(3: 1)\n               MOVE WS-1-HMS(3: 2)            TO WS-DATA(4: 2)\n               MOVE ':'                       TO WS-DATA(6: 1)\n               MOVE WS-1-HMS(5: 2)            TO WS-DATA(7: 2).\n\n       0500-DETERMINE-DATE.\n           IF LS-SEQ = 'MDY'\n               IF LS-LEN = '02'\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(1: 2)\n               ELSE\n               IF LS-LEN = '04'\n                   MOVE WS-1-CYMD(5: 4)       TO WS-DATA(1: 4)\n               ELSE\n               IF LS-LEN = '05'\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(1: 2)\n                   MOVE '/'                   TO WS-DATA(3: 1)\n                   MOVE WS-1-CYMD-DD          TO WS-DATA(5: 2)\n               ELSE\n               IF LS-LEN = '06'\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(1: 2)\n                   MOVE WS-1-CYMD-DD          TO WS-DATA(3: 2)\n                   MOVE WS-1-CYMD-YY          TO WS-DATA(5: 2)\n               ELSE\n               IF LS-LEN = '08'\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(1: 2)\n                   MOVE '/'                   TO WS-DATA(3: 1)\n                   MOVE WS-1-CYMD-DD          TO WS-DATA(4: 2)\n                   MOVE '/'                   TO WS-DATA(6: 1)\n                   MOVE WS-1-CYMD-YY          TO WS-DATA(7: 2).\n\n           IF LS-SEQ = 'MDC'\n               IF LS-LEN = '04'\n                   MOVE WS-1-CYMD(5: 4)       TO WS-DATA(1: 4)\n               ELSE\n               IF LS-LEN = '06'\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(1: 2)\n                   MOVE WS-1-CYMD(1: 4)       TO WS-DATA(3: 4)\n               ELSE\n               IF LS-LEN = '07'\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(1: 2)\n                   MOVE '/'                   TO WS-DATA(3: 1)\n                   MOVE WS-1-CYMD(1: 4)       TO WS-DATA(4: 4)\n               ELSE\n               IF LS-LEN = '08'\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(1: 2)\n                   MOVE WS-1-CYMD-DD          TO WS-DATA(3: 2)\n                   MOVE WS-1-CYMD(1: 4)       TO WS-DATA(5: 4)\n               ELSE\n               IF LS-LEN = '10'\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(1: 2)\n                   MOVE '/'                   TO WS-DATA(3: 1)\n                   MOVE WS-1-CYMD-DD          TO WS-DATA(4: 2)\n                   MOVE '/'                   TO WS-DATA(6: 1)\n                   MOVE WS-1-CYMD-CC          TO WS-DATA(7: 2)\n                   MOVE WS-1-CYMD-YY          TO WS-DATA(9: 2).\n\n           IF LS-SEQ = 'DMY'\n               IF LS-LEN = '02'\n                   MOVE WS-1-CYMD-DD          TO WS-DATA(1: 2)\n               ELSE\n               IF LS-LEN = '04'\n                   MOVE WS-1-CYMD-DD          TO WS-DATA(1: 2)\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(3: 2)\n               ELSE\n               IF LS-LEN = '05'\n                   MOVE WS-1-CYMD-DD          TO WS-DATA(1: 2)\n                   MOVE '/'                   TO WS-DATA(3: 1)\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(4: 2)\n               ELSE\n               IF LS-LEN = '06'\n                   MOVE WS-1-CYMD-DD          TO WS-DATA(1: 2)\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(3: 2)\n                   MOVE WS-1-CYMD-YY          TO WS-DATA(5: 2)\n               ELSE\n               IF LS-LEN = '08'\n                   MOVE WS-1-CYMD-DD          TO WS-DATA(1: 2)\n                   MOVE '/'                   TO WS-DATA(3: 1)\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(4: 2)\n                   MOVE '/'                   TO WS-DATA(6: 1)\n                   MOVE WS-1-CYMD-YY          TO WS-DATA(7: 2).\n\n           IF LS-SEQ = 'DMC'\n               IF LS-LEN = '04'\n                   MOVE WS-1-CYMD-DD          TO WS-DATA(1: 2)\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(3: 2)\n               ELSE\n               IF LS-LEN = '06'\n                   MOVE WS-1-CYMD-DD          TO WS-DATA(1: 2)\n                   MOVE WS-1-CYMD(1: 4)       TO WS-DATA(3: 4)\n               ELSE\n               IF LS-LEN = '07'\n                   MOVE WS-1-CYMD-DD          TO WS-DATA(1: 2)\n                   MOVE '/'                   TO WS-DATA(3: 1)\n                   MOVE WS-1-CYMD(1: 4)       TO WS-DATA(4: 4)\n               ELSE\n               IF LS-LEN = '08'\n                   MOVE WS-1-CYMD-DD          TO WS-DATA(1: 2)\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(3: 2)\n                   MOVE WS-1-CYMD(1: 4)       TO WS-DATA(5: 4)\n               ELSE\n               IF LS-LEN = '10'\n                   MOVE WS-1-CYMD-DD          TO WS-DATA(1: 2)\n                   MOVE '/'                   TO WS-DATA(3: 1)\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(4: 2)\n                   MOVE '/'                   TO WS-DATA(6: 1)\n                   MOVE WS-1-CYMD-CC          TO WS-DATA(7: 2)\n                   MOVE WS-1-CYMD-YY          TO WS-DATA(9: 2).\n\n           IF LS-SEQ = 'YMD'\n               IF LS-LEN = '02'\n                   MOVE WS-1-CYMD-YY          TO WS-DATA(1: 2)\n               ELSE\n               IF LS-LEN = '04'\n                   MOVE WS-1-CYMD-YY          TO WS-DATA(1: 2)\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(3: 2)\n               ELSE\n               IF LS-LEN = '05'\n                   MOVE WS-1-CYMD-YY          TO WS-DATA(1: 2)\n                   MOVE '/'                   TO WS-DATA(3: 1)\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(4: 2)\n               ELSE\n               IF LS-LEN = '06'\n                   MOVE WS-1-CYMD-YY          TO WS-DATA(1: 2)\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(3: 2)\n                   MOVE WS-1-CYMD-DD          TO WS-DATA(5: 2)\n               ELSE\n               IF LS-LEN = '08'\n                   MOVE WS-1-CYMD-YY          TO WS-DATA(1: 2)\n                   MOVE '/'                   TO WS-DATA(3: 1)\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(4: 2)\n                   MOVE '/'                   TO WS-DATA(6: 1)\n                   MOVE WS-1-CYMD-DD          TO WS-DATA(7: 2).\n\n           IF LS-SEQ = 'CMD'\n               IF LS-LEN = '04'\n                   MOVE WS-1-CYMD(1: 4)       TO WS-DATA(1: 4)\n               ELSE\n               IF LS-LEN = '06'\n                   MOVE WS-1-CYMD(1: 4)       TO WS-DATA(1: 4)\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(5: 2)\n               ELSE\n               IF LS-LEN = '07'\n                   MOVE WS-1-CYMD(1: 4)       TO WS-DATA(1: 4)\n                   MOVE '/'                   TO WS-DATA(5: 1)\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(6: 2)\n               ELSE\n               IF LS-LEN = '08'\n                   MOVE WS-1-CYMD             TO WS-DATA\n               ELSE\n               IF LS-LEN = '10'\n                   MOVE WS-1-CYMD-CC          TO WS-DATA(1: 2)\n                   MOVE WS-1-CYMD-YY          TO WS-DATA(3: 2)\n                   MOVE '/'                   TO WS-DATA(5: 1)\n                   MOVE WS-1-CYMD-MM          TO WS-DATA(6: 2)\n                   MOVE '/'                   TO WS-DATA(8: 1)\n                   MOVE WS-1-CYMD-DD          TO WS-DATA(9: 2).\n\n           IF LS-SEQ = 'JUL'\n               MOVE SPACE                     TO WS-STV0400B-FIELDS\n               MOVE WS-1-CYMD                 TO STV0400B-1X8\n               MOVE 'CYMD  '                  TO STV0400B-IN\n               IF LS-LEN = '03'\n                   MOVE 'DDD   '              TO STV0400B-OUT\n                   CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n                   IF STV0400B-1X6 = 'ERROR'\n                       DISPLAY '**** MIS0425B error calc julian date'\n                       MOVE 0500              TO WS-RETURN-CODE\n                   ELSE\n                       MOVE STV0400B-DATA     TO WS-DATA\n               ELSE\n               IF LS-LEN = '05'\n                   MOVE 'YDDD  '              TO STV0400B-OUT\n                   CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n                   IF STV0400B-1X6 = 'ERROR'\n                       DISPLAY '**** MIS0425B error calc julian date'\n                       MOVE 0500              TO WS-RETURN-CODE\n                   ELSE\n                       MOVE STV0400B-DATA     TO WS-DATA\n               ELSE\n               IF LS-LEN = '06'\n                   MOVE 'Y/DDD '              TO STV0400B-OUT\n                   CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n                   IF STV0400B-1X6 = 'ERROR'\n                       DISPLAY '**** MIS0425B error calc julian date'\n                       MOVE 0500              TO WS-RETURN-CODE\n                   ELSE\n                       MOVE STV0400B-DATA     TO WS-DATA\n               ELSE\n               IF LS-LEN = '07'\n                   MOVE 'CYDDD '              TO STV0400B-OUT\n                   CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n                   IF STV0400B-1X6 = 'ERROR'\n                       DISPLAY '**** MIS0425B error calc julian date'\n                       MOVE 0500              TO WS-RETURN-CODE\n                   ELSE\n                       MOVE STV0400B-DATA     TO WS-DATA\n               ELSE\n                   MOVE 'CY/DDD'              TO STV0400B-OUT\n                   CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n                   IF STV0400B-1X6 = 'ERROR'\n                       DISPLAY '**** MIS0425B error calc julian date'\n                       MOVE 0500              TO WS-RETURN-CODE\n                   ELSE\n                       MOVE STV0400B-DATA     TO WS-DATA.\n\n           IF LS-SEQ = 'QTR'\n               IF LS-LEN = '01'\n                   MOVE SPACE                 TO WS-STV0400B-FIELDS\n                   MOVE WS-1-CYMD             TO STV0400B-1X8\n                   MOVE 'CYMD  '              TO STV0400B-IN\n                   MOVE 'QTR   '              TO STV0400B-OUT\n                   CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n                   IF STV0400B-1X6 = 'ERROR'\n                       DISPLAY '**** MIS0425B error calc quarter'\n                       MOVE 0500              TO WS-RETURN-CODE\n                   ELSE\n                       MOVE STV0400B-DATA     TO WS-DATA.\n\n       0600-READ-PARMFX.\n           READ PARMFX.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-RCD-CNT\n               PERFORM 0700-MAKE-UPDATE\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-PARMFX-SW\n           ELSE\n               DISPLAY '**** MIS0425B read error on PARMFX '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0600                     TO WS-RETURN-CODE.\n\n       0700-MAKE-UPDATE.\n           IF WS-READ-RCD-CNT = WS-RCD-N\n               MOVE WS-DATA(1: WS-LEN-N)\n                          TO PARMFX-RECORD(WS-POS-N: WS-LEN-N)\n               MOVE 'Y'                       TO WS-END-PARMFX-SW\n               PERFORM 0800-REWRITE-PARMFX\n               DISPLAY '**** Parm update:       RCD ' LS-RCD\n                       '  POS ' LS-POS '  LEN ' LS-LEN\n               DISPLAY '**** Data:              ' WS-DATA.\n\n       0800-REWRITE-PARMFX.\n           REWRITE PARMFX-RECORD.\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0425B rewrite error on PARMFX'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n      ************************************ END MIS0425B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS0440B": {"ttr": 10760, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00)\\x01\\x19\\x07/\\x01\\x192?\\x109\\x01\\x06\\x01\\x01\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T10:39:29", "lines": 262, "newlines": 257, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  MIS0440B: convert dsnout file layout'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MIS0440B.\n      ******************************************************************\n      *@@@ II convert dsnout file layout\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ******************************************************************\n      * Date written: 08/10/99\n      * Author      : Jim Aannone\n      *               reformat a 121 byte file of IEHLIST output\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT DSNIN                ASSIGN TO DSNIN\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT DSNOUT               ASSIGN TO DSNOUT\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  DSNIN\n           RECORDING MODE F.\n       01  DSNIN-RECORD.\n           05  FILLER                  PIC  X.\n           05  DSNIN-DSN               PIC  X(44).\n           05  FILLER                  PIC  X.\n           05  DSNIN-CREATE-CYDDD      PIC  X(08).\n           05  FILLER                  PIC  X.\n           05  DSNIN-EXPIRE-CYDDD      PIC  X(08).\n           05  FILLER                  PIC  XX.\n           05  DSNIN-TYPE              PIC  X(12).\n           05  FILLER                  PIC  X.\n           05  DSNIN-SMS-IND           PIC  X(09).\n           05  FILLER                  PIC  X.\n           05  DSNIN-EXTENT            PIC  XXX.\n           05  FILLER                  PIC  XX.\n           05  DSNIN-VOLSER            PIC  X(06).\n           05  FILLER                  PIC  XXX.\n           05  DSNIN-VOL-SEQ           PIC  X(05).\n           05  FILLER                  PIC  X(06).\n           05  DSNIN-SECURITY          PIC  X(08).\n\n       FD  DSNOUT\n           RECORDING MODE F.\n       01  DSNOUT-RECORD.\n           05  FILLER                  PIC  X.\n           05  FILLER                  PIC  X.\n           05  DSNOUT-VOLSER           PIC  X(06).\n           05  FILLER                  PIC  X.\n           05  DSNOUT-DSN              PIC  X(44).\n           05  FILLER                  PIC  X.\n           05  DSNOUT-TYPE             PIC  XX.\n           05  FILLER                  PIC  X.\n           05  DSNOUT-CREATE-CYMD      PIC  X(08).\n           05  FILLER                  PIC  X.\n           05  DSNOUT-EXTENT           PIC  XXX.\n           05  FILLER                  PIC  X.\n           05  DSNOUT-SMS-IND          PIC  X(09).\n           05  FILLER                  PIC  X(04).\n           05  DSNOUT-VOL-SEQ          PIC  X(05).\n           05  FILLER                  PIC  X(06).\n           05  DSNOUT-SECURITY         PIC  X(06).\n           05  FILLER                  PIC  X.\n           05  DSNOUT-EXPIRE-CYMD      PIC  X(08).\n           05  FILLER                  PIC  X(12).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage MIS0440B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-CALL-STV0400B        PIC  X(08)    VALUE 'STV0400B'.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-RCD-CNT         PIC S9(07)    VALUE ZERO.\n           05  WS-WRITE-RCD-CNT        PIC S9(07)    VALUE ZERO.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  WS-END-DSNIN-SW         PIC  X        VALUE 'N'.\n               88  END-OF-DSNIN                      VALUE 'Y'.\n               88  MORE-DSNIN-RCDS                   VALUE 'N'.\n\n       01  WS-STV0400B-FIELDS.\n           05  STV0400B-DATA           PIC  X(10)   VALUE SPACE.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X6        PIC  X(06).\n               10  STV0400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X8        PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAYS       PIC  X(05).\n               10  FILLER              PIC  X(05).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAY        PIC  X(09).\n               10  STV0400B-DAY-NBR    PIC  X.\n           05  STV0400B-DATA2          PIC  X(10)   VALUE SPACE.\n           05  STV0400B-IN             PIC  X(06)   VALUE SPACE.\n           05  STV0400B-OUT            PIC  X(06)   VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MIS0440B END  '.\n\n      /\n       PROCEDURE DIVISION.\n\n       0100-PROGRAM-ENTRY.\n           DISPLAY '     '.\n           DISPLAY '**** MIS0440B reformat IEHLIST output'.\n           PERFORM 0200-OPEN-FILES.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-DSNIN.\n\n           DISPLAY '**** Records in DSNIN    ' WS-READ-RCD-CNT.\n           DISPLAY '**** Records written     ' WS-WRITE-RCD-CNT.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** MIS0440B cond code ' WS-RETURN-CODE\n                       ' sent by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** MIS0440B EOJ encountered '.\n           DISPLAY '     '.\n\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  DSNIN.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0440B open error on DSNIN'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN OUTPUT DSNOUT.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0440B open error on DSNOUT'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0201                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE DSNOUT.\n           CLOSE DSNIN.\n\n       0400-PROCESS-DSNIN.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0500-READ-DSNIN THRU\n                       0500-READ-DSNIN-EXIT\n                       UNTIL END-OF-DSNIN.\n\n       0500-READ-DSNIN.\n           READ DSNIN.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-RCD-CNT\n               PERFORM 0600-SELECT THRU\n                       0600-SELECT-EXIT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-DSNIN-SW\n           ELSE\n               DISPLAY '**** MIS0440B read error on DSNIN '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0500                     TO WS-RETURN-CODE.\n\n       0500-READ-DSNIN-EXIT. EXIT.\n\n       0600-SELECT.\n           MOVE SPACE                         TO DSNOUT-RECORD.\n           MOVE DSNIN-VOLSER                  TO DSNOUT-VOLSER.\n           IF DSNIN-TYPE = 'VSAM'\n               PERFORM 0700-CLEAR-SUFFIX\n                   VARYING WS-SUB1 FROM 4 BY 1\n                   UNTIL WS-SUB1 > 40.\n           MOVE DSNIN-DSN                     TO DSNOUT-DSN.\n           IF DSNIN-CREATE-CYDDD = '  00.000'\n               MOVE DSNIN-CREATE-CYDDD        TO DSNOUT-CREATE-CYMD\n           ELSE\n               MOVE SPACE                     TO WS-STV0400B-FIELDS\n               MOVE DSNIN-CREATE-CYDDD        TO STV0400B-DATA\n               MOVE 'CY/DDD'                  TO STV0400B-IN\n               MOVE 'CYMD  '                  TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               IF STV0400B-1X6 = 'ERROR'\n                   MOVE DSNIN-CREATE-CYDDD    TO DSNOUT-CREATE-CYMD\n               ELSE\n                   MOVE STV0400B-1X8          TO DSNOUT-CREATE-CYMD.\n\n           EVALUATE DSNIN-TYPE\n               WHEN 'SEQUENTIAL ' MOVE 'PS'   TO DSNOUT-TYPE\n               WHEN 'PARTITIONED' MOVE 'PO'   TO DSNOUT-TYPE\n               WHEN 'NOT DEFINED' MOVE 'U '   TO DSNOUT-TYPE\n               WHEN 'VSAM       ' MOVE 'VS'   TO DSNOUT-TYPE\n               WHEN 'DIRECT ACC ' MOVE 'DA'   TO DSNOUT-TYPE\n               WHEN OTHER         MOVE SPACE  TO DSNOUT-TYPE\n           END-EVALUATE.\n\n           IF DSNIN-EXPIRE-CYDDD = '  00.000'\n               MOVE DSNIN-EXPIRE-CYDDD        TO DSNOUT-EXPIRE-CYMD\n           ELSE\n               MOVE SPACE                     TO WS-STV0400B-FIELDS\n               MOVE DSNIN-EXPIRE-CYDDD        TO STV0400B-DATA\n               MOVE 'CY/DDD'                  TO STV0400B-IN\n               MOVE 'CYMD  '                  TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               IF STV0400B-1X6 = 'ERROR'\n                   MOVE DSNIN-EXPIRE-CYDDD    TO DSNOUT-EXPIRE-CYMD\n               ELSE\n                   MOVE STV0400B-1X8          TO DSNOUT-EXPIRE-CYMD.\n           MOVE DSNIN-SMS-IND                 TO DSNOUT-SMS-IND.\n           MOVE DSNIN-EXTENT                  TO DSNOUT-EXTENT.\n           MOVE DSNIN-VOL-SEQ                 TO DSNOUT-VOL-SEQ.\n           MOVE DSNIN-SECURITY                TO DSNOUT-SECURITY.\n           PERFORM 0800-WRITE-DSNOUT.\n\n       0600-SELECT-EXIT. EXIT.\n\n       0700-CLEAR-SUFFIX.\n           IF DSNIN-DSN(WS-SUB1: 6) = '.DATA '\n               MOVE SPACE                     TO DSNIN-DSN(WS-SUB1: )\n               MOVE 40                        TO WS-SUB1\n           ELSE\n           IF DSNIN-DSN(WS-SUB1: 3) = '.D '\n               MOVE SPACE                     TO DSNIN-DSN(WS-SUB1: )\n               MOVE 40                        TO WS-SUB1.\n\n       0800-WRITE-DSNOUT.\n           WRITE DSNOUT-RECORD.\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0440B write error on DSNOUT'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n           ADD 1                              TO WS-WRITE-RCD-CNT.\n\n      ************************************ END MIS0440B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS0465B": {"ttr": 11011, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00Q\\x01\\x19\\x14\\x8f\\x01\\x192?\\x109\\x01\\n\\x01\\x06\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2019-05-28T00:00:00", "modifydate": "2019-11-19T10:39:51", "lines": 266, "newlines": 262, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  MIS0465B: concatenate HSM activity files'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MIS0465B.\n      ******************************************************************\n      *@@@ II list HSM activity files\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      *****************************************************************\n      * Date written: 06/23/96\n      * Author      : Jim Iannone\n      *               loop through a file built from a LISTCAT catalog\n      *               command and concatenate HSM activity file names\n      *               into dynamically built jcl\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT HSMIN                ASSIGN TO HSMIN\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT JCLIN                ASSIGN TO JCLIN\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT JCLOUT               ASSIGN TO JCLOUT\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  HSMIN\n           RECORDING MODE V\n           RECORD CONTAINS 9 TO 121.\n       01  HSMIN-RECORD2.\n           05  FILLER                  PIC  X(09).\n       01  HSMIN-RECORD.\n           05  FILLER                  PIC  X(121).\n\n       FD  JCLIN\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  JCLIN-RECORD.\n           05  FILLER                  PIC  X(80).\n\n       FD  JCLOUT\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  JCLOUT-RECORD.\n           05  FILLER                  PIC  X(80).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage MIS0465B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-YYDDD                PIC  X(05)    VALUE SPACE.\n           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.\n           05  WS-1-MDY                PIC  X(06)    VALUE SPACE.\n           05  WS-80-LINE              PIC  X(80)    VALUE SPACE.\n           05  WS-CALL-STV0400B        PIC  X(08)    VALUE 'STV0400B'.\n\n       01  WS-JCL-LINE.\n           05  FILLER                  PIC  XX       VALUE '//'.\n           05  WS-DD                   PIC  X(05)    VALUE 'HSMIN'.\n           05  FILLER                  PIC  X(08)    VALUE\n               '    DD  '.\n           05  WS-DSN                  PIC  X(57)    VALUE SPACE.\n\n       01  WS-JCL-LINE2.\n           05  FILLER                  PIC  XX       VALUE '//'.\n           05  FILLER                  PIC  X(13)    VALUE SPACE.\n           05  WS-DCB                  PIC  X(13)    VALUE\n               'DCB=EROPT=SKP'.\n           05  WS-DISP                 PIC  X(44)    VALUE SPACE.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-RCD-CNT         PIC S9(07)    VALUE ZERO.\n           05  WS-FILE-RCD-CNT         PIC S9(07)    VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  WS-END-HSMIN-SW         PIC  X        VALUE 'N'.\n               88  END-OF-HSMIN                      VALUE 'Y'.\n               88  MORE-HSMIN-RCDS                   VALUE 'N'.\n           05  WS-END-JCLIN-SW         PIC  X        VALUE 'N'.\n               88  END-OF-JCLIN                      VALUE 'Y'.\n               88  MORE-JCLIN-RCDS                   VALUE 'N'.\n           05  WS-FIRST-RCD-SW         PIC  X        VALUE 'Y'.\n               88  FIRST-RECORD                      VALUE 'Y'.\n\n      *    year 2000 compatible date routine\n       01  WS-STV0400B-FIELDS.\n           05  STV0400B-DATA           PIC  X(10)   VALUE SPACE.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X6        PIC  X(06).\n               10  STV0400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X8        PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  STV0400B-DATA2          PIC  X(10)   VALUE SPACE.\n           05  STV0400B-IN             PIC  X(06)   VALUE SPACE.\n           05  STV0400B-OUT            PIC  X(06)   VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MIS0465B END  '.\n\n       LINKAGE SECTION.\n\n       01  PARM-FIELD.\n           05  PARM-LENGTH             PIC S9(04)    COMP.\n           05  PARM-CYMD               PIC  X(08).\n           05  PARM-DISP               PIC  X.\n\n      /\n       PROCEDURE DIVISION USING PARM-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           DISPLAY '      '.\n           DISPLAY '**** MIS0465B list HSM activity files '.\n           PERFORM 0200-OPEN-FILES.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-HSMIN.\n\n           DISPLAY '**** Gregorian date      ' WS-1-MDY.\n           DISPLAY '**** Julian date         ' WS-YYDDD.\n           DISPLAY '**** Records in HSMIN    ' WS-READ-RCD-CNT.\n           DISPLAY '**** Allocations         ' WS-FILE-RCD-CNT.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** MIS0465B cond code ' WS-RETURN-CODE\n                       ' sent by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** MIS0465B EOJ encountered '.\n           DISPLAY '      '.\n\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  HSMIN.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0465B open error on HSMIN'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN INPUT  JCLIN.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0465B open error on JCLIN'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN OUTPUT JCLOUT.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0465B open error on JCLOUT'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE JCLOUT.\n           CLOSE JCLIN.\n           CLOSE HSMIN.\n\n       0400-PROCESS-HSMIN.\n           PERFORM 0600-GET-JULIAN.\n           PERFORM 0700-READ-HSMIN\n               UNTIL END-OF-HSMIN.\n\n       0600-GET-JULIAN.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE PARM-CYMD                     TO STV0400B-1X8.\n           MOVE 'CYMD'                        TO STV0400B-IN.\n           MOVE 'YDDD'                        TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           IF STV0400B-1X6 = 'ERROR'\n               DISPLAY '**** MIS0465B julian conversion error'\n               DISPLAY '**** Input = ' PARM-CYMD\n               MOVE +0200                     TO WS-RETURN-CODE\n           ELSE\n               MOVE STV0400B-DATA             TO WS-YYDDD.\n\n       0700-READ-HSMIN.\n           READ HSMIN.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-RCD-CNT\n               PERFORM 0800-SELECT THRU\n                       0800-SELECT-EXIT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-HSMIN-SW\n           ELSE\n               DISPLAY '**** MIS0465B read error on HSMIN '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0700                     TO WS-RETURN-CODE.\n\n       0800-SELECT.\n           MOVE HSMIN-RECORD                  TO WS-80-LINE.\n           IF WS-80-LINE(18: 9) = 'HSMACT.H1'\n               IF WS-80-LINE(36: 5) = WS-YYDDD\n                   PERFORM 0900-FILE-DISP\n                   ADD 1                      TO WS-FILE-RCD-CNT\n                   IF FIRST-RECORD\n                       PERFORM 1000-READ-JCLIN\n                           UNTIL END-OF-JCLIN\n                       MOVE WS-JCL-LINE       TO JCLOUT-RECORD\n                       PERFORM 1100-WRITE-JCLOUT\n                       MOVE WS-JCL-LINE2      TO JCLOUT-RECORD\n                       PERFORM 1100-WRITE-JCLOUT\n                       MOVE SPACE             TO WS-DD\n                   ELSE\n                       MOVE WS-JCL-LINE       TO JCLOUT-RECORD\n                       PERFORM 1100-WRITE-JCLOUT\n                       MOVE WS-JCL-LINE2      TO JCLOUT-RECORD\n                       PERFORM 1100-WRITE-JCLOUT.\n\n       0800-SELECT-EXIT. EXIT.\n\n       0900-FILE-DISP.\n           MOVE SPACE                         TO WS-DSN.\n           STRING 'DSN='       WS-80-LINE(18: 31)\n                  ','  DELIMITED BY SIZE INTO WS-DSN.\n           IF PARM-DISP = '2'\n               MOVE ',DISP=(OLD,DELETE)'      TO WS-DISP\n           ELSE\n               MOVE ',DISP=SHR         '      TO WS-DISP.\n\n       1000-READ-JCLIN.\n           READ JCLIN.\n           IF WS-STAT = ZERO\n               MOVE JCLIN-RECORD              TO JCLOUT-RECORD\n               PERFORM 1100-WRITE-JCLOUT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-JCLIN-SW\n           ELSE\n               DISPLAY '**** MIS0465B read error on JCLIN '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +1000                     TO WS-RETURN-CODE.\n\n       1100-WRITE-JCLOUT.\n           WRITE JCLOUT-RECORD.\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0465B write error on JCLOUT'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +1100                     TO WS-RETURN-CODE.\n\n      ************************************ END MIS0465B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS0470B": {"ttr": 11016, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x05\\x01\\x19\\x14\\x8f\\x01\\x193o\\x12$\\x03\\xe2\\x03\\xde\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2019-05-28T00:00:00", "modifydate": "2019-12-02T12:24:05", "lines": 994, "newlines": 990, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  MIS0470B: condense HSM activity files'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MIS0470B.\n      ******************************************************************\n      *@@@ II list HSM activity files\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      *****************************************************************\n      * Date written: 06/24/96\n      * Author      : Jim Iannone\n      *               loop through HSM activity logs and condense the\n      *               data into a readable format.  also generate\n      *               dataset lists for further processing.\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT HSMIN                ASSIGN TO HSMIN\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT HSMLIST              ASSIGN TO HSMLIST\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT DSNOUT               ASSIGN TO DSNOUT\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  HSMIN\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  HSMIN-RECORD.\n           05  FILLER                  PIC  X(121).\n\n       FD  HSMLIST\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  HSMLIST-RECORD.\n           05  FILLER                  PIC  X(132).\n\n       FD  DSNOUT\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  DSNOUT-RECORD.\n           05  FILLER                  PIC  X(80).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage MIS0470B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-LOW-VAL              PIC  X        VALUE X'00'.\n           05  WS-LOW-VAL2             PIC  X        VALUE X'48'.\n           05  WS-DUMP-TYPE            PIC  X(08)    VALUE SPACE.\n           05  WS-1-YMD8               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-1-YMD8.\n               10  WS-1-YMD8-YY        PIC  XX.\n               10  FILLER              PIC  X.\n               10  WS-1-YMD8-MM        PIC  XX.\n               10  FILLER              PIC  X.\n               10  WS-1-YMD8-DD        PIC  XX.\n           05  WS-PART1                PIC  X(55)    VALUE SPACE.\n           05  WS-PART2                PIC  X(50)    VALUE SPACE.\n           05  WS-LINE                 PIC  X(121)   VALUE SPACE.\n\n       01  WS-HSMLIST-RCD.\n           05  HSMLIST-RCD             PIC  X(132)   VALUE SPACE.\n           05  HSMLIST-RCD1 REDEFINES HSMLIST-RCD.\n               15  HSMLIST-YY          PIC  XX.\n               15  HSMLIST-MM          PIC  XX.\n               15  HSMLIST-DD          PIC  XX.\n               15  FILLER              PIC  X.\n               15  HSMLIST-TIME        PIC  X(04).\n               15  FILLER              PIC  X.\n               15  HSMLIST-ARC         PIC  X(08).\n               15  FILLER              PIC  X.\n               15  HSMLIST-ACTION      PIC  X(08).\n               15  FILLER              PIC  X.\n               15  HSMLIST-FROM        PIC  X(06).\n               15  FILLER              PIC  X.\n               15  HSMLIST-TO          PIC  X(06).\n               15  FILLER              PIC  X.\n               15  HSMLIST-RC          PIC  X(04).\n               15  FILLER              PIC  X.\n               15  HSMLIST-REASON      PIC  X(05).\n               15  FILLER              PIC  X.\n               15  HSMLIST-DSN         PIC  X(44).\n               15  FILLER              PIC  X.\n               15  HSMLIST-AGE         PIC  X(04).\n               15  FILLER              PIC  X.\n               15  HSMLIST-TRACKS      PIC  X(06).\n               15  FILLER              PIC  X(20).\n               15  HSMLIST-TYPE        PIC  X.\n           05  HSMLIST-RCD2 REDEFINES HSMLIST-RCD.\n               15  FILLER              PIC  X(21).\n               15  HSMLIST-NOTE        PIC  X(110).\n               15  FILLER              PIC  X.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-HSMIN-RCD-CNT        PIC S9(07)    VALUE ZERO.\n           05  WS-SKIP-RCD-CNT         PIC S9(07)    VALUE ZERO.\n           05  WS-HSM-RCD-CNT          PIC S9(07)    VALUE ZERO.\n           05  WS-DSN-RCD-CNT          PIC S9(07)    VALUE ZERO.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  WS-END-HSMIN-SW         PIC  X        VALUE 'N'.\n               88  END-OF-HSMIN                      VALUE 'Y'.\n               88  MORE-HSMIN-RCDS                   VALUE 'N'.\n           05  WS-END-HSMLIST-SW       PIC  X        VALUE 'N'.\n               88  END-OF-HSMLIST                    VALUE 'Y'.\n               88  MORE-HSMLIST-RCDS                 VALUE 'N'.\n           05  WS-NEXT-SW              PIC  X        VALUE SPACE.\n           05  WS-FIRST-RCD-SW         PIC  X        VALUE 'Y'.\n               88  FIRST-RECORD                      VALUE 'Y'.\n           05  WS-TRACK-SW             PIC  X        VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MIS0470B END  '.\n\n      /\n       PROCEDURE DIVISION.\n\n       0100-PROGRAM-ENTRY.\n           DISPLAY '      '.\n           DISPLAY '**** MIS0470B list HSM activity files '.\n           PERFORM 0200-OPEN-FILES.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-HSMIN.\n\n           ADD WS-HSMIN-RCD-CNT TO WS-SKIP-RCD-CNT.\n           DISPLAY '**** HSM in                   ' WS-HSM-RCD-CNT.\n           DISPLAY '**** HSMLIST records out      ' WS-HSMIN-RCD-CNT.\n           DISPLAY '**** HSMLIST rcds + skipped   ' WS-SKIP-RCD-CNT.\n           DISPLAY '**** DSNOUT records out       ' WS-DSN-RCD-CNT.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** MIS0470B cond code ' WS-RETURN-CODE\n                       ' sent by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** MIS0470B EOJ encountered '.\n           DISPLAY '      '.\n\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  HSMIN.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0470B open error on HSMIN'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN OUTPUT HSMLIST.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0470B open error on HSMLIST'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN OUTPUT DSNOUT.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0470B open error on DSNOUT'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE DSNOUT.\n           CLOSE HSMLIST.\n           CLOSE HSMIN.\n\n       0400-PROCESS-HSMIN.\n           PERFORM 0700-READ-HSMIN\n               UNTIL END-OF-HSMIN.\n\n       0700-READ-HSMIN.\n           READ HSMIN.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-HSM-RCD-CNT\n               PERFORM 0800-SELECT THRU\n                       0800-SELECT-EXIT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-HSMIN-SW\n           ELSE\n               DISPLAY '**** MIS0470B read error on HSMIN '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0700                     TO WS-RETURN-CODE.\n\n       0800-SELECT.\n           MOVE HSMIN-RECORD                  TO WS-LINE.\n           MOVE SPACE                         TO WS-TRACK-SW.\n           IF WS-NEXT-SW = 'Y'\n               PERFORM 0850-WS-NEXT-SW\n               IF WS-NEXT-SW = 'Y'\n                   ADD 1                      TO WS-SKIP-RCD-CNT\n                   MOVE 'N'                   TO WS-NEXT-SW\n                   GO TO 0800-SELECT-EXIT.\n           MOVE 'N'                           TO WS-NEXT-SW.\n           MOVE SPACE                         TO HSMLIST-NOTE.\n           MOVE WS-LINE(2: 8)                 TO HSMLIST-ARC.\n      ****************************************\n      *    BACKUPS\n      *+**************************************\n      *    DFHSM backup log\n           IF WS-LINE(3: 5) = 'DFSMS'\n               AND WS-LINE(12: 10) = 'BACKUP LOG'\n               MOVE '1'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(29: 2)            TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(32: 2)            TO HSMLIST-TIME(3: 2)\n               MOVE WS-LINE(45: 8)            TO WS-1-YMD8\n               MOVE WS-1-YMD8-YY              TO HSMLIST-YY\n               MOVE WS-1-YMD8-MM              TO HSMLIST-MM\n               MOVE WS-1-YMD8-DD              TO HSMLIST-DD\n               ADD 1                          TO WS-SKIP-RCD-CNT\n               GO TO 0800-SELECT-EXIT.\n      *    automatic backup starting/ending\n           IF WS-LINE(2: 8) = 'ARC0720I' OR 'ARC0721I'\n               MOVE '4'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    OCDS successfully backed up to HSM.OCDS.BACKUP.D0000431\n           IF WS-LINE(2: 8) = 'ARC0743I'\n               MOVE '4'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: 91)           TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    ARC0748i last successful CDS backup-set qualifier is D0000431\n           IF WS-LINE(2: 8) = 'ARC0748I'\n               MOVE '4'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    backup of a data set of 368 tracks to ML1 volume failed\n           IF WS-LINE(2: 8) = 'ARC0757I'\n               MOVE '4'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    CDS backup starting at 22:01:02 on 96/11/13\n           IF WS-LINE(2: 8) = 'ARC0740I'\n               MOVE '3'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(34: 2)            TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(37: 2)            TO HSMLIST-TIME(3: 2)\n               MOVE WS-LINE(48: 8)            TO WS-1-YMD8\n               MOVE WS-1-YMD8-YY              TO HSMLIST-YY\n               MOVE WS-1-YMD8-MM              TO HSMLIST-MM\n               MOVE WS-1-YMD8-DD              TO HSMLIST-DD\n               MOVE WS-LINE(11: 20)           TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    CDS backup ending\n           IF WS-LINE(2: 8) = 'ARC0741I'\n               MOVE '3'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(32: 2)            TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(35: 2)            TO HSMLIST-TIME(3: 2)\n               MOVE WS-LINE(46: 8)            TO WS-1-YMD8\n               MOVE WS-1-YMD8-YY              TO HSMLIST-YY\n               MOVE WS-1-YMD8-MM              TO HSMLIST-MM\n               MOVE WS-1-YMD8-DD              TO HSMLIST-DD\n               MOVE WS-LINE(11: 17)           TO WS-PART1\n               MOVE WS-LINE(52: 20)           TO WS-PART2\n               STRING WS-PART1      DELIMITED BY '  '\n                      WS-PART2      DELIMITED BY '  '\n                      INTO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    backup for MCDS starting\n           IF WS-LINE(2: 8) = 'ARC0742I'\n               MOVE '3'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(39: 2)            TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(42: 2)            TO HSMLIST-TIME(3: 2)\n               MOVE WS-LINE(53: 8)            TO WS-1-YMD8\n               MOVE WS-1-YMD8-YY              TO HSMLIST-YY\n               MOVE WS-1-YMD8-MM              TO HSMLIST-MM\n               MOVE WS-1-YMD8-DD              TO HSMLIST-DD\n               MOVE WS-LINE(11: 24)           TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    backup for jrnl starting\n           IF WS-LINE(2: 8) = 'ARC0750I'\n               MOVE '3'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(39: 2)            TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(42: 2)            TO HSMLIST-TIME(3: 2)\n               MOVE WS-LINE(54: 8)            TO WS-1-YMD8\n               MOVE WS-1-YMD8-YY              TO HSMLIST-YY\n               MOVE WS-1-YMD8-MM              TO HSMLIST-MM\n               MOVE WS-1-YMD8-DD              TO HSMLIST-DD\n               MOVE WS-LINE(11: 25)           TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    expire backup versions starting\n           IF WS-LINE(2: 8) = 'ARC0680I'\n               MOVE '3'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(46: 2)            TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(49: 2)            TO HSMLIST-TIME(3: 2)\n               MOVE WS-LINE(60: 8)            TO WS-1-YMD8\n               MOVE WS-1-YMD8-YY              TO HSMLIST-YY\n               MOVE WS-1-YMD8-MM              TO HSMLIST-MM\n               MOVE WS-1-YMD8-DD              TO HSMLIST-DD\n               MOVE WS-LINE(11: 31)           TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    expire backup versions ending\n           IF WS-LINE(2: 8) = 'ARC0681I'\n               MOVE '3'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(44: 2)            TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(47: 2)            TO HSMLIST-TIME(3: 2)\n               MOVE WS-LINE(58: 8)            TO WS-1-YMD8\n               MOVE WS-1-YMD8-YY              TO HSMLIST-YY\n               MOVE WS-1-YMD8-MM              TO HSMLIST-MM\n               MOVE WS-1-YMD8-DD              TO HSMLIST-DD\n               MOVE WS-LINE(11: 30)           TO WS-PART1\n               MOVE WS-LINE(66: 33)           TO WS-PART2\n               STRING WS-PART1      DELIMITED BY '  '\n                      ', '          DELIMITED BY SIZE\n                      WS-PART2      DELIMITED BY '  '\n                      INTO HSMLIST-NOTE\n               INSPECT HSMLIST-NOTE REPLACING ALL ',    ' BY '     '\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    movement of backup versions starting\n           IF WS-LINE(2: 8) = 'ARC0718I'\n               MOVE '4'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(51: 2)            TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(54: 2)            TO HSMLIST-TIME(3: 2)\n               MOVE WS-LINE(65: 8)            TO WS-1-YMD8\n               MOVE WS-1-YMD8-YY              TO HSMLIST-YY\n               MOVE WS-1-YMD8-MM              TO HSMLIST-MM\n               MOVE WS-1-YMD8-DD              TO HSMLIST-DD\n               MOVE WS-LINE(11: 36)           TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    movement of backup versions ending\n           IF WS-LINE(2: 8) = 'ARC0719I'\n               MOVE '4'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(49: 2)            TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(52: 2)            TO HSMLIST-TIME(3: 2)\n               MOVE WS-LINE(11: 34)           TO WS-PART1\n               MOVE WS-LINE(59: 26)           TO WS-PART2\n               STRING WS-PART1      DELIMITED BY '  '\n                      ', '          DELIMITED BY SIZE\n                      WS-PART2      DELIMITED BY '  '\n                      INTO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    backup of migrated data sets starting\n           IF WS-LINE(2: 8) = 'ARC0735I'\n               MOVE '4'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(52: 2)            TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(55: 2)            TO HSMLIST-TIME(3: 2)\n               MOVE WS-LINE(66: 8)            TO WS-1-YMD8\n               MOVE WS-1-YMD8-YY              TO HSMLIST-YY\n               MOVE WS-1-YMD8-MM              TO HSMLIST-MM\n               MOVE WS-1-YMD8-DD              TO HSMLIST-DD\n               MOVE WS-LINE(11: 37)           TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    backup of migrated data sets ending\n           IF WS-LINE(2: 8) = 'ARC0736I'\n               MOVE '4'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(50: 2)            TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(53: 2)            TO HSMLIST-TIME(3: 2)\n               MOVE WS-LINE(11: 35)           TO WS-PART1\n               MOVE WS-LINE(60: 24)           TO WS-PART2\n               STRING WS-PART1      DELIMITED BY '  '\n                      ', '          DELIMITED BY SIZE\n                      WS-PART2      DELIMITED BY '  '\n                      INTO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    backup starting on volume svmc04\n           IF WS-LINE(2: 8) = 'ARC0722I'\n               MOVE '1'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(52: 2)            TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(55: 2)            TO HSMLIST-TIME(3: 2)\n               MOVE WS-LINE(66: 8)            TO WS-1-YMD8\n               MOVE WS-1-YMD8-YY              TO HSMLIST-YY\n               MOVE WS-1-YMD8-MM              TO HSMLIST-MM\n               MOVE WS-1-YMD8-DD              TO HSMLIST-DD\n               MOVE WS-LINE(11: 37)           TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    backup ending on volume svmc01\n           IF WS-LINE(2: 8) = 'ARC0723I'\n               MOVE '4'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(45: 2)            TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(48: 2)            TO HSMLIST-TIME(3: 2)\n               MOVE WS-LINE(11: 30)           TO WS-PART1\n               MOVE WS-LINE(55: 24)           TO WS-PART2\n               STRING WS-PART1      DELIMITED BY '  '\n                      ', '          DELIMITED BY SIZE\n                      WS-PART2      DELIMITED BY '  '\n                      INTO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    VTOC for volume svmc01 copied\n           IF WS-LINE(2: 8) = 'ARC0728I'\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               IF WS-DUMP-TYPE = 'MONTH1  '\n                   MOVE '0'                   TO HSMLIST-TYPE\n                   MOVE WS-HSMLIST-RCD        TO HSMLIST-RECORD\n                   PERFORM 1200-WRITE-HSMLIST\n                   GO TO 0800-SELECT-EXIT\n               ELSE\n                   MOVE '8'                   TO HSMLIST-TYPE\n                   MOVE WS-HSMLIST-RCD        TO HSMLIST-RECORD\n                   PERFORM 1200-WRITE-HSMLIST\n                   GO TO 0800-SELECT-EXIT.\n      *    error when reading the DFHSM control data set B record\n           IF WS-LINE(2: 8) = 'ARC0184I'\n               MOVE '3'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n           IF WS-LINE(2: 8) = 'ARC0261I'\n               MOVE '1'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n           IF WS-LINE(3: 13) = 'LAST BCDS KEY'\n               MOVE WS-LINE(3: )              TO HSMLIST-NOTE\n               MOVE '1'                       TO HSMLIST-TYPE\n               MOVE '--------'                TO HSMLIST-ARC\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      ****************************************\n      *    DUMPS\n      *+**************************************\n      *    DFHSM dump log\n           IF WS-LINE(3: 5) = 'DFSMS'\n               AND WS-LINE(12: 8) = 'DUMP LOG'\n               MOVE '1'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(27: 2)            TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(30: 2)            TO HSMLIST-TIME(3: 2)\n               MOVE WS-LINE(43: 8)            TO WS-1-YMD8\n               MOVE WS-1-YMD8-YY              TO HSMLIST-YY\n               MOVE WS-1-YMD8-MM              TO HSMLIST-MM\n               MOVE WS-1-YMD8-DD              TO HSMLIST-DD\n               ADD 1                          TO WS-SKIP-RCD-CNT\n               GO TO 0800-SELECT-EXIT.\n      *    automatic dump starting\n           IF WS-LINE(2: 8) = 'ARC0620I' OR 'ARC0628I'\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE '2'                       TO HSMLIST-TYPE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    automatic dump ending\n           IF WS-LINE(2: 8) = 'ARC0621I' OR 'ARC0629I'\n               MOVE '2'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    dump VTOC copy scratched\n           IF WS-LINE(2: 8) = 'ARC0639I'\n               MOVE '6'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    dump volume 311665 deleted\n           IF WS-LINE(2: 8) = 'ARC0263I'\n               MOVE '6'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: 26)           TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    dump copy invalidated\n      *    dump generation invalidated\n           IF WS-LINE(2: 8) = 'ARC0262I'\n               MOVE '6'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    full volume dump starting on volume svmm01(nonsms)\n           IF WS-LINE(2: 8) = 'ARC0622I'\n               MOVE '3'                       TO HSMLIST-TYPE\n               IF WS-LINE(53: 5) = '(SMS)'\n                   MOVE WS-LINE(62: 2)        TO HSMLIST-TIME(1: 2)\n                   MOVE WS-LINE(65: 2)        TO HSMLIST-TIME(3: 2)\n                   MOVE WS-LINE(76: 8)        TO WS-1-YMD8\n                   MOVE WS-1-YMD8-YY          TO HSMLIST-YY\n                   MOVE WS-1-YMD8-MM          TO HSMLIST-MM\n                   MOVE WS-1-YMD8-DD          TO HSMLIST-DD\n                   MOVE WS-LINE(11: 47)       TO WS-PART1\n                   MOVE 'Y'                   TO WS-NEXT-SW\n                   GO TO 0800-SELECT-EXIT\n               ELSE\n               IF WS-LINE(53: 5) = '(NONS'\n                   MOVE WS-LINE(65: 2)        TO HSMLIST-TIME(1: 2)\n                   MOVE WS-LINE(68: 2)        TO HSMLIST-TIME(3: 2)\n                   MOVE WS-LINE(79: 8)        TO WS-1-YMD8\n                   MOVE WS-1-YMD8-YY          TO HSMLIST-YY\n                   MOVE WS-1-YMD8-MM          TO HSMLIST-MM\n                   MOVE WS-1-YMD8-DD          TO HSMLIST-DD\n                   MOVE WS-LINE(11: 50)       TO WS-PART1\n                   MOVE 'Y'                   TO WS-NEXT-SW\n                   GO TO 0800-SELECT-EXIT\n               ELSE\n                   MOVE WS-LINE(63: 2)        TO HSMLIST-TIME(1: 2)\n                   MOVE WS-LINE(66: 2)        TO HSMLIST-TIME(3: 2)\n                   MOVE WS-LINE(77: 8)        TO WS-1-YMD8\n                   MOVE WS-1-YMD8-YY          TO HSMLIST-YY\n                   MOVE WS-1-YMD8-MM          TO HSMLIST-MM\n                   MOVE WS-1-YMD8-DD          TO HSMLIST-DD\n                   MOVE WS-LINE(11: 48)       TO WS-PART1\n                   MOVE 'Y'                   TO WS-NEXT-SW\n                   GO TO 0800-SELECT-EXIT.\n      *    dump volume 302704 added\n           IF WS-LINE(2: 8) = 'ARC0120I'\n               MOVE '6'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: 50)           TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    dump copy of volume svmm02 complete\n           IF WS-LINE(2: 8) = 'ARC0637I'\n               MOVE '6'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    full volume dump of volume svmm02 ending\n           IF WS-LINE(2: 8) = 'ARC0623I'\n               MOVE '4'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(55: 2)            TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(58: 2)            TO HSMLIST-TIME(3: 2)\n               MOVE WS-LINE(11: 40)           TO WS-PART1\n               MOVE WS-LINE(65: 25)           TO WS-PART2\n               STRING WS-PART1      DELIMITED BY '  '\n                      ', '          DELIMITED BY SIZE\n                      WS-PART2      DELIMITED BY '  '\n                      INTO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    automatic deletion of excess dump VTOC copies starting\n           IF WS-LINE(2: 8) = 'ARC0648I' OR 'ARC0649I'\n               MOVE '2'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n           IF WS-LINE(2: 8) = 'ARC0640I'\n               MOVE '1'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      ****************************************\n      *    MIGRATION\n      *+**************************************\n      *    DFHSM migration log\n           IF WS-LINE(3: 5) = 'DFSMS'\n               AND WS-LINE(12: 13) = 'MIGRATION LOG'\n               MOVE '4'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(32: 2)            TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(35: 2)            TO HSMLIST-TIME(3: 2)\n               MOVE WS-LINE(48: 8)            TO WS-1-YMD8\n               MOVE WS-1-YMD8-YY              TO HSMLIST-YY\n               MOVE WS-1-YMD8-MM              TO HSMLIST-MM\n               MOVE WS-1-YMD8-DD              TO HSMLIST-DD\n               ADD 1                          TO WS-SKIP-RCD-CNT\n               GO TO 0800-SELECT-EXIT.\n      *    space management starting on volume svmm11(smsi)\n           IF WS-LINE(2: 8) = 'ARC0522I'\n               MOVE '1'                       TO HSMLIST-TYPE\n               IF WS-LINE(53: 5) = '(SMS)'\n                   MOVE WS-LINE(62: 2)        TO HSMLIST-TIME(1: 2)\n                   MOVE WS-LINE(65: 2)        TO HSMLIST-TIME(3: 2)\n                   MOVE WS-LINE(76: 8)        TO WS-1-YMD8\n                   MOVE WS-1-YMD8-YY          TO HSMLIST-YY\n                   MOVE WS-1-YMD8-MM          TO HSMLIST-MM\n                   MOVE WS-1-YMD8-DD          TO HSMLIST-DD\n                   MOVE WS-LINE(11: 48)       TO HSMLIST-NOTE\n                   MOVE WS-HSMLIST-RCD        TO HSMLIST-RECORD\n                   PERFORM 1200-WRITE-HSMLIST\n                   GO TO 0800-SELECT-EXIT\n               ELSE\n               IF WS-LINE(53: 5) = '(NONS'\n                   MOVE WS-LINE(65: 2)        TO HSMLIST-TIME(1: 2)\n                   MOVE WS-LINE(68: 2)        TO HSMLIST-TIME(3: 2)\n                   MOVE WS-LINE(79: 8)        TO WS-1-YMD8\n                   MOVE WS-1-YMD8-YY          TO HSMLIST-YY\n                   MOVE WS-1-YMD8-MM          TO HSMLIST-MM\n                   MOVE WS-1-YMD8-DD          TO HSMLIST-DD\n                   MOVE WS-LINE(11: 50)       TO HSMLIST-NOTE\n                   MOVE WS-HSMLIST-RCD        TO HSMLIST-RECORD\n                   PERFORM 1200-WRITE-HSMLIST\n                   GO TO 0800-SELECT-EXIT\n               ELSE\n                   MOVE WS-LINE(63: 2)        TO HSMLIST-TIME(1: 2)\n                   MOVE WS-LINE(66: 2)        TO HSMLIST-TIME(3: 2)\n                   MOVE WS-LINE(77: 8)        TO WS-1-YMD8\n                   MOVE WS-1-YMD8-YY          TO HSMLIST-YY\n                   MOVE WS-1-YMD8-MM          TO HSMLIST-MM\n                   MOVE WS-1-YMD8-DD          TO HSMLIST-DD\n                   MOVE WS-LINE(11: 48)       TO HSMLIST-NOTE\n                   MOVE WS-HSMLIST-RCD        TO HSMLIST-RECORD\n                   PERFORM 1200-WRITE-HSMLIST\n                   GO TO 0800-SELECT-EXIT.\n      *    command migration for sms010 volume(s) terminated\n           IF WS-LINE(2: 8) = 'ARC0570I'\n               MOVE '4'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    migration volume 303012 is now marked full\n           IF WS-LINE(2: 8) = 'ARC0421I'\n               MOVE '4'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    error while accessing volumes's VTOC\n           IF WS-LINE(2: 8) = 'ARC0404I'\n               MOVE '4'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    dataset has more recent dump copy but backup copy restored\n           IF WS-LINE(2: 8) = 'ARC0782I'\n               MOVE '4'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    volume svmm11 is 66% free\n           IF WS-LINE(2: 8) = 'ARC0400I'\n               MOVE '3'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    VTOC for svmm01 is 0045 tracks\n           IF WS-LINE(2: 8) = 'ARC0402I'\n               MOVE '2'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    space management processing skipped 2 data sets\n           IF WS-LINE(2: 8) = 'ARC0562I'\n               MOVE '3'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    largest extents for svmm11 are...\n           IF WS-LINE(2: 8) = 'ARC0401I'\n               MOVE '2'                       TO HSMLIST-TYPE\n               PERFORM 0810-FIND-TRACKS\n                   VARYING WS-SUB1 FROM 30 BY 1\n                   UNTIL WS-SUB1 > 110\n               IF WS-TRACK-SW = 'Y'\n                   MOVE WS-LINE(11: )         TO HSMLIST-NOTE\n                   MOVE WS-HSMLIST-RCD        TO HSMLIST-RECORD\n                   PERFORM 1200-WRITE-HSMLIST\n                   GO TO 0800-SELECT-EXIT\n               ELSE\n                   MOVE WS-LINE(11: 31)       TO HSMLIST-NOTE\n                   MOVE 'Y'                   TO WS-NEXT-SW\n                   GO TO 0800-SELECT-EXIT.\n      *    space management ended on volume svmm11\n           IF WS-LINE(2: 8) = 'ARC0523I'\n               MOVE '3'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               INSPECT HSMLIST-NOTE REPLACING ALL ',    ' BY '     '\n               MOVE 'Y'                       TO WS-NEXT-SW\n               GO TO 0800-SELECT-EXIT.\n      *    primary space management starting\n           IF WS-LINE(2: 8) = 'ARC0520I' OR 'ARC0521I'\n               MOVE '4'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: 43)           TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    DADSM partrel function released 300 tracks\n           IF WS-LINE(2: 8) = 'ARC0519I'\n               MOVE '2'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    secondary space management starting\n           IF WS-LINE(2: 8) = 'ARC0517I' OR 'ARC0518I'\n               MOVE '4'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    interval migration started\n           IF WS-LINE(2: 8) = 'ARC0580I'\n               MOVE '1'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    interval migration ended successfully\n           IF WS-LINE(2: 8) = 'ARC0581I'\n               MOVE '1'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    migration cleanup starting\n           IF WS-LINE(2: 8) = 'ARC0526I'\n               MOVE '4'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(41: 2)            TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(44: 2)            TO HSMLIST-TIME(3: 2)\n               MOVE WS-LINE(55: 8)            TO WS-1-YMD8\n               MOVE WS-1-YMD8-YY              TO HSMLIST-YY\n               MOVE WS-1-YMD8-MM              TO HSMLIST-MM\n               MOVE WS-1-YMD8-DD              TO HSMLIST-DD\n               MOVE WS-LINE(11: 27)           TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    migration cleanup ended\n           IF WS-LINE(2: 8) = 'ARC0527I'\n               MOVE '4'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(38: 2)            TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(41: 2)            TO HSMLIST-TIME(3: 2)\n               MOVE WS-LINE(11: 24)           TO WS-PART1\n               MOVE WS-LINE(47: 26)           TO WS-PART2\n               STRING WS-PART1      DELIMITED BY '  '\n                      ', '          DELIMITED BY SIZE\n                      WS-PART2      DELIMITED BY '  '\n                      INTO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    migration cleanup parameters\n           IF WS-LINE(2: 8) = 'ARC0529I'\n               MOVE '3'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    volume already in use\n           IF WS-LINE(2: 8) = 'ARC0301W'\n               MOVE '2'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    data set will be recalled using DFDSS determined value\n           IF WS-LINE(2: 8) = 'ARC0303I'\n               MOVE '2'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    level 1 migration starting\n           IF WS-LINE(2: 8) = 'ARC0530I'\n               MOVE '1'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(41: 2)            TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(44: 2)            TO HSMLIST-TIME(3: 2)\n               MOVE WS-LINE(55: 8)            TO WS-1-YMD8\n               MOVE WS-1-YMD8-YY              TO HSMLIST-YY\n               MOVE WS-1-YMD8-MM              TO HSMLIST-MM\n               MOVE WS-1-YMD8-DD              TO HSMLIST-DD\n               MOVE WS-LINE(11: 27)           TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    level 1 migration ending\n           IF WS-LINE(2: 8) = 'ARC0531I'\n               MOVE '2'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(102: 2)           TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(105: 2)           TO HSMLIST-TIME(3: 2)\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      *    scratch related function failed\n           IF WS-LINE(2: 8) = 'ARC0545I'\n               MOVE WS-LINE(47: 44)           TO HSMLIST-DSN\n               PERFORM 1300-WRITE-DSNOUT\n               MOVE '4'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n      ****************************************\n      *    recycle\n      *+**************************************\n      *    recycle starting on volume\n           IF WS-LINE(2: 8) = 'ARC0832I' OR 'ARC0833I'\n               MOVE '2'                       TO HSMLIST-TYPE\n               MOVE WS-LINE(11: )             TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               GO TO 0800-SELECT-EXIT.\n\n           IF WS-LINE(2: 8) = 'ARC0734I'\n               PERFORM 0900-ARC0734I\n               GO TO 0800-SELECT-EXIT.\n\n           IF WS-LINE(2: 80) = SPACE\n               ADD 1                          TO WS-SKIP-RCD-CNT\n           ELSE\n               MOVE '--------'                TO HSMLIST-ARC\n               MOVE HSMIN-RECORD              TO HSMLIST-NOTE\n               MOVE SPACE                     TO HSMLIST-TYPE\n               INSPECT HSMLIST-NOTE CONVERTING WS-LOW-VAL TO SPACE\n               INSPECT HSMLIST-NOTE CONVERTING WS-LOW-VAL2 TO '.'\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST.\n\n       0800-SELECT-EXIT. EXIT.\n\n       0810-FIND-TRACKS.\n           IF WS-LINE(WS-SUB1: 8) = ' TRACKS '\n               MOVE 'Y'                       TO WS-TRACK-SW.\n\n      ****************************************\n      *    place data from next record into working storage\n      *    and write out.  (write was delayed until this data\n      *    was obtained).\n      *+**************************************\n       0850-WS-NEXT-SW.\n           IF WS-LINE(3: 4) = 'DSN='\n               MOVE WS-LINE(7: 44)            TO HSMLIST-DSN\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               IF HSMLIST-ACTION = 'EXPIRED '\n                   AND HSMLIST-RC = '  53'\n                   AND HSMLIST-REASON = '    0'\n                   PERFORM 1300-WRITE-DSNOUT\n               ELSE\n                   CONTINUE\n           ELSE\n           IF WS-LINE(3: 4) = 'TIME'\n               MOVE WS-LINE(8: 2)             TO HSMLIST-TIME(1: 2)\n               MOVE WS-LINE(11: 2)            TO HSMLIST-TIME(3: 2)\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n           ELSE\n           IF WS-LINE(3: 6) = 'TRACKS'\n               MOVE WS-LINE(3: 50)            TO HSMLIST-NOTE(32: )\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n           ELSE\n           IF WS-LINE(3: 13) = 'TO DUMP CLASS'\n               MOVE WS-LINE(24: 8)            TO WS-PART2 WS-DUMP-TYPE\n               STRING WS-PART1          DELIMITED BY '  '\n                      ' TO DUMP CLASS ' DELIMITED BY SIZE\n                      WS-PART2          DELIMITED BY '  '\n                      INTO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n           ELSE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               MOVE WS-LINE                   TO HSMLIST-NOTE\n               MOVE '--NEXT--'                TO HSMLIST-ARC\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST.\n\n       0900-ARC0734I.\n           IF WS-LINE(18: 8) = 'EXBACKV '\n               MOVE '3'                       TO HSMLIST-TYPE\n               PERFORM 1000-STANDARD-DELIMIT\n           ELSE IF WS-LINE(18: 8) = 'BACK-UP ' OR 'MOVE BV '\n               MOVE '4'                       TO HSMLIST-TYPE\n               PERFORM 1000-STANDARD-DELIMIT\n           ELSE IF WS-LINE(18: 8) = 'DELETED '\n               MOVE '4'                       TO HSMLIST-TYPE\n               PERFORM 1000-STANDARD-DELIMIT\n           ELSE IF WS-LINE(18: 8) = 'RECYCLE '\n               MOVE '2'                       TO HSMLIST-TYPE\n               PERFORM 1000-STANDARD-DELIMIT\n           ELSE IF WS-LINE(18: 8) = 'MIGRATE ' OR 'SCRATCH '\n                                 OR 'PARTREL ' OR 'SPCMGMT '\n                                 OR 'REDUCED ' OR 'EXPIRED '\n               MOVE '4'                       TO HSMLIST-TYPE\n               PERFORM 1000-STANDARD-DELIMIT\n           ELSE\n               MOVE SPACE                     TO HSMLIST-TYPE\n               MOVE HSMIN-RECORD              TO HSMLIST-NOTE\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST.\n\n       1000-STANDARD-DELIMIT.\n           MOVE SPACE                         TO HSMLIST-NOTE.\n           MOVE WS-LINE(18: 8)                TO HSMLIST-ACTION.\n           MOVE WS-LINE(32: 6)                TO HSMLIST-FROM.\n           MOVE WS-LINE(45: 6)                TO HSMLIST-TO.\n           MOVE WS-LINE(59: 6)                TO HSMLIST-TRACKS.\n           MOVE WS-LINE(69: 4)                TO HSMLIST-RC.\n           MOVE WS-LINE(82: 5)                TO HSMLIST-REASON.\n           IF WS-LINE(18: 8) = 'BACK-UP '\n               IF HSMLIST-RC = '   0'\n                   MOVE '6'                   TO HSMLIST-TYPE.\n           IF WS-LINE(18: 8) = 'MIGRATE ' OR 'SPCMGMT '\n               IF HSMLIST-RC NOT = '   0'\n                   MOVE '3'                   TO HSMLIST-TYPE.\n           IF WS-LINE(18: 8) = 'DELETED '\n               IF HSMLIST-RC = '   0'\n                   IF WS-LINE(99: 7) = 'DSN=VSR' OR 'DSN=DSR'\n                       MOVE '1'               TO HSMLIST-TYPE\n                   ELSE\n                       MOVE '4'               TO HSMLIST-TYPE\n               ELSE\n                   MOVE '6'                   TO HSMLIST-TYPE.\n           IF WS-LINE(18: 8) = 'MIGRATE ' OR 'SCRATCH ' OR 'EXPIRED '\n               IF HSMLIST-RC = '   0'\n                   MOVE '7'                   TO HSMLIST-TYPE.\n           MOVE WS-LINE(93: 4)                TO HSMLIST-AGE.\n           IF WS-LINE(99: 4) = 'DSN='\n               MOVE WS-LINE(103: 19)          TO HSMLIST-DSN\n               MOVE WS-HSMLIST-RCD            TO HSMLIST-RECORD\n               PERFORM 1200-WRITE-HSMLIST\n               IF HSMLIST-ACTION = 'EXPIRED '\n                   AND HSMLIST-RC = '  53'\n                   AND HSMLIST-REASON = '    0'\n                   PERFORM 1300-WRITE-DSNOUT\n               ELSE\n                   CONTINUE\n           ELSE\n               MOVE 'Y'                       TO WS-NEXT-SW.\n\n       1200-WRITE-HSMLIST.\n           WRITE HSMLIST-RECORD.\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0465B write error on HSMLIST'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +1200                     TO WS-RETURN-CODE.\n           ADD 1                              TO WS-HSMIN-RCD-CNT.\n\n       1300-WRITE-DSNOUT.\n           MOVE SPACE                         TO DSNOUT-RECORD.\n           STRING QUOTE DELIMITED BY SIZE\n                  HSMLIST-DSN DELIMITED BY ' '\n                  QUOTE DELIMITED BY SIZE\n                  INTO DSNOUT-RECORD.\n           WRITE DSNOUT-RECORD.\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0465B write error on DSNOUT'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +1300                     TO WS-RETURN-CODE.\n           ADD 1                              TO WS-DSN-RCD-CNT.\n\n      ************************************ END MIS0470B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS0475B": {"ttr": 11524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00!\\x01\\x19\\x14\\x8f\\x01\\x193o\\x12&\\x01S\\x01N\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2019-05-28T00:00:00", "modifydate": "2019-12-02T12:26:21", "lines": 339, "newlines": 334, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  MIS0475B: limit size of HSM list file'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MIS0475B.\n      ******************************************************************\n      *@@@ II limit size of HSM list file\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      *****************************************************************\n      * Date written: 04/09/96\n      * Author      : Jim Iannone\n      *               loop through the HSM list file and delete\n      *               records greater than x days old\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT HSMLIST              ASSIGN TO HSMLIST\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT HSMOUT               ASSIGN TO HSMOUT\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  HSMLIST\n           RECORDING MODE F.\n       01  HSMLIST-RECORD.\n           05  HSMLIST-YMD             PIC  X(06).\n           05  FILLER REDEFINES HSMLIST-YMD.\n               10  HSMLIST-YY          PIC  XX.\n               10  HSMLIST-MM          PIC  XX.\n               10  HSMLIST-DD          PIC  XX.\n           05  FILLER                  PIC  X(125).\n           05  HSMLIST-TYPE            PIC  X.\n\n       FD  PARM01\n           RECORDING MODE F.\n       01  PARM01-RECORD.\n           05  FILLER                  PIC  X(80).\n\n       FD  HSMOUT\n           RECORDING MODE F.\n       01  HSMOUT-RECORD.\n           05  HSMOUT-RCD              PIC  X(132).\n           05  FILLER REDEFINES HSMOUT-RCD.\n               10  FILLER              PIC  X(131).\n               10  HSMOUT-QUESTION     PIC  X.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage MIS0475B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-DAY-CNT              PIC  9(05)    VALUE ZERO.\n           05  WS-DEL-CNT1             PIC  9(05)    VALUE ZERO.\n           05  WS-DEL-CNT2             PIC  9(05)    VALUE ZERO.\n           05  WS-DEL-CNT3             PIC  9(05)    VALUE ZERO.\n           05  WS-DEL-CNT4             PIC  9(05)    VALUE ZERO.\n           05  WS-DEL-CNT5             PIC  9(05)    VALUE ZERO.\n           05  WS-DEL-CNT6             PIC  9(05)    VALUE ZERO.\n           05  WS-DEL-CNT7             PIC  9(05)    VALUE ZERO.\n           05  WS-DEL-CNT8             PIC  9(05)    VALUE ZERO.\n           05  WS-DEL-CNT9             PIC  9(05)    VALUE ZERO.\n           05  WS-DEL-CNT0             PIC  9(05)    VALUE ZERO.\n           05  WS-CALL-STV0400B        PIC  X(08)    VALUE 'STV0400B'.\n\n      *    STV0400B WILL PERFORM DATE AND NBR OF DAYS CONVERSIONS\n       01  WS-STV0400B-FIELDS.\n           05  STV0400B-DATA           PIC  X(10).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X6        PIC  X(06).\n               10  STV0400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X8        PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAYS       PIC  X(05).\n               10  FILLER              PIC  X(05).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAY        PIC  X(09).\n               10  STV0400B-DAY-NBR    PIC  X.\n           05  STV0400B-DATA2          PIC  X(10)   VALUE SPACE.\n           05  STV0400B-IN             PIC  X(06).\n           05  STV0400B-OUT            PIC  X(06).\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-RCD-CNT         PIC S9(07)    VALUE ZERO.\n           05  WS-WRITE-RCD-CNT        PIC S9(07)    VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  WS-END-HSMLIST-SW       PIC  X        VALUE 'N'.\n               88  END-OF-HSMLIST                    VALUE 'Y'.\n               88  MORE-HSMLIST-RCDS                 VALUE 'N'.\n           05  WS-END-PARM01-SW        PIC  X        VALUE 'N'.\n               88  END-OF-PARM01                     VALUE 'Y'.\n               88  MORE-PARM01-RCDS                  VALUE 'N'.\n\n       01  WS-DAY-PARMS.\n           05  WS-PARM-DAYS            PIC  X(60).\n           05  FILLER REDEFINES WS-PARM-DAYS.\n               10  FILLER              PIC  X.\n               10  WS-DAY-CNT1         PIC  9(04).\n               10  FILLER              PIC  X.\n               10  WS-DAY-CNT2         PIC  9(04).\n               10  FILLER              PIC  X.\n               10  WS-DAY-CNT3         PIC  9(04).\n               10  FILLER              PIC  X.\n               10  WS-DAY-CNT4         PIC  9(04).\n               10  FILLER              PIC  X.\n               10  WS-DAY-CNT5         PIC  9(04).\n               10  FILLER              PIC  X.\n               10  WS-DAY-CNT6         PIC  9(04).\n               10  FILLER              PIC  X.\n               10  WS-DAY-CNT7         PIC  9(04).\n               10  FILLER              PIC  X.\n               10  WS-DAY-CNT8         PIC  9(04).\n               10  FILLER              PIC  X.\n               10  WS-DAY-CNT9         PIC  9(04).\n               10  FILLER              PIC  X.\n               10  WS-DAY-CNT0         PIC  9(04).\n               10  FILLER              PIC  X(10).\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MIS0475B END  '.\n\n      /\n       PROCEDURE DIVISION.\n\n       0100-PROGRAM-ENTRY.\n           DISPLAY '      '.\n           DISPLAY '**** MIS0475B limit size of HSM list file'.\n           PERFORM 0200-OPEN-FILES.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-HSMLIST.\n\n           DISPLAY '****    Days  Deleted '.\n           DISPLAY '**** 1  ' WS-DAY-CNT1 '  ' WS-DEL-CNT1.\n           DISPLAY '**** 2  ' WS-DAY-CNT2 '  ' WS-DEL-CNT2.\n           DISPLAY '**** 3  ' WS-DAY-CNT3 '  ' WS-DEL-CNT3.\n           DISPLAY '**** 4  ' WS-DAY-CNT4 '  ' WS-DEL-CNT4.\n           DISPLAY '**** 5  ' WS-DAY-CNT5 '  ' WS-DEL-CNT5.\n           DISPLAY '**** 6  ' WS-DAY-CNT6 '  ' WS-DEL-CNT6.\n           DISPLAY '**** 7  ' WS-DAY-CNT7 '  ' WS-DEL-CNT7.\n           DISPLAY '**** 8  ' WS-DAY-CNT8 '  ' WS-DEL-CNT8.\n           DISPLAY '**** 9  ' WS-DAY-CNT9 '  ' WS-DEL-CNT9.\n           DISPLAY '**** 0  ' WS-DAY-CNT0 '  ' WS-DEL-CNT0.\n           DISPLAY '**** Records in HSMLIST   ' WS-READ-RCD-CNT.\n           DISPLAY '**** Records kepT         ' WS-WRITE-RCD-CNT.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** MIS0475B cond code ' WS-RETURN-CODE\n                       ' sent by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** MIS0475B EOJ encountered '.\n           DISPLAY '      '.\n\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  HSMLIST.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0475B open error on HSMLIST'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN INPUT  PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0475B open error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN OUTPUT HSMOUT.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0475B open error on HSMOUT'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0201                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE HSMOUT.\n           CLOSE PARM01.\n           CLOSE HSMLIST.\n\n       0400-PROCESS-HSMLIST.\n           PERFORM 0500-GET-PARM-DATE.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0600-READ-HSMLIST THRU\n                       0600-READ-HSMLIST-EXIT\n                       UNTIL END-OF-HSMLIST.\n\n       0500-GET-PARM-DATE.\n           PERFORM 0550-READ-PARM01\n               UNTIL END-OF-PARM01.\n           IF WS-DAY-CNT1 NOT NUMERIC\n               OR WS-DAY-CNT2 NOT NUMERIC\n               OR WS-DAY-CNT3 NOT NUMERIC\n               OR WS-DAY-CNT4 NOT NUMERIC\n               OR WS-DAY-CNT5 NOT NUMERIC\n               OR WS-DAY-CNT6 NOT NUMERIC\n               OR WS-DAY-CNT7 NOT NUMERIC\n               OR WS-DAY-CNT8 NOT NUMERIC\n               OR WS-DAY-CNT9 NOT NUMERIC\n               OR WS-DAY-CNT0 NOT NUMERIC\n               DISPLAY '**** MIS0475B days parm not numeric '\n               MOVE +0500                     TO WS-RETURN-CODE.\n\n       0550-READ-PARM01.\n           READ PARM01.\n           IF WS-STAT = ZERO\n               IF PARM01-RECORD(1: 1) = '*'\n                   CONTINUE\n               ELSE\n                   MOVE PARM01-RECORD (1: 60) TO WS-PARM-DAYS\n           ELSE\n               MOVE 'Y'                       TO WS-END-PARM01-SW.\n\n       0600-READ-HSMLIST.\n           READ HSMLIST.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-RCD-CNT\n               PERFORM 0700-SELECT THRU\n                       0700-SELECT-EXIT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-HSMLIST-SW\n           ELSE\n               DISPLAY '**** MIS0475B read error on HSMLIST '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0600                     TO WS-RETURN-CODE.\n\n       0600-READ-HSMLIST-EXIT. EXIT.\n\n       0700-SELECT.\n           IF HSMLIST-TYPE = '!'\n               GO TO 0700-KEEP-RECORD.\n           IF HSMLIST-YMD NOT NUMERIC\n               GO TO 0700-WRITE-QUESTION.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE HSMLIST-YMD                   TO STV0400B-1X8.\n           MOVE 'YMD   '                      TO STV0400B-IN.\n           MOVE 'DAYS  '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           IF STV0400B-DAYS NOT NUMERIC\n               GO TO 0700-WRITE-QUESTION.\n           MOVE STV0400B-DAYS                 TO WS-DAY-CNT.\n           IF HSMLIST-TYPE = '1'\n             IF WS-DAY-CNT > WS-DAY-CNT1\n                 ADD 1                        TO WS-DEL-CNT1\n                 GO TO 0700-SELECT-EXIT.\n           IF HSMLIST-TYPE = '2'\n             IF WS-DAY-CNT > WS-DAY-CNT2\n                 ADD 1                        TO WS-DEL-CNT2\n                 GO TO 0700-SELECT-EXIT.\n           IF HSMLIST-TYPE = '3'\n             IF WS-DAY-CNT > WS-DAY-CNT3\n                 ADD 1                        TO WS-DEL-CNT3\n                 GO TO 0700-SELECT-EXIT.\n           IF HSMLIST-TYPE = '4'\n             IF WS-DAY-CNT > WS-DAY-CNT4\n                 ADD 1                        TO WS-DEL-CNT4\n                 GO TO 0700-SELECT-EXIT.\n           IF HSMLIST-TYPE = '5'\n             IF WS-DAY-CNT > WS-DAY-CNT5\n                 ADD 1                        TO WS-DEL-CNT5\n                 GO TO 0700-SELECT-EXIT.\n           IF HSMLIST-TYPE = '6'\n             IF WS-DAY-CNT > WS-DAY-CNT6\n                 ADD 1                        TO WS-DEL-CNT6\n                 GO TO 0700-SELECT-EXIT.\n           IF HSMLIST-TYPE = '7'\n             IF WS-DAY-CNT > WS-DAY-CNT7\n                 ADD 1                        TO WS-DEL-CNT7\n                 GO TO 0700-SELECT-EXIT.\n           IF HSMLIST-TYPE = '8'\n             IF WS-DAY-CNT > WS-DAY-CNT8\n                 ADD 1                        TO WS-DEL-CNT8\n                 GO TO 0700-SELECT-EXIT.\n           IF HSMLIST-TYPE = '9'\n             IF WS-DAY-CNT > WS-DAY-CNT9\n                 ADD 1                        TO WS-DEL-CNT9\n                 GO TO 0700-SELECT-EXIT.\n           IF HSMLIST-TYPE = '0'\n             IF WS-DAY-CNT > WS-DAY-CNT0\n                 ADD 1                        TO WS-DEL-CNT0\n                 GO TO 0700-SELECT-EXIT.\n           IF HSMLIST-TYPE NOT NUMERIC\n             IF WS-DAY-CNT > WS-DAY-CNT5\n                 ADD 1                        TO WS-DEL-CNT5\n                 GO TO 0700-SELECT-EXIT.\n\n       0700-KEEP-RECORD.\n           MOVE HSMLIST-RECORD                TO HSMOUT-RECORD.\n           PERFORM 0800-WRITE-HSMOUT.\n           GO TO 0700-SELECT-EXIT.\n\n       0700-WRITE-QUESTION.\n           MOVE HSMLIST-RECORD                TO HSMOUT-RECORD.\n           MOVE '?'                           TO HSMOUT-QUESTION.\n           PERFORM 0800-WRITE-HSMOUT.\n\n       0700-SELECT-EXIT. EXIT.\n\n       0800-WRITE-HSMOUT.\n           WRITE HSMOUT-RECORD.\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0475B write error on HSMOUT'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n           ADD 1                              TO WS-WRITE-RCD-CNT.\n\n      ************************************ END MIS0475B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS0500B": {"ttr": 11530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x13\\x01\\x19\\x14\\x8f\\x01\\x193o\\x122\\x03\\x7f\\x03r\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2019-05-28T00:00:00", "modifydate": "2019-12-02T12:32:13", "lines": 895, "newlines": 882, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  MIS0500B: change symbolics in run JCL'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MIS0500B.\n      ******************************************************************\n      *@@@ II change symbolics in run JCL\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      *****************************************************************\n      * Date written: 02/19/95\n      * Author      : Jim Iannone\n      *               loop through run JCL and increment\n      *               hardcoded symbolics in preparation for run\n      *               of desired job.\n      *\n      *               allow global override of current date offset\n      *               via static parm\n      *\n      *    SYNTAX:\n      *\n      *        OFFX=        WILL REFLECT PARM-OFFSET-SW\n      *\n      *        EOMDATE=     MM/DD/YY  END OF PREV MONTH\n      *        CURDATE=     MM/DD/YY  CURRENT DATE\n      *        EOYDATE=     MM/DD/YY  END OF PREV YEAR\n      *        CURREOM=     MM/DD/YY  END OF CURR MONTH\n      *        YESTDAY=     MM/DD/YY  YESTERDAY\n      *        LASTMON=     MMMCCYY   MONTH AND YEAR, 1 MONTH AGO\n      *        PREVMON=     MMMCCYY   MONTH AND YEAR, 2 MONTHS AGO\n      *        ----------------------------------------------------\n      *        YMDX=     -  RETURNS CURRENT DATE IN YYMMDD FORMAT\n      *        YDDX=     -  RETURNS CURRENT DATE IN YYDDD FORMAT\n      *        CMDX=     -  RETURNS CURRENT DATE IN CCYYMMDD FORMAT\n      *        CDDX=     -  RETURNS CURRENT DATE IN CCYYDDD FORMAT\n      *        CYDX=     -  RETURNS CURRENT YEAR IN CCYY FORMAT\n      *        HMSX=     -  RETURNS CURRENT TIME IN HHMMS FORMAT\n      *        RUNX=     -  INCREMENTS A 2 DIGIT VERSION COUNTER IN\n      *                     WHICHEVER JCL IS SPECIFIED\n      *        DAYX=     -  NOT UPDATED BY YMDX=.  SEE YMD###=.\n      *\n      *        QTRX=     -  QUARTER:  1/2/3/4 DEPENDING ON MONTH\n      *        ----------------------------------------------------\n      *        YMF###=      RETURNS FUTURE DATE EQUAL TO CURRENT DATE\n      *        YDF###=      PLUS ### DAYS\n      *        CMF###=\n      *        CDF###=\n      *        CYF###=\n      *\n      *        YMD###=      RETURNS PAST DATE EQUAL TO CURRENT DATE\n      *        YDD###=      MINUS ### DAYS\n      *        CMD###=\n      *        CDD###=\n      *        CYD###=\n      *        DAYX=        #### WILL BE PLACED IN DAYX= IF SPECIFIED\n      *        ----------------------------------------------------\n      *        YMFE##=      RETURNS AN END-OF-MONTH DATE FOR ## MONTHS\n      *        YDFE##=      AHEAD OF CURRENT DATE\n      *        CMFE##=\n      *        CDFE##=\n      *\n      *        YMDE##=      RETURNS AN END-OF-MONTH DATE FOR ## MONTHS\n      *        YDDE##=      PREVIOUS TO CURRENT DATE\n      *        CMDE##=\n      *        CDDE##=\n      *        DAYM=        DAYM= WILL BE SET TO THE NUMBER OF DAYS\n      *                     BETWEEN THESE DATES (#### FORMAT)\n      *        ----------------------------------------------------\n      *        YMFEY#=      RETURNS AN END-OF-YEAR DATE FOR # YEARS\n      *        YDFEY#=      AHEAD OF CURRENT DATE\n      *        CMFEY#=\n      *        CDFEY#=\n      *\n      *        YMDEY#=      RETURNS AN END-OF-YEAR DATE FOR # YEARS\n      *        YDDEY#=      PREVIOUS TO CURRENT DATE\n      *        CMDEY#=\n      *        CDDEY#=\n      *        DAYY=        DAYY= WILL BE SET TO THE NUMBER OF DAYS\n      *                     BETWEEN THESE DATES (#### FORMAT)\n      *\n      *\n      *    RULES:\n      *\n      *        IF RUNX OCCURS BEFORE Y--X OR C--X, RUNX IS ALWAYS\n      *        INCREMENTED.  IF RUNX OCCURS ANYWHERE AFTER Y--X OR\n      *        C--X IT INCREMENTS AS LONG AS Y--X OR C--X HAS NOT\n      *        CHANGED.  IF IT HAS (IE: RUN ON A NEW DAY) THEN\n      *        RUNX IS SET TO 01\n      *\n      *        DAYX MUST OCCUR ANYWHERE AFTER Y--### OR C--###\n      *        DAYM MUST OCCUR ANYWHERE AFTER Y--E## OR C--E##\n      *        DAYY MUST OCCUR ANYWHERE AFTER Y--EY# OR C--EY#\n      *\n      *    EXAMPLES:\n      *\n      *        IF YOUR JCL LOOKS LIKE THIS:        YMDE02=000000,\n      *                                            DAYM=0000\n      *        AND THE CURRENT DATE IS:            04/20/95\n      *\n      *        THE RESULTS ARE:                    YMDE02=950228,\n      *                                            DAYM=0051\n      *\n      *        IF USING THESE PARAMETERS IN A FILE NAME:\n      *        MEDP.STVSSO.BACKUP.P&YMDE02..D&DAYM,   CONVERTS TO\n      *        MEDP.STVSSO.BACKUP.P950228.D0051,\n      *\n      *    NOTES:\n      *\n      *        THESE PARAMETERS MAY BE USED AS INPUT TO COBOL PROGRAMS\n      *        TO AVOID CALCULATING DATES/NUMBER OF DAYS/ETC.\n      *\n      *        USE THE 'DATE' TRANSACTION TO CONVERT DATES OR NUMBER\n      *        OF DAYS BETWEEN DATES, ETC.\n      *\n      *        USE MIS0425B IN CONJUNCTION WITH THIS PROGRAM TO\n      *        DYNAMICALLY UPDATE DATES OR SEQUENCE NUMBERS IN A\n      *        STATIC PARM.\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT JOBJCL               ASSIGN TO JOBJCL\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT OFFSET               ASSIGN TO OFFSET\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  JOBJCL\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  JOBJCL-RECORD.\n           05  JOBJCL-PREFIX-1X2       PIC  XX.\n           05  JOBJCL-PREFIX-3         PIC  X.\n           05  FILLER                  PIC  X(77).\n\n       FD  OFFSET\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  OFFSET-RECORD.\n           05  OFFSET-DOCU             PIC  X.\n           05  OFFSET-AMOUNT.\n               10  OFFSET-PAST-FUT     PIC  X.\n               10  OFFSET-OFFSET       PIC  X(05).\n           05  FILLER                  PIC  X(73).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage MIS0500B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-TIME                 PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-TIME.\n               10  WS-TIME-1X5         PIC  X(05).\n               10  FILLER              PIC  XXX.\n           05  WS-1-CYDDD              PIC  X(07)    VALUE SPACE.\n           05  FILLER REDEFINES WS-1-CYDDD.\n               10  FILLER              PIC  XX.\n               10  WS-1-YDDD           PIC  X(05).\n           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-1-CYMD.\n               10  FILLER              PIC  XX.\n               10  WS-1-YMD            PIC  X(06).\n           05  FILLER REDEFINES WS-1-CYMD.\n               10  WS-1-CY             PIC  X(04).\n               10  FILLER              PIC  X(04).\n           05  WS-2-CYMD               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-2-CYMD.\n               10  FILLER              PIC  XX.\n               10  WS-2-YMD            PIC  X(06).\n           05  WS-DATA                 PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-DATA.\n               10  FILLER              PIC  XX.\n               10  WS-DATA2            PIC  X(06).\n           05  WS-LEN                  PIC  99       VALUE ZERO.\n           05  WS-NBR                  PIC  99       VALUE ZERO.\n           05  FILLER REDEFINES WS-NBR.\n               10  WS-NBR-1            PIC  9.\n               10  WS-NBR-2            PIC  9.\n           05  WS-RUN                  PIC  99       VALUE ZERO.\n           05  WS-DAYX                 PIC  9(04)    VALUE ZERO.\n           05  WS-DAYM                 PIC  9(04)    VALUE ZERO.\n           05  WS-DAYY                 PIC  9(04)    VALUE ZERO.\n           05  WS-NBR-DAYS             PIC  X(05)    VALUE SPACE.\n           05  WS-REQUESTED            PIC  X(06)    VALUE SPACE.\n           05  WS-1-EOM8               PIC  X(08)    VALUE SPACE.\n           05  WS-1-YES8               PIC  X(08)    VALUE SPACE.\n           05  WS-1-CUR8               PIC  X(08)    VALUE SPACE.\n           05  WS-1-COM8               PIC  X(08)    VALUE SPACE.\n           05  WS-1-EOY8               PIC  X(08)    VALUE SPACE.\n           05  WS-1-LST7               PIC  X(07)    VALUE SPACE.\n           05  WS-1-PRV7               PIC  X(07)    VALUE SPACE.\n           05  WS-WORK1                PIC  9(04)    VALUE ZERO.\n           05  WS-WORK2                PIC  9(04)    VALUE ZERO.\n           05  WS-OFFSET               PIC  X(06)    VALUE SPACE.\n           05  WS-CALL-STV0400B        PIC  X(08)    VALUE 'STV0400B'.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-RCD-CNT         PIC S9(07)    VALUE ZERO.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(05)    VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  WS-END-JOBJCL-SW        PIC  X        VALUE 'N'.\n               88  END-OF-JOBJCL                     VALUE 'Y'.\n               88  MORE-JOBJCL-RCDS                  VALUE 'N'.\n           05  WS-REWRITE-SW           PIC  X        VALUE SPACE.\n           05  WS-STVDATE-CALC-SW      PIC  X        VALUE SPACE.\n           05  WS-DATE-SW              PIC  X        VALUE SPACE.\n           05  WS-DAYX-SW              PIC  X        VALUE SPACE.\n           05  WS-DAYM-SW              PIC  X        VALUE SPACE.\n           05  WS-DAYY-SW              PIC  X        VALUE SPACE.\n           05  WS-CY-SW                PIC  XX       VALUE SPACE.\n           05  FILLER REDEFINES WS-CY-SW.\n               10  WS-CY-SW-1          PIC  X.\n               10  WS-CY-SW-2          PIC  X.\n\n      *    Year 2000 compatible date routine\n       01  WS-STV0400B-FIELDS.\n           05  STV0400B-DATA           PIC  X(10)   VALUE SPACE.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X6        PIC  X(06).\n               10  STV0400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X8        PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAYS       PIC  X(05).\n               10  FILLER              PIC  X(05).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAY        PIC  X(09).\n               10  STV0400B-DAY-NBR    PIC  X.\n           05  STV0400B-DATA2          PIC  X(10)   VALUE SPACE.\n           05  STV0400B-IN             PIC  X(06)   VALUE SPACE.\n           05  STV0400B-OUT            PIC  X(06)   VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MIS0500B END  '.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELD.\n           05  LS-LENGTH               PIC S9(04)    COMP.\n           05  LS-OFFSET-SW            PIC  X.\n\n      /\n       PROCEDURE DIVISION USING LS-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           DISPLAY '      '.\n           DISPLAY '**** MIS0500B change JCL symbolics'.\n           PERFORM 0200-OPEN-FILES.\n\n      *---------------------------------------\n      *    Wherever MIS0500B generates a date, alter the\n      *    date by WS-OFFSET amount.\n      *+--------------------------------------\n           MOVE '-00000'                      TO WS-OFFSET.\n           IF WS-RETURN-CODE = ZERO\n             IF LS-OFFSET-SW = 'Y'\n                 PERFORM 0300-LOAD-OFFSET THRU\n                         0300-LOAD-OFFSET-EXIT.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-JOBJCL.\n\n           IF WS-OFFSET NOT = '-00000'\n               DISPLAY '---> Warning - dates offset by '\n                        WS-OFFSET ' days '.\n           DISPLAY '**** Records in JOBJCL   ' WS-READ-RCD-CNT.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** MIS0500B cond code ' WS-RETURN-CODE\n                       ' sent by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** MIS0500B EOJ encountered '.\n           DISPLAY '      '.\n\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN I-O  JOBJCL.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0500B open error on JOBJCL'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN INPUT OFFSET.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0500B open error on OFFSET'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0201                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE OFFSET.\n           CLOSE JOBJCL.\n\n      ****************************************\n      *    load OFFSET\n      ****************************************\n       0300-LOAD-OFFSET.\n           READ OFFSET.\n           IF WS-STAT = 10\n               GO TO 0300-LOAD-OFFSET-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0500B read error on OFFSET'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0300                     TO WS-RETURN-CODE\n               GO TO 0300-LOAD-OFFSET-EXIT.\n\n           IF OFFSET-DOCU = '*'\n               GO TO 0300-LOAD-OFFSET.\n           IF OFFSET-OFFSET NUMERIC\n               MOVE OFFSET-AMOUNT             TO WS-OFFSET\n           ELSE\n               DISPLAY '**** Offset amount not numeric '\n               MOVE +0301                     TO WS-RETURN-CODE\n               GO TO 0300-LOAD-OFFSET-EXIT.\n\n       0300-LOAD-OFFSET-EXIT. EXIT.\n\n       0400-PROCESS-JOBJCL.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE 'H:M:SM'                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-DATA                 TO WS-TIME.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-1X8                  TO WS-1-CYMD.\n           DISPLAY '**** System date ' WS-1-CYMD ' ' WS-TIME.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-OFFSET                     TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-1X8                  TO WS-1-CYMD.\n           DISPLAY '**** Offset date ' WS-1-CYMD.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'CYDDD '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-1X8                  TO WS-1-CYDDD.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE 'HMSM  '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-DATA                 TO WS-TIME.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0500-READ-JOBJCL\n                   UNTIL END-OF-JOBJCL.\n\n       0500-READ-JOBJCL.\n           READ JOBJCL.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-RCD-CNT\n               PERFORM 0600-SELECT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-JOBJCL-SW\n           ELSE\n               DISPLAY '**** MIS0500B read error on JOBJCL '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0500                     TO WS-RETURN-CODE.\n\n       0600-SELECT.\n           MOVE SPACE                         TO WS-REWRITE-SW.\n           MOVE SPACE                         TO WS-CY-SW.\n           IF JOBJCL-PREFIX-1X2 = '//'\n             IF JOBJCL-PREFIX-3 NOT = '*'\n                 PERFORM 0700-TEST-JCL\n                     VARYING WS-SUB1 FROM 5 BY 1\n                     UNTIL WS-SUB1 > 60.\n           IF WS-REWRITE-SW = 'Y'\n               PERFORM 2000-REWRITE-JOBJCL.\n\n       0700-TEST-JCL.\n           IF JOBJCL-RECORD(WS-SUB1:5) = 'YMDX='\n                                      OR 'YDDX='\n                                      OR 'CMDX='\n                                      OR 'CDDX='\n                                      OR 'HMSX='\n                                      OR 'RUNX='\n                                      OR 'CYDX='\n                                      OR 'QTRX='\n               COMPUTE WS-SUB2 = WS-SUB1 + 5\n               IF JOBJCL-RECORD(WS-SUB2:1) NUMERIC\n                   PERFORM 0800-CHANGE\n               ELSE\n                   ADD 1                      TO WS-SUB2\n                   PERFORM 0800-CHANGE.\n\n           IF JOBJCL-RECORD(WS-SUB1:8) = 'EOMDATE='\n                                      OR 'CURDATE='\n                                      OR 'CURREOM='\n                                      OR 'YESTDAY='\n                                      OR 'EOYDATE='\n                                      OR 'LASTMON='\n                                      OR 'PREVMON='\n               PERFORM 1300-STVDATE THRU\n                       1300-STVDATE-EXIT\n               COMPUTE WS-SUB2 = WS-SUB1 + 8\n               IF JOBJCL-RECORD(WS-SUB2:1) = QUOTE\n                   ADD 1                      TO WS-SUB2\n                   PERFORM 0800-CHANGE\n               ELSE\n                   PERFORM 0800-CHANGE.\n\n           IF JOBJCL-RECORD(WS-SUB1:3) = 'CMD' OR 'CMF'\n               MOVE 'GC'                      TO WS-CY-SW\n               MOVE 8                         TO WS-LEN\n           ELSE IF JOBJCL-RECORD(WS-SUB1:3) = 'YMD' OR 'YMF'\n               MOVE 'GY'                      TO WS-CY-SW\n               MOVE 6                         TO WS-LEN\n           ELSE IF JOBJCL-RECORD(WS-SUB1:3) = 'CDD' OR 'CDF'\n               MOVE 'JC'                      TO WS-CY-SW\n               MOVE 7                         TO WS-LEN\n           ELSE IF JOBJCL-RECORD(WS-SUB1:3) = 'YDD' OR 'YDF'\n               MOVE 'JY'                      TO WS-CY-SW\n               MOVE 5                         TO WS-LEN\n           ELSE IF JOBJCL-RECORD(WS-SUB1:3) = 'CYD' OR 'CYF'\n               MOVE 'GC'                      TO WS-CY-SW\n               MOVE 4                         TO WS-LEN.\n\n           IF JOBJCL-RECORD(WS-SUB1:3) = 'CMD' OR 'YMD'\n                                      OR 'CDD' OR 'YDD'\n                                      OR 'CMF' OR 'YMF'\n                                      OR 'CDF' OR 'YDF'\n               MOVE JOBJCL-RECORD(WS-SUB1:6) TO WS-REQUESTED\n               COMPUTE WS-SUB2 = WS-SUB1 + 3\n               IF JOBJCL-RECORD(WS-SUB2:3) NUMERIC\n                   ADD 3                      TO WS-SUB2\n                   IF JOBJCL-RECORD(WS-SUB2:1) = '='\n                       PERFORM 0900-CHANGE-DAYS.\n\n           IF JOBJCL-RECORD(WS-SUB1:3) = 'CYD' OR 'CYF'\n               MOVE JOBJCL-RECORD(WS-SUB1:6) TO WS-REQUESTED\n               COMPUTE WS-SUB2 = WS-SUB1 + 3\n               IF JOBJCL-RECORD(WS-SUB2:3) NUMERIC\n                   MOVE JOBJCL-RECORD(WS-SUB2:3) TO WS-WORK2\n                   ADD 3                      TO WS-SUB2\n                   IF JOBJCL-RECORD(WS-SUB2:1) = '='\n                       PERFORM 1000-CHANGE-YEARS.\n\n           IF JOBJCL-RECORD(WS-SUB1:4) = 'CMDE' OR 'YMDE'\n                                      OR 'CDDE' OR 'YDDE'\n                                      OR 'CMFE' OR 'YMFE'\n                                      OR 'CDFE' OR 'YDFE'\n               MOVE JOBJCL-RECORD(WS-SUB1:6) TO WS-REQUESTED\n               COMPUTE WS-SUB2 = WS-SUB1 + 6\n               IF JOBJCL-RECORD(WS-SUB2:1) = '='\n                   COMPUTE WS-SUB2 = WS-SUB1 + 4\n                   IF JOBJCL-RECORD(WS-SUB2:2) NUMERIC\n                       MOVE JOBJCL-RECORD(WS-SUB2:2) TO WS-NBR\n                       PERFORM 1100-CHANGE-MONTH THRU\n                               1100-CHANGE-MONTH-EXIT\n                   ELSE\n                   IF JOBJCL-RECORD(WS-SUB2:1) = 'Y'\n                       ADD 1                       TO WS-SUB2\n                       IF JOBJCL-RECORD(WS-SUB2:1) NUMERIC\n                           MOVE JOBJCL-RECORD(WS-SUB2:1) TO WS-NBR\n                           PERFORM 1200-CHANGE-YEAR THRU\n                                   1200-CHANGE-YEAR-EXIT.\n\n           IF JOBJCL-RECORD(WS-SUB1:5) = 'OFFX='\n             IF LS-OFFSET-SW = 'Y' OR 'N'\n                 COMPUTE WS-SUB2 = WS-SUB1 + 5\n                 IF JOBJCL-RECORD(WS-SUB2:1) = QUOTE\n                     ADD 1                    TO WS-SUB2\n                     PERFORM 0800-CHANGE\n                 ELSE\n                     PERFORM 0800-CHANGE.\n\n           IF WS-DAYX-SW = 'Y'\n             IF JOBJCL-RECORD(WS-SUB1:5) = 'DAYX='\n                 COMPUTE WS-SUB2 = WS-SUB1 + 5\n                 DISPLAY '**** DAYX set to ' WS-DAYX\n                 MOVE 'Y'                TO WS-REWRITE-SW\n                 IF JOBJCL-RECORD(WS-SUB2:1) NUMERIC\n                     MOVE WS-DAYX        TO JOBJCL-RECORD(WS-SUB2:4)\n                 ELSE\n                     ADD 1               TO WS-SUB2\n                     MOVE WS-DAYX        TO JOBJCL-RECORD(WS-SUB2:4).\n           IF WS-DAYM-SW = 'Y'\n             IF JOBJCL-RECORD(WS-SUB1:5) = 'DAYM='\n                 COMPUTE WS-SUB2 = WS-SUB1 + 5\n                 DISPLAY '**** DAYM set to ' WS-DAYM\n                 MOVE 'Y'                TO WS-REWRITE-SW\n                 IF JOBJCL-RECORD(WS-SUB2:1) NUMERIC\n                     MOVE WS-DAYM        TO JOBJCL-RECORD(WS-SUB2:4)\n                 ELSE\n                     ADD 1               TO WS-SUB2\n                     MOVE WS-DAYM        TO JOBJCL-RECORD(WS-SUB2:4).\n           IF WS-DAYY-SW = 'Y'\n             IF JOBJCL-RECORD(WS-SUB1:5) = 'DAYY='\n                 COMPUTE WS-SUB2 = WS-SUB1 + 5\n                 DISPLAY '**** DAYY set to ' WS-DAYY\n                 MOVE 'Y'                TO WS-REWRITE-SW\n                 IF JOBJCL-RECORD(WS-SUB2:1) NUMERIC\n                     MOVE WS-DAYY        TO JOBJCL-RECORD(WS-SUB2:4)\n                 ELSE\n                     ADD 1               TO WS-SUB2\n                     MOVE WS-DAYY        TO JOBJCL-RECORD(WS-SUB2:4).\n\n       0800-CHANGE.\n           IF WS-STVDATE-CALC-SW = 'Y'\n               PERFORM 0800-CHANGE-STVDATE.\n           IF JOBJCL-RECORD(WS-SUB1:5) = 'CMDX='\n             IF JOBJCL-RECORD(WS-SUB2:8) NUMERIC\n               IF JOBJCL-RECORD(WS-SUB2:8) NOT = WS-1-CYMD\n                   MOVE WS-1-CYMD TO JOBJCL-RECORD(WS-SUB2:8)\n                   DISPLAY '**** CMDX set to ' WS-1-CYMD\n                   MOVE 'Y'               TO WS-DATE-SW\n                   MOVE 'Y'               TO WS-REWRITE-SW.\n           IF JOBJCL-RECORD(WS-SUB1:5) = 'CDDX='\n             IF JOBJCL-RECORD(WS-SUB2:7) NUMERIC\n               IF JOBJCL-RECORD(WS-SUB2:7) NOT = WS-1-CYDDD\n                   MOVE WS-1-CYDDD TO JOBJCL-RECORD(WS-SUB2:7)\n                   DISPLAY '**** CDDX set to ' WS-1-CYDDD\n                   MOVE 'Y'               TO WS-DATE-SW\n                   MOVE 'Y'               TO WS-REWRITE-SW.\n           IF JOBJCL-RECORD(WS-SUB1:5) = 'YMDX='\n             IF JOBJCL-RECORD(WS-SUB2:6) NUMERIC\n               IF JOBJCL-RECORD(WS-SUB2:6) NOT = WS-1-YMD\n                   MOVE WS-1-YMD TO JOBJCL-RECORD(WS-SUB2:6)\n                   DISPLAY '**** YMDX set to ' WS-1-YMD\n                   MOVE 'Y'               TO WS-DATE-SW\n                   MOVE 'Y'               TO WS-REWRITE-SW.\n           IF JOBJCL-RECORD(WS-SUB1:5) = 'YDDX='\n             IF JOBJCL-RECORD(WS-SUB2:5) NUMERIC\n               IF JOBJCL-RECORD(WS-SUB2:5) NOT = WS-1-YDDD\n                   MOVE WS-1-YDDD TO JOBJCL-RECORD(WS-SUB2:5)\n                   DISPLAY '**** YDDX set to ' WS-1-YDDD\n                   MOVE 'Y'               TO WS-DATE-SW\n                   MOVE 'Y'               TO WS-REWRITE-SW.\n           IF JOBJCL-RECORD(WS-SUB1:5) = 'CYDX='\n             IF JOBJCL-RECORD(WS-SUB2:4) NUMERIC\n               IF JOBJCL-RECORD(WS-SUB2:4) NOT = WS-1-CY\n                   MOVE WS-1-CY TO JOBJCL-RECORD(WS-SUB2:4)\n                   DISPLAY '**** CYDX set to ' WS-1-CY\n                   MOVE 'Y'               TO WS-DATE-SW\n                   MOVE 'Y'               TO WS-REWRITE-SW.\n           IF JOBJCL-RECORD(WS-SUB1:5) = 'HMSX='\n             IF JOBJCL-RECORD(WS-SUB2:5) NUMERIC\n                 MOVE WS-TIME-1X5         TO JOBJCL-RECORD(WS-SUB2:5)\n                 DISPLAY '**** HMSX set to ' WS-TIME-1X5\n                 MOVE 'Y'                 TO WS-REWRITE-SW.\n           IF JOBJCL-RECORD(WS-SUB1:5) = 'QTRX='\n             IF JOBJCL-RECORD(WS-SUB2:1) NUMERIC\n                 MOVE SPACE                   TO WS-STV0400B-FIELDS\n                 MOVE WS-1-CYMD               TO STV0400B-1X8\n                 MOVE 'CYMD  '                TO STV0400B-IN\n                 MOVE 'QTR   '                TO STV0400B-OUT\n                 CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n                 IF STV0400B-1X6 = 'ERROR'\n                     DISPLAY '**** STV0400B error converting dates '\n                             ' 0800 '\n                     MOVE +0800               TO WS-RETURN-CODE\n                 ELSE\n                 IF JOBJCL-RECORD(WS-SUB2:1) NOT = STV0400B-DATA(1:1)\n                     MOVE STV0400B-DATA TO JOBJCL-RECORD(WS-SUB2:1)\n                     DISPLAY '**** QTRX set to ' STV0400B-DATA\n                     MOVE 'Y'             TO WS-REWRITE-SW.\n           IF JOBJCL-RECORD(WS-SUB1:5) = 'RUNX='\n             IF JOBJCL-RECORD(WS-SUB2:2) NUMERIC\n                 MOVE JOBJCL-RECORD(WS-SUB2:2) TO WS-RUN\n                 MOVE 'Y'                 TO WS-REWRITE-SW\n                 IF WS-DATE-SW = 'Y'\n                     MOVE '01'            TO JOBJCL-RECORD(WS-SUB2:2)\n                     DISPLAY '**** RUNX set to 01'\n                     MOVE SPACE           TO WS-DATE-SW\n                 ELSE\n                 IF WS-RUN < 99\n                     ADD 1                TO WS-RUN\n                     MOVE WS-RUN          TO JOBJCL-RECORD(WS-SUB2:2)\n                     DISPLAY '**** RUNX set to ' WS-RUN\n                 ELSE\n                     MOVE '01'            TO JOBJCL-RECORD(WS-SUB2:2)\n                     DISPLAY '**** RUNX set to 01'.\n           IF JOBJCL-RECORD(WS-SUB1:5) = 'OFFX='\n             IF JOBJCL-RECORD(WS-SUB2:1) NOT = LS-OFFSET-SW\n                 MOVE LS-OFFSET-SW        TO JOBJCL-RECORD(WS-SUB2:1)\n                 DISPLAY '**** Offset set to ' LS-OFFSET-SW\n                 MOVE 'Y'                 TO WS-REWRITE-SW.\n\n       0800-CHANGE-STVDATE.\n           IF JOBJCL-RECORD(WS-SUB1:8) = 'EOMDATE='\n             IF JOBJCL-RECORD(WS-SUB2:8) NOT = WS-1-EOM8\n                 MOVE WS-1-EOM8 TO JOBJCL-RECORD(WS-SUB2:8)\n                 DISPLAY '**** EOMDATE set to ' WS-1-EOM8\n                 MOVE 'Y'                 TO WS-REWRITE-SW.\n           IF JOBJCL-RECORD(WS-SUB1:8) = 'YESTDAY='\n             IF JOBJCL-RECORD(WS-SUB2:8) NOT = WS-1-YES8\n                 MOVE WS-1-YES8 TO JOBJCL-RECORD(WS-SUB2:8)\n                 DISPLAY '**** YESTDAY set to ' WS-1-YES8\n                 MOVE 'Y'                 TO WS-REWRITE-SW.\n           IF JOBJCL-RECORD(WS-SUB1:8) = 'CURDATE='\n             IF JOBJCL-RECORD(WS-SUB2:8) NOT = WS-1-CUR8\n                 MOVE WS-1-CUR8 TO JOBJCL-RECORD(WS-SUB2:8)\n                 DISPLAY '**** CURDATE set to ' WS-1-CUR8\n                 MOVE 'Y'                 TO WS-REWRITE-SW.\n           IF JOBJCL-RECORD(WS-SUB1:8) = 'EOYDATE='\n             IF JOBJCL-RECORD(WS-SUB2:8) NOT = WS-1-EOY8\n                 MOVE WS-1-EOY8 TO JOBJCL-RECORD(WS-SUB2:8)\n                 DISPLAY '**** EOYDATE set to ' WS-1-EOY8\n                 MOVE 'Y'                 TO WS-REWRITE-SW.\n           IF JOBJCL-RECORD(WS-SUB1:8) = 'CURREOM='\n             IF JOBJCL-RECORD(WS-SUB2:8) NOT = WS-1-COM8\n                 MOVE WS-1-COM8 TO JOBJCL-RECORD(WS-SUB2:8)\n                 DISPLAY '**** CURREOM set to ' WS-1-COM8\n                 MOVE 'Y'                 TO WS-REWRITE-SW.\n           IF JOBJCL-RECORD(WS-SUB1:8) = 'LASTMON='\n             IF JOBJCL-RECORD(WS-SUB2:7) NOT = WS-1-LST7\n                 MOVE WS-1-LST7 TO JOBJCL-RECORD(WS-SUB2:7)\n                 DISPLAY '**** LASTMON set to ' WS-1-LST7\n                 MOVE 'Y'                 TO WS-REWRITE-SW.\n           IF JOBJCL-RECORD(WS-SUB1:8) = 'PREVMON='\n             IF JOBJCL-RECORD(WS-SUB2:7) NOT = WS-1-PRV7\n                 MOVE WS-1-PRV7 TO JOBJCL-RECORD(WS-SUB2:7)\n                 DISPLAY '**** PREVMON set to ' WS-1-PRV7\n                 MOVE 'Y'                 TO WS-REWRITE-SW.\n\n       0900-CHANGE-DAYS.\n           PERFORM 1700-GET-DIFF-DATE THRU\n                   1700-GET-DIFF-DATE-EXIT.\n           MOVE 'Y'                       TO WS-REWRITE-SW.\n           MOVE 'Y'                       TO WS-DAYX-SW.\n           MOVE WS-NBR-DAYS               TO WS-DAYX.\n           IF WS-CY-SW-2 = 'Y'\n               DISPLAY '**** ' WS-REQUESTED ' set to ' WS-DATA2\n           ELSE\n               DISPLAY '**** ' WS-REQUESTED ' set to ' WS-DATA.\n\n       1000-CHANGE-YEARS.\n           MOVE 'Y'                           TO WS-REWRITE-SW.\n           MOVE 'N'                           TO WS-DAYX-SW.\n           MOVE WS-1-CY                       TO WS-WORK1.\n           IF JOBJCL-RECORD(WS-SUB1:3) = 'CYF'\n               COMPUTE WS-WORK1 = WS-WORK1 + WS-WORK2\n               MOVE WS-WORK1                  TO WS-DATA\n               PERFORM 1900-MOVE-TO-JCL\n           ELSE\n               COMPUTE WS-WORK1 = WS-WORK1 - WS-WORK2\n               MOVE WS-WORK1                  TO WS-DATA\n               PERFORM 1900-MOVE-TO-JCL.\n           DISPLAY '**** ' WS-REQUESTED ' set to ' WS-DATA.\n\n       1100-CHANGE-MONTH.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-1-CYMD                     TO STV0400B-1X8.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           IF WS-REQUESTED(3: 1) = 'F'\n               MOVE 'CMFE'                    TO STV0400B-OUT\n           ELSE\n               MOVE 'CMDE'                    TO STV0400B-OUT.\n           MOVE WS-NBR                        TO STV0400B-OUT(5: 2).\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           IF STV0400B-1X6 = 'ERROR'\n               DISPLAY '**** STV0400B error converting dates '\n                       ' 1100 '\n               MOVE +1100                     TO WS-RETURN-CODE\n               GO TO 1100-CHANGE-MONTH-EXIT.\n           MOVE STV0400B-1X8                  TO WS-2-CYMD WS-DATA.\n           IF WS-CY-SW-1 = 'J'\n               MOVE SPACE                     TO WS-STV0400B-FIELDS\n               MOVE WS-2-CYMD                 TO STV0400B-1X8\n               MOVE 'CYMD  '                  TO STV0400B-IN\n               MOVE 'CYDDD '                  TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               IF STV0400B-1X6 = 'ERROR '\n                   DISPLAY '**** STV0400B error converting dates '\n                           ' 1101 '\n                   DISPLAY '**** ' WS-STV0400B-FIELDS\n                   MOVE +1102                 TO WS-RETURN-CODE\n                   GO TO 1100-CHANGE-MONTH-EXIT\n               ELSE\n                   MOVE STV0400B-1X8          TO WS-DATA.\n           PERFORM 1800-GET-NBR-DAYS THRU\n                   1800-GET-NBR-DAYS-EXIT.\n           MOVE 'Y'                           TO WS-DAYM-SW.\n           MOVE WS-NBR-DAYS                   TO WS-DAYM.\n           IF WS-CY-SW-2 = 'Y'\n               DISPLAY '**** ' WS-REQUESTED ' set to ' WS-DATA2\n           ELSE\n               DISPLAY '**** ' WS-REQUESTED ' set to ' WS-DATA.\n\n       1100-CHANGE-MONTH-EXIT. EXIT.\n\n       1200-CHANGE-YEAR.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-1-CYMD                     TO STV0400B-1X8.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           IF WS-REQUESTED(3: 1) = 'F'\n               MOVE 'CMFEY'                   TO STV0400B-OUT\n           ELSE\n               MOVE 'CMDEY'                   TO STV0400B-OUT.\n           MOVE WS-NBR-2                      TO STV0400B-OUT(6: 1).\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           IF STV0400B-1X6 = 'ERROR'\n               DISPLAY '**** STV0400B error converting dates '\n                       ' 1200 '\n               MOVE +1200                     TO WS-RETURN-CODE\n               GO TO 1200-CHANGE-YEAR-EXIT.\n           MOVE STV0400B-1X8                  TO WS-2-CYMD WS-DATA.\n           IF WS-CY-SW-1 = 'J'\n               MOVE SPACE                     TO WS-STV0400B-FIELDS\n               MOVE WS-2-CYMD                 TO STV0400B-1X8\n               MOVE 'CYMD  '                  TO STV0400B-IN\n               MOVE 'CYDDD '                  TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               IF STV0400B-1X6 = 'ERROR '\n                   DISPLAY '**** STV0400B error converting dates '\n                           ' 1201 '\n                   DISPLAY '**** ' WS-STV0400B-FIELDS\n                   MOVE +1202                 TO WS-RETURN-CODE\n                   GO TO 1200-CHANGE-YEAR-EXIT\n               ELSE\n                   MOVE STV0400B-1X8          TO WS-DATA.\n           PERFORM 1800-GET-NBR-DAYS THRU\n                   1800-GET-NBR-DAYS-EXIT.\n           MOVE 'Y'                           TO WS-DAYY-SW.\n           MOVE WS-NBR-DAYS                   TO WS-DAYY.\n           IF WS-CY-SW-2 = 'Y'\n               DISPLAY '**** ' WS-REQUESTED ' set to ' WS-DATA2\n           ELSE\n               DISPLAY '**** ' WS-REQUESTED ' set to ' WS-DATA.\n\n       1200-CHANGE-YEAR-EXIT. EXIT.\n\n       1300-STVDATE.\n           IF WS-STVDATE-CALC-SW = 'Y'\n               GO TO 1300-STVDATE-EXIT.\n           MOVE 'Y'                           TO WS-STVDATE-CALC-SW.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-1-CYMD                     TO STV0400B-1X8.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'CMDE01'                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'M/D/Y '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-1X8                  TO WS-1-EOM8.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-1-CYMD                     TO STV0400B-1X8.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'CMD001'                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'M/D/Y '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-1X8                  TO WS-1-YES8.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-1-CYMD                     TO STV0400B-1X8.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'M/D/Y '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-1X8                  TO WS-1-CUR8.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-1-CYMD                     TO STV0400B-1X8.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'CMDE00'                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'M/D/Y '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-1X8                  TO WS-1-COM8.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-1-CYMD                     TO STV0400B-1X8.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'CMDEY1'                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'M/D/Y '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-1X8                  TO WS-1-EOY8.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-1-CYMD                     TO STV0400B-1X8.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'CMDE01'                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'MMMCY '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-1X8                  TO WS-1-LST7.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-1-CYMD                     TO STV0400B-1X8.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'CMDE02'                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'MMMCY '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-1X8                  TO WS-1-PRV7.\n\n       1300-STVDATE-EXIT. EXIT.\n\n       1700-GET-DIFF-DATE.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-1-CYMD                     TO STV0400B-1X8.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           IF WS-REQUESTED(3: 1) = 'F'\n               MOVE '+00000'                  TO STV0400B-OUT\n           ELSE\n               MOVE '-00000'                  TO STV0400B-OUT.\n           COMPUTE WS-SUB2 = WS-SUB1 + 3.\n           MOVE JOBJCL-RECORD(WS-SUB2:3)      TO STV0400B-OUT(4: 3).\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           IF STV0400B-1X6 = 'ERROR '\n               DISPLAY '**** STV0400B error converting dates '\n                       ' 1700 '\n               DISPLAY '**** ' WS-STV0400B-FIELDS\n               MOVE +1700                     TO WS-RETURN-CODE\n               GO TO 1700-GET-DIFF-DATE-EXIT.\n           MOVE STV0400B-OUT(2: 5)            TO WS-NBR-DAYS.\n           MOVE STV0400B-1X8                  TO WS-DATA WS-2-CYMD.\n           IF WS-CY-SW-1 = 'J'\n               MOVE SPACE                     TO WS-STV0400B-FIELDS\n               MOVE WS-DATA                   TO STV0400B-1X8\n               MOVE 'CYMD  '                  TO STV0400B-IN\n               MOVE 'CYDDD '                  TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               IF STV0400B-1X6 = 'ERROR '\n                   DISPLAY '**** STV0400B error converting dates '\n                           ' 1701 '\n                   DISPLAY '**** ' WS-STV0400B-FIELDS\n                   MOVE +1702                 TO WS-RETURN-CODE\n                   GO TO 1700-GET-DIFF-DATE-EXIT\n               ELSE\n                   MOVE STV0400B-1X8          TO WS-DATA.\n           PERFORM 1900-MOVE-TO-JCL.\n\n       1700-GET-DIFF-DATE-EXIT. EXIT.\n\n       1800-GET-NBR-DAYS.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           IF WS-REQUESTED(3: 1) = 'F'\n               MOVE WS-2-CYMD                 TO STV0400B-DATA2\n               MOVE WS-1-CYMD                 TO STV0400B-1X8\n           ELSE\n               MOVE WS-2-CYMD                 TO STV0400B-1X8\n               MOVE WS-1-CYMD                 TO STV0400B-DATA2.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'DAYS  '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           IF STV0400B-1X6 = 'ERROR '\n               DISPLAY '**** STV0400B error converting dates '\n                       ' 1800 '\n               DISPLAY '**** ' WS-STV0400B-FIELDS\n               MOVE +1800                     TO WS-RETURN-CODE\n               GO TO 1800-GET-NBR-DAYS-EXIT.\n           MOVE 'Y'                           TO WS-REWRITE-SW.\n           MOVE STV0400B-DAYS                 TO WS-NBR-DAYS.\n           PERFORM 1900-MOVE-TO-JCL.\n\n       1800-GET-NBR-DAYS-EXIT. EXIT.\n\n       1900-MOVE-TO-JCL.\n           COMPUTE WS-SUB2 = WS-SUB1 + 7.\n           IF JOBJCL-RECORD(WS-SUB2:1) NUMERIC\n               IF WS-CY-SW-2 = 'Y'\n                   MOVE WS-DATA2 TO JOBJCL-RECORD(WS-SUB2: WS-LEN)\n               ELSE\n                   MOVE WS-DATA TO JOBJCL-RECORD(WS-SUB2: WS-LEN)\n           ELSE\n               ADD 1              TO WS-SUB2\n               IF WS-CY-SW-2 = 'Y'\n                   MOVE WS-DATA2 TO JOBJCL-RECORD(WS-SUB2: WS-LEN)\n               ELSE\n                   MOVE WS-DATA TO JOBJCL-RECORD(WS-SUB2: WS-LEN).\n\n       2000-REWRITE-JOBJCL.\n           REWRITE JOBJCL-RECORD.\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0500B rewrite error on JOBJCL'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +2000                     TO WS-RETURN-CODE.\n\n      ************************************ END MIS0500B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS0520B": {"ttr": 12036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00W\\x01\\x19\\x14\\x8f\\x01\\x193o\\x122\\x01\\x85\\x01\\x80\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2019-05-28T00:00:00", "modifydate": "2019-12-02T12:32:57", "lines": 389, "newlines": 384, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  MIS0520B: tape dsn vol list for jcl '.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MIS0520B.\n      ******************************************************************\n      *@@@ II generate tape DSN volume list for JCL\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ******************************************************************\n      * Date written: 06/06/2000\n      * Author      : Jim Iannone\n      *\n      *               1.  RMM is queried for a dataset name:\n      *                     RMM SD DSN('PDSMS.SMHM.DGA6HCT0.HMMASTER.*')\n      *                     SINCE(2000/152) OWN(*) LIM(*) SEQ(*)\n      *\n      *                     output is not in volume sequence order\n      *\n      *               2.  volumes from previous query are placed into\n      *                   an RMM query to obtain volume sequence:\n      *                     RMM LV 000000 STAT\n      *\n      *               3.  this program sorts the volumes by volume\n      *                   sequence and places the volume list into\n      *                   a valid JCL DDN line.  that is then\n      *                   concatenated into other valid JCL and\n      *                   is used to catalog a previously\n      *                   uncataloged dataset.\n      *\n      ****************************************************************\n      * input:    READY\n      *           RMM LV 308267 STAT\n      *           Statistics:\n      *           Number of data sets = 1\n      *           Volume Usage(Kb)= 713522\n      *           Date last read  = 2000/06/04\n      *           Drive last used = 0691\n      *           Volume sequence = 4\n      *           Previous volume = 308277\n      *\n      * output:\n      *\n      *     //    VOL=SER=(308323,308286,308277,308267,308402,\n      *     //             308809,308807)\n      *\n      ****************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT RMMLVI               ASSIGN TO RMMLVI\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT GDGLVL               ASSIGN TO GDGLVL\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT RMMLVO               ASSIGN TO RMMLVO\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT SORT-RMMLVI          ASSIGN TO S-SORTWK01.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  RMMLVI\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  RMMLVI-RECORD.\n           05  RMMLVI-RCD              PIC  X(80).\n           05  FILLER REDEFINES RMMLVI-RCD.\n               10  RMMLVI-1X15         PIC  X(15).\n               10  FILLER              PIC  XXX.\n               10  RMMLVI-19           PIC  X.\n               10  RMMLVI-20           PIC  X.\n               10  FILLER              PIC  X(60).\n\n       FD  GDGLVL\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  GDGLVL-RECORD.\n           05  GDGLVL-RCD              PIC  X(80).\n           05  FILLER REDEFINES GDGLVL-RCD.\n               10  FILLER              PIC  X(29).\n               10  GDGLVL-30X37        PIC  X(08).\n               10  FILLER REDEFINES GDGLVL-30X37.\n                   15  FILLER          PIC  X.\n                   15  GDGLVL-31X34    PIC  X(04).\n                   15  FILLER          PIC  XXX.\n               10  FILLER              PIC  X(43).\n\n       FD  RMMLVO\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  RMMLVO-RECORD.\n           05  RMMLVO-RCD              PIC  X(80).\n\n       SD  SORT-RMMLVI.\n       01  SORT-RECORD.\n           05  SR-VOLSER               PIC  X(06).\n           05  SR-VOLSEQ               PIC  99.\n           05  FILLER REDEFINES SR-VOLSEQ.\n               10  SR-VOLSEQ-1         PIC  X.\n               10  SR-VOLSEQ-2         PIC  X.\n           05  SR-FILLER               PIC  X(12).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage MIS0520B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-MAX-PER-LN           PIC  999      VALUE ZERO.\n           05  WS-GDG-HOLD             PIC  X(08)    VALUE SPACE.\n           05  WS-APPEND-LINE-1        PIC  X(40)    VALUE\n               '//*-------------------------------------'.\n           05  WS-APPEND-LINE-2        PIC  X(40)    VALUE\n               '//*   VOL=SER= generated by MIS0520B    '.\n           05  WS-RMMLVO-RCD           PIC  X(80)    VALUE SPACE.\n           05  FILLER REDEFINES WS-RMMLVO-RCD.\n               10  WS-SLASH            PIC  XX.\n               10  FILLER              PIC  X(04).\n               10  WS-PREFIX           PIC  X(09).\n               10  WS-VOLS             PIC  X(49).\n               10  WS-VOL REDEFINES WS-VOLS\n                                       PIC  X(07)\n                                       OCCURS 7 TIMES.\n               10  FILLER              PIC  XX.\n               10  WS-GDG              PIC  X(05).\n               10  FILLER              PIC  X(09).\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-RCD-CNT         PIC S9(07)    VALUE ZERO.\n           05  WS-SORT-RCD-CNT         PIC S9(07)    VALUE ZERO.\n           05  WS-WRITE-RCD-CNT        PIC S9(07)    VALUE ZERO.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(05)    VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  WS-END-RMMLVI-SW        PIC  X        VALUE 'N'.\n               88  END-OF-RMMLVI                     VALUE 'Y'.\n               88  MORE-RMMLVI-RCDS                  VALUE 'N'.\n           05  WS-END-GDGLVL-SW        PIC  X        VALUE 'N'.\n               88  END-OF-GDGLVL                     VALUE 'Y'.\n               88  MORE-GDGLVL-RCDS                  VALUE 'N'.\n           05  WS-END-SORT-SW          PIC  X        VALUE 'N'.\n               88  END-OF-SORT                       VALUE 'Y'.\n               88  MORE-SORT-RCDS                    VALUE 'N'.\n           05  WS-FIND-VOL-SW          PIC  X        VALUE 'Y'.\n\n       01  WS-STV0400B-FIELDS.\n           05  STV0400B-DATA           PIC  X(10)   VALUE SPACE.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X6        PIC  X(06).\n               10  STV0400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X8        PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAYS       PIC  X(05).\n               10  FILLER              PIC  X(05).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAY        PIC  X(09).\n               10  STV0400B-DAY-NBR    PIC  X.\n           05  STV0400B-DATA2          PIC  X(10)   VALUE SPACE.\n           05  STV0400B-IN             PIC  X(06)   VALUE SPACE.\n           05  STV0400B-OUT            PIC  X(06)   VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MIS0520B END  '.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELD.\n           05  LS-LENGTH               PIC S9(04)    COMP.\n           05  LS-GDG-SW               PIC  X.\n           05  LS-APPEND-DOC-SW        PIC  X.\n           05  LS-FILLER               PIC  X(06).\n\n      /\n       PROCEDURE DIVISION USING LS-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           DISPLAY '      '.\n           DISPLAY '**** MIS0520B tape DSN volume list '.\n           PERFORM 0200-OPEN-FILES.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-RMMLVI.\n\n           DISPLAY '**** Records in RMMLVI   ' WS-READ-RCD-CNT.\n           DISPLAY '**** Records sorted      ' WS-SORT-RCD-CNT.\n           DISPLAY '**** Records written     ' WS-WRITE-RCD-CNT.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** MIS0520B cond code ' WS-RETURN-CODE\n                       ' sent by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** MIS0520B EOJ encountered '.\n           DISPLAY '      '.\n\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  RMMLVI.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0520B open error on RMMLVI'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN INPUT  GDGLVL.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0520B open error on GDGLVL'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0201                     TO WS-RETURN-CODE.\n           OPEN OUTPUT RMMLVO.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0520B open error on RMMLVO'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0202                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE RMMLVO.\n           CLOSE GDGLVL.\n           CLOSE RMMLVI.\n\n       0400-PROCESS-RMMLVI.\n           IF WS-RETURN-CODE = ZERO\n               SORT SORT-RMMLVI\n                   ON ASCENDING KEY SR-VOLSEQ\n                   INPUT PROCEDURE IS 0500-SORT-IN\n                   OUTPUT PROCEDURE IS 0900-SORT-OUT.\n\n       0500-SORT-IN.\n           IF LS-GDG-SW = 'Y'\n               PERFORM 0600-READ-GDGLVL THRU\n                       0600-READ-GDGLVL-EXIT\n                       UNTIL END-OF-GDGLVL.\n           PERFORM 0600-READ-RMMLVI THRU\n                   0600-READ-RMMLVI-EXIT\n                   UNTIL END-OF-RMMLVI.\n\n       0600-READ-GDGLVL.\n           READ GDGLVL.\n           IF WS-STAT = ZERO\n             IF GDGLVL-31X34 NUMERIC\n                 MOVE GDGLVL-30X37            TO WS-GDG-HOLD\n                 MOVE 'Y'                     TO WS-END-GDGLVL-SW\n             ELSE\n                 CONTINUE\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-GDGLVL-SW\n           ELSE\n               DISPLAY '**** MIS0520B read error on GDGLVL'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0600                     TO WS-RETURN-CODE.\n\n       0600-READ-GDGLVL-EXIT. EXIT.\n\n       0600-READ-RMMLVI.\n           READ RMMLVI.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-RCD-CNT\n               PERFORM 0700-SELECT THRU\n                       0700-SELECT-EXIT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-RMMLVI-SW\n           ELSE\n               DISPLAY '**** MIS0520B read error on RMMLVI'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0600                     TO WS-RETURN-CODE.\n\n       0600-READ-RMMLVI-EXIT. EXIT.\n\n       0700-SELECT.\n           IF WS-FIND-VOL-SW = 'Y'\n               PERFORM 0700-FIND-VOLUME\n                   VARYING WS-SUB2 FROM 1 BY 1\n                   UNTIL WS-SUB2 > 60.\n           IF RMMLVI-1X15 = 'Volume sequence'\n                MOVE 'Y'                      TO WS-FIND-VOL-SW\n                IF RMMLVI-20 NUMERIC\n                    MOVE RMMLVI-19            TO SR-VOLSEQ-1\n                    MOVE RMMLVI-20            TO SR-VOLSEQ-2\n                    PERFORM 0800-SEND-TO-SORT\n                ELSE\n                    MOVE ZERO                 TO SR-VOLSEQ-1\n                    MOVE RMMLVI-19            TO SR-VOLSEQ-2\n                    PERFORM 0800-SEND-TO-SORT.\n           IF RMMLVI-1X15 = 'READY          '\n                MOVE 'Y'                      TO WS-FIND-VOL-SW.\n\n       0700-SELECT-EXIT. EXIT.\n\n       0700-FIND-VOLUME.\n           IF RMMLVI-RCD(WS-SUB2: 7) = 'RMM LV '\n                MOVE RMMLVI-RCD(WS-SUB2 + 7: 6) TO SR-VOLSER\n                MOVE 60                        TO WS-SUB2\n                MOVE 'N'                       TO WS-FIND-VOL-SW.\n\n       0800-SEND-TO-SORT.\n           RELEASE SORT-RECORD.\n\n      *-------------------------------------------------------\n      *-------------------------------------------------------\n      *-------------------------------------------------------\n\n       0900-SORT-OUT.\n           MOVE '//'                          TO WS-SLASH.\n           MOVE 'VOL=SER=('                   TO WS-PREFIX.\n           MOVE 7                             TO WS-MAX-PER-LN.\n           MOVE 1                             TO WS-SUB1.\n           PERFORM 1000-RETURN-RECORDS\n               UNTIL END-OF-SORT.\n           IF WS-SORT-RCD-CNT > ZERO\n               SUBTRACT 1 FROM WS-SUB1\n               MOVE ')'                       TO WS-VOL(WS-SUB1)(7:1)\n               MOVE WS-GDG-HOLD               TO WS-GDG\n               MOVE WS-RMMLVO-RCD             TO RMMLVO-RCD\n               PERFORM 1500-WRITE-RMMLVO\n               IF LS-APPEND-DOC-SW = 'Y'\n                   PERFORM 1400-APPEND-DOCUMENTATION.\n\n       1000-RETURN-RECORDS.\n           PERFORM 1100-RETURN-SORT.\n           IF MORE-SORT-RCDS\n               ADD 1                          TO WS-SORT-RCD-CNT\n               PERFORM 1200-BUILD-VOLSER-JCL.\n\n       1100-RETURN-SORT.\n           RETURN SORT-RMMLVI\n               AT END\n                   MOVE 'Y'                   TO WS-END-SORT-SW.\n\n       1200-BUILD-VOLSER-JCL.\n           IF WS-SUB1 > WS-MAX-PER-LN\n               MOVE WS-RMMLVO-RCD             TO RMMLVO-RCD\n               PERFORM 1500-WRITE-RMMLVO\n               MOVE SPACE                     TO WS-PREFIX WS-VOLS\n               MOVE 1                         TO WS-SUB1.\n\n           PERFORM 1300-LOAD-JCL.\n\n       1300-LOAD-JCL.\n           MOVE SR-VOLSER                     TO WS-VOL(WS-SUB1).\n           MOVE ','                           TO WS-VOL(WS-SUB1)(7:1).\n           ADD 1                              TO WS-SUB1.\n\n       1400-APPEND-DOCUMENTATION.\n           MOVE WS-APPEND-LINE-1              TO RMMLVO-RCD.\n           PERFORM 1500-WRITE-RMMLVO.\n           MOVE WS-APPEND-LINE-2              TO RMMLVO-RCD.\n           PERFORM 1500-WRITE-RMMLVO.\n           MOVE WS-APPEND-LINE-1              TO RMMLVO-RCD.\n           PERFORM 1500-WRITE-RMMLVO.\n\n       1500-WRITE-RMMLVO.\n           WRITE RMMLVO-RECORD.\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0520B write error on RMMLVO'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +1500                     TO WS-RETURN-CODE.\n\n           ADD 1                              TO WS-WRITE-RCD-CNT.\n\n      ************************************ END MIS0520B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS0525B": {"ttr": 12043, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00E\\x01\\x19\\x07/\\x01\\x193o\\x123\\x01\\xa4\\x01\\x97\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-12-02T12:33:45", "lines": 420, "newlines": 407, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  MIS0525B: submit commands for JES queue'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MIS0525B.\n      **********************************************************CX003B\n      *@@@ C3 submit commands to alter jobs in the JES queue\n      ****************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * Date written: 08/19/97\n      * Author      : Jim Iannone\n      *               loop through a static parm which holds job names\n      *               that operators are interested in managing.\n      *               build the JES commands that will actually alter\n      *               the jobs and submit to the internal reader\n      *               for processing.\n      *\n      *  PURGE        /*$VS,'$POJOBQ,JM=PACRSAR,Q=X'\n      *\n      *  SELECT       /*$VS,'$TOJOBQ,JM=PACRSAR,DAYS=NN,HOURS=NN,\n      *                      /W=WRITER-NAME,\n      *                      ODISP=WRITE/HOLD,\n      *  SEND                NDISP=WRITE/HOLD,\n      *                      Q=X,C=FCB,P=PRTY,W=WRITER-NAME,D=DEST\n      *\n      *    NOTE:  this program calls delay program \"NEWWAIT\"\n      *           which resides on CBT tape #270 and requires\n      *           MACLIB from same tape number when compiling\n      *\n      ****************************************************************\n      * Date changed: 05/18/2005\n      * Programmer  : Jim Iannone\n      *               FORMAT COMMANDS FOR Z/OS 1.4\n      ****************************************************************\n      * Date changed: 12/06/2006\n      * Programmer  : Jim Iannone\n      *               ALLOW SELECTION BY WRITER NAME\n      *               ALLOW OUTPUT PRIORITY MODIFICATION\n      ****************************************************************\n      * Date changed: 12/06/2012\n      * Programmer  : Jim Iannone\n      *               CHANGES TO COMMAND SYNTAX\n      ****************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n           C01 IS PAGE-TOP.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT INTRDR               ASSIGN TO INTRDR\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  PARM01\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  PARM01-RECORD.\n           05  PARM01-FLAG             PIC  X.\n           05  PARM01-JOB              PIC  X(08).\n           05  FILLER REDEFINES PARM01-JOB.\n               10  PARM01-WAIT         PIC  X(05).\n               10  PARM01-VAL          PIC  XXX.\n           05  FILLER                  PIC  XX.\n           05  PARM01-PURGE            PIC  X.\n           05  FILLER                  PIC  XX.\n           05  PARM01-DAYS             PIC  XX.\n           05  FILLER                  PIC  XX.\n           05  PARM01-HOURS            PIC  XX.\n           05  FILLER                  PIC  XX.\n           05  PARM01-SOURCE           PIC  X.\n           05  FILLER                  PIC  XX.\n           05  PARM01-ACTION           PIC  X.\n           05  FILLER                  PIC  XX.\n           05  PARM01-NEW-CLASS        PIC  X.\n           05  FILLER                  PIC  X.\n           05  PARM01-WRITER           PIC  X(08).\n           05  FILLER                  PIC  X.\n           05  PARM01-NEW-FCB          PIC  X(04).\n           05  FILLER                  PIC  X.\n           05  PARM01-NEW-PRTY         PIC  XXX.\n           05  FILLER                  PIC  X.\n           05  PARM01-NEW-WRITER       PIC  X(08).\n           05  FILLER                  PIC  X.\n           05  PARM01-DEST             PIC  X(08).\n           05  FILLER                  PIC  X(07).\n           05  FILLER                  PIC  X(08).\n\n       FD  INTRDR\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  INTRDR-RECORD.\n           05  INTRDR-LEADER           PIC  X(06).\n           05  INTRDR-COMMAND          PIC  X(74).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage MIS0525B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-WAIT-SECONDS         PIC  9(07)    VALUE ZERO.\n           05  WS-WAIT-MINUTES         PIC  9(07)    VALUE ZERO.\n           05  WS-WAIT-REMAIN          PIC  9(05)    VALUE ZERO.\n           05  WS-DELAY                PIC  999      VALUE ZERO.\n           05  WS-GEN-DELAY            PIC  999      VALUE ZERO.\n           05  WS-TALLY                PIC  9(05)    VALUE ZERO.\n           05  WS-JOB                  PIC  X(11)    VALUE SPACE.\n           05  WS-ALL                  PIC  X(15)    VALUE SPACE.\n           05  WS-HOLD1                PIC  X(15)    VALUE SPACE.\n           05  WS-HOLD2                PIC  X(15)    VALUE SPACE.\n           05  WS-HOLD3                PIC  X(15)    VALUE SPACE.\n           05  WS-HOLD4                PIC  X(15)    VALUE SPACE.\n           05  WS-HOLD5                PIC  X(15)    VALUE SPACE.\n           05  WS-HOLD6                PIC  X(15)    VALUE SPACE.\n           05  WS-HOLD7                PIC  X(15)    VALUE SPACE.\n           05  WS-HOLD8                PIC  X(15)    VALUE SPACE.\n           05  WS-HOLD9                PIC  X(15)    VALUE SPACE.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-RCD-CNT         PIC S9(07)    VALUE ZERO.\n           05  WS-PURGE-RCD-CNT        PIC S9(07)    VALUE ZERO.\n           05  WS-CHANGE-RCD-CNT       PIC S9(07)    VALUE ZERO.\n           05  WS-WAIT-RCD-CNT         PIC S9(07)    VALUE ZERO.\n           05  WS-WRITE-RCD-CNT        PIC S9(07)    VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  WS-END-PARM01-SW        PIC  X        VALUE 'N'.\n               88  END-OF-PARM01                     VALUE 'Y'.\n               88  MORE-PARM01-RCDS                  VALUE 'N'.\n\n       01  NEWWAIT-DATA.\n           05  NEWWAIT-LEN             PIC S9999     VALUE +3 COMP.\n           05  NEWWAIT-DELAY           PIC  999.\n      *    05  NEWWAIT-LEN             PIC S9999     VALUE +5 COMP.\n      *    05  NEWWAIT-DELAY           PIC  9(05).\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MIS0525B END  '.\n\n       LINKAGE SECTION.\n\n       01  PARM-FIELD.\n           05  PARM-LENGTH             PIC S9(04)    COMP.\n           05  PARM-GEN-DELAY          PIC  XXX.\n           05  FILLER                  PIC  X.\n           05  PARM-DELAY              PIC  XXX.\n\n      /\n       PROCEDURE DIVISION USING PARM-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           DISPLAY '      '.\n           DISPLAY '**** MIS0525B alter jobs in JES queue '.\n           PERFORM 0200-OPEN-FILES.\n\n           IF PARM-DELAY NUMERIC\n               MOVE PARM-DELAY                TO WS-DELAY.\n           IF WS-DELAY < 2\n               MOVE 2                         TO WS-DELAY.\n           IF PARM-GEN-DELAY NUMERIC\n               MOVE PARM-GEN-DELAY            TO WS-GEN-DELAY.\n           IF WS-GEN-DELAY < 2\n               MOVE 2                         TO WS-GEN-DELAY.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-PARM01.\n\n           DIVIDE WS-WAIT-SECONDS BY 60 GIVING WS-WAIT-MINUTES\n                  REMAINDER WS-WAIT-REMAIN.\n\n           DISPLAY '**** Records in PARM01   ' WS-READ-RCD-CNT.\n           DISPLAY '**** Change commands     ' WS-CHANGE-RCD-CNT.\n           DISPLAY '**** Purge commands      ' WS-PURGE-RCD-CNT.\n           DISPLAY '**** Wait commands       ' WS-WAIT-RCD-CNT.\n           DISPLAY '**** Records written     ' WS-WRITE-RCD-CNT.\n           DISPLAY '**** Ddelay interval     ' WS-DELAY.\n           DISPLAY '**** Generic delay       ' WS-GEN-DELAY.\n           DISPLAY '**** Delay min/sec       ' WS-WAIT-MINUTES\n                                               ' ' WS-WAIT-REMAIN.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** MIS0525B cond code ' WS-RETURN-CODE\n                       ' sent by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** MIS0525B EOJ encountered '.\n           DISPLAY '      '.\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0525B open error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN OUTPUT INTRDR.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0525B open error on INTRDR'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0201                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE INTRDR.\n           CLOSE PARM01.\n\n       0400-PROCESS-PARM01.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0500-READ-PARM01 THRU\n                       0500-READ-PARM01-EXIT\n                       UNTIL END-OF-PARM01.\n\n       0500-READ-PARM01.\n           READ PARM01.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-RCD-CNT\n               PERFORM 0600-SELECT THRU\n                       0600-SELECT-EXIT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-PARM01-SW\n           ELSE\n               DISPLAY '**** MIS0525B read error on PARM01 '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0500                     TO WS-RETURN-CODE.\n\n       0500-READ-PARM01-EXIT. EXIT.\n\n       0600-SELECT.\n           IF PARM01-FLAG = '*'\n               GO TO 0600-SELECT-EXIT.\n           IF PARM01-JOB = SPACE\n               GO TO 0600-SELECT-EXIT.\n           IF PARM01-WAIT = 'WAIT '\n               PERFORM 0650-WAIT\n               GO TO 0600-SELECT-EXIT.\n           MOVE SPACE                         TO INTRDR-RECORD.\n           MOVE SPACE                         TO WS-HOLD1 WS-HOLD2\n                                                 WS-HOLD3 WS-HOLD4\n                                                 WS-HOLD5 WS-HOLD6\n                                                 WS-HOLD7 WS-HOLD8\n                                                 WS-HOLD9 WS-ALL.\n           IF PARM01-PURGE = SPACE\n               PERFORM 0800-BUILD-CHANGE\n           ELSE\n               PERFORM 0700-BUILD-PURGE.\n\n           PERFORM 0900-WRITE-INTRDR-FILE.\n\n      *---------------------------------------\n      *    call NEWWAIT: delay processing to avoid flooding\n      *    the internal reader\n      *+--------------------------------------\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-JOB TALLYING WS-TALLY FOR ALL '?'.\n           IF WS-TALLY = ZERO\n               MOVE ZERO                      TO WS-TALLY\n               INSPECT WS-JOB TALLYING WS-TALLY FOR ALL '*'\n               IF WS-TALLY = ZERO\n                   MOVE WS-DELAY              TO NEWWAIT-DELAY\n               ELSE\n                   MOVE WS-GEN-DELAY          TO NEWWAIT-DELAY\n           ELSE\n               MOVE WS-GEN-DELAY              TO NEWWAIT-DELAY.\n           CALL 'NEWWAIT' USING NEWWAIT-DATA.\n           ADD NEWWAIT-DELAY                  TO WS-WAIT-SECONDS.\n\n       0600-SELECT-EXIT. EXIT.\n\n       0650-WAIT.\n           IF PARM01-VAL NUMERIC\n               MOVE PARM01-VAL                TO NEWWAIT-DELAY\n               CALL 'NEWWAIT' USING NEWWAIT-DATA\n               ADD 1                          TO WS-WAIT-RCD-CNT\n               ADD NEWWAIT-DELAY              TO WS-WAIT-SECONDS.\n\n       0700-BUILD-PURGE.\n           MOVE '/*$VS,'                      TO INTRDR-LEADER.\n           MOVE PARM01-JOB                    TO WS-JOB.\n           IF PARM01-HOURS = '00'\n               CONTINUE\n           ELSE\n           IF PARM01-HOURS NUMERIC\n               MOVE ',HOURS>'                 TO WS-HOLD1\n               MOVE PARM01-HOURS              TO WS-HOLD1(8: 2).\n\n           IF PARM01-DAYS = '00'\n               CONTINUE\n           ELSE\n           IF PARM01-DAYS NUMERIC\n               MOVE ',DAYS>'                  TO WS-HOLD1\n               MOVE PARM01-DAYS               TO WS-HOLD1(7: 2).\n\n           IF PARM01-SOURCE = 'H'\n               MOVE ',HELD'                   TO WS-HOLD2.\n\n           MOVE ',Q='                         TO WS-HOLD4.\n           MOVE PARM01-PURGE                  TO WS-HOLD4(4: 1).\n\n           IF PARM01-DEST NOT = SPACE\n               MOVE ',D='                     TO WS-HOLD9\n               MOVE PARM01-DEST               TO WS-HOLD9(4: 8).\n\n           STRING QUOTE                       DELIMITED BY SIZE\n                  '$POJOBQ,JM='               DELIMITED BY SIZE\n                  WS-JOB                      DELIMITED BY SPACE\n                  WS-ALL                      DELIMITED BY SPACE\n                  WS-HOLD1                    DELIMITED BY SPACE\n                  WS-HOLD2                    DELIMITED BY SPACE\n                  WS-HOLD4                    DELIMITED BY SPACE\n                  WS-HOLD9                    DELIMITED BY SPACE\n                  QUOTE                       DELIMITED BY SIZE\n                  INTO INTRDR-COMMAND.\n           ADD 1                              TO WS-PURGE-RCD-CNT.\n\n       0800-BUILD-CHANGE.\n           MOVE '/*$VS,'                      TO INTRDR-LEADER.\n           MOVE PARM01-JOB                    TO WS-JOB.\n           MOVE ',ALL'                        TO WS-ALL.\n\n           IF PARM01-HOURS = '00'\n               CONTINUE\n           ELSE\n           IF PARM01-HOURS NUMERIC\n               MOVE ',/HOURS>'                TO WS-HOLD1\n               MOVE PARM01-HOURS              TO WS-HOLD1(9: 2).\n\n           IF PARM01-DAYS = '00'\n               CONTINUE\n           ELSE\n           IF PARM01-DAYS NUMERIC\n               MOVE ',/DAYS>'                 TO WS-HOLD1\n               MOVE PARM01-DAYS               TO WS-HOLD1(8: 2).\n\n           IF PARM01-WRITER NOT = SPACE\n               MOVE ',/W='                    TO WS-HOLD5\n               MOVE PARM01-WRITER             TO WS-HOLD5(5: 8).\n\n           IF PARM01-SOURCE = 'O'\n               MOVE ',/OUTD=WRITE'            TO WS-HOLD2\n           ELSE\n           IF PARM01-SOURCE = 'H'\n               MOVE ',/OUTD=HOLD'             TO WS-HOLD2.\n\n           IF PARM01-NEW-CLASS NOT = SPACE\n               MOVE ',Q='                     TO WS-HOLD4\n               MOVE PARM01-NEW-CLASS          TO WS-HOLD4(4: 1).\n\n           IF PARM01-ACTION = 'O'\n               MOVE ',OUTD=WRITE'             TO WS-HOLD3\n           ELSE\n           IF PARM01-ACTION = 'H'\n               MOVE ',OUTD=HOLD'              TO WS-HOLD3.\n\n           IF PARM01-NEW-FCB NOT = SPACE\n               MOVE ',C='                     TO WS-HOLD6\n               MOVE PARM01-NEW-FCB            TO WS-HOLD6(4: 4).\n\n           IF PARM01-NEW-PRTY NOT = SPACE\n               MOVE ',P='                     TO WS-HOLD7\n               MOVE PARM01-NEW-PRTY           TO WS-HOLD7(4: 3).\n\n           IF PARM01-NEW-WRITER NOT = SPACE\n               MOVE ',W='                     TO WS-HOLD8\n               MOVE PARM01-NEW-WRITER         TO WS-HOLD8(4: 8).\n\n           IF PARM01-DEST NOT = SPACE\n               MOVE ',D='                     TO WS-HOLD9\n               MOVE PARM01-DEST               TO WS-HOLD9(4: 8).\n\n           STRING QUOTE                       DELIMITED BY SIZE\n                  '$TOJOBQ,/JM='              DELIMITED BY SIZE\n                  WS-JOB                      DELIMITED BY SPACE\n                  WS-ALL                      DELIMITED BY SPACE\n                  WS-HOLD1                    DELIMITED BY SPACE\n                  WS-HOLD5                    DELIMITED BY SPACE\n                  WS-HOLD2                    DELIMITED BY SPACE\n                  WS-HOLD4                    DELIMITED BY SPACE\n                  WS-HOLD3                    DELIMITED BY SPACE\n                  WS-HOLD6                    DELIMITED BY SPACE\n                  WS-HOLD7                    DELIMITED BY SPACE\n                  WS-HOLD8                    DELIMITED BY SPACE\n                  WS-HOLD9                    DELIMITED BY SPACE\n                  QUOTE                       DELIMITED BY SIZE\n                  INTO INTRDR-COMMAND.\n           ADD 1                              TO WS-CHANGE-RCD-CNT.\n\n       0900-WRITE-INTRDR-FILE.\n           WRITE INTRDR-RECORD.\n           MOVE '/*EOF '                      TO INTRDR-RECORD.\n           WRITE INTRDR-RECORD.\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0525B write error on INTRDR'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0900                     TO WS-RETURN-CODE.\n           ADD 1                              TO WS-WRITE-RCD-CNT.\n\n      ************************************ END MIS0525B\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MIS0540B": {"ttr": 12295, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x19\\x01\\x19\\x14\\x8f\\x01\\x193o\\x128\\x01\\xc7\\x01\\xc6\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-05-28T00:00:00", "modifydate": "2019-12-02T12:38:19", "lines": 455, "newlines": 454, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  MIS0540B: determine if a dataset matches a mask'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MIS0540B.\n      ******************************************************************\n      *@@@ II given a dataset mask, determine if a match\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ******************************************************************\n      * Date written: 09/05/97\n      * Author      : Jim Iannone\n      *\n      *               GIVEN A DATASET NAME AND A DATASET MASK,\n      *                 DETERMINE IF THE DATASET MATCHES THE MASK.\n      *                 RETURN 'YES', 'NO ', OR A 3 DIGIT ERROR NUMBER.\n      *\n      *               A DATASET MASK IS AS FOLLOWS:\n      *                 %   = ANY CHARACTER IN A POSITION, CHAR REQ\n      *                 ?   = SAME AS %\n      *                 *   = 0 OR MORE CHARACTERS\n      *                 .*  = A SINGLE QUALIFIER\n      *                 .** = 0 OR MORE QUALIFIERS\n      *\n      *               THE RULES HERE ARE THE SAME AS THE DFSMS-RMM\n      *                 RULES FOR GENERIC SEARCHES\n      *\n      *               RULES:\n      *               - IF '*' IS ADJACENT TO ANOTHER '*', THEY MUST\n      *                 BE THE ONLY ENTRIES FOR THAT QUALIFIER\n      *               - UP TO 22 QUALIFIERS IN A MASK OR DATASET NAME\n      *                 ARE ALLOWED\n      *               - IF THE DATASET NAME IS INVALID, AND\n      *                 PARM-EDIT-NAMES-SW = 'Y' OR 'D',\n      *                 AN ERROR IS RETURNED\n      *               - IF THE MASK IS INVALID, AND\n      *                 PARM-EDIT-NAMES-SW = 'Y' OR 'M',\n      *                 AN ERROR IS RETURNED\n      *\n      *----------------------------------------------\n      *   EX: MASK:   BACD.SVM%%%.*\n      *       DSN:    BACD.SVMS01\n      *       RESULT: NO MATCH - TRAILING QUALIFIER REQUIRED\n      *----------------------------------------------\n      *   EX: MASK:   BACD.SVM%%%.*\n      *       DSN:    BACD.SVM001.G0045V00\n      *       RESULT: MATCH\n      *----------------------------------------------\n      *   EX: MASK:   ACTP.APSSSD.%%9601.BKUP.*\n      *       DSN:    ACTP.APSSSD.Q9601.BKUP.SAVE\n      *       RESULT: NO MATCH - 1 CHARACTER IN 3RD QUALIFER\n      *----------------------------------------------\n      *   EX: MASK:   **.*S%S*.*\n      *       DSN:    BACD.SMS001.G0034V00\n      *       RESULT: MATCH\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage MIS0540B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-O-FOUND-SW           PIC  X        VALUE SPACE.\n           05  WS-OO-FOUND-SW          PIC  X        VALUE SPACE.\n           05  WS-O-MATCH-SW           PIC  X        VALUE SPACE.\n           05  WS-OO-MATCH-SW          PIC  X        VALUE SPACE.\n           05  WS-O-LAST-SW            PIC  X        VALUE SPACE.\n           05  WS-OO-LAST-SW           PIC  X        VALUE SPACE.\n           05  WS-ERROR-SW             PIC  XXX      VALUE SPACE.\n           05  WS-QUALM                PIC  X(09)    VALUE SPACE.\n           05  WS-QUALD                PIC  X(09)    VALUE SPACE.\n           05  WS-HOLD-DSN             PIC  X(44)    VALUE SPACE.\n           05  WS-HOLD-MASK            PIC  X(44)    VALUE SPACE.\n           05  WS-TEST-CHAR            PIC  X        VALUE SPACE.\n               88  VALID-D-1           VALUE 'A' THRU 'Z' '#' '@' '$'.\n               88  VALID-D-2-8         VALUE 'A' THRU 'Z' '0' THRU '9'\n                                             '#' '@' '$' '-'.\n               88  VALID-M             VALUE 'A' THRU 'Z' '0' THRU '9'\n                                             '#' '@' '$' '-' '%' '?'\n                                             '*'.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(05)    VALUE ZERO.\n           05  WS-M1                   PIC S9(05)    VALUE ZERO.\n           05  WS-MM1                  PIC S9(05)    VALUE ZERO.\n           05  WS-D1                   PIC S9(05)    VALUE ZERO.\n           05  WS-DD1                  PIC S9(05)    VALUE ZERO.\n           05  WS-HOLD-M-1             PIC S9(05)    VALUE ZERO.\n           05  WS-HOLD-MM-1            PIC S9(05)    VALUE ZERO.\n           05  WS-HOLD-D-1             PIC S9(05)    VALUE ZERO.\n           05  WS-HOLD-DD-1            PIC S9(05)    VALUE ZERO.\n           05  WS-TALLY                PIC S9(05)    VALUE ZERO.\n\n       01  WS-TABLES.\n           05  WS-MASK-TABLE                         VALUE SPACE.\n               10  WS-MASK             PIC  X(09)\n                                       OCCURS 23 TIMES.\n           05  WS-DSN-TABLE                          VALUE SPACE.\n               10  WS-DSN              PIC  X(09)\n                                       OCCURS 23 TIMES.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MIS0540B END  '.\n\n       LINKAGE SECTION.\n\n       01  PARM-FIELD.\n           05  PARM-MASK               PIC  X(44).\n           05  PARM-DSN                PIC  X(44).\n           05  PARM-DISPLAY-SW         PIC  X.\n           05  PARM-EDIT-NAMES-SW      PIC  X.\n           05  PARM-MATCH-SW           PIC  XXX.\n\n      /\n       PROCEDURE DIVISION USING PARM-FIELD.\n\n       0100-PROGRAM-ENTRY.\n\n           MOVE PARM-DSN                      TO WS-HOLD-DSN.\n           MOVE PARM-MASK                     TO WS-HOLD-MASK.\n\n           PERFORM VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > 23\n               MOVE SPACE                     TO WS-MASK(WS-SUB1)\n               MOVE SPACE                     TO WS-DSN(WS-SUB1)\n           END-PERFORM.\n           MOVE SPACE                         TO WS-OO-MATCH-SW\n                                                 WS-OO-FOUND-SW\n                                                 WS-OO-LAST-SW.\n           MOVE ZERO                          TO WS-HOLD-MM-1 WS-SUB1\n                                                 WS-HOLD-DD-1 WS-SUB2\n                                                 WS-MM1 WS-DD1.\n\n           UNSTRING WS-HOLD-MASK DELIMITED BY '.'\n               INTO WS-MASK(1)  WS-MASK(2)  WS-MASK(3)  WS-MASK(4)\n                    WS-MASK(5)  WS-MASK(6)  WS-MASK(7)  WS-MASK(8)\n                    WS-MASK(9)  WS-MASK(10) WS-MASK(11) WS-MASK(12)\n                    WS-MASK(13) WS-MASK(14) WS-MASK(15) WS-MASK(16)\n                    WS-MASK(17) WS-MASK(18) WS-MASK(19) WS-MASK(20)\n                    WS-MASK(21) WS-MASK(22)\n               ON OVERFLOW\n                   GO TO 2000-OVERFLOW.\n           UNSTRING WS-HOLD-DSN DELIMITED BY '.'\n               INTO WS-DSN(1)   WS-DSN(2)   WS-DSN(3)   WS-DSN(4)\n                    WS-DSN(5)   WS-DSN(6)   WS-DSN(7)   WS-DSN(8)\n                    WS-DSN(9)   WS-DSN(10)  WS-DSN(11)  WS-DSN(12)\n                    WS-DSN(13)  WS-DSN(14)  WS-DSN(15)  WS-DSN(16)\n                    WS-DSN(17)  WS-DSN(18)  WS-DSN(19)  WS-DSN(20)\n                    WS-DSN(21)  WS-DSN(22)\n               ON OVERFLOW\n                   GO TO 2000-OVERFLOW.\n\n      ****************************************\n      *    determine if all characters in the dataset name are valid\n      ****************************************\n           MOVE SPACE                         TO WS-ERROR-SW.\n           IF PARM-EDIT-NAMES-SW = 'Y' OR 'D'\n               PERFORM 0200-VALIDATE-DSN\n                   VARYING WS-SUB1 FROM 1 BY 1\n                   UNTIL WS-SUB1 > 22 OR WS-DSN(WS-SUB1) = SPACE\n                   AFTER WS-SUB2 FROM 1 BY 1\n                   UNTIL WS-SUB2 > 8.\n           IF WS-SUB1 > 40\n               OR WS-SUB2 > 40\n               MOVE '100'                     TO WS-ERROR-SW\n               GO TO 2000-MOVE-ERR-SWITCH.\n\n      ****************************************\n      *    if '**' is used in a qualifier, it must be the only\n      *    entry in the qualifier.\n      *    determine if all characters in the mask are valid.\n      *+**************************************\n           IF PARM-EDIT-NAMES-SW = 'Y' OR 'M'\n               PERFORM 0300-VALIDATE-MASK THRU\n                       0300-VALIDATE-MASK-EXIT\n                       VARYING WS-SUB1 FROM 1 BY 1\n                       UNTIL WS-SUB1 > 22 OR WS-MASK(WS-SUB1) = SPACE.\n           IF WS-ERROR-SW NOT = SPACE\n               GO TO 2000-MOVE-ERR-SWITCH.\n\n      ****************************************\n      *    loop through the qualifiers, left to right, until\n      *    spaces are found\n      *+**************************************\n           MOVE 1                             TO WS-MM1 WS-DD1.\n           PERFORM 0400-TEST-ALL-QUAL THRU\n                   0400-TEST-ALL-QUAL-EXIT.\n\n      ****************************************\n      *    final determination as to whether the dataset name\n      *    matches the mask\n      *+**************************************\n           IF WS-ERROR-SW NOT = SPACE\n               GO TO 2000-MOVE-ERR-SWITCH\n           ELSE\n           IF WS-OO-MATCH-SW = 'Y'\n               GO TO 2000-MOVE-YES-SWITCH\n           ELSE\n           IF WS-OO-MATCH-SW = SPACE\n             IF WS-O-MATCH-SW = 'Y'\n                 GO TO 2000-MOVE-YES-SWITCH.\n\n           GO TO 2000-MOVE-NO-SWITCH.\n\n       0200-VALIDATE-DSN.\n           MOVE WS-DSN(WS-SUB1)(WS-SUB2: 1)   TO WS-TEST-CHAR.\n           IF WS-TEST-CHAR = SPACE\n               MOVE 8                         TO WS-SUB2\n           ELSE\n           IF WS-SUB2 = 1\n             IF VALID-D-1\n                 CONTINUE\n             ELSE\n                 MOVE 50                      TO WS-SUB1 WS-SUB2\n           ELSE\n           IF VALID-D-2-8\n               CONTINUE\n           ELSE\n               MOVE 50                        TO WS-SUB1 WS-SUB2.\n\n       0300-VALIDATE-MASK.\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-MASK(WS-SUB1) TALLYING WS-TALLY FOR ALL '*'.\n           IF WS-TALLY > 1\n               PERFORM VARYING WS-SUB2 FROM 1 BY 1\n                   UNTIL WS-SUB2 > 7\n                   IF WS-MASK(WS-SUB1)(WS-SUB2: 2) = '**'\n                     IF WS-MASK(WS-SUB1) = '**      '\n                         MOVE 7               TO WS-SUB2\n                     ELSE\n                         MOVE '104'           TO WS-ERROR-SW\n                         MOVE 7               TO WS-SUB2\n                     END-IF\n                   END-IF\n               END-PERFORM\n           END-IF.\n           PERFORM VARYING WS-SUB2 FROM 1 BY 1\n               UNTIL WS-SUB2 > 8\n               MOVE WS-MASK(WS-SUB1)(WS-SUB2: 1) TO WS-TEST-CHAR\n               IF WS-TEST-CHAR = SPACE\n                   MOVE 8                     TO WS-SUB2\n               ELSE\n               IF NOT VALID-M\n                   MOVE '106'                 TO WS-ERROR-SW\n               END-IF\n               END-IF\n           END-PERFORM.\n\n       0300-VALIDATE-MASK-EXIT. EXIT.\n\n      ****************************************\n      *    if WS-MASK = space: determine results of the\n      *    qualifier test\n      *+**************************************\n       0400-TEST-ALL-QUAL.\n           IF WS-MASK(WS-MM1) = SPACE\n               OR WS-MM1 > 22\n               IF WS-DSN(WS-DD1) = SPACE\n                   GO TO 0400-TEST-ALL-QUAL-EXIT\n               ELSE\n               IF WS-OO-FOUND-SW = 'Y'\n                 IF WS-OO-LAST-SW = SPACE\n                     MOVE WS-HOLD-MM-1        TO WS-MM1\n                     MOVE WS-HOLD-DD-1        TO WS-DD1\n                     ADD 1                    TO WS-HOLD-DD-1\n                     MOVE 'N'                 TO WS-OO-MATCH-SW\n                     GO TO 0400-TEST-ALL-QUAL\n                 ELSE\n                     GO TO 0400-TEST-ALL-QUAL-EXIT\n               ELSE\n                   MOVE 'N'                   TO WS-OO-MATCH-SW\n                   GO TO 0400-TEST-ALL-QUAL-EXIT.\n\n      ****************************************\n      *    if WS-MASK = **: hold next qualifer position in memory\n      *    until determination of equality can be made\n      *+**************************************\n           IF WS-MASK(WS-MM1) = '**'\n               MOVE 'Y'                       TO WS-OO-LAST-SW\n               MOVE 'Y'                       TO WS-OO-FOUND-SW\n               MOVE 'Y'                       TO WS-OO-MATCH-SW\n               ADD 1                          TO WS-MM1\n               MOVE WS-MM1                    TO WS-HOLD-MM-1\n               MOVE WS-DD1                    TO WS-HOLD-DD-1\n               ADD 1                          TO WS-HOLD-DD-1\n               GO TO 0400-TEST-ALL-QUAL.\n\n           IF WS-MASK(WS-MM1) = '*'\n             IF WS-DSN(WS-DD1) = SPACE\n                 MOVE 'N'                     TO WS-OO-MATCH-SW\n                 GO TO 0400-TEST-ALL-QUAL-EXIT\n             ELSE\n                 ADD 1                        TO WS-MM1\n                 ADD 1                        TO WS-DD1\n                 MOVE 'Y'                     TO WS-OO-MATCH-SW\n                 GO TO 0400-TEST-ALL-QUAL.\n\n           IF WS-MASK(WS-MM1) = WS-DSN(WS-DD1)\n               ADD 1                          TO WS-MM1\n               ADD 1                          TO WS-DD1\n               MOVE 'Y'                       TO WS-OO-MATCH-SW\n               MOVE SPACE                     TO WS-OO-LAST-SW\n               GO TO 0400-TEST-ALL-QUAL.\n\n      ****************************************\n      *    qualifier contents must be tested for equality\n      *+**************************************\n           MOVE 1                             TO WS-M1 WS-D1.\n           MOVE SPACE                         TO WS-O-FOUND-SW\n                                                 WS-O-LAST-SW\n                                                 WS-O-MATCH-SW.\n           MOVE ZERO                          TO WS-HOLD-D-1\n                                                 WS-HOLD-M-1.\n\n           MOVE WS-MASK(WS-MM1)               TO WS-QUALM.\n           MOVE WS-DSN(WS-DD1)                TO WS-QUALD.\n           PERFORM 0500-TEST-QUAL THRU\n                   0500-TEST-QUAL-EXIT.\n\n           IF WS-O-MATCH-SW = 'Y'\n               ADD 1                          TO WS-MM1\n               ADD 1                          TO WS-DD1\n               MOVE 'Y'                       TO WS-OO-MATCH-SW\n               MOVE SPACE                     TO WS-OO-LAST-SW\n               GO TO 0400-TEST-ALL-QUAL.\n\n      ****************************************\n      *    determine results of individual qualifier test\n      *+**************************************\n           IF WS-OO-FOUND-SW = 'Y'\n             IF WS-OO-MATCH-SW = 'Y'\n                 MOVE WS-HOLD-MM-1            TO WS-MM1\n                 MOVE WS-HOLD-DD-1            TO WS-DD1\n                 ADD 1                        TO WS-HOLD-DD-1\n                 MOVE 'N'                     TO WS-OO-MATCH-SW\n                 GO TO 0400-TEST-ALL-QUAL\n             ELSE\n                 ADD 1                        TO WS-DD1\n                 IF WS-DSN(WS-DD1) = SPACE\n                     GO TO 0400-TEST-ALL-QUAL-EXIT\n                 ELSE\n                     GO TO 0400-TEST-ALL-QUAL\n           ELSE\n               MOVE 'N'                       TO WS-OO-MATCH-SW.\n\n       0400-TEST-ALL-QUAL-EXIT. EXIT.\n\n      ****************************************\n      *    logic for each qualifer test (below) is similar to\n      *    the logic for all qualifier tests (above)\n      *+**************************************\n       0500-TEST-QUAL.\n           IF WS-QUALM(WS-M1: 1) = SPACE\n               OR WS-M1 > 8\n               IF WS-QUALD(WS-D1: 1) = SPACE\n                   GO TO 0500-TEST-QUAL-EXIT\n               ELSE\n               IF WS-O-FOUND-SW = 'Y'\n                 IF WS-O-LAST-SW = SPACE\n                     MOVE WS-HOLD-M-1         TO WS-M1\n                     MOVE WS-HOLD-D-1         TO WS-D1\n                     ADD 1                    TO WS-HOLD-D-1\n                     MOVE 'N'                 TO WS-O-MATCH-SW\n                     GO TO 0500-TEST-QUAL\n                 ELSE\n                     GO TO 0500-TEST-QUAL-EXIT\n               ELSE\n                   MOVE 'N'                   TO WS-O-MATCH-SW\n                   GO TO 0500-TEST-QUAL-EXIT.\n\n           IF WS-QUALM(WS-M1: 1) = '*'\n               MOVE 'Y'                       TO WS-O-LAST-SW\n               MOVE 'Y'                       TO WS-O-FOUND-SW\n               MOVE 'Y'                       TO WS-O-MATCH-SW\n               ADD 1                          TO WS-M1\n               MOVE WS-M1                     TO WS-HOLD-M-1\n               MOVE WS-D1                     TO WS-HOLD-D-1\n               ADD 1                          TO WS-HOLD-D-1\n               GO TO 0500-TEST-QUAL.\n\n           IF WS-QUALM(WS-M1: 1) = '%' OR '?'\n             IF WS-QUALD(WS-D1: 1) = SPACE\n                 MOVE 'N'                     TO WS-O-MATCH-SW\n                 GO TO 0500-TEST-QUAL-EXIT\n             ELSE\n                 ADD 1                        TO WS-M1\n                 ADD 1                        TO WS-D1\n                 MOVE 'Y'                     TO WS-O-MATCH-SW\n                 GO TO 0500-TEST-QUAL.\n\n           IF WS-QUALM(WS-M1: 1) = WS-QUALD(WS-D1: 1)\n               ADD 1                          TO WS-M1\n               ADD 1                          TO WS-D1\n               MOVE 'Y'                       TO WS-O-MATCH-SW\n               MOVE SPACE                     TO WS-O-LAST-SW\n               GO TO 0500-TEST-QUAL\n           ELSE\n           IF WS-O-FOUND-SW = 'Y'\n             IF WS-O-MATCH-SW = 'Y'\n                 MOVE WS-HOLD-M-1             TO WS-M1\n                 MOVE WS-HOLD-D-1             TO WS-D1\n                 ADD 1                        TO WS-HOLD-D-1\n                 MOVE 'N'                     TO WS-O-MATCH-SW\n                 GO TO 0500-TEST-QUAL\n             ELSE\n                 ADD 1                        TO WS-D1\n                 IF WS-QUALD(WS-D1: 1) = SPACE\n                     GO TO 0500-TEST-QUAL-EXIT\n                 ELSE\n                     GO TO 0500-TEST-QUAL\n           ELSE\n               MOVE 'N'                       TO WS-O-MATCH-SW.\n\n       0500-TEST-QUAL-EXIT. EXIT.\n\n       2000-OVERFLOW.\n           MOVE '108'                         TO PARM-MATCH-SW.\n           GO TO 3000-FINISH.\n\n       2000-MOVE-ERR-SWITCH.\n           MOVE WS-ERROR-SW                   TO PARM-MATCH-SW.\n           GO TO 3000-FINISH.\n\n       2000-MOVE-YES-SWITCH.\n           MOVE 'YES'                         TO PARM-MATCH-SW.\n           GO TO 3000-FINISH.\n\n       2000-MOVE-NO-SWITCH.\n           MOVE 'NO '                         TO PARM-MATCH-SW.\n           GO TO 3000-FINISH.\n\n       3000-FINISH.\n           IF PARM-DISPLAY-SW = '2'\n               DISPLAY PARM-MASK\n               DISPLAY PARM-DSN\n               DISPLAY PARM-MATCH-SW.\n\n           GOBACK.\n\n      ************************************ END MIS0540B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS0550B": {"ttr": 12549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x01\\x19\\x07/\\x01\\x193o\\x12A\\x029\\x025\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-12-02T12:41:00", "lines": 569, "newlines": 565, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  MIS0550B: turn an HL7 stream into sep rcds'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MIS0550B.\n      ******************************************************************\n      *@@@ C3 turn an HL7 wrapping stream into separate HL7 rcds\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * Date written: 04/18/2002\n      * Author      : Jim Iannone\n      *               Given a file with connected wrapping HL7\n      *               segments, write each HL7 segment out in\n      *               a separate record.\n      *\n      *               Allow the user to include or exclude specific\n      *               HL7 segments via PARM01.\n      *\n      *               Allow the user to avoid writing out the\n      *               trailing carriage return.\n      *\n      *               Allow the user to truncate excessively long\n      *               records or issue cond code 0008\n      ******************************************************************\n      * DATE CHANGED: 01/21/2011\n      * PROGRAMMER  : JIM IANNONE\n      *               Allow excluding specified strings from all rcds\n      ****************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n           C01 IS PAGE-TOP.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT HL7FLOW              ASSIGN TO HL7FLOW\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT HL7SEGS              ASSIGN TO HL7SEGS\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  HL7FLOW\n           RECORDING MODE F.\n       01  HL7FLOW-RECORD.\n           05  HL7FLOW-RCD             PIC  X(16000).\n\n       FD  HL7SEGS\n           RECORDING MODE F.\n       01  HL7SEGS-RECORD.\n           05  HL7SEGS-RCD             PIC  X(10000).\n\n       FD  PARM01\n           RECORDING MODE F.\n       01  PARM01-RECORD.\n           05  PARM01-RCD              PIC  X(80).\n           05  PARM01-RCD1 REDEFINES PARM01-RCD.\n               10  PARM01-DOCU         PIC  X.\n               10  FILLER              PIC  X.\n               10  PARM01-INCL-EXCL    PIC  X.\n               10  FILLER              PIC  X.\n               10  PARM01-SEG          PIC  X(05).\n               10  FILLER              PIC  X(63).\n               10  FILLER              PIC  X(08).\n           05  PARM01-RCD2 REDEFINES PARM01-RCD.\n               10  FILLER              PIC  XX.\n               10  PARM01-STRING       PIC  X(20).\n               10  FILLER              PIC  X.\n               10  PARM01-LEN          PIC  XX.\n               10  FILLER              PIC  X(47).\n               10  FILLER              PIC  X(08).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage MIS0550B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-SRC                  PIC  9(05)    VALUE 16000.\n           05  WS-DST                  PIC  9(05)    VALUE 10000.\n           05  WS-HIGH                 PIC  9(07)    VALUE ZERO.\n      *\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-PARM01-MAX           PIC  9(05)    VALUE ZERO.\n           05  WS-PARM02-MAX           PIC  9(05)    VALUE ZERO.\n           05  WS-BEYOND-MAX           PIC  9(05)    VALUE ZERO.\n           05  WS-LEN-N                PIC  99       VALUE ZERO.\n           05  WS-CALL-STV0400B        PIC  X(08)    VALUE 'STV0400B'.\n           05  WS-LS-DATA              PIC  X(10)    VALUE SPACE.\n           05  FILLER REDEFINES WS-LS-DATA.\n               10  WS-CR-SKIP          PIC  X.\n               10  WS-LEN-ERR          PIC  X.\n               10  WS-DELIM            PIC  X.\n               10  FILLER              PIC  X(07).\n           05  WS-CR                   PIC  X        VALUE X'0D'.\n           05  WS-BAR                  PIC  X        VALUE X'4F'.\n           05  WS-MSG.\n               10  FILLER              PIC  X(30)    VALUE\n                   ' <remaining data truncated... '.\n               10  WS-MSG2             PIC  9(05)    VALUE ZERO.\n               10  FILLER              PIC  X(15)    VALUE\n                   ' max rec len>  '.\n           05  WS-TRUNC                PIC  X(13)    VALUE\n                                       X'4F4F4F4F4F4F4F4F4F4F4F4F0D'.\n      *        ws-trunc =              ||||||||||||.\n           05  WS-INCL                 PIC  X        VALUE SPACE.\n           05  WS-EXCL                 PIC  X        VALUE SPACE.\n           05  WS-HOLD-TRUNC           PIC  X(100)   VALUE SPACE.\n\n       01  WS-HOLD-FIELDS.\n           05  WS-HOLD-OUT             PIC  X(10000) VALUE SPACE.\n           05  FILLER REDEFINES WS-HOLD-OUT.\n               10  WS-HOLD-SEG         PIC  XXX.\n               10  FILLER              PIC  X(9934).\n               10  WS-HOLD-MSG         PIC  X(50).\n               10  WS-HOLD-END         PIC  X(13).\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-RCD-CNT         PIC S9(07)    VALUE ZERO.\n           05  WS-WRITE-RCD-CNT        PIC S9(07)    VALUE ZERO.\n           05  WS-SHOW-RCD-CNT         PIC S9(07)    VALUE ZERO.\n           05  WS-PROGRESS             PIC S9(07)    VALUE 9999.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB3                 PIC S9(05)    VALUE ZERO.\n           05  WS-TRUNC-POS            PIC S9(05)    VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  WS-END-HL7FLOW-SW       PIC  X        VALUE 'N'.\n               88  END-OF-HL7FLOW                    VALUE 'Y'.\n               88  MORE-HL7FLOW-RCDS                 VALUE 'N'.\n           05  WS-INCLUDE-SW           PIC  X        VALUE 'Y'.\n           05  WS-SKIP-SW              PIC  X        VALUE 'N'.\n           05  WS-TRUNC-SW             PIC  X        VALUE 'N'.\n           05  WS-FIRST-BAR-SW         PIC  X        VALUE 'N'.\n           05  WS-PARM-SW              PIC  X        VALUE SPACE.\n           05  WS-ZAP-SW               PIC  X        VALUE SPACE.\n\n       01  WS-TABLES.\n           05  WS-SEG-TABLE            PIC  X(560)   VALUE SPACE.\n           05  WS-PARM01 REDEFINES WS-SEG-TABLE\n                                       OCCURS 20 TIMES.\n                   15  WS-I            PIC  X.\n                   15  WS-SEG          PIC  X(05).\n                   15  WS-STRING       PIC  X(20).\n                   15  WS-LEN          PIC  XX.\n\n       01  WS-STV0400B-FIELDS.\n           05  STV0400B-DATA           PIC  X(10)    VALUE SPACE.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X6        PIC  X(06).\n               10  STV0400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X8        PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAYS       PIC  X(05).\n               10  FILLER              PIC  X(05).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAY        PIC  X(09).\n               10  STV0400B-DAY-NBR    PIC  X.\n           05  STV0400B-DATA2          PIC  X(10)    VALUE SPACE.\n           05  STV0400B-IN             PIC  X(06)    VALUE SPACE.\n           05  STV0400B-OUT            PIC  X(06)    VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MIS0550B END  '.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELD.\n           05  LS-LENGTH               PIC S9(04)    COMP.\n           05  LS-DATA                 PIC  X(10).\n           05  FILLER REDEFINES LS-DATA.\n               10  LS-CR-SKIP          PIC  X.\n               10  LS-LEN-ERR          PIC  X.\n               10  LS-DELIM            PIC  X.\n               10  LS-EXTRA            PIC  X(07).\n\n      /\n       PROCEDURE DIVISION USING LS-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           PERFORM 0200-OPEN-FILES.\n           DISPLAY '    '.\n           DISPLAY '**** MIS0550B split stream into HL7 records'.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-HL7FLOW.\n\n           DISPLAY '    '.\n           IF WS-CR-SKIP = 'Y'\n               DISPLAY '**** Carriage returns excluded'.\n           DISPLAY '**** Records in HL7FLOW  ' WS-READ-RCD-CNT.\n           DISPLAY '**** HL7 segments out    ' WS-WRITE-RCD-CNT.\n           DISPLAY '**** Highest seg length  ' WS-HIGH.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** MIS0550B cond code ' WS-RETURN-CODE\n                       ' sent by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n           DISPLAY '**** MIS0550B EOJ encountered '.\n           DISPLAY '    '.\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  HL7FLOW.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0550B open error on HL7FLOW'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN INPUT  PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0550B open error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0201                     TO WS-RETURN-CODE.\n           OPEN OUTPUT HL7SEGS.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0550B open error on HL7SEGS'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0202                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE HL7SEGS.\n           CLOSE PARM01.\n           CLOSE HL7FLOW.\n\n       0400-PROCESS-HL7FLOW.\n           IF LS-LENGTH = ZERO\n               DISPLAY '**** Parm length is zero '\n               MOVE +0400                     TO WS-RETURN-CODE\n           ELSE\n           IF LS-LENGTH > LENGTH OF WS-LS-DATA\n               DISPLAY '**** Parm length is excessive '\n               MOVE +0400                     TO WS-RETURN-CODE\n           ELSE\n               MOVE LS-DATA(1: LS-LENGTH)     TO WS-LS-DATA.\n\n           IF WS-DELIM NOT = SPACE\n               DISPLAY '**** CR overridden by delimiter ' WS-DELIM\n               MOVE WS-DELIM                  TO WS-CR.\n\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                      TO WS-SUB1\n               MOVE ZERO                      TO WS-SUB2\n               PERFORM 0500-LOAD-PARM01 THRU\n                       0500-LOAD-PARM01-EXIT\n               IF WS-SUB1 = ZERO\n                   DISPLAY '**** No segments have been intentionally '\n                           'excluded'.\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                      TO WS-SUB2\n               PERFORM 0600-READ-HL7FLOW THRU\n                       0600-READ-HL7FLOW-EXIT\n                       UNTIL END-OF-HL7FLOW.\n\n      *---------------------------------------\n      *    load PARM01\n      *---------------------------------------\n       0500-LOAD-PARM01.\n           READ PARM01.\n           IF WS-STAT = 10\n               MOVE WS-SUB1                   TO WS-PARM01-MAX\n               MOVE WS-SUB1                   TO WS-BEYOND-MAX\n               ADD 10                         TO WS-BEYOND-MAX\n               MOVE WS-SUB2                   TO WS-PARM02-MAX\n               GO TO 0500-LOAD-PARM01-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0550B read error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0500                     TO WS-RETURN-CODE\n               GO TO 0500-LOAD-PARM01-EXIT.\n\n           IF PARM01-DOCU = '*'\n               GO TO 0500-LOAD-PARM01.\n           MOVE SPACE                         TO WS-PARM-SW.\n           IF PARM01-LEN NUMERIC\n               MOVE PARM01-LEN                TO WS-LEN-N\n               IF WS-LEN-N > 20\n                   DISPLAY '**** PARM01 string length > 20'\n                   MOVE +0500                 TO WS-RETURN-CODE\n               ELSE\n               IF WS-LEN-N = ZERO\n                   DISPLAY '**** PARM01 string length is zero'\n                   MOVE +0500                 TO WS-RETURN-CODE\n               ELSE\n                   MOVE 'S'                   TO WS-PARM-SW\n           ELSE\n           IF PARM01-INCL-EXCL = 'I'\n               MOVE 'N'                       TO WS-INCLUDE-SW\n               MOVE 'I'                       TO WS-INCL\n               PERFORM 0600-TEST-TYPES\n               DISPLAY '**** Include segment     ' PARM01-SEG\n               MOVE 'X'                       TO WS-PARM-SW\n           ELSE\n           IF PARM01-INCL-EXCL = 'E'\n               MOVE 'Y'                       TO WS-INCLUDE-SW\n               MOVE 'E'                       TO WS-EXCL\n               PERFORM 0600-TEST-TYPES\n               DISPLAY '**** Exclude segment     ' PARM01-SEG\n               MOVE 'X'                       TO WS-PARM-SW\n           ELSE\n               DISPLAY '**** PARM01 include/exclude not = I or E'\n               MOVE +0500                     TO WS-RETURN-CODE.\n           IF WS-PARM-SW = 'X'\n             IF PARM01-SEG = SPACE\n                 DISPLAY '**** PARM01 segment not valued'\n                 MOVE +0500                   TO WS-RETURN-CODE.\n\n           IF WS-PARM-SW = 'X'\n             IF WS-SUB1 < 20\n                 ADD 1                        TO WS-SUB1\n                 MOVE PARM01-INCL-EXCL        TO WS-I(WS-SUB1)\n                 MOVE PARM01-SEG              TO WS-SEG(WS-SUB1).\n           IF WS-PARM-SW = 'S'\n             IF WS-SUB2 < 20\n                 ADD 1                        TO WS-SUB2\n                 MOVE PARM01-STRING           TO WS-STRING(WS-SUB2)\n                 MOVE PARM01-LEN              TO WS-LEN(WS-SUB2).\n           GO TO 0500-LOAD-PARM01.\n\n       0500-LOAD-PARM01-EXIT. EXIT.\n\n       0600-TEST-TYPES.\n           IF WS-INCL = 'I'\n               AND WS-EXCL = 'E'\n               DISPLAY '**** Both include and exclude specified'\n               MOVE +0600                     TO WS-RETURN-CODE.\n\n       0600-READ-HL7FLOW.\n           READ HL7FLOW.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-RCD-CNT\n               PERFORM 0700-SELECT THRU\n                       0700-SELECT-EXIT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-HL7FLOW-SW\n           ELSE\n               DISPLAY '**** MIS0550B read error on HL7FLOW '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0600                     TO WS-RETURN-CODE.\n\n       0600-READ-HL7FLOW-EXIT. EXIT.\n\n      *---------------------------------------\n      *    loop through the HL7 records (which are all concatenated\n      *    together in a stream) and write individual segments\n      *    to a separate output record\n      *---------------------------------------\n       0700-SELECT.\n           PERFORM 0800-PULL-UNTIL-CR\n               VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > WS-SRC.\n\n       0700-SELECT-EXIT. EXIT.\n\n       0800-PULL-UNTIL-CR.\n           IF WS-TRUNC-SW = 'Y'\n               PERFORM 0800-FIND-END-TRUNC\n           ELSE\n           IF HL7FLOW-RCD(WS-SUB1: 1) = WS-CR\n               PERFORM 0800-CR-FOUND\n           ELSE\n               PERFORM 0800-ZAP-STRINGS\n               IF WS-ZAP-SW = SPACE\n                   ADD 1                      TO WS-SUB2\n                   IF WS-SUB2 > WS-DST\n                      PERFORM 0800-MAXED-OUT\n                   ELSE\n                       MOVE HL7FLOW-RCD(WS-SUB1: 1)\n                                         TO WS-HOLD-OUT(WS-SUB2: 1).\n\n      *---------------------------------------\n      *    last line ... final CR is followed by a space\n      *                  rather than another segment\n      *---------------------------------------\n           IF HL7FLOW-RCD(WS-SUB1: 1) = WS-CR\n             IF HL7FLOW-RCD(WS-SUB1 + 1: 3) = SPACE\n                 MOVE WS-SRC                  TO WS-SUB1.\n\n       0800-ZAP-STRINGS.\n           MOVE SPACE                         TO WS-ZAP-SW.\n           PERFORM 0800-ZAP-STRING\n               VARYING WS-SUB3 FROM 1 BY 1\n               UNTIL WS-SUB3 > WS-PARM02-MAX.\n\n       0800-ZAP-STRING.\n           MOVE WS-LEN(WS-SUB3)               TO WS-LEN-N.\n           IF HL7FLOW-RCD(WS-SUB1: WS-LEN-N)\n                                 = WS-STRING(WS-SUB3)(1: WS-LEN-N)\n              SUBTRACT 1 FROM WS-LEN-N\n              ADD WS-LEN-N                    TO WS-SUB1\n              MOVE WS-PARM02-MAX              TO WS-SUB3\n              MOVE 'Y'                        TO WS-ZAP-SW.\n\n      *---------------------------------------\n      *    it has been determined that the source record is longer\n      *    than our max segment length.  if truncation was requested\n      *    (ws-len-err = n) then continue looping through the source\n      *    record until a bar '|' is found - then pull from that\n      *    point until CR is found.  Place that string at the end\n      *    of the segment along with a message that data was\n      *    truncated.\n      *---------------------------------------\n       0800-FIND-END-TRUNC.\n           IF WS-FIRST-BAR-SW = 'N'\n             IF HL7FLOW-RCD(WS-SUB1: 1) = WS-BAR\n                 MOVE 'Y'                     TO WS-FIRST-BAR-SW.\n\n           IF WS-FIRST-BAR-SW = 'Y'\n               ADD 1                          TO WS-SUB3\n               IF WS-SUB3 > 100\n                   MOVE WS-DST                TO WS-MSG2\n                   MOVE WS-MSG                TO WS-HOLD-MSG\n                   MOVE WS-TRUNC              TO WS-HOLD-END\n                   PERFORM 1100-DETERMINE-SEND\n                   MOVE 'Y'                   TO WS-SKIP-SW\n                   PERFORM 0800-RESET-TRUNC\n               ELSE\n                   MOVE HL7FLOW-RCD(WS-SUB1: 1)\n                                        TO WS-HOLD-TRUNC(WS-SUB3: 1)\n                   IF HL7FLOW-RCD(WS-SUB1: 1) = WS-CR\n                       COMPUTE WS-TRUNC-POS = WS-DST - WS-SUB3 + 1\n                       MOVE WS-HOLD-TRUNC(1: WS-SUB3)\n                                TO WS-HOLD-OUT(WS-TRUNC-POS: WS-SUB3)\n                       MOVE WS-DST            TO WS-MSG2\n                       COMPUTE WS-TRUNC-POS = WS-TRUNC-POS - 50\n                       MOVE WS-MSG\n                                TO WS-HOLD-OUT(WS-TRUNC-POS: 50)\n                       PERFORM 1100-DETERMINE-SEND\n                       MOVE 'N'               TO WS-SKIP-SW\n                       MOVE WS-DST            TO WS-HIGH\n                       PERFORM 0800-RESET-TRUNC.\n\n       0800-RESET-TRUNC.\n           MOVE SPACE                         TO WS-HOLD-OUT.\n           MOVE SPACE                         TO WS-HOLD-TRUNC.\n           MOVE ZERO                          TO WS-SUB2.\n           MOVE ZERO                          TO WS-SUB3.\n           MOVE ZERO                          TO WS-TRUNC-POS.\n           MOVE 'N'                           TO WS-TRUNC-SW.\n           MOVE 'N'                           TO WS-FIRST-BAR-SW.\n\n       0800-CR-FOUND.\n           ADD 1                              TO WS-SUB2.\n           MOVE HL7FLOW-RCD(WS-SUB1: 1) TO WS-HOLD-OUT(WS-SUB2: 1).\n           IF WS-SKIP-SW = 'Y'\n               MOVE SPACE                     TO HL7SEGS-RCD\n               MOVE SPACE                     TO WS-HOLD-OUT\n               MOVE ZERO                      TO WS-SUB2\n               MOVE 'N'                       TO WS-SKIP-SW\n           ELSE\n           IF WS-CR-SKIP = 'Y'\n               MOVE SPACE                   TO WS-HOLD-OUT(WS-SUB2: 1)\n               PERFORM 0900-TRACK-HIGH\n               PERFORM 1100-DETERMINE-SEND\n               MOVE SPACE                     TO HL7SEGS-RCD\n               MOVE SPACE                     TO WS-HOLD-OUT\n               MOVE ZERO                      TO WS-SUB2\n           ELSE\n               PERFORM 0900-TRACK-HIGH\n               PERFORM 1100-DETERMINE-SEND\n               MOVE SPACE                     TO HL7SEGS-RCD\n               MOVE SPACE                     TO WS-HOLD-OUT\n               MOVE ZERO                      TO WS-SUB2.\n\n      *---------------------------------------\n      *    source record is longer than max segment length.\n      *    if ws-len-err = y\n      *        issue code 0008 and skip all data until CR found\n      *    if ws-len-err = n\n      *        set switch to perform truncation logic above\n      *---------------------------------------\n       0800-MAXED-OUT.\n           IF WS-SKIP-SW = 'Y'\n               MOVE SPACE                     TO WS-HOLD-OUT\n               MOVE ZERO                      TO WS-SUB2\n           ELSE\n           IF WS-LEN-ERR = 'Y'\n               DISPLAY '**** HL7 segment ' WS-HOLD-SEG\n                       ' skipped '\n               DISPLAY '**** Longer than ' WS-DST ' bytes '\n               DISPLAY '**** Source rcd  ' WS-READ-RCD-CNT\n               MOVE 'Y'                       TO WS-SKIP-SW\n               MOVE SPACE                     TO WS-HOLD-OUT\n               MOVE ZERO                      TO WS-SUB2\n               MOVE +0008                     TO WS-RETURN-CODE\n           ELSE\n               COMPUTE WS-SHOW-RCD-CNT = WS-WRITE-RCD-CNT + 1\n               DISPLAY '**** HL7 segment ' WS-HOLD-SEG ' truncated'\n               DISPLAY '**** Longer than ' WS-DST ' bytes '\n               DISPLAY '**** Output rcd  ' WS-SHOW-RCD-CNT\n               MOVE 'Y'                       TO WS-TRUNC-SW.\n\n       0900-TRACK-HIGH.\n           IF WS-SUB2 > WS-HIGH\n               MOVE WS-SUB2                   TO WS-HIGH.\n\n      *---------------------------------------\n      *    allow the user to exclude certain segments\n      *        write all records (ws-include = y) except excluded\n      *\n      *    allow the user to include certain segments\n      *        exclude all records (ws-include = n) except included\n      *---------------------------------------\n       1100-DETERMINE-SEND.\n           PERFORM VARYING WS-SUB3 FROM 1 BY 1\n               UNTIL WS-SUB3 > WS-PARM01-MAX\n               IF WS-HOLD-SEG = WS-SEG(WS-SUB3)\n                 IF WS-I(WS-SUB3) = 'I'\n                     PERFORM 1200-WRITE-HL7SEGS\n                     MOVE WS-BEYOND-MAX       TO WS-SUB3\n                 ELSE\n                     MOVE WS-BEYOND-MAX       TO WS-SUB3\n                 END-IF\n               END-IF\n           END-PERFORM.\n      *---------------------------------------\n      *    if no parm entries were entered, WS-SUB3 will always\n      *    be less than WS-BEYOND-MAX.\n      *---------------------------------------\n           IF WS-INCLUDE-SW = 'Y'\n             IF WS-SUB3 < WS-BEYOND-MAX\n                 PERFORM 1200-WRITE-HL7SEGS.\n\n       1200-WRITE-HL7SEGS.\n           WRITE HL7SEGS-RECORD FROM WS-HOLD-OUT.\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0550B write error on HL7SEGS'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +1200                     TO WS-RETURN-CODE.\n\n           ADD 1                              TO WS-WRITE-RCD-CNT.\n           IF WS-WRITE-RCD-CNT > WS-PROGRESS\n               ADD 20000                      TO WS-PROGRESS\n               MOVE SPACE                     TO WS-STV0400B-FIELDS\n               MOVE 'H:MM  '                  TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               DISPLAY '**** Segments processed  ' WS-WRITE-RCD-CNT\n                       '  ' STV0400B-DATA.\n\n\n      ************************************ END MIS0550B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS0585B": {"ttr": 12805, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00&\\x01\\x19\\x07/\\x01\\x193o\\x12B\\x02?\\x02:\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-12-02T12:42:26", "lines": 575, "newlines": 570, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  MIS0585B: notification of file extents'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MIS0585B.\n      ******************************************************************\n      *@@@ II notify systems of files with high extent counts\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ******************************************************************\n      * Date written: 02/25/99\n      * Author      : Jim Iannone\n      *               Loop through a file built by IEHLIST\n      *               and consolidate the extents for files if they\n      *               are multivolume.  Then notify personnel via\n      *               TSO.  Also check for new or possibly lost\n      *               extents (signified by a different create date).\n      *\n      *               Note: datasets were previously sorted in\n      *                     descending sequence.\n      *\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT INFILE               ASSIGN TO INFILE\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT OUTNOT               ASSIGN TO OUTNOT\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  INFILE\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  INFILE-RECORD.\n           05  FILLER                  PIC  XX.\n           05  INFILE-VOLSER           PIC  X(06).\n           05  FILLER                  PIC  X.\n           05  INFILE-DSN              PIC  X(44).\n           05  FILLER                  PIC  X.\n           05  INFILE-TYPE             PIC  XX.\n           05  FILLER                  PIC  X.\n           05  INFILE-CREATE-CYMD      PIC  X(08).\n           05  FILLER                  PIC  X.\n           05  INFILE-EXTENT           PIC  XXX.\n           05  FILLER                  PIC  X.\n           05  INFILE-ATTR-1           PIC  X.\n           05  INFILE-ATTR-2X12        PIC  X(11).\n           05  FILLER                  PIC  X.\n           05  INFILE-SEQ              PIC  X(05).\n           05  FILLER                  PIC  X(33).\n\n       FD  OUTNOT\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  OUTNOT-RECORD.\n           05  OUTNOT-SE               PIC  XXX.\n           05  OUTNOT-QUOTE1           PIC  X.\n           05  OUTNOT-FILL1            PIC  X.\n           05  OUTNOT-EXT-COUNT.\n               10 OUTNOT-DSN           PIC  X(44).\n               10 FILLER REDEFINES OUTNOT-DSN.\n                   15 FILLER           PIC  X(41).\n                   15 OUTNOT-DSN-42X44 PIC  XXX.\n               10 OUTNOT-FILL2         PIC  X.\n               10 OUTNOT-EXTENT-N      PIC  ZZ9.\n               10 OUTNOT-EXTENT REDEFINES OUTNOT-EXTENT-N\n                                       PIC  XXX.\n           05  OUTNOT-NEW-EXT REDEFINES OUTNOT-EXT-COUNT.\n               10 FILLER               PIC  X(40).\n               10 OUTNOT-NEW           PIC  X(08).\n           05  OUTNOT-FILL3            PIC  X.\n           05  OUTNOT-QUOTE2           PIC  X.\n           05  OUTNOT-REMAIN           PIC  X(25).\n\n       FD  PARM01\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  PARM01-RECORD.\n           05  PARM01-FLAG             PIC  X.\n           05  PARM01-USER             PIC  X(09).\n           05  PARM01-EXTENT           PIC  XXX.\n           05  FILLER                  PIC  X.\n           05  PARM01-ATTR             PIC  X.\n           05  FILLER                  PIC  X.\n           05  PARM01-TYPE             PIC  XX.\n           05  FILLER                  PIC  X.\n           05  PARM01-DAYS             PIC  X(07).\n           05  FILLER                  PIC  X.\n           05  PARM01-DSN              PIC  X(44).\n           05  FILLER                  PIC  X(09).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage MIS0585B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-TOT-EXTENT           PIC  9(05)    VALUE ZERO.\n           05  WS-HOLD-MDY8            PIC  X(09)    VALUE SPACE.\n           05  WS-HOLD-HM              PIC  X(05)    VALUE SPACE.\n           05  WS-HOLD-DAY             PIC  X        VALUE SPACE.\n           05  WS-HOLD-USER            PIC  X(10)    VALUE SPACE.\n           05  WS-CALL-STV0400B        PIC  X(08)    VALUE 'STV0400B'.\n           05  WS-CALL-MIS0540B        PIC  X(08)    VALUE 'MIS0540B'.\n           05  WS-EXTENT               PIC  XXX      VALUE '000'.\n           05  WS-EXTENT-N REDEFINES WS-EXTENT\n                                       PIC  999.\n           05  WS-CREATE               PIC  X(08)    VALUE SPACE.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-RCD-CNT         PIC S9(07)    VALUE ZERO.\n           05  WS-WARN-CNT             PIC S9(07)    VALUE ZERO.\n\n       01  WS-TABLES.\n           05  WS-PARM-TABLE.\n               10  WS-LIST             OCCURS 40 TIMES.\n                   15  WS-USER         PIC  X(10).\n                   15  WS-TYPE         PIC  XX.\n                   15  WS-EXT          PIC  999.\n                   15  WS-ATTR         PIC  X.\n                   15  WS-HEADER       PIC  X.\n                   15  WS-DSN          PIC  X(44).\n                   15  WS-DAYS         PIC  X(07).\n                   15  FILLER REDEFINES WS-DAYS.\n                       20  WS-DAY      PIC  X\n                                       OCCURS 7 TIMES.\n                   15  WS-CHECK1       PIC  X.\n                   15  WS-CHECK2       PIC  X.\n                   15  WS-CHECK3       PIC  X.\n\n       01  WS-SWITCHES.\n           05  WS-END-INFILE-SW        PIC  X        VALUE 'N'.\n               88  END-OF-INFILE                     VALUE 'Y'.\n               88  MORE-INFILE-RCDS                  VALUE 'N'.\n           05  WS-NOTIFY-SW            PIC  X        VALUE 'Y'.\n           05  WS-FIRST-SW             PIC  X        VALUE 'Y'.\n           05  WS-CREATE-SW            PIC  X        VALUE SPACE.\n           05  WS-CREATE-MSG-SW        PIC  X        VALUE SPACE.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(05)    VALUE ZERO.\n           05  WS-PARM01-MAX           PIC S9(05)    VALUE ZERO.\n\n       01  WS-STV0400B-FIELDS.\n           05  STV0400B-DATA           PIC  X(10)   VALUE SPACE.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-ERROR      PIC  X(06).\n               10  STV0400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-CYMD       PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAYS       PIC  X(05).\n               10  FILLER              PIC  X(05).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAY        PIC  X(09).\n               10  STV0400B-DAY-NBR    PIC  X.\n           05  STV0400B-DATA2          PIC  X(10)   VALUE SPACE.\n           05  STV0400B-IN             PIC  X(06)   VALUE SPACE.\n           05  STV0400B-OUT            PIC  X(06)   VALUE SPACE.\n\n       01  WS-MIS0540B-FIELDS.\n           05  MIS0540B-MASK           PIC  X(44).\n           05  MIS0540B-DSN            PIC  X(44).\n           05  MIS0540B-DISPLAY        PIC  X.\n           05  MIS0540B-EDIT-NAMES     PIC  X.\n           05  MIS0540B-MATCH          PIC  XXX.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MIS0585B END  '.\n\n      /\n       PROCEDURE DIVISION.\n\n       0100-PROGRAM-ENTRY.\n           DISPLAY '       '.\n           DISPLAY '**** MIS0585B dsn high extent counts'.\n           PERFORM 0200-OPEN-FILES.\n\n           PERFORM VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > 40\n               MOVE SPACE                 TO WS-USER(WS-SUB1)\n               MOVE SPACE                 TO WS-TYPE(WS-SUB1)\n               MOVE SPACE                 TO WS-ATTR(WS-SUB1)\n               MOVE ZERO                  TO WS-EXT(WS-SUB1)\n               MOVE SPACE                 TO WS-HEADER(WS-SUB1)\n               MOVE SPACE                 TO WS-DSN(WS-SUB1)\n               MOVE SPACE                 TO WS-DAYS(WS-SUB1)\n               MOVE SPACE                 TO WS-CHECK1(WS-SUB1)\n               MOVE SPACE                 TO WS-CHECK2(WS-SUB1)\n               MOVE SPACE                 TO WS-CHECK3(WS-SUB1)\n           END-PERFORM.\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                  TO WS-SUB1\n               PERFORM 0350-LOAD-PARM01 THRU\n                       0350-LOAD-PARM01-EXIT.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-INFILE.\n\n           DISPLAY '**** Records in INFILE   ' WS-READ-RCD-CNT.\n           DISPLAY '**** Warning records     ' WS-WARN-CNT.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** MIS0585B cond code ' WS-RETURN-CODE\n                       ' sent by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** MIS0585B EOJ encountered '.\n           DISPLAY '       '.\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  INFILE.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0585B open error on INFILE'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN INPUT  PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0585B open error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN OUTPUT OUTNOT.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0585B open error on OUTNOT'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE OUTNOT.\n           CLOSE PARM01.\n           CLOSE INFILE.\n\n       0350-LOAD-PARM01.\n           READ PARM01.\n           IF WS-STAT = 10\n               MOVE WS-SUB1                   TO WS-PARM01-MAX\n               GO TO 0350-LOAD-PARM01-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0585B read error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0350                     TO WS-RETURN-CODE\n               GO TO 0350-LOAD-PARM01-EXIT.\n\n           IF PARM01-FLAG = '*'\n               GO TO 0350-LOAD-PARM01.\n           IF PARM01-USER = 'ALL'\n             IF PARM01-DAYS NOT = 'SKIP'\n                 DISPLAY '**** USER=ALL requires DAYS=SKIP '\n                 MOVE +0350                   TO WS-RETURN-CODE.\n\n           IF WS-SUB1 < 40\n               ADD 1                          TO WS-SUB1\n               MOVE PARM01-USER               TO WS-USER(WS-SUB1)\n               MOVE PARM01-DAYS               TO WS-DAYS(WS-SUB1)\n               MOVE PARM01-TYPE               TO WS-TYPE(WS-SUB1)\n               MOVE PARM01-ATTR               TO WS-ATTR(WS-SUB1)\n               MOVE PARM01-DSN                TO WS-DSN(WS-SUB1)\n               IF PARM01-EXTENT NUMERIC\n                   MOVE PARM01-EXTENT         TO WS-EXT(WS-SUB1)\n               ELSE\n                   DISPLAY '**** Extent in parm not numeric'\n                   MOVE +0350                 TO WS-RETURN-CODE.\n\n           GO TO 0350-LOAD-PARM01.\n\n       0350-LOAD-PARM01-EXIT. EXIT.\n\n       0400-PROCESS-INFILE.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE 'DAY   '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-DAY-NBR              TO WS-HOLD-DAY.\n           MOVE 'M/D/Y '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-DATA                 TO WS-HOLD-MDY8.\n           MOVE 'H:M:SM'                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-DATA                 TO WS-HOLD-HM.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0600-READ-INFILE\n                   UNTIL END-OF-INFILE.\n\n       0600-READ-INFILE.\n           READ INFILE.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-RCD-CNT\n               IF INFILE-SEQ NUMERIC\n                   PERFORM 0700-SELECT\n               ELSE\n                   CONTINUE\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-INFILE-SW\n           ELSE\n               DISPLAY '**** MIS0585B read error on INFILE '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0600                     TO WS-RETURN-CODE.\n\n       0700-SELECT.\n           IF INFILE-SEQ = '00001'\n               MOVE INFILE-EXTENT             TO WS-EXTENT\n               ADD WS-EXTENT-N                TO WS-TOT-EXTENT\n               PERFORM 0800-RESET-NOTIFY\n                   VARYING WS-SUB2 FROM 1 BY 1\n                   UNTIL WS-SUB2 > WS-PARM01-MAX\n               PERFORM 0750-TEST-CREATE\n               PERFORM 0900-USER-LOOP\n                   VARYING WS-SUB1 FROM 1 BY 1\n                   UNTIL WS-SUB1 > WS-PARM01-MAX\n               MOVE ZERO                      TO WS-TOT-EXTENT\n               MOVE 'Y'                       TO WS-FIRST-SW\n               MOVE 'N'                       TO WS-CREATE-SW\n           ELSE\n               MOVE INFILE-EXTENT             TO WS-EXTENT\n               ADD WS-EXTENT-N                TO WS-TOT-EXTENT\n               PERFORM 0750-TEST-CREATE.\n\n       0750-TEST-CREATE.\n           IF WS-FIRST-SW = 'Y'\n               MOVE INFILE-CREATE-CYMD        TO WS-CREATE\n               MOVE 'N'                       TO WS-FIRST-SW\n           ELSE\n           IF INFILE-SEQ = '00001'\n               AND INFILE-CREATE-CYMD > WS-CREATE\n               MOVE 'L'                       TO WS-CREATE-SW\n           ELSE\n           IF INFILE-CREATE-CYMD NOT = WS-CREATE\n               MOVE 'Y'                       TO WS-CREATE-SW.\n\n       0800-RESET-NOTIFY.\n           MOVE SPACE                         TO WS-CHECK1(WS-SUB2).\n           MOVE SPACE                         TO WS-CHECK2(WS-SUB2).\n           MOVE SPACE                         TO WS-CHECK3(WS-SUB2).\n\n       0900-USER-LOOP.\n           MOVE 'Y'                           TO WS-NOTIFY-SW.\n           MOVE 'N'                           TO WS-CREATE-MSG-SW.\n           PERFORM 1100-TEST-PARMS THRU\n                   1100-TEST-PARMS-EXIT.\n           IF WS-NOTIFY-SW = 'Y'\n               OR WS-CREATE-MSG-SW = 'Y' OR 'L'\n               PERFORM 1500-NOTIFY.\n\n      *---------------------------------------\n      *    set the DFSMS/DSORG/dataset name attribute switches\n      *    which are used in 1300-TEST-ALREADY-MATCHED.  these\n      *    attributes determine whether a given dataset matches\n      *    the parm criteria.  number of extents and days tests\n      *    are considered seperate.\n      *+--------------------------------------\n       1100-TEST-PARMS.\n           IF WS-TYPE(WS-SUB1) = SPACE\n               MOVE 'Y'                       TO WS-CHECK1(WS-SUB1)\n           ELSE\n           IF INFILE-TYPE = WS-TYPE(WS-SUB1)\n               MOVE 'Y'                       TO WS-CHECK1(WS-SUB1)\n           ELSE\n               MOVE 'N'                       TO WS-NOTIFY-SW\n               GO TO 1100-TEST-PARMS-EXIT.\n\n           IF WS-ATTR(WS-SUB1) = SPACE\n               MOVE 'Y'                       TO WS-CHECK2(WS-SUB1)\n           ELSE\n           IF WS-ATTR(WS-SUB1) = 'S'\n               AND INFILE-ATTR-1 = 'S'\n               MOVE 'Y'                       TO WS-CHECK2(WS-SUB1)\n           ELSE\n           IF WS-ATTR(WS-SUB1) = 'N'\n               AND INFILE-ATTR-1 = SPACE\n               MOVE 'Y'                       TO WS-CHECK2(WS-SUB1)\n           ELSE\n               MOVE 'N'                       TO WS-NOTIFY-SW\n               GO TO 1100-TEST-PARMS-EXIT.\n\n           IF WS-DSN(WS-SUB1) = SPACE OR 'NEW'\n               MOVE 'Y'                       TO WS-CHECK3(WS-SUB1)\n           ELSE\n           PERFORM 1400-TEST-MASK\n           IF WS-NOTIFY-SW = 'Y'\n               MOVE 'Y'                       TO WS-CHECK3(WS-SUB1)\n           ELSE\n               GO TO 1100-TEST-PARMS-EXIT.\n\n           MOVE 'N'                           TO WS-NOTIFY-SW.\n           IF WS-DAYS(WS-SUB1) = 'SKIP'\n               GO TO 1100-TEST-PARMS-EXIT\n           ELSE\n               PERFORM 1200-TEST-DAYS\n                   VARYING WS-SUB2 FROM 1 BY 1\n                   UNTIL WS-SUB2 > 7.\n           IF WS-NOTIFY-SW = 'N'\n               GO TO 1100-TEST-PARMS-EXIT.\n\n           IF WS-DSN(WS-SUB1) = 'NEW'\n               MOVE 'N'                       TO WS-NOTIFY-SW\n               IF WS-CREATE-SW = 'Y' OR 'L'\n                   MOVE WS-CREATE-SW          TO WS-CREATE-MSG-SW\n                   GO TO 1100-TEST-PARMS-EXIT\n               ELSE\n                   GO TO 1100-TEST-PARMS-EXIT.\n\n           IF WS-TOT-EXTENT < WS-EXT(WS-SUB1)\n               MOVE 'N'                       TO WS-NOTIFY-SW\n               GO TO 1100-TEST-PARMS-EXIT.\n\n           MOVE WS-USER(WS-SUB1)              TO WS-HOLD-USER.\n           PERFORM 1300-TEST-ALREADY-MATCHED\n               VARYING WS-SUB2 FROM 1 BY 1\n               UNTIL WS-SUB2 > (WS-SUB1 - 1)\n               OR    WS-NOTIFY-SW = 'N'.\n\n       1100-TEST-PARMS-EXIT. EXIT.\n\n       1200-TEST-DAYS.\n           IF WS-DAY(WS-SUB1 WS-SUB2) = WS-HOLD-DAY\n               MOVE 'Y'                       TO WS-NOTIFY-SW.\n\n      *---------------------------------------\n      *    for this dataset only, looping through the parm entries,\n      *    if a previous and more specific match was made, avoid\n      *    sending notification for this more generic match.\n      *+--------------------------------------\n       1300-TEST-ALREADY-MATCHED.\n           IF WS-USER(WS-SUB2) = WS-HOLD-USER OR 'ALL'\n             IF WS-DSN(WS-SUB2) NOT = 'NEW'\n               IF WS-CHECK1(WS-SUB2) = 'Y'\n                   AND WS-CHECK2(WS-SUB2) = 'Y'\n                   AND WS-CHECK3(WS-SUB2) = 'Y'\n                   MOVE 'N'                   TO WS-NOTIFY-SW.\n\n       1400-TEST-MASK.\n           MOVE WS-DSN(WS-SUB1)               TO MIS0540B-MASK.\n           MOVE INFILE-DSN                    TO MIS0540B-DSN.\n           MOVE SPACE                         TO MIS0540B-DISPLAY.\n           MOVE SPACE                         TO MIS0540B-MATCH\n                                                 MIS0540B-EDIT-NAMES.\n           CALL WS-CALL-MIS0540B USING MIS0540B-MASK MIS0540B-DSN\n                                 MIS0540B-DISPLAY MIS0540B-EDIT-NAMES\n                                 MIS0540B-MATCH.\n           IF MIS0540B-MATCH NUMERIC\n               DISPLAY '**** MIS0545B call error to MIS0540B'\n               DISPLAY '**** Code = ' MIS0540B-MATCH\n               MOVE +1400                     TO WS-RETURN-CODE\n           ELSE\n           IF MIS0540B-MATCH NOT = 'YES'\n               MOVE 'N'                       TO WS-NOTIFY-SW.\n\n       1500-NOTIFY.\n           IF WS-HEADER(WS-SUB1) NOT = 'Y'\n               PERFORM 1600-BUILD-HEADER.\n           IF WS-NOTIFY-SW = 'Y'\n               PERFORM 1700-SEND-EXTENTS.\n           IF WS-CREATE-MSG-SW = 'Y'\n               PERFORM 1800-SEND-NEW-EXT.\n           IF WS-CREATE-MSG-SW = 'L'\n               PERFORM 1800-SEND-LOST-EXT.\n\n       1600-BUILD-HEADER.\n           MOVE WS-USER(WS-SUB1)              TO WS-HOLD-USER.\n           PERFORM 1900-RESET-HEADER\n               VARYING WS-SUB2 FROM 1 BY 1\n               UNTIL WS-SUB2 > WS-PARM01-MAX.\n           MOVE 'SE '                         TO OUTNOT-SE.\n           MOVE QUOTE                         TO OUTNOT-QUOTE1.\n           MOVE SPACE                         TO OUTNOT-FILL1.\n           MOVE SPACE                         TO OUTNOT-DSN.\n           STRING '----- Files with extents: ' DELIMITED BY SIZE\n                  WS-HOLD-MDY8      WS-HOLD-HM  DELIMITED BY SIZE\n                  ' ---'                        DELIMITED BY SIZE\n                  INTO OUTNOT-DSN.\n           MOVE SPACE                         TO OUTNOT-FILL2.\n           MOVE '---'                         TO OUTNOT-EXTENT.\n           MOVE SPACE                         TO OUTNOT-FILL3.\n           MOVE QUOTE                         TO OUTNOT-QUOTE2.\n           MOVE SPACE                         TO OUTNOT-REMAIN.\n           STRING ' U('                       DELIMITED BY SIZE\n                  WS-USER(WS-SUB1)            DELIMITED BY ' '\n                  ') LOGON'                   DELIMITED BY SIZE\n                  INTO OUTNOT-REMAIN.\n           PERFORM 2000-WRITE-OUTNOT.\n\n       1700-SEND-EXTENTS.\n           ADD 1                              TO WS-WARN-CNT.\n           MOVE 'SE '                         TO OUTNOT-SE.\n           MOVE QUOTE                         TO OUTNOT-QUOTE1.\n           MOVE SPACE                         TO OUTNOT-FILL1.\n           MOVE INFILE-DSN                    TO OUTNOT-DSN.\n           IF OUTNOT-DSN-42X44 = SPACE\n               MOVE INFILE-TYPE               TO OUTNOT-DSN-42X44(2: ).\n           MOVE SPACE                         TO OUTNOT-FILL2.\n           MOVE WS-TOT-EXTENT                 TO OUTNOT-EXTENT-N.\n           MOVE SPACE                         TO OUTNOT-FILL3.\n           MOVE QUOTE                         TO OUTNOT-QUOTE2.\n           MOVE SPACE                         TO OUTNOT-REMAIN.\n           STRING ' U('                       DELIMITED BY SIZE\n                  WS-USER(WS-SUB1)            DELIMITED BY ' '\n                  ') LOGON'                   DELIMITED BY SIZE\n                  INTO OUTNOT-REMAIN.\n           PERFORM 2000-WRITE-OUTNOT.\n\n       1800-SEND-NEW-EXT.\n           ADD 1                              TO WS-WARN-CNT.\n           MOVE 'SE '                         TO OUTNOT-SE.\n           MOVE QUOTE                         TO OUTNOT-QUOTE1.\n           MOVE SPACE                         TO OUTNOT-FILL1.\n           MOVE INFILE-DSN                    TO OUTNOT-DSN.\n           MOVE ' new    '                    TO OUTNOT-NEW.\n           MOVE SPACE                         TO OUTNOT-FILL3.\n           MOVE QUOTE                         TO OUTNOT-QUOTE2.\n           MOVE SPACE                         TO OUTNOT-REMAIN.\n           STRING ' U('                       DELIMITED BY SIZE\n                  WS-USER(WS-SUB1)            DELIMITED BY ' '\n                  ') LOGON'                   DELIMITED BY SIZE\n                  INTO OUTNOT-REMAIN.\n           PERFORM 2000-WRITE-OUTNOT.\n\n       1800-SEND-LOST-EXT.\n           ADD 1                              TO WS-WARN-CNT.\n           MOVE 'SE '                         TO OUTNOT-SE.\n           MOVE QUOTE                         TO OUTNOT-QUOTE1.\n           MOVE SPACE                         TO OUTNOT-FILL1.\n           MOVE INFILE-DSN                    TO OUTNOT-DSN.\n           MOVE ' lost   '                    TO OUTNOT-NEW.\n           MOVE SPACE                         TO OUTNOT-FILL3.\n           MOVE QUOTE                         TO OUTNOT-QUOTE2.\n           MOVE SPACE                         TO OUTNOT-REMAIN.\n           STRING ' U('                       DELIMITED BY SIZE\n                  WS-USER(WS-SUB1)            DELIMITED BY ' '\n                  ') LOGON'                   DELIMITED BY SIZE\n                  INTO OUTNOT-REMAIN.\n           PERFORM 2000-WRITE-OUTNOT.\n\n       1900-RESET-HEADER.\n           IF WS-USER(WS-SUB2) = WS-HOLD-USER\n               MOVE 'Y'                       TO WS-HEADER(WS-SUB2).\n\n       2000-WRITE-OUTNOT.\n           WRITE OUTNOT-RECORD.\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0585B write error on OUTNOT '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +2000                     TO WS-RETURN-CODE.\n\n      ************************************ END MIS0585B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS0590B": {"ttr": 13061, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1d\\x00\\x18\\x01\\x19\\x07/\\x01\\x193o\\x11R\\x01\\xb0\\x01\\x1b\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.29", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-12-02T11:52:18", "lines": 432, "newlines": 283, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  MIS0590B: build SMTP commands'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MIS0590B.\n      ******************************************************************\n      *@@@ C3 build SMTP commands\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ******************************************************************\n      * Date written: 09/20/99\n      * Author      : Jim Iannone\n      *               build SMTP commands to send data on\n      *               specified days\n      ******************************************************************\n      * Date changed: 01/07/2010  Jim Iannone\n      *               corrections to logic when flag = space\n      *****************************************************************\n      * Date changed: 11/27/2019  Jim Iannone\n      *               add logic to format 'Date: ' command\n      *****************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT OUTSMTP              ASSIGN TO OUTSMTP\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  OUTSMTP\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  OUTSMTP-RECORD.\n           05  OUTSMTP-RCD             PIC  X(80).\n\n       FD  PARM01\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  PARM01-RECORD.\n           05  PARM01-DOCU             PIC  X.\n           05  PARM01-CODE             PIC  XXX.\n           05  FILLER                  PIC  X.\n           05  PARM01-SMTP             PIC  X(50).\n           05  FILLER                  PIC  X.\n           05  PARM01-DAYS             PIC  X(07).\n           05  FILLER                  PIC  X.\n           05  PARM01-FLAG             PIC  X.\n           05  FILLER                  PIC  X(07).\n           05  FILLER                  PIC  X(08).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage MIS0590B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-TALLY                PIC S9(04)    VALUE ZERO COMP.\n           05  WS-HOLD-DAY             PIC  X        VALUE SPACE.\n           05  WS-HOLD-FLD1            PIC  X(50)    VALUE SPACE.\n           05  WS-HOLD-FLD2            PIC  X(50)    VALUE SPACE.\n           05  WS-CALL-STV0400B        PIC  X(08)    VALUE 'STV0400B'.\n           05  WS-STR1                 PIC  X(10)    VALUE SPACE.\n           05  WS-STR2                 PIC  XX       VALUE SPACE.\n           05  WS-STR3                 PIC  X(10)    VALUE SPACE.\n           05  WS-STR4                 PIC  X(04)    VALUE SPACE.\n           05  WS-STR5                 PIC  XX       VALUE SPACE.\n           05  WS-STR6                 PIC  XX       VALUE SPACE.\n           05  WS-STR7                 PIC  XX       VALUE SPACE.\n           05  WS-STR8                 PIC  X(05)    VALUE SPACE.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-WRITE-RCD-CNT        PIC S9(07)    VALUE ZERO.\n\n       01  WS-TABLES.\n           05  WS-PARM-TABLE.\n               10  WS-LIST             OCCURS 40 TIMES.\n                   15  WS-CODE         PIC  XXX.\n                   15  WS-SMTP.\n                       20  WS-RCPT     PIC  X(05).\n                       20  FILLER      PIC  X(45).\n                   15  WS-DAYS         PIC  X(07).\n                   15  FILLER REDEFINES WS-DAYS.\n                       20  WS-DAY      PIC  X\n                                       OCCURS 7 TIMES.\n                   15  WS-FLAG         PIC  X.\n\n       01  WS-SWITCHES.\n           05  WS-NOTIFY-SW            PIC  X        VALUE 'Y'.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(05)    VALUE ZERO.\n           05  WS-PARM01-MAX           PIC S9(05)    VALUE ZERO.\n\n       01  WS-STV0400B-FIELDS.\n           05  STV0400B-DATA           PIC  X(10)   VALUE SPACE.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X6        PIC  X(06).\n               10  STV0400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X8        PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAYS       PIC  X(05).\n               10  FILLER              PIC  X(05).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAY        PIC  X(09).\n               10  STV0400B-DAY-NBR    PIC  X.\n           05  STV0400B-DATA2          PIC  X(10)   VALUE SPACE.\n           05  STV0400B-IN             PIC  X(06)   VALUE SPACE.\n           05  STV0400B-OUT            PIC  X(06)   VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MIS0590B END  '.\n\n       LINKAGE SECTION.\n\n       01  PARM-FIELD.\n           05  PARM-LENGTH             PIC S9(04)    COMP.\n           05  PARM-CODE               PIC  XXX.\n           05  FILLER                  PIC  X(17).\n\n      /\n       PROCEDURE DIVISION USING PARM-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           DISPLAY '    '.\n           DISPLAY '**** MIS0590B build SMTP commands '.\n           PERFORM 0200-OPEN-FILES.\n\n           PERFORM VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > 40\n               MOVE SPACE                 TO WS-CODE(WS-SUB1)\n               MOVE SPACE                 TO WS-SMTP(WS-SUB1)\n               MOVE SPACE                 TO WS-DAYS(WS-SUB1)\n               MOVE SPACE                 TO WS-FLAG(WS-SUB1)\n           END-PERFORM.\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                  TO WS-SUB1\n               PERFORM 0350-LOAD-PARM01 THRU\n                       0350-LOAD-PARM01-EXIT.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-PARM.\n\n           DISPLAY '**** Records written     ' WS-WRITE-RCD-CNT.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** MIS0590B cond code ' WS-RETURN-CODE\n                       ' sent by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** MIS0590B EOJ encountered '.\n           DISPLAY '    '.\n\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0590B open error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN OUTPUT OUTSMTP.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0590B open error on OUTSMTP'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE OUTSMTP.\n           CLOSE PARM01.\n\n       0350-LOAD-PARM01.\n           READ PARM01.\n           IF WS-STAT = 10\n               MOVE WS-SUB1                   TO WS-PARM01-MAX\n               GO TO 0350-LOAD-PARM01-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0590B read error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0350                     TO WS-RETURN-CODE\n               GO TO 0350-LOAD-PARM01-EXIT.\n\n           IF PARM01-DOCU = '*'\n               GO TO 0350-LOAD-PARM01.\n           IF PARM-CODE NOT = PARM01-CODE\n               GO TO 0350-LOAD-PARM01.\n           IF WS-SUB1 < 40\n               ADD 1                          TO WS-SUB1\n               MOVE PARM01-CODE               TO WS-CODE(WS-SUB1)\n               MOVE PARM01-SMTP               TO WS-SMTP(WS-SUB1)\n               PERFORM 0400-ALTER-SMTP-CASE\n               MOVE PARM01-DAYS               TO WS-DAYS(WS-SUB1)\n               MOVE PARM01-FLAG               TO WS-FLAG(WS-SUB1).\n\n           GO TO 0350-LOAD-PARM01.\n\n       0350-LOAD-PARM01-EXIT. EXIT.\n\n       0400-ALTER-SMTP-CASE.\n           MOVE SPACE                         TO WS-HOLD-FLD1.\n           MOVE SPACE                         TO WS-HOLD-FLD2.\n           INSPECT WS-SMTP(WS-SUB1)(1: 4)     CONVERTING\n                   'abcdefghijklmnopqrstuvwxyz' TO\n                   'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n           IF WS-SMTP(WS-SUB1)(1: 4) = 'AUTH' OR 'DATA' OR 'EHLO'\n                                    OR 'HELO' OR 'HELP' OR 'NOOP'\n                                    OR 'QUIT' OR 'RSET' OR 'SIZE'\n                                    OR 'STAR' OR 'VRFY' OR '.'\n               CONTINUE\n           ELSE\n               UNSTRING WS-SMTP(WS-SUB1)      DELIMITED BY ':'\n                   INTO WS-HOLD-FLD1 WS-HOLD-FLD2\n               INSPECT WS-HOLD-FLD1           CONVERTING\n                   'abcdefghijklmnopqrstuvwxyz' TO\n                   'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n               IF WS-HOLD-FLD1 = 'MAIL FROM' OR 'RCPT TO'\n                   IF WS-HOLD-FLD2(1: 1) = SPACE\n                       STRING WS-HOLD-FLD1    DELIMITED BY '  '\n                              ':'             DELIMITED BY SIZE\n                              WS-HOLD-FLD2    DELIMITED BY SIZE\n                              INTO WS-SMTP(WS-SUB1)\n                   ELSE\n                       STRING WS-HOLD-FLD1    DELIMITED BY '  '\n                              ': '            DELIMITED BY SIZE\n                              WS-HOLD-FLD2    DELIMITED BY SIZE\n                              INTO WS-SMTP(WS-SUB1)\n               ELSE\n               IF WS-HOLD-FLD1 = 'SUBJECT' OR 'DATE' OR 'FROM'\n                              OR 'TO'\n                   INSPECT WS-HOLD-FLD1(2: )      CONVERTING\n                       'ABCDEFGHIJKLMNOPQRSTUVWXYZ' TO\n                       'abcdefghijklmnopqrstuvwxyz'\n                   IF WS-HOLD-FLD2(1: 1) = SPACE\n                       STRING WS-HOLD-FLD1        DELIMITED BY SPACE\n                              ':'                 DELIMITED BY SIZE\n                              WS-HOLD-FLD2        DELIMITED BY SIZE\n                              INTO WS-SMTP(WS-SUB1)\n                   ELSE\n                       STRING WS-HOLD-FLD1        DELIMITED BY SPACE\n                              ': '                DELIMITED BY SIZE\n                              WS-HOLD-FLD2        DELIMITED BY SIZE\n                              INTO WS-SMTP(WS-SUB1)\n               ELSE\n               IF WS-HOLD-FLD1 = 'REPLY-TO'\n                   STRING 'Reply-To'          DELIMITED BY SIZE\n                          ': '                DELIMITED BY SIZE\n                          WS-HOLD-FLD2        DELIMITED BY SIZE\n                          INTO WS-SMTP(WS-SUB1).\n\n       0400-PROCESS-PARM.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE 'DAY   '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-DAY-NBR              TO WS-HOLD-DAY.\n      *---------------------------------------\n      *    Check to see if any recipient records will qualify...\n      *    if none, skip writing any records.\n      *---------------------------------------\n           MOVE 'N'                           TO WS-NOTIFY-SW.\n           PERFORM 1200-INITIAL-TEST\n               VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > WS-PARM01-MAX.\n\n           IF WS-NOTIFY-SW = 'N'\n               DISPLAY '**** MIS0590B no recipients selected'\n               MOVE +0004                     TO WS-RETURN-CODE.\n      *---------------------------------------\n      *    if WS-RETURN-CODE = ZERO then a recipient\n      *    or END record qualified, so loop through\n      *    all records for this code and generate SMTP records.\n      *---------------------------------------\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0600-BUILD-OUTSMTP THRU\n                       0600-BUILD-EXIT\n                       VARYING WS-SUB1 FROM 1 BY 1\n                       UNTIL WS-SUB1 > WS-PARM01-MAX.\n\n       0600-BUILD-OUTSMTP.\n           IF WS-FLAG(WS-SUB1) = 'N'\n               CONTINUE\n           ELSE\n           IF WS-FLAG(WS-SUB1) = 'Y'\n               PERFORM 0700-SEND-OUTSMTP\n           ELSE\n           IF WS-DAYS(WS-SUB1) = SPACE\n               PERFORM 0700-SEND-OUTSMTP\n           ELSE\n               MOVE 'N'                       TO WS-NOTIFY-SW\n               PERFORM 1200-TEST-DAYS\n                   VARYING WS-SUB2 FROM 1 BY 1\n                   UNTIL WS-SUB2 > 7\n               IF WS-NOTIFY-SW = 'Y'\n                   PERFORM 0700-SEND-OUTSMTP.\n\n       0600-BUILD-EXIT. EXIT.\n\n       0700-SEND-OUTSMTP.\n           MOVE SPACE                         TO OUTSMTP-RCD.\n           MOVE WS-SMTP(WS-SUB1)              TO OUTSMTP-RCD.\n           IF OUTSMTP-RCD(1: 4) = 'QUIT'\n               DISPLAY '**** END record '\n           ELSE\n           IF OUTSMTP-RCD(1: 4) = 'Date'\n               PERFORM 1300-BUILD-DATE-LINE\n               DISPLAY '**** ' WS-CODE(WS-SUB1)\n                       ' date            '  WS-HOLD-FLD1\n           ELSE\n           IF OUTSMTP-RCD(1: 4) = 'RCPT'\n               MOVE ZERO                      TO WS-TALLY\n               INSPECT OUTSMTP-RCD TALLYING WS-TALLY FOR ALL '<'\n               IF WS-TALLY > ZERO\n                   MOVE SPACE                 TO WS-HOLD-FLD1\n                   MOVE SPACE                 TO WS-HOLD-FLD2\n                   UNSTRING OUTSMTP-RCD       DELIMITED BY '<'\n                       INTO WS-HOLD-FLD1      WS-HOLD-FLD2\n                   INSPECT WS-HOLD-FLD2 REPLACING ALL '>' BY SPACE\n                   DISPLAY '**** ' WS-CODE(WS-SUB1) ' recipient       '\n                                   WS-HOLD-FLD2\n               ELSE\n                   MOVE SPACE                 TO WS-HOLD-FLD1\n                   MOVE SPACE                 TO WS-HOLD-FLD2\n                   UNSTRING OUTSMTP-RCD       DELIMITED BY ':'\n                       INTO WS-HOLD-FLD1      WS-HOLD-FLD2\n                   DISPLAY '**** ' WS-CODE(WS-SUB1) ' recipient       '\n                                   WS-HOLD-FLD2.\n\n           PERFORM 2000-WRITE-OUTSMTP.\n\n       1200-INITIAL-TEST.\n           IF WS-CODE(WS-SUB1) = 'END'\n               MOVE 'Y'                       TO WS-NOTIFY-SW\n           ELSE\n           IF WS-RCPT(WS-SUB1) = 'RCPT '\n             IF WS-FLAG(WS-SUB1) = 'N'\n                 CONTINUE\n             ELSE\n             IF WS-FLAG(WS-SUB1) = 'Y'\n                 MOVE 'Y'                     TO WS-NOTIFY-SW\n             ELSE\n             IF WS-DAYS(WS-SUB1) = SPACE\n                 AND WS-FLAG(WS-SUB1) = SPACE\n                 MOVE 'Y'                     TO WS-NOTIFY-SW\n             ELSE\n                 PERFORM 1200-TEST-DAYS\n                     VARYING WS-SUB2 FROM 1 BY 1\n                     UNTIL WS-SUB2 > 7.\n\n       1200-TEST-DAYS.\n           IF WS-DAY(WS-SUB1 WS-SUB2) = WS-HOLD-DAY\n               MOVE 'Y'                       TO WS-NOTIFY-SW.\n\n      *    Date: Thu, 21 May 2008 05:33:29 -0700\n      *\n       1300-BUILD-DATE-LINE.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE 'DAY   '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-DATA(1: 3)           TO WS-STR1.\n           INSPECT WS-STR1(2: )                 CONVERTING\n                   'ABCDEFGHIJKLMNOPQRSTUVWXYZ' TO\n                   'abcdefghijklmnopqrstuvwxyz'.\n           MOVE FUNCTION CURRENT-DATE(7: 2)   TO WS-STR2.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE 'MONTH '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-DATA                 TO WS-STR3.\n           INSPECT WS-STR3(2: )                 CONVERTING\n                   'ABCDEFGHIJKLMNOPQRSTUVWXYZ' TO\n                   'abcdefghijklmnopqrstuvwxyz'.\n           MOVE FUNCTION CURRENT-DATE(1: 4)   TO WS-STR4.\n           MOVE FUNCTION CURRENT-DATE(9: 2)   TO WS-STR5.\n           MOVE FUNCTION CURRENT-DATE(11: 2)  TO WS-STR6.\n           MOVE FUNCTION CURRENT-DATE(13: 2)  TO WS-STR7.\n           MOVE FUNCTION CURRENT-DATE(17: 5)  TO WS-STR8.\n\n           MOVE SPACE                         TO OUTSMTP-RCD.\n           MOVE SPACE                         TO WS-HOLD-FLD1.\n           STRING WS-STR1                     DELIMITED BY SPACE\n                  ', '                        DELIMITED BY SIZE\n                  WS-STR2                     DELIMITED BY SIZE\n                  ' '                         DELIMITED BY SIZE\n                  WS-STR3                     DELIMITED BY SPACE\n                  ' '                         DELIMITED BY SIZE\n                  WS-STR4                     DELIMITED BY SIZE\n                  ' '                         DELIMITED BY SIZE\n                  WS-STR5                     DELIMITED BY SIZE\n                  ':'                         DELIMITED BY SIZE\n                  WS-STR6                     DELIMITED BY SIZE\n                  ':'                         DELIMITED BY SIZE\n                  WS-STR7                     DELIMITED BY SIZE\n                  ' '                         DELIMITED BY SIZE\n                  WS-STR8                     DELIMITED BY SIZE\n                  INTO WS-HOLD-FLD1.\n           STRING WS-SMTP(WS-SUB1)(1: 5)      DELIMITED BY SIZE\n                  ' '                         DELIMITED BY SIZE\n                  WS-HOLD-FLD1                DELIMITED BY SIZE\n                  INTO OUTSMTP-RCD.\n\n       2000-WRITE-OUTSMTP.\n           WRITE OUTSMTP-RECORD.\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0590B write error on OUTSMTP '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +2000                     TO WS-RETURN-CODE.\n           ADD 1                              TO WS-WRITE-RCD-CNT.\n\n      ************************************ END MIS0590B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS0655B": {"ttr": 13313, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x012\\x007\\x01\\x190O\\x01\\x192/\\x12@\\x04\\xfe\\x04\\x86\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.50", "flags": 0, "createdate": "2019-10-31T00:00:00", "modifydate": "2019-11-18T12:40:37", "lines": 1278, "newlines": 1158, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  MIS0655B: batch job delay utility'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MIS0655B.\n      ******************************************************************\n      *@@@ C3 hold batch jobs until event occurs\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ******************************************************************\n      * Date written: 11/29/2001\n      * Author      : Jim Iannone\n      *\n      *    Test a parm to determine if a batch event has occurred.\n      *    For example, a CICS region might be down.  If down,\n      *    issue a message to the operator that the job is held\n      *    until CICS comes back up, or until some other event\n      *    causes the parm to be reset.\n      *\n      *    Used for jobs requiring batch cics access, or for jobs\n      *    dependent on other jobs.\n      *\n      *    When jobs waiting for CICS restart, use a delay system\n      *    so they don't all restart at the same time, to avoid\n      *    excessive VSDM or other contention.\n      *\n      *    Simply stated, this job waits for a static parm\n      *    to be changed from 'N' (in the first position) to 'Y'.\n      *\n      *    To cause MIS0655B to issue a cond code:\n      *             place '0' in PARM01 to issue cond code 0\n      *             place '4' in PARM01 to issue cond code 4\n      *             place '6' in PARM01 to issue cond code 16\n      *             place '8' in PARM01 to issue cond code 8\n      *\n      *    'H' means that the task is 'held' until being set to\n      *    Y' or 'N'.  Set manually using the >HOLDXXXX command\n      *    (where XXXX = CICS name) about 10 minutes before\n      *    dropping CICS.\n      *\n      *    This allows jobs requiring CICS to start waiting even\n      *    before the region is down, and jobs that wait for CICS\n      *    to terminate (using the REVERSE option) to wait until\n      *    the region is down.\n      *\n      *    You can also specify an interval (see the interval table\n      *    below).  This will force all jobs using interval logic\n      *    to run ## minutes after the previous job.\n      *\n      *    NOTE:  this program calls delay program \"NEWWAIT\"\n      *           which resides on CBT tape #270 and requires\n      *           MACLIB from same tape number when compiling\n      *\n      ******************************************************************\n      * Date changed: 10/24/2006\n      * Programmer  : Jim Iannone\n      *\n      *    Allow the program to wait until a specified time of day\n      *    is met.  This works with the other parameters: if PARM01\n      *    is 'N' then program will still wait for it to change\n      *    to 'Y' regardless of the time of day.  Once that condition\n      *    is met, the time of day condition then applies.\n      *\n      *    To terminate this program while waiting for a certain time,\n      *    set PARM01 to one of the values listed above.\n      ******************************************************************\n      * Date changed: 02/08/2010\n      * Programmer  : Jim Iannone\n      *\n      *    Allow the program to wait until a specified string is found\n      *    in PARM01, either at a specified position and/or record\n      *    or anywhere\n      ******************************************************************\n      * Date changed: 10/30/2019\n      * Programmer  : Jim Iannone\n      *\n      *    Add symbolic replacement capability in PARM02 message:\n      *    replace TTTTT with wait time and JJJJJJJJ with job name.\n      *    Revamp matching loop and improve display statements.\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT PARM02               ASSIGN TO PARM02\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT TRACK1               ASSIGN TO TRACK1\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  PARM01\n           RECORDING MODE F.\n       01  PARM01-RECORD.\n           05  PARM01-UP-DOWN          PIC  X.\n           05  FILLER                  PIC  X.\n           05  PARM01-REGION           PIC  X(04).\n           05  FILLER                  PIC  X(66).\n           05  FILLER                  PIC  X(08).\n\n       FD  PARM02\n           RECORDING MODE F.\n       01  PARM02-RECORD.\n           05  PARM02-DOCU             PIC  X.\n           05  PARM02-CMD              PIC  X(13).\n           05  FILLER                  PIC  X(04).\n           05  PARM02-VALUE            PIC  X(50).\n           05  FILLER REDEFINES PARM02-VALUE.\n               10  PARM02-01-VALUE     PIC  X.\n               10  FILLER              PIC  X(49).\n           05  FILLER REDEFINES PARM02-VALUE.\n               10  PARM02-02-VALUE     PIC  XX.\n               10  FILLER              PIC  X(48).\n           05  FILLER REDEFINES PARM02-VALUE.\n               10  PARM02-03-VALUE     PIC  XXX.\n               10  FILLER              PIC  X.\n               10  PARM02-03-5X7       PIC  XXX.\n               10  FILLER              PIC  X.\n               10  PARM02-03-9X11      PIC  XXX.\n               10  FILLER              PIC  X.\n               10  PARM02-STRING       PIC  X(30).\n               10  FILLER              PIC  X(08).\n           05  FILLER REDEFINES PARM02-VALUE.\n               10  PARM02-04-VALUE     PIC  X(04).\n               10  FILLER              PIC  X(46).\n           05  FILLER REDEFINES PARM02-VALUE.\n               10  PARM02-05-VALUE     PIC  X(05).\n               10  FILLER              PIC  X(45).\n           05  FILLER                  PIC  X(04).\n           05  FILLER                  PIC  X(08).\n\n       FD  TRACK1\n           RECORDING MODE F.\n       01  TRACK1-RECORD.\n           05  TRACK1-REGION           PIC  X(04).\n           05  FILLER                  PIC  X.\n           05  TRACK1-NBR              PIC  XXX.\n           05  FILLER                  PIC  X.\n           05  TRACK1-TIME             PIC  X(06).\n           05  FILLER                  PIC  X(65).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage MIS0655B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-SET-CODE             PIC S9(04)    VALUE ZERO COMP.\n           05  WS-LS-DATA              PIC  X(10)    VALUE SPACE.\n           05  FILLER REDEFINES WS-LS-DATA.\n               10  WS-LS-JOB           PIC  X(08).\n               10  WS-LS-EXTRA         PIC  XX.\n           05  WS-TIME                 PIC  X(05)    VALUE SPACE.\n           05  WS-REGION               PIC  X(04)    VALUE SPACE.\n           05  WS-CICS                 PIC  X        VALUE SPACE.\n           05  WS-CONSOLE              PIC  X        VALUE SPACE.\n           05  WS-MESSAGE              PIC  X(50)    VALUE SPACE.\n           05  WS-STRING               PIC  X(30)    VALUE SPACE.\n           05  WS-REVERSE              PIC  X        VALUE SPACE.\n           05  WS-DDD                  PIC  XXX      VALUE SPACE.\n           05  WS-CALL-STV0400B        PIC  X(08)    VALUE 'STV0400B'.\n           05  WS-LOOP-CODE            PIC  X(04)    VALUE '0000'.\n           05  WS-LOOP-CODE-N REDEFINES WS-LOOP-CODE\n                                       PIC  9(04).\n           05  WS-TRACK1-RCD-CNT       PIC  999      VALUE ZERO.\n           05  WS-STR-POS              PIC  999      VALUE ZERO.\n           05  WS-STR-LEN              PIC  999      VALUE ZERO.\n           05  WS-STR-MAX              PIC  999      VALUE ZERO.\n           05  WS-STR-TOP              PIC  999      VALUE ZERO.\n           05  WS-STR-BOT              PIC  999      VALUE ZERO.\n           05  WS-SEARCH-CNT           PIC  9(05)    VALUE ZERO.\n           05  WS-DOWN-CNT             PIC  99       VALUE ZERO.\n           05  WS-HIGH-NBR             PIC  999      VALUE ZERO.\n           05  WS-HIGH-LONG            PIC  9(05)    VALUE ZERO.\n           05  WS-WAIT-SECONDS         PIC  9(07)    VALUE ZERO.\n           05  WS-WAIT-MINUTES         PIC  9(07)    VALUE ZERO.\n           05  WS-WAIT-REMAIN          PIC  9(05)    VALUE ZERO.\n           05  WS-MSGCNT               PIC  99       VALUE ZERO.\n           05  WS-DELAY                PIC  9(05)    VALUE ZERO.\n           05  WS-TEMP-DELAY           PIC  9(05)    VALUE ZERO.\n           05  WS-INTERVAL             PIC  999      VALUE ZERO.\n           05  WS-1-HMS                PIC  9(06)    VALUE ZERO.\n           05  WS-2-HMS                PIC  9(06)    VALUE ZERO.\n           05  FILLER REDEFINES WS-2-HMS.\n               10  WS-2-HM             PIC  9(04).\n               10  WS-2-S              PIC  99.\n           05  WS-STAGMULT             PIC  999      VALUE ZERO.\n           05  WS-MAX-LOOP             PIC  999      VALUE ZERO.\n           05  WS-ABEND1               PIC  9(04)    VALUE 1.\n           05  WS-ABEND2               PIC  9(04)    VALUE 1.\n           05  WS-ABEND3               PIC  9(04)    VALUE ZERO.\n           05  WS-LOOP-CNT             PIC  9(05)    VALUE ZERO.\n           05  WS-POSTWAIT             PIC  9(05)    VALUE ZERO.\n           05  WS-CURR-TIME            PIC  9(11)    VALUE ZERO.\n           05  FILLER REDEFINES WS-CURR-TIME.\n               10  WS-CURR-CY          PIC  9(04).\n               10  WS-CURR-DDD         PIC  999.\n               10  WS-CURR-HM.\n                   15  WS-CURR-H       PIC  99.\n                   15  WS-CURR-M       PIC  99.\n           05  WS-TIME-RANGE-1         PIC  9(11)    VALUE ZERO.\n           05  WS-TIME-RANGE-2         PIC  9(11)    VALUE ZERO.\n           05  WS-TIME-RANGE-3         PIC  9(11)    VALUE ZERO.\n           05  WS-DIFF-CURR            PIC  9(06)    VALUE ZERO.\n           05  FILLER REDEFINES WS-DIFF-CURR.\n               10  WS-DIFF-CURR-H      PIC  99.\n               10  WS-DIFF-CURR-M      PIC  99.\n               10  WS-DIFF-CURR-S      PIC  99.\n           05  WS-DIFF-TGT             PIC  9(06)    VALUE ZERO.\n           05  FILLER REDEFINES WS-DIFF-TGT.\n               10  WS-DIFF-TGT-H       PIC  99.\n               10  WS-DIFF-TGT-M       PIC  99.\n               10  WS-DIFF-TGT-S       PIC  99.\n           05  WS-DIFF-CURR-SEC        PIC  9(05)    VALUE ZERO.\n           05  WS-DIFF-TGT-SEC         PIC  9(05)    VALUE ZERO.\n           05  WS-DIFF-SEC             PIC  9(05)    VALUE ZERO.\n\n      *    Year 2000 compatible date routine\n       01  WS-STV0400B-FIELDS.\n           05  STV0400B-DATA           PIC  X(10)    VALUE SPACE.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-ERROR      PIC  X(06).\n               10  STV0400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X8        PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAYS       PIC  X(05).\n               10  FILLER              PIC  X(05).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAY        PIC  X(09).\n               10  STV0400B-DAY-NBR    PIC  X.\n           05  STV0400B-DATA2          PIC  X(10)    VALUE SPACE.\n           05  STV0400B-IN             PIC  X(06)    VALUE SPACE.\n           05  STV0400B-OUT            PIC  X(06)    VALUE SPACE.\n\n       01 NEWWAIT-DATA.\n           05  NEWWAIT-LEN             PIC S9999     VALUE +5 COMP.\n           05  NEWWAIT-DELAY           PIC  9(05).\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(05)    VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  WS-FIRST-STR-SW         PIC  X        VALUE SPACE.\n           05  WS-PAUSE-SW             PIC  X        VALUE SPACE.\n           05  WS-TIME-SW              PIC  X        VALUE SPACE.\n           05  WS-TIME-MET-SW          PIC  X        VALUE SPACE.\n           05  WS-FIRST-PAUSE-SW       PIC  X        VALUE SPACE.\n           05  WS-CONDITION-MET-SW     PIC  X        VALUE SPACE.\n           05  WS-TRACK1-SW            PIC  X        VALUE SPACE.\n           05  WS-STR-FND-SW           PIC  X        VALUE SPACE.\n           05  WS-INTERVAL-SW          PIC  X        VALUE SPACE.\n           05  WS-INT-DELAYED-SW       PIC  X        VALUE SPACE.\n           05  WS-COND-TIME-SW         PIC  X        VALUE SPACE.\n           05  WS-COND-STRING-SW       PIC  X        VALUE SPACE.\n           05  WS-COND-PARM01-SW       PIC  X        VALUE SPACE.\n           05  WS-MSG-TIME-SW          PIC  X        VALUE SPACE.\n           05  WS-MSG-STRING-SW        PIC  X        VALUE SPACE.\n           05  WS-MSG-PARM01-SW        PIC  X        VALUE SPACE.\n\n       01  WS-TABLES.\n           05  WS-ALPHA-TABLE          PIC  X(57)    VALUE\n           'A01B02C03D04E05F07G10I12J15K18L20M25O30P35Q40R45S50T55U60'.\n           05  WS-ALPHA-ITEM REDEFINES WS-ALPHA-TABLE\n                                       OCCURS 19 TIMES.\n               10  WS-ALPHA            PIC  X.\n               10  WS-MIN              PIC  99.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MIS0655B END  '.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELD.\n           05  LS-LENGTH               PIC S9(04)    COMP.\n           05  LS-DATA                 PIC  X(10).\n           05  FILLER REDEFINES LS-DATA.\n               10  LS-JOB              PIC  X(08).\n               10  LS-FILLER           PIC  XX.\n\n      /\n       PROCEDURE DIVISION USING LS-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           DISPLAY '    '.\n           DISPLAY '**** MIS0655B wait for CICS or parm entry'.\n           PERFORM 0420-SHOW-CURRENT-TIME.\n           PERFORM 1200-OPEN-PARM01.\n\n           MOVE ZERO                          TO WS-LOOP-CNT.\n           MOVE ZERO                          TO WS-MAX-LOOP.\n           MOVE ZERO                          TO WS-LOOP-CODE-N.\n           MOVE SPACE                         TO WS-CONDITION-MET-SW.\n           MOVE SPACE                         TO WS-INTERVAL-SW.\n           MOVE SPACE                         TO WS-COND-TIME-SW.\n           MOVE SPACE                         TO WS-COND-STRING-SW.\n           MOVE SPACE                         TO WS-COND-PARM01-SW.\n           MOVE SPACE                         TO WS-FIRST-PAUSE-SW.\n           MOVE SPACE                         TO WS-TIME-SW.\n           MOVE SPACE                         TO WS-TIME-MET-SW.\n           MOVE SPACE                         TO WS-STR-FND-SW.\n           MOVE SPACE                         TO WS-STRING.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-GET-PARM.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 1000-LOAD-PARM02.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0500-PROCESS THRU\n                       0500-PROCESS-EXIT.\n\n           IF WS-PAUSE-SW = 'Y'\n               MOVE ZERO                      TO WS-WAIT-REMAIN\n               DIVIDE WS-WAIT-SECONDS BY 60 GIVING WS-WAIT-MINUTES\n                   REMAINDER WS-WAIT-REMAIN\n               DISPLAY '**** Delay min/sec       ' WS-WAIT-MINUTES\n                                               ' ' WS-WAIT-REMAIN\n               IF WS-CONDITION-MET-SW = 'Y'\n                   CONTINUE\n               ELSE\n               IF WS-LS-JOB > SPACE\n                   DISPLAY '**** Job                 ' WS-LS-JOB\n               ELSE\n                   CONTINUE\n           ELSE\n               DISPLAY '**** No delay required'.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 1300-CLOSE-PARM01\n               IF WS-SET-CODE NOT = ZERO\n                   MOVE WS-SET-CODE           TO WS-WAIT-REMAIN\n                   IF WS-SET-CODE > 4\n                       MOVE WS-SET-CODE           TO RETURN-CODE\n                       IF WS-CONSOLE = 'Y'\n                           DISPLAY 'CAWU151I ' WS-LS-JOB\n                                   ' issuing cond code '\n                                    WS-WAIT-REMAIN UPON CONSOLE\n                       ELSE\n                           DISPLAY '**** ' WS-LS-JOB\n                                   '            issuing cond code '\n                                    WS-WAIT-REMAIN\n                   ELSE\n                       MOVE WS-SET-CODE           TO RETURN-CODE\n                       DISPLAY '**** ' WS-LS-JOB\n                               '            issuing cond code '\n                                WS-WAIT-REMAIN\n               ELSE\n                   CONTINUE\n           ELSE\n               DISPLAY '**** MIS0655B cond code ' WS-RETURN-CODE\n                       ' set by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** MIS0655B EOJ encountered '.\n           DISPLAY '    '.\n\n           STOP RUN.\n\n       0400-GET-PARM.\n           IF LS-LENGTH = ZERO\n               DISPLAY '**** Parm length is zero '\n               MOVE +0400                     TO WS-RETURN-CODE\n           ELSE\n           IF LS-LENGTH > LENGTH OF WS-LS-DATA\n               DISPLAY '**** Parm length is excessive '\n               MOVE +0400                     TO WS-RETURN-CODE\n           ELSE\n               MOVE LS-DATA(1: LS-LENGTH)     TO WS-LS-DATA.\n\n       0420-SHOW-CURRENT-TIME.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE 'CYDDD '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           DISPLAY '**** Current            '\n                   ' ' FUNCTION CURRENT-DATE(1: 4)\n                   ' ' STV0400B-DATA(5: 3)\n                   ' ' FUNCTION CURRENT-DATE(9: 2)\n                   ':' FUNCTION CURRENT-DATE(11: 2)\n                   ':' FUNCTION CURRENT-DATE(13: 2).\n           DISPLAY '                         '.\n\n      *---------------------------------------\n      *    WS-CONDITION-MET-SW\n      *      SPACE   first pass - if all conditions met, skip\n      *              0900-FINAL-MESSAGE-AND-WAIT\n      *      Y       conditions met\n      *      N       conditions not met\n      *      E       exit normal condition tests\n      *---------------------------------------\n      *    H = hold (causes job to wait regardless if waiting\n      *              for parm to change to 'N' or 'Y'.  Used to pause\n      *              jobs BEFORE CICS is brought down)\n      *---------------------------------------\n      *    WS-REVERSE = 'Y' will change MIS0655B to wait while\n      *    the parm is 'Y', and continue when it switches to 'N'.\n      *---------------------------------------\n       0500-PROCESS.\n           READ PARM01.\n           IF WS-STAT = 10\n               GO TO 0500-PROCESS-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0655B read error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0500                     TO WS-RETURN-CODE\n               GO TO 0500-PROCESS-EXIT.\n\n           MOVE PARM01-REGION                 TO WS-REGION.\n      *---------------------------------------\n      *    user requested to limit number of delay loops.\n      *    issue cond code WS-LOOP-CODE when reached\n      *    or ABEND program with a divide-by-zero.\n      *---------------------------------------\n           IF WS-MAX-LOOP > ZERO\n               ADD 1                          TO WS-LOOP-CNT\n               IF WS-LOOP-CNT > WS-MAX-LOOP\n                   DISPLAY '**** MIS0655B max loop cnt '\n                       WS-MAX-LOOP ' reached'\n                   IF WS-LOOP-CODE = 'ABND'\n                       DISPLAY '**** MIS0655B abend requested - '\n                       DISPLAY '**** terminating with divide-by-zero'\n                       COMPUTE WS-ABEND1 = WS-ABEND2 / WS-ABEND3\n                       GO TO 0500-PROCESS-EXIT\n                   ELSE\n                       MOVE WS-LOOP-CODE-N    TO WS-RETURN-CODE\n                       GO TO 0500-PROCESS-EXIT.\n\n      *---------------------------------------\n      *    check for time-of-day processing.\n      *    once time-of-day matches, do not check again.\n      *---------------------------------------\n           IF WS-TIME-SW NOT = SPACE\n             IF WS-TIME-MET-SW = SPACE\n                 PERFORM 0600-CHECK-TIME-OF-DAY\n                 IF WS-TIME-MET-SW = SPACE\n                     MOVE 'N'                 TO WS-COND-TIME-SW\n                 ELSE\n                     MOVE 'Y'                 TO WS-COND-TIME-SW\n             ELSE\n                 MOVE 'Y'                     TO WS-COND-TIME-SW.\n\n      *---------------------------------------\n      *    check for string in PARM01.\n      *    once string found, do not check again.\n      *    if string specified, skip remaining PARM01 settings.\n      *---------------------------------------\n           IF WS-STRING NOT = SPACE\n             IF WS-STR-FND-SW = SPACE\n                 MOVE ZERO                    TO WS-SEARCH-CNT\n                 PERFORM 1600-SEARCH-PARM01 THRU\n                         1600-SEARCH-PARM01-EXIT\n                 IF WS-STR-FND-SW = SPACE\n                     MOVE 'N'                 TO WS-COND-STRING-SW\n                 ELSE\n                 IF WS-REVERSE = 'Y'\n                     MOVE 'N'                 TO WS-COND-STRING-SW\n                 ELSE\n                     MOVE 'Y'                 TO WS-COND-STRING-SW\n             ELSE\n                 MOVE 'Y'                     TO WS-COND-STRING-SW\n           ELSE\n           IF PARM01-UP-DOWN = '0'\n               MOVE ZERO                      TO WS-SET-CODE\n               MOVE 'E'                       TO WS-COND-PARM01-SW\n               DISPLAY '**** PARM01 override 0 specified'\n           ELSE\n           IF PARM01-UP-DOWN = '4'\n               MOVE +0004                     TO WS-SET-CODE\n               MOVE 'E'                       TO WS-COND-PARM01-SW\n               DISPLAY '**** PARM01 override 4 specified'\n           ELSE\n           IF PARM01-UP-DOWN = '6'\n               MOVE +0016                     TO WS-SET-CODE\n               MOVE 'E'                       TO WS-COND-PARM01-SW\n               DISPLAY '**** PARM01 override 6 specified'\n           ELSE\n           IF PARM01-UP-DOWN = '8'\n               MOVE +0008                     TO WS-SET-CODE\n               MOVE 'E'                       TO WS-COND-PARM01-SW\n               DISPLAY '**** PARM01 override 8 specified'\n           ELSE\n      *---------------------------------------\n      *    check value of PARM01\n      *---------------------------------------\n           IF PARM01-UP-DOWN = 'H'\n               MOVE 'N'                       TO WS-COND-PARM01-SW\n           ELSE\n           IF PARM01-UP-DOWN = 'Y'\n             IF WS-REVERSE = 'Y'\n                 MOVE 'N'                     TO WS-COND-PARM01-SW\n             ELSE\n                 MOVE 'Y'                     TO WS-COND-PARM01-SW\n           ELSE\n           PERFORM 0610-TEST-INTERVAL\n           IF WS-INTERVAL-SW = 'Y'\n             IF WS-INT-DELAYED-SW = SPACE\n                 PERFORM 0610-DELAY-INTERVAL\n                 IF WS-TEMP-DELAY > ZERO\n                     MOVE 'N'                 TO WS-COND-PARM01-SW\n                 ELSE\n                     MOVE 'Y'                 TO WS-COND-PARM01-SW\n             ELSE\n                 MOVE 'Y'                     TO WS-COND-PARM01-SW\n           ELSE\n           IF WS-REVERSE = 'Y'\n               MOVE 'Y'                       TO WS-COND-PARM01-SW\n           ELSE\n               MOVE 'N'                       TO WS-COND-PARM01-SW.\n\n      *---------------------------------------\n      *    summarize condition switches into WS-CONDITION-MET-SW\n      *    but leave as space if all conditions initially met\n      *---------------------------------------\n           IF WS-COND-PARM01-SW = 'E'\n               GO TO 0500-PROCESS-EXIT.\n\n           IF WS-COND-TIME-SW = SPACE OR 'Y'\n             IF WS-COND-STRING-SW = SPACE OR 'Y'\n               IF WS-COND-PARM01-SW = SPACE OR 'Y'\n                 IF WS-CONDITION-MET-SW = 'N'\n                     MOVE 'Y'                 TO WS-CONDITION-MET-SW\n                 ELSE\n                     CONTINUE\n               ELSE\n                   MOVE 'N'                   TO WS-CONDITION-MET-SW\n             ELSE\n                 MOVE 'N'                     TO WS-CONDITION-MET-SW\n           ELSE\n               MOVE 'N'                       TO WS-CONDITION-MET-SW.\n\n           PERFORM 0605-SHOW-LOOP-STATUS-MSG.\n\n           IF WS-CONDITION-MET-SW = 'Y'\n               PERFORM 0900-FINAL-MESSAGE-AND-WAIT.\n\n           IF WS-CONDITION-MET-SW = 'N'\n               PERFORM 0600-PAUSE\n               GO TO 0500-PROCESS.\n\n       0500-PROCESS-EXIT. EXIT.\n\n      *---------------------------------------\n      *    if a time of day was specified\n      *       if running within 12 hours before time of day\n      *           wait for time of day\n      *       if running within 12 hours after time of day\n      *           flag as able to run\n      *---------------------------------------\n       0600-CHECK-TIME-OF-DAY.\n      *    get current julian day\n           MOVE SPACE                         TO WS-TIME-MET-SW.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE 'CYDDD '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-DATA(1: 4)           TO WS-CURR-CY.\n           MOVE STV0400B-DATA(5: 3)           TO WS-CURR-DDD.\n      *    get current military time\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE 'HMM   '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-DATA(1: 4)           TO WS-CURR-HM.\n           IF WS-CURR-TIME < WS-TIME-RANGE-1\n               PERFORM 0607-CHECK-SECONDS-RANGE1\n           ELSE\n           IF WS-CURR-TIME < WS-TIME-RANGE-2\n               MOVE 'Y'                       TO WS-TIME-MET-SW\n           ELSE\n           IF WS-CURR-TIME < WS-TIME-RANGE-3\n               PERFORM 0607-CHECK-SECONDS-RANGE3\n           ELSE\n               MOVE 'Y'                       TO WS-TIME-MET-SW.\n\n      *---------------------------------------\n      *    If cics is flagged as being down, or a required event\n      *    has not yet occurred, issue a message to the operator\n      *    that the job is waiting.\n      *---------------------------------------\n       0600-PAUSE.\n           MOVE 'N'                           TO WS-CONDITION-MET-SW.\n           ADD 1                              TO WS-DOWN-CNT.\n           IF WS-DOWN-CNT < WS-MSGCNT\n               CONTINUE\n           ELSE\n               MOVE ZERO                      TO WS-DOWN-CNT\n               IF WS-CICS = 'Y'\n                   PERFORM 0605-SHOW-CICS-MSG\n               ELSE\n               IF WS-INTERVAL-SW = 'Y'\n                   AND WS-COND-PARM01-SW = 'N'\n                   PERFORM 0605-SHOW-INT-MSG\n               ELSE\n               IF WS-MESSAGE = SPACE\n                 IF WS-COND-TIME-SW = 'N'\n                   IF WS-LS-JOB > SPACE\n                       PERFORM 0605-SHOW-TIME-MSG\n                   ELSE\n                       CONTINUE\n                 ELSE\n                     CONTINUE\n               ELSE\n                   PERFORM 0605-REPLACE-SYMBOLICS\n                   PERFORM 0605-SHOW-PARM02-MSG.\n\n           PERFORM 0650-DELAY.\n\n           PERFORM 1300-CLOSE-PARM01.\n           PERFORM 1200-OPEN-PARM01.\n\n       0605-SHOW-CICS-MSG.\n           IF WS-CONSOLE = 'Y'\n               DISPLAY 'CAWU151I ' WS-LS-JOB ' waiting for '\n                        WS-REGION UPON CONSOLE\n           ELSE\n               DISPLAY '**** ' WS-LS-JOB\n                       '            waiting for '  WS-REGION.\n\n       0605-SHOW-INT-MSG.\n           IF WS-CONSOLE = 'Y'\n               DISPLAY 'CAWU151I ' WS-LS-JOB ' waiting for '\n                       'interval time' UPON CONSOLE\n           ELSE\n               DISPLAY '**** ' WS-LS-JOB\n                       '            waiting for interval time'.\n\n       0605-SHOW-TIME-MSG.\n           IF WS-CONSOLE = 'Y'\n               DISPLAY 'CAWU151I ' WS-LS-JOB ' waiting for '\n                       WS-TIME UPON CONSOLE\n           ELSE\n               DISPLAY '**** ' WS-LS-JOB\n                       '            waiting for ' WS-TIME.\n\n       0605-SHOW-PARM02-MSG.\n           IF WS-CONSOLE = 'Y'\n               DISPLAY WS-MESSAGE UPON CONSOLE\n           ELSE\n               DISPLAY '         '\n               DISPLAY '**** ' WS-MESSAGE\n               DISPLAY '         '.\n\n       0605-SHOW-LOOP-STATUS-MSG.\n           IF WS-CONDITION-MET-SW = 'N'\n             IF WS-FIRST-PAUSE-SW = SPACE\n                 MOVE 'N'                     TO WS-FIRST-PAUSE-SW\n                 PERFORM 0610-DISPLAY.\n\n           IF WS-TEMP-DELAY > ZERO\n               DISPLAY '**** Delay adjusted to   ' WS-TEMP-DELAY\n                       ' as of ' WS-DIFF-CURR(1: 2)\n                       ':' WS-DIFF-CURR(3: 2) ':' WS-DIFF-CURR(5: 2).\n\n           IF WS-COND-TIME-SW = 'Y'\n             IF WS-MSG-TIME-SW = SPACE\n                 MOVE 'N'                     TO WS-MSG-TIME-SW\n                 IF WS-CONDITION-MET-SW = 'Y' OR SPACE\n                     DISPLAY '**** Specified time ' WS-TIME ' reached'\n                 ELSE\n                 IF WS-COND-STRING-SW = 'N'\n                     DISPLAY '**** Specified time ' WS-TIME ' reached'\n                             ' but still waiting to find PARM01 string'\n                 ELSE\n                     DISPLAY '**** Specified time ' WS-TIME ' reached'\n                             ' but still waiting on PARM01 criteria'.\n           IF WS-COND-STRING-SW = 'Y'\n             IF WS-MSG-STRING-SW = SPACE\n                 MOVE 'N'                     TO WS-MSG-STRING-SW\n                 IF WS-CONDITION-MET-SW = 'Y' OR SPACE\n                     DISPLAY '**** Specified string '\n                             WS-STRING(1: WS-STR-LEN) ' found'\n                 ELSE\n                     DISPLAY '**** Specified string found but still'\n                             ' waiting on time criteria'.\n           IF WS-COND-PARM01-SW = 'Y'\n             IF WS-MSG-PARM01-SW = SPACE\n                 MOVE 'N'                     TO WS-MSG-PARM01-SW\n                 IF WS-CONDITION-MET-SW = 'Y' OR SPACE\n                     DISPLAY '**** Specified PARM01 criteria met'\n                 ELSE\n                     DISPLAY '**** PARM01 criteria met but still'\n                             ' waiting on time criteria'.\n\n      *---------------------------------------\n      *    in message, replace TTTTT with requested time\n      *                replace JJJJJJJJ with job name\n      *---------------------------------------\n       0605-REPLACE-SYMBOLICS.\n           IF WS-TIME = SPACE\n               INSPECT WS-MESSAGE REPLACING ALL 'TTTTT' BY '?????'\n           ELSE\n               INSPECT WS-MESSAGE REPLACING ALL 'TTTTT' BY WS-TIME.\n           IF WS-LS-JOB = SPACE\n               INSPECT WS-MESSAGE REPLACING ALL 'JJJJJJJJ'\n                       BY '????????'\n           ELSE\n               INSPECT WS-MESSAGE REPLACING ALL 'JJJJJJJJ'\n                       BY WS-LS-JOB.\n\n      *---------------------------------------\n      *    the goal here is to have the process continue execution\n      *    at the specified time, not specified time + remaining\n      *    delay time.  ie: continue at the '00' second mark.\n      *---------------------------------------\n       0607-CHECK-SECONDS-RANGE1.\n           IF WS-CURR-TIME(1: 7) = WS-TIME-RANGE-1(1: 7)\n               MOVE WS-TIME-RANGE-1(8: 4)     TO WS-DIFF-TGT(1: 4)\n               PERFORM 0607-CALC-SECONDS-TO-TIME.\n\n       0607-CHECK-SECONDS-RANGE3.\n           IF WS-CURR-TIME(1: 7) = WS-TIME-RANGE-3(1: 7)\n               MOVE WS-TIME-RANGE-3(8: 4)     TO WS-DIFF-TGT(1: 4)\n               PERFORM 0607-CALC-SECONDS-TO-TIME.\n\n       0607-CALC-SECONDS-TO-TIME.\n           MOVE FUNCTION CURRENT-DATE(9: 6)   TO WS-DIFF-CURR.\n           MOVE '00'                          TO WS-DIFF-TGT(5: 2).\n\n      *    target difference 124412  124600 = 60 + 48 = 108 secs\n           COMPUTE WS-DIFF-CURR-SEC = (WS-DIFF-CURR-H * 3600)\n                                    + (WS-DIFF-CURR-M * 60)\n                                    + (WS-DIFF-CURR-S).\n           COMPUTE WS-DIFF-TGT-SEC = (WS-DIFF-TGT-H * 3600)\n                                   + (WS-DIFF-TGT-M * 60).\n           COMPUTE WS-DIFF-SEC = WS-DIFF-TGT-SEC - WS-DIFF-CURR-SEC.\n           IF WS-DIFF-SEC < WS-DELAY\n               MOVE WS-DIFF-SEC               TO WS-TEMP-DELAY.\n\n       0610-DISPLAY.\n           IF WS-CICS = 'Y'\n               DISPLAY '**** CICS delay          ' WS-CICS.\n           DISPLAY '**** Delay seconds       ' WS-DELAY.\n           DISPLAY '**** Delays per message  ' WS-MSGCNT.\n           IF WS-REVERSE = 'Y'\n               DISPLAY '**** Reverse switch      ' WS-REVERSE.\n           IF WS-CICS = 'Y'\n               DISPLAY '**** CICS stagger        ' WS-STAGMULT\n               PERFORM 0700-INCREMENT-TRACKING-NBR.\n           IF WS-STRING NOT = SPACE\n               PERFORM 0610-DISPLAY-STRING.\n\n       0610-DISPLAY-STRING.\n           DISPLAY '**** Search string       ' WS-STRING.\n           IF WS-STR-POS > ZERO\n               DISPLAY '****   at position       ' WS-STR-POS.\n           DISPLAY '****    for length       ' WS-STR-LEN.\n           IF WS-STR-TOP > ZERO\n               DISPLAY '****     from record     ' WS-STR-TOP.\n           IF WS-STR-BOT > ZERO\n               DISPLAY '****       to record     ' WS-STR-BOT.\n\n       0610-TEST-INTERVAL.\n           IF WS-INTERVAL-SW = SPACE\n               PERFORM 0610-READ-INTERVAL-TABLE\n                   VARYING WS-SUB1 FROM 1 BY 1\n                   UNTIL WS-SUB1 > 19.\n\n       0610-READ-INTERVAL-TABLE.\n           IF WS-ALPHA(WS-SUB1) = PARM01-UP-DOWN\n              MOVE WS-MIN(WS-SUB1)            TO WS-INTERVAL\n              MOVE 'Y'                        TO WS-INTERVAL-SW.\n\n      *---------------------------------------\n      *    If interval processing requested via an alphabetic value\n      *    in PARM01, calculate the time such that each job does\n      *    not run closer than ## minutes apart as specified in the\n      *    interval table.\n      *---------------------------------------\n       0610-DELAY-INTERVAL.\n           MOVE FUNCTION CURRENT-DATE(9: 6)   TO WS-DIFF-CURR.\n           MOVE 'Y'                           TO WS-INT-DELAYED-SW.\n           MOVE ZERO                          TO WS-TEMP-DELAY.\n      *    get current time\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE 'HMSM  '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-ERROR                TO WS-1-HMS.\n      *    get julian day\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE 'DDD   '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-DATA(1: 3)           TO WS-DDD.\n           DISPLAY '**** Interval processing '.\n           DISPLAY '****   Julian day        ' WS-DDD.\n           PERFORM 1200-OPEN-TRACK1.\n           IF WS-RETURN-CODE = ZERO\n               MOVE 'Y'                       TO WS-TRACK1-SW\n               PERFORM 0620-READ-TRACK1\n                   UNTIL WS-TRACK1-SW = 'N'\n               PERFORM 1300-CLOSE-TRACK1\n               PERFORM 0620-CHECK-EMPTY-TRACK1.\n\n       0620-READ-TRACK1.\n           READ TRACK1.\n           IF WS-STAT = 10\n               MOVE 'N'                       TO WS-TRACK1-SW\n           ELSE\n           IF TRACK1-REGION = 'WAIT'\n             IF TRACK1-TIME NUMERIC\n                 ADD 1                        TO WS-TRACK1-RCD-CNT\n                 PERFORM 0630-ADVANCE-TIME\n                 DISPLAY '****   Jobtrack time     '\n                         TRACK1-TIME(1: 2) ':' TRACK1-TIME(3: 2)\n                         ':' TRACK1-TIME(5: 2)\n                 DISPLAY '****   Delay interval    ' WS-INTERVAL\n                 MOVE WS-1-HMS(5: 2)          TO WS-2-S\n                 DISPLAY '****   Delay target      '\n                         WS-2-HMS(1: 2) ':' WS-2-HMS(3: 2)\n                         ':' WS-2-HMS(5: 2)\n      *    New day - reset values\n                 IF WS-DDD NOT = TRACK1-NBR\n                     MOVE WS-1-HMS            TO TRACK1-TIME\n                     MOVE WS-DDD              TO TRACK1-NBR\n                     REWRITE TRACK1-RECORD\n                     MOVE 'N'                 TO WS-TRACK1-SW\n                     DISPLAY '****   New day - tracking time reset'\n                 ELSE\n      *    Running after calc'd delay timeout\n                 IF WS-1-HMS > WS-2-HMS\n                     MOVE WS-1-HMS            TO TRACK1-TIME\n                     REWRITE TRACK1-RECORD\n                     MOVE 'N'                 TO WS-TRACK1-SW\n                 ELSE\n      *    Running before calc'd delay timeout\n                     PERFORM 0640-GET-TIME-DIFF\n                     MOVE WS-2-HMS            TO TRACK1-TIME\n                     REWRITE TRACK1-RECORD\n                     MOVE 'N'                 TO WS-TRACK1-SW\n             ELSE\n                 ADD 1                        TO WS-TRACK1-RCD-CNT\n           ELSE\n               ADD 1                          TO WS-TRACK1-RCD-CNT\n               IF TRACK1-REGION = SPACE\n                   MOVE 'WAIT'                TO TRACK1-REGION\n                   MOVE WS-1-HMS              TO TRACK1-TIME\n                   MOVE WS-DDD                TO TRACK1-NBR\n                   MOVE 'N'                   TO WS-TRACK1-SW\n                   REWRITE TRACK1-RECORD\n                   DISPLAY '****   TRACK1 empty - tracking time'\n                           ' initialized'.\n\n       0620-CHECK-EMPTY-TRACK1.\n           IF WS-TRACK1-RCD-CNT = ZERO\n               DISPLAY '****   TRACK1 empty - manually add a single'\n                       ' blank record to TRACK1'.\n\n       0630-ADVANCE-TIME.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE TRACK1-TIME                   TO STV0400B-ERROR.\n           MOVE 'HMSM  '                      TO STV0400B-IN.\n           MOVE 'I00000'                      TO STV0400B-OUT.\n           MOVE WS-INTERVAL                   TO STV0400B-OUT(4: 3).\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-ERROR                TO WS-2-HMS.\n\n       0640-GET-TIME-DIFF.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-1-HMS                      TO STV0400B-ERROR.\n           MOVE WS-2-HMS                      TO STV0400B-DATA2.\n           MOVE 'HMSM  '                      TO STV0400B-IN.\n           MOVE 'MIN   '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-ERROR                TO WS-TEMP-DELAY.\n           IF WS-TEMP-DELAY > 10\n             IF WS-CONSOLE = 'Y'\n                 DISPLAY 'CAWU151I ' WS-LS-JOB ' delaying '\n                         WS-TEMP-DELAY ' minutes ' UPON CONSOLE\n                 COMPUTE WS-TEMP-DELAY = WS-TEMP-DELAY * 60\n             ELSE\n                 DISPLAY '****   ' WS-LS-JOB '          delaying '\n                         WS-TEMP-DELAY ' minutes '\n                 COMPUTE WS-TEMP-DELAY = WS-TEMP-DELAY * 60\n           ELSE\n           IF WS-TEMP-DELAY > ZERO\n               COMPUTE WS-TEMP-DELAY = WS-TEMP-DELAY * 60.\n\n       0650-DELAY.\n           IF WS-TEMP-DELAY > ZERO\n               MOVE WS-TEMP-DELAY             TO NEWWAIT-DELAY\n               CALL 'NEWWAIT' USING NEWWAIT-DATA\n               ADD WS-TEMP-DELAY              TO WS-WAIT-SECONDS\n               MOVE ZERO                      TO WS-TEMP-DELAY\n           ELSE\n               MOVE WS-DELAY                  TO NEWWAIT-DELAY\n               CALL 'NEWWAIT' USING NEWWAIT-DATA\n               ADD WS-DELAY                   TO WS-WAIT-SECONDS.\n           MOVE 'Y'                           TO WS-PAUSE-SW.\n\n      *---------------------------------------\n      *    Increment the high-nbr.  This is used when calculating\n      *    a delay time after cics comes back up, so that all\n      *    jobs do not run at once.\n      *---------------------------------------\n       0700-INCREMENT-TRACKING-NBR.\n           MOVE ZERO                          TO WS-HIGH-NBR.\n           PERFORM 1200-OPEN-TRACK1.\n           IF WS-RETURN-CODE = ZERO\n               MOVE 'Y'                       TO WS-TRACK1-SW\n               PERFORM 0800-READ-TRACK1\n                   UNTIL WS-TRACK1-SW = 'N'\n               PERFORM 1300-CLOSE-TRACK1.\n\n       0800-READ-TRACK1.\n           READ TRACK1.\n           IF WS-STAT = 10\n               MOVE 'N'                       TO WS-TRACK1-SW\n           ELSE\n           IF TRACK1-REGION = WS-REGION\n             IF TRACK1-NBR NUMERIC\n                 MOVE TRACK1-NBR              TO WS-HIGH-NBR\n                 ADD 1                        TO WS-HIGH-NBR\n                 MOVE WS-HIGH-NBR             TO TRACK1-NBR\n                 REWRITE TRACK1-RECORD\n                 MOVE 'N'                     TO WS-TRACK1-SW\n                 DISPLAY '**** Restart sequence    ' WS-HIGH-NBR.\n\n      *---------------------------------------\n      *    let the operator know that the job will continue\n      *    (once the job knows that it can)\n      *\n      *    calculate total time program was in wait state\n      *    wait 'postwait' time if specified\n      *---------------------------------------\n       0900-FINAL-MESSAGE-AND-WAIT.\n           IF WS-CICS = 'N'\n               MOVE WS-POSTWAIT               TO NEWWAIT-DELAY\n           ELSE\n           IF WS-HIGH-NBR = ZERO\n               MOVE WS-DELAY                  TO NEWWAIT-DELAY\n           ELSE\n               COMPUTE WS-HIGH-LONG = WS-HIGH-NBR * WS-STAGMULT\n               MOVE WS-HIGH-LONG              TO NEWWAIT-DELAY.\n           IF NEWWAIT-DELAY > 120\n               DIVIDE NEWWAIT-DELAY BY 60 GIVING WS-WAIT-REMAIN\n               IF WS-CONSOLE = 'Y'\n                   DISPLAY 'CAWU152I ' WS-LS-JOB ' will continue in '\n                            WS-WAIT-REMAIN ' minutes' UPON CONSOLE\n               ELSE\n                   DISPLAY '**** ' WS-LS-JOB\n                           '            will continue in '\n                           WS-WAIT-REMAIN ' minutes'\n           ELSE\n           IF WS-LS-JOB > SPACE\n             IF NEWWAIT-DELAY > ZERO\n               IF WS-CONSOLE = 'Y'\n                   DISPLAY 'CAWU151I ' WS-LS-JOB ' continuing '\n                           'after ' NEWWAIT-DELAY ' seconds'\n                           UPON CONSOLE\n               ELSE\n                   DISPLAY '**** ' WS-LS-JOB\n                           '            continuing '\n                           'after ' NEWWAIT-DELAY ' seconds'\n             ELSE\n             IF WS-CONSOLE = 'Y'\n                 DISPLAY 'CAWU151I ' WS-LS-JOB ' continuing '\n                     UPON CONSOLE\n             ELSE\n                 DISPLAY '**** ' WS-LS-JOB '            continuing '.\n\n           IF NEWWAIT-DELAY > ZERO\n               CALL 'NEWWAIT' USING NEWWAIT-DATA.\n           ADD NEWWAIT-DELAY                  TO WS-WAIT-SECONDS.\n\n      *---------------------------------------\n      *    Load PARM02 (whose values are used only\n      *    when waiting is required)\n      *---------------------------------------\n       1000-LOAD-PARM02.\n           PERFORM 1200-OPEN-PARM02.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 1400-LOAD-PARM02 THRU\n                       1400-LOAD-PARM02-EXIT\n               PERFORM 1400-FINISH-PARM02-VALUES\n               PERFORM 1300-CLOSE-PARM02.\n\n       1200-OPEN-PARM01.\n           OPEN INPUT PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0655B open error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       1200-OPEN-PARM02.\n           OPEN INPUT PARM02.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0655B open error on PARM02'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       1200-OPEN-TRACK1.\n           OPEN I-O   TRACK1.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0655B open error on TRACK1'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0201                     TO WS-RETURN-CODE.\n\n       1300-CLOSE-TRACK1.\n           CLOSE TRACK1.\n\n       1300-CLOSE-PARM01.\n           CLOSE PARM01.\n\n       1300-CLOSE-PARM02.\n           CLOSE PARM02.\n\n       1400-LOAD-PARM02.\n           READ PARM02.\n           IF WS-STAT = 10\n               GO TO 1400-LOAD-PARM02-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0655B read error on PARM02'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +1400                     TO WS-RETURN-CODE\n               GO TO 1400-LOAD-PARM02-EXIT.\n\n           IF PARM02-DOCU = '*'\n               GO TO 1400-LOAD-PARM02.\n\n           INSPECT PARM02-CMD\n               CONVERTING 'abcdefghijklmnopqrstuvwxyz' TO\n                          'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n           IF PARM02-CMD = 'CICS'\n             IF PARM02-01-VALUE = 'Y' OR 'N' OR 'y' OR 'n'\n                 MOVE PARM02-01-VALUE         TO WS-CICS\n             ELSE\n                 MOVE 'Y'                     TO WS-CICS.\n           IF PARM02-CMD = 'MSGCNT'\n             IF PARM02-02-VALUE NUMERIC\n                 MOVE PARM02-02-VALUE         TO WS-MSGCNT\n             ELSE\n                 MOVE 30                      TO WS-MSGCNT.\n           IF PARM02-CMD = 'DELAY'\n             IF PARM02-05-VALUE NUMERIC\n                 MOVE PARM02-05-VALUE         TO WS-DELAY\n             ELSE\n                 MOVE 00120                   TO WS-DELAY.\n           IF PARM02-CMD = 'MESSAGE'\n               MOVE PARM02-VALUE              TO WS-MESSAGE.\n           IF PARM02-CMD = 'STAGMULT'\n             IF PARM02-03-VALUE NUMERIC\n                 MOVE PARM02-03-VALUE         TO WS-STAGMULT\n             ELSE\n                 MOVE 400                     TO WS-STAGMULT.\n           IF PARM02-CMD = 'MAXLOOP'\n             IF PARM02-03-VALUE NUMERIC\n                 MOVE PARM02-03-VALUE         TO WS-MAX-LOOP\n             ELSE\n                 MOVE ZERO                    TO WS-MAX-LOOP.\n           IF PARM02-CMD = 'MAXLOOPCODE'\n             IF PARM02-04-VALUE NUMERIC\n                 MOVE PARM02-04-VALUE         TO WS-LOOP-CODE-N\n                 IF WS-LOOP-CODE-N > 4095\n                     DISPLAY '**** Maxloopcode > 4095 '\n                     MOVE 0008                TO WS-LOOP-CODE-N\n                 ELSE\n                     CONTINUE\n             ELSE\n             IF PARM02-04-VALUE = 'ABND'\n                 MOVE PARM02-04-VALUE         TO WS-LOOP-CODE\n             ELSE\n                 MOVE ZERO                    TO WS-LOOP-CODE-N.\n           IF PARM02-CMD = 'POSTWAIT'\n             IF PARM02-05-VALUE NUMERIC\n                 MOVE PARM02-05-VALUE         TO WS-POSTWAIT\n             ELSE\n                 MOVE ZERO                    TO WS-POSTWAIT.\n           IF PARM02-CMD = 'REVERSE'\n             IF PARM02-01-VALUE = 'Y' OR 'y'\n                 MOVE 'Y'                     TO WS-REVERSE\n             ELSE\n                 MOVE SPACE                   TO WS-REVERSE.\n           IF PARM02-CMD = 'TIME'\n               MOVE SPACE                     TO WS-TIME-SW\n               IF PARM02-05-VALUE = SPACE\n                   CONTINUE\n               ELSE\n                   PERFORM 1500-DETERMINE-TIME-RANGE THRU\n                           1500-TIME-RANGE-EXIT.\n           IF PARM02-CMD = 'STRING'\n             IF PARM02-03-VALUE NUMERIC\n                 AND PARM02-03-5X7 NUMERIC\n                 AND PARM02-03-9X11 NUMERIC\n                 MOVE PARM02-03-VALUE         TO WS-STR-POS\n                 MOVE PARM02-03-5X7           TO WS-STR-TOP\n                 MOVE PARM02-03-9X11          TO WS-STR-BOT\n                 IF WS-STR-POS > 80\n                     DISPLAY '**** String position > 80 ...'\n                     DISPLAY '**** ignoring string statement'\n                     MOVE SPACE               TO WS-STRING\n                 ELSE\n                     MOVE PARM02-STRING       TO WS-STRING.\n           IF PARM02-CMD = 'CONSOLE'\n             IF PARM02-01-VALUE = 'Y' OR 'N' OR 'y' OR 'n'\n                 MOVE PARM02-01-VALUE         TO WS-CONSOLE\n             ELSE\n                 MOVE 'Y'                     TO WS-CONSOLE.\n\n           GO TO 1400-LOAD-PARM02.\n\n       1400-LOAD-PARM02-EXIT. EXIT.\n\n       1400-FINISH-PARM02-VALUES.\n           IF WS-DELAY < 20\n               MOVE 20                        TO WS-DELAY.\n           IF WS-STAGMULT < 60\n               MOVE 60                        TO WS-STAGMULT.\n           INSPECT WS-CICS\n               CONVERTING 'ny' TO 'NY'.\n           INSPECT WS-CONSOLE\n               CONVERTING 'ny' TO 'NY'.\n           MOVE WS-MSGCNT                     TO WS-DOWN-CNT.\n\n       1500-DETERMINE-TIME-RANGE.\n      *    get current julian day\n           MOVE PARM02-05-VALUE               TO WS-TIME.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE 'CYDDD '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-DATA(1: 4)           TO WS-CURR-CY.\n           MOVE STV0400B-DATA(5: 3)           TO WS-CURR-DDD.\n      *    capture hour from static parm\n           IF PARM02-05-VALUE(1: 2) NUMERIC\n               MOVE PARM02-05-VALUE(1: 2)     TO WS-CURR-H\n               IF WS-CURR-H > 23\n                   DISPLAY '**** MIS0655B hour > 23 '\n                   MOVE +1500                 TO WS-RETURN-CODE\n                   GO TO 1500-TIME-RANGE-EXIT\n               ELSE\n                   CONTINUE\n           ELSE\n               DISPLAY '**** MIS0655B time not numeric '\n               MOVE +1500                     TO WS-RETURN-CODE\n               GO TO 1500-TIME-RANGE-EXIT.\n      *    capture minute from static parm\n           IF PARM02-05-VALUE(4: 2) NUMERIC\n               MOVE PARM02-05-VALUE(4: 2)     TO WS-CURR-M\n               IF WS-CURR-M > 59\n                   DISPLAY '**** MIS0655B minute > 59 '\n                   MOVE +1500                 TO WS-RETURN-CODE\n                   GO TO 1500-TIME-RANGE-EXIT\n               ELSE\n                   CONTINUE\n           ELSE\n               DISPLAY '**** MIS0655B time not numeric '\n               MOVE +1500                     TO WS-RETURN-CODE\n               GO TO 1500-TIME-RANGE-EXIT.\n           MOVE WS-CURR-TIME                  TO WS-TIME-RANGE-1.\n           PERFORM 1500-FIND-12-HOURS-FORWARD.\n           MOVE WS-CURR-TIME                  TO WS-TIME-RANGE-2.\n           PERFORM 1500-FIND-12-HOURS-FORWARD.\n           MOVE WS-CURR-TIME                  TO WS-TIME-RANGE-3.\n           MOVE 'Y'                           TO WS-TIME-SW.\n           DISPLAY '                         cy   ddd time'.\n           DISPLAY '**** Wait if before      ' WS-TIME-RANGE-1(1: 4)\n                 ' ' WS-TIME-RANGE-1(5: 3) ' ' WS-TIME-RANGE-1(8: 2)\n                 ':' WS-TIME-RANGE-1(10: 2).\n           DISPLAY '**** Run if before       ' WS-TIME-RANGE-2(1: 4)\n                 ' ' WS-TIME-RANGE-2(5: 3) ' ' WS-TIME-RANGE-2(8: 2)\n                 ':' WS-TIME-RANGE-2(10: 2).\n           DISPLAY '**** Wait if before      ' WS-TIME-RANGE-3(1: 4)\n                 ' ' WS-TIME-RANGE-3(5: 3) ' ' WS-TIME-RANGE-3(8: 2)\n                 ':' WS-TIME-RANGE-3(10: 2).\n\n       1500-TIME-RANGE-EXIT. EXIT.\n\n      *---------------------------------------\n      *    calculate time 12 hours forward.\n      *    returns WS-CURR-TIME with julian day and hour/minute.\n      *---------------------------------------\n       1500-FIND-12-HOURS-FORWARD.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-CURR-HM                    TO STV0400B-DATA(1: 4).\n           MOVE '00'                          TO STV0400B-DATA(5: 2).\n           MOVE 'HMSM  '                      TO STV0400B-IN.\n           MOVE 'I00720'                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-DATA(1: 4)           TO WS-CURR-HM.\n           IF STV0400B-DATA(7: 2) = '01'\n               MOVE SPACE                     TO WS-STV0400B-FIELDS\n               MOVE '+00001'                  TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               MOVE 'CYMD  '                  TO STV0400B-IN\n               MOVE 'CYDDD '                  TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               MOVE STV0400B-DATA(1: 4)       TO WS-CURR-CY\n               MOVE STV0400B-DATA(5: 3)       TO WS-CURR-DDD.\n\n      *---------------------------------------\n      *    search PARM01 for a string - read all parm01\n      *    records to eof.\n      *---------------------------------------\n       1600-SEARCH-PARM01.\n           ADD 1                              TO WS-SEARCH-CNT.\n           MOVE SPACE                         TO WS-STR-FND-SW.\n           IF WS-FIRST-STR-SW = SPACE\n               MOVE 'N'                       TO WS-FIRST-STR-SW\n               PERFORM 1600-FIND-TRAILING-SPACES\n               COMPUTE WS-STR-MAX = 81 - WS-STR-LEN\n               IF WS-STR-POS + WS-STR-LEN > 81\n                   DISPLAY '**** String position + length goes past'\n                           ' end of record'\n                   DISPLAY '**** ignoring string statement'\n                   MOVE SPACE                 TO WS-STRING\n                   GO TO 1600-SEARCH-PARM01-EXIT.\n\n           IF WS-STR-TOP = ZERO\n               AND WS-STR-BOT = ZERO\n               PERFORM 1600-SEARCH-RCD\n           ELSE\n           IF WS-STR-TOP = ZERO\n             IF WS-SEARCH-CNT > WS-STR-BOT\n                 CONTINUE\n             ELSE\n                 PERFORM 1600-SEARCH-RCD\n           ELSE\n           IF WS-STR-BOT = ZERO\n             IF WS-SEARCH-CNT < WS-STR-TOP\n                 CONTINUE\n             ELSE\n                 PERFORM 1600-SEARCH-RCD\n           ELSE\n           IF WS-SEARCH-CNT < WS-STR-TOP\n               OR WS-SEARCH-CNT > WS-STR-BOT\n               CONTINUE\n           ELSE\n               PERFORM 1600-SEARCH-RCD.\n\n           IF WS-STR-FND-SW = SPACE\n               READ PARM01\n               IF WS-STAT = ZERO\n                   GO TO 1600-SEARCH-PARM01.\n\n       1600-SEARCH-PARM01-EXIT. EXIT.\n\n       1600-SEARCH-RCD.\n           IF WS-STR-POS = ZERO\n               PERFORM VARYING WS-SUB1 FROM 1 BY 1\n                   UNTIL WS-SUB1 > WS-STR-MAX\n                   IF PARM01-RECORD(WS-SUB1: WS-STR-LEN)\n                                          = WS-STRING(1: WS-STR-LEN)\n                       MOVE 'Y'               TO WS-STR-FND-SW\n                   END-IF\n               END-PERFORM\n           ELSE\n           IF PARM01-RECORD(WS-STR-POS: WS-STR-LEN)\n                                          = WS-STRING(1: WS-STR-LEN)\n               MOVE 'Y'                       TO WS-STR-FND-SW.\n\n       1600-FIND-TRAILING-SPACES.\n           PERFORM VARYING WS-SUB1 FROM 30 BY -1\n               UNTIL WS-SUB1 < 1\n               IF WS-STRING(WS-SUB1: 1) NOT = SPACE\n                   MOVE WS-SUB1               TO WS-STR-LEN\n                   MOVE ZERO                  TO WS-SUB1\n               END-IF\n           END-PERFORM.\n\n      ************************************ END MIS0655B\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MIS0660B": {"ttr": 13827, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x10\\x01\\x19\\x07/\\x01\\x193o\\x12E\\x01(\\x01%\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-12-02T12:45:10", "lines": 296, "newlines": 293, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  MIS0660B: change offset value'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MIS0660B.\n      ******************************************************************\n      *@@@ II change offset value for j-jobs\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ******************************************************************\n      * Date written: 05/03/2000\n      * Author      : Jim Iannone\n      *\n      *               SEE OFFSET DOCUMENTATION\n      *\n      *               ALLOW A GLOBAL OVERRIDE TO THE CURRENT J-JOB\n      *               PROCESSING DATE.  UPDATE THE STATIC PARM USED\n      *               FOR THIS PURPOSE\n      *\n      *               J-JOBS WILL CHECK THIS OFFSET VALUE AND ADJUST\n      *               THE CURRENT PROCESSING DATE ACCORDINGLY.\n      *\n      *               SET A SWITCH WHEN THE POST-DAYEND JOBS START,\n      *               AND ALSO AT THE END OF MID99.\n      *               IF SWITCH ON WHEN MID99 RUNS, AUTOMATICALLY\n      *               SET OFFSET TO -00001.\n      *               RESET SWITCH AT THE END OF MID98.\n      *\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT OFFSET               ASSIGN TO OFFSET\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT OFFCHK               ASSIGN TO OFFCHK\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  OFFSET\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  OFFSET-RECORD.\n           05  OFFSET-DOCU             PIC  X.\n           05  OFFSET-OFFSET.\n               10  OFFSET-PAST-FUT     PIC  X.\n               10  OFFSET-AMOUNT       PIC  X(05).\n           05  FILLER                  PIC  X(10).\n           05  OFFSET-BATCH-SW         PIC  X.\n           05  FILLER                  PIC  X(62).\n\n       FD  OFFCHK\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  OFFCHK-RECORD.\n           05  OFFCHK-DOCU             PIC  X.\n           05  OFFCHK-OFFCHK.\n               10  OFFCHK-PAST-FUT     PIC  X.\n               10  OFFCHK-AMOUNT       PIC  X(05).\n           05  FILLER                  PIC  X(10).\n           05  OFFCHK-BATCH-SW         PIC  X.\n           05  FILLER                  PIC  X(62).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage MIS0660B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n\n       01  WS-OFFSET-FIELD.\n           05  WS-OFFSET               PIC  X(06)    VALUE SPACE.\n           05  FILLER REDEFINES WS-OFFSET.\n               10  WS-PAST-FUT         PIC  X.\n               10  WS-AMOUNT           PIC  X(05).\n           05  WS-FILLER               PIC  X(200)   VALUE SPACE.\n           05  WS-OFFCHK               PIC  X(06)    VALUE SPACE.\n           05  WS-BATCH-SW             PIC  X        VALUE SPACE.\n\n      *    Year 2000 compatible date routine\n       01  WS-STV0400B-FIELDS.\n           05  STV0400B-DATA           PIC  X(10)   VALUE SPACE.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-ERROR      PIC  X(06).\n               10  STV0400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-CYMD       PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAYS       PIC  X(05).\n               10  FILLER              PIC  X(05).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAY        PIC  X(09).\n               10  STV0400B-DAY-NBR    PIC  X.\n           05  STV0400B-DATA2          PIC  X(10)   VALUE SPACE.\n           05  STV0400B-IN             PIC  X(06)   VALUE SPACE.\n           05  STV0400B-OUT            PIC  X(06)   VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MIS0660B END  '.\n\n       LINKAGE SECTION.\n\n       01  PARM-FIELD.\n           05  PARM-LENGTH             PIC S9(04)    COMP.\n           05  PARM-OFFSET-SW          PIC  X.\n           05  PARM-FILLER             PIC  X(09).\n\n      /\n       PROCEDURE DIVISION USING PARM-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           DISPLAY '     '.\n           DISPLAY '**** MIS0660B change offset value '.\n           PERFORM 0200-OPEN-FILES.\n           MOVE '-00000'                      TO WS-OFFSET.\n           MOVE SPACE                         TO WS-BATCH-SW.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 1100-CHECK-OFFCHK THRU\n                       1100-CHECK-OFFCHK-EXIT\n               PERFORM 0400-PROCESS THRU\n                       0400-PROCESS-EXIT.\n\n           IF WS-PAST-FUT = '-' OR '+'\n             IF WS-AMOUNT NUMERIC\n               IF WS-OFFSET NOT = '-00000'\n                   DISPLAY '---> Warning - dates offset by '\n                            WS-OFFSET ' days '\n                   DISPLAY '--> Warning - dates offset by '\n                            WS-OFFSET ' days ' UPON CONSOLE.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** MIS0660B cond code ' WS-RETURN-CODE\n                       ' sent by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** MIS0660B EOJ encountered '.\n           DISPLAY '     '.\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN I-O   OFFSET.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0660B open error on OFFSET'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN INPUT OFFCHK.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0660B open error on OFFCHK'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0201                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE OFFCHK.\n           CLOSE OFFSET.\n\n      *---------------------------------------\n      *    accept offset override from console\n      *\n      *    send different message number for CA-Opera,\n      *    which responds 'SKIP' or 'RESET' automatically,\n      *    if the operator has not manually responded.\n      *\n      *    PARM-OFFSET-SW   S             = SET\n      *                     anything else = RESET\n      *+--------------------------------------\n       0400-PROCESS.\n           IF PARM-OFFSET-SW = 'S'\n             IF WS-BATCH-SW = 'Y'\n                 MOVE '-00001'                TO WS-OFFSET\n                 GO TO 0400-SKIP-MSG\n             ELSE\n                 DISPLAY 'CAWU180I  Enter J-JOB date offset: '\n                          UPON CONSOLE\n                 DISPLAY 'CAWU182I  SKIP or -##### or Y=yesterday '\n                          UPON CONSOLE\n           ELSE\n               DISPLAY 'CAWU181I  Enter J-JOB date offset: '\n                        UPON CONSOLE\n               DISPLAY 'CAWU183I  RESET or -##### or SKIP '\n                        UPON CONSOLE.\n           ACCEPT WS-OFFSET FROM CONSOLE.\n           IF WS-OFFSET = 'Y     '\n               MOVE '-00001'                  TO WS-OFFSET.\n\n       0400-SKIP-MSG.\n           IF WS-PAST-FUT = '-' OR '+'\n             IF WS-AMOUNT NUMERIC\n               IF WS-OFFSET = WS-OFFCHK\n                   CONTINUE\n               ELSE\n                   PERFORM 1200-CHANGE-OFFSET THRU\n                           1200-CHANGE-OFFSET-EXIT\n             ELSE\n                 DISPLAY 'CAWU151I Offset not valid - reenter'\n                          UPON CONSOLE\n                 GO TO 0400-PROCESS\n           ELSE\n           IF WS-OFFSET = 'RESET'\n               MOVE '-00000'                  TO WS-OFFSET\n               IF WS-OFFSET = WS-OFFCHK\n                   CONTINUE\n               ELSE\n                   PERFORM 1200-CHANGE-OFFSET THRU\n                           1200-CHANGE-OFFSET-EXIT\n                   DISPLAY 'CAWU151I offset reset to -00000'\n                            UPON CONSOLE\n           ELSE\n           IF WS-OFFSET = 'SKIP'\n               DISPLAY 'CAWU151I offset skipped'\n                        UPON CONSOLE.\n\n       0400-PROCESS-EXIT. EXIT.\n\n      *---------------------------------------\n      *    check existing offset in static parm\n      *+--------------------------------------\n       1100-CHECK-OFFCHK.\n           READ OFFCHK.\n           IF WS-STAT = 10\n               GO TO 1100-CHECK-OFFCHK-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0660B read error on OFFCHK'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +1100                     TO WS-RETURN-CODE\n               GO TO 1100-CHECK-OFFCHK-EXIT.\n\n           IF OFFCHK-DOCU = '*'\n               GO TO 1100-CHECK-OFFCHK.\n           IF OFFCHK-AMOUNT NUMERIC\n               MOVE OFFCHK-OFFCHK             TO WS-OFFCHK\n               MOVE OFFCHK-BATCH-SW           TO WS-BATCH-SW\n           ELSE\n               DISPLAY '**** OFFCHK amount not numeric '\n               MOVE +1101                     TO WS-RETURN-CODE\n               GO TO 1100-CHECK-OFFCHK-EXIT.\n\n       1100-CHECK-OFFCHK-EXIT. EXIT.\n\n      *---------------------------------------\n      *    change offset in static parm\n      *+--------------------------------------\n       1200-CHANGE-OFFSET.\n           READ OFFSET.\n           IF WS-STAT = 10\n               GO TO 1200-CHANGE-OFFSET-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0660B read error on OFFSET'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +1200                     TO WS-RETURN-CODE\n               GO TO 1200-CHANGE-OFFSET-EXIT.\n\n           IF OFFSET-DOCU = '*'\n               GO TO 1200-CHANGE-OFFSET.\n           IF OFFSET-AMOUNT NUMERIC\n               MOVE WS-OFFSET                 TO OFFSET-OFFSET\n               PERFORM 2000-REWRITE-OFFSET\n           ELSE\n               DISPLAY '**** Offset amount not numeric '\n               MOVE +1201                     TO WS-RETURN-CODE\n               GO TO 1200-CHANGE-OFFSET-EXIT.\n           IF WS-BATCH-SW = 'Y'\n               DISPLAY 'CAWU157I parm MIS10010 date offset flag = Y  '\n                        UPON CONSOLE.\n\n       1200-CHANGE-OFFSET-EXIT. EXIT.\n\n       2000-REWRITE-OFFSET.\n           REWRITE OFFSET-RECORD.\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0660B rewrite error on OFFSET'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +2000                     TO WS-RETURN-CODE.\n\n      ************************************ END MIS0660B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS0685B": {"ttr": 13833, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00)\\x01\\x19\\x05\\x9f\\x01\\x193o\\x12I\\x04\\xd8\\x04\\xd7\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2019-02-28T00:00:00", "modifydate": "2019-12-02T12:49:29", "lines": 1240, "newlines": 1239, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  MIS0685B: send messages/set codes '.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MIS0685B.\n      **********************************************************CX003B\n      *@@@ C3 send messages/set condition codes\n      ****************************************************************\n      * Date written: 01/06/2000\n      * Author      : Jim Iannone\n      *               loop through static parm and see if dates\n      *               match.  if so, send associated message via TSO,\n      *               or set a condition code.\n      *\n      * obtain system date and adjust by offset\n      * loop through parm file\n      *   gather userid's\n      *   calculate adjustment date from system date\n      *     adjustment allows you to specify a particular date in\n      *     the parm (ex:  **** 06 **  Fathers Day  3RD 7) but be\n      *     notified on a different day.\n      *   if cycle specified, perform cycle/duration processing\n      *   if cycle not specified, perform duration processing\n      *   if match, send message/set condition code\n      *\n      *--------------------------------------------------------------\n      * STATIC PARM LAYOUT\n      *--------------------------------------------------------------\n      *\n      * * = documentation line\n      * C = combined scheduling (Siemens weekly/monthly processing)\n      *     skip if day before/after the 1st\n      * S = skip remaining lines when match occurs\n      * T = temporary; commented out once match occurs\n      *\n      * USERIDs on separate line above message, separated by\n      *    one space.  leave remainder of line = spaces. (12 max).\n      *\n      * YYYY : year or '****' for any year\n      *      MM : month or '**' for any month\n      *         DD : day or '**' for any day\n      *\n      * CMFE00 -01 : 'CMF' can be used in place of a hardcoded date to\n      *              automatically derive a date.\n      *              note: CMFxxx must derive a cymd date.\n      *              example:  'CMFE00 -01' = second to last day of\n      *                         current month.  see stv0400b for\n      *                         examples.\n      * QFF000 +02 : calculate beginning quarter dates\n      * QFF000E+00 : calculate ending quarter dates\n      *\n      * DURATION :  00 = set/send on match date\n      *             ## = set/send for ## days\n      *\n      *             Note: duration always includes match date.\n      *             Duration '03' means match date and two more days,\n      *             not match date + 3 days\n      *\n      * ADJUSTMENT:  <## = adjust match date back ## days\n      *              >## = adjust match date forward ## days\n      *\n      * CYCLE DAYS : repeat every ### days ie: biweekly = 014 days\n      *\n      * SEND DAY : space = send any day\n      *     mon=1..sun=7 = send, or set code, if day matches entry\n      *\n      *     or  '1ST 456'    = first thurs, fri, sat of the month\n      *         '2ND 1  '    = second monday of the month\n      *         '3RD 34 '    = third wednesday or thursday of the month\n      *         '4TH 2  '    = fourth tuesday of the month\n      *         '5TH 1  '    = fifth monday of the month\n      *         'LST 1  '    = last monday of the month\n      *\n      * MESSAGE (40 bytes max, or 30 bytes max if prefix date = Y)\n      *\n      *     or RETURN CODE\n      *        'CCM ####' set rc when dates match\n      *        'CCN ####' set when dates do not match\n      *        'CTM #### HHMM HHMM' set when within a time range\n      *     or ABEND\n      *        'ABM     ' abend when dates match\n      *        'ABN     ' abend when dates do not match\n      *--------------------------------------------------------------\n      * UPDATED: 02/27/2001\n      *          allow entry of sms schedules such as:\n      *          **** ** 21 00<02+0-1+5+4+3+2+1 CDREORG SCHEDULED\n      *                          --------------\n      *                          Sun........Sat\n      *\n      *          this says: if the 21st falls on:\n      *\n      *          Sunday   add +0 days derive Sunday - same day\n      *          Monday   add -1 days derive Sunday - prev day\n      *          Tuesday  add +5 days derive Sunday - future day\n      *          etc\n      *--------------------------------------------------------------\n      * DATE CHANGED: 08/17/2007\n      * PROGRAMMER  : JIM IANNONE\n      *               generate abend on request\n      *****************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT OUTNOT               ASSIGN TO OUTNOT\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT OFFSET               ASSIGN TO OFFSET\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  OUTNOT\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  OUTNOT-RECORD.\n           05  OUTNOT-SE               PIC  XXX.\n           05  OUTNOT-QUOTE1           PIC  X.\n           05  OUTNOT-FILL1            PIC  X.\n           05  OUTNOT-MSG              PIC  X(40).\n           05  OUTNOT-FILL2            PIC  X.\n           05  OUTNOT-QUOTE2           PIC  X.\n           05  OUTNOT-REMAIN           PIC  X(33).\n\n       FD  PARM01\n           RECORDING MODE F\n           BLOCK CONTAINS 0.\n       01  PARM01-RECORD.\n           05  PARM01-FLAG             PIC  X.\n           05  PARM01-USERIDS          PIC  X(71).\n           05  FILLER REDEFINES PARM01-USERIDS.\n               10  PARM01-DATA         PIC  X(10).\n               10  FILLER REDEFINES PARM01-DATA.\n                   15  PARM01-CY       PIC  X(04).\n                   15  FILLER          PIC  X.\n                   15  PARM01-M        PIC  XX.\n                   15  FILLER          PIC  X.\n                   15  PARM01-D        PIC  XX.\n               10  FILLER REDEFINES PARM01-DATA.\n                   15  PARM01-CMF      PIC  XXX.\n                   15  FILLER          PIC  X(07).\n               10  FILLER              PIC  X.\n               10  PARM01-DURATION     PIC  XX.\n               10  PARM01-ADJ-FLAG     PIC  X.\n               10  PARM01-ADJUST       PIC  XX.\n               10  FILLER              PIC  X.\n               10  PARM01-CYCLE        PIC  XXX.\n               10  FILLER              PIC  X.\n               10  PARM01-SEL-DAYS     PIC  X(07).\n               10  FILLER              PIC  X.\n               10  PARM01-PREFIX       PIC  X.\n               10  FILLER              PIC  X.\n               10  PARM01-MESSAGE      PIC  X(40).\n               10  FILLER REDEFINES PARM01-MESSAGE.\n                   15  PARM01-CCC      PIC  X(04).\n                   15  PARM01-RC       PIC  X(04).\n                   15  FILLER          PIC  X.\n                   15  PARM01-HM-ST    PIC  X(04).\n                   15  FILLER          PIC  X.\n                   15  PARM01-HM-EN    PIC  X(04).\n                   15  FILLER          PIC  X(22).\n           05  FILLER REDEFINES PARM01-USERIDS.\n               10  FILLER              PIC  X(16).\n               10  PARM01-SMS-DAYS     PIC  X(14).\n               10  FILLER              PIC  X(41).\n           05  FILLER                  PIC  X(08).\n\n       FD OFFSET\n           RECORDING MODE F.\n       01  OFFSET-RECORD.\n           05  OFFSET-DOCU             PIC  X.\n           05  OFFSET-AMOUNT.\n               10  OFFSET-PAST-FUT     PIC  X.\n               10  OFFSET-OFFSET       PIC  X(05).\n           05  FILLER                  PIC  X(10).\n           05  OFFSET-BATCH-SW         PIC  X.\n           05  FILLER                  PIC  X(62).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage MIS0685B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-SET-CODE             PIC S9(04)    VALUE ZERO COMP.\n           05  WS-NBR-DAYS             PIC  9(08)    VALUE ZERO.\n           05  WS-TOTAL-DAYS           PIC  9(08)    VALUE ZERO.\n           05  WS-REMAIN-DAYS          PIC  9(05)    VALUE ZERO.\n           05  WS-HOLD-RC              PIC  9(04)    VALUE ZERO.\n           05  WS-HOLD-POS             PIC  9(04)    VALUE ZERO.\n           05  WS-HOLD-CYCLE           PIC  9(05)    VALUE ZERO.\n           05  WS-HOLD-DURATION        PIC  99       VALUE ZERO.\n           05  WS-PRM                  PIC  9(04)    VALUE ZERO.\n           05  WS-ABEND1               PIC  9(04)    VALUE 1.\n           05  WS-ABEND2               PIC  9(04)    VALUE 1.\n           05  WS-ABEND3               PIC  9(04)    VALUE ZERO.\n           05  WS-HM-ST                PIC  9(04)    VALUE ZERO.\n           05  WS-HM-EN                PIC  9(04)    VALUE ZERO.\n           05  WS-DAY-N                PIC  9        VALUE ZERO.\n           05  WS-HOLD-MESSAGE         PIC  X(40)    VALUE SPACE.\n           05  WS-DAY                  PIC  X        VALUE SPACE.\n           05  WS-CALL-STV0400B        PIC  X(08)    VALUE 'STV0400B'.\n           05  WS-LS-DATA              PIC  X(10).\n           05  FILLER REDEFINES WS-LS-DATA.\n               10  WS-LS-OFFSET-SW     PIC  X.\n               10  WS-LS-CYMD          PIC  X(08).\n               10  FILLER              PIC  X.\n           05  WS-OCCUR                PIC  X(07)    VALUE SPACE.\n           05  FILLER REDEFINES WS-OCCUR.\n               10  WS-OCCUR-PREFIX     PIC  9.\n               10  WS-OCCUR-VALUE      PIC  XXX.\n               10  WS-OCCUR-SUFFIX     PIC  XXX.\n               10  FILLER REDEFINES WS-OCCUR-SUFFIX.\n                   15  WS-OCCUR-SUF-1  PIC  X.\n                   15  FILLER          PIC  XX.\n           05  WS-LAST                 PIC  X(07)    VALUE SPACE.\n           05  FILLER REDEFINES WS-LAST.\n               10  WS-LAST-PREFIX      PIC  X.\n               10  WS-LAST-VALUE       PIC  XXX.\n               10  WS-LAST-SUFFIX      PIC  XXX.\n               10  FILLER REDEFINES WS-LAST-SUFFIX.\n                   15  WS-LAST-SUF-1   PIC  X.\n                   15  FILLER          PIC  XX.\n           05  WS-1-HM                 PIC  9(04)    VALUE ZERO.\n           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-1-CYMD.\n               10  WS-1-CYMD-CY        PIC  X(04).\n               10  WS-1-CYMD-CY-N REDEFINES WS-1-CYMD-CY\n                                       PIC  9(04).\n               10  WS-1-CYMD-M         PIC  XX.\n               10  WS-1-CYMD-M-N REDEFINES WS-1-CYMD-M\n                                       PIC  99.\n               10  WS-1-CYMD-D         PIC  XX.\n               10  WS-1-CYMD-D-N REDEFINES WS-1-CYMD-D\n                                       PIC  99.\n           05  WS-2-CYMD               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-2-CYMD.\n               10  WS-2-CYMD-CY        PIC  X(04).\n               10  FILLER REDEFINES WS-2-CYMD-CY.\n                   15  WS-2-CYMD-C     PIC  XX.\n                   15  WS-2-CYMD-Y     PIC  XX.\n               10  WS-2-CYMD-M         PIC  XX.\n               10  WS-2-CYMD-D         PIC  XX.\n           05  WS-3-CYMD               PIC  X(08)    VALUE SPACE.\n           05  WS-4-CYMD               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-4-CYMD.\n               10  WS-4-CYMD-CY        PIC  X(04).\n               10  FILLER REDEFINES WS-4-CYMD-CY.\n                   15  WS-4-CYMD-C     PIC  XX.\n                   15  WS-4-CYMD-Y     PIC  XX.\n               10  WS-4-CYMD-M         PIC  XX.\n               10  WS-4-CYMD-D         PIC  XX.\n           05  WS-B-CYMD               PIC  X(08)    VALUE SPACE.\n           05  WS-A-CYMD               PIC  X(08)    VALUE SPACE.\n           05  WS-UNSTR1               PIC  X(10)    VALUE SPACE.\n           05  WS-UNSTR2               PIC  X(10)    VALUE SPACE.\n           05  WS-OFFSET               PIC  X(06)    VALUE SPACE.\n           05  WS-SMS-DAYS             PIC  X(14)    VALUE SPACE.\n           05  WS-SMS-DAY REDEFINES WS-SMS-DAYS\n                                       OCCURS 7 TIMES.\n               10  WS-SMS-DAY-1        PIC  X.\n               10  WS-SMS-DAY-2        PIC  X.\n           05  WS-USER-FIELDS.\n               10  WS-USER-1           PIC  X(08)    VALUE SPACE.\n               10  WS-USER-2           PIC  X(08)    VALUE SPACE.\n               10  WS-USER-3           PIC  X(08)    VALUE SPACE.\n               10  WS-USER-4           PIC  X(08)    VALUE SPACE.\n               10  WS-USER-5           PIC  X(08)    VALUE SPACE.\n               10  WS-USER-6           PIC  X(08)    VALUE SPACE.\n               10  WS-USER-7           PIC  X(08)    VALUE SPACE.\n               10  WS-USER-8           PIC  X(08)    VALUE SPACE.\n               10  WS-USER-9           PIC  X(08)    VALUE SPACE.\n               10  WS-USER-10          PIC  X(08)    VALUE SPACE.\n               10  WS-USER-11          PIC  X(08)    VALUE SPACE.\n               10  WS-USER-12          PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-USER-FIELDS.\n               10  WS-USER             PIC  X(08)\n                                       OCCURS 12 TIMES.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-RCD-CNT         PIC S9(07)    VALUE ZERO.\n           05  WS-MSG-CNT              PIC S9(07)    VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  WS-END-PARM01-SW        PIC  X        VALUE 'N'.\n               88  END-OF-PARM01                     VALUE 'Y'.\n               88  MORE-PARM01-RCDS                  VALUE 'N'.\n           05  WS-SEND-MSG-SW          PIC  X        VALUE SPACE.\n           05  WS-DAY-SW               PIC  X        VALUE SPACE.\n           05  WS-OFFSET-SW            PIC  X        VALUE SPACE.\n           05  WS-SMS-SW               PIC  X        VALUE SPACE.\n           05  WS-COMBINE-SKIP-SW      PIC  X        VALUE SPACE.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(05)    VALUE ZERO.\n\n       01  WS-STV0400B-FIELDS.\n           05  STV0400B-DATA           PIC  X(10)   VALUE SPACE.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X6        PIC  X(06).\n               10  STV0400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X8        PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAYS       PIC  X(05).\n               10  FILLER              PIC  X(05).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAY        PIC  X(09).\n               10  STV0400B-DAY-NBR    PIC  X.\n           05  STV0400B-DATA2          PIC  X(10)   VALUE SPACE.\n           05  FILLER REDEFINES STV0400B-DATA2.\n               10  STV0400B-1X8-2      PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  STV0400B-IN             PIC  X(06)   VALUE SPACE.\n           05  STV0400B-OUT            PIC  X(06)   VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MIS0685B END  '.\n\n       LINKAGE SECTION.\n\n       01  PARM-FIELD.\n           05  LS-LENGTH               PIC S9(04)    COMP.\n           05  LS-DATA                 PIC  X(10).\n           05  FILLER REDEFINES LS-DATA.\n               10  LS-OFFSET-SW        PIC  X.\n               10  LS-CYMD             PIC  X(08).\n               10  FILLER              PIC  X.\n\n      /\n\n       PROCEDURE DIVISION USING PARM-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           DISPLAY '                         '.\n           DISPLAY '**** MIS0685B set condition codes'.\n           PERFORM 0200-OPEN-FILES.\n\n           PERFORM 0300-GET-LINKAGE.\n\n           MOVE '-00000'                      TO WS-OFFSET.\n           MOVE SPACE                         TO WS-OFFSET-SW.\n           IF WS-RETURN-CODE = ZERO\n             IF WS-LS-OFFSET-SW = 'Y'\n                 PERFORM 0400-LOAD-OFFSET THRU\n                         0400-LOAD-OFFSET-EXIT.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-PARM01.\n\n           IF WS-OFFSET NOT = '-00000'\n             IF WS-OFFSET-SW = 'Y'\n                 DISPLAY '---> Warning - dates offset by '\n                          WS-OFFSET ' days '.\n           DISPLAY '**** Records in PARM01   ' WS-READ-RCD-CNT.\n           DISPLAY '**** Messages/codes      ' WS-MSG-CNT.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n               IF WS-SET-CODE > ZERO\n                   MOVE WS-SET-CODE           TO RETURN-CODE\n                   DISPLAY '**** MIS0685B cond code ' WS-SET-CODE\n                           ' set by request'\n               ELSE\n                   CONTINUE\n           ELSE\n               DISPLAY '**** MIS0685B cond code ' WS-RETURN-CODE\n                       ' sent by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** MIS0685B EOJ encountered '.\n           DISPLAY '                         '.\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN I-O    PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0685B open error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN INPUT  OFFSET.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0685B open error on OFFSET'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN OUTPUT OUTNOT.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0685B open error on OUTNOT'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE OUTNOT.\n           CLOSE OFFSET.\n           CLOSE PARM01.\n\n       0300-GET-LINKAGE.\n           IF LS-LENGTH = ZERO\n               DISPLAY '**** Parm length is zero '\n               MOVE +0300                     TO WS-RETURN-CODE\n           ELSE\n           IF LS-LENGTH > LENGTH OF WS-LS-DATA\n               DISPLAY '**** Parm length is excessive '\n               MOVE +0300                     TO WS-RETURN-CODE\n           ELSE\n               MOVE LS-DATA(1: LS-LENGTH)     TO WS-LS-DATA.\n           IF LS-LENGTH > ZERO\n             IF LS-LENGTH < 10\n                 MOVE SPACE          TO WS-LS-DATA(LS-LENGTH + 1: ).\n\n      *---------------------------------------\n      *    load OFFSET\n      *---------------------------------------\n       0400-LOAD-OFFSET.\n           READ OFFSET.\n           IF WS-STAT = 10\n               GO TO 0400-LOAD-OFFSET-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0685B read error on OFFSET'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0400                     TO WS-RETURN-CODE\n               GO TO 0400-LOAD-OFFSET-EXIT.\n\n           IF OFFSET-DOCU = '*'\n               GO TO 0400-LOAD-OFFSET.\n           IF OFFSET-OFFSET NUMERIC\n               MOVE OFFSET-AMOUNT             TO WS-OFFSET\n           ELSE\n               DISPLAY '**** OFFSET amount not numeric '\n               MOVE +0401                     TO WS-RETURN-CODE\n               GO TO 0400-LOAD-OFFSET-EXIT.\n\n       0400-LOAD-OFFSET-EXIT. EXIT.\n\n       0400-PROCESS-PARM01.\n      *---------------------------------------\n      *    ws-1-cymd = specified or generated input parm-file date\n      *                altered as each parm rcd is processed\n      *    ws-2-cymd = current date (including any offset)\n      *    ws-3-cymd = work field\n      *                altered as each parm rcd is processed\n      *    ws-4-cymd = ws-2-cymd with adjustment\n      *                altered as each parm rcd is processed\n      *---------------------------------------\n      *  program logic is re-driven for each parm01 line...\n      *  after last parm01 entry, the program is finished.\n      *+--------------------------------------\n           IF WS-LS-CYMD(1: 3) = 'CMD' OR 'CMF'\n               MOVE SPACE                     TO WS-STV0400B-FIELDS\n               MOVE WS-LS-CYMD                TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               IF STV0400B-1X6 = 'ERROR'\n                   DISPLAY '**** MIS0685B parm CMD or CMF invalid '\n                   MOVE +0100                 TO WS-RETURN-CODE\n               ELSE\n                   MOVE STV0400B-1X8          TO WS-2-CYMD\n                   MOVE 'Y'                   TO WS-OFFSET-SW\n                   DISPLAY '**** CYMD date specified ' WS-2-CYMD\n           ELSE\n           IF WS-LS-CYMD(3: 1) = '/'\n               AND WS-LS-CYMD(6: 1) = '/'\n               IF WS-LS-CYMD = '01/01/01'\n                   CONTINUE\n               ELSE\n                   MOVE SPACE                 TO WS-STV0400B-FIELDS\n                   MOVE WS-LS-CYMD            TO STV0400B-1X8\n                   MOVE 'M/D/Y '              TO STV0400B-IN\n                   MOVE 'CYMD  '              TO STV0400B-OUT\n                   CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n                   IF STV0400B-1X6 = 'ERROR'\n                       DISPLAY '**** MIS0685B date passed is invalid '\n                       MOVE +0100             TO WS-RETURN-CODE\n                   ELSE\n                       MOVE STV0400B-1X8      TO WS-2-CYMD\n                       MOVE 'Y'               TO WS-OFFSET-SW\n                       DISPLAY '**** CYMD date specified ' WS-2-CYMD\n           ELSE\n           IF WS-LS-CYMD NUMERIC\n             IF WS-LS-CYMD NOT = '00000000'\n                 MOVE SPACE                   TO WS-STV0400B-FIELDS\n                 MOVE WS-LS-CYMD              TO STV0400B-1X8\n                 MOVE 'CYMD  '                TO STV0400B-IN\n                 MOVE 'CYMD  '                TO STV0400B-OUT\n                 CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n                 IF STV0400B-1X6 = 'ERROR'\n                     DISPLAY '**** MIS0685B parm CYMD not valid'\n                     MOVE +0100               TO WS-RETURN-CODE\n                 ELSE\n                     MOVE STV0400B-1X8        TO WS-2-CYMD\n                     DISPLAY '**** CYMD date specified ' WS-2-CYMD.\n\n      *---------------------------------------\n      *    get current date and time\n      *+--------------------------------------\n           IF WS-2-CYMD NOT NUMERIC\n               MOVE SPACE                     TO WS-STV0400B-FIELDS\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               MOVE STV0400B-1X8              TO WS-2-CYMD\n               MOVE 'Y'                       TO WS-OFFSET-SW.\n\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE 'HMM   '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-DATA(1: 4)           TO WS-1-HM.\n\n      *---------------------------------------\n      *    set ws-2-cymd to either the system date\n      *    or the offset date\n      *+--------------------------------------\n           IF WS-OFFSET-SW = 'Y'\n               MOVE SPACE                     TO WS-STV0400B-FIELDS\n               MOVE WS-2-CYMD                 TO STV0400B-1X8\n               MOVE 'CYMD  '                  TO STV0400B-IN\n               MOVE WS-OFFSET                 TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               MOVE STV0400B-1X8              TO WS-2-CYMD.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0600-READ-PARM01\n                   UNTIL END-OF-PARM01.\n\n       0600-READ-PARM01.\n           READ PARM01.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-RCD-CNT\n               PERFORM 0700-SELECT THRU\n                       0700-SELECT-EXIT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-PARM01-SW\n           ELSE\n               DISPLAY '**** MIS0685B read error on PARM01 '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0600                     TO WS-RETURN-CODE.\n           IF WS-RETURN-CODE > ZERO\n               MOVE 'Y'                       TO WS-END-PARM01-SW.\n\n      *---------------------------------------\n      *    edit date.\n      *    date may be derived by STV0400B if PARM01-DATA is valued.\n      *    example: 'CMFE00 -01' says 'end of month date for current\n      *              month minus one day'.  This would match to the\n      *              second to last day of the month.\n      *    example: 'QFF000 +01' says 'beginning of current quarter\n      *              plus one day'\n      *+--------------------------------------\n       0700-SELECT.\n           IF PARM01-FLAG = '*'\n               GO TO 0700-SELECT-EXIT.\n\n           MOVE SPACE                         TO WS-COMBINE-SKIP-SW.\n           ADD 1                              TO WS-PRM.\n           MOVE WS-2-CYMD                     TO WS-4-CYMD.\n\n      *---------------------------------------\n      *  adjust 'current date' forward or backward\n      *---------------------------------------\n           IF PARM01-CY NUMERIC\n               OR PARM01-CY = '****'\n               OR PARM01-CMF = 'CMF' OR 'QFF'\n               CONTINUE\n           ELSE\n               PERFORM 0700-EDIT-USERIDS\n               GO TO 0700-SELECT-EXIT.\n\n           IF PARM01-ADJUST NUMERIC\n             IF PARM01-ADJUST = '00'\n                 CONTINUE\n             ELSE\n             IF PARM01-ADJ-FLAG = '>' OR '<'\n                 PERFORM 0700-CALC-ADJUST\n             ELSE\n                 DISPLAY '**** < or > required for adjustment '\n           ELSE\n               DISPLAY '**** Adjustment days must be numeric'\n               MOVE +0700                     TO WS-RETURN-CODE.\n\n           MOVE SPACE                         TO WS-SMS-SW.\n           IF PARM01-SMS-DAYS(1: 1) = '+' OR '-'\n               MOVE 'Y'                       TO WS-SMS-SW\n               MOVE PARM01-SMS-DAYS           TO WS-SMS-DAYS\n               MOVE SPACE                     TO PARM01-SMS-DAYS\n               MOVE '000'                     TO PARM01-CYCLE.\n\n           IF PARM01-DATA(1: 3) = 'CMF' OR 'QFF'\n               PERFORM 0800-CALC-DATE\n               GO TO 0700-SKIP-CYMD-EDIT.\n\n       0700-EDIT-DATES.\n           IF PARM01-CY = '****'\n               MOVE WS-4-CYMD-CY              TO WS-1-CYMD-CY\n           ELSE\n           IF PARM01-CY NUMERIC\n               MOVE PARM01-CY                 TO WS-1-CYMD-CY\n           ELSE\n               DISPLAY '**** Parm year must be numeric or asterisks'\n               MOVE +0700                     TO WS-RETURN-CODE.\n           IF PARM01-M = '**'\n               MOVE WS-4-CYMD-M               TO WS-1-CYMD-M\n           ELSE\n           IF PARM01-M NUMERIC\n               MOVE PARM01-M                  TO WS-1-CYMD-M\n           ELSE\n               DISPLAY '**** Parm month must be numeric or asterisks'\n               MOVE +0700                     TO WS-RETURN-CODE.\n           IF PARM01-D = '**'\n               MOVE WS-4-CYMD-D               TO WS-1-CYMD-D\n           ELSE\n           IF PARM01-D NUMERIC\n               MOVE PARM01-D                  TO WS-1-CYMD-D\n           ELSE\n               DISPLAY '**** Parm day must be numeric or asterisks'\n               MOVE +0700                     TO WS-RETURN-CODE.\n\n      *---------------------------------------\n      *    from above logic, WS-1-CYMD has the potential to\n      *    hold an invalid date, such as 20120931.  if parm date\n      *    is '2012 09 **' and WS-4-CYMD is 20121231 then '31'\n      *    may get moved into WS-1-CYMD-D.\n      *---------------------------------------\n           PERFORM 0700-DECREMENT-UNTIL-VALID.\n\n       0700-SKIP-CYMD-EDIT.\n           IF WS-RETURN-CODE NOT = ZERO\n               GO TO 0700-SELECT-EXIT.\n\n           IF PARM01-CYCLE NUMERIC\n               MOVE PARM01-CYCLE              TO WS-HOLD-CYCLE\n           ELSE\n               DISPLAY '**** Cycle days must be numeric'\n               MOVE +0700                     TO WS-RETURN-CODE.\n\n           IF PARM01-DURATION NUMERIC\n               MOVE PARM01-DURATION           TO WS-HOLD-DURATION\n           ELSE\n               DISPLAY '**** Duration days must be numeric'\n               MOVE +0700                     TO WS-RETURN-CODE.\n\n           IF PARM01-MESSAGE = SPACE\n               DISPLAY '**** Parm message required'\n               MOVE +0700                     TO WS-RETURN-CODE.\n\n           IF WS-RETURN-CODE NOT = ZERO\n               GO TO 0700-SELECT-EXIT.\n\n           IF WS-HOLD-DURATION = ZERO\n               MOVE 1                         TO WS-HOLD-DURATION.\n\n      *---------------------------------------\n      *  determine current day (including offset)\n      *---------------------------------------\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-4-CYMD                     TO STV0400B-1X8.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'DAY   '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-DAY-NBR              TO WS-DAY.\n\n      *---------------------------------------\n      *  if sms scheduling specified (+0-1+5+4+3+2+1)\n      *  then redetermine the match date.\n      *---------------------------------------\n           IF WS-SMS-SW = 'Y'\n               PERFORM 0900-CALC-SMS-DATE THRU\n                       0900-CALC-SMS-EXIT.\n\n           IF PARM01-CCC = 'CTM '\n               PERFORM 0700-LOAD-TIMES\n               IF PARM01-HM-ST NOT NUMERIC\n                   DISPLAY '**** CTM start time not numeric '\n                   MOVE +0700                 TO WS-RETURN-CODE\n               ELSE\n               IF PARM01-HM-EN NOT NUMERIC\n                   DISPLAY '**** CTM end time not numeric '\n                   MOVE +0700                 TO WS-RETURN-CODE\n               ELSE\n                   MOVE PARM01-HM-ST          TO WS-HM-ST\n                   MOVE PARM01-HM-EN          TO WS-HM-EN\n                   IF WS-HM-ST > 2359\n                       DISPLAY '**** CTM start time not valid '\n                       MOVE +0700             TO WS-RETURN-CODE\n                   ELSE\n                   IF WS-HM-EN > 2359\n                       DISPLAY '**** CTM end time not valid '\n                       MOVE +0700             TO WS-RETURN-CODE\n                   ELSE\n                   IF WS-HM-ST > WS-HM-EN\n                       DISPLAY '**** CTM start time > end time '\n                       MOVE +0700             TO WS-RETURN-CODE.\n\n           IF PARM01-CCC = 'CCM ' OR 'CCN ' OR 'CTM '\n             IF PARM01-RC NUMERIC\n                 MOVE PARM01-RC               TO WS-HOLD-RC\n                 IF WS-HOLD-RC > 4095\n                     DISPLAY '**** Requested cond code > 4095 '\n                     MOVE +0700               TO WS-RETURN-CODE\n                 ELSE\n                     CONTINUE\n             ELSE\n                 DISPLAY '**** Requested cond code not numeric'\n                 MOVE +0700                   TO WS-RETURN-CODE.\n\n           IF WS-RETURN-CODE NOT = ZERO\n               GO TO 0700-SELECT-EXIT.\n\n      *---------------------------------------\n      *    determine if days 1-7 have been specified\n      *    or an st/nd/rd/th entry, such as '3RD 4  ' meaning\n      *    third thursday of the month.\n      *+--------------------------------------\n           MOVE 'N'                           TO WS-SEND-MSG-SW.\n           MOVE 'N'                           TO WS-DAY-SW.\n           IF PARM01-SEL-DAYS(1: 4) = '1ST ' OR '2ND ' OR '3RD '\n                                   OR '4TH ' OR '5TH '\n               PERFORM 1900-TEST-OCCUR\n           ELSE\n           IF PARM01-SEL-DAYS(1: 4) = 'LST '\n               PERFORM 1900-TEST-LAST.\n           IF PARM01-SEL-DAYS = SPACE\n               MOVE 'Y'                       TO WS-DAY-SW\n           ELSE\n               PERFORM 1800-TEST-DAYS\n                   VARYING WS-SUB1 FROM 1 BY 1\n                   UNTIL WS-SUB1 > 7.\n           IF WS-DAY-SW = 'N'\n               GO TO 0700-CONTINUE.\n\n      *---------------------------------------\n      *    if cycle days specified\n      *        determine nbr days between specified and current date\n      *        divide by cycle\n      *        if remainder zero, dates match\n      *\n      *        if duration specified\n      *            subtract 1 from current date and retest\n      *            until duration days tested\n      *---------------------------------------\n           IF WS-HOLD-CYCLE > ZERO\n               MOVE WS-4-CYMD                 TO WS-3-CYMD\n               PERFORM 1200-NBR-DAYS\n                   VARYING WS-SUB1 FROM 1 BY 1\n                   UNTIL WS-SUB1 > WS-HOLD-DURATION\n               GO TO 0700-CONTINUE.\n\n      *---------------------------------------\n      *    if cycle days not specified\n      *      if duration specified\n      *        determine nbr days between specified and current date\n      *        if nbr days not > duration days, dates match\n      *---------------------------------------\n           MOVE WS-4-CYMD                     TO WS-3-CYMD.\n           PERFORM 1400-DURATION-DATE.\n\n       0700-CONTINUE.\n           IF PARM01-CCC = 'CCM ' OR 'CCN ' OR 'CTM '\n                        OR 'ABM ' OR 'ABN '\n               PERFORM 1600-SET-CODE THRU\n                       1600-SET-CODE-EXIT\n           ELSE\n           IF WS-SEND-MSG-SW = 'Y'\n               PERFORM 1500-SEND-MESSAGE\n                   VARYING WS-SUB1 FROM 1 BY 1\n                   UNTIL WS-USER(WS-SUB1) = SPACE\n                   OR WS-SUB1 > 12.\n\n      *---------------------------------------\n      *    if PARM01-FLAG = 'T' and date criteria match,\n      *    comment out line by changing 'T' to '*'.\n      *---------------------------------------\n           IF WS-SEND-MSG-SW = 'Y'\n             IF PARM01-FLAG = 'T'\n                 DISPLAY '**** T parm: match occurred - commenting out'\n                 MOVE '*'                     TO PARM01-FLAG\n                 PERFORM 2000-REWRITE-PARM01.\n\n      *---------------------------------------\n      *    if PARM01-FLAG = 'S' and date criteria match, SKIP\n      *    processing the remaining parm records.  This allows for\n      *    more complicated logic in the parm.\n      *---------------------------------------\n           IF WS-SEND-MSG-SW = 'Y'\n             IF PARM01-FLAG = 'S'\n                 DISPLAY '**** S parm - skipping remaining parm rcds'\n                 MOVE 'Y'                     TO WS-END-PARM01-SW.\n\n       0700-SELECT-EXIT. EXIT.\n\n       0700-LOAD-TIMES.\n           IF PARM01-HM-ST(1: 2) = '**'\n               MOVE WS-1-HM(1: 2)             TO PARM01-HM-ST(1: 2).\n           IF PARM01-HM-EN(1: 2) = '**'\n               MOVE WS-1-HM(1: 2)             TO PARM01-HM-EN(1: 2).\n\n       0700-DECREMENT-UNTIL-VALID.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-1-CYMD                     TO STV0400B-1X8.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'CYMD  '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           IF STV0400B-1X6 = 'ERROR'\n             IF WS-1-CYMD-D-N > 28\n                 SUBTRACT 1 FROM WS-1-CYMD-D-N\n                 GO TO 0700-DECREMENT-UNTIL-VALID.\n\n       0700-EDIT-USERIDS.\n           IF PARM01-USERIDS = SPACE\n               DISPLAY '**** Userids not specified'\n               MOVE +0700                     TO WS-RETURN-CODE\n           ELSE\n               MOVE SPACE                     TO WS-USER-FIELDS\n               UNSTRING PARM01-USERIDS DELIMITED BY ' '\n                   INTO WS-USER-1 WS-USER-2  WS-USER-3  WS-USER-4\n                        WS-USER-5 WS-USER-6  WS-USER-7  WS-USER-8\n                        WS-USER-9 WS-USER-10 WS-USER-11 WS-USER-12.\n\n      *---------------------------------------\n      *    if (<) specified then re-adjust current date forward\n      *    ## days.  include duration if specified.\n      *    ex:  **** 12 25 and ' 02<02 000' specified:\n      *         matches occur on 12/23 12/24\n      *\n      *         in other words, on the 23rd the current date is\n      *         adjusted forward 2 days (to the 25th) then compared\n      *         with the specified match date and duration.\n      *\n      *    if (>) specified then re-adjust current date back\n      *    ## days.  include duration if specified.\n      *    ex:  **** 12 25 and '00>02 000' specified:\n      *         match occurs on 12/27\n      *---------------------------------------\n       0700-CALC-ADJUST.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-4-CYMD                     TO STV0400B-DATA.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE '-00000'                      TO STV0400B-OUT.\n           IF PARM01-ADJ-FLAG = '<'\n               MOVE '+'                       TO STV0400B-OUT(1: 1).\n           MOVE PARM01-ADJUST                 TO STV0400B-OUT(5: 2).\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           IF STV0400B-1X6 = 'ERROR'\n               DISPLAY '**** Error calculating adjustment date '\n               DISPLAY '**** ' WS-2-CYMD '  ADJ: ' PARM01-ADJUST\n               MOVE +0700                     TO WS-RETURN-CODE\n           ELSE\n               MOVE STV0400B-1X8              TO WS-4-CYMD.\n\n      *---------------------------------------\n      *    derive date from parm01-data\n      *+--------------------------------------\n       0800-CALC-DATE.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-4-CYMD                     TO STV0400B-1X8.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE PARM01-DATA                   TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           IF STV0400B-1X6 = 'ERROR'\n               DISPLAY '**** Error calculating conversion date '\n               DISPLAY '**** ' PARM01-DATA\n               MOVE +0800                     TO WS-RETURN-CODE\n           ELSE\n           IF PARM01-DATA(9: 2) NUMERIC\n               AND PARM01-DATA(8: 1) = '+' OR '-'\n               MOVE 'CYMD  '                  TO STV0400B-IN\n               MOVE PARM01-DATA(8: 1)         TO STV0400B-OUT(1: 1)\n               MOVE '000'                     TO STV0400B-OUT(2: 3)\n               MOVE PARM01-DATA(9: 2)         TO STV0400B-OUT(5: 2)\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               IF STV0400B-1X6 = 'ERROR'\n                   DISPLAY '**** Error altering conversion date '\n                   DISPLAY '**** ' PARM01-DATA\n                   MOVE +0800                 TO WS-RETURN-CODE\n               ELSE\n               IF PARM01-CMF = 'QFF'\n                   AND PARM01-DATA(7: 1) = 'E'\n                   MOVE STV0400B-1X8-2        TO WS-1-CYMD\n               ELSE\n                   MOVE STV0400B-1X8          TO WS-1-CYMD\n           ELSE\n           IF PARM01-CMF = 'QFF'\n               AND PARM01-DATA(7: 1) = 'E'\n               MOVE STV0400B-1X8-2            TO WS-1-CYMD\n           ELSE\n               MOVE STV0400B-1X8              TO WS-1-CYMD.\n\n      *---------------------------------------\n      *  determine parm01 specified day\n      *---------------------------------------\n       0900-CALC-SMS-DATE.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-1-CYMD                     TO STV0400B-1X8.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'DAY   '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           IF STV0400B-DAY-NBR NOT NUMERIC\n               DISPLAY '**** STV0400B sms day calc error'\n               MOVE +0900                     TO WS-RETURN-CODE\n               GO TO 0900-CALC-SMS-EXIT\n           ELSE\n               MOVE STV0400B-DAY-NBR          TO WS-DAY-N.\n      *---------------------------------------\n      *    convert day range (mon=1...sun=7) to\n      *    sms day range (sun=1...sat=7) to\n      *+--------------------------------------\n           ADD 1                              TO WS-DAY-N.\n           IF WS-DAY-N > 7\n               MOVE 1                         TO WS-DAY-N.\n           IF WS-SMS-DAY-1(WS-DAY-N) = '+' OR '-'\n               CONTINUE\n           ELSE\n               DISPLAY '**** SMS day offset must be + or -'\n               MOVE +0901                     TO WS-RETURN-CODE\n               GO TO 0900-CALC-SMS-EXIT.\n           IF WS-SMS-DAY-2(WS-DAY-N) NOT NUMERIC\n               DISPLAY '**** SMS day offset must be numeric'\n               MOVE +0902                     TO WS-RETURN-CODE\n               GO TO 0900-CALC-SMS-EXIT\n           ELSE\n           IF WS-SMS-DAY-2(WS-DAY-N) > '7'\n               DISPLAY '**** SMS day offset must be 0 - 7'\n               MOVE +0903                     TO WS-RETURN-CODE\n               GO TO 0900-CALC-SMS-EXIT.\n\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-1-CYMD                     TO STV0400B-DATA.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE '-00000'                      TO STV0400B-OUT.\n           MOVE WS-SMS-DAY-1(WS-DAY-N)        TO STV0400B-OUT(1:1).\n           MOVE WS-SMS-DAY-2(WS-DAY-N)        TO STV0400B-OUT(6:1).\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           IF STV0400B-1X6 = 'ERROR'\n               DISPLAY '**** Error calculating number days'\n               DISPLAY '**** ' WS-1-CYMD '  ' WS-SMS-DAYS\n               MOVE +0004                     TO WS-RETURN-CODE\n           ELSE\n               MOVE STV0400B-1X8              TO WS-1-CYMD.\n\n       0900-CALC-SMS-EXIT. EXIT.\n\n      *---------------------------------------\n      *    date specified with a repeating schedule.\n      *    take duration days into account.\n      *+--------------------------------------\n       1200-NBR-DAYS.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-1-CYMD                     TO STV0400B-DATA.\n           MOVE WS-3-CYMD                     TO STV0400B-DATA2.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'DAYS  '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           IF STV0400B-1X6 = 'ERROR'\n               DISPLAY '**** Error calculating number days'\n               DISPLAY '**** ' WS-1-CYMD '  ' WS-3-CYMD\n               MOVE +0004                     TO WS-RETURN-CODE\n               MOVE WS-HOLD-DURATION          TO WS-SUB1\n           ELSE\n               MOVE ZERO                      TO WS-TOTAL-DAYS\n                                                 WS-REMAIN-DAYS\n               MOVE STV0400B-DAYS             TO WS-NBR-DAYS\n               DIVIDE WS-NBR-DAYS BY WS-HOLD-CYCLE GIVING\n                      WS-TOTAL-DAYS REMAINDER WS-REMAIN-DAYS\n               IF WS-REMAIN-DAYS = ZERO\n                   MOVE 'Y'                   TO WS-SEND-MSG-SW\n                   MOVE WS-HOLD-DURATION      TO WS-SUB1\n               ELSE\n                   PERFORM 1300-DECREMENT-DATE.\n\n       1300-DECREMENT-DATE.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-3-CYMD                     TO STV0400B-DATA.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE '-00001'                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           IF STV0400B-1X6 = 'ERROR'\n               DISPLAY '**** Error decrementing date'\n               MOVE +1300                     TO WS-RETURN-CODE\n               MOVE WS-HOLD-DURATION          TO WS-SUB1\n           ELSE\n               MOVE STV0400B-1X8              TO WS-3-CYMD.\n\n      *---------------------------------------\n      *    date specified without a repeating schedule.\n      *    take duration days into account.\n      *---------------------------------------\n       1400-DURATION-DATE.\n           IF WS-3-CYMD NOT < WS-1-CYMD\n               MOVE SPACE                     TO WS-STV0400B-FIELDS\n               MOVE WS-1-CYMD                 TO STV0400B-DATA\n               MOVE WS-3-CYMD                 TO STV0400B-DATA2\n               MOVE 'CYMD  '                  TO STV0400B-IN\n               MOVE 'DAYS  '                  TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               IF STV0400B-1X6 = 'ERROR'\n                   DISPLAY '**** Error calculating duration days'\n                   DISPLAY '**** ' WS-1-CYMD '  ' WS-3-CYMD\n                   MOVE +0004                 TO WS-RETURN-CODE\n               ELSE\n                   MOVE STV0400B-DAYS         TO WS-NBR-DAYS\n                   ADD 1                      TO WS-NBR-DAYS\n                   IF WS-NBR-DAYS NOT > WS-HOLD-DURATION\n                       MOVE 'Y'               TO WS-SEND-MSG-SW.\n\n       1500-SEND-MESSAGE.\n           MOVE 'SE '                         TO OUTNOT-SE.\n           MOVE QUOTE                         TO OUTNOT-QUOTE1.\n           MOVE SPACE                         TO OUTNOT-FILL1.\n           MOVE SPACE                         TO OUTNOT-MSG.\n           MOVE PARM01-MESSAGE                TO WS-HOLD-MESSAGE.\n           PERFORM 1500-ADD-DATE-TO-MSG.\n           IF PARM01-PREFIX = 'Y'\n               STRING WS-2-CYMD-M '-' WS-2-CYMD-D '-'\n                      WS-2-CYMD-Y ' ' WS-HOLD-MESSAGE\n                      DELIMITED BY SIZE INTO OUTNOT-MSG\n           ELSE\n               MOVE WS-HOLD-MESSAGE           TO OUTNOT-MSG.\n           MOVE SPACE                         TO OUTNOT-FILL2.\n           MOVE QUOTE                         TO OUTNOT-QUOTE2.\n           MOVE SPACE                         TO OUTNOT-REMAIN.\n           STRING ' U('                       DELIMITED BY SIZE\n                  WS-USER(WS-SUB1)            DELIMITED BY ' '\n                  ') LOGON'                   DELIMITED BY SIZE\n                  INTO OUTNOT-REMAIN.\n           PERFORM 2000-WRITE-OUTNOT.\n\n      *    #+00000#M/D/CY#\n       1500-ADD-DATE-TO-MSG.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE ZERO                          TO WS-HOLD-POS.\n           PERFORM VARYING WS-SUB2 FROM 1 BY 1\n               UNTIL WS-SUB2 > 26\n               IF WS-HOLD-MESSAGE(WS-SUB2: 1) = '#'\n                   AND WS-HOLD-MESSAGE(WS-SUB2 + 7: 1) = '#'\n                   MOVE WS-SUB2               TO WS-HOLD-POS\n                   MOVE 26                    TO WS-SUB2\n               END-IF\n           END-PERFORM.\n           IF WS-HOLD-POS NOT = ZERO\n               MOVE WS-4-CYMD                 TO STV0400B-1X8\n               MOVE 'CYMD  '                  TO STV0400B-IN\n               MOVE WS-HOLD-MESSAGE(WS-HOLD-POS + 1: 6)\n                                              TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               MOVE 'CYMD  '                  TO STV0400B-IN\n               MOVE WS-HOLD-MESSAGE(WS-HOLD-POS + 8: 6)\n                                              TO STV0400B-OUT\n               UNSTRING STV0400B-OUT DELIMITED BY '#'\n                   INTO WS-UNSTR1 WS-UNSTR2\n               MOVE WS-UNSTR1                 TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               MOVE STV0400B-DATA TO WS-HOLD-MESSAGE(WS-HOLD-POS: 15).\n\n       1600-SET-CODE.\n           PERFORM 1700-CHECK-COMBINE.\n           IF WS-COMBINE-SKIP-SW = 'Y'\n               DISPLAY WS-PRM ' skipping: combine logic invoked'\n               GO TO 1600-SET-CODE-EXIT\n           ELSE\n           IF PARM01-CCC = 'CTM '\n               PERFORM 1700-CHECK-TIME-RANGE\n               IF WS-SEND-MSG-SW = 'Y'\n                   DISPLAY WS-PRM ' CTM = set code if date/time match'\n                   PERFORM 1700-DISPLAY-DATE\n               ELSE\n                   DISPLAY WS-PRM ' CTM = skip code if no match'\n                   PERFORM 1700-DISPLAY-DATE\n                   GO TO 1600-SET-CODE-EXIT\n           ELSE\n           IF PARM01-CCC = 'CCM '\n             IF WS-SEND-MSG-SW = 'Y'\n                 DISPLAY WS-PRM ' CCM = set code if date match'\n                 PERFORM 1700-DISPLAY-DATE\n             ELSE\n                 DISPLAY WS-PRM ' CCM = skip code if no match'\n                 PERFORM 1700-DISPLAY-DATE\n                 GO TO 1600-SET-CODE-EXIT\n           ELSE\n           IF PARM01-CCC = 'ABM '\n             IF WS-SEND-MSG-SW = 'Y'\n                 DISPLAY WS-PRM ' ABM = abend if date match'\n                 PERFORM 1700-DISPLAY-DATE\n             ELSE\n                 DISPLAY WS-PRM ' ABM = skip abend if no match'\n                 PERFORM 1700-DISPLAY-DATE\n                 GO TO 1600-SET-CODE-EXIT\n           ELSE\n           IF PARM01-CCC = 'ABN '\n             IF WS-SEND-MSG-SW = 'Y'\n                 DISPLAY WS-PRM ' ABN = skip abend if date match'\n                 PERFORM 1700-DISPLAY-DATE\n             ELSE\n                 DISPLAY WS-PRM ' ABN = abend if no match'\n                 PERFORM 1700-DISPLAY-DATE\n                 GO TO 1600-SET-CODE-EXIT\n           ELSE\n           IF WS-SEND-MSG-SW = 'Y'\n               DISPLAY WS-PRM ' CCN = skip code if date match '\n               PERFORM 1700-DISPLAY-DATE\n               GO TO 1600-SET-CODE-EXIT\n           ELSE\n               DISPLAY WS-PRM ' CCN = set code if no match '\n               PERFORM 1700-DISPLAY-DATE.\n\n           IF WS-SEND-MSG-SW = 'Y'\n             IF WS-HOLD-CYCLE > ZERO\n                 DISPLAY WS-PRM ' cycle of ' WS-HOLD-CYCLE\n                         ' occurring ' WS-TOTAL-DAYS ' times'.\n\n           IF PARM01-CCC = 'ABM ' OR 'ABN '\n               PERFORM 1600-ABEND\n           ELSE\n               MOVE WS-HOLD-RC                TO WS-SET-CODE.\n\n       1600-SET-CODE-EXIT. EXIT.\n\n      *---------------------------------------\n      *    Will cause message  \"IGYOP3124-W   This statement may\n      *    cause a program exception at execution\"  to generate\n      *    during program compile - ignore\n      *---------------------------------------\n       1600-ABEND.\n           COMPUTE WS-ABEND1 = WS-ABEND2 / WS-ABEND3.\n\n       1700-CHECK-TIME-RANGE.\n           IF WS-1-HM < WS-HM-ST\n               OR WS-1-HM > WS-HM-EN\n               MOVE 'N'                       TO WS-SEND-MSG-SW.\n\n       1700-DISPLAY-DATE.\n           IF PARM01-ADJUST = '00'\n             IF PARM01-CCC = 'CTM '\n                 DISPLAY WS-PRM ' ' PARM01-CCC '        Curr: '\n                 WS-2-CYMD ' ' WS-1-HM '  Req: ' WS-1-CYMD\n                 ' ' WS-HM-ST '-' WS-HM-EN\n             ELSE\n                 DISPLAY WS-PRM ' ' PARM01-CCC '        Curr: '\n                 WS-2-CYMD '  Req: ' WS-1-CYMD\n           ELSE\n           IF PARM01-CCC = 'CTM '\n               DISPLAY WS-PRM ' ' PARM01-CCC '        Curr: '\n               WS-4-CYMD ' ' WS-1-HM '  Req: ' WS-1-CYMD\n               ' ' WS-HM-ST '-' WS-HM-EN\n           ELSE\n               DISPLAY WS-PRM ' ' PARM01-CCC '         Adj: '\n               WS-4-CYMD '  Req: ' WS-1-CYMD.\n\n      *---------------------------------------\n      *    determine date before and after current date and\n      *    skip logic for this record if either date is the 1st\n      *---------------------------------------\n       1700-CHECK-COMBINE.\n           IF WS-SEND-MSG-SW = 'Y'\n             IF PARM01-FLAG = 'C'\n                 MOVE SPACE                   TO WS-STV0400B-FIELDS\n                 MOVE WS-4-CYMD               TO STV0400B-1X8\n                 MOVE 'CYMD  '                TO STV0400B-IN\n                 MOVE '-00001'                TO STV0400B-OUT\n                 CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n                 MOVE STV0400B-1X8            TO WS-B-CYMD\n                 DISPLAY WS-PRM ' combine: before ' WS-B-CYMD\n                 MOVE 'CYMD  '                TO STV0400B-IN\n                 MOVE '+00002'                TO STV0400B-OUT\n                 CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n                 MOVE STV0400B-1X8            TO WS-A-CYMD\n                 DISPLAY WS-PRM ' combine: after  ' WS-A-CYMD\n                 IF WS-B-CYMD(7: 2) = '01'\n                     OR WS-A-CYMD(7: 2) = '01'\n                     MOVE 'Y'                 TO WS-COMBINE-SKIP-SW.\n\n       1800-TEST-DAYS.\n           IF PARM01-SEL-DAYS(WS-SUB1: 1) = WS-DAY\n               MOVE 'Y'                       TO WS-DAY-SW.\n\n       1900-TEST-OCCUR.\n           MOVE PARM01-SEL-DAYS               TO WS-OCCUR.\n           IF WS-OCCUR-SUF-1 NUMERIC\n               COMPUTE WS-1-CYMD-D-N = WS-OCCUR-PREFIX * 7 - 6\n               MOVE 7                         TO WS-HOLD-DURATION\n               MOVE WS-OCCUR-SUFFIX           TO PARM01-SEL-DAYS\n               MOVE ZERO                      TO WS-HOLD-CYCLE\n           ELSE\n               DISPLAY '**** ST/ND/RD/TH specified with no day entry '\n               MOVE +1900                     TO WS-RETURN-CODE.\n\n       1900-TEST-LAST.\n           MOVE PARM01-SEL-DAYS               TO WS-LAST.\n           IF WS-LAST-SUF-1 NUMERIC\n               MOVE WS-LAST-SUFFIX            TO PARM01-SEL-DAYS\n               MOVE 7                         TO WS-HOLD-DURATION\n               MOVE ZERO                      TO WS-HOLD-CYCLE\n               MOVE SPACE                     TO WS-STV0400B-FIELDS\n               MOVE WS-1-CYMD                 TO STV0400B-DATA\n               MOVE 'CYMD  '                  TO STV0400B-IN\n               MOVE 'CMDE00'                  TO STV0400B-OUT\n               CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS\n               IF STV0400B-1X6 = 'ERROR'\n                   DISPLAY '**** Error calculating last date'\n                   DISPLAY '**** ' WS-1-CYMD\n                   MOVE +1900                 TO WS-RETURN-CODE\n               ELSE\n                   MOVE STV0400B-1X8(7: 2)    TO WS-1-CYMD-D\n                   SUBTRACT 6 FROM WS-1-CYMD-D-N\n           ELSE\n               DISPLAY '**** LST specified with no day entry '\n               MOVE +1900                     TO WS-RETURN-CODE.\n\n       2000-WRITE-OUTNOT.\n           WRITE OUTNOT-RECORD.\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0685B write error on OUTNOT '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +2000                     TO WS-RETURN-CODE.\n           ADD 1                              TO WS-MSG-CNT.\n\n       2000-REWRITE-PARM01.\n           REWRITE PARM01-RECORD.\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0685B rewrite error on PARM01 '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +2000                     TO WS-RETURN-CODE.\n\n      ************************************ END MIS0685B\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MIS0700B": {"ttr": 14343, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\"\\x00D\\x01\\x19\\x08o\\x01\\x192/\\x12A\\x01\\xdf\\x011\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.34", "flags": 0, "createdate": "2019-03-27T00:00:00", "modifydate": "2019-11-18T12:41:44", "lines": 479, "newlines": 305, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  MIS0700B: incremental delay process'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    MIS0700B.\n      **********************************************************CX003B\n      *@@@ C3 incremental delay process\n      ****************************************************************\n      *\n      *   I am interested in knowing if/where these programs\n      *   are used:       Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * Date written: 03/27/2019\n      * Author      : Jim Iannone\n      *\n      *    Force a gap between job runs\n      *\n      *    Even though like named jobs stack up in the run queue,\n      *      this tool will allow forcing a gap between them, or\n      *      between different jobs that pass the same job name to\n      *      this program.\n      *\n      *    first run - determine future time window x seconds ahead.\n      *    next run - if within calculated time window, delay until\n      *      out of window, then generate another window.  this will\n      *      prevent jobs from running within same timeframe.\n      *\n      *    NOTE:  this program calls delay program \"NEWWAIT\"\n      *           which resides on CBT tape #270 and requires\n      *           MACLIB from same tape number when compiling\n      *\n      ****************************************************************\n      * Date changed: mm/dd/yyyy username\n      *               comments...\n      ****************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  PARM01\n           RECORDING MODE F.\n       01  PARM01-RECORD.\n           05  PARM01-DOCU             PIC  X.\n           05  FILLER                  PIC  X.\n           05  PARM01-JOB              PIC  X(08).\n           05  FILLER                  PIC  X.\n           05  PARM01-END-CYMD         PIC  X(08).\n           05  FILLER                  PIC  X.\n           05  PARM01-END-HMS          PIC  X(06).\n           05  FILLER                  PIC  X(46).\n           05  FILLER                  PIC  X(08).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage MIS0700B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-TALLY                PIC S9(04)    VALUE ZERO COMP.\n           05  WS-SEC-N                PIC  9(05)    VALUE ZERO.\n           05  WS-DELAY                PIC  9(05)    VALUE ZERO.\n           05  WS-DELAY7               PIC  9(07)    VALUE ZERO.\n           05  WS-1-TOT-SECS           PIC  9(07)    VALUE ZERO.\n           05  WS-2-TOT-SECS           PIC  9(06)    VALUE ZERO.\n           05  WS-P-TOT-SECS           PIC  9(07)    VALUE ZERO.\n           05  WS-F-TOT-SECS           PIC  9(06)    VALUE ZERO.\n           05  WS-SEC-DIFF             PIC  9(05)    VALUE ZERO.\n           05  WS-DAYS-N               PIC  9(05)    VALUE ZERO.\n           05  WS-DAY-DIFF             PIC  9(07)    VALUE ZERO.\n           05  WS-LS-DATA              PIC  X(15)    VALUE SPACE.\n           05  FILLER REDEFINES WS-LS-DATA.\n               10  WS-LS-SECONDS       PIC  X(05).\n               10  WS-LS-JOB           PIC  X(08).\n               10  WS-LS-EXTRA         PIC  XX.\n           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.\n           05  WS-1-CYMD-N             PIC  9(08)    VALUE ZERO.\n           05  WS-2-CYMD-N             PIC  9(08)    VALUE ZERO.\n           05  WS-P-CYMD-N             PIC  9(08)    VALUE ZERO.\n           05  WS-F-CYMD-N             PIC  9(08)    VALUE ZERO.\n           05  WS-1-HMS-N              PIC  9(06)    VALUE ZERO.\n           05  FILLER REDEFINES WS-1-HMS-N.\n               10  WS-1-HMS-H          PIC  99.\n               10  WS-1-HMS-M          PIC  99.\n               10  WS-1-HMS-S          PIC  99.\n           05  WS-2-HMS-N              PIC  9(06)    VALUE ZERO.\n           05  FILLER REDEFINES WS-2-HMS-N.\n               10  WS-2-HMS-H          PIC  99.\n               10  WS-2-HMS-M          PIC  99.\n               10  WS-2-HMS-S          PIC  99.\n           05  WS-P-HMS-N              PIC  9(06)    VALUE ZERO.\n           05  FILLER REDEFINES WS-P-HMS-N.\n               10  WS-P-HMS-H          PIC  99.\n               10  WS-P-HMS-M          PIC  99.\n               10  WS-P-HMS-S          PIC  99.\n           05  WS-F-HMS-N              PIC  9(06)    VALUE ZERO.\n           05  FILLER REDEFINES WS-F-HMS-N.\n               10  WS-F-HMS-H          PIC  99.\n               10  WS-F-HMS-M          PIC  99.\n               10  WS-F-HMS-S          PIC  99.\n           05  WS-HOLD-HM8             PIC  X(08)    VALUE SPACE.\n           05  WS-HOLD-DAYS            PIC  XX       VALUE SPACE.\n           05  WS-CALL-STV0400B        PIC  X(08)    VALUE 'STV0400B'.\n           05  WS-INTRDR-END           PIC  X(05)    VALUE '/*EOF'.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-REWRITE-PARM01-CNT   PIC S9(07)    VALUE ZERO.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(04)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(04)    VALUE ZERO.\n           05  WS-SUB3                 PIC S9(04)    VALUE ZERO.\n\n      *   AMDCWAIT or NEWWAIT\n       01 NEWWAIT-DATA.\n           05  NEWWAIT-LEN             PIC S9999     VALUE +5 COMP.\n           05  NEWWAIT-DELAY           PIC  9(05).\n\n      *    year 2000 compatible date routine\n       01  WS-STV0400B-FIELDS.\n           05  STV0400B-DATA           PIC  X(10)    VALUE SPACE.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X6        PIC  X(06).\n               10  STV0400B-NBR        PIC  X(04).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-1X8        PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAYS       PIC  X(05).\n               10  FILLER              PIC  X(05).\n           05  FILLER REDEFINES STV0400B-DATA.\n               10  STV0400B-DAY        PIC  X(09).\n               10  STV0400B-DAY-NBR    PIC  X.\n           05  STV0400B-DATA2          PIC  X(10)    VALUE SPACE.\n           05  STV0400B-IN             PIC  X(06)    VALUE SPACE.\n           05  STV0400B-OUT            PIC  X(06)    VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  MIS0700B END  '.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELD.\n           05  LS-LENGTH               PIC S9(04)    COMP.\n           05  LS-DATA                 PIC  X(15).\n           05  FILLER REDEFINES LS-DATA.\n               10  LS-SECONDS          PIC  X(05).\n               10  LS-JOB              PIC  X(08).\n               10  LS-EXTRA            PIC  XX.\n\n      /\n\n       PROCEDURE DIVISION USING LS-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           MOVE +0000                         TO WS-RETURN-CODE.\n           PERFORM 0200-OPEN-FILES.\n           DISPLAY '    '.\n           DISPLAY '**** MIS0700B incremental delay process'.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-PARM01.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** MIS0700B cond code ' WS-RETURN-CODE\n                       ' set by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** MIS0700B EOJ encountered '.\n           DISPLAY '    '.\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN I-O    PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** MIS0700B open error on PARM01'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE PARM01.\n\n      *---------------------------------------\n      *    X\n      *---------------------------------------\n       0400-PROCESS-PARM01.\n\n           PERFORM 0500-GET-CURRENT-DATE.\n\n           PERFORM 0600-GET-LINKAGE.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0600-CALC-NEW-CURR-TIME\n               PERFORM 0700-LOAD-PARM01 THRU\n                       0700-LOAD-PARM01-EXIT.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 1000-PREPARE-DELAY.\n\n       0500-GET-CURRENT-DATE.\n\n           MOVE FUNCTION CURRENT-DATE(1: 8)   TO WS-1-CYMD WS-1-CYMD-N.\n           MOVE FUNCTION CURRENT-DATE(9: 6)   TO WS-1-HMS-N.\n\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-1-HMS-N                    TO STV0400B-1X8.\n           MOVE 'HMSM  '                      TO STV0400B-IN.\n           MOVE 'H:M:SM'                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-1X8                  TO WS-HOLD-HM8.\n\n       0600-GET-LINKAGE.\n           IF LS-LENGTH = ZERO\n               DISPLAY '**** Parm length is zero '\n               MOVE +0500                     TO WS-RETURN-CODE\n           ELSE\n           IF LS-LENGTH > LENGTH OF WS-LS-DATA\n               DISPLAY '**** Parm length is excessive '\n               MOVE +0500                     TO WS-RETURN-CODE\n           ELSE\n               MOVE LS-DATA(1: LS-LENGTH)     TO WS-LS-DATA.\n\n           IF WS-LS-SECONDS NUMERIC\n               MOVE WS-LS-SECONDS             TO WS-SEC-N\n               IF WS-SEC-N < 2\n                   MOVE 2                     TO WS-SEC-N\n               ELSE\n               IF WS-SEC-N > 14400\n                   MOVE 14400                 TO WS-SEC-N\n               ELSE\n                   CONTINUE\n           ELSE\n               MOVE 30                        TO WS-SEC-N.\n\n           DISPLAY '**** Number of seconds ahead      ' WS-SEC-N.\n           DISPLAY '**** Current date time         ' WS-1-CYMD\n                   '  '  WS-HOLD-HM8.\n\n\n           IF WS-LS-JOB = SPACE\n               MOVE 'MIS0700B'                TO WS-LS-JOB.\n\n           MOVE WS-1-CYMD                     TO WS-2-CYMD-N.\n\n       0600-CALC-NEW-CURR-TIME.\n           MOVE ZERO                          TO WS-2-TOT-SECS.\n           COMPUTE WS-2-TOT-SECS = (WS-1-HMS-H * 3600)\n                                 + (WS-1-HMS-M * 60)\n                                 + WS-1-HMS-S.\n           ADD WS-SEC-N                       TO WS-2-TOT-SECS.\n           IF WS-2-TOT-SECS > 86399\n               SUBTRACT 86400 FROM WS-2-TOT-SECS\n               PERFORM 0700-ADVANCE-2-DAY.\n           IF WS-2-TOT-SECS > 3599\n               COMPUTE WS-2-HMS-H = WS-2-TOT-SECS / 3600\n               COMPUTE WS-2-TOT-SECS = WS-2-TOT-SECS\n                                     - (WS-2-HMS-H * 3600)\n           ELSE\n               MOVE ZERO                      TO WS-2-HMS-H.\n           IF WS-2-TOT-SECS > 59\n               COMPUTE WS-2-HMS-M = WS-2-TOT-SECS / 60\n               COMPUTE WS-2-TOT-SECS = WS-2-TOT-SECS\n                                     - (WS-2-HMS-M * 60)\n           ELSE\n               MOVE ZERO                      TO WS-2-HMS-M.\n           MOVE WS-2-TOT-SECS                 TO WS-2-HMS-S.\n\n      *---------------------------------------\n      *    determine PARM01 values\n      *---------------------------------------\n       0700-LOAD-PARM01.\n           READ PARM01.\n           IF WS-STAT = 10\n               GO TO 0700-LOAD-PARM01-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** MIS0700B read error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0700                     TO WS-RETURN-CODE\n               GO TO 0700-LOAD-PARM01-EXIT.\n\n           IF PARM01-DOCU = '*'\n               GO TO 0700-LOAD-PARM01.\n\n           IF PARM01-JOB = WS-LS-JOB\n               PERFORM 0700-CHECK-PARM01-VALUES.\n\n           GO TO 0700-LOAD-PARM01.\n\n       0700-LOAD-PARM01-EXIT. EXIT.\n\n       0700-CHECK-PARM01-VALUES.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE PARM01-END-HMS                TO STV0400B-1X8.\n           MOVE 'HMSM  '                      TO STV0400B-IN.\n           MOVE 'H:M:SM'                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-1X8                  TO WS-HOLD-HM8.\n           DISPLAY '**** Prev parm date time       ' PARM01-END-CYMD\n                   '  '  WS-HOLD-HM8.\n\n           IF PARM01-END-CYMD = SPACE\n               MOVE WS-2-CYMD-N               TO PARM01-END-CYMD\n               MOVE WS-2-HMS-N                TO PARM01-END-HMS\n               PERFORM 0800-REWRITE-PARM01\n           ELSE\n           IF PARM01-END-CYMD NUMERIC\n             IF PARM01-END-HMS NUMERIC\n                 MOVE PARM01-END-CYMD         TO WS-P-CYMD-N\n                 MOVE PARM01-END-HMS          TO WS-P-HMS-N\n                 PERFORM 0700-COMPARE-TIME\n             ELSE\n                 MOVE WS-2-CYMD-N             TO PARM01-END-CYMD\n                 MOVE WS-2-HMS-N              TO PARM01-END-HMS\n                 PERFORM 0800-REWRITE-PARM01\n           ELSE\n               MOVE WS-2-CYMD-N               TO PARM01-END-CYMD\n               MOVE WS-2-HMS-N                TO PARM01-END-HMS\n               PERFORM 0800-REWRITE-PARM01.\n\n       0700-COMPARE-TIME.\n           MOVE ZERO                          TO WS-DAY-DIFF.\n           IF WS-P-CYMD-N = WS-1-CYMD-N\n             IF WS-P-HMS-N < WS-1-HMS-N\n                 MOVE WS-2-CYMD-N             TO PARM01-END-CYMD\n                 MOVE WS-2-HMS-N              TO PARM01-END-HMS\n                 PERFORM 0800-REWRITE-PARM01\n                 MOVE ZERO                    TO WS-DELAY\n             ELSE\n             IF WS-P-HMS-N > WS-1-HMS-N\n                 PERFORM 0700-GET-TIME-DIFF\n                 PERFORM 0700-CALC-FUTURE-PARM\n                 MOVE WS-F-CYMD-N             TO PARM01-END-CYMD\n                 MOVE WS-F-HMS-N              TO PARM01-END-HMS\n                 PERFORM 0800-REWRITE-PARM01\n             ELSE\n                 MOVE ZERO                    TO WS-DELAY\n           ELSE\n           IF WS-P-CYMD-N > WS-1-CYMD-N\n               PERFORM 0700-GET-DAY-DIFF\n               PERFORM 0700-GET-TIME-DIFF\n               PERFORM 0700-CALC-FUTURE-PARM\n               MOVE WS-F-CYMD-N               TO PARM01-END-CYMD\n               MOVE WS-F-HMS-N                TO PARM01-END-HMS\n               PERFORM 0800-REWRITE-PARM01\n           ELSE\n               MOVE WS-2-CYMD-N               TO PARM01-END-CYMD\n               MOVE WS-2-HMS-N                TO PARM01-END-HMS\n               PERFORM 0800-REWRITE-PARM01\n               MOVE ZERO                      TO WS-DELAY.\n\n       0700-CALC-FUTURE-PARM.\n           MOVE WS-P-CYMD-N                   TO WS-F-CYMD-N.\n           MOVE ZERO                          TO WS-F-TOT-SECS.\n           COMPUTE WS-F-TOT-SECS = (WS-P-HMS-H * 3600)\n                                 + (WS-P-HMS-M * 60)\n                                 + WS-P-HMS-S.\n           ADD WS-SEC-N                       TO WS-F-TOT-SECS.\n           IF WS-F-TOT-SECS > 86399\n               SUBTRACT 86400 FROM WS-F-TOT-SECS\n               PERFORM 0700-ADVANCE-F-DAY.\n           IF WS-F-TOT-SECS > 3599\n               COMPUTE WS-F-HMS-H = WS-F-TOT-SECS / 3600\n               COMPUTE WS-F-TOT-SECS = WS-F-TOT-SECS\n                                     - (WS-F-HMS-H * 3600)\n           ELSE\n               MOVE ZERO                      TO WS-F-HMS-H.\n           IF WS-F-TOT-SECS > 59\n               COMPUTE WS-F-HMS-M = WS-F-TOT-SECS / 60\n               COMPUTE WS-F-TOT-SECS = WS-F-TOT-SECS\n                                     - (WS-F-HMS-M * 60)\n           ELSE\n               MOVE ZERO                      TO WS-F-HMS-M.\n           MOVE WS-F-TOT-SECS                 TO WS-F-HMS-S.\n\n       0700-ADVANCE-2-DAY.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-2-CYMD-N                   TO STV0400B-1X8.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE '+00001'                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-1X8                  TO WS-2-CYMD-N.\n\n       0700-ADVANCE-F-DAY.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-F-CYMD-N                   TO STV0400B-1X8.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE '+00001'                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-1X8                  TO WS-F-CYMD-N.\n\n       0700-GET-DAY-DIFF.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-1-CYMD-N                   TO STV0400B-1X8.\n           MOVE WS-P-CYMD-N                   TO STV0400B-DATA2.\n           MOVE 'CYMD  '                      TO STV0400B-IN.\n           MOVE 'DAYS  '                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-DAYS                 TO WS-DAYS-N.\n           COMPUTE WS-DAY-DIFF = WS-DAYS-N * 86400.\n\n       0700-GET-TIME-DIFF.\n           MOVE ZERO                          TO WS-1-TOT-SECS.\n           MOVE ZERO                          TO WS-P-TOT-SECS.\n           MOVE ZERO                          TO WS-DELAY.\n           COMPUTE WS-1-TOT-SECS = (WS-1-HMS-H * 3600)\n                                 + (WS-1-HMS-M * 60)\n                                 + WS-1-HMS-S.\n           COMPUTE WS-P-TOT-SECS = (WS-P-HMS-H * 3600)\n                                 + (WS-P-HMS-M * 60)\n                                 + WS-P-HMS-S.\n           ADD WS-DAY-DIFF                    TO WS-P-TOT-SECS.\n      *    DISPLAY '**** Curr seconds                ' WS-1-TOT-SECS.\n      *    DISPLAY '**** Parm seconds                ' WS-P-TOT-SECS.\n           COMPUTE WS-DELAY7 = WS-P-TOT-SECS - WS-1-TOT-SECS.\n           IF WS-DELAY7 > 86400\n               MOVE 86400                     TO WS-DELAY\n               DISPLAY '**** Calculated seconds > 86400 '\n           ELSE\n               MOVE WS-DELAY7                 TO WS-DELAY.\n      *        DISPLAY '**** Difference                   ' WS-DELAY.\n\n       0800-REWRITE-PARM01.\n           PERFORM 0800-HOLD-PARM-TIME.\n           REWRITE PARM01-RECORD.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-REWRITE-PARM01-CNT\n           ELSE\n               DISPLAY '**** MIS0700B rewrite error on PARM01'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n       0800-HOLD-PARM-TIME.\n           MOVE PARM01-END-CYMD               TO WS-P-CYMD-N.\n           MOVE PARM01-END-HMS                TO WS-P-HMS-N.\n\n       1000-PREPARE-DELAY.\n           IF WS-DELAY = ZERO\n               DISPLAY '**** No delay required'\n               PERFORM 1100-SHOW-NEW-TIME\n           ELSE\n               DISPLAY '**** Delay seconds                ' WS-DELAY\n               PERFORM 1100-SHOW-NEW-TIME\n               PERFORM 1000-DELAY.\n\n       1000-DELAY.\n           MOVE WS-DELAY                      TO NEWWAIT-DELAY.\n           CALL 'NEWWAIT' USING NEWWAIT-DATA.\n\n       1100-SHOW-NEW-TIME.\n           MOVE SPACE                         TO WS-STV0400B-FIELDS.\n           MOVE WS-P-HMS-N                    TO STV0400B-1X8.\n           MOVE 'HMSM  '                      TO STV0400B-IN.\n           MOVE 'H:M:SM'                      TO STV0400B-OUT.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           MOVE STV0400B-1X8                  TO WS-HOLD-HM8.\n\n           DISPLAY '**** New parm date time        ' WS-P-CYMD-N\n                   '  '  WS-HOLD-HM8.\n\n      ************************************ END MIS0700B\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MIS10": {"ttr": 14597, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00)\\x01\\x19\\x07/\\x01\\x192?\\x11\\x16\\x00\\x17\\x00\\x18\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T11:16:29", "lines": 23, "newlines": 24, "modlines": 0, "user": "IANNONE"}, "text": "//*--------------------------------------------------\n//*   MIS0500B loops through the specified JCL and\n//*   updates symbolic strings\n//*\n//*   see MIS0500B for complete documentation\n//*--------------------------------------------------\n//*   MIS0500B, MIS0425B, and CHNGFILE all reference the\n//*   offset parm MIS10010.  when these programs generate\n//*   dates (as opposed to altering existing dates), they\n//*   can take the offset value into account, if requested.\n//*\n//*   OFFX=Y    consider offset\n//*   OFFX=N    ignore offset, use system date\n//*--------------------------------------------------\n//S010     EXEC PGM=MIS0500B,REGION=5120K,\n//             PARM='&OFFX/'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//OFFSET   DD  DISP=SHR,DSN=userid.ISPF.FILE488(MIS10010)\n//JOBJCL   DD  DISP=SHR,DSN=&JOBLOC(&JOBJCL)           *UPDATE\n//*--------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS10010": {"ttr": 14599, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x15\\x01\\x19\\x05\\x9f\\x01\\x19\\x05\\x9f\\t\\x08\\x00$\\x00$\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-02-28T00:00:00", "modifydate": "2019-02-28T09:08:15", "lines": 36, "newlines": 36, "modlines": 0, "user": "IANNONE"}, "text": "*\n*   IMPORTANT --------------------------------------------------\n*\n*   !! POST CHANGES TO THIS MEMBER FOR ALL OPERATORS TO SEE   !!\n*\n*   !! CHANGE BACK AFTER DELAYED PROCESSING COMPLETES         !!\n*\n*   IMPORTANT --------------------------------------------------\n*\n*\n*   THIS STATIC PARM IS USED TO OVERRIDE THE CURRENT DATE\n*   USED BY THE J-JOBS\n*\n*   NORMAL SETTING:   -00000\n*\n*   NORMAL OVERRIDE:  -00001\n*     WHEN BATCH PROCESSING IS DELAYED SUCH THAT IT RUNS\n*     PAST MIDNIGHT, -00001 SAYS: SUBTRACT ONE FROM CURRENT\n*     DATE WHEN DERIVING P-JOB SYMBOLIC DATES.\n*\n*\n*   .----  POSITIONS 2-7\n*   |      -00000 = USE CURRENT DATE\n*   |      -00001 = USE YESTERDAYS DATE\n*   |      -##### = USE ##### DAYS BEFORE CURRENT DATE\n*   |      +##### = USE ##### DAYS AFTER CURRENT DATE\n*   |\n*   |            .---- POSITION 18\n*   |            |     MID99 SETS THIS TO 'Y'.\n*   |            |     MID98 RESETS THIS TO 'N'.\n*   |            |     IF THIS IS STILL 'Y' WHEN MID99 RUNS THE\n*   |            |     FOLLOWING NIGHT, THE OFFSET IS SET TO\n*   |            |     -00001.\n*   |            |\n*\n -00000          N\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MIS11": {"ttr": 14601, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00W\\x01\\x19\\x15\\x1f\\x01\\x192?\\x11\\x16\\x00:\\x00;\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2019-05-31T00:00:00", "modifydate": "2019-11-19T11:16:57", "lines": 58, "newlines": 59, "modlines": 0, "user": "IANNONE"}, "text": "//MIS11    PROC FCLTY=1,\n//             PRCS=Y,\n//             DAYS=100,\n//             DELY=006,\n//             OVRD=N\n//*--------------------------------------------------\n//*  delete work dataset\n//*--------------------------------------------------\n//S010     EXEC PGM=IEFBR14,\n//             REGION=5120K,\n//*            RESTART=S010,\n//             COND=(0,NE)\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//DASD     DD  DSN=SYSP.STVSSD.RMS&FCLTY..XREF,\n//             DISP=(MOD,DELETE,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(1,1))\n//*------------------------------------------------\n//*  generate an RMS cross reference\n//*--------------------------------------------------\n//RM80001  EXEC QSERV&FCLTY,REGION=5120K,\n//*            RESTART=S010,\n//             COND=(0,NE)\n//RM80001.QXSTATS DD  DSN=SYSP.STVSSD.RMS&FCLTY..XREF,\n//             DISP=(NEW,CATLG,KEEP),\n//             UNIT=SYSDA,DATACLAS=D133PS\n//RM80001.QXPARMS DD DISP=SHR,DSN=userid.ISPF.FILE488(MIS11010)\n//*------------------------------------------------\n//*   loop through the cross reference and submit\n//*   RMS purge commands through the internal reader\n//*   for non-distributed reports older than xxx number of days\n//*\n//*   facility code  c  = rms repository 1\n//*   facility code  1  = rms repository 2\n//*   process   y or n  = generate internal reader commands\n//*   days minimum      = 032\n//*   delay minimum     = 002\n//*\n//*   use MIS11030 to specifiy a mask. only reports matching\n//*   the mask will be deleted.\n//*\n//*--------------------------------------------------\n//S030     EXEC PGM=MIS0380B,\n//             REGION=5120K,\n//*            RESTART=S010,\n//             COND=(0,NE),\n//             PARM='&FCLTY&PRCS&DAYS&DELY&OVRD/'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//RMSDEL   DD  DSN=SYSP.STVSSD.RMS&FCLTY..XREF,        *INPUT\n//             DISP=(OLD,KEEP,KEEP)\n//PARM01   DD  DISP=SHR,DSN=userid.ISPF.FILE488(MIS11030)\n//INTRDR   DD  SYSOUT=(A,INTRDR)\n//*------------------------------------------------\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS11010": {"ttr": 14603, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x14\\x01\\x19\\x15\\x1f\\x01\\x19\\x15\\x1f\\x11W\\x00\\x03\\x00\\x03\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-05-31T00:00:00", "modifydate": "2019-05-31T11:57:14", "lines": 3, "newlines": 3, "modlines": 0, "user": "IANNONE"}, "text": " SELECT -\n   GNAME (*) -\n   CROSS*REFERENCE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MIS11030": {"ttr": 14605, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x08\\x01\\x19\\x15\\x1f\\x01\\x191\\x9f\\x13U\\x00\\x15\\x00\\x15\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-05-31T00:00:00", "modifydate": "2019-11-15T13:55:08", "lines": 21, "newlines": 21, "modlines": 0, "user": "IANNONE"}, "text": "*\n*  Use this parm to limit which reports MIS0380B selects\n*  for deletion.  no entry is the default.\n*\n*  !!  remember to restore to the default settings after running !!\n*\n*  specify up to 20 reports in positions 2-9\n*\n*  specify a fully qualified report name\n*\n*  or a report name mask using generics\n*  % = any one character\n*  * = any number of characters\n*\n*  Example:                *\n*                          *--------\n*                           MIS0380B\n*                           IBIL%TA6\n*                           ZX*\n*\n*--------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS12": {"ttr": 14607, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\t\\x01\\x19\\x07/\\x01\\x192?\\x11\\x17\\x00\\x16\\x00\\x17\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T11:17:09", "lines": 22, "newlines": 23, "modlines": 0, "user": "IANNONE"}, "text": "//*-------------------------------------------\n//*   MIS0133B or MIS0081B loops through a report,\n//*   making changes or inserting records as requested\n//*   via parm01\n//*-------------------------------------------\n//S070     EXEC PGM=MIS0133B,REGION=5120K,\n//*            RESTART=J010.S064,\n//             PARM='          /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//INFILE   DD  DSN=input file .MIS12.IBILLSHC.SC,\n//             DISP=(OLD,KEEP,KEEP)\n//OUTFILE  DD  DSN=output file .MIS12.IBILLSHC.OUT.SC,\n//             DISP=(NEW,CATLG,DELETE),\n//             DATACLAS=D133PS,SPACE=(TRK,(90,30))\n//INRCD    DD  DUMMY,\n//             DISP=(OLD,KEEP,KEEP)\n//PARM01   DD  DSN=userid.ISPF.FILE488(MIS12070),\n//             DISP=SHR\n//*--------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS12070": {"ttr": 14609, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\"\\x01\\x19\\x07/\\x01\\x191\\x9f\\x13V\\x00\\x08\\x00\\x08\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-15T13:56:22", "lines": 8, "newlines": 8, "modlines": 0, "user": "IANNONE"}, "text": "*\n*  search for string in printed report.\n*  update data on a line relative to found string.\n*\n*123456789012 LL PPP  OF+ 123456789012 LL PPP I\n  1           03 083  03- -            01 082 0\n*\n*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS20": {"ttr": 14611, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x17\\x01\\x19\\x07/\\x01\\x192?\\x11\\x17\\x00\\x10\\x00\\x10\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T11:17:17", "lines": 16, "newlines": 16, "modlines": 0, "user": "IANNONE"}, "text": "//MIS20    PROC\n//*-------------------------------------------\n//*  backup all but the master catalog\n//*-------------------------------------------\n//S010     EXEC PGM=ADRDSSU,REGION=5120K\n//SYSPRINT DD  SYSOUT=X\n//TAPE     DD  DSN=SYSP.CATALOG.BKUP.P&YMDX..S&RUNX,\n//             DISP=(NEW,CATLG,DELETE),\n//             RETPD=20,\n//             UNIT=(CART,,DEFER)\n//SYSIN    DD  *\n      DUMP DATASET(INCLUDE(USER.CATALOG.C001       -\n                           USER.CATALOG.C002))     -\n           OUTDD(TAPE)     WAIT(3,10)              -\n           TOL(ENQF)       CAN         SPHERE      -\n           OPT(3)          COMPRESS\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS34": {"ttr": 14613, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x003\\x01\\x19\\x07/\\x01\\x192?\\x11\\x17\\x005\\x007\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T11:17:33", "lines": 53, "newlines": 55, "modlines": 0, "user": "IANNONE"}, "text": "//MIS34    PROC SOUTD=D,\n//             SOUTC=X\n//*---------------------------------------------------\n//S010     EXEC PGM=MIS0475B,\n//             REGION=5120K,\n//             COND=(0,NE)\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//HSMLIST  DD  DSN=HSMACT.H1.SUMMLIST,\n//             DISP=(OLD,KEEP,KEEP)\n//PARM01   DD  DISP=SHR,DSN=userid.ISPF.FILE488(MIS34010)\n//HSMOUT   DD  DSN=HSMACT.H1.SUMMLIST.TEMP,\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(150,15)),\n//             DCB=(DSORG=PS,LRECL=132,RECFM=FB)\n//*---------------------------------------------------\n//*  delete HSM activity file\n//*---------------------------------------------------\n//S020     EXEC PGM=IDCAMS,\n//             REGION=5120K,\n//             COND=(0,NE)\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=userid.ISPF.FILE488(MIS34020),\n//             DISP=SHR\n//*---------------------------------------------------\n//*  write contents back to redefined file\n//*---------------------------------------------------\n//S030   EXEC  PGM=IEBGENER,\n//             COND=(0,NE)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSN=HSMACT.H1.SUMMLIST.TEMP,\n//             DISP=(OLD,KEEP,KEEP)\n//SYSUT2   DD  DSN=HSMACT.H1.SUMMLIST,\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,MGMTCLAS=MS4NN,\n//             SPACE=(TRK,(150,15)),\n//             DCB=(DSORG=PS,LRECL=132,RECFM=FB)\n//SYSIN    DD  DUMMY\n//*---------------------------------------------------\n//*  delete HSM work file\n//*---------------------------------------------------\n//S040     EXEC PGM=IDCAMS,\n//             REGION=5120K,\n//             COND=(0,NE)\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DSN=userid.ISPF.FILE488(MIS34040),\n//             DISP=SHR\n//*---------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS34010": {"ttr": 14615, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x08\\x01\\x19\\x07/\\x01\\x191\\x9f\\x14\\x03\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-15T14:03:08", "lines": 14, "newlines": 14, "modlines": 0, "user": "IANNONE"}, "text": "*\n* Retention days for HSM activity messages\n*\n* TEMPORARY                   20\n* RECYCLE                     30\n* EXPIREBV                    40\n* BACKUP                      65\n* DUMP                       120\n* MIGRATION                  180\n* VTOC (WEEKLY DUMPS)        240\n* VTOC (MONTHLY DUMPS)       405\n*\n 0020 0030 0040 0065 0095 0120 0180 0240 0310 0405\n*   1    2    3    4    5    6    7    8    9    0\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MIS34020": {"ttr": 14617, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x96\\x17\\x9f\\x00\\x96\\x17\\x9f\\x10\\x14\\x00\\x01\\x00\\x01\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-06-27T00:00:00", "modifydate": "1996-06-27T10:14:00", "lines": 1, "newlines": 1, "modlines": 0, "user": "IANNONE"}, "text": "   DELETE HSMACT.H1.SUMMLIST NONVSAM PURGE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MIS34040": {"ttr": 14619, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x96\\x18\\x0f\\x00\\x96\\x18\\x0f\\x02\\x01\\x00\\x01\\x00\\x01\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1996-06-28T00:00:00", "modifydate": "1996-06-28T02:01:00", "lines": 1, "newlines": 1, "modlines": 0, "user": "IANNONE"}, "text": "   DELETE HSMACT.H1.SUMMLIST.TEMP NONVSAM PURGE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "M0425B": {"ttr": 14621, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00P\\x01\\x191\\x9f\\x01\\x192?\\x11\\x17\\x00\\x13\\x00\\x0c\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2019-11-15T00:00:00", "modifydate": "2019-11-19T11:17:50", "lines": 19, "newlines": 12, "modlines": 0, "user": "IANNONE"}, "text": "//useridM  JOB (8231,'TEST MIS0425B'),\n//             'TEST MIS0425B',CLASS=x,\n//             MSGCLASS=x,\n//             MSGLEVEL=1\n//*----------------------------------------------------------\n//*\n//* place MM/DD/CCYY for length of 10 into record 8 position 23\n//* CMD002 says to calculate current date minus two days\n//*\n//*----------------------------------------------------------\n//S010     EXEC PGM=MIS0425B,REGION=5120K,\n//             PARM='MDC1023008NCMD002/'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSOUT   DD  SYSOUT=*\n//PARMFX   DD  DISP=SHR,DSN=userid.ISPF.FILE488(             )\n//OFFSET   DD  DISP=SHR,DSN=userid.ISPF.FILE488(MIS10010)\n//*----------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "M0655A": {"ttr": 14850, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00Y\\x01\\x19\\x07O\\x01\\x192O\\x081\\x00\\x14\\x00\\x0f\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2019-03-15T00:00:00", "modifydate": "2019-11-20T08:31:59", "lines": 20, "newlines": 15, "modlines": 0, "user": "IANNONE"}, "text": "//*-------------------------------------------------\n//*  Based on entries in M0655A02, this step will wait\n//*  up to 5 hours for another job to finish.\n//*\n//*  Delay is two minutes and maxloop is 150.\n//*  300 minutes = 5 hours.\n//*-------------------------------------------------\n//S005     EXEC PGM=MIS0655B,\n//             REGION=5120K,\n//             COND=(0,NE),\n//             PARM='jobname   /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//PARM01   DD  DISP=SHR,DSN=userid.ISPF.FILE488(M0655A01)\n//PARM02   DD  DISP=SHR,DSN=userid.ISPF.FILE488(M0655A02)\n//TRACK1   DD  DISP=SHR,DSN=userid.ISPF.FILE488(M0655A0T),\n//             FREE=CLOSE\n//*-------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "M0655A0T": {"ttr": 14852, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x15\\x01\\x19\\t?\\x01\\x19\\t?\\x15\\x11\\x00\\x01\\x00\\x01\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-04-03T00:00:00", "modifydate": "2019-04-03T15:11:15", "lines": 1, "newlines": 1, "modlines": 0, "user": "IANNONE"}, "text": "WAIT 093 140544\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "M0655A01": {"ttr": 14854, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x008\\x01\\x19\\x07O\\x01\\x19\\tO\\x11X\\x00\\x19\\x00\\x17\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2019-03-15T00:00:00", "modifydate": "2019-04-04T11:58:38", "lines": 25, "newlines": 23, "modlines": 0, "user": "IANNONE"}, "text": "Y          Value must reside at position 1 line 1\n\n   Y/N    \"JOB A\" updates this setting.  Used by \"JOB B\"\n          to determine if \"JOB B\" should wait or run.\n\n          The waiting job contains MIS0655B which checks\n          this member and waits for a 'Y' unless\n          reverse = Y in PARM02, then it waits for 'N'.\n\n   H      H = hold.  Job will wait for Y or N.\n          Have your system set this to H prior to CICS shutdown,\n          and set to Y after CICS fully up.\n\n   #      To manually cause the job waiting on this parm\n          to issue a cond code, change value above to:\n          0  =   issue cond code 0000\n          4  =   issue cond code 0004\n          6  =   issue cond code 0016\n          8  =   issue cond code 0008\n\n   X      Job interval code:\n          A01B02C03D04E05F07G10I12J15K18L20M25O30P35Q40R45S50T55U60\n          Alpha value is converted to number of minutes (ie: A=01).\n          The next job to reference this parm with MIS0655B will\n          delay ## minutes before running.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "M0655A02": {"ttr": 14856, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x007\\x01\\x19\\x07O\\x01\\x190\\x9f\\tS\\x00[\\x00R\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2019-03-15T00:00:00", "modifydate": "2019-11-05T09:53:37", "lines": 91, "newlines": 82, "modlines": 0, "user": "IANNONE"}, "text": "*\n* MIS0655B allows batch jobs to remain in a wait state until\n* some event occurs.  MIS0655B learns of the event by testing\n* a static parm member:  'N' = wait,  'Y' = run.\n*\n* This parm is used to pass parameters to MIS0655B.\n*\n*-------------------------------------------------------------------\n*\n* CICS message switch\n*   If this is waiting for CICS itself, set to Y\n*   If waiting for some other event, set to N\n*                 Y or N\n*-------------    --------------------------------------------------\n cics             N\n*\n* Message counter for output\n*   Every NNth delay time, send a message to the operators\n*                 2 digit numeric\n*-------------    --------------------------------------------------\n msgcnt           60\n*\n* Delay seconds in-between retests of the parm\n*                 5 digit numeric, 00020 minimum\n*-------------    --------------------------------------------------\n delay            00120\n*\n* Message\n*   Only used if cics = N above\n*   Leave blank to skip message\n*   Message will not highlight unless CAWU151I prefixes message,\n*     assuming console=Y below\n*                 JJJJJJJJ is replaced with job name (via PARM=)\n*                 TTTTT    is replaced with time (below)\n*                 50 bytes\n*-------------    --------------------------------------------------\n*message          CAWU151I waiting for specified time TTTTT\n*\n* Stagger startup multiplier (in seconds).  Multiplied against the\n*   job restart order to increment delay time for staggered jobs.\n*   Only used if cics = Y above\n*                 3 digit numeric, 060 minimum\n*-------------    --------------------------------------------------\n stagmult         000\n*\n* Limit number of delay loops - issue maxloopcode when reached\n*                 3 digit numeric\n*-------------    --------------------------------------------------\n maxloop          150\n*\n*                 4 digit numeric, 4095 max  or 'ABND'\n*-------------    --------------------------------------------------\n maxloopcode      0004\n*\n* Number of seconds to keep job waiting after the parm is set to Y\n*   Only used if cics = N above\n*                 5 digit numeric\n*-------------    --------------------------------------------------\n postwait         00000\n*\n* To switch the way MIS0655B interprets the parm value such that\n*   'Y' = wait,  'N' = run, set this to 'Y'.  Also reverses string\n*   search logic... wait if string found, run when string removed.\n*                 Y or N\n*-------------    --------------------------------------------------\n reverse          N\n*\n* Wait for a specified time of day\n*    The program will wait for both the PARM01 entry and the\n*        time of day to be true before continuing\n*    If submitted before time: wait until time\n*    If submitted after time: run if within 12 hour post-time window\n*                 5 digit military time (ex:  03:02 or 14:45)\n*-------------    --------------------------------------------------\n time\n*\n* Wait for a specified string to appear in PARM01\n*                 position (000 = search all columns)\n*                 |   start rcd (000 = search from bof)\n*                 |   |   end rcd (000 = search to eof)\n*                 |   |   |   up to a 30 byte string\n*                 |   |   |   |\n*                 000 000 000 ....+....0....+....2....+....3\n*-------------    --------------------------------------------------\n string           000 000 000\n*\n* Generate \"CAWU151I\" messages to console\n*                 Y or N\n*-------------    --------------------------------------------------\n console          N\n*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "M0655B": {"ttr": 14859, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00B\\x01\\x19\\x07O\\x01\\x192O\\x082\\x00\\x1e\\x00\\x1d\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2019-03-15T00:00:00", "modifydate": "2019-11-20T08:32:42", "lines": 30, "newlines": 29, "modlines": 0, "user": "IANNONE"}, "text": "//useridN  JOB (8116,'test MIS0655B batch wait process'),\n//             'test MIS0655B',CLASS=x,\n//             MSGCLASS=x,REGION=20M,\n//*            RESTART=J020.S005,\n//*            TYPRUN=SCAN,\n//             MSGLEVEL=1\n//*\n//PROCLIB  JCLLIB ORDER=(APSP.PROCLIB,\n//             PLSMS.SMSSM00L.P0000.PROC)\n//*\n//*--------------------------------------------------\n//*  Wait for CICS to be available\n//*  Wait for a specified time (M0655B02 wait until 8:20pm)\n//*  Wait for a job to finish  (M0655B03)\n//*  Wait for a change to an input parm\n//*--------------------------------------------------\n//WAIT1    EXEC PGM=MIS0655B,\n//             REGION=5120K,\n//             COND=(0,NE),\n//             PARM='useridN   /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//PARM01   DD  DISP=SHR,DSN=userid.ISPF.FILE488(M0655B01)\n//PARM02   DD  DISP=SHR,DSN=userid.ISPF.FILE488(M0655B02)\n//*ARM02   DD  DISP=SHR,DSN=userid.ISPF.FILE488(M0655B03)\n//TRACK1   DD  DISP=SHR,DSN=userid.ISPF.FILE488(M0655B0T),\n//             FREE=CLOSE\n//*-------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "M0655B0T": {"ttr": 14861, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00%\\x01\\x19\\t?\\x01\\x19\\t?\\x15\\x11\\x00\\x01\\x00\\x01\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-04-03T00:00:00", "modifydate": "2019-04-03T15:11:25", "lines": 1, "newlines": 1, "modlines": 0, "user": "IANNONE"}, "text": "WAIT 093 140544\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "M0655B01": {"ttr": 14863, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00)\\x01\\x19\\x07O\\x01\\x19\\tO\\x11X\\x00\"\\x00\\x0b\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2019-03-15T00:00:00", "modifydate": "2019-04-04T11:58:29", "lines": 34, "newlines": 11, "modlines": 0, "user": "IANNONE"}, "text": "Y         Value must reside at position 1 line 1\n\n          Referenced by MIS0655B\n\n          {comments based on how MIS0655B is being used}\n          Set to Y.  Job will look at time of day, rather\n          than this setting, to determine when to run\n\n\n   Y/N    {note: list which jobs update this setting}\n          {note: list which jobs reference this setting}\n\n   H      H = hold.  Job will wait for Y or N.\n          Have your system set this to H prior to CICS shutdown,\n          and set to Y after CICS fully up.\n\n          The waiting job contains MIS0655B which checks\n          this member and waits for a 'Y' unless\n          reverse = Y in PARM02, then it waits for 'N'.\n\n          To manually cause the job waiting on this parm\n          to issue a cond code and terminate:\n          Change Y or N above to   0  =   issue cond code 0000\n                                   4  =   issue cond code 0004\n                                   8  =   issue cond code 0008\n                                   6  =   issue cond code 0016\n\n\n   X      Job interval code:\n          A01B02C03D04E05F07G10I12J15K18L20M25O30P35Q40R45S50T55U60\n          Alpha value is converted to number of minutes (ie: A=01).\n          The next job to reference this parm with MIS0655B will\n          delay ## minutes before running.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "M0655B02": {"ttr": 14865, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00R\\x01\\x19\\x07O\\x01\\x190\\x9f\\tS\\x00[\\x00R\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2019-03-15T00:00:00", "modifydate": "2019-11-05T09:53:52", "lines": 91, "newlines": 82, "modlines": 0, "user": "IANNONE"}, "text": "*\n* MIS0655B allows batch jobs to remain in a wait state until\n* some event occurs.  MIS0655B learns of the event by testing\n* a static parm member:  'N' = wait,  'Y' = run.\n*\n* This parm is used to pass parameters to MIS0655B.\n*\n*-------------------------------------------------------------------\n*\n* CICS message switch\n*   If this is waiting for CICS itself, set to Y\n*   If waiting for some other event, set to N\n*                 Y or N\n*-------------    --------------------------------------------------\n cics             N\n*\n* Message counter for output\n*   Every NNth delay time, send a message to the operators\n*                 2 digit numeric\n*-------------    --------------------------------------------------\n msgcnt           30\n*\n* Delay seconds in-between retests of the parm\n*                 5 digit numeric, 00020 minimum\n*-------------    --------------------------------------------------\n delay            00240\n*\n* Message\n*   Only used if cics = N above\n*   Leave blank to skip message\n*   Message will not highlight unless CAWU151I prefixes message,\n*     assuming console=Y below\n*                 JJJJJJJJ is replaced with job name (via PARM=)\n*                 TTTTT    is replaced with time (below)\n*                 50 bytes\n*-------------    --------------------------------------------------\n message          CAWU151I waiting for specified time TTTTT\n*\n* Stagger startup multiplier (in seconds).  Multiplied against the\n*   job restart order to increment delay time for staggered jobs.\n*   Only used if cics = Y above\n*                 3 digit numeric, 060 minimum\n*-------------    --------------------------------------------------\n stagmult         000\n*\n* Limit number of delay loops - issue maxloopcode when reached\n*                 3 digit numeric\n*-------------    --------------------------------------------------\n maxloop          000\n*\n*                 4 digit numeric, 4095 max  or 'ABND'\n*-------------    --------------------------------------------------\n maxloopcode      0000\n*\n* Number of seconds to keep job waiting after the parm is set to Y\n*   Only used if cics = N above\n*                 5 digit numeric\n*-------------    --------------------------------------------------\n postwait         00000\n*\n* To switch the way MIS0655B interprets the parm value such that\n*   'Y' = wait,  'N' = run, set this to 'Y'.  Also reverses string\n*   search logic... wait if string found, run when string removed.\n*                 Y or N\n*-------------    --------------------------------------------------\n reverse          N\n*\n* Wait for a specified time of day\n*    The program will wait for both the PARM01 entry and the\n*        time of day to be true before continuing\n*    If submitted before time: wait until time\n*    If submitted after time: run if within 12 hour post-time window\n*                 5 digit military time (ex:  03:02 or 14:45)\n*-------------    --------------------------------------------------\n time             20:20\n*\n* Wait for a specified string to appear in PARM01\n*                 position (000 = search all columns)\n*                 |   start rcd (000 = search from bof)\n*                 |   |   end rcd (000 = search to eof)\n*                 |   |   |   up to a 30 byte string\n*                 |   |   |   |\n*                 000 000 000 ....+....0....+....2....+....3\n*-------------    --------------------------------------------------\n string           000 000 000\n*\n* Generate \"CAWU151I\" messages to console\n*                 Y or N\n*-------------    --------------------------------------------------\n console          N\n*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "M0655B03": {"ttr": 14868, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x04\\x01\\x19\\x07O\\x01\\x190\\x9f\\tT\\x00[\\x00R\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2019-03-15T00:00:00", "modifydate": "2019-11-05T09:54:04", "lines": 91, "newlines": 82, "modlines": 0, "user": "IANNONE"}, "text": "*\n* MIS0655B allows batch jobs to remain in a wait state until\n* some event occurs.  MIS0655B learns of the event by testing\n* a static parm member:  'N' = wait,  'Y' = run.\n*\n* This parm is used to pass parameters to MIS0655B.\n*\n*-------------------------------------------------------------------\n*\n* CICS message switch\n*   If this is waiting for CICS itself, set to Y\n*   If waiting for some other event, set to N\n*                 Y or N\n*-------------    --------------------------------------------------\n cics             N\n*\n* Message counter for output\n*   Every NNth delay time, send a message to the operators\n*                 2 digit numeric\n*-------------    --------------------------------------------------\n msgcnt           20\n*\n* Delay seconds in-between retests of the parm\n*                 5 digit numeric, 00020 minimum\n*-------------    --------------------------------------------------\n delay            00180\n*\n* Message\n*   Only used if cics = N above\n*   Leave blank to skip message\n*   Message will not highlight unless CAWU151I prefixes message,\n*     assuming console=Y below\n*                 JJJJJJJJ is replaced with job name (via PARM=)\n*                 TTTTT    is replaced with time (below)\n*                 50 bytes\n*-------------    --------------------------------------------------\n message          CAWU151I JJJJJJJJ waiting for job2\n*\n* Stagger startup multiplier (in seconds).  Multiplied against the\n*   job restart order to increment delay time for staggered jobs.\n*   Only used if cics = Y above\n*                 3 digit numeric, 060 minimum\n*-------------    --------------------------------------------------\n stagmult         000\n*\n* Limit number of delay loops - issue maxloopcode when reached\n*                 3 digit numeric\n*-------------    --------------------------------------------------\n maxloop          000\n*\n*                 4 digit numeric, 4095 max  or 'ABND'\n*-------------    --------------------------------------------------\n maxloopcode      0000\n*\n* Number of seconds to keep job waiting after the parm is set to Y\n*   Only used if cics = N above\n*                 5 digit numeric\n*-------------    --------------------------------------------------\n postwait         00000\n*\n* To switch the way MIS0655B interprets the parm value such that\n*   'Y' = wait,  'N' = run, set this to 'Y'.  Also reverses string\n*   search logic... wait if string found, run when string removed.\n*                 Y or N\n*-------------    --------------------------------------------------\n reverse          N\n*\n* Wait for a specified time of day\n*    The program will wait for both the PARM01 entry and the\n*        time of day to be true before continuing\n*    If submitted before time: wait until time\n*    If submitted after time: run if within 12 hour post-time window\n*                 5 digit military time (ex:  03:02 or 14:45)\n*-------------    --------------------------------------------------\n time\n*\n* Wait for a specified string to appear in PARM01\n*                 position (000 = search all columns)\n*                 |   start rcd (000 = search from bof)\n*                 |   |   end rcd (000 = search to eof)\n*                 |   |   |   up to a 30 byte string\n*                 |   |   |   |\n*                 000 000 000 ....+....0....+....2....+....3\n*-------------    --------------------------------------------------\n string           000 000 000\n*\n* Generate \"CAWU151I\" messages to console\n*                 Y or N\n*-------------    --------------------------------------------------\n console          N\n*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "M0685B": {"ttr": 14871, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x19\\x01\\x19\\x07?\\x01\\x192O\\x08%\\x000\\x00>\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-11-20T08:25:19", "lines": 48, "newlines": 62, "modlines": 0, "user": "IANNONE"}, "text": "//M0685B   PROC\n//*--------------------------------------------------\n//*  delete work files\n//*--------------------------------------------------\n//S010     EXEC PGM=IEFBR14,\n//             REGION=5120K,\n//             COND=(0,NE)\n//SYSPRINT DD  SYSOUT=*\n//DD01     DD  DSN=PREFIX.MIS0685B.MESSAGE,\n//             DISP=(MOD,DELETE,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(4,2),RLSE)\n//*--------------------------------------------------\n//*  send messages to specified users\n//*\n//*  parm:  N/Y  = ignore/consider date offset\n//*         CYMD = override current system date\n//*--------------------------------------------------\n//S020     EXEC PGM=MIS0685B,\n//             REGION=5120K,\n//*            RESTART=J010.S010,\n//             COND=(0,NE),\n//             PARM='Y00000000/'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//PARM01   DD  DSN=userid.ISPF.FILE488(M0685P1),          *INPUT\n//             DISP=SHR\n//OUTNOT   DD  DSN=PREFIX.MIS0685B.MESSAGE,\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(4,2),RLSE),\n//             RECFM=FB,LRECL=80,DSORG=PS\n//OFFSET   DD  DISP=SHR,DSN=userid.ISPF.FILE488(MIS10010)\n//*--------------------------------------------------\n//*  send messages from MIS0685B\n//*--------------------------------------------------\n//S030     EXEC PGM=IKJEFT01,\n//             REGION=5120K,\n//*            RESTART=J010.S010,\n//             COND=(0,NE)\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSOUT   DD  SYSOUT=*\n//SYSTSPRT DD  SYSOUT=*\n//SYSTSIN  DD  DSN=PREFIX.MIS0685B.MESSAGE,DISP=SHR\n//*--------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "M0685P1": {"ttr": 14873, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x005\\x01\\x19\\x07/\\x01\\x19#\\x9f\\x11U\\x00n\\x00m\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-08-27T11:55:35", "lines": 110, "newlines": 109, "modlines": 0, "user": "IANNONE"}, "text": "*\n* SEND TSO MESSAGES OR SET CONDITION CODES  (MIS0685B)\n*\n* ----------------------------------------\n*\n*     Comments here\n*\n* ----------------------------------------\n*\n* * = documentation line\n* C = combined scheduling (Siemens weekly/monthly processing)\n*     skip if weekly date is within one day of the eom date\n* S = skip remaining lines when match occurs\n* T = temporary; commented out once match occurs\n*\n* USERIDs on separate line separated by a space (12 max)\n*         messages are generated into the OUTNOT ddname\n*         new userid line replaces previously specified userids\n*\n* YYYY : year or '****' for any year\n*      MM : month or '**' for any month\n*         DD : day or '**' for any day\n*\n* CMFE00 -01 : 'CMF' can be used in place of a hardcoded date to\n*              automatically derive a date.\n*              note: CMFxxx must derive a cymd date.\n*              example:  'CMFE00 -01' = second to last day of current\n*                        month.  see stv0400b for examples.\n* QFF000 +02 : calculate beginning quarter dates\n* QFF000E+00 : calculate ending quarter dates\n*\n*           DURATION\n*           |  '00' = set/send on match-date only\n*           |  '##' = set/send for ## days (12th for 7 days: match on\n*           |                               18th, nomatch on 19th+)\n*           | ADJUSTMENT\n*           | |  '<##' = adjust match date back ## days\n*           | |  '>##' = adjust match date forward ## days\n*           | |\n*           | |   CYCLE DAYS\n*           | |   |  repeat every ### days  ie: biweekly = 014\n*           | |   |\n*           | |   |   MATCH DAY\n*           | |   |   |  blank = set/send any day\n*           | |   |   |  # = set/send only if day (mon=1..sun=7)\n*           | |   |   |  '3RD 4  ' = 3rd thursday\n*           | |   |   |  'LST 7  ' = last sunday\n*           | |   |   |\n*           | |   |   |       Prefix message with current date (Y or N)\n*           | |   |   |       |\n*           | |   |   |       | CCM #### = set rc when dates match\n*           | |   |   |       | CCN #### = set when dates do not match\n*           | |   |   |       | CTM #### HHMM HHMM (or **MM) = set rc\n*           | |   |   |       |          when within date and time range\n*           | |   |   |       | ABM      = abend when dates match\n*USERIDS... | |   |   |       | ABN      = abend when dates do not match\n*CMF... -## | |   |   |       | MESSAGE (40 bytes max, 30 if prefix=y)\n*YYYY MM DD | |   |   |       |          #+00000#M/D/CY# date in msg\n*---- -- -- ----- --- ------- - ----+----1----+----2----+----3----+----4\n IANNONE USER02 USER03\n 2000 06 27 00 00 000         Y Invision testing  9am - 5pm\n 2000 07 25 00 00 000         Y Invision testing  9am - 5pm\n 2000 08 29 00 00 000         Y Invision testing  9am - 5pm\n 2000 09 26 00 00 000         Y Invision testing  9am - 5pm\n 2000 10 24 00 00 000         Y Invision testing  9am - 5pm\n 2000 11 28 00 00 000         Y Invision testing  9am - 5pm\n 2000 12 19 00 00 000         Y Invision testing  9am - 5pm\n 2000 06 28 00 00 000         Y Invision testing  9am - 11am\n 2000 07 26 00 00 000         Y Invision testing  9am - 11am\n 2000 08 30 00 00 000         Y Invision testing  9am - 11am\n 2000 09 27 00 00 000         Y Invision testing  9am - 11am\n 2000 10 25 00 00 000         Y Invision testing  9am - 11am\n 2000 11 29 00 00 000         Y Invision testing  9am - 11am\n **** ** ** 00 00 000 1       Y Weekly Summary for Dave\n*\n IANNONE USER02 USER03 USER04 USER05 USER06\n 2000 10 22 00<02 000           CDREORG scheduled for Sunday night\n 2000 11 26 00<02 000           CDREORG scheduled for Sunday night\n 2000 12 24 00<02 000           CDREORG scheduled for Sunday night\n 2001 01 21 00<02 000           CDREORG scheduled for Sunday night\n 2001 02 25 00<02 000           CDREORG scheduled for Sunday night\n 2001 03 25 00<02 000           CDREORG scheduled for Sunday night\n 2001 04 22 00<02 000           CDREORG scheduled for Sunday night\n 2001 05 20 00<02 000           CDREORG scheduled for Sunday night\n*\n 2000 10 07 00<01 000           PCPURGE scheduled for Saturday night\n 2000 11 04 00<01 000           PCPURGE scheduled for Saturday night\n 2000 12 02 00<01 000           PCPURGE scheduled for Saturday night\n 2001 01 06 00<01 000           PCPURGE scheduled for Saturday night\n 2001 02 03 00<01 000           PCPURGE scheduled for Saturday night\n 2001 03 03 00<01 000           PCPURGE scheduled for Saturday night\n 2001 04 07 00<01 000           PCPURGE scheduled for Saturday night\n 2001 05 05 00<01 000           PCPURGE scheduled for Saturday night\n*\n 1998 01 04 00 00 014         Y ADSM 3590_copy_01 reclaim\n 2000 01 01 00 00 090           Update CD/PCREORG reminders in MISBA020\n **** ** 02 00 00 000           MONTHLY SMSAC PXADHOCZ SCHEDULED\n **** ** 03 07<01 000 6         HMMASTER reverts to tape Saturday night\n*---- -- -- ----- --- ------- - ----+----1----+----2----+----3----+----4\n **** 01 ** 00 00 000 3RD 1     Martin Luther King day\n **** 04 ** 03<02 000 1ST 7     Daylight Savings Time - spring fwd\n **** 05 ** 00 00 000 2ND 7     Mothers Day\n **** 05 ** 00 00 000 LST 1     Memorial Day\n **** 06 ** 00<02 000 3RD 7     Fathers Day\n **** 09 ** 00 00 000 1ST 1     Labor Day\n **** 10 ** 03<02 000 LST 7     Daylight Savings Time - fall back\n **** 11 ** 00>01 000 1ST 1     Election day (tues after first monday)\n **** 11 02 07 00 000 2         Election day\n **** 11 ** 00 00 000 4TH 4     Thanksgiving\n*---- -- -- ----- --- ------- - ----+----1----+----2----+----3----+----4\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "M0685P2": {"ttr": 15107, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00S\\x01\\x19\\x07/\\x01\\x19#\\x9f\\x11V\\x00\\x84\\x00\\x83\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-08-27T11:56:53", "lines": 132, "newlines": 131, "modlines": 0, "user": "IANNONE"}, "text": "*\n* SEND TSO MESSAGES OR SET CONDITION CODES  (MIS0685B)\n*\n* ----------------------------------------\n*\n*     Comments here\n*\n* ----------------------------------------\n*\n* * = documentation line\n* C = combined scheduling (Siemens weekly/monthly processing)\n*     skip if weekly date is within one day of the eom date\n* S = skip remaining lines when match occurs\n* T = temporary; commented out once match occurs\n*\n* USERIDs on separate line separated by a space (12 max)\n*         messages are generated into the OUTNOT ddname\n*         new userid line replaces previously specified userids\n*\n* YYYY : year or '****' for any year\n*      MM : month or '**' for any month\n*         DD : day or '**' for any day\n*\n* CMFE00 -01 : 'CMF' can be used in place of a hardcoded date to\n*              automatically derive a date.\n*              note: CMFxxx must derive a cymd date.\n*              example:  'CMFE00 -01' = second to last day of current\n*                        month.  see stv0400b for examples.\n* QFF000 +02 : calculate beginning quarter dates\n* QFF000E+00 : calculate ending quarter dates\n*\n*           DURATION\n*           |  '00' = set/send on match-date only\n*           |  '##' = set/send for ## days (12th for 7 days: match on\n*           |                               18th, nomatch on 19th+)\n*           | ADJUSTMENT\n*           | |  '<##' = adjust match date back ## days\n*           | |  '>##' = adjust match date forward ## days\n*           | |\n*           | |   CYCLE DAYS\n*           | |   |  repeat every ### days  ie: biweekly = 014\n*           | |   |\n*           | |   |   MATCH DAY\n*           | |   |   |  blank = set/send any day\n*           | |   |   |  # = set/send only if day (mon=1..sun=7)\n*           | |   |   |  '3RD 4  ' = 3rd thursday\n*           | |   |   |  'LST 7  ' = last sunday\n*           | |   |   |\n*           | |   |   |       Prefix message with current date (Y or N)\n*           | |   |   |       |\n*           | |   |   |       | CCM #### = set rc when dates match\n*           | |   |   |       | CCN #### = set when dates do not match\n*           | |   |   |       | CTM #### HHMM HHMM (or **MM) = set rc\n*           | |   |   |       |          when within date and time range\n*           | |   |   |       | ABM      = abend when dates match\n*USERIDS... | |   |   |       | ABN      = abend when dates do not match\n*CMF... -## | |   |   |       | MESSAGE (40 bytes max, 30 if prefix=y)\n*YYYY MM DD | |   |   |       |          #+00000#M/D/CY# date in msg\n*---- -- -- ----- --- ------- - ----+----1----+----2----+----3----+----4\n IANNONE\nS**** ** ** 00 00 000           CTM 0004 **00 **20\nS**** ** ** 00 00 000           CTM 0004 **57 **59\n QFF000 +01 00 00 000           CCM 0050         2nd day of new qtr\n QFF000E-01 00 00 000           CCM 0050         day before end of qtr\n **** 01 01 00 00 000           CCM 0004         New Years\n **** 05 ** 00 00 000 LST 1     CCM 0004         Memorial Day\n **** 07 04 00 00 000           CCM 0004         Independence Day\n **** 09 ** 00 00 000 1ST 1     CCM 0004         Labor Day\n **** 11 ** 00 00 000 4TH 4     CCM 0004         Thanksgiving\n **** 12 25 00 00 000           CCM 0004         Christmas\n 2006 04 14 00 00 000           CCM 0004         Good Friday\n 2007 04 06 00 00 000           CCM 0004         Good Friday\n 2008 03 21 00 00 000           CCM 0004         Good Friday\n 2009 04 10 00 00 000           CCM 0004         Good Friday\n 2010 04 02 00 00 000           CCM 0004         Good Friday\n 2011 04 22 00 00 000           CCM 0004         Good Friday\n 2012 04 06 00 00 000           CCM 0004         Good Friday\n 2013 03 29 00 00 000           CCM 0004         Good Friday\n 2014 04 18 00 00 000           CCM 0004         Good Friday\n 2015 04 03 00 00 000           CCM 0004         Good Friday\n 2016 03 25 00 00 000           CCM 0004         Good Friday\n 2017 04 14 00 00 000           CCM 0004         Good Friday\n 2018 03 30 00 00 000           CCM 0004         Good Friday\n 2019 04 19 00 00 000           CCM 0004         Good Friday\n 2020 04 10 00 00 000           CCM 0004         Good Friday\n 2021 04 02 00 00 000           CCM 0004         Good Friday\n 2022 04 15 00 00 000           CCM 0004         Good Friday\n 2023 04 07 00 00 000           CCM 0004         Good Friday\n 2024 03 29 00 00 000           CCM 0004         Good Friday\n 2025 04 18 00 00 000           CCM 0004         Good Friday\n 2026 04 03 00 00 000           CCM 0004         Good Friday\n 2027 03 26 00 00 000           CCM 0004         Good Friday\n 2028 04 14 00 00 000           CCM 0004         Good Friday\n 2029 03 30 00 00 000           CCM 0004         Good Friday\n 2030 04 19 00 00 000           CCM 0004         Good Friday\n 2031 04 11 00 00 000           CCM 0004         Good Friday\n 2032 03 26 00 00 000           CCM 0004         Good Friday\n 2033 04 15 00 00 000           CCM 0004         Good Friday\n 2034 04 07 00 00 000           CCM 0004         Good Friday\n 2035 03 23 00 00 000           CCM 0004         Good Friday\n 2036 04 11 00 00 000           CCM 0004         Good Friday\n 2037 04 03 00 00 000           CCM 0004         Good Friday\n 2038 04 23 00 00 000           CCM 0004         Good Friday\n 2039 04 08 00 00 000           CCM 0004         Good Friday\n 2040 03 30 00 00 000           CCM 0004         Good Friday\n 2041 04 19 00 00 000           CCM 0004         Good Friday\n 2042 04 04 00 00 000           CCM 0004         Good Friday\n 2043 03 27 00 00 000           CCM 0004         Good Friday\n 2044 04 15 00 00 000           CCM 0004         Good Friday\n 2045 04 07 00 00 000           CCM 0004         Good Friday\n 2046 03 23 00 00 000           CCM 0004         Good Friday\n 2047 04 12 00 00 000           CCM 0004         Good Friday\n 2048 04 03 00 00 000           CCM 0004         Good Friday\n 2049 04 16 00 00 000           CCM 0004         Good Friday\n 2050 04 08 00 00 000           CCM 0004         Good Friday\n*\n IANNONE userid2 userid3\n **** 01 ** 00 00 000 3RD 1     Martin Luther King day\n **** 03 ** 03<02 000 2ND 7     Daylight Savings Time - spring fwd\n **** 05 ** 00 00 000 LST 1     Memorial Day\n **** 05 ** 00<02 000 2ND 7     Mothers Day\n **** 06 ** 00<02 000 3RD 7     Fathers Day\n **** 09 ** 00 00 000 1ST 1     Labor Day\n **** 11 ** 00 00 000 4TH 4     Thanksgiving\n **** 11 02 07 00 000 2         Election day (tues after 1st mon)\n **** 11 ** 00>01 000 1ST 1     Election day\n **** 11 ** 03<02 000 1ST 7     Daylight Savings Time - fall back\n*\n*---- -- -- -----sun........sat ----+----1----+----2----+----3----+----4\n **** ** 21 00<01-1+5+4+3+2+1+0 CDREORG scheduled for Saturday night\n **** ** 01 00<01+6+5+4+3+2+1+7 PCPURGE scheduled for Saturday night\n*---- -- -- -----sun........sat ----+----1----+----2----+----3----+----4\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "M0700B": {"ttr": 15110, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00&\\x01\\x19\\x08o\\x01\\x192O\\x08\\x10\\x00\\x1d\\x00\\x14\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2019-03-27T00:00:00", "modifydate": "2019-11-20T08:10:26", "lines": 29, "newlines": 20, "modlines": 0, "user": "IANNONE"}, "text": "//useridJ  JOB (5000,'test MIS0700B delay process'),\n//             'userid MIS0700B',CLASS=x,\n//             MSGCLASS=x,\n//             MSGLEVEL=(1,1)\n//*-------------------------------------------------\n//JOBLIB   DD  DSN=userid.ISPF.OBJ,DISP=SHR                        *shr\n//*-------------------------------------------------\n//*  Handle situations where jobs are submitted close to each other.\n//*  Each job updates PARM01 with a new time-of-day ##### seconds ahead.\n//*  Each successive job checks that time and waits until that time is\n//*  met, and also updates the time so the next job waits.\n//*-------------------------------------------------\n//*\n//*                  number seconds gap between jobs: 00002-14400\n//*                  |    job name matching PARM01 entry\n//*                  |    |\n//*            PARM='00010jobname   /'\n//*-------------------------------------------------\n//S010     EXEC PGM=MIS0700B,\n//             REGION=5120K,\n//             COND=(0,NE),\n//             PARM='00010MIS0700B  /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//PARM01   DD  DSN=userid.ISPF.FILE488(M0700P),                    *shr\n//             DISP=SHR,FREE=CLOSE\n//*-------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "M0700P": {"ttr": 15112, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x05\\x01\\x19\\x08o\\x01\\x19\\t?\\x11%\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "2019-03-27T00:00:00", "modifydate": "2019-04-03T11:25:05", "lines": 12, "newlines": 12, "modlines": 0, "user": "IANNONE"}, "text": "*\n*  time tracking for the MIS0700B wait process\n*\n*\n*\n* Job to wait\n* |\n* |        wait until CYMD\n* |        |        wait until HMS\n* |        |        |\n* -------- -------- ------\n  MIS0700B 20190328 114615\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "M0775B": {"ttr": 15114, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00X\\x01\\x19\\x05\\x8f\\x01\\x192/\\x14\\x17\\x00L\\x00=\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2019-02-27T00:00:00", "modifydate": "2019-11-18T14:17:58", "lines": 76, "newlines": 61, "modlines": 0, "user": "IANNONE"}, "text": "/*PRIORITY     01\n//useridP  JOB (861310,'purge records by date'),\n//             'MHP0775B purge',\n//             CLASS=x,\n//             MSGCLASS=x,\n//             MSGLEVEL=(1,1)\n//*-------------------------------------------------\n//JOBLIB   DD  DSN=userid.ISPF.OBJ,DISP=SHR\n//*-------------------------------------------------\n//*\n//*  purge records from files with standard record lengths\n//*\n//*-------------------------------------------------\n//S010     EXEC PGM=MHP0775B,\n//             REGION=5120K,\n//             COND=(0,NE),\n//             PARM='CMD000  /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//FIL80I   DD  DUMMY\n//FIL80O   DD  DUMMY\n//FIL81I   DD  DUMMY\n//FIL81O   DD  DUMMY\n//FIL132I  DD  DISP=SHR,DSN=standard.record.length.file       *input\n//FIL132O  DD  DSN=&&FIL132,                                  *output\n//             DISP=(NEW,PASS,DELETE),\n//             SPACE=(CYL,(100,50)),UNIT=LOFDA,\n//             RECFM=FB,LRECL=132,DCB=(DSORG=PS)\n//FIL133I  DD  DUMMY\n//FIL133O  DD  DUMMY\n//FIL100I  DD  DUMMY\n//FIL100O  DD  DUMMY\n//FIL200I  DD  DUMMY\n//FIL200O  DD  DUMMY\n//FIL300I  DD  DUMMY\n//FIL300O  DD  DUMMY\n//FIL500I  DD  DUMMY\n//FIL500O  DD  DUMMY\n//PARM01   DD  *\n*\n*\n* MHP0775B standard file purge parm\n*\n* Enter only one entry for each file length\n* Valid file lengths: 00080 00081 00132 00133 00100 00200 00300 00500\n*\n* file length\n* |     position of date in file\n* |     |     date format in file\n* |     |     |      purge rcd after ##### days\n* |     |     |      |\n* ----- ----- ------ -----\n* 00080 00068 CYMD   00750\n* 00081 00068 CYMD   00750\n  00132 00002 CYMD   00120\n* 00133 00068 CYMD   00750\n* 00100 00068 CYMD   00750\n* 00200 00068 CYMD   00750\n* 00300 00068 CYMD   00750\n* 00500 00068 CYMD   00750\n/*\n//*-------------------------------------------------\n//*\n//*  reload source file from saved records\n//*\n//*-------------------------------------------------\n//S040     EXEC PGM=IEBGENER,\n//             REGION=5120K,\n//             COND=(0,NE)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSN=&&FIL132,DISP=(OLD,DELETE,DELETE)          *input\n//SYSUT2   DD  DSN=standard.record.length.file,DISP=OLD       *output\n//SYSIN    DD  DUMMY\n//*-------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "OFFSET1": {"ttr": 15117, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x003o\\x01\\x004/\\x10I\\x00*\\x00\\x1c\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-12-01T00:00:00", "modifydate": "2000-12-07T10:49:00", "lines": 42, "newlines": 28, "modlines": 0, "user": "IANNONE"}, "text": "   OFFSET DATE PROCESSING\n\n   The 'offset date processing' system is designed to handle\n   the situation where batch processing runs past midnight.\n   If your shop has a system that handles processing date\n   regardless of actual current date then disregard this documentation.\n   We use SHARED MEDICAL SYSTEMS INVISION.  Along with INVISION,\n   we also run a bunch of 'post-Invision' jobs.  This offset\n   processing applies to them.\n\n   If your shop runs batch jobs that simply grab and plug current\n   date from the system, then the 'offset date processing' system\n   might prove useful.\n\n   It allows all batch jobs to calculate the processing date via\n   one parm entry (in this case, see member MIS10010).\n   if the parm contains -00000, then no offset occurs.\n   if the parm contains -00001, then dates are offset by one day.\n\n   The operators manually change -00000 to -00001 if batch\n   processing runs past midnight.  (Actually we have this somewhat\n   automated - the operator can determine that batch will be\n   late and enters a command to cause the midnight job (MID99)\n   to respond '-00001' rather than 'SKIP' to the prompt).\n\n   Generated date symbolics residing in jobs submitted after\n   midnight will then reflect the offset date.\n\n   We handle variable date processing as follows:\n\n   a 'J' job runs before each 'P' job that contains date symbolics\n       example: on december 4th, 2000\n                JMIS20D runs before PMIS20D and updates CMDX=20001203\n                to CMDX=20001204\n\n       If JMIS20D runs after midnight, and the processing date is\n       desired (20001204) rather than the current date (20001205)\n       then if offset processing was requested (OFFX=Y) the date\n       is adjusted.\n\n   see OFFSET2 for more documentation.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "OFFSET2": {"ttr": 15119, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x13\\x01\\x19\\x07?\\x01\\x192/\\x14\\x10\\x01\\x7f\\x01|\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-11-18T14:10:13", "lines": 383, "newlines": 380, "modlines": 0, "user": "IANNONE"}, "text": "\nSVMMC Mainframe Date processing   May 19, 2000\n\nSYSTEM DATE      Computer operating system date\nCURRENT DATE     Actual date\nPROCESSING DATE  Date for which processing is occurring\nOFFSET DATE      Used when batch processing is delayed such that\n                 it runs past midnight.  Offset processing date\n                 is derived from system date usually by subtracting\n                 one from system date.\n\nMethods for acquiring (getting ORIGINAL rather than passed) dates -\nadvantages/disadvantages\n\nCOBOL 'Accept' statement\n does not provide century (pre COBOL 390)\n does not provide offset date\n no manual intervention other than system date change\n automatic update\n\nCOBOL call to STV0400B\n provides century\n does not provide offset date\n no manual intervention other than system date change\n automatic update\n\nSTATIC PARM input\n can provide century\n can provide offset date\n allows for manual intervention\n not automatically updated\n\nJ-JOB\n can provide century\n can provide offset date\n allows for manual intervention\n automatically updated\n\n\nWHEN ACQUIRING DATES, CONSIDER IF YOU WILL EVER NEED YOUR DATES TO BE\nAUTOMATICALLY OFFSET (SET BACK ONE DAY) WHEN BATCH PROCESSING IS\nDELAYED SUCH THAT IT RUNS PAST MIDNIGHT.\n\nIf your job is part of a batch cycle that could possibly be delayed such\n that it is running after midnight (where it normally would not), the\n J-JOB method of acquiring dates can provide an offset date\n to your program.  The utilities below can also generate offset dates.\n\nOFFSET DATE PROCESSING has been developed to handle the above scenario -\nwhen batch processing runs past midnight.  The operator 'sets the\noffset' in one location and the change is filtered down to all\nutilities/procs/programs making use of the offset logic.\n\n\n\nApplication changes required when requesting offset date\n\n1. Set OFFX= to Y in the J-JOB.\n2. If necessary, define OFFX= in your P-JOB.  This symbolic is updated\nby the J- JOB to Y or N.  Pass OFFX= to date utilities in their PARM, so\nthat they can include the offset (if OFFX=Y) when generating dates.\n\nNormally the offset value is -00000 meaning no alteration of system date\nis requested.  If batch processing runs past midnight, the operator can\nset the offset to -00001.  Then, if OFFX=Y is in your J-JOB, this will\ncause the P-JOB date symbolics to be set back one day.\n\nIf your batch job runs at the same time every day, or has no need to\n acquire the OFFSET date, leave OFFX= equal to N in the J-JOB.  The\n processing date in this case would always be the system date.\n\n\nRecommendations for date processing\n-  Acquire century from the system using STV0400B or a J-JOB.\n-  Use J-JOBS when possible, acquiring dates in CYMD format.\n-  If possible, rather than calculate dates in your program, use date\nsymbolics in the P-JOB and pass a pre-calculated date to your program.\nExample: CMD003=20000507, if today is May 10, 2000.\n         CMDE03=20000229, if today is May 10, 2000.\n-  In the future, and in disaster recovery situations, it is possible\nthat a mass change to the application processing date may be required.\nThis can be done using the J-JOB override.  Consider this when\nacquiring dates from the system.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCURRENT J-JOB SYMBOLICS\n\nOFFX=       In P-job, will reflect OFFX= setting in J-job\n\nEOMDATE=    mm/dd/yy  previous end of month\nCURDATE=    mm/dd/yy  current date\nCURREOM=    mm/dd/yy  current end of month\nYESTDAY=    mm/dd/yy  yesterday\nEOYDATE=    mm/dd/yy  previous end of year\nPREVMON=    mmmccyy   month and year 1 month ago\nLASTMON=    mmmccyy   month and year 2 months ago\n\nCYDX=       current ccyy\nCYD###=     prev ccyy\nCYF###=     future ccyy\nQTRX=       quarter:  1, 2, 3, or 4 depending on month\nCMDX=       current ccyymmdd\nCMD###=     prev ccyymmdd\nCMDE##=     prev eom ccyymmdd\nCMDEY#=     prev eoy ccyymmdd\nCMF###=     future ccyymmdd\nCMFE##=     future eom ccyymmdd\nCMFEY#=     future eoy ccyymmdd\nCDDX=       current ccyyddd\nCDD###=     prev ccyyddd\nCDDE##=     prev eom ccyyddd\nCDDEY#=     prev eoy ccyyddd\nCDF###=     future ccyyddd\nCDFE##=     future eom ccyyddd\nCDFEY#=     future eoy ccyyddd\nYMDX=       current yymmdd\nYMD###=     prev yymmdd\nYMDE##=     prev eom yymmdd\nYMDEY#=     prev eoy yymmdd\nYMF###=     future yymmdd\nYMFE##=     future eom yymmdd\nYMFEY#=     future eoy yymmdd\nYDDX=       current yyddd\nYDD###=     prev yyddd\nYDDE##=     prev eom yyddd\nYDDEY#=     prev eoy yyddd\nYDF###=     future yyddd\nYDFE##=     future eom yyddd\nYDFEY#=     future eoy yyddd\n\nNote:  To obtain current eom or eoy, pass zero for the numeric value\n\nDAYX=       nbr days between current date and Y--### or C--###\nDAYM=       nbr days between current date and Y--E## or C--E##\nDAYY=       nbr days between current date and Y--EY# or C--EY#\nRUNX=       2 digit sequential counter\nHMSX=       hhmms\n\n\n\n\nUtilities using offset date\n\n\nMIS0500B, MIS0425B, MIS0685B, and CHNGFILE have been altered to handle\n'offset date' processing.  This means they can accept an 'offset\noverride' from operations (such as -00001) and calculate all new dates\nbased on the offset - in this case, a day previous (-00001) to current\ndate.\n\nJobs submitted at the same time every day would not want to include the\noffset.  Only jobs which assume PROCESSING date, rather than SYSTEM\ndate, should make use of the offset date.\n\n\nDATES WITHOUT OFFSET\n--------------------\n\nSYSTEM DATE:     2000/05/01\nPROCESSING DATE: 2000/04/30\n\n\nCHNGFILE\n\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n F00A  00010000  0001\n R00A  00020000  0008  #+00000#CMDE01#\n\nresult:\n\n*\n*\n 20000430\n\n\nMIS0425B\n\nPARMFX='CMD0810003NCMDE01'\n\nresult:\n\n1\n2\n3          20000430\n4\n\n\nSTV0400B\nIn this example, STV0400B is receiving a date that has not been\n'offset altered'.\n\nWS-1-CYMD = 20000501\n\nMOVE SPACE    TO WS-STV0400B-FIELDS.\nMOVE WS-1-CYMD   TO STV0400B-CYMD.\nMOVE 'CYMD  '    TO STV0400B-IN.\nMOVE 'CMDE01'    TO STV0400B-OUT.\nCALL 'STV0400B' USING WS-STV0400B-FIELDS.\n\nresult:\n\nSTV0400B-DATA  =  20000430\n\n\n\n\n\n\n\n\n\nDATES WITH OFFSET\n-----------------\n\nSYSTEM DATE:     2000/05/01\nPROCESSING DATE: 2000/04/30\n\n\nCHNGFILE\nWhen CHNGFILE is generating dates, rather than altering existing dates,\nit can take the offset into account.\n\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n F00A  00010000  0001\n R00A  00020000  0008  #+00000#CMDE01#\n\nresult:\n\n*\n*\n 20000331\n\n\nMIS0425B\nWhen MIS0425B is generating dates, rather than altering existing dates,\nit can take the offset into account.\n\nPARMFX='CMD0810003YCMDE01'\n\nresult:\n\n1\n2\n3          20000331\n4\n\n\nSTV0400B\nAlthough STV0400B does not itself include the offset in its\ncalculations, it will accept a date that has previously been\n'offset altered'.\n\nWS-1-CYMD  =  20000430\n\nMOVE SPACE    TO WS-STV0400B-FIELDS.\nMOVE WS-1-CYMD   TO STV0400B-CYMD.\nMOVE 'CYMD  '    TO STV0400B-IN.\nMOVE 'CMDE01'    TO STV0400B-OUT.\nCALL 'STV0400B' USING WS-STV0400B-FIELDS.\n\nresult:\n\nSTV0400B-DATA  =  20000331\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJ-DATE offset - example for implementation:\n\nJMIS17D\n//JMIS17D  JOB 8231,'UPDATE SYMBOLICS',\n//             CLASS=x,MSGCLASS=x,MSGLEVEL=(0,0)\n//*--------------------------------------------------\n//*  update symbolics in specified job jcl\n//*--------------------------------------------------\n//J001     EXEC MIS10,JOBJCL='PMIS17D',JOBLOC='SYSP.JCLLIB',OFFX=Y\n//*--------------------------------------------------\n\nMIS10\n//*--------------------------------------------------\n//*   MIS0500B loops through the specified JCL and\n//*   updates symbolic strings\n//*\n//*   see MIS0500B for complete documentation\n//*--------------------------------------------------\n//*   MIS0500B, MIS0425B, and CHNGFILE all reference the\n//*   offset parm mis10010.  when these programs generate\n//*   dates (as opposed to altering existing dates), they\n//*   can take the offset value into account, if requested.\n//*\n//*   OFFX=Y    consider offset\n//*   OFFX=N    ignore offset, use current date\n//*--------------------------------------------------\n//S010     EXEC PGM=MIS0500B,REGION=3M,\n//             PARM='&OFFX/'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//OFFSET   DD  DSN=userid.ISPF.FILE488(MIS10010),DISP=SHR\n//JOBJCL   DD  DSN=&JOBLOC(&JOBJCL),DISP=SHR           *UPDATE\n//*--------------------------------------------------\n\nPMIS17D\n//PMIS17D  JOB (8231,'RMM VOLUME MOVEMENT LIST 2'),\n//             'RMM VOL MOVE 2',\n//             CLASS=B,TIME=NOLIMIT,\n//             MSGCLASS=X,MSGLEVEL=(1,1)\n//*---------------------------------------------\n//J010     EXEC MIS17,\n//             OFFX=Y,\n//             CMDX=20000518,\n//             PARMFX='CCN0410004'\n\nMIS17\n//MIS17    PROC OFF=Y\n//S340     EXEC PGM=MIS0425B,\n//             REGION=3072K,\n//             COND=(0,NE),\n//*            RESTART=S340,       COND CODE 4 OK IF NOT THURSDAY\n//             PARM='&PARMFX&OFFX/'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//OFFSET   DD  DSN=userid.ISPF.FILE488(MIS10010),DISP=SHR\n//PARMFX   DD  DUMMY\n//*-------------------------------------------\n//S390     EXEC PGM=CHNG0080,\n//             REGION=3072K,\n//*            RESTART=S340,\n//             COND=(0,NE),\n//             PARM='0080N0000000000&OFFX.     /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//CHANGED  DD  DSN=&&RMML100,DISP=(SHR,PASS,DELETE)\n//PARM01   DD  DSN=userid.ISPF.FILE488(MIS17270),DISP=SHR\n//OFFSET   DD  DSN=userid.ISPF.FILE488(MIS10010),DISP=SHR\n\n\n\n\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PARM0060": {"ttr": 15365, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x19\\x01\\x19\\x07?\\x01\\x193\\x1f\\x13G\\x00U\\x00S\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-11-27T13:47:19", "lines": 85, "newlines": 83, "modlines": 0, "user": "IANNONE"}, "text": "*\n*  MIS0590B e-mail parm\n*\n*\n*  Build SMTP commands based on specified day for receipt\n*  of e-mail.  Input for program MIS0590B.\n*\n*  3-digit code controls which records are loaded into\n*    the working-storage internal table.  Must match\n*    the parm passed via linkage section.\n*\n*  Specify the days to be included (1=mon...7=sun)\n*     or leave blank\n*\n*  Flag can be set to 'N' to skip sending, or 'Y' to override\n*    day field, if valued. Normally leave blank.\n*\n*  If coding days or a flag for 'RCPT TO' then code the same\n*    thing for 'From:' and 'To:' if they are specified.\n*\n*\n*    smtp commands                                      day     flag\n*--- -------------------------------------------------- ------- -\n END\n END .\n END QUIT\n*--- -------------------------------------------------- ------- -\n*  all tsm backup results   MISBI\n*--- -------------------------------------------------- ------- -\n A01 HELO NODE\n A01 MAIL FROM:<SMTP@NODE>\n A01 RCPT TO:<user01@mhsnr.org>                         1234567\n A01 RCPT TO:<user02@mhsnr.org>                         1234567\n A01 RCPT TO:<user03@mhsnr.org>                         1234567\n A01 RCPT TO:<user04@mhsnr.org>                         4\n A01 RCPT TO:<jim_iannone@mhsnr.org>                    1357\n A01 RCPT TO:<user05@mhsnr.org>                         1234567\n A01 RCPT TO:<user06@mhsnr.org>                         36\n A01 DATA\n A01 Subject: TSM backup results\n A01 Date: note that MIS0590B will value date\n A01 From:<from address which shows in e-mail>\n A01 To:<to address which shows in e-mail>\n A01 Reply-To:<reply-to address which shows in e-mail>\n A01\n*--- -------------------------------------------------- ------- -\n*  cai tsm backup results   MISBJ\n*--- -------------------------------------------------- ------- -\n A02 HELO NODE\n A02 MAIL FROM:<SMTP@NODE>\n A02 RCPT TO:<user07@mhsnr.org>                         135\n A02 RCPT TO:<jim_iannone@mhsnr.org>                    2467\n A02 DATA\n A02 Subject: TSM CAI backup results\n A02\n*--- -------------------------------------------------- ------- -\n*  lotus notes tsm backup results  MISBJ\n*--- -------------------------------------------------- ------- -\n A03 HELO NODE\n A03 MAIL FROM:<SMTP@NODE>\n A03 RCPT TO:<user08@mhsnr.org>                         135\n A03 RCPT TO:<user03@mhsnr.org>                         135\n A03 RCPT TO:<jim_iannone@mhsnr.org>                    2467\n A03 DATA\n A03 Subject: Lotus Notes TSM backup results\n A03\n*--- -------------------------------------------------- ------- -\n*  hsm control dataset examine   MIS91\n*--- -------------------------------------------------- ------- -\n H01 HELO NODE\n H01 MAIL FROM:<SMTP@NODE>\n H01 RCPT TO:<jim_iannone@mhsnr.org>\n H01 DATA\n H01 Subject: HSM idcams examine\n H01\n*--- -------------------------------------------------- ------- -\n*  adsm stats from 1:00 pm   MISBJ\n*--- -------------------------------------------------- ------- -\n A04 HELO NODE\n A04 MAIL FROM:<SMTP@NODE>\n A04 RCPT TO:<jim_iannone@mhsnr.org>\n A04 DATA\n A04 Subject: TSM backup results  1:00PM\n A04\n*--- -------------------------------------------------- ------- -\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PMISA1D": {"ttr": 15368, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00R\\x01\\x19\\x07?\\x01\\x191\\x9f\\x14\\x08\\x00\\r\\x00\\r\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-11-15T14:08:52", "lines": 13, "newlines": 13, "modlines": 0, "user": "IANNONE"}, "text": "//PMISA1D  JOB (8231,'VTOC DSN PREPARATION'),\n//            'VTOC DSN LIST',\n//            CLASS=X,\n//            MSGCLASS=X,\n//*           RESTART=J010.S010,\n//*           TYPRUN=SCAN,\n//            MSGLEVEL=0\n//*---------------------------------------------------\n//*   delete and define files used to hold output from\n//*   IEHLIST performed on each resident dasd device\n//*---------------------------------------------------\n//J010     EXEC MISA1\n//*---------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PMISA2D": {"ttr": 15370, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x004\\x01\\x19\\x07?\\x01\\x191\\x9f\\x14\\t\\x00#\\x00\"\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-11-15T14:09:34", "lines": 35, "newlines": 34, "modlines": 0, "user": "IANNONE"}, "text": "//PMISA2D  JOB (8231,'VTOC DSN LIST 1'),\n//            'VTOC DSN LIST',\n//            CLASS=x,\n//            MSGCLASS=x,\n//*           RESTART=J----.S010,\n//*           TYPRUN=SCAN,\n//            MSGLEVEL=0\n//*---------------------------------------------------\n//*  generate a list of dasd volumes\n//*  concatenate in PMISA9D\n//*  limit: 255 job steps\n//*---------------------------------------------------\n//*   if necessary: reply 'cancel' and restart at next volser\n//*---------------------------------------------------\n//JS001    EXEC MISA2,VOLSR=SMS001\n//JS002    EXEC MISA2,VOLSR=SMS002\n//JS003    EXEC MISA2,VOLSR=SMS003\n//JS004    EXEC MISA2,VOLSR=SMS004\n//JS005    EXEC MISA2,VOLSR=SMS005\n//JS006    EXEC MISA2,VOLSR=SMS006\n//JS007    EXEC MISA2,VOLSR=SMS007\n//JS008    EXEC MISA2,VOLSR=SMS008\n//JS009    EXEC MISA2,VOLSR=SMS009\n//JS010    EXEC MISA2,VOLSR=SMS010\n//JS011    EXEC MISA2,VOLSR=SMS011\n//JS012    EXEC MISA2,VOLSR=SMS012\n//JS013    EXEC MISA2,VOLSR=SMS013\n//JS014    EXEC MISA2,VOLSR=SMS014\n//JS015    EXEC MISA2,VOLSR=SMS015\n//JS016    EXEC MISA2,VOLSR=SMS016\n//JS017    EXEC MISA2,VOLSR=SMS017\n//JS018    EXEC MISA2,VOLSR=SMS018\n//JS019    EXEC MISA2,VOLSR=SMS019\n//JS044    EXEC MISA2,VOLSR=SMS044\n//*---------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PMISA9D": {"ttr": 15372, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00R\\x01\\x19\\x07?\\x01\\x191\\x9f\\x14\\t\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-11-15T14:09:52", "lines": 14, "newlines": 14, "modlines": 0, "user": "IANNONE"}, "text": "//PMISA9D  JOB (8231,'VTOC DSN SUMMARY'),\n//            'VTOC DSN LIST',\n//            CLASS=x,\n//            MSGCLASS=x,\n//*           RESTART=J010.S010,\n//*           TYPRUN=SCAN,\n//            MSGLEVEL=0\n//*---------------------------------------------------\n//*  group together the output from the previous jobs\n//*  and send notification when files exceed a specified\n//*  number of extents\n//*---------------------------------------------------\n//J010     EXEC MISA9\n//*------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PMISB1D": {"ttr": 15374, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x003\\x01\\x19\\x07?\\x01\\x191\\x9f\\x14\\x10\\x00\\x14\\x00\\x15\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-11-15T14:10:33", "lines": 20, "newlines": 21, "modlines": 0, "user": "IANNONE"}, "text": "//PMISB1D  JOB (8231,'PULL HSM ACTIVITY LOGS'),\n//             'HSM LOG PULL',\n//             CLASS=x,\n//             MSGCLASS=x,\n//*            RESTART=J010.S030,\n//*            TYPRUN=SCAN,\n//             MSGLEVEL=(1,1)\n//*----------------------------------------\n//*  generally, if this job abends, notify systems & skip in scheduler\n//*----------------------------------------\n//*  loop through activity logs and summarize dataset activity\n//*  note: if hsmact.h1.summlist is full, set typrun=scan\n//*----------------------------------------\n//J010     EXEC MISB1,\n//             CMD007=20001201,\n//             PARMDX=2\n//*----------------------------------------\n//*  PARMDX: 1 = keep hsmact.h1 files that are selected for input\n//*  PARMDX: 2 = delete hsmact.h1 files that are selected for input\n//*----------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PMIS20D": {"ttr": 15376, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00)\\x01\\x19\\x07?\\x01\\x19\\x07O\\tI\\x00\\n\\x00\\n\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-03-15T09:49:29", "lines": 10, "newlines": 10, "modlines": 0, "user": "IANNONE"}, "text": "//PMIS20D  JOB (8231,'rmm and catalog backups'),\n//             'catalog backups',\n//             CLASS=x,\n//             MSGCLASS=x,\n//*            RESTART=J010.S030,\n//*            TYPRUN=SCAN,\n//             MSGLEVEL=(1,1)\n//J010     EXEC MIS20,\n//             YMDX=001206,        * these symbolics are updated by\n//             RUNX=01               JMIS20D job / MIS10 proc\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PMIS34W": {"ttr": 15378, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x15\\x01\\x19\\x07?\\x01\\x192/\\x14\\x10\\x00\\x17\\x00\\x17\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-11-18T14:10:15", "lines": 23, "newlines": 23, "modlines": 0, "user": "IANNONE"}, "text": "//PMIS34W  JOB (8231,'HSM ACTIVITY PURGE'),\n//             'HSM ACTIVE PURGE',\n//             CLASS=x,\n//             MSGCLASS=x,\n//*            RESTART=J010.S030,\n//*            TYPRUN=SCAN,\n//             MSGLEVEL=(1,1)\n//**--------------------------------------------------------\n//**  loop through activity logs and delete old records\n//**  based on retention criteria in static parm mis34010\n//**--------------------------------------------------------\n//J010     EXEC MIS34\n//**--------------------------------------------------------\n//**  mark all JCL in a class of 'S' as distrib\n//**--------------------------------------------------------\n//J020     EXEC RDMS,QXPRNT=0\n//RM80004.QXPARMS DD DSN=userid.ISPF.FILE488(RMSALLS),DISP=SHR\n//**--------------------------------------------------------\n//**  mark all reports in a class of 'P' as distrib\n//**--------------------------------------------------------\n//*J030     EXEC RDMS,QXPRNT=0\n//*RM80004.QXPARMS DD DSN=userid.ISPF.FILE488(RMSALLP),DISP=SHR\n//**--------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PRNTCPY1": {"ttr": 15380, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x05\\x01\\x19\\x07?\\x01\\x193o\\x13\\x18\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-12-02T13:18:05", "lines": 11, "newlines": 11, "modlines": 0, "user": "IANNONE"}, "text": "           SELECT INFILE               ASSIGN TO INFILE\n      *    SELECT INFILE  (ESDS)       ASSIGN TO AS-INFILE\n                                       ACCESS MODE IS SEQUENTIAL\n      *********************************\n      **** ALTER: ORGANIZATION: SEQUENTIAL OR INDEXED\n                                       ORGANIZATION IS SEQUENTIAL\n      *                                ORGANIZATION IS INDEXED\n      *********************************\n      **** ALTER: RECORD KEY: USE IF INDEXED\n      *                                RECORD KEY IS INFILE-KEY\n                                       FILE STATUS IS WS-STAT.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRNTCPY2": {"ttr": 15382, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00#\\x01\\x19\\x07?\\x01\\x191\\x9f\\x14\"\\x00\\x12\\x00\\x12\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-11-15T14:22:23", "lines": 18, "newlines": 18, "modlines": 0, "user": "IANNONE"}, "text": "       FD  INFILE\n           LABEL RECORDS ARE STANDARD\n           BLOCK CONTAINS 0.\n\n      *    RECORD CONTAINS ## TO ##\n      *    RECORDING MODE V.\n\n      *********************************\n      **** ALTER: RECORD LENGTH: USE IF SEQUENTIAL\n       01  INFILE-RCD.\n           05  FILLER                  PIC  X(0080).\n\n      *********************************\n      **** ALTER: RECORD LENGTH: USE IF INDEXED\n      *01  INFILE-RCD.\n      *    05  FILLER                  PIC  X.\n      *    05  INFILE-KEY              PIC  X(09).\n      *    05  FILLER                  PIC  X(1090).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRNTDOCU": {"ttr": 15384, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00)\\x01\\x19\\x07?\\x01\\x192/\\x14\\x10\\x00B\\x00D\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-11-18T14:10:29", "lines": 66, "newlines": 68, "modlines": 0, "user": "IANNONE"}, "text": "\n   PRNTFILE: list fixed length files.\n\n       Advantages vs IDCAMS:\n            - up to 39 records per page vs IDCAMS 12\n            - ease of finding location of data in record\n            - ability to print segments of a record\n            - easy to read\n\n       Disadvantages:\n            - longer setup time, including a recompile anytime\n              you change file names\n            - must know record length, location of key, location\n              and length of search key\n            - inability to print special characters correctly\n            - inability to print hex characters\n            - unsupported\n\n       Recommendations:\n            - use IDCAMS for most applications. if you will be\n              working with a file for an extended period, it may\n              be beneficial to setup and use PRNTFILE for that file.\n\n       location                  member       description\n       --------                  ------       -----------\n       userid.ISPF.FILE488       PRNTFILE     source code\n       your object library       PRNTFILE     object code\n       userid.ISPF.FILE488       PRNTPROC     proc to run PRNTFILE\n       userid.ISPF.FILE488       PRNTPARM     parm\n       userid.ISPF.FILE488       PRNTCPY1     fd description\n       userid.ISPF.FILE488       PRNTCPY2     record description\n       userid.ISPF.FILE488       PRNTDOCU     documentation\n\n       * note: the only members needed in your library\n               are PRNTPROC and PRNTPARM\n\n   to use PRNTFILE:\n   ----------------\n        PRNTFILE is designed so the source program does not need\n        to be touched.\n\n        1) change PRNTCPY1 and PRNTCPY2 in userid.ISPF.FILE488\n           - if sequential, asterisk out the indexed file handling\n             areas and change the file length.\n           - if indexed, asterisk out the sequential file handling\n             areas and change the record description to include\n             the correct location of the key for the file.\n             ex:   filler   pic x(10)   (10 bytes before key)\n                   key      pic x(07)   (key in position 11)\n                   filler   pic x(50)   (50 bytes after key)\n                                        (67 byte record altogether)\n             note: do not change the name of the key from 'infile-key'\n                   or the name of the record from 'infile-record'\n\n        2) recompile PRNTFILE using CX003B in userid.ISPF.FILE488\n        3) if errors, the problem should be with the copybook\n           changes. recheck them (they may have been changed by others).\n        4) change PRNTPARM according to notes in parm\n           - key to search has no relation to an indexed key.\n             it is simply the first occurrence of that string to\n             be found in the specified location.\n           - file name is simply documentation and has no relation\n             to the files CICS name, if any.\n        5) change the name of the file in PRNTPROC (find 'infile')\n        6) cross fingers and submit PRNTPROC.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PRNTFILE": {"ttr": 15617, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00%\\x01\\x19\\x07/\\x01\\x193\\x7f\\x08 \\x02\\x1c\\x02\\x17\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-12-03T08:20:25", "lines": 540, "newlines": 535, "modlines": 0, "user": "IANNONE"}, "text": "\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    PRNTFILE.\n       AUTHOR.        MERCY HEALTH PARTNERS.\n      ******************************************************************\n      *@@@ print formatted records from sequential or VSAM files\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ******************************************************************\n      * Date written: 12/15/89\n      * Programmer  : Jim Iannone\n      *\n      *               To print files, change the following:\n      *               - change copybook: PRNTCPY1 PRNTCPY2\n      *               - recompile\n      *               - change parm\n      *               - change proc filename\n      *\n      *               This program will print sequential or indexed\n      *               files with records up to 5040 bytes long.\n      *               The parm allows control of:\n      *               - number of records to print\n      *               - print starting location via 'key' search\n      *               - number of bytes (in blocks of 120) to print\n      *                 from start of record\n      *               - display name of file\n      *               - number of records to skip before printing\n      *                 - starts from 1st record found, or from key\n      *               - print only records with 'key' as specified above\n      *\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SOURCE-COMPUTER. IBM-3081.\n       OBJECT-COMPUTER. IBM-3081.\n       SPECIAL-NAMES.\n           C01 IS PAGE-TOP.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           COPY PRNTCPY1.\n\n           SELECT PARM                 ASSIGN TO PARM\n                                       FILE STATUS IS WS-PARM-STAT.\n\n           SELECT PRINT-SUMMARY        ASSIGN TO PRINTER.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  PARM\n           LABEL RECORDS ARE STANDARD\n           BLOCK CONTAINS 0.\n       01  PARM-RECORD.\n           05  FILLER                  PIC  XX.\n           05  PARM-AMOUNT             PIC  X(04).\n           05  FILLER                  PIC  XX.\n           05  PARM-RANGE              PIC  XX.\n           05  FILLER                  PIC  XX.\n           05  PARM-KEY                PIC  X(14).\n           05  FILLER                  PIC  XX.\n           05  PARM-KEY-LENGTH         PIC  XX.\n           05  FILLER                  PIC  XX.\n           05  PARM-KEY-START          PIC  X(04).\n           05  FILLER                  PIC  XX.\n           05  PARM-FILE               PIC  X(08).\n           05  FILLER                  PIC  XX.\n           05  PARM-SKIP               PIC  X(04).\n           05  FILLER                  PIC  XX.\n           05  PARM-SELECT-ONLY        PIC  X.\n           05  FILLER                  PIC  X(25).\n\n       COPY PRNTCPY2.\n\n       FD  PRINT-SUMMARY\n           LABEL RECORDS ARE STANDARD\n           BLOCK CONTAINS 0.\n       01  PRINT-AREA.\n           05  FILLER                  PIC  X(132).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working-storage PRNTFILE start '.\n\n       01  WORK-FIELDS.\n           05  WS-INFILE-STAT          PIC  99       VALUE ZERO.\n           05  WS-PARM-STAT            PIC  99       VALUE ZERO.\n           05  WS-LINE-COUNT           PIC S9(04)    VALUE ZERO.\n           05  WS-READ-RCD-CNT         PIC  9(08)    VALUE ZERO.\n           05  WS-WRITE-RCD-CNT        PIC  9(08)    VALUE ZERO.\n           05  WS-PAGE-CNT             PIC  9(04)    VALUE ZERO.\n           05  WS-HOLD-PLACE           PIC  9(04)    VALUE ZERO.\n           05  WS-HOLD-POS             PIC  X(07)    VALUE SPACE.\n           05  WS-PARM-AMOUNT          PIC  9(04)    VALUE ZERO.\n           05  WS-PARM-KEY-START       PIC  9(04)    VALUE ZERO.\n           05  WS-PARM-KEY-LENGTH      PIC  99       VALUE ZERO.\n           05  WS-PARM-RANGE           PIC  99       VALUE ZERO.\n           05  WS-PARM-SKIP            PIC  9(04)    VALUE ZERO.\n           05  WS-SKIP-CNT             PIC  9(04)    VALUE ZERO.\n           05  WS-PARM-FILE            PIC  X(10)    VALUE SPACE.\n           05  WS-CALL-STV0270B        PIC  X(08)    VALUE 'STV0270B'.\n\n       01  SUBSCRIPTS                  COMP.\n           05  WS-SUB1                 PIC S99       VALUE ZERO.\n           05  WS-SUB2                 PIC S99       VALUE +2.\n\n       01  TABLES.\n           05  WS-KEY-TABLE                          VALUE SPACE.\n               10  WS-KEY              PIC  X\n                                       OCCURS 14 TIMES\n                                       INDEXED BY INDX1.\n           05  WS-KEY2-TABLE                         VALUE SPACE.\n               10  WS-KEY2             PIC  X\n                                       OCCURS 14 TIMES\n                                       INDEXED BY INDX2.\n           05  WS-FULL-LINE-TABLE                    VALUE SPACE.\n               10  WS-FULL-LINE        PIC  X\n                                       OCCURS 5040 TIMES\n                                       INDEXED BY FULL.\n           05  WS-INFILE-TABLE                       VALUE SPACE.\n               10  WS-INFILE           PIC  X(120)\n                                       OCCURS 42 TIMES.\n\n       01  WS-PRINT-CONTROL            COMP.\n           05  WS-LINE-SUM             PIC S99       VALUE ZERO.\n           05  WS-LINE-MAX1            PIC S99       VALUE +43.\n           05  WS-LINE-MAX2            PIC S99       VALUE +43.\n           05  WS-SPACE-CONTROL1       PIC S99       VALUE ZERO.\n           05  WS-SPACE-CONTROL2       PIC S99       VALUE +2.\n\n       01  SWITCHES.\n           05  WS-END-FILE-SW          PIC  X        VALUE 'N'.\n               88  END-OF-FILE                       VALUE 'Y'.\n               88  MORE-RECORDS                      VALUE 'N'.\n           05  WS-ERROR-SW             PIC  X        VALUE 'N'.\n               88  ERROR-FND                         VALUE 'Y'.\n           05  WS-LINE-DONE-SW         PIC  X        VALUE 'N'.\n               88  LINE-DONE                         VALUE 'Y'.\n           05  WS-RECORD-FND-SW        PIC  X        VALUE 'N'.\n               88  RECORD-FOUND                      VALUE 'Y'.\n               88  RECORD-NOT-FOUND                  VALUE 'N'.\n           05  WS-FORMAT-EVEN-REC-SW   PIC  X        VALUE 'Y'.\n               88  FORMAT-EVEN-REC                   VALUE 'Y'.\n      *\n      *  STANDARD MIS HEADINGS\n      *\n       01  HEADING-LINE-1.\n           05  FILLER                  PIC  X(08)    VALUE 'PRNTFILE'.\n           05  FILLER                  PIC  XX       VALUE SPACE.\n           05  FILLER                  PIC  X(04)    VALUE 'Date'.\n           05  FILLER                  PIC  XX       VALUE SPACE.\n           05  HDG-DATE                PIC  X(08)    VALUE SPACE.\n           05  FILLER                  PIC  X(29)    VALUE SPACE.\n           05  FILLER                  PIC  X(26)    VALUE\n               'CBT file 488 print utility'.\n           05  FILLER                  PIC  X(53)    VALUE SPACE.\n\n       01  HEADING-LINE-2.\n           05  HDG-SECURITY-CODE       PIC  X(20)    VALUE SPACE.\n           05  FILLER                  PIC  X(31)    VALUE SPACE.\n           05  FILLER                  PIC  X(30)    VALUE\n               '                              '.\n           05  FILLER                  PIC  X(51)     VALUE SPACE.\n\n       01  HEADING-LINE-3.\n           05  FILLER                  PIC  X(46)    VALUE SPACE.\n           05  HDG-3-FILE              PIC  X(40)    VALUE SPACE.\n           05  FILLER                  PIC  X(46)    VALUE SPACE.\n\n       01  HEADING-LINE-4.\n           05  HDG-PAGE                PIC  X(05)    VALUE SPACE.\n           05  FILLER                  PIC  X        VALUE SPACE.\n           05  HDG-PAGE-CNT            PIC  X(04)    VALUE SPACE.\n           05  FILLER                  PIC  X(23)    VALUE\n               '  +       -1-       -2-'.\n           05  FILLER                  PIC  X(33)    VALUE\n               '       -3-       -4-       -5-   '.\n           05  FILLER                  PIC  X(33)    VALUE\n               '    -6-       -7-       -8-      '.\n           05  FILLER                  PIC  X(33)    VALUE\n               ' -9-       -0-       -1-       -2'.\n\n       01  HEADING-LINE-5.\n           05  HDG-5-FILE              PIC  X(10)    VALUE SPACE.\n           05  FILLER                  PIC  X(23)    VALUE\n               '  +........+....+....+.'.\n           05  FILLER                  PIC  X(33)    VALUE\n               '...+....+....+....+....+....+....'.\n           05  FILLER                  PIC  X(33)    VALUE\n               '+....+....+....+....+....+....+..'.\n           05  FILLER                  PIC  X(33)    VALUE\n               '..+....+....+....+....+....+....+'.\n\n       01  DETAIL-LINE-1.\n           05  D1-COUNT                PIC  X(04)    VALUE SPACE.\n           05  FILLER                  PIC  XX       VALUE SPACE.\n           05  D1-PLACE                PIC  X(04)    VALUE SPACE.\n           05  FILLER                  PIC  XX       VALUE SPACE.\n           05  D1-LINE                 PIC  X(120)   VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(21)    VALUE\n               '* END PRNTFILE HERE *'.\n\n       PROCEDURE DIVISION.\n\n       0000-PROGRAM-ENTRY.\n           DISPLAY '     '.\n           DISPLAY '**** PRNTFILE formatted file print utility'.\n           PERFORM 0000-OPEN.\n           IF NOT ERROR-FND\n               PERFORM 0000-READ-PARM\n               PERFORM 0000-EDIT-PARM.\n           IF NOT ERROR-FND\n               PERFORM 0000-PRINT-HEADING.\n\n           PERFORM 0000-READ-AND-EDIT-INFILE THRU\n                   0000-READ-EDIT-INFILE-EXIT\n                   UNTIL END-OF-FILE\n                   OR (WS-LINE-COUNT NOT < WS-PARM-AMOUNT)\n                   OR ERROR-FND.\n\n           PERFORM 0000-CLOSE.\n           DISPLAY '**** PRNTFILE EOJ encountered'.\n           DISPLAY '     '.\n           STOP RUN.\n\n       0000-OPEN.\n           OPEN INPUT INFILE.\n           IF WS-INFILE-STAT NOT = 00\n               DISPLAY '**** PRNTFILE open error on INFILE'\n               DISPLAY '**** File stat = ' WS-INFILE-STAT\n               MOVE 'Y'                       TO WS-ERROR-SW.\n           OPEN INPUT PARM.\n           IF WS-PARM-STAT NOT = 00\n               DISPLAY '**** PRNTFILE open error on PARM'\n               DISPLAY '**** File stat = ' WS-PARM-STAT\n               MOVE 'Y'                       TO WS-ERROR-SW.\n           OPEN OUTPUT PRINT-SUMMARY.\n           MOVE FUNCTION CURRENT-DATE(5: 2) TO HDG-DATE(1: 2).\n           MOVE '/'                         TO HDG-DATE(3: 1).\n           MOVE FUNCTION CURRENT-DATE(7: 2) TO HDG-DATE(4: 2).\n           MOVE '/'                         TO HDG-DATE(6: 1).\n           MOVE FUNCTION CURRENT-DATE(3: 2) TO HDG-DATE(7: 2).\n\n       0000-CLOSE.\n           IF WS-LINE-COUNT > 9997\n               DISPLAY '**** Maximum record handling reached'.\n           IF WS-KEY2-TABLE NOT = SPACE\n               DISPLAY '**** Parm key                ' WS-KEY2-TABLE.\n           IF WS-HOLD-POS NOT = SPACE\n               DISPLAY '**** Key position and length ' WS-HOLD-POS.\n           IF PARM-SELECT-ONLY = 'Y'\n               DISPLAY '**** Print keys only: selected'.\n           IF PARM-SKIP NOT = ZERO\n               DISPLAY '**** Nbr of records skipped  ' PARM-SKIP.\n           IF (WS-PARM-RANGE NOT = ZERO)\n               AND (WS-PARM-RANGE NOT = 43)\n               DISPLAY '**** Parm range              ' PARM-RANGE.\n           CLOSE INFILE.\n           CLOSE PARM.\n           CLOSE PRINT-SUMMARY.\n           DISPLAY '**** INFILE records read     ' WS-READ-RCD-CNT.\n           DISPLAY '**** INFILE records written  ' WS-WRITE-RCD-CNT.\n\n       0000-READ-PARM.\n           READ PARM.\n           IF WS-PARM-STAT NOT = 00\n               DISPLAY '**** PRNTFILE read error on PARM'\n               DISPLAY '**** File stat = ' WS-PARM-STAT\n               MOVE 'Y'                       TO WS-ERROR-SW.\n\n       0000-EDIT-PARM.\n           IF PARM-AMOUNT NOT NUMERIC\n               DISPLAY '**** PRNTFILE parm-amount not numeric'\n               MOVE 'Y'                       TO WS-ERROR-SW\n           ELSE\n               MOVE PARM-AMOUNT               TO WS-PARM-AMOUNT.\n           IF PARM-RANGE NOT NUMERIC\n               DISPLAY '**** PRNTFILE parm-range not numeric'\n               MOVE 'Y'                       TO WS-ERROR-SW\n           ELSE\n               MOVE PARM-RANGE                TO WS-PARM-RANGE.\n           IF PARM-KEY-LENGTH NOT NUMERIC\n               DISPLAY '**** PRNTFILE parm-key-length not numeric'\n               MOVE 'Y'                       TO WS-ERROR-SW\n           ELSE\n               MOVE PARM-KEY-LENGTH           TO WS-PARM-KEY-LENGTH.\n           IF PARM-KEY-START NOT NUMERIC\n               DISPLAY '**** PRNTFILE parm-key-start not numeric'\n               MOVE 'Y'                       TO WS-ERROR-SW\n           ELSE\n               MOVE PARM-KEY-START            TO WS-PARM-KEY-START.\n           IF PARM-SKIP NOT NUMERIC\n               DISPLAY '**** PRNTFILE parm-skip not numeric'\n               MOVE 'Y'                       TO WS-ERROR-SW\n           ELSE\n               MOVE PARM-SKIP                 TO WS-PARM-SKIP\n               IF WS-PARM-SKIP > 9997\n                   DISPLAY '**** PRNTFILE skip amount too high'\n                   MOVE 'Y'                   TO WS-ERROR-SW.\n           IF NOT ERROR-FND\n             IF WS-PARM-KEY-LENGTH > ZERO\n                 MOVE SPACE                   TO WS-FULL-LINE-TABLE\n               IF PARM-KEY = 'XXXXXXXXXXXXXX'\n                   DISPLAY '**** PRNTFILE parm-key required when'\n                   DISPLAY '**** key length > 0 '\n                   MOVE ZERO                  TO WS-PARM-KEY-LENGTH\n                                               WS-PARM-KEY-START\n                   MOVE 'N'                   TO PARM-SELECT-ONLY\n                   MOVE 1                     TO WS-PARM-AMOUNT\n               ELSE\n               IF WS-PARM-KEY-START = ZERO\n                   DISPLAY '**** PRNTFILE: change parm-start'\n                   DISPLAY '**** and parm-length'\n                   MOVE ZERO                  TO WS-PARM-KEY-LENGTH\n                   MOVE 'N'                   TO PARM-SELECT-ONLY\n                   MOVE 1                     TO WS-PARM-AMOUNT\n               ELSE\n                   STRING PARM-KEY-START ' ' PARM-KEY-LENGTH\n                       DELIMITED BY SIZE\n                       INTO WS-HOLD-POS\n                   PERFORM 0000-FIND-PARM-KEY.\n           IF WS-PARM-KEY-LENGTH = ZERO\n               MOVE 'Y'                       TO WS-RECORD-FND-SW\n               MOVE 'N'                       TO PARM-SELECT-ONLY.\n           IF WS-PARM-AMOUNT = ZERO\n               MOVE 9998                      TO WS-PARM-AMOUNT.\n\n      *    crude attempt at centering HDG-3-FILE\n           IF PARM-FILE = 'XXXXXXXX' OR SPACE\n               MOVE '####  ####'              TO WS-PARM-FILE\n               MOVE SPACE                     TO HDG-3-FILE\n           ELSE\n               MOVE PARM-FILE                 TO WS-PARM-FILE\n               MOVE SPACE                     TO HDG-3-FILE\n               STRING WS-PARM-FILE            DELIMITED BY '  '\n                   ' file listing'            DELIMITED BY SIZE\n                   INTO HDG-3-FILE\n               CALL WS-CALL-STV0270B USING HDG-3-FILE.\n\n       0000-FIND-PARM-KEY.\n           MOVE PARM-KEY                      TO WS-KEY-TABLE.\n           PERFORM 0000-DISCOVER-KEY\n               VARYING INDX1 FROM 1 BY 1\n               UNTIL INDX1 > 14\n               OR INDX1 > WS-PARM-KEY-LENGTH.\n\n       0000-DISCOVER-KEY.\n           MOVE WS-KEY(INDX1)                 TO WS-KEY2(INDX2).\n           SET INDX2                          UP BY 1.\n\n       0000-PRINT-HEADING.\n           MOVE 2                             TO WS-SPACE-CONTROL1.\n           MOVE HEADING-LINE-1                TO PRINT-AREA.\n           PERFORM 0000-WRITE-PAGE-TOP.\n           MOVE 1                             TO WS-SPACE-CONTROL1.\n           MOVE HEADING-LINE-2                TO PRINT-AREA.\n           PERFORM 0000-WRITE-LINE.\n           MOVE 2                             TO WS-SPACE-CONTROL1.\n           MOVE HEADING-LINE-3                TO PRINT-AREA.\n           PERFORM 0000-WRITE-LINE.\n           ADD 1                              TO WS-PAGE-CNT.\n           MOVE 'PAGE:'                       TO HDG-PAGE.\n           MOVE WS-PAGE-CNT                   TO HDG-PAGE-CNT.\n           MOVE HEADING-LINE-4                TO PRINT-AREA.\n           PERFORM 0000-WRITE-LINE.\n           MOVE '####  ####'                  TO HDG-5-FILE.\n           MOVE 1                             TO WS-SPACE-CONTROL1.\n           MOVE HEADING-LINE-5                TO PRINT-AREA.\n           PERFORM 0000-WRITE-LINE.\n           MOVE 2                             TO WS-SPACE-CONTROL1.\n\n      ****************************************\n      *    after printing first page, determine record length using\n      *    first record on second page. this allows for printing\n      *    full records without splitting between pages.\n      *    if string search specified, search here until found.\n      ****************************************\n       0000-READ-AND-EDIT-INFILE.\n           IF WS-PAGE-CNT = 2\n               AND FORMAT-EVEN-REC\n               PERFORM 0000-FIND-AMOUNT-TO-SPACE.\n           IF WS-LINE-SUM > WS-LINE-MAX1\n               PERFORM 0000-PRINT-MARKER.\n\n           PERFORM 0000-READ-INFILE.\n\n           IF WS-PARM-SKIP > ZERO\n               ADD 1                          TO WS-SKIP-CNT\n               IF WS-SKIP-CNT NOT > WS-PARM-SKIP\n                   GO TO 0000-READ-EDIT-INFILE-EXIT\n               ELSE\n                   MOVE ZERO                  TO WS-PARM-SKIP.\n\n           IF PARM-SELECT-ONLY = 'Y'\n               MOVE 'N'                       TO WS-RECORD-FND-SW.\n\n           MOVE SPACE                         TO WS-FULL-LINE-TABLE\n                                                 WS-INFILE-TABLE.\n           IF MORE-RECORDS\n               MOVE 'N'                       TO WS-LINE-DONE-SW\n               ADD 1                          TO WS-READ-RCD-CNT\n               IF RECORD-NOT-FOUND\n                   MOVE SPACE                 TO WS-KEY-TABLE\n                   MOVE INFILE-RCD            TO WS-FULL-LINE-TABLE\n                   SET FULL                   TO WS-PARM-KEY-START\n                   PERFORM 0000-LOAD-KEY\n                       VARYING INDX1 FROM 1 BY 1\n                       UNTIL INDX1 > WS-PARM-KEY-LENGTH\n                       OR INDX1 > 14\n                   IF WS-KEY-TABLE = WS-KEY2-TABLE\n                       MOVE 'Y'               TO WS-RECORD-FND-SW\n                   ELSE\n                       GO TO 0000-READ-EDIT-INFILE-EXIT\n               ELSE\n                   NEXT SENTENCE\n           ELSE\n               GO TO 0000-READ-EDIT-INFILE-EXIT.\n           IF WS-PARM-RANGE = ZERO\n               MOVE 43                        TO WS-PARM-RANGE.\n           MOVE ZERO                          TO WS-HOLD-PLACE.\n           ADD 1                              TO WS-LINE-COUNT.\n           ADD 1                              TO WS-WRITE-RCD-CNT.\n           MOVE WS-LINE-COUNT                 TO D1-COUNT.\n           MOVE INFILE-RCD                    TO WS-INFILE-TABLE.\n           PERFORM 0000-GENERATE-INFILE-LINE\n               VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL LINE-DONE\n               OR WS-SUB1 > 42.\n\n       0000-READ-EDIT-INFILE-EXIT. EXIT.\n\n       0000-READ-INFILE.\n           READ INFILE\n               AT END\n                   MOVE 'Y'                   TO WS-END-FILE-SW.\n           IF WS-INFILE-STAT NOT = 00 AND 10\n               DISPLAY '**** PRNTFILE read error on INFILE'\n               DISPLAY '**** File stat = ' WS-INFILE-STAT\n               MOVE 'Y'                       TO WS-ERROR-SW.\n\n       0000-LOAD-KEY.\n           MOVE WS-FULL-LINE(FULL)            TO WS-KEY(INDX1).\n           SET FULL                           UP BY 1.\n\n      ****************************************\n      *    After reading next record, print until either parm range\n      *    is met or table holds only spaces. ws-hold-place is simply a\n      *    counter incremented by 120 to aid in viewing printout.\n      *    if record is 1 or 2 lines only, space 1 else space 2.\n      ****************************************\n       0000-GENERATE-INFILE-LINE.\n           MOVE SPACE                         TO D1-LINE.\n           INSPECT WS-INFILE(WS-SUB1) REPLACING ALL LOW-VALUE BY '.'.\n           MOVE WS-INFILE(WS-SUB1)            TO D1-LINE.\n           IF WS-PARM-RANGE < 43\n             IF WS-SUB1 > WS-PARM-RANGE\n                 MOVE 'Y'                     TO WS-LINE-DONE-SW\n             ELSE\n                 NEXT SENTENCE\n           ELSE\n           IF WS-SUB1 > WS-PARM-RANGE\n               OR WS-INFILE(WS-SUB1) = SPACE\n               MOVE 'Y'                       TO WS-LINE-DONE-SW.\n           IF NOT LINE-DONE\n             IF WS-INFILE(WS-SUB2) = SPACE\n                 OR WS-PARM-RANGE = '01'\n                 MOVE SPACE                   TO D1-PLACE\n             ELSE\n                 MOVE WS-HOLD-PLACE           TO D1-PLACE.\n           IF NOT LINE-DONE\n               ADD 120 TO WS-HOLD-PLACE\n               IF WS-LINE-SUM > WS-LINE-MAX2\n                   PERFORM 0000-PRINT-MARKER\n                   MOVE DETAIL-LINE-1         TO PRINT-AREA\n                   PERFORM 0000-WRITE-LINE\n               ELSE\n                   MOVE DETAIL-LINE-1         TO PRINT-AREA\n                   PERFORM 0000-WRITE-LINE.\n           MOVE SPACE                         TO D1-COUNT.\n           IF LINE-DONE\n               AND WS-SUB1 > 3\n               MOVE 2                         TO WS-SPACE-CONTROL1\n           ELSE\n               MOVE 1                         TO WS-SPACE-CONTROL1.\n\n      ****************************************\n      *    determine where to break to keep records from being split.\n      ****************************************\n       0000-FIND-AMOUNT-TO-SPACE.\n           SUBTRACT WS-SUB1 FROM WS-LINE-MAX2\n               GIVING WS-LINE-MAX1.\n           ADD 2                              TO WS-LINE-MAX1.\n           MOVE 'N'                           TO WS-FORMAT-EVEN-REC-SW.\n\n      ****************************************\n      *    print the markers at the end of the page and those at the\n      *    beginning of the next page, except the very first marker.\n      ****************************************\n       0000-PRINT-MARKER.\n           MOVE WS-PARM-FILE                  TO HDG-5-FILE\n           MOVE SPACE                         TO HDG-PAGE\n                                                 HDG-PAGE-CNT.\n           MOVE WS-SPACE-CONTROL2             TO WS-SPACE-CONTROL1.\n           MOVE HEADING-LINE-5                TO PRINT-AREA.\n           PERFORM 0000-WRITE-LINE.\n           MOVE 1                             TO WS-SPACE-CONTROL1.\n           MOVE HEADING-LINE-4                TO PRINT-AREA.\n           PERFORM 0000-WRITE-LINE.\n           ADD 1                              TO WS-PAGE-CNT.\n           MOVE 'PAGE:'                       TO HDG-PAGE.\n           MOVE WS-PAGE-CNT                   TO HDG-PAGE-CNT.\n           MOVE HEADING-LINE-4                TO PRINT-AREA.\n           PERFORM 0000-WRITE-PAGE-TOP.\n           MOVE '####  ####'                  TO HDG-5-FILE.\n           MOVE 1 TO WS-SPACE-CONTROL1.\n           MOVE HEADING-LINE-5                TO PRINT-AREA.\n           PERFORM 0000-WRITE-LINE.\n           MOVE 2 TO WS-SPACE-CONTROL1.\n\n       0000-WRITE-LINE.\n           WRITE PRINT-AREA\n               AFTER ADVANCING WS-SPACE-CONTROL1 LINES.\n           ADD WS-SPACE-CONTROL1              TO WS-LINE-SUM.\n\n       0000-WRITE-PAGE-TOP.\n           WRITE PRINT-AREA\n               AFTER ADVANCING PAGE-TOP.\n           MOVE 2                             TO WS-LINE-SUM.\n\n      ************************************ END PRNTFILE\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PRNTPARM": {"ttr": 15626, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x003\\x01\\x19\\x07?\\x01\\x191\\x9f\\x14B\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-11-15T14:42:33", "lines": 15, "newlines": 15, "modlines": 0, "user": "IANNONE"}, "text": "--0000--00--XXXXXXXXXXXXXX--00--0000--        --0000--N-----------------\n  .     .   .               .   .     .         .     .\n  .     .   .               .   .     .         .     Y = select only\n  .     .   .               .   .     .         .     rcds with key\n  .     .   .               .   .     .         # rcds to initially skip\n  .     .   .               .   .     file name documentation (8 max)\n  .     .   .               .   position of key in file (0 = ignore)\n  .     .   .               length of key from left (0 = ignore,14 max)\n  .     .   record 'key': begin printing after these characters found\n  .     .   (x's = ignore) (key = any character string in file).\n  .     # of bytes * 120 to print from front of record (0 = all,41 max)\n  .     use to force ## of rcds to print (when getting partial records)\n  nbr of rcds to print from beginning or from key (0 = all,9998 max)\n\n  type parameters over '0' and 'x' above\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PRNTPROC": {"ttr": 15628, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00S\\x01\\x19\\x07?\\x01\\x193\\x7f\\x12@\\x003\\x00.\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-12-03T12:40:53", "lines": 51, "newlines": 46, "modlines": 0, "user": "IANNONE"}, "text": "//useridP  JOB (8231),'PRNTPROC',CLASS=x,\n//             MSGCLASS=x,\n//*            RESTART=J010.S010,\n//             MSGLEVEL=(1,1)\n//********************************************\n//*\n//*  Print files with PRNTFILE utility\n//*\n//*  -  recompile to change input record length\n//*  -  change INFILE\n//*  -  change PRNTPARM as needed\n//*\n//********************************************\n//PRNTP    PROC SOUTC='X',\n//             SOUTD='D',\n//             COPY01=1,\n//             FORM01=8X11,\n//             FCB01=X116,\n//             SOUT01=E,\n//             DST=PRT29\n//********************************************\n//S010     EXEC PGM=PRNTFILE,\n//*            RESTART=S010,\n//             REGION=5120K\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//*\n//INFILE   DD  DSN=INPUT FILE OR PDS MEMBER,           *INPUT\n//             DISP=(SHR)\n//*NFILE   DD  DSN=TAPE FILE NAME,                     *INPUT  LRECL=80\n//*            DISP=(OLD,KEEP,KEEP)\n//*            LABEL=(,NL),\n//*            VOL=SER=MED90,\n//*            UNIT=(TAPE,,DEFER),\n//*            DCB=(RECFM=FB,LRECL=00080)\n//*            DCB=(RECFM=VB,LRECL=01304)\n//*\n//PARM     DD  DSN=userid.ISPF.FILE488(PRNTPARM),       *INPUT\n//             DISP=SHR\n//PRINTER  DD  SYSOUT=(&SOUT01,,&FORM01),\n//             FCB=&FCB01,\n//             DCB=RECFM=FM,\n//             COPIES=&COPY01,DEST=&DST\n//*PRINTER  DD  DSN=userid.PRNTFILE.XXXXXXXX.PRNT133,    *OUTPUT\n//*             DISP=(NEW,CATLG,DELETE)\n//********************************************\n//         PEND\n//J010     EXEC PRNTP\n//********************************************\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PULLCPY1": {"ttr": 15873, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x97\\x04O\\x01\\x00)\\x9f\\x15V\\x00\\x0e\\x00\\x0b\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1997-02-13T00:00:00", "modifydate": "2000-10-25T15:56:00", "lines": 14, "newlines": 11, "modlines": 0, "user": "IANNONE"}, "text": "      *********************************\n      *  USED BY PULLFILE\n      *********************************\n           SELECT INFILE               ASSIGN TO INFILE\n      *    SELECT INFILE  (ESDS)       ASSIGN TO AS-INFILE\n                                       ACCESS MODE IS SEQUENTIAL\n      *********************************\n      **** ALTER: ORGANIZATION: SEQUENTIAL OR INDEXED\n                                       ORGANIZATION IS SEQUENTIAL\n      *                                ORGANIZATION IS INDEXED\n      *********************************\n      **** ALTER: RECORD KEY: USE IF INDEXED\n      *                                RECORD KEY IS INFILE-KEY\n                                       FILE STATUS IS WS-STAT.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PULLCPY2": {"ttr": 15875, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01G\\x00\\x00\\x00\\x97\\x04O\\x01\\x00)\\x9f\\x15V\\x00\\x14\\x00\\x14\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.71", "flags": 0, "createdate": "1997-02-13T00:00:00", "modifydate": "2000-10-25T15:56:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "IANNONE"}, "text": "      *********************************\n      *  USED BY PULLFILE\n      *********************************\n       FD  INFILE\n           RECORDING MODE IS F\n           BLOCK CONTAINS 0.\n\n      *********************************\n      **** ALTER: RECORD LENGTH: USE IF SEQUENTIAL\n       01  INFILE-RECORD.\n           05  INFILE-RCD              PIC  X(080).\n\n      *********************************\n      **** ALTER: RECORD LENGTH: USE IF INDEXED\n      *01  INFILE-RECORD.\n      *    02  INFILE-RCD              PIC  X(80).\n      *    02  FILLER REDEFINES INFILE-RCD.\n      *        05  FILLER              PIC  X.\n      *        05  INFILE-KEY          PIC  X(09).\n      *        05  FILLER              PIC  X(70).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PULLCPY3": {"ttr": 15877, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00S\\x01\\x19\\x07?\\x01\\x19\\x07?\\t \\x00\\r\\x00\\r\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-03-14T09:20:53", "lines": 13, "newlines": 13, "modlines": 0, "user": "IANNONE"}, "text": "      *********************************\n      *  USED BY PULLFILE\n      *********************************\n       FD  OUTFILE\n           RECORDING MODE IS F\n           BLOCK CONTAINS 0.\n       01  OUTFILE-RECORD.\n           05  OUTFILE-RCD             PIC  X(080).\n\n       FD  OUTPRNT\n           RECORDING MODE IS F.\n       01  OUTPRNT-RECORD.\n           05  OUTPRNT-RCD             PIC  X(080).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PULLDOCU": {"ttr": 15879, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x17\\x01\\x19\\x07?\\x01\\x193\\x8f\\x143\\x02\\x08\\x01\\xb5\\x00\\x00\\xd4\\xc9\\xe2\\xf1\\xf4\\xf6@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-03-14T00:00:00", "modifydate": "2019-12-04T14:33:17", "lines": 520, "newlines": 437, "modlines": 0, "user": "MIS146"}, "text": "\n  PULLFILE                                          Dec. 7th, 2000\n  --------\n\n  PULLFILE is used to pull portions of data (ie: files/members)\n  and place in an output file for later sorting/editing/printing.\n  The default processing is that a record is only pulled for output\n  when specifically found.  See (xsi) to override this.\n\n  limits:  input lrecl: 30 - 9999 bytes\n           output lrecl: 10 - 9999 bytes\n\n           parm may hold up to 100 search selections\n\n           search strings may be up to 24 bytes long\n\n   JCL INPUT PARM\n   --------------\n   format:  PARM='aaaabcddef/'\n\n   aaaa  : the INPUT FILE RECORD LENGTH must be entered here.\n               4 digits, numeric, 9999 max.\n\n   b     : Y = place the record number of the input file in the first\n               9 bytes of the output file\n\n   c     : depending on the selection values used, sometimes the\n           beginning pull position for the output data is higher than\n           the ending pull position.  Y = switch the two so that a\n           proper starting position/length can be determined.  usually\n           this is best left to N.  set to Y if you have a delimiter\n           defined for the beginning pull position and a relative (+/-)\n           reference to that delimiter in the ending pull position\n           that might end up having a lower value than the beginning\n           pull position.\n\n\n   dd    : blank  = use dd OUTFILE without page breaks\n           ##     = use dd OUTPRNT and include page breaks\n                    specify number of lines per page\n                    00 = forty-four lines per page\n\n   e     : test parm.  blank  = skip display\n                       0      = display values of variables\n                       1      = display contents of line table\n                       2      = display contents of sort records\n                       3      = display contents of infile\n                       9      = display all\n\n   f     : filler\n\n\n   Directions for using\n   --------------------\n   1.  copy PULLPARM and PULLPROC to your library and update as needed.\n       change run parm parameters in PULLPROC, ESPECIALLY the\n       INPUT FILE LENGTH.\n   2.  edit PULLCPY1, PULLCPY2, and PULLCPY3 copybooks\n         OUTFILE is used when no page breaks are requested\n         OUTPRNT is used when page breaks are requested\n   3.  compile PULLFILE into your object library using the\n         PULLCOMP compile procedure.  Consider renaming the\n         output load module to PULL#### where #### is the input\n         record length.\n   4.  run PULLPROC\n\n\n   PULLPARM\n   --------\n\n**  <-------------------x-- ---------- -------- -------- ---------------\n**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---------- -------- -------- ---------------\n\n position  01 to 04\n   if this is '**  ' then it is considered a documentation line\n\n position  01 to 24  (a)\n   enter a search string in position 1 (though that can be spaces if\n   part of the string).  PULLFILE searches through the input file\n   and looks for the search string (either at a fixed position or\n   anywhere in the record) and, when found, pulls all or portions of\n   that record, or following records.  24 digits, alphanumeric\n\n   '#NBR#' means search for numeric characters at a given position,\n   rather than an exact string.  ie: search for any numeric tape volser.\n\n   '#SPACE#' means search for spaces at a given position\n\n   '#MAX#' means limit printing of each line (e) nbr of times\n\n position  25        (xsi)\n       note: PULLFILE by default only pulls specified records.\n       'X' and 'I' are used to override this logic.\n       to pull groups of records (ie: from one string to another),\n       use the 'S' (xsi) parm entry below a blank or 'I' (xsi)\n       parm entry.\n   'X' skip this record when specified string is found\n       all 'X' records must be placed at the top of the parm list.\n       if an 'X' parm processes, following parms are skipped.\n   'I' means include a record regardless of contents of search string\n       string length is automatically set to '01'.\n       use after 'X' to include all records except those excluded\n       by an 'X' record.\n       Use before an 'S' (xsi) record to pull all records until\n       a specific string is found.\n   'S' when the string is found, mark the previous selection\n       line to stop pulling records.\n       if it follows a blank (xsi) record, this allows pulling when\n       a string is found, and stopping when another string is found.\n       normally the blank (xsi) parm entry that is above the\n       'S' (xsi) parm entry will specify 999 in (e).\n       if it follows an 'I' (xsi) record, this allows pulling\n       all records until a specific string is found.\n       If (d) > 00, include (d) lines past this line,\n       or set stop point before this line using (d) and (-).\n    #  2-9, allows duplicates when (e) > zero.\n       if string 'ABC' is found, and parm (e) is 999,\n       then if 'ABC' is again found in another record, this will\n       allow the line to print again, up to # times.\n\n\n**  <-------------------x-- ---------- -------- -------- ---------------\n**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---------- -------- -------- ---------------\n\n position  26 to 27  (b)\n   enter the length of the search string, including any trailing\n   spaces.  2 digits, numeric.\n   CC = automatically calculate the string length\n\n position  28        (m)\n   if you want to limit the number of duplicate strings pulled\n   from a record, enter 'M' here, and value (c) to the maximum\n   number of pulled matches in that record.\n\n position  29 to 32  (c)\n   if you only want to select search strings found at a specific\n   location, enter that here.\n   4 digit, numeric.\n   if 29 is 'M' then this is the maximum number of duplicate\n   strings to pull from a single line.\n   1 digit alpha + 3 digit numeric.\n\n position  33        (-)\n   - means begin pulling (d) records before current record.\n\n position  34 to 35  (d)\n   enter the starting record to pull.  00 means pull the current\n   record.  01 means when the string is found, pull starting at the\n   next record.  if (e) is greater then 01, then pull those\n   records as well.  2 digits, numeric.\n   also see (-).\n\n position  36 to 38  (e)\n   if (xsi) = 'S', this parm is ignored.\n   pull this many records, beginning with the records selected\n   from (d).  the records will be formated as determined by the\n   parameters from the search string parm.  3 digits, numeric.\n   enter '999' to pull to end of file.\n\n\n**  <-------------------x-- ---------- -------- -------- ---------------\n**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---------- -------- -------- ---------------\n\n position  40  (f)  thru  47  (#)\n   if (xsi) = 'S', this parm is ignored.\n   used to determine the beginning position for pulling data.\n   ex: if data is 'abcd5fghi0klmn5pqrs0uvwx5z' and the search\n   string is '0k' then the following applies:\n\n   parm for beginning position   data where pull begins\n   '  00000 '                    a\n   'P 00003 '                    c\n   '+ 00004 '                    n\n   '+ 00000 '                    0\n   '2 5p    '                    5p\n   '2E5p    '                    q\n   '1E5    3'                    z\n\n position  40  (f)\n   ' '  pull from the beginning of the input data\n   'P'  pull from position (g)\n   '+'  pull a number of bytes before (-) or past (+) the position\n   '-'    determined by (h).\n   '1'  the length of the pull delimiter specified from left to right\n   '2'   in position 42.  ex: '2 ab    ' will set the beginning\n   '3'   pull position to the first occurrence of 'ab' in the input\n   '4'   record.\n   '5'\n\n position  41  (.)\n   'E'  exclude the delimiter from the calculation of the beginning\n         position.  used with options 1 - 5 above.  ex: if the input\n         record contains 'dsn=pdsms.svoa.dga6.back' then a pull\n         parameter of '4Edsn=  ' will set the ending position to the\n         'p' in 'pdsms' rather than the 'd' in 'dsn='.\n   'H'  used with options + or - above.  this says 'calculate the\n        ending position (either a fixed position or a delimiter),\n        set the beginning position to that ending position, then\n        alter it plus or minus a set number of bytes.\n   ' '  no alteration of the beginning position\n\n position  42 to 46  (g)\n   a 5 byte numeric position or\n   a left justified search delimiter for determining the beginning\n    pull position.\n\n position  47  (#)\n   if determining the beginning pull position via a delimiter search,\n   a value > 0 here says to select the # occurrence of the\n   delimiter rather than the first occurrence found.\n   ex:  '2 ab   3'  selects the 3rd 'ab' in 'sabdefgabgrdabgthj'\n                                                         --\n\n\n**  <-------------------x-- ---------- -------- -------- ---------------\n**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---------- -------- -------- ---------------\n\n position  49  (h)  thru  56  (i)\n   if (xsi) = 'S', this parm is ignored.\n   used to determine the ending position for pulling data.\n   the rules are similar to those for (f) except that\n   if (f) is relative to (h) then (h) is determined first.\n   ex:  if (f) is  '+H00004 ' and (h) is '5 PDSMS ' then the\n        ending pull position is determined by searching the\n        input record for PDSMS before the beginning pull position\n        is calculated (ie: 4 bytes past the 'P' in PDSMS.  Note that\n        in this example the beginning pull position ends up\n        greater than the ending position: unless the run parm 'c'\n        is set to 'Y' (to switch the values of the beginning and\n        ending positions when this occurs), this data will not be\n        pulled.\n\n position  49  (h)\n   ' '  pull through the ending of the input data\n   'P'  pull up to position (i)\n   '+'  pull a number of bytes before (-) or past (+) the position\n   '-'    determined by (h).\n   '1'  the length of the pull delimiter specified from left to right\n   '2'   in position 51.  ex: '2 ab    ' will set the ending\n   '3'   pull position to the first occurrence of 'ab' in the input\n   '4'   record.\n   '5'\n\n position  50  (.)\n   'E'  exclude the delimiter from the calculation of the ending\n         position.  used with options 1 - 5 above.  ex: if the input\n         record contains '....backup.file,disp=shr' then a pull\n         parameter of '5E,disp ' will set the ending position to the\n         'e' in 'file', rather than the comma.\n   'F'  used with options + or - above.  this says 'calculate the\n        beginning position (either a fixed position or a delimiter),\n        set the ending position to that beginning position, then\n        alter it plus or minus a set number of bytes.\n   ' '  no alteration of the ending position.\n\n position  51 to 55  (i)\n   a 5 byte numeric position or\n   a left justified search delimiter for determining the ending\n    pull position.\n\n position  56  (#)\n   if determining the ending pull position via a delimiter search,\n   a value > 0 here says to select the # occurrence of the\n   delimiter rather than the first occurrence found.\n   ex:  '2 ab   3'  selects the 3rd 'ab' in 'sabdefgabgrdabgthj'\n                                                         --\n\n**  <-------------------x-- ---------- -------- -------- ---------------\n**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---------- -------- -------- ---------------\n\n position  58 to 72  (j)\n   if (xsi) = 'S', this parm is ignored.\n   - enter a title to place in front of the output string\n     if run parm option 'b' is a 'Y' for line numbering, output\n     location changes\n     ex:  'title          '    out:  'title           XXX...'\n     ex:  'title          '    out:  '00000001 title           XXX...'\n   - entering 'I## ' in positions 58 to 61:\n     if the remainder of (j) is space, spaces for a length of ##\n       will be inserted in front of the output.\n       ex: 'I05            '   out:  '      XXX...          '\n     else the remainder of (j) is treated as a title\n       ex: 'I06 title      '   out:  'title XXX...          '\n     if position 62 of (j) requests case conversion (below), spaces\n       are inserted before the output for a length of ##.\n       ex: 'I06 L00030009  '   out:  '      XXxxxxxxxXXXXXX...'\n   - convert the output to lowercase by entering 'Laaaabbbb'\n       in position 58, or precede with an 'I##' parm and place in\n       position 62 (above).\n       aaaa = starting position (0000 = start at position 1)\n       bbbb = ending position (0000 = convert to end-of-record)\n       00000000 = convert whole record\n       note: case conversion is performed BEFORE titles/spaces are\n       inserted in front of the output.  adjust accordingly.\n   - convert the output to uppercase by entering 'Uaaaabbbb'\n       ex:  U00100030  means convert pos 10 through 30 to uppercase\n\n\n -----------------\n PULLPARM examples\n -----------------\n\n\n**  <-------------------x-- ---------- -------- -------- ---------------\n**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---------- -------- -------- ---------------\nS. U. T.                 08 0000 00000 - 00006  P 00050\n\n1.  search for string S. U. T., length 8, anywhere in the input file.\n    if found, pull from 6 bytes in front of the find string, up to\n    position 50.\ninput:\n00000044176 96.K  S. U. T.                                    11/25/96\noutput:\n96.K  S. U. T.\n\n-----------------------------------------------------------------------\n\n**  <-------------------x-- ---------- -------- -------- ---------------\n**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---------- -------- -------- ---------------\nS. U. T.                 08 0000 00000 - 00006  +F00003\n\n2.  search for string S. U. T., length 8, anywhere in the input file.\n    if found, pull from 6 bytes in front of the find string, to 3 bytes\n    past that.\ninput:\n00000044176 96.K  S. U. T.                                    11/25/96\noutput:\n96.K\n\n-----------------------------------------------------------------------\n\n**  <-------------------x-- ---------- -------- -------- ---------------\n**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---------- -------- -------- ---------------\nLISTC                    05 0000 00000 + 00011  3E')     I23\n\n3.  search for string LISTC, length 5, anywhere in the input file.\n    if found, pull from 11 bytes after the 'L' in LISTC, up to\n    but not including the 3 byte delimiter QUOTE+RIGHT PAREN+SPACE.\n    if delimiter is not found, skip pulling for this parm.\n    prefix output with 23 spaces.\ninput:\n LISTC ENT('PDSMS.TMSI.SITE.TAPELEVL')\noutput:\n                       PDSMS.TMSI.SITE.TAPELEVL\n\n-----------------------------------------------------------------------\n\n**  <-------------------x-- ---------- -------- -------- ---------------\n**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---------- -------- -------- ---------------\nSYSUT2                   06 0003 00000 3ESN=    1E,      File 01:\n\n4.  search for string SYSUT2, length 6, at position 03 in the input\n    file.  if found, search for the 3 byte delimiter SN=.  Reset\n    the beginning pull position to not include the delimiter.\n    pull up to, but not including, the 1 byte delimiter COMMA.\n    prefix output with the title 'File 01:       '.\ninput:\n//SYSUT2   DD  DSN=PDSMS.SMTI.DGA6.BDM92OPT,DISP=SHR\noutput:\nFile 01:        PDSMS.SMTI.DGA6.BDM92OPT\n\n-----------------------------------------------------------------------\n\n**  <-------------------x-- ---------- -------- -------- ---------------\n**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---------- -------- -------- ---------------\nSYSUT2                   06 0000 00000 3 SN=    +F00044\n\n5.  search for string SYSUT2, length 6, anywhere in the input\n    file.  if found, search for the 3 byte delimiter SN=.  determine\n    the ending pull position to be 44 bytes after the S in the\n    beginning delimiter.\ninput:\n//SYSUT2   DD  DSN=PDSMS.SMTI.DGA6.BDM92OPT,DISP=SHR\noutput:\nSN=PDSMS.SMTI.DGA6.BDM92OPT,DISP=SHR\n\n-----------------------------------------------------------------------\n\n**  <-------------------x-- ---------- -------- -------- ---------------\n**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---------- -------- -------- ---------------\nSYSUT2                   06 0000 00000 4 DSN= 2 + 00044  Cash file ->\n\n6.  search for the string SYSUT2, length 6, anywhere in the input\n    file.  if found, search for the 2nd occurrence of 4 byte\n    delimiter DSN=.  determine the ending pull position to be 44 bytes\n    after the S in the find string (since no F was used in position\n    50 to base the ending position relative to the beginning position\n    instead of the find string).  prefix the output with the title\n    'Cash file ->   '.\ninput:\n//SYSUT2   DD  DSN=PDSMS.SMTI.DGA6.TEMP.BDMMTHHI,DISP=SHR\noutput:\nCash file ->   DSN=PDSMS.SMTI.DGA6.TEMP.BDMMTHH\n\n-----------------------------------------------------------------------\n\n**  <-------------------x-- ---------- -------- -------- ---------------\n**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---------- -------- -------- ---------------\nA                        01 0000 01003   00000    00000\n\n7.  search for A, length 1, anywhere in the input record.\n    once found, write the next 3 records (full length) to\n    the output file (this will not include the current record).\n\n\n-----------------------------------------------------------------------\n\n**  <-------------------x-- ---------- -------- -------- ---------------\n**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---------- -------- -------- ---------------\nBBB                      03 0000 00000 + 00000  + 00000\n\n8.  search for BBB, length 3, anywhere in the input record.\n    once found, determine the beginning pull position to be the\n    first B, and the ending position to be the first character\n    of the search string (in this case, the first B).\ninput:\nABBBCCDDDEEFFGGHHJJ\noutput:\nB\n\n-----------------------------------------------------------------------\n\n**  <-------------------x-- ---------- -------- -------- ---------------\n**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---------- -------- -------- ---------------\nABC                      01 0000 00000 - 00003  +F00002\n\n9.  search for ABC, length 3, anywhere in the input record.\n    once found, determine the beginning pull position to be 3 positions\n    before the search string.  determine the ending position to be 2\n    positions past the beginning pull position.\ninput:\nABBBCCQABCEFFGGHHJJ\noutput:\nCCQ\n\n-----------------------------------------------------------------------\n\n**  <-------------------x-- ---------- -------- -------- ---------------\n**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---------- -------- -------- ---------------\n                        I01 0000 00000   00000    00000\nthat                    S04 0000 01000   00000    00000\n\n10. Include all records until 'that' is found.  Include the record\n    containing 'that'.\ninput:\nMary had a little Lamb\nIts fleece was white as snow\nEverywhere that Mary went\nThe Lamb was sure to go\noutput:\nMary had a little Lamb\nIts fleece was white as snow\nEverywhere that Mary went\n\n-----------------------------------------------------------------------\n\n**  <-------------------x-- ---------- -------- -------- ---------------\n**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---------- -------- -------- ---------------\nMary                     04 0000 00999   00000    00000  U00000000\nas                      S02 0000 00000   00000    00000\n\n11. When 'Mary' is found, pull records until 'as' is found.\n    Exclude stop line.  Convert pulled records to uppercase.\ninput:\nMary had a little Lamb\nIts fleece was white as snow\nEverywhere that Mary went\nThe Lamb was sure to go\nIt followed her to school one day\nWhich was against the rules\nIt made the children laugh and play\nTo see a lamb in school\noutput:\nMARY HAD A LITTLE LAMB\nEVERYWHERE THAT MARY WENT\n\n-----------------------------------------------------------------------\n\n**  <-------------------x-- ---------- -------- -------- ---------------\n**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---------- -------- -------- ---------------\nNUMBER  458              12 0009-03999   00000    00000\nNUMBER  460             S12 0009-04000   00000    00000\n\n12. Searching for 'NUMBER 458' in position 9 of a report,\n    begin pulling from 3 records ABOVE the found string\n    (to include the report headers).  Pull until 4 records before\n    'NUMBER 460' (to include all records for ledger 459 but to\n    exclude the report headers for ledger 460).\n\n-----------------------------------------------------------------------\n\n**  <-------------------x-- ---------- -------- -------- ---------------\n**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---------- -------- -------- ---------------\n DEPT                    06 0002-04999   00000    00000\nEND OF                  S06 0002 00000   00000    00000\n\n13. Search for \" DEPT \" length 6 in position 2.\n    When found, begin pulling from four records previous, and pull\n    until \"END OF\" is found in position 2.\n    999 = pull until EOF\n\n-----------------------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PULLDSN": {"ttr": 16129, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x05\\x01\\x19\\x07/\\x01\\x192?\\x11\\x19\\x00D\\x009\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T11:19:05", "lines": 68, "newlines": 57, "modlines": 0, "user": "IANNONE"}, "text": "//useridP JOB (8231),'PULLDSN',CLASS=x,\n//             MSGCLASS=x,\n//*            RESTART=J010.S010,\n//             MSGLEVEL=(1,1)\n//********************************************\n//*    pull datasets from standard JCL, address space startups,\n//*    CICS startups, etc.\n//*\n//*    pull datasets, format, and place in pullout in the\n//*    order they were encountered (change EzyEdit option to ASIS\n//*    if searching for concatenations)\n//********************************************\n//S010     EXEC PGM=PULL0080,\n//*            RESTART=S010,\n//             REGION=5120K,\n//             PARM='0080NN    /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//INFILE   DD  DSN=cics library(cics startup member),\n//             DISP=SHR\n//OUTFILE  DD  DSN=ispf library or file(member),\n//             DISP=SHR\n//OUTPRNT  DD  DUMMY\n//PARM01   DD  *,DLM=ZZ\n**\n**  find \"DSN=\" for a length of four\n**  start pulling four bytes past \"DSN=\"\n**  insert a single space in front of output\n**\n**  <-------------------X-- ---- ----- -------- -------- ---------------\n**           A           BB CCCC DDEEE F.GGGGG# H.IIIII#       J\n**  <----+----+----+----I-- ---- ----- -------- -------- ---------------\nDSN=                     04 0000 00000 + 00004    00000  I01\nZZ\n//*-------------------------------------------\n//S020     EXEC PGM=CHNG0080,\n//             REGION=5120K,\n//             PARM='0080N0000000000N00000000/'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//CHANGED  DD  DSN=outfile from above,\n//             DISP=SHR\n//OFFSET   DD  DISP=SHR,DSN=userid.ISPF.FILE488(MIS10010)\n//PARM01   DD  *,DLM=ZQ\n*\n*   change blank in position 1 (from above) to single quote\n*   starting at pos 5, find comma and replace with single quote\n*     followed by 34 spaces\n*   find any (member) references and replace with single quote\n*     followed by 11 spaces\n*   blank out positions 50 through end of record\n*\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n N00   00010000  0001\n N00   00010000  0001  '\n N00  L00050000  0001  ,\n N00   00000000  0035  '\n N00   00000000  0001  (\n N00   00000000  0012  '\n R00   00500000  0031\nZQ\n//*-------------------------------------------\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PULLDSNS": {"ttr": 16131, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00#\\x01\\x19\\x07/\\x01\\x192?\\x11\\x19\\x00V\\x00K\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T11:19:23", "lines": 86, "newlines": 75, "modlines": 0, "user": "IANNONE"}, "text": "//useridP JOB (8231),'PULLDSNS',CLASS=x,\n//             MSGCLASS=x,\n//*            RESTART=J010.S010,\n//             MSGLEVEL=(1,1)\n//********************************************\n//*    pull datasets, format, sort and eliminate duplicates,\n//*    and place in PULLOUT.\n//********************************************\n//S010     EXEC PGM=PULL0080,\n//*            RESTART=S010,\n//             REGION=5120K,\n//             PARM='0080NN    /'\n//STEPLIB  DD  DSN=userid.ISPF.OBJ,DISP=SHR\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//INFILE   DD  DSN=cics startup library(CICS),\n//             DISP=SHR\n//OUTFILE  DD  DSN=&&TEMP01,\n//             DISP=(NEW,PASS,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(80,(800,20),RLSE),AVGREC=U,\n//             RECFM=FB,LRECL=80,DCB=(DSORG=PS)\n//OUTPRNT  DD  DUMMY\n//PARM01   DD  *,DLM=ZZ\n**\n**  find \"DSN=\" for a length of four\n**  start pulling four bytes past \"DSN=\"\n**  insert a single space in front of output\n**\n**\n**  <-------------------X-- ---- ----- -------- -------- ---------------\n**           A           BB CCCC DDEEE F.GGGGG# H.IIIII#       J\n**  <----+----+----+----I-- ---- ----- -------- -------- ---------------\nDSN=                     04 0000 00000 + 00004    00000  I01\nZZ\n//*-------------------------------------------\n//S020     EXEC PGM=CHNG0080,\n//             REGION=5120K,\n//             PARM='0080N0000000000N00000000/'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//CHANGED  DD  DSN=&&TEMP01,\n//             DISP=(OLD,PASS,DELETE)\n//OFFSET   DD  DISP=SHR,DSN=userid.ISPF.FILE488(MIS10010)\n//PARM01   DD  *,DLM=ZQ\n*\n*   change blank in position 1 (from above) to single quote\n*   starting at pos 5, find comma and replace with single quote\n*     followed by 34 spaces\n*   find any (member) references and replace with single quote\n*     followed by 11 spaces\n*   blank out positions 50 through end of record\n*\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n N00   00010000  0001\n N00   00010000  0001  '\n N00  L00050000  0001  ,\n N00   00000000  0035  '\n N00   00000000  0001  (\n N00   00000000  0012  '\n R00   00500000  0031\nZQ\n//*-------------------------------------------\n//S030     EXEC PGM=SORT,\n//             REGION=5120K,\n//*            RESTART=S010,\n//             COND=(0,NE)\n//SORTMSG  DD  SYSOUT=*\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SORTIN   DD  DSN=&&TEMP01,                           *INPUT\n//             DISP=(OLD,DELETE,DELETE)\n//SORTOUT  DD  DSN=userid.ISPF.FILE488(PULLOUT),\n//             DISP=SHR\n//SORTWK01 DD  UNIT=SYSDA,SPACE=(TRK,(80))\n//SORTWK02 DD  UNIT=SYSDA,SPACE=(TRK,(80))\n//SORTWK03 DD  UNIT=SYSDA,SPACE=(TRK,(80))\n//SYSIN    DD  *\n  SORT FIELDS=(01,44,A),FORMAT=CH\n  SUM FIELDS=NONE\n  END\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PULLFILE": {"ttr": 16134, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\"\\x01\\x19\\x07/\\x01\\x192/\\x12B\\x06;\\x060\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-18T12:42:22", "lines": 1595, "newlines": 1584, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  PULLFILE: pull selected records for output'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    PULLFILE.\n      ******************************************************************\n      *@@@ C3 pull selected records for output processing\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      *\n      * Date written: 02/12/97\n      * Author      : Jim Iannone      Toledo, Ohio\n      *\n      * Loop through an input file and search for a specified string\n      * in a specified position, or anywhere in the file.\n      * When found, write that (full or partial) record, or a group of\n      * records (including or not including the original search record)\n      * to an output file.  Enter up to 100 strings.\n      *\n      * see PULLDOCU\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n           C01 IS PAGE-TOP.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           COPY PULLCPY1.\n\n           SELECT OUTFILE              ASSIGN TO OUTFILE\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT OUTPRNT              ASSIGN TO OUTPRNT\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT SORT-PARM            ASSIGN TO S-SORTWK01.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       COPY PULLCPY2.\n\n       FD  PARM01\n           RECORDING MODE IS F\n           BLOCK CONTAINS 0.\n       01  PARM01-RECORD.\n           05  PARM01-RCD1             PIC  X(80).\n           05  FILLER REDEFINES PARM01-RCD1.\n               10  PARM01-DOCU         PIC  X(04).\n               10  FILLER              PIC  X(76).\n           05  FILLER REDEFINES PARM01-RCD1.\n               10  PARM01-A            PIC  X(24).\n               10  PARM01-XSI          PIC  X.\n               10  PARM01-B            PIC  XX.\n               10  FILLER              PIC  X.\n               10  PARM01-C            PIC  X(04).\n               10  PARM01-DASH         PIC  X.\n               10  PARM01-D            PIC  XX.\n               10  PARM01-E            PIC  XXX.\n               10  FILLER              PIC  X.\n               10  PARM01-F            PIC  X.\n               10  PARM01-DOT1         PIC  X.\n               10  PARM01-G            PIC  X(05).\n               10  PARM01-NBR1         PIC  X.\n               10  FILLER              PIC  X.\n               10  PARM01-H            PIC  X.\n               10  PARM01-DOT2         PIC  X.\n               10  PARM01-I            PIC  X(05).\n               10  PARM01-NBR2         PIC  X.\n               10  FILLER              PIC  X.\n               10  PARM01-J            PIC  X(15).\n               10  FILLER              PIC  X(08).\n\n       SD  SORT-PARM.\n       01  SORT-RECORD.\n           05  SR-LINE1                PIC  9(08).\n           05  SR-LINE2                PIC  9(08).\n           05  SR-SUB                  PIC  9(05).\n           05  SR-SEL1                 PIC  9(04).\n           05  SR-SEL2                 PIC  9(04).\n           05  SR-REL                  PIC  X.\n           05  SR-TITLE                PIC  X(15).\n\n       COPY PULLCPY3.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage PULLFILE start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-PARM01-MAX           PIC  999      VALUE ZERO.\n           05  WS-INPUT-RCD-LENGTH     PIC S9(04)    VALUE ZERO.\n           05  WS-X                    PIC S9(04)    VALUE ZERO.\n           05  WS-Y                    PIC S9(04)    VALUE ZERO.\n           05  WS-Z                    PIC S9(04)    VALUE ZERO.\n           05  WS-WORK1                PIC S9(08)    VALUE ZERO.\n           05  WS-WORK2                PIC  9(05)    VALUE ZERO.\n           05  WS-WORK3                PIC S9(05)    VALUE ZERO.\n           05  WS-LINE                 PIC  9(05)    VALUE ZERO.\n           05  WS-MAX-POS              PIC S9(05)    VALUE ZERO.\n           05  WS-MAX-LINE             PIC  9(05)    VALUE ZERO.\n           05  WS-DUPL-CNT             PIC  9(04)    VALUE ZERO.\n           05  WS-IN                   PIC  9(05)    VALUE ZERO.\n           05  WS-OUT                  PIC  9(05)    VALUE ZERO.\n           05  WS-IN-CNT-X             PIC  X(08)    VALUE SPACE.\n           05  WS-A2                   PIC  X(24)    VALUE SPACE.\n           05  FILLER REDEFINES WS-A2.\n               10  WS-A2-1             PIC  X.\n               10  FILLER              PIC  X(23).\n           05  WS-XSI2                 PIC  X        VALUE SPACE.\n           05  WS-XSI-MAX              PIC  99       VALUE ZERO.\n           05  WS-XSI-CNT              PIC S9(05)    VALUE ZERO.\n           05  WS-B2                   PIC  99       VALUE ZERO.\n           05  WS-C2                   PIC  9(04)    VALUE ZERO.\n           05  WS-C2-M                 PIC  X        VALUE SPACE.\n           05  WS-D2                   PIC  99       VALUE ZERO.\n           05  WS-D2-DASH              PIC  X        VALUE SPACE.\n           05  WS-E2                   PIC  999      VALUE ZERO.\n           05  WS-F2                   PIC  X        VALUE SPACE.\n           05  WS-F2-N REDEFINES WS-F2 PIC  9.\n           05  WS-G2                   PIC  X(05)    VALUE '00000'.\n           05  WS-G2-N REDEFINES WS-G2 PIC  9(05).\n           05  WS-H2                   PIC  X        VALUE SPACE.\n           05  WS-H2-N REDEFINES WS-H2 PIC  9.\n           05  WS-I2                   PIC  X(05)    VALUE '0000'.\n           05  WS-I2-N REDEFINES WS-I2 PIC  9(05).\n           05  WS-J2                   PIC  X(15)    VALUE SPACE.\n           05  WS-DT1                  PIC  X        VALUE SPACE.\n           05  WS-DT2                  PIC  X        VALUE SPACE.\n           05  WS-NB1                  PIC  9        VALUE ZERO.\n           05  WS-NB2                  PIC  9        VALUE ZERO.\n           05  WS-TTL                  PIC  X(15)    VALUE SPACE.\n           05  FILLER REDEFINES WS-TTL.\n               10  WS-TTL-1            PIC  X.\n               10  WS-TTL-2X3          PIC  XX.\n               10  WS-TTL-4            PIC  X.\n               10  WS-TTL-5            PIC  X.\n               10  FILLER              PIC  X(04).\n               10  WS-TTL-10X13        PIC  X(04).\n               10  FILLER              PIC  XX.\n           05  FILLER REDEFINES WS-TTL.\n               10  FILLER              PIC  X.\n               10  WS-TTL-2X5          PIC  X(04).\n               10  WS-TTL-6X9          PIC  X(04).\n               10  FILLER              PIC  X(06).\n           05  FILLER REDEFINES WS-TTL.\n               10  FILLER              PIC  X(04).\n               10  WS-TTL-5X15         PIC  X(11).\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-IN-CNT               PIC S9(08)    VALUE ZERO.\n           05  WS-PREV-IN-CNT          PIC S9(08)    VALUE ZERO.\n           05  WS-LINE-PRINT-CNT       PIC  9(05)    VALUE ZERO.\n           05  WS-LINE-PRINT-MAX       PIC  9(05)    VALUE ZERO.\n           05  WS-WRITE-RCD-CNT        PIC S9(08)    VALUE ZERO.\n           05  WS-SORT-RCD-CNT         PIC S9(08)    VALUE ZERO.\n           05  WS-LOOP-CNT             PIC S999      VALUE ZERO.\n\n       01  WS-SUBSCRIPTS.\n           05  WS-SUB1                 PIC  9(05)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB3                 PIC S9(05)    VALUE ZERO.\n\n       01  WS-TABLES.\n           05  WS-STRING-TABLE         PIC  X(6900) VALUE SPACE.\n           05  WS-STRING-DATA REDEFINES WS-STRING-TABLE.\n               10  WS-STRING-VALUES    OCCURS 100 TIMES.\n                   15  WS-A            PIC  X(24).\n                   15  WS-XSI          PIC  X.\n                   15  WS-B            PIC  99.\n                   15  WS-C-M          PIC  X.\n                   15  WS-C            PIC  9(04).\n                   15  WS-D            PIC  99.\n                   15  WS-D-DASH       PIC  X.\n                   15  WS-E            PIC  999.\n                   15  WS-F            PIC  X.\n                   15  WS-F-N REDEFINES WS-F PIC 9.\n                   15  WS-DOT1         PIC  X.\n                   15  WS-G            PIC  X(05).\n                   15  WS-G-N REDEFINES WS-G PIC 9(05).\n                   15  WS-NBR1         PIC  9.\n                   15  WS-H            PIC  X.\n                   15  WS-H-N REDEFINES WS-H PIC 9.\n                   15  WS-DOT2         PIC  X.\n                   15  WS-I            PIC  X(05).\n                   15  WS-I-N REDEFINES WS-I PIC 9(05).\n                   15  WS-NBR2         PIC  9.\n                   15  WS-J            PIC  X(15).\n           05  WS-LINE-TABLE           PIC  X(13500) VALUE SPACE.\n           05  WS-LINE-DATA REDEFINES WS-LINE-TABLE.\n               10  WS-LINE-VALUES      OCCURS 300 TIMES.\n                   15  WS-LINE1        PIC  9(08).\n                   15  WS-LINE2        PIC  9(08).\n                   15  WS-SUB          PIC  9(05).\n                   15  WS-SEL1         PIC  9(04).\n                   15  WS-SEL2         PIC  9(04).\n                   15  WS-REL          PIC  X.\n                   15  WS-TITLE        PIC  X(15).\n\n       01  WS-SWITCHES.\n           05  WS-END-INFILE-SW        PIC  X        VALUE 'N'.\n               88  END-OF-INFILE                     VALUE 'Y'.\n               88  MORE-INFILE-RCDS                  VALUE 'N'.\n           05  WS-END-SORT-SW          PIC  X        VALUE 'N'.\n               88  END-OF-SORT                       VALUE 'Y'.\n               88  MORE-SORT-RCDS                    VALUE 'N'.\n           05  WS-END-PARM01-SW        PIC  X        VALUE 'N'.\n               88  END-OF-PARM01                     VALUE 'Y'.\n               88  MORE-PARM01-RCDS                  VALUE 'N'.\n           05  WS-FOUND-SW             PIC  X        VALUE SPACE.\n           05  WS-DUPL-MAX-SW          PIC  X        VALUE SPACE.\n           05  WS-DUPL-C-SW            PIC  X        VALUE SPACE.\n           05  WS-DUPL-E-SW            PIC  X        VALUE SPACE.\n           05  WS-EXCLUDE-SW           PIC  X        VALUE SPACE.\n           05  WS-OVERRIDE-I-SW        PIC  X        VALUE SPACE.\n           05  WS-CONDENSE-SW          PIC  X        VALUE SPACE.\n           05  WS-SORT-SW              PIC  X        VALUE 'N'.\n           05  WS-SKIP-RCD-SW          PIC  X        VALUE SPACE.\n\n       01  WS-PRINT-CONTROL            COMP.\n           05  WS-PRINT-SUM            PIC S99       VALUE +90.\n           05  WS-PRINT-MAX            PIC S99       VALUE +44.\n           05  WS-SPACE-CONTROL        PIC S99       VALUE 1.\n\n       01  WS-HOLD-VALUES.\n           05  WS-HLD-LINE1            PIC  9(08).\n           05  WS-HLD-LINE2            PIC  9(08).\n           05  WS-HLD-SUB              PIC  9(05).\n           05  WS-HLD-SEL1             PIC  9(04).\n           05  WS-HLD-SEL2             PIC  9(04).\n           05  WS-HLD-REL              PIC  X.\n           05  WS-HLD-TITLE            PIC  X(15).\n\n       01  WS-OUT-AREA.\n           05  WS-HOLD1                PIC  X(10000).\n           05  WS-HOLD2                PIC  X(10000).\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  PULLFILE END  '.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELD.\n           05  LS-LENGTH               PIC S9(04)    COMP.\n           05  LS-DATA                 PIC  X(10).\n           05  FILLER REDEFINES LS-DATA.\n               10  LS-INPUT-RCD-LENGTH PIC  X(04).\n               10  LS-NUMBERING-SW     PIC  X.\n               10  LS-SWITCH           PIC  X.\n               10  LS-PAGE-LEN         PIC  XX.\n               10  LS-TEST-SW          PIC  X.\n               10  LS-FILLER           PIC  X.\n\n      /\n       PROCEDURE DIVISION USING LS-FIELD.\n\n       0100-PROGRAM-ENTRY.\n\n           MOVE +0000                         TO WS-RETURN-CODE.\n           DISPLAY '                              '.\n           DISPLAY '**** PULLFILE pull strings and print files'.\n\n           PERFORM 0200-OPEN-INFILE.\n           PERFORM 0200-OPEN-FILES.\n\n           IF WS-RETURN-CODE = ZERO\n               SORT SORT-PARM\n                   ON ASCENDING KEY SR-LINE1\n                                    SR-LINE2\n                                    SR-SUB\n                   INPUT PROCEDURE IS 0400-SORT-IN\n                   OUTPUT PROCEDURE IS 1400-SORT-OUT.\n\n           IF LS-PAGE-LEN NUMERIC\n               DISPLAY '**** Page breaks set on  '\n               DISPLAY '**** Page length         ' WS-PRINT-MAX.\n           IF WS-DUPL-C-SW = 'Y'\n               DISPLAY '**** Single rcd duplicates suppressed'.\n           IF WS-DUPL-E-SW = 'Y'\n               DISPLAY '**** Multi-rcd duplicates suppressed'.\n           DISPLAY '**** Sort required       ' WS-SORT-SW.\n           DISPLAY '**** Records in INFILE   ' WS-IN-CNT.\n           DISPLAY '**** Records sorted      ' WS-SORT-RCD-CNT.\n           DISPLAY '**** Records written     ' WS-WRITE-RCD-CNT.\n           DISPLAY '**** Parm table max      ' WS-PARM01-MAX.\n           DISPLAY '**** Line table max      ' WS-MAX-LINE.\n           DISPLAY '**** PULLFILE EOJ encountered '.\n           DISPLAY '                              '.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-INFILE\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** PULLFILE cond code ' WS-RETURN-CODE\n                       ' set by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           STOP RUN.\n\n       0200-OPEN-INFILE.\n           OPEN INPUT  INFILE.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** PULLFILE open error on INFILE'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** PULLFILE open error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0201                     TO WS-RETURN-CODE.\n           OPEN OUTPUT OUTFILE.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** PULLFILE open error on OUTFILE'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0202                     TO WS-RETURN-CODE.\n           OPEN OUTPUT OUTPRNT.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** PULLFILE open error on OUTPRNT'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0203                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-INFILE.\n           CLOSE INFILE.\n\n       0300-CLOSE-FILES.\n           CLOSE OUTPRNT.\n           CLOSE OUTFILE.\n           CLOSE PARM01.\n\n       0400-SORT-IN.\n           PERFORM 0400-PROCESS-INFILE.\n\n       0400-PROCESS-INFILE.\n           IF LS-PAGE-LEN NUMERIC\n             IF LS-PAGE-LEN > ZERO\n                 MOVE LS-PAGE-LEN             TO WS-PRINT-MAX.\n           IF LS-INPUT-RCD-LENGTH NUMERIC\n               MOVE LS-INPUT-RCD-LENGTH TO WS-INPUT-RCD-LENGTH.\n           IF WS-INPUT-RCD-LENGTH < 30\n               DISPLAY '**** input record length < 30 '\n                        WS-INPUT-RCD-LENGTH\n               MOVE +0400                   TO WS-RETURN-CODE.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM VARYING WS-SUB1 FROM 1 BY 1\n                   UNTIL WS-SUB1 > 100\n                   MOVE SPACE                 TO WS-A(WS-SUB1)\n                   MOVE SPACE                 TO WS-XSI(WS-SUB1)\n                   MOVE ZERO                  TO WS-B(WS-SUB1)\n                   MOVE ZERO                  TO WS-C(WS-SUB1)\n                   MOVE ZERO                  TO WS-D(WS-SUB1)\n                   MOVE ZERO                  TO WS-E(WS-SUB1)\n                   MOVE ZERO                  TO WS-NBR1(WS-SUB1)\n                   MOVE ZERO                  TO WS-NBR2(WS-SUB1)\n                   MOVE SPACE                 TO WS-C-M(WS-SUB1)\n                   MOVE SPACE                 TO WS-D-DASH(WS-SUB1)\n                   MOVE SPACE                 TO WS-F(WS-SUB1)\n                   MOVE SPACE                 TO WS-G(WS-SUB1)\n                   MOVE SPACE                 TO WS-H(WS-SUB1)\n                   MOVE SPACE                 TO WS-I(WS-SUB1)\n                   MOVE SPACE                 TO WS-J(WS-SUB1)\n                   MOVE SPACE                 TO WS-DOT1(WS-SUB1)\n                   MOVE SPACE                 TO WS-DOT2(WS-SUB1)\n               END-PERFORM\n               PERFORM VARYING WS-SUB1 FROM 1 BY 1\n                   UNTIL WS-SUB1 > 300\n                   MOVE ZERO                  TO WS-SUB(WS-SUB1)\n                   MOVE ZERO                  TO WS-LINE1(WS-SUB1)\n                   MOVE ZERO                  TO WS-LINE2(WS-SUB1)\n                   MOVE ZERO                  TO WS-SEL1(WS-SUB1)\n                   MOVE ZERO                  TO WS-SEL2(WS-SUB1)\n                   MOVE SPACE                 TO WS-TITLE(WS-SUB1)\n                   MOVE SPACE                 TO WS-REL(WS-SUB1)\n               END-PERFORM\n               MOVE ZERO                      TO WS-SUB1\n               PERFORM 0500-LOAD-PARM01 THRU\n                       0500-LOAD-PARM01-EXIT.\n           IF WS-PARM01-MAX = ZERO\n               DISPLAY '**** No parm records accepted '\n               MOVE +0400                   TO WS-RETURN-CODE.\n\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                      TO WS-LINE\n               PERFORM 0600-READ-INFILE THRU\n                       0600-READ-INFILE-EXIT\n                       UNTIL END-OF-INFILE.\n\n      ****************************************\n      *    load the working storage table of strings\n      ****************************************\n       0500-LOAD-PARM01.\n           READ PARM01.\n           IF WS-STAT = 10\n               MOVE WS-SUB1                   TO WS-PARM01-MAX\n               GO TO 0500-LOAD-PARM01-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** PULLFILE read error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0500                     TO WS-RETURN-CODE\n               GO TO 0500-LOAD-PARM01-EXIT.\n\n           IF PARM01-DOCU = '**  '\n               GO TO 0500-LOAD-PARM01.\n           IF PARM01-DOCU(1: 1) = '*'\n               DISPLAY '**** NOTE:  Use -->**  <-- for comments'.\n           IF WS-SUB1 < 100\n               PERFORM 0550-VALIDATE-PARM THRU\n                       0550-VALIDATE-PARM-EXIT.\n           GO TO 0500-LOAD-PARM01.\n\n       0500-LOAD-PARM01-EXIT. EXIT.\n\n       0550-VALIDATE-PARM.\n           ADD 1                              TO WS-SUB1.\n      ****************************************\n      *    edit string\n      ****************************************\n           IF PARM01-A = SPACE\n             IF PARM01-XSI NOT = 'I'\n                 DISPLAY '**** Parm A ' WS-SUB1 '  all spaces '\n                 DISPLAY '**** Use #SPACE# to pull spaces'\n                 GO TO 0550-VALIDATE-ERROR.\n           IF PARM01-A(1: 5) = '#MAX#'\n               IF PARM01-E NUMERIC\n                   MOVE PARM01-E              TO WS-LINE-PRINT-MAX\n                   SUBTRACT 1 FROM WS-SUB1\n                   DISPLAY '**** Line print count limited to '\n                                                 WS-LINE-PRINT-MAX\n                   GO TO 0550-VALIDATE-PARM-EXIT\n               ELSE\n                   DISPLAY '**** Parm E ' WS-SUB1\n                           '  #MAX# requires numeric parm E '\n                   GO TO 0550-VALIDATE-ERROR.\n           MOVE PARM01-A                      TO WS-A(WS-SUB1).\n           IF WS-EXCLUDE-SW = 'X'\n             IF WS-XSI(WS-SUB1) = 'X'\n                 DISPLAY '**** Parm XSI ' WS-SUB1\n                         '  X must be 1st parm rcd'\n                 GO TO 0550-VALIDATE-ERROR.\n           IF PARM01-XSI = 'X'\n               MOVE PARM01-XSI                TO WS-XSI(WS-SUB1)\n           ELSE\n           IF PARM01-XSI = 'I'\n               MOVE 'X'                       TO WS-EXCLUDE-SW\n               MOVE PARM01-XSI                TO WS-XSI(WS-SUB1)\n               MOVE '01'                      TO PARM01-B\n               DISPLAY '**** Parm I ' WS-SUB1\n                       '  string length set to 01 '\n           ELSE\n           IF PARM01-XSI = SPACE\n               MOVE PARM01-XSI                TO WS-XSI(WS-SUB1)\n               MOVE 'X'                       TO WS-EXCLUDE-SW\n           ELSE\n           IF PARM01-XSI NUMERIC\n             IF PARM01-XSI < '2'\n                 DISPLAY '**** Parm XSI ' WS-SUB1\n                         '  numeric and < 2 '\n                 GO TO 0550-VALIDATE-ERROR\n             ELSE\n                 MOVE PARM01-XSI              TO WS-XSI(WS-SUB1)\n                 MOVE 'X'                     TO WS-EXCLUDE-SW\n           ELSE\n           IF PARM01-XSI = 'S'\n             IF WS-EXCLUDE-SW = 'X'\n                 MOVE PARM01-XSI              TO WS-XSI(WS-SUB1)\n             ELSE\n                 DISPLAY '**** Parm XSI ' WS-SUB1\n                         '  S requires prev SPACE/I/# '\n                 GO TO 0550-VALIDATE-ERROR\n           ELSE\n               DISPLAY '**** Parm XSI ' WS-SUB1\n                       '  valid values SPACE/X/S/I/2-9 '\n               GO TO 0550-VALIDATE-ERROR.\n\n      ****************************************\n      *    edit string length\n      *+**************************************\n           IF PARM01-B = 'CC'\n               PERFORM VARYING WS-SUB2 FROM 24 BY -1\n                   UNTIL WS-SUB2 < 1\n                   IF WS-A(WS-SUB1)(WS-SUB2: 1) NOT = SPACE\n                       MOVE WS-SUB2           TO WS-B(WS-SUB1)\n                       MOVE ZERO              TO WS-SUB2\n                   END-IF\n               END-PERFORM\n           ELSE\n           IF PARM01-B NUMERIC\n               MOVE PARM01-B                  TO WS-B(WS-SUB1)\n           ELSE\n               DISPLAY '**** Parm B ' WS-SUB1 '  not numeric  '\n               GO TO 0550-VALIDATE-ERROR.\n           IF (WS-B(WS-SUB1) > 24)\n               OR (WS-B(WS-SUB1) < 1)\n               DISPLAY '**** Parm B ' WS-SUB1\n                       '  valid values 01-24,CC '\n               GO TO 0550-VALIDATE-ERROR.\n\n      ****************************************\n      *    edit find position\n      *+**************************************\n           IF PARM01-C(1: 1) = 'M'\n               MOVE 'M'                       TO WS-C-M(WS-SUB1)\n               IF PARM01-C(2: 3) NOT NUMERIC\n                   DISPLAY '**** Parm C ' WS-SUB1 '  not numeric  '\n                   GO TO 0550-VALIDATE-ERROR\n               ELSE\n                   MOVE PARM01-C(2: 3)        TO WS-C(WS-SUB1)\n                   IF WS-C(WS-SUB1) < 001\n                       DISPLAY '**** Parm C ' WS-SUB1 '  < 1 '\n                       GO TO 0550-VALIDATE-ERROR\n                   ELSE\n                       CONTINUE\n           ELSE\n           IF PARM01-C NOT NUMERIC\n               DISPLAY '**** Parm C ' WS-SUB1 '  not numeric  '\n               GO TO 0550-VALIDATE-ERROR\n           ELSE\n               MOVE PARM01-C                  TO WS-C(WS-SUB1)\n               COMPUTE WS-MAX-POS = (WS-INPUT-RCD-LENGTH -\n                                      WS-B(WS-SUB1))\n               IF (WS-C(WS-SUB1) > WS-MAX-POS)\n                   DISPLAY '**** Parm C ' WS-SUB1 '  excessive '\n                   GO TO 0550-VALIDATE-ERROR.\n\n      ****************************************\n      *    edit record inclusion pointer and counter\n      *+**************************************\n           IF PARM01-DASH = SPACE OR '-'\n               MOVE PARM01-DASH               TO WS-D-DASH(WS-SUB1)\n           ELSE\n               DISPLAY '**** Parm - ' WS-SUB1 '  dash or space '\n               GO TO 0550-VALIDATE-ERROR.\n           IF PARM01-D NOT NUMERIC\n               DISPLAY '**** Parm D ' WS-SUB1 '  not numeric '\n               GO TO 0550-VALIDATE-ERROR.\n           MOVE PARM01-D                      TO WS-D(WS-SUB1).\n           IF PARM01-E NOT NUMERIC\n               DISPLAY '**** Parm E ' WS-SUB1 '  not numeric '\n               GO TO 0550-VALIDATE-ERROR.\n           MOVE PARM01-E                      TO WS-E(WS-SUB1).\n\n      ****************************************\n      *    edit marker for beginning and ending pull values\n      *+**************************************\n           IF PARM01-F = ' ' OR 'P' OR '+' OR '-'\n                          OR '1' OR '2' OR '3' OR '4' OR '5'\n               MOVE PARM01-F                  TO WS-F(WS-SUB1)\n           ELSE\n               DISPLAY '**** Parm F ' WS-SUB1 '  not a valid value '\n               GO TO 0550-VALIDATE-ERROR.\n           IF PARM01-H = ' ' OR 'P' OR '+' OR '-'\n                          OR '1' OR '2' OR '3' OR '4' OR '5'\n               MOVE PARM01-H                  TO WS-H(WS-SUB1)\n           ELSE\n               DISPLAY '**** Parm H ' WS-SUB1 '  not a valid value '\n               GO TO 0550-VALIDATE-ERROR.\n\n           IF PARM01-F = SPACE\n               MOVE '00000'                   TO WS-G(WS-SUB1)\n           ELSE\n               MOVE PARM01-G                  TO WS-G(WS-SUB1).\n           IF PARM01-H = SPACE\n               MOVE '00000'                   TO WS-I(WS-SUB1)\n           ELSE\n               MOVE PARM01-I                  TO WS-I(WS-SUB1).\n\n      ****************************************\n      *    edit for obvious numeric value errors\n      *+**************************************\n           IF PARM01-F = '+' OR '-' OR 'P'\n             IF PARM01-G NOT NUMERIC\n                 DISPLAY '**** Parm G ' WS-SUB1 '  not numeric '\n                 GO TO 0550-VALIDATE-ERROR.\n           IF PARM01-H = '+' OR '-' OR 'P'\n             IF PARM01-I NOT NUMERIC\n                 DISPLAY '**** Parm I ' WS-SUB1 '  not numeric '\n                 GO TO 0550-VALIDATE-ERROR.\n\n           IF PARM01-F = 'P'\n             IF WS-G-N(WS-SUB1) > WS-INPUT-RCD-LENGTH\n                 DISPLAY '**** Parm G ' WS-SUB1 '  excessive '\n                 GO TO 0550-VALIDATE-ERROR.\n           IF PARM01-H = 'P'\n             IF WS-I-N(WS-SUB1) > WS-INPUT-RCD-LENGTH\n                 DISPLAY '**** Parm I ' WS-SUB1 '  excessive '\n                 GO TO 0550-VALIDATE-ERROR.\n           IF PARM01-F = 'P'\n               AND PARM01-H = 'P'\n               IF WS-G-N(WS-SUB1) > WS-I-N(WS-SUB1)\n                   DISPLAY '**** Parm G ' WS-SUB1 '  > I '\n                   GO TO 0550-VALIDATE-ERROR.\n           IF PARM01-F = '+' OR '-'\n             IF WS-G-N(WS-SUB1) > WS-INPUT-RCD-LENGTH\n                 DISPLAY '**** Parm G ' WS-SUB1\n                         '  > record length '\n                 GO TO 0550-VALIDATE-ERROR.\n           IF PARM01-H = '+' OR '-'\n             IF WS-I-N(WS-SUB1) > WS-INPUT-RCD-LENGTH\n                 DISPLAY '**** Parm I ' WS-SUB1 '  > record length '\n                 GO TO 0550-VALIDATE-ERROR.\n\n           MOVE PARM01-DOT1                   TO WS-DOT1(WS-SUB1).\n           MOVE PARM01-DOT2                   TO WS-DOT2(WS-SUB1).\n           IF PARM01-DOT1 = 'E'\n             IF PARM01-F = '1' OR '2' OR '3' OR '4' OR '5'\n                 CONTINUE\n             ELSE\n                 DISPLAY '**** Parm . ' WS-SUB1\n                         '  E requires 1/2/3/4/5 '\n                 GO TO 0550-VALIDATE-ERROR\n           ELSE\n           IF PARM01-DOT1 = 'F' OR 'H'\n             IF PARM01-F = '+' OR '-'\n                 CONTINUE\n             ELSE\n                 DISPLAY '**** Parm . ' WS-SUB1 '  F/H requires +/- '\n                 GO TO 0550-VALIDATE-ERROR\n           ELSE\n           IF PARM01-DOT1 = SPACE\n               CONTINUE\n           ELSE\n               DISPLAY '**** Parm . ' WS-SUB1 '  not a valid value '\n               GO TO 0550-VALIDATE-ERROR.\n\n           IF PARM01-DOT2 = 'E'\n             IF PARM01-H = '1' or '2' or '3' or '4' or '5'\n                 CONTINUE\n             ELSE\n                 DISPLAY '**** Parm . ' WS-SUB1\n                         '  E requires 1/2/3/4/5 '\n                 GO TO 0550-VALIDATE-ERROR\n           ELSE\n           IF PARM01-DOT2 = 'F' OR 'H'\n             IF PARM01-H = '+' OR '-'\n                 CONTINUE\n             ELSE\n                 DISPLAY '**** Parm . ' WS-SUB1\n                         '  F/H requires +/- '\n                 GO TO 0550-VALIDATE-ERROR\n           ELSE\n           IF PARM01-DOT2 = SPACE\n               CONTINUE\n           ELSE\n               DISPLAY '**** Parm . ' WS-SUB1\n                       '  not a valid value '\n               GO TO 0550-VALIDATE-ERROR.\n\n           IF PARM01-NBR1 = SPACE\n               MOVE 1                         TO WS-NBR1(WS-SUB1)\n           ELSE\n           IF PARM01-NBR1 NOT NUMERIC\n               DISPLAY '**** Parm # ' WS-SUB1\n                       '  not numeric  '\n               GO TO 0550-VALIDATE-ERROR\n           ELSE\n               MOVE PARM01-NBR1               TO WS-NBR1(WS-SUB1).\n           IF PARM01-NBR2 = SPACE\n               MOVE 1                         TO WS-NBR2(WS-SUB1)\n           ELSE\n           IF PARM01-NBR2 NOT NUMERIC\n               DISPLAY '**** Parm # ' WS-SUB1 '  not numeric '\n               GO TO 0550-VALIDATE-ERROR\n           ELSE\n               MOVE PARM01-NBR2               TO WS-NBR2(WS-SUB1).\n           IF WS-NBR1(WS-SUB1) = ZERO\n               MOVE 1                         TO WS-NBR1(WS-SUB1).\n           IF WS-NBR2(WS-SUB1) = ZERO\n               MOVE 1                         TO WS-NBR2(WS-SUB1).\n\n           MOVE PARM01-J                      TO WS-TTL.\n           IF WS-TTL-1 = 'I'\n               AND WS-TTL-2X3 NUMERIC\n               AND WS-TTL-4 = SPACE\n               MOVE WS-TTL-2X3                TO WS-WORK2\n               COMPUTE WS-WORK3 = WS-INPUT-RCD-LENGTH - WS-WORK2\n               IF LS-NUMBERING-SW = 'Y'\n                 IF WS-WORK3 < 12\n                     DISPLAY '**** Parm J ' WS-SUB1 '  is too long '\n                     GO TO 0550-VALIDATE-ERROR\n                 ELSE\n                 IF WS-TTL-5 = 'L' OR 'U'\n                     AND WS-TTL-6X9 NUMERIC\n                     AND WS-TTL-10X13 NUMERIC\n                     MOVE PARM01-J(5: )       TO WS-TTL\n                 ELSE\n                     CONTINUE\n               ELSE\n               IF WS-WORK3 < 2\n                   DISPLAY '**** Parm J ' WS-SUB1 '  > record length  '\n                   GO TO 0550-VALIDATE-ERROR\n               ELSE\n               IF WS-TTL-5 = 'L' OR 'U'\n                   AND WS-TTL-6X9 NUMERIC\n                   AND WS-TTL-10X13 NUMERIC\n                   MOVE PARM01-J(5: )         TO WS-TTL.\n\n           IF WS-TTL-1 = 'L'\n               AND WS-TTL-2X5 NUMERIC\n               AND WS-TTL-6X9 NUMERIC\n               MOVE WS-TTL-2X5                TO WS-WORK1\n               MOVE WS-TTL-6X9                TO WS-WORK3\n               IF WS-WORK1 > ZERO\n                   AND WS-WORK1 > WS-INPUT-RCD-LENGTH\n                   DISPLAY '**** Parm J ' WS-SUB1 '  L #1 > rec len '\n                   GO TO 0550-VALIDATE-ERROR\n               ELSE\n               IF WS-WORK3 > ZERO\n                   AND WS-WORK3 > WS-INPUT-RCD-LENGTH\n                   DISPLAY '**** Parm J ' WS-SUB1 '  L #2 > rec len '\n                   GO TO 0550-VALIDATE-ERROR\n               ELSE\n               IF WS-WORK3 > ZERO\n                 IF WS-WORK1 > WS-WORK3\n                   DISPLAY '**** Parm J ' WS-SUB1 '  L #1 > #2 '\n                   GO TO 0550-VALIDATE-ERROR.\n\n           IF WS-TTL-1 = 'U'\n               AND WS-TTL-2X5 NUMERIC\n               AND WS-TTL-6X9 NUMERIC\n               MOVE WS-TTL-2X5                TO WS-WORK1\n               MOVE WS-TTL-6X9                TO WS-WORK3\n               IF WS-WORK1 > ZERO\n                   AND WS-WORK1 > WS-INPUT-RCD-LENGTH\n                   DISPLAY '**** Parm J ' WS-SUB1 '  U #1 > rec len '\n                   GO TO 0550-VALIDATE-ERROR\n               ELSE\n               IF WS-WORK3 > ZERO\n                   AND WS-WORK3 > WS-INPUT-RCD-LENGTH\n                   DISPLAY '**** Parm J ' WS-SUB1 '  U #2 > rec len '\n                   GO TO 0550-VALIDATE-ERROR\n               ELSE\n               IF WS-WORK3 > ZERO\n                 IF WS-WORK1 > WS-WORK3\n                     DISPLAY '**** Parm J ' WS-SUB1 '  U #1 > #2 '\n                     GO TO 0550-VALIDATE-ERROR.\n\n           MOVE PARM01-J                      TO WS-J(WS-SUB1).\n\n           IF WS-D-DASH(WS-SUB1) = '-'\n             IF WS-D(WS-SUB1) > ZERO\n                 MOVE 'Y'                     TO WS-SORT-SW.\n\n           IF LS-TEST-SW = '1' OR '9'\n               DISPLAY '**PARM ' WS-STRING-VALUES(WS-SUB1).\n\n           GO TO 0550-VALIDATE-PARM-EXIT.\n\n       0550-VALIDATE-ERROR.\n           MOVE +0550                         TO WS-RETURN-CODE.\n           INITIALIZE WS-STRING-VALUES(WS-SUB1).\n           SUBTRACT 1 FROM WS-SUB1.\n\n       0550-VALIDATE-PARM-EXIT. EXIT.\n\n       0600-READ-INFILE.\n           READ INFILE.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-IN-CNT\n               PERFORM 0700-SELECT THRU\n                       0700-SELECT-EXIT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-INFILE-SW\n           ELSE\n               DISPLAY '**** PULLFILE read error on INFILE '\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0600                     TO WS-RETURN-CODE.\n           IF LS-TEST-SW = '3' OR '9'\n             IF MORE-INFILE-RCDS\n                 DISPLAY '**INFILE rcd ' INFILE-RECORD.\n\n       0600-READ-INFILE-EXIT. EXIT.\n\n      ****************************************\n      *    after data found, and ws-line table values set,\n      *    write out selected records that match line table.\n      *    - or -\n      *    if possibility exists that line table includes\n      *    a record that has already been read, release line\n      *    table values to sort for later processing.\n      ****************************************\n       0700-SELECT.\n           MOVE 'N'                           TO WS-CONDENSE-SW.\n           PERFORM 2300-CONDENSE-LINE-TABLE\n               UNTIL WS-CONDENSE-SW = 'Y'.\n           PERFORM 0900-CHECK-DATA\n               VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > WS-PARM01-MAX.\n           IF WS-LINE > ZERO\n             IF WS-SORT-SW = 'N'\n                 PERFORM 0800-TEST-OUTPUT\n                     VARYING WS-SUB3 FROM 1 BY 1\n                     UNTIL WS-SUB3 > WS-LINE\n             ELSE\n                 PERFORM 0800-RELEASE-SORT\n                     VARYING WS-SUB3 FROM 1 BY 1\n                     UNTIL WS-SUB3 > WS-LINE.\n           IF WS-LINE > ZERO\n             IF LS-TEST-SW = '0' OR '9'\n                 DISPLAY '**WS-LINE ' WS-LINE\n                 DISPLAY '**WS-MAX-LINE ' WS-MAX-LINE.\n\n       0700-SELECT-EXIT. EXIT.\n\n       0800-TEST-OUTPUT.\n           IF WS-IN-CNT < WS-LINE1(WS-SUB3)\n               OR WS-IN-CNT > WS-LINE2(WS-SUB3)\n               CONTINUE\n           ELSE\n               PERFORM 1900-POST-SORT THRU\n                       1900-CHECK-RCD-NBR-EXIT\n               IF LS-TEST-SW = '1' OR '9'\n                   DISPLAY '**LINE TABLE ' WS-LINE-VALUES(WS-SUB3).\n\n       0800-RELEASE-SORT.\n           IF WS-LINE1(WS-SUB3) > ZERO\n             IF WS-REL(WS-SUB3) = SPACE OR 'S'\n                 MOVE WS-LINE1(WS-SUB3)       TO SR-LINE1\n                 MOVE WS-LINE2(WS-SUB3)       TO SR-LINE2\n                 MOVE WS-SUB(WS-SUB3)         TO SR-SUB\n                 MOVE WS-SEL1(WS-SUB3)        TO SR-SEL1\n                 MOVE WS-SEL2(WS-SUB3)        TO SR-SEL2\n                 MOVE WS-TITLE(WS-SUB3)       TO SR-TITLE\n                 MOVE 'Y'                     TO WS-REL(WS-SUB3)\n                 RELEASE SORT-RECORD\n                 IF LS-TEST-SW = '2' OR '9'\n                     DISPLAY '**RELEASED ' SORT-RECORD.\n\n      ****************************************\n      *    loop through record searching for a string at\n      *    a particular position or anywhere in the record.\n      *+**************************************\n       0900-CHECK-DATA.\n           MOVE WS-A(WS-SUB1)                 TO WS-A2.\n           MOVE WS-XSI(WS-SUB1)               TO WS-XSI2.\n           MOVE WS-B(WS-SUB1)                 TO WS-B2.\n           MOVE WS-C-M(WS-SUB1)               TO WS-C2-M.\n           MOVE WS-C(WS-SUB1)                 TO WS-C2.\n           MOVE WS-D(WS-SUB1)                 TO WS-D2.\n           MOVE WS-D-DASH(WS-SUB1)            TO WS-D2-DASH.\n           MOVE WS-E(WS-SUB1)                 TO WS-E2.\n           MOVE WS-F(WS-SUB1)                 TO WS-F2.\n           MOVE WS-G(WS-SUB1)                 TO WS-G2.\n           MOVE WS-H(WS-SUB1)                 TO WS-H2.\n           MOVE WS-I(WS-SUB1)                 TO WS-I2.\n           MOVE WS-J(WS-SUB1)                 TO WS-J2.\n           MOVE WS-DOT1(WS-SUB1)              TO WS-DT1.\n           MOVE WS-DOT2(WS-SUB1)              TO WS-DT2.\n           MOVE WS-NBR1(WS-SUB1)              TO WS-NB1.\n           MOVE WS-NBR2(WS-SUB1)              TO WS-NB2.\n           COMPUTE WS-MAX-POS = WS-INPUT-RCD-LENGTH - WS-B2 + 1.\n           IF WS-XSI2 NUMERIC\n               MOVE WS-XSI2                   TO WS-XSI-MAX\n           ELSE\n           IF WS-E2 > ZERO\n               MOVE 1                         TO WS-XSI-MAX\n           ELSE\n               MOVE ZERO                      TO WS-XSI-MAX.\n           IF LS-TEST-SW = '0' OR '9'\n               DISPLAY '**WS-XSI-MAX ' WS-XSI-MAX.\n           MOVE ZERO                          TO WS-DUPL-CNT.\n      ****************************************\n      *    'I' means include all records\n      *        'S' can turn off 'I' using ws-override-i-sw\n      *    'X' means exclude records when string found\n      *    'S' means stop prev inclusive pull at this found line\n      *     #  means allow number of duplicate pulls for that parm\n      ****************************************\n           IF WS-XSI2 = 'I'\n             IF WS-OVERRIDE-I-SW = 'Y'\n                 CONTINUE\n             ELSE\n             IF WS-C2-M = SPACE\n                 AND WS-C2 > ZERO\n                 MOVE WS-C2                   TO WS-X\n                 PERFORM 1100-MATCH-MADE THRU\n                         1100-MATCH-MADE-EXIT\n             ELSE\n                 MOVE 1                       TO WS-X\n                 PERFORM 1100-MATCH-MADE THRU\n                         1100-MATCH-MADE-EXIT\n           ELSE\n           IF WS-C2-M = SPACE\n               AND WS-C2 > ZERO\n               MOVE WS-C2                     TO WS-SUB2\n               PERFORM 1000-LOOP-THRU-RCD\n           ELSE\n               PERFORM 1000-LOOP-THRU-RCD\n                   VARYING WS-SUB2 FROM 1 BY 1\n                   UNTIL WS-SUB2 > WS-MAX-POS.\n\n      *\n      *                 \\\\|//\n      *                 (. .)\n      *-------------oOOo-(_)-oOOo-------------\n\n       1000-LOOP-THRU-RCD.\n           IF WS-A2 = '#NBR#'\n             IF INFILE-RCD(WS-SUB2: WS-B2) NUMERIC\n               IF WS-XSI2 = 'X'\n                   MOVE WS-PARM01-MAX         TO WS-SUB1\n               ELSE\n                   MOVE WS-SUB2               TO WS-X\n                   PERFORM 1100-MATCH-MADE THRU\n                           1100-MATCH-MADE-EXIT\n             ELSE\n                 CONTINUE\n           ELSE\n           IF WS-A2 = '#SPACE#'\n             IF INFILE-RCD(WS-SUB2: WS-B2) = SPACE\n               IF WS-XSI2 = 'X'\n                   MOVE WS-PARM01-MAX         TO WS-SUB1\n               ELSE\n                   MOVE WS-SUB2               TO WS-X\n                   PERFORM 1100-MATCH-MADE THRU\n                           1100-MATCH-MADE-EXIT\n             ELSE\n                 CONTINUE\n           ELSE\n           IF INFILE-RCD(WS-SUB2: WS-B2) = WS-A2(1: WS-B2)\n             IF WS-XSI2 = 'X'\n                 MOVE WS-PARM01-MAX           TO WS-SUB1\n             ELSE\n                 MOVE WS-SUB2                 TO WS-X\n                 PERFORM 1100-MATCH-MADE THRU\n                         1100-MATCH-MADE-EXIT.\n\n      ****************************************\n      *    now that string is found, search for the beginning\n      *    and ending values which will be used to pull the\n      *    output data.\n      *+**************************************\n       1100-MATCH-MADE.\n           IF WS-C2-M = 'M'\n               ADD 1                          TO WS-DUPL-CNT\n               IF WS-DUPL-CNT > WS-C2\n                   MOVE WS-MAX-POS            TO WS-SUB2\n                   MOVE 'Y'                   TO WS-DUPL-C-SW\n                   GO TO 1100-MATCH-MADE-EXIT.\n\n           MOVE WS-LINE                       TO WS-WORK2.\n           MOVE ZERO                          TO WS-LINE WS-XSI-CNT.\n           MOVE SPACE                         TO WS-FOUND-SW.\n           MOVE SPACE                         TO WS-DUPL-MAX-SW.\n           MOVE WS-X                          TO WS-Y WS-Z.\n           PERFORM 1300-FIND-AVAIL-OUT-PLACE\n               VARYING WS-SUB3 FROM 1 BY 1\n               UNTIL WS-FOUND-SW = 'Y'\n               OR WS-DUPL-MAX-SW = 'Y'.\n           IF WS-LINE > 300\n               DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '\n                        WS-IN-CNT ' : line table full'\n               GO TO 1100-MATCH-ERROR.\n           IF WS-DUPL-MAX-SW = 'Y'\n               MOVE 'Y'                       TO WS-DUPL-E-SW\n               GO TO 1100-MATCH-MADE-EXIT.\n           IF WS-LINE < 1\n               DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '\n                        WS-IN-CNT ' : line load error '\n               GO TO 1100-MATCH-ERROR.\n           IF WS-F2 = 'P'\n               MOVE WS-G2-N                   TO WS-SEL1(WS-LINE)\n           ELSE\n           IF WS-F2 = ' '\n               MOVE ZERO                      TO WS-SEL1(WS-LINE).\n           IF WS-H2 = 'P'\n               MOVE WS-I2-N                   TO WS-SEL2(WS-LINE)\n           ELSE\n           IF WS-H2 = ' '\n               MOVE ZERO                      TO WS-SEL2(WS-LINE).\n      ****************************************\n      *    if using a delimiter to determine the beginning\n      *    or ending pull value, search through the record:\n      *    if delimiter found, save position and continue, else exit.\n      *+**************************************\n           IF (WS-F2 = '1' OR '2' OR '3' OR '4' OR '5')\n               AND WS-DT1 = 'H'\n               PERFORM 1150-DELIMIT-H\n               PERFORM 1150-DELIMIT-F\n           ELSE\n               PERFORM 1150-DELIMIT-F\n               PERFORM 1150-DELIMIT-H.\n\n           IF WS-FOUND-SW = 'E'\n               GO TO 1100-MATCH-ERROR.\n\n           IF WS-F2 = '+' OR '-'\n             IF WS-DT1 = 'H'\n                 MOVE WS-Z                    TO WS-X.\n           IF WS-F2 = '-'\n               COMPUTE WS-WORK1 = WS-X - WS-G2-N\n               IF WS-WORK1 < 1\n                   DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '\n                            WS-IN-CNT ' : PARM G < 1'\n                   GO TO 1100-MATCH-ERROR\n               ELSE\n                   MOVE WS-WORK1              TO WS-SEL1(WS-LINE)\n                                                 WS-Y.\n           IF WS-F2 = '+'\n               COMPUTE WS-WORK1 = WS-X + WS-G2-N\n               IF WS-WORK1 > WS-INPUT-RCD-LENGTH\n                   DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '\n                            WS-IN-CNT ' : PARM G > rcd len'\n                   GO TO 1100-MATCH-ERROR\n               ELSE\n                   MOVE WS-WORK1              TO WS-SEL1(WS-LINE)\n                                                 WS-Y.\n           IF WS-H2 = '+' OR '-'\n             IF WS-DT2 = 'F'\n                 MOVE WS-Y                    TO WS-X.\n           IF WS-H2 = '-'\n               COMPUTE WS-WORK1 = WS-X - WS-I2-N\n               IF WS-WORK1 < 1\n                   DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '\n                            WS-IN-CNT ' : PARM I < 1'\n                   GO TO 1100-MATCH-ERROR\n               ELSE\n                   MOVE WS-WORK1              TO WS-SEL2(WS-LINE).\n           IF WS-H2 = '+'\n               COMPUTE WS-WORK1 = WS-X + WS-I2-N\n               IF WS-WORK1 > WS-INPUT-RCD-LENGTH\n                   DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '\n                            WS-IN-CNT ' : PARM I > rcd len'\n                   GO TO 1100-MATCH-ERROR\n               ELSE\n                   MOVE WS-WORK1              TO WS-SEL2(WS-LINE).\n      ****************************************\n      *    beginning/ending pull positions have been determined.\n      *    validate values again and determine output record\n      *    number for pulling.\n      *+**************************************\n           IF WS-SEL2(WS-LINE) > ZERO\n             IF WS-SEL1(WS-LINE) > WS-SEL2(WS-LINE)\n               IF LS-SWITCH = 'Y'\n                   DISPLAY '**** Switching ' WS-SUB1 ' for rcd '\n                            WS-IN-CNT ' : PARM G > I'\n                   MOVE WS-SEL1(WS-LINE)      TO WS-WORK2\n                   MOVE WS-SEL2(WS-LINE)      TO WS-SEL1(WS-LINE)\n                   MOVE WS-WORK2              TO WS-SEL2(WS-LINE)\n               ELSE\n                   DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '\n                            WS-IN-CNT ' : PARM G > I'\n                   GO TO 1100-MATCH-ERROR.\n\n           IF WS-J2 NOT = SPACE\n               MOVE WS-J2                     TO WS-TITLE(WS-LINE)\n           ELSE\n               MOVE SPACE                     TO WS-TITLE(WS-LINE).\n           MOVE SPACE                         TO WS-REL(WS-LINE).\n      ****************************************\n      *    D2 = ZERO  :  select current line\n      *    D2 > ZERO  :  exclude current or more lines\n      *    D2 -       :  include D2 lines before curr line\n      *    E2 > 001   :  include E2 lines after D2 line\n      *    E2 = 999   :  include all lines after D2 line\n      *    XSI = 'S'  :  mark previous line to stop pulling as\n      *                    of this line\n      *                    D2 = ZERO: exclude current line\n      *                    D2 > ZERO: include current or more lines\n      *                    D2 -     : exclude dd lines before curr line\n      *+**************************************\n           IF WS-XSI2 = 'S'\n               GO TO 1100-STOP-PREV-LINE.\n           IF WS-D2-DASH = '-'\n               COMPUTE WS-WORK1 = WS-IN-CNT - WS-D2\n               IF WS-WORK1 > ZERO\n                   MOVE WS-WORK1              TO WS-LINE1(WS-LINE)\n               ELSE\n                   DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '\n                            WS-IN-CNT ' : PARM - caused line 1 < 1 '\n                   GO TO 1100-MATCH-ERROR\n           ELSE\n           IF WS-D2 > ZERO\n               COMPUTE WS-LINE1(WS-LINE) = WS-IN-CNT + WS-D2\n           ELSE\n               MOVE WS-IN-CNT                 TO WS-LINE1(WS-LINE).\n           IF WS-E2 = ZERO\n               MOVE WS-LINE1(WS-LINE)         TO WS-LINE2(WS-LINE)\n           ELSE\n           IF WS-E2 = 999\n               MOVE 99999990                  TO WS-LINE2(WS-LINE)\n           ELSE\n               COMPUTE WS-LINE2(WS-LINE) =\n                       WS-LINE1(WS-LINE) + WS-E2.\n           GO TO 1100-MATCH-MADE-EXIT.\n\n       1100-STOP-PREV-LINE.\n           IF WS-LINE > 1\n               COMPUTE WS-WORK3 = WS-LINE - 1\n               PERFORM 1200-SET-STOP\n                   VARYING WS-SUB3 FROM WS-WORK3 BY -1\n                   UNTIL WS-SUB3 < 1.\n           IF WS-SUB1 > 1\n             IF WS-XSI(WS-SUB1 - 1) = 'I'\n               IF WS-OVERRIDE-I-SW = SPACE\n                   MOVE 'Y'                   TO WS-OVERRIDE-I-SW\n                   DISPLAY '**** Parm I ' WS-SUB1 ' for rcd '\n                           WS-IN-CNT ' : overridden by parm S '.\n\n       1100-MATCH-ERROR.\n           MOVE ZERO                          TO WS-LINE1(WS-LINE).\n           MOVE ZERO                          TO WS-LINE2(WS-LINE).\n           MOVE ZERO                          TO WS-SUB(WS-LINE).\n           MOVE ZERO                          TO WS-SEL1(WS-LINE).\n           MOVE ZERO                          TO WS-SEL2(WS-LINE).\n           MOVE SPACE                         TO WS-TITLE(WS-LINE).\n           MOVE SPACE                         TO WS-REL(WS-LINE).\n\n       1100-MATCH-MADE-EXIT. EXIT.\n\n       1200-SET-STOP.\n           IF WS-SUB(WS-SUB3) = WS-SUB1 - 1\n             IF WS-D2-DASH = '-'\n                 COMPUTE WS-WORK1 = WS-IN-CNT - WS-D2\n                 IF WS-LINE1(WS-SUB3) > WS-WORK1\n                     DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '\n                              WS-IN-CNT ' : parm - caused line 1'\n                              ' > line 2'\n                     MOVE ZERO                TO WS-SUB3\n                 ELSE\n                     MOVE WS-WORK1            TO WS-LINE2(WS-SUB3)\n                     MOVE 'S'                 TO WS-REL(WS-SUB3)\n                     MOVE ZERO                TO WS-SUB3\n             ELSE\n                 COMPUTE WS-LINE2(WS-SUB3) = WS-IN-CNT + WS-D2\n                 MOVE 'S'                     TO WS-REL(WS-SUB3)\n                 MOVE ZERO                    TO WS-SUB3.\n\n       1150-DELIMIT-F.\n           MOVE SPACE                         TO WS-FOUND-SW.\n           IF WS-F2 = '1' OR '2' OR '3' OR '4' OR '5'\n               MOVE 1                         TO WS-LOOP-CNT\n               PERFORM 1200-LOOP-FOR-DELIMIT-F\n                   VARYING WS-SUB3 FROM 1 BY 1\n                   UNTIL WS-SUB3 > (WS-INPUT-RCD-LENGTH - 3)\n               IF WS-FOUND-SW = SPACE\n                   DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '\n                            WS-IN-CNT ' : delimit F (' WS-G2\n                            ') not found'\n                   MOVE 'E'                   TO WS-FOUND-SW\n               ELSE\n                   MOVE WS-SEL1(WS-LINE)      TO WS-Y.\n\n       1150-DELIMIT-H.\n           MOVE SPACE                         TO WS-FOUND-SW.\n           IF WS-H2 = '1' OR '2' OR '3' OR '4' OR '5'\n               MOVE 1                         TO WS-LOOP-CNT\n               PERFORM 1200-LOOP-FOR-DELIMIT-H\n                   VARYING WS-SUB3 FROM 1 BY 1\n                   UNTIL WS-SUB3 > (WS-INPUT-RCD-LENGTH - 3)\n               IF WS-FOUND-SW = SPACE\n                   DISPLAY '**** Skipping ' WS-SUB1 ' for rcd '\n                            WS-IN-CNT ' : delimit H (' WS-I2\n                            ') not found'\n                   MOVE 'E'                   TO WS-FOUND-SW\n               ELSE\n                   MOVE WS-SEL2(WS-LINE)      TO WS-Z.\n\n      ****************************************\n      *    find delimiter.  include or exclude after found.\n      *    since this is the beginning delimiter, if exclude:\n      *    add length of delimiter to find position.\n      *+**************************************\n       1200-LOOP-FOR-DELIMIT-F.\n           IF INFILE-RCD(WS-SUB3: WS-F2-N) = WS-G2(1: WS-F2-N)\n             IF WS-LOOP-CNT = WS-NB1\n                 MOVE 'Y'                     TO WS-FOUND-SW\n                 MOVE WS-SUB3                 TO WS-SEL1(WS-LINE)\n                 MOVE WS-INPUT-RCD-LENGTH     TO WS-SUB3\n                 IF WS-DT1 = 'E'\n                     ADD WS-F2-N              TO WS-SEL1(WS-LINE)\n                 ELSE\n                     CONTINUE\n             ELSE\n                 ADD 1                        TO WS-LOOP-CNT.\n\n      ****************************************\n      *    find delimiter.  include or exclude after found.\n      *    since this is the ending delimiter, if include:\n      *    add length of delimiter then subtract 1.  if exclude:\n      *    subtract 1 from find position.\n      *+**************************************\n       1200-LOOP-FOR-DELIMIT-H.\n           IF INFILE-RCD(WS-SUB3: WS-H2-N) = WS-I2(1: WS-H2-N)\n             IF WS-LOOP-CNT = WS-NB2\n                 MOVE 'Y'                     TO WS-FOUND-SW\n                 MOVE WS-SUB3                 TO WS-SEL2(WS-LINE)\n                 MOVE WS-INPUT-RCD-LENGTH     TO WS-SUB3\n                 IF WS-DT2 = 'E'\n                     SUBTRACT 1 FROM WS-SEL2(WS-LINE)\n                 ELSE\n                     ADD WS-H2-N              TO WS-SEL2(WS-LINE)\n                     SUBTRACT 1 FROM WS-SEL2(WS-LINE)\n             ELSE\n                 ADD 1                        TO WS-LOOP-CNT.\n\n      ****************************************\n      *    load table that holds record numbers and position\n      *    placements of records to pull.\n      *    unless a nbr of duplicate pulls is requested\n      *    in parm xsi when parm e > zero, skip adding pull\n      *    lines to the line table for this parm.\n      *+**************************************\n       1300-FIND-AVAIL-OUT-PLACE.\n           IF WS-SUB3 > 299\n               MOVE 888                       TO WS-LINE\n               MOVE 'Y'                       TO WS-FOUND-SW\n           ELSE\n           IF (WS-LINE2(WS-SUB3) < WS-IN-CNT)\n               AND (WS-REL(WS-SUB3) NOT = 'S')\n               MOVE WS-SUB3                   TO WS-LINE\n               MOVE WS-SUB1                   TO WS-SUB(WS-LINE)\n               MOVE 'Y'                       TO WS-FOUND-SW\n               IF WS-LINE > WS-MAX-LINE\n                   MOVE WS-LINE               TO WS-MAX-LINE\n               ELSE\n                   CONTINUE\n           ELSE\n           IF WS-XSI-MAX > ZERO\n               AND WS-SUB(WS-SUB3) = WS-SUB1\n               ADD 1                          TO WS-XSI-CNT\n               IF WS-XSI-CNT NOT < WS-XSI-MAX\n                   MOVE WS-WORK2              TO WS-LINE\n                   MOVE 'Y'                   TO WS-DUPL-MAX-SW.\n\n      ****************************************\n      ****************************************\n      *   SORT SKIPPED\n      *    loop through the 'line' table and determine if the\n      *    current record is eligible for pulling to the\n      *    output file.  when sort is skipped then 1900-POST-SORT\n      *    is accessed from above during the first pass of INFILE.\n      *   SORT NOT SKIPPED\n      *    all the following logic pertains to the second\n      *    pass of INFILE, where sorted records from the line table\n      *    are used for record selection instead of the line table\n      *    itself, in order to include records not accessible\n      *    when line table was loaded.\n      *+**************************************\n      *+**************************************\n       1400-SORT-OUT.\n           IF WS-SORT-SW = 'Y'\n               PERFORM 1400-PREPARE-RETURN-SORT.\n\n       1400-PREPARE-RETURN-SORT.\n           IF LS-TEST-SW = '2' OR '9'\n               DISPLAY '**SORT SECTION '.\n           PERFORM 0300-CLOSE-INFILE.\n           PERFORM 0200-OPEN-INFILE.\n           PERFORM VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > WS-MAX-LINE\n               MOVE ZERO                      TO WS-SUB(WS-SUB1)\n               MOVE ZERO                      TO WS-LINE1(WS-SUB1)\n               MOVE ZERO                      TO WS-LINE2(WS-SUB1)\n               MOVE ZERO                      TO WS-SEL1(WS-SUB1)\n               MOVE ZERO                      TO WS-SEL2(WS-SUB1)\n               MOVE SPACE                     TO WS-TITLE(WS-SUB1)\n               MOVE SPACE                     TO WS-REL(WS-SUB1)\n           END-PERFORM.\n           MOVE ZERO                          TO WS-LINE.\n           MOVE ZERO                          TO WS-MAX-LINE.\n           MOVE ZERO                          TO WS-IN-CNT.\n           INITIALIZE WS-HOLD-VALUES.\n           MOVE 'N'                           TO WS-END-INFILE-SW.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 1400-RETURN-RECORDS THRU\n                       1400-RETURN-RECORDS-EXIT\n                       UNTIL END-OF-INFILE.\n\n       1400-RETURN-RECORDS.\n           PERFORM 1800-READ-INFILE.\n           IF END-OF-INFILE\n               GO TO 1400-RETURN-RECORDS-EXIT.\n           IF MORE-SORT-RCDS\n               MOVE 'N'                       TO WS-CONDENSE-SW\n               MOVE 'N'                       TO WS-SKIP-RCD-SW\n               PERFORM 2300-CONDENSE-LINE-TABLE\n                   UNTIL WS-CONDENSE-SW = 'Y'\n               PERFORM 1600-CHECK-LINE-AVAIL THRU\n                       1600-CHECK-LINE-EXIT\n               IF WS-SKIP-RCD-SW = 'N'\n                   PERFORM 1600-LOAD-SORT THRU\n                           1600-LOAD-SORT-EXIT.\n           PERFORM 1500-TEST-OUTPUT\n               VARYING WS-SUB3 FROM 1 BY 1\n               UNTIL WS-SUB3 > WS-LINE.\n\n       1400-RETURN-RECORDS-EXIT. EXIT.\n\n       1500-TEST-OUTPUT.\n           IF WS-IN-CNT < WS-LINE1(WS-SUB3)\n               OR WS-IN-CNT > WS-LINE2(WS-SUB3)\n               CONTINUE\n           ELSE\n               PERFORM 1900-POST-SORT THRU\n                       1900-CHECK-RCD-NBR-EXIT.\n\n       1600-LOAD-SORT.\n           IF WS-LINE > 299\n               GO TO 1600-LOAD-SORT-EXIT.\n      ****************************************\n      *    if last sort record was for a different line, it was\n      *    not loaded into line table.  use here before reading next\n      *    sort record.\n      ****************************************\n           PERFORM 1800-RETURN-SORT.\n           IF END-OF-SORT\n               GO TO 1600-LOAD-SORT-EXIT.\n           IF LS-TEST-SW = '2' OR '9'\n               DISPLAY '**SORT RCD ' SORT-RECORD.\n      ****************************************\n      *    skip sort records that were overridden by testing\n      *    against previous record.\n      *+**************************************\n           MOVE 'N'                           TO WS-SKIP-RCD-SW.\n           IF WS-LINE > ZERO\n               PERFORM 1700-SKIP-OVERRIDE\n                   VARYING WS-SUB1 FROM WS-LINE BY -1\n                   UNTIL WS-SUB1 < 1\n               IF WS-SKIP-RCD-SW = 'Y'\n                   GO TO 1600-LOAD-SORT.\n           MOVE 'N'                           TO WS-SKIP-RCD-SW.\n           PERFORM 1600-CHECK-LINE-AVAIL THRU\n                   1600-CHECK-LINE-EXIT.\n      ****************************************\n      *    load line table from sort records\n      *+**************************************\n           IF WS-SKIP-RCD-SW = 'Y'\n               GO TO 1600-LOAD-SORT-EXIT.\n           MOVE SORT-RECORD               TO WS-LINE-VALUES(WS-LINE).\n           GO TO 1600-LOAD-SORT.\n\n       1600-LOAD-SORT-EXIT. EXIT.\n\n       1600-CHECK-LINE-AVAIL.\n           MOVE ZERO                          TO WS-LINE.\n           MOVE SPACE                         TO WS-FOUND-SW.\n           PERFORM 2300-FIND-AVAIL-OUT-PLACE\n               VARYING WS-SUB3 FROM 1 BY 1\n               UNTIL WS-FOUND-SW = 'Y'.\n           IF WS-LINE > 300\n               MOVE 'Y'                       TO WS-SKIP-RCD-SW\n               DISPLAY '**** Skipping ' WS-LINE ' for rcd '\n                        WS-IN-CNT ' : line table full'.\n           IF WS-LINE < 1\n               MOVE 'Y'                       TO WS-SKIP-RCD-SW\n               DISPLAY '**** Skipping ' WS-LINE ' for rcd '\n                        WS-IN-CNT ' : line load error '.\n\n       1600-CHECK-LINE-EXIT. EXIT.\n\n       1700-SKIP-OVERRIDE.\n           IF SR-LINE1 = WS-LINE1(WS-SUB1)\n               AND SR-SUB = WS-SUB(WS-SUB1)\n               IF SR-LINE2 > WS-LINE2(WS-SUB1)\n                   MOVE 'Y'                   TO WS-SKIP-RCD-SW.\n\n       1800-RETURN-SORT.\n           RETURN SORT-PARM\n               AT END\n                   MOVE 99999999              TO SR-LINE1\n                   MOVE 'Y'                   TO WS-END-SORT-SW.\n           IF MORE-SORT-RCDS\n               ADD 1                          TO WS-SORT-RCD-CNT.\n\n       1800-READ-INFILE.\n           READ INFILE.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-IN-CNT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-INFILE-SW\n           ELSE\n               DISPLAY '**** PULLFILE read error on INFILE '\n               DISPLAY '**** FILE STAT = ' WS-STAT\n               MOVE +1800                     TO WS-RETURN-CODE.\n           IF LS-TEST-SW = '3' OR '9'\n             IF MORE-INFILE-RCDS\n                 DISPLAY '**INFILE RCD ' INFILE-RECORD.\n\n      ****************************************\n      *    determine length of output to pull\n      *+**************************************\n       1900-POST-SORT.\n           MOVE SPACE                         TO WS-HOLD1.\n           MOVE SPACE                         TO WS-HOLD2.\n           MOVE ZERO                          TO WS-IN WS-OUT.\n           MOVE SPACE                         TO WS-REL(WS-SUB3).\n           MOVE WS-SEL1(WS-SUB3)              TO WS-IN.\n           IF WS-SEL2(WS-SUB3) NOT = ZERO\n             IF WS-IN = ZERO\n                 MOVE WS-SEL2(WS-SUB3)        TO WS-OUT\n             ELSE\n                 COMPUTE WS-OUT = WS-SEL2(WS-SUB3) - WS-IN + 1.\n           IF WS-IN = ZERO\n             IF WS-OUT = ZERO\n                 MOVE INFILE-RCD              TO WS-HOLD1\n             ELSE\n                 MOVE INFILE-RCD(1: WS-OUT) TO WS-HOLD1\n           ELSE\n           IF WS-OUT = ZERO\n               MOVE INFILE-RCD(WS-IN: )       TO WS-HOLD1\n           ELSE\n               MOVE INFILE-RCD(WS-IN: WS-OUT) TO WS-HOLD1.\n\n      ****************************************\n      *    add a line number and/or title in front of the output\n      *    record if requested.  or insert a specified number of\n      *    spaces as a title.\n      *+**************************************\n           MOVE SPACE                         TO WS-HOLD2.\n           MOVE WS-IN-CNT                     TO WS-IN-CNT-X.\n           MOVE WS-TITLE(WS-SUB3)             TO WS-TTL.\n           MOVE ZERO                          TO WS-WORK2.\n           MOVE ZERO                          TO WS-WORK3.\n           IF (WS-TTL-5 = 'L' OR 'U')\n               AND WS-TTL-6X9 NUMERIC\n               AND WS-TTL-10X13 NUMERIC\n               MOVE WS-TTL-6X9                TO WS-WORK1\n               MOVE WS-TTL-10X13              TO WS-WORK3\n               PERFORM 2000-CONVERT-CASE\n               MOVE SPACE                     TO WS-TTL(5: ).\n           IF WS-TTL-1 = 'I'\n               AND WS-TTL-2X3 NUMERIC\n               AND WS-TTL-4 = SPACE\n               MOVE WS-TTL-2X3                TO WS-WORK2\n               COMPUTE WS-WORK3 = WS-WORK2 + 1\n           ELSE\n           IF (WS-TTL-1 = 'L' OR 'U')\n               AND WS-TTL-2X5 NUMERIC\n               AND WS-TTL-6X9 NUMERIC\n               MOVE WS-TTL-2X5                TO WS-WORK1\n               MOVE WS-TTL-6X9                TO WS-WORK3\n               PERFORM 2000-CONVERT-CASE\n               MOVE SPACE                     TO WS-TTL.\n\n           IF LS-NUMBERING-SW = 'Y'\n             IF WS-TTL = SPACE\n                 MOVE WS-IN-CNT-X             TO WS-HOLD2\n                 MOVE WS-HOLD1                TO WS-HOLD2(10: )\n             ELSE\n             IF WS-WORK2 > ZERO\n                 MOVE WS-IN-CNT-X        TO WS-HOLD2\n                 MOVE WS-TTL-5X15        TO WS-HOLD2(10: WS-WORK2)\n                 MOVE WS-HOLD1           TO WS-HOLD2(WS-WORK3: )\n             ELSE\n                 MOVE WS-IN-CNT-X             TO WS-HOLD2\n                 MOVE WS-TTL                  TO WS-HOLD2(10: 15)\n                 MOVE WS-HOLD1                TO WS-HOLD2(26: )\n           ELSE\n           IF WS-TTL = SPACE\n               MOVE WS-HOLD1                  TO WS-HOLD2\n           ELSE\n           IF WS-WORK2 > ZERO\n               MOVE WS-TTL-5X15          TO WS-HOLD2(1: WS-WORK2)\n               MOVE WS-HOLD1             TO WS-HOLD2(WS-WORK3: )\n           ELSE\n               MOVE WS-TTL                    TO WS-HOLD2\n               MOVE WS-HOLD1                  TO WS-HOLD2(17: ).\n           PERFORM 2100-DETERMINE-LINES THRU\n                   2100-DETERMINE-EXIT.\n\n       1900-CHECK-RCD-NBR-EXIT. EXIT.\n\n       2000-CONVERT-CASE.\n           IF WS-WORK1 = ZERO\n               MOVE 1                         TO WS-WORK1.\n           IF WS-WORK3 = ZERO\n               MOVE WS-INPUT-RCD-LENGTH       TO WS-WORK3\n           ELSE\n               COMPUTE WS-WORK3 = WS-WORK3 - WS-WORK1 + 1.\n           IF WS-TTL-1 = 'L'\n               OR WS-TTL-5 = 'L'\n               INSPECT WS-HOLD1(WS-WORK1: WS-WORK3) CONVERTING\n                                 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' TO\n                                 'abcdefghijklmnopqrstuvwxyz'.\n           IF WS-TTL-1 = 'U'\n               OR WS-TTL-5 = 'U'\n               INSPECT WS-HOLD1(WS-WORK1: WS-WORK3) CONVERTING\n                                 'abcdefghijklmnopqrstuvwxyz' TO\n                                 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n           MOVE ZERO                          TO WS-WORK1.\n           MOVE ZERO                          TO WS-WORK3.\n\n      ****************************************\n      *    if '*MAX' parm was used to limit the number of\n      *    times a record may print, enforce that here.\n      *+**************************************\n       2100-DETERMINE-LINES.\n           IF WS-LINE-PRINT-MAX > ZERO\n             IF WS-IN-CNT = WS-PREV-IN-CNT\n                 ADD 1                        TO WS-LINE-PRINT-CNT\n                 IF WS-LINE-PRINT-CNT < WS-LINE-PRINT-MAX\n                     CONTINUE\n                 ELSE\n                     GO TO 2100-DETERMINE-EXIT\n             ELSE\n                 MOVE ZERO                    TO WS-LINE-PRINT-CNT\n                 MOVE WS-IN-CNT               TO WS-PREV-IN-CNT.\n           IF LS-PAGE-LEN NUMERIC\n             IF WS-PRINT-SUM > WS-PRINT-MAX\n                 PERFORM 2200-WRITE-OUTPRNT-TOP\n             ELSE\n                 PERFORM 2200-WRITE-OUTPRNT\n           ELSE\n               PERFORM 2100-WRITE-OUTFILE.\n\n       2100-DETERMINE-EXIT. EXIT.\n\n       2100-WRITE-OUTFILE.\n           WRITE OUTFILE-RECORD FROM WS-HOLD2.\n           IF WS-STAT > ZERO\n               DISPLAY '**** PULLFILE write error on OUTFILE'\n               DISPLAY '**** FILE STAT = ' WS-STAT\n               MOVE +2100                     TO WS-RETURN-CODE.\n           ADD 1                              TO WS-WRITE-RCD-CNT.\n\n       2200-WRITE-OUTPRNT.\n           WRITE OUTPRNT-RECORD FROM WS-HOLD2\n               AFTER ADVANCING WS-SPACE-CONTROL LINES.\n           IF WS-STAT > ZERO\n               DISPLAY '**** PULLFILE write error on OUTPRNT'\n               DISPLAY '**** FILE STAT = ' WS-STAT\n               MOVE +2200                     TO WS-RETURN-CODE.\n           ADD WS-SPACE-CONTROL               TO WS-PRINT-SUM.\n           ADD 1                              TO WS-WRITE-RCD-CNT.\n\n       2200-WRITE-OUTPRNT-TOP.\n           WRITE OUTPRNT-RECORD FROM WS-HOLD2\n               AFTER ADVANCING PAGE-TOP.\n           IF WS-STAT > ZERO\n               DISPLAY '**** PULLFILE write error on OUTPRNT'\n               DISPLAY '**** FILE STAT = ' WS-STAT\n               MOVE +2201                     TO WS-RETURN-CODE.\n           MOVE 1                             TO WS-PRINT-SUM.\n           ADD 1                              TO WS-WRITE-RCD-CNT.\n\n      ****************************************\n      *    condense line table entries to keep all valid\n      *    entries at top, so additions to not accidently\n      *    exclude valid entries further down in the table.\n      *+**************************************\n       2300-CONDENSE-LINE-TABLE.\n           MOVE 'Y'                           TO WS-CONDENSE-SW.\n           PERFORM 2300-CONDENSE-OUT-PLACE\n               VARYING WS-SUB3 FROM 1 BY 1\n               UNTIL WS-SUB3 > WS-MAX-LINE.\n\n       2300-CONDENSE-OUT-PLACE.\n           IF WS-SUB3 < 300\n             IF WS-LINE2(WS-SUB3) < WS-LINE2(WS-SUB3 + 1)\n                 MOVE WS-LINE-VALUES(WS-SUB3) TO WS-HOLD-VALUES\n                 MOVE WS-LINE-VALUES(WS-SUB3 + 1) TO\n                      WS-LINE-VALUES(WS-SUB3)\n                 MOVE WS-HOLD-VALUES TO WS-LINE-VALUES(WS-SUB3 + 1)\n                 MOVE 'N'                     TO WS-CONDENSE-SW.\n\n      ****************************************\n      *    load table that holds record numbers and position\n      *    placements of records to pull, same as in\n      *    1300-FIND-AVAIL-OUT-PLACE.\n      *+**************************************\n       2300-FIND-AVAIL-OUT-PLACE.\n           IF WS-SUB3 > 300\n               MOVE 'Y'                       TO WS-FOUND-SW\n           ELSE\n           IF WS-LINE1(WS-SUB3) = ZERO\n               OR WS-LINE2(WS-SUB3) < WS-IN-CNT\n               MOVE WS-SUB3                   TO WS-LINE\n               MOVE 'Y'                       TO WS-FOUND-SW\n               IF WS-LINE > WS-MAX-LINE\n                   MOVE WS-LINE               TO WS-MAX-LINE.\n\n      ************************************ END PULLFILE\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PULLPARM": {"ttr": 16650, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x015\\x00\\x00\\x00\\x97\\x04O\\x00\\x99)\\x9f\\t4\\x00Y\\x00,\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.53", "flags": 0, "createdate": "1997-02-13T00:00:00", "modifydate": "1999-10-26T09:34:00", "lines": 89, "newlines": 44, "modlines": 0, "user": "IANNONE"}, "text": "**\n**  '**  '  =  DOCUMENTATION LINE           input to PULLFILE\n**\n**  Loop through an input file and search for a specified string\n**  in a specified position, or anywhere in the file.\n**  When found, write that (full or partial) record, or a group of\n**  records (including or not including the original search record)\n**  to an output file.  Enter up to 100 strings.\n**\n**                      x\n**           a          sbb mccc ddeee f.ggggg# h.iiiii#       j\n**                      i-- ---- ----- -------- -------- ---------------\n**\n**  a      enter a search string in position 1, length 24\n**         '#MAX#' = limit nbr times a record prints via eee\n**         '#NBR#' = select numeric characters\n**         '#SPACE#' = select spaces\n**  xsi    'X'=exclude this record when string found\n**             'X' parms must be at the top\n**         'I'=include all records regardless of search string contents\n**             string length is hardcoded to '01'\n**         'S'=terminate previous lines selection\n**          # =allows duplicates when eee > zero\n**  bb     length of string\n**  mccc   position of string.  0000=search for string in record.\n**         or enter 'M###' to limit max nbr of duplicates to pull\n**         from a single record. (ie: M002 limits to 2 duplicates).\n**  -      hyphen: dd = begin pulling dd records before found string\n**  dd     record to pull when string found. 00=same, 01=next, etc\n**  eee    number of records to pull after string location\n**         '999' = pull all records after string location\n**\n**  f      'P'=positional: (g) is a position to begin pulling output\n**         '+'=relative: begin pulling output (g) bytes after string\n**         '-'=relative: begin pulling output (g) bytes before string\n**         ' '=start pulling from beginning of record\n**         '#'=length of delimiter in (g) to find (1/2/3/4/5)\n**\n**  .      'E' = exclude the delimiter from output if (f) is 1-5\n**         'H' = if (h) is '+' or '-': relative to (h) delimiter\n**         ' ' = default of include\n**\n**  ggggg  if (f) is 'P': a position to begin pulling\n**         if (f) is '+': a relative position (g) bytes after string\n**         if (f) is '-': a relative position (g) bytes before string\n**         if (f) is ' ': (g) is ignored\n**         if (f) is '#': a physicial delimiter to begin pull\n**\n**  #      if (f) is a delimiter search: a '3' would mean select the\n**            third occurrence of the delimiter for the beginning\n**            pull position.\n**\n**  h      'P'=positional: (i) is a position to end pulling output\n**         '+'=relative: end pulling output (i) bytes after string\n**         '-'=relative: end pulling output (i) bytes before string\n**         ' '=end pulling at end of record\n**         '#'=length of delimiter in (i) to find (1/2/3/4/5)\n**\n**  .      'E' = exclude the delimiter from output if (h) is 1-5\n**         'F' = if (f) is '+' or '-': relative to (f) delimiter\n**         ' ' = default of include\n**\n**  iiiii  if (h) is 'P': a position to end pulling\n**         if (h) is '+': a relative position (i) bytes after string\n**         if (h) is '-': a relative position (i) bytes before string\n**         if (h) is ' ': (i) is ignored\n**         if (h) is '#': a physicial delimiter to end pull\n**\n**  #      if (h) is a delimiter search: a '3' would mean select the\n**            third occurrence of the delimiter for the ending\n**            pull position.\n**\n**  j      title to place in front of output record.\n**         see PULLDOCU for further info\n**\n**  <-------------------x-- ---------- -------- -------- ---------------\n**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---------- -------- -------- ---------------\nS. U. T.                 08 0000 00000 - 00006  P 00050\nS. U. T.                 08 0000 00000 - 00006  +F00003\nLISTC                    05 0000 00000 + 00011  3E')     I23\nSYSUT2                   06 0003 00000 3ESN=    1E,      File 01:\nSYSUT2                   06 0000 00000 3 SN=    +F00044\nSYSUT2                   06 0000 00000 3 SN=    + 00044  Cash file ->\nSYSUT2                   06 0000 00000 -H00022  3 OAD    S05 Test\nABC                      03 0000 00000 3 DEF  3 +F00006\nLINE 02                  07 0000 01009   00000    00000  I10 L00000000\n                        I00 0000 00999   00000    00000  L00000000\nSTOP STRING             S00 0000 00000   00000    00000\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PULLPROC": {"ttr": 16899, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x007\\x01\\x19\\x07/\\x01\\x192?\\x11\\x19\\x00)\\x00-\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T11:19:37", "lines": 41, "newlines": 45, "modlines": 0, "user": "IANNONE"}, "text": "//useridP  JOB (8231),'PULLPROC',CLASS=x,\n//             MSGCLASS=x,\n//*            RESTART=J010.S010,\n//             MSGLEVEL=(1,1)\n//********************************************\n//*    !!!!!   PARM = 4 DIGIT LENGTH OF INPUT RECORD (MAX 9999) +\n//*    !!!!!          Y/N FOR RECORD COUNT DISPLAY +\n//*    !!!!!          Y/N FOR SWITCHING PULL POSITIONS WHEN\n//*    !!!!!                  POSITION 1 > POSITION 2 +\n//*    !!!!!          2 DIGIT LINES-PER-PAGE VALUE, OR BLANK\n//*    !!!!!                  OUTPRNT IF VALUED, ELSE OUTFILE USED\n//*    !!!!!          2 BYTES FILLER\n//********************************************\n//S010     EXEC PGM=IDCAMS,\n//             REGION=5120K,\n//*            RESTART=S010,\n//             COND=(0,NE)\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n    DELETE XXXXXXX.PULL.FILE01 NONVSAM\n    SET MAXCC = 0\n/*\n//********************************************\n//S020     EXEC PGM=PULLFILE,\n//*            RESTART=S010,\n//             REGION=5120K,\n//             PARM='0080NN    /'\n//STEPLIB  DD  DSN=userid.ISPF.OBJ,DISP=SHR\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//INFILE   DD  DISP=SHR,DSN=userid.ISPF.FILE488(XXXXXXXX)     *input\n//OUTFILE  DD  DSN=userid.PULL.FILE01,\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(80,(400,20),RLSE),AVGREC=U,\n//             RECFM=FB,LRECL=80,DCB=(DSORG=PS)\n//OUTPRNT  DD  DUMMY\n//PARM01   DD  DISP=SHR,DSN=userid.ISPF.FILE488(PULLPARM)     *input\n//********************************************\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PULL001": {"ttr": 16901, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00E\\x01\\x19\\x07/\\x01\\x192?\\x11\\x19\\x00!\\x00!\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T11:19:45", "lines": 33, "newlines": 33, "modlines": 0, "user": "IANNONE"}, "text": "//*--------------------------------------------------\n//*    PULL LEDGERS 458 AND 459 FOR ONLINE VIEWING\n//*--------------------------------------------------\n//S076     EXEC PGM=PULL0133,\n//*            RESTART=S070,\n//             COND=(0,NE),\n//             REGION=5120K,\n//             PARM='0133NN    /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//INFILE   DD  DSN=&&ACR495B,         * PREVIOUSLY CREATED REPORT\n//             DISP=(OLD,KEEP,KEEP),  * OF LEDGERS WITH HEADERS\n//             UNIT=SYSDA,\n//             RECFM=FA,LRECL=133\n//OUTFILE  DD  SYSOUT=(&SOUTR,ACR0495P,&FORM01),               *OUTPUT\n//             RECFM=FA\n//OUTPRNT  DD  DUMMY\n//PARM01   DD  *,DLM=ZZ\n**\n**  PULLFILE utility to pull records between two ledgers\n**\n**  start pulling 3 lines before 'NUMBER  458' and\n**  include up to 4 lines before 'NUMBER  460'.\n**\n**  <-------------------x-- ---------- -------- -------- --------------\n**           a          sbb mccc-ddeee f.ggggg# h.iiiii#       j\n**  <----+----+----+----i-- ---------- -------- -------- --------------\nNUMBER  458              12 0009-03999   00000    00000\nNUMBER  460             S12 0009-04000   00000    00000\nZZ\n//*--------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STVDOCU": {"ttr": 16903, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x004\\x01\\x19\\x07/\\x01\\x192/\\x143\\x01\\x16\\x01\\x14\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-18T14:33:34", "lines": 278, "newlines": 276, "modlines": 0, "user": "IANNONE"}, "text": "\n         STV115M map    STV0115C online cobol ii program\n\n------------------------------------------------------------------------\nCONV                   Date Calculations              IANNONE 12/07/00\n\n\n\nGregorian/Julian       DATE________         yyyyddd or yyyymmdd\n\n\n\nDates/Nbr of days      PAST DATE________    yyyyddd or yyyymmdd\n                       FUTURE DATE________\n                       NBR OF DAYS_____\n\n\n\nSubroutine check       DATA     __________\n                       DATA2    __________\n                       IN       ______\n                       OUT      ______\n\n\n<Clear>Exit  <F1>Help  <F3>Reset  <F5>Hex conversions\n\n\n\n------------------------------------------------------------------------\n\n         STV110M map    STV0110C online cobol ii program\n\n------------------------------------------------------------------------\nCNV2                        Hex/Dec Calculations\n\n\n\n\nConversion       Dec to Hex_________\n\n                 Hex to Dec_______\n\n\nArithmetic                        HEX\n\n                              _______\n                          +   _______\n                         ------------\n\n\n\n<Clear>Exit                      <F5>Date conversions\n\n------------------------------------------------------------------------\n\n\n\n\n------------------------------------------------------------------------\nSTV0400B and STV1400B documentation\n------------------------------------------------------------------------\n\nCONV is an online interface used to test batch calls to STV0400B.\nWe have an in-house help system that displays the following\nscreens when PF1 is pressed while your cursor resides on a\nparticular field.  Note that the actual batch syntax is in STV0400B.\n\n\nThe following would display if PF1 was pressed while\nyour key resided on the 'DATA' field in STV115M:\n\n  ------------------------------------------------------------------\n\n   Input:   The contents of this field are assumed to be formatted\n            as described by the IN field.\n\n   Output:  The contents of this field are formatted as described\n            by the OUT field.\n\n   If there is an error, this field is set to 'ERROR ####'\n     I/S can tell you the nature of the error number\n\n   To edit dates, see the OUT field help screen.\n\n   Shared Medical Systems uses '-' in the second delimiter to indicate\n   dates outside the 80/20 window.  This can be used in the data field.\n     Example:  14/02/01 = 2014/02/01     14/02-01 = 1914/02/01\n               43/02/01 = 1943/02/01     43/02-01 = 1843/02/01\n\n  ------------------------------------------------------------------\n\nThe following would display if PF1 was pressed while\nyour key resided on the 'DATA2' field in STV115M:\n\n  ------------------------------------------------------------------\n\n\n\n   This field is used when passing a second date (a future date)\n   to the AGE and NBR-OF-DAYS subroutine.  Also used to pass a\n   future time.\n\n\n   Format the same as the DATA field.\n\n\n  ------------------------------------------------------------------\n\nThe following would display if PF1 was pressed while\nyour key resided on the 'IN' field in STV115M:\n\n  ------------------------------------------------------------------\n\n  Enter the format of the data that is being sent in the DATA\n  field (and, if used, the DATA2 field).\n\n  Example date:  March 19th, 1998, 1998079 julian, 1:24pm, THURSDAY\n\n  cy/ddd  '1998/078  '     cyddd   '1998078   '     m     '03       '\n  y/ddd   '98/078    '     yddd    '98078     '     md    '0319     '\n  ddd     '078       '     m/d/cy  '03/19/1998'     m/d   '03/19    '\n  cymd    '19980319  '     ymd     '980319    '     mmm   'MAR      '\n  cy/m/d  '1998/03/19'     y/m/d   '98/03/19  '     mmmcy 'MAR1998  '\n  mdy     '031998    '     m/d/y   '03/19/98  '     mmmd  'MAR19    '\n  y       '98        '     month   'SEPTEMBER '     mmmyd 'MAR9819  '\n  hmsm    '132400    '     hmp     '0124PM    '     hmm   '1324     '\n  h:m:sm  '13:24:00  '     h:m p   '01:24 PM  '     h:mm  '13:24    '\n  h:mp    '01:24PM   '     hms8    '01240000  '     hmsp  '012400PM '\n  key     '30019681  ' = 50000000 minus 19980319\n\n  Note: leaving the IN field as spaces causes current date\n        in CYMD format to be used.\n\n  ------------------------------------------------------------------\n\nThe following would display if PF1 was pressed while\nyour key resided on the 'OUT' field in STV115M:\n\n  ------------------------------------------------------------------\n\n  Enter the format of the data that you would like placed in the\n  DATA field.\n\n  Example date:  March 19th, 1998, 1998079 julian, 1:24pm, THURSDAY\n\n\n  cy/ddd  '1998/078  '     cyddd   '1998078   '     mmm    'MAR     '\n\n  y/ddd   '98/078    '     yddd    '98078     '     mmmcy  'MAR1998 '\n\n  ddd     '078       '     m/d/cy  '03/19/1998'     mmmd   'MAR19   '\n\n  cymd    '19980319  '     ymd     '980319    '     mmmyd  'MAR9819 '\n\n  cy/m/d  '1998/03/19'     y/m/d   '98/03/19  '\n\n  mdy     '031998    '     m/d/y   '03/19/98  '\n\n  y       '98        '     month   'MARCH     '\n\n  ------------------------------------------------------------------\n\n  hmsm   = military '132400    '     hmm   = military  '1324      '\n  h:m:sm = military '13:24:00  '     h:mm  = military  '13:24     '\n  hms8   = military '01240000  '     h:mp  = standard  '01:24PM   '\n  hmp    = standard '0124PM    '     hmsp  = standard  '012400PM  '\n  h:m p  = standard '01:24 PM  '     h:mp  = standard  '01:24PM   '\n\n  I##### : increment time by ##### number of minutes\n           I00003  =  '13270000' - last 2 digit are days calc'd past\n  D##### : decrement time by ##### number of minutes\n           D01440  =  '13030001' - where 1440 minutes = 1 day\n  MIN    : determine number of minutes between two times.\n           If time entered as HMSM or HMSS, days calc'd past can\n           be included (above)\n           DATA2 can be set to a future time.\n           ex: DATA=23000001  IN=HMSM  current time=02:00:00\n               DATA valued to 000180 minutes\n\n  ------------------------------------------------------------------\n\n  day    : returns the name and number of the day: mon=1...sun=7\n           ex:  'THURSDAY 4'\n\n  +##### : DATA field plus ##### number of days\n           ex:  +00005   DATA='19980324  '\n  -##### : DATA field minus ##### number of days\n           ex:  -00005   DATA='19980314  '\n  days   : returns the number of days between DATA and current date\n           (or future date DATA2 if entered).\n           ex:  DATA='19980314  ', result='00005     '\n\n  age    : return a persons age based on DATA date and current date\n           (or DATA2 if entered).\n           ex:  45 years, 2 months, 10 days = '0450210   '\n\n  ------------------------------------------------------------------\n\n  Note for the following:   eom for current month:  c--e00  y--e00\n                            eoy for current year:   c--ey0  y--ey0\n\n  cmdey# : end-of-year gregorian date # years previous\n           ex:  CMDEY2 = '19961231  '\n  cmfey# : end-of-year gregorian date # years ahead\n           ex:  CMFEY2 = '20001231  '\n  cmde## : end-of-month gregorian date ## months previous\n           ex:  CMDE04 = '19971130  '\n  cmfe## : end-of-month gregorian date ## months ahead\n           ex:  CMFE04 = '19980731  '\n  cmd### : gregorian date ### days previous\n           ex:  CMD004 = '19980315  '\n  cmf### : gregorian date ### days ahead\n           ex:  CMF004 = '19980323  '\n\n  ------------------------------------------------------------------\n\n  cddey# : end-of-year julian date # years previous\n           ex:  CDDEY2 = '1996366   '\n  cdfey# : end-of-year julian date # years ahead\n           ex:  CDFEY2 = '2000366   '\n  cdde## : end-of-month julian date ## months previous\n           ex:  CDDE04 = '1997334   '\n  cdfe## : end-of-month julian date ## months ahead\n           ex:  CDFE04 = '1998212   '\n  cdd### : julian date ### days previous\n           ex:  CDD004 = '1998074   '\n  cdf### : julian date ### days ahead\n           ex:  CDF004 = '1998082   '\n\n  ------------------------------------------------------------------\n\n  ymdey# : end-of-year gregorian date # years previous\n           ex:  YMDEY2 = '961231    '\n  ymfey# : end-of-year gregorian date # years ahead\n           ex:  YMFEY2 = '001231    '\n  ymde## : end-of-month gregorian date ## months previous\n           ex:  YMDE04 = '971130    '\n  ymfe## : end-of-month gregorian date ## months ahead\n           ex:  YMFE04 = '980731    '\n  ymd### : gregorian date ### days previous\n           ex:  YMD004 = '980315    '\n  ymf### : gregorian date ### days ahead\n           ex:  YMF004 = '980323    '\n\n  ------------------------------------------------------------------\n\n  yddey# : end-of-year julian date # years previous\n           ex:  YDDEY2 = '96366     '\n  ydfey# : end-of-year julian date # years ahead\n           ex:  YDFEY2 = '00366     '\n  ydde## : end-of-month julian date ## months previous\n           ex:  YDDE04 = '97334     '\n  ydfe## : end-of-month julian date ## months ahead\n           ex:  YDFE04 = '98212     '\n  ydd### : julian date ### days previous\n           ex:  YDD004 = '98074     '\n  ydf### : julian date ### days ahead\n           ex:  YDF004 = '98082     '\n\n  ------------------------------------------------------------------\n\n  suffix : requests that the date be returned in the form\n           DATA='MARCH     '  IN='19TH  '  OUT='1998  '\n\n  key    : '19980319  ' minus 50000000 equals '30019681  '\n           this key is used for files that desire ccyymmdd keys\n           to be in descending sequence\n\n  To edit a date:   data:   19000229     returns:   error 0301\n                      in:   cymd\n                     out:   cymd\n\n\n   Note: leaving the OUT field as spaces causes current date\n         in CYMD format to be placed in the DATA field.\n\n  ------------------------------------------------------------------\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV0110C": {"ttr": 16908, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00T\\x01\\x19\\x07/\\x01\\x192/\\x147\\x03\\x11\\x03\\x1d\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-18T14:37:54", "lines": 785, "newlines": 797, "modlines": 0, "user": "IANNONE"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "STV0115C": {"ttr": 17409, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00H\\x01\\x19\\x07/\\x01\\x192?\\x10F\\x03\\x8b\\x03\\x97\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T10:46:48", "lines": 907, "newlines": 919, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  STV0115C: greg/jul and nbr-of-days convert'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    STV0115C\n       INSTALLATION.  ST VINCENT MIS DEPARTMENT.\n      ******************************************************************\n      *@@@ II  greg/jul and nbr-of-days convert\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ******************************************************************\n      * Project no.  |  890886\n      * Date-written |  nov 24, 1989.\n      * Narrative    |\n      *\n      * This online program converts a date entered in julian format\n      * (yyddd) to gregorian format (mmddyy), and a date entered in\n      * gregorian format to julian format.    transid = date\n      ******************************************************************\n      * Project #   : 900839\n      * Date changed: 09/11/90\n      * Programmer  : Jim Iannone\n      *               Allow calculating nbr of days between 2 dates, or\n      *               calculating a past or future date\n      ******************************************************************\n      * Date changed: 03/13/98\n      * Programmer  : Jim Iannone\n      *               rework for Cobol II and year 2000 compliance\n      ******************************************************************\n      * Date changed: 01/03/99\n      * Programmer  : Jim Iannone\n      *               integrate with 'conv'\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       DATA DIVISION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-ANNOUNCE-START.\n           05  FILLER                  PIC  X(43)      VALUE\n               '**** Working Storage STV0115C starts here  '.\n\n       01  WS-COMMAREA.\n           05   WS-RETURN-SW           PIC  X.\n           05   FILLER                 PIC  X(09).\n\n       01  WS-OUTPUT.\n           05  WS-OUT-MESSAGE          PIC  X(70)     VALUE SPACE.\n           05  WS-OUTPUT-DATE          PIC  X(08)     VALUE SPACE.\n\n       01  WS-INPUT.\n           05  WS-INPUT-DATE           PIC  X(08)      VALUE SPACE.\n           05  FILLER REDEFINES WS-INPUT-DATE.\n               10  WS-IN-CY            PIC  9(04).\n               10  WS-IN-MM            PIC  99.\n               10  WS-IN-DD            PIC  99.\n               10  WS-IN-DD-X REDEFINES WS-IN-DD\n                                       PIC XX.\n           05  FILLER REDEFINES WS-INPUT-DATE.\n               10  WS-IN-JUL-DATE      PIC  X(07).\n               10  FILLER REDEFINES WS-IN-JUL-DATE.\n                   15  WS-IN-CC        PIC  99.\n                   15  WS-IN-YY        PIC  99.\n                   15  WS-IN-DDD       PIC  9(03).\n               10  FILLER REDEFINES WS-IN-JUL-DATE.\n                   15  FILLER          PIC  99.\n                   15  WS-IN-DDD2      PIC  999.\n                   15  WS-IN-EXTRA     PIC  XX.\n               10  WS-IN-FILLER        PIC  X.\n\n       01  WS-LEAP-YR-WORK-FIELDS.\n           05  WS-LEAP-YR              PIC S99        VALUE ZERO.\n           05  WS-LEAP-REMAIN          PIC S99        VALUE ZERO.\n           05  LEAP-YR-SWITCH          PIC  X         VALUE 'N'.\n               88  NOT-LEAP-YR                        VALUE 'N'.\n               88  LEAP-YR                            VALUE 'Y'.\n\n       01  WS-SWITCHES.\n           05  WS-F-TYPE-SW            PIC  X         VALUE SPACE.\n               88  WS-F-GREGORIAN                     VALUE 'G'.\n               88  WS-F-JULIAN                        VALUE 'J'.\n\n       01  WS-INDEXES.\n           05   WS-SUB                 PIC S9(2)      VALUE ZERO.\n           05   WS-SUB2                PIC S9(2)      VALUE ZERO.\n\n       01  WS-WORK-FIELDS.\n           05  WS-ABSOLUTE-TIME        PIC S9(16)      COMP.\n           05  WS-EIBCALEN             PIC S9(04)    VALUE ZERO COMP.\n           05  WS-EIBAID               PIC  X        VALUE SPACE.\n           05  WS-EIBTRMID             PIC  X(04)    VALUE SPACE.\n           05  WS-NBRDAY               PIC  X(05)      VALUE '00000'.\n           05  WS-NBRDAY-N REDEFINES WS-NBRDAY\n                                       PIC  9(05).\n           05  WS-FDATE                PIC  X(08)      VALUE SPACE.\n           05  FILLER                  REDEFINES WS-FDATE.\n               10  WS-FDATE-7          PIC  X(07).\n               10  WS-FDATE-8          PIC  X.\n           05  FILLER                  REDEFINES WS-FDATE.\n               10  WS-FDATE-J-YYYY     PIC  X(04).\n               10  FILLER REDEFINES WS-FDATE-J-YYYY.\n                   15  WS-FDATE-CC     PIC  XX.\n                   15  WS-FDATE-YY     PIC  XX.\n               10  WS-FDATE-J-DDD      PIC  XXX.\n               10  FILLER              PIC  X.\n           05  FILLER                  REDEFINES WS-FDATE.\n               10  WS-FDATE-G-YYYY     PIC  X(04).\n               10  WS-FDATE-G-MM       PIC  XX.\n               10  WS-FDATE-G-DD       PIC  XX.\n           05  WS-PDATE                PIC  X(08)      VALUE SPACE.\n           05  FILLER                  REDEFINES WS-PDATE.\n               10  WS-PDATE-7          PIC  X(07).\n               10  WS-PDATE-8          PIC  X.\n           05  FILLER                  REDEFINES WS-PDATE.\n               10  WS-PDATE-J-YYYY     PIC  XXXX.\n               10  WS-PDATE-J-DDD      PIC  XXX.\n               10  FILLER              PIC  X.\n           05  FILLER                  REDEFINES WS-PDATE.\n               10  WS-PDATE-G-YYYY     PIC  X(04).\n               10  WS-PDATE-G-MM       PIC  XX.\n               10  WS-PDATE-G-DD       PIC  XX.\n           05  WS-DATA1                PIC  X(10)      VALUE SPACE.\n           05  WS-DATA2                PIC  X(10)      VALUE SPACE.\n           05  WS-IN                   PIC  X(06)      VALUE SPACE.\n           05  WS-OUT                  PIC  X(06)      VALUE SPACE.\n           05  WS-QUOTIENT             PIC  9(04)      VALUE ZERO.\n           05  WS-REMAINDER            PIC  99         VALUE ZERO.\n           05  WS-REMAIN2              PIC  9(04)      VALUE ZERO.\n           05  WS-YYYY                 PIC  9(04)      VALUE ZERO.\n           05  WS-NBR-TABLE.\n               10  WS-NBR              PIC  X\n                                       OCCURS 5 TIMES.\n           05  WS-SYSID                                VALUE SPACE.\n               10  WS-SYSID-1X3        PIC  XXX.\n               10  WS-SYSID-4          PIC  X.\n\n       01  WS-STV1420B-FIELDS.\n           05  STV1420B-PAST         PIC  X(08)   VALUE SPACE.\n           05  STV1420B-FUTURE       PIC  X(08)   VALUE SPACE.\n           05  STV1420B-DAYS         PIC  X(05)   VALUE SPACE.\n\n       01  WS-STV1400B-FIELDS.\n           05  STV1400B-DATA         PIC  X(10)   VALUE SPACE.\n           05  FILLER REDEFINES STV1400B-DATA.\n               10  STV1400B-ERROR    PIC  X(06).\n               10  STV1400B-NBR      PIC  X(04).\n           05  FILLER REDEFINES STV1400B-DATA.\n               10  STV1400B-CYMD     PIC  X(08).\n               10  FILLER REDEFINES STV1400B-CYMD.\n                   15  STV1400B-CYMD-C  PIC  XX.\n                   15  STV1400B-CYMD-Y  PIC  XX.\n                   15  STV1400B-CYMD-M  PIC  XX.\n                   15  STV1400B-CYMD-D  PIC  XX.\n               10  FILLER            PIC  XX.\n           05  FILLER REDEFINES STV1400B-DATA.\n               10  STV1400B-DAYS     PIC  X(05).\n               10  FILLER            PIC  X(05).\n           05  FILLER REDEFINES STV1400B-DATA.\n               10  STV1400B-DAY      PIC  X(09).\n               10  STV1400B-DAY-NBR  PIC  X.\n           05  STV1400B-DATA2        PIC  X(10)   VALUE SPACE.\n           05  STV1400B-IN           PIC  X(06)   VALUE SPACE.\n           05  STV1400B-OUT          PIC  X(06)   VALUE SPACE.\n\n      *CPYBKLIB ATTRIB\n           COPY ATTRIB.    (see stv0110c)\n\n      *CPYBKLIB CNTLCHAR\n           COPY CNTLCHAR.  (see stv0110c)\n\n      *CPYBKLIB DFHAID KEYS\n           COPY DFHAID.\n\n      *CPYBKLIB STV115M\n           COPY STV115M.\n\n       01  WS-ANNOUNCE-END.\n           05  FILLER                  PIC  X(43)     VALUE\n               '**** END STV0115C WORKING STORAGE HERE     '.\n\n       LINKAGE SECTION.\n\n       01  DFHCOMMAREA                 PIC X(10).\n      *\n       PROCEDURE DIVISION.\n      ******************************************************************\n      ** EIBCALEN SHOULD EQUAL 0 OR 10.  0 FOR FIRST EXECUTION OF\n      ** ONLINE PROGRAM; 10 FOR SUBSEQUENT EXECUTIONS\n      ******************************************************************\n       0000-SETUP-EIB.\n           MOVE EIBAID                        TO WS-EIBAID.\n           MOVE EIBCALEN                      TO WS-EIBCALEN.\n           MOVE EIBTRMID                      TO WS-EIBTRMID.\n\n       0000-CHECK-EIBCALEN.\n           IF WS-EIBAID = DFHCLEAR\n               EXEC CICS ASSIGN\n                   SYSID (WS-SYSID)\n               END-EXEC\n               MOVE '5'                       TO WS-SYSID-4\n               EXEC CICS SEND CONTROL\n                   FREEKB\n                   ERASE\n               END-EXEC\n               EXEC CICS START\n                   TRANSID('MENU')\n                   TERMID(WS-EIBTRMID)\n                   SYSID(WS-SYSID)\n                   NOHANDLE\n               END-EXEC\n               EXEC CICS RETURN\n               END-EXEC.\n           IF WS-EIBCALEN = 0\n               MOVE SPACE                     TO WS-COMMAREA\n               GO TO 7000-INITIAL-MAP-SEND\n           ELSE\n           IF WS-EIBCALEN = 10\n               MOVE DFHCOMMAREA               TO WS-COMMAREA\n               GO TO 1000-PROCESS-SCREEN-INPUT\n           ELSE\n               GO TO 8000-COMMAREA-ERROR.\n      *\n       1000-PROCESS-SCREEN-INPUT.\n           EXEC CICS HANDLE CONDITION\n                     MAPFAIL (8300-MAPFAIL)\n                     END-EXEC.\n           EXEC CICS RECEIVE\n                     MAP ('STV115A')\n                     MAPSET ('STV115M')\n                     END-EXEC.\n\n           IF WS-EIBAID = DFHENTER\n               MOVE SPACE                     TO WS-RETURN-SW\n           ELSE\n           IF WS-EIBAID = DFHPF1\n               PERFORM 9400-XCTL-WIN0140C\n               MOVE SPACE                     TO WS-RETURN-SW\n           ELSE\n           IF WS-EIBAID = DFHPF5\n               GO TO 9400-XCTL-STV0110C\n               MOVE SPACE                     TO WS-RETURN-SW\n           ELSE\n           IF WS-EIBAID = DFHPF3\n               GO TO 7000-INITIAL-MAP-SEND\n           ELSE\n               MOVE SPACE                     TO WS-RETURN-SW\n               GO TO 8100-ANYKEY-ERROR.\n      ****************************************\n      *    EDIT PAST DATE, FUTURE DATE, NBR OF DAYS FIELDS.\n      *    BYPASS IF PROGRAM LINKED TO.\n      ****************************************\n           MOVE '---------------------------- Institution Name Here ----\n      -    '------------------------'          TO STVMSGO.\n           IF NBRDAYA = CC-EOF-KEY\n               MOVE 1                           TO NBRDAYL.\n           IF NBRDAYL > ZERO\n               MOVE NORM-UNPROT-ALPHA-FSET      TO NBRDAYA\n               INSPECT NBRDAYI REPLACING ALL LOW-VALUE BY '_'\n               INSPECT NBRDAYI REPLACING ALL SPACE     BY '_'\n               PERFORM 1000-JUSTIFY-NBR\n               MOVE NBRDAYI                     TO WS-NBRDAY\n               INSPECT WS-NBRDAY REPLACING ALL '_' BY ZERO.\n           IF FDATEA = CC-EOF-KEY\n               MOVE 1                           TO FDATEL.\n           IF FDATEL > ZERO\n               MOVE NORM-UNPROT-ALPHA-FSET      TO FDATEA\n               INSPECT FDATEI REPLACING ALL LOW-VALUE BY '_'\n               INSPECT FDATEI REPLACING ALL SPACE   BY '_'\n               MOVE FDATEI                      TO WS-FDATE\n               INSPECT WS-FDATE REPLACING ALL '_' BY SPACE.\n           IF PDATEA = CC-EOF-KEY\n               MOVE 1                           TO PDATEL.\n           IF PDATEL > ZERO\n               MOVE NORM-UNPROT-ALPHA-FSET      TO PDATEA\n               INSPECT PDATEI REPLACING ALL LOW-VALUE BY '_'\n               INSPECT PDATEI REPLACING ALL SPACE BY '_'\n               MOVE PDATEI                      TO WS-PDATE\n               INSPECT WS-PDATE REPLACING ALL '_' BY SPACE.\n           IF DATA1A = CC-EOF-KEY\n               MOVE 1                           TO DATA1L.\n           IF DATA1L > ZERO\n               MOVE NORM-UNPROT-ALPHA-FSET      TO DATA1A\n               INSPECT DATA1I REPLACING ALL LOW-VALUE BY '_'\n               INSPECT DATA1I REPLACING ALL SPACE BY '_'\n               MOVE DATA1I                      TO WS-DATA1\n               INSPECT WS-DATA1 REPLACING ALL '_' BY SPACE\n               IF WS-DATA1 = SPACE\n                   MOVE NORM-UNPROT-ALPHA       TO DATA1A.\n           IF DATA2A = CC-EOF-KEY\n               MOVE 1                           TO DATA2L.\n           IF DATA2L > ZERO\n               MOVE NORM-UNPROT-ALPHA-FSET      TO DATA2A\n               INSPECT DATA2I REPLACING ALL LOW-VALUE BY '_'\n               INSPECT DATA2I REPLACING ALL SPACE BY '_'\n               MOVE DATA2I                      TO WS-DATA2\n               INSPECT WS-DATA2 REPLACING ALL '_' BY SPACE\n               IF WS-DATA2 = SPACE\n                   MOVE NORM-UNPROT-ALPHA       TO DATA2A.\n           IF INA = CC-EOF-KEY\n               MOVE 1                           TO INL.\n           IF INL > ZERO\n               MOVE NORM-UNPROT-ALPHA-FSET      TO INA\n               INSPECT INI REPLACING ALL LOW-VALUE BY '_'\n               INSPECT INI REPLACING ALL SPACE BY '_'\n               MOVE INI                         TO WS-IN\n               INSPECT WS-IN REPLACING ALL '_' BY SPACE\n               IF WS-IN = SPACE\n                   MOVE NORM-UNPROT-ALPHA       TO INA.\n           IF OUTA = CC-EOF-KEY\n               MOVE 1                           TO OUTL.\n           IF OUTL > ZERO\n               MOVE NORM-UNPROT-ALPHA-FSET      TO OUTA\n               INSPECT OUTI REPLACING ALL LOW-VALUE BY '_'\n               INSPECT OUTI REPLACING ALL SPACE BY '_'\n               MOVE OUTI                        TO WS-OUT\n               INSPECT WS-OUT REPLACING ALL '_' BY SPACE\n               IF WS-OUT = SPACE\n                   MOVE NORM-UNPROT-ALPHA       TO OUTA.\n\n           PERFORM 1000-SUBROUTINE THRU\n                   1000-SUBROUTINE-EXIT.\n\n           IF WS-NBRDAY = ZERO\n               AND WS-FDATE = SPACE\n               AND WS-PDATE = SPACE\n               GO TO 1000-CONTINUE.\n\n           IF NBRDAYL > ZERO\n               IF WS-NBRDAY NOT NUMERIC\n                   MOVE BRT-UNPROT-ALPHA-FSET   TO NBRDAYA\n                   MOVE -1                      TO NBRDAYL\n                   MOVE 'Nbr of days must be numeric' TO STVMSGI\n               ELSE\n               IF WS-NBRDAY-N > 99599\n                   MOVE BRT-UNPROT-ALPHA-FSET   TO NBRDAYA\n                   MOVE -1                      TO NBRDAYL\n                   MOVE 'Nbr of days must be less than 99600'\n                                                TO STVMSGI.\n\n           IF FDATEL > ZERO\n               IF (WS-FDATE-7 NOT = SPACE)\n                   AND (WS-FDATE-7 NOT NUMERIC)\n                   MOVE BRT-UNPROT-ALPHA-FSET   TO FDATEA\n                   MOVE -1                      TO FDATEL\n                   MOVE 'Future date must be numeric' TO STVMSGI.\n\n           IF FDATEL > ZERO\n               IF WS-FDATE = SPACE\n                   GO TO 1000-EDIT-PDATE\n               ELSE\n               IF WS-FDATE-8 = SPACE\n                   GO TO 1000-EDIT-FDATE-7\n               ELSE\n                   CONTINUE\n           ELSE\n               GO TO 1000-EDIT-PDATE.\n\n           MOVE 'G'                             TO WS-F-TYPE-SW.\n           IF (WS-FDATE-G-MM > 12)\n               OR (WS-FDATE-G-MM = ZERO)\n               MOVE 'Invalid future date month' TO STVMSGI\n               MOVE BRT-UNPROT-ALPHA-FSET       TO FDATEA\n               MOVE -1                          TO FDATEL\n           ELSE\n           IF (WS-FDATE-G-DD > 31)\n               OR (WS-FDATE-G-DD = ZERO)\n               MOVE 'Invalid future date day'   TO STVMSGI\n               MOVE BRT-UNPROT-ALPHA-FSET       TO FDATEA\n               MOVE -1                          TO FDATEL\n           ELSE\n           IF (WS-FDATE-G-YYYY < 0001)\n               MOVE 'Invalid future date year'  TO STVMSGI\n               MOVE BRT-UNPROT-ALPHA-FSET       TO FDATEA\n               MOVE -1                          TO FDATEL.\n\n           GO TO 1000-EDIT-PDATE.\n\n       1000-EDIT-FDATE-7.\n           MOVE 'J'                             TO WS-F-TYPE-SW.\n           IF (WS-FDATE-J-DDD > 366)\n               OR (WS-FDATE-J-DDD = ZERO)\n               MOVE 'Invalid future date days'  TO STVMSGI\n               MOVE BRT-UNPROT-ALPHA-FSET       TO FDATEA\n               MOVE -1                          TO FDATEL\n           ELSE\n           IF (WS-FDATE-J-YYYY < 0001)\n               MOVE 'Invalid future date year'  TO STVMSGI\n               MOVE BRT-UNPROT-ALPHA-FSET       TO FDATEA\n               MOVE -1                          TO FDATEL\n           ELSE\n           IF WS-FDATE-J-DDD = 366\n               MOVE WS-FDATE-J-YYYY             TO WS-YYYY\n               DIVIDE WS-YYYY BY 4 GIVING WS-QUOTIENT\n                   REMAINDER WS-REMAINDER\n               IF WS-REMAINDER NOT = ZERO\n                   MOVE 'Future date year not a leap year'\n                                                TO STVMSGI\n                   MOVE BRT-UNPROT-ALPHA-FSET   TO FDATEA\n                   MOVE -1                      TO FDATEL\n               ELSE\n               IF WS-FDATE-YY = '00'\n                   DIVIDE WS-YYYY BY 400 GIVING WS-QUOTIENT\n                       REMAINDER WS-REMAIN2\n                   IF WS-REMAIN2 NOT = ZERO\n                       MOVE 'Future date year not a leap year'\n                                                TO STVMSGI\n                       MOVE BRT-UNPROT-ALPHA-FSET TO FDATEA\n                       MOVE -1                  TO FDATEL.\n\n       1000-EDIT-PDATE.\n           IF PDATEL > ZERO\n               IF (WS-PDATE-7 NOT = SPACE)\n                   AND (WS-PDATE-7 NOT NUMERIC)\n                   MOVE BRT-UNPROT-ALPHA-FSET   TO PDATEA\n                   MOVE -1                      TO PDATEL\n                   MOVE 'Past date must be numeric' TO STVMSGI.\n\n           IF PDATEL > ZERO\n               IF WS-PDATE = SPACE\n                   GO TO 1000-PREPARE-STV1420B\n               ELSE\n               IF WS-PDATE-8 = SPACE\n                   GO TO 1000-EDIT-PDATE-7\n               ELSE\n                   CONTINUE\n           ELSE\n               GO TO 1000-PREPARE-STV1420B.\n\n           IF (WS-PDATE-G-MM > 12)\n               OR (WS-PDATE-G-MM = ZERO)\n               MOVE 'Invalid past date month'   TO STVMSGI\n               MOVE BRT-UNPROT-ALPHA-FSET       TO PDATEA\n               MOVE -1                          TO PDATEL\n           ELSE\n           IF (WS-PDATE-G-DD > 31)\n               OR (WS-PDATE-G-DD = ZERO)\n               MOVE 'Invalid past date day'     TO STVMSGI\n               MOVE BRT-UNPROT-ALPHA-FSET       TO PDATEA\n               MOVE -1                          TO PDATEL\n           ELSE\n           IF (WS-PDATE-G-YYYY < 0001)\n               MOVE 'Invalid past date year'    TO STVMSGI\n               MOVE BRT-UNPROT-ALPHA-FSET       TO PDATEA\n               MOVE -1                          TO PDATEL.\n           IF WS-F-GREGORIAN\n               IF WS-FDATE-G-YYYY < WS-PDATE-G-YYYY\n                   CONTINUE\n               ELSE\n               IF WS-FDATE-G-YYYY = WS-PDATE-G-YYYY\n                   IF WS-FDATE-G-MM < WS-PDATE-G-MM\n                       CONTINUE\n                   ELSE\n                   IF WS-FDATE-G-MM = WS-PDATE-G-MM\n                       IF WS-FDATE-G-DD < WS-PDATE-G-DD\n                           CONTINUE\n                       ELSE\n                           GO TO 1000-PREPARE-STV1420B\n                   ELSE\n                       GO TO 1000-PREPARE-STV1420B\n               ELSE\n                   GO TO 1000-PREPARE-STV1420B\n           ELSE\n           IF WS-F-JULIAN\n               MOVE 'Please enter both dates in the same format'\n                                                TO STVMSGI\n               MOVE -1                          TO PDATEL FDATEL\n               MOVE BRT-UNPROT-ALPHA-FSET       TO PDATEA FDATEA\n               GO TO 1000-PREPARE-STV1420B\n           ELSE\n               GO TO 1000-PREPARE-STV1420B.\n\n           MOVE 'Future date must be greater or equal to past date'\n                                                TO STVMSGI.\n           MOVE -1                              TO PDATEL FDATEL.\n           MOVE BRT-UNPROT-ALPHA-FSET           TO PDATEA FDATEA.\n           GO TO 1000-PREPARE-STV1420B.\n\n       1000-EDIT-PDATE-7.\n           IF (WS-PDATE-J-DDD > 366)\n               OR (WS-PDATE-J-DDD = ZERO)\n               MOVE 'Invalid past date days'    TO STVMSGI\n               MOVE BRT-UNPROT-ALPHA-FSET       TO PDATEA\n               MOVE -1                          TO PDATEL\n           ELSE\n           IF (WS-PDATE-J-YYYY < 0001)\n               MOVE 'Invalid past date year'    TO STVMSGI\n               MOVE BRT-UNPROT-ALPHA-FSET       TO PDATEA\n               MOVE -1                          TO PDATEL\n           ELSE\n           IF WS-PDATE-J-DDD = 366\n               MOVE WS-PDATE-J-YYYY             TO WS-YYYY\n               DIVIDE WS-YYYY BY 4 GIVING WS-QUOTIENT\n                   REMAINDER WS-REMAINDER\n               IF WS-REMAINDER NOT = ZERO\n                   MOVE 'Past date year not a leap year'\n                                                TO STVMSGI\n               MOVE BRT-UNPROT-ALPHA-FSET       TO PDATEA\n               MOVE -1                          TO PDATEL.\n\n           IF WS-F-JULIAN\n               IF WS-FDATE-J-YYYY < WS-PDATE-J-YYYY\n                   CONTINUE\n               ELSE\n               IF WS-FDATE-J-YYYY = WS-PDATE-J-YYYY\n                   IF WS-FDATE-J-DDD < WS-PDATE-J-DDD\n                       CONTINUE\n                   ELSE\n                       GO TO 1000-PREPARE-STV1420B\n               ELSE\n                   GO TO 1000-PREPARE-STV1420B\n           ELSE\n           IF WS-F-GREGORIAN\n               MOVE 'Please enter both dates in the same format'\n                                                TO STVMSGI\n               MOVE -1                          TO PDATEL FDATEL\n               MOVE BRT-UNPROT-ALPHA-FSET       TO PDATEA FDATEA\n               GO TO 1000-PREPARE-STV1420B\n           ELSE\n               GO TO 1000-PREPARE-STV1420B.\n\n           MOVE 'Future date must be greater or equal to past date'\n                                                TO STVMSGI.\n           MOVE -1                              TO PDATEL FDATEL.\n           MOVE BRT-UNPROT-ALPHA-FSET           TO PDATEA FDATEA.\n           GO TO 1000-PREPARE-STV1420B.\n\n      ****************************************\n      *    STV1400B SUBROUTINE\n      ****************************************\n       1000-SUBROUTINE.\n           IF DATA2L = ZERO\n               AND INL = ZERO\n               AND OUTL = ZERO\n               IF DATA1L = ZERO\n                   OR WS-DATA1 = SPACE\n                   GO TO 1000-SUBROUTINE-EXIT.\n           MOVE WS-DATA1                      TO STV1400B-DATA.\n           MOVE WS-DATA2                      TO STV1400B-DATA2.\n           MOVE WS-IN                         TO STV1400B-IN.\n           MOVE WS-OUT                        TO STV1400B-OUT.\n           CALL 'STV1400B' USING DFHEIBLK DFHCOMMAREA\n                                 WS-STV1400B-FIELDS.\n           MOVE STV1400B-DATA                 TO DATA1I.\n           MOVE STV1400B-DATA2                TO DATA2I.\n           MOVE STV1400B-IN                   TO INI.\n           MOVE STV1400B-OUT                  TO OUTI.\n           INSPECT DATA1I REPLACING ALL SPACE BY '_'.\n           INSPECT DATA2I REPLACING ALL SPACE BY '_'.\n           INSPECT INI REPLACING ALL SPACE BY '_'.\n           INSPECT OUTI REPLACING ALL SPACE BY '_'.\n           IF DATA1I NOT = '__________'\n               MOVE NORM-UNPROT-ALPHA-FSET    TO DATA1A.\n           IF DATA2I NOT = '__________'\n               MOVE NORM-UNPROT-ALPHA-FSET    TO DATA2A.\n           IF INI NOT = '______'\n               MOVE NORM-UNPROT-ALPHA-FSET    TO INA.\n           IF OUTI NOT = '______'\n               MOVE NORM-UNPROT-ALPHA-FSET    TO OUTA.\n\n       1000-SUBROUTINE-EXIT. EXIT.\n\n      ****************************************\n      *    FIND NBR OF DAYS OR PAST OR FUTURE DATE\n      ****************************************\n       1000-PREPARE-STV1420B.\n           IF NBRDAYL = -1\n               OR PDATEL = -1\n               OR FDATEL = -1\n               GO TO 1000-CONTINUE.\n           IF WS-PDATE = SPACE\n               AND WS-FDATE = SPACE\n               GO TO 1000-CONTINUE.\n\n           MOVE WS-NBRDAY                       TO STV1420B-DAYS.\n           MOVE WS-FDATE                        TO STV1420B-FUTURE.\n           MOVE WS-PDATE                        TO STV1420B-PAST.\n           CALL 'STV1420B' USING DFHEIBLK DFHCOMMAREA\n                                 WS-STV1420B-FIELDS.\n      *          STV1420B IS A COBOL II ONLINE VERSION OF STV0420B\n           IF STV1420B-DAYS = '*****'\n               MOVE 'Error in calculation process - please verify data'\n                                                TO STVMSGI\n               MOVE -1                          TO PDATEL\n               MOVE BRT-UNPROT-ALPHA-FSET       TO PDATEA FDATEA NBRDAY\n               GO TO 1000-CONTINUE\n           ELSE\n               MOVE STV1420B-PAST               TO PDATEI\n               MOVE STV1420B-FUTURE             TO FDATEI\n               MOVE STV1420B-DAYS               TO NBRDAYI\n               MOVE NORM-UNPROT-ALPHA-FSET      TO PDATEA FDATEA NBRDAY\n               INSPECT PDATEI    REPLACING ALL SPACE BY '_'\n               INSPECT FDATEI    REPLACING ALL SPACE BY '_'\n               INSPECT PDATEI    REPLACING ALL LOW-VALUE BY '_'\n               INSPECT FDATEI    REPLACING ALL LOW-VALUE BY '_'\n               INSPECT NBRDAYI REPLACING LEADING '0' BY '_'\n               IF NBRDAYI = '_____'\n                   MOVE '____0'                 TO NBRDAYI.\n\n       1000-CONTINUE.\n           IF INDATEF = CC-EOF-KEY\n               MOVE 1                           TO INDATEL.\n           IF INDATEL > 0\n               MOVE NORM-UNPROT-ALPHA-FSET      TO INDATEA\n               INSPECT INDATEI REPLACING ALL LOW-VALUE BY '_'\n               INSPECT INDATEI REPLACING ALL SPACE BY '_'.\n\n           IF INDATEI = '________'\n               OR INDATEL = 0\n                   MOVE DRK-ASKIP-ASKIP         TO SIGNA ANSWERA DAYA\n                   GO TO 9200-SEND-MAP-DATAONLY.\n           MOVE INDATEI                         TO WS-INPUT-DATE.\n           INSPECT WS-INPUT-DATE REPLACING ALL '_' BY SPACE.\n           GO TO 2500-WHICH-CONVERSION.\n\n      ****************************************\n      *    RIGHT JUSTIFY THE ALPHANUMERIC FIELD NBRDAYI\n      ****************************************\n       1000-JUSTIFY-NBR.\n           MOVE NBRDAYI                         TO WS-NBR-TABLE.\n           MOVE 5                               TO WS-SUB WS-SUB2.\n           PERFORM 1000-JUSTIFY\n               UNTIL WS-SUB < 1.\n           MOVE WS-NBR-TABLE                    TO NBRDAYI.\n\n       1000-JUSTIFY.\n           IF WS-NBR(WS-SUB) NUMERIC\n               IF WS-SUB = WS-SUB2\n                   SUBTRACT 1 FROM WS-SUB WS-SUB2\n               ELSE\n                   MOVE WS-NBR(WS-SUB)          TO WS-NBR(WS-SUB2)\n                   SUBTRACT 1  FROM WS-SUB2\n                   MOVE '_'                     TO WS-NBR(WS-SUB)\n           ELSE\n               SUBTRACT 1  FROM WS-SUB.\n\n       2500-WHICH-CONVERSION.\n           IF WS-IN-EXTRA = SPACE\n               GO TO 4000-EDIT-CK-JULIAN\n           ELSE IF WS-IN-DD-X = SPACE\n               GO TO 3000-EDIT-CK-GREG\n           ELSE IF WS-IN-FILLER = SPACE\n               GO TO 4000-EDIT-CK-JULIAN\n           ELSE\n               GO TO 3000-EDIT-CK-GREG.\n\n      ******************************************************************\n      ** EDIT CHECK THE INPUTED GREGORIAN DATE.  RETURN AN ERROR      **\n      ** MESSAGE IF IT IS OUT OF RANGE, ELSE CONVERT TO JULIAN.       **\n      ******************************************************************\n       3000-EDIT-CK-GREG.\n           IF WS-IN-CY NUMERIC\n               AND WS-IN-MM NUMERIC\n               AND WS-IN-DD-X = SPACE\n               MOVE SPACE                      TO WS-STV1400B-FIELDS\n               MOVE WS-INPUT-DATE(1: 6)        TO STV1400B-DATA(1: 6)\n               MOVE 'YMD   '                   TO STV1400B-IN\n               MOVE 'CYMD  '                   TO STV1400B-OUT\n               CALL 'STV1400B' USING DFHEIBLK DFHCOMMAREA\n                                     WS-STV1400B-FIELDS\n               IF STV1400B-ERROR = 'ERROR'\n                   MOVE 'Date not valid - please reenter' TO STVMSGO\n                   GO TO 8500-FAILED-EDIT\n               ELSE\n                   MOVE STV1400B-CYMD          TO WS-INPUT-DATE.\n           IF WS-INPUT-DATE NOT NUMERIC\n               MOVE 'Date must be numeric'     TO STVMSGO\n               GO TO 8500-FAILED-EDIT.\n           IF WS-IN-MM < 1\n               OR WS-IN-MM > 12\n               MOVE 'Month must be in the range of 1 to 12' TO STVMSGO\n               GO TO 8500-FAILED-EDIT.\n           IF WS-IN-DD > 31\n               MOVE 'Invalid day found - please reenter' TO STVMSGO\n               GO TO 8500-FAILED-EDIT.\n\n      *\n      * PASSED EDIT-CONVERT THE GREGORIAN DATE TO JULIAN CYDDD FORMAT **\n      *\n           MOVE SPACE                          TO WS-STV1400B-FIELDS.\n           MOVE WS-INPUT-DATE                  TO STV1400B-CYMD.\n           MOVE 'CYMD  '                       TO STV1400B-IN.\n           MOVE 'CYDDD '                       TO STV1400B-OUT.\n           CALL 'STV1400B' USING DFHEIBLK DFHCOMMAREA\n                                          WS-STV1400B-FIELDS.\n           IF STV1400B-ERROR = 'ERROR'\n               MOVE 'Gregorian to julian conversion error'\n                                               TO STVMSGO\n               GO TO 8500-FAILED-EDIT\n           ELSE\n               MOVE STV1400B-DATA              TO WS-OUTPUT-DATE.\n           MOVE SPACE                          TO WS-STV1400B-FIELDS.\n           MOVE WS-INPUT-DATE                  TO STV1400B-DATA.\n           MOVE 'CYMD  '                       TO STV1400B-IN.\n           MOVE 'DAY   '                       TO STV1400B-OUT.\n           CALL 'STV1400B' USING DFHEIBLK DFHCOMMAREA\n                                          WS-STV1400B-FIELDS.\n           IF STV1400B-ERROR = 'ERROR'\n               MOVE 'Day determination error' TO STVMSGO\n               GO TO 8500-FAILED-EDIT\n           ELSE\n               MOVE STV1400B-DAY               TO DAYI.\n\n           GO TO 9100-SEND-ONLINE-DATE.\n      *\n      ******************************************************************\n      ** EDIT CHECK THE INPUTED JULIAN DATE.  RETURN AN ERROR MESSAGE **\n      ** IF IT IS OUT OF RANGE, ELSE CONVERT TO GREGORIAN.            **\n      ******************************************************************\n       4000-EDIT-CK-JULIAN.\n           IF WS-IN-CC NUMERIC\n               AND WS-IN-DDD2 NUMERIC\n               AND WS-IN-EXTRA = SPACE\n               MOVE SPACE                      TO WS-STV1400B-FIELDS\n               MOVE WS-IN-JUL-DATE(1: 5)       TO STV1400B-DATA(1: 5)\n               MOVE 'YDDD  '                   TO STV1400B-IN\n               MOVE 'CYDDD '                   TO STV1400B-OUT\n               CALL 'STV1400B' USING DFHEIBLK DFHCOMMAREA\n                                     WS-STV1400B-FIELDS\n               IF STV1400B-ERROR = 'ERROR'\n                   MOVE 'Date not valid - please reenter' TO STVMSGO\n                   GO TO 8500-FAILED-EDIT\n               ELSE\n                   MOVE STV1400B-DATA(1: 7)    TO WS-IN-JUL-DATE.\n           IF WS-IN-JUL-DATE NOT NUMERIC\n               MOVE 'Date not numeric - please reenter' TO STVMSGO\n               GO TO 8500-FAILED-EDIT.\n           IF WS-IN-DDD < 1\n               MOVE 'Day must be greater than zero - please reenter'\n                                               TO STVMSGO\n               GO TO 8500-FAILED-EDIT.\n           DIVIDE WS-IN-YY                     BY 4\n               GIVING WS-LEAP-YR               REMAINDER WS-LEAP-REMAIN.\n           DIVIDE WS-IN-CY                     BY 400\n               GIVING WS-LEAP-YR               REMAINDER WS-REMAIN2.\n           IF  WS-LEAP-REMAIN EQUAL ZERO\n               MOVE 'Y'                        TO LEAP-YR-SWITCH\n               IF WS-IN-YY = ZERO\n                  IF WS-REMAIN2 NOT = ZERO\n                      MOVE 'N'                 TO LEAP-YR-SWITCH.\n           IF LEAP-YR\n               IF WS-IN-DDD > 366\n                   MOVE 'Day must be less than 367 - please reenter'\n                                              TO STVMSGO\n                   GO TO 8500-FAILED-EDIT.\n           IF NOT-LEAP-YR\n               IF WS-IN-DDD > 365\n                   MOVE 'Day must be less than 366 - please reenter'\n                                               TO STVMSGO\n                   GO TO 8500-FAILED-EDIT.\n\n      *\n      *  CONVERT JULIAN DATE TO GREGORIAN CYMD FORMAT *\n      *\n           MOVE SPACE                          TO WS-STV1400B-FIELDS.\n           MOVE WS-IN-JUL-DATE                 TO STV1400B-DATA.\n           MOVE 'CYDDD '                       TO STV1400B-IN.\n           MOVE 'CYMD  '                       TO STV1400B-OUT.\n           CALL 'STV1400B' USING DFHEIBLK DFHCOMMAREA\n                                          WS-STV1400B-FIELDS.\n           IF STV1400B-ERROR = 'ERROR'\n               MOVE 'Julian to gregorian conversion error' TO STVMSGO\n               GO TO 8500-FAILED-EDIT\n           ELSE\n               MOVE STV1400B-DATA              TO WS-OUTPUT-DATE.\n           MOVE SPACE                          TO WS-STV1400B-FIELDS.\n           MOVE WS-IN-JUL-DATE                 TO STV1400B-DATA.\n           MOVE 'CYDDD '                       TO STV1400B-IN.\n           MOVE 'DAY   '                       TO STV1400B-OUT.\n           CALL 'STV1400B' USING DFHEIBLK DFHCOMMAREA\n                                          WS-STV1400B-FIELDS.\n           IF STV1400B-ERROR = 'ERROR'\n               MOVE 'Day determination error'  TO STVMSGO\n               GO TO 8500-FAILED-EDIT\n           ELSE\n               MOVE STV1400B-DAY               TO DAYI.\n\n           GO TO 9100-SEND-ONLINE-DATE.\n\n      *\n      ******************************************************************\n      ** SEND INITIAL SCREEN TO USER TERMINAL AFTER OBTAINING USER ID **\n      ** AND CURRENT DATE AND TIME.                                   **\n      ******************************************************************\n       7000-INITIAL-MAP-SEND.\n           IF WS-RETURN-SW = 'Y'\n               MOVE DFHCLEAR                  TO WS-EIBAID\n               GO TO 0000-CHECK-EIBCALEN.\n           MOVE LOW-VALUE                     TO STV115AI.\n           MOVE 'Y'                           TO WS-RETURN-SW.\n           EXEC CICS ASSIGN\n               USERID (USERIDO)\n           END-EXEC.\n           EXEC CICS ASKTIME\n                     ABSTIME (WS-ABSOLUTE-TIME)\n           END-EXEC.\n           EXEC CICS FORMATTIME ABSTIME(WS-ABSOLUTE-TIME)\n                     DATESEP('/')\n                     MMDDYY (DATEO)\n                     TIMESEP(':')\n                     TIME (TIMEO)\n           END-EXEC.\n           GO TO 9000-SEND-INITIAL-MAP.\n\n      ******************\n      * ERROR MESSAGES *\n      ******************\n       8000-COMMAREA-ERROR.\n           MOVE 'Unable to complete transaction conv due to commarea er\n      -    'ror'                               TO WS-OUT-MESSAGE.\n           GO TO 9300-SEND-TEXT-MESSAGE.\n\n       8100-ANYKEY-ERROR.\n           MOVE 'Invalid key'                  TO STVMSGO.\n           GO TO 9200-SEND-MAP-DATAONLY.\n\n       8300-MAPFAIL.\n           MOVE 'Unable to complete transaction conv due to a map error'\n                                               TO WS-OUT-MESSAGE.\n           GO TO 9300-SEND-TEXT-MESSAGE.\n      *\n       8500-FAILED-EDIT.\n           MOVE -1                             TO INDATEL.\n           MOVE BRT-UNPROT-ALPHA-FSET          TO INDATEA.\n           MOVE DRK-ASKIP-ASKIP                TO SIGNA ANSWERA DAYA.\n           GO TO 9200-SEND-MAP-DATAONLY.\n      *\n      ******************\n      * RETURN TO CICS *\n      ******************\n       9000-SEND-INITIAL-MAP.\n          EXEC CICS SEND\n                    MAP ('STV115A')\n                    MAPSET ('STV115M')\n                    ERASE\n                    END-EXEC\n          EXEC CICS RETURN\n                    TRANSID ('CONV')\n                    COMMAREA (WS-COMMAREA)\n                    LENGTH (10)\n                    END-EXEC.\n      *\n       9100-SEND-ONLINE-DATE.\n           MOVE WS-OUTPUT-DATE                 TO ANSWERO.\n           MOVE NORM-ASKIP-ASKIP               TO SIGNA ANSWERA DAYA.\n           MOVE NORM-UNPROT-ALPHA-FSET         TO INDATEA.\n\n       9200-SEND-MAP-DATAONLY.\n           IF INDATEL = -1\n               OR NBRDAYL = -1\n               OR FDATEL = -1\n               OR PDATEL = -1\n               CONTINUE\n           ELSE\n               MOVE -1 TO INDATEL.\n           CALL 'STV0270B' USING DFHEIBLK DFHCOMMAREA STVMSGI.\n           EXEC CICS SEND\n                     MAP ('STV115A')\n                     MAPSET ('STV115M')\n                     DATAONLY\n                     CURSOR\n                     END-EXEC.\n           EXEC CICS RETURN\n                     TRANSID ('CONV')\n                     COMMAREA (WS-COMMAREA)\n                     LENGTH (10)\n                     END-EXEC.\n      *\n       9300-SEND-TEXT-MESSAGE.\n           EXEC CICS SEND TEXT\n                     FROM(WS-OUT-MESSAGE)\n                     LENGTH(70)\n                     ERASE\n                     END-EXEC.\n      *\n       9400-XCTL-STV0110C.\n           EXEC CICS XCTL\n               PROGRAM ('STV0110C')\n           END-EXEC.\n\n      ****************************************\n      *    IF PF1 ENTERED, XCTL TO THE HELP WINDOW\n      ****************************************\n       9400-XCTL-WIN0140C.\n           EXEC CICS HANDLE CONDITION\n               NOSPACE (9400-NOSPACE)\n               INVREQ (9400-INVREQ)\n           END-EXEC.\n      *    help window logic removed\n\n       9400-NOSPACE.\n           MOVE 'Unable to show help screen - no space on ts queue'\n                                              TO STVMSGI.\n           GO TO 9200-SEND-MAP-DATAONLY.\n\n       9400-INVREQ.\n           MOVE 'Unable to show help screen - invreq on ts queue'\n                                              TO STVMSGI.\n           GO TO 9200-SEND-MAP-DATAONLY.\n\n      ******************************************************************\n      **              E N D   O F   S T V 0 1 1 5 C                   **\n      ******************************************************************\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV0150B": {"ttr": 17670, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00$\\x01\\x192/\\x01\\x192?\\x111\\x00n\\x00z\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2019-11-18T00:00:00", "modifydate": "2019-11-19T11:31:24", "lines": 110, "newlines": 122, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  STV0150B: center a 79 byte message '.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    STV0150B.\n       AUTHOR.        Jim Iannone.\n      **********************************************************CX003B\n      *@@@ C3 center a 79 byte message\n      ****************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * Program-ID  : STV0150B\n      * Project #   : 900758\n      * Date written: 08/10/90\n      * Programmer  : Jim Iannone\n      *               This program centers a 79 byte field. The field\n      *               may be sent from either a batch or online\n      *               program. The field should be sent left justified.\n      *               The newly centered field will be returned in the\n      *               same field which is sent.\n      *               The message field in working-storage of the\n      *               calling program should be defined as pic X(79).\n      ****************************************************************\n\n       ENVIRONMENT DIVISION.\n       DATA DIVISION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' WORKING-STORAGE STV0150B start '.\n\n       01  WS-CENTER-MESSAGE.\n           05  WS-C-SUB1               PIC S99       VALUE ZERO.\n           05  WS-C-SUB2               PIC S99       VALUE ZERO.\n           05  WS-C-MSG-TABLE                        VALUE SPACE.\n               10  WS-C-MSG            PIC  X\n                                       OCCURS 79 TIMES.\n           05  FILLER REDEFINES WS-C-MSG-TABLE.\n               10  WS-C-STVMSG         PIC  X(06).\n               10  FILLER              PIC  X(73).\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  END STV0150B  '.\n\n       LINKAGE SECTION.\n\n       01  LS-MESSAGE.\n           05  FILLER                  PIC  X(79).\n\n       PROCEDURE DIVISION USING LS-MESSAGE.\n\n       0000-START-PROCESS.\n\n           IF LS-MESSAGE = SPACE OR LOW-VALUE\n               GO TO 0400-END-PROCESSING.\n\n           MOVE LS-MESSAGE                    TO WS-C-MSG-TABLE.\n\n      *---------------------------------------\n      *    change program to recognize passed strings and replace\n      *    with a longer string.  do not center here -\n      *    0100-CENTER-MESSAGE will do that.\n      *---------------------------------------\n           EVALUATE WS-C-STVMSG\n               WHEN 'IPSU'\n               MOVE 'INFORMATION AND PROCESS SERVICES'\n                                              TO WS-C-MSG-TABLE\n               WHEN 'IPSL'\n               MOVE 'Information and Process Services'\n                                              TO WS-C-MSG-TABLE\n               WHEN 'YIU'\n               MOVE 'YOUR INSTITUTION NAME'\n                                              TO WS-C-MSG-TABLE\n               WHEN 'YIL'\n               MOVE 'Your Institution Name'\n                                              TO WS-C-MSG-TABLE\n           END-EVALUATE.\n           PERFORM 0100-CENTER-MESSAGE.\n           MOVE WS-C-MSG-TABLE                TO LS-MESSAGE.\n           GO TO 0400-END-PROCESSING.\n\n       0100-CENTER-MESSAGE.\n           MOVE 79                            TO WS-C-SUB1.\n           PERFORM 0200-CENTER-MESSAGE-2\n               UNTIL (WS-C-MSG (WS-C-SUB1) NOT = SPACE)\n                   OR WS-C-SUB1 < 1.\n           IF (WS-C-SUB1 > ZERO)\n               AND (WS-C-SUB1 < 77)\n               COMPUTE WS-C-SUB2 ROUNDED = 79 - ((79 - WS-C-SUB1) / 2)\n               SUBTRACT 1                     FROM WS-C-SUB2\n               PERFORM 0300-CENTER-MESSAGE-3\n                   UNTIL WS-C-SUB1 < 1.\n\n       0200-CENTER-MESSAGE-2.\n           SUBTRACT 1                         FROM WS-C-SUB1.\n\n       0300-CENTER-MESSAGE-3.\n           MOVE WS-C-MSG (WS-C-SUB1)          TO WS-C-MSG (WS-C-SUB2).\n           MOVE SPACE                         TO WS-C-MSG (WS-C-SUB1).\n           SUBTRACT 1                         FROM WS-C-SUB1 WS-C-SUB2.\n\n       0400-END-PROCESSING.\n           GOBACK.\n\n      ************************************ END STV0150B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV0270B": {"ttr": 17673, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x08\\x01\\x192/\\x01\\x192?\\x111\\x00l\\x00\\xcd\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2019-11-18T00:00:00", "modifydate": "2019-11-19T11:31:08", "lines": 108, "newlines": 205, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  STV0270B: center a 40 byte message '.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    STV0270B.\n       AUTHOR.        Jim Iannone.\n      **********************************************************CX003B\n      *@@@ C3 center a 40 byte message\n      ****************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * Program-ID  : STV0270B\n      * Project #   : 900758\n      * Date written: 08/10/90\n      * Programmer  : Jim Iannone\n      *               This program centers a 79 byte field. The field\n      *               may be sent from either a batch or online\n      *               program. The field should be sent left justified.\n      *               The newly centered field will be returned in the\n      *               same field which is sent.\n      *               The message field in working-storage of the\n      *               calling program should be defined as pic X(79).\n      ****************************************************************\n\n       ENVIRONMENT DIVISION.\n       DATA DIVISION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' WORKING-STORAGE STV0270B start '.\n\n       01  WS-CENTER-MESSAGE.\n           05  WS-C-SUB1               PIC S99       VALUE ZERO.\n           05  WS-C-SUB2               PIC S99       VALUE ZERO.\n           05  WS-C-MSG-TABLE                        VALUE SPACE.\n               10  WS-C-MSG            PIC  X\n                                       OCCURS 40 TIMES.\n           05  FILLER REDEFINES WS-C-MSG-TABLE.\n               10  WS-C-STVMSG         PIC  X(06).\n               10  FILLER              PIC  X(34).\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  END STV0270B  '.\n\n       LINKAGE SECTION.\n\n       01  LS-MESSAGE.\n           05  FILLER                  PIC  X(40).\n\n       PROCEDURE DIVISION USING LS-MESSAGE.\n\n       0000-START-PROCESS.\n           IF LS-MESSAGE = SPACE OR LOW-VALUE\n               GO TO 0400-END-PROCESSING.\n           MOVE LS-MESSAGE                    TO WS-C-MSG-TABLE.\n\n      *---------------------------------------\n      *    change program to recognize passed strings and replace\n      *    with a longer string.  do not center here -\n      *    0100-CENTER-MESSAGE will do that.\n      *---------------------------------------\n           EVALUATE WS-C-STVMSG\n               WHEN 'IPSU'\n               MOVE 'INFORMATION AND PROCESS SERVICES'\n                                              TO WS-C-MSG-TABLE\n               WHEN 'IPSL'\n               MOVE 'Information and Process Services'\n                                              TO WS-C-MSG-TABLE\n               WHEN 'YIU'\n               MOVE 'YOUR INSTITUTION NAME'\n                                              TO WS-C-MSG-TABLE\n               WHEN 'YIL'\n               MOVE 'Your Institution Name'\n                                              TO WS-C-MSG-TABLE\n           END-EVALUATE.\n           PERFORM 0100-CENTER-MESSAGE.\n           MOVE WS-C-MSG-TABLE                TO LS-MESSAGE.\n           GO TO 0400-END-PROCESSING.\n\n       0100-CENTER-MESSAGE.\n           MOVE 40                            TO WS-C-SUB1.\n           PERFORM 0200-CENTER-MESSAGE-2\n               UNTIL (WS-C-MSG (WS-C-SUB1) NOT = SPACE)\n               OR    WS-C-SUB1 < 1.\n           IF (WS-C-SUB1 > ZERO)\n               AND (WS-C-SUB1 < 38)\n               COMPUTE WS-C-SUB2 ROUNDED = 40 - ((40 - WS-C-SUB1) / 2)\n               SUBTRACT 1                     FROM WS-C-SUB2\n               PERFORM 0300-CENTER-MESSAGE-3\n                   UNTIL WS-C-SUB1 < 1.\n\n       0200-CENTER-MESSAGE-2.\n           SUBTRACT 1                         FROM WS-C-SUB1.\n\n       0300-CENTER-MESSAGE-3.\n           MOVE WS-C-MSG (WS-C-SUB1)          TO WS-C-MSG (WS-C-SUB2).\n           MOVE SPACE                         TO WS-C-MSG (WS-C-SUB1).\n           SUBTRACT 1                         FROM WS-C-SUB1 WS-C-SUB2.\n\n       0400-END-PROCESSING.\n           GOBACK.\n\n      ************************************ END STV0270B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV0280B": {"ttr": 17676, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x04\\x01\\x19\\x01_\\x01\\x192?\\x11\\x00\\x00\\xc5\\rw\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2019-01-15T00:00:00", "modifydate": "2019-11-19T11:00:04", "lines": 197, "newlines": 3447, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  STV0280B: patient age calculation '.\n       IDENTIFICATION DIVISION.                                         STV0280B\n       PROGRAM-ID.    STV0280B.                                         STV0280B\n       AUTHOR.        TOM RICHARDSON.                                   STV0280B\n      ******************************************************************STV0280B\n      *@@@ C3 calculate patients age                                    stv0280b\n      ******************************************************************stv0280b\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * Program-ID  : STV0280B                                          stv0280b\n      * Project #   : 901031                                            stv0280b\n      * Date written: 11/19/90                                          stv0280b\n      * Programmer  : Tom Richardson                                    stv0280b\n      *\n      *               This call program calculates a patient's age when stv0280b\n      *               supplied with a birthdate in CCYYMMDD format.     stv0280b\n      *               An optional AS-OF date (also in CCYYMMDD format)  stv0280b\n      *               may be supplied and used in calculating age.  If  stv0280b\n      *               AS-OF date is omitted (zeroes, spaces, or low-val-stv0280b\n      *               ues), current date is used for calculating age.   stv0280b\n      *               If birthdate is greater than AS-OF date supplied, stv0280b\n      *               if date fields supplied not numeric, if month     stv0280b\n      *               fields supplied not between 1-12, if day fields   stv0280b\n      *               supplied invalid for month requested, or date of  stv0280b\n      *               birth supplied greater than as of date supplied   stv0280b\n      *               (or current date if no as of date supplied),      stv0280b\n      *               asterisks will be returned.  Otherwise, age       stv0280b\n      *               specifying years, months, and days is returned to stv0280b\n      *               calling program (7 positions - 3=years, 2=months, stv0280b\n      *               and 2=days respectively).                         stv0280b\n      *\n      ******************************************************************stv0280b\n      * Project #   : 910730\n      * Date changed: 07/24/91\n      * Programmer  : Jim Iannone\n      *               remove current-date: user must supply as-of-date.\n      ******************************************************************\n      * Project #   : 920999\n      * Date changed: 01/18/93\n      * Programmer  : P E Bonfiglio\n      *               recompiled using Cobol II because Cobol II does\n      *               not allow calls to VS Cobol programs.\n      ******************************************************************\n      * Date changed: 04/07/2006\n      * Programmer  : Jim Iannone\n      *               compile with Cobol 3 with DYNAM option\n      ******************************************************************\n                                                                        STV0280B\n       ENVIRONMENT DIVISION.                                            STV0280B\n       DATA DIVISION.                                                   STV0280B\n                                                                        STV0280B\n       WORKING-STORAGE SECTION.                                         STV0280B\n                                                                        STV0280B\n       01  WS-START.                                                    STV0280B\n           05  FILLER                  PIC  X(32) VALUE                 STV0280B\n               ' WORKING-STORAGE STV0280B START '.                      STV0280B\n                                                                        STV0280B\n       01  WS-CALCULATE-AGE-WORK-AREAS.                                 STV0280B\n           05  WS-LEAP                 PIC S9(3)  VALUE ZERO.           STV0280B\n           05  WS-LEAP-REMAIN          PIC S9(2)  VALUE ZERO.           STV0280B\n           05  WS-LEAP-REMAIN2         PIC S9(4)  VALUE ZERO.           STV0280B\n           05  WS-LEAP-YYYY            PIC 9(04).                       STV0280B\n           05  FILLER REDEFINES WS-LEAP-YYYY.                           STV0280B\n               10  FILLER              PIC 99.                          STV0280B\n               10  WS-LEAP-YY          PIC 99.                          STV0280B\n           05  WS-PREV-MM              PIC 9(02)  VALUE 12.             STV0280B\n           05  WS-AGE.                                                  STV0280B\n               10  WS-YEARS            PIC S9(03).                      STV0280B\n               10  WS-MONTHS           PIC S9(02).                      STV0280B\n               10  WS-DAYS             PIC S9(02).                      STV0280B\n           05  WS-REFORMAT-DOB.                                         STV0280B\n               10  WS-RDOB-YYYY        PIC 9(04).                       STV0280B\n               10  WS-RDOB-MM          PIC 9(02).                       STV0280B\n               10  WS-RDOB-DD          PIC 9(02).                       STV0280B\n           05  WS-REFORMAT-AS-OF.                                       STV0280B\n               10  WS-RAO-YYYY         PIC 9(04).                       STV0280B\n               10  WS-RAO-MM           PIC 9(02).                       STV0280B\n               10  WS-RAO-DD           PIC 9(02).                       STV0280B\n           05  WS-CAL-DAYS-VALUES.                                      STV0280B\n               10  FILLER              PIC X(24)  VALUE                 STV0280B\n                                          '312831303130313130313031'.   STV0280B\n           05  FILLER REDEFINES WS-CAL-DAYS-VALUES.                     STV0280B\n               10  CAL-DAYS-ARRAY      OCCURS 12 TIMES.                 STV0280B\n                   15 CAL-DAYS         PIC 9(02).                       STV0280B\n                                                                        STV0280B\n       01  WS-END.                                                      STV0280B\n           05  FILLER                  PIC  X(16)    VALUE              STV0280B\n               '  END STV0280B  '.                                      STV0280B\n                                                                        STV0280B\n       LINKAGE SECTION.                                                 STV0280B\n                                                                        STV0280B\n       01  LS-DATES-PASSED.                                             STV0280B\n           05  LS-DATE-OF-BIRTH.                                        STV0280B\n               10  LS-DOB-YYYY         PIC  X(04).                      STV0280B\n               10  LS-DOB-MM           PIC  X(02).                      STV0280B\n               10  LS-DOB-DD           PIC  X(02).                      STV0280B\n           05  LS-AS-OF-DATE.                                           STV0280B\n               10  LS-AOD-YYYY         PIC  X(04).                      STV0280B\n               10  LS-AOD-MM           PIC  X(02).                      STV0280B\n               10  LS-AOD-DD           PIC  X(02).                      STV0280B\n           05  LS-AGE.                                                  STV0280B\n               10  LS-YEARS            PIC  X(03).                      STV0280B\n               10  LS-MONTHS           PIC  X(02).                      STV0280B\n               10  LS-DAYS             PIC  X(02).                      STV0280B\n                                                                        STV0280B\n       PROCEDURE DIVISION USING LS-DATES-PASSED.                        STV0280B\n                                                                        STV0280B\n       1000-START-PROCESS.                                              STV0280B\n           MOVE LS-DOB-YYYY            TO WS-RDOB-YYYY.                 STV0280B\n           MOVE LS-DOB-MM              TO WS-RDOB-MM.                   STV0280B\n           MOVE LS-DOB-DD              TO WS-RDOB-DD.                   STV0280B\n           MOVE LS-AOD-YYYY            TO WS-RAO-YYYY.                  STV0280B\n           MOVE LS-AOD-MM              TO WS-RAO-MM.                    STV0280B\n           MOVE LS-AOD-DD              TO WS-RAO-DD.                    STV0280B\n           MOVE ZEROES                 TO WS-AGE.                       STV0280B\n           PERFORM 2000-EDIT-DATES THRU                                 STV0280B\n                   2000-EDIT-DATES-EXIT.                                STV0280B\n           PERFORM 3000-CALCULATE-AGE THRU                              STV0280B\n                   3000-CALCULATE-AGE-EXIT.                             STV0280B\n           MOVE WS-YEARS               TO LS-YEARS.                     STV0280B\n           MOVE WS-MONTHS              TO LS-MONTHS.                    STV0280B\n           MOVE WS-DAYS                TO LS-DAYS.                      STV0280B\n           GOBACK.                                                      STV0280B\n                                                                        STV0280B\n       2000-EDIT-DATES.                                                 STV0280B\n           IF LS-DATE-OF-BIRTH NOT NUMERIC                              STV0280B\n               GO TO 9000-DATE-ERROR.                                   STV0280B\n           IF LS-AS-OF-DATE NOT NUMERIC                                 STV0280B\n               GO TO 9000-DATE-ERROR.                                   STV0280B\n           IF WS-RDOB-MM < 01 OR > 12                                   STV0280B\n               GO TO 9000-DATE-ERROR.                                   STV0280B\n           IF WS-RAO-MM < 01 OR > 12                                    STV0280B\n               GO TO 9000-DATE-ERROR.                                   STV0280B\n           MOVE WS-RDOB-YYYY           TO WS-LEAP-YYYY.                 STV0280B\n           PERFORM 2100-DETERMINE-LEAP-YEAR THRU                        STV0280B\n                   2100-DETERMINE-LEAP-YEAR-EXIT.                       STV0280B\n           IF WS-RDOB-DD < 1 OR > CAL-DAYS(WS-RDOB-MM)                  STV0280B\n               GO TO 9000-DATE-ERROR.                                   STV0280B\n           MOVE WS-RAO-YYYY            TO WS-LEAP-YYYY.                 STV0280B\n           PERFORM 2100-DETERMINE-LEAP-YEAR THRU                        STV0280B\n                   2100-DETERMINE-LEAP-YEAR-EXIT.                       STV0280B\n           IF WS-RAO-DD < 1 OR > CAL-DAYS(WS-RAO-MM)                    STV0280B\n               GO TO 9000-DATE-ERROR.                                   STV0280B\n           IF WS-REFORMAT-DOB > WS-REFORMAT-AS-OF                       STV0280B\n               GO TO 9000-DATE-ERROR.                                   STV0280B\n                                                                        STV0280B\n       2000-EDIT-DATES-EXIT.                                            STV0280B\n           EXIT.                                                        STV0280B\n                                                                        STV0280B\n       2100-DETERMINE-LEAP-YEAR.                                        STV0280B\n           MOVE 28                     TO CAL-DAYS(2).                  STV0280B\n           DIVIDE WS-LEAP-YYYY         BY 4                             STV0280B\n               GIVING WS-LEAP          REMAINDER WS-LEAP-REMAIN.        STV0280B\n           IF WS-LEAP-REMAIN EQUAL ZERO                                 STV0280B\n               MOVE 29                 TO CAL-DAYS(2)                   STV0280B\n               IF WS-LEAP-YY = ZERO\n                   DIVIDE WS-LEAP-YYYY BY 400\n                   GIVING WS-LEAP      REMAINDER WS-LEAP-REMAIN2        STV0280B\n                 IF WS-LEAP-REMAIN2 NOT = ZERO                          STV0280B\n                     MOVE 28           TO CAL-DAYS(2).                  STV0280B\n                                                                        STV0280B\n       2100-DETERMINE-LEAP-YEAR-EXIT.                                   STV0280B\n           EXIT.                                                        STV0280B\n                                                                        STV0280B\n       3000-CALCULATE-AGE.                                              STV0280B\n           IF WS-RAO-MM > 1                                             STV0280B\n               SUBTRACT 1              FROM WS-RAO-MM                   STV0280B\n                   GIVING WS-PREV-MM.                                   STV0280B\n           COMPUTE WS-DAYS = WS-RAO-DD - WS-RDOB-DD.                    STV0280B\n           IF WS-DAYS < 0                                               STV0280B\n               COMPUTE WS-DAYS = CAL-DAYS(WS-PREV-MM) + WS-DAYS         STV0280B\n               SUBTRACT 1              FROM WS-MONTHS.                  STV0280B\n                                                                        STV0280B\n       3000-COMPUTE-MONTHS.                                             STV0280B\n           COMPUTE WS-MONTHS = WS-MONTHS + WS-RAO-MM                    STV0280B\n                                         - WS-RDOB-MM.                  STV0280B\n           IF WS-MONTHS < 0                                             STV0280B\n               ADD 12                  TO WS-MONTHS                     STV0280B\n               SUBTRACT 1              FROM WS-YEARS.                   STV0280B\n                                                                        STV0280B\n       3000-COMPUTE-YEARS.                                              STV0280B\n           COMPUTE WS-YEARS = WS-YEARS + WS-RAO-YYYY                    STV0280B\n                                       - WS-RDOB-YYYY.                  STV0280B\n                                                                        STV0280B\n       3000-CALCULATE-AGE-EXIT. EXIT.                                   STV0280B\n                                                                        STV0280B\n       9000-DATE-ERROR.                                                 STV0280B\n           MOVE '*******'              TO LS-AGE.                       STV0280B\n           GOBACK.                                                      STV0280B\n                                                                        STV0280B\n      ******************************************************************STV0280B\n      ****              E N D  O F  S T V 0 2 8 0 B                 ****STV0280B\n      ******************************************************************STV0280B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV0295B": {"ttr": 17924, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00&\\x01\\x19\\x01_\\x01\\x192?\\x11\\x00\\x00\\xb9\\x0b\\xf6\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-01-15T00:00:00", "modifydate": "2019-11-19T11:00:26", "lines": 185, "newlines": 3062, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  STV0295B: return the name of the month'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    STV0295B.\n       AUTHOR.        JIM IANNONE.\n      ******************************************************************\n      *@@@ c3 call program: given 19910101 return 'january 1st 1991'\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * Program-id  : STV0295B\n      * Project #   : 910663\n      * Date written: 07/01/91\n      * Programmer  : Jim Iannone\n      *\n      *               GIVEN A FULL NUMERIC DATE, RETURN THE MONTH NAME\n      *               AND DAY SUFFIX SUCH AS 'ST' 'ND' 'RD' 'TH'.\n      *\n      *               NOTE: MONTH MAY BE SENT ALONE TO RETURN ONLY A\n      *                     MONTH NAME - LEAVE DD AND CCYY SPACES.\n      *               NOTE: IF DAY = SPACE, REPLACE WITH END OF MONTH\n      *                     NBR (EX: IF MONTH = 12, DAY = 31).\n      *               NOTE: ANY ERROR WILL CAUSE '****' TO BE\n      *                     PLACED IN LS-YEAR.\n      *\n      *                                  BEFORE:        AFTER:\n      *               LS-CCYYMMDD        '19910702'     '19910702'\n      *               LS-MONTH           SPACE          'JULY        '\n      *               LS-DAY             SPACE          ' 2ND'\n      *               LS-YEAR            SPACE          '1991'\n      *\n      ******************************************************************\n      * Date changed: 02/20/95\n      * Programmer  : Jim Iannone\n      *               recompile STV0195B as Cobol II and name STV0295B\n      ******************************************************************\n      * Date changed: 04/07/2006\n      * Programmer  : Jim Iannone\n      *               compile with cobol 3 with DYNAM option\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n       DATA DIVISION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' WORKING-STORAGE STV0295B START '.\n\n       01  WORK-FIELDS.\n           05  WS-CCYYMMDD             PIC  X(08).\n           05  FILLER REDEFINES WS-CCYYMMDD.\n               10  WS-CCYY             PIC  9(04).\n               10  FILLER REDEFINES WS-CCYY.\n                   15  WS-CCYY-C       PIC  99.\n                   15  WS-CCYY-Y       PIC  99.\n               10  WS-MM               PIC  99.\n               10  WS-DD               PIC  99.\n           05  FILLER REDEFINES WS-CCYYMMDD.\n               10  WS-CCYY-X           PIC  X(04).\n               10  WS-MM-X             PIC  XX.\n               10  WS-DD-X             PIC  XX.\n           05  WS-DAY.\n               10  WS-DAY-NBR          PIC  XX.\n               10  FILLER REDEFINES WS-DAY-NBR.\n                   15  WS-DAY-NBR-1    PIC  X.\n                   15  WS-DAY-NBR-2    PIC  X.\n               10  WS-DAY-SUFFIX       PIC  XX.\n           05  WS-QUOTIENT             PIC  999      VALUE ZERO.\n           05  WS-REMAINDER            PIC  999      VALUE ZERO.\n           05  WS-REMAIN2              PIC  9(04)    VALUE ZERO.\n\n       01  WS-TABLES.\n           05  WS-MONTH-TABLE1.\n               10  FILLER        PIC  X(14)    VALUE 'JANUARY     31'.\n               10  FILLER        PIC  X(14)    VALUE 'FEBRUARY    28'.\n               10  FILLER        PIC  X(14)    VALUE 'MARCH       31'.\n               10  FILLER        PIC  X(14)    VALUE 'APRIL       30'.\n               10  FILLER        PIC  X(14)    VALUE 'MAY         31'.\n               10  FILLER        PIC  X(14)    VALUE 'JUNE        30'.\n               10  FILLER        PIC  X(14)    VALUE 'JULY        31'.\n               10  FILLER        PIC  X(14)    VALUE 'AUGUST      31'.\n               10  FILLER        PIC  X(14)    VALUE 'SEPTEMBER   30'.\n               10  FILLER        PIC  X(14)    VALUE 'OCTOBER     31'.\n               10  FILLER        PIC  X(14)    VALUE 'NOVEMBER    30'.\n               10  FILLER        PIC  X(14)    VALUE 'DECEMBER    31'.\n           05  WS-MONTH-TABLE2 REDEFINES WS-MONTH-TABLE1.\n               10  FILLER              OCCURS 12 TIMES.\n                   15  WS-MONTH        PIC  X(12).\n                   15  WS-EOM-DAY      PIC  XX.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  STV0295B END  '.\n\n       LINKAGE SECTION.\n\n       01  LS-RECORD.\n           05  LS-CCYYMMDD             PIC  X(08).\n           05  LS-MONTH                PIC  X(12).\n           05  LS-DAY                  PIC  X(04).\n           05  LS-YEAR                 PIC  X(04).\n\n       PROCEDURE DIVISION USING LS-RECORD.\n\n       0100-PROGRAM-ENTRY.\n      ****************************************\n      *    RESET FIELDS IN CASE OF MULTIPLE CALLS BY SAME PROGRAM\n      ****************************************\n           MOVE SPACE                  TO LS-MONTH LS-DAY\n                                          LS-YEAR.\n           MOVE ZERO                   TO WS-CCYYMMDD WS-QUOTIENT\n                                          WS-REMAINDER.\n      ****************************************\n      *    MONTH MAY BE ENTERED ALONE: ONLY A MONTH NAME IS RETURNED\n      ****************************************\n           MOVE LS-CCYYMMDD                   TO WS-CCYYMMDD.\n           IF WS-MM-X NOT NUMERIC\n               GO TO 0200-EXIT-ERROR.\n           IF WS-MM = ZERO\n               OR WS-MM > 12\n               GO TO 0200-EXIT-ERROR.\n           IF (WS-DD-X = SPACE)\n               AND (WS-CCYY-X = SPACE)\n               MOVE WS-MONTH (WS-MM)          TO LS-MONTH\n               GO TO 0300-EXIT-PROGRAM.\n\n      ****************************************\n      *    IF WS-DD = SPACE, MOVE THE CORRESPONDING END OF MONTH NBR\n      *    TO WS-DD.\n      ****************************************\n           IF WS-CCYY-X NOT NUMERIC\n               GO TO 0200-EXIT-ERROR.\n           IF WS-DD-X = SPACE\n               DIVIDE WS-CCYY BY 4 GIVING WS-QUOTIENT\n                   REMAINDER WS-REMAINDER\n               IF WS-MM = 02\n                   IF WS-REMAINDER = ZERO\n                     IF WS-CCYY-Y = ZERO\n                         DIVIDE WS-CCYY BY 400 GIVING WS-QUOTIENT\n                             REMAINDER WS-REMAIN2\n                         IF WS-REMAIN2 = ZERO\n                             MOVE '29'        TO WS-DD-X\n                         ELSE\n                             CONTINUE\n                     ELSE\n                         MOVE '29'            TO WS-DD-X.\n\n           IF WS-DD-X = SPACE\n               MOVE WS-EOM-DAY (WS-MM)        TO WS-DD-X.\n\n      ****************************************\n      *    FILL OUTPUT FIELDS WITH CONVERTED DATE NAMES.\n      ****************************************\n           MOVE WS-MONTH (WS-MM)              TO LS-MONTH.\n\n           MOVE WS-DD                         TO WS-DAY-NBR.\n           IF WS-DD = 01 OR 21 OR 31\n               MOVE 'ST'                      TO WS-DAY-SUFFIX\n           ELSE\n           IF WS-DD = 02 OR 22\n               MOVE 'ND'                      TO WS-DAY-SUFFIX\n           ELSE\n           IF WS-DD = 03 OR 23\n               MOVE 'RD'                      TO WS-DAY-SUFFIX\n           ELSE\n               MOVE 'TH'                      TO WS-DAY-SUFFIX.\n           IF WS-DAY-NBR-1 = '0'\n               MOVE SPACE                     TO WS-DAY-NBR-1.\n           MOVE WS-DAY                        TO LS-DAY.\n           MOVE WS-CCYY                       TO LS-YEAR.\n           MOVE WS-CCYYMMDD                   TO LS-CCYYMMDD.\n           GO TO 0300-EXIT-PROGRAM.\n\n       0200-EXIT-ERROR.\n           MOVE '****'                        TO LS-YEAR.\n\n       0300-EXIT-PROGRAM.\n           GOBACK.\n\n      ************************************ END STV0295B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV0320B": {"ttr": 17928, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00)\\x01\\x19\\x01_\\x01\\x192?\\x10W\\x00\\x87\\x0bA\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2019-01-15T00:00:00", "modifydate": "2019-11-19T10:57:29", "lines": 135, "newlines": 2881, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  STV0320B: eight digit time conversion'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    STV0320B.\n       AUTHOR.        Jim Iannone.\n      ******************************************************************\n      *@@@ C3 call program to convert military/standard time\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * PROGRAM-ID  : STV0320B\n      * Project #   : 901030\n      * Date written: 10/08/90\n      * Programmer  : Jim Iannone\n      *\n      *               This program will accept either a 12 hr or 24 hr\n      *               time parameter and return the other time.\n      *               The time is accepted as 'hhmmssam' or 'hhmmsspm'\n      *               for standard time or 'hhmmss  ' for military time.\n      *               if there is any error found, the original time is\n      *               returned unchanged.\n      ******************************************************************\n      * Project #   : 930115\n      * Date changed: 03.01.93\n      * Programmer  : P E Bonfiglio\n      *               This is a copy of STV0165B compiled with Cobol II.\n      ******************************************************************\n      * Date changed: 04/07/2006\n      * Programmer  : Jim Iannone\n      *               Compile with Cobol 3 with DYNAM option\n      ******************************************************************\n      * Date changed: 11/13/2019\n      * Programmer  : Jim Iannone\n      *               Expand passed field to include seconds\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n       DATA DIVISION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' WORKING-STORAGE STV0320B start '.\n\n       01  WS-FIELDS.\n           05  WS-TIME                               VALUE SPACE.\n               10  WS-HH               PIC  XX.\n               10  WS-MM               PIC  XX.\n               10  WS-SS               PIC  XX.\n               10  WS-AP               PIC  XX.\n           05  WS-NEW-TIME                           VALUE SPACE.\n               10  WS-NEW-HH           PIC  XX.\n               10  WS-NEW-MM           PIC  XX.\n               10  WS-NEW-SS           PIC  XX.\n               10  WS-NEW-AP           PIC  XX.\n           05  WS-HH-NUMERIC           PIC  99       VALUE ZERO.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  END STV0320B  '.\n\n       LINKAGE SECTION.\n\n       01  LS-CALC-TIME.\n           05  FILLER                  PIC  X(08).\n\n       PROCEDURE DIVISION USING LS-CALC-TIME.\n\n      ****************************************\n      *    If 'AM' or 'PM' are found, process as a military\n      *    conversion, else process as a standard conversion.\n      ****************************************\n       0000-START-PROCESS.\n           MOVE SPACE                         TO WS-TIME\n                                                 WS-NEW-TIME.\n           MOVE LS-CALC-TIME                  TO WS-TIME.\n           IF WS-HH NOT NUMERIC\n               OR WS-MM NOT NUMERIC\n               GO TO 0300-END-PROCESS.\n           IF WS-HH > '23'\n               OR WS-MM > '59'\n               GO TO 0300-END-PROCESS.\n           IF WS-AP = 'AM' OR 'PM'\n               GO TO 0100-CALC-TO-MILITARY.\n\n      *    convert from military to standard\n\n           MOVE WS-SS                         TO WS-NEW-SS.\n           MOVE WS-MM                         TO WS-NEW-MM.\n           IF WS-HH > '12'\n               MOVE WS-HH                     TO WS-HH-NUMERIC\n               SUBTRACT 12 FROM WS-HH-NUMERIC\n               MOVE WS-HH-NUMERIC             TO WS-NEW-HH\n               MOVE 'PM'                      TO WS-NEW-AP\n               GO TO 0200-MOVE-TIME.\n           MOVE WS-HH                         TO WS-NEW-HH.\n           IF WS-HH < '12'\n               MOVE 'AM'                      TO WS-NEW-AP.\n           IF WS-HH = '12'\n               MOVE 'PM'                      TO WS-NEW-AP.\n           IF WS-HH = ZERO\n               MOVE '12'                      TO WS-NEW-HH.\n           GO TO 0200-MOVE-TIME.\n\n      *    convert from standard to military\n\n       0100-CALC-TO-MILITARY.\n           IF WS-HH > '12'\n               OR WS-HH = ZERO\n               GO TO 0300-END-PROCESS.\n           MOVE WS-SS                         TO WS-NEW-SS.\n           MOVE WS-MM                         TO WS-NEW-MM.\n           IF WS-AP = 'PM'\n             IF WS-HH = '12'\n                 MOVE WS-HH                   TO WS-NEW-HH\n             ELSE\n                 MOVE WS-HH                   TO WS-HH-NUMERIC\n                 ADD 12                       TO WS-HH-NUMERIC\n                 MOVE WS-HH-NUMERIC           TO WS-NEW-HH\n           ELSE\n               MOVE WS-HH                     TO WS-NEW-HH\n               IF WS-NEW-HH = '12'\n                   MOVE ZERO                  TO WS-NEW-HH.\n\n       0200-MOVE-TIME.\n           MOVE WS-NEW-TIME                   TO LS-CALC-TIME.\n\n       0300-END-PROCESS.\n           GOBACK.\n\n      ************************************ END STV0320B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV0400B": {"ttr": 17931, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x18\\x00\\x06\\x01\\x19\\x01_\\x01\\x195\\x1f\\x13)\\x06(\\x05\\xe4\\x00\\x00\\xd4\\xc9\\xe2\\xf1\\xf4\\xf6@@@@'", "ispf": {"version": "01.24", "flags": 0, "createdate": "2019-01-15T00:00:00", "modifydate": "2019-12-17T13:29:06", "lines": 1576, "newlines": 1508, "modlines": 0, "user": "MIS146"}, "text": "\n       TITLE '  STV0400B: year 2000 common date subroutine'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    STV0400B.\n       AUTHOR.        JIM IANNONE.\n      **********************************************************CX003B\n      *@@@ C3 convert dates for the year 2000\n      ****************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * Program-id  : STV0400B\n      * Date written: 03/06/1998\n      * Programmer  : Jim Iannone\n      *\n      *       call program to consolidate date subroutines for\n      *       year 2000 compliance\n      *\n      *-----------------------------------------------------------\n      * Date changed: 04/07/2006\n      * Programmer  : Jim Iannone\n      *               make all calls dynamic\n      *-----------------------------------------------------------\n      *\n      *  !!!  IT IS UP TO THE PROGRAMMER TO VERIFY THE FOLLOWING,\n      *       ELSE UNPREDICTABLE RESULTS MAY OCCUR:\n      *\n      *   1.  IF PROVIDING INPUT DATA, THE DATA FORMAT MUST MATCH\n      *       THE INPUT PARM DESCRIBING THAT DATA\n      *       IE:  DATA: 98/078\n      *              IN: CY/DDD\n      *\n      *       THESE DO NOT MATCH.  '98/078' IMPLIES 'Y/DDD'.\n      *\n      *   2.  INCOMPATIBLE FORMATS SHOULD NOT BE MIXED:\n      *       IE:  DATA: 132400\n      *              IN: HMSM\n      *             OUT: CYMD\n      *\n      *       HERE YOU PROVIDED A TIME VALUE AND ASKED THAT IT BE\n      *       CONVERTED TO A DATE.\n      *\n      *   3.  WHEN PROVIDING A DATE IN CYMD FORMAT OTHER THAN\n      *       CURRENT DATE, SPECIFY 'CYMD  ' FOR THE 'IN' PARM,\n      *       RATHER THAN '      ', WHICH CAUSES CURRENT DATE TO\n      *       BE USED.\n      *\n      *   4.  BE CAREFUL WHEN LOADING STV0400B-DATA.  IT IS DEFINED\n      *       AS PIC X(10).  BE CAREFUL WHEN MOVING NUMERIC FIELDS\n      *       TO IT; BE SURE ALL DATA IS LEFT JUSTIFIED.\n      *       USE STV0400B-1X8 (BELOW) IF IT IS EASIER.\n      *\n      *   5.  ALWAYS TEST STV0400B-1X6 FOR 'ERROR ' AFTER THE CALL.\n      *       AN ERROR NUMBER IS ALSO PROVIDED IN STV0400B-NBR.\n      *\n      *-----------------------------------------------------------\n      *\n      * EXAMPLE  :   MARCH 19, 1998, THURSDAY\n      * DATE     :   98078 JULIAN,  1:24 PM\n      *\n      *-----------------------------------------------------------\n      *\n      * --->     10 BYTE DATA FIELD:\n      *               INPUT:  FORMATTED AS 'IN' DATA BELOW.\n      *                       SPACES (DEFAULT) IS CYMD.\n      *               OUTPUT: FORMATTED AS 'OUT' DATA BELOW,\n      *                       OR CONTAINS 'ERROR ####'\n      *\n      * --->     10 BYTE DATA2 FIELD:\n      *               ONLY USED WHEN PROVIDING A DATE OTHER THAN\n      *               CURRENT DATE TO THE NBR-OF-DAYS OR PATIENT\n      *               AGE ROUTINES.  SEND IN THE SAME FORMAT AS\n      *               THE ABOVE 10 BYTE DATA FIELD.\n      *               ALSO USED TO PROVIDE A FUTURE TIME VALUE.\n      *\n      * --->     6 BYTE 'IN' DATA FORMAT:\n      *\n      *              HERE YOU TELL STV0400B THE FORMAT OF THE DATE\n      *              OR OTHER DATA, SO THAT STV0400B CAN RECOGNIZE\n      *              AND CONVERT IT AS NEEDED.\n      *\n      *              IN            10 BYTE FIELD CONTENTS\n      *              --------      ----------------------\n      *              '      '      CURRENT CYMD\n      *              'CY    '      '1998      '\n      *              'CY/DDD'      '1998/078  '\n      *              'CY/M/D'      '1998/03/19'\n      *              'CYDDD '      '1998078   '\n      *              'CYM   '      '199803    '\n      *              'CYMD  '      '19980319  '\n      *              'DDD   '      '078       '\n      *              'HMM   '      '1324      '   MILITARY TIME\n      *              'HMSM  '      '132400    '   MILITARY TIME\n      *              'H:MM  '      '13:24     '   MILITARY TIME\n      *              'H:M:SM'      '13:24:00  '   MILITARY TIME\n      *              'HMP   '      '0124PM    '   STANDARD TIME\n      *              'HMSP  '      '012400PM  '   STANDARD TIME\n      *              'H:M P '      '01:24 PM  '   STANDARD TIME\n      *              'H:MP  '      '01:24PM   '   STANDARD TIME\n      *              'H:M:SP'      '01:24:00PM'   STANDARD TIME\n      *              'KEY   '      '30019681  '   = 19980319\n      *              'M     '      '03        '\n      *              'M/D   '      '03/19     '\n      *              'M/D/CY'      '03/19/1998'\n      *              'M/D/Y '      '03/19/98  '   see 80/20 window\n      *              'M/D/Y '      '03/19-98  '   notes below\n      *              'MCY   '      '031998    '\n      *              'MD    '      '0319      '\n      *              'MDCY  '      '03191998  '\n      *              'MDY   '      '031998    '\n      *              'MMM   '      'SEP       '\n      *              'MMMCY '      'SEP1998   '\n      *              'MMMD  '      'SEP19     '\n      *              'MMMYD '      'SEP9819   '\n      *              'MONTH '      'SEPTEMBER '\n      *              'MY    '      '0398      '\n      *              'Y     '      '98        '\n      *              'Y/DDD '      '98/078    '\n      *              'Y/M/D '      '98/03/19  '\n      *              'YDDD  '      '98078     '\n      *              'YM    '      '9803      '\n      *              'YMD   '      '980319    '\n      *\n      * --->     6 BYTE 'OUT' DATA FORMAT:\n      *\n      *              HERE YOU TELL STV0400B THE FORMAT OF THE\n      *              DATA THAT YOU WANT AS OUTPUT.\n      *\n      *              OUT           10 BYTE FIELD RETURNED\n      *              --------      ----------------------\n      *              '      '      'IN' CYMD DATA, OR CURRENT CYMD\n      *              '+00134'      '19980731  '   days future\n      *              '-00023'      '19980224  '   days past\n      *              'I00134'      '15380000  '   increment # minutes\n      *                                   '--> ## nbr days calc'd past\n      *              'D00023'      '13010000  '   decrement # minutes\n      *              'AGE   '      '0450210   '   YYYMMDD\n      *              'CDDEY2'      '1996366   '   EOY - CYDDD - past\n      *              'CDDE02'      '1998031   '   EOM - CYDDD - past\n      *              'CDD002'      '1998076   '   CYDDD minus 2 days\n      *              'CDFEY2'      '2000366   '   EOY - CYDDD - future\n      *              'CDFE02'      '1998151   '   EOM - CYDDD - future\n      *              'CDF002'      '1998080   '   CYDDD plus 2 days\n      *              'CMDEY2'      '19961231  '   EOY - CYMD - past\n      *              'CMDE02'      '19980131  '   EOM - CYMD - past\n      *              '%%%B##'      '19980101  '   Replace end DD w/ 01\n      *              'CMDX  '      '19980319  '   CYMD\n      *              'CMD002'      '19980317  '   CYMD minus 2 days\n      *              'CMFEY2'      '20001231  '   EOY - CYMD - future\n      *              'CMFE02'      '19980531  '   EOM - CYMD - future\n      *              'CMF002'      '19980321  '   CYMD plus 2 days\n      *              'CY    '      '1998      '\n      *              'CY/DDD'      '1998/078  '\n      *              'CY/M/D'      '1998/03/19'\n      *              'CY-M-D'      '1998-03-19'\n      *              'CYDDD '      '1998078   '\n      *              'CYDX  '      '1998      '\n      *              'CYD002'      '1996      '   CY minus 2 years\n      *              'CYF002'      '2000      '   CY plus 2 years\n      *              'CYM   '      '199803    '\n      *              'CYMD  '      '19980319  '\n      *              'D     '      '19        '\n      *              'DAY   '      'THURSDAY 4'   MON=1...SUN=7\n      *              'DAYN1 '      '4         '   1=4 2=04 3=004...\n      *              'DAYS  '      '00034     '   CURR - IN-DATE\n      *              'DDD   '      '078       '\n      *              'HMM   '      '1324      '   MILITARY TIME\n      *              'HMSM  '      '132400    '   MILITARY TIME\n      *              'HMSM8 '      '13240000  '   INCLUDE HUNDREDTHS\n      *              'H:MM  '      '13:24     '   MILITARY TIME\n      *              'H:M:SM'      '13:24:00  '   MILITARY TIME\n      *              'HMP   '      '0124PM    '   STANDARD TIME\n      *              'HMSP  '      '012400PM  '   STANDARD TIME\n      *              'H:M P '      '01:24 PM  '   STANDARD TIME\n      *              'H:MP  '      '01:24PM   '   STANDARD TIME\n      *              'H:M:SP'      '01:24:00PM'   STANDARD TIME\n      *              'KEY   '      '19980319  '   = 30019681\n      *              'M     '      '03        '\n      *              'M/D   '      '03/19     '\n      *              'M/D/CY'      '03/19/1998'\n      *              'M/D/Y '      '03/19/98  '\n      *              'MCY   '      '031998    '\n      *              'MD    '      '0319      '\n      *              'MDCY  '      '03191998  '\n      *              'MDY   '      '031998    '\n      *              'MIN   '      '001440    '  # MINUTES BETWEEN TIMES\n      *              'MIN - note: time can be passed as HHMMSS## where\n      *                           ## = number days in past (or future\n      *                           if valuing DATA2) if 'HMSM  ' is input\n      *              'MMM   '      'MAR       '\n      *              'MMMCY '      'MAR1998   '\n      *              'MMMD  '      'MAR19     '\n      *              'MMMYD '      'MAR9819   '\n      *              'MONTH '      'MARCH     '\n      *              'MY    '      '0398      '\n      *              'MYDEY2'      '123196    '   EOY - MDY - past\n      *              'MYDE03'      '123197    '   EOM - MDY - past\n      *              'MYD002'      '031798    '   MDY minus 2 days\n      *              'MYFEY2'      '123100    '   EOY - MDY - future\n      *              'MYFE03'      '063098    '   EOM - MDY - future\n      *              'MYF002'      '032198    '   MDY plus 2 days\n      *              'QTR   '      '1         '   1/2/3/4\n      *              'QFF002'      '19980701  '   2 fixed qtrs forward\n      *                            '19980930  '   beg and end dates\n      *              'QFP001'      '19971001  '   1 fixed qtr prev\n      *                            '19971231  '   beg and end dates\n      *              'QMF001'      '19980401  '   1 moving qtr forward\n      *                            '19980630  '   beg and end dates\n      *              'QMP001'      '19971201  '   1 moving qtr prev\n      *                            '19980228  '   beg and end dates\n      *              'SUFFIX'      'MARCH     '   IN=' 1ST'  OUT='1998'\n      *              'Y     '      '98        '\n      *              'YDDEY2'      '96366     '   EOY - YDDD - past\n      *              'YDDE03'      '97365     '   EOM - YDDD - past\n      *              'YDD002'      '98076     '   YDDD minus 2 days\n      *              'YDFEY2'      '00366     '   EOY - YDDD - future\n      *              'YDFE03'      '98181     '   EOM - YDDD - future\n      *              'YDF002'      '98080     '   YDDD plus 2 days\n      *              'YMDEY2'      '961231    '   EOY - YMD - past\n      *              'YMDE03'      '971231    '   EOM - YMD - past\n      *              'YMD002'      '980317    '   YMD minus 2 days\n      *              'YMFEY2'      '001231    '   EOY - YMD - future\n      *              'YMFE03'      '980630    '   EOM - YMD - future\n      *              'YMF002'      '980321    '   YMD plus 2 days\n      *              'Y/DDD '      '98/078    '\n      *              'Y/M/D '      '98/03/19  '\n      *              'YDDD  '      '98078     '\n      *              'YM    '      '9803      '\n      *              'YMD   '      '980319    '\n      *\n      *\n      *-----------------------------------------------------------\n      *    CALL PROGRAMS REFERENCED BY THIS PROGRAM\n      *         STV0280B         AGE IN YEARS, MONTHS, DAYS\n      *         STV0295B         MONTH NAME/DAY SUFFIX\n      *         STV0320B         MILITARY/STANDARD TIME CONVERSION\n      *         STV0405B         CYMD DATE EDIT\n      *         STV0410B         JULIAN/GREGORIAN CONVERSION\n      *         STV0420B         DATE/NBR DAYS CONVERSION\n      *         STV0805B         DAY NAME AND NUMBER\n      *-----------------------------------------------------------\n      *\n      *        05  WS-CALL-STV0400B      PIC  X(08)   VALUE 'STV0400B'.\n      *\n      *    01  WS-STV0400B-FIELDS.\n      *        05  STV0400B-DATA         PIC  X(10)   VALUE SPACE.\n      *        05  FILLER REDEFINES STV0400B-DATA.\n      *            10  STV0400B-1X6      PIC  X(06).\n      *            10  STV0400B-NBR      PIC  X(04).\n      *        05  FILLER REDEFINES STV0400B-DATA.\n      *            10  STV0400B-1X8      PIC  X(08).\n      *            10  FILLER            PIC  XX.\n      *        05  FILLER REDEFINES STV0400B-DATA.\n      *            10  STV0400B-DAYS     PIC  X(05).\n      *            10  FILLER            PIC  X(05).\n      *        05  FILLER REDEFINES STV0400B-DATA.\n      *            10  STV0400B-DAY      PIC  X(09).\n      *            10  STV0400B-DAY-NBR  PIC  X.\n      *        05  STV0400B-DATA2        PIC  X(10)   VALUE SPACE.\n      *        05  STV0400B-IN           PIC  X(06)   VALUE SPACE.\n      *        05  STV0400B-OUT          PIC  X(06)   VALUE SPACE.\n      *\n      *-----------------------------------------------------------\n      *\n      *    EXAMPLES:\n      *\n      *    MOVE SPACE                         TO WS-STV0400B-FIELDS.\n      *    CALL 'STV0400B' USING WS-STV0400B-FIELDS.\n      *    IF STV0400B-1X6 NOT = 'ERROR' ...\n      *    RESULTS:    STV0400B-DATA   = '19980319  '\n      *                STV0400B-IN     = '      '\n      *                STV0400B-OUT    = '      '\n      *\n      *    MOVE SPACE                         TO WS-STV0400B-FIELDS.\n      *    MOVE 'M/D/Y '                      TO STV0400B-OUT.\n      *    CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n      *    IF STV0400B-1X6 NOT = 'ERROR' ...\n      *    RESULTS:    STV0400B-DATA   = '03/19/98  '\n      *\n      *    MOVE '980319    '                  TO STV0400B-DATA.\n      *    MOVE 'YMD   '                      TO STV0400B-IN.\n      *    MOVE '-0002 '                      TO STV0400B-OUT.\n      *    CALL 'STV0400B' USING WS-STV0400B-FIELDS.\n      *    IF STV0400B-1X6 NOT = 'ERROR' ...\n      *    RESULTS:    STV0400B-DATA   = '19980317  '\n      *\n      *    MOVE '1998/03/19'                  TO STV0400B-DATA.\n      *    MOVE 'CY/M/D'                      TO STV0400B-IN.\n      *    MOVE 'CYDDD '                      TO STV0400B-OUT.\n      *    CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n      *    IF STV0400B-1X6 NOT = 'ERROR' ...\n      *    RESULTS:    STV0400B-DATA   = '1998078   '\n      *\n      *    MOVE '980912    '                  TO STV0400B-DATA.\n      *    MOVE 'YMD   '                      TO STV0400B-IN.\n      *    MOVE 'MONTH '                      TO STV0400B-OUT.\n      *    CALL 'STV0400B' USING WS-STV0400B-FIELDS.\n      *    IF STV0400B-1X6 NOT = 'ERROR' ...\n      *    RESULTS:    STV0400B-DATA   = 'SEPTEMBER '\n      *\n      *    MOVE '989_2_    '                  TO STV0400B-DATA.\n      *    MOVE 'YMD   '                      TO STV0400B-IN.\n      *    MOVE 'CYMD  '                      TO STV0400B-OUT.\n      *    CALL 'STV0400B' USING WS-STV0400B-FIELDS.\n      *    IF STV0400B-1X6 NOT = 'ERROR' ...\n      *    RESULTS:    STV0400B-DATA   = '19980902  '\n      *\n      *    MOVE '19980311  '                  TO STV0400B-DATA.\n      *    MOVE 'CYMD  '                      TO STV0400B-IN.\n      *    MOVE 'DAYS  '                      TO STV0400B-OUT.\n      *    CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n      *    IF STV0400B-1X6 NOT = 'ERROR' ...\n      *    RESULTS:    STV0400B-DATA   = '00008     '\n      *\n      *    MOVE '980311    '                  TO STV0400B-DATA.\n      *    MOVE '980317    '                  TO STV0400B-DATA2.\n      *    MOVE 'YMD   '                      TO STV0400B-IN.\n      *    MOVE 'DAYS  '                      TO STV0400B-OUT.\n      *    CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n      *    IF STV0400B-1X6 NOT = 'ERROR' ...\n      *    RESULTS:    STV0400B-DATA   = '00006     '\n      *\n      *    MOVE '          '                  TO STV0400B-DATA.\n      *    MOVE '      '                      TO STV0400B-IN.\n      *    MOVE 'SUFFIX'                      TO STV0400B-OUT.\n      *    CALL 'STV0400B' USING WS-STV0400B-FIELDS.\n      *    IF STV0400B-1X6 NOT = 'ERROR' ...\n      *    RESULTS:    STV0400B-DATA   = 'MARCH     '\n      *                STV0400B-IN     = '19TH  '\n      *                STV0400B-OUT    = '1998  '\n      *\n      *    To compute dates outside of the 80/20 window:\n      *    curr date: 1/1/2006\n      *    within  80/20 window: yy 26-99: 1926 - 1999\n      *    within  80/20 window: yy 00-25: 2000 - 2025\n      *    outside 80/20 window: yy 26-99: 1826 - 1899\n      *    outside 80/20 window: yy 00-25: 1900 - 1925\n      *    data: 01/01/25  in: m/d/y  out: cy  rslt: 2025\n      *    data: 01/01-25  in: m/d/y  out: cy  rslt: 1925\n      *    data: 01/01/26  in: m/d/y  out: cy  rslt: 1926\n      *    data: 01/01-26  in: m/d/y  out: cy  rslt: 1826\n      *    data: 01/01/86  in: m/d/y  out: cy  rslt: 1986\n      *    data: 01/01-86  in: m/d/y  out: cy  rslt: 1886\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n       DATA DIVISION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' WORKING-STORAGE STV0400B START '.\n\n       01  WS-FIELDS.\n           05  WS-LS-DATA              PIC  X(10)    VALUE SPACE.\n           05  FILLER REDEFINES WS-LS-DATA.\n               10  WS-LS-DATA-1X2      PIC  XX.\n               10  WS-LS-DATA-3X4      PIC  XX.\n               10  WS-LS-DATA-5X6      PIC  XX.\n               10  WS-LS-DATA-7X8      PIC  XX.\n               10  WS-LS-DATA-9X10     PIC  XX.\n           05  FILLER REDEFINES WS-LS-DATA.\n               10  FILLER              PIC  XX.\n               10  WS-LS-DATA-3        PIC  X.\n               10  WS-LS-DATA-4X5      PIC  XX.\n               10  WS-LS-DATA-6        PIC  X.\n               10  FILLER              PIC  X(04).\n           05  FILLER REDEFINES WS-LS-DATA.\n               10  WS-LS-DATA-1X8      PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  WS-LS-DATA2             PIC  X(10)    VALUE SPACE.\n           05  FILLER REDEFINES WS-LS-DATA2.\n               10  WS-LS-DATA2-C       PIC  XX.\n               10  WS-LS-DATA2-Y       PIC  XX.\n               10  WS-LS-DATA2-M       PIC  XX.\n               10  WS-LS-DATA2-D       PIC  XX.\n               10  FILLER              PIC  XX.\n           05  WS-LS-IN                PIC  X(06)    VALUE SPACE.\n           05  WS-LS-OUT               PIC  X(06)    VALUE SPACE.\n           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-1-CYMD.\n               10  WS-1-CYMD-C         PIC  XX.\n               10  WS-1-CYMD-Y         PIC  XX.\n               10  WS-1-CYMD-M         PIC  XX.\n               10  WS-1-CYMD-D         PIC  XX.\n           05  WS-2-CYMD               PIC  9(08)    VALUE ZERO.\n           05  FILLER REDEFINES WS-2-CYMD.\n               10  WS-2-CYMD-C         PIC  99.\n               10  WS-2-CYMD-Y         PIC  99.\n               10  WS-2-CYMD-M         PIC  99.\n               10  WS-2-CYMD-D         PIC  99.\n           05  FILLER REDEFINES WS-2-CYMD.\n               10  WS-2-CYMD-CY        PIC  9(04).\n               10  FILLER              PIC  9(04).\n           05  WS-2-CYMD-X REDEFINES WS-2-CYMD\n                                       PIC  X(08).\n           05  WS-I-CYMD               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-I-CYMD.\n               10  WS-I-CYMD-CY-N      PIC  9(04).\n               10  FILLER              PIC  9(04).\n           05  FILLER REDEFINES WS-I-CYMD.\n               10  WS-I-CYMD-C         PIC  XX.\n               10  WS-I-CYMD-YMD       PIC  X(06).\n               10  FILLER REDEFINES WS-I-CYMD-YMD.\n                   15  WS-I-CYMD-Y     PIC  XX.\n                   15  WS-I-CYMD-Y-N REDEFINES WS-I-CYMD-Y\n                                       PIC  99.\n                   15  WS-I-CYMD-M     PIC  XX.\n                   15  WS-I-CYMD-D     PIC  XX.\n           05  WS-O-CYMD               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-O-CYMD.\n               10  WS-O-CYMD-C         PIC  XX.\n               10  WS-O-CYMD-YMD       PIC  X(06).\n               10  FILLER REDEFINES WS-O-CYMD-YMD.\n                   15  WS-O-CYMD-Y     PIC  XX.\n                   15  WS-O-CYMD-M     PIC  XX.\n                   15  WS-O-CYMD-D     PIC  XX.\n           05  WS-I-HMS8               PIC  9(08)    VALUE ZERO.\n           05  WS-I-HMS                PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-I-HMS.\n               10  WS-I-HMS-1X6.\n                   15  WS-I-HMS-H      PIC  XX.\n                   15  WS-I-HMS-H-N REDEFINES WS-I-HMS-H\n                                       PIC  99.\n                   15  WS-I-HMS-M      PIC  XX.\n                   15  WS-I-HMS-M-N REDEFINES WS-I-HMS-M\n                                       PIC  99.\n                   15  WS-I-HMS-S      PIC  XX.\n               10  WS-I-HMS-N REDEFINES WS-I-HMS-1X6\n                                       PIC  9(06).\n               10  WS-I-HMS-DAYS       PIC  XX.\n               10  WS-I-HMS-DAYS-N REDEFINES WS-I-HMS-DAYS\n                                       PIC  99.\n           05  WS-I-HMS2               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-I-HMS2.\n               10  WS-I-HMS2-1X6.\n                   15  WS-I-HMS2-H     PIC  XX.\n                   15  WS-I-HMS2-H-N REDEFINES WS-I-HMS2-H\n                                       PIC  99.\n                   15  WS-I-HMS2-M     PIC  XX.\n                   15  WS-I-HMS2-M-N REDEFINES WS-I-HMS2-M\n                                       PIC  99.\n                   15  WS-I-HMS2-S     PIC  XX.\n               10  WS-I-HMS2-DAYS      PIC  XX.\n               10  WS-I-HMS2-DAYS-N REDEFINES WS-I-HMS2-DAYS\n                                       PIC  99.\n           05  WS-O-HMS                PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-O-HMS.\n               10  WS-O-HMS-1X6.\n                   15  WS-O-HMS-H      PIC  XX.\n                   15  WS-O-HMS-M      PIC  XX.\n                   15  WS-O-HMS-S      PIC  XX.\n               10  WS-O-HMS-DAYS       PIC  XX.\n           05  WS-REV-DATE             PIC  9(08)    VALUE ZERO.\n           05  WS-ERROR-NBR            PIC  9(04)    VALUE ZERO.\n           05  WS-1-8020               PIC  9(04)    VALUE ZERO.\n           05  FILLER REDEFINES WS-1-8020.\n               10  WS-1-8020-C         PIC  99.\n               10  WS-1-8020-Y         PIC  99.\n           05  WS-2-8020-C             PIC  99       VALUE ZERO.\n           05  WS-3-8020-C             PIC  99       VALUE ZERO.\n           05  WS-EOM-NBR              PIC  99       VALUE ZERO.\n           05  WS-HOLD6                PIC  X(06)    VALUE SPACE.\n           05  WS-HOLD8                PIC  X(08)    VALUE SPACE.\n           05  WS-FUTURE-SW            PIC  X        VALUE SPACE.\n           05  WS-DAYN                 PIC  9        VALUE ZERO.\n           05  WS-QUOTIENT             PIC  9(05)    VALUE ZERO.\n           05  WS-REMAINDER            PIC  9(05)    VALUE ZERO.\n           05  WS-PAST-MIN             PIC S9(06)    VALUE ZERO.\n           05  WS-FUTURE-MIN           PIC  9(06)    VALUE ZERO.\n           05  WS-CALL-STV0280B        PIC  X(08)    VALUE 'STV0280B'.\n           05  WS-CALL-STV0295B        PIC  X(08)    VALUE 'STV0295B'.\n           05  WS-CALL-STV0320B        PIC  X(08)    VALUE 'STV0320B'.\n           05  WS-CALL-STV0405B        PIC  X(08)    VALUE 'STV0405B'.\n           05  WS-CALL-STV0410B        PIC  X(08)    VALUE 'STV0410B'.\n           05  WS-CALL-STV0420B        PIC  X(08)    VALUE 'STV0420B'.\n           05  WS-CALL-STV0805B        PIC  X(08)    VALUE 'STV0805B'.\n\n       01  WS-STV0420B-FIELDS.\n           05  STV0420B-PAST-DATE      PIC  X(08).\n           05  FILLER REDEFINES STV0420B-PAST-DATE.\n               10  STV0420B-CC         PIC  XX.\n               10  STV0420B-YY         PIC  XX.\n               10  STV0420B-MM         PIC  XX.\n               10  STV0420B-DD         PIC  XX.\n           05  STV0420B-FUTURE-DATE    PIC  X(08).\n           05  STV0420B-DAYS           PIC  X(05).\n\n      *    YEAR 2000 COMPLIANT JULIAN/GREGORIAN DATE CONVERSION\n       01  WS-STV0410B-FIELDS.\n           05  STV0410B-IN-DATE        PIC  X(08).\n           05  STV0410B-CYDDD          PIC  X(07).\n           05  STV0410B-CYMD           PIC  X(08).\n\n      *    RETURN THE DAY OF THE WEEK GIVEN A DATE IN CCYYMMDD FORMAT\n       01  WS-STV0805B-FIELDS.\n           05  STV0805B-CCYYMMDD       PIC  X(08).\n           05  STV0805B-DAY            PIC  X(09).\n           05  STV0805B-NBR-DAY        PIC  XX.\n\n      *    STV0295B IS USED TO RETURN A MONTH NAME AND DAY SUFFIX\n       01  WS-STV0295B-FIELDS.\n           05  STV0295B-DATE           PIC  X(08).\n           05  FILLER REDEFINES STV0295B-DATE.\n               10  STV0295B-CC         PIC  XX.\n               10  STV0295B-YY         PIC  XX.\n               10  STV0295B-MM         PIC  XX.\n               10  STV0295B-DD         PIC  XX.\n           05  STV0295B-MONTH          PIC  X(12).\n           05  STV0295B-DAY            PIC  X(04).\n           05  STV0295B-YEAR           PIC  X(04).\n\n      *    STV0280B WILL RETURN A PERSONS AGE IN YEARS, MONTHS, DAYS\n       01  WS-STV0280B-FIELDS.\n           05  STV0280B-DOB-CYMD       PIC  X(08).\n           05  STV0280B-AS-OF-CYMD     PIC  X(08).\n           05  STV0280B-AGE.\n               10  STV0280B-YEARS      PIC  XXX.\n               10  STV0280B-MONTHS     PIC  XX.\n               10  STV0280B-DAYS       PIC  XX.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  END STV0400B  '.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELDS.\n           05  LS-DATA                 PIC  X(10).\n           05  LS-DATA2                PIC  X(10).\n           05  LS-IN                   PIC  X(06).\n           05  LS-OUT                  PIC  X(06).\n\n       PROCEDURE DIVISION USING LS-FIELDS.\n\n       0100-START-PROCESS.\n\n      ****************************************\n      *    ALTER THIS CODE TO MAKE YEAR 2000 COMPLIANT\n      *    AFTER MOVING TO YEAR 2000 COMPLIANT VERSION OF COBOL.\n      *+**************************************\n           MOVE FUNCTION CURRENT-DATE(1: 8)   TO WS-I-CYMD.\n           MOVE FUNCTION CURRENT-DATE(9: 6)   TO WS-I-HMS-1X6.\n           MOVE '00'                          TO WS-I-HMS-DAYS.\n\n      *    Replace this logic when full century is available\n      *    from the system.  See STV1400B for example.\n      *    MOVE WS-I-CYMD-Y-N                 TO WS-1-8020-Y.\n           MOVE WS-I-CYMD-CY-N                TO WS-1-8020.\n      *    IF WS-1-8020-Y > 19\n      *        MOVE 19                        TO WS-1-8020-C\n      *    ELSE\n      *        MOVE 20                        TO WS-1-8020-C.\n      *    Replaced above logic 4-7-2006\n\n      *    determine 80/20 rolling window\n           SUBTRACT 80                        FROM WS-1-8020.\n           MOVE WS-1-8020-C                   TO WS-2-8020-C\n                                                 WS-3-8020-C.\n           ADD 1                              TO WS-2-8020-C.\n           SUBTRACT 1                         FROM WS-3-8020-C.\n           PERFORM 0400-DETERMINE-CENTURY.\n\n      ****************************************\n      *    CONVERT TO, THEN FROM, CYMD FORMAT\n      ****************************************\n      *    WS-1-CYMD HOLDS CURRENT DATE\n      *    WS-I-CYMD HOLDS DATE BUILT FROM IN PARM\n      *       FOR BOTH LS-DATA AND LS-DATA2\n      *    WS-O-CYMD HOLDS DATE BUILT FROM OUT PARM\n      *    WS-LS-DATA2 TEMPORARILY USES WS-O-CYMD AS A HOLD FIELD\n      *+**************************************\n           MOVE ZERO                          TO WS-ERROR-NBR.\n           MOVE LS-DATA                       TO WS-LS-DATA.\n           MOVE LS-DATA2                      TO WS-LS-DATA2.\n           MOVE LS-IN                         TO WS-LS-IN.\n           MOVE LS-OUT                        TO WS-LS-OUT.\n           MOVE WS-I-CYMD                     TO WS-1-CYMD.\n           MOVE WS-I-HMS                      TO WS-I-HMS2.\n           INSPECT WS-LS-IN CONVERTING 'abcdefghijklmnopqrstuvwxyz'\n                                    TO 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n           INSPECT WS-LS-OUT CONVERTING 'abcdefghijklmnopqrstuvwxyz'\n                                     TO 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n           INSPECT WS-LS-DATA CONVERTING 'abcdefghijklmnopqrstuvwxyz'\n                                      TO 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n           INSPECT WS-LS-DATA2 CONVERTING 'abcdefghijklmnopqrstuvwxyz'\n                                       TO 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n           IF WS-LS-DATA NOT = SPACE\n               PERFORM 0300-CONVERT-TO-STANDARD\n           ELSE\n           IF WS-LS-DATA2 = SPACE\n               PERFORM 0300-CONVERT-TO-STANDARD.\n           IF WS-ERROR-NBR > ZERO\n               GO TO 4000-RETURN-ERROR.\n           IF WS-LS-DATA2 NOT = SPACE\n               MOVE WS-I-CYMD                 TO WS-O-CYMD\n               MOVE WS-1-CYMD                 TO WS-I-CYMD\n               MOVE WS-LS-DATA2               TO WS-LS-DATA\n               MOVE WS-I-HMS                  TO WS-O-HMS\n               PERFORM 0300-CONVERT-TO-STANDARD\n               IF WS-ERROR-NBR > ZERO\n                   GO TO 4000-RETURN-ERROR\n               ELSE\n                   MOVE WS-I-CYMD             TO WS-LS-DATA2\n                   MOVE WS-O-CYMD             TO WS-I-CYMD\n                   MOVE WS-I-HMS              TO WS-I-HMS2\n                   MOVE WS-O-HMS              TO WS-I-HMS.\n           PERFORM 0500-CONVERT-FROM-STANDARD.\n           IF WS-ERROR-NBR > ZERO\n               GO TO 4000-RETURN-ERROR.\n           GO TO 4200-EXIT-PROGRAM.\n\n       0300-CONVERT-TO-STANDARD.\n           EVALUATE WS-LS-IN\n               WHEN SPACE\n                   CONTINUE\n               WHEN 'CY    '\n                   MOVE WS-LS-DATA(1: 4)      TO WS-I-CYMD(1: 4)\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'CYM   '\n                   MOVE WS-LS-DATA(1: 6)      TO WS-I-CYMD(1: 6)\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'CY/DDD'\n                   MOVE WS-LS-DATA(1: 4)      TO STV0410B-IN-DATE\n                   MOVE WS-LS-DATA(6: 3)      TO STV0410B-IN-DATE(5: 3)\n                   PERFORM 0800-CONV-TO-GREG\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'CY/M/D'\n                   MOVE WS-LS-DATA(1: 4)      TO WS-I-CYMD\n                   MOVE WS-LS-DATA(6: 2)      TO WS-I-CYMD-M\n                   MOVE WS-LS-DATA(9: 2)      TO WS-I-CYMD-D\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'CYDDD '\n                   MOVE WS-LS-DATA(1: 7)      TO STV0410B-IN-DATE\n                   PERFORM 0800-CONV-TO-GREG\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'CYMD  '\n                   MOVE WS-LS-DATA-1X8        TO WS-I-CYMD\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'DDD   '\n                   MOVE WS-I-CYMD(1: 4)       TO STV0410B-IN-DATE\n                   MOVE WS-LS-DATA(1: 3)      TO STV0410B-IN-DATE(5: 3)\n                   PERFORM 0800-CONV-TO-GREG\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'HMM   '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-HMS-H\n                   MOVE WS-LS-DATA-3X4        TO WS-I-HMS-M\n               WHEN 'HMSM  '\n                   MOVE WS-LS-DATA            TO WS-I-HMS\n               WHEN 'H:MM  '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-HMS-H\n                   MOVE WS-LS-DATA-4X5        TO WS-I-HMS-M\n               WHEN 'H:M:SM'\n                   MOVE WS-LS-DATA-1X2        TO WS-I-HMS-H\n                   MOVE WS-LS-DATA-4X5        TO WS-I-HMS-M\n                   MOVE WS-LS-DATA-7X8        TO WS-I-HMS-S\n               WHEN 'HMP   '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-HMS-H\n                   MOVE WS-LS-DATA-3X4        TO WS-I-HMS-M\n                   MOVE WS-LS-DATA-5X6        TO WS-I-HMS-DAYS\n                   PERFORM 1500-CONVERT-TO-MILITARY\n               WHEN 'HMSP  '\n                   MOVE WS-LS-DATA            TO WS-I-HMS\n                   PERFORM 1500-CONVERT-TO-MILITARY\n               WHEN 'H:M P '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-HMS-H\n                   MOVE WS-LS-DATA-4X5        TO WS-I-HMS-M\n                   MOVE WS-LS-DATA-7X8        TO WS-I-HMS-DAYS\n                   PERFORM 1500-CONVERT-TO-MILITARY\n               WHEN 'H:MP  '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-HMS-H\n                   MOVE WS-LS-DATA-4X5        TO WS-I-HMS-M\n                   MOVE WS-LS-DATA(6: 2)      TO WS-I-HMS-DAYS\n                   PERFORM 1500-CONVERT-TO-MILITARY\n               WHEN 'H:M:SP'\n                   MOVE WS-LS-DATA-1X2        TO WS-I-HMS-H\n                   MOVE WS-LS-DATA-4X5        TO WS-I-HMS-M\n                   MOVE WS-LS-DATA-7X8        TO WS-I-HMS-S\n                   MOVE WS-LS-DATA(9: 2)      TO WS-I-HMS-DAYS\n                   PERFORM 1500-CONVERT-TO-MILITARY\n               WHEN 'KEY   '\n                   PERFORM 2100-CONVERT-FROM-KEY\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'M     '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-M\n               WHEN 'M/D/CY'\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-M\n                   MOVE WS-LS-DATA-4X5        TO WS-I-CYMD-D\n                   MOVE WS-LS-DATA(7: 4)      TO WS-I-CYMD(1: 4)\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'M/D   '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-M\n                   MOVE WS-LS-DATA(4: 2)      TO WS-I-CYMD-D\n               WHEN 'M/D/Y '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-M\n                   MOVE WS-LS-DATA(4: 2)      TO WS-I-CYMD-D\n                   MOVE WS-LS-DATA-7X8        TO WS-I-CYMD-Y\n                   PERFORM 0400-DETERMINE-CENTURY\n                   PERFORM 0400-CENTURY-OUTSIDE-RANGE\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'MD    '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-M\n                   MOVE WS-LS-DATA-3X4        TO WS-I-CYMD-D\n               WHEN 'MCY   '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-M\n                   MOVE WS-LS-DATA-3X4        TO WS-I-CYMD-C\n                   MOVE WS-LS-DATA-5X6        TO WS-I-CYMD-Y\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'MDCY  '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-M\n                   MOVE WS-LS-DATA-3X4        TO WS-I-CYMD-D\n                   MOVE WS-LS-DATA-5X6        TO WS-I-CYMD-C\n                   MOVE WS-LS-DATA-7X8        TO WS-I-CYMD-Y\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'MDY   '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-M\n                   MOVE WS-LS-DATA-3X4        TO WS-I-CYMD-D\n                   MOVE WS-LS-DATA-5X6        TO WS-I-CYMD-Y\n                   PERFORM 0400-DETERMINE-CENTURY\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'MMM   '\n                   PERFORM 1000-DETERMINE-MONTH-NBR\n               WHEN 'MMMCY '\n                   MOVE WS-LS-DATA-4X5        TO WS-I-CYMD-C\n                   MOVE WS-LS-DATA(6: 2)      TO WS-I-CYMD-Y\n                   MOVE SPACE                 TO WS-LS-DATA(4: )\n                   PERFORM 1000-DETERMINE-MONTH-NBR\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'MMMD  '\n                   MOVE WS-LS-DATA-4X5        TO WS-I-CYMD-D\n                   MOVE SPACE                 TO WS-LS-DATA(4: )\n                   PERFORM 1000-DETERMINE-MONTH-NBR\n               WHEN 'MMMYD '\n                   MOVE WS-LS-DATA-4X5        TO WS-I-CYMD-Y\n                   MOVE WS-LS-DATA(6: 2)      TO WS-I-CYMD-D\n                   MOVE SPACE                 TO WS-LS-DATA(4: )\n                   PERFORM 1000-DETERMINE-MONTH-NBR\n                   PERFORM 0400-DETERMINE-CENTURY\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'MONTH '\n                   PERFORM 1000-DETERMINE-MONTH-NBR\n               WHEN 'MY    '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-M\n                   MOVE WS-LS-DATA-3X4        TO WS-I-CYMD-Y\n                   PERFORM 0400-DETERMINE-CENTURY\n               WHEN 'Y     '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-Y\n                   PERFORM 0400-DETERMINE-CENTURY\n               WHEN 'Y/DDD '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-Y\n                   PERFORM 0400-DETERMINE-CENTURY\n                   MOVE WS-I-CYMD(1: 4)       TO STV0410B-IN-DATE\n                   MOVE WS-LS-DATA(4: 3)      TO STV0410B-IN-DATE(5: 3)\n                   PERFORM 0800-CONV-TO-GREG\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'Y/M/D '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-Y\n                   MOVE WS-LS-DATA(4: 2)      TO WS-I-CYMD-M\n                   MOVE WS-LS-DATA-7X8        TO WS-I-CYMD-D\n                   PERFORM 0400-DETERMINE-CENTURY\n                   PERFORM 0400-CENTURY-OUTSIDE-RANGE\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'YDDD  '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-Y\n                   PERFORM 0400-DETERMINE-CENTURY\n                   MOVE WS-I-CYMD(1: 4)       TO STV0410B-IN-DATE\n                   MOVE WS-LS-DATA(3: 3)      TO STV0410B-IN-DATE(5: 3)\n                   PERFORM 0800-CONV-TO-GREG\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'YM    '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-Y\n                   MOVE WS-LS-DATA-3X4        TO WS-I-CYMD-M\n                   PERFORM 0400-DETERMINE-CENTURY\n               WHEN 'YMD   '\n                   MOVE WS-LS-DATA(1: 6)      TO WS-I-CYMD-YMD\n                   PERFORM 0400-DETERMINE-CENTURY\n                   PERFORM 0450-EDIT-DATE\n               WHEN OTHER\n                   MOVE 300                   TO WS-ERROR-NBR\n           END-EVALUATE.\n\n      ****************************************\n      *    Y2K logic for rolling 80/20 window\n      ****************************************\n      *    8020 = current cy minus 80 = 80 years ago = cc\n      ****************************************\n      *    yy < 8020               '/'  =  cc+1\n      *    yy not < 8020           '/'  =  cc\n      *    yy < 8020               '-'  =  cc\n      *    yy not < 8020           '-'  =  cc-1\n      ****************************************\n       0400-DETERMINE-CENTURY.\n           IF WS-I-CYMD-Y-N < WS-1-8020-Y\n               MOVE WS-2-8020-C               TO WS-I-CYMD-C\n           ELSE\n               MOVE WS-1-8020-C               TO WS-I-CYMD-C.\n\n       0400-CENTURY-OUTSIDE-RANGE.\n           IF WS-LS-DATA-6 = '-'\n               IF WS-I-CYMD-Y-N < WS-1-8020-Y\n                   MOVE WS-1-8020-C           TO WS-I-CYMD-C\n               ELSE\n                   MOVE WS-3-8020-C           TO WS-I-CYMD-C.\n\n       0450-EDIT-DATE.\n           IF WS-ERROR-NBR = ZERO\n               CALL WS-CALL-STV0405B USING WS-I-CYMD\n               IF WS-I-CYMD-D NOT NUMERIC\n                   MOVE 0301                  TO WS-ERROR-NBR\n               ELSE IF WS-I-CYMD-M NOT NUMERIC\n                   MOVE 0302                  TO WS-ERROR-NBR\n               ELSE IF WS-I-CYMD-Y NOT NUMERIC\n                   MOVE 0303                  TO WS-ERROR-NBR\n               ELSE IF WS-I-CYMD-C NOT NUMERIC\n                   MOVE 0304                  TO WS-ERROR-NBR.\n\n       0500-CONVERT-FROM-STANDARD.\n           MOVE SPACE                         TO WS-LS-DATA.\n           MOVE WS-I-CYMD                     TO WS-O-CYMD.\n           MOVE WS-I-HMS                      TO WS-O-HMS.\n           EVALUATE WS-LS-OUT\n               WHEN SPACE\n                   MOVE WS-O-CYMD             TO WS-LS-DATA\n               WHEN 'AGE   '\n                   PERFORM 1800-CALC-AGE\n               WHEN 'CMDX  '\n                   MOVE WS-O-CYMD             TO WS-LS-DATA\n               WHEN 'CY    '\n               WHEN 'CYDX  '\n                   MOVE WS-O-CYMD(1: 4)       TO WS-LS-DATA\n               WHEN 'CY/DDD'\n                   PERFORM 0900-CONV-TO-JUL\n                   MOVE STV0410B-CYDDD(1: 4)  TO WS-LS-DATA(1: 4)\n                   MOVE '/'                   TO WS-LS-DATA(5: 1)\n                   MOVE STV0410B-CYDDD(5: 3)  TO WS-LS-DATA(6: 3)\n               WHEN 'CYM   '\n                   MOVE WS-O-CYMD-C           TO WS-LS-DATA-1X2\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA-3X4\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA-5X6\n               WHEN 'CY/M/D'\n                   MOVE WS-O-CYMD-C           TO WS-LS-DATA-1X2\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA-3X4\n                   MOVE '/'                   TO WS-LS-DATA(5: 1)\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA(6: 2)\n                   MOVE '/'                   TO WS-LS-DATA(8: 1)\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA(9: 2)\n               WHEN 'CY-M-D'\n                   MOVE WS-O-CYMD-C           TO WS-LS-DATA-1X2\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA-3X4\n                   MOVE '-'                   TO WS-LS-DATA(5: 1)\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA(6: 2)\n                   MOVE '-'                   TO WS-LS-DATA(8: 1)\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA(9: 2)\n               WHEN 'CYDDD '\n                   PERFORM 0900-CONV-TO-JUL\n                   MOVE STV0410B-CYDDD        TO WS-LS-DATA\n               WHEN 'CYMD  '\n                   MOVE WS-O-CYMD             TO WS-LS-DATA\n               WHEN 'D     '\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA-1X2\n               WHEN 'DAY   '\n                   PERFORM 1400-DETERMINE-DAY\n               WHEN 'DAYS  '\n                   PERFORM 1900-NBR-DAYS\n               WHEN 'DDD   '\n                   PERFORM 0900-CONV-TO-JUL\n                   MOVE STV0410B-CYDDD(5: 3)  TO WS-LS-DATA\n               WHEN 'HMM   '\n                   MOVE WS-O-HMS(1: 4)        TO WS-LS-DATA\n               WHEN 'HMSM  '\n                   MOVE WS-O-HMS-1X6          TO WS-LS-DATA\n               WHEN 'HMSM8 '\n                   MOVE FUNCTION CURRENT-DATE(15: 2) TO WS-O-HMS-DAYS\n                   MOVE WS-O-HMS              TO WS-LS-DATA\n               WHEN 'H:MM  '\n                   MOVE WS-O-HMS-H            TO WS-LS-DATA-1X2\n                   MOVE ':'                   TO WS-LS-DATA-3\n                   MOVE WS-O-HMS-M            TO WS-LS-DATA-4X5\n               WHEN 'H:M:SM'\n                   MOVE WS-O-HMS-H            TO WS-LS-DATA-1X2\n                   MOVE ':'                   TO WS-LS-DATA-3\n                   MOVE WS-O-HMS-M            TO WS-LS-DATA-4X5\n                   MOVE ':'                   TO WS-LS-DATA-6\n                   MOVE WS-O-HMS-S            TO WS-LS-DATA-7X8\n               WHEN 'HMP   '\n               WHEN 'HMSP  '\n               WHEN 'H:M P '\n               WHEN 'H:MP  '\n               WHEN 'H:M:SP'\n                   PERFORM 1500-CONVERT-FROM-MILITARY\n               WHEN 'KEY   '\n                   PERFORM 2100-CONVERT-TO-KEY\n               WHEN 'M     '\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA-1X2\n               WHEN 'M/D   '\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA-1X2\n                   MOVE '/'                   TO WS-LS-DATA-3\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA(4: 2)\n               WHEN 'M/D/CY'\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA-1X2\n                   MOVE '/'                   TO WS-LS-DATA-3\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA(4: 2)\n                   MOVE '/'                   TO WS-LS-DATA-6\n                   MOVE WS-O-CYMD-C           TO WS-LS-DATA-7X8\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA(9: 2)\n               WHEN 'M/D/Y '\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA-1X2\n                   MOVE '/'                   TO WS-LS-DATA-3\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA(4: 2)\n                   MOVE '/'                   TO WS-LS-DATA-6\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA-7X8\n               WHEN 'MD    '\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA-1X2\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA-3X4\n               WHEN 'MCY   '\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA-1X2\n                   MOVE WS-O-CYMD-C           TO WS-LS-DATA-3X4\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA-5X6\n               WHEN 'MDCY  '\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA-1X2\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA-3X4\n                   MOVE WS-O-CYMD-C           TO WS-LS-DATA-5X6\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA-7X8\n               WHEN 'MDY   '\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA-1X2\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA-3X4\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA-5X6\n               WHEN 'MIN   '\n                   PERFORM 1300-MIN-BETWEEN-TIME\n               WHEN 'MMM   '\n                   PERFORM 1100-DETERMINE-MONTH-NAME\n                   MOVE SPACE                 TO WS-LS-DATA(4: )\n               WHEN 'MMMCY '\n                   PERFORM 1100-DETERMINE-MONTH-NAME\n                   MOVE WS-O-CYMD-C           TO WS-LS-DATA-4X5\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA(6: 2)\n                   MOVE SPACE                 TO WS-LS-DATA(8: )\n               WHEN 'MMMD  '\n                   PERFORM 1100-DETERMINE-MONTH-NAME\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA-4X5\n                   MOVE SPACE                 TO WS-LS-DATA(6: )\n               WHEN 'MMMYD '\n                   PERFORM 1100-DETERMINE-MONTH-NAME\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA-4X5\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA(6: 2)\n                   MOVE SPACE                 TO WS-LS-DATA(8: )\n               WHEN 'MONTH '\n                   PERFORM 1100-DETERMINE-MONTH-NAME\n               WHEN 'MY    '\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA-1X2\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA-3X4\n               WHEN 'QTR   '\n                   PERFORM 2200-DETERMINE-QUARTER\n               WHEN 'SUFFIX'\n                   PERFORM 2000-DETERMINE-SUFFIX\n               WHEN 'Y     '\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA-1X2\n               WHEN 'Y/DDD '\n                   PERFORM 0900-CONV-TO-JUL\n                   MOVE STV0410B-CYDDD(3: 2)  TO WS-LS-DATA\n                   MOVE '/'                   TO WS-LS-DATA-3\n                   MOVE STV0410B-CYDDD(5: 3)  TO WS-LS-DATA(4: 3)\n               WHEN 'Y/M/D '\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA-1X2\n                   MOVE '/'                   TO WS-LS-DATA-3\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA(4: 2)\n                   MOVE '/'                   TO WS-LS-DATA-6\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA-7X8\n               WHEN 'YDDD  '\n                   PERFORM 0900-CONV-TO-JUL\n                   MOVE STV0410B-CYDDD(3: 5)  TO WS-LS-DATA\n               WHEN 'YM    '\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA-1X2\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA-3X4\n               WHEN 'YMD   '\n                   MOVE WS-O-CYMD-YMD         TO WS-LS-DATA\n               WHEN OTHER\n                   PERFORM 0700-OTHER-CALC\n           END-EVALUATE.\n\n       0700-OTHER-CALC.\n           IF WS-LS-OUT(2: 5) NUMERIC\n               IF WS-LS-OUT(1: 1) = '-' OR '+'\n                   MOVE WS-LS-OUT             TO WS-HOLD6\n                   PERFORM 1200-NBR-DAYS\n                   MOVE WS-2-CYMD-X           TO WS-LS-DATA\n               ELSE\n               IF WS-LS-OUT(1: 1) = 'I' OR 'D'\n                   PERFORM 1300-INCREMENT-TIME\n               ELSE\n                   MOVE 702                   TO WS-ERROR-NBR\n           ELSE\n           IF WS-LS-OUT(1: 2) = 'CM' OR 'CD' OR 'YM' OR 'YD' OR 'MY'\n               IF WS-LS-OUT(4: 1) = 'B' OR 'E'\n                 IF WS-LS-OUT(5: 1) = 'Y'\n                   IF WS-LS-OUT(6: 1) NUMERIC\n                       MOVE WS-LS-OUT(6: 1)   TO WS-EOM-NBR\n                       IF WS-LS-OUT(3: 1) = 'D'\n                           MOVE SPACE         TO WS-FUTURE-SW\n                           PERFORM 1700-DETERMINE-EOY\n                       ELSE\n                       IF WS-LS-OUT(3: 1) = 'F'\n                           MOVE 'Y'           TO WS-FUTURE-SW\n                           PERFORM 1700-DETERMINE-EOY\n                       ELSE\n                           MOVE 0708          TO WS-ERROR-NBR\n                   ELSE\n                       MOVE 0708              TO WS-ERROR-NBR\n                 ELSE\n                 IF WS-LS-OUT(5: 2) NUMERIC\n                     MOVE WS-LS-OUT(5: 2)     TO WS-EOM-NBR\n                     IF WS-LS-OUT(3: 1) = 'D'\n                         MOVE SPACE           TO WS-FUTURE-SW\n                         PERFORM 1600-DETERMINE-EOM\n                     ELSE\n                     IF WS-LS-OUT(3: 1) = 'F'\n                         MOVE 'Y'             TO WS-FUTURE-SW\n                         PERFORM 1600-DETERMINE-EOM\n                     ELSE\n                         MOVE 0706            TO WS-ERROR-NBR\n                 ELSE\n                     MOVE 0706                TO WS-ERROR-NBR\n               ELSE\n               IF WS-LS-OUT(4: 3) NUMERIC\n                   IF WS-LS-OUT(3: 1) = 'D'\n                       MOVE SPACE             TO WS-FUTURE-SW\n                       PERFORM 1600-DETERMINE-EOD\n                   ELSE\n                   IF WS-LS-OUT(3: 1) = 'F'\n                       MOVE 'Y'               TO WS-FUTURE-SW\n                       PERFORM 1600-DETERMINE-EOD\n                   ELSE\n                       MOVE 0709              TO WS-ERROR-NBR\n               ELSE\n                   MOVE 0709                  TO WS-ERROR-NBR\n           ELSE\n           IF WS-LS-OUT(1: 3) = 'CYD' OR 'CYF'\n               IF WS-LS-OUT(4: 3) NUMERIC\n                   PERFORM 1400-DETERMINE-YEAR\n               ELSE\n                   MOVE 0710                  TO WS-ERROR-NBR\n           ELSE\n           IF WS-LS-OUT(1: 3) = 'QMF' OR 'QMP' OR 'QFF' OR 'QFP'\n               IF WS-LS-OUT(4: 3) NUMERIC\n                   PERFORM 2300-DETERMINE-QTRS\n               ELSE\n                   MOVE 0711                  TO WS-ERROR-NBR\n           ELSE\n           IF WS-LS-OUT(1: 4) = 'DAYN'\n               IF WS-LS-OUT(5: 1) NUMERIC\n                   MOVE WS-LS-OUT(5: 1)       TO WS-DAYN\n                   PERFORM 1400-DETERMINE-DAY\n               ELSE\n                   MOVE 0712                  TO WS-ERROR-NBR\n           ELSE\n               MOVE 0700                      TO WS-ERROR-NBR.\n\n       0800-CONV-TO-GREG.\n           MOVE SPACE                         TO STV0410B-CYDDD\n                                                 STV0410B-CYMD.\n           CALL WS-CALL-STV0410B USING WS-STV0410B-FIELDS.\n           IF STV0410B-CYMD NUMERIC\n               IF STV0410B-CYMD NOT = ZERO\n                   MOVE STV0410B-CYMD         TO WS-I-CYMD\n               ELSE\n                   MOVE 800                   TO WS-ERROR-NBR\n           ELSE\n               MOVE 801                       TO WS-ERROR-NBR.\n\n       0900-CONV-TO-JUL.\n           MOVE WS-O-CYMD                     TO STV0410B-IN-DATE.\n           MOVE SPACE                         TO STV0410B-CYDDD\n                                                 STV0410B-CYMD.\n           CALL WS-CALL-STV0410B USING WS-STV0410B-FIELDS.\n           IF STV0410B-CYDDD NUMERIC\n               IF STV0410B-CYDDD NOT = ZERO\n                   CONTINUE\n               ELSE\n                   MOVE 900                   TO WS-ERROR-NBR\n           ELSE\n               MOVE 901                       TO WS-ERROR-NBR.\n\n       1000-DETERMINE-MONTH-NBR.\n           EVALUATE WS-LS-DATA\n               WHEN 'JAN       '   MOVE '01'  TO WS-I-CYMD-M\n               WHEN 'JANUARY   '   MOVE '01'  TO WS-I-CYMD-M\n               WHEN 'FEB       '   MOVE '02'  TO WS-I-CYMD-M\n               WHEN 'FEBRUARY  '   MOVE '02'  TO WS-I-CYMD-M\n               WHEN 'MAR       '   MOVE '03'  TO WS-I-CYMD-M\n               WHEN 'MARCH     '   MOVE '03'  TO WS-I-CYMD-M\n               WHEN 'APR       '   MOVE '04'  TO WS-I-CYMD-M\n               WHEN 'APRIL     '   MOVE '04'  TO WS-I-CYMD-M\n               WHEN 'MAY       '   MOVE '05'  TO WS-I-CYMD-M\n               WHEN 'JUN       '   MOVE '06'  TO WS-I-CYMD-M\n               WHEN 'JUNE      '   MOVE '06'  TO WS-I-CYMD-M\n               WHEN 'JUL       '   MOVE '07'  TO WS-I-CYMD-M\n               WHEN 'JULY      '   MOVE '07'  TO WS-I-CYMD-M\n               WHEN 'AUG       '   MOVE '08'  TO WS-I-CYMD-M\n               WHEN 'AUGUST    '   MOVE '08'  TO WS-I-CYMD-M\n               WHEN 'SEP       '   MOVE '09'  TO WS-I-CYMD-M\n               WHEN 'SEPTEMBER '   MOVE '09'  TO WS-I-CYMD-M\n               WHEN 'OCT       '   MOVE '10'  TO WS-I-CYMD-M\n               WHEN 'OCTOBER   '   MOVE '10'  TO WS-I-CYMD-M\n               WHEN 'NOV       '   MOVE '11'  TO WS-I-CYMD-M\n               WHEN 'NOVEMBER  '   MOVE '11'  TO WS-I-CYMD-M\n               WHEN 'DEC       '   MOVE '12'  TO WS-I-CYMD-M\n               WHEN 'DECEMBER  '   MOVE '12'  TO WS-I-CYMD-M\n               WHEN OTHER          MOVE 1000  TO WS-ERROR-NBR\n           END-EVALUATE.\n\n       1100-DETERMINE-MONTH-NAME.\n           MOVE SPACE                         TO WS-STV0295B-FIELDS.\n           MOVE WS-O-CYMD-M                   TO STV0295B-MM.\n           CALL WS-CALL-STV0295B USING WS-STV0295B-FIELDS.\n           IF STV0295B-YEAR = '****'\n               MOVE 1100                      TO WS-ERROR-NBR\n           ELSE\n               MOVE STV0295B-MONTH            TO WS-LS-DATA.\n\n       1200-NBR-DAYS.\n           MOVE WS-HOLD6(2: 5)                TO STV0420B-DAYS.\n           MOVE WS-O-CYMD                     TO STV0420B-PAST-DATE.\n           IF WS-HOLD6(1: 1) = '-'\n               MOVE STV0420B-PAST-DATE        TO STV0420B-FUTURE-DATE\n               MOVE SPACE                     TO STV0420B-PAST-DATE\n           ELSE\n               MOVE SPACE                     TO STV0420B-FUTURE-DATE.\n           CALL WS-CALL-STV0420B USING WS-STV0420B-FIELDS.\n           IF STV0420B-DAYS = '*****'\n               MOVE 1200                      TO WS-ERROR-NBR\n           ELSE\n           IF WS-HOLD6(1: 1) = '-'\n               MOVE STV0420B-PAST-DATE        TO WS-2-CYMD-X\n           ELSE\n               MOVE STV0420B-FUTURE-DATE      TO WS-2-CYMD-X.\n\n       1300-INCREMENT-TIME.\n           MOVE ZERO                          TO WS-REMAINDER\n                                                 WS-EOM-NBR.\n           MOVE WS-LS-OUT(2: 5)               TO WS-QUOTIENT.\n           IF WS-QUOTIENT > 59\n               DIVIDE WS-QUOTIENT BY 60 GIVING WS-QUOTIENT\n                   REMAINDER WS-REMAINDER\n               IF WS-LS-OUT(1: 1) = 'I'\n                   PERFORM 1300-INCREMENT-HOUR WS-QUOTIENT TIMES\n               ELSE\n                   PERFORM 1300-DECREMENT-HOUR WS-QUOTIENT TIMES\n           ELSE\n               MOVE WS-QUOTIENT               TO WS-REMAINDER.\n           IF WS-LS-OUT(1: 1) = 'I'\n               PERFORM 1300-INCREMENT-MIN WS-REMAINDER TIMES\n           ELSE\n               PERFORM 1300-DECREMENT-MIN WS-REMAINDER TIMES.\n           MOVE WS-I-HMS                      TO WS-LS-DATA.\n           MOVE WS-EOM-NBR                    TO WS-LS-DATA-7X8.\n           IF WS-LS-OUT(1: 1) = 'I'\n               MOVE '+00000'                  TO WS-HOLD6\n           ELSE\n               MOVE '-00000'                  TO WS-HOLD6.\n           MOVE WS-LS-DATA-7X8                TO WS-HOLD6(5: 2).\n           PERFORM 1200-NBR-DAYS.\n           MOVE WS-2-CYMD-X                   TO WS-LS-DATA2.\n\n       1300-INCREMENT-MIN.\n           ADD 1                              TO WS-I-HMS-M-N.\n           IF WS-I-HMS-M-N > 59\n               MOVE ZERO                      TO WS-I-HMS-M-N\n               PERFORM 1300-INCREMENT-HOUR.\n\n       1300-DECREMENT-MIN.\n           IF WS-I-HMS-M-N = ZERO\n               MOVE 59                        TO WS-I-HMS-M-N\n               PERFORM 1300-DECREMENT-HOUR\n           ELSE\n               SUBTRACT 1 FROM WS-I-HMS-M-N.\n\n       1300-INCREMENT-HOUR.\n           ADD 1                              TO WS-I-HMS-H-N.\n           IF WS-I-HMS-H-N > 23\n               ADD 1                          TO WS-EOM-NBR\n               MOVE ZERO                      TO WS-I-HMS-H-N.\n\n       1300-DECREMENT-HOUR.\n           IF WS-I-HMS-H-N = ZERO\n               MOVE 23                        TO WS-I-HMS-H-N\n               ADD 1                          TO WS-EOM-NBR\n           ELSE\n               SUBTRACT 1 FROM WS-I-HMS-H-N.\n\n      *---------------------------------------\n      *    past/curr time: determine # minutes before 00:00 this morning\n      *    future time: determine # minutes after 00:00 this morning\n      *    determine difference\n      *    value LS-DATA2 with past or future date\n      *---------------------------------------\n       1300-MIN-BETWEEN-TIME.\n           IF WS-I-HMS-DAYS = SPACE\n               MOVE '00'                      TO WS-I-HMS-DAYS.\n           IF WS-I-HMS2-DAYS = SPACE\n               MOVE '00'                      TO WS-I-HMS2-DAYS.\n           IF WS-I-HMS NOT NUMERIC\n               OR WS-I-HMS2 NOT NUMERIC\n               MOVE 1300                      TO WS-ERROR-NBR\n           ELSE\n               COMPUTE WS-PAST-MIN = WS-I-HMS-DAYS-N * 1440\n               COMPUTE WS-QUOTIENT = WS-I-HMS-H-N * 60\n               ADD WS-I-HMS-M-N               TO WS-QUOTIENT\n               SUBTRACT WS-QUOTIENT FROM WS-PAST-MIN\n               COMPUTE WS-FUTURE-MIN = WS-I-HMS2-DAYS-N * 1440\n               COMPUTE WS-QUOTIENT = WS-I-HMS2-H-N * 60\n               ADD WS-I-HMS2-M-N              TO WS-QUOTIENT\n               ADD WS-QUOTIENT                TO WS-FUTURE-MIN\n               ADD WS-PAST-MIN                TO WS-FUTURE-MIN\n               MOVE WS-FUTURE-MIN             TO WS-LS-DATA(1: 6)\n               IF WS-I-HMS2-DAYS-N > ZERO\n                 IF WS-I-HMS-DAYS-N > ZERO\n                     CONTINUE\n                 ELSE\n                     MOVE '+00000'            TO WS-HOLD6\n                     MOVE WS-I-HMS2-DAYS-N    TO WS-HOLD6(5: 2)\n                     PERFORM 1200-NBR-DAYS\n                     MOVE WS-2-CYMD-X         TO WS-LS-DATA2\n               ELSE\n               IF WS-I-HMS-DAYS-N > ZERO\n                   MOVE '-00000'              TO WS-HOLD6\n                   MOVE WS-I-HMS-DAYS-N       TO WS-HOLD6(5: 2)\n                   PERFORM 1200-NBR-DAYS\n                   MOVE WS-2-CYMD-X           TO WS-LS-DATA2.\n\n       1400-DETERMINE-DAY.\n           MOVE WS-O-CYMD                     TO STV0805B-CCYYMMDD.\n           MOVE SPACE                         TO STV0805B-DAY.\n           MOVE ZERO                          TO STV0805B-NBR-DAY.\n           CALL WS-CALL-STV0805B USING WS-STV0805B-FIELDS.\n           IF STV0805B-NBR-DAY = '00'\n               OR STV0805B-DAY = SPACE\n               MOVE 1400                      TO WS-ERROR-NBR\n           ELSE\n           IF WS-DAYN > ZERO\n               MOVE '000000000'               TO WS-LS-DATA(1: WS-DAYN)\n               MOVE STV0805B-NBR-DAY(2: 1)    TO WS-LS-DATA(WS-DAYN: 1)\n               MOVE ZERO                      TO WS-DAYN\n           ELSE\n               MOVE STV0805B-DAY              TO WS-LS-DATA\n               MOVE STV0805B-NBR-DAY(2: 1)    TO WS-LS-DATA(10: 1).\n\n       1400-DETERMINE-YEAR.\n           MOVE WS-O-CYMD                     TO WS-2-CYMD.\n           MOVE WS-LS-OUT(4: 3)               TO WS-FUTURE-MIN.\n           IF WS-LS-OUT(1: 3) = 'CYD'\n               COMPUTE WS-2-CYMD-CY = WS-2-CYMD-CY - WS-FUTURE-MIN\n           ELSE\n               COMPUTE WS-2-CYMD-CY = WS-2-CYMD-CY + WS-FUTURE-MIN.\n           MOVE WS-2-CYMD-CY                  TO WS-LS-DATA(1: 4).\n\n       1500-CONVERT-TO-MILITARY.\n           IF WS-I-HMS-DAYS NUMERIC\n               MOVE 1500                      TO WS-ERROR-NBR\n           ELSE\n               MOVE WS-I-HMS                  TO WS-HOLD8\n               CALL WS-CALL-STV0320B USING WS-I-HMS\n               IF WS-I-HMS = WS-HOLD8\n                   MOVE 1500                  TO WS-ERROR-NBR.\n\n       1500-CONVERT-FROM-MILITARY.\n           MOVE WS-O-HMS                      TO WS-HOLD8.\n           CALL WS-CALL-STV0320B USING WS-O-HMS.\n           IF WS-O-HMS = WS-HOLD8\n               MOVE 1502                      TO WS-ERROR-NBR\n           ELSE\n           IF WS-LS-OUT = 'HMP   '\n               MOVE WS-O-HMS-H                TO WS-LS-DATA-1X2\n               MOVE WS-O-HMS-M                TO WS-LS-DATA-3X4\n               MOVE WS-O-HMS-DAYS             TO WS-LS-DATA-5X6\n           ELSE\n           IF WS-LS-OUT = 'HMSP  '\n               MOVE WS-O-HMS-H                TO WS-LS-DATA-1X2\n               MOVE WS-O-HMS-M                TO WS-LS-DATA-3X4\n               MOVE WS-O-HMS-S                TO WS-LS-DATA-5X6\n               MOVE WS-O-HMS-DAYS             TO WS-LS-DATA-7X8\n           ELSE\n           IF WS-LS-OUT = 'H:M P '\n               MOVE WS-O-HMS-H                TO WS-LS-DATA-1X2\n               MOVE ':'                       TO WS-LS-DATA-3\n               MOVE WS-O-HMS-M                TO WS-LS-DATA-4X5\n               MOVE SPACE                     TO WS-LS-DATA-6\n               MOVE WS-O-HMS-DAYS             TO WS-LS-DATA-7X8\n           ELSE\n           IF WS-LS-OUT = 'H:MP  '\n               MOVE WS-O-HMS-H                TO WS-LS-DATA-1X2\n               MOVE ':'                       TO WS-LS-DATA-3\n               MOVE WS-O-HMS-M                TO WS-LS-DATA-4X5\n               MOVE WS-O-HMS-DAYS             TO WS-LS-DATA(6: 2)\n           ELSE\n           IF WS-LS-OUT = 'H:M:SP'\n               MOVE WS-O-HMS-H                TO WS-LS-DATA-1X2\n               MOVE ':'                       TO WS-LS-DATA-3\n               MOVE WS-O-HMS-M                TO WS-LS-DATA-4X5\n               MOVE ':'                       TO WS-LS-DATA-6\n               MOVE WS-O-HMS-S                TO WS-LS-DATA-7X8\n               MOVE WS-O-HMS-DAYS             TO WS-LS-DATA(9: 2)\n           ELSE\n               MOVE WS-O-HMS                  TO WS-LS-DATA.\n\n       1600-DETERMINE-EOD.\n           IF WS-FUTURE-SW = 'Y'\n               MOVE '+00'                     TO WS-HOLD6(1: 3)\n           ELSE\n               MOVE '-00'                     TO WS-HOLD6(1: 3).\n           MOVE WS-LS-OUT(4: 3)               TO WS-HOLD6(4: 3).\n           PERFORM 1200-NBR-DAYS.\n           IF WS-LS-OUT(1: 3) = 'CDD' OR 'CDF'\n               MOVE WS-2-CYMD-X               TO WS-O-CYMD\n               PERFORM 0900-CONV-TO-JUL\n               MOVE STV0410B-CYDDD            TO WS-LS-DATA\n           ELSE\n           IF WS-LS-OUT(1: 3) = 'YDD' OR 'YDF'\n               MOVE WS-2-CYMD-X               TO WS-O-CYMD\n               PERFORM 0900-CONV-TO-JUL\n               MOVE STV0410B-CYDDD(3: 5)      TO WS-LS-DATA\n           ELSE\n           IF WS-LS-OUT(1: 3) = 'CMD' OR 'CMF'\n               MOVE WS-2-CYMD-X               TO WS-LS-DATA\n           ELSE\n           IF WS-LS-OUT(1: 3) = 'MYD' OR 'MYF'\n               MOVE WS-2-CYMD-M               TO WS-LS-DATA-1X2\n               MOVE WS-2-CYMD-D               TO WS-LS-DATA-3X4\n               MOVE WS-2-CYMD-Y               TO WS-LS-DATA-5X6\n           ELSE\n               MOVE WS-2-CYMD-X(3: 6)         TO WS-LS-DATA.\n\n       1600-DETERMINE-EOM.\n           MOVE WS-O-CYMD                     TO WS-2-CYMD.\n           IF WS-FUTURE-SW = 'Y'\n               PERFORM WS-EOM-NBR TIMES\n                   ADD 1 TO WS-2-CYMD-M\n                   IF WS-2-CYMD-M > 12\n                       MOVE 01                TO WS-2-CYMD-M\n                       ADD 1 TO WS-2-CYMD-CY\n                   END-IF\n               END-PERFORM\n           ELSE\n               PERFORM WS-EOM-NBR TIMES\n                   SUBTRACT 1 FROM WS-2-CYMD-M\n                   IF WS-2-CYMD-M = ZERO\n                       MOVE 12                TO WS-2-CYMD-M\n                       SUBTRACT 1 FROM WS-2-CYMD-CY\n                   END-IF\n               END-PERFORM\n           END-IF.\n           PERFORM 2400-GET-EOM-DD.\n           IF WS-ERROR-NBR > ZERO\n               CONTINUE\n           ELSE\n           IF WS-LS-OUT(4: 1) = 'B'\n               MOVE 01                        TO WS-2-CYMD-D.\n           IF WS-ERROR-NBR > ZERO\n               CONTINUE\n           ELSE\n           IF WS-LS-OUT(1: 4) = 'CDDE' OR 'CDFE'\n                             OR 'CDDB' OR 'CDFB'\n               MOVE WS-2-CYMD-X               TO WS-O-CYMD\n               PERFORM 0900-CONV-TO-JUL\n               MOVE STV0410B-CYDDD            TO WS-LS-DATA\n           ELSE\n           IF WS-LS-OUT(1: 4) = 'YDDE' OR 'YDFE'\n                             OR 'YDDB' OR 'YDFB'\n               MOVE WS-2-CYMD-X               TO WS-O-CYMD\n               PERFORM 0900-CONV-TO-JUL\n               MOVE STV0410B-CYDDD(3: 5)      TO WS-LS-DATA\n           ELSE\n           IF WS-LS-OUT(1: 4) = 'CMDE' OR 'CMFE'\n                             OR 'CMDB' OR 'CMFB'\n               MOVE WS-2-CYMD-X               TO WS-LS-DATA\n           ELSE\n           IF WS-LS-OUT(1: 4) = 'MYDE' OR 'MYFE'\n                             OR 'MYDB' OR 'MYFB'\n               MOVE WS-2-CYMD-M               TO WS-LS-DATA-1X2\n               MOVE WS-2-CYMD-D               TO WS-LS-DATA-3X4\n               MOVE WS-2-CYMD-Y               TO WS-LS-DATA-5X6\n           ELSE\n               MOVE WS-2-CYMD-X(3: 6)         TO WS-LS-DATA.\n\n       1700-DETERMINE-EOY.\n           MOVE WS-O-CYMD                     TO WS-2-CYMD.\n           IF WS-FUTURE-SW = 'Y'\n               PERFORM WS-EOM-NBR TIMES\n                   ADD 1 TO WS-2-CYMD-CY\n               END-PERFORM\n           ELSE\n               PERFORM WS-EOM-NBR TIMES\n                   SUBTRACT 1 FROM WS-2-CYMD-CY\n               END-PERFORM\n           END-IF.\n           IF WS-LS-OUT(4: 1) = 'B'\n               MOVE 01                        TO WS-2-CYMD-M\n               MOVE 01                        TO WS-2-CYMD-D\n           ELSE\n               MOVE 12                        TO WS-2-CYMD-M\n               MOVE 31                        TO WS-2-CYMD-D.\n           IF WS-LS-OUT(1: 5) = 'CDDEY' OR 'CDFEY'\n                             OR 'CDDBY' OR 'CDFBY'\n               MOVE WS-2-CYMD-X               TO WS-O-CYMD\n               PERFORM 0900-CONV-TO-JUL\n               MOVE STV0410B-CYDDD            TO WS-LS-DATA\n           ELSE\n           IF WS-LS-OUT(1: 5) = 'YDDEY' OR 'YDFEY'\n                             OR 'YDDBY' OR 'YDFBY'\n               MOVE WS-2-CYMD-X               TO WS-O-CYMD\n               PERFORM 0900-CONV-TO-JUL\n               MOVE STV0410B-CYDDD(3: 5)      TO WS-LS-DATA\n           ELSE\n           IF WS-LS-OUT(1: 5) = 'CMDEY' OR 'CMFEY'\n                             OR 'CMDBY' OR 'CMFBY'\n               MOVE WS-2-CYMD-X               TO WS-LS-DATA\n           ELSE\n           IF WS-LS-OUT(1: 5) = 'MYDEY' OR 'MYFEY'\n                             OR 'MYDBY' OR 'MYFBY'\n               MOVE WS-2-CYMD-M               TO WS-LS-DATA-1X2\n               MOVE WS-2-CYMD-D               TO WS-LS-DATA-3X4\n               MOVE WS-2-CYMD-Y               TO WS-LS-DATA-5X6\n           ELSE\n               MOVE WS-2-CYMD-X(3: 6)         TO WS-LS-DATA.\n\n      *---------------------------------------\n      *    BIRTHDATE MUST BE PROVIDED AS INPUT.  AS-OF-DATE\n      *    IS ALWAYS ASSUMED TO BE CURRENT DATE.\n      *---------------------------------------\n       1800-CALC-AGE.\n           MOVE SPACE                         TO WS-STV0280B-FIELDS.\n           IF WS-LS-DATA2 = SPACE\n               MOVE WS-1-CYMD                 TO STV0280B-AS-OF-CYMD\n           ELSE\n               MOVE WS-LS-DATA2               TO STV0280B-AS-OF-CYMD.\n           MOVE WS-O-CYMD                     TO STV0280B-DOB-CYMD.\n           CALL WS-CALL-STV0280B USING WS-STV0280B-FIELDS.\n           IF STV0280B-YEARS = '***'\n               MOVE 1800                      TO WS-ERROR-NBR\n           ELSE\n               MOVE STV0280B-YEARS            TO WS-LS-DATA\n               MOVE STV0280B-MONTHS           TO WS-LS-DATA(4: 2)\n               MOVE STV0280B-DAYS             TO WS-LS-DATA(6: 2).\n\n       1900-NBR-DAYS.\n           MOVE SPACE                         TO STV0420B-DAYS.\n           MOVE WS-O-CYMD                     TO STV0420B-PAST-DATE.\n           IF WS-LS-DATA2 = SPACE\n               MOVE WS-1-CYMD                 TO STV0420B-FUTURE-DATE\n           ELSE\n               MOVE WS-LS-DATA2               TO STV0420B-FUTURE-DATE.\n           CALL WS-CALL-STV0420B USING WS-STV0420B-FIELDS.\n           IF STV0420B-DAYS = '*****'\n               MOVE 1900                      TO WS-ERROR-NBR\n           ELSE\n               MOVE STV0420B-DAYS             TO WS-LS-DATA\n               IF WS-LS-DATA2 = SPACE\n                   MOVE WS-1-CYMD             TO WS-LS-DATA2.\n\n       2000-DETERMINE-SUFFIX.\n           MOVE SPACE                         TO WS-STV0295B-FIELDS.\n           MOVE WS-O-CYMD                     TO STV0295B-DATE.\n           CALL WS-CALL-STV0295B USING WS-STV0295B-FIELDS.\n           IF STV0295B-YEAR = '****'\n               MOVE 2000                      TO WS-ERROR-NBR\n           ELSE\n               MOVE STV0295B-MONTH            TO WS-LS-DATA\n               MOVE STV0295B-DAY              TO WS-LS-IN\n               MOVE STV0295B-YEAR             TO WS-LS-OUT.\n\n       2100-CONVERT-FROM-KEY.\n           IF WS-LS-DATA-1X8 NUMERIC\n               MOVE WS-LS-DATA-1X8            TO WS-REV-DATE\n               SUBTRACT WS-REV-DATE FROM 50000000 GIVING WS-2-CYMD\n               MOVE WS-2-CYMD                 TO WS-I-CYMD\n           ELSE\n               MOVE 2100                      TO WS-ERROR-NBR.\n\n       2100-CONVERT-TO-KEY.\n           MOVE WS-O-CYMD                     TO WS-REV-DATE.\n           SUBTRACT WS-REV-DATE FROM 50000000 GIVING WS-2-CYMD.\n           MOVE WS-2-CYMD                     TO WS-LS-DATA-1X8.\n\n       2200-DETERMINE-QUARTER.\n           IF WS-O-CYMD-M = '01' OR '02' OR '03'\n               MOVE '1'                       TO WS-LS-DATA\n           ELSE IF WS-O-CYMD-M = '04' OR '05' OR '06'\n               MOVE '2'                       TO WS-LS-DATA\n           ELSE IF WS-O-CYMD-M = '07' OR '08' OR '09'\n               MOVE '3'                       TO WS-LS-DATA\n           ELSE IF WS-O-CYMD-M = '10' OR '11' OR '12'\n               MOVE '4'                       TO WS-LS-DATA.\n\n      *---------------------------------------\n      *    Return a date range for the specified number\n      *    of quarters.  If fixed quarters requested, round\n      *    to the nearest 123 456 789 101112 grouping.\n      *---------------------------------------\n       2300-DETERMINE-QTRS.\n           MOVE WS-O-CYMD                     TO WS-2-CYMD.\n           MOVE WS-LS-OUT(4: 3)               TO WS-FUTURE-MIN.\n           PERFORM 2300-SUM-QTRS-BY-THREE WS-FUTURE-MIN TIMES.\n           IF WS-LS-OUT(2: 1) = 'F'\n               IF WS-LS-OUT(3: 1) = 'P'\n                   PERFORM 2300-SUM-QTRS-BY-ONE\n                       UNTIL WS-2-CYMD-M = 1 OR 4 OR 7 OR 10\n               ELSE\n                   PERFORM 2300-SUM-QTRS-BY-ONE\n                       UNTIL WS-2-CYMD-M = 3 OR 6 OR 9 OR 12.\n           IF WS-LS-OUT(3: 1) = 'P'\n               MOVE 01                        TO WS-2-CYMD-D\n               MOVE WS-2-CYMD-X               TO WS-LS-DATA\n               PERFORM 2300-ADVANCE-MM\n               PERFORM 2300-ADVANCE-MM\n               PERFORM 2400-GET-EOM-DD\n               MOVE WS-2-CYMD-X               TO WS-LS-DATA2\n           ELSE\n               PERFORM 2400-GET-EOM-DD\n               MOVE WS-2-CYMD-X               TO WS-LS-DATA2\n               PERFORM 2300-RETRACT-MM\n               PERFORM 2300-RETRACT-MM\n               MOVE 01                        TO WS-2-CYMD-D\n               MOVE WS-2-CYMD-X               TO WS-LS-DATA.\n\n       2300-SUM-QTRS-BY-THREE.\n           PERFORM 2300-SUM-QTRS-BY-ONE.\n           PERFORM 2300-SUM-QTRS-BY-ONE.\n           PERFORM 2300-SUM-QTRS-BY-ONE.\n\n       2300-SUM-QTRS-BY-ONE.\n           IF WS-LS-OUT(3: 1) = 'P'\n               PERFORM 2300-RETRACT-MM\n           ELSE\n               PERFORM 2300-ADVANCE-MM.\n\n       2300-ADVANCE-MM.\n           ADD 1                              TO WS-2-CYMD-M.\n           IF WS-2-CYMD-M > 12\n               MOVE 1                         TO WS-2-CYMD-M\n               ADD 1                          TO WS-2-CYMD-CY.\n\n       2300-RETRACT-MM.\n           SUBTRACT 1 FROM WS-2-CYMD-M.\n           IF WS-2-CYMD-M < 1\n               MOVE 12                        TO WS-2-CYMD-M\n               SUBTRACT 1 FROM WS-2-CYMD-CY.\n\n      *---------------------------------------\n      *    Return the highest day in a particular month.\n      *---------------------------------------\n       2400-GET-EOM-DD.\n           MOVE SPACE                     TO WS-STV0295B-FIELDS.\n           MOVE WS-2-CYMD-C               TO STV0295B-CC.\n           MOVE WS-2-CYMD-Y               TO STV0295B-YY.\n           MOVE WS-2-CYMD-M               TO STV0295B-MM.\n           MOVE SPACE                     TO STV0295B-DD.\n           CALL WS-CALL-STV0295B USING WS-STV0295B-FIELDS.\n           IF STV0295B-YEAR = '****'\n               MOVE 1600                  TO WS-ERROR-NBR\n           ELSE\n               MOVE STV0295B-DD           TO WS-2-CYMD-D.\n\n       4000-RETURN-ERROR.\n           MOVE 'ERROR     '                  TO WS-LS-DATA.\n           MOVE WS-ERROR-NBR                  TO WS-LS-DATA(7: 4).\n\n       4200-EXIT-PROGRAM.\n           MOVE WS-LS-DATA                    TO LS-DATA.\n           MOVE WS-LS-DATA2                   TO LS-DATA2.\n           MOVE WS-LS-IN                      TO LS-IN.\n           MOVE WS-LS-OUT                     TO LS-OUT.\n           GOBACK.\n\n      ************************************ END STV0400B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV0400T": {"ttr": 18693, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00%\\x01\\x191\\x7f\\x01\\x192?\\x12V\\x00E\\x00@\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2019-11-13T00:00:00", "modifydate": "2019-11-19T12:56:25", "lines": 69, "newlines": 64, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  STV0400T: test STV0400B'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    STV0400T.\n       AUTHOR.        Jim Iannone.\n      *****************************************************************\n      *    @@@ II program to test calling \"STV0400B\"\n      *****************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      *    Program-ID  : STV0400T\n      *    Date written: 03/06/1998\n      *    Programmer  : JIM IANNONE\n      *\n      *    Used to test calling the Y2K date and time formatting\n      *    program STV0400B\n      *\n      *****************************************************************\n\n       ENVIRONMENT DIVISION.\n       DATA DIVISION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n                ' WORKING-STORAGE STV0400T START '.\n\n       01  WS-DATE-FIELDS.\n           05  WS-STV0400B-FIELDS.\n               10  STV0400B-DATA       PIC  X(10).\n               10  STV0400B-DATA2      PIC  X(10).\n               10  STV0400B-IN         PIC  X(06).\n               10  STV0400B-OUT        PIC  X(06).\n           05  WS-CALL-STV0400B        PIC  X(08)    VALUE 'STV0400B'.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  END STV0400T  '.\n\n       LINKAGE SECTION.\n\n       01  PARM-FIELDS.\n           05  PARM-LENGTH             PIC S9(04)    COMP.\n           05  PARM-DATA               PIC  X(10).\n           05  PARM-DATA2              PIC  X(10).\n           05  PARM-IN                 PIC  X(06).\n           05  PARM-OUT                PIC  X(06).\n           05  PARM-FACILITY           PIC  X.\n\n       PROCEDURE DIVISION USING PARM-FIELDS.\n\n       0100-START-PROCESS.\n           MOVE PARM-DATA                     TO STV0400B-DATA.\n           MOVE PARM-DATA2                    TO STV0400B-DATA2.\n           MOVE PARM-IN                       TO STV0400B-IN.\n           MOVE PARM-OUT                      TO STV0400B-OUT.\n           DISPLAY '**** ' WS-STV0400B-FIELDS '  BEFORE '.\n           CALL WS-CALL-STV0400B USING WS-STV0400B-FIELDS.\n           DISPLAY '**** ' WS-STV0400B-FIELDS '  AFTER  '.\n           DISPLAY '**** 11111111112222222222333333444444'.\n           DISPLAY '     '.\n           DISPLAY '     '.\n           STOP RUN.\n\n      ************************************ end STV0400T\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STV0405B": {"ttr": 18695, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00Y\\x01\\x19\\x01_\\x01\\x192?\\x10W\\x00\\x9f\\x08\\x0b\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-01-15T00:00:00", "modifydate": "2019-11-19T10:57:59", "lines": 159, "newlines": 2059, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  STV0405B: edit an 8 character CYMD date'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    STV0405B.\n       AUTHOR.        JIM IANNONE.\n      ******************************************************************\n      *@@@ C3 edit an 8 character CYMD or CYDDD date\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * Program-id  : STV0405B\n      * Project #   : 930105 for STV0305B/STV0205B\n      * Date written: 03/11/98\n      * Programmer  : Jim Iannone\n      *               This program accepts a date in the form CYMD\n      *               and edits the date.  It will place '**' in any\n      *               CC, YY, MM, or DD field which is invalid.\n      *\n      *               Note:  if date is received as '19925 6 ' (perhaps\n      *               because an examine turned underscores into spaces\n      *               in an online field) the date is returned as\n      *               '19920506'.\n      *\n      *               recompiled in OS390 Cobol from STV0205B\n      ******************************************************************\n      * Date changed: 04/07/2006\n      * Programmer  : Jim Iannone\n      *               compile with Cobol 3 with DYNAM option\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n       DATA DIVISION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' WORKING-STORAGE STV0405B START '.\n\n       01  WS-DATE-FIELDS.\n           05  WS-8-DATE               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-8-DATE.\n               10  WS-8-CC             PIC  XX.\n               10  WS-8-YY             PIC  XX.\n               10  WS-8-MM             PIC  XX.\n               10  WS-8-DD             PIC  XX.\n           05  FILLER REDEFINES WS-8-DATE.\n               10  WS-8-C1             PIC  X.\n               10  WS-8-C2             PIC  X.\n               10  WS-8-Y1             PIC  X.\n               10  WS-8-Y2             PIC  X.\n               10  WS-8-M1             PIC  X.\n               10  WS-8-M2             PIC  X.\n               10  WS-8-D1             PIC  X.\n               10  WS-8-D2             PIC  X.\n           05  FILLER REDEFINES WS-8-DATE.\n               10  WS-8-CY             PIC  X(04).\n               10  FILLER              PIC  X(04).\n           05  WS-8-DATE-N             PIC  9(08)    VALUE ZERO.\n           05  FILLER REDEFINES WS-8-DATE-N.\n               10  WS-8-CC-N           PIC  99.\n               10  WS-8-YY-N           PIC  99.\n               10  WS-8-MM-N           PIC  99.\n               10  WS-8-DD-N           PIC  99.\n           05  FILLER REDEFINES WS-8-DATE-N.\n               10  WS-8-CY-N           PIC  9(04).\n               10  FILLER              PIC  9(04).\n           05  WS-QUOTIENT             PIC  999     VALUE ZERO.\n           05  WS-REMAINDER            PIC  99      VALUE ZERO.\n           05  WS-REMAIN2              PIC  9(04)   VALUE ZERO.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  END STV0405B  '.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELDS.\n           05  LS-DATE                 PIC  X(08).\n\n       PROCEDURE DIVISION USING LS-FIELDS.\n\n       0100-START-PROCESS.\n           MOVE ZERO                          TO WS-8-DATE-N.\n           MOVE LS-DATE                       TO WS-8-DATE.\n\n           IF WS-8-M1 = SPACE\n               MOVE ZERO                      TO WS-8-M1.\n           IF WS-8-M2 = SPACE\n               MOVE WS-8-M1                   TO WS-8-M2\n               MOVE ZERO                      TO WS-8-M1.\n           IF WS-8-D1 = SPACE\n               MOVE ZERO                      TO WS-8-D1.\n           IF WS-8-D2 = SPACE\n               MOVE WS-8-D1                   TO WS-8-D2\n               MOVE ZERO                      TO WS-8-D1.\n\n           IF WS-8-CC NOT NUMERIC\n               MOVE '**'                      TO WS-8-CC\n           ELSE\n               MOVE WS-8-CC                   TO WS-8-CC-N.\n\n           IF WS-8-YY NOT NUMERIC\n               MOVE '**'                      TO WS-8-YY\n           ELSE\n               MOVE WS-8-YY                   TO WS-8-YY-N.\n\n           IF WS-8-MM NOT NUMERIC\n               MOVE '**'                      TO WS-8-MM\n           ELSE\n               MOVE WS-8-MM                   TO WS-8-MM-N\n               IF WS-8-MM-N < 1\n                   OR WS-8-MM-N > 12\n                   MOVE '**'                  TO WS-8-MM.\n\n           IF WS-8-DD NOT NUMERIC\n               MOVE '**'                      TO WS-8-DD\n           ELSE\n               MOVE WS-8-DD                   TO WS-8-DD-N\n               IF WS-8-DD-N < 1\n                   OR WS-8-DD-N > 31\n                   MOVE '**'                  TO WS-8-DD.\n\n           IF WS-8-MM = '04' OR '06' OR '09' OR '11'\n               IF WS-8-DD > '30'\n                   MOVE '**'                  TO WS-8-DD.\n           IF WS-8-MM = '02'\n               IF WS-8-DD > '29'\n                   MOVE '**'                  TO WS-8-DD.\n\n           IF WS-8-MM = '**'\n               OR WS-8-DD = '**'\n               OR WS-8-YY = '**'\n               GO TO 0400-EXIT-PROGRAM.\n\n           IF WS-8-MM-N = 02\n               DIVIDE WS-8-YY-N BY 4 GIVING WS-QUOTIENT\n                   REMAINDER WS-REMAINDER\n               IF WS-REMAINDER = ZERO\n                   IF WS-8-YY-N = ZERO\n                       DIVIDE WS-8-CY-N BY 400 GIVING WS-QUOTIENT\n                           REMAINDER WS-REMAIN2\n                       IF WS-REMAIN2 NOT = ZERO\n                         IF WS-8-DD-N > 28\n                             MOVE '**'        TO WS-8-DD.\n\n           IF WS-8-MM-N = 02\n               IF WS-REMAINDER NOT = ZERO\n                    IF WS-8-DD-N > 28\n                        MOVE '**'             TO WS-8-DD.\n\n       0400-EXIT-PROGRAM.\n           MOVE WS-8-DATE                     TO LS-DATE.\n           GOBACK.\n\n      ************************************ END STV0405B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV0410B": {"ttr": 18699, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00!\\x01\\x19\\x01_\\x01\\x192?\\x10X\\x01!\\x07p\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-01-15T00:00:00", "modifydate": "2019-11-19T10:58:21", "lines": 289, "newlines": 1904, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  STV0410B: OS390 Cobol date conversion'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    STV0410B.\n       AUTHOR.        JIM IANNONE\n      ****************************************************************\n      *@@@ c3 convert julian\\gregorian - year 2000 compliant\n      ****************************************************************\n      *  Date-written.  03/10/98.\n      *  Installation.  St Vincent MIS department.\n      *\n      *  Author of STV0300B   Tom Richardson\n      ****************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * This subprogram converts a date that was transferred from\n      * the calling program from julian format (CCYYDDD) to gregorian\n      * format (CCYYMMDD) or it converts a date that was transferred\n      * from the calling program from gregorian format to julian\n      * format.\n      ****************************************************************\n      * Date changed: 04/07/2006\n      * Programmer  : Jim Iannone\n      *               compile with Cobol 3 with DYNAM option\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       DATA DIVISION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-ANNOUNCE-START.\n           05  FILLER                  PIC  X(43)      VALUE\n               '**** WORKING STORAGE STV0410B STARTS HERE  '.\n\n       01  WS-OUTPUT.\n           05  WS-OUTPUT-DATE          PIC  X(08)     VALUE SPACE.\n           05  OUT-GREG-TO-JULIAN REDEFINES WS-OUTPUT-DATE.\n               10  WS-OUT-JULIAN-CY    PIC  9(04).\n               10  WS-OUT-JULIAN-DDD   PIC  9(03).\n               10  FILLER              PIC  X.\n           05  OUT-JULIAN-TO-GREG REDEFINES WS-OUTPUT-DATE.\n               10  WS-OUT-GREG-CY      PIC  9(04).\n               10  WS-OUT-GREG-MM      PIC  9(02).\n               10  WS-OUT-GREG-DD      PIC  9(02).\n\n       01  WS-INPUT.\n           05  WS-INPUT-DATE               PIC  X(08)  VALUE SPACE.\n           05  WS-INPUT-GREG REDEFINES WS-INPUT-DATE.\n               10  WS-IN-GREG-CY           PIC  9(04).\n               10  FILLER REDEFINES WS-IN-GREG-CY.\n                   15  WS-IN-GREG-C        PIC  99.\n                   15  WS-IN-GREG-Y        PIC  99.\n               10  WS-IN-GREG-MM           PIC  99.\n               10  WS-IN-GREG-DD           PIC  99.\n           05  WS-INPUT-JULIAN REDEFINES WS-INPUT-DATE.\n               10  WS-IN-JULIAN-DATE.\n                   15  WS-IN-JULIAN-CY     PIC  9(04).\n                   15  FILLER REDEFINES WS-IN-JULIAN-CY.\n                       20  WS-IN-JULIAN-C  PIC 99.\n                       20  WS-IN-JULIAN-Y  PIC 99.\n                   15  WS-IN-JULIAN-DDD    PIC  9(03).\n               10  WS-IN-FILLER            PIC  X(01).\n\n      *****************************************************************\n      **             TABLES USED FOR CONVERTING DATE                  *\n      *****************************************************************\n       01  JULIAN-DATES-TABLE.\n           05  JULIAN-TABLE1.\n               10  JAN                 PIC  999       VALUE 000.\n               10  FEB                 PIC  999       VALUE 031.\n               10  MAR                 PIC  999       VALUE 059.\n               10  APR                 PIC  999       VALUE 090.\n               10  MAY                 PIC  999       VALUE 120.\n               10  JUN                 PIC  999       VALUE 151.\n               10  JUL                 PIC  999       VALUE 181.\n               10  AUG                 PIC  999       VALUE 212.\n               10  SEP                 PIC  999       VALUE 243.\n               10  OCT                 PIC  999       VALUE 273.\n               10  NOV                 PIC  999       VALUE 304.\n               10  DEC                 PIC  999       VALUE 334.\n               10  EOY                 PIC  999       VALUE 365.\n           05  J-TABLE1 REDEFINES JULIAN-TABLE1.\n               10  MONTH               PIC  999\n                   OCCURS 13.\n\n           05  JULIAN-LEAP-YR-TABLE.\n               10  JANL                PIC  999       VALUE 000.\n               10  FEBL                PIC  999       VALUE 031.\n               10  MARL                PIC  999       VALUE 060.\n               10  APRL                PIC  999       VALUE 091.\n               10  MAYL                PIC  999       VALUE 121.\n               10  JUNL                PIC  999       VALUE 152.\n               10  JULL                PIC  999       VALUE 182.\n               10  AUGL                PIC  999       VALUE 213.\n               10  SEPL                PIC  999       VALUE 244.\n               10  OCTL                PIC  999       VALUE 274.\n               10  NOVL                PIC  999       VALUE 305.\n               10  DECL                PIC  999       VALUE 335.\n               10  EOYL                PIC  999       VALUE 366.\n           05  J-LEAP-YR-TABLE REDEFINES JULIAN-LEAP-YR-TABLE.\n               10  MONTH-L             PIC  999\n                   OCCURS 13.\n\n       01  WS-WORK-FIELDS.\n           05  WS-CY                   PIC  9(04)     VALUE ZERO.\n           05  FILLER REDEFINES WS-CY.\n               10  WS-CY-C             PIC  99.\n               10  WS-CY-Y             PIC  99.\n           05  WS-QUOTIENT             PIC S99        VALUE ZERO.\n           05  WS-REMAINDER            PIC S99        VALUE ZERO.\n           05  WS-QUOTIENT2            PIC S9(04)     VALUE ZERO.\n           05  WS-REMAINDER2           PIC S9(04)     VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  LEAP-YR-SWITCH          PIC  X         VALUE 'N'.\n               88  NOT-LEAP-YR                        VALUE 'N'.\n               88  LEAP-YR                            VALUE 'Y'.\n           05  CONVERSION-TYPE-SW      PIC  X         VALUE ' '.\n               88  CONVERTING-TO-GREGOR               VALUE 'G'.\n               88  CONVERTING-TO-JULIAN               VALUE 'J'.\n\n       01  WS-SUBSCRIPTS.\n           05   I1                     PIC 99         VALUE ZERO.\n           05   I2                     PIC 99         VALUE ZERO.\n\n       01  WS-WORK-FIELDS.\n           05  WS-CONV-DATE.\n               10  WS-FIRST-7          PIC  X(07).\n               10  WS-LAST-1           PIC  X(01).\n\n       01  WS-ANNOUNCE-END.\n           05  FILLER                  PIC  X(43)     VALUE\n               '**** END STV0410B WORKING STORAGE HERE ****'.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELDS.\n           05  LS-IN-DATE              PIC  X(08).\n           05  LS-JULIAN-CYDDD         PIC  X(07).\n           05  LS-GREGOR-CYMD          PIC  X(08).\n\n       PROCEDURE DIVISION USING LS-FIELDS.\n\n       0000-GET-CONV-TYPE.\n           MOVE ZERO                   TO I1, I2.\n           MOVE 'N'                    TO LEAP-YR-SWITCH.\n           MOVE LS-IN-DATE             TO WS-CONV-DATE WS-INPUT-DATE.\n           IF WS-LAST-1 = SPACE\n               MOVE 'G'                TO CONVERSION-TYPE-SW\n               GO TO 1100-EDIT-OLD-JULIAN\n           ELSE\n               MOVE 'J'                TO CONVERSION-TYPE-SW\n               GO TO 2100-EDIT-OLD-GREGOR.\n\n      ******************************************************************\n      *    EDIT THE JULIAN DATE.  IF AN ERROR OCCURS, EXIT THIS\n      *    PROGRAM AND RETURN ZEROES AS THE CONVERTED DATE.\n      *    OTHERWISE CONVERT IT TO THE CORRESPONDING GREGORIAN DATE.\n      ******************************************************************\n       1100-EDIT-OLD-JULIAN.\n           IF WS-IN-JULIAN-DATE NOT NUMERIC\n               GO TO 9000-FAILED-EDIT.\n           IF WS-IN-JULIAN-Y < 0\n               GO TO 9000-FAILED-EDIT.\n           IF WS-IN-JULIAN-DDD < 1\n               GO TO 9000-FAILED-EDIT.\n           DIVIDE WS-IN-JULIAN-Y      BY 4\n               GIVING WS-QUOTIENT      REMAINDER WS-REMAINDER.\n           IF  WS-REMAINDER = ZERO\n               MOVE 'Y'                TO LEAP-YR-SWITCH.\n           IF WS-IN-JULIAN-Y = ZERO\n               DIVIDE WS-IN-JULIAN-CY BY 400\n                   GIVING WS-QUOTIENT2 REMAINDER WS-REMAINDER2\n               IF WS-REMAINDER2 NOT = ZERO\n                   MOVE 'N'            TO LEAP-YR-SWITCH.\n           IF LEAP-YR\n               IF WS-IN-JULIAN-DDD > 366\n                   GO TO 9000-FAILED-EDIT.\n           IF NOT-LEAP-YR\n               IF WS-IN-JULIAN-DDD > 365\n                   GO TO 9000-FAILED-EDIT.\n           MOVE WS-IN-JULIAN-CY        TO WS-OUT-GREG-CY.\n           IF LEAP-YR\n               GO TO 1300-FIND-MONTH-LEAP.\n\n      ******************************************************************\n      ** FIND THE MONTH AND CONVERT THE JULIAN DATE TO GREGORIAN\n      ** (CYMD) FORMAT.\n      ******************************************************************\n       1200-FIND-MONTH.\n           COMPUTE I1 = I1 + 1.\n           COMPUTE I2 = I1 + 1.\n           IF I1 > 13\n               GO TO 9000-FAILED-EDIT.\n           IF (WS-IN-JULIAN-DDD > MONTH(I1))\n               AND (WS-IN-JULIAN-DDD NOT > MONTH(I2))\n               SUBTRACT MONTH(I1)  FROM WS-IN-JULIAN-DDD\n                   GIVING WS-OUT-GREG-DD\n               MOVE I1             TO WS-OUT-GREG-MM\n               MOVE WS-OUTPUT-DATE TO LS-GREGOR-CYMD\n               GO TO 0100-END-PROCESSING\n           ELSE\n               GO TO 1200-FIND-MONTH.\n\n      ******************************************************************\n      ** FIND THE MONTH IF THE DATE PASSED IS FOR A LEAP YEAR.  THEN  **\n      ** CONVERT THE JULIAN DATE TO GREGORIAN (MMDDYY) FORMAT.**\n      ******************************************************************\n       1300-FIND-MONTH-LEAP.\n           COMPUTE I1 = I1 + 1.\n           COMPUTE I2 = I1 + 1.\n           IF I1 IS > 13\n               GO TO 9000-FAILED-EDIT.\n           IF (WS-IN-JULIAN-DDD > MONTH-L(I1))\n               AND (WS-IN-JULIAN-DDD NOT > MONTH-L(I2))\n               SUBTRACT MONTH-L (I1) FROM WS-IN-JULIAN-DDD\n                   GIVING WS-OUT-GREG-DD\n               MOVE I1             TO WS-OUT-GREG-MM\n               MOVE WS-OUTPUT-DATE TO LS-GREGOR-CYMD\n               GO TO 0100-END-PROCESSING\n           ELSE\n               GO TO 1300-FIND-MONTH-LEAP.\n\n      ******************************************************************\n      ** EDIT THE INPUTED GREGORIAN DATE.  IF AN ERROR OCCURS, EXIT   **\n      ** THIS PROGRAM AND RETURN ZEROES AS THE CONVERTED DATE.        **\n      ** OTHERWISE CONVERT IT TO THE CORRESPONDING JULIAN DATE.       **\n      ******************************************************************\n       2100-EDIT-OLD-GREGOR.\n           IF WS-INPUT-DATE NOT NUMERIC\n               GO TO 9000-FAILED-EDIT.\n           IF (WS-IN-GREG-MM < 1 OR > 12 )\n               GO TO 9000-FAILED-EDIT.\n           IF WS-IN-GREG-Y < 0\n               GO TO 9000-FAILED-EDIT.\n           IF WS-IN-GREG-DD < 1\n               GO TO 9000-FAILED-EDIT.\n           MOVE WS-IN-GREG-MM          TO I1.\n           COMPUTE I2 =  WS-IN-GREG-MM + 1.\n           DIVIDE WS-IN-GREG-Y         BY 4\n               GIVING WS-QUOTIENT      REMAINDER WS-REMAINDER.\n           IF  WS-REMAINDER = ZERO\n               MOVE 'Y'                TO LEAP-YR-SWITCH.\n           IF WS-IN-GREG-Y = ZERO\n               DIVIDE WS-IN-GREG-CY BY 400\n                   GIVING WS-QUOTIENT2 REMAINDER WS-REMAINDER2\n               IF WS-REMAINDER2 NOT = ZERO\n                   MOVE 'N'            TO LEAP-YR-SWITCH.\n           IF LEAP-YR\n               IF WS-IN-GREG-DD >  MONTH-L(I2) - MONTH-L(I1)\n                   GO TO 9000-FAILED-EDIT.\n           IF NOT-LEAP-YR\n               IF WS-IN-GREG-DD >  MONTH(I2) - MONTH(I1)\n                   GO TO 9000-FAILED-EDIT.\n\n      ******************************************************************\n      ** A VALID GREGORIAN DATE WAS PASSED SO CONTINUE TO CONVERT IT  **\n      ** TO JULIAN FORMAT (YYDDD).                                    **\n      ******************************************************************\n\n           IF  LEAP-YR\n               COMPUTE WS-OUT-JULIAN-DDD = MONTH-L(I1) + WS-IN-GREG-DD\n           ELSE\n               COMPUTE WS-OUT-JULIAN-DDD = MONTH(I1) + WS-IN-GREG-DD.\n           MOVE WS-IN-GREG-CY          TO WS-OUT-JULIAN-CY.\n           MOVE WS-OUTPUT-DATE         TO LS-JULIAN-CYDDD.\n           GO TO 0100-END-PROCESSING.\n\n      ******************************************************************\n      **  ROUTINE FOR HANDLING BAD OR NO DATES THAT ARE PASSED BY THE **\n      **  CALLING PROGRAM.  ZEROES ARE RETURNED AS THE CONVERTED DATE.**\n      ******************************************************************\n       9000-FAILED-EDIT.\n           IF CONVERTING-TO-GREGOR\n               MOVE ZEROS              TO LS-GREGOR-CYMD\n               GO TO 0100-END-PROCESSING\n           ELSE\n               MOVE ZEROS              TO LS-JULIAN-CYDDD\n               GO TO 0100-END-PROCESSING.\n\n       0100-END-PROCESSING.\n           GOBACK.\n\n      ************************************ END STV0410B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV0420B": {"ttr": 18949, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x004\\x01\\x19\\x01_\\x01\\x192?\\x10X\\x01\\xe3\\x06S\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-01-15T00:00:00", "modifydate": "2019-11-19T10:58:34", "lines": 483, "newlines": 1619, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  STV0420B: dates / nbr of days conversions'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    STV0420B.\n      *AUTHOR.        JIM IANNONE.\n      ******************************************************************\n      *@@@ C3 dates/nbr of days conversions\n      ******************************************************************\n      *    OS390 Cobol version of STV0155B (CYMD/CYDDD format)\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * Program-id  : stv0420b\n      * Project #   : 900824 for STV0155B and STV0310B\n      * Date written: 03/10/98\n      * Programmer  : Jim Iannone\n      *\n      *               compiled under OS/390 Cobol\n      *\n      *               This program uses three fields: date1 (past date),\n      *               date2 (future date), and a number of days.\n      *               Given any two of these fields, the program will\n      *               return the third. Dates will be accepted and\n      *               returned in the form CCYYDDD or CCYYMMDD.\n      *               The highest number of days allowed is 99599.\n      *               Any error will cause '*****' to be placed in the\n      *               number field.\n      *\n      *               Note:  century years that are divisable by 400\n      *               are leap years (1600, 2000, 2400, etc.). the\n      *               others are not (1700, 1800, 1900, 2100, etc.).\n      *\n      ******************************************************************\n      * Date changed: 04/07/2006\n      * Programmer  : Jim Iannone\n      *               compile with Cobol 3 with DYNAM option\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n       DATA DIVISION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' WORKING-STORAGE STV0420B START '.\n\n       01  WS-FIELDS.\n           05  WS-HOLD-DATE.\n               10  WS-HOLD-1X7         PIC  X(07)    VALUE SPACE.\n               10  WS-HOLD-8           PIC  X        VALUE SPACE.\n           05  WS-J-DATE1                            VALUE ZERO.\n               10  WS-J-YYYY1          PIC  9(04).\n               10  FILLER              REDEFINES WS-J-YYYY1.\n                   15  WS-J-CC1        PIC  99.\n                   15  WS-J-YY1        PIC  99.\n               10  WS-J-DDD1           PIC  999.\n           05  WS-J-DATE2                            VALUE ZERO.\n               10  WS-J-YYYY2          PIC  9(04).\n               10  FILLER              REDEFINES WS-J-YYYY2.\n                   15  WS-J-CC2        PIC  99.\n                   15  WS-J-YY2        PIC  99.\n               10  WS-J-DDD2           PIC  999.\n           05  WS-J-DATE3              PIC  9(07)    VALUE ZERO.\n           05  WS-G-DATE1                            VALUE ZERO.\n               10  WS-G-YYYY1.\n                   15  WS-G-CC1        PIC  99.\n                   15  WS-G-YY1        PIC  99.\n               10  WS-G-MM1            PIC  99.\n               10  WS-G-DD1            PIC  99.\n           05  WS-G-DATE2                            VALUE ZERO.\n               10  WS-G-YYYY2.\n                   15  WS-G-CC2        PIC  99.\n                   15  WS-G-YY2        PIC  99.\n               10  WS-G-MM2            PIC  99.\n               10  WS-G-DD2            PIC  99.\n           05  WS-CALL-GREGORIAN                     VALUE SPACE.\n               10  WS-CALL-G-CC        PIC  XX.\n               10  WS-CALL-G-YY        PIC  XX.\n               10  WS-CALL-G-MM        PIC  XX.\n               10  WS-CALL-G-DD        PIC  XX.\n           05  WS-CALL-JULIAN                        VALUE SPACE.\n               10  WS-CALL-J-CC        PIC  XX.\n               10  WS-CALL-J-YY        PIC  XX.\n               10  WS-CALL-J-DDD       PIC  XXX.\n               10  FILLER              PIC  X.\n           05  WS-DATE-PAST            PIC  X(07)    VALUE SPACE.\n           05  WS-DATE-FUTURE          PIC  X(07)    VALUE SPACE.\n           05  WS-CALL410B             PIC  X(08)    VALUE 'STV0410B'.\n           05  WS-CY                   PIC  9(04)    VALUE ZERO.\n           05  FILLER REDEFINES WS-CY.\n               10  WS-CY-C             PIC  99.\n               10  WS-CY-Y             PIC  99.\n           05  WS-NBR-5                PIC  9(05)    VALUE ZERO.\n           05  WS-NBR                  PIC  999      VALUE ZERO.\n           05  WS-CNT                  PIC  9(05)    VALUE ZERO.\n           05  WS-RESULT               PIC  9(05)    VALUE ZERO.\n           05  WS-MAX-DAYS             PIC  999      VALUE ZERO.\n           05  WS-QUOTIENT             PIC  9(04)    VALUE ZERO.\n           05  WS-REMAIN               PIC  99       VALUE ZERO.\n           05  WS-REMAIN2              PIC  9(04)    VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  WS-TYPE-DATE-SW         PIC  X        VALUE SPACE.\n               88  GREGORIAN                         VALUE 'G'.\n\n      *    JULIAN / GREGORIAN DATE CONVERSIONS\n       01  WS-STV0410B-FIELDS.\n           05  STV0410B-IN-DATE        PIC  X(08).\n           05  STV0410B-CYDDD          PIC  X(07).\n           05  STV0410B-CYMD           PIC  X(08).\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  END STV0420B  '.\n\n       LINKAGE SECTION.\n\n       01  LS-CALC-DATES.\n           05  LS-DATE-PAST            PIC  X(08).\n           05  LS-DATE-FUTURE          PIC  X(08).\n           05  LS-NBR                  PIC  X(05).\n\n       PROCEDURE DIVISION USING LS-CALC-DATES.\n\n       0000-START-PROCESS.\n           MOVE ZERO                          TO WS-J-DATE1 WS-J-DATE2\n                                                 WS-G-DATE1 WS-G-DATE2.\n           MOVE SPACE                         TO WS-CALL-GREGORIAN\n                                                 WS-CALL-JULIAN\n                                                 WS-DATE-PAST\n                                                 WS-DATE-FUTURE\n                                                 WS-HOLD-DATE\n                                                 WS-TYPE-DATE-SW.\n           MOVE ZERO                          TO WS-NBR WS-NBR-5\n                                                 WS-CY WS-CNT WS-RESULT\n                                                 WS-MAX-DAYS WS-QUOTIENT\n                                                 WS-REMAIN WS-REMAIN2.\n           INSPECT LS-NBR REPLACING ALL SPACE BY ZERO.                  930???\n           MOVE LS-DATE-FUTURE                TO WS-DATE-FUTURE.\n           MOVE LS-DATE-PAST                  TO WS-DATE-PAST.\n           IF (WS-DATE-FUTURE NUMERIC)\n               AND (WS-DATE-PAST NOT NUMERIC)\n               AND (LS-NBR NUMERIC)\n               GO TO 0800-RETURN-PAST-DATE.\n           IF (WS-DATE-PAST NUMERIC)\n               AND (WS-DATE-FUTURE NOT NUMERIC)\n               AND (LS-NBR NUMERIC)\n               GO TO 1200-RETURN-FUTURE-DATE.\n           IF (WS-DATE-FUTURE NOT NUMERIC)\n               OR (WS-DATE-PAST NOT NUMERIC)\n               GO TO 1600-DATE-ERROR.\n           IF LS-DATE-FUTURE NUMERIC\n               MOVE LS-DATE-PAST              TO WS-HOLD-DATE\n               IF WS-HOLD-8 NOT NUMERIC\n                   GO TO 1600-DATE-ERROR.\n           IF LS-DATE-PAST NUMERIC\n               MOVE LS-DATE-FUTURE            TO WS-HOLD-DATE\n               IF WS-HOLD-8 NOT NUMERIC\n                   GO TO 1600-DATE-ERROR.\n      ****************************************\n      *    GIVEN 2 DATES, CALCULATE THE NUMBER OF DAYS BETWEEN.\n      ****************************************\n           MOVE LS-DATE-FUTURE                TO WS-HOLD-DATE.\n           IF WS-HOLD-8 NUMERIC\n               MOVE 'G'                       TO WS-TYPE-DATE-SW.\n           IF GREGORIAN\n               PERFORM 0100-CONVERT-TO-JUL-1\n               PERFORM 0300-EDIT-J-DATE1\n               PERFORM 0200-CONVERT-TO-JUL-2\n               PERFORM 0400-EDIT-J-DATE2\n               GO TO 0500-FIND-NUMBER.\n\n           MOVE LS-DATE-PAST                  TO WS-HOLD-DATE.\n           MOVE WS-HOLD-1X7                   TO WS-J-DATE1.\n           PERFORM 0300-EDIT-J-DATE1.\n           MOVE LS-DATE-FUTURE                TO WS-HOLD-DATE.\n           MOVE WS-HOLD-1X7                   TO WS-J-DATE2.\n           PERFORM 0400-EDIT-J-DATE2.\n           GO TO 0500-FIND-NUMBER.\n\n       0100-CONVERT-TO-JUL-1.\n           MOVE LS-DATE-PAST                  TO STV0410B-IN-DATE.\n           CALL WS-CALL410B USING WS-STV0410B-FIELDS.\n           IF STV0410B-CYDDD NUMERIC\n               IF STV0410B-CYDDD NOT = ZERO\n                   MOVE STV0410B-CYDDD        TO WS-CALL-JULIAN\n               ELSE\n                   GO TO 1600-DATE-ERROR\n           ELSE\n               GO TO 1600-DATE-ERROR.\n           MOVE WS-CALL-J-DDD                 TO WS-J-DDD1.\n           MOVE WS-CALL-J-YY                  TO WS-J-YY1.\n           MOVE WS-CALL-J-CC                  TO WS-J-CC1.\n\n       0200-CONVERT-TO-JUL-2.\n           MOVE LS-DATE-FUTURE                TO STV0410B-IN-DATE.\n           CALL WS-CALL410B USING WS-STV0410B-FIELDS.\n           IF STV0410B-CYDDD NUMERIC\n               IF STV0410B-CYDDD NOT = ZERO\n                   MOVE STV0410B-CYDDD        TO WS-CALL-JULIAN\n               ELSE\n                   GO TO 1600-DATE-ERROR\n           ELSE\n               GO TO 1600-DATE-ERROR.\n           MOVE WS-CALL-J-DDD                 TO WS-J-DDD2.\n           MOVE WS-CALL-J-YY                  TO WS-J-YY2.\n           MOVE WS-CALL-J-CC                  TO WS-J-CC2.\n\n       0300-EDIT-J-DATE1.\n           IF WS-J-YYYY1 = ZERO\n               GO TO 1600-DATE-ERROR.\n           IF WS-J-DDD1 = ZERO\n               OR WS-J-DDD1 > 366\n               GO TO 1600-DATE-ERROR.\n           IF WS-J-DDD1 = 366\n               MOVE WS-J-YYYY1                TO WS-CY\n               DIVIDE WS-CY BY 4 GIVING WS-QUOTIENT\n                   REMAINDER WS-REMAIN\n               IF WS-REMAIN NOT = ZERO\n                   GO TO 1600-DATE-ERROR\n               ELSE\n               IF WS-CY-Y = ZERO\n                   DIVIDE WS-CY BY 400 GIVING WS-QUOTIENT\n                       REMAINDER WS-REMAIN2\n                   IF WS-REMAIN2 NOT = ZERO\n                       GO TO 1600-DATE-ERROR.\n\n       0400-EDIT-J-DATE2.\n           IF WS-J-YYYY2 = ZERO\n               GO TO 1600-DATE-ERROR.\n           IF WS-J-DDD2 = ZERO\n               OR WS-J-DDD2 > 366\n               GO TO 1600-DATE-ERROR.\n           IF WS-J-DDD2 = 366\n               MOVE WS-J-YYYY2                TO WS-CY\n               DIVIDE WS-CY BY 4 GIVING WS-QUOTIENT\n                   REMAINDER WS-REMAIN\n               IF WS-REMAIN NOT = ZERO\n                   GO TO 1600-DATE-ERROR\n               ELSE\n               IF WS-CY-Y = ZERO\n                   DIVIDE WS-CY BY 400 GIVING WS-QUOTIENT\n                       REMAINDER WS-REMAIN2\n                   IF WS-REMAIN2 NOT = ZERO\n                       GO TO 1600-DATE-ERROR.\n\n       0500-FIND-NUMBER.\n           IF WS-J-DATE1 > WS-J-DATE2\n               MOVE WS-J-DATE1                TO WS-J-DATE3\n               MOVE WS-J-DATE2                TO WS-J-DATE1\n               MOVE WS-J-DATE3                TO WS-J-DATE2.\n           IF WS-J-YYYY1 = WS-J-YYYY2\n               IF WS-J-DDD2 > WS-J-DDD1\n                   SUBTRACT WS-J-DDD1 FROM WS-J-DDD2\n                       GIVING WS-NBR-5\n               ELSE\n                   MOVE ZERO                  TO WS-NBR-5\n           ELSE\n               ADD WS-J-DDD2                  TO WS-NBR-5\n               MOVE WS-J-YYYY2                TO WS-CY\n               PERFORM 0700-LOOP THRU\n                       0700-LOOP-EXIT\n                       UNTIL WS-CY = WS-J-YYYY1\n                       OR WS-NBR-5 > 99598.\n\n           IF WS-NBR-5 < 99600\n               MOVE WS-NBR-5                  TO LS-NBR\n           ELSE\n               GO TO 1600-DATE-ERROR.\n           GO TO 1700-END-PROCESSING.\n\n       0700-LOOP.\n           SUBTRACT 1 FROM WS-CY.\n           IF WS-CY < 0001\n               GO TO 1600-DATE-ERROR.\n           DIVIDE WS-CY BY 4 GIVING WS-QUOTIENT\n               REMAINDER WS-REMAIN.\n           DIVIDE WS-CY BY 400 GIVING WS-QUOTIENT\n               REMAINDER WS-REMAIN2.\n           IF WS-CY = WS-J-YYYY1\n             IF WS-CY-Y = ZERO\n               IF WS-REMAIN2 = ZERO\n                   SUBTRACT WS-J-DDD1 FROM 366\n                       GIVING WS-NBR\n                       ADD WS-NBR             TO WS-NBR-5\n                       GO TO 0700-LOOP-EXIT\n               ELSE\n                   SUBTRACT WS-J-DDD1 FROM 365\n                       GIVING WS-NBR\n                       ADD WS-NBR             TO WS-NBR-5\n                       GO TO 0700-LOOP-EXIT\n             ELSE\n             IF WS-REMAIN = ZERO\n                 SUBTRACT WS-J-DDD1 FROM 366\n                     GIVING WS-NBR\n                     ADD WS-NBR               TO WS-NBR-5\n                     GO TO 0700-LOOP-EXIT\n             ELSE\n                 SUBTRACT WS-J-DDD1 FROM 365\n                     GIVING WS-NBR\n                     ADD WS-NBR               TO WS-NBR-5\n                     GO TO 0700-LOOP-EXIT.\n           IF WS-CY-Y = ZERO\n               IF WS-REMAIN2 = ZERO\n                   ADD 366                    TO WS-NBR-5\n               ELSE\n                   ADD 365                    TO WS-NBR-5\n           ELSE\n           IF WS-REMAIN = ZERO\n               ADD 366                        TO WS-NBR-5\n           ELSE\n               ADD 365                        TO WS-NBR-5.\n\n       0700-LOOP-EXIT. EXIT.\n\n      ****************************************\n      *    GIVEN A FUTURE DATE AND A # OF DAYS, RETURN A PAST DATE\n      ****************************************\n       0800-RETURN-PAST-DATE.\n           MOVE LS-DATE-FUTURE                TO WS-HOLD-DATE.\n           IF WS-HOLD-8 NUMERIC\n               MOVE 'G'                       TO WS-TYPE-DATE-SW.\n           MOVE LS-NBR                        TO WS-NBR-5.\n           IF WS-NBR-5 > 99599\n               GO TO 1600-DATE-ERROR.\n           IF GREGORIAN\n               PERFORM 0200-CONVERT-TO-JUL-2\n           ELSE\n               MOVE WS-HOLD-1X7               TO WS-J-DATE2.\n           PERFORM 0400-EDIT-J-DATE2.\n           MOVE WS-J-YYYY2                    TO WS-CY.\n           MOVE WS-J-DDD2                     TO WS-NBR.\n\n       0900-FIND-PAST-DATE.\n           IF WS-NBR-5 < WS-NBR\n               SUBTRACT WS-NBR-5 FROM WS-NBR\n           ELSE\n           PERFORM 1000-LOOP2\n               UNTIL WS-CNT = WS-NBR-5\n               OR WS-CNT > 99599.\n           MOVE WS-CY                         TO WS-J-YYYY1.\n           MOVE WS-NBR                        TO WS-J-DDD1.\n           IF GREGORIAN\n               PERFORM 1100-CONVERT-TO-GREG-1\n           ELSE\n               MOVE WS-J-DATE1                TO LS-DATE-PAST.\n           GO TO 1700-END-PROCESSING.\n\n       1000-LOOP2.\n           SUBTRACT 1 FROM WS-NBR.\n           ADD 1                              TO WS-CNT.\n           IF WS-NBR = ZERO\n               SUBTRACT 1 FROM WS-CY\n               IF WS-CY < 0001\n                   GO TO 1600-DATE-ERROR\n               ELSE\n               IF WS-CY-Y = ZERO\n                   DIVIDE WS-CY BY 400 GIVING WS-QUOTIENT\n                       REMAINDER WS-REMAIN2\n                   IF WS-REMAIN2 = ZERO\n                       MOVE 366               TO WS-NBR\n                   ELSE\n                       MOVE 365               TO WS-NBR\n               ELSE\n                   DIVIDE WS-CY BY 4 GIVING WS-QUOTIENT\n                       REMAINDER WS-REMAIN\n                   IF WS-REMAIN = ZERO\n                       MOVE 366               TO WS-NBR\n                   ELSE\n                       MOVE 365               TO WS-NBR.\n\n       1100-CONVERT-TO-GREG-1.\n           MOVE WS-J-DDD1                     TO WS-CALL-J-DDD.\n           MOVE WS-J-YY1                      TO WS-CALL-J-YY.\n           MOVE WS-J-CC1                      TO WS-CALL-J-CC.\n           MOVE WS-CALL-JULIAN                TO STV0410B-IN-DATE.\n           CALL WS-CALL410B USING WS-STV0410B-FIELDS.\n           IF STV0410B-CYMD NUMERIC\n               IF STV0410B-CYMD NOT = ZERO\n                   MOVE STV0410B-CYMD         TO LS-DATE-PAST\n               ELSE\n                   GO TO 1600-DATE-ERROR\n           ELSE\n               GO TO 1600-DATE-ERROR.\n\n      ****************************************\n      *    GIVEN A PAST DATE AND A # OF DAYS, RETURN A FUTURE DATE\n      ****************************************\n       1200-RETURN-FUTURE-DATE.\n           MOVE LS-DATE-PAST                  TO WS-HOLD-DATE.\n           IF WS-HOLD-8 NUMERIC\n               MOVE 'G'                       TO WS-TYPE-DATE-SW.\n           MOVE LS-NBR                        TO WS-NBR-5.\n           IF WS-NBR-5 > 99599\n               GO TO 1600-DATE-ERROR.\n           IF GREGORIAN\n               PERFORM 0100-CONVERT-TO-JUL-1\n           ELSE\n               MOVE WS-HOLD-1X7               TO WS-J-DATE1.\n           PERFORM 0300-EDIT-J-DATE1.\n           MOVE WS-J-YYYY1                    TO WS-CY.\n           MOVE WS-J-DDD1                     TO WS-NBR.\n\n       1300-FIND-FUTURE-DATE.\n           DIVIDE WS-CY BY 4 GIVING WS-QUOTIENT\n               REMAINDER WS-REMAIN.\n           DIVIDE WS-CY BY 400 GIVING WS-QUOTIENT\n               REMAINDER WS-REMAIN2.\n           IF WS-CY-Y = ZERO\n               IF WS-REMAIN2 = ZERO\n                   MOVE 366                   TO WS-MAX-DAYS\n               ELSE\n                   MOVE 365                   TO WS-MAX-DAYS\n           ELSE\n           IF WS-REMAIN = ZERO\n               MOVE 366                       TO WS-MAX-DAYS\n           ELSE\n               MOVE 365                       TO WS-MAX-DAYS.\n           ADD WS-NBR-5 TO WS-NBR\n               GIVING WS-RESULT.\n           IF WS-RESULT < WS-MAX-DAYS\n               MOVE WS-RESULT                 TO WS-NBR\n           ELSE\n               PERFORM 1400-LOOP3\n                   UNTIL WS-CNT = WS-NBR-5\n                   OR WS-CNT > 99599.\n           MOVE WS-CY                         TO WS-J-YYYY2.\n           MOVE WS-NBR                        TO WS-J-DDD2.\n           IF GREGORIAN\n               PERFORM 1500-CONVERT-TO-GREG-2\n           ELSE\n               MOVE WS-J-DATE2                TO LS-DATE-FUTURE.\n           GO TO 1700-END-PROCESSING.\n\n       1400-LOOP3.\n           ADD 1 TO WS-NBR WS-CNT.\n           IF WS-NBR > WS-MAX-DAYS\n               IF WS-CY > 9998\n                   GO TO 1600-DATE-ERROR\n               ELSE\n                   ADD 1 TO WS-CY\n                   MOVE 001                   TO WS-NBR\n                   IF WS-CY-Y = ZERO\n                       DIVIDE WS-CY BY 400 GIVING WS-QUOTIENT\n                           REMAINDER WS-REMAIN2\n                       IF WS-REMAIN2 = ZERO\n                           MOVE 366           TO WS-MAX-DAYS\n                       ELSE\n                           MOVE 365           TO WS-MAX-DAYS\n                   ELSE\n                       DIVIDE WS-CY BY 4 GIVING WS-QUOTIENT\n                           REMAINDER WS-REMAIN\n                       IF WS-REMAIN = ZERO\n                           MOVE 366           TO WS-MAX-DAYS\n                       ELSE\n                           MOVE 365           TO WS-MAX-DAYS.\n\n       1500-CONVERT-TO-GREG-2.\n           MOVE WS-J-DDD2                     TO WS-CALL-J-DDD.\n           MOVE WS-J-YY2                      TO WS-CALL-J-YY.\n           MOVE WS-J-CC2                      TO WS-CALL-J-CC.\n           MOVE WS-CALL-JULIAN                TO STV0410B-IN-DATE.\n           CALL WS-CALL410B USING WS-STV0410B-FIELDS.\n           IF STV0410B-CYMD NUMERIC\n               IF STV0410B-CYMD NOT = ZERO\n                   MOVE STV0410B-CYMD         TO LS-DATE-FUTURE\n               ELSE\n                   GO TO 1600-DATE-ERROR\n           ELSE\n               GO TO 1600-DATE-ERROR.\n\n       1600-DATE-ERROR.\n           MOVE '*****'                       TO LS-NBR.\n           GO TO 1700-END-PROCESSING.\n\n       1700-END-PROCESSING.\n           GOBACK.\n\n      ************************************ END STV0420B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV0530B": {"ttr": 19203, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00H\\x01\\x19\\x01_\\x01\\x192?\\x10X\\x00\\xb1\\x00\\xab\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2019-01-15T00:00:00", "modifydate": "2019-11-19T10:58:48", "lines": 177, "newlines": 171, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  STV0530B: convert number to alpha equivalent '.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    STV0530B.\n      ******************************************************************\n      *@@@ c3 convert number to alpha equivalent\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     EMAIL:  JIANNON@ME.COM\n      *\n      ****************************************************************\n      * Date written: 04/08/2009\n      * Author      : Jim Iannone\n      *\n      *               Given a number, generate an alphabetic\n      *               equivalent.  Allow numbers from 1 - 321,272,406\n      *\n      *               For example:\n      *               1         = 'A     '   LS-LEN = 1\n      *               5         = 'E     '   LS-LEN = 1\n      *               26        = 'Z     '   LS-LEN = 1\n      *               27        = 'AA    '   LS-LEN = 2\n      *               17576     = 'YYZ   '   LS-LEN = 3\n      *               17577     = 'YZA   '   LS-LEN = 3\n      *               321272406 = 'ZZZZZZ'   LS-LEN = 6\n      *\n      *               return '******' if number is not within range\n      *\n      *        Note:  This program can also be used just to condense\n      *               a number into a right justified numeric number:\n      *\n      *               Example: convert '     3 4 ' to '000000034'\n      *\n      *               If using STV0530B for this purpose then\n      *               value STV0530B-SKIP-ALPHA to 'Y' to bypass\n      *               the alpha logic for improved performance\n      *\n      *\n      *    01  WS-STV0530B-FIELDS.\n      *        05  STV0530B-NUMBER         PIC  X(09)    VALUE SPACE.\n      *        05  STV0530B-SKIP-ALPHA     PIC  X        VALUE SPACE.\n      *        05  STV0530B-ALPHA          PIC  X(06)    VALUE SPACE.\n      *        05  STV0530B-LEN            PIC  9        VALUE ZERO.\n      *        05  STV0530B-FILLER         PIC  XXX      VALUE SPACE.\n      *\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n           C01 IS PAGE-TOP.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage STV0530B start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-HOLD-NBR             PIC  X(09)    VALUE SPACE.\n           05  WS-NBR                  PIC  9(09)    VALUE ZERO.\n           05  WS-QUOT                 PIC  9(09)    VALUE ZERO.\n           05  WS-REMAIN               PIC  999      VALUE ZERO.\n           05  WS-LEN                  PIC  9        VALUE ZERO.\n           05  WS-ALPHA                PIC  X(26)    VALUE\n                                       'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n           05  WS-HLD-ALPHA            PIC  X(06)    VALUE SPACE.\n           05  WS-NEW-ALPHA            PIC  X(06)    VALUE SPACE.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(04)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(04)    VALUE ZERO.\n           05  WS-SUB3                 PIC S9(04)    VALUE ZERO.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  STV0530B END  '.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELD.\n           05  LS-DATA                 PIC  X(20).\n           05  FILLER REDEFINES LS-DATA.\n               10  LS-NUMBER           PIC  X(09).\n               10  LS-SKIP-ALPHA       PIC  X.\n               10  LS-ALPHA            PIC  X(06).\n               10  LS-LEN              PIC  9.\n               10  LS-EXTRA            PIC  XXX.\n\n      /\n\n       PROCEDURE DIVISION USING LS-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           IF LS-NUMBER NUMERIC\n               MOVE LS-NUMBER                 TO WS-HOLD-NBR\n           ELSE\n               PERFORM 0200-RIGHT-JUSTIFY-NUMBER.\n           IF WS-HOLD-NBR NUMERIC\n             IF LS-SKIP-ALPHA = 'Y'\n                 MOVE WS-HOLD-NBR             TO LS-NUMBER\n             ELSE\n                 MOVE WS-HOLD-NBR             TO WS-NBR\n                 IF WS-NBR > ZERO\n                   IF WS-NBR < 321272407\n                       MOVE 6                 TO WS-SUB3\n                       PERFORM 0400-CONVERT-NUMBER\n                       PERFORM 0300-LEFT-JUSTIFY-ALPHA\n                       MOVE WS-HOLD-NBR       TO LS-NUMBER\n                       MOVE WS-NEW-ALPHA      TO LS-ALPHA\n                       MOVE WS-LEN            TO LS-LEN\n                   ELSE\n                       MOVE '******'          TO LS-ALPHA\n                 ELSE\n                     MOVE '******'            TO LS-ALPHA\n           ELSE\n               MOVE '******'                  TO LS-ALPHA.\n\n           GOBACK.\n\n       0200-RIGHT-JUSTIFY-NUMBER.\n           MOVE 9                             TO WS-SUB2.\n           PERFORM VARYING WS-SUB1 FROM 9 BY -1\n               UNTIL WS-SUB1 < 1\n               IF LS-NUMBER(WS-SUB1: 1) NUMERIC\n                   MOVE LS-NUMBER(WS-SUB1: 1)\n                                           TO WS-HOLD-NBR(WS-SUB2: 1)\n                   SUBTRACT 1 FROM WS-SUB2\n               END-IF\n           END-PERFORM.\n           INSPECT WS-HOLD-NBR REPLACING ALL SPACE BY ZERO.\n\n       0300-LEFT-JUSTIFY-ALPHA.\n           MOVE 1                             TO WS-SUB2.\n           PERFORM VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > 6\n               IF WS-HLD-ALPHA(WS-SUB1: 1) = SPACE\n                   CONTINUE\n               ELSE\n                   MOVE WS-HLD-ALPHA(WS-SUB1: 1)\n                                           TO WS-NEW-ALPHA(WS-SUB2: 1)\n                   MOVE WS-SUB2               TO WS-LEN\n                   ADD 1                      TO WS-SUB2\n               END-IF\n           END-PERFORM.\n\n       0400-CONVERT-NUMBER.\n           DIVIDE 26 INTO WS-NBR GIVING WS-QUOT REMAINDER WS-REMAIN.\n           IF WS-REMAIN = ZERO\n             IF WS-QUOT > ZERO\n                 SUBTRACT 1 FROM WS-QUOT\n                 MOVE 26                      TO WS-REMAIN.\n           IF WS-SUB3 > ZERO\n               MOVE WS-ALPHA(WS-REMAIN: 1) TO WS-HLD-ALPHA(WS-SUB3: 1)\n           ELSE\n               DISPLAY 'Subscript error in STV0530B call '\n               DISPLAY 'Subscript underflow: ws-sub3 = ' ws-sub3.\n           IF WS-SUB3 > ZERO\n               SUBTRACT 1 FROM WS-SUB3.\n      *    DISPLAY 'WS-NBR ' WS-NBR ' QUOTIENT ' WS-QUOT\n      *            ' REMAIN ' WS-REMAIN.\n           IF WS-QUOT > ZERO\n               MOVE WS-QUOT                   TO WS-NBR\n               MOVE ZERO                      TO WS-QUOT\n               MOVE ZERO                      TO WS-REMAIN\n               GO TO 0400-CONVERT-NUMBER.\n\n      ************************************ END STV0530B\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV0530T": {"ttr": 19207, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00A\\x01\\x192?\\x01\\x192O\\x10)\\x00a\\x00a\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-11-19T00:00:00", "modifydate": "2019-11-20T10:29:41", "lines": 97, "newlines": 97, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  STV0530T: test STV0530B '.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    STV0530T.\n      ******************************************************************\n      *@@@ C3 test STV0530B\n      ******************************************************************\n      * Date written: 04/08/2009\n      * Author      : Jim Iannone\n      *\n      *               CONVERT NUMBER TO ALPHA EQUIVALENT\n      *\n      *               GIVEN A NUMBER, GENERATE AN ALPHABETIC\n      *               EQUIVALENT.  ALLOW NUMBERS FROM 1 - 308,915,775\n      *\n      *               FOR EXAMPLE:\n      *               1         = 'A     '   LS-LEN = 1\n      *               5         = 'E     '   LS-LEN = 1\n      *               26        = 'Z     '   LS-LEN = 1\n      *               27        = 'AA    '   LS-LEN = 2\n      *               17576     = 'YYZ   '   LS-LEN = 3\n      *               17577     = 'YZA   '   LS-LEN = 3\n      *               321272406 = 'ZZZZZZ'   LS-LEN = 6\n      *\n      *               RETURN '******' IF NUMBER IS NOT WITHIN RANGE\n      *\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n           C01 IS PAGE-TOP.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage STV0530T start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-CALL-STV0530B        PIC  X(08)    VALUE 'STV0530B'.\n           05  WS-LS-DATA              PIC  X(10)    VALUE SPACE.\n           05  FILLER REDEFINES WS-LS-DATA.\n               10  WS-LS-NUMBER        PIC  X(09).\n               10  WS-LS-EXTRA         PIC  X.\n           05  WS-NBR                  PIC  9(09)    VALUE ZERO.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(04)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(04)    VALUE ZERO.\n\n      *    convert number to alpha equivalent\n       01  WS-STV0530B-FIELDS.\n           05  STV0530B-NUMBER         PIC  X(09)    VALUE SPACE.\n           05  STV0530B-SKIP-ALPHA     PIC  X        VALUE SPACE.\n           05  STV0530B-ALPHA          PIC  X(06)    VALUE SPACE.\n           05  STV0530B-LEN            PIC  9        VALUE ZERO.\n           05  STV0530B-FILLER         PIC  XXX      VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  STV0530T END  '.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELD.\n           05  LS-LENGTH               PIC S9(04)    COMP.\n           05  LS-DATA                 PIC  X(10).\n           05  FILLER REDEFINES LS-DATA.\n               10  LS-NUMBER           PIC  X(09).\n               10  LS-EXTRA            PIC  X.\n\n      /\n\n       PROCEDURE DIVISION USING LS-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           MOVE SPACE                         TO WS-STV0530B-FIELDS.\n           MOVE LS-NUMBER                     TO STV0530B-NUMBER.\n           DISPLAY '                '.\n           DISPLAY 'Number sent     ' STV0530B-NUMBER.\n           CALL WS-CALL-STV0530B USING WS-STV0530B-FIELDS.\n           DISPLAY 'Number returned ' STV0530B-NUMBER.\n           DISPLAY 'Alpha returned  ' STV0530B-ALPHA.\n           IF STV0530B-ALPHA NOT = '******'\n               DISPLAY 'Length          ' STV0530B-LEN.\n           STOP RUN.\n\n      ************************************ END STV0530T\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV0805B": {"ttr": 19210, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x11\\x01\\x19\\x01_\\x01\\x192?\\x117\\x00\\xb9\\x03\\xa4\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2019-01-15T00:00:00", "modifydate": "2019-11-19T11:37:11", "lines": 185, "newlines": 932, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  STV0805B: return DOW from date'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    STV0805B.\n       AUTHOR.        RICK KNICELY.\n      **************************************************************\n      *@@@ C3 convert return DOW given date\n      **************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * Date written  |  April  8, 1996\n      * Narrative     |  This program is a subprogram designed\n      *               |  to give the day of the week that a given\n      *               |  date falls on.\n      *\n      *    INPUT  - WS-DAY-IN \"YYYYMMDD\"\n      *    OUTPUT - WS-DAY-NUM-OUT - WS-DAY-OUT\n      *                          1 - \"MONDAY\"\n      *                          2 - \"TUESDAY\"\n      *                          3 - \"WEDNESDAY\"\n      *                          4 - \"THURSDAY\"\n      *                          5 - \"FRIDAY\"\n      *                          6 - \"SATURDAY\"\n      *                          7 - \"SUNDAY\"\n      **************************************************************\n      * Date changed: 03/16/98\n      * Programmer  : Jim Iannone\n      *        correctly process non-leap centuries (1700,1800...)\n      ******************************************************************\n      * Date changed: 04/07/2006\n      * Programmer  : Jim Iannone\n      *               compile with Cobol 3 with DYNAM option\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n       DATA DIVISION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working-storage STV0805B start '.\n\n       01  WS-FIELDS.\n           05  WS-DAY-FIRST-DAY        PIC 9(1).\n           05  WS-DAY-JUL              PIC 9(3).\n           05  WS-DAY-LEAPS            PIC 9(4).\n           05  WS-DAY-LEAP2            PIC 9(4).\n           05  WS-DAY-REMAINDER        PIC 9(4).\n           05  WS-DAY-REMAIN2          PIC 9(4).\n           05  WS-DAY-TOTAL-DAYS       PIC 9(10).\n           05  WS-DAY-YEAR             PIC 9(4).\n           05  WS-DAY-INDX             PIC 9(10)V9(2).\n           05  WS-DAY-INDX2            PIC 9(2).\n           05  WS-CALL410B             PIC  X(08)  VALUE 'STV0410B'.\n\n       01  WS-WEEK-TABLE.\n           05  FILLER                  PIC X(9)  VALUE 'MONDAY'.\n           05  FILLER                  PIC X(9)  VALUE 'TUESDAY'.\n           05  FILLER                  PIC X(9)  VALUE 'WEDNESDAY'.\n           05  FILLER                  PIC X(9)  VALUE 'THURSDAY'.\n           05  FILLER                  PIC X(9)  VALUE 'FRIDAY'.\n           05  FILLER                  PIC X(9)  VALUE 'SATURDAY'.\n           05  FILLER                  PIC X(9)  VALUE 'SUNDAY'.\n       01  FILLER REDEFINES WS-WEEK-TABLE.\n           05  WS-WEEK-DAY         PIC  X(9)\n                                   OCCURS 7 TIMES\n                                   INDEXED BY WS-WEEK-NUM.\n\n       01  WS-STV0410B-FIELDS.\n           05  STV0410B-IN-DATE        PIC  X(08).\n           05  STV0410B-CYDDD          PIC  X(07).\n           05  FILLER REDEFINES STV0410B-CYDDD.\n               10  STV0410B-CYDDD-CY   PIC  X(04).\n               10  STV0410B-CYDDD-DDD  PIC  XXX.\n           05  STV0410B-CYMD           PIC  X(08).\n           05  FILLER REDEFINES STV0410B-CYMD.\n               10  STV0410B-CYMD-C     PIC  XX.\n               10  STV0410B-CYMD-Y     PIC  XX.\n               10  STV0410B-CYMD-M     PIC  XX.\n               10  STV0410B-CYMD-D     PIC  XX.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  END STV0805B  '.\n\n       LINKAGE SECTION.\n\n       01  WS-PARM.\n           05  WS-DAY-IN.\n               10 WS-DI-CC            PIC XX.\n               10 WS-DI-YY            PIC XX.\n               10 WS-DI-MM            PIC XX.\n               10 WS-DI-DD            PIC XX.\n           05  WS-DAY-OUT             PIC X(9).\n           05  WS-DAY-NUM-OUT         PIC 9(2).\n\n       PROCEDURE DIVISION USING WS-PARM.\n\n       0000-START-PROCESS.\n\n      ****\n      **** FIND JULIAN DAYS SINCE JAN 1\n      **** ============================\n           MOVE SPACE      TO  WS-STV0410B-FIELDS.\n           MOVE WS-DAY-IN  TO  STV0410B-IN-DATE.\n           CALL WS-CALL410B USING WS-STV0410B-FIELDS.\n           IF STV0410B-CYDDD-DDD = ZEROS\n              MOVE ZEROS        TO  WS-DAY-NUM-OUT\n              MOVE '*********'  TO  WS-DAY-OUT\n              GO TO 0200-END-PROGRAM.\n           MOVE STV0410B-CYDDD-DDD      TO  WS-DAY-JUL.\n\n      ****\n      **** FIND LEAP YEARS SINCE THE BEGINING OF TIME\n      **** ==========================================\n           MOVE WS-DAY-IN (1:4)      TO  WS-DAY-YEAR.\n           MOVE ZERO                 TO  WS-DAY-REMAINDER.\n           DIVIDE WS-DAY-YEAR      BY  4\n              GIVING        WS-DAY-LEAPS\n              REMAINDER WS-DAY-REMAINDER.\n\n      ****\n      **** IF THIS IS A LEAP YEAR THEN JUL DATE WILL\n      **** TAKE CARE OF THIS SUBTRACT 1\n      **** =========================================\n           IF WS-DAY-REMAINDER = ZERO\n               SUBTRACT 1 FROM WS-DAY-LEAPS\n               IF WS-DI-YY = '00'\n                   DIVIDE WS-DAY-YEAR BY 400\n                      GIVING WS-DAY-LEAP2\n                      REMAINDER WS-DAY-REMAIN2\n                   IF WS-DAY-REMAIN2 NOT = ZERO\n                       ADD 1 TO WS-DAY-LEAPS.\n\n      ****\n      **** CALCULATE HOW MANY DAYS SINCE THE BEGINING OF TIME\n      **** ==================================================\n           COMPUTE WS-DAY-TOTAL-DAYS =\n                ((WS-DAY-YEAR * 365) + WS-DAY-LEAPS + WS-DAY-JUL - 1).\n\n      ****\n      **** SET THE FIRST DAY OF THE WORLD\n      **** ==============================\n           MOVE 6 TO WS-DAY-FIRST-DAY.\n\n      ****\n      **** FIND THE OFFSET NUMBER OF DAYS\n      **** ==============================\n           DIVIDE WS-DAY-TOTAL-DAYS BY 7\n              GIVING    WS-DAY-INDX.\n           MOVE WS-DAY-INDX (11:2) TO WS-DAY-INDX2.\n\n           EVALUATE WS-DAY-INDX2\n              WHEN 14\n                 MOVE 1 TO WS-DAY-NUM-OUT\n              WHEN 28\n                 MOVE 2 TO WS-DAY-NUM-OUT\n              WHEN 42\n                 MOVE 3 TO WS-DAY-NUM-OUT\n              WHEN 57\n                 MOVE 4 TO WS-DAY-NUM-OUT\n              WHEN 71\n                 MOVE 5 TO WS-DAY-NUM-OUT\n              WHEN 85\n                 MOVE 6 TO WS-DAY-NUM-OUT\n              WHEN OTHER\n                 MOVE ZERO TO WS-DAY-NUM-OUT\n           END-EVALUATE.\n\n      ****\n      **** USE OFFSET TO GET THE DAY\n      **** =========================\n           ADD  WS-DAY-FIRST-DAY  TO  WS-DAY-NUM-OUT.\n           IF WS-DAY-NUM-OUT  > 7\n                 SUBTRACT 7 FROM WS-DAY-NUM-OUT.\n           MOVE WS-WEEK-DAY(WS-DAY-NUM-OUT) TO WS-DAY-OUT.\n\n       0200-END-PROGRAM.\n           GOBACK.\n\n      ************************************ END STV0805B\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STV110M": {"ttr": 19214, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00X\\x01\\x19\\x07/\\x01\\x19\\x07/\\x12R\\x001\\x001\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-03-13T12:52:58", "lines": 49, "newlines": 49, "modlines": 0, "user": "IANNONE"}, "text": "STV110M  DFHMSD TYPE=MAP,MODE=INOUT,LANG=COBOL,STORAGE=AUTO,TIOAPFX=YES*\n               ,TERM=ALL,CTRL=(FREEKB)\nSTV110A  DFHMDI SIZE=(24,80),LINE=1,COLUMN=1\n         DFHMDF POS=(1,1),LENGTH=4,ATTRB=(BRT,ASKIP,FSET),             *\n               INITIAL='CNV2'\n         DFHMDF POS=(1,30),LENGTH=20,ATTRB=(BRT,ASKIP),                *\n               INITIAL='Hex/Dec Calculations'\n         DFHMDF POS=(6,1),LENGTH=10,ATTRB=(BRT,ASKIP),                 *\n               INITIAL='Conversion'\n         DFHMDF POS=(6,19),LENGTH=10,ATTRB=(ASKIP),                    *\n               INITIAL='Dec to Hex'\nDEC      DFHMDF POS=(6,30),LENGTH=9,ATTRB=(IC,UNPROT),                 *\n               INITIAL='_________'\n         DFHMDF POS=(6,40),LENGTH=1,ATTRB=(ASKIP)\nDECRET   DFHMDF POS=(6,42),LENGTH=9,ATTRB=(ASKIP)\n         DFHMDF POS=(8,19),LENGTH=10,ATTRB=(ASKIP),                    *\n               INITIAL='Hex to Dec'\nHEX      DFHMDF POS=(8,32),LENGTH=7,ATTRB=(UNPROT),                    *\n               INITIAL='_______'\n         DFHMDF POS=(8,40),LENGTH=1,ATTRB=(ASKIP)\nHEXRET   DFHMDF POS=(8,42),LENGTH=9,ATTRB=(ASKIP)\n         DFHMDF POS=(13,1),LENGTH=10,ATTRB=(BRT,ASKIP),                *\n               INITIAL='Arithmetic'\nMATH     DFHMDF POS=(13,36),LENGTH=3,ATTRB=(UNPROT),                   *\n               INITIAL='HEX'\n         DFHMDF POS=(13,40),LENGTH=1,ATTRB=(ASKIP)\nMATHL1   DFHMDF POS=(15,32),LENGTH=7,ATTRB=(UNPROT),                   *\n               INITIAL='_______'\n         DFHMDF POS=(15,40),LENGTH=1,ATTRB=(ASKIP)\nSIGN     DFHMDF POS=(16,28),LENGTH=1,ATTRB=(UNPROT),                   *\n               INITIAL='+'\n         DFHMDF POS=(16,30),LENGTH=1,ATTRB=(ASKIP)\nMATHL2   DFHMDF POS=(16,32),LENGTH=7,ATTRB=(UNPROT),                   *\n               INITIAL='_______'\n         DFHMDF POS=(16,40),LENGTH=1,ATTRB=(ASKIP)\n         DFHMDF POS=(17,27),LENGTH=12,ATTRB=(BRT,ASKIP),               *\n               INITIAL='------------'\nSIGN2    DFHMDF POS=(18,28),LENGTH=1,ATTRB=(ASKIP)\nMATHRET  DFHMDF POS=(18,30),LENGTH=9,ATTRB=(ASKIP)\nMSG1     DFHMDF POS=(23,1),LENGTH=79,ATTRB=(BRT,ASKIP),                *\n               INITIAL='---------------------------- Mercy Health Partn*\n               ers ----------------------------'\n         DFHMDF POS=(24,1),LENGTH=11,ATTRB=(ASKIP),                    *\n               INITIAL='<Clear>Exit'\n         DFHMDF POS=(24,54),LENGTH=20,ATTRB=(ASKIP),                   *\n               INITIAL='<F5>Date conversions'\n         DFHMSD TYPE=FINAL\n         END\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV115M": {"ttr": 19457, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x15\\x01\\x19\\x07/\\x01\\x19\\x07/\\x12S\\x00v\\x00v\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-03-13T12:53:15", "lines": 118, "newlines": 118, "modlines": 0, "user": "IANNONE"}, "text": "STV115M  DFHMSD TYPE=MAP,                                              X\n               LANG=COBOL,                                             X\n               TIOAPFX=YES,                                            X\n               CTRL=FREEKB,                                            X\n               MODE=INOUT\n**********************************************************************\nSTV115A  DFHMDI SIZE=(24,80)\n**********************************************************************\n         DFHMDF POS=(1,1),                                             X\n               LENGTH=4,                                               X\n               ATTRB=(BRT,ASKIP,FSET),                                 X\n               INITIAL='CONV'\n         DFHMDF POS=(1,26),                                            X\n               LENGTH=27,                                              X\n               ATTRB=(BRT,ASKIP),                                      X\n               INITIAL='    Date Calculations      '\nUSERID   DFHMDF POS=(1,61),                                            X\n               LENGTH=8,                                               X\n               ATTRB=(BRT,ASKIP)\nDATE     DFHMDF POS=(1,72),                                            X\n               LENGTH=8,                                               X\n               ATTRB=(BRT,ASKIP)\nTIME     DFHMDF POS=(2,72),                                            X\n               LENGTH=8,                                               X\n               ATTRB=(BRT,ASKIP)\n***********************************************************************\n         DFHMDF POS=(05,01),LENGTH=16,ATTRB=(BRT,ASKIP),               *\n               INITIAL='Gregorian/Julian'\n         DFHMDF POS=(5,30),                                            X\n               LENGTH=04,                                              X\n               ATTRB=(NORM,ASKIP),                                     X\n               INITIAL='DATE'\nINDATE   DFHMDF POS=(5,35),                                            X\n               LENGTH=8,                                               X\n               ATTRB=(NORM,UNPROT,IC),                                 X\n               INITIAL='________'\nSIGN     DFHMDF POS=(5,44),                                            X\n               LENGTH=1,                                               X\n               ATTRB=(DRK,ASKIP),                                      X\n               INITIAL='='\nANSWER   DFHMDF POS=(5,46),                                            X\n               LENGTH=8,                                               X\n               ATTRB=(DRK,ASKIP)\n         DFHMDF POS=(05,56),LENGTH=19,ATTRB=(BRT,ASKIP),               *\n               INITIAL='yyyyddd or yyyymmdd'\nDAY      DFHMDF POS=(6,46),                                            X\n               LENGTH=9,                                               X\n               ATTRB=(DRK,ASKIP)\n**********************************************************************\n         DFHMDF POS=(08,01),LENGTH=17,ATTRB=(BRT,ASKIP),               *\n               INITIAL='Dates/Nbr of days'\n         DFHMDF POS=(08,30),LENGTH=09,ATTRB=(NORM,ASKIP),              *\n               INITIAL='PAST DATE'\nPDATE    DFHMDF POS=(08,42),LENGTH=08,ATTRB=(NORM,UNPROT),             *\n               INITIAL='________'\n         DFHMDF POS=(08,51),LENGTH=1,ATTRB=ASKIP\n         DFHMDF POS=(08,56),LENGTH=19,ATTRB=(BRT,ASKIP),               *\n               INITIAL='yyyyddd or yyyymmdd'\n         DFHMDF POS=(09,30),LENGTH=11,ATTRB=(NORM,ASKIP),              *\n               INITIAL='FUTURE DATE'\nFDATE    DFHMDF POS=(09,42),LENGTH=08,ATTRB=(NORM,UNPROT),             *\n               INITIAL='________'\n         DFHMDF POS=(09,51),LENGTH=1,ATTRB=ASKIP\n         DFHMDF POS=(10,30),LENGTH=11,ATTRB=(NORM,ASKIP),              *\n               INITIAL='NBR OF DAYS'\nNBRDAY   DFHMDF POS=(10,42),LENGTH=05,ATTRB=(NORM,UNPROT),             *\n               INITIAL='_____'\n         DFHMDF POS=(10,48),LENGTH=1,ATTRB=ASKIP\n**********************************************************************\n         DFHMDF POS=(13,01),LENGTH=17,ATTRB=(BRT,ASKIP),               *\n               INITIAL='Subroutine check '\n         DFHMDF POS=(13,30),LENGTH=09,ATTRB=(NORM,ASKIP),              *\n               INITIAL='DATA     '\nDATA1    DFHMDF POS=(13,42),LENGTH=10,ATTRB=(NORM,UNPROT),             *\n               INITIAL='__________'\n         DFHMDF POS=(13,53),LENGTH=1,ATTRB=ASKIP\n         DFHMDF POS=(14,30),LENGTH=11,ATTRB=(NORM,ASKIP),              *\n               INITIAL='DATA2      '\nDATA2    DFHMDF POS=(14,42),LENGTH=10,ATTRB=(NORM,UNPROT),             *\n               INITIAL='__________'\n         DFHMDF POS=(14,53),LENGTH=1,ATTRB=ASKIP\n         DFHMDF POS=(15,30),LENGTH=11,ATTRB=(NORM,ASKIP),              *\n               INITIAL='IN         '\nIN       DFHMDF POS=(15,42),LENGTH=06,ATTRB=(NORM,UNPROT),             *\n               INITIAL='______'\n         DFHMDF POS=(15,49),LENGTH=1,ATTRB=ASKIP\n         DFHMDF POS=(16,30),LENGTH=11,ATTRB=(NORM,ASKIP),              *\n               INITIAL='OUT        '\nOUT      DFHMDF POS=(16,42),LENGTH=06,ATTRB=(NORM,UNPROT),             *\n               INITIAL='______'\n         DFHMDF POS=(16,49),LENGTH=1,ATTRB=ASKIP\n**********************************************************************\nSTVMSG   DFHMDF POS=(23,1),                                            X\n               LENGTH=79,                                              X\n               ATTRB=(BRT,ASKIP),                                      X\n               INITIAL='---------------------------- Mercy Health PartnX\n               ers ----------------------------'\n***********************************************************************\n         DFHMDF POS=(24,1),                                            X\n               LENGTH=11,                                              X\n               ATTRB=ASKIP,                                            X\n               INITIAL='<Clear>Exit'\n         DFHMDF POS=(24,14),                                           X\n               LENGTH=08,                                              X\n               ATTRB=ASKIP,                                            X\n               INITIAL='<F1>Help'\n         DFHMDF POS=(24,24),                                           X\n               LENGTH=09,                                              X\n               ATTRB=ASKIP,                                            X\n               INITIAL='<F3>Reset'\n         DFHMDF POS=(24,54),                                           X\n               LENGTH=19,                                              X\n               ATTRB=ASKIP,                                            X\n               INITIAL='<F5>Hex conversions'\n***********************************************************************\n          DFHMSD TYPE=FINAL\n          END\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV1295B": {"ttr": 19460, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00I\\x01\\x19\\x07/\\x01\\x192?\\x10G\\x00\\xb2\\x00\\xbd\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T10:47:49", "lines": 178, "newlines": 189, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  STV1295B: return the name of the month'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    STV1295B.\n       AUTHOR.        JIM IANNONE.\n      ******************************************************************\n      *@@@ II call program: given 19910101 return 'January 1st 1991'\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      *****************************************************************\n      * Program-id  : STV1295B\n      * Project #   : 910663\n      * Date written: 07/01/91\n      * Programmer  : Jim Iannone\n      *\n      *               GIVEN A FULL NUMERIC DATE, RETURN THE MONTH NAME\n      *               AND DAY SUFFIX SUCH AS 'ST' 'ND' 'RD' 'TH'.\n      *\n      *               NOTE: MONTH MAY BE SENT ALONE TO RETURN ONLY A\n      *                     MONTH NAME - LEAVE DD AND CCYY SPACES.\n      *               NOTE: IF DAY = SPACE, REPLACE WITH END OF MONTH\n      *                     NBR (EX: IF MONTH = 12, DAY = 31).\n      *               NOTE: ANY ERROR WILL CAUSE '****' TO BE\n      *                     PLACED IN LS-YEAR.\n      *\n      *                                  BEFORE:        AFTER:\n      *               LS-CCYYMMDD        '19910702'     '19910702'\n      *               LS-MONTH           SPACE          'JULY        '\n      *               LS-DAY             SPACE          ' 2ND'\n      *               LS-YEAR            SPACE          '1991'\n      *\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n       DATA DIVISION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' WORKING-STORAGE STV1295B START '.\n\n       01  WORK-FIELDS.\n           05  WS-CCYYMMDD             PIC  X(08).\n           05  FILLER REDEFINES WS-CCYYMMDD.\n               10  WS-CCYY             PIC  9(04).\n               10  FILLER REDEFINES WS-CCYY.\n                   15  WS-CCYY-C       PIC  99.\n                   15  WS-CCYY-Y       PIC  99.\n               10  WS-MM               PIC  99.\n               10  WS-DD               PIC  99.\n           05  FILLER REDEFINES WS-CCYYMMDD.\n               10  WS-CCYY-X           PIC  X(04).\n               10  WS-MM-X             PIC  XX.\n               10  WS-DD-X             PIC  XX.\n           05  WS-DAY.\n               10  WS-DAY-NBR          PIC  XX.\n               10  FILLER REDEFINES WS-DAY-NBR.\n                   15  WS-DAY-NBR-1    PIC  X.\n                   15  WS-DAY-NBR-2    PIC  X.\n               10  WS-DAY-SUFFIX       PIC  XX.\n           05  WS-QUOTIENT             PIC  999      VALUE ZERO.\n           05  WS-REMAINDER            PIC  999      VALUE ZERO.\n           05  WS-REMAIN2              PIC  9(04)    VALUE ZERO.\n\n       01  WS-TABLES.\n           05  WS-MONTH-TABLE1.\n               10  FILLER        PIC  X(14)    VALUE 'JANUARY     31'.\n               10  FILLER        PIC  X(14)    VALUE 'FEBRUARY    28'.\n               10  FILLER        PIC  X(14)    VALUE 'MARCH       31'.\n               10  FILLER        PIC  X(14)    VALUE 'APRIL       30'.\n               10  FILLER        PIC  X(14)    VALUE 'MAY         31'.\n               10  FILLER        PIC  X(14)    VALUE 'JUNE        30'.\n               10  FILLER        PIC  X(14)    VALUE 'JULY        31'.\n               10  FILLER        PIC  X(14)    VALUE 'AUGUST      31'.\n               10  FILLER        PIC  X(14)    VALUE 'SEPTEMBER   30'.\n               10  FILLER        PIC  X(14)    VALUE 'OCTOBER     31'.\n               10  FILLER        PIC  X(14)    VALUE 'NOVEMBER    30'.\n               10  FILLER        PIC  X(14)    VALUE 'DECEMBER    31'.\n           05  WS-MONTH-TABLE2 REDEFINES WS-MONTH-TABLE1.\n               10  FILLER              OCCURS 12 TIMES.\n                   15  WS-MONTH        PIC  X(12).\n                   15  WS-EOM-DAY      PIC  XX.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  STV1295B END  '.\n\n       LINKAGE SECTION.\n\n       01  LS-RECORD.\n           05  LS-CCYYMMDD             PIC  X(08).\n           05  LS-MONTH                PIC  X(12).\n           05  LS-DAY                  PIC  X(04).\n           05  LS-YEAR                 PIC  X(04).\n\n       PROCEDURE DIVISION USING LS-RECORD.\n\n       0100-PROGRAM-ENTRY.\n      ****************************************\n      *    RESET FIELDS IN CASE OF MULTIPLE CALLS BY SAME PROGRAM\n      ****************************************\n           MOVE SPACE                  TO LS-MONTH LS-DAY\n                                          LS-YEAR.\n           MOVE ZERO                   TO WS-CCYYMMDD WS-QUOTIENT\n                                          WS-REMAINDER.\n      ****************************************\n      *    MONTH MAY BE ENTERED ALONE: ONLY A MONTH NAME IS RETURNED\n      ****************************************\n           MOVE LS-CCYYMMDD                   TO WS-CCYYMMDD.\n           IF WS-MM-X NOT NUMERIC\n               GO TO 0200-EXIT-ERROR.\n           IF WS-MM = ZERO\n               OR WS-MM > 12\n               GO TO 0200-EXIT-ERROR.\n           IF (WS-DD-X = SPACE)\n               AND (WS-CCYY-X = SPACE)\n               MOVE WS-MONTH (WS-MM)          TO LS-MONTH\n               GO TO 0300-EXIT-PROGRAM.\n\n      ****************************************\n      *    IF WS-DD = SPACE, MOVE THE CORRESPONDING END OF MONTH NBR\n      *    TO WS-DD.\n      ****************************************\n           IF WS-CCYY-X NOT NUMERIC\n               GO TO 0200-EXIT-ERROR.\n           IF WS-DD-X = SPACE\n               DIVIDE WS-CCYY BY 4 GIVING WS-QUOTIENT\n                   REMAINDER WS-REMAINDER\n               IF WS-MM = 02\n                   IF WS-REMAINDER = ZERO\n                     IF WS-CCYY-Y = ZERO\n                         DIVIDE WS-CCYY BY 400 GIVING WS-QUOTIENT\n                             REMAINDER WS-REMAIN2\n                         IF WS-REMAIN2 = ZERO\n                             MOVE '29'        TO WS-DD-X\n                         ELSE\n                             CONTINUE\n                     ELSE\n                         MOVE '29'            TO WS-DD-X.\n\n           IF WS-DD-X = SPACE\n               MOVE WS-EOM-DAY (WS-MM)        TO WS-DD-X.\n\n      ****************************************\n      *    FILL OUTPUT FIELDS WITH CONVERTED DATE NAMES.\n      ****************************************\n           MOVE WS-MONTH (WS-MM)              TO LS-MONTH.\n\n           MOVE WS-DD                         TO WS-DAY-NBR.\n           IF WS-DD = 01 OR 21 OR 31\n               MOVE 'ST'                      TO WS-DAY-SUFFIX\n           ELSE\n           IF WS-DD = 02 OR 22\n               MOVE 'ND'                      TO WS-DAY-SUFFIX\n           ELSE\n           IF WS-DD = 03 OR 23\n               MOVE 'RD'                      TO WS-DAY-SUFFIX\n           ELSE\n               MOVE 'TH'                      TO WS-DAY-SUFFIX.\n           IF WS-DAY-NBR-1 = '0'\n               MOVE SPACE                     TO WS-DAY-NBR-1.\n           MOVE WS-DAY                        TO LS-DAY.\n           MOVE WS-CCYY                       TO LS-YEAR.\n           MOVE WS-CCYYMMDD                   TO LS-CCYYMMDD.\n           GO TO 0300-EXIT-PROGRAM.\n\n       0200-EXIT-ERROR.\n           MOVE '****'                        TO LS-YEAR.\n\n       0300-EXIT-PROGRAM.\n           GOBACK.\n\n      ************************************ END STV1295B\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV1320B": {"ttr": 19464, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x19\\x07/\\x01\\x192?\\x10H\\x00v\\x00\\x81\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T10:48:00", "lines": 118, "newlines": 129, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  STV1320B: Cobol II time conversion'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    STV1320B.\n       AUTHOR.        JIM IANNONE.\n      ******************************************************************\n      *@@@ II call program to convert military/standard time\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      *****************************************************************\n      * Program-id  : STV1320B\n      * Project #   : 901030\n      * Date written: 10/08/90\n      * Programmer  : Jim Iannone\n      *\n      *               THIS PROGRAM WILL ACCEPT EITHER A 12 HR OR 24 HR\n      *               TIME PARAMETER AND RETURN THE OTHER TIME.\n      *               THE TIME IS ACCEPTED AS 'HHMMAM' OR 'HHMMPM' FOR\n      *               STANDARD TIME OR 'HHMMSS' FOR MILITARY TIME. IF\n      *               THERE IS ANY ERROR FOUND, THE ORIGINAL TIME IS\n      *               RETURNED UNCHANGED.\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n       DATA DIVISION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' WORKING-STORAGE STV1320B START '.\n\n       01  WS-FIELDS.\n           05  WS-TIME                               VALUE SPACE.\n               10  WS-HH               PIC  XX.\n               10  WS-MM               PIC  XX.\n               10  WS-SS               PIC  XX.\n           05  WS-NEW-TIME                           VALUE SPACE.\n               10  WS-NEW-HH           PIC  XX.\n               10  WS-NEW-MM           PIC  XX.\n               10  WS-NEW-SS           PIC  XX.\n           05  WS-HH-NUMERIC           PIC  99       VALUE ZERO.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  END STV1320B  '.\n\n       LINKAGE SECTION.\n\n       01  LS-CALC-TIME.\n           05  FILLER                  PIC  X(06).\n\n       PROCEDURE DIVISION USING LS-CALC-TIME.\n\n      ****************************************\n      *    IF 'AM' OR 'PM' ARE FOUND, PROCESS AS A MILITARY\n      *    CONVERSION, ELSE PROCESS AS A STANDARD CONVERSION.\n      ****************************************\n       0000-START-PROCESS.\n           MOVE SPACE                         TO WS-TIME\n                                                 WS-NEW-TIME.\n           MOVE LS-CALC-TIME                  TO WS-TIME.\n           IF WS-HH NOT NUMERIC\n               OR WS-MM NOT NUMERIC\n               GO TO 0300-END-PROCESS.\n           IF WS-HH > '23'\n               OR WS-MM > '59'\n               GO TO 0300-END-PROCESS.\n           IF WS-SS = 'AM' OR 'PM'\n               GO TO 0100-CALC-TO-MILITARY.\n\n           MOVE WS-MM                         TO WS-NEW-MM.\n           IF WS-HH > '12'\n               MOVE WS-HH                     TO WS-HH-NUMERIC\n               SUBTRACT 12 FROM WS-HH-NUMERIC\n               MOVE WS-HH-NUMERIC             TO WS-NEW-HH\n               MOVE 'PM'                      TO WS-NEW-SS\n               GO TO 0200-MOVE-TIME.\n           MOVE WS-HH                         TO WS-NEW-HH.\n           IF WS-HH < '12'\n               MOVE 'AM'                      TO WS-NEW-SS.\n           IF WS-HH = '12'\n               MOVE 'PM'                      TO WS-NEW-SS.\n           IF WS-HH = ZERO\n               MOVE '12'                      TO WS-NEW-HH.\n           GO TO 0200-MOVE-TIME.\n\n       0100-CALC-TO-MILITARY.\n           IF WS-HH > '12'\n               OR WS-HH = ZERO\n               GO TO 0300-END-PROCESS.\n           MOVE ZERO                          TO WS-NEW-SS.\n           MOVE WS-MM                         TO WS-NEW-MM.\n           IF WS-SS = 'PM'\n               IF WS-HH = '12'\n                   MOVE WS-HH                 TO WS-NEW-HH\n                   GO TO 0200-MOVE-TIME\n               ELSE\n                   MOVE WS-HH                 TO WS-HH-NUMERIC\n                   ADD 12                     TO WS-HH-NUMERIC\n                   MOVE WS-HH-NUMERIC         TO WS-NEW-HH\n                   GO TO 0200-MOVE-TIME\n           ELSE\n               MOVE WS-HH                     TO WS-NEW-HH\n               IF WS-NEW-HH = '12'\n                   MOVE ZERO                  TO WS-NEW-HH.\n\n       0200-MOVE-TIME.\n           MOVE WS-NEW-TIME                   TO LS-CALC-TIME.\n\n       0300-END-PROCESS.\n           GOBACK.\n\n      ************************************ END STV1320B\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV1400B": {"ttr": 19467, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x14\\x01\\x19\\x07/\\x01\\x192?\\x10H\\x05?\\x05K\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T10:48:14", "lines": 1343, "newlines": 1355, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  STV1400B: year 2000 common date subroutine'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    STV1400B.\n       AUTHOR.        JIM IANNONE.\n      ******************************************************************\n      *@@@ II convert dates for the year 2000\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      *****************************************************************\n      * Program-id  : STV1400B\n      * Date written: 03/06/1998\n      * Programmer  : Jim Iannone\n      *\n      *       CALL PROGRAM TO COMBINE DATE SUBROUTINES FOR\n      *       YEAR 2000 COMPLIANCE\n      *\n      *-----------------------------------------------------------\n      *  !!!  IT IS UP TO THE PROGRAMMER TO VERIFY THE FOLLOWING,\n      *       ELSE UNPREDICTABLE RESULTS MAY OCCUR:\n      *\n      *   1.  IF PROVIDING INPUT DATA, THE DATA FORMAT MUST MATCH\n      *       THE INPUT PARM DESCRIBING THAT DATA\n      *       IE:  DATA: 98/078\n      *              IN: CY/DDD\n      *\n      *       THESE DO NOT MATCH.  '98/078' IMPLIES 'Y/DDD'.\n      *\n      *   2.  INCOMPATIBLE FORMATS SHOULD NOT BE MIXED:\n      *       IE:  DATA: 132400\n      *              IN: HMSM\n      *             OUT: CYMD\n      *\n      *       HERE YOU PROVIDED A TIME VALUE AND ASKED THAT IT BE\n      *       CONVERTED TO A DATE.\n      *\n      *   3.  WHEN PROVIDING A DATE IN CYMD FORMAT OTHER THAN\n      *       CURRENT DATE, SPECIFY 'CYMD  ' FOR THE 'IN' PARM,\n      *       RATHER THAN '      ', WHICH CAUSES CURRENT DATE TO\n      *       BE USED.\n      *\n      *   4.  BE CAREFUL WHEN LOADING STV1400B-DATA.  IT IS DEFINED\n      *       AS PIC X(10).  BE CAREFUL WHEN MOVING NUMERIC FIELDS\n      *       TO IT; BE SURE ALL DATA IS LEFT JUSTIFIED.\n      *       USE STV1400B-CYMD (BELOW) IF IT IS EASIER.\n      *\n      *   5.  ALWAYS TEST STV1400B-ERROR FOR 'ERROR ' AFTER THE CALL.\n      *       AN ERROR NUMBER IS ALSO PROVIDED IN STV1400B-NBR.\n      *\n      *-----------------------------------------------------------\n      *\n      * EXAMPLE  :   MARCH 19, 1998, THURSDAY\n      * DATE     :   98078 JULIAN,  1:24 PM\n      *\n      *-----------------------------------------------------------\n      *\n      * --->     10 BYTE DATA FIELD:\n      *               INPUT:  FORMATTED AS 'IN' DATA BELOW.\n      *                       SPACES (DEFAULT) IS CYMD.\n      *               OUTPUT: FORMATTED AS 'OUT' DATA BELOW,\n      *                       OR CONTAINS 'ERROR ####'\n      *\n      * --->     10 BYTE DATA2 FIELD:\n      *               ONLY USED WHEN PROVIDING A DATE OTHER THAN\n      *               CURRENT DATE TO THE NBR-OF-DAYS OR PATIENT\n      *               AGE ROUTINES.  SEND IN THE SAME FORMAT AS THE\n      *               10 BYTE DATA FIELD ABOVE.\n      *               ALSO USED TO PROVIDE A FUTURE TIME VALUE.\n      *\n      * --->     6 BYTE 'IN' DATA FORMAT:\n      *\n      *              HERE YOU TELL STV1400B THE FORMAT OF THE DATE\n      *              OR OTHER DATA, SO THAT STV1400B CAN RECOGNIZE\n      *              AND CONVERT IT AS NEEDED.\n      *\n      *              IN            10 BYTE FIELD CONTENTS\n      *              --------      ----------------------\n      *              '      '      CURRENT CYMD\n      *              'CY    '      '1998      '\n      *              'CY/DDD'      '1998/078  '\n      *              'CY/M/D'      '1998/03/19'\n      *              'CYDDD '      '1998078   '\n      *              'CYMD  '      '19980319  '\n      *              'DDD   '      '078       '\n      *              'HMM   '      '1324      '   MILITARY TIME\n      *              'HMSM  '      '132400    '   MILITARY TIME\n      *              'H:MM  '      '13:24     '   MILITARY TIME\n      *              'H:M:SM'      '13:24:00  '   MILITARY TIME\n      *              'HMP   '      '0124PM    '   STANDARD TIME\n      *              'H:M P '      '01:24 PM  '   STANDARD TIME\n      *              'H:MP  '      '01:24PM   '   STANDARD TIME\n      *              'KEY   '      '30019681  '   = 19980319\n      *              'M     '      '03        '\n      *              'M/D   '      '03/19     '\n      *              'M/D/CY'      '03/19/1998'\n      *              'M/D/Y '      '03/19/98  '\n      *              'MD    '      '0319      '\n      *              'MDCY  '      '03191998  '\n      *              'MDY   '      '031998    '\n      *              'MMM   '      'SEP       '\n      *              'MMMCY '      'SEP1998   '\n      *              'MMMD  '      'SEP19     '\n      *              'MMMYD '      'SEP9819   '\n      *              'MONTH '      'SEPTEMBER '\n      *              'Y     '      '98        '\n      *              'Y/DDD '      '98/078    '\n      *              'Y/M/D '      '98/03/19  '\n      *              'YDDD  '      '98078     '\n      *              'YMD   '      '980319    '\n      *\n      * --->     6 BYTE 'OUT' DATA FORMAT:\n      *\n      *              HERE YOU TELL STV1400B THE FORMAT OF THE\n      *              DATA THAT YOU WANT AS OUTPUT.\n      *\n      *              OUT           10 BYTE FIELD RETURNED\n      *              --------      ----------------------\n      *              '      '      'IN' CYMD DATA, OR CURRENT CYMD\n      *              '+00134'      '19980731  '   days future\n      *              '-00023'      '19980224  '   days past\n      *              'I00134'      '15380000  '   increment # minutes\n      *                                   |--> ## nbr days calc'd past\n      *              'D00023'      '13010000  '   decrement # minutes\n      *              'AGE   '      '0450210   '   YYYMMDD\n      *              'CDDEY2'      '1996366   '   EOY - CYDDD - past\n      *              'CDDE02'      '1998031   '   EOM - CYDDD - past\n      *              'CDD002'      '1998076   '   CYDDD minus 2 days\n      *              'CDFEY2'      '2000366   '   EOY - CYDDD - future\n      *              'CDFE02'      '1998151   '   EOM - CYDDD - future\n      *              'CDF002'      '1998080   '   CYDDD plus 2 days\n      *              'CMDEY2'      '19961231  '   EOY - CYMD - past\n      *              'CMDE02'      '19980131  '   EOM - CYMD - past\n      *              'CMDX  '      '19980319  '   CYMD\n      *              'CMD002'      '19980317  '   CYMD minus 2 days\n      *              'CMFEY2'      '20001231  '   EOY - CYMD - future\n      *              'CMFE02'      '19980531  '   EOM - CYMD - future\n      *              'CMF002'      '19980321  '   CYMD plus 2 days\n      *              'CY    '      '1998      '\n      *              'CY/DDD'      '1998/078  '\n      *              'CY/M/D'      '1998/03/19'\n      *              'CYDDD '      '1998078   '\n      *              'CYDX  '      '1998      '\n      *              'CYD002'      '1996      '   CY minus 2 years\n      *              'CYF002'      '2000      '   CY plus 2 years\n      *              'CYMD  '      '19980319  '\n      *              'D     '      '19        '\n      *              'DAY   '      'THURSDAY 4'   MON=1...SUN=7\n      *              'DAYS  '      '00034     '   CURR - IN-DATE\n      *              'DDD   '      '078       '\n      *              'HMM   '      '1324      '   MILITARY TIME\n      *              'HMSM  '      '132400    '   MILITARY TIME\n      *              'H:MM  '      '13:24     '   MILITARY TIME\n      *              'H:M:SM'      '13:24:00  '   MILITARY TIME\n      *              'HMP   '      '0124PM    '   STANDARD TIME\n      *              'H:M P '      '01:24 PM  '   STANDARD TIME\n      *              'H:MP  '      '01:24PM   '   STANDARD TIME\n      *              'KEY   '      '19980319  '   = 30019681\n      *              'M     '      '03        '\n      *              'M/D   '      '03/19     '\n      *              'M/D/CY'      '03/19/1998'\n      *              'M/D/Y '      '03/19/98  '\n      *              'MD    '      '0319      '\n      *              'MDCY  '      '03191998  '\n      *              'MDY   '      '031998    '\n      *              'MIN   '      '001440    '  # MINUTES BETWEEN TIMES\n      *              'MIN - note: time can be passed as HHMMSS## where\n      *                           ## = number days in past (or future\n      *                           if valueing DATA2)\n      *              'MMM   '      'MAR       '\n      *              'MMMCY '      'MAR1998   '\n      *              'MMMD  '      'MAR19     '\n      *              'MMMYD '      'MAR9819   '\n      *              'MONTH '      'MARCH     '\n      *              'MYDEY2'      '123196    '   EOY - MDY - past\n      *              'MYDE03'      '123197    '   EOM - MDY - past\n      *              'MYD002'      '031798    '   MDY minus 2 days\n      *              'MYFEY2'      '123100    '   EOY - MDY - future\n      *              'MYFE03'      '063098    '   EOM - MDY - future\n      *              'MYF002'      '032198    '   MDY plus 2 days\n      *              'QTR   '      '1         '   1/2/3/4\n      *              'SUFFIX'      'MARCH     '   IN=' 1ST'  OUT='1998'\n      *              'Y     '      '98        '\n      *              'YDDEY2'      '96366     '   EOY - YDDD - past\n      *              'YDDE03'      '97365     '   EOM - YDDD - past\n      *              'YDD002'      '98076     '   YDDD minus 2 days\n      *              'YDFEY2'      '00366     '   EOY - YDDD - future\n      *              'YDFE03'      '98181     '   EOM - YDDD - future\n      *              'YDF002'      '98080     '   YDDD plus 2 days\n      *              'YMDEY2'      '961231    '   EOY - YMD - past\n      *              'YMDE03'      '971231    '   EOM - YMD - past\n      *              'YMD002'      '980317    '   YMD minus 2 days\n      *              'YMFEY2'      '001231    '   EOY - YMD - future\n      *              'YMFE03'      '980630    '   EOM - YMD - future\n      *              'YMF002'      '980321    '   YMD plus 2 days\n      *              'Y/DDD '      '98/078    '\n      *              'Y/M/D '      '98/03/19  '\n      *              'YDDD  '      '98078     '\n      *              'YMD   '      '980319    '\n      *\n      *\n      *-----------------------------------------------------------\n      *    CALL PROGRAMS REFERENCED BY THIS PROGRAM\n      *         STV0280B         AGE IN YEARS, MONTHS, DAYS\n      *         STV1295B         MONTH NAME/DAY SUFFIX\n      *         STV1320B         MILITARY/STANDARD TIME CONVERSION\n      *         STV1405B         CYMD CYDDD DATE EDIT\n      *         STV1410B         JULIAN/GREGORIAN CONVERSION\n      *         STV1420B         DATE/NBR DAYS CONVERSION\n      *         STV1805B         DAY NAME AND NUMBER\n      *-----------------------------------------------------------\n      *\n      *    01  WS-STV1400B-FIELDS.\n      *        05  STV1400B-DATA         PIC  X(10)   VALUE SPACE.\n      *        05  FILLER REDEFINES STV1400B-DATA.\n      *            10  STV1400B-ERROR    PIC  X(06).\n      *            10  STV1400B-NBR      PIC  X(04).\n      *        05  FILLER REDEFINES STV1400B-DATA.\n      *            10  STV1400B-CYMD     PIC  X(08).\n      *            10  FILLER            PIC  XX.\n      *        05  FILLER REDEFINES STV1400B-DATA.\n      *            10  STV1400B-DAYS     PIC  X(05).\n      *            10  FILLER            PIC  X(05).\n      *        05  FILLER REDEFINES STV1400B-DATA.\n      *            10  STV1400B-DAY      PIC  X(09).\n      *            10  STV1400B-DAY-NBR  PIC  X.\n      *        05  STV1400B-DATA2        PIC  X(10)   VALUE SPACE.\n      *        05  STV1400B-IN           PIC  X(06)   VALUE SPACE.\n      *        05  STV1400B-OUT          PIC  X(06)   VALUE SPACE.\n      *\n      *-----------------------------------------------------------\n      *\n      *    EXAMPLES:\n      *\n      *    MOVE SPACE                         TO WS-STV1400B-FIELDS.\n      *    CALL 'STV1400B' USING DFHEIBLK DFHCOMMAREA\n      *                          WS-STV1400B-FIELDS.\n      *    IF STV1400B-ERROR NOT = 'ERROR' ...\n      *    RESULTS:    STV1400B-DATA   = '19980319  '\n      *                STV1400B-IN     = '      '\n      *                STV1400B-OUT    = '      '\n      *\n      *    MOVE SPACE                         TO WS-STV1400B-FIELDS.\n      *    MOVE 'M/D/Y '                      TO STV1400B-OUT.\n      *    CALL 'STV1400B' USING DFHEIBLK DFHCOMMAREA\n      *                          WS-STV1400B-FIELDS.\n      *    IF STV1400B-ERROR NOT = 'ERROR' ...\n      *    RESULTS:    STV1400B-DATA   = '03/19/98  '\n      *\n      *    MOVE '980319    '                  TO STV1400B-DATA.\n      *    MOVE 'YMD   '                      TO STV1400B-IN.\n      *    MOVE '-0002 '                      TO STV1400B-OUT.\n      *    CALL 'STV1400B' USING DFHEIBLK DFHCOMMAREA\n      *                          WS-STV1400B-FIELDS.\n      *    IF STV1400B-ERROR NOT = 'ERROR' ...\n      *    RESULTS:    STV1400B-DATA   = '19980317  '\n      *\n      *    MOVE '1998/03/19'                  TO STV1400B-DATA.\n      *    MOVE 'CY/M/D'                      TO STV1400B-IN.\n      *    MOVE 'CYDDD '                      TO STV1400B-OUT.\n      *    CALL 'STV1400B' USING DFHEIBLK DFHCOMMAREA\n      *                          WS-STV1400B-FIELDS.\n      *    IF STV1400B-ERROR NOT = 'ERROR' ...\n      *    RESULTS:    STV1400B-DATA   = '1998078   '\n      *\n      *    MOVE '980912    '                  TO STV1400B-DATA.\n      *    MOVE 'YMD   '                      TO STV1400B-IN.\n      *    MOVE 'MONTH '                      TO STV1400B-OUT.\n      *    CALL 'STV1400B' USING DFHEIBLK DFHCOMMAREA\n      *                          WS-STV1400B-FIELDS.\n      *    IF STV1400B-ERROR NOT = 'ERROR' ...\n      *    RESULTS:    STV1400B-DATA   = 'SEPTEMBER '\n      *\n      *    MOVE '989_2_    '                  TO STV1400B-DATA.\n      *    MOVE 'YMD   '                      TO STV1400B-IN.\n      *    MOVE 'CYMD  '                      TO STV1400B-OUT.\n      *    CALL 'STV1400B' USING DFHEIBLK DFHCOMMAREA\n      *                          WS-STV1400B-FIELDS.\n      *    IF STV1400B-ERROR NOT = 'ERROR' ...\n      *    RESULTS:    STV1400B-DATA   = '19980902  '\n      *\n      *    MOVE '19980311  '                  TO STV1400B-DATA.\n      *    MOVE 'CYMD  '                      TO STV1400B-IN.\n      *    MOVE 'DAYS  '                      TO STV1400B-OUT.\n      *    CALL 'STV1400B' USING DFHEIBLK DFHCOMMAREA\n      *                          WS-STV1400B-FIELDS.\n      *    IF STV1400B-ERROR NOT = 'ERROR' ...\n      *    RESULTS:    STV1400B-DATA   = '00008     '\n      *\n      *    MOVE '980311    '                  TO STV1400B-DATA.\n      *    MOVE '980317    '                  TO STV1400B-DATA2.\n      *    MOVE 'YMD   '                      TO STV1400B-IN.\n      *    MOVE 'DAYS  '                      TO STV1400B-OUT.\n      *    CALL 'STV1400B' USING DFHEIBLK DFHCOMMAREA\n      *                          WS-STV1400B-FIELDS.\n      *    IF STV1400B-ERROR NOT = 'ERROR' ...\n      *    RESULTS:    STV1400B-DATA   = '00006     '\n      *\n      *    MOVE '          '                  TO STV1400B-DATA.\n      *    MOVE '      '                      TO STV1400B-IN.\n      *    MOVE 'SUFFIX'                      TO STV1400B-OUT.\n      *    CALL 'STV1400B' USING DFHEIBLK DFHCOMMAREA\n      *                          WS-STV1400B-FIELDS.\n      *    IF STV1400B-ERROR NOT = 'ERROR' ...\n      *    RESULTS:    STV1400B-DATA   = 'MARCH     '\n      *                STV1400B-IN     = '19TH  '\n      *                STV1400B-OUT    = '1998  '\n      *\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n       DATA DIVISION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' WORKING-STORAGE STV1400B START '.\n\n       01  WS-FIELDS.\n           05  WS-LS-DATA              PIC  X(10)    VALUE SPACE.\n           05  FILLER REDEFINES WS-LS-DATA.\n               10  WS-LS-DATA-1X2      PIC  XX.\n               10  WS-LS-DATA-3X4      PIC  XX.\n               10  WS-LS-DATA-5X6      PIC  XX.\n               10  WS-LS-DATA-7X8      PIC  XX.\n               10  WS-LS-DATA-9X10     PIC  XX.\n           05  FILLER REDEFINES WS-LS-DATA.\n               10  FILLER              PIC  XX.\n               10  WS-LS-DATA-3        PIC  X.\n               10  WS-LS-DATA-4X5      PIC  XX.\n               10  WS-LS-DATA-6        PIC  X.\n               10  FILLER              PIC  X(04).\n           05  FILLER REDEFINES WS-LS-DATA.\n               10  WS-LS-DATA-1X8      PIC  X(08).\n               10  FILLER              PIC  XX.\n           05  WS-LS-DATA2             PIC  X(10)    VALUE SPACE.\n           05  FILLER REDEFINES WS-LS-DATA2.\n               10  WS-LS-DATA2-C       PIC  XX.\n               10  WS-LS-DATA2-Y       PIC  XX.\n               10  WS-LS-DATA2-M       PIC  XX.\n               10  WS-LS-DATA2-D       PIC  XX.\n               10  FILLER              PIC  XX.\n           05  WS-LS-IN                PIC  X(06)    VALUE SPACE.\n           05  WS-LS-OUT               PIC  X(06)    VALUE SPACE.\n           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-1-CYMD.\n               10  WS-1-CYMD-C         PIC  XX.\n               10  WS-1-CYMD-Y         PIC  XX.\n               10  WS-1-CYMD-M         PIC  XX.\n               10  WS-1-CYMD-D         PIC  XX.\n           05  WS-2-CYMD               PIC  9(08)    VALUE ZERO.\n           05  FILLER REDEFINES WS-2-CYMD.\n               10  WS-2-CYMD-C         PIC  99.\n               10  WS-2-CYMD-Y         PIC  99.\n               10  WS-2-CYMD-M         PIC  99.\n               10  WS-2-CYMD-D         PIC  99.\n           05  FILLER REDEFINES WS-2-CYMD.\n               10  WS-2-CYMD-CY        PIC  9(04).\n               10  FILLER              PIC  9(04).\n           05  WS-2-CYMD-X REDEFINES WS-2-CYMD\n                                       PIC  X(08).\n           05  WS-I-CYMD               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-I-CYMD.\n               10  WS-I-CYMD-CY-N      PIC  9(04).\n               10  FILLER              PIC  9(04).\n           05  FILLER REDEFINES WS-I-CYMD.\n               10  WS-I-CYMD-C         PIC  XX.\n               10  WS-I-CYMD-YMD       PIC  X(06).\n               10  FILLER REDEFINES WS-I-CYMD-YMD.\n                   15  WS-I-CYMD-Y     PIC  XX.\n                   15  WS-I-CYMD-Y-N REDEFINES WS-I-CYMD-Y\n                                       PIC  99.\n                   15  WS-I-CYMD-M     PIC  XX.\n                   15  WS-I-CYMD-D     PIC  XX.\n           05  WS-O-CYMD               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-O-CYMD.\n               10  WS-O-CYMD-C         PIC  XX.\n               10  WS-O-CYMD-YMD       PIC  X(06).\n               10  FILLER REDEFINES WS-O-CYMD-YMD.\n                   15  WS-O-CYMD-Y     PIC  XX.\n                   15  WS-O-CYMD-M     PIC  XX.\n                   15  WS-O-CYMD-D     PIC  XX.\n           05  WS-I-HMS                PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-I-HMS.\n               10  WS-I-HMS-1X6.\n                   15  WS-I-HMS-H      PIC  XX.\n                   15  WS-I-HMS-H-N REDEFINES WS-I-HMS-H\n                                       PIC  99.\n                   15  WS-I-HMS-M      PIC  XX.\n                   15  WS-I-HMS-M-N REDEFINES WS-I-HMS-M\n                                       PIC  99.\n                   15  WS-I-HMS-S      PIC  XX.\n               10  WS-I-HMS-N REDEFINES WS-I-HMS-1X6\n                                       PIC  9(06).\n               10  WS-I-HMS-DAYS       PIC  XX.\n               10  WS-I-HMS-DAYS-N REDEFINES WS-I-HMS-DAYS\n                                       PIC  99.\n           05  WS-I-HMS2               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-I-HMS2.\n               10  WS-I-HMS2-1X6.\n                   15  WS-I-HMS2-H     PIC  XX.\n                   15  WS-I-HMS2-H-N REDEFINES WS-I-HMS2-H\n                                       PIC  99.\n                   15  WS-I-HMS2-M     PIC  XX.\n                   15  WS-I-HMS2-M-N REDEFINES WS-I-HMS2-M\n                                       PIC  99.\n                   15  WS-I-HMS2-S     PIC  XX.\n               10  WS-I-HMS2-DAYS      PIC  XX.\n               10  WS-I-HMS2-DAYS-N REDEFINES WS-I-HMS2-DAYS\n                                       PIC  99.\n           05  WS-O-HMS                PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-O-HMS.\n               10  WS-O-HMS-1X6.\n                   15  WS-O-HMS-H      PIC  XX.\n                   15  WS-O-HMS-M      PIC  XX.\n                   15  WS-O-HMS-S      PIC  XX.\n               10  WS-O-HMS-DAYS       PIC  XX.\n           05  WS-REV-DATE             PIC  9(08)    VALUE ZERO.\n           05  WS-ERROR-NBR            PIC  9(04)    VALUE ZERO.\n           05  WS-1-8020               PIC  9(04)    VALUE ZERO.\n           05  FILLER REDEFINES WS-1-8020.\n               10  WS-1-8020-C         PIC  99.\n               10  WS-1-8020-Y         PIC  99.\n           05  WS-2-8020-C             PIC  99       VALUE ZERO.\n           05  WS-3-8020-C             PIC  99       VALUE ZERO.\n           05  WS-EOM-NBR              PIC  99       VALUE ZERO.\n           05  WS-ABSTIME              PIC S9(16)    VALUE ZERO COMP.\n           05  WS-ASK-TIME             PIC  X(08)    VALUE SPACE.\n           05  WS-ASK-YMD              PIC  X(08)    VALUE SPACE.\n           05  WS-ASK-YEAR             PIC S9(08)    VALUE ZERO COMP.\n           05  WS-FUTURE-SW            PIC  X        VALUE SPACE.\n           05  WS-QUOTIENT             PIC  9(05)    VALUE ZERO.\n           05  WS-REMAINDER            PIC  9(05)    VALUE ZERO.\n           05  WS-PAST-MIN             PIC S9(06)    VALUE ZERO.\n           05  WS-FUTURE-MIN           PIC  9(06)    VALUE ZERO.\n           05  WS-HOLD-OUT             PIC  X(06)    VALUE SPACE.\n\n       01  WS-STV1420B-FIELDS.\n           05  STV1420B-PAST-DATE      PIC  X(08).\n           05  FILLER REDEFINES STV1420B-PAST-DATE.\n               10  STV1420B-CC         PIC  XX.\n               10  STV1420B-YY         PIC  XX.\n               10  STV1420B-MM         PIC  XX.\n               10  STV1420B-DD         PIC  XX.\n           05  STV1420B-FUTURE-DATE    PIC  X(08).\n           05  STV1420B-DAYS           PIC  X(05).\n\n      *    YEAR 2000 COMPLIANT JULIAN/GREGORIAN DATE CONVERSION\n       01  WS-STV1410B-FIELDS.\n           05  STV1410B-IN-DATE        PIC  X(08).\n           05  STV1410B-CYDDD          PIC  X(07).\n           05  STV1410B-CYMD           PIC  X(08).\n\n      *    RETURN THE DAY OF THE WEEK GIVEN A DATE IN CCYYMMDD FORMAT\n       01  WS-STV1805B-FIELDS.\n           05  STV1805B-CCYYMMDD       PIC  X(08).\n           05  STV1805B-DAY            PIC  X(09).\n           05  STV1805B-NBR-DAY        PIC  XX.\n\n      *    STV1295B IS USED TO RETURN A MONTH NAME AND DAY SUFFIX\n       01  WS-STV1295B-FIELDS.\n           05  STV1295B-DATE           PIC  X(08).\n           05  FILLER REDEFINES STV1295B-DATE.\n               10  STV1295B-CC         PIC  XX.\n               10  STV1295B-YY         PIC  XX.\n               10  STV1295B-MM         PIC  XX.\n               10  STV1295B-DD         PIC  XX.\n           05  STV1295B-MONTH          PIC  X(12).\n           05  STV1295B-DAY            PIC  X(04).\n           05  STV1295B-YEAR           PIC  X(04).\n\n      *    STV0280B WILL RETURN A PERSONS AGE IN YEARS, MONTHS, DAYS\n       01  WS-STV0280B-FIELDS.\n           05  STV0280B-DOB-CYMD       PIC  X(08).\n           05  STV0280B-AS-OF-CYMD     PIC  X(08).\n           05  STV0280B-AGE.\n               10  STV0280B-YEARS      PIC  XXX.\n               10  STV0280B-MONTHS     PIC  XX.\n               10  STV0280B-DAYS       PIC  XX.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  END STV1400B  '.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELDS.\n           05  LS-DATA                 PIC  X(10).\n           05  LS-DATA2                PIC  X(10).\n           05  LS-IN                   PIC  X(06).\n           05  LS-OUT                  PIC  X(06).\n\n       PROCEDURE DIVISION USING LS-FIELDS.\n\n       0100-START-PROCESS.\n\n      ****************************************\n      *    ALTER THIS CODE TO MAKE YEAR 2000 COMPLIANT\n      *    AFTER MOVING TO YEAR 2000 COMPLIANT VERSION OF COBOL.\n      *    ALSO ALTER 0400-DETERMINE-CENTURY.\n      *+**************************************\n           EXEC CICS ASKTIME\n               ABSTIME (WS-ABSTIME)\n           END-EXEC.\n           EXEC CICS FORMATTIME\n               ABSTIME (WS-ABSTIME)\n               TIME (WS-ASK-TIME)\n               YYMMDD (WS-ASK-YMD)\n               YEAR (WS-ASK-YEAR)\n           END-EXEC.\n           MOVE WS-ASK-TIME                   TO WS-I-HMS-1X6.\n           MOVE WS-ASK-YMD                    TO WS-I-CYMD-YMD.\n           MOVE WS-ASK-YEAR                   TO WS-1-8020.\n           MOVE WS-1-8020                     TO WS-I-CYMD-CY-N.\n      *    determine 80/20 rolling window\n           SUBTRACT 80                        FROM WS-1-8020.\n           MOVE WS-1-8020-C                   TO WS-2-8020-C\n                                                 WS-3-8020-C.\n           ADD 1                              TO WS-2-8020-C.\n           SUBTRACT 1                         FROM WS-3-8020-C.\n\n      ****************************************\n      *    CONVERT TO, THEN FROM, CYMD FORMAT\n      *+**************************************\n           MOVE ZERO                          TO WS-ERROR-NBR.\n           MOVE LS-DATA                       TO WS-LS-DATA.\n           MOVE LS-DATA2                      TO WS-LS-DATA2.\n           MOVE LS-IN                         TO WS-LS-IN.\n           MOVE LS-OUT                        TO WS-LS-OUT.\n           INSPECT WS-LS-IN CONVERTING 'abcdefghijklmnopqrstuvwxyz'\n                                    TO 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n           INSPECT WS-LS-OUT CONVERTING 'abcdefghijklmnopqrstuvwxyz'\n                                     TO 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n           INSPECT WS-LS-DATA CONVERTING 'abcdefghijklmnopqrstuvwxyz'\n                                      TO 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n           INSPECT WS-LS-DATA2 CONVERTING 'abcdefghijklmnopqrstuvwxyz'\n                                       TO 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.\n           MOVE WS-I-CYMD                     TO WS-1-CYMD.\n           MOVE WS-I-HMS                      TO WS-I-HMS2.\n           IF WS-LS-DATA NOT = SPACE\n               PERFORM 0300-CONVERT-TO-STANDARD\n           ELSE\n           IF WS-LS-DATA2 = SPACE\n               PERFORM 0300-CONVERT-TO-STANDARD.\n           IF WS-ERROR-NBR > ZERO\n               GO TO 4000-RETURN-ERROR.\n           IF WS-LS-DATA2 NOT = SPACE\n               MOVE WS-I-CYMD                 TO WS-O-CYMD\n               MOVE WS-1-CYMD                 TO WS-I-CYMD\n               MOVE WS-LS-DATA2               TO WS-LS-DATA\n               MOVE WS-I-HMS                  TO WS-O-HMS\n               PERFORM 0300-CONVERT-TO-STANDARD\n               IF WS-ERROR-NBR > ZERO\n                   GO TO 4000-RETURN-ERROR\n               ELSE\n                   MOVE WS-I-CYMD             TO WS-LS-DATA2\n                   MOVE WS-O-CYMD             TO WS-I-CYMD\n                   MOVE WS-I-HMS              TO WS-I-HMS2\n                   MOVE WS-O-HMS              TO WS-I-HMS.\n           PERFORM 0500-CONVERT-FROM-STANDARD.\n           IF WS-ERROR-NBR > ZERO\n               GO TO 4000-RETURN-ERROR.\n           GO TO 4200-EXIT-PROGRAM.\n\n       0300-CONVERT-TO-STANDARD.\n           EVALUATE WS-LS-IN\n               WHEN SPACE\n                   CONTINUE\n               WHEN 'CY    '\n                   MOVE WS-LS-DATA(1: 4)      TO WS-I-CYMD(1: 4)\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'CY/DDD'\n                   MOVE WS-LS-DATA(1: 4)      TO STV1410B-IN-DATE\n                   MOVE WS-LS-DATA(6: 3)      TO STV1410B-IN-DATE(5: 3)\n                   PERFORM 0800-CONV-TO-GREG\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'CY/M/D'\n                   MOVE WS-LS-DATA(1: 4)      TO WS-I-CYMD\n                   MOVE WS-LS-DATA(6: 2)      TO WS-I-CYMD-M\n                   MOVE WS-LS-DATA(9: 2)      TO WS-I-CYMD-D\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'CYDDD '\n                   MOVE WS-LS-DATA(1: 7)      TO STV1410B-IN-DATE\n                   PERFORM 0800-CONV-TO-GREG\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'CYMD  '\n                   MOVE WS-LS-DATA-1X8        TO WS-I-CYMD\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'DDD   '\n                   MOVE WS-I-CYMD(1: 4)       TO STV1410B-IN-DATE\n                   MOVE WS-LS-DATA(1: 3)      TO STV1410B-IN-DATE(5: 3)\n                   PERFORM 0800-CONV-TO-GREG\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'HMM   '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-HMS-H\n                   MOVE WS-LS-DATA-3X4        TO WS-I-HMS-M\n               WHEN 'HMSM  '\n                   MOVE WS-LS-DATA(1: 8)      TO WS-I-HMS\n               WHEN 'H:MM  '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-HMS-H\n                   MOVE WS-LS-DATA-4X5        TO WS-I-HMS-M\n               WHEN 'H:M:SM'\n                   MOVE WS-LS-DATA-1X2        TO WS-I-HMS-H\n                   MOVE WS-LS-DATA-4X5        TO WS-I-HMS-M\n                   MOVE WS-LS-DATA-7X8        TO WS-I-HMS-S\n               WHEN 'HMP   '\n                   MOVE WS-LS-DATA(1: 8)      TO WS-I-HMS\n                   PERFORM 1500-CONVERT-TO-MILITARY\n               WHEN 'H:M P '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-HMS-H\n                   MOVE WS-LS-DATA-4X5        TO WS-I-HMS-M\n                   MOVE WS-LS-DATA-7X8        TO WS-I-HMS-S\n                   PERFORM 1500-CONVERT-TO-MILITARY\n               WHEN 'H:MP  '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-HMS-H\n                   MOVE WS-LS-DATA-4X5        TO WS-I-HMS-M\n                   MOVE WS-LS-DATA(6: 2)      TO WS-I-HMS-S\n                   PERFORM 1500-CONVERT-TO-MILITARY\n               WHEN 'KEY   '\n                   PERFORM 2100-CONVERT-FROM-KEY\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'M     '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-M\n               WHEN 'M/D   '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-M\n                   MOVE WS-LS-DATA(4: 2)      TO WS-I-CYMD-D\n               WHEN 'M/D/CY'\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-M\n                   MOVE WS-LS-DATA(4: 2)      TO WS-I-CYMD-D\n                   MOVE WS-LS-DATA(7: 4)      TO WS-I-CYMD(1: 4)\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'M/D/Y '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-M\n                   MOVE WS-LS-DATA(4: 2)      TO WS-I-CYMD-D\n                   MOVE WS-LS-DATA(7: 2)      TO WS-I-CYMD-Y\n                   PERFORM 0400-DETERMINE-CENTURY\n                   PERFORM 0400-CENTURY-OUTSIDE-RANGE\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'MD    '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-M\n                   MOVE WS-LS-DATA-3X4        TO WS-I-CYMD-D\n               WHEN 'MDCY  '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-M\n                   MOVE WS-LS-DATA-3X4        TO WS-I-CYMD-D\n                   MOVE WS-LS-DATA-5X6        TO WS-I-CYMD-C\n                   MOVE WS-LS-DATA-7X8        TO WS-I-CYMD-Y\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'MDY   '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-M\n                   MOVE WS-LS-DATA-3X4        TO WS-I-CYMD-D\n                   MOVE WS-LS-DATA-5X6        TO WS-I-CYMD-Y\n                   PERFORM 0400-DETERMINE-CENTURY\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'MMM   '\n                   PERFORM 1000-DETERMINE-MONTH-NBR\n               WHEN 'MMMCY '\n                   MOVE WS-LS-DATA-4X5        TO WS-I-CYMD-C\n                   MOVE WS-LS-DATA(6: 2)      TO WS-I-CYMD-Y\n                   MOVE SPACE                 TO WS-LS-DATA(4: )\n                   PERFORM 1000-DETERMINE-MONTH-NBR\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'MMMD  '\n                   MOVE WS-LS-DATA-4X5        TO WS-I-CYMD-D\n                   MOVE SPACE                 TO WS-LS-DATA(4: )\n                   PERFORM 1000-DETERMINE-MONTH-NBR\n               WHEN 'MMMYD '\n                   MOVE WS-LS-DATA-4X5        TO WS-I-CYMD-Y\n                   MOVE WS-LS-DATA(6: 2)      TO WS-I-CYMD-D\n                   MOVE SPACE                 TO WS-LS-DATA(4: )\n                   PERFORM 1000-DETERMINE-MONTH-NBR\n                   PERFORM 0400-DETERMINE-CENTURY\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'MONTH '\n                   PERFORM 1000-DETERMINE-MONTH-NBR\n               WHEN 'Y     '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-Y\n                   PERFORM 0400-DETERMINE-CENTURY\n               WHEN 'Y/DDD '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-Y\n                   PERFORM 0400-DETERMINE-CENTURY\n                   MOVE WS-I-CYMD(1: 4)       TO STV1410B-IN-DATE\n                   MOVE WS-LS-DATA(4: 3)      TO STV1410B-IN-DATE(5: 3)\n                   PERFORM 0800-CONV-TO-GREG\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'Y/M/D '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-Y\n                   MOVE WS-LS-DATA(4: 2)      TO WS-I-CYMD-M\n                   MOVE WS-LS-DATA(7: 2)      TO WS-I-CYMD-D\n                   PERFORM 0400-DETERMINE-CENTURY\n                   PERFORM 0400-CENTURY-OUTSIDE-RANGE\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'YDDD  '\n                   MOVE WS-LS-DATA-1X2        TO WS-I-CYMD-Y\n                   PERFORM 0400-DETERMINE-CENTURY\n                   MOVE WS-I-CYMD(1: 4)       TO STV1410B-IN-DATE\n                   MOVE WS-LS-DATA(3: 3)      TO STV1410B-IN-DATE(5: 3)\n                   PERFORM 0800-CONV-TO-GREG\n                   PERFORM 0450-EDIT-DATE\n               WHEN 'YMD   '\n                   MOVE WS-LS-DATA(1: 6)      TO WS-I-CYMD-YMD\n                   PERFORM 0400-DETERMINE-CENTURY\n                   PERFORM 0450-EDIT-DATE\n               WHEN OTHER\n                   MOVE 300                   TO WS-ERROR-NBR\n           END-EVALUATE.\n\n      ****************************************\n      *    Y2K logic for rolling 80/20 window\n      ****************************************\n      *    yy < current yy        '/'  =  cc+1\n      *    yy not < current yy    '/'  =  cc\n      *    yy < current yy        '-'  =  cc\n      *    yy not < current yy    '-'  =  cc-1\n      ****************************************\n       0400-DETERMINE-CENTURY.\n           IF WS-I-CYMD-Y-N < WS-1-8020-Y\n               MOVE WS-2-8020-C               TO WS-I-CYMD-C\n           ELSE\n               MOVE WS-1-8020-C               TO WS-I-CYMD-C.\n\n       0400-CENTURY-OUTSIDE-RANGE.\n           IF WS-LS-DATA-6 = '-'\n               IF WS-I-CYMD-Y-N < WS-1-8020-Y\n                   MOVE WS-1-8020-C           TO WS-I-CYMD-C\n               ELSE\n                   MOVE WS-3-8020-C           TO WS-I-CYMD-C.\n\n       0450-EDIT-DATE.\n           IF WS-ERROR-NBR = ZERO\n               CALL 'STV1405B' USING DFHEIBLK DFHCOMMAREA\n                                     WS-I-CYMD\n               IF WS-I-CYMD-D NOT NUMERIC\n                   MOVE 0301                  TO WS-ERROR-NBR\n               ELSE IF WS-I-CYMD-M NOT NUMERIC\n                   MOVE 0302                  TO WS-ERROR-NBR\n               ELSE IF WS-I-CYMD-Y NOT NUMERIC\n                   MOVE 0303                  TO WS-ERROR-NBR\n               ELSE IF WS-I-CYMD-C NOT NUMERIC\n                   MOVE 0304                  TO WS-ERROR-NBR.\n\n       0500-CONVERT-FROM-STANDARD.\n           MOVE SPACE                         TO WS-LS-DATA.\n           MOVE WS-I-CYMD                     TO WS-O-CYMD.\n           EVALUATE WS-LS-OUT\n               WHEN SPACE\n                   MOVE WS-O-CYMD             TO WS-LS-DATA\n               WHEN 'AGE   '\n                   PERFORM 1800-CALC-AGE\n               WHEN 'CMDX  '\n                   MOVE WS-O-CYMD             TO WS-LS-DATA\n               WHEN 'CY    '\n               WHEN 'CYDX  '\n                   MOVE WS-O-CYMD(1: 4)       TO WS-LS-DATA\n               WHEN 'CY/DDD'\n                   PERFORM 0900-CONV-TO-JUL\n                   MOVE STV1410B-CYDDD(1: 4)  TO WS-LS-DATA(1: 4)\n                   MOVE '/'                   TO WS-LS-DATA(5: 1)\n                   MOVE STV1410B-CYDDD(5: 3)  TO WS-LS-DATA(6: 3)\n               WHEN 'CY/M/D'\n                   MOVE WS-O-CYMD-C           TO WS-LS-DATA-1X2\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA-3X4\n                   MOVE '/'                   TO WS-LS-DATA(5: 1)\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA(6: 2)\n                   MOVE '/'                   TO WS-LS-DATA(8: 1)\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA(9: 2)\n               WHEN 'CYDDD '\n                   PERFORM 0900-CONV-TO-JUL\n                   MOVE STV1410B-CYDDD        TO WS-LS-DATA\n               WHEN 'CYMD  '\n                   MOVE WS-O-CYMD             TO WS-LS-DATA\n               WHEN 'D     '\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA-1X2\n               WHEN 'DAY   '\n                   PERFORM 1400-DETERMINE-DAY\n               WHEN 'DAYS  '\n                   PERFORM 1900-NBR-DAYS\n               WHEN 'DDD   '\n                   PERFORM 0900-CONV-TO-JUL\n                   MOVE STV1410B-CYDDD(5: 3)  TO WS-LS-DATA\n               WHEN 'HMM   '\n                   MOVE WS-I-HMS(1: 4)        TO WS-LS-DATA\n               WHEN 'HMSM  '\n                   MOVE WS-I-HMS              TO WS-LS-DATA\n               WHEN 'H:MM  '\n                   MOVE WS-I-HMS-H            TO WS-LS-DATA-1X2\n                   MOVE ':'                   TO WS-LS-DATA-3\n                   MOVE WS-I-HMS-M            TO WS-LS-DATA-4X5\n               WHEN 'H:M:SM'\n                   MOVE WS-I-HMS-H            TO WS-LS-DATA-1X2\n                   MOVE ':'                   TO WS-LS-DATA-3\n                   MOVE WS-I-HMS-M            TO WS-LS-DATA-4X5\n                   MOVE ':'                   TO WS-LS-DATA-6\n                   MOVE WS-I-HMS-S            TO WS-LS-DATA-7X8\n               WHEN 'HMP   '\n                   PERFORM 1500-CONVERT-FROM-MILITARY\n               WHEN 'H:M P '\n                   PERFORM 1500-CONVERT-FROM-MILITARY\n               WHEN 'H:MP  '\n                   PERFORM 1500-CONVERT-FROM-MILITARY\n               WHEN 'KEY   '\n                   PERFORM 2100-CONVERT-TO-KEY\n               WHEN 'M     '\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA-1X2\n               WHEN 'M/D   '\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA-1X2\n                   MOVE '/'                   TO WS-LS-DATA(3: 1)\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA(4: 2)\n               WHEN 'M/D/CY'\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA-1X2\n                   MOVE '/'                   TO WS-LS-DATA(3: 1)\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA(4: 2)\n                   MOVE '/'                   TO WS-LS-DATA(6: 1)\n                   MOVE WS-O-CYMD-C           TO WS-LS-DATA(7: 2)\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA(9: 2)\n               WHEN 'M/D/Y '\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA-1X2\n                   MOVE '/'                   TO WS-LS-DATA(3: 1)\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA(4: 2)\n                   MOVE '/'                   TO WS-LS-DATA(6: 1)\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA(7: 2)\n               WHEN 'MD    '\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA-1X2\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA-3X4\n               WHEN 'MDCY  '\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA-1X2\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA-3X4\n                   MOVE WS-O-CYMD-C           TO WS-LS-DATA-5X6\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA-7X8\n               WHEN 'MDY   '\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA-1X2\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA-3X4\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA-5X6\n               WHEN 'MIN   '\n                   PERFORM 1300-MIN-BETWEEN-TIME\n               WHEN 'MMM   '\n                   PERFORM 1100-DETERMINE-MONTH-NAME\n                   MOVE SPACE                 TO WS-LS-DATA(4: )\n               WHEN 'MMMCY '\n                   PERFORM 1100-DETERMINE-MONTH-NAME\n                   MOVE WS-O-CYMD-C           TO WS-LS-DATA-4X5\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA(6: 2)\n                   MOVE SPACE                 TO WS-LS-DATA(8: )\n               WHEN 'MMMD  '\n                   PERFORM 1100-DETERMINE-MONTH-NAME\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA-4X5\n                   MOVE SPACE                 TO WS-LS-DATA(6: )\n               WHEN 'MMMYD '\n                   PERFORM 1100-DETERMINE-MONTH-NAME\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA-4X5\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA(6: 2)\n                   MOVE SPACE                 TO WS-LS-DATA(8: )\n               WHEN 'MONTH '\n                   PERFORM 1100-DETERMINE-MONTH-NAME\n               WHEN 'QTR   '\n                   PERFORM 2200-DETERMINE-QUARTER\n               WHEN 'SUFFIX'\n                   PERFORM 2000-DETERMINE-SUFFIX\n               WHEN 'Y     '\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA-1X2\n               WHEN 'Y/DDD '\n                   PERFORM 0900-CONV-TO-JUL\n                   MOVE STV1410B-CYDDD(3: 2)  TO WS-LS-DATA\n                   MOVE '/'                   TO WS-LS-DATA(3: 1)\n                   MOVE STV1410B-CYDDD(5: 3)  TO WS-LS-DATA(4: 3)\n               WHEN 'Y/M/D '\n                   MOVE WS-O-CYMD-Y           TO WS-LS-DATA-1X2\n                   MOVE '/'                   TO WS-LS-DATA(3: 1)\n                   MOVE WS-O-CYMD-M           TO WS-LS-DATA(4: 2)\n                   MOVE '/'                   TO WS-LS-DATA(6: 1)\n                   MOVE WS-O-CYMD-D           TO WS-LS-DATA(7: 2)\n               WHEN 'YDDD  '\n                   PERFORM 0900-CONV-TO-JUL\n                   MOVE STV1410B-CYDDD(3: 5)  TO WS-LS-DATA\n               WHEN 'YMD   '\n                   MOVE WS-O-CYMD-YMD         TO WS-LS-DATA\n               WHEN OTHER\n                   PERFORM 0700-OTHER-CALC\n           END-EVALUATE.\n\n       0700-OTHER-CALC.\n           IF WS-LS-OUT(2: 4) NUMERIC\n               IF WS-LS-OUT(1: 1) = '-' OR '+'\n                   MOVE WS-LS-OUT             TO WS-HOLD-OUT\n                   PERFORM 1200-NBR-DAYS\n                   MOVE WS-2-CYMD-X           TO WS-LS-DATA\n               ELSE\n               IF WS-LS-OUT(1: 1) = 'I' OR 'D'\n                   PERFORM 1300-INCREMENT-TIME\n               ELSE\n                   MOVE 702                   TO WS-ERROR-NBR\n           ELSE\n           IF WS-LS-OUT(1: 2) = 'CM' OR 'CD' OR 'YM' OR 'YD' OR 'MY'\n               IF WS-LS-OUT(4: 1) = 'E'\n                 IF WS-LS-OUT(5: 1) = 'Y'\n                   IF WS-LS-OUT(6: 1) NUMERIC\n                       MOVE WS-LS-OUT(6: 1)   TO WS-EOM-NBR\n                       IF WS-LS-OUT(3: 1) = 'D'\n                           MOVE SPACE         TO WS-FUTURE-SW\n                           PERFORM 1700-DETERMINE-EOY\n                       ELSE\n                       IF WS-LS-OUT(3: 1) = 'F'\n                           MOVE 'Y'           TO WS-FUTURE-SW\n                           PERFORM 1700-DETERMINE-EOY\n                       ELSE\n                           MOVE 0708          TO WS-ERROR-NBR\n                   ELSE\n                       MOVE 0708              TO WS-ERROR-NBR\n                 ELSE\n                 IF WS-LS-OUT(5: 2) NUMERIC\n                     MOVE WS-LS-OUT(5: 2)     TO WS-EOM-NBR\n                     IF WS-LS-OUT(3: 1) = 'D'\n                         MOVE SPACE           TO WS-FUTURE-SW\n                         PERFORM 1600-DETERMINE-EOM\n                     ELSE\n                     IF WS-LS-OUT(3: 1) = 'F'\n                         MOVE 'Y'             TO WS-FUTURE-SW\n                         PERFORM 1600-DETERMINE-EOM\n                     ELSE\n                         MOVE 0706            TO WS-ERROR-NBR\n                 ELSE\n                     MOVE 0706                TO WS-ERROR-NBR\n               ELSE\n               IF WS-LS-OUT(4: 3) NUMERIC\n                   IF WS-LS-OUT(3: 1) = 'D'\n                       MOVE SPACE             TO WS-FUTURE-SW\n                       PERFORM 1600-DETERMINE-EOD\n                   ELSE\n                   IF WS-LS-OUT(3: 1) = 'F'\n                       MOVE 'Y'               TO WS-FUTURE-SW\n                       PERFORM 1600-DETERMINE-EOD\n                   ELSE\n                       MOVE 0709              TO WS-ERROR-NBR\n               ELSE\n                   MOVE 0709                  TO WS-ERROR-NBR\n           ELSE\n           IF WS-LS-OUT(1: 3) = 'CYD' OR 'CYF'\n               IF WS-LS-OUT(4: 3) NUMERIC\n                   PERFORM 1400-DETERMINE-YEAR\n               ELSE\n                   MOVE 0710                  TO WS-ERROR-NBR\n           ELSE\n               MOVE 0700                      TO WS-ERROR-NBR.\n\n       0800-CONV-TO-GREG.\n           MOVE SPACE                         TO STV1410B-CYDDD\n                                                 STV1410B-CYMD.\n           CALL 'STV1410B' USING DFHEIBLK DFHCOMMAREA\n                                 WS-STV1410B-FIELDS.\n           IF STV1410B-CYMD NUMERIC\n               IF STV1410B-CYMD NOT = ZERO\n                   MOVE STV1410B-CYMD         TO WS-I-CYMD\n               ELSE\n                   MOVE 800                   TO WS-ERROR-NBR\n           ELSE\n               MOVE 801                       TO WS-ERROR-NBR.\n\n       0900-CONV-TO-JUL.\n           MOVE WS-O-CYMD                     TO STV1410B-IN-DATE.\n           MOVE SPACE                         TO STV1410B-CYDDD\n                                                 STV1410B-CYMD.\n           CALL 'STV1410B' USING DFHEIBLK DFHCOMMAREA\n                                 WS-STV1410B-FIELDS.\n           IF STV1410B-CYDDD NUMERIC\n               IF STV1410B-CYDDD NOT = ZERO\n                   CONTINUE\n               ELSE\n                   MOVE 900                   TO WS-ERROR-NBR\n           ELSE\n               MOVE 901                       TO WS-ERROR-NBR.\n\n       1000-DETERMINE-MONTH-NBR.\n           EVALUATE WS-LS-DATA\n               WHEN 'JAN       '   MOVE '01'  TO WS-I-CYMD-M\n               WHEN 'JANUARY   '   MOVE '01'  TO WS-I-CYMD-M\n               WHEN 'FEB       '   MOVE '02'  TO WS-I-CYMD-M\n               WHEN 'FEBRUARY  '   MOVE '02'  TO WS-I-CYMD-M\n               WHEN 'MAR       '   MOVE '03'  TO WS-I-CYMD-M\n               WHEN 'MARCH     '   MOVE '03'  TO WS-I-CYMD-M\n               WHEN 'APR       '   MOVE '04'  TO WS-I-CYMD-M\n               WHEN 'APRIL     '   MOVE '04'  TO WS-I-CYMD-M\n               WHEN 'MAY       '   MOVE '05'  TO WS-I-CYMD-M\n               WHEN 'JUN       '   MOVE '06'  TO WS-I-CYMD-M\n               WHEN 'JUNE      '   MOVE '06'  TO WS-I-CYMD-M\n               WHEN 'JUL       '   MOVE '07'  TO WS-I-CYMD-M\n               WHEN 'JULY      '   MOVE '07'  TO WS-I-CYMD-M\n               WHEN 'AUG       '   MOVE '08'  TO WS-I-CYMD-M\n               WHEN 'AUGUST    '   MOVE '08'  TO WS-I-CYMD-M\n               WHEN 'SEP       '   MOVE '09'  TO WS-I-CYMD-M\n               WHEN 'SEPTEMBER '   MOVE '09'  TO WS-I-CYMD-M\n               WHEN 'OCT       '   MOVE '10'  TO WS-I-CYMD-M\n               WHEN 'OCTOBER   '   MOVE '10'  TO WS-I-CYMD-M\n               WHEN 'NOV       '   MOVE '11'  TO WS-I-CYMD-M\n               WHEN 'NOVEMBER  '   MOVE '11'  TO WS-I-CYMD-M\n               WHEN 'DEC       '   MOVE '12'  TO WS-I-CYMD-M\n               WHEN 'DECEMBER  '   MOVE '12'  TO WS-I-CYMD-M\n               WHEN OTHER          MOVE 1000  TO WS-ERROR-NBR\n           END-EVALUATE.\n\n       1100-DETERMINE-MONTH-NAME.\n           MOVE SPACE                         TO WS-STV1295B-FIELDS.\n           MOVE WS-O-CYMD-M                   TO STV1295B-MM.\n           CALL 'STV1295B' USING DFHEIBLK DFHCOMMAREA\n                                 WS-STV1295B-FIELDS.\n           IF STV1295B-YEAR = '****'\n               MOVE 1100                      TO WS-ERROR-NBR\n           ELSE\n               MOVE STV1295B-MONTH            TO WS-LS-DATA.\n\n       1200-NBR-DAYS.\n           MOVE WS-HOLD-OUT(2: 5)             TO STV1420B-DAYS.\n           MOVE WS-O-CYMD                     TO STV1420B-PAST-DATE.\n           IF WS-HOLD-OUT(1: 1) = '-'\n               MOVE STV1420B-PAST-DATE        TO STV1420B-FUTURE-DATE\n               MOVE SPACE                     TO STV1420B-PAST-DATE\n           ELSE\n               MOVE SPACE                     TO STV1420B-FUTURE-DATE.\n           CALL 'STV1420B' USING DFHEIBLK DFHCOMMAREA\n                                 WS-STV1420B-FIELDS.\n           IF STV1420B-DAYS = '*****'\n               MOVE 1200                      TO WS-ERROR-NBR\n           ELSE\n           IF WS-HOLD-OUT(1: 1) = '-'\n               MOVE STV1420B-PAST-DATE        TO WS-2-CYMD-X\n           ELSE\n               MOVE STV1420B-FUTURE-DATE      TO WS-2-CYMD-X.\n\n       1300-INCREMENT-TIME.\n           MOVE ZERO                          TO WS-REMAINDER\n                                                 WS-EOM-NBR.\n           MOVE WS-LS-OUT(2: 5)               TO WS-QUOTIENT.\n           IF WS-QUOTIENT > 59\n               DIVIDE WS-QUOTIENT BY 60 GIVING WS-QUOTIENT\n                   REMAINDER WS-REMAINDER\n               IF WS-LS-OUT(1: 1) = 'I'\n                   PERFORM 1300-INCREMENT-HOUR WS-QUOTIENT TIMES\n               ELSE\n                   PERFORM 1300-DECREMENT-HOUR WS-QUOTIENT TIMES\n           ELSE\n               MOVE WS-QUOTIENT               TO WS-REMAINDER.\n           IF WS-LS-OUT(1: 1) = 'I'\n               PERFORM 1300-INCREMENT-MIN WS-REMAINDER TIMES\n           ELSE\n               PERFORM 1300-DECREMENT-MIN WS-REMAINDER TIMES.\n           MOVE WS-I-HMS                      TO WS-LS-DATA.\n           MOVE WS-EOM-NBR                    TO WS-LS-DATA-7X8.\n\n       1300-INCREMENT-MIN.\n           ADD 1                              TO WS-I-HMS-M-N.\n           IF WS-I-HMS-M-N > 59\n               MOVE ZERO                      TO WS-I-HMS-M-N\n               PERFORM 1300-INCREMENT-HOUR.\n\n       1300-DECREMENT-MIN.\n           IF WS-I-HMS-M-N = ZERO\n               MOVE 59                        TO WS-I-HMS-M-N\n               PERFORM 1300-DECREMENT-HOUR\n           ELSE\n               SUBTRACT 1 FROM WS-I-HMS-M-N.\n\n       1300-INCREMENT-HOUR.\n           ADD 1                              TO WS-I-HMS-H-N.\n           IF WS-I-HMS-H-N > 23\n               ADD 1                          TO WS-EOM-NBR\n               MOVE ZERO                      TO WS-I-HMS-H-N.\n\n       1300-DECREMENT-HOUR.\n           IF WS-I-HMS-H-N = ZERO\n               MOVE 23                        TO WS-I-HMS-H-N\n               ADD 1                          TO WS-EOM-NBR\n           ELSE\n               SUBTRACT 1 FROM WS-I-HMS-H-N.\n\n      ****************************************\n      *    past/curr time: determine # minutes before 00:00 this morning\n      *    future time: determine # minutes after 00:00 this morning\n      *    determine difference\n      *+**************************************\n       1300-MIN-BETWEEN-TIME.\n           IF WS-I-HMS-DAYS = SPACE\n               MOVE '00'                      TO WS-I-HMS-DAYS.\n           IF WS-I-HMS2-DAYS = SPACE\n               MOVE '00'                      TO WS-I-HMS2-DAYS.\n           IF WS-I-HMS NOT NUMERIC\n               OR WS-I-HMS2 NOT NUMERIC\n               MOVE 1300                      TO WS-ERROR-NBR\n           ELSE\n               COMPUTE WS-PAST-MIN = WS-I-HMS-DAYS-N * 1440\n               COMPUTE WS-QUOTIENT = WS-I-HMS-H-N * 60\n               ADD WS-I-HMS-M-N               TO WS-QUOTIENT\n               SUBTRACT WS-QUOTIENT FROM WS-PAST-MIN\n               COMPUTE WS-FUTURE-MIN = WS-I-HMS2-DAYS-N * 1440\n               COMPUTE WS-QUOTIENT = WS-I-HMS2-H-N * 60\n               ADD WS-I-HMS2-M-N              TO WS-QUOTIENT\n               ADD WS-QUOTIENT                TO WS-FUTURE-MIN\n               ADD WS-PAST-MIN                TO WS-FUTURE-MIN\n               MOVE WS-FUTURE-MIN             TO WS-LS-DATA(1: 6).\n\n       1400-DETERMINE-DAY.\n           MOVE WS-O-CYMD                     TO STV1805B-CCYYMMDD.\n           MOVE SPACE                         TO STV1805B-DAY.\n           MOVE ZERO                          TO STV1805B-NBR-DAY.\n           CALL 'STV1805B' USING DFHEIBLK DFHCOMMAREA\n                                 WS-STV1805B-FIELDS.\n           IF STV1805B-NBR-DAY = '00'\n               OR STV1805B-DAY = SPACE\n               MOVE 1400                      TO WS-ERROR-NBR\n           ELSE\n               MOVE STV1805B-DAY              TO WS-LS-DATA\n               MOVE STV1805B-NBR-DAY(2: 1)    TO WS-LS-DATA(10: 1).\n\n       1400-DETERMINE-YEAR.\n           MOVE WS-O-CYMD                     TO WS-2-CYMD.\n           MOVE WS-LS-OUT(4: 3)               TO WS-FUTURE-MIN.\n           IF WS-LS-OUT(1: 3) = 'CYD'\n               COMPUTE WS-2-CYMD-CY = WS-2-CYMD-CY - WS-FUTURE-MIN\n           ELSE\n               COMPUTE WS-2-CYMD-CY = WS-2-CYMD-CY + WS-FUTURE-MIN.\n           MOVE WS-2-CYMD-CY                  TO WS-LS-DATA(1: 4).\n\n       1500-CONVERT-TO-MILITARY.\n           CALL 'STV1320B' USING DFHEIBLK DFHCOMMAREA\n                                 WS-I-HMS-1X6.\n           IF WS-LS-IN = 'HMP   ' OR 'H:M P ' OR 'H:MP  '\n               IF WS-I-HMS-S NOT NUMERIC\n                   MOVE 1500                  TO WS-ERROR-NBR.\n\n       1500-CONVERT-FROM-MILITARY.\n           MOVE WS-I-HMS                      TO WS-O-HMS.\n           CALL 'STV1320B' USING DFHEIBLK DFHCOMMAREA\n                                 WS-O-HMS-1X6.\n           IF WS-I-HMS-S = WS-O-HMS-S\n               MOVE 1502                      TO WS-ERROR-NBR\n           ELSE\n           IF WS-LS-OUT = 'H:M P '\n               MOVE WS-O-HMS-H                TO WS-LS-DATA-1X2\n               MOVE ':'                       TO WS-LS-DATA-3\n               MOVE WS-O-HMS-M                TO WS-LS-DATA-4X5\n               MOVE SPACE                     TO WS-LS-DATA-6\n               MOVE WS-O-HMS-S                TO WS-LS-DATA-7X8\n           ELSE\n           IF WS-LS-OUT = 'H:MP  '\n               MOVE WS-O-HMS-H                TO WS-LS-DATA-1X2\n               MOVE ':'                       TO WS-LS-DATA-3\n               MOVE WS-O-HMS-M                TO WS-LS-DATA-4X5\n               MOVE WS-O-HMS-S                TO WS-LS-DATA(6: 2)\n           ELSE\n               MOVE WS-O-HMS                  TO WS-LS-DATA.\n\n       1600-DETERMINE-EOD.\n           IF WS-FUTURE-SW = 'Y'\n               MOVE '+00'                     TO WS-HOLD-OUT(1: 3)\n           ELSE\n               MOVE '-00'                     TO WS-HOLD-OUT(1: 3).\n           MOVE WS-LS-OUT(4: 3)               TO WS-HOLD-OUT(4: 3).\n           PERFORM 1200-NBR-DAYS.\n           IF WS-LS-OUT(1: 3) = 'CDD' OR 'CDF'\n               MOVE WS-2-CYMD-X               TO WS-O-CYMD\n               PERFORM 0900-CONV-TO-JUL\n               MOVE STV1410B-CYDDD            TO WS-LS-DATA\n           ELSE\n           IF WS-LS-OUT(1: 3) = 'YDD' OR 'YDF'\n               MOVE WS-2-CYMD-X               TO WS-O-CYMD\n               PERFORM 0900-CONV-TO-JUL\n               MOVE STV1410B-CYDDD(3: 5)      TO WS-LS-DATA\n           ELSE\n           IF WS-LS-OUT(1: 3) = 'CMD' OR 'CMF'\n               MOVE WS-2-CYMD-X               TO WS-LS-DATA\n           ELSE\n           IF WS-LS-OUT(1: 3) = 'MYD' OR 'MYF'\n               MOVE WS-2-CYMD-M               TO WS-LS-DATA-1X2\n               MOVE WS-2-CYMD-D               TO WS-LS-DATA-3X4\n               MOVE WS-2-CYMD-Y               TO WS-LS-DATA-5X6\n           ELSE\n               MOVE WS-2-CYMD-X(3: 6)         TO WS-LS-DATA.\n\n       1600-DETERMINE-EOM.\n           MOVE WS-O-CYMD                     TO WS-2-CYMD.\n           IF WS-FUTURE-SW = 'Y'\n               PERFORM WS-EOM-NBR TIMES\n                   ADD 1 TO WS-2-CYMD-M\n                   IF WS-2-CYMD-M > 12\n                       MOVE 01                TO WS-2-CYMD-M\n                       ADD 1 TO WS-2-CYMD-CY\n                   END-IF\n               END-PERFORM\n           ELSE\n               PERFORM WS-EOM-NBR TIMES\n                   SUBTRACT 1 FROM WS-2-CYMD-M\n                   IF WS-2-CYMD-M = ZERO\n                       MOVE 12                TO WS-2-CYMD-M\n                       SUBTRACT 1 FROM WS-2-CYMD-CY\n                   END-IF\n               END-PERFORM\n           END-IF.\n           MOVE SPACE                         TO WS-STV1295B-FIELDS.\n           MOVE WS-2-CYMD-C                   TO STV1295B-CC.\n           MOVE WS-2-CYMD-Y                   TO STV1295B-YY.\n           MOVE WS-2-CYMD-M                   TO STV1295B-MM.\n           MOVE SPACE                         TO STV1295B-DD.\n           CALL 'STV1295B' USING DFHEIBLK DFHCOMMAREA\n                                 WS-STV1295B-FIELDS.\n           IF STV1295B-YEAR = '****'\n               MOVE 1600                      TO WS-ERROR-NBR\n           ELSE\n           MOVE STV1295B-DD                   TO WS-2-CYMD-D\n           IF WS-LS-OUT(1: 4) = 'CDDE' OR 'CDFE'\n               MOVE WS-2-CYMD-X               TO WS-O-CYMD\n               PERFORM 0900-CONV-TO-JUL\n               MOVE STV1410B-CYDDD            TO WS-LS-DATA\n           ELSE\n           IF WS-LS-OUT(1: 4) = 'YDDE' OR 'YDFE'\n               MOVE WS-2-CYMD-X               TO WS-O-CYMD\n               PERFORM 0900-CONV-TO-JUL\n               MOVE STV1410B-CYDDD(3: 5)      TO WS-LS-DATA\n           ELSE\n           IF WS-LS-OUT(1: 4) = 'CMDE' OR 'CMFE'\n               MOVE WS-2-CYMD-X               TO WS-LS-DATA\n           ELSE\n           IF WS-LS-OUT(1: 3) = 'MYDE' OR 'MYFE'\n               MOVE WS-2-CYMD-M               TO WS-LS-DATA-1X2\n               MOVE WS-2-CYMD-D               TO WS-LS-DATA-3X4\n               MOVE WS-2-CYMD-Y               TO WS-LS-DATA-5X6\n           ELSE\n               MOVE WS-2-CYMD-X(3: 6)         TO WS-LS-DATA.\n\n       1700-DETERMINE-EOY.\n           MOVE WS-O-CYMD                     TO WS-2-CYMD.\n           IF WS-FUTURE-SW = 'Y'\n               PERFORM WS-EOM-NBR TIMES\n                   ADD 1 TO WS-2-CYMD-CY\n               END-PERFORM\n           ELSE\n               PERFORM WS-EOM-NBR TIMES\n                   SUBTRACT 1 FROM WS-2-CYMD-CY\n               END-PERFORM\n           END-IF.\n           MOVE 12                            TO WS-2-CYMD-M.\n           MOVE 31                            TO WS-2-CYMD-D.\n           IF WS-LS-OUT(1: 5) = 'CDDEY' OR 'CDFEY'\n               MOVE WS-2-CYMD-X               TO WS-O-CYMD\n               PERFORM 0900-CONV-TO-JUL\n               MOVE STV1410B-CYDDD            TO WS-LS-DATA\n           ELSE\n           IF WS-LS-OUT(1: 5) = 'YDDEY' OR 'YDFEY'\n               MOVE WS-2-CYMD-X               TO WS-O-CYMD\n               PERFORM 0900-CONV-TO-JUL\n               MOVE STV1410B-CYDDD(3: 5)      TO WS-LS-DATA\n           ELSE\n           IF WS-LS-OUT(1: 5) = 'CMDEY' OR 'CMFEY'\n               MOVE WS-2-CYMD-X               TO WS-LS-DATA\n           ELSE\n           IF WS-LS-OUT(1: 3) = 'MYDEY' OR 'MYFEY'\n               MOVE WS-2-CYMD-M               TO WS-LS-DATA-1X2\n               MOVE WS-2-CYMD-D               TO WS-LS-DATA-3X4\n               MOVE WS-2-CYMD-Y               TO WS-LS-DATA-5X6\n           ELSE\n               MOVE WS-2-CYMD-X(3: 6)         TO WS-LS-DATA.\n\n      ****************************************\n      *    BIRTHDATE MUST BE PROVIDED AS INPUT.  AS-OF-DATE\n      *    IS ALWAYS ASSUMED TO BE CURRENT DATE.\n      *+**************************************\n       1800-CALC-AGE.\n           MOVE SPACE                         TO WS-STV0280B-FIELDS.\n           IF WS-LS-DATA2 = SPACE\n               MOVE WS-1-CYMD                 TO STV0280B-AS-OF-CYMD\n           ELSE\n               MOVE WS-LS-DATA2               TO STV0280B-AS-OF-CYMD.\n           MOVE WS-O-CYMD                     TO STV0280B-DOB-CYMD.\n           CALL 'STV0280B' USING DFHEIBLK DFHCOMMAREA\n                                 WS-STV0280B-FIELDS.\n           IF STV0280B-YEARS = '***'\n               MOVE 1800                      TO WS-ERROR-NBR\n           ELSE\n               MOVE STV0280B-YEARS            TO WS-LS-DATA\n               MOVE STV0280B-MONTHS           TO WS-LS-DATA(4: 2)\n               MOVE STV0280B-DAYS             TO WS-LS-DATA(6: 2).\n\n       1900-NBR-DAYS.\n           MOVE SPACE                         TO STV1420B-DAYS.\n           MOVE WS-O-CYMD                     TO STV1420B-PAST-DATE.\n           IF WS-LS-DATA2 = SPACE\n               MOVE WS-1-CYMD                 TO STV1420B-FUTURE-DATE\n           ELSE\n               MOVE WS-LS-DATA2               TO STV1420B-FUTURE-DATE.\n           CALL 'STV1420B' USING DFHEIBLK DFHCOMMAREA\n                                 WS-STV1420B-FIELDS.\n           IF STV1420B-DAYS = '*****'\n               MOVE 1900                      TO WS-ERROR-NBR\n           ELSE\n               MOVE STV1420B-DAYS             TO WS-LS-DATA.\n\n       2000-DETERMINE-SUFFIX.\n           MOVE SPACE                         TO WS-STV1295B-FIELDS.\n           MOVE WS-O-CYMD                     TO STV1295B-DATE.\n           CALL 'STV1295B' USING DFHEIBLK DFHCOMMAREA\n                                 WS-STV1295B-FIELDS.\n           IF STV1295B-YEAR = '****'\n               MOVE 2000                      TO WS-ERROR-NBR\n           ELSE\n               MOVE STV1295B-MONTH            TO WS-LS-DATA\n               MOVE STV1295B-DAY              TO WS-LS-IN\n               MOVE STV1295B-YEAR             TO WS-LS-OUT.\n\n       2100-CONVERT-FROM-KEY.\n           IF WS-LS-DATA-1X8 NUMERIC\n               MOVE WS-LS-DATA-1X8            TO WS-REV-DATE\n               SUBTRACT WS-REV-DATE FROM 50000000 GIVING WS-2-CYMD\n               MOVE WS-2-CYMD                 TO WS-I-CYMD\n           ELSE\n               MOVE 2100                      TO WS-ERROR-NBR.\n\n       2100-CONVERT-TO-KEY.\n           MOVE WS-O-CYMD                     TO WS-REV-DATE.\n           SUBTRACT WS-REV-DATE FROM 50000000 GIVING WS-2-CYMD.\n           MOVE WS-2-CYMD                     TO WS-LS-DATA-1X8.\n\n       2200-DETERMINE-QUARTER.\n           IF WS-O-CYMD-M = '01' OR '02' OR '03'\n               MOVE '1'                       TO WS-LS-DATA\n           ELSE IF WS-O-CYMD-M = '04' OR '05' OR '06'\n               MOVE '2'                       TO WS-LS-DATA\n           ELSE IF WS-O-CYMD-M = '07' OR '08' OR '09'\n               MOVE '3'                       TO WS-LS-DATA\n           ELSE IF WS-O-CYMD-M = '10' OR '11' OR '12'\n               MOVE '4'                       TO WS-LS-DATA.\n\n       4000-RETURN-ERROR.\n           MOVE 'ERROR     '                  TO WS-LS-DATA.\n           MOVE WS-ERROR-NBR                  TO WS-LS-DATA(7: 4).\n\n       4200-EXIT-PROGRAM.\n           MOVE WS-LS-DATA                    TO LS-DATA.\n           MOVE WS-LS-DATA2                   TO LS-DATA2.\n           MOVE WS-LS-IN                      TO LS-IN.\n           MOVE WS-LS-OUT                     TO LS-OUT.\n           GOBACK.\n\n      ************************************ END STV1400B\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV1405B": {"ttr": 20225, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x000\\x01\\x19\\x07/\\x01\\x192?\\x10H\\x00\\x9d\\x00\\xa8\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T10:48:30", "lines": 157, "newlines": 168, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  STV1405B: edit an 8 character CYMD date'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    STV1405B.\n       AUTHOR.        JIM IANNONE.\n      ******************************************************************\n      *@@@ II edit an 8 character CYMD or CYDDD date\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      *****************************************************************\n      * Program-id  : STV1405B\n      * Project #   : 930105 for STV0305B/STV0205B\n      * Date written: 03/11/98\n      * Programmer  : Jim Iannone\n      *\n      *               THIS PROGRAM ACCEPTS A DATE IN THE FORM CYMD\n      *               AND EDITS THE DATE.  IT WILL PLACE '**' IN ANY\n      *               CC, YY, MM, OR DD FIELD WHICH IS INVALID.\n      *\n      *               NOTE:  IF DATE IS RECEIVED AS '19925 6 ' (PERHAPS\n      *               BECAUSE AN EXAMINE TURNED UNDERSCORES INTO SPACES\n      *               IN AN ONLINE FIELD) THE DATE IS RETURNED AS\n      *               '19920506'.\n      *\n      *               RECOMPILED IN COBOL II FROM STV0205B\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n       DATA DIVISION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' WORKING-STORAGE STV1405B START '.\n\n       01  WS-DATE-FIELDS.\n           05  WS-8-DATE               PIC  X(08)    VALUE SPACE.\n           05  FILLER REDEFINES WS-8-DATE.\n               10  WS-8-CC             PIC  XX.\n               10  WS-8-YY             PIC  XX.\n               10  WS-8-MM             PIC  XX.\n               10  WS-8-DD             PIC  XX.\n           05  FILLER REDEFINES WS-8-DATE.\n               10  WS-8-C1             PIC  X.\n               10  WS-8-C2             PIC  X.\n               10  WS-8-Y1             PIC  X.\n               10  WS-8-Y2             PIC  X.\n               10  WS-8-M1             PIC  X.\n               10  WS-8-M2             PIC  X.\n               10  WS-8-D1             PIC  X.\n               10  WS-8-D2             PIC  X.\n           05  FILLER REDEFINES WS-8-DATE.\n               10  WS-8-CY             PIC  X(04).\n               10  FILLER              PIC  X(04).\n           05  WS-8-DATE-N             PIC  9(08)    VALUE ZERO.\n           05  FILLER REDEFINES WS-8-DATE-N.\n               10  WS-8-CC-N           PIC  99.\n               10  WS-8-YY-N           PIC  99.\n               10  WS-8-MM-N           PIC  99.\n               10  WS-8-DD-N           PIC  99.\n           05  FILLER REDEFINES WS-8-DATE-N.\n               10  WS-8-CY-N           PIC  9(04).\n               10  FILLER              PIC  9(04).\n           05  WS-QUOTIENT             PIC  999     VALUE ZERO.\n           05  WS-REMAINDER            PIC  99      VALUE ZERO.\n           05  WS-REMAIN2              PIC  9(04)   VALUE ZERO.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  END STV1405B  '.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELDS.\n           05  LS-DATE                 PIC  X(08).\n\n       PROCEDURE DIVISION USING LS-FIELDS.\n\n       0100-START-PROCESS.\n           MOVE ZERO                          TO WS-8-DATE-N.\n           MOVE LS-DATE                       TO WS-8-DATE.\n\n           IF WS-8-M1 = SPACE\n               MOVE ZERO                      TO WS-8-M1.\n           IF WS-8-M2 = SPACE\n               MOVE WS-8-M1                   TO WS-8-M2\n               MOVE ZERO                      TO WS-8-M1.\n           IF WS-8-D1 = SPACE\n               MOVE ZERO                      TO WS-8-D1.\n           IF WS-8-D2 = SPACE\n               MOVE WS-8-D1                   TO WS-8-D2\n               MOVE ZERO                      TO WS-8-D1.\n\n           IF WS-8-CC NOT NUMERIC\n               MOVE '**'                      TO WS-8-CC\n           ELSE\n               MOVE WS-8-CC                   TO WS-8-CC-N.\n\n           IF WS-8-YY NOT NUMERIC\n               MOVE '**'                      TO WS-8-YY\n           ELSE\n               MOVE WS-8-YY                   TO WS-8-YY-N.\n\n           IF WS-8-MM NOT NUMERIC\n               MOVE '**'                      TO WS-8-MM\n           ELSE\n               MOVE WS-8-MM                   TO WS-8-MM-N\n               IF WS-8-MM-N < 1\n                   OR WS-8-MM-N > 12\n                   MOVE '**'                  TO WS-8-MM.\n\n           IF WS-8-DD NOT NUMERIC\n               MOVE '**'                      TO WS-8-DD\n           ELSE\n               MOVE WS-8-DD                   TO WS-8-DD-N\n               IF WS-8-DD-N < 1\n                   OR WS-8-DD-N > 31\n                   MOVE '**'                  TO WS-8-DD.\n\n           IF WS-8-MM = '04' OR '06' OR '09' OR '11'\n               IF WS-8-DD > '30'\n                   MOVE '**'                  TO WS-8-DD.\n           IF WS-8-MM = '02'\n               IF WS-8-DD > '29'\n                   MOVE '**'                  TO WS-8-DD.\n\n           IF WS-8-MM = '**'\n               OR WS-8-DD = '**'\n               OR WS-8-YY = '**'\n               GO TO 0400-EXIT-PROGRAM.\n\n           IF WS-8-MM-N = 02\n               DIVIDE WS-8-YY-N BY 4 GIVING WS-QUOTIENT\n                   REMAINDER WS-REMAINDER\n               IF WS-REMAINDER = ZERO\n                   IF WS-8-YY-N = ZERO\n                       DIVIDE WS-8-CY-N BY 400 GIVING WS-QUOTIENT\n                           REMAINDER WS-REMAIN2\n                       IF WS-REMAIN2 NOT = ZERO\n                         IF WS-8-DD-N > 28\n                             MOVE '**'        TO WS-8-DD.\n\n           IF WS-8-MM-N = 02\n               IF WS-REMAINDER NOT = ZERO\n                    IF WS-8-DD-N > 28\n                        MOVE '**'             TO WS-8-DD.\n\n       0400-EXIT-PROGRAM.\n           MOVE WS-8-DATE                     TO LS-DATE.\n           GOBACK.\n\n      ************************************ END STV1405B\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV1410B": {"ttr": 20229, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x14\\x01\\x19\\x07/\\x01\\x192?\\x10I\\x01\\x1f\\x01+\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T10:49:14", "lines": 287, "newlines": 299, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  STV1410B: Cobol II - date conversion'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    STV1410B.\n       AUTHOR.        JIM IANNONE\n      ****************************************************************\n      *@@@ II convert julian\\gregorian - year 2000 compliant\n      ****************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ******************************************************************\n      * Date-written.  03/10/98.\n      * Installation.  St. Vincent MIS department\n      *\n      ****************************************************************\n      * This subprogram converts a date that was transferred from\n      * the calling program from julian format (CCYYDDD) to gregorian\n      * format (CCYYMMDD) or it converts a date that was transferred\n      * from the calling program from gregorian format to julian\n      * format.\n      ****************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       DATA DIVISION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-ANNOUNCE-START.\n           05  FILLER                  PIC  X(43)      VALUE\n               '**** WORKING STORAGE STV1410B STARTS HERE  '.\n\n       01  WS-OUTPUT.\n           05  WS-OUTPUT-DATE          PIC  X(08)     VALUE SPACE.\n           05  OUT-GREG-TO-JULIAN REDEFINES WS-OUTPUT-DATE.\n               10  WS-OUT-JULIAN-CY    PIC  9(04).\n               10  WS-OUT-JULIAN-DDD   PIC  9(03).\n               10  FILLER              PIC  X.\n           05  OUT-JULIAN-TO-GREG REDEFINES WS-OUTPUT-DATE.\n               10  WS-OUT-GREG-CY      PIC  9(04).\n               10  WS-OUT-GREG-MM      PIC  9(02).\n               10  WS-OUT-GREG-DD      PIC  9(02).\n\n       01  WS-INPUT.\n           05  WS-INPUT-DATE               PIC  X(08)  VALUE SPACE.\n           05  WS-INPUT-GREG REDEFINES WS-INPUT-DATE.\n               10  WS-IN-GREG-CY           PIC  9(04).\n               10  FILLER REDEFINES WS-IN-GREG-CY.\n                   15  WS-IN-GREG-C        PIC  99.\n                   15  WS-IN-GREG-Y        PIC  99.\n               10  WS-IN-GREG-MM           PIC  99.\n               10  WS-IN-GREG-DD           PIC  99.\n           05  WS-INPUT-JULIAN REDEFINES WS-INPUT-DATE.\n               10  WS-IN-JULIAN-DATE.\n                   15  WS-IN-JULIAN-CY     PIC  9(04).\n                   15  FILLER REDEFINES WS-IN-JULIAN-CY.\n                       20  WS-IN-JULIAN-C  PIC 99.\n                       20  WS-IN-JULIAN-Y  PIC 99.\n                   15  WS-IN-JULIAN-DDD    PIC  9(03).\n               10  WS-IN-FILLER            PIC  X(01).\n\n      *****************************************************************\n      **             TABLES USED FOR CONVERTING DATE                  *\n      *****************************************************************\n       01  JULIAN-DATES-TABLE.\n           05  JULIAN-TABLE1.\n               10  JAN                 PIC  999       VALUE 000.\n               10  FEB                 PIC  999       VALUE 031.\n               10  MAR                 PIC  999       VALUE 059.\n               10  APR                 PIC  999       VALUE 090.\n               10  MAY                 PIC  999       VALUE 120.\n               10  JUN                 PIC  999       VALUE 151.\n               10  JUL                 PIC  999       VALUE 181.\n               10  AUG                 PIC  999       VALUE 212.\n               10  SEP                 PIC  999       VALUE 243.\n               10  OCT                 PIC  999       VALUE 273.\n               10  NOV                 PIC  999       VALUE 304.\n               10  DEC                 PIC  999       VALUE 334.\n               10  EOY                 PIC  999       VALUE 365.\n           05  J-TABLE1 REDEFINES JULIAN-TABLE1.\n               10  MONTH               PIC  999\n                   OCCURS 13.\n\n           05  JULIAN-LEAP-YR-TABLE.\n               10  JANL                PIC  999       VALUE 000.\n               10  FEBL                PIC  999       VALUE 031.\n               10  MARL                PIC  999       VALUE 060.\n               10  APRL                PIC  999       VALUE 091.\n               10  MAYL                PIC  999       VALUE 121.\n               10  JUNL                PIC  999       VALUE 152.\n               10  JULL                PIC  999       VALUE 182.\n               10  AUGL                PIC  999       VALUE 213.\n               10  SEPL                PIC  999       VALUE 244.\n               10  OCTL                PIC  999       VALUE 274.\n               10  NOVL                PIC  999       VALUE 305.\n               10  DECL                PIC  999       VALUE 335.\n               10  EOYL                PIC  999       VALUE 366.\n           05  J-LEAP-YR-TABLE REDEFINES JULIAN-LEAP-YR-TABLE.\n               10  MONTH-L             PIC  999\n                   OCCURS 13.\n\n       01  WS-WORK-FIELDS.\n           05  WS-CY                   PIC  9(04)     VALUE ZERO.\n           05  FILLER REDEFINES WS-CY.\n               10  WS-CY-C             PIC  99.\n               10  WS-CY-Y             PIC  99.\n           05  WS-QUOTIENT             PIC S99        VALUE ZERO.\n           05  WS-REMAINDER            PIC S99        VALUE ZERO.\n           05  WS-QUOTIENT2            PIC S9(04)     VALUE ZERO.\n           05  WS-REMAINDER2           PIC S9(04)     VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  LEAP-YR-SWITCH          PIC  X         VALUE 'N'.\n               88  NOT-LEAP-YR                        VALUE 'N'.\n               88  LEAP-YR                            VALUE 'Y'.\n           05  CONVERSION-TYPE-SW      PIC  X         VALUE ' '.\n               88  CONVERTING-TO-GREGOR               VALUE 'G'.\n               88  CONVERTING-TO-JULIAN               VALUE 'J'.\n\n       01  WS-SUBSCRIPTS.\n           05   I1                     PIC 99         VALUE ZERO.\n           05   I2                     PIC 99         VALUE ZERO.\n\n       01  WS-WORK-FIELDS.\n           05  WS-CONV-DATE.\n               10  WS-FIRST-7          PIC  X(07).\n               10  WS-LAST-1           PIC  X(01).\n\n       01  WS-ANNOUNCE-END.\n           05  FILLER                  PIC  X(43)     VALUE\n               '**** END STV1410B WORKING STORAGE HERE ****'.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELDS.\n           05  LS-IN-DATE              PIC  X(08).\n           05  LS-JULIAN-CYDDD         PIC  X(07).\n           05  LS-GREGOR-CYMD          PIC  X(08).\n\n       PROCEDURE DIVISION USING LS-FIELDS.\n\n       0000-GET-CONV-TYPE.\n           MOVE ZERO                   TO I1, I2.\n           MOVE 'N'                    TO LEAP-YR-SWITCH.\n           MOVE LS-IN-DATE             TO WS-CONV-DATE WS-INPUT-DATE.\n           IF WS-LAST-1 = SPACE\n               MOVE 'G'                TO CONVERSION-TYPE-SW\n               GO TO 1100-EDIT-OLD-JULIAN\n           ELSE\n               MOVE 'J'                TO CONVERSION-TYPE-SW\n               GO TO 2100-EDIT-OLD-GREGOR.\n\n      ******************************************************************\n      *    EDIT THE JULIAN DATE.  IF AN ERROR OCCURS, EXIT THIS\n      *    PROGRAM AND RETURN ZEROES AS THE CONVERTED DATE.\n      *    OTHERWISE CONVERT IT TO THE CORRESPONDING GREGORIAN DATE.\n      ******************************************************************\n       1100-EDIT-OLD-JULIAN.\n           IF WS-IN-JULIAN-DATE NOT NUMERIC\n               GO TO 9000-FAILED-EDIT.\n           IF WS-IN-JULIAN-Y < 0\n               GO TO 9000-FAILED-EDIT.\n           IF WS-IN-JULIAN-DDD < 1\n               GO TO 9000-FAILED-EDIT.\n           DIVIDE WS-IN-JULIAN-Y      BY 4\n               GIVING WS-QUOTIENT      REMAINDER WS-REMAINDER.\n           IF  WS-REMAINDER = ZERO\n               MOVE 'Y'                TO LEAP-YR-SWITCH.\n           IF WS-IN-JULIAN-Y = ZERO\n               DIVIDE WS-IN-JULIAN-CY BY 400\n                   GIVING WS-QUOTIENT2 REMAINDER WS-REMAINDER2\n               IF WS-REMAINDER2 NOT = ZERO\n                   MOVE 'N'            TO LEAP-YR-SWITCH.\n           IF LEAP-YR\n               IF WS-IN-JULIAN-DDD > 366\n                   GO TO 9000-FAILED-EDIT.\n           IF NOT-LEAP-YR\n               IF WS-IN-JULIAN-DDD > 365\n                   GO TO 9000-FAILED-EDIT.\n           MOVE WS-IN-JULIAN-CY        TO WS-OUT-GREG-CY.\n           IF LEAP-YR\n               GO TO 1300-FIND-MONTH-LEAP.\n\n      ******************************************************************\n      ** FIND THE MONTH AND CONVERT THE JULIAN DATE TO GREGORIAN\n      ** (CYMD) FORMAT.\n      ******************************************************************\n       1200-FIND-MONTH.\n           COMPUTE I1 = I1 + 1.\n           COMPUTE I2 = I1 + 1.\n           IF I1 > 13\n               GO TO 9000-FAILED-EDIT.\n           IF (WS-IN-JULIAN-DDD > MONTH(I1))\n               AND (WS-IN-JULIAN-DDD NOT > MONTH(I2))\n               SUBTRACT MONTH(I1)  FROM WS-IN-JULIAN-DDD\n                   GIVING WS-OUT-GREG-DD\n               MOVE I1             TO WS-OUT-GREG-MM\n               MOVE WS-OUTPUT-DATE TO LS-GREGOR-CYMD\n               GO TO 0100-END-PROCESSING\n           ELSE\n               GO TO 1200-FIND-MONTH.\n\n      ******************************************************************\n      ** FIND THE MONTH IF THE DATE PASSED IS FOR A LEAP YEAR.  THEN  **\n      ** CONVERT THE JULIAN DATE TO GREGORIAN (MMDDYY) FORMAT.**\n      ******************************************************************\n       1300-FIND-MONTH-LEAP.\n           COMPUTE I1 = I1 + 1.\n           COMPUTE I2 = I1 + 1.\n           IF I1 IS > 13\n               GO TO 9000-FAILED-EDIT.\n           IF (WS-IN-JULIAN-DDD > MONTH-L(I1))\n               AND (WS-IN-JULIAN-DDD NOT > MONTH-L(I2))\n               SUBTRACT MONTH-L (I1) FROM WS-IN-JULIAN-DDD\n                   GIVING WS-OUT-GREG-DD\n               MOVE I1             TO WS-OUT-GREG-MM\n               MOVE WS-OUTPUT-DATE TO LS-GREGOR-CYMD\n               GO TO 0100-END-PROCESSING\n           ELSE\n               GO TO 1300-FIND-MONTH-LEAP.\n\n      ******************************************************************\n      ** EDIT THE INPUTED GREGORIAN DATE.  IF AN ERROR OCCURS, EXIT   **\n      ** THIS PROGRAM AND RETURN ZEROES AS THE CONVERTED DATE.        **\n      ** OTHERWISE CONVERT IT TO THE CORRESPONDING JULIAN DATE.       **\n      ******************************************************************\n       2100-EDIT-OLD-GREGOR.\n           IF WS-INPUT-DATE NOT NUMERIC\n               GO TO 9000-FAILED-EDIT.\n           IF (WS-IN-GREG-MM < 1 OR > 12 )\n               GO TO 9000-FAILED-EDIT.\n           IF WS-IN-GREG-Y < 0\n               GO TO 9000-FAILED-EDIT.\n           IF WS-IN-GREG-DD < 1\n               GO TO 9000-FAILED-EDIT.\n           MOVE WS-IN-GREG-MM          TO I1.\n           COMPUTE I2 =  WS-IN-GREG-MM + 1.\n           DIVIDE WS-IN-GREG-Y         BY 4\n               GIVING WS-QUOTIENT      REMAINDER WS-REMAINDER.\n           IF  WS-REMAINDER = ZERO\n               MOVE 'Y'                TO LEAP-YR-SWITCH.\n           IF WS-IN-GREG-Y = ZERO\n               DIVIDE WS-IN-GREG-CY BY 400\n                   GIVING WS-QUOTIENT2 REMAINDER WS-REMAINDER2\n               IF WS-REMAINDER2 NOT = ZERO\n                   MOVE 'N'            TO LEAP-YR-SWITCH.\n           IF LEAP-YR\n               IF WS-IN-GREG-DD >  MONTH-L(I2) - MONTH-L(I1)\n                   GO TO 9000-FAILED-EDIT.\n           IF NOT-LEAP-YR\n               IF WS-IN-GREG-DD >  MONTH(I2) - MONTH(I1)\n                   GO TO 9000-FAILED-EDIT.\n\n      ******************************************************************\n      ** A VALID GREGORIAN DATE WAS PASSED SO CONTINUE TO CONVERT IT  **\n      ** TO JULIAN FORMAT (YYDDD).                                    **\n      ******************************************************************\n\n           IF  LEAP-YR\n               COMPUTE WS-OUT-JULIAN-DDD = MONTH-L(I1) + WS-IN-GREG-DD\n           ELSE\n               COMPUTE WS-OUT-JULIAN-DDD = MONTH(I1) + WS-IN-GREG-DD.\n           MOVE WS-IN-GREG-CY          TO WS-OUT-JULIAN-CY.\n           MOVE WS-OUTPUT-DATE         TO LS-JULIAN-CYDDD.\n           GO TO 0100-END-PROCESSING.\n\n      ******************************************************************\n      **  ROUTINE FOR HANDLING BAD OR NO DATES THAT ARE PASSED BY THE **\n      **  CALLING PROGRAM.  ZEROES ARE RETURNED AS THE CONVERTED DATE.**\n      ******************************************************************\n       9000-FAILED-EDIT.\n           IF CONVERTING-TO-GREGOR\n               MOVE ZEROS              TO LS-GREGOR-CYMD\n               GO TO 0100-END-PROCESSING\n           ELSE\n               MOVE ZEROS              TO LS-JULIAN-CYDDD\n               GO TO 0100-END-PROCESSING.\n\n       0100-END-PROCESSING.\n           GOBACK.\n\n      ******************************************************************\n      **              E N D   O F   S T V 0 1 3 0 B                   **\n      ******************************************************************\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV1420B": {"ttr": 20235, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00)\\x01\\x19\\x07/\\x01\\x192?\\x10I\\x01\\xec\\x01\\xf7\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T10:49:29", "lines": 492, "newlines": 503, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  STV1420B: dates / nbr of days conversions'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    STV1420B.\n      *AUTHOR.        JIM IANNONE.\n      ******************************************************************\n      *@@@ II dates/nbr of days conversions\n      ******************************************************************\n      *    this is the Cobol II version of STV0155B (CYMD/CYDDD format)\n      ******************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ******************************************************************\n      * Program-id  : STV1420B\n      * Project #   : 900824 for STV0155B and STV0310B\n      * Date written: 03/10/98\n      * Programmer  : Jim Iannone\n      *\n      *               THIS PROGRAM USES THREE FIELDS: DATE1 (PAST DATE),\n      *               DATE2 (FUTURE DATE), AND A NUMBER OF DAYS.\n      *               GIVEN ANY TWO OF THESE FIELDS, THE PROGRAM WILL\n      *               RETURN THE THIRD. DATES WILL BE ACCEPTED AND\n      *               RETURNED IN THE FORM CCYYDDD OR CCYYMMDD.\n      *               THE HIGHEST NUMBER OF DAYS ALLOWED IS 99599.\n      *               ANY ERROR WILL CAUSE '*****' TO BE PLACED IN THE\n      *               NUMBER FIELD\n      *\n      *               NOTE:  CENTURY YEARS THAT ARE DIVISABLE BY 400\n      *               ARE LEAP YEARS (1600, 2000, 2400, ETC.). THE\n      *               OTHERS ARE NOT (1700, 1800, 1900, 2100, ETC.).\n      *\n      ******************************************************************\n      *  STV1420B IS STV0420B COMPILED USING A CICS COMPILER\n      ******************************************************************\n\n       ENVIRONMENT DIVISION.\n       DATA DIVISION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' WORKING-STORAGE STV1420B START '.\n\n       01  WS-FIELDS.\n           05  WS-HOLD-DATE.\n               10  WS-HOLD-1X7         PIC  X(07)    VALUE SPACE.\n               10  WS-HOLD-8           PIC  X        VALUE SPACE.\n           05  WS-J-DATE1                            VALUE ZERO.\n               10  WS-J-YYYY1          PIC  9(04).\n               10  FILLER              REDEFINES WS-J-YYYY1.\n                   15  WS-J-CC1        PIC  99.\n                   15  WS-J-YY1        PIC  99.\n               10  WS-J-DDD1           PIC  999.\n           05  WS-J-DATE2                            VALUE ZERO.\n               10  WS-J-YYYY2          PIC  9(04).\n               10  FILLER              REDEFINES WS-J-YYYY2.\n                   15  WS-J-CC2        PIC  99.\n                   15  WS-J-YY2        PIC  99.\n               10  WS-J-DDD2           PIC  999.\n           05  WS-J-DATE3              PIC  9(07)    VALUE ZERO.\n           05  WS-G-DATE1                            VALUE ZERO.\n               10  WS-G-YYYY1.\n                   15  WS-G-CC1        PIC  99.\n                   15  WS-G-YY1        PIC  99.\n               10  WS-G-MM1            PIC  99.\n               10  WS-G-DD1            PIC  99.\n           05  WS-G-DATE2                            VALUE ZERO.\n               10  WS-G-YYYY2.\n                   15  WS-G-CC2        PIC  99.\n                   15  WS-G-YY2        PIC  99.\n               10  WS-G-MM2            PIC  99.\n               10  WS-G-DD2            PIC  99.\n           05  WS-CALL-GREGORIAN                     VALUE SPACE.\n               10  WS-CALL-G-CC        PIC  XX.\n               10  WS-CALL-G-YY        PIC  XX.\n               10  WS-CALL-G-MM        PIC  XX.\n               10  WS-CALL-G-DD        PIC  XX.\n           05  WS-CALL-JULIAN                        VALUE SPACE.\n               10  WS-CALL-J-CC        PIC  XX.\n               10  WS-CALL-J-YY        PIC  XX.\n               10  WS-CALL-J-DDD       PIC  XXX.\n               10  FILLER              PIC  X.\n           05  WS-DATE-PAST            PIC  X(07)    VALUE SPACE.\n           05  WS-DATE-FUTURE          PIC  X(07)    VALUE SPACE.\n           05  WS-CY                   PIC  9(04)    VALUE ZERO.\n           05  FILLER REDEFINES WS-CY.\n               10  WS-CY-C             PIC  99.\n               10  WS-CY-Y             PIC  99.\n           05  WS-NBR-5                PIC  9(05)    VALUE ZERO.\n           05  WS-NBR                  PIC  999      VALUE ZERO.\n           05  WS-CNT                  PIC  9(05)    VALUE ZERO.\n           05  WS-RESULT               PIC  9(05)    VALUE ZERO.\n           05  WS-MAX-DAYS             PIC  999      VALUE ZERO.\n           05  WS-QUOTIENT             PIC  9(04)    VALUE ZERO.\n           05  WS-REMAINDER            PIC  99       VALUE ZERO.\n           05  WS-QUOT2                PIC  9(04)    VALUE ZERO.\n           05  WS-REMAIN2              PIC  9(04)    VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  WS-TYPE-DATE-SW         PIC  X        VALUE SPACE.\n               88  GREGORIAN                         VALUE 'G'.\n\n      *    JULIAN / GREGORIAN DATE CONVERSIONS\n       01  WS-STV1410B-FIELDS.\n           05  STV1410B-IN-DATE        PIC  X(08).\n           05  STV1410B-CYDDD          PIC  X(07).\n           05  STV1410B-CYMD           PIC  X(08).\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  END STV1420B  '.\n\n       LINKAGE SECTION.\n\n       01  LS-CALC-DATES.\n           05  LS-DATE-PAST            PIC  X(08).\n           05  LS-DATE-FUTURE          PIC  X(08).\n           05  LS-NBR                  PIC  X(05).\n\n       PROCEDURE DIVISION USING LS-CALC-DATES.\n\n       0000-START-PROCESS.\n           MOVE ZERO                          TO WS-J-DATE1 WS-J-DATE2\n                                                 WS-G-DATE1 WS-G-DATE2.\n           MOVE SPACE                         TO WS-CALL-GREGORIAN\n                                                 WS-CALL-JULIAN\n                                                 WS-DATE-PAST\n                                                 WS-DATE-FUTURE\n                                                 WS-HOLD-DATE\n                                                 WS-TYPE-DATE-SW.\n           MOVE ZERO                          TO WS-NBR WS-NBR-5\n                                                 WS-CY WS-CNT WS-RESULT\n                                                 WS-MAX-DAYS WS-QUOTIEN\n                                                 WS-REMAINDER.\n           INSPECT LS-NBR REPLACING ALL SPACE BY ZERO.\n           MOVE LS-DATE-FUTURE                TO WS-DATE-FUTURE.\n           MOVE LS-DATE-PAST                  TO WS-DATE-PAST.\n           IF (WS-DATE-FUTURE NUMERIC)\n               AND (WS-DATE-PAST NOT NUMERIC)\n               AND (LS-NBR NUMERIC)\n               GO TO 0800-RETURN-PAST-DATE.\n           IF (WS-DATE-PAST NUMERIC)\n               AND (WS-DATE-FUTURE NOT NUMERIC)\n               AND (LS-NBR NUMERIC)\n               GO TO 1200-RETURN-FUTURE-DATE.\n           IF (WS-DATE-FUTURE NOT NUMERIC)\n               OR (WS-DATE-PAST NOT NUMERIC)\n               GO TO 1600-DATE-ERROR.\n           IF LS-DATE-FUTURE NUMERIC\n               MOVE LS-DATE-PAST              TO WS-HOLD-DATE\n               IF WS-HOLD-8 NOT NUMERIC\n                   GO TO 1600-DATE-ERROR.\n           IF LS-DATE-PAST NUMERIC\n               MOVE LS-DATE-FUTURE            TO WS-HOLD-DATE\n               IF WS-HOLD-8 NOT NUMERIC\n                   GO TO 1600-DATE-ERROR.\n      ****************************************\n      *    GIVEN 2 DATES, CALCULATE THE NUMBER OF DAYS BETWEEN.\n      ****************************************\n           MOVE LS-DATE-FUTURE                TO WS-HOLD-DATE.\n           IF WS-HOLD-8 NUMERIC\n               MOVE 'G'                       TO WS-TYPE-DATE-SW.\n           IF GREGORIAN\n               PERFORM 0100-CONVERT-TO-JUL-1\n               PERFORM 0300-EDIT-J-DATE1\n               PERFORM 0200-CONVERT-TO-JUL-2\n               PERFORM 0400-EDIT-J-DATE2\n               GO TO 0500-FIND-NUMBER.\n\n           MOVE LS-DATE-PAST                  TO WS-HOLD-DATE.\n           MOVE WS-HOLD-1X7                   TO WS-J-DATE1.\n           PERFORM 0300-EDIT-J-DATE1.\n           MOVE LS-DATE-FUTURE                TO WS-HOLD-DATE.\n           MOVE WS-HOLD-1X7                   TO WS-J-DATE2.\n           PERFORM 0400-EDIT-J-DATE2.\n           GO TO 0500-FIND-NUMBER.\n\n       0100-CONVERT-TO-JUL-1.\n           MOVE LS-DATE-PAST                  TO STV1410B-IN-DATE.\n           CALL 'STV1410B' USING DFHEIBLK DFHCOMMAREA\n                                 WS-STV1410B-FIELDS.\n           IF STV1410B-CYDDD NUMERIC\n               IF STV1410B-CYDDD NOT = ZERO\n                   MOVE STV1410B-CYDDD        TO WS-CALL-JULIAN\n               ELSE\n                   GO TO 1600-DATE-ERROR\n           ELSE\n               GO TO 1600-DATE-ERROR.\n           MOVE WS-CALL-J-DDD                 TO WS-J-DDD1.\n           MOVE WS-CALL-J-YY                  TO WS-J-YY1.\n           MOVE WS-CALL-J-CC                  TO WS-J-CC1.\n\n       0200-CONVERT-TO-JUL-2.\n           MOVE LS-DATE-FUTURE                TO STV1410B-IN-DATE.\n           CALL 'STV1410B' USING DFHEIBLK DFHCOMMAREA\n                                 WS-STV1410B-FIELDS.\n           IF STV1410B-CYDDD NUMERIC\n               IF STV1410B-CYDDD NOT = ZERO\n                   MOVE STV1410B-CYDDD        TO WS-CALL-JULIAN\n               ELSE\n                   GO TO 1600-DATE-ERROR\n           ELSE\n               GO TO 1600-DATE-ERROR.\n           MOVE WS-CALL-J-DDD                 TO WS-J-DDD2.\n           MOVE WS-CALL-J-YY                  TO WS-J-YY2.\n           MOVE WS-CALL-J-CC                  TO WS-J-CC2.\n\n       0300-EDIT-J-DATE1.\n           IF WS-J-YYYY1 = ZERO\n               GO TO 1600-DATE-ERROR.\n           IF WS-J-DDD1 = ZERO\n               OR WS-J-DDD1 > 366\n               GO TO 1600-DATE-ERROR.\n           IF WS-J-DDD1 = 366\n               MOVE WS-J-YYYY1                TO WS-CY\n               DIVIDE WS-CY BY 4 GIVING WS-QUOTIENT\n                   REMAINDER WS-REMAINDER\n               IF WS-REMAINDER NOT = ZERO\n                   GO TO 1600-DATE-ERROR\n               ELSE\n               IF WS-CY-Y = ZERO\n                   DIVIDE WS-CY BY 400 GIVING WS-QUOT2\n                       REMAINDER WS-REMAIN2\n                   IF WS-REMAIN2 NOT = ZERO\n                       GO TO 1600-DATE-ERROR.\n\n       0400-EDIT-J-DATE2.\n           IF WS-J-YYYY2 = ZERO\n               GO TO 1600-DATE-ERROR.\n           IF WS-J-DDD2 = ZERO\n               OR WS-J-DDD2 > 366\n               GO TO 1600-DATE-ERROR.\n           IF WS-J-DDD2 = 366\n               MOVE WS-J-YYYY2                TO WS-CY\n               DIVIDE WS-CY BY 4 GIVING WS-QUOTIENT\n                   REMAINDER WS-REMAINDER\n               IF WS-REMAINDER NOT = ZERO\n                   GO TO 1600-DATE-ERROR\n               ELSE\n               IF WS-CY-Y = ZERO\n                   DIVIDE WS-CY BY 400 GIVING WS-QUOT2\n                       REMAINDER WS-REMAIN2\n                   IF WS-REMAIN2 NOT = ZERO\n                       GO TO 1600-DATE-ERROR.\n\n       0500-FIND-NUMBER.\n           IF WS-J-DATE1 > WS-J-DATE2\n               MOVE WS-J-DATE1                TO WS-J-DATE3\n               MOVE WS-J-DATE2                TO WS-J-DATE1\n               MOVE WS-J-DATE3                TO WS-J-DATE2.\n           IF WS-J-YYYY1 = WS-J-YYYY2\n               IF WS-J-DDD2 > WS-J-DDD1\n                   SUBTRACT WS-J-DDD1 FROM WS-J-DDD2\n                       GIVING WS-NBR-5\n               ELSE\n                   MOVE ZERO                  TO WS-NBR-5\n           ELSE\n               ADD WS-J-DDD2                  TO WS-NBR-5\n               MOVE WS-J-YYYY2                TO WS-CY\n               PERFORM 0700-LOOP THRU\n                       0700-LOOP-EXIT\n                       UNTIL WS-CY = WS-J-YYYY1\n                       OR WS-NBR-5 > 99598.\n\n           IF WS-NBR-5 < 99600\n               MOVE WS-NBR-5                  TO LS-NBR\n           ELSE\n               GO TO 1600-DATE-ERROR.\n           GO TO 1700-END-PROCESSING.\n\n       0700-LOOP.\n           SUBTRACT 1 FROM WS-CY.\n           IF WS-CY < 0001\n               GO TO 1600-DATE-ERROR.\n           DIVIDE WS-CY BY 4\n               GIVING WS-QUOTIENT\n               REMAINDER WS-REMAINDER.\n           DIVIDE WS-CY BY 400\n               GIVING WS-QUOT2\n               REMAINDER WS-REMAIN2.\n           IF WS-CY = WS-J-YYYY1\n             IF WS-CY-Y = ZERO\n               IF WS-REMAIN2 = ZERO\n                   SUBTRACT WS-J-DDD1 FROM 366\n                       GIVING WS-NBR\n                       ADD WS-NBR             TO WS-NBR-5\n                       GO TO 0700-LOOP-EXIT\n               ELSE\n                   SUBTRACT WS-J-DDD1 FROM 365\n                       GIVING WS-NBR\n                       ADD WS-NBR             TO WS-NBR-5\n                       GO TO 0700-LOOP-EXIT\n             ELSE\n             IF WS-REMAINDER = ZERO\n                 SUBTRACT WS-J-DDD1 FROM 366\n                     GIVING WS-NBR\n                     ADD WS-NBR               TO WS-NBR-5\n                     GO TO 0700-LOOP-EXIT\n             ELSE\n                 SUBTRACT WS-J-DDD1 FROM 365\n                     GIVING WS-NBR\n                     ADD WS-NBR               TO WS-NBR-5\n                     GO TO 0700-LOOP-EXIT.\n           IF WS-CY-Y = ZERO\n               IF WS-REMAIN2 = ZERO\n                   ADD 366                    TO WS-NBR-5\n               ELSE\n                   ADD 365                    TO WS-NBR-5\n           ELSE\n           IF WS-REMAINDER = ZERO\n               ADD 366                        TO WS-NBR-5\n           ELSE\n               ADD 365                        TO WS-NBR-5.\n\n       0700-LOOP-EXIT. EXIT.\n\n      ****************************************\n      *    GIVEN A FUTURE DATE AND A # OF DAYS, RETURN A PAST DATE\n      ****************************************\n       0800-RETURN-PAST-DATE.\n           MOVE LS-DATE-FUTURE                TO WS-HOLD-DATE.\n           IF WS-HOLD-8 NUMERIC\n               MOVE 'G'                       TO WS-TYPE-DATE-SW.\n           MOVE LS-NBR                        TO WS-NBR-5.\n           IF WS-NBR-5 > 99599\n               GO TO 1600-DATE-ERROR.\n           IF GREGORIAN\n               PERFORM 0200-CONVERT-TO-JUL-2\n           ELSE\n               MOVE WS-HOLD-1X7               TO WS-J-DATE2.\n           PERFORM 0400-EDIT-J-DATE2.\n           MOVE WS-J-YYYY2                    TO WS-CY.\n           MOVE WS-J-DDD2                     TO WS-NBR.\n\n       0900-FIND-PAST-DATE.\n           IF WS-NBR-5 < WS-NBR\n               SUBTRACT WS-NBR-5 FROM WS-NBR\n           ELSE\n           PERFORM 1000-LOOP2\n               UNTIL WS-CNT = WS-NBR-5\n               OR WS-CNT > 99599.\n           MOVE WS-CY                         TO WS-J-YYYY1.\n           MOVE WS-NBR                        TO WS-J-DDD1.\n           IF GREGORIAN\n               PERFORM 1100-CONVERT-TO-GREG-1\n           ELSE\n               MOVE WS-J-DATE1                TO LS-DATE-PAST.\n           GO TO 1700-END-PROCESSING.\n\n       1000-LOOP2.\n           SUBTRACT 1 FROM WS-NBR.\n           ADD 1                              TO WS-CNT.\n           IF WS-NBR = ZERO\n               SUBTRACT 1 FROM WS-CY\n               IF WS-CY < 0001\n                   GO TO 1600-DATE-ERROR\n               ELSE\n               IF WS-CY-Y = ZERO\n                   DIVIDE WS-CY BY 400\n                       GIVING WS-QUOT2\n                       REMAINDER WS-REMAIN2\n                   IF WS-REMAIN2 = ZERO\n                       MOVE 366               TO WS-NBR\n                   ELSE\n                       MOVE 365               TO WS-NBR\n               ELSE\n                   DIVIDE WS-CY BY 4\n                       GIVING WS-QUOTIENT\n                       REMAINDER WS-REMAINDER\n                   IF WS-REMAINDER = ZERO\n                       MOVE 366               TO WS-NBR\n                   ELSE\n                       MOVE 365               TO WS-NBR.\n\n       1100-CONVERT-TO-GREG-1.\n           MOVE WS-J-DDD1                     TO WS-CALL-J-DDD.\n           MOVE WS-J-YY1                      TO WS-CALL-J-YY.\n           MOVE WS-J-CC1                      TO WS-CALL-J-CC.\n           MOVE WS-CALL-JULIAN                TO STV1410B-IN-DATE.\n           CALL 'STV1410B' USING DFHEIBLK DFHCOMMAREA\n                                 WS-STV1410B-FIELDS.\n           IF STV1410B-CYMD NUMERIC\n               IF STV1410B-CYMD NOT = ZERO\n                   MOVE STV1410B-CYMD         TO LS-DATE-PAST\n               ELSE\n                   GO TO 1600-DATE-ERROR\n           ELSE\n               GO TO 1600-DATE-ERROR.\n\n      ****************************************\n      *    GIVEN A PAST DATE AND A # OF DAYS, RETURN A FUTURE DATE\n      ****************************************\n       1200-RETURN-FUTURE-DATE.\n           MOVE LS-DATE-PAST                  TO WS-HOLD-DATE.\n           IF WS-HOLD-8 NUMERIC\n               MOVE 'G'                       TO WS-TYPE-DATE-SW.\n           MOVE LS-NBR                        TO WS-NBR-5.\n           IF WS-NBR-5 > 99599\n               GO TO 1600-DATE-ERROR.\n           IF GREGORIAN\n               PERFORM 0100-CONVERT-TO-JUL-1\n           ELSE\n               MOVE WS-HOLD-1X7               TO WS-J-DATE1.\n           PERFORM 0300-EDIT-J-DATE1.\n           MOVE WS-J-YYYY1                    TO WS-CY.\n           MOVE WS-J-DDD1                     TO WS-NBR.\n\n       1300-FIND-FUTURE-DATE.\n           DIVIDE WS-CY BY 4\n               GIVING WS-QUOTIENT\n               REMAINDER WS-REMAINDER.\n           DIVIDE WS-CY BY 400\n               GIVING WS-QUOT2\n               REMAINDER WS-REMAIN2.\n           IF WS-CY-Y = ZERO\n               IF WS-REMAIN2 = ZERO\n                   MOVE 366                   TO WS-MAX-DAYS\n               ELSE\n                   MOVE 365                   TO WS-MAX-DAYS\n           ELSE\n           IF WS-REMAINDER = ZERO\n               MOVE 366                       TO WS-MAX-DAYS\n           ELSE\n               MOVE 365                       TO WS-MAX-DAYS.\n           ADD WS-NBR-5 TO WS-NBR\n               GIVING WS-RESULT.\n           IF WS-RESULT < WS-MAX-DAYS\n               MOVE WS-RESULT                 TO WS-NBR\n           ELSE\n               PERFORM 1400-LOOP3\n                   UNTIL WS-CNT = WS-NBR-5\n                   OR WS-CNT > 99599.\n           MOVE WS-CY                         TO WS-J-YYYY2.\n           MOVE WS-NBR                        TO WS-J-DDD2.\n           IF GREGORIAN\n               PERFORM 1500-CONVERT-TO-GREG-2\n           ELSE\n               MOVE WS-J-DATE2                TO LS-DATE-FUTURE.\n           GO TO 1700-END-PROCESSING.\n\n       1400-LOOP3.\n           ADD 1 TO WS-NBR WS-CNT.\n           IF WS-NBR > WS-MAX-DAYS\n               IF WS-CY > 9998\n                   GO TO 1600-DATE-ERROR\n               ELSE\n                   ADD 1 TO WS-CY\n                   MOVE 001                   TO WS-NBR\n                   IF WS-CY-Y = ZERO\n                       DIVIDE WS-CY BY 400\n                           GIVING WS-QUOT2\n                           REMAINDER WS-REMAIN2\n                       IF WS-REMAIN2 = ZERO\n                           MOVE 366           TO WS-MAX-DAYS\n                       ELSE\n                           MOVE 365           TO WS-MAX-DAYS\n                   ELSE\n                       DIVIDE WS-CY BY 4\n                           GIVING WS-QUOTIENT\n                           REMAINDER WS-REMAINDER\n                       IF WS-REMAINDER = ZERO\n                           MOVE 366           TO WS-MAX-DAYS\n                       ELSE\n                           MOVE 365           TO WS-MAX-DAYS.\n\n       1500-CONVERT-TO-GREG-2.\n           MOVE WS-J-DDD2                     TO WS-CALL-J-DDD.\n           MOVE WS-J-YY2                      TO WS-CALL-J-YY.\n           MOVE WS-J-CC2                      TO WS-CALL-J-CC.\n           MOVE WS-CALL-JULIAN                TO STV1410B-IN-DATE.\n           CALL 'STV1410B' USING DFHEIBLK DFHCOMMAREA\n                                 WS-STV1410B-FIELDS.\n           IF STV1410B-CYMD NUMERIC\n               IF STV1410B-CYMD NOT = ZERO\n                   MOVE STV1410B-CYMD         TO LS-DATE-FUTURE\n               ELSE\n                   GO TO 1600-DATE-ERROR\n           ELSE\n               GO TO 1600-DATE-ERROR.\n\n       1600-DATE-ERROR.\n           MOVE '*****'                       TO LS-NBR.\n           GO TO 1700-END-PROCESSING.\n\n       1700-END-PROCESSING.\n           GOBACK.\n\n      ************************************ END STV1420B\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STV1805B": {"ttr": 20488, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00C\\x01\\x19\\x07/\\x01\\x192?\\x10I\\x00\\xb7\\x00\\xc3\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T10:49:43", "lines": 183, "newlines": 195, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  STV1805B: return DOW from date'.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    STV1805B.\n       AUTHOR.        MERCY HEALTH PARTNERS.\n      ***************************************************************\n      *@@@ II convert and return dow for a given date\n      ***************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ***************************************************************\n      * Date written  |  APRIL  8, 1996\n      * Narrative     |  THIS PROGRAM IS A SUBPROGRAM DESIGNED\n      *               |  TO GIVE THE DAY OF THE WEEK THAT A GIVEN\n      *               |  DATE FALLS ON.\n      *\n      *    INPUT  - WS-DAY-IN \"YYYYMMDD\"\n      *    OUTPUT - WS-DAY-NUM-OUT - WS-DAY-OUT\n      *                          1 - \"MONDAY\"\n      *                          2 - \"TUESDAY\"\n      *                          3 - \"WEDNESDAY\"\n      *                          4 - \"THURSDAY\"\n      *                          5 - \"FRIDAY\"\n      *                          6 - \"SATURDAY\"\n      *                          7 - \"SUNDAY\"\n      ***************************************************************\n      * Date changed: 03/16/98\n      * Programmer  : Jim Iannone\n      *        CONVERT TO STV1805B, AND\n      *        CORRECTLY PROCESS NON-LEAP CENTURIES (1700,1800...)\n      ***************************************************************\n\n       ENVIRONMENT DIVISION.\n       DATA DIVISION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' WORKING-STORAGE STV1805B START '.\n\n       01  WS-FIELDS.\n           05  WS-DAY-FIRST-DAY        PIC 9(1).\n           05  WS-DAY-JUL              PIC 9(3).\n           05  WS-DAY-LEAPS            PIC 9(4).\n           05  WS-DAY-LEAP2            PIC 9(4).\n           05  WS-DAY-REMAINDER        PIC 9(4).\n           05  WS-DAY-REMAIN2          PIC 9(4).\n           05  WS-DAY-TOTAL-DAYS       PIC 9(10).\n           05  WS-DAY-YEAR             PIC 9(4).\n           05  WS-DAY-INDX             PIC 9(10)V9(2).\n           05  WS-DAY-INDX2            PIC 9(2).\n\n       01  WS-WEEK-TABLE.\n           05  FILLER                  PIC X(9)  VALUE 'MONDAY'.\n           05  FILLER                  PIC X(9)  VALUE 'TUESDAY'.\n           05  FILLER                  PIC X(9)  VALUE 'WEDNESDAY'.\n           05  FILLER                  PIC X(9)  VALUE 'THURSDAY'.\n           05  FILLER                  PIC X(9)  VALUE 'FRIDAY'.\n           05  FILLER                  PIC X(9)  VALUE 'SATURDAY'.\n           05  FILLER                  PIC X(9)  VALUE 'SUNDAY'.\n       01  FILLER REDEFINES WS-WEEK-TABLE.\n           05  WS-WEEK-DAY         PIC  X(9)\n                                   OCCURS 7 TIMES\n                                   INDEXED BY WS-WEEK-NUM.\n\n       01  WS-STV1410B-FIELDS.\n           05  STV1410B-IN-DATE        PIC  X(08).\n           05  STV1410B-CYDDD          PIC  X(07).\n           05  FILLER REDEFINES STV1410B-CYDDD.\n               10  STV1410B-CYDDD-CY   PIC  X(04).\n               10  STV1410B-CYDDD-DDD  PIC  XXX.\n           05  STV1410B-CYMD           PIC  X(08).\n           05  FILLER REDEFINES STV1410B-CYMD.\n               10  STV1410B-CYMD-C     PIC  XX.\n               10  STV1410B-CYMD-Y     PIC  XX.\n               10  STV1410B-CYMD-M     PIC  XX.\n               10  STV1410B-CYMD-D     PIC  XX.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  END STV1805B  '.\n\n       LINKAGE SECTION.\n\n       01  WS-PARM.\n           05  WS-DAY-IN.\n               10 WS-DI-CC            PIC XX.\n               10 WS-DI-YY            PIC XX.\n               10 WS-DI-MM            PIC XX.\n               10 WS-DI-DD            PIC XX.\n           05  WS-DAY-OUT             PIC X(9).\n           05  WS-DAY-NUM-OUT         PIC 9(2).\n\n       PROCEDURE DIVISION USING WS-PARM.\n\n       0000-START-PROCESS.\n\n      ****\n      **** FIND JULEAN DAYS SINCE JAN 1\n      **** ============================\n           MOVE SPACE      TO  WS-STV1410B-FIELDS.\n           MOVE WS-DAY-IN  TO  STV1410B-IN-DATE.\n           CALL 'STV1410B' USING DFHEIBLK DFHCOMMAREA\n                                 WS-STV1410B-FIELDS.\n           IF STV1410B-CYDDD-DDD = ZEROS\n              MOVE ZEROS        TO  WS-DAY-NUM-OUT\n              MOVE '*********'  TO  WS-DAY-OUT\n              GO TO 0200-END-PROGRAM.\n           MOVE STV1410B-CYDDD-DDD      TO  WS-DAY-JUL.\n\n      ****\n      **** FIND LEAP YEARS SINCE THE BEGINING OF TIME\n      **** ==========================================\n           MOVE WS-DAY-IN (1:4)      TO  WS-DAY-YEAR.\n           MOVE ZERO                 TO  WS-DAY-REMAINDER.\n           DIVIDE WS-DAY-YEAR      BY  4\n              GIVING        WS-DAY-LEAPS\n              REMAINDER WS-DAY-REMAINDER.\n\n      ****\n      **** IF THIS IS A LEAP YEAR THEN JUL DATE WILL\n      **** TAKE CARE OF THIS SUBTRACT 1\n      **** =========================================\n           IF WS-DAY-REMAINDER = ZERO\n               SUBTRACT 1 FROM WS-DAY-LEAPS\n               IF WS-DI-YY = '00'\n                   DIVIDE WS-DAY-YEAR BY 400\n                      GIVING WS-DAY-LEAP2\n                      REMAINDER WS-DAY-REMAIN2\n                   IF WS-DAY-REMAIN2 NOT = ZERO\n                       ADD 1 TO WS-DAY-LEAPS.\n\n      ****\n      **** CALCULATE HOW MANY DAYS SINCE THE BEGINING OF TIME\n      **** ==================================================\n           COMPUTE WS-DAY-TOTAL-DAYS =\n                ((WS-DAY-YEAR * 365) + WS-DAY-LEAPS + WS-DAY-JUL - 1).\n\n      ****\n      **** SET THE FIRST DAY OF THE WORLD\n      **** ==============================\n           MOVE 6 TO WS-DAY-FIRST-DAY.\n\n      ****\n      **** FIND THE OFFSET NUMBER OF DAYS\n      **** ==============================\n           DIVIDE WS-DAY-TOTAL-DAYS BY 7\n              GIVING    WS-DAY-INDX.\n           MOVE WS-DAY-INDX (11:2) TO WS-DAY-INDX2.\n\n           EVALUATE WS-DAY-INDX2\n              WHEN 14\n                 MOVE 1 TO WS-DAY-NUM-OUT\n              WHEN 28\n                 MOVE 2 TO WS-DAY-NUM-OUT\n              WHEN 42\n                 MOVE 3 TO WS-DAY-NUM-OUT\n              WHEN 57\n                 MOVE 4 TO WS-DAY-NUM-OUT\n              WHEN 71\n                 MOVE 5 TO WS-DAY-NUM-OUT\n              WHEN 85\n                 MOVE 6 TO WS-DAY-NUM-OUT\n              WHEN OTHER\n                 MOVE ZERO TO WS-DAY-NUM-OUT\n           END-EVALUATE.\n\n      ****\n      **** USE OFFSET TO GET THE DAY\n      **** =========================\n           ADD  WS-DAY-FIRST-DAY  TO  WS-DAY-NUM-OUT.\n           IF WS-DAY-NUM-OUT  > 7\n                 SUBTRACT 7 FROM WS-DAY-NUM-OUT.\n           MOVE WS-WEEK-DAY(WS-DAY-NUM-OUT) TO WS-DAY-OUT.\n\n       0200-END-PROGRAM.\n           GOBACK.\n\n      ************************************ END STV1805B\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "S0400A": {"ttr": 20492, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x19\\x01 \\x04/\\x01 \\x04/\\x11R\\x00\\xf1\\x00x\\x00\\x00\\xd4\\xc9\\xe2\\xf1\\xf4\\xf6@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2020-02-11T00:00:00", "modifydate": "2020-02-11T11:52:19", "lines": 241, "newlines": 120, "modlines": 0, "user": "MIS146"}, "text": "//useridS  JOB (0000,'TEST STV0400B'),\n//             'TEST STV0400B',CLASS=x,\n//             MSGCLASS=x,\n//             MSGLEVEL=1\n//JOBLIB   DD  DSN=userid.ISPF.OBJ,DISP=SHR\n//*----------------------------------------------------------\n//*\n//*  Test the Y2K date logic in STV0400B -\n//*  display the results of the 80/20 sliding date window,\n//*  80 back and 20 forward.\n//*\n//*----------------------------------------------------------\n//*\n//*  See step S110 below for a way to alter the window\n//*  back 100 years using 'MM/DD-YY'\n//*\n//*----------------------------------------------------------\n//*\n//*                                DATA------FUTURE----IN----OUT---\n//S010     EXEC PGM=STV0400T,PARM='00                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S011     EXEC PGM=STV0400T,PARM='01                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S012     EXEC PGM=STV0400T,PARM='02                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S013     EXEC PGM=STV0400T,PARM='03                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S014     EXEC PGM=STV0400T,PARM='04                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S015     EXEC PGM=STV0400T,PARM='05                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S016     EXEC PGM=STV0400T,PARM='06                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S017     EXEC PGM=STV0400T,PARM='07                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S018     EXEC PGM=STV0400T,PARM='08                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S019     EXEC PGM=STV0400T,PARM='09                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S020     EXEC PGM=STV0400T,PARM='10                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S021     EXEC PGM=STV0400T,PARM='11                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S022     EXEC PGM=STV0400T,PARM='12                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S023     EXEC PGM=STV0400T,PARM='13                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S024     EXEC PGM=STV0400T,PARM='14                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S025     EXEC PGM=STV0400T,PARM='15                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S026     EXEC PGM=STV0400T,PARM='16                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S027     EXEC PGM=STV0400T,PARM='17                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S028     EXEC PGM=STV0400T,PARM='18                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S029     EXEC PGM=STV0400T,PARM='19                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S030     EXEC PGM=STV0400T,PARM='20                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S031     EXEC PGM=STV0400T,PARM='21                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S032     EXEC PGM=STV0400T,PARM='22                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S033     EXEC PGM=STV0400T,PARM='23                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S034     EXEC PGM=STV0400T,PARM='24                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S035     EXEC PGM=STV0400T,PARM='25                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S036     EXEC PGM=STV0400T,PARM='26                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S037     EXEC PGM=STV0400T,PARM='27                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S038     EXEC PGM=STV0400T,PARM='28                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S039     EXEC PGM=STV0400T,PARM='29                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S040     EXEC PGM=STV0400T,PARM='30                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S041     EXEC PGM=STV0400T,PARM='31                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S042     EXEC PGM=STV0400T,PARM='32                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S043     EXEC PGM=STV0400T,PARM='33                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S044     EXEC PGM=STV0400T,PARM='34                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S045     EXEC PGM=STV0400T,PARM='35                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S046     EXEC PGM=STV0400T,PARM='36                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S047     EXEC PGM=STV0400T,PARM='37                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S048     EXEC PGM=STV0400T,PARM='38                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S049     EXEC PGM=STV0400T,PARM='39                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S050     EXEC PGM=STV0400T,PARM='40                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S051     EXEC PGM=STV0400T,PARM='41                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S052     EXEC PGM=STV0400T,PARM='42                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S053     EXEC PGM=STV0400T,PARM='43                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S054     EXEC PGM=STV0400T,PARM='44                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S055     EXEC PGM=STV0400T,PARM='45                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S056     EXEC PGM=STV0400T,PARM='46                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S057     EXEC PGM=STV0400T,PARM='47                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S058     EXEC PGM=STV0400T,PARM='48                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S059     EXEC PGM=STV0400T,PARM='49                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S060     EXEC PGM=STV0400T,PARM='50                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S061     EXEC PGM=STV0400T,PARM='51                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S062     EXEC PGM=STV0400T,PARM='52                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S063     EXEC PGM=STV0400T,PARM='53                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S064     EXEC PGM=STV0400T,PARM='54                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S065     EXEC PGM=STV0400T,PARM='55                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S066     EXEC PGM=STV0400T,PARM='56                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S067     EXEC PGM=STV0400T,PARM='57                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S068     EXEC PGM=STV0400T,PARM='58                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S069     EXEC PGM=STV0400T,PARM='59                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S070     EXEC PGM=STV0400T,PARM='60                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S071     EXEC PGM=STV0400T,PARM='61                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S072     EXEC PGM=STV0400T,PARM='62                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S073     EXEC PGM=STV0400T,PARM='63                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S074     EXEC PGM=STV0400T,PARM='64                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S075     EXEC PGM=STV0400T,PARM='65                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S076     EXEC PGM=STV0400T,PARM='66                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S077     EXEC PGM=STV0400T,PARM='67                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S078     EXEC PGM=STV0400T,PARM='68                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S079     EXEC PGM=STV0400T,PARM='69                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S080     EXEC PGM=STV0400T,PARM='70                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S081     EXEC PGM=STV0400T,PARM='71                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S082     EXEC PGM=STV0400T,PARM='72                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S083     EXEC PGM=STV0400T,PARM='73                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S084     EXEC PGM=STV0400T,PARM='74                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S085     EXEC PGM=STV0400T,PARM='75                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S086     EXEC PGM=STV0400T,PARM='76                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S087     EXEC PGM=STV0400T,PARM='77                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S088     EXEC PGM=STV0400T,PARM='78                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S089     EXEC PGM=STV0400T,PARM='79                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S090     EXEC PGM=STV0400T,PARM='80                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S091     EXEC PGM=STV0400T,PARM='81                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S092     EXEC PGM=STV0400T,PARM='82                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S093     EXEC PGM=STV0400T,PARM='83                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S094     EXEC PGM=STV0400T,PARM='84                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S095     EXEC PGM=STV0400T,PARM='85                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S096     EXEC PGM=STV0400T,PARM='86                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S097     EXEC PGM=STV0400T,PARM='87                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S098     EXEC PGM=STV0400T,PARM='88                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S099     EXEC PGM=STV0400T,PARM='89                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S100     EXEC PGM=STV0400T,PARM='90                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S101     EXEC PGM=STV0400T,PARM='91                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S102     EXEC PGM=STV0400T,PARM='92                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S103     EXEC PGM=STV0400T,PARM='93                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S104     EXEC PGM=STV0400T,PARM='94                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S105     EXEC PGM=STV0400T,PARM='95                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S106     EXEC PGM=STV0400T,PARM='96                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S107     EXEC PGM=STV0400T,PARM='97                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S108     EXEC PGM=STV0400T,PARM='98                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S109     EXEC PGM=STV0400T,PARM='99                  Y     CY     /'\n//SYSOUT   DD  SYSOUT=*\n//*----------------------------------------------------------\n//S110     EXEC PGM=STV0400T,PARM='01/01-04            M/D/Y CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S111     EXEC PGM=STV0400T,PARM='01/01-14            M/D/Y CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S112     EXEC PGM=STV0400T,PARM='01/01-24            M/D/Y CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S113     EXEC PGM=STV0400T,PARM='01/01-34            M/D/Y CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S114     EXEC PGM=STV0400T,PARM='01/01-44            M/D/Y CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S115     EXEC PGM=STV0400T,PARM='01/01-54            M/D/Y CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S116     EXEC PGM=STV0400T,PARM='01/01-64            M/D/Y CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S117     EXEC PGM=STV0400T,PARM='01/01-74            M/D/Y CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S118     EXEC PGM=STV0400T,PARM='01/01-84            M/D/Y CY     /'\n//SYSOUT   DD  SYSOUT=*\n//S119     EXEC PGM=STV0400T,PARM='01/01-94            M/D/Y CY     /'\n//SYSOUT   DD  SYSOUT=*\n//*----------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "S0400B": {"ttr": 20741, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x004\\x01\\x191\\x7f\\x01\\x192?\\x12G\\x00\\xb1\\x00\\x1b\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2019-11-13T00:00:00", "modifydate": "2019-11-19T12:47:34", "lines": 177, "newlines": 27, "modlines": 0, "user": "IANNONE"}, "text": "//useridS  JOB (8231,'TEST STV0400B'),\n//             'TEST STV0400B',CLASS=x,\n//             MSGCLASS=x,\n//             MSGLEVEL=1\n//JOBLIB   DD  DSN=userid.ISPF.OBJ,DISP=SHR\n//*----------------------------------------------------------\n//*  used to test the Y2K date and time conversion program STV0400B\n//*----------------------------------------------------------\n//*  convert         10/11/20       to         20201011\n//*\n//*          in     '10/11/20            M/D/Y CYMD  '\n//*          result '20201011            M/D/Y CYMD  '\n//*\n//S010     EXEC PGM=STV0400T,REGION=5120K,\n//             PARM='10/11/20            M/D/Y CYMD   /'\n//*                  11111111112222222222333333444444\n//*                  DATA------FUTURE----IN----OUT---\n//*\n//*\n//SYSOUT   DD  SYSOUT=*\n//*----------------------------------------------------------\n//*  convert         10/11/20       to         19201011\n//*\n//*          in     '10/11-20            M/D/Y CYMD  '\n//*          result '19201011            M/D/Y CYMD  '\n//*\n//S020     EXEC PGM=STV0400T,REGION=5120K,\n//             PARM='10/11-20            M/D/Y CYMD   /'\n//*                  11111111112222222222333333444444\n//*                  DATA------FUTURE----IN----OUT---\n//SYSOUT   DD  SYSOUT=*\n//*----------------------------------------------------------\n//*  convert         current date   to   current date minus 4 days\n//*\n//*          in     '                          -00004'\n//*          result '20191114                  -00004'\n//*\n//S030     EXEC PGM=STV0400T,REGION=5120K,\n//             PARM='                          -00004 /'\n//*                  11111111112222222222333333444444\n//*                  DATA------FUTURE----IN----OUT---\n//SYSOUT   DD  SYSOUT=*\n//*----------------------------------------------------------\n//*  show      current time     as             HHMM military\n//*\n//*          in     '                          HMM   '\n//*          result '1010                      HMM   '\n//*\n//S040     EXEC PGM=STV0400T,REGION=5120K,\n//             PARM='                          HMM    /'\n//*                  11111111112222222222333333444444\n//*                  DATA------FUTURE----IN----OUT---\n//SYSOUT   DD  SYSOUT=*\n//*----------------------------------------------------------\n//*  show      current time     as             HHMMSS military\n//*\n//*          in     '                          HMSM  '\n//*          result '101046                    HMSM  '\n//*\n//S050     EXEC PGM=STV0400T,REGION=5120K,\n//             PARM='                          HMSM   /'\n//*                  11111111112222222222333333444444\n//*                  DATA------FUTURE----IN----OUT---\n//SYSOUT   DD  SYSOUT=*\n//*----------------------------------------------------------\n//*  show      current time     as             HHMMSSHH military\n//*\n//*          in     '                          HMSM8 '\n//*          result '10104631                  HMSM8 '\n//*\n//S060     EXEC PGM=STV0400T,REGION=5120K,\n//             PARM='                          HMSM8  /'\n//*                  11111111112222222222333333444444\n//*                  DATA------FUTURE----IN----OUT---\n//SYSOUT   DD  SYSOUT=*\n//*----------------------------------------------------------\n//*  show      current time     as             HH:MM:SS military\n//*\n//*          in     '                          H:M:SM'\n//*          result '10:10:46                  H:M:SM'\n//*\n//S070     EXEC PGM=STV0400T,REGION=5120K,\n//             PARM='                          H:M:SM /'\n//*                  11111111112222222222333333444444\n//*                  DATA------FUTURE----IN----OUT---\n//SYSOUT   DD  SYSOUT=*\n//*----------------------------------------------------------\n//*  show      current time     as             HHMMAP standard\n//*\n//*          in     '                          HMP   '\n//*          result '1010AM                    HMP   '\n//*\n//S080     EXEC PGM=STV0400T,REGION=5120K,\n//             PARM='                          HMP    /'\n//*                  11111111112222222222333333444444\n//*                  DATA------FUTURE----IN----OUT---\n//SYSOUT   DD  SYSOUT=*\n//*----------------------------------------------------------\n//*  show      current time     as             HH:MM AP standard\n//*\n//*          in     '                          H:M P '\n//*          result '10:10 AM                  H:M P '\n//*\n//S090     EXEC PGM=STV0400T,REGION=5120K,\n//             PARM='                          H:M P  /'\n//*                  11111111112222222222333333444444\n//*                  DATA------FUTURE----IN----OUT---\n//SYSOUT   DD  SYSOUT=*\n//*----------------------------------------------------------\n//*  show      current time     as             HH:MM:SSAP standard\n//*\n//*          in     '                          H:M:SP'\n//*          result '10:10:46AM                H:M:SP'\n//*\n//S100     EXEC PGM=STV0400T,REGION=5120K,\n//             PARM='                          H:M:SP /'\n//*                  11111111112222222222333333444444\n//*                  DATA------FUTURE----IN----OUT---\n//SYSOUT   DD  SYSOUT=*\n//*----------------------------------------------------------\n//*  calculate number of minutes between 040000 yesterday and\n//*            040000 today\n//*\n//*          in     '04000001  040000    HMSM  MIN   '\n//*          result '001440    20191117  HMSM  MIN   '\n//*\n//S110     EXEC PGM=STV0400T,REGION=5120K,\n//             PARM='04000001  040000    HMSM  MIN    /'\n//*                  11111111112222222222333333444444\n//*                  DATA------FUTURE----IN----OUT---\n//SYSOUT   DD  SYSOUT=*\n//*----------------------------------------------------------\n//*  calculate number of minutes between 040000 today and\n//*            040000 two days from now\n//*\n//*          in     '040000    04000002  HMSM  MIN   '\n//*          result '002880    20191120  HMSM  MIN   '\n//*\n//S120     EXEC PGM=STV0400T,REGION=5120K,\n//             PARM='040000    04000002  HMSM  MIN    /'\n//*                  11111111112222222222333333444444\n//*                  DATA------FUTURE----IN----OUT---\n//SYSOUT   DD  SYSOUT=*\n//*----------------------------------------------------------\n//*  increment time 040000 forward by 120 minutes\n//*\n//*          in     '040000              HMSM  I00120'\n//*          result '06000000  20191118  HMSM  I00120'\n//*\n//S130     EXEC PGM=STV0400T,REGION=5120K,\n//             PARM='040000              HMSM  I00120 /'\n//*                  11111111112222222222333333444444\n//*                  DATA------FUTURE----IN----OUT---\n//SYSOUT   DD  SYSOUT=*\n//*----------------------------------------------------------\n//*  decrement time 040000 backward by 2880 minutes\n//*\n//*          in     '040000              HMSM  D02880'\n//*          result '04000002  20191116  HMSM  D02880'\n//*\n//S140     EXEC PGM=STV0400T,REGION=5120K,\n//             PARM='040000              HMSM  D02880 /'\n//*                  11111111112222222222333333444444\n//*                  DATA------FUTURE----IN----OUT---\n//SYSOUT   DD  SYSOUT=*\n//*----------------------------------------------------------\n//*  show 'SUFFIX' output\n//*\n//*          in     '                          SUFFIX'\n//*          result 'NOVEMBER            18TH  2019  '\n//*\n//S150     EXEC PGM=STV0400T,REGION=5120K,\n//             PARM='                          SUFFIX /'\n//*                  11111111112222222222333333444444\n//*                  DATA------FUTURE----IN----OUT---\n//SYSOUT   DD  SYSOUT=*\n//*----------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "S0530B": {"ttr": 20745, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00(\\x01\\x192?\\x01\\x192?\\x12R\\x00I\\x00I\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-11-19T00:00:00", "modifydate": "2019-11-19T12:52:28", "lines": 73, "newlines": 73, "modlines": 0, "user": "IANNONE"}, "text": "/*PRIORITY     01\n//useridJ  JOB (860353,'Test STV0530B: convert nbr to alpha'),\n//             'Test STV0530B ',\n//             CLASS=x,\n//             MSGCLASS=x,\n//             MSGLEVEL=(1,1)\n//*-------------------------------------------------\n//JOBLIB   DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//*-------------------------------------------------\n//S010     EXEC PGM=STV0530T,\n//             COND=(0,NE),\n//             REGION=60M,\n//             PARM='  17577   /'\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//*--------------------------------------------------\n//S020     EXEC PGM=STV0530T,\n//             COND=(0,NE),\n//             REGION=60M,\n//             PARM='  17576   /'\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//*--------------------------------------------------\n//S030     EXEC PGM=STV0530T,\n//             COND=(0,NE),\n//             REGION=60M,\n//             PARM='   6   74 /'\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//*--------------------------------------------------\n//S040     EXEC PGM=STV0530T,\n//             COND=(0,NE),\n//             REGION=60M,\n//             PARM='000000675 /'\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//*--------------------------------------------------\n//S050     EXEC PGM=STV0530T,\n//             COND=(0,NE),\n//             REGION=60M,\n//             PARM='000000676 /'\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//*--------------------------------------------------\n//S060     EXEC PGM=STV0530T,\n//             COND=(0,NE),\n//             REGION=60M,\n//             PARM='321272405 /'\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//*--------------------------------------------------\n//S070     EXEC PGM=STV0530T,\n//             COND=(0,NE),\n//             REGION=60M,\n//             PARM='321272406 /'\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//*--------------------------------------------------\n//S080     EXEC PGM=STV0530T,\n//             COND=(0,NE),\n//             REGION=60M,\n//             PARM='321272407 /'\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//*--------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TAPEDD": {"ttr": 20748, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x008\\x01\\x19\\x07/\\x01\\x192?\\x11!\\x00\\xb0\\x00\\xad\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-11-19T11:21:38", "lines": 176, "newlines": 173, "modlines": 0, "user": "IANNONE"}, "text": "  MIS0520B is used to pull a list of tapes for an uncataloged\n           dataset from IBM's DFSMSrmm, and create a vol=ser list\n           with the tapes in proper order.\n\n  1. DELETE WORK FILES\n  2. UPDATE (IBM tape management) RMM DATASET NAME QUERY WITH\n     DATE TO LIMIT NUMBER OF TAPES RETURNED FROM QUERY\n     (use MIS0425B to plug date into RMM query)\n  3. QUERY RMM BY DATASET NAME (TO GET VOLSERS):\n      RMM SD OWN(*) LIM(*) DSN('PDSMS.SMHM.DGA6HCT0.HMMASTER.*')\n      SINCE(2000/305) SEQ(*)\n  4. QUERY RMM BY TAPE VOLSER (TO GET VOLSER SEQUENCE):\n      RMM LV ###### STAT\n  5. SORT TAPES AND GENERATE OUTPUT\n\n  example of MIS0520B output:\n\n  //    VOL=SER=(308004,307987,307983,307807,307790,307517,307515,\n  //             307513,308211,308185)\n  //*-------------------------------------\n  //*   VOL=SER= generated by program\n  //*-------------------------------------\n\n\n  example of MIS0520B jcl:\n\n  note:  instream parms below were actually pds members like SMS51120\n  note:  PLSMS.SMSSM00L.H00T0.SYSIN(SMS51120) looks like this:\n\n    RMM SD OWN(*) LIM(*) DSN('PDSMS.SMHM.DGA6HCT0.HMMASTER.*')         -\n           SINCE(2000/305)                                             -\n           SEQ(*)\n\n//*-------------------------------------\n//*\n//*  BUILD NEW JCL CONTAINING HMMASTER VOL=SER= STATEMENT\n//*\n//*  1. DELETE WORK FILES\n//*  2. UPDATE RMM DATASET NAME QUERY WITH DATE TO LIMIT\n//*       NUMBER OF TAPES RETURNED FROM QUERY\n//*  3. QUERY RMM BY DATASET NAME (TO GET VOLSERS)\n//*  4. QUERY RMM BY TAPE VOLSER (TO GET VOLSER SEQUENCE)\n//*  5. SORT TAPES AND BUILD SMS51001 MEMBER FOR NEXT MONTHS RUN\n//*\n//*-------------------------------------\n//S100     EXEC PGM=IDCAMS,\n//             REGION=5120K,\n//             COND=(0,NE)\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n    DELETE PDSMS.RMM.HMMASTER.LIST  NONVSAM\n    DELETE PDSMS.RMM.HMMASTER.LIST2 NONVSAM\n    DELETE PDSMS.RMM.HMMASTER.LIST3 NONVSAM\n    IF MAXCC = 8 THEN SET MAXCC = 0\n/*\n//*-------------------------------------\n//S110     EXEC PGM=CHNG0080,\n//             REGION=5120K,\n//             COND=(0,NE),\n//             PARM='0080N0000000000NCMDE01  /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//OFFSET   DD  DISP=SHR,DSN=userid.ISPF.FILE488(MIS10010)\n//CHANGED  DD  DISP=SHR,DSN=PLSMS.SMSSM00L.H00T0.SYSIN(SMS51120)\n//PARM01   DD  *,DLM=ZZ\n*\n*  PLACE EOM DATE IN STATIC PARM\n*  USED TO LIMIT PULL OF HMMASTER TAPES TO LATEST VERSION\n*\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\nNF00A  00000000  0005  SINCE\nNR00A +00060000  0008  #+00000#CY/DDD#\nZZ\n//*-------------------------------------\n//S120     EXEC PGM=IKJEFT01,\n//             REGION=5120K,\n//             COND=(0,NE)\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSOUT   DD  SYSOUT=*\n//SYSTSPRT DD  DSN=PDSMS.RMM.HMMASTER.LIST,\n//             DATACLAS=D0FBPS,LRECL=80,\n//             DISP=(NEW,CATLG,DELETE)\n//SYSTSIN  DD  DSN=PLSMS.SMSSM00L.H00T0.SYSIN(SMS51120),DISP=SHR\n//*-------------------------------------\n//S130     EXEC PGM=PULL0080,\n//             REGION=5120K,\n//             COND=(0,NE),\n//             PARM='0080NN    /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//INFILE   DD  DSN=PDSMS.RMM.HMMASTER.LIST,\n//             DISP=SHR\n//OUTFILE  DD  DSN=PDSMS.RMM.HMMASTER.LIST2,\n//             DATACLAS=D0FBPS,LRECL=80,\n//             DISP=(NEW,CATLG,DELETE)\n//OUTPRNT  DD  DUMMY\n//PARM01   DD  *,DML=ZZ\n**\n**   PULL TAPES FROM RMM OUTPUT AND PREFIX WITH 'RMM LV ' COMMAND\n**\n**  <-------------------X-- ---- ----- -------- -------- ---------------\n**           A           BB CCCC DDEEE F.GGGGG# H.IIIII#       J\n**  <----+----+----+----I-- ---- ----- -------- -------- ---------------\n#NBR#                    06 0046 00000 - 00000  + 00006  I08  RMM LV\nZZ\n//*-------------------------------------\n//S140     EXEC PGM=CHNG0080,\n//             REGION=5120K,\n//             COND=(0,NE),\n//             PARM='0080N0000000000N00000000/'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//OFFSET   DD  DISP=SHR,DSN=userid.ISPF.FILE488(MIS10010)\n//CHANGED  DD  DISP=SHR,DSN=PDSMS.RMM.HMMASTER.LIST2\n//PARM01   DD  *,DLM=ZZ\n*\n*  ADD 'STAT' TO RMM LV COMMAND\n*\n*\n*                               1         2         3         4\n*TII12PPPPPMMMMPALLLL  1...+....0....+....0....+....0....+....0....\n R00   00160000  0004  STAT\nZZ\n//*-------------------------------------\n//S150     EXEC PGM=IKJEFT01,\n//             REGION=5120K,\n//             COND=(0,NE)\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSOUT   DD  SYSOUT=*\n//SYSTSPRT DD  DSN=PDSMS.RMM.HMMASTER.LIST3,\n//             DATACLAS=D0FBPS,LRECL=80,\n//             DISP=(NEW,CATLG,DELETE)\n//SYSTSIN  DD  DSN=PDSMS.RMM.HMMASTER.LIST2,\n//             DISP=(OLD,KEEP,KEEP)\n//*-------------------------------------\n//*  SAVE PREVIOUS TAPE LIST\n//*-------------------------------------\n//S160   EXEC  PGM=IEBGENER,\n//             REGION=5120K,\n//             COND=(0,NE)\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSN=userid.ISPF.FILE488(SMS51001),\n//             DISP=SHR\n//SYSUT2   DD  DSN=userid.ISPF.FILE488(SMS51002),\n//             DISP=SHR\n//SYSIN    DD  DUMMY\n//*-------------------------------------\n//*   PARM  Y/N = DOCUMENT OUTPUT WITH FIRST 5 BYTES OF GDG NUMBER\n//*         Y/N = APPEND OUTPUT WITH COMMENT THAT MIS0520B\n//*               GENERATED THE VOL=SER= LIST\n//*-------------------------------------\n//S170     EXEC PGM=MIS0520B,\n//             REGION=5120K,\n//             COND=(0,NE),\n//             PARM='YY      /'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//RMMLVI   DD  DSN=PDSMS.RMM.HMMASTER.LIST3,\n//             DISP=(OLD,KEEP,KEEP)\n//GDGLVL   DD  DSN=PDSMS.RMM.HMMASTER.LIST,\n//             DISP=(OLD,KEEP,KEEP)\n//RMMLVO   DD  DSN=userid.ISPF.FILE488(SMS510VS),\n//             DISP=SHR\n//*-------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "XLT04650": {"ttr": 20994, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01#\\x002\\x01\\x19\"\\x7f\\x01 \\x04/\\x10 \\x02\\xba\\x01\\xf8\\x00\\x00\\xd4\\xc9\\xe2\\xf1\\xf4\\xf6@@@@'", "ispf": {"version": "01.35", "flags": 0, "createdate": "2019-08-15T00:00:00", "modifydate": "2020-02-11T10:20:32", "lines": 698, "newlines": 504, "modlines": 0, "user": "MIS146"}, "text": "\n       TITLE '  XLT04650: edit lrecl 32700 records '.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    XLT04650.\n      **********************************************************CX003B\n      *@@@ C3 edit lrecl 32700 records\n      ****************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * Date written: 07/05/2019\n      * Author      : Jim Iannone\n      *               Loop through lrecl 32700 VB records and replace\n      *               strings with longer or shorter strings\n      *               or zap portions of strings by setting the\n      *               string length to zero.  Also allow zapping\n      *               trailing spaces when last character in record\n      *               is a specified EOR character.\n      *\n      ****************************************************************\n      * Date changed: 08/02/2019 Iannone\n      *               allow suppressing display of changes\n      ****************************************************************\n      * Date changed: 01/30/2020 Iannone\n      *               add relational group logic\n      ****************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n           C01 IS PAGE-TOP.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT LONGREC              ASSIGN TO LONGREC\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT LONGOUT              ASSIGN TO LONGOUT\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  LONGREC\n           RECORDING MODE V\n           RECORD IS VARYING IN SIZE\n           FROM 1  TO 32700 CHARACTERS\n           DEPENDING ON WS-LONGREC-RCD-LEN.\n\n       01  LONGREC-RECORD.\n           05  LONGREC-RCD             PIC X(32700).\n\n       FD  LONGOUT\n           RECORDING MODE V\n           RECORD IS VARYING IN SIZE\n           FROM 1  TO 32700 CHARACTERS\n           DEPENDING ON WS-LONGOUT-RCD-LEN.\n\n       01  LONGOUT-RECORD.\n           05  LONGOUT-RCD             PIC X(32700).\n\n       FD  PARM01\n           RECORDING MODE F.\n       01  PARM01-RECORD.\n           05  PARM01-RCD              PIC  X(80).\n           05  PARM01-RCD1             REDEFINES PARM01-RCD.\n               10  PARM01-DOCU         PIC  X.\n               10  FILLER              PIC  X.\n               10  PARM01-CODE         PIC  X.\n               10  FILLER              PIC  X.\n               10  PARM01-STR-O.\n                   15  PARM01-EOR      PIC  X.\n                   15  PARM01-STR-2X30 PIC  X(29).\n               10  FILLER              PIC  X.\n               10  PARM01-LEN-O        PIC  XX.\n               10  FILLER              PIC  X.\n               10  PARM01-STR-N        PIC  X(30).\n               10  FILLER              PIC  X.\n               10  PARM01-LEN-N        PIC  XX.\n               10  PARM01-GROUP        PIC  X.\n               10  FILLER              PIC  X(08).\n           05  PARM01-RCD2             REDEFINES PARM01-RCD.\n               10  FILLER              PIC  X(04).\n               10  PARM01-R-GROUP      PIC  X.\n               10  FILLER              PIC  X.\n               10  PARM01-R-SEP        PIC  X.\n               10  FILLER              PIC  X.\n               10  PARM01-R-SENDER     PIC  X(15).\n               10  FILLER              PIC  X(49).\n               10  FILLER              PIC  X(08).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage XLT04650 start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-PARM01-MAX           PIC  9(05)    VALUE ZERO.\n           05  WS-EOR-MAX              PIC  9(05)    VALUE ZERO.\n           05  WS-SEP-MAX              PIC  9(05)    VALUE ZERO.\n           05  WS-GRP-MAX              PIC  9(05)    VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-TALLY                PIC S9(05)    VALUE ZERO COMP.\n           05  WS-LS-DATA              PIC  X(10)    VALUE SPACE.\n           05  FILLER REDEFINES WS-LS-DATA.\n               10  WS-LS-ZAP-TRAIL     PIC  X.\n               10  WS-LS-EXTRA         PIC  X(09).\n           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.\n           05  WS-LONGREC-RCD-LEN      PIC  9(05)    VALUE ZERO.\n           05  WS-LONGOUT-RCD-LEN      PIC  9(05)    VALUE ZERO.\n           05  WS-MAX-POS              PIC  9(05)    VALUE ZERO.\n           05  WS-R1-LEN               PIC  9(05)    VALUE ZERO.\n           05  WS-R2-LEN               PIC  9(05)    VALUE ZERO.\n           05  WS-R4-LEN               PIC  9(05)    VALUE ZERO.\n           05  WS-LEN-O                PIC  99       VALUE ZERO.\n           05  WS-LEN-N                PIC  99       VALUE ZERO.\n           05  WS-GRP-ERR              PIC  X(200)   VALUE SPACE.\n           05  WS-INTRDR-END           PIC  X(05)    VALUE '/*EOF'.\n           05  WS-ZAP-OCCUR-SW         PIC  X        VALUE SPACE.\n           05  WS-EOR-SW               PIC  X        VALUE SPACE.\n           05  WS-CHANGE-SW            PIC  X        VALUE SPACE.\n           05  WS-PARM-EDIT-SW         PIC  X        VALUE SPACE.\n           05  WS-CODE                 PIC  X        VALUE SPACE.\n           05  WS-SEP                  PIC  X        VALUE SPACE.\n           05  WS-GRP-SW               PIC  X        VALUE SPACE.\n           05  WS-SEP-SW               PIC  X        VALUE SPACE.\n           05  WS-BEFORE-SW            PIC  X        VALUE SPACE.\n           05  WS-AFTER-SW             PIC  X        VALUE SPACE.\n           05  WS-SHOW-BEFORE          PIC  X(32)    VALUE SPACE.\n           05  WS-SHOW-AFTER           PIC  X(32)    VALUE SPACE.\n           05  WS-SENDER               PIC  X(20)    VALUE SPACE.\n           05  WS-XA1                  PIC  X        VALUE X'A1'.\n           05  WS-X0D                  PIC  X        VALUE X'0D'.\n           05  WS-X1C                  PIC  X        VALUE X'1C'.\n           05  WS-X22                  PIC  X        VALUE X'22'.\n           05  WS-X7C                  PIC  X        VALUE X'7C'.\n           05  WS-X7D                  PIC  X        VALUE X'7D'.\n           05  WS-STR-O                PIC  X(30)    VALUE SPACE.\n           05  WS-STR-N                PIC  X(30)    VALUE SPACE.\n           05  WS-UNSTR-FIELDS.\n               10  WS-UNSTR1           PIC  X(20)    VALUE SPACE.\n               10  WS-UNSTR2           PIC  X(20)    VALUE SPACE.\n               10  WS-UNSTR3           PIC  X(20)    VALUE SPACE.\n               10  WS-UNSTR4           PIC  X(20)    VALUE SPACE.\n               10  WS-UNSTR5           PIC  X(20)    VALUE SPACE.\n               10  WS-UNSTR6           PIC  X(20)    VALUE SPACE.\n               10  WS-UNSTR7           PIC  X(20)    VALUE SPACE.\n               10  WS-UNSTR8           PIC  X(20)    VALUE SPACE.\n           05  WS-HOLD-R1              PIC  X(32700) VALUE SPACE.\n           05  WS-HOLD-R2              PIC  X(32700) VALUE SPACE.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-LONGREC-CNT     PIC S9(07)    VALUE ZERO.\n           05  WS-WRITE-LONGOUT-CNT    PIC S9(07)    VALUE ZERO.\n           05  WS-LINE-CHANGE-CNT      PIC S9(07)    VALUE ZERO.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB3                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB4                 PIC S9(05)    VALUE ZERO.\n           05  WS-SUB5                 PIC S9(05)    VALUE ZERO.\n           05  WS-STR1                 PIC S9(05)    VALUE ZERO.\n           05  WS-STR2                 PIC S9(05)    VALUE ZERO.\n\n       01  WS-TABLES.\n           05  WS-PARM01-TABLE         PIC  X(13200) VALUE SPACE.\n           05  WS-PARM01-ITEM REDEFINES WS-PARM01-TABLE\n                                       OCCURS 200 TIMES.\n               10  WS-P1-STR-O         PIC  X(30).\n               10  WS-P1-LEN-O         PIC  99.\n               10  WS-P1-STR-N         PIC  X(30).\n               10  WS-P1-LEN-N         PIC  99.\n               10  WS-P1-CODE          PIC  X.\n               10  WS-P1-GRP           PIC  X.\n           05  WS-GROUP-TABLE          PIC  X(850)   VALUE SPACE.\n           05  WS-GROUP-ITEM REDEFINES WS-GROUP-TABLE\n                                       OCCURS 50 TIMES.\n               10  WS-G1-GRP           PIC  X.\n               10  WS-G1-SEP           PIC  X.\n               10  WS-G1-SND           PIC  X(15).\n           05  WS-SEP-TABLE            PIC  X(20)    VALUE SPACE.\n           05  WS-SEP-ITEM REDEFINES WS-SEP-TABLE\n                                       OCCURS 20 TIMES.\n               10  WS-S1-SEP           PIC  X.\n           05  WS-EOR-TABLE            PIC  X(20)    VALUE SPACE.\n           05  WS-EOR-ITEM REDEFINES WS-EOR-TABLE\n                                       OCCURS 20 TIMES.\n               10  WS-EOR              PIC  X.\n\n       01  WS-SWITCHES.\n           05  WS-END-LONGREC-SW       PIC  X        VALUE 'N'.\n               88  END-OF-LONGREC                    VALUE 'Y'.\n               88  MORE-LONGREC-RCDS                 VALUE 'N'.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  XLT04650 END  '.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELD.\n           05  LS-LENGTH               PIC S9(04)    COMP.\n           05  LS-DATA                 PIC  X(10).\n           05  FILLER REDEFINES LS-DATA.\n               10  LS-ZAP-TRAIL        PIC  X.\n               10  LS-EXTRA            PIC  X(09).\n\n      /\n\n       PROCEDURE DIVISION USING LS-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           MOVE +0000                         TO WS-RETURN-CODE.\n           PERFORM 0200-OPEN-FILES.\n           DISPLAY '    '.\n           DISPLAY '**** XLT04650 alter lrecl 32700 records'.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-LONGREC.\n\n           IF WS-EOR-MAX > ZERO\n             IF WS-ZAP-OCCUR-SW = 'Y'\n                 DISPLAY '**** EOR delimiters       ' WS-EOR-MAX\n                         ' of 20'\n             ELSE\n                 CONTINUE\n           ELSE\n           IF WS-LS-ZAP-TRAIL = 'Y'\n               DISPLAY '**** No EOR delimiters specified - '\n                       'zap processing skipped'.\n\n           DISPLAY '**** Records in LONGREC   ' WS-READ-LONGREC-CNT.\n           DISPLAY '**** Records in LONGOUT   ' WS-WRITE-LONGOUT-CNT.\n\n           IF WS-PARM01-MAX = ZERO\n             IF WS-ZAP-OCCUR-SW = 'Y'\n                 DISPLAY '**** Copying records as-is with trailing'\n                         ' spaces removed'\n             ELSE\n                 DISPLAY '**** Copying records as-is'\n           ELSE\n           IF WS-ZAP-OCCUR-SW = 'Y'\n               DISPLAY '**** LONGOUT rcds changed ' WS-LINE-CHANGE-CNT\n                       ' with trailing spaces removed'\n           ELSE\n               DISPLAY '**** LONGOUT rcds changed ' WS-LINE-CHANGE-CNT.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** XLT04650 cond code ' WS-RETURN-CODE\n                       ' set by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** XLT04650 EOJ encountered '.\n           DISPLAY '    '.\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  LONGREC.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** XLT04650 open error on LONGREC'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN OUTPUT LONGOUT.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** XLT04650 open error on LONGOUT'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN INPUT  PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** XLT04650 open error on PARM01'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE LONGOUT.\n           CLOSE LONGREC.\n           CLOSE PARM01.\n\n      *---------------------------------------\n      *    X\n      *---------------------------------------\n       0400-PROCESS-LONGREC.\n\n           PERFORM 0500-GET-LINKAGE.\n\n           PERFORM VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > 200\n               MOVE SPACE                     TO WS-P1-STR-O(WS-SUB1)\n               MOVE SPACE                     TO WS-P1-STR-N(WS-SUB1)\n               MOVE SPACE                     TO WS-P1-CODE(WS-SUB1)\n               MOVE SPACE                     TO WS-P1-GRP(WS-SUB1)\n               MOVE ZERO                      TO WS-P1-LEN-O(WS-SUB1)\n               MOVE ZERO                      TO WS-P1-LEN-N(WS-SUB1)\n           END-PERFORM.\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                      TO WS-SUB1 WS-SUB2\n               MOVE ZERO                      TO WS-SUB3 WS-SUB4\n               MOVE SPACE                     TO WS-GROUP-TABLE\n               MOVE SPACE                     TO WS-EOR-TABLE\n               MOVE SPACE                     TO WS-SEP-TABLE\n               PERFORM 0700-LOAD-PARM01 THRU\n                       0700-LOAD-PARM01-EXIT.\n\n           IF WS-PARM01-MAX > ZERO\n               DISPLAY '**** Change requests      ' WS-PARM01-MAX\n                       ' of 200'.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 1100-GET-LONGREC\n                   UNTIL END-OF-LONGREC.\n\n       0500-GET-LINKAGE.\n           IF LS-LENGTH = ZERO\n               DISPLAY '**** Parm length is zero '\n               MOVE +0500                     TO WS-RETURN-CODE\n           ELSE\n           IF LS-LENGTH > LENGTH OF WS-LS-DATA\n               DISPLAY '**** Parm length is excessive '\n               MOVE +0500                     TO WS-RETURN-CODE\n           ELSE\n               MOVE LS-DATA(1: LS-LENGTH)     TO WS-LS-DATA.\n\n      *---------------------------------------\n      *    load XXX...\n      *---------------------------------------\n       0700-LOAD-PARM01.\n           READ PARM01.\n           IF WS-STAT = 10\n               MOVE WS-SUB1                   TO WS-PARM01-MAX\n               MOVE WS-SUB2                   TO WS-EOR-MAX\n               MOVE WS-SUB3                   TO WS-SEP-MAX\n               MOVE WS-SUB4                   TO WS-GRP-MAX\n               GO TO 0700-LOAD-PARM01-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** XLT04650 read error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0700                     TO WS-RETURN-CODE\n               GO TO 0700-LOAD-PARM01-EXIT.\n\n           IF PARM01-DOCU = '*'\n               GO TO 0700-LOAD-PARM01.\n\n           IF PARM01-CODE = 'C' OR 'N'\n               MOVE SPACE                     TO WS-PARM-EDIT-SW\n               PERFORM 0700-PARM-EDIT\n               IF WS-PARM-EDIT-SW = SPACE\n                 IF WS-SUB1 < 200\n                     ADD 1                    TO WS-SUB1\n                     PERFORM 0700-PARM01-FIELDS.\n\n           IF PARM01-CODE = 'E'\n             IF WS-SUB2 < 20\n                 ADD 1                        TO WS-SUB2\n                 MOVE PARM01-EOR              TO WS-EOR(WS-SUB2).\n\n           IF PARM01-CODE = 'S'\n             IF WS-SUB3 < 20\n                 ADD 1                        TO WS-SUB3\n                 MOVE PARM01-EOR              TO WS-S1-SEP(WS-SUB3).\n\n           IF PARM01-CODE = 'R'\n             IF WS-SUB4 < 50\n                 ADD 1                        TO WS-SUB4\n                 MOVE PARM01-R-GROUP          TO WS-G1-GRP(WS-SUB4)\n                 MOVE PARM01-R-SEP            TO WS-G1-SEP(WS-SUB4)\n                 MOVE PARM01-R-SENDER         TO WS-G1-SND(WS-SUB4).\n\n           GO TO 0700-LOAD-PARM01.\n\n       0700-LOAD-PARM01-EXIT. EXIT.\n\n       0700-PARM-EDIT.\n           IF PARM01-STR-O = SPACE\n               DISPLAY '**** old parm string is blank - skipping'\n               MOVE 'Y'                       TO WS-PARM-EDIT-SW.\n           IF PARM01-LEN-O NUMERIC\n               MOVE PARM01-LEN-O              TO WS-LEN-O\n               IF WS-LEN-O = ZERO\n                   DISPLAY '**** old parm length is zero - skipping'\n                   MOVE 'Y'                   TO WS-PARM-EDIT-SW\n               ELSE\n               IF WS-LEN-O > 30\n                   DISPLAY '**** old parm length > 30 - skipping'\n                   MOVE 'Y'                   TO WS-PARM-EDIT-SW\n               ELSE\n                   CONTINUE\n           ELSE\n               DISPLAY '**** old parm length is not numeric '\n                       '- skipping'\n               MOVE 'Y'                       TO WS-PARM-EDIT-SW.\n           IF PARM01-LEN-N NUMERIC\n               MOVE PARM01-LEN-N              TO WS-LEN-N\n               IF WS-LEN-N > 30\n                   DISPLAY '**** new parm length > 30 - skipping'\n                   MOVE 'Y'                   TO WS-PARM-EDIT-SW\n               ELSE\n                   CONTINUE\n           ELSE\n               DISPLAY '**** new parm length is not numeric '\n                       '- skipping'\n               MOVE 'Y'                       TO WS-PARM-EDIT-SW.\n\n       0700-PARM01-FIELDS.\n           MOVE PARM01-STR-O                  TO WS-P1-STR-O(WS-SUB1).\n           MOVE PARM01-LEN-O                  TO WS-P1-LEN-O(WS-SUB1).\n           MOVE PARM01-STR-N                  TO WS-P1-STR-N(WS-SUB1).\n           MOVE PARM01-LEN-N                  TO WS-P1-LEN-N(WS-SUB1).\n           MOVE PARM01-CODE                   TO WS-P1-CODE(WS-SUB1).\n           MOVE PARM01-GROUP                  TO WS-P1-GRP(WS-SUB1).\n\n      *---------------------------------------\n\n       1100-GET-LONGREC.\n           PERFORM 1100-READ-LONGREC.\n           IF MORE-LONGREC-RCDS\n               ADD 1                          TO WS-READ-LONGREC-CNT\n               PERFORM 1200-SELECT THRU\n                       1200-SELECT-EXIT.\n\n       1100-READ-LONGREC.\n           READ LONGREC\n             AT END\n                 MOVE 'Y'                     TO WS-END-LONGREC-SW.\n\n      *---------------------------------------\n      *    WS-SUB1   parm loop subscript\n      *    WS-SUB2   vb record original subscript\n      *    WS-SUB3   vb record altered subscript\n      *    WS-SUB4   crunch subscript\n      *    WS-SUB5   EOR character test subscript\n      *---------------------------------------\n       1200-SELECT.\n           MOVE SPACE                         TO WS-CHANGE-SW.\n           IF WS-PARM01-MAX = ZERO\n               MOVE LONGREC-RCD               TO WS-HOLD-R2\n               MOVE WS-LONGREC-RCD-LEN        TO WS-R2-LEN\n           ELSE\n               PERFORM 1300-DETERMINE-X12-SEGMENT\n               PERFORM 1300-PARM-LOOP\n                   VARYING WS-SUB1 FROM 1 BY 1\n                   UNTIL WS-SUB1 > WS-PARM01-MAX.\n           IF WS-CHANGE-SW = 'Y'\n               ADD 1                          TO WS-LINE-CHANGE-CNT.\n           IF WS-LS-ZAP-TRAIL = 'Y'\n               PERFORM 1500-CRUNCH-TRAIL-SPACES.\n           MOVE WS-HOLD-R2                    TO LONGOUT-RCD.\n           MOVE WS-R2-LEN                     TO WS-LONGOUT-RCD-LEN.\n           PERFORM 2300-WRITE-LONGOUT.\n\n       1200-SELECT-EXIT. EXIT.\n\n       1300-DETERMINE-X12-SEGMENT.\n           IF WS-HOLD-R1(1: 3) = 'ISA' OR 'UNB'\n               MOVE WS-HOLD-R1(4: 1)          TO WS-SEP\n               MOVE SPACE                     TO WS-UNSTR-FIELDS\n               UNSTRING WS-HOLD-R1            DELIMITED BY WS-SEP\n                   INTO WS-UNSTR1  WS-UNSTR2  WS-UNSTR3  WS-UNSTR4\n                        WS-UNSTR5  WS-UNSTR6  WS-UNSTR7  WS-UNSTR8.\n\n      *---------------------------------------\n      *    STR-O  string old\n      *    STR-N  string new\n      *    LEN-O  string length old\n      *    LEN-N  string length new\n      *---------------------------------------\n       1300-PARM-LOOP.\n           IF WS-SUB1 = 1\n               MOVE LONGREC-RCD               TO WS-HOLD-R1\n               MOVE WS-LONGREC-RCD-LEN        TO WS-R1-LEN.\n           MOVE SPACE                         TO WS-HOLD-R2.\n           MOVE WS-P1-STR-O(WS-SUB1)          TO WS-STR-O.\n           MOVE WS-P1-STR-N(WS-SUB1)          TO WS-STR-N.\n           MOVE WS-P1-LEN-O(WS-SUB1)          TO WS-LEN-O.\n           MOVE WS-P1-LEN-N(WS-SUB1)          TO WS-LEN-N.\n           MOVE WS-P1-CODE(WS-SUB1)           TO WS-CODE.\n           MOVE WS-P1-GRP(WS-SUB1)            TO WS-GRP-SW.\n\n           MOVE SPACE                         TO WS-SEP-SW.\n           MOVE SPACE                         TO WS-SENDER.\n           IF WS-GRP-SW NOT = SPACE\n               MOVE 'X'                       TO WS-SEP-SW\n               PERFORM 1300-MATCH-GROUP.\n\n      *---------------------------------------\n      *    if the search string is longer than the physical record,\n      *    skip searching.  also stop searching when looking past EOR.\n      *---------------------------------------\n           MOVE 1                             TO WS-SUB3.\n           MOVE ZERO                          TO WS-MAX-POS.\n           IF WS-R1-LEN > WS-LEN-O\n               COMPUTE WS-MAX-POS = WS-R1-LEN - WS-LEN-O + 1.\n           PERFORM 1300-STRING-LOOP\n               VARYING WS-SUB2 FROM 1 BY 1\n               UNTIL WS-SUB2 > WS-R1-LEN.\n      *---------------------------------------\n      *    after looping through full WS-HOLD-R1 record, place\n      *    WS-HOLD-R2 - which now contains any changes - into\n      *    WS-HOLD-R1 so the next loop through includes previous\n      *    changes\n      *---------------------------------------\n           MOVE WS-HOLD-R2                    TO WS-HOLD-R1.\n           MOVE WS-SUB3                       TO WS-R2-LEN.\n           SUBTRACT 1                         FROM WS-R2-LEN.\n           MOVE WS-R2-LEN                     TO WS-R1-LEN.\n\n      *---------------------------------------\n      *    move characters one at a time from R1 to R2.\n      *    when change string found, move the new change string and\n      *      adjust pull/put positions to skip over the old string.\n      *---------------------------------------\n       1300-STRING-LOOP.\n           IF WS-SUB2 > WS-MAX-POS\n               PERFORM 1400-COPY-UNCHANGED\n           ELSE\n           IF WS-HOLD-R1(WS-SUB2: WS-LEN-O) = WS-STR-O(1: WS-LEN-O)\n             IF WS-SEP-SW = 'X'\n                 PERFORM 1400-COPY-UNCHANGED\n             ELSE\n             IF WS-SEP-SW = 'Y'\n                 PERFORM 1400-CHECK-GROUP-CRITERIA\n                 IF WS-BEFORE-SW = 'Y'\n                     AND WS-AFTER-SW = 'Y'\n                     PERFORM 1400-REPLACE-STRING\n                 ELSE\n                     PERFORM 1400-COPY-UNCHANGED\n             ELSE\n                 PERFORM 1400-REPLACE-STRING\n           ELSE\n               PERFORM 1400-COPY-UNCHANGED.\n\n       1400-COPY-UNCHANGED.\n           MOVE WS-HOLD-R1(WS-SUB2: 1)     TO WS-HOLD-R2(WS-SUB3: 1).\n           ADD 1                              TO WS-SUB3.\n\n       1400-REPLACE-STRING.\n           MOVE WS-STR-N           TO WS-HOLD-R2(WS-SUB3: WS-LEN-N).\n           PERFORM 1400-SHOW-CHANGE.\n           ADD WS-LEN-O                       TO WS-SUB2.\n           SUBTRACT 1                         FROM WS-SUB2.\n           ADD WS-LEN-N                       TO WS-SUB3.\n           MOVE 'Y'                           TO WS-CHANGE-SW.\n\n       1400-SHOW-CHANGE.\n           IF WS-SEP-SW = 'Y'\n               MOVE WS-HOLD-R1(WS-SUB2 - 1: WS-LEN-O + 2)\n                                              TO WS-SHOW-BEFORE\n               MOVE SPACE                     TO WS-SHOW-AFTER\n               STRING WS-HOLD-R2(WS-SUB3 - 1: WS-LEN-N + 1)\n                                              DELIMITED BY SIZE\n                      WS-HOLD-R1(WS-SUB2 + WS-LEN-O: 1)\n                                              DELIMITED BY SIZE\n                      INTO WS-SHOW-AFTER\n           ELSE\n               MOVE WS-STR-O                  TO WS-SHOW-BEFORE\n               MOVE WS-STR-N                  TO WS-SHOW-AFTER.\n           IF WS-CODE = 'C'\n               DISPLAY '     rcd ' WS-READ-LONGREC-CNT\n                       '  before  loc ' WS-SUB2 ' len ' WS-LEN-O\n                       '  ' WS-SHOW-BEFORE\n               DISPLAY '                '\n                       '  after   loc ' WS-SUB3 ' len ' WS-LEN-N\n                       '  ' WS-SHOW-AFTER\n               IF WS-SENDER NOT = SPACE\n                   DISPLAY '                          '\n                           'for sender ' WS-SENDER.\n\n      *---------------------------------------\n      *    WS-SEP-SW is set to 'X' and replaced here.  If no group\n      *    match is made then it remains 'X' meaning skip string\n      *    replacement.\n      *---------------------------------------\n       1300-MATCH-GROUP.\n           PERFORM VARYING WS-SUB4 FROM 1 BY 1\n               UNTIL WS-SUB4 > WS-GRP-MAX\n               IF WS-GRP-SW = WS-G1-GRP(WS-SUB4)\n                   MOVE WS-G1-SEP(WS-SUB4)    TO WS-SEP-SW\n                   MOVE WS-G1-SND(WS-SUB4)    TO WS-SENDER\n                   MOVE WS-GRP-MAX            TO WS-SUB4\n               END-IF\n           END-PERFORM.\n           IF WS-SEP-SW = 'X'\n             IF WS-GRP-ERR(WS-SUB1: 1) = SPACE\n               IF WS-SUB1 < 201\n                   DISPLAY '---> No match to relation group code - '\n                           'group in C/N record ' WS-SUB1 ' is '\n                           WS-GRP-SW\n                   MOVE 'X'          TO WS-GRP-ERR(WS-SUB1: 1).\n\n      *---------------------------------------\n      *    see if field is prefixed and suffixed with X12 or\n      *    EDIFAC field delimiters or suffixed with EOR characters.\n      *    '*OLD STRING~' gets changed to '*NEW STRING~' but\n      *    'HOLD STRING~' does not.\n      *---------------------------------------\n       1400-CHECK-GROUP-CRITERIA.\n           MOVE SPACE                         TO WS-BEFORE-SW.\n           MOVE SPACE                         TO WS-AFTER-SW.\n           IF WS-SENDER = SPACE\n               PERFORM 1400-CHECK-FIELD-WRAPPED\n           ELSE\n           IF WS-SENDER = WS-UNSTR7\n               PERFORM 1400-CHECK-FIELD-WRAPPED.\n\n       1400-CHECK-FIELD-WRAPPED.\n           PERFORM 1400-TEST-BEFORE\n               VARYING WS-SUB4 FROM 1 BY 1\n               UNTIL WS-SUB4 > WS-SEP-MAX.\n           PERFORM 1400-TEST-AFTER\n               VARYING WS-SUB4 FROM 1 BY 1\n               UNTIL WS-SUB4 > WS-SEP-MAX.\n           IF WS-AFTER-SW = SPACE\n               PERFORM 1400-TEST-EOR-AFTER\n                   VARYING WS-SUB4 FROM 1 BY 1\n                   UNTIL WS-SUB4 > WS-EOR-MAX.\n\n       1400-TEST-BEFORE.\n           IF WS-SUB2 > 1\n             IF WS-HOLD-R1(WS-SUB2 - 1: 1) = WS-S1-SEP(WS-SUB4)\n                 MOVE WS-SEP-MAX              TO WS-SUB4\n                 MOVE 'Y'                     TO WS-BEFORE-SW.\n\n       1400-TEST-AFTER.\n           IF WS-SUB2 < WS-MAX-POS\n             IF WS-HOLD-R1(WS-SUB2 + WS-LEN-O: 1) = WS-S1-SEP(WS-SUB4)\n                 MOVE WS-SEP-MAX              TO WS-SUB4\n                 MOVE 'Y'                     TO WS-AFTER-SW.\n\n       1400-TEST-EOR-AFTER.\n           IF WS-SUB2 < WS-MAX-POS\n             IF WS-HOLD-R1(WS-SUB2 + WS-LEN-O: 1) = WS-EOR(WS-SUB4)\n                 MOVE WS-EOR-MAX              TO WS-SUB4\n                 MOVE 'Y'                     TO WS-AFTER-SW.\n\n      *---------------------------------------\n      *    start at end-of-record and work backwards until non-space\n      *    character found but only zap if non-space is EOR flag\n      *    to avoid truncating legitimate spaces within fields\n      *---------------------------------------\n       1500-CRUNCH-TRAIL-SPACES.\n           PERFORM 1500-CRUNCH\n               VARYING WS-SUB4 FROM WS-R2-LEN BY -1\n               UNTIL WS-SUB4 < 1.\n\n       1500-CRUNCH.\n           IF WS-HOLD-R2(WS-SUB4: 1) = SPACE\n               CONTINUE\n           ELSE\n           IF WS-SUB4 = WS-R2-LEN\n               MOVE ZERO                      TO WS-SUB4\n           ELSE\n               MOVE SPACE                     TO WS-EOR-SW\n               PERFORM 1500-TEST-EOR\n                   VARYING WS-SUB5 FROM 1 BY 1\n                   UNTIL WS-SUB5 > WS-EOR-MAX\n               IF WS-EOR-SW = 'Y'\n      *            DISPLAY '**** Record ' WS-READ-LONGREC-CNT\n      *                    ' zapped from ' WS-R2-LEN ' to ' WS-SUB4\n                   MOVE 'Y'                   TO WS-ZAP-OCCUR-SW\n                   MOVE WS-SUB4               TO WS-R2-LEN\n                   MOVE ZERO                  TO WS-SUB4\n               ELSE\n                   MOVE ZERO                  TO WS-SUB4.\n\n       1500-TEST-EOR.\n           IF WS-HOLD-R2(WS-SUB4: 1) = WS-EOR(WS-SUB5)\n               MOVE 'Y'                       TO WS-EOR-SW\n               MOVE WS-EOR-MAX                TO WS-SUB5.\n\n       2300-WRITE-LONGOUT.\n           WRITE LONGOUT-RECORD.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-WRITE-LONGOUT-CNT\n           ELSE\n               DISPLAY '**** XLT04650 write error on LONGOUT'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE 'Y'                       TO WS-END-LONGREC-SW\n               MOVE +2300                     TO WS-RETURN-CODE.\n\n      ************************************ END XLT04650\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "XLT04660": {"ttr": 21251, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x01\\x01\\x194\\x0f\\x01 \\x02\\x7f\\x14\\x08\\x05\"\\x03]\\x00\\x00\\xd4\\xc9\\xe2\\xf1\\xf4\\xf6@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2019-12-06T00:00:00", "modifydate": "2020-01-27T14:08:01", "lines": 1314, "newlines": 861, "modlines": 0, "user": "MIS146"}, "text": "\n       TITLE '  XLT04660: zap report pages with zero totals '.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    XLT04660.\n      **********************************************************CX003B\n      *@@@ C3 zap report pages with zero totals\n      ****************************************************************\n      *\n      *  I am interested in knowing if/where these programs\n      *  are in use.     Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * Date written: 12/06/2019\n      * Author      : Jim Iannone\n      *               skip printing report pages with zero totals\n      *\n      *   this program assumes carriage control characters exist\n      *   in column 1.  loop through a printed report.\n      *   for specified pages, check 'totals' field to see if totals\n      *   on the report are zeros (or blanks).  if so, all pages\n      *   related to the search criteria can be supressed/skipped,\n      *   or just those pages with zero totals.\n      *\n      *   search criteria can be headers and values or just values:\n      *     example:  search for pages containing 'REPORT-ID: XLT04100A'\n      *               or for pages containing 'XLT04100A'\n      *\n      *   Program was written for 133 byte report files.\n      *   Recompiling for different record length report file?\n      *     along with changing '01' and 'FD' definitions, change\n      *     WS-RECORD-MAX value to be one more than record length.\n      *     column fields are defined as PIC 9(03) -\n      *     if expanding beyond 999 bytes wide then column field\n      *     lengths in program and parm will need expanding.\n      *\n      ****************************************************************\n      * Date changed: mm/dd/yyyy username\n      *               comments...\n      ****************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n           C01 IS PAGE-TOP.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT REPORTI              ASSIGN TO REPORTI\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT REPORTO              ASSIGN TO REPORTO\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT REPORTD              ASSIGN TO REPORTD\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT SORT-REPORTI         ASSIGN TO S-SORTWK01.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  REPORTI\n           RECORDING MODE F.\n       01  REPORTI-RECORD.\n           05  REPORTI-RCD             PIC  X(133).\n\n       FD  REPORTO\n           RECORDING MODE F.\n       01  REPORTO-RECORD.\n           05  REPORTO-RCD             PIC  X(133).\n\n       FD  REPORTD\n           RECORDING MODE F.\n       01  REPORTD-RECORD.\n           05  REPORTD-RCD             PIC  X(133).\n\n      * - --- --- -------------------- -- --------------------\n       FD  PARM01\n           RECORDING MODE F.\n       01  PARM01-RECORD.\n           05  PARM01-DOCU             PIC  X.\n           05  FILLER                  PIC  X.\n           05  PARM01-TYPE             PIC  X.\n           05  FILLER                  PIC  X.\n           05  PARM01-GROUP            PIC  X.\n           05  FILLER                  PIC  X.\n           05  PARM01-LINE             PIC  XXX.\n           05  FILLER                  PIC  X.\n           05  PARM01-REST             PIC  X(62).\n           05  PARM01-S-REST REDEFINES PARM01-REST.\n               10  PARM01-S-COL        PIC  XXX.\n               10  FILLER              PIC  X.\n               10  PARM01-S-HDR        PIC  X(20).\n               10  FILLER              PIC  X.\n               10  PARM01-S-GAP        PIC  XX.\n               10  FILLER              PIC  X.\n               10  PARM01-S-VAL        PIC  X(20).\n               10  FILLER              PIC  X(14).\n           05  PARM01-T-REST REDEFINES PARM01-REST.\n               10  PARM01-T-END        PIC  XXX.\n               10  FILLER              PIC  X.\n               10  PARM01-T-COL        PIC  XXX.\n               10  FILLER              PIC  X.\n               10  PARM01-TOTAL        PIC  X(20).\n               10  FILLER              PIC  X.\n               10  PARM01-T-LEN        PIC  XX.\n               10  FILLER              PIC  X.\n               10  PARM01-T-PGS        PIC  X.\n               10  FILLER              PIC  X.\n               10  PARM01-T-SUPP       PIC  X.\n               10  FILLER              PIC  X(27).\n           05  FILLER                  PIC  X(08).\n\n       SD  SORT-REPORTI.\n       01  SORT-RECORD.\n           05  SR-GROUP                PIC  X.\n           05  SR-FILL1                PIC  X.\n           05  SR-FIRST-PAGE           PIC  9(07).\n           05  SR-FILL2                PIC  X.\n           05  SR-LAST-PAGE            PIC  9(07).\n           05  SR-FILL3                PIC  X.\n           05  SR-PAGE                 PIC  9(07).\n           05  SR-FILL4                PIC  X.\n           05  SR-ALL-LAST             PIC  X.\n           05  SR-SUPP-I-G             PIC  X.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage XLT04660 start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-TALLY                PIC S9(05)    VALUE ZERO COMP.\n           05  WS-LS-DATA              PIC  X(10)    VALUE SPACE.\n           05  FILLER REDEFINES WS-LS-DATA.\n               10  WS-LS-TEST          PIC  X.\n               10  WS-LS-EXTRA         PIC  X(09).\n           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.\n           05  WS-HOLD-FIELD           PIC  X(50)    VALUE SPACE.\n           05  WS-TITLE                PIC  X(28)    VALUE SPACE.\n           05  WS-STARS                PIC  XX       VALUE SPACE.\n           05  WS-GROUP-SW             PIC  X        VALUE SPACE.\n           05  WS-READ-REPORTI-SW      PIC  X        VALUE SPACE.\n           05  WS-RETURN-SORT-SW       PIC  X        VALUE SPACE.\n           05  WS-SR-ALL-LAST          PIC  X        VALUE SPACE.\n           05  WS-SR-SUPP-I-G          PIC  X        VALUE SPACE.\n           05  WS-SR-GROUP             PIC  X        VALUE SPACE.\n           05  WS-KEEP-GROUP-SW        PIC  X        VALUE SPACE.\n           05  WS-SORT-FLIP-SW         PIC  X        VALUE SPACE.\n           05  WS-WRITE-OR-SKIP-SW     PIC  X        VALUE SPACE.\n           05  WS-PAGE                 PIC  9(07)    VALUE ZERO.\n           05  WS-HOLD-FIRST-PG        PIC  9(07)    VALUE ZERO.\n           05  WS-HOLD-LAST-PG         PIC  9(07)    VALUE ZERO.\n           05  WS-HOLD-PG              PIC  9(07)    VALUE ZERO.\n           05  WS-HIGH-SUB             PIC  9(05)    VALUE ZERO.\n           05  WS-PARM01-MAX           PIC  9(05)    VALUE ZERO.\n           05  WS-RPT-LINE             PIC  999      VALUE ZERO.\n           05  WS-HOLD-LEN             PIC  999      VALUE ZERO.\n           05  WS-HOLD-POS             PIC  999      VALUE ZERO.\n           05  WS-HDR-LEN              PIC  999      VALUE ZERO.\n           05  WS-VAL-LEN              PIC  999      VALUE ZERO.\n           05  WS-VAL-OFF              PIC  999      VALUE ZERO.\n           05  WS-END-HDR              PIC  999      VALUE ZERO.\n           05  WS-END-VAL              PIC  999      VALUE ZERO.\n           05  WS-HDR-POS              PIC  999      VALUE ZERO.\n           05  WS-VAL-POS              PIC  999      VALUE ZERO.\n           05  WS-T-LN                 PIC  999      VALUE ZERO.\n           05  WS-RECORD-MAX           PIC  999      VALUE ZERO.\n\n\n       01  WS-SWITCHES.\n           05  WS-END-REPORTI-SW       PIC  X        VALUE 'N'.\n               88  END-OF-REPORTI                    VALUE 'Y'.\n               88  MORE-REPORTI-RCDS                 VALUE 'N'.\n           05  WS-END-SORT-SW          PIC  X        VALUE 'N'.\n               88  END-OF-SORT                       VALUE 'Y'.\n               88  MORE-SORT-RCDS                    VALUE 'N'.\n           05  WS-FIRST-RCD-SW         PIC  X        VALUE 'Y'.\n               88  FIRST-RECORD                      VALUE 'Y'.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-REPORTI-CNT     PIC S9(07)    VALUE ZERO.\n           05  WS-SORT-RCD-CNT         PIC S9(07)    VALUE ZERO.\n           05  WS-WRITE-REPORTO-CNT    PIC S9(07)    VALUE ZERO.\n           05  WS-SKIP-PAGE-CNT        PIC S9(07)    VALUE ZERO.\n           05  WS-SKIP-LINE-CNT        PIC S9(07)    VALUE ZERO.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(07)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(07)    VALUE ZERO.\n           05  WS-SUB3                 PIC S9(07)    VALUE ZERO.\n           05  WS-STR1                 PIC S9(07)    VALUE ZERO.\n           05  WS-STR2                 PIC S9(07)    VALUE ZERO.\n\n       01  WS-TABLES.\n           05  WS-PARM01-ITEM          OCCURS 40 TIMES.\n               10  WS-TYPE             PIC  X.\n               10  WS-GROUP            PIC  X.\n               10  WS-LINE             PIC  999.\n               10  WS-END-LINE         PIC  999.\n               10  WS-COLUMN           PIC  999.\n               10  WS-HEADER           PIC  X(20).\n               10  WS-GAP              PIC  99.\n               10  WS-VALUE            PIC  X(20).\n               10  WS-SUB              PIC  9(05).\n               10  WS-PAGE-GROUPS      OCCURS 100 TIMES.\n                   15  WS-FIRST-PG     PIC  9(07).\n                   15  WS-LAST-PG      PIC  9(07).\n               10  WS-ALL-LAST         PIC  X.\n               10  WS-SUPP-I-G         PIC  X.\n               10  WS-MATCH            PIC  X.\n               10  WS-AUDIT            PIC  X.\n               10  WS-T-LINES          PIC  X(40).\n\n       01  WS-TEMP-TABLE-FIELDS.\n           05  WS-TMP-TYPE             PIC  X        VALUE SPACE.\n           05  WS-TMP-GROUP            PIC  X        VALUE SPACE.\n           05  WS-TMP-LINE             PIC  999      VALUE ZERO.\n           05  WS-TMP-END-LINE         PIC  999      VALUE ZERO.\n           05  WS-TMP-COLUMN           PIC  999      VALUE ZERO.\n           05  WS-TMP-HEADER           PIC  X(20)    VALUE SPACE.\n           05  WS-TMP-GAP              PIC  99       VALUE ZERO.\n           05  WS-TMP-VALUE            PIC  X(20)    VALUE SPACE.\n           05  WS-TMP-ALL-LAST         PIC  X        VALUE SPACE.\n           05  WS-TMP-SUPP-I-G         PIC  X        VALUE SPACE.\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  XLT04660 END  '.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELD.\n           05  LS-LENGTH               PIC S9(04)    COMP.\n           05  LS-DATA                 PIC  X(10).\n           05  FILLER REDEFINES LS-DATA.\n               10  LS-TEST             PIC  X.\n               10  LS-EXTRA            PIC  X(09).\n\n      /\n\n       PROCEDURE DIVISION USING LS-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           MOVE +0000                         TO WS-RETURN-CODE.\n           MOVE 134                           TO WS-RECORD-MAX.\n           DISPLAY '    '.\n           DISPLAY '**** XLT04660 zap report pages with zero totals'.\n           PERFORM 0200-OPEN-INPUT-REPORTI.\n           PERFORM 0200-OPEN-FILES.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-REPORTI.\n\n           DISPLAY '                         '.\n           DISPLAY '**** Parm entries        ' WS-PARM01-MAX ' of 40'.\n           DISPLAY '**** Records in REPORTI  ' WS-READ-REPORTI-CNT.\n           DISPLAY '**** Records sorted      ' WS-SORT-RCD-CNT.\n           DISPLAY '**** Pages skipped       ' WS-SKIP-PAGE-CNT.\n           DISPLAY '**** Lines skipped       ' WS-SKIP-LINE-CNT.\n           DISPLAY '**** REPORTO written     ' WS-WRITE-REPORTO-CNT.\n           DISPLAY '**** Highest group       ' WS-HIGH-SUB   ' of 100'.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** XLT04660 cond code ' WS-RETURN-CODE\n                       ' set by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** XLT04660 EOJ encountered '.\n           DISPLAY '    '.\n           STOP RUN.\n\n       0200-OPEN-INPUT-REPORTI.\n           OPEN INPUT  REPORTI.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** XLT04660 open error on REPORTI'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       0200-OPEN-FILES.\n           OPEN INPUT PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** XLT04660 open error on PARM01'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN OUTPUT REPORTO.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** XLT04660 open error on REPORTO'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN OUTPUT REPORTD.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** XLT04660 open error on REPORTD'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-REPORTI.\n           CLOSE REPORTI.\n\n       0300-CLOSE-FILES.\n           CLOSE REPORTD.\n           CLOSE REPORTO.\n           CLOSE PARM01.\n\n      *---------------------------------------\n      *    X\n      *---------------------------------------\n       0400-PROCESS-REPORTI.\n\n           PERFORM 0500-GET-LINKAGE.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0600-GET-PARM-CYMD.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0700-INIT-PARM-TABLE\n               MOVE ZERO                      TO WS-SUB1\n               PERFORM 0700-LOAD-PARM01 THRU\n                       0700-LOAD-PARM01-EXIT.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0800-AUDIT-PARM-TABLE.\n\n           IF WS-RETURN-CODE = ZERO\n               MOVE 'N'                       TO WS-SORT-FLIP-SW\n               PERFORM 0900-SORT-PARM-TABLE\n                   UNTIL WS-SORT-FLIP-SW = SPACE.\n\n           IF WS-RETURN-CODE = ZERO\n               SORT SORT-REPORTI\n                   ON ASCENDING KEY  SR-FIRST-PAGE\n                                     SR-PAGE\n                   INPUT PROCEDURE IS 1000-SORT-IN\n                   OUTPUT PROCEDURE IS 2000-SORT-OUT.\n\n       0500-GET-LINKAGE.\n           IF LS-LENGTH = ZERO\n               DISPLAY '**** Parm length is zero '\n               MOVE +0500                     TO WS-RETURN-CODE\n           ELSE\n           IF LS-LENGTH > LENGTH OF WS-LS-DATA\n               DISPLAY '**** Parm length is excessive '\n               MOVE +0500                     TO WS-RETURN-CODE\n           ELSE\n               MOVE LS-DATA(1: LS-LENGTH)     TO WS-LS-DATA.\n\n           IF WS-LS-TEST NOT = SPACE\n               DISPLAY '**** Test switch set to  ' WS-LS-TEST.\n           DISPLAY '                         '.\n\n       0600-GET-PARM-CYMD.\n           MOVE FUNCTION CURRENT-DATE(1: 8)   TO WS-1-CYMD.\n\n       0700-INIT-PARM-TABLE.\n           PERFORM VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > 40\n               MOVE SPACE                     TO WS-TYPE(WS-SUB1)\n               MOVE SPACE                     TO WS-GROUP(WS-SUB1)\n               MOVE SPACE                     TO WS-HEADER(WS-SUB1)\n               MOVE SPACE                     TO WS-VALUE(WS-SUB1)\n               MOVE SPACE                     TO WS-ALL-LAST(WS-SUB1)\n               MOVE SPACE                     TO WS-SUPP-I-G(WS-SUB1)\n               MOVE SPACE                     TO WS-MATCH(WS-SUB1)\n               MOVE SPACE                     TO WS-AUDIT(WS-SUB1)\n               MOVE SPACE                     TO WS-T-LINES(WS-SUB1)\n               MOVE ZERO                      TO WS-LINE(WS-SUB1)\n               MOVE ZERO                      TO WS-END-LINE(WS-SUB1)\n               MOVE ZERO                      TO WS-COLUMN(WS-SUB1)\n               MOVE ZERO                      TO WS-GAP(WS-SUB1)\n               MOVE ZERO                      TO WS-SUB(WS-SUB1)\n               PERFORM VARYING WS-STR2 FROM 1 BY 1\n                   UNTIL WS-STR2 > 100\n                   MOVE ZERO           TO WS-FIRST-PG(WS-SUB1, WS-STR2)\n                   MOVE ZERO           TO WS-LAST-PG(WS-SUB1, WS-STR2)\n               END-PERFORM\n           END-PERFORM.\n\n      *---------------------------------------\n      *    load XXX...\n      *---------------------------------------\n       0700-LOAD-PARM01.\n           READ PARM01.\n           IF WS-STAT = 10\n               MOVE WS-SUB1                   TO WS-PARM01-MAX\n               GO TO 0700-LOAD-PARM01-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** XLT04660 read error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0700                     TO WS-RETURN-CODE\n               GO TO 0700-LOAD-PARM01-EXIT.\n\n           IF PARM01-DOCU = '*'\n               GO TO 0700-LOAD-PARM01.\n\n           IF WS-SUB1 < 40\n               ADD 1                          TO WS-SUB1\n               PERFORM 0700-PARM01-FIELDS.\n\n           GO TO 0700-LOAD-PARM01.\n\n       0700-LOAD-PARM01-EXIT. EXIT.\n\n       0700-PARM01-FIELDS.\n           IF PARM01-LINE NUMERIC\n               MOVE PARM01-LINE               TO WS-LINE(WS-SUB1)\n           ELSE\n               DISPLAY '**** XLT04660 PARM01 line not numeric'\n               MOVE +0700                     TO WS-RETURN-CODE.\n           MOVE PARM01-GROUP                  TO WS-GROUP(WS-SUB1).\n           IF PARM01-TYPE = 'S'\n               MOVE PARM01-TYPE               TO WS-TYPE(WS-SUB1)\n               PERFORM 0700-PARM01-S-FIELDS\n           ELSE\n           IF PARM01-TYPE = 'T'\n               MOVE PARM01-TYPE               TO WS-TYPE(WS-SUB1)\n               PERFORM 0700-PARM01-T-FIELDS\n           ELSE\n               DISPLAY '**** XLT04660 PARM01 type must be S or T'\n               MOVE +0702                     TO WS-RETURN-CODE.\n\n       0700-PARM01-S-FIELDS.\n           IF PARM01-S-COL NUMERIC\n               MOVE PARM01-S-COL              TO WS-COLUMN(WS-SUB1)\n           ELSE\n               DISPLAY '**** XLT04660 PARM01 column not numeric'\n               MOVE +0703                     TO WS-RETURN-CODE.\n           IF PARM01-S-HDR = SPACE\n             IF PARM01-S-COL NUMERIC\n               IF PARM01-S-COL = '000'\n                 IF PARM01-S-VAL = SPACE\n                     DISPLAY '**** XLT04660 PARM01 if column 000 then '\n                             'header or value required'\n                     MOVE +0704               TO WS-RETURN-CODE\n                 ELSE\n                     CONTINUE\n               ELSE\n                   CONTINUE\n             ELSE\n                 CONTINUE\n           ELSE\n               MOVE PARM01-S-HDR              TO WS-HEADER(WS-SUB1).\n           IF PARM01-S-GAP NUMERIC\n               MOVE PARM01-S-GAP              TO WS-GAP(WS-SUB1)\n           ELSE\n               DISPLAY '**** XLT04660 PARM01 gap not numeric'\n               MOVE +0705                     TO WS-RETURN-CODE.\n           IF PARM01-S-VAL = SPACE\n               DISPLAY '**** XLT04660 PARM01 value is blank'\n               MOVE +0706                     TO WS-RETURN-CODE\n           ELSE\n               MOVE PARM01-S-VAL              TO WS-VALUE(WS-SUB1).\n\n       0700-PARM01-T-FIELDS.\n           IF PARM01-T-END NUMERIC\n               MOVE PARM01-T-END              TO WS-END-LINE(WS-SUB1)\n           ELSE\n               DISPLAY '**** XLT04660 PARM01 end line not numeric'\n               MOVE +0707                     TO WS-RETURN-CODE.\n           IF WS-END-LINE(WS-SUB1) > ZERO\n               MOVE ZERO                      TO WS-T-LN\n               COMPUTE WS-T-LN = WS-END-LINE(WS-SUB1)\n                               - WS-LINE(WS-SUB1) + 1\n               IF WS-T-LN > 40\n                   DISPLAY '**** XLT04660 PARM01 totals end line more '\n                           'than 40 lines after start line'\n                   MOVE +0708                 TO WS-RETURN-CODE.\n           IF PARM01-T-COL NUMERIC\n               MOVE PARM01-T-COL              TO WS-COLUMN(WS-SUB1)\n               IF WS-COLUMN(WS-SUB1) = ZERO\n                   DISPLAY '**** XLT04660 PARM01 column must not '\n                           'be zero'\n                   MOVE +0709                 TO WS-RETURN-CODE\n               ELSE\n                   CONTINUE\n           ELSE\n               DISPLAY '**** XLT04660 PARM01 column not numeric'\n               MOVE +0710                     TO WS-RETURN-CODE.\n           IF PARM01-TOTAL = SPACE OR 'BLANK'\n               MOVE SPACE                     TO WS-HEADER(WS-SUB1)\n           ELSE\n               MOVE PARM01-TOTAL              TO WS-HEADER(WS-SUB1).\n           IF PARM01-T-LEN NUMERIC\n               MOVE PARM01-T-LEN              TO WS-GAP(WS-SUB1)\n           ELSE\n               DISPLAY '**** XLT04660 PARM01 length not numeric'\n               MOVE +0711                     TO WS-RETURN-CODE.\n           IF WS-HEADER(WS-SUB1) = SPACE\n             IF WS-GAP(WS-SUB1) = ZERO\n                 DISPLAY '**** XLT04660 PARM01 if total field is blank'\n                         ' then must specify a length'\n                 MOVE +0712                   TO WS-RETURN-CODE.\n           IF PARM01-T-PGS = SPACE\n               MOVE 'L'                       TO WS-ALL-LAST(WS-SUB1)\n           ELSE\n           IF PARM01-T-PGS = 'A' OR 'L'\n               MOVE PARM01-T-PGS              TO WS-ALL-LAST(WS-SUB1)\n           ELSE\n               DISPLAY '**** XLT04660 PARM01 all/last flag should '\n                       'be A or L'\n               MOVE +0713                     TO WS-RETURN-CODE.\n           IF PARM01-T-SUPP = SPACE\n               MOVE 'G'                       TO WS-SUPP-I-G(WS-SUB1)\n           ELSE\n           IF PARM01-T-SUPP = 'I'\n             IF WS-ALL-LAST(WS-SUB1) = 'L'\n                 MOVE 'G'                     TO WS-SUPP-I-G(WS-SUB1)\n                 DISPLAY '**** XLT04660 PARM01 suppress individual/'\n                         'group changed to \"G\" '\n                 DISPLAY '****                 since all/last is \"L\" '\n             ELSE\n                 MOVE PARM01-T-SUPP           TO WS-SUPP-I-G(WS-SUB1)\n           ELSE\n           IF PARM01-T-SUPP = 'G'\n               MOVE PARM01-T-SUPP             TO WS-SUPP-I-G(WS-SUB1)\n           ELSE\n               DISPLAY '**** XLT04660 PARM01 print individual/'\n                       'group should be I or G'\n               MOVE +0714                     TO WS-RETURN-CODE.\n\n      *---------------------------------------\n\n       0800-AUDIT-PARM-TABLE.\n           PERFORM 0800-AUDIT-PARM-TOP-LOOP\n               VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > WS-PARM01-MAX.\n           PERFORM 0800-ANNOUNCE-GROUP-NOMATCH\n               VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > WS-PARM01-MAX.\n\n       0800-AUDIT-PARM-TOP-LOOP.\n           PERFORM 0800-AUDIT-PARM-BOT-LOOP\n               VARYING WS-SUB2 FROM 1 BY 1\n               UNTIL WS-SUB2 > WS-PARM01-MAX.\n\n      *---------------------------------------\n      *    loop through the parm table and try to match-up\n      *    'S' and 'T' records for the same group, and generate\n      *    errors for unmatched records.\n      *    also generate errors for more than one 'T' record with\n      *    the same group code.\n      *---------------------------------------\n       0800-AUDIT-PARM-BOT-LOOP.\n           IF WS-SUB1 NOT = WS-SUB2\n             IF WS-TYPE(WS-SUB1) = 'T'\n               IF WS-TYPE(WS-SUB2) = 'T'\n                 IF WS-GROUP(WS-SUB1) = WS-GROUP(WS-SUB2)\n                     MOVE 'X'                 TO WS-AUDIT(WS-SUB2).\n           IF WS-TYPE(WS-SUB1) = 'S'\n             IF WS-TYPE(WS-SUB2) = 'T'\n               IF WS-GROUP(WS-SUB1) = WS-GROUP(WS-SUB2)\n                   MOVE 'Y'                   TO WS-AUDIT(WS-SUB1)\n                   IF WS-AUDIT(WS-SUB2) NOT = 'X'\n                       MOVE 'Y'               TO WS-AUDIT(WS-SUB2).\n\n       0800-ANNOUNCE-GROUP-NOMATCH.\n           IF WS-AUDIT(WS-SUB1) = SPACE\n               DISPLAY '**** XLT04660 PARM01 has unmatched '\n                       'group S and T records  ' WS-SUB1\n               MOVE +0800                     TO WS-RETURN-CODE.\n           IF WS-AUDIT(WS-SUB1) = 'X'\n               DISPLAY '**** XLT04660 PARM01 has duplicate T '\n                       'records  ' WS-SUB1\n               MOVE +0800                     TO WS-RETURN-CODE.\n\n      *---------------------------------------\n      *    in the parm file for this program, records are specified\n      *    as:   type    group\n      *          ----    -----\n      *          S       A\n      *          S       A\n      *          S       B\n      *          T       A\n      *          T       B\n      *\n      *    for logic in 1200-ROLLUP-MATCHES-IN-TABLE,\n      *    we want them sorted by group and then by type:\n      *          S       A\n      *          S       A\n      *          T       A\n      *          S       B\n      *          T       B\n      *---------------------------------------\n       0900-SORT-PARM-TABLE.\n           MOVE SPACE                         TO WS-SORT-FLIP-SW.\n           PERFORM 0900-FLIP-SORT\n               VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > WS-PARM01-MAX - 1.\n\n       0900-FLIP-SORT.\n           IF WS-GROUP(WS-SUB1) > WS-GROUP(WS-SUB1 + 1)\n               PERFORM 0900-FLIP\n           ELSE\n           IF WS-GROUP(WS-SUB1) = WS-GROUP(WS-SUB1 + 1)\n             IF WS-TYPE(WS-SUB1) > WS-TYPE(WS-SUB1 + 1)\n                 PERFORM 0900-FLIP.\n\n       0900-FLIP.\n           MOVE WS-TYPE(WS-SUB1 + 1)        TO WS-TMP-TYPE.\n           MOVE WS-GROUP(WS-SUB1 + 1)       TO WS-TMP-GROUP.\n           MOVE WS-LINE(WS-SUB1 + 1)        TO WS-TMP-LINE.\n           MOVE WS-END-LINE(WS-SUB1 + 1)    TO WS-TMP-END-LINE.\n           MOVE WS-COLUMN(WS-SUB1 + 1)      TO WS-TMP-COLUMN.\n           MOVE WS-HEADER(WS-SUB1 + 1)      TO WS-TMP-HEADER.\n           MOVE WS-GAP(WS-SUB1 + 1)         TO WS-TMP-GAP.\n           MOVE WS-VALUE(WS-SUB1 + 1)       TO WS-TMP-VALUE.\n           MOVE WS-ALL-LAST(WS-SUB1 + 1)    TO WS-TMP-ALL-LAST.\n           MOVE WS-SUPP-I-G(WS-SUB1 + 1)    TO WS-TMP-SUPP-I-G.\n\n           MOVE WS-TYPE(WS-SUB1)            TO WS-TYPE(WS-SUB1 + 1).\n           MOVE WS-GROUP(WS-SUB1)           TO WS-GROUP(WS-SUB1 + 1).\n           MOVE WS-LINE(WS-SUB1)            TO WS-LINE(WS-SUB1 + 1).\n           MOVE WS-END-LINE(WS-SUB1)        TO WS-END-LINE(WS-SUB1 + 1).\n           MOVE WS-COLUMN(WS-SUB1)          TO WS-COLUMN(WS-SUB1 + 1).\n           MOVE WS-HEADER(WS-SUB1)          TO WS-HEADER(WS-SUB1 + 1).\n           MOVE WS-GAP(WS-SUB1)             TO WS-GAP(WS-SUB1 + 1).\n           MOVE WS-VALUE(WS-SUB1)           TO WS-VALUE(WS-SUB1 + 1).\n           MOVE WS-ALL-LAST(WS-SUB1)        TO WS-ALL-LAST(WS-SUB1 + 1).\n           MOVE WS-SUPP-I-G(WS-SUB1)        TO WS-SUPP-I-G(WS-SUB1 + 1).\n\n           MOVE WS-TMP-TYPE                 TO WS-TYPE(WS-SUB1).\n           MOVE WS-TMP-GROUP                TO WS-GROUP(WS-SUB1).\n           MOVE WS-TMP-LINE                 TO WS-LINE(WS-SUB1).\n           MOVE WS-TMP-END-LINE             TO WS-END-LINE(WS-SUB1).\n           MOVE WS-TMP-COLUMN               TO WS-COLUMN(WS-SUB1).\n           MOVE WS-TMP-HEADER               TO WS-HEADER(WS-SUB1).\n           MOVE WS-TMP-GAP                  TO WS-GAP(WS-SUB1).\n           MOVE WS-TMP-VALUE                TO WS-VALUE(WS-SUB1).\n           MOVE WS-TMP-ALL-LAST             TO WS-ALL-LAST(WS-SUB1).\n           MOVE WS-TMP-SUPP-I-G             TO WS-SUPP-I-G(WS-SUB1).\n\n           MOVE 'Y'                         TO WS-SORT-FLIP-SW.\n\n      *---------------------------------------\n      *    first loop through input report file\n      *\n      *    find header fields and values from PARM01\n      *---------------------------------------\n       1000-SORT-IN.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 1000-REPORTI-FIRST-LOOP\n                   UNTIL END-OF-REPORTI\n               MOVE ZERO                      TO WS-RPT-LINE\n               MOVE 'Y'                       TO WS-GROUP-SW\n               PERFORM 1200-ROLLUP-MATCHES-IN-TABLE\n                   VARYING WS-SUB1 FROM 1 BY 1\n                   UNTIL WS-SUB1 > WS-PARM01-MAX.\n\n           IF WS-LS-TEST NUMERIC\n               DISPLAY '                '\n               PERFORM 1400-SHOW-TABLE\n                   VARYING WS-SUB1 FROM 1 BY 1\n                   UNTIL WS-SUB1 > WS-PARM01-MAX.\n\n      *---------------------------------------\n      *    second loop through input report file\n      *\n      *    for pages found above, determine if totals are zeroes\n      *    or blanks\n      *---------------------------------------\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                      TO WS-READ-REPORTI-CNT\n               MOVE 'N'                       TO WS-END-REPORTI-SW\n               MOVE 'Y'                       TO WS-FIRST-RCD-SW\n               MOVE ZERO                      TO WS-PAGE\n               PERFORM 0300-CLOSE-REPORTI\n               PERFORM 0200-OPEN-INPUT-REPORTI\n               IF WS-RETURN-CODE = ZERO\n                   PERFORM 1600-REPORTI-SECOND-LOOP\n                       UNTIL END-OF-REPORTI\n                   MOVE ZERO                  TO WS-RPT-LINE\n                   MOVE ZERO                  TO WS-T-LN\n                   PERFORM 1900-ROLLUP-TOTALS-IN-TABLE\n                       VARYING WS-SUB1 FROM 1 BY 1\n                       UNTIL WS-SUB1 > WS-PARM01-MAX\n                   DISPLAY '                '.\n\n      *---------------------------------------\n      *    first loop through input report file\n      *---------------------------------------\n       1000-REPORTI-FIRST-LOOP.\n           PERFORM 1100-READ-REPORTI.\n           IF MORE-REPORTI-RCDS\n               PERFORM 1200-SELECT-FIRST THRU\n                       1200-SELECT-FIRST-EXIT.\n\n       1100-READ-REPORTI.\n           READ REPORTI.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-REPORTI-CNT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-REPORTI-SW\n           ELSE\n               DISPLAY '**** XLT04660 read error on REPORTI '\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +1100                     TO WS-RETURN-CODE.\n\n       1200-SELECT-FIRST.\n           IF REPORTI-RCD(1: 1) = '1'\n             IF FIRST-RECORD\n                 MOVE 'N'                     TO WS-FIRST-RCD-SW\n                 MOVE ZERO                    TO WS-RPT-LINE\n                 ADD 1                        TO WS-PAGE\n             ELSE\n                 MOVE ZERO                    TO WS-RPT-LINE\n                 MOVE 'Y'                     TO WS-GROUP-SW\n                 PERFORM 1200-ROLLUP-MATCHES-IN-TABLE\n                     VARYING WS-SUB1 FROM 1 BY 1\n                     UNTIL WS-SUB1 > WS-PARM01-MAX\n                 ADD 1                        TO WS-PAGE.\n\n           ADD 1                              TO WS-RPT-LINE.\n           PERFORM 1200-SEARCH-FOR-HEADERS\n               VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > WS-PARM01-MAX.\n\n       1200-SELECT-FIRST-EXIT. EXIT.\n\n      *---------------------------------------\n      *    in table, if all \"S\" records were found then store\n      *    that fact in the \"T\" record along with the first and\n      *    last page where the \"S\" records were found\n      *---------------------------------------\n       1200-ROLLUP-MATCHES-IN-TABLE.\n           IF WS-TYPE(WS-SUB1) = 'S'\n             IF WS-MATCH(WS-SUB1) = 'Y'\n                 MOVE SPACE                   TO WS-MATCH(WS-SUB1)\n             ELSE\n                 MOVE SPACE                   TO WS-MATCH(WS-SUB1)\n                 MOVE 'N'                     TO WS-GROUP-SW\n           ELSE\n           IF WS-TYPE(WS-SUB1) = 'T'\n             IF WS-GROUP-SW = 'Y'\n                 MOVE 'Y'                     TO WS-MATCH(WS-SUB1)\n                 MOVE WS-SUB(WS-SUB1)         TO WS-STR2\n                 IF WS-STR2 = ZERO\n                     ADD 1                    TO WS-STR2\n                     MOVE WS-PAGE      TO WS-FIRST-PG(WS-SUB1, WS-STR2)\n                     MOVE WS-PAGE      TO WS-LAST-PG(WS-SUB1, WS-STR2)\n                     MOVE WS-STR2      TO WS-SUB(WS-SUB1)\n                 ELSE\n                 IF WS-PAGE = WS-LAST-PG(WS-SUB1, WS-STR2) + 1\n                     MOVE WS-PAGE      TO WS-LAST-PG(WS-SUB1, WS-STR2)\n                 ELSE\n                 IF WS-STR2 < 100\n                     ADD 1                    TO WS-STR2\n                     MOVE WS-PAGE      TO WS-FIRST-PG(WS-SUB1, WS-STR2)\n                     MOVE WS-PAGE      TO WS-LAST-PG(WS-SUB1, WS-STR2)\n                     MOVE WS-STR2      TO WS-SUB(WS-SUB1)\n                 ELSE\n                     DISPLAY '**** XLT04660 internal table of 100 '\n                     DISPLAY 'search groups exceeded.  treating last '\n                     DISPLAY 'group as global which will encompass all'\n                     DISPLAY 'remaining groups.                       '\n                     MOVE WS-PAGE      TO WS-LAST-PG(WS-SUB1, WS-STR2)\n             ELSE\n                 MOVE 'Y'                     TO WS-GROUP-SW.\n\n       1200-SEARCH-FOR-HEADERS.\n           IF WS-TYPE(WS-SUB1) = 'S'\n               PERFORM 1200-INIT-HEADER-WORK-FIELDS\n               PERFORM 1200-HEADER-SEARCH.\n\n       1200-INIT-HEADER-WORK-FIELDS.\n           MOVE ZERO                          TO WS-END-HDR.\n           MOVE ZERO                          TO WS-END-VAL.\n           MOVE ZERO                          TO WS-HDR-LEN.\n           MOVE ZERO                          TO WS-VAL-LEN.\n           MOVE ZERO                          TO WS-VAL-OFF.\n\n           IF WS-HEADER(WS-SUB1) = SPACE\n               MOVE ZERO                      TO WS-HDR-LEN\n           ELSE\n               MOVE WS-HEADER(WS-SUB1)        TO WS-HOLD-FIELD\n               PERFORM 1900-DETERMINE-FIELD-LEN\n               MOVE WS-HOLD-LEN               TO WS-HDR-LEN.\n           IF WS-VALUE(WS-SUB1) = SPACE\n               MOVE ZERO                      TO WS-VAL-LEN\n           ELSE\n               MOVE WS-VALUE(WS-SUB1)         TO WS-HOLD-FIELD\n               PERFORM 1900-DETERMINE-FIELD-LEN\n               MOVE WS-HOLD-LEN               TO WS-VAL-LEN.\n           COMPUTE WS-VAL-OFF = WS-HDR-LEN + WS-GAP(WS-SUB1).\n           COMPUTE WS-END-HDR = WS-RECORD-MAX - WS-HDR-LEN.\n           COMPUTE WS-END-VAL = WS-RECORD-MAX - WS-VAL-LEN.\n\n       1200-HEADER-SEARCH.\n           IF WS-RPT-LINE = WS-LINE(WS-SUB1)\n             IF WS-COLUMN(WS-SUB1) = ZERO\n               IF WS-HEADER(WS-SUB1) = SPACE\n                   MOVE ZERO                  TO WS-VAL-POS\n                   MOVE 'Value search; header blank' TO WS-TITLE\n                   MOVE '**'                  TO WS-STARS\n                   PERFORM 1300-FIND-VALUE\n                       VARYING WS-SUB2 FROM 1 BY 1\n                       UNTIL WS-SUB2 > WS-END-VAL\n                   IF WS-VAL-POS = ZERO\n                       CONTINUE\n                   ELSE\n                       MOVE 'Y'               TO WS-MATCH(WS-SUB1)\n               ELSE\n                   MOVE ZERO                  TO WS-HDR-POS\n                   MOVE 'Header search'       TO WS-TITLE\n                   MOVE '**'                  TO WS-STARS\n                   PERFORM 1300-FIND-HEADER\n                       VARYING WS-SUB2 FROM 1 BY 1\n                       UNTIL WS-SUB2 > WS-END-HDR\n                   IF WS-HDR-POS = ZERO\n                       CONTINUE\n                   ELSE\n                       MOVE WS-HDR-POS        TO WS-SUB2\n                       ADD WS-VAL-OFF         TO WS-SUB2\n                       MOVE ZERO              TO WS-VAL-POS\n                       MOVE 'Value'           TO WS-TITLE\n                       MOVE SPACE             TO WS-STARS\n                       PERFORM 1300-FIND-VALUE\n                       IF WS-VAL-POS = ZERO\n                           CONTINUE\n                       ELSE\n                           MOVE 'Y'           TO WS-MATCH(WS-SUB1)\n             ELSE\n             IF WS-HEADER(WS-SUB1) = SPACE\n                 MOVE WS-COLUMN(WS-SUB1)      TO WS-SUB2\n                 MOVE ZERO                    TO WS-VAL-POS\n                 MOVE SPACE                   TO WS-TITLE\n                 MOVE '**'                    TO WS-STARS\n                 STRING 'Value '              DELIMITED BY SIZE\n                        WS-COLUMN(WS-SUB1)    DELIMITED BY SIZE\n                        '; header blank'      DELIMITED BY SIZE\n                        INTO WS-TITLE\n                 PERFORM 1300-FIND-VALUE\n                 IF WS-VAL-POS = ZERO\n                     CONTINUE\n                 ELSE\n                     MOVE 'Y'                 TO WS-MATCH(WS-SUB1)\n             ELSE\n                 MOVE WS-COLUMN(WS-SUB1)      TO WS-SUB2\n                 MOVE ZERO                    TO WS-HDR-POS\n                 MOVE '**'                    TO WS-STARS\n                 MOVE SPACE                   TO WS-TITLE\n                 STRING 'Header '             DELIMITED BY SIZE\n                        WS-COLUMN(WS-SUB1)    DELIMITED BY SIZE\n                        INTO WS-TITLE\n                 PERFORM 1300-FIND-HEADER\n                 IF WS-HDR-POS = ZERO\n                     CONTINUE\n                 ELSE\n                     MOVE WS-HDR-POS          TO WS-SUB2\n                     ADD WS-VAL-OFF           TO WS-SUB2\n                     MOVE ZERO                TO WS-VAL-POS\n                     MOVE 'Value'             TO WS-TITLE\n                     MOVE SPACE               TO WS-STARS\n                     PERFORM 1300-FIND-VALUE\n                     IF WS-VAL-POS = ZERO\n                         CONTINUE\n                     ELSE\n                         MOVE 'Y'             TO WS-MATCH(WS-SUB1).\n\n       1300-FIND-HEADER.\n           IF REPORTI-RCD(WS-SUB2: WS-HDR-LEN)\n               = WS-HEADER(WS-SUB1)(1: WS-HDR-LEN)\n               MOVE WS-SUB2                   TO WS-HDR-POS\n               PERFORM 1400-SHOW-HDR\n               MOVE WS-END-HDR                TO WS-SUB2.\n\n       1300-FIND-VALUE.\n           IF REPORTI-RCD(WS-SUB2: WS-VAL-LEN)\n               = WS-VALUE(WS-SUB1)(1: WS-VAL-LEN)\n               MOVE WS-SUB2                   TO WS-VAL-POS\n               PERFORM 1400-SHOW-VAL\n               MOVE WS-END-VAL                TO WS-SUB2.\n\n\n       1400-SHOW-HDR.\n           IF WS-LS-TEST = '3'\n               DISPLAY WS-STARS ' Record  ' WS-READ-REPORTI-CNT\n                       '  ' WS-GROUP(WS-SUB1)\n                       '  ' WS-TITLE ' ' WS-HEADER(WS-SUB1)\n               DISPLAY '   Page    ' WS-PAGE\n                       '            Length     ' WS-HDR-LEN\n               DISPLAY '   Line    ' WS-LINE(WS-SUB1)\n                       '                Position   ' WS-HDR-POS.\n\n       1400-SHOW-VAL.\n           IF WS-LS-TEST = '3'\n               DISPLAY WS-STARS ' Record  ' WS-READ-REPORTI-CNT\n                       '  ' WS-GROUP(WS-SUB1)\n                       '  ' WS-TITLE ' ' WS-VALUE(WS-SUB1)\n               DISPLAY '   Page    ' WS-PAGE\n                       '            Length     ' WS-VAL-LEN\n               DISPLAY '   Line    ' WS-LINE(WS-SUB1)\n                       '                Position   ' WS-VAL-POS.\n\n       1400-SHOW-TABLE.\n           DISPLAY '** Type         ' WS-TYPE(WS-SUB1).\n           DISPLAY '**  Group       ' WS-GROUP(WS-SUB1).\n           DISPLAY '**   Line       ' WS-LINE(WS-SUB1).\n           DISPLAY '**   Column     ' WS-COLUMN(WS-SUB1).\n           DISPLAY '**   Header     ' WS-HEADER(WS-SUB1).\n           IF WS-TYPE(WS-SUB1) = 'T'\n               DISPLAY '**   Length     ' WS-GAP(WS-SUB1)\n           ELSE\n               DISPLAY '**   Gap        ' WS-GAP(WS-SUB1).\n           IF WS-LS-TEST = '3'\n               DISPLAY '**   Audit      ' WS-AUDIT(WS-SUB1).\n           DISPLAY '**   Value      ' WS-VALUE(WS-SUB1).\n           IF WS-TYPE(WS-SUB1) = 'T'\n             IF WS-LS-TEST = '1'\n                 DISPLAY '**   Sub groups ' WS-SUB(WS-SUB1).\n           IF WS-TYPE(WS-SUB1) = 'T'\n             IF WS-LS-TEST = '2' OR '3'\n                 DISPLAY '**     Page groups: '\n                 PERFORM 1400-SHOW-PAGE-GROUPS\n                     VARYING WS-STR2 FROM 1 BY 1\n                     UNTIL WS-STR2 > WS-SUB(WS-SUB1).\n           IF WS-MATCH(WS-SUB1) NOT = SPACE\n               DISPLAY '**   Match      ' WS-MATCH(WS-SUB1).\n           DISPLAY '                '.\n\n       1400-SHOW-PAGE-GROUPS.\n           DISPLAY '**          ' WS-STR2 '   First-pg  '\n                             WS-FIRST-PG(WS-SUB1, WS-STR2)\n                   '   Last-pg  '\n                             WS-LAST-PG(WS-SUB1, WS-STR2).\n\n      *---------------------------------------\n\n      *---------------------------------------\n      *    second loop through input report file\n      *---------------------------------------\n       1600-REPORTI-SECOND-LOOP.\n           PERFORM 1100-READ-REPORTI.\n           IF MORE-REPORTI-RCDS\n               PERFORM 1700-SELECT-SECOND THRU\n                       1700-SELECT-SECOND-EXIT\n               MOVE ZERO                      TO WS-HIGH-SUB\n               PERFORM 1900-FIND-HIGHEST-GROUP\n                   VARYING WS-SUB1 FROM 1 BY 1\n                   UNTIL WS-SUB1 > WS-PARM01-MAX.\n\n      *---------------------------------------\n      *\n      *    for all pages where headers/values were found (above),\n      *    process \"totals\" entries\n      *\n      *    - - --- --- --- -------------------- -- - -\n      *    T x 018 022 125    0.00              07 A I\n      *\n      *---------------------------------------\n       1700-SELECT-SECOND.\n           IF REPORTI-RCD(1: 1) = '1'\n             IF FIRST-RECORD\n                 MOVE 'N'                     TO WS-FIRST-RCD-SW\n                 MOVE ZERO                    TO WS-RPT-LINE\n                 MOVE ZERO                    TO WS-T-LN\n                 ADD 1                        TO WS-PAGE\n             ELSE\n                 MOVE ZERO                    TO WS-RPT-LINE\n                 MOVE ZERO                    TO WS-T-LN\n                 PERFORM 1900-ROLLUP-TOTALS-IN-TABLE\n                     VARYING WS-SUB1 FROM 1 BY 1\n                     UNTIL WS-SUB1 > WS-PARM01-MAX\n                 ADD 1                        TO WS-PAGE.\n\n           ADD 1                              TO WS-RPT-LINE.\n           PERFORM 1800-TOTALS-PAGE-MATCH\n               VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > WS-PARM01-MAX.\n\n       1700-SELECT-SECOND-EXIT. EXIT.\n\n       1800-TOTALS-PAGE-MATCH.\n           IF WS-TYPE(WS-SUB1) = 'T'\n             IF WS-MATCH(WS-SUB1) = 'Y'\n               IF WS-ALL-LAST(WS-SUB1) = 'L'\n                   PERFORM 1800-ROLLUP-L-GROUPS\n                       VARYING WS-STR2 FROM 1 BY 1\n                       UNTIL WS-STR2 > WS-SUB(WS-SUB1)\n               ELSE\n                   PERFORM 1800-ROLLUP-A-GROUPS\n                       VARYING WS-STR2 FROM 1 BY 1\n                       UNTIL WS-STR2 > WS-SUB(WS-SUB1).\n\n       1800-ROLLUP-L-GROUPS.\n           IF WS-PAGE = WS-LAST-PG(WS-SUB1, WS-STR2)\n               PERFORM 1800-TOTALS-LINE-MATCH.\n\n       1800-ROLLUP-A-GROUPS.\n           IF WS-PAGE < WS-FIRST-PG(WS-SUB1, WS-STR2)\n               CONTINUE\n           ELSE\n           IF WS-PAGE > WS-LAST-PG(WS-SUB1, WS-STR2)\n               CONTINUE\n           ELSE\n               PERFORM 1800-TOTALS-LINE-MATCH.\n\n       1800-TOTALS-LINE-MATCH.\n           IF WS-END-LINE(WS-SUB1) = ZERO\n             IF WS-RPT-LINE = WS-LINE(WS-SUB1)\n                 PERFORM 1800-TOTALS-WITHIN-LINES\n             ELSE\n                 CONTINUE\n           ELSE\n           IF WS-RPT-LINE < WS-LINE(WS-SUB1)\n               CONTINUE\n           ELSE\n           IF WS-RPT-LINE > WS-END-LINE(WS-SUB1)\n               CONTINUE\n           ELSE\n               PERFORM 1800-TOTALS-WITHIN-LINES.\n\n      *---------------------------------------\n      *    for all lines where totals are expected,\n      *    load WS-T-LINES with 'y' or 'n' and then inspect.\n      *    if any 'n' then non-zero totals were found on the page.\n      *---------------------------------------\n       1800-TOTALS-WITHIN-LINES.\n           ADD 1                              TO WS-T-LN.\n           IF WS-T-LN < 41\n               PERFORM 1800-INIT-TOTALS-WORK-FIELDS\n               MOVE WS-COLUMN(WS-SUB1)        TO WS-SUB2\n               MOVE ZERO                      TO WS-HDR-POS\n               MOVE 'Totals '                 TO WS-TITLE\n               MOVE '**'                      TO WS-STARS\n               IF WS-SUB2 > WS-END-HDR\n                   DISPLAY '**** XLT04660 skipping total search '\n                           'for line ' WS-LINE(WS-SUB1)\n                   DISPLAY '     column ' WS-SUB2 ' plus length '\n                           WS-HDR-LEN ' exceeds record length'\n               ELSE\n               IF WS-HEADER(WS-SUB1) = SPACE\n                 IF REPORTI-RCD(WS-SUB2: WS-HDR-LEN) = SPACE\n                     MOVE 'Y'   TO WS-T-LINES(WS-SUB1)(WS-T-LN: 1)\n                 ELSE\n                     MOVE 'N'   TO WS-T-LINES(WS-SUB1)(WS-T-LN: 1)\n               ELSE\n               IF REPORTI-RCD(WS-SUB2: WS-HDR-LEN) = SPACE\n                   MOVE SPACE   TO WS-T-LINES(WS-SUB1)(WS-T-LN: 1)\n               ELSE\n               IF REPORTI-RCD(WS-SUB2: WS-HDR-LEN)\n                   = WS-HEADER(WS-SUB1)(1: WS-HDR-LEN)\n                   MOVE WS-SUB2               TO WS-HDR-POS\n                   PERFORM 1800-SHOW-TOT\n                   MOVE 'Y'     TO WS-T-LINES(WS-SUB1)(WS-T-LN: 1)\n               ELSE\n                   MOVE 'N'     TO WS-T-LINES(WS-SUB1)(WS-T-LN: 1).\n\n       1800-INIT-TOTALS-WORK-FIELDS.\n           MOVE ZERO                          TO WS-END-HDR.\n           MOVE ZERO                          TO WS-HDR-LEN.\n\n           IF WS-HEADER(WS-SUB1) = SPACE\n               MOVE ZERO                      TO WS-HDR-LEN\n           ELSE\n               MOVE WS-HEADER(WS-SUB1)        TO WS-HOLD-FIELD\n               PERFORM 1900-DETERMINE-FIELD-LEN\n               MOVE WS-HOLD-LEN               TO WS-HDR-LEN.\n           IF WS-GAP(WS-SUB1) > ZERO\n               MOVE WS-GAP(WS-SUB1)           TO WS-HDR-LEN.\n           COMPUTE WS-END-HDR = WS-RECORD-MAX - WS-HDR-LEN.\n\n       1800-SHOW-TOT.\n           IF WS-LS-TEST = '3'\n               DISPLAY WS-STARS ' Record  ' WS-READ-REPORTI-CNT\n                       '  ' WS-GROUP(WS-SUB1)\n                       '  ' WS-TITLE ' ' WS-HEADER(WS-SUB1)\n               DISPLAY '   Page    ' WS-PAGE\n                       '            Length     ' WS-HDR-LEN\n               DISPLAY '   Line    ' WS-RPT-LINE\n                       '                Position   ' WS-HDR-POS.\n\n       1900-DETERMINE-FIELD-LEN.\n           PERFORM VARYING WS-STR1 FROM 50 BY -1\n               UNTIL WS-STR1 < 1\n               IF WS-HOLD-FIELD(WS-STR1: 1) = SPACE\n                   CONTINUE\n               ELSE\n                   MOVE WS-STR1               TO WS-HOLD-LEN\n                   MOVE ZERO                  TO WS-STR1\n               END-IF\n           END-PERFORM.\n\n       1900-ROLLUP-TOTALS-IN-TABLE.\n           IF WS-TYPE(WS-SUB1) = 'T'\n             IF WS-MATCH(WS-SUB1) = 'Y'\n               IF WS-ALL-LAST(WS-SUB1) = 'L'\n                   PERFORM 1900-ROLLUP-L-GROUPS\n                       VARYING WS-STR2 FROM 1 BY 1\n                       UNTIL WS-STR2 > WS-SUB(WS-SUB1)\n               ELSE\n                   PERFORM 1900-ROLLUP-A-GROUPS\n                       VARYING WS-STR2 FROM 1 BY 1\n                       UNTIL WS-STR2 > WS-SUB(WS-SUB1).\n\n       1900-ROLLUP-L-GROUPS.\n           IF WS-PAGE = WS-LAST-PG(WS-SUB1, WS-STR2)\n               PERFORM 1900-INSPECT-T-LINES.\n\n       1900-ROLLUP-A-GROUPS.\n           IF WS-PAGE < WS-FIRST-PG(WS-SUB1, WS-STR2)\n               CONTINUE\n           ELSE\n           IF WS-PAGE > WS-LAST-PG(WS-SUB1, WS-STR2)\n               CONTINUE\n           ELSE\n               PERFORM 1900-INSPECT-T-LINES.\n\n\n      *---------------------------------------\n      *    records submitted to sort reflect pages to skip, either\n      *    individual pages or the whole group.  however, we need to\n      *    let the return-sort section know when the combination\n      *    \"all pages\" and \"group\" is specified, since the first few\n      *    pages in a group might have zero totals but a later page\n      *    might not.\n      *\n      *    in the return-sort section, we need to know BEFORE processing\n      *    the first page of a group as to whether the whole group\n      *    should be supressed.  we do this by sending records with\n      *    SR-PAGE = zero.  these will sort above the other records.\n      *---------------------------------------\n       1900-INSPECT-T-LINES.\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-T-LINES(WS-SUB1) TALLYING WS-TALLY\n                FOR ALL 'N'.\n\n           IF WS-LS-TEST = '2' OR '3'\n               DISPLAY '   T array:         ' WS-GROUP(WS-SUB1)\n                       ' |' WS-T-LINES(WS-SUB1) '|'\n                       '  ' WS-PAGE.\n           MOVE SPACE                         TO WS-T-LINES(WS-SUB1).\n\n      *    tally=zero means all found totals on page were blank/zero\n           IF WS-TALLY = ZERO\n               MOVE WS-GROUP(WS-SUB1)         TO SR-GROUP\n               MOVE WS-FIRST-PG(WS-SUB1, WS-STR2) TO SR-FIRST-PAGE\n               MOVE WS-LAST-PG(WS-SUB1, WS-STR2)  TO SR-LAST-PAGE\n               MOVE WS-PAGE                   TO SR-PAGE\n               MOVE WS-ALL-LAST(WS-SUB1)      TO SR-ALL-LAST\n               MOVE WS-SUPP-I-G(WS-SUB1)      TO SR-SUPP-I-G\n               PERFORM 1900-SEND-TO-SORT\n           ELSE\n      *    tally not zero means some total on page was non-zero\n           IF WS-ALL-LAST(WS-SUB1) = 'A'\n             IF WS-SUPP-I-G(WS-SUB1) = 'G'\n                 MOVE WS-GROUP(WS-SUB1)       TO SR-GROUP\n                 MOVE WS-FIRST-PG(WS-SUB1, WS-STR2)  TO SR-FIRST-PAGE\n                 MOVE WS-LAST-PG(WS-SUB1, WS-STR2)   TO SR-LAST-PAGE\n                 MOVE ZERO                    TO SR-PAGE\n                 MOVE WS-ALL-LAST(WS-SUB1)    TO SR-ALL-LAST\n                 MOVE WS-SUPP-I-G(WS-SUB1)    TO SR-SUPP-I-G\n                 PERFORM 1900-SEND-TO-SORT.\n\n      *---------------------------------------\n      *    track highest repeat search group for informational purposes\n      *---------------------------------------\n       1900-FIND-HIGHEST-GROUP.\n           IF WS-SUB(WS-SUB1) > WS-HIGH-SUB\n               MOVE WS-SUB(WS-SUB1)           TO WS-HIGH-SUB.\n\n       1900-SEND-TO-SORT.\n           MOVE SPACE                         TO SR-FILL1 SR-FILL2.\n           MOVE SPACE                         TO SR-FILL3 SR-FILL4.\n           IF WS-LS-TEST = '3'\n               DISPLAY '   Pre sort:        ' SORT-RECORD.\n           RELEASE SORT-RECORD.\n\n      ****************************************\n      ****************************************\n      ****************************************\n\n      *---------------------------------------\n      *    third loop through input report file\n      *\n      *    based on return-sort records, determine if we should\n      *    skip all pages for a group, or individual pages.\n      *---------------------------------------\n       2000-SORT-OUT.\n           MOVE ZERO                          TO WS-READ-REPORTI-CNT.\n           MOVE 'N'                           TO WS-END-REPORTI-SW.\n           MOVE 'Y'                           TO WS-READ-REPORTI-SW.\n           MOVE 'Y'                           TO WS-RETURN-SORT-SW.\n           MOVE ZERO                          TO WS-PAGE.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-REPORTI\n               PERFORM 0200-OPEN-INPUT-REPORTI\n               IF WS-RETURN-CODE = ZERO\n                   PERFORM 2000-REPORTI-THIRD-LOOP THRU\n                           2000-REPORTI-THIRD-LOOP-EXIT\n                   DISPLAY '                '.\n\n       2000-REPORTI-THIRD-LOOP.\n           IF WS-READ-REPORTI-SW = 'Y'\n               PERFORM 1100-READ-REPORTI.\n           IF WS-RETURN-SORT-SW = 'Y'\n             IF MORE-SORT-RCDS\n                 PERFORM 2200-RETURN-SORT.\n\n           IF WS-READ-REPORTI-SW = 'Y'\n             IF REPORTI-RCD(1: 1) = '1'\n                 ADD 1                        TO WS-PAGE.\n\n           MOVE 'N'                           TO WS-READ-REPORTI-SW.\n           MOVE 'N'                           TO WS-RETURN-SORT-SW.\n           MOVE SPACE                         TO WS-WRITE-OR-SKIP-SW.\n\n           IF END-OF-REPORTI\n               GO TO 2000-REPORTI-THIRD-LOOP-EXIT.\n\n           IF REPORTI-RCD(1: 1) = '1'\n             IF WS-PAGE > WS-HOLD-LAST-PG\n               IF MORE-SORT-RCDS\n                   MOVE 'Y'                   TO WS-RETURN-SORT-SW\n                   MOVE SPACE                 TO WS-KEEP-GROUP-SW\n                   GO TO 2000-REPORTI-THIRD-LOOP.\n\n           IF WS-PAGE < WS-HOLD-FIRST-PG\n               MOVE 'W'                       TO WS-WRITE-OR-SKIP-SW\n           ELSE\n           IF WS-PAGE > WS-HOLD-LAST-PG\n               MOVE 'W'                       TO WS-WRITE-OR-SKIP-SW\n           ELSE\n           IF WS-SR-ALL-LAST = 'L'\n               CONTINUE\n           ELSE\n           IF WS-HOLD-PG = ZERO\n             IF MORE-SORT-RCDS\n                 MOVE 'Y'                     TO WS-KEEP-GROUP-SW\n                 MOVE 'Y'                     TO WS-RETURN-SORT-SW\n                 GO TO 2000-REPORTI-THIRD-LOOP\n             ELSE\n                 MOVE 'W'                     TO WS-WRITE-OR-SKIP-SW\n           ELSE\n           IF WS-KEEP-GROUP-SW = 'Y'\n               MOVE 'W'                       TO WS-WRITE-OR-SKIP-SW\n           ELSE\n           IF WS-SR-SUPP-I-G = 'I'\n             IF WS-PAGE < WS-HOLD-PG\n                 MOVE 'W'                     TO WS-WRITE-OR-SKIP-SW\n             ELSE\n             IF WS-PAGE > WS-HOLD-PG\n               IF MORE-SORT-RCDS\n                   MOVE 'Y'                   TO WS-RETURN-SORT-SW\n                   GO TO 2000-REPORTI-THIRD-LOOP\n               ELSE\n                   MOVE 'W'                   TO WS-WRITE-OR-SKIP-SW.\n\n           IF WS-WRITE-OR-SKIP-SW = 'W'\n               MOVE REPORTI-RCD               TO REPORTO-RCD\n               PERFORM 2400-WRITE-REPORTO\n           ELSE\n               MOVE REPORTI-RCD               TO REPORTD-RCD\n               PERFORM 2400-WRITE-REPORTD\n               IF REPORTI-RCD(1: 1) = '1'\n                   ADD 1                      TO WS-SKIP-PAGE-CNT.\n\n           MOVE 'Y'                           TO WS-READ-REPORTI-SW.\n           GO TO 2000-REPORTI-THIRD-LOOP.\n\n       2000-REPORTI-THIRD-LOOP-EXIT. EXIT.\n\n       2200-RETURN-SORT.\n           RETURN SORT-REPORTI\n               AT END\n                   MOVE 'Y'                   TO WS-END-SORT-SW.\n           IF MORE-SORT-RCDS\n               ADD 1                          TO WS-SORT-RCD-CNT\n               MOVE SR-GROUP                  TO WS-SR-GROUP\n               MOVE SR-FIRST-PAGE             TO WS-HOLD-FIRST-PG\n               MOVE SR-LAST-PAGE              TO WS-HOLD-LAST-PG\n               MOVE SR-PAGE                   TO WS-HOLD-PG\n               MOVE SR-ALL-LAST               TO WS-SR-ALL-LAST\n               MOVE SR-SUPP-I-G               TO WS-SR-SUPP-I-G\n               IF WS-LS-TEST NUMERIC\n                   DISPLAY '   Post sort:       ' SORT-RECORD.\n\n       2400-WRITE-REPORTO.\n           WRITE REPORTO-RECORD.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-WRITE-REPORTO-CNT\n           ELSE\n               DISPLAY '**** XLT04660 write error on REPORTO'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +2400                     TO WS-RETURN-CODE.\n\n       2400-WRITE-REPORTD.\n           WRITE REPORTD-RECORD.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-SKIP-LINE-CNT\n           ELSE\n               DISPLAY '**** XLT04660 write error on REPORTD'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +2400                     TO WS-RETURN-CODE.\n\n      ************************************ END XLT04660\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "X04650": {"ttr": 21764, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01 \\x00\\x00\\x01\\x19\\x18o\\x01\\x192?\\x11#\\x00+\\x00\\x13\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.32", "flags": 0, "createdate": "2019-07-05T00:00:00", "modifydate": "2019-11-19T11:23:00", "lines": 43, "newlines": 19, "modlines": 0, "user": "IANNONE"}, "text": "//useridL  JOB (5031,'test XLT04650 alter long record'),\n//             'test XLT04650',CLASS=x,TIME=10,MSGCLASS=x\n//*\n//JOBLIB   DD  DISP=SHR,DSN=userid.ISPF.OBJ                        *shr\n//*-------------------------------------------------\n//LAD01    PROC\n//*-------------------------------------------------\n//EX010    EXEC PGM=IEFBR14,REGION=5120K\n//SYSPRINT DD  SYSOUT=*\n//DD01     DD  DSN=userid.TEST.XLT04650.OUT,\n//             DISP=(MOD,DELETE,DELETE),\n//             UNIT=LOFDA,SPACE=(TRK,(1,20)),\n//             DSORG=PS,RECFM=VB,LRECL=32704,BLKSIZE=32708\n//*-------------------------------------------------\n//EX020    EXEC PGM=IEBGENER,REGION=5120K\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DUMMY\n//SYSUT1   DD  DISP=SHR,DSN=userid.TEST.XLT04650.IN\n//SYSUT2   DD  DSN=&&INTEMP,\n//             DISP=(NEW,PASS,DELETE),\n//             UNIT=LOFDA,SPACE=(TRK,(1,20)),\n//             DSORG=PS,RECFM=VB,LRECL=32704,BLKSIZE=32708\n//*-------------------------------------------------\n//*  Alter long variable length records  lrecl 32704\n//*\n//*        zap trailing spaces\n//*        |\n//*  PARM='Y         /'\n//*-------------------------------------------------\n//S020     EXEC PGM=XLT04650,REGION=5120K,\n//             PARM='          /'\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSOUT   DD  SYSOUT=*\n//PARM01   DD  DISP=SHR,DSN=userid.ISPF.FILE488(X04650P)           *in\n//LONGREC  DD  DSN=&&INTEMP,DISP=(MOD,DELETE,DELETE)               *in\n//LONGOUT  DD  DSN=userid.TEST.XLT04650.OUT,                       *upd\n//             DISP=(NEW,CATLG,DELETE),\n//             SPACE=(TRK,(5,10),RLSE),UNIT=LOFDA,\n//             DSORG=PS,RECFM=VB,LRECL=32704,BLKSIZE=32708\n//*-------------------------------------------------\n//         PEND\n//J010     EXEC LAD01\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "X04650P": {"ttr": 21766, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01#\\x00\\x19\\x01\\x19\\x18o\\x01 \\x04/\\x10\\x18\\x00@\\x00\\x0c\\x00\\x00\\xd4\\xc9\\xe2\\xf1\\xf4\\xf6@@@@'", "ispf": {"version": "01.35", "flags": 0, "createdate": "2019-07-05T00:00:00", "modifydate": "2020-02-11T10:18:19", "lines": 64, "newlines": 12, "modlines": 0, "user": "MIS146"}, "text": "*\n*  XLT04650   Alter lrecl 32700 records\n*\n*             Enter up to 200 replacement strings\n*             Enter up to 50 relation groups\n*             Enter up to 20 end-of-record characters\n*             Enter up to 20 separator characters\n*\n*\n* C = change record\n* N = change record without SYSOUT display\n* E = end-of-record character\n* S = X12 or EDIFAC separator\n* R = relate C/N records with further criteria\n* |\n* |                                relation grouping code, any character\n* |                                                                    |\n* | original string to find        original length                     |\n* | |                              01-30                               |\n* | |                              |                        new length |\n* | |                              |  replacement string,        00-30 |\n* | |                              |  |  can be spaces               | |\n* | |                              |  |                              | |\n* - ----+----1----+----2----+----- -- ----+----1----+----2----+----- --\n  C TRANS-CANADA HWY               16 TRANS CANADA HWY               16\n  C DONALD DUCK BLVD               16 MICKEY MOUSE BLVD              17\n  C PCL                            03 950                            03G\n  N $                              01 ~                              01\n*\n*\n*   end-of-record character (HX on line to view) :\n*   |  XLT04650 only zaps trailing spaces when EOR is the rightmost\n*   |  non-blank character on the line\n*   |\n* - -\n  E x     --> end-of-record characters here would normally be in\n*             hex but are removed since the conversion to the CBT\n*             tape may alter them.   there are eight:\n*             tilde X'A1'  carrat X'B0'  X'0D'          X'1C'\n*             X'15'        X'22'         at-sign X'7C'  quote X'7D'\n*\n*\n*\n*   RELATION GROUPS only invoked if matched to group code above\n*\n*   grouping code from C/N record above\n*   |\n*   | Y=string wrapped in seperators: only make change if the string\n*   | |  is preceded with a separator and is suffixed with a separator\n*   | |  or EOR character. '*PCL~' becomes '*950~', '4PCLA' not changed\n*   | |\n*   | | only alter items for EDI with this sender ID\n*   | | |\n* - - - ---------------\n  R G Y 112474563\n*\n*\n*   X12 or EDIFAC separator (HX on line to view) :\n*   |  if the \"Y=string wrapped in seperators\" flag is set above,\n*   |  specify the X12 and EDIFAC separators here\n*   |\n* - -\n  S *\n*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "X04660": {"ttr": 21768, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x006\\x01\\x194?\\x01\\x195?\\x11Q\\x00-\\x00\\x18\\x00\\x00\\xd4\\xc9\\xe2\\xf1\\xf4\\xf6@@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2019-12-09T00:00:00", "modifydate": "2019-12-19T11:51:36", "lines": 45, "newlines": 24, "modlines": 0, "user": "MIS146"}, "text": "//useridL  JOB (5031,'test XLT04660 report page selection'),\n//             'test XLT04660',CLASS=x,TIME=10,MSGCLASS=x\n//*\n//JOBLIB   DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//*-------------------------------------------------\n//RPT01    PROC\n//*-------------------------------------------------\n//S010     EXEC PGM=IEFBR14,REGION=5120K\n//SYSPRINT DD  SYSOUT=*\n//DD01     DD  DSN=userid.PRINTED.REPORT.KEEP,                     *del\n//             DISP=(MOD,DELETE,DELETE),\n//             SPACE=(TRK,(1,1)),UNIT=SYSDA,\n//             DSORG=PS,LRECL=133,RECFM=FBA\n//DD02     DD  DSN=userid.PRINTED.REPORT.DEL,                      *del\n//             DISP=(MOD,DELETE,DELETE),\n//             SPACE=(TRK,(1,1)),UNIT=SYSDA,\n//             DSORG=PS,LRECL=133,RECFM=FBA\n//*-------------------------------------------------\n//*  XLT04660  Loop through report and discard pages if all / some\n//*            of the totals pages are zeroes or blanks\n//*\n//*            PARM='X         '\n//*                  |\n//*                  1=list basic test display messages\n//*                  2=list more detailed test display messages\n//*                  3=list all detailed test display messages\n//*-------------------------------------------------\n//S020     EXEC PGM=XLT04660,REGION=5120K,\n//             PARM='&TST.         /'\n//SYSPRINT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSOUT   DD  SYSOUT=*\n//PARM01   DD  DISP=SHR,DSN=userid.ISPF.FILE488(X04660P)           *shr\n//REPORTI  DD  DISP=SHR,DSN=userid.PRINTED.REPORT.IN               *shr\n//REPORTO  DD  DSN=userid.PRINTED.REPORT.KEEP,                     *new\n//             DISP=(NEW,CATLG,DELETE),\n//             SPACE=(TRK,(40,10),RLSE),UNIT=SYSDA,\n//             DSORG=PS,LRECL=133,RECFM=FBA\n//REPORTD  DD  DSN=userid.PRINTED.REPORT.DEL,                      *new\n//             DISP=(NEW,CATLG,DELETE),\n//             SPACE=(TRK,(40,10),RLSE),UNIT=SYSDA,\n//             DSORG=PS,LRECL=133,RECFM=FBA\n//*-------------------------------------------------\n//         PEND\n//J010     EXEC RPT01,TST=1\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "X04660D": {"ttr": 21770, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00@\\x01\\x195\\x7f\\x01\\x195\\x7f\\x13G\\x00H\\x00C\\x00\\x00\\xd4\\xc9\\xe2\\xf1\\xf4\\xf6@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2019-12-23T00:00:00", "modifydate": "2019-12-23T13:47:40", "lines": 72, "newlines": 67, "modlines": 0, "user": "MIS146"}, "text": "\n    Notes for XLT04660\n\n    XLT04660 was written to supress printing total pages\n      if all the totals are zeroes or blank.  It will supress all\n      pages for a given department even if the totals only occur\n      on the last page.\n\n    XLT04660 loops through a report file three times:\n      1)  determine pages that match search criteria\n      2)  inspect up to 40 lines of totals and submit a sort\n          record if all totals are zero or blank\n      3)  compare sort records to report file and keep or zap\n          pages accordingly\n\n    XLT04660 finds \"groups\" of header/value search fields.\n    The program finds a \"first\" page and a \"last\" page\n    for whatever search criteria are specified.\n    It will generate up to 100 individual groups for a given set\n    of search criteria when the criteria change and then\n    change back.  Once the 100th set is reached then it only\n    tracks the last page - intervening changes are considered\n    part of the group.\n\n    For example, if looping through a report searching for\n    \"Department: 450\" then this example shows how it bundles\n    the groups:\n\n    Department: 450    page 1      group     1\n    Department: 600    page 2\n    Department: 700    page 3\n    Department: 450    page 4      group     2\n    Department: 450    page 5      group     2\n    Department: 600    page 6\n    Department: 450    page 7      group     3\n    Department: 600    page 8\n    Department: 450    page 9      group     4\n    .\n    .\n    Department: 450    page 122    group    99\n    Department: 600    page 123\n    Department: 450    page 124    group   100\n    Department: 600    page 125    group   100\n    Department: 600    page 126    group   100\n    Department: 450    page 127    group   100\n\n    assuming there are 99 of these groupings prior to page 123,\n    then as of page 123 the first and last occurrance of the\n    search item constitue a group, even if other \"breaks\" in\n    the group exist.\n\n    group\n        1  first page   1   last page   1\n        2  first page   4   last page   5\n        3  first page   7   last page   7\n        4  first page   9   last page   9\n        .\n        .\n      100  first page 124   last page 127\n\n    Given that most reports list departments etc in sort order\n    then this should not be an issue.  If your search criteria\n    repeat in various locations within a single report and the\n    report is massive or you've concatenated multiple reports\n    within the REPORTI DD and there is no way to more uniquely\n    identify the groups then you will need a different tool\n    such as Monarch or a Cray supercomputer or a scissors\n    unless the report is perforated then you can pull the pages\n    apart unless there are multiple groups on a page then you may\n    still need the scissors or just fold the page and tear -\n    see \"FOG\" by Carl Hafner on CBT tape #357\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "X04660P": {"ttr": 21773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x012\\x00\\x11\\x01\\x194\\x0f\\x01\\x195?\\x14W\\x00_\\x00\\x0f\\x00\\x00\\xd4\\xc9\\xe2\\xf1\\xf4\\xf6@@@@'", "ispf": {"version": "01.50", "flags": 0, "createdate": "2019-12-06T00:00:00", "modifydate": "2019-12-19T14:57:11", "lines": 95, "newlines": 15, "modlines": 0, "user": "MIS146"}, "text": "*\n*  XLT04660 skip printing report pages for specific locations\n*           when totals on pages are blank/zeros\n*\n*  enter up to 40 lines\n*\n*\n*  !!    Note    totals lines \"T\" must be connected with\n*    header search lines \"S\" using a group character -\n*    basically any character that is unique for that group:\n*\n*      group character\n*      |\n*    S A    header search criteria group set 'A'\n*    S A    header search criteria group set 'A'\n*    S B    header search criteria group set 'B'\n*    T A    total search criteria group 'A'\n*    T B    total search criteria group 'B'\n*\n*----------------------------------------------------------\n*  HEADERS\n*----------------------------------------------------------\n*\n*  Search for a header and value combination:\n*     parm:      S 006 000 DESTINATION CODE:    01 23005\n*     report:    \"DESTINATION CODE: 23005\"\n*\n*  Skip the header and search just for the value:\n*     parm:      S 005 000                      01 88835\n*     report:    \"88835\"\n*\n*\n* S=search definiton\n* | group \"S\" and \"T\" records together with any character\n* | | report line required\n* | | |\n* | | |   report header/value column\n* | | |   000=search for header within specified line.\n* | | |   |   if header blank, search for value.\n* | | |   |                        gap between header and value\n* | | |   |                        |\n* | | |   |   header to find       |  value to find\n* | | |   |   |                    |  |\n* - - --- --- -------------------- -- --------------------\n  S A 001 002 REPORT-ID:           01 XLT04100A\n  S A 003 000 LOCATION:            01 935\n  S A 005 000 SOURCE:              01 F159B\n  S A 006 012 DESTINATION CODE:    01 AP20A\n  S B 001 002 REPORT-ID:           01 XLT04100B\n*\n*\n*\n*----------------------------------------------------------\n*  TOTALS\n*----------------------------------------------------------\n*\n*  For totals, we go directly to the total value, bypassing\n*    searching for headers such as \"TOTALS\" since they are often\n*    listed apart from those values.\n*\n*  When specifying the totals field, be sure to include leading spaces\n*    ie:    position 10 length 1 might be  ....+....+....+....+\n*                                              340000\n*    where a '0' appears in position 10 so the total is assumed to be\n*    zero when in fact it is '340000'.  This should instead be\n*    specified as:  position 5 length 6    ....+....+....+....+\n*    so the search finds '     0'                   0\n*\n*  Also note that the \"totals field\" search field can be any\n*    set of characters up to 20 bytes long.  The program will search\n*    for whatever characters are entered in this field.\n*\n*\n* T=totals definiton: must follow 'S' types\n* | group character matching header definition above\n* | | report line where totals start\n* | | |   report line where totals end, or '000' if only on one line\n* | | |   |   column containing totals\n* | | |   |   |\n* | | |   |   |   spaces or 'BLANK' means totals do not print on report\n* | | |   |   |   |  if zero, ie  defined as ZZZZZZ or 'BLANK WHEN ZERO'\n* | | |   |   |   |  otherwise this is the totals field as it appears\n* | | |   |   |   |  on the report when zero's\n* | | |   |   |   |  ie:       0\n* | | |   |   |   |         0.00       length of total field or '00'\n* | | |   |   |   |     0,000.00       |\n* | | |   |   |   |                    |  A=totals are on all found pgs\n* | | |   |   |   |                    |  L=totals are on last page\n* | | |   |   |   |                    |  | I=suppress individual pages\n* | | |   |   |   |                    |  | |  with zero totals\n* | | |   |   |   |                    |  | G=suppress the group only\n* | | |   |   |   |                    |  | |  if all totals are zero\n* - - --- --- --- -------------------- -- - -\n  T A 018 057 126                      07 A G\n  T B 010 047 040                      08 A I\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "X12FILE": {"ttr": 21776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x16\\x01\\x19\\x07/\\x01\\x19\\x07/\\x104\\x00\\x13\\x00\\x13\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-03-13T10:34:16", "lines": 19, "newlines": 19, "modlines": 0, "user": "IANNONE"}, "text": "ISA*00*          *00*          *ZZ*sender ID *01*receiver ID*190204*083\n0*U*00400*000046004*0*P*^~\nGS*SS*appl send code*appl receive code*20190204*0830*3464*X*004010~\nST*862*ZH3741132~\nBSS*05*ZH3741132*20190204*PD*20190204*20190218**ZH3741132***R~\nDTM*167*20190204*0817~\nN1*16*entity name*98*MAP~\nN2*additional name~\nPER*BD*PER contact name~\nN1*SU*entity name*92*21123456~\nN3*address~\nN4*city*state*postal*country~\nLIN**BP*part number*EC*service id*PD*service id~                        UIT*EA~\nFST*570*C*C*20190204~\nDTM*010*20190201~\nCTT*1*5610~\nSE*15*ZH3741132~\nGE*1*3464~\nIEA*1*000046004~\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "X12INPUT": {"ttr": 21778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x18\\x01\\x19\\x07/\\x01\\x19\\x07/\\x10\"\\x02\\xa1\\x02\\xa1\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-03-13T00:00:00", "modifydate": "2019-03-13T10:22:18", "lines": 673, "newlines": 673, "modlines": 0, "user": "IANNONE"}, "text": "*\n*  X12 elements for use by X12SHOW program\n*\n*  note:  X12SHOW table max entries is 800 - expand as needed\n*\n* element number\n* |\n* |     element code\n* |     |\n* |     |       element description (element code is blank)\n* |     |       |  or code description/meaning\n* |     |       |\n* |     |       |                            30=max desc length\n* |     |       |                            | 47=max code desc\n* |     |       |                            |                |\n* ----  ------  ---------+---------+---------H---------+------C\n  BPS1          Transaction set purpose\n  BPS1  PBC     PBC=pay by check\n  BPS1  WRT     WRT=wire transfer\n  BPS2          Transaction handling code\n  BPS2  I       I=remittance information only\n* Ixx segments are around  page 1558 in X12 standards book\n  I01           Authorization qualifier\n  I01   00      00=no authorization info present\n  I01   01      01=UCS communications ID\n  I03           Security information qual\n  I03   00      00=no security info present\n  I03   01      01=password\n  I05           Interchange ID qualifier\n  I05   ZZ      ZZ=mutually defined\n  I05   01      01=Duns: Dun & Bradstreet\n  I05   02      02=standard carrier alpha code\n  I05   09      09=X.121 (CCITT)\n  I05   16      16=Duns number with 4-char suffix\n  I10           Interchange control ident\n  I10   U       U=USA EDI community of ASC X12\n  I10   X       X=  unknown/new I10 value\n  I11           Interchange control version\n  I11   00200   00200=standard issued as ANSI X12.5-1987\n  I11   00204   00204=standard issued as ANSI X12.5-1989\n  I11   00300   00300=standard issued as ANSI X12.5-1992\n  I11   00303   00303=draft standard by ASC X12 board Oct 1992\n  I11   00306   00306=draft standard by ASC X12 board Oct 1995\n  I11   00400   00400=standard issued as ANSI X12.5-1997\n  I11   00401   00401=X12 procedures as of Oct 1997\n  I13           Acknowledgment requested\n  I13   0       0=no acknowledgment requested\n  I13   1       1=interchange ack requested\n  I14           Usage indicator\n  I14   I       I=information\n  I14   P       P=production data\n  I14   T       T=test data\n  I17           Interchange acknowledgment\n  I17   A       Interchange header/trailer received w/o errors\n  I17   E       Interchange header/trailer received w/ errors\n  I17   R       Interchange header/trailer rejected w/ errors\n  I18           Interchange note code\n  I18   000     No error\n  1005          Hierarchical structure\n  1005  0004    0004=shipment,order,item\n  102           Ownership code\n  102   S       S=customer owned or leased\n  103A          Packaging code pos 1x3\n  103A   RL      RL=unknown/new 103A value\n  103A  BLK     BLK=bulk\n  103A  CNT     CNT=container\n  103A  PCS     PCS=pieces\n  103A  PLT     PLT=pallet\n  103A  RCK     RCK=rack\n  103B          Packaging code pos 4x5\n  103B  71      71=not otherwise specified\n  103B  90      90=standard\n  1065          Entity type qualifier\n  1065  2       2=non-person entity\n  1065  4       4=corporation\n  107           Payment method code\n  107   C       C=pay by check\n  1073          Yes/no condition or response\n  1073  N       N=no\n  1073  U       U=unknown\n  1073  W       W=not applicable\n  1073  Y       Y=yes\n  110           Application acknowledgment cd\n  110   IA      IA=item accept\n  110   IE      IE=item accept with error\n  110   IR      IR=item reject\n  110   TA      TA=transaction set accept\n  110   TE      TE=transaction set accept with error\n  110   TR      TR=transaction set reject\n  1226          Repair action code\n  1226  MD      MD=modify\n  1227          Repair complexity code\n  128           Reference ID qualifier\n  128   AM      AM=adjustment memo (charge back)\n  128   AP      AP=accounts receivable number\n  128   AS      AS=acceptable source supplier ID\n  128   BE      BE=business activity\n  128   BL      BL=government bill of lading\n  128   BM      BM=bill of lading number\n  128   BT      BT=batch number\n  128   BY      BY=repair category number\n  128   CA      CA=cost allocation reference\n  128   CK      CK=check number\n  128   CM      CM=buyers credit memo\n  128   CN      CN=carriers reference number pro/invoice\n  128   CO      CO=customer order number\n  128   CR      CR=customer reference number\n  128   CU      CU=clear text clause\n  128   DK      DK=dock number\n  128   DL      DL=sellers debit memo\n  128   DO      DO=delivery order nbr\n  128   DP      DP=department number\n  128   DUN     DUN=D-U-N-S number Dun & Bradstreet\n  128   D9      D9=claim number\n  128   IK      IK=invoice number\n  128   IT      IT=internal customer number\n  128   IV      IV=sellers invoice number\n  128   IX      IX=item number\n  128   JS      JS=job sequence number\n  128   KB      KB=beginning kanban serial number\n  128   K6      K6=purchase description\n  128   LF      LF=assembly line feed location\n  128   LO      LO=load planning number\n  128   LS      LS=bar-coded serial number\n  128   LT      LT=lot number\n  128   LU      LU=location number\n  128   MA      MA=ship notice/manifest number\n  128   MJ      MJ=model number\n  128   MK      MK=manifest key number\n  128   MR      MR=merchandise type code\n  128   OI      OI=original invoice number\n  128   ON      ON=dealer order number\n  128   OR      OR=order/paragraph number\n  128   PE      PE=plant number\n  128   PG      PG=product group\n  128   PH      PH=priority rating\n  128   PK      PK=packing list nbr\n  128   PM      PM=part number\n  128   PO      PO=purchase order nbr\n  128   PP      PP=purchase order revision number\n  128   PRT     PRT=product type\n  128   P5      P5=position code\n  128   P8      P8=pickup reference number\n  128   QI      QI=quality inspection area identifier\n  128   Q7      Q7=receiver claim number\n  128   RE      RE=release number\n  128   RG      RG=route order number - domestic\n  128   RL      RL=reserve assembly line feed location\n  128   RU      RU=route number\n  128   RV      RV=receiving number\n  128   R2      R2=cancelled revision number\n  128   SB      SB=sales region number\n  128   SI      SI=shippers identifying number for shipment\n  128   SL      SL=sales/territory code\n  128   SN      SN=seal number\n  128   SQ      SQ=container sequence number\n  128   TN      TN=transaction reference number\n  128   UL      UL=cross-listed course number\n  128   UM      UM=one-sixteenth portion of section\n  128   VG      VG=vendor change procedure code\n  128   VN      VN=vendor order nbr\n  128   VR      VR=vendor ID nbr\n  128   WS      WS=warehouse storage location number\n  128   YB      YB=revision number\n  128   ZZ      ZZ=mutually defined\n  128   011     11=account number\n  128   2H      2H=assigned by transaction set sender\n  128   5M      5M=previous sequence\n  128   55      55=sequence number\n  128   6O      6O=cross reference number\n  128   88      88=work center\n  1300          SPAC code\n  1300  E190    E190=labor charges\n  1300  F155    F155=packaging\n  1300  I700    I700=escrow\n  1301          Agency SPAC code\n  133           Routing sequence code\n  133   B       B=origin/delivery carrier (any mode)\n  133   O       O=origin carrier: air, motor, or ocean\n  133   Z       Z=mutually defined\n  1373          Measurement method or device\n  143           Transaction set identifier\n  143   142     142=product service claim\n  143   810     810=invoice\n  143   820     820=payment order/remittance advice\n  143   824     824=application advice\n  143   830     830=planning schedule with release\n  143   832     832=price/sales catalog\n  143   846     846=inventory inquiry/advice\n  143   850     850=purchase order\n  143   856     856=ship notice/manifest\n  143   860     860=buyer initiated purch order change request\n  143   861     861=receiving advice/acceptance certificate\n  143   862     862=shipping schedule\n  143   864     864=text message\n  143   990     990=response to a load tender\n  143   997     997=functional acknowledgment\n  146           Shipment method of payment\n  146   CC      CC=collect\n  146   DE      DE=per contract\n  146   DF      DF=defined by buyer and seller\n  146   FO      FO=FOB port of call\n  146   PP      PP=prepaid (by seller)\n  150           Special charge or allowance\n  150   TAX     TAX=tax charge\n  187           Weight qualifier\n  187   B       B=billed weight\n  187   G       G=gross weight\n  187   N       N=actual net weight\n  187   T       T=tare weight\n  235           Product/Service qualifier\n  235   BA      BA=bale number\n  235   BC      BC=supplier brand code\n  235   BE      BE=buyers engineering change level nbr\n  235   BP      BP=buyer part number\n  235   CH      CH=country of origin code\n  235   CR      CR=contract number\n  235   DR      DR=drawing revision number\n  235   EC      EC=engineering change level\n  235   EM      EM=equipment identification number\n  235   ES      ES=engine serial number\n  235   IN      IN=buyers item number\n  235   JN      JN=job number\n  235   JS      JS=job sequence number\n  235   L1      L1=program level\n  235   MN      MN=model number\n  235   MT      MT=major product/material/machine type\n  235   ON      ON=customer order number\n  235   PC      PC=prime contractor part number\n  235   PD      PD=part number description\n  235   PF      PF=petroleum accountants canada exp code\n  235   PG      PG=packaging specification number\n  235   PL      PL=purchasers order line number\n  235   PN      PN=company part number\n  235   PO      PO=purchase order\n  235   PQ      PQ=product ID attribute code\n  235   PU      PU=part reference number\n  235   RC      RC=returnable container number\n  235   RN      RN=release number\n  235   RV      RV=repair tag number\n  235   RY      RY=record keeping or model year\n  235   SL      SL=sellers lot number\n  235   SN      SN=serial number\n  235   SV      SV=service rendered\n  235   TP      TP=product type code\n  235   VN      VN=vendor (sellers) item number\n  235   VP      VP=vendor (sellers) part number\n  235   VV      VV=motor vehicle ID number\n  235   ZZ      ZZ=mutually defined\n  236           Price identifier code\n  236   CAT     CAT=catalog price\n  248           Allowance or charge indicator\n  248   C       C=charge\n  305           Transaction handling code\n  305   C       C=payment accompanies remittance advice\n  305   I       I=remittance information only\n  305   X       X=handling party option to split paymnt/remit\n  306           Action code\n  306   CP      CP=counter proposal\n  309           Location qualifier\n  309   AC      AC=city and state\n  309   DE      DE=destination (shipping)\n  309   IP      IP=postal\n  309   IT      IT=intermediate FOB point\n  309   O       O=office address\n  309   OR      OR=origin (shipping point)\n  309   PD      PD=place of delivery\n  331           Charge handling method\n  331   06      06=charge to be paid by customer\n  333           Terms basis date code\n  333   OR      OR=  unknown/new 333 value\n  333   3       3=invoice date\n  334           Transportation terms qualifier\n  334   ZZ      ZZ=mutually defined\n  334   01      01=incoterms\n  334   02      02=trade terms code\n  335           Transportation terms code\n  335   CAF     CAF=cost and freight\n  335   CFR     CFR=cost and freight\n  335   CIF     CIF=cost, insurance, and freight\n  335   EXW     EXW=ex works - buyer bears costs of transport\n  335   FCA     FCA=free carrier\n  335   ZZZ     ZZZ=mutually defined\n  336           Terms type code\n  336   01      01=basic\n  336   09      09=proximo\n  336   14      14=previously agreed upon\n  349           Item/Description type\n  349   F       F=free form\n  349   S       S=structured\n  349   X       X=semi-structured\n  353           Transaction set purpose\n  353   00      00=original\n  353   01      01=cancellation\n  353   02      02=add\n  353   03      03=delete\n  353   04      04=change\n  353   05      05=replace\n  353   11      11=response\n  353   18      18=reissue\n  355           Unit of measurement\n  355   CC      CC=cubic centimeter\n  355   EA      EA=each\n  355   HR      HR=hours\n  355   KG      KG=kilogram\n  355   LH      LH=labor hours\n  355   LO      LO=lot\n  355   MO      MO=months\n  355   PC      PC=piece\n  355   PI      PI=pitch\n  355   01      01=actual pounds\n  355   05      05=lifts\n  363           Note reference code\n  363   ADD     ADD=additional information\n  363   DEL     DEL=delivery\n  363   GEN     GEN=entire transaction set\n  363   LIN     LIN=line item\n  363   PAY     PAY=payables\n  365           Communication nbr qualifier\n  365   FX      FX=facsimile\n  365   TE      TE=telephone\n  366           Contact function code\n  366   AP      AP=accounts payable department\n  366   BD      BD=buyer name or department\n  366   CN      CN=general contact\n  366   CR      CR=customer relations\n  366   EN      EN=engineer\n  366   EX      EX=expeditor\n  366   OC      OC=order contact\n  366   OD      OD=order department\n  366   SA      SA=sales administration\n  366   SC      SC=schedule contact\n  366   SR      SR=sales representitive or department\n  366   SU      SU=supplier contact\n  366   ZZ      ZZ=mutually defined\n  368           Shipment/order status code\n  368   CC      CC=shipment complete on (date)\n  374           Date/time qualifier\n  374   002     002=delivery requested\n  374   003     003=invoice\n  374   004     004=purchase order\n  374   006     006=sold\n  374   007     007=effective\n  374   009     009=process\n  374   010     010=requested ship\n  374   011     011=shipped\n  374   017     017=estimated delivery\n  374   020     020=check\n  374   035     035=delivered\n  374   036     036=expiration: date coverage expires\n  374   050     050=received\n  374   051     051=cumulative quantity start\n  374   052     052=cumulative quantity end\n  374   090     090=report start\n  374   091     091=report end\n  374   094     094=manufacture\n  374   095     095=bill of lading\n  374   097     097=transaction creation\n  374   102     102=issue\n  374   106     106=required by\n  374   137     137=delivery rating\n  374   146     146=closing date\n  374   152     152=effective date of change\n  374   158     158=test period ending\n  374   159     159=bid price exception\n  374   167     167=most recent revision\n  374   188     188=credit advice\n  374   193     193=period start\n  374   194     194=period end\n  374   195     195=contract re-open\n  374   214     214=date of repair/service\n  374   232     232=claim statement period start\n  374   310     310=closing dt: date property sold\n  374   405     405=production\n  374   636     636=date of last update\n  40            Equipment description code\n  40    TL      TL=trailer (not otherwise specified)\n  400           Unit load option code\n  400   10      10=shrink-wrap\n  407           Seal status code\n  407   01      01=intact\n  407   02      02=broken\n  407   03      03=missing\n  407   04      04=replaced\n  412           Receiving condition code\n  412   01      01=damaged product or container\n  412   02      02=quantity short\n  412   03      03=quantity over\n  412   07      07=good condition\n  412   08      08=rejected\n  412   14      14=quantity received with no matching ship notice\n  426           Adjustment reason code\n  426   E2      E2=covered by debit memo\n  426   NO      NO=  unknown/new 426 value\n  426   01      01=pricing error\n  426   06      06=quantity contested\n  426   24      24=incorrect discount\n  426   72      72=authorized return\n  455           Responsible agency code\n  455   X       X=accredited standards committee X12\n  478           Credit/debit flag code\n  478   C       C=credit\n  478   D       D=debit\n  479           Functional identifier code\n  479   AG      AG=application advice\n  479   FA      FA=functional acknowledgment\n  479   GF      GF=response to a load tender 990\n  479   IB      IB=inventory inquiry/advice 846\n  479   IN      IN=invoice information 810,819\n  479   PC      PC=purch order change req, buyer initiated 860\n  479   PO      PO=purchase order 850\n  479   PS      PS=planning schedule with release 830\n  479   RA      RA=payment order/remit advice 820\n  479   RC      RC=receiving advice/acceptance certificate 861\n  479   SC      SC=price/sales catalog 832\n  479   SH      SH=ship notice/manifest 856\n  479   SS      SS=shipping schedule 862\n  479   TX      TX=text message 864\n  479   WA      WA=product svc transaction sets 140,141,142,143\n  481           Trace type code\n  481   1       1=current transaction trace numbers\n  481   2       2=referenced transaction trace numbers\n  481   3       3=financial reassociation trace number\n  482           Payment action code\n  482   ER      ER=evaluated receipts settlement\n  482   NS      NS=not specified - payment type unknown\n  482   PI      PI=pay item\n  506           DFI ID number qualifier\n  506   01      01=ABA transit route nbr w/ check digits\n  522           Amount qualifier code\n  522   CC      CC=chargeback claim amount\n  522   TT      TT=total transaction amount\n  54            Risk of loss code\n  54    IR      IR=investor risk\n  54    LR      LR=lender risk\n  558           Reservation action code\n  558   A       A=reservation accepted\n  559           Agency qualifier code\n  559   AB      AB=assigned by buyer\n  559   ZZ      ZZ=mutually defined\n  559   45      45=ohio\n  560           Special services code\n  560   PP      PP=progress payment requirement\n  560   SH      SH=special handling service\n  560   ZZ      ZZ=mutually defined\n  569           Account number qualifier\n  569   DA      DA=demand deposit\n  587           Acknowledgment type\n  587   AC      AC=acknowledge with detail and change\n  587   NA      NA=no acknowledgment needed\n  591           Payment method code\n  591   ACH     ACH=automated clearing house\n  591   CHK     CHK=check\n  591   DCC     DCC=ACH demand cash concentration/disburse credit\n  591   DXC     DXC=ACH demand corporate trade exchange credit\n  591   NON     NON=non-payment data\n  591   ZZZ     ZZZ=mutually defined\n  623           Time code\n  623   CS      CS=central standard time\n  623   CT      CT=central time\n  623   ED      ED=eastern daylight time\n  623   ET      ET=eastern time\n  623   PT      PT=pacific time\n  639           Basis of unit price code\n  639   AA      AA=bill\n  639   CP      CP=current price (subject to change)\n  639   ES      ES=estimated\n  639   LR      LR=previous catalog price\n  639   NT      NT=net\n  639   PE      PE=price per each\n  639   QT      QT=quoted\n  639   TC      TC=contract price per hundred\n  639   TE      TE=contract price per each\n  640           Transaction type code\n  640   DI      DI=debit invoice\n  640   DR      DR=debit memo\n  640   03      03=report message intended as printout\n  640   60      60=material in transit\n  641           Status reason code\n  641   048     048=location changed\n  647           Application error cond cd\n  647   P       P=missing or invalid item quantity\n  647   ZZZ     ZZZ=mutually defined\n  647   012     012=invalid combination\n  647   238     238=  unknown/new 647 value\n  647   271     271=  unknown/new 647 value\n  647   390     390=  unknown/new 647 value\n  647   391     391=  unknown/new 647 value\n  66            Identification code qualifier\n  66    01      01=DUNS: Dun & Bradstreet\n  66    02      02=standard carrier alpha code (SCAC)\n  66    1       1=DUNS: Dun & Bradstreet\n  66    2       2=standard carrier alpha code (SCAC)\n  66    6       6=plant code\n  66    91      91=assigned by seller or sellers agent\n  66    92      92=assigned by buyer or buyers agent\n  66    98      98=purchasing office\n  662           Relationship code\n  662   A       A=add\n  662   D       D=delete\n  662   I       I=included\n  662   O       O=information only\n  668           Line item status code\n  668   IA      IA=item accepted\n  669           Currency market exchange code\n  669   IMF     IMF=international monetary fund\n  669   NYC     NYC=new york foreign exchange\n  670           Change or reason type code\n  670   CF      CF=cancel previously transmitted purchase order\n  670   CT      CT=change of dates\n  670   DI      DI=delete item(s)\n  670   RQ      RQ=reschedule/quantity change\n  672           Resource authorization code\n  672   FI      FI=finished (labor,material,overhead burden)\n  672   LB      LB=labor\n  672   LM      LM=labor and material\n  672   MT      MT=material\n  672   PQ      PQ=quantity req prior to first schedule period\n  673           Quantity qualifier\n  673   CS      CS=current service life\n  673   01      01=discrete quantity\n  673   02      02=cumulative quantity\n  673   38      38=original quantity\n  675           Schedule type qualifier\n  675   DL      DL=delivery based\n  675   KB      KB=kanban signal\n  675   PD      PD=planned delivery based\n  675   PR      PR=planned requirement based\n  675   SH      SH=shipment based\n  676           Schedule quantity qualifier\n  676   A       A=actual discrete quantities\n  676   C       C=cumulative quantities\n  676   D       D=net change quantities\n  676   R       R=replacement quantities\n  678           Ship/delivery or calendar cd\n  678   A       A=monday through friday\n  678   B       B=monday through saturday\n  678   D       D=monday\n  678   N       N=as directed\n  678   O       O=daily monday through friday\n  678   Y       Y=none\n  678   Z       Z=mutually defined\n  679           Ship/delivery pattern time cd\n  679   A       A=first shift (normal working hours)\n  679   F       F=as directed\n  679   G       G=any shift\n  679   Y       Y=none\n  679   Z       Z=mutually defined\n  680           Forecast qualifier\n  680   B       B=pilot/prevolume\n  680   C       C=firm\n  680   D       D=planning\n  680   Z       Z=mutually defined\n  681           Forecast timing\n  681   C       C=daily\n  681   D       D=discrete\n  681   F       F=flexible interval (date x to date y)\n  681   M       M=monthly bucket (calendar months)\n  681   W       W=weekly bucket (monday to sunday)\n  681   Z       Z=mutually defined\n  682           Part release status code\n  682   1       1=final model year non-carryover from supplier\n  682   4       4=carryover item from supplier\n  682   5       5=part is new item for subsequent model year\n  683           Catalog purpose code\n  683   PC      PC=price catalog\n  706           Entity relationship code\n  715           Functional group ack code\n  715   A       A=accepted\n  715   R       R=rejected\n  716           Functional group syntax error\n  716   1       1=functional group not supported\n  717           Transaction set ack code\n  717   A       A=accepted\n  717   E       E=accepted but errors were noted\n  717   R       R=rejected\n  717   W       W=rejected, assurance failed validity tests\n  718           Transaction set syntax error\n  718   5       5=one or more segments in error\n  732           Transit time direction qual\n  732   SH      SH=surface hours\n  735           Hierarchical level code\n  735   I       I=item\n  735   O       O=order\n  735   P       P=pack\n  735   S       S=shipment\n  735   T       T=shipping tare\n  736           Hierarchical child code\n  736   0       0=no subordinate HL segment\n  736   1       1=additional subordinate HL segment\n  737           Measurement reference ID\n  737   AA      AA=meter reading: begin/end actual\n  737   PD      PD=physical dimensions\n  737   WT      WT=weights\n  738           Measurement qualifier\n  738   G       G=gross weight\n  738   N       N=actual net weight\n  738   SQ      SQ=shipped quantity\n  738   U       U=weight per unit\n  738   WT      WT=weight\n  750           Product characteristic code\n  750   08      08=product\n  752           Surface/layer/position code\n  752   OT      OT=outside\n  753           Packaging characteristic\n  753   CB      CB=container type\n  753   CUD     CUD=cushioning and dunnage\n  753   35      35=type of package\n  755           Report type code\n  755   01      01=product transfer\n  783           Planning schedule type\n  783   PS      PS=purchaser to seller\n  812           Payment format code\n  812   CCD     CCD=cash concentration/disbursement\n  812   PBC     PBC=commercial/corporate check\n  812   PPD     PPD=prearranged payment and deposit\n  88            Marks and numbers qualifier\n  88    PB      PB=premarked by buyer\n  91            Transportation method\n  91    E       E=expedited truck\n  91    L       L=contract carrier\n  91    M       M=motor (common carrier)\n  92            Purchase order type code\n  92    BK      BK=blanket order (quantity firm)\n  92    BY      BY=buyer\n  92    CP      CP=change to purchase order\n  92    CR      CR=change to release\n  92    NE      NE=new order\n  92    RL      RL=release or delivery order\n  92    RO      RO=rush order\n  92    SA      SA=stand-alone order\n  935           Measurement significance\n  936           Measurement attribute code\n  955           Tax jurisdiction code qual\n  955   CD      CD=customer defined\n  955   VD      VD=vendor defined\n  955   VE      VE=vertex\n  962           Receiving advice/cert type cd\n  962   1       1=receiving dock advice\n  962   2       2=post receipt advice\n  963           Tax type code\n  963   GS      GS=goods and services tax\n  98            Entity identifier code\n  98    BT      BT=bill-to-party\n  98    BY      BY=buying party (purchaser)\n  98    CN      CN=consignee\n  98    DL      DL=dealer\n  98    FR      FR=message from\n  98    FW      FW=forwarder\n  98    HH      HH=home health agency\n  98    IA      IA=installed at\n  98    II      II=issuer of invoice\n  98    LI      LI=independent lab\n  98    MA      MA=party for whom item is ultimately intended\n  98    MI      MI=planning schedule/material release issuer\n  98    MP      MP=manufacturing plant\n  98    N4      N4=price administration\n  98    PE      PE=payee\n  98    PN      PN=party to receive shipping notice\n  98    PR      PR=payer\n  98    RI      RI=remit to\n  98    SE      SE=selling party\n  98    SF      SF=ship from\n  98    SI      SI=shipping schedule issuer\n  98    SO      SO=sold to if different from billed to\n  98    ST      ST=ship to\n  98    SU      SU=supplier/manufacturer\n  98    TO      TO=message to\n  98    VN      VN=vendor\n  98    WH      WH=warehouse\n  98    1C      1C=group purchasing organization (GPO)\n  98    16      16=plant\n* ----  ------  ---------+---------+---------H---------+------C\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "X12SHOW": {"ttr": 22273, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x009\\x01\\x181?\\x01\\x192/\\x14\\x11\\x18\\x00\\x01\\x02\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2018-11-09T00:00:00", "modifydate": "2019-11-18T14:11:39", "lines": 6144, "newlines": 258, "modlines": 0, "user": "IANNONE"}, "text": "\n       TITLE '  X12SHOW: explain X12 fields  '.\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID.    X12SHOW.\n      **********************************************************CX003B\n      *@@@ C3 explain x12 fields\n      ****************************************************************\n      *\n      *   I am interested in knowing if/where these programs\n      *   are used:       Email:  jiannon@me.com\n      *\n      ****************************************************************\n      * Date written: 11/09/2018\n      * Author      : Jim Iannone\n      *               loop through 80-byte X12 records and\n      *               generate field meanings\n      *\n      *               to find segment in this program, f !seg\n      *               ex:   f !ISA\n      *\n      *          NOTE when adding segments to this program:\n      *\n      *               in the logic for each segment,\n      *               mandatory elements are sent to the conversion\n      *               logic without checking if they are blank:\n      *\n      *               *    data element 717\n      *                    MOVE '717'\n      *                    MOVE WS-X12-02\n      *                    PERFORM 1300-EVALUATE-ELEMENT...\n      *\n      *               optional elements are checked for blanks:\n      *\n      *               *    data element 718\n      *                    IF WS-X12-03 NOT = SPACE\n      *                        MOVE '718'\n      *                        MOVE WS-X12-03\n      *                        PERFORM 1300-EVALUATE-ELEMENT...\n      *\n      ****************************************************************\n      * Date changed: mm/dd/yyyy username\n      *               comments...\n      ****************************************************************\n\n       ENVIRONMENT DIVISION.\n\n       CONFIGURATION SECTION.\n       SPECIAL-NAMES.\n           C01 IS PAGE-TOP.\n\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n           SELECT X12IN                ASSIGN TO X12IN\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT PARM01               ASSIGN TO PARM01\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n           SELECT X12OUT               ASSIGN TO X12OUT\n                                       ORGANIZATION IS SEQUENTIAL\n                                       ACCESS MODE IS SEQUENTIAL\n                                       FILE STATUS IS WS-STAT.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       FD  X12IN\n           RECORDING MODE F.\n       01  X12IN-RECORD.\n           05  X12IN-RCD               PIC  X(80).\n\n       FD  PARM01\n           RECORDING MODE F.\n       01  PARM01-RECORD.\n           05  PARM01-DOCU             PIC  X.\n           05  FILLER                  PIC  X.\n           05  PARM01-ELEMENT          PIC  X(04).\n           05  FILLER                  PIC  XX.\n           05  PARM01-CODE             PIC  X(06).\n           05  FILLER                  PIC  XX.\n           05  PARM01-DESC             PIC  X(50).\n           05  FILLER                  PIC  X(06).\n           05  FILLER                  PIC  X(08).\n\n       FD  X12OUT\n           RECORDING MODE F.\n       01  X12OUT-RECORD.\n           05  X12OUT-RCD              PIC  X(80).\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-START.\n           05  FILLER                  PIC  X(32)    VALUE\n               ' Working storage X12SHOW start '.\n\n       01  WS-WORK-FIELDS.\n           05  WS-STAT                 PIC  99       VALUE ZERO.\n           05  WS-VSAM.\n               10  WS-VSAM-RETURN      PIC S99       USAGE BINARY.\n               10  WS-VSAM-COMPONENT   PIC S9        USAGE BINARY.\n               10  WS-VSAM-REASON      PIC S999      USAGE BINARY.\n           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.\n           05  WS-TALLY                PIC S9(04)    VALUE ZERO COMP.\n           05  WS-START-LINE           PIC  9(07)    VALUE ZERO.\n           05  WS-PARM01-MAX           PIC  9(05)    VALUE ZERO.\n           05  WS-LS-DATA              PIC  X(15)    VALUE SPACE.\n           05  FILLER REDEFINES WS-LS-DATA.\n               10  WS-LS-LINE          PIC  X(07).\n               10  WS-LS-PLANT         PIC  X(08).\n           05  WS-X12-RCDS             PIC  X(400)   VALUE SPACE.\n           05  WS-X12-RCD              REDEFINES WS-X12-RCDS\n                                       OCCURS 5 TIMES\n                                       PIC  X(80).\n           05  WS-HOLD-SEGMENT         PIC  X(04)    VALUE SPACE.\n           05  WS-HOLD-TRAN            PIC  XXX      VALUE SPACE.\n           05  WS-HOLD-CODE            PIC  X(06)    VALUE SPACE.\n           05  WS-HOLD-1               PIC  X        VALUE SPACE.\n           05  WS-HOLD-2               PIC  XX       VALUE SPACE.\n           05  WS-HOLD-3               PIC  XXX      VALUE SPACE.\n           05  WS-HOLD-48              PIC  X(48)    VALUE SPACE.\n           05  WS-X12-SW               PIC  X        VALUE SPACE.\n           05  WS-X12-RESET-SW         PIC  X        VALUE SPACE.\n           05  WS-SHOW-CNT             PIC  ZZZZZZ9  VALUE ZERO.\n           05  WS-HL-CNT               PIC  9(05)    VALUE ZERO.\n           05  WS-IT1-CNT              PIC  9(05)    VALUE ZERO.\n           05  WS-LIN-CNT              PIC  9(05)    VALUE ZERO.\n           05  WS-POC-CNT              PIC  9(05)    VALUE ZERO.\n           05  WS-PO1-CNT              PIC  9(05)    VALUE ZERO.\n           05  WS-RCD-CNT              PIC  9(05)    VALUE ZERO.\n           05  WS-X12-FIELDS.\n               10  WS-X12-01           PIC  XXX.\n               10  WS-X12-02           PIC  X(80).\n               10  FILLER REDEFINES WS-X12-02.\n                   15  WS-X12-02-1     PIC  XXX.\n                   15  WS-X12-02-2     PIC  XX.\n                   15  WS-X12-02-3     PIC  X(75).\n               10  WS-X12-03           PIC  X(80).\n               10  WS-X12-04           PIC  X(80).\n               10  FILLER REDEFINES WS-X12-04.\n                   15  WS-X12-04-1     PIC  XXX.\n                   15  WS-X12-04-2     PIC  XX.\n                   15  WS-X12-04-3     PIC  X(75).\n               10  WS-X12-05           PIC  X(80).\n               10  FILLER REDEFINES WS-X12-05.\n                   15  WS-X12-05-1     PIC  XXX.\n                   15  WS-X12-05-2     PIC  XX.\n                   15  WS-X12-05-3     PIC  X(75).\n               10  WS-X12-06           PIC  X(80).\n               10  WS-X12-07           PIC  X(80).\n               10  WS-X12-08           PIC  X(80).\n               10  WS-X12-09           PIC  X(80).\n               10  WS-X12-10           PIC  X(80).\n               10  WS-X12-11           PIC  X(80).\n               10  WS-X12-12           PIC  X(80).\n               10  WS-X12-13           PIC  X(80).\n               10  WS-X12-14           PIC  X(80).\n               10  WS-X12-15           PIC  X(80).\n               10  WS-X12-16           PIC  X(80).\n               10  WS-X12-17           PIC  X(80).\n               10  WS-X12-18           PIC  X(80).\n               10  WS-X12-19           PIC  X(80).\n               10  WS-X12-20           PIC  X(80).\n               10  WS-X12-21           PIC  X(80).\n               10  WS-X12-22           PIC  X(80).\n               10  WS-X12-23           PIC  X(80).\n               10  WS-X12-24           PIC  X(80).\n               10  WS-X12-25           PIC  X(80).\n               10  WS-X12-26           PIC  X(80).\n               10  WS-X12-27           PIC  X(80).\n               10  WS-X12-28           PIC  X(80).\n               10  WS-X12-29           PIC  X(80).\n               10  WS-X12-30           PIC  X(80).\n               10  WS-X12-31           PIC  X(80).\n               10  WS-X12-32           PIC  X(80).\n           05  WS-EXPLAIN-FIELDS.\n               10  WS-GAP              PIC  XXX.\n               10  WS-HDR              PIC  X(30).\n               10  WS-VALUE            PIC  X(47).\n      *    DELIMITER\n           05  WS-SEG                  PIC  XXX      VALUE SPACE.\n           05  WS-DELIM                PIC  X        VALUE SPACE.\n           05  WS-COMPONENT-SEP        PIC  X        VALUE SPACE.\n           05  WS-EOR                  PIC  X        VALUE SPACE.\n           05  WS-EOR-ISA              PIC  X        VALUE SPACE.\n           05  WS-EOR-UNB              PIC  X        VALUE SPACE.\n           05  WS-X22                  PIC  X        VALUE X'22'.\n           05  WS-X0D                  PIC  X        VALUE X'0D'.\n\n       01  WS-COUNT-FIELDS             COMP-3.\n           05  WS-READ-X12IN-CNT       PIC S9(07)    VALUE ZERO.\n           05  WS-WRITE-X12OUT-CNT     PIC S9(07)    VALUE ZERO.\n           05  WS-EOR-RCD-CNT          PIC S9(07)    VALUE ZERO.\n           05  WS-ISA-CNT              PIC S9(07)    VALUE ZERO.\n           05  WS-UNB-CNT              PIC S9(07)    VALUE ZERO.\n           05  WS-ISSUE-CNT            PIC S9(07)    VALUE ZERO.\n           05  WS-QUESTION-CNT         PIC S9(07)    VALUE ZERO.\n           05  WS-SEGMENT-CNT          PIC S9(07)    VALUE ZERO.\n\n       01  WS-SUBSCRIPTS               COMP.\n           05  WS-SUB1                 PIC S9(04)    VALUE ZERO.\n           05  WS-SUB2                 PIC S9(04)    VALUE ZERO.\n           05  WS-SUB3                 PIC S9(04)    VALUE ZERO.\n           05  WS-STR1                 PIC S9(04)    VALUE ZERO.\n           05  WS-STR2                 PIC S9(04)    VALUE ZERO.\n\n       01  WS-SWITCHES.\n           05  WS-END-X12IN-SW         PIC  X        VALUE 'N'.\n               88  END-OF-X12IN                      VALUE 'Y'.\n               88  MORE-X12IN-RCDS                   VALUE 'N'.\n           05  WS-FIRST-RCD-SW         PIC  X        VALUE 'Y'.\n               88  FIRST-RECORD                      VALUE 'Y'.\n           05  WS-PARM-OVER800-SW      PIC  X        VALUE SPACE.\n           05  WS-SEG-OVER10-SW        PIC  X        VALUE SPACE.\n           05  WS-ELE-OVER10-SW        PIC  X        VALUE SPACE.\n           05  WS-CODE-OVER30-SW       PIC  X        VALUE SPACE.\n           05  WS-SHOW-SUMMARY-SW      PIC  X        VALUE SPACE.\n           05  WS-START-LINE-SW        PIC  X        VALUE SPACE.\n      *    these are reset by each ISA\n           05  WS-DTM-SW               PIC  X        VALUE SPACE.\n           05  WS-FST-SW               PIC  X        VALUE SPACE.\n           05  WS-IT1-SW               PIC  X        VALUE SPACE.\n           05  WS-JIT-SW               PIC  X        VALUE SPACE.\n           05  WS-LIN-SW               PIC  X        VALUE SPACE.\n           05  WS-N1-SW                PIC  X        VALUE SPACE.\n           05  WS-N2-SW                PIC  X        VALUE SPACE.\n           05  WS-N3-SW                PIC  X        VALUE SPACE.\n           05  WS-N4-SW                PIC  X        VALUE SPACE.\n           05  WS-N9-SW                PIC  X        VALUE SPACE.\n           05  WS-PER-SW               PIC  X        VALUE SPACE.\n           05  WS-REF-SW               PIC  X        VALUE SPACE.\n           05  WS-RMR-SW               PIC  X        VALUE SPACE.\n           05  WS-RMT-SW               PIC  X        VALUE SPACE.\n           05  WS-SHP-SW               PIC  X        VALUE SPACE.\n           05  WS-SLN-SW               PIC  X        VALUE SPACE.\n           05  WS-TD1-SW               PIC  X        VALUE SPACE.\n           05  WS-X12PICK-MSG-SW       PIC  X        VALUE SPACE.\n\n       01  WS-TABLES.\n           05  WS-PARM01-ITEM          OCCURS 800 TIMES.\n               10  WS-P1-ELEMENT       PIC  X(04).\n               10  WS-P1-CODE          PIC  X(06).\n               10  WS-P1-DESC          PIC  X(50).\n           05  WS-SEGMENT-ITEM         OCCURS 10  TIMES.\n               10  WS-SI-3             PIC  XXX.\n           05  WS-HDR-ITEM             OCCURS 10  TIMES.\n               10  WS-HI-30            PIC  X(30).\n           05  WS-CODE-ITEM            OCCURS 30  TIMES.\n               10  WS-CI-47            PIC  X(47).\n\n       01  WS-END.\n           05  FILLER                  PIC  X(16)    VALUE\n               '  X12SHOW END  '.\n\n       LINKAGE SECTION.\n\n       01  LS-FIELD.\n           05  LS-LENGTH               PIC S9(04)    COMP.\n           05  LS-DATA                 PIC  X(15).\n           05  FILLER REDEFINES LS-DATA.\n               10  LS-LINE             PIC  X(07).\n               10  LS-PLANT            PIC  X(08).\n\n      /\n\n       PROCEDURE DIVISION USING LS-FIELD.\n\n       0100-PROGRAM-ENTRY.\n           MOVE +0000                         TO WS-RETURN-CODE.\n           PERFORM 0200-OPEN-FILES.\n           DISPLAY '    '.\n           DISPLAY '**** X12SHOW display X12 field meanings'.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0400-PROCESS-X12IN.\n\n           DISPLAY '**** PARM01 items          ' WS-PARM01-MAX\n                   ' of 800'.\n           IF WS-START-LINE > ZERO\n               DISPLAY '**** Limit to ISA on/after ' WS-START-LINE.\n           IF WS-ISA-CNT > ZERO\n               DISPLAY '**** ISA segments          ' WS-ISA-CNT.\n           IF WS-UNB-CNT > ZERO\n               DISPLAY '**** UNB segments          ' WS-UNB-CNT.\n           IF WS-ISSUE-CNT > ZERO\n               DISPLAY '**** X12 data issues       ' WS-ISSUE-CNT.\n           IF WS-QUESTION-CNT > ZERO\n               DISPLAY '**** Unmatched codes       ' WS-QUESTION-CNT.\n           IF WS-SEGMENT-CNT > ZERO\n               DISPLAY '**** Unmatched segments    ' WS-SEGMENT-CNT.\n           DISPLAY '**** Records in X12IN      ' WS-READ-X12IN-CNT.\n           DISPLAY '**** Records written       ' WS-WRITE-X12OUT-CNT.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0300-CLOSE-FILES\n           ELSE\n               DISPLAY '**** X12SHOW cond code ' WS-RETURN-CODE\n                       ' set by program'\n               MOVE WS-RETURN-CODE            TO RETURN-CODE.\n\n           DISPLAY '**** X12SHOW EOJ encountered '.\n           DISPLAY '    '.\n           STOP RUN.\n\n       0200-OPEN-FILES.\n           OPEN INPUT  X12IN.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** X12SHOW open error on X12IN'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN INPUT  PARM01.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** X12SHOW open error on PARM01'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n           OPEN OUTPUT X12OUT.\n           IF WS-STAT NOT = ZERO\n               DISPLAY '**** X12SHOW open error on X12OUT'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +0200                     TO WS-RETURN-CODE.\n\n       0300-CLOSE-FILES.\n           CLOSE X12OUT.\n           CLOSE PARM01.\n           CLOSE X12IN.\n\n      *---------------------------------------\n      *    X\n      *---------------------------------------\n       0400-PROCESS-X12IN.\n\n           PERFORM 0500-GET-LINKAGE.\n\n           PERFORM VARYING WS-SUB1 FROM 1 BY 1\n               UNTIL WS-SUB1 > 800\n               MOVE SPACE                     TO WS-P1-ELEMENT(WS-SUB1)\n               MOVE SPACE                     TO WS-P1-CODE(WS-SUB1)\n               MOVE SPACE                     TO WS-P1-DESC(WS-SUB1)\n           END-PERFORM.\n           IF WS-RETURN-CODE = ZERO\n               MOVE ZERO                      TO WS-SUB1\n               PERFORM 0700-LOAD-PARM01 THRU\n                       0700-LOAD-PARM01-EXIT.\n\n           PERFORM VARYING WS-SUB2 FROM 1 BY 1\n               UNTIL WS-SUB2 > 10\n               MOVE SPACE                     TO WS-SI-3(WS-SUB2)\n               MOVE SPACE                     TO WS-HI-30(WS-SUB2)\n           END-PERFORM.\n           PERFORM VARYING WS-SUB2 FROM 1 BY 1\n               UNTIL WS-SUB2 > 30\n               MOVE SPACE                     TO WS-CI-47(WS-SUB2)\n           END-PERFORM.\n\n      *---------------------------------------\n      *    process primary file\n      *---------------------------------------\n\n           MOVE ZERO                          TO WS-SUB1.\n           MOVE SPACE                         TO WS-X12-RCDS.\n           MOVE SPACE                         TO WS-PARM-OVER800-SW.\n           MOVE SPACE                         TO WS-SEG-OVER10-SW.\n           MOVE SPACE                         TO WS-ELE-OVER10-SW.\n           MOVE SPACE                         TO WS-CODE-OVER30-SW.\n           MOVE SPACE                         TO WS-X12-SW.\n           MOVE SPACE                         TO WS-X12-RESET-SW.\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 1100-READ-X12IN\n                       UNTIL END-OF-X12IN.\n\n           IF WS-RETURN-CODE = ZERO\n               PERFORM 0450-SHOW-MSG-IN-FILE.\n\n       0450-SHOW-MSG-IN-FILE.\n           IF WS-QUESTION-CNT > ZERO\n               OR WS-SEGMENT-CNT > ZERO\n               OR WS-ISSUE-CNT > ZERO\n               OR WS-UNB-CNT > ZERO\n               OR WS-PARM-OVER800-SW = 'Y'\n               OR WS-X12PICK-MSG-SW = 'Y'\n               MOVE SPACE                           TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT\n               MOVE '!! Note from program X12SHOW'  TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT.\n           IF WS-X12PICK-MSG-SW = 'Y'\n               MOVE SPACE                           TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT\n               MOVE '!! X12PICK found no X12 to pull'  TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT.\n           IF WS-PARM-OVER800-SW = 'Y'\n               MOVE SPACE                           TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT\n               MOVE '!! Parm table has maxed-out'   TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT\n               MOVE '!! Expand definition beyond 800 elements'\n                                                    TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT.\n           IF WS-ISSUE-CNT > ZERO\n               MOVE SPACE                           TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT\n               MOVE '!! Search for $$ to find internal data issues '\n                                                    TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT\n               MOVE WS-ISSUE-CNT                    TO WS-SHOW-CNT\n               MOVE SPACE                           TO X12OUT-RCD\n               STRING '!! in unstring file. Issues found       = '\n                                                    DELIMITED BY SIZE\n                      WS-SHOW-CNT                   DELIMITED BY SIZE\n                      INTO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT.\n           IF WS-QUESTION-CNT > ZERO\n               MOVE SPACE                           TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT\n               MOVE '!! Search for ?? to find unmatched codes'\n                                                    TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT\n               MOVE WS-QUESTION-CNT                 TO WS-SHOW-CNT\n               MOVE SPACE                           TO X12OUT-RCD\n               STRING '!! in unstring file. Unmatched code cnt = '\n                                                    DELIMITED BY SIZE\n                      WS-SHOW-CNT                   DELIMITED BY SIZE\n                      INTO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT\n               MOVE SPACE                           TO X12OUT-RCD\n               STRING '!! Update values in '        DELIMITED BY SIZE\n                      'userid.ISPF.FILE488(X12INPUT)'\n                                                    DELIMITED BY SIZE\n                      INTO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT.\n           IF WS-SEGMENT-CNT > ZERO\n               MOVE SPACE                           TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT\n               MOVE '!! Search for X12SHOW to find unmatched segments'\n                                                    TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT\n               MOVE WS-SEGMENT-CNT                  TO WS-SHOW-CNT\n               MOVE SPACE                           TO X12OUT-RCD\n               STRING '!! in unstring file. Unmatched seg cnt =  '\n                                                    DELIMITED BY SIZE\n                      WS-SHOW-CNT                   DELIMITED BY SIZE\n                      INTO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT\n               MOVE '!! Update segment handling logic in X12SHOW'\n                                                    TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT.\n           IF WS-SI-3(1) NOT = SPACE\n               PERFORM 0460-SHOW-TOP-SUMMARY\n               PERFORM 0460-SHOW-SEGMENTS.\n           IF WS-HI-30(1) NOT = SPACE\n               PERFORM 0460-SHOW-TOP-SUMMARY\n               PERFORM 0460-SHOW-HDR.\n           IF WS-CI-47(1) NOT = SPACE\n               PERFORM 0460-SHOW-TOP-SUMMARY\n               PERFORM 0460-SHOW-CODES.\n           IF WS-UNB-CNT > ZERO\n               MOVE SPACE                           TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT\n               MOVE '!! UNB segments were found in source file'\n                                                    TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT\n               MOVE WS-UNB-CNT                      TO WS-SHOW-CNT\n               MOVE SPACE                           TO X12OUT-RCD\n               STRING '!! UNB Segments skipped = '  DELIMITED BY SIZE\n                      WS-SHOW-CNT                   DELIMITED BY SIZE\n                      INTO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT.\n\n       0460-SHOW-TOP-SUMMARY.\n           IF WS-SHOW-SUMMARY-SW = SPACE\n               MOVE 'N'                       TO WS-SHOW-SUMMARY-SW\n               MOVE SPACE                     TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT\n               MOVE '!! Summarized unmatched items:'   TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT.\n\n       0460-SHOW-SEGMENTS.\n           PERFORM VARYING WS-SUB2 FROM 1 BY 1\n               UNTIL WS-SUB2 > 10\n               IF WS-SI-3(WS-SUB2) NOT = SPACE\n                   MOVE SPACE                       TO X12OUT-RCD\n                   STRING '!!    Unmatched segment: '\n                                                    DELIMITED BY SIZE\n                      WS-SI-3(WS-SUB2)              DELIMITED BY SIZE\n                      INTO X12OUT-RCD\n                   PERFORM 3100-WRITE-X12OUT\n               END-IF\n           END-PERFORM.\n           IF WS-SEG-OVER10-SW = 'Y'\n               MOVE '!!    Only 10 segments listed... additional found'\n                                              TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT.\n\n       0460-SHOW-HDR.\n           PERFORM VARYING WS-SUB2 FROM 1 BY 1\n               UNTIL WS-SUB2 > 10\n               IF WS-HI-30(WS-SUB2) NOT = SPACE\n                   MOVE SPACE                       TO X12OUT-RCD\n                   STRING '!!    Unmatched element: '\n                                                    DELIMITED BY SIZE\n                      WS-HI-30(WS-SUB2)             DELIMITED BY SIZE\n                      INTO X12OUT-RCD\n                   PERFORM 3100-WRITE-X12OUT\n               END-IF\n           END-PERFORM.\n           IF WS-ELE-OVER10-SW = 'Y'\n               MOVE '!!    Only 10 elements listed... additional found'\n                                              TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT.\n\n       0460-SHOW-CODES.\n           PERFORM VARYING WS-SUB2 FROM 1 BY 1\n               UNTIL WS-SUB2 > 30\n               IF WS-CI-47(WS-SUB2) NOT = SPACE\n                   MOVE SPACE                       TO X12OUT-RCD\n                   STRING '!!    Unmatched code:    '\n                                                    DELIMITED BY SIZE\n                      WS-CI-47(WS-SUB2)             DELIMITED BY SIZE\n                      INTO X12OUT-RCD\n                   PERFORM 3100-WRITE-X12OUT\n               END-IF\n           END-PERFORM.\n           IF WS-CODE-OVER30-SW = 'Y'\n               MOVE '!!    Only 30 codes listed... additional found'\n                                              TO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT.\n\n\n       0500-GET-LINKAGE.\n           IF LS-LENGTH = ZERO\n               DISPLAY '**** Parm length is zero '\n               MOVE +0500                     TO WS-RETURN-CODE\n           ELSE\n           IF LS-LENGTH > LENGTH OF WS-LS-DATA\n               DISPLAY '**** Parm length is excessive '\n               MOVE +0500                     TO WS-RETURN-CODE\n           ELSE\n               MOVE LS-DATA(1: LS-LENGTH)     TO WS-LS-DATA.\n\n           MOVE ZERO                          TO WS-START-LINE.\n           MOVE SPACE                         TO WS-START-LINE-SW.\n           IF WS-LS-LINE NUMERIC\n               MOVE WS-LS-LINE                TO WS-START-LINE\n           ELSE\n           IF WS-LS-LINE = SPACE\n               CONTINUE\n           ELSE\n               MOVE WS-LS-PLANT(1: 1)         TO WS-LS-PLANT(8: 1)\n               MOVE WS-LS-LINE                TO WS-LS-PLANT(1: 7)\n               MOVE SPACE                     TO WS-LS-LINE.\n\n           IF WS-LS-PLANT NOT = SPACE\n               DISPLAY '**** Plant                 ' WS-LS-PLANT.\n\n      *---------------------------------------\n      *    load PARM01  X12 element descriptions\n      *---------------------------------------\n       0700-LOAD-PARM01.\n           READ PARM01.\n           IF WS-STAT = 10\n               MOVE WS-SUB1                   TO WS-PARM01-MAX\n               GO TO 0700-LOAD-PARM01-EXIT\n           ELSE\n           IF WS-STAT > ZERO\n               DISPLAY '**** X12SHOW read error on PARM01'\n               DISPLAY '**** File stat = ' WS-STAT\n               MOVE +0700                     TO WS-RETURN-CODE\n               GO TO 0700-LOAD-PARM01-EXIT.\n\n           IF PARM01-DOCU = '*'\n               GO TO 0700-LOAD-PARM01.\n\n           IF WS-SUB1 < 800\n               ADD 1                          TO WS-SUB1\n               PERFORM 0700-PARM01-FIELDS\n           ELSE\n               MOVE 'Y'                       TO WS-PARM-OVER800-SW.\n\n           GO TO 0700-LOAD-PARM01.\n\n       0700-LOAD-PARM01-EXIT. EXIT.\n\n       0700-PARM01-FIELDS.\n           IF PARM01-ELEMENT = SPACE\n               DISPLAY '**** X12SHOW PARM01 element not valued'\n               MOVE +0700                     TO WS-RETURN-CODE\n           ELSE\n               MOVE PARM01-ELEMENT         TO WS-P1-ELEMENT(WS-SUB1).\n           MOVE PARM01-CODE                TO WS-P1-CODE(WS-SUB1).\n           IF PARM01-DESC = SPACE\n               DISPLAY '**** X12SHOW PARM01 description not valued'\n               MOVE +0700                     TO WS-RETURN-CODE\n           ELSE\n               MOVE PARM01-DESC            TO WS-P1-DESC(WS-SUB1).\n\n      *---------------------------------------\n\n       1100-READ-X12IN.\n           READ X12IN.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-READ-X12IN-CNT\n               PERFORM 1200-SELECT THRU\n                       1200-SELECT-EXIT\n           ELSE\n           IF WS-STAT = 10\n               MOVE 'Y'                       TO WS-END-X12IN-SW\n           ELSE\n               DISPLAY '**** X12SHOW read error on X12IN '\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE +1100                     TO WS-RETURN-CODE.\n\n      *---------------------------------------\n      *    When ISA or UNB encountered, determine EOR character\n      *    and field delimiter.  Stack multi-line records such as\n      *    ISA or some LIN segments into WS-X12-RCDS so they can\n      *    be manipulated as one greater-than-80 character record.\n      *----+----------------------------------\n       1200-SELECT.\n           IF WS-X12-RESET-SW = 'Y'\n               MOVE SPACE                     TO WS-X12-SW\n               MOVE SPACE                     TO WS-X12-RESET-SW.\n\n           IF X12IN-RCD(1: 3) = 'ISA'\n               ADD 1                          TO WS-ISA-CNT\n               MOVE ZERO                      TO WS-EOR-RCD-CNT\n               MOVE 'I'                       TO WS-X12-SW.\n           IF X12IN-RCD(1: 3) = 'UNB'\n               ADD 1                          TO WS-UNB-CNT\n               MOVE ZERO                      TO WS-EOR-RCD-CNT\n               MOVE 'U'                       TO WS-X12-SW.\n\n      *    if starting line specified, only select next occurring ISA\n           IF WS-START-LINE > ZERO\n             IF WS-READ-X12IN-CNT < WS-START-LINE\n                 GO TO 1200-SELECT-EXIT\n             ELSE\n             IF WS-X12-SW = SPACE\n                 GO TO 1200-SELECT-EXIT\n             ELSE\n             IF X12IN-RCD(1: 3) = 'ISA'\n               IF WS-START-LINE-SW = SPACE\n                   MOVE 'Y'                   TO WS-START-LINE-SW\n               ELSE\n                   GO TO 1200-SELECT-EXIT\n             ELSE\n             IF WS-START-LINE-SW = 'N' OR SPACE\n                 GO TO 1200-SELECT-EXIT\n             ELSE\n             IF X12IN-RCD(1: 3) = 'IEA'\n                 MOVE 'N'                     TO WS-START-LINE-SW.\n\n           IF X12IN-RCD(1: 3) = 'IEA' OR 'UNZ'\n               MOVE 'Y'                       TO WS-X12-RESET-SW.\n\n           IF X12IN-RCD = '!! Note from program X12PICK '\n               MOVE 'Y'                       TO WS-X12PICK-MSG-SW\n               MOVE 'Y'                       TO WS-END-X12IN-SW.\n\n      *    skip processing UNB segments until logic added\n      *    to program\n           IF WS-X12-SW NOT = 'I'\n               GO TO 1200-SELECT-EXIT.\n\n           ADD 1                              TO WS-EOR-RCD-CNT.\n           IF WS-SUB1 < 5\n               ADD 1                          TO WS-SUB1.\n\n           MOVE X12IN-RCD                     TO WS-X12-RCD(WS-SUB1).\n\n           IF WS-X12-SW = 'U'\n             IF WS-EOR-RCD-CNT = 1\n                 PERFORM 2600-DETERMINE-EOR-UNB\n                 PERFORM 1200-DETERMINE-MULTI-LINE\n             ELSE\n                 PERFORM 1200-DETERMINE-MULTI-LINE\n           ELSE\n           IF WS-X12-SW = 'I'\n             IF WS-EOR-RCD-CNT = 1\n                 CONTINUE\n             ELSE\n             IF WS-EOR-RCD-CNT = 2\n                 PERFORM 2600-DETERMINE-EOR-ISA\n                 PERFORM 1200-DETERMINE-MULTI-LINE\n             ELSE\n                 PERFORM 1200-DETERMINE-MULTI-LINE.\n\n       1200-SELECT-EXIT. EXIT.\n\n       1200-DETERMINE-MULTI-LINE.\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-X12-RCDS TALLYING WS-TALLY FOR ALL WS-EOR.\n           IF WS-TALLY NOT = ZERO\n               PERFORM 1250-SELECT-DELIM\n               MOVE SPACE                     TO WS-X12-RCDS\n               MOVE ZERO                      TO WS-SUB1.\n\n       1250-SELECT-DELIM.\n           IF WS-DELIM = SPACE\n               DISPLAY '**** X12SHOW rcd delimiter undetermined'\n               DISPLAY '**** terminating program'\n               MOVE 'Y'                       TO WS-END-X12IN-SW\n           ELSE\n           IF WS-X12-RCDS(3: 1) = WS-DELIM\n               PERFORM 1250-SELECT-2\n           ELSE\n           IF WS-X12-RCDS(4: 1) = WS-DELIM\n               PERFORM 1250-SELECT-3.\n\n      *    !seg\n       1250-SELECT-2.\n           MOVE WS-X12-RCDS(1: 2)             TO WS-SEG.\n           EVALUATE WS-SEG\n             WHEN 'B1 '    PERFORM 1300-UNSTRING-B1\n             WHEN 'GE '    PERFORM 1300-UNSTRING-GE\n             WHEN 'GS '    PERFORM 1300-UNSTRING-GS\n             WHEN 'HL '    PERFORM 1300-UNSTRING-HL\n             WHEN 'LE '    PERFORM 1300-UNSTRING-LE-LS\n             WHEN 'LS '    PERFORM 1300-UNSTRING-LE-LS\n             WHEN 'LX '    PERFORM 1300-UNSTRING-LX\n             WHEN 'N1 '    PERFORM 1300-UNSTRING-N1\n             WHEN 'N2 '    PERFORM 1300-UNSTRING-N2\n             WHEN 'N3 '    PERFORM 1300-UNSTRING-N3\n             WHEN 'N4 '    PERFORM 1300-UNSTRING-N4\n             WHEN 'N9 '    PERFORM 1300-UNSTRING-N9\n             WHEN 'SE '    PERFORM 1300-UNSTRING-SE\n             WHEN 'ST '    PERFORM 1300-UNSTRING-ST\n             WHEN OTHER    PERFORM 1300-DISPLAY-OTHER\n           END-EVALUATE.\n\n       1250-SELECT-3.\n           MOVE WS-X12-RCDS(1: 3)             TO WS-SEG.\n           EVALUATE WS-SEG\n             WHEN 'ADX'    PERFORM 1300-UNSTRING-ADX\n             WHEN 'AK1'    PERFORM 1300-UNSTRING-AK1\n             WHEN 'AK2'    PERFORM 1300-UNSTRING-AK2\n             WHEN 'AK5'    PERFORM 1300-UNSTRING-AK5\n             WHEN 'AK9'    PERFORM 1300-UNSTRING-AK9\n             WHEN 'AMT'    PERFORM 1300-UNSTRING-AMT\n             WHEN 'ATH'    PERFORM 1300-UNSTRING-ATH\n             WHEN 'BCH'    PERFORM 1300-UNSTRING-BCH\n             WHEN 'BCT'    PERFORM 1300-UNSTRING-BCT\n             WHEN 'BEG'    PERFORM 1300-UNSTRING-BEG\n             WHEN 'BFR'    PERFORM 1300-UNSTRING-BFR\n             WHEN 'BGN'    PERFORM 1300-UNSTRING-BGN\n             WHEN 'BIA'    PERFORM 1300-UNSTRING-BIA\n             WHEN 'BIG'    PERFORM 1300-UNSTRING-BIG\n             WHEN 'BMG'    PERFORM 1300-UNSTRING-BMG\n             WHEN 'BPR'    PERFORM 1300-UNSTRING-BPR\n             WHEN 'BPS'    PERFORM 1300-UNSTRING-BPS\n             WHEN 'BRA'    PERFORM 1300-UNSTRING-BRA\n             WHEN 'BSN'    PERFORM 1300-UNSTRING-BSN\n             WHEN 'BSS'    PERFORM 1300-UNSTRING-BSS\n             WHEN 'CLD'    PERFORM 1300-UNSTRING-CLD\n             WHEN 'CTP'    PERFORM 1300-UNSTRING-CTP\n             WHEN 'CTT'    PERFORM 1300-UNSTRING-CTT\n             WHEN 'CUR'    PERFORM 1300-UNSTRING-CUR\n             WHEN 'DTM'    PERFORM 1300-UNSTRING-DTM\n             WHEN 'ENT'    PERFORM 1300-UNSTRING-ENT\n             WHEN 'ETD'    PERFORM 1300-UNSTRING-ETD\n             WHEN 'FOB'    PERFORM 1300-UNSTRING-FOB\n             WHEN 'FST'    PERFORM 1300-UNSTRING-FST\n             WHEN 'IEA'    PERFORM 1300-UNSTRING-IEA\n             WHEN 'ISA'    PERFORM 1300-UNSTRING-ISA\n             WHEN 'IT1'    PERFORM 1300-UNSTRING-IT1\n             WHEN 'ITA'    PERFORM 1300-UNSTRING-ITA\n             WHEN 'ITD'    PERFORM 1300-UNSTRING-ITD\n             WHEN 'JIT'    PERFORM 1300-UNSTRING-JIT\n             WHEN 'J2X'    PERFORM 1300-UNSTRING-J2X\n             WHEN 'LIN'    PERFORM 1300-UNSTRING-LIN\n             WHEN 'MAN'    PERFORM 1300-UNSTRING-MAN\n             WHEN 'MEA'    PERFORM 1300-UNSTRING-MEA\n             WHEN 'MIT'    PERFORM 1300-UNSTRING-MIT\n             WHEN 'MSG'    PERFORM 1300-UNSTRING-MSG\n             WHEN 'MTX'    PERFORM 1300-UNSTRING-MTX\n             WHEN 'NM1'    PERFORM 1300-UNSTRING-NM1\n             WHEN 'NTE'    PERFORM 1300-UNSTRING-NTE\n             WHEN 'OTI'    PERFORM 1300-UNSTRING-OTI\n             WHEN 'PER'    PERFORM 1300-UNSTRING-PER\n             WHEN 'PID'    PERFORM 1300-UNSTRING-PID\n             WHEN 'PKG'    PERFORM 1300-UNSTRING-PKG\n             WHEN 'POC'    PERFORM 1300-UNSTRING-POC\n             WHEN 'PRF'    PERFORM 1300-UNSTRING-PRF\n             WHEN 'PRR'    PERFORM 1300-UNSTRING-PRR\n             WHEN 'PRS'    PERFORM 1300-UNSTRING-PRS\n             WHEN 'PO1'    PERFORM 1300-UNSTRING-PO1\n             WHEN 'PO4'    PERFORM 1300-UNSTRING-PO4\n             WHEN 'QTY'    PERFORM 1300-UNSTRING-QTY\n             WHEN 'RCD'    PERFORM 1300-UNSTRING-RCD\n             WHEN 'REF'    PERFORM 1300-UNSTRING-REF\n             WHEN 'REP'    PERFORM 1300-UNSTRING-REP\n             WHEN 'RMR'    PERFORM 1300-UNSTRING-RMR\n             WHEN 'RMT'    PERFORM 1300-UNSTRING-RMT\n             WHEN 'SAC'    PERFORM 1300-UNSTRING-SAC\n             WHEN 'SCH'    PERFORM 1300-UNSTRING-SCH\n             WHEN 'SDP'    PERFORM 1300-UNSTRING-SDP\n             WHEN 'SHP'    PERFORM 1300-UNSTRING-SHP\n             WHEN 'SLN'    PERFORM 1300-UNSTRING-SLN\n             WHEN 'SN1'    PERFORM 1300-UNSTRING-SN1\n             WHEN 'SSS'    PERFORM 1300-UNSTRING-SSS\n             WHEN 'TA1'    PERFORM 1300-UNSTRING-TA1\n             WHEN 'TDS'    PERFORM 1300-UNSTRING-TDS\n             WHEN 'TD1'    PERFORM 1300-UNSTRING-TD1\n             WHEN 'TD3'    PERFORM 1300-UNSTRING-TD3\n             WHEN 'TD4'    PERFORM 1300-UNSTRING-TD4\n             WHEN 'TD5'    PERFORM 1300-UNSTRING-TD5\n             WHEN 'TED'    PERFORM 1300-UNSTRING-TED\n             WHEN 'TRN'    PERFORM 1300-UNSTRING-TRN\n             WHEN 'TXI'    PERFORM 1300-UNSTRING-TXI\n             WHEN 'UNT'\n             WHEN 'UIT'    PERFORM 1300-UNSTRING-UIT\n             WHEN OTHER    PERFORM 1300-DISPLAY-OTHER\n           END-EVALUATE.\n\n       1300-DISPLAY-OTHER.\n           MOVE 'X12SHOW program not yet setup for segment:'\n                                              TO X12OUT-RCD.\n           PERFORM 3100-WRITE-X12OUT.\n           PERFORM 1800-SHOW-X12-OUT.\n           ADD 1                              TO WS-SEGMENT-CNT.\n\n      *---------------------------------------\n      *    add unmatched segments to table and list at end\n      *---------------------------------------\n           PERFORM VARYING WS-SUB2 FROM 1 BY 1\n               UNTIL WS-SUB2 > 11\n               IF WS-SUB2 > 10\n                   MOVE 'Y'                   TO WS-SEG-OVER10-SW\n               ELSE\n               IF WS-SEG = WS-SI-3(WS-SUB2)\n                   MOVE 11                    TO WS-SUB2\n               ELSE\n               IF WS-SI-3(WS-SUB2) = SPACE\n                   MOVE WS-SEG                TO WS-SI-3(WS-SUB2)\n                   MOVE 11                    TO WS-SUB2\n               END-IF\n               END-IF\n               END-IF\n           END-PERFORM.\n\n\n      *---------------------------------------\n\n      *    !ADX\n      *    ADX*0*01*OI*34074064~\n       1300-UNSTRING-ADX.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'ADX'                         TO WS-HDR.\n           MOVE 'Adjustment'                  TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Monetary amount'             TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 426\n           MOVE '426'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-03                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 128\n           IF WS-X12-04 NOT = SPACE\n               MOVE '128'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Reference identification'   TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !AK1\n      *    AK1*SH*1957~\n       1300-UNSTRING-AK1.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'AK1'                         TO WS-HDR.\n           MOVE 'Functional group response hdr'  TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 479\n           MOVE '479'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Group control number'        TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n\n      *    !AK2\n      *    AK2*856*1957001~\n       1300-UNSTRING-AK2.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'AK2'                         TO WS-HDR.\n           MOVE 'Transaction set response hdr'   TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 143\n           MOVE '143'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Transaction control number'  TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n\n      *    !AK5\n      *    AK5*A~\n       1300-UNSTRING-AK5.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'AK5'                         TO WS-HDR.\n           MOVE 'Transaction set response trailer'   TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 717\n           MOVE '717'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 718\n           IF WS-X12-03 NOT = SPACE\n               MOVE '718'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-03                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE '718'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE '718'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-05                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE '718'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-06                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE '718'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !AK9\n      *    AK9*A*1*1*1~\n       1300-UNSTRING-AK9.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'AK9'                         TO WS-HDR.\n           MOVE 'Functional group response trailer'  TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 715\n           MOVE '715'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Number of transaction sets'  TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Nbr of received trans sets'  TO WS-HDR.\n           MOVE WS-X12-04                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Nbr of accepted trans sets'  TO WS-HDR.\n           MOVE WS-X12-05                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE '716'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-06                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE '716'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE '716'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-08                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-09 NOT = SPACE\n               MOVE '716'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE '716'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-10                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !AMT\n      *    AMT*CC*5.45.\n       1300-UNSTRING-AMT.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'AMT'                         TO WS-HDR.\n           MOVE 'Monetary amount'             TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 522\n           MOVE '522'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Monetary amount'             TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 478\n           IF WS-X12-04 NOT = SPACE\n               MOVE '478'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !ATH\n      *    ATH*MT*181222*1428**181123\n       1300-UNSTRING-ATH.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'ATH'                         TO WS-HDR.\n           MOVE 'Resource authorization'      TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 672\n           MOVE '672'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Quantity'                TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Quantity'                TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !BCH\n      *    BCH*18*BK*4300261028***180126.\n       1300-UNSTRING-BCH.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12 WS-X12-13 WS-X12-14 WS-X12-15\n                    WS-X12-16 WS-X12-17.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'BCH'                         TO WS-HDR.\n           MOVE 'Begin segment for purch order change' TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 353\n           MOVE '353'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 92\n           MOVE '92'                          TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-03                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Purchase order number'       TO WS-HDR.\n           MOVE WS-X12-04                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Release number'          TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Change order seq nbr'    TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Date'                        TO WS-HDR.\n           MOVE WS-X12-07                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Request reference number'   TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-09 NOT = SPACE\n               MOVE 'Contract number'         TO WS-HDR\n               MOVE WS-X12-09                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Reference identification'   TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-11 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-11                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-12 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-12                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 1166\n           IF WS-X12-13 NOT = SPACE\n               MOVE '1166'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-13                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 786\n           IF WS-X12-14 NOT = SPACE\n               MOVE '786'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-14                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 587\n           IF WS-X12-15 NOT = SPACE\n               MOVE '587'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-15                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 640\n           IF WS-X12-16 NOT = SPACE\n               MOVE '640'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-16                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 1232\n           IF WS-X12-17 NOT = SPACE\n               MOVE '1232'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-17                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !BCT\n      *    BCT*PC*********04~\n       1300-UNSTRING-BCT.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'BCT'                         TO WS-HDR.\n           MOVE 'Begin segment price sales catalog' TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 683\n           MOVE '683'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Catalog number'          TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Catalog version number'  TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Catalog revision number' TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 355\n           IF WS-X12-06 NOT = SPACE\n               MOVE '355'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-06                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Catalog number'          TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Catalog version number'  TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-09 NOT = SPACE\n               MOVE 'Catalog revision number' TO WS-HDR\n               MOVE WS-X12-09                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Description'             TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 353\n           IF WS-X12-11 NOT = SPACE\n               MOVE '353'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-11                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !BEG\n      *    BEG*00*NE*ST-R645559**20181119**AC~\n       1300-UNSTRING-BEG.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12 WS-X12-13.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'BEG'                         TO WS-HDR.\n           MOVE 'Beginning segment for purchase order'  TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 353\n           MOVE '353'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 92\n           MOVE '92'                          TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-03                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Purchase order number'       TO WS-HDR.\n           MOVE WS-X12-04                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Release number'          TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Date'                        TO WS-HDR.\n           MOVE WS-X12-06                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Contract number'         TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 587\n           IF WS-X12-08 NOT = SPACE\n               MOVE '587'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-08                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 1019\n           IF WS-X12-09 NOT = SPACE\n               MOVE '1019'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 1166\n           IF WS-X12-10 NOT = SPACE\n               MOVE '1166'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-10                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 1232\n           IF WS-X12-11 NOT = SPACE\n               MOVE '1232'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-11                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 786\n           IF WS-X12-12 NOT = SPACE\n               MOVE '786'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-12                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 640\n           IF WS-X12-13 NOT = SPACE\n               MOVE '640'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-13                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !BFR\n      *    BFR*00**171113*DL*A*171113*171130*171113**CP\n       1300-UNSTRING-BFR.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12 WS-X12-13 WS-X12-14.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'BFR'                         TO WS-HDR.\n           MOVE 'Planning schedule beginning segment'   TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 353\n           MOVE '353'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Reference identification'   TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Release number'          TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 675\n           MOVE '675'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-05                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 676\n           MOVE '676'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-06                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-09 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-09                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-11 NOT = SPACE\n               MOVE 'Contract number'         TO WS-HDR\n               MOVE WS-X12-11                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-12 NOT = SPACE\n               MOVE 'Purchase order number'   TO WS-HDR\n               MOVE WS-X12-12                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 783\n           IF WS-X12-13 NOT = SPACE\n               MOVE '783'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-13                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 306\n           IF WS-X12-14 NOT = SPACE\n               MOVE '306'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-14                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !BGN\n      *    BGN*00*17100000001*171109.\n       1300-UNSTRING-BGN.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'BGN'                         TO WS-HDR.\n           MOVE 'Beginning segment'           TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 353\n           MOVE '353'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Reference identification'    TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Date'                        TO WS-HDR.\n           MOVE WS-X12-04                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Time'                    TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 623\n           IF WS-X12-06 NOT = SPACE\n               MOVE '623'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-06                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Reference identification'   TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 640\n           IF WS-X12-08 NOT = SPACE\n               MOVE '640'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-08                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 306\n           IF WS-X12-09 NOT = SPACE\n               MOVE '306'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 786\n           IF WS-X12-10 NOT = SPACE\n               MOVE '786'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-10                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !BIA\n      *    BIA~00~01~6928560~20181127\n       1300-UNSTRING-BIA.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'BIA'                         TO WS-HDR.\n           MOVE 'Begin seg inventory inq/advice' TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 353\n           MOVE '353'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 755\n           MOVE '755'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-03                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Reference identification'    TO WS-HDR.\n           MOVE WS-X12-04                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Date'                        TO WS-HDR.\n           MOVE WS-X12-05                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Time'                    TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 306\n           IF WS-X12-07 NOT = SPACE\n               MOVE '306'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !BIG\n      *    BIG*20171201*Q3639HD*****DI.\n       1300-UNSTRING-BIG.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'BIG'                         TO WS-HDR.\n           MOVE 'Beginning segment for invoice'  TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Date'                        TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Invoice number'              TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Purchase order number'   TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Release number'          TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Change order seq number' TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 640\n           IF WS-X12-03 NOT = SPACE\n               MOVE '640'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-08                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 353\n           IF WS-X12-09 NOT = SPACE\n               MOVE '353'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 306\n           IF WS-X12-10 NOT = SPACE\n               MOVE '306'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-10                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-11 NOT = SPACE\n               MOVE 'Invoice number'          TO WS-HDR\n               MOVE WS-X12-11                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !BMG\n      *    BMG*00*SUPPLIERMEMO.\n       1300-UNSTRING-BMG.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'BMG'                         TO WS-HDR.\n           MOVE 'Beginning segment for text message'    TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 353\n           MOVE '353'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Description'             TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 640\n           IF WS-X12-04 NOT = SPACE\n               MOVE '640'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !BPR\n      *    BPR~I~155956.34~C~ZZZ~~~~~~~~01~026009674~~807005~181106.\n       1300-UNSTRING-BPR.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12 WS-X12-13 WS-X12-14 WS-X12-15\n                    WS-X12-16 WS-X12-17 WS-X12-18 WS-X12-19 WS-X12-20\n                    WS-X12-21 WS-X12-22.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'BPR'                         TO WS-HDR.\n           MOVE 'Begin segment payment order/remittance' TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 305\n           MOVE '305'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Monetary amount'             TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 478\n           MOVE '478'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-04                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 591\n           MOVE '591'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-05                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 812\n           IF WS-X12-06 NOT = SPACE\n               MOVE '812'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-06                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 506\n           IF WS-X12-07 NOT = SPACE\n               MOVE '506'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'DFI identification nbr'  TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 569\n           IF WS-X12-09 NOT = SPACE\n               MOVE '569'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Account number'          TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-11 NOT = SPACE\n               MOVE 'Originating company id'  TO WS-HDR\n               MOVE WS-X12-11                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-12 NOT = SPACE\n               MOVE 'Originating co supplement cd' TO WS-HDR\n               MOVE WS-X12-12                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 506\n           IF WS-X12-13 NOT = SPACE\n               MOVE '506'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-13                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-14 NOT = SPACE\n               MOVE 'DFI identification nbr'  TO WS-HDR\n               MOVE WS-X12-14                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 569\n           IF WS-X12-15 NOT = SPACE\n               MOVE '569'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-15                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-16 NOT = SPACE\n               MOVE 'Account number'          TO WS-HDR\n               MOVE WS-X12-16                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-17 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-17                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-18 NOT = SPACE\n               MOVE 'Business function code'  TO WS-HDR\n               MOVE WS-X12-18                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 506\n           IF WS-X12-19 NOT = SPACE\n               MOVE '506'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-19                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-20 NOT = SPACE\n               MOVE 'DFI identification nbr'  TO WS-HDR\n               MOVE WS-X12-20                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 569\n           IF WS-X12-21 NOT = SPACE\n               MOVE '569'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-21                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-22 NOT = SPACE\n               MOVE 'Account number'          TO WS-HDR\n               MOVE WS-X12-22                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !BPS\n      *    BPS*PBC*43514.48*I********1119900*171112.\n       1300-UNSTRING-BPS.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'BPS'                         TO WS-HDR.\n           MOVE 'Beginning segment header'    TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element unknown - from web\n           IF WS-X12-02 NOT = SPACE\n               MOVE 'BPS1'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-02                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Monetary amount'         TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element unknown - from web\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'BPS2'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !BRA\n      *    BRA*EPS1107NSG3*20181107*00*2~\n       1300-UNSTRING-BRA.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'BRA'                         TO WS-HDR.\n           MOVE 'Beginning segment receiving advice'  TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Reference identification'    TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Date'                        TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 353\n           MOVE '353'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-04                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 962\n           MOVE '962'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-05                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Time'                    TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 412\n           IF WS-X12-07 NOT = SPACE\n               MOVE '412'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 306\n           IF WS-X12-08 NOT = SPACE\n               MOVE '306'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-08                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !BSN\n      *    BSN*00*00200877*20181112*0951~\n       1300-UNSTRING-BSN.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'BSN'                         TO WS-HDR.\n           MOVE 'Ship notice beginning segment' TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 353\n           MOVE '353'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Shipment identification'     TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Date'                        TO WS-HDR.\n           MOVE WS-X12-04                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Time'                        TO WS-HDR.\n           MOVE WS-X12-05                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 1005\n           IF WS-X12-06 NOT = SPACE\n               MOVE '1005'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-06                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 640\n           IF WS-X12-07 NOT = SPACE\n               MOVE '640'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 641\n           IF WS-X12-08 NOT = SPACE\n               MOVE '641'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-08                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !BSS\n      *    BSS~05~183120000603~181108~SH~181108~181121~862-24~~~~C\n       1300-UNSTRING-BSS.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'BSS'                         TO WS-HDR.\n           MOVE 'Shipping schedule beginning segment' TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 353\n           MOVE '353'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Reference identification'    TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Date'                        TO WS-HDR.\n           MOVE WS-X12-04                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 675\n           MOVE '675'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-05                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Date'                        TO WS-HDR.\n           MOVE WS-X12-06                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Date'                        TO WS-HDR.\n           MOVE WS-X12-07                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Release number'          TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-09 NOT = SPACE\n               MOVE 'Reference identification'   TO WS-HDR\n               MOVE WS-X12-09                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Contract number'         TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-11 NOT = SPACE\n               MOVE 'Purchase order/reference nbr' TO WS-HDR\n               MOVE WS-X12-11                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 676\n           IF WS-X12-12 NOT = SPACE\n               MOVE '676'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-12                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !B1\n      *    B1*HUBG*001471167*181115*A~\n       1300-UNSTRING-B1.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'B1'                          TO WS-HDR.\n           MOVE 'Beginning segment for booking' TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-02 NOT = SPACE\n               MOVE 'Standard carrier alpha cd'  TO WS-HDR\n               MOVE WS-X12-02                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Shipment identification nbr' TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 558\n           IF WS-X12-05 NOT = SPACE\n               MOVE '558'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-05                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !CLD\n      *    CLD*1*20*PCS71@\n       1300-UNSTRING-CLD.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'CLD'                         TO WS-HDR.\n           MOVE 'Load Detail'                 TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Number of loads'             TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Number of units shipped'     TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 103\n           IF WS-X12-04-1 NOT = SPACE\n               MOVE '103A'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04-1               TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04-2 NOT = SPACE\n               MOVE '103B'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04-2               TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Size'                    TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 355\n           IF WS-X12-06 NOT = SPACE\n               MOVE '355'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-06                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !CTP\n      *    CTP**CAT*4.842*1*EA~\n       1300-UNSTRING-CTP.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'CTP'                         TO WS-HDR.\n           MOVE 'Pricing information'         TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 687\n           IF WS-X12-02 NOT = SPACE\n               MOVE '687'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-02                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 236\n           IF WS-X12-03 NOT = SPACE\n               MOVE '236'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-03                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Unit price'              TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Quantity'                TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Composite unit of measure'  TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 648\n           IF WS-X12-07 NOT = SPACE\n               MOVE '648'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Multiplier'              TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-09 NOT = SPACE\n               MOVE 'Monetary amount'         TO WS-HDR\n               MOVE WS-X12-09                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 639\n           IF WS-X12-10 NOT = SPACE\n               MOVE '639'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-10                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-11 NOT = SPACE\n               MOVE 'Condition value'         TO WS-HDR\n               MOVE WS-X12-11                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-12 NOT = SPACE\n               MOVE 'Multiple price quantity' TO WS-HDR\n               MOVE WS-X12-12                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !CTT\n      *    CTT~6~649440\n       1300-UNSTRING-CTT.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'CTT'                         TO WS-HDR.\n           MOVE 'Transaction totals'          TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Number of line items'        TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Hash total'              TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           PERFORM 2100-SHOW-CTT-TOTALS.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Weight'                  TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 355\n           IF WS-X12-05 NOT = SPACE\n               MOVE '355'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-05                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Volume'                  TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 355\n           IF WS-X12-07 NOT = SPACE\n               MOVE '355'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Description'             TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n       2100-SHOW-CTT-TOTALS.\n           IF WS-HOLD-TRAN = '810'\n               MOVE SPACE                     TO X12OUT-RCD\n               STRING '   (Calculated nbr '   DELIMITED BY SIZE\n                       WS-HOLD-TRAN           DELIMITED BY SIZE\n                      ' IT1 items)   '        DELIMITED BY SIZE\n                       WS-IT1-CNT             DELIMITED BY SIZE\n                       INTO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT.\n           IF WS-HOLD-TRAN = '830' OR '846' OR '862'\n               MOVE SPACE                     TO X12OUT-RCD\n               STRING '   (Calculated nbr '   DELIMITED BY SIZE\n                       WS-HOLD-TRAN           DELIMITED BY SIZE\n                      ' LIN items)   '        DELIMITED BY SIZE\n                       WS-LIN-CNT             DELIMITED BY SIZE\n                       INTO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT.\n           IF WS-HOLD-TRAN = '850'\n               MOVE SPACE                     TO X12OUT-RCD\n               STRING '   (Calculated nbr '   DELIMITED BY SIZE\n                       WS-HOLD-TRAN           DELIMITED BY SIZE\n                      ' PO1 items)   '        DELIMITED BY SIZE\n                       WS-PO1-CNT             DELIMITED BY SIZE\n                       INTO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT.\n           IF WS-HOLD-TRAN = '856'\n               MOVE SPACE                     TO X12OUT-RCD\n               STRING '   (Calculated nbr '   DELIMITED BY SIZE\n                       WS-HOLD-TRAN           DELIMITED BY SIZE\n                      ' HL items)    '        DELIMITED BY SIZE\n                       WS-HL-CNT              DELIMITED BY SIZE\n                       INTO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT.\n           IF WS-HOLD-TRAN = '860'\n               MOVE SPACE                     TO X12OUT-RCD\n               STRING '   (Calculated nbr '   DELIMITED BY SIZE\n                       WS-HOLD-TRAN           DELIMITED BY SIZE\n                      ' POC items)   '        DELIMITED BY SIZE\n                       WS-POC-CNT             DELIMITED BY SIZE\n                       INTO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT.\n           IF WS-HOLD-TRAN = '861'\n               MOVE SPACE                     TO X12OUT-RCD\n               STRING '   (Calculated nbr '   DELIMITED BY SIZE\n                       WS-HOLD-TRAN           DELIMITED BY SIZE\n                      ' RCD items)   '        DELIMITED BY SIZE\n                       WS-RCD-CNT             DELIMITED BY SIZE\n                       INTO X12OUT-RCD\n               PERFORM 3100-WRITE-X12OUT.\n\n      *    !CUR\n      *    CUR~BY~USD.\n       1300-UNSTRING-CUR.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12 WS-X12-13 WS-X12-14 WS-X12-15\n                    WS-X12-16 WS-X12-17 WS-X12-18 WS-X12-19 WS-X12-20\n                    WS-X12-21 WS-X12-22.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'CUR'                         TO WS-HDR.\n           MOVE 'Currency'                    TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 98\n           MOVE '98'                          TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Currency code'               TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Exchange rate'           TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 98\n           IF WS-X12-05 NOT = SPACE\n               MOVE '98'                      TO WS-HOLD-SEGMENT\n               MOVE WS-X12-05                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Currency code'           TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 669\n           IF WS-X12-07 NOT = SPACE\n               MOVE '669'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 374\n           IF WS-X12-08 NOT = SPACE\n               MOVE '374'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-08                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-09 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-09                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Time'                    TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 374\n           IF WS-X12-11 NOT = SPACE\n               MOVE '374'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-11                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-12 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-12                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-13 NOT = SPACE\n               MOVE 'Time'                    TO WS-HDR\n               MOVE WS-X12-13                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 374\n           IF WS-X12-14 NOT = SPACE\n               MOVE '374'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-14                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-15 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-15                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-16 NOT = SPACE\n               MOVE 'Time'                    TO WS-HDR\n               MOVE WS-X12-16                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 374\n           IF WS-X12-17 NOT = SPACE\n               MOVE '374'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-17                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-18 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-18                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-19 NOT = SPACE\n               MOVE 'Time'                    TO WS-HDR\n               MOVE WS-X12-19                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 374\n           IF WS-X12-20 NOT = SPACE\n               MOVE '374'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-20                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-21 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-21                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-22 NOT = SPACE\n               MOVE 'Time'                    TO WS-HDR\n               MOVE WS-X12-22                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !DTM\n      *    DTM*011*20181112*0943~\n       1300-UNSTRING-DTM.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           IF WS-DTM-SW = SPACE\n               MOVE 'N'                       TO WS-DTM-SW\n               MOVE 'DTM'                     TO WS-HDR\n               MOVE 'Date/time reference'     TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 374\n           MOVE '374'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Time'                    TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 623\n           IF WS-X12-05 NOT = SPACE\n               MOVE '623'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-05                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 1250\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Period format qualifier' TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Date time period'        TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !ENT\n      *    ENT~1.\n       1300-UNSTRING-ENT.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'ENT'                         TO WS-HDR.\n           MOVE 'Entity'                      TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-02 NOT = SPACE\n               MOVE 'Assigned number'         TO WS-HDR\n               MOVE WS-X12-02                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 98\n           IF WS-X12-03 NOT = SPACE\n               MOVE '98'                      TO WS-HOLD-SEGMENT\n               MOVE WS-X12-03                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 66\n           IF WS-X12-04 NOT = SPACE\n               MOVE '66'                      TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Identification code'     TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 98\n           IF WS-X12-06 NOT = SPACE\n               MOVE '98'                      TO WS-HOLD-SEGMENT\n               MOVE WS-X12-06                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 66\n           IF WS-X12-07 NOT = SPACE\n               MOVE '66'                      TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Identification code'     TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 128\n           IF WS-X12-09 NOT = SPACE\n               MOVE '128'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Reference identification'   TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !ETD\n      *    ETD*ZZ*A*AE*CE434298~\n       1300-UNSTRING-ETD.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'ETD'                         TO WS-HDR.\n           MOVE 'Excess transportation detail'   TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 626\n           MOVE '626'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 627\n           MOVE '627'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-03                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 128\n           IF WS-X12-04 NOT = SPACE\n               MOVE '128'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Reference identification'   TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 743\n           IF WS-X12-06 NOT = SPACE\n               MOVE '743'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-06                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !FOB\n      *    FOB*FO.\n       1300-UNSTRING-FOB.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'FOB'                         TO WS-HDR.\n           MOVE 'FOB related instructions'    TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 146\n           MOVE '146'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 309\n           IF WS-X12-03 NOT = SPACE\n               MOVE '309'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-03                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Description'             TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 334\n           IF WS-X12-05 NOT = SPACE\n               MOVE '334'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-05                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 335\n           IF WS-X12-06 NOT = SPACE\n               MOVE '335'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-06                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 309\n           IF WS-X12-07 NOT = SPACE\n               MOVE '309'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Description'             TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 54\n           IF WS-X12-09 NOT = SPACE\n               MOVE '54'                      TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Description'             TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !FST\n      *    FST~20320~C~D~181120~~010~0800.\n       1300-UNSTRING-FST.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           IF WS-FST-SW = SPACE\n               MOVE 'N'                       TO WS-FST-SW\n               MOVE 'FST'                     TO WS-HDR\n               MOVE 'Forecast schedule'       TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Quantity'                    TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 680\n           MOVE '680'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-03                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 681\n           MOVE '681'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-04                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Date'                        TO WS-HDR.\n           MOVE WS-X12-05                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06(1: 2) NOT = SPACE\n             IF WS-X12-06(3: 5) = SPACE\n                 PERFORM 1300-FST-PO-NUMBER\n             ELSE\n                 PERFORM 1300-FST-REGULAR\n           ELSE\n               PERFORM 1300-FST-REGULAR.\n\n       1300-FST-REGULAR.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 374\n           IF WS-X12-07 NOT = SPACE\n               MOVE '374'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Time'                    TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 128\n           IF WS-X12-09 NOT = SPACE\n               MOVE '128'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Reference identification'   TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 783\n           IF WS-X12-11 NOT = SPACE\n               MOVE '783'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-11                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n       1300-FST-PO-NUMBER.\n      *    data element 128\n           IF WS-X12-06 NOT = SPACE\n               MOVE '128'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-06                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Purchase order number'   TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Time'                    TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 128\n           IF WS-X12-09 NOT = SPACE\n               MOVE '128'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Reference identification'   TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 783\n           IF WS-X12-11 NOT = SPACE\n               MOVE '783'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-11                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !GE\n      *    GE~1~000005118.\n       1300-UNSTRING-GE.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'GE'                          TO WS-HDR.\n           MOVE 'Functional group trailer'    TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Number of transaction sets'  TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Group control number'        TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n\n      *    !GS\n      *    GS~SS~AP20A~L340U~181108~0510~000005118~X~002002FORD\n       1300-UNSTRING-GS.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'GS'                          TO WS-HDR.\n           MOVE 'Functional group header'     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 479\n           MOVE '479'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Application senders code'    TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Application receivers code'  TO WS-HDR.\n           MOVE WS-X12-04                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Time'                    TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Group control number'    TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 455\n           IF WS-X12-08 NOT = SPACE\n               MOVE '455'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-08                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-09 NOT = SPACE\n               MOVE 'Version/release/industry code' TO WS-HDR\n               MOVE WS-X12-09                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !HL\n      *    HL*3*2*I*0~\n       1300-UNSTRING-HL.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05.\n\n           ADD 1                              TO WS-HL-CNT.\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'HL'                          TO WS-HDR.\n           MOVE 'Hierarchical level'          TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Hierarchical ID number'      TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Hierarchical parent ID nbr' TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 735\n           MOVE '735'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-04                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 736\n           IF WS-X12-05 NOT = SPACE\n               MOVE '736'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-05                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !IEA\n      *    IEA~00001~000005118\n       1300-UNSTRING-IEA.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'IEA'                         TO WS-HDR.\n           MOVE 'Interchange control trailer' TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Included functional groups'  TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Interchange control number'  TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n\n      *    !ISA\n      *    ISA~00~          ~00~          ~ZZ~F159B          ~ZZ~L340U\n       1300-UNSTRING-ISA.\n           MOVE SPACE                         TO WS-DTM-SW  WS-FST-SW\n                                                 WS-IT1-SW  WS-JIT-SW\n                                                 WS-LIN-SW\n                                                 WS-N1-SW   WS-N2-SW\n                                                 WS-N3-SW   WS-N4-SW\n                                                 WS-N9-SW\n                                                 WS-PER-SW  WS-REF-SW\n                                                 WS-RMR-SW\n                                                 WS-RMT-SW  WS-SHP-SW\n                                                 WS-SLN-SW  WS-TD1-SW.\n           MOVE SPACE                         TO WS-HOLD-TRAN.\n           PERFORM 1800-SHOW-X12-OUT.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12 WS-X12-13 WS-X12-14 WS-X12-15\n                    WS-X12-16 WS-X12-17.\n\n           MOVE SPACE                         TO WS-X12-17(2: 1).\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'ISA'                         TO WS-HDR.\n           MOVE 'Interchange control header'  TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element I01 pg 1558\n           MOVE 'I01'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-02 NOT = '00'\n               MOVE 'Authorization information'  TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element I03 pg 1558\n      *    allow blank security info even if code not '00'\n           MOVE 'I03'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-04                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 = '00'\n               CONTINUE\n           ELSE\n           IF WS-X12-05 = SPACE\n               CONTINUE\n           ELSE\n               MOVE 'Security information'    TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element I05 pg 1558\n           MOVE 'I05'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-06                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Interchange sender ID'       TO WS-HDR.\n           MOVE WS-X12-07                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element I05 pg 1558\n           MOVE 'I05'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-08                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Interchange receiver ID'     TO WS-HDR.\n           MOVE WS-X12-09                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Interchange date'            TO WS-HDR.\n           MOVE WS-X12-10                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Interchange time'            TO WS-HDR.\n           MOVE WS-X12-11                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element I10   pg 1558\n           MOVE 'I10'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-12                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element I11  page 1560\n           MOVE 'I11'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-13                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Interchange control number'  TO WS-HDR.\n           MOVE WS-X12-14                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element I13  page 1560\n           MOVE 'I13'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-15                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element I14  page 1560\n           MOVE 'I14'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-16                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Component element separator' TO WS-HDR.\n           MOVE WS-X12-17                     TO WS-VALUE.\n           MOVE WS-X12-17                     TO WS-COMPONENT-SEP.\n           PERFORM 3000-BUILD-X12OUT.\n\n      *    !ITA\n      *    ITA~C~~~06~~~107000~~~~~~CUR.REC.TAX AUTH-IND.TA\n       1300-UNSTRING-ITA.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12 WS-X12-13 WS-X12-14 WS-X12-15\n                    WS-X12-16 WS-X12-17 WS-X12-18.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'ITA'                         TO WS-HDR.\n           MOVE 'Allowance, charge or service'   TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 248\n           MOVE '248'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 559\n           IF WS-X12-03 NOT = SPACE\n               MOVE '559'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-03                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 560\n           IF WS-X12-04 NOT = SPACE\n               MOVE '560'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 331\n           MOVE '331'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-05                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Allowance or charge nbr' TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Allowance or charge rate'   TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Allowance or charge amount' TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 378\n           IF WS-X12-09 NOT = SPACE\n               MOVE '378'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Percent'                 TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-11 NOT = SPACE\n               MOVE 'Quantity'                TO WS-HDR\n               MOVE WS-X12-11                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 355\n           IF WS-X12-12 NOT = SPACE\n               MOVE '355'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-12                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-13 NOT = SPACE\n               MOVE 'Quantity'                TO WS-HDR\n               MOVE WS-X12-13                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-14 NOT = SPACE\n               MOVE 'Description'             TO WS-HDR\n               MOVE WS-X12-14                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 150\n           IF WS-X12-15 NOT = SPACE\n               MOVE '150'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-15                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-16 NOT = SPACE\n               MOVE 'Source subqualifier'     TO WS-HDR\n               MOVE WS-X12-16                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 662\n           IF WS-X12-17 NOT = SPACE\n               MOVE '662'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-17                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 355\n           IF WS-X12-18 NOT = SPACE\n               MOVE '355'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-18                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !ITD\n      *    ITD*09*OR.\n       1300-UNSTRING-ITD.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12 WS-X12-13 WS-X12-14 WS-X12-15\n                    WS-X12-16.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'ITD'                         TO WS-HDR.\n           MOVE 'Terms of sale/deferred terms of sale' TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 336\n           IF WS-X12-02 NOT = SPACE\n               MOVE '336'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-02                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 333\n           IF WS-X12-03 NOT = SPACE\n               MOVE '333'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-03                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Terms discount percent'  TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Terms discount due date' TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Terms discount days due' TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Terms net due date'      TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Terms net days'          TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-09 NOT = SPACE\n               MOVE 'Terms discount amount'   TO WS-HDR\n               MOVE WS-X12-09                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Terms deferred due date' TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-11 NOT = SPACE\n               MOVE 'Deferred amount due'     TO WS-HDR\n               MOVE WS-X12-11                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-12 NOT = SPACE\n               MOVE 'Percent invoice payable' TO WS-HDR\n               MOVE WS-X12-12                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-13 NOT = SPACE\n               MOVE 'Description'             TO WS-HDR\n               MOVE WS-X12-13                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-14 NOT = SPACE\n               MOVE 'Day of month'            TO WS-HDR\n               MOVE WS-X12-14                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 107\n           IF WS-X12-15 NOT = SPACE\n               MOVE '107'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-15                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-16 NOT = SPACE\n               MOVE 'Percent'                 TO WS-HDR\n               MOVE WS-X12-16                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !IT1\n      *    IT1~00000000001~288~EA~25.51833~~PU~000000023180581.\n       1300-UNSTRING-IT1.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12 WS-X12-13 WS-X12-14 WS-X12-15\n                    WS-X12-16 WS-X12-17 WS-X12-18 WS-X12-19 WS-X12-20\n                    WS-X12-21 WS-X12-22 WS-X12-23 WS-X12-24 WS-X12-25\n                    WS-X12-26.\n\n           ADD 1                              TO WS-IT1-CNT.\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           IF WS-IT1-SW = SPACE\n               MOVE 'N'                       TO WS-IT1-SW\n               MOVE 'IT1'                     TO WS-HDR\n               MOVE 'Baseline item data (invoice)' TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-02 NOT = SPACE\n               MOVE 'Assigned identification' TO WS-HDR\n               MOVE WS-X12-02                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Quantity invoiced'       TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 355\n           IF WS-X12-04 NOT = SPACE\n               MOVE '355'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Unit price'              TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 639\n           IF WS-X12-06 NOT = SPACE\n               MOVE '639'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-06                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 235\n           IF WS-X12-07 NOT = SPACE\n               MOVE WS-X12-07                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-08 NOT = SPACE\n               MOVE WS-X12-08                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-09 NOT = SPACE\n               MOVE WS-X12-09                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-10 NOT = SPACE\n               MOVE WS-X12-10                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-11 NOT = SPACE\n               MOVE WS-X12-11                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-12 NOT = SPACE\n               MOVE WS-X12-12                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-13 NOT = SPACE\n               MOVE WS-X12-13                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-14 NOT = SPACE\n               MOVE WS-X12-14                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-15 NOT = SPACE\n               MOVE WS-X12-15                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-16 NOT = SPACE\n               MOVE WS-X12-16                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-17 NOT = SPACE\n               MOVE WS-X12-17                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-18 NOT = SPACE\n               MOVE WS-X12-18                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-19 NOT = SPACE\n               MOVE WS-X12-19                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-20 NOT = SPACE\n               MOVE WS-X12-20                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-21 NOT = SPACE\n               MOVE WS-X12-21                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-22 NOT = SPACE\n               MOVE WS-X12-22                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-23 NOT = SPACE\n               MOVE WS-X12-23                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-24 NOT = SPACE\n               MOVE WS-X12-24                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-25 NOT = SPACE\n               MOVE WS-X12-25                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-26 NOT = SPACE\n               MOVE WS-X12-26                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n\n      *    !JIT\n      *    JIT*120*1100~\n       1300-UNSTRING-JIT.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           IF WS-JIT-SW = SPACE\n               MOVE 'N'                       TO WS-JIT-SW\n               MOVE 'JIT'                     TO WS-HDR\n               MOVE 'Just-in-time schedule'   TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Quantity'                    TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Time'                        TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n\n      *    !J2X\n      *    J2X**F*GLASS ASSY-FR DOOR,L.\n       1300-UNSTRING-J2X.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'J2X'                         TO WS-HDR.\n           MOVE 'Infinity item description'   TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 349\n           IF WS-X12-03 NOT = SPACE\n               MOVE '349'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-03                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Item description'        TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !LIN\n      *    LIN~~BP~8A83 7421411 AB~PO~111111.\n       1300-UNSTRING-LIN.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12 WS-X12-13 WS-X12-14 WS-X12-15\n                    WS-X12-16 WS-X12-17 WS-X12-18 WS-X12-19 WS-X12-20\n                    WS-X12-21 WS-X12-22 WS-X12-23 WS-X12-24 WS-X12-25\n                    WS-X12-26 WS-X12-27 WS-X12-28 WS-X12-29 WS-X12-30\n                    WS-X12-31 WS-X12-32.\n\n           ADD 1                              TO WS-LIN-CNT.\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           IF WS-LIN-SW = SPACE\n               MOVE 'N'                       TO WS-LIN-SW\n               MOVE 'LIN'                     TO WS-HDR\n               MOVE 'Item identification'     TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-02 NOT = SPACE\n               MOVE 'Identification'          TO WS-HDR\n               MOVE WS-X12-02                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 235\n           MOVE WS-X12-03                     TO WS-HOLD-2.\n           PERFORM 1300-PROCESS-LIN-235.\n           MOVE WS-X12-04                     TO WS-HOLD-48.\n           PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-05 NOT = SPACE\n               MOVE WS-X12-05                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-06 NOT = SPACE\n               MOVE WS-X12-06                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-07 NOT = SPACE\n               MOVE WS-X12-07                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-08 NOT = SPACE\n               MOVE WS-X12-08                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-09 NOT = SPACE\n               MOVE WS-X12-09                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-10 NOT = SPACE\n               MOVE WS-X12-10                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-11 NOT = SPACE\n               MOVE WS-X12-11                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-12 NOT = SPACE\n               MOVE WS-X12-12                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-13 NOT = SPACE\n               MOVE WS-X12-13                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-14 NOT = SPACE\n               MOVE WS-X12-14                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-15 NOT = SPACE\n               MOVE WS-X12-15                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-16 NOT = SPACE\n               MOVE WS-X12-16                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-17 NOT = SPACE\n               MOVE WS-X12-17                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-18 NOT = SPACE\n               MOVE WS-X12-18                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-19 NOT = SPACE\n               MOVE WS-X12-19                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-20 NOT = SPACE\n               MOVE WS-X12-20                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-21 NOT = SPACE\n               MOVE WS-X12-21                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-22 NOT = SPACE\n               MOVE WS-X12-22                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-23 NOT = SPACE\n               MOVE WS-X12-23                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-24 NOT = SPACE\n               MOVE WS-X12-24                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-25 NOT = SPACE\n               MOVE WS-X12-25                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-26 NOT = SPACE\n               MOVE WS-X12-26                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-27 NOT = SPACE\n               MOVE WS-X12-27                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-28 NOT = SPACE\n               MOVE WS-X12-28                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-29 NOT = SPACE\n               MOVE WS-X12-29                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-30 NOT = SPACE\n               MOVE WS-X12-30                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-31 NOT = SPACE\n               MOVE WS-X12-31                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-32 NOT = SPACE\n               MOVE WS-X12-32                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n\n       1300-PROCESS-LIN-235.\n           MOVE '235'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-HOLD-2                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n\n       1300-PROCESS-LIN-234.\n           MOVE 'Product/Service id'          TO WS-HDR.\n           MOVE WS-HOLD-48                    TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n\n      *    !LE   !LS\n      *    LE*A\n       1300-UNSTRING-LE-LS.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE WS-X12-01                     TO WS-HDR.\n           IF WS-X12-01 = 'LE'\n               MOVE 'Loop trailer'            TO WS-VALUE.\n           IF WS-X12-01 = 'LS'\n               MOVE 'Loop header'             TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Loop identifier code'        TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n\n      *    !LX\n      *    LX*1.\n       1300-UNSTRING-LX.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'LX'                          TO WS-HDR.\n           MOVE 'Assigned number'             TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Assigned number'             TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n\n      *    !MAN\n      *    MAN*PB*WH160SPIN VF170V01L.\n       1300-UNSTRING-MAN.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'MAN'                         TO WS-HDR.\n           MOVE 'Marks and numbers'           TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 88\n           MOVE '88'                          TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Marks and numbers'           TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Marks and numbers'       TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 88\n           IF WS-X12-05 NOT = SPACE\n               MOVE '88'                      TO WS-HOLD-SEGMENT\n               MOVE WS-X12-05                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Marks and numbers'       TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Marks and numbers'       TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !MEA\n      *    MEA*PD*G*510*LB~\n       1300-UNSTRING-MEA.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'MEA'                         TO WS-HDR.\n           MOVE 'Measurements'                TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 737\n           IF WS-X12-02 NOT = SPACE\n               MOVE '737'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-02                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 738\n           IF WS-X12-03 NOT = SPACE\n               MOVE '738'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-03                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Measurement value'       TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Composite unit of measure'  TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Range minimum'           TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Range maximum'           TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 935\n           IF WS-X12-08 NOT = SPACE\n               MOVE '935'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-08                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 936\n           IF WS-X12-09 NOT = SPACE\n               MOVE '936'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 752\n           IF WS-X12-10 NOT = SPACE\n               MOVE '752'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-10                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 1373\n           IF WS-X12-11 NOT = SPACE\n               MOVE '1373'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-11                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !MIT\n      *    MIT*1*VAN Migration*80*60.\n       1300-UNSTRING-MIT.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'MIT'                         TO WS-HDR.\n           MOVE 'Message identification'      TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Reference identification'    TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Description'             TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Page width'              TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Page length lines'       TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !MSG\n      *    MSG*Dear Valued Supplier, This notification is to\n       1300-UNSTRING-MSG.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Printer carriage control'   TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Advance lines before print' TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !MTX\n      *    MTX~GEN~in FCA US's order in accordance to the\n       1300-UNSTRING-MTX.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n      *    data element 363\n           IF WS-X12-02 NOT = SPACE\n               MOVE '363'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-02                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 934\n           IF WS-X12-05 NOT = SPACE\n               MOVE '934'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-05                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !NM1\n      *    NM1*PR*2*TMMTX~\n       1300-UNSTRING-NM1.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'NM1'                         TO WS-HDR.\n           MOVE 'Individual or organization name'  TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 98\n           MOVE '98'                          TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 1065\n           MOVE '1065'                        TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-03                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Last name or organization'  TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'First name'              TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Middle name'             TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Prefix'                  TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Suffix'                  TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 66\n           IF WS-X12-09 NOT = SPACE\n               MOVE '66'                      TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Identification code'     TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 706\n           IF WS-X12-11 NOT = SPACE\n               MOVE '706'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-11                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 98\n           IF WS-X12-12 NOT = SPACE\n               MOVE '98'                      TO WS-HOLD-SEGMENT\n               MOVE WS-X12-12                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !NTE\n      *    NTE*PAY*SUBJECT TO TERMS OF AGREEMENT BE\n       1300-UNSTRING-NTE.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n      *    data element 363\n           IF WS-X12-02 NOT = SPACE\n               MOVE '363'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-02                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Description'                 TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n\n      *    !N1\n      *    N1~ST~~92~AP20A\n       1300-UNSTRING-N1.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           IF WS-N1-SW = SPACE\n               MOVE 'N'                       TO WS-N1-SW\n               MOVE 'N1'                      TO WS-HDR\n               MOVE 'Name identification'     TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 98\n           MOVE '98'                          TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Name'                    TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 66\n           IF WS-X12-04 NOT = SPACE\n               MOVE '66'                      TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Identification code'     TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 706\n           IF WS-X12-06 NOT = SPACE\n               MOVE '706'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-06                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 98\n           IF WS-X12-07 NOT = SPACE\n               MOVE '98'                      TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !N2\n      *    N2*HONDA OF AMERICA, MFG.~\n       1300-UNSTRING-N2.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           IF WS-N2-SW = SPACE\n               MOVE 'N'                       TO WS-N2-SW\n               MOVE 'N2'                      TO WS-HDR\n               MOVE 'Additional name information' TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Name'                        TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Name'                    TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !N3\n      *    N3*1312 RUSSELL CAVE ROAD~\n       1300-UNSTRING-N3.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           IF WS-N3-SW = SPACE\n               MOVE 'N'                       TO WS-N3-SW\n               MOVE 'N3'                      TO WS-HDR\n               MOVE 'Address information'     TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Address information'         TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    audit address field\n           MOVE ZERO                          TO WS-TALLY.\n           INSPECT WS-X12-02 TALLYING WS-TALLY\n               FOR ALL WS-COMPONENT-SEP.\n           IF WS-TALLY > ZERO\n               MOVE SPACE                     TO X12OUT-RCD\n               STRING '   $$ component separator ' DELIMITED BY SIZE\n                      WS-COMPONENT-SEP           DELIMITED BY SIZE\n                      ' found in N3 segment' DELIMITED BY SIZE\n                      INTO X12OUT-RCD\n               ADD 1                          TO WS-ISSUE-CNT\n               PERFORM 3100-WRITE-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Address information'     TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n\n      *    !N4\n      *    N4*LEXINGTON*KY*40505*USA~\n       1300-UNSTRING-N4.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           IF WS-N4-SW = SPACE\n               MOVE 'N'                       TO WS-N4-SW\n               MOVE 'N4'                      TO WS-HDR\n               MOVE 'Geographic location'     TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-02 NOT = SPACE\n               MOVE 'City name'               TO WS-HDR\n               MOVE WS-X12-02                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'State or province code'  TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Postal code'             TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Country code'            TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 309\n           IF WS-X12-06 NOT = SPACE\n               MOVE '309'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-06                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Location identifier'     TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !N9\n      *    N9*VR*1119904.\n       1300-UNSTRING-N9.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           IF WS-N9-SW = SPACE\n               MOVE 'N'                       TO WS-N9-SW\n               MOVE 'N9'                      TO WS-HDR\n               MOVE 'Reference identification'   TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 128\n           MOVE '128'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Reference id'            TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Free-form description'   TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Time'                    TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 623\n           IF WS-X12-07 NOT = SPACE\n               MOVE '623'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Reference identifier'    TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !OTI\n      *    OTI*TA*SI*01467718***20181031*1716***856~\n       1300-UNSTRING-OTI.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12 WS-X12-13 WS-X12-14 WS-X12-15\n                    WS-X12-16 WS-X12-17 WS-X12-18.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'OTI'                         TO WS-HDR.\n           MOVE 'Original tran identification'   TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 110\n           MOVE '110'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 128\n           MOVE '128'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-03                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Reference id'                TO WS-HDR.\n           MOVE WS-X12-04                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Application senders cd'  TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Application receiver cd' TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Time'                    TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-09 NOT = SPACE\n               MOVE 'Group control nbr'       TO WS-HDR\n               MOVE WS-X12-09                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Transaction set control nbr' TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 143\n           IF WS-X12-11 NOT = SPACE\n               MOVE '143'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-11                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 480\n           IF WS-X12-12 NOT = SPACE\n               MOVE '480'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-12                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 353\n           IF WS-X12-13 NOT = SPACE\n               MOVE '353'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-13                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 640\n           IF WS-X12-14 NOT = SPACE\n               MOVE '640'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-14                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 346\n           IF WS-X12-15 NOT = SPACE\n               MOVE '346'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-15                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 306\n           IF WS-X12-16 NOT = SPACE\n               MOVE '306'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-16                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 305\n           IF WS-X12-17 NOT = SPACE\n               MOVE '305'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-17                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 641\n           IF WS-X12-18 NOT = SPACE\n               MOVE '641'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-18                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !PER\n      *    PER~EX~PARKER, DARREN~TE~313-322-0189.\n       1300-UNSTRING-PER.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           IF WS-PER-SW = SPACE\n               MOVE 'N'                       TO WS-PER-SW\n               MOVE 'PER'                     TO WS-HDR\n               MOVE 'Admin communications contact' TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 366\n           MOVE '366'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Name'                    TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 365\n           IF WS-X12-04 NOT = SPACE\n               MOVE '365'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Communication nbr'       TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 365'\n           IF WS-X12-06 NOT = SPACE\n               MOVE '365'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-06                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Communication nbr'       TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 365\n           IF WS-X12-08 NOT = SPACE\n               MOVE '365'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-08                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-09 NOT = SPACE\n               MOVE 'Communication nbr'       TO WS-HDR\n               MOVE WS-X12-09                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Contact inquiry reference' TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !PID\n      *    PID*F*08***GLASS SUN ROOF S SIA.\n       1300-UNSTRING-PID.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'PID'                         TO WS-HDR.\n           MOVE 'Product/Item description'     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 349\n           MOVE '349'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 750\n           IF WS-X12-03 NOT = SPACE\n               MOVE '750'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-03                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 559\n           IF WS-X12-04 NOT = SPACE\n               MOVE '559'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Product description code'   TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Description'             TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 752\n           IF WS-X12-07 NOT = SPACE\n               MOVE '752'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Source subqualifier'     TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 1073\n           IF WS-X12-09 NOT = SPACE\n               MOVE '1073'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Language code'           TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !PKG\n      *    PKG*S*35*AB*KG.\n       1300-UNSTRING-PKG.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'PKG'                         TO WS-HDR.\n           MOVE 'Marking, Packaging, Loading' TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 349\n           IF WS-X12-02 NOT = SPACE\n               MOVE '349'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-02                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 753\n           IF WS-X12-03 NOT = SPACE\n               MOVE '753'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-03                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 559\n           IF WS-X12-04 NOT = SPACE\n               MOVE '559'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Packaging description code'   TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Description'             TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 400\n           IF WS-X12-07 NOT = SPACE\n               MOVE '400'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !POC\n      *    POC|001|DI|2|2|EA|||BP|9827539|||PD|CAB GLASS|VP|119635.\n       1300-UNSTRING-POC.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12 WS-X12-13 WS-X12-14 WS-X12-15\n                    WS-X12-16 WS-X12-17 WS-X12-18 WS-X12-19 WS-X12-20\n                    WS-X12-21 WS-X12-22 WS-X12-23 WS-X12-24 WS-X12-25\n                    WS-X12-26 WS-X12-27 WS-X12-28.\n\n           ADD 1                              TO WS-POC-CNT.\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'POC'                         TO WS-HDR.\n           MOVE 'Line item change'            TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-02 NOT = SPACE\n               MOVE 'Assigned identification' TO WS-HDR\n               MOVE WS-X12-02                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 670\n           MOVE '670'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-03                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Quantity ordered'        TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Quantity left to receive'   TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Composite unit of measure'  TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Unit price'              TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 639\n           IF WS-X12-08 NOT = SPACE\n               MOVE '639'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-08                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 235\n           IF WS-X12-09 NOT = SPACE\n               MOVE WS-X12-09                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-10 NOT = SPACE\n               MOVE WS-X12-10                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-11 NOT = SPACE\n               MOVE WS-X12-11                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-12 NOT = SPACE\n               MOVE WS-X12-12                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-13 NOT = SPACE\n               MOVE WS-X12-13                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-14 NOT = SPACE\n               MOVE WS-X12-14                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-15 NOT = SPACE\n               MOVE WS-X12-15                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-16 NOT = SPACE\n               MOVE WS-X12-16                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-17 NOT = SPACE\n               MOVE WS-X12-17                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-18 NOT = SPACE\n               MOVE WS-X12-18                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-19 NOT = SPACE\n               MOVE WS-X12-19                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-20 NOT = SPACE\n               MOVE WS-X12-20                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-21 NOT = SPACE\n               MOVE WS-X12-21                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-22 NOT = SPACE\n               MOVE WS-X12-22                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-23 NOT = SPACE\n               MOVE WS-X12-23                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-24 NOT = SPACE\n               MOVE WS-X12-24                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-25 NOT = SPACE\n               MOVE WS-X12-25                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-26 NOT = SPACE\n               MOVE WS-X12-26                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-27 NOT = SPACE\n               MOVE WS-X12-27                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-28 NOT = SPACE\n               MOVE WS-X12-28                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n\n      *    !PRF\n      *    PRF*65851685-6463888~\n       1300-UNSTRING-PRF.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'PRF'                         TO WS-HDR.\n           MOVE 'Purchase order reference'    TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Purchase order number'       TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Release number'          TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Change order sequence nbr'  TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Assigned identification' TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Contract number'         TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 92\n           IF WS-X12-08 NOT = SPACE\n               MOVE '92'                      TO WS-HOLD-SEGMENT\n               MOVE WS-X12-08                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !PRR\n      *    PRR*1***ZQ *WATER/COOLANT ENTERING/LEAKING.\n       1300-UNSTRING-PRR.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'PRR'                         TO WS-HDR.\n           MOVE 'Problem report'              TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-02 NOT = SPACE\n               MOVE 'Assigned identification' TO WS-HDR\n               MOVE WS-X12-02                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 559\n           IF WS-X12-03 NOT = SPACE\n               MOVE '559'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-03                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Source subqualifier'     TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Complaint code'          TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Description'             TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 559\n           IF WS-X12-07 NOT = SPACE\n               MOVE '559'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Source subqualifier'     TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 1233\n           IF WS-X12-09 NOT = SPACE\n               MOVE '1233'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 559\n           IF WS-X12-10 NOT = SPACE\n               MOVE '559'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-10                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-11 NOT = SPACE\n               MOVE 'Source subqualifier'     TO WS-HDR\n               MOVE WS-X12-11                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 1234\n           IF WS-X12-12 NOT = SPACE\n               MOVE '1234'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-12                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !PRS\n      *    PRS*4~\n       1300-UNSTRING-PRS.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'PRS'                         TO WS-HDR.\n           MOVE 'Part release status'         TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 682\n           MOVE '682'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Description'             TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !PO1\n      *    PO1*00000000001*5*EA*137.14**BP*R44-6059-5~\n       1300-UNSTRING-PO1.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12 WS-X12-13 WS-X12-14 WS-X12-15\n                    WS-X12-16 WS-X12-17 WS-X12-18 WS-X12-19 WS-X12-20\n                    WS-X12-21 WS-X12-22 WS-X12-23 WS-X12-24 WS-X12-25\n                    WS-X12-26.\n\n           ADD 1                              TO WS-PO1-CNT.\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'PO1'                         TO WS-HDR.\n           MOVE 'Baseline item data'           TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-02 NOT = SPACE\n               MOVE 'Assigned identification' TO WS-HDR\n               MOVE WS-X12-02                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Quantity ordered'        TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 355\n           IF WS-X12-04 NOT = SPACE\n               MOVE '355'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Unit price'              TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 639\n           IF WS-X12-06 NOT = SPACE\n               MOVE '639'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-06                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 235\n           IF WS-X12-07 NOT = SPACE\n               MOVE WS-X12-07                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-08 NOT = SPACE\n               MOVE WS-X12-08                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-09 NOT = SPACE\n               MOVE WS-X12-09                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-10 NOT = SPACE\n               MOVE WS-X12-10                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-11 NOT = SPACE\n               MOVE WS-X12-11                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-12 NOT = SPACE\n               MOVE WS-X12-12                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-13 NOT = SPACE\n               MOVE WS-X12-13                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-14 NOT = SPACE\n               MOVE WS-X12-14                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-15 NOT = SPACE\n               MOVE WS-X12-15                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-16 NOT = SPACE\n               MOVE WS-X12-16                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-17 NOT = SPACE\n               MOVE WS-X12-17                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-18 NOT = SPACE\n               MOVE WS-X12-18                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-19 NOT = SPACE\n               MOVE WS-X12-19                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-20 NOT = SPACE\n               MOVE WS-X12-20                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-21 NOT = SPACE\n               MOVE WS-X12-21                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-22 NOT = SPACE\n               MOVE WS-X12-22                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-23 NOT = SPACE\n               MOVE WS-X12-23                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-24 NOT = SPACE\n               MOVE WS-X12-24                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-25 NOT = SPACE\n               MOVE WS-X12-25                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-26 NOT = SPACE\n               MOVE WS-X12-26                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n\n      *    !PO4\n      *    PO4**1*PC.\n       1300-UNSTRING-PO4.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12 WS-X12-13 WS-X12-14 WS-X12-15\n                    WS-X12-16 WS-X12-17 WS-X12-18 WS-X12-19.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'PO4'                         TO WS-HDR.\n           MOVE 'Item physical details'        TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-02 NOT = SPACE\n               MOVE 'Pack'                    TO WS-HDR\n               MOVE WS-X12-02                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Size'                    TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 355\n           IF WS-X12-04 NOT = SPACE\n               MOVE '355'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 103\n           IF WS-X12-05-1 NOT = SPACE\n               MOVE '103A'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-05-1               TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05-2 NOT = SPACE\n               MOVE '103B'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-05-2               TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Weight qualifier'        TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Gross weight per pack'   TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 355\n           IF WS-X12-08 NOT = SPACE\n               MOVE '355'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-08                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-09 NOT = SPACE\n               MOVE 'Gross volume per pack'   TO WS-HDR\n               MOVE WS-X12-09                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 355\n           IF WS-X12-10 NOT = SPACE\n               MOVE '355'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-10                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-11 NOT = SPACE\n               MOVE 'Length'                  TO WS-HDR\n               MOVE WS-X12-11                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-12 NOT = SPACE\n               MOVE 'Width'                   TO WS-HDR\n               MOVE WS-X12-12                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-13 NOT = SPACE\n               MOVE 'Height'                  TO WS-HDR\n               MOVE WS-X12-13                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 355\n           IF WS-X12-14 NOT = SPACE\n               MOVE '355'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-14                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-15 NOT = SPACE\n               MOVE 'Inner pack'              TO WS-HDR\n               MOVE WS-X12-15                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 752\n           IF WS-X12-16 NOT = SPACE\n               MOVE '752'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-16                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-17 NOT = SPACE\n               MOVE 'Assigned identification' TO WS-HDR\n               MOVE WS-X12-17                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-18 NOT = SPACE\n               MOVE 'Assigned identification' TO WS-HDR\n               MOVE WS-X12-18                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-19 NOT = SPACE\n               MOVE 'Number'                  TO WS-HDR\n               MOVE WS-X12-19                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !QTY\n      *    QTY*CS*21783*DH.\n       1300-UNSTRING-QTY.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'QTY'                         TO WS-HDR.\n           MOVE 'Quantity'                    TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 673\n           MOVE '673'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Quantity'                TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Composite unit of measure'  TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Free-form message'       TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !RCD\n      *    RCD**1*PC***0*PC*01*0*PC*02*0*PC*03*0*PC*08~\n       1300-UNSTRING-RCD.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12 WS-X12-13 WS-X12-14 WS-X12-15\n                    WS-X12-16 WS-X12-17 WS-X12-18 WS-X12-19 WS-X12-20\n                    WS-X12-21 WS-X12-22.\n\n           ADD 1                              TO WS-RCD-CNT.\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'RCD'                         TO WS-HDR.\n           MOVE 'Receiving conditions'        TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-02 NOT = SPACE\n               MOVE 'Assigned identification' TO WS-HDR\n               MOVE WS-X12-02                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Quantity received or accepted' TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Composite unit of measure'  TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Quantity units returned' TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Composite unit of measure'  TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Quantity in question'    TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Composite unit of measure'  TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 412\n           IF WS-X12-09 NOT = SPACE\n               MOVE '412'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Quantity in question'    TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-11 NOT = SPACE\n               MOVE 'Composite unit of measure'  TO WS-HDR\n               MOVE WS-X12-11                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 412\n           IF WS-X12-12 NOT = SPACE\n               MOVE '412'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-12                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-13 NOT = SPACE\n               MOVE 'Quantity in question'    TO WS-HDR\n               MOVE WS-X12-13                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-14 NOT = SPACE\n               MOVE 'Composite unit of measure'  TO WS-HDR\n               MOVE WS-X12-14                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 412\n           IF WS-X12-15 NOT = SPACE\n               MOVE '412'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-15                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-16 NOT = SPACE\n               MOVE 'Quantity in question'    TO WS-HDR\n               MOVE WS-X12-16                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-17 NOT = SPACE\n               MOVE 'Composite unit of measure'  TO WS-HDR\n               MOVE WS-X12-17                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 412\n           IF WS-X12-18 NOT = SPACE\n               MOVE '412'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-18                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-19 NOT = SPACE\n               MOVE 'Quantity in question'    TO WS-HDR\n               MOVE WS-X12-19                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-20 NOT = SPACE\n               MOVE 'Composite unit of measure'  TO WS-HDR\n               MOVE WS-X12-20                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 412\n           IF WS-X12-21 NOT = SPACE\n               MOVE '412'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-21                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-22 NOT = SPACE\n               MOVE 'Quantity'                TO WS-HDR\n               MOVE WS-X12-22                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !REF\n      *    REF~DK~PK\n       1300-UNSTRING-REF.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           IF WS-REF-SW = SPACE\n               MOVE 'N'                       TO WS-REF-SW\n               MOVE 'REF'                     TO WS-HDR\n               MOVE 'Reference identification'   TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 128\n           MOVE '128'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Reference id'            TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Reference description'   TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Reference identifier'    TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !REP\n      *    REP*1*PN*727525AA0A.\n       1300-UNSTRING-REP.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12 WS-X12-13 WS-X12-14 WS-X12-15\n                    WS-X12-16 WS-X12-17 WS-X12-18 WS-X12-19 WS-X12-20\n                    WS-X12-21.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'REP'                         TO WS-HDR.\n           MOVE 'Repair action'               TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-02 NOT = SPACE\n               MOVE 'Assigned identification' TO WS-HDR\n               MOVE WS-X12-02                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 235\n           IF WS-X12-03 NOT = SPACE\n               MOVE WS-X12-03                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-04 NOT = SPACE\n               MOVE WS-X12-04                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-05 NOT = SPACE\n               MOVE WS-X12-05                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-06 NOT = SPACE\n               MOVE WS-X12-06                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 559\n           IF WS-X12-07 NOT = SPACE\n               MOVE '559'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Source subqualifier'     TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 1226\n           IF WS-X12-09 NOT = SPACE\n               MOVE '1226'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Description'             TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 559\n           IF WS-X12-11 NOT = SPACE\n               MOVE '559'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-11                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-12 NOT = SPACE\n               MOVE 'Source subqualifier'     TO WS-HDR\n               MOVE WS-X12-12                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 1227\n           IF WS-X12-13 NOT = SPACE\n               MOVE '1227'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-13                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 235\n           IF WS-X12-14 NOT = SPACE\n               MOVE WS-X12-14                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-15 NOT = SPACE\n               MOVE WS-X12-15                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 1226\n           IF WS-X12-16 NOT = SPACE\n               MOVE '1226'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-16                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-17 NOT = SPACE\n               MOVE 'Description'             TO WS-HDR\n               MOVE WS-X12-17                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 559\n           IF WS-X12-18 NOT = SPACE\n               MOVE '559'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-18                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-19 NOT = SPACE\n               MOVE 'Source subqualifier'     TO WS-HDR\n               MOVE WS-X12-19                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-20 NOT = SPACE\n               MOVE 'Reference identification'   TO WS-HDR\n               MOVE WS-X12-20                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-21 NOT = SPACE\n               MOVE 'Authorization identification'   TO WS-HDR\n               MOVE WS-X12-21                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !RMR\n      *    RMR~BM~1457300~~-.31~-.31.\n       1300-UNSTRING-RMR.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           IF WS-RMR-SW = SPACE\n               MOVE 'N'                       TO WS-RMR-SW\n               MOVE 'RMR'                     TO WS-HDR\n               MOVE 'Remittance advice AR open item ref' TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 128\n           IF WS-X12-02 NOT = SPACE\n               MOVE '128'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-02                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Reference id'            TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 482\n           IF WS-X12-04 NOT = SPACE\n               MOVE '482'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Monetary amount'         TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Monetary amount'         TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Monetary amount'         TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 426\n           IF WS-X12-08 NOT = SPACE\n               MOVE '426'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-08                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-09 NOT = SPACE\n               MOVE 'Monetary amount'         TO WS-HDR\n               MOVE WS-X12-09                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !RMT\n      *    RMT*IX*833015AA0A*16.1675*4850.25*****NO\n       1300-UNSTRING-RMT.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           IF WS-RMT-SW = SPACE\n               MOVE 'N'                       TO WS-RMT-SW\n               MOVE 'RMT'                     TO WS-HDR\n               MOVE 'Remittance advice'       TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 128\n           MOVE '128'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Reference id'                TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Monetary amount'         TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Monetary amount'         TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Monetary amount'         TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Monetary amount'         TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Monetary amount'         TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-09 NOT = SPACE\n               MOVE 'Monetary amount'         TO WS-HDR\n               MOVE WS-X12-09                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 426\n           IF WS-X12-10 NOT = SPACE\n               MOVE '426'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-10                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-11 NOT = SPACE\n               MOVE 'Description'             TO WS-HDR\n               MOVE WS-X12-11                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !SAC\n      *    SAC*C*I700***53496****EA*18.\n       1300-UNSTRING-SAC.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12 WS-X12-13 WS-X12-14 WS-X12-15\n                    WS-X12-16 WS-X12-17.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'SAC'                         TO WS-HDR.\n           MOVE 'SPAC service, promotion, allowance, charge'\n                                              TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 248\n           MOVE '248'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 1300\n           IF WS-X12-03 NOT = SPACE\n               MOVE '1300'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-03                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 559\n           IF WS-X12-04 NOT = SPACE\n               MOVE '559'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 1301\n           IF WS-X12-05 NOT = SPACE\n               MOVE '1301'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-05                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Amount'                  TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 378\n           IF WS-X12-07 NOT = SPACE\n               MOVE '378'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Percent'                 TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-09 NOT = SPACE\n               MOVE 'Rate'                    TO WS-HDR\n               MOVE WS-X12-09                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 355\n           IF WS-X12-10 NOT = SPACE\n               MOVE '355'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-10                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-11 NOT = SPACE\n               MOVE 'Quantity'                TO WS-HDR\n               MOVE WS-X12-11                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-12 NOT = SPACE\n               MOVE 'Quantity'                TO WS-HDR\n               MOVE WS-X12-12                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 331\n           IF WS-X12-13 NOT = SPACE\n               MOVE '331'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-13                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-14 NOT = SPACE\n               MOVE 'Reference identification'   TO WS-HDR\n               MOVE WS-X12-14                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-15 NOT = SPACE\n               MOVE 'Option number'           TO WS-HDR\n               MOVE WS-X12-15                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-16 NOT = SPACE\n               MOVE 'Description'             TO WS-HDR\n               MOVE WS-X12-16                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 819\n           IF WS-X12-17 NOT = SPACE\n               MOVE '819'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-17                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !SCH\n      *    SCH*5*EA***010*20181208~\n       1300-UNSTRING-SCH.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12 WS-X12-13.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'SCH'                         TO WS-HDR.\n           MOVE 'Line item schedule'          TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Quantity'                    TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 355\n           MOVE '355'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-03                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 98\n           IF WS-X12-04 NOT = SPACE\n               MOVE '98'                      TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Name'                    TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 374\n           MOVE '374'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-06                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Date'                        TO WS-HDR.\n           MOVE WS-X12-07                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Time'                    TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 374\n           IF WS-X12-09 NOT = SPACE\n               MOVE '374'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-11 NOT = SPACE\n               MOVE 'Time'                    TO WS-HDR\n               MOVE WS-X12-11                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-12 NOT = SPACE\n               MOVE 'Request reference number'   TO WS-HDR\n               MOVE WS-X12-12                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-13 NOT = SPACE\n               MOVE 'Assigned identification' TO WS-HDR\n               MOVE WS-X12-13                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !SDP\n      *    SDP*Y*Y.\n       1300-UNSTRING-SDP.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'SDP'                         TO WS-HDR.\n           MOVE 'Ship delivery pattern'       TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 678\n           MOVE '678'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 679\n           MOVE '679'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-03                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 678\n           IF WS-X12-04 NOT = SPACE\n               MOVE '678'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 679\n           IF WS-X12-05 NOT = SPACE\n               MOVE '679'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-05                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 678\n           IF WS-X12-06 NOT = SPACE\n               MOVE '678'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-06                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 679\n           IF WS-X12-07 NOT = SPACE\n               MOVE '679'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 678\n           IF WS-X12-08 NOT = SPACE\n               MOVE '678'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-08                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 679\n           IF WS-X12-09 NOT = SPACE\n               MOVE '679'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !SE\n      *    SE~144~0001\n       1300-UNSTRING-SE.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'SE'                          TO WS-HDR.\n           MOVE 'Transaction set trailer'     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Number of included segments' TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Transaction set control nbr' TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n\n      *    !SHP\n      *    SHP~02~+1430~011~180101~~181106\n       1300-UNSTRING-SHP.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           IF WS-SHP-SW = SPACE\n               MOVE 'N'                       TO WS-SHP-SW\n               MOVE 'SHP'                     TO WS-HDR\n               MOVE 'Shipped/received information' TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 673\n           IF WS-X12-02 NOT = SPACE\n               MOVE '673'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-02                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Quantity'                TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 374\n           IF WS-X12-04 NOT = SPACE\n               MOVE '374'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Time'                    TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Date'                    TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Time'                    TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !SLN\n      *    SLN~1~~I~1~EA~~~~BP~68143440AA\n       1300-UNSTRING-SLN.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12 WS-X12-13 WS-X12-14 WS-X12-15\n                    WS-X12-16 WS-X12-17 WS-X12-18 WS-X12-19 WS-X12-20\n                    WS-X12-21 WS-X12-22 WS-X12-23 WS-X12-24 WS-X12-25\n                    WS-X12-26 WS-X12-27 WS-X12-28 WS-X12-29.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           IF WS-SLN-SW = SPACE\n               MOVE 'N'                       TO WS-SLN-SW\n               MOVE 'SLN'                     TO WS-HDR\n               MOVE 'Subline item detail'     TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Assigned identification'     TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Assigned identification' TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 662\n           MOVE '662'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-04                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Quantity'                TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Composite unit of measure'  TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Unit price'              TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 639\n           IF WS-X12-08 NOT = SPACE\n               MOVE '639'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-08                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 662\n           IF WS-X12-09 NOT = SPACE\n               MOVE '662'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 235\n           IF WS-X12-10 NOT = SPACE\n               MOVE WS-X12-10                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-11 NOT = SPACE\n               MOVE WS-X12-11                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-12 NOT = SPACE\n               MOVE WS-X12-12                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-13 NOT = SPACE\n               MOVE WS-X12-13                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-14 NOT = SPACE\n               MOVE WS-X12-14                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-15 NOT = SPACE\n               MOVE WS-X12-15                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-16 NOT = SPACE\n               MOVE WS-X12-16                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-17 NOT = SPACE\n               MOVE WS-X12-17                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-18 NOT = SPACE\n               MOVE WS-X12-18                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-19 NOT = SPACE\n               MOVE WS-X12-19                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-20 NOT = SPACE\n               MOVE WS-X12-20                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-21 NOT = SPACE\n               MOVE WS-X12-21                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-22 NOT = SPACE\n               MOVE WS-X12-22                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-23 NOT = SPACE\n               MOVE WS-X12-23                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-24 NOT = SPACE\n               MOVE WS-X12-24                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-25 NOT = SPACE\n               MOVE WS-X12-25                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-26 NOT = SPACE\n               MOVE WS-X12-26                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-27 NOT = SPACE\n               MOVE WS-X12-27                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n      *    data element 235\n           IF WS-X12-28 NOT = SPACE\n               MOVE WS-X12-28                 TO WS-HOLD-2\n               PERFORM 1300-PROCESS-LIN-235.\n           IF WS-X12-29 NOT = SPACE\n               MOVE WS-X12-29                 TO WS-HOLD-48\n               PERFORM 1300-PROCESS-LIN-234.\n\n      *    !SN1\n      *    SN1**34*PC~\n       1300-UNSTRING-SN1.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'SN1'                         TO WS-HDR.\n           MOVE 'Item detail (shipment)'      TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-02 NOT = SPACE\n               MOVE 'Assigned identification' TO WS-HDR\n               MOVE WS-X12-02                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Number of units shipped'     TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 355\n           MOVE '355'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-04                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Quantity shipped to date'   TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Quantity ordered'        TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 355\n           IF WS-X12-07 NOT = SPACE\n               MOVE '355'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Returnable container load code' TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 668\n           IF WS-X12-09 NOT = SPACE\n               MOVE '668'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !SSS\n      *    SSS*C*AB*PP**0.09*3576**3.22.\n       1300-UNSTRING-SSS.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'SSS'                         TO WS-HDR.\n           MOVE 'Special services'            TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 248\n           MOVE '248'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 559\n           MOVE '559'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-03                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 560\n           MOVE '560'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-04                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Service marks and nbrs'  TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Allowance or charge rate'   TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Amount'                  TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Description'             TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-09 NOT = SPACE\n               MOVE 'Quantity'                TO WS-HDR\n               MOVE WS-X12-09                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Source subqualifier'     TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !ST\n      *    ST~862~0001\n       1300-UNSTRING-ST.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03.\n\n           MOVE ZERO                          TO WS-HL-CNT.\n           MOVE ZERO                          TO WS-LIN-CNT.\n           MOVE ZERO                          TO WS-IT1-CNT.\n           MOVE ZERO                          TO WS-POC-CNT.\n           MOVE ZERO                          TO WS-PO1-CNT.\n           MOVE ZERO                          TO WS-RCD-CNT.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'ST'                          TO WS-HDR.\n           MOVE 'Transaction set header'      TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE WS-X12-02                     TO WS-HOLD-TRAN.\n      *    data element 143\n           MOVE '143'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Transaction set control nbr' TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n\n      *    !TA1\n      *    TA1*PLT90*1~\n       1300-UNSTRING-TA1.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'TA1'                         TO WS-HDR.\n           MOVE 'Interchange acknowledgment'  TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Interchange control nbr'     TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Interchange date'            TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Interchange time'            TO WS-HDR.\n           MOVE WS-X12-04                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element I17\n           MOVE 'I17'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-05                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element I18\n           MOVE 'I18'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-06                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n\n      *    !TDS\n      *    TDS*9106.\n       1300-UNSTRING-TDS.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'TDS'                         TO WS-HDR.\n           MOVE 'Total monetary value summary'   TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Amount'                      TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Amount'                  TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Amount'                  TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Amount'                  TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !TD1\n      *    TD1*PLT90*1~\n       1300-UNSTRING-TD1.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           IF WS-TD1-SW = SPACE\n               MOVE 'N'                       TO WS-TD1-SW\n               MOVE 'TD1'                     TO WS-HDR\n               MOVE 'Carrier details - quantity and weight'\n                                              TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 103\n           IF WS-X12-02-1 NOT = SPACE\n               MOVE '103A'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-02-1               TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-02-2 NOT = SPACE\n               MOVE '103B'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-02-2               TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Lading quantity'         TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Commodity mode qualifier' TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Commodity code'          TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Lading description'      TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 187\n           IF WS-X12-07 NOT = SPACE\n               MOVE '187'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Weight'                  TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 355\n           IF WS-X12-09 NOT = SPACE\n               MOVE '355'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Volume'                  TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 355\n           IF WS-X12-11 NOT = SPACE\n               MOVE '355'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-11                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !TD3\n      *    TD3*TL**MR1234~\n       1300-UNSTRING-TD3.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'TD3'                         TO WS-HDR.\n           MOVE 'Carrier details - equipment' TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 40\n           IF WS-X12-02 NOT = SPACE\n               MOVE '40'                      TO WS-HOLD-SEGMENT\n               MOVE WS-X12-02                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Equipment initial'       TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Equipment number'        TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 187\n           IF WS-X12-05 NOT = SPACE\n               MOVE '187'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-05                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Weight'                  TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 355\n           IF WS-X12-07 NOT = SPACE\n               MOVE '355'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 102\n           IF WS-X12-08 NOT = SPACE\n               MOVE '102'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-08                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 407\n           IF WS-X12-09 NOT = SPACE\n               MOVE '407'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-09                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Seal number'             TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-11 NOT = SPACE\n               MOVE 'Equipment type'          TO WS-HDR\n               MOVE WS-X12-11                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !TD4\n      *    TD4****FOR SHIPMENTS 150 LBS AND UNDER,~\n       1300-UNSTRING-TD4.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'TD4'                         TO WS-HDR.\n           MOVE 'Carrier details - special handling' TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 152\n           IF WS-X12-02 NOT = SPACE\n               MOVE '152'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-02                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 208\n           IF WS-X12-03 NOT = SPACE\n               MOVE '208'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-03                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Hazardous material class code' TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Description'             TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 1073\n           IF WS-X12-06 NOT = SPACE\n               MOVE '1073'                    TO WS-HOLD-SEGMENT\n               MOVE WS-X12-06                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !TD5\n      *    TD5**2*MWLL~\n       1300-UNSTRING-TD5.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11 WS-X12-12 WS-X12-13 WS-X12-14 WS-X12-15\n                    WS-X12-16.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'TD5'                         TO WS-HDR.\n           MOVE 'Carrier details - routing sequence' TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 133\n           IF WS-X12-02 NOT = SPACE\n               MOVE '133'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-02                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 66\n           IF WS-X12-03 NOT = SPACE\n               MOVE '66'                      TO WS-HOLD-SEGMENT\n               MOVE WS-X12-03                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Identification code'     TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 91\n           IF WS-X12-05 NOT = SPACE\n               MOVE '91'                      TO WS-HOLD-SEGMENT\n               MOVE WS-X12-05                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Routing'                 TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 368\n           IF WS-X12-07 NOT = SPACE\n               MOVE '368'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 309\n           IF WS-X12-08 NOT = SPACE\n               MOVE '309'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-08                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-09 NOT = SPACE\n               MOVE 'Location identifier'     TO WS-HDR\n               MOVE WS-X12-09                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 731\n           IF WS-X12-10 NOT = SPACE\n               MOVE '731'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-10                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 732\n           IF WS-X12-11 NOT = SPACE\n               MOVE '732'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-11                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-12 NOT = SPACE\n               MOVE 'Transit time'            TO WS-HDR\n               MOVE WS-X12-12                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 284\n           IF WS-X12-13 NOT = SPACE\n               MOVE '284'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-13                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 284\n           IF WS-X12-14 NOT = SPACE\n               MOVE '284'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-14                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 284\n           IF WS-X12-15 NOT = SPACE\n               MOVE '284'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-15                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-16 NOT = SPACE\n               MOVE 'Country code'            TO WS-HDR\n               MOVE WS-X12-16                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !TED\n      *    TED*ZZZ*ASN is Valid~\n       1300-UNSTRING-TED.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'TED'                         TO WS-HDR.\n           MOVE 'Technical error description' TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 647\n           MOVE '647'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Free-form message'       TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 721\n           IF WS-X12-04 NOT = SPACE\n               MOVE '721'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Segment position in tran set' TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Element position in segment' TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-07 NOT = SPACE\n               MOVE 'Data element reference nbr' TO WS-HDR\n               MOVE WS-X12-07                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-08 NOT = SPACE\n               MOVE 'Copy of bad data element  ' TO WS-HDR\n               MOVE WS-X12-08                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-09 NOT = SPACE\n               MOVE 'Data element new content'   TO WS-HDR\n               MOVE WS-X12-09                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !TRN\n      *    TRN~1~NVL101022858089.\n       1300-UNSTRING-TRN.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'TRN'                         TO WS-HDR.\n           MOVE 'Trace'                       TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 481\n           MOVE '481'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Reference identification'    TO WS-HDR.\n           MOVE WS-X12-03                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Originating company ID'  TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-05 NOT = SPACE\n               MOVE 'Reference identification'   TO WS-HDR\n               MOVE WS-X12-05                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !TXI\n      *    TXI*GS*1520.73*13~\n       1300-UNSTRING-TXI.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04 WS-X12-05\n                    WS-X12-06 WS-X12-07 WS-X12-08 WS-X12-09 WS-X12-10\n                    WS-X12-11.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE 'TXI'                         TO WS-HDR.\n           MOVE 'Tax information'             TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n      *    data element 963\n           MOVE '963'                         TO WS-HOLD-SEGMENT.\n           MOVE WS-X12-02                     TO WS-HOLD-CODE.\n           PERFORM 1300-EVALUATE-ELEMENT.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Monetary amount'         TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-04 NOT = SPACE\n               MOVE 'Percent'                 TO WS-HDR\n               MOVE WS-X12-04                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 955\n           IF WS-X12-05 NOT = SPACE\n               MOVE '955'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-05                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-06 NOT = SPACE\n               MOVE 'Tax jurisdiction code'   TO WS-HDR\n               MOVE WS-X12-06                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 441\n           IF WS-X12-07 NOT = SPACE\n               MOVE '441'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-07                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 662\n           IF WS-X12-08 NOT = SPACE\n               MOVE '662'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-08                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-09 NOT = SPACE\n               MOVE 'Dollar basis for percent'   TO WS-HDR\n               MOVE WS-X12-09                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-10 NOT = SPACE\n               MOVE 'Tax identification nbr'  TO WS-HDR\n               MOVE WS-X12-10                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-11 NOT = SPACE\n               MOVE 'Assigned identification' TO WS-HDR\n               MOVE WS-X12-11                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n\n      *    !UIT\n      *    UIT*EA~\n       1300-UNSTRING-UIT.\n           PERFORM 1800-SHOW-X12-OUT.\n           INSPECT WS-X12-RCDS REPLACING ALL WS-EOR BY SPACE.\n           MOVE SPACE                         TO WS-X12-FIELDS.\n           UNSTRING WS-X12-RCDS               DELIMITED BY WS-DELIM\n               INTO WS-X12-01 WS-X12-02 WS-X12-03 WS-X12-04.\n\n           MOVE SPACE                         TO WS-EXPLAIN-FIELDS.\n           MOVE WS-X12-01                     TO WS-HDR.\n           MOVE 'Unit detail'                 TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           MOVE 'Composite unit of measure'   TO WS-HDR.\n           MOVE WS-X12-02                     TO WS-VALUE.\n           PERFORM 3000-BUILD-X12OUT.\n           IF WS-X12-03 NOT = SPACE\n               MOVE 'Unit price'              TO WS-HDR\n               MOVE WS-X12-03                 TO WS-VALUE\n               PERFORM 3000-BUILD-X12OUT.\n      *    data element 639\n           IF WS-X12-04 NOT = SPACE\n               MOVE '639'                     TO WS-HOLD-SEGMENT\n               MOVE WS-X12-04                 TO WS-HOLD-CODE\n               PERFORM 1300-EVALUATE-ELEMENT\n               PERFORM 3000-BUILD-X12OUT.\n\n      *---------------------------------------\n\n\n      *---------------------------------------\n      *    loop through PARM01 and match element code and number\n      *    to a description\n      *---------------------------------------\n       1300-EVALUATE-ELEMENT.\n           MOVE SPACE                         TO WS-HDR.\n           STRING '?? '                       DELIMITED BY SIZE\n                  WS-HOLD-SEGMENT             DELIMITED BY SIZE\n                  INTO WS-HDR.\n           MOVE SPACE                         TO WS-VALUE.\n           IF WS-HOLD-CODE = SPACE\n               STRING '$$ missing but mandatory '\n                                              DELIMITED BY SIZE\n                      WS-HOLD-SEGMENT         DELIMITED BY SIZE\n                      INTO WS-VALUE\n           ELSE\n               STRING '?? '                   DELIMITED BY SIZE\n                      WS-HOLD-CODE            DELIMITED BY SIZE\n                      ' element '             DELIMITED BY SIZE\n                      WS-HOLD-SEGMENT         DELIMITED BY SIZE\n                      INTO WS-VALUE.\n           PERFORM VARYING WS-SUB2 FROM 1 BY 1\n               UNTIL WS-SUB2 > WS-PARM01-MAX\n               IF WS-P1-ELEMENT(WS-SUB2) = WS-HOLD-SEGMENT\n                 IF WS-P1-CODE(WS-SUB2) = SPACE\n                     MOVE WS-P1-DESC(WS-SUB2) TO WS-HDR\n                 ELSE\n                 IF WS-P1-CODE(WS-SUB2) = WS-HOLD-CODE\n                     MOVE WS-P1-DESC(WS-SUB2) TO WS-VALUE\n                     MOVE WS-PARM01-MAX       TO WS-SUB2\n                 END-IF\n                 END-IF\n               END-IF\n           END-PERFORM.\n           IF WS-VALUE(1: 10) = '$$ missing'\n               ADD 1                          TO WS-ISSUE-CNT\n           ELSE\n           IF WS-HDR(1: 3) = '?? '\n               ADD 1                          TO WS-QUESTION-CNT\n               PERFORM 1400-TRACK-HDR\n           ELSE\n           IF WS-VALUE(1: 3) = '?? '\n               ADD 1                          TO WS-QUESTION-CNT\n               PERFORM 1400-TRACK-CODE.\n\n      *---------------------------------------\n      *    add unmatched codes to table and list at end\n      *---------------------------------------\n       1400-TRACK-HDR.\n           PERFORM VARYING WS-SUB3 FROM 1 BY 1\n               UNTIL WS-SUB3 > 11\n               IF WS-SUB3 > 10\n                   MOVE 'Y'                   TO WS-ELE-OVER10-SW\n               ELSE\n               IF WS-HDR = WS-HI-30(WS-SUB3)\n                   MOVE 11                    TO WS-SUB3\n               ELSE\n               IF WS-HI-30(WS-SUB3) = SPACE\n                   MOVE WS-HDR                TO WS-HI-30(WS-SUB3)\n                   MOVE 11                    TO WS-SUB3\n               END-IF\n               END-IF\n               END-IF\n           END-PERFORM.\n\n      *---------------------------------------\n      *    add unmatched codes to table and list at end\n      *---------------------------------------\n       1400-TRACK-CODE.\n           PERFORM VARYING WS-SUB3 FROM 1 BY 1\n               UNTIL WS-SUB3 > 31\n               IF WS-SUB3 > 30\n                   MOVE 'Y'                   TO WS-CODE-OVER30-SW\n               ELSE\n               IF WS-VALUE = WS-CI-47(WS-SUB3)\n                   MOVE 31                    TO WS-SUB3\n               ELSE\n               IF WS-CI-47(WS-SUB3) = SPACE\n                   MOVE WS-VALUE              TO WS-CI-47(WS-SUB3)\n                   MOVE 31                    TO WS-SUB3\n               END-IF\n               END-IF\n               END-IF\n           END-PERFORM.\n\n\n\n       1800-SHOW-X12-OUT.\n           PERFORM VARYING WS-SUB2 FROM 1 BY 1\n               UNTIL WS-SUB2 > 5\n               IF WS-X12-RCD(WS-SUB2) NOT = SPACE\n                   MOVE WS-X12-RCD(WS-SUB2)   TO X12OUT-RCD\n                   PERFORM 3100-WRITE-X12OUT\n               END-IF\n           END-PERFORM.\n\n       2600-DETERMINE-EOR-ISA.\n           PERFORM 2600-INITIAL-X12-IEA-LOOP\n               VARYING WS-SUB2 FROM 80 BY -1\n               UNTIL WS-SUB2 < 3.\n           IF WS-EOR NOT = WS-EOR-ISA\n               MOVE WS-EOR-ISA                TO WS-EOR\n               PERFORM 2600-SHOW-EOR.\n           IF X12IN-RCD(4: 1) NOT = WS-DELIM\n               MOVE X12IN-RCD(4: 1)           TO WS-DELIM\n               DISPLAY '**** ISA Delimiter         ' WS-DELIM.\n\n       2600-DETERMINE-EOR-UNB.\n           PERFORM 2600-INITIAL-X12-UNZ-LOOP\n               VARYING WS-SUB2 FROM 80 BY -1\n               UNTIL WS-SUB2 < 3.\n           IF WS-EOR NOT = WS-EOR-UNB\n               MOVE WS-EOR-UNB                TO WS-EOR\n               PERFORM 2600-SHOW-EOR.\n           IF X12IN-RCD(4: 1) NOT = WS-DELIM\n               MOVE X12IN-RCD(4: 1)           TO WS-DELIM\n               DISPLAY '**** UNB Delimiter         ' WS-DELIM.\n\n       2600-INITIAL-X12-IEA-LOOP.\n           IF X12IN-RCD(WS-SUB2: 1) NOT = SPACE\n               MOVE X12IN-RCD(WS-SUB2: 1)     TO WS-EOR-ISA\n               MOVE ZERO                      TO WS-SUB2.\n\n       2600-INITIAL-X12-UNZ-LOOP.\n           IF X12IN-RCD(WS-SUB2: 1) NOT = SPACE\n               MOVE X12IN-RCD(WS-SUB2: 1)     TO WS-EOR-UNB\n               MOVE ZERO                      TO WS-SUB2.\n\n       2600-SHOW-EOR.\n           IF WS-X12-SW = 'I'\n             IF WS-EOR-ISA = SPACE\n                 DISPLAY '**** X12SHOW ISA end-of-record delimiter'\n                 DISPLAY '**** not determined'\n                 DISPLAY '**** terminating program'\n                 MOVE 'Y'                     TO WS-END-X12IN-SW\n             ELSE\n             IF WS-EOR-ISA = WS-X22\n                 DISPLAY '**** ISA EOR delimiter     x22'\n             ELSE\n             IF WS-EOR-ISA = WS-X0D\n                 DISPLAY '**** ISA EOR delimiter     x0D'\n             ELSE\n                 DISPLAY '**** ISA EOR delimiter     ' WS-EOR-ISA.\n\n           IF WS-X12-SW = 'U'\n             IF WS-EOR-UNB = SPACE\n                 DISPLAY '**** X12SHOW UNB end-of-record delimiter'\n                 DISPLAY '**** not determined'\n                 DISPLAY '**** terminating program'\n                 MOVE 'Y'                     TO WS-END-X12IN-SW\n             ELSE\n                 DISPLAY '**** UNB EOR delimiter     ' WS-EOR-UNB.\n\n       3000-BUILD-X12OUT.\n           IF WS-VALUE = SPACE\n               MOVE '$$ missing but mandatory'   TO WS-VALUE\n               ADD 1                          TO WS-ISSUE-CNT.\n           MOVE WS-EXPLAIN-FIELDS             TO X12OUT-RCD.\n           PERFORM 3100-WRITE-X12OUT.\n\n       3100-WRITE-X12OUT.\n           WRITE X12OUT-RECORD.\n           IF WS-STAT = ZERO\n               ADD 1                          TO WS-WRITE-X12OUT-CNT\n           ELSE\n               DISPLAY '**** X12SHOW write error on X12OUT'\n               DISPLAY '**** File stat           ' WS-STAT\n               MOVE 'Y'                       TO WS-END-X12IN-SW\n               MOVE +3100                     TO WS-RETURN-CODE.\n\n      ************************************ END X12SHOW\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "X12SRUN": {"ttr": 24585, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01&\\x00$\\x01\\x181?\\x01\\x192?\\x11#\\x001\\x00\\x17\\x00\\x00\\xc9\\xc1\\xd5\\xd5\\xd6\\xd5\\xc5@@@'", "ispf": {"version": "01.38", "flags": 0, "createdate": "2018-11-09T00:00:00", "modifydate": "2019-11-19T11:23:24", "lines": 49, "newlines": 23, "modlines": 0, "user": "IANNONE"}, "text": "/*PRIORITY     01\n//useridS  JOB (5000,'X12SHOW explain X12 fields '),\n//             'X12SHOW X12 fields  ',\n//             CLASS=x,\n//             MSGCLASS=x,\n//             MSGLEVEL=(1,1)\n//JOBLIB   DD  DSN=userid.ISPF.OBJ,DISP=SHR\n//*-------------------------------------------------\n//X12O     PROC SLIN='0000000',FIN='',SFX=XXXXXXXX\n//*-------------------------------------------------\n//S010     EXEC PGM=IEFBR14,\n//             REGION=5120K\n//SYSPRINT DD  SYSOUT=*\n//DD01     DD  DSN=userid.UNSTRING.&SFX..EXPL,\n//             DISP=(MOD,DELETE,DELETE),\n//             SPACE=(TRK,(1,1)),UNIT=LOFDA\n//*-------------------------------------------------\n//*\n//*  Loop through UNSTRING contents, explaining field values\n//*\n//*  SLIN=0000000   select only one ISA segment on/after line\n//*                 note: '       ' or 0000000 = ignore value\n//*  SFX =          display plant name\n//*  FIN =          use '.PICK' input file\n//*\n//*-------------------------------------------------\n//S020     EXEC PGM=X12SHOW,\n//             REGION=5120K,\n//             COND=(0,NE),\n//             PARM='&SLIN&SFX/'\n//STEPLIB  DD  DISP=SHR,DSN=userid.ISPF.OBJ\n//SYSOUT   DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//X12IN    DD  DISP=SHR,DSN=your X12 source file\n//*12IN    DD  DISP=SHR,DSN=userid.ISPF.FILE488(X12FILE)  *example X12\n//PARM01   DD  DISP=SHR,DSN=userid.ISPF.FILE488(X12INPUT)\n//X12OUT   DD  DSN=userid.UNSTRING.&SFX..EXPL,\n//             DISP=(NEW,CATLG,DELETE),\n//             SPACE=(TRK,(2000,100),RLSE),UNIT=LOFDA,\n//             RECFM=FB,DSORG=PS,LRECL=80,BLKSIZE=27200\n//*--------------------------------------\n//*  see parm examples above\n//*  to select .PICK as input, set FIN='.PICK',\n//*--------------------------------------\n//         PEND\n//J010     EXEC X12O,SLIN=0000000,FIN='',SFX=FORD\n//J020     EXEC X12O,SLIN=0000000,FIN='',SFX=HONDA\n//*-------------------------------------------------\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT488/FILE488.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT488", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}