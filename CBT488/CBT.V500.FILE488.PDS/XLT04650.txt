
       TITLE '  XLT04650: edit lrecl 32700 records '.
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    XLT04650.
      **********************************************************CX003B
      *@@@ C3 edit lrecl 32700 records
      ****************************************************************
      *
      *  I am interested in knowing if/where these programs
      *  are in use.     Email:  jiannon@me.com
      *
      ****************************************************************
      * Date written: 07/05/2019
      * Author      : Jim Iannone
      *               Loop through lrecl 32700 VB records and replace
      *               strings with longer or shorter strings
      *               or zap portions of strings by setting the
      *               string length to zero.  Also allow zapping
      *               trailing spaces when last character in record
      *               is a specified EOR character.
      *
      ****************************************************************
      * Date changed: 08/02/2019 Iannone
      *               allow suppressing display of changes
      ****************************************************************
      * Date changed: 01/30/2020 Iannone
      *               add relational group logic
      ****************************************************************

       ENVIRONMENT DIVISION.

       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           C01 IS PAGE-TOP.

       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

           SELECT LONGREC              ASSIGN TO LONGREC
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

           SELECT LONGOUT              ASSIGN TO LONGOUT
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

           SELECT PARM01               ASSIGN TO PARM01
                                       ORGANIZATION IS SEQUENTIAL
                                       ACCESS MODE IS SEQUENTIAL
                                       FILE STATUS IS WS-STAT.

       DATA DIVISION.
       FILE SECTION.

       FD  LONGREC
           RECORDING MODE V
           RECORD IS VARYING IN SIZE
           FROM 1  TO 32700 CHARACTERS
           DEPENDING ON WS-LONGREC-RCD-LEN.

       01  LONGREC-RECORD.
           05  LONGREC-RCD             PIC X(32700).

       FD  LONGOUT
           RECORDING MODE V
           RECORD IS VARYING IN SIZE
           FROM 1  TO 32700 CHARACTERS
           DEPENDING ON WS-LONGOUT-RCD-LEN.

       01  LONGOUT-RECORD.
           05  LONGOUT-RCD             PIC X(32700).

       FD  PARM01
           RECORDING MODE F.
       01  PARM01-RECORD.
           05  PARM01-RCD              PIC  X(80).
           05  PARM01-RCD1             REDEFINES PARM01-RCD.
               10  PARM01-DOCU         PIC  X.
               10  FILLER              PIC  X.
               10  PARM01-CODE         PIC  X.
               10  FILLER              PIC  X.
               10  PARM01-STR-O.
                   15  PARM01-EOR      PIC  X.
                   15  PARM01-STR-2X30 PIC  X(29).
               10  FILLER              PIC  X.
               10  PARM01-LEN-O        PIC  XX.
               10  FILLER              PIC  X.
               10  PARM01-STR-N        PIC  X(30).
               10  FILLER              PIC  X.
               10  PARM01-LEN-N        PIC  XX.
               10  PARM01-GROUP        PIC  X.
               10  FILLER              PIC  X(08).
           05  PARM01-RCD2             REDEFINES PARM01-RCD.
               10  FILLER              PIC  X(04).
               10  PARM01-R-GROUP      PIC  X.
               10  FILLER              PIC  X.
               10  PARM01-R-SEP        PIC  X.
               10  FILLER              PIC  X.
               10  PARM01-R-SENDER     PIC  X(15).
               10  FILLER              PIC  X(49).
               10  FILLER              PIC  X(08).

       WORKING-STORAGE SECTION.

       01  WS-START.
           05  FILLER                  PIC  X(32)    VALUE
               ' Working storage XLT04650 start '.

       01  WS-WORK-FIELDS.
           05  WS-STAT                 PIC  99       VALUE ZERO.
           05  WS-PARM01-MAX           PIC  9(05)    VALUE ZERO.
           05  WS-EOR-MAX              PIC  9(05)    VALUE ZERO.
           05  WS-SEP-MAX              PIC  9(05)    VALUE ZERO.
           05  WS-GRP-MAX              PIC  9(05)    VALUE ZERO.
           05  WS-RETURN-CODE          PIC S9(04)    VALUE ZERO COMP.
           05  WS-TALLY                PIC S9(05)    VALUE ZERO COMP.
           05  WS-LS-DATA              PIC  X(10)    VALUE SPACE.
           05  FILLER REDEFINES WS-LS-DATA.
               10  WS-LS-ZAP-TRAIL     PIC  X.
               10  WS-LS-EXTRA         PIC  X(09).
           05  WS-1-CYMD               PIC  X(08)    VALUE SPACE.
           05  WS-LONGREC-RCD-LEN      PIC  9(05)    VALUE ZERO.
           05  WS-LONGOUT-RCD-LEN      PIC  9(05)    VALUE ZERO.
           05  WS-MAX-POS              PIC  9(05)    VALUE ZERO.
           05  WS-R1-LEN               PIC  9(05)    VALUE ZERO.
           05  WS-R2-LEN               PIC  9(05)    VALUE ZERO.
           05  WS-R4-LEN               PIC  9(05)    VALUE ZERO.
           05  WS-LEN-O                PIC  99       VALUE ZERO.
           05  WS-LEN-N                PIC  99       VALUE ZERO.
           05  WS-GRP-ERR              PIC  X(200)   VALUE SPACE.
           05  WS-INTRDR-END           PIC  X(05)    VALUE '/*EOF'.
           05  WS-ZAP-OCCUR-SW         PIC  X        VALUE SPACE.
           05  WS-EOR-SW               PIC  X        VALUE SPACE.
           05  WS-CHANGE-SW            PIC  X        VALUE SPACE.
           05  WS-PARM-EDIT-SW         PIC  X        VALUE SPACE.
           05  WS-CODE                 PIC  X        VALUE SPACE.
           05  WS-SEP                  PIC  X        VALUE SPACE.
           05  WS-GRP-SW               PIC  X        VALUE SPACE.
           05  WS-SEP-SW               PIC  X        VALUE SPACE.
           05  WS-BEFORE-SW            PIC  X        VALUE SPACE.
           05  WS-AFTER-SW             PIC  X        VALUE SPACE.
           05  WS-SHOW-BEFORE          PIC  X(32)    VALUE SPACE.
           05  WS-SHOW-AFTER           PIC  X(32)    VALUE SPACE.
           05  WS-SENDER               PIC  X(20)    VALUE SPACE.
           05  WS-XA1                  PIC  X        VALUE X'A1'.
           05  WS-X0D                  PIC  X        VALUE X'0D'.
           05  WS-X1C                  PIC  X        VALUE X'1C'.
           05  WS-X22                  PIC  X        VALUE X'22'.
           05  WS-X7C                  PIC  X        VALUE X'7C'.
           05  WS-X7D                  PIC  X        VALUE X'7D'.
           05  WS-STR-O                PIC  X(30)    VALUE SPACE.
           05  WS-STR-N                PIC  X(30)    VALUE SPACE.
           05  WS-UNSTR-FIELDS.
               10  WS-UNSTR1           PIC  X(20)    VALUE SPACE.
               10  WS-UNSTR2           PIC  X(20)    VALUE SPACE.
               10  WS-UNSTR3           PIC  X(20)    VALUE SPACE.
               10  WS-UNSTR4           PIC  X(20)    VALUE SPACE.
               10  WS-UNSTR5           PIC  X(20)    VALUE SPACE.
               10  WS-UNSTR6           PIC  X(20)    VALUE SPACE.
               10  WS-UNSTR7           PIC  X(20)    VALUE SPACE.
               10  WS-UNSTR8           PIC  X(20)    VALUE SPACE.
           05  WS-HOLD-R1              PIC  X(32700) VALUE SPACE.
           05  WS-HOLD-R2              PIC  X(32700) VALUE SPACE.

       01  WS-COUNT-FIELDS             COMP-3.
           05  WS-READ-LONGREC-CNT     PIC S9(07)    VALUE ZERO.
           05  WS-WRITE-LONGOUT-CNT    PIC S9(07)    VALUE ZERO.
           05  WS-LINE-CHANGE-CNT      PIC S9(07)    VALUE ZERO.

       01  WS-SUBSCRIPTS               COMP.
           05  WS-SUB1                 PIC S9(05)    VALUE ZERO.
           05  WS-SUB2                 PIC S9(05)    VALUE ZERO.
           05  WS-SUB3                 PIC S9(05)    VALUE ZERO.
           05  WS-SUB4                 PIC S9(05)    VALUE ZERO.
           05  WS-SUB5                 PIC S9(05)    VALUE ZERO.
           05  WS-STR1                 PIC S9(05)    VALUE ZERO.
           05  WS-STR2                 PIC S9(05)    VALUE ZERO.

       01  WS-TABLES.
           05  WS-PARM01-TABLE         PIC  X(13200) VALUE SPACE.
           05  WS-PARM01-ITEM REDEFINES WS-PARM01-TABLE
                                       OCCURS 200 TIMES.
               10  WS-P1-STR-O         PIC  X(30).
               10  WS-P1-LEN-O         PIC  99.
               10  WS-P1-STR-N         PIC  X(30).
               10  WS-P1-LEN-N         PIC  99.
               10  WS-P1-CODE          PIC  X.
               10  WS-P1-GRP           PIC  X.
           05  WS-GROUP-TABLE          PIC  X(850)   VALUE SPACE.
           05  WS-GROUP-ITEM REDEFINES WS-GROUP-TABLE
                                       OCCURS 50 TIMES.
               10  WS-G1-GRP           PIC  X.
               10  WS-G1-SEP           PIC  X.
               10  WS-G1-SND           PIC  X(15).
           05  WS-SEP-TABLE            PIC  X(20)    VALUE SPACE.
           05  WS-SEP-ITEM REDEFINES WS-SEP-TABLE
                                       OCCURS 20 TIMES.
               10  WS-S1-SEP           PIC  X.
           05  WS-EOR-TABLE            PIC  X(20)    VALUE SPACE.
           05  WS-EOR-ITEM REDEFINES WS-EOR-TABLE
                                       OCCURS 20 TIMES.
               10  WS-EOR              PIC  X.

       01  WS-SWITCHES.
           05  WS-END-LONGREC-SW       PIC  X        VALUE 'N'.
               88  END-OF-LONGREC                    VALUE 'Y'.
               88  MORE-LONGREC-RCDS                 VALUE 'N'.

       01  WS-END.
           05  FILLER                  PIC  X(16)    VALUE
               '  XLT04650 END  '.

       LINKAGE SECTION.

       01  LS-FIELD.
           05  LS-LENGTH               PIC S9(04)    COMP.
           05  LS-DATA                 PIC  X(10).
           05  FILLER REDEFINES LS-DATA.
               10  LS-ZAP-TRAIL        PIC  X.
               10  LS-EXTRA            PIC  X(09).

      /

       PROCEDURE DIVISION USING LS-FIELD.

       0100-PROGRAM-ENTRY.
           MOVE +0000                         TO WS-RETURN-CODE.
           PERFORM 0200-OPEN-FILES.
           DISPLAY '    '.
           DISPLAY '**** XLT04650 alter lrecl 32700 records'.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0400-PROCESS-LONGREC.

           IF WS-EOR-MAX > ZERO
             IF WS-ZAP-OCCUR-SW = 'Y'
                 DISPLAY '**** EOR delimiters       ' WS-EOR-MAX
                         ' of 20'
             ELSE
                 CONTINUE
           ELSE
           IF WS-LS-ZAP-TRAIL = 'Y'
               DISPLAY '**** No EOR delimiters specified - '
                       'zap processing skipped'.

           DISPLAY '**** Records in LONGREC   ' WS-READ-LONGREC-CNT.
           DISPLAY '**** Records in LONGOUT   ' WS-WRITE-LONGOUT-CNT.

           IF WS-PARM01-MAX = ZERO
             IF WS-ZAP-OCCUR-SW = 'Y'
                 DISPLAY '**** Copying records as-is with trailing'
                         ' spaces removed'
             ELSE
                 DISPLAY '**** Copying records as-is'
           ELSE
           IF WS-ZAP-OCCUR-SW = 'Y'
               DISPLAY '**** LONGOUT rcds changed ' WS-LINE-CHANGE-CNT
                       ' with trailing spaces removed'
           ELSE
               DISPLAY '**** LONGOUT rcds changed ' WS-LINE-CHANGE-CNT.

           IF WS-RETURN-CODE = ZERO
               PERFORM 0300-CLOSE-FILES
           ELSE
               DISPLAY '**** XLT04650 cond code ' WS-RETURN-CODE
                       ' set by program'
               MOVE WS-RETURN-CODE            TO RETURN-CODE.

           DISPLAY '**** XLT04650 EOJ encountered '.
           DISPLAY '    '.
           STOP RUN.

       0200-OPEN-FILES.
           OPEN INPUT  LONGREC.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** XLT04650 open error on LONGREC'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.
           OPEN OUTPUT LONGOUT.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** XLT04650 open error on LONGOUT'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.
           OPEN INPUT  PARM01.
           IF WS-STAT NOT = ZERO
               DISPLAY '**** XLT04650 open error on PARM01'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE +0200                     TO WS-RETURN-CODE.

       0300-CLOSE-FILES.
           CLOSE LONGOUT.
           CLOSE LONGREC.
           CLOSE PARM01.

      *---------------------------------------
      *    X
      *---------------------------------------
       0400-PROCESS-LONGREC.

           PERFORM 0500-GET-LINKAGE.

           PERFORM VARYING WS-SUB1 FROM 1 BY 1
               UNTIL WS-SUB1 > 200
               MOVE SPACE                     TO WS-P1-STR-O(WS-SUB1)
               MOVE SPACE                     TO WS-P1-STR-N(WS-SUB1)
               MOVE SPACE                     TO WS-P1-CODE(WS-SUB1)
               MOVE SPACE                     TO WS-P1-GRP(WS-SUB1)
               MOVE ZERO                      TO WS-P1-LEN-O(WS-SUB1)
               MOVE ZERO                      TO WS-P1-LEN-N(WS-SUB1)
           END-PERFORM.
           IF WS-RETURN-CODE = ZERO
               MOVE ZERO                      TO WS-SUB1 WS-SUB2
               MOVE ZERO                      TO WS-SUB3 WS-SUB4
               MOVE SPACE                     TO WS-GROUP-TABLE
               MOVE SPACE                     TO WS-EOR-TABLE
               MOVE SPACE                     TO WS-SEP-TABLE
               PERFORM 0700-LOAD-PARM01 THRU
                       0700-LOAD-PARM01-EXIT.

           IF WS-PARM01-MAX > ZERO
               DISPLAY '**** Change requests      ' WS-PARM01-MAX
                       ' of 200'.

           IF WS-RETURN-CODE = ZERO
               PERFORM 1100-GET-LONGREC
                   UNTIL END-OF-LONGREC.

       0500-GET-LINKAGE.
           IF LS-LENGTH = ZERO
               DISPLAY '**** Parm length is zero '
               MOVE +0500                     TO WS-RETURN-CODE
           ELSE
           IF LS-LENGTH > LENGTH OF WS-LS-DATA
               DISPLAY '**** Parm length is excessive '
               MOVE +0500                     TO WS-RETURN-CODE
           ELSE
               MOVE LS-DATA(1: LS-LENGTH)     TO WS-LS-DATA.

      *---------------------------------------
      *    load XXX...
      *---------------------------------------
       0700-LOAD-PARM01.
           READ PARM01.
           IF WS-STAT = 10
               MOVE WS-SUB1                   TO WS-PARM01-MAX
               MOVE WS-SUB2                   TO WS-EOR-MAX
               MOVE WS-SUB3                   TO WS-SEP-MAX
               MOVE WS-SUB4                   TO WS-GRP-MAX
               GO TO 0700-LOAD-PARM01-EXIT
           ELSE
           IF WS-STAT > ZERO
               DISPLAY '**** XLT04650 read error on PARM01'
               DISPLAY '**** File stat = ' WS-STAT
               MOVE +0700                     TO WS-RETURN-CODE
               GO TO 0700-LOAD-PARM01-EXIT.

           IF PARM01-DOCU = '*'
               GO TO 0700-LOAD-PARM01.

           IF PARM01-CODE = 'C' OR 'N'
               MOVE SPACE                     TO WS-PARM-EDIT-SW
               PERFORM 0700-PARM-EDIT
               IF WS-PARM-EDIT-SW = SPACE
                 IF WS-SUB1 < 200
                     ADD 1                    TO WS-SUB1
                     PERFORM 0700-PARM01-FIELDS.

           IF PARM01-CODE = 'E'
             IF WS-SUB2 < 20
                 ADD 1                        TO WS-SUB2
                 MOVE PARM01-EOR              TO WS-EOR(WS-SUB2).

           IF PARM01-CODE = 'S'
             IF WS-SUB3 < 20
                 ADD 1                        TO WS-SUB3
                 MOVE PARM01-EOR              TO WS-S1-SEP(WS-SUB3).

           IF PARM01-CODE = 'R'
             IF WS-SUB4 < 50
                 ADD 1                        TO WS-SUB4
                 MOVE PARM01-R-GROUP          TO WS-G1-GRP(WS-SUB4)
                 MOVE PARM01-R-SEP            TO WS-G1-SEP(WS-SUB4)
                 MOVE PARM01-R-SENDER         TO WS-G1-SND(WS-SUB4).

           GO TO 0700-LOAD-PARM01.

       0700-LOAD-PARM01-EXIT. EXIT.

       0700-PARM-EDIT.
           IF PARM01-STR-O = SPACE
               DISPLAY '**** old parm string is blank - skipping'
               MOVE 'Y'                       TO WS-PARM-EDIT-SW.
           IF PARM01-LEN-O NUMERIC
               MOVE PARM01-LEN-O              TO WS-LEN-O
               IF WS-LEN-O = ZERO
                   DISPLAY '**** old parm length is zero - skipping'
                   MOVE 'Y'                   TO WS-PARM-EDIT-SW
               ELSE
               IF WS-LEN-O > 30
                   DISPLAY '**** old parm length > 30 - skipping'
                   MOVE 'Y'                   TO WS-PARM-EDIT-SW
               ELSE
                   CONTINUE
           ELSE
               DISPLAY '**** old parm length is not numeric '
                       '- skipping'
               MOVE 'Y'                       TO WS-PARM-EDIT-SW.
           IF PARM01-LEN-N NUMERIC
               MOVE PARM01-LEN-N              TO WS-LEN-N
               IF WS-LEN-N > 30
                   DISPLAY '**** new parm length > 30 - skipping'
                   MOVE 'Y'                   TO WS-PARM-EDIT-SW
               ELSE
                   CONTINUE
           ELSE
               DISPLAY '**** new parm length is not numeric '
                       '- skipping'
               MOVE 'Y'                       TO WS-PARM-EDIT-SW.

       0700-PARM01-FIELDS.
           MOVE PARM01-STR-O                  TO WS-P1-STR-O(WS-SUB1).
           MOVE PARM01-LEN-O                  TO WS-P1-LEN-O(WS-SUB1).
           MOVE PARM01-STR-N                  TO WS-P1-STR-N(WS-SUB1).
           MOVE PARM01-LEN-N                  TO WS-P1-LEN-N(WS-SUB1).
           MOVE PARM01-CODE                   TO WS-P1-CODE(WS-SUB1).
           MOVE PARM01-GROUP                  TO WS-P1-GRP(WS-SUB1).

      *---------------------------------------

       1100-GET-LONGREC.
           PERFORM 1100-READ-LONGREC.
           IF MORE-LONGREC-RCDS
               ADD 1                          TO WS-READ-LONGREC-CNT
               PERFORM 1200-SELECT THRU
                       1200-SELECT-EXIT.

       1100-READ-LONGREC.
           READ LONGREC
             AT END
                 MOVE 'Y'                     TO WS-END-LONGREC-SW.

      *---------------------------------------
      *    WS-SUB1   parm loop subscript
      *    WS-SUB2   vb record original subscript
      *    WS-SUB3   vb record altered subscript
      *    WS-SUB4   crunch subscript
      *    WS-SUB5   EOR character test subscript
      *---------------------------------------
       1200-SELECT.
           MOVE SPACE                         TO WS-CHANGE-SW.
           IF WS-PARM01-MAX = ZERO
               MOVE LONGREC-RCD               TO WS-HOLD-R2
               MOVE WS-LONGREC-RCD-LEN        TO WS-R2-LEN
           ELSE
               PERFORM 1300-DETERMINE-X12-SEGMENT
               PERFORM 1300-PARM-LOOP
                   VARYING WS-SUB1 FROM 1 BY 1
                   UNTIL WS-SUB1 > WS-PARM01-MAX.
           IF WS-CHANGE-SW = 'Y'
               ADD 1                          TO WS-LINE-CHANGE-CNT.
           IF WS-LS-ZAP-TRAIL = 'Y'
               PERFORM 1500-CRUNCH-TRAIL-SPACES.
           MOVE WS-HOLD-R2                    TO LONGOUT-RCD.
           MOVE WS-R2-LEN                     TO WS-LONGOUT-RCD-LEN.
           PERFORM 2300-WRITE-LONGOUT.

       1200-SELECT-EXIT. EXIT.

       1300-DETERMINE-X12-SEGMENT.
           IF WS-HOLD-R1(1: 3) = 'ISA' OR 'UNB'
               MOVE WS-HOLD-R1(4: 1)          TO WS-SEP
               MOVE SPACE                     TO WS-UNSTR-FIELDS
               UNSTRING WS-HOLD-R1            DELIMITED BY WS-SEP
                   INTO WS-UNSTR1  WS-UNSTR2  WS-UNSTR3  WS-UNSTR4
                        WS-UNSTR5  WS-UNSTR6  WS-UNSTR7  WS-UNSTR8.

      *---------------------------------------
      *    STR-O  string old
      *    STR-N  string new
      *    LEN-O  string length old
      *    LEN-N  string length new
      *---------------------------------------
       1300-PARM-LOOP.
           IF WS-SUB1 = 1
               MOVE LONGREC-RCD               TO WS-HOLD-R1
               MOVE WS-LONGREC-RCD-LEN        TO WS-R1-LEN.
           MOVE SPACE                         TO WS-HOLD-R2.
           MOVE WS-P1-STR-O(WS-SUB1)          TO WS-STR-O.
           MOVE WS-P1-STR-N(WS-SUB1)          TO WS-STR-N.
           MOVE WS-P1-LEN-O(WS-SUB1)          TO WS-LEN-O.
           MOVE WS-P1-LEN-N(WS-SUB1)          TO WS-LEN-N.
           MOVE WS-P1-CODE(WS-SUB1)           TO WS-CODE.
           MOVE WS-P1-GRP(WS-SUB1)            TO WS-GRP-SW.

           MOVE SPACE                         TO WS-SEP-SW.
           MOVE SPACE                         TO WS-SENDER.
           IF WS-GRP-SW NOT = SPACE
               MOVE 'X'                       TO WS-SEP-SW
               PERFORM 1300-MATCH-GROUP.

      *---------------------------------------
      *    if the search string is longer than the physical record,
      *    skip searching.  also stop searching when looking past EOR.
      *---------------------------------------
           MOVE 1                             TO WS-SUB3.
           MOVE ZERO                          TO WS-MAX-POS.
           IF WS-R1-LEN > WS-LEN-O
               COMPUTE WS-MAX-POS = WS-R1-LEN - WS-LEN-O + 1.
           PERFORM 1300-STRING-LOOP
               VARYING WS-SUB2 FROM 1 BY 1
               UNTIL WS-SUB2 > WS-R1-LEN.
      *---------------------------------------
      *    after looping through full WS-HOLD-R1 record, place
      *    WS-HOLD-R2 - which now contains any changes - into
      *    WS-HOLD-R1 so the next loop through includes previous
      *    changes
      *---------------------------------------
           MOVE WS-HOLD-R2                    TO WS-HOLD-R1.
           MOVE WS-SUB3                       TO WS-R2-LEN.
           SUBTRACT 1                         FROM WS-R2-LEN.
           MOVE WS-R2-LEN                     TO WS-R1-LEN.

      *---------------------------------------
      *    move characters one at a time from R1 to R2.
      *    when change string found, move the new change string and
      *      adjust pull/put positions to skip over the old string.
      *---------------------------------------
       1300-STRING-LOOP.
           IF WS-SUB2 > WS-MAX-POS
               PERFORM 1400-COPY-UNCHANGED
           ELSE
           IF WS-HOLD-R1(WS-SUB2: WS-LEN-O) = WS-STR-O(1: WS-LEN-O)
             IF WS-SEP-SW = 'X'
                 PERFORM 1400-COPY-UNCHANGED
             ELSE
             IF WS-SEP-SW = 'Y'
                 PERFORM 1400-CHECK-GROUP-CRITERIA
                 IF WS-BEFORE-SW = 'Y'
                     AND WS-AFTER-SW = 'Y'
                     PERFORM 1400-REPLACE-STRING
                 ELSE
                     PERFORM 1400-COPY-UNCHANGED
             ELSE
                 PERFORM 1400-REPLACE-STRING
           ELSE
               PERFORM 1400-COPY-UNCHANGED.

       1400-COPY-UNCHANGED.
           MOVE WS-HOLD-R1(WS-SUB2: 1)     TO WS-HOLD-R2(WS-SUB3: 1).
           ADD 1                              TO WS-SUB3.

       1400-REPLACE-STRING.
           MOVE WS-STR-N           TO WS-HOLD-R2(WS-SUB3: WS-LEN-N).
           PERFORM 1400-SHOW-CHANGE.
           ADD WS-LEN-O                       TO WS-SUB2.
           SUBTRACT 1                         FROM WS-SUB2.
           ADD WS-LEN-N                       TO WS-SUB3.
           MOVE 'Y'                           TO WS-CHANGE-SW.

       1400-SHOW-CHANGE.
           IF WS-SEP-SW = 'Y'
               MOVE WS-HOLD-R1(WS-SUB2 - 1: WS-LEN-O + 2)
                                              TO WS-SHOW-BEFORE
               MOVE SPACE                     TO WS-SHOW-AFTER
               STRING WS-HOLD-R2(WS-SUB3 - 1: WS-LEN-N + 1)
                                              DELIMITED BY SIZE
                      WS-HOLD-R1(WS-SUB2 + WS-LEN-O: 1)
                                              DELIMITED BY SIZE
                      INTO WS-SHOW-AFTER
           ELSE
               MOVE WS-STR-O                  TO WS-SHOW-BEFORE
               MOVE WS-STR-N                  TO WS-SHOW-AFTER.
           IF WS-CODE = 'C'
               DISPLAY '     rcd ' WS-READ-LONGREC-CNT
                       '  before  loc ' WS-SUB2 ' len ' WS-LEN-O
                       '  ' WS-SHOW-BEFORE
               DISPLAY '                '
                       '  after   loc ' WS-SUB3 ' len ' WS-LEN-N
                       '  ' WS-SHOW-AFTER
               IF WS-SENDER NOT = SPACE
                   DISPLAY '                          '
                           'for sender ' WS-SENDER.

      *---------------------------------------
      *    WS-SEP-SW is set to 'X' and replaced here.  If no group
      *    match is made then it remains 'X' meaning skip string
      *    replacement.
      *---------------------------------------
       1300-MATCH-GROUP.
           PERFORM VARYING WS-SUB4 FROM 1 BY 1
               UNTIL WS-SUB4 > WS-GRP-MAX
               IF WS-GRP-SW = WS-G1-GRP(WS-SUB4)
                   MOVE WS-G1-SEP(WS-SUB4)    TO WS-SEP-SW
                   MOVE WS-G1-SND(WS-SUB4)    TO WS-SENDER
                   MOVE WS-GRP-MAX            TO WS-SUB4
               END-IF
           END-PERFORM.
           IF WS-SEP-SW = 'X'
             IF WS-GRP-ERR(WS-SUB1: 1) = SPACE
               IF WS-SUB1 < 201
                   DISPLAY '---> No match to relation group code - '
                           'group in C/N record ' WS-SUB1 ' is '
                           WS-GRP-SW
                   MOVE 'X'          TO WS-GRP-ERR(WS-SUB1: 1).

      *---------------------------------------
      *    see if field is prefixed and suffixed with X12 or
      *    EDIFAC field delimiters or suffixed with EOR characters.
      *    '*OLD STRING~' gets changed to '*NEW STRING~' but
      *    'HOLD STRING~' does not.
      *---------------------------------------
       1400-CHECK-GROUP-CRITERIA.
           MOVE SPACE                         TO WS-BEFORE-SW.
           MOVE SPACE                         TO WS-AFTER-SW.
           IF WS-SENDER = SPACE
               PERFORM 1400-CHECK-FIELD-WRAPPED
           ELSE
           IF WS-SENDER = WS-UNSTR7
               PERFORM 1400-CHECK-FIELD-WRAPPED.

       1400-CHECK-FIELD-WRAPPED.
           PERFORM 1400-TEST-BEFORE
               VARYING WS-SUB4 FROM 1 BY 1
               UNTIL WS-SUB4 > WS-SEP-MAX.
           PERFORM 1400-TEST-AFTER
               VARYING WS-SUB4 FROM 1 BY 1
               UNTIL WS-SUB4 > WS-SEP-MAX.
           IF WS-AFTER-SW = SPACE
               PERFORM 1400-TEST-EOR-AFTER
                   VARYING WS-SUB4 FROM 1 BY 1
                   UNTIL WS-SUB4 > WS-EOR-MAX.

       1400-TEST-BEFORE.
           IF WS-SUB2 > 1
             IF WS-HOLD-R1(WS-SUB2 - 1: 1) = WS-S1-SEP(WS-SUB4)
                 MOVE WS-SEP-MAX              TO WS-SUB4
                 MOVE 'Y'                     TO WS-BEFORE-SW.

       1400-TEST-AFTER.
           IF WS-SUB2 < WS-MAX-POS
             IF WS-HOLD-R1(WS-SUB2 + WS-LEN-O: 1) = WS-S1-SEP(WS-SUB4)
                 MOVE WS-SEP-MAX              TO WS-SUB4
                 MOVE 'Y'                     TO WS-AFTER-SW.

       1400-TEST-EOR-AFTER.
           IF WS-SUB2 < WS-MAX-POS
             IF WS-HOLD-R1(WS-SUB2 + WS-LEN-O: 1) = WS-EOR(WS-SUB4)
                 MOVE WS-EOR-MAX              TO WS-SUB4
                 MOVE 'Y'                     TO WS-AFTER-SW.

      *---------------------------------------
      *    start at end-of-record and work backwards until non-space
      *    character found but only zap if non-space is EOR flag
      *    to avoid truncating legitimate spaces within fields
      *---------------------------------------
       1500-CRUNCH-TRAIL-SPACES.
           PERFORM 1500-CRUNCH
               VARYING WS-SUB4 FROM WS-R2-LEN BY -1
               UNTIL WS-SUB4 < 1.

       1500-CRUNCH.
           IF WS-HOLD-R2(WS-SUB4: 1) = SPACE
               CONTINUE
           ELSE
           IF WS-SUB4 = WS-R2-LEN
               MOVE ZERO                      TO WS-SUB4
           ELSE
               MOVE SPACE                     TO WS-EOR-SW
               PERFORM 1500-TEST-EOR
                   VARYING WS-SUB5 FROM 1 BY 1
                   UNTIL WS-SUB5 > WS-EOR-MAX
               IF WS-EOR-SW = 'Y'
      *            DISPLAY '**** Record ' WS-READ-LONGREC-CNT
      *                    ' zapped from ' WS-R2-LEN ' to ' WS-SUB4
                   MOVE 'Y'                   TO WS-ZAP-OCCUR-SW
                   MOVE WS-SUB4               TO WS-R2-LEN
                   MOVE ZERO                  TO WS-SUB4
               ELSE
                   MOVE ZERO                  TO WS-SUB4.

       1500-TEST-EOR.
           IF WS-HOLD-R2(WS-SUB4: 1) = WS-EOR(WS-SUB5)
               MOVE 'Y'                       TO WS-EOR-SW
               MOVE WS-EOR-MAX                TO WS-SUB5.

       2300-WRITE-LONGOUT.
           WRITE LONGOUT-RECORD.
           IF WS-STAT = ZERO
               ADD 1                          TO WS-WRITE-LONGOUT-CNT
           ELSE
               DISPLAY '**** XLT04650 write error on LONGOUT'
               DISPLAY '**** File stat           ' WS-STAT
               MOVE 'Y'                       TO WS-END-LONGREC-SW
               MOVE +2300                     TO WS-RETURN-CODE.

      ************************************ END XLT04650
