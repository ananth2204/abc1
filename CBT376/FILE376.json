{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011855000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1587222, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 17, "INMDSNAM": "CBT.V500.FILE376.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1587222, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1587222, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE376.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x1a\\x0f'", "DS1TRBAL": "b'\\x14R'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\xb4\\x00\\x03\\x02\\xb5\\x00\\x0e\\x00\\x1b'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$AUTHOR": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x11\\x7f\\x00\\x99\\x12?\\x14\\x17\\x00\\x08\\x00\\x08\\x00\\x01\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-04-27T00:00:00", "modifydate": "1999-05-03T14:17:00", "lines": 8, "newlines": 8, "modlines": 1, "user": "XSDMN"}, "text": "DAVID MARSDEN\n EMAIL : DMARSDEN@ONE.NET.AU\n   WEB : WWW2.ONE.NET.AU/~DMARSDEN\n\n  MAIL : PO BOX 244, HILLARYS, WESTERN AUSTRALIA 6923\n\n  PHONE 61 08 9421 6405 AT WORK (CSC EAST PERTH DATA CENTRE)\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$DOCM": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x00\\x00\\x99\\x11\\x7f\\x00\\x99 o\\x18$\\x00\\x8a\\x00\\x17\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1999-04-27T00:00:00", "modifydate": "1999-07-25T18:24:00", "lines": 138, "newlines": 23, "modlines": 0, "user": "SBGOLOB"}, "text": " ZDF and most add-ons work for up to OS 390 v 2.6.\n Callable interfaces are used where possible so it does not matter\n what the MVS version is.\n ZDF was updated from XDF as distributed on CBT many years ago.\n\n There is a lot of stuff in add-ons already on CBT but those here\n are maybe mofified by me.\n  - as well as ZDF, UDF (display devices)\n  and EDJES3 (ISPF JES3 console with nice help)\n             are worth a good look.\n\n (The add-ons are called from the top line of the zdf panel display\n  - they can be called as TSO commands but some rely on panels\n    in the PDS which is ispplib libdefed when ZDF called.\n    You can fix that by copying the panels to a d/s in ispplib defn.)\n\n  ZDF displays :\n  _____________\n\n  . cpu utilisation as seen by srm\n  . avail frame count\n  . total paging rate\n  . uic\n  . memory estimate\n  . tso period details (if source adjusted to skip correct # of\n                        performance groups in ips - see line\n    LA    R5,13           ** PERFORM GROUP SKIP **          )\n  . speed constant\n  . # of cpus and lpar #\n  . total cpu calculated as sum of all ascbs cpu/elapse time - thus\n    max 300% say for 3 cpus if all cpu available to an lpar.\n  . ASCB details (job name, # excps, memory status, pg,\n    dispatching priority, %cpu and cpu).\n\n To install this useful tool :\n ______________________________\n\n In ZDF (member ZDFESA) :-\n\n . For MVS 4.2 and below edit to comment out that which fails assembly.\n\n . Ensure this pds is named hlq.slq  and no third hlq is used and\n   keep hlq to 5 chars and slq to 3 chars for easy install.\n   Change xsdmn to 5 char hlq of this pds as restored.\n   Change zdf to your slq.\n   i.e. replace xdmn.zdf by your pds name.\n   (else additional editing of jobs -\n     choosing longer pds names requires knowledge of assembler\n     to use up empty space at end of constant declaration).\n\n . This pds serves as a panel library for program ZDF.\n   It should also serve as a dynamic clist/rexx sysproc,\n   but I think you may have to copy clists to sysproc as in TSO logon\n   JCL etc.\n\n . apf auth not required.\n\n . install so that load library that ZDF is in (& any add-on pgms)\n   is in linklist, steplib, or ispllib for ISPF session.\n\n . Allocate dd(sysprint) da(*) to your tso session for some of the\n   'add-on' program displays.\n\n============================================================\n\n How to use ZDF :\n ________________\n\nCall via TSO ZDF - initial result is that a panel listing all batch\n                   jobs that are running will be displayed.\n\n From this panel :\n\n . display only batch, tso, stcs, or all.\n . prefix option may be used to restrict list of ascbs displayed\n . optn 0 = list only ascbs which clock cpu between enter pressed.\n        q = list job classes if flasher in-use and flasher jct\n            specified correctly in source.\n        s = sort the display by invoking a clist.\n        j = show job numbers rather than asid # (takes time).\n   rptsec = non-zero will cause automatic update every rptsec secs.\n\n line options against a given line in the display.\n      s = give tso status info.\n      c = cancel via tso cancel.\n      n = show enqueues of address space (comp & link QN)\n      f = use Flasher (if avail) to show jobs spool output\n\n _______________________________________________________________\n\n Options selected off the cua panel line sometimes call other\n programs which will need to be compiled into your load lib.\n\n Options window may be used to customise the ZDF display.\n However there is nothing in the options window that cannot be done by\n changing options on the 4 th line.\n\n The tape option selects program EDTAPE which is a cut-down version\n of UDF to display tape & cartridge drive status (see EDTAPASM source).\n\n TSO1 window is used to select :\n 1) Show all Adabas jobs. Clist using TSODZN program.  See TSODSN\n    elsewhere on CBT to list users of a given dataset. TSODZN is a\n    program not a command processor program.\n 2) List IPL details     - see program LASTIPL.\n 3) List enqueue details - see program TSOENQ.\n 4) List IO this session - see program IOXA.\n 5) SMF status           - see C4SMFDS (RDSNAME length 44 in OS/390)\n 6) HSM users            - do without this - source YDF may not work.\n 7) IO by processor      - see program IOMVS\n 8) Unit display         - see program UDF - definitely worth having.\n 9) Amdahl MDF           - clist MDF reads SMF lpar data from type 70\n                           live SMF (using SAS clist).\n    You really don't need Amdahl MDF, IBM lpar OK too - but do need SAS.\n 10) Chpid display       - see program EDCHP.\n 11) APF List            - see program APFLIST.\n 12) CSA data            - see program CSA.\n 13) List catalogs       - see program CATDISP.\n 14) Look at memory      - see program LOOK from elsewhere on CBT.\n                           (source here, but missing link include -\n                            you can use this if you tinker to do w/o it)\n 15) Dataset enqueues    - see program TSODSN\n 16) Dataset enqueues    - see program TSODSNG for multiple dataset\n                           enqueues from hlq specification.\n 17) SRM domains         - see program DDMN.\n 18) Link list dfisplay  - see program LLA.\n\n TSO2 window is used to select :\n Any one of the SCR, STG, or LSPACE programs which are all pretty\n similar but list respectively scratch, storage, or all online volumes.\n\n JES3 option is used to select program EDJES3.\n If you have JES3 you can update the inish deck & vtamlst &\n IATUX31 (I think) auth exit & then do JES3 displays (or more)\n from ISPF.  The help panel in this may be customised to convert\n English statements to JES3 commands,\n\n Ignore the SP option.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ADPDATAB": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x00\\x95&\\x9f\\x00\\x95(_\\x08\\x06\\x00\\x1a\\x00#\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1995-09-26T00:00:00", "modifydate": "1995-10-12T08:06:00", "lines": 26, "newlines": 35, "modlines": 0, "user": "ED115DM"}, "text": ")ATTR\n_ TYPE(INPUT)\n@ TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(YELLOW)\n! TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(GREEN)\n$ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n? TYPE(TEXT) INTENS(LOW) JUST(LEFT) COLOR(YELLOW) HILITE(USCORE)\n+ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n\u00a2 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(GREEN)\n)BODY\n$                   **** SP volume display facility ****\n COMMAND ==>_VCMD                                               %SCROLL =>_AMT %\n%\n$                                     USE --- CHPIDS --- DELTA AVG AVG AVG PCNT\n$S VOLSER ADR ASID DESC               CNT  # 01 02 03 04 # IO  CON DIS PEN BUSY\n)MODEL\n_Z@Z\n)INIT\n .CURSOR=VCMD\n  &AMT=PAGE\n  &VCMD='    '\n  .ZVARS='(VSLA,VTOLINE)'\n  .HELP=QS\n &ZTDMARK = '                   ********* End of display ***********       '\n)PROC\n &PTCBTEXT = &VCMD\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "APFLIST": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x11\\x7f\\x00\\x99\\x11\\x7f\\tA\\x00s\\x00s\\x00\\x00\\xc3\\xe2\\xc3\\xe2\\xe8\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-04-27T00:00:00", "modifydate": "1999-04-27T09:41:00", "lines": 115, "newlines": 115, "modlines": 0, "user": "CSCSYDM"}, "text": "//CSCSYDMP JOB MSGCLASS=X,CLASS=M,NOTIFY=CSCSYDM\n//ASMHCL   PROC MAC1='SYS1.MACLIB',MAC2='SYS1.MODGEN'\n//ASM   EXEC  PGM=ASMA90,PARM='NODECK,OBJECT',REGION=1M\n//SYSLIB   DD  DSN=&MAC1,DISP=SHR\n//         DD  DSN=&MAC2,DISP=SHR\n//SYSUT1   DD  UNIT=(3390,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  SYSOUT=B,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))\n//SYSPRINT DD SYSOUT=*,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=3390,SPACE=(CYL,(5,5,0)),             *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//LKED EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL,AMODE=31,RMODE=24',      *\n//        REGION=1M,COND=(8,LT,ASM)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD DD DISP=(,PASS),UNIT=3390,                                   *\n//        SPACE=(CYL,(2,1,2)),DSN=&&GOSET(GO)\n//SYSUT1   DD  UNIT=3390,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=*\n//  PEND\n// EXEC ASMHCL\nAPFLIST  CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         USING *,R15\n         STM   R14,R12,12(R13)\n         LA    R12,SAVE\n         ST    R12,8(R13)\n         ST    R13,SAVE+4\n         LR    R13,R12\n         LR    R12,R15\n         USING APFLIST,R12\n         DROP  R15\n         L     R0,=F'32760'\n         GETMAIN R,LV=(0)\n         LR    R5,R1\n         LR    R11,R1\n         L     R0,=F'8192'\n         GETMAIN R,LV=(0)\n         LR    R6,R1\n         L     R0,=F'8192'\n         GETMAIN R,LV=(0)\n         LR    R7,R1\n         USING APFE,R6\n         USING APFHDR,R7\n*\n         CSVAPF REQUEST=QUERYFORMAT,FORMAT=APFOR\n         CLI   APFOR,CSVAPFFORMATDYNAMIC\n         BNE   ENDJC\n*\n         CSVAPF REQUEST=LIST,                                          +\n               ANSAREA=(R5),           * OUR STORAGE AREA              +\n               ANSLEN=APF_LEN,         *...HOW BIG IT IS               +\n               RETCODE=APF_RET,        * RETURN CODE                   +\n               RSNCODE=APF_RSN,        * REASON CODE                   +\n               MF=(E,CSVAPF)           * EXECUTE FORM\nENDJC    DS    0H\n         OPEN  (SYSPRINT,OUTPUT)\n         MVC   OUT(80),SPACES\n*        MVC   OUT(12),=CL12'123456789012'\n         MVC   OUT(12),0(R5)\n         L     R10,0(R5)\n         LA    R5,16(R5)\n         MVC   OUT+20(4),APF_RET\n         MVC   OUT+30(4),APF_RSN\n*        PUT   SYSPRINT,OUT\nLOOP     MVC   OUT(80),SPACES\n         MVC   OUT(55),0(R5)\n         LR    R2,R5\n         AH    R2,0(R5)\n         LR    R5,R2\n         PUT   SYSPRINT,OUT\n         BCT   R10,LOOP\n         CLOSE (SYSPRINT)\n         LR    R1,R11\n         LA    R0,4095\n         FREEMAIN R,LV=(0),A=(1)\n         LR    R1,R6\n         LA    R0,4095\n         FREEMAIN R,LV=(0),A=(1)\n         LR    R1,R7\n         LA    R0,4095\n         FREEMAIN R,LV=(0),A=(1)\n         L     R13,4(R13)\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\nSYSPRINT DCB   DSORG=PS,MACRF=(PM),DDNAME=APFLIST,LRECL=80,RECFM=FB,   X\n               BLKSIZE=800\nSAVE     DC    19F'0'\nAPFOR    DS    CL1\nOUT      DS    CL79\nSPACES   DC    CL80' '\nWORK     DS    D\nAPF_LEN  DC    F'32760'\nAPF_RET  DS    F\nAPF_RSN  DS    F\n         CSVAPF MF=(L,CSVAPF)\n         CSVAPFAA\n         END\n//LKED.SYSLMOD DD DSN=SYS3.UTIL.LINKLIB(APFLIST),DISP=SHR\n//*KED.SYSLMOD DD DSN=TEST.PGM.LOAD(LSPACE),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMHCL": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x970/\\x00\\x980?\\x08Q\\x00\\x11\\x00\\x11\\x00\\x01\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1997-10-29T00:00:00", "modifydate": "1998-10-30T08:51:00", "lines": 17, "newlines": 17, "modlines": 1, "user": "XSDMN"}, "text": "//*\n//ASMHCL  PROC\n//C      EXEC  PGM=IEV90,PARM=OBJECT,REGION=5M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  SYSOUT=X,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))\n//SYSPRINT DD SYSOUT=X,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//L    EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL',REGION=2M,COND=(8,LT,C)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD DD DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(2,1,2)),DSN=&GOSET(GO)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=X,DCB=(RECFM=FB,BLKSIZE=3509)\n//  PEND\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BA": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x95%O\\x00\\x97\\x06\\x9f\\x104\\x00W\\x00W\\x00\\t\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1995-09-11T00:00:00", "modifydate": "1997-03-10T10:34:00", "lines": 87, "newlines": 87, "modlines": 9, "user": "ED115DM"}, "text": "PROC 0 TEST\nCONTROL NOLIST NOCONLIST NOSYMLIST\nCLEAR\nIF &TEST = &STR(TEST) THEN CONTROL LIST CONLIST SYMLIST\nFREE DD(SYSPRINT)\nALLOC DD(SYSPRINT) NEW SPACE(1,1) -\nBLKSIZE(9040) LRECL(80) RECFM(F B) DSORG(PS) UNIT(VIO) REUSE\nCALL 'SYS1.PROD.EDED.LINKLIB(TSODZN)' 'EDED.PROD.DBADABAS.DATA'\nOPENFILE SYSPRINT INPUT\nERROR DO\n      SET &LCC = &LASTCC\n      IF &LCC = 400 THEN GOTO HCONTP\n      EXIT\n      END\nSET &CNT = 0\nRETRYP:-\nGETFILE SYSPRINT\n SET &TEXT = &SUBSTR(1:1,&SYSPRINT)\n SET &ADA  = &SUBSTR(1:6,&SYSPRINT)\n IF &TEXT = &STR(E) THEN -\n IF &ADA \u00ac= &STR(EDADAP) THEN DO\n                     SET &CNT = &CNT + 1\n                     SET &ADA = &SUBSTR(1:8,&SYSPRINT)\n                     WRITE &ADA\n                              END\n GOTO RETRYP\nERROR OFF\nHCONTP:-\nCLOSFILE SYSPRINT\nFREE DD(SYSPRINT)\nWRITE # BATCH PROD ADABAS RUNNING : &CNT\nWRITE\nALLOC DD(SYSPRINT) NEW SPACE(1,1) -\nBLKSIZE(9040) LRECL(80) RECFM(F B) DSORG(PS) UNIT(VIO) REUSE\nCALL 'SYS1.PROD.EDED.LINKLIB(TSODZN)' 'EDED.TEST.DBADABAS.DATA'\nOPENFILE SYSPRINT INPUT\nERROR DO\n      SET &LCC = &LASTCC\n      IF &LCC = 400 THEN GOTO HCONTT\n      EXIT\n      END\nSET &CNT = 0\nRETRYT:-\nGETFILE SYSPRINT\n SET &TEXT = &SUBSTR(1:1,&SYSPRINT)\n SET &ADA  = &SUBSTR(1:6,&SYSPRINT)\n IF &TEXT = &STR(E) THEN -\n IF &ADA \u00ac= &STR(EDADAT) THEN DO\n                     SET &CNT = &CNT + 1\n                     SET &ADA = &SUBSTR(1:8,&SYSPRINT)\n                     WRITE &ADA\n                              END\n GOTO RETRYT\nERROR OFF\nHCONTT:-\nCLOSFILE SYSPRINT\nFREE DD(SYSPRINT)\nWRITE # BATCH TEST ADABAS RUNNING : &CNT\nWRITE\nALLOC DD(SYSPRINT) NEW SPACE(1,1) -\nBLKSIZE(9040) LRECL(80) RECFM(F B) DSORG(PS) UNIT(VIO) REUSE\nCALL 'SYS1.PROD.EDED.LINKLIB(TSODZN)' 'EDED.DEVT.DBADABAS.DATA'\nOPENFILE SYSPRINT INPUT\nERROR DO\n      SET &LCC = &LASTCC\n      IF &LCC = 400 THEN GOTO HCONTD\n      EXIT\n      END\nSET &CNT = 0\nRETRYD:-\nGETFILE SYSPRINT\n SET &TEXT = &SUBSTR(1:1,&SYSPRINT)\n SET &ADA  = &SUBSTR(1:6,&SYSPRINT)\n IF &TEXT = &STR(E) THEN -\n IF &ADA \u00ac= &STR(EDADAD) THEN DO\n                     SET &CNT = &CNT + 1\n                     SET &ADA = &SUBSTR(1:8,&SYSPRINT)\n                     WRITE &ADA\n                              END\n GOTO RETRYD\nERROR OFF\nHCONTD:-\nCLOSFILE SYSPRINT\nFREE DD(SYSPRINT)\nALLOC DD(SYSPRINT) DA(*)\nWRITE # BATCH DEVT ADABAS RUNNING : &CNT\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BAWE": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x970?\\x00\\x970?\\x08\\x13\\x00W\\x00W\\x00\\x03\\xc3\\xf4\\xc1\\xc4\\xd4\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1997-10-30T00:00:00", "modifydate": "1997-10-30T08:13:00", "lines": 87, "newlines": 87, "modlines": 3, "user": "C4ADMDM"}, "text": "PROC 0 TEST\nCONTROL NOLIST NOCONLIST NOSYMLIST\nCLEAR\nIF &TEST = &STR(TEST) THEN CONTROL LIST CONLIST SYMLIST\nFREE DD(SYSPRINT)\nALLOC DD(SYSPRINT) NEW SPACE(1,1) -\nBLKSIZE(9040) LRECL(80) RECFM(F B) DSORG(PS) UNIT(VIO) REUSE\nCALL 'C4ADMDM.PROD.LKED(TSODZN)' 'WEWE.PROD.DBADABAS.DATA'\nOPENFILE SYSPRINT INPUT\nERROR DO\n      SET &LCC = &LASTCC\n      IF &LCC = 400 THEN GOTO HCONTP\n      EXIT\n      END\nSET &CNT = 0\nRETRYP:-\nGETFILE SYSPRINT\n SET &TEXT = &SUBSTR(1:1,&SYSPRINT)\n SET &ADA  = &SUBSTR(1:6,&SYSPRINT)\n IF &TEXT = &STR(E) THEN -\n IF &ADA \u00ac= &STR(EDADAP) THEN DO\n                     SET &CNT = &CNT + 1\n                     SET &ADA = &SUBSTR(1:8,&SYSPRINT)\n                     WRITE &ADA\n                              END\n GOTO RETRYP\nERROR OFF\nHCONTP:-\nCLOSFILE SYSPRINT\nFREE DD(SYSPRINT)\nWRITE # BATCH PROD WEWE ADABAS RUNNING : &CNT\nWRITE\nALLOC DD(SYSPRINT) NEW SPACE(1,1) -\nBLKSIZE(9040) LRECL(80) RECFM(F B) DSORG(PS) UNIT(VIO) REUSE\nCALL 'C4ADMDM.PROD.LKED(TSODZN)' 'WEWE.TEST.DBADABAS.DATA'\nOPENFILE SYSPRINT INPUT\nERROR DO\n      SET &LCC = &LASTCC\n      IF &LCC = 400 THEN GOTO HCONTT\n      EXIT\n      END\nSET &CNT = 0\nRETRYT:-\nGETFILE SYSPRINT\n SET &TEXT = &SUBSTR(1:1,&SYSPRINT)\n SET &ADA  = &SUBSTR(1:6,&SYSPRINT)\n IF &TEXT = &STR(E) THEN -\n IF &ADA \u00ac= &STR(EDADAT) THEN DO\n                     SET &CNT = &CNT + 1\n                     SET &ADA = &SUBSTR(1:8,&SYSPRINT)\n                     WRITE &ADA\n                              END\n GOTO RETRYT\nERROR OFF\nHCONTT:-\nCLOSFILE SYSPRINT\nFREE DD(SYSPRINT)\nWRITE # BATCH TEST WEWE ADABAS RUNNING : &CNT\nWRITE\nALLOC DD(SYSPRINT) NEW SPACE(1,1) -\nBLKSIZE(9040) LRECL(80) RECFM(F B) DSORG(PS) UNIT(VIO) REUSE\nCALL 'C4ADMDM.PROD.LKED(TSODZN)' 'WEWE.DEVT.DBADABAS.DATA'\nOPENFILE SYSPRINT INPUT\nERROR DO\n      SET &LCC = &LASTCC\n      IF &LCC = 400 THEN GOTO HCONTD\n      EXIT\n      END\nSET &CNT = 0\nRETRYD:-\nGETFILE SYSPRINT\n SET &TEXT = &SUBSTR(1:1,&SYSPRINT)\n SET &ADA  = &SUBSTR(1:6,&SYSPRINT)\n IF &TEXT = &STR(E) THEN -\n IF &ADA \u00ac= &STR(EDADAD) THEN DO\n                     SET &CNT = &CNT + 1\n                     SET &ADA = &SUBSTR(1:8,&SYSPRINT)\n                     WRITE &ADA\n                              END\n GOTO RETRYD\nERROR OFF\nHCONTD:-\nCLOSFILE SYSPRINT\nFREE DD(SYSPRINT)\nALLOC DD(SYSPRINT) DA(*)\nWRITE # BATCH DEVT WEWE ADABAS RUNNING : &CNT\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CATDISP": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x86\\x06O\\x00\\x980?\\x084\\x00N\\x00\"\\x006\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1986-03-05T00:00:00", "modifydate": "1998-10-30T08:34:00", "lines": 78, "newlines": 34, "modlines": 54, "user": "XSDMN"}, "text": "//C4SYSDMA JOB MSGCLASS=X,CLASS=Q,NOTIFY=XSDMN\n//*\n//*  DM\n//ASMHCL  PROC\n//C      EXEC  PGM=IEV90,PARM=OBJECT,REGION=5M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  SYSOUT=B,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))\n//SYSPRINT DD SYSOUT=X,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//L    EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL',REGION=2M,COND=(8,LT,C)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD DD DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(2,1,2)),DSN=&GOSET(GO)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=X,DCB=(RECFM=FB,BLKSIZE=3509)\n//  PEND\n//*\n// EXEC ASMHCL\n//*YSLIB DD DISP=SHR,DSN=C4ADMDM.FILE435.PDS\n//SYSLIB DD DISP=SHR,DSN=SYS1.MACLIB\n//       DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSPRINT DD SYSOUT=*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nCATDISP  CSECT\n         USING *,R15\n         STM   R14,R12,12(R13)\n         LA    R12,SAVE\n         ST    R12,8(R13)\n         ST    R13,SAVE+4\n         LR    R13,R12\n         LR    R12,R15\n         USING CATDISP,R12\n         DROP  R15\n         LA    R2,16                     -> CVT PTR\n         L     R2,0(R2)                  -> CVT ITSELF\n         LA    R3,256                    OFFSET TO AMCBS PTR\n         L     R2,0(R2,R3)               -> AMCBS\n         L     R2,20(R2)                 -> CAXWA CHAIN\n         LTR   R2,R2                     CAXWA CHAIN PTR ZEROS\n         BZ    NOCATS                    YES, WRITE MSG AND LEAVE\nCAXWA    EQU   *\n         MVC   CATDSN,52(R2)             MOVE CAT NAME TO MSG\nTPUT     TPUT  CATOPEN,59\n         L     R2,4(R2)                  -> NEXT CAXWA\n         LTR   R2,R2                     IS THERE ONE ?\n         BNZ   CAXWA                     YES - CONTINUE\n         B     NOMORE\nNOCATS   EQU   *\n         TPUT  NOCAT,20\nNOMORE   EQU   *\nENDJC    DS    0H\n         L     R13,4(R13)\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\nNOCAT    DC    CL20'NO OPEN CATALOGS'\nCATOPEN  DC    C'OPEN CATALOG = '\nCATDSN   DC    CL44' '\nSAVE     DC    18F'0'\n         END\n//L.SYSLMOD DD DISP=SHR,DSN=TEST.PGM.LOAD(CATDISP)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CHPDATAB": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x97\\x10\\x1f\\x00\\x97\\x10\\x1f\\x12W\\x00)\\x00\\x1f\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1997-04-11T00:00:00", "modifydate": "1997-04-11T12:57:00", "lines": 41, "newlines": 31, "modlines": 0, "user": "ED115DM"}, "text": ")ATTR\n_ TYPE(INPUT)\n@ TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(YELLOW)\n! TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(GREEN)\n$ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n? TYPE(TEXT) INTENS(LOW) JUST(LEFT) COLOR(YELLOW) HILITE(USCORE)\n+ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n\u00a2 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(GREEN)\n)BODY\n$                    *** Chpid display facility ***\n COMMAND ==>_VCMD                                               %SCROLL =>_AMT %\n%\n        @Z\n$CHPID  @Z\n$BUSY   @Z\n        @Z\n        @Z\n        @Z\n        @Z\n        @Z\n        @Z\n        @Z\n        @Z\n        @Z\n        @Z\n        @Z\n        @Z\n        @Z\n%\n)INIT\n .CURSOR=VCMD\n  &AMT=PAGE\n  &VCMD='    '\n  .ZVARS='(CHP00,CHP08,CHP10,CHP18,CHP20,CHP28,CHP30,CHP38,+\n           CHP40,CHP48,CHP50,CHP58,CHP60,CHP68,CHP70,CHP78,+\n           )'\n  .HELP=QS\n &ZTDMARK = '                  ********* End of Chpd display ***********   '\n)PROC\n &PTCBTEXT = &VCMD\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CSA": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x11\\x00\\x00\\x00\\x97\\x15o\\x00\\x98'\\x9f\\x16\\x12\\x01W\\x00^\\x00\\x00\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@\"", "ispf": {"version": "01.17", "flags": 0, "createdate": "1997-06-05T00:00:00", "modifydate": "1998-10-06T16:12:00", "lines": 343, "newlines": 94, "modlines": 0, "user": "XSDMN"}, "text": "//ED115DMM JOB MSGCLASS=X,CLASS=Q,NOTIFY=XSDMN\n//  EXEC ASMHCL,PARM.L=('AMODE=31','RMODE=24')\n//C.SYSLIB DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN DD *\nCSA      CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         USING *,R15\n         STM   R14,R12,12(R13)\n         LA    R12,SAVE\n         ST    R12,8(R13)\n         ST    R13,SAVE+4\n         LR    R13,R12\n         LR    R12,R15\n         USING CSA,R12\n         DROP  R15\n         L     R9,16              CVT\n         USING CVT,R9\n         L     R5,CVTGDA          GDA\n         MVC   OUT(80),SPACES\n         LR    R7,R5              GDA\n         USING GDA,R7\n* CSA\n         L     R4,GDACSASZ\n         SRL   R4,10              TO GET K\n         CVD   R4,WORK\n         ST    R4,COMMON\n         MVC   OUT1+14(8),EDIT8\n         ED    OUT1+14(8),WORK+4\n*\n         LA    R4,0\n         L     R5,GDA_CSA_ALLOC\n         M     R4,=F'100'\n         LA    R4,0\n         D     R4,GDACSASZ\n         A     R5,=F'1'\n         CVD   R5,WORK\n         OI    WORK+7,X'0F'\n         UNPK  OUT1+26(2),WORK+6(2)\n*ECSA\n         L     R4,GDAECSAS\n         SRL   R4,10              TO GET K\n         CVD   R4,WORK\n         MVC   OUT1+54(8),EDIT8\n         ED    OUT1+54(8),WORK+4\n*\n         LA    R4,0\n         L     R5,GDA_ECSA_ALLOC\n         M     R4,=F'100'\n         LA    R4,0\n         D     R4,GDAECSAS\n         A     R5,=F'1'\n         CVD   R5,WORK\n         OI    WORK+7,X'0F'\n         UNPK  OUT1+66(2),WORK+6(2)\n* SQA\n         L     R4,GDASQASZ\n         SRL   R4,10              TO GET K\n         CVD   R4,WORK\n         ST    R4,CW\n         MVC   OUT2+14(8),EDIT8\n         ED    OUT2+14(8),WORK+4\n*\n         LA    R4,0\n         L     R5,GDA_SQA_ALLOC\n         M     R4,=F'100'\n         LA    R4,0\n         D     R4,GDASQASZ\n         A     R5,=F'1'\n         CVD   R5,WORK\n         OI    WORK+7,X'0F'\n         UNPK  OUT2+26(2),WORK+6(2)\n         L     R4,COMMON\n         A     R4,CW\n         ST    R4,COMMON\n*ESQA\n         L     R4,GDAESQAS\n         SRL   R4,10              TO GET K\n         CVD   R4,WORK\n         MVC   OUT2+54(8),EDIT8\n         ED    OUT2+54(8),WORK+4\n*\n         LA    R4,0\n         L     R5,GDA_ESQA_ALLOC\n         M     R4,=F'100'\n         LA    R4,0\n         D     R4,GDAESQAS\n         A     R5,=F'1'\n         CVD   R5,WORK\n         OI    WORK+7,X'0F'\n         UNPK  OUT2+66(2),WORK+6(2)\n*CSA FREE\n         L     R4,GDACSARE\n         SRL   R4,10              TO GET K\n         CVD   R4,WORK\n         MVC   OUT4+54(8),EDIT8\n         ED    OUT4+54(8),WORK+4\n*CSA CVT SQA\n         L     R4,GDACSACV\n         SRL   R4,10              TO GET K\n         CVD   R4,WORK\n         MVC   OUT5+54(8),EDIT8\n         ED    OUT5+54(8),WORK+4\n* V=R\n         L     R4,GDAVRSZ\n         SRL   R4,10              TO GET K\n         CVD   R4,WORK\n         MVC   OUTV+14(8),EDIT8\n         ED    OUTV+14(8),WORK+4\n*\n         L     R3,CVTSMEXT\n         USING CVTVSTGX,R3\n* MLPA\n         L     R2,CVTMLPAS\n         L     R4,CVTMLPAE\n         SR    R4,R2\n         SRL   R4,10              TO GET K\n         A     R4,=F'1'\n         ST    R4,CW\n         CVD   R4,WORK\n         MVC   OUT8+14(8),EDIT8\n         ED    OUT8+14(8),WORK+4\n         L     R4,COMMON\n         A     R4,CW\n         ST    R4,COMMON\n*EMLPA\n         L     R2,CVTEMLPS\n         L     R4,CVTEMLPE\n         SR    R4,R2\n         SRL   R4,10              TO GET K\n         A     R4,=F'1'\n         CVD   R4,WORK\n         MVC   OUT8+54(8),EDIT8\n         ED    OUT8+54(8),WORK+4\n* FLPA\n         L     R2,CVTFLPAS\n         L     R4,CVTFLPAE\n         SR    R4,R2\n         SRL   R4,10              TO GET K\n         A     R4,=F'1'\n         ST    R4,CW\n         CVD   R4,WORK\n         MVC   OUT9+14(8),EDIT8\n         ED    OUT9+14(8),WORK+4\n         L     R4,COMMON\n         A     R4,CW\n         ST    R4,COMMON\n*EFLPA\n         L     R2,CVTEFLPS\n         L     R4,CVTEFLPE\n         SR    R4,R2\n         SRL   R4,10              TO GET K\n         A     R4,=F'1'\n         CVD   R4,WORK\n         MVC   OUT9+54(8),EDIT8\n         ED    OUT9+54(8),WORK+4\n* PLPA\n         L     R2,CVTPLPAS\n         L     R4,CVTPLPAE\n         SR    R4,R2\n         SRL   R4,10              TO GET K\n         A     R4,=F'1'\n         ST    R4,CW\n         CVD   R4,WORK\n         MVC   OUT10+14(8),EDIT8\n         ED    OUT10+14(8),WORK+4\n         L     R4,COMMON\n         A     R4,CW\n         ST    R4,COMMON\n*EPLPA\n         L     R2,CVTEPLPS\n         L     R4,CVTEPLPE\n         SR    R4,R2\n         SRL   R4,10              TO GET K\n         A     R4,=F'1'\n         CVD   R4,WORK\n         MVC   OUT10+54(8),EDIT8\n         ED    OUT10+54(8),WORK+4\n* RW NUC\n         L     R2,CVTRWNS\n         L     R4,CVTRWNE\n         SR    R4,R2\n         SRL   R4,10              TO GET K\n         A     R4,=F'1'\n         ST    R4,CW\n         CVD   R4,WORK\n         MVC   OUT11+14(8),EDIT8\n         ED    OUT11+14(8),WORK+4\n         L     R4,COMMON\n         A     R4,CW\n         ST    R4,COMMON\n*ERW NUC\n         L     R2,CVTERWNS\n         L     R4,CVTERWNE\n         SR    R4,R2\n         SRL   R4,10              TO GET K\n         A     R4,=F'1'\n         CVD   R4,WORK\n         MVC   OUT11+54(8),EDIT8\n         ED    OUT11+54(8),WORK+4\n* RO NUC\n         L     R2,CVTRONS\n*        L     R4,CVTRONE\n         L     R4,=X'00FFFFFF'\n         SR    R4,R2\n         SRL   R4,10              TO GET K\n         A     R4,=F'1'\n         ST    R4,CW\n         CVD   R4,WORK\n         MVC   OUT12+14(8),EDIT8\n         ED    OUT12+14(8),WORK+4\n         L     R4,COMMON\n         A     R4,CW\n         ST    R4,COMMON\n*ERO NUC\n*        L     R2,CVTRONS\n         L     R4,CVTRONE\n         L     R2,=X'00FFFFFF'\n         SR    R4,R2\n         SRL   R4,10              TO GET K\n         A     R4,=F'1'\n         CVD   R4,WORK\n         MVC   OUT12+54(8),EDIT8\n         ED    OUT12+54(8),WORK+4\n* PVT\n         L     R4,GDAPVTSZ\n         SRL   R4,10              TO GET K\n         CVD   R4,WORK\n         MVC   OUTP+14(8),EDIT8\n         ED    OUTP+14(8),WORK+4\n* EPVT\n         L     R4,GDAEPVTS\n         SRL   R4,10              TO GET K\n         CVD   R4,WORK\n         MVC   OUTP+54(8),EDIT8\n         ED    OUTP+54(8),WORK+4\n*\nENDJC    DS    0H\n         L     R4,COMMON\n         CVD   R4,WORK\n         MVC   OUT14+14(8),EDIT8\n         ED    OUT14+14(8),WORK+4\n***********************************\n         LA    1,LABEL15                  GO AMODE 24\n         BSM   0,1\nLABEL15  DS    0H\n***********************************\n         OPEN  (SYSPRINT,OUTPUT)\n         PUT   SYSPRINT,OUT1\n         PUT   SYSPRINT,OUT2\n         PUT   SYSPRINT,OUT3\n         PUT   SYSPRINT,OUT4\n         PUT   SYSPRINT,OUT5\n         PUT   SYSPRINT,OUT7\n         PUT   SYSPRINT,OUT8\n         PUT   SYSPRINT,OUT9\n         PUT   SYSPRINT,OUT10\n         PUT   SYSPRINT,OUT11\n         PUT   SYSPRINT,OUT12\n         PUT   SYSPRINT,OUT13\n         PUT   SYSPRINT,OUT14\n         PUT   SYSPRINT,OUTPS\n         PUT   SYSPRINT,OUTP\n         PUT   SYSPRINT,OUTV\n         CLOSE (SYSPRINT)\n***********************************\n         L     1,LABEL13                  GO AMODE 31\n         BSM   0,1\nLABEL13  DC    A(LABEL14+X'80000000')\nLABEL14  DS    0H\n***********************************\n         L     R13,4(R13)\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\nSYSPRINT DCB   DSORG=PS,MACRF=(PM),DDNAME=SYSPRINT,LRECL=80,RECFM=FB,  X\n               BLKSIZE=9040\nSAVE     DC    18F'0'\n         LTORG\nSPACES   DC    CL80' '\nZEROS    DC    XL80'00'\nOUT      DS    CL80\n*UT1     DC    CL40'0123456789012345678901234567890123456789'\n*        DC    CL40'                                        '\nOUT1     DC    CL40'          CSA ???????? K (?? %)         '\n         DC    CL40'         ECSA ???????? K (?? %)         '\nOUT2     DC    CL40'          SQA ???????? K (?? %)         '\n         DC    CL40'         ESQA ???????? K (?? %)         '\nOUT3     DC    CL40'                                        '\n         DC    CL40'                                        '\nOUT4     DC    CL40'                                        '\n         DC    CL40' FREE CSA/SQA ???????? K                '\nOUT5     DC    CL40'                                        '\n         DC    CL40'  CSA CVT SQA ???????? K                '\nOUTV     DC    CL40'          V=R ???????? K                '\n         DC    CL40'                                        '\nOUT7     DC    CL40'                                        '\n         DC    CL40'                                        '\nOUT8     DC    CL40'  MLPA        ???????? K                '\n         DC    CL40' EMLPA        ???????? K                '\nOUT9     DC    CL40'  FLPA        ???????? K                '\n         DC    CL40' EFLPA        ???????? K                '\nOUT10    DC    CL40'  PLPA        ???????? K                '\nOUT10    DC    CL40' EPLPA        ???????? K                '\nOUT11    DC    CL40'  R/W NUCLEUS ???????? K                '\n         DC    CL40' ER/W NUCLEUS ???????? K                '\nOUT12    DC    CL40'  R/O NUCLEUS ???????? K                '\n         DC    CL40' ER/O NUCLEUS ???????? K                '\nOUT13    DC    CL40'                                        '\n         DC    CL40'                                        '\nOUT14    DC    CL40' COMMON TOTAL ???????? K                '\n         DC    CL40'                                        '\nOUTPS    DC    CL40'                                        '\n         DC    CL40'                                        '\nOUTP     DC    CL40'          PVT ???????? K                '\n         DC    CL40'         EPVT ???????? K                '\nWORK     DS    D\nCOMMON   DC    F'0'\nCW       DC    F'0'\nEDIT8    DC    X'4020202020202121'\n         CVT DSECT=YES,LIST=NO\n         IHAGDA\n         END\n//L.SYSLMOD DD DSN=TEST.PGM.LOAD(CSA),DISP=SHR\n//*\n//* EXEC PGM=CSA\n//*TEPLIB DD DISP=SHR,DSN=ED115DM.LOAD\n//*YSPRINT DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "C4SMFDS": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x12?\\x00\\x99\\x12?\\x15\\x16\\x01r\\x01r\\x00\\x00\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-05-03T00:00:00", "modifydate": "1999-05-03T15:16:00", "lines": 370, "newlines": 370, "modlines": 0, "user": "XSDMN"}, "text": "//XODMNC4S JOB MSGCLASS=X,CLASS=B,NOTIFY=XSDMN\n//*\n//ASMHCL  PROC\n//C      EXEC  PGM=IEV90,PARM=OBJECT,REGION=5M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  SYSOUT=B,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))\n//SYSPRINT DD SYSOUT=X,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//L    EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL',REGION=2M,COND=(8,LT,C)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD DD DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(2,1,2)),DSN=&GOSET(GO)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=X,DCB=(RECFM=FB,BLKSIZE=3509)\n//  PEND\n//*\n//*\n//*  DM\n//*\n// EXEC ASMHCL\n//SYSLIB DD DISP=SHR,DSN=SYS1.MACLIB\n//       DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSPRINT DD SYSOUT=*\n//C.SYSIN DD *\nSMFDS    CSECT\n         IEESMCA\n         EJECT\nRDS      DSECT\n******* START OF SPECIFICATIONS ***************************************\n***                                                                  **\n***  MACRO-NAME = IEEMBRDS                                           **\n***                                                                  **\n***  DESCRIPTIVE-NAME = SMF RECORDING DATA SET CONTROL BLOCK         **\n***                                                                  **\n***                                                                  **\n***  FUNCTION = MAPPING FOR THE RDS.  AN RDS CONTAINS THE            **\n***             DATA NECESSARY TO CONTROL AN SMF RECORDING           **\n***             DATASET.  IT INCLUDES THE VSAM ACB AND RPL AND       **\n***             OTHER FLAGS AND FIELDS DESCRIBING THE STATUS         **\n***             OF THE DATASET.                                      **\n***                                                                  **\n******* END OF SPECIFICATIONS *****************************************\nRDSID    DS    CL4           CONTROL BLOCK ID\nRDSNEXT  DS    F             FORWARD CHAIN POINTER\nRDSPREV  DS    F             BACKWARD CHAIN POINTER\nRDSFLAG1 DS    XL1           DATASET STATUS INDICATORS\n*                            XXX. ....  RESERVED\nRDSFREE  EQU   X'10'         ...1 ....  NEED TO FREE DATASET AND RDS\nRDSDUMP  EQU   X'08'         .... 1...  OPER HAS BEEN TOLD TO DUMP DS\nRDSREADY EQU   X'04'         .... .1..  DS IS OPEN AND READY TO USE\nRDSCLOSE EQU   X'02'         .... ..1.  DS NEEDS TO BE CLOSED\nRDSNDOP  EQU   X'01'         .... ...1  DS NEEDS TO BE OPENED\nRDSFLAG2 DS    XL1           DATASET STATUS INDICATORS\nRDSLOST  EQU   X'80'         1... ....  DUMMY RDS FOR LOST DATA\nRDSPHYER EQU   X'40'         .1.. ....  PHYSICAL I/O ERROR\nRDSLOGER EQU   X'20'         ..1. ....  LOGICAL I/O ERROR\n*                            ...X XXXX  RESERVED\nRDSFLAG3 DS    XL1           RESERVED\nRDSFLAG4 DS    XL1           RESERVED\nRDSNAME  DS    CL10          DATASET NAME\nRDSVOLID DS    CL6           VOLUME SERIAL\nRDSDDN   DS    CL8           DDNAME RETURNED BY DYNAMIC ALLOC\nRDSCAPTY DS    F             DATASET CAPACITY IN # OF BLOCKS\nRDSNXTBL DS    F             NUMBER OF NEXT AVAILABLE BLOCK\nRDSBQE   DS    A             ADDRESS OF BQE BEING WRITTEN\nRDSAVSPC DS    F             AVAILABLE SPACE FROM SHOWCB\nRDSENRBA DS    F             ENDRBA FROM SHOWCB\nRDSCINV  DS    F             CONTROL INTERVAL SIZE\nRDSDOMID DS    F             MSG # OF DUMP MSG\nRDSRPL   DS    CL76          VSAM RPL\nRDSACB   DS    CL76          VSAM ACB\n         EJECT\nSMFDS    CSECT\n**********************************\n*                                *\n*        REGISTER EQUATES        *\n*                                *\n**********************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n**********************************\n*                                *\n*        STANDARD ENTRY LINKAGE  *\n*                                *\n**********************************\n         STM   R14,R12,12(R13)         SAVE CALLERS REGS\n         BALR  R12,0                   ESTABLIST BASE REGISTER\n         USING *,R12                   USE REG 12 AS BASE\n         ST    R13,SAVE+4              CROSS\n         LA    R15,SAVE                  CHAIN\n         ST    R15,8(R13)                  SAVE\n         LR    R13,R15                       AREAS\n         B     START                   BRANCH AROUND ID SECTION\n         DC    CL8'SMFDS'              CSECT NAME\n         DC    CL8'&SYSDATE'           ASSEMBLY DATE\n         DC    CL8'&SYSTIME'           ASSEMBLY TIME\n         EJECT\n****************************************\n*                                      *\n*  START REAL CODE                     *\n*    CHECK IF PARMS WERE PASSED TO     *\n*    DETERMINE IF ANY MESSAGES         *\n*    SHOULD BE WRITTEN                 *\n*                                      *\n****************************************\nSTART    DS    0H                      START REAL CODE\n         LINK  EP=KLEAR\n         LR    R3,R1                   SAVE PASSED POINTER IN REG 3\n         L     R3,0(R3)                GET PARM LINKAGE\n         L     R10,CVTPTR              PUT CVTPTR INTO REG 10\n         L     R10,SMCAADR(R10)        GET SMCA ADDR INTO REG 10\n         LTR   R10,R10                 SE2 INSTALLED ?\n         BZ    NOACTIVE\n         BNM   NONSE2                  NO , BRANCH\n         CLC   0(2,R3),NOPARMS         CHECK FOR NO PARMS\n         BE    NOPARM                  IF NO PARMS, DO TPUT\n         CLC   2(5,R3),NOMSG           CHECK FOR NOMSG\n         BE    NOMESS                  IF YES, SKIP MESSAGE\n         EJECT\n****************************************\n*                                      *\n*  MESSAGES SHOULD BE WRITTEN          *\n*    LOOP THROUGH ALL RDS'S AND        *\n*    INDICATE THE STATUS OF EACH       *\n*                                      *\n****************************************\nNOPARM   DS    0H                      NO PARM OR PARM NOT NOMSG\n         SPACE 5\n         USING SMCABASE,R10            SMCA ADDRESSABILITY\n         TM    SMCAMISC,SMCAMAN        SMF ACTIVE\n         BNO   NOACTIVE                NO , BRANCH\n         TM    SMCAFLGS,SMCADTLS       DATA LOST ?\n         BO    DATALOST                YES , BRANCH\n         L     R11,SMCAFRDS            GET FIRST RDS POINTER\n         USING RDS,R11                 RDS ADDRESSABILITY\n         TPUT  TITLE,L'TITLE           WRITE TITLE\n         EJECT\n****************************************\n*                                      *\n*  GET THE NAME OF THE SMF DATA        *\n*    SET AND THE VOLUME SERIAL         *\n*    OF THE DEVICE ON WHICH IT RESIDES *\n*                                      *\n****************************************\nLOOP     DS    0H\n         TM    RDSFLAG2,RDSLOST        DATA LOST RDS\n         BO    NOMESS                  YES , BRANCH (DO NOT FORMAT)\n         MVI   OUTLINE,C' '            CLEAR THE\n         MVC   OUTLINE+1(L'OUTLINE-1),OUTLINE  OUTPUT LINE\n         MVC   OUTNAME(L'RDSNAME),RDSNAME   MOVE DSNAME\n         MVC   OUTVSER(L'RDSVOLID),RDSVOLID MOVE VOLID\n         EJECT\n****************************************\n*                                      *\n*  CALCULATE HOW THE FULL THE DATA     *\n*    SET IS AND REPORT THIS AS A       *\n*    PERCENTAGE                        *\n*                                      *\n****************************************\n         L     R4,RDSCAPTY             GET CAPACITY OF DS\n         L     R3,RDSNXTBL             GET NEXT BLOCK NUMBER\n         BCTR  R3,0                    DECREMENT BY 1\n         M     R2,ONETHOU              SCALE FOR PERCENT\n         DR    R2,R4                   DIVIDE (R3 HAS RESULT)\n         CVD   R3,DBLWORD1             CONVERT TO DECIMAL\n         UNPK  DBLWORD2,DBLWORD1+4(4)  UNPACK RESULT\n         OI    DBLWORD2+7,X'F0'        FIX SIGN\n         MVC   OUTPCNT(2),DBLWORD2+5   MOVE PERCENT\n         MVI   OUTDOT,C'.'             INSERT DECIMAL POINT\n         MVC   OUTPCNTT(1),DBLWORD2+7  MOVE TENTHS\n         MVI   OUTPCNTS,C'%'           INSERT PERCENT SIGN\n         CLI   OUTPCNT,C'0'            FIRST DIGIT ZERO ?\n         BNE   AROUND1                 NO , BRANCH\n         MVI   OUTPCNT,C' '            BLANK FIELD\n         EJECT\n****************************************\n*                                      *\n*  CALCULATE THE SIZE OF THE DATA      *\n*    SET AND REPORT THIS IN BLOCKS     *\n*    A BLOCK = X'1000' BYTES           *\n*                                      *\n****************************************\nAROUND1  DS    0H\n         L     R4,RDSCAPTY             GET CAPACITY OF DS\n         CVD   R4,DBLWORD1             CONVERT TO DECIMAL\n         UNPK  DBLWORD2,DBLWORD1+4(4)  UNPACK RESULT\n         OI    DBLWORD2+7,X'F0'        FIX SIGN\n         MVC   OUTSIZE(6),DBLWORD2+2   MOVE SIZE OF DATA SET\n         CLI   OUTSIZE,C'0'            FIRST DIGIT ZERO\n         BNE   AROUND2                 NO , BRANCH\n         MVI   OUTSIZE,C' '            BLANK FIELD\n         CLI   OUTSIZE+1,C'0'          SECOND DIGIT ZERO\n         BNE   AROUND2                 NO , BRANCH\n         MVI   OUTSIZE+1,C' '          BLANK FIELD\n         CLI   OUTSIZE+2,C'0'          THIRD DIGIT ZERO\n         BNE   AROUND2                 NO , BRANCH\n         MVI   OUTSIZE+2,C' '          BLANK FIELD\n         CLI   OUTSIZE+3,C'0'          FOURTH DIGIT ZERO\n         BNE   AROUND2                 NO , BRANCH\n         MVI   OUTSIZE+3,C' '          BLANK FIELD\n         CLI   OUTSIZE+4,C'0'          FIFTH DIGIT ZERO\n         BNE   AROUND2                 NO , BRANCH\n         MVI   OUTSIZE+4,C' '          BLANK FIELD\n         EJECT\n****************************************\n*                                      *\n*  DETERMINE THE STATUS OF THE DATA    *\n*    SET. IE. ACTIVE , ALTERNATE ,     *\n*    OR DUMP REQUIRED                  *\n*                                      *\n****************************************\nAROUND2  DS    0H\n         C     R11,SMCASVCR            IS THIS DS ACTIVE ?\n         BNE   NOTACTIV                NO , BRANCH\n         MVC   OUTSTAT(L'ACTIVE),ACTIVE      INDICATE ACTIVE DS\n         MVC   SUFFIX,24(R11)          GET LOCAL COPY OF SUFFIX\n         B     TO@TPUT                 BRANCH AROUND\n         SPACE 5\nNOTACTIV DS    0H                      NOT ACTIVE DS\n         TM    RDSFLAG1,RDSDUMP        DUMP REQUIRED ?\n         BNO   ALT                     NO , BRANCH\n         MVC   OUTSTAT(L'DUMPREQ),DUMPREQ    INDICATE DUMP REQUIRED\n         B     TO@TPUT                 BRANCH AROUND\n         SPACE 5\nALT      DS    0H\n         MVC   OUTSTAT(L'ALTERNAT),ALTERNAT  INDICATE ALTERNATE DS\n         EJECT\n****************************************\n*                                      *\n*  PUT OUT A LINE OF DATA              *\n*                                      *\n****************************************\nTO@TPUT  DS    0H\n         TPUT  OUTLINE,L'OUTLINE       WRITE PGMER MESSAGE\n         L     R11,RDSNEXT             MOVE TO NEXT RDS\n         C     R11,SMCARDSH            LAST POINTS TO HEADER\n         BNE   LOOP                    CONTINUE LOOP\n         EJECT\n****************************************\n*                                      *\n*  DETERMINE APPROPRIATE RETURN CODE   *\n*    1 = SYS1.MANA                     *\n*    2 = SYS1.MANB                     *\n*    36= SYS1.MAN9    ...   ETC.       *\n*                                      *\n****************************************\nNOMESS   DS    0H                      DON'T WRITE MESSAGE\n         LA    R6,SUFFIXS              POINT TO SUFFIXS ARRAY\n         LA    R7,L'SUFFIXS            NUMBER OF SUFFIXES\n         SLR   R15,R15                 ZERO INDEX AND RETURN CODE\n         SPACE 5\nCONTINUE DS    0H\n         CLC   SUFFIX,0(R6)            SUFFIX MATCH ??\n         BE    EXITX                   IF YES, EXIT WITH RC\n         LA    R15,1(R15)              INCREMENT RETURN CODE\n         LA    R6,1(R6)                INCREMENT INDEX\n         BCT   R7,CONTINUE             CONTINUE LOOP\n         LA    R15,100                 IF NOT FOUND  ..  BUG\n         B     EXIT                    BRANCH TO EXIT\n         EJECT\n****************************************\n*                                      *\n*  NON SE2 SYSTEM                      *\n*                                      *\n****************************************\nNONSE2   DS    0H\n         IC    R10,35(R10)             GET SMCAXORY FROM SMCA\n         STC   R10,XORY                STORE IN O/P MESSAGE\n         CLC   0(2,R3),NOPARMS         ANY PARMS ENTERED\n         BE    NOPARMS1                NO , BRANCH\n         CLC   2(5,R3),NOMSG           CHECK FOR NOMSG\n         BE    NOMESS1                 IF YES, SKIP MESSAGE\nNOPARMS1 DS    0H\n         TPUT  MESS,L'MESS             WRITE PGMER MESSAGE\nNOMESS1  DS    0H\n         LA    R15,1                   PRIME RETURN CODE FOR MANX\n         CLI   XORY,EX                 CHECK FOR MANX\n         BE    EXIT                    IF YES, EXIT WITH RC=1\n         LA    R15,2                   IF MANY, MAKE IT RC=2\n         B     EXIT                    BRANCH TO EXIT\n         EJECT\n****************************************\n*                                      *\n*  PUT OUT SMF NOT ACTIVE MESSAGE      *\n*                                      *\n****************************************\nNOACTIVE DS    0H\n         TPUT  NOACTIVM,L'NOACTIVM     WRITE MESSAGE\n         LA    R15,300                 INDICATE SMF NOT ACTIVE\n         B     EXIT\n         EJECT\n****************************************\n*                                      *\n*  PUT OUT DATA LOST MESSAGE           *\n*                                      *\n****************************************\nDATALOST DS    0H\n         TPUT  DATALOSM,L'DATALOSM     WRITE MESSAGE\n         LA    R15,400                 INDICATE DATA LOST MODE\n         B     EXIT\n         EJECT\nEXITX    DS    0H\n         LA    R15,1(R15)              RETCODE IS 1 GREATER THAN INDEX\nEXIT     DS    0H\n****************************************\n*                                      *\n*  STANDARD EXIT LINKAGE               *\n*                                      *\n****************************************\n         L     13,SAVE+4\n         L     14,12(13)\n         LM    1,12,20(13)\n         BR    14\n         EJECT\n****************************************\n*                                      *\n*  CONSTANTS AND STORAGE FIELDS USED   *\n*                                      *\n****************************************\nDBLWORD1 DC    D'0'\nDBLWORD2 DC    D'0'\nFULLWORD DC    F'0'\nONETHOU  DC    F'1000'\nMESS     DS    0CL9                    MESSAGE DC\n         DC    C'SYS1.MAN'\nXORY     DS    C\nSUFFIX   DS    C\nNOMSG    DC    C'NOMSG'\nNOPARMS  DC    X'0000'                 NO PARMS\nSUFFIXS  DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'\nACTIVE   DC    C'ACTIVE       '\nALTERNAT DC    C'ALTERNATE    '\nDUMPREQ  DC    C'DUMP REQUIRED'\nNONSE2M  DC CL80'+++ SE2 OR SMF IS NOT ACTIVE IN THIS SYSTEM - SMFDS'\nNOACTIVM DC CL80'+++ SMF IS NOT ACTIVE - SMFDS'\nDATALOSM DC CL80'+++ SMF IS IN DATA LOST STATUS - NO RECORDING - SMFDS'\nTITLE    DC    CL80'DATASET NAME  VOLSER      SIZE  %USED    STATUS'\nOUTLINE  DC    CL80' '\nOUTNAME  EQU   OUTLINE+0\nOUTVSER  EQU   OUTLINE+14\nOUTSIZE  EQU   OUTLINE+24\nOUTPCNT  EQU   OUTLINE+32\nOUTDOT   EQU   OUTLINE+34\nOUTPCNTT EQU   OUTLINE+35\nOUTPCNTS EQU   OUTLINE+36\nOUTSTAT  EQU   OUTLINE+41\nCVTPTR   EQU   16                      POINTER TO THE CVT\nSMCAADR  EQU   X'C4'                   OFFSET IN CVT OF THE SMCA PTR\nEX       EQU   C'X'                    TO CHECK SUFFIX\n         DC    C'SAVE AREA'\nSAVE     DC    18F'0'\n         END   SMFDS\n//L.SYSLMOD DD DISP=SHR,DSN=TEST.PGM.LOAD(C4SMFDS)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDMN": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x13\\x00\\x00\\x00\\x85&\\x7f\\x00\\x98(\\x0f\\x13'\\x01C\\x01\\x1e\\x00\\x00\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@\"", "ispf": {"version": "01.19", "flags": 0, "createdate": "1985-09-24T00:00:00", "modifydate": "1998-10-07T13:27:00", "lines": 323, "newlines": 286, "modlines": 0, "user": "XSDMN"}, "text": "//C4SYSDMA JOB MSGCLASS=X,CLASS=B,NOTIFY=XSDMN\n//*\n// EXEC ASMHCL,PARM.L=('AMODE=31','RMODE=24')\n//C.SYSLIB DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSPRINT DD SYSOUT=*\n//SYSIN DD *\nDDMN     CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         USING *,R15\n         STM   R14,R12,12(R13)\n         LA    R12,SAVE\n         ST    R12,8(R13)\n         ST    R13,SAVE+4\n         LR    R13,R12\n         LR    R12,R15\n         USING DDMN,R12\n         DROP  R15\nINIT     L     R2,16               (R2)=ADDR OF CVT                     00022\n         USING CVT,R2\n         L     R5,CVTOPCTP         (R5)=ADDR OF RMCT                    00023\n         L     R3,RMCTDMDT(R5)     (R3)=ADDR OF DMDT (FIRST ENTRY)      00024\n         XR    R4,R4               CLEAR REG 4                          00025\n         ICM   R4,B'0011',RMCTDMNC(R5)   (R4)=NUMBER OF DOMAINS         00026\n         LTR   R4,R4               ANYBODY HOME?                        00027\n         BNP   ENDJC                NOPE-> EXIT STAGE LEFT              00028\n         USING DMDT,R3             ESTABLISH ADDR TO DOMAIN DESC. TABLE 00029\n         SPACE                                                          00030\n         L     R5,RMCTWMST(R5)     (R5)=ADDR WMST                       00031\n         MVC   MIPS,4(R5)          MOVE IN IPS NUMBER TO MSGHDR1        00032\n         LA    R1,MSGHDR1                                               00033\n         BAL   R6,PUTMSG                                                00034\n         LA    R1,MSGHDR2          POKE OUT THE HEADER MESSAGES         00035\n         BAL   R6,PUTMSG                                                00036\n         EJECT                                                          00037\nLOOP     MVI   MSG,C' '            CLEAR OUT THE MESSAGE BUFFER         00038\n         MVC   MSG+1(L'MSG-1),MSG    WITH BLANKS                        00039\n         LA    R1,DMDTNO                                                00040\n         LA    R2,MNO                                                   00041\n         BAL   R6,EDIT             GO EDIT DOMAIN NUMBER INTO MSG       00042\n         CLI   MNO+2,C'-'          DOMAIN=0?                            00043\n         BNE   CONTINUE             NO-> SKIP FIXUP                     00044\n         MVI   MNO+2,C'0'                                               00045\nCONTINUE DS    0H                                                       00046\n         SPACE                                                          00047\n         LA    R1,DMDTLO                                                00048\n         LA    R2,MLO                                                   00049\n         BAL   R6,EDITH            GO EDIT MIN MPL INTO MSG             00050\n         SPACE                                                          00051\n         LA    R1,DMDTHI                                                00052\n         LA    R2,MHI                                                   00053\n         BAL   R6,EDITH            GO EDIT MAX MPL INTO MSG             00054\n         SPACE                                                          00055\n*        LA    R1,DMDTWT                                                00056\n*        LA    R2,MWT                                                   00057\n*        BAL   R6,EDIT             GO EDIT WEIGHTING FACTOR INTO MSG    00058\n         SPACE                                                          00059\n         LA    R1,DMDTMPLI                                              00060\n         LA    R2,MMPLT                                                 00061\n         BAL   R6,EDITH            GO EDIT CURRENT MPL TARGET INTO MSG  00062\n         SPACE                                                          00063\n         LA    R1,DMDTRUA                                               00064\n         LA    R2,MRUA                                                  00065\n         BAL   R6,EDITRUA          GO EDIT AVE # OF READY USRS INTO MSG 00066\n         SPACE                                                          00067\n         LA    R1,DMDTMPLO                                              00068\n         LA    R2,MGOOU                                                 00069\n         BAL   R6,EDITH            GO EDIT CURRENT # USRS GOING OUT     00070\n         SPACE                                                          00071\n         LA    R1,DMDTCMPL                                              00072\n         LA    R2,MCMPL                                                 00073\n         BAL   R6,EDITH            GO EDIT CURRENT MPL INTO MSG         00074\n         SPACE                                                          00075\n         LA    R1,DMDTOUTU                                              00076\n         LA    R2,MOUTU                                                 00077\n         BAL   R6,EDITH            GO EDIT CURNT # USRS ON OUT QUEUE    00078\n         SPACE                                                          00079\n         LA    R1,DMDTTWSR                                              00080\n         LA    R2,SERVR                                                 00081\n         BAL   R6,EDITH1S          GO EDIT SERVICE                      00082\n         SPACE                                                          00079\n         LA    R1,DMDTCIDX                                              00080\n         LA    R2,CIDXR                                                 00081\n         BAL   R6,EDITH1D          GO EDIT CIDX                         00082\n         SPACE                                                          00079\n         LA    R1,DMDTINCU                                              00080\n         LA    R2,MINCU                                                 00081\n         BAL   R6,EDITH            GO EDIT CURNT # SWAPBL IN CORE USERS 00082\n         SPACE                                                          00083\n         LA    R1,WTOMSG                                                00084\n         BAL   R6,PUTMSG                                                00085\n         SPACE 2                                                        00086\n         LA    R3,DMDTLEN(R3)      BUMP POINTER                         00087\n         BCT   R4,LOOP             LOOP THROUGH ALL DOMAINS             00088\n*                                                                       00089\n         B     ENDJC                                                    00090\n         EJECT                                                          00091\n*.....................................................................* 00092\n*     LOCAL SUBROUTINES   EDIT,EDITH  (USES REG 5)                    * 00093\n*.....................................................................* 00094\n         SPACE                                                          00095\nEDIT     SR    R5,R5               CLEAR WORK REGISTER                  00096\n         ICM   R5,B'0001',0(R1)    GET BYTE TO CONVERT                  00097\n         C     R5,=F'999'          TO LARGE?                            00098\n         BNH   EDIT1                                                    00099\n         MVC   0(3,R2),=C'***'     INDICATE TOO LARGE                   00100\n         BR    R6                    AND RETURN                         00101\nEDIT1    CVD   R5,CVDWORK          CONVERT TO DECIMAL                   00102\n         MVC   0(3,R2),=X'202020'  MOVE IN MASK                         00103\n         BCTR  R2,0                DECREMENT POSITION FOR SPACE         00104\n         ED    0(4,R2),CVDWORK+6     BEFORE NUMBER AND EDIT             00105\n         CLC   1(3,R2),=C'   '     ANYTHING THERE                       00106\n         BE    EDIT2                                                    00107\n         BR    R6                                                       00108\nEDIT2    MVI   3(R2),C'-'          INDICATE PLACE HOLDER                00109\n         BR    R6                  RETURN                               00110\n         SPACE 3                                                        00111\nEDITRUA  SR    R5,R5               CLEAR WORK REGISTER                  00112\n         ICM   R5,B'0011',0(R1)    GET HALFWORD TO CONVERT              00113\n         ST    R5,RUA\n         SRL   R5,4\n         C     R5,=F'999'          TO LARGE?                            00114\n         BNH   EDITRUX                                                  00115\n         MVC   0(5,R2),=C'*****'   INDICATE TOO LARGE                   00116\n         BR    R6                    AND RETURN                         00117\nEDITRUX  CVD   R5,CVDWORK          CONVERT TO DECIMAL                   00118\n         MVC   0(3,R2),=X'202021'  MOVE IN MASK                         00119\n         BCTR  R2,0                DECREMENT POSITION FOR SPACE         00120\n         ED    0(4,R2),CVDWORK+6     BEFORE NUMBER AND EDIT             00121\n         MVC   4(1,R2),=C'.'\n         L     R5,RUA\n         N     R5,=F'15'\n         LA    R2,4(R2)\n         CVD   R5,CVDWORK          CONVERT TO DECIMAL                   00118\n*        MVC   1(1,R2),=X'20'      MOVE IN MASK                         00119\n*        ED    1(1,R2),CVDWORK+7     BEFORE NUMBER AND EDIT             00121\n         BR    R6                                                       00124\nEDITH    SR    R5,R5               CLEAR WORK REGISTER                  00112\n         ICM   R5,B'0011',0(R1)    GET HALFWORD TO CONVERT              00113\n         C     R5,=F'999'          TO LARGE?                            00114\n         BNH   EDITH1                                                   00115\n         MVC   0(3,R2),=C'***'     INDICATE TOO LARGE                   00116\n         BR    R6                    AND RETURN                         00117\nEDITH1D  SR    R5,R5               CLEAR WORK REGISTER                  00112\n         ICM   R5,B'0011',0(R1)    GET HALFWORD TO CONVERT              00113\n         C     R5,=F'9999999'      TO LARGE?                            00114\n         BNH   EDITH1X                                                  00115\n         MVC   0(8,R2),=C'********' INDICATE TOO LARGE                  00116\n         BR    R6                    AND RETURN                         00117\nEDITH1X  CVD   R5,CVDWORK          CONVERT TO DECIMAL                   00118\n         MVC   0(8,R2),=X'20202021204B2020'  MOVE IN MASK               00119\n         BCTR  R2,0                DECREMENT POSITION FOR SPACE         00104\n         ED    0(9,R2),CVDWORK+4     BEFORE NUMBER AND EDIT             00121\n         BR    R6\nEDITH1S  SR    R5,R5               CLEAR WORK REGISTER                  00112\n         L     R5,0(R1)            LOAD                                 00113\n         C     R5,=F'99999999'     TO LARGE?                            00114\n         BNH   EDITH1Y                                                  00115\n         MVC   0(8,R2),=C'********' INDICATE TOO LARGE                  00116\n         BR    R6                    AND RETURN                         00117\nEDITH1Y  CVD   R5,CVDWORK          CONVERT TO DECIMAL                   00118\n         MVC   0(8,R2),=X'2020202020202120'  MOVE IN MASK               00119\n         BCTR  R2,0                DECREMENT POSITION FOR SPACE         00104\n         ED    0(9,R2),CVDWORK+4     BEFORE NUMBER AND EDIT             00121\n         BR    R6\nEDITH1   CVD   R5,CVDWORK          CONVERT TO DECIMAL                   00118\n         MVC   0(3,R2),=X'202020'  MOVE IN MASK                         00119\n         BCTR  R2,0                DECREMENT POSITION FOR SPACE         00120\n         ED    0(4,R2),CVDWORK+6     BEFORE NUMBER AND EDIT             00121\n         CLC   1(3,R2),=C'   '     ANYTHING THERE                       00122\n         BE    EDITH2                                                   00123\n         BR    R6                                                       00124\nEDITH2   MVI   3(R2),C'-'          INDICATE PLACE HOLDER                00125\n         BR    R6                  RETURN                               00126\n         EJECT                                                          00127\n*.....................................................................* 00128\n*        LOCAL SUBROUTINE FOR IO TO OPER/USER                         * 00129\n*.....................................................................* 00130\n         SPACE                                                          00131\n*                                                                       00132\n* ENTER WITH WTO,WTOR LIST FORM POINTED TO BY R1                        00133\n*                                                                       00134\n*    BAL  R6,PUTMSG         OR                                          00135\n*    BAL  R6,PUTGET                                                     00136\n*                                                                       00137\n*  USES R14 FOR WORK                                                    00138\n*                                                                       00139\n*                                                                       00140\nPUTMSG   DS    0H                                                       00141\nTPUTIT   DS    0H                                                       00146\n         LH    R0,0(,R1)           GET LENGTH OF WTO MESSAGE            00147\n         S     R0,=F'4'            SUBTRACT OFF HEADER                  00148\n         LA    R1,4(,R1)           BUMP MSG ADDRESS PAST HDR            00149\n         TPUT  (1),(0),R           DO THE TPUT                          00150\n         BR    R6                                                       00151\n         SPACE 2                                                        00152\n*.....................................................................* 00185\n*        VARIABLES                                                    * 00186\n*.....................................................................* 00187\n         SPACE 2                                                        00188\nCVDWORK  DC    D'0'                WORK AREA                            00189\nANSWER   DC    F'0'                ADDRESS POINTER FOR EXTRACT          00190\nTSOFLAG  DC    X'00'               ='80' IF TSO. '00' IF NOT TSO        00191\n*                                                                       00192\nEXTRACT  EXTRACT ANSWER,'S',FIELDS=(TSO),MF=L                           00199\n         EJECT                                                          00200\n*.....................................................................* 00240\n*        LITERAL POOL                                                 * 00241\n*.....................................................................* 00242\n         SPACE                                                          00243\n         LTORG                                                          00244\n         EJECT                                                          00245\nENDJC    DS    0H\n         L     R13,4(R13)\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\nSYSPRINT DCB   DSORG=PS,MACRF=(PM),DDNAME=SYSPRINT,LRECL=79,RECFM=FB,  X\n               BLKSIZE=790\nSAVE     DC    19F'0'\n*.....................................................................* 00201\n*        MESSAGES AND MESSAGE MAPPING OVERLAYS                        * 00202\n*.....................................................................* 00203\n         SPACE                                                          00204\nRUA      DS    1F\nMSGHDR1  WTO   'IPS=XX                                    ',           X00205\n               ROUTCDE=(11),MF=L                                        00206\n         ORG   MSGHDR1+8                                                00207\nMIPS     DS    CL2                                                      00208\n         ORG                                                            00209\nMSGHDR2  WTO   'DOM CUR TGT MIN MAX   RDY OUT SERVICE      CIDX  IN >O'X00210\n               ,ROUTCDE=(11),MF=L                                       00211\nWTOMSG   WTO   '                                                     ',X00214\n               ROUTCDE=(11),MF=L                                        00215\n         ORG   WTOMSG+4                                                 00216\nMSG      DS    CL43                                                     00217\n         ORG   WTOMSG+4                                                 00218\nMNO      DS    CL3                                                      00219\n         DS    CL1\nMCMPL    DS    CL3                                                      00227\n         DS    CL1\nMMPLT    DS    CL3                                                      00229\n         DS    CL1\nMLO      DS    CL3                                                      00221\n         DS    CL1\nMHI      DS    CL3                                                      00223\n         DS    CL1\nMRUA     DS    CL5                                                      00231\n         DS    CL1\nMOUTU    DS    CL3                                                      00237\n         DS    CL1\nSERVR    DS    CL8                                                      00233\n         DS    CL1\nCIDXR    DS    CL8                                                      00233\n         DS    CL1\nMINCU    DS    CL3                                                      00233\n         DS    CL1\nMGOOU    DS    CL3                                                      00235\n         ORG                                                            00238\n*                                                                       00239\nRMCTDMDT EQU   X'B4'           POINTER TO DOMAIN TABLE                  00269\nRMCTDMNC EQU   X'BC'           COUNT OF NUMBER OF DOMAINS               00270\nRMCTWMST EQU   X'18'           ADDRESS OF WLM SPEC TABLE                00271\n*.....................................................................* 00246\n*        MAPPING DSECT FOR DMDT (DOMAIN DESCRIPTOR TABLE)             * 00247\n*.....................................................................* 00248\n         SPACE                                                          00249\nDMDT     DSECT                                                          00250\nDMDTNO   DS    XL1             DOMAIN NUMBER                            00251\nDMDTRSV0 DS    XL1             RESERVED                                 00251\nDMDTMPLI DS    XL2             MPL IN TARGET                            00252\nDMDTMPLO DS    XL2             MPL OUT TARGET                           00252\nDMDTRUA  DS    XL2             AVE # OF READY USERS                     00256\nDMDTFITS DS    XL2             FITS RC                                  00256\nDMDTCMPL DS    XL2             CURRENT MPL                              00258\nDMDTOUTU DS    XL2             CURRENT # USERS ON OUT Q                 00259\nDMDTINCU DS    XL2             CURRENT # SWAPPABLE INCORE USERS         00260\nDMDTRUC  DS    XL4             ACCUM FOR READY USER AVERAGE             00261\nDMDTWMS  DS    XL4             INTVL DMN SVCE ACCUM                     00261\nDMDTTWSR DS    XL4             WEIGHTED INTVL DMN SVCE                  00261\nDMDTRSV2 DS    XL4             RESERVED                                 00251\nDMDTCIDX DS    XL2             CONTENTION INDEX                         00261\nDMDTNSW  DS    XL2             CURRENT AND N/S IN USERS                 00261\nDMDTRUMX DS    XL2             MAX AND READY USERS IN INTERVAL          00261\nDMDTFLGS DS    XL1                                                      00261\nDMDTRSV3 DS    XL1             RESERVED                                 00251\nDMDTTRNC DS    XL4                                                      00261\nDMDTTRNT DS    XL4                                                      00261\nDMDTTWET DS    XL4                                                      00261\nDMDTLO   DS    XL2             MIN  MPL LEVEL                           00252\nDMDTHI   DS    XL2             MAX  MPL LEVEL                           00253\nDMDTASRL DS    XL4             LOW AVG SERVICE RATE                     00253\nDMDTASRH DS    XL4             HI  AVG SERVICE RATE                     00253\nDMDTDSRL DS    XL4             LO  TOT SERVICE RATE                     00253\nDMDTDSRH DS    XL4             HI  TOT SERVICE RATE                     00253\nDMDTCRTI DS    XL2             ESTOR CRITERIA TABLE INDEX               00254\nDMDTCRTR DS    XL2             REQUESTED CRIYERIA TABLE INDEX           00255\nDMDTRUMW DS    XL2             WEIGHTED READY USER MAX                  00257\nDMDTRSV5 DS    XL2             RESERVED                                 00261\nDMDTWORK DS    XL100           WORKAREA                                 00261\nDMDTEND  DS    0X              END OF DMT                               00262\nDMDTLEN  EQU   *-DMDT                                                   00263\n         SPACE 2                                                        00264\n         CVT DSECT=YES,LIST=NO\n         LTORG\n         END\n//*KED.SYSLMOD DD DSN=SYS1.MISC.LINKLIB(DDMN),DISP=SHR\n//L.SYSLMOD DD DSN=TEST.PGM.LOAD(DDMN),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DELAY": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x941\\x9f\\x00\\x980o\\x088\\x00\\x9f\\x00\\x88\\x00\\x00\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1994-11-15T00:00:00", "modifydate": "1998-11-02T08:38:00", "lines": 159, "newlines": 136, "modlines": 0, "user": "XSDMN"}, "text": "//XSDMNZZZ JOB MSGCLASS=X,CLASS=Q,NOTIFY=XSDMN\n//*\n//ASMHCL  PROC\n//C      EXEC  PGM=IEV90,PARM=OBJECT,REGION=5M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  SYSOUT=X,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))\n//SYSPRINT DD SYSOUT=X,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//L    EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL',REGION=5M,COND=(8,LT,C)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD DD DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(2,1,2)),DSN=&GOSET(GO)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=X,DCB=(RECFM=FB,BLKSIZE=3509)\n//  PEND\n//*\n//   EXEC ASMHCL\n//C.SYSIN DD *\n         TITLE '   D E L A Y  '\n************************************************************\n*                                                          *\n*        'DELAY' TSO COMMAND CP                            *\n*                                                          *\n************************************************************\n         SPACE\n*        WRITTEN BY. JOHNS GRAY.\n*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.\n*        ATTRIBUTES. RE-ENTRANT.\n*        COMMENTS AND CHANGES BY BILL GODFREY.\n         SPACE\nDELAY    CSECT\n         USING *,R11\n         B     @BEGIN-*(R15)\n         DC    AL1(11),CL11'DELAY'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    C' SOFTWARE BY PRC COMPUTER CENTER, '\n         DC    C'PLANNING RESEARCH CORPORATION, MCLEAN VA'\n         DC    C' - BILL GODFREY '\n@BEGIN   STM   R14,R12,12(R13)\n         LR    R11,R15\n         LR    R2,R1\n         GETMAIN R,LV=@DATAL\n         ST    13,4(,1)\n         ST    1,8(,13)\n         LR    13,1\n         LA    R9,72(,R1)          R9 POINTS TO TIMEXITW\n         USING TIMEXITW,R9\n         SPACE\n         LR    R1,R2\n         USING CPPL,R1\n         SPACE\n         L     R2,CPPLCBUF\n         USING CBUF,R2\n         LH    R3,CBUFLNG\n         LH    R4,CBUFOFF\n         LA    R5,4(,4)\n         SR    R3,R5\n         BP    LL010\nLE010    LA    R0,L'MSG0\n         LA    R1,MSG0\n         SVC   93\n         LA    R15,8\n         B     LLEXIT\nLL010    CH    R3,=H'5'\n         BNL   LE010\n         LA    R4,CBUFDATA(R4)\n         SLR   R5,R5\nLP010    LA    R6,12\n         LA    R7,TBL+11\nLP020    CLC   0(1,R4),0(R7)\n         BE    LL020\n         BCTR  R7,0\n         BCT   R6,LP020\n         LA    R0,L'MSG1\n         LA    R1,MSG1\n         SVC   93\n         LA    R15,12\n         B     LLEXIT\nLL020    CLI   0(R4),C'H'          LAST DIGIT H\n         BE    LL031               YES, HUNDREDTHS OF SECONDS\n         CLI   0(R4),C' '\n         BE    LL030\n         MH    R5,=H'10'\n         AR    R5,R6\n         BCTR  R5,R0\n         LA    R4,1(,R4)\n         BCT   R3,LP010\nLL030    MH    R5,=H'100'\nLL031    ST    R5,BINTVL\n         MVC   TIMEXITW(TIMEXITL),TIMEXIT\n         XC    ECB,ECB\n         SPACE\n         STIMER REAL,TIMEXITW,BINTVL=BINTVL\n         SPACE\n         WAIT  1,ECB=ECB,LONG=YES\n         SPACE\nLLEXIT   LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN R,A=(1),LV=@DATAL\n         LM    R14,R12,12(R13)\n         SLR   R15,R15\n         BR    R14\n         DROP  R11\n         SPACE\nTBL      DC    CL11'0123456789 H'\nMSG0     DC    C'LENGTH ERROR -'\nMSG1     DC    C'NON-NUMERIC INTERVAL -'\n         LTORG\n         SPACE\n         DC    0F'0'\n         USING *,R11\nTIMEXIT  STM   14,12,12(R13)\n         LR    R11,R15\n         LR    R9,R15              R9 POINTS TO TIMEXITW\n         SPACE\n         POST  ECB,0\n         SPACE\n         LM    14,12,12(R13)\n         SLR   R15,R15\n         BR    R14\nTIMEXITL EQU   *-TIMEXIT\n         SPACE\n@DATA    DSECT\n         DS    18F\nTIMEXITW DS    0F,(TIMEXITL)X\nECB      DS    F\nBINTVL   DS    F\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nCBUF     DSECT\nCBUFLNG  DS    AL2\nCBUFOFF  DS    AL2\nCBUFDATA DS    0C\n         SPACE\n         IKJCPPL\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n//L.SYSLMOD DD DISP=SHR,DSN=TEST.PGM.LOAD\n//L.SYSIN DD *\n NAME DELAY(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DMDT": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\"\\x00\\x00\\x00\\x852o\\x00\\x98(\\x0f\\x13&\\x00g\\x00S\\x00\\x00\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.34", "flags": 0, "createdate": "1985-11-22T00:00:00", "modifydate": "1998-10-07T13:26:00", "lines": 103, "newlines": 83, "modlines": 0, "user": "XSDMN"}, "text": "//ED115DMA JOB MSGCLASS=X,NOTIFY=ED115DM,CLASS=1\n//*EXEC ASMFCL\n// EXEC ASMHCL,PARM.C='OBJECT,NODECK,XREF(FULL)',\n// PARM.L=(XREF,LET,LIST,'RMODE=24','AMODE=24')\n//*SM.SYSLIB DD DSN=SYS1.MACLIB,DISP=SHR\n//C.SYSLIB DD DSN=SYS1.MACLIB,DISP=SHR\n//           DD DSN=SYS1.MODGEN,DISP=SHR\n//C.SYSIN DD *\nDMD# CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         USING *,R15\n         STM   R14,R12,12(R13)            COMMON TO ALL ASM  1\n         LA    R12,SAVE                   COMMON TO ALL ASM  3 R11\n         ST    R12,8(R13)                 COMMON TO ALL ASM  4 NOT\n         ST    R13,SAVE+4                 COMMON TO ALL ASM  5 R12\n         LR    R13,R12                    COMMON TO ALL ASM  6 3-6\n         LR    R12,R15                    COMMON TO ALL ASM  2\n         DROP  R15                        NEEDED BY SUBR  USING 15 FRST\n         USING DMD#,R12                   COMMON TO ALL ASM\n         OPEN  (SYSUT2,OUTPUT)\n         LA    R8,SYSUT2\n         USING IHADCB,R8\n         L     R3,CVTPTR\n         USING CVT,R3\n         L     R4,CVTOPCTP\n         USING RMCT,R4\n         DROP  R3\n         L     1,LABEL7                   GO AMODE 31\n         BSM   0,1\nLABEL7   DC    A(LABEL8+X'80000000')\nLABEL8   DS    0H\n         L     R3,RMCTDMDT\n         USING DMDT,R3\n         L     R5,RMCTRCT\n         USING RCT,R5\n         SR    R1,R1\n         LH    R2,RMCTDMNC\n         MVC   OUTF(80),0(R3)\n         LA    1,LABEL3                   GO AMODE 24\n         BSM   0,1\nLABEL3   DS    0H\n         LA    R9,80\n         STH   R9,DCBLRECL      STORE LENGTH OF RECORD\nDMDTLOOP DS    0H\n         PUT   SYSUT2,OUTF\n         L     1,LABEL5                   GO AMODE 31\n         BSM   0,1\nLABEL5   DC    A(LABEL6+X'80000000')\nLABEL6   DS    0H\n         LA    R3,180(R3)\n         MVC   OUTF(80),0(R3)\n         LA    1,LABEL4                   GO AMODE 24\n         BSM   0,1\nLABEL4   DS    0H\n         BCT   R2,DMDTLOOP\n         L     R13,SAVE+4                     COMMON TO ALL ASM 1\n         LM    R14,R12,12(R13)                COMMON TO ALL ASM 2\n         LA    R15,0                          COMMON TO ALL ASM 3\n         RETURN\nSAVE     DS    18F\nOUTF     DS    CL80\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=(PM)\n         SPACE 1\n         DCBD  DSORG=PS,DEVD=DA\n         CVT DSECT=YES\n         SPACE 1\nRMCT     DSECT\nRMCTDMDT EQU   RMCT+X'B4',4\nRMCTDMNC EQU   RMCT+X'BC',2\nRMCTRCT  EQU   RMCT+X'E4',4\n         SPACE 1\nRCT      DSECT\nRCVUICA  EQU   RCT+X'3E',2\nRCVCPUA  EQU   RCT+X'40',2\nRCVPTR   EQU   RCT+X'48',2\nRCVTOTDF EQU   RCT+X'74',2\n         SPACE 1\nDMDT     DSECT\nDMDTNO   EQU   DMDT+0,1\nDMDTOUTU EQU   DMDT+12,2\nDMDTTWSR EQU   DMDT+24,4\nDMDTTWET EQU   DMDT+48,4\nLDMDT    EQU   180\n         LTORG\n         END\n//L.SYSLMOD DD DSN=ED115DM.PROD.LOAD,DISP=SHR\n//L.SYSIN DD *\n  NAME DMDT(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EDCHP": {"ttr": 1288, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x00\\x97\\x10\\x1f\\x00\\x980?\\x08X\\x01\\xee\\x05\\x1c\\x00\\x8e\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1997-04-11T00:00:00", "modifydate": "1998-10-30T08:58:00", "lines": 494, "newlines": 1308, "modlines": 142, "user": "XSDMN"}, "text": "//ED115DMQ JOB MSGCLASS=X,CLASS=Q,REGION=4M,NOTIFY=XSDMN\n//*\n//ASM1    EXEC ASMHCL,PARM.L='XREF,LET,LIST,AMODE=31,RMODE=24'\n//C.SYSLIB DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD  *\n***********************************************************************\n*                                                                     *\n*                   CHPID DISPLAY FACILITY (EDCHP)                    *\n*                                                                     *\n* ABSTRACT: DISPLAY ONLINE DISK VTOC'S AND DATASETS.                  *\n*                                                                     *\n* EXTERNAL REFERENCE: ISPLINK                                         *\n*                                                                     *\n***********************************************************************\n*\n* NOTE THE FOLLOWING ENTRY POINT LOGIC IS NON-STANDARD. IN PARTICULAR,\n*      IT WILL NOT WORK WITH CALLED PL/I PROGRAMS.\n*\n***********************************************************************\n         MACRO\n         DX    &HEXTYP,&CHAR\n         DC    X'&HEXTYP'\n         DC    CL7&CHAR\n         MEND\n         EJECT\nUDF      CSECT\nCVTPTX   EQU   X'010'\nCVTUCBSX EQU   X'434'\n         USING *,13,12,11\n         B     72(,15)\n         DC    17F'0'\n         STM   14,12,12(13)   SAVE CALLING PGM'S REGISTERS\n         LA    R2,0(,R15)     LOAD EPA IN R2 FOR WORK REGISTER\n         ST    R2,8(R13)      LINK SAVE AREAS\n         ST    R13,4(R2)      SAVE THE CALLER'S R13\n*\nSETBASES DS    0H\n         LR    R13,R2         SET SAVE AREA AND BASE 1\n         LR    R12,R2         SET\n         A     R12,L4096          BASE 2\n         LR    R11,R12        SET\n         A     R11,L4096          BASE 3\n*\nINITFLDS DS    0H\n         MVC   TABAREA(80),SPACES\n         XC    ISPARMS(40),ISPARMS\n         B     SHOWDASD\n*\nSHOWAGIN DS    0H\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDELETE,ASTER),VL,MF=(E,ISPARMS)\n*\n         B     SHOWDASD    DISPLAY THE UNIT'S\n*\nSHOWDONE DS    0H\n*                                  DELETE THE TABLE VARIABLES\n         L     R15,ISPLINK\n         CALL  (15),(VDELETE,ASTER),VL,MF=(E,ISPARMS)\n*\n         L     R13,4(R13)     RESTORE THE CALLER'S R13\n         LM    14,12,12(13)   RETURN TO OUR CALLER\n         SR    15,15          SET RC=0\n         BR    14             AND RETURN\n         EJECT\n**************************** END ***************************\nCVTPRT   EQU   *\n         UNPK  CVTA(9),ADDRUCB(5)\n         TR    CVTA(8),HEXTAB\n         LM    R14,R15,CVTA\n         BR    R7\n*\nL4096    DC    F'4096'\n*\n************************************************************\n*\nSHOWDASD DS    0H\n*\n         MVC   SELCODE(1),SPACES  SET SELECTION CODE TO SPACES\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VTOLINEP,TABAREA,CHAR,L77),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VSLP,SELCODE,CHAR,L1),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCHP00,CHP00,CHAR,L72),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCHP08,CHP08,CHAR,L72),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCHP10,CHP10,CHAR,L72),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCHP18,CHP18,CHAR,L72),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCHP20,CHP20,CHAR,L72),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCHP28,CHP28,CHAR,L72),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCHP30,CHP30,CHAR,L72),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCHP38,CHP38,CHAR,L72),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCHP40,CHP40,CHAR,L72),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCHP48,CHP48,CHAR,L72),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCHP50,CHP50,CHAR,L72),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCHP58,CHP58,CHAR,L72),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCHP60,CHP60,CHAR,L72),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCHP68,CHP68,CHAR,L72),VL,MF=(E,ISPARMS)\n*\n         TITLE 'EXTRACT UCB INFORMATION'\nAGAIN    L     R1,16                        CVT ADDRESS\n         USING CVT,R1\n* CHPID START\n         L     R5,CVTOPCTP        RMCT\n         DROP  R1\n         L     R6,280(R5)         CMCT\n         L     R7,20(R6)          CMB\n         LA    R7,32(R7)          PAST HDR\n         ST    R7,CMB\n         L     R7,12(R6)          CPMT\n         L     R2,4(R7)\n         LA    R9,LASTCHP\n         S     R2,0(R9)\n         ST    R2,BASE            SAVE THE DIFFERENCE\n*        L     R2,8(R7)\n*        ST    R2,NORM\n         LA    R5,128            128 CHPIDS\n         LA    R8,CHP00+2\n         L     R2,4(R7)\n         ST    R2,0(R9)           STORE LAST COUNT\n         LA    R9,4(R9)           POINT PAST STORED TOTAL COUNT\n         LA    R7,12(R7)          POINTS PAST HDR\n*        LA    R7,768(R7)         POINTS PAST HDR\nNEXTCHP  DS    0H\n         LA    R2,0\n         L     R3,0(R7)\n         S     R3,0(R9)\n         LTR   R3,R3\n         BZ    WASZERB\n         M     R2,=F'10000'\n         LA    R2,0\n         D     R2,BASE\nWASZERB  CVD   R3,WORK\n         MVC   CHIP(6),SPACES\n         MVC   CHIP+1(5),=X'2021204B20'\n         ED    CHIP(6),WORK+5\n         LH    R2,8(R7)\n         LTR   R2,R2\n         BM    NEG\n         B     POS\nNEG      MVC   CHIP(6),=C'  *OFF'\nPOS      DS    0H\n         MVC   0(5,R8),CHIP+1\n         L     R3,0(R7)\n         ST    R3,0(R9)\n         LA    R7,12(R7)\n         LA    R8,9(R8)\n         LA    R9,4(R9)\n         BCT   R5,NEXTCHP\n* CHPID END\n         L     R15,ISPLINK\n         CALL  (15),(VDISPLAY,VCP),VL,MF=(E,ISPARMS)\n*\n         LR    R8,R15\n         C     R8,FZEROS      COMMAND ENTERED/LINE MODIFIED??\n         BNE   SHOWDONE       NOPE\n*\n         B     SHOWAGIN       GO REPEAT THE DISPLAY\n*\n         EJECT\n*\n*    ONLY COMMAND SUPPORTED IS \"REPEAT\"\n*\nGOTCMD   DS    0H\n*OTCMD   TR    CMDDATA,CAPSONLY  UPPER-CASE ALL INPUT\n*\n*  NOTE THE TR TABLE IS SET UP TO DELETE SEMI-COLONS, IN ORDER TO\n*       PREVENT COMMAND CONCATENATION.\n*\n         CLI   CMDDATA,C' '   IF COMMAND AREA IS SPACES\n         BE    SHOWAGIN       THEN A COMMAND WAS NOT ENTERED\n*\n         B     SHOWAGIN       GO REPEAT THE SCREEN\n         TITLE 'MISCELLANEOUS CONSTANTS'\n         PRINT   GEN\n         LTORG\n*\n         DS    0F\n*\nISPLINK  DC    V(ISPLINK)\nCMDDATA  DC    CL1' '\n*\n*78      DC    F'78'\nFZEROS   DC    F'0'\nF8       DC    F'8'\nL1       DC    F'1'\nL2       DC    F'2'\nL3       DC    F'3'\nL77      DC    F'77'\nL40      DC    F'40'\nL72      DC    F'72'\n*\nSELCODE  DC    CL1' '\nSELSAVE  DC    CL1' '\n*\nH1       DC    H'1'\nH2       DC    H'2'\nH8       DC    H'8'\n*\nVDEF     DC    C'VDEFINE  '\nVDELETE  DC    C'VDELETE '\nVGET     DC    C'VGET '\nVPUT     DC    C'VPUT '\nVREPLACE DC    C'VREPLACE '\nSHARED   DC    C'SHARED '\n*\nNOWRITE  DC    C'NOWRITE '\n*\nNULLENT  DC    C'()'\n*\nDANAMLST DC    C'('             DISPLAY ACTIVE NAME LIST\nSEL      DC    C'VSLA     '     SELECTION CODE\nVTOLINE  DC    C'VTOLINE )'     JOB INFO\nVTOLINEP DC    C'(VTOLINE )'    JOB INFO\nVSLP     DC    C'(VSLA)'    SELECTION CODE\nVCMD     DC    C'(VCMD)'    SELECTION CODE\nVCHP00   DC    C'(CHP00)'\nVCHP08   DC    C'(CHP08)'\nVCHP10   DC    C'(CHP10)'\nVCHP18   DC    C'(CHP18)'\nVCHP20   DC    C'(CHP20)'\nVCHP28   DC    C'(CHP28)'\nVCHP30   DC    C'(CHP30)'\nVCHP38   DC    C'(CHP38)'\nVCHP40   DC    C'(CHP40)'\nVCHP48   DC    C'(CHP48)'\nVCHP50   DC    C'(CHP50)'\nVCHP58   DC    C'(CHP58)'\nVCHP60   DC    C'(CHP60)'\nVCHP68   DC    C'(CHP68)'\nCH       DC    C'(CH)'\nCHD      DS    CL2\n*\nSPACES   DC    80CL1' '\nCZEROS   DC    CL8'00000000'\nINFOAREA DS    CL40\nRC       DS    F\n*\nCHAR     DC    C'CHAR '\n*\nCHPDATAB DC    C'CHPDATAB'\nVDFTABLE DC    C'VDFTABLE'\n*\n*\n         TITLE 'REGISTER EQUATES'\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         TITLE 'WORKING STORAGE AREAS'\nDOUBLEWD DS    D              PACKED DECIMAL WORK AREA\nWORK     DS    D              PACKED DECIMAL WORK AREA\nBASE     DS    F\n*ORM     DS    F\nCHIP     DS    CL6\nCMB      DS    F\n*\nISPARMS  DS    10F            PARM LIST FOR ISPLINK\nCHP00    DC    C'00       '\n         DC    C'01       '\n         DC    C'02       '\n         DC    C'03       '\n         DC    C'04       '\n         DC    C'05       '\n         DC    C'06       '\n         DC    C'07       '\nCHP08    DC    C'08       '\n         DC    C'09       '\n         DC    C'0A       '\n         DC    C'0B       '\n         DC    C'0C       '\n         DC    C'0D       '\n         DC    C'0E       '\n         DC    C'0F       '\nCHP10    DC    C'10       '\n         DC    C'11       '\n         DC    C'12       '\n         DC    C'13       '\n         DC    C'14       '\n         DC    C'15       '\n         DC    C'16       '\n         DC    C'17       '\nCHP18    DC    C'18       '\n         DC    C'19       '\n         DC    C'1A       '\n         DC    C'1B       '\n         DC    C'1C       '\n         DC    C'1D       '\n         DC    C'1E       '\n         DC    C'1F       '\nCHP20    DC    C'20       '\n         DC    C'21       '\n         DC    C'22       '\n         DC    C'23       '\n         DC    C'24       '\n         DC    C'25       '\n         DC    C'26       '\n         DC    C'27       '\nCHP28    DC    C'28       '\n         DC    C'29       '\n         DC    C'2A       '\n         DC    C'2B       '\n         DC    C'2C       '\n         DC    C'2D       '\n         DC    C'2E       '\n         DC    C'2F       '\nCHP30    DC    C'30       '\n         DC    C'31       '\n         DC    C'32       '\n         DC    C'33       '\n         DC    C'34       '\n         DC    C'35       '\n         DC    C'36       '\n         DC    C'37       '\nCHP38    DC    C'38       '\n         DC    C'39       '\n         DC    C'3A       '\n         DC    C'3B       '\n         DC    C'3C       '\n         DC    C'3D       '\n         DC    C'3E       '\n         DC    C'3F       '\nCHP40    DC    C'40       '\n         DC    C'41       '\n         DC    C'42       '\n         DC    C'43       '\n         DC    C'44       '\n         DC    C'45       '\n         DC    C'46       '\n         DC    C'47       '\nCHP48    DC    C'48       '\n         DC    C'49       '\n         DC    C'4A       '\n         DC    C'4B       '\n         DC    C'4C       '\n         DC    C'4D       '\n         DC    C'4E       '\n         DC    C'4F       '\nCHP50    DC    C'50       '\n         DC    C'51       '\n         DC    C'52       '\n         DC    C'53       '\n         DC    C'54       '\n         DC    C'55       '\n         DC    C'56       '\n         DC    C'57       '\nCHP58    DC    C'58       '\n         DC    C'59       '\n         DC    C'5A       '\n         DC    C'5B       '\n         DC    C'5C       '\n         DC    C'5D       '\n         DC    C'5E       '\n         DC    C'5F       '\nCHP60    DC    C'60       '\n         DC    C'61       '\n         DC    C'62       '\n         DC    C'63       '\n         DC    C'64       '\n         DC    C'65       '\n         DC    C'66       '\n         DC    C'67       '\nCHP68    DC    C'68       '\n         DC    C'69       '\n         DC    C'6A       '\n         DC    C'6B       '\n         DC    C'6C       '\n         DC    C'6D       '\n         DC    C'6E       '\n         DC    C'6F       '\n*\n*     THE ISP TABLE FLAGS INDICATE NO ACTIVE TABLE (0), OR ONE EXISTS\n*\n         TITLE 'UDF-WORK AREAS      '\n         LTORG\n*\nPENDSNSE DC    CL10'SNSE-PNDNG'\nCVTA     DC    D'0',X'0'               PLUS A GARBAGE BYTE\nCVTB     DC    F'0'\nHEXTAB   EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\nDBLW     DS    D                           CVD WORK AREA\nTYPESIZE EQU   8                   SIZE OF A 'DX' ENTRY\nPUBLIC   DC    CL3'SCR'\nPRIVATE  DC    CL3'PRI'\nSTORAGE  DC    CL3'STG'\nPRES     DC    CL3'RSD'\nRESERVED DC    CL3'RES'\nSYSRES   DC    CL3'SYR'\n         TITLE 'UDF-LSPACE WORK AREA'\n*\nHEX      DC    C'0123456789ABCDEF'\nEXTPWORK DS    1F\nR5SAVE   DS    1F\nCCHHR    DS    XL5\nADDRUCB  DS    A\nWORKAREA DC    XL100'00'\nDEVCLASS DC    X'00'\n*IOUNIT  DC    CL7'V-I-O'\n         TITLE 'UDF-UCB  LINE FORMAT'\nTABAREA  DS   0CL79\nVOLNAME  DS   CL6                           VOLUME NAME\n         DS   C                             DIRF FLAG\nUNITADDR DS   CL3                           UNIT ADDRESS\n         DS   CL1\nASID     DS   CL4\n         DS   CL1\nUNITTYPE DS   CL10\n         DS   CL1\nUSTATUS  DS   CL3\n         DS   CL1\nOUTUSAGE DS   CL3\n         DS   CL1\nUSECNT   DS   CL3                           # OF CURRENT ALLOCATIONS\n         DS   CL1                           TOTAL FREE TRACKS\nOUTCHPID DS   CL14\n         DS   CL1\nOUTIO    DS   CL5\n         DS   CL1\nOUTCONN  DS   CL3\n         DS   CL1\nOUTDISC  DS   CL3\n         DS   CL1\nOUTPEND  DS   CL3\n         DS   CL1\nOUTCUQ   DS   CL3\n         DS   CL5\nCOUNTER  DS   F\nASTER    DC   C'*'\nLASTCHP  DC   41F'0'\nIOCOUNT  DC   445F'0'\nVCP      DC    C'CHPDATAB '\nVDISPLAY DC    C'DISPLAY  '\n         EJECT\n*\n* EQUATES....\n*\n         PRINT GEN\n         TITLE 'COMMUNICATION VECTOR TABLE'\n         CVT   DSECT=YES,PREFIX=NO\n         TITLE 'UNIT CONTROL BLOCK'\n         IEFUCBOB\n         IOSDMAP\n         END\n/*\n//L.SYSLMOD  DD   DISP=SHR,DSN=TEST.PGM.LOAD(EDCHP)\n//L.SYSLIB   DD   DISP=SHR,DSN=ISP.V3R5M0.ISPLOAD\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EDJES3": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x00O\\x00\\x99\\x00O\\x11\\x07\\x02\\x85\\x02\\x81\\x00\\x05\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-01-04T00:00:00", "modifydate": "1999-01-04T11:07:00", "lines": 645, "newlines": 641, "modlines": 5, "user": "XSDMN"}, "text": "//C4ADMDMJ JOB C4ADM000,'JES3 TSO CP',CLASS=A,MSGCLASS=X,NOTIFY=C4ADMDM\n//*\n//*   NEEDS VTAMLST UPDATE AND APPROPRIATE C4J.. NAMES IN J3 INISH\n//*\n//*         VBUILD TYPE=APPL\n//*CAAJES3  APPL  AUTH=(ACQ),EAS=25,ACBNAME=C4#1       SYSTEM ID C4#1\n//*\n//*\n//ASMHCL  PROC\n//C      EXEC  PGM=IEV90,PARM=OBJECT,REGION=5M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  SYSOUT=B,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))\n//SYSPRINT DD SYSOUT=X,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//L    EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL',REGION=2M,COND=(8,LT,C)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD DD DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(2,1,2)),DSN=&GOSET(GO)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=X,DCB=(RECFM=FB,BLKSIZE=3509)\n//  PEND\n//*\n//S1 EXEC ASMHCL,\n//   PARM.C='OBJECT,XREF(SHORT)',PARM.L='LIST,LET,XREF'\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DATA\nJES3     CSECT\n         MACRO\n         $MVHEX &OUT,&IN,&L=\n         LCLA  &LEN1,&LEN2\n         LCLC  &STRING\n&LEN2    SETA  &L*2\n         IC    R0,&OUT+&LEN2\n&LEN1    SETA  &L*2+1\n&LEN2    SETA  &L+1\n&STRING  SETC  '&OUT'.'('.'&LEN1'.'),'.'&IN'.'('.'&LEN2'.')'\n         UNPK  &STRING\n&LEN2    SETA  &L*2\n         STC   R0,&OUT+&LEN2\n&STRING  SETC  '&OUT'.'('.'&LEN2'.'),HEXTAB-240'\n         TR    &STRING\n         MEXIT\n         MEND\n*--------------------------------------------------------------------*\n*        REGISTER EQUATES\n*--------------------------------------------------------------------*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11                      MODULE BASE REGISTER\nR12      EQU   12                      GLOBAL AREA POINTER.\nR13      EQU   13                      SAVE AREA PTR\nR14      EQU   14                      RETURN ADDRESS\nR15      EQU   15                      MODULE ENTRY POINT ADDR.\n*--------------------------------------------------------------------*\n*        SAVE ENVIRONMENT AND ESTABLISH ADDRESSABILITY\n*--------------------------------------------------------------------*\n         STM   R14,R12,12(R13)\n         LR    R11,R15\n         LA    R5,4095(R11)\n         LA    R5,1(R5)\n         USING JES3,R11,R5               STANDARD LINKAGE\n         ST    R13,SAVEAREA+4\n         MVC   8(4,R13),ADDRSAVE\n         LA    R13,SAVEAREA\n         L     R1,0(R1)\n         LH    R2,0(R1)                  PARM LEN\n         SH    R2,=H'4'\n         LH    R3,2(R1)                  OFFSET TO PARMS\n         SR    R2,R3\n         LTR   R2,R2         ? GOT ANY PARMS\n         BZ    MAINC\n         MVI   PANS,C'N'\n*\nMAINC    L     R1,16\n         USING CVT,R1\n         L     R2,0(R1)             SHIFT REG ONCE AGAIN\n         L     R2,4(R2)             GET THE CURRENT TCB\n         L     R2,12(R2)            GET TCB + 12 TIOT ADDRESS\n         MVC   USERID(7),0(R2)\n*\n         L     R1,CVTSMCA               ---> SMCA\n         USING SMCABASE,R1\n         CLC   SMCASID(4),=CL4'C4#6'\n         BE    C4#6SYS\n         CLC   SMCASID(4),=CL4'C4#3'\n         BE    C4#3SYS\n         CLC   SMCASID(4),=CL4'C4#1'\n         BE    C4#1SYS\n         B     SETWORK\nC4#6SYS  MVC   JESACB(8),=CL8'CGAJES3'\n         MVC   RJPWSP(4),=CL4'C4J6'\n         B     SETWORK\nC4#1SYS  MVC   JESACB(8),=CL8'CAAJES3'\n         MVC   RJPWSP(4),=CL4'C4J1'\n         B     SETWORK\nC4#3SYS  MVC   JESACB(8),=CL8'CEAJES3'\n         MVC   RJPWSP(4),=CL4'C4J3'\n         B     SETWORK\n*---------------------------------------------------------------------\n*        OPEN WORKSTATION ACB (10 AVAILABLE - FIND ONE THAT WORKS)\n*---------------------------------------------------------------------\nSETWORK  DS    0H\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDELETE,ASTER),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,ACTLINEP,TPUTAREA,CHAR,L80),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,JESCMDP,REPDATA,CHAR,L60),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBCR,JESTABLE,NULL,DANAMLST,NOW),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBVCLEAR,JESTABLE),VL,MF=(E,ISPARMS)\n*\n         CLI   PANS,C' '\n         BNE   NOPAN1\n         L     R15,ISPLINK\n         CALL  (15),(VLIBDEF,VISP,VDATASET,VPANELS),VL,MF=(E,ISPARMS)\n*\nNOPAN1   LA    R3,9                     RETRY COUNT\nJES30006 DS    0H\n         MVC   WORKST,APPLID+1\n         ENQ   (MAJOR,USERID,S,14,SYSTEM),RET=USE\n         LTR   R15,R15\n         BNZ   JES39700\n         OPEN  (ACB)                    OPEN DEFAULT ACB NAME\n         LTR   R15,R15                  OK?\n         BZ    JES30008                 YES, BRANCH ELSE\n         DEQ   (MAJOR,USERID,14,SYSTEM)\n         LA    R2,ACB                   ADDR ACB\n         USING IFGACB,R2\n         CLI   ACBERFLG,X'58'           ACB WITH THIS NAME OPEN?\n         BE    JES30007                 YES, BRANCH ELSE\n         CLI   ACBERFLG,X'5A'           BAD ACB NAME?\n         BE    JES39030                 YES, BRANCH ELSE\n         B     JES39020                 FUNNY ERROR\nJES30007 DS    0H\n         PACK  DWORD,ACBID#             GET ACB NUMBER\n         AP    DWORD,=PL1'1'            UP ONE\n         UNPK  ACBID#,DWORD             RE-STORE\n         OI    ACBID#+L'ACBID#-1,C'0'\n         BCT   R3,JES30006              RETRY OPEN\n         B     JES39030                 ERROR IF NO ACB'S AVAILABLE\nJES30008 DS    0H\n         MVC   LOGONDTA(5),APPLID+1    MAKE APPLID THE WORK/STN NAME\nJES30009 DS    0H\n*---------------------------------------------------------------------\n*        ENABLE SESSION STARTS ON  WORKSTATION EMULATOR\n*---------------------------------------------------------------------\n         SETLOGON RPL=RPL,OPTCD=(SYN,START)        ALLOW REQSESS\n         LTR   R15,R15                  OK?\n         BNZ   JES39060                 NO, BRANCH ELSE\n         LTR   R0,R0                    SURE?\n         BNZ   JES39060                 NO, BRANCH ELSE\n         LA    R2,NIB                   ADDR NIB\n         MVC   NIBSYM-ISTDNIB(8,2),JESACB\n*---------------------------------------------------------------------\n*        LOGON TO JES AS AN SLU\n*---------------------------------------------------------------------\n         REQSESS RPL=RPL,NIB=NIB,OPTCD=(SYN,NQ),AREA=LOGONDTA,RECLEN=5\n         LTR   R15,R15                  OK?\n         BNZ   JES39070                 NO, BRANCH ELSE\n         LTR   R0,R0                    SURE?\n         BNZ   JES39070                 NO, BRANCH ELSE\n         WAIT  ECB=SCIPECB              WAIT FOR OPNSEC IN SCIP\n         OC    SCIPECB+1(3),SCIPECB+1   OK?\n         BNZ   JES3END                  NO, BRANCH ELSE\n         L     R9,LUCID                 GET CID\n*---------------------------------------------------------------------\n*        RECEIVE DATA FROM JES\n*---------------------------------------------------------------------\nJES30010 MVI   RCVAREA,C' '\n         MVC   RCVAREA+1(255),RCVAREA         BLANK OUT\n         MODCB AM=VTAM,RPL=RPL,OPTCD=(Q)      MAKE RECEIVE OPTCD Q\n         TM    FLAG,X'02'\n         BNO   JES30012\n         MODCB AM=VTAM,RPL=RPL,OPTCD=(NQ)     MAKE RECEIVE OPTCD NQ\n         NI    FLAG,X'FF'-X'02'\nJES30012 RECEIVE RPL=RPL,ARG=(R9),AREA=RCVAREA,AREALEN=256,            *\n               RTYPE=(DFSYN,NDFASY,NRESP),OPTCD=(SYN,CS,TRUNC,SPEC)\n         LTR   R15,R15                  OK?\n         BNZ   JES39050                 NO, BRANCH ELSE\n         LTR   R0,R0                    SURE?\n         BNZ   JES39050                 NO, BRANCH ELSE\n         LA    R2,RPL                   ADDR RPL\n         TM    RPLVTFL2-IFGRPL(R2),RPLEX EXCEPTION RESP ONLY?\n         BO    JES30015                 YES, BANCH ELSE\n         SEND  RPL=RPL,STYPE=RESP,OPTCD=(SYN,CS)        SEND +VE RESP\n         LTR   R15,R15                  OK?\n         BNZ   JES39040                 NO, BRANCH ELSE\n         LTR   R0,R0                    SURE?\n         BNZ   JES39040                 NO, BRANCH ELSE\nJES30015 DS    0H\n         LA    R2,RPL                   ADDR RPL\n         TM    RPLOPT12-IFGRPL(R2),RPLFMHDR FM HEADER?\n         BNO   JES30020                 NO, BRANCH ELSE\n         TM    RCVAREA+4,X'20'          END-DATA-SET?\n         BNO   JES30010                 NO, GO DO ANOTHER RECEIVE\n         TM    FLAG,X'02'               DM INSERT\n         BNO   NODATA                   DM INSERT\n*---------------------------------------------------------------------\n*        TPUT DATA TO TSO USER\n*---------------------------------------------------------------------\nJES30017 OC    TPUTAREA(80),TPUTAREA    ANYTHING LEFT TO TPUT?\n         BZ    JES30018                 NO, BRANCH ELSE\n*        TR    TPUTAREA(80),TRTAB       TRANSLATE UNPRINTABLES\n*        CLC   =C'IAT7130 ''*E ',TPUTAREA+9\n*        BE    JES30018\n*        PUT   SYSPRINT,TPUTAREA\n*        MVC   TPUTAREA(80),SPACES\n*---------------------------------------------------------------------\n*        PROCESS INPUT FROM TSO USER\n*---------------------------------------------------------------------\nJES30018 DS    0H\n*\n         MVI   TPUTAREA,C'*'\n         MVC   TPUTAREA+1(60),REPDATA\n         MVC   TPUTAREA+61(19),SPACES\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBADD,JESTABLE),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBTOP,JESTABLE),VL,MF=(E,ISPARMS)\n***********************************************************\n*                                                         *\n*        TABLE DISPLAY HERE                               *\n*                                                         *\n***********************************************************\n         L     R15,ISPLINK\n         CALL  (15),(TBDISPL,JESTABLE,JESDATAB),VL,MF=(E,ISPARMS)\n*\n         C     R15,L8         END COMMAND ENTERED??\n         BE    JES3END        ALL DONE\n*\n         NI    FLAG,X'FF'-X'08'\n         MVC   TPUTPTR(4),=A(TPUTAREA)\n         MVC   TPUTAREA(80),SPACES\n*\n         CLC   REPDATA(60),SPACES\n         BE    NODATA\nEDCONT   OC    REPDATA(60),SPACES       UPPER CASE\n         CLC   REPDATA(3),=C'END'       FINISHED?\n         BE    JES3END                  YES, BRANCH ELSE\n***********************************************************\n*        MODIFY TEXT                                      *\n***********************************************************\n         LA    R1,REPDATA+7             WHERE PARAMETERS START\n         LA    R2,73                    LENGTH LEFT\n         CLC   =C'MODIFY',REPDATA       MODIFY COMMAND ?\n         BE    MODIFY01                 YES\n         LA    R1,REPDATA+2             WHERE PARAMETERS START\n         LA    R2,78                    LENGTH LEFT\n         CLC   =C'F',REPDATA            ALTERNATE MODIFY COMMAND ID ?\n         BNE   JES30019                 NO\nMODIFY01 DS    0H\n         CLI   0(R1),C' '               LEADING BLANK ?\n         BNE   MODIFY02                 YES\n         LA    R1,1(R1)                 INC PTR\n         BCT   R2,MODIFY01              LOOP BACK\n         B     JES30019                 BR IF NOTHING LEFT\nMODIFY02 DS    0H\n         CLC   =C'J=',0(R1)             JOB NUMBER(S) SPECIFICATION ?\n         BE    MODIFY03                 YES\n         CLC   =C'J/',0(R1)             ANOTHER JOB NUMBER(S) SPEC ?\n         BE    MODIFY03                 YES\n         CLI   0(R1),C'N'               MODIFY NETWORK ?\n         BE    MODIFY03                 YES\n         B     JES30019                 NO\nMODIFY03 DS    0H\n         LA    R1,2(R1)                 POINT PAST \"J=\" OR \"N \" OR \"N,\"\n         SH    R2,=H'2'                 DEC COUNTER\n         BNP   JES30019                 BR IF NONE LEFT\n         SR    R3,R3                    LAST BLANK POINTER\nMODIFY04 DS    0H\n         CLI   0(R1),C' '               BLANK (POSSIBLE END TO CMD) ?\n         BNE   MODIFY05                 NO\n         LTR   R3,R3                    ALREADY HAVE A LAST BLANK ?\n         BNZ   MODIFY06                 YES\n         LR    R3,R1                    SAVE POSSIBLE END OF CMD PTR\n         B     MODIFY06\nMODIFY05 DS    0H\n         SR    R3,R3                    SIGNAL END OF CMD NOT FOUND YET\n         CLC   =C'T=',0(R1)             TERMINAL SPECIFICATION ?\n         BE    MODIFY07                 YES\n         CLC   =C'T/',0(R1)             TERMINAL SPECIFICATION ?\n         BE    MODIFY07                 YES\nMODIFY06 DS    0H\n         LA    R1,1(R1)                 INC PTR\n         BCT   R2,MODIFY04              LOOP BACK\n         LTR   R3,R3                    END OF CMD ENCOUNTERRED ?\n         BZ    JES30019                 NO\n         MVC   0(3,R3),=C',T='          TACK ON TERMINAL SPEC\n         LA    R1,1(R3)                 PNT TO START OF TERM SPEC\nMODIFY07 DS    0H\n         MVC   2(7,R1),USERID           PUT USERID INTO CMD\n         OI    FLAG,X'08'               SIGNAL CMD MODIFIED\n         B     JES30019                 PROCESS CMD\n*----------------------------------------------------------------\n*        SEND COMMAND TO JES\n*----------------------------------------------------------------\nJES30019 DS    0H\n         MVC   SNDAREA(80),REPDATA\n         SEND RPL=RPL,AREA=SNDAREA,RECLEN=80,                          *\n               STYPE=REQ,               SEND DATA ENTERED              *\n               CONTROL=DATA,RESPOND=(NEX,FME,NRRN),                    *\n               POST=RESP,BRACKET=(BB,EB),OPTCD=(SYN,CS,NFMHDR)\n         LTR   R15,R15                  OK?\n         BNZ   JES39040                 NO, BRANCH ELSE\n         LTR   R0,R0                    SURE?\n         BNZ   JES39040                 NO, BRANCH ELSE\n*        SOME COMMANDS DO NOT GET AN ANSWER FROM JES. IF THESE\n*        HAVE JUST BEEN SENT, WE MUST NOT DO AN IMMEDIATE RECEIVE\n*        AS THE KEYBOARD WILL STAY LOCKED.\n         CLI   SNDAREA,C'Z'             .\n         BE    JES30010                 . CHECK FOR COMMAND AND DO\n         CLC   SNDAREA(2),=C' Z'        . RCV NQ IF FOUND\n         BE    JES30010                 .\n         CLC   SNDAREA(3),=C'  Z'       . RCV NQ IF FOUND\n         BE    JES30010                 .\n         CLC   SNDAREA(2),=C'8Z'        .\n         BE    JES30010                 .\n         CLC   SNDAREA(2),=C'*Z'        .\n         BE    JES30010                 .\n         NI    FLAG,X'FF'-X'02'\n         B     JES30010                 GO DO ANOTHER RECEIVE\nJES30020 BAL   R10,TPUTRCV              GO TPUT DATA\n         B     JES30010                 GO DO ANOTHER RECEIVE\n*        END THE SESSION AND EXIT\n*----------------------------------------------------------------\nJES3END  TM    FLAG,X'01'               IN SESSION?\n         BNO   JES3ENDA                 NO, BRANCH ELSE\n         XC    SCIPECB(4),SCIPECB       CLEAR ECB\n         SEND  RPL=RPL,                                                *\n               STYPE=REQ,                                              *\n               CONTROL=RSHUTD,          SEND 'REQUEST SHUTDOWN'        *\n               RESPOND=(NEX,FME,NRRN),  (SCIP EXIT GETS UNBIND)        *\n               POST=RESP,                                              *\n               BRACKET=(BB,EB),                                        *\n               OPTCD=(SYN,CS,NFMHDR)\n         WAIT  ECB=SCIPECB              WAIT FOR UNBIND\nJES3ENDA CLOSE (ACB)                    CLOSE VTAM ACB\n         DEQ   (MAJOR,USERID,14,SYSTEM),RET=HAVE\nJES3ENDX DS    0H\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDELETE,ASTER),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBEND,JESTABLE),VL,MF=(E,ISPARMS)\n*\n         CLI   PANS,C' '\n         BNE   BYREFR\n         L     R15,ISPLINK\n         CALL  (15),(VLIBDEF,VISP,VDATASET,VPANCLR),VL,MF=(E,ISPARMS)\n*\nBYREFR   L     R13,SAVEAREA+4\n         LM    R0,R12,20(R13)\n         L     R14,12(R13)\n         BR    R14                      RETURN\n* END !\nNODATA   OI    FLAG,X'02'\n*\n         STIMER WAIT,DINTVL=INTVL\n*\n         B     JES30010\nJES39020 LA    R2,ACB                   ADDR ACB\n         USING IFGACB,R2\n         $MVHEX MSG2FLG,ACBERFLG,L=1    MOVE ACBERFLG TO ERROR MSG\n         TPUT  MSG2,L'MSG2\n         B     JES3END\nJES39030 TPUT  MSG3,L'MSG3\n         B     JES3END                  FINISH\nJES39040 LA    R2,RPL                   ADDR RPL\n         USING IFGRPL,R2\n         TPUT  MSG4,L'MSG4\n         B     JES39999                 SKIP\nJES39050 LA    R2,RPL                   ADDR RPL\n         CLC   RPLFDBK-IFGRPL(2,R2),=X'0006' NO INPUT AFTER OPTCD NQ?\n         BE    JES30018                 YES, GO RE-DO PROMPT ELSE\n         TPUT  MSG5,L'MSG5\n         B     JES39999\nJES39060 TPUT  MSG7,L'MSG7\n         B     JES39999                 SKIP\nJES39070 LA    R2,RPL                   ADDR RPL\n         USING IFGRPL,R2\n         TPUT  MSG8,L'MSG8\n         B     JES39999                 SKIP\nJES39700 TPUT  MSG19,L'MSG19\n         B     JES3ENDX\nJES39999 DS    0H\n         LA    R2,RPL                   ADDR RPL\n         USING IFGRPL,R2\n         $MVHEX MSG99FB,RPLFDBK,L=2     MOVE FDBK\n         $MVHEX MSG99FB2,RPLFDBK2,L=4   MOVE FDBK2\n         TPUT  MSG99,L'MSG99\n         STIMER WAIT,BINTVL=TWOSECS\n         B     JES3END\nTWOSECS  DC    F'200'                   TWO SECONDS\n*------------------------------------------------------------------*\n*        TPUTRCV SUBROUTINE\n*------------------------------------------------------------------*\nTPUTRCV  STM   R2,R10,SAVER             SAVE REGS\n         L     R8,TPUTPTR               GET TPUTAREA POINTER\n         OC    RPLRLEN-IFGRPL(4,R2),RPLRLEN-IFGRPL(R2) LENGTH ZERO?\n         BZR   R10                      YES, RETURN TO CALLER ELSE\n         L     R7,RPLRLEN-IFGRPL(2)     GET LENGTH RECV'D\n         LA    R4,RCVAREA               ADDRESS DATA RECV'D\nTPUT0010 CLI   0(R4),X'15'              NEW LINE?\n         BNE   TPUT0015                 NO, BRANCH ELSE\n         LA    R4,1(R4)                 NEXT IN RCVAREA\n         B     TPUT0020                 SKIP\nTPUT0015 MVC   0(1,R8),0(R4)            MOVE NEXT CHAR TO TPUTAREA\n         LA    R8,1(R8)                 NEXT IN TPUTAREA\n         LA    R4,1(R4)                 NEXT IN RCVAREA\n         C     R8,=A(TPUTAREA+79)       FILLED UP TPUTAREA?\n         BL    TPUT0030                 NO, BRANCH ELSE\nTPUT0020 TR    TPUTAREA(80),TRTAB       TRANSLATE UNPRINTABLES\n         CLC   =C'IAT7130 ''*E ',TPUTAREA+9\n         BE    TPUT0026\n*\n         L     R15,ISPLINK\n         CALL  (15),(VPUT,DANAMLST),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBADD,JESTABLE),VL,MF=(E,ISPARMS)\n*\n         MVC   TPUTAREA(80),SPACES\nTPUT0026 LA    R8,TPUTAREA              RESTORE POINTER\nTPUT0030 BCTR  R7,R0                    DECREMENT COUNT RCVAREA DONE\n         LTR   R7,R7                    FINISHED RCVAREA?\n         BNZ   TPUT0010                 NO, BRANCH ELSE\n         ST    R8,TPUTPTR\n         LM    R2,R10,SAVER             RESTORE REGS\n         BR    R10                      RETURN TO CALLER\n********************************************************************\n*        VTAM SCIP EXIT\n********************************************************************\n         DROP  R11,R5\nSCIP     DS    0H\n         USING SCIP,R15\n         L     R11,=A(JES3)              LOAD REAL MODULE ADDRESS\n         L     R5,=A(JES3+4096)         LOAD REAL MODULE ADDRESS\n         DROP  R15\n         USING JES3,R11,R5               NEW BASE\n         ST    R14,RETNADDR             SAVE RETURN ADDRESS\n         LA    R13,SCIPSAVE             ADDR EXIT SAVE AREA\n         USING IFGRPL,R2\n         LA    R4,SCIPNIB               ADDR NIB\n         USING ISTDNIB,R4\n         LR    R3,R1                    GET R1\n         L     R2,16(R3)                R2-->READ-ONLY RPL\n         TM    RPLCNTDC-IFGRPL(2),RPLTBIND BIND?\n         BNO   SCIP0010                 NO, BRANCH ELSE\n         MVC   NIBSYM(8),JESACB         NAME TO OPNSEC\n         OPNSEC RPL=SCIPRPL,                                           *\n               NIB=SCIPNIB,             OPEN JES3                      *\n               OPTCD=(SYN,CS)\n         LTR   R15,R15                  OK?\n         BNZ   SCIP9010                 NO, BRANCH ELSE\n         LTR   R0,R0                    SURE?\n         BNZ   SCIP9010                 NO, BRANCH ELSE\n         OI    FLAG,X'01'               SHOW IN SESSION\n         MVC   LUCID(4),NIBCID          REMEMBER CID\n         B     SCIPEND                  FINISH EXIT\nSCIP0010 DS    0H\n         TM    RPLCNTSC-IFGRPL(2),RPLSDT START DATA TRAFFIC?\n         BNO   SCIP0020                 NO, BRANCH ELSE\n         LA    R6,SCIPECB               ADDR ECB\n         POST  (R6)                     WAKE UP MAINLINE\n         B     SCIPEND                  AND FINISH EXIT\nSCIP0020 DS    0H\n         TM    RPLCNTDC-IFGRPL(R2),RPLTUNBD UNBIND?\n         BNO   SCIPEND                  NO, BRANCH ELSE\n         LA    R6,SCIPECB               ADDR ECB\n         POST  (R6)                     WAKE UP MAINLINE\n         B     SCIPEND                  AND FINISH\nSCIP9010 DS    0H                       OPNSEC FAILURE\n         TPUT  MSG9,L'MSG9\n         B     SCIP9999                 SKIP\nSCIP9999 DS    0H\n         $MVHEX MSG99FB,RPLFDBK,L=2     MOVE FEEDBACK\n         $MVHEX MSG99FB2,RPLFDBK2,L=4   MOVE SENSE\n         TPUT  MSG99,L'MSG99\n         LA    R6,SCIPECB               ADDR ECB\n         LA    R7,4                     RETURN CODE 4\n         POST  (R6),(R7)                POST ECB BADLY\nSCIPEND  DS    0H\n         L     R14,RETNADDR             RESTORE RETURN ADDRESS\n         BR    R14                      RETURN TO VTAM\n********************************************************************\n*        VTAM NSEXIT EXIT\n********************************************************************\n         DROP  R11,R5\nNSEXIT   DS    0H\n         USING NSEXIT,R15\n         L     R11,=A(JES3)             LOAD REAL MODULE ADDRESS\n         L     R5,=A(JES3+4096)        LOAD REAL MODULE ADDRESS\n         DROP  R15\n         USING JES3,R11,R5               NEW BASE\n         ST    R14,RETNADDR             SAVE RETURN ADDRESS\n         LA    R13,SCIPSAVE             ADDR EXIT SAVE AREA\n         TPUT  MSG16,L'MSG16\n         LA    R6,SCIPECB               ADDR ECB\n         LA    R7,8\n         POST  (R6),(R7)                POST ECB BADLY\n         L     R14,RETNADDR\n         BR    R14                      RETURN TO VTAM\n*-------------------------------------------------------------------\n*        C O N S T A N T S\n*-------------------------------------------------------------------\nMSG2     DC    C'OPEN VTAM ACB FAILED - ACBERFLG = X''NN'' '\nMSG2FLG  EQU   MSG2+36\nMSG3     DC    C'NO VTAM ACB''S AVAILABLE'\nMSG4     DC    C'SEND TO LU FAILED'\nMSG5     DC    C'RECEIVE FROM LU FAILED'\nMSG7     DC    C'SETLOGON FAILED'\nMSG8     DC    C'REQSESS FAILED'\nMSG9     DC    C'OPNSEC FAILED'\nMSG16    DC    C'NSEXIT DRIVEN - POSSIBLE REQSESS FAILURE'\nMSG19    DC    C'ENQ FAILURE'\nMSG99    DC    C'FDBK/SENSE = X''NNNNNNNNNNNN'' '\nMSG99FB  EQU   MSG99+15\nMSG99FB2 EQU   MSG99+19\nHEXTAB   DC    C'0123456789ABCDEF'\nMAJOR    DC    CL8'JES3'\nUSERID   DC    CL8' '\n         DC    C' '\nWORKST   DS    CL5' '\nFLAG     DC    X'00'\nLOGONDTA DC    CL5' '\n*\nISPARMS  DS    10F\nVPANELS  DC    C'(''C4ADMDM.ZDF'')   '\nVPANCLR  DC    C'() '\nVLIBDEF  DC    C'LIBDEF '\nVISP     DC    C'ISPPLIB '\nVDISPLAY DC    C'DISPLAY  '\nVDATASET DC    C'DATASET '\nISPLINK  DC    V(ISPLINK)\nJESTABLE DC    C'JESTABLE'\nTBEND    DC    C'TBEND '\nASTER    DC    CL1'*'\nPANS     DC    C' '\nVDELETE  DC    C'VDELETE '\nSHARED   DC    C'SHARED '\nCHAR     DC    C'CHAR '\nJESDATAB DC    C'JESDATAB'\nVSELECT  DC    C'SELECT '\nINTVL    DC    CL8'00000006'         WAIT 6/100 SEC\nTBADD    DC    C'TBADD '\nTBCR     DC    C'TBCREATE '\nTBDISPL  DC    C'TBDISPL '\nTBGET    DC    C'TBGET '\nTBTOP    DC    C'TBTOP '\nTBVCLEAR DC    C'TBVCLEAR '\nVDEF     DC    C'VDEFINE '\nVGET     DC    C'VGET '\nVPUT     DC    C'VPUT '\nZUSER    DC    C'ZUSER '\nNOW      DC    C'NOWRITE '\nNULL     DC    C'()'\nDANAMLST DC    C'('             DISPLAY ACTIVE NAME LIST\nACTLINE  DC    C'ACTLINE )'     JOB INFO\nACTLINEP DC    C'(ACTLINE)'     JOB INFO\nJESCMDP  DC    C'(JCMD)'\nREPDATA  DC    CL60' '\n         DC    CL20' '\nSNDAREA  DS    CL256\nRCVAREA  DC    CL256' '\nTPUTAREA DC    CL80' '\nTPUTPTR  DC    A(TPUTAREA)\nL7       DC    F'7'\nL60      DC    F'60'\nL80      DC    F'80'\nL1       DC    F'1'\nL8       DC    F'8'\nL13      DC    F'13'\nRETNADDR DC    F'0'\nSCIPECB  DC    F'0'\nSPACES   DC    CL80' '\nSCIPSAVE DC    18F'0'\nSAVEAREA DC    18F'0'\nSAVER    DC    9F'0'\nADDRSAVE DC    A(SAVEAREA)\nLUCID    DC    F'0'\nDWORD    DC    D'0'\nNIB      NIB   MODE=RECORD\nSCIPNIB  NIB   MODE=RECORD\nRPL      RPL   AM=VTAM,ACB=ACB\nSCIPRPL  RPL   AM=VTAM,ACB=ACB\nACB      ACB   AM=VTAM,MACRF=LOGON,APPLID=APPLID,EXLST=EXLST\nAPPLID   DC    X'05'\nRJPWSP   DC    CL4'C4J3'\nACBID#   DC    CL1'1'\nJESACB   DC    CL8' '\nSELCODE  DS    CL1\nEXLST    EXLST AM=VTAM,SCIP=SCIP,NSEXIT=NSEXIT\n         LTORG\nTRTAB    DC    X'404B4B4B4B4B4B4B4B4B4B4B4B4B4B4B' 00-0F\n         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B' 10-1F\n         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B' 20-2F\n         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B' 30-3F\n         DC    X'404B4B4B4B4B4B4B4B4B4A4B4C4D4E4F' 40-4F\n         DC    X'504B4B4B4B4B4B4B4B4B5A5B5C5D5E5F' 50-5F\n         DC    X'60614B4B4B4B4B4B4B4B4B6B6C6D6E6F' 60-6F\n         DC    X'4B4B4B4B4B4B4B4B4B4B7A7B7C7D7E7F' 70-7F\n         DC    X'4B8182838485868788894B4B4B4B4B4B' 80-8F\n         DC    X'4B9192939495969798994B4B4B4B4B4B' 90-9F\n         DC    X'4B4BA2A3A4A5A6A7A8A94B4B4B4B4B4B' A0-AF\n         DC    X'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B' B0-BF\n         DC    X'4BC1C2C3C4C5C6C7C8C94B4B4B4B4B4B' C0-CF\n         DC    X'4BD1D2D3D4D5D6D7D8D94B4B4B4B4B4B' D0-DF\n         DC    X'4B4BE2E3E4E5E6E7E8E94B4B4B4B4B4B' E0-EF\n         DC    X'F0F1F2F3F4F5F6F7F8F9FA4B4B4B4B4B' F0-FF\n         PRINT NOGEN\n         ISTDNIB\n         IFGACB AM=VTAM\n         IFGRPL AM=VTAM\n         CVT    DSECT=YES\n         IEESMCA\n         END\n/*\n//L.SYSLMOD  DD DSN=C4ADMDM.PROD.LKED,DISP=SHR\n//L.SYSLIB   DD   DISP=SHR,DSN=SYS1.ISPLOAD\n//SYSIN DD *\n NAME EDJES3(R)\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EDTAPASM": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x12?\\x00\\x99\\x12?\\x14(\\x03\\x8c\\x03\\x8c\\x00\\x00\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-05-03T00:00:00", "modifydate": "1999-05-03T14:28:00", "lines": 908, "newlines": 908, "modlines": 0, "user": "XSDMN"}, "text": "//C4ADMDMQ JOB MSGCLASS=X,CLASS=B,REGION=4M,NOTIFY=XODMN\n//*\n//*\n//ASMHCL  PROC\n//C      EXEC  PGM=IEV90,PARM=OBJECT,REGION=5M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  SYSOUT=B,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))\n//SYSPRINT DD SYSOUT=X,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//L    EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL',REGION=2M,COND=(8,LT,C)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD DD DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(2,1,2)),DSN=&GOSET(GO)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=X,DCB=(RECFM=FB,BLKSIZE=3509)\n//  PEND\n//*\n//ASM1    EXEC ASMHCL,PARM.L='XREF,LET,LIST,AMODE=31,RMODE=24'\n//C.SYSLIB DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD  *\n***********************************************************************\n*                                                                     *\n*                    UNIT DISPLAY FACILITY (UDF)                      *\n*                                                                     *\n* ABSTRACT: DISPLAY ONLINE DISK VTOC'S AND DATASETS.                  *\n*                                                                     *\n* EXTERNAL REFERENCE: ISPLINK                                         *\n*                                                                     *\n***********************************************************************\n*\n* NOTE THE FOLLOWING ENTRY POINT LOGIC IS NON-STANDARD. IN PARTICULAR,\n*      IT WILL NOT WORK WITH CALLED PL/I PROGRAMS.\n*\n***********************************************************************\n         MACRO\n         DX    &HEXTYP,&CHAR\n         DC    X'&HEXTYP'\n         DC    CL7&CHAR\n         MEND\n         EJECT\nEDTAPE   CSECT\nCVTPTX   EQU   X'010'\nCVTUCBSX EQU   X'434'\n         USING *,13,12,11\n         B     72(,15)\n         DC    17F'0'\n         STM   14,12,12(13)   SAVE CALLING PGM'S REGISTERS\n         LA    R2,0(,R15)     LOAD EPA IN R2 FOR WORK REGISTER\n         ST    R2,8(R13)      LINK SAVE AREAS\n         ST    R13,4(R2)      SAVE THE CALLER'S R13\n*\nSETBASES DS    0H\n         LR    R13,R2         SET SAVE AREA AND BASE 1\n         LR    R12,R2         SET\n         A     R12,L4096          BASE 2\n         LR    R11,R12        SET\n         A     R11,L4096          BASE 3\n*\nINITFLDS DS    0H\n         L     R1,0(R1)\n         LH    R2,0(R1)                  PARM LEN\n         SH    R2,=H'4'\n         LH    R3,2(R1)                  OFFSET TO PARMS\n         SR    R2,R3\n         LTR   R2,R2         ? GOT ANY PARMS\n         BZ    MAINC\n         MVI   PANS,C'N'\nMAINC    MVC   TABAREA(80),SPACES\n         XC    ISPARMS(40),ISPARMS\n*\n         L     R15,ISPLINK\n         CALL  (15),(VCONTROL,VNONDISP,VENTER),VL,MF=(E,ISPARMS)\n*\n         CLI   PANS,C' '\n         BNE   SHOWDASD\n*\n         L     R15,ISPLINK\n         CALL  (15),(VLIBDEF,VISP,VDATASET,VPANELS),VL,MF=(E,ISPARMS)\n*\n         B     SHOWDASD\n*\nSHOWAGIN DS    0H\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDELETE,ASTER),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBEND,VDFTABLE),VL,MF=(E,ISPARMS)\n*\n         B     SHOWDASD    DISPLAY THE UNIT'S\n*\nSHOWDONE DS    0H\n*                                  DELETE THE TABLE VARIABLES\n         L     R15,ISPLINK\n         CALL  (15),(VDELETE,ASTER),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBEND,VDFTABLE),VL,MF=(E,ISPARMS)\n*\n         CLI   PANS,C' '\n         BNE   BYE\n         L     R15,ISPLINK\n         CALL  (15),(VLIBDEF,VISP,VDATASET,VPANCLR),VL,MF=(E,ISPARMS)\n*\n*\nBYE      L     R13,4(R13)     RESTORE THE CALLER'S R13\n         LM    14,12,12(13)   RETURN TO OUR CALLER\n         SR    15,15          SET RC=0\n         BR    14             AND RETURN\n         EJECT\n**************************** END ***************************\nCVTPRT   EQU   *\n         UNPK  CVTA(9),ADDRUCB(5)\n         TR    CVTA(8),HEXTAB\n         LM    R14,R15,CVTA\n         BR    R7\n*\nL4096    DC    F'4096'\n*\n************************************************************\n*\nSHOWDASD DS    0H\n*\n         MVC   SELCODE(1),SPACES  SET SELECTION CODE TO SPACES\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VTOLINEP,TABAREA,CHAR,L80),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VSLP,SELCODE,CHAR,L1),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCHP00,CHP00,CHAR,L72),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCHP08,CHP08,CHAR,L72),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCHP10,CHP10,CHAR,L72),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCHP18,CHP18,CHAR,L72),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCHP20,CHP20,CHAR,L72),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCMD,CMDDATA,CHAR,L1),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,CH,CHD,CHAR,L2),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBCREATE,VDFTABLE,NULLENT,DANAMLST,NOWRITE),      X\n               VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBVCLEAR,VDFTABLE),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VGET,CH,SHARED),VL,MF=(E,ISPARMS)\n*\n         TITLE 'EXTRACT UCB INFORMATION'\nAGAIN    L     R1,16                        CVT ADDRESS\n         USING CVT,R1\n         L     R5,CVTOPCTP        RMCT\n         L     R6,280(R5)         CMCT\n         L     R7,CVTASVT\n         DROP  R1\n         ST    R7,ASVTPTR\n         L     R7,20(R6)          CMB\n         LA    R7,32(R7)          PAST HDR\n         ST    R7,CMB\n         L     R7,12(R6)          CPMT\n         L     R2,4(R7)\n         LA    R9,LASTCHP\n         S     R2,0(R9)\n         ST    R2,BASE            SAVE THE DIFFERENCE\n*        L     R2,8(R7)\n*        ST    R2,NORM\n         B     NXTUCB\n* CHPID START\n         LA    R5,40              NO OF CHPIDS\n         LA    R8,CHP00+2\n         L     R2,4(R7)\n         ST    R2,0(R9)           STORE LAST COUNT\n         LA    R9,4(R9)           POINT PAST STORED TOTAL COUNT\n         LA    R7,12(R7)          POINTS PAST HDR\n         LA    R7,768(R7)          POINTS TO 40\nNEXTCHP  DS    0H\n         LA    R2,0\n         L     R3,0(R7)\n         S     R3,0(R9)\n         LTR   R3,R3\n         BZ    WASZERB\n         M     R2,=F'10000'\n         LA    R2,0\n         D     R2,BASE\nWASZERB  CVD   R3,WORK\n         MVC   CHIP(6),SPACES\n         MVC   CHIP+1(5),=X'2021204B20'\n         ED    CHIP(6),WORK+5\n         LH    R2,8(R7)\n         LTR   R2,R2\n         BM    NEG\n         B     POS\nNEG      MVC   CHIP(6),=C'  *OFF'\nPOS      DS    0H\n         MVC   0(5,R8),CHIP+1\n         L     R3,0(R7)\n         ST    R3,0(R9)\n         LA    R7,12(R7)\n         LA    R8,9(R8)\n         LA    R9,4(R9)\n         BCT   R5,NEXTCHP\n* CHPID END\nNXTUCB   DS    0H\nU        UCBSCAN COPY,WORKAREA=WORKAREA,UCBAREA=UCBAREA,RANGE=ALL,     1\n               DYNAMIC=YES,DEVCLASS=TAPE,RETCODE=RET,RSNCODE=RSN\n*        SR    R6,R6\n         L     R6,RET\n         LTR   R6,R6\n         BNZ   SHOWVTAB\n*        MVC   0(48,R5),UCBAREA\n         LA    R5,UCBAREA\n         LR    R6,R5\n         B     CONT\n*XTUCB   L     R15,CVTPTX\n*        L     R15,CVTUCBSX(,R15)\n*        CALL  (15),(WORKAREA,DEVCLASS,ADDRUCB),VL\n*        LTR   R15,R15\n*        BNZ   SHOWVTAB\n*\n*        L     R8,ADDRUCB\nCONT     LR    R8,R6\n         LTR   R6,R6\n         BNP   NXTUCB\n*\n         USING UCBCMSEG,R8\n         CLC   UCBTBYT3(2),=X'2005'         DATA CELL?\n         BE    NXTUCB                       IF SO SKIP IT\n*\nUSEUCB   DS    0H                           GOT HERE THEN DO\n         MVC   UNITADDR,UCBNAME\n*        SR    R3,R3                        CLEAR A REG\n*        LH    R3,UCBCHAN\n*        CVD   R3,DBLW                      CONVERT TO PRINT\n*        MVC   UCH(3),=X'212121'\n*        ED    UCH-1(4),DBLW+6\n*\n         LA    R10,0\n         ST    R10,EXTPWORK\n         OC    EXTPWORK+1(3),UCBEXTP\n         USING UCBCMEXT,R10\n         L     R10,EXTPWORK\n         LA    R7,0\n         LH    R7,UCBASID\n         LTR   R7,R7\n         BZ    NOTASID\n*\n         B     FNDJOB\nASIDX    LA    R7,0\n         IC    R7,UCBASID\n         SRL   R7,4\n         LTR   R7,R7\n         BZ    DO2\n         IC    R5,HEX(R7)\n         STC   R5,ASID\nDO2      IC    R7,UCBASID\n         N     R7,=F'15'\n         IC    R5,HEX(R7)\n         STC   R5,ASID+1\n         IC    R7,UCBASID+1\n         SRL   R7,4\n         IC    R5,HEX(R7)\n         STC   R5,ASID+2\n         IC    R7,UCBASID+1\n         N     R7,=F'15'\n         IC    R5,HEX(R7)\n         STC   R5,ASID+3\n         B     NOTASID\n*\nFNDJOB   DS    0H\n         L     R7,ASVTPTR\n         USING ASVT,R7\n         LA    R5,ASVTFRST\n         L     R7,ASVTMAXU\n         DROP  R7\nASCBLOOP ST    R7,ASVTMAX\n         LA    R5,4(R5)\n         ICM   R7,B'1111',0(R5)         LOAD ASCB PTR\n         BM    NEXTAS\n         USING ASCB,R7\n         CLC   ASCBASID(2),UCBASID\n         BNE   NEXTAS\n         ICM   R4,B'1111',ASCBJBNI\n         CLC   ASCBJBNI,FZEROS\n         BNE   JOBNAM\n         ICM   R4,B'1111',ASCBJBNS\n         CLC   ASCBJBNS,FZEROS\n         BNE   JOBNAM\n         B     NEXTAS\nJOBNAM   MVC   ASID(8),0(R4)\n         B     NOTASID\nNEXTAS   L     R7,ASVTMAX\n         BCT   R7,ASCBLOOP\n         B     ASIDX\n*\nNOTASID  CLI   UCBTBYT3,UCB3DACC            DIRECT ACCESS?\n         BNE   NOTDASD\n         B     NXTUCB\n*\nNOTDASD  CLI   UCBTBYT3,UCB3TAPE            TAPE         ?\n         BNE   NXTUCB\n*\n         TM    UCBSTAT,UCBONLI              ONLINE?\n         BNO   TDIS\n*\n         MVC   VOLNAME,UCBVOLI\n         TM    UCBWGT,UCBREW       IS IT REWIND ?\n         BZ    TAD1                NO.. MOVE ON\n         MVC   OUTUSAGE(3),=C'REW'\n         DROP  R10\nTAD1     LA    R10,0\n         ST    R10,EXTPWORK\n         OC    EXTPWORK+1(3),UCBXTNB\n         USING UCBMT,R10\n         L     R10,EXTPWORK\n         TM    UCBSTAT,UCBALOC\n         BNO   TDIS\n         LA    R5,0\n         LH    R5,UCBSIO\n         CVD   R5,WORK\n         OI    WORK+7,X'0F'\n         UNPK  OUTSIO(5),WORK+5(3)\n*\nTDIS     LA    R3,TAPETYPS         GET DEVICE TYPES ADDRESSES\nTA0      CLC   UCBUNTYP,0(R3)      IS IT THIS ?\n         BE    TA1                 SHORE IS\n         LA    R3,TYPESIZE(R3)     GET NEXT IF NOT\n         CLI   0(R3),255           STOPPER ?\n         BNE   TA0\nTA1      MVC   UNITTYPE(4),1(R3)       MOVE THE DESCRIPTOR\n*\n* CHECK  OUT THE DENSITYS AVAILABLE\n*\nTA10     TM    UCBTBYT2,UCBDUDN1+UCB2OPT1 DUAL  800/1600 ?\n         BZ    TA2                 NO..\n         MVC   UNITTYPE(9),DD1600\n         TM    UCBTBYT2,UCB2OPT1   SUPPORT ASCII ?\n         BZ    TA7                 NO..\n         MVC   OUTUSAGE(2),ASCII\n         B     TA7\nTA2      TM    UCBTBYT2,UCBDUDN2   1600/6250 ?\n         BZ    TA3                 NO..\n         MVC   UNITTYPE(9),DD6250\n         B     TA7\nTA3      TM    UCBTBYT2,UCB2OPT0   7-TRACK ?\n         BZ    TA4                 NO..\n         MVC   UNITTYPE(9),DD1600\n         MVC   OUTUSAGE(2),TRACK7\n         B     TA7\nTA4      TM    UCBTBYT1,UCBD1600   1600 BPI ?\n         BZ    TA5\n         MVC   UNITTYPE(9),D1600\n         B     TA7\nTA5      TM    UCBTBYT1,UCBD6250   6250 BPI ?\n         BZ    TA7                 NO..\n         MVC   UNITTYPE(9),D6250\nTA7      B     TSTCMB\n*\nTSTCMB   DS    0H                                USE UCBCHAN ADD CMB\n         LH    R3,UCBCHAN\n*        AR    R4,R3\n*        TM    UCBJBNR-32,X'0010'\n*        BZ    TSTACT\n*        B     CMBPROC\n*7A0     CLC   UCBNAME(3),=C'7A0'\n*        BNE   X7A1\n*        LA    R4,177\n*        B     CMBPROC\n*7A1     CLC   UCBNAME(3),=C'7A1'\n*        BNE   X7A8\n*        LA    R4,178\n*        B     CMBPROC\nX7A8     CLC   UCBNAME(3),=C'7A8'\n*        BNE   X7A9\n*        LA    R4,179\n*        B     CMBPROC\n*7A9     CLC   UCBNAME(3),=C'7A9'\n*        BNE   X7C0\n*        LA    R4,180\n*        B     CMBPROC\n*7C0     CLC   UCBNAME(3),=C'7C0'\n*        BNE   X7C1\n*        LA    R4,181\n*        B     CMBPROC\n*7C1     CLC   UCBNAME(3),=C'7C1'\n*        BNE   X7C2\n*        LA    R4,182\n*        B     CMBPROC\n*7C2     CLC   UCBNAME(3),=C'7C2'\n*        BNE   X7C8\n*        LA    R4,183\n*        B     CMBPROC\n*7C8     CLC   UCBNAME(3),=C'7C8'\n*        BNE   X7C9\n*        LA    R4,184\n*        B     CMBPROC\n*7C9     CLC   UCBNAME(3),=C'7C9'\n*        BNE   X7CF\n*        LA    R4,185\n*        B     CMBPROC\n*7CF     CLC   UCBNAME(3),=C'7CF'\n*        BNE   XXX\n*        LA    R4,186\n*        B     CMBPROC\n*XX      DS    0H\n*        MVC   OUTIO(5),=C'NOUNT'\n*        B     TSTACT\nCMBPROC  DS    0H        ** ALL TIMES IN 128 MICROS, DIV BY 8 TO MS **\n         B     TSTACT    ** CANNOT DO THE IO **\n         L     R4,ADDRUCB\n         S     R4,=F'30'\n         LH    R4,0(R4)\n         S     R4,=F'1'\n         LR    R1,R4                R1 IS INDEX TO IOCOUNTER\n         SLL   R1,2                 * 4\n         SLL   R4,5                 * 32\n         L     R7,CMB\n         LH    R6,2(R4,R7)          SSCH COUNT SAMPLES\n         LR    R5,R6                     COUNT\n         C     R6,IOCOUNT(R1)            COUNT DIFFERENCE\n         BNM   SUBIO\n         A     R6,=F'65536'\nSUBIO    S     R6,IOCOUNT(R1)            COUNT DIFFERENCE\n         CVD   R6,WORK\n         SLL   R6,3                      * 8 SO TIMES IN MS\n         ST    R6,COUNTER\n*        LTR   R6,R6\n*        BZ    COUNT0\n         OI    WORK+7,X'0F'\n         UNPK  OUTIO(5),WORK+5(3)\n         ST    R5,IOCOUNT(R1)             SAVE COUNT\n*\n         L     R6,4(R4,R7)               CONN  SAMPLES\n         LR    R5,R6                     CONN\n         S     R6,IOCONN(R1)             CONN  DIFFERENCE\n         LA    R2,0\n         LR    R3,R6\n         LTR   R3,R3\n         BZ    NODIV\n         D     R2,COUNTER\nNODIV    CVD   R3,WORK\n         OI    WORK+7,X'0F'\n         UNPK  OUTCONN(3),WORK+6(2)\n         ST    R5,IOCONN(R1)             SAVE CONN\n*\n         L     R6,12(R4,R7)              DISC  SAMPLES\n         LR    R5,R6                     DISC\n         S     R6,IODISC(R1)             DISC  DIFFERENCE\n         LA    R2,0\n         LR    R3,R6\n         LTR   R3,R3\n         BZ    NODIV3\n         D     R2,COUNTER\nNODIV3   CVD   R3,WORK\n         OI    WORK+7,X'0F'\n         UNPK  OUTDISC(3),WORK+6(2)\n         ST    R5,IODISC(R1)             SAVE PEND\n*\n         L     R6,8(R4,R7)               PEND  SAMPLES\n         LR    R5,R6                     PEND\n         S     R6,IOPEND(R1)             PEND  DIFFERENCE\n         LA    R2,0\n         LR    R3,R6\n         LTR   R3,R3\n         BZ    NODIV2\n         D     R2,COUNTER\nNODIV2   CVD   R3,WORK\n         OI    WORK+7,X'0F'\n         UNPK  OUTPEND(3),WORK+6(2)\n         ST    R5,IOPEND(R1)             SAVE PEND\n         B     TSTACT\nCOUNT0   DS    0H\n         MVC   OUTIO(7),=C'COUNT=0'\n         B     TSTACT\n*\nTSTACT   MVC   USTATUS(3),=C'ACT'\n         TM    UCBSTAT,UCBALOC\n         BO    TSTTYPE\n         MVC   USTATUS(3),=C'RES'\n         TM    UCBSTAT,UCBRESV\n         BO    TSTTYPE\n         MVC   USTATUS(3),=C'OFP'\n         TM    UCBSTAT,UCBUNLD\n         BO    TSTTYPE\n         MVC   USTATUS(3),=C'ONL'\n         TM    UCBSTAT,UCBONLI\n         BO    TSTTYPE\n         MVC   USTATUS(3),=C'OFF'\n*\nTSTTYPE  CLC   OUTUSAGE(3),SPACES\n         BNE   TST4\n         MVC   OUTUSAGE(3),=C'NRY'\n         TM    UCBFLA,UCBNRY\n         BO    TST4\n         MVC   OUTUSAGE(3),=C'DEF'\n         TM    UCBFLA,UCBDEFER\n         BO    TST4\n         MVC   OUTUSAGE(3),=C'   '\n*\nTST4     DS    0H\n         CLC   USTATUS(7),=C'ACT NRY'\n         BNE   NOMOUNT\n         MVC   USTATUS(7),=C'MOUNT/P'\nNOMOUNT  TM    UCBFLA,UCBNRY\n         BZ    CPA\n         B     FSTTYPE\n*\nCPA      DS    0H\n*\nFSTTYPE  DS    0H\n         BAL   R7,CVTPRT           CONVERT IT\n*        STCM  R14,B'0011',OUTADDR MOVE THE FIRST PART OF THE ADDRESS\n*        STCM  R15,B'1111',OUTADDR+2 AND THE REST ALSO\n*\n         UCBINFO PATHMAP,MAPAREA=INFOAREA,DEVN=UCBCHAN,RETCODE=RC\n         L     R15,RC\n         LTR   R15,R15\n         BNZ   BADRC\n         LA    R7,INFOAREA\n         LA    R7,8(R7)\n         LH    R6,0(R7)\n         SRL   R6,8\n         CVD   R6,WORK\n         OI    WORK+7,X'0F'\n         UNPK  OUTCHPID(2),WORK+6(2)\n         LA    R7,5(R7)\n         LA    R4,OUTCHPID\n         LA    R4,1(R4)\nNXTCHP   LA    R7,3(R7)\n         LA    R4,3(R4)\n         LH    R5,0(R7)\n         SRL   R5,8\n         ST    R5,R5SAVE\n*\n         SRL   R5,4\n         IC    R5,HEX(R5)\n         STC   R5,0(R4)\n         L     R5,R5SAVE\n         N     R5,=F'15'\n         IC    R5,HEX(R5)\n         STC   R5,1(R4)\n*        CVD   R5,WORK\n*        OI    WORK+7,X'0F'\n*        UNPK  0(2,R4),WORK+6(2)\n         BCT   R6,NXTCHP\n*        MVC   OUTCHPID(12),=CL12'OK  RC      '\n         B     GOON\nBADRC    DS    0H\n         MVC   OUTCHPID(12),=CL12'BAD RC      '\n*\nGOON     DS    0H\n*\nGOONX    DS    0H\n         TM    UCBJBNR,UCBJES3\n         BZ    JDONE\n         MVI   USTATUS-2,C'*'\nJDONE    DS    0H\n         L     R15,ISPLINK\n         CALL  (15),(VPUT,DANAMLST),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBADD,VDFTABLE),VL,MF=(E,ISPARMS)\n*\n         MVC   TABAREA(80),SPACES\n*\n         B     NXTUCB                       NOW GO ON\n*\n***********************************************************************\n*\n*   NOW SHOW THE ISPPLIB FORMAT AND THE TABLE ON THE SCREEN\n*\n***********************************************************************\n*\nSHOWVTAB DS    0H\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBTOP,VDFTABLE),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBDISPL,VDFTABLE,UDFDATAB),VL,MF=(E,ISPARMS)\n         LR    R8,R15\n*\n         L     R15,ISPLINK\n         CALL  (15),(VPUT,CH,SHARED),VL,MF=(E,ISPARMS)\n*\n***********************************************************************\n*   DETERMINE WHETHER ANYTHING WAS ENTERED ON THE SCREEN\n***********************************************************************\n*\n         C     R8,FZEROS      COMMAND ENTERED/LINE MODIFIED??\n         BNE   SHOWDONE       NOPE\n*\nGOTSTUFF DS    0H\n         MVC   SELSAVE(1),SELCODE    SAVE SEL CODE\n         OC    SELSAVE(1),SPACES   UPPER-CASE IT\n         MVC   SELCODE(1),SPACES  SET SELECTION CODE TO SPACES\n*\n         CLI   CMDDATA,C' '   IF NOT SPACES\n         BNE   GOTCMD         THEN A COMMAND WAS ENTERED\n*\n* IF THE CRP IS NOT ZERO, THEN A LINE SELECTION CODE MUST HAVE BEEN\n* ENTERED. I HAVE THE CURRENT LINE, SO EDIT THE SELECTION CODE.\n*\n         CLI   SELSAVE,C'S'   IS IT A \"SHOW VTOC\" REQUEST\n         BE    SHOWVTOC       GO DO IT\n*\n* ADD TESTS FOR OTHER LINE SELECTION CODES HERE\n*\n         B     SHOWAGIN       GO REPEAT THE DISPLAY\n*\nSHOWVTOC DS    0H\n*\n         B     SHOWAGIN       GO REPEAT THE DISPLAY\n*\n         EJECT\n*\n*    ONLY COMMAND SUPPORTED IS \"REPEAT\"\n*\nGOTCMD   DS    0H\n*OTCMD   TR    CMDDATA,CAPSONLY  UPPER-CASE ALL INPUT\n*\n*  NOTE THE TR TABLE IS SET UP TO DELETE SEMI-COLONS, IN ORDER TO\n*       PREVENT COMMAND CONCATENATION.\n*\n         CLI   CMDDATA,C' '   IF COMMAND AREA IS SPACES\n         BE    SHOWAGIN       THEN A COMMAND WAS NOT ENTERED\n*\n         B     SHOWAGIN       GO REPEAT THE SCREEN\n         TITLE 'MISCELLANEOUS CONSTANTS'\n         PRINT   GEN\n         LTORG\n*\n         DS    0F\n*DIT4    DC    X'40202120'\n*DIT6    DC    X'402020202121'\n*DIT8    DC    X'4020202020202120'\n*\nISPLINK  DC    V(ISPLINK)\nCMDDATA  DC    CL1' '\n*\n*78      DC    F'78'\nFZEROS   DC    F'0'\nF8       DC    F'8'\nL1       DC    F'1'\nL2       DC    F'2'\nL3       DC    F'3'\nL77      DC    F'77'\nL40      DC    F'40'\nL72      DC    F'72'\nL80      DC    F'80'\n*\nSELCODE  DC    CL1' '\nSELSAVE  DC    CL1' '\n*\nH1       DC    H'1'\nH2       DC    H'2'\nH8       DC    H'8'\n*\nTBADD    DC    C'TBADD '\nTBCREATE DC    C'TBCREATE '\nTBDISPL  DC    C'TBDISPL '\nTBEND    DC    C'TBEND '\nTBGET    DC    C'TBGET '\nTBQUERY  DC    C'TBQUERY '\nTBSKIP   DC    C'TBSKIP '\nTBTOP    DC    C'TBTOP '\nTBVCLEAR DC    C'TBVCLEAR '\nVDEF     DC    C'VDEFINE  '\nVDELETE  DC    C'VDELETE '\nVGET     DC    C'VGET '\nVPUT     DC    C'VPUT '\nVREPLACE DC    C'VREPLACE '\nSHARED   DC    C'SHARED '\n*\nNOWRITE  DC    C'NOWRITE '\n*\nNULLENT  DC    C'()'\n*\nDANAMLST DC    C'('             DISPLAY ACTIVE NAME LIST\nSEL      DC    C'VSLA     '     SELECTION CODE\nVTOLINE  DC    C'VTOLINE )'     JOB INFO\nVTOLINEP DC    C'(VTOLINE )'    JOB INFO\nVSLP     DC    C'(VSLA)'    SELECTION CODE\nVCMD     DC    C'(VCMD)'    SELECTION CODE\nVCHP00   DC    C'(CHP00)'\nVCHP08   DC    C'(CHP08)'\nVCHP10   DC    C'(CHP10)'\nVCHP18   DC    C'(CHP18)'\nVCHP20   DC    C'(CHP20)'\nONLI     DC    C'(ONLI)'\nOFFL     DC    C'(OFFL)'\nTAPE     DC    C'(TAPE)'\nCH       DC    C'(CH)'\nCHD      DS    CL2\n*\nSPACES   DC    80CL1' '\nCZEROS   DC    CL8'00000000'\nINFOAREA DS    CL40\nRC       DS    F\n*\nCHAR     DC    C'CHAR '\n*\nUDFDATAB DC    C'EDTAPE  '\nVDFTABLE DC    C'VDFTABLE'\n*\n*\n         TITLE 'REGISTER EQUATES'\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         TITLE 'WORKING STORAGE AREAS'\nDOUBLEWD DS    D              PACKED DECIMAL WORK AREA\nWORK     DS    D              PACKED DECIMAL WORK AREA\nBASE     DS    F\n*ORM     DS    F\nCHIP     DS    CL6\nCMB      DS    F\n*\nISPARMS  DS    10F            PARM LIST FOR ISPLINK\nCHP00    DC    C'40       '\n         DC    C'41       '\n         DC    C'42       '\n         DC    C'43       '\n         DC    C'44       '\n         DC    C'45       '\n         DC    C'46       '\n         DC    C'47       '\nCHP08    DC    C'48       '\n         DC    C'49       '\n         DC    C'4A       '\n         DC    C'4B       '\n         DC    C'4C       '\n         DC    C'4D       '\n         DC    C'4E       '\n         DC    C'4F       '\nCHP10    DC    C'50       '\n         DC    C'51       '\n         DC    C'52       '\n         DC    C'53       '\n         DC    C'54       '\n         DC    C'55       '\n         DC    C'56       '\n         DC    C'57       '\nCHP18    DC    C'58       '\n         DC    C'59       '\n         DC    C'5A       '\n         DC    C'5B       '\n         DC    C'5C       '\n         DC    C'5D       '\n         DC    C'5E       '\n         DC    C'5F       '\nCHP20    DC    C'60       '\n         DC    C'61       '\n         DC    C'62       '\n         DC    C'63       '\n         DC    C'64       '\n         DC    C'65       '\n         DC    C'66       '\n         DC    C'67       '\n*\n*     THE ISP TABLE FLAGS INDICATE NO ACTIVE TABLE (0), OR ONE EXISTS\n*\n         TITLE 'UDF-WORK AREAS      '\n         LTORG\n*\nPENDSNSE DC    CL10'SNSE-PNDNG'\nCVTA     DC    D'0',X'0'               PLUS A GARBAGE BYTE\nCVTB     DC    F'0'\nHEXTAB   EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\nDBLW     DS    D                           CVD WORK AREA\nTYPESIZE EQU   8                   SIZE OF A 'DX' ENTRY\nTAPETYPS EQU   *\n         DX    1,'2400'\n         DX    2,'0002'\n         DX    3,'TAPE'\n         DX    80,'3480'\n         DX    81,'3490'\n         DX    FF,'????'\n*APSONLY DC    CL64' '\n*        DC    CL10' '\n*        DC    C'\u00a2.<(+|&&'\n*        DC    CL9' '\n*        DC    C'!$*)'\n*        DC    C' '             NOTE SEMICOLON CHANGED TO BLANK\n*        DC    C'\u00ac-/'\n*        DC    CL9' ',C',%_>?',CL10' ',C':#@''=\"'\n*        DC    CL16' ABCDEFGHI      '\n*        DC    CL16' JKLMNOPQR      '\n*        DC    CL16'  STUVWXYZ      '\n*        DC    CL16'                '\n*        DC    CL16' ABCDEFGHI      '\n*        DC    CL16' JKLMNOPQR      '\n*        DC    CL16'  STUVWXYZ      '\n*        DC    CL16'0123456789      '\n         TITLE 'UDF-LSPACE WORK AREA'\n*\nHEX      DC    C'0123456789ABCDEF'\nEXTPWORK DS    1F\nR5SAVE   DS    1F\nVPANELS  DC    C'(''C4ADMDM.ZDF'')   '\nVPANCLR  DC    C'() '\nVLIBDEF  DC    C'LIBDEF '\nVISP     DC    C'ISPPLIB '\nVDATASET DC    C'DATASET '\nVCONTROL DC    C'CONTROL '\nVNONDISP DC    C'NONDISPL '\nVENTER   DC    C'ENTER   '\nPANS     DC    C' '\nADDRUCB  DS    A\nWORKAREA DC    XL100'00'\nUCBAREA  DC    XL50'00'\nRET      DC    F'0'\nRSN      DC    F'0'\nDEVCLASS DC    X'00'\n*IOUNIT  DC    CL7'V-I-O'\nDD6250   DC    CL9'1600/6250'\nDD1600   DC    CL9' 800/1600'\nD1600    DC    CL9'1600     '\nD6250    DC    CL9'6250     '\nASCII    DC    CL2'-A'\nTRACK7   DC    CL2'-7'\nPAGEPACK DC    CL3'PAG'\n         TITLE 'UDF-UCB  LINE FORMAT'\nTABAREA  DS   0CL79\nVOLNAME  DS   CL6                           VOLUME NAME\n         DS   C                             DIRF FLAG\nUNITADDR DS   CL3                           UNIT ADDRESS\n         DS   CL1\nASID     DS   CL8\n         DS   CL1\nUNITTYPE DS   CL10\n         DS   CL2\nUSTATUS  DS   CL3\n         DS   CL1\nOUTUSAGE DS   CL3\n         DS   CL1\nOUTCHPID DS   CL14\n         DS   CL2\nOUTIO    DS   CL5\n         DS   CL1\nOUTCONN  DS   CL3\n         DS   CL1\nOUTDISC  DS   CL3\n         DS   CL1\nOUTPEND  DS   CL3\n         DS   CL1\nOUTSIO   DS   CL5\n         DS   CL9\nCOUNTER  DS   F\nASTER    DC   C'*'\nLASTCHP  DC   33F'0'\nIOCOUNT  DC   300F'0'\nIOCONN   DC   300F'0'\nIODISC   DC   300F'0'\nIOPEND   DC   300F'0'\nASVTPTR  DS   F\nASVTMAX  DS   F\n         EJECT\n*\n* EQUATES....\n*\n         PRINT GEN\n         TITLE 'COMMUNICATION VECTOR TABLE'\n         CVT   DSECT=YES,PREFIX=NO\n         TITLE 'UNIT CONTROL BLOCK'\n         IEFUCBOB\n         IOSDMAP\n         IHAASVT\n         IHAASCB\n         END\n/*\n//L.SYSLMOD  DD   DISP=SHR,DSN=XODMN.PROD.LKED(EDTAPE)\n//L.SYSLIB   DD   DISP=SHR,DSN=ISP.V3R5M0.ISPLOAD\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EDTAPE": {"ttr": 2058, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x00\\x00\\x95&\\x8f\\x00\\x97\\x19o\\x10X\\x00\\x19\\x00 \\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1995-09-25T00:00:00", "modifydate": "1997-07-15T10:58:00", "lines": 25, "newlines": 32, "modlines": 0, "user": "ED115DM"}, "text": ")ATTR\n_ TYPE(INPUT)\n@ TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(YELLOW)\n! TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(GREEN)\n$ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n? TYPE(TEXT) INTENS(LOW) JUST(LEFT) COLOR(YELLOW) HILITE(USCORE)\n+ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n\u00a2 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(GREEN)\n)BODY\n$                  ********* Tape display facility *********\n COMMAND ==>_VCMD                                               %SCROLL =>_AMT %\n%\n$                              J         ---- CHPIDS --- DELTA AVG AVG AVG\n$VOLSER ADR JOBNAME  TYPE      3 STATUS   #  01 02 03 04 # IO  CON DIS PEN SIO\n)MODEL\n@VTOLINE\n)INIT\n .CURSOR=VCMD\n  &AMT=PAGE\n  &VCMD='    '\n  .HELP=QS\n &ZTDMARK = '                  ********* End of Tape display ***********   '\n)PROC\n &PTCBTEXT = &VCMD\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EDWAD#": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x19/\\x00\\x95\\x19/\\x10G\\x00E\\x00E\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-07-11T00:00:00", "modifydate": "1995-07-11T10:47:00", "lines": 69, "newlines": 69, "modlines": 0, "user": "ED115DM"}, "text": ")ATTR\n_ TYPE(INPUT)\n@ TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(YELLOW)\n! TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(GREEN)\n$ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n? TYPE(TEXT) INTENS(LOW) JUST(LEFT) COLOR(YELLOW) HILITE(USCORE)\n+ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n\u00a2 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(GREEN)\n\u00ac TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&MGBCOL)\n| TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&CPUCOL)\n{ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&AFCCOL)\n} TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&PAGCOL)\n< TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&TPRCOL)\n\u00a6 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&UICCOL)\n)BODY CMD(ZSPFCMD)\n$&ZTIME &ZJDATE       ********* Job Display Facility *********\n$ISPF COMMAND    ==>_ZSPFCMD                                    $SCROLL =>_AMT $\n$BAT,STC,TSU,ALL ==>_Z  $     PREFIX ==>_Z       $OPTN ==>_Z$    RPTSEC =>_Z$\n|   CPU=&CPU{AFC=&AFC}PAG=&PAG<TPR=&TPR\u00a6UIC=&UIC \u00acMB>&MGB\u00a2TSO=&TSO\n$   &ASID &T   JOB    &EXCPCNT &JOBSTEP STATUS   MEMORY SWP DP  PG  &PCPU\n)MODEL\n_Z@Z                                     !Z   @Z\n)INIT\n &PCPU=%CPU..STEPCPU\n &ASID=ASID\n &JOBSTEP='JES_INIT'\n &T=T\n &EXCPCNT=EXCP_CNT\n &CPUCOL=GREEN\n &AFCCOL=GREEN\n &PAGCOL=GREEN\n &TPRCOL=GREEN\n &UICCOL=GREEN\n &MGBCOL=GREEN\n .ZVARS='(XCMD,ZPRE,ZJS3,XRPT,PIKA,ACTLINE,STAT,ACTLINB)'\n .CURSOR=XCMD\n &AMT=CSR\n .HELP=ZDFC4\n &ZTDMARK = '                   ********* End of EDWA job list *********   '\n IF (&XRPT \u00ac= 0)\n     &ZTDMARK = '** Use attention key to terminate display **'\n IF (&CPU > 0090)\n     &CPUCOL=RED\n IF (&AFC < 0100)\n     &AFCCOL=RED\n IF (&PAG > 0050)\n     &PAGCOL=RED\n IF (&TPR > 0150)\n     &TPRCOL=RED\n IF (&UIC < 0200)\n     &UICCOL=RED\n IF (&MGB < 0151)\n     &MGBCOL=RED\n IF (&ZJS3 = 'J')\n     &ASID=JOB#\n IF (&ZJS3 = 'Q')\n     &JOBSTEP=STEPNAME\n     &EXCPCNT='PROCEDUR'\n     &T=C\n IF (&XCMD = 'TSU')\n     &JOBSTEP=LOGNPROC\n)PROC\n &PTCBTEXT = &XCMD\n VER(&XCMD,NONBLANK,LIST,BAT,TSU,STC,ALL)\n VER(&ZJS3,LIST,0,Q,S,J)\n VER(&XRPT,NONBLANK,LIST,0,2,3,4,5,6,7,8,9)\n IF (&XCMD = 'ALL')\n     &ZJS3 = ' '\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EDWADATA": {"ttr": 2307, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x00\\x00\\x86(o\\x00\\x95\\x19/\\x13S\\x00E\\x00\\x14\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "1986-10-13T00:00:00", "modifydate": "1995-07-11T13:53:00", "lines": 69, "newlines": 20, "modlines": 0, "user": "ED115DM"}, "text": ")ATTR\n_ TYPE(INPUT)\n@ TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(YELLOW)\n! TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(GREEN)\n$ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n? TYPE(TEXT) INTENS(LOW) JUST(LEFT) COLOR(YELLOW) HILITE(USCORE)\n+ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n\u00a2 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(GREEN)\n\u00ac TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&MGBCOL)\n| TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&CPUCOL)\n{ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&AFCCOL)\n} TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&PAGCOL)\n< TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&TPRCOL)\n\u00a6 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&UICCOL)\n)BODY CMD(ZSPFCMD)\n$&ZTIME &ZJDATE       ********* Job Display Facility *********\n$ISPF COMMAND    ==>_ZSPFCMD                                    $SCROLL =>_AMT $\n$BAT,STC,TSU,ALL ==>_Z  $     PREFIX ==>_Z       $OPTN ==>_Z$    RPTSEC =>_Z$\n|   CPU=&CPU{AFC=&AFC}PAG=&PAG<TPR=&TPR\u00a6UIC=&UIC \u00acMB>&MGB\u00a2TSO=&TSO\n$   &ASID &T   JOB    &EXCPCNT &JOBSTEP STATUS   MEMORY SWP DP  PG  &PCPU\n)MODEL\n_Z@Z                                     !Z   @Z\n)INIT\n &PCPU=%CPU..STEPCPU\n &ASID=ASID\n &JOBSTEP='JES_INIT'\n &T=T\n &EXCPCNT=EXCP_CNT\n &CPUCOL=GREEN\n &AFCCOL=GREEN\n &PAGCOL=GREEN\n &TPRCOL=GREEN\n &UICCOL=GREEN\n &MGBCOL=GREEN\n .ZVARS='(XCMD,ZPRE,ZJS3,XRPT,PIKA,ACTLINE,STAT,ACTLINB)'\n .CURSOR=XCMD\n &AMT=CSR\n .HELP=ZDFC4\n &ZTDMARK = '                   ********* End of EDWA job list *********   '\n IF (&XRPT \u00ac= 0)\n     &ZTDMARK = '** Use attention key to terminate display **'\n IF (&CPU > 0090)\n     &CPUCOL=RED\n IF (&AFC < 0100)\n     &AFCCOL=RED\n IF (&PAG > 0050)\n     &PAGCOL=RED\n IF (&TPR > 0150)\n     &TPRCOL=RED\n IF (&UIC < 0200)\n     &UICCOL=RED\n IF (&MGB < 0151)\n     &MGBCOL=RED\n IF (&ZJS3 = 'J')\n     &ASID=JOB#\n IF (&ZJS3 = 'Q')\n     &JOBSTEP=STEPNAME\n     &EXCPCNT='PROCEDUR'\n     &T=C\n IF (&XCMD = 'TSU')\n     &JOBSTEP=LOGNPROC\n IF (&XCMD = 'STC')\n     &JOBSTEP=STEPNAME\n)PROC\n &PTCBTEXT = &XCMD\n VER(&XCMD,NONBLANK,LIST,BAT,TSU,STC,ALL)\n VER(&ZJS3,LIST,0,Q,S,J)\n VER(&XRPT,NONBLANK,LIST,0,2,3,4,5,6,7,8,9)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EDWADAT2": {"ttr": 2309, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x95#?\\x00\\x95#?\\x139\\x00E\\x00E\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1995-08-21T00:00:00", "modifydate": "1995-08-21T13:39:00", "lines": 69, "newlines": 69, "modlines": 0, "user": "ED115DM"}, "text": ")ATTR\n_ TYPE(INPUT)\n@ TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(YELLOW)\n! TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(GREEN)\n$ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n? TYPE(TEXT) INTENS(LOW) JUST(LEFT) COLOR(YELLOW) HILITE(USCORE)\n+ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n\u00a2 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(GREEN)\n\u00ac TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&MGBCOL)\n| TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&CPUCOL)\n{ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&AFCCOL)\n} TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&PAGCOL)\n< TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&TPRCOL)\n\u00a6 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&UICCOL)\n)BODY CMD(ZSPFCMD)\n$&ZTIME &ZJDATE       ********* Job Display Facility *********\n$ISPF COMMAND    ==>_ZSPFCMD                                    $SCROLL =>_AMT $\n$BAT,STC,TSU,ALL ==>_Z  $     PREFIX ==>_Z       $OPTN ==>_Z$    RPTSEC =>_Z$\n|   CPU=&CPU{AFC=&AFC}PAG=&PAG<TPR=&TPR\u00a6UIC=&UIC \u00acMB>&MGB\u00a2TSO=&TSO\n$  &ASID &T   JOB    &EXCPCNT &JOBSTEP STATUS    MEMORY SWP DP  PG  &PCPU\n)MODEL\n_Z@Z                                    !Z    @Z\n)INIT\n &PCPU=%CPU..STEPCPU\n &ASID=ASID\n &JOBSTEP='JES_INIT'\n &T=T\n &EXCPCNT=EXCP_CNT\n &CPUCOL=GREEN\n &AFCCOL=GREEN\n &PAGCOL=GREEN\n &TPRCOL=GREEN\n &UICCOL=GREEN\n &MGBCOL=GREEN\n .ZVARS='(XCMD,ZPRE,ZJS3,XRPT,PIKA,ACTLINE,STAT,ACTLINB)'\n .CURSOR=XCMD\n &AMT=CSR\n .HELP=ZDFC4\n &ZTDMARK = '                   ********* End of EDWA job list *********   '\n IF (&XRPT \u00ac= 0)\n     &ZTDMARK = '** Use attention key to terminate display **'\n IF (&CPU > 0090)\n     &CPUCOL=RED\n IF (&AFC < 0100)\n     &AFCCOL=RED\n IF (&PAG > 0050)\n     &PAGCOL=RED\n IF (&TPR > 0150)\n     &TPRCOL=RED\n IF (&UIC < 0200)\n     &UICCOL=RED\n IF (&MGB < 0151)\n     &MGBCOL=RED\n IF (&ZJS3 = 'J')\n     &ASID=JOB#\n IF (&ZJS3 = 'Q')\n     &JOBSTEP=STEPNAME\n     &EXCPCNT='PROCEDUR'\n     &T=C\n IF (&XCMD = 'TSU')\n     &JOBSTEP=LOGNPROC\n IF (&XCMD = 'STC')\n     &JOBSTEP=STEPNAME\n)PROC\n &PTCBTEXT = &XCMD\n VER(&XCMD,NONBLANK,LIST,BAT,TSU,STC,ALL)\n VER(&ZJS3,LIST,0,Q,S,J)\n VER(&XRPT,NONBLANK,LIST,0,2,3,4,5,6,7,8,9)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EDWADAT3": {"ttr": 2311, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01<\\x00\\x00\\x00\\x95$\\x7f\\x00\\x95'\\x0f\\x12(\\x00\\x95\\x00E\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@\"", "ispf": {"version": "01.60", "flags": 0, "createdate": "1995-09-04T00:00:00", "modifydate": "1995-09-27T12:28:00", "lines": 149, "newlines": 69, "modlines": 0, "user": "ED115DM"}, "text": ")ATTR\n_ TYPE(INPUT)\n@ TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(YELLOW)\n! TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(GREEN)\n$ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n+ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n\u00a2 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(GREEN)\n\u00ac TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&MGBCOL)\n| TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&CPUCOL)\n{ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&AFCCOL)\n} TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&PAGCOL)\n< TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&TPRCOL)\n\u00a6 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&UICCOL)\n? TYPE(AB)\n# TYPE(NT)\n)ABC DESC(Options)\n PDC DESC(Set_display-batch)\n PDC DESC(Set_display-STC)\n PDC DESC(Set_display-TSO)\n PDC DESC(Set_display-ALL)\n PDC DESC(Display_job_class_and_stepinfo)\n PDC DESC(Display_job_numbers{slow})\n PDC DESC(Set_prefix_to_ED)\n PDC DESC(Set_prefix_to_DT)\n PDC DESC(Set_prefix_to_C4)\n)ABCINIT\n .ZVARS=PDCHOICE\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1,2,3,4,5,6,7,8,9)\n IF ( &PDCHOICE=1)\n      &YCMD=BAT\n IF ( &PDCHOICE=2)\n      &YCMD=STC\n IF ( &PDCHOICE=3)\n      &YCMD=TSU\n IF ( &PDCHOICE=4)\n      &YCMD=ALL\n IF ( &PDCHOICE=5)\n      &YJS3=Q\n IF ( &PDCHOICE=6)\n      &YJS3=J\n IF ( &PDCHOICE=7)\n      &YPRE=ED\n IF ( &PDCHOICE=8)\n      &YPRE=DT\n IF ( &PDCHOICE=9)\n      &YPRE=C4\n)ABC DESC(JES3)\n PDC DESC(Interact_with_JES3)\n ACTION RUN(TSO) PARM('EDJES3 N')\n)ABCINIT\n .ZVARS=PDCHOICE\n .RESP=ENTER\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1)\n)ABC DESC(Help)\n PDC DESC(Help_on_windows)\n ACTION RUN(TSO) PARM('EXEC ''EDS1.PROD.ZDF(WHELP)'' ')\n)ABCINIT\n .ZVARS=PDCHOICE\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1)\n)ABC DESC(TSOcommnd)\n PDC DESC(Show_Adabas_jobs)\n ACTION RUN(TSO) PARM(' EXEC ''EDS1.PROD.ZDF(BA)'' ')\n PDC DESC(Last_IPL_details)\n ACTION RUN(TSO) PARM(LASTIPL)\n PDC DESC(Storage_packs)\n ACTION RUN(TSO) PARM(STG)\n PDC DESC(Scratch_packs)\n ACTION RUN(TSO) PARM(SCR)\n PDC DESC(Clashing_enqueues)\n ACTION RUN(TSO) PARM(TSOENQ)\n PDC DESC(IO_in-this_session)\n ACTION RUN(TSO) PARM(IO)\n PDC DESC(HSM_users)\n ACTION RUN(TSO) PARM(YDF)\n)ABCINIT\n .ZVARS=PDCHOICE\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1,2,3,4,5,6,7)\n)BODY CMD(ZSPFCMD)\n$&ZTIME &ZJDATE &SU   ********* Job Display Facility *********\n$ISPF COMMAND    ==>_ZSPFCMD                                    $SCROLL =>_AMT $\n$BAT,STC,TSU,ALL ==>_Z  $     PREFIX ==>_Z       $OPTN ==>_Z$    RPTSEC =>_Z$\n|   CPU=&CPU{AFC=&AFC}PAG=&PAG<TPR=&TPR\u00a6UIC=&UIC \u00acMB>&MGB\u00a2TSO=&TSO\n$  &ASID &T   JOB    &EXCPCNT &JOBSTEP STATUS    MEMORY SWP DP  PG &PCPU\n)MODEL\n_Z@Z                                    !Z    @Z\n)INIT\n &PCPU=%1CPU..STEPCPU\n &ASID=ASID\n &JOBSTEP='JES_INIT'\n &T=T\n &EXCPCNT=EXCP_CNT\n &CPUCOL=GREEN\n &AFCCOL=GREEN\n &PAGCOL=GREEN\n &TPRCOL=GREEN\n &UICCOL=GREEN\n &MGBCOL=GREEN\n .ZVARS='(XCMD,ZPRE,ZJS3,XRPT,PIKA,ACTLINE,STAT,ACTLINB)'\n .CURSOR=XCMD\n &AMT=CSR\n .HELP=ZDFC4\n &ZTDMARK = '                   ********* End of EDWA job list *********   '\n IF (&XRPT \u00ac= 0)\n     &ZTDMARK = '** Use attention key to terminate display **'\n IF (&CPU > 0090)\n     &CPUCOL=RED\n IF (&AFC < 0100)\n     &AFCCOL=RED\n IF (&PAG > 0050)\n     &PAGCOL=RED\n IF (&TPR > 0150)\n     &TPRCOL=RED\n IF (&UIC < 0200)\n     &UICCOL=RED\n IF (&MGB < 0151)\n     &MGBCOL=RED\n IF (&ZJS3 = 'J')\n     &ASID=JOB#\n IF (&ZJS3 = 'Q')\n     &JOBSTEP=STEPNAME\n     &EXCPCNT='PROCEDUR'\n     &T=C\n IF (&XCMD = 'TSU')\n     &JOBSTEP=LOGNPROC\n IF (&XCMD = 'STC')\n     &JOBSTEP=STEPNAME\n)PROC\n IF (&YCMD \u00ac= &Z)\n     &XCMD=&YCMD\n     &YCMD=&Z\n IF (&YPRE \u00ac= &Z)\n     &ZPRE=&YPRE\n     &YPRE=&Z\n IF (&YJS3 \u00ac= &Z)\n     &ZJS3=&YJS3\n     &YJS3=&Z\n &PTCBTEXT = &XCMD\n VER(&XCMD,NONBLANK,LIST,BAT,TSU,STC,ALL)\n VER(&ZJS3,LIST,0,Q,S,J)\n VER(&XRPT,NONBLANK,LIST,0,2,3,4,5,6,7,8,9)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EDWADAT4": {"ttr": 2315, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00\\x00\\x00\\x95&\\x8f\\x00\\x96\\x16_\\x083\\x00\\xb5\\x00\\x96\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "1995-09-25T00:00:00", "modifydate": "1996-06-13T08:33:00", "lines": 181, "newlines": 150, "modlines": 0, "user": "ED115DM"}, "text": ")ATTR\n_ TYPE(INPUT)\n@ TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(YELLOW)\n! TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(GREEN)\n$ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n+ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n\u00a2 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(GREEN)\n\u00ac TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&MGBCOL)\n| TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&CPUCOL)\n{ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&AFCCOL)\n} TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&PAGCOL)\n< TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&TPRCOL)\n\u00a6 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&UICCOL)\n? TYPE(AB)\n# TYPE(NT)\n)ABC DESC(Options)\n PDC DESC(Set_display-batch)\n PDC DESC(Set_display-STC)\n PDC DESC(Set_display-TSO)\n PDC DESC(Set_display-ALL)\n PDC DESC(Display_job_class_and_stepinfo)\n PDC DESC(Display_job_numbers{slow})\n PDC DESC(Set_prefix_to_ED)\n PDC DESC(Set_prefix_to_DT)\n PDC DESC(Set_prefix_to_C4)\n)ABCINIT\n .ZVARS=PDCHOICE\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1,2,3,4,5,6,7,8,9)\n IF ( &PDCHOICE=1)\n      &YCMD=BAT\n IF ( &PDCHOICE=2)\n      &YCMD=STC\n IF ( &PDCHOICE=3)\n      &YCMD=TSU\n IF ( &PDCHOICE=4)\n      &YCMD=ALL\n IF ( &PDCHOICE=5)\n      &YJS3=Q\n IF ( &PDCHOICE=6)\n      &YJS3=J\n IF ( &PDCHOICE=7)\n      &YPRE=ED\n IF ( &PDCHOICE=8)\n      &YPRE=DT\n IF ( &PDCHOICE=9)\n      &YPRE=C4\n)ABC DESC(JES3)\n PDC DESC(Interact_with_JES3)\n ACTION RUN(TSO) PARM('EDJES3 N')\n)ABCINIT\n .ZVARS=PDCHOICE\n .RESP=ENTER\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1)\n)ABC DESC(Tape)\n PDC DESC(Tape_display)\n ACTION RUN(TSO) PARM('EDTAPE N')\n)ABCINIT\n .ZVARS=PDCHOICE\n .RESP=ENTER\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1)\n)ABC DESC(SP)\n PDC DESC(Staffing_pay)\n ACTION RUN(TSO) PARM('EDADP N')\n)ABCINIT\n .ZVARS=PDCHOICE\n .RESP=ENTER\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1)\n)ABC DESC(Help)\n PDC DESC(Help_on_windows)\n ACTION RUN(TSO) PARM('EXEC ''EDS1.PROD.ZDF(WHELP)'' ')\n)ABCINIT\n .ZVARS=PDCHOICE\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1)\n)ABC DESC(TSOcommnd)\n PDC DESC(Show_Adabas_jobs)\n ACTION RUN(TSO) PARM(' EXEC ''EDS1.PROD.ZDF(BA)'' ')\n PDC DESC(Last_IPL_details)\n ACTION RUN(TSO) PARM(LASTIPL)\n PDC DESC(Storage_packs)\n ACTION RUN(TSO) PARM(STG)\n PDC DESC(Scratch_packs)\n ACTION RUN(TSO) PARM(SCR)\n PDC DESC(Enqueue_conflicts)\n ACTION RUN(TSO) PARM(TSOENQ)\n PDC DESC(IO_in-this_session)\n ACTION RUN(TSO) PARM(IO)\n PDC DESC(SMF_status)\n ACTION RUN(TSO) PARM(C4SMFDS)\n PDC DESC(HSM_users)\n ACTION RUN(TSO) PARM(YDF)\n)ABCINIT\n .ZVARS=PDCHOICE\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1,2,3,4,5,6,7,8)\n)ABC DESC(Swap)\n PDC DESC(Swap)\n ACTION RUN(SWAP)\n)ABCINIT\n .ZVARS=PDCHOICE\n .RESP=ENTER\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1)\n)BODY CMD(ZSPFCMD)\n? Options#? JES3#? Tape#? SP #? Help#? TSOcommnd#? Swap#\n$&ZTIME &ZJDATE &SU  ********* Job Display Facility *********    &SER\n$ISPF COMMAND    ==>_ZSPFCMD                                    $SCROLL =>_AMT $\n$BAT,STC,TSU,ALL ==>_Z  $     PREFIX ==>_Z       $OPTN ==>_Z$    RPTSEC =>_Z$\n|   CPU=&CPU{AFC=&AFC}PAG=&PAG<TPR=&TPR\u00a6UIC=&UIC \u00acMB>&MGB\u00a2TSO=&TSO\n$  &ASID &T   JOB    &EXCPCNT &JOBSTEP STATUS    MEMORY &SW DP  PG &PCPU\n)MODEL\n_Z@Z                                    !Z    @Z\n)INIT\n &PCPU=%1CPU..STEPCPU\n &ASID=ASID\n &JOBSTEP='JES_INIT'\n &T=T\n &EXCPCNT=EXCP_CNT\n &SW=SWP\n &CPUCOL=GREEN\n &AFCCOL=GREEN\n &PAGCOL=GREEN\n &TPRCOL=GREEN\n &UICCOL=GREEN\n &MGBCOL=GREEN\n .ZVARS='(XCMD,ZPRE,ZJS3,XRPT,PIKA,ACTLINE,STAT,ACTLINB)'\n .CURSOR=XCMD\n &AMT=CSR\n .HELP=ZDFC4\n &ZTDMARK = '                   ********* End of EDWA job list *********   '\n IF (&XRPT \u00ac= 0)\n     &ZTDMARK = '** Use attention key to terminate display **'\n IF (&CPU > 0090)\n     &CPUCOL=RED\n IF (&AFC < 0100)\n     &AFCCOL=RED\n IF (&PAG > 0050)\n     &PAGCOL=RED\n IF (&TPR > 0150)\n     &TPRCOL=RED\n IF (&UIC < 0200)\n     &UICCOL=RED\n IF (&MGB < 0151)\n     &MGBCOL=RED\n IF (&ZJS3 = 'J')\n     &ASID=JOB#\n IF (&ZJS3 = 'Q')\n     &JOBSTEP=STEPNAME\n     &EXCPCNT='PROCEDUR'\n     &SW='PIN'\n     &T=C\n IF (&XCMD = 'TSU')\n     &JOBSTEP=LOGNPROC\n IF (&XCMD = 'STC')\n     &JOBSTEP=STEPNAME\n)PROC\n IF (&YCMD \u00ac= &Z)\n     &XCMD=&YCMD\n     &YCMD=&Z\n IF (&YPRE \u00ac= &Z)\n     &ZPRE=&YPRE\n     &YPRE=&Z\n IF (&YJS3 \u00ac= &Z)\n     &ZJS3=&YJS3\n     &YJS3=&Z\n &PTCBTEXT = &XCMD\n VER(&XCMD,NONBLANK,LIST,BAT,TSU,STC,ALL)\n VER(&ZJS3,LIST,0,Q,S,J)\n VER(&XRPT,NONBLANK,LIST,0,2,3,4,5,6,7,8,9)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EDWADAT5": {"ttr": 2561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00\\x00\\x00\\x961\\x8f\\x00\\x961\\x8f\\tW\\x00s\\x00\\xb5\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "1996-11-13T00:00:00", "modifydate": "1996-11-13T09:57:00", "lines": 115, "newlines": 181, "modlines": 0, "user": "ED115DM"}, "text": ")ATTR\n_ TYPE(INPUT)\n@ TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(YELLOW)\n! TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(GREEN)\n$ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n+ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n\u00a2 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(GREEN)\n\u00ac TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&MGBCOL)\n| TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&CPUCOL)\n{ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&AFCCOL)\n} TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&PAGCOL)\n< TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&TPRCOL)\n\u00a6 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&UICCOL)\n? TYPE(AB)\n# TYPE(NT)\n)ABC DESC(Options)\n PDC DESC(Set_display-batch)\n PDC DESC(Set_display-STC)\n PDC DESC(Set_display-TSO)\n PDC DESC(Set_display-ALL)\n PDC DESC(Display_job_class_and_stepinfo)\n PDC DESC(Display_job_numbers{slow})\n PDC DESC(Set_prefix_to_ED)\n PDC DESC(Set_prefix_to_DT)\n PDC DESC(Set_prefix_to_C4)\n)ABCINIT\n .ZVARS=PDCHOICE\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1,2,3,4,5,6,7,8,9)\n IF ( &PDCHOICE=1)\n      &YCMD=BAT\n IF ( &PDCHOICE=2)\n      &YCMD=STC\n IF ( &PDCHOICE=3)\n      &YCMD=TSU\n IF ( &PDCHOICE=4)\n      &YCMD=ALL\n IF ( &PDCHOICE=5)\n      &YJS3=Q\n IF ( &PDCHOICE=6)\n      &YJS3=J\n IF ( &PDCHOICE=7)\n      &YPRE=ED\n IF ( &PDCHOICE=8)\n      &YPRE=DT\n IF ( &PDCHOICE=9)\n      &YPRE=C4\n)BODY CMD(ZSPFCMD)\n? Options#\n$&ZTIME &ZJDATE &SU  ********* Job Display Facility *********    &SER\n$ISPF COMMAND    ==>_ZSPFCMD                                   $SCROLL  =>_AMT $\n$BAT,STC,TSU,ALL ==>_Z  $     PREFIX ==>_Z       $OPTN ==>_Z$   RPTSEC  =>_Z$\n|   CPU=&CPU{AFC=&AFC}PAG=&PAG<TPR=&TPR\u00a6UIC=&UIC \u00acMB>&MGB\u00a2TSO=&TSO\n$  &ASID &T   JOB    &EXCPCNT &JOBSTEP STATUS    MEMORY &SW DP  PG &PCPU\n)MODEL\n_Z@Z                                    !Z    @Z\n)INIT\n &PCPU=%1CPU..STEPCPU\n &ASID=ASID\n &JOBSTEP='JES_INIT'\n &T=T\n &EXCPCNT=EXCP_CNT\n &SW=SWP\n &CPUCOL=GREEN\n &AFCCOL=GREEN\n &PAGCOL=GREEN\n &TPRCOL=GREEN\n &UICCOL=GREEN\n &MGBCOL=GREEN\n .ZVARS='(XCMD,ZPRE,ZJS3,XRPT,PIKA,ACTLINE,STAT,ACTLINB)'\n .CURSOR=XCMD\n &AMT=CSR\n .HELP=ZDFC4\n &ZTDMARK = '                   ********* End of EDWA job list *********   '\n IF (&XRPT \u00ac= 0)\n     &ZTDMARK = '** Use attention key to terminate display **'\n IF (&CPU > 0090)\n     &CPUCOL=RED\n IF (&AFC < 0100)\n     &AFCCOL=RED\n IF (&PAG > 0050)\n     &PAGCOL=RED\n IF (&TPR > 0150)\n     &TPRCOL=RED\n IF (&UIC < 0200)\n     &UICCOL=RED\n IF (&MGB < 0151)\n     &MGBCOL=RED\n IF (&ZJS3 = 'J')\n     &ASID=JOB#\n IF (&ZJS3 = 'Q')\n     &JOBSTEP=STEPNAME\n     &EXCPCNT='PROCEDUR'\n     &SW='PIN'\n     &T=C\n IF (&XCMD = 'TSU')\n     &JOBSTEP=LOGNPROC\n IF (&XCMD = 'STC')\n     &JOBSTEP=STEPNAME\n)PROC\n IF (&YCMD \u00ac= &Z)\n     &XCMD=&YCMD\n     &YCMD=&Z\n IF (&YPRE \u00ac= &Z)\n     &ZPRE=&YPRE\n     &YPRE=&Z\n IF (&YJS3 \u00ac= &Z)\n     &ZJS3=&YJS3\n     &YJS3=&Z\n &PTCBTEXT = &XCMD\n VER(&XCMD,NONBLANK,LIST,BAT,TSU,STC,ALL)\n VER(&ZJS3,LIST,0,Q,S,J)\n VER(&XRPT,NONBLANK,LIST,0,2,3,4,5,6,7,8,9)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EDWADAT6": {"ttr": 2564, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x961\\x8f\\x00\\x962?\\x12)\\x00s\\x00\\xb5\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1996-11-13T00:00:00", "modifydate": "1996-11-18T12:29:00", "lines": 115, "newlines": 181, "modlines": 0, "user": "ED115DM"}, "text": ")ATTR\n_ TYPE(INPUT)\n@ TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(YELLOW)\n! TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(GREEN)\n$ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n+ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n\u00a2 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(GREEN)\n\u00ac TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&MGBCOL)\n| TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&CPUCOL)\n{ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&AFCCOL)\n} TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&PAGCOL)\n< TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&TPRCOL)\n\u00a6 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&UICCOL)\n? TYPE(AB)\n# TYPE(NT)\n)ABC DESC(Options)\n PDC DESC(Set_display-batch)\n PDC DESC(Set_display-STC)\n PDC DESC(Set_display-TSO)\n PDC DESC(Set_display-ALL)\n PDC DESC(Display_job_class_and_stepinfo)\n PDC DESC(Display_job_numbers{slow})\n PDC DESC(Set_prefix_to_ED)\n PDC DESC(Set_prefix_to_DT)\n PDC DESC(Set_prefix_to_C4)\n)ABCINIT\n .ZVARS=PDCHOICE\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1,2,3,4,5,6,7,8,9)\n IF ( &PDCHOICE=1)\n      &YCMD=BAT\n IF ( &PDCHOICE=2)\n      &YCMD=STC\n IF ( &PDCHOICE=3)\n      &YCMD=TSU\n IF ( &PDCHOICE=4)\n      &YCMD=ALL\n IF ( &PDCHOICE=5)\n      &YJS3=Q\n IF ( &PDCHOICE=6)\n      &YJS3=J\n IF ( &PDCHOICE=7)\n      &YPRE=ED\n IF ( &PDCHOICE=8)\n      &YPRE=DT\n IF ( &PDCHOICE=9)\n      &YPRE=C4\n)BODY CMD(ZSPFCMD)\n? Options#\n$&ZTIME &ZJDATE &SU  ********* Job Display Facility *********    &SER\n$ISPF COMMAND    ==>_ZSPFCMD                                   $SCROLL  =>_AMT $\n$BAT,STC,TSU,ALL ==>_Z  $     PREFIX ==>_Z       $OPTN ==>_Z$   RPTSEC  =>_Z$\n|   CPU=&CPU{AFC=&AFC}PAG=&PAG<TPR=&TPR\u00a6UIC=&UIC \u00acMB>&MGB\u00a2TSO=&TSO\n$  &ASID &T   JOB    &EXCPCNT &JOBSTEP STATUS    MEMORY &SW DP  PG &PCPU\n)MODEL\n_Z@Z                                    !Z    @Z\n)INIT\n &PCPU=%1CPU..STEPCPU\n &ASID=ASID\n &JOBSTEP='JES_INIT'\n &T=T\n &EXCPCNT=EXCP_CNT\n &SW=SWP\n &CPUCOL=GREEN\n &AFCCOL=GREEN\n &PAGCOL=GREEN\n &TPRCOL=GREEN\n &UICCOL=GREEN\n &MGBCOL=GREEN\n .ZVARS='(XCMD,ZPRE,ZJS3,XRPT,PIKA,ACTLINE,STAT,ACTLINB)'\n .CURSOR=XCMD\n &AMT=CSR\n .HELP=ZDFC4\n &ZTDMARK = '                   ********* End of EDWA job list *********   '\n IF (&XRPT \u00ac= 0)\n     &ZTDMARK = '** Use attention key to terminate display **'\n IF (&CPU > 0090)\n     &CPUCOL=RED\n IF (&AFC < 0100)\n     &AFCCOL=RED\n IF (&PAG > 0050)\n     &PAGCOL=RED\n IF (&TPR > 0150)\n     &TPRCOL=RED\n IF (&UIC < 0200)\n     &UICCOL=RED\n IF (&MGB < 0151)\n     &MGBCOL=RED\n IF (&ZJS3 = 'J')\n     &ASID=JOB#\n IF (&ZJS3 = 'Q')\n     &JOBSTEP=STEPNAME\n     &EXCPCNT='PROCEDUR'\n     &SW='PIN'\n     &T=C\n IF (&XCMD = 'TSU')\n     &JOBSTEP=LOGNPROC\n IF (&XCMD = 'STC')\n     &JOBSTEP=STEPNAME\n)PROC\n IF (&YCMD \u00ac= &Z)\n     &XCMD=&YCMD\n     &YCMD=&Z\n IF (&YPRE \u00ac= &Z)\n     &ZPRE=&YPRE\n     &YPRE=&Z\n IF (&YJS3 \u00ac= &Z)\n     &ZJS3=&YJS3\n     &YJS3=&Z\n &PTCBTEXT = &XCMD\n VER(&XCMD,NONBLANK,LIST,BAT,TSU,STC,ALL)\n VER(&ZJS3,LIST,0,Q,S,J)\n VER(&XRPT,NONBLANK,LIST,0,2,3,4,5,6,7,8,9)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EDWADAT7": {"ttr": 2567, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00\\x00\\x00\\x962?\\x00\\x97\\x06\\x9f\\x10\\x14\\x00|\\x00\\xb5\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "1996-11-18T00:00:00", "modifydate": "1997-03-10T10:14:00", "lines": 124, "newlines": 181, "modlines": 0, "user": "ED115DM"}, "text": ")ATTR\n_ TYPE(INPUT)\n@ TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(YELLOW)\n! TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(GREEN)\n$ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n+ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n\u00a2 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(GREEN)\n\u00ac TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&MGBCOL)\n| TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&CPUCOL)\n{ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&AFCCOL)\n} TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&PAGCOL)\n< TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&TPRCOL)\n\u00a6 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&UICCOL)\n? TYPE(AB)\n# TYPE(NT)\n)ABC DESC(Options)\n PDC DESC(Set_display-batch)\n PDC DESC(Set_display-STC)\n PDC DESC(Set_display-TSO)\n PDC DESC(Set_display-ALL)\n PDC DESC(Display_job_class_and_stepinfo)\n PDC DESC(Display_job_numbers{slow})\n PDC DESC(Display_where_cpu_goes)\n PDC DESC(Sort_displayed_data)\n PDC DESC(Set_prefix_to_ED)\n PDC DESC(Set_prefix_to_DT)\n PDC DESC(Set_prefix_to_C4)\n)ABCINIT\n .ZVARS=PDCHOICE\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1,2,3,4,5,6,7,8,9,10,11)\n IF ( &PDCHOICE=1)\n      &YCMD=BAT\n IF ( &PDCHOICE=2)\n      &YCMD=STC\n IF ( &PDCHOICE=3)\n      &YCMD=TSU\n IF ( &PDCHOICE=4)\n      &YCMD=ALL\n IF ( &PDCHOICE=5)\n      &YJS3=Q\n IF ( &PDCHOICE=6)\n      &YJS3=J\n IF ( &PDCHOICE=7)\n      &YCMD=ALL\n      &YJS3=0\n IF ( &PDCHOICE=8)\n      &YJS3=S\n IF ( &PDCHOICE=9)\n      &YPRE=ED\n IF ( &PDCHOICE=10)\n      &YPRE=DT\n IF ( &PDCHOICE=11)\n      &YPRE=C4\n)BODY CMD(ZSPFCMD)\n? Options#                                             &SER\n$&ZTIME &ZJDATE          ***** Job Display Facility *****         &SU\n$ISPF COMMAND    ==>_ZSPFCMD                                   $SCROLL  =>_AMT $\n$BAT,STC,TSU,ALL ==>_Z  $     PREFIX ==>_Z       $OPTN ==>_Z$   RPTSEC  =>_Z$\n   |CPU=&CPU{AFC=&AFC}PAG=&PAG<TPR=&TPR\u00a6UIC=&UIC\u00acMB>&MGB\u00a2TSO=&TSO\n$  &ASID &T   JOB    &EXCPCNT &JOBSTEP STATUS    MEMORY &SW DP  PG &PCPU\n)MODEL\n_Z@Z                                    !Z    @Z\n)INIT\n &PCPU=%1CPU..STEPCPU\n &ASID=ASID\n &JOBSTEP='JES_INIT'\n &T=T\n &EXCPCNT=EXCP_CNT\n &SW=SWP\n &CPUCOL=GREEN\n &AFCCOL=GREEN\n &PAGCOL=GREEN\n &TPRCOL=GREEN\n &UICCOL=GREEN\n &MGBCOL=GREEN\n .ZVARS='(XCMD,ZPRE,ZJS3,XRPT,PIKA,ACTLINE,STAT,ACTLINB)'\n .CURSOR=XCMD\n &AMT=CSR\n .HELP=ZDFC4\n &ZTDMARK = '                      ***** End of EDWA job list *****       '\n IF (&XRPT \u00ac= 0)\n     &ZTDMARK = '** Use attention key to terminate display **'\n IF (&CPU > 0090)\n     &CPUCOL=RED\n IF (&AFC < 0100)\n     &AFCCOL=RED\n IF (&PAG > 0050)\n     &PAGCOL=RED\n IF (&TPR > 0150)\n     &TPRCOL=RED\n IF (&UIC < 0200)\n     &UICCOL=RED\n IF (&MGB < 0151)\n     &MGBCOL=RED\n IF (&ZJS3 = 'J')\n     &ASID=JOB#\n IF (&ZJS3 = 'Q')\n     &JOBSTEP=STEPNAME\n     &EXCPCNT='PROCEDUR'\n     &SW='PIN'\n     &T=C\n IF (&XCMD = 'TSU')\n     &JOBSTEP=LOGNPROC\n IF (&XCMD = 'STC')\n     &JOBSTEP=STEPNAME\n)PROC\n IF (&YCMD \u00ac= &Z)\n     &XCMD=&YCMD\n     &YCMD=&Z\n IF (&YPRE \u00ac= &Z)\n     &ZPRE=&YPRE\n     &YPRE=&Z\n IF (&YJS3 \u00ac= &Z)\n     &ZJS3=&YJS3\n     &YJS3=&Z\n &PTCBTEXT = &XCMD\n IF (&XCMD = &Z)\n     &XCMD=BAT\n VER(&XCMD,NONBLANK,LIST,BAT,TSU,STC,ALL)\n VER(&ZJS3,LIST,0,Q,S,J)\n VER(&XRPT,NONBLANK,LIST,0,2,3,4,5,6,7,8,9)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EDWADAT8": {"ttr": 2570, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01%\\x00\\x00\\x00\\x97\\x06\\x9f\\x00\\x98\\x16\\x1f\\x13\\x18\\x00\\xd6\\x00\\xbe\\x00\\x00\\xe7\\xd6\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.37", "flags": 0, "createdate": "1997-03-10T00:00:00", "modifydate": "1998-06-10T13:18:00", "lines": 214, "newlines": 190, "modlines": 0, "user": "XODMN"}, "text": ")ATTR\n_ TYPE(INPUT)\n@ TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(YELLOW)\n! TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(GREEN)\n$ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n+ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n\u00a2 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(GREEN)\n\u00ac TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&MGBCOL)\n| TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&CPUCOL)\n{ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&AFCCOL)\n} TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&PAGCOL)\n< TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&TPRCOL)\n\u00a6 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&UICCOL)\n? TYPE(AB)\n# TYPE(NT)\n)ABC DESC(Options)\n PDC DESC(Set_display-batch)\n PDC DESC(Set_display-STC)\n PDC DESC(Set_display-TSO)\n PDC DESC(Set_display-ALL)\n PDC DESC(Display_job_class_and_stepinfo)\n PDC DESC(Display_job_numbers{slow})\n PDC DESC(Display_where_cpu_goes)\n PDC DESC(Sort_displayed_data)\n PDC DESC(Set_prefix_to_ED)\n PDC DESC(Set_prefix_to_DT)\n PDC DESC(Set_prefix_to_C4)\n)ABCINIT\n .ZVARS=PDCHOICE\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1,2,3,4,5,6,7,8,9,10,11)\n IF ( &PDCHOICE=1)\n      &YCMD=BAT\n IF ( &PDCHOICE=2)\n      &YCMD=STC\n IF ( &PDCHOICE=3)\n      &YCMD=TSU\n IF ( &PDCHOICE=4)\n      &YCMD=ALL\n IF ( &PDCHOICE=5)\n      &YJS3=Q\n IF ( &PDCHOICE=6)\n      &YJS3=J\n IF ( &PDCHOICE=7)\n      &YCMD=ALL\n      &YJS3=0\n IF ( &PDCHOICE=8)\n      &YJS3=S\n IF ( &PDCHOICE=9)\n      &YPRE=ED\n IF ( &PDCHOICE=10)\n      &YPRE=DT\n IF ( &PDCHOICE=11)\n      &YPRE=C4\n)ABC DESC(JES3)\n PDC DESC(Interact_with_JES3)\n ACTION RUN(TSO) PARM('EDJES3 N')\n)ABCINIT\n .ZVARS=PDCHOICE\n .RESP=ENTER\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1)\n)ABC DESC(Tape)\n PDC DESC(Tape_display)\n ACTION RUN(TSO) PARM('EDTAPE N')\n)ABCINIT\n .ZVARS=PDCHOICE\n .RESP=ENTER\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1)\n)ABC DESC(SP)\n PDC DESC(Staffing_pay)\n ACTION RUN(TSO) PARM('EDADP N')\n)ABCINIT\n .ZVARS=PDCHOICE\n .RESP=ENTER\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1)\n)ABC DESC(Help)\n PDC DESC(Help_on_windows)\n ACTION RUN(TSO) PARM('EXEC ''XODMN.ZDF(WHELP)''   ')\n)ABCINIT\n .ZVARS=PDCHOICE\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1)\n)ABC DESC(TSO2)\n PDC DESC(Storage_packs)\n ACTION RUN(TSO) PARM(STG)\n PDC DESC(Scratch_packs)\n ACTION RUN(TSO) PARM(SCR)\n PDC DESC(Lspace)\n ACTION RUN(TSO) PARM(LSPACE)\n)ABCINIT\n .ZVARS=PDCHOICE\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1,2,3)\n)ABC DESC(TSO1)\n PDC DESC(Show_Adabas_jobs)\n ACTION RUN(TSO) PARM(' EXEC ''XODMN.ZDF(BAWE)''     ')\n PDC DESC(Last_IPL_details)\n ACTION RUN(TSO) PARM(LASTIPL)\n PDC DESC(Enqueue_conflicts)\n ACTION RUN(TSO) PARM(TSOENQ)\n PDC DESC(IO_in-this_session)\n ACTION RUN(TSO) PARM(IO)\n PDC DESC(SMF_status)\n ACTION RUN(TSO) PARM(C4SMFDS)\n PDC DESC(HSM_users)\n ACTION RUN(TSO) PARM(YDF)\n PDC DESC(IO_by_processor)\n ACTION RUN(TSO) PARM(IOMVS)\n PDC DESC(Unit_display)\n ACTION RUN(TSO) PARM(UDF)\n PDC DESC(Amdahl_MDF)\n ACTION RUN(TSO) PARM(' EXEC ''XODMN.ZDF(MDF)''     ')\n PDC DESC(Chpid_display)\n ACTION RUN(TSO) PARM(EDCHP)\n PDC DESC(APF)\n ACTION RUN(TSO) PARM(APFLIST)\n PDC DESC(CSA)\n ACTION RUN(TSO) PARM(CSA)\n PDC DESC(Catalogues)\n ACTION RUN(TSO) PARM(CATDISP)\n PDC DESC(Look_at_memory)\n ACTION RUN(TSO) PARM(LOOK)\n PDC DESC(Look_at_dataset_enqueue)\n ACTION RUN(TSO) PARM(' EXEC ''XODMN.ZDF(UDD)''     ')\n PDC DESC(Generic_dataset_enqueue)\n ACTION RUN(TSO) PARM(' EXEC ''XODMN.ZDF(UDG)''     ')\n PDC DESC(SRM_domains)\n ACTION RUN(TSO) PARM(DDMN)\n PDC DESC(Link_list)\n ACTION RUN(TSO) PARM(LLA)\n)ABCINIT\n .ZVARS=PDCHOICE\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)\n)BODY CMD(ZSPFCMD)\n? Options#? Tape #? TSO1#? TSO2#? JES3#? SP#? Help#    &SER\n$&ZTIME &ZJDATE          ***** Job Display Facility *****         &SU\n$ISPF COMMAND    ==>_ZSPFCMD                                   $SCROLL  =>_AMT $\n$BAT,STC,TSU,ALL ==>_Z  $     PREFIX ==>_Z       $OPTN ==>_Z$   RPTSEC  =>_Z $\n   |CPU=&CPU{AFC=&AFC}PAG=&PAG<TPR=&TPR\u00a6UIC=&UIC\u00acMB>&MGB\u00a2TSO=&TSO\n$  &ASID &T   JOB    &EXCPCNT &JOBSTEP STATUS    MEMORY &SW DP  PG &PCPU\n)MODEL\n_Z@Z                                    !Z    @Z\n)INIT\n &PCPU=%1CPU..STEPCPU\n &ASID=ASID\n &JOBSTEP='JES_INIT'\n &T=T\n &EXCPCNT=EXCP_CNT\n &SW=SWP\n &CPUCOL=GREEN\n &AFCCOL=GREEN\n &PAGCOL=GREEN\n &TPRCOL=GREEN\n &UICCOL=GREEN\n &MGBCOL=GREEN\n .ZVARS='(XCMD,ZPRE,ZJS3,XRPT,PIKA,ACTLINE,STAT,ACTLINB)'\n .CURSOR=XCMD\n &AMT=CSR\n .HELP=ZDFC4\n &ZTDMARK = '                      ***** End of EDWA job list *****       '\n IF (&XRPT \u00ac= 0)\n     &ZTDMARK = '** Use attention key to terminate display **'\n IF (&CPU > 0090)\n     &CPUCOL=RED\n IF (&AFC < 0100)\n     &AFCCOL=RED\n IF (&PAG > 0050)\n     &PAGCOL=RED\n IF (&TPR > 0150)\n     &TPRCOL=RED\n IF (&UIC < 0200)\n     &UICCOL=RED\n IF (&MGB < 0151)\n     &MGBCOL=RED\n IF (&ZJS3 = 'J')\n     &ASID=JOB#\n IF (&ZJS3 = 'Q')\n     &JOBSTEP=STEPNAME\n     &EXCPCNT='PROCEDUR'\n     &SW='PIN'\n     &T=C\n IF (&XCMD = 'TSU')\n     &JOBSTEP=LOGNPROC\n IF (&XCMD = 'STC')\n     &JOBSTEP=STEPNAME\n)PROC\n IF (&YCMD \u00ac= &Z)\n     &XCMD=&YCMD\n     &YCMD=&Z\n IF (&YPRE \u00ac= &Z)\n     &ZPRE=&YPRE\n     &YPRE=&Z\n IF (&YJS3 \u00ac= &Z)\n     &ZJS3=&YJS3\n     &YJS3=&Z\n &PTCBTEXT = &XCMD\n IF (&XCMD = &Z)\n     &XCMD=BAT\n VER(&XCMD,NONBLANK,LIST,BAT,TSU,STC,ALL)\n VER(&ZJS3,LIST,0,1,Q,S,J)\n IF (&XRPT \u00ac= 0)\n  VER(&XRPT,NONBLANK,RANGE,2,99)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IOMVS": {"ttr": 2817, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x08\\x00\\x00\\x00\\x97\\x07\\x1f\\x00\\x98'\\x9f\\x16\\x06\\x00\\x94\\x00a\\x00\\x00\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@\"", "ispf": {"version": "01.08", "flags": 0, "createdate": "1997-03-12T00:00:00", "modifydate": "1998-10-06T16:06:00", "lines": 148, "newlines": 97, "modlines": 0, "user": "XSDMN"}, "text": "//ED115DMM JOB MSGCLASS=X,CLASS=A,NOTIFY=XSDMN\n//  EXEC ASMHCL,PARM.L=('AMODE=31','RMODE=24')\n//C.SYSLIB DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN DD *\nIOMVS    CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         USING *,R15\n         STM   R14,R12,12(R13)\n         LA    R12,SAVE\n         ST    R12,8(R13)\n         ST    R13,SAVE+4\n         LR    R13,R12\n         LR    R12,R15\n         USING IOMVS,R12\n         LINK  EP=KLEAR\n         DROP  R15\n         L     R4,16              CVT\n         USING CVT,R4\n         L     R5,CVTOPCTP       RMCT\n         L     R7,8(R5)           ICT\n         OPEN  (SYSPRINT,OUTPUT)\nNEXTICT  DS   0H\n         MVC   OUT(80),SPACES\n         L     R3,20(R7)      TPI\n         CVD   R3,WORK          CONVERT IT TO DECIMAL.\n         MVC   OUT(8),EDIT8\n         ED    OUT(8),WORK+4       EDIT THE OUTPUT FIELD.\n         CLC   OUT(3),SPACES\n         BE    NXT2\n         L     R3,20(R7)\n         SRL   R3,10            DIV BY 1024\n         CVD   R3,WORK          CONVERT IT TO DECIMAL.\n         ED    OUT(8),WORK+4    EDIT THE OUTPUT FIELD.\n         MVC   OUT+2(6),=X'2020202120D2'   GET READY FOR EDIT.\n         ED    OUT+1(6),WORK+5\nNXT2     L     R3,24(R7)    SLIH\n         CVD   R3,WORK          CONVERT IT TO DECIMAL.\n         MVC   OUT+16(8),EDIT8\n         ED    OUT+16(8),WORK+4    EDIT THE OUTPUT FIELD.\n         CLC   OUT+16(3),SPACES\n         BE    NXT2\n         L     R3,24(R7)\n         SRL   R3,10            DIV BY 1024\n         CVD   R3,WORK          CONVERT IT TO DECIMAL.\n         ED    OUT+16(8),WORK+4    EDIT THE OUTPUT FIELD.\n         MVC   OUT+18(6),=X'2020202120D2'   GET READY FOR EDIT.\n         ED    OUT+17(6),WORK+5\nNOZ      DS    0H\n***********************************\n         LA    1,LABEL15                  GO AMODE 24\n         BSM   0,1\nLABEL15  DS    0H\n***********************************\n         PUT   SYSPRINT,OUT\n         MVC   OUT(80),SPACES\n         PUT   SYSPRINT,OUT\n         MVC   OUT(80),SPACES\n         MVC   OUT(8),=CL8'     CPU'\n         MVC   OUT+16(8),=CL8'    SLIH'\n         PUT   SYSPRINT,OUT\n         MVC   OUT(80),SPACES\n         PUT   SYSPRINT,OUT\n***********************************\n         L     1,LABEL13                  GO AMODE 31\n         BSM   0,1\nLABEL13  DC    A(LABEL14+X'80000000')\nLABEL14  DS    0H\n***********************************\n         L     R5,CVTPCCAT        PCCAVT\n         MVC   OUT(80),SPACES\n         L     R7,0(R5)           PCCA\n         LA    R11,16\n         LA    R10,0\nNEXTPCCA DS    0H\n         MVC   OUT(80),SPACES\n         LR    R3,R10           CPU #\n         CVD   R3,WORK          CONVERT IT TO DECIMAL.\n         MVC   OUT(8),EDIT8\n         ED    OUT(8),WORK+4       EDIT THE OUTPUT FIELD.\n         CLC   0(4,R7),=CL4'PCCA'\n         BNE   NXT2PCCA\n         L     R3,40(R7)      SLIH\n         CVD   R3,WORK          CONVERT IT TO DECIMAL.\n         MVC   OUT+16(8),EDIT8\n         ED    OUT+16(8),WORK+4       EDIT THE OUTPUT FIELD.\n         CLC   OUT+16(3),SPACES\n         BE    NXT2PCCA\n         L     R3,40(R7)\n         SRL   R3,10            DIV BY 1024\n         CVD   R3,WORK          CONVERT IT TO DECIMAL.\n         ED    OUT+16(8),WORK+4    EDIT THE OUTPUT FIELD.\n         MVC   OUT+18(6),=X'2020202120D2'   GET READY FOR EDIT.\n         ED    OUT+17(6),WORK+5\nNXT2PCCA DS    0H\n         LA    R10,1(R10)\n***********************************\n         LA    1,LABEL25                  GO AMODE 24\n         BSM   0,1\nLABEL25  DS    0H\n***********************************\n         PUT   SYSPRINT,OUT\n***********************************\n         L     1,LABEL23                  GO AMODE 31\n         BSM   0,1\nLABEL23  DC    A(LABEL24+X'80000000')\nLABEL24  DS    0H\n***********************************\n         LA    R5,4(R5)\n         L     R7,0(R5)                   POINTS TO PCCA FOR NEXT CPU\n         BCT   R11,NEXTPCCA\nENDJC    DS    0H\n         CLOSE (SYSPRINT)\n         L     R13,4(R13)\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\nSYSPRINT DCB   DSORG=PS,MACRF=(PM),DDNAME=SYSPRINT,LRECL=80,RECFM=FB,  X\n               BLKSIZE=9040\nSAVE     DC    18F'0'\n         LTORG\nSPACES   DC    CL80' '\nZEROS    DC    XL80'00'\nOUT      DS    CL80\nEDIT8    DC    X'4020202020202121'\nWORK     DS    D\n         CVT DSECT=YES,LIST=NO\n         END\n//L.SYSLMOD DD DSN=TEST.PGM.LOAD(IOMVS),DISP=SHR\n//*\n//* EXEC PGM=IOMVS\n//*TEPLIB DD DISP=SHR,DSN=ED115DM.LOAD\n//*YSPRINT DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IOXA": {"ttr": 2821, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x86\\x05\\x1f\\x00\\x980?\\x08P\\x00\\xf0\\x00\\xe1\\x00\\x00\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1986-02-20T00:00:00", "modifydate": "1998-10-30T08:50:00", "lines": 240, "newlines": 225, "modlines": 0, "user": "XSDMN"}, "text": "//ASMI03AW JOB CLASS=Q,\n//        NOTIFY=XSDMN,MSGCLASS=X\n//*\n//ASMHCL  PROC\n//C      EXEC  PGM=IEV90,PARM=OBJECT,REGION=5M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  SYSOUT=B,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))\n//SYSPRINT DD SYSOUT=X,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//L    EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL',REGION=2M,COND=(8,LT,C)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD DD DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(2,1,2)),DSN=&GOSET(GO)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=X,DCB=(RECFM=FB,BLKSIZE=3509)\n//  PEND\n//*\n//*------------------------------------------------------------------*\n//*        INSTALLATION OF TSO COMMAND  ' I O '                      *\n//*------------------------------------------------------------------*\n//IO       EXEC ASMHCL,PARM.L='AMODE=31,RMODE=24'\n//SYSPRINT DD SYSOUT=*\n*          DATA SET TSOIO      AT LEVEL 001 AS OF 12/03/79\n*          DATA SET TSOIO      AT LEVEL 004 AS OF 05/05/73\n         TITLE 'IO - SPNB TCT I/O DISPLAY COMMAND'\n*\n* DISPLAYS NON ZERO I/O COUNTS FROM CALLER'S TCTIOT\n         MACRO\n&N       EDIT  &T\n&N       CVD   R1,DOUBLE\n         MVC   &T,=X'40206B2020206B202120'\n         ED    &T,DOUBLE+4\n         CLC   =A(0),DOUBLE\n         BE    *+10\n         MVC   &T,=CL10' *********'\n         MEND\n         SPACE 2\n         MACRO\n&N       CLEAR &A\n         LCLC  &L\n&L       SETC  'L'''\n&N       MVI   &A,C' '\n         MVC   &A+1(&L&A-1),&A\n         MEND\n         EJECT\nIO       CSECT\n         SAVE  (14,12),T,IO-&SYSDATE-&SYSTIME\n         LR    R12,R15\n         USING IO,R12\n         LA    R15,SAVEAREA\n         ST    R13,4(R15)\n         ST    R15,8(R13)\n         LR    R13,R15\n         LR    R2,R1                    SAVE PARAMETERS\n         SR    R8,R8                    ZERO EXCP TOTAL COUNTER\n         SPACE 1\n* IN THE FOLLOWING CODE:\n*    R2 = A(TCB)\n*    R3 = A(TCT)\n*    R4 = A(TIOT)\n*    R8 = EXCP TOTAL COUNTER\n         SPACE 1\nONLYME   L     R1,16                    FIND CVT\n         L     R1,0(R1)                 FIND DOUBLE WORD\n         L     R2,4(R1)                 FIND TCB\nGOTTCB   L     R3,164(R2)               FIND TCT\n         L     R4,12(R2)                FIND TIOT\n         MVC   L1UID,0(R4)              MOVE IN USERID\n         LTR   R3,R3                    NULL TCT POINTER?\n         BZ    NOTCT\n         L     R1,52(R3)                TPUT COUNT\n         EDIT  L1TPUT\n         L     R1,48(R3)                TGET COUNT\n         EDIT  L1TGET\n         TPUT  LINE1,LLINE1\n         EJECT\n* THIRD AND FOLLOWING LINE PROCESSING\n         SPACE 1\n* IN THE FOLLOWING, R2 = A(TCTIOT)\n*                   R5 = A(DD LOOK UP ENTRY)\n         SPACE 1\n         L     R2,12(R3)                FIND TCTIOT\n         LA    R5,8(R2)                 FIND FIRST LOOK UP ENTRY\n         SPACE 1\nDDLOOP   NI    FLAGS,255-TPUTREQ        TURN OFF TPUT REQUIRED FLG\n         L     R6,0(R5)                 TIOT OFFSET\n         L     R7,4(R5)                 TCT OFFSET\n         LA    R6,0(R4,R6)              R6 = A(TIOT ENTRY)\n         MVC   LNDDNAME,4(R6) MOVE IN DDNAME\n         LA    R7,0(R2,R7)              R7 = A(TCTIOT ENTRY)\n         SR    R6,R6                    COUNTER FOR UCB ENTRIES\n         IC    R6,4(R7)                 SET COUNTER\n         LTR   R6,R6                    ANY UCBS?\n         BZ    SKIPDD                   NO, SKIP THIS ONE\n         SPACE 1\nDDLOOP1  LA    R10,14                   LINE INCREMENT\n         LA    R11,LNAEND               COMPARAND\n         LA    R9,LNAREA                INDEX\nDDLOOP2  L     R1,8(R7)                 LOAD EXCPS\n         LTR   R1,R1 .                  ZERO?\n         BZ    SKIPUCB .                YA, SKIP THIS ONE\n         AR    R8,R1                    ADD TO EXCP ACCUM.\n         OI    FLAGS,TPUTREQ            TURN ON TPUT REQUIRED FLG\n         EDIT  0(10,R9)\n         MVI   10(R9),C'/'\n         L     R1,0(R7)                 UCB ADDR\n         MVC   11(3,R9),13(R1)          MOVE IN ADDRESS\nSKIPUCB  BCT   R6,NEXTDEV .             ANOTHER UCB?\n         B     NEXTDD .                 NO, TPUT LINE\nNEXTDEV  LA    R7,8(R7)                 MOVE TO NEXT TCTIOT ENTRY\n         BXLE  R9,R10,DDLOOP2 .         LOOP 4 NEXT DEV\n         SPACE 1\n         TM    FLAGS,LINE2PUT           WAS THE HEADER TPUT?\n         BO    DONT1                    YA, DON'T DO IT AGAIN\n         TPUT  LINE2,LLINE2             ELSE DO IT\n         OI    FLAGS,LINE2PUT           AND SET FLAG\n         SPACE 1\nDONT1    TPUT  LINEN,LLINEN .           FOR TO  MANY FOR 1 LINE\n         CLEAR LINEN\n         B     DDLOOP1\n         SPACE 1\nNEXTDD   TM    FLAGS,TPUTREQ            SEE IF ANYTHING TO PUT\n         BZ    SKIPDD\n         SPACE 1\n         TM    FLAGS,LINE2PUT           HEADER OUTPUT?\n         BO    DONT2                    YA, DON'T REPEAT\n         TPUT  LINE2,LLINE2             ELSE TPUT IT\n         OI    FLAGS,LINE2PUT           AND SET FLAG\n         SPACE 1\nDONT2    TPUT  LINEN,LLINEN\nSKIPDD   CLEAR LINEN\n         LA    R5,8(R5) NEXT DD LOOK UP TAB ENTRY\n         CLC   =A(0),0(R5)              E-O TABLE?\n         BNE   DDLOOP\n         MVC   LINEN(8),=CL8'TOTAL:'    LIST TOTALS\n         LR    R1,R8\n         EDIT  LNAREA(10)\n         TPUT  LINEN,LLINEN\nEXIT     L     R13,4(R13)               BACK UP ONE SA\n         RETURN (14,12),T,RC=0\n         SPACE 1\nNOTCT    MVC   NOTCTM(8),L1UID          MOVE IN JOBNAME\n         TPUT  NOTCTM,L'NOTCTM          TELL CALLER\n         LA    R4,R4                    CHECK TIOT POINTER\n         LTR   R4,R4\n         BNZ   TIOTOK\n         TPUT  NTIOTM,L'NTIOTM\n         B     EXIT\nTIOTOK   TPUT  NTHEADER,L'NTHEADER\n         SPACE 1\n* REGISTER USAGE IS AS FOLLOWS:\n*   R3 = OUTPUT LINE SCAN POINTER\n*   R4 = TIOT ENTRY POINTER\n*   R5 = LENGTH OF CURRENT TIOT ENTRY\n*   R6 = UCB COUNTER\n*   R7 = UCB POINTER\n*   R8 = OUTPUT LINE SCAN BXLE INCREMENT (4)\n*   R9 = OUTPUT LINE SCAN BXLE COMPARAND\n*\n         SPACE 1\n         LA    R4,24(R4)                MOVE TO FIRST ENTRY\nELOOP    SR    R5,R5                    ZERO COUNTERS\n         SR    R6,R6\n         IC    R5,0(R4) .               LENGTH OF TIOT ENTRY\n         IC    R6,2(R4) .               NO. OF UCBS\n         CLEAR NTLINE\n         MVC   NTLINE(8),4(R4)          MOVE IN DDNAME\n         LA    R8,4                     BXLE INCREMENT\n         LA    R9,NTLINE+L'NTLINE-4     END OF NTLINE\n         LA    R3,NTLINE+10             START OF UNIT LIST\n         LTR   R6,R6                    ANY UCBS?\n         BZ    NTPUT\n         LA    R7,16(R4)                1ST UCB POINTER\n         B     NTLOOP1\nNTLOOP   MVI   3(R3),C','\n         BXLE  R3,R8,NTLOOP1\n         TPUT  NTLINE,L'NTLINE\n         CLEAR NTLINE\n         LA    R3,NTLINE+8\n         SPACE 1\nNTLOOP1  LH    R1,0(R7)                 FIND UCB\n         MVC   0(3,R3),13(R1)           MOVE IN UNIT NAME\n         LA    R7,4(R7)                 BUMP TO NEXT UCB ENTRY\n         BCT   R6,NTLOOP\nNTPUT   TPUT  NTLINE,L'NTLINE\n         AR    R4,R5                    MOVE TO NEXT ENTRY\n         CLI   0(R4),0                  END OF TIOT?\n         BE    EXIT\n         BNE   ELOOP\n         TITLE 'IO - CONSTANTS AND WORK AREAS '\nSAVEAREA DC    18F'0'\nLINE1    DC    C'  I/O SUMMARY FOR USER: '\nL1UID    DC    CL8' '\n         DC    C'    TPUTS:'\nL1TPUT   DC    CL10' '\n         DC    C'    TGETS:'\nL1TGET   DC    CL10' '\nLLINE1   EQU   *-LINE1\n         SPACE 1\nLINE2    DC    C'DDNAME       EXCPS/UNIT             '\nLLINE2   EQU   *-LINE2\n         SPACE 2\nLINEN    DS    0CL80\nLNDDNAME DC    CL8' '\nLNAREA   DC    CL72' '\nLNAEND   EQU   *-14\nLLINEN   EQU   *-LINEN\nDOUBLE   DS    D\n         SPACE 1\nFLAGS    DC    F'0'                     WORK FLAGS\nTPUTREQ  EQU   X'80'\nLINE2PUT EQU   X'40'                    HEADER LINE WAS TPUT\nNTLINE   DC    CL80' '\nNTHEADER DC    C'DDNAME   UNIT(S)'\nNOTCTM   DC    C'XXXXXXXX - HAS NO TASK TIMING TABLE.'\nNTIOTM   DC    C'      NOR HAS IT A TASK INPUT OUTPUT TABLE.'\n         SPACE\n         LTORG\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   IO\n//L.SYSLMOD DD DSN=TEST.PGM.LOAD(IO),DISP=SHR\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JESDATAB": {"ttr": 2826, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x019\\x00\\x00\\x00\\x95\\x19\\x9f\\x00\\x97%O\\x08\\x01\\x00O\\x00\\x1d\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.57", "flags": 0, "createdate": "1995-07-18T00:00:00", "modifydate": "1997-09-11T08:01:00", "lines": 79, "newlines": 29, "modlines": 0, "user": "ED115DM"}, "text": ")ATTR\n_ TYPE(INPUT)\n@ TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(YELLOW)\n! TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(GREEN)\n$ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n+ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n\u00a2 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(GREEN)\n? TYPE(AB)\n# TYPE(NT)\n)ABC DESC(Help)\n PDC DESC(Operator_action)\n PDC DESC(Allocate_queue{jobs_waiting_to_run})\n PDC DESC(Allocate_queue_for_numbered_job)\n PDC DESC(Verify_queue{jobs_waiting_tape_mount})\n PDC DESC(Initiators)\n PDC DESC(Active_DSPs)\n PDC DESC(Spool_status)\n PDC DESC(No_hold_local_output)\n PDC DESC(No_hold_anylocal_output)\n PDC DESC(Impact_printer_003)\n PDC DESC(Laser_20C)\n PDC DESC(Laser_20D)\n PDC DESC(Release_a_job_from_hold)\n PDC DESC(Terminate_this)\n PDC DESC(Cancel_a_JES_net)\n)ABCINIT\n .ZVARS=PDCHOICE\n &PDCHOICE=''\n)ABCPROC\n VER(&PDCHOICE,LIST,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)\n IF ( &PDCHOICE=1 )\n      &YCMD='I R S'\n IF ( &PDCHOICE=2 )\n      &YCMD='I S A'\n IF ( &PDCHOICE=3 )\n      &YCMD='I S A J=9999'\n IF ( &PDCHOICE=4 )\n      &YCMD='I S V'\n IF ( &PDCHOICE=5 )\n      &YCMD='I G C4#3 C'\n IF ( &PDCHOICE=6 )\n      &YCMD='I A D=ALL'\n IF ( &PDCHOICE=7 )\n      &YCMD='I Q S'\n IF ( &PDCHOICE=8 )\n      &YCMD='I U CL=? H=N D=LOCAL'\n IF ( &PDCHOICE=9 )\n      &YCMD='I U CL=? H=N D=ANYLOCAL'\n IF ( &PDCHOICE=10)\n      &YCMD='I D D=003'\n IF ( &PDCHOICE=11)\n      &YCMD='I D D=20C'\n IF ( &PDCHOICE=12)\n      &YCMD='I D D=20D'\n IF ( &PDCHOICE=13)\n      &YCMD='F J=???? R'\n IF ( &PDCHOICE=14)\n      &YCMD=END\n IF ( &PDCHOICE=15)\n      &YCMD='F N ID=???????? C'\n)BODY\n? Help#\n$&ZTIME &ZJDATE        *********** JES3 ISPF Console **********\n$ISPF COMMAND ==>_ZCMD                                                        $\n$JES3 COMMAND ==>_Z                                                           $\n$------------- Jes3 replys (latest at top of table, with * input) -------------$\n)MODEL\n@Z\n)INIT\n .ZVARS='(JCMD,ACTLINE)'\n .CURSOR=JCMD\n &AMT=CSR\n)REINIT\n)PROC\n &PTCBTEXT = &ZCMD\n IF (&YCMD \u00ac= &Z)\n     &JCMD=&YCMD\n     &YCMD=&Z\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "J3": {"ttr": 2829, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95%O\\x00\\x95%O\\x14D\\x00\\x03\\x00\\x03\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-09-11T00:00:00", "modifydate": "1995-09-11T14:44:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "ED115DM"}, "text": "PROC 1 CHOICE\nIF &CHOICE = &STR(1) &JCMD=&STR(I R S)\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LASTIPL": {"ttr": 2831, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x05\\x00\\x00\\x00\\x98\\x16\\x1f\\x00\\x99\\x12?\\x14E\\x01*\\x01'\\x00\\x00\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@\"", "ispf": {"version": "01.05", "flags": 0, "createdate": "1998-06-10T00:00:00", "modifydate": "1999-05-03T14:45:00", "lines": 298, "newlines": 295, "modlines": 0, "user": "XSDMN"}, "text": "//XODMNLIP JOB MSGCLASS=X,CLASS=B,NOTIFY=XSDMN\n//*\n//ASMHCL  PROC\n//C      EXEC  PGM=IEV90,PARM=OBJECT,REGION=5M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  SYSOUT=B,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))\n//SYSPRINT DD SYSOUT=X,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//L    EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL',REGION=2M,COND=(8,LT,C)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD DD DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(2,1,2)),DSN=&GOSET(GO)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=X,DCB=(RECFM=FB,BLKSIZE=3509)\n//  PEND\n//*\n//  EXEC ASMHCL\n//C.SYSIN DD *\n         TITLE '   L A S T I P L   '\n***********************************************************************\n*                                                                     *\n*         'LASTIPL' TSO COMMAND                                       *\n*                                                                     *\n***********************************************************************\n         SPACE\n*        WRITTEN BY. BILL GODFREY, PRC (PLANNING RESEARCH CORPORATION).\n*        DATE WRITTEN. JANUARY 18 1982.\n*        DATE UPDATED. MARCH 2 1982.\n*        ATTRIBUTES. RE-ENTRANT.\n*        DESCRIPTION.\n*         THIS TSO COMMAND DISPLAYS THE DATE AND TIME OF THE LAST IPL\n*         ON THE TERMINAL.\n*         DEPENDENCY - WORKS ONLY ON MVS/SE2 OR MVS/SP (IN OTHER WORDS,\n*         MVS SYSTEMS IN WHICH SMF IS RECORDED ON VSAM DATA SETS).\n         SPACE\nLASTIPL  CSECT\n         USING *,R10\n         B     @PROLOG-*(,R15)\n         DC    AL1(11),CL11'LASTIPL'\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(0),AL3(@DATAL)\n@PROLOG  STM   14,12,12(R13)\n         LR    R10,R15\n         LR    R2,R1\n         USING CPPL,R2\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         LR    R9,R1\n         USING @DATA,R9\n         ST    R13,4(,R9)\n         ST    R9,8(,R13)\n         LR    R13,R9\n         SPACE\n         MVC   PUTPTPB(12),MODEL\n         SPACE\n         LA    R15,PUTIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R1,ECB\n         ST    R1,IOPLECB\n         SR    R0,R0\n         ST    R0,ECB\n         DROP  R15                 IOPL\n*----------------------------------------------------------------------\n*\n*        SCAN THE UCBS TO FIND THE IPL VOLUME\n*\n         MVC   IPLVOL,BLANKS       CLEAR VOLUME NAME\n         MVC   IPLUNIT,BLANKS      CLEAR UNIT ADDRESS\n         XC    SCNWORK,SCNWORK     CLEAR 100-BYTE IOSVSUCB WORK AREA\n         MVI   SCNTYPE,UCB3DACC    SET DEVICE TYPE OF DASD\n         XC    SCNADDR,SCNADDR     CLEAR UCB ADDRESS RETURN AREA\n         LA    R0,SCNWORK          BUILD IOSVSUCB PARMLIST\n         ST    R0,SCNPRM1          ..\n         LA    R0,SCNTYPE          ..\n         ST    R0,SCNPRM2          ..\n         LA    R0,SCNADDR          ..\n         ST    R0,SCNPRM3          ..\n         OI    SCNPRM3,X'80'       SET END-OF-LIST INDICATOR\n*\n*CBLOOP  LA    R1,SCNPRML          GET ADDRESS OF IOSVSUCB PARMLIST\n*        L     R15,CVTPTR          GET CVT PTR\n*        L     R15,CVTUCBSC-CVT(,R15)  GET UCB SCAN SERVICE RTN ADDRESS\n*        BALR  R14,R15             GO GET A UCB ADDRESS\n*        LTR   R15,R15             DID WE GET A UCB ADDRESS?...\n*        BNZ   UCBEND              ...NO, WE'VE SEEN THEM ALL\nUCBLOOP  UCBSCAN COPY,WORKAREA=SCNWORK,UCBAREA=UCBAREA,RANGE=ALL,      1\n               DYNAMIC=YES,DEVCLASS=DASD,RETCODE=RET,RSNCODE=RSN\n         L     R2,RET\n         LTR   R2,R2\n         BNZ   UCBEND\n         LA    R1,UCBAREA          GET THE UCB ADDRESS\n         USING UCBCMSEG,R1         MAKE IT ADDRESSABLE\n         TM    UCBSTAT,UCBSYSR     IS THIS THE SYSRES?...\n         BZ    UCBLOOP             ...NO, KEEP HUNTING\n         MVC   IPLVOL,UCBVOLI      COPY THE VOLUME SERIAL NUMBER\n         MVC   IPLUNIT,UCBNAME     COPY THE UNIT ADDRESS\n         DROP  R1                  DROP UCB ADDRESSABILITY\nUCBEND   DS    0H\n*----------------------------------------------------------------------\n         L     R15,16              CVTPTR\n         L     R2,196(,R15)        CVTSMCA\n         LA    R3,340(,R2)         SMCAIDTE   IPL DATE\n         LA    R4,336(,R2)         SMCAITME   IPL TIME\n         MVC   JULDATE,JULPATT\n         ED    JULDATE,1(R3)\n         BAL   R8,DATECONV\n         MVI   MESSAGE,C' '\n         MVC   MESSAGE+1(MESSLEN-1),MESSAGE\n         MVC   MESSAGE(15),=C'LAST IPL WAS ON'\n         LA    R15,MESSAGE+16\n         MVC   MESSAGE+16(9),PARM3+20  DAY OF WEEK\n         LA    R15,MESSAGE+25\nBACK1    CLI   0(R15),C' '\n         BNE   *+8\n         BCT   R15,BACK1\n         LA    R15,2(,R15)\n         MVC   0(20,R15),PARM3     MONTH DAY YEAR\n         LA    R15,20(,R15)\nBACK2    CLI   0(R15),C' '\n         BNE   *+8\n         BCT   R15,BACK2\n         LA    R15,2(,R15)\n         MVI   0(R15),C'('\n         MVC   1(6,R15),JULDATE+1  JULIAN DATE\n         MVI   7(R15),C')'\n         LA    R15,9(,R15)\n         MVC   0(2,R15),=C'AT'\n         LA    R15,3(,R15)         POINT TO WHERE HH.MM WILL GO\n         L     R1,0(,R4)\n         SLR   R0,R0\n         D     R0,=F'360000'\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  0(2,R15),DOUBLE+6(2)\n         LR    R1,R0\n         SLR   R0,R0\n         D     R0,=F'6000'\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  3(2,R15),DOUBLE+6(2)\n         MVI   2(R15),C'.'\n         LA    R15,5(,R15)\n         SPACE\n*----------------------------------------------------------------------\n         CLI   IPLVOL,C' '         DID WE FIND THE SYSRES?...\n         BE    NOSYSRES            ...NO\n*                              1234567890123456789\n         MVC   0(20,R15),=CL20' FROM VVVVVV (XXX) '\n         MVC   6(6,R15),IPLVOL\n         MVC   14(3,R15),IPLUNIT\n         LA    R15,20(,R15)        ACCOUNT FOR NEW MSG TEXT\nNOSYSRES DS    0H\n*----------------------------------------------------------------------\n         SPACE\n         LA    R1,MESSAGE\n         LA    R0,4(,R15)\n         SR    R0,R1               COMPUTE LENGTH PLUS 4\n         SPACE\n         SLL   R0,16\n         ST    R0,PUTSEG\n         SPACE\n         PUTLINE PARM=PUTPTPB,OUTPUT=(PUTSEG,DATA),MF=(E,PUTIOPL)\n         SPACE\n         SLR   R15,R15\nEXIT     LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         FREEMAIN R,LV=(0),A=(1)\n         LR    R15,R2\n         LM    0,12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n         SPACE\n***********************************************************************\n*                                                                     *\n*         DATE CONVERSION                                             *\n*                                                                     *\n***********************************************************************\n         SPACE\nDATECONV LA    R1,3\n         ST    R1,PARM2\n         MVC   PARM1(4),0(R3)\n         LA    R1,16+128\n         ST    R1,PARM4\n         LA    R1,PARMPTRS\n         LA    R14,PARM1\n         ST    R14,0(,R1)\n         LA    R14,PARM2\n         ST    R14,4(,R1)\n         LA    R14,PARM3\n         ST    R14,8(,R1)\n         LA    R14,PARM4\n         ST    R14,12(,R1)\n         LA    R14,PARM5\n         ST    R14,16(,R1)\n         L     R15,=V(JULSUB)\n*        BALR  R14,R15\n         BR    R8\n         SPACE\n***********************************************************************\n*                                                                     *\n*        CONSTANTS                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\n         SPACE\nMODEL    PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\nMODELL   EQU   *-MODEL\n         SPACE\nJULPATT  DC    X'4020204B202020'\n         DC    0D'0'\n         SPACE\nBLANKS   DC    CL16' '\n         SPACE\n***********************************************************************\n*                                                                     *\n*        DSECT                                                        *\n*                                                                     *\n***********************************************************************\n         SPACE\n@DATA    DSECT\nSAVEAREA DS    18F\nDOUBLE   DS    D\nPUTIOPL  DS    4F\nPUTPTPB  DS    3F\nECB      DS    F\nPUTSEG   DS    F\nMESSAGE  DS    C'LAST IPL WAS ON '\n         DS    C'WEDNESDAY '\n         DS    C'SEPTEMBER 10 1981 '\n         DS    C'(YY.DDD) '\n         DS    C'AT '\n         DS    C'HH.MM'\nMESSLEN  EQU   *-MESSAGE\n         DS    0D\nPARMPTRS DS    5F\nPARM1    DS    F\nPARM2    DS    F\nPARM4    DS    F\nPARM3    DS    CL32\nPARM5    DS    32D\nJULDATE  DS    CL7\n*----------------------------------------------------------------------\nIPLVOL   DS    CL6                 VOLSER OF SYSRES\nIPLUNIT  DS    CL3                 UNIT ADDRESS OF SYSRES\nSCNPRML  DS    0A                  IOSVSUCB PARMLIST\nSCNPRM1  DS    A                   PTR TO 100-BYTE WORK AREA\nSCNPRM2  DS    A                   PTR TO DEVICE CLASS FOR SEARCH\nSCNPRM3  DS    A                   PTR TO UCB ADDRESS RETURN AREA\n         DS    0D                  ALIGN ON DOUBLEWORD BOUNDARY\nSCNWORK  DC    XL100'00'           IOSVSUCB WORKAREA\nUCBAREA  DC    XL50'00'\nSCNADDR  DS    A                   RETURN AREA FOR UCB ADDRESS\nSCNTYPE  DS    X                   DEVICE CLASS (X'20' FOR DASD)\nRET      DC    F'0'\nRSN      DC    F'0'\n*----------------------------------------------------------------------\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\n         IKJCPPL\n         SPACE\n         IKJIOPL\n         SPACE\n         PRINT NOGEN\n         DSECT\n         IEFUCBOB\n         SPACE\n         CVT   DSECT=YES\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n//*.SYSLIB  DD DISP=SHR,DSN=XSDMN.PROD.LKED\n//L.SYSLMOD DD DISP=SHR,DSN=TEST.PGM.LOAD\n//L.SYSIN DD *\n NAME LASTIPL(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LLA": {"ttr": 3078, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x97\\x19\\x7f\\x00\\x980\\x1f\\x12I\\x00C\\x00;\\x00\\x00\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1997-07-16T00:00:00", "modifydate": "1998-10-28T12:49:00", "lines": 67, "newlines": 59, "modlines": 0, "user": "XSDMN"}, "text": "//ED115DMM JOB MSGCLASS=X,CLASS=Q,NOTIFY=XSDMN\n// EXEC ASMHCL\n//C.SYSIN DD *\nLLA      CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         USING *,R15\n         STM   R14,R12,12(R13)\n         LA    R12,SAVE\n         ST    R12,8(R13)\n         ST    R13,SAVE+4\n         LR    R13,R12\n         LR    R12,R15\n         USING LLA,R12\n         DROP  R15\n         L     R4,16\n         USING CVT,R4\n         OPEN  (SYSPRINT,OUTPUT)\n         MVC   OUT(79),SPACES\n         L     R2,CVTLLTA          LLT\n         L     R3,4(R2)            ENTRIES IN TABLE\n         LA    R2,8(R2)\nNXTLLE   MVC   OUT(44),1(R2)\n***********************************\n         LA    1,LABEL15                  GO AMODE 24\n         BSM   0,1\nLABEL15  DS    0H\n***********************************\n         PUT   SYSPRINT,OUT\n***********************************\n         L     1,LABEL13                  GO AMODE 31\n         BSM   0,1\nLABEL13  DC    A(LABEL14+X'80000000')\nLABEL14  DS    0H\n***********************************\n         LA    R2,45(R2)\n         BCT   R3,NXTLLE\nENDJC    DS    0H\n         CLOSE (SYSPRINT)\n         L     R13,4(R13)\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\nOUT      DS    CL79\nSPACES   DC    CL80' '\nSYSPRINT DCB   DSORG=PS,MACRF=(PM),DDNAME=SYSPRINT,LRECL=79,RECFM=FB,  X\n               BLKSIZE=790\nSAVE     DC    19F'0'\n         CVT DSECT=YES,LIST=NO\n         LTORG\n         END\n//*KED.SYSLMOD DD DSN=SYS1.MISC.LINKLIB(LLA),DISP=SHR\n//L.SYSLMOD DD DSN=TEST.PGM.LOAD(LLA),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOOK": {"ttr": 3080, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00\\x00\\x00\\x89\\x08\\x8f\\x00\\x980\\x1f\\x12@\\x06\\xc8\\x06\\xac\\x00\\x00\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "1989-03-29T00:00:00", "modifydate": "1998-10-28T12:40:00", "lines": 1736, "newlines": 1708, "modlines": 0, "user": "XSDMN"}, "text": "//SALBERTK JOB CLASS=B,MSGCLASS=X,NOTIFY=XSDMN\n//*\n//*\n//ASMHCL  PROC\n//C      EXEC  PGM=IEV90,PARM=OBJECT,REGION=5M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  SYSOUT=B,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))\n//SYSPRINT DD SYSOUT=X,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//L    EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL',REGION=2M,COND=(8,LT,C)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD DD DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(2,1,2)),DSN=&GOSET(GO)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=X,DCB=(RECFM=FB,BLKSIZE=3509)\n//  PEND\n//*\n//LOOK    EXEC ASMHCL\n//C.SYSLIB DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.MODGEN,DISP=SHR\n//C.SYSIN DD *\n         TITLE 'LOOK --  STORAGE ALTER/DISPLAY'\n*\n**\n**       THIS VERSION OF LOOK SUPPORTS MULTIPLE ADDRESS SPACE\n**       INVESTIGATION.\n**\n**       THIS VERSION DOES NOT YET SUPPORT ALTER CAPABILITY\n**\n**       THIS VERSION IS CONFIGURED TO RUN AND RESIDE ABOVE THE LINE\n**\n*\n         MACRO\n&N       HEX   &TO,&FROM\n&N       UNPK  TEMP1(9),&FROM.(5,R6)\n         MVC   &TO.(8,R4),TEMP1\n         TR    &TO.(8,R4),HEXTAB\n         MEND\nLOOK     CSECT\nLOOK     AMODE 31\nLOOK     RMODE ANY\n*  INITIALIZE THE PROGRAM\n         SAVE  (14,12)\n         LR    R11,R15                 PERMANENT BASE\n         USING LOOK,R11\n         LA    R9,2048(R11)            GET A SECOND BASE REG\n         LA    R9,2048(R9)\n         USING LOOK+4096,R9\n         L     R1,16(0)             GET THE CVT\n         L     R1,0(R1)             SHIFT REG ONCE AGAIN\n         L     R1,4(R1)             GET THE CURRENT TCB\n         L     R1,12(R1)            GET TCB + 12 TIOT ADDRESS\n         CLC   0(5,R1),=C'XSDMN'\n         BNE   ENDIT3\n         GETMAIN R,LV=WORKLEN,SP=1,LOC=(BELOW,ANY)          XA\n         LR    R10,R1\n         LR    R2,R10                  WORK AREA START\n         L     R3,=A(WORKLEN)          LENGTH TO CLEAR\n         SR    R5,R5                   ZERO PAD BYTE, LENGTH 2\n         MVCL  R2,R4                   CLEAR THE WORK AREA\n         USING WORKAREA,R10\n         LA    R4,QDINIT\n         LA    R3,QDISPLN              GET LENGTH\n         LA    R2,QDISPLAY             POINT AT START\n         LR    R5,R3                   SET FROM LENGTH\n         MVCL  R2,R4                   INIT DISPLAY\n         ST    R13,SAVE+4              CHAIN THE SAVE AREAS\n         LA    R15,SAVE\n         ST    R15,8(R13)\n         LR    R13,R15                 NEW SAVE AREA\n         STM   R9,R11,BASE1        SAVE FIRST THREE REGS FOR AREA\n         ST    R13,BASR13          AND ORIGINAL R13\n         LA    R1,50*HISTLEN           GET LENGTH OF HIST TBL\n         GETMAIN R,SP=2,LV=(1)\n         ST    R1,HISTORY              SAVE ADDRESS\n         STFSMODE ON,INITIAL=YES       TELL TSO WE ARE FULLSCREEN\n*\n*        SET SUPERVISOR MODE IF AUTHORIZED\n*\n         OI    FLAGS,NOAUTH            SET NOT AUTHORIZED\n         L     R1,=A(WORKLN)           GET LENGTH OF CAS BUFFER\n         ST    R1,CSALEN               SET LENGTH AND SP0\n         TESTAUTH FCTN=1               ARE WE AUTHORIZED\n         LTR   R15,R15\n         BNZ   NOTAUTH                 IF NOT SKIP CODE\n         MVI   CSALEN,241              SET CSA SP\n         NI    FLAGS,255-NOAUTH        MARK AUTHORIZED\n         MODESET MODE=SUP              SET TO SUP MODE\nNOTAUTH  DS    0H\n*\n*        SETUP ESTAE IN CORRECT MODE\n*\n         ESTAE EREXIT,PARAM=(R10),MF=(E,ESTAE)\n*\n*        INITIALIZE ASID POINTERS\n*\n         MVC   ASIDLN,ASIDFMT          SET MESSAGE\n         L     R1,16                   GET CVT\n         L     R2,0(R1)                GET TCBWORDS\n         L     R1,12(R2)               GET OLD ASCB ADDR (MINE)\n         USING ASCB,R1\n         MVC   MYASID,ASCBASID         MOVE IN MY ASID\n         MVC   CURASID,MYASID\n         DROP  R1\n         XC    CSAASID,CSAASID         CLEAR THE CSA BUFFER INDIC\n         XC    CSASTAR,CSASTAR\n         XC    CSAEND,CSAEND\n         L     R0,CSALEN               GET LENGTH AND SP FOR CSA BUFFER\n         GETMAIN R,LV=(0)\n         ST    R1,CSAWORK              SAVE ADDR OF CSA BUFFER\n         LR    R8,R1                   SET PROPER POINTER\n         USING WORK,R8\n         MVC   MYTCB,4(R2)             SAVE ADDR OF MY TCB\n         MVC   MYASCB,12(R2)           SAVE ADDR OF MY ASCB\n         LA    R1,BUF                  POINT TO TRUE BUFFER\n         ST    R1,CSABUF\n         LA    R0,SRBCCD               POINT TO CSA SRB CODE AREA\n         LA    R1,SRBCODE              AND LENGTH OF CODE\n         LR    R3,R1\n         LA    R2,D#SRBCD              POINT TO CSECT CODE\n         MVCL  R0,R2                   MOVE SRB CODE TO CSA\n         B     ISCAN1                  GO AND PROCESS\n         DROP  R8\n         EJECT\n***********************************************************************\n*\n*   INPUT SCAN\n*\n***********************************************************************\n         SPACE 2\nISCAN    CLC   SAVEASID,ASIDLN1        DID USER CHANGE ASID\n         BE    ISCAN1                  NOPE\n*\n*        FORMAT AND SAVE USER ASID\n*\n         MVC   TEMP1(4),ASIDLN1        GET USER INFO\n         OC    TEMP1(4),=CL4' '        MAKE UPPER CASE\n         TR    TEMP1(4),HEXTAB         MAKE PACKABLE\n         PACK  TEMP2(3),TEMP1(5)\n         MVC   CURASID,TEMP2           GET NEW ASID\nISCAN1   MVC   INPSAVE,INPLINE         SAVE LAST USER INPUT\nISCAN2   LA    R3,INPLINE              POINT TO START OF INPUT\n         LA    R1,SCANTAB              COMMAND TABLE\n         NI    FLAGS,255-INDFLAG-IND31 TURN OFF INDIRECT FLAG\n         MVC   MSGLINE,TITLE           CLEAR OUT ERROR MSG\nSCANLOOP L     R2,4(R1)                GET TABLE ENTRY\n         CLC   0(1,R1),ENDTAB          SEE IF END OF TABLE\n         BE    NUMSCAN                 IF YES, ASSUME NUMERIC INPUT\n         CLC   0(1,R1),INPLINE         SEE IF COMMAND FOUND\n         BER   R2                      IF YES, GO TO COMM ROUINE\n         LA    R1,8(R1)                NEXT ENTRY ADDRESS\n         B     SCANLOOP\nSCANTAB  DS    0F                      COMMAND TABLE\n         DC    CL4' ',A(FORMAT)\n         DC    CL4'I',A(INDIR)\n         DC    CL4'J',A(INDIR31)\n         DC    CL4'>',A(FWD)\n         DC    CL4'<',A(BACK)\n         DC    CL4'=',A(DEFINE)\n         DC    CL4',',A(NUMSCAN)\n         DC    CL4'M',A(MODE)\n         DC    CL4'L',A(LINK)\n         DC    CL4'O',A(OVERLAY)\n         DC    CL4'R',A(REFRESH)\nENDTAB   DC    X'FF'                   END OF TABLE INDICATOR\n         SPACE 2\n***********************************************************************\n*\n*     FORMAT THE OUTPUT SCREEN\n*\n***********************************************************************\n         SPACE 2\nFORMAT   LA    R3,INPLINE              CURSOR ADDRESS\n         MVC   INPLINE,BLANKS          CLEAR INPUT LINE\nFORMAT2  BAL   R14,ERASE               CLEAR THE SCREEN\n         LH    R2,CURRENT              HISTORY TABLE POINTER\n         A     R2,HISTORY              POINT AT HISTORY TABLE ENTRY\n         USING HIST,R2                 IDENTIFY HISTORY ENTRY FORMAT\n         L     R4,HISTADDR             GET ADDRESS TO DISPLAY\n         TM    HISTCBHP,X'80'          IS THIS A CB MAP IN USE\n         BO    CBHIT                   IF SO THE PROCESS IT\n         CLC   =X'7FFFFFFF',HISTCBHP   SUPPRESSED CB USAGE\n         BE    NOCB\n         DROP  R2\n         SPACE 2\n*----------------------------------------------------------------------\n*\n*        SEE IF CONTROL BLOCK MAP EXISTS\n*\n*----------------------------------------------------------------------\n         SPACE 2\nDUMP     L     R5,=V(CBMACS)           GET START OF INDEX\n         LTR   R5,R5                   ANY VALUE\n         BZ    NOCB                    NOPE\n         USING CBH,R5                  ADDRESS THE CONTROL BLK HEADER\nDUMPCB   CLC   =F'0',CBHNEXT           SEE IF END OF INDEX\n         BE    NOCB                    IF YES, NO CB FOUND\n         L     R2,CBHVOFF              GET CB IDENTIFIER OFFSET\n         AR    R2,R4                   ADD DISPLAY ADDRESS\n         SR    R3,R3                   CLEAR A REGISTER FOR IC\n         IC    R3,CBHVLEN              GET LENGTH\n         LR    R0,R3                   PUT IN 0 FOR GETSTOR\n         LA    R1,DUMPDATA             TARGET ADDR\n         BAL   R14,GETSTOR             FETCH THE DATA\n         B     NOTCB                   BR IF NO DATA FOUND\n         B     NOTCB                   BR IF PARTIAL DATA FOUND\n         BCTR  R3,0                    GET MACHINE LENGTH\n         EX    R3,CBFNDIT              LOOK FOR VALIDATION FIELD\n         BE    CBHIT                   BR IF YES, CB WAS FOUND\nNOTCB    L     R5,CBHNEXT              NEXT INDEX ENTRY\n         B     DUMPCB                  AND CHECK FOR MORE CB'S\nCBFNDIT  CLC   CBHVAL(*-*),DUMPDATA    SEE IF IDENTIFIER MATCH\n         DROP  R5\n         SPACE 2\n*----------------------------------------------------------------------\n*\n* IF NO CONTROL BLOCK TO BE SHOWN, JUST USE DUMP FORMAT\n*\n*----------------------------------------------------------------------\n         SPACE 2\nNOCB     LR    R2,R4                   COPY ADDR TO DISPLAY\n         TM    MODEFLAG,ALIGN          QUADWORD ALIGNMENT WANTED\n         BZ    DUMPNOA                 BR IF NOT\n         N     R2,=XL4'FFFFFFF0'       ROUND DOWN FOR DISPLAY\nDUMPNOA  TM    MODEFLAG,MIDDUMP        PUT ADDR INCENTER OF SCREEN?\n         BZ    DUMPNOM                 BR IF NOT\n         SH    R2,=H'128'              IF YES, BACK UP QUAD WORDS\n* R2 NOW HAS FIRST ADDRESS TO DISPLAY\nDUMPNOM  LA    R0,256                  LENGTH TO FETCH\n         LA    R1,DUMPDATA             TARGET ADDRESS\n         BAL   R14,GETSTOR             GO FETCH THE DATA\n         NOP   0                       RETURN IF NO DATA FOUND\n         NOP   0                       RETURN IF PARTIAL DATA FOUND\n         LA    R6,DUMPDATA             POINT TO DATA TO DISPLAY\n         LA    R4,OUT1                 FIRST OUTPUT LINE ADDR\n         LA    R5,16                   NO. OF LINES TO DISPLAY\nDUMPLOOP EQU   *                       FORMAT THE DISPLAY\n         STCM  R2,15,TEMP2             ADDRESS TO SHOW\n         UNPK  TEMP1(9),TEMP2(5)       CONVERT BINARY TO HEX\n         MVC   0(8,R4),TEMP1\n         TR    0(8,R4),HEXTAB\n         HEX   12,0                    CONVERT FIRST WORD TO HEX\n         HEX   22,4                    SECOND WORD TO HEX\n         HEX   32,8                    THIRD WORD\n         HEX   42,12                   FOURTH AND LAST WORD TO HEX\n         MVI   52(R4),C'*'             FRAME THE EBCDIC DISPLAY\n         MVI   69(R4),C'*'             FRAME THE OTHER SIDE\n         MVC   53(16,R4),0(R6)         COPY THE EBCDIC DATA\n         TR    53(16,R4),VALCHAR       DELETE INVALID CHARS\n         LA    R2,16(R2)               NEXT LINE ADDR\n         LA    R6,16(R6)               NEXT DATA AREA\n         LA    R4,80(R4)               NEXT OUTPUT LINE\n         BCT   R5,DUMPLOOP             GO DO NEXT LINE\n         SPACE 2\n*----------------------------------------------------------------------\n*\n* NOW BLANK OUT THE SCREEN WHERE THE PAGE DIDN'T EXIST\n*\n*----------------------------------------------------------------------\n         SPACE 2\n         LA    R4,OUT1                 POINT TO FIRST OUTPUT LINE\n         SH    R2,=H'256'              FIRST ADDRESS DISPLAYED\n         LA    R5,16                   NUMBER OF LINES DISPLAYED\nBLLOOP   LA    R15,15(R2)              LAST ADDRESS ON CURRENT LINE\n         CLC   LOGOOD,HIGOOD           ARE WE IN A WRAP CONDITION\n         BH    BLLP0                   YES SO SKIP NOLINE CHECK\n         C     R2,HIGOOD               IF START>=HIGH\n         BNL   NOLINE                     THEN BLANK ENTIRE LINE\nBLLP0    C     R2,LOGOOD               IF START<LOW & END>=LOW\n         BNL   BLLP1                      THEN HI GOOD AND LOW NEEDS\n*                                                  BLANK\n         C     R15,LOGOOD\n         BNL   HIMIX\nBLLP1    C     R2,HIGOOD               IF START<HIGH & END>HIGH\n         BNL   BLLP2                      THEN LOW GOOD AND BLANK\n*                                                HIGH\n         C     R15,HIGOOD\n         BH    LOWOK\nBLLP2    DS    0H                      LINE OK OTHERWISE\n         B     BLOOPEND\n* BOTH LOW AND HIGH MISSING -- BLANK ENTIRE LINE\nNOLINE   MVI   12(R4),C' '             START OF DATA\n         MVC   13(57,R4),12(R4)        CLEAR THE LINE\n         B     BLOOPEND                GO CHECK ANOTHER LINE\n* BR HERE IF LOW END GOOD, HIGH MAY BE  MISSING\nLOWOK    S     R15,HIGOOD              # OF BYTES TO BLANK\n* THE FOLLOWING CODE TAKES CARE OF LOW STORAGE WRAP\n         CH    R15,=H'15'              MORE THAN 15 BYTES TO CLEAR\n         BH    BLOOPEND                IF YES, IT WRAPPED, NO CLEAR\n         LR    R1,R15                  COPY # TO BLANK\n         SRL   R1,2                    FIND # OF WORDS\n         SLL   R1,1                    TWO BLANKS PER WORD\n         AR    R1,R15                  ADD NUMBER OF HEX CHARS\n         AR    R1,R15                  WHICH IS TWICE THE # OF BYTES\n         LA    R6,50(R4)               POINT JUST AFTER HEX DATA\n         SR    R6,R1                   FIRST BYTE TO CLEAR\n         BCTR  R1,0                    REDUCE BY 1 FOR EXEXUTE\n         EX    R1,CLEARMVC             CLEAR HEX SIDE\n         LA    R6,69(R4)               POINT TO TRAILING *\n         SR    R6,R15\n         EX    R15,CLEARMVC            CLEAR EBCDIC AND *\n         MVI   0(R6),C'*'              NOTE END OF EBCDIC DATA\n         B     BLOOPEND                GO CHECK NEXT LINE\n* COME HERE WHEN HI END GOOD AND LOW END MISSING\nHIMIX    L     R15,LOGOOD              LOWEST GOOD ADDR\n         SR    R15,R2                  NUMBER OF BYTES TO CLEAR\n         LR    R1,R15                  COPY # TO CLEAR\n         SRL   R1,2                    # OF WORDS TO CLEAR\n         SLL   R1,1                    NUMBER OF IMBEDDED BLANKS\n         AR    R1,R15                  ADD # OF HEX CHARS\n         AR    R1,R15\n         BCTR  R1,0                    REDUCE BY 1 FOR MVC\n         LA    R6,12(R4)               START OF HEX DATA\n         EX    R1,CLEARMVC             AND CLEAR THE HEX DATA\n         LA    R6,52(R4)               POINT TO FIRST * ON LINE\n         EX    R15,CLEARMVC            CLEAR * AND EBCDIC DATA\n         LA    R6,52(R4,R6)            POINT TO FIRST CLEARED BYTE\n         MVI   0(R6),C'*'              AND DROP IN A *\nBLOOPEND LA    R4,80(R4)               POINT TO NEXT LINE\n         LA    R2,16(R2)               ADDRESS ON NEXT LINE\n         BCT   R5,BLLOOP               AND SCAN ALL LINES\n         SPACE 2\n*----------------------------------------------------------------------\n*\n*  PUT IN ARROWS TO POINT TO DESIRED DATA\n*\n*----------------------------------------------------------------------\n         SPACE 2\n         LA    R4,OUT1                 ADDR OF FIRST LINE\n         TM    MODEFLAG,MIDDUMP        DOES IT BELONG IN THE MIDDLE\n         BZ    ARRTOP                  BR IF NOT\n         LA    R4,OUT9                 POINT TO MIDDLE LINE\nARRTOP   SR    R1,R1                   ASSUME NO QUADWORD ALIGNMENT\n         TM    MODEFLAG,ALIGN          WAS ASSUMPTION CORRECT\n         BZ    ARRALIGN                BR IF YES, ELSE GET OFFSET\n         LA    R1,15                   MASK FOR LOW 4 BITS\n         NR    R1,R2                   GET BYTE OFFSET FOR ARROW\n* FIRST DO THE EBCDIC SIDE\nARRALIGN LA    R15,51(R4)              BYTE BEFORE FIRST *\n         EX    R1,MOVEMVC              MOVE THE DATA BACK\n         AR    R15,R1                  ADDR OF LAST BYTE MOVED\n         MVI   1(R15),C'>'             PUT IN THE ARROW\n* NOW MOVE THE HEX SIDE\n         SR    R0,R0                   CLEAR HIGH ORDER BITS\n         SLDL  R0,30                   WHICH WORD IS TO BE MOVED\n         SRL   R1,30                   NUMBER OF BYTES TO BE MOVED\n         LR    R15,R0                  COPY OFFSET OF WORD TO MOVE\n         MH    R15,=H'10'              EACH WORD TAKES UP 10 BYTES\n         LA    R15,10(R4,R15)          POINT IN FRONT OF WORD TO MOVE\n         SLL   R1,R1                   NUMBER OF HEX DIGITS TO MOVE\n         EX    R1,MOVEMVC              MOVE THE DATA BACK\n         AR    R15,R1                  POINT TO PALCE FOR ARROW\n         MVI   1(R15),C'>'             AND PUT IT THERE\n* FALL  THRU TO SHOW THE SCREEN\n         EJECT\n*\n* DISPLAY THE PAGE AND CHECK FOR END REQUEST\n*\nDISPLAY  UNPK  TEMP1(5),CURASID(3)     FORMAT CURRENT ASID\n         MVC   ASIDLN1(4),TEMP1        AND PUT ON SCREEN\n         TR    ASIDLN1(4),HEXTAB\n         MVC   SAVEASID,ASIDLN1        SAVE FORMATED VERSION\n         MVC   KEYS,KEY1               SETUP PFK\n         MVC   KEYS+80,KEY2                 INFO LINE\n*\nTPUTSCRN DS    0H\n         LA    R0,QDSLNG\n         TPUT  QDSCREEN,(0),FULLSCR MF=(E,QTPUT)\n         XC    INPLINE,INPLINE\n         XC    PFREPLY,PFREPLY\n         TGET  PFREPLY,69,ASIS MF=(E,QTGET)\n         LR    R3,R1                   SAVE INPUT LENGTH\n         CH    R15,=H'12'     IS INPUT LONGER THAN BUFFER?\n         BNE   NOCLEAR        NO. CONTINUE.\n         TCLEARQ INPUT        CLEAR THE QUEUE\nNOCLEAR  DS    0H\n         LA    R1,PFREPLY+3            POINT AT FIRST BYTE\n         SH    R3,=H'3'                ADJUST LENGTH\n*\n**       HANDLE ASID IF NECESSARY\n*\n         CLC   0(3,R1),=X'1140F9'      IS THIS ASID MODIFICATION\n         BNE   NOASID                  NO SO SKIP\n         LA    R1,3(R1)                POINT AT FIRST BYTE\n         SH    R3,=H'3'                ADJUST LENGTH\n         LR    R2,R1                   SAVE START ADDRESS\nASIDLOOP CLI   0(R1),X'11'             LOOK FOR START FIELD\n         BE    HAVEASID\n         LA    R1,1(R1)                BUMP POINTER\n         BCT   R3,ASIDLOOP\nHAVEASID LR    R15,R1                  MOVE POINTER\n         SR    R15,R2                  GET LENGTH\n         BZ    NOASID\n         MVC   ASIDLN1,=CL4' '\n         LA    R4,ASIDLN1+4            GET TO ADDRESS +4\n         SR    R4,R15                      - REAL LENGTH\n         BCTR  R15,0                   GET MACHINE LENGTH\n         EX    R15,MOVERPLY\nNOASID   DS    0H\n         LTR   R3,R3                   ANY DATA LEFT\n         BZ    ENDINP\n         CLC   0(3,R1),=X'11C15C'      CHECK FOR START OF FIELD\n         BNE   ENDINP                  IF NOT HERE THEN SKIP\n         LA    R1,3(R1)                POINT AT FIRST BYTE\n         SH    R3,=H'3'                ADJUST LENGTH\n         LR    R2,R1                   SAVE START ADDRESS\nRPLYLOOP CLI   0(R1),X'11'             LOOK FOR START FIELD\n         BE    HAVERPLY\n         LA    R1,1(R1)                BUMP POINTER\n         BCT   R3,RPLYLOOP\nHAVERPLY LR    R15,R1                  MOVE POINTER\n         SR    R15,R2                  GET LENGTH\n         BZ    NOASID\n         LA    R4,INPLINE              GET TO ADDRESS\n         BCTR  R15,0                   GET MACHINE LENGTH\n         EX    R15,MOVERPLY\nENDINP   OC    INPLINE,=CL63' '        MAKE UPPERCASE\n         SPACE 2\n         IC    R4,PFCODE\n         XR    R5,R5\n         CLI   PFCODE,X'7D'      ENTER?\n         BE    ENTER             /YES - TREAT AS ENTER\n         CLI   PFCODE,X'F0'      TEST-REQ/SYS-REQ?\n         BE    ENTER             /YES - TREAT AS ENTER\n         CLI   PFCODE,X'01'      OTHER KIND OF SYS-REQ?\n         BE    ENTER             /YES - TREAT AS ENTER\n         CLI   PFCODE,X'6C'      PA1?\n         BE    ENDIT             /YES - TERMINATE\n         CLI   PFCODE,X'6E'      PA2?\n         BE    TPUTSCRN          /YES - GO RESHOW SCREEN\n         CLI   PFCODE,X'6B'      PA3?  (TCAM GENERATED)\n         BE    TPUTSCRN          /YES - GO RESHOW SCREEN\n         N     R4,=X'0000000F'   EXTRACT PF-KEY NUMBER\n         CH    R4,=H'12'\n         BH    ENTER            \"ENTER\" KEY\n         BCTR  R4,0\n         SLL   R4,2              TIMES SIZE OF AN ENTRY\n         B     PFKEYTAB(R4)\nPFKEYTAB B     HELP                    PF1\n         B     DISPLAY                 PF2\n         B     ENDIT                   PF3    QUIT\n         B     DISPLAY                 PF4\n         B     REPEAT                  PF5    REPEAT COMMAND\n         B     DISPLAY                 PF6\n         B     UP                      PF7    SCROLL UP\n         B     DOWN                    PF8    SCROLL DOWN\n         B     BACK                    PF9    SCROLL BACKWARDS\n         B     FWD                     PF10   SCROLL FORWARDS\n         B     DISPLAY                 PF11\n         B     DISPLAY                 PF12\nMOVERPLY MVC   0(0,R4),0(R2)           **EXECUTED**\n         EJECT\nENTER    CLC   =C'END',INPLINE         SEE IF END TYPED\n         BNE   ISCAN                   IF NOT, GO LOOK AT INPUT\n* CLEAN UP AND GO AWAY\nENDIT    LM    R0,R1,CSALEN            GET SP, LEN, AND ADDR\n         LTR   R1,R1                   WAS BUFFER GOTTEN\n         BZ    ENDIT1                  NOPE\n         FREEMAIN R,LV=(0),A=(1)       FREE BUFFER\nENDIT1   TM    FLAGS,NOAUTH            ARE WE AUTHORIZED\n         BO    ENDIT2                  NOPE\n         MODESET MODE=PROB             RESET MODE\nENDIT2   DS    0H\n         STFSMODE OFF                  RESET FULLSCREEN\n         L     R13,SAVE+4              GET ORIGINAL SAVE AREA\n         FREEMAIN R,LV=WORKLEN,SP=1,A=(R10)\nENDIT3   RETURN (14,12),RC=0\n         EJECT\n*----------------------------------------------------------------------\n*\n* CBHIT  -- CONTROL BLOCK FORMATTING ROUTINE\n* AT ENTRY:\n*              R4 HAS ADDRESS TO DISPLAY (OFFSET 0 - MAIN SEGMENT)\n*              R5 HAS CONTROL BLOCK HEADER ADDRESS\n*\n*----------------------------------------------------------------------\n         SPACE 2\nCBHIT    LH    R2,CURRENT              GET HISTORY TABLE POINTER\n         A     R2,HISTORY              GET ENTRY ADDRESS\n         USING HIST,R2                 SETUP FORMAT OF ENTRY\n         ICM   R6,15,HISTCBSP          LAST SEGMENT DISPLAYED\n         BNZ   CBHIT2                  BR IF A CONTINUING DISPLAY\n         USING CBH,R5                  ADDRESS HEADER BLOCK\n         L     R6,CBHCBSP              ELSE GET FIRST SEG ADDRESS\n         ST    R6,HISTCBSP             AND SAVE FOR LATER\n         ST    R5,HISTCBHP             AND SAVE FOR LATER\n         OI    HISTCBHP,X'80'          NOTE CB FORMAT ROUTINE IN USE\n*   GET BLOCK NAME AND HANDLE ANY SEGMENT INDIRECTION\nCBHIT2   DS    0H\n         USING CBS,R6\n         L     R5,HISTCBHP             POINT TO CB HEADER\n         MVC   MSGLINE+36(8),CBHNAME   MOVE IN CB NAME\n         STCM  R4,15,TEMP2             SAVE ADDRESS OF BLOCK\n         UNPK  TEMP1(9),TEMP2(5)          AND CONVERT\n         TR    TEMP1(8),HEXTAB               TO HEX\n         MVC   MSGLINE+26(8),TEMP1     MOVE IN ADDRESS OF BLOCK\n         DROP  R2,R5\n         CLC   =H'0',CBSILEN           IS THIS SEGMENT INDIRECT\n         BE    CBHIT3                  IF NOT THEN SKIP CODE\n         LH    R0,CBSILEN              GET LENGTH TO FETCH (ALWAYS 4\n         LA    R1,DUMPDATA             WHERE TO PUT IT\n         LH    R2,CBSIOFF              GET INDIRECT OFFSET\n         AR    R2,R4                   GET TRUE MAIN BLOCK ADDRESS\n         BAL   R14,GETSTOR             GET THE INDIRECT WORD\n         B     NOCB                    BR IF NO DATA FETCHED\n         B     NOCB                    BR IF PARTIAL DATA FETCHED\n         L     R4,DUMPDATA             RESET THE ADDR TO DUMD\n         LH    R2,CURRENT\n         A     R2,HISTORY              GET ADDR OF ENTRY\n         ST    R4,HISTSADR-HIST(R2)    SAVE SEGMENT ADDRESS\nCBHIT3   DS    0H\n         LH    R0,CBSDLEN              LENGTH TO FETCH\n         LA    R1,DUMPDATA             TARGET ADDRESS\n         LH    R2,CBSDOFF              OFFSET TO FETCH\n         AR    R2,R4                   ADD START OF CB ADDRESS\n         BAL   R14,GETSTOR             GO FETCH THE DATA\n         B     NOCB                    BR IF NO DATA FETCHED\n         B     NOCB                    BR IF PARTIAL DATA FETCHED\n         LA    R5,OUT1-80              START OF SCREEN\n         LA    R2,DUMPDATA             POINT TO DATA BUFFER\n         SH    R2,CBSDOFF              BACKUP TO VIRTUAL CB ORIGIN\n         LA    R6,CBSLEN(R6)           POINT AT FIRST CB FIELD\n         USING CBF,R6\nCBLOOP   DS    0H\n         LH    R1,CBFLINE              GET LINE NUMBER\n         MH    R1,=H'80'               TIMES LINE LENGTH\n         AH    R1,CBFCOLM              PLUS THE COLUMN NUMBER\n         AR    R1,R5                   PLUS START OF LINE\n         MVC   0(8,R1),CBFNAME         SET NAME FIELD\n         LA    R1,8(R1)                SKIP NAME\n         LH    R14,CBFOFFS             GET OFFSET INTO CB\n         AR    R14,R2                  GET ADDRESS IN FETCHED DATA\n         SR    R15,R15                 CLEAR REGISTER\n         IC    R15,CBFDLEN             GET LENGTH OF DATA ITEM\n*   FORMAT CHARACTER AS DISPLAY AND REST AS HEX\n         CLI   CBFTYPE,C'C'            WHAT IS TYPE\n         BNE   CBFLOOP                 IF NOT CHARACTER THEN DO HEX\n         BCTR  R15,0                   GET MACHINE LENGTH\n         EX    R15,CBMVC               MOVE IN DATA\n         B     CBFEND\nCBFLOOP  MVC   TEMP2(1),0(R14)         MOVE IN DATA BYTE\n         UNPK  TEMP1(3),TEMP2(2)\n         TR    TEMP1(2),HEXTAB\n         MVC   0(2,R1),TEMP1           MOVE IN CONVERTED BYTE\n         LA    R1,2(R1)                BUMP OUTPUT ADDRESS\n         LA    R14,1(R14)              BUMP INPUT ADDRESS\n         BCT   R15,CBFLOOP             KEEP LOOPINT\nCBFEND   LA    R6,CBFLEN(R6)           BUMP TO NEW FIELD\n         CLC   0(4,R6),=F'0'           END OF SEGMENT\n         BNE   CBLOOP                  IF NOT THEN KEEP GOING\n         B     DISPLAY                 ALL DONE SO DISPLAY IT\n         DROP  R6\n         SPACE 1\nCBMVC    MVC   0(0,R1),0(R14)          **EXECUTED** MOVE IN DATA\n         SPACE 2\n*----------------------------------------------------------------------\n*\n*  GET ADDRESS OF CURRENT CONTROL BLOCK SEGMENT\n*     ON EXIT R2 = ADDR OF THIS CONTROL BLOCK SEGMENT\n*\n*----------------------------------------------------------------------\nGETCURAD DS    0H\n         LH    R2,CURRENT              GET HIST TABLE OFFSET\n         A     R2,HISTORY              GET ENTRY\n         USING HIST,R2\n         CLC   =F'0',HISTSADR          IS SEGMENT A SECONDARY SEGMENT\n         BE    GCA1                    NOPE, SO SKIP CODE\n         L     R2,HISTSADR             GET ADDRESS OF BLOCK\n         BR    R14\nGCA1     L     R2,HISTADDR             GET MAIN BLOCK ADDR\n         BR    R14\n         DROP  R2\n         EJECT\n***********************************************************************\n*\n* COMMAND ROUTINES\n*\n         SPACE 2\n*----------------------------------------------------------------------\n*\n* HELP -- DISPLAY HELP INFORMATION\n*\n*----------------------------------------------------------------------\n         SPACE 2\nHELP     DS    0H\n         LA    R1,16*80\n         LR    R3,R1\n         L     R2,=A(HELPMSG)      POINT AT FROM\n         LA    R0,OUT1\n         MVCL  R0,R2\n         B     DISPLAY\n         SPACE 2\n*----------------------------------------------------------------------\n*\n* REFRESH -- REFETCH THE CORE AND REDISPLAY IT\n*\n*----------------------------------------------------------------------\n         SPACE 2\nREFRESH  OI    FLAGS,RFRSH             SET REFRESH FLAG\n         B     FORMAT                  REFORMAT SCREEN\n         SPACE 2\n*----------------------------------------------------------------------\n*\n* OVERLAY  --  MANIPULATE CONTROL BLOCK FORMATTING\n*\n*----------------------------------------------------------------------\n         SPACE 2\nOVERLAY  CLC   =C'NULL',INPLINE+1      SEE IF NO FORMATTING WANTED\n         BE    OVERNULL                BR IF YES\n         L     R5,=V(CBMACS)           GET CB MAP INDEX\n         LTR   R5,R5                   ANY MAPS\n         BZ    OVERNULL                IF NOT TREAT AS NULL OVERLAY\n         USING CBH,R5                  SETUP ADDRESSABILITY\nOVERLOOP CLC   =F'0',CBHNEXT           END OF CONTROL BLOCKS\n         BE    FORMAT                  IF YES, IGNORE COMMAND\n         CLC   INPLINE+1(8),CBHNAME    SEE IF CB MATCH\n         BE    OVERHIT                 BR IF YES\n         L     R5,CBHNEXT              ELSE POINT TO NEXT ENTRY\n         B     OVERLOOP                AND KEEP LOOKING\nOVERHIT  L     R6,CBHCBSP              START SEG ADDR FOR CB FOUND\n         LH    R2,CURRENT              CURRENT HIST TABLE ENTRY OFFSET\n         A     R2,HISTORY              GET ENTRY ADDRESS\n         USING HIST,R2                 SETUP ENTRY FORMAT\n         ST    R5,HISTCBHP             POINT AT HEADER\n         ST    R6,HISTCBSP             POINT AT SEGMENT(FIRST)\n         OI    HISTCBHP,X'80'          MARK AS CB\n         XC    HISTSADR,HISTSADR       CLEAR SEC SEG ADDR\n         B     FORMAT                  GO SHOW IT\n         SPACE 1\nOVERNULL LH    R2,CURRENT              CURRENT HIST TABLE ENTRY OFFSET\n         A     R2,HISTORY              POINT AT CURRENT ENTRY\n         MVC   HISTCBHP,=X'7FFFFFFF'   SUPPRESS CB OVERLAY\n         B     FORMAT                  GO SHOW STORAGE\n         DROP  R5,R2\n         SPACE 2\n*----------------------------------------------------------------------\n*\n* DOWN -- SCROLL DOWN 256 BYTES OR NEXT CTRL BLK SEGMENT\n*\n*----------------------------------------------------------------------\n         SPACE 2\nDOWN     LH    R2,CURRENT              CURRENT HIST TABLE POINTER\n         A     R2,HISTORY              POINT TO HIST TABLE ENTRY\n         USING HIST,R2                 SETUP ENTRY FORMAT\n         TM    HISTCBHP,X'80'          SEE IF THIS IS A CB DISPLAY\n         BO    DOWNCB                  BR IF YES\n         L     R1,HISTADDR             ELSE GET ADDR TO SHOW\n         AH    R1,=H'256'              AND MOVE DOWN ONE SCREEN\n         ST    R1,HISTADDR             AND REPLACE IN HIST TABLE\n         B     FORMAT                  GO DISPLAY IT\nDOWNCB   L     R1,HISTCBSP             GET CB SEGMENT ADDR\n         L     R1,CBSNEXT-CBS(R1)      GET NEXT SEG ADDR\n         ST    R1,HISTCBSP             AND PUT IN HIST TABLE\n         XC    HISTSADR,HISTSADR       CLEAR SEC SEG ADDR\n         B     FORMAT                  GO SHOW IT\n         DROP  R2\n         SPACE 2\n*----------------------------------------------------------------------\n*\n* UP   -- SCROLL UP   256 BYTES OR PREV CTRL BLK SEGMENT\n*\n*----------------------------------------------------------------------\n         SPACE 2\nUP       LH    R2,CURRENT              CURRENT HIST TABLE POINTER\n         A     R2,HISTORY              POINT TO HIST TABLE ENTRY\n         USING HIST,R2                 SETUP FORMAT OF ENTRY\n         TM    HISTCBHP,X'80'          SEE IF THIS IS A CB DISPLAY\n         BO    UPCB                    BR IF YES\n         L     R1,HISTADDR             ELSE GET ADDR TO SHOW\n         SH    R1,=H'256'              AND MOVE UP ONE SCREEN\n         ST    R1,HISTADDR             AND REPLACE IN HIST TABLE\n         B     FORMAT                  GO DISPLAY IT\nUPCB     L     R1,HISTCBSP             GET CB SEGMENT ADDR\n         L     R1,CBSPREV-CBS(R1)      GET PREV SEG ADDR\n         ST    R1,HISTCBSP             AND PUT IN HIST TABLE\n         XC    HISTSADR,HISTSADR       CLEAR SEC SEG ADDR\n         B     FORMAT                  GO SHOW IT\n         DROP  R2\n         SPACE 2\n*----------------------------------------------------------------------\n*\n* REPEAT -- REPEAT LAST INPUT LINE\n*\n*----------------------------------------------------------------------\n         SPACE 2\nREPEAT   MVC   INPLINE(52),INPSAVE     COPY SAVED INPUT\n         B     ISCAN2                  AND PROCESS IT\n         SPACE 2\n*----------------------------------------------------------------------\n*\n* LINK -- LINK TO LABELED CONTROL BLOCK FIELD\n*\n*----------------------------------------------------------------------\n         SPACE 2\nLINK     LH    R2,CURRENT              CURRENT HIST TABLE POINTER\n         A     R2,HISTORY              POINT TO HIST TABLE ENTRY\n         USING HIST,R2                 SETUP FORMAT OF ENTRY\n         TM    HISTCBHP,X'80'          SEE IF CB FORMATTING IN USE\n         BO    LINK2                   BR IF YES\nLINKERR  MVC   MSGLINE,LINKMSG         NOTE ERROR IN LINK\n         B     FORMAT                  AND RESHOW SCREEN\nLINK2    L     R3,HISTCBSP             GET CURRENT CB SEG ADDRESS\n         LA    R5,0(R3)                CLEAR FLAGS AND SETUP FOR COMP\n         USING CBS,R4\nLINK2A   LR    R4,R3                   SAVE THE START OF SEG ADDR\n         LA    R3,CBSLEN(R3)           POINT PAST SEG HEADER\n         USING CBF,R3\nLINK3    CLC   CBFNAME(4),=F'0'        END OF SEGMENT\n         BE    LINK4\n         CLC   CBFNAME,INPLINE+1       DOES NAME MATCH\n         BE    LINKFND                 IF SO THEN FOUND\n         LA    R3,CBFLEN(R3)           POINT PAST THIS ONE\n         B     LINK3                   KEEP LOOKING\nLINK4    DS    0H\n         L     R3,CBSNEXT              POINT TO NEXT SEGMENT\n         CR    R3,R5                   ARE WE BACK AT START\n         BNE   LINK2A                  IF NOT KEEP GOING\n         B     LINKERR                 IF NOT THEN ISSUE ERROR\n         DROP  R4,R2\n* A MATCH HAS  BEEN FOUND. FETCH THE  ADDRESS TO LINK TO\nLINKFND  DS    0H\n         SR    R0,R0                   CLEAR FOR IC\n         IC    R0,CBFDLEN              LENGTH OF ITEM  MINUS 1\n         LA    R1,DUMPDATA             ADDR TO PLACE DATA IN\n         BAL   R14,GETCURAD            GET ADDR OF CURRENT SEGMENT\n         AH    R2,CBFOFFS              OFFSET OF ITEM TO FETCH\n         BAL   R14,GETSTOR             FETCH THE  ADDRESS\n         B     LINKERR                 BR IF DATA CANT BE FETCHED\n         B     LINKERR                 BR IF DATA CANT BE FETCHED\n         BAL   R15,FWDSUB              UPDATE HIST TABLE TO NEXT\n         L     R0,DUMPDATA             LOAD ADDRESS THAT WAS FETCHED\n         SR    R15,R15                 NOW ADJUST THE\n         IC    R15,CBFDLEN               FETCHED DATA\n         LA    R1,4                        SO THAT\n         SR    R1,R15                        IT IS RIGHT\n         BNP   LF1                             JUSTIFIED IN\n         SLL   R1,3                              REGISTER IF\n         SRL   R0,0(R1)                            LESS THAN 4\nLF1      DS    0H                                    BYTES\n         LH    R2,CURRENT              NEW HIST TABLE POINTER\n         A     R2,HISTORY              GET ENTRY ADDRESS\n         USING HIST,R2\n         ST    R0,HISTADDR             SAVE NEW ADDRESS\n         XC    HISTCBHP,HISTCBHP          AND\n         XC    HISTCBSP,HISTCBSP            CLEAR\n         XC    HISTSADR,HISTSADR               REST\n         B     FORMAT                  GO FORMAT THE NEW CB\n         DROP  R3,R2\n         SPACE 2\n*----------------------------------------------------------------------\n*\n*  SET INDIRECT FLAG\n*\n*----------------------------------------------------------------------\n         SPACE 2\nINDIR31  OI    FLAGS,IND31             SET FLAG\nINDIR    OI    FLAGS,INDFLAG           SET FLAG\n         LA    R3,1(R3)                UPDATE SCAN POINTER\n         CLI   INPLINE+1,C' '          USE CURRENT ADDRESS\n         BNE   NUMSCAN                 IF NO, GO SCAN INPUT ADDRESS\n         BAL   R14,GETCURAD\n         LR    R4,R2                   MOVE TO RIGHT REGISTER\n         B     ENDNUM\n         SPACE 2\n***********************************************************************\n*\n*  ESTABLISH SCREEN MODE\n*\n***********************************************************************\n         SPACE 2\nMODE     CLC   =C'1 ',INPLINE+1        MODE ONE TEST\n         BE    MODE1                   BR IF YES\n         CLC   =C'2 ',INPLINE+1        CHECK FOR MODE TWO\n         BNE   INVAL                   IF NOT EITHER, INVALID\n         NI    MODEFLAG,255-MIDDUMP    MODE 2 MEANS BACKUP 0\n         B     FORMAT\nMODE1    OI    MODEFLAG,MIDDUMP        MODE 1 MEANS BACK UP 7 LINES\n         B     FORMAT\nINVAL    MVC   MSGLINE,MODEMSG\n         B     FORMAT\n         SPACE 2\n***********************************************************************\n*\n*  MANIPULATE HISTORY TABLE\n*\n***********************************************************************\n         SPACE 2\nFWD      BAL   R15,FWDSUB              FORWARD 1 IN HIST TABLE\n         B     FORMAT\n         SPACE\nFWDSUB   LH    R1,CURRENT              CURRENT ENTRY INDEX\n         LA    R1,HISTLEN(R1)\n         CH    R1,=AL2(50*HISTLEN)     SEE IF WRAP NEEDED\n         BL    FWDEND                  BR IF NOT\n         SR    R1,R1                   WRAP TO BEGINNING\nFWDEND   STH   R1,CURRENT              STORE NEW OFFSET\n         BR    R15                     RETURN TO CALLER\n         SPACE 1\nBACK     LH    R1,CURRENT\n         SH    R1,=AL2(HISTLEN)        BACK UP ONE ENTRU\n         BNM   BACKEND                 BR IF NO BACKWARD WRAP\n         LA    R1,49*HISTLEN           ELSE GO TO END OF TABLE\nBACKEND  STH   R1,CURRENT              SAVE RESULT\n         B     FORMAT\n         SPACE 2\n***********************************************************************\n*\n*   ADD ENTRY TO SYMBOL TABLE\n*\n***********************************************************************\n         SPACE 2\nDEFINE   LA    R15,50                  NUMBER OF TABLE ENTRIES\n         LA    R2,NAMES                START OF TABLE\nDEFLOOP1 CLI   0(R2),X'0'              SEE IF UNUSED ENTRY\n         BE    NSPACE                  BR IF SPACE FOUND\n         LA    R2,12(R2)               NEXT ENTRY ADDR\n         BCT   R15,DEFLOOP1            TRY ALL ENTRIES\n         MVC   MSGLINE,SYMFULL         TABLE IS FULL\n         B     FORMAT\nNSPACE   LA    R15,9                   MAX LENGTH +1\n         LA    R0,INPLINE+1            ADDR OF FIRST BYTE\n         LR    R1,R0                   COPY SYMBOL ADDR\nDEFLOOP2 CLI   0(R1),C' '              SEE IF END OF SYM\n         BE    DEFEND                  BR IF YES\n         LA    R1,1(R1)                POINT TO NEXT BYTE\n         BCT   R15,DEFLOOP2            CONTINUE FOR 9 BYTES\nDEFBAD   MVC   MSGLINE,DEFMSG          SYMBOL TOO LONG OR TOO SHORT\n         B     FORMAT2                 DISPLAY WITH CURSOR AT ERROR\nDEFEND   SR    R1,R0                   SYMBOL LENGTH\n         BZ    DEFBAD                  NULL SYMBOL ILLEGAL\n         BCTR  R1,R0                   FOR EXECUTE\n         MVC   0(8,R2),=CL8' '         CLEAR TABLE ENTRY\n         EX    R1,DEFMOVE              MOVE SYMBOL\n         LH    R1,CURRENT              GET CURRENT ADDRESS\n         A     R1,HISTORY\n         L     R1,HISTADDR-HIST(R1)\n         ST    R1,8(R2)                STORE WITH SYMBOL\n         B     FORMAT\nDEFMOVE  MVC   0(0,R2),INPLINE+1       EXECUTED TO MOVE SYMBOL\n         SPACE 2\n***********************************************************************\n*\n*  SCAN THE ADDRESS EXPRESSION\n* REGISTER USAGE\n* R2 LAST NUMBER SCANNED\n* R3 SCAN POINTER\n* R4 CURRENT OUTPUT VALUE\n* R5 LAST OPERATOR SCANNED\n*\n***********************************************************************\n         SPACE 2\nNUMSCAN  DS    0H\n         BAL   R14,GETCURAD            CURRENT ENTRY IS DEFAULT\n         LR    R4,R2                   CURRENT ENTRY IS DEFAULT\n         LA    R5,0                    ASSUME DEFAULT TO BE TAKEN\n         CLI   0(R3),C'+'              SEE 2F PREFIX PLUS\n         BNE   NOTPLUS                 BR IF NOT\n         LA    R5,2                    INDICATE PLUS OPERATOR\n         B     NUMOP                   GO TO ADV POINTER\nNOTPLUS  CLI   0(R3),C'-'              IS IT PREFIX MINUS\n         BNE   NUMLOOP                 BR IF NOT, USE DEFAULT AS LOAD\n         LA    R5,4                    INDI\"ATE MINUS OPERATOR\nNUMOP    LA    R3,1(R3)                POINT TO NEXT INPUT BYTE\nNUMLOOP  CLI   0(R3),C','              SEE IF NAME INDICATED\n         BE    NAMESCAN                BR IF YES\n         TRT   0(9,R3),NUMTAB          SEARCH FOR DELIMITER\n         LR    R6,R3                   SAVE START OF NUMBER\n         BC    8,BADSTUFF              BR IF INPUT TOO LONG\n         LR    R3,R1                   UPDATE SCAN POINTER\n         SR    R1,R6                   GET LENGTH OF INPUT\n         BZ    BADSTUFF                BR IF ZERO INPUT\n         MVC   TEMP1(8),=CL8' '        CLEAR TEMP AREA\n         LA    R15,TEMP1+8             RIGHT JUSTIFY INPUT\n         SR    R15,R1                  POINT TO RIGHT SPOT IN TEMP AREA\n         BCTR  R1,0                    PREPARE FOR EX\n         EX    R1,HEXMOVE              MOVE INPUT RIGHT JUSTIFIED\n         TR    TEMP1(8),HEXTAB         TRANSLATE TO HEX\n         PACK  TEMP2(5),TEMP1(9)       CONVERT HEX TO BINARY\n         ICM   R2,15,TEMP2             NEW DISPLAY ADDRESS\nNUMDELIM EX    0,OPER(R5)              EXECUTE PREVIOUS OPERATOR\n         CLI   0(R3),C' '              IS DELIM A BLANK\n         BE    ENDNUM                  IF YES, END SCAN\n         LA    R5,2                    PLUS OPERATOR CODE\n         CLI   0(R3),C'+'              IS OPER L PLUS\n         BE    NUMOP                   BR IF YES TO CONTINUE SAAN\n         LA    R5,4                    MINUS CODE\n         CLI   0(R3),C'-'              IS OPER MINUS\n         BE    NUMOP                   BR IF YES\n         MVC   MSGLINE,INVALOP         ELSE BAD DELIMITER\n         B     FORMAT2                 DISPLAY WITH CURSOR AT ERROR\nENDNUM   TM    FLAGS,INDFLAG           IS THIS AN INDIRECT REQ\n         BZ    NOTIND                  BR IF NOT\n         TM    FLAGS,IND31             DO WE WANT 31 BIT INDIRECT{\n         BO    *+8                     SKIP CLEAR IF YES\n         ICM   R4,8,=X'00'             CLEAR TOP BYTE\n         LR    R2,R4                   SET ADDR TO GET FROM\n         LA    R0,4                    NUMBER OF BYTES TO GET\n         LA    R1,DUMPDATA             WHERE TO PUT IT\n         BAL   R14,GETSTOR             DO MEMORY FETCH\n         B     BADIND                  NONE GOT\n         B     BADIND                  SOME BUT NOT ALL GOT\n         L     R4,DUMPDATA             DO THE INDIRECT\n         N     R4,=X'7FFFFFFF'         TURN OFF TOP BIT ALWAYS\nNOTIND   BAL   R15,FWDSUB              UPDATE HISTORY POINTR\n         LH    R2,CURRENT              NEW HIST TABLE POINTER\n         A     R2,HISTORY              GET ENTRY ADDRESS\n         USING HIST,R2\n         ST    R4,HISTADDR             SAVE NEW ADDRESS\n         XC    HISTCBHP,HISTCBHP          AND\n         XC    HISTCBSP,HISTCBSP            CLEAR\n         XC    HISTSADR,HISTSADR               REST\n         B     FORMAT\n         DROP  R2\nBADIND   MVC   MSGLINE,BADIMSG         MOVE IN MESSAGE\n         B     FORMAT                  GO AND REDISPLAY\n         SPACE 2\n* SCAN INPUT FOR A NAME IN THE SYMBOL TABOL\nNAMESCAN LA    R3,1(R3)                SKIP OVER COMMA\n         LR    R1,R3                   COPY INPUT POINTER\n         LA    R15,9                   MAX LENGTH +1\nNAMELOOP CLI   0(R1),C'A'              SEE IF VALID CHAR\n         BL    NAMEEND                 BR IF NOT, DELIM FOUND\n         LA    R1,1(R1)                POINT TO NEXT BYTE\n         BCT   R15,NAMELOOP            ALLOW EIGHT BYTES PLUS DELIM\nNAMEBAD  MVC   MSGLINE,NAMEMSG         NULL NAME OR NAME TOO LONG\n         B     FORMAT2                 DISPLAY WITH CURSOR AT ERROR\nNAMEEND  SR    R1,R3                   FIND LENGTH\n         BZ    BADSTUFF                BR IF TOO SHORT\n         MVC   TEMP1(8),=CL8' '        CLEA\u00a2  WORK AREA\n         BCTR  R1,0                    SET UP FOR EX\n         EX    R1,NAMEMOVE             MOVE TO WORK AREA, BLANK PAD\n         LA    R3,1(R3,R1)             UPDATE POINTER\n         LA    R15,50                  ENTRIES IN SYM TABLE\n         LA    R1,NAMES                START OF SYM TABLE\nNAMELP2  CLC   TEMP1(8),0(R1)          SEE IF NAME IN TABLE\n         BE    NAMEFIND                BR IF YES\n         LA    R1,12(R1)               POINT TO NEXT ENTRY\n         BCT   R15,NAMELP2             BR IF ANY ENTRIES LEFT\n         B     NAMEBAD                 BR IF NONE LEFT, UNDEFUNED SYM\nNAMEFIND L     R2,8(R1)                GET >YMBOL VALUE\n         B     NUMDELIM                USE IN EXPRESSION\n*  THESE INSTRUCTIONS ARE THE OBJECT OF AN EXECUTE\nOPER     LR    R4,R2                   USE HIST TABLE AS DEFAULT INPUT\n         AR    R4,R2                   PLUS OPERATOR\n         SR    R4,R2                   MINUS OPERATOR\nHEXMOVE  MVC   0(0,R15),0(R6)          RIGHT JUSTIFY INPUT DATA\nNAMEMOVE MVC   TEMP1(1),0(R3)          PAD NAME WITH BLANKS BY MOVING\n         SPACE\nBADSTUFF MVC   MSGLINE,ERRMSG          NOTE BAD INPUT\n         B     FORMAT2                 DISPLAY WITH CURSOR AT ERROR\n         SPACE 2\n***********************************************************************\n*\n*  PROGRAM CHECK EXIT\n*\n***********************************************************************\n         SPACE 2\n         DROP  R9,R11\n         USING *,R15               SET TEMP BASE\nEREXIT   DS    0H                  ESTAE EXIT\n         C     R0,=F'12'\n         BER   R14                 SKIP IF NOT SDWA\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R4,R1               SAVE ADDR OF SDWA\n         USING SDWA,R4             SAVE ADDR\n         L     R10,SDWAPARM        GET PARM LIST\n         LR    R12,R15             SAVE BASE REGISTER\n         DROP  R15\n         USING EREXIT,R12\nER200    L     R11,BASE1           GET FIRST BASE\n         L     R9,BASE2            GET SECOND BASE\n         USING LOOK,R11,R9         RESET BASE\n         TM    FLAGS,GETINPG           IS A GETSTOR IN PROGRESS\n         BZ    SPIEOTR                 NOPE OTHER ERROR\n         L     R8,CSAWORK          SETUP REG 8\n         USING WORK,R8                 IF FROM GETSTOR THEN R8 POINTS\n*                                      TO WORK\n         TM    FLAG1,FG1MOVE           ARE WE IN MOVE INSTR\n         BZ    SPIEOTR                 NOPE\n         CLI   SDWAICD1,X'04'          PROTECTION??\n         BNE   ER250                   IF NOT THEN TRY OTHERS\n*        IF PROTECTION THEN DATA TO POINT OF ERROR\n*        HAS BEEN MOVED SO JUST ADJUST LENGTH\n         L     R2,LENGTH\n         S     R2,SDWAGR01             GET LENGTH NOT MOVED\n         ST    R2,LENGTH               SAVE MOVED LENGTH\n         B     ER300                   ALL DONE\n*        IF ADDRESSING EXCEPTION THEN\n*        REGISTERS NOT ALWAYS UPDATED (PER POPS)\n*        BUT THE TRANSLATION ADDR IS CLOSE.\n*        ALSO NO DATA MAY HAVE BEEN MOVED.\n*        (WE ARE DEALING HERE WITH WHAT MAY BE \"MODEL DEPENDENT\"\n*        FEATURES)\nER250    DS    0H\n         L     R2,SDWATRAN             GET BAD ADDRESS\n         N     R2,=X'7FFFF000'         MAKE GOOD\n         S     R2,ADDR                 LESS START ADDR\n         LTR   R2,R2                   ANY GOOD LENGTH\n         BNP   ER300                   NOPE\n         C     R2,LENGTH               MAKE SURE IT IS REASONABLE\n         BH    ER300                   SKIP IF NOT\n         ST    R2,LENGTH               SAVE AS GOTTEN LENGTH\n         LR    R3,R2                   SETUP LENGTH\n         LR    R7,R2\n         L     R2,ADDR                 GET FROM ADDR\n         LA    R6,BUF                  GET TO ADDRESS\n         MVCL  R6,R2\nER300    MVC   ESRUB,=X'0074'     FLAG TO RESET REGS\n         LR    R1,R4               RESET SDWA POINTER\n         SETRP REGS=(14,12),DUMP=NO,RC=4,RETADDR=GOTBACK,              X\n               RETREGS=YES,RUB=ESRUB,FRESDWA=YES,RECORD=NO\n         DROP  R8,R4\n*PIEOTR  MVC   MSGLINE,PCMSG           TELL USER OF PC\n*        B     ER300                   SET RETURN FROM GETSTOR\nSPIEOTR  DS    0H\n         LR    R1,R4                   RESTORE SDWA REG\n         SETRP REGS=(14,12),DUMP=NO,RC=0,RECORD=NO\n         DROP  R12\n         SPACE 2\n*----------------------------------------------------------------------\n*\n* ERASE  --  CLEAR THE SCREEN BUFFER\n*\n*----------------------------------------------------------------------\n         SPACE 2\nERASE    SAVE  (2,5)                   NEED SOME WORK REGS\n         LA    R2,OUT1                 START OF AREA TO CLEAR\n         LA    R3,80*16                LENGTH TO CLEAR\n         LA    R5,C' '                 FILL CHAR\n         SLL   R5,24                   MAKE PAD BYTE AND CLEAR SOURCE\n         MVCL  R2,R4                   PROPAGATE BLANKS\n         RETURN (2,5)                  RESTORE REGS AND RETURN\n         EJECT\n* EXECUTED INSTRUCTIONS AND CONSTANTS\nCLEARMVC MVC   0(0,R6),BLANKS          CLEAR SOME SPACE\nMOVEMVC  MVC   0(0,R15),1(R15)         MOVE DATA BACKWARDS\n***********************************************************************\n*\n*\n*        FETCH SOME STORAGE\n*\n*              R0  =  LENGTH TO FETCH <=256\n*              R1  => WHERE TO PUT IT\n*              R2  => WHERE TO GET IT FROM\n*\n*\n***********************************************************************\nGETSTOR  SAVE  (14,8)                  SAVE REGS\n*\n*        CHECK IF DATA IS IN BUFFER\n*\n         CLC   CSAASID,CURASID         WANT SAME ASID\n         BNE   GETMORE                 NOPE\n         C     R2,CSASTAR              CHECK FOR BEGINNING\n         BL    GETMORE\n         LR    R15,R0                  GET LENGTH\n         AR    R15,R2                  GET END ADDRESS\n         C     R15,CSAEND              CHECK FOR END\n         BH    GETMORE                 NOPE NOT IN BUFFER\n         TM    FLAGS,RFRSH             IS IT REFRESH REQUEST\n         BO    GETMORE                 REGET THE CORE\nMOVEBUF  L     R15,CSASTAR             GET VIRT ADDR OF BUFFER\n         SR    R2,R15                  GET DISPLACEMENT IN BUFFER\n         A     R2,CSABUF               POINT TO BUFFER\n         LR    R3,R0                   MOVE LENGTH\n         LR    R0,R1                   SET \"TO\" ADDR\n         LR    R1,R3                   SET LENGTH\n         MVCL  R0,R2\n         LM    R14,R3,12(R13)          RESTORE REGS\n         B     8(R14)                  RETURN ALL GOTTEN\nGETMORE  DS    0H\n         NI    FLAGS,255-RFRSH         TURN OFF FLAG\n         MVC   CSAASID,CURASID         SET ASID OF CSABUFFER CONTENTS\n         L     R8,CSAWORK              POINT TO CSA AREA\n         USING WORK,R8                 SETUP ADDRESSABILITY\n         MVI   FLAG1,0                 CLEAR FLAGS\n         MVI   FLAG2,0\n         ST    R2,ADDR                 SAVE ADDR TO GET CORE FROM\n         ST    R2,CSASTAR              SET CSA VIRT BUFFER ADDR\n         MVC   LENGTH,=F'4096'         GET WHOLE PAGE\n         CLC   CURASID,MYASID          ARE WE IN THIS ADDR SPACE\n         BNE   DOSRB                   IF NOT USE SRB\n*\n*        INVOKE SRB CODE AS SUBROUTINE\n*\n         OI    FLAG1,FG1SUBR           FLAG AS SUBROUTINE\n         LA    R1,DMYPRMS              SETUP DUMMY FRR PARMS\n         ST    R1,FRRPRMS\n         XC    DMYPRMS,DMYPRMS\n         LR    R1,R8                   SETUP PARM REGISTER\n         LA    R15,D#SRBCD             SETUP ENTRY REGISTER\n         LA    R14,GOTBACK             SETUP RETURN REGISTER\n         OI    FLAGS,GETINPG           FLAG GETSTOR IN PROGRESS\n         BR    R15                     GO TO IT\n*\n*        IF AUTHORIZED FOR SRB MODE ...\n*\nDOSRB    TM    FLAGS,NOAUTH            ARE WE AUTHORIZED\n         BO    FAIL2                   NOPE\n*\n*        VALIDATE ASID ...\n*\n         L     R2,CVTPTR               POINT TO CVT\n         LH    R1,CSAASID              GET ASID\n         L     R2,CVTASVT-CVTMAP(R2)   POINT TO ASVT\n         USING ASVT,R2                 SETUP ADDRESSABILITY\n         C     R1,ASVTMAXU             IS IT TOO BIG\n         BH    FAIL3                   SET INVALID ASID\n         SLL   R1,2                    ASID*4\n         LA    R1,ASVTENTY-4(R1)       POINT AT DESIRED ENTRY\n         MVC   TOASCB,0(R1)            SAVE ASCB ADDR\n         TM    TOASCB,ASVTAVAL         IS THIS ASCB EXISTANT\n         BO    FAIL3                   NOPE\n         LA    R3,SRBAREA     POINT AT THE SRB\n         DROP  R2\n         L     R2,TOASCB               GET ASCB ADDR\n         USING ASCB,R2                 SETUP ADDRESSABILITY\n         TM    ASCBRCTF,ASCBOUT        IS ASCB SWPPED OUT\n         BO    FAIL3                   YES SO DONOT TRY TO TOUCH IT\n         DROP  R2\n*\n*        INITIALIZE THE SRB AND INVOKE AS SRB\n*\n         USING SRBSECT,R3\n         XC    SRBAREA,SRBAREA  CLEAR THE SRB\n         MVC   SRBID,=C'SRB '  SET EBCDIC ID\n         MVC   SRBASCB,TOASCB SET ASCB ADDR TO RUN IN\n         BASR  R0,0           GET ADDRESSING MODE\n         N     R0,=X'80000000'  LEAV ONLY ADDRESSING MODE\n         LA    R1,SRBCCD      POINT AT SRB CODE IN CSA\n         OR    R1,R0          PUT ADDRESSING MODE IN\n         ST    R1,SRBEP       SAVE ENTRY POINT\n         ST    R8,SRBPARM     SAVE PARM ADDR AS WORK AREA\n         LA    R1,D#RMTR-D#SRBCD(R1)  GET RESOURCE MGR TERMINATION\n         OR    R1,R0\n         ST    R1,SRBRMTR     AND SAVE IT\n         XC    ECB,ECB                 CLEAR THE ECBS FOR THE WAITLIST\n         XC    ECB2,ECB2\n         LA    R0,ECB\n         LA    R1,ECB2\n         STM   R0,R1,ECBLIST\n         MVI   ECBLIST+4,X'80'\n*\n*        NOW ISSUE TIMER INCASE SRB NEVER POSTS US\n*\n         STIMER REAL,D#STX,BINTVL==A(300)  WAIT 3 SECONDS\n         MODESET KEY=ZERO\n         SCHEDULE SRB=(R3),SCOPE=GLOBAL ISSUE SRB\n         MODESET KEY=NZERO\n         L     R2,=C'ABCD'             SET KEY IN REG\n         LA    R3,ECB2                 AND ADDR TO POST IN STIMER\n         WAIT  ECBLIST=ECBLIST\n         TTIMER CANCEL\n*\n*        WE ARE BACK FROM EITHER TIMER OR SRB OR SUB\n*\nGOTBACK  L     R8,CSAWORK              POINT AT CSA AREA\n         NI    FLAGS,255-GETINPG       TURN OFF GET IN PROGRESS\n         TM    FLAG1,FG1SUBR           IS THIS A SUB CALL\n         BO    GOTBK2                  IF SO IGNORE SOME ERRORS\n         TM    FLAG1,FG1SRDN           DID SRB TERMINATE GOOD\n         BZ    FAIL                    NOPE SO ERROR MSG\n         TM    FLAG2,FG2PSTR+FG2PURG+FG2ERRR AN ERRORS\n         BNZ   FAIL                    IF SO ERROR MESSAGE\nGOTBK2   DS    0H\n*\n*        NOW MOVE INFO OUT OF CSA BUFFER\n*\n         L     R2,12+12(R13)           GET ORIG R1 INTO R2 (DEST ADDR)\n         L     R3,12+8(R13)            GET DESIRED LENGTH\n         L     R4,CSABUF               POINT TO BUFFER\n         L     R5,LENGTH               GET ACTUAL LENGTH MOVED\n*\n*        NOTE THAT ORIG(R2) IS EFFECTIVELY AT R4\n*        FIRST BYTE DESIRED IS FIRST BYTE IN BUFFER\n*\n         MVCL  R2,R4                   MOVE IN CORE\n         L     R2,CSASTAR              GET START LOC\n         A     R2,LENGTH               PLUS LENGTH MOVED\n         ST    R2,CSAEND               SET CORRECT END ADDR\n         MVC   LOGOOD,CSASTAR          SET LOW RANGE DISPLAYABLE\n         MVC   HIGOOD,CSAEND           AND HIGH RANGE\n         MVC   12+12(4,R13),LENGTH     SET GOTTEN LENGTH\n         LM    R14,R8,12(R13)          RESTORE REGS\n         LTR   R1,R1                   ANY LENGTH GOTTEN\n         BZR   R14                     IF NOT THEN EXIT +0\n         CR    R0,R1                   ALL DESIRED GOTTEN\n         BH    4(R14)                  IF NOT ALL THEN +4\n         B     8(R14)                  ALL DESIRED GOTTEN THEN +8\n*\n*        IF ANY ERRORS GIVE ERROR MSG AND RETURN +0\n*\nFAIL     DS    0H\n         DC    H'0'\n         MVC   MSGLINE,SRBMSG          MOVE IN MESSAGE\n         MVC   CURRENT+2(2),FLAG1\n         B     FAILALL                 GO TO COMMON ROUTINE\n*\n*        IF NOT AUTHORIZED TO DISPLAY OTHER ASIDS GIVE MSG AND RESET\n*\nFAIL2    DS    0H\n         MVC   MSGLINE,AUTHMSG         MOVE IN MESSAGE\n         B     FAILALL                 GO TO COMMON ROUTINE\n*\n*        IF ASID IS NOT VALID OR SWAPPED OUT GIVE MSG AND RESET\n*\nFAIL3    DS    0H\n         MVC   MSGLINE,BDASMSG         MOVE IN MESSAGE\nFAILALL  DS    0H                      COMMON FAILURE ROUTINE\n         MVC   CSASTAR,=F'0'           CLEAR THE START\n         MVC   CSAEND,=F'0'              AND END ADDR\n         MVC   CSAASID,=H'0'               AND THE ASID\n         MVC   CURASID,MYASID          RESET ASID AVAIL\n         RETURN (14,8)\n*\n*        STIMER EXIT ROUTINE\n*        ITS PURPOSE IS TO POST THE ECB AT ECB2 AND WAKE UP THE\n*        LOOK PROCESSOR IF THE SRB FAILS.  TO DO THIS WE MUST\n*        FIND THE ADDRESS OF THE ECB WHICH IS SAVED IN R3 OF\n*        THE RB ABOVE THE WAIT.  IN THAT RB, R2 IS SET TO 'ABCD'.\n*\n         USING *,R12\nD#STX    SAVE  (14,12)                 SAVE REGISTERS\n         LR    R12,R15                 SET BASE REG\n         L     R3,CVTPTR               POINT AT CVT\n         L     R3,0(R3)                POINT AT TCB WORDS\n         L     R3,0(R3)                POINT AT MY TCB\n         L     R3,0(R3)                POINT AT MY RB\n         USING RBBASIC,R3\nD#STX1   DS    0H                      NOW LOOK FOR KEY IN REG2\n         CLC   RBGRS2,=C'ABCD'         IS THE KEY HERE\n         BE    D#STX2                  YES\n         TM    XSTAB2,RBTCBNXT         TEST TCB FLAG\n         BO    D#STX3                  IF NOT FOUND PROPER RB\n         L     R3,RBLINK               POINT AT PREVIOUS RB\n         B     D#STX1\nD#STX2   L     R2,RBGRS3               GET ADDR OF ECB TO POST\n         POST  (R2)                    WAKE UP LOOK\n         RETURN (14,12)\n*\n*        IF WE CANT FIND THE RB THEN DUMP\n*\nD#STX3   DC    H'0'\n         DROP  R12,R3\n         LTORG\n         TITLE 'LOOK --  STORAGE ALTER/DISPLAY - SRB MODE CODE'\n         DROP  R9\nD#SRBCD  DS    0D\n*\n*        THIS CODE PERFORMS THE FOLLOWING FUNCTIONS\n*              1 ESTABLISHES AN FRR FOR ERROR RECOVERY\n*              2 VERIFIES THAT THE ADDRESSES THAT ARE NEEDED DO\n*                EXIST.\n*              3 PERFORM THE MODIFICATION IF ALLOW AND NECESSARY\n*              4 SAVE THE PROPER CORE FOR DUMPING.\n*              5 CROSS-MEMORY POST THE MAIN COMMAND PROCESSOR\n*\n         USING WORK,R8\n         USING D#SRBCD,R7\n         LR    R8,R1          SET THE MAIN PARM DSECT\n         LR    R7,R15         SET THE BASE REGISTER\n         ST    R14,ASRBRTN    SAVE RETURN ADDR\n         TM    FLAG1,FG1SUBR  IS THIS A SUBROUTINE CALL\n         BO    D#SRB1         YES SO SKIP FRR\n         LA    R5,D#FRRCD     POINT AT FRR CODE\n         SETFRR  A,FRRAD=(R5),WRKREGS=(2,3),PARMAD=(R4)\n         ST    R4,FRRPRMS     SAVE ADDR OF FRRPRMS\n*\n*        NOW INIT THE FRR PARM AREA AND VALIDATE THE INPUT ADDR\n*\nD#SRB1   L     R2,FRRPRMS     ACCESS THE 6 WORK PARM AREA\n         STM   R7,R8,0(R2)    SAVE BASE AND WORK REGS\n*\n*        MOVE MEMORY\n*\n         L     R2,ADDR                 SET START ADDR\n         LA    R0,BUF                  POINT AT BUFFER\n         L     R1,LENGTH               GET DESIRED LENGTH\n         LR    R3,R1                   SET LENGTH\n         OI    FLAG1,FG1MOVE           INDICATE IN MOVE\n         MVCL  R0,R2                   MOVE IN CORE\n         NI    FLAG1,255-FG1MOVE       NOTE NOT IN MOVE\n*\n*        NOW WE TERMINATE PROCESSING BY DOING A CROSS\n*        MEMORY POST IF NOT IN SUBROUTINE MODE\n*\nFRRRTY   TM    FLAG1,FG1SUBR  IS THIS SUBROUTINE MODE\n         BO    D#EXIT         IF SO THEN EXIT\n         SETFRR  D,WRKREGS=(2,3)\nFRRPOST  L     R10,=A(X'40000000') SET CODE FOR POST\n         LR    R9,R8          SAVE WORK POINTER IN SAFE REG\n         LA    R11,ECB        ADDR OF ECB TO POST\n         ICM   R11,8,=X'80'   FLAG AS XMPOST\n         LA    R12,D#POSTR    SET POST ERROR RETURN\n         L     R13,MYASCB     ASCB TO POST\n         L     R15,CVTPTR     POINT AT CVT\n         L     R15,CVT0PT01-CVTMAP(R15)    GET POST ENTRY POINTR\n         BALR  R14,R15        GO DO POST\n         DROP  R7             KILL MAIN ADDRESS\n         USING *,R14          SET TEMP BASE\nD#PRTN   LR    R8,R9          RESET BASE OF WORK\n         SL    R14,=A(D#PRTN-D#SRBCD)  NOW HAVE CORRECTED BASE\n         LR    R7,R14         SET TO PROPER REG\n         DROP  R14\n         USING D#SRBCD,R7     RESET MAIN BASE\n         OI    FLAG1,FG1SRDN  FLAG SRB AS COMPLETED\nD#EXIT   L     R14,ASRBRTN    RESTORE RETURN ADDR\n         BR    R14            EXIT\n         SPACE 5\n*\n*        POST ERROR ROUTINE  .. FLAG ERROR AND LET TIMER\n*        WAKE UP TASK\n*\nD#POSTR  LR    R8,R9          RESET WORK BASE\n         OI    FLAG2,FG2PSTR  FLAG POST ERROR\n         BR    R14            RETURN TO D#PRTN\n         TITLE 'LOOK --  STORAGE ALTER/DISPLAY - FRR FOR SRB'\nD#FRRCD  DS    0D\n         L     R2,0(R1)       POINT AT PARM AREA\n         LM    R7,R8,0(R2)    SET BASE REGS\n         TM    FLAG1,FG1MOVE  ARE WE IN VALIDATION\n         BZ    D#FRR1         NOPE\n*\n*        MOVE INCOMPLETE\n*\n         NI    FLAG1,255-FG1MOVE       TURN OFF FLAG\n         CLI   SDWAICD1-SDWA(R1),X'04' PROTECTION??\n         BNE   D#FRR0A                 IF NOT THEN TRY OTHERS\n*        IF PROTECTION THEN DATA TO POINT OF ERROR\n*        HAS BEEN MOVED SO JUST ADJUST LENGTH\n         L     R2,LENGTH\n         S     R2,SDWAGR01-SDWA(R1)    GET LENGTH NOT MOVED\n         ST    R2,LENGTH               SAVE MOVED LENGTH\n         B     D#FRR0                  ALL DONE\n*        IF ADDRESSING EXCEPTION THEN\n*        REGISTERS NOT ALWAYS UPDATED (PER POPS)\n*        BUT THE TRANSLATION ADDR IS CLOSE.\n*        ALSO NO DATA MAY HAVE BEEN MOVED.\n*        (WE ARE DEALING HERE WITH WHAT MAY BE \"MODEL DEPENDENT\"\n*        FEATURES)\nD#FRR0A  DS    0H\n         L     R2,SDWATRAN-SDWA(R1)    GET BAD ADDRESS\n         N     R2,=X'7FFFF000'         GET PAGE BOUNDARY\n         S     R2,ADDR                 LESS START ADDR\n         LTR   R2,R2                   ANY GOOD LENGTH\n         BNP   D#FRR0                  NOPE\n         C     R2,LENGTH               MAKE SURE IT IS REASONABLE\n         BH    D#FRR0                  SKIP IF NOT\n         ST    R2,LENGTH               SAVE AS GOTTEN LENGTH\n         LR    R3,R2                   SETUP LENGTH\n         LR    R7,R2\n         L     R2,ADDR                 GET FROM ADDR\n         LA    R6,BUF                  GET TO ADDRESS\n         MVCL  R6,R2\nD#FRR0   OI    FLAG2,FG2IVLD  SET FLAG FOR MESSAGE\n         SETRP RECORD=NO,RC=4,RETADDR=FRRRTY,REGS,DUMP=NO,             X\n               RETREGS=YES,FRESDWA=YES\n         BR    R14            EXIT\n         SPACE 5\n*\n*        ALL OTHER ERRORS\n*\nD#FRR1   OI    FLAG2,FG2ERRR  SET FLAG FOR MESSAGES\n         SETRP RECORD=YES,RC=4,RETADDR=FRRRTY,REGS,DUMP=YES,           X\n               RETREGS=YES,FRESDWA=YES\n         BR    R14            EXIT\n         TITLE 'LOOK --  STORAGE ALTER/DISPLAY - RESOURCE MGR. CLEANUP'\n*\n*        THIS ROUTINE RECEIVES CONTROL IF THE SRB MUST BE\n*        PURGED.\n*\nD#RMTR   DS    0H\n         USING *,R15\n         LR    R7,R15         SET BASE REGISTER\n         SL    R7,=A(D#RMTR-D#SRBCD)   BY COMPUTATION\n         DROP  R15\n         USING D#SRBCD,R7\n         LR    R8,R2          SET UP POINTER TO WORK\n         ST    R14,ASRBRTN    SAVE RETURN ADDR\n         OI    FLAG2,FG2PURG  SET PURGED\n         B     FRRPOST        GO AND POST TO CLEAN UP\n         LTORG\nENDSRB   EQU   *\nSRBCODE  EQU   *-D#SRBCD               LENGTH OF SRB CODE\n         TITLE 'LOOK --  STORAGE ALTER/DISPLAY - MESSAGES, CONSTANTS'\nKEY1 DC CL80'1= HELP      2=           3= END        4=           5= REX\n               PEAT  6=          '\nKEY2 DC CL80'7= BACKWORD  8= FORWARD   9= HIST BWD  10= HIST FWD 11=   X\n                    12=          '\n* ERROR MESSAGE FOR BAD INPUT\nTITLE    DC    CL79' '\nMODEMSG  DC    CL79'***** INVALID MODE'\nINVALOP  DC    CL79'***** INVALID OPERATOR'\nSYMFULL  DC    CL79'***** SYMBOL TABLE IS FULL'\nNAMEMSG  DC    CL79'***** UNDEFINED SYMBOL'\nDEFMSG   DC    CL79'***** NULL SYMBOL OR SYMBOL TOO LONG'\nPCMSG    DC    CL79'***** PROGRAM CHECK'\nLINKMSG  DC    CL79'***** LINK FAILED'\nSRBMSG   DC    CL79'***** SRB DATA FETCH FAILED'\nAUTHMSG  DC    CL79'***** LOOK NOT CURRENTLY AUTHORIZED. REQUEST DENIEDX\n               .'\nBDASMSG  DC    CL79'***** ASID INVALID OR SWAPPED OUT.'\nBADIMSG  DC    CL79'***** INDIRECT FAILED.'\nASIDFMT  DC    CL13'DISPLAY ASID='\nHEXTAB   DC    256C' '                 GENERAL HEX CONVERSION TABLE\nERRMSG   DC    CL79'INVALID ADDRESS -- TRY AGAIN'\nBLANKS   DC    CL79' '\n         EJECT\n         ORG   HEXTAB+C'A'             INPUT CONVERSION\n         DC    X'0A0B0C0D0E0F'\n         ORG   HEXTAB+C'0'             OUTPUT CONVERSION\n         DC    C'0123456789ABCDEF'\n         ORG\n* HEX INPUT TRT TABLE\nNUMTAB   DC    256X'1'\n         ORG   NUMTAB+C'A'\n         DC    6X'0'\n         ORG   NUMTAB+C'0'\n         DC    10X'0'\n         ORG\nVALCHAR  DC    256C'.'                 TRANSLATE TO VALID CHARS\n         ORG   VALCHAR+C' '\n         DC    C' '\n         ORG   VALCHAR+C'\u00a2'\n         DC    C'\u00a2.<(+|&&'\n         ORG   VALCHAR+C'!'\n         DC    C'!$*);\u00ac-/'\n         ORG   VALCHAR+C','\n         DC    C',%_.?'\n         ORG   VALCHAR+C':'\n         DC    C':#@''=\"'\n         ORG   VALCHAR+C'A'\n         DC    C'ABCDEFGHI'\n         ORG   VALCHAR+C'J'\n         DC    C'JKLMNOPQR'\n         ORG   VALCHAR+C'S'\n         DC    C'STUVWXYZ'\n         ORG   VALCHAR+C'0'\n         DC    C'0123456789'\n         ORG\n         LTORG\n         SPACE 2\n*        SCREEN DEFINITION AREA\nQDINIT   DS    0D             START OS DISPLAY WORK AREA\n         DC    F'0'           ORIG SCREEN DEPTH\n         DC    F'0'           ORIG SCREEN LINESZ\n         DC    H'80'          LENGTH OF DISPLAY LINE\n         DC    PL2'21'        LINES PER SCREEN\n         DS    0D\n         DS    0CL69\n         DC    CL6' '\n         DC    CL63' '\n         DC    CL63' '        CORRECTED DATA FROM SCREEN\n         DS    0C             DISPLAY SCREEN\n         DC    X'27'          CONTROL\n         DC    X'F5'          ERASE/WRITE\n         DC    X'C1115D7F1140403C404000' CLEAR SCREEN\n         DC    CL43'LOOK COMMAND - DISPLAY AND ZAP MEMORY' TITLE LINE\n         DC    CL13'DISPLAY ASID='\n         DC    X'1DC8'        MARK NEXT FIELD AS INPUT FIELD\n         DC    CL4' '         IN/OUT FOR ASID\n         DC    X'1DF0'        TERMINATE INPUT FIELD\n         DC    X'11'          SET BUFFER ADDRESS\n         DC    X'C150'        (2,1)\n         DC    C'ENTER CMD -'     REPLY PROMPT\n         DC    X'1DC8'        MARK NEXT FIELD AS INPUT FIELD\n         DC    X'13'          SET CURSOR ADDRESS\n         DC    X'11'          SET BUFFER ADDRESS\n         DC    X'C25B'        (2,76)\n         DC    X'1DF0'        TERMINATE INPUT FIELD\n         DC    X'11'          SET BUFFER ADDRESS\n         DC    X'C260'        (3,1)\n         DC    C'LAST CMD  - '\n         DC    CL63' '        PREVIOUS COMMAND\n         DC    X'11'          SET BUFFER ADDRESS\n         DC    X'C3F0'        (4,1)\n         DC    CL79' '\n         DC    C' '\n         DC    16CL80' '      MESSAGE TEXT AREA\n         DC    2CL80' '\n         DC    2CL80' '       PFK DISPLAY AREA\nHELPMSG  DS    0H\n DC CL80'LOOK IS A REAL TIME CORE DISPLAY AND FORMATING PROGRAM. IT ALSX\n               O HAS THE         '\n DC CL80'CAPABILITY OF DISPLAYING MEMORY IN ANY ADDRESS SPACE (IF AUTHOX\n               RIZED).           '\n DC CL80'                                                              X\n                                 '\n DC CL80'THE VALID COMMANDS ARE:                                       X\n                                 '\n DC CL80'IEXP  24 BIT INDIRECT                 | JEXP  31 BIT INDIRECT X\n                                 '\n DC CL80'>     FORWARD                         | <     BACLWORD        X\n                                 '\n DC CL80'=SYM  DEFINE CURRENT ADDRESS AS ''SYM'' | ,SYM  REDISPLAY COREX\n                AT ''SYM''           '\n DC CL80'M0/M1 FLIP BETWEEN TOP AND CENTER     | LNAME INDIRECT THRU COX\n               NTROL BLOCK FIELD '\n DC CL80'OCB   FORMAT AS ''CB'' CONTROL BLOCK    | R     REFRESH DISPLAX\n               YED STORAGE         '\n DC CL80'                                                              X\n                                 '\n DC CL80'WHERE ''EXP'' IS OF THE FORM:                                 X\n                                   '\n DC CL80'    <+/->HHHH<+/-HHHH<+/-HHHH...>>                            X\n                                 '\n DC CL80'AND ''HHHH'' IS A 1 TO 8 DIGIT HEX NUMBER.                    X\n                                   '\n DC CL80'                                                              X\n                                 '\n DC CL80'                                                              X\n                                 '\n DC CL80'                                                              X\n                                 '\n         TITLE 'LOOK --  STORAGE ALTER/DISPLAY - WORK AREAS, DSECTS'\n*----------------------------------------------------------------------\n*\n* HIST -- HISTORY ENTRY FOR ONE OR MORE PREVIOUS ENTRIES\n*\n*----------------------------------------------------------------------\n         SPACE 2\nHIST     DSECT\nHISTADDR DS    A                       ADDR OF STORAGE/MAIN CB ADDRES\nHISTCBHP DS    A                       0 IF NO CB\n*                                      X'7FFFFFFF' IF OVERLAY NULL\n*                                      ADDR OF CBH IF CB DISPLAYED\nHISTCBSP DS    A                       ADDR OF CBS DISPLAYED\nHISTSADR DS    A                       ADDR OF STORAGE FOR THIS SEG\nHISTLEN  EQU   *-HIST                  LENGTH OF ENTRY\n         SPACE 5\n*----------------------------------------------------------------------\n*\n* CBH  -- CONTROL BLOCK HEADER  -  ONE FOR EACH DIFFERENT CONTROL BLK\n*\n*----------------------------------------------------------------------\n         SPACE 2\nCBH      DSECT\nCBHNEXT  DS    A                       ADDR OF NEXT CONTROL BLOCK OR 0\nCBHVOFF  DS    A                       OFFSET OF VALIDATION FIELD\nCBHCBSP  DS    A                       ADDR OF FIRST SEG DESCIPTOR\nCBHNAME  DS    CL8                     NAME OF BLOCK\nCBHVLEN  DS    X                       LENGTH OF VALIDATION FIELD\nCBHVAL   DS    0X                      VALIDATION DATA\n         SPACE 5\n*----------------------------------------------------------------------\n*\n* CBS  -- CONTROL BLOCK SEGMENT\n*\n*----------------------------------------------------------------------\n         SPACE 2\nCBS      DSECT\nCBSPREV  DS    A                       ADDRESS OF PREVIOUS SEGMENT\nCBSNEXT  DS    A                       ADDRESS OF NEXT SEGMENT\nCBSDLEN  DS    AL2                     LENGTH OF DATA TO FETCH\nCBSDOFF  DS    AL2                     OFFSET OF DATA TO FETCH\nCBSILEN  DS    AL2                     LENGTH OF INDIRECT TO FETCH\nCBSIOFF  DS    AL2                     OFFSET OF INDIRECT TO FETCH\nCBSLEN   EQU   *-CBS                   LENGTH OF SEGMENT HEADER\n         SPACE 5\n*----------------------------------------------------------------------\n*\n* CBF  -- CONTROL BLOCK FIELD\n*\n*----------------------------------------------------------------------\n         SPACE 2\nCBF      DSECT\nCBFNAME  DS    CL8                     NAME OF FIELD\nCBFTYPE  DS    CL1                     TYPE OF NAME\nCBFDLEN  DS    XL1                     LENGTH OF DATA TO DISPLAY\nCBFOFFS  DS    H                       OFFSET INTO BLOCK START\nCBFLINE  DS    H                       LINE NUMBER TO PUT ON\nCBFCOLM  DS    H                       COLUMN TO START IN\nCBFLEN   EQU   *-CBF\n         EJECT\n*----------------------------------------------------------------------\n*\n*   MAIN DYNAMIC WORK AREA\n*\n*----------------------------------------------------------------------\nWORKAREA DSECT\nSAVE     DS    18F\nHISTORY  DS    F                       HISTORY TABLE ADDRESS\nNAMES    DS    150F                    SYMBOL TABLE\nCURRENT  DS    H                       HIST TABLE OFFSET\nESTAE    ESTAE 1,PARAM=0,MF=L      ROOM FOR ESTAE PARM LIST\n         DS    0F,H                SPACER\nESRUB    DS    H                   BIT INDICATOR SHOULD BE X'0074'\nBASE1    DS    F                   FIRST BASE REG\nBASR10   DS    F                   NROMAL R10\nBASE2    DS    F                   SECOND BASE REG\nBASR13   DS    F                   NORMAL R13\nTEMP1    DS    CL9                     CONVERSION WORK AREA\nTEMP2    DS    CL9                     CONVERSION WORK AREA\nLOGOOD   DC    F'0'\nHIGOOD   DC    XL4'FFFFF123'\nCSALEN   DS    F                       SP AND LEN OF CSA WORK AREA\nCSAWORK  DS    A                       ADDRESS OF CSA WORKAREA\nCSABUF   DS    A                       ADDRESS OF CSA DATA BUFFER FOR\n*                                      SRB\nCSASTAR  DS    A                       USERS ADDR OF BEGINNING OF\n*                                      BUFFER DATA\nCSAEND   DS    A                       USERS ADDR OF END OF BUFFER DATA\nCSAASID  DS    H                       USERS ASID FOR BUFFER DATA\nMYASID   DS    H                       DCMS ASID\nCURASID  DS    H                       DISPLAYED CORE ASID\nSAVEASID DS    CL4                     FORMATED VERSION OF CURASID\nFLAGS    DS    X                       ASSORTED FLAGS\nINDFLAG  EQU   X'80'                   INDIRECT IN PROGRESS\nNOAUTH   EQU   X'40'                   IF ON THEN NOT AUTHORIZED\nGETINPG  EQU   X'20'                   ON IF GETSTOR IN PROGRESS (SUBR)\nRFRSH    EQU   X'10'                   ON TO REFRESH CSA BUFFER\nIND31    EQU   X'08'                   31 BIT INDIRECT IN PROGRESS\nMODEFLAG DS    X                       USER OPTION FLAGS\nMIDDUMP  EQU   X'80'                   ON TO FORCE DISPLAY BACK 8 LINES\nALIGN    EQU   X'40'                   ON TO ALIGN DUMP ON QUADWORD\n         SPACE 2\n*        SCREEN DEFINITION AREA\nQDISPLAY DS    0D             START OS DISPLAY WORK AREA\nQDOSZR0  DC    F'0'           ORIG SCREEN DEPTH\nQDOSZR1  DC    F'0'           ORIG SCREEN LINESZ\nQDLNELEN DC    H'80'          LENGTH OF DISPLAY LINE\nQDLNES   DC    PL2'21'        LINES PER SCREEN\n         DS    0D\nPFREPLY  DS    0CL69\nPFCODE   DC    CL6' '\nPFTXT    DC    CL63' '\nINPLINE  DC    CL63' '        CORRECTED DATA FROM SCREEN\nQDSCREEN DS    0C             DISPLAY SCREEN\n         DC    X'27'          CONTROL\n         DC    X'F5'          ERASE/WRITE\n         DC    X'C1115D7F1140403C404000' CLEAR SCREEN\n         DC    CL43'LOOK COMMAND - DISPLAY AND ZAP MEMORY' TITLE LINE\nASIDLN   DC    CL13'DISPLAY ASID='\n         DC    X'1DC8'        MARK NEXT FIELD AS INPUT FIELD\nASIDLN1  DC    CL4' '         IN/OUT FOR ASID\n         DC    X'1DF0'        TERMINATE INPUT FIELD\n         DC    X'11'          SET BUFFER ADDRESS\n         DC    X'C150'        (2,1)\n         DC    C'ENTER CMD -'     REPLY PROMPT\n         DC    X'1DC8'        MARK NEXT FIELD AS INPUT FIELD\n         DC    X'13'          SET CURSOR ADDRESS\n         DC    X'11'          SET BUFFER ADDRESS\n         DC    X'C25B'        (2,76)\n         DC    X'1DF0'        TERMINATE INPUT FIELD\n         DC    X'11'          SET BUFFER ADDRESS\n         DC    X'C260'        (3,1)\n         DC    C'LAST CMD  - '\nINPSAVE  DC    CL63' '        PREVIOUS COMMAND\n         DC    X'11'          SET BUFFER ADDRESS\n         DC    X'C3F0'        (4,1)\nMSGLINE  DC    CL79' '\n         DC    C' '\nOUT1     DC    16CL80' '      MESSAGE TEXT AREA\nOUT9     EQU   OUT1+(8*80)\n         DC    2CL80' '\nKEYS     DC    2CL80' '       PFK DISPLAY AREA\nQDISPLN  EQU   *-QDISPLAY     LENGTH OF ENTIRE DISPLAY\nQDSLNG   EQU   *-QDSCREEN     LENGTH OF SCREEN BUFFER\n*\n**       AREA TO HOLD DATA RETURNED BY GETSTOR\n*\nDUMPDATA DS    XL4096                  DATA RETURNED BY GETSTOR\nWORKLEN  EQU   *-WORKAREA\n         EJECT\n         PRINT NOGEN\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*        END\n         IHAASCB\n         IHAASVT\n         IHAFRRS\n         IHAPSA\n         IHASDWA\n         IHASRB\n         IHARB\n         CVT   DSECT=YES\n         EJECT\n*\n*        CSA AREA WORK AREA\n*\nWORK     DSECT\nWORKSTRT DS    0D\nDOUBLE   DS    2F\nDMYPRMS  DS    6F             DUMMY AREA FOR FRR PARMS FOR SUBR MODE\nFRRPRMS  DS    F              ADDRESS OF 6 WORD FRR PARM\nASRBRTN  DS    F              RETURN ADDR FOR SRB CODE\nMYASCB   DS    F              ASCB ADDR OF MAIN ROUTINE\nMYTCB    DS    F              TCB ADDRESS FOR MAIN ROUTINE\nTOASCB   DS    F              ASCB ADDR OF SRB ROUTINE\nECB      DS    F              ECB FOR MAIN ROUTINE TO WAIT ON\nECB2     DS    F              ECB FOR STIMER TO POST\nECBLIST  DS    2F\nLENGTH   DS    F              LENGTH OF STORAGE TO DUMP\nSRBAREA  DS    ((SRBSIZE+3)/4)F  THE SRB ITSELF\nADDR     DS    F              ADDRESS TO PROCESS AT\nASID     DS    H              ASID OF TOASCB\nFLAG1    DS    X\nFG1DUMP  EQU   X'80'\nFG1REP   EQU   X'40'\nFG1MOVE  EQU   X'20'                   IF ON DOING MVCL FOR DATA\nFG1SRDN  EQU   X'02'          IF ON SRB HAS TERMINATED\nFG1SUBR  EQU   X'01'\nFLAG2    DS    X\nFG2NVER  EQU   X'01'          VERIFICATION FAILED\nFG2IVLD  EQU   X'02'          VALIDATION FAILED\nFG2ERRR  EQU   X'04'          DISASTER OCCURED IN SRB\nFG2PURG  EQU   X'08'          SRB WAS PURGED\nFG2PSTR  EQU   X'10'          IF ON THEN SRB POST HAD ERROR\nSRBCCD   DS    0D                      ALIGN SRB CODE ON DBL WORD\n         DS    (SRBCODE)X\n         DS    0D                      ALIGN BUFFER\nBUF      DS    4096X\nWORKLN   EQU   *-WORKSTRT\n         END\n//L.SYSLMOD DD DSN=TEST.PGM.LOAD(LOOK),DISP=SHR\n//L.SYSIN DD *\n   INCLUDE SYSLIB(LOOK)\n//SYSLIB DD DSN=XSDMN.PROD.LOAD,DISP=SHR\n\n   SETCODE      AC(1)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LSPACEXA": {"ttr": 3845, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x00\\x941\\x9f\\x00\\x98)\\x9f\\x11#\\x01\\x02\\x00\\xdb\\x00\\x00\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1994-11-15T00:00:00", "modifydate": "1998-10-26T11:23:00", "lines": 258, "newlines": 219, "modlines": 0, "user": "XSDMN"}, "text": "//ED115LSP JOB MSGCLASS=X,CLASS=Q,NOTIFY=XSDMN\n//ASMHCL   PROC MAC1='SYS1.MACLIB',MAC2='SYS1.MODGEN'\n//ASM    EXEC  PGM=IEV90,PARM='NODECK,OBJECT',REGION=1M\n//SYSLIB   DD  DSN=&MAC1,DISP=SHR\n//         DD  DSN=&MAC2,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  SYSOUT=B,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))\n//SYSPRINT DD SYSOUT=*,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//LKED EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL,AMODE=24,RMODE=24',      *\n//        REGION=1M,COND=(8,LT,ASM)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD DD DISP=(,PASS),UNIT=SYSDA,                                  *\n//        SPACE=(CYL,(2,1,2)),DSN=&&GOSET(GO)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=*\n//  PEND\n// EXEC ASMHCL\nLSPACE   CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*VTPTR   EQU   X'010'\n*VTUCBSC EQU   X'434'\n         USING *,R15\n         STM   R14,R12,12(R13)\n         LA    R12,SAVE\n         ST    R12,8(R13)\n         ST    R13,SAVE+4\n         LR    R13,R12\n         LR    R12,R15\n         USING LSPACE,R12\n         DROP  R15\n         L     R2,0(R1)\n         LA    R3,0\n         LH    R3,0(R2)\n         ST    R3,PFLAG\n         OPEN  (SYSPRINT,OUTPUT)\n         PUT   SYSPRINT,HDR1\n         PUT   SYSPRINT,HDR2\n         PUT   SYSPRINT,HDR3\n         PUT   SYSPRINT,HDR4\n         PUT   SYSPRINT,HDR5\n         PUT   SYSPRINT,HDR6\n*        L     R6,CVTPTR\n*        USING CVT,R6\n*        L     R15,CVTUCBSC\n*        ST    R15,SCANADDR\n*EXTUCB  L     R15,SCANADDR\n*        CALL (15),(WORKAREA,DEVCLASS,ADDRUCB),VL\n*        LTR   R15,R15\n*        BNZ   ENDJC\n         LA    R0,4095\n         GETMAIN R,LV=(0)\n         LR    R5,R1\nNEXTUCB  LA    R6,WORKAREA\nU        UCBSCAN COPY,WORKAREA=WORKAREA,UCBAREA=UCBAREA,RANGE=ALL,     1\n               DYNAMIC=YES,DEVCLASS=DASD,RETCODE=RET,RSNCODE=RSN\n*        SR    R6,R6\n         L     R6,RET\n         LTR   R6,R6\n         BNZ   ENDJCE\n         MVC   0(48,R5),UCBAREA\n         B     CONT\nENDJCE   L     R6,RET\n         CVD   R6,WORK\n         OI    WORK+7,X'0F'\n         UNPK  HDR7(4),WORK+6(2)\n         L     R6,RSN\n         CVD   R6,WORK\n         OI    WORK+7,X'0F'\n         UNPK  HDR7+8(4),WORK+6(2)\n*        PUT   SYSPRINT,HDR7\n         B     ENDJC\nCONT     DS    0H\n*ONT     PUT   SYSPRINT,HDR7\n*        L     R5,ADDRUCB   UCB ADDRESSES\n*        LR    R6,R5\n*        LTR   R6,R6        CHECK FOR VALID ENTRIES\n*        BZ    INCR1        UCB HOLE\n*        C     R6,FMIN1     CHECK FOR END\n*        BE    ENDJC\n*        CLI   18(R6),X'20' MUST BE DIRECT ACCESS\n*        BNE   INCR1\n*        C     R6,LASTADR   UCB ADDRESSES MUST INCREASE\n*        BNH   INCR1        OTHERWISE THEY REPEAT.\n*        ST    R6,LASTADR   NEW ADDRESS\n         USING UCBCMSEG,R5\n*        B     FNDUCB\nFNDGBL   TM    3(R5),X'80'      ONLINE BIT\n         BZ    INCR1        NOPE\nCHKRDY   TM    6(R5),X'40'    TEST READY BIT\n         BO    INCR1        NOT READY\n         TM    17(R5),X'08' VIRTUAL UCB\n         BO    INCR1        YES\n         B     FNDUCB\nINCR1    DS    0H\n         B     NEXTUCB      TRY NEXT UCB\n*\n**  MOVE UCB INFORMATION TO OUTPUT LINE\n*\nFNDUCB   MVC   VOLID,28(R5) MOVE VOLID\n         MVC   ADDR,13(R5)  MOVE UNIT ADDRESS\n         MVC   PG,=C'      '\n         MVC   MTD,=C'    '\n         TM    34(R5),X'40'    TEST PAGE PK\n         BNO   TPBL            TO TEST PUBLIC\n         MVC   PG,=C'PAGEPK'\nTPBL     TM    34(R5),X'08'    TEST PUBLIC\n         BNO   TSTG            TO TEST STORAGE\n         MVC   MTD,=C'SCR'     WAS PUBLIC\n         B     NPRIV\nTSTG     TM    34(R5),X'04'    TEST STORAGE\n         BNO   NPRIV           TO TEST SYSRES\n         MVC   MTD,=C'STG'     WAS STORAGE\nNPRIV    MVC   SY,=C'      '\n         TM    3(R5),X'02'     TEST SYSRES\n         BNO   NDM             NOT SYSRES\n         MVC   SY,=C'SYSRES'   WAS SYSRES\n*\n**  IF OFFLINE, DO NOT PROCESS\n*\n*DM      TM    3(R5),X'40'  PENDING BIT - SHOULD BE OFF\n*        BO    INCR1\n*        TM    3(R5),X'80'  ONLINE BIT - SHOULD BE ON\n*        BZ    INCR1\n*\n*\nNDM      LA    R1,LSP       POINT TO WORKAREA\n         LR    R0,R5        POINT TO UCB\n         SVC   78           ISSUE LSPACE SVC\n         MVC   O1,ADDR\n         MVC   O2,VOLID\n         MVC   O3,I3\n         MVC   O4,I4\n         MVC   O5,I5\n         MVC   O6,I6\n         MVC   O7,I7\n         MVC   O8,MTD\n         MVC   O9,SY\n         MVC   O10,PG\n         MVC   O11,=C'          '\n         TM    34(R5),X'04'    TEST STORAGE\n         BNO   PUTNSTG\n         CLC   VOLID(3),=C'C48'\n         BE    C48\n         CLC   I3,=C'0111'\n         BH    PUTST\n         MVC   O11,CMT\n         B     PUTST\nC48      CLC   I3,=C'0177'\n         BH    PUTST\n         MVC   O11,CMT\n         B     PUTST\nPUTNSTG  DS    0H\n         LA    R1,1\n         L     R2,PFLAG\n         CR    R1,R2\n         BE    INCR1\nPUTST    PUT   SYSPRINT,OUT\n         B     INCR1\nENDJC    DS    0H\n         LR    R1,R5\n         LA    R0,4095\n         FREEMAIN R,LV=(0),A=(1)\n         CLOSE (SYSPRINT)\n         L     R13,4(R13)\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\nSYSPRINT DCB   DSORG=PS,MACRF=(PM),DDNAME=SYSPRINT,LRECL=79,RECFM=FB,  X\n               BLKSIZE=790\nSAVE     DC    19F'0'\nWORK     DS    D\nADDRUCB  DS    A\nWORKAREA DC    XL100'00'\nUCBAREA  DC    XL50'00'\nDEVCLASS DC    X'00'\n         DS    0F\nFMIN1    DC    X'0000FFFF'    END OF UCB LIST\nLASTADR  DS    F       LAST UCB ADDRESS FOUND ( NO DUP'S )\nPFLAG    DS    F       FLAG FOR PARM NEQ 0\nVOLSET   XC    LASTADR,LASTADR CLEAR THE UCB COMPARE ADDRESS\nADDR     DS    CL3     UCB ADDRESS IN CHARACTERS\nMTD      DS    CL3     VOLUME MOUNTED AS\nPG       DS    CL6     VOLUME ? PAGING\nSY       DS    CL6     ? SYSRES\nCMT      DC    CL10'>=80% FULL'\n         DC    CL1' '\nVOLID    DS    CL6     CURRENT VOLUME SERIAL NUMBER TO PROCESS\n         DC    CL1' '\nLSP      DS    0C\n         DS    CL6     'SPACE='\nI3       DS    CL4     TOTAL NUMBER OF FREE CYLINDERS\n         DS    CL1     ','\nI4       DS    CL4     TOTAL NUMBER OF FREE TRACKS\n         DS    CL1     ','\nI5       DS    CL4     NUMBER OF EXTENTS\n         DS    CL1     '/'\nI6       DS    CL4     LARGEST EXTENT OF CONTIG CYLINDERS\n         DS    CL1     ','\nI7       DS    CL4     LARGEST EXTENT OF CONTIG TRACKS\n         DS    39C' '\nHDR1     DC    CL80'            TOTAL  TOTAL  NUMBER  LARGEST LARGEST'\nHDR2     DC    CL80'            NUMBER NUMBER         CONTIG  CONTIG '\nHDR3     DC    CL80'UCB VOLSER    OF     OF     OF    EXTENT  EXTENT '\nHDR4     DC    CL80'             FREE   FREE           CYLS    TRKS  '\nHDR5     DC    CL80'             CYLS   TRKS  EXTENTS                '\nHDR6     DC    CL80'                                                 '\nHDR7     DC    CL80'?????????????????????????????????????????????????'\n*                   XXX XXXXXX   XXXX   XXXX   XXXX    XXXX    XXXX\nOUT      DS    0F\nO1       DS    CL3  XXX\n         DC    CL1' '\nO2       DS    CL6      XXXXXX\n         DC    CL3' '\nO3       DS    CL4               XXXX\n         DC    CL3' '\nO4       DS    CL4                      XXXX\n         DC    CL3' '\nO5       DS    CL4                             XXXX\n         DC    CL4' '\nO6       DS    CL4                                     XXXX\n         DC    CL4' '\nO7       DS    CL4                                             XXXX\n         DC    CL4' '\nO8       DS    CL3\n         DC    CL1' '\nO9       DS    CL6\n         DC    CL1' '\nO10      DS    CL6\n         DC    CL1' '\nO11      DS    CL10\n         DC    CL1' '\nSCANADDR DS    F\nRET      DC    F'0'\nRSN      DC    F'0'\n         LTORG\n         CVT DSECT=YES\n         IEFUCBOB LIST=YES\n         END\n//*KED.SYSLMOD DD DSN=SYS1.MISC.LINKLIB(LSPACE),DISP=SHR\n//LKED.SYSLMOD DD DSN=TEST.PGM.LOAD(LSPACE),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MDF": {"ttr": 3850, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x18\\x00\\x00\\x00\\x97\\x08\\x0f\\x00\\x970O\\x08\\x12\\x00\\x17\\x00\\n\\x00\\x00\\xc3\\xf4\\xc1\\xc4\\xd4\\xc4\\xd4@@@'", "ispf": {"version": "01.24", "flags": 0, "createdate": "1997-03-21T00:00:00", "modifydate": "1997-10-31T08:12:00", "lines": 23, "newlines": 10, "modlines": 0, "user": "C4ADMDM"}, "text": "     /* REXX */\nSAY 'SYS1.MAN ?'\nPULL N\nACT = \"ALLOC DD(DATLIB) DA('SYS1.MAN\" || N || \"') SHR\"\nACT = '\"' || ACT || '\"'\nINTERPRET ACT\n \"ALLOC DD(FT11F001) SYSOUT(Z) REUS\"\n\"FREE DD(FT12F001)\"\nIF SYSDSN(MDF) = 'OK' THEN\n\"DELETE MDF\"\nACT1 = \"ALLOC DD(FT12F001) BLKSIZE(9040) LRECL(80) RECFM(F B) NEW \"\nACT2 = \"DA(MDF) DSORG(PS) SPACE(2,2) TRACKS UNIT(SYSDA) \"\nACT3 = \"DELETE UNCATALOG\"\nACT = '\"' || ACT1 || ACT2 || ACT3 || '\"'\nINTERPRET ACT\n \"EDSAS609 OPTIONS('NOTES MACRO MACROGEN NOCAPS HSWORK')\n  INPUT('''C4ADMDM.ZDF(MDFSAS)''')\"\n\"FREE DD(DATLIB)\"\n\"FREE DD(FT11F001)\"\n\"ISPEXEC LMINIT DATAID(DATA1) DDNAME(FT12F001) ENQ(EXCLU)\"\n\"ISPEXEC BROWSE DATAID(&DATA1)\"\n\"ISPEXEC LMFREE DATAID(&DATA1)\"\n\"FREE DD(FT12F001) DELETE\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MDFSAS": {"ttr": 3852, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x97#?\\x00\\x97#?\\x13Y\\x01+\\x01*\\x00\\x01\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1997-08-21T00:00:00", "modifydate": "1997-08-21T13:59:00", "lines": 299, "newlines": 298, "modlines": 1, "user": "ED115DM"}, "text": "OPTIONS LINESIZE=80;\nTITLE 'SMF 70';\nDATA T70 (KEEP = TIMEOUT SMFXXSID\n        SMF70SSI          SMF70STY        SMF70TRN\n        SMF70RV1          SMF70PRS        SMF70PRL\n        SMF70PRN          SMF70CCS        SMF70CCL\n        SMF70CCN          SMF70CPS        SMF70CPL\n        SMF70CPN          SMF70ASS        SMF70ASL\n        SMF70ASN          SMF70BCS        SMF70BCL\n        SMF70BCN          SMF70BVS        SMF70BVL\n        SMF70BVN\n        )\n     PRODUCT (KEEP = TIMEOUT\n             SMF70MFV          SMF70PRD           SMF70IST\n             SMF70DAT          SMF70INT           SMF70MFL\n             SMF70SAM          SMF70RV2           SMF70FLA\n             SMF70RLS          SMF70CYC           SMF70MVS\n             SMF70IML          SMF70PRF           SMF70PTN\n             SMF70SRL          SMF70IET\n             )\n     CCONTROL (KEEP = TIMEOUT\n             SMF70MOD          SMF70VER\n             SMF70BNP          SMF70INB\n             SMF70RVA          SMF70GTS\n             )\n     CDATA    (KEEP = TIMEOUT\n             SMF70WAT          SMF70CID           SMF70CNF\n             SMF70RV3          SMF70SER           SMF70RV4\n             SMF70SLH          SMF70TPI           CPUBSYPC\n             SMF70VFS          SMF70V             SMF70AL1\n             )\n     ASID     (KEEP = TIMEOUT\n         SMF70RMN           SMF70RMM            SMF70RTT\n         SMF70R00           SMF70R01            SMF70R02\n         SMF70R03           SMF70R04            SMF70R05\n         SMF70R06           SMF70R07            SMF70R08\n         SMF70R09           SMF70R10            SMF70R11\n         SMF70R12           SMF70R13            SMF70R14\n         SMF70R15           SMF70IMN            SMF70IMM\n         SMF70ITT           SMF70I00            SMF70I01\n         SMF70I02           SMF70I03            SMF70I04\n         SMF70I05           SMF70I06            SMF70I07\n         SMF70I08           SMF70I09            SMF70I10\n         SMF70I11           SMF70OMN            SMF70OMM\n         SMF70OTT           SMF70O00            SMF70O01\n         SMF70O02           SMF70O03            SMF70O04\n         SMF70O05           SMF70O06            SMF70O07\n         SMF70O08           SMF70O09            SMF70O10\n         SMF70O11           SMF70WMN            SMF70WMM\n         SMF70WTT           SMF70W00            SMF70W01\n         SMF70W02           SMF70W03            SMF70W04\n         SMF70W05           SMF70W06            SMF70W07\n         SMF70W08           SMF70W09            SMF70W10\n         SMF70W11           SMF70BMN            SMF70BMM\n         SMF70BTT           SMF70B00            SMF70B01\n         SMF70B02           SMF70B03            SMF70B04\n         SMF70B05           SMF70B06            SMF70B07\n         SMF70B08           SMF70B09            SMF70B10\n         SMF70B11           SMF70SMN            SMF70SMM\n         SMF70STT           SMF70S00            SMF70S01\n         SMF70S02           SMF70S03            SMF70S04\n         SMF70S05           SMF70S06            SMF70S07\n         SMF70S08           SMF70S09            SMF70S10\n         SMF70S11           SMF70TMN            SMF70TMM\n         SMF70TTT           SMF70T00            SMF70T01\n         SMF70T02           SMF70T03            SMF70T04\n         SMF70T05           SMF70T06            SMF70T07\n         SMF70T08           SMF70T09            SMF70T10\n         SMF70T11           SMF70LMN            SMF70LMM\n         SMF70LTT           SMF70L00            SMF70L01\n         SMF70L02           SMF70L03            SMF70L04\n         SMF70L05           SMF70L06            SMF70L07\n         SMF70L08           SMF70L09            SMF70L10\n         SMF70L11           SMF70AMN            SMF70AMM\n         SMF70ATT           SMF70A00            SMF70A01\n         SMF70A02           SMF70A03            SMF70A04\n         SMF70A05           SMF70A06            SMF70A07\n         SMF70A08           SMF70A09            SMF70A10\n         SMF70A11           SMF70PMN            SMF70PMM\n         SMF70PTT           SMF70P00            SMF70P01\n         SMF70P02           SMF70P03            SMF70P04\n         SMF70P05           SMF70P06            SMF70P07\n         SMF70P08           SMF70P09            SMF70P10\n         SMF70P11\n             )\n     PRSM     (KEEP = TIMEOUT\n             SMF70LPM          SMF70LPN           SMF70PFG\n             SMF70BDN          SMF70BDS\n             )\n     LOGP     (KEEP = TIMEOUT\n             SMF70PDT          SMF70VPA           SMF70BPS\n             SMF70VPF          SMF70RVX           SMF70EDT\n                               SMF70RVY\n             )\n          ;\n  RETAIN V;\n  INFILE DATLIB JFCB=JF MISSOVER;\n  IF _N_ = 1 THEN DO;\n                  INPUT @;\n                  IF INDEX(JF,'SYS1.MAN') \u00ac=0 THEN V=4; ELSE V=0;\n                  END;\n  IF V=4 THEN\n      INPUT    SMFXXLEN PIB2. SMFXXSEG PIB2. @ ;\n  INPUT    SMFXXFLG PIB1. SMFXXRTY PIB1.\n                       @;\n  IF SMFXXRTY = 212 THEN DO;\n                        *PUT '212 DETECTED - SKIPPING';\n                         DELETE;\n                         END;\n  IF SMFXXRTY = 70;\n  INPUT    TIMEOUT SMFSTAMP8.\n      SMFXXSID $CHAR4. @;\n  INPUT SMF70SSI $CHAR4.  SMF70STY PIB2.  SMF70TRN PIB2.\n        SMF70RV1 PIB2.    SMF70PRS PIB4.  SMF70PRL PIB2.\n        SMF70PRN PIB2.    SMF70CCS PIB4.  SMF70CCL PIB2.\n        SMF70CCN PIB2.    SMF70CPS PIB4.  SMF70CPL PIB2.\n        SMF70CPN PIB2.    SMF70ASS PIB4.  SMF70ASL PIB2.\n        SMF70ASN PIB2.    SMF70BCS PIB4.  SMF70BCL PIB2.\n        SMF70BCN PIB2.    SMF70BVS PIB4.  SMF70BVL PIB2.\n        SMF70BVN PIB2.\n        @ ;\n  OUTPUT T70;\n  DO I=1 TO SMF70PRN;\n  OFF = V -3 + SMF70PRS + (I-1)*SMF70PRL;\n  INPUT @OFF SMF70MFV $CHAR2.  SMF70PRD $CHAR8.   SMF70IST PD4.\n             SMF70DAT PD4.     SMF70INT RMFDUR.   SMF70MFL PIB2.\n             SMF70SAM PIB4.    SMF70RV2 PIB2.     SMF70FLA PIB2.\n             SMF70RLS $CHAR4.  SMF70CYC PD4.      SMF70MVS $CHAR8.\n             SMF70IML PIB1.    SMF70PRF PIB1.     SMF70PTN PIB1.\n             SMF70SRL PIB1.    SMF70IET $CHAR8.\n  @;\n  OUTPUT PRODUCT;\n  END;\n  DO I=1 TO SMF70CCN;\n  OFF = V -3 + SMF70CCS + (I-1)*SMF70CCL;\n  INPUT @OFF SMF70MOD PIB2.    SMF70VER PIB1.\n             SMF70BNP PIB1.    SMF70INB PIB1.\n             SMF70RVA PIB1.    SMF70GTS PIB2.\n  @;\n  OUTPUT CCONTROL;\n  END;\n  DO I=1 TO SMF70CPN;\n  OFF = V -3 + SMF70CPS + (I-1)*SMF70CPL;\n  INPUT @OFF SMF70WAT PIB8.    SMF70CID PIB2.     SMF70CNF PIB1.\n             SMF70RV3 PIB1.    SMF70SER PIB3.     SMF70RV4 PIB1.\n             SMF70SLH PIB4.    SMF70TPI PIB4.\n             SMF70VFS PIB4.    SMF70V   PIB1.     SMF70AL1 PIB1.\n  @;\n  CPUBSYPC = 100 * (1 - ((SMF70WAT/4096E6) / SMF70INT) );\n  OUTPUT CDATA;\n  END;\n  DO I=1 TO SMF70ASN;\n  OFF = V -3 + SMF70ASS + (I-1)*SMF70ASL;\n  INPUT @OFF\n         SMF70RMN PIB2.     SMF70RMM PIB2.      SMF70RTT PIB4.\n         SMF70R00 PIB4.     SMF70R01 PIB4.      SMF70R02 PIB4.\n         SMF70R03 PIB4.     SMF70R04 PIB4.      SMF70R05 PIB4.\n         SMF70R06 PIB4.     SMF70R07 PIB4.      SMF70R08 PIB4.\n         SMF70R09 PIB4.     SMF70R10 PIB4.      SMF70R11 PIB4.\n         SMF70R12 PIB4.     SMF70R13 PIB4.      SMF70R14 PIB4.\n         SMF70R15 PIB4.     SMF70IMN PIB2.      SMF70IMM PIB2.\n         SMF70ITT PIB4.     SMF70I00 PIB4.      SMF70I01 PIB4.\n         SMF70I02 PIB4.     SMF70I03 PIB4.      SMF70I04 PIB4.\n         SMF70I05 PIB4.     SMF70I06 PIB4.      SMF70I07 PIB4.\n         SMF70I08 PIB4.     SMF70I09 PIB4.      SMF70I10 PIB4.\n         SMF70I11 PIB4.     SMF70OMN PIB2.      SMF70OMM PIB2.\n         SMF70OTT PIB4.     SMF70O00 PIB4.      SMF70O01 PIB4.\n         SMF70O02 PIB4.     SMF70O03 PIB4.      SMF70O04 PIB4.\n         SMF70O05 PIB4.     SMF70O06 PIB4.      SMF70O07 PIB4.\n         SMF70O08 PIB4.     SMF70O09 PIB4.      SMF70O10 PIB4.\n         SMF70O11 PIB4.     SMF70WMN PIB2.      SMF70WMM PIB2.\n         SMF70WTT PIB4.     SMF70W00 PIB4.      SMF70W01 PIB4.\n         SMF70W02 PIB4.     SMF70W03 PIB4.      SMF70W04 PIB4.\n         SMF70W05 PIB4.     SMF70W06 PIB4.      SMF70W07 PIB4.\n         SMF70W08 PIB4.     SMF70W09 PIB4.      SMF70W10 PIB4.\n         SMF70W11 PIB4.     SMF70BMN PIB2.      SMF70BMM PIB2.\n         SMF70BTT PIB4.     SMF70B00 PIB4.      SMF70B01 PIB4.\n         SMF70B02 PIB4.     SMF70B03 PIB4.      SMF70B04 PIB4.\n         SMF70B05 PIB4.     SMF70B06 PIB4.      SMF70B07 PIB4.\n         SMF70B08 PIB4.     SMF70B09 PIB4.      SMF70B10 PIB4.\n         SMF70B11 PIB4.     SMF70SMN PIB2.      SMF70SMM PIB2.\n         SMF70STT PIB4.     SMF70S00 PIB4.      SMF70S01 PIB4.\n         SMF70S02 PIB4.     SMF70S03 PIB4.      SMF70S04 PIB4.\n         SMF70S05 PIB4.     SMF70S06 PIB4.      SMF70S07 PIB4.\n         SMF70S08 PIB4.     SMF70S09 PIB4.      SMF70S10 PIB4.\n         SMF70S11 PIB4.     SMF70TMN PIB2.      SMF70TMM PIB2.\n         SMF70TTT PIB4.     SMF70T00 PIB4.      SMF70T01 PIB4.\n         SMF70T02 PIB4.     SMF70T03 PIB4.      SMF70T04 PIB4.\n         SMF70T05 PIB4.     SMF70T06 PIB4.      SMF70T07 PIB4.\n         SMF70T08 PIB4.     SMF70T09 PIB4.      SMF70T10 PIB4.\n         SMF70T11 PIB4.     SMF70LMN PIB2.      SMF70LMM PIB2.\n         SMF70LTT PIB4.     SMF70L00 PIB4.      SMF70L01 PIB4.\n         SMF70L02 PIB4.     SMF70L03 PIB4.      SMF70L04 PIB4.\n         SMF70L05 PIB4.     SMF70L06 PIB4.      SMF70L07 PIB4.\n         SMF70L08 PIB4.     SMF70L09 PIB4.      SMF70L10 PIB4.\n         SMF70L11 PIB4.     SMF70AMN PIB2.      SMF70AMM PIB2.\n         SMF70ATT PIB4.     SMF70A00 PIB2.      SMF70A01 PIB2.\n         SMF70A02 PIB4.     SMF70A03 PIB4.      SMF70A04 PIB4.\n         SMF70A05 PIB4.     SMF70A06 PIB4.      SMF70A07 PIB4.\n         SMF70A08 PIB4.     SMF70A09 PIB4.      SMF70A10 PIB4.\n         SMF70A11 PIB4.     SMF70PMN PIB2.      SMF70PMM PIB2.\n         SMF70PTT PIB4.     SMF70P00 PIB2.      SMF70P01 PIB2.\n         SMF70P02 PIB4.     SMF70P03 PIB4.      SMF70P04 PIB4.\n         SMF70P05 PIB4.     SMF70P06 PIB4.      SMF70P07 PIB4.\n         SMF70P08 PIB4.     SMF70P09 PIB4.      SMF70P10 PIB4.\n         SMF70P11 PIB4.\n  @;\n  OUTPUT ASID;\n  END;\n  *;\n  DO I=1 TO SMF70BCN;\n  OFF = V -3 + SMF70BCS + (I-1)*SMF70BCL;\n  INPUT @OFF SMF70LPM $CHAR8.  SMF70LPN PIB1.     SMF70PFG PIB1.\n             SMF70BDN PIB2.    SMF70BDS PIB4.\n  @;\n  OUTPUT PRSM;\n  END;\n  *;\n  DO I=1 TO SMF70BVN;\n  OFF = V -3 + SMF70BVS + (I-1)*SMF70BVL;\n  INPUT @OFF SMF70PDT PIB8.    SMF70VPA PIB2.     SMF70BPS PIB2.\n             SMF70VPF PIB1.    SMF70RVX PIB3.     SMF70EDT PIB8.\n                               SMF70RVY PIB8.\n  @;\n  OUTPUT LOGP;\n  END;\nRETURN;\n*ROC PRINT DATA=T70;\nFORMAT TIMEOUT DATETIME.;\n*ROC PRINT DATA=PRODUCT;\nFORMAT TIMEOUT DATETIME.;\nFORMAT SMF70INT TIME.;\n*ROC PRINT DATA=CCONTROL;\nFORMAT TIMEOUT DATETIME.;\nFORMAT SMF70MOD HEX4.;\n*ROC PRINT DATA=CDATA;\nFORMAT TIMEOUT DATETIME.;\nFORMAT SMF70SER HEX6.;\n*ROC PRINT DATA=ASID;\n*ORMAT TIMEOUT DATETIME.;\n*ROC PRINT DATA=PRSM;\nFORMAT TIMEOUT DATETIME.;\n*ROC PRINT DATA=LOGP;\nFORMAT TIMEOUT DATETIME.;\n*;\nDATA PRSM_S (KEEP = TOUT SMF70BDN SMF70LPM SEQ);\nSET PRSM;\nIF SMF70PFG = 0;\nIF UPCASE(SMF70LPM) = 'INACTIVE' THEN DELETE;\nTOUT = INT( (TIMEOUT+100) / 60 ) * 60;\nSEQ = SMF70BDS; OUTPUT;\nWORK = SMF70BDN -1;\nDO WHILE (WORK \u00ac=0);\n               SEQ+1;\n               WORK=WORK-1;\n               OUTPUT;\n               END;\nRETURN;\nPROC SORT; BY TOUT SEQ;\n*;\nDATA LOGICAL (KEEP = TOUT PDT SMF70VPA SEQ);\nRETAIN OTOUT 0 SEQ 0;\nSET LOGP;\nTOUT = INT( (TIMEOUT+100) / 60 ) * 60;\nIF TOUT \u00ac= OTOUT THEN SEQ=0; ELSE SEQ+1;\nOTOUT = TOUT;\nPDT = SMF70PDT / 1000 / 1000;\nRETURN;\nPROC SORT; BY TOUT SEQ;\n*;\nDATA;\nMERGE PRSM_S (IN=S1) LOGICAL(IN=S2); BY TOUT SEQ;\nDROP SEQ;\nIF S1 AND S2;\nTOUT = INT( (TOUT+100) / 3600 ) * 3600;   * 3600 IS 1 HOUR;\nRETURN;\n*;\nPROC SORT;\nBY SMF70LPM SMF70VPA SMF70BDN TOUT;\n*;\nPROC UNIVARIATE NOPRINT;\nVAR PDT;\nBY SMF70LPM SMF70VPA SMF70BDN TOUT;\nOUTPUT OUT=UNIVAR\nN = N\nMEAN = PDT\n;\n*;\nPROC SORT;\nBY TOUT;\n*;\nPROC PRINT SPLIT='*'; BY TOUT; SUM PDT;\nFORMAT TOUT DATETIME.;\nLABEL SMF70LPM='LOGICAL*PARTITION*NAME';\nLABEL SMF70BDN='# LOGICAL*PROCESSORS';\nLABEL SMF70VPA='PROCESSOR #';\nLABEL TOUT ='DATE*TIME';\nLABEL PDT ='DISPATCH*TIME*(SECS)';\nRUN;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NONSMS": {"ttr": 4102, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98)\\x9f\\x00\\x98)\\x9f\\x11\"\\x01\\x04\\x01\\x04\\x00\\x00\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-10-26T00:00:00", "modifydate": "1998-10-26T11:22:00", "lines": 260, "newlines": 260, "modlines": 0, "user": "XSDMN"}, "text": "//ED115LSP JOB MSGCLASS=X,CLASS=Q,NOTIFY=XSDMN\n//ASMHCL   PROC MAC1='SYS1.MACLIB',MAC2='SYS1.MODGEN'\n//ASM    EXEC  PGM=IEV90,PARM='NODECK,OBJECT',REGION=1M\n//SYSLIB   DD  DSN=&MAC1,DISP=SHR\n//         DD  DSN=&MAC2,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  SYSOUT=B,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))\n//SYSPRINT DD SYSOUT=*,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//LKED EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL,AMODE=24,RMODE=24',      *\n//        REGION=1M,COND=(8,LT,ASM)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD DD DISP=(,PASS),UNIT=SYSDA,                                  *\n//        SPACE=(CYL,(2,1,2)),DSN=&&GOSET(GO)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=*\n//  PEND\n// EXEC ASMHCL\nLSPACE   CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*VTPTR   EQU   X'010'\n*VTUCBSC EQU   X'434'\n         USING *,R15\n         STM   R14,R12,12(R13)\n         LA    R12,SAVE\n         ST    R12,8(R13)\n         ST    R13,SAVE+4\n         LR    R13,R12\n         LR    R12,R15\n         USING LSPACE,R12\n         DROP  R15\n         L     R2,0(R1)\n         LA    R3,0\n         LH    R3,0(R2)\n         ST    R3,PFLAG\n         OPEN  (SYSPRINT,OUTPUT)\n         PUT   SYSPRINT,HDR1\n         PUT   SYSPRINT,HDR2\n         PUT   SYSPRINT,HDR3\n         PUT   SYSPRINT,HDR4\n         PUT   SYSPRINT,HDR5\n         PUT   SYSPRINT,HDR6\n*        L     R6,CVTPTR\n*        USING CVT,R6\n*        L     R15,CVTUCBSC\n*        ST    R15,SCANADDR\n*EXTUCB  L     R15,SCANADDR\n*        CALL (15),(WORKAREA,DEVCLASS,ADDRUCB),VL\n*        LTR   R15,R15\n*        BNZ   ENDJC\n         LA    R0,4095\n         GETMAIN R,LV=(0)\n         LR    R5,R1\nNEXTUCB  LA    R6,WORKAREA\nU        UCBSCAN COPY,WORKAREA=WORKAREA,UCBAREA=UCBAREA,RANGE=ALL,     1\n               DYNAMIC=YES,DEVCLASS=DASD,RETCODE=RET,RSNCODE=RSN\n*        SR    R6,R6\n         L     R6,RET\n         LTR   R6,R6\n         BNZ   ENDJCE\n         MVC   0(48,R5),UCBAREA\n         B     CONT\nENDJCE   L     R6,RET\n         CVD   R6,WORK\n         OI    WORK+7,X'0F'\n         UNPK  HDR7(4),WORK+6(2)\n         L     R6,RSN\n         CVD   R6,WORK\n         OI    WORK+7,X'0F'\n         UNPK  HDR7+8(4),WORK+6(2)\n*        PUT   SYSPRINT,HDR7\n         B     ENDJC\nCONT     DS    0H\n*ONT     PUT   SYSPRINT,HDR7\n*        L     R5,ADDRUCB   UCB ADDRESSES\n*        LR    R6,R5\n*        LTR   R6,R6        CHECK FOR VALID ENTRIES\n*        BZ    INCR1        UCB HOLE\n*        C     R6,FMIN1     CHECK FOR END\n*        BE    ENDJC\n*        CLI   18(R6),X'20' MUST BE DIRECT ACCESS\n*        BNE   INCR1\n*        C     R6,LASTADR   UCB ADDRESSES MUST INCREASE\n*        BNH   INCR1        OTHERWISE THEY REPEAT.\n*        ST    R6,LASTADR   NEW ADDRESS\n         USING UCBCMSEG,R5\n*        B     FNDUCB\nFNDGBL   TM    3(R5),X'80'      ONLINE BIT\n         BZ    INCR1        NOPE\nCHKRDY   TM    6(R5),X'40'    TEST READY BIT\n         BO    INCR1        NOT READY\n         TM    17(R5),X'08' VIRTUAL UCB\n         BO    INCR1        YES\n         TM    UCBFL5,UCBSMS              SMS\n         BO    INCR1        YES\n         B     FNDUCB\nINCR1    DS    0H\n         B     NEXTUCB      TRY NEXT UCB\n*\n**  MOVE UCB INFORMATION TO OUTPUT LINE\n*\nFNDUCB   MVC   VOLID,28(R5) MOVE VOLID\n         MVC   ADDR,13(R5)  MOVE UNIT ADDRESS\n         MVC   PG,=C'      '\n         MVC   MTD,=C'    '\n         TM    34(R5),X'40'    TEST PAGE PK\n         BNO   TPBL            TO TEST PUBLIC\n         MVC   PG,=C'PAGEPK'\nTPBL     TM    34(R5),X'08'    TEST PUBLIC\n         BNO   TSTG            TO TEST STORAGE\n         MVC   MTD,=C'SCR'     WAS PUBLIC\n         B     NPRIV\nTSTG     TM    34(R5),X'04'    TEST STORAGE\n         BNO   NPRIV           TO TEST SYSRES\n         MVC   MTD,=C'STG'     WAS STORAGE\nNPRIV    MVC   SY,=C'      '\n         TM    3(R5),X'02'     TEST SYSRES\n         BNO   NDM             NOT SYSRES\n         MVC   SY,=C'SYSRES'   WAS SYSRES\n*\n**  IF OFFLINE, DO NOT PROCESS\n*\n*DM      TM    3(R5),X'40'  PENDING BIT - SHOULD BE OFF\n*        BO    INCR1\n*        TM    3(R5),X'80'  ONLINE BIT - SHOULD BE ON\n*        BZ    INCR1\n*\n*\nNDM      LA    R1,LSP       POINT TO WORKAREA\n         LR    R0,R5        POINT TO UCB\n         SVC   78           ISSUE LSPACE SVC\n         MVC   O1,ADDR\n         MVC   O2,VOLID\n         MVC   O3,I3\n         MVC   O4,I4\n         MVC   O5,I5\n         MVC   O6,I6\n         MVC   O7,I7\n         MVC   O8,MTD\n         MVC   O9,SY\n         MVC   O10,PG\n         MVC   O11,=C'          '\n         TM    34(R5),X'04'    TEST STORAGE\n         BNO   PUTNSTG\n         CLC   VOLID(3),=C'C48'\n         BE    C48\n         CLC   I3,=C'0111'\n         BH    PUTST\n         MVC   O11,CMT\n         B     PUTST\nC48      CLC   I3,=C'0177'\n         BH    PUTST\n         MVC   O11,CMT\n         B     PUTST\nPUTNSTG  DS    0H\n         LA    R1,1\n         L     R2,PFLAG\n         CR    R1,R2\n         BE    INCR1\nPUTST    PUT   SYSPRINT,OUT\n         B     INCR1\nENDJC    DS    0H\n         LR    R1,R5\n         LA    R0,4095\n         FREEMAIN R,LV=(0),A=(1)\n         CLOSE (SYSPRINT)\n         L     R13,4(R13)\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\nSYSPRINT DCB   DSORG=PS,MACRF=(PM),DDNAME=SYSPRINT,LRECL=79,RECFM=FB,  X\n               BLKSIZE=790\nSAVE     DC    19F'0'\nWORK     DS    D\nADDRUCB  DS    A\nWORKAREA DC    XL100'00'\nUCBAREA  DC    XL50'00'\nDEVCLASS DC    X'00'\n         DS    0F\nFMIN1    DC    X'0000FFFF'    END OF UCB LIST\nLASTADR  DS    F       LAST UCB ADDRESS FOUND ( NO DUP'S )\nPFLAG    DS    F       FLAG FOR PARM NEQ 0\nVOLSET   XC    LASTADR,LASTADR CLEAR THE UCB COMPARE ADDRESS\nADDR     DS    CL3     UCB ADDRESS IN CHARACTERS\nMTD      DS    CL3     VOLUME MOUNTED AS\nPG       DS    CL6     VOLUME ? PAGING\nSY       DS    CL6     ? SYSRES\nCMT      DC    CL10'>=80% FULL'\n         DC    CL1' '\nVOLID    DS    CL6     CURRENT VOLUME SERIAL NUMBER TO PROCESS\n         DC    CL1' '\nLSP      DS    0C\n         DS    CL6     'SPACE='\nI3       DS    CL4     TOTAL NUMBER OF FREE CYLINDERS\n         DS    CL1     ','\nI4       DS    CL4     TOTAL NUMBER OF FREE TRACKS\n         DS    CL1     ','\nI5       DS    CL4     NUMBER OF EXTENTS\n         DS    CL1     '/'\nI6       DS    CL4     LARGEST EXTENT OF CONTIG CYLINDERS\n         DS    CL1     ','\nI7       DS    CL4     LARGEST EXTENT OF CONTIG TRACKS\n         DS    39C' '\nHDR1     DC    CL80'            TOTAL  TOTAL  NUMBER  LARGEST LARGEST'\nHDR2     DC    CL80'            NUMBER NUMBER         CONTIG  CONTIG '\nHDR3     DC    CL80'UCB VOLSER    OF     OF     OF    EXTENT  EXTENT '\nHDR4     DC    CL80'             FREE   FREE           CYLS    TRKS  '\nHDR5     DC    CL80'             CYLS   TRKS  EXTENTS                '\nHDR6     DC    CL80'                                                 '\nHDR7     DC    CL80'?????????????????????????????????????????????????'\n*                   XXX XXXXXX   XXXX   XXXX   XXXX    XXXX    XXXX\nOUT      DS    0F\nO1       DS    CL3  XXX\n         DC    CL1' '\nO2       DS    CL6      XXXXXX\n         DC    CL3' '\nO3       DS    CL4               XXXX\n         DC    CL3' '\nO4       DS    CL4                      XXXX\n         DC    CL3' '\nO5       DS    CL4                             XXXX\n         DC    CL4' '\nO6       DS    CL4                                     XXXX\n         DC    CL4' '\nO7       DS    CL4                                             XXXX\n         DC    CL4' '\nO8       DS    CL3\n         DC    CL1' '\nO9       DS    CL6\n         DC    CL1' '\nO10      DS    CL6\n         DC    CL1' '\nO11      DS    CL10\n         DC    CL1' '\nSCANADDR DS    F\nRET      DC    F'0'\nRSN      DC    F'0'\n         LTORG\n         CVT DSECT=YES\n         IEFUCBOB LIST=YES\n         END\n//*KED.SYSLMOD DD DSN=SYS1.MISC.LINKLIB(LSPACE),DISP=SHR\n//LKED.SYSLMOD DD DSN=TEST.PGM.LOAD(NONSMS),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OPTNJ": {"ttr": 4107, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x95\\x19\\x1f\\x00\\x97%\\x1f\\x14T\\x00\\x1c\\x00\\x1a\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1995-07-10T00:00:00", "modifydate": "1997-09-08T14:54:00", "lines": 28, "newlines": 26, "modlines": 0, "user": "ED115DM"}, "text": "PROC 0\n/* CONTROL LIST CONLIST SYMLIST  */\nISPEXEC CONTROL ERRORS RETURN\nISPEXEC VGET ZJBA\n/* WRITE &ZJBA  */\nSET &ZJBN = &STR(????)\nISPEXEC VPUT ZJBN SHARED\nSET SYSOUTTRAP = 99\nSTATUS &ZJBA\nSET &S = SYSOUTLINE\nSET &N = 1\n   DO WHILE 1 = 1\n       SET &L = &STR(&&&S&N)\n       IF &STR(&L) = &STR() THEN EXIT CODE(4)\n       IF &SUBSTR(4:8,&L) = &STR(56211) THEN -\n           DO\n           SET &I1 = &EVAL(20+&LENGTH(&ZJBA))\n           SET &I2 = &I1 +3\n           SET &ZJBN = &SUBSTR(&I1:&I2,&L)\n           ISPEXEC VPUT ZJBN SHARED\n      /*   WRITE &ZJBN   */\n      /*   READ &D       */\n      /*   EDQ           */\n           EXIT CODE(0)\n           END\n       SET &N = &N +1\n   END\nEXIT CODE(4)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "OPTNS": {"ttr": 4109, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x00\\x00\\x95\\x19\\x1f\\x00\\x963\\x9f\\x12I\\x00L\\x00L\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "1995-07-10T00:00:00", "modifydate": "1996-12-04T12:49:00", "lines": 76, "newlines": 76, "modlines": 0, "user": "ED115DM"}, "text": "PROC 0 T\nCONTROL NOMSG\nIF &T \u00ac= &STR() THEN -\nCONTROL LIST CONLIST SYMLIST MSG\nISPEXEC TBOPEN   ZDFDAT\nISPEXEC TBCREATE ZDFDAT NAMES(PIKA ASID T JOB PSTEP STEP WHERE ST1 ST2 -\n           MEMORY SWP DP PG WSS CPU DEC) NOWRITE\nISPEXEC TBTOP ZDFTABLE\n/* ISPEXEC TBSKIP ZDFTABLE */\n/* ISPEXEC TBSKIP ZDFTABLE */\nRETRY:-\nISPEXEC TBSKIP ZDFTABLE\nISPEXEC TBGET ZDFTABLE\nIF &LASTCC \u00ac=0 THEN GOTO HCONT\nSET &PIKA = &STR(   )\nSET &ASID    = &SUBSTR(1:4,&ACTLINE)\nSET &T       = &SUBSTR(6:6,&ACTLINE)\nSET &JOB     = &SUBSTR(8:15,&ACTLINE)\nSET &PSTEP   = &SUBSTR(17:24,&ACTLINE)\nSET &STEP    = &SUBSTR(26:33,&ACTLINE)\nSET &ST1     = &SUBSTR(35:37,&ACTLINE)\nSET &MEMORY  = &SUBSTR(1:6,&ACTLINB)\nSET &SWP     = &SUBSTR(9:10,&ACTLINB)\nSET &DP      = &SUBSTR(12:13,&ACTLINB)\nSET L EQ 0    /* RANGES OVER &DP FROM RIGHT TO LEFT\nSET DEC EQ 0  /* DECIMAL VALUE ACCUMULATOR\nSET P EQ 1    /* TAKES VALUES 1, 16, 256, ETC\nSET D EQ '00010203040506070809101112131415'\nSET X EQ 0123456789ABCDEF\nDO WHILE &LENGTH(&DP)-&L GT 0\n  SET M EQ 1  /* RANGES OVER &D\n  SET N EQ 1  /* RANGES OVER &X\n  DO WHILE &SUBSTR(&N,&X) NE &SUBSTR(&EVAL((&LENGTH(&DP)-&L)),&DP)\n  SET M EQ &M+2\n  SET N EQ &N+1\n  IF &N GT 16 THEN DO\n    WRITE INVALID HEXADECMAL VALUE &DP\n    EXIT\n    END\n  END\n  SET W EQ &SUBSTR(&M+1:&M+2,&D)\n  SET W EQ &W*&P\n  SET DEC EQ &DEC+&W\n  SET L EQ &L+1\n  SET P EQ &P*16\nEND\nSET &PG      = &SUBSTR(15:17,&ACTLINB)\nSET &WSS     = &SUBSTR(19:23,&ACTLINB)\nSET &CPU     = &SUBSTR(25:32,&ACTLINB)\nISPEXEC TBADD ZDFDAT ORDER\nGOTO RETRY\nHCONT:-\nISPEXEC TBTOP ZDFDAT\nREDIS:-\nISPEXEC TBDISPL ZDFDAT PANEL(ZDFDAT)\nSET &LCC = &LASTCC\nIF &ST \u00ac= &STR() THEN DO\n      IF &ST = 1 THEN ISPEXEC TBSORT   ZDFDAT FIELDS(ASID,C,A)\n      IF &ST = 2 THEN ISPEXEC TBSORT   ZDFDAT FIELDS(T,C,A)\n      IF &ST = 3 THEN ISPEXEC TBSORT   ZDFDAT FIELDS(JOB,C,D)\n      IF &ST = 4 THEN ISPEXEC TBSORT   ZDFDAT FIELDS(PSTEP,C,D)\n      IF &ST = 5 THEN ISPEXEC TBSORT   ZDFDAT FIELDS(STEP,C,D)\n      IF &ST = 6 THEN ISPEXEC TBSORT   ZDFDAT FIELDS(ST1,C,D)\n      IF &ST = 7 THEN ISPEXEC TBSORT   ZDFDAT FIELDS(MEMORY,C,D)\n      IF &ST = 8 THEN ISPEXEC TBSORT   ZDFDAT FIELDS(WSS,C,D)\n      IF &ST = 9 THEN DO\n                      ISPEXEC TBSORT   ZDFDAT FIELDS(DEC,N,D)\n                      /* HAVE A LOOK AT HEXDEC */\n                      END\n      IF &ST =10 THEN ISPEXEC TBSORT   ZDFDAT FIELDS(PG,C,D)\n      IF &ST =11 THEN ISPEXEC TBSORT   ZDFDAT FIELDS(SWP,C,D)\n      IF &ST =12 THEN ISPEXEC TBSORT   ZDFDAT FIELDS(CPU,C,D)\n                      GOTO REDIS\n                      END\nISPEXEC TBCLOSE ZDFDAT\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "QC": {"ttr": 4354, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x87!o\\x00\\x95\\x19\\x1f\\tH\\x00$\\x00(\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1987-08-04T00:00:00", "modifydate": "1995-07-10T09:48:00", "lines": 36, "newlines": 40, "modlines": 0, "user": "ED115DM"}, "text": "PROC 1 JB\nCONTROL MAIN MSG\nISPEXEC CONTROL ERRORS RETURN\nGOTO NORM\nCONTROL LIST CONLIST SYMLIST\nNORM:-\nKLEAR\nSET &JJ = &JB&STR(*)\nSET &JBN = &STR(&JJ)\n/* Q &JJ */\n/* WRITE */\nSET SYSOUTTRAP = 99\nCONTROL MSG\nSTATUS &JB\nCONTROL NOMSG\nSET &S = SYSOUTLINE\nSET &N = 1\nDO WHILE 1=1\n    SET &L = &STR(&&&S&N)\n    IF &STR(&L) = &STR() THEN GOTO DISPL\n    WRITE &L\n    IF &SUBSTR(1:9,&L) = &STR(IKJ56211I) THEN -\n     DO\n     SET &I1 = &EVAL(20+&LENGTH(&JB))\n     SET &I2 = &I1 +3\n     SET &JBN = &SUBSTR(&I1:&I2,&L)\n     END\n    SET &N = &N +1\nEND\nDISPL:-\nWRITE\nWRITE\nWRITE ? CANCEL EXECUTING JOB <Y OR N>\nREAD &CAN\nIF &CAN = &STR(Y) THEN CANCEL &JB(J&JBN)\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "QF": {"ttr": 4356, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x00\\x00\\x87\\x10\\x0f\\x00\\x90)\\x7f\\x13F\\x00%\\x00\\t\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1987-04-10T00:00:00", "modifydate": "1990-10-24T13:46:00", "lines": 37, "newlines": 9, "modlines": 0, "user": "ED115DM"}, "text": "PROC 1 JB\nCONTROL MAIN MSG\nISPEXEC CONTROL ERRORS RETURN\nGOTO NORM\nCONTROL LIST CONLIST SYMLIST\nNORM:-\nSET &JJ = &JB&STR(*)\nSET &JBN = &STR(&JJ)\n/* Q &JJ */\n/* WRITE */\nSET SYSOUTTRAP = 99\nCONTROL MSG\nSTATUS &JB\nCONTROL NOMSG\nSET &S = SYSOUTLINE\nSET &N = 1\nDO WHILE 1=1\n    SET &L = &STR(&&&S&N)\n    IF &STR(&L) = &STR() THEN GOTO DISPL\n    IF &SUBSTR(1:9,&L) = &STR(IKJ56211I) THEN -\n     DO\n     SET &I1 = &EVAL(20+&LENGTH(&JB))\n     SET &I2 = &EVAL(23+&LENGTH(&JB))\n     SET &JBN = &SUBSTR(&I1:&I2,&L)\n     IF &JBN < 1000 THEN -\n     SET &JBN = &SUBSTR(&I1+1:&I2,&L)\n     IF &JBN < 100 THEN -\n     SET &JBN = &SUBSTR(&I1+2:&I2,&L)\n     IF &JBN < 10  THEN -\n     SET &JBN = &SUBSTR(&I1+3:&I2,&L)\n     END\n    SET &N = &N +1\nEND\nDISPL:-\nSET &ZZ = &STR(TSO F;ACT;S &JBN)\nISPEXEC DISPLAY PANEL(ZONK) COMMAND(ZZ)\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "QN": {"ttr": 4358, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x95 \\x8f\\x00\\x980o\\x11\\x16\\x01\\xf1\\x01\\xe0\\x00\\x00\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1995-07-27T00:00:00", "modifydate": "1998-11-02T11:16:00", "lines": 497, "newlines": 480, "modlines": 0, "user": "XSDMN"}, "text": "//C4ADMDMA JOB MSGCLASS=X,CLASS=A,REGION=4M,NOTIFY=XSDMN\n//*\n//*\n//ASMHCL  PROC\n//C      EXEC  PGM=IEV90,PARM=OBJECT,REGION=5M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  SYSOUT=B,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))\n//SYSPRINT DD SYSOUT=X,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//L    EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL',REGION=2M,COND=(8,LT,C)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD DD DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(2,1,2)),DSN=&GOSET(GO)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=X,DCB=(RECFM=FB,BLKSIZE=3509)\n//  PEND\n//*\n//    EXEC ASMHCL\n//C.SYSLIB DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n         MACRO\n&NAME    SAVEALL &RENT,&REG=3,&EQU=YES,&ID=NO\n         GBLB  &SAVRENT\n         GBLB  &REGSW\n         GBLB  &TIME\n         GBLC  &SAVNDX\n&SAVNDX  SETC  '&SYSNDX'\n&NAME    CSECT\n         AIF   ('&SAVRENT' EQ '1').NOTFREE\n         AIF   ('&REGSW' EQ '1').NOEQU\n         AIF   ('&EQU' NE 'YES').NOEQU\n&REGSW   SETB  1\n         SPACE\n***********************************************************************\n********           DEFINITION OF GENERAL REGISTERS             ********\n***********************************************************************\nR0       EQU   0    GENERAL REGISTER ZERO\nR1       EQU   1    GENERAL REGISTER ONE\nR2       EQU   2    GENERAL REGISTER TWO\nR3       EQU   3    GENERAL REGISTER THREE\nR4       EQU   4    GENERAL REGISTER FOUR\nR5       EQU   5    GENERAL REGISTER FIVE\nR6       EQU   6    GENERAL REGISTER SIX\nR7       EQU   7    GENERAL REGISTER SEVEN\nR8       EQU   8    GENERAL REGISTER EIGHT\nR9       EQU   9    GENERAL REGISTER NINE\nR10      EQU   10   GENERAL REGISTER TEN\nR11      EQU   11   GENERAL REGISTER ELEVEN\nR12      EQU   12   GENERAL REGISTER TWELVE\nR13      EQU   13   GENERAL REGISTER THIRTEEN\nR14      EQU   14   GENERAL REGISTER FOURTEEN\nR15      EQU   15   GENERAL REGISTER FIFTEEN\n         SPACE\nRA       EQU   10   GENERAL REGISTER TEN\nRB       EQU   11   GENERAL REGISTER ELEVEN\nRC       EQU   12   GENERAL REGISTER TWELVE\nRD       EQU   13   GENERAL REGISTER THIRTEEN\nRE       EQU   14   GENERAL REGISTER FOURTEEN\nRF       EQU   15   GENERAL REGISTER FIFTEEN\n***********************************************************************\n********             END OF REGISTER DEFINITIONS               ********\n***********************************************************************\n         SPACE\n.NOEQU   ANOP\n         SAVE  (14,12)\n         AIF   ('&REG' EQ '').MESS\n         BALR  &REG(1),0\n         AIF   (N'&REG EQ 1).A\n         AIF   (N'&REG EQ 2).B\n         AIF   (N'&REG EQ 3).C\n         AIF   (N'&REG EQ 4).D\n         AIF   (N'&REG EQ 5).E\n         MNOTE *****,'EXCESSIVE BASE REGISTERS -- 5 ASSUMED *****'\n         AGO   .E\n.MESS    MNOTE 12,'***** NO BASE REGISTER SPECIFIED *****'\n         MEXIT\n.NOTFREE MNOTE 12,'***** ENDALL NOT ISSUED PRIOR TO NEW SAVEALL *****'\n         MEXIT\n.E       USING *,&REG(1),&REG(2),&REG(3),&REG(4),&REG(5)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         L     &REG(4),=A(Q&SYSNDX+12288)\n         L     &REG(5),=A(Q&SYSNDX+16384)\n         AGO   .END\n.D       USING *,&REG(1),&REG(2),&REG(3),&REG(4)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         L     &REG(4),=A(Q&SYSNDX+12288)\n         AGO   .END\n.C       USING *,&REG(1),&REG(2),&REG(3)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         AGO   .END\n.B       USING *,&REG(1),&REG(2)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTER\n         AGO   .END\n.A       USING *,&REG(1)\n.END     ANOP\n         AIF   ('&RENT' NE 'RENT').NORENT\n&SAVRENT SETB  1\n         GETMAIN R,LV=4096         GET STORAGE FOR SAVE AREA\n         ST    13,4(1)             SET UP FORWARD CHAIN\n         ST    1,8(13)             SET UP BACKWARD CHAIN\n         L     0,20(0,13)          RESET REGISTER 0\n         L     1,24(0,13)          RESET REGISTER 1\n         L     13,8(0,13)          LOAD SAVE AREA ADDRESS\n         B     J&SYSNDX           BRANCH AROUND LTORG\n         AGO   .RENT\n.NORENT  ANOP\n&TIME    SETB  1\n         ST    13,SAVE&SYSNDX+4    SET UP FORWARD CHAIN\n         LA    1,SAVE&SYSNDX\n         ST    1,8(0,13)           SET UP BACKWARD CHAIN\n         L     1,24(0,13)          RESET REGISTER 1\n         LA    13,SAVE&SYSNDX\n         B     J&SYSNDX           BRANCH AROUND BASE REGISTER CONST\nSAVE&SYSNDX DC 18F'0'\n.RENT    ANOP\n         LTORG\n         AIF   ('&ID' NE 'YES').NOID\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n.NOID    ANOP\nJ&SYSNDX DS    0H\n         MEND\n         MACRO\n&NAME    ENDALL &CODE=\n         GBLB  &TIME\n         GBLB  &SAVRENT\n         GBLC  &SAVNDX\n         LCLA  &LEN\n         LCLC  &REG\n         AIF   ('&CODE' GT '4095').INVRET\n&NAME    DS    0H\n         AIF   (K'&CODE LE 0).CHKRENT\n         AIF   ('&CODE'(1,1) NE '(').CHKRENT\n         AIF   ('&CODE' EQ '(13)' OR '&CODE' EQ '(14)').INVREG\n         AIF   ('&CODE' EQ '(0)' OR '&CODE' EQ '(1)').INVREG\n         AIF   ('&CODE' NE '(15)').CHKRENT\n         LR    2,15               SAVE REG 15 RETURN CODE\n.CHKRENT AIF   (NOT &SAVRENT).NOTRENT\n&SAVRENT SETB  0\n         LR    1,13               LOAD SAVE AREA ADDRESS\n         L     13,4(0,13)         RE-LOAD REGISTER 13\n         FREEMAIN R,LV=4096,A=(1) FREE SAVE AREA STORAGE\n         AGO   .RENT\n.NOTRENT ANOP\n         AIF   (NOT &TIME).NOSAVE\n&TIME    SETB  0\n         L     13,SAVE&SAVNDX+4   RE-LOAD REGISTER 13\n.RENT    ANOP\n         AIF   ('&CODE' EQ '').COND1\n         AIF   ('&CODE' NE '(15)').CHKREG\n         LR    15,2               GET RETURN CODE BACK FROM R2\n         AGO   .ENDIT\n.CHKREG  AIF   ('&CODE'(1,1) NE '(').NOTREG\n&LEN     SETA  K'&CODE-2\n&REG     SETC  '&CODE'(2,&LEN)\n         LR    15,&REG            GET RETURN CODE\n         AGO   .ENDIT\n.NOTREG  ANOP\n         LA    15,&CODE           LOAD CODE TO REG 15\n         AGO   .ENDIT\n.INVRET  MNOTE 12,'***** RETURN CODE PASSED GREATER THAN 4095 *****'\n         MEXIT\n.NOSAVE  MNOTE 12,'***** SAVEALL NOT ISSUED PRIOR TO ENDALL *****'\n         MEXIT\n.INVREG  MNOTE 12,'***** INVALID REGISTER USED FOR RETURN CODE \"&CODE\"'\n         MEXIT\n.COND1   LA    15,0               LOAD ZERO (NO CODE) TO REG 15\n.ENDIT   ANOP\n         RETURN     (14,12),T,RC=(15)\n         MEND\n*          DATA SET TSO116SP3  AT LEVEL 070 AS OF 11/13/81\nTSODSN   TITLE 'LIST OWNERS OF DATASET'\n*\n*********************************************************************\n*                                                                   *\n* FUNCTION - DISPLAY 1) USERS                                       *\n*                    2) DISPOSITION                                 *\n*                    3) WAITING FOR DATASETS                        *\n*                    4) SYSTEM                                      *\n*                    5) MUST COMPLETE FLAG                          *\n*                    6) RESERVE FLAG                                *\n*                    7) GLOBAL FLAG                                 *\n*                    8) OWNERSHIP FLAG                              *\n*                    FOR THE SPECIFIED DATASET.                     *\n*                                                                   *\n* COMMAND SYNTAX - TSODSN DATASETNAME                               *\n*                                                                   *\n* 1) DO NOT USE QUOTES AROUND THE DATASET NAME                      *\n* 2) IT ONLY WORKS FOR A FULLY QULIFIED DATASET NAME                *\n*                                                                   *\n* NOTE - THIS CODE HAS NOT BEEN TESTED WITH A GRS RING.             *\n*        SCOPE=GLOBAL WILL HAVE TO BE SPECIFIED ON THE GQSCAN MACRO *\n*        AND THE GQSCAN HAS TO RUN AUTHORIZED KEY ZERO.             *\n*                                                                   *\n* NOTE - THE 'SYSNAME' IN IEASYS00 SHOULD SPECIFY YOUR SMFID TO     *\n*        GET THE CORRECT SYSTEM NAME IN THE 'SYSTEM' FIELD,         *\n*        OTHERWISE (NONA) NONAME WILL BE DISPLAYED.                 *\n*                                                                   *\n*********************************************************************\n*\nTSOENQA  SAVEALL REG=(2,12)            BASE REG\n         LR    R3,R1                   LOAD REG.\n         USING SMCABASE,R4\n         L     R9,16\n         L     R4,196(R9)\n         LA    R8,TITLE\n         MVC   30(4,R8),SMCASID        MOVE IN SYSTEM ID\n         USING CPPL,R3\n         SPACE\n         L     R4,CPPLCBUF             GET COMMAND BUFFER\n         LH    R6,0(R4)                GET COMMAND BUFFER LENGTH\n         CH    R6,=H'10'               BUFLEN > 10 ?\n         BNH   INVPARM                    NO...ERROR\n         LH    R5,2(R4)                GET OPERAND OFFSET\n         SPACE\n         LA    R5,4(R5)\n         AR    R5,R4                   POINT TO OPERAND\n         AR    R4,R6                   POINT TO END OF BUFFER\n         SR    R4,R5                   OPERAND LENGTH\n         CH    R4,=H'4'\n         BNE   INVPARM\n         BCTR  R4,0                    MINUS ONE\n         MVC   TITLE(4),0(R5)          MOVE IT\n         STC   R4,REQLEN               AND STORE THE LENGTH\n         LA    R4,1(R4)                PLUS ONE FOR ACTUAL LENGTH\n         OC    REQDSN,=44C' '          TRANSLATE TO CAPS\nDM1      L     R0,=F'98304'\n         GETMAIN R,LV=(0)\n         LR    R3,R1\n         ST    R3,R3SAVE\n         USING SCANAREA,R3\n         TIME  DEC                     R0: HHMMSSTH\nGETTIME  ST    R0,WORKB                TIME\n         UNPK  43(7,R8),WORKB(4)\n         MVC   49(2,R8),47(R8)         XXSS\n         MVC   47(1,R8),46(R8)         MXSS\n         MVC   46(1,R8),45(R8)         HHXM MXSS\n         MVI   45(R8),C'.'\n         MVI   48(R8),C'.'             HH.MM.SS\nGETDATE  ST    R1,WORKA                DATE\n         UNPK  35(7,R8),WORKA(4)\n         MVC   35(2,R8),37(R8)         YY\n         MVC   38(3,R8),39(R8)         DDD\n         MVI   37(R8),C'.'             YY.DDDX\n         MVI   41(R8),C' '             YY.DDD\n         TPUT  CLEAR,L'CLEAR,FULLSCR   CLEAR SCREEN\n         TPUT  TITLE,L'TITLE           ADDR PRINT TITLE AND TIME\n         TPUT  BLANK,L'BLANK           PRINT BLANK\n*        MVC   DSN(44),REQDSN          MOVE IN DSN\n*        TPUT  DSNLINE,L'DSNLINE\n         TPUT  ULINE,L'ULINE\n         LR    R5,R13                  SAVE R13 FOR ENDALL\n         LA    R8,SCANAREA             ADDR OF RETURNED DATA\n*        RESULT IN FIRST 2 OF PWORK\n         LA    R7,HEX\n         LA    R7,15(R7)\nA0       CLC   TITLE(1),0(R7)\n         BNE   A0C\n         OC    PWORK(1),32(R7)\n         B     A0F\nA0C      BCT   R7,A0\nA0F      LA    R7,HEX\n         LA    R7,15(R7)\nB0       CLC   TITLE+1(1),0(R7)\n         BNE   B0C\n         OC    PWORK(1),16(R7)\n         B     B0F\nB0C      BCT   R7,B0\nB0F      LA    R7,HEX\n         LA    R7,15(R7)\nC0       CLC   TITLE+2(1),0(R7)\n         BNE   C0C\n         OC    PWORK+1(1),32(R7)\n         B     C0F\nC0C      BCT   R7,C0\nC0F      LA    R7,HEX\n         LA    R7,15(R7)\nD0       CLC   TITLE+3(1),0(R7)\n         BNE   D0C\n         OC    PWORK+1(1),16(R7)\n         B     D0F\nD0C      BCT   R7,D0\nD0F      LH    R9,PWORK\n         LA    R13,SCANSAVE            ADDR GQSCAN SAVE AREA\n         EJECT\nSCAN     GQSCAN AREA=((R8),65536),     ADDR AND LENGTH OF INFO RETURNEDX\n               REQLIM=MAX,             MAX NUM OF OWNERS TO BE RETURNEDX\n               SCOPE=ALL,              ALL SYSTEMS IN GRS RING         X\n               SYSNAME=(0,(R9))\n*              REQCNT=99\n         LR    R13,R5                  RELOAD REG 13 FOR ENDALL\n         LA    R7,BRTABLE              ADDRESS OF BRANCH TABLE\n         B     0(R15,R7)               BRANCH TO APPROPRIATE ROUTINE\nBRTABLE  B     CODE00                  ALLS OK\n         B     CODE04                  NO RESOURCES MATCHED REQUEST\n         B     CODE08                  GQSCAN AREA TOO SMALL\n         B     CODE0C                  ENCOUNTERED ERROR DATA AREA NG\n         B     CODE10                  INVALID SYSNAME\n         SPACE 2\nCODE04   TPUT  CODE04M,L'CODE04M       DSNAME NOT FOUND\n         B     RETURN\n         SPACE\nCODE08   TPUT  CODE08M,L'CODE08M       GQSCAN AREA TOO SMALL\n         B     RETURN\n         SPACE\nCODE0C   TPUT  CODE0CM,L'CODE0CM       ERROR IN GQSCAN\n         B     RETURN\n         SPACE\nCODE10   TPUT  CODE10M,L'CODE10M       INVALID SYSNAME\n         B     RETURN\n         SPACE\nINVPARM  TPUT  PMSG,72                 INVALID DSN SPECIFIED\n         B     RETURX\n         EJECT\nCODE00   ST    R0,RIBLNGTH             STORE RIB AND RIBE LENGTH\n         LR    R7,R1\n         LA    R10,SCANAREA            ADDRESS OF GQSCAN AREA\n         DROP  R3\n         USING RIB,R10                 RESOURCE INFORMATION BLOCK\nRIBLOOP  LR    R11,R10\n         AH    R11,RIBLNGTH            POINT TO RIB VARIABLE SECTION\n         USING RIBVAR,R11\n         LA    R8,0\n         MVC   DSN(44),=CL44' '\n*        TPUT  FLAGHD,L'FLAGHD         PRINT FLAG HEADER\n*        TPUT  ULINE,L'ULINE           UNDER LINE IT\n*        TPUT  BLANK,L'BLANK           PRINT BLANK\n         LH    R8,RIBVLEN             POINT TO FIRST RIBE\n         BCTR  R8,0\n         EX    R8,MVCDSN\n         B     SKIP\nMVCDSN   MVC   DSN(1),RIBRNAME\n         DROP  R11\nSKIP     LR    R11,R10\n         AH    R11,RIBLNGTH            POINT TO RIB VARIABLE SECTION\n         AH    R11,RIBVLEN             POINT TO FIRST RIBE\n         USING RIBE,R11                RESOURCE INFORMATION BLOCK EXT\n         L     R9,RIBNRIBE             LOAD THE # OF RIBE'S\n*        CLC   RIBNTWE,ANYENQ\n*        BNE   TPUTHDRS\n*        CLC   RIBNTWS,ANYENQ\n*        BE    BUMPRIB\n*PUTHDRS TPUT  BLANK,L'BLANK\nSEARCH   MVI   SWITCH,C'1'\n         MVC   JOBNAME(8),RIBEJBNM     JOBNAME OF REQUESTOR\n*        MVC   SYSTEM(4),RIBESYSN      SYSTEM NAME OF REQUESTOR\n         SPACE\nTEST1    TM    RIBERFLG,RIBETYPE       IS THIS EXCL OR SHARED?\n         BO    SHARED\n         MVC   EXCLFLAG(4),EXCL\n         B     TEST2\nSHARED   MVC   EXCLFLAG(4),SHR\n         SPACE\nTEST2    TM    RIBERFLG,RIBEMC         IS MUST COMPLETE?\n         BO    MUSTC\n         MVI   MCFLAG,C'N'\n         B     TEST3\nMUSTC    MVI   MCFLAG,C'Y'\n         SPACE\nTEST3    TM    RIBERFLG,RIBERESV       IS THIS RESERVE REQUEST?\n         BO    RESERVE\n         MVI   RESVFLAG,C'N'\n         B     TEST4\nRESERVE  MVI   RESVFLAG,C'Y'\n         SPACE\nTEST4    TM    RIBERFLG,RIBERESC       IS THIS RESERVE REQUEST GLOBAL?\n         BO    GLOBAL\n         MVI   GLOBFLAG,C'N'\n         B     TEST5\nGLOBAL   MVI   GLOBFLAG,C'Y'\n         SPACE\nTEST5    TM    RIBESFLG,RIBESTAT       IS THIS GUY THE OWNER?\n         BO    OWNER\n         MVI   OWNFLAG,C'N'\n         MVC   WAITFLAG(9),WAITING\n         B     TPUTIT\nOWNER    MVI   OWNFLAG,C'Y'\n         SPACE\nTPUTIT   TPUT  DSNLINE,L'DSNLINE       PRINT IT\n         MVC   DSNLINE(80),=CL80' '\n         SPACE 2\nBUMPRIBE AH    R11,RIBELENG            POINT TO NEXT RIBE\n         BCT   R9,SEARCH               AND DO IT FOR NEXT USER\nBUMPRIB  SR    R3,R3\n         L     R4,RIBNRIBE\nBUMPLOOP AH    R3,RIBELENG\n         BCT   R4,BUMPLOOP\n         AH    R3,RIBLNGTH\n         AH    R3,RIBVLEN\n         AR    R10,R3\n         BCT   R7,RIBLOOP\n         CLI   SWITCH,C'1'\n         BE    RETURN\n         TPUT  BLANK,L'BLANK\n         TPUT  NOENQ,L'NOENQ\n         EJECT\nRETURN   L     R0,=F'32768'\n         L     R1,R3SAVE\n         FREEMAIN R,LV=(0),A=(1)\nRETURX   ENDALL\n         EJECT\n         DS    0F\nRIBLNGTH DC    H'0'\nRIBELENG DC    H'0'\n         SPACE\n         DS    0F\n         DS    0F\nSCANSAVE DS    18F                     18 WORD SAVEAREA REQ FOR GQSCAN\nANYENQ   DC    F'0'\nSWITCH   DC    C'0'\nR3SAVE   DS    F\nR9SAVE   DS    F\nWORKA    DS    2F'0'\nWORKB    DS    2F'0'\nONE      DC    H'1'\nWAITING  DC    CL9'*WAITING*'\nEXCL     DC    CL4'EXCL'\nSHR      DC    CL4'SHR '\nSYSDSN   DC    CL8'SYSDSN  '\nREQDSN   DS    CL44' '\n         EJECT\nDSNLINE  DS   0CL80\nJOBNAME  DS    CL8\n         DC    C' '\n         DC    CL5'NAME='\nDSN      DS    CL44\n         DC    CL1' '\nWAITFLAG DS    CL9\n         DC    CL1' '\nEXCLFLAG DS    CL4\n         DC    CL7' '\nDSNLINEL EQU   *-DSNLINE\n         SPACE\nULINE    DS   0CL72\n         DC    72C'-'\nULINEL   EQU   *-ULINE\n         SPACE\n         DC    CL6' '\nMCFLAG   DS    CL1\n         DC    CL6' '\n         DC    CL2' '\n         DC    CL3' '\nRESVFLAG DS    CL1\n         DC    CL3' '\n         DC    CL2' '\n         DC    CL2' '\nGLOBFLAG DS    CL1\n         DC    CL3' '\n         DC    CL2' '\n         DC    CL2' '\nOWNFLAG  DS    CL1\n         DC    CL2' '\n         SPACE\nCODE04M  DS   0CL72\n         DC    CL72'NOT IN USE OR NOT A FULLY QUALIFIED DATA SET NAME'\nCODE04ML EQU   *-CODE04M\n         SPACE\nCODE08M  DS   0CL72\n         DC    CL72'GQSCAN AREA TOO SMALL - RETRY COMMAND'\nCODE08ML EQU   *-CODE08M\n         SPACE\nCODE0CM  DS   0CL72\n         DC    CL72'ERROR ENCOUNTERED - RETRY COMMAND'\nCODE0CML EQU   *-CODE0CM\n         SPACE\nCODE10M  DS   0CL72\n         DC    CL72'INVALID SYSNAME - RETRY COMMAND'\nCODE10ML EQU   *-CODE10M\n         SPACE\nHEX      DC    C'0123456789ABCDEF'\nHEXLO    DC    X'000102030405060708090A0B0C0D0E0F'\nHEXHI    DC    X'00102030405060708090A0B0C0D0E0F0'\nPWORK    DC    H'0'\nCLEAR    DC    X'C1115D7E1140403C4040001DC813'  CLEAR SCREEN\nTITLE    DC    C'0000  - ENQUEUE USAGE DISPLAY XSID YY.DDD  HH.MM.SS'\nPMSG     DC    CL72'INVALID PARAMETER SPECIFIED'\nNOENQ    DS    0CL72\n         DC    CL72'NO ENQUEUES EXIST        '\nNOENQL   EQU   *-NOENQ\nERRORM   DC    CL72'ERROR  ***** MORE THAN ONE RIB RETURNED *****'\nBLANK    DC    CL72' '\nREQLEN   DC    XL1'00'\nSCANAREA DSECT\n         DS    65536X                  SCAN INFO AREA\n         EJECT\n         IKJCPPL\n         EJECT\n         IEESMCA\n         EJECT\n         ISGRIB\n         END\n//L.SYSLMOD  DD   DSN=TEST.PGM.LOAD(QN),DISP=SHR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "QS": {"ttr": 4609, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x95\\x19\\x1f\\x00\\x95\\x19\\x1f\\tH\\x00\"\\x00.\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1995-07-10T00:00:00", "modifydate": "1995-07-10T09:48:00", "lines": 34, "newlines": 46, "modlines": 0, "user": "ED115DM"}, "text": "PROC 1 JB\nCONTROL MAIN MSG\nISPEXEC CONTROL ERRORS RETURN\nGOTO NORM\nCONTROL LIST CONLIST SYMLIST\nNORM:-\nSET &ZJBA = &JB\nISPEXEC VPUT ZJBA ASIS\nKLEAR\nSET &JJ = &JB&STR(*)\nSET &JBN = &STR(&JJ)\n/* Q &JJ */\n/* WRITE */\nSET SYSOUTTRAP = 99\nCONTROL MSG\nSTATUS &JB\nCONTROL NOMSG\nSET &S = SYSOUTLINE\nSET &N = 1\nDO WHILE 1=1\n    SET &L = &STR(&&&S&N)\n    IF &STR(&L) = &STR() THEN GOTO DISPL\n    WRITE &L\n    IF &SUBSTR(1:9,&L) = &STR(IKJ56211I) THEN -\n     DO\n     SET &I1 = &EVAL(20+&LENGTH(&JB))\n     SET &I2 = &I1 +3\n     SET &JBN = &SUBSTR(&I1:&I2,&L)\n     END\n    SET &N = &N +1\nEND\nDISPL:-\nWRITE\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "QZ": {"ttr": 4611, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x954\\x1f\\x00\\x954\\x1f\\x16\\x07\\x00%\\x00%\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-12-07T00:00:00", "modifydate": "1995-12-07T16:07:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "ED115DM"}, "text": "PROC 1 JB\nCONTROL MAIN MSG\nISPEXEC CONTROL ERRORS RETURN\nGOTO NORM\nCONTROL LIST CONLIST SYMLIST\nNORM:-\nSET &JJ = &JB&STR(*)\nSET &JBN = &STR(&JJ)\n/* Q &JJ */\n/* WRITE */\nSET SYSOUTTRAP = 99\nCONTROL MSG\nSTATUS &JB\nCONTROL NOMSG\nSET &S = SYSOUTLINE\nSET &N = 1\nDO WHILE 1=1\n    SET &L = &STR(&&&S&N)\n    IF &STR(&L) = &STR() THEN GOTO DISPL\n    IF &SUBSTR(1:9,&L) = &STR(IKJ56211I) THEN -\n     DO\n     SET &I1 = &EVAL(20+&LENGTH(&JB))\n     SET &I2 = &EVAL(23+&LENGTH(&JB))\n     SET &JBN = &SUBSTR(&I1:&I2,&L)\n     IF &JBN < 1000 THEN -\n     SET &JBN = &SUBSTR(&I1+1:&I2,&L)\n     IF &JBN < 100 THEN -\n     SET &JBN = &SUBSTR(&I1+2:&I2,&L)\n     IF &JBN < 10  THEN -\n     SET &JBN = &SUBSTR(&I1+3:&I2,&L)\n     END\n    SET &N = &N +1\nEND\nDISPL:-\nSET &ZZ = &STR(TSO F;ACT;S S &JBN)\nISPEXEC DISPLAY PANEL(ZONK) COMMAND(ZZ)\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCR": {"ttr": 4613, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x90&O\\x00\\x980?\\x16\\x14\\x00\\xec\\x00\\xde\\x00\\x1d\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1990-09-21T00:00:00", "modifydate": "1998-10-30T16:14:00", "lines": 236, "newlines": 222, "modlines": 29, "user": "XSDMN"}, "text": "//XSDMNDMM JOB $$$$,DAVE,MSGCLASS=X,CLASS=Q,NOTIFY=C4SYSDM\n//ASMHCL   PROC MAC1='SYS1.MACLIB',MAC2='SYS1.MODGEN'\n//ASM    EXEC  PGM=IEV90,PARM='NODECK,OBJECT',REGION=1M\n//SYSLIB   DD  DSN=&MAC1,DISP=SHR\n//         DD  DSN=&MAC2,DISP=SHR\n//SYSUT1   DD  UNIT=(3390,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  SYSOUT=B,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))\n//SYSPRINT DD SYSOUT=*,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=3390,SPACE=(CYL,(5,5,0)),             *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//LKED EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL,AMODE=24,RMODE=24',      *\n//        REGION=1M,COND=(8,LT,ASM)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD DD DISP=(,PASS),UNIT=3390,                                   *\n//        SPACE=(CYL,(2,1,2)),DSN=&&GOSET(GO)\n//SYSUT1   DD  UNIT=3390,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=*\n//  PEND\n// EXEC ASMHCL\nLSPACE   CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nCVTPTR   EQU   X'010'\nCVTUCBSC EQU   X'434'\n         USING *,R15\n         STM   R14,R12,12(R13)\n         LA    R12,SAVE\n         ST    R12,8(R13)\n         ST    R13,SAVE+4\n         LR    R13,R12\n         LR    R12,R15\n         USING LSPACE,R12\n         DROP  R15\n         L     R2,0(R1)\n         LA    R3,0\n         LH    R3,0(R2)\n         ST    R3,PFLAG\n         LINK EP=KLEAR\n         OPEN  (SYSPRINT,OUTPUT)\n         PUT   SYSPRINT,HDR1\n         PUT   SYSPRINT,HDR2\n         PUT   SYSPRINT,HDR3\n         PUT   SYSPRINT,HDR4\n         PUT   SYSPRINT,HDR5\n         PUT   SYSPRINT,HDR6\n*EXTUCB  L     R15,CVTPTR\n*        L     R15,CVTUCBSC(,R15)\n*        CALL (15),(WORKAREA,DEVCLASS,ADDRUCB),VL\n*        LTR   R15,R15\n*        BNZ   ENDJC\nNEXTUCB  DS    0H\nU        UCBSCAN COPY,WORKAREA=WORKAREA,UCBAREA=UCBAREA,RANGE=ALL,     1\n               DYNAMIC=YES,DEVCLASS=DASD,RETCODE=RET,RSNCODE=RSN\n*        SR    R6,R6\n         L     R6,RET\n         LTR   R6,R6\n         BNZ   ENDJC\n*        MVC   0(48,R5),UCBAREA\n*        B     CONT\n         SR    R6,R6\n         LA    R6,UCBAREA   UCB ADDRESSES\n         B     FNDGBL\n*\n         LR    R6,R5\n         LTR   R6,R6        CHECK FOR VALID ENTRIES\n         BZ    INCR1        UCB HOLE\n         C     R6,FMIN1     CHECK FOR END\n         BE    ENDJC\n         CLI   18(R6),X'20' MUST BE DIRECT ACCESS\n         BNE   INCR1\n         C     R6,LASTADR   UCB ADDRESSES MUST INCREASE\n         BNH   INCR1        OTHERWISE THEY REPEAT.\n         ST    R6,LASTADR   NEW ADDRESS\nFNDGBL   TM    3(R6),X'80'  ONLINE BIT\n         BZ    INCR1        NOPE\nCHKRDY   TM    6(R6),X'40'  TEST READY BIT\n         BO    INCR1        NOT READY\n         TM    17(R6),X'08' VIRTUAL UCB\n         BO    INCR1        YES\n         TM    34(R6),X'08'\n         BNO   INCR1\n         B     FNDUCB\nINCR1    DS    0H\n         B     NEXTUCB      TRY NEXT UCB\n*\n**  MOVE UCB INFORMATION TO OUTPUT LINE\n*\nFNDUCB   MVC   VOLID,28(R6) MOVE VOLID\n         MVC   ADDR,13(R6)  MOVE UNIT ADDRESS\n         MVC   PG,=C'      '\n         MVC   MTD,=C'    '\n         TM    34(R6),X'40'    TEST PAGE PK\n         BNO   TPBL            TO TEST PUBLIC\n         MVC   PG,=C'PAGEPK'\nTPBL     TM    34(R6),X'08'    TEST PUBLIC\n         BNO   TSCR            TO TEST STORAGE\n         MVC   MTD,=C'SCR'     WAS PUBLIC\n         B     NPRIV\nTSCR     TM    34(R6),X'04'    TEST STORAGE\n         BNO   NPRIV           TO TEST SYSRES\n         MVC   MTD,=C'SCR'     WAS STORAGE\nNPRIV    MVC   SY,=C'      '\n         TM    3(R6),X'02'     TEST SYSRES\n         BNO   NDM             NOT SYSRES\n         MVC   SY,=C'SYSRES'   WAS SYSRES\n*\n**  IF OFFLINE, DO NOT PROCESS\n*\nNDM      TM    3(R6),X'40'  PENDING BIT - SHOULD BE OFF\n         BO    INCR1\n         TM    3(R6),X'80'  ONLINE BIT - SHOULD BE ON\n         BZ    INCR1\n*\n*\n         LA    R1,LSP       POINT TO WORKAREA\n         LR    R0,R6        POINT TO UCB\n         SVC   78           ISSUE LSPACE SVC\n         MVC   O1,ADDR\n         MVC   O2,VOLID\n         MVC   O3,I3\n         MVC   O4,I4\n         MVC   O5,I5\n         MVC   O6,I6\n         MVC   O7,I7\n         MVC   O8,MTD\n         MVC   O9,SY\n         MVC   O10,PG\n         MVC   O11,=C'          '\n         TM    34(R6),X'04'    TEST STORAGE\n         BNO   PUTNSCR\n         CLC   VOLID(3),=C'C48'\n         BE    C48\n         CLC   I3,=C'0111'\n         BH    PUTST\n         MVC   O11,CMT\n         B     PUTST\nC48      CLC   I3,=C'0177'\n         BH    PUTST\n         MVC   O11,CMT\n         B     PUTST\nPUTNSCR  DS    0H\n         LA    R1,1\n         L     R2,PFLAG\n         CR    R1,R2\n         BE    INCR1\nPUTST    PUT   SYSPRINT,OUT\n         B     INCR1\nENDJC    DS    0H\n         CLOSE (SYSPRINT)\n         L     R13,4(R13)\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\nSYSPRINT DCB   DSORG=PS,MACRF=(PM),DDNAME=SYSPRINT,LRECL=79,RECFM=FB,  X\n               BLKSIZE=790\nSAVE     DC    19F'0'\nADDRUCB  DS    A\nWORKAREA DC    XL100'00'\nUCBAREA  DC    XL50'00'\nRET      DC    F'0'\nRSN      DC    F'0'\nDEVCLASS DC    X'00'\n         DS    0F\nFMIN1    DC    X'0000FFFF'    END OF UCB LIST\nLASTADR  DS    F       LAST UCB ADDRESS FOUND ( NO DUP'S )\nPFLAG    DS    F       FLAG FOR PARM NEQ 0\nVOLSET   XC    LASTADR,LASTADR CLEAR THE UCB COMPARE ADDRESS\nADDR     DS    CL3     UCB ADDRESS IN CHARACTERS\nMTD      DS    CL3     VOLUME MOUNTED AS\nPG       DS    CL6     VOLUME ? PAGING\nSY       DS    CL6     ? SYSRES\nCMT      DC    CL10'>=80% FULL'\n         DC    CL1' '\nVOLID    DS    CL6     CURRENT VOLUME SERIAL NUMBER TO PROCESS\n         DC    CL1' '\nLSP      DS    0C\n         DS    CL6     'SPACE='\nI3       DS    CL4     TOTAL NUMBER OF FREE CYLINDERS\n         DS    CL1     ','\nI4       DS    CL4     TOTAL NUMBER OF FREE TRACKS\n         DS    CL1     ','\nI5       DS    CL4     NUMBER OF EXTENTS\n         DS    CL1     '/'\nI6       DS    CL4     LARGEST EXTENT OF CONTIG CYLINDERS\n         DS    CL1     ','\nI7       DS    CL4     LARGEST EXTENT OF CONTIG TRACKS\n         DS    39C' '\nHDR1     DC    CL80'            TOTAL  TOTAL  NUMBER  LARGEST LARGEST'\nHDR2     DC    CL80'            NUMBER NUMBER         CONTIG  CONTIG '\nHDR3     DC    CL80'UCB VOLSER    OF     OF     OF    EXTENT  EXTENT '\nHDR4     DC    CL80'             FREE   FREE           CYLS    TRKS  '\nHDR5     DC    CL80'             CYLS   TRKS  EXTENTS                '\nHDR6     DC    CL80'                                                 '\n*                   XXX XXXXXX   XXXX   XXXX   XXXX    XXXX    XXXX\nOUT      DS    0F\nO1       DS    CL3  XXX\n         DC    CL1' '\nO2       DS    CL6      XXXXXX\n         DC    CL3' '\nO3       DS    CL4               XXXX\n         DC    CL3' '\nO4       DS    CL4                      XXXX\n         DC    CL3' '\nO5       DS    CL4                             XXXX\n         DC    CL4' '\nO6       DS    CL4                                     XXXX\n         DC    CL4' '\nO7       DS    CL4                                             XXXX\n         DC    CL4' '\nO8       DS    CL3\n         DC    CL1' '\nO9       DS    CL6\n         DC    CL1' '\nO10      DS    CL6\n         DC    CL1' '\nO11      DS    CL10\n         DC    CL1' '\n         LTORG\n         END\n//*KED.SYSLMOD DD DSN=SYS1.MISC.LINKLIB(LSPACE),DISP=SHR\n//LKED.SYSLMOD DD DSN=C4SYSDM.LOADLIB(SCR),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPON": {"ttr": 4618, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x00\\x00\\x90\\x05\\x0f\\x00\\x98)?\\x10H\\x01\\x0b\\x00\\xee\\x00\\x00\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1990-02-19T00:00:00", "modifydate": "1998-10-20T10:48:00", "lines": 267, "newlines": 238, "modlines": 0, "user": "XSDMN"}, "text": "//XSDMNSPO JOB MSGCLASS=X,CLASS=B,NOTIFY=XSDMN\n//ASMHCL   PROC MAC1='SYS1.MACLIB',MAC2='SYS1.MODGEN'\n//ASM    EXEC  PGM=IEV90,PARM='NODECK,OBJECT',REGION=1M\n//SYSLIB   DD  DSN=&MAC1,DISP=SHR\n//         DD  DSN=&MAC2,DISP=SHR\n//SYSUT1   DD  UNIT=(3380,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  SYSOUT=B,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))\n//SYSPRINT DD SYSOUT=*,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=3380,SPACE=(CYL,(5,5,0)),             *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//LKED EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL,AMODE=24,RMODE=24',      *\n//        REGION=1M,COND=(8,LT,ASM)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD DD DISP=(,PASS),UNIT=3380,                                   *\n//        SPACE=(CYL,(2,1,2)),DSN=&&GOSET(GO)\n//SYSUT1   DD  UNIT=3380,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=*\n//  PEND\n// EXEC ASMFCL\nSPON     CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*VTPTR   EQU   X'010'\n*VTUCBSC EQU   X'434'\n         USING *,R15\n         STM   R14,R12,12(R13)\n         LA    R12,SAVE\n         ST    R12,8(R13)\n         ST    R13,SAVE+4\n         LR    R13,R12\n         LR    R12,R15\n         USING SPON,R12\n         DROP  R15\n         LINK EP=KLEAR\n         LR    R3,R1\n         USING CPPL,R3\n         L     R4,CPPLCBUF             GET COMMAND BUFFER\n         USING CBUF,R4\n         LH    R6,CBUFLNG              GET COMMAND BUFFER LENGTH\n         LH    R5,CBUFOFF              GET OPERAND OFFSET\n         LA    R7,4(R5)\n         SR    R6,R7                   OPERAND LENGTH\n         BNP   NODATA\n         LA    R5,CBUFDATA(R5)\n         BCTR  R6,0\n         EX    R6,MVPARM\n         OC    TARGET(6),SPACES        UPPER CASE\n         OPEN  (SYSPRINT,OUTPUT)\n         PUT   SYSPRINT,HDR1\n         PUT   SYSPRINT,HDR2\n         PUT   SYSPRINT,HDR3\n         PUT   SYSPRINT,HDR4\n         PUT   SYSPRINT,HDR5\n         PUT   SYSPRINT,HDR6\n*EXTUCB  L     R15,CVTPTR\n*        L     R15,CVTUCBSC(,R15)\n*        CALL (15),(WORKAREA,DEVCLASS,ADDRUCB),VL\n*        LTR   R15,R15\n*        BNZ   ENDJC\n*        SR    R6,R6\n         LA    R0,4095\n         GETMAIN R,LV=(0)\n         LR    R5,R1\nNEXTUCB  LA    R6,WORKAREA\nU        UCBSCAN COPY,WORKAREA=WORKAREA,UCBAREA=UCBAREA,RANGE=ALL,     1\n               DYNAMIC=YES,DEVCLASS=DASD,RETCODE=RET,RSNCODE=RSN\n         L     R6,RET\n         LTR   R6,R6\n         BNZ   ENDJCE\n         MVC   0(48,R5),UCBAREA\n         B     CONT\nENDJCE   L     R6,RET\n         CVD   R6,WORK\n         OI    WORK+7,X'0F'\n*        UNPK  HDR7(4),WORK+6(2)\n         L     R6,RSN\n         OI    WORK+7,X'0F'\n*        UNPK  HDR7+8(4),WORK+6(2)\n*        PUT   SYSPRINT,HDR7\nCONT     DS    0H\n*        L     R5,ADDRUCB   UCB ADDRESSES\n*        LR    R6,R5\n*        LTR   R6,R6        CHECK FOR VALID ENTRIES\n*        BZ    INCR1        UCB HOLE\n*        C     R6,FMIN1     CHECK FOR END\n*        BE    ENDJC\n*        CLI   18(R6),X'20' MUST BE DIRECT ACCESS\n*        BNE   INCR1\n*        C     R6,LASTADR   UCB ADDRESSES MUST INCREASE\n*        BNH   INCR1        OTHERWISE THEY REPEAT.\n*        ST    R6,LASTADR   NEW ADDRESS\n*        USING UCBCMSEG,R5\nFNDGBL   TM    3(R5),X'80'  ONLINE BIT\n         BZ    INCR1        NOPE\nCHKRDY   TM    6(R5),X'40'  TEST READY BIT\n         BO    INCR1        NOT READY\n         TM    17(R5),X'08' VIRTUAL UCB\n         BO    INCR1        YES\n         CLC   TARGET(6),28(R5)\n         BE    FNDUCB\nINCR1    DS    0H\n         B     NEXTUCB      TRY NEXT UCB\n*\n**  MOVE UCB INFORMATION TO OUTPUT LINE\n*\nFNDUCB   MVC   VOLID,28(R5) MOVE VOLID\n         MVC   ADDR,13(R5)  MOVE UNIT ADDRESS\n         MVC   PG,=C'      '\n         MVC   MTD,=C'    '\n         TM    34(R5),X'40'    TEST PAGE PK\n         BNO   TPBL            TO TEST PUBLIC\n         MVC   PG,=C'PAGEPK'\nTPBL     TM    34(R5),X'08'    TEST PUBLIC\n         BNO   TSTG            TO TEST STORAGE\n         MVC   MTD,=C'SCR'     WAS PUBLIC\n         B     NPRIV\nTSTG     TM    34(R5),X'04'    TEST STORAGE\n         BNO   NPRIV           TO TEST SYSRES\n         MVC   MTD,=C'STG'     WAS STORAGE\nNPRIV    MVC   SY,=C'      '\n         TM    3(R5),X'02'     TEST SYSRES\n         BNO   NDM             NOT SYSRES\n         MVC   SY,=C'SYSRES'   WAS SYSRES\n*\n**  IF OFFLINE, DO NOT PROCESS\n*\n*DM      TM    3(R6),X'40'  PENDING BIT - SHOULD BE OFF\n*        BO    INCR1\n*        TM    3(R6),X'80'  ONLINE BIT - SHOULD BE ON\n*        BZ    INCR1\n*\n*\nNDM      DS    0H\n         LA    R1,LSP       POINT TO WORKAREA\n         LR    R0,R5        POINT TO UCB\n         SVC   78           ISSUE LSPACE SVC\n         MVC   O1,ADDR\n         MVC   O2,VOLID\n         MVC   O3,I3\n         MVC   O4,I4\n         MVC   O5,I5\n         MVC   O6,I6\n         MVC   O7,I7\n         MVC   O8,MTD\n         MVC   O9,SY\n         MVC   O10,PG\n         MVC   O11,=C'          '\n         TM    34(R5),X'04'    TEST STORAGE\n         BNO   PUTNSTG\n         CLC   VOLID(3),=C'C48'\n         BE    C48\n         CLC   I3,=C'0111'\n         BH    PUTST\n         MVC   O11,CMT\n         B     PUTST\nC48      CLC   I3,=C'0177'\n         BH    PUTST\n         MVC   O11,CMT\n         B     PUTST\nPUTNSTG  DS    0H\n*        LA    R1,1\n*        L     R2,PFLAG\n*        CR    R1,R2\n*        BE    INCR1\nPUTST    PUT   SYSPRINT,OUT\n*        B     INCR1\nENDJC    DS    0H\n         LR    R1,R5\n         LA    R0,4095\n         FREEMAIN R,LV=(0),A=(1)\n         CLOSE (SYSPRINT)\nNODATA   L     R13,4(R13)\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\nSYSPRINT DCB   DSORG=PS,MACRF=(PM),DDNAME=SYSPRINT,LRECL=79,RECFM=FB,  X\n               BLKSIZE=790\nSAVE     DC    19F'0'\nADDRUCB  DS    A\nWORKAREA DC    XL100'00'\nWORK     DS    D\nUCBAREA  DC    XL50'00'\nRET      DC    F'0'\nRSN      DC    F'0'\nDEVCLASS DC    X'00'\n         DS    0F\nFMIN1    DC    X'0000FFFF'    END OF UCB LIST\nLASTADR  DS    F       LAST UCB ADDRESS FOUND ( NO DUP'S )\nPFLAG    DS    F       FLAG FOR PARM NEQ 0\nVOLSET   XC    LASTADR,LASTADR CLEAR THE UCB COMPARE ADDRESS\nADDR     DS    CL3     UCB ADDRESS IN CHARACTERS\nMTD      DS    CL3     VOLUME MOUNTED AS\nPG       DS    CL6     VOLUME ? PAGING\nSY       DS    CL6     ? SYSRES\nCMT      DC    CL10'>=80% FULL'\n         DC    CL1' '\nVOLID    DS    CL6     CURRENT VOLUME SERIAL NUMBER TO PROCESS\n         DC    CL1' '\nLSP      DS    0C\n         DS    CL6     'SPACE='\nI3       DS    CL4     TOTAL NUMBER OF FREE CYLINDERS\n         DS    CL1     ','\nI4       DS    CL4     TOTAL NUMBER OF FREE TRACKS\n         DS    CL1     ','\nI5       DS    CL4     NUMBER OF EXTENTS\n         DS    CL1     '/'\nI6       DS    CL4     LARGEST EXTENT OF CONTIG CYLINDERS\n         DS    CL1     ','\nI7       DS    CL4     LARGEST EXTENT OF CONTIG TRACKS\n         DS    39C' '\nHDR1     DC    CL80'            TOTAL  TOTAL  NUMBER  LARGEST LARGEST'\nHDR2     DC    CL80'            NUMBER NUMBER         CONTIG  CONTIG '\nHDR3     DC    CL80'UCB VOLSER    OF     OF     OF    EXTENT  EXTENT '\nHDR4     DC    CL80'             FREE   FREE           CYLS    TRKS  '\nHDR5     DC    CL80'             CYLS   TRKS  EXTENTS                '\nHDR6     DC    CL80'                                                 '\n*                   XXX XXXXXX   XXXX   XXXX   XXXX    XXXX    XXXX\nOUT      DS    0F\nO1       DS    CL3  XXX\n         DC    CL1' '\nO2       DS    CL6      XXXXXX\n         DC    CL3' '\nO3       DS    CL4               XXXX\n         DC    CL3' '\nO4       DS    CL4                      XXXX\n         DC    CL3' '\nO5       DS    CL4                             XXXX\n         DC    CL4' '\nO6       DS    CL4                                     XXXX\n         DC    CL4' '\nO7       DS    CL4                                             XXXX\n         DC    CL4' '\nO8       DS    CL3\n         DC    CL1' '\nO9       DS    CL6\n         DC    CL1' '\nO10      DS    CL6\n         DC    CL1' '\nO11      DS    CL10\n         DC    CL1' '\nTARGET   DC    CL6' '\nSPACES   DC    CL6' '\n         LTORG\nMVPARM   MVC   TARGET(*-*),0(R5)\nCBUF     DSECT\nCBUFLNG  DS    AL2\nCBUFOFF  DS    AL2\nCBUFDATA DS    0C\n         IKJCPPL\n         END\n//*KED.SYSLMOD DD DSN=SYS1.MISC.LINKLIB(SPON),DISP=SHR\n//LKED.SYSLMOD DD DSN=TEST.PGM.LOAD(SPON),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STG": {"ttr": 4865, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x89\\x17\\x1f\\x00\\x98(\\x8f\\x15\"\\x00\\xe9\\x00\\xdd\\x00\\x18\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1989-06-20T00:00:00", "modifydate": "1998-10-15T15:22:00", "lines": 233, "newlines": 221, "modlines": 24, "user": "XSDMN"}, "text": "//XSDMNDMM JOB MSGCLASS=X,CLASS=B,NOTIFY=XSDMN\n//ASMHCL   PROC MAC1='SYS1.MACLIB',MAC2='SYS1.AMODGEN'\n//ASM    EXEC  PGM=IEV90,PARM='NODECK,OBJECT',REGION=1M\n//SYSLIB   DD  DSN=&MAC1,DISP=SHR\n//         DD  DSN=&MAC2,DISP=SHR\n//SYSUT1   DD  UNIT=(3380,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  SYSOUT=B,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))\n//SYSPRINT DD SYSOUT=*,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=3390,SPACE=(CYL,(5,5,0)),             *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//LKED EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL,AMODE=24,RMODE=24',      *\n//        REGION=1M,COND=(8,LT,ASM)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD DD DISP=(,PASS),UNIT=3390,                                   *\n//        SPACE=(CYL,(2,1,2)),DSN=&&GOSET(GO)\n//SYSUT1   DD  UNIT=3380,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=*\n//  PEND\n// EXEC ASMHCL\nLSPACE   CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nCVTPTR   EQU   X'010'\nCVTUCBSC EQU   X'434'\n         USING *,R15\n         STM   R14,R12,12(R13)\n         LA    R12,SAVE\n         ST    R12,8(R13)\n         ST    R13,SAVE+4\n         LR    R13,R12\n         LR    R12,R15\n         USING LSPACE,R12\n         DROP  R15\n         L     R2,0(R1)\n         LA    R3,0\n         LH    R3,0(R2)\n         ST    R3,PFLAG\n         LINK EP=KLEAR\n         OPEN  (SYSPRINT,OUTPUT)\n         PUT   SYSPRINT,HDR1\n         PUT   SYSPRINT,HDR2\n         PUT   SYSPRINT,HDR3\n         PUT   SYSPRINT,HDR4\n         PUT   SYSPRINT,HDR5\n         PUT   SYSPRINT,HDR6\n*EXTUCB  L     R15,CVTPTR\n*        L     R15,CVTUCBSC(,R15)\n*        CALL (15),(WORKAREA,DEVCLASS,ADDRUCB),VL\n*        LTR   R15,R15\n*        BNZ   ENDJC\nNEXTUCB  DS    0H\nU        UCBSCAN COPY,WORKAREA=WORKAREA,UCBAREA=UCBAREA,RANGE=ALL,     1\n               DYNAMIC=YES,DEVCLASS=DASD,RETCODE=RET,RSNCODE=RSN\n*        SR    R6,R6\n         L     R6,RET\n         LTR   R6,R6\n         BNZ   ENDJC\n         LA    R6,UCBAREA   UCB ADDRESSES\n         B     FNDGBL\n         SR    R6,R6\n         LR    R6,R5\n         LTR   R6,R6        CHECK FOR VALID ENTRIES\n         BZ    INCR1        UCB HOLE\n         C     R6,FMIN1     CHECK FOR END\n         BE    ENDJC\n         CLI   18(R6),X'20' MUST BE DIRECT ACCESS\n         BNE   INCR1\n         C     R6,LASTADR   UCB ADDRESSES MUST INCREASE\n         BNH   INCR1        OTHERWISE THEY REPEAT.\n         ST    R6,LASTADR   NEW ADDRESS\nFNDGBL   TM    3(R6),X'80'  ONLINE BIT\n         BZ    INCR1        NOPE\nCHKRDY   TM    6(R6),X'40'  TEST READY BIT\n         BO    INCR1        NOT READY\n         TM    17(R6),X'08' VIRTUAL UCB\n         BO    INCR1        YES\n         TM    34(R6),X'04'\n         BNO   INCR1\n         B     FNDUCB\nINCR1    DS    0H\n         B     NEXTUCB      TRY NEXT UCB\n*\n**  MOVE UCB INFORMATION TO OUTPUT LINE\n*\nFNDUCB   MVC   VOLID,28(R6) MOVE VOLID\n         MVC   ADDR,13(R6)  MOVE UNIT ADDRESS\n         MVC   PG,=C'      '\n         MVC   MTD,=C'    '\n         TM    34(R6),X'40'    TEST PAGE PK\n         BNO   TPBL            TO TEST PUBLIC\n         MVC   PG,=C'PAGEPK'\nTPBL     TM    34(R6),X'08'    TEST PUBLIC\n         BNO   TSTG            TO TEST STORAGE\n         MVC   MTD,=C'SCR'     WAS PUBLIC\n         B     NPRIV\nTSTG     TM    34(R6),X'04'    TEST STORAGE\n         BNO   NPRIV           TO TEST SYSRES\n         MVC   MTD,=C'STG'     WAS STORAGE\nNPRIV    MVC   SY,=C'      '\n         TM    3(R6),X'02'     TEST SYSRES\n         BNO   NDM             NOT SYSRES\n         MVC   SY,=C'SYSRES'   WAS SYSRES\n*\n**  IF OFFLINE, DO NOT PROCESS\n*\nNDM      TM    3(R6),X'40'  PENDING BIT - SHOULD BE OFF\n         BO    INCR1\n         TM    3(R6),X'80'  ONLINE BIT - SHOULD BE ON\n         BZ    INCR1\n*\n*\n         LA    R1,LSP       POINT TO WORKAREA\n         LR    R0,R6        POINT TO UCB\n         SVC   78           ISSUE LSPACE SVC\n         MVC   O1,ADDR\n         MVC   O2,VOLID\n         MVC   O3,I3\n         MVC   O4,I4\n         MVC   O5,I5\n         MVC   O6,I6\n         MVC   O7,I7\n         MVC   O8,MTD\n         MVC   O9,SY\n         MVC   O10,PG\n         MVC   O11,=C'          '\n         TM    34(R6),X'04'    TEST STORAGE\n         BNO   PUTNSTG\n         CLC   VOLID(3),=C'C48'\n         BE    C48\n         CLC   I3,=C'0111'\n         BH    PUTST\n         MVC   O11,CMT\n         B     PUTST\nC48      CLC   I3,=C'0177'\n         BH    PUTST\n         MVC   O11,CMT\n         B     PUTST\nPUTNSTG  DS    0H\n         LA    R1,1\n         L     R2,PFLAG\n         CR    R1,R2\n         BE    INCR1\nPUTST    PUT   SYSPRINT,OUT\n         B     INCR1\nENDJC    DS    0H\n         CLOSE (SYSPRINT)\n         L     R13,4(R13)\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\nSYSPRINT DCB   DSORG=PS,MACRF=(PM),DDNAME=SYSPRINT,LRECL=79,RECFM=FB,  X\n               BLKSIZE=790\nSAVE     DC    19F'0'\nADDRUCB  DS    A\nWORKAREA DC    XL100'00'\nUCBAREA  DC    XL50'00'\nRET      DC    F'0'\nRSN      DC    F'0'\nDEVCLASS DC    X'00'\n         DS    0F\nFMIN1    DC    X'0000FFFF'    END OF UCB LIST\nLASTADR  DS    F       LAST UCB ADDRESS FOUND ( NO DUP'S )\nPFLAG    DS    F       FLAG FOR PARM NEQ 0\nVOLSET   XC    LASTADR,LASTADR CLEAR THE UCB COMPARE ADDRESS\nADDR     DS    CL3     UCB ADDRESS IN CHARACTERS\nMTD      DS    CL3     VOLUME MOUNTED AS\nPG       DS    CL6     VOLUME ? PAGING\nSY       DS    CL6     ? SYSRES\nCMT      DC    CL10'>=80% FULL'\n         DC    CL1' '\nVOLID    DS    CL6     CURRENT VOLUME SERIAL NUMBER TO PROCESS\n         DC    CL1' '\nLSP      DS    0C\n         DS    CL6     'SPACE='\nI3       DS    CL4     TOTAL NUMBER OF FREE CYLINDERS\n         DS    CL1     ','\nI4       DS    CL4     TOTAL NUMBER OF FREE TRACKS\n         DS    CL1     ','\nI5       DS    CL4     NUMBER OF EXTENTS\n         DS    CL1     '/'\nI6       DS    CL4     LARGEST EXTENT OF CONTIG CYLINDERS\n         DS    CL1     ','\nI7       DS    CL4     LARGEST EXTENT OF CONTIG TRACKS\n         DS    39C' '\nHDR1     DC    CL80'            TOTAL  TOTAL  NUMBER  LARGEST LARGEST'\nHDR2     DC    CL80'            NUMBER NUMBER         CONTIG  CONTIG '\nHDR3     DC    CL80'UCB VOLSER    OF     OF     OF    EXTENT  EXTENT '\nHDR4     DC    CL80'             FREE   FREE           CYLS    TRKS  '\nHDR5     DC    CL80'             CYLS   TRKS  EXTENTS                '\nHDR6     DC    CL80'                                                 '\n*                   XXX XXXXXX   XXXX   XXXX   XXXX    XXXX    XXXX\nOUT      DS    0F\nO1       DS    CL3  XXX\n         DC    CL1' '\nO2       DS    CL6      XXXXXX\n         DC    CL3' '\nO3       DS    CL4               XXXX\n         DC    CL3' '\nO4       DS    CL4                      XXXX\n         DC    CL3' '\nO5       DS    CL4                             XXXX\n         DC    CL4' '\nO6       DS    CL4                                     XXXX\n         DC    CL4' '\nO7       DS    CL4                                             XXXX\n         DC    CL4' '\nO8       DS    CL3\n         DC    CL1' '\nO9       DS    CL6\n         DC    CL1' '\nO10      DS    CL6\n         DC    CL1' '\nO11      DS    CL10\n         DC    CL1' '\n         LTORG\n         END\n//*KED.SYSLMOD DD DSN=SYS1.MISC.LINKLIB(LSPACE),DISP=SHR\n//LKED.SYSLMOD DD DSN=TEST.PGM.LOAD(STG),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSODSN": {"ttr": 4870, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x12?\\x00\\x99\\x12?\\x150\\x01\\xa6\\x01\\xa6\\x00\\x00\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-05-03T00:00:00", "modifydate": "1999-05-03T15:30:00", "lines": 422, "newlines": 422, "modlines": 0, "user": "XSDMN"}, "text": "//ED115DMA JOB EDPCSBS1,MSGCLASS=X,CLASS=L,REGION=4M,NOTIFY=ED115DM\n//*\n//    EXEC ASMHCL\n//*SM EXEC PGM=IFOX00,PARM=(LOAD,NODECK,'LINECNT=55')\n//C.SYSLIB DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n         MACRO\n&NAME    SAVEALL &RENT,&REG=3,&EQU=YES,&ID=NO\n         GBLB  &SAVRENT\n         GBLB  &REGSW\n         GBLB  &TIME\n         GBLC  &SAVNDX\n&SAVNDX  SETC  '&SYSNDX'\n&NAME    CSECT\n         AIF   ('&SAVRENT' EQ '1').NOTFREE\n         AIF   ('&REGSW' EQ '1').NOEQU\n         AIF   ('&EQU' NE 'YES').NOEQU\n&REGSW   SETB  1\n         SPACE\n***********************************************************************\n********           DEFINITION OF GENERAL REGISTERS             ********\n***********************************************************************\nR0       EQU   0    GENERAL REGISTER ZERO\nR1       EQU   1    GENERAL REGISTER ONE\nR2       EQU   2    GENERAL REGISTER TWO\nR3       EQU   3    GENERAL REGISTER THREE\nR4       EQU   4    GENERAL REGISTER FOUR\nR5       EQU   5    GENERAL REGISTER FIVE\nR6       EQU   6    GENERAL REGISTER SIX\nR7       EQU   7    GENERAL REGISTER SEVEN\nR8       EQU   8    GENERAL REGISTER EIGHT\nR9       EQU   9    GENERAL REGISTER NINE\nR10      EQU   10   GENERAL REGISTER TEN\nR11      EQU   11   GENERAL REGISTER ELEVEN\nR12      EQU   12   GENERAL REGISTER TWELVE\nR13      EQU   13   GENERAL REGISTER THIRTEEN\nR14      EQU   14   GENERAL REGISTER FOURTEEN\nR15      EQU   15   GENERAL REGISTER FIFTEEN\n         SPACE\nRA       EQU   10   GENERAL REGISTER TEN\nRB       EQU   11   GENERAL REGISTER ELEVEN\nRC       EQU   12   GENERAL REGISTER TWELVE\nRD       EQU   13   GENERAL REGISTER THIRTEEN\nRE       EQU   14   GENERAL REGISTER FOURTEEN\nRF       EQU   15   GENERAL REGISTER FIFTEEN\n***********************************************************************\n********             END OF REGISTER DEFINITIONS               ********\n***********************************************************************\n         SPACE\n.NOEQU   ANOP\n         SAVE  (14,12)\n         AIF   ('&REG' EQ '').MESS\n         BALR  &REG(1),0\n         AIF   (N'&REG EQ 1).A\n         AIF   (N'&REG EQ 2).B\n         AIF   (N'&REG EQ 3).C\n         AIF   (N'&REG EQ 4).D\n         AIF   (N'&REG EQ 5).E\n         MNOTE *****,'EXCESSIVE BASE REGISTERS -- 5 ASSUMED *****'\n         AGO   .E\n.MESS    MNOTE 12,'***** NO BASE REGISTER SPECIFIED *****'\n         MEXIT\n.NOTFREE MNOTE 12,'***** ENDALL NOT ISSUED PRIOR TO NEW SAVEALL *****'\n         MEXIT\n.E       USING *,&REG(1),&REG(2),&REG(3),&REG(4),&REG(5)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         L     &REG(4),=A(Q&SYSNDX+12288)\n         L     &REG(5),=A(Q&SYSNDX+16384)\n         AGO   .END\n.D       USING *,&REG(1),&REG(2),&REG(3),&REG(4)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         L     &REG(4),=A(Q&SYSNDX+12288)\n         AGO   .END\n.C       USING *,&REG(1),&REG(2),&REG(3)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         AGO   .END\n.B       USING *,&REG(1),&REG(2)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTER\n         AGO   .END\n.A       USING *,&REG(1)\n.END     ANOP\n         AIF   ('&RENT' NE 'RENT').NORENT\n&SAVRENT SETB  1\n         GETMAIN R,LV=4096         GET STORAGE FOR SAVE AREA\n         ST    13,4(1)             SET UP FORWARD CHAIN\n         ST    1,8(13)             SET UP BACKWARD CHAIN\n         L     0,20(0,13)          RESET REGISTER 0\n         L     1,24(0,13)          RESET REGISTER 1\n         L     13,8(0,13)          LOAD SAVE AREA ADDRESS\n         B     J&SYSNDX           BRANCH AROUND LTORG\n         AGO   .RENT\n.NORENT  ANOP\n&TIME    SETB  1\n         ST    13,SAVE&SYSNDX+4    SET UP FORWARD CHAIN\n         LA    1,SAVE&SYSNDX\n         ST    1,8(0,13)           SET UP BACKWARD CHAIN\n         L     1,24(0,13)          RESET REGISTER 1\n         LA    13,SAVE&SYSNDX\n         B     J&SYSNDX           BRANCH AROUND BASE REGISTER CONST\nSAVE&SYSNDX DC 18F'0'\n.RENT    ANOP\n         LTORG\n         AIF   ('&ID' NE 'YES').NOID\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n.NOID    ANOP\nJ&SYSNDX DS    0H\n         MEND\n         MACRO\n&NAME    ENDALL &CODE=\n         GBLB  &TIME\n         GBLB  &SAVRENT\n         GBLC  &SAVNDX\n         LCLA  &LEN\n         LCLC  &REG\n         AIF   ('&CODE' GT '4095').INVRET\n&NAME    DS    0H\n         AIF   (K'&CODE LE 0).CHKRENT\n         AIF   ('&CODE'(1,1) NE '(').CHKRENT\n         AIF   ('&CODE' EQ '(13)' OR '&CODE' EQ '(14)').INVREG\n         AIF   ('&CODE' EQ '(0)' OR '&CODE' EQ '(1)').INVREG\n         AIF   ('&CODE' NE '(15)').CHKRENT\n         LR    2,15               SAVE REG 15 RETURN CODE\n.CHKRENT AIF   (NOT &SAVRENT).NOTRENT\n&SAVRENT SETB  0\n         LR    1,13               LOAD SAVE AREA ADDRESS\n         L     13,4(0,13)         RE-LOAD REGISTER 13\n         FREEMAIN R,LV=4096,A=(1) FREE SAVE AREA STORAGE\n         AGO   .RENT\n.NOTRENT ANOP\n         AIF   (NOT &TIME).NOSAVE\n&TIME    SETB  0\n         L     13,SAVE&SAVNDX+4   RE-LOAD REGISTER 13\n.RENT    ANOP\n         AIF   ('&CODE' EQ '').COND1\n         AIF   ('&CODE' NE '(15)').CHKREG\n         LR    15,2               GET RETURN CODE BACK FROM R2\n         AGO   .ENDIT\n.CHKREG  AIF   ('&CODE'(1,1) NE '(').NOTREG\n&LEN     SETA  K'&CODE-2\n&REG     SETC  '&CODE'(2,&LEN)\n         LR    15,&REG            GET RETURN CODE\n         AGO   .ENDIT\n.NOTREG  ANOP\n         LA    15,&CODE           LOAD CODE TO REG 15\n         AGO   .ENDIT\n.INVRET  MNOTE 12,'***** RETURN CODE PASSED GREATER THAN 4095 *****'\n         MEXIT\n.NOSAVE  MNOTE 12,'***** SAVEALL NOT ISSUED PRIOR TO ENDALL *****'\n         MEXIT\n.INVREG  MNOTE 12,'***** INVALID REGISTER USED FOR RETURN CODE \"&CODE\"'\n         MEXIT\n.COND1   LA    15,0               LOAD ZERO (NO CODE) TO REG 15\n.ENDIT   ANOP\n         RETURN     (14,12),T,RC=(15)\n         MEND\n*          DATA SET TSO116SP3  AT LEVEL 070 AS OF 11/13/81\nTSODSN   TITLE 'LIST OWNERS OF DATASET'\n*\n*********************************************************************\n*                                                                   *\n* FUNCTION - DISPLAY 1) USERS                                       *\n*                    2) DISPOSITION                                 *\n*                    3) WAITING FOR DATASETS                        *\n*                    4) SYSTEM                                      *\n*                    5) MUST COMPLETE FLAG                          *\n*                    6) RESERVE FLAG                                *\n*                    7) GLOBAL FLAG                                 *\n*                    8) OWNERSHIP FLAG                              *\n*                    FOR THE SPECIFIED DATASET.                     *\n*                                                                   *\n* COMMAND SYNTAX - TSODSN DATASETNAME                               *\n*                                                                   *\n* 1) DO NOT USE QUOTES AROUND THE DATASET NAME                      *\n* 2) IT ONLY WORKS FOR A FULLY QULIFIED DATASET NAME                *\n*                                                                   *\n* NOTE - THIS CODE HAS NOT BEEN TESTED WITH A GRS RING.             *\n*        SCOPE=GLOBAL WILL HAVE TO BE SPECIFIED ON THE GQSCAN MACRO *\n*        AND THE GQSCAN HAS TO RUN AUTHORIZED KEY ZERO.             *\n*                                                                   *\n* NOTE - THE 'SYSNAME' IN IEASYS00 SHOULD SPECIFY YOUR SMFID TO     *\n*        GET THE CORRECT SYSTEM NAME IN THE 'SYSTEM' FIELD,         *\n*        OTHERWISE (NONA) NONAME WILL BE DISPLAYED.                 *\n*                                                                   *\n*********************************************************************\n*\nTSO116   SAVEALL REG=(2,12)            BASE REG\n         EJECT\n         LR    R3,R1                   LOAD REG.\n         USING SMCABASE,R4\n         L     R9,16\n         L     R4,196(R9)\n         LA    R8,TITLE\n         MVC   30(4,R8),SMCASID        MOVE IN SYSTEM ID\n         USING CPPL,R3\n         SPACE\n         L     R4,CPPLCBUF             GET COMMAND BUFFER\n         LH    R6,0(R4)                GET COMMAND BUFFER LENGTH\n         CH    R6,=H'10'               BUFLEN > 10 ?\n         BNH   INVPARM                    NO...ERROR\n         LH    R5,2(R4)                GET OPERAND OFFSET\n         SPACE\n         LA    R5,4(R5)\n         AR    R5,R4                   POINT TO OPERAND\n         AR    R4,R6                   POINT TO END OF BUFFER\n         SR    R4,R5                   OPERAND LENGTH\n         BCTR  R4,0                    MINUS ONE\n         EX    R4,MVPARM               MOVE IT\n         STC   R4,REQLEN               AND STORE THE LENGTH\n         LA    R4,1(R4)                PLUS ONE FOR ACTUAL LENGTH\n         OC    REQDSN,=44C' '          TRANSLATE TO CAPS\n         TIME  DEC                     R0: HHMMSSTH\nGETTIME  ST    R0,WORKB                TIME\n         UNPK  43(7,R8),WORKB(4)\n         MVC   49(2,R8),47(R8)         XXSS\n         MVC   47(1,R8),46(R8)         MXSS\n         MVC   46(1,R8),45(R8)         HHXM MXSS\n         MVI   45(R8),C'.'\n         MVI   48(R8),C'.'             HH.MM.SS\nGETDATE  ST    R1,WORKA                DATE\n         UNPK  35(7,R8),WORKA(4)\n         MVC   35(2,R8),37(R8)         YY\n         MVC   38(3,R8),39(R8)         DDD\n         MVI   37(R8),C'.'             YY.DDDX\n         MVI   41(R8),C' '             YY.DDD\n         TPUT  CLEAR,L'CLEAR,FULLSCR   CLEAR SCREEN\n         TPUT  TITLE,L'TITLE           ADDR PRINT TITLE AND TIME\n         TPUT  BLANK,L'BLANK           PRINT BLANK\n         MVC   DSN(44),REQDSN          MOVE IN DSN\n         TPUT  DSNLINE,L'DSNLINE\n         TPUT  BLANK,L'BLANK           PRINT BLANK\n         LR    R5,R13                  SAVE R13 FOR ENDALL\n         LA    R7,REQDSN               ADDR OF DSN MINOR NAME\n         LA    R8,SCANAREA             ADDR OF RETURNED DATA\n         LA    R9,SYSDSN               ADDR OF SYSDSN MAJOR NAME\n         LA    R13,SCANSAVE            ADDR GQSCAN SAVE AREA\n         EJECT\nSCAN     GQSCAN AREA=((R8),4096),      ADDR AND LENGTH OF INFO RETURNEDX\n               REQLIM=MAX,             MAX NUM OF OWNERS TO BE RETURNEDX\n               SCOPE=ALL,              ALL SYSTEMS IN GRS RING         X\n               RESNAME=((R9),(R7),(R4))  SCAN SYSDSN/DSN/LENGTH\n         EJECT\n         LR    R13,R5                  RELOAD REG 13 FOR ENDALL\n         LA    R7,BRTABLE              ADDRESS OF BRANCH TABLE\n         B     0(R15,R7)               BRANCH TO APPROPRIATE ROUTINE\nBRTABLE  B     CODE00                  ALLS OK\n         B     CODE04                  NO RESOURCES MATCHED REQUEST\n         B     CODE08                  GQSCAN AREA TOO SMALL\n         B     CODE0C                  ENCOUNTERED ERROR DATA AREA NG\n         B     CODE10                  INVALID SYSNAME\n         SPACE 2\nCODE04   TPUT  CODE04M,L'CODE04M       DSNAME NOT FOUND\n         B     RETURN\n         SPACE\nCODE08   TPUT  CODE08M,L'CODE08M       GQSCAN AREA TOO SMALL\n         B     RETURN\n         SPACE\nCODE0C   TPUT  CODE0CM,L'CODE0CM       ERROR IN GQSCAN\n         B     RETURN\n         SPACE\nCODE10   TPUT  CODE10M,L'CODE10M       INVALID SYSNAME\n         B     RETURN\n         SPACE\nINVPARM  TPUT  PMSG,72                 INVALID DSN SPECIFIED\n         B     RETURN\n         EJECT\nCODE00   ST    R0,RIBLNGTH             STORE RIB AND RIBE LENGTH\n         TPUT  FLAGHD,L'FLAGHD         PRINT FLAG HEADER\n         TPUT  ULINE,L'ULINE           UNDER LINE IT\n         TPUT  BLANK,L'BLANK           PRINT BLANK\n         LA    R10,SCANAREA            ADDRESS OF GQSCAN AREA\n         USING RIB,R10                 RESOURCE INFORMATION BLOCK\n         LR    R11,R10                 SAVE RIB POINTER\n         AH    R11,RIBLNGTH            POINT TO RIB VARIABLE SECTION\n         AH    R11,RIBVLEN             POINT TO FIRST RIBE\n         USING RIBE,R11                RESOURCE INFORMATION BLOCK EXT\n         L     R9,RIBNRIBE             LOAD THE # OF RIBE'S\n         EJECT\nSEARCH   MVC   JOBNAME(8),RIBEJBNM     JOBNAME OF REQUESTOR\n         MVC   SYSTEM(4),RIBESYSN      SYSTEM NAME OF REQUESTOR\n         SPACE\nTEST1    TM    RIBERFLG,RIBETYPE       IS THIS EXCL OR SHARED?\n         BO    SHARED\n         MVC   EXCLFLAG(4),EXCL\n         B     TEST2\nSHARED   MVC   EXCLFLAG(4),SHR\n         SPACE\nTEST2    TM    RIBERFLG,RIBEMC         IS MUST COMPLETE?\n         BO    MUSTC\n         MVI   MCFLAG,C'N'\n         B     TEST3\nMUSTC    MVI   MCFLAG,C'Y'\n         SPACE\nTEST3    TM    RIBERFLG,RIBERESV       IS THIS RESERVE REQUEST?\n         BO    RESERVE\n         MVI   RESVFLAG,C'N'\n         B     TEST4\nRESERVE  MVI   RESVFLAG,C'Y'\n         SPACE\nTEST4    TM    RIBERFLG,RIBERESC       IS THIS RESERVE REQUEST GLOBAL?\n         BO    GLOBAL\n         MVI   GLOBFLAG,C'N'\n         B     TEST5\nGLOBAL   MVI   GLOBFLAG,C'Y'\n         SPACE\nTEST5    TM    RIBESFLG,RIBESTAT       IS THIS GUY THE OWNER?\n         BO    OWNER\n         MVI   OWNFLAG,C'N'\n         MVC   WAITFLAG(9),WAITING\n         B     TPUTIT\nOWNER    MVI   OWNFLAG,C'Y'\n         SPACE\nTPUTIT   TPUT  JOBLINE,L'JOBLINE       PRINT IT\n         SPACE 2\nBUMP     AH    R11,RIBELENG            POINT TO NEXT RIBE\n         BCT   R9,SEARCH               AND DO IT FOR NEXT USER\n         EJECT\nRETURN   ENDALL\n         EJECT\nMVPARM   MVC   REQDSN(*-*),0(R5)\n         DS    0F\nRIBLNGTH DC    H'0'\nRIBELENG DC    H'0'\n         SPACE\n         DS    0F\nSCANAREA DS    4096X                   SCAN INFO AREA\n         DS    0F\nSCANSAVE DS    18F                     18 WORD SAVEAREA REQ FOR GQSCAN\nWORKA    DS    2F'0'\nWORKB    DS    2F'0'\nONE      DC    H'1'\nWAITING  DC    CL9'*WAITING*'\nEXCL     DC    CL4'EXCL'\nSHR      DC    CL4'SHR '\nSYSDSN   DC    CL8'SYSDSN  '\nREQDSN   DS    CL44' '\n         EJECT\nDSNLINE  DS   0CL72\n         DC    CL13'DATASET NAME='\nDSN      DS    CL44\nDSNNULL  DS    CL15\nDSNLINEL EQU   *-DSNLINE\n         SPACE\nULINE    DS   0CL72\n         DC    72C'-'\nULINEL   EQU   *-ULINE\n         SPACE\nJOBLINE  DS   0CL72\nJOBNAME  DS    CL8\n         DC    C' '\nWAITFLAG DS    CL9\n         DC    C' '\nEXCLFLAG DS    CL4\n         DC    CL4' '\nSYSTEM   DS    CL4\n         DC    CL4' '\n         DC    CL6' '\nMCFLAG   DS    CL1\n         DC    CL6' '\n         DC    CL2' '\n         DC    CL3' '\nRESVFLAG DS    CL1\n         DC    CL3' '\n         DC    CL2' '\n         DC    CL2' '\nGLOBFLAG DS    CL1\n         DC    CL3' '\n         DC    CL2' '\n         DC    CL2' '\nOWNFLAG  DS    CL1\n         DC    CL2' '\nJOBLINEL EQU   *-JOBLINE\n         SPACE\nFLAGHD   DS   0CL72\n         DC    CL14'JOBNAME/USERID'\n         DC    CL5' '\n         DC    CL4'DISP'\n         DC    CL2' '\n         DC    CL8' SYSTEM '\n         DC    CL2' '\n         DC    CL13'MUST COMPLETE'\n         DC    CL2' '\n         DC    CL7'RESERVE'\n         DC    CL2' '\n         DC    CL6'GLOBAL'\n         DC    CL2' '\n         DC    CL5'OWNER'\nFLAGHDL  EQU   *-FLAGHD\n         SPACE\nCODE04M  DS   0CL72\n         DC    CL72'NOT IN USE OR NOT A FULLY QUALIFIED DATA SET NAME'\nCODE04ML EQU   *-CODE04M\n         SPACE\nCODE08M  DS   0CL72\n         DC    CL72'GQSCAN AREA TOO SMALL - RETRY COMMAND'\nCODE08ML EQU   *-CODE08M\n         SPACE\nCODE0CM  DS   0CL72\n         DC    CL72'ERROR ENCOUNTERED - RETRY COMMAND'\nCODE0CML EQU   *-CODE0CM\n         SPACE\nCODE10M  DS   0CL72\n         DC    CL72'INVALID SYSNAME - RETRY COMMAND'\nCODE10ML EQU   *-CODE10M\n         SPACE\nCLEAR    DC    X'C1115D7E1140403C4040001DC813'  CLEAR SCREEN\nTITLE    DC    C'H N B - DATASET USAGE DISPLAY XSID YY.DDD  HH.MM.SS'\nPMSG     DC    CL72'INVALID PARAMETER SPECIFIED'\nERRORM   DC    CL72'ERROR  ***** MORE THAN ONE RIB RETURNED *****'\nBLANK    DC    CL72' '\nREQLEN   DC    XL1'00'\n         EJECT\n         IKJCPPL\n         EJECT\n         IEESMCA\n         EJECT\n         ISGRIB\n         END\n//L.SYSLMOD  DD DSN=ED115DM.PROD.LKED(TSODSN),DISP=SHR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSODSNG": {"ttr": 5124, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x95 \\x7f\\x00\\x980?\\t$\\x01\\xe9\\x01\\xac\\x00\\x00\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1995-07-26T00:00:00", "modifydate": "1998-10-30T09:24:00", "lines": 489, "newlines": 428, "modlines": 0, "user": "XSDMN"}, "text": "//C4ADMDMA JOB MSGCLASS=X,CLASS=A,REGION=4M,NOTIFY=XSDMN\n//*\n//ASMHCL  PROC\n//C      EXEC  PGM=IEV90,PARM=OBJECT,REGION=5M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  SYSOUT=B,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))\n//SYSPRINT DD SYSOUT=X,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//L    EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL',REGION=2M,COND=(8,LT,C)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD DD DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(2,1,2)),DSN=&GOSET(GO)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=X,DCB=(RECFM=FB,BLKSIZE=3509)\n//  PEND\n//*\n//*\n//    EXEC ASMHCL\n//C.SYSLIB DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n         MACRO\n&NAME    SAVEALL &RENT,&REG=3,&EQU=YES,&ID=NO\n         GBLB  &SAVRENT\n         GBLB  &REGSW\n         GBLB  &TIME\n         GBLC  &SAVNDX\n&SAVNDX  SETC  '&SYSNDX'\n&NAME    CSECT\n         AIF   ('&SAVRENT' EQ '1').NOTFREE\n         AIF   ('&REGSW' EQ '1').NOEQU\n         AIF   ('&EQU' NE 'YES').NOEQU\n&REGSW   SETB  1\n         SPACE\n***********************************************************************\n********           DEFINITION OF GENERAL REGISTERS             ********\n***********************************************************************\nR0       EQU   0    GENERAL REGISTER ZERO\nR1       EQU   1    GENERAL REGISTER ONE\nR2       EQU   2    GENERAL REGISTER TWO\nR3       EQU   3    GENERAL REGISTER THREE\nR4       EQU   4    GENERAL REGISTER FOUR\nR5       EQU   5    GENERAL REGISTER FIVE\nR6       EQU   6    GENERAL REGISTER SIX\nR7       EQU   7    GENERAL REGISTER SEVEN\nR8       EQU   8    GENERAL REGISTER EIGHT\nR9       EQU   9    GENERAL REGISTER NINE\nR10      EQU   10   GENERAL REGISTER TEN\nR11      EQU   11   GENERAL REGISTER ELEVEN\nR12      EQU   12   GENERAL REGISTER TWELVE\nR13      EQU   13   GENERAL REGISTER THIRTEEN\nR14      EQU   14   GENERAL REGISTER FOURTEEN\nR15      EQU   15   GENERAL REGISTER FIFTEEN\n         SPACE\nRA       EQU   10   GENERAL REGISTER TEN\nRB       EQU   11   GENERAL REGISTER ELEVEN\nRC       EQU   12   GENERAL REGISTER TWELVE\nRD       EQU   13   GENERAL REGISTER THIRTEEN\nRE       EQU   14   GENERAL REGISTER FOURTEEN\nRF       EQU   15   GENERAL REGISTER FIFTEEN\n***********************************************************************\n********             END OF REGISTER DEFINITIONS               ********\n***********************************************************************\n         SPACE\n.NOEQU   ANOP\n         SAVE  (14,12)\n         AIF   ('&REG' EQ '').MESS\n         BALR  &REG(1),0\n         AIF   (N'&REG EQ 1).A\n         AIF   (N'&REG EQ 2).B\n         AIF   (N'&REG EQ 3).C\n         AIF   (N'&REG EQ 4).D\n         AIF   (N'&REG EQ 5).E\n         MNOTE *****,'EXCESSIVE BASE REGISTERS -- 5 ASSUMED *****'\n         AGO   .E\n.MESS    MNOTE 12,'***** NO BASE REGISTER SPECIFIED *****'\n         MEXIT\n.NOTFREE MNOTE 12,'***** ENDALL NOT ISSUED PRIOR TO NEW SAVEALL *****'\n         MEXIT\n.E       USING *,&REG(1),&REG(2),&REG(3),&REG(4),&REG(5)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         L     &REG(4),=A(Q&SYSNDX+12288)\n         L     &REG(5),=A(Q&SYSNDX+16384)\n         AGO   .END\n.D       USING *,&REG(1),&REG(2),&REG(3),&REG(4)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         L     &REG(4),=A(Q&SYSNDX+12288)\n         AGO   .END\n.C       USING *,&REG(1),&REG(2),&REG(3)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         AGO   .END\n.B       USING *,&REG(1),&REG(2)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTER\n         AGO   .END\n.A       USING *,&REG(1)\n.END     ANOP\n         AIF   ('&RENT' NE 'RENT').NORENT\n&SAVRENT SETB  1\n         GETMAIN R,LV=4096         GET STORAGE FOR SAVE AREA\n         ST    13,4(1)             SET UP FORWARD CHAIN\n         ST    1,8(13)             SET UP BACKWARD CHAIN\n         L     0,20(0,13)          RESET REGISTER 0\n         L     1,24(0,13)          RESET REGISTER 1\n         L     13,8(0,13)          LOAD SAVE AREA ADDRESS\n         B     J&SYSNDX           BRANCH AROUND LTORG\n         AGO   .RENT\n.NORENT  ANOP\n&TIME    SETB  1\n         ST    13,SAVE&SYSNDX+4    SET UP FORWARD CHAIN\n         LA    1,SAVE&SYSNDX\n         ST    1,8(0,13)           SET UP BACKWARD CHAIN\n         L     1,24(0,13)          RESET REGISTER 1\n         LA    13,SAVE&SYSNDX\n         B     J&SYSNDX           BRANCH AROUND BASE REGISTER CONST\nSAVE&SYSNDX DC 18F'0'\n.RENT    ANOP\n         LTORG\n         AIF   ('&ID' NE 'YES').NOID\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n.NOID    ANOP\nJ&SYSNDX DS    0H\n         MEND\n         MACRO\n&NAME    ENDALL &CODE=\n         GBLB  &TIME\n         GBLB  &SAVRENT\n         GBLC  &SAVNDX\n         LCLA  &LEN\n         LCLC  &REG\n         AIF   ('&CODE' GT '4095').INVRET\n&NAME    DS    0H\n         AIF   (K'&CODE LE 0).CHKRENT\n         AIF   ('&CODE'(1,1) NE '(').CHKRENT\n         AIF   ('&CODE' EQ '(13)' OR '&CODE' EQ '(14)').INVREG\n         AIF   ('&CODE' EQ '(0)' OR '&CODE' EQ '(1)').INVREG\n         AIF   ('&CODE' NE '(15)').CHKRENT\n         LR    2,15               SAVE REG 15 RETURN CODE\n.CHKRENT AIF   (NOT &SAVRENT).NOTRENT\n&SAVRENT SETB  0\n         LR    1,13               LOAD SAVE AREA ADDRESS\n         L     13,4(0,13)         RE-LOAD REGISTER 13\n         FREEMAIN R,LV=4096,A=(1) FREE SAVE AREA STORAGE\n         AGO   .RENT\n.NOTRENT ANOP\n         AIF   (NOT &TIME).NOSAVE\n&TIME    SETB  0\n         L     13,SAVE&SAVNDX+4   RE-LOAD REGISTER 13\n.RENT    ANOP\n         AIF   ('&CODE' EQ '').COND1\n         AIF   ('&CODE' NE '(15)').CHKREG\n         LR    15,2               GET RETURN CODE BACK FROM R2\n         AGO   .ENDIT\n.CHKREG  AIF   ('&CODE'(1,1) NE '(').NOTREG\n&LEN     SETA  K'&CODE-2\n&REG     SETC  '&CODE'(2,&LEN)\n         LR    15,&REG            GET RETURN CODE\n         AGO   .ENDIT\n.NOTREG  ANOP\n         LA    15,&CODE           LOAD CODE TO REG 15\n         AGO   .ENDIT\n.INVRET  MNOTE 12,'***** RETURN CODE PASSED GREATER THAN 4095 *****'\n         MEXIT\n.NOSAVE  MNOTE 12,'***** SAVEALL NOT ISSUED PRIOR TO ENDALL *****'\n         MEXIT\n.INVREG  MNOTE 12,'***** INVALID REGISTER USED FOR RETURN CODE \"&CODE\"'\n         MEXIT\n.COND1   LA    15,0               LOAD ZERO (NO CODE) TO REG 15\n.ENDIT   ANOP\n         RETURN     (14,12),T,RC=(15)\n         MEND\n*          DATA SET TSO116SP3  AT LEVEL 070 AS OF 11/13/81\nTSODSN   TITLE 'LIST OWNERS OF DATASET'\n*\n*********************************************************************\n*                                                                   *\n* FUNCTION - DISPLAY 1) USERS                                       *\n*                    2) DISPOSITION                                 *\n*                    3) WAITING FOR DATASETS                        *\n*                    4) SYSTEM                                      *\n*                    5) MUST COMPLETE FLAG                          *\n*                    6) RESERVE FLAG                                *\n*                    7) GLOBAL FLAG                                 *\n*                    8) OWNERSHIP FLAG                              *\n*                    FOR THE SPECIFIED DATASET.                     *\n*                                                                   *\n* COMMAND SYNTAX - TSODSN DATASETNAME                               *\n*                                                                   *\n* 1) DO NOT USE QUOTES AROUND THE DATASET NAME                      *\n* 2) IT ONLY WORKS FOR A FULLY QULIFIED DATASET NAME                *\n*                                                                   *\n* NOTE - THIS CODE HAS NOT BEEN TESTED WITH A GRS RING.             *\n*        SCOPE=GLOBAL WILL HAVE TO BE SPECIFIED ON THE GQSCAN MACRO *\n*        AND THE GQSCAN HAS TO RUN AUTHORIZED KEY ZERO.             *\n*                                                                   *\n* NOTE - THE 'SYSNAME' IN IEASYS00 SHOULD SPECIFY YOUR SMFID TO     *\n*        GET THE CORRECT SYSTEM NAME IN THE 'SYSTEM' FIELD,         *\n*        OTHERWISE (NONA) NONAME WILL BE DISPLAYED.                 *\n*                                                                   *\n*********************************************************************\n*\nTSO116   SAVEALL REG=(2,12)            BASE REG\n         EJECT\n         LR    R3,R1                   LOAD REG.\n         USING SMCABASE,R4\n         L     R9,16\n         L     R4,196(R9)\n         LA    R8,TITLE\n         MVC   30(4,R8),SMCASID        MOVE IN SYSTEM ID\n         USING CPPL,R3\n         SPACE\n         L     R4,CPPLCBUF             GET COMMAND BUFFER\n         LH    R6,0(R4)                GET COMMAND BUFFER LENGTH\n         CH    R6,=H'10'               BUFLEN > 10 ?\n         BNH   INVPARM                    NO...ERROR\n         LH    R5,2(R4)                GET OPERAND OFFSET\n         SPACE\n         LA    R5,4(R5)\n         AR    R5,R4                   POINT TO OPERAND\n         AR    R4,R6                   POINT TO END OF BUFFER\n         SR    R4,R5                   OPERAND LENGTH\n         BCTR  R4,0                    MINUS ONE\n         EX    R4,MVPARM               MOVE IT\n         STC   R4,REQLEN               AND STORE THE LENGTH\n         LA    R4,1(R4)                PLUS ONE FOR ACTUAL LENGTH\n         OC    REQDSN,=44C' '          TRANSLATE TO CAPS\n         L     R0,=F'16384'\n         GETMAIN R,LV=(0)\n         LR    R3,R1\n         ST    R3,R3SAVE\n         USING SCANAREA,R3\n         TIME  DEC                     R0: HHMMSSTH\nGETTIME  ST    R0,WORKB                TIME\n         UNPK  43(7,R8),WORKB(4)\n         MVC   49(2,R8),47(R8)         XXSS\n         MVC   47(1,R8),46(R8)         MXSS\n         MVC   46(1,R8),45(R8)         HHXM MXSS\n         MVI   45(R8),C'.'\n         MVI   48(R8),C'.'             HH.MM.SS\nGETDATE  ST    R1,WORKA                DATE\n         UNPK  35(7,R8),WORKA(4)\n         MVC   35(2,R8),37(R8)         YY\n         MVC   38(3,R8),39(R8)         DDD\n         MVI   37(R8),C'.'             YY.DDDX\n         MVI   41(R8),C' '             YY.DDD\n         TPUT  CLEAR,L'CLEAR,FULLSCR   CLEAR SCREEN\n         TPUT  TITLE,L'TITLE           ADDR PRINT TITLE AND TIME\n         TPUT  BLANK,L'BLANK           PRINT BLANK\n         MVC   DSN(44),REQDSN          MOVE IN DSN\n         TPUT  DSNLINE,L'DSNLINE\n         TPUT  ULINE,L'ULINE\n         TPUT  ULINE,L'ULINE\n         TPUT  BLANK,L'BLANK           PRINT BLANK\n         LR    R5,R13                  SAVE R13 FOR ENDALL\n         LA    R7,REQDSN               ADDR OF DSN MINOR NAME\n         LA    R8,SCANAREA             ADDR OF RETURNED DATA\n         LA    R9,SYSDSN               ADDR OF SYSDSN MAJOR NAME\n         LA    R13,SCANSAVE            ADDR GQSCAN SAVE AREA\n         EJECT\nSCAN     GQSCAN AREA=((R8),16384),     ADDR AND LENGTH OF INFO RETURNEDX\n               REQLIM=MAX,             MAX NUM OF OWNERS TO BE RETURNEDX\n               SCOPE=ALL,              ALL SYSTEMS IN GRS RING         X\n               RESNAME=((R9),(R7),(R4),GENERIC)\n         LR    R13,R5                  RELOAD REG 13 FOR ENDALL\n         LA    R7,BRTABLE              ADDRESS OF BRANCH TABLE\n         B     0(R15,R7)               BRANCH TO APPROPRIATE ROUTINE\nBRTABLE  B     CODE00                  ALLS OK\n         B     CODE04                  NO RESOURCES MATCHED REQUEST\n         B     CODE08                  GQSCAN AREA TOO SMALL\n         B     CODE0C                  ENCOUNTERED ERROR DATA AREA NG\n         B     CODE10                  INVALID SYSNAME\n         SPACE 2\nCODE04   TPUT  CODE04M,L'CODE04M       DSNAME NOT FOUND\n         B     RETURN\n         SPACE\nCODE08   TPUT  CODE08M,L'CODE08M       GQSCAN AREA TOO SMALL\n         B     RETURN\n         SPACE\nCODE0C   TPUT  CODE0CM,L'CODE0CM       ERROR IN GQSCAN\n         B     RETURN\n         SPACE\nCODE10   TPUT  CODE10M,L'CODE10M       INVALID SYSNAME\n         B     RETURN\n         SPACE\nINVPARM  TPUT  PMSG,72                 INVALID DSN SPECIFIED\n         B     RETURN\n         EJECT\nCODE00   ST    R0,RIBLNGTH             STORE RIB AND RIBE LENGTH\n         LR    R7,R1\n         LA    R10,SCANAREA            ADDRESS OF GQSCAN AREA\n         DROP  R3\n         USING RIB,R10                 RESOURCE INFORMATION BLOCK\nRIBLOOP  LR    R11,R10\n         AH    R11,RIBLNGTH            POINT TO RIB VARIABLE SECTION\n         USING RIBVAR,R11\n         LA    R8,0\n         MVC   DSN(44),=CL44' '\n*        TPUT  FLAGHD,L'FLAGHD         PRINT FLAG HEADER\n*        TPUT  ULINE,L'ULINE           UNDER LINE IT\n*        TPUT  BLANK,L'BLANK           PRINT BLANK\n         LH    R8,RIBVLEN             POINT TO FIRST RIBE\n         BCTR  R8,0\n         EX    R8,MVCDSN\n         B     SKIP\nMVCDSN   MVC   DSN(1),RIBRNAME\n         DROP  R11\nSKIP     LR    R11,R10\n         AH    R11,RIBLNGTH            POINT TO RIB VARIABLE SECTION\n         AH    R11,RIBVLEN             POINT TO FIRST RIBE\n         USING RIBE,R11                RESOURCE INFORMATION BLOCK EXT\n         L     R9,RIBNRIBE             LOAD THE # OF RIBE'S\n*        CLC   RIBNTWE,ANYENQ\n*        BNE   TPUTHDRS\n*        CLC   RIBNTWS,ANYENQ\n*        BE    BUMPRIB\nTPUTHDRS TPUT  BLANK,L'BLANK\n         TPUT  DSNLINE,L'DSNLINE\n         TPUT  BLANK,L'BLANK\n         TPUT  FLAGHD,L'FLAGHD\n         TPUT  ULINE,L'ULINE\n         TPUT  BLANK,L'BLANK\nSEARCH   MVI   SWITCH,C'1'\n         MVC   JOBNAME(8),RIBEJBNM     JOBNAME OF REQUESTOR\n         MVC   SYSTEM(4),RIBESYSN      SYSTEM NAME OF REQUESTOR\n         SPACE\nTEST1    TM    RIBERFLG,RIBETYPE       IS THIS EXCL OR SHARED?\n         BO    SHARED\n         MVC   EXCLFLAG(4),EXCL\n         B     TEST2\nSHARED   MVC   EXCLFLAG(4),SHR\n         SPACE\nTEST2    TM    RIBERFLG,RIBEMC         IS MUST COMPLETE?\n         BO    MUSTC\n         MVI   MCFLAG,C'N'\n         B     TEST3\nMUSTC    MVI   MCFLAG,C'Y'\n         SPACE\nTEST3    TM    RIBERFLG,RIBERESV       IS THIS RESERVE REQUEST?\n         BO    RESERVE\n         MVI   RESVFLAG,C'N'\n         B     TEST4\nRESERVE  MVI   RESVFLAG,C'Y'\n         SPACE\nTEST4    TM    RIBERFLG,RIBERESC       IS THIS RESERVE REQUEST GLOBAL?\n         BO    GLOBAL\n         MVI   GLOBFLAG,C'N'\n         B     TEST5\nGLOBAL   MVI   GLOBFLAG,C'Y'\n         SPACE\nTEST5    TM    RIBESFLG,RIBESTAT       IS THIS GUY THE OWNER?\n         BO    OWNER\n         MVI   OWNFLAG,C'N'\n         MVC   WAITFLAG(9),WAITING\n         B     TPUTIT\nOWNER    MVI   OWNFLAG,C'Y'\n         SPACE\nTPUTIT   TPUT  JOBLINE,L'JOBLINE       PRINT IT\n         SPACE 2\nBUMPRIBE AH    R11,RIBELENG            POINT TO NEXT RIBE\n         BCT   R9,SEARCH               AND DO IT FOR NEXT USER\nBUMPRIB  SR    R3,R3\n         L     R4,RIBNRIBE\nBUMPLOOP AH    R3,RIBELENG\n         BCT   R4,BUMPLOOP\n         AH    R3,RIBLNGTH\n         AH    R3,RIBVLEN\n         AR    R10,R3\n         BCT   R7,RIBLOOP\n         CLI   SWITCH,C'1'\n         BE    RETURN\n         TPUT  BLANK,L'BLANK\n         TPUT  NOENQ,L'NOENQ\n         EJECT\nRETURN   L     R0,=F'16384'\n         L     R1,R3SAVE\n         FREEMAIN R,LV=(0),A=(1)\n         ENDALL\n         EJECT\nMVPARM   MVC   REQDSN(*-*),0(R5)\n         DS    0F\nRIBLNGTH DC    H'0'\nRIBELENG DC    H'0'\n         SPACE\n         DS    0F\n         DS    0F\nSCANSAVE DS    18F                     18 WORD SAVEAREA REQ FOR GQSCAN\nANYENQ   DC    F'0'\nSWITCH   DC    C'0'\nR3SAVE   DS    F\nWORKA    DS    2F'0'\nWORKB    DS    2F'0'\nONE      DC    H'1'\nWAITING  DC    CL9'*WAITING*'\nEXCL     DC    CL4'EXCL'\nSHR      DC    CL4'SHR '\nSYSDSN   DC    CL8'SYSDSN  '\nREQDSN   DS    CL44' '\n         EJECT\nDSNLINE  DS   0CL72\n         DC    CL13'DATASET NAME='\nDSN      DS    CL44\nDSNNULL  DS    CL15\nDSNLINEL EQU   *-DSNLINE\n         SPACE\nULINE    DS   0CL72\n         DC    72C'-'\nULINEL   EQU   *-ULINE\n         SPACE\nJOBLINE  DS   0CL72\nJOBNAME  DS    CL8\n         DC    C' '\nWAITFLAG DS    CL9\n         DC    C' '\nEXCLFLAG DS    CL4\n         DC    CL4' '\nSYSTEM   DS    CL4\n         DC    CL4' '\n         DC    CL6' '\nMCFLAG   DS    CL1\n         DC    CL6' '\n         DC    CL2' '\n         DC    CL3' '\nRESVFLAG DS    CL1\n         DC    CL3' '\n         DC    CL2' '\n         DC    CL2' '\nGLOBFLAG DS    CL1\n         DC    CL3' '\n         DC    CL2' '\n         DC    CL2' '\nOWNFLAG  DS    CL1\n         DC    CL2' '\nJOBLINEL EQU   *-JOBLINE\n         SPACE\nFLAGHD   DS   0CL72\n         DC    CL14'JOBNAME/USERID'\n         DC    CL5' '\n         DC    CL4'DISP'\n         DC    CL2' '\n         DC    CL8' SYSTEM '\n         DC    CL2' '\n         DC    CL13'MUST COMPLETE'\n         DC    CL2' '\n         DC    CL7'RESERVE'\n         DC    CL2' '\n         DC    CL6'GLOBAL'\n         DC    CL2' '\n         DC    CL5'OWNER'\nFLAGHDL  EQU   *-FLAGHD\n         SPACE\nCODE04M  DS   0CL72\n         DC    CL72'NOT IN USE OR NOT A FULLY QUALIFIED DATA SET NAME'\nCODE04ML EQU   *-CODE04M\n         SPACE\nCODE08M  DS   0CL72\n         DC    CL72'GQSCAN AREA TOO SMALL - RETRY COMMAND'\nCODE08ML EQU   *-CODE08M\n         SPACE\nCODE0CM  DS   0CL72\n         DC    CL72'ERROR ENCOUNTERED - RETRY COMMAND'\nCODE0CML EQU   *-CODE0CM\n         SPACE\nCODE10M  DS   0CL72\n         DC    CL72'INVALID SYSNAME - RETRY COMMAND'\nCODE10ML EQU   *-CODE10M\n         SPACE\nCLEAR    DC    X'C1115D7E1140403C4040001DC813'  CLEAR SCREEN\nTITLE    DC    C'H N B - DATASET USAGE DISPLAY XSID YY.DDD  HH.MM.SS'\nPMSG     DC    CL72'INVALID PARAMETER SPECIFIED'\nNOENQ    DS    0CL72\n         DC    CL72'NO ENQUEUES EXIST        '\nNOENQL   EQU   *-NOENQ\nERRORM   DC    CL72'ERROR  ***** MORE THAN ONE RIB RETURNED *****'\nBLANK    DC    CL72' '\nREQLEN   DC    XL1'00'\nSCANAREA DSECT\n         DS    8192X                   SCAN INFO AREA\n         EJECT\n         IKJCPPL\n         EJECT\n         IEESMCA\n         EJECT\n         ISGRIB\n         END\n//L.SYSLMOD  DD   DSN=TEST.PGM.LOAD(TSODSNG),DISP=SHR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOENQ": {"ttr": 5377, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x12?\\x00\\x99\\x12?\\x14H\\x01\\xbb\\x01\\xbb\\x00\\x00\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-05-03T00:00:00", "modifydate": "1999-05-03T14:48:00", "lines": 443, "newlines": 443, "modlines": 0, "user": "XSDMN"}, "text": "//C4ADMDMA JOB C4ADM000,MSGCLASS=X,CLASS=A,REGION=4M,NOTIFY=C4ADMDM\n//*\n//*\n//ASMHCL  PROC\n//C      EXEC  PGM=IEV90,PARM=OBJECT,REGION=5M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  SYSOUT=B,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))\n//SYSPRINT DD SYSOUT=X,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//L    EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL',REGION=2M,COND=(8,LT,C)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD DD DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(2,1,2)),DSN=&GOSET(GO)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=X,DCB=(RECFM=FB,BLKSIZE=3509)\n//  PEND\n//*\n//  EXEC ASMHCL,\n//    PARM.L='XREF,LET,LIST,AMODE=24,RMODE=24'\n//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.MODGEN,DISP=SHR\n         MACRO\n&NAME    SAVEALL &RENT,&REG=3,&EQU=YES,&ID=NO\n         GBLB  &SAVRENT\n         GBLB  &REGSW\n         GBLB  &TIME\n         GBLC  &SAVNDX\n&SAVNDX  SETC  '&SYSNDX'\n&NAME    CSECT\n         AIF   ('&SAVRENT' EQ '1').NOTFREE\n         AIF   ('&REGSW' EQ '1').NOEQU\n         AIF   ('&EQU' NE 'YES').NOEQU\n&REGSW   SETB  1\n         SPACE\n***********************************************************************\n********           DEFINITION OF GENERAL REGISTERS             ********\n***********************************************************************\nR0       EQU   0    GENERAL REGISTER ZERO\nR1       EQU   1    GENERAL REGISTER ONE\nR2       EQU   2    GENERAL REGISTER TWO\nR3       EQU   3    GENERAL REGISTER THREE\nR4       EQU   4    GENERAL REGISTER FOUR\nR5       EQU   5    GENERAL REGISTER FIVE\nR6       EQU   6    GENERAL REGISTER SIX\nR7       EQU   7    GENERAL REGISTER SEVEN\nR8       EQU   8    GENERAL REGISTER EIGHT\nR9       EQU   9    GENERAL REGISTER NINE\nR10      EQU   10   GENERAL REGISTER TEN\nR11      EQU   11   GENERAL REGISTER ELEVEN\nR12      EQU   12   GENERAL REGISTER TWELVE\nR13      EQU   13   GENERAL REGISTER THIRTEEN\nR14      EQU   14   GENERAL REGISTER FOURTEEN\nR15      EQU   15   GENERAL REGISTER FIFTEEN\n         SPACE\nRA       EQU   10   GENERAL REGISTER TEN\nRB       EQU   11   GENERAL REGISTER ELEVEN\nRC       EQU   12   GENERAL REGISTER TWELVE\nRD       EQU   13   GENERAL REGISTER THIRTEEN\nRE       EQU   14   GENERAL REGISTER FOURTEEN\nRF       EQU   15   GENERAL REGISTER FIFTEEN\n***********************************************************************\n********             END OF REGISTER DEFINITIONS               ********\n***********************************************************************\n         SPACE\n.NOEQU   ANOP\n         SAVE  (14,12)\n         AIF   ('&REG' EQ '').MESS\n         BALR  &REG(1),0\n         AIF   (N'&REG EQ 1).A\n         AIF   (N'&REG EQ 2).B\n         AIF   (N'&REG EQ 3).C\n         AIF   (N'&REG EQ 4).D\n         AIF   (N'&REG EQ 5).E\n         MNOTE *****,'EXCESSIVE BASE REGISTERS -- 5 ASSUMED *****'\n         AGO   .E\n.MESS    MNOTE 12,'***** NO BASE REGISTER SPECIFIED *****'\n         MEXIT\n.NOTFREE MNOTE 12,'***** ENDALL NOT ISSUED PRIOR TO NEW SAVEALL *****'\n         MEXIT\n.E       USING *,&REG(1),&REG(2),&REG(3),&REG(4),&REG(5)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         L     &REG(4),=A(Q&SYSNDX+12288)\n         L     &REG(5),=A(Q&SYSNDX+16384)\n         AGO   .END\n.D       USING *,&REG(1),&REG(2),&REG(3),&REG(4)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         L     &REG(4),=A(Q&SYSNDX+12288)\n         AGO   .END\n.C       USING *,&REG(1),&REG(2),&REG(3)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         AGO   .END\n.B       USING *,&REG(1),&REG(2)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTER\n         AGO   .END\n.A       USING *,&REG(1)\n.END     ANOP\n         AIF   ('&RENT' NE 'RENT').NORENT\n&SAVRENT SETB  1\n         GETMAIN R,LV=4096         GET STORAGE FOR SAVE AREA\n         ST    13,4(1)             SET UP FORWARD CHAIN\n         ST    1,8(13)             SET UP BACKWARD CHAIN\n         L     0,20(0,13)          RESET REGISTER 0\n         L     1,24(0,13)          RESET REGISTER 1\n         L     13,8(0,13)          LOAD SAVE AREA ADDRESS\n         B     J&SYSNDX           BRANCH AROUND LTORG\n         AGO   .RENT\n.NORENT  ANOP\n&TIME    SETB  1\n         ST    13,SAVE&SYSNDX+4    SET UP FORWARD CHAIN\n         LA    1,SAVE&SYSNDX\n         ST    1,8(0,13)           SET UP BACKWARD CHAIN\n         L     1,24(0,13)          RESET REGISTER 1\n         LA    13,SAVE&SYSNDX\n         B     J&SYSNDX           BRANCH AROUND BASE REGISTER CONST\nSAVE&SYSNDX DC 18F'0'\n.RENT    ANOP\n         LTORG\n         AIF   ('&ID' NE 'YES').NOID\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n.NOID    ANOP\nJ&SYSNDX DS    0H\n         MEND\n         MACRO\n&NAME    ENDALL &CODE=\n         GBLB  &TIME\n         GBLB  &SAVRENT\n         GBLC  &SAVNDX\n         LCLA  &LEN\n         LCLC  &REG\n         AIF   ('&CODE' GT '4095').INVRET\n&NAME    DS    0H\n         AIF   (K'&CODE LE 0).CHKRENT\n         AIF   ('&CODE'(1,1) NE '(').CHKRENT\n         AIF   ('&CODE' EQ '(13)' OR '&CODE' EQ '(14)').INVREG\n         AIF   ('&CODE' EQ '(0)' OR '&CODE' EQ '(1)').INVREG\n         AIF   ('&CODE' NE '(15)').CHKRENT\n         LR    2,15               SAVE REG 15 RETURN CODE\n.CHKRENT AIF   (NOT &SAVRENT).NOTRENT\n&SAVRENT SETB  0\n         LR    1,13               LOAD SAVE AREA ADDRESS\n         L     13,4(0,13)         RE-LOAD REGISTER 13\n         FREEMAIN R,LV=4096,A=(1) FREE SAVE AREA STORAGE\n         AGO   .RENT\n.NOTRENT ANOP\n         AIF   (NOT &TIME).NOSAVE\n&TIME    SETB  0\n         L     13,SAVE&SAVNDX+4   RE-LOAD REGISTER 13\n.RENT    ANOP\n         AIF   ('&CODE' EQ '').COND1\n         AIF   ('&CODE' NE '(15)').CHKREG\n         LR    15,2               GET RETURN CODE BACK FROM R2\n         AGO   .ENDIT\n.CHKREG  AIF   ('&CODE'(1,1) NE '(').NOTREG\n&LEN     SETA  K'&CODE-2\n&REG     SETC  '&CODE'(2,&LEN)\n         LR    15,&REG            GET RETURN CODE\n         AGO   .ENDIT\n.NOTREG  ANOP\n         LA    15,&CODE           LOAD CODE TO REG 15\n         AGO   .ENDIT\n.INVRET  MNOTE 12,'***** RETURN CODE PASSED GREATER THAN 4095 *****'\n         MEXIT\n.NOSAVE  MNOTE 12,'***** SAVEALL NOT ISSUED PRIOR TO ENDALL *****'\n         MEXIT\n.INVREG  MNOTE 12,'***** INVALID REGISTER USED FOR RETURN CODE \"&CODE\"'\n         MEXIT\n.COND1   LA    15,0               LOAD ZERO (NO CODE) TO REG 15\n.ENDIT   ANOP\n         RETURN     (14,12),T,RC=(15)\n         MEND\n*          DATA SET TSO115SP3  AT LEVEL 053 AS OF 11/18/81\n*********************************************************************\n*                                                                   *\n* FUNCTION - DISPLAY DATASET ENQUE CONFLICTS (TSO CP) ON SP1.3      *\n*            SYSTEM.                                                *\n*                                                                   *\n* COMMAND SYNTAX - TSOENQ                                           *\n*                                                                   *\n* NOTE - THIS CODE HAS NOT BEEN TESTED WITH A GRS RING.             *\n*        SCOPE=GLOBAL WILL HAVE TO BE SPECIFIED ON THE GQSCAN MACRO *\n*        AND THE GQSCAN HAS TO RUN AUTHORIZED KEY ZERO.             *\n*                                                                   *\n* NOTE - THE 'SYSNAME' IN IEASYS00 SHOULD SPECIFY YOUR SMFID TO     *\n*        GET THE CORRECT SYSTEM NAME IN THE 'SYSTEM' FIELD,         *\n*        OTHERWISE (NONA) NONAME WILL BE DISPLAYED.                 *\n*                                                                   *\n* NOTE - FOR A SYSTEM WITH MANY DATASETS IN USE, THE \"SCANAREA\"     *\n*        MIGHT HAVE TO BE MADE LARGER.  IF IT IS THE CORRESPONING   *\n*        FIELD ON THE \"AREA\" PARAMETER OF THE \"GQSCAN\" MACRO MUST   *\n*        BE CHANGED.                                                *\n*                                                                   *\n*********************************************************************\n*\nTSO115   SAVEALL REG=(2,12)            BASE REGS\n         EJECT\n         LR    R3,R1                   LOAD REG.\n         USING SMCABASE,R4             SET ADDRESSABILITY\n         L     R9,16                   GET ADDRESS OF CVT\n         L     R4,196(R9)\n         LA    R8,TITLE                SET ADDRESS OF TITLE LINE\n         MVC   37(4,R8),SMCASID        MOVE IN SYSTEM ID\n         SPACE\n         TIME  DEC                     R0: HHMMSSTH\nGETTIME  ST    R0,WORKB                TIME\n         UNPK  55(7,R8),WORKB(4)\n         MVC   61(2,R8),59(R8)         XXSS\n         MVC   59(1,R8),58(R8)         MXSS\n         MVC   58(1,R8),57(R8)         HHXM MXSS\n         MVI   57(R8),C'.'\n         MVI   60(R8),C'.'             HH.MM.SS\nGETDATE  ST    R1,WORKA                DATE\n         UNPK  46(7,R8),WORKA(4)\n         MVC   46(2,R8),48(R8)         YY\n         MVC   49(3,R8),50(R8)         DDD\n         MVI   48(R8),C'.'             YY.DDDX\n         MVI   52(R8),C' '             YY.DDD\n         TPUT  CLEAR,L'CLEAR,FULLSCR   CLEAR SCREEN\n         TPUT  TITLE,L'TITLE           ADDR PRINT TITLE AND TIME\n         LR    R5,R13                  SAVE R13 FOR ENDALL\n         LA    R8,SCANAREA             ADDR OF RETURNED DATA\n         LA    R9,SYSDSN               ADDR OF SYSDSN MAJOR NAME\n         LA    R13,SCANSAVE            ADDR GQSCAN SAVE AREA\n         EJECT\nSCAN     GQSCAN AREA=((R8),8192),      ADDR AND LENGTH OF INFO RETURNEDX\n               REQLIM=MAX,             MAX NUM OF OWNERS TO BE RETURNEDX\n               SCOPE=ALL,                                              X\n               SYSNAME=0,WAITCNT=1\n         LR    R13,R5                  RELOAD REG 13 FOR ENDALL\n         LA    R7,BRTABLE              ADDRESS OF BRANCH TABLE\n         B     0(R15,R7)               BRANCH TO APPROPRIATE ROUTINE\nBRTABLE  B     CODE00                  ALLS OK\n         B     CODE04                  NO RESOURCES MATCHED REQUEST\n         B     CODE08                  GQSCAN AREA TOO SMALL\n         B     CODE0C                  ENCOUNTERED ERROR DATA AREA NG\n         B     CODE10                  INVALID SYSNAME\n         SPACE 2\nCODE04   TPUT  CODE04M,L'CODE04M       DSNAME NOT FOUND\n         B     RETURN                  EXIT\n         SPACE\nCODE08   TPUT  CODE08M,L'CODE08M       GQSCAN AREA TOO SMALL\n         B     RETURN                  EXIT\n         SPACE\nCODE0C   TPUT  CODE0CM,L'CODE0CM       ERROR IN GQSCAN\n         B     RETURN                  EXIT\n         SPACE\nCODE10   TPUT  CODE10M,L'CODE10M       INVALID SYSNAME\n         B     RETURN                  EXIT\n         EJECT\nCODE00   ST    R0,RIBLNGTH             STORE RIB AND RIBE LENGTH\n         LR    R7,R1                   SAVE NUMBER OF RIBS\n         LA    R10,SCANAREA            ADDRESS OF GQSCAN AREA (1ST RIB)\n         USING RIB,R10                 RESOURCE INFORMATION BLOCK\nRIBLOOP  LR    R11,R10                 SAVE RIB POINTER\n         AH    R11,RIBLNGTH            POINT TO RIB VARIABLE SECTION\n         USING RIBVAR,R11              RESOURCE INFORMATION BLOCK\n         SR    R8,R8                   CLEAR REG\n         MVC   DSN(44),=44C' '         CLEAR BEFORE USING\n         LH    R8,RIBVLEN              LENGTH OF VARIABLE SECTION\n         BCTR  R8,0                    MINUS ONE FOR EX INSTRUCTION\n         EX    R8,MVCDSN               MOVE DSN TO PRINT LINE\n         B     SKIP                    BYPASS NEXT INSTRUCTION\nMVCDSN   MVC   DSN(1),RIBRNAME         MOVE DSN TO PRINT LINE\n         DROP  R11\nSKIP     LR    R11,R10                 SAVE RIB POINTER\n         AH    R11,RIBLNGTH            POINT TO RIB VARIABLE SECTION\n         AH    R11,RIBVLEN             POINT TO FIRST RIBE\n         USING RIBE,R11                RESOURCE INFORMATION BLOCK EXT\n         L     R9,RIBNRIBE             LOAD THE # OF RIBE'S\n         CLC   RIBNTWE,ANYENQ          ANY WAITING FOR EXCLUSIVE ?\n         BNE   TPUTHDRS                  YES...PROCESS\n         CLC   RIBNTWS,ANYENQ          ANY WAITING FOR SHARE ?\n         BE    BUMPRIB                   NO....BUMP TO NEXT RIB\n         EJECT\nTPUTHDRS TPUT  BLANK,L'BLANK           PRINT BLANK\n         TPUT  DSNLINE,L'DSNLINE       PRINT DATASET NAME\n         TPUT  BLANK,L'BLANK           PRINT BLANK\n         TPUT  FLAGHD,L'FLAGHD         PRINT FLAG HEADER\n         TPUT  ULINE,L'ULINE           UNDER LINE IT\n         TPUT  BLANK,L'BLANK           PRINT BLANK\n         EJECT\nSEARCH   MVI   SWITCH,C'1'             SET SWITCH THAT THERE WAS ENQ\n         MVC   JOBNAME(8),RIBEJBNM     JOBNAME OF REQUESTOR\n         MVC   SYSTEM(4),RIBESYSN      SYSTEM NAME OF REQUESTOR\n         SPACE\nTEST1    TM    RIBERFLG,RIBETYPE       IS THIS EXCL OR SHARED?\n         BO    SHARED                     YES..\n         MVC   EXCLFLAG(4),EXCL           NO...TELL USER\n         B     TEST2                      NEXT TEST\nSHARED   MVC   EXCLFLAG(4),SHR            TELL USER\n         SPACE\nTEST2    TM    RIBERFLG,RIBEMC         IS MUST COMPLETE?\n         BO    MUSTC                      YES..\n         MVI   MCFLAG,C'N'                NO...TELL USER\n         B     TEST3                      NEXT TEST\nMUSTC    MVI   MCFLAG,C'Y'                TELL USER\n         SPACE\nTEST3    TM    RIBERFLG,RIBERESV       IS THIS RESERVE REQUEST?\n         BO    RESERVE                    YES..\n         MVI   RESVFLAG,C'N'              NO...TELL USER\n         B     TEST4                      NEXT TEST\nRESERVE  MVI   RESVFLAG,C'Y'              TELL USER\n         SPACE\nTEST4    TM    RIBERFLG,RIBERESC       IS THIS RESERVE REQUEST GLOBAL?\n         BO    GLOBAL                     YES..\n         MVI   GLOBFLAG,C'N'              NO...TELL USER\n         B     TEST5                      NEXT TEST\nGLOBAL   MVI   GLOBFLAG,C'Y'              TELL USER\n         SPACE\nTEST5    TM    RIBESFLG,RIBESTAT       IS THIS GUY THE OWNER?\n         BO    OWNER                      YES..\n         MVI   OWNFLAG,C'N'               NO..TELL USER\n         MVC   WAITFLAG(9),WAITING        TELL USER WAITING FOR DSET'S\n         B     TPUTIT                     GO PRINT IT\nOWNER    MVI   OWNFLAG,C'Y'               TELL USER\n         SPACE\nTPUTIT   TPUT  JOBLINE,L'JOBLINE       PRINT IT\n         MVC   JOBLINE(72),=72C' '     CLEAR FOR NEXT LINE\n         SPACE 2\nBUMPRIBE AH    R11,RIBELENG            POINT TO NEXT RIBE\n         BCT   R9,SEARCH               AND DO IT FOR NEXT USER\nBUMPRIB  SR    R3,R3                   CLEAR THE REG\n         L     R4,RIBNRIBE             NUMBER OF RIBE'S\nBUMPLOOP AH    R3,RIBELENG             ADD RIBE LENGTH\n         BCT   R4,BUMPLOOP             AND ADD TIMES NUMBER OF RIBE'S\n         AH    R3,RIBLNGTH             ADD LENGTH OF RIB\n         AH    R3,RIBVLEN              ADD LENGTH OF VARIABLE SECTION\n         AR    R10,R3                  POINT TO NEXT RIB\n         BCT   R7,RIBLOOP              AND LOOP UNTIL NO MORE RIBS\n         SPACE\n         CLI   SWITCH,C'1'             WAS THERE AN ENQ ?\n         BE    RETURN                     YES...EXIT\n         TPUT  BLANK,L'BLANK              NO... PRINT BLANK\n         TPUT  NOENQ,L'NOENQ                    TELL USER\n         EJECT\nRETURN   ENDALL\n         EJECT\n         DS   0F\nRIBLNGTH DC    H'0'                    RIB LENGTH\nRIBELENG DC    H'0'                    RIBE LENGTH\nANYENQ   DC    F'0'                    NO ENQ'S\n         SPACE\n         DS   0F\nSCANSAVE DS    18F                     18 WORD SAVEAREA REQ FOR GQSCAN\nWORKA    DS    2F'0'                   DATE/TIME WORKAREA\nWORKB    DS    2F'0'                   DATE/TIME WORKAREA\nSWITCH   DS    C'0'                    ENQ SWITCH\nWAITING  DC    CL9'*WAITING*'          WAITING FLAG\nEXCL     DC    CL4'EXCL'               EXCL FLAG\nSHR      DC    CL4'SHR '               SHR FLAG\nSYSDSN   DC    CL8'SYSDSN  '           QNAME FOR GQSCAN\n         EJECT\nDSNLINE  DS   0CL72                    DATASET NAME LINE\n         DC    CL14'RESOURCE NAME='\nDSN      DS    CL44\nDSNNULL  DC    CL14' '\nDSNLINEL EQU   *-DSNLINE\n         SPACE\nULINE    DS   0CL72                    UNDERLINE\n         DC    72C'-'\nULINEL   EQU   *-ULINE\n         SPACE\nJOBLINE  DS   0CL72                    INFO LINE\nJOBNAME  DS    CL8\n         DC    C' '\nWAITFLAG DS    CL9\n         DC    C' '\nEXCLFLAG DS    CL4\n         DC    CL4' '\nSYSTEM   DS    CL4\n         DC    CL4' '\n         DC    CL6' '\nMCFLAG   DS    CL1\n         DC    CL6' '\n         DC    CL2' '\n         DC    CL3' '\nRESVFLAG DS    CL1\n         DC    CL3' '\n         DC    CL2' '\n         DC    CL2' '\nGLOBFLAG DS    CL1\n         DC    CL3' '\n         DC    CL2' '\n         DC    CL2' '\nOWNFLAG  DS    CL1\n         DC    CL2' '\nJOBLINEL EQU   *-JOBLINE\n         SPACE\nFLAGHD   DS   0CL72                    FLAG HEADER\n         DC    CL14'JOBNAME/USERID'\n         DC    CL5' '\n         DC    CL4'DISP'\n         DC    CL2' '\n         DC    CL8' SYSTEM '\n         DC    CL2' '\n         DC    CL13'MUST COMPLETE'\n         DC    CL2' '\n         DC    CL7'RESERVE'\n         DC    CL2' '\n         DC    CL6'GLOBAL'\n         DC    CL2' '\n         DC    CL5'OWNER'\nFLAGHDL  EQU   *-FLAGHD\n         SPACE\nCODE04M  DS   0CL72                    DSNAME NOT FOUND\n         DC    CL72'ERROR ENCOUNTERED CODE 04 - RETRY COMMAND'\nCODE04ML EQU   *-CODE04M\n         SPACE\nCODE08M  DS   0CL72                    GQSCAN AREA TOO SMALL\n         DC    CL72'ERROR ENCOUNTERED CODE 08 - RETRY COMMAND'\nCODE08ML EQU   *-CODE08M\n         SPACE\nCODE0CM  DS   0CL72                    GQSCAN SCREWED UP\n         DC    CL72'ERROR ENCOUNTERED CODE 0C - RETRY COMMAND'\nCODE0CML EQU   *-CODE0CM\n         SPACE\nCODE10M  DS   0CL72                    INVALID SYSNAME SPECIFIED\n         DC    CL72'ERROR ENCOUNTERED CODE 10 - RETRY COMMAND'\nCODE10ML EQU   *-CODE10M\n         SPACE\nNOENQ    DS   0CL72\n         DC    CL72'NO ENQUEUES EXIST      '\nNOENQL   EQU   *-NOENQ\n         SPACE\nCLEAR    DC    X'C1115D7E1140403C4040001DC813'  CLEAR SCREEN\nTITLE    DC    C'   EDWA ENQUEUE CONFLICT DISPLAY     XSID     YY.DDD  X\n                HH.MM.SS'\nBLANK    DC    CL72' '\n         LTORG\n         DS   0F\nSCANAREA DS    8192X                SCAN INFO AREA\n         EJECT\n         IEESMCA\n         EJECT\n         ISGRIB\n         END\n//L.SYSLMOD  DD   DSN=C4ADMDM.PROD.LKED(TSOENQ),DISP=SHR\n//*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TX": {"ttr": 5385, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x97#?\\x00\\x97#?\\x13\\x05\\x00\\x03\\x00\\x03\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1997-08-21T00:00:00", "modifydate": "1997-08-21T13:05:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "ED115DM"}, "text": "/* REXX */\nSAY TX\nPULL FRED\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UDD": {"ttr": 5387, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x97\\x15o\\x00\\x97\\x15o\\x138\\x00\\n\\x00\\t\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1997-06-05T00:00:00", "modifydate": "1997-06-05T13:38:00", "lines": 10, "newlines": 9, "modlines": 0, "user": "ED115DM"}, "text": "/* REXX */\nSAY ENTER DSN TO LOOK AT (WITHOUT QUOTES)\nPULL DSN\nL = LENGTH(DSN);\nIF SUBSTR(DSN,L,1) = \"'\" THEN\n                         DO\n                         DSN = SUBSTR(DSN,2,L-2)\n                         DSN = STRIP(DSN)\n                         END\n\"TSODSN\" DSN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UDF": {"ttr": 5389, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01c\\x00\\x00\\x00\\x95\\x19?\\x00\\x98'\\x9f\\x10X\\x045\\x03x\\x045\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@\"", "ispf": {"version": "01.99", "flags": 0, "createdate": "1995-07-12T00:00:00", "modifydate": "1998-10-06T10:58:00", "lines": 1077, "newlines": 888, "modlines": 1077, "user": "XSDMN"}, "text": "//ED115DMQ JOB MSGCLASS=X,CLASS=Q,REGION=4M,NOTIFY=XSDMN\n//*\n//ASM1    EXEC ASMHCL,PARM.L='XREF,LET,LIST,AMODE=31,RMODE=24'\n//C.SYSLIB DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD  *\n***********************************************************************\n*                                                                     *\n*                    UNIT DISPLAY FACILITY (UDF)                      *\n*                                                                     *\n* ABSTRACT: DISPLAY ONLINE DISK VTOC'S AND DATASETS.                  *\n*                                                                     *\n* EXTERNAL REFERENCE: ISPLINK                                         *\n*                                                                     *\n***********************************************************************\n*\n* NOTE THE FOLLOWING ENTRY POINT LOGIC IS NON-STANDARD. IN PARTICULAR,\n*      IT WILL NOT WORK WITH CALLED PL/I PROGRAMS.\n*\n***********************************************************************\n         MACRO\n         DX    &HEXTYP,&CHAR\n         DC    X'&HEXTYP'\n         DC    CL7&CHAR\n         MEND\n         EJECT\nUDF      CSECT\nCVTPTX   EQU   X'010'\nCVTUCBSX EQU   X'434'\n         USING *,13,12,11,9\n         B     72(,15)\n         DC    17F'0'\n         STM   14,12,12(13)   SAVE CALLING PGM'S REGISTERS\n         LA    R2,0(,R15)     LOAD EPA IN R2 FOR WORK REGISTER\n         ST    R2,8(R13)      LINK SAVE AREAS\n         ST    R13,4(R2)      SAVE THE CALLER'S R13\n*\nSETBASES DS    0H\n         LR    R13,R2         SET SAVE AREA AND BASE 1\n         LR    R12,R2         SET\n         A     R12,L4096          BASE 2\n         LR    R11,R12        SET\n         A     R11,L4096          BASE 3\n         LR    R9,R11         SET\n         A     R9,L4096           BASE 4\n*\n         LA    R0,4095\n         GETMAIN R,LV=(0)\n         ST    R1,GETAREA\n*\nINITFLDS DS    0H\n         MVC   TABAREA(80),SPACES\n         XC    ISPARMS(40),ISPARMS\n         B     SHOWDASD\n*\nSHOWAGIN DS    0H\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDELETE,ASTER),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBEND,VDFTABLE),VL,MF=(E,ISPARMS)\n*\n         B     SHOWDASD    DISPLAY THE UNIT'S\n*\nSHOWDONE DS    0H\n*                                  DELETE THE TABLE VARIABLES\n         L     R15,ISPLINK\n         CALL  (15),(VDELETE,ASTER),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBEND,VDFTABLE),VL,MF=(E,ISPARMS)\n*\n         LA    R0,4095\n         L     R1,GETAREA\n         FREEMAIN R,LV=(0),A=(1)\n*\n         L     R13,4(R13)     RESTORE THE CALLER'S R13\n         LM    14,12,12(13)   RETURN TO OUR CALLER\n         SR    15,15          SET RC=0\n         BR    14             AND RETURN\n         EJECT\n**************************** END ***************************\nCVTPRT   EQU   *\n         UNPK  CVTA(9),ADDRUCB(5)\n         TR    CVTA(8),HEXTAB\n         LM    R14,R15,CVTA\n         BR    R7\n*\nL4096    DC    F'4096'\n*\n************************************************************\n*\nSHOWDASD DS    0H\n*\n         MVC   SELCODE(1),SPACES  SET SELECTION CODE TO SPACES\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VTOLINEP,TABAREA,CHAR,L77),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VSLP,SELCODE,CHAR,L1),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,VCMD,CMDDATA,CHAR,L1),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,ONLI,ONLID,CHAR,L1),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,OFFL,OFFLD,CHAR,L1),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,DASD,DASDD,CHAR,L1),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,TAPE,TAPED,CHAR,L1),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,COMM,COMMD,CHAR,L1),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,TUBE,TUBED,CHAR,L1),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,UREC,URECD,CHAR,L1),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,CTCC,CTCCD,CHAR,L1),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,OTHR,OTHRD,CHAR,L1),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,CH,CHD,CHAR,L2),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBCREATE,VDFTABLE,NULLENT,DANAMLST,NOWRITE),      X\n               VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBVCLEAR,VDFTABLE),VL,MF=(E,ISPARMS)\n*\n         MVI   ONLID,C' '\n         L     R15,ISPLINK\n         CALL  (15),(VGET,ONLI,SHARED),VL,MF=(E,ISPARMS)\n*\n         MVI   OFFLD,C' '\n         L     R15,ISPLINK\n         CALL  (15),(VGET,OFFL,SHARED),VL,MF=(E,ISPARMS)\n*\n         MVI   DASDD,C' '\n         L     R15,ISPLINK\n         CALL  (15),(VGET,DASD,SHARED),VL,MF=(E,ISPARMS)\n*\n         MVI   TAPED,C' '\n         L     R15,ISPLINK\n         CALL  (15),(VGET,TAPE,SHARED),VL,MF=(E,ISPARMS)\n*\n         MVI   COMMD,C' '\n         L     R15,ISPLINK\n         CALL  (15),(VGET,COMM,SHARED),VL,MF=(E,ISPARMS)\n*\n         MVI   CTCCD,C' '\n         L     R15,ISPLINK\n         CALL  (15),(VGET,CTCC,SHARED),VL,MF=(E,ISPARMS)\n*\n         MVI   TUBED,C' '\n         L     R15,ISPLINK\n         CALL  (15),(VGET,TUBE,SHARED),VL,MF=(E,ISPARMS)\n*\n         MVI   URECD,C' '\n         L     R15,ISPLINK\n         CALL  (15),(VGET,UREC,SHARED),VL,MF=(E,ISPARMS)\n*\n         MVI   OTHRD,C' '\n         L     R15,ISPLINK\n         CALL  (15),(VGET,OTHR,SHARED),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VGET,CH,SHARED),VL,MF=(E,ISPARMS)\n*\n         CLI   ONLID,C' '\n         BNE   O1\n         MVI   ONLID,C'Y'\nO1       CLI   OFFLD,C' '\n         BNE   O2\n         MVI   OFFLD,C'Y'\nO2       CLI   DASDD,C' '\n         BNE   O3\n         MVI   DASDD,C'N'\nO3       CLI   TAPED,C' '\n         BNE   O4\n         MVI   TAPED,C'Y'\nO4       CLI   COMMD,C' '\n         BNE   O5\n         MVI   COMMD,C'N'\nO5       CLI   CTCCD,C' '\n         BNE   O6\n         MVI   CTCCD,C'N'\nO6       CLI   TUBED,C' '\n         BNE   O7\n         MVI   TUBED,C'N'\nO7       CLI   URECD,C' '\n         BNE   O8\n         MVI   URECD,C'N'\nO8       CLI   OTHRD,C' '\n         BNE   O9\n         MVI   OTHRD,C'N'\nO9       DS    0H\n*\n         TITLE 'EXTRACT UCB INFORMATION'\nAGAIN    L     R1,16                        CVT ADDRESS\n         USING CVT,R1\n* CHPID START\n         L     R5,CVTOPCTP        RMCT\n         DROP  R1\n         L     R6,280(R5)         CMCT\n         L     R7,20(R6)          CMB\n         LA    R7,32(R7)          PAST HDR\n         ST    R7,CMB\n* CHPID END\n*XTUCB   L     R15,CVTPTX\nNXTUCB   DS    0H\n*        L     R15,CVTUCBSX(,R15)\n*        CALL  (15),(WORKAREA,DEVCLASS,ADDRUCB),VL\n*        LTR   R15,R15\n         LA    R6,WORKAREA\nU        UCBSCAN COPY,WORKAREA=WORKAREA,UCBAREA=UCBAREA,RANGE=ALL,     1\n               DYNAMIC=YES,DEVCLASS=ALL,RETCODE=RET,RSNCODE=RSN\n*        SR    R6,R6\n         L     R6,RET\n         LTR   R6,R6\n         BNZ   SHOWVTAB\n         L     R8,GETAREA\n         MVC   0(48,R8),UCBAREA\n         USING UCBCMSEG,R8\n*\nONLTST   TM    UCBSTAT,UCBONLI              ONLINE?\n         BNO   OFFTST\n         CLI   ONLID,C'Y'\n         BNE   NXTUCB\n         B     USEUCB\n*\nOFFTST   CLI   OFFLD,C'Y'\n         BNE   NXTUCB\n         B     USEUCB\n*\nUSEUCB   DS    0H                           GOT HERE THEN DO\n         MVC   UNITADDR,UCBNAME\n*\n         LA    R10,0\n         ST    R10,EXTPWORK\n         OC    EXTPWORK+1(3),UCBEXTP\n         USING UCBCMEXT,R10\n         L     R10,EXTPWORK\n         LA    R7,0\n         LH    R7,UCBASID\n         LTR   R7,R7\n         BZ    NOTASID\n*\n         LA    R7,0\n         IC    R7,UCBASID\n         SRL   R7,4\n         LTR   R7,R7\n         BZ    DO2\n         IC    R5,HEX(R7)\n         STC   R5,ASID\nDO2      IC    R7,UCBASID\n         N     R7,=F'15'\n         IC    R5,HEX(R7)\n         STC   R5,ASID+1\n         IC    R7,UCBASID+1\n         SRL   R7,4\n         IC    R5,HEX(R7)\n         STC   R5,ASID+2\n         IC    R7,UCBASID+1\n         N     R7,=F'15'\n         IC    R5,HEX(R7)\n         STC   R5,ASID+3\n*\nNOTASID  CLI   UCBTBYT3,UCB3DACC            DIRECT ACCESS?\n         BNE   NOTDASD\n*\n         CLI   DASDD,C'Y'\n         BNE   NXTUCB\n*\n         MVC   VOLNAME,UCBVOLI\n*\n         SR    R3,R3                        CLEAR A REG\n         LH    R3,UCBUSER                   GET USE COUNT\n         CVD   R3,DBLW                      CONVERT TO PRINT\n         OI    DBLW+7,X'0F'                 FIX SIGN BITS\n         UNPK  USECNT,DBLW+6(2)             PLACE IT ON THE LINE\n*\n         MVC   UNITTYPE(4),=C'3350'\n         CLI   UCBUNTYP,X'0B'\n         BE    DA00\n         MVC   UNITTYPE(4),=C'3380'\n         CLI   UCBUNTYP,X'0E'\n         BE    DA00\n         MVC   UNITTYPE(4),=C'3390'\n         CLI   UCBUNTYP,X'0F'\n         BE    DA00\n         MVC   UNITTYPE(4),=C'VIO?'\n*\nDA00     EQU   *\n         LA    R3,0\n         IC    R3,UCBTBYT1\n         SRL   R3,4\n         IC    R5,HEX(R3)\n*        STC   R5,UNITTYPE+6\n         IC    R3,UCBTBYT1\n         N     R3,=F'15'\n         IC    R5,HEX(R3)\n*        STC   R5,UNITTYPE+7\n*\n         TM    UCBTBYT2,UCBRVDEV   IS THIS VIO\n         BZ    DA10                NO..\n         MVC   UNITTYPE(4),=C' VIO'\n*        MVC   OUTVOL,VIOUNIT      INDICATE SO..\n*\nDA10     EQU   *\n         TM    UCBSTAT,UCBONLI\n         BZ    TSTCMB              IT IS OFFLINE\n*\n         TM    UCBSTAB,UCBPGFL     IS THERE PAGING ON THIS PACK\n         BZ    DASYR\n         MVC   OUTUSAGE(3),PAGEPACK TELL THE USER\n*\nDASYR    TM    UCBSTAT,UCBSYSR     IS THIS THE SYSRES ?\n         BZ    DA2                 NO... PRESS ON\n         MVC   OUTUSAGE(3),SYSRES INDICATE SO\n*\nDA2      TM    UCBSTAB,UCBBPRV     IS THIS VOL PRIVATE ?\n         BZ    DA3                 NO..\n*        MVC   OUTSTATE,PRIVATE    SHOW IT IS SO\n*\nDA3      TM    UCBSTAB,UCBBPUB     IS IT PUBLIC ?\n         BZ    DA4                 NO..\n         MVC   OUTUSAGE(3),PUBLIC\n*\nDA4      TM    UCBSTAB,UCBBSTR     STORAGE ?\n         BZ    DA5                 NO...\n         MVC   OUTUSAGE(3),STORAGE\n*\nDA5      TM    UCBSTAT,UCBRESV     IS IT RESERVED ?\n         BZ    DA6                 NO..\n         MVC   OUTUSAGE(3),RESERVED\n*\nDA6      TM    UCBSTAT,UCBPRES     PERMANENTLY RESIDENT\n         BZ    DA7                 NO..\n*        MVC   OUTSTATE,PRES\n*\nDA7      B     TSTCMB\n*\nNOTDASD  CLI   UCBTBYT3,UCB3TAPE            TAPE         ?\n         BNE   NOTTAPE\n*\n         CLI   TAPED,C'Y'\n         BNE   NXTUCB\n*\n         TM    UCBSTAT,UCBONLI              ONLINE?\n         BNO   TDIS\n*\n         MVC   VOLNAME,UCBVOLI\n         TM    UCBWGT,UCBREW       IS IT REWIND ?\n         BZ    TAD1                NO.. MOVE ON\n         MVC   OUTUSAGE(3),=C'REW'\n         DROP  R10\nTAD1     LA    R10,0\n         ST    R10,EXTPWORK\n         OC    EXTPWORK+1(3),UCBXTNB\n         USING UCBMT,R10\n         L     R10,EXTPWORK\n         TM    UCBSTAT,UCBALOC\n         BNO   TDIS\n         LA    R5,0\n         LH    R5,UCBSIO\n         CVD   R5,WORK\n         OI    WORK+7,X'0F'\n         MVC   UNITTYPE+4(1),SPACES\n         UNPK  UNITTYPE+5(5),WORK+5(3)\n*\nTDIS     LA    R3,TAPETYPS         GET DEVICE TYPES ADDRESSES\nTA0      CLC   UCBUNTYP,0(R3)      IS IT THIS ?\n         BE    TA1                 SHORE IS\n         LA    R3,TYPESIZE(R3)     GET NEXT IF NOT\n         CLI   0(R3),255           STOPPER ?\n         BNE   TA0\nTA1      MVC   UNITTYPE(4),1(R3)       MOVE THE DESCRIPTOR\n*\n* CHECK  OUT THE DENSITYS AVAILABLE\n*\nTA10     TM    UCBTBYT2,UCBDUDN1+UCB2OPT1 DUAL  800/1600 ?\n         BZ    TA2                 NO..\n         MVC   UNITTYPE(9),DD1600\n         TM    UCBTBYT2,UCB2OPT1   SUPPORT ASCII ?\n         BZ    TA7                 NO..\n         MVC   OUTUSAGE(2),ASCII\n         B     TA7\nTA2      TM    UCBTBYT2,UCBDUDN2   1600/6250 ?\n         BZ    TA3                 NO..\n         MVC   UNITTYPE(9),DD6250\n         B     TA7\nTA3      TM    UCBTBYT2,UCB2OPT0   7-TRACK ?\n         BZ    TA4                 NO..\n         MVC   UNITTYPE(9),DD1600\n         MVC   OUTUSAGE(2),TRACK7\n         B     TA7\nTA4      TM    UCBTBYT1,UCBD1600   1600 BPI ?\n         BZ    TA5\n         MVC   UNITTYPE(9),D1600\n         B     TA7\nTA5      TM    UCBTBYT1,UCBD6250   6250 BPI ?\n         BZ    TA7                 NO..\n         MVC   UNITTYPE(9),D6250\nTA7      B     TSTCMB\n*\nNOTTAPE  CLI   UCBTBYT3,UCB3CTC             CTC          ?\n         BNE   NOTCTC\n*\n         CLI   CTCCD,C'Y'\n         BNE   NXTUCB\n*\n         MVC   UNITTYPE(4),=C' CTC'\n         B     TSTACT\n*\nNOTCTC   CLI   UCBTBYT3,UCB3COMM            COMM         ?\n         BNE   NOTCOMM\n*\n         CLI   COMMD,C'Y'\n         BNE   NXTUCB\n*\n         LA    R3,COMMTYPS         GET DEVICE TYPES ADDRESSES\n         MVC   CVTA,UCBTBYT1\n         NI    CVTA,15             GET MODEL CODE\nCO0      CLC   CVTA(1),0(R3)       IS IT THIS ?\n         BE    CO1                 SHORE IS\n         LA    R3,TYPESIZE(R3)     GET NEXT IF NOT\n         CLI   0(R3),255           STOPPER ?\n         BNE   CO0\n*\n         MVC   CVTA,UCBUNTYP\n         NI    CVTA,15             GET CONTROL UNIT-TYPE\n         LA    R3,COMMCUS\nCO00     CLC   CVTA(1),0(R3)       IS IT THIS ?\n         BE    CO1                 SHORE IS\n         LA    R3,TYPESIZE(R3)     GET NEXT IF NOT\n         CLI   0(R3),255           STOPPER ?\n         BNE   CO00\nCO1      MVC   UNITTYPE(4),1(R3)       MOVE THE DESCRIPTOR\n         B     TSTACT\n*\nNOTCOMM  CLI   UCBTBYT3,UCB3DISP            TUBE         ?\n         BNE   NOTDISP\n*\n         CLI   TUBED,C'Y'\n         BNE   NXTUCB\n*\n         LA    R3,TUBETYPS         GET DEVICE TYPES ADDRESSES\nTU0      CLC   UCBUNTYP,0(R3)      IS IT THIS ?\n         BE    TU1                 SHORE IS\n         LA    R3,TYPESIZE(R3)     GET NEXT IF NOT\n         CLI   0(R3),255           STOPPER ?\n         BNE   TU0\nTU1      MVC   UNITTYPE(4),1(R3)       MOVE THE DESCRIPTOR\n         B     TSTACT\n*\nNOTDISP  CLI   UCBTBYT3,UCB3UREC            UNIT RECORD  ?\n         BNE   NOTUR\n*\n         CLI   URECD,C'Y'\n         BNE   NXTUCB\n*\n         LA    R3,URTYPES          GET DEVICE TYPES ADDRESSES\nUR0      CLC   UCBUNTYP,0(R3)      IS IT THIS ?\n         BE    UR1                 SHORE IS\n         LA    R3,TYPESIZE(R3)     GET NEXT IF NOT\n         CLI   0(R3),255           STOPPER ?\n         BNE   UR0\nUR1      DS    0H\n         MVC   UNITTYPE(4),1(R3)       MOVE THE DESCRIPTOR\n         B     TSTACT\n*\nNOTUR    DS    0H\n*\n         CLI   OTHRD,C'Y'\n         BNE   NXTUCB\n*\n         B     TSTACT\n*\nTSTCMB   DS    0H                                USE UCBCHAN ADD CMB\n         LH    R3,UCBCHAN\nCMBPROC  DS    0H        ** ALL TIMES IN 128 MICROS, DIV BY 8 TO MS **\n         B     TSTACT    CANNOT DO ON HOW ?\n         L     R4,ADDRUCB\n         S     R4,=F'30'\n         LH    R4,0(R4)\n         S     R4,=F'1'\n         LR    R1,R4                R1 IS INDEX TO IOCOUNTER\n         SLL   R1,2                 * 4\n         SLL   R4,5                 * 32\n         L     R7,CMB\n         LH    R6,2(R4,R7)          SSCH COUNT SAMPLES\n         LR    R5,R6                     COUNT\n         C     R6,IOCOUNT(R1)            COUNT DIFFERENCE\n         BNM   SUBIO\n         A     R6,=F'65536'\nSUBIO    S     R6,IOCOUNT(R1)            COUNT DIFFERENCE\n         CVD   R6,WORK\n         SLL   R6,3                      * 8 SO TIMES IN MS\n         ST    R6,COUNTER\n         OI    WORK+7,X'0F'\n         UNPK  OUTIO(5),WORK+5(3)\n         ST    R5,IOCOUNT(R1)             SAVE COUNT\n*\n         L     R6,4(R4,R7)               CONN  SAMPLES\n         LR    R5,R6                     CONN\n         S     R6,IOCONN(R1)             CONN  DIFFERENCE\n         LA    R2,0\n         LR    R3,R6\n         LTR   R3,R3\n         BZ    NODIV\n         D     R2,COUNTER\nNODIV    CVD   R3,WORK\n         OI    WORK+7,X'0F'\n         UNPK  OUTCONN(3),WORK+6(2)\n         ST    R5,IOCONN(R1)             SAVE CONN\n*\n         L     R6,12(R4,R7)              DISC  SAMPLES\n         LR    R5,R6                     DISC\n         S     R6,IODISC(R1)             DISC  DIFFERENCE\n         LA    R2,0\n         LR    R3,R6\n         LTR   R3,R3\n         BZ    NODIV3\n         D     R2,COUNTER\nNODIV3   CVD   R3,WORK\n         OI    WORK+7,X'0F'\n         UNPK  OUTDISC(3),WORK+6(2)\n         ST    R5,IODISC(R1)             SAVE PEND\n*\n         L     R6,8(R4,R7)               PEND  SAMPLES\n         LR    R5,R6                     PEND\n         S     R6,IOPEND(R1)             PEND  DIFFERENCE\n         LA    R2,0\n         LR    R3,R6\n         LTR   R3,R3\n         BZ    NODIV2\n         D     R2,COUNTER\nNODIV2   CVD   R3,WORK\n         OI    WORK+7,X'0F'\n         UNPK  OUTPEND(3),WORK+6(2)\n         ST    R5,IOPEND(R1)             SAVE PEND\n*\n         L     R6,16(R4,R7)              CUQ   SAMPLES\n         LR    R5,R6                     CUQ\n         S     R6,IOCUQ(R1)              CUQ   DIFFERENCE\n         LA    R2,0\n         LR    R3,R6\n         LTR   R3,R3\n         BZ    NODIV4\n         D     R2,COUNTER\nNODIV4   CVD   R3,WORK\n         OI    WORK+7,X'0F'\n         UNPK  OUTCUQ(3),WORK+6(2)\n         ST    R5,IOCUQ(R1)              SAVE CUQ\n*\nTSTACT   MVC   USTATUS(3),=C'ACT'\n         TM    UCBSTAT,UCBALOC\n         BO    TSTTYPE\n         MVC   USTATUS(3),=C'RES'\n         TM    UCBSTAT,UCBRESV\n         BO    TSTTYPE\n         MVC   USTATUS(3),=C'OFP'\n         TM    UCBSTAT,UCBUNLD\n         BO    TSTTYPE\n         MVC   USTATUS(3),=C'ONL'\n         TM    UCBSTAT,UCBONLI\n         BO    TSTTYPE\n         MVC   USTATUS(3),=C'OFF'\n*\nTSTTYPE  CLC   OUTUSAGE(3),SPACES\n         BNE   TST4\n         MVC   OUTUSAGE(3),=C'NRY'\n         TM    UCBFLA,UCBNRY\n         BO    TST4\n         MVC   OUTUSAGE(3),=C'DEF'\n         TM    UCBFLA,UCBDEFER\n         BO    TST4\n         MVC   OUTUSAGE(3),=C'   '\n*\nTST4     DS    0H\n         TM    UCBFLA,UCBNRY\n         BZ    CPA\n         B     FSTTYPE\n*\nCPA      DS    0H\n         CLI   UCBTBYT3,UCB3DACC            DIRECT ACCESS?\n         BNE   FSTTYPE\n         TM    UCBFLA,UCBSTRT+UCBHALT+UCBCLEAR\n         BZ    TSTPND\n         B     TSTPND      CANNOT DO ON HOW ?\n         L     R5,ADDRUCB\n         S     R5,=F'4'\n         L     R5,0(R5)\n         LTR   R5,R5\n         BZ    TSTPND\n         MVC   CCHHR(5),=XL5'00'\n         CLC   0(4,R5),=C'IOQ '\n         BNE   NOIOSB\n         L     R5,8(R5)                   GET ADDR OF IOSB FROM IOQ\n         LTR   R5,R5\n         BZ    NOIOSB\n         MVC   CCHHR(5),103(R5)\nNOIOSB   LA    R5,5\n         LA    R4,UNITTYPE-2\n         LA    R7,CCHHR-1\n         LA    R6,0\nIOSBL    LA    R4,2(R4)\n         LA    R7,1(R7)\n         IC    R6,0(R7)\n         SRL   R6,4\n         IC    R3,HEX(R6)\n         STC   R3,0(R4)\n         IC    R6,0(R7)\n         N     R6,=F'15'\n         IC    R3,HEX(R6)\n         STC   R3,1(R4)\n         BCT   R5,IOSBL\n         B     FSTTYPE\n*\nTSTPND   TM    UCBFLA,UCBPSNS\n         BZ    FSTTYPE\n         MVC   UNITTYPE(10),PENDSNSE\n         B     FSTTYPE\n*\nFSTTYPE  DS    0H\n         BAL   R7,CVTPRT           CONVERT IT\n*        STCM  R14,B'0011',OUTADDR MOVE THE FIRST PART OF THE ADDRESS\n*        STCM  R15,B'1111',OUTADDR+2 AND THE REST ALSO\n*\n         UCBINFO PATHMAP,MAPAREA=INFOAREA,DEVN=UCBCHAN,RETCODE=RC\n         L     R15,RC\n         LTR   R15,R15\n         BNZ   BADRC\n         LA    R7,INFOAREA\n         LA    R7,8(R7)\n         LH    R6,0(R7)\n         SRL   R6,8\n         CVD   R6,WORK\n         OI    WORK+7,X'0F'\n         UNPK  OUTCHPID(2),WORK+6(2)\n         LA    R7,5(R7)\n         LA    R4,OUTCHPID\nNXTCHP   LA    R7,3(R7)\n         LA    R4,3(R4)\n         LH    R5,0(R7)\n         SRL   R5,8\n         ST    R5,R5SAVE\n*\n         SRL   R5,4\n         IC    R5,HEX(R5)\n         STC   R5,0(R4)\n         L     R5,R5SAVE\n         N     R5,=F'15'\n         IC    R5,HEX(R5)\n         STC   R5,1(R4)\n*        CVD   R5,WORK\n*        OI    WORK+7,X'0F'\n*        UNPK  0(2,R4),WORK+6(2)\n         BCT   R6,NXTCHP\n*        MVC   OUTCHPID(12),=CL12'OK  RC      '\n         B     GOON\nBADRC    DS    0H\n         MVC   OUTCHPID(12),=CL12'BAD RC      '\n*\nGOON     DS    0H\n         CLC   CHD(2),SPACES\n         BE    GOONX\n         CLC   OUTCHPID+3(2),CHD\n         BE    GOONX\n         CLC   OUTCHPID+6(2),CHD\n         BE    GOONX\n         CLC   OUTCHPID+9(2),CHD\n         BE    GOONX\n         CLC   OUTCHPID+12(2),CHD\n         BE    GOONX\n         MVC   TABAREA(80),SPACES\n         B     NXTUCB\n*\nGOONX    DS    0H\n         TM    UCBJBNR,UCBJES3\n         BZ    JDONE\n         MVI   USTATUS-1,C'*'\n         B     JDONE2\nJDONE    DS    0H\n         TM    UCBJBNR,UCBJ3DV\n         BZ    JDONE2\n         MVI   USTATUS-1,C'.'\nJDONE2   DS    0H\n         L     R15,ISPLINK\n         CALL  (15),(VPUT,DANAMLST),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBADD,VDFTABLE),VL,MF=(E,ISPARMS)\n*\n         MVC   TABAREA(80),SPACES\n*\n         B     NXTUCB                       NOW GO ON\n         TITLE 'UDF-SHOW UCB  TABLE'\n*\n***********************************************************************\n*\n*   NOW SHOW THE ISPPLIB FORMAT AND THE TABLE ON THE SCREEN\n*\n***********************************************************************\n*\nSHOWVTAB DS    0H\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBTOP,VDFTABLE),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBDISPL,VDFTABLE,UDFDATAB),VL,MF=(E,ISPARMS)\n         LR    R8,R15\n*\n         L     R15,ISPLINK\n         CALL  (15),(VPUT,ONLI,SHARED),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VPUT,OFFL,SHARED),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VPUT,DASD,SHARED),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VPUT,TAPE,SHARED),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VPUT,COMM,SHARED),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VPUT,CTCC,SHARED),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VPUT,TUBE,SHARED),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VPUT,UREC,SHARED),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VPUT,OTHR,SHARED),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VPUT,CH,SHARED),VL,MF=(E,ISPARMS)\n*\n***********************************************************************\n*   DETERMINE WHETHER ANYTHING WAS ENTERED ON THE SCREEN\n***********************************************************************\n*\n         C     R8,FZEROS      COMMAND ENTERED/LINE MODIFIED??\n         BNE   SHOWDONE       NOPE\n*\nGOTSTUFF DS    0H\n         MVC   SELSAVE(1),SELCODE    SAVE SEL CODE\n         OC    SELSAVE(1),SPACES   UPPER-CASE IT\n         MVC   SELCODE(1),SPACES  SET SELECTION CODE TO SPACES\n*\n         CLI   CMDDATA,C' '   IF NOT SPACES\n         BNE   GOTCMD         THEN A COMMAND WAS ENTERED\n*\n* IF THE CRP IS NOT ZERO, THEN A LINE SELECTION CODE MUST HAVE BEEN\n* ENTERED. I HAVE THE CURRENT LINE, SO EDIT THE SELECTION CODE.\n*\n         CLI   SELSAVE,C'S'   IS IT A \"SHOW VTOC\" REQUEST\n         BE    SHOWVTOC       GO DO IT\n*\n* ADD TESTS FOR OTHER LINE SELECTION CODES HERE\n*\n         B     SHOWAGIN       GO REPEAT THE DISPLAY\n*\nSHOWVTOC DS    0H\n*\n         B     SHOWAGIN       GO REPEAT THE DISPLAY\n*\n         EJECT\n*\n*    ONLY COMMAND SUPPORTED IS \"REPEAT\"\n*\nGOTCMD   DS    0H\n*OTCMD   TR    CMDDATA,CAPSONLY  UPPER-CASE ALL INPUT\n*\n*  NOTE THE TR TABLE IS SET UP TO DELETE SEMI-COLONS, IN ORDER TO\n*       PREVENT COMMAND CONCATENATION.\n*\n         CLI   CMDDATA,C' '   IF COMMAND AREA IS SPACES\n         BE    SHOWAGIN       THEN A COMMAND WAS NOT ENTERED\n*\n         B     SHOWAGIN       GO REPEAT THE SCREEN\n         TITLE 'MISCELLANEOUS CONSTANTS'\n         PRINT   GEN\n         LTORG\n*\n         DS    0F\n*DIT4    DC    X'40202120'\n*DIT6    DC    X'402020202121'\n*DIT8    DC    X'4020202020202120'\n*\nISPLINK  DC    V(ISPLINK)\nCMDDATA  DC    CL1' '\n*\n*78      DC    F'78'\nFZEROS   DC    F'0'\nF8       DC    F'8'\nL1       DC    F'1'\nL2       DC    F'2'\nL3       DC    F'3'\nL77      DC    F'77'\nL40      DC    F'40'\nL72      DC    F'72'\n*\nSELCODE  DC    CL1' '\nSELSAVE  DC    CL1' '\n*\nTBADD    DC    C'TBADD '\nTBCREATE DC    C'TBCREATE '\nTBDISPL  DC    C'TBDISPL '\nTBEND    DC    C'TBEND '\nTBGET    DC    C'TBGET '\nTBQUERY  DC    C'TBQUERY '\nTBSKIP   DC    C'TBSKIP '\nTBTOP    DC    C'TBTOP '\nTBVCLEAR DC    C'TBVCLEAR '\nVDEF     DC    C'VDEFINE  '\nVDELETE  DC    C'VDELETE '\nVGET     DC    C'VGET '\nVPUT     DC    C'VPUT '\nVREPLACE DC    C'VREPLACE '\nSHARED   DC    C'SHARED '\n*\nNOWRITE  DC    C'NOWRITE '\n*\nNULLENT  DC    C'()'\n*\nDANAMLST DC    C'('             DISPLAY ACTIVE NAME LIST\nSEL      DC    C'VSLA     '     SELECTION CODE\nVTOLINE  DC    C'VTOLINE )'     JOB INFO\nVTOLINEP DC    C'(VTOLINE )'    JOB INFO\nVSLP     DC    C'(VSLA)'    SELECTION CODE\nVCMD     DC    C'(VCMD)'    SELECTION CODE\nONLI     DC    C'(ONLI)'\nOFFL     DC    C'(OFFL)'\nDASD     DC    C'(DASD)'\nTAPE     DC    C'(TAPE)'\nCOMM     DC    C'(COMM)'\nTUBE     DC    C'(TUBE)'\nUREC     DC    C'(UREC)'\nCTCC     DC    C'(CTCC)'\nOTHR     DC    C'(OTHR)'\nCH       DC    C'(CH)'\nONLID    DS    CL1\nOFFLD    DS    CL1\nDASDD    DS    CL1\nTAPED    DS    CL1\nCOMMD    DS    CL1\nTUBED    DS    CL1\nURECD    DS    CL1\nCTCCD    DS    CL1\nOTHRD    DS    CL1\nCHD      DS    CL2\n*\nSPACES   DC    80CL1' '\nCZEROS   DC    CL8'00000000'\nINFOAREA DS    CL40\nRC       DS    F\n*\nCHAR     DC    C'CHAR '\n*\nUDFDATAB DC    C'UDFDATAB'\nVDFTABLE DC    C'VDFTABLE'\n*\n*\n         TITLE 'REGISTER EQUATES'\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         TITLE 'WORKING STORAGE AREAS'\nDOUBLEWD DS    D              PACKED DECIMAL WORK AREA\nWORK     DS    D              PACKED DECIMAL WORK AREA\nCHIP     DS    CL6\nCMB      DS    F\n*\nISPARMS  DS    10F            PARM LIST FOR ISPLINK\n*\n*     THE ISP TABLE FLAGS INDICATE NO ACTIVE TABLE (0), OR ONE EXISTS\n*\n         TITLE 'UDF-WORK AREAS      '\n         LTORG\n*\nPENDSNSE DC    CL10'SNSE-PNDNG'\nCVTA     DC    D'0',X'0'               PLUS A GARBAGE BYTE\nCVTB     DC    F'0'\nHEXTAB   EQU   *-C'0'\n         DC    C'0123456789ABCDEF'\nDBLW     DS    D                           CVD WORK AREA\nTYPESIZE EQU   8                   SIZE OF A 'DX' ENTRY\nPUBLIC   DC    CL3'SCR'\nSTORAGE  DC    CL3'STG'\nRESERVED DC    CL3'RES'\nSYSRES   DC    CL3'SYR'\nCOMMCUS  EQU   *\n         DX    1,'LOCL'\n*        DX    2,'2701'\n*        DX    3,'2703'\n*        DX    4,'2955'\n         DX    5,'NCP '\n         DX    FF,'COMM'\nTAPETYPS EQU   *\n         DX    1,'2400'\n         DX    2,'0002'\n         DX    3,'TAPE'\n         DX    80,'3480'\n         DX    81,'3490'\n         DX    FF,'????'\nDASDTYPS EQU   *\n         DX    6,'2305-1'\n         DX    7,'2305-2'\n         DX    8,'2314'\n         DX    9,'3330'\n         DX    A,'3340'\n         DX    B,'3350'\n         DX    D,'3330-1'\n         DX    FF,'DASD'\nTUBETYPS EQU   *\n         DX    8,'3066'\n         DX    9,'3277'\n         DX    A,'3284'\n         DX    B,'3286'\n         DX    FF,'TUBE'\nCOMMTYPS EQU   *\n*        DX    1,'TWX'\n*        DX    3,'2740'\n*        DX    4,'2740'\n*        DX    5,'2740C'\n*        DX    6,'2741P'\n*        DX    7,'BSC3'\n         DX    FF,'COMM'\nURTYPES  EQU   *\n*        DX    1,'2540-R'\n*        DX    2,'2540-P'\n*        DX    3,'1442-R'\n*        DX    4,'2501'\n*        DX    5,'2520'\n*        DX    6,'3505'\n*        DX    8,'1403'\n         DX    9,'PRIN'\n*        DX    A,'1443'\n         DX    B,'PRIN'\n*        DX    C,'3525'\n         DX    E,'LASR'\n*        DX    10,'2671'\n*        DX    18,'2495'\n*        DX    1B,'1287'\n*        DX    1C,'1288'\n*        DX    20,'1052'\n*        DX    22,'3210'\n*        DX    23,'3215'\n*        DX    30,'3213'\n*        DX    44,'3540'\n         DX    FF,'U/R'\n*\n*APSONLY DC    CL64' '\n*        DC    CL10' '\n*        DC    C'\u00a2.<(+|&&'\n*        DC    CL9' '\n*        DC    C'!$*)'\n*        DC    C' '             NOTE SEMICOLON CHANGED TO BLANK\n*        DC    C'\u00ac-/'\n*        DC    CL9' ',C',%_>?',CL10' ',C':#@''=\"'\n*        DC    CL16' ABCDEFGHI      '\n*        DC    CL16' JKLMNOPQR      '\n*        DC    CL16'  STUVWXYZ      '\n*        DC    CL16'                '\n*        DC    CL16' ABCDEFGHI      '\n*        DC    CL16' JKLMNOPQR      '\n*        DC    CL16'  STUVWXYZ      '\n*        DC    CL16'0123456789      '\n         TITLE 'UDF-LSPACE WORK AREA'\n*\nHEX      DC    C'0123456789ABCDEF'\nEXTPWORK DS    1F\nR5SAVE   DS    1F\nCCHHR    DS    XL5\nADDRUCB  DS    A\nWORKAREA DC    XL100'00'\nUCBAREA  DC    XL50'00'\nDEVCLASS DC    X'00'\n*IOUNIT  DC    CL7'V-I-O'\nDD6250   DC    CL9'1600/6250'\nDD1600   DC    CL9' 800/1600'\nD1600    DC    CL9'1600     '\nD6250    DC    CL9'6250     '\nASCII    DC    CL2'-A'\nTRACK7   DC    CL2'-7'\nPAGEPACK DC    CL3'PAG'\n         TITLE 'UDF-UCB  LINE FORMAT'\nTABAREA  DS   0CL79\nVOLNAME  DS   CL6                           VOLUME NAME\n         DS   C                             DIRF FLAG\nUNITADDR DS   CL3                           UNIT ADDRESS\n         DS   CL1\nASID     DS   CL4\n         DS   CL1\nUNITTYPE DS   CL11\n         DS   CL1\nUSTATUS  DS   CL3\n         DS   CL1\nOUTUSAGE DS   CL3\n         DS   CL1\nUSECNT   DS   CL3                           # OF CURRENT ALLOCATIONS\n         DS   CL1                           TOTAL FREE TRACKS\nOUTCHPID DS   CL14\n         DS   CL1\nOUTIO    DS   CL5\n         DS   CL1\nOUTCONN  DS   CL3\n         DS   CL1\nOUTDISC  DS   CL3\n         DS   CL1\nOUTPEND  DS   CL3\n         DS   CL1\nOUTCUQ   DS   CL3\n         DS   CL5\nCOUNTER  DS   F\nASTER    DC   C'*'\nGETAREA  DS   F\nRET      DS   F\nRSN      DS   F\nIOCOUNT  DC   445F'0'\nIOCONN   DC   445F'0'\nIODISC   DC   445F'0'\nIOPEND   DC   445F'0'\nIOCUQ    DC   445F'0'\n         EJECT\n*\n* EQUATES....\n*\n         PRINT GEN\n         TITLE 'COMMUNICATION VECTOR TABLE'\n         CVT   DSECT=YES,PREFIX=NO\n         TITLE 'UNIT CONTROL BLOCK'\n         IEFUCBOB LIST=NO\n         IOSDMAP\n         END\n/*\n//L.SYSLMOD  DD   DISP=SHR,DSN=TEST.PGM.LOAD(UDF)\n//L.SYSLIB   DD   DISP=SHR,DSN=ISP.V3R5M0.ISPLOAD\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UDFDATAB": {"ttr": 5895, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01:\\x00\\x00\\x00\\x95\\x19?\\x00\\x98\\x16\\x0f\\x16\\x16\\x00\\x1d\\x00\\x10\\x00\\x00\\xe7\\xd6\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.58", "flags": 0, "createdate": "1995-07-12T00:00:00", "modifydate": "1998-06-09T16:16:00", "lines": 29, "newlines": 16, "modlines": 0, "user": "XODMN"}, "text": ")ATTR\n_ TYPE(INPUT)\n@ TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(YELLOW)\n! TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(GREEN)\n$ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n? TYPE(TEXT) INTENS(LOW) JUST(LEFT) COLOR(YELLOW) HILITE(USCORE)\n+ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n\u00a2 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(GREEN)\n)BODY\n$                     *** Unit display facility ***\n COMMAND ==>_VCMD                                               %SCROLL =>_AMT %\n$SHOW DASD=>_Z$TAPE=>_Z$COMM=>_Z$ CTC=>_Z$NSNA=>_Z$UREC=>_Z$OTHR=>_Z$\n$   ONLINE=>_Z%\n$  OFFLINE=>_Z%              $J            $Chpd sel=>_CH%\n$                             3        USE --- CHPIDS --- DELTA AVG AVG AVG AVG\n$S VOLSER ADR ASID TYPE        STATUS  CNT  # 01 02 03 04 # IO  CON DIS PEN CUQ\n)MODEL\n_Z@Z\n)INIT\n .CURSOR=VCMD\n  &AMT=PAGE\n  &VCMD='    '\n  .ZVARS='( +\n  DASD,TAPE,COMM,CTCC,TUBE,UREC,OTHR,ONLI,OFFL,VSLA,VTOLINE)'\n  .HELP=QS\n &ZTDMARK = '                   ********* End of UCB display ***********   '\n)PROC\n &PTCBTEXT = &VCMD\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UDG": {"ttr": 5897, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x97\\x16\\x8f\\x00\\x97\\x16\\x8f\\x14A\\x00\\n\\x00\\n\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1997-06-17T00:00:00", "modifydate": "1997-06-17T14:41:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "ED115DM"}, "text": "/* REXX */\nSAY ENTER PARTIAL DSN TO LOOK AT (WITHOUT QUOTES)\nPULL DSN\nL = LENGTH(DSN);\nIF SUBSTR(DSN,L,1) = \"'\" THEN\n                         DO\n                         DSN = SUBSTR(DSN,2,L-2)\n                         DSN = STRIP(DSN)\n                         END\n\"TSODSNG\" DSN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WHELP": {"ttr": 5899, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x95&/\\x00\\x95&/\\x14\\x18\\x00\\x01\\x00\\x01\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1995-09-19T00:00:00", "modifydate": "1995-09-19T14:18:00", "lines": 1, "newlines": 1, "modlines": 0, "user": "ED115DM"}, "text": "ISPEXEC DISPLAY PANEL(WHELPP)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WHELPP": {"ttr": 5901, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x95&/\\x00\\x954_\\x12T\\x00 \\x00 \\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1995-09-19T00:00:00", "modifydate": "1995-12-11T12:54:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "ED115DM"}, "text": ")ATTR\n+ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(GREEN)\n$ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(YELLOW)\n@ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(BLUE)\n! TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(RED)\n% TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n\u00a2 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(PINK)\n| TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(WHITE)\n)BODY\n%  Job Display Facility Help via window interface\n%  ----------------------------------------------\n%\n$  These window bars can be selected simply by placing cursor on them.\n$  The same applies to the menus available.\n%\n$  The options window lists choices which affect the operation of job\n$  display itself.  These options can also be set via the panel.\n%\n$  The JES3 option initiates command EDJES3 which is an ISPF version\n$  of C4JES3.  EDJES3 has help panels.\n%\n$  The TSOcommnd option lists some sample commands which may be selected.\n%\n!  Job selectable options :\n%\n$  S : Selects status command information for that jobname\n$  C : Cancel a job\n$  Z : Display Flasher short status information\n$  N : Display enqueues associated with job\n$  F : Invoke Flasher on job\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "YDF": {"ttr": 5903, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x12?\\x00\\x99\\x12?\\x15\\x17\\x00u\\x00u\\x00\\x00\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-05-03T00:00:00", "modifydate": "1999-05-03T15:17:00", "lines": 117, "newlines": 117, "modlines": 0, "user": "XSDMN"}, "text": "//C4ADMDMF  JOB C4ADM000,MSGCLASS=X,CLASS=A,NOTIFY=C4ADMDM\n//*\n//ASMHCL  PROC\n//C      EXEC  PGM=IEV90,PARM=OBJECT,REGION=5M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  SYSOUT=B,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))\n//SYSPRINT DD SYSOUT=X,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//L    EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL',REGION=2M,COND=(8,LT,C)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD DD DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(2,1,2)),DSN=&GOSET(GO)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=X,DCB=(RECFM=FB,BLKSIZE=3509)\n//  PEND\n//*\n//*\n// EXEC ASMHCL,PARM.C='OBJECT,NODECK,XREF(FULL)',\n// PARM.L=(XREF,LET,LIST,'AMODE=31','RMODE=24')\n//C.SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//*          DD DSN=SYS1.AMACLIB,DISP=SHR\n//           DD DSN=SYS1.MODGEN,DISP=SHR\n//C.SYSIN DD  *\nEDHSM    CSECT\n         USING *,R12,R2\n         SAVE  (14,12)\n         LR    R12,R15\n         LR    R2,R15\n         A     R2,L4096       BASE 2\n*\n         LA    R0,4095\n         GETMAIN R,LV=(0)\n         ST    R1,8(R13)     LINK SAVE AREAS\n         ST    R13,4(R1)     SAVE THE CALLER'S R13\n         LR    R13,R1\n         USING EDWA,R13\n*\n         L     R4,16           ---> CVT...\n         USING CVT,R4\n         L     R9,CVTHSM       POINTS TO QCT\n         L     R8,12(R9)       POINTS TO MWE\n         MVC   HDR(80),SPACES\n         LA    R9,HDR\n         MODESET MODE=SUP,KEY=ZERO\nHSMAGAIN LTR R8,R8\n         BZ    HSMENDX\n         LA    R9,8(R9)\n         MVC   0(8,R9),76(R8)   JOBNAME\n         L     R8,0(R8)\n         B     HSMAGAIN\nHSMENDX  MODESET MODE=PROB,KEY=NZERO\n***********************************\n         LA    1,LABEL15                  GO AMODE 24\n         BSM   0,1\nLABEL15  DS    0H\n***********************************\n         OPEN  (SYSPRINT,OUTPUT)\n         PUT   SYSPRINT,HDR\n         CLOSE (SYSPRINT)\n***********************************\n         L     1,LABEL13                  GO AMODE 31\n         BSM   0,1\nLABEL13  DC    A(LABEL14+X'80000000')\nLABEL14  DS    0H\n***********************************\n*\n         LA    R0,4095\n         LR    R1,R13\n         L     R13,4(R13)     RESTORE THE CALLER'S R13\n         FREEMAIN R,LV=(0),A=(1)\n         RETURN (14,12),RC=0  RETURN TO OUR CALLER\n*\nL4096    DC    F'4096'\n         TITLE 'MISCELLANEOUS CONSTANTS'\n*        PRINT NOGEN\n         TITLE 'REGISTER EQUATES'\n***********************************************************************\n*        REGISTER EQUATES                                             *\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         LTORG\nSPACES   DC    CL80' '\n*        PRINT NOGEN\nSYSPRINT DCB   DSORG=PS,MACRF=(PM),DDNAME=SYSPRINT,LRECL=80,RECFM=FB,  X\n               BLKSIZE=80\n         DCBD  DSORG=PS,DEVD=DA\n         PRINT GEN\n         CVT   DSECT=YES,LIST=NO\nEDWA     DSECT\nSAVEAREA DS    18F\nHDR      DS    CL80\n         END\n/*\n//L.SYSLMOD  DD   DISP=SHR,DSN=C4ADMDM.PROD.LKED\n//L.SYSIN    DD   *\n  NAME EDHSM(R)\n//*\n//* EXEC PGM=EDHSM\n//*TEPLIB DD DISP=SHR,DSN=C4ADMDM.PROD.LOAD\n//*YSPRINT DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZDFC4": {"ttr": 5906, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x95\\x18_\\x00\\x95\\x18\\x8f\\t \\x00#\\x00\"\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1995-07-04T00:00:00", "modifydate": "1995-07-07T09:20:00", "lines": 35, "newlines": 34, "modlines": 0, "user": "ED115DM"}, "text": ")ATTR\n+ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(GREEN)\n$ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(YELLOW)\n@ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(BLUE)\n! TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(RED)\n% TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n\u00a2 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(PINK)\n| TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(WHITE)\n)BODY\n%------------ Job Display Facility -------------------------------------\n+\n% Displays batch jobs (BAT),started tasks (STC),TSO users (TSU), or ALL these\n+\n% Repeats display after RPTSEC secs else u have to press ENTER or END\n+\n%    The prefix selector may be used to restrict the jobs displayed.\n%    Eg. prefix = ED means display only those starting ED.\n%    Nb * is a wild card.\n+\n%    OPTN may be Q (display classes)\n%     \"          J (display job numbers)\n%     \"          S (prepare to sort displayed data)\n%     \"          0 (only display if CPU activity)\n+\n%    Selectable options (down left side) are :\n%                S (display job info)\n%     \"          F (select Flasher for job)\n%     \"          C (cancel job)\n+\n%  FOR NORMAL HELP DISPLAY                     - DEPRESS THE%ENTER KEY\n+\n%  TO RETURN TO THE ZDF DISPLAY                - DEPRESS THE% END  KEY\n)PROC\n  &CONT = ZDFHELP\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ZDFDAT": {"ttr": 5908, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x00\\x95\\x19\\x1f\\x00\\x963\\x9f\\x12R\\x00\\x12\\x00\\x11\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "1995-07-10T00:00:00", "modifydate": "1996-12-04T12:52:00", "lines": 18, "newlines": 17, "modlines": 0, "user": "ED115DM"}, "text": ")ATTR\n  @  TYPE(OUTPUT) INTENS(LOW) COLOR(YELLOW)\n  !  TYPE(OUTPUT) INTENS(LOW) COLOR(GREEN)\n  %  TYPE(TEXT) INTENS(LOW) COLOR(TURQ)\n  +  TYPE(TEXT) INTENS(LOW) COLOR(RED)\n)BODY\n%------------------------ Extended display -------------------------------------\n%SORT +#%=>_ST         %COMMAND INPUT  ==>_ZCMD               %SCROLL   =>_AMT %\n%    ASID T JOB      PSTEP    STEP     STATUS      MEM   CPP DP  PG SWP      CPU\n+       1 2 3        4        5        6             7     8  9  10  11       12\n)MODEL\n_Z  @Z   @Z@Z       @Z       @Z       @Z  !Z   @Z     @Z    @Z @Z  @Z  @Z\n)INIT\n .CURSOR=ST\n  &AMT=CSR\n  &ST = ''\n  &VARS='(PIKA ASID T JOB PSTEP STEP ST1 ST2 MEMORY CPP DP PG SWP CPU)'\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ZDFESA": {"ttr": 6146, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01c\\x00\\x00\\x00\\x94'\\x9f\\x00\\x99\\x12?\\t%\\x06x\\x07\\xa4\\x06x\\xe7\\xe2\\xc4\\xd4\\xd5@@@@@\"", "ispf": {"version": "01.99", "flags": 0, "createdate": "1994-10-06T00:00:00", "modifydate": "1999-05-03T09:25:00", "lines": 1656, "newlines": 1956, "modlines": 1656, "user": "XSDMN"}, "text": "//XSDMNZDF  JOB MSGCLASS=X,CLASS=Q,NOTIFY=XSDMN\n//*\n//*\n//ASMHCL  PROC\n//C      EXEC  PGM=IEV90,PARM=OBJECT,REGION=5M\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  SYSOUT=B,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))\n//SYSPRINT DD SYSOUT=X,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//L    EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL',REGION=2M,COND=(8,LT,C)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD DD DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(2,1,2)),DSN=&GOSET(GO)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=X,DCB=(RECFM=FB,BLKSIZE=3509)\n//  PEND\n//*\n// EXEC ASMHCL,PARM.C='OBJECT,NODECK,XREF(FULL)',\n// PARM.L=(XREF,LET,LIST,'AMODE=31','RMODE=24',RENT,REUS)\n//C.SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//*          DD DSN=SYS1.AMACLIB,DISP=SHR\n//           DD DSN=SYS1.MODGEN,DISP=SHR\n//C.SYSIN DD  *\n***********************************************************************\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n* EXECUTION DISPLAY FACILITY (ZDF)  R8  R9   R11    WORKING REGS      *\n*                                                                     *\n* ABSTRACT: DISPLAY STATUS OF JES2 JOBS, LOGONS, & STARTED TASKS.     *\n*                                                                     *\n***********************************************************************\n*\n*    JOB       JOB NAME OF MEMORY\n*    STEP      FOR BATCH JOBS WILL ALWAYS BE INIT.\n*              FOR TSO JOBS AND STARTED TASKS WILL BE ACTUAL STEP NAME.\n*    P         REASON CODE FOR SWAP OUT FROM OUCBPFL.\n*              THE FOLLOWING ARE THE REASON CODES DISPLAYED:\n*                U  0A MEMORY WAS UNILATERALLY SWAPPED\n*                X  09 MEMORY WAS EXCHANGE SWAPPED\n*                E  08 AN ENQHOLD HAS BEEN RECEIVED FOR THIS MEMORY\n*                S  07 MEMORY REQUESTED SWAP OUT\n*                D  06 INVOLUNTARY SWAPOUT DUE TO DETECTED WAIT\n*                R  05 SWAPOUT CAUSED BY REAL STORAGE SHORTAGE\n*                A  04 SWAPOUT CAUSED BY AUX. STORAGE SHORTAGE\n*                L  03 MEMORY SWAPPED OUT BY MS6 LONG WAIT DETECTION\n*                I  02 MEMORY IS IN INPUT TERMINAL WAIT\n*                T  01 MEMORY IS IN OUTPUT TERMINAL WAIT\n*                ?     UNABLE TO DETERMINE SWAPOUT REASON.\n*    MEMORY    CURRENT AMOUNT OF MEMORY ALLOCATED TO THIS MEMORY.\n*    WSS       SRM'S VIEW OF THE WORKING SET SIZE FOR THIS MEMORY.\n*    T         TYPE OF MEMORY (S=STC OR BATCH, T=TSO USER)\n*    LOC       CURRENT LOCATION OF THIS MEMORY:\n*                IN  SWAPPED IN AND ELIGIBLE TO RUN.\n*                OUT SWAPPED OUT BUT READY TO RUN.\n*                WT  SWAPPED OUT AND NOT READY TO RUN.\n*                N/S SWAPPED IN AND V=R OR NON-SWAPPABLE STATUS.\n*                <-> TRANSITIONING BETWEEN STATES.\n*    DP        DISPATCHING PRIORITY OF MEMORY (IN HEX).\n*    PG        PERFORMANCE GROUP.\n*    SC        NUMBER OF TIMES THE MEMORY HAS BEEN SWAPPED IN THE\n*              CURRENT TRANSACTION.\n*    WMR       CURRENT SRM WORKLOAD MANAGER RECOMMENDATION VALUE.\n*              (ACTUALLY THE WORKLOAD LEVEL AT WHICH THIS MEMORY IS\n*               OPERATING).\n*    CPU       CPU TIME IN SECONDS USED BY THE MEMORY (SRB PLUS TASK).\n*\n***********************************************************************\n*\n*  CHANGE LOG\n*\n*  OCT 94   ESA UPDATE      - DM WA EDUC DEPT\n*\n***********************************************************************\nZDF      CSECT\n         USING *,R12,R2\n         SAVE  (14,12)\n         LR    R12,R15\n         LR    R2,R15\n         A     R2,L4096       BASE 2\n*\n         LA    R0,4095\n         GETMAIN R,LV=(0)\n         LR    R5,R1\n         LA    R0,4095\n         GETMAIN R,LV=(0)\n         ST    R1,8(R13)     LINK SAVE AREAS\n         ST    R13,4(R1)     SAVE THE CALLER'S R13\n         LR    R13,R1\n         USING EDWA,R13\n         ST    R5,CPUTABI\n*\nZDFAGAIN XC    ISPARMS(40),ISPARMS\n*\n         L     R15,ISPLINK\n         CALL  (15),(VLIBDEF,VISP,VDATASET,VPANELS),VL,MF=(E,ISPARMS)\n*                                         INIT EDWA DSECT AREAS\n         XC    MASTCPUS,MASTCPUS\n         XC    HOLDTOD,HOLDTOD\n         XC    OLDTOTL,OLDTOTL\n         XC    OLDNO,OLDNO\n         USING CPUTABL,R5\n         L     R5,CPUTABI\n         MVC   CPUTAB(26),SPACES\n         MVI   CPUTABE,X'FF'\n         DROP  R5\n         MVC   TABAREA(80),SPACES\n         MVC   ZDFTSO(18),SPACES\n*\nSHOWAGIN DS    0H\n         MVI   HSMFLAG,C'0'\n         BAL   R7,SHOWRMF     DISPLAY THE RESOURCE STUFF\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDELETE,ASTER),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBEND,ZDFTABLE),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VLIBDEF,VISP,VDATASET,VPANCLR),VL,MF=(E,ISPARMS)\n*\n         CLI   ZDFRPT,C'0'                BRANCHING OUT OF PGM\n         BE    ZENDTEST\n*\nAUTCONT  MVC   VQWORK(32),SPACES\n         MVC   VQWORK(12),VDELAY\n         MVC   VQWORK+10(2),ZDFRPT\n*\n*        L     R15,ISPLINK\n*        CALL (15),(VSELECT,L48,VADDALL),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL (15),(VSELECT,L64,VADDSYSP),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL (15),(VSELECT,L32,VQWORK),VL,MF=(E,ISPARMS)\n*\n         C     R15,FZEROS                WAS ATTN HIT ??\n         BNE   ZENDTEST\n*\n         L     R15,ISPLINK\n         CALL (15),(VSELECT,L48,VDELSYSP),VL,MF=(E,ISPARMS)\n*\n         LA    R11,0\n         B     ZENDC\nZENDTEST LA    R11,8                      B ZDFEND COMING UP\nZENDC    DS    0H\n*\n         C     R11,FZEROS\n         BNE   ZDFEND\n*\n         B     ZDFAGAIN\nZDFEND   DS    0H\n         LA    R0,4095\n         L     R1,CPUTABI\n         FREEMAIN R,LV=(0),A=(1)\n         LR    R1,R13\n         L     R13,4(R13)     RESTORE THE CALLER'S R13\n         FREEMAIN R,LV=(0),A=(1)\n         RETURN (14,12),RC=0  RETURN TO OUR CALLER\n*\nL4096    DC    F'4096'\n*****************************************************\n*                                                   *\n*     SHOWRMF ROUTINE START                         *\n*                                                   *\n*****************************************************\nSHOWRMF  DS    0H\n         ST    R7,ZDF7HOLD SAVE THE RETURN ADDRESS\n*\n         MVC   SELCODE(3),SPACES  SET SELECTION CODE TO SPACES\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDELETE,ASTER),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,SUP,SU,CHAR,L16),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,SERP,SER,CHAR,L25),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,ACTLINEP,TABAREA,CHAR,L37),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,STATP,STATUS,CHAR,L5),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,ACTLINBP,SIZE,CHAR,L34),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,CMDLINEP,ZDFCMD,CHAR,L3),VL,MF=(E,ISPARMS)\n         MVC   ZDFCMD(3),SPACES\n*\n*        L     R15,ISPLINK\n*        CALL  (15),(VDEF,CMDWHERE,WHERE,CHAR,L3),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,CMDRPT,ZDFRPT,CHAR,L2),VL,MF=(E,ISPARMS)\n         MVC   ZDFRPT(2),SPACES\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,CMDPREEP,ZDFPRE,CHAR,L8),VL,MF=(E,ISPARMS)\n         MVC   ZDFPRE(8),SPACES\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,CMDJES3,ZDFJS3,CHAR,L1),VL,MF=(E,ISPARMS)\n         MVC   ZDFJS3(1),SPACES\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,CMDCPU,ZDFCPU,CHAR,L4),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,CMDAFC,ZDFAFC,CHAR,L4),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,CMDPAG,ZDFPAG,CHAR,L4),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,CMDTPR,ZDFTPR,CHAR,L4),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,CMDUIC,ZDFUIC,CHAR,L4),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,CMDMGB,ZDFMGB,CHAR,L4),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,CMDTSO,ZDFTSO,CHAR,L18),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,CMDJOBN,ZDFJBN,CHAR,L4),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,CMDJOBC,ZDFJBC,CHAR,L1),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,CMDJOBA,ZDFJBA,CHAR,L8),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,PIKP,SELCODE,CHAR,L1),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(VDEF,HSMP,HSMINFO,CHAR,L80),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBCR,ZDFTABLE,NULL,DANAMLST,NOW),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBVCLEAR,ZDFTABLE),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL (15),(VGET,CMDPREEP,SHARED),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL (15),(VGET,CMDJES3,SHARED),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL (15),(VGET,CMDRPT,SHARED),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL (15),(VGET,CMDLINEP,SHARED),VL,MF=(E,ISPARMS)\n*\n         CLC   ZDFCMD(3),SPACES\n         BNE   FRPT\n         MVC   ZDFCMD(3),BAT    INITIAL COMMAND - SHOW EVERYTHING\n*\nFRPT     CLC   ZDFRPT(2),SPACES\n         BNE   FINDCVT\n         MVI   ZDFRPT,C'0'\n*\nFINDCVT  DS    0H\n*\n**  LOOK THRU SRM CONTROL BLOCKS TO BUILD HEADER INFO\n*\nBUILDHDR DS    0H\n         L     R4,16           ---> CVT...\n         USING CVT,R4\n         ST    R4,CVTPTRX\n         L     R7,CVTPCCAT\n         ST    R7,PCCATPTR\n         L     R7,CVTHSM\n         ST    R7,HSMACT\n         L     R7,CVTASVT       TO ASVT\n         ST    R7,ASVTPTR       TO ASVT\n         L     R7,CVTRCEP\n         ST    R7,RCEHOLD\n         L     R7,CVTOPCTP     ---> RMCT... 1ST MODULE OF IRARMCNS\n         ST    R7,RMCTPTR\n         L     R7,CVTSMCA\n         ST    R7,SMCAPTR\n         L     R7,CVTCSD\n         ST    R7,CSDPTR\n         DROP  R4\n*\n         L     R4,RMCTPTR\n         L     R5,4(R4)        ---> IRACCT IN RMCT\n         LH    R6,102(R5)      **  CPU UTILIZATION **\n         CVD   R6,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  ZDFCPU,WORK+6(2)     ...AND EDIT\n*\n         USING RMCT,R4            ADDRESS RMCT\n         L     R7,RMCTRCT         LOAD RCT ADDRESS\n         USING RCTDSECT,R7        ADDRESS RCT\n*\n         L     R9,M16\n         LA    R8,0\n         D     R8,RMCTADJC     **  CPU ADJUSTMENT                **\n         CVD   R9,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  SU-1(5),WORK+5(3)  ...AND EDIT\n         MVI   SU+4,C'/'\n         L     R9,CSDPTR\n         USING CSD,R9\n         LH    R8,CSDCPUOL         R8 = CPUS ONLINE\n         CVD   R8,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  SU+5(1),WORK+6(2)  ...AND EDIT\n         MVC   SU+6(1),SPACES\n         LA    R8,0\n         IC    R8,CSDPLPN          R8 = PRSM #\n         CVD   R8,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  SU+7(1),WORK+6(2)  ...AND EDIT\n         MVC   SU+8(1),SPACES\n         LH    R8,RCVCPUA      **  CPU UTILIZATION **\n         CVD   R8,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  SU+9(4),WORK+6(2)    ...AND EDIT\n         DROP  R9\n*\n         L     R9,CVTPTRX\n         S     R9,=F'40'\n         MVC   SER(8),0(R9)\n         MVC   SER+8(1),SPACES\n*\n         L     R9,SMCAPTR\n         USING SMCABASE,R9\n         MVC   SER+9(4),SMCASID\n         DROP  R9\n         MVC   SER+13(1),SPACES\n*\n         L     R9,PCCATPTR\n         L     R9,0(R9)\n         MVC   SER+14(6),4+2(R9)\n         MVC   SER+20(1),SPACES\n         MVC   SER+21(4),10+2(R9)\n*\n         LH    R6,RCVAFQA      **  AVERAGE AVAILABLE FRAME COUNT **\n         CVD   R6,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  ZDFAFC,WORK+6(2)     ...AND EDIT\n*\n         LH    R6,RCVPTR       ** PAGE FAULT RATE **\n         CVD   R6,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  ZDFPAG,WORK+6(2)     ...AND EDIT\n*\n         LH    R6,RCVPAGRT     ** TPR **\n         CVD   R6,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  ZDFTPR,WORK+6(2)     ...AND F ' DED'\n*\n         LH    R6,RCVUICA      ** UNREFERENCED INTERVAL COUNT **\n         CVD   R6,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  ZDFUIC,WORK+6(2)     ...AND EDIT\n*\n         L     R6,RCEHOLD      ** MEGABYTES **\n         L     R5,4(R6)\n         SRL   R5,8                * 4096 / 1024 /1024\n         CVD   R5,WORK             CONVERT TO DECIMAL...\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  ZDFMGB,WORK+6(2)     ...AND EDIT\n*\n         L     R7,RMCTDMDT     ** TSO P1/2 3 4 DOMAIN INFO **\n         SR    R15,R15         CLEAR A REG\n         LA    R5,13           ** PERFORM GROUP SKIP **\n         LA    R14,ZDFTSO      POINT TO FIRST DOMAIN ENTRY\n         USING DMDT,R7\nDOTSO    LA    R7,DMDTLEN(R7)  BUMP PAST FIRST DOMAIN\n         BCT   R5,DOTSO\n         LA    R5,3            NUMBER OF DOMAIN ENTRIES TO PROCESS\nDODMNS   DS    0H\n         LH    R15,DMDTMPLT    GET MULTI-PROGRAMMING LEVEL TARGET\n         CVD   R15,WORK        CHANGE IT TO DECIMAL\n         OI    WORK+7,X'0F'    FIX THE SIGN\n         UNPK  1(2,R14),WORK+6(2) MOVE IT TO THE OUTPUT AREA\n         MVI   3(R14),C':'\n         LH    R15,DMDTCMPL    GET CURRENT MPL\n         CVD   R15,WORK        CHANGE IT TO DECIMAL\n         OI    WORK+7,X'0F'    FIX THE SIGN\n         UNPK  4(2,R14),WORK+6(2) MOVE IT TO THE OUTPUT AREA\n         LA    R14,6(R14)     POINT TO NEXT DOMAIN ENTRY\n         LA    R7,DMDTLEN(R7)  BUMP PAST THIS DOMAIN\n         C     R5,=F'3'\n         BNE   TOBCT\n         LA    R7,DMDTLEN(R7)  BUMP PAST THIS DOMAIN\n*    PAST DOMAIN EX TSO P2\n         C     R7,RMCTDMDE\n         BH    DOMFAIL         MIGHT DO THIS IF NOT #3 OR IPS CHANGE\nTOBCT    BCT   R5,DODMNS       GO PROCESS ANOTHER\n*\nDOMFAIL  CLI   ZDFJS3,C'Q'\n         BNE   HBAL\n*\nHD3      L     R15,ISPLINK                                       OPT Q\n         CALL  (15),(VSELECT,L64,VALLC),VL,MF=(E,ISPARMS)        OPT Q\n*                                                                OPT Q\n         L     R0,=F'4096'           ** SET TO 4096              OPT Q\n         GETMAIN R,LV=(0)            ** OBTAIN STORAGE AREA      OPT Q\n         ST    R1,QSAVEUT                                        OPT Q\n         LA    R8,MVPARM                                         OPT Q\n         LA    R9,SYSUTF                                         OPT Q\n         SR    R8,R9                                             OPT Q\n         BCTR  R8,0                                              OPT Q\n         EX    R8,MVPARM                                         OPT Q\n*        MVC   0(102,R1),SYSUTF      MOVE DCB INTO GETMAIN AREA  OPT Q\n         LR    R5,R1                                             OPT Q\n         OPEN  ((R5),INPUT)                                      OPT Q\n         L     R0,=F'4096'      ** ALLOCATE FLASHER JCT AND OPEN OPT Q\n         GETMAIN R,LV=(0)       ** OBTAIN STORAGE AREA AND INIT  OPT Q\n         ST    R1,R1QAREA                                        OPT Q\n         ST    R1,QAREAOFF                                       OPT Q\n         MVC   0(8,R1),SPACES                                    OPT Q\n         LA    R1,0                                              OPT Q\n         ST    R1,EOFMARK            ** PUT 0 IN EOF MARKER      OPT Q\n*                                                                OPT Q\nHBAL     DS    0H\n         LA    R8,0\n         ST    R8,CPUTOTL\n         ST    R8,CPUNO\n         L     R8,RMCTTOD        PICK UP TIME OF DAY FROM RMCT.  (SU)\n         ST    R8,HTOD\n         S     R8,HOLDTOD        CALC DELTA TOD\n         SRDL  R8,32             MOVE INTO R9 FOR DIVIDE.\n         D     R8,L1024          CONVERT TO SECONDS.\n         ST    R9,DELTTOD        ST DELTA TOD HERE\n         LTR   R9,R9\n         BNZ   HBALC\n         STIMER WAIT,BINTVL=SLEEP\n         B     HBAL\nHBALC    L     R8,HTOD\n         ST    R8,HOLDTOD        HTOD --> HOLDTOD\n*===============================================================\nTOPASCB  DS    0H\n         L     R5,ASVTPTR       TO ASVT\n         USING ASVT,R5\n         L     R3,ASVTMAXU      MAXIMUM NUMBER OF ENTRIES\n         LA    R4,ASVTFRST      FIRST ENTRY MINUS 4.\n         ST    R4,ASCBSAVE\n*********************************************\n*                        R2 IS EDWA DSECT   *\n*                        R3 POINTS TO OUXB  *\n*                        R4 POINTS TO RMCT  *\n*   ASCB LOOP STARTS     R5 POINTS TO ASCB  *\n*                        R6 POINTS TO OUCB  *\n*                                           *\n*********************************************\nASCBLOOP ST    R3,ASCOUNT\n         L     R4,ASCBSAVE\n         LA    R4,4(,R4)        BUMP BY FOUR.\n         ST    R4,ASCBSAVE\n         ICM   R5,B'1111',0(R4) LOAD THE ASCB POINTER\n         BM    NEXTAS           BRANCH IF BAD PTR.\n*\n         L     R4,RMCTPTR\n         USING ASCB,5\n         L     R3,ASCBOUXB\n         USING OUXB,R3\n         L     R6,ASCBOUCB       LOAD PTR TO OUCB\n         USING OUCB,6\n*\n*        LH    R1,ASCBASID      PICK UP ASID\n*        CVD   R1,DOUBLEWD\n*        MVC   WORK6(6),EDIT6\n*        ED    WORK6(6),DOUBLEWD+5\n*        MVC   ASID(4),WORK6+2  SET ASID\n         LA    R7,0\n         IC    R7,ASCBASID\n         SRL   R7,4\n         LTR   R7,R7\n         BZ    DO2\n         IC    R8,HEX(R7)\n         STC   R8,ASID\nDO2      IC    R7,ASCBASID\n         N     R7,=F'15'\n         IC    R8,HEX(R7)\n         STC   R8,ASID+1\n         IC    R7,ASCBASID+1\n         SRL   R7,4\n         IC    R8,HEX(R7)\n         STC   R8,ASID+2\n         IC    R7,ASCBASID+1\n         N     R7,=F'15'\n         IC    R8,HEX(R7)\n         STC   R8,ASID+3\n*\n*\n         LM    R8,R9,ASCBEJST   LOAD UP EJST (CPU TIME - TASK TYPE)\n         SRDL  R8,12            TO GET MICROSEC\n         D     R8,L10000        TO GET HUNDREDTHS AND MICROS\n         LM    10,R11,ASCBSRBT  LOAD UP SRB TIME.\n         SRDL  R10,12           TO GET MICROSEC\n         D     R10,L10000       TO GET HUNDREDTHS AND MICROS\n         AR    R9,R11           ADD TOGETHER.\n         ST    R9,CPUHOLD\n         L     R8,CPUTOTL\n         AR    R8,R9\n         ST    R8,CPUTOTL\n         L     R8,CPUNO\n         A     R8,L1\n         ST    R8,CPUNO\n*\n         TM    OUCBYFL,OUCBLOG  CHECK FOR TSO.\n         BO    ITISATSO         YES, IT IS TSO.\n         CLC   ASCBJBNI(4),FZEROS  JOBNAME POINTER FOR BATCH JOBS\n         BNE   ITISABAT         BRANCH IF ZERO POINTER.\n         CLC   ASCBJBNS(4),FZEROS  JOBNAME POINTER FOR STARTED TASKS\n         BNE   ITISASTC         BRANCH IF STARTED TASK.\n         B     NEXTAS           NO, SO SKIP THIS.\n*\nITISABAT DS    0H\n         MVI   TYPE,C'B'\n         CLC   ZDFCMD(3),ALL     DISPLAY EVERYTHING\n         BE    DISPALL          YES\n         CLC   ZDFCMD(3),BAT     DISPLAY BATCH\n         BE    DISPALL          YES\n         B     NEXTAS           NO, SO SKIP THIS.\n*\nITISATSO DS    0H\n         MVI   TYPE,C'T'\n         CLC   ZDFCMD(3),ALL     DISPLAY EVERYTHING\n         BE    DISPALL          YES\n         CLC   ZDFCMD(3),TSU     DISPLAY TSO\n         BE    DISPALL          YES\n         B     NEXTAS           NO, SO SKIP THIS.\n*\nITISASTC DS    0H\n         MVI   TYPE,C'S'\n         CLC   ZDFCMD(3),ALL     DISPLAY EVERYTHING\n         BE    DISPALL          YES\n         CLC   ZDFCMD(3),STC     DISPLAY STARTED TASKS\n         BE    DISPALL          YES\n         B     NEXTAS           NO, SO SKIP THIS.\n*\nDISPALL  MVC   PSTEP(8),SPACES\n         MVC   STEP(8),SPACES\n         MVC   TYPEA(1),TYPE\n         MVC   JOB(8),=CL8'STARTING' TO BYPASS GARBAGE\n         ICM   R8,B'1111',ASCBJBNI\n         BZ    NOTJOB           BRANCH IF ZERO POINTER.\n*************\n*   JOB     *\n*************\n         MVC   JOB,0(R8)        OTHERWISE, MOVE IN JOBNAME.\n         LA    R15,8\n         LA    R11,ZDFPRE       R8 POINTS TO JOB\nN0       CLC   0(1,R11),SPACES\n         BE    GOJ\n         CLC   0(1,R11),ASTER\n         BE    N0PASS\n         CLC   0(1,R11),0(R8)\n         BNE   NEXTAS\nN0PASS   LA    R11,1(R11)\n         LA    R8,1(R8)\n         BCT   R15,N0\n*\nGOJ      BAL   R10,FASTQ      **  CHECK OPTION Q J **\n         ICM   R7,B'1111',ASCBCSCB    POINTER TO THE TOP CSCB.\n         BZ    STEPOK           BRANCH IF CSCB POINTER IS ZERO.\n         USING CHAIN,R7\n         MVC   STEP(8),CHKEY\n         CLI   ZDFJS3,C'Q'\n         BNE   STEPOK\n*\nSTEPLOOP L     R7,CHPTR           FIND PROC STEP X CSCB         OPT Q\n         LTR   R7,R7                                            OPT Q\n         BZ    STEPOK                                           OPT Q\n         CLC   JOB(8),CHKEY                                     OPT Q\n         BNE   STEPLOOP                                         OPT Q\n         MVC   PSTEP(8),CHPROCSN                                OPT Q\n         MVC   STEP(8),CHSTEP                                   OPT Q\n         B     STEPOK                                           OPT Q\n         DROP  R7\n**************\n* STC OR TSU *\n**************\nNOTJOB   ICM   R8,B'1111',ASCBJBNS\n         BZ    NEXTAS\n*\n         CLC   MASTER(8),0(R8)    *MASTER* TASK\n         BNE   MTESTS             NO - CHECK NEXT\n*\n         LA    R9,0             ** MASTER DETECTED , CLEAR FLDS **\n         ST    R9,MASTFLG         CLEAR MASTFLG\n         XC    MASTFMCT,MASTFMCT  CLEAR FRAME COUNT ACCUMULATOR\n         XC    MASTWSS,MASTWSS    CLEAR WORKING SET SIZE ACCUMULATOR\n         XC    MASTCPU,MASTCPU    CLEAR CPU ACCUMULATOR\n         XC    MASTEXCP,MASTEXCP\n         B     MPROCESS           PROCESS FOR SYSTEM TASK\n*\nMTESTS   CLC   ZDFPRE(1),SPACES   SEARCH SPECIFIC\n         BNE   NOTMAST            YES SO NOT A SUB MAST\n*\n         LA    R11,MASTER+8\n         LA    R9,16\nMTEST    CLC   0(8,R11),0(R8)\n         BE    MPROCESS\n         LA    R11,8(R11)\n         BCT   R9,MTEST\n         B     NOTMAST\nMPROCESS L     R9,MASTFLG         FOUND A MATCH WITH SUB MAST NAMES\n         LA    R9,1(R9)\n         ST    R9,MASTFLG\n*                                                   *\n*     MASTPROC ROUTINE START                        *\n*                                                   *\nMASTLOOP L     R9,OUXBFMCT       LOAD OUCBWSS\n         SLL   R9,2             TIMES FOUR FOR K.\n         A     R9,MASTFMCT       ADD TO SYSTEM ACCUMULATION\n         ST    R9,MASTFMCT       STORE FOR ACCUMULATION\n*\n         L     R9,ASCBIOSC      LOAD IO COUNT\n         A     R9,MASTEXCP       ADD TO SYSTEM ACCUMULATION\n         ST    R9,MASTEXCP\n*\n         L     R9,CPUHOLD\n         A     R9,MASTCPU       ADD TO SYSTEM ACCUMULATION\n         ST    R9,MASTCPU       STORE FOR ACCUMULATION\n*\n         L     R9,MASTFLG       TEST ALL SYSTEM TASK BITS\n         S     R9,=F'17'\n         LTR   R9,R9\n         BNZ   NEXTAS           PROCESS NEXT ASCB IF NOT ALL ON\n*\n*  ACCUMULATED ALLOCATED FRAME COUNT (MEMORY)\n         MVC   ASID(4),SPACES   *** PRINT OUT MAST ACCUMULATION **\n         MVC   WHERE(3),=CL3'***'\n         L     R7,MASTFMCT      LOAD FRAME COUNT ACCUMULATION\n         CVD   R7,WORK          CONVERT TO DECIMAL FORMAT.\n         MVC   SIZE(6),=X'2020202120D2' GET READY FOR EDIT.\n         ED    SIZE-1(6),WORK+5 EDIT THE RESULT.\n*\n         L     R7,MASTEXCP      LOAD FRAME COUNT ACCUMULATION\n         CVD   R7,WORK          CONVERT IT TO DECIMAL.\n         MVC   PSTEP(8),EDIT8\n         ED    PSTEP(8),WORK+4 EDIT THE OUTPUT FIELD.\n         L     R7,MASTCPU       LOAD CPU TIME ACCUMULATION\n         CVD   R7,WORK          CONVERT IT TO DECIMAL.\n         MVC   CPUTIME(8),=X'20202021204B2020' MOVE IN THE EDIT MASK.\n         ED    CPUTIME-1(9),WORK+4 EDIT THE RESULT.\n*\n         L     R9,DELTTOD\n         LTR   R9,R9             CHK TO SEE IF ANYTHING IS THERE\n         BNP   SWAPG1            CHECK DIVIDE BY NON-ZERO\n         SR    R8,R8\n         L     R9,MASTCPU\n         S     R9,MASTCPUS       DELTA CPU\n         LTR   R9,R9\n         BNP   SWAPG1            NO WRITE IF ZERO\n         M     R8,=F'100'        PERCENT\n         SR    R8,R8\n         D     R8,DELTTOD        DELTA CPU / DELTA TOD\n         CVD   R9,WORK           *\n         MVC   LINEWSS,=X'2021204B20' *\n         ED    LINEWSS-1(6),WORK+5 *\nSWAPG1   MVC   JOB(8),MASTER  SIGNIFY *MASTER* TASKS\n         BAL   R7,OUTMSG        MOVE THE LINE TO THE 3270 BUFFER.\n         L     R8,MASTCPU\n         ST    R8,MASTCPUS\n*                                                   *\n*     MASTPROC ROUTINE END                          *\n*                                                   *\n         B     NEXTAS           PROCESS NEXT ASCB\nNOTMAST  EQU   *\n*\n         MVC   JOB,0(R8)        MOVE IN JOBNAME FOR S/M/L MEMORIES.\n         LA    R15,8\n         LA    R11,ZDFPRE       R8 POINTS TO JOB\nM0       CLC   0(1,R11),SPACES\n         BE    GOTSOSTC\n         CLC   0(1,R11),ASTER\n         BE    M0PASS\n         CLC   0(1,R11),0(R8)\n         BNE   NEXTAS\nM0PASS   LA    R11,1(R11)\n         LA    R8,1(R8)\n         BCT   R15,M0\n*\nGOTSOSTC ICM   R7,B'1111',ASCBCSCB    POINTER TO THE TOP CSCB.\n         BZ    STEPOK           BRANCH IF CSCB POINTER IS ZERO.\n         BAL   R10,FASTQ     ** OPTION Q J PROCESSING  **\n*\n         CLI   4(R7),X'04'      CHECK TO SEE IF BATCH JOB OR S/M/L\n         BE    STORMT           JOB IS START OR MOUNT\n         CLI   4(R7),X'0C'      CHECK TO SEE IF BATCH JOB OR S/M/L\n         BE    STORMT           JOB IS START OR MOUNT\n         MVC   STEP(8),16(R7)   PICK UP CHCLS.\n         B     STEPOK           BYPASS FURTHER CSCB PROCESSING.\nSTORMT   MVC   STEP(8),8(R7)    PICK UP CHKEY.\n**************\n* ALL        *\n**************\nSTEPOK   CLC   JOB(8),=CL8'INIT' IS IT A 'DRY' INIT??           KMT\n         BE    NEXTAS           YEP...KISS OFF                  KMT\n         CLI   ZDFJS3,C'Q'\n         BNE   IOCONT\n         CLI   ZDFCMD,C'B'\n         BNE   IOCONT\n         B     XIOC             BRANCH IF BATCH AND OPTION Q\n*\nIOCONT   L     R7,ASCBIOSC      LOAD IO COUNT           NOT BATCH AND Q\n         CVD   R7,WORK          CONVERT IT TO DECIMAL.\n         MVC   PSTEP(8),EDIT8\n         ED    PSTEP(8),WORK+4 EDIT THE OUTPUT FIELD.\n         CLC   PSTEP(3),SPACES\n         BE    PSTCONT\n         L     R7,ASCBIOSC      LOAD IO COUNT\n         SRL   R7,10            DIV BY 1024\n         CVD   R7,WORK          CONVERT IT TO DECIMAL.\n         ED    PSTEP(8),WORK+4 EDIT THE OUTPUT FIELD.\n         MVC   PSTEP+2(6),=X'2020202120D2' GET READY FOR EDIT.\n         ED    PSTEP+1(6),WORK+5\nPSTCONT  SR    R7,R7            PREPARE FOR THE INSERT CHARACTERS.\n         IC    R7,ASCBIODP\n         SRL   R7,4             SHIFT OUT LOW ORDER NIBBLE.\n         IC    R8,HEX(R7)       PICK THE EBCDIC CHARACTER.\n         STC   R8,PSTEP         STORE INTO OUTPUT FIELD.\n         IC    R7,ASCBIODP\n         N     R7,=F'15'        TURN OFF HIGH ORDER NIBBLE.\n         IC    R8,HEX(R7)       LOAD THE EBCDIC CHARACTER.\n         STC   R8,PSTEP+1       STORE INTO OUTPUT LINE.\n*\n*   FILL IN WORKING SET SIZE\n*\nXIOC     L     R9,OUXBFMCT       LOAD OUCBWSS\n         SLL   R9,2             TIMES FOUR FOR K.\n         CVD   R9,WORK\n         MVC   SIZE(6),=X'2020202120D2' GET READY FOR EDIT.\n         ED    SIZE-1(6),WORK+5\n*\n         MVC   WHERE,=CL3' IN'  DEFAULT MEMORY POSITION IS IN.\n         TM    OUCBSFL,OUCBNSW   TEST FOR NON-SWAP\n         BZ    TRYTRIV          BRANCH IF NOT NON-SWAP.\n         MVC   WHERE,=CL3'N/S'  MOVE IN NON-SWAP INDICATION.\n*        TM    ASCBRCTF,ASCBWAIT\n*        BZ    WHEREOK\n*        MVC   STATUS(4),=CL4'WAIT'\n         B     WHEREOK\nTRYTRIV  TM    OUCBQFL,OUCBLSW   CHECK FOR LOGICAL SWAP\n         BZ    TRYOUT           IF NOT, EXIT POSITION PROCESSING.\n         MVC   WHERE,=CL3'LSW'  MOVE IN LOGICAL SWAP\n         B     WHEREOK          BY-PASS REST OF POSITION PROCESSING.\nTRYOUT   TM    OUCBQFL,OUCBOUT   TRY OUT QUEUE\n         BZ    TRYWAIT          IF NOT, GO TRY TRIVIAL QUEUE STATUS.\n         MVC   WHERE,=CL3'OUT'  MOVE IN OUT QUEUE POSITION.\n         B     WHEREOK          BY-PASS REST OF POSITION PROCESSING.\nTRYWAIT  TM    OUCBQFL,OUCBOFF   CHECK FOR WAIT\n         BZ    WHEREOK          BRANCH IF NOT.\n         MVC   WHERE,=CL3' WT'  MOVE IN WAIT POSITION INDICATION.\n*        B     WHEREOK          BY-PASS REST OF POSITION PROCESSING.\nWHEREOK  TM    OUCBQFL,OUCBGOO+OUCBGOI+OUCBGOB           TRANSITIONING\n         BZ    NOTTRANS         BRANCH IF MEMORY NOT TRANSITIONING.\n         MVC   WHERE(3),=CL3'<->' INDICATE TRANSITIONING.\n*\nNOTTRANS SR    R7,R7            PREPARE FOR THE INSERT CHARACTERS.\n         IC    R7,ASCBDP        LOAD ASCBDP\n         SRL   R7,4             SHIFT OUT LOW ORDER NIBBLE.\n         IC    R8,HEX(R7)       PICK THE EBCDIC CHARACTER.\n         STC   R8,DP            STORE INTO OUTPUT FIELD.\n         IC    R7,ASCBDP        LOAD THE DISPATCHING PRIORITY AGN.\n         N     R7,=F'15'        TURN OFF HIGH ORDER NIBBLE.\n         IC    R8,HEX(R7)       LOAD THE EBCDIC CHARACTER.\n         STC   R8,DP+1          STORE INTO OUTPUT LINE.\n*                                                        *** PGN ***\n         SR    R7,R7            PREPARE FOR THE IC.\n         IC    R7,OUCBSPG+1     NEW PGN  ???\n         CVD   R7,WORK          CONVERT IT TO DECIMAL.\n         MVC   LINEPGN(3),=X'202120' MOVE IN THE EDIT MASK.\n         ED    LINEPGN-1(4),WORK+6 EDIT THE OUTPUT FIELD.\n*                                                        * SWAP CNT *\n         CLI   ZDFJS3,C'Q'\n         BE    PINR             OPT Q = LOAD RECENT PAGE IN RATE\n         LH    R7,OUCBSWC       LOAD OUCBSWC (SWAP COUNT)\n         CLI   TYPEA,C'T'\n         BNE   SWPCONT\n         L     R7,OUXBTRC       LOAD TRAN COUNT IF TSO\n         B     SWPCONT\nPINR     LH    R7,OUXBSIPR                                      OPT Q\nSWPCONT  CVD   R7,WORK          CONVERT IT TO DECIMAL.\n         LR    R8,R7\n         S     R8,=F'999'\n         BNP   SOK\n         SRL   R7,10            DIV BY 1K\n         CVD   R7,WORK          CONVERT IT TO DECIMAL.\n         MVC   EDTEXT(5),=X'40202120D2' MOVE IN THE EDIT MASK.\n         ED    EDTEXT(4),WORK+6 EDIT THE OUTPUT FIELD.\n         MVC   LINESWC(3),EDTEXT+2\n         B     SWAPRC\nSOK      MVC   LINESWC(3),=X'202120' MOVE IN THE EDIT MASK.\n         ED    LINESWC-1(4),WORK+6 EDIT THE OUTPUT FIELD.\n*\n*   FILL IN SWAP REASON CODE\n*\nSWAPRC   TM    OUCBQFL,OUCBLSW  SEE IF LOGICAL SWAP\n         BNZ   CHKSRC\n         TM    OUCBQFL,OUCBOUT  SEE IF OUT\n         BNZ   CHKSRC\n         B     PFLDONE          MUST BE IN.\nCHKSRC   CLI   OUCBSRC,X'11'    OUCBSRC (SWAP REASON CODE)\n         BH    UNKNOWN          TOO BIG REASON UNKNOWN\n         SR    R7,R7            CLEAR OUT WORK REGISTER\n         IC    R7,OUCBSRC       GET OUCBSRC (SWAP REASON CODE)\n         SLL   R7,2             MULTIPLY BY 4 TO GET INDEX\n         LA    R7,REASONS(R7)   GET ADDRESS OF REASON CODE\n         MVC   STATUS+1(4),0(R7)     MOVE IT INTO THE MESSAGE\n         B     PFLDONE\nUNKNOWN  MVC   STATUS+1,=CL4'????'       SORRY..DONT KNOW\n*\n*   FILL IN SERVICE UNITS\n*\nPFLDONE  L     R7,OUCBWMS       OUCBWMS LOAD SERVICE UNITS THIS XACTION\n         CVD   R7,WORK          CONVERT TO DECIMAL.\n         MVC   LINEWMS(7),=X'20202020202120' MOVE IN THE EDIT MASK.\n         ED    LINEWMS-1(8),WORK+4 EDIT THE RESULT.\n*                                             **  FILL IN CPU TIME **\nELAPSED  L     R8,RMCTTOD        PICK UP TIME OF DAY FROM RMCT.  (SU)\n         S     R8,OUCBTMO        SUBTRACT TRANSACTION START TIME.(SU)\n         SRDL  R8,32             MOVE INTO R  FOR DIVIDE.\n         D     R8,L1024          CONVERT TO SECONDS.\n         SR    R8,R8             IGNORE REMAINDER.\n         ST    R9,CALCELAP\n         L     R9,CPUHOLD\n         ST    R9,CALCCPU\n         CVD   R9,WORK          CONVERT IT TO DECIMAL.\n         MVC   CPUTIME(8),=X'20202021204B2020' MOVE IN THE EDIT MASK.\n         ED    CPUTIME-1(9),WORK+4 EDIT THE RESULT.\n*                                             **  FILL IN CPU % **\n         SR    R8,R8\n         MVC   LINEWSS,=X'2021204B20' *\n         L     R9,CALCELAP\n         LTR   R9,R9             CHK TO SEE IF ANYTHING IS THERE\n         BNP   SWAPGO            BRANCH IF RESULT MAKES SENSE.\n         SR    R8,R8\n         L     R9,CALCCPU\n         M     R8,=F'100'        PERCENT\n         SR    R8,R8\n         D     R8,CALCELAP\n         CVD   R9,WORK           *\n         ED    LINEWSS-1(6),WORK+5 *\n         MVC   CPUI(1),ASTER\n*\nSWAPGO   MVI   CPUFLAG,C' '     DEFAULT\n*\n*  NOW LOOP, CHECKING FOR THE JOBS WHOSE CPU TIME HAS INCREASED SINCE\n*            THE LAST ZDF DISPLAY\n*\n*        LA    R7,CPUTAB        START OF TABLE\n         L     R7,CPUTABI\nCPULOOP1 DS    0H\n         CLI   0(R7),X'FF'      END OF TABLE\n         BE    JUSTOUT1         YES, IGNORE\n*\n         CLC   0(16,R7),SPACES  UNUSED ENTRY?\n         BE    CPUADD1          YES, ADD THIS JOB TO TABLE\n*\n         CLC   0(4,R7),ASID     MATCH ON ASID, JOBNAME\n         BNE   CPUBUMP\n         CLC   7(8,R7),JOB      MATCH ON ASID, JOBNAME\n         BNE   CPUBUMP\n         B     CPUMATCH         YES, COMPARE CURRENT CPU TIME VS LAST\n*\nCPUBUMP  LA    R7,26(,7)        BUMP TO NEXT ENTRY\n         B     CPULOOP1         KEEP LOOPING\n*\nCPUMATCH DS    0H                       ** % CPU WHEN PREV ENTRY **\n         CLC   16(2,R7),CPUTIME+3       CHECK CPU WHOLE SECONDS\n         BE    UPDCPU           IF THEY ARE THE SAME, DON'T SET FLAG\n         MVC   16(2,R7),CPUTIME+3       STORE CPU WHOLE SECONDS\n         MVC   CPUFLAG(1),ASTER    INDICATE CPU TIME HAS INCREASED\n*\nUPDCPU   L     R9,CALCELAP\n         S     R9,18(R7)\n         ST    R9,DELTELAP\n         LTR   R9,R9             CHK TO SEE IF ANYTHING IS THERE\n         BNP   UPCPUN0\n         MVC   LINEWSS,=X'2021204B20' *\n         L     R9,CALCCPU\n         S     R9,22(R7)\n         LTR   R9,R9             CHK TO SEE IF ANYTHING IS THERE\n         BNP   UPCPUN0\n         M     R8,=F'100'        PERCENT\n         SR    R8,R8\n         D     R8,DELTELAP\n         CVD   R9,WORK           *\n         ED    LINEWSS-1(6),WORK+5 *\n         MVI   CPUI,C' '\n         B     JUSTOUT1\n*\nUPCPUN0  SR    R9,R9\n         MVC   LINEWSS(6),SPACES\n         B     JUSTOUT1\n*\nCPUADD1  MVC   0(16,R7),ASID    MOVE IN ASID, JOBNAME, STEPNAME, PSTEP\n         MVC   16(2,R7),CPUTIME+3       STORE CPU WHOLE SECONDS\n         MVC   26(33,R7),SPACES\n*\nJUSTOUT1 MVC   18(4,R7),CALCELAP\n         MVC   22(4,R7),CALCCPU\nGO       DS    0H\n         CLC   STATUS+1(4),SPACES\n         BE    GOGO             NOT WAITING\n         CLC   STATUS+1(4),REASONS+4\n         BE    GOGO             TGET\n         CLC   STATUS+1(4),REASONS+8\n         BE    GOGO             TPUT\n*        CLI   TYPEA,C'S'               NOT STC WAIT\n*        BNE   DECODE\n*\n         CLC   JOB(8),=C'EDBBLAS '\n         BE    GOGO             JOBS USUALLY THIS\n         CLC   JOB(8),=C'EDBBTAS '\n         BE    GOGO             JOBS USUALLY THIS\n         CLC   JOB(8),=C'EDGATE  '\n         BE    GOGO             JOBS USUALLY THIS\n         CLC   JOB(8),=C'EDSNALNK'\n         BE    GOGO             JOBS USUALLY THIS\n         CLC   JOB(8),=C'C4TSO   '\n         BE    GOGO             JOBS USUALLY THIS\n*                               ? CAN WE DECODE WAITS\nDECODE   DS    0H\n         MVI   STATUS,C'*'\n         L     R9,HSMACT\n         LTR   R9,R9\n         BZ    NHSMWAIT\n         CLI   HSMFLAG,C'0'\n         BNE   HSMDONE\n         MVI   HSMFLAG,C'1'\n*                                           FIND HSM ACTIVITY\n         B     HSMDONE                      TEMPORARY\n         MVC   VQWORK(64),SPACES\n         MVC   VQWORK(52),VXDF\n         MVC   VQWORK+42(2),=C'1 '\n         LA    R9,HSMINFO\n         ST    R9,VQWORK+44\n*\n         L     R15,ISPLINK\n         CALL (15),(VSELECT,L64,VQWORK),VL,MF=(E,ISPARMS)\n*\n         TPUT  HSMINFO,L'HSMINFO\n         L     R15,ISPLINK\n         CALL (15),(VGET,HSMP,SHARED),VL,MF=(E,ISPARMS)\n*\nHSMDONE  DS    0H\n         LA    R9,10\n         LA    R8,HSMINFO\nQHSMINFO CLC   0(8,R8),JOB\n         BNE   QHSMI\n         MVC   STATUS+1(4),=C'HSM '\n         B     GOGO\nQHSMI    LA    R8,8(R8)\n         BCT   R9,QHSMINFO\n*\nNHSMWAIT DS    0H\n*\nGOGO     DS    0H\n         BAL   R7,OUTMSG        ADD THE LINE TO THE SPF TABLE.\n*\nNEXTAS   L     R3,ASCOUNT\n         BCT   R3,ASCBLOOP      BRANCH BACK TO LOOK AT NEXT MEMORY.\n****************************\n*                          *\n*   ASCB LOOP ENDS         *\n*                          *\n****************************\n*===============================================================\n*\nGOTSOMEJ DS    0H\n*\n         MVC   SU+8(8),SPACES\n         L     R8,DELTTOD\n         LTR   R8,R8\n         BZ    NOCENT\nCENT     SR    R8,R8\n         L     R9,CPUTOTL\n         S     R9,OLDTOTL\n         LTR   R9,R9             WENT -VE\n         BNP   NOCENT\n*        M     R8,=F'100'        PERCENT\n*        SR    R8,R8\n         D     R8,DELTTOD\n         CVD   R9,WORK           *\n*        ED    SU+8(4),WORK+6\n         OI    WORK+7,X'0F'        FIX THE SIGN\n         UNPK  SU+11(3),WORK+6(2)    ...AND EDIT\n*\nNOCENT   L     R9,CPUTOTL\n         ST    R9,OLDTOTL\n         MVI   SU+15,C'='\n         L     R9,CPUNO\n         S     R9,OLDNO\n         BZ    NOCONT\n         MVI   SU+15,C'+'\n         L     R9,CPUNO\n         C     R9,OLDNO\n         BH    NOCONT\n         MVI   SU+15,C'-'\nNOCONT   L     R9,CPUNO\n         ST    R9,OLDNO\n*\n         CLI   ZDFJS3,C'Q'\n         BNE   TBTOPD\n*\n         L     R8,QSAVEUT                                   OPTN Q\n         CLOSE ((R8))                                       OPTN Q\n*                                                           OPTN Q\n         L     R15,ISPLINK                                  OPTN Q\n         CALL  (15),(VSELECT,L24,VFREE),VL,MF=(E,ISPARMS)   OPTN Q\n*                                                           OPTN Q\n         L     R0,=F'4096'                                  OPTN Q\n         L     R1,QSAVEUT                                   OPTN Q\n         FREEMAIN R,LV=(0),A=(1)                            OPTN Q\n*                                                           OPTN Q\n         L     R0,=F'4096'                                  OPTN Q\n         L     R1,R1QAREA                                   OPTN Q\n         FREEMAIN R,LV=(0),A=(1)                            OPTN Q\n*\nTBTOPD   L     R15,ISPLINK\n         CALL  (15),(TBTOP,ZDFTABLE),VL,MF=(E,ISPARMS)\n*\n         CLI   ZDFRPT,C'0'\n         BE   TABDIS\n*\n         L     R15,ISPLINK                                       RPT>0\n         CALL  (15),(VCONTROL,VDISPLAY,VLOCK),VL,MF=(E,ISPARMS)  RPT>0\n***********************************************************\n*                                                         *\n*        TABLE DISPLAY HERE                               *\n*                                                         *\n***********************************************************\nTABDIS   L     R15,ISPLINK\n         CALL  (15),(TBDISPL,ZDFTABLE,ZDFDATAB),VL,MF=(E,ISPARMS)\n         LR    R8,R15\n*\n         L     R15,ISPLINK\n         CALL (15),(VPUT,CMDRPT,SHARED),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL (15),(VPUT,CMDJES3,SHARED),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL (15),(VPUT,CMDPREEP,SHARED),VL,MF=(E,ISPARMS)\n*\n         C     R8,L8         END COMMAND ENTERED??\n         BE    DUNWITIT       ALL DONE\n*\n         CLI   ZDFJS3,C'S'\n         BE    SORTIT\n*\n         CLI   ZDFRPT,C'0'\n         BE    NOTACONT\n*\n         L     R15,ISPLINK                                       RPT>0\n         CALL  (15),(VCONTROL,VDISPLAY,VLINE),VL,MF=(E,ISPARMS)  RPT>0\n         B     DUNWITIT       AUTO MODE EXIT ASAP                RPT>0\n*\nNOTACONT C     R8,FZEROS      COMMAND ENTERED   R15 WAS SET ON TABDIS\n         BNE   GOTCMD         GO REPEAT THE DISPLAY\n*\nGOTSTUFF MVC   SELSAVE(3),SELCODE    SAVE SEL CODE\n         OC    SELSAVE(3),SPACES   UPPER-CASE IT\n         MVC   SELCODE(3),SPACES  SET SELECTION CODE TO SPACES\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBGET,ZDFTABLE),VL,MF=(E,ISPARMS)\n*\n         C     R15,L8         RC=8 MEANS CRP IS AT TOP\n         BE    GOTCMD         THEN A COMMAND WAS ENTERED\n*\n* IF THE CRP IS NOT ZERO, THEN A LINE SELECTION CODE MUST HAVE BEEN\n* ENTERED. I HAVE THE CURRENT LINE, SO EDIT THE SELECTION CODE.\n*\n         MVC   VQWORK(32),SPACES\n*\n         CLI   SELSAVE,C'C'   IS IT A JOB CANCEL\n         BE    JS3CAN         GO DO IT\n*\n         CLI   SELSAVE,C'F'   IS IT FLASHER\n         BE    JS3FLS         GO DO IT\n*\n         CLI   SELSAVE,C'Z'   IS IT FLASHER SHORTS STATUS\n         BE    JS3FLZ         GO DO IT\n*\n         CLI   SELSAVE,C'S'   IS IT SHOW JES STATS\n         BE    JS3            GO DO IT\n*\n         CLI   SELSAVE,C'N'   IS IT SHOW NQ\n         BE    ENQ            GO DO IT\n*\n         B     GOTCMD         GO REPEAT THE DISPLAY\n*\nSORTIT   MVC   VQWORK(32),SPACES\n         MVC   VQWORK(12),VQSRT\n         B     EXECIT\n*\nJS3      MVC   VQWORK(16),VVQJ\n         B     EXECVQW\n*\nJS3FLS   MVC   VQWORK(32),VVQF\n         B     EXECVQW\n*\nJS3FLZ   MVC   VQWORK(32),VVQZ\n         B     EXECVQW\n*\nENQ      MVC   VQWORK(16),VVQN\n         MVC   VQWORK+7(4),ASID\n         CLI   VQWORK+7,C' '\n         BNE   EXECIT\n         MVI   VQWORK+7,C'0'\n         B     EXECIT\n*\nJS3CAN   MVC   VQWORK(16),VVQC\n*\nEXECVQW  MVC   VQWORK+7(8),JOB\n*\nEXECIT   L     R15,ISPLINK\n*        CALL (15),(VSELECT,L48,VADDALL),VL,MF=(E,ISPARMS)\n*        L     R15,ISPLINK\n         CALL (15),(VSELECT,L64,VADDSYSP),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL (15),(VSELECT,L32,VQWORK),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL (15),(VSELECT,L48,VDELSYSP),VL,MF=(E,ISPARMS)\n*\n         B     GOTCMD         GO REPEAT THE DISPLAY\n*\nDUNWITIT DS    0H\n*\nTHEEND   L     R7,ZDF7HOLD     RESTORE  RETURN ADDRESS\n         BR    R7             RETURN TO OUR CALLER\n*****************************************************\n*                                                   *\n*     SHOWRMF ROUTINE END                           *\n*                                                   *\n*****************************************************\nGOTCMD   L     R15,ISPLINK\n         CALL (15),(VPUT,CMDLINEP,SHARED),VL,MF=(E,ISPARMS)\n         MVC   TABAREA(80),SPACES\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBEND,ZDFTABLE),VL,MF=(E,ISPARMS)\n*\n         B     SHOWAGIN       GO REPEAT THE SCREEN\n*****************************************************\n*                                                   *\n*     OUTMSG   ROUTINE START                        *\n*                                                   *\n*****************************************************\nOUTMSG   DS    0H\n         CLI   ZDFJS3,C'0'\n         BNE   OUTO1\n         CLC   LINEWSS(5),SPACES\n         BE    OUTEND\nOUTO1    CLI   ZDFJS3,C'1'\n         BNE   OUTON\n         CLC   LINEWSS(2),SPACES\n         BE    OUTEND\nOUTON    L     R15,ISPLINK\n*        MVI   TABAREA,C' '\n         CALL  (15),(VPUT,DANAMLST),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL  (15),(TBADD,ZDFTABLE),VL,MF=(E,ISPARMS)\n*\nOUTEND   MVC   TABAREA(80),SPACES\n         BR    R7             RETURN TO OUR CALLER\n         TITLE 'EXECUTED INSTRUCTIONS'\n*****************************************************\n*                                                   *\n*     OUTMSG   ROUTINE END                          *\n*                                                   *\n*****************************************************\n*****************************************************\n*                                                   *\n*     FASTQ    ROUTINE START                        *\n*                                                   *\n*****************************************************\nFASTQ    DS    0H\n         ST    R10,QSAVE\n         CLI   ZDFJS3,C'J'\n         BNE   NOTOPTJ\n         MVC   ZDFJBA(8),JOB\n*\n         L     R15,ISPLINK\n         CALL (15),(VPUT,CMDJOBA,SHARED),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL (15),(VSELECT,L32,VQJ3),VL,MF=(E,ISPARMS)\n*\n         L     R15,ISPLINK\n         CALL (15),(VGET,CMDJOBN,SHARED),VL,MF=(E,ISPARMS)\n*\n         MVC   ASID(4),ZDFJBN\nNOTOPTJ  CLI   ZDFJS3,C'Q'\n         BNE   FXX\n*                                         OPT Q SPECIFIED\n         MVC   ZDFJBC(1),ASTER\n         L     R9,R1QAREA                 LOOP ROUND QAREA\nRESCAN   CLI   0(R9),C' '                 LOOP ROUND QAREA\n         BE    SCANREC                    LOOP ROUND QAREA  -> FILL IT\n         CLC   0(8,R9),JOB                LOOP ROUND QAREA\n         BE    FASTQOK                    LOOP ROUND QAREA\n         LA    R9,9(R9)                   LOOP ROUND QAREA\n         C     R9,QAREAOFF\n         BH    QWRONG\n         B     RESCAN                     LOOP ROUND QAREA\n*\nQWRONG   MVI   TYPE,C'?'        IF OPTN Q\n         B     FXX\n*\nSCANREC  L     R11,EOFMARK                TEST EOF\n         LTR   R11,R11                    TEST EOF\n         BP    FXX                        TEST EOF\n***********************************\n         LA    1,LABEL15                  GO AMODE 24\n         BSM   0,1                        GO AMODE 24\nLABEL15  DS    0H                         GO AMODE 24\n***********************************\n         L     R11,QSAVEUT\n         GET   (R11)                      TRY TO FILL NEXT TAB ENTRY\n         LR    R11,R1\n***********************************\n         L     1,LABEL13                  GO AMODE 31\n         BSM   0,1                        GO AMODE 31\nLABEL13  DC    A(LABEL14+X'80000000')     GO AMODE 31\nLABEL14  DS    0H                         GO AMODE 31\n***********************************\n         LR    R1,R11                     R1 POINTS TO RECORD READ\n         L     R11,QSAVEUT\n         USING IHADCB,R11\n         LH    R8,DCBLRECL                GET LENGTH OF RECORD IN R8\nNEXTJOB  CLI   0(R1),X'00'\n         BNE   NOTEOF\n         LA    R11,1                      NULL CHARS IS END OF DATA\n         ST    R11,EOFMARK\n         L     R11,QAREAOFF               UPDATE IN CORE DATA\n         MVI   0(R11),C' '                NEXT ENTRY A SPACE\n         B     RESCAN\nNOTEOF   CLC   40(4,R1),SPACES            4 CHAR SYSID INDICATES ACTIVE\n         BE    TRYNEXT\n         L     R11,QAREAOFF               UPDATE IN CORE DATA\n         MVC   0(8,R11),0(R1)             JOB NAME\n         MVC   8(1,R11),32(R1)            JOB CLASS\n         LA    R11,9(R11)\n         MVI   0(R11),C' '                NEXT ENTRY A SPACE\n         ST    R11,QAREAOFF               UPDATE IN CORE PTR\nTRYNEXT  LA    R1,80(R1)\n         SH    R8,EIGHTY\n         LTR   R8,R8\n         BP    NEXTJOB\n         B     RESCAN\n*\nFASTQOK  MVC   ZDFJBC(1),8(R9)                  * FOUND IT ! *\n         MVC   TYPE,ZDFJBC      IF OPTN Q\n         B     FXX\n*\nFASTQEOF EQU   *                                              EOF\n***********************************                           EOF\n         L     1,LABEL11                  GO AMODE 31         EOF\n         BSM   0,1                                            EOF\nLABEL11  DC    A(LABEL12+X'80000000')                         EOF\nLABEL12  DS    0H                                             EOF\n***********************************                           EOF\n         LA    R11,1                                          EOF\n         ST    R11,EOFMARK                                    EOF\n*\nFXX      L     R10,QSAVE\n         BR    R10\n*****************************************************\n*                                                   *\n*     FASTQ    ROUTINE END                          *\n*                                                   *\n*****************************************************\n*\n         TITLE 'MISCELLANEOUS CONSTANTS'\n*        PRINT NOGEN\nFZEROS   DC    F'0'\nL1       DC    F'1'\nL2       DC    F'2'\nL3       DC    F'3'\nL4       DC    F'4'\nL5       DC    F'5'\nL6       DC    F'6'\nL8       DC    F'8'\nL12      DC    F'12'\nL16      DC    F'16'\nL18      DC    F'18'\nL20      DC    F'20'\nL24      DC    F'24'\nL25      DC    F'25'\nL32      DC    F'32'\nL34      DC    F'34'\nL37      DC    F'37'\nL48      DC    F'48'\nL64      DC    F'64'\nL78      DC    F'78'\nL80      DC    F'80'\nL1024    DC    F'1024'\nL10000   DC    F'10000'\n*\nEDIT6    DC    X'402020202121'\nEDIT8    DC    X'4020202020202121'\nTSU      DC    C'TSU'\nALL      DC    C'ALL'\nSTC      DC    C'STC'\nBAT      DC    C'BAT'\nISPLINK  DC    V(ISPLINK)\n*\nASTER    DC    CL1'*'\nMASTER   DC    CL8'*MASTER*'\n         DC    CL8'PCAUTH  '\n         DC    CL8'GRS     '\n         DC    CL8'DUMPSRV '\n         DC    CL8'ALLOCAS '\n         DC    CL8'RASP    '\n         DC    CL8'XCFAS   '\n         DC    CL8'CONSOLE '\n         DC    CL8'SMXC    '\n         DC    CL8'SYSBMAS '\n         DC    CL8'TRACE   '\n         DC    CL8'IOSAS   '\n         DC    CL8'CATALOG '\n         DC    CL8'SMF     '\n         DC    CL8'LLA     '\n         DC    CL8'TNF     '\n         DC    CL8'VMCF    '\n*\nEIGHTY   DC    H'80'\nSLEEP    DC    F'0010'      0.1 SECS\n*\nVVQJ     DC    C'CMD(QS SYSLOG  )'\nVVQN     DC    C'CMD(QN 0000    )'\nVDELAY   DC    C'CMD(ZWAIT   )'\nVVQF     DC    C'CMD(QF SYSLOG   ) NEWAPPL(DISF) '\nVVQZ     DC    C'CMD(QZ SYSLOG   ) NEWAPPL(DISF) '\nVVQC     DC    C'CMD(QC SYSLOG  )'\nVQJ3     DC    C'CMD(EXEC ''XSDMN.ZDF(OPTNJ)'')    '\nVQSRT    DC    C'CMD(OPTNS  )'\nVXDF     DC    C'CMD(CALL ''SYS1.PROD.'\n*                1234567890 1234567890\n         DC    C'EDED.LINKLIB(XDF)''   ''0 1234''  )'\n*                123456789012345678 9012 345678 9012\nVADDSYSP DC    C'CMD(ALTLIB ACTIVATE APPLICATION(CLIST) '\n         DC    C'DATASET(''XSDMN.ZDF'')     '\n*ADDALL  DC    C'CMD(ALLOCATE DD(SYSUPROC) DA(''XSDMNXX.ZDF'') SHR   '\nVDELSYSP DC    C'CMD(ALTLIB DEACTIVATE APPLICATION(CLIST)          '\nVALLC    DC    C'CMD(ALLOC DD(SYSUTF)    '\nFJCTNAME DC    C'DA(''SYS1.JES3.FLSJCT'') SHR             )'\nVPANELS  DC    C'(''XSDMN.ZDF'')     '\nVPANCLR  DC    C'() '\nVFREE    DC    C'CMD(FREE DD(SYSUTF)    )'\nVSELECT  DC    C'SELECT '\n*\nTBADD    DC    C'TBADD '\nTBCR     DC    C'TBCREATE '\nTBDISPL  DC    C'TBDISPL '\nTBEND    DC    C'TBEND '\nTBGET    DC    C'TBGET '\nTBTOP    DC    C'TBTOP '\nTBVCLEAR DC    C'TBVCLEAR '\nVDEF     DC    C'VDEFINE '\nVDELETE  DC    C'VDELETE '\nVGET     DC    C'VGET '\nVPUT     DC    C'VPUT '\nVCONTROL DC    C'CONTROL '\nVDISPLAY DC    C'DISPLAY '\nVLOCK    DC    C'LOCK '\nVLINE    DC    C'LINE '\nVLIBDEF  DC    C'LIBDEF '\nVISP     DC    C'ISPPLIB '\nVDATASET DC    C'DATASET '\n*\nNOW      DC    C'NOWRITE '\n*\nNULL     DC    C'()'\n*\nDANAMLST DC    C'('             DISPLAY ACTIVE NAME LIST\nSEL      DC    C'PIKA     '     SELECTION CODE\nACTLINE  DC    C'ACTLINE  '     JOB INFO\nSTAT     DC    C'STAT     '     JOB INFO\nACTLINB  DC    C'ACTLINB )'     JOB INFO\nACTLINEP DC    C'(ACTLINE)'     JOB INFO\nSTATP    DC    C'(STAT)'        JOB INFO\nACTLINBP DC    C'(ACTLINB)'     JOB INFO\nHSMP     DC    C'(HSM)'\nSUP      DC    C'(SU)'\nSERP     DC    C'(SER)'\nCMDLINEP DC    C'(XCMD)'\n*MDWHERE DC    C'(WHER)'\nCMDRPT   DC    C'(XRPT)'\nCMDPREEP DC    C'(ZPRE)'   PREFIX\nCMDJES3  DC    C'(ZJS3)'    JES3\nCMDCPU   DC    C'(CPU)'\nCMDAFC   DC    C'(AFC)'\nCMDPAG   DC    C'(PAG)'\nCMDTPR   DC    C'(TPR)'\nCMDUIC   DC    C'(UIC)'\nCMDMGB   DC    C'(MGB)'\nCMDTSO   DC    C'(TSO)'\nCMDJOBN  DC    C'(ZJBN)'    JES3\nCMDJOBC  DC    C'(ZJBC)'    JES3\nCMDJOBA  DC    C'(ZJBA)'    JES3\nPIKP     DC    C'(PIKA)'    SELECTION CODE\nSHARED   DC    C'SHARED '\n*\nSPACES   DC    CL80' '\n*\nCHAR     DC    C'CHAR '\nM16      DC    F'16000000'\n*\nZDFDATAB DC    C'EDWADAT8'\nZDFTABLE DC    C'ZDFTABLE'\n*\n*\n         TITLE 'REGISTER EQUATES'\n***********************************************************************\n*        REGISTER EQUATES                                             *\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         TITLE 'WORKING STORAGE AREAS'\n*\nHEX      DC    C'0123456789ABCDEF'\n* SEE RMCA FOR REASONS\nREASONS  DC    C' ?? TPUTTGETLONGAUX<RS< WAITREQSENQ EXCHUNIL'\n         DC    C'TRANCENSDPAG2LONAPPCOMVIOMVO'\n*                |...|...|...|...|...|...|...|...|...|...|...\n         LTORG\n*        PRINT NOGEN\nSYSUTF   DCB   DDNAME=SYSUTF,DSORG=PS,MACRF=(GL),EODAD=FASTQEOF,       X\n               RECFM=F,BUFNO=7\nMVPARM   MVC   0(0,R1),SYSUTF      MOVE DCB INTO GETMAIN AREA\n         DCBD  DSORG=PS,DEVD=DA\n         PRINT GEN\n         CVT   DSECT=YES,LIST=NO\nEDWA     DSECT\nSAVEAREA DS    18F\nCPUHOLD  DS    F\nCPUTOTL  DS    F\nOLDTOTL  DS    F\nCPUNO    DS    F\nOLDNO    DS    F\nASVTPTR  DS    F\nSMCAPTR  DS    F\nCSDPTR   DS    F\nCVTPTRX  DS    F\nHSMACT   DS    F\nTYPEA    DS    CL1\nR1QAREA  DS    F\nQSAVEUT  DS    F\nQSAVE    DS    F\nQAREAOFF DS    F\nASCOUNT  DS    F\nR4HOLD   DS    F\nASCBSAVE DS    F\nEOFMARK  DS    F\nRMCTPTR  DS    F\nMASTFMCT DS    F                FRAME COUNT ACCUMULATOR\nMASTWSS  DS    F                WORKING SET SIZE ACCUMULATOR\nMASTCPU  DS    F                CPU TIME ACCUMULATOR\nMASTCPUS DS    F                CPU TIME ACCUMULATOR\nMASTEXCP DS    F                CPU TIME ACCUMULATOR\nDELTELAP DS    F\nCALCELAP DS    F\nCALCCPU  DS    F\nHTOD     DS    F\nHOLDTOD  DS    F\nDELTTOD  DS    F\n         DS    0F\nVQWORK   DS    CL64\nZDF7HOLD DS    F\nRCEHOLD  DS    F\nPCCATPTR DS    F\nMASTFLG  DS    F                SYSTEM TASK PROCESSED FLAGS\nISPARMS  DS    10F            PARM LIST FOR ISPLINK\nDOUBLEWD DS    D              PACKED DECIMAL WORK AREA\nWORK     DS    D\n         DS    CL2\nSU       DS    CL16           SPEED CONST\n         DS    CL1\nSER      DS    CL25           SERIAL #\nSELCODE  DS    CL3            LINE SELECTION CODE\nSELSAVE  DS    CL3            LINE SELECTION CODE SAVE AREA\nZDFPRE   DS    CL8\nZDFCMD   DS    CL3\nZDFRPT   DS    CL2\nZDFJS3   DS    CL1\nZDFCPU   DS    CL4\nZDFAFC   DS    CL4\nZDFPAG   DS    CL4\nZDFTPR   DS    CL4\nZDFUIC   DS    CL4\nZDFMGB   DS    CL4\nZDFTSO   DS    CL18\nZDFJBN   DS    CL4\nZDFJBC   DS    CL1\nZDFJBA   DS    CL8\nQAUT     DS    CL1\nWORK6    DS    XL6\nLINEWMS  DS    CL7\nEDTEXT   DS    CL4            JOBTYPE SAVE AREA\n         DS    CL1\nTABAREA  DS    0CL80\nASID     DS    CL4\n         DS    CL1\nTYPE     DS    CL1\n         DS    CL1\nJOB      DS    CL8\n         DS    CL1\nPSTEP    DS    CL8\n         DS    CL1\nSTEP     DS    CL8\n         DS    CL1\nWHERE    DS    CL3\n         DS    CL1\nSTATUS   DS    CL5\n         DS    CL1\nSIZE     DS    CL5\n         DS    CL2\nLINESWC  DS    CL3\n         DS    CL1\nDP       DS    CL2\n         DS    CL1\nLINEPGN  DS    CL3\n         DS    CL1\nLINEWSS  DS    CL5\nCPUI     DS    CL1\nCPUTIME  DS    CL8\nCPUFLAG  DS    CL1\n         DS    CL4\n         DS    CL2\nHSMINFO  DS    CL80\nHSMFLAG  DS    CL1\nCPUTABI  DS    F\nCPUTABL  DSECT ,\nCPUTAB   DS    157CL26           CPUTABLE SAVE AREA\nCPUTABE  DS    XL2               END OF CPUTABLE\n***\n*  THE FOLLOWING WAS ADDED TO PROVIDE ADDRESSABILITY TO MVS/SP1.3\n*  SRM RESOURCE CONTROL TABLE VARIABLES (RCT)\n***\nRCTDSECT DSECT ,                   SRM RES CNTL TABLE             NERDC\nRCTRCT   DS    CL4                 'RCT'                          NERDC\nRCCUICTL DS    H                   UIC THRESHOLD LOW              NERDC\nRCCUICTH DS    H                   UIC THRESHOLD HIGH             NERDC\nRCCCPUTL DS    H                   CPU THRESHOLD LOW              NERDC\nRCCCPUTH DS    H                   CPU THRESHOLD HIGH             NERDC\nRCCPTRTL DS    H                   PAGING THRESHOLD LOW           NERDC\nRCCPTRTH DS    H                   PAGING THRESHOLD HIGH          NERDC\nRCCASMTL DS    H                   ASM Q REQUEST THRESHOLD LOW    NERDC\nRCCASMTH DS    H                   ASM Q REQUEST THRESHOLD HIGH   NERDC\nRCCDPRTL DS    H                   DEMAND PAGE RATE LOW THRESH    NERDC\nRCCDPRTH DS    H                   DEMAND PAGE RATE HIGH THRESH   NERDC\nRCCCPUPL DS    H                   CPU UTIL W/ DEMAND PAGING LOW  NERDC\nRCCCPUPH DS    H                   CPU UTIL W/ DEMAND PAGING HI   NERDC\nRCCMSPTL DS    H                   PAGE DELAY W/ DEMAND PAGING LO NERDC\nRCCMSPTH DS    H                   PAGE DELAY W/ DEMAND PAGING HI NERDC\nRCCPDLTL DS    H                   PAGE DELAY TIME (MS) LOW       NERDC\nRCCPDLTH DS    H                   PAGE DELAY TIME (MS) HIGH      NERDC\n         ORG   RCTDSECT+52                                        NERDC\nRCVCTMC  DS    H                   SAMPLE INTERVALS COUNT   1     NERDC\nRCVUICA  DS    H                   UIC AVERAGE              2     NERDC\nRCVCPUA  DS    H                   CPU USAGE AVERAGE        3     NERDC\nRCVAVQC  DS    H                   AVQ LOWW COUNT           4     NERDC\nRCVAFQA  DS    H                   AVG AVAIL FRAMES         5     NERDC\nRCVASMQA DS    H                   ASM Q LENGTH AVERAGE     6     NERDC\nRCVPTR   DS    H                   PAGING RATE              7     NERDC\nRCVDPR   DS    H                   DEMAND PAGING RATE ?     8     NERDC\nRCVPAGRT DS    H                   TOTAL PAGING RATE        9     NERDC\nRCVMSPP  DS    H                   PAGE DELAY TIME (MS)    10     NERDC\nRCVUICC  DS    F                                            1\nRCVCPUC  DS    F                                            2\nRCVAVQP  DS    F                                            3\nRCVAFQC  DS    F                                            4\n*\n*.....................................................................*\n*        MAPPING DSECTS\n*.....................................................................*\n         IHAASVT\n         IHAASCB\n         IRAOUCB\n         IHAOUXB\n         IKJTCB\n         IEECHAIN\n         IEESMCA\n         IHACSD\n*.....................................................................*\n*        MAPPING DSECT FOR DMDT (DOMAIN DESCRIPTOR TABLE)             *\n*.....................................................................*\nRMCT     DSECT\n         ORG   RMCT+64\nRMCTADJC DS    F\n         ORG   RMCT+124\nRMCTTOD  DS    F\n         ORG   RMCT+180\nRMCTDMDT DS    F\n         ORG   RMCT+184\nRMCTDMDE DS    F\n         ORG   RMCT+228\nRMCTRCT  DS    F\n         ORG   ,\nDMDT     DSECT\nDMDTNO   DS    XL1             DOMAIN NUMBER\nDMDTLO   DS    XL1             MIN  MPL LEVEL\nDMDTHI   DS    XL1             MAX  MPL LEVEL\nDMDTWT   DS    XL1             WEIGHTING FACTOR\nDMDTMPLT DS    XL2             CURRENT MPL TARGET\nDMDTRUA  DS    XL2             AVE # OF READY USERS\nDMDTGOOU DS    XL2             CURRENT # USERS GOING OUT\nDMDTCMPL DS    XL2             CURRENT MPL\nDMDTOUTU DS    XL2             CURRENT # USERS ON OUT Q\nDMDTINCU DS    XL2             CURRENT # SWAPPABLE INCORE USERS\nDMDTRUC  DS    XL4             ACCUM FOR READY USER AVERAGE\nDMDTEND  DS    0X              END OF DMT\n         DS    11F             XA 2.1.7 REQUIRED 2 XTRA WORDS HERE\n         DS    29F             ESA     REQUIRED 29 XTRA WORDS HERE\nDMDTLEN  EQU   *-DMDT\n         END\n/*\n//L.SYSLMOD  DD   DISP=SHR,DSN=TEST.PGM.LOAD\n//L.SYSLIB   DD   DSN=ISP.V3R5M0.ISPLOAD,DISP=SHR\n//L.SYSIN    DD   *\n  NAME ZDF(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZDFHELP": {"ttr": 6664, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x95\\x18_\\x00\\x95\\x18\\x8f\\t \\x00 \\x00\\x18\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1995-07-04T00:00:00", "modifydate": "1995-07-07T09:20:00", "lines": 32, "newlines": 24, "modlines": 0, "user": "ED115DM"}, "text": ")ATTR\n+ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(GREEN)\n$ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(YELLOW)\n@ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(BLUE)\n! TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(RED)\n% TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n\u00a2 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(PINK)\n| TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(WHITE)\n)BODY\n%---------------- Job Display Facility ---------------------------------\n%\n+\n%  The EXECUTION DISPLAY FACILITY displays various system and task workload\n%  indicators. You can select batch, started tasks, or tso users on the command\n%  line by entering  BAT , STC , or  TSU .  ALL  displays every address space.\n%  END  or  PF3  terminates the display.\n+\n%  The display is refreshed after each depression of the ENTER key.\n+\n%  Scrolling may be accomplished by erasing the command and pressing  PF8  to\n%  scroll forward and  PF7  to scroll backward.\n+\n%  To refresh the display after scrolling, re-enter a command on the command\n%  line.\n+\n+\n%  FOR DESCRIPTIONS OF SYSTEM LEVEL ZDF FIELDS - DEPRESS THE ENTER KEY\n+\n%  TO RETURN TO THE ZDF DISPLAY                - DEPRESS THE  END  KEY\n)PROC\n  &CONT = ZDFHELP1\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ZDFHELP1": {"ttr": 6666, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x95\\x18o\\x00\\x95\\x18\\x8f\\t \\x00 \\x00 \\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1995-07-05T00:00:00", "modifydate": "1995-07-07T09:20:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "ED115DM"}, "text": ")ATTR\n+ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(GREEN)\n$ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(YELLOW)\n@ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(BLUE)\n! TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(RED)\n% TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n\u00a2 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(PINK)\n| TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(WHITE)\n)BODY\n%---------------- Job Display Facility ---------------------------------\n%\n%\n%   System level indicators are displayed on the first line of the ZDF display\n%   These fields are described as follows:\n%\n%         %CPU    - System CPU utilization\n%         %AFC    - Available frame count\n%         %PAG    - Paging rate\n%         %TPR    - Total page rate (includes swaps)\n%         %UIC    - Unreferenced interval count\n%         %MB     - Megabytes of main memory is at least this\n%         %TSO      MPL Target/Current MPL for TSO periods 1/2,3,4\n%\n!         red%colour indicates value may indicate a problem\n%\n%  FOR DESCRIPTIONS OF TASK LEVEL ZDF FIELDS - DEPRESS THE ENTER KEY\n%\n%  TO RETURN TO THE ZDF DISPLAY              - DEPRESS THE  END  KEY\n%\n)PROC\n  &CONT = ZDFHELP2\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ZDFTEST": {"ttr": 6668, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x95\\x19\\x1f\\x00\\x95\\x19\\x1f\\x15U\\x00?\\x00?\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1995-07-10T00:00:00", "modifydate": "1995-07-10T15:55:00", "lines": 63, "newlines": 63, "modlines": 0, "user": "ED115DM"}, "text": ")ATTR\n_ TYPE(INPUT)\n@ TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(YELLOW)\n! TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) JUST(ASIS) COLOR(GREEN)\n$ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n? TYPE(TEXT) INTENS(LOW) JUST(LEFT) COLOR(YELLOW) HILITE(USCORE)\n+ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(TURQ)\n\u00a2 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(GREEN)\n\u00ac TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&MGBCOL)\n| TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&CPUCOL)\n{ TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&AFCCOL)\n} TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&PAGCOL)\n< TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&TPRCOL)\n\u00a6 TYPE(TEXT) INTENS(LOW) CAPS(ON) JUST(LEFT) COLOR(&UICCOL)\n)BODY CMD(ZSPFCMD)\n$&ZTIME &ZJDATE       ********* Job Display Facility *********\n$ISPF COMMAND    ==>_ZSPFCMD                                    $SCROLL =>_AMT $\n$BAT,STC,TSU,ALL ==>_Z  $     PREFIX ==>_Z       $OPTN ==>_Z$    RPTSEC =>_Z$\n|   CPU=&CPU{AFC=&AFC}PAG=&PAG<TPR=&TPR\u00a6UIC=&UIC \u00acMB>&MGB\u00a2TSO=&TSO\n$   &ASID &T   JOB    &EXCPCNT STEP     STATUS   MEMORY SWP DP  PG  &PCPU\n)MODEL\n_Z@Z\n)INIT\n &PCPU=%CPU..STEPCPU\n &ASID=ASID\n &T=T\n &EXCPCNT=EXCP-CNT\n &CPUCOL=GREEN\n &AFCCOL=GREEN\n &PAGCOL=GREEN\n &TPRCOL=GREEN\n &UICCOL=GREEN\n &MGBCOL=GREEN\n .ZVARS='(XCMD,ZPRE,ZJS3,XRPT,PIKA,ACTLINE)'\n .CURSOR=XCMD\n &AMT=CSR\n .HELP=ZDFC4\n &ZTDMARK = '                   ********* End of EDWA job list *********   '\n IF (&XRPT \u00ac= 0)\n     &ZTDMARK = '** Use attention key to terminate display **'\n IF (&CPU > 0090)\n     &CPUCOL=RED\n IF (&AFC < 0100)\n     &AFCCOL=RED\n IF (&PAG > 0050)\n     &PAGCOL=RED\n IF (&TPR > 0150)\n     &TPRCOL=RED\n IF (&UIC < 0200)\n     &UICCOL=RED\n IF (&MGB < 0151)\n     &MGBCOL=RED\n IF (&ZJS3 = 'J')\n     &ASID=JOB#\n IF (&ZJS3 = 'Q')\n     &EXCPCNT='PROCEDUR'\n     &T=C\n)PROC\n &PTCBTEXT = &XCMD\n VER(&XCMD,NONBLANK,LIST,BAT,TSU,STC,ALL)\n VER(&ZJS3,LIST,0,Q,S,J)\n VER(&XRPT,NONBLANK,LIST,0,2,3,4,5,6,7,8,9)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ZWAIT": {"ttr": 6670, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x95\\x19\\x1f\\x00\\x95\\x19\\x1f\\x15\\x01\\x00\\x06\\x00\\x02\\x00\\x00\\xc5\\xc4\\xf1\\xf1\\xf5\\xc4\\xd4@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1995-07-10T00:00:00", "modifydate": "1995-07-10T15:01:00", "lines": 6, "newlines": 2, "modlines": 0, "user": "ED115DM"}, "text": "        /* REXX */\nARG AA\n\"DELAY \" AA\nIF RC \u00ac= 0 THEN DO\n                RETURN 4\n                END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT376/FILE376.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT376", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}