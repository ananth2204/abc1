* ------------------------------------------------------------------- *
         MACRO
&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &
               &LEN,                    @LENGTH OF MESSAGE             &
               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &
               &EPA=                    EPUTL EPA
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*  --> E@PUT
.*
.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.
.*
.*
.*  ARGUMENTS: -----------------------------------------------------
.*
.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL
.*
.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)
.*
.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT
.*            COMPATIBILITY.
.*
.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE
.*
.*
.*   EXAMPLES: -----------------------------------------------------
.*
.*      1) APUT  'LITERAL'
.*
.*      2) APUT  (R3),80
.*
.*      3) APUT  LABEL
.*
.*      4) APUT  LABEL,40
.*
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*
.*  LOCAL SET SYMBOLS
.*
         LCLC  &SMA                     MESSAGE ADDRESS (REG)
         LCLC  &SML                     MESSAGE LENGTH (REG)
         LCLC  &SEP                     EPA (REGISTER)
.*
         LCLC  &L1,&L2,&L3              LOCAL LABELS
.*
&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS
&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS
&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS
.*
.*
.*  MESSAGE ADDRESS
.*
         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*
.*                                                          *HMD 11/86*
&LABEL   DS    0H                                           *HMD 11/86*
.*                                                          *HMD 11/86*
.A0500   ANOP                                               *HMD 11/86*
         AIF   ('&MSG' NE '').A2000
         MNOTE 8,'''&MSG='' MISSING / REQUIRED'
         MEXIT
.*
.A2000   ANOP
         AIF   ('&MSG'(1,1) NE '(').A2400
&SMA     SETC  '&MSG'(2,K'&MSG-2)
         LR    R1,&SMA                  @MESSAGE TEXT
         AGO   .A2600
.*
.A2400   ANOP
         AIF   ('&MSG'(1,1) NE '''').A2500
         B     &L3                      BRANCH AROUND MESSAGE
&L2      DC    C&MSG
&L3      DS    0H
         LA    R1,&L2                   @MESSAGE
         AGO   .A2600
.*
.A2500   ANOP
         LA    R1,&MSG                  @MESSAGE TEXT
.A2600   ANOP
.*
.*  MESSAGE LENGTH
.*
         AIF   ('&LEN' NE '').A3000
         AIF   ('&MSG'(1,1) NE '''').A2800
         LA    R0,L'&L2                 MESSAGE LENGTH
         AGO   .A3600
.*
.A2800   ANOP
         AIF   ('&MSG'(1,1) EQ '(').A2900
         LA    R0,L'&MSG                MESSAGE LENGTH
         AGO   .A3600
.*
.A2900   ANOP
         MNOTE 8,'''LEN'' MISSING / REQUIRED'
         MEXIT
.*
.A3000   ANOP
         AIF   ('&LEN'(1,1) NE '(').A3400
&SML     SETC  '&LEN'(2,K'&LEN-2)
         LR    R0,&SML                  MESSAGE LENGTH
         AGO   .A3600
.*
.A3400   ANOP
         LA    R0,&LEN                  MESSAGE LENGTH
.A3600   ANOP
.*
.*  RSA
.*
         AIF   ('&RSA' EQ '').A4900
         ST    R14,&RSA                 SAVE REGS 14
.A4900   ANOP
.*
.*  ENTRY POINT
.*
         AIF   ('&EPA' NE '').A5000
         L     R15,=V(EPUTL)            EPA
         AGO   .A5600
.*
.A5000   AIF   ('&EPA'(1,1) NE '(').A5400
&SEP     SETC  '&EPA'(2,K'&EPA-2)
         LR    R15,&SEP                 EPA
         AGO   .A5600
.*
.A5400   ANOP
         L     R15,&EPA                 EPA
.*
.A5600   ANOP
.*
.*  CALL LINKAGE
.*
.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE
.*
         AIF   ('&RSA' EQ '').A6900
         L     R14,&RSA                 RESTORE R14
.A6900   ANOP
.*
.AMEND   MEND
* ------------------------------------------------------------------- *
DA       RMODE 24
DA       AMODE 31
DA       START 0
         SPACE 3
* ***************************************************************
*
*     NAME:     DA
*     PURPOSE:  TO TEST THE DA COMMAND STRUCTURE
*     NOTE(S):
*
*
*
* ***************************************************************
         SPACE 3
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 3
         DS    0H
         STM   R14,R12,12(R13)      SAVE CALLERS REGISTERS
         BALR  R12,0                COPY BASE REGISTER
         USING *,R12
         ST    R13,SAVEAREA+4       SAVE CALLERS SAP
         LA    R13,SAVEAREA         POINT TO OUR SAVE AREA
         LR    R4,R1                SAVE PARM POINTER
         SPACE 3
         L     R1,16                 POINT TO CVT
         USING CVT,R1                TELL ASSEMBLER TO MAP IT
         L     R2,CVTOPCTP           LOAD PTR TO SRM'S RMCT
         ST    R2,SAVERMCT           AND SAVE IT FOR LATER USE
         L     R2,CVTASVT            LOAD THE FIRST ASVT
         USING ASVT,R2               AND TELL ASSEMBLER TO MAP IT
*        CLC   ASVTASVT(4),=C'ASVT'  GOT ASVT?
*        BE    GOTASVT                YES - CONTINUE
*        APUT  =C'NO ASVT FND',10
*        ABEND 90
         APUT  =C' SJT JOBNAME  STEPNAME PROCSTEP ASID DP PG SWPR PG DMX
                        ',60
GOTASVT  DS    0H
         L     R3,ASVTMAXU            GET MAX # OF ASVT ENTRIES
         LR    R6,R3                  COPY MAX ASVTS
         LA    R3,2(R3)
         USING ASVT,R2
         LA    R4,ASVTFRST-4          POINT TO ASVT ENTRY -4
         CLC   ASVTASVT(4),=C'ASVT'  GOT THE ASVT?
         BE    A1
         APUT  =C'NO ASVT FND',10
         ABEND 001,DUMP
         USING ASCB,R5
         USING CSCB,R10
A1       DS    0H
LOOPA    BCT   R3,LOOP
         B     END
LOOP     EQU   *
         LA    R4,4(R4)              INCREMENT INTO ASVT
         L     R5,0(R4)              LOAD ASCB ADDRESS
         LTR   R5,R5                 AT THE END?
         BZ    END                    YES - GO END
LOOPZ    EQU   *
         TM    0(R4),X'80'           ASVT ENTRY AVAILABLE?
         BO    LOOPA                  YES - SKIP IT
         MVI   LINE,X'40'            PREP TO CLEAR LINE
         MVC   LINE+1(69),LINE        AND CLEAR THE REST OF IT
LOOP1    EQU   *
         L     R10,ASCBCSCB          LOAD CSCB ADDRESS
         TM    CHTRKID,CHINITID      IS THIS AN INIT?
         BNO   LOOP2                  NO -
         LR    R9,R10                SAVE CSCB POINTER
         L     R8,ASCBJBNI           POINT TO JOBNAME
         LTR   R8,R8                 DOES IT CONTAIN SOMETHING?
         BZ    LOOP2A                 NO ENTRY
         S     R8,=F'8'              SUBTRACT 8
         LR    R10,R8                SAVE IT
         MVC   LINETYPE(3),=C'JOB'   MOVE TYPE
         MVC   LINEJOBN(8),CHKEY     MOVE JOBNAME
         MVC   LINESTEP(8),CHSTEP    MOVE STEPNAME
         MVC   LINEPRST(8),CHPROCSN  MOVE PROC/STEP NAME
         LR    R10,R9                RESTORE CSCB POINTER
         B     WRITE
LOOP2A   DS    0H
         MVC   LINETYPE(3),=C'STC'   MOVE TYPE
         MVC   LINEJOBN(8),CHCLS     MOVE JOBNAME
         MVC   LINESTEP(8),CHSTEP    MOVE STEPNAME
         MVC   LINEPRST(8),CHKEY     MOVE PROC/STEP NAME
         B     WRITE
LOOP2    DS    0H
LOOP2X   DS    0H
         TM    CHTRKID,CHJOBID       IS THIS AN STC?
         BNO   CHKTSU                 NO - CHECK IF TSO USER
         MVC   LINETYPE(3),=C'STC'   MOVE TYPE
         MVC   LINEJOBN(8),CHCLS     MOVE JOBNAME
         MVC   LINESTEP(8),CHKEY     MOVE STEPNAME
         MVC   LINEPRST(8),CHPROCSN  MOVE PROC/STEP NAME
         B     WRITE
CHKTSU   DS    0H
         TM    CHTRKID,CHTSID        IS THIS AN TSO USER?
         BNO   LOOPA                  NO - IT'S NOT ANYTHING
         MVC   LINETYPE(3),=C'TSU'   MOVE TYPE
         MVC   LINEJOBN(8),CHKEY     MOVE JOBNAME
         MVC   LINESTEP(8),CHPROCSN  MOVE STEPNAME
         MVC   LINEPRST(8),CHCLS     MOVE PROC/STEP NAME
         B     WRITE
WRITE    DS    0H
         L     R7,ASCBOUCB           LOAD ADR OF OUCB AREA
         USING OUCB,R7               TELL ASSEMBLER ABOUT IT
         CLC   CHCLS(8),=CL8'VTAM'
         BNE   WRITE1
*        ABEND 091,DUMP
WRITE1   DS    0H
         BAL   R9,ASID               EXTRACT ASID
         BAL   R9,DPRTY              EXTRACT DISPATCHING PRIORITY
         BAL   R9,NPG
*        BAL   R9,RPG
*        BAL   R9,NDP
*        BAL   R9,RDP
         BAL   R9,DMN
         BAL   R9,MEMSWPO            EXTRACT SWAP INFORMATION
         BAL   R9,WSS                PROCESS WSS FLD
         LA    R9,LINE               POINT TO PRINT LINE
         APUT  (R9),79               DISPLAY THE LINE W/VARIABLE INFO
         MVI   LINE,X'40'            PREP TO CLEAR LINE
         MVC   LINE+1(78),LINE        AND CLEAR REMAINDER
         B     LOOPA                 GO BACK AND SEE IF THERE IS MORE
ASID     DS    0H
         L     R0,=F'2'              SET LENGTH OF FIELD
         LA    R14,ASCBASID          POINT TO ASID FIELD
         LA    R15,LINEASID          POINT TO OUR AREA ON OUTPUT LINE
ASIDB    EQU   *
         MVI   BYTE1,X'00'           INITIALIZE
         MVI   BYTE2,X'00'           INITIALIZE
         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE
         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE
         TR    BYTE1,HEXTBL          TRANSLATE
         TR    BYTE2,HEXTBL          TRANSLATE
         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE
         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE
         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS
         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE
         BCT   R0,ASIDB              LOOP TILL DONE
         BR    R9                    GO RETURN TO CALLER
DPRTY    DS    0H
         L     R0,=F'1'              SET LENGTH OF FIELD
         LA    R14,ASCBDP            POINT TO ASID FIELD
         LA    R15,LINEDPRT          POINT TO OUR AREA ON OUTPUT LINE
DPRTYB   EQU   *
         MVI   BYTE1,X'00'           INITIALIZE
         MVI   BYTE2,X'00'           INITIALIZE
         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE
         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE
         TR    BYTE1,HEXTBL          TRANSLATE
         TR    BYTE2,HEXTBL          TRANSLATE
         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE
         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE
         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS
         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE
         BCT   R0,DPRTYB             LOOP TILL DONE
         BR    R9                    GO RETURN TO CALLER
NPG      DS    0H
         L     R0,=F'1'              SET LENGTH OF FIELD
         LA    R14,OUCBNPG           POINT TO NPG  FIELD
         LA    R15,LINENPG           POINT TO OUR AREA ON OUTPUT LINE
NPGL     DS    0H
         MVI   BYTE1,X'00'           INITIALIZE
         MVI   BYTE2,X'00'           INITIALIZE
         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE
         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE
         TR    BYTE1,HEXTBL          TRANSLATE
         TR    BYTE2,HEXTBL          TRANSLATE
         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE
         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE
         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS
         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE
         BCT   R0,NPGL               LOOP TILL DONE
         BR    R9                    GO RETURN TO CALLER
DMN      DS    0H
         L     R0,=F'1'              SET LENGTH OF FIELD
         LA    R14,OUCBDMN           POINT TO NPG  FIELD
         LA    R15,LINEDMN           POINT TO OUR AREA ON OUTPUT LINE
DMNL     DS    0H
         MVI   BYTE1,X'00'           INITIALIZE
         MVI   BYTE2,X'00'           INITIALIZE
         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE
         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE
         TR    BYTE1,HEXTBL          TRANSLATE
         TR    BYTE2,HEXTBL          TRANSLATE
         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE
         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE
         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS
         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE
         BCT   R0,DMNL               LOOP TILL DONE
         BR    R9                    GO RETURN TO CALLER
MEMSWPO  DS    0H
         SR    R15,R15               CLEAR COMPARE REGISTER
         IC    R15,OUCBSRC           LOAD IN SAWP REASON
         SLL   R15,2                 SHIFT TO GET INDEX
         LA    R15,SAWPREAS(R15)     POINT TO THE ENTRY
         MVC   LINESWRC(4),0(R15)    MOVE IT TO OUTPUT LINE
*
         TM    OUCBSFL,OUCBNSW       NON-SWAPABLE
         BZ    MEMPOS1                NO - CHECK NEXT CONDITION
         MVC   LINEMEMP(2),=C'NS'    SET AS NON-SWAPABLE
         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.
MEMPOS1  EQU   *
         TM    OUCBSFL,OUCBPVL       PRIVALEDGE STATUS?
         BZ    MEMPOS2                NO - CHECK NEXT CONDITION
         MVC   LINEMEMP(2),=C'PR'    SET AS PRIVALEDGED - NOW NICE EH?
         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.
MEMPOS2  EQU   *
         TM    OUCBSFL,OUCBOFF       WAITING?
         BZ    MEMPOS3                NO - CHECK NEXT CONDITION
         MVC   LINEMEMP(2),=C'WA'    SET AS WAITING
         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.
MEMPOS3  EQU   *
         TM    OUCBSFL,OUCBOUT       SWAPPED OUT?
         BZ    MEMPOS4                NO - CHECK NEXT CONDITION
         MVC   LINEMEMP(2),=C'OU'    SET AS SWAPPED OUT
         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.
MEMPOS4  EQU   *
         TM    OUCBQFL,OUCBGOO+OUCBGOI+OUCBGOB  IN TRANSITION?
         BZ    MEMPOSU                NO - CHECK NEXT CONDITION
         MVC   LINEMEMP(2),=C'<>'    SET AS IN TRANSITION
         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.
MEMPOSU  EQU   *
         MVC   LINEMEMP(2),=C'??'    SET AS TWILIGHT ZONE
         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.
MEMPOSX  EQU   *
         BR    R9                    GO RETURN TO CALLER
WSS      DS    0H
         MVC   LINEEXCC,=C'********'
         SR    R1,R1
         LH    R1,OUCBTWSS          GET WSS VALUE
         CVD   R1,DBLAREA           CONVERT IT TO PD FORMAT
         MVC   LINEWSS(6),EDMASK    MOVE EDIT MASK TO OUTPUT FIELD
         ED    LINEWSS,DBLAREA+5    EDIT IT FOR OUTPUT
         BR    R9                   RETURN TO CALLER
         SPACE 3
END      EQU   *
RETURN   DS    0H
         L     R13,SAVEAREA+4       RELOAD CALLERS SAP
         LM    R14,R12,12(R13)      RELOAD CALLERS REGISTERS
         BR    R14                  RETURN TO CALLER
         LTORG
DBLAREA  DC    D'0'
EDMASK   DC    X'402020202120'
LINE     DS    0CL69
         DS    CL1
LINETYPE DS    CL3
         DS    CL1
LINEJOBN DS    CL8
         DS    CL1
LINESTEP DS    CL8
         DS    CL1
LINEPRST DS    CL8
         DS    CL1
LINEASID DS    CL4
         DS    CL1
LINEDPRT DS    CL2
         DS    CL1
LINEMEMP DS    CL2
         DS    CL1
LINESWRC DS    CL4
         DS    CL1
LINENPG  DS    CL2
         DS    CL1
LINEDMN  DS    CL2
         DS    CL2
LINEEXCC DS    CL8
         DS    CL2
LINEWSS  DS    CL6
         DS    CL2
         DS    CL55
SAVEAREA DS    18F
SAVERMCT DS    F
HEXTBL   DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'    00-0F
         DC    X'F1',15X'00'                          10-9F
         DC    X'F2',15X'00'                          20-9F
         DC    X'F3',15X'00'                          30-9F
         DC    X'F4',15X'00'                          40-9F
         DC    X'F5',15X'00'                          50-9F
         DC    X'F6',15X'00'                          60-9F
         DC    X'F7',15X'00'                          70-9F
         DC    X'F8',15X'00'                          80-9F
         DC    X'F9',15X'00'                          90-9F
         DC    X'C1',15X'00'                          A0-AF
         DC    X'C2',15X'00'                          B0-BF
         DC    X'C3',15X'00'                          C0-CF
         DC    X'C4',15X'00'                          D0-DF
         DC    X'C5',15X'00'                          E0-EF
         DC    X'C6',15X'00'                          F0-FF
BYTE1    DC    X'00'
BYTE2    DC    X'00'
SAWPREAS DC    C'    TPUTTGETLONGPGS<RSS<WAITRQSWDENQEXCHSWAP'
         PRINT NOGEN
         CVT   DSECT=YES,LIST=NO
         PRINT NOGEN
         IHAASVT DSECT=YES
         IHAASCB DSECT=YES
         IHAASXB DSECT=YES
CSCB     DSECT
         IEECHAIN
         IRAOUCB DSECT=YES
         IHAOUXB DSECT=YES
         END
EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&
               OR'
EPUTL    CSECT                                              *HMD 10/85*
         LCLB  &XA                                          *HMD 10/85*
&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  MODULE NAME  . . . . EPUTL
*
*  ALIASES  . . . . . . NONE
*
*  DATE WRITTEN . . . . 06/85
*  UPDATED      . . . . 04/88                                  HD APR88
*
*  AUTHOR . . . . . . . JIM ELSWORTH
*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88
*
*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR
*
*  PURPOSE:
*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE
*
*
*  DESCRIPTION:
*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.
*    ISSUES SINGLE LINE PUTLINE.
*
*
*  ATTRIBUTES:
*    REENTRANT
*
*  FEATURES:
*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.
*
*  CALLED MODULES:
*    PUTLINE
*
*  ASSUMPTIONS:
*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE
*
*  ABENDS:
*    POSSIBLE 0CX IF BAD ARGUEMNTS
*
*  CAVEATS:
*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB
*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.
*
*
*  INPUT ARGUMENTS:
*    1)  R1 : ADDRESS OF MESSAGE TEXT
*    2)  R0 : LENGTH OF MESSAGE TEXT
*    3) R13 : STANDARD OS SAVE AREA
*    4) R14 : RETURN ADDRESS
*    5) R15 : ENTRY ADDRESS
*
*               ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR
*
RCBA     EQU   100                 BAD MESSAGE ADDRESS
RCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG
*
MAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH
*
*
*  REGISTERS USED:
*
R0       EQU   0                   MESSAGE LENGTH AT ENTRY
R1       EQU   1                   MESSAGE ADDRESS AT ENTRY
R2       EQU   2                   WORK
RMA      EQU   4                   @MESSAGE TEXT
RML      EQU   5                   MESSAGE LENGTH
RUPT     EQU   6                   @UPT (USER PROFILE TABLE)
RECT     EQU   7                   @ECT
R12      EQU   12                  CSECT BASE
R13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA
R14      EQU   14                  WORK/LINKAGE
R15      EQU   15                  WORK/LINKAGE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         IKJCPPL
         EJECT
         IKJTCB   LIST=YES                                  *HMD 10/85*
         EJECT                                              *HMD 10/85*
         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*
         EJECT
         IHAPSA   LIST=YES                                     HD APR88
         EJECT                                                 HD APR88
PUTLDS   DSECT
         DS    18F                      OS SAVE AREA
PUTAAA   EQU   *
PUTECB   DS    F                        ECB
PUTIOPL  DS    4F                       IOPLADS
PUTBLOK  PUTLINE MF=L
PUTLEN   DS    H                        LENGTH
PUTZZZ   DS    H                        RESERVED
PUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA
PUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS
         EJECT
***********************************************************************
*  SET UP LINKAGE
***********************************************************************
         SPACE 1
EPUTL    CSECT
         AIF  (NOT &XA).X001                                *HMD 10/85*
EPUTL    AMODE 31
.X001    ANOP                                               *HMD 10/85*
         STM   14,12,12(13)       SAVE CALLERS REGS
         LR    R12,R15            COPY EPA
         USING EPUTL,R12          ADDRESSABILITY
         AIF   (NOT &XA).X002                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &
               LOC=RES            RELATIVE TO 16MB LINE
         AGO   .X003                                        *HMD 10/85*
.X002    ANOP                                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA
.X003    ANOP                                               *HMD 10/85*
         ST    1,8(13)            OUR SAVE AREA POINTER
         ST    13,4(1)            POINTER TO CALLERS SAVE AREA
         LR    13,1               @OUR SAVE AREA
         USING PUTLDS,R13         MAP SA AND WORK AREA
         L     R14,4(R13)         POINT TO CALLERS RSA
         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN
         SPACE 2
***********************************************************************
*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE
***********************************************************************
         SPACE 1
         LA    R15,RCBA                 ASSUME BAD ADDRESS
         LTR   RMA,R1                   MESSAGE ADDRESS
         BNP   RETURN                   GOOD ASSUMPTION
         LA    R15,RCBL                 ASSUME BAD LENGTH
         LTR   RML,R0                   POSITIVE?
         BNP   RETURN                   -NO
         C     RML,=A(MAXMSG)           MORE THAN MAX?
         BH    RETURN                   -YES
         SPACE 2
***********************************************************************
*  BUILD PARAMETER LIST
***********************************************************************
         SPACE 1
         LA    R15,4(RML)               MESSAGE LENGTH
         STH   R15,PUTLEN                 PLUS HEADER
         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW
         BCTR  RML,0                    REDUCE FOR MOVE
         EX    RML,PUTMOVE
         EJECT
***********************************************************************
*  DIG UP ADDRESS OF UPT AND ECT
***********************************************************************
         SPACE 1
         L     R2,PSATOLD-PSA           @TCB                   HD APR88
         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA
         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP
         USING CPPL,R2                  MAP CPPL
         L     RUPT,CPPLUPT             @UPT
         L     RECT,CPPLECT             @ECT
         SPACE 2
***********************************************************************
*  ISSUE PUTLINE CALL
***********************************************************************
         SPACE 1
         XC    PUTECB,PUTECB            CLEAR ECB
         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88
         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &
               UPT=(RUPT),              @UPT                           &
               ECT=(RECT),              @ECT                           &
               ECB=PUTECB,              @ECB                           &
               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &
               MF=(E,PUTIOPL)
         EJECT
***********************************************************************
*  RETURN TO CALLER
***********************************************************************
         SPACE 1
RETURN   EQU   *
         LR    2,R13                    @OUR SAVE AREA
         LR    3,R15                    SAVE RETURN CODE
         L     R13,4(R13)               @CALLERS SAVE AREA
         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0
         LR    R15,3                    RESTORE RC
         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS
         SPACE 5
***********************************************************************
*  CONSTANTS AND NON-REENTRANT WORK AREAS
***********************************************************************
         SPACE 1
PUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER
         SPACE 2
         LTORG
         SPACE 2
         END   EPUTL
