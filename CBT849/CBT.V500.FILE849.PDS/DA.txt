DA       RMODE 24
DA       AMODE 31
DA       START 0
         SPACE 3
* ***************************************************************
*
*     NAME:     DA
*     PURPOSE:  TO TEST THE DA COMMAND STRUCTURE
*     NOTE(S):
*
*
*
* ***************************************************************
         SPACE 3
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 3
         DS    0H
         STM   R14,R12,12(R13)      SAVE CALLERS REGISTERS
         BALR  R12,0                COPY BASE REGISTER
         USING *,R12
         ST    R13,SAVEAREA+4       SAVE CALLERS SAP
         LA    R13,SAVEAREA         POINT TO OUR SAVE AREA
         LR    R4,R1                SAVE PARM POINTER
         SPACE 3
         L     R1,16                 POINT TO CVT
         USING CVT,R1                TELL ASSEMBLER TO MAP IT
         L     R2,CVTOPCTP           LOAD PTR TO SRM'S RMCT
         ST    R2,SAVERMCT           AND SAVE IT FOR LATER USE
         L     R2,CVTASVT            LOAD THE FIRST ASVT
         USING ASVT,R2               AND TELL ASSEMBLER TO MAP IT
*        CLC   ASVTASVT(4),=C'ASVT'  GOT ASVT?
*        BE    GOTASVT                YES - CONTINUE
*        TPUT  =C'NO ASVT FND',10
*        ABEND 90
         TPUT  =C' SJT JOBNAME  STEPNAME PROCSTEP ASID DP PG SWPR PG DMX
                        ',60
GOTASVT  DS    0H
         L     R3,ASVTMAXU            GET MAX # OF ASVT ENTRIES
         LR    R6,R3                  COPY MAX ASVTS
         LA    R3,2(R3)
         USING ASVT,R2
         LA    R4,ASVTFRST-4          POINT TO ASVT ENTRY -4
         CLC   ASVTASVT(4),=C'ASVT'  GOT THE ASVT?
         BE    A1
         TPUT  =C'NO ASVT FND',10
         ABEND 001,DUMP
         USING ASCB,R5
         USING CSCB,R10
A1       DS    0H
LOOPA    BCT   R3,LOOP
         B     END
LOOP     EQU   *
         LA    R4,4(R4)              INCREMENT INTO ASVT
         L     R5,0(R4)              LOAD ASCB ADDRESS
         LTR   R5,R5                 AT THE END?
         BZ    END                    YES - GO END
LOOPZ    EQU   *
         TM    0(R4),X'80'           ASVT ENTRY AVAILABLE?
         BO    LOOPA                  YES - SKIP IT
         MVI   LINE,X'40'            PREP TO CLEAR LINE
         MVC   LINE+1(69),LINE        AND CLEAR THE REST OF IT
LOOP1    EQU   *
         L     R10,ASCBCSCB          LOAD CSCB ADDRESS
         TM    CHTRKID,CHINITID      IS THIS AN INIT?
         BNO   LOOP2                  NO -
         LR    R9,R10                SAVE CSCB POINTER
         L     R8,ASCBJBNI           POINT TO JOBNAME
         LTR   R8,R8                 DOES IT CONTAIN SOMETHING?
         BZ    LOOP2A                 NO ENTRY
         S     R8,=F'8'              SUBTRACT 8
         LR    R10,R8                SAVE IT
         MVC   LINETYPE(3),=C'JOB'   MOVE TYPE
         MVC   LINEJOBN(8),CHKEY     MOVE JOBNAME
         MVC   LINESTEP(8),CHSTEP    MOVE STEPNAME
         MVC   LINEPRST(8),CHPROCSN  MOVE PROC/STEP NAME
         LR    R10,R9                RESTORE CSCB POINTER
         B     WRITE
LOOP2A   DS    0H
         MVC   LINETYPE(3),=C'STC'   MOVE TYPE
         MVC   LINEJOBN(8),CHCLS     MOVE JOBNAME
         MVC   LINESTEP(8),CHSTEP    MOVE STEPNAME
         MVC   LINEPRST(8),CHKEY     MOVE PROC/STEP NAME
         B     WRITE
LOOP2    DS    0H
LOOP2X   DS    0H
         TM    CHTRKID,CHJOBID       IS THIS AN STC?
         BNO   CHKTSU                 NO - CHECK IF TSO USER
         MVC   LINETYPE(3),=C'STC'   MOVE TYPE
         MVC   LINEJOBN(8),CHCLS     MOVE JOBNAME
         MVC   LINESTEP(8),CHKEY     MOVE STEPNAME
         MVC   LINEPRST(8),CHPROCSN  MOVE PROC/STEP NAME
         B     WRITE
CHKTSU   DS    0H
         TM    CHTRKID,CHTSID        IS THIS AN TSO USER?
         BNO   LOOPA                  NO - IT'S NOT ANYTHING
         MVC   LINETYPE(3),=C'TSU'   MOVE TYPE
         MVC   LINEJOBN(8),CHKEY     MOVE JOBNAME
         MVC   LINESTEP(8),CHPROCSN  MOVE STEPNAME
         MVC   LINEPRST(8),CHCLS     MOVE PROC/STEP NAME
         B     WRITE
WRITE    DS    0H
         L     R7,ASCBOUCB           LOAD ADR OF OUCB AREA
         USING OUCB,R7               TELL ASSEMBLER ABOUT IT
         CLC   CHCLS(8),=CL8'VTAM'
         BNE   WRITE1
*        ABEND 091,DUMP
WRITE1   DS    0H
         BAL   R9,ASID               EXTRACT ASID
         BAL   R9,DPRTY              EXTRACT DISPATCHING PRIORITY
         BAL   R9,NPG
*        BAL   R9,RPG
*        BAL   R9,NDP
*        BAL   R9,RDP
         BAL   R9,DMN
         BAL   R9,MEMSWPO            EXTRACT SWAP INFORMATION
         BAL   R9,WSS                PROCESS WSS FLD
         LA    R9,LINE               POINT TO PRINT LINE
         TPUT  (R9),79               DISPLAY THE LINE W/VARIABLE INFO
         MVI   LINE,X'40'            PREP TO CLEAR LINE
         MVC   LINE+1(78),LINE        AND CLEAR REMAINDER
         B     LOOPA                 GO BACK AND SEE IF THERE IS MORE
ASID     DS    0H
         L     R0,=F'2'              SET LENGTH OF FIELD
         LA    R14,ASCBASID          POINT TO ASID FIELD
         LA    R15,LINEASID          POINT TO OUR AREA ON OUTPUT LINE
ASIDB    EQU   *
         MVI   BYTE1,X'00'           INITIALIZE
         MVI   BYTE2,X'00'           INITIALIZE
         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE
         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE
         TR    BYTE1,HEXTBL          TRANSLATE
         TR    BYTE2,HEXTBL          TRANSLATE
         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE
         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE
         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS
         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE
         BCT   R0,ASIDB              LOOP TILL DONE
         BR    R9                    GO RETURN TO CALLER
DPRTY    DS    0H
         L     R0,=F'1'              SET LENGTH OF FIELD
         LA    R14,ASCBDP            POINT TO ASID FIELD
         LA    R15,LINEDPRT          POINT TO OUR AREA ON OUTPUT LINE
DPRTYB   EQU   *
         MVI   BYTE1,X'00'           INITIALIZE
         MVI   BYTE2,X'00'           INITIALIZE
         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE
         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE
         TR    BYTE1,HEXTBL          TRANSLATE
         TR    BYTE2,HEXTBL          TRANSLATE
         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE
         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE
         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS
         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE
         BCT   R0,DPRTYB             LOOP TILL DONE
         BR    R9                    GO RETURN TO CALLER
NPG      DS    0H
         L     R0,=F'1'              SET LENGTH OF FIELD
         LA    R14,OUCBNPG           POINT TO NPG  FIELD
         LA    R15,LINENPG           POINT TO OUR AREA ON OUTPUT LINE
NPGL     DS    0H
         MVI   BYTE1,X'00'           INITIALIZE
         MVI   BYTE2,X'00'           INITIALIZE
         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE
         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE
         TR    BYTE1,HEXTBL          TRANSLATE
         TR    BYTE2,HEXTBL          TRANSLATE
         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE
         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE
         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS
         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE
         BCT   R0,NPGL               LOOP TILL DONE
         BR    R9                    GO RETURN TO CALLER
DMN      DS    0H
         L     R0,=F'1'              SET LENGTH OF FIELD
         LA    R14,OUCBDMN           POINT TO NPG  FIELD
         LA    R15,LINEDMN           POINT TO OUR AREA ON OUTPUT LINE
DMNL     DS    0H
         MVI   BYTE1,X'00'           INITIALIZE
         MVI   BYTE2,X'00'           INITIALIZE
         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE
         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE
         TR    BYTE1,HEXTBL          TRANSLATE
         TR    BYTE2,HEXTBL          TRANSLATE
         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE
         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE
         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS
         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE
         BCT   R0,DMNL               LOOP TILL DONE
         BR    R9                    GO RETURN TO CALLER
MEMSWPO  DS    0H
         SR    R15,R15               CLEAR COMPARE REGISTER
         IC    R15,OUCBSRC           LOAD IN SAWP REASON
         SLL   R15,2                 SHIFT TO GET INDEX
         LA    R15,SAWPREAS(R15)     POINT TO THE ENTRY
         MVC   LINESWRC(4),0(R15)    MOVE IT TO OUTPUT LINE
*
         TM    OUCBSFL,OUCBNSW       NON-SWAPABLE
         BZ    MEMPOS1                NO - CHECK NEXT CONDITION
         MVC   LINEMEMP(2),=C'NS'    SET AS NON-SWAPABLE
         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.
MEMPOS1  EQU   *
         TM    OUCBSFL,OUCBPVL       PRIVALEDGE STATUS?
         BZ    MEMPOS2                NO - CHECK NEXT CONDITION
         MVC   LINEMEMP(2),=C'PR'    SET AS PRIVALEDGED - NOW NICE EH?
         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.
MEMPOS2  EQU   *
         TM    OUCBSFL,OUCBOFF       WAITING?
         BZ    MEMPOS3                NO - CHECK NEXT CONDITION
         MVC   LINEMEMP(2),=C'WA'    SET AS WAITING
         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.
MEMPOS3  EQU   *
         TM    OUCBSFL,OUCBOUT       SWAPPED OUT?
         BZ    MEMPOS4                NO - CHECK NEXT CONDITION
         MVC   LINEMEMP(2),=C'OU'    SET AS SWAPPED OUT
         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.
MEMPOS4  EQU   *
         TM    OUCBQFL,OUCBGOO+OUCBGOI+OUCBGOB  IN TRANSITION?
         BZ    MEMPOSU                NO - CHECK NEXT CONDITION
         MVC   LINEMEMP(2),=C'<>'    SET AS IN TRANSITION
         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.
MEMPOSU  EQU   *
         MVC   LINEMEMP(2),=C'??'    SET AS TWILIGHT ZONE
         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.
MEMPOSX  EQU   *
         BR    R9                    GO RETURN TO CALLER
WSS      DS    0H
         MVC   LINEEXCC,=C'********'
         SR    R1,R1
         LH    R1,OUCBTWSS          GET WSS VALUE
         CVD   R1,DBLAREA           CONVERT IT TO PD FORMAT
         MVC   LINEWSS(6),EDMASK    MOVE EDIT MASK TO OUTPUT FIELD
         ED    LINEWSS,DBLAREA+5    EDIT IT FOR OUTPUT
         BR    R9                   RETURN TO CALLER
         SPACE 3
END      EQU   *
RETURN   DS    0H
         L     R13,SAVEAREA+4       RELOAD CALLERS SAP
         LM    R14,R12,12(R13)      RELOAD CALLERS REGISTERS
         BR    R14                  RETURN TO CALLER
         LTORG
DBLAREA  DC    D'0'
EDMASK   DC    X'402020202120'
LINE     DS    0CL69
         DS    CL1
LINETYPE DS    CL3
         DS    CL1
LINEJOBN DS    CL8
         DS    CL1
LINESTEP DS    CL8
         DS    CL1
LINEPRST DS    CL8
         DS    CL1
LINEASID DS    CL4
         DS    CL1
LINEDPRT DS    CL2
         DS    CL1
LINEMEMP DS    CL2
         DS    CL1
LINESWRC DS    CL4
         DS    CL1
LINENPG  DS    CL2
         DS    CL1
LINEDMN  DS    CL2
         DS    CL2
LINEEXCC DS    CL8
         DS    CL2
LINEWSS  DS    CL6
         DS    CL2
         DS    CL55
SAVEAREA DS    18F
SAVERMCT DS    F
HEXTBL   DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'    00-0F
         DC    X'F1',15X'00'                          10-9F
         DC    X'F2',15X'00'                          20-9F
         DC    X'F3',15X'00'                          30-9F
         DC    X'F4',15X'00'                          40-9F
         DC    X'F5',15X'00'                          50-9F
         DC    X'F6',15X'00'                          60-9F
         DC    X'F7',15X'00'                          70-9F
         DC    X'F8',15X'00'                          80-9F
         DC    X'F9',15X'00'                          90-9F
         DC    X'C1',15X'00'                          A0-AF
         DC    X'C2',15X'00'                          B0-BF
         DC    X'C3',15X'00'                          C0-CF
         DC    X'C4',15X'00'                          D0-DF
         DC    X'C5',15X'00'                          E0-EF
         DC    X'C6',15X'00'                          F0-FF
BYTE1    DC    X'00'
BYTE2    DC    X'00'
SAWPREAS DC    C'    TPUTTGETLONGPGS<RSS<WAITRQSWDENQEXCHSWAP'
         PRINT NOGEN
         CVT   DSECT=YES,LIST=NO
         PRINT NOGEN
         IHAASVT DSECT=YES
         IHAASCB DSECT=YES
         IHAASXB DSECT=YES
CSCB     DSECT
         IEECHAIN
         IRAOUCB DSECT=YES
         IHAOUXB DSECT=YES
         END
