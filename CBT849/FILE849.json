{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012950000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 352716, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE849.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE849.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x07\\x04'", "DS1TRBAL": "b'\\xc7\\x16'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x06\\x01\\x00\\t\\x06\\x02\\x00\\x01\\x00\\x08'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04R\\x002\\x01\\x11\\t\\x8f\\x01\\x11\\t\\x8f\\x00#\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf2@@@'", "ispf": {"version": "04.82", "flags": 0, "createdate": "2011-04-08T00:00:00", "modifydate": "2011-04-08T00:23:32", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-482"}, "text": "REGULAR CBT TAPE - VERSION 482    FILE:  849\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT482.FILE849\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 15 MEMBERS COUNTED; CUMULATIVE SIZE IS 2,978 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   04/08/11    00:23:32    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE849": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04R\\x00&\\x01\\x11\\t\\x8f\\x01\\x11\\t\\x8f\\x00#\\x00#\\x00#\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf2@@@'", "ispf": {"version": "04.82", "flags": 0, "createdate": "2011-04-08T00:00:00", "modifydate": "2011-04-08T00:23:26", "lines": 35, "newlines": 35, "modlines": 0, "user": "CBT-482"}, "text": "//***FILE 849 is from Scott Vetter and contains a TSO command to    *   FILE 849\n//*           display the TSO users currently logged on.  The       *   FILE 849\n//*           original command was for MVS 3.8 (still included as   *   FILE 849\n//*           member DT38).  Fixed to work on z/OS 1.12 by Sam      *   FILE 849\n//*           Golob (you can compare to see the necessary changes). *   FILE 849\n//*           The name of the command is DT.                        *   FILE 849\n//*                                                                 *   FILE 849\n//*           Member DTP (source code) created to convert terminal  *   FILE 849\n//*           output of the DT program from TPUT to PUTLINE, so it  *   FILE 849\n//*           can be captured and displayed in full screen mode.    *   FILE 849\n//*                                                                 *   FILE 849\n//*           Additional command from Scott Vetter:                 *   FILE 849\n//*           DA - Display Active Address Spaces.                   *   FILE 849\n//*                                                                 *   FILE 849\n//*           Similar treatment to DT command:  DAP is PUTLINE      *   FILE 849\n//*           adaptation of the terminal output.  DA38 is Scott's   *   FILE 849\n//*           original version for MVS 3.8.  DA$ is assembly JCL.   *   FILE 849\n//*                                                                 *   FILE 849\n//*           REXX execs from Mark Zelden:  TSOV, TSOB, TSOE, TSOR  *   FILE 849\n//*           were included here so you can have tools to capture   *   FILE 849\n//*           the outputs of the DT program which was assembled     *   FILE 849\n//*           from the DTP source (JCL member DT$).  Or to capture  *   FILE 849\n//*           the outputs from the DAP source prpgram.  To capture  *   FILE 849\n//*           output, say:  TSO TSOx DT , where x is V, B, E, R,    *   FILE 849\n//*           for VIEW, BROWSE, EDIT, or REVIEW (CBT File 134)      *   FILE 849\n//*           of the captured output of DT.  REVIEW will do full    *   FILE 849\n//*           screen browsing (or editing) of the output while      *   FILE 849\n//*           you are in TSO READY mode, even without ISPF.  (Use   *   FILE 849\n//*           the UPDATE subcommand of REVIEW for ISPF-like edit.)  *   FILE 849\n//*                                                                 *   FILE 849\n//*           email:  svetter@ameritech.net                         *   FILE 849\n//*                                                                 *   FILE 849\n//*           email:  sbgolob@cbttape.org   or                      *   FILE 849\n//*                   sbgolob@attglobal.net                         *   FILE 849\n//*                                                                 *   FILE 849\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DA": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00G\\x01\\x11\\t\\x7f\\x01\\x11\\t\\x7f\\x01R\\x01<\\x01E\\x00\\x05\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2011-04-07T00:00:00", "modifydate": "2011-04-07T01:52:47", "lines": 316, "newlines": 325, "modlines": 5, "user": "SBGOLOB"}, "text": "DA       RMODE 24\nDA       AMODE 31\nDA       START 0\n         SPACE 3\n* ***************************************************************\n*\n*     NAME:     DA\n*     PURPOSE:  TO TEST THE DA COMMAND STRUCTURE\n*     NOTE(S):\n*\n*\n*\n* ***************************************************************\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 3\n         DS    0H\n         STM   R14,R12,12(R13)      SAVE CALLERS REGISTERS\n         BALR  R12,0                COPY BASE REGISTER\n         USING *,R12\n         ST    R13,SAVEAREA+4       SAVE CALLERS SAP\n         LA    R13,SAVEAREA         POINT TO OUR SAVE AREA\n         LR    R4,R1                SAVE PARM POINTER\n         SPACE 3\n         L     R1,16                 POINT TO CVT\n         USING CVT,R1                TELL ASSEMBLER TO MAP IT\n         L     R2,CVTOPCTP           LOAD PTR TO SRM'S RMCT\n         ST    R2,SAVERMCT           AND SAVE IT FOR LATER USE\n         L     R2,CVTASVT            LOAD THE FIRST ASVT\n         USING ASVT,R2               AND TELL ASSEMBLER TO MAP IT\n*        CLC   ASVTASVT(4),=C'ASVT'  GOT ASVT?\n*        BE    GOTASVT                YES - CONTINUE\n*        TPUT  =C'NO ASVT FND',10\n*        ABEND 90\n         TPUT  =C' SJT JOBNAME  STEPNAME PROCSTEP ASID DP PG SWPR PG DMX\n                        ',60\nGOTASVT  DS    0H\n         L     R3,ASVTMAXU            GET MAX # OF ASVT ENTRIES\n         LR    R6,R3                  COPY MAX ASVTS\n         LA    R3,2(R3)\n         USING ASVT,R2\n         LA    R4,ASVTFRST-4          POINT TO ASVT ENTRY -4\n         CLC   ASVTASVT(4),=C'ASVT'  GOT THE ASVT?\n         BE    A1\n         TPUT  =C'NO ASVT FND',10\n         ABEND 001,DUMP\n         USING ASCB,R5\n         USING CSCB,R10\nA1       DS    0H\nLOOPA    BCT   R3,LOOP\n         B     END\nLOOP     EQU   *\n         LA    R4,4(R4)              INCREMENT INTO ASVT\n         L     R5,0(R4)              LOAD ASCB ADDRESS\n         LTR   R5,R5                 AT THE END?\n         BZ    END                    YES - GO END\nLOOPZ    EQU   *\n         TM    0(R4),X'80'           ASVT ENTRY AVAILABLE?\n         BO    LOOPA                  YES - SKIP IT\n         MVI   LINE,X'40'            PREP TO CLEAR LINE\n         MVC   LINE+1(69),LINE        AND CLEAR THE REST OF IT\nLOOP1    EQU   *\n         L     R10,ASCBCSCB          LOAD CSCB ADDRESS\n         TM    CHTRKID,CHINITID      IS THIS AN INIT?\n         BNO   LOOP2                  NO -\n         LR    R9,R10                SAVE CSCB POINTER\n         L     R8,ASCBJBNI           POINT TO JOBNAME\n         LTR   R8,R8                 DOES IT CONTAIN SOMETHING?\n         BZ    LOOP2A                 NO ENTRY\n         S     R8,=F'8'              SUBTRACT 8\n         LR    R10,R8                SAVE IT\n         MVC   LINETYPE(3),=C'JOB'   MOVE TYPE\n         MVC   LINEJOBN(8),CHKEY     MOVE JOBNAME\n         MVC   LINESTEP(8),CHSTEP    MOVE STEPNAME\n         MVC   LINEPRST(8),CHPROCSN  MOVE PROC/STEP NAME\n         LR    R10,R9                RESTORE CSCB POINTER\n         B     WRITE\nLOOP2A   DS    0H\n         MVC   LINETYPE(3),=C'STC'   MOVE TYPE\n         MVC   LINEJOBN(8),CHCLS     MOVE JOBNAME\n         MVC   LINESTEP(8),CHSTEP    MOVE STEPNAME\n         MVC   LINEPRST(8),CHKEY     MOVE PROC/STEP NAME\n         B     WRITE\nLOOP2    DS    0H\nLOOP2X   DS    0H\n         TM    CHTRKID,CHJOBID       IS THIS AN STC?\n         BNO   CHKTSU                 NO - CHECK IF TSO USER\n         MVC   LINETYPE(3),=C'STC'   MOVE TYPE\n         MVC   LINEJOBN(8),CHCLS     MOVE JOBNAME\n         MVC   LINESTEP(8),CHKEY     MOVE STEPNAME\n         MVC   LINEPRST(8),CHPROCSN  MOVE PROC/STEP NAME\n         B     WRITE\nCHKTSU   DS    0H\n         TM    CHTRKID,CHTSID        IS THIS AN TSO USER?\n         BNO   LOOPA                  NO - IT'S NOT ANYTHING\n         MVC   LINETYPE(3),=C'TSU'   MOVE TYPE\n         MVC   LINEJOBN(8),CHKEY     MOVE JOBNAME\n         MVC   LINESTEP(8),CHPROCSN  MOVE STEPNAME\n         MVC   LINEPRST(8),CHCLS     MOVE PROC/STEP NAME\n         B     WRITE\nWRITE    DS    0H\n         L     R7,ASCBOUCB           LOAD ADR OF OUCB AREA\n         USING OUCB,R7               TELL ASSEMBLER ABOUT IT\n         CLC   CHCLS(8),=CL8'VTAM'\n         BNE   WRITE1\n*        ABEND 091,DUMP\nWRITE1   DS    0H\n         BAL   R9,ASID               EXTRACT ASID\n         BAL   R9,DPRTY              EXTRACT DISPATCHING PRIORITY\n         BAL   R9,NPG\n*        BAL   R9,RPG\n*        BAL   R9,NDP\n*        BAL   R9,RDP\n         BAL   R9,DMN\n         BAL   R9,MEMSWPO            EXTRACT SWAP INFORMATION\n         BAL   R9,WSS                PROCESS WSS FLD\n         LA    R9,LINE               POINT TO PRINT LINE\n         TPUT  (R9),79               DISPLAY THE LINE W/VARIABLE INFO\n         MVI   LINE,X'40'            PREP TO CLEAR LINE\n         MVC   LINE+1(78),LINE        AND CLEAR REMAINDER\n         B     LOOPA                 GO BACK AND SEE IF THERE IS MORE\nASID     DS    0H\n         L     R0,=F'2'              SET LENGTH OF FIELD\n         LA    R14,ASCBASID          POINT TO ASID FIELD\n         LA    R15,LINEASID          POINT TO OUR AREA ON OUTPUT LINE\nASIDB    EQU   *\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,ASIDB              LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nDPRTY    DS    0H\n         L     R0,=F'1'              SET LENGTH OF FIELD\n         LA    R14,ASCBDP            POINT TO ASID FIELD\n         LA    R15,LINEDPRT          POINT TO OUR AREA ON OUTPUT LINE\nDPRTYB   EQU   *\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,DPRTYB             LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nNPG      DS    0H\n         L     R0,=F'1'              SET LENGTH OF FIELD\n         LA    R14,OUCBNPG           POINT TO NPG  FIELD\n         LA    R15,LINENPG           POINT TO OUR AREA ON OUTPUT LINE\nNPGL     DS    0H\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,NPGL               LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nDMN      DS    0H\n         L     R0,=F'1'              SET LENGTH OF FIELD\n         LA    R14,OUCBDMN           POINT TO NPG  FIELD\n         LA    R15,LINEDMN           POINT TO OUR AREA ON OUTPUT LINE\nDMNL     DS    0H\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,DMNL               LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nMEMSWPO  DS    0H\n         SR    R15,R15               CLEAR COMPARE REGISTER\n         IC    R15,OUCBSRC           LOAD IN SAWP REASON\n         SLL   R15,2                 SHIFT TO GET INDEX\n         LA    R15,SAWPREAS(R15)     POINT TO THE ENTRY\n         MVC   LINESWRC(4),0(R15)    MOVE IT TO OUTPUT LINE\n*\n         TM    OUCBSFL,OUCBNSW       NON-SWAPABLE\n         BZ    MEMPOS1                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'NS'    SET AS NON-SWAPABLE\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS1  EQU   *\n         TM    OUCBSFL,OUCBPVL       PRIVALEDGE STATUS?\n         BZ    MEMPOS2                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'PR'    SET AS PRIVALEDGED - NOW NICE EH?\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS2  EQU   *\n         TM    OUCBSFL,OUCBOFF       WAITING?\n         BZ    MEMPOS3                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'WA'    SET AS WAITING\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS3  EQU   *\n         TM    OUCBSFL,OUCBOUT       SWAPPED OUT?\n         BZ    MEMPOS4                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'OU'    SET AS SWAPPED OUT\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS4  EQU   *\n         TM    OUCBQFL,OUCBGOO+OUCBGOI+OUCBGOB  IN TRANSITION?\n         BZ    MEMPOSU                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'<>'    SET AS IN TRANSITION\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOSU  EQU   *\n         MVC   LINEMEMP(2),=C'??'    SET AS TWILIGHT ZONE\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOSX  EQU   *\n         BR    R9                    GO RETURN TO CALLER\nWSS      DS    0H\n         MVC   LINEEXCC,=C'********'\n         SR    R1,R1\n         LH    R1,OUCBTWSS          GET WSS VALUE\n         CVD   R1,DBLAREA           CONVERT IT TO PD FORMAT\n         MVC   LINEWSS(6),EDMASK    MOVE EDIT MASK TO OUTPUT FIELD\n         ED    LINEWSS,DBLAREA+5    EDIT IT FOR OUTPUT\n         BR    R9                   RETURN TO CALLER\n         SPACE 3\nEND      EQU   *\nRETURN   DS    0H\n         L     R13,SAVEAREA+4       RELOAD CALLERS SAP\n         LM    R14,R12,12(R13)      RELOAD CALLERS REGISTERS\n         BR    R14                  RETURN TO CALLER\n         LTORG\nDBLAREA  DC    D'0'\nEDMASK   DC    X'402020202120'\nLINE     DS    0CL69\n         DS    CL1\nLINETYPE DS    CL3\n         DS    CL1\nLINEJOBN DS    CL8\n         DS    CL1\nLINESTEP DS    CL8\n         DS    CL1\nLINEPRST DS    CL8\n         DS    CL1\nLINEASID DS    CL4\n         DS    CL1\nLINEDPRT DS    CL2\n         DS    CL1\nLINEMEMP DS    CL2\n         DS    CL1\nLINESWRC DS    CL4\n         DS    CL1\nLINENPG  DS    CL2\n         DS    CL1\nLINEDMN  DS    CL2\n         DS    CL2\nLINEEXCC DS    CL8\n         DS    CL2\nLINEWSS  DS    CL6\n         DS    CL2\n         DS    CL55\nSAVEAREA DS    18F\nSAVERMCT DS    F\nHEXTBL   DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'    00-0F\n         DC    X'F1',15X'00'                          10-9F\n         DC    X'F2',15X'00'                          20-9F\n         DC    X'F3',15X'00'                          30-9F\n         DC    X'F4',15X'00'                          40-9F\n         DC    X'F5',15X'00'                          50-9F\n         DC    X'F6',15X'00'                          60-9F\n         DC    X'F7',15X'00'                          70-9F\n         DC    X'F8',15X'00'                          80-9F\n         DC    X'F9',15X'00'                          90-9F\n         DC    X'C1',15X'00'                          A0-AF\n         DC    X'C2',15X'00'                          B0-BF\n         DC    X'C3',15X'00'                          C0-CF\n         DC    X'C4',15X'00'                          D0-DF\n         DC    X'C5',15X'00'                          E0-EF\n         DC    X'C6',15X'00'                          F0-FF\nBYTE1    DC    X'00'\nBYTE2    DC    X'00'\nSAWPREAS DC    C'    TPUTTGETLONGPGS<RSS<WAITRQSWDENQEXCHSWAP'\n         PRINT NOGEN\n         CVT   DSECT=YES,LIST=NO\n         PRINT NOGEN\n         IHAASVT DSECT=YES\n         IHAASCB DSECT=YES\n         IHAASXB DSECT=YES\nCSCB     DSECT\n         IEECHAIN\n         IRAOUCB DSECT=YES\n         IHAOUXB DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DA$": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00!\\x01\\x11\\x08o\\x01\\x11\\t\\x8f\\x00\\x15\\x00\\x1c\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2011-03-27T00:00:00", "modifydate": "2011-04-08T00:15:21", "lines": 28, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(DAP)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   DA\n SETCODE AC(0)\n SETSSI  CB482849\n NAME    DA(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DAP": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00X\\x01\\x11\\t\\x7f\\x01\\x11\\t\\x7f\\x01V\\x02\\x90\\x01E\\x01]\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2011-04-07T00:00:00", "modifydate": "2011-04-07T01:56:58", "lines": 656, "newlines": 325, "modlines": 349, "user": "SBGOLOB"}, "text": "* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\nDA       RMODE 24\nDA       AMODE 31\nDA       START 0\n         SPACE 3\n* ***************************************************************\n*\n*     NAME:     DA\n*     PURPOSE:  TO TEST THE DA COMMAND STRUCTURE\n*     NOTE(S):\n*\n*\n*\n* ***************************************************************\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 3\n         DS    0H\n         STM   R14,R12,12(R13)      SAVE CALLERS REGISTERS\n         BALR  R12,0                COPY BASE REGISTER\n         USING *,R12\n         ST    R13,SAVEAREA+4       SAVE CALLERS SAP\n         LA    R13,SAVEAREA         POINT TO OUR SAVE AREA\n         LR    R4,R1                SAVE PARM POINTER\n         SPACE 3\n         L     R1,16                 POINT TO CVT\n         USING CVT,R1                TELL ASSEMBLER TO MAP IT\n         L     R2,CVTOPCTP           LOAD PTR TO SRM'S RMCT\n         ST    R2,SAVERMCT           AND SAVE IT FOR LATER USE\n         L     R2,CVTASVT            LOAD THE FIRST ASVT\n         USING ASVT,R2               AND TELL ASSEMBLER TO MAP IT\n*        CLC   ASVTASVT(4),=C'ASVT'  GOT ASVT?\n*        BE    GOTASVT                YES - CONTINUE\n*        APUT  =C'NO ASVT FND',10\n*        ABEND 90\n         APUT  =C' SJT JOBNAME  STEPNAME PROCSTEP ASID DP PG SWPR PG DMX\n                        ',60\nGOTASVT  DS    0H\n         L     R3,ASVTMAXU            GET MAX # OF ASVT ENTRIES\n         LR    R6,R3                  COPY MAX ASVTS\n         LA    R3,2(R3)\n         USING ASVT,R2\n         LA    R4,ASVTFRST-4          POINT TO ASVT ENTRY -4\n         CLC   ASVTASVT(4),=C'ASVT'  GOT THE ASVT?\n         BE    A1\n         APUT  =C'NO ASVT FND',10\n         ABEND 001,DUMP\n         USING ASCB,R5\n         USING CSCB,R10\nA1       DS    0H\nLOOPA    BCT   R3,LOOP\n         B     END\nLOOP     EQU   *\n         LA    R4,4(R4)              INCREMENT INTO ASVT\n         L     R5,0(R4)              LOAD ASCB ADDRESS\n         LTR   R5,R5                 AT THE END?\n         BZ    END                    YES - GO END\nLOOPZ    EQU   *\n         TM    0(R4),X'80'           ASVT ENTRY AVAILABLE?\n         BO    LOOPA                  YES - SKIP IT\n         MVI   LINE,X'40'            PREP TO CLEAR LINE\n         MVC   LINE+1(69),LINE        AND CLEAR THE REST OF IT\nLOOP1    EQU   *\n         L     R10,ASCBCSCB          LOAD CSCB ADDRESS\n         TM    CHTRKID,CHINITID      IS THIS AN INIT?\n         BNO   LOOP2                  NO -\n         LR    R9,R10                SAVE CSCB POINTER\n         L     R8,ASCBJBNI           POINT TO JOBNAME\n         LTR   R8,R8                 DOES IT CONTAIN SOMETHING?\n         BZ    LOOP2A                 NO ENTRY\n         S     R8,=F'8'              SUBTRACT 8\n         LR    R10,R8                SAVE IT\n         MVC   LINETYPE(3),=C'JOB'   MOVE TYPE\n         MVC   LINEJOBN(8),CHKEY     MOVE JOBNAME\n         MVC   LINESTEP(8),CHSTEP    MOVE STEPNAME\n         MVC   LINEPRST(8),CHPROCSN  MOVE PROC/STEP NAME\n         LR    R10,R9                RESTORE CSCB POINTER\n         B     WRITE\nLOOP2A   DS    0H\n         MVC   LINETYPE(3),=C'STC'   MOVE TYPE\n         MVC   LINEJOBN(8),CHCLS     MOVE JOBNAME\n         MVC   LINESTEP(8),CHSTEP    MOVE STEPNAME\n         MVC   LINEPRST(8),CHKEY     MOVE PROC/STEP NAME\n         B     WRITE\nLOOP2    DS    0H\nLOOP2X   DS    0H\n         TM    CHTRKID,CHJOBID       IS THIS AN STC?\n         BNO   CHKTSU                 NO - CHECK IF TSO USER\n         MVC   LINETYPE(3),=C'STC'   MOVE TYPE\n         MVC   LINEJOBN(8),CHCLS     MOVE JOBNAME\n         MVC   LINESTEP(8),CHKEY     MOVE STEPNAME\n         MVC   LINEPRST(8),CHPROCSN  MOVE PROC/STEP NAME\n         B     WRITE\nCHKTSU   DS    0H\n         TM    CHTRKID,CHTSID        IS THIS AN TSO USER?\n         BNO   LOOPA                  NO - IT'S NOT ANYTHING\n         MVC   LINETYPE(3),=C'TSU'   MOVE TYPE\n         MVC   LINEJOBN(8),CHKEY     MOVE JOBNAME\n         MVC   LINESTEP(8),CHPROCSN  MOVE STEPNAME\n         MVC   LINEPRST(8),CHCLS     MOVE PROC/STEP NAME\n         B     WRITE\nWRITE    DS    0H\n         L     R7,ASCBOUCB           LOAD ADR OF OUCB AREA\n         USING OUCB,R7               TELL ASSEMBLER ABOUT IT\n         CLC   CHCLS(8),=CL8'VTAM'\n         BNE   WRITE1\n*        ABEND 091,DUMP\nWRITE1   DS    0H\n         BAL   R9,ASID               EXTRACT ASID\n         BAL   R9,DPRTY              EXTRACT DISPATCHING PRIORITY\n         BAL   R9,NPG\n*        BAL   R9,RPG\n*        BAL   R9,NDP\n*        BAL   R9,RDP\n         BAL   R9,DMN\n         BAL   R9,MEMSWPO            EXTRACT SWAP INFORMATION\n         BAL   R9,WSS                PROCESS WSS FLD\n         LA    R9,LINE               POINT TO PRINT LINE\n         APUT  (R9),79               DISPLAY THE LINE W/VARIABLE INFO\n         MVI   LINE,X'40'            PREP TO CLEAR LINE\n         MVC   LINE+1(78),LINE        AND CLEAR REMAINDER\n         B     LOOPA                 GO BACK AND SEE IF THERE IS MORE\nASID     DS    0H\n         L     R0,=F'2'              SET LENGTH OF FIELD\n         LA    R14,ASCBASID          POINT TO ASID FIELD\n         LA    R15,LINEASID          POINT TO OUR AREA ON OUTPUT LINE\nASIDB    EQU   *\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,ASIDB              LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nDPRTY    DS    0H\n         L     R0,=F'1'              SET LENGTH OF FIELD\n         LA    R14,ASCBDP            POINT TO ASID FIELD\n         LA    R15,LINEDPRT          POINT TO OUR AREA ON OUTPUT LINE\nDPRTYB   EQU   *\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,DPRTYB             LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nNPG      DS    0H\n         L     R0,=F'1'              SET LENGTH OF FIELD\n         LA    R14,OUCBNPG           POINT TO NPG  FIELD\n         LA    R15,LINENPG           POINT TO OUR AREA ON OUTPUT LINE\nNPGL     DS    0H\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,NPGL               LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nDMN      DS    0H\n         L     R0,=F'1'              SET LENGTH OF FIELD\n         LA    R14,OUCBDMN           POINT TO NPG  FIELD\n         LA    R15,LINEDMN           POINT TO OUR AREA ON OUTPUT LINE\nDMNL     DS    0H\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,DMNL               LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nMEMSWPO  DS    0H\n         SR    R15,R15               CLEAR COMPARE REGISTER\n         IC    R15,OUCBSRC           LOAD IN SAWP REASON\n         SLL   R15,2                 SHIFT TO GET INDEX\n         LA    R15,SAWPREAS(R15)     POINT TO THE ENTRY\n         MVC   LINESWRC(4),0(R15)    MOVE IT TO OUTPUT LINE\n*\n         TM    OUCBSFL,OUCBNSW       NON-SWAPABLE\n         BZ    MEMPOS1                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'NS'    SET AS NON-SWAPABLE\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS1  EQU   *\n         TM    OUCBSFL,OUCBPVL       PRIVALEDGE STATUS?\n         BZ    MEMPOS2                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'PR'    SET AS PRIVALEDGED - NOW NICE EH?\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS2  EQU   *\n         TM    OUCBSFL,OUCBOFF       WAITING?\n         BZ    MEMPOS3                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'WA'    SET AS WAITING\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS3  EQU   *\n         TM    OUCBSFL,OUCBOUT       SWAPPED OUT?\n         BZ    MEMPOS4                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'OU'    SET AS SWAPPED OUT\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS4  EQU   *\n         TM    OUCBQFL,OUCBGOO+OUCBGOI+OUCBGOB  IN TRANSITION?\n         BZ    MEMPOSU                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'<>'    SET AS IN TRANSITION\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOSU  EQU   *\n         MVC   LINEMEMP(2),=C'??'    SET AS TWILIGHT ZONE\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOSX  EQU   *\n         BR    R9                    GO RETURN TO CALLER\nWSS      DS    0H\n         MVC   LINEEXCC,=C'********'\n         SR    R1,R1\n         LH    R1,OUCBTWSS          GET WSS VALUE\n         CVD   R1,DBLAREA           CONVERT IT TO PD FORMAT\n         MVC   LINEWSS(6),EDMASK    MOVE EDIT MASK TO OUTPUT FIELD\n         ED    LINEWSS,DBLAREA+5    EDIT IT FOR OUTPUT\n         BR    R9                   RETURN TO CALLER\n         SPACE 3\nEND      EQU   *\nRETURN   DS    0H\n         L     R13,SAVEAREA+4       RELOAD CALLERS SAP\n         LM    R14,R12,12(R13)      RELOAD CALLERS REGISTERS\n         BR    R14                  RETURN TO CALLER\n         LTORG\nDBLAREA  DC    D'0'\nEDMASK   DC    X'402020202120'\nLINE     DS    0CL69\n         DS    CL1\nLINETYPE DS    CL3\n         DS    CL1\nLINEJOBN DS    CL8\n         DS    CL1\nLINESTEP DS    CL8\n         DS    CL1\nLINEPRST DS    CL8\n         DS    CL1\nLINEASID DS    CL4\n         DS    CL1\nLINEDPRT DS    CL2\n         DS    CL1\nLINEMEMP DS    CL2\n         DS    CL1\nLINESWRC DS    CL4\n         DS    CL1\nLINENPG  DS    CL2\n         DS    CL1\nLINEDMN  DS    CL2\n         DS    CL2\nLINEEXCC DS    CL8\n         DS    CL2\nLINEWSS  DS    CL6\n         DS    CL2\n         DS    CL55\nSAVEAREA DS    18F\nSAVERMCT DS    F\nHEXTBL   DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'    00-0F\n         DC    X'F1',15X'00'                          10-9F\n         DC    X'F2',15X'00'                          20-9F\n         DC    X'F3',15X'00'                          30-9F\n         DC    X'F4',15X'00'                          40-9F\n         DC    X'F5',15X'00'                          50-9F\n         DC    X'F6',15X'00'                          60-9F\n         DC    X'F7',15X'00'                          70-9F\n         DC    X'F8',15X'00'                          80-9F\n         DC    X'F9',15X'00'                          90-9F\n         DC    X'C1',15X'00'                          A0-AF\n         DC    X'C2',15X'00'                          B0-BF\n         DC    X'C3',15X'00'                          C0-CF\n         DC    X'C4',15X'00'                          D0-DF\n         DC    X'C5',15X'00'                          E0-EF\n         DC    X'C6',15X'00'                          F0-FF\nBYTE1    DC    X'00'\nBYTE2    DC    X'00'\nSAWPREAS DC    C'    TPUTTGETLONGPGS<RSS<WAITRQSWDENQEXCHSWAP'\n         PRINT NOGEN\n         CVT   DSECT=YES,LIST=NO\n         PRINT NOGEN\n         IHAASVT DSECT=YES\n         IHAASCB DSECT=YES\n         IHAASXB DSECT=YES\nCSCB     DSECT\n         IEECHAIN\n         IRAOUCB DSECT=YES\n         IHAOUXB DSECT=YES\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DA38": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\t\\x7f\\x01\\x11\\t\\x7f\\x01I\\x01E\\x01E\\x00\\x00\\xe5\\xc5\\xe3\\xe3\\xc5\\xd9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-04-07T00:00:00", "modifydate": "2011-04-07T01:49:00", "lines": 325, "newlines": 325, "modlines": 0, "user": "VETTER"}, "text": "//SCOTTC  JOB 'DA ',CLASS=A,MSGCLASS=X,NOTIFY=SCOTT,\n//         MSGLEVEL=(1,1),REGION=2048K\n//STEP1    EXEC  ASMFCL,\n//           PARM.LKED='XREF,LET,LIST,NCAL,AC=1'\n//ASM.SYSLIB DD  DSN=SYS1.MACLIB,DISP=SHR\n//        DD  DSN=SYS1.AMACLIB,DISP=SHR\n//        DD  DSN=SYS1.AMODGEN,DISP=SHR\n//ASM.SYSIN  DD  *\nDA       START 0\n         SPACE 3\n* ***************************************************************\n*\n*     NAME:     DA\n*     PURPOSE:  TO TEST THE DA COMMAND STRUCTURE\n*     NOTE(S):\n*\n*\n*\n* ***************************************************************\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 3\n         DS    0H\n         STM   R14,R12,12(R13)      SAVE CALLERS REGISTERS\n         BALR  R12,0                COPY BASE REGISTER\n         USING *,R12\n         ST    R13,SAVEAREA+4       SAVE CALLERS SAP\n         LA    R13,SAVEAREA         POINT TO OUR SAVE AREA\n         LR    R4,R1                SAVE PARM POINTER\n         SPACE 3\n         L     R1,16                 POINT TO CVT\n         USING CVT,R1                TELL ASSEMBLER TO MAP IT\n         L     R2,CVTOPCTP           LOAD PTR TO SRM'S RMCT\n         ST    R2,SAVERMCT           AND SAVE IT FOR LATER USE\n         L     R2,CVTASVT            LOAD THE FIRST ASVT\n         USING ASVT,R2               AND TELL ASSEMBLER TO MAP IT\n*        CLC   ASVTASVT(4),=C'ASVT'  GOT ASVT?\n*        BE    GOTASVT                YES - CONTINUE\n*        TPUT  =C'NO ASVT FND',10\n*        ABEND 90\n         TPUT  =C' SJT JOBNAME  STEPNAME PROCSTEP ASID DP PG SWPR PG DMX\n                        ',60\nGOTASVT  DS    0H\n         L     R3,ASVTMAXU            GET MAX # OF ASVT ENTRIES\n         LR    R6,R3                  COPY MAX ASVTS\n         LA    R3,2(R3)\n         USING ASVT,R2\n         LA    R4,ASVTFRST-4          POINT TO ASVT ENTRY -4\n         CLC   ASVTASVT(4),=C'ASVT'  GOT THE ASVT?\n         BE    A1\n         TPUT  =C'NO ASVT FND',10\n         ABEND 001,DUMP\n         USING ASCB,R5\n         USING CSCB,R10\nA1       DS    0H\nLOOPA    BCT   R3,LOOP\n         B     END\nLOOP     EQU   *\n         LA    R4,4(R4)              INCREMENT INTO ASVT\n         L     R5,0(R4)              LOAD ASCB ADDRESS\n         LTR   R5,R5                 AT THE END?\n         BZ    END                    YES - GO END\nLOOPZ    EQU   *\n         TM    0(R4),X'80'           ASVT ENTRY AVAILABLE?\n         BO    LOOPA                  YES - SKIP IT\n         MVI   LINE,X'40'            PREP TO CLEAR LINE\n         MVC   LINE+1(69),LINE        AND CLEAR THE REST OF IT\nLOOP1    EQU   *\n         L     R10,ASCBCSCB          LOAD CSCB ADDRESS\n         TM    CHTRKID,CHINITID      IS THIS AN INIT?\n         BNO   LOOP2                  NO -\n         LR    R9,R10                SAVE CSCB POINTER\n         L     R8,ASCBJBNI           POINT TO JOBNAME\n         LTR   R8,R8                 DOES IT CONTAIN SOMETHING?\n         BZ    LOOP2A                 NO ENTRY\n         S     R8,=F'8'              SUBTRACT 8\n         LR    R10,R8                SAVE IT\n         MVC   LINETYPE(3),=C'JOB'   MOVE TYPE\n         MVC   LINEJOBN(8),CHKEY     MOVE JOBNAME\n         MVC   LINESTEP(8),CHSTEP    MOVE STEPNAME\n         MVC   LINEPRST(8),CHPROCSN  MOVE PROC/STEP NAME\n         LR    R10,R9                RESTORE CSCB POINTER\n         B     WRITE\nLOOP2A   DS    0H\n         MVC   LINETYPE(3),=C'STC'   MOVE TYPE\n         MVC   LINEJOBN(8),CHCLS     MOVE JOBNAME\n         MVC   LINESTEP(8),CHSTEP    MOVE STEPNAME\n         MVC   LINEPRST(8),CHKEY     MOVE PROC/STEP NAME\n         B     WRITE\nLOOP2    DS    0H\nLOOP2X   DS    0H\n         TM    CHTRKID,CHJOBID       IS THIS AN STC?\n         BNO   CHKTSU                 NO - CHECK IF TSO USER\n         MVC   LINETYPE(3),=C'STC'   MOVE TYPE\n         MVC   LINEJOBN(8),CHCLS     MOVE JOBNAME\n         MVC   LINESTEP(8),CHKEY     MOVE STEPNAME\n         MVC   LINEPRST(8),CHPROCSN  MOVE PROC/STEP NAME\n         B     WRITE\nCHKTSU   DS    0H\n         TM    CHTRKID,CHTSID        IS THIS AN TSO USER?\n         BNO   LOOPA                  NO - IT'S NOT ANYTHING\n         MVC   LINETYPE(3),=C'TSU'   MOVE TYPE\n         MVC   LINEJOBN(8),CHKEY     MOVE JOBNAME\n         MVC   LINESTEP(8),CHPROCSN  MOVE STEPNAME\n         MVC   LINEPRST(8),CHCLS     MOVE PROC/STEP NAME\n         B     WRITE\nWRITE    DS    0H\n         L     R7,ASCBOUCB           LOAD ADR OF OUCB AREA\n         USING OUCB,R7               TELL ASSEMBLER ABOUT IT\n         CLC   CHCLS(8),=CL8'VTAM'\n         BNE   WRITE1\n*        ABEND 091,DUMP\nWRITE1   DS    0H\n         BAL   R9,ASID               EXTRACT ASID\n         BAL   R9,DPRTY              EXTRACT DISPATCHING PRIORITY\n         BAL   R9,NPG\n*        BAL   R9,RPG\n*        BAL   R9,NDP\n*        BAL   R9,RDP\n         BAL   R9,DMN\n         BAL   R9,MEMSWPO            EXTRACT SWAP INFORMATION\n         BAL   R9,WSS                PROCESS WSS FLD\n         LA    R9,LINE               POINT TO PRINT LINE\n         TPUT  (R9),79               DISPLAY THE LINE W/VARIABLE INFO\n         MVI   LINE,X'40'            PREP TO CLEAR LINE\n         MVC   LINE+1(78),LINE        AND CLEAR REMAINDER\n         B     LOOPA                 GO BACK AND SEE IF THERE IS MORE\nASID     DS    0H\n         L     R0,=F'2'              SET LENGTH OF FIELD\n         LA    R14,ASCBASID          POINT TO ASID FIELD\n         LA    R15,LINEASID          POINT TO OUR AREA ON OUTPUT LINE\nASIDB    EQU   *\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,ASIDB              LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nDPRTY    DS    0H\n         L     R0,=F'1'              SET LENGTH OF FIELD\n         LA    R14,ASCBDP            POINT TO ASID FIELD\n         LA    R15,LINEDPRT          POINT TO OUR AREA ON OUTPUT LINE\nDPRTYB   EQU   *\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,DPRTYB             LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nNPG      DS    0H\n         L     R0,=F'1'              SET LENGTH OF FIELD\n         LA    R14,OUCBNPG           POINT TO NPG  FIELD\n         LA    R15,LINENPG           POINT TO OUR AREA ON OUTPUT LINE\nNPGL     DS    0H\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,NPGL               LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nDMN      DS    0H\n         L     R0,=F'1'              SET LENGTH OF FIELD\n         LA    R14,OUCBDMN           POINT TO NPG  FIELD\n         LA    R15,LINEDMN           POINT TO OUR AREA ON OUTPUT LINE\nDMNL     DS    0H\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,DMNL               LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nMEMSWPO  DS    0H\n         SR    R15,R15               CLEAR COMPARE REGISTER\n         IC    R15,OUCBSRC           LOAD IN SAWP REASON\n         SLL   R15,2                 SHIFT TO GET INDEX\n         LA    R15,SAWPREAS(R15)     POINT TO THE ENTRY\n         MVC   LINESWRC(4),0(R15)    MOVE IT TO OUTPUT LINE\n*\n         TM    OUCBSFL,OUCBNSW       NON-SWAPABLE\n         BZ    MEMPOS1                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'NS'    SET AS NON-SWAPABLE\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS1  EQU   *\n         TM    OUCBSFL,OUCBPVL       PRIVALEDGE STATUS?\n         BZ    MEMPOS2                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'PR'    SET AS PRIVALEDGED - NOW NICE EH?\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS2  EQU   *\n         TM    OUCBSFL,OUCBOFF       WAITING?\n         BZ    MEMPOS3                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'WA'    SET AS WAITING\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS3  EQU   *\n         TM    OUCBSFL,OUCBOUT       SWAPPED OUT?\n         BZ    MEMPOS4                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'OU'    SET AS SWAPPED OUT\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS4  EQU   *\n         TM    OUCBQFL,OUCBGOO+OUCBGOI+OUCBGOB  IN TRANSITION?\n         BZ    MEMPOSU                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'<>'    SET AS IN TRANSITION\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOSU  EQU   *\n         MVC   LINEMEMP(2),=C'??'    SET AS TWILIGHT ZONE\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOSX  EQU   *\n         BR    R9                    GO RETURN TO CALLER\nWSS      DS    0H\n         MVC   LINEEXCC,=C'********'\n         SR    R1,R1\n         LH    R1,OUCBWSS           GET WSS VALUE\n         CVD   R1,DBLAREA           CONVERT IT TO PD FORMAT\n         MVC   LINEWSS(6),EDMASK    MOVE EDIT MASK TO OUTPUT FIELD\n         ED    LINEWSS,DBLAREA+5    EDIT IT FOR OUTPUT\n         BR    R9                   RETURN TO CALLER\n         SPACE 3\nEND      EQU   *\nRETURN   DS    0H\n         L     R13,SAVEAREA+4       RELOAD CALLERS SAP\n         LM    R14,R12,12(R13)      RELOAD CALLERS REGISTERS\n         BR    R14                  RETURN TO CALLER\n         LTORG\nDBLAREA  DC    D'0'\nEDMASK   DC    X'402020202120'\nLINE     DS    0CL69\n         DS    CL1\nLINETYPE DS    CL3\n         DS    CL1\nLINEJOBN DS    CL8\n         DS    CL1\nLINESTEP DS    CL8\n         DS    CL1\nLINEPRST DS    CL8\n         DS    CL1\nLINEASID DS    CL4\n         DS    CL1\nLINEDPRT DS    CL2\n         DS    CL1\nLINEMEMP DS    CL2\n         DS    CL1\nLINESWRC DS    CL4\n         DS    CL1\nLINENPG  DS    CL2\n         DS    CL1\nLINEDMN  DS    CL2\n         DS    CL2\nLINEEXCC DS    CL8\n         DS    CL2\nLINEWSS  DS    CL6\n         DS    CL2\n         DS    CL55\nSAVEAREA DS    18F\nSAVERMCT DS    F\nHEXTBL   DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'    00-0F\n         DC    X'F1',15X'00'                          10-9F\n         DC    X'F2',15X'00'                          20-9F\n         DC    X'F3',15X'00'                          30-9F\n         DC    X'F4',15X'00'                          40-9F\n         DC    X'F5',15X'00'                          50-9F\n         DC    X'F6',15X'00'                          60-9F\n         DC    X'F7',15X'00'                          70-9F\n         DC    X'F8',15X'00'                          80-9F\n         DC    X'F9',15X'00'                          90-9F\n         DC    X'C1',15X'00'                          A0-AF\n         DC    X'C2',15X'00'                          B0-BF\n         DC    X'C3',15X'00'                          C0-CF\n         DC    X'C4',15X'00'                          D0-DF\n         DC    X'C5',15X'00'                          E0-EF\n         DC    X'C6',15X'00'                          F0-FF\nBYTE1    DC    X'00'\nBYTE2    DC    X'00'\nSAWPREAS DC    C'    TPUTTGETLONGPGS<RSS<WAITRQSWDENQEXCHSWAP'\n         PRINT NOGEN\n         CVT   DSECT=YES,LIST=NO\n         PRINT NOGEN\n         IHAASVT DSECT=YES\n         IHAASCB DSECT=YES\n         IHAASXB DSECT=YES\nCSCB     DSECT\n         IEECHAIN\n         IRAOUCB DSECT=YES\n         IHAOUXB DSECT=YES\n         END\n//LKED.SYSLMOD DD  DSN=SYS2.LINKLIB(DA),DISP=SHR\n/*\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DT": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00X\\x01\\x11\\t/\\x01\\x11\\t?\\x13\\x15\\x01j\\x01t\\x00e\\xe5\\xc5\\xe3\\xe3\\xc5\\xd9@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2011-04-02T00:00:00", "modifydate": "2011-04-03T13:15:58", "lines": 362, "newlines": 372, "modlines": 101, "user": "VETTER"}, "text": "DT       RMODE 24\nDT       AMODE 31\nDT       START 0\n         SPACE 3\n* ***************************************************************\n*\n*     NAME:      DT\n*     WRITEN BY: SCOTT VETTER\n*     COPYWRITE: GPL\n*                OWNER RETAINS RIGHTS\n*     PURPOSE:   TO DISPLAY THE TSO USERS ON THE SYSTEM.\n*     INPUT:     NONE\n*     PARM:      NONE   - JUST DISPLAY THE USERID\n*                DETAIL - DISPLAY THE DETAIL FOR THE USER\n*                D      - SAME AS ABOVE\n*     OUTPUT:    DISPLAY THE TSO USERS\n*     ABENDS:    1 - COMMAND WAS NOT \"DT\".\n*                2 - ASVT WAS FOUND TO BE BAD.\n*     NOTE(S):   INTENDED TO RUN ON A TSO USER'S SCREEN.\n*     DATASETS:  NONE\n*     REQUIREMENTS:  DURING ASSEMBLY, SYSLIB REQUIRES:\n*                      SYS1.AMACLIB\n*                      SYS1.MACLIB\n*                      SYS1.AMODGEN\n*                    MUST BE LOADED INTO AN AUTHORIZED LIBRARY\n*                    LINKED WITH AC=1.\n*     MACROS:    INTERNAL - NONE\n*                EXTERNAL - TPUT, ABEND\n*     CONTROL BLOCKS: CVT, IHAASVT, IHAASXB, IEECHAIN, IRAOUCB, IHAOUXB\n*     TO BE DONE:\n*          - ADD TSO HELP\n*          - CLEANUP AND ADD INTERNAL DOCUMENTATION.\n*     CHANGE LOG:\n*\n*\n* ***************************************************************\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 3\n         DS    0H\n         STM   R14,R12,12(R13)       SAVE CALLERS REGISTERS\n         BALR  R12,0                 COPY BASE REGISTER\n         USING *,R12                 TELL ASMBLR BASE REGISTER\n         ST    R13,SAVEAREA+4        SAVE CALLERS SAP\n         LA    R13,SAVEAREA          POINT TO OUR SAVE AREA\n         LR    R4,R1                 SAVE PARM POINTER\n         SPACE 3\n*   PROCESS PARM\n         L     R5,0(R4)              GET START OF PARM LEN\n         LA    R5,4(R5)              POINT TO COMMAND START\n         MVC   CMDPARM(20),0(R5)     MOVE CMD AND PARM TO HOLD AREA\n         OC    CMDPARM(20),=20X'40'  UPPERCASE DATA IN HOLD AREA\n         LA    R5,CMDPARM            POINT TO CMD AND PARM HOLD AREA\n         CLC   CMDPARM(2),=C'DT'     DT COMMAND?\n         BE    P1                     YES - GO CONTINUE\n         TPUT  CMDPARM,20\n         ABEND 1                     GO END PROGRAM\nP1       DS    0H\n         LA    R5,3(R5)              POINT PAST COMMAND TO PARM\n         CLC   0(1,R5),=C' '         NODETAIL REQUESTED?\n         BE    PARMBYP                NO - GO CHECK FOR MORE\n         CLC   0(7,R5),=C'DETAIL '   DETAIL REQUESTED?\n         BNE   PARMBYP1               NO - GO CHECK FOR MORE\n         MVI   DETAILSW,C'1'         SET TO DISPLAY DETAIL\n         B     PARMBYP               GO RUN PROGRAM\nPARMBYP1 DS    0H\n         CLC   0(2,R5),=C'D '        DETAIL REQUESTED?\n         BNE   PARMBYPE               NO - GOT TO BE AN ERROR\n         MVI   DETAILSW,C'1'         SET TO DISPLAY DETAIL\n         B     PARMBYP               GO RUN PROGRAM\nPARMBYPE DS    0H\n         TPUT  =C' * INVALID PARAMETER RECEIVED. ',29\n         B     RETURN                GO END PROGRAM\n         SPACE 3\nPARMBYP  DS    0H\n         L     R1,16                 POINT TO CVT\n         USING CVT,R1                TELL ASSEMBLER TO MAP IT\n         L     R2,CVTOPCTP           LOAD PTR TO SRM'S RMCT\n         ST    R2,SAVERMCT           AND SAVE IT FOR LATER USE\n         L     R2,CVTASVT            LOAD THE FIRST ASVT\n         USING ASVT,R2               AND TELL ASSEMBLER TO MAP IT\n*        CLC   ASVTASVT(4),=C'ASVT'  GOT ASVT?\n*        BE    GOTASVT                YES - CONTINUE\n*        TPUT  =C'NO ASVT FND',10\n*        ABEND 90\n         TPUT  =C' TSO USERS: ',12\n         CLI   DETAILSW,C'0'          DETAIL TO BE DISPLAYED?\n         BE    GOTASVT                NO - BYPASS THE LABEL\n         TPUT  =C'     JOBNAME  STEPNAME PROCSTEP ASID DP PG SWPR PG DMX\n                JES#    ',60\nGOTASVT  DS    0H\n         L     R3,ASVTMAXU            GET MAX # OF ASVT ENTRIES\n         LR    R6,R3                  COPY MAX ASVTS\n         LA    R3,2(R3)\n         USING ASVT,R2\n         LA    R4,ASVTFRST-4          POINT TO ASVT ENTRY -4\n         CLC   ASVTASVT(4),=C'ASVT'  GOT THE ASVT?\n         BE    A1\n         TPUT  =C'NO ASVT FND',10\n         ABEND 002,DUMP\n         USING ASCB,R5\n         USING CSCB,R10\nA1       DS    0H\nLOOPA    BCT   R3,LOOP\n         B     END\nLOOP     EQU   *\n         LA    R4,4(R4)              INCREMENT INTO ASVT\n         L     R5,0(R4)              LOAD ASCB ADDRESS\n         LTR   R5,R5                 AT THE END?\n         BZ    END                    YES - GO END\nLOOPZ    EQU   *\n         TM    0(R4),X'80'           ASVT ENTRY AVAILABLE?\n         BO    LOOPA                  YES - SKIP IT\n         MVI   LINE,X'40'            PREP TO CLEAR LINE\n         MVC   LINE+1(79),LINE        AND CLEAR THE REST OF IT\nLOOP1    EQU   *\n         L     R10,ASCBCSCB          LOAD CSCB ADDRESS\n         TM    CHTRKID,CHINITID      IS THIS AN INIT?\n         BNO   LOOP2                  NO -\n         LR    R9,R10                SAVE CSCB POINTER\n         L     R8,ASCBJBNI           POINT TO JOBNAME\n         LTR   R8,R8                 DOES IT CONTAIN SOMETHING?\n         BZ    LOOP2A                 NO ENTRY\n         S     R8,=F'8'              SUBTRACT 8\n         LR    R10,R8                SAVE IT\n         B     LOOPA                 GO BACK AND SEE IF THERE IS MORE\nLOOP2A   DS    0H\n         B     LOOPA                 GO BACK AND SEE IF THERE IS MORE\nLOOP2    DS    0H\nLOOP2X   DS    0H\n         TM    CHTRKID,CHJOBID       IS THIS AN STC?\n         BNO   CHKTSU                 NO - CHECK IF TSO USER\n         B     LOOPA                 GO BACK AND SEE IF THERE IS MORE\nCHKTSU   DS    0H\n         TM    CHTRKID,CHTSID        IS THIS AN TSO USER?\n         BNO   LOOPA                  NO - IT'S NOT ANYTHING - BYPASS\n         MVC   LINEJOBN(8),CHKEY     MOVE JOBNAME\n         CLI   DETAILSW,C'0'         DETAIL TO BE DISPLAYED?\n         BE    CHKTSUW                NO - BYPASS THE DETAIL\n         MVC   LINESTEP(8),CHPROCSN  MOVE STEPNAME\n         MVC   LINEPRST(8),CHCLS     MOVE PROC/STEP NAME\nCHKTSUW  DS    0H\n         B     WRITE\nWRITE    DS    0H\n         L     R7,ASCBOUCB           LOAD ADR OF OUCB AREA\n         USING OUCB,R7               TELL ASSEMBLER ABOUT IT\nWRITE1   DS    0H\n         CLI   DETAILSW,C'0'         DETAIL TO BE DISPLAYED?\n         BE    WRITE2                 NO - BYPASS THE DETAIL\n         BAL   R9,ASID               EXTRACT ASID\n         BAL   R9,DPRTY              EXTRACT DISPATCHING PRIORITY\n         BAL   R9,NPG\n*        BAL   R9,RPG\n*        BAL   R9,NDP\n*        BAL   R9,RDP\n         BAL   R9,DMN\n         BAL   R9,MEMSWPO            EXTRACT SWAP INFORMATION\n*        BAL   R9,WSS                PROCESS WSS FLD\nWRITE2   DS    0H\n         LA    R9,LINE               POINT TO PRINT LINE\n         TPUT  (R9),79               DISPLAY THE LINE W/VARIABLE INFO\n         MVI   LINE,X'40'            PREP TO CLEAR LINE\n         MVC   LINE+1(79),LINE        AND CLEAR REMAINDER\n         B     LOOPA                 GO BACK AND SEE IF THERE IS MORE\nASID     DS    0H\n         L     R0,=F'2'              SET LENGTH OF FIELD\n         LA    R14,ASCBASID          POINT TO ASID FIELD\n         LA    R15,LINEASID          POINT TO OUR AREA ON OUTPUT LINE\nASIDB    EQU   *\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,ASIDB              LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nDPRTY    DS    0H\n         L     R0,=F'1'              SET LENGTH OF FIELD\n         LA    R14,ASCBDP            POINT TO ASID FIELD\n         LA    R15,LINEDPRT          POINT TO OUR AREA ON OUTPUT LINE\nDPRTYB   EQU   *\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,DPRTYB             LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nNPG      DS    0H\n         L     R0,=F'1'              SET LENGTH OF FIELD\n         LA    R14,OUCBNPG           POINT TO NPG  FIELD\n         LA    R15,LINENPG           POINT TO OUR AREA ON OUTPUT LINE\nNPGL     DS    0H\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,NPGL               LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nDMN      DS    0H\n         L     R0,=F'1'              SET LENGTH OF FIELD\n         LA    R14,OUCBDMN           POINT TO NPG  FIELD\n         LA    R15,LINEDMN           POINT TO OUR AREA ON OUTPUT LINE\nDMNL     DS    0H\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,DMNL               LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nMEMSWPO  DS    0H\n         SR    R15,R15               CLEAR COMPARE REGISTER\n         IC    R15,OUCBSRC           LOAD IN SAWP REASON\n         SLL   R15,2                 SHIFT TO GET INDEX\n         LA    R15,SAWPREAS(R15)     POINT TO THE ENTRY\n         MVC   LINESWRC(4),0(R15)    MOVE IT TO OUTPUT LINE\n*\n         TM    OUCBSFL,OUCBNSW       NON-SWAPABLE\n         BZ    MEMPOS1                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'NS'    SET AS NON-SWAPABLE\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS1  EQU   *\n         TM    OUCBSFL,OUCBPVL       PRIVALEDGE STATUS?\n         BZ    MEMPOS2                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'PR'    SET AS PRIVALEDGED - NOW NICE EH?\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS2  EQU   *\n         TM    OUCBSFL,OUCBOFF       WAITING?\n         BZ    MEMPOS3                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'WA'    SET AS WAITING\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS3  EQU   *\n         TM    OUCBSFL,OUCBOUT       SWAPPED OUT?\n         BZ    MEMPOS4                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'OU'    SET AS SWAPPED OUT\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS4  EQU   *\n         TM    OUCBQFL,OUCBGOO+OUCBGOI+OUCBGOB  IN TRANSITION?\n         BZ    MEMPOSU                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'<>'    SET AS IN TRANSITION\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOSU  EQU   *\n         MVC   LINEMEMP(2),=C'??'    SET AS TWILIGHT ZONE\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOSX  EQU   *\n         BR    R9                    GO RETURN TO CALLER\nWSS      DS    0H\n         MVC   LINEEXCC,=C'********'\n         SR    R1,R1\n         LH    R1,OUCBTWSS          GET WSS VALUE\n         CVD   R1,DBLAREA           CONVERT IT TO PD FORMAT\n         MVC   LINEWSS(6),EDMASK    MOVE EDIT MASK TO OUTPUT FIELD\n         ED    LINEWSS,DBLAREA+5    EDIT IT FOR OUTPUT\n         BR    R9                   RETURN TO CALLER\n         SPACE 3\nEND      EQU   *\nRETURN   DS    0H\n         L     R13,SAVEAREA+4       RELOAD CALLERS SAP\n         LM    R14,R12,12(R13)      RELOAD CALLERS REGISTERS\n         SR    R15,R15              ZERO RETURN CODE\n         BR    R14                  RETURN TO CALLER\n         LTORG\nDETAILSW DC    C'0'       0=NO DETAIL / 1=DISPLAY DETAIL\nCMDPARM  DC    20C' '     PARAMETER AREA\nDBLAREA  DC    D'0'\nEDMASK   DC    X'402020202120'\nLINE     DS    0CL79\n         DS    CL1\nLINETYPE DS    CL3\n         DS    CL1\nLINEJOBN DS    CL8\n         DS    CL1\nLINESTEP DS    CL8\n         DS    CL1\nLINEPRST DS    CL8\n         DS    CL1\nLINEASID DS    CL4\n         DS    CL1\nLINEDPRT DS    CL2\n         DS    CL1\nLINEMEMP DS    CL2\n         DS    CL1\nLINESWRC DS    CL4\n         DS    CL1\nLINENPG  DS    CL2\n         DS    CL1\nLINEDMN  DS    CL2\n         DS    CL2\nLINEEXCC DS    CL8\n         DS    CL2\nLINEWSS  DS    CL6\n         DS    CL12\n         DS    CL55\nSAVEAREA DS    18F\nSAVERMCT DS    F\nHEXTBL   DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'    00-0F\n         DC    X'F1',15X'00'                          10-9F\n         DC    X'F2',15X'00'                          20-9F\n         DC    X'F3',15X'00'                          30-9F\n         DC    X'F4',15X'00'                          40-9F\n         DC    X'F5',15X'00'                          50-9F\n         DC    X'F6',15X'00'                          60-9F\n         DC    X'F7',15X'00'                          70-9F\n         DC    X'F8',15X'00'                          80-9F\n         DC    X'F9',15X'00'                          90-9F\n         DC    X'C1',15X'00'                          A0-AF\n         DC    X'C2',15X'00'                          B0-BF\n         DC    X'C3',15X'00'                          C0-CF\n         DC    X'C4',15X'00'                          D0-DF\n         DC    X'C5',15X'00'                          E0-EF\n         DC    X'C6',15X'00'                          F0-FF\nBYTE1    DC    X'00'\nBYTE2    DC    X'00'\nSAWPREAS DC    C'    TPUTTGETLONGPGS<RSS<WAITRQSWDENQEXCHSWAP'\n         PRINT NOGEN\n         CVT   DSECT=YES,LIST=NO\n         PRINT NOGEN\n         IHAASVT DSECT=YES\n         IHAASCB DSECT=YES\n         IHAASXB DSECT=YES\nCSCB     DSECT\n         IEECHAIN\n         IRAOUCB DSECT=YES\n         IHAOUXB DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DT$": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00%\\x01\\x11\\x08o\\x01\\x11\\t?\\x11S\\x00\\x1c\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2011-03-27T00:00:00", "modifydate": "2011-04-03T11:53:25", "lines": 28, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT482.FILE849(DTP)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   DT\n SETCODE AC(0)\n SETSSI  CB482849\n NAME    DT(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DT$1": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x16\\x01\\x11\\x08o\\x01\\x11\\t?\\x13\\x16\\x00\\x1c\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2011-03-27T00:00:00", "modifydate": "2011-04-03T13:16:16", "lines": 28, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT482.FILE849(DT)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   DT\n SETCODE AC(0)\n SETSSI  CB482849\n NAME    DT(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DTP": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x05\\x01\\x11\\t/\\x01\\x11\\t?\\x11S\\x02\\xbe\\x01t\\x01\\xbc\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2011-04-02T00:00:00", "modifydate": "2011-04-03T11:53:05", "lines": 702, "newlines": 372, "modlines": 444, "user": "SBGOLOB"}, "text": "DT       RMODE 24\nDT       AMODE 31\nDT       START 0\n         SPACE 3\n* ***************************************************************\n*\n*     NAME:      DT\n*     WRITEN BY: SCOTT VETTER\n*     COPYWRITE: GPL\n*                OWNER RETAINS RIGHTS\n*     PURPOSE:   TO DISPLAY THE TSO USERS ON THE SYSTEM.\n*     INPUT:     NONE\n*     PARM:      NONE   - JUST DISPLAY THE USERID\n*                DETAIL - DISPLAY THE DETAIL FOR THE USER\n*                D      - SAME AS ABOVE\n*     OUTPUT:    DISPLAY THE TSO USERS\n*     ABENDS:    1 - COMMAND WAS NOT \"DT\".\n*                2 - ASVT WAS FOUND TO BE BAD.\n*     NOTE(S):   INTENDED TO RUN ON A TSO USER'S SCREEN.\n*     DATASETS:  NONE\n*     REQUIREMENTS:  DURING ASSEMBLY, SYSLIB REQUIRES:\n*                      SYS1.AMACLIB\n*                      SYS1.MACLIB\n*                      SYS1.AMODGEN\n*                    MUST BE LOADED INTO AN AUTHORIZED LIBRARY\n*                    LINKED WITH AC=1.\n*     MACROS:    INTERNAL - NONE\n*                EXTERNAL - TPUT, ABEND\n*     CONTROL BLOCKS: CVT, IHAASVT, IHAASXB, IEECHAIN, IRAOUCB, IHAOUXB\n*     TO BE DONE:\n*          - ADD TSO HELP\n*          - CLEANUP AND ADD INTERNAL DOCUMENTATION.\n*     CHANGE LOG:\n*\n*\n* ***************************************************************\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 3\n         DS    0H\n         STM   R14,R12,12(R13)       SAVE CALLERS REGISTERS\n         BALR  R12,0                 COPY BASE REGISTER\n         USING *,R12                 TELL ASMBLR BASE REGISTER\n         ST    R13,SAVEAREA+4        SAVE CALLERS SAP\n         LA    R13,SAVEAREA          POINT TO OUR SAVE AREA\n         LR    R4,R1                 SAVE PARM POINTER\n         SPACE 3\n*   PROCESS PARM\n         L     R5,0(R4)              GET START OF PARM LEN\n         LA    R5,4(R5)              POINT TO COMMAND START\n         MVC   CMDPARM(20),0(R5)     MOVE CMD AND PARM TO HOLD AREA\n         OC    CMDPARM(20),=20X'40'  UPPERCASE DATA IN HOLD AREA\n         LA    R5,CMDPARM            POINT TO CMD AND PARM HOLD AREA\n         CLC   CMDPARM(2),=C'DT'     DT COMMAND?\n         BE    P1                     YES - GO CONTINUE\n         APUT  CMDPARM,20\n         ABEND 1                     GO END PROGRAM\nP1       DS    0H\n         LA    R5,3(R5)              POINT PAST COMMAND TO PARM\n         CLC   0(1,R5),=C' '         NODETAIL REQUESTED?\n         BE    PARMBYP                NO - GO CHECK FOR MORE\n         CLC   0(7,R5),=C'DETAIL '   DETAIL REQUESTED?\n         BNE   PARMBYP1               NO - GO CHECK FOR MORE\n         MVI   DETAILSW,C'1'         SET TO DISPLAY DETAIL\n         B     PARMBYP               GO RUN PROGRAM\nPARMBYP1 DS    0H\n         CLC   0(2,R5),=C'D '        DETAIL REQUESTED?\n         BNE   PARMBYPE               NO - GOT TO BE AN ERROR\n         MVI   DETAILSW,C'1'         SET TO DISPLAY DETAIL\n         B     PARMBYP               GO RUN PROGRAM\nPARMBYPE DS    0H\n         APUT  =C' * INVALID PARAMETER RECEIVED. ',29\n         B     RETURN                GO END PROGRAM\n         SPACE 3\nPARMBYP  DS    0H\n         L     R1,16                 POINT TO CVT\n         USING CVT,R1                TELL ASSEMBLER TO MAP IT\n         L     R2,CVTOPCTP           LOAD PTR TO SRM'S RMCT\n         ST    R2,SAVERMCT           AND SAVE IT FOR LATER USE\n         L     R2,CVTASVT            LOAD THE FIRST ASVT\n         USING ASVT,R2               AND TELL ASSEMBLER TO MAP IT\n*        CLC   ASVTASVT(4),=C'ASVT'  GOT ASVT?\n*        BE    GOTASVT                YES - CONTINUE\n*        APUT  =C'NO ASVT FND',10\n*        ABEND 90\n         APUT  =C' TSO USERS: ',12\n         CLI   DETAILSW,C'0'          DETAIL TO BE DISPLAYED?\n         BE    GOTASVT                NO - BYPASS THE LABEL\n         APUT  =C'     JOBNAME  STEPNAME PROCSTEP ASID DP PG SWPR PG DMX\n                JES#    ',60\nGOTASVT  DS    0H\n         L     R3,ASVTMAXU            GET MAX # OF ASVT ENTRIES\n         LR    R6,R3                  COPY MAX ASVTS\n         LA    R3,2(R3)\n         USING ASVT,R2\n         LA    R4,ASVTFRST-4          POINT TO ASVT ENTRY -4\n         CLC   ASVTASVT(4),=C'ASVT'  GOT THE ASVT?\n         BE    A1\n         APUT  =C'NO ASVT FND',10\n         ABEND 002,DUMP\n         USING ASCB,R5\n         USING CSCB,R10\nA1       DS    0H\nLOOPA    BCT   R3,LOOP\n         B     END\nLOOP     EQU   *\n         LA    R4,4(R4)              INCREMENT INTO ASVT\n         L     R5,0(R4)              LOAD ASCB ADDRESS\n         LTR   R5,R5                 AT THE END?\n         BZ    END                    YES - GO END\nLOOPZ    EQU   *\n         TM    0(R4),X'80'           ASVT ENTRY AVAILABLE?\n         BO    LOOPA                  YES - SKIP IT\n         MVI   LINE,X'40'            PREP TO CLEAR LINE\n         MVC   LINE+1(79),LINE        AND CLEAR THE REST OF IT\nLOOP1    EQU   *\n         L     R10,ASCBCSCB          LOAD CSCB ADDRESS\n         TM    CHTRKID,CHINITID      IS THIS AN INIT?\n         BNO   LOOP2                  NO -\n         LR    R9,R10                SAVE CSCB POINTER\n         L     R8,ASCBJBNI           POINT TO JOBNAME\n         LTR   R8,R8                 DOES IT CONTAIN SOMETHING?\n         BZ    LOOP2A                 NO ENTRY\n         S     R8,=F'8'              SUBTRACT 8\n         LR    R10,R8                SAVE IT\n         B     LOOPA                 GO BACK AND SEE IF THERE IS MORE\nLOOP2A   DS    0H\n         B     LOOPA                 GO BACK AND SEE IF THERE IS MORE\nLOOP2    DS    0H\nLOOP2X   DS    0H\n         TM    CHTRKID,CHJOBID       IS THIS AN STC?\n         BNO   CHKTSU                 NO - CHECK IF TSO USER\n         B     LOOPA                 GO BACK AND SEE IF THERE IS MORE\nCHKTSU   DS    0H\n         TM    CHTRKID,CHTSID        IS THIS AN TSO USER?\n         BNO   LOOPA                  NO - IT'S NOT ANYTHING - BYPASS\n         MVC   LINEJOBN(8),CHKEY     MOVE JOBNAME\n         CLI   DETAILSW,C'0'         DETAIL TO BE DISPLAYED?\n         BE    CHKTSUW                NO - BYPASS THE DETAIL\n         MVC   LINESTEP(8),CHPROCSN  MOVE STEPNAME\n         MVC   LINEPRST(8),CHCLS     MOVE PROC/STEP NAME\nCHKTSUW  DS    0H\n         B     WRITE\nWRITE    DS    0H\n         L     R7,ASCBOUCB           LOAD ADR OF OUCB AREA\n         USING OUCB,R7               TELL ASSEMBLER ABOUT IT\nWRITE1   DS    0H\n         CLI   DETAILSW,C'0'         DETAIL TO BE DISPLAYED?\n         BE    WRITE2                 NO - BYPASS THE DETAIL\n         BAL   R9,ASID               EXTRACT ASID\n         BAL   R9,DPRTY              EXTRACT DISPATCHING PRIORITY\n         BAL   R9,NPG\n*        BAL   R9,RPG\n*        BAL   R9,NDP\n*        BAL   R9,RDP\n         BAL   R9,DMN\n         BAL   R9,MEMSWPO            EXTRACT SWAP INFORMATION\n*        BAL   R9,WSS                PROCESS WSS FLD\nWRITE2   DS    0H\n         LA    R9,LINE               POINT TO PRINT LINE\n         APUT  (R9),79               DISPLAY THE LINE W/VARIABLE INFO\n         MVI   LINE,X'40'            PREP TO CLEAR LINE\n         MVC   LINE+1(79),LINE        AND CLEAR REMAINDER\n         B     LOOPA                 GO BACK AND SEE IF THERE IS MORE\nASID     DS    0H\n         L     R0,=F'2'              SET LENGTH OF FIELD\n         LA    R14,ASCBASID          POINT TO ASID FIELD\n         LA    R15,LINEASID          POINT TO OUR AREA ON OUTPUT LINE\nASIDB    EQU   *\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,ASIDB              LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nDPRTY    DS    0H\n         L     R0,=F'1'              SET LENGTH OF FIELD\n         LA    R14,ASCBDP            POINT TO ASID FIELD\n         LA    R15,LINEDPRT          POINT TO OUR AREA ON OUTPUT LINE\nDPRTYB   EQU   *\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,DPRTYB             LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nNPG      DS    0H\n         L     R0,=F'1'              SET LENGTH OF FIELD\n         LA    R14,OUCBNPG           POINT TO NPG  FIELD\n         LA    R15,LINENPG           POINT TO OUR AREA ON OUTPUT LINE\nNPGL     DS    0H\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,NPGL               LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nDMN      DS    0H\n         L     R0,=F'1'              SET LENGTH OF FIELD\n         LA    R14,OUCBDMN           POINT TO NPG  FIELD\n         LA    R15,LINEDMN           POINT TO OUR AREA ON OUTPUT LINE\nDMNL     DS    0H\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,DMNL               LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nMEMSWPO  DS    0H\n         SR    R15,R15               CLEAR COMPARE REGISTER\n         IC    R15,OUCBSRC           LOAD IN SAWP REASON\n         SLL   R15,2                 SHIFT TO GET INDEX\n         LA    R15,SAWPREAS(R15)     POINT TO THE ENTRY\n         MVC   LINESWRC(4),0(R15)    MOVE IT TO OUTPUT LINE\n*\n         TM    OUCBSFL,OUCBNSW       NON-SWAPABLE\n         BZ    MEMPOS1                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'NS'    SET AS NON-SWAPABLE\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS1  EQU   *\n         TM    OUCBSFL,OUCBPVL       PRIVALEDGE STATUS?\n         BZ    MEMPOS2                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'PR'    SET AS PRIVALEDGED - NOW NICE EH?\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS2  EQU   *\n         TM    OUCBSFL,OUCBOFF       WAITING?\n         BZ    MEMPOS3                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'WA'    SET AS WAITING\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS3  EQU   *\n         TM    OUCBSFL,OUCBOUT       SWAPPED OUT?\n         BZ    MEMPOS4                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'OU'    SET AS SWAPPED OUT\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS4  EQU   *\n         TM    OUCBQFL,OUCBGOO+OUCBGOI+OUCBGOB  IN TRANSITION?\n         BZ    MEMPOSU                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'<>'    SET AS IN TRANSITION\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOSU  EQU   *\n         MVC   LINEMEMP(2),=C'??'    SET AS TWILIGHT ZONE\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOSX  EQU   *\n         BR    R9                    GO RETURN TO CALLER\nWSS      DS    0H\n         MVC   LINEEXCC,=C'********'\n         SR    R1,R1\n         LH    R1,OUCBTWSS          GET WSS VALUE\n         CVD   R1,DBLAREA           CONVERT IT TO PD FORMAT\n         MVC   LINEWSS(6),EDMASK    MOVE EDIT MASK TO OUTPUT FIELD\n         ED    LINEWSS,DBLAREA+5    EDIT IT FOR OUTPUT\n         BR    R9                   RETURN TO CALLER\n         SPACE 3\nEND      EQU   *\nRETURN   DS    0H\n         L     R13,SAVEAREA+4       RELOAD CALLERS SAP\n         LM    R14,R12,12(R13)      RELOAD CALLERS REGISTERS\n         SR    R15,R15              ZERO RETURN CODE\n         BR    R14                  RETURN TO CALLER\n         LTORG\nDETAILSW DC    C'0'       0=NO DETAIL / 1=DISPLAY DETAIL\nCMDPARM  DC    20C' '     PARAMETER AREA\nDBLAREA  DC    D'0'\nEDMASK   DC    X'402020202120'\nLINE     DS    0CL79\n         DS    CL1\nLINETYPE DS    CL3\n         DS    CL1\nLINEJOBN DS    CL8\n         DS    CL1\nLINESTEP DS    CL8\n         DS    CL1\nLINEPRST DS    CL8\n         DS    CL1\nLINEASID DS    CL4\n         DS    CL1\nLINEDPRT DS    CL2\n         DS    CL1\nLINEMEMP DS    CL2\n         DS    CL1\nLINESWRC DS    CL4\n         DS    CL1\nLINENPG  DS    CL2\n         DS    CL1\nLINEDMN  DS    CL2\n         DS    CL2\nLINEEXCC DS    CL8\n         DS    CL2\nLINEWSS  DS    CL6\n         DS    CL12\n         DS    CL55\nSAVEAREA DS    18F\nSAVERMCT DS    F\nHEXTBL   DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'    00-0F\n         DC    X'F1',15X'00'                          10-9F\n         DC    X'F2',15X'00'                          20-9F\n         DC    X'F3',15X'00'                          30-9F\n         DC    X'F4',15X'00'                          40-9F\n         DC    X'F5',15X'00'                          50-9F\n         DC    X'F6',15X'00'                          60-9F\n         DC    X'F7',15X'00'                          70-9F\n         DC    X'F8',15X'00'                          80-9F\n         DC    X'F9',15X'00'                          90-9F\n         DC    X'C1',15X'00'                          A0-AF\n         DC    X'C2',15X'00'                          B0-BF\n         DC    X'C3',15X'00'                          C0-CF\n         DC    X'C4',15X'00'                          D0-DF\n         DC    X'C5',15X'00'                          E0-EF\n         DC    X'C6',15X'00'                          F0-FF\nBYTE1    DC    X'00'\nBYTE2    DC    X'00'\nSAWPREAS DC    C'    TPUTTGETLONGPGS<RSS<WAITRQSWDENQEXCHSWAP'\n         PRINT NOGEN\n         CVT   DSECT=YES,LIST=NO\n         PRINT NOGEN\n         IHAASVT DSECT=YES\n         IHAASCB DSECT=YES\n         IHAASXB DSECT=YES\nCSCB     DSECT\n         IEECHAIN\n         IRAOUCB DSECT=YES\n         IHAOUXB DSECT=YES\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DT38": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11\\t/\\x01\\x11\\t/\"\\x02\\x01t\\x01t\\x00\\x00\\xe5\\xc5\\xe3\\xe3\\xc5\\xd9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-04-02T00:00:00", "modifydate": "2011-04-02T22:02:00", "lines": 372, "newlines": 372, "modlines": 0, "user": "VETTER"}, "text": "//SCOTTT  JOB 'DT ',CLASS=A,MSGCLASS=X,NOTIFY=SCOTT,\n//         MSGLEVEL=(1,1),REGION=2048K\n//STEP1    EXEC  ASMFCL,\n//           PARM.LKED='XREF,LET,LIST,NCAL,AC=1'\n//ASM.SYSLIB DD  DSN=SYS1.MACLIB,DISP=SHR\n//        DD  DSN=SYS1.AMACLIB,DISP=SHR\n//        DD  DSN=SYS1.AMODGEN,DISP=SHR\n//ASM.SYSIN  DD  *\nDT       START 0\n         SPACE 3\n* ***************************************************************\n*\n*     NAME:      DT\n*     WRITEN BY: SCOTT VETTER\n*     COPYWRITE: GPL\n*                OWNER RETAINS RIGHTS\n*     PURPOSE:   TO DISPLAY THE TSO USERS ON THE SYSTEM.\n*     INPUT:     NONE\n*     PARM:      NONE   - JUST DISPLAY THE USERID\n*                DETAIL - DISPLAY THE DETAIL FOR THE USER\n*                D      - SAME AS ABOVE\n*     OUTPUT:    DISPLAY THE TSO USERS\n*     ABENDS:    1 - COMMAND WAS NOT \"DT\".\n*                2 - ASVT WAS FOUND TO BE BAD.\n*     NOTE(S):   INTENDED TO RUN ON A TSO USER'S SCREEN.\n*     DATASETS:  NONE\n*     REQUIREMENTS:  DURING ASSEMBLY, SYSLIB REQUIRES:\n*                      SYS1.AMACLIB\n*                      SYS1.MACLIB\n*                      SYS1.AMODGEN\n*                    MUST BE LOADED INTO AN AUTHORIZED LIBRARY\n*                    LINKED WITH AC=1.\n*     MACROS:    INTERNAL - NONE\n*                EXTERNAL - TPUT, ABEND\n*     CONTROL BLOCKS: CVT, IHAASVT, IHAASXB, IEECHAIN, IRAOUCB, IHAOUXB\n*     TO BE DONE:\n*          - ADD TSO HELP\n*          - CLEANUP AND ADD INTERNAL DOCUMENTATION.\n*     CHANGE LOG:\n*\n*\n* ***************************************************************\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 3\n         DS    0H\n         STM   R14,R12,12(R13)       SAVE CALLERS REGISTERS\n         BALR  R12,0                 COPY BASE REGISTER\n         USING *,R12                 TELL ASMBLR BASE REGISTER\n         ST    R13,SAVEAREA+4        SAVE CALLERS SAP\n         LA    R13,SAVEAREA          POINT TO OUR SAVE AREA\n         LR    R4,R1                 SAVE PARM POINTER\n         SPACE 3\n*   PROCESS PARM\n         L     R5,0(R4)              GET START OF PARM LEN\n         LA    R5,4(R5)              POINT TO COMMAND START\n         MVC   CMDPARM(20),0(R5)     MOVE CMD AND PARM TO HOLD AREA\n         OC    CMDPARM(20),=20X'40'  UPPERCASE DATA IN HOLD AREA\n         LA    R5,CMDPARM            POINT TO CMD AND PARM HOLD AREA\n         CLC   CMDPARM(2),=C'DT'     DT COMMAND?\n         BE    P1                     YES - GO CONTINUE\n         TPUT  CMDPARM,20\n         ABEND 1                     GO END PROGRAM\nP1       DS    0H\n         LA    R5,3(R5)              POINT PAST COMMAND TO PARM\n         CLC   0(1,R5),=C' '         NODETAIL REQUESTED?\n         BE    PARMBYP                NO - GO CHECK FOR MORE\n         CLC   0(7,R5),=C'DETAIL '   DETAIL REQUESTED?\n         BNE   PARMBYP1               NO - GO CHECK FOR MORE\n         MVI   DETAILSW,C'1'         SET TO DISPLAY DETAIL\n         B     PARMBYP               GO RUN PROGRAM\nPARMBYP1 DS    0H\n         CLC   0(2,R5),=C'D '        DETAIL REQUESTED?\n         BNE   PARMBYPE               NO - GOT TO BE AN ERROR\n         MVI   DETAILSW,C'1'         SET TO DISPLAY DETAIL\n         B     PARMBYP               GO RUN PROGRAM\nPARMBYPE DS    0H\n         TPUT  =C' * INVALID PARAMETER RECEIVED. ',29\n         B     RETURN                GO END PROGRAM\n         SPACE 3\nPARMBYP  DS    0H\n         L     R1,16                 POINT TO CVT\n         USING CVT,R1                TELL ASSEMBLER TO MAP IT\n         L     R2,CVTOPCTP           LOAD PTR TO SRM'S RMCT\n         ST    R2,SAVERMCT           AND SAVE IT FOR LATER USE\n         L     R2,CVTASVT            LOAD THE FIRST ASVT\n         USING ASVT,R2               AND TELL ASSEMBLER TO MAP IT\n*        CLC   ASVTASVT(4),=C'ASVT'  GOT ASVT?\n*        BE    GOTASVT                YES - CONTINUE\n*        TPUT  =C'NO ASVT FND',10\n*        ABEND 90\n         TPUT  =C' TSO USERS: ',12\n         CLI   DETAILSW,C'0'          DETAIL TO BE DISPLAYED?\n         BE    GOTASVT                NO - BYPASS THE LABEL\n         TPUT  =C'     JOBNAME  STEPNAME PROCSTEP ASID DP PG SWPR PG DMX\n                JES#    ',60\nGOTASVT  DS    0H\n         L     R3,ASVTMAXU            GET MAX # OF ASVT ENTRIES\n         LR    R6,R3                  COPY MAX ASVTS\n         LA    R3,2(R3)\n         USING ASVT,R2\n         LA    R4,ASVTFRST-4          POINT TO ASVT ENTRY -4\n         CLC   ASVTASVT(4),=C'ASVT'  GOT THE ASVT?\n         BE    A1\n         TPUT  =C'NO ASVT FND',10\n         ABEND 002,DUMP\n         USING ASCB,R5\n         USING CSCB,R10\nA1       DS    0H\nLOOPA    BCT   R3,LOOP\n         B     END\nLOOP     EQU   *\n         LA    R4,4(R4)              INCREMENT INTO ASVT\n         L     R5,0(R4)              LOAD ASCB ADDRESS\n         LTR   R5,R5                 AT THE END?\n         BZ    END                    YES - GO END\nLOOPZ    EQU   *\n         TM    0(R4),X'80'           ASVT ENTRY AVAILABLE?\n         BO    LOOPA                  YES - SKIP IT\n         MVI   LINE,X'40'            PREP TO CLEAR LINE\n         MVC   LINE+1(69),LINE        AND CLEAR THE REST OF IT\nLOOP1    EQU   *\n         L     R10,ASCBCSCB          LOAD CSCB ADDRESS\n         TM    CHTRKID,CHINITID      IS THIS AN INIT?\n         BNO   LOOP2                  NO -\n         LR    R9,R10                SAVE CSCB POINTER\n         L     R8,ASCBJBNI           POINT TO JOBNAME\n         LTR   R8,R8                 DOES IT CONTAIN SOMETHING?\n         BZ    LOOP2A                 NO ENTRY\n         S     R8,=F'8'              SUBTRACT 8\n         LR    R10,R8                SAVE IT\n         B     LOOPA                 GO BACK AND SEE IF THERE IS MORE\nLOOP2A   DS    0H\n         B     LOOPA                 GO BACK AND SEE IF THERE IS MORE\nLOOP2    DS    0H\nLOOP2X   DS    0H\n         TM    CHTRKID,CHJOBID       IS THIS AN STC?\n         BNO   CHKTSU                 NO - CHECK IF TSO USER\n         B     LOOPA                 GO BACK AND SEE IF THERE IS MORE\nCHKTSU   DS    0H\n         TM    CHTRKID,CHTSID        IS THIS AN TSO USER?\n         BNO   LOOPA                  NO - IT'S NOT ANYTHING - BYPASS\n         MVC   LINEJOBN(8),CHKEY     MOVE JOBNAME\n         CLI   DETAILSW,C'0'         DETAIL TO BE DISPLAYED?\n         BE    CHKTSUW                NO - BYPASS THE DETAIL\n         MVC   LINESTEP(8),CHPROCSN  MOVE STEPNAME\n         MVC   LINEPRST(8),CHCLS     MOVE PROC/STEP NAME\nCHKTSUW  DS    0H\n         B     WRITE\nWRITE    DS    0H\n         L     R7,ASCBOUCB           LOAD ADR OF OUCB AREA\n         USING OUCB,R7               TELL ASSEMBLER ABOUT IT\nWRITE1   DS    0H\n         CLI   DETAILSW,C'0'         DETAIL TO BE DISPLAYED?\n         BE    WRITE2                 NO - BYPASS THE DETAIL\n         BAL   R9,ASID               EXTRACT ASID\n         BAL   R9,DPRTY              EXTRACT DISPATCHING PRIORITY\n         BAL   R9,NPG\n*        BAL   R9,RPG\n*        BAL   R9,NDP\n*        BAL   R9,RDP\n         BAL   R9,DMN\n         BAL   R9,MEMSWPO            EXTRACT SWAP INFORMATION\n*        BAL   R9,WSS                PROCESS WSS FLD\nWRITE2   DS    0H\n         LA    R9,LINE               POINT TO PRINT LINE\n         TPUT  (R9),79               DISPLAY THE LINE W/VARIABLE INFO\n         MVI   LINE,X'40'            PREP TO CLEAR LINE\n         MVC   LINE+1(69),LINE        AND CLEAR REMAINDER\n         B     LOOPA                 GO BACK AND SEE IF THERE IS MORE\nASID     DS    0H\n         L     R0,=F'2'              SET LENGTH OF FIELD\n         LA    R14,ASCBASID          POINT TO ASID FIELD\n         LA    R15,LINEASID          POINT TO OUR AREA ON OUTPUT LINE\nASIDB    EQU   *\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,ASIDB              LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nDPRTY    DS    0H\n         L     R0,=F'1'              SET LENGTH OF FIELD\n         LA    R14,ASCBDP            POINT TO ASID FIELD\n         LA    R15,LINEDPRT          POINT TO OUR AREA ON OUTPUT LINE\nDPRTYB   EQU   *\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,DPRTYB             LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nNPG      DS    0H\n         L     R0,=F'1'              SET LENGTH OF FIELD\n         LA    R14,OUCBNPG           POINT TO NPG  FIELD\n         LA    R15,LINENPG           POINT TO OUR AREA ON OUTPUT LINE\nNPGL     DS    0H\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,NPGL               LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nDMN      DS    0H\n         L     R0,=F'1'              SET LENGTH OF FIELD\n         LA    R14,OUCBDMN           POINT TO NPG  FIELD\n         LA    R15,LINEDMN           POINT TO OUR AREA ON OUTPUT LINE\nDMNL     DS    0H\n         MVI   BYTE1,X'00'           INITIALIZE\n         MVI   BYTE2,X'00'           INITIALIZE\n         MVZ   BYTE1,0(R14)          MOVE FIRST HALF OF BYTE\n         MVN   BYTE2,0(R14)          MOVE SECOND HALF OF BYTE\n         TR    BYTE1,HEXTBL          TRANSLATE\n         TR    BYTE2,HEXTBL          TRANSLATE\n         MVC   0(1,R15),BYTE1        MOVE FIRST HALF TO OUTPUT LINE\n         MVC   1(1,R15),BYTE2        MOVE SECOND HALF TO OUTPUT LINE\n         LA    R14,1(R14)            POINT TO NEXT BYTE TO PROCESS\n         LA    R15,2(R15)            POINT TO NEXT BYTE TO RECEIVE\n         BCT   R0,DMNL               LOOP TILL DONE\n         BR    R9                    GO RETURN TO CALLER\nMEMSWPO  DS    0H\n         SR    R15,R15               CLEAR COMPARE REGISTER\n         IC    R15,OUCBSRC           LOAD IN SAWP REASON\n         SLL   R15,2                 SHIFT TO GET INDEX\n         LA    R15,SAWPREAS(R15)     POINT TO THE ENTRY\n         MVC   LINESWRC(4),0(R15)    MOVE IT TO OUTPUT LINE\n*\n         TM    OUCBSFL,OUCBNSW       NON-SWAPABLE\n         BZ    MEMPOS1                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'NS'    SET AS NON-SWAPABLE\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS1  EQU   *\n         TM    OUCBSFL,OUCBPVL       PRIVALEDGE STATUS?\n         BZ    MEMPOS2                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'PR'    SET AS PRIVALEDGED - NOW NICE EH?\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS2  EQU   *\n         TM    OUCBSFL,OUCBOFF       WAITING?\n         BZ    MEMPOS3                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'WA'    SET AS WAITING\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS3  EQU   *\n         TM    OUCBSFL,OUCBOUT       SWAPPED OUT?\n         BZ    MEMPOS4                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'OU'    SET AS SWAPPED OUT\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOS4  EQU   *\n         TM    OUCBQFL,OUCBGOO+OUCBGOI+OUCBGOB  IN TRANSITION?\n         BZ    MEMPOSU                NO - CHECK NEXT CONDITION\n         MVC   LINEMEMP(2),=C'<>'    SET AS IN TRANSITION\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOSU  EQU   *\n         MVC   LINEMEMP(2),=C'??'    SET AS TWILIGHT ZONE\n         B     MEMPOSX               GO EXIT CHECKS AS WE GOT THE COND.\nMEMPOSX  EQU   *\n         BR    R9                    GO RETURN TO CALLER\nWSS      DS    0H\n         MVC   LINEEXCC,=C'********'\n         SR    R1,R1\n         LH    R1,OUCBWSS           GET WSS VALUE\n         CVD   R1,DBLAREA           CONVERT IT TO PD FORMAT\n         MVC   LINEWSS(6),EDMASK    MOVE EDIT MASK TO OUTPUT FIELD\n         ED    LINEWSS,DBLAREA+5    EDIT IT FOR OUTPUT\n         BR    R9                   RETURN TO CALLER\n         SPACE 3\nEND      EQU   *\nRETURN   DS    0H\n         L     R13,SAVEAREA+4       RELOAD CALLERS SAP\n         LM    R14,R12,12(R13)      RELOAD CALLERS REGISTERS\n         SR    R15,R15              ZERO RETURN CODE\n         BR    R14                  RETURN TO CALLER\n         LTORG\nDETAILSW DC    C'0'       0=NO DETAIL / 1=DISPLAY DETAIL\nCMDPARM  DC    20C' '     PARAMETER AREA\nDBLAREA  DC    D'0'\nEDMASK   DC    X'402020202120'\nLINE     DS    0CL69\n         DS    CL1\nLINETYPE DS    CL3\n         DS    CL1\nLINEJOBN DS    CL8\n         DS    CL1\nLINESTEP DS    CL8\n         DS    CL1\nLINEPRST DS    CL8\n         DS    CL1\nLINEASID DS    CL4\n         DS    CL1\nLINEDPRT DS    CL2\n         DS    CL1\nLINEMEMP DS    CL2\n         DS    CL1\nLINESWRC DS    CL4\n         DS    CL1\nLINENPG  DS    CL2\n         DS    CL1\nLINEDMN  DS    CL2\n         DS    CL2\nLINEEXCC DS    CL8\n         DS    CL2\nLINEWSS  DS    CL6\n         DS    CL2\n         DS    CL55\nSAVEAREA DS    18F\nSAVERMCT DS    F\nHEXTBL   DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'    00-0F\n         DC    X'F1',15X'00'                          10-9F\n         DC    X'F2',15X'00'                          20-9F\n         DC    X'F3',15X'00'                          30-9F\n         DC    X'F4',15X'00'                          40-9F\n         DC    X'F5',15X'00'                          50-9F\n         DC    X'F6',15X'00'                          60-9F\n         DC    X'F7',15X'00'                          70-9F\n         DC    X'F8',15X'00'                          80-9F\n         DC    X'F9',15X'00'                          90-9F\n         DC    X'C1',15X'00'                          A0-AF\n         DC    X'C2',15X'00'                          B0-BF\n         DC    X'C3',15X'00'                          C0-CF\n         DC    X'C4',15X'00'                          D0-DF\n         DC    X'C5',15X'00'                          E0-EF\n         DC    X'C6',15X'00'                          F0-FF\nBYTE1    DC    X'00'\nBYTE2    DC    X'00'\nSAWPREAS DC    C'    TPUTTGETLONGPGS<RSS<WAITRQSWDENQEXCHSWAP'\n         PRINT NOGEN\n         CVT   DSECT=YES,LIST=NO\n         PRINT NOGEN\n         IHAASVT DSECT=YES\n         IHAASCB DSECT=YES\n         IHAASXB DSECT=YES\nCSCB     DSECT\n         IEECHAIN\n         IRAOUCB DSECT=YES\n         IHAOUXB DSECT=YES\n         END\n/*\n//LKED.SYSLMOD DD  DSN=SYS2.LINKLIB(DT),DISP=SHR\n/*\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOB": {"ttr": 1548, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x992/\\x01\\x08'\\x7f\\x13\\x10\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-18T00:00:00", "modifydate": "2008-10-03T13:10:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/* TRACE ?I */\nparse arg TSOCMD\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(VIO) NEW TRACKS SPACE(90,90) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"||ddnm||\")\"\naddress ISPEXEC \"BROWSE DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOE": {"ttr": 1550, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x992/\\x01\\x08'\\x7f\\x13\\x10\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-18T00:00:00", "modifydate": "2008-10-03T13:10:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/* TRACE ?I */\nparse arg TSOCMD\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(VIO) NEW TRACKS SPACE(90,90) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"||ddnm||\")\"\naddress ISPEXEC \"EDIT   DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOR": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x07\\x11\\x7f\\x01\\x08'\\x7f\\x13\\x10\\x00\\x1f\\x00\\x1f\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-04-27T00:00:00", "modifydate": "2008-10-03T13:10:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/**************************************************/\n/* NOTE:  Use of this EXEC requires the REVIEW    */\n/*        command from CBT file 134 or 135.       */\n/**************************************************/\n/* REVIEW command output.  This has an advantage  */\n/* over TSOE/TSOB/TSOV in that it works under     */\n/* native TSO (TSO READY) without ISPF.           */\n/**************************************************/\n/* TRACE ?I */\nparse arg TSOCMD\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(SYSALLDA) NEW TRACKS SPACE(9,9) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress TSO     \"REVIEW       \"||ddnm||\"    FILE\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOV": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00F\\x01\\x07\\x11\\x7f\\x01\\t)_\\x11\\x19\\x00\\x1f\\x00\\x1f\\x00\\x00\\xd4\\xe9\\xc5\\xd3\\xc4\\xc5\\xd5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2007-04-27T00:00:00", "modifydate": "2009-10-22T11:19:46", "lines": 31, "newlines": 31, "modlines": 0, "user": "MZELDEN"}, "text": "/* REXX */\n/*                           */\n/* AUTHOR: MARK ZELDEN       */\n/*                           */\n/****************************************************/\n/* There is really no advantage to using TSOV over  */\n/* TSOE since a temporary data set is used, but     */\n/* to complete the TSO* set of EXECs - here it is.  */\n/****************************************************/\n/* TRACE ?I */\nparse arg TSOCMD\naddress ISPEXEC \"CONTROL ERRORS RETURN\"\naddress TSO\nddnm = 'DD'||random(1,99999)    /* choose random ddname  */\njunk = msg(off)\n\"ALLOC FILE(\"||ddnm||\") UNIT(VIO) NEW TRACKS SPACE(90,200) DELETE\",\n\" REUSE LRECL(172) RECFM(F B) BLKSIZE(8944)\"\njunk = msg(on)\n/*                                    */\n/*  issue tso commnd and trap output  */\n/*                                    */\njunk=outtrap(LINE.)\nTSOCMD\njunk=outtrap('off')\n/*                                    */\n\"EXECIO\" line.0  \"DISKW\" ddnm \"(STEM LINE. FINIS\"\naddress ISPEXEC \"LMINIT DATAID(TEMP) DDNAME(\"||ddnm||\")\"\naddress ISPEXEC \"VIEW   DATAID(\"||temp\")\"\naddress ISPEXEC \"LMFREE DATAID(\"||temp\")\"\njunk = msg(off)\n\"FREE FI(\"||ddnm||\")\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT849/FILE849.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT849", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}