{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011229000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2645370, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 20, "INMDSNAM": "CBT.V500.FILE097.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2645370, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2645370, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE097.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00+\\x08'", "DS1TRBAL": "b'\\x94|'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00\\xaa\\x00\\n\\x00\\xad\\x00\\x08\\x00,'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00\\x01\\x01 \"/\\x01 \"/\\x16C\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-08-09T00:00:00", "modifydate": "2020-08-09T16:43:01", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-500"}, "text": "REGULAR CBT TAPE - VERSION 500    FILE:  097\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT500.FILE097\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 85 MEMBERS COUNTED; CUMULATIVE SIZE IS 24,469 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   08/09/20    16:43:01    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x003\\x003\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:22", "lines": 51, "newlines": 51, "modlines": 0, "user": "FILE097"}, "text": "THIS PDS CONTAINS ALL THE SOURCE CODE, JCL, AND DOCUMENTATION FOR\nTHE COMPLETE DISK MANAGEMENT SYSTEM OF PEOPLES NATIONAL BANK OF\nWASHINGTON.  ALL DISK MANAGEMENT SYSTEMS REQUIRE CUSTOMIZATION TO\nFIT THE PARTICULAR NEEDS OF EACH INSTALLATION.  EXTENSIVE\nCUSTOMIZATION DOCUMENTATION IS PROVIDED IN THE DOCPROG (PROGRAMMER'S\nDOCUMENTATION) MEMBER.  RUN PROCEDURES, REPORT FORMATS, AND RECORD\nLAYOUTS ARE PROVIDED IN DOCUSER (USER'S DOCUMENTATION).  SAMPLE JCL\nAND CONTROL FILES ARE PROVIDED IN OTHER MEMBERS OF THIS PDS.\nTHE DOCUMENTATION IS IN 'RDOC72' FORMAT.  IT SHOULD BE PRINTED USING\nTHE RDOC72 PROGRAM PROVIDED IN THE PEOPLES NATIONAL BANK OF WASHINGTON\nUTILITIES PDS.  THIS PDS IS FILE 040 ON THIS TAPE.  THE UTILITIES PDS\nALSO CONTAINS COMPLETE DOCUMENTATION ON RDOC72 AND A MACRO 'REGS'\nTHAT IS USED IN MANY OF THE ASSEMBLER PROGRAMS IN THIS PDS.\n\nTO BEGIN INSTALLATION COMPILE THE RDOC72 PROGRAM OUT OF THE UTILITIES\nPDS AND PRINT OFF THE DOCUMENTATION IN MEMBERS DOCPROG AND DOCUSER\nIN THIS PDS.  SAMPLE JCL FOR RDOC72 CAN BE FOUND IN THE UTILITIES PDS.\nTHE FIRST SECTION OF DOCPROG CONTAINS A DISK MANAGEMENT POLICY\nSTATEMENT.  READ THIS SECTION CAREFULLY.  YOU CAN'T DO DISK MANAGEMENT\nWITHOUT A POLICY.  THE PROGRAMS AND PROCEDURES IN THIS PDS MERELY\nIMPLEMENT THE POLICY.  EXAMINE THIS POLICY TO SEE IF IT WILL FIT\nYOUR SITUATION WITH MINOR MODIFICATIONS.  IF IT WILL THEN YOU CAN\nMODIFY THESE PROGRAMS AND USE THEM TO IMPLEMENT DISK MANAGEMENT IN YOUR\nSHOP.  IF YOU FIND THAT THE POLICY CANNOT BE MADE TO FIT YOUR SITUATION\nWITHOUT DRASTIC MODIFICATIONS THEN THIS MATERIAL WILL BE OF MUCH LESS\nVALUE TO YOU.\n\nGOOD LUCK.\n\nCERTIFICATION:\n\nALL OF THESE PROGRAMS HAVE BEEN COMPILED AND RUN IN OUR SHOP UNDER\nMVS/SP JES3.  TO THE BEST OF OUR KNOWLEDGE THEY HAVE NO XA OR JES\nDEPENDENCIES.  THE ONLY PLACE WHERE SYSTEM DEPENDENCIES ARE EVEN\nREMOTELY LIKELY ARE IN:\n\n    DM011SCR - SUPERSCRATCH\n    DM100PUP - HSM MCDS EXTRACT\n    DM110PUP - VTOC EXTRACT\n    DM140PUP - DFP VSAM VVDS EXTRACT\n    HSMXEQ   - SEND COMMANDS TO HSM\n    VVDSLIST - FORMATTED LISTING OF DFP VSAM VVDS\n\nDM011SCR AND DM110DUP HAVE VTOC DSCB DEPENDENCIES.  THESE PROGRAMS USE\nFACILITIES COMMON TO SP AND XA.  DM110PUP AND VVDSLIST HAVE DFP VSAM\nDEPENDENCIES.  LY26-3956 MVS/EXTENDED ARCHITECTURE CATALOG\nDIAGNOSIS REFERENCE WAS USED AS THE REFERENCE FOR DESIGNING THESE\nPROGRAMS.  DM100PUP AND HSMXEQ HAVE DEPENDENCIES ON HSM MCDS RECORD\nFORMATS AND THE HSM COMMAND INTERFACE.  THEY WERE TESTED UNDER DFHSM\n2.2.1 AND DESIGNED ACCORDING TO LY35-0077 DATA FACILITY HEIERARCHICAL\nSTORAGE MANAGER DIAGNOSIS REFERENCE VOLUME 2 AND OTHER DFHSM V2 PUBS.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE097": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00V\\x01 \"/\\x01 \"/\\x16B\\x00\\x18\\x00\\x18\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-08-09T00:00:00", "modifydate": "2020-08-09T16:42:56", "lines": 24, "newlines": 24, "modlines": 0, "user": "CBT-500"}, "text": "//***FILE 097 is from Peoples National Bank of Washington in        *   FILE 097\n//*           Seattle, and contains all the source code, JCL,       *   FILE 097\n//*           and documentation for the complete disk management    *   FILE 097\n//*           system of Peoples National Bank of Washington.        *   FILE 097\n//*           All disk management systems require customization     *   FILE 097\n//*           to fit the particular needs of each installation.     *   FILE 097\n//*           Extensive customization documentation is provided     *   FILE 097\n//*           in the DOCPROG (programmer's documentation)           *   FILE 097\n//*           member.  Run procedures, report formats, and          *   FILE 097\n//*           record layouts are provided in DOCUSER (user's        *   FILE 097\n//*           documentation).  Sample JCL and control files are     *   FILE 097\n//*           provided in other members of this pds.                *   FILE 097\n//*                                                                 *   FILE 097\n//*           All of these programs have been compiled and run      *   FILE 097\n//*           in under MVS/SP JES3.  To the best of our             *   FILE 097\n//*           knowledge they have no XA or JES dependencies.        *   FILE 097\n//*                                                                 *   FILE 097\n//*           This file is in IEBUPDTE SYSIN format see the         *   FILE 097\n//*           member called @DOC for additional information.        *   FILE 097\n//*                                                                 *   FILE 097\n//*           An update was made to the VVDSLIST program. (08/20)   *   FILE 097\n//*           There seem to have been a few changes to the          *   FILE 097\n//*           length requirement of the AMSDB cells in the VVDS.    *   FILE 097\n//*                                                                 *   FILE 097\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CDMFD000": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00D\\x00D\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:22", "lines": 68, "newlines": 68, "modlines": 0, "user": "FILE097"}, "text": "           02  DM-MST-AAM          PIC X(3).\n           02  FILLER              PIC X.\n           02  DM-MST-SW.\n              03  DM-MST-SW-1     PIC X.\n      *                           CHANGE EXTENT INDICATOR\n      *                           Y - YES -     OK TO CHANGE EXTENT\n      *                           N - NO  - NOT OK TO CHANGE EXTENT\n              03  DM-MST-SW-2     PIC X.\n      *                           CHANGE BLOCKSIZE INDICATOR\n      *                           Y - YES -     OK TO CHANGE BLOCKSIZE\n      *                           N - NO  - NOT OK TO CHANGE BLOCKSIZE\n      *                           C - *** - FILE IS CONCATINATED\n              03  DM-MST-SW-3     PIC X.\n      *                           REFERENCE FREQUENCY INDICATOR\n      *                           I - IGNORE REFERENCE FREQUENCY\n      *                           T - TEMPORARY FILE\n      *                           D - DAILY\n      *                           M - MONTHLY\n      *                           Q - QUARTERLY\n      *                           A - ANNUALLY\n           02  FILLER              PIC X.\n           02  DM-MST-DSNAME.\n              03  FILLER           PIC X(3).\n              03  DM-MST-DSNAME-T  PIC X.\n              03  FILLER           PIC X(40).\n           02  FILLER              PIC X(2).\n           02  DM-MST-ALLOC        PIC 9(5).\n           02  DM-MST-ALLOC-X      REDEFINES DM-MST-ALLOC\n                                   PIC X(5).\n           02  FILLER              PIC X(2).\n           02  DM-MST-USED-CUR     PIC 9(5).\n           02  DM-MST-USED-CUR-X   REDEFINES DM-MST-USED-CUR\n                                   PIC X(5).\n           02  FILLER              PIC X.\n           02  DM-MST-DSORG        PIC X(3).\n           02  FILLER              PIC X.\n           02  DM-MST-RECFM        PIC X(3).\n           02  FILLER              PIC X.\n           02  DM-MST-BLKSIZE      PIC 9(5).\n           02  DM-MST-BLKSIZE-X    REDEFINES DM-MST-BLKSIZE\n                                   PIC X(5).\n           02  FILLER              PIC X.\n           02  DM-MST-LRECL        PIC 9(5).\n           02  DM-MST-LRECL-X      REDEFINES DM-MST-LRECL\n                                   PIC X(5).\n           02  FILLER              PIC X.\n           02  DM-MST-VOLSER       PIC X(6).\n           02  FILLER              PIC X.\n           02  DM-MST-USED-HI      PIC 9(5).\n           02  DM-MST-USED-HI-X    REDEFINES DM-MST-USED-HI\n                                   PIC X(5).\n           02  FILLER              PIC X.\n           02  DM-MST-DT-CREATE    PIC 9(5).\n           02  DM-MST-DT-CREATE-X  REDEFINES DM-MST-DT-CREATE\n                                   PIC X(5).\n           02  FILLER              PIC X.\n           02  DM-MST-DT-REF       PIC 9(5).\n           02  DM-MST-DT-REF-X     REDEFINES DM-MST-DT-REF\n                                   PIC X(5).\n           02  FILLER              PIC X.\n           02  DM-MST-EXTENT-CT    PIC 9(2).\n           02  DM-MST-EXTENT-CT-X  REDEFINES DM-MST-EXTENT-CT\n                                   PIC X(2).\n           02  FILLER              PIC X.\n           02  DM-MST-USED-LO      PIC 9(5).\n           02  DM-MST-USED-LO-X    REDEFINES DM-MST-USED-LO\n                                   PIC X(5).\n           02  FILLER              PIC X(30).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CDMFD010": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00.\\x00.\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:22", "lines": 46, "newlines": 46, "modlines": 0, "user": "FILE097"}, "text": "           02  DM-VTC-DSNAME.\n               03  DM-VTC-DS-4     PIC X(4).\n               03  FILLER          PIC X(40).\n           02  FILLER              REDEFINES DM-VTC-DSNAME.\n               03  DM-VTC-DS-8     PIC X(8).\n               03  FILLER          PIC X(7).\n               03  DM-VTC-DS-G1-F.\n                   04  DM-VTC-DS-G1    PIC X(2).\n                   04  FILLER          PIC X(7).\n               03  FILLER          PIC X(20).\n           02  FILLER              REDEFINES DM-VTC-DSNAME.\n               03  FILLER          PIC X(21).\n               03  DM-VTC-DS-G2-F.\n                   04  DM-VTC-DS-G2    PIC X(2).\n                   04  FILLER          PIC X(7).\n               03  FILLER          PIC X(14).\n           02  FILLER              REDEFINES DM-VTC-DSNAME.\n               03  FILLER            PIC X(7).\n               03  DM-VTC-DS-CTLGV   PIC X(2).\n               03  DM-VTC-DS-VOLSER  PIC X(6).\n               03  FILLER            PIC X(23).\n               03  DM-VTC-DSN-VOLSER PIC X(6).\n           02  DM-VTC-VOLSER       PIC X(6).\n           02  DM-VTC-ALLOC        PIC 9(5).\n           02  DM-VTC-ALLOC-X      REDEFINES DM-VTC-ALLOC\n                                   PIC X(5).\n           02  DM-VTC-USED         PIC 9(5).\n           02  DM-VTC-USED-X       REDEFINES DM-VTC-USED\n                                   PIC X(5).\n           02  DM-VTC-DSO          PIC X(3).\n           02  DM-VTC-BLKSZ        PIC 9(5).\n           02  DM-VTC-BLKSZ-X      REDEFINES DM-VTC-BLKSZ\n                                   PIC X(5).\n           02  DM-VTC-LRECL        PIC 9(5).\n           02  DM-VTC-LRECL-X      REDEFINES DM-VTC-LRECL\n                                   PIC X(5).\n           02  DM-VTC-RFM          PIC X(3).\n           02  DM-VTC-EXTENT-CT    PIC 9(3).\n           02  DM-VTC-EXTENT-CT-X  REDEFINES DM-VTC-EXTENT-CT\n                                   PIC X(3).\n           02  DM-VTC-DT-CREATE    PIC 9(5).\n           02  DM-VTC-DT-CREATE-X  REDEFINES DM-VTC-DT-CREATE\n                                   PIC X(5).\n           02  DM-VTC-DT-REF       PIC 9(5).\n           02  DM-VTC-DT-REF-X     REDEFINES DM-VTC-DT-REF\n                                   PIC X(5).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CDMFD020": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:22", "lines": 12, "newlines": 12, "modlines": 0, "user": "FILE097"}, "text": "           02  DM-VOL-VOLSER       PIC X(6).\n           02  FILLER              PIC X.\n           02  DM-VOL-BYTES        PIC 9999999.\n           02  FILLER              PIC X.\n           02  DM-VOL-TRK-CYL      PIC 999.\n           02  FILLER              PIC X.\n           02  DM-VOL-CYL-VOL      PIC 99999.\n           02  FILLER              PIC X.\n           02  DM-VOL-POOL         PIC XXX.\n           02  FILLER              PIC X.\n           02  DM-VOL-SW-DUP       PIC X.\n           02  FILLER              PIC X(50).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CDMFD030": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00\\t\\x00\\t\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:22", "lines": 9, "newlines": 9, "modlines": 0, "user": "FILE097"}, "text": "           02  FIXC-CMD            PIC X.\n           02  FIXC-DSNAME         PIC X(44).\n           02  FIXC-VOLSER         PIC X(6).\n           02  FIXC-ALLOC          PIC 9(5).\n           02  FIXC-DSORG          PIC X(3).\n           02  FIXC-RECFM          PIC X(3).\n           02  FIXC-LRECL          PIC 9(5).\n           02  FIXC-BLKSI          PIC 9(5).\n           02  FIXC-FILL           PIC X(8).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CTLDM203": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00\\x02\\x00\\x02\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:22", "lines": 2, "newlines": 2, "modlines": 0, "user": "FILE097"}, "text": "  SORT FIELDS=(1,44,CH,A,76,6,CH,A)\n  END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CTLDM206": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00\\x02\\x00\\x02\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:22", "lines": 2, "newlines": 2, "modlines": 0, "user": "FILE097"}, "text": "  SORT FIELDS=(1,44,CH,A,45,6,CH,A)\n  END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CTLDM220": {"ttr": 534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00x\\x00x\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:22", "lines": 120, "newlines": 120, "modlines": 0, "user": "FILE097"}, "text": "HSM001 0047476 015 00885 HSM N\nHSM002 0047476 015 00885 HSM N\nHSM003 0047476 015 00885 HSM N\nHSM004 0047476 015 00885 HSM N\nIPO051 0047476 015 01770 IPO Y\nIPO052 0047476 015 00885 IPO Y\nIPO053 0047476 015 00885 IPO Y\nIPO054 0047476 015 00885 IPO Y\nIPO055 0047476 015 00885 IPO Y\nIPO056 0047476 015 01770 IPO Y\nPRD040 0047476 015 01770 PRD N\nPRD041 0047476 015 01770 ONL N\nPRD044 0047476 015 00885 PRD N\nPRD045 0047476 015 00885 PRD N\nPRD046 0047476 015 00885 PRD N\nPRD047 0047476 015 00885 PRD N\nPRD048 0047476 015 00885 ONL N\nPRD049 0047476 015 00885 ONL N\nPRD050 0047476 015 01770 PRD N\nPRD051 0047476 015 01770 PRD N\nPRD052 0047476 015 01770 PRD N\nPRD053 0047476 015 00885 PRD N\nPRD054 0047476 015 00885 PRD N\nPRD055 0047476 015 01770 PRD N\nPRD056 0047476 015 00885 GDG N\nPRD057 0047476 015 00885 PRD N\nPRD058 0047476 015 01770 ONL N\nPRD059 0047476 015 00885 ONL N\nPRD060 0047476 015 00885 PRD N\nPRD061 0047476 015 00885 ONL N\nPRD062 0047476 015 01770 ONL N\nPRD063 0047476 015 00885 PRD N\nPRD064 0047476 015 00885 ONL N\nPRD065 0047476 015 00885 ONL N\nPRD066 0047476 015 00885 ONL N\nPRD067 0047476 015 00885 ONL N\nPRD068 0047476 015 00885 PRD N\nPRD069 0047476 015 00885 PRD N\nPRD070 0047476 015 00885 PRD N\nPRD071 0047476 015 00885 PRD N\nPRD072 0047476 015 00885 PRD N\nPRD073 0047476 015 00885 PRD N\nPRD074 0047476 015 00885 PRD N\nPRD075 0047476 015 00885 PRD N\nPRD076 0047476 015 01770 PRD N\nPRD077 0047476 015 00885 PRD N\nPRD078 0047476 015 00885 PRD N\nPRD079 0047476 015 00885 ONL N\nPRD080 0047476 015 00885 PRD N\nPRD081 0047476 015 00885 PRD N\nPRD082 0047476 015 00885 PRD N\nPRD084 0047476 015 00885 PRD N\nPRD085 0047476 015 00885 ONL N\nPRD086 0047476 015 00885 ONL N\nPRD087 0047476 015 00885 GDG N\nPRD088 0047476 015 01770 ONL N\nPRD089 0047476 015 00885 PRD N\nPRD090 0047476 015 00885 PRD N\nPRD091 0047476 015 00885 ONL N\nPRD092 0047476 015 00885 PRD N\nPRD093 0047476 015 00885 PRD N\nPRD095 0047476 015 00885 PRD N\nPRD097 0047476 015 01770 PRD N\nPRD098 0047476 015 00885 PRD N\nPRD099 0047476 015 00885 PRD N\nPRD501 0019069 030 00555 ONL N\nPRD502 0019069 030 00555 ONL N\nRSV001 0047476 015 00885 RSV N\nRSV004 0047476 015 00885 RSV N\nRSV005 0047476 015 00885 RSV N\nRSV006 0047476 015 00885 RSV N\nSRES1A 0019069 030 00555 SYS Y\nSRES1B 0019069 030 00555 SYS Y\nSRES2A 0019069 030 00555 SYS Y\nSRES2B 0019069 030 00555 SYS Y\nSYS050 0047476 015 00885 SYS N\nSYS051 0047476 015 00885 SYS N\nSYS052 0047476 015 00885 SYS N\nSYS053 0047476 015 00885 SYS N\nSYS054 0047476 015 00885 SYS N\nSYS501 0019069 030 00555 SYS Y\nSYS502 0019069 030 00555 SYS Y\nTMP051 0047476 015 00885 TMP Y\nTMP052 0047476 015 00885 TMP Y\nTMP053 0047476 015 00885 TMP Y\nTMP054 0047476 015 00885 TMP Y\nTST050 0047476 015 00885 TST N\nTST051 0047476 015 01770 TST N\nTST052 0047476 015 00885 TST N\nTST053 0047476 015 00885 TST N\nTST054 0047476 015 01770 TST N\nTST055 0047476 015 00885 TST N\nTST056 0047476 015 00885 TST N\nTST058 0047476 015 00885 TST N\nTST059 0047476 015 00885 TST N\nTST060 0047476 015 00885 TST N\nTST061 0047476 015 01770 TST N\nTST062 0047476 015 00885 TST N\nTST063 0047476 015 00885 TST N\nTST064 0047476 015 00885 TST N\nTST065 0047476 015 01770 TST N\nTST066 0047476 015 00885 TST N\nTST067 0047476 015 00885 TST N\nTST068 0047476 015 00885 TST N\nTST069 0047476 015 01770 TST N\nTST070 0047476 015 00885 TST N\nTST071 0047476 015 00885 TST N\nTST072 0047476 015 00885 TST N\nTST073 0047476 015 00885 TST N\nTST074 0047476 015 00885 TST N\nTST075 0047476 015 00885 TST N\nTST076 0047476 015 00885 TST N\nTST077 0047476 015 00885 TST N\nTST079 0047476 015 00885 TST N\nTST080 0047476 015 00885 TST N\nTST081 0047476 015 00885 TST N\nTST082 0047476 015 01770 TST N\nTST083 0047476 015 01770 RSV N\nTST084 0047476 015 00885 TST N\nTST085 0047476 015 00885 TST N\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CTLDM230": {"ttr": 537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00\\x01\\x00\\x01\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:22", "lines": 1, "newlines": 1, "modlines": 0, "user": "FILE097"}, "text": "CTRL DM230PRP     MM/DD/YY                    495\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CTLDM310": {"ttr": 539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00\\x02\\x00\\x02\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:22", "lines": 2, "newlines": 2, "modlines": 0, "user": "FILE097"}, "text": "  SORT FIELDS=(1,44,CH,A,45,6,CH,A)\n  END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CTLDM315": {"ttr": 541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00\\x02\\x00\\x02\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:22", "lines": 2, "newlines": 2, "modlines": 0, "user": "FILE097"}, "text": "  SORT FIELDS=(1,44,CH,A,76,6,CH,A)\n  END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CTLDM330": {"ttr": 543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00\\x02\\x00\\x02\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:22", "lines": 2, "newlines": 2, "modlines": 0, "user": "FILE097"}, "text": "  SORT FIELDS=(1,44,CH,A,45,6,CH,A)\n  END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CTLDM350": {"ttr": 545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00\\x02\\x00\\x02\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:22", "lines": 2, "newlines": 2, "modlines": 0, "user": "FILE097"}, "text": "  SORT FIELDS=(1,44,CH,A,90,44,CH,A)\n  END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CTLDM380": {"ttr": 547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00\\x01\\x00\\x01\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:22", "lines": 1, "newlines": 1, "modlines": 0, "user": "FILE097"}, "text": "CTRL DM170PRP     MM/DD/YY                    495\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CTLMEAAM": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x01]\\x01]\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:22", "lines": 349, "newlines": 349, "modlines": 0, "user": "FILE097"}, "text": "ADA  021\nADP  701\nADT  704\nARA  021\nARC  012\nARO  013\nARP  011\nART  014\nAUA  021\nAUT  021\nBBA  021\nBBP  491\nBBT  494\nBTA  021\nBTC  482\nBTO  483\nBTP  481\nBTT  484\nCAA  021\nCAP  491\nCAT  494\nCCA  021\nCCC  032\nCCJ  035\nCCP  031\nCCT  034\nCEA  021\nCEC  032\nCEJ  035\nCEO  033\nCEP  031\nCET  034\nCFA  021\nCFC  092\nCFP  091\nCFT  094\nCHA  021\nCHC  552\nCHP  521\nCHT  524\nCIA  021\nCIJ  405\nCIT  404\nCLA  021\nCLJ  085\nCLT  084\nCQA  021\nCQC  672\nCQP  671\nCQT  674\nCSA  021\nCSC  042\nCSP  041\nCST  044\nCTA  021\nCTC  662\nCTP  661\nCTT  664\nCUC  032\nCUJ  035\nCUP  031\nCUT  034\nDAA  021\nDAC  372\nDAP  371\nDAT  374\nDBA  021\nDBP  491\nDBT  494\nDCA  021\nDCP  491\nDCT  494\nDDA  021\nDDC  102\nDDP  101\nDDT  104\nDFA  021\nDFC  752\nDFJ  755\nDFP  751\nDFT  754\nDIA  021\nDIP  491\nDIT  494\nDMA  021\nDMS  494\nDMT  494\nDQA  021\nDQP  101\nDQT  104\nDRA  021\nDRP  491\nDRT  494\nDSA  021\nDSP  461\nDST  464\nESA  021\nESP  281\nEST  284\nEXA  021\nEXO  253\nEXT  254\nFAA  021\nFAC  172\nFAP  171\nFAT  174\nFCA  021\nFCC  122\nFCP  121\nFCT  124\nFPA  021\nFPP  711\nFPT  714\nFSA  021\nFSC  552\nFSO  523\nFSP  521\nFST  524\nGLA  021\nGLC  352\nGLJ  355\nGLO  353\nGLP  351\nGLT  354\nHAA  021\nHAP  491\nHAT  494\nHBA  021\nHBP  111\nHBT  114\nHGA  021\nHGC  462\nHGJ  465\nHGP  461\nHGT  464\nHOA  021\nHOP  651\nHOT  654\nHSA  021\nHSC  462\nHSP  461\nHST  464\nIAA  021\nIAC  342\nIAP  341\nIAT  344\nIBS  494\nICA  021\nICC  492\nICP  491\nICT  494\nILA  021\nILC  182\nILP  181\nILT  184\nIMS  494\nIQA  021\nIQP  311\nIQT  314\nIRA  021\nIRC  492\nIRP  491\nIRT  494\nISA  021\nISP  511\nIST  514\nITA  021\nITP  131\nITT  134\nJES  494\nLPA  021\nLPO  083\nLPP  081\nLPT  084\nLQA  021\nLQP  341\nLQT  344\nLSA  021\nLSC  682\nLSP  681\nLST  684\nMEA  021\nMEP  491\nMET  494\nMFA  021\nMFC  192\nMFO  192\nMFT  194\nMIA  021\nMIO  263\nMIP  261\nMIT  264\nMLA  021\nMLC  272\nMLT  274\nMMA  021\nMMC  242\nMMO  243\nMMP  241\nMMT  244\nMSA  021\nMSO  273\nMSP  271\nMST  274\nMVS  494\nNPA  021\nNPP  494\nNPT  494\nOCA  021\nOCP  611\nOCT  614\nOLA  021\nOLC  492\nOLP  491\nOLT  494\nOPA  021\nOPP  494\nOPS  494\nOPT  494\nPAA  021\nPAO  293\nPAP  291\nPAT  294\nPBA  021\nPBP  491\nPBT  494\nPCA  021\nPCP  491\nPCT  494\nPEA  021\nPEC  572\nPEJ  575\nPEO  573\nPEP  571\nPET  574\nPFA  021\nPFC  052\nPFJ  055\nPFT  054\nPRA  021\nPRC  392\nPRP  391\nPRT  394\nPYA  021\nPYO  293\nPYP  291\nPYT  294\nQAA  021\nQAP  491\nQAT  494\nRAS  494\nRBA  021\nRBP  161\nRBT  164\nREA  021\nREC  232\nREJ  235\nREP  231\nRET  234\nRJA  021\nRJC  322\nRJJ  325\nRJO  323\nRJP  321\nRJT  324\nROA  021\nROP  491\nROT  494\nRPA  021\nRPC  142\nRPP  141\nRPT  144\nRRA  021\nRRP  491\nRRT  494\nRSA  021\nRSC  562\nRSP  561\nRST  564\nSCA  021\nSCP  491\nSCT  494\nSDA  021\nSDC  332\nSDP  331\nSDT  334\nSEA  021\nSEC  492\nSEJ  495\nSEP  491\nSET  494\nSFA  021\nSFC  212\nSFP  211\nSFT  214\nSIA  021\nSIP  151\nSIT  154\nSQA  021\nSQP  331\nSQT  334\nSSA  021\nSSP  491\nSST  494\nSTS  494\nSUS  494\nSVA  021\nSVP  151\nSVT  154\nTAA  021\nTAC  222\nTAP  221\nTAT  224\nTEA  021\nTEC  202\nTEP  201\nTET  204\nTLA  021\nTLP  491\nTLT  494\nTMS  494\nTPA  021\nTPJ  405\nTPT  404\nTQA  021\nTQP  361\nTQT  364\nTRA  021\nTRP  471\nTRT  474\nTSA  021\nTSS  494\nTST  494\nTTA  021\nTTT  494\nUDA  021\nUDP  691\nUDT  694\nVSA  021\nVST  494\nWTA  021\nWTC  492\nWTP  491\nWTT  494\nXCA  021\nXCT  494\nXTA  021\nXTP  491\nXTT  494\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CTLMEGRP": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00F\\x00F\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:22", "lines": 70, "newlines": 70, "modlines": 0, "user": "FILE097"}, "text": "TYP  01     PEOPLES\nTYP  02        CORR\nTYP  03       OTHER\nTYP  04  TEST/MAINT\nTYP  05       JOINT\nGRP  01  ARP\nGRP  02  AUDITING\nGRP  03  CAPTURE - POD\nGRP  04  CARD BASE SYSTEM\nGRP  05  ZIP + 4\nGRP  08  COMMERCIAL LOANS\nGRP  09  CIF\nGRP  10  DDA\nGRP  11  HOME BANKING\nGRP  12  FCS\nGRP  13  INTERNATIONAL\nGRP  14  RPM\nGRP  15  SIGNATURE VERIFICATION\nGRP  16  RATE DATA BASE\nGRP  17  FIXED ASSETS\nGRP  18  INSTALLMENT LOANS (DISCOUNT)\nGRP  19  MICROFICHE SERVICES\nGRP  20  TELLER SYSTEM\nGRP  21  SAFE DEPOSIT BOX\nGRP  22  TDA-HOGAN\nGRP  23  REMOTE ENTRY\nGRP  24  MONETARY REFRESH\nGRP  25  EXCHANGE\nGRP  26  MORTGAGE INVENTORY\nGRP  27  MORTGAGE LOANS\nGRP  28  ESCROW SYSTEM\nGRP  29  PAYROLL\nGRP  30  ONLINE COLLECTIONS\nGRP  31  INQUIRIES\nGRP  32  REJECTS\nGRP  33  SAVINGS\nGRP  34  INSTALLMENT LOANS (SIMPLE)\nGRP  35  GENERAL LEDGER\nGRP  36  TIME DEPOSITS\nGRP  37  DDA HOGAN\nGRP  39  READY RESERVE\nGRP  40  TELEPROCESSING\nGRP  46  HOGAN SYSTEM\nGRP  47  TRUST\nGRP  48  BANTEC\nGRP  49  EDP OVERHEAD\nGRP  51  INSURANCE\nGRP  52  FINE SORT PER DDA\nGRP  53  FINE SORT BUS DDA\nGRP  54  FINE SORT NON DDA\nGRP  55  FINE SORT CORRESPONDENTS\nGRP  56  REMOTE SITE CAPTURE\nGRP  57  EFTS-ACH-PIPS\nGRP  59  CHECK FILING, PERSONAL DDA\nGRP  60  CASH FACILITY\nGRP  61  ONLINE COLLECTIONS\nGRP  62  LOCKBOX\nGRP  63  CHECK FILING, BUSINESS DDA\nGRP  64  CHECK FILING, OTHER\nGRP  65  HEAD OFFICE REPORTING\nGRP  66  CENTRAL TRACING\nGRP  67  COMBINED STATEMENTS\nGRP  68  LOAN PROCESSING SYSTEM\nGRP  69  URBAN DATA\nGRP  70  ACC DEATH INSURANCE\nGRP  71  FLOAT PRICING\nGRP  75  DEALER FLOORING\nGRP  76\nGRP  79\nGRP  80  PAPERLESS ENTRY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CTLTSOID": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x01\\xd5\\x01\\xd5\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:22", "lines": 469, "newlines": 469, "modlines": 0, "user": "FILE097"}, "text": "  BOSCB20  BANK OF       STANWOOD       PSC 317             317 BIN20\n  BOTCB20  BANK OF       TOKYO          PSC 317             317 BIN20\n  CATALOG  DONAGLIA      RON            PSC 220             220 BIN04\n  CATINDEX DONAGLIA      RON            PSC 220             220 BIN04\n  CNLEW20  COLUMBIA      NATIONAL BNK   PSC 317             317 BIN20\n  D262AUJ  KORATHU       GEORGE         PSC 262             262 BIN03\n  D269PAP  PETERSON      PAULA          H/O 269             269 HO269\n  D294ADP  NELSON        STEVE          PSC 294             ADT BIN22PMC\n  D294ARC  NELSON        STEVE          PSC 294             ART BIN22PMC\n  D294ARE  NELSON        STEVE          PSC 294             ART BIN22PMC\n  D294ARJ  NELSON        STEVE          PSC 294             ART BIN22PMC\n  D294ARP  NELSON        STEVE          PSC 294             ART BIN22PMC\n  D294BBC  NELSON        STEVE          PSC 294             BBT BIN22PMC\n  D294BBP  NELSON        STEVE          PSC 294             BBT BIN22PMC\n  D294BTL  TOYAMA        DAN            PSC 294             BTT BIN26MRL\n  D294BTP  TOYAMA        DAN            PSC 294             BTT BIN26MRL\n  D294CCE  TOYAMA        DAN            PSC 294             CCT BIN26MRL\n  D294CCJ  TOYAMA        DAN            PSC 294             CCT BIN26MRL\n  D294CCL  TOYAMA        DAN            PSC 294             CCT BIN26MRL\n  D294CCP  TOYAMA        DAN            PSC 294             CCT BIN26MRL\n  D294CEC  TOYAMA        DAN            PSC 294             CET BIN26JAP\n  D294CEE  TOYAMA        DAN            PSC 294             CET BIN26JAP\n  D294CEJ  TOYAMA        DAN            PSC 294             CET BIN26JAP\n  D294CEP  TOYAMA        DAN            PSC 294             CET BIN26JAP\n  D294CFC  FRATER        KIM            PSC 294             CFT BIN26KAF\n  D294CFJ  FRATER        KIM            PSC 294             CFT BIN26KAF\n  D294CFL  FRATER        KIM            PSC 294             CFT BIN26KAF\n  D294CFP  FRATER        KIM            PSC 294             CFT BIN26KAF\n  D294CHJ  TOYAMA        DAN            PSC 294             CHT BIN26KAF\n  D294CLJ  NELSON        STEVE          PSC 294             CLT BIN21SVR\n  D294CLL  NELSON        STEVE          PSC 294             CLT BIN21SVR\n  D294CLP  NELSON        STEVE          PSC 294             CLT BIN21SVR\n  D294CQC  NORLIN        BOB            PSC 294             CQT BIN39RNN\n  D294CQP  NORLIN        BOB            PSC 294             CQT BIN39RNN\n  D294CSJ  TOYAMA        DAN            PSC 294             CST BIN26CDW\n  D294CSL  TOYAMA        DAN            PSC 294             CST BIN26CDW\n  D294DBC  KONDO         CHARLIE        PSC 295             DBT BIN36CKK\n  D294DBE  KONDO         CHARLIE        PSC 295             DBT BIN36CKK\n  D294DBJ  KONDO         CHARLIE        PSC 295             DBT BIN36CKK\n  D294DBL  KONDO         CHARLIE        PSC 295             DBT BIN36CKK\n  D294DBP  KONDO         CHARLIE        PSC 295             DBT BIN36CKK\n  D294DDC  NORLIN        BOB            PSC 294             DDT BIN39RNN\n  D294DDP  NORLIN        BOB            PSC 294             DDT BIN39RNN\n  D294DFP  TOYAMA        DAN            PSC 294             DFT BIN26RMC\n  D294DIL  KONDO         CHARLIE        PSC 295             DIT BIN36CKK\n  D294DIP  KONDO         CHARLIE        PSC 295             DIT BIN36CKK\n  D294DIT  KONDO         CHARLIE        PSC 295             DIT BIN36CKK\n  D294ESL  TOYAMA        DAN            PSC 294             EST BIN26CDW\n  D294ESP  TOYAMA        DAN            PSC 294             EST BIN26CDW\n  D294FAC  NELSON        STEVE          PSC 294             FAT BIN22PMC\n  D294FAJ  NELSON        STEVE          PSC 294             FAT BIN22PMC\n  D294FAL  NELSON        STEVE          PSC 294             FAT BIN22PMC\n  D294FAP  NELSON        STEVE          PSC 294             FAT BIN22PMC\n  D294FCC  NELSON        STEVE          PSC 294             FCT BIN22PMC\n  D294FCL  NELSON        STEVE          PSC 294             FCT BIN22PMC\n  D294FPC  TOYAMA        DAN            PSC 294             FPT BIN26JAP\n  D294FPL  TOYAMA        DAN            PSC 294             FPT BIN26JAP\n  D294FPP  TOYAMA        DAN            PSC 294             FPT BIN26JAP\n  D294FSC  TOYAMA        DAN            PSC 294             FST BIN26RMC\n  D294FSE  TOYAMA        DAN            PSC 294             FST BIN26RMC\n  D294FSJ  TOYAMA        DAN            PSC 294             FST BIN26RMC\n  D294FSL  TOYAMA        DAN            PSC 294             FST BIN26RMC\n  D294FSP  TOYAMA        DAN            PSC 294             FST BIN26RMC\n  D294GLC  NELSON        STEVE          PSC 294             GCT BIN21SLE\n  D294GLE  NELSON        STEVE          PSC 294             GLT BIN21SLE\n  D294GLL  NELSON        STEVE          PSC 294             GLT BIN21SLE\n  D294GLP  NELSON        STEVE          PSC 294             GLT BIN21SLE\n  D294IAC  NELSON        STEVE          PSC 294             IAT BIN21MAS\n  D294IAE  NELSON        STEVE          PSC 294             IAT BIN21MAS\n  D294IAJ  NELSON        STEVE          PSC 294             IAT BIN21MAS\n  D294IAL  NELSON        STEVE          PSC 294             IAT BIN21MAS\n  D294IAP  NELSON        STEVE          PSC 294             IAT BIN21MAS\n  D294ILC  NELSON        STEVE          PSC 294             ILT BIN21MAS\n  D294ILE  NELSON        STEVE          PSC 294             ILT BIN21MAS\n  D294ILJ  NELSON        STEVE          PSC 294             ILT BIN21MAS\n  D294ILL  NELSON        STEVE          PSC 294             ILT BIN21MAS\n  D294ILP  NELSON        STEVE          PSC 294             ILT BIN21MAS\n  D294INL  NELSON        STEVE          PSC 294             INT BIN22PMC\n  D294IQC  TOYAMA        DAN            PSC 294             IQT BIN25KAF\n  D294IQL  TOYAMA        DAN            PSC 294             IQT BIN25KAF\n  D294IQP  TOYAMA        DAN            PSC 294             IQT BIN25KAF\n  D294IRC  LANZINGER     PAT            PSC 294             IRT BIN37JBN\n  D294IRE  LANZINGER     PAT            PSC 294             IRT BIN37JBN\n  D294IRJ  LANZINGER     PAT            PSC 294             IRT BIN37JBN\n  D294IRL  LANZINGER     PAT            PSC 294             IRT BIN37JBN\n  D294IRP  LANZINGER     PAT            PSC 294             IRT BIN37JBN\n  D294ISL  NELSON        STEVE          PSC 294             IST BIN22PMC\n  D294ISP  NELSON        STEVE          PSC 294             IST BIN22PMC\n  D294ITL  NELSON        STEVE          PSC 294             ITT BIN21SLE\n  D294ITP  NELSON        STEVE          PSC 294             ITT BIN21SLE\n  D294LPL  NELSON        STEVE          PSC 294             LPT BIN21SVR\n  D294LPP  NELSON        STEVE          PSC 294             LPT BIN21SVR\n  D294MFJ  LANZINGER     PAT            PSC 294             MFT BIN37JBN\n  D294MMC  TOYAMA        DAN            PSC 294             MMT BIN24VMM\n  D294MME  TOYAMA        DAN            PSC 294             MMT BIN24VMM\n  D294MMJ  TOYAMA        DAN            PSC 294             MMT BIN24VMM\n  D294MML  TOYAMA        DAN            PSC 294             MMT BIN24VMM\n  D294MMP  TOYAMA        DAN            PSC 294             MMT BIN24VMM\n  D294MSL  CLEMENCE      BOB            PSC 294             MST BIN26RMC\n  D294MSP  CLEMENCE      BOB            PSC 294             MST BIN26RMC\n  D294OLC  MERWIN        GINGER         PSC 294             OLT BIN24VMM\n  D294OLJ  MERWIN        GINGER         PSC 294             OLT BIN24VMM\n  D294OLL  MERWIN        GINGER         PSC 294             OLT BIN24VMM\n  D294OLP  MERWIN        GINGER         PSC 294             OLT BIN24VMM\n  D294PAL  NELSON        STEVE          PSC 294             PAT BIN22CVY\n  D294PAP  NELSON        STEVE          PSC 294             PAT BIN22CVY\n  D294PCL  TOYAMA        DAN            PSC 294             WAT BIN26MRL\n  D294PCP  TOYAMA        DAN            PSC 294             WAT BIN26MRL\n  D294PEC  TOYAMA        DAN            PSC 294             PET BIN26CDW\n  D294PEE  TOYAMA        DAN            PSC 294             PET BIN26CDW\n  D294PEJ  TOYAMA        DAN            PSC 294             PET BIN26CDW\n  D294PEL  TOYAMA        DAN            PSC 294             PET BIN26CDW\n  D294PEP  TOYAMA        DAN            PSC 294             PET BIN26CDW\n  D294PFP  NORLIN        BOB            PSC 294             PFT BIN39RNN\n  D294PRL  NORLIN        BOB            PSC 294             PRT BIN39RNN\n  D294PRP  NORLIN        BOB            PSC 294             PRT BIN39RNN\n  D294PYP  NELSON        STEVE          PSC 294             PYT BIN22CVY\n  D294RBP  NELSON        STEVE          PSC 294             RBT BIN21SVR\n  D294REL  TOYAMA        DAN            PSC 294             RET BIN25KAF\n  D294REP  TOYAMA        DAN            PSC 294             RET BIN25KAF\n  D294ROL  FRATER        KIM            PSC 294             ROT BIN39KAF\n  D294ROP  FRATER        KIM            PSC 294             ROT BIN39KAF\n  D294RRP  TOYAMA        DAN            PSC 294             RRT BIN26KAF\n  D294RSC  TOYAMA        DAN            PSC 294             RST BIN26RMC\n  D294RSE  TOYAMA        DAN            PSC 294             RST BIN26RMC\n  D294RSJ  TOYAMA        DAN            PSC 294             RST BIN26RMC\n  D294RSL  TOYAMA        DAN            PSC 294             RST BIN26RMC\n  D294RSP  TOYAMA        DAN            PSC 294             RST BIN26RMC\n  D294SDC  NORLIN        BOB            PSC 294             SDT BIN39RNN\n  D294SDL  NORLIN        BOB            PSC 294             SDT BIN39RNN\n  D294SFC  FRATER        KIM            PSC 294             SFT BIN26KAF\n  D294SFE  FRATER        KIM            PSC 294             SFT BIN26KAF\n  D294SFL  TOYAMA        DAN            PSC 294             SFT BIN26KAF\n  D294SFP  TOYAMA        DAN            PSC 294             SFT BIN26KAF\n  D294SVP  TOYAMA        DAN            PSC 294             SVT BIN26CDW\n  D294TEL  TOYAMA        DAN            PSC 294             TET BIN25KAF\n  D294TEP  TOYAMA        DAN            PSC 294             TET BIN25KAF\n  D294THL  TOYAMA        DAN            PSC 294             THT BIN26RMC\n  D294THP  TOYAMA        DAN            PSC 294             THT BIN26RMC\n  D294TRP  NELSON        STEVE          PSC 294             TRT BIN21SLE\n  D294TTL  TOYAMA        DAN            PSC 294             TTT BIN26CDW\n  D294UDP  TOYAMA        DAN            PSC 294             UDT BIN24TAH\n  D294VCP  TOYAMA        DAN            PSC 294             VCT BIN26JAP\n  D294WTL  TOYAMA        DAN            PSC 294             WTT BIN26DMT\n  D294WTP  TOYAMA        DAN            PSC 294             STT BIN26DMT\n  D297CTD  RAADE         DONNA          PSC 297             297 BIN33\n  D299ABC  UNDERWOOD     ROGER          PSC 299             299 BIN18\n  D299PBJ  UNDERWOOD     ROGER          PSC 299             299 BIN18\n  D299QAJ  UNDERWOOD     ROGER          PSC 299             299 BIN18\n  D299SEJ  PELLICANO     JUDY           PSC 299             299 BIN18\n  D299SEL  UNDERWOOD     ROGER          PSC 299             299 BIN18\n  D307MEP  GLOVER        RICH           PSC 307             307 DEPT307\n  D308PEL  WILLIAMSON    JANE           PSC 308             308 BIN10\n  D309OPJ  THOMPSON      MARC           PSC 309             309 BIN06\n  D317CUL  BLAIR         JIM            PSC 317             317 BIN20\n  D317FAJ  BLAIR         JIM            PSC 317             317 BIN20\n  D317FAP  BLAIR         JIM            PSC 317             317 BIN20\n  D800MSP  PHELPS        FRANCES        PMC 402             800 PMC402\n  D800SMP  PHELPS        FRANCES        PMC 402             800 PMC402\n  FHSCB20  FIRST HERITAG BANK OF SNO    PSC 317             317 BIN20\n  HCBCB20  HARBOR COMM.  BANK           PSC 317             317 BIN20\n  HSMCB20  HARBOR SECURITY BANK         PSC 317             317 BIN20\n  HTGEW20  HERITAGE BANK                PSC 317             317 BIN20\n  H294DAL  NORLIN        BOB            PSC 294             DAT BIN39RNN\n  H294DAP  NORLIN        BOB            PSC 294             DAT BIN39RNN\n  H294DBL  LANZINGER     PAT            PSC 294             DBT BIN38DPN\n  H294DIP  LANZINGER     PAT            PSC 294             DIT BIN38DPN\n  H294HGC  LANZINGER     PAT            PSC 294             HGT BIN38DPN\n  H294HGE  LANZINGER     PAT            PSC 294             HGT BIN38DPN\n  H294HGJ  LANZINGER     PAT            PSC 294             HGT BIN38DPN\n  H294HGL  LANZINGER     PAT            PSC 294             HGT BIN38DPN\n  H294HGP  LANZINGER     PAT            PSC 294             HGT BIN38DPN\n  H294HSC  LANZINGER     PAT            PSC 294             HST BIN37DAC\n  H294HSE  LANZINGER     PAT            PSC 294             HST BIN37DAC\n  H294HSL  LANZINGER     PAT            PSC 294             HST BIN37DAC\n  H294HSP  LANZINGER     PAT            PSC 294             HST BIN37DAC\n  H294LSL  LANZINGER     PAT            PSC 294             LST BIN37LAW\n  H294LSP  LANZINGER     PAT            PSC 294             LST BIN37LAW\n  H294OCL  BEALS         LOIS           PSC 294             OCT BIN38LWB\n  H294OCP  BEALS         LOIS           PSC 294             OCT BIN38LWB\n  H294RPL  LANZINGER     PAT            PSC 294             RPT BIN37DAC\n  H294RPP  LANZINGER     PAT            PSC 294             RPT BIN37DAC\n  H294TAC  NORLIN        BOB            PSC 294             TAT BIN39RNN\n  H294TAE  NORLIN        BOB            PSC 294             TAT BIN39RNN\n  H294TAJ  NORLIN        BOB            PSC 294             TAT BIN39RNN\n  H294TAP  NORLIN        BOB            PSC 294             TAT BIN39RNN\n  IBMUSER  UNDERWOOD     ROGER          PSC 299             299 BIN18\n  IPO1     PEARSALL      TAMAR          PSC 220             220 BIN04\n  ISP      DONAGLIA      RON            PSC 220             220 BIN04\n  NPBCB20  NORTH PACIFIC BANK           PSC 317             317 BIN20\n  NWNCB20  NORTHWESTERN NATIONAL        PSC 317             317 BIN20\n  PBDD     DONAGLIA      RON            PSC 220             220 BIN04\n  PBDP     DONAGLIA      RON            PSC 220             220 BIN04\n  PBDV     DONAGLIA      RON            PSC 220             220 BIN04\n  PRJES18  $PROJECT      ESCROW ACCTG   PSC 294             EST BIN26CDN\n  SYSA     DONAGLIA      RON            PSC 220             220 BIN04\n  SYSB     DONAGLIA      RON            PSC 220             220 BIN04\n  SYSD     DONAGLIA      RON            PSC 220             220 BIN04\n  SYSO     DONAGLIA      RON            PSC 220             220 BIN04\n  SYSS     DONAGLIA      RON            PSC 220             220 BIN04\n  SYST     DONAGLIA      RON            PSC 220             220 BIN04\n  SYSU     DONAGLIA      RON            PSC 220             220 BIN04\n  SYS1     DONAGLIA      RON            PSC 220             220 BIN04\n  SYS2     DONAGLIA      RON            PSC 220             220 BIN04\n  SYS3     DONAGLIA      RON            PSC 220             220 BIN04\n  TCBCB20  TACOMA        BANK           PSC 317             317 BIN20\n  TSGDR04  DISASTER RECOVERY            PSC 220             220 BIN04\n  TSTA     DONAGLIA      RON            PSC 220             220 BIN04\n  TSTT     DONAGLIA      RON            PSC 220             220 BIN04\n  UTSTA    UNDERWOOD     ROGER          PSC 299             299 BIN18\n  UTST2    UNDERWOOD     ROGER          PSC 299             299 BIN18\n  U220CDB  BURNS         CHRIS          PSC 220             220 BIN04\n  U220CMF  FAUCONNIER    CHRIS          PSC 220             220 BIN04\n  U220COB  BOONE         CELESTINE      PSC 220             220 BIN04\n  U220DFS  SHEPARD       DON            PSC 220             220 BIN04\n  U220FAF  FANT          FRED           PSC 220             220 BIN04\n  U220GAM  MATHEW        FRED           PSC 220             220 BIN04\n  U220GAZ  ZATARAIN      GRETCHEN       PSC 220             220 BIN04\n  U220HRR  RALPH         HARRY          PSC 220             220 BIN04\n  U220IBM  IBM CE     (TSD)             PSC 220             220 BIN04\n  U220MWH  HEROLD        MARC           PSC 220             220 BIN04\n  U220PJR  RUSSELL       PATRICK        PSC 220             220 BIN04\n  U220RBS  SITTERDING    ROBERT         PSC 220             220 BIN04\n  U220REC  PEARSALL      TAMAR          PSC 220             220 BIN04\n  U220RED  DONAGLIA      RON            PSC 220             220 BIN04\n  U220TAC  RUSSELL       PAT            PSC 220             220 BIN04\n  U220TGP  PEARSALL      TAMAR          PSC 220             220 BIN04\n  U220TST  PEARSALL      TAMAR          PSC 220             220 BIN04\n  U223DCP  PEARSON       DAVE           PSC 223             223 BIN17\n  U223DDD  DAVIDSON      DOUG           PSC 223             223 BIN17\n  U223DJG  GOEDECKE      DAVE           PSC 223             223 BIN02\n  U223HLP  POPE          HENRY          PSC 223             223 BIN17\n  U223JRP  PIELEMEIER    JON            PSC 223             223 BIN02\n  U240DDT  THORNTON      DIANE          PSC 240             240 BIN02\n  U262GJF  FORTUN        GAIL           PSC 262             262 BIN03\n  U262GNK  KORATHU       GEORGE         PSC 262             262 BIN03\n  U262GPR  RASALAN       GREG           PSC 262             262 BIN03\n  U262GXH  HOSHINO       GAYLE          PSC 262             262 BIN03\n  U262JCC  CROASDILL     JAMES          PSC 262             262 BIN03\n  U262LEE  HENNE         LEE            PSC 262             262 BIN03\n  U262NCB  BALLARD       NEAL           PSC 262             262 BIN03\n  U262RXL  LADNER        ROBERT         PSC 262             262 BIN03\n  U262RXP  PEDERSON      RHONDA         PSC 262             262 BIN03\n  U262TXG  GEDGAUDAS     TOM            PSC 262             262 BIN03\n  U263AHP  POTTER-HAREWOOD ANGELA       H/O 263             263 HO263\n  U263EAG  GILCHRIST     ELIZABETH      H/O 263             263 HO263\n  U263JCC  CARSON        JIM            H/O 263             263 HO263\n  U263JDH  HERRMANN      JACKLYNN       H/O 263             263 HO263\n  U263JOS  SPARKS        JOHN           H/O 263             263 HO263\n  U263JWR  RILEY         JOHN           H/O 263             263 HO263\n  U263KLC  CUDNEY        KATHIE         H/O 263             263 HO263\n  U263PJM  MOLVAR        PAM            H/O 263             263 HO263\n  U263RLP  PETERSON      REBECCA        H/O 263             263 HO263\n  U263SSA  ANDERSON      SANDRA         H/O 263             263 HO263\n  U263TBL  LUONG         THUY           H/O 263             263 HO263\n  U263WNF  FOSTER        WALTER         H/O 263             263 HO263\n  U267KLM  MEYER         KAREN          PSC 267             267 EFC267\n  U267KLT  THURMAN       KATHY          PSC 267             267 EFC267\n  U267LLS  SCHEI         LINDA          EFC 267             267 EFC267\n  U269BRF  FOX           BRIAN          H/O 269             269 HO269\n  U269CLK  KEEN          CHERRY         H/O 269             269 HO269\n  U269EWP  PRICE         ELIZABETH      H/O 269             269 HO269\n  U269FLW  WILLIAMS      FRAN           H/O 269             269 HO269\n  U269JNB  BOOMER        JENNIFER       H/O 269             269 HO269\n  U269KBB  BALL          KRIS           H/O 269             269 HO269\n  U269PLP  PETERSON      PAULA          H/O 269             269 HO269\n  U269PXP  PHILLIPS      PATTY          H/O 269             269 HO269\n  U269SLS  STIEGLER      SUE            H/O 269             269 HO269\n  U269SMG  GRAN          STELLA         H/O 269             269 HO269\n  U270DWB  BASH          DENNIS         PSC 270             270 DEPT270\n  U270JMH  HASKELL       JIM            PSC 270             270 DEPT270\n  U270KDF  FULTON        KEVIN          PSC 270             270 DEPT270\n  U270KMH  HOUGER        KERSTIN        PSC 270             270 DEPT270\n  U270MAR  REICHLE       MARY ANNE      PSC 270             270 DEPT270\n  U270NRS  SPEAR         NORM           PSC 270             270 DEPT270\n  U270PEH  HEPPENSTALL   PHYLLIS        PSC 270             270 DEPT270\n  U270RGW  WINKLER       RENEE          PSC 270             270 DEPT270\n  U270SAN  NAGAI         STEVEN         PSC 270             270 DEPT270\n  U270WMM  MCFADDEN      MAXINE         PSC 270             270 DEPT270\n  U283EAB  BUEHLER       LIZ            PSC 317             283 DEPT283\n  U283LMB  BISHOP        LINDA          PSC 317             283 DEPT283\n  U291AAM  MANIO         TONY           PSC 291             291 BIN17\n  U291CES  SMITH         CLAY           PSC 291             291 BIN17\n  U291CGK  KELLY         CLARA          PSC 291             291 BIN17\n  U291CLC  COE           CHRISTY        PSC 291             291 BIN17\n  U291CLW  WILSON        CARL           PSC 291             291 BIN17\n  U291DMO  OLIVER        DENNIS         PSC 291             291 BIN17\n  U291GFB  WILSON        CARL           PSC 291             291 BIN17\n  U291HLP  POPE          HENRY          PSC 291             291 BIN17\n  U291JBM  MORRILL       JEFFREY        PSC 291             291 BIN17\n  U291KAS  SMITH         KIM            PSC 291             291 BIN17\n  U291LEF  FLANAGAN      LULA           PSC 291             291 BIN17\n  U291NMW  MURRAY        NINA           PSC 291             291 BIN17\n  U291RAE  ESCUDERO      RIEL           PSC 291             291 BIN17\n  U291RCB  BELTRAN       ROEHL          PSC 291             291 BIN17\n  U291RCJ  JONES         ROBERT         PSC 291             291 BIN17\n  U291RDW  WRIGHT        ROGER          PSC 291             291 BIN17\n  U291RRW  WALLS         RESSA          PSC 291             291 BIN17\n  U291STC  STC CE   (OPERATION)         PSC 291             291 BIN17\n  U291VLR  ROBINSON      VICKII         PSC 291             291 BIN17\n  U293AXF  FORTSON       ALFREDA        PSC 293             293 BIN11\n  U293BJH  HILL          BECKY          PSC 293             293 BIN11\n  U293JPM  MORGAN        JOE            PSC 293             293 BIN11\n  U293SJT  TANAKA        SHERYL         PSC 293             293 BIN11\n  U294BWH  NORLIN        BOB            PSC 294             294 BIN23BWH\n  U294CDW  WILLIAMS      CAROLYN        PSC 294             294 BIN26CDW\n  U294CSS  LANZINGER     PAT            PSC 294             294 BIN37PAL\n  U294CTG  NORLIN        BOB            PSC 294             294 BIN39CTG\n  U294CVY  YARDLEY       CHERIE         PSC 294             294 BIN22CVY\n  U294DAC  CLEMENTS      DAVID          PSC 294             294 BIN37DAC\n  U294DMT  TOYAMA        DAN            PSC 294             294 BIN26DMT\n  U294DPN  NORRIS        DOUG           PSC 294             294 BIN38DPN\n  U294FTL  LINDSKOV      FRANK          PSC 294             294 BIN38FTL\n  U294HET  TOYAMA        DAN            PSC 294             294 BIN26DMT\n  U294JAP  PENTONY       JEAN           PSC 294             294 BIN26JAP\n  U294JBN  NORDHEIM      JOAN           PSC 294             294 BIN37JBN\n  U294JRB  NORLIN        BOB            PSC 294             294 BIN39JRB\n  U294JRJ  NELSON        STEVE          PSC 294             294 BIN23JRJ\n  U294KAF  FRATER        KIM            PSC 294             294 BIN25KAF\n  U294KMM  MARSHALL      KANDY          PSC 294             294 BIN39KMM\n  U294KSK  KINNAIRD      KEITH          PSC 294             294 BIN21KSK\n  U294LKD  SILHAN        MIKE           PSC 294             294 BIN21LKD\n  U294LSJ  JOHNSON       LAUREL         PSC 294             294 BIN21LSJ\n  U294LWB  BEALS         LOIS           PSC 294             294 BIN38LWB\n  U294MAS  SWANSON       MARILYN        PSC 294             294 BIN22MAS\n  U294MJR  RYAN          MARK           PSC 294             294 BIN39MJR\n  U294MJS  SILHAN        MIKE           PSC 294             294 BIN39MJS\n  U294MJW  WERT          MARTY          PSC 294             294 BIN37MJW\n  U294MKN  NELSON        MARIE          PSC 294             294 BIN39MKN\n  U294MRL  LOCKWOOD      MARK           PSC 294             294 BIN26MRL\n  U294PAL  LANZINGER     PAT            PSC 294             294 BIN37PAL\n  U294PMC  CRIPPEN       PAT M          PSC 294             294 BIN22PMC\n  U294RMC  CLEMENCE      BOB            PSC 294             294 BIN26RMC\n  U294RNN  NORLIN        BOB            PSC 294             294 BIN39RNN\n  U294SEL  NELSON        STEVE          PSC 294             294 BIN21SEL\n  U294SKH  HALE          SANDY          PSC 294             294 BIN27SKH\n  U294SLE  EINESS        SIGNE          PSC 294             294 BIN21SLE\n  U294SVR  ROLLER        STEVE          PSC 294             294 BIN21SVR\n  U294SWN  NELSON        STEVE          PSC 294             294 BIN21SWN\n  U294TAH  HOLLINGSWORTH TRACI          PSC 294             294 BIN24TAH\n  U294VLB  BREY          VICKI          PSC 294             294 BIN39VLB\n  U294VMM  MERWIN        GINGER         PSC 294             294 BIN24VMM\n  U295BRP  PAGE          BERNIE         PSC 295             295 BIN36BRP\n  U295CKK  KONDO         CHARLIE        PSC 295             295 BIN36CKK\n  U295KEV  VANDENBERGHE  KIRK           PSC 295             295 BIN36KEV\n  U295KMB  BOCEK         KARLA          PSC 295             295 BIN36KMB\n  U295LET  TRENT         GENE           PSC 295             295 BIN36LET\n  U295LJL  LOWTHER       LOIS           PSC 295             295 BIN36LJL\n  U295SAK  KRAUSE        SHARON         PSC 295             295 BIN36SAK\n  U296BJL  LARSEN        BETTY          PSC 296             296 DEPT296\n  U296DLH  HENNERBERG    DAWN           PSC 296             296 DEPT296\n  U296JAN  NORRIS        JERRI          PSC 296             296 DEPT296\n  U296MAH  HALVERSON     MARGARET       PSC 296             296 DEPT296\n  U296QTN  NGUYEN        QUY            PSC 296             296 DEPT296\n  U296SRA  ATHMANN       SHIRLEY        PSC 296             296 DEPT296\n  U297DLR  RAADE         DONNA          PSC 297             297 BIN33\n  U297JAR  ROBBINS       JULIE          PSC 297             297 BIN33\n  U297LVH  VAN HOUTEN    LAURIE         PSC 297             297 BIN33\n  U299ABC  UNDERWOOD     ROGER          PSC 299             299 BIN18\n  U299BCW  WEBER         BONNIE         PSC 299             299 BIN18\n  U299JLP  PELLICANO     JUDY           PSC 299             299 BIN18\n  U299PJQ  QUAIN         PAT            PSC 299             299 BIN18\n  U299RCU  UNDERWOOD     ROGER          PSC 299             299 BIN18\n  U299XYZ  UNDERWOOD     ROGER          PSC 299             299 BIN18\n  U301RSB  BABB          RONALD         PSC 301             301 BIN06\n  U301SAS  SADRI         SASAN          PSC 301             301 BIN06\n  U305CDH  HALL          CHERYL         PSC 305             305 DEPT305\n  U307GGB  BENSON        GWEN           PSC 307             307 DEPT307\n  U307JAA  AMES          JENNFIER       PSC 307             307 DEPT307\n  U307JAB  BROST         JENNFIER       PSC 307             307 DEPT307\n  U307KSP  PARKER        KRISTIN        PSC 307             307 DEPT307\n  U307LAC  COOMBE        LOIS           PSC 307             307 DEPT307\n  U307LBT  TREEN         LAURA          PSC 307             307 DEPT307\n  U307LES  SCHUTT        LORI           PSC 307             307 DEPT307\n  U307RMM  MEDEL         RUSS           PSC 307             307 DEPT307\n  U307RSG  GLOVER        RICHARD        PSC 307             307 DEPT307\n  U307TSF  FLEMING       TERESITA       PSC 307             307 DEPT307\n  U308AEB  BUSTARD       ANNA           PSC 308             308 BIN10\n  U308CLR  RUIZ          CARRIE         PSC 308             308 BIN10\n  U308CQB  BRAVO         CENY           PSC 308             308 BIN10\n  U308DLR  RAPLEE        DEBORAH        PSC 308             308 BIN10\n  U308EMM  MCCOWIN       EMMA           PSC 308             308 BIN10\n  U308FDC  CHARLES       FRAN           PSC 308             308 BIN10\n  U308JHW  WILLIAMSON    JANE           PSC 308             308 BIN10\n  U308JKE  EDISON        JOAN           PSC 308             308 BIN10\n  U308JLJ  JONES         JACQUIE        PSC 308             308 BIN10\n  U308JMS  SWANSON       JEANNE         PSC 308             308 BIN10\n  U308KGU  UNDERWOOD     KATHLEEN       PSC 308             308 BIN10\n  U308KIL  LEWTER        KATHY          PSC 308             308 BIN10\n  U308LME  EATON         LOUISE         PSC 308             308 BIN10\n  U308LPT  TRAN          LAN            PSC 308             308 BIN10\n  U308MHG  GONEAU        HEATHER        PSC 308             308 BIN10\n  U308MJA  ARKLE         MONICA         PSC 308             308 BIN10\n  U308MJP  PARK          MOON           PSC 308             308 BIN10\n  U309BMR  RAE           BRUCE          PSC 309             309 BIN06\n  U309BST  TAYLOR        BRAD           PSC 309             309 BIN06\n  U309FMC  CHRISTOPHERSON FRAN          PSC 309             309 BIN06\n  U309JRW  WHITE         JAMES          PSC 309             309 BIN06\n  U309KAM  MILLER        KEN            PSC 309             309 BIN06\n  U309KSC  CLEMENT       KATHI          PSC 309             309 BIN06\n  U309KZS  SINGH         KISHOR         PSC 309             309 BIN06\n  U309MAF  FARRELL       MARK           PSC 309             309 BIN06\n  U309MLT  TOTTEN        MARC           PSC 309             309 BIN06\n  U309NDP  PETERSON      DAN            PSC 309             309 BIN06\n  U309PMA  ANDERSON      PAULA          PSC 309             309 BIN06\n  U309SVO  SETTHIVUTH    OUNG           PSC 309             309 BIN06\n  U309VJP  PAULEY        VIKKI          PSC 309             309 BIN06\n  U310BNA  ANDERSON      BRAD           PSC 310             310 BIN60\n  U310LXP  PESCE         LINDA          PSC 310             310 BIN60\n  U310PDH  HAGEN         PAUL           PSC 310             310 BIN60\n  U310PLS  SMITH         PAUL           PSC 310             310 BIN60\n  U310RLL  LYONS         ROBERT         PSC 310             310 BIN60\n  U310SSM  MARTIN        STEVE          PSC 310             310 BIN60\n  U311AXC  CASEY         ALAYNA         PSC 311             311 DEPT311\n  U311GJJ  JOHNSON       GLADYS         PSC 311             311 DEPT311\n  U311JAJ  JOHNSON       JERRY          PSC 311             311 DEPT311\n  U311PMO  OLSEN         PATRICIA       PSC 311             311 DEPT311\n  U314DAL  LIEDBERG      DOROTHY        PSC 314             314 BIN05\n  U314MMC  CORRELL       MARGIE         PSC 314             314 BIN05\n  U315RAP  PENDARVIS     ROBERT         PSC 315             315 DEPT315\n  U316BCB  BURNS         BARBARA        PSC 316             316 BIN08\n  U316EFS  JACKSON       ELVIE          PSC 316             316 BIN08\n  U316TRP  POPE          THERESA        PSC 316             316 BIN08\n  U317BAP  POWELL        BARBARA        PSC 317             317 BIN20\n  U317DMB  BAGBY         DONNA          PSC 317             317 BIN20\n  U317JDB  BLAIR         JIM            PSC 317             317 BIN20\n  U317LMB  BISHOP        LINDA          PSC 317             317 BIN20\n  U317LXC  CRITES        LINDA          PSC 317             317 BIN20\n  U317MER  ROBERTSON     MARY           PSC 317             317 BIN20\n  U317RSD  BLAIR         JIM            PSC 317             317 BIN20\n  U317SSS  SHUTTLEWORTH  STEPHANIE      PSC 317             317 BIN20\n  U318DAW  WILLIAMS      DUREESE        PSC 318             318 BIN13\n  U318MRT  THOMPSON      MARC           PSC 318             318 BIN13\n  U318RAN  NATHANE       ROBERT         PSC 318             318 BIN13\n  U319BJA  JOHNSON       LINDA          PSC 319             319 DEPT319\n  U319CSC  CONKLIN       CHRIS          PSC 319             319 DEPT319\n  U319DAH  HENDRICKSON   DEBBIE         PSC 319             319 DEPT319\n  U319JKJ  JONES         JACQUELINE     PSC 319             319 DEPT319\n  U319KVC  COMPTON       KATHY          PSC 319             319 DEPT319\n  U319RAS  STAMM         RICHARD        PSC 319             319 DEPT319\n  U319SME  ELLER         SHELMA         PSC 319             319 DEPT319\n  U333DMJ  JACOBSON      DIANE          H/O 333             333 HO333\n  U333JLR  RAE           JACKIE         H/O 333             333 HO333\n  U333LDL  LONGDON       LISA           H/O 333             333 HO333\n  U333MJS  STADIN        MARY           H/O 333             333 HO333\n  U333PWC  CLARK         PHILIP         H/O 333             333 HO333\n  U333TLG  GEORGE        TINA           H/O 333             333 HO333\n  U333VLA  ARELLANO      VANESA         H/O 333             333 HO333\n  U344TYS  SUZAKA        TERRY          H/O 344             344 HO344\n  U346CEW  WOLLAM        HAP            PSC 346             346 BIN29\n  U346EJG  GIBBS         ESTHER         PSC 346             346 BIN29\n  U346JIM  MCCOSKEY      JAMES          PSC 346             346 BIN29\n  U346KQV  VERHALEN      KATHY          PSC 346             346 BIN29\n  U346MCM  MCCOMBS       MELINA         PSC 346             346 BIN29\n  U346VJG  GLATT         VICKY          PSC 346             346 BIN29\n  U366JPW  WILLIAMS      JOE            H/O 366             366 HO366\n  U470CMB  BRYAN         CATHY          H/O 470             470 HO470\n  U555CEB  BOSMA         CAROLYN        H/O 555             555 HO555\n  U555ESL  LARRABEE      BETSY          H/O 555             555 HO555\n  U800CAD  DONOHUE       CHARLEEN       PMC 402             800 PMC402\n  U800FEP  PHELPS        FRANCES        PMC 402             800 PMC402\n  U800KEB  BENDIXSEN     KRIS           PMC 402             800 PMC402\n  U800KYG  GROUT         KARIN          PMC 402             800 PMC402\n  U800LCB  BRANNAM       CAROLE         PMC 402             800 PMC402\n  U800MDR  ROLOFF        MICHELLE       PMC 402             800 PMC402\n  U800MET  THOMAS        MARK           PMC 410             800 PMC410\n  U800SLS  STEINKE       SHARON         PMC 402             800 PMC402\n  U800TMH  HUNDAHL       TERESA         PMC 402             800 PMC402\n  U800WXP  PHILIPS       WILMA          PMC 402             800 PMC402\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DATCNVRT": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x02\\xb5\\x02\\xb5\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:22", "lines": 693, "newlines": 693, "modlines": 0, "user": "FILE097"}, "text": "DATCNVRT CSECT\n         REGS\n         USING DATCNVRT,R15   ADDRESSABILITY\n         B     EP1            SKIP EYECATCHER\n         DC    AL1(L'CSECTLIT)\nCSECTLIT DC    C'DATCNVRT - CONVERT BETWEEN DATE FORMATS &SYSDATE'\n         EJECT\n*\n*        THIS SUBROUTINE CONVERTS BETWEEN 3 DATE FORMATS.  THE DATE\n*        MAY BE SUPPLIED AS YEAR + DAY OF YEAR (ANNUAL JULIAN) OR\n*        YEAR + MONTH (1=JA - 12=DE) + DAY OF MONTH (GREGORIAN) OR\n*        DAY NUMBER (ABSOLUTE JULIAN).  THE SUBROUTINE WILL COMPUTE\n*        THE VALUES OF THE PARAMETERS COMPRISING THE OTHER FORMATS.\n*        ADDITIONALY, THE SUBROUTINE WILL COMPUTE THE DAY OF WEEK\n*        (1=SU - 7=SA).  THE FOLLOWING IS A TABLE OF THE CALLING\n*        PARAMETER DESCRIPTIONS AND USES:\n*\n*        NAME      DESCRIPTION       *** EXAMPLES *** GREG ABSJ JULA\n*        DCYEAR    YEAR (SEE NOTE)        75     1975  VAL    0  VAL\n*        DCMONTH   MONTH IN YEAR     (MY)  5  (OC) 10  VAL    0    0\n*        DCDOM     DAY OF MONTH           19       12  VAL    0    0\n*        DCDOY     DAY OF YEAR           139      285    0    0  VAL\n*        DCDOW     DAY OF WEEK       (MO)  2  (SU)  1  SUP  SUP  SUP\n*        DCJDAY    JULIAN DAY (ABS)  2442552  2442698    0  VAL    0\n*\n*                VAL = VALUE TO BE SUPPLIED BY CALLING PROGRAM.\n*                      THESE NUMBERS WILL NOT BE CHANGED BY THE\n*                      SUBROUTINE.\n*                  0 = VALUE MUST BE SET TO 0 BY CALLING PROGRAM.\n*                      THE SUBROUTINE WILL REPLACE THESE WITH THE\n*                      COMPUTED VALUES.\n*                SUP = INITIAL VALUE IGNORED.  VALUE WILL BE\n*                      SUPPLIED BY THE SUBROUTINE.\n*\n*        NOTE:  YEAR MAY BE SUPPLIED AS THE FULL YEAR (1975) OR AS\n*               THE SHORT YEAR (75).  THE SHORT YEAR WILL BE\n*               CONVERTED INTO THE FULL YEAR FORM INTERNALY BY\n*               ADDING 1900.  IF THIS IS DONE DCYEAR WILL BE LEFT\n*               UNCHANGED.  IF DCYEAR IS COMPUTED BY THE SUBROUTINE\n*               IT WILL BE SUPPLIED IN THE FULL YEAR FORM.\n*\n*        THE DATE CONVERSION LOGIC IS BASED ON ACM ALGORITHMS 199\n*        FOR DAY OF YEAR AND 398 FOR ABSOLUTE JULIAN DATE AS\n*        PUBLISHED IN THE COLLECTED ALGORITHMS OF THE ASSOCIATION\n*        FOR COMPUTING MACHINERY.  THE ALGORITHMS ARE COPYRIGHTED AND\n*        MAY BE USED BY ANYONE BUT NOT SOLD FOR PROFIT.\n*\n         EJECT\nEP1      DS    0H             DATCNVRT\n         SAVE  (14,12)        *****  START PREAMBLE  *****\n         LR    R12,R15\n         DROP  R15\n         USING DATCNVRT,R12\n         IC    R15,=C'1'      INDICATE DATCNVRT\n         B     MAINEP         TO MAINLINE\n         LTORG\n         SPACE 2\n         ENTRY DATCVT2\n         DROP  R12\n         USING DATCVT2,R15\nDATCVT2  DS    0F\n         SAVE  (14,12)        *****  START PREAMBLE  *****\n         L     R12,=A(DATCNVRT)\n         DROP  R15\n         USING DATCNVRT,R12\n         IC    R15,=C'2'      INDICATE DATCVT2\n         B     MAINEP         TO MAINLINE\n         LTORG\n         SPACE 2\nMAINEP   DS    0H             MAINLINE\n         LR    R2,R13         A(OLD SAVE AREA)\n         LA    R13,SAVEAREA   A(NEW SAVE AREA)\n         ST    R2,4(R13)\n         ST    R13,8(R2)\n         USING SAVEAREA,R13   *****  END   PREAMBLE  *****\n         STC   R15,EPSW       INDICATE ENTRY POINT\n         LA    R2,0(R1)       A(PARMS)\n         USING PARMS,R2       ADDRESSABILITY\n         ICM   R3,15,DCYEAR   POST A(YEAR)\n         BNP   ERRPARM        BAD PARAM LIST\n         ICM   R4,15,DCMONTH  POST A(MONTH)\n         BNP   ERRPARM        BAD PARAM LIST\n         ICM   R5,15,DCDOM    POST A(DAY OF MONTH)\n         BNP   ERRPARM        BAD PARAM LIST\n         ICM   R6,15,DCDOY    POST A(DAY OF YEAR)\n         BNP   ERRPARM        BAD PARAM LIST\n         ICM   R7,15,DCDOW    POST A(DAY OF WEEK)\n         BNP   ERRPARM        BAD PARAM LIST\n         ICM   R8,15,DCJDAY   POST A(ABSJ DAY)\n         BNM   ERRPARM        BAD PARAM LIST\n         MVC   WSYEAR,0(R3)   POST\n         MVC   WSMONTH,0(R4)  POST\n         MVC   WSDOM,0(R5)    POST\n         MVC   WSDOY,0(R6)    POST\n         MVC   WSDOW,0(R7)    POST\n         MVC   WSJDAY,0(R8)   POST\n         BAL   R14,CHKGREG    CHECK FOR GREGORIAN FORMAT\n         B     *+4(R15)       PROCESS RETURN CODE\n         B     GREG           00 - YES\n         B     CHK2           04 - NO\n         B     ERRRANGE       08 - RANGE ERROR\nGREG     EQU   *\n         BAL   R14,CHKY       CHECK YEAR FOR 01 - 99\n         BAL   R14,CLC1       MMDDYY --> JDAY\n         BAL   R14,CLC2       MMDDYY --> YYDDD\n         BAL   R14,CLC3       JDAY   --> DOW\n         B     EXITRC00\nCHK2     EQU   *\n         BAL   R14,CHKJULA    CHECK FOR ANNUAL JULIAN FORMAT\n         B     *+4(R15)       PROCESS RETURN CODE\n         B     JULA           00 - YES\n         B     CHK3           04 - NO\n         B     ERRRANGE       08 - RANGE ERROR\nJULA     EQU   *\n         BAL   R14,CHKY       CHECK YEAR FOR 01 - 99\n         BAL   R14,CLC4       YYDDD  --> MMDDYY\n         BAL   R14,CLC1       MMDDYY --> JDAY\n         BAL   R14,CLC3       JDAY   --> DOW\n         B     EXITRC00\nCHK3     EQU   *\n         BAL   R14,CHKABSJ    CHECK FOR ABSOLUTE JULIAN FORMAT\n         B     *+4(R15)       PROCESS RETURN CODE\n         B     ABSJ           00 - YES\n         B     CHK4           04 - NO\n         B     ERRRANGE       08 - RANGE ERROR\nABSJ     EQU   *\n         BAL   R14,CLC5       JDAY   --> MMDDYY\n         BAL   R14,CLC2       MMDDYY --> YYDDD\n         BAL   R14,CLC3       JDAY   --> DOW\n         B     EXITRC00\nCHK4     EQU   *\n         B     ERRPARMD       BAD PARAM DATA\n         EJECT\nCHKY     EQU   *              CHECK YEAR AND FIX\n         ST    R14,CHKYR14    SAVE RETURN ADDR\n         L     R14,WSYEAR     POST TO WORK REG\n         CH    R14,=H'01'     CHECK YEAR\n         BL    CHKYEXIT       NO FIX RQD\n         CH    R14,=H'99'     CHECK YEAR\n         BH    CHKYEXIT       NO FIX RQD\n         A     R14,=F'1900'   CHANGE CENTURY\n         ST    R14,WSYEAR     POST\nCHKYEXIT EQU   *\n         L     R14,CHKYR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         EJECT\nCHKGREG  EQU   *\n         ST    R14,CHKGR14    SAVE RETURN ADDR\n         CLC   =A(0),WSYEAR   CHECK YEAR\n         BNM   CHKGNO         MUST BE +\n         CLC   =A(0),WSMONTH  CHECK MONTH\n         BNM   CHKGNO         MUST BE +\n         CLC   =A(0),WSDOM    CHECK DAY OF MONTH\n         BNM   CHKGNO         MUST BE +\n         CLC   =A(0),WSDOY    CHECK DAY OF YEAR\n         BNZ   CHKGNO         MUST BE 0\n         CLC   =A(0),WSJDAY   CHECK ABSOLUTE DAY\n         BNZ   CHKGNO         MUST BE 0\n         SR    R15,R15        OK -- SET RC\n         BAL   R14,CMON       RANGE CHECK MONTH\n         BAL   R14,CDOM       RANGE CHECK DAY OF MONTH\n         B     CHKGEXIT       EXIT\nCHKGNO   EQU   *              BAD\n         LA    R15,4          SET RC\nCHKGEXIT EQU   *\n         L     R14,CHKGR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         EJECT\nCHKJULA  EQU   *\n         ST    R14,CHKJR14    SAVE RETURN ADDR\n         CLC   =A(0),WSYEAR   CHECK YEAR\n         BNM   CHKJNO         MUST BE +\n         CLC   =A(0),WSMONTH  CHECK MONTH\n         BNZ   CHKJNO         MUST BE 0\n         CLC   =A(0),WSDOM    CHECK DAY OF MONTH\n         BNZ   CHKJNO         MUST BE 0\n         CLC   =A(0),WSDOY    CHECK DAY OF YEAR\n         BNM   CHKJNO         MUST BE +\n         CLC   =A(0),WSJDAY   CHECK ABSOLUTE DAY\n         BNZ   CHKJNO         MUST BE 0\n         SR    R15,R15        OK -- SET RC\n         BAL   R14,CDOY       RANGE CHECK DAY OF YEAR\n         B     CHKJEXIT       EXIT\nCHKJNO   EQU   *              BAD\n         LA    R15,4          SET RC\nCHKJEXIT EQU   *\n         L     R14,CHKJR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         EJECT\nCHKABSJ  EQU   *\n         ST    R14,CHKAR14    SAVE RETURN ADDR\n         CLC   =A(0),WSYEAR   CHECK YEAR\n         BNZ   CHKANO         MUST BE 0\n         CLC   =A(0),WSMONTH  CHECK MONTH\n         BNZ   CHKANO         MUST BE 0\n         CLC   =A(0),WSDOM    CHECK DAY OF MONTH\n         BNZ   CHKANO         MUST BE 0\n         CLC   =A(0),WSDOY    CHECK DAY OF YEAR\n         BNZ   CHKANO         MUST BE 0\n         CLC   =A(0),WSJDAY   CHECK ABSOLUTE DAY\n         BNM   CHKANO         MUST BE +\n         SR    R15,R15        OK -- SET RC\n         B     CHKAEXIT       EXIT\nCHKANO   EQU   *              BAD\n         LA    R15,4          SET RC\nCHKAEXIT EQU   *\n         L     R14,CHKAR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         EJECT\nCMON     EQU   *\n         ST    R14,CMONR14    SAVE RETURN ADDR\n         CLC   WSMONTH,=F'1'  TOO LOW\n         BL    CMONNO         YES -- ERROR\n         CLC   WSMONTH,=F'12' TOO HIGH\n         BH    CMONNO         YES -- ERROR\n         B     CMONEXIT       EXIT\nCMONNO   EQU   *              BAD\n         LA    R15,8          SET RC\nCMONEXIT EQU   *\n         L     R14,CMONR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         EJECT\nCDOM     EQU   *\n         ST    R14,CDOMR14    SAVE RETURN ADDR\n         CLC   WSDOM,=F'1'    TOO LOW\n         BL    CDOMNO         YES -- ERROR\n         CLC   WSDOM,=F'31'   TOO HIGH\n         BH    CDOMNO         YES -- ERROR\n         B     CDOMEXIT       EXIT\nCDOMNO   EQU   *              BAD\n         LA    R15,8          SET RC\nCDOMEXIT EQU   *\n         L     R14,CDOMR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         EJECT\nCDOY     EQU   *\n         ST    R14,CDOYR14    SAVE RETURN ADDR\n         CLC   WSDOY,=F'1'    TOO LOW\n         BL    CDOYNO         YES -- ERROR\n         CLC   WSDOY,=F'366'  TOO HIGH\n         BH    CDOYNO         YES -- ERROR\n         B     CDOYEXIT       EXIT\nCDOYNO   EQU   *              BAD\n         LA    R15,8          SET RC\nCDOYEXIT EQU   *\n         L     R14,CDOYR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         EJECT\nCLC1     EQU   *              MMDDYY --> JDAY\n         ST    R14,CLC1R14    SAVE RETURN ADDR\n         L     R15,WSMONTH    POST\n         C     R15,=F'2'      IF MONTH GT 2\n         BH    CLC1MHI        THEN\n         A     R15,=F'9'      ELSE ADD +9 WS-MONTH\n         ST    R15,TEMP1      GIVING WS-TEMP-1\n         L     R15,WSYEAR     POST\n         S     R15,=F'1'      SUBTRACT +1 FROM WS-YEAR\n         ST    R15,TEMP2      GIVING WS-TEMP-2\n         B     CLC1MOK        CONTINUE\nCLC1MHI  EQU   *              THEN\n         S     R15,=F'3'      SUBTRACT +3 FROM WS-MONTH\n         ST    R15,TEMP1      GIVING WS-TEMP-1\n         MVC   TEMP2,WSYEAR   MOVE WS-YEAR TO WS-TEMP-2\nCLC1MOK  EQU   *              CONTINUE\n         SR    R14,R14        CLEAR\n         L     R15,TEMP2      POST\n         D     R14,=F'100'    DIVIDE WS-TEMP-2 BY +100\n         ST    R15,WSC        GIVING WS-C\n         SR    R14,R14        CLEAR\n         M     R14,=F'100'    MULTIPLY WS-C BY +100\n         ST    R15,TEMP3      GIVING WS-TEMP-3.\n         L     R15,TEMP2      POST\n         S     R15,TEMP3      SUBTRACT WS-TEMP-3 FROM WS-TEMP-2\n         ST    R15,WSYA       GIVING WS-YA\n         SR    R14,R14        CLEAR\n         L     R15,WSC        POST\n         M     R14,=F'146097' MULTIPLY WS-C BY 146097\n         ST    R15,TEMP3      GIVING WS-TEMP-3\n         SR    R14,R14        CLEAR\n         D     R14,=F'4'      DIVIDE WS-TEMP-3 BY 4\n         ST    R15,WSJDAY     GIVING WS-JDAY\n         SR    R14,R14        CLEAR\n         L     R15,WSYA       POST\n         M     R14,=F'1461'   MULTIPLY WS-YA BY +1461\n         ST    R15,TEMP3      GIVING WS-TEMP-3\n         SR    R14,R14        CLEAR\n         D     R14,=F'4'      DIVIDE WS-TEMP-3 BY 4\n         ST    R15,TEMP3      GIVING WS-TEMP-3\n         A     R15,WSJDAY     ADD WS-TEMP-3 TO WS-JDAY\n         ST    R15,WSJDAY     POST\n         SR    R14,R14        CLEAR\n         L     R15,TEMP1      POST\n         M     R14,=F'153'    MULTIPLY WS-TEMP-1 BY 153\n         ST    R15,TEMP3      GIVING WS-TEMP-3\n         A     R15,=F'2'      ADD +2 TO WS-TEMP-3\n         ST    R15,TEMP3      POST\n         SR    R14,R14        CLEAR\n         D     R14,=F'5'      DIVIDE WS-TEMP-3 BY +5\n         ST    R15,TEMP3      GIVING WS-TEMP-3\n         A     R15,WSJDAY     ADD WS-TEMP-3 TO WS-JDAY\n         ST    R15,WSJDAY     POST\n         A     R15,WSDOM      ADD WS-DOM TO WS-JDAY\n         ST    R15,WSJDAY     POST\n         A     R15,=F'1721119' ADD 1721119 TO WS-JDAY\n         ST    R15,WSJDAY     POST\n         ST    R15,0(R8)      MOVE WS-JDAY TO D-C-JDAY\n         L     R14,CLC1R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         EJECT\nCLC2     EQU   *              MMDDYY --> YYDDD\n         ST    R14,CLC2R14    SAVE RETURN ADDR\n         L     R15,WSMONTH    POST\n         A     R15,=F'2'      ADD +2 WS-MONTH\n         ST    R15,TEMP1      GIVING WS-TEMP-1\n         SR    R14,R14        CLEAR\n         M     R14,=F'3055'   MULTIPLY WS-TEMP-1 BY 3055\n         ST    R15,TEMP1      GIVING WS-TEMP-1\n         SR    R14,R14        CLEAR\n         D     R14,=F'100'    DIVIDE WS-TEMP-1 BY +100\n         ST    R15,WSDOY      GIVING WS-DOY\n         L     R15,WSMONTH    POST\n         A     R15,=F'10'     ADD +10 WS-MONTH\n         ST    R15,TEMP1      GIVING WS-TEMP-1\n         SR    R14,R14        CLEAR\n         D     R14,=F'13'     DIVIDE WS-TEMP-1 BY +13\n         ST    R15,TEMP1      GIVING WS-TEMP-1\n         SR    R14,R14        CLEAR\n         M     R14,=F'2'      MULTIPLY WS-TEMP-1 BY +2\n         ST    R15,TEMP1      GIVING WS-TEMP-1\n         L     R15,WSDOY      POST\n         S     R15,TEMP1      SUBTRACT WS-TEMP-1 FROM WS-DOY\n         ST    R15,WSDOY      POST\n         S     R15,=F'91'     SUBTRACT +91 FROM WS-DOY\n         ST    R15,WSDOY      POST\n         MVC   TEMP3,=F'1'    MOVE +1 TO WS-TEMP-3\n         MVC   TEMP1,WSYEAR   MOVE WS-YEAR TO TEMP-1\n         SR    R14,R14        CLEAR\n         L     R15,WSYEAR     POST\n         D     R14,=F'4'      DIVIDE WS-YEAR BY +4\n         ST    R15,TEMP2      GIVING WS-TEMP-2\n         SR    R14,R14        CLEAR\n         M     R14,=F'4'      MULTIPLY WS-TEMP-2 BY +4\n         ST    R15,TEMP2      GIVING WS-TEMP-2\n         L     R15,TEMP1      POST\n         S     R15,TEMP2      SUBTRACT TEMP2 FROM TEMP1\n         ST    R15,TEMP1      POST\n         A     R15,=F'3'      ADD +3 TO WS-TEMP-1\n         ST    R15,TEMP1      POST\n         SR    R14,R14        CLEAR\n         D     R14,=F'4'      DIVIDE WS-TEMP-1 BY +4\n         ST    R15,TEMP1      GIVING WS-TEMP-1\n         L     R15,TEMP3      POST\n         S     R15,TEMP1      SUBTRACT WS-TEMP-1 FROM WS-TEMP-3\n         ST    R15,TEMP3      POST\n         MVC   TEMP1,WSYEAR   MOVE WS-YEAR TO WS-TEMP-1\n         SR    R14,R14        CLEAR\n         L     R15,WSYEAR     POST\n         D     R14,=F'100'    DIVIDE WS-YEAR BY +100\n         ST    R15,TEMP2      GIVING WS-TEMP-2\n         SR    R14,R14        CLEAR\n         M     R14,=F'100'    MULTIPLY WS-TEMP-2 BY +100\n         ST    R15,TEMP2      GIVING WS-TEMP-2\n         L     R15,TEMP1      POST\n         S     R15,TEMP2      SUBTRACT WS-TEMP-2 FROM WS-TEMP-1\n         ST    R15,TEMP1      POST\n         A     R15,=F'99'     ADD +99 TO WS-TEMP-1\n         ST    R15,TEMP1      POST\n         SR    R14,R14        CLEAR\n         D     R14,=F'100'    DIVIDE WS-TEMP-1 BY +100\n         ST    R15,TEMP1      GIVING WS-TEMP-1\n         A     R15,TEMP3      ADD WS-TEMP-1 TO WS-TEMP-3\n         ST    R15,TEMP3      POST\n         MVC   TEMP1,WSYEAR   MOVE WS-YEAR TO WS-TEMP-1\n         SR    R14,R14        CLEAR\n         L     R15,WSYEAR     POST\n         D     R14,=F'400'    DIVIDE WS-YEAR BY +400\n         ST    R15,TEMP2      GIVING WS-TEMP-2\n         SR    R14,R14        CLEAR\n         M     R14,=F'400'    MULTIPLY WS-TEMP-2 BY +400\n         ST    R15,TEMP2      GIVING WS-TEMP-2\n         L     R15,TEMP1      POST\n         S     R15,TEMP2      SUBTRACT WS-TEMP-2 FROM WS-TEMP-1\n         ST    R15,TEMP1      POST\n         A     R15,=F'399'    ADD +399 TO WS-TEMP-1\n         ST    R15,TEMP1      POST\n         SR    R14,R14        CLEAR\n         D     R14,=F'400'    DIVIDE WS-TEMP-1 BY +400\n         ST    R15,TEMP1      GIVING WS-TEMP-1\n         L     R15,TEMP3      POST\n         S     R15,TEMP1      SUBTRACT WS-TEMP-1 FROM WS-TEMP-3\n         ST    R15,TEMP3      POST\n         L     R15,WSMONTH    POST\n         A     R15,=F'10'     ADD +10 WS-MONTH\n         ST    R15,TEMP1      GIVING WS-TEMP-1\n         SR    R14,R14        CLEAR\n         M     R14,TEMP3      MULTIPLY WS-TEMP-1 BY WS-TEMP-3\n         ST    R15,TEMP1      GIVING WS-TEMP-1\n         SR    R14,R14        CLEAR\n         D     R14,=F'13'     DIVIDE WS-TEMP-1 BY +13\n         ST    R15,TEMP1      GIVING WS-TEMP-1\n         A     R15,WSDOY      ADD WS-TEMP-1 TO WS-DOY\n         ST    R15,WSDOY      POST\n         A     R15,WSDOM      ADD WS-DOM TO WS-DOY\n         ST    R15,WSDOY      POST\n         ST    R15,0(R6)      MOVE WS-DOY TO D-C-DOY\n         L     R14,CLC2R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         EJECT\nCLC3     EQU   *              JDAY   --> DOW\n         ST    R14,CLC3R14    SAVE RETURN ADDR\n         L     R15,WSJDAY     POST\n         A     R15,=F'1'      ADD +1 WS-JDAY\n         ST    R15,TEMP1      GIVING WS-TEMP-1\n         SR    R14,R14        CLEAR\n         D     R14,=F'7'      DIVIDE WS-TEMP-1 BY +7\n*                             GIVING (R15) REMAINDER (R14)\n         A     R14,=F'1'      ADD (R14) +1\n         ST    R14,WSDOW      GIVING WS-DOW\n         ST    R14,0(R7)      MOVE WS-DOW TO D-C-DOW\n         L     R14,CLC3R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         EJECT\nCLC4     EQU   *              YYDDD  --> MMDDYY\n         ST    R14,CLC4R14    SAVE RETURN ADDR\n         BAL   R14,CHKL       CHECK FOR LEAP YEAR (SET WSC)\n         L     R15,WSC        POST\n         A     R15,=F'59'     ADD +59 WS-C\n         ST    R15,TEMP1      GIVING WS-TEMP-1\n         C     R15,WSDOY      IF WS-DOY GREATER THAN WS-TEMP-1\n         BL    CLC4DOYH       THEN\n         MVC   WSDOM,=F'0'    ELSE MOVE +0 TO WS-DOM\n         B     CLC4DOY        CONTINUE\nCLC4DOYH EQU   *              THEN\n         L     R15,=F'2'      POST\n         S     R15,WSC        SUBTRACT WS-C FROM +2\n         ST    R15,WSDOM      GIVING WS-DOM\nCLC4DOY  EQU   *              CONTINUE\n         L     R15,WSDOY      POST\n         A     R15,WSDOM      ADD WS-DOY TO WS-DOM\n         ST    R15,WSDOM      POST\n         A     R15,=F'91'     ADD +91 WS-DOM\n         ST    R15,TEMP3      GIVING WS-TEMP-3\n         SR    R14,R14        CLEAR\n         M     R14,=F'100'    MULTIPLY WS-TEMP-3 BY +100\n         ST    R15,WSMONTH    GIVING WS-MONTH\n         SR    R14,R14        CLEAR\n         D     R14,=F'3055'   DIVIDE WS-MONTH BY +3055\n         ST    R15,WSMONTH    GIVING WS-MONTH\n         SR    R14,R14        CLEAR\n         M     R14,=F'3055'   MULTIPLY WS-MONTH BY +3055\n         ST    R15,TEMP2      GIVING WS-TEMP-2\n         SR    R14,R14        CLEAR\n         D     R14,=F'100'    DIVIDE WS-TEMP-2 BY +100\n         ST    R15,TEMP2      GIVING WS-TEMP-2\n         L     R15,TEMP3      POST\n         S     R15,TEMP2      SUBTRACT WS-TEMP-2 FROM WS-TEMP-3\n         ST    R15,WSDOM      GIVING WS-DOM\n         L     R15,WSMONTH    POST\n         S     R15,=F'2'      SUBTRACT +2 FROM WS-MONTH\n         ST    R15,WSMONTH    POST\n         ST    R15,0(R4)      MOVE WS-MONTH TO D-C-MONTH\n         MVC   0(4,R5),WSDOM  MOVE WS-DOM TO D-C-DOM\n         L     R14,CLC4R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         EJECT\nCLC5     EQU   *              JDAY   --> MMDDYY\n         ST    R14,CLC5R14    SAVE RETURN ADDR\n         L     R15,WSJDAY     POST\n         S     R15,=F'1721119' SUBTRACT +1721119 FROM WS-JDAY\n         ST    R15,TEMP1      GIVING WS-TEMP-1\n         SR    R14,R14        CLEAR\n         M     R14,=F'4'      MULTIPLY WS-TEMP-1 BY +4\n         ST    R15,TEMP1      GIVING WS-TEMP-1\n         S     R15,=F'1'      SUBTRACT +1 FROM WS-TEMP-1\n         ST    R15,TEMP1      POST\n         SR    R14,R14        CLEAR\n         D     R14,=F'146097' DIVIDE WS-TEMP-1 BY +146097\n         ST    R15,WSYEAR     GIVING WS-YEAR\n         SR    R14,R14        CLEAR\n         M     R14,=F'146097' MULTIPLY WS-YEAR BY +146097\n         ST    R15,TEMP2      GIVING WS-TEMP-2\n         L     R15,TEMP1      POST\n         S     R15,TEMP2      SUBTRACT WS-TEMP-2 FROM WS-TEMP-1\n         ST    R15,TEMP1      POST\n         SR    R14,R14        CLEAR\n         D     R14,=F'4'      DIVIDE WS-TEMP-1 BY +4\n         ST    R15,WSDOM      GIVING WS-DOM\n         SR    R14,R14        CLEAR\n         M     R14,=F'4'      MULTIPLY WS-DOM BY +4\n         ST    R15,TEMP2      GIVING WS-TEMP-2\n         A     R15,=F'3'      ADD +3 TO WS-TEMP-2\n         ST    R15,TEMP2      POST\n         SR    R14,R14        CLEAR\n         D     R14,=F'1461'   DIVIDE WS-TEMP-2 BY +1461\n         ST    R15,TEMP1      GIVING WS-TEMP-1\n         SR    R14,R14        CLEAR\n         M     R14,=F'1461'   MULTIPLY WS-TEMP-1 BY +1461\n         ST    R15,TEMP3      GIVING WS-TEMP-3\n         L     R15,TEMP2      POST\n         S     R15,TEMP3      SUBTRACT WS-TEMP-3 FROM WS-TEMP-2\n         ST    R15,WSDOM      GIVING WS-DOM\n         A     R15,=F'4'      ADD +4 TO WS-DOM\n         ST    R15,WSDOM      POST\n         SR    R14,R14        CLEAR\n         D     R14,=F'4'      DIVIDE WS-DOM BY +4\n         ST    R15,WSDOM      GIVING WS-DOM\n         SR    R14,R14        CLEAR\n         M     R14,=F'5'      MULTIPLY WS-DOM BY +5\n         ST    R15,TEMP2      GIVING WS-TEMP-2\n         S     R15,=F'3'      SUBTRACT +3 FROM WS-TEMP-2\n         ST    R15,TEMP2      POST\n         SR    R14,R14        CLEAR\n         D     R14,=F'153'    DIVIDE WS-TEMP-2 BY +153\n         ST    R15,WSMONTH    GIVING WS-MONTH\n         SR    R14,R14        CLEAR\n         M     R14,=F'153'    MULTIPLY WS-MONTH BY +153\n         ST    R15,TEMP3      GIVING WS-TEMP-2\n         L     R15,TEMP2      POST\n         S     R15,TEMP3      SUBTRACT WS-TEMP-3 FROM WS-TEMP-2\n         ST    R15,WSDOM      GIVING WS-DOM\n         A     R15,=F'5'      ADD +5 TO WS-DOM\n         ST    R15,WSDOM      POST\n         SR    R14,R14        CLEAR\n         D     R14,=F'5'      DIVIDE WS-DOM BY +5\n         ST    R15,WSDOM      GIVING WS-DOM\n         SR    R14,R14        CLEAR\n         L     R15,WSYEAR     POST\n         M     R14,=F'100'    MULTIPLY WS-YEAR BY +100\n         ST    R15,WSYEAR     GIVING WS-YEAR\n         A     R15,TEMP1      ADD WS-TEMP-1 TO WS-YEAR\n         ST    R15,WSYEAR     POST\n         L     R15,WSMONTH    POST\n         C     R15,=F'10'     IF WS-MONTH LESS THAN +10\n         BL    CLC5MLO        THEN\n         S     R15,=F'9'      ELSE SUBTRACT +9 FROM WS-MONTH\n         ST    R15,WSMONTH    POST\n         L     R15,WSYEAR     POST\n         A     R15,=F'1'      ADD +1 TO WS-YEAR\n         ST    R15,WSYEAR     POST\n         B     CLC5EXIT       CONTINUE\nCLC5MLO  EQU   *              THEN\n         A     R15,=F'3'      ADD +3 TO WS-MONTH\n         ST    R15,WSMONTH    POST\nCLC5EXIT EQU   *              CONTINUE\n         MVC   0(4,R3),WSYEAR MOVE WS-YEAR TO D-C-YEAR\n         MVC   0(4,R4),WSMONTH MOVE WS-MONTH TO D-C-MONTH\n         MVC   0(4,R5),WSDOM  MOVE WS-DOM TO D-D-DOM\n         L     R14,CLC5R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         EJECT\nCHKL     EQU   *\n         ST    R14,CHKLR14    SAVE RETURN ADDR\n         SR    R14,R14        CLEAR\n         MVC   WSC,=F'0'      INITIALIZE  (NOT A LEAP YEAR)\n         L     R15,WSYEAR     POST\n         D     R14,=F'4'      YEAR / 4 = LEAP YEAR\n         LTR   R14,R14\n         BNZ   CHKLEXIT\n         MVC   WSC,=F'1'      IS A LEAP YEAR\n         D     R14,=F'25'     EXCEPY YEAR / 100 NOT LEAP YEAR\n         LTR   R14,R14\n         BNZ   CHKLEXIT\n         MVC   WSC,=F'0'      IS NOT A LEAP YEAR\n         D     R14,=F'4'      EXCEPT YEAR / 400 LEAP YEAR\n         LTR   R14,R14\n         BNZ   CHKLEXIT\n         MVC   WSC,=F'1'      IS A LEAP YEAR\nCHKLEXIT EQU   *\n         L     R14,CHKLR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         EJECT\nERRPARM  EQU   *              WRONG NUMBER OF PARAMS\n         CLI   EPSW,C'1'      CHECK ENTRY POINT\n         BNE   EXITRC04       DATCVT2 -- SET RC\n         WTO   'DATCNVRT -- WRONG NUMBER OF PARMS',                    X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nERRPARMD EQU   *              BAD INPUT (SHAPE)\n         CLI   EPSW,C'1'      CHECK ENTRY POINT\n         BNE   EXITRC08       DATCVT2 -- SET RC\n         WTO   'DATCNVRT -- INVALID INPUT DATE FORM',                  X\n               ROUTCDE=2,DESC=7\n         MVC   SWTONAME,=C'YEAR        '\n         L     R15,WSYEAR\n         CVD   R15,WORKDW\n         UNPK  SWTOVAL,WORKDW\n         OI    SWTOVAL+L'SWTOVAL-1,X'F0'\n         WTO   MF=(E,SWTO)\n         MVC   SWTONAME,=C'MONTH       '\n         L     R15,WSMONTH\n         CVD   R15,WORKDW\n         UNPK  SWTOVAL,WORKDW\n         OI    SWTOVAL+L'SWTOVAL-1,X'F0'\n         WTO   MF=(E,SWTO)\n         MVC   SWTONAME,=C'DAY OF MONTH'\n         L     R15,WSDOM\n         CVD   R15,WORKDW\n         UNPK  SWTOVAL,WORKDW\n         OI    SWTOVAL+L'SWTOVAL-1,X'F0'\n         WTO   MF=(E,SWTO)\n         MVC   SWTONAME,=C'DAY OF YEAR '\n         L     R15,WSDOY\n         CVD   R15,WORKDW\n         UNPK  SWTOVAL,WORKDW\n         OI    SWTOVAL+L'SWTOVAL-1,X'F0'\n         WTO   MF=(E,SWTO)\n         MVC   SWTONAME,=C'JULIAN DAY  '\n         L     R15,WSJDAY\n         CVD   R15,WORKDW\n         UNPK  SWTOVAL,WORKDW\n         OI    SWTOVAL+L'SWTOVAL-1,X'F0'\n         WTO   MF=(E,SWTO)\n         B     ABEND\nERRRANGE EQU   *              BAD INPUT (OUT OF RANGE)\n         CLI   EPSW,C'1'      CHECK ENTRY POINT\n         BNE   EXITRC0C       DATCVT2 -- SET RC\n         WTO   'DATCNVRT -- PARAMETER OUT OF RANGE',                   X\n               ROUTCDE=2,DESC=7\n         B     ABEND\n         EJECT\nEXITRC00 EQU   *\n         LA    R15,0          SET RC\n         B     EXIT           EXIT\nEXITRC04 EQU   *\n         LA    R15,4          SET RC\n         B     EXIT           EXIT\nEXITRC08 EQU   *\n         LA    R15,8          SET RC\n         B     EXIT           EXIT\nEXITRC0C EQU   *\n         LA    R15,12         SET RC\n         B     EXIT           EXIT\nEXIT     EQU   *\n         L     R13,4(R13)     RESTORE A(OLD SAVE AREA)\n         RETURN (14,12),RC=(15)\n         SPACE 2\nABEND    EQU   *\n         ABEND 1000,DUMP\n         LTORG\n         EJECT\n*\n*        DOUBLEWORDS\n*\nSAVEAREA DS    9D             REG SAVE AREA\n*\nWORKDW   DS    D              DOUBLE WORD WORK AREA\n*\n*        FULLWORDS\n*\nWSYEAR   DS    F              YEAR                NNNN\nWSMONTH  DS    F              MONTH           01 -  12\nWSDOM    DS    F              DAY OF MONTH    01 -  31\nWSDOY    DS    F              DAY OF YEAR    001 - 366\nWSDOW    DS    F              DAY OF WEEK     01 -  07\nWSJDAY   DS    F              ABSOLUTE DAY     NNNNNNN\n*\nWSC      DS    F              CENTURY OR LEAP YEAR SWITCH\nWSYA     DS    F              IF YEAR = MCDY   YA = DY PART\n*\nTEMP1    DS    F              TEMP\nTEMP2    DS    F              TEMP\nTEMP3    DS    F              TEMP\n*\nCDOMR14  DS    F              R14 SAVE AREA FOR CDOM\nCDOYR14  DS    F              R14 SAVE AREA FOR CDOY\nCHKAR14  DS    F              R14 SAVE AREA FOR CHKA\nCHKGR14  DS    F              R14 SAVE AREA FOR CHKG\nCHKJR14  DS    F              R14 SAVE AREA FOR CHKJ\nCHKLR14  DS    F              R14 SAVE AREA FOR CHKL\nCHKYR14  DS    F              R14 SAVE AREA FOR CHKY\nCLC1R14  DS    F              R14 SAVE AREA FOR CLC1\nCLC2R14  DS    F              R14 SAVE AREA FOR CLC2\nCLC3R14  DS    F              R14 SAVE AREA FOR CLC3\nCLC4R14  DS    F              R14 SAVE AREA FOR CLC4\nCLC5R14  DS    F              R14 SAVE AREA FOR CLC5\nCMONR14  DS    F              R14 SAVE AREA FOR CMON\n*\n*        BYTES\n*\nEPSW     DS    C              ENTRY POINT SWITCH\nSWTO     WTO   'DAY OF MONTH = XXXXXXXXXXXXXXX',                       X\n               ROUTCDE=2,DESC=7,MF=L\nSWTONAME EQU   SWTO+04,12\nSWTOVAL  EQU   SWTO+04+15,15\n         EJECT\nPARMS    DSECT\nDCYEAR   DS    A              A(YEAR)           NNNN OR NN = 19NN\nDCMONTH  DS    A              A(MONTH)       01 = JAN . . . 12 = DEC\nDCDOM    DS    A              A(DAY OF MONTH)      01 . . . 31\nDCDOY    DS    A              A(DAY OF YEAR)      001 . . . 366\nDCDOW    DS    A              A(DAY OF WEEK) 01 = SUN . . . 07 = SAT\nDCJDAY   DS    A              A(ABSJ DAY)            NNNNNNN\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DM011SCR": {"ttr": 1288, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x04b\\x04b\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:22", "lines": 1122, "newlines": 1122, "modlines": 0, "user": "FILE097"}, "text": "         TITLE 'DM011SCR - SCRATCH AND UNCATALOG DATASETS'\nDM011SCR CSECT\n*\n         REGS\n*\n* UNCATALOG AND/OR SCRATCH DATASETS FROM VTOC THAT STILL EXIST\n*   AFTER A PREDETERMINED TIME PERIOD.  TEMPORARY DATASETS ARE\n*   ALWAYS CHECKED.  NON-TEMPORARY OR TSO DATASETS ARE CHECKED WHEN\n*   UCS=NTMP/TSO/ALL IS INCLUDED ON THE RESPECTIVE DD STATEMENT.\n*   SEE PARM ENTRY SECTION TO SET TIME PERIODS FOR TEMPORARY,\n*   NON-TEMPORARY & TSO DATASETS.\n*\n* DSN STARTING WITH SYS1.,SYS2.,SYS3., DSCB.,\n*   A VSAM FILE OR 'CATALOG.' ARE ALWAYS BYPASSED.\n*\n*  TEMPORARY DATASETS - CHECK CREATION DATE & TIME IN DSN.\n*  NON-TEMP/TSO DS    - CHECK LAST USED DATE OR CREATION\n*                       DATE IF NEVER OPENED.\n*\n* THE DD STATEMENT OF A PACK TO BE SEARCHED MUST HAVE A DDNAME\n*   OF DISKXX.  XX IS A CONSECTIVE TWO DIGET NUMBER STARTING\n*   WITH 01.  THE SEARCH STOPS WHEN THE NEXT CONSECTIVE NUMBER\n*   IS MISSING.\n*   USE DUMMY OR DSN=NULLFILE TO BYPASS A DD STATEMENT AND STILL\n*   MAINTAIN A GROUP OF CONSECTIVE DISKXX STATEMENTS.\n*    SPECIFY UCS=NTMP TO CHECK NON-TEMPORARY DATASETS.\n*    SPECIFY UCS=TSO TO CHECK TSO DATASETS.\n*    SPECIFY UCS=ALL TO CHECK NON-TEMPORARY & TSO DATASETS.\n*\n* A SYSPRINT DD STATEMENT IS REQUIRED.  IF THE SYSPRINT STATEMENT\n*   SPECIFIES A NON-SYSOUT FILE THEN BLKSIZE MUST BE SPECIFIED AND\n*   BE A MULTIPLE OF 121.  RECFM IS FORCED TO FBM.\n*\n*\n*  PARM='RUN=REAL/TEST|,TEMP=DD.HH|,DS=DD'\n*    RUN=  TEST FOR REPORT ONLY, REAL FOR REPORT AND EXECUTE\n*    TEMP= IS FOR TEMPORARY DS (DD = DAYS, HH = HOURS)\n*    DS=   IS FOR TSO AND NON-TEMP (DD = DAYS)\n*     EXECUTION DATE/TIME OF THIS PROGRAM WILL BE SCRATCHED\n*\n*   PARM DEFAULTS ARE - RUN=TEST,TEMP=01.00,DS=02\n*\n*\n* EXAMPLE -\n*\n*    //S1      EXEC PGM=DM011SCR,PARM='RUN=TEST'\n*    //SYSPRINT  DD SYSOUT=A\n*    //DISK01    DD VOL=SER=PNB801,UNIT=SYSDA,DISP=OLD,UCS=ALL\n*    //DISK02    DD DUMMY\n*    //DISK03    DD VOL=SER=RES2VS,UNIT=SYSDA,DISP=OLD,UCS=TSO\n*\n*\n* R12 - PROGRAM BASE\n* R0,R1,R14,R15 - WORK REGS\n* R6  - DISKX DCB\n*\n*\n         SAVE  (14,12),,DM011SCR*&SYSDATE*&SYSTIME\n         LR    R12,R15             ENTRY ADR TO BASE REG\n         USING DM011SCR,R12        PGM BASE\n         LR    R2,R13\n         LA    R13,SAVEAREA        SAVEAREA AND WORKING STORAGE\n         USING SAVEAREA,R13\n         ST    R2,SAVEAREA+4       SAVE CALLERS R13\n         ST    R13,8(,R2)          BACK LINK SAVEAREA\n         ST    R1,PARMA            SAVE A(A(PARM))\n         OPEN  (SYSPRT,(OUTPUT))\n         TM    SYSPRT+DCBOFLGS-IHADCB,DCBOFOPN  OPEN OK\n         BNO   ERRPRINT            NO\n         BAL   R14,PARM            PROCESS PARM\n         BAL   R14,TIME            CALCULATE EXPIRATION TIMES\nMAINLOOP EQU   *                   PROCESS NEXT DD\n         BAL   R14,DSKO            OPEN NEXT DISK\n         B     *+4(R15)            CHECK RETURN CODE\n         B     MAINP               00 -- OPEN OK - PROCESS IT\n         B     EXIT                04 -- EOF - DONE\nMAINP    EQU   *\n         BAL   R14,DSKP            PROCESS IT\n         BAL   R14,DSKC            CLOSE IT\n         B     MAINLOOP\n         TITLE 'PARM     - PROCESS PARM FOR OPTIONS'\nPARM     EQU   *\n         ST    R14,PARMR14         SAVE RETURN ADDR\n         L     R1,PARMA            A(A(PARM))\n         L     R2,0(,R1)           A(PARM)\n         SR    R3,R3\n         ICM   R3,3,0(R2)          GET PARM LTH\n         BZ    PARMEND             NO PARM-USE DEFAULTS\n         LA    R0,WORKPARM         A(PARM WORK AREA)\n         LA    R1,L'WORKPARM       L'PARM WORK AREA\n         LA    R14,2(R2)           A(PARM)\n         LR    R15,R3              L'PARM\n         ICM   R15,8,=C' '         SPACE FOR PAD CHAR\n         MVCL  R0,R14              COPY PARM TO WORK AREA\n         LA    R2,WORKPARM         A(PARM WORK AREA)\n         B     PARMSTRT            SKIP TO STARTING SPOT IN LOOP\nPARMLOOP EQU   *\n         LTR   R3,R3               MORE DATA\n         BNP   PARMEND             NO\n         CLI   0(R2),C','          COMMA\n         BE    PARMCHK             YES -- PROCESS\n         CLI   0(R2),C' '          SPACE\n         BE    PARMEND             YES -- END OF PARM\n         B     ERRPARM             ERROR\nPARMCHK  EQU   *\n         LA    R2,1(,R2)           SKIP COMMA\nPARMSTRT EQU   *\n         CLC   DCT,0(R2)           TEMP=\n         BE    PARMTEMP            YES\n         CLC   DCD,0(R2)           DS=\n         BE    PARMDS              YES\n         CLC   DCRUN,0(R2)         RUN=\n         BE    PARMRUN             YES\n         B     ERRPARM             NO-ERROR\n*\nPARMRUN  EQU   *\n         LA    R14,L'DCRUN         L'KEYWORD\n         AR    R2,R14              BUMP PAST KEYWORD\n         SR    R3,R14              DECREMENT LENGTH\n         CLC   DCTEST,0(R2)        TEST\n         BE    PARMRT              YES\n         CLC   DCREAL,0(R2)        REAL\n         BE    PARMRR              YES\n         B     ERRPARM             NO\nPARMRT   EQU   *\n         MVC   H2RUN,DCTEST        CHANGE HEADING\n         LA    R14,L'DCTEST        L'KEYWORD\n         AR    R2,R14              BUMP PAST KEYWORD\n         SR    R3,R14              DECREMENT LENGTH\n         B     PARMLOOP            LOOP BACK\nPARMRR   EQU   *\n         MVC   H2RUN,DCREAL        CHANGE HEADING\n         LA    R14,L'DCREAL        L'KEYWORD\n         AR    R2,R14              BUMP PAST KEYWORD\n         SR    R3,R14              DECREMENT LENGTH\n         B     PARMLOOP            LOOP BACK\n         EJECT\nPARMTEMP EQU   *\n         LA    R14,L'DCT           L'KEYWORD\n         AR    R2,R14              BUMP PAST KEYWORD\n         SR    R3,R14              DECREMENT LENGTH\n*\n*                                  VALUE MUST BE NN.NN\n*\n         CLI   0(R2),C'0'          NUMERIC CHECK\n         BL    ERRPARM\n         CLI   0(R2),C'9'          NUMERIC CHECK\n         BH    ERRPARM\n         CLI   1(R2),C'0'          NUMERIC CHECK\n         BL    ERRPARM\n         CLI   1(R2),C'9'          NUMERIC CHECK\n         BH    ERRPARM\n         CLI   2(R2),C'.'          MUST BE '.'\n         BNE   ERRPARM\n         CLI   3(R2),C'0'          NUMERIC CHECK\n         BL    ERRPARM\n         CLI   3(R2),C'9'          NUMERIC CHECK\n         BH    ERRPARM\n         CLI   4(R2),C'0'          NUMERIC CHECK\n         BL    ERRPARM\n         CLI   4(R2),C'9'          NUMERIC CHECK\n         BH    ERRPARM\n         MVC   H2DDHH+1(5),0(R2)   POST DAYS AND HOURS\n         LA    R14,5               POST L'KEYWORD\n         AR    R2,R14              BUMP PAST KEYWORD\n         SR    R3,R14              DECREMENT LENGTH\n         B     PARMLOOP            SEE IF MORE KEYWORDS\n         EJECT\nPARMDS   EQU   *\n         LA    R14,L'DCD           L'KEYWORD\n         AR    R2,R14              BUMP PAST KEYWORD\n         SR    R3,R14              DECREMENT LENGTH\n*\n*                                  VALUE MUST BE NN\n*\n         CLI   0(R2),C'0'          NUMERIC CHECK\n         BL    ERRPARM\n         CLI   0(R2),C'9'          NUMERIC CHECK\n         BH    ERRPARM\n         CLI   1(R2),C'0'          NUMERIC CHECK\n         BL    ERRPARM\n         CLI   1(R2),C'9'          NUMERIC CHECK\n         BH    ERRPARM\n         MVC   H2DD+1(2),0(R2)     POST DAYS\n         LA    R14,2               POST L'KEYWORD\n         AR    R2,R14              BUMP PAST KEYWORD\n         SR    R3,R14              DECREMENT LENGTH\n         B     PARMLOOP            SEE IF MORE KEYWORDS\n*\nPARMEND  EQU   *\n         L     R14,PARMR14         POST RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'TIME     - CALCULATE EXPIRATION TIMES'\nTIME     EQU   *\n         ST    R14,TIMER14         SAVE RETURN ADDR\n*\n*                                  RUN DATE/TIME\n*\n         TIME  DEC\n         STM   R0,R1,TODAYTME      SAVE TIME & DATE\n         OI    TODAYTME+L'TODAYTME-1,X'0F' FIX SIGN\n         UNPK  DSPTIME,TODAYTME    MAKE CHAR\n         MVC   H1YYDDD+1(2),DSPTYY POST YEAR\n         MVC   H1MMDDYY+7(2),DSPTYY POST YEAR\n         MVC   H1YYDDD+4(3),DSPTDDD POST DAY OF YEAR\n         PACK  WRK8,DSPTYY         NOW PACKED\n         CVB   R1,WRK8             NOW BIN\n         ST    R1,FWYY             POST\n         PACK  WRK8,DSPTDDD        NOW PACKED\n         CVB   R1,WRK8             NOW BIN\n         ST    R1,FWDDD            POST\n         BAL   R14,DATE            CALCULATE MM,DD\n         L     R1,FWMM             POST MONTH\n         CVD   R1,WRK8             NOW PACKED\n         UNPK  WRK8B(3),WRK8+6(2)  NOW CHAR\n         OI    WRK8B+2,X'F0'       FIX SIGN\n         MVC   H1MMDDYY+1(2),WRK8B+1 POST\n         L     R1,FWDD             POST DAY OF MONTH\n         CVD   R1,WRK8             NOW PACKED\n         UNPK  WRK8B(3),WRK8+6(2)  NOW CHAR\n         OI    WRK8B+2,X'F0'       FIX SIGN\n         MVC   H1MMDDYY+4(2),WRK8B+1 POST\n         MVC   H1HHMM+1(2),DSPTHH  POST\n         MVC   H1HHMM+4(2),DSPTMM  POST\n*\n*                                  TEMP DATE/TIME\n*\n         PACK  PWRKYY,H1YYDDD+1(2)  PACK CURR YEAR\n         PACK  PWRKDDD,H1YYDDD+4(3) PACK CURR DAY OF YEAR\n         PACK  PWRKHH,DSPTHH       PACK CURR HOUR\n         PACK  PWRKT1,H2DDHH+1(2)  PACK TEMP DAYS\n         PACK  PWRKT2,H2DDHH+4(2)  PACK TEMP HOURS\n         CP    PWRKHH,PWRKT2       IS BORROW RQD\n         BNL   TIMENB01            NO\n         SP    PWRKDDD,=P'1'       BORROW FROM DAYS\n         AP    PWRKHH,=P'24'       BORROW TO HOURS\nTIMENB01 EQU   *\n         CP    PWRKDDD,PWRKT1      IS BORROW RQD\n         BNL   TIMENB02            NO\n         SP    PWRKYY,=P'1'        BORROW FROM YEARS\n         AP    PWRKDDD,=P'365'     BORROW TO DAYS\nTIMENB02 EQU   *\n         CP    PWRKYY,=P'0'        IS BORROW RQD\n         BNL   TIMENB03            NO\n         ZAP   PWRKYY,=P'99'       BORROW TO YEARS\nTIMENB03 EQU   *\n         SP    PWRKHH,PWRKT2       SUBTRACT HOURS\n         SP    PWRKDDD,PWRKT1      SUBTRACT DAYS\n         UNPK  WRK8(3),PWRKYY      NOW DISP\n         OI    WRK8+2,X'F0'        FIX SIGN\n         MVC   H2YYDDHH+1(2),WRK8+1 POST TO TITLE\n         MVC   SYSTYY,WRK8+1       POST TO TEST\n         UNPK  WRK8(3),PWRKDDD     NOW DISP\n         OI    WRK8+2,X'F0'        FIX SIGN\n         MVC   H2YYDDHH+4(3),WRK8  POST TO TITLE\n         MVC   SYSTDDD,WRK8        POST TO TEST\n         UNPK  WRK8(3),PWRKHH      NOW DISP\n         OI    WRK8+2,X'F0'        FIX SIGN\n         MVC   H2YYDDHH+8(2),WRK8+1 POST TO TITLE\n         MVC   SYSTHH,WRK8+1       POST TO TEST\n         MVC   SYSTMM,DSPTMM       POST TO TEST\n         MVC   SYSTSS,DSPTSS       POST TO TEST\n*\n*                                  DS DATE/TIME\n*\n         PACK  PWRKYY,H1YYDDD+1(2)  PACK CURR YEAR\n         PACK  PWRKDDD,H1YYDDD+4(3) PACK CURR DAY OF YEAR\n         PACK  PWRKT1,H2DD+1(2)    PACK DS DAYS\n         CP    PWRKDDD,PWRKT1      IS BORROW RQD\n         BNL   TIMENB04            NO\n         SP    PWRKYY,=P'1'        BORROW FROM YEARS\n         AP    PWRKDDD,=P'365'     BORROW TO DAYS\nTIMENB04 EQU   *\n         CP    PWRKYY,=P'0'        IS BORROW RQD\n         BNL   TIMENB05            NO\n         ZAP   PWRKYY,=P'99'       BORROW TO YEARS\nTIMENB05 EQU   *\n         SP    PWRKDDD,PWRKT1      SUBTRACT DAYS\n         UNPK  WRK8(3),PWRKYY      NOW DISP\n         OI    WRK8+2,X'F0'        FIX SIGN\n         MVC   H2YYDDD+1(2),WRK8+1 POST TO TITLE\n         MVC   DSYY,WRK8+1         POST FOR COMPARE\n         UNPK  WRK8(3),PWRKDDD     NOW DISP\n         OI    WRK8+2,X'F0'        FIX SIGN\n         MVC   H2YYDDD+4(3),WRK8   POST TO TITLE\n         MVC   DSDDD,WRK8          POST FOR COMPARE\n         L     R14,TIMER14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'DSKO     - OPEN NEXT DISK'\nDSKO     EQU   *\n         ST    R14,DSKOR14         SAVE RETURE ADDR\n         LA    R6,DISKX            A(DISK DCB)\n         USING IHADCB,R6           ADDRESSABILITY\nDSKON    EQU   *                   GET NEXT DISK\n         AP    DISKNO,=P'1'        UP COUNT\n         OI    DISKNO+L'DISKNO-1,X'0F'     FORCE SIGN\n         UNPK  DSKXDDN+4(2),DISKNO POST TO DDNAME\n         MVC   DCBDDNAM,DSKXDDN    POST TO DCB\n         RDJFCB ((R6))\n         LTR   R15,R15             ENTRY FOUND\n         BNZ   DSKOEOF             NO\n         CLC   =C'NULLFILE ',JFCBDSNM  DUMMY ENTRY\n         BE    DSKON               YES-GET ANOTHER DD\n         DEVTYPE DSKXDDN,DEVDATA,DEVTAB   DISK INFO\n         LH    R15,DEVDTC          POST TRKS/CYL\n         MH    R15,DEVDCV          X CYLS/VOL = TRKS/VOL\n         ST    R15,CAPTRKS         POST\n         OI    JFCBTSDM,JFCNWRIT   DO NOT WRITE BACK JFCB\n         MVI   JFCBDSNM,4          READ VTOC DSN\n         MVC   JFCBDSNM+1(L'JFCBDSNM-1),JFCBDSNM   CHAIN X'04'\n         OPEN  ((R6),(INPUT)),TYPE=J\n         TM    DCBOFLGS,DCBOFOPN   OPEN OK\n         BNO   ERRDSKO2            NO\n         L     R1,DCBDEBAD         DEB ADR\n         USING DEBBASIC,R1\n         L     R1,DEBBASND         GET UCB ADR (DEBUCBAD)\n         USING UCBOB,R1\n         CLI   UCBTBYT3,UCB3DACC   CHECK FOR DASD\n         BNE   ERRDSKO2            NOT DASD\n         MVC   DEVSER,UCBVOLI      VOLSER FOR CAMLST\n         MVC   H2VOL,UCBVOLI       VOLSER TO HEADING\n         MVC   H2CUU,UCBNAME       DEVICE ADR\n         MVC   DEVTYP,UCBTYP       UCB TYPE FOR CAMLST\n         TM    UCBSTAT,UCBRESV+UCBPRES OPERATOR/PRESRES MOUNTED\n         BZ    ERRDSKO1            NO\n         TM    UCBSTAB,UCBBSTR     MOUNTED AS STORAGE\n         BNO   DSKOM1              NO\n         MVC   H2MOUNT,=CL7'STORAGE'\n         B     DSKOU\nDSKOM1   EQU   *\n         TM    UCBSTAB,UCBBPUB     MOUNTED AS PUBLIC\n         BNO   DSKOM2              NO\n         MVC   H2MOUNT,=CL7'PUBLIC'\n         B     DSKOU\nDSKOM2   EQU   *\n         TM    UCBSTAB,UCBBPRV     MOUNTED AS PRIVATE\n         BNO   ERRDSKO1            NO\n         MVC   H2MOUNT,=CL7'PRIVATE'\n         DROP  R1\nDSKOU    EQU   *                   CHECK UCB VALUES\n         CLC   JFCUCSID,UCSNTMP    VALID OPTION\n         BE    DSKOUN              YES\n         CLC   JFCUCSID,UCSTSO     VALID OPTION\n         BE    DSKOUT              YES\n         CLC   JFCUCSID,UCSALL     VALID OPTION\n         BE    DSKOUA              YES\n*                                  INVALID -- SET TO NTMP\nDSKOUN   EQU   *                   NTMP\n         MVC   H2UCS,=C'NTMP'\n         B     DSKOX               DONE\nDSKOUT   EQU   *                   TSO\n         MVC   H2UCS,=C'TSO '\n         B     DSKOX               DONE\nDSKOUA   EQU   *                   NTMP\n         MVC   H2UCS,=C'ALL '\n         B     DSKOX               DONE\nDSKOEOF  EQU   *\n         LA    R15,4               SET RETURN CODE\n         B     DSKOEXIT            CONTINUE EXIT\nDSKOX    EQU   *\n         MVC   HWACCHHR,HWAMAX     SET END OF VTOC TO INFINITY\n*                                  WILL BE RESET FROM FORMAT4\n         ZAP   LINECT,LINEMAX      FORCE PAGE EJECT\n         LA    R15,0               SET RETURN CODE\nDSKOEXIT EQU   *\n         L     R14,DSKOR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         DROP  R6\n         TITLE 'DSKP     - PROCESS THIS DISK VTOC'\nDSKP     EQU   *\n         USING IHADCB,R6           ADDRESSABILITY\n         ST    R14,DSKPR14         RESTORE RETURN ADDR\nDSKPLOOP EQU   *                   GET NEXT VTOC REC\n         CLC   HWACCHHR,DCBFDAD+3  AT/PAST HIGH WATER MARK\n         BNH   DSKPX               YES -- EXIT\n         READ  DSKPR,SF,DISKX,IECSDSF1,'S'\n         CHECK DSKPR\n*\n         CLI   DS1FMTID,C'1'       FORMAT 1\n         BE    DSKPF1              YES\n         CLI   DS4IDFMT,C'4'       FORMAT 4\n         BE    DSKPF4              YES\n         B     DSKPLOOP            IGNORE\nDSKPF1   EQU   *                   FORMAT1\n         MVC   D1,SPACES           CLEAR PRINT LINE\n         XC    ACDSP,ACDSP         CLEAR DISPL IN ACTION MSG\n         MVC   D1DSN,DS1DSNAM      POST DATASET NAME\n         BAL   R14,ECLS            EDIT FOR CLASS\n         BAL   R14,CKCT            CHECK CATALOG\n         SR    R1,R1               CLEAR\n         IC    R1,DS1CREDT         CREATE YY\n         CVD   R1,WRK8             NOW PACKED\n         UNPK  WRK8B(3),WRK8+6(2)  NOW CHAR\n         OI    WRK8B+2,X'F0'       FIX SIGN\n         MVC   D1CRDTE(2),WRK8B+1  POST\n         ICM   R1,3,DS1CREDT+1     CREATE DDD\n         CVD   R1,WRK8             NOW PACKED\n         UNPK  WRK8B(3),WRK8+6(2)  NOW CHAR\n         OI    WRK8B+2,X'F0'       FIX SIGN\n         MVC   D1CRDTE+2(3),WRK8B  POST\n         SR    R1,R1               CLEAR\n         IC    R1,DS1REFD          REF YY\n         CVD   R1,WRK8             NOW PACKED\n         UNPK  WRK8B(3),WRK8+6(2)  NOW CHAR\n         OI    WRK8B+2,X'F0'       FIX SIGN\n         MVC   D1RFDTE(2),WRK8B+1  POST\n         ICM   R1,3,DS1REFD+1      REF DDD\n         CVD   R1,WRK8             NOW PACKED\n         UNPK  WRK8B(3),WRK8+6(2)  NOW CHAR\n         OI    WRK8B+2,X'F0'       FIX SIGN\n         MVC   D1RFDTE+2(3),WRK8B  POST\n         BAL   R14,SIZE            COMPUTE SIZE OF FILE (OVERLAYS FMT1)\n         CLC   D1CLASS,=C'TSO  '   TSO FILE\n         BE    DSKPF1U             YES - PROCESS IT\n         CLC   D1CLASS,=C'NTMP '   NTMP FILE\n         BE    DSKPF1N             YES - PROCESS IT\n         CLC   D1CLASS,=C'TEMP '   TEMP FILE\n         BE    DSKPF1T             YES - PROCESS IT\n         LA    R1,MSGA1            POST ACTION MSG\n         BAL   R14,AMSG            POST TO ACTION FIELD\n         B     DSKPP               PRINT IT\nDSKPF1U  EQU   *\n         CLC   H2UCS,=C'NTMP'      SKIP TSO\n         BE    DSKPF1SK            YES -- JUST PRINT IT\n         BAL   R14,CKRF            CHECK REF DATE\n         B     *+4(R15)            CHECK RETURN CODE\n         B     DSKPF1OK            00 - OK -- NOT EXPIRED\n         B     DSKPF1X0            04 - EXPIRED\nDSKPF1N  EQU   *                   NTMP\n         CLC   H2UCS,=C'TSO '      SKIP NTMP\n         BE    DSKPF1SK            YES -- JUST PRINT IT\n         BAL   R14,CKRF            CHECK REF DATE\n         B     *+4(R15)            CHECK RETURN CODE\n         B     DSKPF1OK            00 - OK -- NOT EXPIRED\n         B     DSKPF1X0            04 - EXPIRED\nDSKPF1T  EQU   *\n         BAL   R14,CKDS            CHECK DSNAME DATE\n         B     *+4(R15)            CHECK RETURN CODE\n         B     DSKPF1OK            00 - OK -- NOT EXPIRED\n         B     DSKPF1X0            04 - EXPIRED\nDSKPF1OK EQU   *                   OK -- DO NOT SCRATCH\n         LA    R1,MSGA5            MSG NO\n         BAL   R14,AMSG            POST TO ACTION FIELD\n         B     DSKPP               PRINT\nDSKPF1X0 EQU   *\n         CLI   D1CAT,C'Y'          CATALOGED OK\n         BNE   DSKPF1X4            NO -- SKIP UNCATLG\n         CLC   H2RUN,DCREAL        RUN=REAL\n         BNE   DSKPF1X2            NO -- SKIP UNCATLG\n         CATALOG UCATCAML          UN-CATALOG DSN & UNUSED INDICES\n         LTR   R15,R15             OK\n         BZ    DSKPF1X3            YES\n         LA    R1,MSGA6            MSG NO\n         BAL   R14,AMSG            POST TO ACTION FIELD\n         B     DSKPF1X4            CONTINUE TO SCRATCH\nDSKPF1X2 EQU   *                   RUN = TEST\n         LA    R1,MSGA7            MSG NO\n         BAL   R14,AMSG            POST TO ACTION FIELD\n         B     DSKPF1X4            CONTINUE TO SCRATCH\nDSKPF1X3 EQU   *                   UNCATALOGED OK\n         LA    R1,MSGA8            MSG NO\n         BAL   R14,AMSG            POST TO ACTION FIELD\n         B     DSKPF1X4            CONTINUE TO SCRATCH\nDSKPF1X4 EQU   *\n         CLC   H2RUN,DCREAL        RUN=REAL\n         BNE   DSKPF1X5            NO -- JUST PRINT IT\n         SR    R0,R0\n         SCRATCH SCRCAML           SCRATCH DATASET\n         LTR   R15,R15             SCRATCH OK\n         BZ    DSKPF1X6            YES\n         LA    R1,MSGA9            ERROR - MSG NO\n         BAL   R14,AMSG            POST TO ACTION FIELD\n         B     DSKPP               PRINT\nDSKPF1X5 EQU   *                   RUN = TEST\n         LA    R1,MSGAA            MSG NO\n         BAL   R14,AMSG            POST TO ACTION FIELD\n         B     DSKPP               PRINT\nDSKPF1X6 EQU   *                   SCRATCHED OK\n         LA    R1,MSGAB            MSG NO\n         BAL   R14,AMSG            POST TO ACTION FIELD\n         B     DSKPP               PRINT\nDSKPF1SK EQU   *                   NOT SELECTED - UCS\n         LA    R1,MSGAC            MSG NO\n         BAL   R14,AMSG            POST TO ACTION FIELD\n         B     DSKPP               PRINT\nDSKPP    EQU   *\n         LA    R1,D1               A(PRINT LINE)\n         BAL   R14,PRNT            PRINT IT\n         B     DSKPLOOP            LOOP BACK\nDSKPF4   EQU   *\n         MVC   HWACCHHR,DS4HPCHR   RESET VTOC HIGH WATER MARK\n         B     DSKPLOOP            LOOP BACK\nDSKPX    EQU   *\n         L     R14,DSKPR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         DROP  R6\n         TITLE 'DSKC     - CLOSE DISKX'\nDSKC     EQU   *\n         USING IHADCB,R6           ADDRESSABILITY\n         ST    R14,DSKCR14         SAVE RETURN ADDR\n         CLOSE ((R6))\n         L     R14,DSKCR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         DROP  R6\n         TITLE 'ECLS     - EDIT FOR DATASET CLASS'\nECLS     EQU   *\n         ST    R14,ECLSR14         SAVE RETURN ADDR\n         CLC   DS1DSORG,=X'0008'   VSAM\n         BE    ECLSVYES            YES\n         CLI   DS1DSORG+1,0        ANY VSAM TCAM ETC\n         BNE   ECLSDYES            YES -- DSORG BAD\n         TM    DS1DSORG,X'10'      BTAM/QTAM\n         BO    ECLSDYES            YES -- DSORG BAD\n         CLC   =C'SYS',D1DSN       SYSTEM/TEMP\n         BNE   ECLSN               NO -- NTMP/TSO\n         CLC   =C'.T',D1DSN+8      TEMP\n         BNE   ECLSS               NO -- SYS?\n         CLC   =C'.F',D1DSN+16     TEMP\n         BE    ECLSTYES            YES\n         CLC   =C'.V',D1DSN+16     TEMP\n         BE    ECLSTYES            YES\n         CLC   =C'.RA',D1DSN+16    TEMP\n         BE    ECLSTYES            YES\nECLSS    EQU   *\n         CLC   =C'SYS1.',D1DSN     SYS\n         BE    ECLSSYES\n         CLC   =C'SYS2.',D1DSN     SYS\n         BE    ECLSSYES\n         CLC   =C'SYS3.',D1DSN     SYS\n         BE    ECLSSYES\nECLSN    EQU   *                   NTMP/TSO\n*                                  TSO = ANNNAAA.\n         MVC   WRK8,D1DSN          FIRST 8 CHARS OF DSN\n         TR    WRK8,TSOMASK        XLATE\n         CLC   WRK8,=C'ANNNAAA.'   EVERYTHING OK\n         BE    ECLSUYES            YES -- TSO USERID\n         CLC   =C'DSCB.',D1DSN     MODEL DSCB\n         BE    ECLSSYES            YES - MAKE SYSTEM\n         CLC   =C'CATALOG.',D1DSN  ICF CATALOG\n         BE    ECLSSYES            YES - MAKE SYSTEM\n*                                  NTMP\n         MVC   D1CLASS,=C'NTMP '   POST\n         B     ECLSEXIT            EXIT OK\nECLSDYES EQU   *                   UNSUPPORTED - DSORG\n         MVC   D1CLASS,=C'DSORG'   POST\n         B     ECLSEXIT            EXIT NOT OK\nECLSUYES EQU   *                   TSO USERID\n         MVC   D1CLASS,=C'TSO  '   POST\n         B     ECLSEXIT            EXIT NOT OK\nECLSTYES EQU   *                   TEMP\n         MVC   D1CLASS,=C'TEMP '   POST\n         B     ECLSEXIT            EXIT OK\nECLSSYES EQU   *                   PROD\n         MVC   D1CLASS,=C'SYS  '   POST\n         B     ECLSEXIT            EXIT OK\nECLSVYES EQU   *                   PROD\n         MVC   D1CLASS,=C'VSAM '   POST\n         B     ECLSEXIT            EXIT OK\nECLSEXIT EQU    *\n         L     R14,ECLSR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'CKCT     - CHECK TO SEE IF CATALOGED'\nCKCT     EQU   *\n         ST    R14,CKCTR14         SAVE RETURN ADDR\n         CLC   D1CLASS,=C'VSAM '   VSAM\n         BE    CKCTEXIT            YES -- SKIP CHECK\n         MVI   D1CAT,C'Y'          POST CATALOGED\n         LOCATE CATCAML            SEE IF DSN IS CATALOGED\n         LTR   R15,R15             SUCCESSFUL\n         BZ    CKCTED1             YES - CONTINUE EDITING\n         MVI   D1CAT,C'N'          POST NOT CATLAOGED\n         CH    R15,=H'8'           NOT CATALOGED\n         BE    CKCTEXIT            YES - DONE\n         MVI   D1CAT,C'?'          POST ERROR\n         LA    R1,MSGA2            MSG NO\n         BAL   R14,AMSG            POST TO ACTION FIELD\n         B     CKCTEXIT            DONE\nCKCTED1  EQU   *                   CATALOGED\n         CLC   CATVOL#,=H'1'       ONE VOLUME ENTRY\n         BE    CKCTED2             YES\n         MVI   D1CAT,C'M'          MULTIVOLUME - SKIP UNCATLG\n         LA    R1,MSGA3            MSG NO\n         BAL   R14,AMSG            POST TO ACTION FIELD\n         B     CKCTEXIT            DONE\nCKCTED2  EQU   *                   CATALOGED\n         CLC   DEVSER,CATSER       CATALOGED TO PROPER PACK\n         BE    CKCTEXIT            YES - OK\n         MVI   D1CAT,C'W'          WRONG PACK\n         LA    R1,MSGA4            MSG NO\n         BAL   R14,AMSG            POST TO ACTION FIELD\n         B     CKCTEXIT            DONE\nCKCTEXIT EQU    *\n         L     R14,CKCTR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'CKRF     - CKECK REF DATE FOR EXPIRATION'\nCKRF     EQU   *\n         ST    R14,CKRFR14         SAVE RETURN ADDR\n         CLC   D1RFDTE,=C'00000'   BAD REF DATE\n         BE    CKRFB               YES -- USE CREATE DATE\n         CLC   D1RFDTE,=X'00001'   BAD REF DATE\n         BE    CKRFB               YES -- USE CREATE DATE\n         CLC   D1RFDTE,DSYYDDD     GOOD REF DATE -- CHECK IT\n         BL    CKRFXP              EXPIRED\n         B     CKRFOK              GOOD\nCKRFB    EQU   *                   REFDATE BAD -- USE CREATE DATE\n         CLC   D1CRDTE,DSYYDDD     CHECK IT\n         BL    CKRFXP              EXPIRED\n         B     CKRFOK              GOOD\nCKRFOK   EQU   *\n         LA    R15,0               SET RETURN CODE\n         B     CKRFEXIT            EXIT\nCKRFXP   EQU    *\n         LA    R15,4               SET RETURN CODE\nCKRFEXIT EQU    *\n         L     R14,CKRFR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'CKDS     - CKECK DSNAME FOR EXPIRATION'\nCKDS     EQU   *\n         ST    R14,CKDSR14         SAVE RETURN ADDR\n         CLC   SYST,D1DSN          CHECK DSNAME DATE\n         BH    CKDSXP              EXPIRED\n         B     CKDSOK              GOOD\nCKDSOK   EQU   *\n         LA    R15,0               SET RETURN CODE\n         B     CKDSEXIT            EXIT\nCKDSXP   EQU    *\n         LA    R15,4               SET RETURN CODE\nCKDSEXIT EQU    *\n         L     R14,CKDSR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'DATE     - CONVERT FROM YY.DDD TO MM.DD.YY'\nDATE     EQU   *\n         ST    R14,DATER14         SAVE RETURN ADDR\n         LA    R1,PARMJGDT         PICK UP JGDATE PARM\n         L     R15,=V(JGDATE)      DATE CONVERT ROUTINE\n         BALR  R14,R15             EXECUTE\n         L     R14,DATER14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'SIZE     - CALCULATE EXTENT SIZE IN TRKS'\nSIZE     EQU   *\n*\n*        R2    INTERMEDIATE FILE SIZE IN TRKS\n*        R3    TRKS/CYL\n*        R4    EXTENTS IN FILE\n*        R5    A(CURRENT SET OF SEGMENTS)\n*        R6    RESERVED (DISKX DCB ADDR)\n*        R7    EXTENTS IN CURRENT SET\n*\n         ST    R14,SIZER14         SAVE RETURN ADDR\n         SR    R2,R2               CLEAR FILE SIZE IN TRKS\n         LH    R3,DEVDTC           PICK UP TRKS/CYL\n         SR    R4,R4               CLEAR\n         IC    R4,DS1NOEPV         EXTENT COUNT\n         LA    R5,DS1EXT1          A(FIRST EXTENT SEG)\n         LA    R7,3                NO OF EXTENTS IN THIS SEG\n         BAL   R14,XTNT            PROCESS THESE EXTENTS\n         LTR   R4,R4               DONE\n         BZ    SIZEEND             YES\nSIZELOOP EQU   *\n         MVC   F3CCHHR,DS1PTRDS    POST FMT3CCHHR\n         CLC   F3CCHHR,=X'0000000000' VALID\n         BE    ERRCCHHR            NO\n         OBTAIN FMTCAML            GET FMT3\n         LTR   R15,R15             OK\n         BNE   ERRFMT3O            NO\n         CLI   DS3FMTID,C'3'       FMT3\n         BNE   ERRFMT3T            NO\n         LA    R5,DS3EXTNT         A(NEXT SET OF EXTENT SEGS)\n         LA    R7,4                NUMBER OF EXTENTS IN THIS SEG\n         BAL   R14,XTNT            PROCESS THESE EXTENTS\n         LTR   R4,R4               DONE\n         BZ    SIZEEND             YES\n         LA    R5,DS3ADEXT         A(NEXT SET OF EXTENT SEGS)\n         LA    R7,9                NUMBER OF EXTENTS IN THIS SEG\n         BAL   R14,XTNT            PROCESS THESE EXTENTS\n         LTR   R4,R4               DONE\n         BZ    SIZEEND             YES\n         B     SIZELOOP            LOOP BACK (CCHHR IN SAME PLACE)\nSIZEEND  EQU   *\n         C     R2,CAPTRKS          SOMETHING SCREWY\n         BH    ERRCAPTR            YES -- ERROR\n         CVD   R2,WRK8             NOW PACKED\n         MVC   WRK8B(6),=X'402020202021' POST EDIT MASK\n         ED    WRK8B(6),WRK8+5     EDIT\n         MVC   D1ALLOC,WRK8B+1     POST\n         L     R14,SIZER14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'XTNT     - PROCESS A SET OF EXTENTS'\nXTNT     EQU   *\n         ST    R14,XTNTR14         SAVE RETURN ADDR\n         SR    R14,R14             CLEAR\nXTNTLOOP EQU   *\n         LH    R15,6(R5)           HI CC\n         MR    R14,R3              X TRK/CYL = TRKS\n         AR    R2,R15              ADD TO FILE SIZE\n         AH    R2,8(R5)            + HI HH\n         LH    R15,2(R5)           LO CC\n         MR    R14,R3              X TRK/CYL = TRKS\n         SR    R2,R15              SUBTRACT FROM FILE SIZE\n         SH    R2,4(R5)            - LO HH\n         LA    R2,1(R2)            +1 = NEW FILE SIZE\n         BCT   R4,XTNTCKSG         DEC EXTENTS IN FILE COUNT\n         B     XTNTEXIT            0 = DONE\nXTNTCKSG EQU   *\n         LA    R5,10(R5)           SET TO NEXT CCHH\n         BCT   R7,XTNTLOOP         DEC EXTENTS IN SEG\nXTNTEXIT EQU   *\n         L     R14,XTNTR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'AMSG     - ADD MSG TO D1ACTION'\nAMSG     EQU   *\n         ST    R14,AMSGR14         SAVE RETURN ADDR\n         LH    R14,0(R1)           LENGTH OF MSG\n         LA    R15,L'D1ACTION      MAX LEN\n         S     R15,ACDSP           REMAINING SPACE\n         SH    R15,=H'2'           ALLOW FOR '; '\n         CR    R14,R15             ENOUGH ROOM\n         BH    AMSGNO              NO -- NOT ENOUGH ROOM\n         CLC   ACDSP,=F'0'         FIRST MSG\n         BE    AMSG1               YES -- SKIP '; '\n         LA    R15,D1ACTION        A(ACTION AREA)\n         A     R15,ACDSP           SKIP USED PART\n         MVC   0(2,R15),=C'; '     POST SEPARATOR\n         L     R15,ACDSP           OLD LENGTH OF USED PART\n         LA    R15,2(R15)          ALLOW FOR '; '\n         ST    R15,ACDSP           POST\nAMSG1    EQU   *\n         LA    R15,D1ACTION        A(ACTION AREA)\n         A     R15,ACDSP           SKIP USED PART\n         BCTR  R14,0               LESS 1 FOR MVC\n         EX    R14,AMSGMVC         MVC 0(*,R15),2(R1)\n         L     R15,ACDSP           OLD LENGTH OF USED PART\n         AH    R15,0(R1)           ALLOW FOR MSG\n         ST    R15,ACDSP           POST\n         B     AMSGEXIT            DONE\nAMSGNO   EQU   *                   NO ROOM\n         LA    R15,D1ACTION+L'D1ACTION-3\n         MVC   0(3,R15),=C'***'    POST NO ROOM\n         LA    R15,L'D1ACTION\n         ST    R15,ACDSP           FILL UP FOR NEXT MSG\nAMSGEXIT EQU   *\n         L     R14,AMSGR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\nAMSGMVC  MVC   0(0,R15),2(R1)      MOVE MESSAGE\n         TITLE 'PRNT     - PRINT A LINE TO SYSPRINT'\nPRNT     EQU   *\n         ST    R14,PRNTR14         SAVE RETURN ADDR\n         AP    LINECT,=P'1'        BUMP LINE COUNT\n         CP    LINECT,LINEMAX      PAST END OF PAGE\n         BNH   PRNTP               NO -- PRINT IT\n         ST    R1,PRNTA            SAVE A(PRNT LINE)\n         AP    PAGECT,=P'1'        BUMP PAGE COUNT\n         MVC   H1PAGE,=X'40202021' POST EDIT MASK\n         ED    H1PAGE,PAGECT       EDIT AND POST\n         MVI   PRNTCC,C'1'         CC = TOP OF PAGE\n         MVC   PRNTTEXT,H1         POST FIRST TITLE LINE\n         PUT   SYSPRT,PRNTLINE     WRITE\n         MVI   PRNTCC,C' '         CC = SINGLE SPACE\n         MVC   PRNTTEXT,H2         POST SECOND TITLE LINE\n         PUT   SYSPRT,PRNTLINE     WRITE\n         MVC   PRNTTEXT,SPACES     POST SPACES\n         PUT   SYSPRT,PRNTLINE     WRITE\n         MVC   PRNTTEXT,H3         POST THIRD TITLE LINE\n         PUT   SYSPRT,PRNTLINE     WRITE\n         ZAP   LINECT,=P'5'        RESET LINE COUNT\n         L     R1,PRNTA            RESTORE A(PRINT LINE)\nPRNTP    EQU   *\n         MVC   PRNTTEXT,0(R1)      POST PRINT LINE\n         PUT   SYSPRT,PRNTLINE     WRITE\n         L     R14,PRNTR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'ERROR MESSAGES'\nERRPARM  EQU   *\n         LA    R15,WORKPARM+1\n         SR    R15,R2              GET GENERAL LOCATION\n         CVD   R15,WRK8A\n         OI    WRK8A+7,X'0F'       FORCE SIGN\n         UNPK  ERRPARMB,WRK8A      PUT VALUE IN WTO\nERRPARMW WTO   'SUPERSCRATCH - INVALID PARM ENTRY NEAR BYTE 00 ',      *\n               ROUTCDE=11,DESC=7\nERRPARMB EQU   ERRPARMW+52,2       MSG MODIFIER\n         B     ABEND               TERMINATE\nERRPRINT EQU   *\n         WTO   'SUPERSCRATCH - SYSPRINT OPEN FAILED ',                 *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRFMT3O EQU   *\n         WTO   'SUPERSCRATCH - OBTAIN FOR FORMAT3 DSCB FAILED',        *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRCCHHR EQU   *\n         WTO   'SUPERSCRATCH - CCHHR POINTER BAD FOR SECONDARIES',     *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRFMT3T EQU   *\n         WTO   'SUPERSCRATCH - DSCB OBTAINED NOT FORMAT3',             *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRCAPTR EQU   *\n         WTO   'SUPERSCRATCH - VTOC ERROR - FILE BIGGER THAN VOLUME',  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRDSKO1 EQU   *\n         MVC   ERRDSK1V,H2VOL    POST CURRENT VOLSER\nERRDSK1W WTO   'SUPERSCRATCH - XXXXXX NOT OPERATOR MOUNTED, BYPASSED ',*\n               ROUTCDE=11,DESC=7\nERRDSK1V EQU   ERRDSK1W+23,6      VOLSER SLOT\n         B     ABEND\n*\nERRDSKO2 EQU   *\n         MVC   ERRDSK2M,DSKXDDN   POST CURRENT DISKX DDNAME\nERRDSK2W WTO   'SUPERSCRATCH - DISKXX   OPEN FAILED/NOT DASD ',        *\n               ROUTCDE=11,DESC=7\nERRDSK2M EQU   ERRDSK2W+23,8       DDNAME SLOT\n         B     ABEND\n         TITLE 'EXIT/ABEND'\nABEND    EQU   *\n         ABEND 1000,DUMP\nEXIT     EQU   *\n         CLOSE (SYSPRT)\n         L     R13,4(R13)\n         RETURN (14,12),RC=0\n         LTORG\n         TITLE 'DATA AREAS - MISCELLANEOUS'\n*\n*        DOUBLEWORDS\n*\n         DS    0D\nSAVEAREA DS    18F                 REG SAVE AREA\nWRK8A    DC    D'0'                WORK AREA\nWRK8B    DC    D'0'                WORK AREA\nWRK8     EQU   WRK8A,8\nTODAYTME DS    D                   HHMMSSTH00YYDDDC\n*\n*        FULLWORDS\n*\nAMSGR14  DS    F                   R14 SAVE AREA FOR AMSG\nCKCTR14  DS    F                   R14 SAVE AREA FOR CKCT\nCKDSR14  DS    F                   R14 SAVE AREA FOR CKDS\nCKRFR14  DS    F                   R14 SAVE AREA FOR CKRF\nDATER14  DS    F                   R14 SAVE AREA FOR DATE\nDSKCR14  DS    F                   R14 SAVE AREA FOR DSKC\nDSKOR14  DS    F                   R14 SAVE AREA FOR DSKO\nDSKPR14  DS    F                   R14 SAVE AREA FOR DSKP\nECLSR14  DS    F                   R14 SAVE AREA FOR ECLS\nPARMR14  DS    F                   R14 SAVE AREA FOR PARM\nPRNTR14  DS    F                   R14 SAVE AREA FOR PRNT\nSIZER14  DS    F                   R14 SAVE AREA FOR SIZE\nTIMER14  DS    F                   R14 SAVE AREA FOR TIME\nXTNTR14  DS    F                   R14 SAVE AREA FOR XTNT\nFWYY     DS    F                   YEAR\nFWMM     DS    F                   MONTH\nFWDD     DS    F                   DAY OF MONTH\nFWDDD    DS    F                   DAY OF YEAR\nPARMA    DS    F                   A(A(PARM))\nPRNTA    DS    F                   A(PRINT LINE)\nACDSP    DS    F                   DISPL INTO ACTION MSG\nCAPTRKS  DS    F                   PACK CAPACITY IN TRACKS\n*\n*        HEX AND CHAR DATA\n*\nDSPTIME  DS    0CL15               HHMMSSTH00YYDDD\nDSPTHH   DS    CL2                 HH  - HOURS\nDSPTMM   DS    CL2                 MM  - MINUTES\nDSPTSS   DS    CL2                 SS  - SECONDS\nDSPTT    DS    C                   T   - TENTHS\nDSPTH    DS    C                   H   - HUNDREDTHS\n         DS    CL2                     - RESERVED\nDSPTYY   DS    CL2                 YY  - YEAR\nDSPTDDD  DS    CL3                 DDD - DAY OF YEAR\n*\nSYST     DS    0CL16               SYSYYDDD.THHMMSS\n         DC    C'SYS'\nSYSTYY   DS    CL2\nSYSTDDD  DS    CL3\n         DC    C'.T'\nSYSTHH   DS    CL2\nSYSTMM   DS    CL2\nSYSTSS   DS    CL2\nDSYYDDD  DS    0CL5\nDSYY     DS    CL2\nDSDDD    DS    CL3\nF3CCHHR  DS    XL5                 CCHHR FOR NEXT FORMAT3 DSCB\nHWACCHHR DS    XL5                 END OF VTOC CCHHR\nHWAMAX   DC    XL5'FFFFFFFFFF'     INFINITY\nDCRUN    DC    C'RUN='\nDCT      DC    C'TEMP='\nDCD      DC    C'DS='\nDCREAL   DC    C'REAL'\nDCTEST   DC    C'TEST'\nUCSNTMP  DS    0CL4\n         DC    C'NTMP'\nUCSTSO   DS    0CL4\n         DC    C'TSO'\n         DC    X'00'\nUCSALL   DS    0CL4\n         DC    C'ALL'\n         DC    X'00'\nWORKPARM DS    CL102\nSPACES   DC    CL133' '\nDSKXDDN  DC    C'DISK00  '\n*\n*        PACKED DATA\n*\nLINECT   DC    PL2'0'              LINE COUNT        FOR PRNT\nLINEMAX  DC    PL2'56'             LINES PER PAGE    FOR PRNT\nPAGECT   DC    PL2'0'              PAGE COUNT        FOR PRNT\nPWRKYY   DC    PL2'0'\nPWRKDDD  DC    PL2'0'\nPWRKHH   DC    PL2'0'\nPWRKT1   DC    PL2'0'\nPWRKT2   DC    PL2'0'\nDISKNO   DC    PL2'0'              CURRENT DISK DD\n         TITLE 'DATA AREAS - EXIT LISTS AND PARAMETER LISTS'\nJFCBEXIT DS    0F\n         DC    X'87'               FLAG END OF LIST + JFCB\n         DC    AL3(INFMJFCB)       A(MODIFIED JFCB)\n*\nPARMJGDT DS    0F\n         DC    A(FWYY)             A(YEAR)\n         DC    A(FWDDD)            A(DAY OF YEAR)\n         DC    A(FWMM)             A(MONTH)\n         DC    XL1'80'             FLAG END OF LIST\n         DC    AL3(FWDD)           A(DAY OF MONTH)\n*\nSCRCAML  CAMLST SCRATCH,D1DSN,,DELIST,,OVRD\n*\nCATCAML  CAMLST NAME,D1DSN,,CATENTY    LOCATE CATALOG NAME\n*\nUCATCAML CAMLST UCATDX,D1DSN       UNCATALOG, DROP UNUSED INDICES\n*\nFMTCAML  CAMLST SEEK,F3CCHHR,DEVSER,IECSDSL1  OBTAIN NEXT FMT3\n*\nDELIST   DS    0F\n         DC    H'1'                ONE VOL\nDEVTYP   DC    XL4'00'             UCB TYPE\nDEVSER   DC    CL6' '              VOLSER\nDELSTAT  DC    H'0'                STATUS CODE\n*\n         DS    0D\nCATENTY  DS    CL265               CATALOG LOCATE WORKAREA\n         ORG   CATENTY\nCATVOL#  DS    H                   # CATALOGED VOLSERS\nCATDEV   DS    XL4                 VOLUME DEVICE TYPE\nCATSER   DS    CL6                 VOLSER\nCATSEQ   DS    CL2                 DS SEQ #-ZERO FOR DASD\n         ORG\n*\nDEVDATA  DS    0F                  DEVTYPE MACRO WORK AREA\n         DS    F                   UCBTYPE\n         DS    F                   BLKSIZE\nDEVDCV   DS    H                   CYLS/VOL\nDEVDTC   DS    H                   TRKS/CYL\n         DS    H                   TRK LENGTH\n         DS    XL2                 OVERHEAD INFO\n         DS    X                   OVERHEAD INFO\n         DS    X                   SWITCHES\n         DS    XL2                 TOLERENCE INFO\n         TITLE 'DATA AREAS - ACTION MESSAGES'\n*\n*        ALL MESSAGES ARE PRECEEDED BY A HW LENGTH\n*        MESSAGES ARE MODED INTO D1ACTION FIELD\n*\nMSGA1    DC    H'17'\n         DC    C'NO ACTION - CLASS'\nMSGA2    DC    H'19'\n         DC    C'ERROR CHECKING CTLG'\nMSGA3    DC    H'15'\n         DC    C'CTLG - MULTIVOL'\nMSGA4    DC    H'15'\n         DC    C'CTLG - MISMATCH'\nMSGA5    DC    H'02'\n         DC    C'OK'\nMSGA6    DC    H'10'\n         DC    C'UNCTLG ERR'\nMSGA7    DC    H'12'\n         DC    C'WOULD UNCTLG'\nMSGA8    DC    H'09'\n         DC    C'UNCTLG OK'\nMSGA9    DC    H'11'\n         DC    C'SCRATCH ERR'\nMSGAA    DC    H'13'\n         DC    C'WOULD SCRATCH'\nMSGAB    DC    H'12'\n         DC    C'SCRATCHED OK'\nMSGAC    DC    H'13'\n         DC    C'SKIPPED - UCS'\n         TITLE 'DATA AREAS - JFCB WORK AREA'\n         DS    0D\n         IEFJFCBN\n         TITLE 'DATA AREAS - VTOC DSCBS'\n         IECSDSL1 (1)              FORMAT 1 DSCB\n         EJECT\n         ORG   IECSDSL1            OVERLAY FMT1\n         IECSDSL1 (3)\n         EJECT\n         ORG   DS1FMTID            OVERLAY FMT1 (KEY NOT INCLUDED)\n         IECSDSL1 (4)\n         ORG\n         TITLE 'WORK AREAS - PRINT LINES'\nPRNTLINE DS    0CL133              ACTUAL PRINT LINE\nPRNTCC   DC    C' '\nPRNTTEXT DC    CL132' '\n*\nH1       DC    CL132' '\n         ORG   H1\n         DC    C'DM011 - 01  '\n         DC    C'*****  S U P E R S C R A T C H  *****  '\n         DC    C'TODAY DATE ='\nH1YYDDD  DC    C' YY.DDD'\n         DC    C' ='\nH1MMDDYY DC    C' MM/DD/YY  '\n         DC    C'TODAY TIME ='\nH1HHMM   DC    C' HH.MM'\n         DC    10C' '\n         DC    C'PAGE '\nH1PAGE   DC    C' NNN'\n         ORG   H1+L'H1\nH2       DC    CL132' '\n         ORG   H2\n         DC    C'RUN = '\nH2RUN    DC    C'TEST'\n         DC    C'  TEMP ='\nH2DDHH   DC    C' 01.00'\n         DC    C' ='\nH2YYDDHH DC    C' YY.DDD HH'\n         DC    C'  DS ='\nH2DD     DC    C' 02'\n         DC    C' ='\nH2YYDDD  DC    C' YY.DDD'\n         DC    C'  VOLSER = '\nH2VOL    DC    C'XXXXXX'\n         DC    C'  CUU = '\nH2CUU    DC    C'XXX'\n         DC    C' MOUNT = '\nH2MOUNT  DC    C'PRIVATE'\n         DC    C' UCS = '\nH2UCS    DC    C'ALL '\n         ORG   H2+L'H2\nH3       DC    CL132' '\n         ORG   H3\n         DC    CL44'DSNAME'\n         DC    C'  ALLOC'\n         DC    C'  CRDTE'\n         DC    C'  RFDTE'\n         DC    C'  CLASS'\n         DC    C'  CAT'\n         DC    C'  ACTION'\n         ORG   H3+L'H3\nD1       DC    CL132' '\n         ORG   D1\nD1DSN    DS    CL44\n         DS    CL2\nD1ALLOC  DS    CL5\n         DS    CL2\nD1CRDTE  DS    CL5\n         DS    CL2\nD1RFDTE  DS    CL5\n         DS    CL2\nD1CLASS  DS    CL5\n         DS    CL3\nD1CAT    DS    C\n         DS    CL3\nD1ACTION DS    CL50\n         ORG   D1+L'D1\n         TITLE ' WORK AREAS - TRANSLATE TABLE'\n         DS    0D\nTSOMASK  DS    0CL256\n*                0123456789ABCDEF\n         DC    C'IIIIIIIIIIIIIIII' 0\n         DC    C'IIIIIIIIIIIIIIII' 1\n         DC    C'IIIIIIIIIIIIIIII' 2\n         DC    C'IIIIIIIIIIIIIIII' 3\n         DC    C'IIIIIIIIIII.IIII' 4\n         DC    C'IIIIIIIIIIIIIIII' 5\n         DC    C'IIIIIIIIIIIIIIII' 6\n         DC    C'IIIIIIIIIIIIIIII' 7\n         DC    C'IIIIIIIIIIIIIIII' 8\n         DC    C'IIIIIIIIIIIIIIII' 9\n         DC    C'IIIIIIIIIIIIIIII' A\n         DC    C'IIIIIIIIIIIIIIII' B\n         DC    C'IAAAAAAAAAIIIIII' C\n         DC    C'IAAAAAAAAAIIIIII' D\n         DC    C'IIAAAAAAAAIIIIII' E\n         DC    C'NNNNNNNNNNIIIIII' F\n*                0123456789ABCDEF\n         TITLE 'WORK AREAS - DCBS'\n         PRINT NOGEN\nDISKX    DCB   BLKSIZE=96,                                             X\n               DDNAME=DISK00,                                          X\n               DSORG=PS,                                               X\n               EODAD=DSKPX,                                            X\n               EXLST=JFCBEXIT,                                         X\n               KEYLEN=44,                                              X\n               LRECL=96,                                               X\n               MACRF=(R),                                              X\n               OPTCD=Z,                                                X\n               RECFM=F\nSYSPRT   DCB   DDNAME=SYSPRINT,                                        X\n               DSORG=PS,                                               X\n               LRECL=133,                                              X\n               MACRF=PM,                                               X\n               RECFM=FBA\n         TITLE 'DSECTS'\n         IEZDEB\n*\nUCB      DSECT\n         IEFUCBOB\n*\n* DSCB EXTENT LAYOUT\n*\nEXTENT   DSECT\nEXTYPE   DS    X                   TYPE\nEXSEQ    DS    X                   SEQ # (M)\nEXLCC    DS    XL2                 LOWER LIMIT (CC)\nEXLHH    DS    XL2                 LOWER LIMIT (HH)\nEXUCC    DS    XL2                 UPPER LIMIT (CC)\nEXUHH    DS    XL2                 UPPER LIMIT (HH)\nEXTSZ    EQU   *-EXTENT            SIZE OF ENTRY\n*\n         DCBD  DEVD=(DA),DSORG=(PS)\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DM100PUP": {"ttr": 1799, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\"\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00\\xe7\\x00\\xe7\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:22", "lines": 231, "newlines": 231, "modlines": 0, "user": "FILE097"}, "text": "         TITLE 'DM100PUP - EXTRACT DATA FROM HSM MCDS'\nDM100PUP CSECT\n         REGS\n*\n*        SCAN HSM MCDS FOR A RECS AND D RECS\n*        IF A:\n*              CHECK MCAINTTP\n*                 MUST BE 'M' - BASE DATASET\n*              WRITE:  KEY\n*                      MCAINTNM (D REC KEY)\n*        IF D:\n*              CHECK MCDFLG1\n*                 MUST BE X'80' MIGRATED COPY EXISTS ON LEVEL1, OR\n*                 MUST BE X'84' MIGRATED COPY EXISTS ON LEVEL2\n*              CHECK MCDMDEVT\n*                 MUST BE X'80' MIGRATED COPY EXISTS ON TAPE, OR\n*                 MUST BE X'20' MIGRATED COPY EXISTS ON DISK\n*              WRITE:  KEY\n*                      MCDVSN   MIGR VOL SER\n*                      MCDFRVSN FROM VOL SER\n*                      MCDMCANM (A REC KEY)\n*\n         USING DM100PUP,R15   ADDRESSABILITY\n         B     MAINEP\n         DC    AL1(L'CSECTLIT)\nCSECTLIT DC    C'DM100PUP - EXTR DATA FROM HSM MCDS &SYSDATE &SYSTIME'\n         TITLE 'DM100PUP - INITIALIZATION'\nMAINEP   DS    0H\n         SAVE (14,12)         SAVE REGS\n         LR    R12,R15        MOVE BASE\n         DROP  R15\n         USING DM100PUP,R12   ADDRESSABILITY\n         LR    R2,R13         A(OLD SAVE AREA)\n         LA    R13,SAVEAREA   A(NEW SAVE AREA)\n         USING SAVEAREA,R13   ADDRESSABILITY\n         ST    R13,8(R2)      FORWARD CHAIN\n         ST    R2,4(R13)      BACK CHAIN\n         USING IHADCB,R6      ADDRESSABILITY\n         LA    R6,EXTRACTD    A(DCB)\n         OPEN  ((R6),OUTPUT)\n         TM    DCBOFLGS,X'10' OK?\n         BZ    ERROPD         NO -- ERROR\n         LA    R6,EXTRACTA    A(DCB)\n         OPEN  ((R6),OUTPUT)\n         TM    DCBOFLGS,X'10' OK?\n         BZ    ERROPA         NO -- ERROR\n         DROP  R6\n         GENCB BLK=ACB,                                                X\n               AM=VSAM,                                                X\n               DDNAME=MCDS,                                            X\n               MACRF=(KEY,SEQ)\n         ST    R1,ADDRACB     SAVE A(ACB)\n         LR    R6,R1          POST TO NEW REG\n         OPEN  ((6))          OPEN FILE\n         CH    R15,=H'4'      ABOVE 'WARNING'\n         BH    ERROPM         YES -- ERROR\n         SHOWCB ACB=(6),                                               X\n               AREA=LRECL,                                             X\n               LENGTH=L'LRECL,                                         X\n               FIELDS=LRECL\n         L     R0,LRECL       POST REC LEN\n         LR    R8,R0          SAVE IN A MORE CONVENIENT REG\n         GETMAIN R,LV=(0)     GETMAIN A RECORD AREA\n         ST    R1,ADDRREC     SAVE\n         LR    R7,R1          POST TO A MORE CONVENIENT REG\n         GENCB BLK=RPL,                                                X\n               ACB=(6),                                                X\n               AM=VSAM,                                                X\n               AREA=(7),                                               X\n               AREALEN=(8),                                            X\n               OPTCD=(KEY,SEQ)\n         ST    R1,ADDRRPL     SAVE A(RPL)\n         LR    R6,R1          POST A(RPL) TO A CONVENIENT REG\n         USING MCDSREC,R7     ADDRESSABILITY\n         TITLE 'DM100PUP - MAIN LOOP'\nLOOP     EQU   *\n         GET   RPL=((6))      READ NEXT REC\n         LTR   R15,R15        OK?\n         BNZ   LOOPGCK        NO -- CHECK WHY\n         CLI   MCHTYPE,MCHTYPED 'D' REC\n         BE    HITD           YES\n         CLI   MCHTYPE,MCHTYPEA 'A' REC\n         BE    HITA           YES\n         B     LOOP           IGNORE\nHITA     EQU   *\n         CLI   MCAINTTP,MCAINTTM MIGRATE REC\n         BNE   LOOP           NO -- DROP\n         BAL   R14,PUTA       WRITE AN 'A' REC\n         B     LOOP           LOOP BACK\nHITD     EQU   *\n         TM    MCDFLG1,MCDFLASN MIGRAT\n         BZ    LOOP           NO -- DROP\n         BAL   R14,PUTD       WRITE A 'D' REC\n         B     LOOP           LOOP BACK\nLOOPGCK  EQU   *\n         ST    R15,FDBKR15    SAVE RETURN CODE\n         SHOWCB RPL=(6),                                               X\n               AREA=FDBKRPL,                                           X\n               LENGTH=L'FDBKRPL,                                       X\n               FIELDS=FDBK\n         CLC   FDBKR15,=F'8'  LOGIC ERROR\n         BNE   ERRRPL         NO -- ERROR\n         CLC   FDBKRPL,=F'4'  EOF\n         BNE   ERRRPL         NO -- ERROR\n         B     EXIT           DONE -- EXIT\n         TITLE 'DM100PUP - PUTA - WRITE AN A REC'\nPUTA     EQU   *\n         ST    R14,PUTAR14    SAVE RETURN ADDR\n         MVC   ARECDSND,MCAINTNM POST D REC DSN\n         MVC   ARECDSNA,MCK   POST A REC DSN\n         PUT   EXTRACTA,AREC\n         L     R14,PUTAR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'DM100PUP - PUTD - WRITE A D REC'\nPUTD     EQU   *\n         ST    R14,PUTDR14    SAVE RETURN ADDR\n         MVC   DRECDSND,MCK   POST D REC DSN\n         MVC   DRECDSNA,MCDMCANM  POST A REC DSN\n         MVC   DRECPVOL,MCDFRVSN  POST USER VSN\n         MVC   DRECMVOL,MCDVSN  POST MIGRAT VSN\n         MVI   DRECLVL,C'1'   ASSUME LEVEL1\n         TM    MCDFLG1,MCDFL2 LEVEL2\n         BZ    PUTDDEVT       CHECK FOR DEVICE TYPE\n         MVI   DRECLVL,C'2'   SET LEVEL2\nPUTDDEVT EQU   *\n         CLI   MCDMDEVT+2,MCDTPDEV   IS IT TAPE?\n         BNE   PUTDDEVD       NO -- CHECK FOR DISK\n         MVI   DRECDEV,C'T'   SET TAPE\n         B     PUTDDEVX       CONTINUE\nPUTDDEVD EQU   *\n         CLI   MCDMDEVT+2,MCDFMVDA   IS IT DISK?\n         BNE   ERRDEV         NO -- ERROR\n         MVI   DRECDEV,C'D'   SET DISK\nPUTDDEVX EQU   *\n         L     R1,MCDCSZ      SPACE IN 2K BLOCKS\n         CVD   R1,WORKDW      NOW PACKED\n         MVC   WORKDWB(8),=X'4020202020202120' POST EDIT MASK\n         ED    WORKDWB(8),WORKDW+4  EDIT\n         MVC   DRECCSZ,WORKDWB+1    POST\n         UNPK  DRECRDAT,MCDDLR    POST DATE LAST REFED\n         OI    DRECRDAT+L'DRECRDAT-1,X'F0'    FIX SIGN\n         UNPK  DRECCDAT,MCDDLC    POST CREATE DATE\n         OI    DRECCDAT+L'DRECCDAT-1,X'F0'    FIX SIGN\n         UNPK  DRECMDAT,MCDDMIG   POST DATE MIGRATED\n         OI    DRECMDAT+L'DRECMDAT-1,X'F0'    FIX SIGN\n         PUT   EXTRACTD,DREC\n         L     R14,PUTDR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'DM100PUP - ERROR ROUTINES'\nERRDEV   EQU   *\n         WTO   'DM100PUP - INVALID DEVICE IN D RECORD',                X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nERROPA   EQU   *\n         WTO   'DM100PUP - OPEN FAILED FOR EXTRACTA',                  X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nERROPD   EQU   *\n         WTO   'DM100PUP - OPEN FAILED FOR EXTRACTD',                  X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nERROPM   EQU   *\n         WTO   'DM100PUP - OPEN FAILED FOR MCDS',                      X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nERRRPL   EQU   *\n         WTO   'DM100PUP - I/O ERROR ON MCDS',                         X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nABEND    EQU   *\n         ABEND 1000,DUMP\n         TITLE 'DM100PUP - EXIT - TERMINATION'\nEXIT     EQU   *\n         CLOSE EXTRACTA\n         CLOSE EXTRACTD\n         L     R6,ADDRACB\n         CLOSE ((6))\n         L     R13,4(R13)     A(OLD SAVE AREA)\n         RETURN (14,12),RC=0\n         LTORG\n         TITLE 'DM100PUP - DATA AREA'\nSAVEAREA DS    9D             REG SAVE AREA\nWORKDW   DS    D              8 BYTE WORK AREA\nWORKDWB  DS    D              8 BYTE WORK AREA\n*\nPUTAR14  DS    F              R14 SAVE AREA FOR PUTA - WRITE A REC\nPUTDR14  DS    F              R14 SAVE AREA FOR PUTD - WRITE D REC\n*\nADDRACB  DS    F\nADDRREC  DS    F\nADDRRPL  DS    F\nFDBKRPL  DS    F\nFDBKR15  DS    F\nLRECL    DS    F\n*\nAREC     DS    0CL88          A RECORDS\nARECDSND DS    CL44           D REC DSN\nARECDSNA DS    CL44           A REC DSN\n*\nDREC     DS    0CL124         D RECORDS\nDRECDSND DS    CL44           D REC DSN\nDRECDSNA DS    CL44           A REC DSN\nDRECPVOL DS    CL6            PRIMARY VOL SER\nDRECMVOL DS    CL6            MIGRATE VOL SER\nDRECLVL  DS    CL1            MIGRATION LEVEL 1 OR 2\nDRECDEV  DS    CL1            MIGRATION DEVICE TYPE DISK OR TAPE\nDRECCSZ  DS    CL7            SPACE IN 2K BLOCKS\nDRECRDAT DS    CL5            PRIMARY FILE REF DATE\nDRECCDAT DS    CL5            PRIMARY FILE CREATE DATE\nDRECMDAT DS    CL5            PRIMARY FILE MIGRATE DATE\n         TITLE 'DM100PUP - DCBS, DCBD'\n         PUSH  PRINT\n         PRINT NOGEN\nEXTRACTA DCB   DDNAME=EXTRACTA,                                        X\n               DSORG=PS,                                               X\n               LRECL=88,                                               X\n               MACRF=PM,                                               X\n               RECFM=FB\n*\nEXTRACTD DCB   DDNAME=EXTRACTD,                                        X\n               DSORG=PS,                                               X\n               LRECL=124,                                              X\n               MACRF=PM,                                               X\n               RECFM=FB\n*\n         DCBD  DSORG=PS\n         POP   PRINT\n         TITLE 'DM100PUP - MCDS RECORD DSECT'\nMCDSREC  DSECT\n         COPY  HSMMCDS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DM110PUP": {"ttr": 1804, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x02\\xcb\\x02\\xcb\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 715, "newlines": 715, "modlines": 0, "user": "FILE097"}, "text": "         TITLE 'DM110PUP - EXTRACT RECS FROM VTOCS'\nDM110PUP CSECT\n         REGS\n         USING DM110PUP,R15\n         B     MAINEP\n         DC    AL1(L'CSECTLIT)\nCSECTLIT DC    C'DM110PUP - RECS FROM VTOCS &SYSDATE &SYSTIME'\n*\n*   SCAN ALL PACKS POINTED TO BY DD STATEMENTS:\n*   THE DD STATEMENT OF A PACK TO BE PROCESSED MUST HAVE A DDNAME\n*   OF DISKXXXX.  XXXX CAN BE ANYTHING.  ALL DD'S OF THIS FORM WILL\n*   BE PROCESSED.\n*\n*   PARM PROCESS:\n*   IF PARM=HSM - THEN SCAN FOR ALL DATASETS WITH THE NAME *.HMIG.**\n*                 SKIP OTHER DATASETS.\n*\n*   IF PARM=NOSYS - SYS1.** ARE EXCLUDED.\n*\n*   IF NO PARM SUPPLIED SELECT ALL DATASETS.\n*\n*   OUTPUT FILE SELECTED WILL HAVE:\n*      DSN, VOLSER, ALLOCATED/USED TRKS, DSORG, BLKSIZE, LRECL,\n*      RECFM, NUMBER OF EXTENTS, CREATE DATE, AND REF DATE.\n*\n*\nMAINEP   DS    0H\n         SAVE  (14,12)\n         LR    R12,R15             ENTRY ADR TO BASE REG\n         DROP  R15\n         USING DM110PUP,R12        PGM BASE\n         LR    R2,R13\n         LA    R13,SAVEAREA        SAVEAREA AND WORKING STORAGE\n         USING SAVEAREA,R13\n         ST    R2,SAVEAREA+4       SAVE CALLERS R13\n         ST    R13,8(,R2)          BACK LINK SAVEAREA\n         BAL   R14,PARMPROC        PROCESS PARM\n         OPEN  (EXTRACTV,(OUTPUT))\n         TM    EXTRACTV+DCBOFLGS-IHADCB,DCBOFOPN  OPEN OK\n         BNO   ERROPV              NO\n         EXTRACT TIOT,FIELDS=TIOT GET ADDRESS OF TIOT\n         L     R2,TIOT        LOAD ADDRESS OF TIOT IN REG2\n         LA    R2,24(R2)      SKIP TO DD ENTRIES\n         ST    R2,NEXTDD      SAVE FIRST DD TO INITIALIZE LOOP\n         TITLE 'MAIN PROCESS'\nMAINLOOP EQU   *                   PROCESS NEXT DD\n         BAL   R14,DSKO            OPEN NEXT DISK\n         B     *+4(R15)            CHECK RETURN CODE\n         B     MAINP               00 -- OPEN OK - PROCESS IT\n         B     EXIT                04 -- EOF - DONE\nMAINP    EQU   *\n         BAL   R14,DSKP            PROCESS IT\n         BAL   R14,DSKC            CLOSE IT\n         B     MAINLOOP\n         TITLE 'PROCESS PARM'\n*\n*        PROCESS PARM=NNN FOR (HSM) OR (-NONE-)\n*\nPARMPROC EQU    *\n         ST     R14,PARMR14        SAVE RETURN ADDR\n         L      R1,0(R1)           LOAD PARM PTR\n         LH     R2,0(R1)           LOAD PARM LENGTH\n         LTR    R2,R2              ANY PARM\n         BZ     PARMEXIT           NO -- USE DEFAULT\n         CH     R2,=H'03'          CHECK FOR 'HSM' LEN\n         BE     PARMHSM            EQUAL -- DO HSM PROCESSING\n         CH     R2,=H'5'           CHECK FOR 'NOSYS' LEN\n         BE     PARMNOSY           EQUAL DO NOSYS PROCESSING\n         B      PARMEXIT           MISMATCH -- DEFAULT\nPARMNOSY EQU    *\n         CLC    =C'NOSYS',2(R1)    IS IT OK\n         BNE    PARMEXIT           NO -- DEFAULT\n         MVI    PARMSW,C'S'        SET FOR NOSYS PROCESSING\n         B      PARMEXIT           DONE\nPARMHSM  EQU    *\n         CLC    2(3,R1),=C'HSM'    IS IT OK\n         BNE    PARMEXIT           NO, RETURN\n         MVI    PARMSW,C'H'        SET FOR HSM PROCESS\nPARMEXIT EQU    *\n         L      R14,PARMR14        RESTORE RETURN ADDR\n         BR     R14                RETURN\n         TITLE 'DSKO     - OPEN NEXT DISK'\nDSKO     EQU   *\n         ST    R14,DSKOR14         SAVE RETURE ADDR\nDSKOSKIP EQU   *\n         L     R2,NEXTDD      PICK UP CURRENT DD SEG\n         SR    R3,R3          CLEAR REG3\n         IC    R3,0(R2)       DETERMINE IF END OF TIOT\n         LTR   R3,R3          END OF TIOT?\n         BZ    DSKOEOF        GO TO EOJ NORMAL\n         LA    R1,0(R2,R3)    ADDR OF NEXT TIOT\n         ST    R1,NEXTDD      SAVE\n         CLC   =C'DISK',4(R2) IS THIS A VALID DD ENTRY\n         BNE   DSKOSKIP       NO -- SKIP IT\n         MVC   DSKXDDN,4(R2)  SAVE DDNAME\n         LA    R6,DISKX       A(DCB)\n         USING IHADCB,R6      ADDRESSABILITY\n         MVC   DCBDDNAM,DSKXDDN    POST TO DCB\n         RDJFCB ((R6))\n         LTR   R15,R15        OK?\n         BNZ   ERRDSKO1       NO -- ERROR\n         DEVTYPE DSKXDDN,DEVDATA,DEVTAB    DISK INFO\n         LH    R15,DEVDTC          POST TRKS/CYL\n         MH    R15,DEVDCV          X CYLS/VOL = TRKS/VOL\n         ST    R15,CAPTRKS         POST\n         OI    JFCBTSDM,JFCNWRIT   DO NOT WRITE BACK JFCB\n         MVI   JFCBDSNM,4          READ VTOC DSN\n         MVC   JFCBDSNM+1(L'JFCBDSNM-1),JFCBDSNM   CHAIN X'04'\n         OPEN  ((R6),(INPUT)),TYPE=J\n         TM    DCBOFLGS,DCBOFOPN   OPEN OK\n         BNO   ERRDSKO2            NO\n         L     R1,DCBDEBAD         DEB ADR\n         USING DEBBASIC,R1\n         ST    R1,ADDRDEB          SAVE\n         L     R1,DEBBASND         GET UCB ADR (DEBUCBAD)\n         USING UCBOB,R1\n         ST    R1,ADDRUCB          SAVE\n         CLI   UCBTBYT3,UCB3DACC   CHECK FOR DASD\n         BNE   ERRDSKO2            NOT DASD\n         MVC   VRECVOLI,UCBVOLI    POST VOLSER\n         MVC   DEVSER,UCBVOLI      VOLSER FOR CAMLST\n         DROP  R1\n         MVI   DSCBEOF,C'N'        SET NO EOF\n         BAL   R14,SETD            SET DSCB LOGIC TO CVAF OR CAMLST\n         LA    R15,0               SET RETURN CODE\n         B     DSKOEXIT            CONTINUE\nDSKOEOF  EQU   *                   NO MORE DD'S\n         LA    R15,4               SET RETURN CODE\nDSKOEXIT EQU   *\n         L     R14,DSKOR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         DROP  R6\n         TITLE 'SETD    - SET DSCB TO CAMLST OR CVAF'\nSETD     EQU   *\n         ST    R14,SETDR14         SAVE RETURN ADDR\n         XC    DONEDSN,DONEDSN     CLEAR DONE DSN\n         L     R2,ADDRUCB          A(UCB)\n         CVAFTST UCB=(2)\n         CH    R15,=H'8'           CVAF ACTIVE\n         BE    SETDCVAF            YES\n         CVD   R15,WRK8A           NOW PACKED\n         UNPK  WRK8B,WRK8A         NOW CHAR\n         OI    WRK8B+L'WRK8B-1,X'F0' FIX SIGN\n         MVC   SETDWTOR,WRK8B+6    POST RC TO MSG\n         MVC   SETDWTOV,DEVSER     POST VOLSER TO MSG\n         LA    R1,SETDWTO          A(WTO)\n         WTO   MF=(E,(1))          EXECUTE\n         MVI   CVAFSW,C'N'         NO -- POST NOT INDEXED\n         MVC   HWACCHHR,HWAMAX     SET END OF VTOC TO INFINITY\n*                                  WILL BE RESET FROM FORMAT4\n         B     SETDEXIT            DONE\nSETDCVAF EQU   *\n         MVI   CVAFSW,C'I'         POST INDEXED\n         XC    BUFLIST(BFLHLN+BFLELN),BUFLIST CLEAR OLD BUFFER LIST\n         OI    BFLHFL,BFLHDSCB     PROCESS DSCBS\n         MVI   BFLHNOE,1           ONE BUFFER\n         LA    R15,DS1FMTID        A(DSNAME)\n         ST    R15,BFLEBUF         POST\n         MVI   BFLELTH,DS1END-DS1FMTID L'(DATA PART OF DSCB) (96)\n         LA    R0,CVPL             A(WORKING CVPL)\n         LH    R1,CVLTH            L'(WORKING CVPL)\n         LA    R14,CVPLMDL         A(MODEL CVPL)\n         LR    R15,R1              COPY LENGTH\n         MVCL  R0,R14              REFRESH WORKING CVPL\n         L     R15,ADDRDEB         A(DEB)\n         ST    R15,CVDEB           POST\n         XC    CVAFDSN,CVAFDSN     CLEAR CVAF DSN\nSETDEXIT EQU   *\n         L     R14,SETDR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n*               0123456789012345678901234567890123456789012345\nSETDWTO  WTO   'DM110PUP - CVAFTST RCNN ON VOLSER - USING BSAM',       X\n               ROUTCDE=11,DESC=7,MF=L\nSETDWTOR EQU   SETDWTO+4+21,2\nSETDWTOV EQU   SETDWTO+4+27,6\n         TITLE 'DSKP     - PROCESS THIS DISK VTOC'\nDSKP     EQU   *\n         USING IHADCB,R6           ADDRESSABILITY\n         ST    R14,DSKPR14         RESTORE RETURN ADDR\nDSKPLOOP EQU   *                   GET NEXT VTOC REC\n         BAL   R14,GETD            GET NEXT REC\n         CLI   DSCBEOF,C'E'        EOF\n         BE    DSKPX               YES -- EXIT\n         CLI   DS1FMTID,C'1'       FORMAT 1\n         BE    DSKPF1              YES\n         CLI   DS4IDFMT,C'4'       FORMAT 4\n         BE    DSKPF4              YES\n         B     DSKPLOOP            IGNORE\nDSKPF1   EQU   *                   FORMAT1\n         CLC   DS1DSNAM,DONEDSN    HAVE WE ALREADY DONE THIS ONE\n         BNH   DSKPLOOP            YES -- LOOP BACK\n         LA    R1,DS1DSNAM         A(DSNAME OF DSCB)\n         CLI   PARMSW,C'S'         PARM SW = NOSYS?\n         BE    DSKNOSYS            YES - DO NOSYS PROCESSING\n         CLI   PARMSW,C'H'         PARM SW = HSM?\n         BE    DSKHSM              YES - DO HSM PROCESSING\n         B     DSKOTHER            NORMAL -- PROCESS\nDSKNOSYS EQU   *\n         CLC   =C'SYS1',0(R1)      DON'T NEED SYS1 DATASETS\n         BE    DSKPLOOP            NO -- IGNORE\n         B     DSKOTHER            PROCESS\nDSKHSM   EQU   *\n         TRT   DS1DSNAM,DOTTABLE   FIND FIRST '.'\n         BNL   DSKPLOOP            MUST FIND '.' BEFORE THE END\n         CLC   =C'.HMIG.',0(R1)    MIGRATED DATA SET\n         BNE   DSKPLOOP            NO -- IGNORE\nDSKOTHER EQU   *\n         MVC   VRECDSN,DS1DSNAM    POST DATASET NAME\n         BAL   R14,DSORG           OBTAIN DSORG OF FILE\n         BAL   R14,BLKL            OBTAIN BLKSIZE/LRECL OF FILE\n         BAL   R14,RECFM           OBTAIN RECFM OF FILE\n         BAL   R14,DATES           OBTAIN DATES\n         BAL   R14,SIZE            COMPUTE SIZE OF FILE\n         PUT   EXTRACTV,VREC       WRITE REC\n         B     DSKPLOOP            LOOP BACK\nDSKPF4   EQU   *\n         MVC   HWACCHHR,DS4HPCHR   RESET VTOC HIGH WATER MARK\n         B     DSKPLOOP            LOOP BACK\nDSKPX    EQU   *\n         L     R14,DSKPR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         DROP  R6\n         TITLE 'GETD     - GET NEXT DSCB RECORD'\nGETD     EQU   *\n         ST    R14,GETDR14         SAVE RETURN ADDR\n         CLI   CVAFSW,C'N'         NON-INDEXED\n         BE    GETDN               YES\n         MVC   DONEDSN,CVAFDSN     POST DSN AS DONE\n         MVC   DS1DSNAM,CVAFDSN    POST DSN\n         CVAFSEQ MF=(E,CVPL)       GET NEXT\n         LTR   R15,R15             OK\n         BNZ   GETDCVE             NO -- ERROR\n         MVC   CVAFDSN,DS1DSNAM    REFRESH WITH NEW DSN\n         B     GETDEXIT            DONE\nGETDCVE  EQU   *\n         ST    R15,CVAFR15         SAVE\n         MVC   CVAFST,CVSTAT       SAVE\n         CVAFDIR ACCESS=RLSE,      RELEASE CVAF BUFFERS                X\n               BUFLIST=0,          SAVE USER BUFFER LIST               X\n               IXRCDS=NOKEEP,      RELEASE VIER BUFFERS                X\n               MF=(E,CVPL)\n         CLC   CVAFR15,=F'4'       EOF CLASS OF ERROR\n         BNE   GETDCVB             NO -- GO TO BSAM\n         CLI   CVAFST,32           EOF\n         BE    GETDEOF             YES -- PROCESS\nGETDCVB  EQU   *\n         SR    R15,R15             CLEAR\n         IC    R15,CVAFST          POST STATUS\n         CVD   R15,WRK8A           NOW PACKED\n         UNPK  WRK8B,WRK8A         NOW CHAR\n         OI    WRK8B+L'WRK8B-1,X'F0' FIX SIGN\n         MVC   GETDWTOR,WRK8B+5    POST STATUS TO MSG\n         MVC   GETDWTOV,DEVSER     POST VOLSER TO MSG\n         LA    R1,GETDWTO          A(WTO)\n         WTO   MF=(E,(1))          EXECUTE\n         MVI   CVAFSW,C'N'         POST NON-INDEXED\nGETDN    EQU   *\n         USING IHADCB,R6           ADDRESSABILITY\n         CLC   HWACCHHR,DCBFDAD+3  AT/PAST HIGH WATER MARK\n         BNH   GETDEOF             YES -- SET EOF\n         READ  DSKPR,SF,DISKX,IECSDSF1,'S'\n         CHECK DSKPR\n         DROP  R6\n         B     GETDEXIT            DONE\nGETDEOF  EQU   *\n         MVI   DSCBEOF,C'E'        POST EOF\nGETDEXIT EQU   *\n         L     R14,GETDR14         RESTORE RETURN ADDR\n         BR    R14\n*               0123456789012345678901234567890123456789012345\nGETDWTO  WTO   'DM110PUP - CVAFSTAT=NNN ON VOLSER - USING BSAM',       X\n               ROUTCDE=11,DESC=7,MF=L\nGETDWTOR EQU   GETDWTO+4+20,3\nGETDWTOV EQU   GETDWTO+4+27,6\n         TITLE 'DSKC     - CLOSE DISKX'\nDSKC     EQU   *\n         USING IHADCB,R6           ADDRESSABILITY\n         ST    R14,DSKCR14         SAVE RETURN ADDR\n         CLOSE ((R6))\n         L     R14,DSKCR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         DROP  R6\n         TITLE 'BLKL     - OBTAIN THE BLKSIZE/LRECL OF THE DATASET'\nBLKL     EQU   *\n         ST    R14,DSBLK14         SAVE RETURN ADDR\n         LH    R9,DS1BLKL          BLKSIZE FROM DSCB\n         CVD   R9,WRK8A            CONVERT TO DEC\n         MVC   WRK8B(6),=X'402020202120' POST EDIT MASK\n         ED    WRK8B(6),WRK8A+5    EDIT\n         MVC   VRECBLKL,WRK8B+1    POST\n         LH    R9,DS1LRECL         LRECL FROM DSCB\n         CVD   R9,WRK8A            CONVERT TO DEC\n         MVC   WRK8B(6),=X'402020202120' POST EDIT MASK\n         ED    WRK8B(6),WRK8A+5    EDIT\n         MVC   VRECLRCL,WRK8B+1    POST\nBLKLX    EQU   *\n         L     R14,DSBLK14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'DATES    - OBTAIN CREATE/REF DATES OF THE DATASET'\nDATES    EQU   *\n         ST    R14,DATER14         SAVE RETURN ADDR\n         SR    R15,R15             CLEAR\n         IC    R15,DS1CREDT        POST CREATE DATE YY  (BIN)\n         MH    R15,=H'1000'        ALIGN\n         SR    R14,R14             CLEAR\n         ICM   R14,B'0011',DS1CREDT+1 POST DDD (BIN)\n         AR    R15,R14             MERGE\n         CVD   R15,WRK8A           NOW PACKED\n         UNPK  VRECCDAT,WRK8A      NOW CHAR\n         OI    VRECCDAT+L'VRECCDAT-1,X'F0' FIX THE SIGN\n         SR    R15,R15             CLEAR\n         IC    R15,DS1REFD         POST CREATE DATE YY  (BIN)\n         MH    R15,=H'1000'        ALIGN\n         SR    R14,R14             CLEAR\n         ICM   R14,B'0011',DS1REFD+1 POST DDD (BIN)\n         AR    R15,R14             MERGE\n         CVD   R15,WRK8A           NOW PACKED\n         UNPK  VRECRDAT,WRK8A      NOW CHAR\n         OI    VRECRDAT+L'VRECRDAT-1,X'F0' FIX THE SIGN\n         L     R14,DATER14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'DSORG    - OBTAIN THE DSORG OF THE DATASET'\nDSORG    EQU   *\n         ST    R14,DSOGR14         SAVE RETURN ADDR\n         MVC   VRECORG,=C'  '      SET TO BLANK AT START\n         MVI   VRECORGU,C' '       SET TO BLANK AT START\n         TM    DS1DSORG,X'01'      (??U)\n         BNO   DSORGNO             NO - SKIP IT\n         MVI   VRECORGU,C'U'       ADD THE 'U' FOR UNMOVABLE\nDSORGNO  TM    DS1DSORG,X'80'      (IS)\n         BO    DSORGI              YES - ADD IT\n         TM    DS1DSORG,X'40'      (PS)\n         BO    DSORGP              YES - ADD IT\n         TM    DS1DSORG,X'20'      (DA)\n         BO    DSORGD              YES - ADD IT\n         TM    DS1DSORG,X'02'      (PO)\n         BO    DSORGO              YES - ADD IT\n         CLC   DS1DSORG+1(1),=X'08'  (VS)\n         BE    DSORGV              YES - ADD IT\n         B     DSORGX              DONE\nDSORGI   EQU   *\n         MVC   VRECORG,=C'IS'      POST\n         B     DSORGX              EXIT OK\nDSORGP   EQU   *\n         MVC   VRECORG,=C'PS'      POST\n         B     DSORGX              EXIT OK\nDSORGD   EQU   *\n         MVC   VRECORG,=C'DA'      POST\n         B     DSORGX              EXIT OK\nDSORGO   EQU   *\n         MVC   VRECORG,=C'PO'      POST\n         B     DSORGX              EXIT OK\nDSORGV   EQU   *\n         MVC   VRECORG,=C'VS'      POST\n         B     DSORGX              EXIT OK\nDSORGX   EQU   *\n         L     R14,DSOGR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'RECFM    - OBTAIN THE RECFM OF THE DATASET'\nRECFM    EQU   *\n         ST    R14,RCFMR14         SAVE RETURN ADDR\n         MVC   VRECRCFM,=C'   '    SET TO BLANK AT START\n         TM    DS1RECFM,X'C0'      (U)\n         BO    RECFMU              YES - GO POST IT\n         TM    DS1RECFM,X'80'      (F)\n         BO    RECFMF              YES - GO POST IT\n         TM    DS1RECFM,X'40'      (V)\n         BO    RECFMV              YES - GO POST IT\n         B     RECFX               NO MATCH - DONE\nRECFMU   EQU   *\n         MVC   VRECRCFM(1),=C'U'   POST\n         B     RECFX               EXIT - DONE\nRECFMF   EQU   *\n         MVC   VRECRCFM(1),=C'F'   POST\n         B     RECFMORE            EXIT - CHECK FOR MORE\nRECFMV   EQU   *\n         MVC   VRECRCFM(1),=C'V'   POST\n         B     RECFMORE            EXIT - CHECK FOR MORE\nRECFMORE EQU   *\n         TM    DS1RECFM,X'18'      (?BS)\n         BO    RECFBS              YES\n         TM    DS1RECFM,X'14'      (?BA)\n         BO    RECFBA              YES\n         TM    DS1RECFM,X'12'      (?BM)\n         BO    RECFBM              YES\n         TM    DS1RECFM,X'10'      (?B)\n         BO    RECFB               YES\n         TM    DS1RECFM,X'04'      (?A)\n         BO    RECFA               YES\n         TM    DS1RECFM,X'02'      (?M)\n         BO    RECFMM              YES\n         B     RECFX               EXIT OK\nRECFBA   EQU   *\n         MVC   VRECRCFM+1(2),=C'BA'  POST\n         B     RECFX               EXIT OK\nRECFBM   EQU   *\n         MVC   VRECRCFM+1(2),=C'BM'  POST\n         B     RECFX               EXIT OK\nRECFBS   EQU   *\n         MVC   VRECRCFM+1(2),=C'BS'  POST\n         B     RECFX               EXIT OK\nRECFB    EQU   *\n         MVC   VRECRCFM+1(1),=C'B'  POST\n         B     RECFX               EXIT OK\nRECFA    EQU   *\n         MVC   VRECRCFM+1(1),=C'A'  POST\n         B     RECFX               EXIT OK\nRECFMM   EQU   *\n         MVC   VRECRCFM+1(1),=C'M'  POST\n         B     RECFX               EXIT\nRECFX    EQU   *\n         L     R14,RCFMR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'SIZE     - CALCULATE EXTENT SIZE IN TRKS'\nSIZE     EQU   *\n*\n*        WARNING:  THIS ROUTINE MAY CAUSE A FMT3 REC TO OVERLAY\n*                  THE FMT1 SO EXECUTE THIS ROUTINE LAST\n*\n*        R2    INTERMEDIATE FILE SIZE IN TRKS\n*        R3    TRKS/CYL\n*        R4    EXTENTS IN FILE\n*        R5    A(CURRENT SET OF SEGMENTS)\n*        R6    RESERVED (DISKX DCB ADDR)\n*        R7    EXTENTS IN CURRENT SET\n*\n         ST    R14,SIZER14         SAVE RETURN ADDR\n         CLC   DS1LSTAR,=X'000000' IS SPACE USED = ZERO\n         BNE   SIZECK1             NO, CHECK FOR SOMETHING ELSE\n         MVC   USED(4),=F'00'      SPACE USED = ZERO\n         B     SIZECK3\nSIZECK1  TM    DS1DSORG,X'42'      LAST BLK POINTER ONLY FOR PO/PS\n         BM    SIZECK2             YES, GO GET SPACE USED\n         MVC   USED(4),=F'-1'      SET FOR COPY OF ALLOC TO USED\n         B     SIZECK3\nSIZECK2  LH    R2,DS1LSTAR         LAST TRACK\n         LA    R2,1(R2)            ADD ONE TO IT\n         ST    R2,USED             SAVE USED NUMBER\nSIZECK3  SR    R2,R2               CLEAR FILE SIZE IN TRKS\n         LH    R3,DEVDTC           PICK UP TRKS/CYL\n         SR    R4,R4               CLEAR\n         IC    R4,DS1NOEPV         EXTENT COUNT\n         CVD   R4,WRK8A            NOW PACKED\n         MVC   WRK8B(4),=X'40202120' POST EDIT MASK\n         ED    WRK8B(4),WRK8A+6    EDIT\n         MVC   VRECEXTN,WRK8B+1    POST\n         LA    R5,DS1EXT1          A(FIRST EXTENT SEG)\n         LA    R7,3                NO OF EXTENTS IN THIS SEG\n         BAL   R14,XTNT            PROCESS THESE EXTENTS\n         LTR   R4,R4               DONE\n         BZ    SIZEEND             YES\nSIZELOOP EQU   *\n         MVC   F3CCHHR,DS1PTRDS    POST FMT3CCHHR\n         CLC   F3CCHHR,=X'0000000000' VALID\n         BE    ERRCCHHR            NO\n         OBTAIN FMTCAML            GET FMT3\n         LTR   R15,R15             OK\n         BNE   ERRFMT3O            NO\n         CLI   DS3FMTID,C'2'       ISAM FMT 2\n         BE    SIZELOOP            YES -- CHAIN TO FMT3\n         CLI   DS3FMTID,C'3'       FMT3\n         BNE   ERRFMT3T            NO\n         LA    R5,DS3EXTNT         A(NEXT SET OF EXTENT SEGS)\n         LA    R7,4                NUMBER OF EXTENTS IN THIS SEG\n         BAL   R14,XTNT            PROCESS THESE EXTENTS\n         LTR   R4,R4               DONE\n         BZ    SIZEEND             YES\n         LA    R5,DS3ADEXT         A(NEXT SET OF EXTENT SEGS)\n         LA    R7,9                NUMBER OF EXTENTS IN THIS SEG\n         BAL   R14,XTNT            PROCESS THESE EXTENTS\n         LTR   R4,R4               DONE\n         BZ    SIZEEND             YES\n         B     SIZELOOP            LOOP BACK (CCHHR IN SAME PLACE)\nSIZEEND  EQU   *\n         C     R2,CAPTRKS          SOMETHING SCREWY\n         BH    ERRCAPTR            YES -- ERROR\n         CVD   R2,WRK8             NOW PACKED\n         MVC   WRK8B(6),=X'402020202120' POST EDIT MASK\n         ED    WRK8B(6),WRK8+5     EDIT\n         MVC   VRECALLC,WRK8B+1    POST\n         CLC   =F'-1',USED         WAS IT SET FOR COPY\n         BNE   SIZEUSED            NO, LEAVE VALUE ALONE\n         MVC   VRECUSED,VRECALLC   SET TO ALLOCATED SPACE VALUE\n         B     SIZEDONE            AL DONE HERE - BRANCH BACK\nSIZEUSED L     R2,USED             STORE INTO REGISTER - TRKS USED\n         CVD   R2,WRK8             NOW PACKED\n         MVC   WRK8B(6),=X'402020202120' POST EDIT MASK\n         ED    WRK8B(6),WRK8+5     EDIT\n         MVC   VRECUSED,WRK8B+1    POST\nSIZEDONE L     R14,SIZER14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'XTNT     - PROCESS A SET OF EXTENTS'\nXTNT     EQU   *\n         ST    R14,XTNTR14         SAVE RETURN ADDR\n         LTR   R4,R4               NO EXTENTS\n         BZ    XTNTEXIT            YES -- DONE\n         SR    R14,R14             CLEAR\nXTNTLOOP EQU   *\n         LH    R15,6(R5)           HI CC\n         MR    R14,R3              X TRK/CYL = TRKS\n         AR    R2,R15              ADD TO FILE SIZE\n         AH    R2,8(R5)            + HI HH\n         LH    R15,2(R5)           LO CC\n         MR    R14,R3              X TRK/CYL = TRKS\n         SR    R2,R15              SUBTRACT FROM FILE SIZE\n         SH    R2,4(R5)            - LO HH\n         LA    R2,1(R2)            +1 = NEW FILE SIZE\n         BCT   R4,XTNTCKSG         DEC EXTENTS IN FILE COUNT\n         B     XTNTEXIT            0 = DONE\nXTNTCKSG EQU   *\n         LA    R5,10(R5)           SET TO NEXT CCHH\n         BCT   R7,XTNTLOOP         DEC EXTENTS IN SEG\nXTNTEXIT EQU   *\n         L     R14,XTNTR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'ERROR MESSAGES'\nERRCVAF  EQU   *\n         ST    R15,CVAFR15         SAVE\n         WTO   'DM110PUP - CVAF ERROR PROCESSING DSCBS',               *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPV   EQU   *\n         WTO   'DM110PUP - OPEN FAILED FOR EXTRACTV',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRDSKO1 EQU   *\n         MVC   ERRDSK1M,DSKXDDN   POST CURRENT DISKX DDNAME\nERRDSK1W WTO   'DM110PUP - DISKXX   RDJFCB FAILED',                    *\n               ROUTCDE=11,DESC=7\nERRDSK1M EQU   ERRDSK1W+23,8       DDNAME SLOT\n         B     ABEND\nERRDSKO2 EQU   *\n         MVC   ERRDSK2M,DSKXDDN   POST CURRENT DISKX DDNAME\nERRDSK2W WTO   'DM110PUP - DISKXX   OPEN FAILED/NOT DASD ',            *\n               ROUTCDE=11,DESC=7\nERRDSK2M EQU   ERRDSK2W+23,8       DDNAME SLOT\n         B     ABEND\nERRCCHHR WTO   'DM110PUP - CCHHR POINTER BAD FOR SECONDARIES',         *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRCAPTR WTO   'DM110PUP - VTOC ERROR - FILE BIGGER THAN VOLUME',      *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRFMT3O WTO   'DM110PUP - OBTAIN FOR FORMAT3 DSCB FAILED',            *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRFMT3T WTO   'DM110PUP - DSCB OBTAINED NOT FORMAT3',                 *\n               ROUTCDE=11,DESC=7\n         B     ABEND\n         TITLE 'EXIT/ABEND'\nABEND    EQU   *\n         ABEND 1000,DUMP\nEXIT     EQU   *\n         CLOSE (EXTRACTV)\n         L     R13,4(R13)\n         RETURN (14,12),RC=0\n         LTORG\n         TITLE 'DATA AREAS - MISCELLANEOUS'\n*\n*        DOUBLEWORDS\n*\nSAVEAREA DS    9D                  REG SAVE AREA\nWRK8A    DC    D'0'                WORK AREA\nWRK8B    DC    D'0'                WORK AREA\nWRK8     EQU   WRK8A,8\n*\n*        FULLWORDS\n*\nDATER14  DS    F                   R14 SAVE AREA FOR DATES\nDSKCR14  DS    F                   R14 SAVE AREA FOR DSKC\nDSKOR14  DS    F                   R14 SAVE AREA FOR DSKO\nDSKPR14  DS    F                   R14 SAVE AREA FOR DSKP\nDSOGR14  DS    F                   R14 SAVE AREA FOR DSORG\nDSBLK14  DS    F                   R14 SAVE AREA FOR BLKL\nGETDR14  DS    F                   R14 SAVE AREA FOR GETD\nPARMR14  DS    F                   R14 SAVE AREA FOR PARM\nRCFMR14  DS    F                   R14 SAVE AREA FOR RECFM\nSETDR14  DS    F                   R14 SAVE AREA FOR SETD\nSIZER14  DS    F                   R14 SAVE AREA FOR SIZE\nXTNTR14  DS    F                   R14 SAVE AREA FOR XTNT\nCAPTRKS  DS    F                   PACK CAPACITY IN TRKS\nUSED     DC    F'0'                NUMBER OF USED TRKS\nTIOT     DS    F                   A(TIOT)\nNEXTDD   DS    F                   A(NEXT DD SLOT INTIOT)\nADDRUCB  DS    F                   A(UCB) FOR DISKX\nADDRDEB  DS    F                   A(DEB) FOR DISKX\nCVAFR15  DS    F                   R15 SAVE AREA FOR RC FROM CVAF\n*\n*        HEX AND CHAR DATA\n*\nF3CCHHR  DS    XL5                 CCHHR FOR NEXT FORMAT3 DSCB\nHWACCHHR DS    XL5                 END OF VTOC CCHHR\nHWAMAX   DC    XL5'FFFFFFFFFF'     INFINITY\nDSKXDDN  DC    C'DISK00  '\nDISKNO   DC    PL2'0'              CURRENT DISK DD\nCVAFST   DS    X                   SAVE AREA FOR CVAF STATUS\nCVAFSW   DS    C                   INDEXED/NON SW FOR DISKX VTOC\n*              C'I'                INDEXED\n*              C'N'                NON-INDEXED\nDSCBEOF  DS    C                   EOF INDICATOR FOR DISKX VTOC\n*              C'N'                NOT EOF'\n*              C'E'                EOF\nPARMSW   DC    C' '                PARM SWITCH\n*              C' '                NORMAL PROCESSING\n*              C'S'                NOSYS - SKIP SYS1.** FILES\n*              C'H'                HSM   - KEEP *.HMIG.** FILES\n*\nCVAFDSN  DS    CL44                DSN SAVE AREA FOR CVAF LOGIC\nDONEDSN  DS    CL44                DSN SAVE AREA FOR BSAM LOGIC\n*\nVREC     DS    0CL89               ACTUAL PRINT LINE\nVRECDSN  DS    CL44\nVRECVOLI DS    CL6\nVRECALLC DS    CL5\nVRECUSED DS    CL5\nVRECORG  DS    CL2\nVRECORGU DS    CL1\nVRECBLKL DS    CL5\nVRECLRCL DS    CL5\nVRECRCFM DS    CL3\nVRECEXTN DS    CL3\nVRECCDAT DS    CL5\nVRECRDAT DS    CL5\n         DS    0D\n*\nDOTTABLE DS    0CL256\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         DC    X'00000000000000000000000000000000'  0\n         DC    X'00000000000000000000000000000000'  1\n         DC    X'00000000000000000000000000000000'  2\n         DC    X'00000000000000000000000000000000'  3\n         DC    X'00000000000000000000004B00000000'  4\n         DC    X'00000000000000000000000000000000'  5\n         DC    X'00000000000000000000000000000000'  6\n         DC    X'00000000000000000000000000000000'  7\n         DC    X'00000000000000000000000000000000'  8\n         DC    X'00000000000000000000000000000000'  9\n         DC    X'00000000000000000000000000000000'  A\n         DC    X'00000000000000000000000000000000'  B\n         DC    X'00000000000000000000000000000000'  C\n         DC    X'00000000000000000000000000000000'  D\n         DC    X'00000000000000000000000000000000'  E\n         DC    X'00000000000000000000000000000000'  F\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n*\n         TITLE 'DATA AREAS - EXIT LISTS AND PARAMETER LISTS'\nJFCBEXIT DS    0F\n         DC    X'87'               FLAG END OF LIST + JFCB\n         DC    AL3(INFMJFCB)       A(MODIFIED JFCB)\n*\nFMTCAML  CAMLST SEEK,F3CCHHR,DEVSER,IECSDSL1   OBTAIN NEXT FMT3\n*\nDEVSER   DC    CL6' '              VOLSER\nDEVDATA  DS    0F                  DEVTYPE MACRO WORK AREA\n         DS    F                   UCBTYPE\n         DS    F                   BLKSIZE\nDEVDCV   DS    H                   CYLS/VOL\nDEVDTC   DS    H                   TRKS/CYL\n         DS    H                   TRK LENGTH\n         DS    XL2                 OVERHEAD INFO\n         DS    X                   OVERHEAD INFO\n         DS    X                   SWITCHES\n         DS    XL2                 TOLERENCE INFO\n*\nBUFLIST  ICVAFBFL DSECT=NO\n*\nCVPL     CVAFSEQ ACCESS=GT,                                            X\n               IXRCDS=KEEP,                                            X\n               DSN=DS1DSNAM,                                           X\n               BUFLIST=BUFLIST,                                        X\n               MF=L\n         ORG   CVPL\nICVAFPL  ICVAFPL DSECT=NO\nCVPLMDL  CVAFSEQ ACCESS=GT,                                            X\n               IXRCDS=KEEP,                                            X\n               DSN=DS1DSNAM,                                           X\n               BUFLIST=BUFLIST,                                        X\n               MF=L\n         TITLE 'DATA AREAS - JFCB WORK AREA'\n         DS    0D\n         IEFJFCBN\n         TITLE 'DATA AREAS - VTOC DSCBS'\n         IECSDSL1 (1)              FORMAT 1 DSCB\n         EJECT\n         ORG   IECSDSL1            OVERLAY FMT1\n         IECSDSL1 (3)              FORMAT 3 DSCB\n         EJECT\n         ORG   DS1FMTID            OVERLAY FMT1 (KEY NOT INCLUDED)\n         IECSDSL1 (4)              FORMAT 4 DSCB\n         ORG\n         TITLE 'WORK AREAS - DCBS'\n         PRINT NOGEN\nDISKX    DCB   BLKSIZE=96,                                             X\n               DDNAME=DISK00,                                          X\n               DSORG=PS,                                               X\n               EODAD=DSKPX,                                            X\n               EXLST=JFCBEXIT,                                         X\n               KEYLEN=44,                                              X\n               LRECL=96,                                               X\n               MACRF=(R),                                              X\n               OPTCD=Z,                                                X\n               RECFM=F\nEXTRACTV DCB   DDNAME=EXTRACTV,                                        X\n               DSORG=PS,                                               X\n               LRECL=89,                                               X\n               MACRF=PM,                                               X\n               RECFM=FB\n         TITLE 'DSECTS'\n         IEZDEB\n*\nUCB      DSECT\n         IEFUCBOB\n*\n         DCBD  DEVD=(DA),DSORG=(PS)\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DM120PUP": {"ttr": 2307, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x01%\\x01%\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 293, "newlines": 293, "modlines": 0, "user": "FILE097"}, "text": "         TITLE 'DM120PUP - MATCH A RECS TO VTOC'\nDM120PUP CSECT\n*\n         REGS\n*\n*   PROCESS EXTRACTED A RECS AGAINST SORTED VTOC LIST\n*   REPORT ALL EXTRA VTOC RECS\n*   MERGE VOL SER INTO A REC AND WRITE REC OUT\n*\n*\n         USING DM120PUP,R15\n         B     MAINEP\n         DC    AL1(L'CSECTLIT)\nCSECTLIT DC    C'DM120PUP - MATCH A RECS TO VTOC &SYSDATE &SYSTIME'\n         EJECT\nMAINEP   DS    0H\n         SAVE  (14,12)\n         LR    R12,R15        ENTRY ADR TO BASE REG\n         DROP  R15\n         USING DM120PUP,R12   PGM BASE\n         LR    R2,R13\n         LA    R13,SAVEAREA   SAVEAREA AND WORKING STORAGE\n         USING SAVEAREA,R13\n         ST    R2,SAVEAREA+4  SAVE CALLERS R13\n         ST    R13,8(,R2)     BACK LINK SAVEAREA\n         USING IHADCB,R6      ADDRESSABILITY\n         LA    R6,SORTVDSN    A(DCB)\n         OPEN  ((R6))\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPV         NO\n         LA    R6,EXTRACTA    A(DCB)\n         OPEN  ((R6))\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPA         NO\n         LA    R6,MERGEA      A(DCB)\n         OPEN  ((R6),OUTPUT)\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPM         NO\n         LA    R6,SYSPRINT    A(DCB)\n         OPEN  ((R6),OUTPUT)\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPP         NO\n         DROP  R6\n         BAL   R14,CHKA       READ FIRST REC\n         CLI   SWA,C'E'       AT EOF\n         BE    ERRAMT         EMPTY FILE -- ERROR\n         BAL   R14,CHKV       READ FIRST REC\n         CLI   SWV,C'E'       AT EOF\n         BE    ERRVMT         EMPTY FILE -- ERROR\nMAINLOOP EQU   *              PROCESS NEXT REC\n         BAL   R14,CHKA       READ FILE IF NECESSARY\n         BAL   R14,CHKV       READ FILE IF NECESSARY\n         CLI   SWA,C'E'       EOF ON A FILE\n         BE    MTA            YES -- EMPTY\n         CLI   SWV,C'E'       EOF ON V FILE\n         BE    MTV            YES -- EMPTY\n         CLC   ARECDSNA,VRECDSN CHECK\n         BE    HIT            MATCH -- OK\n         BL    XTRAA          EXTRA A REC\n         B     XTRAV          EXTRA V REC\nHIT      EQU   *\n         MVC   MRECDSND,ARECDSND POST\n         MVC   MRECVOL,VRECVOL   POST\n         MVC   MRECALOC,VRECALOC POST\n         MVC   MRECUSED,VRECUSED POST\n         MVC   MRECDSO,VRECDSO   POST\n         MVC   MRECBSIZ,VRECBSIZ POST\n         MVC   MRECRECL,VRECRECL POST\n         MVC   MRECRFM,VRECRFM   POST\n         MVC   MRECXTNT,VRECXTNT POST\n         MVC   MRECCDAT,VRECCDAT POST\n         MVC   MRECRDAT,VRECRDAT POST\n         MVC   MRECDSNA,ARECDSNA POST\n         PUT   MERGEA,MREC       WRITE THE MERGED REC\n         MVI   SWA,C'N'          POST NO REC IN A FILE\n         MVI   SWV,C'N'          POST NO REC IN V FILE\n         B     MAINLOOP          LOOP BACK\nMTA      EQU   *\n         CLI   SWV,C'E'          EOF HERE TOO\n         BE    EXIT              YES -- DONE\n         B     XTRAV             MUST BE EXTRA V REC\nMTV      EQU   *                 MUST BE EXTRA A\nXTRAA    EQU   *                 EXTRA A REC\n         MVC   MRECDSND,ARECDSND POST\n         MVC   MRECVOL,SPACES    NO VOL SER\n         MVC   MRECALOC,SPACES   NO ALLOC\n         MVC   MRECUSED,SPACES   NO USED\n         MVC   MRECDSO,SPACES    NO DSORG\n         MVC   MRECBSIZ,SPACES   NO BLOCK SIZE\n         MVC   MRECRECL,SPACES   NO LRECL\n         MVC   MRECRFM,SPACES    NO REC FMT\n         MVC   MRECXTNT,SPACES   NO EXTENT COUNT\n         MVC   MRECCDAT,SPACES   NO CREATE DATE\n         MVC   MRECRDAT,SPACES   NO REF DATE\n         MVC   MRECDSNA,ARECDSNA POST\n         PUT   MERGEA,MREC       WRITE THE MERGED REC\n         MVI   SWA,C'N'          POST NO REC IN A FILE\n         B     MAINLOOP          LOOP BACK\nXTRAV    EQU   *                 EXTRA V REC\n         MVC   PRECDSNA,VRECDSN  POST\n         MVC   PRECVOL,VRECVOL   POST VOL SER\n         BAL   R14,PRTL          PRINT A LINE\n         MVI   SWV,C'N'          POST NO REC IN A FILE\n         B     MAINLOOP          LOOP BACK\n         TITLE 'DM120PUP - CHKA - DO WE NEED TO READ AREC'\nCHKA     EQU   *\n         ST    R14,CHKAR14       SAVE RETURN ADDR\n         CLI   SWA,C'N'          NO REC IN BUF\n         BNE   CHKAX             NO -- EXIT\n         MVI   SWA,C'Y'          SET REC IN BUF\n         GET   EXTRACTA,AREC     GET NEXT REC\n*\n*        NOTE:  EOF ROUTINE MAY RESET SWA TO 'E'\n*\nCHKAX    EQU   *\n         L     R14,CHKAR14       RESTORE RETURN ADDR\n         BR    R14               RETURN\nCHKAEOF  EQU   *                 EOF ROUTINE\n         MVI   SWA,C'E'          SET EOF SW\n         BR    R14               RETURN TO GET ROUTINE\n         TITLE 'DM120PUP - CHKV - DO WE NEED TO READ VREC'\nCHKV     EQU   *\n         ST    R14,CHKVR14       SAVE RETURN ADDR\n         CLI   SWV,C'N'          NO REC IN BUF\n         BNE   CHKVX             NO -- EXIT\n         MVI   SWV,C'Y'          SET REC IN BUF\n         GET   SORTVDSN,VREC     GET NEXT REC\n*\n*        NOTE:  EOF ROUTINE MAY RESET SWV TO 'E'\n*\nCHKVX    EQU   *\n         L     R14,CHKVR14       RESTORE RETURN ADDR\n         BR    R14               RETURN\nCHKVEOF  EQU   *                 EOF ROUTINE\n         MVI   SWV,C'E'          SET EOF SW\n         BR    R14               RETURN TO GET ROUTINE\n         TITLE 'DM120PUP - PRTL - PRINT A LINE'\nPRTL     EQU   *\n         ST    R14,PRTLR14       RESTORE RETURN ADDR\n         AP    PRTLLINE,=P'1'    BUMP LINE COUNT\n         CP    PRTLLINE,PRTLMAX  PAST END OF PAGE\n         BL    PRTLP             NO -- PRINT IT\n         AP    PRTLPAGE,=P'1'    BUMP PAGE NUMBER\n         UNPK  PRTPT1P,PRTLPAGE  PAGE NUMBER TO TITLE\n         OI    PRTPT1P+L'PRTPT1P-1,X'F0' FIX SIGN\n         PUT   SYSPRINT,PRTPT1   PRINT TITLE LINE 1\n         PUT   SYSPRINT,PRTPT2   PRINT TITLE LINE 2\n         PUT   SYSPRINT,SPACES   PRINT BLANK LINE\n         ZAP   PRTLLINE,=P'4'    RESET LINE COUNT\nPRTLP    EQU   *\n         PUT   SYSPRINT,PREC     PRINT DATA LINE\n         L     R14,PRTLR14       RESTORE RETURN ADDR\n         BR    R14               RETURN\n         TITLE 'ERROR MESSAGES'\nERRAMT   EQU   *\n         WTO   'DM120PUP - EXTRACTA FILE EMPTY',                       *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRVMT   EQU   *\n         WTO   'DM120PUP - SORTVDSN FILE EMPTY',                       *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPA   EQU   *\n         WTO   'DM120PUP - OPEN FAILED FOR EXTRACTA',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPV   EQU   *\n         WTO   'DM120PUP - OPEN FAILED FOR SORTVDSN',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPM   EQU   *\n         WTO   'DM120PUP - OPEN FAILED FOR MERGEA',                    *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPP   EQU   *\n         WTO   'DM120PUP - OPEN FAILED FOR SYSPRINT',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\n         TITLE 'EXIT/ABEND'\nABEND    EQU   *\n         ABEND 1000,DUMP\nEXIT     EQU   *\n         CLOSE (EXTRACTA)\n         CLOSE (SORTVDSN)\n         CLOSE (MERGEA)\n         CLOSE (SYSPRINT)\n         L     R13,4(R13)\n         RETURN (14,12),RC=0\n         LTORG\n         TITLE 'DATA AREAS - MISCELLANEOUS'\nSAVEAREA DS    9D                  REG SAVE AREA\nCHKAR14  DS    F                   R14 SAVE AREA FOR CHKA\nCHKVR14  DS    F                   R14 SAVE AREA FOR CHKV\nPRTLR14  DS    F                   R14 SAVE AREA FOR PRTL\nSWA      DC    C'N'                FILE A STATUS SW\n*              C'N'                NO REC IN BUF\n*              C'Y'                REC IN BUF\n*              C'E'                FILE AT EOF\nSWV      DC    C'N'                FILE V STATUS SW\n*              C'N'                NO REC IN BUF\n*              C'Y'                REC IN BUF\n*              C'E'                FILE AT EOF\nPRTLLINE DC    PL2'56'             CURRENT LINE NUMBER\nPRTLMAX  DC    PL2'56'             LINES PER PAGE\nPRTLPAGE DC    PL2'0'              CURRENT PAGE NUMBER\n*\nVREC     DS    0CL89               V RECORD  (VTOC INFO)\nVRECDSN  DS    CL44\nVRECVOL  DS    CL6\nVRECALOC DS    CL5\nVRECUSED DS    CL5\nVRECDSO  DS    CL3\nVRECBSIZ DS    CL5\nVRECRECL DS    CL5\nVRECRFM  DS    CL3\nVRECXTNT DS    CL3\nVRECCDAT DS    CL5\nVRECRDAT DS    CL5\n*\nAREC     DS    0CL88               A RECORD  (MCDS A REC INFO)\nARECDSND DS    CL44\nARECDSNA DS    CL44\n*\nMREC     DS    0CL133              M RECORD  (MERGED OUTOUT)\nMRECDSND DS    CL44\nMRECVOL  DS    CL6\nMRECALOC DS    CL5\nMRECUSED DS    CL5\nMRECDSO  DS    CL3\nMRECBSIZ DS    CL5\nMRECRECL DS    CL5\nMRECRFM  DS    CL3\nMRECXTNT DS    CL3\nMRECCDAT DS    CL5\nMRECRDAT DS    CL5\nMRECDSNA DS    CL44\n*\nPREC     DC    CL133' '            PRINT RECORD\n         ORG   PREC\n         DS    C                   CARRIAGE CONTROL\nPRECDSNA DS    CL44\n         DS    C\nPRECVOL  DS    CL6\n         ORG   ,                   TO END OF REC\n*\nPRTPT1   DC    CL133' '            TITLE LINE 1\n         ORG   PRTPT1\n         DC    C'1 DM120-01'       CARRIAGE CONTROL\n         ORG   PRTPT1+30\n         DC    C'UNMATCHED REPORT - MIGRATED FILES WITH NO'\n         DC    C' MATCHING A RECORD'\n         ORG   PRTPT1+120\n         DC    C'PAGE '\nPRTPT1P  DS    CL3                 PAGE NUMBER\n         ORG   ,                   TO END OF REC\n*\nPRTPT2   DC    CL133' '            TITLE LINE 2\n         ORG   PRTPT2\n         DC    C'0DATA SET NAME'\n         ORG   PRTPT2+46\n         DC    C'VOL SER'\n         ORG   ,                   TO END OF REC\nSPACES   DC    CL133' '\n         TITLE 'WORK AREAS - DCBS'\n         PRINT NOGEN\nEXTRACTA DCB   DDNAME=EXTRACTA,                                        X\n               DSORG=PS,                                               X\n               EODAD=CHKAEOF,                                          X\n               LRECL=88,                                               X\n               MACRF=GM,                                               X\n               RECFM=FB\n*\nSORTVDSN DCB   DDNAME=SORTVDSN,                                        X\n               DSORG=PS,                                               X\n               EODAD=CHKVEOF,                                          X\n               LRECL=89,                                               X\n               MACRF=GM,                                               X\n               RECFM=FB\n*\nMERGEA   DCB   DDNAME=MERGEA,                                          X\n               DSORG=PS,                                               X\n               LRECL=133,                                              X\n               MACRF=PM,                                               X\n               RECFM=FB\n*\nSYSPRINT DCB   DDNAME=SYSPRINT,                                        X\n               DSORG=PS,                                               X\n               LRECL=133,                                              X\n               MACRF=PM,                                               X\n               RECFM=FBA\n*\n         DCBD  DSORG=(PS)\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DM130PRP": {"ttr": 2313, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x03[\\x03[\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 859, "newlines": 859, "modlines": 0, "user": "FILE097"}, "text": "         TITLE 'DM130PRP - MCDS/ARCHIVE AUDIT'\nDM130PRP CSECT\n*\n         REGS\n*\n*   PROCESS EXTRACTED D RECS\n*      SHOULD HAVE IF DEVICE TYPE DASD (LVL1):\n*          A)  MCDS D REC\n*          B)  MCDS A REC\n*          C)  VTOC A REC (HSM VOLUME)\n*          D)  CAT D ENTRY POINTING TO 'MIGRAT'\n*\n*      SHOULD HAVE IF DEVICE TYPE TAPE (LVL2):\n*          A)  MCDS D REC\n*          B)  MCDS A REC\n*          C)  NO VTOC A REC\n*          D)  CAT D ENTRY POINTING TO 'MIGRAT'\n*\n*        D REC   ==> REC IN EXTRACTD\n*        A REC   ==> REC IN SORTAMRG\n*        V REC   ==> VOLSER IN SORTAMRG\n*        C REC   ==> CAMLST CHECK CATALOG\n*\n*        CHECKS\n*\n*           VSNA IN D REC = VSNA IN A REC\n*           VSND IN A REC = VSND IN D REC\n*         MIGVSN IN D REC = VOL  IN A REC (MIGRAT ONLY)\n*            VSN IN   CAT = 'MIGRAT'      (MIGRAT ONLY)\n*\n         USING DM130PRP,R15\n         B     MAINEP\n         DC    AL1(L'CSECTLIT)\nCSECTLIT DC    C'DM130PRP - MCDS AUDIT AND REPORT &SYSDATE'\n         EJECT\nMAINEP   DS    0H\n         SAVE  (14,12)\n         LR    R12,R15        ENTRY ADR TO BASE REG\n         LA    R11,2048(R12)  MAKE EXTRA\n         LA    R11,2048(R11)             BASE REG\n         DROP  R15\n         USING DM130PRP,R12,R11  PGM BASES\n         LR    R2,R13\n         LA    R13,SAVEAREA   SAVEAREA AND WORKING STORAGE\n         LA    R10,2048(R13)  MAKE EXTRA\n         LA    R10,2048(R10)             BASE REG\n         USING SAVEAREA,R13,R10  ADDRESSABILITY\n         ST    R2,SAVEAREA+4  SAVE CALLERS R13\n         ST    R13,8(,R2)     BACK LINK SAVEAREA\n         USING IHADCB,R6      ADDRESSABILITY\n         LA    R6,SORTAMRG    A(DCB)\n         OPEN  ((R6))\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPA         NO\n         LA    R6,EXTRACTD    A(DCB)\n         OPEN  ((R6))\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPD         NO\n         LA    R6,RPTXTRAA    A(DCB)\n         OPEN  ((R6),OUTPUT)\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPR1        NO\n         LA    R6,RPTXTRAD    A(DCB)\n         OPEN  ((R6),OUTPUT)\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPR2        NO\n         LA    R6,RPTERROR    A(DCB)\n         OPEN  ((R6),OUTPUT)\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPR5        NO\n         LA    R6,EDTDMCDS    A(DCB)\n         OPEN  ((R6),OUTPUT)\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPEM        NO\n         LA    R6,HCMDD       A(DCB)\n         OPEN  ((R6),OUTPUT)\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPHD        NO\n         LA    R6,HCMDA       A(DCB)\n         OPEN  ((R6),OUTPUT)\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPHA        NO\n         DROP  R6\n         BAL   R14,CHKA       READ FIRST REC\n         CLI   SWA,C'E'       AT EOF\n         BE    ERRAMT         EMPTY FILE -- ERROR\n         BAL   R14,CHKD       READ FIRST REC\n         CLI   SWD,C'E'       AT EOF\n         BE    ERRDMT         EMPTY FILE -- ERROR\nMAINLOOP EQU   *              PROCESS NEXT REC\n         BAL   R14,CHKA       READ FILE IF NECESSARY\n         BAL   R14,CHKD       READ FILE IF NECESSARY\n         BAL   R14,GETK       SELECT MASTER KEY\n         BAL   R14,GOTD       SEE IF WE GOT A  D\n         BAL   R14,GOTA       SEE IF WE GOT AN A\n         CLI   SWGD,C'Y'      DID WE GET THE D\n         BE    MAIND          YES -- CONTINUE CHECKING\n         CLI   SWGA,C'Y'      DID WE GET THE A\n         BE    MAINXA         YES -- EXTRA A\nMAIND    EQU   *\n         CLI   SWGA,C'Y'      DID WE GET THE A\n         BE    MAINDA         YES -- GOT BOTH\n*                             EXTRA D\n         MVC   PRR2DSND,MKEY  POST KEY\n         MVC   PRR2DSNA,DRECDSNA  POST\n         MVC   PRR2VOLP,DRECVOLP POST\n         MVC   PRR2VOLM,DRECVOLM POST\n         BAL   R14,PR2L       PRINT A LINE\n         BAL   R14,GEND       DELETE D REC\n         B     MAINEOL        TO END OF LOOP\nMAINXA   EQU   *              EXTRA A\n         MVC   PRR1DSND,MKEY  POST KEY\n         MVC   PRR1DSNA,ARECDSNA  POST\n         MVC   PRR1VOL,ARECVOL POST\n         BAL   R14,PR1L       PRINT A LINE\n         BAL   R14,GENA       DELETE A REC\n         B     MAINEOL        TO END OF LOOP\nMAINDA   EQU   *\n         BAL   R14,EDMA       M EDIT ON A REC\n         CLI   SWMA,C'R'      REREAD\n         BE    MAINLOOP       YES -- LOOP BACK\n         BAL   R14,EDMV       M EDIT ON VTOC\n         BAL   R14,EDMC       M EDIT ON CATALOG\n         CLI   SWMA,C'Y'      A REC OK\n         BNE   MAINEOL        NO -- DONE\n         CLI   SWMV,C'Y'      VTOC OK\n         BNE   MAINEOL        NO -- DONE\n         CLI   SWMC,C'Y'      CAT OK\n         BNE   MAINEOL        NO -- DONE\n         BAL   R14,GENM       GENERATED EDITED MCDS RECORD\nMAINEOL  EQU   *\n         BAL   R14,UPDK       UPDATE FILE SWITCHES USING MASTER KEY\n         B     MAINLOOP       LOOP BACK\n         TITLE 'DM130PRP - CHKA - DO WE NEED TO READ A'\nCHKA     EQU   *\n         ST    R14,CHKAR14       SAVE RETURN ADDR\n         CLI   SWA,C'N'          NO REC IN BUF\n         BNE   CHKAX             NO -- EXIT\n         MVI   SWA,C'Y'          SET REC IN BUF\nCHKAR    EQU   *\n         GET   SORTAMRG,AREC     GET NEXT REC\n*\n*        NOTE:  EOF ROUTINE MAY RESET SW TO 'E'\n*\n         CLI   SWA,C'E'          EOF\n         BE    CHKAX             YES -- DONE\n         CLC   KEYAD,ARECDSND    SEQUENCE CHECK\n         BL    CHKAOK            IN SEQUENCE -- OK\n         BH    ERRSQA            OUT OF SEQ -- ERROR\n         CLC   KEYAA,ARECDSNA    SEQUENCE CHECK\n         BNL   ERRSQA            DUP/OUT OF SEQ -- ERROR\nCHKAOK   EQU   *\n         MVC   KEYAD,ARECDSND    POST NEW PRIMARY KEY\n         MVC   KEYAA,ARECDSNA    POST NEW ALIAS   KEY\nCHKAX    EQU   *\n         L     R14,CHKAR14       RESTORE RETURN ADDR\n         BR    R14               RETURN\nCHKAEOF  EQU   *                 EOF ROUTINE\n         MVI   SWA,C'E'          SET EOF SW\n         BR    R14               RETURN TO GET ROUTINE\n         TITLE 'DM130PRP - CHKD - DO WE NEED TO READ D'\nCHKD     EQU   *\n         ST    R14,CHKDR14       SAVE RETURN ADDR\n         CLI   SWD,C'N'          NO REC IN BUF\n         BNE   CHKDX             NO -- EXIT\n         MVI   SWD,C'Y'          SET REC IN BUF\n         GET   EXTRACTD,DREC     GET NEXT REC\n*\n*        NOTE:  EOF ROUTINE MAY RESET SW TO 'E'\n*\n         CLI   SWD,C'E'          EOF\n         BE    CHKDX             YES -- DONE\n         CLC   KEYD,DRECDSND     SEQUENCE CHECK\n         BNL   ERRSQD            OUT OF SEQ -- ERROR\n         MVC   KEYD,DRECDSND     POST NEW KEY\nCHKDX    EQU   *\n         L     R14,CHKDR14       RESTORE RETURN ADDR\n         BR    R14               RETURN\nCHKDEOF  EQU   *                 EOF ROUTINE\n         MVI   SWD,C'E'          SET EOF SW\n         BR    R14               RETURN TO GET ROUTINE\n         TITLE 'DM130PRP - GETK - SELECT MASTER KEY'\nGETK     EQU   *\n         ST    R14,GETKR14    SAVE RETURN ADDR\n         MVI   SWK,C'E'       POST 'EOF'\n         CLI   SWA,C'E'       EOF ON FIRST FILE\n         BE    GETKDCK        YES CHECK NEXT FILE\n         MVC   MKEY,ARECDSND  POST KEY\n         MVI   SWK,C'Y'       POST HIT\nGETKDCK  EQU   *\n         CLI   SWD,C'E'       EOF ON THIS FILE\n         BE    GETKEND        YES CHECK NEXT FILE\n         CLI   SWK,C'E'       NO KEY YET\n         BE    GETKDPO        YES -- FORCE POST THIS ONE\n         CLC   MKEY,DRECDSND  CHECK THIS KEY\n         BNH   GETKEND        NO GOOD -- TRY NEXT\nGETKDPO  EQU   *\n         MVC   MKEY,DRECDSND  POST KEY\n         MVI   SWK,C'Y'       POST HIT\nGETKEND  EQU   *\n         CLI   SWK,C'E'       ALL AT EOF\n         BE    EXIT           YES -- DONE\n         L     R14,GETKR14       RESTORE RETURN ADDR\n         BR    R14               RETURN\n         TITLE 'DM130PRP - UPDK - SET FILE SWS FR MAST KEY'\nUPDK     EQU   *\n         ST    R14,UPDKR14    SAVE RETURN ADDR\n         CLI   SWA,C'E'       EOF ON THIS FILE\n         BE    UPDKDCK        YES CHECK NEXT FILE\n         CLC   MKEY,ARECDSND  CHECK THIS KEY\n         BNE   UPDKDCK        NO GOOD -- TRY NEXT\n         MVI   SWA,C'N'       POST RECORD USED\nUPDKDCK  EQU   *\n         CLI   SWD,C'E'       EOF ON THIS FILE\n         BE    UPDKEND        YES CHECK NEXT FILE\n         CLC   MKEY,DRECDSND  CHECK THIS KEY\n         BNE   UPDKEND        NO GOOD -- TRY NEXT\n         MVI   SWD,C'N'       POST RECORD USED\nUPDKEND  EQU   *\n         L     R14,UPDKR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'DM130PRP - GOTD - HAVE WE GOT A D REC'\nGOTD     EQU   *\n         ST    R14,GOTDR14    SAVE RETURN ADDR\n         MVI   SWGD,C'N'      POST ERROR\n         CLI   SWD,C'E'       EOF\n         BE    GOTDX          YES - MISSING\n         CLC   MKEY,DRECDSND  MATCH\n         BNE   GOTDX          NO - MISSING\n         MVI   SWGD,C'Y'      POST OK\nGOTDX    EQU   *\n         L     R14,GOTDR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'DM130PRP - GOTA - HAVE WE GOT AN A REC'\nGOTA     EQU   *\n         ST    R14,GOTAR14    SAVE RETURN ADDR\n         MVI   SWGA,C'N'      POST ERROR\n         CLI   SWA,C'E'       EOF\n         BE    GOTAX          YES - MISSING\n         CLC   MKEY,ARECDSND  MATCH\n         BNE   GOTAX          NO - MISSING\n         MVI   SWGA,C'Y'      POST OK\nGOTAX    EQU   *\n         L     R14,GOTAR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'DM130PRP - EDMA - MIG EDIT ON A REC'\nEDMA     EQU   *\n         ST    R14,EDMAR14    SAVE RETURN ADDR\n         MVI   SWMA,C'Y'      POST OK\n         CLC   DRECDSNA,ARECDSNA MATCH\n         BE    EDMAX          YES -- EXIT\n         CLC   ARECVOL,=C'      ' NO DSN ON VOL\n         BE    EDMAEX         YES -- EXIT\n         MVC   MMA3DSND,ARECDSND  POST\n         MVC   MMA3DSNA,ARECDSNA  POST\n         MVC   MMA3VOL,ARECVOL  POST\n         MVC   REC5,MMA3      POST REC TO BUF\n         BAL   R14,PR5L       PRINT A LINE\n         MVI   SWMA,C'N'      POST ERROR\n         CLC   DRECDSNA,ARECDSNA CHECK\n         BL    EDMAX          YES -- EXIT\n         BAL   R14,GENA       DELETE A REC\n         MVI   SWMA,C'R'      POST REREAD\n         MVI   SWA,C'N'       FORCE REREAD ON A REC\n         B     EDMAX          DONE\nEDMAEX   EQU   *\n         MVC   MMA1DSND,ARECDSND  POST\n         MVC   MMA1DSNA,ARECDSNA  POST\n         MVC   REC5,MMA1      POST REC TO BUF\n         BAL   R14,PR5L       PRINT A LINE\n         MVI   SWMA,C'N'      POST ERROR\n         BAL   R14,GENA       DELETE A REC\n         CLC   DRECDSNA,ARECDSNA CHECK\n         BL    EDMAX          YES -- EXIT\n         MVI   SWMA,C'R'      POST REREAD\n         MVI   SWA,C'N'       FORCE REREAD ON A REC\nEDMAX    EQU   *\n         L     R14,EDMAR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'DM130PRP - EDMV - MIG EDIT ON VTOC'\nEDMV     EQU   *\n         ST    R14,EDMVR14    SAVE RETURN ADDR\n         MVI   SWMV,C'N'      POST ERROR\n         CLI   SWMA,C'N'      PROBLEM WITH A REC\n         BE    EDMVX          YES - FORGET IT\n         CLC   ARECVOL,=C'      ' NO VTOC DSN\n         BE    EDMVM          YES -- VOLSER MISSING\n         CLI   DRECDEV,C'D'   IS THE DEVICE DISK?\n         BNE   EDMVED         NO -- SHOWS LVL2 BUT SOMETHING ON LVL1\n         CLC   ARECVOL,DRECVOLM RIGHT VOL\n         BNE   EDMVEP         NO -- ERROR\n         MVI   SWMV,C'Y'      POST OK\n         B     EDMVX          EXIT\nEDMVEP   EQU   *              VOL SER WRONG\n         MVC   MMV1DSND,MKEY  POST KEY\n         MVC   MMV1VOLV,ARECVOL  POST\n         MVC   MMV1VOLD,DRECVOLM POST\n         MVC   REC5,MMV1      POST REC TO BUF\n         BAL   R14,PR5L       PRINT A LINE\n         B     EDMVX          EXIT\nEDMVM    EQU   *              VOL SER MISSING\n         CLI   DRECDEV,C'T'   IS THE DEVICE TAPE?\n         BNE   EDMVEM         NO -- ERROR\n         MVI   SWMV,C'Y'      POST OK\n         B     EDMVX          EXIT\nEDMVEM   EQU   *              VOL SER MISSING & NOT LVL2 TAPE\n         MVC   MMV2DSND,MKEY  POST KEY\n         MVC   MMV2VOLD,DRECVOLM POST\n         MVC   REC5,MMV2      POST REC TO BUF\n         BAL   R14,PR5L       PRINT A LINE\n         BAL   R14,GEND       DELETE D REC\n         BAL   R14,GENA       DELETE A REC\n         B     EDMVX          EXIT\nEDMVED   EQU   *              DEVICE WAS NOT DISK\n         MVC   MMV3DSND,MKEY     POST KEY\n         MVC   MMV3VOL,DRECVOLM  POST M VOL\n         MVC   MMV3DSNA,DRECDSNA POST A REC\n         MVC   REC5,MMV3      POST REC TO BUF\n         BAL   R14,PR5L       PRINT A LINE\nEDMVX    EQU   *\n         L     R14,EDMVR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'DM130PRP - EDMC - MIG EDIT ON CAT'\nEDMC     EQU   *\n         ST    R14,EDMCR14    SAVE RETURN ADDR\n         MVI   SWMC,C'N'      POST ERROR\n         CLI   SWMA,C'N'      PROBLEM WITH A REC\n         BE    EDMCX          YES - FORGET IT\n         CLI   SWMV,C'N'      PROBLEM WITH VTOC\n         BE    EDMCX          YES - FORGET IT\n         BAL   R14,CKCT       CHECK CATALOG\n         B     *+4(R15)       CHECK RETURN CODE\n         B     EDMCC          00 -     CATLGD - OK SO FAR\n         B     EDMCEN         04 - NOT CATLGD - ERROR\nEDMCC    EQU   *\n         CLC   CATSER,=C'MIGRAT' CATALOGED TO MIGRAT\n         BNE   EDMCEC         CATALOGUED WRONG\n         MVI   SWMC,C'Y'      POST OK\n         B     EDMCX          EXIT\nEDMCEN   EQU   *              NOT CATALOGED\n         MVC   MMC1DSND,MKEY  POST KEY\n         MVC   REC5,MMC1      POST REC TO BUF\n         BAL   R14,PR5L       PRINT A LINE\n         B     EDMCX          EXIT\nEDMCEC   EQU   *              CATALOGED TO WRONG VOL\n         MVC   MMC2DSND,MKEY  POST KEY\n         MVC   MMC2VOL,CATSER POST\n         MVC   REC5,MMC2      POST REC TO BUF\n         BAL   R14,PR5L       PRINT A LINE\nEDMCX    EQU   *\n         L     R14,EDMCR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'DM130PRP - CKCT - CHECK TO SEE IF CATALOGED'\nCKCT     EQU   *\n         ST    R14,CKCTR14    SAVE RETURN ADDR\n         LOCATE CATCAML       SEE IF DSN IS CATALOGED\n         LTR   R15,R15        SUCCESSFUL\n         BZ    CKCTX          YES - DONE\n         LA    R15,4          POST NOT CATLGD\nCKCTX    EQU    *\n         L     R14,CKCTR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'DM130PRP - GENA - GENERATE FIXCDS A REC'\nGENA     EQU   *\n         ST    R14,GENAR14    SAVE RETURN ADDR\n         CLC   ARECVOL,=C'      ' DS PRESENT\n         BNE   GENAX          YES  -- EXIT\n         MVC   CRDADSN,ARECDSNA POST DSN\n         PUT   HCMDA,CRDA     PUNCH CARD\nGENAX    EQU    *\n         L     R14,GENAR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'DM130PRP - GEND - GENERATE FIXCDS D REC'\nGEND     EQU   *\n         ST    R14,GENDR14    SAVE RETURN ADDR\n         MVC   CRDDDSN,MKEY   POST DSN\n         PUT   HCMDD,CRDD     PUNCH CARD\nGENDX    EQU    *\n         L     R14,GENDR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'DM130PRP - GENM - GENERATE EDTD MDCS REC'\nGENM     EQU   *\n         ST    R14,GENMR14    SAVE RETURN ADDR\n         MVC   MRECDSND,DRECDSND  POST D DSN\n         MVC   MRECALOC,ARECALOC  POST MIG DSN ALLOC\n         MVC   MRECXTNT,ARECXTNT  POST MIG DSN EXTENT CT\n         MVC   MRECDSNA,DRECDSNA  POST A DSN\n         MVC   MRECVOLP,DRECVOLP  POST PRIM VOL\n         MVC   MRECVOLM,DRECVOLM  POST MIGR VOL\n         MVC   MRECLVL,DRECLVL    POST WHICH LEVEL\n         MVC   MRECDEV,DRECDEV    POST DEVICE TYPE\n         MVC   MRECSIZE,DRECSIZE  HSM 2K BLKS USED\n         MVC   MRECRDAT,DRECRDAT  PRIMARY REF DATE\n         MVC   MRECCDAT,DRECCDAT  PRIMARY CREATE DATE\n         MVC   MRECMDAT,DRECMDAT  MIGRATE DATE\n         PUT   EDTDMCDS,MREC  WRITE REC\nGENMX    EQU    *\n         L     R14,GENMR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'DM130PRP - PR1L - PRINT A LINE - R1'\nPR1L     EQU   *\n         ST    R14,PR1LR14       SAVE RETURN ADDR\n         AP    PR1LLINE,=P'1'    BUMP LINE COUNT\n         CP    PR1LLINE,PR1LMAX  PAST END OF PAGE\n         BL    PR1LP             NO -- PRINT IT\n         AP    PR1LPAGE,=P'1'    BUMP PAGE NUMBER\n         UNPK  PR1PT1P,PR1LPAGE  PAGE NUMBER TO TITLE\n         OI    PR1PT1P+L'PR1PT1P-1,X'F0' FIX SIGN\n         PUT   RPTXTRAA,PR1PT1   PRINT TITLE LINE 1\n         PUT   RPTXTRAA,PR1PT2   PRINT TITLE LINE 2\n         PUT   RPTXTRAA,SPACES   PRINT BLANK LINE\n         ZAP   PR1LLINE,=P'4'    RESET LINE COUNT\nPR1LP    EQU   *\n         PUT   RPTXTRAA,REC1     PRINT DATA LINE\n         L     R14,PR1LR14       RESTORE RETURN ADDR\n         BR    R14               RETURN\n         TITLE 'DM130PRP - PR2L - PRINT A LINE R2'\nPR2L     EQU   *\n         ST    R14,PR2LR14       RESTORE RETURN ADDR\n         AP    PR2LLINE,=P'1'    BUMP LINE COUNT\n         CP    PR2LLINE,PR2LMAX  PAST END OF PAGE\n         BL    PR2LP             NO -- PRINT IT\n         AP    PR2LPAGE,=P'1'    BUMP PAGE NUMBER\n         UNPK  PR2PT1P,PR2LPAGE  PAGE NUMBER TO TITLE\n         OI    PR2PT1P+L'PR2PT1P-1,X'F0' FIX SIGN\n         PUT   RPTXTRAD,PR2PT1   PRINT TITLE LINE 1\n         PUT   RPTXTRAD,PR2PT2   PRINT TITLE LINE 2\n         PUT   RPTXTRAD,SPACES   PRINT BLANK LINE\n         ZAP   PR2LLINE,=P'4'    RESET LINE COUNT\nPR2LP    EQU   *\n         PUT   RPTXTRAD,REC2     PRINT DATA LINE\n         L     R14,PR2LR14       RESTORE RETURN ADDR\n         BR    R14               RETURN\n         TITLE 'DM130PRP - PR5L - PRINT A LINE R5'\nPR5L     EQU   *\n         ST    R14,PR5LR14       RESTORE RETURN ADDR\n         AP    PR5LLINE,=P'1'    BUMP LINE COUNT\n         CP    PR5LLINE,PR5LMAX  PAST END OF PAGE\n         BL    PR5LP             NO -- PRINT IT\n         AP    PR5LPAGE,=P'1'    BUMP PAGE NUMBER\n         UNPK  PR5PT1P,PR5LPAGE  PAGE NUMBER TO TITLE\n         OI    PR5PT1P+L'PR5PT1P-1,X'F0' FIX SIGN\n         PUT   RPTERROR,PR5PT1   PRINT TITLE LINE 1\n         PUT   RPTERROR,PR5PT2   PRINT TITLE LINE 2\n         PUT   RPTERROR,SPACES   PRINT BLANK LINE\n         ZAP   PR5LLINE,=P'4'    RESET LINE COUNT\nPR5LP    EQU   *\n         PUT   RPTERROR,REC5     PRINT DATA LINE\n         L     R14,PR5LR14       RESTORE RETURN ADDR\n         BR    R14               RETURN\n         TITLE 'ERROR MESSAGES'\nERRAMT   EQU   *\n         WTO   'DM130PRP - SORTAMRG FILE EMPTY',                       *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRDMT   EQU   *\n         WTO   'DM130PRP - EXTRACTD FILE EMPTY',                       *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPA   EQU   *\n         WTO   'DM130PRP - OPEN FAILED FOR SORTAMRG',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPD   EQU   *\n         WTO   'DM130PRP - OPEN FAILED FOR EXTRACTD',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPHD  EQU   *\n         WTO   'DM130PRP - OPEN FAILED FOR HCMDD ',                    *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPHA  EQU   *\n         WTO   'DM130PRP - OPEN FAILED FOR HCMDA ',                    *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPEM  EQU   *\n         WTO   'DM130PRP - OPEN FAILED FOR EDTDMCDS',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPR1  EQU   *\n         WTO   'DM130PRP - OPEN FAILED FOR RPTXTRAA',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPR2  EQU   *\n         WTO   'DM130PRP - OPEN FAILED FOR RPTXTRAD',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPR5  EQU   *\n         WTO   'DM130PRP - OPEN FAILED FOR RPTERROR',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRSQA   EQU   *\n         WTO   'DM130PRP - SORTAMRG DUP OR OUT OF SEQ REC',            *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRSQD   EQU   *\n         WTO   'DM130PRP - EXTRACTD DUP OR OUT OF SEQ REC',            *\n               ROUTCDE=11,DESC=7\n         B     ABEND\n         TITLE 'EXIT/ABEND'\nABEND    EQU   *\n         ABEND 1000,DUMP\nEXIT     EQU   *\n         CLOSE (SORTAMRG)\n         CLOSE (EXTRACTD)\n         CLOSE (RPTXTRAA)\n         CLOSE (RPTXTRAD)\n         CLOSE (RPTERROR)\n         CLOSE (EDTDMCDS)\n         CLOSE (HCMDD)\n         CLOSE (HCMDA)\n         L     R13,4(R13)\n         RETURN (14,12),RC=0\n         LTORG\n         TITLE 'DATA AREAS - MISCELLANEOUS'\nSAVEAREA DS    9D                  REG SAVE AREA\nCHKAR14  DS    F                   R14 SAVE AREA\nCHKDR14  DS    F                   R14 SAVE AREA\nCKCTR14  DS    F                   R14 SAVE AREA\nEDMAR14  DS    F                   R14 SAVE AREA\nEDMCR14  DS    F                   R14 SAVE AREA\nEDMVR14  DS    F                   R14 SAVE AREA\nGENAR14  DS    F                   R14 SAVE AREA\nGENDR14  DS    F                   R14 SAVE AREA\nGENMR14  DS    F                   R14 SAVE AREA\nGETKR14  DS    F                   R14 SAVE AREA\nGOTAR14  DS    F                   R14 SAVE AREA\nGOTDR14  DS    F                   R14 SAVE AREA\nPR1LR14  DS    F                   R14 SAVE AREA\nPR2LR14  DS    F                   R14 SAVE AREA\nPR5LR14  DS    F                   R14 SAVE AREA\nUPDKR14  DS    F                   R14 SAVE AREA\n*\nDBLWD    DS    D                   DOUBLE WORK WORK AREA\n*\nMKEY     DC    XL44'00'            MASTER KEY\n*                                  TELLS US THE KEY OF THE CURRENT REC\nKEYAA    DC    XL44'00'            SEQUENCE CHECK A KEY FOR SORTAMRG\nKEYAD    DC    XL44'00'            SEQUENCE CHECK P KEY FOR SORTAMRG\nKEYD     DC    XL44'00'            SEQUENCE CHECK KEY FOR EXTRACTD\n*\nSWA      DC    C'N'                FILE A STATUS SW ALIAS\n*              C'N'                NO REC IN BUF\n*              C'Y'                REC IN BUF\n*              C'E'                FILE AT EOF\nSWD      DC    C'N'                FILE D STATUS SW DATASET\n*              C'N'                NO REC IN BUF\n*              C'Y'                REC IN BUF\n*              C'E'                FILE AT EOF\nSWK      DC    C'N'                MASTER KEY OK\n*              C'Y'                YES -- OK\n*              C'E'                EMPTY\n*\nSWMA     DC    C'N'                MIG A EDIT OK\n*              C'Y'                YES\n*              C'N'                NO\n*\nSWMV     DC    C'N'                MIG V EDIT OK\n*              C'Y'                YES\n*              C'N'                NO\n*\nSWMC     DC    C'N'                MIG C EDIT OK\n*              C'Y'                YES\n*              C'N'                NO\n*\nSWGA     DC    C'N'                DO WE HAVE A D REC\n*              C'Y'                YES\n*              C'N'                NO\n*\nSWGD     DC    C'N'                DO WE HAVE AN A REC\n*              C'Y'                YES\n*              C'N'                NO\n*\nCATCAML  CAMLST NAME,MKEY,,CATENTY    LOCATE CATALOG NAME\n*\n*\n         DS    0D\nCATENTY  DS    CL265               CATALOG LOCATE WORKAREA\n         ORG   CATENTY\nCATVOL#  DS    H                   # CATALOGED VOLSERS\nCATDEV   DS    XL4                 VOLUME DEVICE TYPE\nCATSER   DS    CL6                 VOLSER\nCATSEQ   DS    CL2                 DS SEQ #-ZERO FOR DASD\n         ORG   ,\n         TITLE 'DM130PRP - RECORD AREAS'\nPR1LLINE DC    PL2'56'             CURRENT LINE NUMBER\nPR1LMAX  DC    PL2'56'             LINES PER PAGE\nPR1LPAGE DC    PL2'0'              CURRENT PAGE NUMBER\n*\nPR2LLINE DC    PL2'56'             CURRENT LINE NUMBER\nPR2LMAX  DC    PL2'56'             LINES PER PAGE\nPR2LPAGE DC    PL2'0'              CURRENT PAGE NUMBER\n*\nPR5LLINE DC    PL2'56'             CURRENT LINE NUMBER\nPR5LMAX  DC    PL2'56'             LINES PER PAGE\nPR5LPAGE DC    PL2'0'              CURRENT PAGE NUMBER\n*\nAREC     DS    0CL133              A RECORD\nARECDSND DS    CL44\nARECVOL  DS    CL6\nARECALOC DS    CL5                 SHAPE INFO\nARECUSED DS    CL5                 FROM MIGRATE FILE (DISK) OR\nARECDSO  DS    CL3                 SPACES            (TAPE)\nARECBSIZ DS    CL5\nARECRECL DS    CL5\nARECRFM  DS    CL3\nARECXTNT DS    CL3\nARECCDAT DS    CL5\nARECRDAT DS    CL5\nARECDSNA DS    CL44\n*\n         CNOP  2,4\nDREC     DS    0CL114              D RECORD\nDRECDSND DS    CL44\nDRECDSNA DS    CL44\nDRECVOLP DS    CL6\nDRECVOLM DS    CL6\nDRECLVL  DS    CL1\nDRECDEV  DS    CL1\nDRECSIZE DS    CL7\nDRECRDAT DS    CL5\nDRECCDAT DS    CL5\nDRECMDAT DS    CL5\n*\n         CNOP  2,4\nMREC     DS    0CL132              M RECORD\nMRECDSND DS    CL44                PRIMARY DSN\nMRECALOC DS    CL5                 MIGRAT TRACKS\nMRECXTNT DS    CL3                 MIGRAT EXTENTS\nMRECDSNA DS    CL44                MIGRAT (A REC) DSN\nMRECVOLP DS    CL6                 PRIMARY VOL SER\nMRECVOLM DS    CL6                 MIGRAT VOL SER\nMRECLVL  DS    CL1                 MIGRAT LEVEL\nMRECDEV  DS    CL1                 MIGRAT DEVICE TYPE\nMRECSIZE DS    CL7                 MIGRAT NUMBER OF 2K BLOCKS\nMRECRDAT DS    CL5                 PRIMARY REF DATE YYDDD\nMRECCDAT DS    CL5                 PRIMARY REF DATE YYDDD\nMRECMDAT DS    CL5                 PRIMARY REF DATE YYDDD\n         EJECT\nREC1     DC    CL133' '            PRINT RECORD\n         ORG   REC1\n         DS    C\nPRR1DSND DS    CL44\n         DS    C\nPRR1DSNA DS    CL44\n         DS    C\nPRR1VOL  DS    CL6\n         ORG   ,\n*\nREC2     DC    CL133' '            PRINT RECORD\n         ORG   REC2\n         DS    C\nPRR2DSND DS    CL44\n         DS    C\nPRR2DSNA DS    CL44\n         DS    C\nPRR2VOLP DS    CL6\n         DS    C\nPRR2VOLM DS    CL6\n         ORG   ,\n*\nREC5     DC    CL133' '            PRINT RECORD\n*\nCRDA     DC    CL80' '\n         ORG   CRDA\n         DC    C'FIXCDS A '\nCRDADSN  DS    CL44\n         DC    C' DELETE'\n         ORG   ,                   TO END OF REC\n*\nCRDD     DC    CL80' '\n         ORG   CRDD\n         DC    C'FIXCDS D '\nCRDDDSN  DS    CL44\n         DC    C' DELETE'\n         ORG   ,                   TO END OF REC\n         EJECT\nPR1PT1   DC    CL133' '            TITLE 1 LINE 1\n         ORG   PR1PT1\n         DC    C'1DM130-01'\n         ORG   PR1PT1+30\n         DC    C'EXTRA A RECORD REPORT'\n         ORG   PR1PT1+120\n         DC    C'PAGE '\nPR1PT1P  DS    CL3                 PAGE NUMBER\n         ORG   ,                   TO END OF REC\n*\nPR1PT2   DC    CL133' '            TITLE 1 LINE 2\n         ORG   PR1PT2\nPR1PT2P  DC    C'0PRIMARY DATA SET NAME'\n         ORG   PR1PT2P+46\nPR1PT2A  DC    C'ALIAS DATA SET NAME'\n         ORG   PR1PT2A+45\n         DC    C'VOLSER'\n         ORG   ,                   TO END OF REC\n*\nPR2PT1   DC    CL133' '            TITLE 2 LINE 1\n         ORG   PR2PT1\n         DC    C'1DM130-02'\n         ORG   PR2PT1+30\n         DC    C'EXTRA D RECORD REPORT'\n         ORG   PR2PT1+120\n         DC    C'PAGE '\nPR2PT1P  DS    CL3                 PAGE NUMBER\n         ORG   ,                   TO END OF REC\n*\nPR2PT2   DC    CL133' '            TITLE 2 LINE 2\n         ORG   PR2PT2\nPR2PT2P  DC    C'0PRIMARY DATA SET NAME'\n         ORG   PR2PT2P+46\nPR2PT2A  DC    C'ALIAS DATA SET NAME'\n         ORG   PR2PT2A+45\nPR2PT2V  DC    C'PRIVOL MIGVOL'\n         ORG   ,                   TO END OF REC\n*\n*\nPR5PT1   DC    CL133' '            TITLE 5 LINE 1\n         ORG   PR5PT1\n         DC    C'1DM130-05'\n         ORG   PR5PT1+30\n         DC    C'MISCELLANEOUS ERROR REPORT'\n         ORG   PR5PT1+120\n         DC    C'PAGE '\nPR5PT1P  DS    CL3                 PAGE NUMBER\n         ORG   ,                   TO END OF REC\n*\nPR5PT2   DC    CL133' '            TITLE 5 LINE 2\n         ORG   PR5PT2\n         DC    C'0REASON'\n         ORG   PR5PT2+21\n         DC    C'PRIMARY DSN'\n         ORG   ,                   TO END OF REC\n*\n         EJECT\nSPACES   DC    CL133' '\n*\nMMA1     DC    CL133' '\n         ORG   MMA1+1              TO START OF REC\n         DC    CL20'MIG EXTRA ALIAS     '\nMMA1DSND DS    CL44\n         DS    C\n         DC    C'ALIAS = '\nMMA1DSNA DS    CL44\n         ORG   ,                   TO END OF REC\n*\nMMA3     DC    CL133' '\n         ORG   MMA3+1              TO START OF REC\n         DC    CL20'MIG ALIAS MISMATCH  '\nMMA3DSND DS    CL44\n         DS    C\n         DC    C'ALIAS = '\nMMA3DSNA DS    CL44\n         DS    C\n         DC    C'VOL = '\nMMA3VOL  DS    CL6\n         ORG   ,                   TO END OF REC\n*\nMMV1     DC    CL133' '\n         ORG   MMV1+1              TO START OF REC\n         DC    CL20'VOL SER MISMATCH    '\nMMV1DSND DS    CL44\n         DS    C\n         DC    C'VTOC VOL = '\nMMV1VOLV DS    CL6\n         DS    C\n         DC    C'HSM VOL = '\nMMV1VOLD DS    CL6\n         ORG   ,                   TO END OF REC\nMMV2     DC    CL133' '\n         ORG   MMV2+1              TO START OF REC\n         DC    CL20'NO DSN IN VTOC      '\nMMV2DSND DS    CL44\n         DS    C\n         DC    C'HSM VOL = '\nMMV2VOLD DS    CL6\n         ORG   ,                   TO END OF REC\nMMV3     DC    CL133' '\n         ORG   MMV3+1              TO START OF REC\n         DC    CL20'LVL1 OR LVL2?       '\nMMV3DSND DS    CL44\n         DS    C\n         DC    C'A DSN= '\nMMV3DSNA DS    CL44\n         DS    C\n         DC    C'VOL = '\nMMV3VOL  DS    CL6\n         ORG   ,                   TO END OF REC\n*\nMMC1     DC    CL133' '\n         ORG   MMC1+1              TO START OF REC\n         DC    CL20'DSN NOT CATALOGED   '\nMMC1DSND DS    CL44\n         ORG   ,                   TO END OF REC\n*\nMMC2     DC    CL133' '\n         ORG   MMC2+1              TO START OF REC\n         DC    CL20'DSN CTLG NOT MIGRAT '\nMMC2DSND DS    CL44\n         DS    C\n         DC    C'VOL = '\nMMC2VOL  DS    CL6\n         ORG   ,                   TO END OF REC\n*\n         TITLE 'WORK AREAS - DCBS'\n         PUSH  PRINT\n         PRINT NOGEN\nSORTAMRG DCB   DDNAME=SORTAMRG,                                        X\n               DSORG=PS,                                               X\n               EODAD=CHKAEOF,                                          X\n               LRECL=133,                                              X\n               MACRF=GM,                                               X\n               RECFM=FB\n*\nEXTRACTD DCB   DDNAME=EXTRACTD,                                        X\n               DSORG=PS,                                               X\n               EODAD=CHKDEOF,                                          X\n               LRECL=124,                                              X\n               MACRF=GM,                                               X\n               RECFM=FB\n*\nEDTDMCDS DCB   DDNAME=EDTDMCDS,                                        X\n               DSORG=PS,                                               X\n               LRECL=132,                                              X\n               MACRF=PM,                                               X\n               RECFM=FB\n*\nHCMDA    DCB   DDNAME=HCMDA,                                           X\n               DSORG=PS,                                               X\n               LRECL=80,                                               X\n               MACRF=PM,                                               X\n               RECFM=FB\n*\nHCMDD    DCB   DDNAME=HCMDD,                                           X\n               DSORG=PS,                                               X\n               LRECL=80,                                               X\n               MACRF=PM,                                               X\n               RECFM=FB\n*\nRPTXTRAA DCB   DDNAME=RPTXTRAA,                                        X\n               DSORG=PS,                                               X\n               LRECL=133,                                              X\n               MACRF=PM,                                               X\n               RECFM=FBA\n*\nRPTXTRAD DCB   DDNAME=RPTXTRAD,                                        X\n               DSORG=PS,                                               X\n               LRECL=133,                                              X\n               MACRF=PM,                                               X\n               RECFM=FBA\n*\nRPTERROR DCB   DDNAME=RPTERROR,                                        X\n               DSORG=PS,                                               X\n               LRECL=133,                                              X\n               MACRF=PM,                                               X\n               RECFM=FBA\n*\n         DCBD  DSORG=(PS)\n         POP   PRINT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DM140PUP": {"ttr": 2817, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x02L\\x02L\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 588, "newlines": 588, "modlines": 0, "user": "FILE097"}, "text": "         TITLE 'DM140PUP - VVDS EXTRACT'\nDM140PUP CSECT\n*\n         REGS\n*\n*   SCAN THE VVDS OF SELECTED VOLUMES\n*   PROCESS ONLY 'Z' (VVR PRIMARY) AND 'Q' (VVR SECONDARY) RECORDS\n*   (Q RECORDS NOT USED IN THIS VERSION)\n*   PRODUCE A CHARACTER FIXED FORMAT EXTRACT FILE\n*\n*   REF:  LY26-3956 - MVS/EXTENDED ARCHITECTURE CATALOG\n*                     DIAGNOSIS REFERENCE\n*\n         USING DM140PUP,R15\n         B     MAINEP\n         DC    AL1(L'CSECTLIT)\nCSECTLIT DC    C'DM140PUP - VVDS EXTRACT &SYSDATE'\n         EJECT\nMAINEP   DS    0H\n         SAVE  (14,12)\n         LR    R12,R15        ENTRY ADR TO BASE REG\n         DROP  R15\n         USING DM140PUP,R12   PGM BASE\n         LR    R2,R13\n         LA    R13,SAVEAREA   SAVEAREA AND WORKING STORAGE\n         USING SAVEAREA,R13   ADDRESSABILITY\n         ST    R2,SAVEAREA+4  SAVE CALLERS R13\n         ST    R13,8(,R2)     BACK LINK SAVEAREA\n         USING IHADCB,R6      ADDRESSABILITY\n         LA    R6,EXTRACT     A(DCB)\n         OPEN  ((R6),OUTPUT)\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROEXT        NO\n         DROP  R6\n         GENCB BLK=ACB,                                                X\n               AM=VSAM,                                                X\n               DDNAME=XXXXXXXX,                                        X\n               MACRF=(ADR,SEQ)\n         ST    R1,ADDRACB     SAVE A(ACB)\n         LR    R6,R1          POST TO NEW REG\n         L     R0,BLRECL      POST REC LEN OF BUFFER\n         GETMAIN R,LV=(0)     GETMAIN A RECORD AREA\n         ST    R1,ADDRVREC    SAVE\n         LR    R7,R1          POST TO A MORE CONVENIENT REG\n         L     R8,BLRECL      POST LRECL\n         GENCB BLK=RPL,                                                X\n               ACB=(6),                                                X\n               AM=VSAM,                                                X\n               AREA=(7),                                               X\n               AREALEN=(8),                                            X\n               OPTCD=(ADR,SEQ)\n         ST    R1,ADDRRPL     SAVE A(RPL)\n         EXTRACT TIOT,FIELDS=TIOT GET ADDRESS OF TIOT\n         L     R2,TIOT        LOAD ADDRESS OF TIOT IN REG2\n         LA    R2,24(R2)      SKIP TO DD ENTRIES\n         ST    R2,NEXTDD      SAVE FIRST DD TO INITIALIZE LOOP\n         TITLE 'TIOTLOOP - SCAN TIOT'\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        SCAN TIOT FOR DDNAMES 'VVDSXXXX' WHERE X CAN BE ANYTHING     *\n*        WHEN FINDING ONE TAKE OFF SCAN FOR VVR RECORDS               *\n*        WHEN HITTING END OF TIOT GO TO END OF JOB                    *\n*                                                                     *\n***********************************************************************\n*                                                                     *\nTIOTLOOP EQU   *\n         L     R2,NEXTDD      PICK UP CURRENT DD SEG\n         SR    R3,R3          CLEAR REG3\n         IC    R3,0(R2)       DETERMINE IF END OF TIOT\n         LTR   R3,R3          END OF TIOT?\n         BZ    EXIT           GO TO EOJ NORMAL\n         LA    R1,0(R2,R3)    ADDR OF NEXT TIOT\n         ST    R1,NEXTDD      SAVE\n         CLC   =C'VVDS',4(R2) IS THIS A VALID DD ENTRY\n         BNE   TIOTLOOP       NO -- SKIP IT\n         MVC   DDNAME,4(R2)   SAVE DDNAME\n         L     R6,ADDRACB     POST A(ACB)\n         MODCB ACB=(R6),                                               X\n               DDNAME=(*,DDNAME)\n         OPEN  ((6))          OPEN FILE\n         CH    R15,=H'4'      ABOVE 'WARNING'\n         BH    ERROPV         YES -- ERROR\n         SHOWCB ACB=(6),                                               X\n               AREA=RLRECL,                                            X\n               LENGTH=L'RLRECL,                                        X\n               FIELDS=LRECL\n         L     R6,ADDRRPL     POST A(RPL)\n         CLC   RLRECL,BLRECL  CHECK BUF SIZE\n         BNH   VVDSSCAN       NO -- OK\n         L     R1,ADDRVREC    A(REC AREA)\n         L     R0,BLRECL      L'REC AREA\n         FREEMAIN R,LV=(0),A=(1)\n         L     R0,RLRECL      NEW L'REC AREA\n         ST    R0,BLRECL      POST\n         GETMAIN R,LV=(0)     GETMAIN A RECORD AREA\n         ST    R1,ADDRVREC    SAVE\n         LR    R7,R1          POST TO A MORE CONVENIENT REG\n         L     R8,BLRECL      POST TO A MORE CONVENIENT REG\n         MODCB RPL=(R6),                                               X\n               AREA=(R7),                                              X\n               AREALEN=(R8)\nVVDSSCAN EQU   *\n         MVI   SWV,C'O'       POST FILE OPEN\n         BAL   R14,SCAN       SCAN THE VVDS\n         L     R6,ADDRACB     POST A(ACB)\n         CLOSE ((R6))         CLOSE THIS FILE\n         B     TIOTLOOP       LOOP BACK\n         TITLE 'SCAN     - SCAN THE VVDS FOR VVR RECS '\nSCAN     EQU   *              PROCESS NEXT REC\n         ST    R14,SCANR14    SAVE RETURN ADDR\n         BAL   R14,GETV       GET VVCR (IGNORE)\n         CLI   SWV,C'E'       EOF?\n         BE    ERRNOCR        YES -- ERROR\n         BAL   R14,GETV       GET SELF DEFINING VVR\n         CLI   SWV,C'E'       EOF?\n         BE    ERRNOSDR       YES -- ERROR\n         L     R7,ADDRVREC    REFRESH RECORD ADDR\n         BAL   R14,SVVR       PROCESS SELF DEFINING VVR REC\nSCANLOOP EQU   *\n         BAL   R14,GETV       GET NEXT VVR REC\n         CLI   SWV,C'E'       EOF\n         BE    SCANEXIT       YES -- DONE\n         L     R7,ADDRVREC    REFRESH RECORD ADDR\n         USING DSE9,R7        ADDRESSABILITY\n         CLI   VVRTYPE,C'Z'   PRIMARY\n         BE    SCANZ          YES -- PROCESS\n         CLI   VVRTYPE,C'Q'   SECONDARY\n         BE    SCANQ          YES -- PROCESS\n         B     SCANLOOP       DROP REC -- LOOP BACK\nSCANZ    EQU   *\n         BAL   R14,PVRZ       PROCESS Z REC\n         B     SCANLOOP       LOOP BACK\nSCANQ    EQU   *\n         BAL   R14,PVRQ       PROCESS Q REC\n         B     SCANLOOP       LOOP BACK\nSCANEXIT EQU   *\n         L     R14,SCANR14    RESTORE RETURN ADDR\n         BR    R14            DONE -- EXIT\n         TITLE 'SVVR     - PROCESS SELF DEFINING VVR REC'\nSVVR     EQU   *\n         ST    R14,SVVRR14    SAVE RETURN ADDR\n         USING DSE9,R7        ADDRESSABILITY\n         CLI   VVRTYPE,C'Z'   PRIMARY\n         BNE   ERRSVVRZ       NO -- ERROR\n         TM    VVRFLAG,B'01000000' SELF DEFINING VVR\n         BZ    ERRSVVRF       NO -- ERROR\n         MVC   ERECVOL,VVRCMPNM+11 PICK UP VOLSER FROM VVR DSN\n         BAL   R14,PVRZ       PROCESS Z REC\n         L     R14,SVVRR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PVRQ     - PROCESS VVR RECORD TYPE Q'\nPVRQ     EQU   *\n         ST    R14,PVRQR14    SAVE RETURN ADDR\n         L     R14,PVRQR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PVRZ     - PROCESS VVR RECORD TYPE Z'\nPVRZ     EQU   *\n         ST    R14,PVRZR14    SAVE RETURN ADDR\n         USING DSE9,R7        ADDRESSABILITY\n         BAL   R14,PCE9       PROCESS CELL E9\n         AH    R7,VVRHDLEN    BUMP TO NEXT CELL\n         LA    R7,L'VVRLEN(R7) ALLOW FOR VVRLEN\n         USING DS21,R7        ADDRESSABILITY\n         BAL   R14,PC21       PROCESS CELL 21\n         AH    R7,VVRDSLEN    BUMP TO NEXT CELL\n         USING DS60,R7        ADDRESSABILITY\n         BAL   R14,PC60       PROCESS CELL 60\n         AH    R7,VVRAMDCN    BUMP TO NEXT CELL\n         USING DS23,R7        ADDRESSABILITY\n         BAL   R14,PC23       PROCESS CELL 23\n         DROP  R7\n         BAL   R14,PUTE       WRITE EXTRACT REC\n         L     R14,PVRZR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PC21     - PROCESS VVR CELL TYPE 21'\nPC21     EQU   *\n         ST    R14,PC21R14    SAVE RETURN ADDR\n         USING DS21,R7        ADDRESSABILITY\n         DROP  R7\n         L     R14,PC21R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PC23     - PROCESS VVR CELL TYPE 23'\nPC23     EQU   *\n         ST    R14,PC23R14    SAVE RETURN ADDR\n         USING DS23,R7        ADDRESSABILITY\n         MVC   WRKBYTTK,VVRBYTTK POST BYTES/TRACK\n         CLC   WRKBYTTK,=F'0' ZERO CHECK\n         BNZ   PC23BTOK       NON-ZERO -- OK\n         ICM   R1,B'1111',VVRBLKSZ    POST BLOCK SIZE\n         SR    R14,R14        CLEAR\n         SR    R15,R15        CLEAR\n         ICM   R15,B'0011',VVRBLKTK POST BLKS/TRK\n         MR    R14,R1         X BLKSZ = BYTES/TRK\n         ST    R15,WRKBYTTK   POST\nPC23BTOK EQU   *\n         SR    R15,R15        CLEAR\n         ICM   R15,B'0001',VVRNOEXT NUMBER OF EXTENTS\n         CVD   R15,WORKDW     NOW PACKED\n         MVC   WRKMXTNT,=X'40202120'\n         ED    WRKMXTNT,WORKDW+6\n         MVC   ERECXTNT,WRKMXTNT+1\n         MVC   WRKDSHA,VVRHARBA HIGH ALLOC RBA\n         MVC   WRKDSHU,VVRHURBA HIGH USED  RBA\n         DROP  R7\n         L     R14,PC23R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PC60     - PROCESS VVR CELL TYPE 60'\nPC60     EQU   *\n         ST    R14,PC60R14    SAVE RETURN ADDR\n         USING DS60,R7        ADDRESSABILITY\n         ICM   R15,B'1111',VVRAMCIV CONTROL INTERVAL SIZE\n         CVD   R15,WORKDW     NOW PACKED\n         MVC   WRKMCISZ,=X'402020202120'\n         ED    WRKMCISZ,WORKDW+5\n         MVC   ERECCISZ,WRKMCISZ+1\n         ICM   R15,B'1111',VVRAMLCL MAXIMUM REC SIZE\n         CVD   R15,WORKDW     NOW PACKED\n         MVC   WRKMRECL,=X'402020202120'\n         ED    WRKMRECL,WORKDW+5\n         MVC   ERECRECL,WRKMRECL+1\n         DROP  R7\n         L     R14,PC60R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PCE9     - PROCESS VVR CELL TYPE E9'\nPCE9     EQU   *\n         ST    R14,PCE9R14    SAVE RETURN ADDR\n         USING DSE9,R7        ADDRESSABILITY\n         MVC   ERECDSN,SPACES CLEAR\n         LA    R0,ERECDSN     POST 'TO' ADDR\n         SR    R1,R1          CLEAR\n         IC    R1,VVRCMPNL    POST NAME LENGTH\n         LA    R14,VVRCMPNM   POST 'FROM' ADDR\n         LR    R15,R1         POST NAME LENGTH\n         MVCL  R0,R14         MOVE NAME\n         TR    ERECDSN,TRNAME CLEAN UP PAD BYTE\n         DROP  R7\n         L     R14,PCE9R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'GETV     - GET NEXT VVDS REC'\nGETV     EQU   *\n         ST    R14,GETVR14    SAVE RETURN ADDR\n         CLI   SWV,C'O'       FILE OPEN\n         BNE   ERRGVE         NO -- ERROR\n         GET   RPL=((6))      READ NEXT REC\n         LTR   R15,R15        OK?\n         BZ    GETVX          YES -- DONE\n         ST    R15,FDBKR15    SAVE RETURN CODE\n         SHOWCB RPL=(6),                                               X\n               AREA=FDBKRPL,                                           X\n               LENGTH=L'FDBKRPL,                                       X\n               FIELDS=FDBK\n         CLC   FDBKR15,=F'8'  LOGIC ERROR\n         BNE   ERRRPL         NO -- ERROR\n         CLC   FDBKRPL,=F'4'  EOF\n         BNE   ERRRPL         NO -- ERROR\n         MVI   SWV,C'E'       SET EOF SW\nGETVX    EQU   *\n         L     R14,GETVR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PUTE     - WRITE OUT E REC'\nPUTE     EQU   *\n         ST    R14,PUTER14    SAVE RETURN ADDR\n         L     R1,WRKBYTTK    POST BYTES/TRACK\n         SR    R14,R14        CLEAR\n         L     R15,WRKDSHA    HIGH ALLOC RBA\n         DR    R14,R1         TRACKS ALLOCATED\n         LTR   R14,R14        REMAINDER\n         BZ    PUTEAOK        NO -- ALLOCATED OK\n         LA    R15,1(R15)     BUMP QUOTIENT\nPUTEAOK  EQU   *\n         CVD   R15,WORKDW     NOW PACKED\n         MVC   WRKMALOC,=X'40202020202020202120'\n         ED    WRKMALOC,WORKDW+3\n         MVC   ERECALOC,WRKMALOC+1\n         SR    R14,R14        CLEAR\n         L     R15,WRKDSHU    HIGH USED RBA\n         DR    R14,R1         TRACKS USED\n         LTR   R14,R14        REMAINDER\n         BZ    PUTEUOK        NO -- USED OK\n         LA    R15,1(R15)     BUMP QUOTIENT\nPUTEUOK  EQU   *\n         CVD   R15,WORKDW     NOW PACKED\n         MVC   WRKMUSED,=X'40202020202020202120'\n         ED    WRKMUSED,WORKDW+3\n         MVC   ERECUSED,WRKMUSED+1\n         PUT   EXTRACT,EREC   WRITE REC\n         L     R14,PUTER14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'ERROR MESSAGES'\nERRGVE   EQU   *\n         WTO   'DM140PUP - INTERNAL LOGIC ERROR AT LABEL ERRGVE',      *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRNOCR  EQU   *\n         WTO   'DM140PUP - VVCR RECORD MISSING ',                      *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRNOSDR EQU   *\n         WTO   'DM140PUP - SELF DEFINING VVR MISSING',                 *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROEXT  EQU   *\n         WTO   'DM140PUP - OPEN FAILED FOR EXTRACT FILE',              *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPV   EQU   *\n         WTO   'DM140PUP - OPEN FAILED FOR VVDS FILE',                 *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRRPL   EQU   *\n         WTO   'DM140PUP - I/O ERROR READING VVDS',                    *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRSVVRF EQU   *\n         WTO   'DM140PUP - FIRST VVR NOT SELF DEFINING',               *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRSVVRZ EQU   *\n         WTO   'DM140PUP - FIRST VVR NOT TYPE Z',                      *\n               ROUTCDE=11,DESC=7\n         B     ABEND\n         TITLE 'EXIT/ABEND'\nABEND    EQU   *\n         ABEND 1000,DUMP\nEXIT     EQU   *\n         CLOSE (EXTRACT)\n         L     R6,ADDRACB\n         CLOSE ((6))\n         L     R13,4(R13)\n         RETURN (14,12),RC=0\n         LTORG\n         TITLE 'DATA AREAS - MISCELLANEOUS'\nSAVEAREA DS    9D                  REG SAVE AREA\nWORKDW   DS    D                   WORK AREA\nGETVR14  DS    F                   R14 SAVE AREA FOR GETV\nPC21R14  DS    F                   R14 SAVE AREA FOR PC21\nPC23R14  DS    F                   R14 SAVE AREA FOR PC23\nPC60R14  DS    F                   R14 SAVE AREA FOR PC60\nPCE9R14  DS    F                   R14 SAVE AREA FOR PCE9\nPUTER14  DS    F                   R14 SAVE AREA FOR PUTE\nPVRQR14  DS    F                   R14 SAVE AREA FOR PVRQ\nPVRZR14  DS    F                   R14 SAVE AREA FOR PVRZ\nSCANR14  DS    F                   R14 SAVE AREA FOR SCAN\nSVVRR14  DS    F                   R14 SAVE AREA FOR SVVR\n*\nADDRACB  DS    F                   A(ACB) - ARCDIR\nADDRRPL  DS    F                   A(RPL) - ARCDIR\nADDRVREC DS    F                   A(REC) - ARCDIR\nFDBKRPL  DS    F                   FDBK FROM ARCDIR IF ERROR\nFDBKR15  DS    F                   R15 FROM GET ON ARCDIR IF ERROR\nRLRECL   DS    F                   LRECL OF CURRENT FILE\nBLRECL   DC    F'4096'             LRECL OF BUFFER\nTIOT     DS    F                   ADDR OF TIOT\nNEXTDD   DS    F                   ADDR OF NEXT DD SEG IN TIOT\nWRKBYTTK DS    F                   BYTES / TRK\nWRKDSHA  DS    F                   HIGH ALLOC RBA\nWRKDSHU  DS    F                   HIGH USED  RBA\n*\nSWV      DC    C'C'                FILE V STATUS SW VVDSXXXX\n*              C'C'                CLOSED\n*              C'O'                OPEN\n*              C'E'                FILE AT EOF\n*\nDDNAME   DS    CL8                 DD NAME OF NEXT VVDS TO PROCESS\nSPACES   DC    CL133' '\nWRKMALOC DS    CL10                WORK AREA FOR ALLOC   EDIT MASK\nWRKMUSED DS    CL10                WORK AREA FOR USED    EDIT MASK\nWRKMRECL DS    CL6                 WORK AREA FOR LRECL   EDIT MASK\nWRKMCISZ DS    CL6                 WORK AREA FOR CI SIZE EDIT MASK\nWRKMXTNT DS    CL4                 WORK AREA FOR EXTENT  EDIT MASK\n         TITLE 'DM140PRP - RECORD AREAS'\n*\nEREC     DS    0CL81               E RECORD\nERECDSN  DS    CL44                DATASET NAME\nERECALOC DS    CL9                 TRACKS ALLOCATED\nERECUSED DS    CL9                 TRACKS USED\nERECCISZ DS    CL5                 CI SIZE\nERECXTNT DS    CL3                 NUMBER OF EXTENTS\nERECRECL DS    CL5                 HIGH LRECL\nERECVOL  DS    CL6                 VOL SER\n         TITLE 'WORK AREAS - TRANSLATE TABLES'\nTRNAME   EQU   *\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         DC    X'40404040404040404040404040404040'    0\n         DC    X'40404040404040404040404040404040'    1\n         DC    X'40404040404040404040404040404040'    2\n         DC    X'40404040404040404040404040404040'    3\n         DC    X'40404040404040404040404B40404040'    4  PERIOD\n         DC    X'40404040404040404040405B40404040'    5  $\n         DC    X'40404040404040404040404040404040'    6\n         DC    X'40404040404040404040407B7C404040'    7  @#\n         DC    X'40404040404040404040404040404040'    8\n         DC    X'40404040404040404040404040404040'    9\n         DC    X'40404040404040404040404040404040'    A\n         DC    X'40404040404040404040404040404040'    B\n         DC    X'40C1C2C3C4C5C6C7C8C9404040404040'    C  LETTERS\n         DC    X'40D1D2D3D4D5D6D7D8D9404040404040'    D  LETTERS\n         DC    X'4040E2E3E4E5E6E7E8E9404040404040'    E  LETTERS\n         DC    X'F0F1F2F3F4F5F6F7F8F9404040404040'    F  NUMBERS\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         TITLE 'WORK AREAS - DCBS'\n         PUSH  PRINT\n         PRINT NOGEN\nEXTRACT  DCB   DDNAME=EXTRACT,                                         X\n               DSORG=PS,                                               X\n               LRECL=81,                                               X\n               MACRF=PM,                                               X\n               RECFM=FB\n*\n*\n         DCBD  DSORG=(PS)\n         POP   PRINT\n         TITLE 'WORK AREAS - DSECTS'\nDSE9     DSECT                PRIMARY HEADER CELL\n*                        ALSO SECONDARY HEADER CELL (DSD8)\nVVRLEN   DS    XL2            LENGTH OF ENTIRE VVR\nVVRHDLEN DS    XL2            LENGHT OF PRIMARY/SECONDARY HEADER CELL\nVVRTYPE  DS    X              C'Z' PRIMARY OR C'Q' SECONDARY\nVVRFLAG  DS    X              HEADER FLAG\n*              1... ....      RESERVED\n*              .1.. ....      SELF DESCRIBING VVR\n*              ..1. ....      CATALOG SELF DESCRIBING VVR\n*              ...1 ....      RESERVED\n*              .... 1...      COMPONENT TYPE 'D' DATA\n*              .... 0...      COMPONENT TYPE 'I' INDEX\n*              .... .111      RESERVED\nVVRKRQ   DS    XL4            KEY RANGE QUALIFIER\nVVRCMPNL DS    X              COMPONENT NAME LENGTH\nVVRCMPNM DS    X              1ST BYTE OF COMPONENT NAME\n*                             FOLLOWS COMPONENT NAME\nVVRKEYL  DS    X              KEY LENGTH            *** OFFSET INVALID\nVVRKEY   DS    X              KEY (CL NAME + PAD)   *** OFFSET INVALID\n*                             FOLLOWS KEY\nVVRCATNL DS    X              CATALOG NAME LENGTH   *** OFFSET INVALID\nVVRCATNM DS    X              CATALOG NAME          *** OFFSET INVALID\n*                             FOLLOWS CATALOG NAME\nVVRBSENL DS    X              ENTRY NAME LENGTH     *** OFFSET INVALID\nVVRBSENM DS    X              ENTRY NAME            *** OFFSET INVALID\n         EJECT\nDS21     DSECT                DATA SET INFORMATION CELL\nVVRDSLEN DS    XL2            DATA SET CELL LENGTH\nVVRDSTYP DS    X              X'21'\nVVRATTR1 DS    X              DATA SET ATTRIBUTES\n*              1... ....      SPEED\n*              .1.. ....      UNIQUE\n*              ..1. ....      REUSABLE\n*              ...1 ....      ERASE\n*              .... 1...      RESERVED\n*              .... .1..      INHIBIT UPDATE\n*              .... ..1.      TEMPORARY EXPORT\n*              .... ...1      TRACK OVERFLOW\nVVRATTR2 DS    X              SHARE ATTRIBUTES\n*              11.. ....      REGIONAL SHARING ATTRIBUTES\n*              ..11 ....      SYSTEM SHARING ATTRIBUTES\n*              .... 11..      RESERVED\n*              .... ..1.      INTERNAL SYSTEM DATA SET\n*              .... ...1      COMPONENT IS NOT USABLE\nVVROPIND DS    X              OPEN INIDCATOR\nVVRBUFSZ DS    XL4            BUFFER SIZE\nVVRPRISP DS    XL3            PRIMARY SPACE ALLOCATION\nVVRSECSP DS    XL3            SECONDARY SPACE ALLOCATION\nVVRSPCFG DS    X              SPACE FLAGS\n*              11.. ....      SPACE OPTIONS\n*              ..11 1111      RESERVED\nVVRDSHU  DS    XL4            DATA SET HIGH USED      RBA\nVVRDSHA  DS    XL4            DATA SET HIGH ALLOCATED RBA\nVVRLRECL DS    XL4            AVERAGE LOGICAL RECORD LENGTH\n         DS    XL2            RESERVED\nVVREXCPX DS    CL8            EXCEPTION EXIT NAME\nVVRDSHK  DS    XL4            DATA SET HIGH KEY RBA\nVVRCLSFG DS    X              CLUSTER ATTRIBUTE FLAG\n*              1111 ....      RESERVED\n*              .... 1...      TIMESTAMPS EXIST IN THIS CELL\n*              .... .1..      VERIFY IS REQUIRED\n*              .... ..1.      CLUSTER DESCRIBES SWAPSPACE\n*              .... ...1      CLUSTER DESCRIBES PAGESPACE\nVVRAIXFG DS    X              AIX ATTRIBUTE FLAG\n*              1... ....      UPGRADE AIX\n*               111 1111      RESERVED\nVVRTMSTP DS    XL8            TIMESTAMP (CAT ONLY)\nVVRALTSP DS    XL8            ALIAS TABLE TIMESTAMP\n         DS    XL24           RESERVED\n*        WARNING:  TIMESTAMPS AND RESERVED MAY BE TRUNCATED2\n*                  CHECK TIMESTAMP BIT IN VVRCLSFG\n         EJECT\nDS60     DSECT                AMSDB CELL\nVVRAMDCN DS    XL2            LENGTH OF ENTIRE AMSDB CELL\nVVRAMID  DS    X              X'60'\nVVRAMATR DS    X              ATTRIBUTES\n*              1... ....      KEY SEQUENCED\n*              0... ....      ENTRY SEQUENCED\n*              .1.. ....      WRITE CHECK\n*              ..1. ....      SEQUENCE SET WITH DATA (IMBED)\n*              ...1 ....      REPLICATE\n*              .... 1...      USE VOLUMES IN LIST ORDER\n*              .... .1..      KEY RANGE DATA SET\n*              .... ..1.      RELATIVE RECORD DATA SET\n*              .... ....      SPANNED RECORDS ALLOWED\nVVRAMLEN DS    XL2            LENGTH OF AMDSB (VVRAMDCN - 2)\nVVRAMNST DS    XL2            NUMBER OF ENTRIES IN INDEX SECTION\n         ORG   VVRAMNST\nVVRAMAKP DS    XL2            ALTERNATE KEY RKP\nVVRAMRKP DS    XL2            RELATIVE KEY POSITION\nVVRAMKLN DS    XL2            KEY LENGTH\nVVRAMPCA DS    X              % FREE CI IN CA\nVVRAMPCI DS    X              % FREE BYTES IN CI\nVVRAMCCA DS    XL2            NUMBER OF CI'S PER CA\nVVRAMFCA DS    XL2            FREE CI'S PER CA\nVVRAMFCI DS    XL4            FREE BYTES PER CI\nVVRAMCIV DS    XL4            CONTROL INTERVAL SIZE\nVVRAMLCL DS    XL4            MAXIMUM RECORD SIZE\nVVRAMHLR DS    XL4            RBA OF HIGH LEVEL INDEX RECORD\n         ORG   VVRAMHLR\nVVRAMSLT DS    XL4            RECORD SLOTS PER CI\nVVRAMSSR DS    XL4            RBA OF FIRST SEQUENCE SET RECORD\n         ORG   VVRAMSSR\nVVRAMMRR DS    XL4            MAX RELATIVE RECORD NUMBER\nVVRAMARD DS    XL4            POINTER TO FIRST ARDB\nVVRAMAT3 DS    X              ATTRIBUTES\n*              1... ....      NON-UNIQUE OR UNIQUE KEYS\n*              .1.. ....      CYL FAULT MSS OR STAGE\n*              ..1. ....      BIND OR DO NOT BIND ON MSS\n*              ...1 ....      WAIT OR DO NOT WAIT ON RELINQUISH\n*              .... 1...      LOAD MODE OR DATA SET LOADED\n*              .... .111      RESERVED\nVVRAMSNO DS    X              NUMBER OF CONCURRENT REQUESTS\nVVRAMDUI DS    XL4            IMS DRCC USAGE INDICATOR\nVVRAMBFI DS    XL2            NUMBER OF INDEX BUFFERS\n         ORG   VVRAMBFI\nVVRAMBFD DS    XL2            NUMBER OF DATA  BUFFERS\nVVRAMSTS DS    XL8            SYSTEM TIME STAMP\nVVRAMNIL DS    XL2            NUMBER OF INDEX LEVELS\nVVRAMNXT DS    XL2            NUMBER OF EXTENTS\nVVRAMNLR DS    XL4            NUMBER OF LOGICAL   RECORDS\nVVRAMDLR DS    XL4            NUMBER OF DELETED   RECORDS\nVVRAMINR DS    XL4            NUMBER OF INSERTED  RECORDS\nVVRAMUPR DS    XL4            NUMBER OF UPDATED   RECORDS\nVVRAMRTR DS    XL4            NUMBER OF RETRIEVED RECORDS\nVVRAMASP DS    XL4            BYTES OF FREE SPACE IN DATA SET\nVVRAMCIS DS    XL4            NUMBER OF CI SPLITS\nVVRAMCAS DS    XL4            NUMBER OV CA SPLITS\nVVRAMEXC DS    XL4            NUMBER OF EXCP'S\n         EJECT\nDS23     DSECT                VOLUME INFORMATION CELL\nVVRVOLLN DS    XL2            LENGTH OF VOLUME CELL\nVVRVOLTP DS    X              X'23'\nVVRVOLFG DS    X              VOLUME FLAGS\n*              1... ....      PRIME VOLUME\n*              .1.. ....      EXTENT INFO OUT OF SYNC (BY DEFRAG)\n*              ..1. ....      OVERFLOW VOLUME\n*              ...1 1111      RESERVED\nVVRNOEXT DS    X              NUMBER OF EXTENTS\nVVRHKRBA DS    XL4            HIGH KEY RBA\nVVRHURBA DS    XL4            HIGH USED RBA\nVVRHARBA DS    XL4            HIGH ALLOCATED RBA\nVVRBLKSZ DS    XL4            BLOCK SIZE\nVVRBLKTK DS    XL2            BLOCKS PER TRACK\nVVRTRKAU DS    XL2            TRACKS PER ALLOCATION UNIT\nVVRTPEXT DS    X              EXTENT TYPE FLAG\n*              1... ....      SEQUENCE SET WITH DATA\n*              .1.. ....      EXTENTS NOT PREFORMATTED\n*              ..1. ....      CONVERTED VSAM DATASET VOLUME\n*              ...1 1111      RESERVED\nVVRTKCYL DS    XL2            TRACKS PER CYLINDER\nVVRBYTTK DS    XL4            BYTES PER TRACK\nVVRBYTAU DS    XL4            BYTES PER ALLOCATION UNIT\nVVRLOKYL DS    XL2            LOW KEY LENGTH\nVVRLOKYV DS    X              LOW KEY\n*                             FOLLOWS LOW KEY\nVVRHIKYL DS    XL2            HIGH KEY LENGTH       *** OFFSET INVALID\nVVRHYKYV DS    X              HIGH KEY              *** OFFSET INVALID\n*                             FOLLOWS HIGH KEY\nVVRXTNTL DS    XL2            LENGTH OF EXTENT SECT *** OFFSET INVALID\n*                             VVRXTNTL/20 = NUMBER OF EXTENT ENTRIES\n*                             EXTENT ENTRIES IMMEDIATELY FOLLOW\n*                             THEY ARE MAPPED BY THE VVRX DSECT\n         EJECT\nVVRX     DSECT                EXTENT ENTRY\nVVRXSEQN DS    XL2            SEQUENCE NUMBER\nVVRXSC   DS    XL2            STARTING CC\nVVRXSH   DS    XL2            STARTING HH\nVVRXEC   DS    XL2            ENDING   CC\nVVRXEH   DS    XL2            ENDING HH\nVVRXNTRK DS    XL2            NUMBER OF TRACKS\nVVRXSRBA DS    XL4            STARTING RBA\nVVRXERBA DS    XL4            ENDING   RBA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DM150PUP": {"ttr": 3073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x01\\xee\\x01\\xee\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 494, "newlines": 494, "modlines": 0, "user": "FILE097"}, "text": "         TITLE 'DM150PUP - EXTRACT RECS FROM VTOCS'\nDM150PUP CSECT\n         REGS\n         USING DM150PUP,R15\n         B     MAINEP\n         DC    AL1(L'CSECTLIT)\nCSECTLIT DC    C'DM150PUP - MERGE VVDS AND VTOC DATA &SYSDATE'\n*\n*   MERGE SORTED VVDS EXTRACT FILE WITH SORTED VTOC FILE\n*   FILES MUST BE SORTED BY VOLSER WITHIN DATASET NAME\n*\n*   ON MATCH:\n*             (VVDS ALLOCATED NOT COPIED)\n*              VVDS USED      WILL REPLACE VTOC USED\n*              VVDS CI SIZE   WILL REPLACE VTOC BLOCK SIZE\n*              VVDS MAX LRECL WILL REPLACE VTOC LRECL\n*              VVDS EXTENT CT WILL REPLACE VTOC EXTENT CT\n*              'VB'                REPLACE VTOC RECFM\n*\n*              AN UPDATED VTOC RECORD WILL THEN BE WRITTEN\n*\n*   ON EXTRA VTOC:\n*\n*              AN UNCHANGED VTOC RECORD WILL THEN BE WRITTEN\n*              IF NOT VSAM THEN A LINE WILL BE WRITTEN TO\n*                               THE ERROR REPORT\n*\n*   ON EXTRA VVDS:\n*\n*              A LINE WILL BE WRITTEN TO THE ERROR REPORT\n*\n         EJECT\nMAINEP   DS    0H\n         SAVE  (14,12)\n         LR    R12,R15        ENTRY ADR TO BASE REG\n         DROP  R15\n         USING DM150PUP,R12   PGM BASE\n         LR    R2,R13\n         LA    R13,SAVEAREA   SAVEAREA AND WORKING STORAGE\n         USING SAVEAREA,R13\n         ST    R2,SAVEAREA+4  SAVE CALLERS R13\n         ST    R13,8(,R2)     BACK LINK SAVEAREA\n         USING IHADCB,R6      ADDRESSABILITY\n         LA    R6,SORTVDSN    A(DCB)\n         OPEN  ((R6))\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPSD        NO -- ERROR\n         LA    R6,SORTVVVR    A(DCB)\n         OPEN  ((R6))\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPSV        NO -- ERROR\n         LA    R6,MERGVDSN    A(DCB)\n         OPEN  ((R6),(OUTPUT))\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPMV        NO -- ERROR\n         LA    R6,SYSPRINT    A(DCB)\n         OPEN  ((R6),(OUTPUT))\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPPR        NO -- ERROR\n         DROP  R6\n         BAL   R14,GETD       PRIME D REC\n         CLI   SWD,C'E'       EOF\n         BE    ERRMTSD        YES -- ERROR\n         BAL   R14,GETV       PRIME V REC\n         CLI   SWV,C'E'       EOF\n         BE    ERRMTSV        YES -- ERROR\n         TITLE 'MAIN PROCESS'\nMAINLOOP EQU   *              PROCESS NEXT REC\n         BAL   R14,GKEY       CALCULATE KEY\n         B     *+4(R15)       CHECK RETURN CODE\n         B     MAINKOK        00 -- KEY FOUND - PROCESS IT\n         B     EXIT           04 -- EOF - DONE\nMAINKOK  EQU   *\n         CLI   SWD,C'E'       CHECK FOR D MATCH\n         BE    MAINXV         NO D -- EXTRA V\n         CLC   DRECDSN,KEYDSN\n         BNE   MAINXV\n         CLC   DRECVOL,KEYVOL\n         BNE   MAINXV\n         CLI   SWV,C'E'       CHECK FOR V MATCH\n         BE    MAINXD         NO V -- EXTRA D\n         CLC   VRECDSN,KEYDSN\n         BNE   MAINXD\n         CLC   VRECVOL,KEYVOL\n         BNE   MAINXD\n*\n*                             MATCH\n*\n         MVC   MREC,DREC      COPY ENTIRE RECORD\n         MVC   MRECUSED,VRECUSED UPDATE USED\n         MVC   MRECBSIZ,VRECCISZ UPDATE BLOCKSIZE\n         MVC   MRECRECL,VRECRECL UPDATE LRECL\n         MVC   MRECRFM,=C'VB ' SET RECFM\n         BAL   R14,FIXR       FIX REFDATE ON VSAM INDEXES\n         BAL   R14,PUTM       WRITE MERGED REC\n         BAL   R14,GETD       GET NEW D\n         BAL   R14,GETV       GET NEW V\n         B     MAINLOOP       LOOP BACK\nMAINXD   EQU   *              EXTRA D REC\n         CLC   DRECDSO,=C'VS ' VSAM\n         BNE   MAINXDNR       NO -- SKIP REPORT\n         BAL   R14,RPTD       PUT REPORT LINE\nMAINXDNR EQU   *\n         MVC   MREC,DREC      COPY ENTIRE RECORD\n         BAL   R14,PUTM       WRITE MERGED REC\n         BAL   R14,GETD       GET NEW D\n         B     MAINLOOP       LOOP BACK\nMAINXV   EQU   *              EXTRA V REC\n         BAL   R14,RPTV       PUT REPORT LINE\n         BAL   R14,GETV       GET NEW V\n         B     MAINLOOP       LOOP BACK\n         TITLE 'GETD     - GET NEXT D REC'\nGETD     EQU   *\n         ST    R14,GETDR14    SAVE RETURN ADDR\n         GET   SORTVDSN,DREC\n         CLI   SWD,C'E'       EOF\n         BE    GETDX          YES -- DONE\n         CLI   SWD,C'F'       FIRST REC\n         BE    GETDU          YES -- SKIP SEQ CHK\n         CLC   GETDODSN,DRECDSN  SEQ CHK DSN\n         BL    GETDU          OK -- DONE\n         BH    ERRSEQD        ERROR\n         CLC   GETDOVOL,DRECVOL DSN SAME -- SEQ CHK VOL\n         BNL   ERRSEQD        ERROR\nGETDU    EQU   *\n         MVC   GETDODSN,DRECDSN POST DSN\n         MVC   GETDOVOL,DRECVOL POST VOL\n         MVI   SWD,C'V'       POST VALID\nGETDX    EQU   *\n         L     R14,GETDR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\nGETDEOF  EQU   *\n         MVI   SWD,C'E'       POST 'EOF'\n         BR    R14            RETURN TO GET MACRO\n         TITLE 'GETV     - GET NEXT V REC'\nGETV     EQU   *\n         ST    R14,GETVR14    SAVE RETURN ADDR\n         GET   SORTVVVR,VREC\n         CLI   SWV,C'E'       EOF\n         BE    GETVX          YES -- DONE\n         CLI   SWV,C'F'       FIRST REC\n         BE    GETVU          YES -- SKIP SEQ CHK\n         CLC   GETVODSN,VRECDSN  SEQ CHK DSN\n         BL    GETVU          OK -- DONE\n         BH    ERRSEQV        ERROR\n         CLC   GETVOVOL,VRECVOL DSN SAME -- SEQ CHK VOL\n         BNL   ERRSEQV        ERROR\nGETVU    EQU   *\n         MVC   GETVODSN,VRECDSN POST DSN\n         MVC   GETVOVOL,VRECVOL POST VOL\n         MVI   SWV,C'V'       POST VALID\nGETVX    EQU   *\n         L     R14,GETVR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\nGETVEOF  EQU   *\n         MVI   SWV,C'E'       POST 'EOF'\n         BR    R14            RETURN TO GET MACRO\n         TITLE 'PUTM     - WRITE NEXT M REC'\nPUTM     EQU   *\n         ST    R14,PUTMR14    SAVE RETURN ADDR\n         PUT   MERGVDSN,MREC\n         L     R14,PUTMR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'GKEY     - CALCULATE KEY'\nGKEY     EQU   *\n         ST    R14,GKEYR14    SAVE RETURN ADDR\n         MVI   SWK,C'I'       POST INVALID\n         CLI   SWD,C'E'       VALID D KEY\n         BE    GKEYV          NO - TRY V REC\n         MVC   KEYDSN,DRECDSN POST DSN\n         MVC   KEYVOL,DRECVOL POST VOLSER\n         MVI   SWK,C'V'       POST VALID\nGKEYV    EQU    *\n         CLI   SWV,C'E'       VALID V KEY\n         BE    GKEYE          NO - CHECK FOR EOF\n         CLI   SWK,C'V'       VALID YET\n         BNE   GKEYVM         NO -- MOVE V FIELDS\n         CLC   KEYDSN,VRECDSN CHECK KEYS\n         BL    GKEYXG         D KEY GOOD\n         BH    GKEYVM         V KEY GOOD\n         CLC   KEYVOL,VRECVOL LOWEST?\n         BNH   GKEYXG         YES -- DONE\nGKEYVM   EQU   *\n         MVC   KEYDSN,VRECDSN POST DSN\n         MVC   KEYVOL,VRECVOL POST VOLSER\n         MVI   SWK,C'V'       POST VALID\n         B     GKEYXG         DONE\nGKEYE    EQU   *              CHECK FOR ALL EOF\n         CLI   SWK,C'I'       STILL INVALID\n         BNE   GKEYXG         NO -- KEY GOOD\n         LA    R15,4          POST RC=04 - ALL EOF\n         B     GKEYX\nGKEYXG   EQU   *\n         SR    R15,R15        POST RC=00 - OK\nGKEYX    EQU   *\n         L     R14,GKEYR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'RPTV     - VVR LINE TO RPT'\nRPTV     EQU   *\n         ST    R14,RPTVR14    SAVE RETURN ADDR\n         MVC   DET,SPACES     CLEAR DETAIL LINE\n         MVC   DETTYPE,=C'VVR '\n         MVC   DETDSN,VRECDSN\n         MVC   DETVOL,VRECVOL\n         MVC   DETALOC,VRECALOC\n         MVC   DETUSED,VRECUSED\n         MVC   DETXTNT,VRECXTNT\n         MVC   DETRECL,VRECRECL\n         MVC   DETBSIZ,VRECCISZ\n         BAL   R14,PUTD\n         L     R14,RPTVR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'RPTD     - DSCB LINE TO RPT'\nRPTD     EQU   *\n         ST    R14,RPTDR14    SAVE RETURN ADDR\n         MVC   DET,SPACES     CLEAR DETAIL LINE\n         MVC   DETTYPE,=C'DSCB'\n         MVC   DETDSN,DRECDSN\n         MVC   DETVOL,DRECVOL\n         MVC   DETALOC,DRECALOC\n         MVC   DETUSED,DRECUSED\n         MVC   DETCDAT,DRECCDAT\n         MVC   DETRDAT,DRECRDAT\n         MVC   DETXTNT,DRECXTNT\n         MVC   DETDSO,DRECDSO\n         MVC   DETRFM,DRECRFM\n         MVC   DETRECL,DRECRECL\n         MVC   DETBSIZ,DRECBSIZ\n         BAL   R14,PUTD\n         L     R14,RPTDR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PUTD     - WRITE OUT DETAIL REC'\nPUTD     EQU   *\n         ST    R14,PUTDR14    SAVE RETURN ADDR\n         AP    PUTDLC,=P'1'   BUMP LINE COUNT\n         CP    PUTDLC,PUTDLM  PAST MAX\n         BNH   PUTDP          NO -- WRITE THE LINE\n         AP    PUTDPC,=P'1'   BUMP PAGE COUNT\n         MVC   TTL1PMSK,=X'40202120'\n         ED    TTL1PMSK,PUTDPC EDIT PAGE COUNT\n         MVI   RPTCC,C'1'     POST CC (EJECT)\n         MVC   RPTDET,TTL1    POST DETAIL\n         PUT   SYSPRINT,RPT   PRINT LINE\n         MVI   RPTCC,C' '     POST CC (SINGLE SPACE)\n         MVC   RPTDET,TTL2    POST DETAIL\n         PUT   SYSPRINT,RPT   PRINT LINE\n         MVC   RPTDET,SPACES  CLEAR\n         PUT   SYSPRINT,RPT   PRINT LINE\n         ZAP   PUTDLC,=P'3'   RESET LINE COUNT\nPUTDP    EQU   *\n         MVC   RPTDET,DET     POST DETAIL\n         PUT   SYSPRINT,RPT   PRINT LINE\n         L     R14,PUTDR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'FIXR     - FIX REFDATE ON VSAM INDEXES'\nFIXR     EQU   *\n         ST    R14,FIXRR14    SAVE RETURN ADDR\n         LA    R0,MRECDSN     A(CURRENT DSN)\n         LA    R1,L'MRECDSN   L'(CURRENT DSN)\n         LA    R14,FIXRODSN   A(OLD DSN)\n         LR    R15,R1         SAME LENGTH\n         CLCL  R0,R14         CHECK NAMES\n         BE    FIXRSAVE       S/B IMPOSSIBLE\n         CH    R1,=H'6'       ROOM FOR 'INDEX '\n         BL    FIXRSAVE       NO -- NO MATCH\n         LR    R1,R0          MOVE A(REST OF CURR NAME)\n         CLC   =C'INDEX ',0(R1) CHECK NEW DSN\n         BNE   FIXRSAVE       NO MATCH\n         CLC   =C'DATA ',0(R14) CHECK OLD DSN\n         BNE   FIXRSAVE       NO MATCH\n         MVC   MRECRDAT,FIXRORDT MATCH - OVERLAY REF DATE\nFIXRSAVE EQU   *\n         MVC   FIXRODSN,MRECDSN SAVE OLD DSN\n         MVC   FIXRORDT,MRECRDAT SAVE OLD REF DATE\n         L     R14,FIXRR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'ERROR MESSAGES'\nERRMTSD  EQU   *\n         WTO   'DM150PUP - SORTVDSN FILE IS EMPTY',                    *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRMTSV  EQU   *\n         WTO   'DM150PUP - SORTVVVR FILE IS EMPTY',                    *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPMV  EQU   *\n         WTO   'DM150PUP - OPEN FAILED FOR MERGVDSN',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPPR  EQU   *\n         WTO   'DM150PUP - OPEN FAILED FOR SYSPRINT',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPSD  EQU   *\n         WTO   'DM150PUP - OPEN FAILED FOR SORTVDSN',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPSV  EQU   *\n         WTO   'DM150PUP - OPEN FAILED FOR SORTVVVR',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRSEQD  EQU   *\n         WTO   'DM150PUP - SORTVDSN FILE OUT OF SEQUENCE',             *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRSEQV  EQU   *\n         WTO   'DM150PUP - SORTVVVR FILE OUT OF SEQUENCE',             *\n               ROUTCDE=11,DESC=7\n         B     ABEND\n         TITLE 'EXIT/ABEND'\nABEND    EQU   *\n         ABEND 1000,DUMP\nEXIT     EQU   *\n         CLOSE SORTVDSN\n         CLOSE SORTVVVR\n         CLOSE MERGVDSN\n         CLOSE SYSPRINT\n         L     R13,4(R13)\n         RETURN (14,12),RC=0\n         LTORG\n         TITLE 'DATA AREAS - MISCELLANEOUS'\n*\n*        DOUBLEWORDS\n*\nSAVEAREA DS    9D                  REG SAVE AREA\n*\n*        FULLWORDS\n*\nFIXRR14  DS    F              R14 SAVE AREA FOR FIXR\nGETDR14  DS    F              R14 SAVE AREA FOR GETD\nGETVR14  DS    F              R14 SAVE AREA FOR GETV\nGKEYR14  DS    F              R14 SAVE AREA FOR GKEY\nPUTDR14  DS    F              R14 SAVE AREA FOR PUTD\nPUTMR14  DS    F              R14 SAVE AREA FOR PUTM\nRPTDR14  DS    F              R14 SAVE AREA FOR RPTD\nRPTVR14  DS    F              R14 SAVE AREA FOR RPTV\n*\n*        HEX AND CHAR DATA\n*\nSWD      DC    C'F'           SWITCH FOR SORTVDSN\n*              C'E'           EOF\n*              C'F'           FIRST REC\n*              C'V'           VALID\nSWK      DC    C'I'           SWITCH FOR GKEY ROUTINE\n*              C'I'           INVALID\n*              C'V'           VALID\nSWV      DC    C'F'           SWITCH FOR SORTVVVR\n*              C'E'           EOF\n*              C'F'           FIRST REC\n*              C'V'           VALID\n*\nPUTDLC   DC    PL2'56'        LINE COUNT\nPUTDLM   DC    PL2'56'        LINES PER PAGE\nPUTDPC   DC    PL2'0'         PAGE COUNT\n*\nKEYDSN   DS    CL44\nKEYVOL   DS    CL6\nGETDODSN DS    CL44\nGETDOVOL DS    CL6\nGETVODSN DS    CL44\nGETVOVOL DS    CL6\nFIXRODSN DC    XL44'00'\nFIXRORDT DC    CL5' 00001'\n*\nSPACES   DC    CL132' '\n*\n         TITLE 'DATA AREAS - RECORD AREAS'\nDREC     DS    0CL89\nDRECDSN  DS    CL44\nDRECVOL  DS    CL6\nDRECALOC DS    CL5\nDRECUSED DS    CL5\nDRECDSO  DS    CL3\nDRECBSIZ DS    CL5\nDRECRECL DS    CL5\nDRECRFM  DS    CL3\nDRECXTNT DS    CL3\nDRECCDAT DS    CL5\nDRECRDAT DS    CL5\n*\nMREC     DS    0CL89\nMRECDSN  DS    CL44\nMRECVOL  DS    CL6\nMRECALOC DS    CL5\nMRECUSED DS    CL5\nMRECDSO  DS    CL3\nMRECBSIZ DS    CL5\nMRECRECL DS    CL5\nMRECRFM  DS    CL3\nMRECXTNT DS    CL3\nMRECCDAT DS    CL5\nMRECRDAT DS    CL5\n*\nVREC     DS    0CL81\nVRECDSN  DS    CL44\n         DS    CL4\nVRECALOC DS    CL5\n         DS    CL4\nVRECUSED DS    CL5\nVRECCISZ DS    CL5\nVRECXTNT DS    CL3\nVRECRECL DS    CL5\nVRECVOL  DS    CL6\n*\n         TITLE 'DATA AREAS - PRINT AREAS'\nRPT      DS    0CL33\nRPTCC    DC    C' '\nRPTDET   DC    CL132' '\n*\nTTL1     DC    CL132' '\n         ORG   TTL1\n         DC    C'DM150-01'\n         ORG   TTL1+60\n         DC    C'UNMATCHED REPORT'\n         ORG   TTL1+122\n         DC    C'PAGE'             UCBTYPE\nTTL1PMSK DS    CL4\n         ORG   TTL1+L'TTL1\n*\nTTL2     DC    CL132' '\n         ORG   TTL2\n         DC    C'TYPE '\n         DC    CL45'DSN'\n         DC    C'VOLSER '\n         DC    C'ALLOC '\n         DC    C' USED '\n         DC    C'CR-DT '\n         DC    C'RF-DT '\n         DC    C' XT '\n         DC    C'DSO '\n         DC    C'RFM '\n         DC    C'LRECL '\n         DC    C'BSIZE '\n         ORG   TTL2+L'TTL2\n*\nDET      DC    CL132' '\n         ORG   DET\nDETTYPE  DS    CL4\n         DS    C\nDETDSN   DS    CL44\n         DS    C\nDETVOL   DS    CL6\n         DS    C\nDETALOC  DS    CL5\n         DS    C\nDETUSED  DS    CL5\n         DS    C\nDETCDAT  DS    CL5\n         DS    C\nDETRDAT  DS    CL5\n         DS    C\nDETXTNT  DS    CL3\n         DS    C\nDETDSO   DS    CL3\n         DS    C\nDETRFM   DS    CL3\n         DS    C\nDETRECL  DS    CL5\n         DS    C\nDETBSIZ  DS    CL5\n         ORG   DET+L'DET\n*\n         TITLE 'DATA AREAS - DCBS'\n         PUSH  PRINT\n         PRINT NOGEN\nSORTVVVR DCB   DDNAME=SORTVVVR,                                        X\n               DSORG=PS,                                               X\n               EODAD=GETVEOF,                                          X\n               LRECL=81,                                               X\n               MACRF=GM,                                               X\n               RECFM=FB\n*\nSORTVDSN DCB   DDNAME=SORTVDSN,                                        X\n               DSORG=PS,                                               X\n               EODAD=GETDEOF,                                          X\n               LRECL=89,                                               X\n               MACRF=GM,                                               X\n               RECFM=FB\n*\nMERGVDSN DCB   DDNAME=MERGVDSN,                                        X\n               DSORG=PS,                                               X\n               LRECL=89,                                               X\n               MACRF=PM,                                               X\n               RECFM=FB\n*\nSYSPRINT DCB   DDNAME=SYSPRINT,                                        X\n               DSORG=PS,                                               X\n               LRECL=133,                                              X\n               MACRF=PM,                                               X\n               RECFM=FBA\n*\n         DCBD  DEVD=(DA),DSORG=(PS)\n         POP   PRINT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DM160PRP": {"ttr": 3082, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x05\\x92\\x05\\x92\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 1426, "newlines": 1426, "modlines": 0, "user": "FILE097"}, "text": "         TITLE 'DM160PRP - TEST DATASETS REPORT'\nDM160PRP CSECT\n*\n         REGS\n*\n*   MERGE VTOC AND MCDS TO PROVIDE CONSOLIDATED REPORT\n*\n*   EACH FILE IS REPORTED THREE WAYS\n*\n*       1)  IT IS INCLUDED IN THE MASTER LISTING\n*       2)  IT IS INCLUDED IN THE TEST MASTER\n*       3)  IT IS INCLUDED IN THE PROGRAMMER LISTINGS\n*\n*   PROGRAMMER LISTINGS ARE BROKEN OUT BY DD ACCORDING TO THE\n*   DD FIELD OF THE CONTROL FILE.  THESE DD'S ARE DYNAMICALLY\n*   ALLOCATED TO SYSOUT ON AN AS NEEDED BASIS.  THE SYSOUT CLASS\n*   IS DETERMINED FROM THE PARM.\n*\n*   A THREE LETTER/NUMBER ACCOUNTING CODE, ALSO FROM THE CONTROL FILE\n*   IS INCLUDED IN THE TEST MASTER.\n*\n*   FILES ARE 'EXPIRED' IF THEY ARE MIGRATED AND IT IS MORE THAN NNN\n*   DAYS SINCE THEY HAVE BEEN REFERENCED.  NNN COMES FROM THE PARM\n*   FIELD.  HSM HDELETE CARDS ARE GENERATED FOR THESE FILES.  THEY ARE\n*   ALSO FLAGGED ON THE REPORTS.  FILES ABOUT TO EXPARE ARE ALSO\n*   FLAGGED ON THE REPORTS (SEE PARM BELOW).\n*\n*   PARM:\n*          OUT=L     L = A-Z OR * SYSOUT CLASS FOR PROGRAMMER LISTINGS\n*          EXP=NNN   NNN = 000 - 999 EXPIRATION PERIOD.  ANY MIGRATED\n*                    FILE WHOSE REF DATE IS MORE THAN NNN DAYS AGO IS\n*                    MORE THAN NNN DAYS AGO IS EXPIRED.\n*          WARN=NNN  NNN = 000 - 999 WARNING PERIOD.  ANY FILE THAT\n*                    WILL EXPIRE WITHIN NNN DAYS WILL BE FLAGGED.\n*\n*          OUT=*,EXP=180,WARN=014 WILL CAUSE DYNAMIC ALLOCATE TO\n*                    DO '//XXXXXXXX DD SYSOUT=*',\n*                    FILES THAT ARE 181 DAYS OLD TO EXPIRE, AND\n*                    FILES TAHT WILL EXPIRE IN 14 DAYS TO BE FLAGGED\n*                    WITH A WARNING MESSAGE.\n*           ALL PARAMETERS ARE REQUIRED BUT THEY CAN BE SPECIFIED\n*           IN ANY ORDER.\n*\n         USING DM160PRP,R15\n         B     MAINEP\n         DC    AL1(L'CSECTLIT)\nCSECTLIT DC    C'DM160PRP - TEST DATASETS REPORT &SYSDATE'\n         EJECT\nMAINEP   DS    0H\n         SAVE  (14,12)\n         LR    R12,R15        ENTRY ADR TO BASE REG\n         LA    R11,2048(R12)\n         LA    R11,2048(R11)  SECOND BASE\n         DROP  R15\n         USING DM160PRP,R12,R11 PGM BASES\n         LR    R2,R13\n         LA    R13,SAVEAREA   SAVEAREA AND WORKING STORAGE\n         LA    R10,2048(R13)\n         LA    R10,2048(R10)  SECOND BASE\n         USING SAVEAREA,R13,R10 ADDRESSABILITY\n         ST    R2,4(R13)      SAVE CALLERS R13\n         ST    R13,8(R2)      BACK LINK SAVEAREA\n         BAL   R14,PARM       PROCESS PARM FIELD\n         BAL   R14,DATE       PROCESS DATES\n         USING IHADCB,R6      ADDRESSABILITY\n         LA    R6,DISTTBL     A(DCB)\n         OPEN  ((R6))\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPD         NO\n         LA    R6,TESTVTOC    A(DCB)\n         OPEN  ((R6))\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPV         NO\n         LA    R6,TESTMAST    A(DCB)\n         OPEN  ((R6),OUTPUT)\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPT         NO\n         LA    R6,EDTDMCDS    A(DCB)\n         OPEN  ((R6))\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPM         NO\n         LA    R6,RPTMAST     A(DCB)\n         OPEN  ((R6),OUTPUT)\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPR         NO\n         LA    R6,HCMDD       A(DCB)\n         OPEN  ((R6),OUTPUT)\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROPH         NO\n         DROP  R6\n         BAL   R14,CHKM       READ FIRST REC\n         CLI   SWM,C'E'       AT EOF\n         BE    ERRMTM         EMPTY FILE -- ERROR\n         BAL   R14,CHKV       READ FIRST REC\n         CLI   SWV,C'E'       AT EOF\n         BE    ERRMTV         EMPTY FILE -- ERROR\nMAINLOOP EQU   *              PROCESS NEXT REC\n         BAL   R14,CHKM       READ FILE IF NECESSARY\n         BAL   R14,CHKV       READ FILE IF NECESSARY\n         BAL   R14,GETK       SELECT MASTER KEY\n         BAL   R14,CHKT       ARE WE READY FOR SUMMARY TOTALS?\n         BAL   R14,CHKD       READ FILE IF NECESSARY\n         CLC   MKEY,MRECDSND  SEE IF WE GOT AN M\n         BNE   MAINCKV        NO -- CHECK FOR V\n         BAL   R14,GENM       WRITE M REC DATA\n         MVI   SWM,C'N'       POST NO REC IN BUF\nMAINCKV  EQU   *\n         CLC   MKEY,VRECDSN   SEE IF WE GOT A V\n         BNE   MAINLOOP       NO -- LOOP BACK\n         BAL   R14,GENV       WRITE V REC DATA\n         MVI   SWV,C'N'       POST NO REC IN BUF\n         B     MAINLOOP       LOOP BACK\n         TITLE 'DM160PRP - PARM - PROCESS PARM DATA'\nPARM     EQU   *\n         ST    R14,PARMR14    SAVE RETURN ADDR\n         L     R1,0(R1)       NOW A(PARM)\n         LH    R2,0(R1)       PARM LENGTH\n         LTR   R2,R2          ANY PARM\n         BZ    ERRPARMN       NO -- ERROR\n         LA    R3,2(R1)       SKIP LENGTH AND CHANGE REGS\nPARMCK   EQU   *\n         CLI   0(R3),C'E'     CHECK FOR EXP=NNN\n         BE    PARME          YES -- PROCESS\n         CLI   0(R3),C'W'     CHECK FOR WARN=NNN\n         BE    PARMW          YES -- PROCESS\n         CLI   0(R3),C'O'     CHECK FOR OUT=C\n         BE    PARMO          YES -- PROCESS\n         B     ERRPARMB       ERROR -- PARM BAD\nPARME    EQU   *\n         CLI   SWPE,C'Y'      EXP ALREADY FOUND\n         BE    ERRPARMD       YES -- ERROR - DUP PARM\n         CH    R2,=H'7'       ROOM FOR EXP=NNN\n         BL    ERRPARMB       NO -- ERROR\n         CLC   =C'XP=',1(R3)  REST OF CONSTANT\n         BNE   ERRPARMB\n         CLI   4(R3),C'0'     NUMERIC TEST 1\n         BL    ERRPARMB       NOT NUMERIC -- ERROR\n         CLI   4(R3),C'9'     NUMERIC TEST 2\n         BH    ERRPARMB       NOT NUMERIC -- ERROR\n         CLI   5(R3),C'0'     NUMERIC TEST 3\n         BL    ERRPARMB       NOT NUMERIC -- ERROR\n         CLI   5(R3),C'9'     NUMERIC TEST 4\n         BH    ERRPARMB       NOT NUMERIC -- ERROR\n         CLI   6(R3),C'0'     NUMERIC TEST 5\n         BL    ERRPARMB       NOT NUMERIC -- ERROR\n         CLI   6(R3),C'9'     NUMERIC TEST 6\n         BH    ERRPARMB       NOT NUMERIC -- ERROR\n         PACK  WORKDW,4(3,R3) NOW PACKED\n         CVB   R14,WORKDW     NOW BINARY\n         STH   R14,PARMEXP    POST\n         LA    R14,1(R14)     BUMP\n         STH   R14,PARMEXP1   POST EXP FOR WARNING\n         LA    R3,7(R3)       BUMP PAST\n         MVI   SWPE,C'Y'      POST FOUND\n         SH    R2,=H'7'       BUMP PAST\n         BZ    PARMX          DONE\n         B     PARMC          CHECK FOR COMMA\nPARMW    EQU   *\n         CLI   SWPW,C'Y'      WARN ALREADY FOUND\n         BE    ERRPARMD       YES -- ERROR - DUP PARM\n         CH    R2,=H'8'       ROOM FOR WARN=NNN\n         BL    ERRPARMB       NO -- ERROR\n         CLC   =C'ARN=',1(R3) REST OF CONSTANT\n         BNE   ERRPARMB\n         CLI   5(R3),C'0'     NUMERIC TEST 1\n         BL    ERRPARMB       NOT NUMERIC -- ERROR\n         CLI   5(R3),C'9'     NUMERIC TEST 2\n         BH    ERRPARMB       NOT NUMERIC -- ERROR\n         CLI   6(R3),C'0'     NUMERIC TEST 3\n         BL    ERRPARMB       NOT NUMERIC -- ERROR\n         CLI   6(R3),C'9'     NUMERIC TEST 4\n         BH    ERRPARMB       NOT NUMERIC -- ERROR\n         CLI   7(R3),C'0'     NUMERIC TEST 5\n         BL    ERRPARMB       NOT NUMERIC -- ERROR\n         CLI   7(R3),C'9'     NUMERIC TEST 6\n         BH    ERRPARMB       NOT NUMERIC -- ERROR\n         PACK  WORKDW,5(3,R3) NOW PACKED\n         CVB   R14,WORKDW     NOW BINARY\n         STH   R14,PARMWARN   POST\n         LA    R3,8(R3)       BUMP PAST\n         MVI   SWPW,C'Y'      POST FOUND\n         SH    R2,=H'8'       BUMP PAST\n         BZ    PARMX          DONE\n         B     PARMC          CHECK FOR COMMA\nPARMO    EQU   *\n         CLI   SWPO,C'Y'      OUT ALREADY FOUND\n         BE    ERRPARMD       YES -- ERROR - DUP PARM\n         CH    R2,=H'5'       ROOM FOR OUT=L\n         BL    ERRPARMB       NO -- ERROR\n         CLC   =C'UT=',1(R3) REST OF CONSTANT\n         BNE   ERRPARMB\n         CLI   4(R3),C'*'     ALPHA TEST 1\n         BE    PARMOOK        ALPHA -- OK\n         CLI   4(R3),C'A'     ALPHA TEST 2\n         BL    ERRPARMB       NOT ALPHA -- ERROR\n         CLI   4(R3),C'I'     ALPHA TEST 3\n         BNH   PARMOOK        ALPHA -- OK\n         CLI   4(R3),C'J'     ALPHA TEST 4\n         BL    ERRPARMB       NOT ALPHA -- ERROR\n         CLI   4(R3),C'R'     ALPHA TEST 5\n         BNH   PARMOOK        ALPHA -- OK\n         CLI   4(R3),C'S'     ALPHA TEST 6\n         BL    ERRPARMB       NOT ALPHA -- ERROR\n         CLI   4(R3),C'Z'     ALPHA TEST 7\n         BH    ERRPARMB       ALPHA -- OK\nPARMOOK  EQU   *\n         MVC   PARMOUT,4(R3)  POST\n         LA    R3,5(R3)       BUMP PAST\n         MVI   SWPO,C'Y'      POST FOUND\n         SH    R2,=H'5'       BUMP PAST\n         BZ    PARMX          DONE\nPARMC    EQU   *\n         CLI   0(R3),C','     COMMA\n         BNE   ERRPARMB       NO -- ERROR\n         LA    R3,1(R3)       BUMP PAST\n         SH    R2,=H'1'       DEC FOR COMMA\n         BNZ   PARMCK\nPARMX    EQU   *\n         CLI   SWPE,C'Y'      FOUND\n         BNE   ERRPARMM       NO -- ERROR\n         CLI   SWPW,C'Y'      FOUND\n         BNE   ERRPARMM       NO -- ERROR\n         CLI   SWPO,C'Y'      FOUND\n         BNE   ERRPARMM       NO -- ERROR\n         L     R14,PARMR14       RESTORE RETURN ADDR\n         BR    R14               RETURN\n         TITLE 'DM160PRP - DATE - CALCULATE DATES'\nDATE     EQU   *\n         ST    R14,DATER14       SAVE RETURN ADDR\n         LH    R1,PARMEXP        EXPIRATION DAYS\n         CH    R1,PARMWARN       CHECK AGAINST WARNING DAYS\n         BNH   ERRDATEW          WARN > EXP\n         TIME  DEC               GET DATE\n         ST    R1,DATEYD         SAVE\n         UNPK  PR1PT2J,DATEYD    YYDDD FOR DISPLAY\n         MVC   PR2PT2J,PR1PT2J   AGAIN\n         ZAP   WORKDW,DATEYD+2(2) PICK UP DDD PART\n         CVB   R1,WORKDW         NOW BIN\n         ST    R1,DATCDOY        POST\n         ZAP   WORKDW,DATEYD     PICK UP YYDDD\n         SRP   WORKDW,64-3,0     NOW YY\n         UNPK  DATEYY,WORKDW     YYY NOW CHAR\n         OI    DATEYY+L'DATEYY-1,X'F0' FIX SIGN\n         MVC   PR1PT2Y,DATEYY+1  TO PRINT LINE\n         MVC   PR2PT2Y,PR1PT2Y   AGAIN\n         CVB   R1,WORKDW         NOW BIN\n         ST    R1,DATCYY         POST\n         MVC   DATCMM,=F'0'      CLEAR\n         MVC   DATCDD,=F'0'      CLEAR\n         MVC   DATCJDAY,=F'0'    CLEAR\n         LA    R1,DATCPRML       POST PARAM LIST\n         L     R15,DATCNVRT      A(ROUTINE)\n         BALR  R14,R15           DATE CONVERT\n         L     R1,DATCMM         POST MONTH\n         CVD   R1,WORKDW         NOW PACKED\n         UNPK  DATEMM,WORKDW     NOW CHAR\n         OI    DATEMM+L'DATEMM-1,X'F0' FIX SIGN\n         MVC   PR1PT2M,DATEMM+1  TO PRINT LINE\n         MVC   PR2PT2M,PR1PT2M   AGAIN\n         L     R1,DATCDD         POST DAY OF MONTH\n         CVD   R1,WORKDW         NOW PACKED\n         UNPK  DATEDD,WORKDW     NOW CHAR\n         OI    DATEDD+L'DATEDD-1,X'F0' FIX SIGN\n         MVC   PR1PT2D,DATEDD+1  TO PRINT LINE\n         MVC   PR2PT2D,PR1PT2D   AGAIN\n         MVC   DATECJDY,DATCJDAY SAVE\n         L     R1,DATECJDY       POST\n         SH    R1,PARMEXP        NOW JDAY FOR EXPIRED REF DATE\n         ST    R1,DATEXJDY       SAVE\n         AH    R1,PARMWARN       NOW JDAY FOR WARNING REF DATE\n         ST    R1,DATEWJDY       SAVE\n         L     R14,DATER14       RESTORE RETURN ADDR\n         BR    R14               RETURN\n         TITLE 'DM160PRP - CHKT - CHECK IF READY TO WRITE TOTALS'\nCHKT     EQU   *\n         ST    R14,CHKTR14       SAVE RETURN ADDR\n         LH    R1,PREFLEN        POST PREFIX LENGTH\n         EX    R1,CHKDCLC1       CHECK PREFIX\n         BE    CHKTX             SAME -- DONE\n         CLC   =X'00',PREFPREF   IS THIS THE FIRST RECORD\n         BE    CHKTX             YES -- DON'T PRINT YET\n         MVI   SWT,C'Y'          YES -- READY FOR TOTALS\n         BAL   R14,GENT          WRITE THE TOTALS\nCHKTX    EQU   *\n         L     R14,CHKTR14       RESTORE RETURN ADDR\n         BR    R14               RETURN\n         TITLE 'DM160PRP - CHKD - DO WE NEED TO READ D'\nCHKD     EQU   *\n         ST    R14,CHKDR14       SAVE RETURN ADDR\n         LH    R1,PREFLEN        POST PREFIX LENGTH\n         EX    R1,CHKDCLC1       CHECK PREFIX\n         BE    CHKDX             SAME -- DONE\n         BAL   R14,BLDP          BUILD PREFIX FROM CURRENT MKEY\n         CLI   SWD,C'E'          EOF\n         BE    CHKDE             YES -- SET UP FOR ERROR\nCHKDC    EQU   *\n         CLC   DRECUID,PREFUID   CHECK USER ID\n         BH    CHKDE             HIGH -- SET UP FOR ERROR\n         BE    CHKDH             HIT -- USE IT\n         GET   DISTTBL,DREC      GET NEXT REC\n*\n*        NOTE:  EOF ROUTINE MAY RESET SW TO 'E'\n*\n         CLI   SWD,C'E'          EOF\n         BE    CHKDE             YES -- PROCESS\n         CLC   KEYD,DRECUID      SEQUENCE CHECK\n         BNL   ERRSQD            OUT OF SEQ -- ERROR\n         MVC   KEYD,DRECUID      POST NEW PRIMARY KEY\n         B     CHKDC             CHECK USER ID\nCHKDE    EQU   *\n         MVC   PGMRDDN,=CL8'ERROR' POST ERROR DD NAME\n         MVC   PR1PT1D,=CL19'PSC/220 TECH SVCS'\n         MVC   PR2PT1D,=CL19'PSC/220 TECH SVCS'\n*                            1234567890123456789\n         MVC   PR1PT1N,=CL29'DISK MANAGEMENT'\n         MVC   PR2PT1N,=CL29'DISK MANAGEMENT'\n*                            12345678901234567890123456789\n         MVC   TRECAAM,=C'OPP'\n         MVC   PR1PT1B,=C'OPP'\n         MVC   PR2PT1B,=C'OPP'\n         MVC   PR1PT1S,=CL8'ERROR'\n         MVC   PR2PT1S,=CL8'ERROR'\n         BAL   R14,OPNM       OPEN MODEL DCB FOR THIS DD\n         ZAP   PR1LLINE,PR1LMAX FORCE NEW PAGE\n         ZAP   PR2LLINE,PR2LMAX FORCE NEW PAGE\n         ZAP   PR2LPAGE,=P'0' RESET PAGE NUMBER ON PGMR RPT\n         B     CHKDX          DONE -- EXIT\nCHKDH    EQU   *\n         MVC   PGMRDDN,DRECDD POST NEW DD NAME\n         MVC   PR1PT1D,DRECDIST POST DISTRIBUTION\n         MVC   PR2PT1D,DRECDIST POST DISTRIBUTION\n         MVC   PR1PT1N,DRECNAME POST USER NAME\n         MVC   PR2PT1N,DRECNAME POST USER NAME\n         MVC   TRECAAM,DRECACCT POST ACCOUNTING CODE\n         MVC   PR1PT1B,DRECACCT POST ACCOUNTING CODE\n         MVC   PR2PT1B,DRECACCT POST ACCOUNTING CODE\n         MVC   PR1PT1S,DRECDD POST NEW DD NAME\n         MVC   PR2PT1S,DRECDD POST NEW DD NAME\n         BAL   R14,OPNM       OPEN MODEL DCB FOR THIS DD\n         ZAP   PR1LLINE,PR1LMAX FORCE NEW PAGE\n         ZAP   PR2LLINE,PR2LMAX FORCE NEW PAGE\n         ZAP   PR2LPAGE,=P'0' RESET PAGE NUMBER ON PGMR RPT\nCHKDX    EQU   *\n         L     R14,CHKDR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\nCHKDCLC1 CLC   PREFPREF(0),MKEY EXECUTED COMPARE\nCHKDEOF  EQU   *              EOF ROUTINE\n         MVI   SWD,C'E'       SET EOF SW\n         BR    R14            RETURN TO GET ROUTINE\n         TITLE 'DM160PRP - CHKM - DO WE NEED TO READ M'\nCHKM     EQU   *\n         ST    R14,CHKMR14       SAVE RETURN ADDR\n         CLI   SWM,C'N'          NO REC IN BUF\n         BNE   CHKMX             NO -- EXIT\n         MVI   SWM,C'Y'          SET REC IN BUF\nCHKMR    EQU   *\n         GET   EDTDMCDS,MREC     GET NEXT REC\n*\n*        NOTE:  EOF ROUTINE MAY RESET SW TO 'E'\n*\n         CLI   SWM,C'E'          EOF\n         BE    CHKMX             YES -- DONE\n         CLC   KEYM,MRECDSND     SEQUENCE CHECK\n         BNL   ERRSQM            OUT OF SEQ -- ERROR\n         MVC   KEYM,MRECDSND     POST NEW PRIMARY KEY\nCHKMX    EQU   *\n         L     R14,CHKMR14       RESTORE RETURN ADDR\n         BR    R14               RETURN\nCHKMEOF  EQU   *                 EOF ROUTINE\n         MVI   SWM,C'E'          SET EOF SW\n         BR    R14               RETURN TO GET ROUTINE\n         TITLE 'DM160PRP - CHKV - DO WE NEED TO READ V'\nCHKV     EQU   *\n         ST    R14,CHKVR14       SAVE RETURN ADDR\n         CLI   SWV,C'N'          NO REC IN BUF\n         BNE   CHKVX             NO -- EXIT\n         MVI   SWV,C'Y'          SET REC IN BUF\n         GET   TESTVTOC,VREC     GET NEXT REC\n*\n*        NOTE:  EOF ROUTINE MAY RESET SW TO 'E'\n*\n         CLI   SWV,C'E'          EOF\n         BE    CHKVX             YES -- DONE\n         CLC   KEYV,VRECDSN      SEQUENCE CHECK\n         BH    ERRSQV            OUT OF SEQ -- ERROR\n         MVC   KEYV,VRECDSN      POST NEW KEY\nCHKVX    EQU   *\n         L     R14,CHKVR14       RESTORE RETURN ADDR\n         BR    R14               RETURN\nCHKVEOF  EQU   *                 EOF ROUTINE\n         MVI   SWV,C'E'          SET EOF SW\n         BR    R14               RETURN TO GET ROUTINE\n         TITLE 'DM160PRP - BLDP - BUILD PREFIX'\nBLDP     EQU   *\n         ST    R14,BLDPR14      SAVE RETURN ADDR\n         LA    R2,MKEY          MASTER KEY (DSN)\n         LA    R14,PREFPREF     A(PREFIX)  (WILL HAVE '.' ON END)\n         LA    R15,PREFUID      A(USER ID) (WILL HAVE ' ' PAD)\n         MVC   PREFUID,SPACES   CLEAR\n         SR    R1,R1            INITIALIZE LENGTH\nBLDPL    EQU   *\n         CLI   0(R2),C'.'       FAR ENOUGH\n         BE    BLDPH            HIT -- YES\n         CLI   0(R2),C' '       FAR ENOUGH\n         BE    BLDPS            HIT -- YES\n         CH    R1,=H'8'         TOO FAR\n         BNL   ERRBLDP          YES -- ERROR\n         MVC   0(1,R14),0(R2)   POST NEXT CHAR\n         MVC   0(1,R15),0(R2)   POST NEXT CHAR\n         LA    R1,1(R1)         BUMP\n         LA    R2,1(R2)         BUMP\n         LA    R14,1(R14)       BUMP\n         LA    R15,1(R15)       BUMP\n         B     BLDPL            LOOP BACK\nBLDPS    EQU   *\n         MVI   0(R14),C' '      POST SPACE\n         STH   R1,PREFLEN       POST CLC LENGTH\n         B     BLDPX            EXIT\nBLDPH    EQU   *\n         MVI   0(R14),C'.'      POST PERIOD\n         STH   R1,PREFLEN       POST CLC LENGTH\nBLDPX    EQU   *\n         L     R14,BLDPR14      RESTORE RETURN ADDR\n         BR    R14              RETURN\n         TITLE 'DM160PRP - OPNM - OPEN MODEL DCB'\nOPNM     EQU   *\n         ST    R14,OPNMR14    SAVE RETURN ADDR\n         L     R2,MDLLC       POST CURRENT MODEL\n         LTR   R2,R2          ANY\n         BZ    OPNMF          NO -- BUILD FIRST\n         CLC   PGMRDDN,0(R2)  RIGHT DD\n         BE    OPNMX          YES -- DONE\n         L     R2,MDLLF       POST FIRST MODEL\nOPNML    EQU   *\n         ST    R2,MDLLC       POST AS CURRENT\n         CLC   PGMRDDN,0(R2)  RIGHT DD\n         BE    OPNMX          YES -- DONE\n         CLC   =F'0',8(R2)    ANY MORE\n         BE    OPNMA          NO -- ADD ONE\n         L     R2,8(R2)       BUMP TO NEXT\n         B     OPNML          LOOP BACK\nOPNMA    EQU   *\n         LA    R3,MODELLEN    L'MODEL DCB\n         LA    R3,16(R3)      ALLOW FOR PREFIX\n         GETMAIN R,LV=(R3)\n         ST    R1,8(R2)       ADD TO CHAIN\n         ST    R1,MDLLC       POST TO MODEL CURRENT\n         LR    R2,R1          POST TO REG\n         B     OPNMD          CONTINUE WITH DYNALLOC\nOPNMF    EQU   *\n         LA    R3,MODELLEN    L'MODEL DCB\n         LA    R3,16(R3)      ALLOW FOR PREFIX\n         GETMAIN R,LV=(R3)\n         ST    R1,MDLLF       POST TO MODEL FIRST\n         ST    R1,MDLLC       POST TO MODEL CURRENT\n         LR    R2,R1          POST TO REG\nOPNMD    EQU   *\n         MVC   8(4,R2),=F'0'  INDICATE END OF CHAIN\n         MVC   0(8,R2),PGMRDDN POST DD NAME\n         LA    R0,16(R2)      A(NEW DCB)\n         LA    R1,MODELLEN    L'NEW DCB\n         LA    R14,MODEL      A(MODEL DCB)\n         LR    R15,R1         ALSO LENGTH\n         MVCL  R0,R14         COPY MODEL DCB\n         BAL   R14,DYNA       ALLOC SYSOUT\n         LA    R6,16(R2)      A(DCB)\n         USING IHADCB,R6      ADDRESSABILITY\n         MVC   DCBDDNAM,0(R2) POST DD NAME\n         OPEN  ((R6),OUTPUT)\n         TM    DCBOFLGS,DCBOFOPN\n         BZ    ERROPZ\n         DROP  R6\nOPNMX    EQU   *\n         L     R14,OPNMR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'DM160PRP - DYNA - DYNAMIC ALLOCATE NEW SYSOUT'\nDYNA     EQU   *\n         ST    R14,DYNAR14    SAVE RETURN ADDR\n         MVC   DYNAT1,0(R2)   POST DD NAME\n         MVC   DYNAT2,PARMOUT POST SYSOUT CLASS\n         MVC   DYNAT2N,=H'1'  ASSUME NORMAL SYSOUT\n         CLI   DYNAT2,C'*'    CHECK FOR DEFAULT\n         BNE   DYNADYNA       NOT DEFAULT -- CONTINUE\n         MVC   DYNAT2N,=H'0'  DEFAULT -- SET ZERO COUNT\nDYNADYNA EQU   *\n         LA    R1,DYNARBPT    POST PARAM LIST POINTER\n         DYNALLOC\n         LTR   R15,R15        ERROR\n         BE    DYNAX          NO -- DONE\n         ST    R15,DYNER15    SAVE DAIR RETURN CODE\n         LA    R1,DYNERBP     POST DAIRFAIL CB\n         LINK  EP=IKJEFF18    GENERATE ERROR MSG\n         LTR   R15,R15        CHECK FOR SUCCESS\n         BZ    ERRDYNA        ERROR\n         B     ERRDAIR        DOUBLE ERROR\nDYNAX    EQU   *\n         L     R14,DYNAR14    RESTORE RETURN ADDR\n         BR    R14\n         TITLE 'DM160PRP - GETK - SELECT MASTER KEY'\nGETK     EQU   *\n         ST    R14,GETKR14    SAVE RETURN ADDR\n         MVI   SWK,C'E'       POST 'EOF'\n         CLI   SWM,C'E'       EOF ON FIRST FILE\n         BE    GETKVCK        YES CHECK NEXT FILE\n         MVC   MKEY,MRECDSND  POST KEY\n         MVI   SWK,C'Y'       POST HIT\nGETKVCK  EQU   *\n         CLI   SWV,C'E'       EOF ON THIS FILE\n         BE    GETKEND        YES CHECK NEXT FILE\n         CLI   SWK,C'E'       NO KEY YET\n         BE    GETKVPO        YES -- FORCE POST THIS ONE\n         CLC   MKEY,VRECDSN   CHECK THIS KEY\n         BNH   GETKEND        NO GOOD -- TRY NEXT\nGETKVPO  EQU   *\n         MVC   MKEY,VRECDSN   POST KEY\n         MVI   SWK,C'Y'       POST HIT\nGETKEND  EQU   *\n         CLI   SWK,C'E'       ALL AT EOF\n         BE    EXIT           YES -- DONE\n         L     R14,GETKR14       RESTORE RETURN ADDR\n         BR    R14               RETURN\n         TITLE 'DM160PRP - GENM - GENERATE RPTS FROM M REC'\nGENM     EQU   *\n         ST    R14,GENMR14    SAVE RETURN ADDR\n         MVC   TRECDSN,MRECDSND\n         MVC   TRECVOLP,MRECVOLP\n         MVC   TRECALOC,MRECALOC\n         MVC   TRECUSED,SPACES\n         MVC   TRECDSO,SPACES\n         MVC   TRECBSIZ,SPACES\n         MVC   TRECRECL,SPACES\n         MVC   TRECRFM,SPACES\n         MVC   TRECXTNT,SPACES\n         MVC   TRECCDAT,MRECCDAT\n         MVC   TRECRDAT,MRECRDAT\n         MVC   TRECVOLM,MRECVOLM\n         MVC   TRECLVL,MRECLVL\n         MVC   TRECDEV,MRECDEV\n         MVC   TRECSIZE,MRECSIZE\n         PUT   TESTMAST,TREC  WRITE REC\n         MVC   RREC,SPACES\n         MVC   RRECDSN,MRECDSND\n         MVC   RRECVOL,MRECVOLM\n         MVC   RRECALOC,MRECALOC\n         MVC   RRECRDAT,MRECRDAT\n         MVC   RRECCDAT,MRECCDAT\n         MVC   RRECMDAT,MRECMDAT\n         MVC   RRECSIZE,MRECSIZE\n         MVC   RRECL,MRECLVL\n         MVC   RRECD,MRECDEV\n         BAL   R14,CKXP            CHECK EXPIRATION\n         BAL   R14,PR1L\n         BAL   R14,PR2L\n         CLI   MRECLVL,C'2'        ON LEVEL 2?\n         BE    GENM1               YES -- DON'T PICK UP ALLOC\n         PACK  WORKDW,MRECALOC     PACK ALOC TRKS\n         AP    MTRKL1,WORKDW       ADD TRKS TO TOTAL\nGENM1    PACK  WORKDW,MRECSIZE     PACK 2K-BLKS FOR ADD\n         AP    MBLKL2,WORKDW       ADD BLKS TO TOTAL\n         AP    MMIGDS,=P'1'        ADD 1 TO COUNTER\n         L     R14,GENMR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'DM160PRP - GENV - GENERATE RPTS FROM V REC'\nGENV     EQU   *\n         ST    R14,GENVR14    SAVE RETURN ADDR\n         MVC   TRECDSN,VRECDSN\n         MVC   TRECVOLP,VRECVOL\n         MVC   TRECALOC,VRECALOC\n         MVC   TRECUSED,VRECUSED\n         MVC   TRECDSO,VRECDSO\n         MVC   TRECBSIZ,VRECBSIZ\n         MVC   TRECRECL,VRECRECL\n         MVC   TRECRFM,VRECRFM\n         MVC   TRECXTNT,VRECXTNT\n         MVC   TRECCDAT,VRECCDAT\n         MVC   TRECRDAT,VRECRDAT\n         MVC   TRECVOLM,SPACES\n         MVC   TRECLVL,=C'P'\n         MVC   TRECDEV,SPACES\n         MVC   TRECSIZE,SPACES\n         PUT   TESTMAST,TREC  WRITE REC\n         MVC   RREC,SPACES\n         MVC   RRECDSN,VRECDSN\n         MVC   RRECVOL,VRECVOL\n         MVC   RRECALOC,VRECALOC\n         MVC   RRECRDAT,VRECRDAT\n         MVC   RRECUSED,VRECUSED\n         MVC   RRECDSO,VRECDSO\n         MVC   RRECRFM,VRECRFM\n         MVC   RRECRECL,VRECRECL\n         MVC   RRECBSIZ,VRECBSIZ\n         MVC   RRECXTNT,VRECXTNT\n         MVC   RRECCDAT,VRECCDAT\n         BAL   R14,PR1L\n         BAL   R14,PR2L\n         PACK  WORKDW,VRECALOC     PACK ALOC TRKS\n         AP    VTRKALOC,WORKDW     ADD TRKS TO TOTAL\n         PACK  WORKDW,VRECUSED     PACK USED TRKS FOR ADD\n         AP    VTRKUSED,WORKDW     ADD TRKS TO TOTAL\n         AP    VPRIDS,=P'1'        ADD 1 TO COUNTER\n         L     R14,GENVR14         RESTORE RETURN ADDR\n         BR    R14                 RETURN\n         TITLE 'DM160PRP - GENT - GENERATE RPTS FOR SUMMARY'\nGENT     EQU   *\n         ST    R14,GENTR14         SAVE RETURN ADDR\n         MVC   SREC1P,=X'4020206B202120'\n         ED    SREC1P,VPRIDS       # OF DS ON PRIMARY\n         MVC   SREC1A,=X'40206B2020206B202120'\n         ED    SREC1A,VTRKALOC     TRKS ALLOCATED\n         MVC   SREC1U,=X'40206B2020206B202120'\n         ED    SREC1U,VTRKUSED     TRKS USED\n         MVC   SREC2P,=X'4020206B202120'\n         ED    SREC2P,MMIGDS       # OF DS MIGRATED\n         MVC   SREC2T,=X'40206B2020206B202120'\n         ED    SREC2T,MTRKL1       TRKS ON LVL1\n         MVC   SREC2B,=X'40206B2020206B202120'\n         ED    SREC2B,MBLKL2+1     BLKS ON LVL2\n         CP    VTRKALOC,=P'0'      CHECK FOR ZERO ALLOCATED\n         BE    GENTX               YES -- % USED NOT REQUIRED\n         ZAP   WORKDW,VTRKUSED\n         MP    WORKDW,=P'100'\n         DP    WORKDW,VTRKALOC\n         MVC   SREC1X,=X'40202120'\n         ED    SREC1X,WORKDW+2   PERCENT USED\nGENTX    BAL   R14,PR1L\n         BAL   R14,PR2L\n         MVI   SWT,C'N'          SET BACK TO NOT READY\n         ZAP   VPRIDS,=P'0'      RESET FIELD TO ZERO\n         ZAP   VTRKALOC,=P'0'    RESET FIELD TO ZERO\n         ZAP   VTRKUSED,=P'0'    RESET FIELD TO ZERO\n         ZAP   MMIGDS,=P'0'      RESET FIELD TO ZERO\n         ZAP   MTRKL1,=P'0'      RESET FIELD TO ZERO\n         ZAP   MBLKL2,=P'0'      RESET FIELD TO ZERO\n         MVC   SREC1X,=C'   0'   RESET FIELD TO ZERO\n         L     R14,GENTR14       RESTORE RETURN ADDR\n         BR    R14               RETURN\n         TITLE 'DM160PRP - CKXP - CHECK FOR EXPIRATION'\nCKXP     EQU   *\n         ST    R14,CKXPR14       SAVE RETURN ADDR\n         PACK  CKXPRDAT,RRECMDAT MIG DATE NOW PACKED\n         ZAP   WORKDW,CKXPRDAT+1(2) PICK OF DDD\n         CVB   R1,WORKDW         NOW BIN\n         ST    R1,DATCDOY        POST\n         ZAP   WORKDW,CKXPRDAT   POST YYDDD\n         SRP   WORKDW,64-3,0     NOW YY\n         CVB   R1,WORKDW         NOW BIN\n         ST    R1,DATCYY         POST\n         MVC   DATCMM,=F'0'      CLEAR\n         MVC   DATCDD,=F'0'      CLEAR\n         MVC   DATCJDAY,=F'0'    CLEAR\n         LA    R1,DATCPRML       POST A(PARAMETER LIST)\n         L     R15,DATCNVRT      A(ROUTINE)\n         BALR  R14,R15           EXECUTE\n         MVC   CKXPJDAY,DATCJDAY SAVE\n         CLC   CKXPJDAY,DATEXJDY EXPIRED\n         BL    CKXPEXP           YES\n         CLC   CKXPJDAY,DATEWJDY WARNING\n         BH    CKXPOK            NO -- OK\n*                                WARNING\n         L     R1,CKXPJDAY       POST REF DATE JDAY\n         AH    R1,PARMEXP1       + EXP INTERVAL = EXPIRE DATE\n         ST    R1,DATCJDAY       POST FOR DATCNVER\n         MVC   DATCYY,=F'0'      CLEAR\n         MVC   DATCMM,=F'0'      CLEAR\n         MVC   DATCDD,=F'0'      CLEAR\n         MVC   DATCDOY,=F'0'     CLEAR\n         LA    R1,DATCPRML       POST A(PARAM LIST)\n         L     R15,DATCNVRT      A(ROUTINE)\n         BALR  R14,R15           EXECUTE ROUTINE\n         L     R1,DATCDOY        POST DAY OF YEAR\n         CVD   R1,WORKDW         NOW PACKED\n         ZAP   CKXPPDOY,WORKDW   SAVE DOY IN PACKED AREA\n         L     R1,DATCYY         POST YEAR\n         CVD   R1,WORKDW         NOW PACKED\n         SRP   WORKDW,3,0        NOW YY000\n         AP    WORKDW,CKXPPDOY   NOW YYDDD\n         UNPK  MSGWXPDT,WORKDW   NOW CHAR IN MSG\n         OI    MSGWXPDT+L'MSGWXPDT-1,X'F0' FIX SIGN\n         MVC   RRECMSG,MSGW      POST WARNING MSG\n         B     CKXPOK            DONE\nCKXPEXP  EQU   *\n         MVC   RRECMSG,MSGX      POST EXPIRED MSG\n         BAL   R14,GENH          GENERATE HSM DELETE COMMAND\nCKXPOK   EQU   *\n         L     R14,CKXPR14       RESTORE RETURN ADDR\n         BR    R14\n         TITLE 'DM160PRP - GENH - GENERATE HDELETE CARD'\nGENH     EQU   *\n         ST    R14,GENHR14       SAVE RETURN ADDR\n         MVC   HRECDSN,RRECDSN   POST DATA SET NAME\n         PUT   HCMDD,HREC        WRITE RECORD\n         L     R14,GENHR14       RESTORE RETURN ADDR\n         BR    R14\n         TITLE 'DM160PRP - PR1L - PRINT A LINE (MASTER) R1'\nPR1L     EQU   *\n         ST    R14,PR1LR14       SAVE RETURN ADDR\n         AP    PR1LLINE,=P'1'    BUMP LINE COUNT\n         BAL   R14,PR1H          CHECK IF WE NEED HEADINGS\n         CLI   SWT,C'Y'          ARE WE READY FOR TOTALS\n         BE    PR1LT             YES -- GO PRINT THEM\n         PUT   RPTMAST,RREC      PRINT DATA LINE\n         B     PR1LX\nPR1LT    AP    PR1LLINE,=P'2'    BUMP LINE COUNT\n         BAL   R14,PR1H          CHECK IF WE NEED HEADINGS\n         PUT   RPTMAST,SREC1     PRINT TOTAL LINE 1\n         AP    PR1LLINE,=P'2'    BUMP LINE COUNT\n         BAL   R14,PR1H          CHECK IF WE NEED HEADINGS\n         PUT   RPTMAST,SREC2     PRINT TOTAL LINE 2\nPR1LX    L     R14,PR1LR14       RESTORE RETURN ADDR\n         BR    R14               RETURN\n         TITLE 'DM160PRP - PR2L - PRINT A LINE (INDIVIDUAL) R2'\nPR2L     EQU   *\n         ST    R14,PR2LR14       RESTORE RETURN ADDR\n         L     R2,MDLLC          A(MODEL PRINT BLOCK)\n         LA    R6,16(R2)         A(MODEL DCB)\n         AP    PR2LLINE,=P'1'    BUMP LINE COUNT\n         BAL   R14,PR2H          CHECK IF WE NEED HEADINGS\n         CLI   SWT,C'Y'          ARE WE READY FOR TOTALS\n         BE    PR2LT             YES -- GO PRINT THEM\n         PUT   (R6),RREC         PRINT DATA LINE\n         B     PR2LX\nPR2LT    AP    PR2LLINE,=P'2'    BUMP LINE COUNT\n         BAL   R14,PR2H          CHECK IF WE NEED HEADINGS\n         PUT   (R6),SREC1        PRINT TOTAL LINE 1\n         AP    PR2LLINE,=P'2'    BUMP LINE COUNT\n         BAL   R14,PR2H          CHECK IF WE NEED HEADINGS\n         PUT   (R6),SREC2        PRINT TOTAL LINE 2\n         AP    PR2LLINE,=P'3'    BUMP LINE COUNT\n         BAL   R14,PR2H          CHECK IF WE NEED HEADINGS\n         PUT   (R6),SREC3        PRINT TOTAL LINE 3\nPR2LX    L     R14,PR2LR14       RESTORE RETURN ADDR\n         BR    R14               RETURN\n         TITLE 'DM160PRP - PR1H - PRINT HEADING (MASTER)'\nPR1H     EQU   *\n         ST    R14,PR1HR14       SAVE RETURN ADDR\n         CP    PR1LLINE,PR1LMAX  PAST END OF PAGE\n         BL    PR1HX             NO -- PRINT IT\n         AP    PR1LPAGE,=P'1'    BUMP PAGE NUMBER\n         MVC   PR1PT2P,=X'4020206B202120'\n         ED    PR1PT2P,PR1LPAGE\n         PUT   RPTMAST,PR1PT1    PRINT TITLE LINE 1\n         PUT   RPTMAST,PR1PT2    PRINT TITLE LINE 2\n         PUT   RPTMAST,PR1PT3    PRINT TITLE LINE 3\n         PUT   RPTMAST,PR1PT4    PRINT TITLE LINE 4\n         PUT   RPTMAST,SPACES    PRINT BLANK LINE\n         ZAP   PR1LLINE,=P'8'    RESET LINE COUNT\nPR1HX    L     R14,PR1HR14       RESTORE RETURN ADDR\n         BR    R14               RETURN\n         TITLE 'DM160PRP - PR2H - PRINT HEADING (INDIVIDUAL)'\nPR2H     EQU   *\n         ST    R14,PR2HR14       SAVE RETURN ADDR\n         CP    PR2LLINE,PR2LMAX  PAST END OF PAGE\n         BL    PR2HX             NO -- BACK TO PRINT IT\n         AP    PR2LPAGE,=P'1'    BUMP PAGE NUMBER\n         MVC   PR2PT2P,=X'4020206B202120'\n         ED    PR2PT2P,PR2LPAGE\n         PUT   (R6),PR2PT1       PRINT TITLE LINE 1\n         PUT   (R6),PR2PT2       PRINT TITLE LINE 2\n         PUT   (R6),PR2PT3       PRINT TITLE LINE 3\n         PUT   (R6),PR2PT4       PRINT TITLE LINE 4\n         PUT   (R6),SPACES       PRINT BLANK LINE\n         ZAP   PR2LLINE,=P'8'    RESET LINE COUNT\nPR2HX    L     R14,PR2HR14       RESTORE RETURN ADDR\n         BR    R14               RETURN\n         TITLE 'DM160PRP - CLSM - CLOSE MODEL FILES'\nCLSM     EQU   *\n         ST    R14,CLSMR14\n         L     R2,MDLLF          A(FIRST MODEL BLOCK)\nCLSML    EQU   *\n         LTR   R2,R2             GOOD BLOCK\n         BZ    CLSMX             NO -- DONE - EXIT\n         LA    R6,16(R2)         A(DCB)\n         CLOSE ((R6))\n         L     R2,8(R2)          BUMP TO NEXT BLOCK\n         B     CLSML             LOOP BACK\nCLSMX    EQU   *\n         L     R14,CLSMR14       RESTORE RETURN ADDR\n         BR    R14\n         TITLE 'ERROR MESSAGES'\nERRBLDP  EQU   *\n         WTO   'DM160PRP - DATA SET PREFIX TOO LONG',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRDAIR  EQU   *\n         WTO   'DM160PRP - ERROR ON DYNAMIC ALLOCATE AND DAIR FAIL',   *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRDATEW EQU   *\n         WTO   'DM160PRP - PARM WARN VALUE GREATER THAN EXP VALUE',    *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRDYNA  EQU   *\n         WTO   'DM160PRP - ERROR ON DYNAMIC ALLOCATE - SEE DAIR MSG',  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRMTM   EQU   *\n         WTO   'DM160PRP - EDTDMCDS FILE IS EMPTY',                    *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRMTV   EQU   *\n         WTO   'DM160PRP - TESTVTOC FILE IS EMPTY',                    *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPD   EQU   *\n         WTO   'DM160PRP - OPEN FAILED FOR DISTTBL ',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPH   EQU   *\n         WTO   'DM160PRP - OPEN FAILED FOR HCMDD   ',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPM   EQU   *\n         WTO   'DM160PRP - OPEN FAILED FOR EDTDMCDS',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPR   EQU   *\n         WTO   'DM160PRP - OPEN FAILED FOR RPTMAST',                   *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPT   EQU   *\n         WTO   'DM160PRP - OPEN FAILED FOR TESTMAST',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPV   EQU   *\n         WTO   'DM160PRP - OPEN FAILED FOR TESTVTOC',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPZ   EQU   *\n         WTO   'DM160PRP - OPEN FAILED FOR PGMR SYSOUT DCB',           *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRPARMB EQU   *\n         WTO   'DM160PRP - BAD SYNTAX IN PARM FIELD',                  *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRPARMD EQU   *\n         WTO   'DM160PRP - PARM OPTION SPECIFIED TWICE',               *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRPARMM EQU   *\n         WTO   'DM160PRP - PARM OPTION MISSING',                       *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRPARMN EQU   *\n         WTO   'DM160PRP - NO PARM SUPPLIED',                          *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRSQD   EQU   *\n         WTO   'DM160PRP - DISTTBL FILE OUT OF SEQUENCE',              *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRSQM   EQU   *\n         WTO   'DM160PRP - EDTDMCDS FILE OUT OF SEQUENCE',             *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRSQV   EQU   *\n         WTO   'DM160PRP - TESTVTOC FILE OUT OF SEQUENCE',             *\n               ROUTCDE=11,DESC=7\n         B     ABEND\n         TITLE 'EXIT/ABEND'\nABEND    EQU   *\n         ABEND 1000,DUMP\nEXIT     EQU   *\n         MVI   SWT,C'Y'       SET TO YES TOTALS\n         BAL   R14,GENT       WRITE SUMMARY TOTALS\n         BAL   R14,CLSM       CLOSE MODEL FILES\n         CLOSE (DISTTBL)\n         CLOSE (TESTVTOC)\n         CLOSE (TESTMAST)\n         CLOSE (EDTDMCDS)\n         CLOSE (RPTMAST)\n         CLOSE (HCMDD)\n         L     R13,4(R13)\n         RETURN (14,12),RC=0\n         LTORG\n         TITLE 'DATA AREAS - MISCELLANEOUS'\nSAVEAREA DS    9D                  REG SAVE AREA\n*\nWORKDW   DS    D                   DOUBLE WORK WORK AREA\n*\nVPRIDS   DC    PL3'0'              # OF PRIMARY DATASETS\nVTRKALOC DC    PL4'0'              # OF PRIMARY TRACKS ALLOCATED\nVTRKUSED DC    PL4'0'              # OF PRIMARY TRACKS USED\nMMIGDS   DC    PL3'0'              # OF MIGRATED DATASETS\nMTRKL1   DC    PL4'0'              # OF MIGRATED LVL1 TRACKS\nMBLKL2   DC    PL5'0'              # OF MIGRATED LVL2 2K-BLKS\n*\nBLDPR14  DS    F                   R14 SAVE AREA\nCHKDR14  DS    F                   R14 SAVE AREA\nCHKMR14  DS    F                   R14 SAVE AREA\nCHKTR14  DS    F                   R14 SAVE AREA\nCHKVR14  DS    F                   R14 SAVE AREA\nCKXPR14  DS    F                   R14 SAVE AREA\nCLSMR14  DS    F                   R14 SAVE AREA\nDATER14  DS    F                   R14 SAVE AREA\nDYNAR14  DS    F                   R14 SAVE AREA\nGENHR14  DS    F                   R14 SAVE AREA\nGENMR14  DS    F                   R14 SAVE AREA\nGENTR14  DS    F                   R14 SAVE AREA\nGENVR14  DS    F                   R14 SAVE AREA\nGETKR14  DS    F                   R14 SAVE AREA\nOPNMR14  DS    F                   R14 SAVE AREA\nPARMR14  DS    F                   R14 SAVE AREA\nPR1LR14  DS    F                   R14 SAVE AREA\nPR2LR14  DS    F                   R14 SAVE AREA\nPR1HR14  DS    F                   R14 SAVE AREA\nPR2HR14  DS    F                   R14 SAVE AREA\nPUTMR14  DS    F                   R14 SAVE AREA\nPUTVR14  DS    F                   R14 SAVE AREA\n*\nDATCYY   DS    F                   DATCNVRT YEAR\nDATCMM   DS    F                   DATCNVRT MONTH\nDATCDD   DS    F                   DATCNVRT DAY OF MONTH\nDATCDOY  DS    F                   DATCNVRT DAY OF YEAR\nDATCDOW  DS    F                   DATCNVRT DAY OF WEEK\nDATCJDAY DS    F                   DATCNVRT JULIAN DAY\n*\nDATCPRML DS    0F                  START OF DATCNVRT PARAM LIST\n         DC    A(DATCYY)\n         DC    A(DATCMM)\n         DC    A(DATCDD)\n         DC    A(DATCDOY)\n         DC    A(DATCDOW)\n         DC    XL1'80',AL3(DATCJDAY)\n*\nDATCNVRT DC    V(DATCNVRT)\n*\nDATEYD   DS    F                   CURRENT DATE (00YYDDDF - PACKED)\nDATECJDY DS    F                   CURRENT JULIAN DAY\nDATEWJDY DS    F                   WARNING JULIAN DAY\nDATEXJDY DS    F                   EXPIRED JULIAN DAY\n*\nCKXPJDAY DS    F                   EXPIRED JULIAN DAY\n*\nMDLLC    DC    F'0'                A(CURRENT MODEL DCB)\nMDLLF    DC    F'0'                A(FIRST   MODEL DCB)\n*\nPARMEXP  DS    H                   EXPIRATION PERIOD IN DAYS\nPARMEXP1 DS    H                   EXPIRATION PERIOD +1 FOR WARNING\nPARMWARN DS    H                   WARNING PERIOD IN DAYS\nPREFLEN  DC    H'0'                DSN PREFIX LENGTH (1)\n*\nPARMOUT  DS    C                   SYSOUT CLASS\n*\nDATEMM   DS    CL3\nDATEDD   DS    CL3\nDATEYY   DS    CL3\nPREFUID  DC    XL8'00'\nPREFPREF DC    XL9'00'\nPGMRDDN  DC    CL8'ERROR'\nCKXPRDAT DS    PL3\nCKXPPDOY DS    PL2\nMSGX     DC    CL23'******* EXPIRED *******'\nMSGW     DC    CL23'**** EXPIRES YYDDD ****'\n*                   01234567890123\nMSGWXPDT EQU   MSGW+13,5\n*\nMKEY     DC    XL44'00'            MASTER KEY\n*                                  TELLS US THE KEY OF THE CURRENT REC\nKEYD     DC    XL8'00'             SEQUENCE CHECK KEY FOR D REC\nKEYM     DC    XL44'00'            SEQUENCE CHECK KEY FOR M REC\nKEYV     DC    XL44'00'            SEQUENCE CHECK KEY FOR V REC\n*\nSWD      DC    C'N'                FILE D STATUS SW\n*              C'N'                NO REC IN BUF\n*              C'Y'                REC IN BUF\n*              C'E'                FILE AT EOF\nSWM      DC    C'N'                FILE M STATUS SW\n*              C'N'                NO REC IN BUF\n*              C'Y'                REC IN BUF\n*              C'E'                FILE AT EOF\nSWK      DC    C'N'                MASTER KEY OK\n*              C'Y'                YES -- OK\n*              C'E'                EMPTY\nSWPE     DC    C'N'                PARM END VALUE OK\n*              C'Y'                YES -- OK\n*              C'N'                NO  -- MISSING\nSWPO     DC    C'N'                PARM OUT VALUE OK\n*              C'Y'                YES -- OK\n*              C'N'                NO  -- MISSING\nSWPW     DC    C'N'                PARM WARN VALUE OK\n*              C'Y'                YES -- OK\n*              C'N'                NO  -- MISSING\nSWV      DC    C'N'                FILE V STATUS SW\n*              C'N'                NO REC IN BUF\n*              C'Y'                REC IN BUF\n*              C'E'                FILE AT EOF\n*\nSWT      DC    C'N'                SUMMARY TOTALS STATUS SW\n*              C'N'                NO NOT READY FOR TOTALS\n*              C'Y'                YES READY TO PRINT\n*\nSPACES   DC    CL133' '\n         TITLE 'DM160PRP - RECORD AREAS'\nPR1LLINE DC    PL2'59'             CURRENT LINE NUMBER\nPR1LMAX  DC    PL2'59'             LINES PER PAGE\nPR1LPAGE DC    PL3'0'              CURRENT PAGE NUMBER\n*\nPR2LLINE DC    PL2'59'             CURRENT LINE NUMBER\nPR2LMAX  DC    PL2'59'             LINES PER PAGE\nPR2LPAGE DC    PL3'0'              CURRENT PAGE NUMBER\n*\n         DS    0D\nTREC     DS    CL107               T RECORD - TEST MASTER\n         ORG   TREC\n*                                  PM - INDICATES WHEN THE FIELD\n*                                       IS PRESENT.  IF THE FIELD IS\n*                                       ABSENT IT WILL BE FILLED WITH\n*                                       SPACES.\n*                                  P  - FIELD IS PRESENT FOR PRIMARY\n*                                   M - FIELD IS PRESENT FOR MIGRAT\nTRECDSN  DS    CL44                PM - DATA SET NAME\nTRECVOLP DS    CL6                 PM - PRIMARY VOLUME SERIAL\nTRECALOC DS    CL5                 PM - TRKS ALLOCATED\n*                                  P  - PRIMARY TRACKS ALLOC\n*                                   M - MIGRAT TRACKS ALLOC DISK\n*                                   M - 0 TAPE\nTRECUSED DS    CL5                 P  - TRACKS USED\nTRECDSO  DS    CL3                 P  - DATA SET ORGANIZATION\nTRECBSIZ DS    CL5                 P  - BLOCK SIZE\nTRECRECL DS    CL5                 P  - LOGICAL RECORD LENGTH\nTRECRFM  DS    CL3                 P  - RECORD FORMAT\nTRECXTNT DS    CL3                 P  - EXTENT COUNT\nTRECCDAT DS    CL5                 PM - CREATE DATE\nTRECRDAT DS    CL5                 PM - DATE LAST REFERENCED\nTRECVOLM DS    CL6                  M - MIGRATE VOLUME SERIAL\nTRECLVL  DS    C                   PM - MIGRATE LEVEL\n*                                  P  - P = PRIMARY\n*                                   M - 1 = LEVEL 1\n*                                   M - 2 = LEVEL 2\nTRECDEV  DS    C                    M - MIGRATE DEVICE\n*                                   M - D = DISK\n*                                   M - T = TAPE\nTRECSIZE DS    CL7                  M - MIGRATE FILE SIZE IN 2K BLOCKS\nTRECAAM  DS    CL3                 PM - ACCOUNTING CODE\n         ORG   ,                   TO END OF REC\n*\n         DS    0D\nDREC     DS    CL80                D RECORD - DIST TABLE RECORD\n         ORG   DREC\n         DS    CL2\nDRECUID  DS    CL8                 USER ID / HI LVL QUALIFIER\n         DS    C\nDRECNAME DS    CL29                NAME OF REPORT OWNER\nDRECDIST DS    CL19                DISTRIBUTION INFORMATION\n         DS    C\nDRECACCT DS    CL3                 ACCOUNTING INFORMATION\n         DS    C\nDRECDD   DS    CL8                 DD NAME\n         DS    CL8                 FILLER FOR TSO SEQ NUMBER\n         ORG   ,                   TO END OF REC\n*\n         DS    0D\nVREC     DS    CL89                V RECORD - TEST PACK VTOC INFO\n         ORG   VREC\nVRECDSN  DS    CL44\nVRECVOL  DS    CL6\nVRECALOC DS    CL5\nVRECUSED DS    CL5\nVRECDSO  DS    CL3\nVRECBSIZ DS    CL5\nVRECRECL DS    CL5\nVRECRFM  DS    CL3\nVRECXTNT DS    CL3\nVRECCDAT DS    CL5\nVRECRDAT DS    CL5\n         ORG   ,                   TO END OF REC\n*\n         DS    0D\nMREC     DS    CL132               M RECORD - MCDS INFO\n         ORG   MREC\nMRECDSND DS    CL44                PRIMARY DSN\nMRECALOC DS    CL5                 MIGRAT TRACKS\nMRECXTNT DS    CL3                 MIGRAT EXTENTS\nMRECDSNA DS    CL44                MIGRAT (A REC) DSN\nMRECVOLP DS    CL6                 PRIMARY VOL SER\nMRECVOLM DS    CL6                 MIGRAT VOL SER\nMRECLVL  DS    CL1                 MIGRAT LEVEL\nMRECDEV  DS    CL1                 MIGRAT DEVICE TYPE\nMRECSIZE DS    CL7                 MIGRAT NUMBER OF 2K BLOCKS\nMRECRDAT DS    CL5                 PRIMARY REF DATE YYDDD\nMRECCDAT DS    CL5                 PRIMARY CREATE DATE YYDDD\nMRECMDAT DS    CL5                 PRIMARY MIGRATE DATE YYDDD\n         ORG   ,                   TO END OF REC\n*\n         DS    0D\nRREC     DC    CL133' '            PRINT RECORD\n         ORG   RREC\n         DS    C                   CARRIAGE CONTROL\nRRECDSN  DS    CL44                DATA SET NAME\n         DS    C\nRRECVOL  DS    CL6                 VOLUME SERIAL\n         DS    C\nRRECALOC DS    CL5                 TRACKS ALLOCATED\n         DS    C\nRRECUSED DS    CL5                 TRACKS USED\n         DS    C\nRRECCDAT DS    CL5                 CREATE DATE\n         DS    C\nRRECRDAT DS    CL5                 DATE LAST REFERENCED\n         DS    C\nRRECMSG  DS    0CL23               EXPIRES/EXPIRED MESSAGE\nRRECDSO  DS    CL3                 DATA SET ORGANIZATION\n         DS    C\nRRECRFM  DS    CL3                 RECORD FORMAT\n         DS    C\nRRECRECL DS    CL5                 LOGICAL RECORD LENGTH\n         DS    C\nRRECBSIZ DS    CL5                 BLOCK SIZE\n         DS    C\nRRECXTNT DS    CL3                 EXTENT COUNT\n         DS    C\nRRECL    DS    C                   MIGRATE LEVEL (1 OR 2)\n         DS    C\nRRECD    DS    C                   MIGRATE DEVICE (D - DISK, T - TAPE)\n         DS    C\nRRECSIZE DS    CL7                 MIGRATE SIZE IN 2K BLOCKS\n         DS    C\nRRECMDAT DS    CL5                 MIGRATE DATE\n         ORG   ,                   TO END OF REC\n*\n         DS    0D\nSREC1    DC    CL133' '            SUMMARY TOTAL 1 LINE 1\n         ORG   SREC1\n         DC    C'-'                CARRIAGE CONTROL\n         DC    C' *** SUMMARY:   '\n         DC    C'DATASETS ON PRIMARY ='\nSREC1P   DS    CL7\n         DC    C'      TRKS ALLOCATED ='\nSREC1A   DS    CL10\n         DC    C'      TRKS USED ='\nSREC1U   DS    CL10\n         DC    C'      PCT USED ='\nSREC1X   DS    CL4\n         DC    C'%'\n         ORG   ,                   TO END OF REC\n*\n         DS    0D\nSREC2    DC    CL133' '            SUMMARY TOTAL 1 LINE 2\n         ORG   SREC2\n         DC    C'0'                CARRIAGE CONTROL\n         DS    CL16\n         DC    C'DATASETS MIGRATED   ='\nSREC2P   DS    CL7\n         DC    C'      LEVEL1 TRKS    ='\nSREC2T   DS    CL10\n         DC    C'      2K-BLKS   ='\nSREC2B   DS    CL10\n         ORG   ,                   TO END OF REC\n*\n         DS    0D\nSREC3    DC    CL133' '            SUMMARY TOTAL 1 LINE 3\n         ORG   SREC3\n         DC    C'-'                CARRIAGE CONTROL\n         DC    C'     <<<<<<<<<< '\n         DC    C'ROUTING INCORRECT? - RETURN TO QUALITY ASSURANCE,'\n         DC    C' PSC 299, WITH THE CORRECT INFORMATION.'\n         DC    C' >>>>>>>>>>'\n         ORG   ,                   TO END OF REC\n*\n         DS    0D\nHREC     DC    CL80' '             D RECORD - HSM DELETE RECORDS\n         ORG   HREC\n         DC    C'DELETE'           USER ID / HI LVL QUALIFIER\n         DS    C\nHRECDSN  DS    CL44                NAME OF REPORT OWNER\n         ORG   ,                   TO END OF REC\n*\n         EJECT\nPR1PT1   DC    CL133' '            TITLE 1 LINE 1\n         ORG   PR1PT1\n         DC    C'1'                CARRIAGE CONTROL (TOP OF PAGE)\nPR1PT1D  DS    CL19                DISTRIBUTION\n         DC    C' <==== DISTRIBUTION'\n         DS    CL10\n         DC    C'NAME:  '\nPR1PT1N  DS    CL29                REPORT USER NAME\n         DC    C'    BILLING:  '\nPR1PT1B  DS    CL3                 REPORT USER NAME\n         DC    C'        DD:  '\nPR1PT1S  DS    CL8                 SYSOUT DD NAME\n         ORG   ,                   TO END OF REC\n*\nPR1PT2   DC    CL133' '            TITLE 1 LINE 2\n         ORG   PR1PT2\n         DC    C'-'                CARRIAGE CONTROL (FORCE TO LINE 3)\n         DC    C'DM160-01'\n         ORG   PR1PT2+43\n         DC    C'DATA SET INFORMATION REPORT - MASTER'\n         ORG   PR1PT2+101\nPR1PT2M  DS    CL2\n         DC    C'/'\nPR1PT2D  DS    CL2\n         DC    C'/'\nPR1PT2Y  DS    CL2\n         DC    C' = '\nPR1PT2J  DS    CL5\n         ORG   PR1PT2+122\n         DC    C'PAGE'\nPR1PT2P  DS    CL7\n         ORG   ,                   TO END OF REC\n*\nPR1PT3   DC    CL133' '            TITLE 1 LINE 3\n         ORG   PR1PT3\n         DC    C'0'                CARRIAGE CONTROL (PRINTS ON LINE 5)\n         DC    CL45'DATA SET NAME'\n         DC    C'VOLSER '\n         DC    C'ALLOC '\n         DC    C' USED '\n         DC    C'DT-CR '\n         DC    C'DT-RF '\n         DC    C'DSO '\n         DC    C'RFM '\n         DC    C'LRECL '\n         DC    C'BSIZE '\n         DC    C'EXT '\n         DC    C'L '\n         DC    C'D '\n         DC    C'2K-BLKS '\n         DC    C'DT-MG '\n         ORG   ,                   TO END OF REC\n*\nPR1PT4   DC    CL133' '            TITLE 1 LINE 4\n         ORG   PR1PT4\n         DC    C' '                CARRIAGE CONTROL (PRINTS ON LINE 6)\n         DC    C'-------------------------------------------- '\n         DC    C'------ '\n         DC    C'----- '\n         DC    C'----- '\n         DC    C'----- '\n         DC    C'----- '\n         DC    C'--- '\n         DC    C'--- '\n         DC    C'----- '\n         DC    C'----- '\n         DC    C'--- '\n         DC    C'- '\n         DC    C'- '\n         DC    C'------- '\n         DC    C'----- '\n         ORG   ,                   TO END OF REC\n*\n         EJECT\nPR2PT1   DC    CL133' '            TITLE 2 LINE 1\n         ORG   PR2PT1\n         DC    C'1'                CARRIAGE CONTROL (TOP OF PAGE)\nPR2PT1D  DS    CL19                DISTRIBUTION\n         DC    C' <==== DISTRIBUTION'\n         DS    CL10\n         DC    C'NAME:  '\nPR2PT1N  DS    CL29                REPORT USER NAME\n         DC    C'    BILLING:  '\nPR2PT1B  DS    CL3                 REPORT USER NAME\n         DC    C'        DD:  '\nPR2PT1S  DS    CL8                 SYSOUT DD NAME\n         ORG   ,                   TO END OF REC\n*\nPR2PT2   DC    CL133' '            TITLE 2 LINE 2\n         ORG   PR2PT2\n         DC    C'-'                CARRIAGE CONTROL (FORCE TO LINE 3)\n         DC    C'DM160-02'\n         ORG   PR2PT2+43\n         DC    C'DATA SET INFORMATION REPORT - INDIVIDUAL'\n         ORG   PR2PT2+101\nPR2PT2M  DS    CL2\n         DC    C'/'\nPR2PT2D  DS    CL2\n         DC    C'/'\nPR2PT2Y  DS    CL2\n         DC    C' = '\nPR2PT2J  DS    CL5\n         ORG   PR2PT2+122\n         DC    C'PAGE'\nPR2PT2P  DS    CL7\n         ORG   ,                   TO END OF REC\n*\nPR2PT3   DC    CL133' '            TITLE 2 LINE 3\n         ORG   PR2PT3\n         DC    C'0'                CARRIAGE CONTROL (PRINTS ON LINE 5)\n         DC    CL45'DATA SET NAME'\n         DC    C'VOLSER '\n         DC    C'ALLOC '\n         DC    C' USED '\n         DC    C'DT-CR '\n         DC    C'DT-RF '\n         DC    C'DSO '\n         DC    C'RFM '\n         DC    C'LRECL '\n         DC    C'BSIZE '\n         DC    C'EXT '\n         DC    C'L '\n         DC    C'D '\n         DC    C'2K-BLKS '\n         DC    C'DT-MG '\n         ORG   ,                   TO END OF REC\n*\nPR2PT4   DC    CL133' '            TITLE 2 LINE 4\n         ORG   PR2PT4\n         DC    C' '                CARRIAGE CONTROL (PRINTS ON LINE 6)\n         DC    C'-------------------------------------------- '\n         DC    C'------ '\n         DC    C'----- '\n         DC    C'----- '\n         DC    C'----- '\n         DC    C'----- '\n         DC    C'--- '\n         DC    C'--- '\n         DC    C'----- '\n         DC    C'----- '\n         DC    C'--- '\n         DC    C'- '\n         DC    C'- '\n         DC    C'------- '\n         DC    C'----- '\n         ORG   ,                   TO END OF REC\n*\n         EJECT\n         TITLE 'DM160PRP - DYNALLOC PARAMETER LISTS'\n*\n*        FOR DYNALLOC:\n*        R1       ==> S99RBPTR (REQ BLK POINTER)\n*        S99RBPTR ==> S99RB    (REQUEST BLOCK)\n*        S99RB    ==> S99TUPL  (TEXT POINTER LIST)\n*        S99TUPL  ==> TEXT1    (DYNA OR JCL PARM)\n*                 ==> TEXT2    (DYNA OR JCL PARM)\n*                 ETC\n*\n*\n*        ALLOC LIST\n*\nDYNARBPT DS    0F\n         DC    XL1'80'         END OF LIST\n         DC    AL3(DYNARB)     RB POINTER\n*\nDYNARB   DS    0F\n         DC    AL1(20)         CONTROL BLOCK LENGTH\n         DC    XL1'01'         DSNAME ALLOCATE\n         DC    XL2'0000'       FLAGS 1\nDYNARBER DC    XL2'0000'       ERROR CODE\n         DC    XL2'0000'       INFO CODE\n         DC    A(DYNAUPL)      TEXT LIST POINTER\n         DC    XL4'00000000'   RESERVED\n         DC    XL4'00000000'   FLAGS2\n*\nDYNAUPL  DS    0F               DISP=OLD\n         DC    A(DYNAT1P)       TEXT1 POINTER - DDNAME\n         DC    XL1'80'          END OF LIST\n         DC    AL3(DYNAT2P)     TEXT2 POINTER - SYSOUT CLASS\n*\nDYNAT1P  DS    0C               DDNAME\n         DC    XL2'0001'        TEXT KEY\n         DC    XL2'0001'        TEXT NUMBER\n         DC    AL2(L'DYNAT1)    LENGTH OF TEXT\nDYNAT1   DC    C'ERROR   '      DDNAME\n*\nDYNAT2P  DS    0C               SYSOUT CLASS\n         DC    XL2'0018'        TEXT KEY\nDYNAT2N  DC    XL2'0000'        TEXT NUMBER (USE JOB CARD DEFAULT)\n         DC    AL2(L'DYNAT2)    LENGTH OF TEXT\nDYNAT2   DC    C'*'             SYSOUT CLASS\n*\n*        DAIRFAIL DATA\n*\nDYNERBP  DS    A(DYNARB)        A(DYNA/DYND PARAM LIST)\n         DC    A(DYNER15)       A(R15 RETURN CODE FROM DYNA/DYND)\n         DC    A(DYNEZERO)      A(IKJEFF02 OR 0)\n         DC    A(DYNEIDP)       A(DARIFAIL PARAMETERS)\n*\nDYNEZERO DC    A(0)             NO IKJEFF02 ADDR\nDYNER15  DS    F                R15 RETURN CODE FROM DYNA/DYND\nDYNEIDP  DS    0XL2             PARAMETERS\n         DC    X'80'            WTP (WRITE TO PROGRAMMER) ONLY\n         DC    X'32'            SVC 99 ERROR\n         TITLE 'WORK AREAS - DCBS'\n         PUSH  PRINT\n         PRINT NOGEN\nDISTTBL  DCB   DDNAME=DISTTBL,                                         X\n               DSORG=PS,                                               X\n               EODAD=CHKDEOF,                                          X\n               LRECL=80,                                               X\n               MACRF=GM,                                               X\n               RECFM=FB\n*\nTESTVTOC DCB   DDNAME=TESTVTOC,                                        X\n               DSORG=PS,                                               X\n               EODAD=CHKVEOF,                                          X\n               LRECL=89,                                               X\n               MACRF=GM,                                               X\n               RECFM=FB\n*\nTESTMAST DCB   DDNAME=TESTMAST,                                        X\n               DSORG=PS,                                               X\n               LRECL=107,                                              X\n               MACRF=PM,                                               X\n               RECFM=FB\n*\nEDTDMCDS DCB   DDNAME=EDTDMCDS,                                        X\n               DSORG=PS,                                               X\n               EODAD=CHKMEOF,                                          X\n               LRECL=132,                                              X\n               MACRF=GM,                                               X\n               RECFM=FB\n*\nRPTMAST  DCB   DDNAME=RPTMAST,                                         X\n               DSORG=PS,                                               X\n               LRECL=133,                                              X\n               MACRF=PM,                                               X\n               RECFM=FBA\n*\nHCMDD    DCB   DDNAME=HCMDD,                                           X\n               DSORG=PS,                                               X\n               LRECL=80,                                               X\n               MACRF=PM,                                               X\n               RECFM=FB\n*\n         DS    0D\nMODEL    DCB   DDNAME=MODEL,                                           X\n               DSORG=PS,                                               X\n               LRECL=133,                                              X\n               MACRF=PM,                                               X\n               RECFM=FBA\nMODELLEN EQU   *-MODEL\n*\n         DCBD  DSORG=(PS)\n         POP   PRINT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DM170PRP": {"ttr": 3844, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x04\\x06\\x04\\x06\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 1030, "newlines": 1030, "modlines": 0, "user": "FILE097"}, "text": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID.\n           DM170.\n       AUTHOR.\n           PAT RUSSELL.\n       REMARKS.\n      *\n      *    MONTHLY DM REPORT AND BILLING FILE FOR TEST PACKS.\n      *\n       ENVIRONMENT DIVISION.\n       CONFIGURATION SECTION.\n       SOURCE-COMPUTER.\n           IBM-370.\n       OBJECT-COMPUTER.\n           IBM-370.\n       SPECIAL-NAMES.\n           C01 IS TO-TOP.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n           SELECT AAMIN\n               ASSIGN TO UT-S-AAMIN.\n           SELECT GRPIN\n               ASSIGN TO UT-S-GRPIN.\n           SELECT MASTER\n               ASSIGN TO UT-S-MASTER.\n           SELECT HISTORY\n               ASSIGN TO UT-S-HISTORY.\n           SELECT WORK-HIST\n               ASSIGN TO UT-S-WORKHIST.\n           SELECT RPT-DETAIL\n               ASSIGN TO UT-S-RPTDET.\n           SELECT RPT-BILL\n               ASSIGN TO UT-S-RPTBILL.\n           SELECT RPT-SUMMARY\n               ASSIGN TO UT-S-RPTSUM.\n           SELECT BILL-OUT\n               ASSIGN TO UT-S-BILLOUT.\n           SELECT SORT-FILE\n               ASSIGN TO UT-S-SORTWK01.\n       DATA DIVISION.\n       FILE SECTION.\n       FD  AAMIN\n           RECORDING MODE IS F\n           RECORD CONTAINS 80 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           LABEL RECORDS ARE STANDARD\n           DATA RECORD IS AAMIN-REC.\n       01  AAMIN-REC.\n           02  AAMIN-REC-AAM       PIC XXX.\n           02  FILLER              PIC XX.\n           02  AAMIN-REC-GROUP     PIC 999.\n           02  FILLER              PIC X(72).\n       FD  GRPIN\n           RECORDING MODE IS F\n           RECORD CONTAINS 80 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           LABEL RECORDS ARE STANDARD\n           DATA RECORD IS GRPIN-REC.\n       01  GRPIN-REC.\n           02  GRPIN-TYPE          PIC XXX.\n           02  FILLER              PIC XX.\n           02  GRPIN-NUM           PIC 99.\n           02  FILLER              PIC XX.\n           02  GRPIN-DESC          PIC X(30).\n           02  FILLER              PIC X(41).\n       FD  MASTER\n           RECORDING MODE IS F\n           RECORD CONTAINS 107 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           LABEL RECORDS ARE STANDARD\n           DATA RECORD IS MASTER-REC.\n       01  MASTER-REC.\n           02  MAST-DSNAME         PIC X(44).\n           02  MAST-VOLSER-P       PIC X(6).\n           02  MAST-ALLOC          PIC 9(5).\n           02  MAST-ALLOC-X        REDEFINES MAST-ALLOC\n                                   PIC X(5).\n           02  MAST-USED-CUR       PIC 9(5).\n           02  MAST-USED-CUR-X     REDEFINES MAST-USED-CUR\n                                   PIC X(5).\n           02  MAST-DATASET-ORG    PIC X(3).\n           02  MAST-BLKSIZE        PIC 9(5).\n           02  MAST-BLKSIZE-X      REDEFINES MAST-BLKSIZE\n                                   PIC X(5).\n           02  MAST-LRECL          PIC 9(5).\n           02  MAST-LRECL-X        REDEFINES MAST-LRECL\n                                   PIC X(5).\n           02  MAST-RECORD-FORMAT  PIC X(3).\n           02  MAST-EXTENT-CT      PIC 9(3).\n           02  MAST-EXTENT-CT-X    REDEFINES MAST-EXTENT-CT\n                                   PIC X(3).\n           02  MAST-DT-CREATE      PIC 9(5).\n           02  MAST-DT-CREATE-X    REDEFINES MAST-DT-CREATE\n                                   PIC X(5).\n           02  MAST-DT-REF         PIC 9(5).\n           02  MAST-DT-REF-X       REDEFINES MAST-DT-REF\n                                   PIC X(5).\n           02  MAST-VOLSER-M       PIC X(6).\n           02  MAST-MIGRATE-LEVEL  PIC X.\n           02  MAST-MIGRATE-DEV    PIC X.\n           02  MAST-MIGRATE-SIZE   PIC 9(7).\n           02  MAST-MIGRATE-SIZE-X REDEFINES MAST-MIGRATE-SIZE\n                                   PIC X(7).\n           02  MAST-AAM            PIC X(3).\n       FD  HISTORY\n           RECORDING MODE IS F\n           RECORD CONTAINS 57 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           LABEL RECORDS ARE STANDARD\n           DATA RECORDS ARE DM-HST-HEAD\n                            DM-HST-REC.\n       01  DM-HST-HEAD.\n           02  DM-HST-LIT   PIC X(11).\n           02  DM-HST-DATE  PIC X(8).\n           02  DM-HST-FILL  PIC X(38).\n       01  DM-HST-REC.\n           02  DM-HST-GRP         PIC 999.\n           02  DM-HST-AAM         PIC XXX.\n           02  DM-HST-DSNAME      PIC X(44).\n           02  DM-HST-ALLOC       PIC 9(5).\n           02  DM-HST-L           PIC X.\n           02  DM-HST-D           PIC X.\n       FD  WORK-HIST\n           RECORDING MODE IS F\n           RECORD CONTAINS 57 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           LABEL RECORDS ARE STANDARD\n           DATA RECORD IS WK-HST-REC.\n       01  WK-HST-REC.\n           02  WK-HST-GRP         PIC 999.\n           02  WK-HST-AAM         PIC XXX.\n           02  WK-HST-DSNAME      PIC X(44).\n           02  WK-HST-ALLOC       PIC 9(5).\n           02  WK-HST-L           PIC X.\n           02  WK-HST-D           PIC X.\n       FD  RPT-DETAIL\n           RECORDING MODE IS F\n           RECORD CONTAINS 133 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           LABEL RECORD IS STANDARD\n           DATA RECORD IS DET-REC.\n       01  DET-REC.\n           02  DET-CC              PIC X.\n           02  DET-LINE            PIC X(132).\n       FD  RPT-BILL\n           RECORDING MODE IS F\n           RECORD CONTAINS 133 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           LABEL RECORD IS STANDARD\n           DATA RECORD IS RBL-REC.\n       01  RBL-REC.\n           02  RBL-CC              PIC X.\n           02  RBL-LINE            PIC X(132).\n       FD  RPT-SUMMARY\n           RECORDING MODE IS F\n           RECORD CONTAINS 133 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           LABEL RECORD IS STANDARD\n           DATA RECORD IS SUM-REC.\n       01  SUM-REC.\n           02  SUM-CC              PIC X.\n           02  SUM-LINE            PIC X(132).\n       FD  BILL-OUT\n           RECORDING MODE IS F\n           RECORD CONTAINS 80 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           LABEL RECORD IS STANDARD\n           DATA RECORD IS BILL-REC.\n       01  BILL-REC.\n           02  BILL-INDIC          PIC X.\n           02  BILL-NUM            PIC 99.\n           02  BILL-TOT1           PIC ZZZZZZZ9.\n           02  FILLER              REDEFINES BILL-TOT1.\n               03  FILLER          PIC X(5).\n               03  BILL-AAM        PIC X(3).\n           02  BILL-TOT2           PIC ZZZZZZZ9.\n           02  BILL-TOT3           PIC ZZZZZZZ9.\n           02  BILL-TOT4           PIC ZZZZZZZ9.\n           02  BILL-TOT5           PIC ZZZZZZZ9.\n           02  BILL-TOT6           PIC ZZZZZZZ9.\n           02  BILL-TOT7           PIC ZZZZZZZ9.\n           02  BILL-TOT8           PIC ZZZZZZZ9.\n           02  BILL-FILL           PIC X(13).\n       SD  SORT-FILE\n           RECORDING MODE IS F\n           DATA RECORD IS SORT-REC.\n       01  SORT-REC.\n           02  SORT-GRP           PIC 9(3).\n           02  SORT-AAM           PIC XXX.\n           02  SORT-DSNAME        PIC X(44).\n           02  SORT-ALLOC         PIC 9(5).\n           02  SORT-MIGRATE-LEVEL PIC X.\n           02  SORT-MIGRATE-DEV   PIC X.\n       WORKING-STORAGE SECTION.\n     5 77  PAN-VALET PICTURE X(24) VALUE '001CBT1799   10/13/88'.\n       01  GROUP-TABLE.\n           02  GROUP-ENTRY         OCCURS 1 TO 1000\n                                   DEPENDING ON WS-GROUP-HI\n                                   ASCENDING KEY IS GROUP-AAM\n                                   INDEXED BY GROUP-INDEX.\n               03  GROUP-AAM       PIC XXX.\n               03  GROUP-NUMBER    PIC S9(3) COMP-3.\n       01  WS-COMP                 COMP SYNC.\n           02  LINE-MAX            PIC S9(4) VALUE +56.\n           02  DET-SKIP-CT         PIC S9(4) VALUE +1.\n           02  DET-LINE-CT         PIC S9(4) VALUE +0.\n           02  DET-PAGE-CT         PIC S9(4) VALUE +0.\n           02  BIL-SKIP-CT         PIC S9(4) VALUE +1.\n           02  BIL-LINE-CT         PIC S9(4) VALUE +0.\n           02  BIL-PAGE-CT         PIC S9(4) VALUE +0.\n           02  SUM-SKIP-CT         PIC S9(4) VALUE +1.\n           02  SUM-LINE-CT         PIC S9(4) VALUE +0.\n           02  SUM-PAGE-CT         PIC S9(4) VALUE +0.\n           02  WS-DEV-DETAIL-IX    PIC S9(4) VALUE +0.\n           02  WS-VOLSER-HI        PIC S9(4) VALUE +0.\n           02  WS-GROUP-HI         PIC S9(4) VALUE +1.\n           02  ABEND-CODE          PIC S9(4) VALUE +1000.\n       01  WS-DISP.\n           02  SW-STAT-WORK-HIST   PIC X VALUE 'N'.\n           02  SW-STAT-SORT        PIC X VALUE 'N'.\n           02  WS-CUR-AAM          PIC XXX VALUE '   '.\n           02  WS-PRV-AAM          PIC XXX VALUE '   '.\n           02  WS-CUR-GRP          PIC 999 VALUE ZERO.\n           02  WS-PRV-GRP          PIC 999 VALUE ZERO.\n           02  DETAIL-LINE.\n               03  WS-DETAIL-CC    PIC X.\n               03  WS-DETAIL-TEXT  PIC X(132) VALUE SPACES.\n           02  WS-OLD-HIST-DATE    PIC X(8) VALUE SPACES.\n           02  WS-INDEX-SW-TBL     PIC X(99) VALUE ALL 'N'.\n           02  FILLER              REDEFINES WS-INDEX-SW-TBL.\n               03  INDEX-SW        PIC X OCCURS 99.\n           02  WS-SUB-SW-TABLE     PIC X(8) VALUE ALL 'N'.\n           02  FILLER              REDEFINES WS-SUB-SW-TABLE.\n               03  SUB-SW          PIC X OCCURS 8.\n           02  WS-DESC             PIC X(30) OCCURS 99.\n           02  SUB-DESC-TABLE      PIC X(88) VALUE SPACES.\n           02  FILLER              REDEFINES SUB-DESC-TABLE.\n               03  FILLER          OCCURS 8.\n                   04  SUB-DESC    PIC X(10).\n                   04  FILLER      PIC X.\n           02  WS-GRP              PIC 999.\n           02  FILLER              REDEFINES WS-GRP.\n               03  WS-GRP-INDEX    PIC 99.\n               03  WS-GRP-SUB      PIC 9.\n           02  WS-BILL-GRP         PIC 999.\n           02  FILLER              REDEFINES WS-BILL-GRP.\n               03  WS-BILL-GRP-INDEX   PIC 99.\n               03  WS-BILL-GRP-SUB     PIC 9.\n           02  WS-BILL-PRV-INDEX       PIC 99   VALUE ZERO.\n           02  WS-BILL-TOT1        PIC 99999999 VALUE ZERO.\n           02  WS-BILL-TOT2        PIC 99999999 VALUE ZERO.\n           02  WS-BILL-TOT3        PIC 99999999 VALUE ZERO.\n           02  WS-BILL-TOT4        PIC 99999999 VALUE ZERO.\n           02  WS-BILL-TOT5        PIC 99999999 VALUE ZERO.\n           02  WS-BILL-TOT6        PIC 99999999 VALUE ZERO.\n           02  WS-BILL-TOT7        PIC 99999999 VALUE ZERO.\n           02  WS-BILL-TOT8        PIC 99999999 VALUE ZERO.\n           02  WS-WORK-DATE.\n               03  WS-WORK-MM      PIC 99.\n               03  FILLER          PIC X.\n               03  WS-WORK-DD      PIC 99.\n               03  FILLER          PIC X.\n               03  WS-WORK-YY      PIC 99.\n       01  WS-COMP-3               COMP-3.\n           02  WS-DET-OLD          PIC S9(11) VALUE +0.\n           02  WS-DET-NEW          PIC S9(11) VALUE +0.\n           02  WS-DET-NET          PIC S9(11) VALUE +0.\n           02  WS-AAM-OLD          PIC S9(11) VALUE +0.\n           02  WS-AAM-NEW          PIC S9(11) VALUE +0.\n           02  WS-AAM-NET          PIC S9(11) VALUE +0.\n           02  WS-GRP-OLD          PIC S9(11) VALUE +0.\n           02  WS-GRP-NEW          PIC S9(11) VALUE +0.\n           02  WS-GRP-NET          PIC S9(11) VALUE +0.\n           02  WS-TOT-OLD          PIC S9(11) VALUE +0.\n           02  WS-TOT-NEW          PIC S9(11) VALUE +0.\n           02  WS-TOT-NET          PIC S9(11) VALUE +0.\n           02  WS-DATCNVRT-DOW     PIC S9(8).\n           02  WS-DATCNVRT-JDAY    PIC S9(8).\n       01  CTRL-CARD.\n           02  CTRL-TYPE           PIC XXXX.\n           02  FILLER              PIC X.\n           02  CTRL-PID            PIC X(8).\n           02  FILLER              PIC X.\n           02  CTRL-BANK           PIC XXX.\n           02  FILLER              PIC X.\n           02  CTRL-DATE           PIC X(8).\n           02  FILLER              PIC X.\n           02  CTRL-SWITCHES.\n               03  SW-1            PIC X.\n               03  SW-2            PIC X.\n               03  SW-3            PIC X.\n               03  SW-4            PIC X.\n               03  SW-5            PIC X.\n               03  SW-6            PIC X.\n               03  SW-7            PIC X.\n               03  SW-8            PIC X.\n               03  SW-9            PIC X.\n               03  SW-10           PIC X.\n      *  FOLLOWING FIELDS MATCH DDA CTRL CARD FORMAT *\n           02  CTRL-USER-AREA.\n               03  FILLER          PIC X.\n               03  CTRL-CUR-DT.\n                   04  CTRL-CUR-MM     PIC XX.\n                   04  CTRL-CUR-DD     PIC XX.\n                   04  CTRL-CUR-YY     PIC XX.\n               03  CTRL-PREV-DT.\n                   04  CTRL-PREV-MM    PIC XX.\n                   04  CTRL-PREV-DD    PIC XX.\n                   04  CTRL-PREV-YY    PIC XX.\n               03  CTRL-DAYS-SINCE-LAST-PROC   PIC 9.\n               03  CTRL-NEXT-DT.\n                   04  CTRL-NEXT-MM    PIC XX.\n                   04  CTRL-NEXT-DD    PIC XX.\n                   04  CTRL-NEXT-YY    PIC XX.\n               03  CTRL-DAYS-TO-NEXT-PROC      PIC 9.\n               03  CTRL-FILLER-1   PIC X(13).\n               03  FILLER REDEFINES CTRL-FILLER-1.\n                   04  FILLER      PIC X.\n                   04  CTRL-2ND-NEXT-DATE.\n                       05  CTRL-2ND-NEXT-MM  PIC XX.\n                       05  CTRL-2ND-NEXT-DD  PIC XX.\n                       05  CTRL-2ND-NEXT-YY  PIC XX.\n                   04  FILLER      PIC X(6).\n           02  FILLER              REDEFINES CTRL-USER-AREA.\n               03  FILLER          PIC X.\n               03  CTRL-FACT       PIC 999V9999.\n               03  FILLER          PIC X.\n               03  CTRL-GRP-NUM    PIC 999.\n               03  FILLER          PIC X(22).\n           02  CTRL-COL-72         PIC X.\n           02  CTRL-COL-73-80      PIC X(8).\n       01  HEADING-1.\n           02  FILLER              PIC X(12) VALUE '    DM170-01'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC XXX   VALUE '   '.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(44) VALUE\n                                             'MONTHLY DETAIL REPORT'.\n           02  FILLER              PIC XXX   VALUE SPACES.\n           02  H-1-DATE-OLD        PIC X(9).\n           02  FILLER              PIC XXX   VALUE ' - '.\n           02  H-1-DATE-CUR        PIC X(9).\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(11) VALUE '       PAGE'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  H-1-PAGE            PIC Z,ZZ9.\n       01  HEADING-2.\n           02  FILLER              PIC X(12) VALUE '    DM170-02'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC XXX   VALUE '   '.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(44) VALUE\n                                             'MONTHLY SUMMARY REPORT'.\n           02  FILLER              PIC XXX   VALUE SPACES.\n           02  H-2-DATE-OLD        PIC X(9).\n           02  FILLER              PIC XXX   VALUE ' - '.\n           02  H-2-DATE-CUR        PIC X(9).\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(11) VALUE '       PAGE'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  H-2-PAGE            PIC Z,ZZ9.\n       01  HEADING-3.\n           02  FILLER              PIC X(12) VALUE '       GROUP'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC XXX   VALUE 'AAM'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(44) VALUE 'DSNAME'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(14) VALUE '     OLD ALLOC'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(07) VALUE ' OLD ON'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(14) VALUE '     NEW ALLOC'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(07) VALUE ' NEW ON'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(15) VALUE '     NET CHANGE'.\n       01  HEADING-4.\n           02  FILLER              PIC X(12) VALUE '       GROUP'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC XXX   VALUE '   '.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(44) VALUE '      '.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(14) VALUE '     OLD ALLOC'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(14) VALUE '     NEW ALLOC'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(15) VALUE '     NET CHANGE'.\n       01  HEADING-5.\n           02  FILLER              PIC X(10) VALUE ' DM170-05 '.\n           02  FILLER              PIC X(44) VALUE\n                                             'MONTHLY BILLING REPORT'.\n           02  FILLER              PIC XXX   VALUE SPACES.\n           02  H-5-DATE-OLD        PIC X(9).\n           02  FILLER              PIC XXX   VALUE ' - '.\n           02  H-5-DATE-CUR        PIC X(9).\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(11) VALUE '       PAGE'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  H-5-PAGE            PIC Z,ZZ9.\n       01  HEADING-6.\n           02  FILLER              PIC X(8) VALUE ' GROUP  '.\n           02  FILLER              PIC X(31) VALUE 'DESCRIPTION '.\n           02  H-6-DET             PIC X(95) VALUE SPACES.\n       01  DET-D.\n           02  FILLER              PIC X(08) VALUE SPACES.\n           02  DET-D-GRP           PIC XXX.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  DET-D-AAM           PIC XXX.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  DET-D-DSNAME        PIC X(44).\n           02  FILLER              PIC X     VALUE SPACES.\n           02  DET-D-OLD           PIC ZZ,ZZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  DET-D-OON           PIC X(7).\n           02  FILLER              PIC X     VALUE SPACES.\n           02  DET-D-NEW           PIC ZZ,ZZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  DET-D-NON           PIC X(7).\n           02  FILLER              PIC X     VALUE SPACES.\n           02  DET-D-NET           PIC ---,---,---,--9.\n       01  DET-B.\n           02  FILLER              PIC XXX VALUE SPACES.\n           02  DET-B-NUM           PIC 99.\n           02  FILLER              PIC XX VALUE SPACES.\n           02  DET-B-DESC          PIC X(30).\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-B-TOT1          PIC ZZ,ZZZ,ZZ9.\n           02  FILLER              REDEFINES DET-B-TOT1.\n               03  FILLER          PIC X(7).\n               03  DET-B-AAM       PIC X(3).\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-B-TOT2          PIC ZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-B-TOT3          PIC ZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-B-TOT4          PIC ZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-B-TOT5          PIC ZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-B-TOT6          PIC ZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-B-TOT7          PIC ZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-B-TOT8          PIC ZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X(8) VALUE SPACES.\n       01  SUM-A.\n           02  FILLER              PIC X(08) VALUE SPACES.\n           02  SUM-A-GRP           PIC XXX.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  SUM-A-AAM           PIC XXX.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(44) VALUE 'THIS AAM'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  SUM-A-OLD           PIC ZZ,ZZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  SUM-A-NEW           PIC ZZ,ZZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  SUM-A-NET           PIC ---,---,---,--9.\n       01  SUM-G.\n           02  FILLER              PIC X(08) VALUE SPACES.\n           02  SUM-G-GRP           PIC XXX.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC XXX   VALUE SPACES.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(44) VALUE 'THIS GROUP'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  SUM-G-OLD           PIC ZZ,ZZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  SUM-G-NEW           PIC ZZ,ZZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  SUM-G-NET           PIC ---,---,---,--9.\n       01  SUM-T.\n           02  FILLER              PIC X(08) VALUE SPACES.\n           02  FILLER              PIC XXX   VALUE SPACES.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC XXX   VALUE SPACES.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(44) VALUE 'GRAND TOTAL'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  SUM-T-OLD           PIC ZZ,ZZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  SUM-T-NEW           PIC ZZ,ZZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  SUM-T-NET           PIC ---,---,---,--9.\n           EJECT\n       PROCEDURE DIVISION.\n           MOVE CURRENT-DATE TO H-1-DATE-CUR\n                                H-2-DATE-CUR\n                                H-5-DATE-CUR\n                                WS-WORK-DATE.\n           MOVE 'DM170PRP' TO CTRL-PID.\n           MOVE 'EDIT' TO CTRL-TYPE.\n           CALL 'GETCTRL' USING CTRL-CARD.\n           IF CTRL-GRP-NUM NOT NUMERIC\n               THEN DISPLAY 'CTRL CARD DEFAULT GROUP NOT NUMERIC'\n                            UPON CONSOLE\n                    CALL 'USERDUMP' USING ABEND-CODE.\n           PERFORM INIT-DESC-TABLE.\n           MOVE SUB-DESC-TABLE TO H-6-DET.\n           PERFORM INIT-GROUP-TABLE.\n           PERFORM INIT-WORK-HIST.\n           SORT SORT-FILE ON ASCENDING KEY SORT-GRP\n                                           SORT-AAM\n                                           SORT-DSNAME\n               INPUT PROCEDURE IS SORT-IN\n               OUTPUT PROCEDURE IS SORT-OUT.\n           GO TO E-O-J.\n       SORT-IN SECTION.\n           OPEN INPUT MASTER.\n       SORT-IN-LOOP.\n           READ MASTER AT END\n               CLOSE MASTER\n               GO TO SORT-IN-EXIT.\n           MOVE MAST-AAM TO SORT-AAM.\n           MOVE MAST-DSNAME TO SORT-DSNAME.\n           INSPECT MAST-ALLOC-X\n               REPLACING ALL ' ' BY '0'.\n           IF MAST-ALLOC-X NOT NUMERIC\n               THEN MOVE ZERO TO MAST-ALLOC.\n           MOVE MAST-ALLOC TO SORT-ALLOC.\n           MOVE MAST-MIGRATE-LEVEL TO SORT-MIGRATE-LEVEL.\n           MOVE MAST-MIGRATE-DEV   TO SORT-MIGRATE-DEV.\n           PERFORM FIND-GROUP-NUM.\n           RELEASE SORT-REC.\n           GO TO SORT-IN-LOOP.\n       SORT-IN-EXIT.\n           EXIT.\n       SORT-OUT SECTION.\n           OPEN INPUT  WORK-HIST\n                OUTPUT HISTORY\n                       BILL-OUT\n                       RPT-DETAIL\n                       RPT-SUMMARY\n                       RPT-BILL.\n           MOVE LINE-MAX TO DET-LINE-CT\n                            SUM-LINE-CT\n                            BIL-LINE-CT.\n           MOVE 'DM-HST-HEAD' TO DM-HST-LIT.\n           MOVE CURRENT-DATE  TO DM-HST-DATE.\n           MOVE SPACES        TO DM-HST-FILL.\n           WRITE DM-HST-HEAD.\n           MOVE SPACES        TO BILL-REC.\n           MOVE '1'           TO BILL-INDIC.\n           MOVE 00            TO BILL-NUM.\n           MOVE WS-WORK-MM    TO BILL-TOT1.\n           MOVE WS-WORK-DD    TO BILL-TOT2.\n           MOVE WS-WORK-YY    TO BILL-TOT3.\n           MOVE ZERO          TO BILL-TOT4\n                                 BILL-TOT5\n                                 BILL-TOT6\n                                 BILL-TOT7\n                                 BILL-TOT8.\n           WRITE BILL-REC.\n           MOVE WS-OLD-HIST-DATE TO H-1-DATE-OLD\n                                    H-2-DATE-OLD\n                                    H-5-DATE-OLD.\n           MOVE 'R' TO SW-STAT-WORK-HIST\n                       SW-STAT-SORT\n           READ WORK-HIST AT END\n               MOVE 'E' TO SW-STAT-WORK-HIST.\n           RETURN SORT-FILE AT END\n               MOVE 'E' TO SW-STAT-SORT.\n           IF (SW-STAT-WORK-HIST EQUAL 'E' AND\n               SW-STAT-SORT     EQUAL 'E') THEN\n               DISPLAY 'NO DATA TO PROCESS'\n                       UPON SYSOUT\n               MOVE +1000 TO ABEND-CODE\n               CALL 'USERDUMP' USING ABEND-CODE.\n           IF SW-STAT-WORK-HIST EQUAL 'E' THEN\n               PERFORM RESET-SORT\n               GO TO SORT-OUT-LOOP.\n           IF SW-STAT-SORT EQUAL 'E' THEN\n               PERFORM RESET-HIST\n               GO TO SORT-OUT-LOOP.\n           IF WK-HST-GRP LESS THAN SORT-GRP THEN\n               PERFORM RESET-HIST\n               GO TO SORT-OUT-LOOP.\n           IF WK-HST-GRP GREATER THAN SORT-GRP THEN\n               PERFORM RESET-SORT\n               GO TO SORT-OUT-LOOP.\n           IF WK-HST-AAM LESS THAN SORT-AAM THEN\n               PERFORM RESET-HIST\n               GO TO SORT-OUT-LOOP.\n           PERFORM RESET-SORT.\n       SORT-OUT-LOOP.\n           IF SW-STAT-WORK-HIST EQUAL 'N' THEN\n               MOVE 'R' TO SW-STAT-WORK-HIST\n               READ WORK-HIST AT END\n                   MOVE 'E' TO SW-STAT-WORK-HIST.\n           IF SW-STAT-SORT EQUAL 'N' THEN\n               MOVE 'R' TO SW-STAT-SORT\n               RETURN SORT-FILE AT END\n                   MOVE 'E' TO SW-STAT-SORT.\n           PERFORM LEDGER-CHECK.\n           IF (SW-STAT-WORK-HIST EQUAL 'E' AND\n               SW-STAT-SORT     EQUAL 'E') THEN\n               GO TO SORT-OUT-END.\n           GO TO SORT-OUT-LOOP.\n       SORT-OUT-END.\n           CLOSE       WORK-HIST\n                       HISTORY\n                       BILL-OUT\n                       RPT-DETAIL\n                       RPT-BILL\n                       RPT-SUMMARY.\n       SORT-OUT-EXIT.\n           EXIT.\n       RESET-SORT SECTION.\n           MOVE SORT-GRP TO WS-CUR-GRP\n                            WS-PRV-GRP\n                            WS-BILL-GRP.\n           MOVE WS-BILL-GRP-INDEX TO WS-BILL-PRV-INDEX.\n           MOVE SORT-AAM TO WS-CUR-AAM\n                            WS-PRV-AAM.\n       RESET-SORT-EXIT.\n           EXIT.\n       RESET-HIST SECTION.\n           MOVE WK-HST-GRP TO WS-CUR-GRP\n                              WS-PRV-GRP\n                              WS-BILL-GRP.\n           MOVE WS-BILL-GRP-INDEX TO WS-BILL-PRV-INDEX.\n           MOVE WK-HST-AAM TO WS-CUR-AAM\n                              WS-PRV-AAM.\n       RESET-HIST-EXIT.\n           EXIT.\n       LEDGER-CHECK SECTION.\n           IF (SW-STAT-WORK-HIST EQUAL 'E' AND\n               SW-STAT-SORT     EQUAL 'E') THEN\n               PERFORM AAM-BREAK\n               GO TO LEDGER-CHECK-EXIT.\n           IF SW-STAT-WORK-HIST EQUAL 'E' THEN\n               GO TO LEDGER-CHECK-SORT.\n           IF SW-STAT-SORT EQUAL 'E' THEN\n               GO TO LEDGER-CHECK-HIST.\n           IF WK-HST-GRP LESS THAN SORT-GRP THEN\n               GO TO LEDGER-CHECK-HIST.\n           IF WK-HST-GRP GREATER THAN SORT-GRP THEN\n               GO TO LEDGER-CHECK-SORT.\n           IF WK-HST-AAM LESS THAN SORT-AAM THEN\n               GO TO LEDGER-CHECK-HIST.\n           IF WK-HST-AAM GREATER THAN SORT-AAM THEN\n               GO TO LEDGER-CHECK-SORT.\n           IF WK-HST-DSNAME LESS THAN SORT-DSNAME THEN\n               GO TO LEDGER-CHECK-HIST.\n           IF WK-HST-DSNAME GREATER THAN SORT-DSNAME THEN\n               GO TO LEDGER-CHECK-SORT.\n           MOVE WK-HST-GRP      TO DET-D-GRP.\n           MOVE WK-HST-AAM      TO DET-D-AAM.\n           MOVE WK-HST-DSNAME   TO DET-D-DSNAME.\n           MOVE WK-HST-ALLOC    TO WS-DET-OLD.\n           MOVE SORT-ALLOC      TO WS-DET-NEW.\n           SUBTRACT WS-DET-OLD FROM WS-DET-NEW GIVING WS-DET-NET.\n           MOVE WS-DET-OLD      TO DET-D-OLD.\n           MOVE WS-DET-NEW      TO DET-D-NEW.\n           MOVE WS-DET-NET      TO DET-D-NET.\n           PERFORM WRITE-HIST.\n           MOVE 'N' TO SW-STAT-WORK-HIST\n                       SW-STAT-SORT.\n           MOVE WK-HST-GRP      TO WS-CUR-GRP.\n           MOVE WK-HST-AAM      TO WS-CUR-AAM.\n           PERFORM SET-OON.\n           PERFORM SET-NON.\n           GO TO LEDGER-CHECK-END.\n       LEDGER-CHECK-HIST.\n           MOVE WK-HST-GRP      TO DET-D-GRP.\n           MOVE WK-HST-AAM      TO DET-D-AAM.\n           MOVE WK-HST-DSNAME   TO DET-D-DSNAME.\n           MOVE WK-HST-ALLOC    TO WS-DET-OLD.\n           MOVE ZERO            TO WS-DET-NEW.\n           SUBTRACT WS-DET-OLD FROM WS-DET-NEW GIVING WS-DET-NET.\n           MOVE WS-DET-OLD      TO DET-D-OLD.\n           MOVE WS-DET-NEW      TO DET-D-NEW.\n           MOVE WS-DET-NET      TO DET-D-NET.\n           MOVE 'N' TO SW-STAT-WORK-HIST.\n           MOVE WK-HST-GRP      TO WS-CUR-GRP.\n           MOVE WK-HST-AAM      TO WS-CUR-AAM.\n           PERFORM SET-OON.\n           MOVE '   GONE' TO DET-D-NON.\n           GO TO LEDGER-CHECK-END.\n       LEDGER-CHECK-SORT.\n           MOVE SORT-GRP        TO DET-D-GRP.\n           MOVE SORT-AAM        TO DET-D-AAM.\n           MOVE SORT-DSNAME     TO DET-D-DSNAME.\n           MOVE ZERO            TO WS-DET-OLD.\n           MOVE SORT-ALLOC      TO WS-DET-NEW.\n           MOVE SORT-ALLOC      TO WS-DET-NET.\n           MOVE WS-DET-OLD      TO DET-D-OLD.\n           MOVE WS-DET-NEW      TO DET-D-NEW.\n           MOVE WS-DET-NET      TO DET-D-NET.\n           PERFORM WRITE-HIST.\n           MOVE 'N' TO SW-STAT-SORT.\n           MOVE SORT-GRP        TO WS-CUR-GRP.\n           MOVE SORT-AAM        TO WS-CUR-AAM.\n           MOVE '    NEW' TO DET-D-OON.\n           PERFORM SET-NON.\n       LEDGER-CHECK-END.\n           IF NOT (WS-CUR-GRP EQUAL WS-PRV-GRP AND\n                   WS-CUR-AAM EQUAL WS-PRV-AAM) THEN\n                   PERFORM AAM-BREAK.\n           ADD WS-DET-OLD TO WS-AAM-OLD.\n           ADD WS-DET-NEW TO WS-AAM-NEW.\n           ADD WS-DET-NET TO WS-AAM-NET.\n           MOVE DET-D           TO WS-DETAIL-TEXT.\n           PERFORM DET-A-LINE.\n       LEDGER-CHECK-EXIT.\n           EXIT.\n       SET-OON SECTION.\n           IF WK-HST-L EQUAL 'P' THEN\n               MOVE '  PRIME' TO DET-D-OON\n               GO TO SET-OON-EXIT.\n           IF WK-HST-D EQUAL 'D' THEN\n               MOVE 'MIGRATE' TO DET-D-OON\n               GO TO SET-OON-EXIT.\n           MOVE '   TAPE' TO DET-D-OON.\n       SET-OON-EXIT.\n           EXIT.\n       SET-NON SECTION.\n           IF SORT-MIGRATE-LEVEL EQUAL 'P' THEN\n               MOVE '  PRIME' TO DET-D-NON\n               GO TO SET-NON-EXIT.\n           IF SORT-MIGRATE-DEV EQUAL 'D' THEN\n               MOVE 'MIGRATE' TO DET-D-NON\n               GO TO SET-NON-EXIT.\n           MOVE '   TAPE' TO DET-D-NON.\n       SET-NON-EXIT.\n           EXIT.\n       AAM-BREAK SECTION.\n           MOVE WS-PRV-GRP      TO SUM-A-GRP.\n           MOVE WS-PRV-AAM      TO SUM-A-AAM.\n           MOVE WS-AAM-OLD      TO SUM-A-OLD.\n           MOVE WS-AAM-NEW      TO SUM-A-NEW.\n           MOVE WS-AAM-NET      TO SUM-A-NET.\n           MOVE SUM-A           TO WS-DETAIL-TEXT.\n           PERFORM SUM-A-LINE.\n           IF WS-PRV-GRP EQUAL 999 THEN\n               PERFORM G999-BREAK.\n           MOVE WS-CUR-AAM TO WS-PRV-AAM.\n           ADD WS-AAM-OLD  TO WS-GRP-OLD.\n           ADD WS-AAM-NEW  TO WS-GRP-NEW.\n           ADD WS-AAM-NET  TO WS-GRP-NET.\n           MOVE ZERO       TO WS-AAM-OLD\n                              WS-AAM-NEW\n                              WS-AAM-NET.\n           IF (SW-STAT-WORK-HIST EQUAL 'E' AND\n               SW-STAT-SORT     EQUAL 'E') THEN\n               PERFORM GRP-BREAK.\n           IF WS-CUR-GRP NOT EQUAL WS-PRV-GRP THEN\n               PERFORM GRP-BREAK.\n           IF  (WS-CUR-GRP EQUAL WS-PRV-GRP AND\n                WS-CUR-GRP EQUAL 999) THEN\n               PERFORM BILL-BREAK.\n           MOVE +2 TO DET-SKIP-CT.\n       AAM-BREAK-EXIT.\n           EXIT.\n       GRP-BREAK SECTION.\n           MOVE WS-PRV-GRP      TO SUM-G-GRP.\n           MOVE WS-GRP-OLD      TO SUM-G-OLD.\n           MOVE WS-GRP-NEW      TO SUM-G-NEW.\n           MOVE WS-GRP-NET      TO SUM-G-NET.\n           MOVE SUM-G           TO WS-DETAIL-TEXT.\n           PERFORM SUM-A-LINE.\n           PERFORM BILL-BREAK.\n           MOVE WS-CUR-GRP TO WS-PRV-GRP.\n           ADD WS-GRP-OLD  TO WS-TOT-OLD.\n           ADD WS-GRP-NEW  TO WS-TOT-NEW.\n           ADD WS-GRP-NET  TO WS-TOT-NET.\n           MOVE ZERO       TO WS-GRP-OLD\n                              WS-GRP-NEW\n                              WS-GRP-NET.\n           IF (SW-STAT-WORK-HIST EQUAL 'E' AND\n               SW-STAT-SORT     EQUAL 'E') THEN\n               PERFORM TOT-BREAK.\n           MOVE +2 TO SUM-SKIP-CT.\n       GRP-BREAK-EXIT.\n           EXIT.\n       TOT-BREAK SECTION.\n           MOVE WS-TOT-OLD      TO SUM-T-OLD.\n           MOVE WS-TOT-NEW      TO SUM-T-NEW.\n           MOVE WS-TOT-NET      TO SUM-T-NET.\n           MOVE SUM-T           TO WS-DETAIL-TEXT.\n           MOVE +2              TO SUM-SKIP-CT.\n           PERFORM SUM-A-LINE.\n       TOT-BREAK-EXIT.\n           EXIT.\n       BILL-BREAK SECTION.\n           IF WS-PRV-GRP EQUAL 999 THEN\n               GO TO BILL-BREAK-EXIT.\n       BILL-BREAK-SUB.\n           IF WS-BILL-GRP-SUB EQUAL 1 THEN\n               ADD WS-GRP-NEW TO WS-BILL-TOT1.\n           IF WS-BILL-GRP-SUB EQUAL 2 THEN\n               ADD WS-GRP-NEW TO WS-BILL-TOT2.\n           IF WS-BILL-GRP-SUB EQUAL 3 THEN\n               ADD WS-GRP-NEW TO WS-BILL-TOT3.\n           IF WS-BILL-GRP-SUB EQUAL 4 THEN\n               ADD WS-GRP-NEW TO WS-BILL-TOT4.\n           IF WS-BILL-GRP-SUB EQUAL 5 THEN\n               ADD WS-GRP-NEW TO WS-BILL-TOT5.\n           IF WS-BILL-GRP-SUB EQUAL 6 THEN\n               ADD WS-GRP-NEW TO WS-BILL-TOT6.\n           IF WS-BILL-GRP-SUB EQUAL 7 THEN\n               ADD WS-GRP-NEW TO WS-BILL-TOT7.\n           IF WS-BILL-GRP-SUB EQUAL 8 THEN\n               ADD WS-GRP-NEW TO WS-BILL-TOT8.\n           IF (SW-STAT-WORK-HIST EQUAL 'E' AND\n               SW-STAT-SORT     EQUAL 'E') THEN\n               GO TO BILL-BREAK-INDEX.\n           MOVE WS-CUR-GRP      TO WS-BILL-GRP.\n           IF WS-BILL-GRP-INDEX EQUAL WS-BILL-PRV-INDEX\n               THEN GO TO BILL-BREAK-EXIT.\n       BILL-BREAK-INDEX.\n           MOVE SPACES            TO BILL-REC.\n           MOVE '9'               TO BILL-INDIC.\n           MOVE WS-BILL-PRV-INDEX TO BILL-NUM.\n           MOVE WS-BILL-TOT1      TO BILL-TOT1.\n           MOVE WS-BILL-TOT2      TO BILL-TOT2.\n           MOVE WS-BILL-TOT3      TO BILL-TOT3.\n           MOVE WS-BILL-TOT4      TO BILL-TOT4.\n           MOVE WS-BILL-TOT5      TO BILL-TOT5.\n           MOVE WS-BILL-TOT6      TO BILL-TOT6.\n           MOVE WS-BILL-TOT7      TO BILL-TOT7.\n           MOVE WS-BILL-TOT8      TO BILL-TOT8.\n           WRITE BILL-REC.\n           MOVE SPACES TO DET-B.\n           MOVE WS-BILL-PRV-INDEX TO DET-B-NUM.\n           IF SUB-SW (1) EQUAL 'Y' THEN\n               MOVE WS-BILL-TOT1 TO DET-B-TOT1.\n           IF SUB-SW (2) EQUAL 'Y' THEN\n               MOVE WS-BILL-TOT2 TO DET-B-TOT2.\n           IF SUB-SW (3) EQUAL 'Y' THEN\n               MOVE WS-BILL-TOT3 TO DET-B-TOT3.\n           IF SUB-SW (4) EQUAL 'Y' THEN\n               MOVE WS-BILL-TOT4 TO DET-B-TOT4.\n           IF SUB-SW (5) EQUAL 'Y' THEN\n               MOVE WS-BILL-TOT5 TO DET-B-TOT5.\n           IF SUB-SW (6) EQUAL 'Y' THEN\n               MOVE WS-BILL-TOT6 TO DET-B-TOT6.\n           IF SUB-SW (7) EQUAL 'Y' THEN\n               MOVE WS-BILL-TOT7 TO DET-B-TOT7.\n           IF SUB-SW (8) EQUAL 'Y' THEN\n               MOVE WS-BILL-TOT8 TO DET-B-TOT8.\n           IF WS-BILL-PRV-INDEX EQUAL 00\n               THEN MOVE 'ERROR'                     TO DET-B-DESC\n               ELSE MOVE WS-DESC (WS-BILL-PRV-INDEX) TO DET-B-DESC.\n           MOVE DET-B TO WS-DETAIL-TEXT.\n           PERFORM BILL-A-LINE.\n           MOVE ZERO TO WS-BILL-TOT1\n                        WS-BILL-TOT2\n                        WS-BILL-TOT3\n                        WS-BILL-TOT4\n                        WS-BILL-TOT5\n                        WS-BILL-TOT6\n                        WS-BILL-TOT7\n                        WS-BILL-TOT8.\n           MOVE WS-BILL-GRP-INDEX TO WS-BILL-PRV-INDEX.\n       BILL-BREAK-EXIT.\n           EXIT.\n       G999-BREAK SECTION.\n           MOVE SPACES     TO BILL-REC.\n           MOVE 'A'        TO BILL-INDIC.\n           MOVE WS-PRV-AAM TO BILL-AAM.\n           MOVE WS-AAM-NEW TO BILL-TOT2.\n           MOVE ZERO       TO BILL-TOT3.\n           MOVE ZERO       TO BILL-TOT4.\n           MOVE ZERO       TO BILL-TOT5.\n           MOVE ZERO       TO BILL-TOT6.\n           MOVE ZERO       TO BILL-TOT7.\n           MOVE ZERO       TO BILL-TOT8.\n           MOVE ZERO       TO BILL-NUM.\n           WRITE BILL-REC.\n           MOVE SPACES TO DET-B.\n           MOVE WS-PRV-AAM TO DET-B-AAM.\n           MOVE WS-AAM-NEW TO DET-B-TOT2.\n           MOVE 'DEPARTMENT' TO DET-B-DESC.\n           MOVE DET-B TO WS-DETAIL-TEXT.\n           PERFORM BILL-A-LINE.\n       G999-BREAK-EXIT.\n           EXIT.\n       WRITE-HIST SECTION.\n           MOVE SORT-GRP           TO DM-HST-GRP.\n           MOVE SORT-AAM           TO DM-HST-AAM.\n           MOVE SORT-DSNAME        TO DM-HST-DSNAME.\n           MOVE SORT-ALLOC         TO DM-HST-ALLOC.\n           MOVE SORT-MIGRATE-LEVEL TO DM-HST-L.\n           MOVE SORT-MIGRATE-DEV   TO DM-HST-D.\n           WRITE DM-HST-REC.\n       INIT-GROUP-TABLE SECTION.\n           OPEN INPUT AAMIN.\n           SET GROUP-INDEX TO +1.\n           MOVE LOW-VALUES TO GROUP-ENTRY (GROUP-INDEX).\n           MOVE CTRL-GRP-NUM TO GROUP-NUMBER (GROUP-INDEX).\n       INIT-GROUP-TABLE-LOOP.\n           READ AAMIN AT END\n               GO TO INIT-GROUP-TABLE-END.\n           IF AAMIN-REC-AAM NOT GREATER THAN GROUP-AAM (GROUP-INDEX)\n               THEN\n               DISPLAY 'AAM TABLE OUT OF SEQUENCE'\n                       ' OLD ENTRY = ' GROUP-AAM (GROUP-INDEX)\n                       ' NEW ENTRY = ' AAMIN-REC-AAM\n                       UPON SYSOUT\n               MOVE +1000 TO ABEND-CODE\n               CALL 'USERDUMP' USING ABEND-CODE.\n           IF GROUP-INDEX GREATER THAN +999 THEN\n               DISPLAY 'BUSINESS GROUP TABLE OVERFLOW'\n                   UPON SYSOUT\n               MOVE +1000 TO ABEND-CODE\n               CALL 'USERDUMP' USING ABEND-CODE.\n           MOVE AAMIN-REC-GROUP TO WS-GRP.\n           IF (INDEX-SW (WS-GRP-INDEX) EQUAL 'N' OR\n               SUB-SW (WS-GRP-SUB) EQUAL 'N') THEN\n               DISPLAY 'INVALID GROUP NUM = ' WS-GRP\n                       ' FOR AAM = ' AAMIN-REC-AAM\n                       UPON SYSOUT\n               MOVE +1000 TO ABEND-CODE\n               CALL 'USERDUMP' USING ABEND-CODE.\n           ADD +1 TO WS-GROUP-HI.\n           SET GROUP-INDEX UP BY +1.\n           MOVE AAMIN-REC-AAM TO GROUP-AAM (GROUP-INDEX).\n           MOVE AAMIN-REC-GROUP TO GROUP-NUMBER (GROUP-INDEX).\n           GO TO INIT-GROUP-TABLE-LOOP.\n       INIT-GROUP-TABLE-END.\n           CLOSE AAMIN.\n       INIT-GROUP-TABLE-EXIT.\n           EXIT.\n       FIND-GROUP-NUM SECTION.\n           INSPECT SORT-AAM\n               REPLACING ALL ' ' BY '0'.\n           IF SORT-AAM NUMERIC THEN\n               MOVE 999 TO SORT-GRP\n               GO TO FIND-GROUP-NUM-EXIT.\n           SEARCH ALL GROUP-ENTRY\n               WHEN GROUP-AAM (GROUP-INDEX) EQUAL SORT-AAM\n                   GO TO FIND-GROUP-NUM-HIT.\n           SET GROUP-INDEX TO +1.\n       FIND-GROUP-NUM-HIT.\n           MOVE GROUP-NUMBER (GROUP-INDEX) TO SORT-GRP.\n       FIND-GROUP-NUM-EXIT.\n           EXIT.\n       INIT-WORK-HIST SECTION.\n           OPEN INPUT  HISTORY\n                OUTPUT WORK-HIST.\n           READ HISTORY AT END\n               MOVE '00/00/00' TO WS-OLD-HIST-DATE\n               GO TO INIT-WORK-HIST-END.\n           MOVE DM-HST-DATE    TO WS-OLD-HIST-DATE.\n       INIT-WORK-HIST-LOOP.\n           READ HISTORY AT END\n               GO TO INIT-WORK-HIST-END.\n           WRITE WK-HST-REC FROM DM-HST-REC.\n           GO TO INIT-WORK-HIST-LOOP.\n       INIT-WORK-HIST-END.\n           CLOSE HISTORY WORK-HIST.\n       INIT-WORK-HIST-EXIT.\n           EXIT.\n       DET-A-LINE SECTION.\n           ADD DET-SKIP-CT TO DET-LINE-CT.\n           IF DET-LINE-CT GREATER THAN LINE-MAX THEN\n               ADD +2 DET-SKIP-CT GIVING DET-LINE-CT\n               ADD +1 TO DET-PAGE-CT\n               MOVE DET-PAGE-CT TO H-1-PAGE\n               WRITE DET-REC FROM HEADING-1\n                   AFTER ADVANCING TO-TOP\n               WRITE DET-REC FROM HEADING-3\n                   AFTER ADVANCING 1.\n           WRITE DET-REC FROM DETAIL-LINE AFTER ADVANCING DET-SKIP-CT.\n           MOVE +1 TO DET-SKIP-CT.\n       BILL-A-LINE SECTION.\n           ADD BIL-SKIP-CT TO BIL-LINE-CT.\n           IF BIL-LINE-CT GREATER THAN LINE-MAX THEN\n               ADD +2 BIL-SKIP-CT GIVING BIL-LINE-CT\n               ADD +1 TO BIL-PAGE-CT\n               MOVE BIL-PAGE-CT TO H-5-PAGE\n               WRITE RBL-REC FROM HEADING-5\n                   AFTER ADVANCING TO-TOP\n               WRITE RBL-REC FROM HEADING-6\n                   AFTER ADVANCING 1.\n           WRITE RBL-REC FROM DETAIL-LINE AFTER ADVANCING BIL-SKIP-CT.\n           MOVE +1 TO BIL-SKIP-CT.\n       SUM-A-LINE SECTION.\n           ADD SUM-SKIP-CT TO SUM-LINE-CT.\n           IF SUM-LINE-CT GREATER THAN LINE-MAX THEN\n               ADD +2 SUM-SKIP-CT GIVING SUM-LINE-CT\n               ADD +1 TO SUM-PAGE-CT\n               MOVE SUM-PAGE-CT TO H-2-PAGE\n               WRITE SUM-REC FROM HEADING-2\n                   AFTER ADVANCING TO-TOP\n               WRITE SUM-REC FROM HEADING-4\n                   AFTER ADVANCING 1.\n           WRITE SUM-REC FROM DETAIL-LINE AFTER ADVANCING SUM-SKIP-CT.\n           MOVE +1 TO SUM-SKIP-CT.\n       INIT-DESC-TABLE SECTION.\n           OPEN INPUT GRPIN.\n       INIT-DESC-READ.\n           READ GRPIN AT END\n               GO TO INIT-DESC-END.\n           IF GRPIN-NUM NOT NUMERIC THEN\n               DISPLAY 'INVALID GRPIN REC - NUM NOT NUMERIC'\n                       UPON SYSOUT\n               CALL 'USERDUMP' USING ABEND-CODE.\n           IF GRPIN-NUM EQUAL 00 THEN\n               DISPLAY 'INVALID GRPIN REC - NUM = ZERO'\n                       UPON SYSOUT\n               CALL 'USERDUMP' USING ABEND-CODE.\n           IF GRPIN-TYPE EQUAL 'GRP' THEN\n               GO TO INIT-DESC-GRP.\n           IF GRPIN-TYPE EQUAL 'TYP' THEN\n               GO TO INIT-DESC-TYP.\n           DISPLAY 'INVALID GRPIN REC - INVALID TYPE'\n                   UPON SYSOUT\n           CALL 'USERDUMP' USING ABEND-CODE.\n       INIT-DESC-GRP.\n           MOVE 'Y' TO INDEX-SW (GRPIN-NUM).\n           MOVE GRPIN-DESC TO WS-DESC (GRPIN-NUM).\n           GO TO INIT-DESC-READ.\n       INIT-DESC-TYP.\n           IF GRPIN-NUM GREATER THAN 08 THEN\n               DISPLAY 'INVALID GRPIN REC - TYP GREATER THAN 8'\n                       UPON SYSOUT\n               CALL 'USERDUMP' USING ABEND-CODE.\n           MOVE 'Y' TO SUB-SW (GRPIN-NUM).\n           MOVE GRPIN-DESC TO SUB-DESC (GRPIN-NUM).\n           GO TO INIT-DESC-READ.\n       INIT-DESC-END.\n           CLOSE GRPIN.\n       INIT-DESC-TABLE-EXIT.\n           EXIT.\n       E-O-J SECTION.\n           STOP RUN.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DM190PUP": {"ttr": 4106, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00\\x84\\x00\\x84\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 132, "newlines": 132, "modlines": 0, "user": "FILE097"}, "text": "         TITLE 'DM190PUP - ISSUE HSM COMMANDS FROM CARDS'\nDM190PUP CSECT\n         REGS\n*\n*        READ CARDS AND ISSUE HSM COMMANDS\n*        COLS 01 - 72 CONTAIN THE COMMAND\n*        COLS 73 - 80 ARE IGNORED\n*\n         USING DM190PUP,R15   ADDRESSABILITY\n         B     MAINEP\n         DC    AL1(L'CSECTLIT)\nCSECTLIT DC    C'DM190PUP - XEQ COMMANDS FROM CARDS &SYSDATE &SYSTIME'\n         TITLE 'DM190PUP - INITIALIZATION'\nMAINEP   DS    0H\n         SAVE (14,12)         SAVE REGS\n         LR    R12,R15        MOVE BASE\n         DROP  R15\n         USING DM190PUP,R12   ADDRESSABILITY\n         LR    R2,R13         A(OLD SAVE AREA)\n         LA    R13,SAVEAREA   A(NEW SAVE AREA)\n         USING SAVEAREA,R13   ADDRESSABILITY\n         ST    R13,8(R2)      FORWARD CHAIN\n         ST    R2,4(R13)      BACK CHAIN\n         USING IHADCB,R6      ADDRESSABILITY\n         LA    R6,SYSIN       A(DCB)\n         OPEN  ((R6))\n         TM    DCBOFLGS,X'10' OK?\n         BZ    ERROPIN        NO -- ERROR\n         LA    R6,SYSPRINT    A(DCB)\n         OPEN  ((R6),OUTPUT)\n         TM    DCBOFLGS,X'10' OK?\n         BZ    ERROPPR        NO -- ERROR\n         TITLE 'DM190PUP - MAIN LOOP'\nLOOP     EQU   *\n         GET   SYSIN,INPREC   READ NEXT REC\n         MVC   HSMTEXT,INPCMD POST TO HSM AREA\n         MVC   PRTINP,INPREC  POST TO PRINT LINE\n         LA    R1,XEQPARM     POST PARAM LIST\n         L     R15,=V(HSMXEQ) A(SUBROUTINE)\n         BALR  R14,R15        EXECUTE IT\n         ST    R15,XEQRC      SAVE RETURN CODE\n         L     R15,HSMREQ     POST REQUEST CODE\n         CVD   R15,WORKDW     NOW PACKED\n         OI    WORKDW+7,X'0F' FIX SIGN\n         UNPK  PRTREQ,WORKDW  NOW CHAR\n         L     R15,HSMRC      POST MWE RETURN CODE\n         CVD   R15,WORKDW     NOW PACKED\n         OI    WORKDW+7,X'0F' FIX SIGN\n         UNPK  PRTMRC,WORKDW  NOW CHAR\n         L     R15,XEQRC      POST SVC RETURN CODE\n         CVD   R15,WORKDW     NOW PACKED\n         OI    WORKDW+7,X'0F' FIX SIGN\n         UNPK  PRTSRC,WORKDW  NOW CHAR\n         BAL   R14,PRTL       PRINT IT OUT\n         B     LOOP\n         TITLE 'DM190PUP - PRTL - PRINT A LINE'\nPRTL     EQU   *\n         ST    R14,PRTLR14    SAVE RETURN ADDR\n         PUT   SYSPRINT,PRTREC\n         L     R14,PRTLR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'HSMDRVE - ERROR ROUTINES'\nERROPIN  EQU   *\n         WTO   'DM190PUP - OPEN FAILED FOR SYSIN',                     X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nERROPPR  EQU   *\n         WTO   'DM190PUP - OPEN FAILED FOR SYSPRINT',                  X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nABEND    EQU   *\n         ABEND 1000,DUMP\n         TITLE 'DM190PUP - EXIT - TERMINATION'\nEXIT     EQU   *\n         CLOSE SYSIN\n         CLOSE SYSPRINT\n         L     R13,4(R13)     A(OLD SAVE AREA)\n         RETURN (14,12),RC=0\n         LTORG\n         TITLE 'DM190PUP - DATA AREA'\nSAVEAREA DS    9D             REG SAVE AREA\nWORKDW   DS    D              DOUBLEWORD WORK AREA\n*\nPRTLR14  DS    F              R14 SAVE AREA FOR PRTL - PRINT A LINE\n*\nXEQPARM  DS    0F             EXECUTE PARAMETER LIST\n         DC    A(HSMFUNC)\n         DC    A(HSMLEN)\n         DC    A(HSMTEXT)\n         DC    A(HSMREQ)\n         DC    X'80',AL3(HSMRC)\n*\nHSMFUNC  DC    F'9'\nHSMLEN   DC    F'72'\nHSMREQ   DS    F\nHSMRC    DS    F\nXEQRC    DS    F\nHSMTEXT  DS    CL80\n*\nINPREC   DS    0CL80          INPUT CARD BUF\nINPCMD   DS    CL72           HSM COMMAND AREA\n         DS    CL8            FILLER\n*\nPRTREC   DC    CL133' '       PRINT LINE BUF\n         ORG   PRTREC\n         DS    C              CHAR CONT\nPRTINP   DS    CL80           INPUT CARD\n         DS    C              FILLER\nPRTREQ   DS    CL15           HSM REQUEST NUMBER\n         DS    C              FILLER\nPRTMRC   DS    CL15           MWE RETURN CODE\n         DS    C              FILLER\nPRTSRC   DS    CL15           SVC RETURN CODE\n         ORG   ,              PAST LINE\n         TITLE 'DM190PUP - DCBS, DCBD'\n         PUSH  PRINT\n         PRINT NOGEN\nSYSIN    DCB   DDNAME=SYSIN,                                           X\n               DSORG=PS,                                               X\n               EODAD=EXIT,                                             X\n               LRECL=80,                                               X\n               MACRF=GM,                                               X\n               RECFM=FB\n*\nSYSPRINT DCB   DDNAME=SYSPRINT,                                        X\n               DSORG=PS,                                               X\n               LRECL=133,                                              X\n               MACRF=PM,                                               X\n               RECFM=FBA\n*\n         DCBD  DSORG=PS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DM200PUP": {"ttr": 4355, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x03\\xb3\\x03\\xb3\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 947, "newlines": 947, "modlines": 0, "user": "FILE097"}, "text": "       ID DIVISION.\n       PROGRAM-ID. DM200PUP.\n       AUTHOR. PAT RUSSELL.\n       REMARKS.\n      *\n      *    UPDATE DISK MANAGMENT DATABASE FROM 'TSO' VTOC LISTINGS.\n      *\n       ENVIRONMENT DIVISION.\n       CONFIGURATION SECTION.\n       OBJECT-COMPUTER. IBM-370.\n       SOURCE-COMPUTER. IBM-370.\n       SPECIAL-NAMES.\n           C01 IS TO-TOP.\n           EJECT\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n           SELECT TRANIN   ASSIGN TO UT-S-TRANFILE.\n           SELECT VOLSERIN ASSIGN TO UT-S-VOLSERIN.\n           SELECT MASTER   ASSIGN TO UT-S-MASTER.\n           SELECT WORKMAST ASSIGN TO UT-S-WORK.\n           SELECT ERRFILE  ASSIGN TO UT-S-ERROUT.\n           SELECT RPTTEMP  ASSIGN TO UT-S-RPTTEMP.\n           SELECT LISTFILE ASSIGN TO UT-S-LISTOUT.\n           SELECT SORTRAN  ASSIGN TO UT-S-SORTWK01.\n           SELECT SORTMAST ASSIGN TO UT-S-SORTWK01.\n           SKIP2\n       DATA DIVISION.\n       FILE SECTION.\n           SKIP2\n       FD  TRANIN\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 89 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS IN-FILE.\n       01  IN-FILE.\n           COPY CDMFD010.\n           SKIP2\n       FD  VOLSERIN\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 80 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS VOL-REC.\n       01  VOL-REC.\n           COPY CDMFD020.\n           SKIP2\n       FD  ERRFILE\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 133 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS ERR-REC.\n       01  ERR-REC                 PIC X(133).\n           SKIP2\n       FD  RPTTEMP\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 133 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS TEMP-REC.\n       01  TEMP-REC                PIC X(133).\n           SKIP2\n       FD  LISTFILE\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 133 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS LIST-REC.\n       01  LIST-REC                PIC X(133).\n           SKIP2\n       FD  MASTER\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 150 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS MAST-REC.\n       01  MAST-REC                PIC X(150).\n           SKIP2\n       FD  WORKMAST\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 150 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS WORK-REC.\n       01  WORK-REC                PIC X(150).\n           SKIP2\n       SD  SORTRAN\n           RECORDING MODE IS F\n           DATA RECORD IS SORTIN.\n       01  SORTIN.\n           02  SORT-ALLOC          PIC 9(5).\n           02  SORT-ALLOC-X        REDEFINES SORT-ALLOC\n                                   PIC X(5).\n           02  SORT-USED           PIC 9(5).\n           02  SORT-USED-X         REDEFINES SORT-USED\n                                   PIC X(5).\n           02  SORT-EXTENT-CT      PIC 9(2).\n           02  SORT-DSO            PIC X(3).\n           02  SORT-RFM            PIC X(3).\n           02  SORT-LRECL          PIC 9(5).\n           02  SORT-LRECL-X        REDEFINES SORT-LRECL\n                                   PIC X(5).\n           02  SORT-BLKSZ          PIC 9(5).\n           02  SORT-BLKSZ-X        REDEFINES SORT-BLKSZ\n                                   PIC X(5).\n           02  SORT-DT-CREATE      PIC 9(5).\n           02  SORT-DT-CREATE-X    REDEFINES SORT-DT-CREATE\n                                   PIC X(5).\n           02  SORT-DT-REF         PIC 9(5).\n           02  SORT-DT-REF-X       REDEFINES SORT-DT-REF\n                                   PIC X(5).\n           02  SORT-VOLSER         PIC X(6).\n           02  SORT-DSNAME         PIC X(44).\n           SKIP2\n       SD  SORTMAST\n           RECORDING MODE IS F\n           DATA RECORD IS SMST-REC.\n       01  SMST-REC.\n           02  FILLER              PIC X(7).\n           02  SMST-DSNAME         PIC X(44).\n           02  FILLER              PIC X(99).\n           EJECT\n       WORKING-STORAGE SECTION.\n       01  WS-MISC-CHAR.\n           02  MAST-SORT-SW        PIC X      VALUE 'N'.\n           02  WS-MAST-STAT-SW     PIC X      VALUE 'E'.\n      *                            E - EMPTY\n      *                            M - CONTAINS MAST REC\n      *                            T - CONTAINS TEMP REC\n           02  WS-VTC-GDG-SW       PIC X      VALUE 'N'.\n      *                            N - THIS VTOC REC NOT A GDG\n      *                            Y - THIS VTOC REC IS  A GDG\n           02  WS-PRV-GDG-SW       PIC X      VALUE 'N'.\n      *                            N - PREV VTOC REC NOT A GDG\n      *                            Y - PREV VTOC REC IS  A GDG\n           02  TRANIN-EOF-SW       PIC X      VALUE 'N'.\n               88 TRANIN-EOF       VALUE 'Y'.\n           02  MASTER-STAT-SW      PIC X      VALUE 'N'.\n               88  MASTER-EOF      VALUE 'Y'.\n               88  MASTER-READ     VALUE 'R'.\n           02  SORTFILE-EOF-SW     PIC X      VALUE 'N'.\n               88 SORTFILE-EOF     VALUE 'Y'.\n           02  GDG-DSNAME          PIC X(44)  VALUE SPACES.\n           02  WS-DSNAME           PIC X(44)  VALUE HIGH-VALUES.\n           02  WS-VOLSER           PIC X(6)   VALUE HIGH-VALUES.\n           02  GDG-VOLSER          PIC X(6)   VALUE SPACES.\n           02  GDG-DT-CREATE       PIC 9(5).\n           02  GDG-DT-REF          PIC 9(5).\n           02  GDG-RFM             PIC X(3).\n           02  GDG-LRECL           PIC 9(5).\n           02  GDG-BLKSZ           PIC 9(5).\n           02  WS-MMDDYY.\n               03  WS-MMDDYY-MM    PIC 99.\n               03  FILLER          PIC X.\n               03  WS-MMDDYY-DD    PIC 99.\n               03  FILLER          PIC X.\n               03  WS-MMDDYY-YY    PIC 99.\n           02  WS-YYDDD.\n               03  WS-YYDDD-YY     PIC 99.\n               03  WS-YYDDD-DDD    PIC 999.\n           02  WS-VOL-VOLSER       PIC X(6)   VALUE LOW-VALUES.\n           02  WS-VOL-BYTES        PIC 9999999.\n           02  WS-VOL-TRK-CYL      PIC 999.\n           02  WS-VOL-CYL-VOL      PIC 99999.\n           02  WS-VOL-POOL         PIC XXX.\n           02  WS-VOL-SW-DUP       PIC X.\n           02  WS-VOL-TRK-VOL      PIC 9999999.\n       01  VOLTAB-TABLE.\n           02  VOLTAB              OCCURS 1 TO 201\n                                   DEPENDING ON WS-VOLSER-HI\n                                   ASCENDING KEY IS VOLTAB-VOLSER\n                                   INDEXED BY VOL-INDEX.\n               03  VOLTAB-VOLSER   PIC X(6).\n               03  VOLTAB-BYTES    PIC 9999999.\n               03  VOLTAB-TRK-CYL  PIC 999.\n               03  VOLTAB-CYL-VOL  PIC 99999.\n               03  VOLTAB-POOL     PIC XXX.\n               03  VOLTAB-SW-DUP   PIC X.\n       01  WS-MAST-REC.\n           COPY CDMFD000.\n       01  WS-MISC-COMP-SYNC       COMP SYNC.\n           02  GDG-ALLOC           PIC S9(8)  VALUE +0.\n           02  GDG-USED            PIC S9(8)  VALUE +0.\n           02  GDG-EXTENT-CT       PIC S9(4)  VALUE +0.\n           02  ERR-LINE-CT         PIC S9(4)  VALUE +0.\n           02  ERR-PAGE-CT         PIC S9(4)  VALUE +0.\n           02  LIST-LINE-CT        PIC S9(4)  VALUE +0.\n           02  LIST-PAGE-CT        PIC S9(4)  VALUE +0.\n           02  TEMP-LINE-CT        PIC S9(4)  VALUE +0.\n           02  TEMP-PAGE-CT        PIC S9(4)  VALUE +0.\n           02  LINE-MAX            PIC S9(4)  VALUE +55.\n           02  ABEND-CODE          PIC S9(4)  VALUE +1000.\n           02  WS-VOLSER-HI        PIC S9(4)  VALUE +0.\n           02  D-C-YEAR            PIC S9(8).\n           02  D-C-MONTH           PIC S9(8).\n           02  D-C-DOM             PIC S9(8).\n           02  D-C-DOY             PIC S9(8).\n           02  D-C-DOW             PIC S9(8).\n           02  D-C-JDAY            PIC S9(8).\n           02  WS-TODAY-JDAY       PIC S9(8).\n           02  WS-DIFFDAY          PIC S9(8).\n       01  HEADING-1.\n           02  FILLER              PIC X(10)  VALUE ' DM200-01'.\n           02  H-1-DATE            PIC X(8)   VALUE SPACES.\n           02  FILLER              PIC X(15)  VALUE SPACES.\n           02  FILLER              PIC X(37)\n             VALUE 'STORAGE MANAGEMENT - EXCEPTION REPORT'.\n           02  FILLER              PIC X(15)  VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'PAGE '.\n           02  H-1-PAGE            PIC ZZZ9   VALUE ZEROES.\n       01  HEADING-2.\n           02  FILLER              PIC X(10)  VALUE ' DM200-02'.\n           02  H-2-DATE            PIC X(8)   VALUE SPACES.\n           02  FILLER              PIC X(15)  VALUE SPACES.\n           02  FILLER              PIC X(37)\n             VALUE 'STORAGE MANAGEMENT - MASTER LISTING  '.\n           02  FILLER              PIC X(35)  VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'PAGE '.\n           02  H-2-PAGE            PIC ZZZ9   VALUE ZEROES.\n       01  HEADING-3.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'AAM'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'IND'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(44)  VALUE 'DSNAME'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(6)   VALUE 'VOLSER'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'ALLOC'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE ' USED'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE '   HI'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'DT-CR'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'DT-RF'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'DSO'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'RFM'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'LRECL'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'BLKSI'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(7)   VALUE 'EXTENTS'.\n       01  HEADING-4.\n           02  FILLER              PIC X(10)  VALUE ' DM200-04'.\n           02  H-4-DATE            PIC X(8)   VALUE SPACES.\n           02  FILLER              PIC X(15)  VALUE SPACES.\n           02  FILLER              PIC X(37)\n             VALUE 'STORAGE MANAGEMENT - TEMP FILE REPORT'.\n           02  FILLER              PIC X(15)  VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'PAGE '.\n           02  H-4-PAGE            PIC ZZZ9   VALUE ZEROES.\n       01  DETAIL-LINE.\n           02  DETAIL-CC           PIC X      VALUE SPACES.\n           02  DETAIL-TEXT         PIC X(132) VALUE SPACES.\n       01  DET-XT.\n           02  FILLER              PIC X(9)   VALUE 'DSNAME = '.\n           02  DET-XT-DSNAME       PIC X(44)  VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE ' - '.\n           02  FILLER              PIC X(9)   VALUE 'VOLSER = '.\n           02  DET-XT-VOLSER       PIC X(6)   VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE ' - '.\n           02  FILLER              PIC X(10)  VALUE 'WARNING = '.\n           02  FILLER              PIC X(13)  VALUE\n                                   'TEMP DATASET '.\n           02  FILLER              PIC X(20)  VALUE\n                                   'ADDED TO MASTER FILE'.\n       01  DET-TD.\n           02  FILLER              PIC X(9)   VALUE 'DSNAME = '.\n           02  DET-TD-DSNAME       PIC X(44)  VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE ' - '.\n           02  FILLER              PIC X(9)   VALUE 'VOLSER = '.\n           02  DET-TD-VOLSER       PIC X(6)   VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE ' - '.\n           02  FILLER              PIC X(10)  VALUE 'WARNING = '.\n           02  FILLER              PIC X(13)  VALUE\n                                   'TEMP DATASET '.\n           02  FILLER              PIC X(24)  VALUE\n                                   'DROPPED FROM MASTER FILE'.\n       01  DET-XM.\n           02  FILLER              PIC X(9)   VALUE 'DSNAME = '.\n           02  DET-XM-DSNAME       PIC X(44)  VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE ' - '.\n           02  FILLER              PIC X(9)   VALUE 'VOLSER = '.\n           02  DET-XM-VOLSER       PIC X(6)   VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE ' - '.\n           02  FILLER              PIC X(8)   VALUE 'ERROR = '.\n           02  FILLER              PIC X(20)  VALUE\n                                   'DATASET NOT ON DASD'.\n       01  DET-SD.\n           02  FILLER              PIC X(9)   VALUE 'DSNAME = '.\n           02  DET-SD-DSNAME       PIC X(44)  VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE ' - '.\n           02  FILLER              PIC X(9)   VALUE 'VOLSER = '.\n           02  DET-SD-VOLSER       PIC X(6)   VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE ' - '.\n           02  FILLER              PIC X(8)   VALUE 'ERROR = '.\n           02  FILLER              PIC X(28)  VALUE\n                                   'DUPLICATE DATASET -- DROPPED'.\n       01  DET-SM.\n           02  FILLER              PIC X(9)   VALUE 'DSNAME = '.\n           02  DET-SM-DSNAME       PIC X(44)  VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE ' - '.\n           02  FILLER              PIC X(10)  VALUE 'WARNING = '.\n           02  FILLER              PIC X(22)  VALUE\n                                   'MASTER OUT OF SEQUENCE'.\n           02  FILLER              PIC X(18)  VALUE\n                                   '-- MASTER SORT RUN'.\n       01  DET-TF.\n           02  FILLER              PIC X(9)   VALUE 'DSNAME = '.\n           02  DET-TF-DSNAME       PIC X(44)  VALUE SPACES.\n           02  FILLER              PIC X(12)  VALUE ' - VOLSER = '.\n           02  DET-TF-VOLSER       PIC X(6)   VALUE SPACES.\n           02  FILLER              PIC X(11)  VALUE ' - ALLOC = '.\n           02  DET-TF-ALLOC        PIC ZZZZ9  VALUE ZERO.\n           02  FILLER              PIC X(13)  VALUE ' - CREATED = '.\n           02  DET-TF-DT-CREATE    PIC ZZZZ9  VALUE ZERO.\n           02  FILLER              PIC X(03)  VALUE ' = '.\n           02  DET-TF-DAYS-OLD     PIC ZZZZ9  VALUE ZERO.\n           02  FILLER              PIC X(09)  VALUE ' DAYS OLD'.\n       01  DET-V.\n           02  FILLER              PIC X(9)   VALUE 'DSNAME = '.\n           02  DET-V-DSNAME        PIC X(44)  VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE ' - '.\n           02  FILLER              PIC X(13)  VALUE 'OLD VOLSER = '.\n           02  DET-V-VOLSER-OLD    PIC X(6)   VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE ' - '.\n           02  FILLER              PIC X(13)  VALUE 'NEW VOLSER = '.\n           02  DET-V-VOLSER-NEW    PIC X(6)   VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE ' - '.\n           02  FILLER              PIC X(10)  VALUE 'WARNING = '.\n           02  FILLER              PIC X(19)  VALUE\n                                   'VOLSER HAS CHANGED'.\n       01  DET-LM.\n           02  DET-LM-AAM          PIC X(3).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-SW           PIC X(3).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-DSNAME       PIC X(44).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-VOLSER       PIC X(6).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-ALLOC        PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-USED         PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-USED-HI      PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-DT-CREATE    PIC 9(5).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-DT-REF       PIC 9(5).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-DSORG        PIC X(3).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-RECFM        PIC X(3).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-LRECL        PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-BLKSIZE      PIC ZZZZ9.\n           02  FILLER              PIC X(4)   VALUE SPACES.\n           02  DET-LM-EXTENT       PIC X(2).\n       PROCEDURE DIVISION.\n           MOVE LINE-MAX TO ERR-LINE-CT LIST-LINE-CT TEMP-LINE-CT.\n           OPEN OUTPUT ERRFILE.\n           MOVE CURRENT-DATE TO H-1-DATE H-2-DATE H-4-DATE WS-MMDDYY.\n           MOVE WS-MMDDYY-MM TO D-C-MONTH.\n           MOVE WS-MMDDYY-DD TO D-C-DOM.\n           MOVE WS-MMDDYY-YY TO D-C-YEAR.\n           MOVE ZERO TO D-C-DOY D-C-DOW D-C-JDAY.\n           CALL 'DATCNVRT' USING D-C-YEAR\n                                 D-C-MONTH\n                                 D-C-DOM\n                                 D-C-DOY\n                                 D-C-DOW\n                                 D-C-JDAY.\n           MOVE D-C-JDAY TO WS-TODAY-JDAY.\n           PERFORM MAST-CHECK.\n           PERFORM BLD-VOLSER.\n           SORT SORTRAN\n               ASCENDING KEY SORT-DSNAME SORT-VOLSER\n           INPUT PROCEDURE IS SORT-IN THRU SORT-IN-EXIT\n           OUTPUT PROCEDURE IS SORT-OUT THRU SORT-OUT-EXIT.\n           CLOSE ERRFILE.\n           GO TO E-O-J.\n       MAST-CHECK SECTION.\n           OPEN INPUT MASTER OUTPUT WORKMAST.\n           READ MASTER AT END\n               CLOSE MASTER WORKMAST\n               GO TO MAST-CHECK-EXIT.\n           MOVE MAST-REC TO WS-MAST-REC WORK-REC.\n           MOVE DM-MST-DSNAME TO WS-DSNAME.\n           WRITE WORK-REC.\n       MAST-CHECK-READ.\n           READ MASTER AT END\n               GO TO MAST-CHECK-EOF.\n           MOVE MAST-REC TO WS-MAST-REC.\n           IF DM-MST-DSNAME GREATER THAN WS-DSNAME THEN\n               MOVE DM-MST-DSNAME TO WS-DSNAME\n               GO TO MAST-CHECK-WRITE.\n           IF MAST-SORT-SW EQUAL 'Y' THEN\n               GO TO MAST-CHECK-WRITE.\n           MOVE DM-MST-DSNAME TO DET-SM-DSNAME.\n           MOVE DET-SM TO DETAIL-TEXT.\n           PERFORM ERR-A-LINE.\n           MOVE 'Y' TO MAST-SORT-SW.\n       MAST-CHECK-WRITE.\n           MOVE MAST-REC TO WORK-REC.\n           WRITE WORK-REC.\n           GO TO MAST-CHECK-READ.\n       MAST-CHECK-EOF.\n           CLOSE MASTER WORKMAST.\n           IF MAST-SORT-SW EQUAL 'N' THEN\n               GO TO MAST-CHECK-EXIT.\n           SORT SORTMAST ON ASCENDING KEY SMST-DSNAME\n               USING  WORKMAST\n               GIVING WORKMAST.\n       MAST-CHECK-EXIT.\n           EXIT.\n       SORT-IN SECTION.\n           MOVE HIGH-VALUES TO WS-DSNAME.\n           OPEN INPUT TRANIN.\n       SORT-IN-READ-TRAN.\n           PERFORM READ-TRAN THRU READ-TRAN-EXIT.\n           IF TRANIN-EOF THEN\n               GO TO SORT-IN-END.\n      *\n      *    DROP MODEL DSCBS.\n      *\n           IF DM-VTC-DS-4 EQUAL 'DSCB'\n                              THEN GO TO SORT-IN-READ-TRAN.\n           PERFORM EDIT-VTC.\n           PERFORM EDIT-GDG.\n           IF WS-VTC-GDG-SW EQUAL 'Y' THEN\n               GO TO SORT-IN-READ-TRAN.\n           MOVE DM-VTC-ALLOC      TO SORT-ALLOC.\n           MOVE DM-VTC-USED       TO SORT-USED.\n           MOVE DM-VTC-EXTENT-CT  TO SORT-EXTENT-CT.\n           MOVE DM-VTC-DSO        TO SORT-DSO.\n           MOVE DM-VTC-RFM        TO SORT-RFM.\n           MOVE DM-VTC-LRECL      TO SORT-LRECL.\n           MOVE DM-VTC-BLKSZ      TO SORT-BLKSZ.\n           MOVE DM-VTC-DT-CREATE  TO SORT-DT-CREATE.\n           MOVE DM-VTC-DT-REF     TO SORT-DT-REF.\n           MOVE DM-VTC-VOLSER     TO SORT-VOLSER.\n           MOVE DM-VTC-DSNAME     TO SORT-DSNAME.\n           RELEASE SORTIN.\n           GO TO SORT-IN-READ-TRAN.\n       REL-GDG.\n           MOVE GDG-ALLOC         TO SORT-ALLOC.\n           MOVE GDG-USED          TO SORT-USED.\n           MOVE GDG-EXTENT-CT     TO SORT-EXTENT-CT.\n           MOVE 'GO'              TO SORT-DSO.\n           MOVE GDG-RFM           TO SORT-RFM.\n           MOVE GDG-LRECL         TO SORT-LRECL.\n           MOVE GDG-BLKSZ         TO SORT-BLKSZ.\n           MOVE GDG-DT-CREATE     TO SORT-DT-CREATE.\n           MOVE GDG-DT-REF        TO SORT-DT-REF.\n           MOVE GDG-VOLSER        TO SORT-VOLSER.\n           MOVE GDG-DSNAME        TO SORT-DSNAME.\n           RELEASE SORTIN.\n           MOVE 'N'               TO WS-PRV-GDG-SW.\n       READ-TRAN.\n           READ TRANIN AT END MOVE 'Y' TO TRANIN-EOF-SW.\n       READ-TRAN-EXIT.\n           EXIT.\n       SORT-IN-END.\n           IF WS-PRV-GDG-SW EQUAL 'Y' THEN\n               PERFORM REL-GDG.\n           CLOSE TRANIN.\n       SORT-IN-EXIT.\n           EXIT.\n       SORT-OUT SECTION.\n           OPEN INPUT WORKMAST OUTPUT MASTER LISTFILE RPTTEMP.\n           PERFORM READ-MASTER   THRU READ-MASTER-EXIT.\n           PERFORM READ-SORTTRAN THRU READ-SORTTRAN-EXIT.\n       SORT-OUT-DSNAME-CHECK.\n           IF MASTER-EOF AND SORTFILE-EOF THEN\n               CLOSE WORKMAST MASTER LISTFILE RPTTEMP\n               GO TO SORT-OUT-EXIT.\n           IF MASTER-EOF THEN\n               PERFORM RPT-XTRA-TRAN\n               PERFORM BUILD-MASTER THRU BUILD-MASTER-EXIT\n               PERFORM WRITE-MASTER THRU WRITE-MASTER-EXIT\n               PERFORM READ-SORTTRAN THRU READ-SORTTRAN-EXIT\n               GO TO SORT-OUT-DSNAME-CHECK.\n           IF SORTFILE-EOF THEN\n               PERFORM RPT-XTRA-MAST\n               PERFORM TEMP-MASTER THRU TEMP-MASTER-EXIT\n               PERFORM WRITE-MASTER THRU WRITE-MASTER-EXIT\n               PERFORM READ-MASTER THRU READ-MASTER-EXIT\n               GO TO SORT-OUT-DSNAME-CHECK.\n           IF SORT-DSNAME LESS THAN DM-MST-DSNAME THEN\n               PERFORM RPT-XTRA-TRAN\n               PERFORM BUILD-MASTER THRU BUILD-MASTER-EXIT\n               PERFORM WRITE-MASTER THRU WRITE-MASTER-EXIT\n               PERFORM READ-MASTER THRU READ-MASTER-EXIT\n               PERFORM READ-SORTTRAN THRU READ-SORTTRAN-EXIT\n               GO TO SORT-OUT-DSNAME-CHECK.\n           IF DM-MST-DSNAME LESS THAN SORT-DSNAME THEN\n               PERFORM RPT-XTRA-MAST\n               PERFORM TEMP-MASTER THRU TEMP-MASTER-EXIT\n               PERFORM WRITE-MASTER THRU WRITE-MASTER-EXIT\n               PERFORM READ-MASTER THRU READ-MASTER-EXIT\n               GO TO SORT-OUT-DSNAME-CHECK.\n      *\n      *    MATCH ON BOTH DSNAMES\n      *\n           IF DM-MST-VOLSER NOT EQUAL SORT-VOLSER THEN\n               PERFORM RPT-VOLSER\n               PERFORM UPDATE-VOLSER\n               PERFORM READ-SORTTRAN THRU READ-SORTTRAN-EXIT\n               PERFORM WRITE-MASTER THRU WRITE-MASTER-EXIT\n               PERFORM READ-MASTER THRU READ-MASTER-EXIT\n               GO TO SORT-OUT-DSNAME-CHECK.\n      *\n      *    UPDATE MASTER RECORD\n      *\n           MOVE SORT-ALLOC      TO DM-MST-ALLOC.\n           MOVE SORT-EXTENT-CT  TO DM-MST-EXTENT-CT.\n           MOVE SORT-DSO        TO DM-MST-DSORG.\n           MOVE SORT-RFM        TO DM-MST-RECFM.\n           MOVE SORT-LRECL      TO DM-MST-LRECL.\n           MOVE SORT-BLKSZ      TO DM-MST-BLKSIZE.\n           MOVE SORT-DT-CREATE  TO DM-MST-DT-CREATE.\n           MOVE SORT-DT-REF     TO DM-MST-DT-REF.\n           MOVE SORT-USED       TO DM-MST-USED-CUR.\n           IF DM-MST-USED-CUR GREATER THAN DM-MST-USED-HI THEN\n               MOVE DM-MST-USED-CUR TO DM-MST-USED-HI.\n           IF (DM-MST-USED-CUR LESS THAN DM-MST-USED-LO OR\n               DM-MST-USED-LO EQUAL ZERO) THEN\n               MOVE DM-MST-USED-CUR TO DM-MST-USED-LO.\n           PERFORM WRITE-MASTER THRU WRITE-MASTER-EXIT.\n           PERFORM READ-MASTER THRU READ-MASTER-EXIT.\n           PERFORM READ-SORTTRAN THRU READ-SORTTRAN-EXIT.\n           GO TO SORT-OUT-DSNAME-CHECK.\n       RPT-XTRA-TRAN.\n           MOVE SORT-DSNAME TO DET-XT-DSNAME.\n           MOVE SORT-VOLSER TO DET-XT-VOLSER.\n           MOVE DET-XT TO DETAIL-TEXT.\n           PERFORM ERR-A-LINE.\n       RPT-XTRA-MAST.\n           IF DM-MST-SW-3 NOT EQUAL 'T' THEN\n               MOVE DM-MST-DSNAME TO DET-XM-DSNAME\n               MOVE DM-MST-VOLSER TO DET-XM-VOLSER\n               MOVE DET-XM TO DETAIL-TEXT\n               PERFORM ERR-A-LINE.\n       RPT-VOLSER.\n           MOVE DM-MST-DSNAME TO DET-V-DSNAME.\n           MOVE DM-MST-VOLSER TO DET-V-VOLSER-OLD.\n           MOVE SORT-VOLSER TO DET-V-VOLSER-NEW.\n           MOVE DET-V TO DETAIL-TEXT.\n           PERFORM ERR-A-LINE.\n       UPDATE-VOLSER.\n           MOVE SORT-ALLOC      TO DM-MST-ALLOC.\n           MOVE SORT-EXTENT-CT  TO DM-MST-EXTENT-CT.\n           MOVE SORT-DSO        TO DM-MST-DSORG.\n           MOVE SORT-RFM        TO DM-MST-RECFM.\n           MOVE SORT-LRECL      TO DM-MST-LRECL.\n           MOVE SORT-BLKSZ      TO DM-MST-BLKSIZE.\n           MOVE SORT-DT-CREATE  TO DM-MST-DT-CREATE.\n           MOVE SORT-DT-REF     TO DM-MST-DT-REF.\n           MOVE SORT-VOLSER     TO DM-MST-VOLSER.\n           MOVE SORT-USED       TO DM-MST-USED-CUR.\n           IF DM-MST-USED-CUR GREATER THAN DM-MST-USED-HI THEN\n               MOVE DM-MST-USED-CUR TO DM-MST-USED-HI.\n           IF (DM-MST-USED-CUR LESS THAN DM-MST-USED-LO OR\n               DM-MST-USED-LO EQUAL ZERO) THEN\n               MOVE DM-MST-USED-CUR TO DM-MST-USED-LO.\n      *    MOVE DM-MST-USED-CUR TO DM-MST-USED-HI.\n      *    MOVE DM-MST-USED-CUR TO DM-MST-USED-LO.\n       BUILD-MASTER.\n           IF WS-MAST-STAT-SW EQUAL 'M' THEN\n               MOVE WS-MAST-REC TO MAST-REC\n               MOVE 'R' TO MASTER-STAT-SW.\n           MOVE SPACES          TO DM-MST-AAM.\n           MOVE 'YYT'           TO DM-MST-SW.\n           MOVE SORT-DSNAME     TO DM-MST-DSNAME.\n           MOVE SORT-ALLOC      TO DM-MST-ALLOC.\n           MOVE SORT-USED       TO DM-MST-USED-CUR.\n           MOVE SORT-DSO        TO DM-MST-DSORG.\n           MOVE SORT-RFM        TO DM-MST-RECFM.\n           MOVE SORT-BLKSZ      TO DM-MST-BLKSIZE.\n           MOVE SORT-LRECL      TO DM-MST-LRECL.\n           MOVE SORT-VOLSER     TO DM-MST-VOLSER.\n           MOVE DM-MST-USED-CUR TO DM-MST-USED-HI.\n           MOVE SORT-DT-CREATE  TO DM-MST-DT-CREATE.\n           MOVE SORT-DT-REF     TO DM-MST-DT-REF.\n           MOVE SORT-EXTENT-CT  TO DM-MST-EXTENT-CT.\n           MOVE DM-MST-USED-CUR TO DM-MST-USED-LO.\n           MOVE 'T' TO WS-MAST-STAT-SW.\n       BUILD-MASTER-EXIT.\n           EXIT.\n       READ-MASTER.\n           IF MASTER-EOF THEN\n               GO TO READ-MASTER-EXIT.\n           IF MASTER-READ THEN\n               MOVE WORK-REC TO WS-MAST-REC\n               MOVE 'M' TO WS-MAST-STAT-SW\n               GO TO READ-MASTER-EXIT.\n           READ WORKMAST AT END\n               MOVE 'Y' TO MASTER-STAT-SW\n               GO TO READ-MASTER-EXIT.\n           MOVE WORK-REC TO WS-MAST-REC.\n           INSPECT DM-MST-ALLOC-X\n               REPLACING ALL ' ' BY '0'.\n           INSPECT DM-MST-USED-CUR-X\n               REPLACING ALL ' ' BY '0'.\n           INSPECT DM-MST-BLKSIZE-X\n               REPLACING ALL ' ' BY '0'.\n           INSPECT DM-MST-LRECL-X\n               REPLACING ALL ' ' BY '0'.\n           INSPECT DM-MST-USED-HI-X\n               REPLACING ALL ' ' BY '0'.\n           INSPECT DM-MST-DT-CREATE-X\n               REPLACING ALL ' ' BY '0'.\n           INSPECT DM-MST-DT-REF-X\n               REPLACING ALL ' ' BY '0'.\n           INSPECT DM-MST-EXTENT-CT-X\n               REPLACING ALL ' ' BY '0'.\n           INSPECT DM-MST-USED-LO-X\n               REPLACING ALL ' ' BY '0'.\n           IF NOT (DM-MST-SW-1 EQUAL 'Y' OR 'N') THEN\n               MOVE 'Y' TO DM-MST-SW-1.\n           IF NOT (DM-MST-SW-2 EQUAL 'Y' OR\n                                     'N' OR\n                                     'C' ) THEN\n               MOVE 'Y' TO DM-MST-SW-2.\n           IF NOT (DM-MST-SW-3 EQUAL 'D' OR\n                                     'M' OR\n                                     'Q' OR\n                                     'A' OR\n                                     'I' OR\n                                     'T' ) THEN\n               MOVE 'D' TO DM-MST-SW-2.\n           IF DM-MST-ALLOC-X NOT NUMERIC THEN\n               MOVE 00000 TO DM-MST-ALLOC.\n           IF DM-MST-USED-CUR-X NOT NUMERIC THEN\n               MOVE 00000 TO DM-MST-USED-CUR.\n           IF DM-MST-BLKSIZE-X NOT NUMERIC THEN\n               MOVE 00000 TO DM-MST-BLKSIZE.\n           IF DM-MST-LRECL-X NOT NUMERIC THEN\n               MOVE 00000 TO DM-MST-LRECL.\n           IF DM-MST-USED-HI-X NOT NUMERIC THEN\n               MOVE 00000 TO DM-MST-USED-HI\n           IF DM-MST-DT-CREATE-X NOT NUMERIC THEN\n               MOVE 00000 TO DM-MST-DT-CREATE.\n           IF DM-MST-DT-REF-X NOT NUMERIC THEN\n               MOVE 00000 TO DM-MST-DT-REF.\n           IF DM-MST-EXTENT-CT-X NOT NUMERIC THEN\n               MOVE 00 TO DM-MST-EXTENT-CT.\n           IF DM-MST-USED-LO-X NOT NUMERIC THEN\n               MOVE 99999 TO DM-MST-USED-LO.\n           MOVE WS-MAST-REC TO WORK-REC.\n           MOVE 'R' TO MASTER-STAT-SW.\n           MOVE 'M' TO WS-MAST-STAT-SW.\n       READ-MASTER-EXIT.\n           EXIT.\n       WRITE-MASTER.\n           IF WS-MAST-STAT-SW EQUAL 'M' OR 'T' THEN\n               PERFORM LIST-MASTER\n               PERFORM LIST-TEMP\n               WRITE MAST-REC FROM WS-MAST-REC.\n           IF WS-MAST-STAT-SW EQUAL 'M' THEN\n               MOVE 'N' TO MASTER-STAT-SW.\n           MOVE 'E' TO WS-MAST-STAT-SW.\n       WRITE-MASTER-EXIT.\n           EXIT.\n       TEMP-MASTER.\n           IF WS-MAST-STAT-SW EQUAL 'E' THEN\n               GO TO TEMP-MASTER-EXIT.\n           IF DM-MST-SW-3 NOT EQUAL 'T' THEN\n               GO TO TEMP-MASTER-EXIT.\n           MOVE DM-MST-DSNAME TO DET-TD-DSNAME.\n           MOVE DM-MST-VOLSER TO DET-TD-VOLSER.\n           MOVE DET-TD TO DETAIL-TEXT.\n           PERFORM ERR-A-LINE.\n           IF WS-MAST-STAT-SW EQUAL 'M' THEN\n               MOVE 'N' TO MASTER-STAT-SW.\n           MOVE 'E' TO WS-MAST-STAT-SW.\n       TEMP-MASTER-EXIT.\n           EXIT.\n       READ-SORTTRAN.\n           IF SORTFILE-EOF THEN\n               GO TO READ-SORTTRAN-EXIT.\n           RETURN SORTRAN AT END\n               MOVE 'Y' TO SORTFILE-EOF-SW\n               GO TO READ-SORTTRAN-EXIT.\n           IF SORT-DSNAME NOT EQUAL WS-DSNAME THEN\n               MOVE SORT-DSNAME TO WS-DSNAME\n               GO TO READ-SORTTRAN-EXIT.\n           MOVE SORT-DSNAME TO DET-SD-DSNAME.\n           MOVE SORT-VOLSER TO DET-SD-VOLSER.\n           MOVE DET-SD TO DETAIL-TEXT.\n           PERFORM ERR-A-LINE.\n           GO TO READ-SORTTRAN.\n       READ-SORTTRAN-EXIT.\n           EXIT.\n\n       LIST-MASTER.\n           MOVE DM-MST-AAM         TO DET-LM-AAM.\n           MOVE DM-MST-SW          TO DET-LM-SW.\n           MOVE DM-MST-DSNAME      TO DET-LM-DSNAME.\n           MOVE DM-MST-VOLSER      TO DET-LM-VOLSER.\n           MOVE DM-MST-ALLOC       TO DET-LM-ALLOC.\n           MOVE DM-MST-USED-CUR    TO DET-LM-USED.\n           MOVE DM-MST-USED-HI     TO DET-LM-USED-HI.\n           MOVE DM-MST-DT-CREATE   TO DET-LM-DT-CREATE.\n           MOVE DM-MST-DT-REF      TO DET-LM-DT-REF.\n           MOVE DM-MST-DSORG       TO DET-LM-DSORG.\n           MOVE DM-MST-RECFM       TO DET-LM-RECFM.\n           MOVE DM-MST-LRECL       TO DET-LM-LRECL.\n           MOVE DM-MST-BLKSIZE     TO DET-LM-BLKSIZE.\n           MOVE DM-MST-EXTENT-CT   TO DET-LM-EXTENT.\n           MOVE DET-LM TO DETAIL-TEXT.\n           PERFORM LIST-A-LINE.\n       SORT-OUT-EXIT.\n           EXIT.\n       LIST-TEMP SECTION.\n           IF DM-MST-SW-3 NOT EQUAL 'T' THEN\n               GO TO LIST-TEMP-EXIT.\n           MOVE DM-MST-DSNAME      TO DET-TF-DSNAME.\n           MOVE DM-MST-VOLSER      TO DET-TF-VOLSER.\n           MOVE DM-MST-ALLOC       TO DET-TF-ALLOC.\n           MOVE DM-MST-DT-CREATE   TO DET-TF-DT-CREATE.\n           IF DM-MST-DT-CREATE EQUAL ZERO THEN\n               MOVE 99999 TO DET-TF-DAYS-OLD\n               GO TO LIST-TEMP-LIST.\n           MOVE DM-MST-DT-CREATE   TO WS-YYDDD.\n           MOVE WS-YYDDD-YY        TO D-C-YEAR.\n           MOVE WS-YYDDD-DDD       TO D-C-DOY.\n           MOVE ZERO               TO D-C-MONTH.\n           MOVE ZERO               TO D-C-DOM.\n           MOVE ZERO               TO D-C-DOW.\n           MOVE ZERO               TO D-C-JDAY.\n           CALL 'DATCNVRT' USING   D-C-YEAR\n                                   D-C-MONTH\n                                   D-C-DOM\n                                   D-C-DOY\n                                   D-C-DOW\n                                   D-C-JDAY.\n           SUBTRACT D-C-JDAY FROM WS-TODAY-JDAY GIVING WS-DIFFDAY.\n           MOVE WS-DIFFDAY         TO DET-TF-DAYS-OLD.\n       LIST-TEMP-LIST.\n           MOVE DET-TF TO DETAIL-TEXT.\n           PERFORM TEMP-A-LINE.\n       LIST-TEMP-EXIT.\n           EXIT.\n       ERR-A-LINE SECTION.\n           ADD +2 TO ERR-LINE-CT.\n           IF ERR-LINE-CT GREATER THAN LINE-MAX THEN\n               MOVE +1 TO ERR-LINE-CT\n               ADD +1 TO ERR-PAGE-CT\n               MOVE ERR-PAGE-CT TO H-1-PAGE\n               WRITE ERR-REC FROM HEADING-1\n                   AFTER ADVANCING TO-TOP.\n           WRITE ERR-REC FROM DETAIL-LINE AFTER ADVANCING 2.\n       TEMP-A-LINE SECTION.\n           ADD +2 TO TEMP-LINE-CT.\n           IF TEMP-LINE-CT GREATER THAN LINE-MAX THEN\n               MOVE +1 TO TEMP-LINE-CT\n               ADD +1 TO TEMP-PAGE-CT\n               MOVE TEMP-PAGE-CT TO H-4-PAGE\n               WRITE TEMP-REC FROM HEADING-4\n                   AFTER ADVANCING TO-TOP.\n           WRITE TEMP-REC FROM DETAIL-LINE AFTER ADVANCING 2.\n       LIST-A-LINE SECTION.\n           ADD +1 TO LIST-LINE-CT.\n           IF LIST-LINE-CT GREATER THAN LINE-MAX THEN\n               MOVE +2 TO LIST-LINE-CT\n               ADD +1 TO LIST-PAGE-CT\n               MOVE LIST-PAGE-CT TO H-2-PAGE\n               WRITE LIST-REC FROM HEADING-2\n                   AFTER ADVANCING TO-TOP\n               WRITE LIST-REC FROM HEADING-3\n                   AFTER ADVANCING 2.\n           WRITE LIST-REC FROM DETAIL-LINE AFTER ADVANCING 1.\n       EDIT-VTC SECTION.\n           INSPECT DM-VTC-ALLOC-X\n               REPLACING ALL ' ' BY '0'.\n           INSPECT DM-VTC-USED-X\n               REPLACING ALL ' ' BY '0'.\n           INSPECT DM-VTC-EXTENT-CT-X\n               REPLACING ALL ' ' BY '0'.\n           INSPECT DM-VTC-LRECL-X\n               REPLACING ALL ' ' BY '0'.\n           INSPECT DM-VTC-BLKSZ-X\n               REPLACING ALL ' ' BY '0'.\n           INSPECT DM-VTC-DT-CREATE-X\n               REPLACING ALL ' ' BY '0'.\n           INSPECT DM-VTC-DT-REF-X\n               REPLACING ALL ' ' BY '0'.\n           IF DM-VTC-ALLOC-X NOT NUMERIC THEN\n               MOVE ZEROES TO DM-VTC-ALLOC.\n           IF DM-VTC-USED-X NOT NUMERIC THEN\n               MOVE ZEROES TO DM-VTC-USED.\n           IF DM-VTC-EXTENT-CT-X NOT NUMERIC THEN\n               MOVE ZEROES TO DM-VTC-EXTENT-CT.\n           IF DM-VTC-LRECL-X NOT NUMERIC THEN\n               MOVE ZEROES TO DM-VTC-LRECL.\n           IF DM-VTC-BLKSZ-X NOT NUMERIC THEN\n               MOVE ZEROES TO DM-VTC-BLKSZ.\n           IF DM-VTC-DT-CREATE-X NOT NUMERIC THEN\n               MOVE ZEROES TO DM-VTC-DT-CREATE.\n           IF DM-VTC-DT-REF-X NOT NUMERIC THEN\n               MOVE ZEROES TO DM-VTC-DT-REF.\n           IF DM-VTC-DT-REF EQUAL 0 OR 1 THEN\n               MOVE DM-VTC-DT-CREATE TO DM-VTC-DT-REF.\n      *\n      *    CHANGE DATASET NAMES ON GDG'S\n      *\n           MOVE 'N' TO WS-VTC-GDG-SW.\n           IF DM-VTC-DS-G1 EQUAL '.G' THEN\n               MOVE '.GDG' TO DM-VTC-DS-G1-F\n               MOVE DM-VTC-VOLSER TO DM-VTC-DSN-VOLSER\n               MOVE 'Y' TO WS-VTC-GDG-SW\n               GO TO EDIT-VTC-EXIT.\n           IF DM-VTC-DS-G2 EQUAL '.G' THEN\n               MOVE '.GDG' TO DM-VTC-DS-G2-F\n               MOVE DM-VTC-VOLSER TO DM-VTC-DSN-VOLSER\n               MOVE 'Y' TO WS-VTC-GDG-SW\n               GO TO EDIT-VTC-EXIT.\n      *\n      *    CHANGE DATASET NAMES APPENDING VOLSERS\n      *    TO OS CATALOGS\n      *\n           IF DM-VTC-DSNAME EQUAL 'SYSCTLG' THEN\n               MOVE '.V' TO DM-VTC-DS-CTLGV\n               MOVE DM-VTC-VOLSER TO DM-VTC-DS-VOLSER.\n      *\n      *    CHANGE USED TO ALLOC FOR ISAM\n      *\n           IF DM-VTC-DSO EQUAL 'IS ' THEN\n               MOVE DM-VTC-ALLOC-X TO DM-VTC-USED-X.\n      *\n      *    ADD VOLSER TO DSNAME FOR 'DUP' PACKS\n      *\n           PERFORM LOC-VOLSER.\n           IF WS-VOL-SW-DUP EQUAL 'Y' THEN\n                MOVE DM-VTC-VOLSER TO DM-VTC-DSN-VOLSER.\n       EDIT-VTC-EXIT.\n           EXIT.\n       EDIT-GDG SECTION.\n           IF (WS-VTC-GDG-SW EQUAL 'N' AND\n               WS-PRV-GDG-SW EQUAL 'N') THEN\n               GO TO EDIT-GDG-EXIT.\n           IF (WS-VTC-GDG-SW EQUAL 'Y' AND\n               WS-PRV-GDG-SW EQUAL 'N') THEN\n               GO TO EDIT-GDG-INIT.\n           IF (WS-VTC-GDG-SW EQUAL 'N' AND\n               WS-PRV-GDG-SW EQUAL 'Y') THEN\n               PERFORM REL-GDG\n               GO TO EDIT-GDG-EXIT.\n           IF GDG-DSNAME NOT EQUAL DM-VTC-DSNAME THEN\n               PERFORM REL-GDG\n               GO TO EDIT-GDG-INIT.\n      *\n      *    UPDATE STATS\n      *\n           ADD DM-VTC-ALLOC      TO GDG-ALLOC.\n           ADD DM-VTC-USED       TO GDG-USED.\n           ADD DM-VTC-EXTENT-CT  TO GDG-EXTENT-CT.\n           MOVE DM-VTC-RFM       TO GDG-RFM.\n           MOVE DM-VTC-LRECL     TO GDG-LRECL.\n           MOVE DM-VTC-BLKSZ     TO GDG-BLKSZ.\n           IF DM-VTC-DT-CREATE GREATER THAN GDG-DT-CREATE THEN\n               MOVE DM-VTC-DT-CREATE TO GDG-DT-CREATE.\n           IF DM-VTC-DT-REF GREATER THAN GDG-DT-REF THEN\n               MOVE DM-VTC-DT-REF    TO GDG-DT-REF.\n           GO TO EDIT-GDG-EXIT.\n       EDIT-GDG-INIT.\n           MOVE DM-VTC-ALLOC     TO GDG-ALLOC.\n           MOVE DM-VTC-USED      TO GDG-USED.\n           MOVE DM-VTC-EXTENT-CT TO GDG-EXTENT-CT.\n           MOVE DM-VTC-VOLSER    TO GDG-VOLSER.\n           MOVE DM-VTC-DSNAME    TO GDG-DSNAME.\n           MOVE DM-VTC-RFM       TO GDG-RFM.\n           MOVE DM-VTC-LRECL     TO GDG-LRECL.\n           MOVE DM-VTC-BLKSZ     TO GDG-BLKSZ.\n           MOVE DM-VTC-DT-CREATE TO GDG-DT-CREATE.\n           MOVE DM-VTC-DT-REF    TO GDG-DT-REF.\n           MOVE 'Y'              TO WS-PRV-GDG-SW.\n       EDIT-GDG-EXIT.\n           EXIT.\n       BLD-VOLSER SECTION.\n           OPEN INPUT VOLSERIN.\n           SET VOL-INDEX TO +1.\n       BLD-VOLSER-LOOP.\n           READ VOLSERIN AT END\n               GO TO BLD-VOLSER-END.\n           IF DM-VOL-VOLSER NOT GREATER THAN WS-VOL-VOLSER\n               THEN\n               DISPLAY 'VOLSER TABLE OUT OF SEQUENCE'\n                       ' OLD ENTRY = ' WS-VOL-VOLSER\n                       ' NEW ENTRY = ' DM-VOL-VOLSER\n                       UPON SYSOUT\n               MOVE +1000 TO ABEND-CODE\n               CALL 'USERDUMP' USING ABEND-CODE.\n           IF VOL-INDEX GREATER THAN +200 THEN\n               DISPLAY 'VOLSER TABLE OVERFLOW'\n                   UPON SYSOUT\n               MOVE +1000 TO ABEND-CODE\n               CALL 'USERDUMP' USING ABEND-CODE.\n           ADD +1 TO WS-VOLSER-HI.\n           MOVE DM-VOL-VOLSER   TO WS-VOL-VOLSER\n                                   VOLTAB-VOLSER (VOL-INDEX).\n           MOVE DM-VOL-BYTES    TO VOLTAB-BYTES (VOL-INDEX).\n           MOVE DM-VOL-TRK-CYL  TO VOLTAB-TRK-CYL (VOL-INDEX).\n           MOVE DM-VOL-CYL-VOL  TO VOLTAB-CYL-VOL (VOL-INDEX).\n           MOVE DM-VOL-POOL     TO VOLTAB-POOL (VOL-INDEX).\n           MOVE DM-VOL-SW-DUP   TO VOLTAB-SW-DUP (VOL-INDEX).\n           SET VOL-INDEX UP BY +1.\n           GO TO BLD-VOLSER-LOOP.\n       BLD-VOLSER-END.\n           CLOSE VOLSERIN.\n           MOVE LOW-VALUES TO WS-VOL-VOLSER.\n       BLD-VOLSER-EXIT.\n           EXIT.\n       LOC-VOLSER SECTION.\n           IF WS-VOL-VOLSER EQUAL DM-VTC-VOLSER\n               THEN GO TO LOC-VOLSER-EXIT.\n           SEARCH ALL VOLTAB\n               WHEN VOLTAB-VOLSER (VOL-INDEX) EQUAL DM-VTC-VOLSER\n                   GO TO LOC-VOLSER-HIT.\n           DISPLAY 'VOLSER = ' DM-VTC-VOLSER\n                   ' NOT FOUND IN VOLUME TABLE'\n                   UPON SYSOUT.\n           MOVE +1000 TO ABEND-CODE.\n           CALL 'USERDUMP' USING ABEND-CODE.\n       LOC-VOLSER-HIT.\n           MOVE VOLTAB-VOLSER (VOL-INDEX)   TO WS-VOL-VOLSER.\n           MOVE VOLTAB-BYTES (VOL-INDEX)    TO WS-VOL-BYTES.\n           MOVE VOLTAB-TRK-CYL (VOL-INDEX)  TO WS-VOL-TRK-CYL.\n           MOVE VOLTAB-CYL-VOL (VOL-INDEX)  TO WS-VOL-CYL-VOL.\n           MOVE VOLTAB-POOL (VOL-INDEX)     TO WS-VOL-POOL.\n           MOVE VOLTAB-SW-DUP (VOL-INDEX)   TO WS-VOL-SW-DUP.\n           MULTIPLY WS-VOL-TRK-CYL BY WS-VOL-CYL-VOL\n                                        GIVING WS-VOL-TRK-VOL.\n       LOC-VOLSER-EXIT.\n           EXIT.\n       E-O-J SECTION.\n           STOP RUN.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DM210PRP": {"ttr": 4616, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x08(\\x08(\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 2088, "newlines": 2088, "modlines": 0, "user": "FILE097"}, "text": "       ID DIVISION.\n       PROGRAM-ID. DM210PRP.\n       AUTHOR. PAT RUSSELL.\n       REMARKS.\n      *\n      *    DISK MANAGMENT CONTROL REPORTS\n      *\n       ENVIRONMENT DIVISION.\n       CONFIGURATION SECTION.\n       OBJECT-COMPUTER. IBM-370.\n       SOURCE-COMPUTER. IBM-370.\n       SPECIAL-NAMES.\n           C01 IS TO-TOP.\n           EJECT\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n           SELECT VOLSERIN ASSIGN TO UT-S-VOLSERIN.\n           SELECT OUTFIXC  ASSIGN TO UT-S-OUTFIXC.\n           SELECT MASTER   ASSIGN TO UT-S-MASTER.\n           SELECT RPTVDET  ASSIGN TO UT-S-RPTVDET.\n           SELECT RPTVSUM  ASSIGN TO UT-S-RPTVSUM.\n           SELECT RPTXTNT  ASSIGN TO UT-S-RPTXTNT.\n           SELECT RPTVTNT  ASSIGN TO UT-S-RPTVTNT.\n           SELECT RPTOVER  ASSIGN TO UT-S-RPTOVER.\n           SELECT RPTEOLD  ASSIGN TO UT-S-RPTEOLD.\n           SELECT RPTRGDG  ASSIGN TO UT-S-RPTRGDG.\n           SELECT RPTPERM  ASSIGN TO UT-S-RPTPERM.\n           SELECT RPTMPTY  ASSIGN TO UT-S-RPTMPTY.\n           SELECT RPTSUMY  ASSIGN TO UT-S-RPTSUMY.\n           SELECT SORTVOL  ASSIGN TO UT-S-SORTWK01.\n           SELECT SORTAAM  ASSIGN TO UT-S-SORTWK01.\n           SKIP2\n       DATA DIVISION.\n       FILE SECTION.\n           SKIP2\n       FD  RPTVDET\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 133 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS VDET-REC.\n       01  VDET-REC                PIC X(133).\n           SKIP2\n       FD  RPTVSUM\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 133 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS VSUM-REC.\n       01  VSUM-REC                PIC X(133).\n           SKIP2\n       FD  RPTXTNT\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 133 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS XTNT-REC.\n       01  XTNT-REC                PIC X(133).\n           SKIP2\n       FD  RPTVTNT\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 133 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS VTNT-REC.\n       01  VTNT-REC                PIC X(133).\n           SKIP2\n       FD  RPTOVER\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 133 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS OVER-REC.\n       01  OVER-REC                PIC X(133).\n           SKIP2\n       FD  RPTEOLD\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 133 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS EOLD-REC.\n       01  EOLD-REC                PIC X(133).\n           SKIP2\n       FD  RPTRGDG\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 133 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS RGDG-REC.\n       01  RGDG-REC                PIC X(133).\n           SKIP2\n       FD  RPTPERM\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 133 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS PERM-REC.\n       01  PERM-REC                PIC X(133).\n           SKIP2\n       FD  RPTMPTY\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 133 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS MPTY-REC.\n       01  MPTY-REC                PIC X(133).\n           SKIP2\n       FD  RPTSUMY\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 133 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS SUMY-REC.\n       01  SUMY-REC                PIC X(133).\n           SKIP2\n       FD  OUTFIXC\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 80 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS FIXC-REC.\n       01  FIXC-REC                PIC X(80).\n       FD  VOLSERIN\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 80 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS VOL-REC.\n       01  VOL-REC.\n           COPY CDMFD020.\n           SKIP2\n       FD  MASTER\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 150 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS FILE-OUT.\n       01  FILE-OUT.\n           COPY CDMFD000.\n           SKIP2\n       SD  SORTVOL\n           RECORDING MODE IS F\n           DATA RECORD IS SVOL-REC.\n       01  SVOL-REC.\n           02  SVOL-AAM            PIC X(3).\n           02  SVOL-SW.\n               03  SVOL-SW-1       PIC X.\n               03  SVOL-SW-2       PIC X.\n               03  SVOL-SW-3       PIC X.\n           02  SVOL-DSNAME         PIC X(44).\n           02  SVOL-ALLOC          PIC 9(5).\n           02  SVOL-USED-CUR       PIC 9(5).\n           02  SVOL-DSORG          PIC X(3).\n           02  SVOL-RECFM          PIC X(3).\n           02  SVOL-BLKSIZE        PIC 9(5).\n           02  SVOL-LRECL          PIC 9(5).\n           02  SVOL-VOLSER         PIC X(6).\n           02  SVOL-USED-HI        PIC 9(5).\n           02  SVOL-DT-CREATE      PIC 9(5).\n           02  SVOL-DT-REF         PIC 9(5).\n           02  SVOL-EXTENT-CT      PIC 9(2).\n           02  SVOL-USED-LO        PIC 9(5).\n           SKIP2\n       SD  SORTAAM\n           RECORDING MODE IS F\n           DATA RECORD IS SAAM-REC.\n       01  SAAM-REC.\n           02  SAAM-AAM            PIC X(3).\n           02  SAAM-SW.\n               03  SAAM-SW-1       PIC X.\n               03  SAAM-SW-2       PIC X.\n               03  SAAM-SW-3       PIC X.\n           02  SAAM-DSNAME         PIC X(44).\n           02  SAAM-VOLSER         PIC X(6).\n           02  SAAM-ALLOC          PIC 9(5).\n           02  SAAM-DSORG          PIC X(3).\n           02  SAAM-DT-REF         PIC 9(5).\n           02  SAAM-DIFFDAY        PIC 9(5).\n           EJECT\n       WORKING-STORAGE SECTION.\n       01  WS-MISC-CHAR.\n           02  WS-FIXC-SW          PIC X      VALUE 'N'.\n           02  WS-XTNT-SW          PIC X      VALUE 'N'.\n           02  MASTER-EOF-SW       PIC X      VALUE 'N'.\n               88  MASTER-EOF      VALUE 'Y'.\n           02  SORTFILE-EOF-SW     PIC X      VALUE 'N'.\n               88  SORTFILE-EOF    VALUE 'Y'.\n           02  WS-XTNT-1           PIC S9(6)V9 COMP-3 VALUE +0.\n           02  WS-XTNT-SB          PIC S9(5) COMP-3 VALUE +0.\n           02  WS-XTNT-2           PIC S9(5) COMP-3 VALUE +0.\n           02  WS-VOL-ALLOC        PIC S9(5) COMP-3 VALUE +0.\n           02  WS-VOL-USED-CUR     PIC S9(5) COMP-3 VALUE +0.\n           02  WS-VOL-USED-LO      PIC S9(5) COMP-3 VALUE +0.\n           02  WS-VOL-USED-HI      PIC S9(5) COMP-3 VALUE +0.\n           02  WS-VOL-VOLSER       PIC X(6)   VALUE LOW-VALUES.\n           02  WS-VOL-BYTES        PIC 9999999.\n           02  WS-VOL-TRK-CYL      PIC 999.\n           02  WS-VOL-CYL-VOL      PIC 99999.\n           02  WS-VOL-POOL         PIC XXX.\n           02  WS-VOL-SW-DUP       PIC X.\n           02  WS-VOL-TRK-VOL      PIC 9999999.\n           02  WS-VOL-PCT          PIC S999V9  VALUE +0.\n           02  WS-VOL-HI-PCT       PIC S999V9  VALUE +0.\n           02  WS-VOL-CUR-PCT      PIC S999V9  VALUE +0.\n       01  VOLTAB-TABLE.\n           02  VOLTAB              OCCURS 1 TO 201\n                                   DEPENDING ON WS-VOLSER-HI\n                                   ASCENDING KEY IS VOLTAB-VOLSER\n                                   INDEXED BY VOL-INDEX.\n               03  VOLTAB-VOLSER   PIC X(6).\n               03  VOLTAB-BYTES    PIC 9999999.\n               03  VOLTAB-TRK-CYL  PIC 999.\n               03  VOLTAB-CYL-VOL  PIC 99999.\n               03  VOLTAB-POOL     PIC XXX.\n               03  VOLTAB-SW-DUP   PIC X.\n           02  WS-DATE.\n               03  WS-DATE-MM      PIC 99.\n               03  FILLER          PIC X.\n               03  WS-DATE-DD      PIC 99.\n               03  FILLER          PIC X.\n               03  WS-DATE-YY      PIC 99.\n           02  WS-YYDDD.\n               03  WS-YYDDD-YY     PIC 99.\n               03  WS-YYDDD-DDD    PIC 999.\n           02  WS-DAY-TABLE.\n               03  WS-DAY          OCCURS 10.\n                   04  WS-DAY-YY   PIC 99.\n                   04  WS-DAY-DDD  PIC 999.\n       01  WS-MISC-COMP-SYNC       COMP SYNC.\n           02  D-C-YEAR            PIC S9(8).\n           02  D-C-MONTH           PIC S9(8).\n           02  D-C-DOM             PIC S9(8).\n           02  D-C-DOY             PIC S9(8).\n           02  D-C-DOW             PIC S9(8).\n           02  D-C-JDAY            PIC S9(8).\n           02  WS-TODAY-JDAY       PIC S9(8).\n           02  WS-90-AGO-JDAY      PIC S9(8).\n           02  WS-DIFFDAY          PIC S9(8).\n           02  I                   PIC S9(4).\n           02  VDET-LINE-CT        PIC S9(4)  VALUE +0.\n           02  VDET-PAGE-CT        PIC S9(4)  VALUE +0.\n           02  VSUM-LINE-CT        PIC S9(4)  VALUE +0.\n           02  VSUM-PAGE-CT        PIC S9(4)  VALUE +0.\n           02  XTNT-LINE-CT        PIC S9(4)  VALUE +0.\n           02  XTNT-PAGE-CT        PIC S9(4)  VALUE +0.\n           02  VTNT-LINE-CT        PIC S9(4)  VALUE +0.\n           02  VTNT-PAGE-CT        PIC S9(4)  VALUE +0.\n           02  OVER-LINE-CT        PIC S9(4)  VALUE +0.\n           02  OVER-PAGE-CT        PIC S9(4)  VALUE +0.\n           02  EOLD-LINE-CT        PIC S9(4)  VALUE +0.\n           02  EOLD-PAGE-CT        PIC S9(4)  VALUE +0.\n           02  RGDG-LINE-CT        PIC S9(4)  VALUE +0.\n           02  RGDG-PAGE-CT        PIC S9(4)  VALUE +0.\n           02  PERM-LINE-CT        PIC S9(4)  VALUE +0.\n           02  PERM-PAGE-CT        PIC S9(4)  VALUE +0.\n           02  MPTY-LINE-CT        PIC S9(4)  VALUE +0.\n           02  MPTY-PAGE-CT        PIC S9(4)  VALUE +0.\n           02  SUMY-LINE-CT        PIC S9(4)  VALUE +0.\n           02  SUMY-PAGE-CT        PIC S9(4)  VALUE +0.\n           02  SUMY-VU-PRD         PIC S9999V9  VALUE +0.\n           02  SUMY-VU-ONL         PIC S9999V9  VALUE +0.\n           02  SUMY-VU-SYS         PIC S9999V9  VALUE +0.\n           02  SUMY-VU-IPO         PIC S9999V9  VALUE +0.\n           02  SUMY-VT-PRD         PIC S9999V9  VALUE +0.\n           02  SUMY-VT-PRD-CT      PIC S9(2)  VALUE +0.\n           02  SUMY-VT-ONL         PIC S9999V9  VALUE +0.\n           02  SUMY-VT-ONL-CT      PIC S9(2)  VALUE +0.\n           02  SUMY-VT-SYS         PIC S9999V9  VALUE +0.\n           02  SUMY-VT-SYS-CT      PIC S9(2)  VALUE +0.\n           02  SUMY-VT-IPO         PIC S9999V9  VALUE +0.\n           02  SUMY-VT-IPO-CT      PIC S9(2)  VALUE +0.\n           02  SUMY-XCP-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-XCS-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-XCI-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-XCP-ALLOC      PIC S9(6)  VALUE +0.\n           02  SUMY-XCS-ALLOC      PIC S9(6)  VALUE +0.\n           02  SUMY-XCI-ALLOC      PIC S9(6)  VALUE +0.\n           02  SUMY-XHP-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-XHS-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-XHI-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-XHPV-CT        PIC S9(4)  VALUE +0.\n           02  SUMY-XHSV-CT        PIC S9(4)  VALUE +0.\n           02  SUMY-XHIV-CT        PIC S9(4)  VALUE +0.\n           02  SUMY-XHP-NET        PIC S9(6)  VALUE +0.\n           02  SUMY-XHS-NET        PIC S9(6)  VALUE +0.\n           02  SUMY-XHI-NET        PIC S9(6)  VALUE +0.\n           02  SUMY-XHP-NET-VS     PIC S9(6)  VALUE +0.\n           02  SUMY-XHS-NET-VS     PIC S9(6)  VALUE +0.\n           02  SUMY-XHI-NET-VS     PIC S9(6)  VALUE +0.\n           02  SUMY-XHP-CT-TOTAL   PIC S9(7)  VALUE +0.\n           02  SUMY-XHS-CT-TOTAL   PIC S9(7)  VALUE +0.\n           02  SUMY-XHI-CT-TOTAL   PIC S9(7)  VALUE +0.\n           02  SUMY-XHP-NET-TOTAL  PIC S9(7)  VALUE +0.\n           02  SUMY-XHS-NET-TOTAL  PIC S9(7)  VALUE +0.\n           02  SUMY-XHI-NET-TOTAL  PIC S9(7)  VALUE +0.\n           02  SUMY-XVP-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-XVS-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-XVI-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-XVP-ALLOC      PIC S9(6)  VALUE +0.\n           02  SUMY-XVS-ALLOC      PIC S9(6)  VALUE +0.\n           02  SUMY-XVI-ALLOC      PIC S9(6)  VALUE +0.\n           02  SUMY-XCPV-CT        PIC S9(4)  VALUE +0.\n           02  SUMY-XCSV-CT        PIC S9(4)  VALUE +0.\n           02  SUMY-XCIV-CT        PIC S9(4)  VALUE +0.\n           02  SUMY-XCPV-TOTAL     PIC S9(7)  VALUE +0.\n           02  SUMY-XCSV-TOTAL     PIC S9(7)  VALUE +0.\n           02  SUMY-XCIV-TOTAL     PIC S9(7)  VALUE +0.\n           02  SUMY-MTP-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-MTS-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-MTI-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-MTP-ALLOC      PIC S9(5)  VALUE +0.\n           02  SUMY-MTS-ALLOC      PIC S9(5)  VALUE +0.\n           02  SUMY-MTI-ALLOC      PIC S9(5)  VALUE +0.\n           02  SUMY-GGP-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-GGS-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-GGI-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-PMP-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-PMS-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-PMI-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-PMP-ALLOC      PIC S9(5)  VALUE +0.\n           02  SUMY-PMS-ALLOC      PIC S9(5)  VALUE +0.\n           02  SUMY-PMI-ALLOC      PIC S9(5)  VALUE +0.\n           02  SUMY-EOP-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-EOS-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-EOI-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-EOP-ALLOC      PIC S9(5)  VALUE +0.\n           02  SUMY-EOS-ALLOC      PIC S9(5)  VALUE +0.\n           02  SUMY-EOI-ALLOC      PIC S9(5)  VALUE +0.\n           02  SUMY-LMP-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-LMS-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-LMI-CT         PIC S9(4)  VALUE +0.\n           02  SUMY-LMP-ALLOC      PIC S9(7)  VALUE +0.\n           02  SUMY-LMS-ALLOC      PIC S9(7)  VALUE +0.\n           02  SUMY-LMI-ALLOC      PIC S9(7)  VALUE +0.\n           02  SUMY-LMP-ALLOC-CUR  PIC S9(7)  VALUE +0.\n           02  SUMY-LMS-ALLOC-CUR  PIC S9(7)  VALUE +0.\n           02  SUMY-LMI-ALLOC-CUR  PIC S9(7)  VALUE +0.\n           02  SUMY-LM-TOTAL       PIC S9(4)  VALUE +0.\n           02  SUMY-LM-ALLC-TOTAL  PIC S9(7)  VALUE +0.\n           02  SUMY-LM-CUR-TOTAL   PIC S9(7)  VALUE +0.\n           02  SUMY-SPACE          PIC S9(1)  VALUE +0.\n           02  LINE-MAX            PIC S9(4)  VALUE +55.\n           02  ABEND-CODE          PIC S9(4)  VALUE +1000.\n           02  WS-VOLSER-HI        PIC S9(4)  VALUE +0.\n           02  DM-XH-NET           PIC S9(5)  VALUE +0.\n       01  HEADING-1.\n           02  FILLER              PIC X(10)  VALUE ' DM210-01'.\n           02  H-1-DATE            PIC X(8)   VALUE SPACES.\n           02  FILLER              PIC X(15)  VALUE SPACES.\n           02  FILLER              PIC X(44)\n             VALUE 'STORAGE MANAGEMENT VOLUME DETAIL REPORT FOR '.\n           02  H-1-VOLSER          PIC X(6).\n           02  FILLER              PIC X(15)  VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'PAGE '.\n           02  H-1-PAGE            PIC ZZZ9   VALUE ZEROES.\n       01  HEADING-2.\n           02  FILLER              PIC X(10)  VALUE ' DM210-02'.\n           02  H-2-DATE            PIC X(8)   VALUE SPACES.\n           02  FILLER              PIC X(20)  VALUE SPACES.\n           02  FILLER              PIC X(40)\n             VALUE 'STORAGE MANAGEMENT VOLUME SUMMARY REPORT'.\n           02  FILLER              PIC X(25)  VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'PAGE '.\n           02  H-2-PAGE            PIC ZZZ9   VALUE ZEROES.\n       01  HEADING-3.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'AAM'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'IND'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(44)  VALUE 'DSNAME'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'ALLOC'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE ' USED'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE '   HI'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'DT-CR'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'DT-RF'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'DSO'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'RFM'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'LRECL'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'BLKSI'.\n       01  HEADING-4.\n           02  FILLER              PIC X(10)  VALUE ' DM210-04'.\n           02  H-4-DATE            PIC X(8)   VALUE SPACES.\n           02  FILLER              PIC X(15)  VALUE SPACES.\n           02  FILLER              PIC X(48)\n             VALUE 'STORAGE MANAGEMENT NONVSAM EXTENT CONTROL REPORT'.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'PAGE '.\n           02  H-4-PAGE            PIC ZZZ9   VALUE ZEROES.\n       01  HEADING-5.\n           02  FILLER              PIC X(10)  VALUE ' DM210-05'.\n           02  H-5-DATE            PIC X(8)   VALUE SPACES.\n           02  FILLER              PIC X(15)  VALUE SPACES.\n           02  FILLER              PIC X(41)\n             VALUE 'STORAGE MANAGEMENT EXPIRED DATASET REPORT'.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'PAGE '.\n           02  H-5-PAGE            PIC ZZZ9   VALUE ZEROES.\n       01  HEADING-6.\n           02  FILLER              PIC X(10)  VALUE ' DM210-06'.\n           02  H-6-DATE            PIC X(8)   VALUE SPACES.\n           02  FILLER              PIC X(15)  VALUE SPACES.\n           02  FILLER              PIC X(45)\n             VALUE 'STORAGE MANAGEMENT OVER ALLOCATION REPORT'.\n           02  FILLER              PIC X(10)  VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'PAGE '.\n           02  H-6-PAGE            PIC ZZZ9   VALUE ZEROES.\n       01  HEADING-7.\n           02  FILLER              PIC X(10)  VALUE ' DM210-07'.\n           02  H-7-DATE            PIC X(8)   VALUE SPACES.\n           02  FILLER              PIC X(15)  VALUE SPACES.\n           02  FILLER              PIC X(40)\n             VALUE 'STORAGE MANAGEMENT GDG REPORT'.\n           02  FILLER              PIC X(15)  VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'PAGE '.\n           02  H-7-PAGE            PIC ZZZ9   VALUE ZEROES.\n       01  HEADING-8.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'AAM'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'IND'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(44)  VALUE 'DSNAME'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(6)   VALUE 'VOLSER'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'ALLOC'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE ' USED'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE '   HI'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'DT-CR'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'DT-RF'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'RFM'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'LRECL'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'BLKSI'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(7)   VALUE 'EXTENTS'.\n       01  HEADING-9.\n           02  FILLER              PIC X(10)  VALUE ' DM210-09'.\n           02  H-9-DATE            PIC X(8)   VALUE SPACES.\n           02  FILLER              PIC X(15)  VALUE SPACES.\n           02  FILLER              PIC X(44)\n             VALUE 'STORAGE MANAGEMENT PERMAMENT FILE REPORT'.\n           02  FILLER              PIC X(21)  VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'PAGE '.\n           02  H-9-PAGE            PIC ZZZ9   VALUE ZEROES.\n       01  HEADING-10.\n           02  FILLER              PIC X(10)  VALUE ' DM210-10'.\n           02  H-10-DATE           PIC X(8)   VALUE SPACES.\n           02  FILLER              PIC X(25)  VALUE SPACES.\n           02  FILLER              PIC X(45)\n             VALUE 'STORAGE MANAGEMENT FINAL SUMMARY REPORT  '.\n           02  FILLER              PIC X(30)  VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'PAGE '.\n           02  H-10-PAGE           PIC ZZZ9   VALUE ZEROES.\n       01  HEADING-11.\n           02  FILLER              PIC X(10)  VALUE ' DM210-11'.\n           02  H-11-DATE           PIC X(8)   VALUE SPACES.\n           02  FILLER              PIC X(15)  VALUE SPACES.\n           02  FILLER              PIC X(45)\n             VALUE 'STORAGE MANAGEMENT VSAM EXTENT DATASET REPORT'.\n           02  FILLER              PIC X(10)  VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'PAGE '.\n           02  H-11-PAGE           PIC ZZZ9   VALUE ZEROES.\n       01  HEADING-A.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'AAM'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'IND'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(44)  VALUE 'DSNAME'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(6)   VALUE 'VOLSER'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'ALLOC'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE ' USED'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE '   HI'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'DT-CR'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'DT-RF'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'RFM'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'LRECL'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'BLKSI'.\n       01  HEADING-B.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'AAM'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(44)  VALUE 'DSNAME'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(6)   VALUE 'VOLSER'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'SWS'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE '   HI'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'ALLOC'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE '  S/B'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE '  NET'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'DT-CR'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'DT-RF'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(7)   VALUE 'EXTENTS'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'DSO'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'RFM'.\n       01  HEADING-C.\n           02  FILLER              PIC X(10)  VALUE ' DM210-12'.\n           02  H-C-DATE            PIC X(8)   VALUE SPACES.\n           02  FILLER              PIC X(15)  VALUE SPACES.\n           02  FILLER              PIC X(44)\n             VALUE 'STORAGE MANAGEMENT EMPTY FILE REPORT'.\n           02  FILLER              PIC X(21)  VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'PAGE '.\n           02  H-C-PAGE            PIC ZZZ9   VALUE ZEROES.\n       01  HEADING-D.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'AAM'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'IND'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(44)  VALUE 'DSNAME'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(6)   VALUE 'VOLSER'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'ALLOC'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE '   HI'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'DT-CR'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'DT-RF'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'DSO'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'RFM'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'LRECL'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'BLKSI'.\n           02  FILLER              PIC X(2)   VALUE SPACES.\n           02  FILLER              PIC X(7)   VALUE 'EXTENTS'.\n       01  HEADING-E.\n           02  FILLER              PIC X(2)   VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'AAM'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(44)  VALUE 'DSNAME'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(6)   VALUE 'VOLSER'.\n           02  FILLER              PIC X(2)   VALUE SPACES.\n           02  FILLER              PIC X(9)   VALUE 'EXTENT-SW'.\n           02  FILLER              PIC X(3)   VALUE SPACES.\n           02  FILLER              PIC X(17)  VALUE 'NUMBER-OF-EXTENTS'.\n           02  FILLER              PIC X(2)   VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'ALLOC'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE ' USED'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE '   HI'.\n           02  FILLER              PIC X(2)   VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'DSO'.\n       01  HEADING-F.\n           02  FILLER              PIC X(3)   VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'AAM'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(44)  VALUE 'DSNAME'.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  FILLER              PIC X(6)   VALUE 'VOLSER'.\n           02  FILLER              PIC X(2)   VALUE SPACES.\n           02  FILLER              PIC X(6)   VALUE 'REF-SW'.\n           02  FILLER              PIC X(3)   VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'DSO'.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'ALLOC'.\n           02  FILLER              PIC X(4)   VALUE SPACES.\n           02  FILLER              PIC X(11)  VALUE 'DAYS-UNUSED'.\n       01  HEADING-G.\n           02  FILLER              PIC X(5)   VALUE SPACES.\n           02  FILLER              PIC X(6)   VALUE 'VOLSER'.\n           02  FILLER              PIC X(2)   VALUE SPACES.\n           02  FILLER              PIC X(4)   VALUE 'POOL'.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'ALLOC'.\n           02  FILLER              PIC X(4)   VALUE SPACES.\n           02  FILLER              PIC X(4)   VALUE '-OF-'.\n           02  FILLER              PIC X(4)   VALUE SPACES.\n           02  FILLER              PIC X(7)   VALUE '%-ALLOC'.\n           02  FILLER              PIC X(9)   VALUE SPACES.\n           02  FILLER              PIC X(8)   VALUE 'CUR-USED'.\n           02  FILLER              PIC X(4)   VALUE SPACES.\n           02  FILLER              PIC X(7)   VALUE '%-ALLOC'.\n           02  FILLER              PIC X(9)   VALUE SPACES.\n           02  FILLER              PIC X(7)   VALUE 'HI-USED'.\n           02  FILLER              PIC X(4)   VALUE SPACES.\n           02  FILLER              PIC X(7)   VALUE '%-ALLOC'.\n       01  DETAIL-LINE.\n           02  DETAIL-CC           PIC X      VALUE SPACES.\n           02  DETAIL-TEXT         PIC X(132) VALUE SPACES.\n       01  DET-LM.\n           02  DET-LM-AAM          PIC X(3).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-SW           PIC X(3).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-DSNAME       PIC X(44).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-ALLOC        PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-USED-CUR     PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-USED-HI      PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-DT-CREATE    PIC 9(5).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-DT-REF       PIC 9(5).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-DSORG        PIC X(3).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-RECFM        PIC X(3).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-LRECL        PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-LM-BLKSIZE      PIC ZZZZ9.\n       01  DET-PM.\n           02  DET-PM-AAM          PIC X(3).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-PM-SW           PIC X(3).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-PM-DSNAME       PIC X(44).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-PM-VOLSER       PIC X(6).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-PM-ALLOC        PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-PM-USED-CUR     PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-PM-USED-HI      PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-PM-DT-CREATE    PIC 9(5).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-PM-DT-REF       PIC 9(5).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-PM-RECFM        PIC X(3).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-PM-LRECL        PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-PM-BLKSIZE      PIC ZZZZ9.\n       01  DET-GG.\n           02  DET-GG-AAM          PIC X(3).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-GG-SW           PIC X(3).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-GG-DSNAME       PIC X(44).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-GG-VOLSER       PIC X(6).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-GG-ALLOC        PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-GG-USED-CUR     PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-GG-USED-HI      PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-GG-DT-CREATE    PIC 9(5).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-GG-DT-REF       PIC 9(5).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-GG-RECFM        PIC X(3).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-GG-LRECL        PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-GG-BLKSIZE      PIC ZZZZ9.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  DET-GG-EXTENT-CT    PIC 99.\n       01  DET-VT.\n           02  FILLER              PIC X(4)  VALUE SPACES.\n           02  DET-VT-VOLSER       PIC X(6).\n           02  FILLER              PIC X(2)  VALUE SPACES.\n           02 DET-VT-POOL          PIC XXX.\n           02  FILLER              PIC X(7)  VALUE SPACES.\n           02 DET-VT-ALLOC         PIC ZZZZ9.\n           02  FILLER              PIC X(4)  VALUE SPACES.\n           02 DET-VT-OF            PIC ZZZZ9.\n           02  FILLER              PIC X(3)  VALUE SPACES.\n           02 DET-VT-PCT           PIC ZZ9.9.\n           02  FILLER              PIC X     VALUE '%'.\n           02  FILLER              PIC X(12) VALUE  SPACES.\n           02 DET-VT-USED-CUR      PIC ZZZZ9.\n           02  FILLER              PIC X(5)  VALUE SPACES.\n           02 DET-VT-CUR-PCT       PIC ZZ9.9.\n           02  FILLER              PIC X     VALUE '%'.\n           02  FILLER              PIC X(11) VALUE SPACES.\n           02 DET-VT-USED-HI       PIC ZZZZ9.\n           02  FILLER              PIC X(5)  VALUE SPACES.\n           02 DET-VT-HI-PCT        PIC ZZ9.9.\n           02  FILLER              PIC X     VALUE '%'.\n       01  DET-XC.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  DET-XC-AAM          PIC X(3).\n           02  FILLER              PIC X     VALUE SPACES.\n           02  DET-XC-DSNAME       PIC X(44).\n           02  FILLER              PIC X     VALUE SPACES.\n           02  DET-XC-VOLSER       PIC X(6).\n           02  FILLER              PIC X(6)  VALUE SPACES.\n           02  DET-XC-SW-1         PIC X.\n           02  FILLER              PIC X(14) VALUE SPACES.\n           02  DET-XC-EXTENT-CT    PIC Z9.\n           02  FILLER              PIC X(10)  VALUE SPACES.\n           02  DET-XC-ALLOC        PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-XC-USED-CUR     PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-XC-USED-HI      PIC ZZZZ9.\n           02  FILLER              PIC X(2)   VALUE SPACES.\n           02  DET-XC-DSORG        PIC X(3).\n       01  DET-XV.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  DET-XV-AAM          PIC X(3).\n           02  FILLER              PIC X     VALUE SPACES.\n           02  DET-XV-DSNAME       PIC X(44).\n           02  FILLER              PIC X     VALUE SPACES.\n           02  DET-XV-VOLSER       PIC X(6).\n           02  FILLER              PIC X(6)  VALUE SPACES.\n           02  DET-XV-SW-1         PIC X.\n           02  FILLER              PIC X(14) VALUE SPACES.\n           02  DET-XV-EXTENT-CT    PIC Z9.\n           02  FILLER              PIC X(10)  VALUE SPACES.\n           02  DET-XV-ALLOC        PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-XV-USED-CUR     PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-XV-USED-HI      PIC ZZZZ9.\n           02  FILLER              PIC X(2)   VALUE SPACES.\n           02  DET-XV-DSORG        PIC X(3).\n       01  DET-XH.\n           02  DET-XH-AAM          PIC X(3).\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-XH-DSNAME       PIC X(44).\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-XH-VOLSER       PIC X(6).\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-XH-SW           PIC X(3).\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-XH-USED-HI      PIC ZZZZ9.\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-XH-ALLOC        PIC ZZZZ9.\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-XH-SB           PIC ZZZZ9.\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-XH-NET          PIC ZZZZ9.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-XH-DT-CREATE    PIC 9(5).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-XH-DT-REF       PIC 9(5).\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  DET-XH-EXTENT-CT    PIC 99.\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-XH-DSORG        PIC X(3).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-XH-RECFM        PIC X(3).\n       01  DET-MT.\n           02  DET-MT-AAM          PIC X(3).\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-MT-SW           PIC X(3).\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-MT-DSNAME       PIC X(44).\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-MT-VOLSER       PIC X(6).\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-MT-ALLOC        PIC ZZZZ9.\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-MT-USED-HI      PIC ZZZZ9.\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-MT-DT-CREATE    PIC 9(5).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-MT-DT-REF       PIC 9(5).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-MT-DSORG        PIC X(3).\n           02  FILLER              PIC X      VALUE SPACES.\n           02  DET-MT-RECFM        PIC X(3).\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-MT-LRECL        PIC ZZZZ9.\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-MT-BLKSIZE      PIC ZZZZ9.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  DET-MT-EXTENT-CT    PIC 99.\n       01  DET-EO.\n           02  FILLER              PIC X(2)  VALUE SPACES.\n           02  DET-EO-AAM          PIC X(3).\n           02  FILLER              PIC X     VALUE SPACES.\n           02  DET-EO-DSNAME       PIC X(44).\n           02  FILLER              PIC X     VALUE SPACES.\n           02  DET-EO-VOLSER       PIC X(6).\n           02  FILLER              PIC X(5)  VALUE SPACES.\n           02  DET-EO-SW-3         PIC X.\n           02  FILLER              PIC X(5)   VALUE SPACES.\n           02  DET-EO-DSORG        PIC X(3).\n           02  FILLER              PIC X(5)  VALUE SPACES.\n           02  DET-EO-ALLOC        PIC ZZZZ9.\n           02  FILLER              PIC X(7)  VALUE SPACES.\n           02  DET-EO-DIFFDAY      PIC ZZZZ9.\n       01  SUM-TITLE0.\n           02  FILLER              PIC X(132) VALUE SPACES.\n       01  SUM-TITLE1.\n           02  FILLER              PIC X(34)  VALUE SPACES.\n           02  FILLER              PIC X(7)   VALUE 'PRD/ONL'.\n           02  FILLER              PIC X(5)   VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'TOTAL'.\n           02  FILLER              PIC X(16)  VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'SYS'.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'TOTAL'.\n           02  FILLER              PIC X(16)  VALUE SPACES.\n           02  FILLER              PIC X(3)   VALUE 'IPO'.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'TOTAL'.\n       01  SUM-TITLE2.\n           02  FILLER              PIC X(35)  VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'COUNT'.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  FILLER              PIC X(6)   VALUE 'TRACKS'.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'COUNT'.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  FILLER              PIC X(6)   VALUE 'TRACKS'.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE 'COUNT'.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  FILLER              PIC X(6)   VALUE 'TRACKS'.\n       01  SUM-TITLE3.\n           02  FILLER              PIC X(35)  VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE '-----'.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  FILLER              PIC X(6)   VALUE '------'.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE '-----'.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  FILLER              PIC X(6)   VALUE '------'.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  FILLER              PIC X(5)   VALUE '-----'.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  FILLER              PIC X(6)   VALUE '------'.\n       01  SUM-XC.\n           02  FILLER              PIC X(5)   VALUE SPACES.\n           02  FILLER              PIC X(30)  VALUE\n                           'NONVSAM EXTENT CONTROL ------ '.\n           02  SUM-XCP-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-XCP-ALLOC       PIC ZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-XCS-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-XCS-ALLOC       PIC ZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-XCI-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-XCI-ALLOC       PIC ZZZZZ9.\n       01  SUM-XV.\n           02  FILLER              PIC X(5)   VALUE SPACES.\n           02  FILLER              PIC X(30)  VALUE\n                           'VSAM EXTENT CONTROL --------- '.\n           02  SUM-XVP-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-XVP-ALLOC       PIC ZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-XVS-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-XVS-ALLOC       PIC ZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-XVI-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-XVI-ALLOC       PIC ZZZZZ9.\n       01  SUM-XCV.\n           02  FILLER              PIC X(5)   VALUE SPACES.\n           02  FILLER              PIC X(30)  VALUE\n                           '       \"      \"      TOTALS = '.\n           02  SUM-XCPV-CT         PIC ZZZ9.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  SUM-XCPV-TOTAL      PIC ZZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-XCSV-CT         PIC ZZZ9.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  SUM-XCSV-TOTAL      PIC ZZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-XCIV-CT         PIC ZZZ9.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  SUM-XCIV-TOTAL      PIC ZZZZZZ9.\n       01  SUM-XH1.\n           02  FILLER              PIC X(5)   VALUE SPACES.\n           02  FILLER              PIC X(30)  VALUE\n                           'OVER ALLOCATION (NONVSAM) --- '.\n           02  SUM-XHP-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-XHP-NET         PIC ZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-XHS-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-XHS-NET         PIC ZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-XHI-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-XHI-NET         PIC ZZZZZ9.\n       01  SUM-XH2.\n           02  FILLER              PIC X(5)   VALUE SPACES.\n           02  FILLER              PIC X(30)  VALUE\n                           '  \"       \"     (VSAM) ------ '.\n           02  SUM-XHPV-CT         PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-XHP-NET-VS      PIC ZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-XHSV-CT         PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-XHS-NET-VS      PIC ZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-XHIV-CT         PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-XHI-NET-VS      PIC ZZZZZ9.\n       01  SUM-XH3.\n           02  FILLER              PIC X(5)   VALUE SPACES.\n           02  FILLER              PIC X(30)  VALUE\n                           '  \"       \"          TOTALS = '.\n           02  SUM-XHP-CT-TOTAL    PIC ZZZ9.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  SUM-XHP-NET-TOTAL   PIC ZZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-XHS-CT-TOTAL    PIC ZZZ9.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  SUM-XHS-NET-TOTAL   PIC ZZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-XHI-CT-TOTAL    PIC ZZZ9.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  SUM-XHI-NET-TOTAL   PIC ZZZZZZ9.\n       01  SUM-MT.\n           02  FILLER              PIC X(5)   VALUE SPACES.\n           02  FILLER              PIC X(30)  VALUE\n                           'EMPTY FILE ------------------ '.\n           02  SUM-MTP-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-MTP-ALLOC       PIC ZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-MTS-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-MTS-ALLOC       PIC ZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-MTI-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-MTI-ALLOC       PIC ZZZZZ9.\n       01  SUM-GG.\n           02  FILLER              PIC X(5)   VALUE SPACES.\n           02  FILLER              PIC X(30)  VALUE\n                           'GDG FILE -------------------- '.\n           02  SUM-GGP-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  FILLER              PIC X(6)   VALUE '-****-'.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-GGS-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  FILLER              PIC X(6)   VALUE '-****-'.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-GGI-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  FILLER              PIC X(6)   VALUE '-****-'.\n       01  SUM-PM.\n           02  FILLER              PIC X(5)   VALUE SPACES.\n           02  FILLER              PIC X(30)  VALUE\n                           'PERMAMENT FILE -------------- '.\n           02  SUM-PMP-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-PMP-ALLOC       PIC ZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-PMS-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-PMS-ALLOC       PIC ZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-PMI-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-PMI-ALLOC       PIC ZZZZZ9.\n       01  SUM-EO.\n           02  FILLER              PIC X(5)   VALUE SPACES.\n           02  FILLER              PIC X(30)  VALUE\n                           'EXPIRED DATASET ------------- '.\n           02  SUM-EOP-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-EOP-ALLOC       PIC ZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-EOS-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-EOS-ALLOC       PIC ZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-EOI-CT          PIC ZZZ9.\n           02  FILLER              PIC X(7)   VALUE SPACES.\n           02  SUM-EOI-ALLOC       PIC ZZZZZ9.\n       01  SUM-LM1.\n           02  FILLER              PIC X(5)   VALUE SPACES.\n           02  FILLER              PIC X(30)  VALUE\n                           'VOLUME DETAIL (ALLOCATED) --- '.\n           02  SUM-LMP-CT          PIC ZZZ9.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  SUM-LMP-ALLOC       PIC ZZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-LMS-CT          PIC ZZZ9.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  SUM-LMS-ALLOC       PIC ZZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  SUM-LMI-CT          PIC ZZZ9.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  SUM-LMI-ALLOC       PIC ZZZZZZ9.\n       01  SUM-LM2.\n           02  FILLER              PIC X(5)   VALUE SPACES.\n           02  FILLER              PIC X(35)  VALUE\n                           '   \"      \"   (CUR-USED) ---- -**-'.\n           02  FILLER              PIC X(5)   VALUE SPACES.\n           02  SUM-LMP-ALLOC-CUR   PIC ZZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  FILLER              PIC X(4)   VALUE '-**-'.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  SUM-LMS-ALLOC-CUR   PIC ZZZZZZ9.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  FILLER              PIC X(4)   VALUE '-**-'.\n           02  FILLER              PIC X(6)   VALUE SPACES.\n           02  SUM-LMI-ALLOC-CUR   PIC ZZZZZZ9.\n       01  SUM-LM3.\n           02  FILLER              PIC X(5)   VALUE SPACES.\n           02  FILLER              PIC X(29)  VALUE\n                           '*** TOTAL ALLOCATED TRACKS = '.\n           02  SUM-LM-ALLC-TOTAL   PIC Z,ZZZ,ZZ9.\n           02  FILLER              PIC X(16)  VALUE '     DATASETS = '.\n           02  SUM-LM-TOTAL        PIC Z,ZZ9.\n       01  SUM-LM4.\n           02  FILLER              PIC X(5)   VALUE SPACES.\n           02  FILLER              PIC X(29)  VALUE\n                           '*** TOTAL CUR-USED TRACKS  = '.\n           02  SUM-LM-CUR-TOTAL    PIC Z,ZZZ,ZZ9.\n       01  SUM-VT.\n           02  FILLER              PIC X(5)   VALUE SPACES.\n           02  FILLER              PIC X(29)  VALUE\n                          'AVERAGE % VOLUME ALLOCATED --'.\n           02  FILLER              PIC X(1)   VALUE '('.\n           02  SUM-VT-PRD-CT       PIC Z9.\n           02  FILLER              PIC X(1)   VALUE '/'.\n           02  SUM-VT-ONL-CT       PIC Z9.\n           02  FILLER              PIC X(2)   VALUE ') '.\n           02  SUM-VT-PRD-PCT      PIC ZZ9.9.\n           02  FILLER              PIC X(3)   VALUE '% /'.\n           02  SUM-VT-ONL-PCT      PIC ZZ9.9.\n           02  FILLER              PIC X      VALUE '%'.\n           02  FILLER              PIC X(10)  VALUE SPACES.\n           02  FILLER              PIC X(1)   VALUE '('.\n           02  SUM-VT-SYS-CT       PIC Z9.\n           02  FILLER              PIC X(8)   VALUE ')       '.\n           02  SUM-VT-SYS-PCT      PIC ZZ9.9.\n           02  FILLER              PIC X      VALUE '%'.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  FILLER              PIC X(1)   VALUE '('.\n           02  SUM-VT-IPO-CT       PIC Z9.\n           02  FILLER              PIC X(8)   VALUE ')       '.\n           02  SUM-VT-IPO-PCT      PIC ZZ9.9.\n           02  FILLER              PIC X      VALUE '%'.\n       01  SUM-VU.\n           02  FILLER              PIC X(5)   VALUE SPACES.\n           02  FILLER              PIC X(29)  VALUE\n                          'AVERAGE % VOLUME CUR-USED ---'.\n           02  FILLER              PIC X(1)   VALUE '('.\n           02  SUM-VU-PRD-CT       PIC Z9.\n           02  FILLER              PIC X(1)   VALUE '/'.\n           02  SUM-VU-ONL-CT       PIC Z9.\n           02  FILLER              PIC X(2)   VALUE ') '.\n           02  SUM-VU-PRD-PCT      PIC ZZ9.9.\n           02  FILLER              PIC X(3)   VALUE '% /'.\n           02  SUM-VU-ONL-PCT      PIC ZZ9.9.\n           02  FILLER              PIC X      VALUE '%'.\n           02  FILLER              PIC X(10)  VALUE SPACES.\n           02  FILLER              PIC X(1)   VALUE '('.\n           02  SUM-VU-SYS-CT       PIC Z9.\n           02  FILLER              PIC X(8)   VALUE ')       '.\n           02  SUM-VU-SYS-PCT      PIC ZZ9.9.\n           02  FILLER              PIC X      VALUE '%'.\n           02  FILLER              PIC X(14)  VALUE SPACES.\n           02  FILLER              PIC X(1)   VALUE '('.\n           02  SUM-VU-IPO-CT       PIC Z9.\n           02  FILLER              PIC X(8)   VALUE ')       '.\n           02  SUM-VU-IPO-PCT      PIC ZZ9.9.\n           02  FILLER              PIC X      VALUE '%'.\n       01  WS-FIXC.\n           COPY CDMFD030.\n       PROCEDURE DIVISION.\n           MOVE LINE-MAX TO VDET-LINE-CT\n                            VSUM-LINE-CT\n                            XTNT-LINE-CT\n                            VTNT-LINE-CT\n                            OVER-LINE-CT\n                            EOLD-LINE-CT\n                            PERM-LINE-CT\n                            MPTY-LINE-CT\n                            SUMY-LINE-CT\n                            RGDG-LINE-CT.\n           MOVE CURRENT-DATE TO H-1-DATE\n                                H-2-DATE\n                                H-4-DATE\n                                H-5-DATE\n                                H-6-DATE\n                                H-7-DATE\n                                H-C-DATE\n                                H-9-DATE\n                                H-10-DATE\n                                H-11-DATE\n                                WS-DATE.\n           MOVE WS-DATE-MM TO D-C-MONTH.\n           MOVE WS-DATE-DD TO D-C-DOM.\n           MOVE WS-DATE-YY TO D-C-YEAR.\n           MOVE ZERO TO D-C-DOY\n                        D-C-DOW\n                        D-C-JDAY.\n           CALL 'DATCNVRT' USING\n                        D-C-YEAR\n                        D-C-MONTH\n                        D-C-DOM\n                        D-C-DOY\n                        D-C-DOW\n                        D-C-JDAY.\n           MOVE D-C-JDAY TO WS-TODAY-JDAY.\n           SUBTRACT +90 FROM WS-TODAY-JDAY GIVING WS-90-AGO-JDAY.\n           MOVE D-C-YEAR TO WS-DAY-YY(1).\n           MOVE D-C-DOY  TO WS-DAY-DDD(1).\n           PERFORM BLD-VOLSER.\n           SORT SORTVOL\n               ASCENDING KEY SVOL-VOLSER SVOL-DSNAME\n           INPUT  PROCEDURE IS SVOL-IN  THRU SVOL-IN-EXIT\n           OUTPUT PROCEDURE IS SVOL-OUT THRU SVOL-OUT-EXIT.\n           SKIP2\n           SORT SORTAAM\n               ASCENDING KEY SAAM-AAM SAAM-DSNAME\n           INPUT  PROCEDURE IS SAAM-IN  THRU SAAM-IN-EXIT\n           OUTPUT PROCEDURE IS SAAM-OUT THRU SAAM-OUT-EXIT.\n           GO TO E-O-J.\n       SVOL-IN SECTION.\n           OPEN INPUT MASTER.\n           OPEN OUTPUT RPTRGDG RPTXTNT RPTOVER RPTPERM RPTMPTY.\n           OPEN OUTPUT RPTSUMY RPTVTNT OUTFIXC.\n           MOVE 'M' TO FIXC-CMD.\n           MOVE SPACES TO FIXC-FILL.\n       SVOL-IN-READ-MASTER.\n           READ MASTER\n               AT END GO TO SVOL-IN-END.\n           IF DM-MST-DT-CREATE EQUAL 00000 THEN\n               GO TO SVOL-IN-READ-MASTER.\n           MOVE DM-MST-AAM       TO SVOL-AAM.\n           MOVE DM-MST-SW        TO SVOL-SW.\n           MOVE DM-MST-DSNAME    TO SVOL-DSNAME.\n           MOVE DM-MST-VOLSER    TO SVOL-VOLSER.\n           MOVE DM-MST-ALLOC     TO SVOL-ALLOC.\n           MOVE DM-MST-USED-CUR  TO SVOL-USED-CUR.\n           MOVE DM-MST-USED-HI   TO SVOL-USED-HI.\n           MOVE DM-MST-DT-CREATE TO SVOL-DT-CREATE.\n           MOVE DM-MST-DT-REF    TO SVOL-DT-REF.\n           MOVE DM-MST-DSORG     TO SVOL-DSORG.\n           MOVE DM-MST-RECFM     TO SVOL-RECFM.\n           MOVE DM-MST-LRECL     TO SVOL-LRECL.\n           MOVE DM-MST-BLKSIZE   TO SVOL-BLKSIZE.\n           MOVE DM-MST-EXTENT-CT TO SVOL-EXTENT-CT.\n           MOVE DM-MST-USED-LO   TO SVOL-USED-LO.\n           RELEASE SVOL-REC.\n           IF SVOL-SW-3 EQUAL 'T' THEN\n               GO TO SVOL-IN-READ-MASTER.\n           MOVE 'N' TO WS-FIXC-SW.\n           MOVE 'N' TO WS-XTNT-SW.\n           PERFORM RPT-RGDG.\n           PERFORM RPT-PERM.\n           PERFORM RPT-XTNT.\n           PERFORM RPT-VTNT.\n           PERFORM RPT-OVER.\n           PERFORM RPT-MPTY.\n           PERFORM GEN-FIXC.\n           GO TO SVOL-IN-READ-MASTER.\n       SVOL-IN-END.\n           ADD SUMY-XCP-CT TO SUMY-XCPV-CT.\n           ADD SUMY-XCS-CT TO SUMY-XCSV-CT.\n           ADD SUMY-XCI-CT TO SUMY-XCIV-CT.\n           ADD SUMY-XVP-CT TO SUMY-XCPV-CT.\n           ADD SUMY-XVS-CT TO SUMY-XCSV-CT.\n           ADD SUMY-XVI-CT TO SUMY-XCIV-CT.\n           CLOSE MASTER.\n           CLOSE RPTRGDG RPTXTNT RPTOVER RPTPERM RPTMPTY.\n           CLOSE RPTVTNT OUTFIXC.\n       SVOL-IN-EXIT.\n           EXIT.\n       SVOL-OUT SECTION.\n           OPEN OUTPUT RPTVDET RPTVSUM.\n           PERFORM SVOL-OUT-READ THRU SVOL-OUT-READ-EXIT.\n           IF SORTFILE-EOF THEN\n               GO TO SVOL-OUT-EXIT.\n           MOVE SVOL-VOLSER TO WS-VOL-VOLSER H-1-VOLSER.\n           PERFORM SVOL-OUT-RPT-VDET\n              THRU SVOL-OUT-RPT-VDET-EXIT.\n       SVOL-OUT-NEXT.\n           PERFORM SVOL-OUT-READ THRU SVOL-OUT-READ-EXIT.\n           IF SORTFILE-EOF THEN\n               PERFORM SVOL-OUT-RPT-VSUM\n               GO TO SVOL-OUT-END.\n           IF SVOL-VOLSER NOT EQUAL WS-VOL-VOLSER THEN\n               MOVE LINE-MAX TO VDET-LINE-CT\n               PERFORM SVOL-OUT-RPT-VSUM.\n           MOVE SVOL-VOLSER TO WS-VOL-VOLSER H-1-VOLSER.\n           PERFORM SVOL-OUT-RPT-VDET\n              THRU SVOL-OUT-RPT-VDET-EXIT.\n           GO TO SVOL-OUT-NEXT.\n       SVOL-OUT-RPT-VDET.\n           MOVE SVOL-AAM           TO DET-LM-AAM.\n           MOVE SVOL-SW            TO DET-LM-SW.\n           MOVE SVOL-DSNAME        TO DET-LM-DSNAME.\n           MOVE SVOL-ALLOC         TO DET-LM-ALLOC.\n           MOVE SVOL-USED-CUR      TO DET-LM-USED-CUR\n           MOVE SVOL-USED-HI       TO DET-LM-USED-HI.\n           MOVE SVOL-DT-CREATE     TO DET-LM-DT-CREATE.\n           MOVE SVOL-DT-REF        TO DET-LM-DT-REF.\n           MOVE SVOL-DSORG         TO DET-LM-DSORG.\n           MOVE SVOL-RECFM         TO DET-LM-RECFM.\n           MOVE SVOL-LRECL         TO DET-LM-LRECL.\n           MOVE SVOL-BLKSIZE       TO DET-LM-BLKSIZE.\n           MOVE SVOL-VOLSER        TO WS-VOL-POOL.\n           MOVE DET-LM TO DETAIL-TEXT.\n           IF WS-VOL-POOL EQUAL 'PRD' THEN\n              ADD +1 TO SUMY-LMP-CT\n              ADD SVOL-ALLOC TO SUMY-LMP-ALLOC\n              ADD SVOL-USED-CUR TO SUMY-LMP-ALLOC-CUR.\n           IF WS-VOL-POOL EQUAL 'SYS' OR 'SRE' THEN\n              ADD +1 TO SUMY-LMS-CT\n              ADD SVOL-ALLOC TO SUMY-LMS-ALLOC\n              ADD SVOL-USED-CUR TO SUMY-LMS-ALLOC-CUR.\n           IF WS-VOL-POOL EQUAL 'IPO' THEN\n              ADD +1 TO SUMY-LMI-CT\n              ADD SVOL-ALLOC TO SUMY-LMI-ALLOC\n              ADD SVOL-USED-CUR TO SUMY-LMI-ALLOC-CUR.\n           PERFORM VDET-A-LINE.\n           ADD SVOL-ALLOC          TO WS-VOL-ALLOC.\n           ADD SVOL-USED-CUR       TO WS-VOL-USED-CUR.\n           ADD SVOL-USED-HI        TO WS-VOL-USED-HI.\n           ADD SVOL-USED-LO        TO WS-VOL-USED-LO.\n       SVOL-OUT-RPT-VDET-EXIT.\n           EXIT.\n       SVOL-OUT-RPT-VSUM.\n           IF NOT (WS-VOL-VOLSER EQUAL LOW-VALUES) THEN\n               PERFORM LOC-VOLSER\n               COMPUTE WS-VOL-PCT ROUNDED =\n                       (100 * WS-VOL-ALLOC) / WS-VOL-TRK-VOL\n               COMPUTE WS-VOL-HI-PCT ROUNDED =\n                       (100 * WS-VOL-USED-HI) / WS-VOL-ALLOC\n               COMPUTE WS-VOL-CUR-PCT ROUNDED =\n                       (100 * WS-VOL-USED-CUR) / WS-VOL-ALLOC\n               PERFORM SVOL-OUT-PCT THRU SVOL-OUT-PCT-EXIT\n               MOVE WS-VOL-VOLSER   TO DET-VT-VOLSER\n               MOVE WS-VOL-POOL     TO DET-VT-POOL\n               MOVE WS-VOL-ALLOC    TO DET-VT-ALLOC\n               MOVE WS-VOL-TRK-VOL  TO DET-VT-OF\n               MOVE WS-VOL-PCT      TO DET-VT-PCT\n               MOVE WS-VOL-HI-PCT   TO DET-VT-HI-PCT\n               MOVE WS-VOL-CUR-PCT  TO DET-VT-CUR-PCT\n               MOVE WS-VOL-USED-CUR TO DET-VT-USED-CUR\n               MOVE WS-VOL-USED-HI  TO DET-VT-USED-HI\n               MOVE DET-VT TO DETAIL-TEXT\n               PERFORM VSUM-A-LINE.\n           MOVE LOW-VALUES TO WS-VOL-VOLSER.\n           MOVE ZERO TO WS-VOL-ALLOC\n                        WS-VOL-USED-CUR\n                        WS-VOL-USED-HI\n                        WS-VOL-USED-LO.\n       SVOL-OUT-READ.\n           RETURN SORTVOL\n               AT END MOVE 'Y' TO SORTFILE-EOF-SW.\n       SVOL-OUT-READ-EXIT.\n           EXIT.\n       SVOL-OUT-END.\n           PERFORM VOL-VT-PERCENT THRU VOL-VT-PERCENT-EXIT.\n           CLOSE RPTVDET RPTVSUM.\n       SVOL-OUT-EXIT.\n           EXIT.\n       SVOL-OUT-PCT.\n           IF WS-VOL-POOL EQUAL 'PRD' THEN\n              ADD WS-VOL-PCT     TO SUMY-VT-PRD\n              ADD WS-VOL-CUR-PCT TO SUMY-VU-PRD\n              ADD +1 TO SUMY-VT-PRD-CT.\n           IF WS-VOL-POOL EQUAL 'ONL' THEN\n              ADD WS-VOL-PCT     TO SUMY-VT-ONL\n              ADD WS-VOL-CUR-PCT TO SUMY-VU-ONL\n              ADD +1 TO SUMY-VT-ONL-CT.\n           IF WS-VOL-POOL EQUAL 'SYS' THEN\n              ADD WS-VOL-PCT     TO SUMY-VT-SYS\n              ADD WS-VOL-CUR-PCT TO SUMY-VU-SYS\n              ADD +1 TO SUMY-VT-SYS-CT.\n           IF WS-VOL-POOL EQUAL 'IPO' THEN\n              ADD WS-VOL-PCT     TO SUMY-VT-IPO\n              ADD WS-VOL-CUR-PCT TO SUMY-VU-IPO\n              ADD +1 TO SUMY-VT-IPO-CT.\n       SVOL-OUT-PCT-EXIT.\n       SAAM-IN SECTION.\n           OPEN INPUT MASTER.\n           MOVE +1 TO I.\n           MOVE WS-TODAY-JDAY TO D-C-JDAY.\n           PERFORM SAAM-IN-FILL-DAY 9 TIMES.\n       SAAM-IN-READ-MASTER.\n           READ MASTER\n               AT END GO TO SAAM-IN-END.\n           IF DM-MST-DT-CREATE EQUAL 00000 THEN\n               GO TO SAAM-IN-READ-MASTER.\n           IF DM-MST-SW-3 EQUAL 'T' OR 'I' THEN\n               GO TO SAAM-IN-READ-MASTER.\n           PERFORM SAAM-IN-DIFFDAY THRU SAAM-IN-DIFFDAY-EXIT.\n           IF (DM-MST-SW-3 EQUAL 'D' AND\n               WS-DIFFDAY GREATER THAN +10) THEN\n               GO TO SAAM-IN-WRITE-SORTFILE.\n           IF (DM-MST-SW-3 EQUAL 'M' AND\n               WS-DIFFDAY GREATER THAN +70) THEN\n               GO TO SAAM-IN-WRITE-SORTFILE.\n           IF (DM-MST-SW-3 EQUAL 'Q' AND\n               WS-DIFFDAY GREATER THAN +193) THEN\n               GO TO SAAM-IN-WRITE-SORTFILE.\n           IF (DM-MST-SW-3 EQUAL 'A' AND\n               WS-DIFFDAY GREATER THAN +376) THEN\n               GO TO SAAM-IN-WRITE-SORTFILE.\n           GO TO SAAM-IN-READ-MASTER.\n       SAAM-IN-WRITE-SORTFILE.\n           MOVE DM-MST-AAM       TO SAAM-AAM.\n           MOVE DM-MST-SW        TO SAAM-SW.\n           MOVE DM-MST-DSNAME    TO SAAM-DSNAME.\n           MOVE DM-MST-VOLSER    TO SAAM-VOLSER.\n           MOVE DM-MST-ALLOC     TO SAAM-ALLOC.\n           MOVE DM-MST-DSORG     TO SAAM-DSORG.\n           MOVE DM-MST-DT-REF    TO SAAM-DT-REF.\n           MOVE WS-DIFFDAY       TO SAAM-DIFFDAY.\n           RELEASE SAAM-REC.\n           GO TO SAAM-IN-READ-MASTER.\n       SAAM-IN-FILL-DAY.\n           MOVE ZERO TO D-C-YEAR\n                        D-C-MONTH\n                        D-C-DOM\n                        D-C-DOY\n                        D-C-DOW.\n           SUBTRACT +1 FROM D-C-JDAY.\n           CALL 'DATCNVRT' USING\n                        D-C-YEAR\n                        D-C-MONTH\n                        D-C-DOM\n                        D-C-DOY\n                        D-C-DOW\n                        D-C-JDAY.\n           ADD +1 TO I.\n           MOVE D-C-YEAR TO WS-DAY-YY(I).\n           MOVE D-C-DOY  TO WS-DAY-DDD(I).\n       SAAM-IN-DIFFDAY.\n           IF DM-MST-DT-REF EQUAL WS-DAY(1) THEN\n               MOVE +0 TO WS-DIFFDAY\n               GO TO SAAM-IN-DIFFDAY-EXIT.\n           IF DM-MST-DT-REF EQUAL WS-DAY(2) THEN\n               MOVE +1 TO WS-DIFFDAY\n               GO TO SAAM-IN-DIFFDAY-EXIT.\n           IF DM-MST-DT-REF EQUAL WS-DAY(3) THEN\n               MOVE +2 TO WS-DIFFDAY\n               GO TO SAAM-IN-DIFFDAY-EXIT.\n           IF DM-MST-DT-REF EQUAL WS-DAY(4) THEN\n               MOVE +3 TO WS-DIFFDAY\n               GO TO SAAM-IN-DIFFDAY-EXIT.\n           IF DM-MST-DT-REF EQUAL WS-DAY(5) THEN\n               MOVE +4 TO WS-DIFFDAY\n               GO TO SAAM-IN-DIFFDAY-EXIT.\n           IF DM-MST-DT-REF EQUAL WS-DAY(6) THEN\n               MOVE +5 TO WS-DIFFDAY\n               GO TO SAAM-IN-DIFFDAY-EXIT.\n           IF DM-MST-DT-REF EQUAL WS-DAY(7) THEN\n               MOVE +6 TO WS-DIFFDAY\n               GO TO SAAM-IN-DIFFDAY-EXIT.\n           IF DM-MST-DT-REF EQUAL WS-DAY(8) THEN\n               MOVE +7 TO WS-DIFFDAY\n               GO TO SAAM-IN-DIFFDAY-EXIT.\n           IF DM-MST-DT-REF EQUAL WS-DAY(9) THEN\n               MOVE +8 TO WS-DIFFDAY\n               GO TO SAAM-IN-DIFFDAY-EXIT.\n           IF DM-MST-DT-REF EQUAL WS-DAY(10) THEN\n               MOVE +9 TO WS-DIFFDAY\n               GO TO SAAM-IN-DIFFDAY-EXIT.\n           MOVE DM-MST-DT-REF TO WS-YYDDD.\n               MOVE WS-YYDDD-YY  TO D-C-YEAR.\n               MOVE WS-YYDDD-DDD TO D-C-DOY.\n           MOVE ZERO TO D-C-JDAY\n                        D-C-MONTH\n                        D-C-DOM\n                        D-C-DOW.\n           CALL 'DATCNVRT' USING\n                        D-C-YEAR\n                        D-C-MONTH\n                        D-C-DOM\n                        D-C-DOY\n                        D-C-DOW\n                        D-C-JDAY.\n           SUBTRACT D-C-JDAY FROM WS-TODAY-JDAY GIVING WS-DIFFDAY.\n       SAAM-IN-DIFFDAY-EXIT.\n           EXIT.\n       SAAM-IN-END.\n           CLOSE MASTER.\n       SAAM-IN-EXIT.\n           EXIT.\n       SAAM-OUT SECTION.\n           MOVE 'N' TO SORTFILE-EOF-SW.\n           OPEN OUTPUT RPTEOLD.\n           PERFORM SAAM-OUT-READ THRU SAAM-OUT-READ-EXIT.\n           IF SORTFILE-EOF THEN\n               GO TO SAAM-OUT-END.\n           PERFORM SAAM-OUT-RPT-EOLD.\n       SAAM-OUT-NEXT.\n           PERFORM SAAM-OUT-READ THRU SAAM-OUT-READ-EXIT.\n           IF SORTFILE-EOF THEN\n               GO TO SAAM-OUT-END.\n           PERFORM SAAM-OUT-RPT-EOLD.\n           GO TO SAAM-OUT-NEXT.\n       SAAM-OUT-RPT-EOLD.\n           MOVE SAAM-AAM           TO DET-EO-AAM.\n           MOVE SAAM-SW-3          TO DET-EO-SW-3.\n           MOVE SAAM-DSNAME        TO DET-EO-DSNAME.\n           MOVE SAAM-ALLOC         TO DET-EO-ALLOC.\n           MOVE SAAM-DSORG         TO DET-EO-DSORG.\n           MOVE SAAM-VOLSER        TO DET-EO-VOLSER.\n           MOVE SAAM-DIFFDAY       TO DET-EO-DIFFDAY.\n           MOVE SAAM-VOLSER        TO WS-VOL-POOL.\n           MOVE DET-EO TO DETAIL-TEXT.\n           IF WS-VOL-POOL EQUAL 'PRD' THEN\n              ADD +1 TO SUMY-EOP-CT\n              ADD SAAM-ALLOC TO SUMY-EOP-ALLOC.\n           IF WS-VOL-POOL EQUAL 'SYS' OR 'SRE' THEN\n              ADD +1 TO SUMY-EOS-CT\n              ADD SAAM-ALLOC TO SUMY-EOS-ALLOC.\n           IF WS-VOL-POOL EQUAL 'IPO' THEN\n              ADD +1 TO SUMY-EOI-CT\n              ADD SAAM-ALLOC TO SUMY-EOI-ALLOC.\n           PERFORM EOLD-A-LINE.\n       SAAM-OUT-READ.\n           RETURN SORTAAM\n               AT END MOVE 'Y' TO SORTFILE-EOF-SW.\n       SAAM-OUT-READ-EXIT.\n           EXIT.\n       SAAM-OUT-END.\n           CLOSE RPTEOLD.\n       SAAM-OUT-EXIT.\n           EXIT.\n       VOL-VT-PERCENT.\n           COMPUTE SUM-VT-PRD-PCT ROUNDED =\n             SUMY-VT-PRD / SUMY-VT-PRD-CT.\n           COMPUTE SUM-VT-ONL-PCT ROUNDED =\n             SUMY-VT-ONL / SUMY-VT-ONL-CT.\n           COMPUTE SUM-VT-SYS-PCT ROUNDED =\n             SUMY-VT-SYS / SUMY-VT-SYS-CT.\n           COMPUTE SUM-VT-IPO-PCT ROUNDED =\n             SUMY-VT-IPO / SUMY-VT-IPO-CT.\n           MOVE SUMY-VT-PRD-CT  TO  SUM-VT-PRD-CT.\n           MOVE SUMY-VT-ONL-CT  TO  SUM-VT-ONL-CT.\n           MOVE SUMY-VT-SYS-CT  TO  SUM-VT-SYS-CT.\n           MOVE SUMY-VT-IPO-CT  TO  SUM-VT-IPO-CT.\n           COMPUTE SUM-VU-PRD-PCT ROUNDED =\n             SUMY-VU-PRD / SUMY-VT-PRD-CT.\n           COMPUTE SUM-VU-ONL-PCT ROUNDED =\n             SUMY-VU-ONL / SUMY-VT-ONL-CT.\n           COMPUTE SUM-VU-SYS-PCT ROUNDED =\n             SUMY-VU-SYS / SUMY-VT-SYS-CT.\n           COMPUTE SUM-VU-IPO-PCT ROUNDED =\n             SUMY-VU-IPO / SUMY-VT-IPO-CT.\n           MOVE SUMY-VT-PRD-CT  TO  SUM-VU-PRD-CT.\n           MOVE SUMY-VT-ONL-CT  TO  SUM-VU-ONL-CT.\n           MOVE SUMY-VT-SYS-CT  TO  SUM-VU-SYS-CT.\n           MOVE SUMY-VT-IPO-CT  TO  SUM-VU-IPO-CT.\n       VOL-VT-PERCENT-EXIT.\n           EXIT.\n       RPT-RGDG SECTION.\n           IF DM-MST-DSORG NOT EQUAL 'GO' THEN\n               GO TO RPT-RGDG-EXIT.\n           MOVE DM-MST-AAM         TO DET-GG-AAM.\n           MOVE DM-MST-SW          TO DET-GG-SW.\n           MOVE DM-MST-DSNAME      TO DET-GG-DSNAME.\n           MOVE DM-MST-VOLSER      TO DET-GG-VOLSER.\n           MOVE DM-MST-ALLOC       TO DET-GG-ALLOC.\n           MOVE DM-MST-USED-CUR    TO DET-GG-USED-CUR\n           MOVE DM-MST-USED-HI     TO DET-GG-USED-HI.\n           MOVE DM-MST-DT-CREATE   TO DET-GG-DT-CREATE.\n           MOVE DM-MST-DT-REF      TO DET-GG-DT-REF.\n           MOVE DM-MST-RECFM       TO DET-GG-RECFM.\n           MOVE DM-MST-LRECL       TO DET-GG-LRECL.\n           MOVE DM-MST-BLKSIZE     TO DET-GG-BLKSIZE.\n           MOVE DM-MST-EXTENT-CT   TO DET-GG-EXTENT-CT.\n           MOVE DM-MST-VOLSER      TO WS-VOL-POOL.\n           MOVE DET-GG TO DETAIL-TEXT.\n           IF WS-VOL-POOL EQUAL 'PRD' THEN\n              ADD +1 TO SUMY-GGP-CT.\n           IF WS-VOL-POOL EQUAL 'SYS' OR 'SRE' THEN\n              ADD +1 TO SUMY-GGS-CT.\n           IF WS-VOL-POOL EQUAL 'IPO' THEN\n              ADD +1 TO SUMY-GGI-CT.\n           PERFORM RGDG-A-LINE.\n       RPT-RGDG-EXIT.\n           EXIT.\n       RPT-PERM SECTION.\n           IF DM-MST-SW-3 NOT EQUAL 'I' THEN\n              GO TO RPT-PERM-EXIT.\n           MOVE DM-MST-AAM         TO DET-PM-AAM.\n           MOVE DM-MST-SW          TO DET-PM-SW.\n           MOVE DM-MST-DSNAME      TO DET-PM-DSNAME.\n           MOVE DM-MST-VOLSER      TO DET-PM-VOLSER.\n           MOVE DM-MST-ALLOC       TO DET-PM-ALLOC.\n           MOVE DM-MST-USED-CUR    TO DET-PM-USED-CUR\n           MOVE DM-MST-USED-HI     TO DET-PM-USED-HI.\n           MOVE DM-MST-DT-CREATE   TO DET-PM-DT-CREATE.\n           MOVE DM-MST-DT-REF      TO DET-PM-DT-REF.\n           MOVE DM-MST-RECFM       TO DET-PM-RECFM.\n           MOVE DM-MST-LRECL       TO DET-PM-LRECL.\n           MOVE DM-MST-BLKSIZE     TO DET-PM-BLKSIZE.\n           MOVE DM-MST-VOLSER      TO WS-VOL-POOL.\n           MOVE DET-PM TO DETAIL-TEXT.\n           IF WS-VOL-POOL EQUAL 'PRD' THEN\n              ADD +1 TO SUMY-PMP-CT\n              ADD DM-MST-ALLOC TO SUMY-PMP-ALLOC.\n           IF WS-VOL-POOL EQUAL 'SYS' OR 'SRE' THEN\n              ADD +1 TO SUMY-PMS-CT\n              ADD DM-MST-ALLOC TO SUMY-PMS-ALLOC.\n           IF WS-VOL-POOL EQUAL 'IPO' THEN\n              ADD +1 TO SUMY-PMI-CT\n              ADD DM-MST-ALLOC TO SUMY-PMI-ALLOC.\n           PERFORM PERM-A-LINE.\n       RPT-PERM-EXIT.\n           EXIT.\n       RPT-XTNT SECTION.\n           IF DM-MST-EXTENT-CT EQUAL 01 THEN\n              GO TO RPT-XTNT-EXIT.\n           IF DM-MST-DSORG EQUAL 'GO ' THEN\n              GO TO RPT-XTNT-EXIT.\n           IF DM-MST-DSORG EQUAL 'VS ' THEN\n              GO TO RPT-XTNT-EXIT.\n           MOVE DM-MST-AAM       TO DET-XC-AAM.\n           MOVE DM-MST-DSNAME    TO DET-XC-DSNAME.\n           MOVE DM-MST-VOLSER    TO DET-XC-VOLSER.\n           MOVE DM-MST-SW-1      TO DET-XC-SW-1.\n           MOVE DM-MST-EXTENT-CT TO DET-XC-EXTENT-CT.\n           MOVE DM-MST-ALLOC     TO DET-XC-ALLOC.\n           MOVE DM-MST-USED-CUR  TO DET-XC-USED-CUR.\n           MOVE DM-MST-USED-HI   TO DET-XC-USED-HI.\n           MOVE DM-MST-DSORG     TO DET-XC-DSORG.\n           MOVE DM-MST-VOLSER    TO WS-VOL-POOL.\n           MOVE DET-XC TO DETAIL-TEXT.\n           IF WS-VOL-POOL EQUAL 'PRD' THEN\n              ADD +1 TO SUMY-XCP-CT\n              ADD DM-MST-ALLOC TO SUMY-XCP-ALLOC.\n           IF WS-VOL-POOL EQUAL 'SYS' OR 'SRE' THEN\n              ADD +1 TO SUMY-XCS-CT\n              ADD DM-MST-ALLOC TO SUMY-XCS-ALLOC.\n           IF WS-VOL-POOL EQUAL 'IPO' THEN\n              ADD +1 TO SUMY-XCI-CT\n              ADD DM-MST-ALLOC TO SUMY-XCI-ALLOC.\n           PERFORM XTNT-A-LINE.\n           MOVE 'Y' TO WS-FIXC-SW.\n       RPT-XTNT-EXIT.\n           EXIT.\n       RPT-VTNT SECTION.\n           IF DM-MST-EXTENT-CT EQUAL 01 THEN\n              GO TO RPT-VTNT-EXIT.\n           IF DM-MST-DSORG EQUAL 'GO ' THEN\n              GO TO RPT-VTNT-EXIT.\n           IF DM-MST-DSORG NOT EQUAL 'VS ' THEN\n              GO TO RPT-VTNT-EXIT.\n           MOVE DM-MST-AAM       TO DET-XV-AAM.\n           MOVE DM-MST-DSNAME    TO DET-XV-DSNAME.\n           MOVE DM-MST-VOLSER    TO DET-XV-VOLSER.\n           MOVE DM-MST-SW-1      TO DET-XV-SW-1.\n           MOVE DM-MST-EXTENT-CT TO DET-XV-EXTENT-CT.\n           MOVE DM-MST-ALLOC     TO DET-XV-ALLOC.\n           MOVE DM-MST-USED-CUR  TO DET-XV-USED-CUR.\n           MOVE DM-MST-USED-HI   TO DET-XV-USED-HI.\n           MOVE DM-MST-DSORG     TO DET-XV-DSORG.\n           MOVE DM-MST-VOLSER    TO WS-VOL-POOL.\n           MOVE DET-XV TO DETAIL-TEXT.\n           IF WS-VOL-POOL EQUAL 'PRD' THEN\n              ADD +1 TO SUMY-XVP-CT\n              ADD DM-MST-ALLOC TO SUMY-XVP-ALLOC.\n           IF WS-VOL-POOL EQUAL 'SYS' OR 'SRE' THEN\n              ADD +1 TO SUMY-XVS-CT\n              ADD DM-MST-ALLOC TO SUMY-XVS-ALLOC.\n           IF WS-VOL-POOL EQUAL 'IPO' THEN\n              ADD +1 TO SUMY-XVI-CT\n              ADD DM-MST-ALLOC TO SUMY-XVI-ALLOC.\n           PERFORM VTNT-A-LINE.\n           MOVE 'Y' TO WS-FIXC-SW.\n       RPT-VTNT-EXIT.\n           EXIT.\n       RPT-OVER SECTION.\n           IF DM-MST-SW-1 EQUAL 'N' THEN\n               GO TO RPT-OVER-EXIT.\n           IF DM-MST-DSORG EQUAL 'GO ' THEN\n               GO TO RPT-OVER-EXIT.\n           IF DM-MST-USED-HI EQUAL +0 THEN\n               GO TO RPT-OVER-EXIT.\n           PERFORM XTNT-SB.\n           IF DM-MST-ALLOC NOT GREATER WS-XTNT-SB THEN\n              GO TO RPT-OVER-EXIT.\n           MOVE DM-MST-DT-CREATE TO WS-YYDDD.\n           MOVE WS-YYDDD-YY TO D-C-YEAR.\n           MOVE WS-YYDDD-DDD TO D-C-DOY.\n           MOVE ZERO TO D-C-MONTH\n                        D-C-DOM\n                        D-C-DOW\n                        D-C-JDAY.\n           CALL 'DATCNVRT' USING D-C-YEAR\n                                 D-C-MONTH\n                                 D-C-DOM\n                                 D-C-DOY\n                                 D-C-DOW\n                                 D-C-JDAY.\n           IF D-C-JDAY GREATER THAN WS-90-AGO-JDAY THEN\n               GO TO RPT-OVER-EXIT.\n           MOVE DM-MST-AAM     TO DET-XH-AAM.\n           MOVE DM-MST-DSNAME  TO DET-XH-DSNAME.\n           MOVE DM-MST-VOLSER  TO DET-XH-VOLSER.\n           MOVE DM-MST-SW      TO DET-XH-SW.\n           MOVE DM-MST-ALLOC   TO DET-XH-ALLOC.\n           MOVE DM-MST-USED-HI TO DET-XH-USED-HI.\n           MOVE WS-XTNT-SB     TO DET-XH-SB.\n           SUBTRACT WS-XTNT-SB FROM DM-MST-ALLOC\n                           GIVING DM-XH-NET.\n           MOVE DM-MST-DT-CREATE TO DET-XH-DT-CREATE.\n           MOVE DM-MST-DT-REF    TO DET-XH-DT-REF.\n           MOVE DM-MST-EXTENT-CT TO DET-XH-EXTENT-CT.\n           MOVE DM-MST-DSORG     TO DET-XH-DSORG.\n           MOVE DM-MST-RECFM     TO DET-XH-RECFM.\n           MOVE DM-XH-NET        TO DET-XH-NET.\n           MOVE DM-MST-VOLSER    TO WS-VOL-POOL.\n           MOVE DET-XH TO DETAIL-TEXT.\n           IF WS-VOL-POOL EQUAL 'PRD' THEN\n              ADD +1 TO SUMY-XHP-CT\n           IF DM-MST-DSORG EQUAL 'VS ' THEN\n               ADD DM-XH-NET TO SUMY-XHP-NET-VS\n               ADD +1 TO SUMY-XHPV-CT\n               SUBTRACT +1 FROM SUMY-XHP-CT\n            ELSE ADD DM-XH-NET TO SUMY-XHP-NET.\n           IF WS-VOL-POOL EQUAL 'SYS' OR 'SRE' THEN\n              ADD +1 TO SUMY-XHS-CT\n           IF DM-MST-DSORG EQUAL 'VS ' THEN\n               ADD DM-XH-NET TO SUMY-XHS-NET-VS\n               ADD +1 TO SUMY-XHSV-CT\n               SUBTRACT +1 FROM SUMY-XHS-CT\n            ELSE ADD DM-XH-NET TO SUMY-XHS-NET.\n           IF WS-VOL-POOL EQUAL 'IPO' THEN\n              ADD +1 TO SUMY-XHI-CT\n           IF DM-MST-DSORG EQUAL 'VS ' THEN\n               ADD DM-XH-NET TO SUMY-XHI-NET-VS\n               ADD +1 TO SUMY-XHIV-CT\n               SUBTRACT +1 FROM SUMY-XHI-CT\n            ELSE ADD DM-XH-NET TO SUMY-XHI-NET.\n           PERFORM OVER-A-LINE.\n           MOVE 'Y' TO WS-FIXC-SW.\n       RPT-OVER-EXIT.\n           EXIT.\n       RPT-MPTY SECTION.\n           IF DM-MST-USED-HI NOT EQUAL +0 THEN\n               GO TO RPT-MPTY-EXIT.\n           IF DM-MST-SW-1 EQUAL 'N' THEN\n               GO TO RPT-MPTY-EXIT.\n           MOVE DM-MST-DT-CREATE TO WS-YYDDD.\n           MOVE WS-YYDDD-YY TO D-C-YEAR.\n           MOVE WS-YYDDD-DDD TO D-C-DOY.\n           MOVE ZERO TO D-C-MONTH\n                        D-C-DOM\n                        D-C-DOW\n                        D-C-JDAY.\n           CALL 'DATCNVRT' USING D-C-YEAR\n                                 D-C-MONTH\n                                 D-C-DOM\n                                 D-C-DOY\n                                 D-C-DOW\n                                 D-C-JDAY.\n           IF D-C-JDAY GREATER THAN WS-90-AGO-JDAY THEN\n               GO TO RPT-MPTY-EXIT.\n           MOVE DM-MST-AAM     TO DET-MT-AAM.\n           MOVE DM-MST-SW      TO DET-MT-SW.\n           MOVE DM-MST-DSNAME  TO DET-MT-DSNAME.\n           MOVE DM-MST-VOLSER  TO DET-MT-VOLSER.\n           MOVE DM-MST-ALLOC   TO DET-MT-ALLOC.\n           MOVE DM-MST-USED-HI TO DET-MT-USED-HI.\n           MOVE DM-MST-DT-CREATE TO DET-MT-DT-CREATE.\n           MOVE DM-MST-DT-REF  TO DET-MT-DT-REF.\n           MOVE DM-MST-DSORG   TO DET-MT-DSORG.\n           MOVE DM-MST-RECFM   TO DET-MT-RECFM.\n           MOVE DM-MST-LRECL   TO DET-MT-LRECL.\n           MOVE DM-MST-BLKSIZE TO DET-MT-BLKSIZE.\n           MOVE DM-MST-EXTENT-CT TO DET-MT-EXTENT-CT.\n           MOVE DM-MST-VOLSER    TO WS-VOL-POOL.\n           MOVE DET-MT TO DETAIL-TEXT.\n           IF WS-VOL-POOL EQUAL 'PRD' THEN\n              ADD +1 TO SUMY-MTP-CT\n              ADD DM-MST-ALLOC TO SUMY-MTP-ALLOC.\n           IF WS-VOL-POOL EQUAL 'SYS' OR 'SRE' THEN\n              ADD +1 TO SUMY-MTS-CT\n              ADD DM-MST-ALLOC TO SUMY-MTS-ALLOC.\n           IF WS-VOL-POOL EQUAL 'IPO' THEN\n              ADD +1 TO SUMY-MTI-CT\n              ADD DM-MST-ALLOC TO SUMY-MTI-ALLOC.\n           PERFORM MPTY-A-LINE.\n       RPT-MPTY-EXIT.\n           EXIT.\n       RPT-SUMY SECTION.\n           MOVE SUM-TITLE0 TO DETAIL-TEXT.\n           PERFORM SUMT-A-LINE.\n           MOVE SUM-TITLE1 TO DETAIL-TEXT.\n           PERFORM SUMT-A-LINE.\n           MOVE SUM-TITLE2 TO DETAIL-TEXT.\n           PERFORM SUMT-A-LINE.\n           MOVE SUM-TITLE3 TO DETAIL-TEXT.\n           PERFORM SUMT-A-LINE.\n           MOVE SUMY-XCP-CT     TO SUM-XCP-CT.\n           MOVE SUMY-XCS-CT     TO SUM-XCS-CT.\n           MOVE SUMY-XCI-CT     TO SUM-XCI-CT.\n           MOVE SUMY-XCP-ALLOC  TO SUM-XCP-ALLOC.\n           MOVE SUMY-XCS-ALLOC  TO SUM-XCS-ALLOC.\n           MOVE SUMY-XCI-ALLOC  TO SUM-XCI-ALLOC.\n           MOVE SUM-XC TO DETAIL-TEXT.\n           PERFORM SUMY-A-LINE.\n           MOVE SUMY-XVP-CT     TO SUM-XVP-CT.\n           MOVE SUMY-XVS-CT     TO SUM-XVS-CT.\n           MOVE SUMY-XVI-CT     TO SUM-XVI-CT.\n           MOVE SUMY-XVP-ALLOC  TO SUM-XVP-ALLOC.\n           MOVE SUMY-XVS-ALLOC  TO SUM-XVS-ALLOC.\n           MOVE SUMY-XVI-ALLOC  TO SUM-XVI-ALLOC.\n           MOVE SUM-XV TO DETAIL-TEXT.\n           PERFORM SUMY-A-LINE.\n           MOVE SUMY-XCPV-CT    TO SUM-XCPV-CT.\n           MOVE SUMY-XCSV-CT    TO SUM-XCSV-CT.\n           MOVE SUMY-XCIV-CT    TO SUM-XCIV-CT.\n           ADD SUMY-XCP-ALLOC  SUMY-XVP-ALLOC GIVING SUMY-XCPV-TOTAL.\n           ADD SUMY-XCS-ALLOC  SUMY-XVS-ALLOC GIVING SUMY-XCSV-TOTAL.\n           ADD SUMY-XCI-ALLOC  SUMY-XVI-ALLOC GIVING SUMY-XCIV-TOTAL.\n           MOVE SUMY-XCPV-TOTAL TO SUM-XCPV-TOTAL.\n           MOVE SUMY-XCSV-TOTAL TO SUM-XCSV-TOTAL.\n           MOVE SUMY-XCIV-TOTAL TO SUM-XCIV-TOTAL.\n           MOVE SUM-XCV TO DETAIL-TEXT.\n           PERFORM SUMY-A-LINE.\n           MOVE +2 TO SUMY-SPACE.\n           MOVE SUM-TITLE0 TO DETAIL-TEXT.\n           PERFORM SUMY-A-LINE.\n           MOVE +0 TO SUMY-SPACE.\n           MOVE SUMY-XHP-CT     TO SUM-XHP-CT.\n           MOVE SUMY-XHS-CT     TO SUM-XHS-CT.\n           MOVE SUMY-XHI-CT     TO SUM-XHI-CT.\n           MOVE SUMY-XHP-NET    TO SUM-XHP-NET.\n           MOVE SUMY-XHS-NET    TO SUM-XHS-NET.\n           MOVE SUMY-XHI-NET    TO SUM-XHI-NET.\n           MOVE SUM-XH1 TO DETAIL-TEXT.\n           PERFORM SUMY-A-LINE.\n           MOVE SUMY-XHPV-CT    TO SUM-XHPV-CT.\n           MOVE SUMY-XHSV-CT    TO SUM-XHSV-CT.\n           MOVE SUMY-XHIV-CT    TO SUM-XHIV-CT.\n           MOVE SUMY-XHP-NET-VS TO SUM-XHP-NET-VS.\n           MOVE SUMY-XHS-NET-VS TO SUM-XHS-NET-VS.\n           MOVE SUMY-XHI-NET-VS TO SUM-XHI-NET-VS.\n           MOVE SUM-XH2 TO DETAIL-TEXT.\n           PERFORM SUMY-A-LINE.\n           ADD  SUMY-XHP-CT     TO SUMY-XHP-CT-TOTAL.\n           ADD  SUMY-XHPV-CT    TO SUMY-XHP-CT-TOTAL.\n           ADD  SUMY-XHS-CT     TO SUMY-XHS-CT-TOTAL.\n           ADD  SUMY-XHSV-CT    TO SUMY-XHS-CT-TOTAL.\n           ADD  SUMY-XHI-CT     TO SUMY-XHI-CT-TOTAL.\n           ADD  SUMY-XHIV-CT    TO SUMY-XHI-CT-TOTAL.\n           ADD  SUMY-XHP-NET    TO SUMY-XHP-NET-TOTAL.\n           ADD  SUMY-XHP-NET-VS TO SUMY-XHP-NET-TOTAL.\n           ADD  SUMY-XHS-NET    TO SUMY-XHS-NET-TOTAL.\n           ADD  SUMY-XHS-NET-VS TO SUMY-XHS-NET-TOTAL.\n           ADD  SUMY-XHI-NET    TO SUMY-XHI-NET-TOTAL.\n           ADD  SUMY-XHI-NET-VS TO SUMY-XHI-NET-TOTAL.\n           MOVE SUMY-XHP-CT-TOTAL  TO SUM-XHP-CT-TOTAL.\n           MOVE SUMY-XHS-CT-TOTAL  TO SUM-XHS-CT-TOTAL.\n           MOVE SUMY-XHI-CT-TOTAL  TO SUM-XHI-CT-TOTAL.\n           MOVE SUMY-XHP-NET-TOTAL TO SUM-XHP-NET-TOTAL.\n           MOVE SUMY-XHS-NET-TOTAL TO SUM-XHS-NET-TOTAL.\n           MOVE SUMY-XHI-NET-TOTAL TO SUM-XHI-NET-TOTAL.\n           MOVE SUM-XH3 TO DETAIL-TEXT.\n           PERFORM SUMY-A-LINE.\n           MOVE +2 TO SUMY-SPACE.\n           MOVE SUM-TITLE0 TO DETAIL-TEXT.\n           PERFORM SUMY-A-LINE.\n           MOVE +0 TO SUMY-SPACE.\n           MOVE SUMY-MTP-CT     TO SUM-MTP-CT.\n           MOVE SUMY-MTS-CT     TO SUM-MTS-CT.\n           MOVE SUMY-MTI-CT     TO SUM-MTI-CT.\n           MOVE SUMY-MTP-ALLOC  TO SUM-MTP-ALLOC.\n           MOVE SUMY-MTS-ALLOC  TO SUM-MTS-ALLOC.\n           MOVE SUMY-MTI-ALLOC  TO SUM-MTI-ALLOC.\n           MOVE SUM-MT TO DETAIL-TEXT.\n           PERFORM SUMY-A-LINE.\n           MOVE SUMY-GGP-CT     TO SUM-GGP-CT.\n           MOVE SUMY-GGS-CT     TO SUM-GGS-CT.\n           MOVE SUMY-GGI-CT     TO SUM-GGI-CT.\n           MOVE SUM-GG TO DETAIL-TEXT.\n           PERFORM SUMY-A-LINE.\n           MOVE SUMY-PMP-CT     TO SUM-PMP-CT.\n           MOVE SUMY-PMS-CT     TO SUM-PMS-CT.\n           MOVE SUMY-PMI-CT     TO SUM-PMI-CT.\n           MOVE SUMY-PMP-ALLOC  TO SUM-PMP-ALLOC.\n           MOVE SUMY-PMS-ALLOC  TO SUM-PMS-ALLOC.\n           MOVE SUMY-PMI-ALLOC  TO SUM-PMI-ALLOC.\n           MOVE SUM-PM TO DETAIL-TEXT.\n           PERFORM SUMY-A-LINE.\n           MOVE SUMY-EOP-CT     TO SUM-EOP-CT.\n           MOVE SUMY-EOS-CT     TO SUM-EOS-CT.\n           MOVE SUMY-EOI-CT     TO SUM-EOI-CT.\n           MOVE SUMY-EOP-ALLOC  TO SUM-EOP-ALLOC.\n           MOVE SUMY-EOS-ALLOC  TO SUM-EOS-ALLOC.\n           MOVE SUMY-EOI-ALLOC  TO SUM-EOI-ALLOC.\n           MOVE SUM-EO TO DETAIL-TEXT.\n           PERFORM SUMY-A-LINE.\n           MOVE SUMY-LMP-CT         TO SUM-LMP-CT.\n           MOVE SUMY-LMS-CT         TO SUM-LMS-CT.\n           MOVE SUMY-LMI-CT         TO SUM-LMI-CT.\n           MOVE SUMY-LMP-ALLOC      TO SUM-LMP-ALLOC.\n           MOVE SUMY-LMS-ALLOC      TO SUM-LMS-ALLOC.\n           MOVE SUMY-LMI-ALLOC      TO SUM-LMI-ALLOC.\n           MOVE SUM-LM1 TO DETAIL-TEXT.\n           PERFORM SUMY-A-LINE.\n           MOVE SUMY-LMP-ALLOC-CUR  TO SUM-LMP-ALLOC-CUR.\n           MOVE SUMY-LMS-ALLOC-CUR  TO SUM-LMS-ALLOC-CUR.\n           MOVE SUMY-LMI-ALLOC-CUR  TO SUM-LMI-ALLOC-CUR.\n           MOVE SUM-LM2 TO DETAIL-TEXT.\n           PERFORM SUMY-A-LINE.\n           MOVE SUM-VT TO DETAIL-TEXT.\n           PERFORM SUMY-A-LINE.\n           MOVE SUM-VU TO DETAIL-TEXT.\n           PERFORM SUMY-A-LINE.\n           ADD SUMY-LMP-CT          TO  SUMY-LM-TOTAL.\n           ADD SUMY-LMS-CT          TO  SUMY-LM-TOTAL.\n           ADD SUMY-LMI-CT          TO  SUMY-LM-TOTAL.\n           ADD SUMY-LMP-ALLOC       TO  SUMY-LM-ALLC-TOTAL.\n           ADD SUMY-LMS-ALLOC       TO  SUMY-LM-ALLC-TOTAL.\n           ADD SUMY-LMI-ALLOC       TO  SUMY-LM-ALLC-TOTAL.\n           ADD SUMY-LMP-ALLOC-CUR   TO  SUMY-LM-CUR-TOTAL.\n           ADD SUMY-LMS-ALLOC-CUR   TO  SUMY-LM-CUR-TOTAL.\n           ADD SUMY-LMI-ALLOC-CUR   TO  SUMY-LM-CUR-TOTAL.\n           MOVE SUMY-LM-TOTAL       TO  SUM-LM-TOTAL.\n           MOVE SUMY-LM-ALLC-TOTAL  TO  SUM-LM-ALLC-TOTAL.\n           MOVE +1 TO SUMY-SPACE.\n           MOVE SUM-LM3 TO DETAIL-TEXT.\n           PERFORM SUMY-A-LINE.\n           MOVE SUMY-LM-CUR-TOTAL   TO  SUM-LM-CUR-TOTAL.\n           MOVE +0 TO SUMY-SPACE.\n           MOVE SUM-LM4 TO DETAIL-TEXT.\n           PERFORM SUMY-A-LINE.\n       RPT-SUMY-EXIT.\n           EXIT.\n       GEN-FIXC SECTION.\n           IF WS-FIXC-SW EQUAL 'N' THEN\n              GO TO GEN-FIXC-EXIT.\n           IF DM-MST-SW-1 EQUAL 'N' THEN\n              GO TO GEN-FIXC-EXIT.\n           IF WS-XTNT-SW EQUAL 'N' THEN\n              PERFORM XTNT-SB.\n           MOVE DM-MST-DSNAME  TO FIXC-DSNAME.\n           MOVE DM-MST-VOLSER  TO FIXC-VOLSER.\n           MOVE WS-XTNT-SB     TO FIXC-ALLOC.\n           MOVE DM-MST-DSORG   TO FIXC-DSORG.\n           MOVE DM-MST-RECFM   TO FIXC-RECFM.\n           MOVE DM-MST-LRECL   TO FIXC-LRECL.\n           MOVE DM-MST-BLKSIZE TO FIXC-BLKSI.\n           WRITE FIXC-REC FROM WS-FIXC.\n       GEN-FIXC-EXIT.\n           EXIT.\n       XTNT-SB SECTION.\n           MULTIPLY DM-MST-USED-HI BY +1.1 GIVING WS-XTNT-1.\n           ADD      WS-XTNT-1       +0.9 GIVING WS-XTNT-SB.\n           IF WS-XTNT-SB EQUAL +0 THEN MOVE +1 TO WS-XTNT-SB.\n           MOVE DM-MST-VOLSER TO WS-VOL-VOLSER.\n           PERFORM LOC-VOLSER.\n           MULTIPLY WS-VOL-TRK-CYL BY +10 GIVING WS-XTNT-2.\n           IF WS-XTNT-SB GREATER THAN WS-XTNT-2 THEN\n               DIVIDE WS-XTNT-SB BY WS-VOL-TRK-CYL\n                            GIVING WS-XTNT-1\n               ADD  WS-XTNT-1 +0.9 GIVING WS-XTNT-2\n               MULTIPLY WS-XTNT-2 BY WS-VOL-TRK-CYL\n                            GIVING WS-XTNT-SB.\n           MOVE 'Y' TO WS-XTNT-SW.\n       XTNT-SB-EXIT.\n           EXIT.\n       VSUM-A-LINE SECTION.\n           ADD +2 TO VSUM-LINE-CT.\n           IF VSUM-LINE-CT GREATER THAN LINE-MAX THEN\n               MOVE +3 TO VSUM-LINE-CT\n               ADD +1 TO VSUM-PAGE-CT\n               MOVE VSUM-PAGE-CT TO H-2-PAGE\n               WRITE VSUM-REC FROM HEADING-2\n                   AFTER ADVANCING TO-TOP\n               WRITE VSUM-REC FROM HEADING-G\n                   AFTER ADVANCING 2.\n           WRITE VSUM-REC FROM DETAIL-LINE AFTER ADVANCING 2.\n       XTNT-A-LINE SECTION.\n           ADD +1 TO XTNT-LINE-CT.\n           IF XTNT-LINE-CT GREATER THAN LINE-MAX THEN\n               MOVE +3 TO XTNT-LINE-CT\n               ADD +1 TO XTNT-PAGE-CT\n               MOVE XTNT-PAGE-CT TO H-4-PAGE\n               WRITE XTNT-REC FROM HEADING-4\n                   AFTER ADVANCING TO-TOP\n               WRITE XTNT-REC FROM HEADING-E\n                   AFTER ADVANCING 2.\n           WRITE XTNT-REC FROM DETAIL-LINE AFTER ADVANCING 1.\n       VTNT-A-LINE SECTION.\n           ADD +1 TO VTNT-LINE-CT.\n           IF VTNT-LINE-CT GREATER THAN LINE-MAX THEN\n               MOVE +3 TO VTNT-LINE-CT\n               ADD +1 TO VTNT-PAGE-CT\n               MOVE VTNT-PAGE-CT TO H-11-PAGE\n               WRITE VTNT-REC FROM HEADING-11\n                   AFTER ADVANCING TO-TOP\n               WRITE VTNT-REC FROM HEADING-E\n                   AFTER ADVANCING 2.\n           WRITE VTNT-REC FROM DETAIL-LINE AFTER ADVANCING 1.\n       OVER-A-LINE SECTION.\n           ADD +1 TO OVER-LINE-CT.\n           IF OVER-LINE-CT GREATER THAN LINE-MAX THEN\n               MOVE +3 TO OVER-LINE-CT\n               ADD +1 TO OVER-PAGE-CT\n               MOVE OVER-PAGE-CT TO H-6-PAGE\n               WRITE OVER-REC FROM HEADING-6\n                   AFTER ADVANCING TO-TOP\n               WRITE OVER-REC FROM HEADING-B\n                   AFTER ADVANCING 2.\n           WRITE OVER-REC FROM DETAIL-LINE AFTER ADVANCING 1.\n       MPTY-A-LINE SECTION.\n           ADD +1 TO MPTY-LINE-CT.\n           IF MPTY-LINE-CT GREATER THAN LINE-MAX THEN\n               MOVE +3 TO MPTY-LINE-CT\n               ADD +1 TO MPTY-PAGE-CT\n               MOVE MPTY-PAGE-CT TO H-C-PAGE\n               WRITE MPTY-REC FROM HEADING-C\n                   AFTER ADVANCING TO-TOP\n               WRITE MPTY-REC FROM HEADING-D\n                   AFTER ADVANCING 2.\n           WRITE MPTY-REC FROM DETAIL-LINE AFTER ADVANCING 1.\n       EOLD-A-LINE SECTION.\n           ADD +1 TO EOLD-LINE-CT.\n           IF EOLD-LINE-CT GREATER THAN LINE-MAX THEN\n               MOVE +3 TO EOLD-LINE-CT\n               ADD +1 TO EOLD-PAGE-CT\n               MOVE EOLD-PAGE-CT TO H-5-PAGE\n               WRITE EOLD-REC FROM HEADING-5\n                   AFTER ADVANCING TO-TOP\n               WRITE EOLD-REC FROM HEADING-F\n                   AFTER ADVANCING 2.\n           WRITE EOLD-REC FROM DETAIL-LINE AFTER ADVANCING 1.\n       VDET-A-LINE SECTION.\n           ADD +1 TO VDET-LINE-CT.\n           IF VDET-LINE-CT GREATER THAN LINE-MAX THEN\n               MOVE +3 TO VDET-LINE-CT\n               ADD +1 TO VDET-PAGE-CT\n               MOVE VDET-PAGE-CT TO H-1-PAGE\n               WRITE VDET-REC FROM HEADING-1\n                   AFTER ADVANCING TO-TOP\n               WRITE VDET-REC FROM HEADING-3\n                   AFTER ADVANCING 2.\n           WRITE VDET-REC FROM DETAIL-LINE AFTER ADVANCING 1.\n       RGDG-A-LINE SECTION.\n           ADD +1 TO RGDG-LINE-CT.\n           IF RGDG-LINE-CT GREATER THAN LINE-MAX THEN\n               MOVE +3 TO RGDG-LINE-CT\n               ADD +1 TO RGDG-PAGE-CT\n               MOVE RGDG-PAGE-CT TO H-7-PAGE\n               WRITE RGDG-REC FROM HEADING-7\n                   AFTER ADVANCING TO-TOP\n               WRITE RGDG-REC FROM HEADING-8\n                   AFTER ADVANCING 2.\n           WRITE RGDG-REC FROM DETAIL-LINE AFTER ADVANCING 1.\n       PERM-A-LINE SECTION.\n           ADD +1 TO PERM-LINE-CT.\n           IF PERM-LINE-CT GREATER THAN LINE-MAX THEN\n               MOVE +3 TO PERM-LINE-CT\n               ADD +1 TO PERM-PAGE-CT\n               MOVE PERM-PAGE-CT TO H-9-PAGE\n               WRITE PERM-REC FROM HEADING-9\n                   AFTER ADVANCING TO-TOP\n               WRITE PERM-REC FROM HEADING-A\n                   AFTER ADVANCING 2.\n           WRITE PERM-REC FROM DETAIL-LINE AFTER ADVANCING 1.\n       SUMY-A-LINE SECTION.\n           IF SUMY-SPACE EQUAL +0 THEN\n             ADD +3 TO SUMY-LINE-CT.\n           IF SUMY-SPACE EQUAL +1 THEN\n             ADD +4 TO SUMY-LINE-CT.\n           IF SUMY-SPACE EQUAL +2 THEN\n             ADD +1 TO SUMY-LINE-CT.\n           IF SUMY-LINE-CT GREATER THAN LINE-MAX THEN\n               MOVE +1 TO SUMY-LINE-CT\n               ADD +1 TO SUMY-PAGE-CT\n               MOVE SUMY-PAGE-CT TO H-10-PAGE\n               WRITE SUMY-REC FROM HEADING-10\n                   AFTER ADVANCING TO-TOP.\n           IF SUMY-SPACE EQUAL +0 THEN\n             WRITE SUMY-REC FROM DETAIL-LINE AFTER ADVANCING 3.\n           IF SUMY-SPACE EQUAL +1 THEN\n             WRITE SUMY-REC FROM DETAIL-LINE AFTER ADVANCING 4.\n           IF SUMY-SPACE EQUAL +2 THEN\n             WRITE SUMY-REC FROM DETAIL-LINE AFTER ADVANCING 1.\n       SUMT-A-LINE SECTION.\n           ADD +1 TO SUMY-LINE-CT.\n           IF SUMY-LINE-CT GREATER THAN LINE-MAX THEN\n               MOVE +1 TO SUMY-LINE-CT\n               ADD +1 TO SUMY-PAGE-CT\n               MOVE SUMY-PAGE-CT TO H-10-PAGE\n               WRITE SUMY-REC FROM HEADING-10\n                   AFTER ADVANCING TO-TOP.\n             WRITE SUMY-REC FROM DETAIL-LINE AFTER ADVANCING 1.\n       BLD-VOLSER SECTION.\n           OPEN INPUT VOLSERIN.\n           SET VOL-INDEX TO +1.\n       BLD-VOLSER-LOOP.\n           READ VOLSERIN AT END\n               GO TO BLD-VOLSER-END.\n           IF DM-VOL-VOLSER NOT GREATER THAN WS-VOL-VOLSER\n               THEN\n               DISPLAY 'VOLSER TABLE OUT OF SEQUENCE'\n                       ' OLD ENTRY = ' WS-VOL-VOLSER\n                       ' NEW ENTRY = ' DM-VOL-VOLSER\n                       UPON SYSOUT\n               MOVE +1000 TO ABEND-CODE\n               CALL 'USERDUMP' USING ABEND-CODE.\n           IF VOL-INDEX GREATER THAN +200 THEN\n               DISPLAY 'VOLSER TABLE OVERFLOW'\n                   UPON SYSOUT\n               MOVE +1000 TO ABEND-CODE\n               CALL 'USERDUMP' USING ABEND-CODE.\n           ADD +1 TO WS-VOLSER-HI.\n           MOVE DM-VOL-VOLSER   TO WS-VOL-VOLSER\n                                   VOLTAB-VOLSER (VOL-INDEX).\n           MOVE DM-VOL-BYTES    TO VOLTAB-BYTES (VOL-INDEX).\n           MOVE DM-VOL-TRK-CYL  TO VOLTAB-TRK-CYL (VOL-INDEX).\n           MOVE DM-VOL-CYL-VOL  TO VOLTAB-CYL-VOL (VOL-INDEX).\n           MOVE DM-VOL-POOL     TO VOLTAB-POOL (VOL-INDEX).\n           MOVE DM-VOL-SW-DUP   TO VOLTAB-SW-DUP (VOL-INDEX).\n           SET VOL-INDEX UP BY +1.\n           GO TO BLD-VOLSER-LOOP.\n       BLD-VOLSER-END.\n           CLOSE VOLSERIN.\n           MOVE LOW-VALUES TO WS-VOL-VOLSER.\n       BLD-VOLSER-EXIT.\n           EXIT.\n       LOC-VOLSER SECTION.\n           SEARCH ALL VOLTAB\n               WHEN VOLTAB-VOLSER (VOL-INDEX) EQUAL WS-VOL-VOLSER\n                   GO TO LOC-VOLSER-HIT.\n           DISPLAY 'VOLSER = ' WS-VOL-VOLSER\n                   ' NOT FOUND IN VOLUME TABLE'\n                   UPON SYSOUT.\n           MOVE +1000 TO ABEND-CODE.\n           CALL 'USERDUMP' USING ABEND-CODE.\n       LOC-VOLSER-HIT.\n           MOVE VOLTAB-VOLSER (VOL-INDEX)   TO WS-VOL-VOLSER.\n           MOVE VOLTAB-BYTES (VOL-INDEX)    TO WS-VOL-BYTES.\n           MOVE VOLTAB-TRK-CYL (VOL-INDEX)  TO WS-VOL-TRK-CYL.\n           MOVE VOLTAB-CYL-VOL (VOL-INDEX)  TO WS-VOL-CYL-VOL.\n           MOVE VOLTAB-POOL (VOL-INDEX)     TO WS-VOL-POOL.\n           MOVE VOLTAB-SW-DUP (VOL-INDEX)   TO WS-VOL-SW-DUP.\n           MULTIPLY WS-VOL-TRK-CYL BY WS-VOL-CYL-VOL\n                                        GIVING WS-VOL-TRK-VOL.\n       LOC-VOLSER-EXIT.\n           EXIT.\n       E-O-J SECTION.\n           PERFORM RPT-SUMY.\n           CLOSE RPTSUMY.\n           STOP RUN.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DM230PRP": {"ttr": 5633, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x03\\x8e\\x03\\x8e\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 910, "newlines": 910, "modlines": 0, "user": "FILE097"}, "text": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID.\n           DM230.\n       AUTHOR.\n           PAT RUSSELL.\n       REMARKS.\n      *\n      *    MONTHLY DM REPORT AND BILLING FILE.\n      *\n       ENVIRONMENT DIVISION.\n       CONFIGURATION SECTION.\n       SOURCE-COMPUTER.\n           IBM-370.\n       OBJECT-COMPUTER.\n           IBM-370.\n       SPECIAL-NAMES.\n           C01 IS TO-TOP.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n           SELECT AAMIN\n               ASSIGN TO UT-S-AAMIN.\n           SELECT GRPIN\n               ASSIGN TO UT-S-GRPIN.\n           SELECT MASTER\n               ASSIGN TO UT-S-MASTER.\n           SELECT HISTORY\n               ASSIGN TO UT-S-HISTORY.\n           SELECT WORK-HIST\n               ASSIGN TO UT-S-WORKHIST.\n           SELECT RPT-DETAIL\n               ASSIGN TO UT-S-RPTDET.\n           SELECT RPT-BILL\n               ASSIGN TO UT-S-RPTBILL.\n           SELECT RPT-SUMMARY\n               ASSIGN TO UT-S-RPTSUM.\n           SELECT BILL-OUT\n               ASSIGN TO UT-S-BILLOUT.\n           SELECT SORT-FILE\n               ASSIGN TO UT-S-SORTWK01.\n       DATA DIVISION.\n       FILE SECTION.\n       FD  AAMIN\n           RECORDING MODE IS F\n           RECORD CONTAINS 80 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           LABEL RECORDS ARE STANDARD\n           DATA RECORD IS AAMIN-REC.\n       01  AAMIN-REC.\n           02  AAMIN-REC-AAM       PIC XXX.\n           02  FILLER              PIC XX.\n           02  AAMIN-REC-GROUP     PIC 999.\n           02  FILLER              PIC X(72).\n       FD  GRPIN\n           RECORDING MODE IS F\n           RECORD CONTAINS 80 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           LABEL RECORDS ARE STANDARD\n           DATA RECORD IS GRPIN-REC.\n       01  GRPIN-REC.\n           02  GRPIN-TYPE          PIC XXX.\n           02  FILLER              PIC XX.\n           02  GRPIN-NUM           PIC 99.\n           02  FILLER              PIC XX.\n           02  GRPIN-DESC          PIC X(30).\n           02  FILLER              PIC X(41).\n       FD  MASTER\n           RECORDING MODE IS F\n           RECORD CONTAINS 150 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           LABEL RECORDS ARE STANDARD\n           DATA RECORD IS MASTER-REC.\n       01  MASTER-REC.\n           COPY CDMFD000.\n       FD  HISTORY\n           RECORDING MODE IS F\n           RECORD CONTAINS 55 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           LABEL RECORDS ARE STANDARD\n           DATA RECORDS ARE DM-HST-HEAD\n                            DM-HST-REC.\n       01  DM-HST-HEAD.\n           02  DM-HST-LIT   PIC X(11).\n           02  DM-HST-DATE  PIC X(8).\n           02  DM-HST-FILL  PIC X(36).\n       01  DM-HST-REC.\n           02  DM-HST-GRP         PIC 999.\n           02  DM-HST-AAM         PIC XXX.\n           02  DM-HST-DSNAME      PIC X(44).\n           02  DM-HST-ALLOC       PIC 9(5).\n       FD  WORK-HIST\n           RECORDING MODE IS F\n           RECORD CONTAINS 55 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           LABEL RECORDS ARE STANDARD\n           DATA RECORD IS WK-HST-REC.\n       01  WK-HST-REC.\n           02  WK-HST-GRP         PIC 999.\n           02  WK-HST-AAM         PIC XXX.\n           02  WK-HST-DSNAME      PIC X(44).\n           02  WK-HST-ALLOC       PIC 9(5).\n       FD  RPT-DETAIL\n           RECORDING MODE IS F\n           RECORD CONTAINS 133 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           LABEL RECORD IS STANDARD\n           DATA RECORD IS DET-REC.\n       01  DET-REC.\n           02  DET-CC              PIC X.\n           02  DET-LINE            PIC X(132).\n       FD  RPT-BILL\n           RECORDING MODE IS F\n           RECORD CONTAINS 133 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           LABEL RECORD IS STANDARD\n           DATA RECORD IS RBL-REC.\n       01  RBL-REC.\n           02  RBL-CC              PIC X.\n           02  RBL-LINE            PIC X(132).\n       FD  RPT-SUMMARY\n           RECORDING MODE IS F\n           RECORD CONTAINS 133 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           LABEL RECORD IS STANDARD\n           DATA RECORD IS SUM-REC.\n       01  SUM-REC.\n           02  SUM-CC              PIC X.\n           02  SUM-LINE            PIC X(132).\n       FD  BILL-OUT\n           RECORDING MODE IS F\n           RECORD CONTAINS 80 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           LABEL RECORD IS STANDARD\n           DATA RECORD IS BILL-REC.\n       01  BILL-REC.\n           02  BILL-INDIC          PIC X.\n           02  BILL-NUM            PIC 99.\n           02  BILL-TOT1           PIC ZZZZZZZ9.\n           02  BILL-TOT2           PIC ZZZZZZZ9.\n           02  BILL-TOT3           PIC ZZZZZZZ9.\n           02  BILL-TOT4           PIC ZZZZZZZ9.\n           02  BILL-TOT5           PIC ZZZZZZZ9.\n           02  BILL-TOT6           PIC ZZZZZZZ9.\n           02  BILL-TOT7           PIC ZZZZZZZ9.\n           02  BILL-TOT8           PIC ZZZZZZZ9.\n           02  BILL-FILL           PIC X(13).\n       SD  SORT-FILE\n           RECORDING MODE IS F\n           DATA RECORD IS SORT-REC.\n       01  SORT-REC.\n           02  SORT-GRP           PIC 9(3).\n           02  SORT-AAM           PIC XXX.\n           02  SORT-DSNAME        PIC X(44).\n           02  SORT-ALLOC         PIC 9(5).\n       WORKING-STORAGE SECTION.\n       01  GROUP-TABLE.\n           02  GROUP-ENTRY         OCCURS 1 TO 1000\n                                   DEPENDING ON WS-GROUP-HI\n                                   ASCENDING KEY IS GROUP-AAM\n                                   INDEXED BY GROUP-INDEX.\n               03  GROUP-AAM       PIC XXX.\n               03  GROUP-NUMBER    PIC S9(3) COMP-3.\n       01  WS-COMP                 COMP SYNC.\n           02  LINE-MAX            PIC S9(4) VALUE +56.\n           02  DET-SKIP-CT         PIC S9(4) VALUE +1.\n           02  DET-LINE-CT         PIC S9(4) VALUE +0.\n           02  DET-PAGE-CT         PIC S9(4) VALUE +0.\n           02  BIL-SKIP-CT         PIC S9(4) VALUE +1.\n           02  BIL-LINE-CT         PIC S9(4) VALUE +0.\n           02  BIL-PAGE-CT         PIC S9(4) VALUE +0.\n           02  SUM-SKIP-CT         PIC S9(4) VALUE +1.\n           02  SUM-LINE-CT         PIC S9(4) VALUE +0.\n           02  SUM-PAGE-CT         PIC S9(4) VALUE +0.\n           02  WS-DEV-DETAIL-IX    PIC S9(4) VALUE +0.\n           02  WS-GROUP-HI         PIC S9(4) VALUE +1.\n           02  ABEND-CODE          PIC S9(4) VALUE +1000.\n       01  WS-DISP.\n           02  SW-STAT-WORK-HIST   PIC X VALUE 'N'.\n           02  SW-STAT-SORT        PIC X VALUE 'N'.\n           02  WS-CUR-AAM          PIC XXX VALUE '   '.\n           02  WS-PRV-AAM          PIC XXX VALUE '   '.\n           02  WS-CUR-GRP          PIC 999 VALUE ZERO.\n           02  WS-PRV-GRP          PIC 999 VALUE ZERO.\n           02  DETAIL-LINE.\n               03  WS-DETAIL-CC    PIC X.\n               03  WS-DETAIL-TEXT  PIC X(132) VALUE SPACES.\n           02  WS-OLD-HIST-DATE    PIC X(8) VALUE SPACES.\n           02  WS-INDEX-SW-TBL     PIC X(99) VALUE ALL 'N'.\n           02  FILLER              REDEFINES WS-INDEX-SW-TBL.\n               03  INDEX-SW        PIC X OCCURS 99.\n           02  WS-SUB-SW-TABLE     PIC X(8) VALUE ALL 'N'.\n           02  FILLER              REDEFINES WS-SUB-SW-TABLE.\n               03  SUB-SW          PIC X OCCURS 8.\n           02  WS-DESC             PIC X(30) OCCURS 99.\n           02  SUB-DESC-TABLE      PIC X(88) VALUE SPACES.\n           02  FILLER              REDEFINES SUB-DESC-TABLE.\n               03  FILLER          OCCURS 8.\n                   04  SUB-DESC    PIC X(10).\n                   04  FILLER      PIC X.\n           02  WS-GRP              PIC 999.\n           02  FILLER              REDEFINES WS-GRP.\n               03  WS-GRP-INDEX    PIC 99.\n               03  WS-GRP-SUB      PIC 9.\n           02  WS-BILL-GRP         PIC 999.\n           02  FILLER              REDEFINES WS-BILL-GRP.\n               03  WS-BILL-GRP-INDEX   PIC 99.\n               03  WS-BILL-GRP-SUB     PIC 9.\n           02  WS-BILL-PRV-INDEX       PIC 99   VALUE ZERO.\n           02  WS-BILL-TOT1        PIC 99999999 VALUE ZERO.\n           02  WS-BILL-TOT2        PIC 99999999 VALUE ZERO.\n           02  WS-BILL-TOT3        PIC 99999999 VALUE ZERO.\n           02  WS-BILL-TOT4        PIC 99999999 VALUE ZERO.\n           02  WS-BILL-TOT5        PIC 99999999 VALUE ZERO.\n           02  WS-BILL-TOT6        PIC 99999999 VALUE ZERO.\n           02  WS-BILL-TOT7        PIC 99999999 VALUE ZERO.\n           02  WS-BILL-TOT8        PIC 99999999 VALUE ZERO.\n           02  WS-WORK-DATE.\n               03  WS-WORK-MM      PIC 99.\n               03  FILLER          PIC X.\n               03  WS-WORK-DD      PIC 99.\n               03  FILLER          PIC X.\n               03  WS-WORK-YY      PIC 99.\n       01  WS-COMP-3               COMP-3.\n           02  WS-DET-OLD          PIC S9(11) VALUE +0.\n           02  WS-DET-NEW          PIC S9(11) VALUE +0.\n           02  WS-DET-NET          PIC S9(11) VALUE +0.\n           02  WS-AAM-OLD          PIC S9(11) VALUE +0.\n           02  WS-AAM-NEW          PIC S9(11) VALUE +0.\n           02  WS-AAM-NET          PIC S9(11) VALUE +0.\n           02  WS-GRP-OLD          PIC S9(11) VALUE +0.\n           02  WS-GRP-NEW          PIC S9(11) VALUE +0.\n           02  WS-GRP-NET          PIC S9(11) VALUE +0.\n           02  WS-TOT-OLD          PIC S9(11) VALUE +0.\n           02  WS-TOT-NEW          PIC S9(11) VALUE +0.\n           02  WS-TOT-NET          PIC S9(11) VALUE +0.\n           02  WS-DATCNVRT-DOW     PIC S9(8).\n           02  WS-DATCNVRT-JDAY    PIC S9(8).\n       01  CTRL-CARD.\n           02  CTRL-TYPE           PIC XXXX.\n           02  FILLER              PIC X.\n           02  CTRL-PID            PIC X(8).\n           02  FILLER              PIC X.\n           02  CTRL-BANK           PIC XXX.\n           02  FILLER              PIC X.\n           02  CTRL-DATE           PIC X(8).\n           02  FILLER              PIC X.\n           02  CTRL-SWITCHES.\n               03  SW-1            PIC X.\n               03  SW-2            PIC X.\n               03  SW-3            PIC X.\n               03  SW-4            PIC X.\n               03  SW-5            PIC X.\n               03  SW-6            PIC X.\n               03  SW-7            PIC X.\n               03  SW-8            PIC X.\n               03  SW-9            PIC X.\n               03  SW-10           PIC X.\n      *  FOLLOWING FIELDS MATCH DDA CTRL CARD FORMAT *\n           02  CTRL-USER-AREA.\n               03  FILLER          PIC X.\n               03  CTRL-CUR-DT.\n                   04  CTRL-CUR-MM     PIC XX.\n                   04  CTRL-CUR-DD     PIC XX.\n                   04  CTRL-CUR-YY     PIC XX.\n               03  CTRL-PREV-DT.\n                   04  CTRL-PREV-MM    PIC XX.\n                   04  CTRL-PREV-DD    PIC XX.\n                   04  CTRL-PREV-YY    PIC XX.\n               03  CTRL-DAYS-SINCE-LAST-PROC   PIC 9.\n               03  CTRL-NEXT-DT.\n                   04  CTRL-NEXT-MM    PIC XX.\n                   04  CTRL-NEXT-DD    PIC XX.\n                   04  CTRL-NEXT-YY    PIC XX.\n               03  CTRL-DAYS-TO-NEXT-PROC      PIC 9.\n               03  CTRL-FILLER-1   PIC X(13).\n               03  FILLER REDEFINES CTRL-FILLER-1.\n                   04  FILLER      PIC X.\n                   04  CTRL-2ND-NEXT-DATE.\n                       05  CTRL-2ND-NEXT-MM  PIC XX.\n                       05  CTRL-2ND-NEXT-DD  PIC XX.\n                       05  CTRL-2ND-NEXT-YY  PIC XX.\n                   04  FILLER      PIC X(6).\n           02  FILLER              REDEFINES CTRL-USER-AREA.\n               03  FILLER          PIC X.\n               03  CTRL-FACT       PIC 999V9999.\n               03  FILLER          PIC X.\n               03  CTRL-GRP-NUM    PIC 999.\n               03  FILLER          PIC X(22).\n           02  CTRL-COL-72         PIC X.\n           02  CTRL-COL-73-80      PIC X(8).\n       01  HEADING-1.\n           02  FILLER              PIC X(12) VALUE '    DM230-01'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC XXX   VALUE '   '.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(44) VALUE\n                                             'MONTHLY DETAIL REPORT'.\n           02  FILLER              PIC XXX   VALUE SPACES.\n           02  H-1-DATE-OLD        PIC X(9).\n           02  FILLER              PIC XXX   VALUE ' - '.\n           02  H-1-DATE-CUR        PIC X(9).\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(11) VALUE '       PAGE'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  H-1-PAGE            PIC Z,ZZ9.\n       01  HEADING-2.\n           02  FILLER              PIC X(12) VALUE '    DM230-02'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC XXX   VALUE '   '.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(44) VALUE\n                                             'MONTHLY SUMMARY REPORT'.\n           02  FILLER              PIC XXX   VALUE SPACES.\n           02  H-2-DATE-OLD        PIC X(9).\n           02  FILLER              PIC XXX   VALUE ' - '.\n           02  H-2-DATE-CUR        PIC X(9).\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(11) VALUE '       PAGE'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  H-2-PAGE            PIC Z,ZZ9.\n       01  HEADING-3.\n           02  FILLER              PIC X(12) VALUE '       GROUP'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC XXX   VALUE 'AAM'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(44) VALUE 'DSNAME'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(14) VALUE '     OLD ALLOC'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(14) VALUE '     NEW ALLOC'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(15) VALUE '     NET CHANGE'.\n       01  HEADING-4.\n           02  FILLER              PIC X(12) VALUE '       GROUP'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC XXX   VALUE '   '.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(44) VALUE '      '.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(14) VALUE '     OLD ALLOC'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(14) VALUE '     NEW ALLOC'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(15) VALUE '     NET CHANGE'.\n       01  HEADING-5.\n           02  FILLER              PIC X(10) VALUE ' DM230-05 '.\n           02  FILLER              PIC X(44) VALUE\n                                             'MONTHLY BILLING REPORT'.\n           02  FILLER              PIC XXX   VALUE SPACES.\n           02  H-5-DATE-OLD        PIC X(9).\n           02  FILLER              PIC XXX   VALUE ' - '.\n           02  H-5-DATE-CUR        PIC X(9).\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(11) VALUE '       PAGE'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  H-5-PAGE            PIC Z,ZZ9.\n       01  HEADING-6.\n           02  FILLER              PIC X(8) VALUE ' GROUP  '.\n           02  FILLER              PIC X(31) VALUE 'DESCRIPTION '.\n           02  H-6-DET             PIC X(95) VALUE SPACES.\n       01  DET-D.\n           02  FILLER              PIC X(08) VALUE SPACES.\n           02  DET-D-GRP           PIC XXX.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  DET-D-AAM           PIC XXX.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  DET-D-DSNAME        PIC X(44).\n           02  FILLER              PIC X     VALUE SPACES.\n           02  DET-D-OLD           PIC ZZ,ZZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  DET-D-NEW           PIC ZZ,ZZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  DET-D-NET           PIC ---,---,---,--9.\n       01  DET-B.\n           02  FILLER              PIC XXX VALUE SPACES.\n           02  DET-B-NUM           PIC 99.\n           02  FILLER              PIC XX VALUE SPACES.\n           02  DET-B-DESC          PIC X(30).\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-B-TOT1          PIC ZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-B-TOT2          PIC ZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-B-TOT3          PIC ZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-B-TOT4          PIC ZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-B-TOT5          PIC ZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-B-TOT6          PIC ZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-B-TOT7          PIC ZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X VALUE SPACES.\n           02  DET-B-TOT8          PIC ZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X(8) VALUE SPACES.\n       01  SUM-A.\n           02  FILLER              PIC X(08) VALUE SPACES.\n           02  SUM-A-GRP           PIC XXX.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  SUM-A-AAM           PIC XXX.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(44) VALUE 'THIS AAM'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  SUM-A-OLD           PIC ZZ,ZZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  SUM-A-NEW           PIC ZZ,ZZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  SUM-A-NET           PIC ---,---,---,--9.\n       01  SUM-G.\n           02  FILLER              PIC X(08) VALUE SPACES.\n           02  SUM-G-GRP           PIC XXX.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC XXX   VALUE SPACES.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(44) VALUE 'THIS GROUP'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  SUM-G-OLD           PIC ZZ,ZZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  SUM-G-NEW           PIC ZZ,ZZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  SUM-G-NET           PIC ---,---,---,--9.\n       01  SUM-T.\n           02  FILLER              PIC X(08) VALUE SPACES.\n           02  FILLER              PIC XXX   VALUE SPACES.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC XXX   VALUE SPACES.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  FILLER              PIC X(44) VALUE 'GRAND TOTAL'.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  SUM-T-OLD           PIC ZZ,ZZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  SUM-T-NEW           PIC ZZ,ZZZ,ZZZ,ZZ9.\n           02  FILLER              PIC X     VALUE SPACES.\n           02  SUM-T-NET           PIC ---,---,---,--9.\n           EJECT\n       PROCEDURE DIVISION.\n           MOVE CURRENT-DATE TO H-1-DATE-CUR\n                                H-2-DATE-CUR\n                                H-5-DATE-CUR\n                                WS-WORK-DATE.\n           MOVE 'DM230PRP' TO CTRL-PID.\n           MOVE 'EDIT' TO CTRL-TYPE.\n           CALL 'GETCTRL' USING CTRL-CARD.\n           IF CTRL-GRP-NUM NOT NUMERIC\n               THEN DISPLAY 'CTRL CARD DEFAULT GROUP NOT NUMERIC'\n                            UPON CONSOLE\n                    CALL 'USERDUMP' USING ABEND-CODE.\n           PERFORM INIT-DESC-TABLE.\n           MOVE SUB-DESC-TABLE TO H-6-DET.\n           PERFORM INIT-GROUP-TABLE.\n           PERFORM INIT-WORK-HIST.\n           SORT SORT-FILE ON ASCENDING KEY SORT-GRP\n                                           SORT-AAM\n                                           SORT-DSNAME\n               INPUT PROCEDURE IS SORT-IN\n               OUTPUT PROCEDURE IS SORT-OUT.\n           GO TO E-O-J.\n       SORT-IN SECTION.\n           OPEN INPUT MASTER.\n       SORT-IN-LOOP.\n           READ MASTER AT END\n               CLOSE MASTER\n               GO TO SORT-IN-EXIT.\n           MOVE DM-MST-AAM TO SORT-AAM.\n           MOVE DM-MST-DSNAME TO SORT-DSNAME.\n           MOVE DM-MST-ALLOC TO SORT-ALLOC.\n           PERFORM FIND-GROUP-NUM.\n           RELEASE SORT-REC.\n           GO TO SORT-IN-LOOP.\n       SORT-IN-EXIT.\n           EXIT.\n       SORT-OUT SECTION.\n           OPEN INPUT  WORK-HIST\n                OUTPUT HISTORY\n                       BILL-OUT\n                       RPT-DETAIL\n                       RPT-SUMMARY\n                       RPT-BILL.\n           MOVE LINE-MAX TO DET-LINE-CT\n                            SUM-LINE-CT\n                            BIL-LINE-CT.\n           MOVE 'DM-HST-HEAD' TO DM-HST-LIT.\n           MOVE CURRENT-DATE  TO DM-HST-DATE.\n           MOVE SPACES        TO DM-HST-FILL.\n           WRITE DM-HST-HEAD.\n           MOVE SPACES        TO BILL-REC.\n           MOVE '1'           TO BILL-INDIC.\n           MOVE 00            TO BILL-NUM.\n           MOVE WS-WORK-MM    TO BILL-TOT1.\n           MOVE WS-WORK-DD    TO BILL-TOT2.\n           MOVE WS-WORK-YY    TO BILL-TOT3.\n           MOVE ZERO          TO BILL-TOT4\n                                 BILL-TOT5\n                                 BILL-TOT6\n                                 BILL-TOT7\n                                 BILL-TOT8.\n           WRITE BILL-REC.\n           MOVE WS-OLD-HIST-DATE TO H-1-DATE-OLD\n                                    H-2-DATE-OLD\n                                    H-5-DATE-OLD.\n           MOVE 'R' TO SW-STAT-WORK-HIST\n                       SW-STAT-SORT\n           READ WORK-HIST AT END\n               MOVE 'E' TO SW-STAT-WORK-HIST.\n           RETURN SORT-FILE AT END\n               MOVE 'E' TO SW-STAT-SORT.\n           IF (SW-STAT-WORK-HIST EQUAL 'E' AND\n               SW-STAT-SORT     EQUAL 'E') THEN\n               DISPLAY 'NO DATA TO PROCESS'\n                       UPON SYSOUT\n               MOVE +1000 TO ABEND-CODE\n               CALL 'USERDUMP' USING ABEND-CODE.\n           IF SW-STAT-WORK-HIST EQUAL 'E' THEN\n               PERFORM RESET-SORT\n               GO TO SORT-OUT-LOOP.\n           IF SW-STAT-SORT EQUAL 'E' THEN\n               PERFORM RESET-HIST\n               GO TO SORT-OUT-LOOP.\n           IF WK-HST-GRP LESS THAN SORT-GRP THEN\n               PERFORM RESET-HIST\n               GO TO SORT-OUT-LOOP.\n           IF WK-HST-GRP GREATER THAN SORT-GRP THEN\n               PERFORM RESET-SORT\n               GO TO SORT-OUT-LOOP.\n           IF WK-HST-AAM LESS THAN SORT-AAM THEN\n               PERFORM RESET-HIST\n               GO TO SORT-OUT-LOOP.\n           PERFORM RESET-SORT.\n       SORT-OUT-LOOP.\n           IF SW-STAT-WORK-HIST EQUAL 'N' THEN\n               MOVE 'R' TO SW-STAT-WORK-HIST\n               READ WORK-HIST AT END\n                   MOVE 'E' TO SW-STAT-WORK-HIST.\n           IF SW-STAT-SORT EQUAL 'N' THEN\n               MOVE 'R' TO SW-STAT-SORT\n               RETURN SORT-FILE AT END\n                   MOVE 'E' TO SW-STAT-SORT.\n           PERFORM LEDGER-CHECK.\n           IF (SW-STAT-WORK-HIST EQUAL 'E' AND\n               SW-STAT-SORT     EQUAL 'E') THEN\n               GO TO SORT-OUT-END.\n           GO TO SORT-OUT-LOOP.\n       SORT-OUT-END.\n           CLOSE       WORK-HIST\n                       HISTORY\n                       BILL-OUT\n                       RPT-DETAIL\n                       RPT-BILL\n                       RPT-SUMMARY.\n       SORT-OUT-EXIT.\n           EXIT.\n       RESET-SORT SECTION.\n           MOVE SORT-GRP TO WS-CUR-GRP\n                            WS-PRV-GRP\n                            WS-BILL-GRP.\n           MOVE WS-BILL-GRP-INDEX TO WS-BILL-PRV-INDEX.\n           MOVE SORT-AAM TO WS-CUR-AAM\n                            WS-PRV-AAM.\n       RESET-SORT-EXIT.\n           EXIT.\n       RESET-HIST SECTION.\n           MOVE WK-HST-GRP TO WS-CUR-GRP\n                              WS-PRV-GRP\n                              WS-BILL-GRP.\n           MOVE WS-BILL-GRP-INDEX TO WS-BILL-PRV-INDEX.\n           MOVE WK-HST-AAM TO WS-CUR-AAM\n                              WS-PRV-AAM.\n       RESET-HIST-EXIT.\n           EXIT.\n       LEDGER-CHECK SECTION.\n           IF (SW-STAT-WORK-HIST EQUAL 'E' AND\n               SW-STAT-SORT     EQUAL 'E') THEN\n               PERFORM AAM-BREAK\n               GO TO LEDGER-CHECK-EXIT.\n           IF SW-STAT-WORK-HIST EQUAL 'E' THEN\n               GO TO LEDGER-CHECK-SORT.\n           IF SW-STAT-SORT EQUAL 'E' THEN\n               GO TO LEDGER-CHECK-HIST.\n           IF WK-HST-GRP LESS THAN SORT-GRP THEN\n               GO TO LEDGER-CHECK-HIST.\n           IF WK-HST-GRP GREATER THAN SORT-GRP THEN\n               GO TO LEDGER-CHECK-SORT.\n           IF WK-HST-AAM LESS THAN SORT-AAM THEN\n               GO TO LEDGER-CHECK-HIST.\n           IF WK-HST-AAM GREATER THAN SORT-AAM THEN\n               GO TO LEDGER-CHECK-SORT.\n           IF WK-HST-DSNAME LESS THAN SORT-DSNAME THEN\n               GO TO LEDGER-CHECK-HIST.\n           IF WK-HST-DSNAME GREATER THAN SORT-DSNAME THEN\n               GO TO LEDGER-CHECK-SORT.\n           MOVE WK-HST-GRP      TO DET-D-GRP.\n           MOVE WK-HST-AAM      TO DET-D-AAM.\n           MOVE WK-HST-DSNAME   TO DET-D-DSNAME.\n           MOVE WK-HST-ALLOC    TO WS-DET-OLD.\n           MOVE SORT-ALLOC      TO WS-DET-NEW.\n           SUBTRACT WS-DET-OLD FROM WS-DET-NEW GIVING WS-DET-NET.\n           MOVE WS-DET-OLD      TO DET-D-OLD.\n           MOVE WS-DET-NEW      TO DET-D-NEW.\n           MOVE WS-DET-NET      TO DET-D-NET.\n           PERFORM WRITE-HIST.\n           MOVE 'N' TO SW-STAT-WORK-HIST\n                       SW-STAT-SORT.\n           MOVE WK-HST-GRP      TO WS-CUR-GRP.\n           MOVE WK-HST-AAM      TO WS-CUR-AAM.\n           GO TO LEDGER-CHECK-END.\n       LEDGER-CHECK-HIST.\n           MOVE WK-HST-GRP      TO DET-D-GRP.\n           MOVE WK-HST-AAM      TO DET-D-AAM.\n           MOVE WK-HST-DSNAME   TO DET-D-DSNAME.\n           MOVE WK-HST-ALLOC    TO WS-DET-OLD.\n           MOVE ZERO            TO WS-DET-NEW.\n           SUBTRACT WS-DET-OLD FROM WS-DET-NEW GIVING WS-DET-NET.\n           MOVE WS-DET-OLD      TO DET-D-OLD.\n           MOVE WS-DET-NEW      TO DET-D-NEW.\n           MOVE WS-DET-NET      TO DET-D-NET.\n           MOVE 'N' TO SW-STAT-WORK-HIST.\n           MOVE WK-HST-GRP      TO WS-CUR-GRP.\n           MOVE WK-HST-AAM      TO WS-CUR-AAM.\n           GO TO LEDGER-CHECK-END.\n       LEDGER-CHECK-SORT.\n           MOVE SORT-GRP        TO DET-D-GRP.\n           MOVE SORT-AAM        TO DET-D-AAM.\n           MOVE SORT-DSNAME     TO DET-D-DSNAME.\n           MOVE ZERO            TO WS-DET-OLD.\n           MOVE SORT-ALLOC      TO WS-DET-NEW.\n           MOVE SORT-ALLOC      TO WS-DET-NET.\n           MOVE WS-DET-OLD      TO DET-D-OLD.\n           MOVE WS-DET-NEW      TO DET-D-NEW.\n           MOVE WS-DET-NET      TO DET-D-NET.\n           PERFORM WRITE-HIST.\n           MOVE 'N' TO SW-STAT-SORT.\n           MOVE SORT-GRP        TO WS-CUR-GRP.\n           MOVE SORT-AAM        TO WS-CUR-AAM.\n       LEDGER-CHECK-END.\n           IF NOT (WS-CUR-GRP EQUAL WS-PRV-GRP AND\n                   WS-CUR-AAM EQUAL WS-PRV-AAM) THEN\n                   PERFORM AAM-BREAK.\n           ADD WS-DET-OLD TO WS-AAM-OLD.\n           ADD WS-DET-NEW TO WS-AAM-NEW.\n           ADD WS-DET-NET TO WS-AAM-NET.\n           MOVE DET-D           TO WS-DETAIL-TEXT.\n           PERFORM DET-A-LINE.\n       LEDGER-CHECK-EXIT.\n           EXIT.\n       AAM-BREAK SECTION.\n           MOVE WS-PRV-GRP      TO SUM-A-GRP.\n           MOVE WS-PRV-AAM      TO SUM-A-AAM.\n           MOVE WS-AAM-OLD      TO SUM-A-OLD.\n           MOVE WS-AAM-NEW      TO SUM-A-NEW.\n           MOVE WS-AAM-NET      TO SUM-A-NET.\n           MOVE SUM-A           TO WS-DETAIL-TEXT.\n           PERFORM SUM-A-LINE.\n           MOVE WS-CUR-AAM TO WS-PRV-AAM.\n           ADD WS-AAM-OLD  TO WS-GRP-OLD.\n           ADD WS-AAM-NEW  TO WS-GRP-NEW.\n           ADD WS-AAM-NET  TO WS-GRP-NET.\n           MOVE ZERO       TO WS-AAM-OLD\n                              WS-AAM-NEW\n                              WS-AAM-NET.\n           IF (SW-STAT-WORK-HIST EQUAL 'E' AND\n               SW-STAT-SORT     EQUAL 'E') THEN\n               PERFORM GRP-BREAK.\n           IF WS-CUR-GRP NOT EQUAL WS-PRV-GRP THEN\n               PERFORM GRP-BREAK.\n           MOVE +2 TO DET-SKIP-CT.\n       AAM-BREAK-EXIT.\n           EXIT.\n       GRP-BREAK SECTION.\n           MOVE WS-PRV-GRP      TO SUM-G-GRP.\n           MOVE WS-GRP-OLD      TO SUM-G-OLD.\n           MOVE WS-GRP-NEW      TO SUM-G-NEW.\n           MOVE WS-GRP-NET      TO SUM-G-NET.\n           MOVE SUM-G           TO WS-DETAIL-TEXT.\n           PERFORM SUM-A-LINE.\n           PERFORM BILL-BREAK.\n           MOVE WS-CUR-GRP TO WS-PRV-GRP.\n           ADD WS-GRP-OLD  TO WS-TOT-OLD.\n           ADD WS-GRP-NEW  TO WS-TOT-NEW.\n           ADD WS-GRP-NET  TO WS-TOT-NET.\n           MOVE ZERO       TO WS-GRP-OLD\n                              WS-GRP-NEW\n                              WS-GRP-NET.\n           IF (SW-STAT-WORK-HIST EQUAL 'E' AND\n               SW-STAT-SORT     EQUAL 'E') THEN\n               PERFORM TOT-BREAK.\n           MOVE +2 TO SUM-SKIP-CT.\n       GRP-BREAK-EXIT.\n           EXIT.\n       TOT-BREAK SECTION.\n           MOVE WS-TOT-OLD      TO SUM-T-OLD.\n           MOVE WS-TOT-NEW      TO SUM-T-NEW.\n           MOVE WS-TOT-NET      TO SUM-T-NET.\n           MOVE SUM-T           TO WS-DETAIL-TEXT.\n           MOVE +2              TO SUM-SKIP-CT.\n           PERFORM SUM-A-LINE.\n       TOT-BREAK-EXIT.\n           EXIT.\n       BILL-BREAK SECTION.\n       BILL-BREAK-SUB.\n           IF WS-BILL-GRP-SUB EQUAL 1 THEN\n               ADD WS-GRP-NEW TO WS-BILL-TOT1.\n           IF WS-BILL-GRP-SUB EQUAL 2 THEN\n               ADD WS-GRP-NEW TO WS-BILL-TOT2.\n           IF WS-BILL-GRP-SUB EQUAL 3 THEN\n               ADD WS-GRP-NEW TO WS-BILL-TOT3.\n           IF WS-BILL-GRP-SUB EQUAL 4 THEN\n               ADD WS-GRP-NEW TO WS-BILL-TOT4.\n           IF WS-BILL-GRP-SUB EQUAL 5 THEN\n               ADD WS-GRP-NEW TO WS-BILL-TOT5.\n           IF WS-BILL-GRP-SUB EQUAL 6 THEN\n               ADD WS-GRP-NEW TO WS-BILL-TOT6.\n           IF WS-BILL-GRP-SUB EQUAL 7 THEN\n               ADD WS-GRP-NEW TO WS-BILL-TOT7.\n           IF WS-BILL-GRP-SUB EQUAL 8 THEN\n               ADD WS-GRP-NEW TO WS-BILL-TOT8.\n           IF (SW-STAT-WORK-HIST EQUAL 'E' AND\n               SW-STAT-SORT     EQUAL 'E') THEN\n               GO TO BILL-BREAK-INDEX.\n           MOVE WS-CUR-GRP      TO WS-BILL-GRP.\n           IF WS-BILL-GRP-INDEX EQUAL WS-BILL-PRV-INDEX\n               THEN GO TO BILL-BREAK-EXIT.\n       BILL-BREAK-INDEX.\n           MOVE SPACES            TO BILL-REC.\n           MOVE '6'               TO BILL-INDIC.\n           MOVE WS-BILL-PRV-INDEX TO BILL-NUM.\n           MOVE WS-BILL-TOT1      TO BILL-TOT1.\n           MOVE WS-BILL-TOT2      TO BILL-TOT2.\n           MOVE WS-BILL-TOT3      TO BILL-TOT3.\n           MOVE WS-BILL-TOT4      TO BILL-TOT4.\n           MOVE WS-BILL-TOT5      TO BILL-TOT5.\n           MOVE WS-BILL-TOT6      TO BILL-TOT6.\n           MOVE WS-BILL-TOT7      TO BILL-TOT7.\n           MOVE WS-BILL-TOT8      TO BILL-TOT8.\n           WRITE BILL-REC.\n           MOVE SPACES TO DET-B.\n           MOVE WS-BILL-PRV-INDEX TO DET-B-NUM.\n           IF SUB-SW (1) EQUAL 'Y' THEN\n               MOVE WS-BILL-TOT1 TO DET-B-TOT1.\n           IF SUB-SW (2) EQUAL 'Y' THEN\n               MOVE WS-BILL-TOT2 TO DET-B-TOT2.\n           IF SUB-SW (3) EQUAL 'Y' THEN\n               MOVE WS-BILL-TOT3 TO DET-B-TOT3.\n           IF SUB-SW (4) EQUAL 'Y' THEN\n               MOVE WS-BILL-TOT4 TO DET-B-TOT4.\n           IF SUB-SW (5) EQUAL 'Y' THEN\n               MOVE WS-BILL-TOT5 TO DET-B-TOT5.\n           IF SUB-SW (6) EQUAL 'Y' THEN\n               MOVE WS-BILL-TOT6 TO DET-B-TOT6.\n           IF SUB-SW (7) EQUAL 'Y' THEN\n               MOVE WS-BILL-TOT7 TO DET-B-TOT7.\n           IF SUB-SW (8) EQUAL 'Y' THEN\n               MOVE WS-BILL-TOT8 TO DET-B-TOT8.\n           IF WS-BILL-PRV-INDEX EQUAL 00\n               THEN MOVE 'ERROR'                     TO DET-B-DESC\n               ELSE MOVE WS-DESC (WS-BILL-PRV-INDEX) TO DET-B-DESC.\n           MOVE DET-B TO WS-DETAIL-TEXT.\n           PERFORM BILL-A-LINE.\n           MOVE ZERO TO WS-BILL-TOT1\n                        WS-BILL-TOT2\n                        WS-BILL-TOT3\n                        WS-BILL-TOT4\n                        WS-BILL-TOT5\n                        WS-BILL-TOT6\n                        WS-BILL-TOT7\n                        WS-BILL-TOT8.\n           MOVE WS-BILL-GRP-INDEX TO WS-BILL-PRV-INDEX.\n       BILL-BREAK-EXIT.\n           EXIT.\n       WRITE-HIST SECTION.\n           MOVE SORT-GRP     TO DM-HST-GRP.\n           MOVE SORT-AAM     TO DM-HST-AAM.\n           MOVE SORT-DSNAME  TO DM-HST-DSNAME.\n           MOVE SORT-ALLOC   TO DM-HST-ALLOC.\n           WRITE DM-HST-REC.\n       INIT-GROUP-TABLE SECTION.\n           OPEN INPUT AAMIN.\n           SET GROUP-INDEX TO +1.\n           MOVE LOW-VALUES TO GROUP-ENTRY (GROUP-INDEX).\n           MOVE CTRL-GRP-NUM TO GROUP-NUMBER (GROUP-INDEX).\n       INIT-GROUP-TABLE-LOOP.\n           READ AAMIN AT END\n               GO TO INIT-GROUP-TABLE-END.\n           IF AAMIN-REC-AAM NOT GREATER THAN GROUP-AAM (GROUP-INDEX)\n               THEN\n               DISPLAY 'AAM TABLE OUT OF SEQUENCE'\n                       ' OLD ENTRY = ' GROUP-AAM (GROUP-INDEX)\n                       ' NEW ENTRY = ' AAMIN-REC-AAM\n                       UPON SYSOUT\n               MOVE +1000 TO ABEND-CODE\n               CALL 'USERDUMP' USING ABEND-CODE.\n           IF GROUP-INDEX GREATER THAN +999 THEN\n               DISPLAY 'BUSINESS GROUP TABLE OVERFLOW'\n                   UPON SYSOUT\n               MOVE +1000 TO ABEND-CODE\n               CALL 'USERDUMP' USING ABEND-CODE.\n           MOVE AAMIN-REC-GROUP TO WS-GRP.\n           IF (INDEX-SW (WS-GRP-INDEX) EQUAL 'N' OR\n               SUB-SW (WS-GRP-SUB) EQUAL 'N') THEN\n               DISPLAY 'INVALID GROUP NUM = ' WS-GRP\n                       ' FOR AAM = ' AAMIN-REC-AAM\n                       UPON SYSOUT\n               MOVE +1000 TO ABEND-CODE\n               CALL 'USERDUMP' USING ABEND-CODE.\n           ADD +1 TO WS-GROUP-HI.\n           SET GROUP-INDEX UP BY +1.\n           MOVE AAMIN-REC-AAM TO GROUP-AAM (GROUP-INDEX).\n           MOVE AAMIN-REC-GROUP TO GROUP-NUMBER (GROUP-INDEX).\n           GO TO INIT-GROUP-TABLE-LOOP.\n       INIT-GROUP-TABLE-END.\n           CLOSE AAMIN.\n       INIT-GROUP-TABLE-EXIT.\n           EXIT.\n       FIND-GROUP-NUM SECTION.\n           SEARCH ALL GROUP-ENTRY\n               WHEN GROUP-AAM (GROUP-INDEX) EQUAL SORT-AAM\n                   GO TO FIND-GROUP-NUM-HIT.\n           SET GROUP-INDEX TO +1.\n       FIND-GROUP-NUM-HIT.\n           MOVE GROUP-NUMBER (GROUP-INDEX) TO SORT-GRP.\n       FIND-GROUP-NUM-EXIT.\n           EXIT.\n       INIT-WORK-HIST SECTION.\n           OPEN INPUT  HISTORY\n                OUTPUT WORK-HIST.\n           READ HISTORY AT END\n               MOVE '00/00/00' TO WS-OLD-HIST-DATE\n               GO TO INIT-WORK-HIST-END.\n           MOVE DM-HST-DATE    TO WS-OLD-HIST-DATE.\n       INIT-WORK-HIST-LOOP.\n           READ HISTORY AT END\n               GO TO INIT-WORK-HIST-END.\n           WRITE WK-HST-REC FROM DM-HST-REC.\n           GO TO INIT-WORK-HIST-LOOP.\n       INIT-WORK-HIST-END.\n           CLOSE HISTORY WORK-HIST.\n       INIT-WORK-HIST-EXIT.\n           EXIT.\n       DET-A-LINE SECTION.\n           ADD DET-SKIP-CT TO DET-LINE-CT.\n           IF DET-LINE-CT GREATER THAN LINE-MAX THEN\n               ADD +2 DET-SKIP-CT GIVING DET-LINE-CT\n               ADD +1 TO DET-PAGE-CT\n               MOVE DET-PAGE-CT TO H-1-PAGE\n               WRITE DET-REC FROM HEADING-1\n                   AFTER ADVANCING TO-TOP\n               WRITE DET-REC FROM HEADING-3\n                   AFTER ADVANCING 1.\n           WRITE DET-REC FROM DETAIL-LINE AFTER ADVANCING DET-SKIP-CT.\n           MOVE +1 TO DET-SKIP-CT.\n       BILL-A-LINE SECTION.\n           ADD BIL-SKIP-CT TO BIL-LINE-CT.\n           IF BIL-LINE-CT GREATER THAN LINE-MAX THEN\n               ADD +2 BIL-SKIP-CT GIVING BIL-LINE-CT\n               ADD +1 TO BIL-PAGE-CT\n               MOVE BIL-PAGE-CT TO H-5-PAGE\n               WRITE RBL-REC FROM HEADING-5\n                   AFTER ADVANCING TO-TOP\n               WRITE RBL-REC FROM HEADING-6\n                   AFTER ADVANCING 1.\n           WRITE RBL-REC FROM DETAIL-LINE AFTER ADVANCING DET-SKIP-CT.\n           MOVE +1 TO BIL-SKIP-CT.\n       SUM-A-LINE SECTION.\n           ADD SUM-SKIP-CT TO SUM-LINE-CT.\n           IF SUM-LINE-CT GREATER THAN LINE-MAX THEN\n               ADD +2 SUM-SKIP-CT GIVING SUM-LINE-CT\n               ADD +1 TO SUM-PAGE-CT\n               MOVE SUM-PAGE-CT TO H-2-PAGE\n               WRITE SUM-REC FROM HEADING-2\n                   AFTER ADVANCING TO-TOP\n               WRITE SUM-REC FROM HEADING-4\n                   AFTER ADVANCING 1.\n           WRITE SUM-REC FROM DETAIL-LINE AFTER ADVANCING SUM-SKIP-CT.\n           MOVE +1 TO SUM-SKIP-CT.\n       INIT-DESC-TABLE SECTION.\n           OPEN INPUT GRPIN.\n       INIT-DESC-READ.\n           READ GRPIN AT END\n               GO TO INIT-DESC-END.\n           IF GRPIN-NUM NOT NUMERIC THEN\n               DISPLAY 'INVALID GRPIN REC - NUM NOT NUMERIC'\n                       UPON SYSOUT\n               CALL 'USERDUMP' USING ABEND-CODE.\n           IF GRPIN-NUM EQUAL 00 THEN\n               DISPLAY 'INVALID GRPIN REC - NUM = ZERO'\n                       UPON SYSOUT\n               CALL 'USERDUMP' USING ABEND-CODE.\n           IF GRPIN-TYPE EQUAL 'GRP' THEN\n               GO TO INIT-DESC-GRP.\n           IF GRPIN-TYPE EQUAL 'TYP' THEN\n               GO TO INIT-DESC-TYP.\n           DISPLAY 'INVALID GRPIN REC - INVALID TYPE'\n                   UPON SYSOUT\n           CALL 'USERDUMP' USING ABEND-CODE.\n       INIT-DESC-GRP.\n           MOVE 'Y' TO INDEX-SW (GRPIN-NUM).\n           MOVE GRPIN-DESC TO WS-DESC (GRPIN-NUM).\n           GO TO INIT-DESC-READ.\n       INIT-DESC-TYP.\n           IF GRPIN-NUM GREATER THAN 08 THEN\n               DISPLAY 'INVALID GRPIN REC - TYP GREATER THAN 8'\n                       UPON SYSOUT\n               CALL 'USERDUMP' USING ABEND-CODE.\n           MOVE 'Y' TO SUB-SW (GRPIN-NUM).\n           MOVE GRPIN-DESC TO SUB-DESC (GRPIN-NUM).\n           GO TO INIT-DESC-READ.\n       INIT-DESC-END.\n           CLOSE GRPIN.\n       INIT-DESC-TABLE-EXIT.\n           EXIT.\n       E-O-J SECTION.\n           STOP RUN.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DM298PUP": {"ttr": 5894, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x05F\\x05F\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 1350, "newlines": 1350, "modlines": 0, "user": "FILE097"}, "text": "DM298PUP CSECT\n         REGS\n         USING DM298PUP,R15   ADDRESSASBILITY\n         B     MAINEP         BRANCH AROUND LIT\n         DC    AL1(L'CSECTLIT)\nCSECTLIT DC    C'DM298PUP - MOVE/REALLOC DATASETS &SYSDATE &SYSTIME'\n*\n*        READS CARDS AND MOVES/REALLOCATES ONE DATASET PER CARD.\n*        'CMD' IS USED IN MESSAGES. 'F' IS THE 1 CHAR CMD FIELD USED\n*        IN THE CONTROL CARD.\n*\n*        PROCESSING (NORMAL):\n*      STEP  CMD F PROCESSING\n*        1)  --- - SCAN CONTROL CARD.\n*        2)  MOV M DYNA A DD=FILEDD OF THE CURRENT VERSION OF DATASET.\n*        3)  PH1 1 COPY TO WORK.\n*        4)  PH2 2 DYND - THIS WILL KEEP THE CURRENT VERSION.\n*        5)  PH3 3 DYNA A DD=FILEDD WITH A DISP=(,DELETE).\n*        6)  PH3 3 DYND - THIS WILL DELETE THE CURRENT VERSION.\n*        7)  PH4 4 DYNA A DD=FILEDD WITH DISP=(,CATLG),SPACE=ETC.\n*                  THIS WILL ALLOCATE THE NEW VERSION OF THE FILE.\n*        8)  PH5 5 COPY WORK BACK TO THE NEW VERSION.\n*        9)  PH5 5 DYND - THIS WILL CATALOG THE NEW VERSION\n*                  THE DATA IS NOW IN THE NEW VERSION OF THE FILE.\n*       10)  --- - LOOP BACK TO STEP 1 ON NEXT CONTROL CARD.\n*\n*        CARDIN MUST POINT TO A DISK FILE.  THE CMD FIELD IS UPDATED\n*        AND THE BLOCK CONTAINING THE INPUT CARD IS REWRITTEN AS EACH\n*        PHASE IS STARTED SO THAT RESTART IS POSSIBLE.  TWO SPECIAL\n*        CMD VALUES ARE USED:\n*\n*        CMD=ERR AN ERROR WAS DETECTED BUT THE OLD FILE IS INTACT.\n*        CMD=OK  ALL PROCESSING ON THIS FILE WAS COMPLETED OK.\n*\n*        RESTART IS AUTOMATICALLY INITIATED BASED ON THE VALUE IN\n*        CMD.  EACH CONTROL CARD IS SEPARATELY CHECKED.\n*\n*          CMD F DESCRIPTION                    RESTART ACTION\n*          MOV M PROCESS NORMALLY             - PROCESS AS NON-RESTART\n*          OK    MOVED OK                     - SKIP TO NEXT CARD\n*          ERR E FATAL ERROR OCCURED          - SKIP TO NEXT CARD\n*          PH1 1 RESET CMD TO MOV             - START OVER FROM MOV\n*          PH2 2 ASSUME FILE IS OUT THERE     - SKIP TO PH3\n*          PH3 3 ASSUME FILE IS OUT THERE     - PROCESS FROM HERE\n*          PH4 4 ASSUME FILE IS NOT OUT THERE - PROCESS FROM HERE\n*          PH5 5 ASSUME FILE IS OUT THERE     - DYNA DISP=OLD THEN\n*           \"  \" CONTINUED                    - PROCESS FROM HERE\n*\n*        IF THIS JOB ABENDS CHECK THE CMD FIELD OF THE FILE BEING\n*        PROCESSED.  NO SPECIAL ACTION SHOULD BE REQUIRED EXCEPT\n*        FOR PH3 AND PH4.  IN THIS CASE CHECK THE FILE TO SEE\n*        IF IT IS PRESENT.  IF IT HAS BEEN DELETED SET CMD TO PH4.\n*        IF IT IS PRESENT WITH THE OLD ALLOCATION SET CMD TO PH3.\n*        IF IT IS PRESENT WITH THE NEW ALLOCATION SET CMD TO PH5.\n*\n*        WORK POINTS TO A WORK FILE.  IT SHOULD BE DISP=(,KEEP/CATLG)\n*        RATHER THAN DISP=(,DELETE) SO THAT RESTART IS POSSIBLE IN\n*        CASE OF ABEND.  EACH FILE AS IT IS PROCESSED IS COPIED TO WORK\n*        WITH THE DCB INFO SPECIFIED IN THE CONTROL CARD SO MAKE SURE\n*        IT IS LARGE ENOUGH TO ACCOMODATE THE SINGLE LARGEST FILE.\n*\n*        MVS OPERATOR COMMANDS ARE SUPPORTED FOR THIS PROGRAM:\n*\n*        P JOBNAME   - STOP JOB AT END OF CURRENT PHASE\n*        F JOBNAME,D - DISPLAY CMD AND DSN OF CURRENT PHASE\n*        F JOBNAME,P - STOP JOB AT END OF CURRENT CONTROL CARD\n*\n         EJECT\nMAINEP   DS    0H\n         SAVE  (14,12)        STANDARD LINKAGE\n         LR    R12,R15        MOVE BASE\n         LA    R11,2048(R12)\n         LA    R11,2048(R11)\n         LA    R10,2048(R11)\n         LA    R10,2048(R10)\n         DROP  R15\n         USING DM298PUP,R12,R11,R10  ADDRESSABILITY\n         LR    R2,R13         OLD SAVE AREA\n         LA    R13,SAVEAREA   NEW SAVE AREA\n         USING SAVEAREA,R13   MORE ADDRESSABILITY\n         ST    R13,8(R2)      CHAIN\n         ST    R2,4(R13)      CHAIN\n         LA    R6,SYSIN       A(DCB)\n         USING IHADCB,R6      ADDRESSABILITY\n         OPEN  ((R6),UPDAT)   OPEN\n         TM    DCBOFLGS,X'10' OK\n         BZ    ERROPIN        NO -- ERROR\n         LH    R1,DCBLRECL    POST LRECL\n         CH    R1,=H'80'      OK\n         BNE   ERRLRECL       NO -- ERROR\n         LH    R0,DCBBLKSI    POST BLKSIZE\n         ST    R0,CTLBUFCL    POST CTL BUFF CURR LEN\n         ST    R0,CTLBUFL     POST CTL BUFF LEN\n         GETMAIN R,LV=(0)\n         ST    R1,CTLBUFAD    POST CTL BLOCK ADDR\n         A     R1,CTLBUFL     NOW ADDR OF END OF BUF\n         ST    R1,CTLBUFE     POST\n         SH    R1,=H'80'      BACK UP 1 REC\n         ST    R1,CTLBUFCR    POST AS CURR REC (BUF EMPTY)\n         MVI   SWOPCTL,C'O'   POST SYSIN OPEN\n         LA    R6,SYSPRINT    A(DCB)\n         OPEN  ((R6),OUTPUT)  OPEN\n         TM    DCBOFLGS,X'10' OK\n         BZ    ERROPOU        NO -- ERROR\n         MVI   SWOPLOG,C'O'   POST SYSPRINT OPEN\n         DROP  R6\n         BAL   R14,VOLI       INITIALIZE VOL TABLE\n         BAL   R14,QINIT      INITIALIZE QEDIT TABLE\n*\n*  INITIALIZATION COMPLETE -- PROCESS\n*\nMAINLOOP EQU   *\n         CLI   SWSTOP,C'Y'    GRACEFUL STOP\n         BE    EXIT           YES\n         BAL   R14,CRDGET     READ CONTROL CARD\n         BAL   R14,CHKCMD     CHECK FOR RESTART/ERROR\n         B     *+4(R15)       START AT PROPER PLACE\n         B     MAINMOV        00\n         B     MAINOK         04\n         B     MAINERR        08\n         B     MAINPH1        0C\n         B     MAINPH2        10\n         B     MAINPH3        14\n         B     MAINPH4        18\n         B     MAINPH5        1C\nMAINMOV  EQU   *\n         BAL   R14,XMOV       DYNALLOC OLD FILE\n         BAL   R14,QGET       CHECK FOR OPR CMD\n         B     MAINPH1\nMAINOK   EQU   *\n         BAL   R14,XOK        SKIP THIS CONTROL CARD\n         BAL   R14,QGET       CHECK FOR OPR CMD\n         B     MAINLOOP\nMAINERR  EQU   *\n         BAL   R14,XERR       SKIP THIS CONTROL CARD\n         BAL   R14,QGET       CHECK FOR OPR CMD\n         B     MAINLOOP\nMAINPH1  EQU   *\n         BAL   R14,XPH1       COPY OLD TO WORK\n         BAL   R14,QGET       CHECK FOR OPR CMD\n         B     MAINPH2\nMAINPH2  EQU   *\n         BAL   R14,XPH2       DYNDEALLOC OLD FILE\n         BAL   R14,QGET       CHECK FOR OPR CMD\n         B     MAINPH3\nMAINPH3  EQU   *\n         BAL   R14,XPH3       DELETE OLD FILE\n         BAL   R14,QGET       CHECK FOR OPR CMD\n         B     MAINPH4\nMAINPH4  EQU   *\n         BAL   R14,XPH4       DYNALLOC ALLOC NEW FILE\n         BAL   R14,QGET       CHECK FOR OPR CMD\n         B     MAINPH5\nMAINPH5  EQU   *\n         BAL   R14,XPH5       COPY WORK TO NEW\n         BAL   R14,QGET       CHECK FOR OPR CMD\n         B     MAINLOOP\n         TITLE 'VOLI   -- INITIALIZE VOLSER TABLE'\nVOLI     EQU  *\n         ST    R14,VOLIR14    SAVE RETURN ADDR\n         LA    R6,VOLSERIN    A(DCB)\n         USING IHADCB,R6      ADDRESSABILITY\n         OPEN  ((R6))\n         TM    DCBOFLGS,X'10' OK\n         BZ    ERRVOLO        NO -- ERROR\n         MVI   SWOPVOL,C'O'   POST FILE OPEN\n         LA    R5,VOLTAB      A(FIRST ENTRY IN TABLE)\nVOLILOOP EQU   *\n         GET   (R6)\n         CLC   VOLTABE,0(R5)  END OF TABLE\n         BE    ERRVOLF        YES -- ERROR\n         USING VOLREC,R1      ADDRESSABILITY\n         MVC   0(6,R5),VOLRECVS POST VOLSER\n         PACK  WORKDW,VOLRECTC  PACK TRKS/CYL\n         CVB   R15,WORKDW     NOW BIN\n         STH   R15,6(R5)      POST TO TABLE\n         LA    R5,8(R5)       BUMP TO NEXT ENTRY\n         B     VOLILOOP       LOOP BACK\n         DROP  R1\nVOLIEOF  EQU   *\n         CLOSE ((R6))\n         FREEPOOL ((R6))\n         MVI   SWOPVOL,C'C'   POST FILE CLOSED\n         L     R14,VOLIR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'CRDGET -- GET NEXT CONTROL CARD'\nCRDGET   EQU  *\n         ST    R14,CRDGR14    SAVE RET ADDR\n         L     R14,CTLBUFCR   POST ADDR OF CURR REC\n         AH    R14,=H'80'     BUMP TO NEXT REC\n         ST    R14,CTLBUFCR   NEW CURR REC ADDR\n         C     R14,CTLBUFE    IS BUFF EMPTY\n         BL    CRDGET1        NO -- USE THIS REC\n         BAL   R14,CTLREAD    GET NEXT REC\n         L     R14,CTLBUFAD   POST A(FIRST REC)\n         ST    R14,CTLBUFCR   POST A(CURR REC)\nCRDGET1  EQU   *\n         LA    R15,80         REC LEN\n         LR    R1,R15         AGAIN FOR MVCL\n         LA    R0,FIXC        REC AREA\n         MVCL  R0,R14         COPY REC\n         SR    R1,R1          CLEAR FOR TRT\n         SR    R2,R2          CLEAR FOR TRT\n         TRT   FIXCALC,NUMTAB CHECK FOR BAD DIGITS\n         BNZ   ERRTRTAL       HIT -- ERROR\n         TRT   FIXCLR,NUMTAB  CHECK FOR BAD DIGITS\n         BNZ   ERRTRTLR       HIT -- ERROR\n         TRT   FIXCBLK,NUMTAB CHECK FOR BAD DIGITS\n         BNZ   ERRTRTBL       HIT -- ERROR\n         PACK  WORKDW,FIXCALC NOW PACKED\n         CVB   R1,WORKDW      NOW BIN\n         STH   R1,HWALC       POST ALLOC\n         PACK  WORKDW,FIXCLR  NOW PACKED\n         CVB   R1,WORKDW      NOW BIN\n         STH   R1,HWLR        POST RECORD LEN\n         PACK  WORKDW,FIXCBLK NOW PACKED\n         CVB   R1,WORKDW      NOW BIN\n         STH   R1,HWBLK       POST BLKSIZE\n         L     R14,CRDGR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'CTLREAD -- READ NEXT CTL REC'\nCTLREAD  EQU   *\n         ST    R14,CTLRR14    SAVE RETURN ADDR\n         L     R7,CTLBUFAD    POST BUFFER ADDR\n         READ  CTLDECB,SF,,(R7),,MF=E\n         CHECK CTLDECB\n         L     R9,CTLDECB+16  POINT TO IOB\n         L     R14,CTLBUFL    BUFFER LEN\n         SH    R14,14(R9)     MINUS RESIDUAL = CURR BLOCK SIZE\n         ST    R14,CTLBUFCL   POST CURR BLOCK SIZE\n         A     R14,CTLBUFAD   PLUS A(BUF)\n         ST    R14,CTLBUFE    NEW END OF BUF\n         SR    R14,R14        CLEAR\n         L     R15,CTLBUFCL   POST CURRENT LENGTH\n         D     R14,=F'80'     IS IT OK\n         LTR   R14,R14        REMIANDER ZERO\n         BNZ   ERRBLKSI       NO -- ERROR\n         L     R14,CTLRR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'CHKCMD -- CHECK COMMAND'\nCHKCMD   EQU   *\n         ST    R14,CHKCR14    SAVE RETURN ADDR\n         CLI   FIXCCMD,C'M'\n         BE    CHKCMOV\n         CLI   FIXCCMD,C' '\n         BE    CHKCOK\n         CLI   FIXCCMD,C'E'\n         BE    CHKCERR\n         MVC   LOGMSG(L'MSGR01),MSGR01\n         BAL   R14,LOG        LOG RESTART MSG\n         CLI   FIXCCMD,C'1'\n         BE    CHKCPH1\n         CLI   FIXCCMD,C'2'\n         BE    CHKCPH2\n         CLI   FIXCCMD,C'3'\n         BE    CHKCPH3\n         CLI   FIXCCMD,C'4'\n         BE    CHKCPH4\n         CLI   FIXCCMD,C'5'\n         BE    CHKCPH5\n         B     ERRCMD         ERROR\nCHKCMOV  EQU   *\n         LA    R15,0          POST RETURN CODE\n         B     CHKCEXIT       EXIT\nCHKCOK   EQU   *\n         LA    R15,4          POST RETURN CODE\n         B     CHKCEXIT       EXIT\nCHKCERR  EQU   *\n         LA    R15,8          POST RETURN CODE\n         B     CHKCEXIT       EXIT\nCHKCPH1  EQU   *\n         BAL   R14,ERFM       EDIT RECORD FORMAT\n         B     *+4(R15)       CHECK RETURN CODE\n         B     CHKCPH10       00 - OK\n         B     ERRCHKRF       04 - RECORD FORMAT BAD\nCHKCPH10 EQU   *\n         LA    R15,0          POST RETURN CODE FOR MOV\n         B     CHKCEXIT       EXIT\nCHKCPH2  EQU   *\n         BAL   R14,ERFM       EDIT RECORD FORMAT\n         B     *+4(R15)       CHECK RETURN CODE\n         B     CHKCPH20       00 - OK\n         B     ERRCHKRF       04 - RECORD FORMAT BAD\nCHKCPH20 EQU   *\n         LA    R15,20         POST RETURN CODE FOR PH3\n         B     CHKCEXIT       EXIT\nCHKCPH3  EQU   *\n         BAL   R14,ERFM       EDIT RECORD FORMAT\n         B     *+4(R15)       CHECK RETURN CODE\n         B     CHKCPH30       00 - OK\n         B     ERRCHKRF       04 - RECORD FORMAT BAD\nCHKCPH30 EQU   *\n         LA    R15,20         POST RETURN CODE\n         B     CHKCEXIT       EXIT\nCHKCPH4  EQU   *\n         BAL   R14,ERFM       EDIT RECORD FORMAT\n         B     *+4(R15)       CHECK RETURN CODE\n         B     CHKCPH40       00 - OK\n         B     ERRCHKRF       04 - RECORD FORMAT BAD\nCHKCPH40 EQU   *\n         LA    R15,24         POST RETURN CODE\n         B     CHKCEXIT       EXIT\nCHKCPH5  EQU   *\n         BAL   R14,ERFM       EDIT RECORD FORMAT\n         B     *+4(R15)       CHECK RETURN CODE\n         B     CHKCPH50       00 - OK\n         B     ERRCHKRF       04 - RECORD FORMAT BAD\nCHKCPH50 EQU   *\n         MVC   DYNAT2,FIXCDSN POST DATASET NAME\n         LA    R1,DYNAUPL1    DISP=OLD PARAM LIST\n         ST    R1,DYNATADR    POST\n         LA    R1,DYNARBPT    POST PARAM LIST POINTER\n         DYNALLOC\n         LTR   R15,R15        ERROR\n         BE    CHKCPH51       NO\n         MVC   DYNERBP,=A(DYNARB)  POST RB ADDR TO DAIRFAIL\n         BAL   R14,MSGDAIR    EXECUTE DAIRFAIL\n         B     ABEND          QUIT\nCHKCPH51 EQU   *\n         LA    R15,28         POST RETURN CODE\n         B     CHKCEXIT       EXIT\nCHKCEXIT EQU   *\n         L     R14,CHKCR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'XMOV -- PROCESS MOV PHASE'\nXMOV     EQU   *\n         ST    R14,XMOVR14    SAVE RETURN ADDR\n         MVI   FIXCCMD,C'M'   POST COMMAND\n         BAL   R14,POST       REWRITE CONTROL REC\n         MVC   LOGMSG(L'MSGM01),MSGM01\n         BAL   R14,LOG        LOG STATUS\n         CLC   FIXCDSO,=C'PS ' DSO OK\n         BE    XMOVOKDS       YES\n         MVC   LOGMSG(L'MSGM03),MSGM03\n         BAL   R14,LOG        LOG STATUS\n         B     XMOVEREX       ERROR EXIT\nXMOVOKDS EQU   *\n         BAL   R14,ERFM       EDIT RECORD FORMAT\n         B     *+4(R15)       CHECK RECORD FORMAT\n         B     XMOVOKRF       00 - OK\n*                             04 - ERROR\n         B     XMOVEREX       ERROR EXIT\nXMOVOKRF EQU   *\n         MVC   DYNAT2,FIXCDSN POST DATASET NAME\n         LA    R1,DYNAUPL1    DISP=OLD PARAM LIST\n         ST    R1,DYNATADR    POST\n         LA    R1,DYNARBPT    DYNA PARAM LIST\n         DYNALLOC\n         LTR   R15,R15        ERROR\n         BE    XMOVOKEX       NO\n         MVC   DYNERBP,=A(DYNARB)  POST RB ADDR TO DAIRFAIL\n         BAL   R14,MSGDAIR    EXECUTE DAIRFAIL\n         CLC   DYNER15,=F'4'  ERROR IN CURRENT ENVIRONMENT\n         BNE   ABEND          NO -- NO RECOVERY POSSIBLE\n         CLI   DYNARBER,X'02' UNAVAILABLE\n         BE    XMOVUNAV       YES\n         CLI   DYNARBER,X'04' ENVIRONMENTAL\n         BE    XMOVENVR       YES\n         CLI   DYNARBER,X'17' NOT FOUND\n         BE    XMOVNOTF       YES\n         B     ABEND          UNSUPPORTED ERROR -- QUIT\nXMOVUNAV EQU   *              UNAVAILABLE\n         CLI   DYNARBER+1,X'10' CHECK FOR IN USE\n         BE    XMOVINUS       YES -- POST MSG\n         B     ABEND          OTHER ERROR -- QUIT\nXMOVENVR EQU   *              UNAVAILABLE\n         CLI   DYNARBER+1,X'10' CHECK FOR IN USE\n         BE    XMOVINUS       YES -- POST MSG\n         CLI   DYNARBER+1,X'20' CHECK FOR OPEN\n         BE    XMOVINUS       YES -- POST MSG\n         B     ABEND          OTHER ERROR -- QUIT\nXMOVNOTF EQU   *              NOT FOUND\n         CLI   DYNARBER+1,X'FF' ANYTHING ELSE OK\n         BE    ABEND          UNKNOWN ERROR -- QUIT\n         MVI   FIXCCMD,C'E'   POST COMMAND\n         BAL   R14,POST       REWRITE CONTROL REC\n         MVC   LOGMSG(L'MSGM06),MSGM06\n         BAL   R14,LOG        LOG STATUS\n         B     MAINLOOP       LOOP BACK\nXMOVINUS EQU   *              NOT FOUND\n         MVC   LOGMSG(L'MSGM05),MSGM05\n         BAL   R14,LOG        LOG STATUS\n         B     MAINLOOP       LOOP BACK\nXMOVEREX EQU   *\n         MVI   FIXCCMD,C'E'   POST ERROR\n         BAL   R14,POST       REWRITE CONTROL REC\n         MVC   LOGMSG(L'MSGM04),MSGM04\n         BAL   R14,LOG        LOG ERROR\n         B     MAINLOOP       GET NEXT CARD\nXMOVOKEX EQU   *\n         MVC   LOGMSG(L'MSGM02),MSGM02\n         BAL   R14,LOG        LOG STATUS\n         L     R14,XMOVR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'XOK  -- PROCESS OK  PHASE'\nXOK      EQU   *\n         ST    R14,XOKR14     SAVE RETURN ADDR\n         MVC   LOGMSG(L'MSGO01),MSGO01\n         BAL   R14,LOG        LOG STATUS\n         L     R14,XOKR14     RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'XERR -- PROCESS OK  PHASE'\nXERR     EQU   *\n         ST    R14,XERRR14    SAVE RETURN ADDR\n         MVC   LOGMSG(L'MSGE01),MSGE01\n         BAL   R14,LOG        LOG STATUS\n         L     R14,XERRR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'XPH1 -- PROCESS PH1 PHASE'\nXPH1     EQU   *\n         ST    R14,XPH1R14    SAVE RETURN ADDR\n         MVI   FIXCCMD,C'1'   POST COMMAND\n         BAL   R14,POST       REWRITE CONTROL REC\n         LA    R6,INDCB       A(DCB)\n         USING IHADCB,R6      ADDRESSABILITY\n         MVC   0(MDLLEN,R6),MDLDCB REFRESH\n         MVC   DCBDDNAM,=C'FILEDD  ' POST DDNAME\n         LA    R6,OUTDCB      A(DCB)\n         MVC   0(MDLLEN,R6),MDLDCB REFRESH\n         MVC   DCBDDNAM,=C'WORK    ' POST DDNAME\n         DROP  R6\n         BAL   R14,COPY       COPY DATA\n         B     *+4(R15)       PROCESS RETURN CODE\n         B     XPH1OKEX       00 - OK\n*                             04 - ERROR\n         LA    R1,DYNDRBPT    POST PARAM LIST POINTER\n         DYNALLOC\n         LTR   R15,R15        ERROR\n         BE    XPH1LOGE       NO -- LOG COPY ERROR\n         MVC   DYNERBP,=A(DYNDRB)  POST RB ADDR FOR DAIRFAIL\n         BAL   R14,MSGDAIR    EXECUTE DAIRFAIL\n         B     ABEND          QUIT\nXPH1LOGE EQU   *\n         MVI   FIXCCMD,C'E'   POST ERROR\n         BAL   R14,POST\n         MVC   LOGMSG(L'MSG102),MSG102\n         BAL   R14,LOG        LOG STATUS\n         B     MAINLOOP       GET NEXT CARD\nXPH1OKEX EQU   *\n         MVC   LOGMSG(L'MSG101),MSG101\n         BAL   R14,LOG        LOG STATUS\n         L     R14,XPH1R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'XPH2 -- PROCESS PH2 PHASE'\nXPH2     EQU   *\n         ST    R14,XPH2R14    SAVE RETURN ADDR\n         MVI   FIXCCMD,C'2'   POST COMMAND\n         BAL   R14,POST       REWRITE CONTROL REC\n         LA    R1,DYNDRBPT    POST PARAM LIST POINTER\n         DYNALLOC\n         LTR   R15,R15        ERROR\n         BE    XPH2OKEX       NO -- DONE\n         MVC   DYNERBP,=A(DYNDRB)  POST RB ADDR FOR DAIRFAIL\n         BAL   R14,MSGDAIR    EXECUTE DAIRFAIL\n         B     ABEND          QUIT\nXPH2OKEX EQU   *\n         MVC   LOGMSG(L'MSG201),MSG201\n         BAL   R14,LOG        LOG STATUS\n         L     R14,XPH2R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'XPH3 -- PROCESS PH3 PHASE'\nXPH3     EQU   *\n         ST    R14,XPH3R14    SAVE RETURN ADDR\n         MVI   FIXCCMD,C'3'   POST COMMAND\n         BAL   R14,POST       REWRITE CONTROL REC\n         MVC   DYNAT2,FIXCDSN POST DATASET NAME\n         LA    R1,DYNAUPL2    DISP=(,DELETE) PARAM LIST\n         ST    R1,DYNATADR    POST\n         LA    R1,DYNARBPT    DYNA PARAM LIST\n         DYNALLOC\n         LTR   R15,R15        ERROR\n         BE    XPH3DYND       NO -- DO DEALLOCATE\n         MVC   DYNERBP,=A(DYNARB)  POST RB ADDR FOR DAIRFAIL\n         BAL   R14,MSGDAIR    EXECUTE DAIRFAIL\n         B     ABEND          QUIT\nXPH3DYND EQU   *\n         LA    R1,DYNDRBPT    POST PARAM LIST POINTER\n         DYNALLOC\n         LTR   R15,R15        ERROR\n         BE    XPH3OKEX       NO -- DONE\n         MVC   DYNERBP,=A(DYNDRB)  POST RB ADDR FOR DAIRFAIL\n         BAL   R14,MSGDAIR    EXECUTE DAIRFAIL\n         B     ABEND          QUIT\nXPH3OKEX EQU   *\n         MVC   LOGMSG(L'MSG301),MSG301\n         BAL   R14,LOG        LOG STATUS\n         L     R14,XPH3R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'XPH4 -- PROCESS PH4 PHASE'\nXPH4     EQU   *\n         ST    R14,XPH4R14    SAVE RETURN ADDR\n         MVI   FIXCCMD,C'4'   POST COMMAND\n         BAL   R14,POST       REWRITE CONTROL REC\n         MVC   DYNAT2,FIXCDSN POST DATASET NAME\n         MVC   DYNATD,FIXCVOL POST VOLSER\n         BAL   R14,VOLL       LOCATE VOLSER\n         SR    R14,R14        CLEAR\n         LH    R15,HWALC      ALLOCATION\n         D     R14,FWTRK      CONVERT TO CYLS\n         LTR   R14,R14        ANY REMAINDER\n         BZ    XPH4COK        NO -- CYLS OK\n         LA    R15,1(R15)     ROUND UP\nXPH4COK  EQU   *\n         C     R15,=F'10'     MORE THAN 10 CYLS\n         BL    XPH4TRK        NO -- USE TRACKS\n         STCM  R15,7,DYNATB   POST CYL PRIMARY ALLOCATION\n         LA    R1,DYNATAP     ALLOCATION IN CYLS\n         ST    R1,DYNAPL3X    POST IN DYNA LIST\n         B     XPH4SEC        CALCULATE SECONDARY\nXPH4TRK  EQU   *\n         LH    R15,HWALC      REFRESH\n         STCM  R15,7,DYNATB   POST TRK PRIMARY ALLOCATION\n         LA    R1,DYNAT9P     ALLOCATION IN TRKS\n         ST    R1,DYNAPL3X    POST IN DYNA LIST\nXPH4SEC  EQU   *\n         SR    R14,R14        CLEAR\n         SR    R15,R15        CLEAR\n         ICM   R15,7,DYNATB   POST PRIMARY ALLOCATION\n         D     R14,=F'10'     SEC = 10% OF PRIMARY\n         LTR   R14,R14        REMAINDER 0\n         BE    XPH4SOK        YES -- NO ROUND\n         LA    R15,1(R15)     ROUND UP\nXPH4SOK  EQU   *\n         STCM  R15,7,DYNATC   POST SECONDARY\n         LA    R1,DYNAUPL3    DISP=NEW PARAM LIST\n         ST    R1,DYNATADR    POST\n         LA    R1,DYNARBPT    DYNA PARAM LIST\n         DYNALLOC\n         LTR   R15,R15        ERROR\n         BE    XPH4OKEX       NO -- DONE\n         MVC   DYNERBP,=A(DYNDRB)  POST RB ADDR FOR DAIRFAIL\n         BAL   R14,MSGDAIR    EXECUTE DAIRFAIL\n         B     ABEND          QUIT\nXPH4OKEX EQU   *\n         MVC   LOGMSG(L'MSG401),MSG401\n         BAL   R14,LOG        LOG STATUS\n         L     R14,XPH4R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'XPH5 -- PROCESS PH5 PHASE'\nXPH5     EQU   *\n         ST    R14,XPH5R14    SAVE RETURN ADDR\n         MVI   FIXCCMD,C'5'   POST COMMAND\n         BAL   R14,POST       REWRITE CONTROL REC\n         LA    R6,INDCB       A(DCB)\n         USING IHADCB,R6      ADDRESSABILITY\n         MVC   0(MDLLEN,R6),MDLDCB REFRESH\n         MVC   DCBDDNAM,=C'WORK    ' POST DDNAME\n         LA    R6,OUTDCB      A(DCB)\n         MVC   0(MDLLEN,R6),MDLDCB REFRESH\n         MVC   DCBDDNAM,=C'FILEDD  ' POST DDNAME\n         DROP  R6\n         BAL   R14,COPY       COPY DATA\n         B     *+4(R15)       PROCESS RETURN CODE\n         B     XPH5DYND       00 - OK\n*                             04 - ERROR\n         B     ABEND          FATAL ERROR\nXPH5DYND EQU   *\n         LA    R1,DYNDRBPT    POST PARAM LIST POINTER\n         DYNALLOC\n         LTR   R15,R15        ERROR\n         BE    XPH5OKEX       NO -- DONE\n         MVC   DYNERBP,=A(DYNDRB)  POST RB ADDR FOR DAIRFAIL\n         BAL   R14,MSGDAIR    EXECUTE DAIRFAIL\n         B     ABEND          QUIT\nXPH5OKEX EQU   *\n         MVI   FIXCCMD,C' '   POST SUCCESSFUL\n         BAL   R14,POST       REWRITE CONTROL REC\n         MVC   LOGMSG(L'MSG501),MSG501\n         BAL   R14,LOG        LOG STATUS\n         L     R14,XPH5R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'COPY -- COPY FROM IN TO OUT'\nCOPY     EQU   *\n         ST    R14,COPYR14    SAVE RETURN ADDR\n         LA    R6,INDCB       A(DCB)\n         USING IHADCB,R6      ADDRESSABILITY\n         OPEN  ((R6))         OPEN FILE\n         TM    DCBOFLGS,X'10' OPEN OK\n         BNZ   COPYOK1        YES\n         MVC   LOGMSG(L'MSGC01),MSGC01\n         B     COPYEREX\nCOPYOK1  EQU   *\n         MVI   SWOPIN,C'O'    POST FILE OPEN\n         CLC   DCBRECFM,RECFM RECORD FORMAT OK\n         BE    COPYOK2        YES\n         MVC   LOGMSG(L'MSGC02),MSGC02\n         B     COPYEREX\nCOPYOK2  EQU   *\n         CLC   DCBLRECL,HWLR  LRECL OK\n         BE    COPYOK3        YES\n         MVC   LOGMSG(L'MSGC03),MSGC03\n         B     COPYEREX\nCOPYOK3  EQU   *\n         LA    R6,OUTDCB      A(DCB)\n         MVC   DCBRECFM,RECFM POST RECORD FORMAT\n         MVC   DCBLRECL,HWLR  POST LRECL\n         MVC   DCBBLKSI,HWBLK POST BLOCK SIZE\n         OPEN  ((R6),OUTPUT)  OPEN FILE\n         TM    DCBOFLGS,X'10' OPEN OK\n         BNZ   COPYOK4        YES\n         MVC   LOGMSG(L'MSGC04),MSGC04\n         B     COPYEREX\nCOPYOK4  EQU   *\n         MVI   SWOPOUT,C'O'   POST FILE OPEN\n         DROP  R6\nCOPYLOOP EQU   *              COPY THE RECORDS\n         GET   INDCB          READ REC\n         LR    R0,R1          POST A(REC)\n         PUT   OUTDCB,(0)     WRITE REC\n         B     COPYLOOP       LOOP BACK\nCOPYEOF  EQU   *              EOF ON IN FILE\n         BAL   R14,CCLS       CLOSE FILES\n         SR    R15,R15        CLEAR\n         B     COPYEXIT       DONE\nCOPYEREX EQU   *\n         BAL   R14,LOG        LOG MSG\n         BAL   R14,CCLS       CLOSE FILES\n         LA    R15,4          POST ERR\nCOPYEXIT EQU   *\n         L     R14,COPYR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'CCLS -- CLOSE FILES USED IN COPY'\nCCLS     EQU   *\n         ST    R14,CCLSR14    SAVE RETURN ADDR\n         CLI   SWOPIN,C'C'    IS FILE CLOSED\n         BE    CCLSO          YES -- CHECK OUTPUT FILE\n         CLOSE INDCB\n         FREEPOOL INDCB\n         MVI   SWOPIN,C'C'    POST FILE CLOSED\nCCLSO    EQU   *\n         CLI   SWOPOUT,C'C'   IS FILE CLOSED\n         BE    CCLSEXIT       YES -- DONE\n         CLOSE OUTDCB\n         FREEPOOL OUTDCB\n         MVI   SWOPOUT,C'C'   POST FILE CLOSED\nCCLSEXIT EQU   *\n         L     R14,CCLSR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'POST -- REWRITE THE UPDATED CTL BLOCK'\nPOST     EQU   *\n         ST    R14,POSTR14    SAVE RETURN ADDR\n         L     R0,CTLBUFCR    A(CURRENT REC IN BUF)\n         LA    R1,80          REC LEN\n         LA    R14,FIXC       A(CURRENT REC)\n         LR    R15,R1         REPOST REC LEN\n         MVCL  R0,R14         UPDATE REC IN BUFF\n         WRITE CTLDECB,SF,,(R7),,MF=E\n         CHECK CTLDECB\nPOSTEXIT EQU   *\n         L     R14,POSTR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'ERFM -- EDIT RECORD FORMAT'\nERFM     EQU   *\n         ST    R14,ERFMR14    SAVE RETURN ADDR\n         MVI   RECFM,X'00'    CLEAR NEW RECFM\n         MVI   SWRECFMC,X'00' CLEAR CHAR CONT OPTION\n         MVI   SWRECFMF,X'00' CLEAR FORMAT OPTION\n         LA    R1,L'FIXCRFM   LEN OF RECFM FIELD\n         LA    R2,FIXCRFM     A(RECFM FIELD)\nERFMLOOP EQU   *\n         CLI   0(R2),C' '     SPACE\n         BE    ERFMBUMP       YES -- BUMP TO NEXT CHAR\n         CLI   0(R2),C'A'     ASA CHAR CONT\n         BE    ERFMA          YES -- PROCESS\n         CLI   0(R2),C'B'     BLOCKED\n         BE    ERFMB          YES -- PROCESS\n         CLI   0(R2),C'F'     FIXED\n         BE    ERFMF          YES -- PROCESS\n         CLI   0(R2),C'M'     MCH CHAR CONT\n         BE    ERFMM          YES -- PROCESS\n         CLI   0(R2),C'V'     VARIABLE\n         BE    ERFMV          YES -- PROCESS\n         MVC   LOGMSG(L'MSGM51),MSGM51\n         BAL   R14,LOG\n         B     ERFMEREX       UNSUPPORTED OPTION\nERFMA    EQU   *\n         CLI   SWRECFMC,X'00' FIRST CHAR CONT OPTION\n         BNE   ERFMERRC       NO -- ERROR\n         MVI   SWRECFMC,C'A'\n         OI    RECFM,RECFMA   POST\n         B     ERFMBUMP\nERFMB    EQU   *\n         OI    RECFM,RECFMB   POST\n         B     ERFMBUMP\nERFMF    EQU   *\n         CLI   SWRECFMF,X'00' FIRST FORMAT OPTION\n         BNE   ERFMERRF       NO -- ERROR\n         MVI   SWRECFMF,C'F'\n         OI    RECFM,RECFMF   POST\n         B     ERFMBUMP\nERFMM    EQU   *\n         CLI   SWRECFMC,X'00' FIRST CHAR CONT OPTION\n         BNE   ERFMERRC       NO -- ERROR\n         MVI   SWRECFMC,C'M'\n         OI    RECFM,RECFMM   POST\n         B     ERFMBUMP\nERFMV    EQU   *\n         CLI   SWRECFMF,X'00' FIRST FORMAT OPTION\n         BNE   ERFMERRF       NO -- ERROR\n         MVI   SWRECFMF,C'V'\n         OI    RECFM,RECFMV   POST\n         B     ERFMBUMP\nERFMBUMP EQU   *\n         LA    R2,1(R2)       BUMP TO NEXT CHAR\n         BCT   R1,ERFMLOOP    LOOP BACK\n         SR    R15,R15        POST NO ERROR\n         CLI   RECFM,X'00'    DID WE FIND ANYTHING\n         BNE   ERFMEXIT       YES -- EXIT\n         MVC   LOGMSG(L'MSGM52),MSGM52\n         BAL   R14,LOG\n         B     ERFMEREX       UNSUPPORTED OPTION\nERFMERRC EQU   *\n         MVC   LOGMSG(L'MSGM53),MSGM53\n         BAL   R14,LOG\n         B     ERFMEREX       UNSUPPORTED OPTION\nERFMERRF EQU   *\n         MVC   LOGMSG(L'MSGM54),MSGM54\n         BAL   R14,LOG\n         B     ERFMEREX       UNSUPPORTED OPTION\nERFMEREX EQU   *\n         LA    R15,4          POST ERROR\nERFMEXIT EQU   *\n         L     R14,ERFMR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'QINIT -- INITIALIZE QEDIT LOGIC'\nQINIT    EQU   *\n         ST    R14,QINIR14    SAVE RETURN ADDR\nQINILOOP EQU   *\n         EXTRACT COMMADDR,FIELDS=COMM\n         L     R8,COMMADDR    POST A(COMM POINTERS)\n         USING IEZCOMM,R8     ADDRESSABILITY\n         CLC   IEZCCIB,=F'0'  IS A CIB PRESENT\n         BE    QINISETN       NO -- SET MAX CIB NUMBER\n         L     R9,IEZCCIB     POST A(CIB)\n         USING IEZCIBDS,R9    ADDRESSABILITY\n         QEDIT ORIGIN=IEZCCIB,BLOCK=(R9) FREE CIB\n         B     QINILOOP       CHECK FOR MORE\n         DROP  R9\nQINISETN EQU   *\n         QEDIT ORIGIN=IEZCCIB,CIBCTR=4  MAX OF 4 CIBS\nQINIEXIT EQU   *\n         L     R14,QINIR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         DROP  R8\n         TITLE 'QGET -- GET NEXT MODIFY COMMAND USING QEDIT'\nQGET     EQU   *\n         ST    R14,QGETR14    SAVE RETURN ADDR\nQGETLOOP EQU   *\n         EXTRACT COMMADDR,FIELDS=COMM\n         L     R8,COMMADDR    POST A(COMM POINTERS)\n         USING IEZCOMM,R8     ADDRESSABILITY\n         L     R6,IEZCECB     A(QEDIT ECB FROM OS)\n         TM    0(R6),X'40'    IS IT POSTED\n         BZ    QGETEXIT       NO -- DONE\n         L     R9,IEZCCIB     A(CIB)\n         USING IEZCIBDS,R9    ADDRESSABILITY\n         CLI   CIBVERB,CIBMODFY  IS VERB MODIFY\n         BE    QGETF          YES -- PROCESS\n         CLI   CIBVERB,CIBSTOP  IS VERB STOP\n         BE    QGETS          YES -- PROCESS\n         B     QGETI          IGNORE\nQGETF    EQU   *\n         LH    R14,CIBDATLN   LENGTH OF RESPONSE\n         CH    R14,=H'1'      LONG ENOUGH\n         BL    QGETI          NO -- IGNORE\n         CLI   CIBDATA,C'D'   DISPLAY\n         BE    QGETD          YES -- PROCESS\n         CLI   CIBDATA,C'P'   STOP WHEN THIS FILE DONE\n         BE    QGETP          YES -- PROCESS\n         B     QGETI          INVALID -- IGNORE\nQGETD    EQU   *               DISPLAY CURRENT STATUS\n         MVC   QWTOCMD,FIXCCMD POST COMMAND\n         MVC   QWTODSN,FIXCDSN POST DATASET NAME\n         MVC   QWTOVOL,FIXCVOL POST VOLSER\n         WTO   MF=(E,QWTO)\n         B     QGETI          DONE\nQGETP    EQU   *              STOP WHEN THIS FILE DONE\n         MVI   SWSTOP,C'Y'    POST\n         B     QGETI          DONE\nQGETS    EQU   *              STOP NOW\n         B     EXIT\nQGETI    EQU   *\n         QEDIT ORIGIN=IEZCCIB,BLOCK=(R9) FREE CIB\n         B     QGETLOOP\nQGETEXIT EQU   *\n         L     R14,QGETR14    RESTORE RETURN ADDR\n         BR    R14\n         DROP  R8\n         DROP  R9\n         TITLE 'VOLL -- LOCATE VOLSER IN VOLTAB'\nVOLL     EQU   *\n         ST    R14,VOLLR14    SAVE RETURN ADDRILES\n         LA    R5,VOLTAB      A(FIRST ENTRY IN VOLTAB)\nVOLLLOOP EQU   *\n         CLC   FIXCVOL,0(R5)  IS THIS THE ENTRY\n         BE    VOLLHIT        YES -- USE IT\n         CLC   =D'0',0(R5)    EMPTY SLOT\n         BE    ERRVOLL        YES -- NOT FOUND - ERROR\n         CLC   VOLTABE,0(R5)  END OF TABLE\n         BE    ERRVOLL        YES -- NOT FOUND - ERROR\n         LA    R5,8(R5)       BUMP TO NEXT ENTRY\n         B     VOLLLOOP       LOOP BACK\nVOLLHIT  EQU   *\n         LH    R15,6(R5)      POST TRKS/CYL\n         ST    R15,FWTRK      POST AS A FULL WORD\nVOLLEXIT EQU   *\n         L     R14,VOLLR14    RESTORE RETURN ADDR\n         BR    R14\nMSGDAIR  EQU   *\n         ST    R14,MSGDR14    SAVE RETURN ADDRESS\n         ST    R15,DYNER15    SAVE DAIR RETURN CODE\n         LA    R1,DYNERBP     POST DAIRFAIL CB\n         LINK  EP=IKJEFF18    GENERATE ERROR MSG\n         LTR   R15,R15        CHECK FOR SUCCESS\n         BNZ   MSGDERR        DOUBLE ERROR\n         MVC   LOGMSG(L'MSGD01),MSGD01\n         BAL   R14,LOG\n         B     MSGDEXIT\nMSGDERR  EQU   *              DAIR FAILED AFTER DYNA/DYND FAILED\n         MVC   LOGMSG(L'MSGD02),MSGD02\n         BAL   R14,LOG\n         MVC   DYNER15,=X'FFFFFFFF' FORCE SERIOUS ERROR\nMSGDEXIT EQU   *              DAIR FAILED AFTER DYNA/DYND FAILED\n         L     R14,MSGDR14    RESTORE RETURN ADDR\n         BR    R14\n         TITLE 'LOG  -- LOG MSG TO SYSPRINT'\nLOG      EQU   *\n         ST    R14,LOGR14     SAVE RETURN ADDRILES\n         AP    LINECT,=P'1'   BUMP TO NEXT LINE\n         CP    LINECT,LINEMAX PAST END OF PAGE\n         BNH   LOGPRT         NO -- CONTINUE\n         AP    PAGECT,=P'1'   BUMP PAGE COUNT\n         UNPK  TIT1PAGE,PAGECT NOW CHAR\n         OI    TIT1PAGE+L'TIT1PAGE-1,X'F0' FIX SIGN\n         PUT   SYSPRINT,TIT1\n         PUT   SYSPRINT,TIT2\n         PUT   SYSPRINT,SPACES\n         ZAP   LINECT,=P'4'   RESET LINE COUNT\nLOGPRT   EQU   *\n         MVC   LOGCRD,FIXC    POST CURRENT COMMAND\n         PUT   SYSPRINT,LOGLINE\n         MVC   LOGMSG,SPACES\n         L     R14,LOGR14     RESTORE RETURN ADDR\n         BR    R14\n         TITLE 'EXIT -- ALL DONE'\nEXIT     EQU   *\n         BAL   R14,CLOSEFIL   CLOSE ANY OPEN FILES\n         L     R13,4(R13)     RESTORE A(SAVE AREA)\n         RETURN (14,12),RC=0  RETURN\n         TITLE 'ERROR LOGIC'\nERRBLKSI EQU   *\n         WTO   'BLKSIZE NOT MULTIPLE OF 80 FOR SYSIN',                 X\n               ROUTCDE=11,DESC=7\n         BAL   R14,CLOSEFIL   CLOSE ANY OPEN FILES\n         B     ABEND\nERRCHKRF EQU   *\n         WTO   'RECORD FORMAT INVALID ON RESTART',                     X\n               ROUTCDE=11,DESC=7\n         BAL   R14,CLOSEFIL   CLOSE ANY OPEN FILES\n         B     ABEND\nERRCMD   EQU   *\n         WTO   'COMMAND FIELD INVALID',                                X\n               ROUTCDE=11,DESC=7\n         BAL   R14,CLOSEFIL   CLOSE ANY OPEN FILES\n         B     ABEND\nERRLRECL EQU   *\n         WTO   'LRECL NOT EQUAL 80 FOR SYSIN',                         X\n               ROUTCDE=11,DESC=7\n         BAL   R14,CLOSEFIL   CLOSE ANY OPEN FILES\n         B     ABEND\nERROPIN  EQU   *\n         WTO   'OPEN FAILED FOR SYSIN',                                X\n               ROUTCDE=11,DESC=7\n         BAL   R14,CLOSEFIL   CLOSE ANY OPEN FILES\n         B     ABEND\nERROPOU  EQU   *\n         WTO   'OPEN FAILED FOR SYSPRINT',                             X\n               ROUTCDE=11,DESC=7\n         BAL   R14,CLOSEFIL   CLOSE ANY OPEN FILES\n         B     ABEND\nERRTRTAL EQU   *\n         WTO   'INVALID DIGITS IN CONTROL CARD - ALLOC',               X\n               ROUTCDE=11,DESC=7\n         BAL   R14,CLOSEFIL   CLOSE ANY OPEN FILES\n         B     ABEND\nERRTRTBL EQU   *\n         WTO   'INVALID DIGITS IN CONTROL CARD - BLKSIZE',             X\n               ROUTCDE=11,DESC=7\n         BAL   R14,CLOSEFIL   CLOSE ANY OPEN FILES\n         B     ABEND\nERRTRTLR EQU   *\n         WTO   'INVALID DIGITS IN CONTROL CARD - LRECL',               X\n               ROUTCDE=11,DESC=7\n         BAL   R14,CLOSEFIL   CLOSE ANY OPEN FILES\n         B     ABEND\nERRVOLF  EQU   *\n         WTO   'VOLSER TABLE FULL',                                    X\n               ROUTCDE=11,DESC=7\n         BAL   R14,CLOSEFIL   CLOSE ANY OPEN FILES\n         B     ABEND\nERRVOLL  EQU   *\n         WTO   'VOLSER NOT IN TABLE',                                  X\n               ROUTCDE=11,DESC=7\n         BAL   R14,CLOSEFIL   CLOSE ANY OPEN FILES\n         B     ABEND\nERRVOLO  EQU   *\n         WTO   'OPEN FAILED FOR VOLSERIN',                             X\n               ROUTCDE=11,DESC=7\n         BAL   R14,CLOSEFIL   CLOSE ANY OPEN FILES\n         B     ABEND\n         TITLE 'ABEND -- DUMP PROGRAM'\nABEND    EQU   *\n         BAL   R14,CLOSEFIL   CLOSE ANY OPEN FILES\n         LH    R1,ABCODE\n         ABEND (1),DUMP\n         TITLE 'CLOSEFIL -- CLOSE ANY OPEN FILES'\nCLOSEFIL EQU   *\n         ST    R14,CLOSR14    SAVE RETURN ADDR\n         CLI   SWOPCTL,C'O'   CONTROL FILE (SYSIN) OPEN\n         BNE   CLOSCTL        NO -- SKIP CLOSE\n         CLOSE SYSIN\nCLOSCTL  EQU   *\n         CLI   SWOPLOG,C'O'   LOG FILE (SYSPRINT) OPEN\n         BNE   CLOSLOG        NO -- SKIP CLOSE\n         CLOSE SYSPRINT\nCLOSLOG  EQU   *\n         CLI   SWOPIN,C'O'    IN FILE OPEN\n         BNE   CLOSIN         NO -- SKIP CLOSE\n         CLOSE INDCB\nCLOSIN   EQU   *\n         CLI   SWOPOUT,C'O'   OUT FILE OPEN\n         BNE   CLOSOU         NO -- SKIP CLOSE\n         CLOSE OUTDCB\nCLOSOU   EQU   *\n         CLI   SWOPVOL,C'O'   VOLUME FILE OPEN\n         BNE   CLOSVL         NO -- SKIP CLOSE\n         CLOSE VOLSERIN\nCLOSVL   EQU   *\nCLOSEXIT EQU   *\n         L     R14,CLOSR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         EJECT\n         LTORG\n         TITLE 'DATA AREAS'\nSAVEAREA DS    9D              REG SAVE AREA\n*\n*        MISC DOUBLEWORDS\n*\nWORKDW   DS    D               WORK AREA\n*\n*        R14 (SUBROUTINE RETURN ADDR) SAVE AREAS\n*\nCCLSR14  DS    F               CCLS\nCHKCR14  DS    F               CHKCRD\nCLOSR14  DS    F               CLOSEFIL\nCOPYR14  DS    F               COPY\nCRDGR14  DS    F               CRDGET\nCTLRR14  DS    F               CTLREAD\nERFMR14  DS    F               ERFM\nLOGR14   DS    F               LOG\nMSGDR14  DS    F               MSGDAIR\nPOSTR14  DS    F               POST\nQGETR14  DS    F               QGET\nQINIR14  DS    F               QINIT\nVOLIR14  DS    F               QINIT\nVOLLR14  DS    F               QINIT\nXERRR14  DS    F               XERR\nXMOVR14  DS    F               XMOV\nXOKR14   DS    F               XMOV\nXPH1R14  DS    F               XPH1\nXPH2R14  DS    F               XPH2\nXPH3R14  DS    F               XPH3\nXPH4R14  DS    F               XPH4\nXPH5R14  DS    F               XPH5\n*\n*        MISC FULLWORDS\n*\nCTLBUFAD DS    F               A(CTL DATA BLOCK)\nCTLBUFCL DS    F               LENGTH OF CURRENT BLOCK\nCTLBUFCR DS    F               A(CURR REC IN BUF)\nCTLBUFE  DS    F               A(END OF CURRENT BLOCK)\nCTLBUFL  DS    F               LENGTH OF BUFFER\nCOMMADDR DS    F               A(EXTRACT COMM FIELD)\nFWTRK    DS    F               TRKS/CYL\n*\n*        MISC HALFWORDS\n*\nABCODE   DC    H'1000'         DEFAULT ABEND CODE\nHWALC    DS    H               ALLOCATION\nHWLR     DS    H               LRECL\nHWBLK    DS    H               BLKSIZE\n         EJECT\n*\n*        SKELETON WTO FOR QEDIT\n*\nQWTO     WTO  'C 12345678901234567890123456789012345678901234 VVVVVV', X\n               DESC=7,                                                 X\n               ROUTCDE=2,                                              X\n               MF=L\nQWTOCMD  EQU   QWTO+04,1\nQWTODSN  EQU   QWTO+06,44\nQWTOVOL  EQU   QWTO+51,6\n         EJECT\n*\n*        MESSAGES\n*\n*                         1         2         3         4         5\n*                123456789012345678901234567890123456789012345678901\nMSGC01   DC    C'OPEN FAILED FOR COPY FROM DCB'\nMSGC02   DC    C'FROM DCB RECFM WRONG'\nMSGC03   DC    C'FROM DCB LRECL WRONG'\nMSGC04   DC    C'OPEN FAILED FOR COPY TO DCB'\nMSGD01   DC    C'DYNA/DYND FAILURE - SEE MSG'\nMSGD02   DC    C'DYNA/DYND + DAIR FAILURE - SEE DUMP'\nMSGE01   DC    C'PROCESSING SKIPPED - FILE IN ERROR'\nMSGM01   DC    C'START PROCESSING FOR THIS FILE'\nMSGM02   DC    C'MOV PHASE COMPLETED OK'\nMSGM03   DC    C'CONTROL CARD DSORG MUST BE PS'\nMSGM04   DC    C'CONTROL CARD CMD SET TO ERR'\nMSGM05   DC    C'PROCESSING SKIPPED - FILE IN USE'\nMSGM06   DC    C'CONTROL CARD CMD SET TO ERR - FILE NOT FOUND'\nMSGM51   DC    C'CONTROL CARD RECFM OPTION NOT SUPPORTED'\nMSGM52   DC    C'CONTROL CARD RECFM NOT SUPPLIED'\nMSGM53   DC    C'CONTROL CARD RECFM HAS MULTIPLE CHAR CONT'\nMSGM54   DC    C'CONTROL CARD RECFM HAS MULTIPLE FORMATS'\nMSGO01   DC    C'PROCESSING SKIPPED - FILE OK'\nMSGR01   DC    C'RESTARTING THIS FILE'\nMSG101   DC    C'PH1 PHASE COMPLETED OK'\nMSG102   DC    C'CONTROL CARD CMD SET TO ERR'\nMSG201   DC    C'PH2 PHASE COMPLETED OK'\nMSG301   DC    C'PH3 PHASE COMPLETED OK'\nMSG401   DC    C'PH4 PHASE COMPLETED OK'\nMSG501   DC    C'PH5 PHASE COMPLETED OK'\n*\n*        MISCELLANEOUS\n*\nRECFM    DS    X               HEX RECFM FOR DCB\nSWRECFMC DS    X               RECFM CHAR CONT SW\nSWRECFMF DS    X               RECFM FORMAT    SW\n*                              OR APPROPRIATE OPTIONS TOGETHER\nRECFMM   EQU   X'02'           MCH CHAR CONT\nRECFMA   EQU   X'04'           ASA CHAR CONT\nRECFMB   EQU   X'10'           BLOCKED\nRECFMV   EQU   X'40'           VARIABLE\nRECFMF   EQU   X'80'           FIXED\n*\nSWOPCTL  DC    C'C'            SYSIN    OPEN/CLOSED SWITCH\nSWOPLOG  DC    C'C'            SYSORINT OPEN/CLOSED SWITCH\nSWOPIN   DC    C'C'            INCDB    OPEN/CLOSED SWITCH\nSWOPOUT  DC    C'C'            OUTDCB   OPEN/CLOSED SWITCH\nSWOPVOL  DC    C'C'            VOLSERIN OPEN/CLOSED SWITCH\nSWSTOP   DC    C'N'            SOFT STOP SWITCH\n*\nLINECT   DC    PL2'57'\nLINEMAX  DC    PL2'57'\nPAGECT   DC    PL2'0'\n         EJECT\nFIXC     DS   0CL80           DATA AREA OF CONTROL REC\nFIXCCMD  DS   C               COMMAND\nFIXCDSN  DS   CL44            DATASET NAME\nFIXCVOL  DS   CL6             NEW VOLSER\nFIXCALC  DS   CL5             NEW ALLOCATION (TRACKS)\nFIXCDSO  DS   CL3             DSORG\nFIXCRFM  DS   CL3             RECORD FORMAT\n*        ANY COMBINATION OF THE FOLLOWING SUPPORTED\n*                             A = ASA CHAR CONTROL\n*                             M = MCH CHAR CONTROL\n*                             F = FIXED\n*                             V = VARIABLE\n*                             B = BLOCKED\nFIXCLR   DS   CL5             LOGICAL RECORD LEN\nFIXCBLK  DS   CL5             BLOCK SIZE\nFIXCFILL DS   CL8             FILLER (TSO SEQ NUM)\n*\nLOGLINE  DS   0CL133          PRINT LINE\nLOGCC    DC   C' '            CHAR CONT\nLOGCRD   DS   CL80            CARD IMAGE\n         DC   C' '            FILL\nLOGMSG   DC   CL51' '         MESSAGE AREA\n*\nSPACES   DC   CL133' '\n*\nTIT1     DS   0CL133\n         DC   CL40'1DM289-01'\n         DC   CL36'DISK MANAGMENT FILE MOVE UTILITY LOG'\n         DC   CL49' '\n         DC   CL05'PAGE '\nTIT1PAGE DS   CL3\n*\nTIT2     DS   0CL133\n         DC   CL82' CONTROL CARD'\n         DC   CL51'MESSAGE'\n         EJECT\n*\n*        FOR DYNALLOC:\n*        R1       ==> S99RBPTR (REQ BLK POINTER)\n*        S99RBPTR ==> S99RB    (REQUEST BLOCK)\n*        S99RB    ==> S99TUPL  (TEXT POINTER LIST)\n*        S99TUPL  ==> TEXT1    (DYNA OR JCL PARM)\n*                 ==> TEXT2    (DYNA OR JCL PARM)\n*                 ETC\n*\n*\n*        ALLOC LIST\n*\nDYNARBPT DS    0F\n         DC    XL1'80'         END OF LIST\n         DC    AL3(DYNARB)     RB POINTER\n*\nDYNARB   DS    0F\n         DC    AL1(20)         CONTROL BLOCK LENGTH\n         DC    XL1'01'         DSNAME ALLOCATE\n         DC    XL2'0000'       FLAGS 1\nDYNARBER DC    XL2'0000'       ERROR CODE\n         DC    XL2'0000'       INFO CODE\nDYNATADR DC    A(0)            TEXT LIST POINTER\n         DC    XL4'00000000'   RESERVED\n         DC    XL4'00000000'   FLAGS2\n*\nDYNAUPL1 DS    0F               DISP=OLD\n         DC    A(DYNAT1P)       TEXT1 POINTER - DDNAME\n         DC    A(DYNAT2P)       TEXT2 POINTER - DSNAME\n         DC    XL1'80'          END OF LIST\n         DC    AL3(DYNAT3P)     TEXT3 POINTER - DISP=OLD\n*\nDYNAUPL2 DS    0F               DISP=(OLD,DELETE,DELETE)\n         DC    A(DYNAT1P)       TEXT1 POINTER - DDNAME\n         DC    A(DYNAT2P)       TEXT2 POINTER - DSNAME\n         DC    A(DYNAT3P)       TEXT3 POINTER - DISP=(OLD)\n         DC    A(DYNAT6P)       TEXT4 POINTER - DISP=(,DELETE)\n         DC    XL1'80'          END OF LIST\n         DC    AL3(DYNAT8P)     TEXT5 POINTER - DISP=(,,DELETE)\n*\nDYNAUPL3 DS    0F               DISP=(NEW,CATLG,CATLG),ETC.\n         DC    A(DYNAT1P)       TEXT1 POINTER - DDNAME\n         DC    A(DYNAT2P)       TEXT2 POINTER - DSNAME\n         DC    A(DYNAT4P)       TEXT3 POINTER - DISP=(NEW)\n         DC    A(DYNAT5P)       TEXT4 POINTER - DISP=(,CATLG)\n         DC    A(DYNAT7P)       TEXT5 POINTER - DISP=(,,CATLG)\nDYNAPL3X DC    A(0)             TEXT6 POINTER - SPACE=(XXX)\n         DC    A(DYNATBP)       TEXT7 POINTER - SPACE=(,(XXX))\n         DC    A(DYNATCP)       TEXT9 POINTER - SPACE=(,(,XXX))\n         DC    A(DYNATDP)       TEXTA POINTER - VOL=SER=XXXXXX\n         DC    XL1'80'          END OF LIST\n         DC    AL3(DYNATEP)     TEXTB POINTER - UNIT=SYSALLDA\n*\nDYNAT1P  DS    0C               DDNAME\n         DC    XL2'0001'        TEXT KEY\n         DC    XL2'0001'        TEXT NUMBER\n         DC    AL2(L'DYNAT1)    LENGTH OF TEXT\nDYNAT1   DC    C'FILEDD  '      DDNAME\n*\nDYNAT2P  DS    0C               DSNAME\n         DC    XL2'0002'        TEXT KEY\n         DC    XL2'0001'        TEXT NUMBER\n         DC    AL2(L'DYNAT2)    LENGTH OF TEXT\nDYNAT2   DC    CL44' '          DSNAME\n*\nDYNAT3P  DS    0C               DISP=OLD\n         DC    XL2'0004'        TEXT KEY\n         DC    XL2'0001'        TEXT NUMBER\n         DC    AL2(L'DYNAT3)    LENGTH OF TEXT\nDYNAT3   DC    X'01'            DISP=OLD\nDYNAT4P  DS    0C               DISP=NEW\n         DC    XL2'0004'        TEXT KEY\n         DC    XL2'0001'        TEXT NUMBER\n         DC    AL2(L'DYNAT4)    LENGTH OF TEXT\nDYNAT4   DC    X'04'            DISP=NEW\nDYNAT5P  DS    0C               DISP=(,CATLG)\n         DC    XL2'0005'        TEXT KEY\n         DC    XL2'0001'        TEXT NUMBER\n         DC    AL2(L'DYNAT5)    LENGTH OF TEXT\nDYNAT5   DC    X'02'            DISP=(,CATLG)\nDYNAT6P  DS    0C               DISP=(,DELETE)\n         DC    XL2'0005'        TEXT KEY\n         DC    XL2'0001'        TEXT NUMBER\n         DC    AL2(L'DYNAT6)    LENGTH OF TEXT\nDYNAT6   DC    X'04'            DISP=(,DELETE)\nDYNAT7P  DS    0C               DISP=(,,CATLG)\n         DC    XL2'0006'        TEXT KEY\n         DC    XL2'0001'        TEXT NUMBER\n         DC    AL2(L'DYNAT7)    LENGTH OF TEXT\nDYNAT7   DC    X'02'            DISP=(,,CATLG)\nDYNAT8P  DS    0C               DISP=(,,DELETE)\n         DC    XL2'0006'        TEXT KEY\n         DC    XL2'0001'        TEXT NUMBER\n         DC    AL2(L'DYNAT8)    LENGTH OF TEXT\nDYNAT8   DC    X'04'            DISP=(,,DELETE)\nDYNAT9P  DS    0C               SPACE=(TRK)\n         DC    XL2'0007'        TEXT KEY\n         DC    XL2'0000'        TEXT NUMBER\n         DC    AL2(L'DYNAT9)    LENGTH OF TEXT  (IGNORED)\nDYNAT9   DC    X'00'            SPACE=(TRK)     (IGNORED)\nDYNATAP  DS    0C               SPACE=(CYL)\n         DC    XL2'0008'        TEXT KEY\n         DC    XL2'0000'        TEXT NUMBER\n         DC    AL2(L'DYNATA)    LENGTH OF TEXT  (IGNORED)\nDYNATA   DC    X'00'            SPACE=(CYL)     (IGNORED)\nDYNATBP  DS    0C               SPACE=(,(XXX))\n         DC    XL2'000A'        TEXT KEY\n         DC    XL2'0001'        TEXT NUMBER\n         DC    AL2(L'DYNATB)    LENGTH OF TEXT\nDYNATB   DC    X'000000'        SPACE=(,(XXX))\nDYNATCP  DS    0C               SPACE=(,(,XXX))\n         DC    XL2'000B'        TEXT KEY\n         DC    XL2'0001'        TEXT NUMBER\n         DC    AL2(L'DYNATC)    LENGTH OF TEXT\nDYNATC   DC    X'000000'        SPACE=(,(,XXX))\nDYNATDP  DS    0C               VOL=SER=XXXXXX\n         DC    XL2'0010'        TEXT KEY\n         DC    XL2'0001'        TEXT NUMBER\n         DC    AL2(L'DYNATD)    LENGTH OF TEXT\nDYNATD   DC    C'      '        VOL=SER=XXXXXX\nDYNATEP  DS    0C               UNIT=SYSALLDA\n         DC    XL2'0015'        TEXT KEY\n         DC    XL2'0001'        TEXT NUMBER\n         DC    AL2(L'DYNATE)    LENGTH OF TEXT\nDYNATE   DC    C'SYSALLDA'      UNIT=SYSALLDA\n         EJECT\n*\n*        DEALLOC LIST\n*\nDYNDRBPT DS    0F\n         DC    XL1'80'         END OF LIST\n         DC    AL3(DYNDRB)     RB POINTER\n*\nDYNDRB   DS    0F\n         DC    AL1(20)         CONTROL BLOCK LENGTH\n         DC    XL1'02'         DEALLOCATE\n         DC    XL2'0000'       FLAGS 1\n         DC    XL2'0000'       ERROR CODE\n         DC    XL2'0000'       INFO CODE\n         DC    A(DYNDTUPL)     TEXT LIST POINTER\n         DC    XL4'00000000'   RESERVED\n         DC    XL4'00000000'   FLAGS2\n*\nDYNDTUPL DS    0F\n         DC    XL1'80'          END OF LIST\n         DC    AL3(DYNDT1P)     TEXT1 POINTER\n*\nDYNDT1P  DS    0C               DDNAME\n         DC    XL2'0001'        TEXT KEY\n         DC    XL2'0001'        TEXT NUMBER\n         DC    AL2(L'DYNDT1)    LENGTH OF TEXT\nDYNDT1   DC    C'FILEDD  '      DDNAME\n*\n*        DAIRFAIL DATA\n*\n*                                DAIRFAIL PARAM LIST\nDYNERBP  DS    F                 A(DYNA/DYND RB)\n         DC    A(DYNER15)        A(R15 RETURN CODE FROM DYNA/DYND)\n         DC    A(DYNEZERO)       A(IKJEFF02 OR 0)\n         DC    A(DYNEIDP)        A(DAIRFAIL PARAMETERS)\n*                                OTHER DATA\nDYNEZERO DC    A(0)              NO IKJEFF02 ADDR\nDYNER15  DS    F                 R15 RETURN CODE FROM DYNA/DYND\nDYNEIDP  DS    0XL2              PARAMETERS\n         DC    X'80'             WTP (WRITE TO PROGRAMMER) ONLY\n         DC    X'32'             SVC99 ERROR\n         EJECT\nVOLTAB   DC    200D'0'\nVOLTABE  DC    X'FFFFFFFFFFFFFFFF' END OF TABLE\n*\nNUMTAB   EQU   *\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  0\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  1\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  2\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  3\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  4\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  5\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  6\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  7\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  8\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  9\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  A\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  B\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  C\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  D\n         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'  E\n         DC    X'00000000000000000000FFFFFFFFFFFF'  F\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         TITLE 'DCBS AND DECBS'\n         PRINT NOGEN\n         DS    0D\nMDLDCB   DCB   DDNAME=MDLDCB,                                          X\n               DSORG=PS,                                               X\n               EODAD=COPYEOF,                                          X\n               MACRF=(GL,PM)\n         DS    0D\nMDLLEN   EQU   *-MDLDCB\n*\nINDCB    DC    (MDLLEN)X'00'\n         DS    0D\n*\nOUTDCB   DC    (MDLLEN)X'00'\n         DS    0D\n*\n         READ  CTLDECB,SF,SYSIN,,'S',MF=L\n*\nSYSIN    DCB   DDNAME=SYSIN,                                           X\n               DEVD=DA,                                                X\n               DSORG=PS,                                               X\n               EODAD=EXIT,                                             X\n               LRECL=80,                                               X\n               MACRF=(R,W),                                            X\n               RECFM=FB\n*\nSYSPRINT DCB   DDNAME=SYSPRINT,                                        X\n               DSORG=PS,                                               X\n               LRECL=133,                                              X\n               MACRF=PM,                                               X\n               RECFM=FBA\n*\nVOLSERIN DCB   DDNAME=VOLSERIN,                                        X\n               DSORG=PS,                                               X\n               EODAD=VOLIEOF,                                          X\n               LRECL=80,                                               X\n               MACRF=GL,                                               X\n               RECFM=FB\n         TITLE 'DSECTS'\n*\n*        OTHER DSECTS\n*\nVOLREC   DSECT\nVOLRECVS DS   CL6\n         DS   C\nVOLRECBT DS   CL7\n         DS   C\nVOLRECTC DS   CL3\n         DS   C\nVOLRECCV DS   CL5\n         DS   C\nVOLRECPL DS   CL3\n         DS   C\nVOLRECDS DS   C\n         DS   CL50\n*\nIEZCOMM  DSECT\nIEZCECB  DS   F\nIEZCCIB  DS   F\n*\n*        IBM SUPPLIED DSECTS\n*\n         DCBD  DSORG=PS\n         IKJEFFDF DFDSECT=YES\n         CVT   DSECT=YES\nIEZCIBDS DSECT\n         IEZCIB\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DM999DSU": {"ttr": 6408, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x01\\x9f\\x01\\x9f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 415, "newlines": 415, "modlines": 0, "user": "FILE097"}, "text": "         TITLE 'DM999DSU - INITIALIZATION'\nDM999DSU CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         USING DM999DSU,R15\n         B     MAINEP\n*\n*        THIS PROGRAM BUILDS CONTROL CARDS FOR THE IBM UTILITY\n*        ADRDSSU.  PARM WILL BE PASSED TO DSSU.\n*\n*        RST----- DD DISP=SHR,DSN= . . .   CAUSES RESTORE PROCESSING.\n*        A RESTORE CONTROL CARD WILL BE BUILT FOR EACH DSN.\n*        CONCATENATED DDS ARE NOT SUPPORTED.\n*\n*        DMP----- DD DISP=SHR,DSN= . . .   CAUSES DUMP PROCESSING.\n*        A DUMP CONTROL CARD WILL BE BUILT FOR EACH DSN.  CONCATENATED\n*        DDS ARE NOT SUPPORTED.  A FILE MAY SPAN NO MORE THAN FOUR\n*        VOLUMES.\n*\n*        SYSIN MUST POINT TO A DASD WORK FILE.  IT WILL BE BUILT BY\n*        THIS PROGRAM.  CONTROL WILL BE PASSED TO ADRDSSU VIA AN\n*        OS LINK MACRO.  THE CONDITION CODE OF THE RESULT WILL BE\n*        CHECKED AND THIS PROGRAM WILL ABEND IF IT IS NON-ZERO\n*        THIS PROGRAM WILL ISSUE A MESSAGE AND ABEND.\n*\n*        A SYSPRINT DD SYSOUT=* MUST BE INCLUDED FOR ADRDSSU USE.\n*\n*        NOTE:  VV------ DDS ARE BUILT FOR DUMP PROCESSING SO DO\n*        NOT USE DDS OF THIS FORMAT.\n*\n         DC    AL1(L'CSECTLIT)\nCSECTLIT DC    C'DM999DSU - EXECUTE ADRDSSU &SYSDATE'\n         EJECT\nMAINEP   DS    0H\n         SAVE  (14,12)        SAVE REGS\n         LR    R12,R15        NEW BASE\n         DROP  R15\n         USING DM999DSU,R12\n         LR    R2,R13         SAVE AREA CHAIN\n         LA    R13,SAVEAREA\n         ST    R2,4(R13)\n         ST    R13,8(R2)\n         USING SAVEAREA,R13\n         LA    R6,SYSIN       SYSIN FILE\n         USING IHADCB,R6\n         OPEN  ((R6),OUTPUT) OPEN IT\n         TM    DCBOFLGS,X'10' IS IT OPEN\n         BZ    ERROSYIN       NO -- ERROR\n         DROP  R6\n         EXTRACT TIOT,FIELDS=TIOT GET ADDRESS OF TIOT\n         L     R2,TIOT        LOAD ADDRESS OF TIOT IN REG2\n         LA    R2,24(R2)      SKIP TO DD ENTRIES\n         ST    R2,NEXTDD      SAVE A(FIRST DD)\n         TITLE 'DM999DSU - TIOT LOOP'\nTLOOP    EQU   *              SCAN TIOT\n         L     R2,NEXTDD      A(CURRENT DD)\n         SR    R15,R15        CHECK FOR END OF TIOT\n         IC    R15,0(R2)\n         LTR   R15,R15\n         BZ    EOTIOT         END OF TIOT\n         LA    R15,0(R15,R2)  ADDR OF NEXT TIOT\n         ST    R15,NEXTDD     SAVE\n         CLC   =C'DMP',4(R2)  IS THIS A VALID DD ENTRY\n         BE    TDMP           YES -- DUMP LOGIC\n         CLC   =C'RST',4(R2)  IS THIS A VALID DD ENTRY\n         BE    TRST           YES -- RESTORE LOGIC\n         B     TLOOP          LOOP BACK\nTDMP     EQU   *              DUMP DD\n         CLI   SWMODE,C'D'    IS MODE 'DUMP'\n         BE    TDMPMOK        YES - MODE OK\n         CLI   SWMODE,X'00'   IS MODE 'NO MODE'\n         BNE   ERRMODE        NO -- ERROR\n         PUT   SYSIN,CRD1     WRITE DUMP CARD\n         MVI   SWMODE,C'D'    SET MODE TO 'DUMP'\nTDMPMOK  EQU   *\n         BAL   R14,DUMP       PROCESS FOR DUMP\n         B     TLOOP\nTRST     EQU   *              DUMP DD\n         CLI   SWMODE,C'R'    IS MODE 'RESTORE'\n         BE    TRSTMOK        YES - MODE OK\n         CLI   SWMODE,X'00'   IS MODE 'NO MODE'\n         BNE   ERRMODE        NO -- ERROR\n         MVI   SWMODE,C'R'    SET MODE TO 'RESTORE'\nTRSTMOK  EQU   *\n         BAL   R14,REST       PROCESS FOR RESTORE\n         B     TLOOP\n         TITLE 'DM999DSU --END OF TIOT - CONTINUE PROCESSING'\nEOTIOT   EQU   *\n         CLI   SWMODE,X'00'   HAS MODE BEEN SET\n         BE    ERRNOMOD       NO -- ERROR\n         CLI   SWMODE,C'R'    RESTORE MODE\n         BE    DSSU           YES -- EXECUTE ADRDSSU\n*\n*        DUMP MODE\n*\n         PUT   SYSIN,CRD4     WRITE CARD\n         BAL   R14,WVOLS      WRITE VOLSER CONTROL CARDS\n         PUT   SYSIN,CRD5     WRITE CARD\n         B     DSSU           EXECUTE ADRDSSU\n         TITLE 'DM999DSU - DSSU - PROCESS ADRSSSU'\nDSSU     EQU   *\n         CLOSE SYSIN\n         L     R1,4(R13)      A(OLD SAVE AREA)\n         L     R1,24(R1)      A(PARM) FROM OS\n         LINK  EP=ADRDSSU     EXECUTE ADRDSSU\n         LTR   R15,R15        CHECK RETURN CODE\n         BNZ   ERRDSSU        DSSU FAILED\n         TITLE 'DM999DSU - EXIT ROUTINE'\nEXIT     EQU   *\n         L     R13,4(R13)    RETURN\n         RETURN (14,12),RC=0\n         TITLE 'DM999DSU - PROCESS FOR RESTORE'\nREST     EQU   *\n         ST    R14,RESTR14    SAVE RETURN ADDR\n         MVC   DDNAME,4(R2)   SAVE DDANME\n         PUT   SYSIN,CRD6     WRITE RESTORE CARD\n         LA    R6,DCBJFCB     A(DCB FOR RDJFCB)\n         USING IHADCB,R6      ADDRESSABILITY\n         MVC   DCBDDNAM,DDNAME MOVE CURRENT DDNAME TO DCB\n         RDJFCB ((R6))\n         LTR   R15,R15        READ OK\n         BNZ   ERRJFCB        NO -- ERROR\n         DROP  R6\n         MVC   CRD2DSN,JFCBDSNM POST DATASET NAME\n         PUT   SYSIN,CRD2     WRITE CARD\n         MVC   CRD7DD,DDNAME  POST DD NAME\n         PUT   SYSIN,CRD7     WRITE CARD\n         L     R14,RESTR14    RESTORE RETURN ADDR\n         BR    R14            EXIT\n         TITLE 'DM999DSU - PROCESS FOR DUMP'\nDUMP     EQU   *\n         ST    R14,DUMPR14    SAVE RETURN ADDR\n         MVC   DDNAME,4(R2)   SAVE DDNAME\n         LA    R6,DCBJFCB     A(DCB FOR RDJFCB)\n         USING IHADCB,R6      ADDRESSABILITY\n         MVC   DCBDDNAM,DDNAME MOVE CURRENT DDNAME TO DCB\n         RDJFCB ((R6))\n         LTR   R15,R15        READ OK\n         BNZ   ERRJFCB        NO -- ERROR\n         DROP  R6\n         MVC   CRD2DSN,JFCBDSNM POST DATASET NAME\n         PUT   SYSIN,CRD2     WRITE CARD\n         MVC   VOLSER,JFCBVOLS POST FIRST VOLSER\n         CLC   VOLSER,=C'      ' DONE\n         BE    DUMPEXIT       YES -- DONE\n         BAL   R14,VOLCHK     CHECK VOL FOR DUPES\n         MVC   VOLSER,JFCBVOLS+06 POST SECOND VOLSER\n         CLC   VOLSER,=C'      ' DONE\n         BE    DUMPEXIT       YES -- DONE\n         BAL   R14,VOLCHK     CHECK VOL FOR DUPES\n         MVC   VOLSER,JFCBVOLS+12 POST THIRD VOLSER\n         CLC   VOLSER,=C'      ' DONE\n         BE    DUMPEXIT       YES -- DONE\n         BAL   R14,VOLCHK     CHECK VOL FOR DUPES\n         MVC   VOLSER,JFCBVOLS+18 POST FOURTH VOLSER\n         CLC   VOLSER,=C'      ' DONE\n         BE    DUMPEXIT       YES -- DONE\n         BAL   R14,VOLCHK     CHECK VOL FOR DUPES\n         MVC   VOLSER,JFCBVOLS+24 POST FIFTH VOLSER\n         CLC   VOLSER,=C'      ' DONE\n         BE    DUMPEXIT       YES -- DONE\n         BAL   R14,VOLCHK     CHECK VOL FOR DUPES\n         MVC   VOLSER,JFCBVOLS+30 POST SIXTH VOLSER\n         CLC   VOLSER,=C'      ' DONE\n         BE    DUMPEXIT       YES -- DONE\n         B     ERRVOLS        ERROR -- TOO MANY VOLSERS\nDUMPEXIT EQU   *\n         L     R14,DUMPR14    RESTORE RETURN ADDR\n         BR    R14            EXIT\n         TITLE 'VOLCHK - CHECK AND ADD VOLSER TO TABLE'\nVOLCHK   EQU   *\n         ST    R14,VOLR14     SAVE RETURN ADDR\n         LA    R7,VOLTAB      A(VOLSER TABLE)\nVOLLOOP  EQU   *              LOOP THRU TABLE\n         CLC   VOLSER,0(R7)   MATCH\n         BE    VOLEXIT        YES -- DONE\n         C     R7,VOLMAX      TABLE FULL\n         BE    ERRVOLT        YES -- ERROR\n         CLC   =C'      ',0(R7) EMPTY SLOT\n         BE    VOLDONE        YES -- USE IT\n         LA    R7,6(R7)       BUMP TO NEXT SLOT\n         B     VOLLOOP        LOOP BACK\nVOLDONE  EQU   *\n         MVC   0(6,R7),VOLSER POST NEW VOLSER\nVOLEXIT  EQU   *\n         L     R14,VOLR14     RESTORE RETURN ADDR\n         BR    R14            EXIT\n         TITLE 'WVOLS - WRITE VOL TABLE CARDS'\nWVOLS    EQU   *              DUMP VOLSER TABLE\n         ST    R14,WVOLR14    SAVE RETURN ADDR\n         LA    R7,VOLTAB      VOLUME TABLE\nWVOLLOOP EQU   *              LOOP THRU TABLE\n         CLC   =C'      ',0(R7) IS THIS THE END\n         BE    WVOLEXIT       YES -- EXIT\n         BAL   R14,DYNA       DYNAMIC ALLOCATE DISK DDS\n         MVC   CRD3VOL,0(R7)  POST VOLSER\n         PUT   SYSIN,CRD3     WRITE CARD\n         LA    R7,6(R7)       BUMP TO NEXT ENTRY\n         B     WVOLLOOP       LOOP BACK\nWVOLEXIT EQU   *\n         L     R14,WVOLR14    RESTORE RETURN ADDR\n         BR    R14            EXIT\n         TITLE 'DYNA -- DYNALLOC ALLOCATE VOLUME'\nDYNA     EQU   *\n         ST    R14,DYNAR14    SAVE RETURN ADDR\n         ST    R7,DYNAR7      SAVE VOLSER POINTER\n         MVC   DDNAME(2),=C'VV' BUILD DDNAME\n         MVC   DDNAME+2(6),0(R7)\n         MVC   DYNAT1,DDNAME  POST DDNAME\n         MVC   DYNAT4,0(R7)\n         LA    R1,DYNARBPT    POST PARAM LIST POINTER\n         DYNALLOC\n         LTR   R15,R15        ERROR\n         BE    DYNAEXIT       NO -- DONE\n         MVC   DYNERBP,=A(DYNARB)  POST RB ADDR TO DAIRFAIL\n         B     ERRDAIR        EXECUTE DAIRFAIL\nDYNAEXIT EQU   *\n         L     R7,DYNAR7      RESTORE VOLSER POINTER\n         L     R14,DYNAR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'DM999DSU - ERROR ROUTINES'\nERROSYIN EQU   *\n         WTO   'ERROR - UNABLE TO OPEN SYSIN FILE',                    X\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRTOPT  EQU   *\n         WTO   'ERROR - INVALID OPT----- DD',                          X\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRJFCB  EQU   *\n         WTO   'ERROR - RDJFCB FAILED FOR DD XXXXXXXX',                X\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRVOLS  EQU   *\n         WTO   'ERROR - TOO MANY VOLSERS FOR DD XXXXXXXX',             X\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRVOLT  EQU   *\n         WTO   'ERROR - VOLSER TABLE OVERFLOW',                        X\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRDSSU  EQU   *\n         WTO   'ERROR - DSSU FAILED',                                  X\n               ROUTCDE=11,DESC=7\n         ABEND 1000\nERRMODE  EQU   *\n         WTO   'ERROR - CONFLICTING MODES',                            X\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRNOMOD EQU   *\n         WTO   'ERROR - NO DMP----- DD STATEMENTS FOUND',              X\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRDAIR  EQU   *              DYNA/DYND FAILED -- DAIR WILL FMT MSG\n         ST    R15,DYNER15    POST ERROR CODE\n         LA    R1,DYNERBP     POST DAIRFAIL CB\n         LINK  EP=IKJEFF18    GENERATE ERROR MSG\n         LTR   R15,R15        CHECK FOR SUCCESS\n         BNZ   ERRDAIRF       DOUBLE ERROR\n         WTO   'ERROR - DYNALLOC FAILED',                              X\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRDAIRF EQU   *              DAIR FAILED AFTER DYNA/DYND FAILED\n         WTO   'ERROR - DYNALLOC FAILED + DAIR FAILED',                X\n               ROUTCDE=11,DESC=7\n         B     ABEND\nABEND    EQU   *\n         ABEND 1000,DUMP\n         LTORG\n         TITLE 'DM999DSU - DATA AREAS'\nSAVEAREA DS    18F\nTIOT     DS    F\nNEXTDD   DS    F\nRESTR14  DS    F\nDUMPR14  DS    F\nVOLR14   DS    F\nWVOLR14  DS    F\nDYNAR14  DS    F\nDYNAR7   DS    F\nVOLMAX   DC    A(AVOLMAX)\nJFCBLST  DS    0F\n         DC    X'87'\n         DC    AL3(INFMJFCB)\nDDNAME   DS    CL8\nVOLSER   DS    CL6\nSWSHARE  DC    C'N'\n*\n*\nSWMODE   DC    X'00'\nVOLTAB   DC    256CL6'      '\nAVOLMAX  EQU   *-6\n         TITLE 'DM999DSU - MODEL CARDS'\nCRD1     DC    CL80'  DUMP OUTDD(TAPE1) DATASET(INC( +'\nCRD2     DC    CL80' '\n         ORG   CRD2+6\nCRD2DSN  DS    CL44\n         DC    C' , +'\n         ORG\nCRD3     DC    CL80' '\n         ORG CRD3+6\n         DC    C'VV'\nCRD3VOL  DS    CL6\n         DC    C' , +'\n         ORG\nCRD4     DC    CL80'    ) BY((DSORG,NE,VSAM))) INDD( +'\nCRD5     DC    CL80'    ) SHARE'\n         ORG\nCRD6     DC    CL80'  RESTORE INDDNAME(TAPE1) DATASET(INC( +'\nCRD7     DC    CL80' '\n         ORG CRD7+6\n         DC    C') BY((DSORG,NE,VSAM))) OUTDDNAME('\nCRD7DD   DS    CL8\n         DC    C') PURGE'\n         ORG\n         TITLE 'DM999DSU - JFCB AREA'\n         IEFJFCBN\n         TITLE 'DYNALLOC PARAM LISTS'\n*\n*        FOR DYNALLOC:\n*        R1       ==> S99RBPTR (REQ BLK POINTER)\n*        S99RBPTR ==> S99RB    (REQUEST BLOCK)\n*        S99RB    ==> S99TUPL  (TEXT POINTER LIST)\n*        S99TUPL  ==> TEXT1    (DYNA OR JCL PARM)\n*                 ==> TEXT2    (DYNA OR JCL PARM)\n*                 ETC\n*\n*\n*        ALLOC LIST\n*\nDYNARBPT DS    0F\n         DC    XL1'80'         END OF LIST\n         DC    AL3(DYNARB)     RB POINTER\n*\nDYNARB   DS    0F\n         DC    AL1(20)         CONTROL BLOCK LENGTH\n         DC    XL1'01'         DSNAME ALLOCATE\n         DC    XL2'0000'       FLAGS 1\n         DC    XL2'0000'       ERROR CODE\n         DC    XL2'0000'       INFO CODE\n         DC    A(DYNATUPL)     TEXT LIST POINTER\n         DC    XL4'00000000'   RESERVED\n         DC    XL4'00000000'   FLAGS2\n*\nDYNATUPL DS    0F\n         DC    A(DYNAT1P)       TEXT1 POINTER\n         DC    A(DYNAT2P)       TEXT2 POINTER\n         DC    A(DYNAT3P)       TEXT3 POINTER\n         DC    XL1'80'          END OF LIST\n         DC    AL3(DYNAT4P)     TEXT4 POINTER\n*\nDYNAT1P  DS    0C               DDNAME VV------\n         DC    XL2'0001'        TEXT KEY\n         DC    XL2'0001'        TEXT NUMBER\n         DC    AL2(L'DYNAT1)    LENGTH OF TEXT\nDYNAT1   DS    CL8              DDNAME\n*\nDYNAT2P  DS    0C               UNIT=SYSALLDA\n         DC    XL2'0015'        TEXT KEY\n         DC    XL2'0001'        TEXT NUMBER\n         DC    AL2(L'DYNAT2)    LENGTH OF TEXT\nDYNAT2   DC    C'SYSALLDA'      UNIT\n*\nDYNAT3P  DS    0C               DISP=OLD\n         DC    XL2'0004'        TEXT KEY\n         DC    XL2'0001'        TEXT NUMBER\n         DC    AL2(L'DYNAT3)    LENGTH OF TEXT\nDYNAT3   DC    X'01'            DISP\n*\nDYNAT4P  DS    0C               VOL=SER=------\n         DC    XL2'0010'        TEXT KEY\n         DC    XL2'0001'        TEXT NUMBER\n         DC    AL2(L'DYNAT4)    LENGTH OF TEXT\nDYNAT4   DS    CL6              VOLSER\n*\n*        DAIRFAIL DATA\n*\n*                                DAIRFAIL PARAM LIST\nDYNERBP  DS    F                 A(DYNA/DYND RB)\n         DC    A(DYNER15)        A(R15 RETURN CODE FROM DYNA/DYND)\n         DC    A(DYNEZERO)       A(IKJEFF02 OR 0)\n         DC    A(DYNEIDP)        A(DAIRFAIL PARAMETERS)\n*                                OTHER DATA\nDYNEZERO DC    A(0)              NO IKJEFF02 ADDR\nDYNER15  DS    F                 R15 RETURN CODE FROM DYNA/DYND\nDYNEIDP  DS    0XL2              PARAMETERS\n         DC    X'80'             WTP (WRITE TO PROGRAMMER) ONLY\n         DC    X'32'             SVC99 ERROR\n         TITLE 'DM999DSU - DCBS'\n         PRINT NOGEN\nSYSIN    DCB   DDNAME=SYSIN,                                           X\n               DSORG=PS,                                               X\n               LRECL=80,                                               X\n               MACRF=PM,                                               X\n               RECFM=FB\nDCBJFCB  DCB   DDNAME=XXXXXXXX,                                        X\n               DSORG=PS,                                               X\n               EXLST=JFCBLST,                                          X\n               MACRF=GL\n         TITLE 'DSECTS'\n         DCBD  DSORG=PS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOCPROG": {"ttr": 6661, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x03\\xa3\\x03\\xa3\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 931, "newlines": 931, "modlines": 0, "user": "FILE097"}, "text": "BOOK DISK MANAGEMENT PROGRAMMER'S GUIDE\nCOVR1                 D I S K   M A N A G E M E N T\nCOVR2                    P R O G R A M M E R ' S\nCOVR3                           G U I D E\nDATE 110187\nSECTNDISK MANAGEMENT POLICY STATEMENT\nHEAD BACKGROUND\n          THIS SECTION COVERS DISK MANAGEMENT POLICIES AT PEOPLES\n     NATIONAL BANK OF WASHINGTON.  IT ADDRESSES ISSUES FROM A MANAGEMENT\n     PERSPECTIVE.  IT ADDRESSES THE GENERAL ISSUES OF THE OVERALL\n     OBJECTIVES OF THE SYSTEM.  IT ALSO INDICATES THE GENERAL METHOD\n     OF IMPLEMENTATION.  FINALLY, SHORTCOMINGS OF THE CURRENT SYSTEM\n     ARE ADDRESSED.\n\n          DASD POLICIES HAVE TWO MAIN GOALS:\n\n          1)  TO ASSURE THAT SUFFICIENT DASD EXISTS TO SATISFY THE\n              DP REQUIREMENTS.\n          2)  TO ASSURE THAT THAT DASD IS USED EFFECTIVELY.\n\n     ONE POSSIBLE PROCEDURE IS TO INSTALL LARGE QUANITITES OF DASD AND\n     SPEND NO RESOURCES MANAGING IT.  THIS PROCEDURE IS IDEAL IF DASD IS\n     CHEAP AS IT ADDRESSES THE FIRST MAIN GOAL DIRECTLY.  THE SECOND\n     GOAL IS ADDRESSED BECAUSE THE REQUIRED RESOURCE MANAGMENT RESOURCES\n     ARE SAVED.  THIS PROCEDURE IS INEFFECTIVE AS DASD IS NOT CHEAP.\n\n          THE PROCEDURE WE ARE USING IS TO CLOSELY MONITOR DASD\n     UTILIZATION AND AIM FOR HIGH DASD UTILIZATION EFFICIENCY.  THIS IS\n     DONE BY IMPLEMENTING THE FOLLOWING SUBGOALS:\n\n          A)  DIVIDE ALL STORAGE INTO POOLS BASED ON ITS UTILIZATION\n              CHARACTERISTICS.\n          B)  IMPLEMENT AN APPROPRIATE MANAGMENT STRATEGY FOR EACH\n              POOL.  EACH STRATEGY SHOULD ADDRESS THE FOLLOWING\n              OBJECTIVES:\n              A)  ONLY APPROPRIATE DATASETS SHOULD BE PLACED IN THE\n                  POOL.\n              B)  EACH DATASET SHOULD BE APPROPRIATELY SIZED AND SHOULD\n                  HAVE THE PROPER FILE CHARACTERISTICS (EG BLOCKSIZE).\n              C)  EACH DATASET SHOULD BE ACCOUNTED FOR IN TERMS OF THE\n                  APPLICATION IT SUPPORTS.\n          C)  IMPLEMENT REPORTING PROCEDURES TO:\n              D)  IDENTIFY EXCEPTIONS TO POLICIES.\n              E)  PROVIDE MANAGMENT ACCOUNTING REPORTS SO THAT THE SPACE\n                  REQUIREMENTS OF APPLICATIONS CAN BE TRACKED.\n              F)  PROVIDE CAPACITY PLANNING REPORTS THAT CAN BE USED\n                  ALONG WITH PROJECTED SPACE REQUIREMENTS TO SCHEDULE\n                  ADDITIONAL DASD AS REQUIRED.\n\n          THE SYSTEM WE HAVE INSTALLED DEPENDS ON FORMS, STAFF,\n     PROCEDURES, AND SOFTWARE.  THE FORM USED IS CALLED AN RSA (REQUEST\n     FOR SPACE ALLOCATION).  IT IS FILLED OUT, USUALLY BY A PROGRAMMER,\n     AND REQUIRES THE SIGNATURE OF A FIRST LINE SUPERVISOR.  THE FORM\n     CONTAINS THE FILE NAME, DCB INFORMATION, AND SIZE, USUALLY IN\n     NUMBER OF RECORDS.  THE SYSTEM IS ADMINISTERED BY ONE PERSON IN\n     TSD (TECHNICAL SERVICES DEPARTMENT).  THE ADMINISTRATOR PROCESSES\n     RSA'S, ALLOCATES FILES WHEN APPROPRIATE, AND REVIEWS REPORTS.  HE\n     MAY SOMETIMES BE REQUIRED TO MOVE FILES OR TAKE RECOVERY ACTION.\n     THIS DOCUMENT CONTAINS THE PROCEDURES.  THE SOFTWARE CONSISTS OF\n     IBM STANDARD UTILITIES (E.G. IDCAMS), HSM, AND THE PROGRAMS\n     INCLUDED IN THIS SYSTEM.\n\n          THIS SYSTEM ACTUALLY CONSISTS OF TWO SEMI-AUTONOMOUS SYSTEMS.\n     THE PRODUCTION DISK MANAGEMENT SYSTEM MANAGES PRODUCTION SPACE\n     (AND SOME OTHERS) AND THE TEST SYSTEM MANAGES TEST SPACE.  THE\n     BASIC ASSUMPTION BEHIND THE PRODUCTION SYSTEM IS LOW VOLATILITY.\n     BECAUSE OF THIS TIGHT CONTROLS CAN BE MAINTAINED AND HIGH\n     EFFICIENCY ACHIEVED.  THE TEST SYSTEM MUST TOLERATE MUCH MORE\n     VOLATILITY.  THIS RESULTS IN LOOSER CONTROLS AND LOWER EFFICIENCY\n     BUT RESULTS ARE STILL GOOD.\n\n          THE FOLLOWING DEFINITIONS ARE PROVIDED FOR CLARIFICATION:\n\n     TSD - TECHNICAL SERCICES DEPARTMENT.  WHEN REFERRING TO A PERSON,\n            ANYONE IN TSD.\n     S&P - SYSTEMS AND PROGRAMMING DEPARTMENT.\n     DASD MANAGEMENT - PERSON IN TSD WHOSE JOB IS TO ADMINISTER DASD.\n     OPS - COMPUTER OPERATIONS.\n     OPEARTIONS ADMINISTRATION - DEPARTMENT THAT ACTUALLY MOVES MONEY\n            IN OUR CHARGE BACK BILLING SYSTEM.\nHEAD POOLS\n          WE HAVE IDENTIFIED 7 STORAGE POOLS BASED ON THEIR USAGE\n     CHARACTERISTICS:\n\n          IPO - THIS POOL CONTAINS THE VOLUMES FOR SYSTEM MAINTENANCE\n                DATASETS.  TARGET UTILIZATION IS 85%-90%.\n          ONL - THIS POOL CONTAINS THE VOLUMES FOR PRODCICS PRODUCTION\n                ONLINE DATASETS.  TARGET UTILIZATION IS 85%-90%.\n          PRD - THIS POOL CONTAINS THE VOLUMES FOR PRODUCTION DATASETS\n                (EXCEPT ONLINE).  TARGET UTILIZATION IS 85%-90%.\n          SYS - THIS POOL CONTAINS VOLUMES AND DATASETS REQUIRED FOR THE\n                SYSTEM AS A WHOLE.  TARGET UTILIZATION IS 85%-90%.\n          TMP - THIS POOL CONTAINS VOLUMES OF TEMPORARY DASD THAT ARE\n                USED FOR WORK OR UTILITY FILES WITHIN A JOB.  THIS POOL\n                HAS NO SPECIFIC TARGET UTILIZATION.\n          TST - THIS POOL CONTAINS THE VOLUMES FOR TEST/DEVELOPMENT\n                DATASETS.  TARGET UTILIZATION IS 80%-85%.\n          RSV - THIS POOL CONTAINS RESERVE VOLUMES NOT CURRENTLY IN\n                USE.  NORMALLY THESE VOLUMES ARE EMPTY BUT THEY MAY\n                BE LOANED OUT ON A TEMPROARY BASIS FOR 'EMERGENCIES'.\n\n          IBM RECOMMENDS A TYPICAL UTILIZATION OF 85% FOR DASD.  THIS\n     ALLOWS EXPANSION ROOM FOR UNEXPECTED SITUATIONS AND REFLECTS THE\n     INCREASING DIFFICULTIES ENCOUNTERED AS A VOLUME IS FILLED\n     COMPLETELY.  THIS HAS BEEN OUR STARTING POINT.  AS WE BACAME\n     EXPERIENCED WITH THE PRODUCTION DASD MANAGMENT SYSTEM WE FELT THAT\n     WE UNDERSTOOD GROWTH PATTERNS WELL ENOUGH TO PACK THINGS TIGHTER.\n     THUS THE TARGET UTILIZATION OF 85%-90%.  TEST DASD IS MUCH MORE\n     VOLATILE.  PROGRAMMER NEEDS CHANGE RAPIDLY.  THIS LED TO THE\n     CONCLUSION THAT MORE MANOVERING ROOM WAS NECESSARY ON TEST VOLUMES\n     AS REPRESENTED BY A TARGET UTILIZATION OF 80%-85%.  TMP SPACE IS\n     THE MOST VOLATILE OF ALL.  UTILIZATION MAY CHANGE FROM NEAR 0% TO\n     NEAR 100% AND BACK TO NEAR 0% IN THE SPACE OF 15 MINUTES.\n\n          THE FOLLOWING MANAGMENT STRATEGIES ARE BEING USED:\n\n     IPO - ALL DATASETS ARE ALLOCATED BY ANY TSD STAFF FROM SPACE\n           AVAILABLE.  TRACKING, ETC. IS DONE BY THE PRODUCTION DISK\n           MANAGEMENT SYSTEM.  RSAS ARE NOT REQUIRED.\n\n     ONL - ALL DATASETS ARE ALLOCATED ON A DATASET BY DATASET BASIS.\n           INITIAL DATASET SIZING ETC. IS DONE AS PER S&P RECOMMENDED\n           VALUES FROM THE RSA.  DASD MANAGMENT DOES VOLUME SELECTION\n           AND ACTUAL ALLOCATION.  TRACKING, ETC. IS DONE VIA THE\n           PRODUCTION DISK MANAGMENT SYSTEM.  RSAS ARE REQUIRED.\n\n     PRD - ALL DATASETS ARE ALLOCATED ON A DATASET BY DATASET BASIS.\n           INITIAL DATASET SIZING ETC. IS DONE AS PER S&P RECOMMENDED\n           VALUES FROM THE RSA.  DASD MANAGMENT DOES VOLUME SELECTION\n           AND ACTUAL ALLOCATION.  TRACKING, ETC. IS DONE VIA THE\n           PRODUCTION DISK MANAGMENT SYSTEM.  RSAS ARE REQUIRED.\n\n     SYS - ALL DATASETS ARE ALLOCATED ON A DATASET BY DATASET BASIS.\n           DATASET SIZING ETC. IS DONE BY TSD BY HAND EITHER FROM IBM\n           RECOMMENDED VALUES FOR MVS DATASETS OR BASED ON EXPERIENCE\n           WITH THAT PARTICULAR FILE.  TRACKING, ETC. IS DONE VIA THE\n           PRODUCTION DISK MANAGMENT SYSTEM.  RSAS ARE REQUIRED.\n\n     TMP - ONLY TEMPORARY DATASETS ARE ALLOWED.  THIS RULE IS\n           ADMINISTERED BY MVS.  ALL NONTEMPORARY DATESETS ARE SCRATCHED\n           ONCE PER DAY BY A 'SUPERSCRATCH' UTILITY.\n\n     TST - DATASETS ARE ALLOCATED AT PROGRAMMER DISCRESSION FROM SPACE\n           AVAILABLE.  THESE VOLUMES ARE UNDER HSM CONTROL.  TRACKING,\n           ETC. IS DONE VIA THE TEST DISK MANAGEMENT SYSTEM.  RSAS ARE\n           NOT REQUIRED.\n\n     RSV - THESE VOLUMES ARE UNDER THE DIRECT CONTROL OF DASD\n           MANAGEMENT.  THEY ARE NORMALLY EMPTY.  DASD MANAGEMENT WILL\n           PERMANENTLY ASSIGN VOLUMES FROM THIS POOL TO ONE OF THE OTHER\n           POOLS ON AN AS NEEDED BASIS.  EXCESS VOLUMES REMOVED FROM\n           OTHER POOLS ARE RETURNED TO THIS POOL.  THEY MAY BE LOANED\n           OUT FOR SHORT TERMS ON AN 'EMERGENCY' BASIS AT THE\n           DISCRESSION OF DASD MANAGEMENT.  RSAS ARE NOT REQUIRED FROM\n           OPS BUT ARE REQUIRED FROM S&P.\n\n          THE FOLLOWING REPORTING STRATEGIES ARE NOW BEING USED:\n\n     IPO - PRODUCTION DISK MANAGEMENT SYSTEM.\n\n     ONL - PRODUCTION DISK MANAGEMENT SYSTEM.\n\n     PRD - PRODUCTION DISK MANAGEMENT SYSTEM.\n\n     SYS - PRODUCTION DISK MANAGEMENT SYSTEM.\n\n     TMP - THESE VOLUMES ARE NOT BEING REPORTED ON DIRECTLY.  PRODUCTION\n           PROBLEM REPORTS ARE MONITORED FOR INDICATIONS OF INSUFFICIENT\n           SPACE IN THIS POOL.  THESE VOLUMES ARE REPORTED TO OPERATIONS\n           ADMINISTRATION AS OVERHEAD AND AS FULLY IN USE FOR CHARGE\n           BACK PURPOSES.  THE 'SUPERSCRATCH' REPORT IDENTIFIES ANY\n           INCORRECT USAGE OF THESE VOLUMES.\n\n     TST - TEST DISK MANAGEMENT SYSTEM.\n\n     RSV - THESE VOLUMES ARE NOT REPORTED ON.  THESE VOLUMES ARE\n           REPORTED TO OPERATIONS ADMINISTRATION AS OVERHEAD AND AS\n           EMPTY WHETHER THEY ACTUALLY ARE OR NOT.\n\nHEAD PRODUCTION DISK MANAGEMENT REPORTING\n          STATISTICS ARE GATHERED FROM SELECTED VTOCS AND VVDSES.\n     STATISTICS ARE UPDATED ONCE PER DAY.  THE MOST IMPORTANT STATISTICS\n     ARE DATE-LAST-USED, CURRENT-ALLOCATION, AND CURRENT-USED.\n     CURRENT-USED IS USED TO MAINTAIN LOW-USED AND HIGH-USED.  EXCEPTION\n     REPORTS ARE GENERATED WHENEVER AN OLD DATASET DISAPPEARS OR A NEW\n     DATASET APPEARS.  THIS ALLOWS US TO INSURE THAT ONLY APPROVED\n     DATASETS RESIDE ON THE VOLUMES.\n\n          AN ACCOUNTING FIELD IS MAINTAINED BY DISK MANAGEMENT FOR EACH\n     FILE IN THE DATABASE.  A MONTHLY REPORT IS GENERATED FOR OPERATIONS\n     ADMINISTRATION SORTED BY ACCOUNTING CATEGORY SHOWING CURRENT USAGE\n     IN TRACKS.  A VARIATION OF THIS REPORT IS SENT TO DISK MANAGEMENT.\n     THE DISK MANAGEMENT REPORT SHOWS MONTH TO MONTH DIFFERENCES.  THIS\n     ALLOWS DISK MANAGEMENT TO MONITOR UTILIZATION CHANGES AND TRACK\n     EXPECTED VERSUS ACTUAL FOR CAPACITY PLANNING PURPOSES.\n\n          A WEEKLY REPORT IS GENERATED FOR DISK MANAGMENT SHOWING:  (1)\n     OVER-ALLOCATED DATASETS, (2) UNDER-ALLCOATED DATASETS, (3) EXPIRED\n     DATASETS, (4)  EMPTY DATASETS, (5) OVER-UTILIZED VOLUMES, AND (6)\n     UNDER-UTILIZED VOLUMES.\nHEAD TEST DISK MANAGEMENT REPORTING\n          STATISTICS ARE GATHERED FROM SELECTED VTOCS AND VVDSES AND THE\n     HSM MCDS.  STATISTICS ARE UPDATED ONCE PER WEEK.  THE MOST\n     IMPORTANT STATISTICS ARE DATE-LAST-USED, CURRENT-ALLOCATION, AND\n     CURRENT-USED.  A REPORT IS ORGANIZED AROUND HIGH LEVEL QUALIFIER IN\n     THE FILE NAME.  REPORTS ARE SENT WEEKLY TO EACH PROGRAMMER LISTING\n     EACH FILE ALONG WITH ITS CURRENT STATISTICS.  TOTAL ALLOCATED AND\n     USED ARE COMPUTED FOR EACH HIGH LEVEL QUALIFIER.  THE REPORT\n     INCLUDES MIGRATED FILES.  HSM PARAMETERS HAVE BEEN SET TO MOVE\n     FILES TO LEVEL 1 DISK AFTER 8 DAYS AND LEVEL 2 TAPE AFTER 45.\n     IF A FILE HAS NOT BEEN USED FOR 180 DAYS A COMMAND IS SENT TO\n     HSM TO DELETE THE FILE.  A WARNING MESSAGE IS INCLUDED IN THE\n     PROGRAMMER'S REPORT APPROXIMATELY 30 DAYS BEFORE THE FILE IS\n     TO BE DELETED.  THE FILE CAN BE SAVED SIMPLY BY REFERENCING IT.\n\n          AN ACCOUNTING FIELD IS MAINTAINED IN A CONTROL FILE BY DISK\n     MANAGEMENT FOR EACH HIGH LEVEL QUALIFIER.  THE SAME CONTROL FILE\n     ALSO INCLUDES THE OWNING PROGRAMMER (ALL FILES WITH THE SAME HIGH\n     LEVEL QUALIFIER ARE ASSUMED TO BELONG TO THE SAME PROGRAMMER) AND\n     REPORT DISTRIBUTION INFORMATION.  A MONTHLY REPORT IS GENERATED FOR\n     OPERATIONS ADMINISTRATION SORTED BY ACCOUNTING CATEGORY SHOWING\n     CURRENT USAGE IN TRACKS.  A VARIATION OF THIS REPORT IS SENT TO\n     DISK MANAGEMENT.  THE DISK MANAGEMENT REPORT SHOWS MONTH TO MONTH\n     DIFFERENCES.  THIS ALLOWS DISK MANAGEMENT TO MONITOR UTILIZATION\n     CHANGES AND TRACK EXPECTED VERSUS ACTUAL FOR CAPACITY PLANNING\n     PURPOSES.\n\n          DISK MANAGEMENT GETS A COMPLETE 'MASTER LIST' OF THE WEEKLY\n     PROGRAMMER REPORTS.  DISK MANAGEMENT RUNS A SAS REPORT (NOT\n     INCLUDED) THAT REPORTS ON TEST PACK UTILIZATION.  THIS REPORT\n     USES THE TEST MASTER FILE AS ITS SOURCE.\nHEAD SHORTCOMINGS\nINDEXCOVERAGE\n         1)  ISSUE - THE TMP POOL IS NOT COVERED.\n             RESPONSE - THERE IS NO WAY TO SYSTEMATICALLY TRACK TEMP\n             SPACE DUE TO ITS VOLATILITY.  HOWEVER, DUE TO THE SMALL\n             AMOUNT OF SPACE INVOLVED (3 VOLUMES) AND THE SMALL AMOUNT\n             OF EFFORT REQUIRED BY THE CURRENT MANUAL PROCEDURES FURTHER\n             EFFORTS AT AUTOMATION ARE NOT JUSTIFIED FOR THIS POOL.\n\n         2)  ISSUE - SAS FILES ARE NOT BEING MIGRATED BY HSM\n             RESPONSE - SAS FILES ARE NOT BEING MIGRATED BECAUSE HSM\n             DOES NOT MIGRATE THEM PROPERLY.  THE TEST DISK MANAGEMENT\n             SYSTEM SHOULD BE UPGRADED TO DELETE THESE FILES IF THEY\n             MEET THE AGE REQUIREMENT.\n\n         3)  ISSUE - VSAM FILES ARE NOT BEING MIGRATED BY HSM\n             RESPONSE - VSAM FILE MIGRATION WAS NOT SUPPORTED BY HSM.\n             THE POLICY OF NOT MIGRATING VSAM FILES WAS CONTINUED\n             BECAUSE OF A REQUEST BY S&P.  THIS IS MOTIVATED BY A\n             SHORTAGE OF TEST TAPES.  S&P ARGUES THAT THEY DO NOT HAVE\n             ADAQUATE TEST TAPES TO BACK UP VSAM FILES.  MIGRATION WILL\n             BE TURNED ON WHEN THE TEST TAPE SHORTAGE IS RELIEVED.  THE\n             TEST DISK MANAGEMENT SYSTEM SHOULD BE UPGRADED TO DELETE\n             THESE FILES IF THEY MEET THE AGE REQUIREMENT.\nINDEXCOMPLETENESS -\n         4)  ISSUE - BAD BLOCK SIZES ARE NEITHER REPORTED NOR FIXED\n             RESPONSE - SOFTWARE PRODUCTS ARE NOW AVAILABLE THAT\n             FIX BLOCK SIZES AS THE FILES ARE CREATED.  ONE OF\n             THESE PRODUCTS SHOULD BE INSTALLED.\nINDEXEFFICIENCY\n         5)  ISSUE - FILE RESIZING TAKES TOO MUCH MANUAL EFFORT\n             RESPONSE - THREE PROCEDURES ARE CURRENTLY IN PLACE FOR\n             MOVING OR CHANGING CHARACTERISTICS OF A FILE:\n\n             (A)  THE IBM DASD MIGRATION AID,\n             (B)  A TSD WRITTEN \"TRIM\" UTILITY PROGRAM,\n             (C)  BY HAND.\n\n             OPTION (C) IS VERY LABOR INTENSIVE BUT WORKS FOR ALL KINDS\n             OF FILES BUT IS VERY LABOR INTENSIVE.  OPTION (B) IS VERY\n             EFFICIENT AS IT IS AUTOMATIC BUT ONLY FIXES SPACE PROBLEMS\n             AND ONLY HANDLES FB AND VB FILES.  OPTION (A) IS A SLIGHT\n             LABOR IMPROVEMENT OVER OPTION (C) BUT IS LESS FLEXIBLE THAN\n             OPTION (C).  THE RECOMMENDATION IS TO ENHANCE THE TRIM\n             UTILITY TO HANDLE MORE KINDS OF FILES AND MORE KINDS OF\n             PROBLEMS.\n\n         6)  ISSUE - WHAT ABOUT SIZING FOR TEST FILES\n             RESPONSE - HSM RESIZES FILES WHEN THEY ARE RECALLED\nSECTNIMPLEMENTATION OVERVIEW\nHEAD ADDITIONAL POLICIES\n          A DISK MANAGEMENT SYSTEM DOES NOT EVOLVE IN A VACUUM.  IT IS\n     PART OF A LARGER ENVIRONMENT.  PARTLY THE DISK MANAGEMENT SYSTEM\n     EVOLVES IN REACTION TO HOW THE REST OF THE ENVIRONMENT WORKS AND\n     SOMETIMES THE ENVIRONMENT IS CHANGED TO FACILITATE DISK MANAGEMENT.\n     LET ME LIST SOME OF THE POLICIES AND PROCEDURES THAT IMPACT ON\n     HOW OUR DISK MANAGEMENT SYSTEM WORKS.\nINDEXVOLUME POOLS\n          ALL OF OUR DASD IS DIVIDED INTO POOLS.  THIS IS DONE AT THE\n     VOLUME LEVEL.  NO VOLUME HAS DATA THAT BELONGS TO MORE THAN ONE\n     POOL.  THIS SOMETIMES RESULTS IN AN UNDERUTILIZED VOLUME AS NOT ALL\n     OF A VOLUME MAY BE NEEDED AT ONCE.  THE SOLE EXCEPTION TO THIS RULE\n     IS THAT SOME SYSTEM FILES (PAGE DATA SETS AND CATALOGS) ARE ON PRD\n     POOL PACKS.  THIS HAS NOT CAUSED US PROBLEMS BECAUSE BOTH THE SYS\n     AND PRD POOLS ARE MANAGED BY THE PRODUCTION DISK MANAGEMENT SYSTEM.\nINDEXSTATIC ALLOCATION FOR PRODUCTION\n          AS FAR AS POSSIBLE WE PERMANANTLY (STATICALLY) ALLOCATE ALL\n     PRODUCTION FILES.  PRODUCTION JCL USES DISP=OLD OR DISP=SHR.\n     DISP=NEW IS AVOIDED WHENEVER POSSIBLE.  THE SOLE EXCEPTION TO THIS\n     RULE IS DISK GDGS.  DISK GDGS ARE STRONGLY DISCOURAGED.  WE HAVE\n     FOUND, HOWEVER, THAT THEY ARE REQUIRED IN SOME CASES FOR IMS LOGS\n     AND FOR CERTAIN DATA COLLECTION TASKS THAT RUN A VARIABLE NUMBER OF\n     TIMES PER DAY.\n\n          THIS POLICY IS KEY TO OUR PRODUCTION DISK MANAGEMENT SYSTEM.\n     BECAUSE OF IT VTOC INFORMATION ON ALL PRODUCTION FILES IS ALWAYS\n     AVAILABLE.  THIS ALLOWS US TO CATCH REF DATE AND ALLOCATION\n     INFORMATION FROM A DAILY VTOC SCAN.\n\n          THIS POLICY IS ENFORCED FOR FILES THAT ARE USED EVEN AS LITTLE\n     AS ONCE PER YEAR.  WE HAVE FOUND THAT OUR DASD USAGE PEAKS,\n     TYPICALLY AT YEAR END.  IT IS SEDUCTIVE TO THINK THAT IT IS A GOOD\n     IDEA TO ALLOCATE LOW USAGE FILES ON AN AS NEEDED BASIS.  THE\n     PROBLEM IS THAT LOW USAGE FILES ARE ALL NEEDED AT THE SAME TIME.\n     YEAR END IS THE TIME THAT OUT OF SPACE CONDITIONS CAN BE LEAST\n     AFFORDED.  THE BEST WAY TO INSURE THAT YOU HAVE ENOUGH SPACE AT\n     YEAR END IS TO LEAVE THESE FILES OUT THERE.  THINK OF THEM AS PLACE\n     HOLDERS THE REST OF THE YEAR.  IF YOU ARE UNCOMFORTABLE WITH THIS\n     CONSIDER PLACING THE FILE ON TAPE.  WE HAVE FOUND THAT WE ALSO HAVE\n     A TAPE DRIVE PROBLEM AT YEAR END.  WE HAVE ALSO FOUND THAT MOST OF\n     OUR DATA IS USED DAILY.  THE LESS FREQUENTLY USED FILES TAKE UP A\n     RELATIVELY SMALL AMOUNT OF SPACE AND GUARANTEE SMOOTH SAILING\n     DURING HIGH ACTIVITY PERIODS.\nINDEXACCOUNTING\n          WE USE TWO METHODS FOR COST ALLOCATION/ACCOUNTING.  WE\n     GENERALLY USE A THREE LETTER APPLICATION CODE IN MOST CASES.  IN\n     THE REMAINING CASES WE USE A THREE DIGIT DEPARTMENT CODE.  THIS\n     FIELD MAY REQUIRE CHANGE/EXPANSION IN YOUR SYSTEM.\n\n          THE PRODUCTION DISK MANAGEMENT SYSTEM CONTAINS ONE RECORD FOR\n     EACH FILE.  WE HAVE ASSIGNED A THREE CHARACTER FIELD FOR\n     ACCOUNTING.  THIS IS FILLED IN BY HAND BY DISK MANAGEMENT.  THIS\n     MEANS THAT THERE IS NO DATA SET NAME DEPENDENCY IN ACCOUNTING FOR\n     SPACE ON THE PRODUCTION DISK MANAGEMENT SYSTEM.\n\n          THE TEST DISK MANAGEMENT SYSTEM HAS A CONTROL FILE.  THIS FILE\n     HAS ONE RECORD FOR EACH POSSIBLE HIGH LEVEL QUALIFIER THAT MAY BE\n     FOUND ON A TEST PACK.  THIS RECORD ALSO CONTAINS A THREE BYTE\n     ACCOUNTING CODE THAT IS FILLED IN BY HAND.  THIS MEANS THAT ALL\n     FILES ON A TEST PACK WITH THE SAME HIGH LEVEL QUALIFIER WILL BE\n     ASSIGNED TO THE SAME ACCOUNTING CODE.  THUS, THERE IS SOME DATA SET\n     NAME DEPENDENCY IN ACCOUNTING IN THE TEST DISK MAANGEMENT SYSTEM.\nINDEXDASD DEVICE TYPES\n          WE HAVE NEARLY ALL 3380 DASD.  WE HAVE A FEW 3350 DASD.  BOTH\n     THE PRODUCTION AND TEST DISK MANAGEMENT SYSTEMS DO THEIR SPACE\n     ACCOUNTING IN TRACKS.  WE CURRENTLY INGORE THE DIFFERENCES BETWEEN\n     A 3380 AND A 3380-E.  THIS IS A SMALL MATTER.  HOWEVER, WE ALSO\n     IGNORE THE DIFFERENCES BETWEEN A 3350 AND A 3380.  THIS IS A MUCH\n     GREATER MATTER.  WE JUSTIFY IT ON THE BASIS THAT WE ONLY HAVE A FEW\n     3350'S.  THE REAL REASON IS THE FACT THAT IT WOULD TAKE MORE WORK\n     TO CONVERT EVERYTHING TO BYTES AND IT WOULD ALSO RESULT IN MORE\n     CONFUSION IN THE REPORTING.\nINDEXUSER POPULATION\n          WE ARE A COMMERCIAL SHOP THAT DOES NO STUDENT/SERVICE BUREAU\n     BUSINESS.  ALL SYSTEM USERS ARE EMPLOYEES WITH A RELATIVELY LOW\n     TURNOVER.  APPLICATIONS ARE ADDED AND REMOVED AT A LOW RATE.  THIS\n     MEANS THAT WE CAN IGNORE SMALL PERTURBATIONS.  WE ONLY SCAN\n     PRODUCTION VTOCS DAILY AND TEST VTOCS WEEKLY.  BILLING IS BASED ON\n     A SINGLE SNAPSHOT TAKEN AT THE END OF THE MONTH.\n\n          THIS HAS PROVED ADAQUATE FOR OUR NEEDS.  IF YOU NEED TO BILL\n     FOR FILES THAT HAVE ONLY A SHORT LIFETIME OR YOU NEED TO BE ABLE TO\n     ADD APPLICATIONS AND USERS QUICKLY THIS SYSTEM WILL NOT SUIT YOUR\n     NEEDS.\nINDEXENFORCEMENT\n          A SECOND EFFECT OF WHO OUR USER POPULATION IS COMES IN THE\n     ENFORCEMENT AREA.  WE HAVE FOUND THAT WE DO NOT NEED ACTIVE\n     ENFORCEMENT OF POLICIES.  OUR ENFORCEMTNT METHODOLOGY IS BASED ON\n     CATCHING PEOPLE AFTER THE FACT.  IF A PROGRAMMER ALLOCATES A\n     FILE ON A PRODUCTION PACK THE SYSTEM DOES NOT STOP HIM.  BUT THE\n     SYSTEM DOES REPORT THE ACTIVITY A DAY LATER WHEN THE PRODUCTION\n     DISK MANAGEMENT SYSTEM RUNS.  AT THIS POINT A STERN WARNING USUALLY\n     SUFFICES.  THIS GIVES US TREMENDOUS FLEXIBILITY IN EMERGENCY\n     SITUATIONS.  NEARLY ANY RULE CAN BE BROKEN IF NECESSARY.  WE HAVE\n     NOT INSTALLED ANY ALLOCATION EXITS NOR DO WE USE ESOTERIC NAMES\n     FOR OUR DASD POOLS.  THE POOL DEFINITIONS ARE MAINTAINED IN\n     CONTROL CARD FILES IN THE SYSTEMS OR IN HSM PARMS.  THESE ARE\n     EASILY CHANGED, REQUIRING AT MOST BRINGING HSM DOWN AND BACK\n     UP.\n\n          A POSSIBLE PROBLEM WITH THIS IS THAT WE DON'T STOP A\n     PROGRAMMER FROM GOBBLING UP A LOT OF SPACE IN A SHORT TIME.  OUR\n     RESPONSE IS THAT IF THE PROGRAMMER NEEDS THE SPACE HE NEEDS THE\n     SPACE.  OUR HSM PARAMETERS SWEEP UNUSED FILES OFF OF VOLUMES.\n     THUS, UNUSED FILES GO AWAY.  HOW MUCH SPACE PROGRAMMERS NEED IS AN\n     ETERNAL PROBLEM.  OUR POLICY IS THAT THEY NEED AS MUCH AS THEY\n     ACTUALLY USE.  IF THEY DON'T USE IT WE TAKE IT AWAY.  IF THEY USE\n     IT WE ASSUME THEY NEED IT.  THIS HAS SOLVED A BASIC DELEMA FOR US\n     BECUASE WE HAVE SOLD MANAGEMENT ON THIS ARGUMENT.  IT IS AN\n     ARGUMENT MANAGEMENT CAN UNDERSTAND.  AND WE CAN TELL MANAGEMENT HOW\n     MUCH TEST SPACE EACH APPLICATION IS USING.  THIS ALLOWS MANAGEMENT\n     THE OPPORTUNITY TO TELL A PARTICULAR APPLICATION TO CUT BACK IF\n     THEY CHOOSE.  SO FAR MANAGEMENT HAS NOT CHOSEN.  WE HAVE\n     SUCCESSFULLY JUSTIFIED INSTALLING DASD USING THESE ARGUMENTS.\nINDEXSIZE\n          WE HAVE ABOUT 6,000 PRODUCTION AND 6,000 TEST FILES.  AT ONE\n     RECORD PER FILE AND RECORD LENGTHS OF ABOUT 200 BYTES ALL OF THE\n     FILES IN THE SYSTEM ARE EASILY EDITED USING TSO/ISPF.  THUS, ALL\n     FILES ARE 100% CHARACTER DATA AND NO ELABORATE FIXIT CAPABILITY IS\n     PROVIDED.  THE ASSUMPTION IS THAT CERTAIN MAINTENANCE AND MOST\n     FIXITS CAN BE DONE SIMPLY BY TSO/ISPF EDITING THE FILE AND MAKING\n     CHANGES.\n\n          WE CURRENTLY HAVE 8 VOLUMES OF 3350, 84 VOLUMES OF 3380 AND 20\n     VOLUMES OF 3380-E.  THE PRODUCTION DISK MANAGEMENT SYSTEM'S\n     CUMULATIVE RUN TIME IS 33 MINUTES INCLUDING WEEKLY PROCESSING,\n     MONTHLY PROCESSING, AND FILE BACKUPS.  IT IS RUN AT NOON DAILY,\n     USUALLY AGAINST ONLINE AND TESTING LOAD.  THE TEST DISK MANAGEMENT\n     SYSTEM TAKES ABOUT 14 MINUTES.  IT IS RUN ON SUNDAY NIGHT WITH NO\n     SIGNIFICANT OTHER LOAD.  BOTH ARE RUN ON A 3083 UNDER MVS/SP JES3.\n     ACTUAL END TO END RUN TIME IS LESS DUE TO JOB OVERLAPS.  BETWEEN\n     THEM THEY PROCESS EVERYTHING EXCEPT 3 TMP AND 3 RSV VOLUMES.\nINDEXHSM\n          WE HAVE FOUND HSM MIGRATION FACILITIES TO BE VERY WILL SUITED\n     TO ASSIST IN TEST SPACE MANAGEMENT.  WE USUALLY GET GOOD\n     COMPRESSION AND RECALL TIME IS REASONABLE FROM DISK.  WE SEND\n     PROGRAMMERS WEEKLY REPORTS ON THEIR FILES.  THESE REPORTS INDICATE\n     WHEN FILES HAVE MOVED TO LEVEL 2 TAPE.  THE OCCASIONAL DELAY TO\n     RECALL FROM TAPE IS WELL WORTH THE SPACE TRADEOFF.\n\n          WE HAVE NOT FOUND ANY USE FOR HSM MIGRATION FACILITIES IN\n     PRODUCTION.  WE ARE MORE CONCERNED WITH INSUREING THAT THE DATA IS\n     AVAILABLE WHEN WE NEED IT.  ADDITIONALLY, MOST OF OUR PRODUCTION\n     FILES ARE USED DAILY.  BECAUSE WE KNOW WHAT IS ON A VOLUME WE CAN\n     PACK IT TIGHTER.  WE HAVE NOT FORMALLY STUDIED THE ISSUE BUT\n     BELIEVE THIS TO BE A GOOD TRADEOFF.\n\n          WE ARE NOT CURRENTLY USING THE HSM BACKUP FACILITY EITHER IN\n     TEST OR IN PRODUCTION.  WE USE THE IBM DSF PRODUCT (ADRDSSU)\n     EXTENSIVELY.  PRODUCTION FILES ARE BACKED UP ON A FILE BY FILE\n     BASIS (SEE DM999DSU FOR ADDITIONAL INFORMATION) IN THE APPLICATION.\n     WE ALSO RUN FULL VOLUME BACKUPS.  THIS GIVES US CONTROL OF WHEN THE\n     BACKUPS RUN.  WE ALSO KNOW WHERE TO GO TO FIND BACKUPS FOR A\n     PARTICULAR FILE.  WE DO FULL VOLUME BACKUPS FOR TEST PACKS.  THIS\n     SYSTEM HAS WORKED WELL FOR US AND WE HAVE NOT SERIOUSLY\n     INVESTIGATED HSM BACKUP AS AN ALTERNATIVE.\nSECTNCOMPILING\nHEAD PROGRAM LIST\n          THE FOLLOWING TABLE LISTS ALL SOURCE AND ITS CHARACTERISTICS\n\n     MOD NAME  LANG  TYPE        COMMENTS\n\n     CDMFD000  COB   COPY BOOK   PRODUCTION MASTER FILE\n     CDMFD010  COB   COPY BOOK   VTOC EXTRACT FILE\n     CDMFD020  COB   COPY BOOK   PRODUCTION VOLUME CONTROL FILE\n     CDMFD030  COB   COPY BOOK   PRODUCTION 'TRIM' CONTROL CARD FILE\n     DATCNVRT  ASM   SUBROUTINE  CONVERT BETWEEN YYDDD MMDDYY DDDDDDD\n     DM011SCR  ASM   PROGRAM     SUPERSCRATCH FOR TMP POOL\n     DM100PUP  ASM   PROGRAM     HSM MCDS EXTRACT\n     DM110PUP  ASM   PROGRAM     VTOC EXTRACT\n     DM120PUP  ASM   PROGRAM     MATCH HSM 'A' RECS TO MIGRAT VTOC RECS\n     DM130PRP  ASM   PROGRAM     MATCH 'A', 'D', AND MCDS RECS AND CAT\n                                 PRODUCE COMBINED TEST MASTER FILE\n     DM140PUP  ASM   PROGRAM     VVDS EXTRACT\n     DM150PUP  ASM   PROGRAM     UPDATE VTOC DATA FROM VVDS RECS\n     DM160PRP  ASM   PROGRAM     TEST SYSTEM PROGRAMMER REPORTS\n     DM170PRP  COB   PROGRAM     TEST SYSTEM MONTHLY BILLING RPT\n     DM190PUP  ASM   PROGRAM     SEND COMMANDS FROM CARDS TO HSM\n                                 VIA SUBROUTINE HSMXEQ\n     DM200PUP  COB   PROGRAM     PRODUCTION SYSTEM DAILY UPDATE & RPT\n     DM210PRP  COB   PROGRAM     PRODUCTION SYSTEM WEEKLY REPORTS\n                                 GENERATES 'TRIM' CONTROL CARDS\n     DM230PRP  COB   PROGRAM     PRODUCTION SYSTEM MONTHLY BILLING RPT\n     DM298PUP  ASM   PROGRAM     'TRIM' RESIZES FILES BY COPY,\n                                 DELETE, ALLOC, RESTORE\n     DM999DSU  ASM   PROGRAM     PREPROCESSOR FOR ADRDSSU\n     GETCTRL   COB   SUBROUTINE  LOCATES A CONTROL CARD\n     HSMMCDS   ASM   COPY BOOK   RECORD LAYOUT FOR HSM MCDS\n     HSMMWE    ASM   COPY BOOK   LAYOUT FOR HSM MWE CONTROL BLOCK\n     HSMXEQ    ASM   SUBROUTINE  EXECUTE HSM COMMAND; BUILD MWE AND\n                                 PASS TO HSM\n     JGDATE    ASM   SUBROUTINE  CONVERT YYDDD DATE TO MMDDYY\n     USERDUMP  ASM   SUBROUTINE  ISSUE ABEND MACRO FROM COBOL\n     VVDSLIST  ASM   PROGRAM     FORMAT AND PRINT ALL FIELDS IN ALL RECS\n                                 IN MULTIPLE VVDSS.\nHEAD COMPILE INSTRUCTIONS\n          COMPILE ALL SUBROUTINES FIRST SPECIFYING 'NCAL' ON THE\n     LINKEDIT PARM.  POINT SYSLMOD TO A CONVENIENT LIBRARY FOR\n     AUTOLINKING FROM.  COMPILE THE PROGRAMS NEXT SPECIFYING 'CAL'\n     ON THE LINKEDIT STEP AND INCLUDING THE SUBROUTINE LOAD\n     LIBRARY IN THE AUTOLINK (SYSLIB) LIST.  INCLUDE THIS\n     LIBRARY (SHAREDM.DATA) IN THE SYSLIB FOR THE COBOL PROGRAMS.\n     INCLUDE THIS LIBRARY AND THE SHARE.DATA LIBRARY FROM FILE XXX\n     IN THE MACLIB FOR THE ASSEMBLER STEPS.\n\n          ALL COBOL PROGRAMS HAVE BEEN COMPILED USING IBM ANS COBOL\n     2.4 WITH LANGLVL 2 (ANS 1974) AND NOLVL (NO FIPS CHECKING)\n     SPECIFIED.  THESE PROGRAMS HAVE NOT BEEN CHECKED WITH COBOL II.\n     THERE SHOULD BE NO PROBLEM.\n\n          SOME ASM PROGRAMS WERE COMPILED USING THE VS ASSEMBLER\n     AND SOME USING ASMH.  THERE ARE NO KNOWN ASMH DEPENDENCIES.\n     ALL RUN IN 24 BIT MODE AND SHOULD HAVE NO SP/XA DEPENDENCIES.\n     THEY HAVE NOT BEEN ASEMBLED USING AN XA SYS1.MACLIB.  IT MAY\n     BE NECESSARY TO ADD THE FOLLOWING LINE AT THE BEGINNING OF\n     SOME MODULES:\n\n              SPLEVEL SET=1\n\n     THIS MACRO CAUSES CERTAIN SYSTEM MACROS TO GENERATE MVS/SP\n     COMPATABLE PARAMETER LISTS AND EXPANSIONS.  IT WOULD NOT\n     HURT TO ADD THIS TO THE BEGINNING OF ALL MODULES BUT IT\n     MAY NOT BE NECESSARY.  SEE:  GC28-1154 - MVS/EXTENDED\n     ARCHITECTURE SUPERVISOR SERVICES AND MACRO INSTRUCTIONS FOR\n     ADDITIONAL INFORMATION ON THIS MACRO.\n\n          DM140PUP AND VVDSLIST REQUIRE AUTHORIZATION.  ADD 'AC=1'\n     TO THE LINKEDIT PARM AND MOVE THEM TO AN AUTHORIZED LIBRARY.\n     AUTHORIZATION IS NECESSARY TO OPEN THE VVDS AS A VSAM FILE.\n     FAILURE TO RUN THESE PROGRAMS AUTHORIZED WILL RESULT IN A\n     MSG IEC161I RC=199 FUNC=82 ERROR MESSAGE AND AN ABEND.  NO\n     OTHER PROGRAMS REQUIRE AUTHORIZATION.  THE SYSTEM DOES NOT\n     REQUIRE MVS MODS, SVCS, OR USER EXITS.\nHEAD PROGRAM LOGIC\n          PROGRAM LOGIC IS PRESENTED IN HIGH LEVEL FORM\nINDEXDM011SCR - SUPERSCRATCH FOR TMP POOL\n     PART       DESCRIPTION\n     -------- - INITIALIZATION -- MVS LINKAGE, OPEN SYSPRINT\n                CALLS PARM\n                CALLS TIME\n                FALL THRU TO MAINLOOP\n     MAINLOOP - MAIN LOOP -- ONCE PER DISKNN DD\n                CALLS DSKO\n                CALLS DSKP\n                CALLS DSKC\n                GOTO  EXIT\n     PARM     - PROCESS JCL PARM -- EDIT AND EXTRACT OPTIONS\n     TIME     - CALCULATE EXPIRATION DATES AND TIMES\n                CALLS DATE\n     DSKO     - OPEN NEXT DISKNN DD -- (1) CHECK TO SEE IF PRESENT\n                (2) CHECK FOR DUMMY (NULLFILE) (3) OPEN (4) PICK UP\n                UCB MOUNT (5) PICK UP UCSID\n     DSKP     - PROCESS VTOC -- LOOP THRU VTOC USING BSAM READS, FOR\n                EACH DSCB (1) IF NOT 1 OR 4 IGNORE (2) IF 4 RESET VTOC\n                EOF, IF NOT 4 (3) COMPUTE CLASS (4) CHECK FOR CATALOGED\n                (5) REFORMAT CREATE & REF DATE (6) CHECK FOR EXPIRED\n                BASED ON CLASS (7) IF SCRATCH UNCATALOG IF NECESSARY\n                (8) IF SCRATCH SCRATCH\n                CALLS ECLS\n                CALLS CKCT\n                CALLS SIZE\n                CALLS CKRF\n                CALLS AMSG\n                CALLS PRNT\n     DSKC     - CLOSE DD\n     ECLS     - EDIT TO DETERMINE CLASS -- CLASSES ARE:\n                VSAM     - CHECK DS1DSORG\n                DSORG    - (STRANGE DSORG) CHECK DS1DSORG\n                SYS      - STARTS 'SYS', NO '.T' AT +8\n                           OR 'DSCB.' OR 'CATALOG.'\n                TEMP     - STARTS 'SYS', HAS '.T' AT +8\n                           AND HAS '.V' OR '.RA' OR '.F' AT +16\n                TSO      - FIRST QUAL IS ANNNAAA.'\n                NTMP     - OTHERWISE\n     CKCT     - USE LOCATE MACRO TO DETERMINE OF CATALOGUED.\n                IF CLASS = VSAM THEN QUIT.\n                VALIDATE THAT ONLY ONE VOL AND THAT CAT VOL MATCHES\n                DSCB VOL.\n                CALLS AMSG\n     CKRF     - CHECK FOR EXPIRED.\n                IF REF DATE = 00000 OR 00001 THEN USE CREATE DATE.\n                OTHERWISE USE REF DATE.\n     CKDS     - CHECK FOR EXPIRED.\n                CHECK DATA SET NAME.\n                A PHONY DATA SET NAME HAS BEEN BUILT OF THE\n                FORM:  SYSYYDDD.THHMMSS.  WHERE THE YY, DDD, HH, MM,\n                AND SS EQUAL AN EXPIRED DATE.\n     DATE     - CONVERT DATE FROM YY.DDD FORMAT TO MM.DD.YY FORMAT.\n                USE THE 'JGDATE' EXTERNALLY LINKED SUBROUTINE.\n                VCON JGDATE\n     SIZE     - CALCULATE FILE SIZE IN TRACKS.  ZERO OUT ACCUMULATOR.\n                FIRST PROCESS EXTENTS IN FORMAT 1.  THEN, IF NECESSARY,\n                AT 'SIZELOOP' CYCLE THRU PROCESSING FORMAT 3 DSCBS.\n                USE THE 'OBTAIN' MACRO TO READ IN THE FORMAT 3'S.\n                CALLS XTNT\n     XTNT     - PROCESS A CONTIGUOUS IN CORE SET OF EXTENTS.\n                LOOP THRU EACH EXTENT SEGMENT.  SUBTRACT THE START\n                CCHH FROM THE END CCHH.\n     AMSG     - ADD A MESSAGE TO THE END OF THE 'D1ACTION FIELD'.\n                CHECK TO SEE IF MSG CAN BE ADDED TO TEXT ALREADY\n                THERE.  IF SO ADD IT AFTER A ';'.  OTHERWISE, ADD A\n                '***' TO THE END OF THE FIELD.\n     PRNT     - PRINT A LINE ON SYSPRINT.  DO A PAGE EJECT AND\n                PRINT TITLES, IF NECESSARY.\n     EXIT     - CLOSE 'SYSPRINT', RETURN TO MVS.\nINDEXDM100PUP - HSM MCDS EXTRACT\n     PART       DESCRIPTION\n     -------- - INITIALIZATION -- MVS LINKAGE.\n                OPEN EXTRACTD AND EXTRACTA.  DO A GENCB FOR MCDS.  OPEN\n                THE FILE.  DO A SHOWCB TO GET THE LRECL AND GETMAIN A\n                RECORD AREA.  DO A GENCB FOR AN RPL.\n                FALL THRU TO LOOP.\n     LOOP     - CYCLE ONCE FOR EACH RECORD.\n                READ THE NEXT RECORD.  IF ERROR GO TO LOOPGCK.\n                CHECK RECORD TYPE.  IF 'D' GO TO GETD.  IF 'A' GO TO\n                GETA.  OTHERWISE, LOOP BACK WITHOUT PROCESSING THE\n                RECORD.\n                CALLS PUTA\n                CALLS PUTD\n                GO TO EXIT\n     PUTA     - WRITE AN 'A' REC.\n     PUTD     - WRITE A 'D' REC.\n     EXIT     - RETURN TO MVS\nINDEXDM110PUP - VTOC EXTRACT\n     PART       DESCRIPTION\n     -------- - INITIALIZATION -- MVS LINKAGE.\n                OPEN FILES.  LOCATE TIOT.\n                CALLS PARMPROC.\n                FALL THRU TO MAINLOOP.\n     MAINLOOP - LOOPS THRU TIOT PROCESSING DISKXXXX DDS.\n                DO AN OPEN.  IF OK DO A PROCESS, THEN A CLOSE AND LOOP\n                BACK.\n                CALLS DSKO\n                CALLS DSKP\n                CALLS DSKC\n                GO TO EXIT\n     PARMPROC - PROCESS PARM.\n                CHECK FOR 'HSM OR 'NOSYS' AND SET APPROPRIATE SWITCHES.\n     DSKO     - OPEN THE NEXT DISKXXXX FILE.\n                CHECK IF ANY TIOT ENTRIES LEFT.  IF NOT SET RC IN R15\n                AND EXIT.  OTHERWISE, SAVE NEXT TIOT ENTRY ADDR, AND\n                CHECK IF GOOD DD NAME. IF NOT CYCLE BACK TO LABEL\n                DSKOSKIP.  OTHERWISE, RDJFCB AND DEVTYP TO PICK UP\n                CHARACTERISTICS AND OPEN.\n                CALLS SETD\n     SETD     - SET UP FOR CAMLST OR CVAF VTOC READ.\n                ISSUE CVAFTST.  IF NO VTOC INDEX SET SW FOR BSAM\n                AND ISSUE A MESSAGE.  SET END OF VTOC MBBCCHHR TO\n                HIGH-VALUES.  FOR INDEXED VTOCS, SET UP CVAF CONTROL\n                BLOCKS (BUFL, CVPL), CLEAR DSN.\n     DSKP     - LOOP PROCESSING DSCB RECORDS.\n                GET NEXT REC.  IF EOF EXIT.  IF FMT1 OR FMT4 PROCESS.\n                OTHERWISE, SKIP.  WE MAY HAVE AN ERROR IN THE MIDDLE\n                OF CVAF PROCESSING SO TO ALLOW FOR A RESTART CHECK\n                AGAINST DONE DATASETS AND SKIP IF TOO LOW.  PERFORM\n                HSM OR NOSYS TEST, IF NECESSARY.  BUILD VREC AND\n                WRITE TO EXTRACTV FILE.\n                CALLS GETD\n                CALLS DSORG\n                CALLS BLKL\n                CALLS RECFM\n                CALLS DATES\n                CALLS SIZE\n     GETD     - GET NEXT DSCB REC.\n                CHECK SW.  FOR CVAF, ISSUE CVAFSEQ.  IF NO ERROR\n                POST AND EXIT.  IF ERROR, SAVE STATUS AND RELEASE\n                BUFFERS.  IF ERROR IS EOF POST AND EXIT.  OTHERWISE,\n                RESET TO BSAM.  FALL THRU TO BSAM LOGIC.  IF BSAM\n                IF PAST END OF VTOC FORCE EOF.  ISSUE READ.  (EODAD\n                FOR BSAM DCB POINTS TO END OF DSKP).\n     DSKC     - CLOSE DISKXXXX DCB.\n     BLKL     - GET LRECL/BLKSIZE FROM FMT1 DSCB.\n     DATES    - GET CREATE/REF DATES FROM FMT1 DSCB.\n     DSORG    - CONVERT DSORG BITS TO CHARS.\n     RECFM    - CONVERT RECFM BITS TO CHARS.\n     SIZE     - CALCULATE THE FILE SIZE IN TRACKS.\n                USED IS CALCULATED USING DS1LSTAR.  IF FILE IS EMPTY\n                THIS WILL BE ZERO SO CHECK FOR THIS SPECIAL CASE.  ALSO\n                SPACE ONLY GOOD FOR PO/PS FORCE TO ALLOC FOR OTHER\n                DSORGS.  WHAT WE HAVE IS A BUNCH OF CCHH SEGMENTS.\n                SO TO CALCULATE TRKS WE NEED TO KNOW HOW MANY TRKS IN A\n                CYL.  NEXT PICK UP EXTENT COUNT AND PUT IN PRINT LINE.\n                FMT1 DSCBS HAVE THREE EXTENT SEGMENTS SO POINT TO THE\n                FIRST AND PROCESS THEM BY CALLING XTNT.  IF THAT IS\n                ALL EXIT.  OTHERWISE LOOP PROCESSING FMT3'S STARTING\n                AT SIZELOOP.  USE 'OBTAIN' TO BRING IN THE FMT3.\n                FMT3'S HAVE TWO DISCONTINUOUS EXTENT SEGMENTS SO PROCESS\n                EACH SEPARATELY.\n                CALLS XTNT\n     XTNT     - INCREMENT TRACKS ALLOCATED USING EXTENT INFO.\n                LOOP THRU EXTENTS AT XTNTLOOP.  PROCESS STARTING CCHH\n                AND ENDING CCHH TO INCREMENT ALLOCATED TRACKS.\nINDEXDM120PUP - MATCH HSM 'A' RECS TO MIGRAT VTOC\n     PART       DESCRIPTION\n     -------- - INITIALIZATION -- MVS LINKAGE.\n                OPEN FILES.  READ FIRST 'A' REC AND FIRST 'V' REC.  LOOP\n                PROCESSING RECORDS AT MAINLOOP.  IF EMPTY A CHECK FOR\n                EMTY V TOO AND EXIT IF SO.  OTHERWISE, FORCE EXTRA V REC\n                LOGIC.  IF A NOT EMPTY CHECK V.  IF V EMPTY FORCE EXTRA\n                A REC LOGIC.  IF BOTH RECS PRESENT CHECK FOR MATCH.  IF\n                EQUAL, BUILD AND WRITE MREC AND SET SWITCHES TO REREAD A\n                AND V RECS ON THE NEXT LOOP. IF MISMATCH THEN EITHER\n                EXTRA A OR EXTRA V.  IF EXTRA A THEN BUILD A REC ANYHOW\n                AND LOOP BACK AFTER MARKING A EMPTY.  IF EXTRA V THEN\n                PRINT A PREC RECORD, MARK THE V FILE EMPTY AND LOOP\n                BACK.\n                CALLS CHKA\n                CALLS CHKV\n                CALLS PRTL\n                GO TO EXIT\n     CHKA     - READ AN A REC AFTER CHECKING.\n                CHECK SW AND ISSUE A READ, IF NECESSARY.\n     CHKV     - READ A V REC AFTER CHECKING.\n                CHECK SW AND ISSUE A READ, IF NECESSARY.\n     PRTL     - PRINT A LINE.\n                ADD 1 TO LINE COUNT.  CHECK TO SEE IF EJECT NECESSARY.\n                IF SO, SKIP TO TOP OF PAGE, INCREMENT PAGE COUNT,\n                PRINT TITLES, AND RESET LINE COUNT.  IN ANY CASE PRINT\n                THE LINE.\nINDEXDM130PRP - PRODUCE COMBINED TEST MASTER FILE\n     PART       DESCRIPTION\n     -------- - INITIALIZATION -- MVS LINKAGE.\n                OPEN FILES.  READ FIRST 'A' REC. READ FIRST 'D' REC.\n                LOOP AT MAINLOOP ON EACH NEW DATA SET NAME.  CHECK\n                IF 'A' READ NECESSARY.  CHECK IF 'D' READ NECESSARY.\n                SELECT LOWEST KEY (DATA SET NAME) TO PROCESS ON THIS\n                ITERATION.  CHECK IF 'D' REC MATCHES. CHECK IF 'A'\n                REC MATCHES.  THE THREE CASES SRE BOTH AT MAINDA,\n                EXTRA 'A' AT MAINXA AND EXTRA 'D' JUST AFTER MAIND.\n                FOR EXTRA D, GENERATE A PRR2 REPORT LINE AND GENERATE\n                AN HSM 'DELETE' COMMAND.  FOR EXTRA A, GENERATE A\n                PRR1 REPORT LINE AND GENERATE AN HSM 'DELETE' COMMAND.\n                FOR BOTH PERFORM PRELIMINARY EDIT.  IF 'A' REC\n                WAS DELETED GO BACK TO MAINLOOP TO DO A REREAD TO\n                HANDLE DUPLICATE MATCHING 'A' RECS.  OTHERWISE,\n                CONTINUE EDIT CHECKS BY LOOKING AT VTOC AND CATALOG\n                INFO.  IF EVERYTHING IS OK GENERATE AN 'M' RECORD.\n                FOR ALL (EXTRA D, EXTRA A, AND BOTH PRESENT) UPDATE\n                FILE SWITCHES AND LOOP BACK.\n                CALLS CHKA\n                CALLS CHKD\n                CALLS GETK\n                CALLS GOTD\n                CALLS GOTA\n                CALLS PR2L\n                CALLS GEND\n                CALLS PR1L\n                CALLS GENA\n                CALLS EDMA\n                CALLS EDMV\n                CALLS EDMC\n                CALLS GENM\n                CALLS UPDK\n     CHKA     - READ A REC, IF NECESSARY.\n                CHECK STATUS SW AND ISSUE READ, IF NECESSARY.  SEQUENCE\n                CHECK THE RECORD AGAINST THE PREVIOUS ONE.\n     CHKD     - READ D REC, IF NECESSARY.\n                CHECK STATUS SW AND ISSUE READ, IF NECESSARY.  SEQUENCE\n                CHECK THE RECORD AGAINST THE PREVIOUS ONE.\n     GETK     - SELECT THE MASTER KEY (DATA SET NAME).\n                CHECK THE D KEY AND THE A KEY.  SELECT THE LOWEST.\n                IF BOTH FILES ARE AT EOF EXIT.\n                GO TO EXIT\n     UPDK     - UPDATE FILE SWITCHES FROM MASTER KEY.\n                FOR 'A' KEY AND 'D' KEY, IF IT MATCHES THE MASTER KEY\n                SET FILE SW TO FORCE READ.\n     GOTD     - DO WE HAVE A 'D' REC?\n                IF 'D' KEY MATCHES MASTER KEY SET SW.\n     GOTA     - DO WE HAVE A 'A' REC?\n                IF 'A' KEY MATCHES MASTER KEY SET SW.\n     EDMA     - PRELIM EDIT.\n                IF 'D' KEY AND 'A' KEY MATCH THEN EXIT. OTHERWISE, CHECK\n                'A' VOLSER.  THIS COMES FROM MIG VOL VTOCS.  BLANKS\n                MEANS NO DSN.  THIS IS OK IF FILE IS A LEVEL 2 TAPE.\n                SO, IF VOLSER NOT BLANK WE HAVE AN ERROR.  GENERATE AN\n                MMA3 REPORT REC.  SET SW FOR PRELIM EDIT ERROR.\n                GENERATE AN HSM 'DELETE' COMMAND.  CHECK TO SEE IF D REC\n                AND A REC DON'T MATCH.  IF THEY DON'T AND CURRENT 'A'\n                REC IS LOWER SET UP FOR REREAD SO WE CAN TRY THE NEXT\n                'A' REC.  FOR BLANK VOLSER, GENERATE AN MMA1 REPORT REC,\n                POST SW TO ERROR.  CHECK TO SEE IF D REC AND A REC DON'T\n                MATCH.  IF THEY DON'T AND CURRENT 'A' REC IS LOWER SET\n                UP FOR REREAD SO WE CAN TRY THE NEXT 'A' REC.\n     EDMV     - VTOC EDIT.\n                SET SW TO INDICATE ERROR.  IF PRELIM EDIT HAD AN ERROR\n                THEN EXIT.  OTHERWISE, CHECK VOLSER.  IF BLANKS THEN\n                SHOULD BE 'TAPE' MIGRAT.  FOR IN VTOC, CHECK HSM 'DISK'.\n                IF NOT, GENERATE MMV3 REPORT REC AND EXIT.  IF OK CHECK\n                TO SEE IF VOLSER MATCHES.  IF NOT, GENERATE MMV1\n                REPORT REC AND EXIT.  IF OK THEN SET SW TO INDICATE VTOC\n                GOOD AND EXIT.  FOR NOT IN VTOC, CHECK FOR HSM 'TAPE'.\n                IF NOT GENERATE  MMV2 REPORT REC AND EXIT.  IF OK THEN\n                SET SW TO INDICATE VTOC GOOD AND EXIT.\n     EDMC     - CATALOG EDIT.\n                SET SW TO INDICATE ERROR.  IF PRELIM EDIT OR VTOC\n                EDIT PROBLEMS THEN EXIT.  CHECK TO SEE IF CATALOGUED.\n                IF NOT GENERATE MMC1 REPORT REC AND EXIT.  IF OK\n                CHECK CATALOG VOLSER FOR 'MIGRAT'.  IF NOT GENERATE\n                MMC2 REPORT REC AND EXIT.  IF OK THEN SET SW TO INDICATE\n                CATALOG GOOD AND EXIT.\n                CALLS CKCT\n     CKCT     - CHECK CATALOG.\n                ISSUE LOCATE MACRO TO ACCESS CATALOG.  IF PRESENT SET\n                RETURN CODE (R15) TO 0.  OTHERWISE, SET RETURN CODE TO\n                4.\n     GENA     - GENERATE HSM 'DELETE' COMMAND FOR 'A' REC.\n                IF DSN NOT BLANK GENERATE A CRDA REC.\n     GEND     - GENERATE HSM 'DELETE' COMMAND FOR 'D' REC.\n                GENERATE A CRDD REC.\n     GENM     - GENERATE AN 'M' REC.\n     PR1L     - PRINT A LINE TO THE REPORT 1 FILE.\n                ADD 1 TO THE LINE COUNT.  IF TOO HIGH SKIP TO TOP\n                OF PAGE, GENERATE TITLES, AND RESET LINE COUNT.  IN ANY\n                CASE, PRINT HTE LINE.\n     PR2L     - PRINT A LINE TO THE REPORT 2 FILE.\n                ADD 1 TO THE LINE COUNT.  IF TOO HIGH SKIP TO TOP\n                OF PAGE, GENERATE TITLES, AND RESET LINE COUNT.  IN ANY\n                CASE, PRINT HTE LINE.\n     PR5L     - PRINT A LINE TO THE REPORT 5 FILE.\n                ADD 1 TO THE LINE COUNT.  IF TOO HIGH SKIP TO TOP\n                OF PAGE, GENERATE TITLES, AND RESET LINE COUNT.  IN ANY\n                CASE, PRINT HTE LINE.\nINDEXDM140PUP - VVDS EXTRACT\n     PART       DESCRIPTION\n     -------- - INITIALIZATION -- MVS LINKAGE.\n                OPEN FILES.  LOCATE TIOT.  LOOP AT TIOTLOOP PROCESSING\n                VVDSXXXX DDS.  ON EACH DD CHECK DDNAME FOR VVDSXXXX.\n                IF NOT GO ON TO THE NEXT DD.  AT END OF TIOT EXIT.\n                IF DDNAME OK OPEN THE FILE, PROCESS IT, CLOSE IT, AND\n                LOOP BACK.\n                CALLS SCAN\n                GO TO EXIT\n     SCAN     - SCAN THE FILE.\n                PROCESS THE VVCR.  PROCESS THE SELF DEFINING VVR.\n                LOOP AT SCANLOOP PROCESSING THE REMAINING VVR RECORDS.\n                READ THE RECORD.  IF EOF, EXIT.  IF 'Z' REC, PROCESS.\n                IF 'Q' REC, PROCESS.  IN ANY CASE LOOP BACK.\n                CALLS GETV\n                CALLS SVVR\n                CALLS PVRZ\n                CALLS PVRQ\n     SVVR     - PROCESS SELF DEFINING VVR REC.\n                CHECK THAT IT'S A Z REC.  CHECK THAT IT'S A 'SELF\n                DEFINING'.  PICK UP VOLSER.  PROCESS AS 'Z' REC'.\n     PVRQ     - NOW A NOP.\n     PVRZ     - PROCESS Z RECS.\n                PROCESS 'E9' CELL.  PROCESS '21' CELL.  PROCESS '60'\n                CELL.  PROCESS '23' CELL.  WRITE 'E' REC.\n                CALLS PCE9\n                CALLS PC21\n                CALLS PC60\n                CALLS PC23\n                CALLS PUTE\n     PC21     - NOW A NOP.\n     PC23     - PROCESS '23' CELL.\n                PICK UP BYTES PER TRACK.  IF NOT ZERO EXIT.  OTHERWISE,\n                PICK UP BLKSIZE AND BLKS/TRK AND CALCULATE BYTES/TRK.\n                IN ANY CASE, PICK UP NUMBER OF EXTENTS, HIGH ALLOC RBA,\n                AND HIGH USED RBA.\n     PC60     - PROCESS '60' CELL.\n                PICK UP CONTROL INTERVAL SIZE AND MAX LRECL.\n     PCE9     - PROCESS 'E9' CELL.\n                PICK UP DATA SET NAME.\n     GETV     - GET NEXT VVR REC.\n                GET NEXT REC.  IF EOF THEN SET SW.\n     PUTE     - WRITE 'E' REC.\n                CALCULATE ALLOCATED.  ROUND UP FOR PART OF TRK.\n                CALCULATE USED.  ROUND UP FOR PART OF TRK.  WRITE REC.\nINDEXDM150PUP - UPDATE VTOC DATA FROM VVDS RECS\n     PART       DESCRIPTION\n     -------- - INITIALIZATION -- MVS LINKAGE.\n                OPEN FILES.  READ FIRST 'D' REC.  READ FIRST 'V' REC.\n                LOOP ON MAINLOOP PROCESSING DATA SET NAMES.  GET\n                MASTER KEY (LOWEST OF 'D' AND 'V' KEY).  IF EOF ON\n                BOTH FILES EXIT.  WE EITHER HAVE AN EXTRA 'D' AN\n                EXTRA 'V' OR A MATCH.  ON MATCH, BUILD AN 'M' REC,\n                FIX REF DATE, WRITE THE 'M' REC, AND GET NEW 'V'\n                AND 'D' RECS.  FOR EXTRA 'D', IF DSORG = 'VS '\n                DO A D REPORT AND CONTINUE EXTRA D PROCESSING.  PUT\n                OUT AN M REC AND READ A NEW D REC.  FOR EXTRA 'V', DO\n                A V REPORT AND READ A NEW V REC.\n                CALLS GETD\n                CALLS GETV\n                CALLS GKEY\n                GO TO EXIT\n                CALLS FIXR\n                CALLS PUTM\n                CALLS RPTD\n                CALLS RPTV\n     GETD     - GET NEXT 'D' REC.\n                READ REC.  IF EOF, DONE.  IF FIRST REC, SKIP SEQUENCE\n                CHECK.  CHECK THAT DATA SET NAME AND VOLSER ARE IN\n                SEQUENCE.\n     GETV     - GET NEXT 'V' REC.\n                READ REC.  IF EOF, DONE.  IF FIRST REC, SKIP SEQUENCE\n                CHECK.  CHECK THAT DATA SET NAME AND VOLSER ARE IN\n                SEQUENCE.\n     PUTM     - WRITE 'M' REC.\n     GKEY     - GET MASTER KEY.\n                GET LOWER OF 'D' KEY AND 'V' KEY.  IF BOTH AT EOF\n                SET RC (R15) TO 4.  OTHERWISE, SET RC TO 0.\n     RPTV     - MAKE 'VVR' TYPE REPORT REC.\n                CALLS PUTD\n     RPTD     - MAKE 'DSCB' TYPE REPORT REC.\n                CALLS PUTD\n     PUTD     - WRITE REPORT REC.\n                USUAL PRINT LOGIC.\n     FIXR     - PROPAGATE REF DATE FROM DATA REC TO INDEX REC\n                CHECK SAVED AGAINST CURRENT DSN.  IF DIFFERENCE IS\n                'INDEX ' ON END OVERLAY REF DATE WITH SAVED REF\n                DATE (S/B FROM '...DATA' REC).  SAVE CURRENT DSN\n                AND REF DATE.\nINDEXDM160PRP - TEST SYSTEM PROGRAMMER REPORTS\n     PART       DESCRIPTION\n     -------- - INITIALIZATION -- MVS LINKAGE.\n                PROCESS PARM.  CALCULATE DATES.  OPEN FILES.  READ FIRST\n                'M' REC.  READ FIRST 'V' REC.  LOOP AT MAINLOOP ON DATA\n                SET NAME.  READ 'M' REC, IF NEXESSARY.  READ 'V' REC, IF\n                NEXESSARY.  CALCULATE MASTER KEY.  CHECK FOR LEDGER\n                BREAK.  READ 'D' REC, IF NECESSARY.  IF 'M' REC PRESENT,\n                GENERATE 'MIGRATED' REPORTS.  IF 'V' REC PRESENT,\n                GENERATE 'VTOC' REPORTS.\n     PARM     - PROCESS PARM.\n                LOOK FOR 'EXP=NNN', 'WARN=NNN', OR 'OUT=C', IN\n                ANY ORDER.  VALIDATE THAT TEXT IS CORREXT AND THAT\n                NUMBERS ARE NUMERIC.  SAVE OFF VALUES, IF FOUND.\n     DATE     - CALCULATE DATES.\n                IF WARN GREATER THAN EXP THEN ERROR.  GET CURRENT\n                DATE.  CONVERT TO DAY NUMBER.  SUBTRACT EXP TO MAKE\n                EXP DAY NUMBER.  SUBTRACT WARN TO MAKE WARN DAY NUMBER.\n     CHKT     - CHECK FOR LEDGER BREAK.\n                IF DATA SET NAME PREFIX CHANGED AND NOT FORST TIME\n                GENERATE TOTALS FOR LAST PREFIX.\n                CALLS GENT\n     CHKD     - IF PREFIX IS SAME THEN DONE.  BUILD NEW PREFIX FROM\n                MASTER KEY.  CHE  . . . TO BE CONTINUED.\nINDEXDM170PRP - TEST SYSTEM MONTHLY BILLING RPT\nINDEXDM190PUP - SEND COMMANDS TO HSM\nINDEXDM200PUP - PROD SYSTEM DAILY UPDATE & RPT\nINDEXDM210PRP - PROD SYSTEM WEEKLY REPORTS\nINDEXDM230PRP - PROD SYSTEM MONTHLY BILLING RPT\nINDEXDM298PUP - 'TRIM' RESIZES FILES\nINDEXDM999DSU - PREPROCESSOR FOR ADRDSSU\nINDEXVVDSLIST - PRINT VVDS\nHEAD SUBROUTINE LOGIC\nINDEXDATCNVRT - CONVERT BETWEEN YYDDD MMDDYY DDDDDDDD\nINDEXGETCTRL  - GET A CONTROL CARD FROM 'CTRLCTRL'\nINDEXHSMXEQ   - EXECUTE HSM COMMAND\nINDEXJGDATE   - YYDDD DATE TO MMDDYY DATE\nINDEXUSERDUMP - ISSUE ABEND MACRO FROM COBOL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DOCUSER": {"ttr": 6922, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x05\\x8e\\x05\\x8e\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 1422, "newlines": 1422, "modlines": 0, "user": "FILE097"}, "text": "BOOK DISK MANAGEMENT USER'S GUIDE\nCOVR1                 D I S K   M A N A G E M E N T\nCOVR2                          U S E R ' S\nCOVR3                           G U I D E\nDATE 110187\nSECTNJCL\nHEAD JOB FLOW\n          THE DISK MANAGEMENT SYSTEM FROM AN OPERATIONAL POINT OF VIEW\n     IS ACTUALLY TWO SEPARATE SYSTEMS, THE PRODUCTION SYSTEM AND THE\n     TEST SYSTEM.  SOME PROGRAMS ARE COMMON TO BOTH SYSTEMS AND SOME\n     PROGRAMS RUN IN ONLY ONE SYSTEM.  INCLUDED ARE COMPLETE EXAMPLES\n     OF ALL JOBS, PROCS, AND CONTROL CARD FILES REQUIRED TO RUN BOTH\n     SYSTEMS.  DM2----- JOBS, PROCS, AND CONTROL CARD MEMBERS\n     CONSTITUTE THE PRODUCTION SYSTEM.  DM3----- JOBS, PROCS, AND\n     CONTROL CARD MEMBERS CONSTITUTE THE TEST SYSTEM.  FUNCTIONS HAVE\n     BEEN BROKEN UP TO PERMIT THE MAXIMUM AMOUNT OF PARALLELISM.\nINDEXPRODUCTION FLOW\n                    P R O D U C T I O N   F L O W\n\n                               DM200RRP  (ONLY AS REQUIRED)\n                                X   X\n                               X     X\n                              X       X\n                         DM203DDM   DM206DDM\n                              X      X\n                               X    X\n                                X  X\n                               DM210DUM\n                                  X\n                                  X\n                                  X\n                               DM220WRM\n                                  X\n                                  X\n                                  X\n                               DM230MRM\n                                  X\n                                  X\n                                  X\n                               DM299DTM\nEJECT\nINDEXTEST FLOW\n                          T E S T   F L O W\n\n                               DM300RUM  (ONLY AS REQUIRED)\n                            XXXX X  X XXXX\n                       XXXXX    X    X    XXXX\n                  XXXXX        X      X       XXXX\n               DM310WDM   DM315WDM   DM330WDM   DM340WDM\n                    X      X              X      X\n                     X    X                X    X\n                      X  X                  X  X\n                   DM320WUM              DM350WUM\n                         XXX            XXX\n                            XXX      XXX\n                               X    X\n                              DM360WUM\n                               X   X\n                              X     X\n                             X       X\n                        DM370WUM   DM380WUM\n                             X      X\n                              X    X\n                               X  X\n                              DM390WTM\n\n     ALL JOBS ARE SHOWN REGUARDLESS OF WHETHER THEY ARE ALWAYS RUN.\nINDEXSCHEDULE\n     OUR STANDARD SCHEDULE IS AS FOLLOWS:\n\n          DM200RRP - RUN ONLY AS REQUIRED (FILE RESTORE FOR RERUN)\n          DM203DDM - DAILY\n          DM206DDM - DAILY\n          DM210DUM - DAILY\n          DM220WRM - WEEKLY AT A QUIET TIME (SUNDAY)\n          DM230MRM - MONTHLY\n          DM299DTM - DAILY\n\n          DM300RUM - RUN ONLY AS REQUIRED (FILE RESTORE FOR RERUN)\n          DM310WDM - WEEKLY AT A QUIET TIME (SUNDAY)\n          DM315WDM - WEEKLY AT A QUIET TIME (SUNDAY)\n          DM320WUM - WEEKLY AT A QUIET TIME (SUNDAY)\n          DM330WDM - WEEKLY AT A QUIET TIME (SUNDAY)\n          DM340WDM - WEEKLY AT A QUIET TIME (SUNDAY)\n          DM350WUM - WEEKLY AT A QUIET TIME (SUNDAY)\n          DM360WUM - WEEKLY AT A QUIET TIME (SUNDAY)\n          DM370WUM - WEEKLY AT A QUIET TIME (SUNDAY)\n          DM380MUM - MONTHLY (PICKS UP DATA FROM PREV WEEKEND RUN)\n          DM350WTM - WEEKLY AT A QUIET TIME (SUNDAY)\nHEAD SAMPLE JCL\n          SAMPLE JCL IS PROVIDED FOR ALL JOBS.  ALL JCL ASSUMES THAT\n     NO STEPLIBS ARE REQUIRED TO RUN THE PROGRAMS.  REVIEW JOB\n     CLASSES AND SYSOUT CLASSES AND CHANGE THEM TO MEET YOUR SHOP\n     STANDARDS.  ALL JOBS SIMPLY EXECUTE A CORRESPONDING PROC.  THE\n     FOLLOWING TABLE GIVES THE SPECIFICS.  THE TWO 'MBR' COLUMNS\n     INDICATE THE MEMBER NAME IN THIS PDS IN WHICH THE JCL OR\n     PROC IS STORED.\n\n          JOB       JOB MBR   PROC      PROC MBR\n\n          DM200RRP  JCLDM200  DM200P10  PRCDM200\n          DM203DDM  JCLDM203  DM203P10  PRCDM203\n          DM206DDM  JCLDM206  DM206P10  PRCDM206\n          DM210DUM  JCLDM210  DM210P10  PRCDM210\n          DM220WRM  JCLDM220  DM220P10  PRCDM220\n          DM230MRM  JCLDM230  DM230P10  PRCDM230\n          DM299DTM  JCLDM299  DM299P10  PRCDM299\n\n          DM300RUM  JCLDM300  DM300P10  PRCDM300\n          DM310WDM  JCLDM310  DM310P10  PRCDM310\n          DM315WDM  JCLDM315  DM315P10  PRCDM315\n          DM320WUM  JCLDM320  DM320P10  PRCDM320\n          DM330WDM  JCLDM330  DM330P10  PRCDM330\n          DM340WDM  JCLDM340  DM340P10  PRCDM340\n          DM350WUM  JCLDM350  DM350P10  PRCDM350\n          DM360WUM  JCLDM360  DM360P10  PRCDM360\n          DM370WUM  JCLDM370  DM370P10  PRCDM370\n          DM380MUM  JCLDM380  DM380P10  PRCDM380\n          DM390WTM  JCLDM390  DM390P10  PRCDM390\nHEAD CONTROL CARD FILES\n          SEVERAL JOBS REQUIRE PARAMETERS.  IN SEVERAL CASES ALL\n     THAT IS INVOLVED IS CONTROL CARDS FOR STAND ALONE SORTS.  THE\n     SAMPLE JCL POINTS TO MEMBERS IN THIS PDS WHICH ARE EXAMPLES.\n     FOR THE PURPOSES OF THE SAMPLE JCL THIS PDS IS ASSUMED TO\n     BE NAMED 'U220PJR.SHAREDM.DATA'.  ALL CONTROL CARD FILES ARE\n     80 BYTE CARD IMAGE FILES.  ALL PROGRAMS WILL ACCEPT ANY BLOCKING\n     THAT IS ACCEPTABLE TO MVS.  EACH FILE IS DOCUMENTED BELOW.\n     RECORD LAYOUTS, ETC. ARE PROVIDED WHERE APPROPRIATE.\nINDEXCLTDM203\n          SORT PARAMETER CARDS.\nINDEXCTLDM206\n          SORT PARAMETER CARDS.\nINDEXCTLDM220\n          DASD VOLSER ATTRIBUTE LIST.  INCLUDE ONE CARD FOR EACH VOLSER\n     TO BE FOUND IN EITHER THE TEST OR PRODUCTION SYSTEM.  CARDS MUST BE\n     IN ASCENDING ORDER BY VOLSER.  DUPLICATES ARE NOT ALLOWED BUT CARDS\n     FOR VOLSERS NOT PROCESSED ARE OK.  RECORD LAYOUT:\n\n     COLS   DESCRIPTION\n\n     01-06  VOLSER OF DASD VOLUME\n     08-14  TRACK SIZE\n     16-18  TRACKS PER CYLINDER\n     20-24  CYLINDERS PER VOLUME\n     26-28  POOL ID\n     30     SYS SWITCH   (Y/N)\n     31-80  COMMENTS\n\n          THE POOL ID IS USED TO IDENTIFY WHICH POOL A VOLUME BELONGS\n     TO.  THE DM210PRP PROGRAM IS HARD CODED TO GENERATE TOTALS BASED ON\n     THE FOLLOWING POOLS:\n\n               PRD - BATCH PRODUCTION\n               ONL - ONLINE PRODUCTION\n               SYS - SYSTEM (NUCLEUS, SPOOL, ETC. FOR PRODUCTION SYSTEM)\n               IPO - ALL DLIB FILES PLUS IPO SYSRES FILES\n\n     THE DM200PRP PROGRAM WILL IGNORE OTHER POOL IDS.  WE HAVE OTHER\n     REPORT WRITER TYPE PROGRAMS THAT USE THE OTHER POOL IDS.  THESE\n     REPORT WRITER PROGRAMS ARE NOT INCLUDED IN THIS PACKAGE.\n\n          THE SYS SWITCH IS DESIGNED TO HANDLE THE MULTIPLE SYSRES\n     SITUATION.  A PRODUCTION AND AN IPO SYSRES WILL BOTH CONTAIN A\n     'SYS1.NUCLEUS'.  THESE ARE SEPARATE DATA SETS BUT BOTH DISK\n     MANAGEMENT SYSTEMS ASSUME ALL DATA SET NAMES ARE UNIQUE.  THIS\n     ALLOWS TRACKING OF DATA SET MOVEMENT AND DETECTION OF INADVERTENT\n     DUPLICATIONS.  TO HANDLE THIS SITUATION THE SYS SWITCH CAN BE SET\n     TO 'Y' FOR ALL VOLUMES THAT PROPERLY CONTAIN DATA SETS WITH\n     DUPLICATED NAMES.  THIS WILL CAUSE THE VOLSER OF THE PACK TO BE\n     ADDED AS THE RIGHT MOST 6 CHARACTERS OF THE DATA SET NAME.  THIS\n     WILL HAVE THE EFFECT OF MAKING EACH DATA SET NAME UNIQUE.  THUS\n     THE VARIOUS COPIES OF THE DATA SET CAN BE TRACKED INDIVIDUALLY.\nINDEXCTLDM230\n          THIS IS A PARAMETER CARD USED BY THE DM230PRP PROGRAM.\n     FILE LAYOUT:\n\n     COLS   DESCRIPTION\n\n     01-04  CONSTANT - MUST BE 'CTRL'\n     05     FILLER (IGNORED - SHOULD BE SPACES)\n     06-13  CONSTANT - MUST BE 'DM230PRP'\n     14-18  FILLER (IGNORED - SHOULD BE SPACES)\n     19-26  POSSIBLE DATE - SHOULD BE 'MM/DD/YY'\n     27-46  FILLER AND SWITCHES - MUST BE SPACES\n     47-49  DEFAULT GROUP.  USED WHERE AAM IS INVALID\n            OR AAM IS NOT AVAIALBLE.\n     50-80  COMMENTS\nINDEXCLTDM310\n          SORT PARAMETER CARDS.\nINDEXCTLDM315\n          SORT PARAMETER CARDS.\nINDEXCLTDM330\n          SORT PARAMETER CARDS.\nINDEXCTLDM350\n          SORT PARAMETER CARDS.\nINDEXCTLDM380\n          THIS IS A PARAMETER CARD USED BY THE DM170PRP PROGRAM.\n     FILE LAYOUT:\n\n     COLS   DESCRIPTION\n\n     01-04  CONSTANT - MUST BE 'CTRL'\n     05     FILLER (IGNORED - SHOULD BE SPACES)\n     06-13  CONSTANT - MUST BE 'DM170PRP'\n     14-18  FILLER (IGNORED - SHOULD BE SPACES)\n     19-26  POSSIBLE DATE - SHOULD BE 'MM/DD/YY'\n     27-46  FILLER AND SWITCHES - MUST BE SPACES\n     47-49  DEFAULT GROUP.  USED WHERE AAM IS INVALID\n            OR AAM IS NOT AVAIALBLE.\n     50-80  COMMENTS\nINDEXCTLMEAAM\n          THIS TABLE IS USED TO VALIDATE OUR AAM ACCOUNTING CODES.  THE\n     TABLE MUST BE MAINTAINED IN ASCENDING ALPHABETIC ORDER BY AAM.\n     DUPLICATE AAMS ARE NOT PERMITTED.  AN AAM IS CONSIDERED INVALID IF\n     IT IS NOT IN THIS TABLE.  THIS TABLE IS ALSO USED TO TRANSLATE THE\n     AAM INTO A GROUP CODE THAT IS USED BY OUR FINANCE PEOPLE.  (SEE\n     CTLMEGRP FOR MORE ON THIS).  RECORD LAYOUT:\n\n     COLS   DESCRIPTION\n\n     01-03  AAM\n     04-05  FILLER (IGNORED - SHOULD BE SPACES)\n     06-08  GROUP CODE\n     09-80  COMMENTS\nINDEXCTLMEGRP\n          THIS TABLE DEFINES THE VALID GROUP AND TYPE CODES.  ALTHOUGH\n     THE GROUP IS REFERRED TO AS A THREE DIGIT NUMBER ELSEWHERE IT IS\n     ACTUALLY COMPOSED OF TWO PARTS.  THE FIRST TWO DIGITS ARE THE TRUE\n     GROUP.  THIS IS AKIN TO AN APPLICATION CODE.  THE LAST DIGIT IS\n     THE SUB GROUP.  THIS IS AKIN TO THE MAJOR PART OF THE AAM.  RECORD\n     LAYOUT:\n\n     COLS   DESCRIPTION\n\n     01-03  TYPE - 'TYP' FOR SUBGROUP DEFINITION\n                   'GRP' FOR GROUP DEFINITION\n     04-05  FILLER (IGNORED - SHOULD BE SPACES)\n     06-07  SUB TYPE NUMBER (01-08) OR GROUP NUMBER (01-99)\n     08-09  FILLER (IGNORED - SHOULD BE SPACES)\n     10-39  SUB TYPE DESCRIPTION OR GROUP DESCRIPTION\n     40-80  COMMENTS\n\n          IF YOU HAVE COME TO THE CONCLUSION THAT AAMS AND GROUP NUMBERS\n     REALLY PERFORM THE SAME FUNCTION YOU ARE RIGHT.  SO WHY DO WE GO\n     THRU THIS ELABORATE PROCESS OF TRANSLATING AAMS TO GROUP NUMBERS?\n     TRADITION.  THE SYSTEM WAS SET UP THIS WAY AT ONE TIME AND IT HAS\n     BEEN EASIER TO MAINTAIN IT THAN TO TALK ANYONE INTO SIMPLIFYING\n     IT.  I WOULD SUGGEST YOU CONSIDER SIMPLIFYING THINGS WHEN YOU\n     INSTALL THIS SYSTEM.  THE PROGRAMS INVOLVED ARE THE DM230PRP FOR\n     THE PRODUCTION SYSTEM AND THE DM170PRP FOR THE TEST SYSTEM.\nINDEXCTLTSOID\n          THIS TABLE ASSOCIATES ACCOUNTING INFORMATION AND DISTRIBUTION\n     INFORMATION WITH HIGH LEVEL DATA SET NAME QUALIFIERS FOR TEST\n     FILES.  FILE LAYOUT:\n\n     COLS   DESCRIPTION\n\n     01-02  FILLER (IGNORED - SHOULD BE SPACES)\n     03-10  HIGH LEVEL DATA SET NAME QUALIFIER, LEFT JUSTIFIED\n            WITH TRAILING BLANKS\n     11     FILLER (IGNORED - SHOULD BE SPACES)\n     12-39  NAME OF PERSON OR DEP'T OWNING FILES\n     40     FILLER (IGNORED - SHOULD BE SPACES)\n     41-59  REPORT DISTRIBUTION INFORMATION\n     60     FILLER (IGNORED - SHOULD BE SPACES)\n     61-63  ACCOUNTING FIELD -\n            IF ALPHABETIC THEN THREE LETTER AAM\n            IF NUMERIC THEN THREE DIGIT DEPARTMENT NUMBER\n     64     FILLER (IGNORED - SHOULD BE SPACES)\n     65-72  DD NAME OF DD STATEMENT ON WHICH REPORT WILL PRINT\n     73-80  COMMENTS\n\n          ENTRIES MUST BE IN ASCENDING ALPHABETIC ORDER BY HIGH LEVEL\n     DATA SET NAME QUALIFIER.  DUPLICATES ARE NOT PERMITTED.  EXTRA\n     ENTRIES ARE OK.  IF A HIGH LEVEL DATA SET NAME QUALIFIER IS\n     ENCOUNTERED IN THE DATA THAT IS NOT IN THE TABLE THEN THE DD\n     NAME 'ERROR   ' IS USED AND THE DM160PRP PROGRAM FILLS IN\n     DEFAULT VALUES FOR THE OTHER FIELDS IN THE TABLE.  THE ERROR DD\n     AND THE DDS SELECTED FROM THE TABLE ARE DYNAMICALLY ALLOCATED\n     SO THEY MUST NOT BE SPECIFIED IN THE JCL.\nSECT PROGRAM DOCUMENATATION\nINDEXDM011SCR - SUPERSCRATCH FOR TMP POOL\n          THIS PROGRAM IS DESIGNED TO CLEAN UP TEMP PACKS.  IT\n     LOOKS FOR OLD TEMPORARY FILES OR NON-TEMPORARY FILES THAT DO\n     NOT BELONG ON THE PACK.  THE LOGIC IS CONTROLLED BY THE PARM\n     FIELD AND BY CODING A UCS PARAMETER.\n\n          CERTAIN FILES ARE ALWAYS LEFT ALONE.  THEY ARE  FILES\n     STARTING WITH 'SYS1.', 'SYS2.', 'SYS3', 'DSCB.', 'CATALOG.',\n     AND ANY VSAM FILE.\n\n          THE PARM FIELD CAN BE USED TO SET THREE INDICATORS.\n     'RUN=TEST' OR 'RUN=REAL' CONTROLS THE OVERALL EXECUTION OF\n     THE PROGRAM.  TEST WILL CAUSE THE PROGRAM TO EXECUTE AND\n     PRODUCE A REPORT BUT NO FILE ACTION WILL ACTUALLY TAKE PLACE.\n     REAL WILL CAUSE DELETE AND UNCATALOG PROCESSING TO TAKE PLACE.\n\n          'TEMP=DD.HH' DETERMINES THE SAFETY WINDOW ON TEMP FILES.  A\n     FILE CREATED LESS THAN DD DAYS AND HH HOURS WILL BE RETAINED.  THE\n     TIME STAMP IN THE DATA SET NAME IS USED FOR THIS CHECK.  'DS=DD'\n     DETERMINES THE SAFETY WINDOW OF OTHER FILES.  A FILE CREATED LESS\n     THAN DD DAYS AGO WILL BE RETAINED.  THE LAST USED DATE IS USED FOR\n     THIS CHECK.  IF THE FILES HAS NEVER BEEN USED THEN THE CREATE DATE\n     IS USED INSTEAD.\n\n          THESE PARAMETERS MUST BE SEPARATED BY COMMAS.  THE DEFAULT\n     PARM IS 'RUN=TEST,TEMP=01.00,DS=02'.\n\n          THE UCS PARAMETER IS CODED ON DD STATEMENTS THAT POINT TO\n     THE VOLUMES TO BE PROCESSED.  IT MAY BE DIFFERENT FOR EACH DD.\n     POSSIBLE VALUES ARE:\n          UCS=NTMP - CHECK NON-TEMPORARY DATA SETS.\n          UCS=TSO  - CHECK TSO DATA SETS.\n          UCS=ALL  - CHECK NON-TEMPORARY AND TSO DATA SETS.\n\n          CODE DISKXX DDS TO INDICATE THE PACKS TO BE PROCESSED.  THE\n     FIRST DD MUST BE DISK01.  THE SECOND DD MUST BE DISK02.  THE THIRD\n     . . . , ETC.  NUMBERS MUST BE USED IN SEQUENCE.  IF YOU NEED TO\n     SKIP A NUMBER IN THE SEQUENCE INCLUDE A DD WITH THE 'DUMMY'\n     PARAMETER OR WITH 'DSN=NULLFILE'.   THIS WILL CAUSE A DD TO BE\n     SKIPPED.  FOR INSTANCE, IN THE SITUATION WHERE THE DDS ARE IN A\n     PROC AND YOU DO NOT WISH TO CHANGE THE PROC YOU CAN INCLUDE A JCL\n     OVERRIDE WITH 'DSN=NULLFILE' FOR THE DD IN THE MIDDLE OF A LIST TO\n     SKIP PROCESSING OF A VOLUME.  CODE ONLY ONE VOLUME PER DD.\n\n          TEMPORARY FILES AND TSO FILES ARE IDENTIFIED BY CERTAIN\n     CHARACTERISTICS OF THEIR DATA SET NAMES.  SEE THE PROGRAM LOGIC FOR\n     SPECIFIC DETAILS.\nINDEXDM100PUP - HSM MCDS EXTRACT\n          THIS PROGRAM SCANS THE HSM MCDS FILE LOOKING FOR 'D' (DATASET)\n     RECORDS AND 'A' (ALIAS) RECORDS.  (ALIAS IS THE NAME OF THE DATA\n     SET AFTER IT HAS BEEN MIGRATED.)  KEY FIELDS FROM EACH 'D' RECORD\n     IS PLACED IN A RECORD WRITTEN TO THE EXTRACTD FILE.  KEY FIELDS\n     FROM EACH 'A' RECORD IS PLACED IN A RECORD WRITTEN TO THE EXTRACTA\n     FILE.\n\n          THIS PROGRAM DOES NOT USE PARMS OR OPTION FILES.  IT READS\n     A VSAM FILE (DDNAME=MCDS) AND PUTS OUR TWO SEQUENTIAL FILES\n     (DDNAME=EXTRACTA AND DDNAME=EXTRACTD).  NO REPORTS ARE PRODUCED.\nINDEXDM110PUP - VTOC EXTRACT\n          THIS PROGRAM EXTRACTS DATA FROM VTOCS.  MANY VTOCS CAN BE\n     PROCESSED IN ONE EXECUTION OF THIS PROGRAM.  ONE RECORD IS PLACED\n     IN THE OUTPUT FILE (DDNAME=EXTRACTV) FOR EACH FILE LOCATED BY\n     MEANS OF A FORMAT1 DSCB.  DATA FROM MULTIPLE VTOCS IS EFFECTIVELY\n     CONCATENATED TOGETHER.\n\n          A PROCESSING OPTION IS PROVIDED VIA THE PARM FIELD.\n     PARM=HSM INDICATES THAT ONLY FILES WITH A DATA SET NAME OF THE\n     FORM *.HMIG.** SHOULD BE INCLUDED IN THE OUTPUT FILE.  A\n     PARM=NOSYS OPTION INDICATES THAT DATA SETS OF THE FORM SYS1.**\n     SHOULD BE EXCLUDED.  OMITTING THE PARM CAUSES ALL DATA SETS TO BE\n     INCLUDED.\n\n          ANY DD WITH A DDNAME OF DISKXXXX WHERE XXXX MAY BE ANY\n     CHARACTERS IS PROCESSED.  THE VTOC ON THE VOLUME POINTED TO BY\n     THE DD IS PROCESSED.  DO NOT USE A LIST IN THE VOL=SER= FIELD\n     NOR CONCATENATE DDS TOGETHER ON THESE DDS.  INCLUDE A SINGLE\n     DISKXXXX DD FOR EACH VOLUME AND MAKE THE DD NAMES UNIQUE BY\n     VARYING THE XXXX PART.\n\n          THE PARM=HSM IS USED IN THE STEP THAT PROCESSES HSM MIGRATE\n     VOLUMES.  THIS CAUSES SYS1.VTOCIX.* DATA SETS TO BE IGNORED\n     (SEE PRCDM330).  PARM=NOSYS IS NOT USED IN ANY OF THE SAMPLE\n     JCL.\nINDEXDM120PUP - MATCH HSM 'A' RECS TO MIGRAT VTOC\n          THIS PROGRAM IS DESIGNED TO CHECK UP ON HSM.  EARLIER\n     PROCESSING GENERATES A LIST OF ALL 'ALIAS' DATA SETS FROM THE\n     MCDS.  A VTOC SCAN GENERATES A LIST OF THE ALIAS DATA SETS\n     THEMSELVES.  BOTH LISTS ARE SORTED AND INPUT TO THIS PROGRAM.\n     THIS PROGRAM COMPARES THE LISTS AND GENERATES AN EXCPETION\n     REPORT (DDNAME=SYSPRINT).  PROPERLY MATCHED FILES ARE OUTPUT\n     (DDNAME=MERGEA) FOR FURTHER PROCESSING.  THE INPUT FILES ARE\n     THE MCDS 'A' REC FILE (DDNAME=EXTRACTA) AND THE VTOC FILE\n     (DDNAME=SORTVDSN).\n\n          THIS PROGRAM HAS NO PARM OR CONTROL CARD OPTIONS.\nINDEXDM130PRP - PRODUCE COMBINED TEST MASTER FILE\n          THIS PROGRAM PERFORMS CROSS CHECKING ON HSM AND PRODUCES\n     A CLEAN FILE OF MIGRATED DATA SETS.  INPUT CONSISTS OF THE\n     MERGED 'A' REC FILE (SEE DDNAME=MERGEA IN PROGRAM DM120PUP)\n     AFTER IT HAS BEEN SORTED INTO ORIGINAL DATA SET NAME (NOT ALIAS)\n     ORDER (DDNAME=SORTAMRG) AND THE 'D' REC FILE FROM THE DM110PUP\n     PROGRAM (SEE DDNAME=EXTRACTV IN THAT PROGRAM) WHICH IS ALREADY\n     IN THE CORRECT ORDER.\n\n          THE MAIN OUTPUT IS A CLEANED UP FILE (DDNAME=EDTDMCDS) THAT IS\n     AVAILABLE FOR SUBSEQUENT PROCESSING.  THREE REPORT FILES ARE\n     CREATED.  THE FIRST ONE (DDNAME=RPTERROR) CONTAINS MISCELLANEOUS\n     ERRORS.  THE OTHER TWO (DDNAME=RPTXTRAA AND DDNAME=RPTXTRAD) REPORT\n     'A' RECORDS WITH UNMATCHED 'D'S AND 'D' RECORDS WITH UNMATCHED 'A'S\n     RESPECTIVELY.  THESE, OR OTHER ERRORS MAY CAUSE THIS PROGRAM TO\n     DECIDE THAT EITHER A 'D' OR AN 'A' RECORD NEEDS TO BE DELETED FROM\n     THE HSM MCDS.  TWO FILES (DDNAME=HCMDA AND DDNAME=HCMDD) WILL BE\n     CARD IMAGE FILES CONTAINING HSM COMMANDS TO DELETE THESE RECORDS.\n     THEY CAN BE FED INTO THE DM190PUP PROGRAM FOR ACTION.\n\n          THIS PROGRAM PERFORMS A VERIETY OF EDITS DEPENDING ON WHETHER\n     THE FILE HAS BEEN MIGRATED TO DISK OR TAPE.  FOR DISK THE FOLLOWING\n     SHOULD BE TRUE:\n         A)  MCDS D RECORD PRESENT\n         B)  MCDS A RECORD PRESENT\n         C)  ALIAS DATA SET ON MIGRAT VOLUME\n         D)  CATALOG ENTRY WITH VOLSER=MIGRAT\n     FOR TAPE THE FOLLOWING SHOULD BE TRUE:\n         A)  MCDS D RECORD PRESENT\n         B)  MCDS A RECORD PRESENT\n         C)  NO ALIAS DATA SET ON MIGRAT VOLUME\n         D)  CATALOG ENTRY WITH VOLSER=MIGRAT\n     THE FOLLOWING CROSS CHECKS ARE ALSO PERFORMED:\n         E)  'D' DSN IN 'D' REC MATCHES 'D' DSN IN 'A' REC\n         F)  'A' DSN IN 'D' REC MATCHES 'A' DSN IN 'A' REC\n         G)  VOLSER IN 'D' REC MATCHES VOLSER OF ALIAS REC IN VTOC\n     A VIOLATION OF ANY OF THIS WILL BE REPORTED IN ONE OF THE\n     REPORT FILES.\n\n          THIS PROGRAM HAS NO PARM OR CONTROL CARD OPTIONS.\nINDEXDM140PUP - VVDS EXTRACT\n          THIS PROGRAM EXTRACTS KEY INFORMATION ABOUT VSAM FILES FROM\n     THE SYS1.VVDS.* FILES.  MANY VVDSS CAN BE PROCESSED IN ONE\n     EXECUTION OF THIS PROGRAM.  ONE RECORD IS PLACED IN THE OUTPUT FILE\n     (DDNAME=EXTRACT) FOR EACH FILE LOCATED BY MEANS OF A 'Z' (VVR\n     PRIMARY) RECORD.  DATA FROM MULTIPLE VVDSS IS EFFECTIVELY\n     CONCATENATED TOGETHER.  THIS ALLOWS US TO GET TRUE NUMBERS FOR\n     TRACKS USED, LRECL, AND CI SIZE (SUBSTITUTED FOR BLKSIZE) ON VSAM\n     FILES.\n\n          ANY DD WITH A DDNAME OF VVDSXXXX WHERE XXXX MAY BE ANY\n     CHARACTERS IS PROCESSED.  SEE PRCDM203 OR PRCDM315 FOR SAMPLE JCL.\n     IF YOU ARE NOT SURE WHICH VOLUMES HAVE A VVDS CONSULT THE OUTPUT OF\n     THE DM110PUP PROGRAM AFTER YOU HAVE SORTED IT BY DATA SET NAME.  DO\n     NOT USE A LIST IN THE VOL=SER= FIELD NOR CONCATENATE DDS TOGETHER\n     ON THESE DDS.  INCLUDE A SINGLE VVDSXXXX DD FOR EACH VVDS AND MAKE\n     THE DD NAMES UNIQUE BY VARYING THE XXXX PART.\n\n          THE FOLLOWING JCL PARAMETERS ARE REQUIRED ON THE VVDSXXXX\n     DD STATEMENTS:\n\n          DSN=           DATA SET NAME OF THE VVDS, USUALLY:\n                         SYS1.VVDS.V------ WHERE ------ IS THE\n                         VOLSER\n          DISP=          OLD OR SHR\n          UNIT=          3380 OR SYSDA OR WHATEVER\n          VOL=SER=       HARD CODE THE VOLSER\n          AMP=AMORG      TELLS ALLOCATION IT'S A VSAM FILE\n\n     CODING UNIT, VOL=SER, AND AMP ALLOWS THE DATA SET TO BE PROCESSED\n     WITHOUT REFERENCE TO A VSAM CATALOG.  THE RULES FOR DETERMINING\n     WHICH CATLOG THIS VVDS IS TO BE FOUND IN ARE COMPLEX.  THIS GETS\n     OUT OF THE PROBLEM ENTIRELY.\n\n          THIS PROGRAM HAS NO PARM OR CONTROL CARD OPTIONS.\nINDEXDM150PUP - UPDATE VTOC DATA FROM VVDS RECS\n          THIS PROGRAM MERGES DATA FROM VTOCS (DDNAME=SORTVDSN)\n     WITH VVDS DATA FOR VSAM FILES (DDNAME=SORTVVVR) TO FORM A MERGED\n     OUTPUT FILE (DDNAME=MERGVDSN).  DM110PUP AND DM140PUP OUTPUT\n     MUST BE SORTED BEFORE USE WITH THIS PROGRAM.\n\n          VTOC DATA ON NON-VSAM FILES IS PASSED THRU UNCHANGED.  A MERGE\n     IS ATTEMPTED FROM THE VVDS DATA FOR VSAM FILES.  ON MATCH (DATA SET\n     NAME AND VOLSER ARE EQUAL):\n\n          A)  VVDS TRACKS USED REPLACES VTOC TRACKS USED\n          B)  VVDS CI SIZE REPLACES VTOC BLOCK SIZE\n          C)  VVDS MAX LRECL REPLCAES VTOC LRECL\n          D)  VVDS EXTENT COUNT REPLCAES VTOC EXTENT COUNT\n          E)  RECFM FORCED TO 'VB'\n\n          ONE ADDITIONAL FIXUP IS PERFORMED.  DADSM DOES NOT UPDATE THE\n     REF DATE ON VDAM INDEX COMPONENTS BUT IT DOES UPDATE THE THE REF\n     DATE ON DATA COMPONENTS.  WE USE A NAMING STANDARD WHERE IF THE\n     CLUSTER IS NAMED XXXX, THE DATA COMPONENT XXXX.DATA AND THE INDEX\n     COMPONENT IS NAMED XXXX.INDEX.  BASED ON THIS, A DATA SET NAME SORT\n     WILL CAUSE THE DATA COMPONENT TO FALL JUST AHEAD OF THE INDEX\n     COMPONENT.  AS VSAM FILES ARE PROCESSED THE DSN AND REF DATE OF THE\n     PREVIOUS VSAM FILE ARE SAVED.  WHEN A NEW VSAM FILE IS PROCESSED\n     THE DSN IS COMPARED TO THE PREVIOUS ONE.  IF THE NEW NAME ENDS IN\n     '.INDEX', THE OLD ONE ENDS IN '.DATA', AND THE ENTIRE PRECEEDING\n     PART OF THE DATA SET NAMES ARE IDENTICAL WE PROPAGATE THE REF DATE\n     FROM THE OLD ONE TO THE NEW ONE.  THIS HAS THE EFFECT OF FIXING THE\n     INDEX REF DATE.  SINCE WE DO NOT USE VDAM AIXS THIS SCHEME HAS\n     WORKED WELL FOR US.\n\n          AN UNMATCHED NON-VSAM VTOC RECORD IS CONSIDERED NORMAL.  AN\n     UNMATCHED VSAM VTOC RECORD OR AN UNMATCHED VSAM VVDS RECORD IS\n     CONSIDERED AN ERROR AND REPORTED ON THE REPORT FILE\n     (DDNAME=SYSPRINT).  UNMATCHED VSAM VTOC RECORDS ARE PASSED\n     UNCHANGED TO THE OUTPUT FILE BUT UNMATCHED VVDS RECORDS ARE\n     DROPPED.\n\n          THIS PROGRAM HAS NO PARM OR CONTROL CARD OPTIONS.\nINDEXDM160PRP - TEST SYSTEM PROGRAMMER REPORTS\n          THIS PROGRAM TAKES TWO FILES AS INPUT.  THE FIRST FILE\n     CONTAINS SORTED VTOC DATA FROM TEST PACKS (DDNAME=TESTVTOC).  THE\n     SECOND FILE CONTAINS THE MERGED DATA ON MIGRATED FILES\n     (DDNAME=EDTDMCDS).  TOGETHER THEY CONTAIN DATA ON ALL TEST FILES.\n     THE OUTPUT IS A MERGED MASTER FILE CONTAINING A RECORD FOR EACH\n     TEST FILE REGUARDLESS OF WHETHER IS IS MIGRATED OR NOT AND REPORTS.\n\n          EACH TEST FILE IS REPORTED ON TWICE.  ALL FILES ARE REPORTED\n     ON A MASTER REPORT (DDNAME=RPTMAST).  THE SECOND PLACE A FILE IS\n     REPORTED ON IS IN A DETAIL REPORT.  ANY NUMBER OF DDS CAN BE USED\n     TO FOR THE DETAIL REPORT.  THIS ALLOWS A GREAT DEAL OF FLEXIBILITY\n     WITH RESPECT TO HOW THE DETAIL REPORTS ARE GROUPED.  THE FINAL\n     OUTPUT IS A CARD IMAGE FILE (DDNAME=HCMDD) CONTAINING HSM COMMANDS\n     TO DELETE EXPIRED MIGRATED TEST FILES (SEE DM190PUP).\n\n          OPTIONS ARE SPECIFIED VIA BOTH THE PARM FIELD AND CONTROL\n     CARDS.  FIRST, AS TO THE PARM FIELD.  THREE OPTIONS ARE SPECIFIED\n     IN THE PARM FIELD:\n\n          A)  OUT= - MAY BE A-Z OR *.  SPECIFIES THE SYSOUT\n              CLASS OF THE DDS THAT ARE DYNAMICALLY BUILT FOR\n              THE DETAIL REPORTS.  THE DEFAULT IS '*'.\n          B)  EXP= - MAY BE 000 - 999.  NUMBER OF DAYS TILL\n              MIGRATED FILES EXPIRE.  MUST BE SPECIFIED.\n              IF EXP=180 THEN FILES WILL EXPIRE 181 DAYS\n              AFTER MIGRATING.\n          C)  WARN= - MAY BE 000 - 999.  NUMBER OF DAYS OF\n              WARNING.  MUST BE SPECIFIED.  IF WARN=014 THEN\n              A WARNING MESSAGE WILL BE GENERATED 14 DAYS BEFORE\n              EXPIRATION.\n\n          THIS PROGRAM USES THE CTLTSOID CONTROL CARD MEMBER AS\n     PARAMETER INPUT (DDNAME=DISTTBL).  SEE 'CONTROL CARD FILES' ABOVE\n     FOR ADDITIONAL INFORMATION.  AS EACH TEST FILE IS PROCESSED THE\n     HIGH LEVEL QUALIFIER IS MATCHED AGAINST THIS TABLE.  SEVERAL FIELDS\n     IN THE CONTROL RECORD ARE USED TO BUILD TITLING INFORMATION.  ONE\n     FIELD IS USED TO FILL IN AN ACCOUNTING FIELD IN THE MASTER DISK\n     FILE.  A KEY HOWEVER, IS THE DDNAME FIELD IN THE CONTROL CARD FILE.\n     A CHAIN OF DDS IS BUILT ON AN AS NEEDED BASIS.  IF A DDNAME IN THE\n     CHAIN MATCHES THE FIELD IN THE CONTROL CARD IT IS USED.  OTHERWISE,\n     A NEW SEGMENT IS ADDED TO THE CHAIN.  A DYNAMIC ALLOCATION FOR A\n     DD OF THE FORM:\n\n          //XXXXXXXX DD SYSOUT=Z\n\n     IS DONE.  THE XXXXXXXX IS FROM THE DDNAME FILED IN THE CONTROL\n     RECORD.  THE Z IS THE SYSOUT CLASS FROM THE OUT PARMATER IN THE\n     PARM.  AN OPEN IS PERFORMED AGAINST THIS NEW DD AND ALL DETAILED\n     REPORTING FOR THAT HIGH LEVEL QUALIFIER ROUTED TO THE DD.  ALL\n     OF THESE DDS ARE CLOSED AT PROGRAM TERMINATION TIME.  IF A MATCH\n     ON HIGH LEVEL QUALIFIER WITH THE CONTROL CARD TABLE IS NOT FOUND\n     THEN A:\n\n          //ERROR   DD SYSOUT=Z\n\n     IS DYNAMICALLY ALLOCATE AND OPENED, IF NECESSARY, AND DETAIL\n     IS PRINTED ON IT.  TITLE INFORMATION AND ACCOUNTING INFORMATION\n     ARE SUPPLIED BY HARD CODED VALUES IN THE PROGRAM.\nINDEXDM170PRP - TEST SYSTEM MONTHLY BILLING RPT\n          THIS PROGRAM TAKES TWO FILES AS THE MAIN INPUT.  THE FIRST\n     IS THE CONSOLIDATED TEST MASTER FILE (DDNAME=MASTER).  THIS\n     REPRESENTS THE CURRENT STATE OF ALL TEST FILES.  THE SECOND\n     FILE IS THE HISTORY FILE (DDNAME=HISTORY).  INFORMATION FROM\n     THE MASTER FILE IS USED TO UPDATE THE HISTORY FILE WHICH IS\n     REWRITTEN ON TOP OF ITSELF.  A WORKING COPY OF THE HISTORY\n     FILE IS BUILT (DDNAME=WORKHIST) BEFORE HISTORY FILE UPDATING\n     STARTS.\n\n          SEVERAL REPORT FILES ARE PRODUCED.  (DDNAME=RPTDET) CONTAINS\n     FILE LEVEL DETAIL INFORMATION.  (DDNAME=RPTSUM) CONTAINS LEDGER\n     BREAK TOTALS AND GRAND TOTALS.  (DDNAME=RPTBILL) CONTAINS TOTALS\n     ORGANIZED IN THE PROPER FORMAT FOR OUR FINANCE PEOPLE.  (DDNAME=\n     BILLOUT) COONTAINS THE FINANCE INFORMATION IN A CARD IMAGE FORMAT\n     SUITABLE FOR OUR BILLING SYSTEM.\n\n          THE PARM FIELD IS NOT USED.  TWO CONTROL CARD FILES ARE\n     USED FOR MOST PARAMETER INPUT.  (DDNAME=AAMIN) IS USED TO READ THE\n     CTLMEAAM CONTROL CARD MEMBER.  (DDNAME=GRPIN) IS USED TO READ IN\n     THE CTLMEGRP CONTROL CARD MEMBER.  TOGETHER THESE TWO FILES PERMIT\n     VALIDATION OF ACCOUNTING INFORMATION AND TRANSLATION TO THE GROUP\n     CODES USED BY THE FINANCE PEOPLE.  THE FINAL PARAMETER INPUT\n     (DDNAME=CTRLCTRL) SETS THE DEFAULT GROUP.  SEE DOCUMENTATION ON\n     THE CTLDM230 MEMBER FOR ADDITIONAL INFORMATION.\nINDEXDM190PUP - SEND COMMANDS TO HSM\n          THIS PROGRAM SENDS COMMANDS TO HSM USING THE HSMXEQ\n     SUBROUTINE.  SINCE THE HSM INTERFACE USED IS THE SAME ONE AS\n     TSO THE COMMAND FORMAT IS THE SAME.  INPUT (DDNAME=SYSIN) IS\n     CARD IMAGES WHERE COLUMNS 73 TO 80 ARE IGNORED.  OUTPUT\n     (DDNAME=SYSPRINT) IS A REPORT SHOWING THE RESULTS.\n\n          THIS PROGRAM HAS NO PARM OR CONTROL CARD OPTIONS.\nINDEXDM200PUP - PROD SYSTEM DAILY UPDATE & RPT\n          THIS PROGRAM UPDATES THE PRODUCTION DISK MANAGEMENT MASTER\n     FILE AND PRODUCES DAILY REPORTS.  THE MASTER FILE (DDNAME=MASTER)\n     IF FIRST COPIED TO A WORK FILE (DDNAME=WORK) AND THEN UPDATED USING\n     INFORMATION FROM THE MERGED VTOCS (DDNAME=TRANFILE).  THE TRANFILE\n     DATA IS SORTED BEFORE USE.  IF AN OUT OF SEQUENCE CONDITION IS\n     DETECTED IN THE MASTER FILE IT IS AUTOMATICALLY SORTED BEFORE USE\n     ALSO.\n\n          SEVERAL REPORTS ARE PRODUCED.  ANY ERRORS THAT ARE FOUND ARE\n     REPORTED (DDNAME=ERROUT).  ALL FILES IN 'TEMPORARY' STATUS ARE\n     LISTED IN (DDNAME=RPTTEMP).  A COMPLETE LISTING OF THE UPDATED\n     MASTER FILE IS ALSO PRODUCED (DDNAME=LISTOUT).\n\n          THIS PROGRAM CONTAINS A CONSIDERABLE AMOUNT OF EDITING AND\n     VALIDATION LOGIC.  EACH FIELD OF EACH RECORD OF THE MASTER FILE IS\n     CHECKED AND INVALID DATA IS FORCED TO VALID.  NUMERIC FIELDS, FOR\n     INSTANCE ARE CHECKED FOR SPACES.  ANY SPACES ARE REPLACED BY\n     ZEROES.  THE FIELD IS THEN 'NUMERIC' CHECKED.  ANY INVALID DATA\n     CAUSES THE FIELD TO BE RESET TO ZERO.  SWITCH FIELDS ARE CHECKED TO\n     INSURE THAT THEY CONTAIN ONLY VALID VALUES AND ARE RESET TO A\n     DEFAULT IF NECESSARY.\n\n          A RECORD IS AUTOMATICALLY ADDED TO THE MASTER FILE FOR ANY\n     HERETOFORE UNKNOWN FILE.  THE SWITCHES ARE SET TO 'YYT' AND THE\n     ACCOUNTING FIELD LEFT BLANK.  THE LAST 'T' VALUE INDICATES THAT THE\n     FILE IS TEMPORARY.  TO MAKE THE FILE PERMANENT THE 'T' MUST BE\n     CHANGED, THE OTHER TWO SWITCHES PROPERLY SET, AND THE ACCOUNTING\n     FIELD SET.  WE DO THIS WITH SPF EDIT.  A 'FIND' FOR 'YYT' IN THE\n     RIGHT COLUMNS IS AN EFFICIENT WAY OF LOCATING THE RECORDS THAT NEED\n     UPDATING.  THUS, OUR PROCEDURE FOR ADDING A FILE TO THE PRODUCTION\n     DISK MANAGEMENT SYSTEM IS TO LET THE SYSTEM FIND IT AND ASSIGN IT A\n     TEMPORARY STATUS.  WE THEN UPDATE THE MASTER FILE WITH ISPF TO MAKE\n     IT PERMANEMT.  THIS RESULTS IN VERY LITTLE DATA ENTRY PER FILE.\n\n          SOMETIMES FILES MUST BE CREATED TO WORK AROUND A PRODUCTION\n     PROBLEM.  THESE FILES WILL BE PICKED UP BY THE SYSTEM.  WE JUST\n     LEAVE THEM ALONE.  IF A TEMPORARY FILE DOES NOT SHOW UP IN A\n     SUBSEQUENT DAY'S POSTING THE RECORD FOR THE TEMPORARY FILE IS\n     AUTOMATICALLY DELETED.  IF A PERMANENT FILE DOES NOT SHOW UP IT IS\n     LISTED ON THE ERROR REPORT.  IF WE HAVE DELETED THE FILE ON PURPOSE\n     WE JUST CHANGE THE SWITCH BACK TO 'T' AND IT WILL BE DELETED ON THE\n     NEXT POSTING.  OF COURSE, YOU CAN ALSO USE ISPF EDIT TO DELETE THE\n     RECORD IF YOU WANT TO.\n\n          BOTH DSNAME AND VOLSER ARE MONITORED.  IF A FILE'S VOLSER\n     CHANGES THIS WILL BE NOTED ON THE ERROR REPORT AND THE MASTER\n     RECORD UPDATED.  DUPLICATE DATA SET NAMES WILL RESULT IN SEVERAL\n     MESSAGES.  THE DETAILS WILL DEPEND ON THE COLATING SEQUENCE OF THE\n     VOLSERS INVOLVED.  SEE THE DESCRIPTION OF THE SYSTEM SWITCH IN THE\n     CTLDM220 CONTROL CARD MEMBER AND MATERIAL BELOW FOR THE PROPER WAY\n     OF DEALING WITH LEGITIMATE FILE NAME DUPLICATIONS.\n\n          THERE IS SPECIAL LOGIC IN THIS PROGRAM TO HANDLE SEVERAL\n     CONDITIONS.  FIRST, ALL FILES STARTING WITH 'DSCB.' ARE DISCARDED.\n     SECOND, DISK GDGS ARE TREATED IN A SPECIAL MANNER.  OUR NAMING\n     CONVENTIONS MEAN THAT THE DATA SET NAME WILL CONTAIN A '.G' IN ONE\n     OF TWO LOCATIONS.  IF THIS CASE IS DETECTED THE .G----V-- IS\n     REPLACED BY .GDG.  THE DSORG IS FORCED TO 'GO '.  ALL EXTENTS OF\n     ALL GENERATIONS IS ADDED TOGETHER AND SPECIAL LOGIC APPLIES TO\n     SEVERAL OTHER FIELDS.  SEE THE PROGRAM FOR DETAILS.  THIRD,\n     'SYSCATLG' CVOL CATALOGS ARE CHANGED TO 'SYSCATLG.VXXXXXX' WHERE\n     XXXXXX IS THE VOLSER.  THIS IS SIMILAR TO WHAT ICF CATALOGS DO AND\n     MAKES THE DATA SET NAMES UNIQUE.  FOURTH, ISAM FILES ARE FOCED TO\n     100% USED INSTEAD OF 0% USED, WHICH IS WHAT THE VTOC SHOWS.\n     FINALLY, THIS IS THE PROGRAM THAT ADDS THE VOLSER AS THE LAST 6\n     BYTES OF THE DATA SET NAME IF THE SYSTEM SWITCH IS SET.  USUALLY\n     THIS RESULTS IN A DATA SET NAME THAT LOOKS LIKE THIS\n     'WWW.XXX.YYY.ZZZ    VVV'.  THE BLANKS IN THE MIDDLE DO NOT STOP THE\n     FIELD FROM BEING UNIQUE.  NOTE THAT IF YOUR DATA SET NAME IS MORE\n     THAN 38 BYTES LONG PART OF IT WILL BE OVERLAYED.\n\n          THIS PROGRAM DOES NOT USE A PARM.  PARAMETERS ARE SUPPLIED\n     BY THE (DDNAME=VOLSERIN) FILE.  SEE CTLDM220 FOR MORE INFORMATION.\nINDEXDM210PRP - PROD SYSTEM WEEKLY REPORTS\n          THIS PROGRAM TAKES THE PRODUCTION MASTER FILE AS INPUT\n     (DDNAME=MASTER) AND PRODUCES A SERIES OF REPORTS.  PARAMETER INPUT\n     IS SPECIFIED IN (DDNAME=VOLSERIN) SPECIFYING THE CHARACTERISTICS OF\n     VOLUMES.  AN OUTPUT FILE (DDNAME=OUTFIXC) IS GENERATED CONTAINING\n     CONTROL CARDS FOR THE DM298PUP 'TRIM' PROGRAM.\n\n           (DDNAME=RPTPERM) LISTS ALL 'PERMANENT' FILES.\n     (DDNAME=RPTRGDG) LISTS ALL GDGS.  (DDNAME=RPTVSUM) GIVES VOLUME\n     LEVEL SUMMARY STATISTICS.  (DDNAME=RPTXTNT) REPORTS ON ALL NON-VSAM\n     FILES THAT ARE IN MORE THAN ONE EXTENT.  (DDNAME=RPTVTNT) PROVIDES\n     A SIMILAR REPORT FOR VSAM FILES.  (DDNAME=RPTOVER) LISTS ALL OVER\n     ALLOCATED FILES.  AN OVER ALLOCATED FILE IS ONE THAT THE HIGH WATER\n     USED IS LESS THAN 90% OF THE CURRENT ALLOCATION.  AN UNDER\n     ALLOCATED FILE WILL BE IN MULTIPLE EXTENTS.\n\n          (DDNAME=RPTMPTY) LISTS ALL EMPTY FILES.  (DDNAME=RPTEOLD)\n     LISTS ALL EXPIRED FILES.  ONE OF THE SWITCHES INDICATEDS REFERENCE\n     FREQUENCY (E.G. DAILY, MONTHLY, ETC.).  EACH REFERENCE FREQUENCY\n     HAS A NUMBER OF DAYS ASSOCIATED WITH IT.  FOR INSTANCE, THE NUMBER\n     OF DAYS ASSOCIATED WITH A DAILY REFERENCE FREQUENCY IS 10.  IF THE\n     FILE HAS NOT BEEN REFERENCED IN 10 DAYS IT IS EXPIRED.\n     (DDNME=RPTVDET) LISTS ALL OF THE DATA SETS ON EACH VOLUME.\n     (DDNAME=RPTSUMY) PUTS OUT ONE PAGE OF SUMMARY STATISTICS.\n\n          THIS PROGRAM DOES NOT USE PARM OPTIONS.\nINDEXDM230PRP - PROD SYSTEM MONTHLY BILLING RPT\n          THIS PROGRAM PRODUCES BILLING DATA ON A MONTHLY BASIS FOR OUR\n     FINANCE PEOPLE.  IT TAKES AS INPUT THE MASTER FILE (DDNAME=MASTER)\n     AND A HISTORY FILE (DDNAME=HISTORY).  IT PRODUCES AN UPDATED\n     HISTORY FILE (THE HISTORY FILE IS COPIED TO A TEMPORARY FILE\n     (DDNAME=WORKHIST) BEFORE UPDATING BEGINS).  SEVERAL REPORTS\n     ARE PRODUCED.\n\n          (DDNAME=RPTDET) CONTAINS DETAIL SORTED BY AAM WITHIN\n     GROUP.  OLD FILE SIZE, NEW FILE SIZE, AND NET CHANGE ARE\n     SHOWN.  (DDNAME=RPTSUM) ROLLS THE DETAIL UP INTO LEDGER BREAKS.\n     (DDNAME=RPTBILL) SHOWS GROUP TOTALS ORGANIZED TO BE\n     CONVENIENT FOR OUR FINANCE PEOPLE.  (DDNAME=BILLOUT) CONTAINS\n     THE SAME FIGURES AS RPTBILL BUT ORGANIZED FOR CONVENIENT\n     PROCESSING BY ANOTHER COMPUTER PROGRAM.\n\n          THIS PROGRAM DOES NOT USE THE PARM FIELD.  CONTROL INFORMATION\n     IS SUPPLIED BY TWO FILES (DDNAME=AAMIN) AND (DDNAME=GRPIN).  SEE\n     THE DOCUMENTATION ON THE CTLMEAAM AND CTLMEGRP MEMBERS FOR\n     ADDITIONAL INFORMATION.\nINDEXDM298PUP - 'TRIM' RESIZES FILES\n          THIS PROGRAM RESIZES FILES ACCORDING TO CONTROL CARD\n     PARAMETERS.  ONE CONTROL CARD IS SUPPLIED FOR EACH FILE TO\n     BE PROCESSED.  THE GENERAL APPROACH IS TO COPY THE DATA IN\n     THE FILE TO A WORK FILE (DDNAME=WORK), DELETE THE OLD FILE,\n     ALLOCATE THE FILE WITH NEW FILE CHARACTERISTICS (PRIMARILY\n     SIZE), AND COPY THE DATA BACK.  EXTENSIVE RESTART/RERUN\n     FACILITIES ARE PROVIDED.\n\n          CONTROL CARDS ARE PROVIDED IN THE INPUT FILE (DDNAME=SYSIN).\n     EACH STAGE OF THE PROCESS IS REPORTED IN THE REPORT FILE\n     (DDNAME=SYSPRINT).  THE COMMAND BYTE IN THE INPUT RECORD IS UPDATED\n     AS PROCESSING PROGRESSES SO THE INPUT FILE MUST BE A DISK FILE.\n     THIS PROGRAM IS ONLY CAPABLE OF PROCESSING SEQUENTIAL FILES.  IF\n     THE PROGRAM IS UNABLE TO PROCESS THE FILE THE COMMAND BYTE IS\n     CHANGED TO AN 'E' FOR ERROR.  A PARAMETER FILE (DDNAME=VOLSERIN) IS\n     USED TO SELECT THE CORRECT NUMBER OF TRACKS PER CYLINDER.\n\n          EXTENSIVE USE OF DYNAMIC ALLOCATE IS USED.  THE FOLLOWING\n     IS THE COMPLETE 10 STAGE PROCESSING FOR NORMAL PROCESSING.  THE\n     'F' COLUMN INDICATES THE VALUE OF THE COMMAND BYTE IN THE CONTROL\n     CARD.\n\n     STEP  CMD F PROCESSING\n       1)  --- - SCAN CONTROL CARD.\n       2)  MOV M DYNA A DD=FILEDD OF THE CURRENT VERSION OF DATASET.\n       3)  PH1 1 COPY TO WORK.\n       4)  PH2 2 DYND - THIS WILL KEEP THE CURRENT VERSION.\n       5)  PH3 3 DYNA A DD=FILEDD WITH A DISP=(,DELETE).\n       6)  PH3 3 DYND - THIS WILL DELETE THE CURRENT VERSION.\n       7)  PH4 4 DYNA A DD=FILEDD WITH DISP=(,CATLG),SPACE=ETC.\n                 THIS WILL ALLOCATE THE NEW VERSION OF THE FILE.\n       8)  PH5 5 COPY WORK BACK TO THE NEW VERSION.\n       9)  PH5 5 DYND - THIS WILL CATALOG THE NEW VERSION\n                 THE DATA IS NOW IN THE NEW VERSION OF THE FILE.\n      10)  --- - LOOP BACK TO STEP 1 ON NEXT CONTROL CARD.\n\n     ALL CONTROL CARDS SHOULD START WITH THE COMMAND FIELD SET TO\n     'M'.  WHEN THE PROCESS IS DONE THE COMMAND BYTE IS CLEARED TO\n     A SPACE.  THIS UPDATING OF THE COMMAND BYTE MAKES RESTART/RERUN\n     POSSIBLE.\n\n          THE FIRST TIME THIS PROGRAM IS RUN AGAINST A SET OF CONTROL\n     CARDS THE COMMAND BYTE WILL BE 'M' FOR ALL THE FILES.  THE PROGRAM\n     WILL ATTEMPT TO PROCESS EACH FILE.  IF THE FILE IS BUSY (DYNALLOC\n     DISP=OLD FAILS) THE CARD WILL BE LEFT ALONE AND THE PROGRAM WILL\n     SKIP ON TO THE NEXT.  IF THE FILE CANNOT BE PROCESSED, SAY\n     BECAUSE IT IS A VSAM FILE, THE COMMAND BYTE WILL BE SET TO 'E'.\n     THOSE FILES THAT PROCESS NORMALLY WILL HAVE THEIR COMMAND BYTES SET\n     TO SPACE.  THIS CONTROL CARD FILE CAN NOW BE REPROCESSED.  ALL\n     CARDS WITH A COMMAND BYTE OF SPACE OR 'E' WILL BE SKIPPED.  THOSE\n     STILL HAVING AN 'M' WILL BE RETRIED.  THIS RERUN PROCESS CAN\n     BE CONTINUED UNTIL ALL FILES THAT CAN PROCESS ARE PROCESSED.  OTHER\n     POSSIBILITIES OCCUR WHEN AN ABEND OCCURS.\n\n          IF THE SYSTEM CRASHES, THE PROGRAM IS CANCELLED, OR AN\n     UNRECOVERABLE ERROR OCCURS THE PROGRAM WILL BE AT SOME INTERMEDIATE\n     STAGE.  THIS IS INDICATED BY THE COMMAND BYTE BEING A 1 - 5.  WHEN\n     THIS HAPPENS THE PROGRAM AUTOMATICALLY PICKS UP WHERE IT LEFT OFF.\n     THE FOLLOWING TABLE COVERS ALL THE POSSIBILITIES:\n\n           CMD F DESCRIPTION                    RESTART ACTION\n\n           MOV M PROCESS NORMALLY             - PROCESS AS NON-RESTART\n           OK    MOVED OK                     - SKIP TO NEXT CARD\n           ERR E FATAL ERROR OCCURED          - SKIP TO NEXT CARD\n           PH1 1 RESET CMD TO MOV             - START OVER FROM MOV\n           PH2 2 ASSUME FILE IS OUT THERE     - SKIP TO PH3\n           PH3 3 ASSUME FILE IS OUT THERE     - PROCESS FROM HERE\n           PH4 4 ASSUME FILE IS NOT OUT THERE - PROCESS FROM HERE\n           PH5 5 ASSUME FILE IS OUT THERE     - DYNA DISP=OLD THEN\n            \"  \" CONTINUED                    - PROCESS FROM HERE\n\n     THE PROCESS IS COMPLETELY AUTOMATIC EXCEPT FOR PHASES 3 AND 4.  THE\n     FILE MAY OR MAY NOT EXIST.  IF IT EXISTS IT MAY BE UNDER THE OLD\n     ALLOCATION.  IN ANY CASE IT HAS BEEN SUCCESSFULLY COPIED TO THE\n     'WORK' FILE.  CHECK TO SEE IF THE FILE EXISTS.  IF IT DOES DELETE\n     IT.  THEN SET THE COMMNAD BYTE TO 4 AND RESTART THE PROGRAM.\n\n          THERE ARE TWO SPECIAL CONCERNS WITH AUTOMATIC RESTART/RERUN\n     IF THE PROGRAM FAILS TO COMPLETE.  FIRST, MAKE SURE THAT THE 'WORK'\n     FILE IS A PERMANENT FILE.  IT MAY CONTAIN THE ONLY COPY OF\n     THE DATA IN THE FILE YOU ARE RESIZING.  IT ALSO NEEDS TO BE BIG\n     ENOUGH TO HANDLE THE LARGEST FILE THAT WILL BE RESIZED.  SECOND,\n     THERE IS ONE OBSCURE WAY THINGS CAN GO WRONG WITH RESTART/RERUN.\n     IF A CONTROL CARD THAT IS EARLY IN THE FILE DOES NOT PROCESS AT\n     ALL BECAUSE THE FILE IS BUSY AND THE PROGRAM LATER ABENDS THEN\n     THE DATA IN 'WORK' MAY BE OVERLAYED BY THE DATA FROM THE EARLIER\n     FILE.\n\n          ON RESTART AN ATTEMPT WILL BE MADE TO RETRY THE EARLIER FILE\n     THAT WAS BUSY.  IF THE FILE IS NO LONGER BUSY THEN EVERYTHING\n     WILL WORK AND THE 'WORK' FILE WILL CONTAIN DATA FROM THIS FILE.\n     LATER WHEN THE CONTROL CARD FOR THE FILE THAT WAS BEING PROCESSED\n     IS RETRIED THE RETRY MAY ASSUME THAT 'WORK' CONTAINS THE DATA\n     FROM THE FIRST TRY.  BUT IT WON'T.  TWO APPROACHES ARE POSSIBLE.\n     THE FIRST ONE IS TO DELETE ALL CONTROL CARDS THAT CAME BEFORE\n     THE ONE THAT WAS BEING PROCESSED WHEN THE ABEND OCCURED.  THIS\n     WILL GUARANTEE THAT THE RETRY CARD WILL BE FIRST.  IT ALSO MEANS\n     THAT BUSY FILES WILL NOT BE RETRIED.  A SECOND APPROACH IS TO\n     MOVE THE CARDS TO THE END.  THEY WILL BE PROCESSED AFTER THE ONE\n     WITH THE RESTART SO EVERYTHING WILL WORK FINE.\n\n          THE PARM FIELD IS NOT USED BUT THE 'QEDIT' MVS OPERATOR\n     INTERFACE IS AVAILABLE.  THE MVS CONSOLE OPERATOR MAY ISSUE\n     'MODIFY' OR 'STOP' COMMANDS.  THE FOLLOWING COMMANDS ARE\n     SUPPORTED:\n\n          P JOBNAME   - STOP THE JOB AT THE END OF THE CURRENT PHASE\n          F JOBNAME,D - DISPLAY COMMAND BYTE AND DSN OF CURRENT PHASE\n          F JOBNAME,P - STOP AT THE END OF THE CURRENT CONTROL CARD\nINDEXDM999DSU - PREPROCESSOR FOR ADRDSSU\n          THIS PROGRAM PERMITS IDENTIFYING FILES TO BE DUMPED OR\n     RESTORED BY ADRDSSU (DF/DSS) TO BE IDENTIFIED VIA JCL.  THIS\n     PERMITS SETTING UP DUMP/RESTORE JOBS THAT DO NOT HAVE TO BE\n     MODIFIED WHEN THE LOCATION OF A FILE CHANGES.\n\n          THE PROGRAM SCANS THE DD STATEMENTS OF THE EXECUTION JCL AND\n     BUILDS A SET OF ADRDSSU CONTROL CARDS IN A WORK FILE\n     (DDNAME=SYSIN).  IT THEN EXECUTES ADRDSSU AND CHECKS ITS RETURN\n     CODE.  A NON-ZERO RETURN CODE FROM ADRDSSU CAUSES THE PROGRAM TO\n     ABEND.  ADRDSSU EXPECTS A REPORT FILE (DDNAME=SYSPRINT) SO THIS\n     MUST BE SPECIFIED.  THE ADRDSSU PARAMETER CARDS SPECIFY EITHER A\n     DUMP TO OR A RESTORE FROM (DDNAME=TAPE1).\n\n          THE DDNAME, DSNAME, AND VOL=SER ARE EXTRACTED FROM THE\n     EXECUTION JCL VIA THE TIOT AND THE RDJFCB MACRO.  DD NAMES ARE\n     CHECKED TO SEE IF THEY BEGIN WITH EITHER 'DMP' OR 'RST'.  PRESENCE\n     OF 'DMP' DDS INDICATES THAT A DUMP IS REQUESTED.  PRESENCE OF 'RST'\n     DDS INDICATES THAT A RESTORE IS REQUESTED.  DUMP AND RESTORE CANNOT\n     BE MIXED IN THE SAME EXECUTION.  ONLY ONE DATA SET ON ONE VOLUME\n     MAY BE SPECIFIED PER DD.  AS MANY DDS AS NECESSARY MAY BE SPECIFIED\n     SPANNING UP TO 256 VOLUMES.  FOR DUMPS A SINGLE DATA SET NAME LIST\n     AND A SINGLE VOLUME LIST ARE CREATED.  FOR RESTORES A SEPARATE\n     CONTROL CARD SET IS BUILT FOR EACH FILE TO INSURE THAT THE FILE IS\n     RESORED TO THE CORRECT VOLUME.\n\n          THE PARM FIELD IS PASSED THRU TO ADRDSSU INTACT.  THIS PERMITS\n     RUNNING THE PROGRAM IN TEST MODE BY SPECIFYING 'TYPRUN=SCAN'.\nINDEXVVDSLIST - PRINT VVDS\n          THIS PROGRAM PROVIDES A FORMATTED LISTING OF ALL FIELDS OF\n     ALL RECORDS OF A DFP/VSAM VVDS.  MULTIPLE VVDS FILES MAY BE\n     PROCESSED.  THE EXECUTION JCL IS SCANNED FOR ANY DD STARTING WITH\n     VVDS.  THIS FILE IS OPENED AS A VVDS AND A REPORT PRINTED.  THE\n     REPORT IS PRODUCED ON (DDNAME=SYSPRINT).\n\n          SPECIAL JCL PARAMETERS ARE RECOMMENDED.  THE REQUREMENTS\n     ARE THE SAME AS THE DM140PUP PROGRAM.  SEE THE DESCRIPTION OF\n     THIS PROGRAM ABOVE FOR MORE COMPLETE INFORMATION.\n\n          THIS PROGRAM DOES NOT USE ANY SPECIAL CONTROL CARDS OR\n     PARM VALUES.\nSECT SUBROUTINE DOCUMENATATION\nINDEXDATCNVRT - DATE CONVERSION ROUTINE\nSPAC2CONVERTS A DATE FROM ONE OF THREE FORMATS INTO THE OTHER TWO.  ALSO\n     COMPUTES THE DAY OF THE WEEK.\nSPAC2ALL PARAMETERS ARE FULL WORD INTEGERS ALIGNED ON A WORD BOUNDARY\n     (E.G. PIC S9(8) COMP SYNC IN COBOL). THE NAME AND DESCRIPTION OF\n     ALL 6 PARAMETERS ARE LISTED BELOW:\nIND-BD-C-YEAR     YEAR\nIND-BD-C-MONTH    MONTH (01=JANUARY - 12=DECEMBER)\nIND-BD-C-DOM      DAY OF MONTH\nIND-BD-C-DOY      DAY OF YEAR (RELATIVE JULIAN)\nIND-BD-C-DOW      DAY OF WEEK (01=SUNDAY - 07=SATURDAY)\nIND-BD-C-JDAY     ABSOLUTE JULIAN DAY (NUMBER OF DAYS SINCE A\nIND-B                 PARTICULAR DAY ABOUT 4000 BC)\nSPAC2ALL ARGUMENTS MUST BE POSITIVE OR ZERO. SEE OTHER RESTRICTIONS IN\n     THE DESCRIPTION SEGMENT BELOW.\nSPAC2THE CALLING PROGRAM SUPPLIES DATCNVRT WITH THE DATE IN ONE OF THE\n     FOLLOWING THREE FORMS:\nIND-AANNUAL JULIAN   - INPUT D-C-YEAR D-C-DOY\nIND-AGREGORIAN       - INPUT D-C-MONTH D-C-DOM D-C-YEAR\nIND-AABSOLUTE JULIAN - INPUT D-C-JDAY\nSPAC1ALL OTHER PARAMETERS MUST BE SET TO ZERO. DATCNVRT WILL THEN\n     COMPUTE THE CORRECT VALUES FOR THE ZEROED OUT PARAMETERS.  THE\n     YEAR MAY BE SET TO THE FULL YEAR (1975) OR THE SHORT-FORM YEAR\n     (75) BY THE CALLING PROGRAM. DATCNVRT WILL ADD 1900 INTERNALLY IF\n     THE SHORT FORM IS USED. IF DATCNVRT IS TO COMPUTE THE YEAR IT WILL\n     COMPUTE THE LONG FORM. IN ANY CASE ALL NONZERO VALUES WILL BE LEFT\n     UNCHANGED UPON EXIT FROM DATCNVRT.\nSPAC1        WORKING-STORAGE.\n             77  D-C-YEAR     PIC S9(8) COMP SYNC.\n             77  D-C-MONTH    PIC S9(8) COMP SYNC.\n             77  D-C-DOM      PIC S9(8) COMP SYNC.\n             77  D-C-DOY      PIC S9(8) COMP SYNC.\n             77  D-C-DOW      PIC S9(8) COMP SYNC.\n             77  D-C-JDAY     PIC S9(8) COMP SYNC.\nSPAC1             E T C .\nSPAC3        PROCEDURE DIVISION.\nSPAC1                 (INITIALIZE VARIABLES)\nSPAC1            CALL 'DATCNVRT' USING D-C-YEAR D-C-MONTH\n                     D-C-DOM D-C-DOY D-C-DOW D-C-JDAY.\nSPAC1                 (USE RESULTS)\nSPAC2THE FOLLOWING TABLE GIVES TYPICAL INPUT VALUES AND THE RESULT:\nSPAC1       YEAR MONTH DOM  DOY  DOW JULIAN DAY (ABS)\nSPAC1INPUT    75   5    19    0   0            0\n     RESULT   75   5    19  139   2      2442698\nSPAC1INPUT  1975   0     0  139   0            0\n     RESULT 1975   5    19  139   2      2442698\nSPAC1INPUT     0   0     0    0   0      2442698\n     RESULT 1975   5    19  139   2      2442698\nSPAC1INPUT     0   0     0    0   0            0\n     RESULT        *****    ERROR    *****\nSPAC1INPUT    75   5    19  139   0            0\n     RESULT        *****    ERROR    *****\nINDEXGETCTRL - LOCATE AND LOAD CONTROL RECORD\nSPAC2READ APPLICATION CONTROL FILE AND LOAD CONTROL RECORD WITH MATCHING\n     PROGRAM IDENTIFICATION.\nSPAC21. NAME OF AN 80 BYTE WORK AREA. SHOULD BE INCLUDED FROM\n        'CTRL001'.\nSPAC2THE CONTROL FILE RECORDS MUST BE 80 CHARACTERS LONG.\n     'CTRL' MUST BE IN POSITIONS 1-4 OF THE CONTROL RECORDS.\n     PROGRAM NAME MUST BE IN POSITIONS 6-13, LEFT-JUSTIFIED.\n     THE CONTROL FILE MUST BE CLOSED WHEN 'GETCTRL' IS CALLED.\nSPAC2'GETCTRL' OPENS THE FILE AND READS TO EOF. ANY CONTROL RECORDS WITH\n     IDENTIFICATION WHICH MATCHES THE CALLING PROGRAM IS MOVED TO THE 80\n     CHARACTER AREA IN WORKING STORAGE. THE LAST MATCHING RECORD READ\n     WILL BE RETURNED TO THE CALLING PROGRAM, IF MORE THAN ONE IS IN THE\n     FILE. IF NO MATCHING CONTROL RECORD IS FOUND, GETCTRL WILL ABEND\n     WITH A USER CODE OF 1004.\nSPAC1'GETCTRL' ALSO CONTAINS AN EDITING CAPABILITY WHICH MAY BE\n     ACTIVATED BY MOVING THE CONSTANT 'EDIT' TO THE FIRST FOUR BYTES IN\n     PARAMETER 1. WHEN EDITING IS INDICATED:\nSPAC1A. THE DATE FIELD IS CHECKED FOR TWO NUMERICS, SLASH, TWO NUMERICS,\n        ANOTHER SLASH, AND TWO NUMERICS.\nSPAC1B. IF THE DATE FIELD CONTAINS 'MM/DD/YY', THE CURRENT SYSTEM DATE\n        IS SUBSTITUTED.\nSPAC1THE CALLING PROGRAM IS TR195DRP.\nSPAC1  WORKING-STORAGE SECTION.\n      * -INC CTRL001,BRFB   (NEXT PAGE)\n      ********************************************************  000001\n      * CTRL001                                                 000002\n      *                                                         000002\n       01  CTRL-CARD.                                           000003\n           02  CTRL-TYPE           PIC XXXX.                    000005\n           02  FILLER              PIC X.                       000006\n           02  CTRL-PID            PIC X(8).                    000007\n           02  FILLER              PIC X.                       000008\n           02  CTRL-BANK           PIC XXX.                     000009\n           02  FILLER              PIC X.                       000010\n           02  CTRL-DATE           PIC X(8).                    000011\n           02  FILLER              PIC X.                       000012\n           02  CTRL-SWITCHES.                                   000013\n               03  SW-1            PIC X.                       000014\n               03  SW-2            PIC X.                       000015\n               03  SW-3            PIC X.                       000016\n               03  SW-4            PIC X.                       000017\n               03  SW-5            PIC X.                       000018\n               03  SW-6            PIC X.                       000019\n               03  SW-7            PIC X.                       000020\n               03  SW-8            PIC X.                       000021\n               03  SW-9            PIC X.                       000022\n               03  SW-10           PIC X.                       000023\n           02  CTRL-USER-AREA      PIC X(34).                   000024\n           02  FILLER              PIC X.                       000025\n           02  FILLER              PIC X(8).                    000026\n      ********************************************************  000027\nSPAC1  PROCEDURE DIVISION.\n           MOVE 'TR195DRP' TO CTRL-PID.\n           MOVE 'EDIT' TO CTRL-TYPE. NOTE - THIS IS OPTIONAL.\n           CALL 'GETCTRL' USING CTRL-CARD.\nSPAC1JCL:\nSPAC1//CTRLCTRL  DD   *\n     CTRL TR195DRP PNB 11/06/74 1010000000   COMMENTS HERE\n     /*\nSPAC1OR:\nSPAC1//CTRLCTRL  DD   DSN=PBDS.TR.NEW.CTL,DISP=SHR\nINDEXHSMXEQ - ISSUE HSM SVC TO PROCESS A COMMAND\n          HSMXEQ PASSES A COMMAND TO HSM TO PROCESS BY ISSUING THE\n     PROPER SVC.  SINCE THIS IS NOT A STANDARD DOCUMENTED INTERFACE\n     CONSULT THE COMMENTS IN THE CODE FOR HOW TO CALL THIS ROUTINE.\n     ALTHOUGH THIS INTERFACE IS NOT A 'STANDARD SUPPORTED' INTERFACE\n     IT IS USED BY SEVERAL IBM SOFTWARE PRODUCTS SUCH AS TSO.\n     THEREFORE, THE CHANCE OF MAJOR CHANGES TO THIS INTERFACE ARE\n     SMALL.\nINDEXJGDATE - CONVERTS JULIAN TO CALENDAR DATE\nSPAC2CONVERTS A JULIAN DATE TO GREGORIAN DATE.\nSPAC21. NAME OF A 4 BYTE YEAR (PIC S9(8) COMP).\n     2. NAME OF A 4 BYTE DAY OF YEAR (PIC S9(8) COMP).\n     3. NAME OF A 4 BYTE MONTH (PIC S9(8) COMP).\n     4. NAME OF A 4 BYTE DAY OF MONTH (PIC S9(8) COMP).\nSPAC2JGDATE REQUIRES A VALID DATE WHICH MUST BE NUMERIC. A SIMPLE DIVIDE\n     BY 4 TEST IS USED TO DETECT LEAP YEAR. DAY OF YEAR MUST BE 1-365\n     (1-366 FOR LEAP YEAR) BUT NO CHECK IS MADE.\nSPAC2JGDATE CONVERTS THE JULIAN DATE GIVEN TO A GREGORIAN DATE. THE\n     MONTH NUMBER IS FILLED IN (1 = JAN, 2 = FEB, ETC.) AND THE DAY OF\n     MONTH FIELD IS FILLED IN. ALL NUMBERS ARE FULLWORD INTEGERS (PIC\n     S9(8) COMP). NO ERROR MESSAGES ARE GENERATED.  THE SUBROUTINE IS\n     RE-ENTRANT AND IS WRITTEN IN ASSEMBLY.\nSPAC2       77  J-YEAR                  PIC S9(8) COMP.\n            77  J-DAY                   PIC S9(8) COMP.\n            77  G-MONTH                 PIC S9(8) COMP.\n            77  G-DAY                   PIC S9(8) COMP.\nSPAC1           MOVE +75 TO J-YEAR.\n                MOVE +32 TO J-DAY\n                CALL 'JGDATE' USING J-YEAR\n                                    J-DAY\n                                    G-MONTH\n                                    G-DAY.\nSPAC1G-MONTH WILL CONTAIN +2. G-DAY WILL CONTAIN +1.  J-YEAR AND\n     J-DAY WILL REMAIN UNCHANGED.\nINDEXUSERDUMP - ABENDS WITH USER RETURN CODE.\nSPAC2SETS A USER RETURN CODE AND ABENDS WITH AN OPTIONAL DUMP.\nSPAC21. NAME OF A PIC S9(4) COMP SYNC RETURN CODE FIELD.\nSPAC2THIS ONE CANT FAIL TO ABEND. MISSING OR INVALID PARAMETER WILL\n     CAUSE DUMP AND RETURN CODE TO BE UNPREDICTABLE.\nSPAC2AN ABEND IS ISSUED SETTING THE RETURN CODE TO THE POSITIVE OR\n     ABSOLUTE VALUE OF PARAMETER 1. IF PARAMETER 1 IS POSITIVE A DUMP\n     WILL BE TAKEN, OTHERWISE IT WIL NOT.\nSPAC2//SYSUDUMP   DD SYSOUT=A\nSPAC1       77  ABEND-CODE              PIC S9(4) COMP SYNC VALUE +0.\nSPAC1           MOVE -1234 TO ABEND-CODE.\n            CALL 'USERDUMP' USING ABEND-CODE.\nSPAC1THE ABOVE CODE TERMINATES THE PROGRAM WITH AN ABEND. NO DUMP IS\n     TAKEN (BECAUSE ABEND-CODE IS NEGATIVE) AND A USER RETURN CODE OF\n     1234 IS ISSUED.\nSPAC1BE AWARE THAT THERE IS A DIFFERENCE BETWEEN USING THE COBOL SPECIAL\n     REGISTER 'SORT-RETURN' AND USING 'USERDUMP'. THE FORMER SETS A\n     RETURN CODE THAT YOU MAY TEST IN YOUR JCL; THE LATTER CAUSES\n     FOLLOWING JOB STEPS TO BE BYPASSED UNLESS COND=(EVEN) IS CODED IN\n     THOSE JOBSTEPS. ALSO 'USERDUMP' PROVIDES AN OPTIONAL DUMP.\nSECT FILE DOCUMENTATION\n          ALL FILES CONTAIN ONLY CHARACTER DATA.  SOME OF THE FILES\n     CONTAIN SPACES BETWEEN THE FIELDS.  OTHERS DO NOT.  THIS WAS DONE\n     SO THAT ALL FILES COULD BE BROUSED OR MODIFIED WITH TSO/ISPF.\n     NUMERIC FIELDS WILL ALWAYS CONTAIN AT LEAST ONE NON-BLANK DIGIT,\n     ALTHOUGH MOST CONTAIN LEADING SPACES FOR READABILITY.\n\n          ALL FILES ARE LISTED IN THIS SECTION.  THEY ARE LISTED\n     ACCORDING TO THE DATA SET NAME USED IN THE SAMPLE JCL.  IN\n     SOME CASES THE FORMAT OF TWO FILES IS IDENTICAL.  IN THESE\n     CASES ONLY THE FIRST FILE WILL HAVE DETAILED DOCUMENTATION.\n     SUBSEQUENT FILES WILL REFER BACK TO THE FIRST.\nINDEXPBDS.DM200RRP.BIL.FIL\n     RECFM=FB  LRECL=80\n\n     NAME      PIC       DESCRIPTION\n     INDIC     X         INDICATOR\n     NUM       99        GROUP NUMBER\n     TOT1      ZZZZZZZ9  SUB GROUP 1 TOTAL\n     TOT2      ZZZZZZZ9  SUB GROUP 2 TOTAL\n     TOT3      ZZZZZZZ9  SUB GROUP 3 TOTAL\n     TOT4      ZZZZZZZ9  SUB GROUP 4 TOTAL\n     TOT5      ZZZZZZZ9  SUB GROUP 5 TOTAL\n     TOT6      ZZZZZZZ9  SUB GROUP 6 TOTAL\n     TOT7      ZZZZZZZ9  SUB GROUP 7 TOTAL\n     TOT8      ZZZZZZZ9  SUB GROUP 8 TOTAL\n               X(13)     FILLER\n\n          THE MEANING OF THE TOT FILEDS IS INDICATED BY THE INDIC\n     FIELD.  POSSIBLE INDIC VALUES ARE:\n\n     1 - DATE CARD                              DM230MUM, DM380MUM\n     2 - CPU CRUS (SIMILAR TO CPU SECONDS)      (NOT USED)\n     3 - PRINT LINES                            (NOT USED)\n     4 - DASD EXCPS                             (NOT USED)\n     5 - TAPE EXCPS                             (NOT USED)\n     6 - DASD TRACKS                            DM230MRM\n     7 - FICHE LINES                            (NOT USED)\n     8 - PRINT PAGES                            (NOT USED)\n     9 - DASD TRACKS                            DM380MUM\n     A - DASD TRACKS BY DEPT                    DM380MUM\n     B - TAPE REELS                             (NOT USED)\n\n     'NOT USED' INDICATES THAT THESE INDIC VALUES ARE NOT GENERATED\n     BY ANY OF THE PROGRAMS INCLUDED HERE.  FOR INDIC = 1 THE\n     FOLLOWING VALUES ARE SET:\n\n     INDIC    - '1'\n     NUM      - '00'\n     TOT1     - FILE DATE - MONTH (01-12)\n     TOT2     - FILE DATE - DAY   (01-31)\n     TOT3     - FILE DATE - YEAR  (00-99)\n\n     FOR INDIC = '6' AND INDIC = '9'NUM CONTAINS THE FIRST TWO\n     DIGITS OF THE GROUP CODE.  TOTALS FOR EACH SUBGROUP ARE INDICATED\n     IN THE APPROPRIATE 'TOT' BUCKET.  FOR INDIC = 'A' NUM WILL CONTAIN\n     '00', TOT1 WILL CONTAIN THE DEPARTMENT NUMBER, AND TOT2 WILL\n     CONTAIN THE DEPARTMENT TOTAL.\nINDEXPBDS.DM200RRP.FIX.CRD\n     RECFM = FB  LRECL = 80\n\n     NAME      PIC       DESCRIPTION\n\n     CMD       X         COMMAND - MUST BE 'M'\n     DSNAME    X(44)     DATA SET NAME\n     VOLSER    X(6)      VOLUME SERIAL\n     ALLOC     9(5)      PRIMARY ALLOCATION IN TRACKS\n     DSORG     X(3)      DATA SET ORGANIZATION\n     RECFM     X(3)      RECORD FORMAT\n     LRECL     9(5)      LOGICAL RECORD LENGTH\n     BLKSI     9(5)      BLOCK SIZE\n               X(8)      FILLER\n\n          PRIMARY ALLOCATION WILL BE CHANGED TO CYLINDERS IF THE\n     FILE WILL BE 10 CYLINDERS OR MORE ON THE NEW VOLUME.  SECONDARY\n     ALLOCATION WILL BE SET TO 10% OF PRIMARY WITH ROUNDING UP.  ALL\n     VALUES ARE FORM THE PRODUCTION DISK MANAGEMENT MASTER EXCEPT\n     PRIMARY ALLOCATION.  THIS IS 110% OF HIGH USED.  A DATA SET\n     MAY BE MOVED TO A NEW VOLUME SIMPLY BY CHANGING THE VOLSER\n     FIELD.  IF THE DEVICE TYPE CHANGES THE PRIMARY ALLOCATION MAY\n     HAVE TO CHANGE.\n\nINDEXPBDS.DM200RRP.HST.FIL\n     RECFM = FB  LRECL = 55\n\n     NAME      PIC       DESCRIPTION (HEADER REC)\n\n     LIT       X(11)     CONSTANT 'DM-HST-HEAD'\n     DATE      X(8)      FILE DATE IN MM/DD/YY FORMAT\n               X(36)     FILLER\n\n     NAME      PIC       DESCRIPTION DETAIL REC)\n\n     GRP       999       THREE DIGIT GROUP CODE\n     AAM       XXX       THREE LETTER AAM ACCOUNTING CODE\n     DSNAME    X(44)     DATA SET NAME\n     ALLOC     9(5)      CURRENT ALLOCATION\n\n          THERE IS 1 HEADER RECORD AT THE BEGINNING OF THE FILE.\n     THERE IS ONE DETAIL RECORD FOR EVERY PRODUCTION FILE.  THE\n     DETAIL RECORDS ARE IN ASCENDING ORDER BY GRP AAM AND DSNAME.\nINDEXPBDS.DM200RRP.MST.FIL\n     RECFM = FB  LRECL = 150\n\n     NAME      PIC       DESCRIPTION (HEADER REC)\n\n     AAM       X(3)      THREE LETTER AAM ACCOUNTING CODE\n               X         FILLER\n     SW-1      X         CHANGE EXTENT INDICATOR\n                         Y - YES -     OK TO CHANGE EXTENT\n                         N - NO  - NOT OK TO CHANGE EXTENT\n     SW-2      X         CHANGE BLOCKSIZE INDICATOR\n                         Y - YES -     OK TO CHANGE BLOCKSIZE\n                         N - NO  - NOT OK TO CHANGE BLOCKSIZE\n                         C - *** - FILE IS CONCATINATED\n     SW-3      X         REFERENCE FREQUENCY INDICATOR\n                         I - IGNORE (PERMANENT FILE)\n                         T - TEMPORARY FILE\n                         D - DAILY     - EXPIRES AFTER  10 DAYS\n                         M - MONTHLY   - EXPIRES AFTER  70 DAYS\n                         Q - QUARTERLY - EXPIRES AFTER 193 DAYS\n                         A - ANNUALLY  - EXPIRES AFTER 376 DAYS\n               X         FILLER\n     DSNAME    X(44)     DATA SET NAME\n               X(2)      FILLER\n     ALLOC     9(5)      TRACKS CURRENTLY ALLOCATED\n               X(2)      FILLER\n     USED-CUR  9(5)      TRACKS CURRENTLY USED\n               X         FILLER\n     DSORG     X(3)      DATA SET ORGANIZATION\n               X         FILLER\n     RECFM     X(3)      RECORD FORMAT\n               X         FILLER\n     BLKSIZE   9(5)      BLOCK SIZE\n               X         FILLER\n     LRECL     9(5)      LOGICAL RECORD LENGTH\n               X         FILLER\n     VOLSER    X(6)      CURRENT VOLUME SERIAL\n               X         FILLER\n     USED-HI   9(5)      HIGH WATER TRACKS USED\n               X         FILLER\n     DT-CREATE 9(5)      FILE CREATION DATE\n               X         FILLER\n     DT-REF    9(5)      DATE LAST REFERENCED\n               X         FILLER\n     EXTENT-CT 9(2)      EXTENT COUNT\n               X         FILLER\n     USED-LO   9(5)      LOW WATER TRACKS USED\n               X(30)     FILLER\n\n          A RECORD IS BUILT FOR EVERY NEW PRODUCTION FILE.  SEE THE\n     DOCUMENTATION ON THE DM200PUP PROGRAM FOR THE RULES FOR RECORD\n     DELETION.  THE FILE IS MAINTAINED IN ASCENDING ORDER ON THE\n     DSNAME FIELD.\nINDEXPBDS.DM203DDM.VVDS.FIL\n     RECFM = FB  LRECL = 81\n\n     NAME      PIC       DESCRIPTION\n\n     DSN       X(44)     DATA SET NAME\n     ALOC      9(9)      TRACKS CURRENTLY ALLOCATED\n     USED      9(9)      TRACKS CURRENTLY USED\n     CISZ      9(5)      CONTROL INTERVAL SIZE\n     XTNT      9(3)      NUMBER OF EXTENTS\n     RECL      9(5)      MAXIMUM RECORD LENGTH\n     VOL       X(6)      VOLUME SERIAL\n\n          ONE RECORD IS BUILT FOR EACH 'Z' RECORD FOUND IN A VVDS.\n     THIS FILE SHOULD BE SORTED BEFORE USE.\nINDEXPBDS.DM203DDM.VVDS.SRT\n          SEE PBDS.DM203DDM.VVDS.FIL\nINDEXPBDS.DM206DDM.VTC.FIL\n     RECFM = FB  LRECL = 89\n\n     NAME      PIC       DESCRIPTION\n\n     DSNAME    X(44)     DATA SET NAME\n     VOLSER    X(6)      VOLUME SERIAL NUMBER\n     ALLOC     9(5)      CURRENT TRACKS ALLOCATED\n     USED      9(5)      CURRENT TRACKS USED\n     DSO       X(3)      DATA SET ORGANIZATION\n     BLKSZ     9(5)      BLOCK SIZE\n     LRECL     9(5)      LOGICAL RECORD LENGTH\n     RFM       X(3)      RECORD FORMAT\n     EXTENT-CT 9(3)      NUMBER OF EXTENTS\n     DT-CREATE 9(5)      FILE CREATION DATE\n     DT-REF    9(5)      DATE FILE WAS LAST REFERENCED\n\n          ONE RECORD IS BUILT FOR EACH FORMAT 1 DSCB FOUND IN A VTOC.\n     THIS FILE SHOULD BE SORTED BEFORE USE.\nINDEXPBDS.DM206DDM.VTC.SRT\n          SEE PBDS.DM206DDM.VTC.FIL\nINDEXPBDS.DM210DUM.PRD.FIL\n          SEE PBDS.DM206DDM.VTC.FIL\nINDEXPBDS.DM310WDM.VTC.FIL\n          SEE PBDS.DM206DDM.VTC.FIL\nINDEXPBDS.DM310WDM.VTC.SRT\n          SEE PBDS.DM206DDM.VTC.FIL\nINDEXPBDS.DM315WDM.VVDS.FIL\n          SEE PBDS.DM203DDM.VVDS.FIL\nINDEXPBDS.DM315WDM.VVDS.SRT\n          SEE PBDS.DM203DDM.VVDS.FIL\nINDEXPBDS.DM320WUM.TST.FIL\n          SEE PBDS.DM206DDM.VTC.FIL\nINDEXPBDS.DM330WDM.HSM.FIL\n          SEE PBDS.DM206DDM.VTC.FIL\nINDEXPBDS.DM330WDM.HSM.SRT\n          SEE PBDS.DM206DDM.VTC.FIL\nINDEXPBDS.DM340WDM.AREC.FIL\n     RECFM = FB  LRECL = 88\n\n     NAME      PIC       DESCRIPTION\n\n     DSND      X(44)     PRIMARY (D) DATA SET NAME\n     DSNA      X(44)     ALIAS   (A) DATA SET NAME\n\n          ONE RECORD IS BUILT FOR EACH ALIAS RECORD FOUND IN THE MCDS.\n     THE RECORD IS CHECKED TO INSURE THAT IT REPRESENTS A DATA SET\n     THAT IS STILL MIGRATED AS A RECORDS ARE NOT CLEANED UP UNTIL\n     SOME TIME AFTER RECALL.  THE FILE IS IN ORDER BY DSNA.\nINDEXPBDS.DM340WDM.DREC.FIL\n     RECFM = FB  LRECL = 124\n\n     NAME      PIC       DESCRIPTION\n\n     DSND      X(44)     PRIMARY (D) DATA SET NAME\n     DSNA      X(44)     ALIAS   (A) DATA SET NAME\n     PVOL      X(6)      VOLUME SERIAL BEFORE THE DATA SET WAS MIGRATED\n     MVOL      X(6)      VOLUME SERIAL OF THE MIGRATED DATA SET\n     LVL       X         MIGRATION LEVEL\n                         '1' - LEVEL 1\n                         '2' - LEVEL 2\n     DEV       X         MIGRATION DEVICE TYPE\n                         'D' - DISK\n                         'T' - TAPE\n     CSZ       9(7)      MIGRATED FILE SIZE IN 2K BLOCKS\n     RDAT      9(5)      PRIMARY FILE REF DATE       - FORMAT = YYDDD\n     CDAT      9(5)      PRIMARY FILE CREATE DATE    - FORMAT = YYDDD\n     MDAT      9(5)      PRIMARY FILE MIGRATE DATE   - FORMAT = YYDDD\n\n          ONE RECORD IS BUILT FOR EACH PRIMARY RECORD FOUND IN THE MCDS.\n     THE RECORD IS CHECKED TO INSURE THAT IT REPRESENTS A DATA SET THAT\n     IS STILL MIGRATED AS D RECORDS ARE NOT ALWAYS CLEANED UP\n     IMMEDIATELY.  THE FILE IS IN ORDER BY DSND.\nINDEXPBDS.DM350WUM.AREC.DEL\n     RECFM = FB  LRECL = 80\n\n     NAME      PIC       DESCRIPTION\n\n               X(9)      CONSTANT - 'FIXCDS A '\n     DSN       X(44)     DATA SET NAME (KEY) OF 'A' REC\n               X(7)      CONSTANT - ' DELETE'\n               X(20)     CONSTANT - SPACES\n\n          ONE RECORD IS GENERATED FOR EACH 'A' RECORD IN THE MCDS\n     THAT NEEDS TO BE DELETED.\nINDEXPBDS.DM350WUM.AREC.MRG\n     RECFM = FB  LRECL = 133\n\n     NAME      PIC       DESCRIPTION\n\n     DSND      X(44)     PRIMARY DATA SET NAME\n     VOL       X(6)      MIGRATE VOLUME SERIAL IF FOUND\n                         '      ' IF NOT FOUND\n     ALOC      9(5)      MIGRATE ALLOCATED TRACKS\n     USED      9(5)      MIGRATE USED TRACKS\n     DSO       X(3)      DATA SET ORGANIZATION OF MIGRATED DATA SET\n     BSIZ      9(5)      BLOCK SIZE OF MIGRATED DATA SET\n     RECL      9(5)      LOGICAL RECORD LENGTH OF MIGRATED DATA SET\n     RFM       X(3)      RECORD FORMAT OF MIGRATED DATA SET\n     XTNT      9(3)      NUMBER OF EXTENTS OF MIGRATED DATA SET\n     CDAT      9(5)      MIGRATED DATA SET CREATE DATE - FORMAT = YYDDD\n     RDAT      9(5)      MIGRATED DATA SET REF DATE    - FORMAT = YYDDD\n     DSNA      X(44)     ALIAS DATA SET NAME\n\n          THE DATA FROM THE VTOC SCAN IS MERGED WITH THE 'A' RECORD\n     INFORMATION FROM THE MCDS.  ALL FIELDS SHOULD BE FILLED IN FOR\n     A DATA SET THAT IS MIGRATED TO DISK.  TAPE OR MISSING DATA SETS\n     WILL HAVE A VOL OF '      ' AND MANY OF THE OTHER FIELDS WILL\n     NOT BE FILLED IN.  A 'MIGRATED' DATA SET THAT IS ON THE PACK\n     BUT DOES NOT HAVE AN 'A' REC WILL BE DROPPED.  THE FILE SHAPE\n     INFORMATION (LRECL, DSO, ETC.) IS LARGELY USELESS BECAUSE WE DON'T\n     CARE WHAT THE MIGRATED DATA SET LOOKS LIKE, ONLY THE DATA SET\n     IT CAME FROM.\nINDEXPBDS.DM350WUM.AREC.SRT\n          SEE PBDS.DM350WUM.AREC.MRG\nINDEXPBDS.DM350WUM.DREC.DEL\n     RECFM = FB  LRECL = 80\n\n     NAME      PIC       DESCRIPTION\n\n               X(9)      CONSTANT - 'FIXCDS D '\n     DSN       X(44)     DATA SET NAME (KEY) OF 'D' REC\n               X(7)      CONSTANT - ' DELETE'\n               X(20)     CONSTANT - SPACES\n\n          ONE RECORD IS GENERATED FOR EACH 'D' RECORD IN THE MCDS\n     THAT NEEDS TO BE DELETED.\nINDEXPBDS.DM350WUM.MCDS.FIL\n     RECFM = FB  LRECL = 80\n\n     NAME      PIC       DESCRIPTION\n\n     DSND      X(44)     PRIMARY (D) DATA SET NAME\n     ALOC      9(5)      MIGRATE ALLOCATED TRACKS\n     XTNT      9(3)      MIGRATE NUMBER OF EXTENTS\n     DSNA      X(44)     ALIAS   (A) DATA SET NAME\n     VOLP      X(6)      VOLUME SERIAL BEFORE MIGRATION\n     VOLM      X(6)      MIGRATE VOLUME SERIAL\n     LVL       X         MIGRATE LEVEL\n                         '1' - LEVEL 1\n                         '2' - LEVEL 2\n     DEV       X         MIGRATE DEVICE TYPE\n                         'D' - DISK\n                         'T' - TAPE\n     SIZE      9(7)      MIGRATE FILE SIZE IN 2K BLOCKS\n     RDAT      9(5)      PRIMARY DATA SET REF     DATE - FORMAT = YYDDD\n     CDAT      9(5)      PRIMARY DATA SET CREATE  DATE - FORMAT = YYDDD\n     MDAT      9(5)      PRIMARY DATA SET MIGRATE DATE - FORMAT = YYDDD\n\n          ONE RECORD IS CREATED FOR EACH 'CLEAN' MIGRATED DATA SET.\nINDEXPBDS.DM360WUM.LVL2.DEL\n     RECFM = FB  LRECL = 80\n\n     NAME      PIC       DESCRIPTION\n\n               X(7)      CONSTANT - 'DELETE '\n     DSN       X(44)     DATA SET NAME (KEY) OF 'D' REC\n               X(29)     CONSTANT - SPACES\n\n          ONE RECORD IS GENERATED FOR EACH LEVEL 2 DATA SET THAT\n     HAS EXPIRED.\nINDEXPBDS.DM360WUM.TST.MST\n     RECFM = FB  LRECL = 80\n\n     NAME      PIC       DESCRIPTION\n\n     DSN       X(44)     PM - PRIMARY DATA SET NAME\n     VOLP      X(6)      PM - PRIMARY VOLUME SERIAL\n     ALOC      9(5)      PM - ALLOCATION IN TRACKS\n                         P  - PRIMARY ALLOCATION IN TRACKS\n                          M - (DEV = 'D') MIGRATE TRACKS ALLOCATED\n                          M - (DEV = 'T') CONSTANT - '    0'\n     USED      9(5)      P  - PRIMARY TRACKS USED\n     DSO       X(3)      P  - PRIMARY DATA SET ORGANIZATION\n     BSIZ      9(5)      P  - PRIMARY BLOCK SIZE\n     RECL      9(5)      P  - PRIMARY LOGICAL RECORD LENGTH\n     RFM       X(3)      P  - PRIMARY RECORD FORMAT\n     XTNT      9(3)      P  - PRIMARY EXTENT COUNT\n     CDAT      9(5)      PM - PRIMARY CREATE DATE - FORMAT = YYDDD\n     RDAT      9(5)      PM - PRIMARY REF    DATE - FORMAT = YYDDD\n     VOLM      X(6)       M - MIGRATE VOLUME SERIAL\n     LVL       X         PM - MIGRATE LEVEL\n                         P  - P = PRIMARY\n                          M - 1 = LEVEL 1\n                          M - 2 = LEVEL 2\n     DEV       X          M - MIGRATE DEVICE\n                          M - D = DISK\n                          M - T = TAPE\n     SIZE      9(7)       M - MIGRATE FILE SIZE IN 2K BLOCKS\n     AAM       X(3)      PM - ACCOUNTING CODE\n\n          ONE RECORD IS BUILT FOR EACH FILE REGUARDLESS OF WHETHER IT IS\n     A PRIMARY FILE OR A MIGRATED FILE.  THE P/M THAT PRECEEDS THE FIELD\n     DESCRIPTION INDICATES WHETHER THE FIELD IS FILLED IN FOR A PRIMARY\n     OR MIGRATED FILE.  'PM' INDICATES THAT IT IS ALWAYS FILLED IN.  'P'\n     ALONE INDICATES THAT THE FIELD IS ONLY FILLED IN FOR PRIMARY FILES.\n     'M' ALONE INDICATES THAT THE FIELD IS ONLY FILLED IN FOR MIGRATED\n     FILES.  ALL MISSING FIELDS WILL BE FILLED WITH SPACES.  A 'P' IN\n     THE LVL FIELD INDICATES THAT THE FILE IS A PRIMARY FILE.  A '1' OR\n     '2' INDICATE THAT IT HAS MIGRATED.\nINDEXPBDS.DM380MUM.BIL.FIL\n          SEE PBDS.DM200RRP.BIL.FIL\nINDEXPBDS.DM380MUM.HST.FIL\n     RECFM = FB  LRECL = 57\n\n     NAME      PIC       DESCRIPTION (HEADER REC)\n\n     LIT       X(11)     CONSTANT 'DM-HST-HEAD'\n     DATE      X(8)      FILE DATE IN MM/DD/YY FORMAT\n               X(38)     FILLER\n\n     NAME      PIC       DESCRIPTION DETAIL REC)\n\n     GRP       999       THREE DIGIT GROUP CODE\n     AAM       XXX       THREE LETTER AAM ACCOUNTING CODE\n     DSNAME    X(44)     DATA SET NAME\n     ALLOC     9(5)      CURRENT ALLOCATION\n     L         X         MIGRATE LEVEL\n                         P = PRIMARY\n                         1 = LEVEL 1\n                         2 = LEVEL 2\n     D         X         MIGRATE DEVICE\n                         D = DISK\n                         T = TAPE\n\n          THERE IS 1 HEADER RECORD AT THE BEGINNING OF THE FILE.\n     THERE IS ONE DETAIL RECORD FOR EVERY PRODUCTION FILE.  THE\n     DETAIL RECORDS ARE IN ASCENDING ORDER BY GRP AAM AND DSNAME.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "GETCTRL": {"ttr": 7684, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00\\x9e\\x00\\x9e\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 158, "newlines": 158, "modlines": 0, "user": "FILE097"}, "text": "       IDENTIFICATION DIVISION.\n       PROGRAM-ID.\n                   GETCTRL\n                   CALLABLE SUB-ROUTINE.\n      *PURPOSE - TO OPEN A CONTROL FILE, LOCATE THE APPROPRIATE CONTROL\n                 RECORD, MOVE IT TO WORKING STORAGE, CLOSE THE FILE.\n      *METHOD  - IF MORE THAN ONE CONTROL RECORD IS PRESENT IN THE FILE,\n                 WITH THE CALLING PROGRAM'S ID IN THE NAME FIELD\n                 THE LAST ONE WILL BE IN THE CALLING PROGRAM'S WORKING\n                 STORAGE AREA WHEN CONTROL IS RETURNED.\n                 THE CALLING PROGRAM MUST SET UP, IN WORKING STORAGE,\n                 AN 80 BYTE FIELD IN THE SAME FORMAT AS CTRL001.\n                 YOU MAY INCLUDE CTRL001.  IN PROCEDURE DIVISION,\n                 MOVE YOUR PROGRAM ID TO THE ID FIELD IN THAT AREA.\n                 PRIOR TO CALLING 'GETCTRL', AN EDIT OF THE CONTROL\n                 RECORD MAY BE INVOKED BY MOVING 'EDIT' TO CTRL-CARD.\n                 IF 'EDIT' IS NOT MOVED TO CTRL-CARD SPACES SHOULD BE\n                 MOVED TO THAT AREA TO CLEAR IT.\n                 IF 'MM/DD/YY' IS THE DATE IN THE CONTROL RECORD AND\n                 'EDIT' IS LOCATED IN THE FIRST FOUR CHARACTERS OF\n                 CTRL-CARD, THE SYSTEM DATE WILL BE SUBSTITUTED BY\n                 'GETCTRL'.  IF A DATE IS PRESENT IT WILL BE TESTED FOR\n                 TWO NUMERIC CHARACTERS FOLLOWED BY A SLASH FOLLOWED\n                 BY TWO NUMERIC CHARACTERS FOLLOWED BY A SLASH\n                 FOLLOWED BY TWO MORE NUMERIC CHARACTERS.  IF THE TESTS\n                 NOT MET, AN ABEND WILL OCCUR WITH A USER CODE OF 1004.\n                 A DD CARD MUST BE INCLUDED IN JCL AS FOLLOWS:\n                   FOR CARD INPUT,\n                 //CTRLFILE  DD    *\n                 (THE CONTROL CARD/S GO HERE)\n                 /*\n                   FOR DISK INPUT,\n                 //CTRLFILE  DD    DSN=(               )\n       ENVIRONMENT DIVISION.\n       CONFIGURATION SECTION.\n       SOURCE-COMPUTER.\n           IBM-370.\n       OBJECT-COMPUTER.\n           IBM-370.\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n           SELECT CONTROL-FILE\n               ASSIGN TO UT-S-CTRLCTRL.\n       DATA DIVISION.\n       FILE SECTION.\n       FD  CONTROL-FILE\n           RECORDING MODE IS F\n           LABEL RECORDS ARE STANDARD\n           RECORD CONTAINS 80 CHARACTERS\n           BLOCK CONTAINS 0 RECORDS\n           DATA RECORD IS CTRL-RECORD.\n       01  CTRL-RECORD.\n           02  CR-CTRL             PIC XXXX.\n           02  FILLER              PIC X.\n           02  CR-PROG-ID          PIC X(8).\n           02  FILLER              PIC X(67).\n       WORKING-STORAGE SECTION.\n       01  USER-RC                 PIC S9999  COMP SYNC  VALUE +0.\n       01  EOF-SWITCH              PIC X   VALUE LOW-VALUES.\n           88  CTRL-EOF    VALUE IS HIGH-VALUES.\n       01  FOUND-SWITCH            PIC X   VALUE LOW-VALUES.\n           88  CTRL-NOT-FOUND  VALUE IS LOW-VALUES.\n       01  EDIT-SWITCH             PIC X VALUE LOW-VALUES.\n           88  EDIT-ON  VALUE IS HIGH-VALUES.\n       01  TEST-DATE.\n           02  TEST-MO             PIC 99.\n           02  TEST-SL-1           PIC X.\n           02  TEST-DA             PIC 99.\n           02  TEST-SL-2           PIC X.\n           02  TEST-YR             PIC 99.\n       LINKAGE SECTION.\n      ************************************************************\n      *              CTRL001,BRFB *\n      * **********************************************************\n           SKIP1\n       01  CTRL-CARD.\n           02  CTRL-TYPE           PIC XXXX.\n           02  FILLER              PIC X.\n           02  CTRL-PID            PIC X(8).\n           02  FILLER              PIC X.\n           02  CTRL-BANK           PIC XXX.\n           02  FILLER              PIC X.\n           02  CTRL-DATE           PIC X(8).\n           02  FILLER              PIC X.\n           02  CTRL-SWITCHES.\n               03  SW-1            PIC X.\n               03  SW-2            PIC X.\n               03  SW-3            PIC X.\n               03  SW-4            PIC X.\n               03  SW-5            PIC X.\n               03  SW-6            PIC X.\n               03  SW-7            PIC X.\n               03  SW-8            PIC X.\n               03  SW-9            PIC X.\n               03  SW-10           PIC X.\n      *  FOLLOWING FIELDS MATCH DDA CTRL CARD FORMAT *\n           02  CTRL-USER-AREA.\n               03  FILLER          PIC X.\n               03  CTRL-CUR-DT.\n                   04  CTRL-CUR-MM     PIC XX.\n                   04  CTRL-CUR-DD     PIC XX.\n                   04  CTRL-CUR-YY     PIC XX.\n               03  CTRL-PREV-DT.\n                   04  CTRL-PREV-MM    PIC XX.\n                   04  CTRL-PREV-DD    PIC XX.\n                   04  CTRL-PREV-YY    PIC XX.\n               03  CTRL-DAYS-SINCE-LAST-PROC   PIC 9.\n               03  CTRL-NEXT-DT.\n                   04  CTRL-NEXT-MM    PIC XX.\n                   04  CTRL-NEXT-DD    PIC XX.\n                   04  CTRL-NEXT-YY    PIC XX.\n               03  CTRL-DAYS-TO-NEXT-PROC      PIC 9.\n               03  CTRL-FILLER-1   PIC X(13).\n               03  FILLER REDEFINES CTRL-FILLER-1.\n                   04  FILLER      PIC X.\n                   04  CTRL-2ND-NEXT-DATE.\n                       05  CTRL-2ND-NEXT-MM  PIC XX.\n                       05  CTRL-2ND-NEXT-DD  PIC XX.\n                       05  CTRL-2ND-NEXT-YY  PIC XX.\n                   04  FILLER      PIC X(6).\n           02  CTRL-COL-72         PIC X.\n           02  CTRL-COL-73-80      PIC X(8).\n      ******************************************************************\n      *\n       PROCEDURE DIVISION USING CTRL-CARD.\n      *\n           MOVE SPACES TO TEST-DATE.\n           IF CTRL-TYPE = 'EDIT',\n                   MOVE HIGH-VALUES TO EDIT-SWITCH.\n           OPEN INPUT CONTROL-FILE.\n           MOVE LOW-VALUES TO EOF-SWITCH, FOUND-SWITCH.\n           PERFORM READ-CONTROL THRU RC-EXIT UNTIL CTRL-EOF.\n           CLOSE CONTROL-FILE.\n           IF CTRL-NOT-FOUND,\n                   MOVE -1004 TO USER-RC,\n                   CALL 'USERDUMP' USING USER-RC.\n           MOVE CTRL-DATE TO TEST-DATE.\n           IF EDIT-ON,\n               AND TEST-DATE = 'MM/DD/YY',\n                   MOVE CURRENT-DATE TO TEST-DATE, CTRL-DATE.\n           IF EDIT-ON AND (TEST-MO NOT NUMERIC,\n                           OR TEST-SL-1 NOT = '/',\n                           OR TEST-DA NOT NUMERIC,\n                           OR TEST-SL-2 NOT = '/',\n                           OR TEST-YR NOT NUMERIC),\n                   MOVE -1004 TO USER-RC,\n                   CALL 'USERDUMP' USING USER-RC.\n           GOBACK.\n      *\n       READ-CONTROL.\n           READ CONTROL-FILE AT END\n                   MOVE HIGH-VALUES TO EOF-SWITCH,\n                   GO TO RC-EXIT.\n           IF CR-CTRL = 'CTRL',\n               AND CR-PROG-ID = CTRL-PID,\n                   MOVE CTRL-RECORD TO CTRL-CARD,\n                   MOVE HIGH-VALUES TO FOUND-SWITCH.\n       RC-EXIT.        EXIT.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HSMMCDS": {"ttr": 7688, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00\\x8e\\x00\\x8e\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 142, "newlines": 142, "modlines": 0, "user": "FILE097"}, "text": "*\n*         RECORD LAYOUT FOR THE HSM MCDS - SEE LY35 0026\n*\n*\n*         'K' SECTION - COMMON FIELDS\n*\nMCK      DS    XL44           RECORD KEY\nMCH      DS    0CL20          HEADER\nMCHLEN   DS    H              RECORD LENGTH INCLUDING KEY AND HEADER\nMCHTYPE  DS    X              RECORD TYPE\nMCHTYPED EQU   X'00'          DATA SET (MIGRATE)\nMCHTYPEU EQU   X'01'          USER\nMCHTYPE1 EQU   X'02'          FREESPACE ON MIGRATION LEVEL 1\nMCHTYPEV EQU   X'04'          VOLUME\nMCHTYPEN EQU   X'07'          JES3 VOLUME ALLOC COUNT\nMCHTYPES EQU   X'10'          STATISTICS OR CONTROL\nMCHTYPEA EQU   X'11'          MIGRATED COPY NAME\nMCHTYPEO EQU   X'12'          VSAM DATA SET ASSOCIATIONS\n*\nMCHTYPEB EQU   X'20'          DATASET (BACKUP)\nMCHTYPEC EQU   X'24'          BACKUP VERSION ENTRY\nMCHTYPEM EQU   X'26'          MOVE BACKUP COPY\nMCHTYPEL EQU   X'27'          BACKUP MIGRATED DATASET\nMCHTYPEP EQU   X'28'          VOLUME THAT HAS BEEN BACKED UP\nMCHTYPEX EQU   X'2C'          BACKUP VOLUME\nMCHTYPER EQU   X'30'          CONTROL\n*\nMCHTYPET EQU   X'32'          TAPE TABLE OF CONTENTS\n         DS    X              RESERVED\nMCHTSLU  DS    XL8            RECORD UPDATE TIME STAMP (STCK FORMAT)\nMCHSTCR  DS    XL8            RECORD CREATE TIME STAMP (STCK FORMAT)\nMCKEND   DS    0X             END OF STANDARD HEADER\n*\n*         'A' SECTION - ALIAS ENTRY RECORD\n*\n         ORG   MCKEND         BACK TO END OF COMMON SECTION\nMCAINTTP DS    C              RECALL INTERCEPT TYPE\nMCAINTTD EQU   C'D'           DATA OBJECT\nMCAINTTI EQU   C'I'           INDEX OBJECT\nMCAINTTR EQU   C'R'           PATH OBJECT\nMCAINTTG EQU   C'G'           AIX OBJECT\nMCAINTTM EQU   C'M'           GENERATED NAME OF MIGRATION DATA SET\nMCAVSATP DS    C              VSAM ASSOCIATION TYPE\nMCAVSATC EQU   C'C'           CLUSTER\nMCAVSATG EQU   C'G'           AIX\n         DS    XL2            RESERVED\nMCAINTNM DS    CL44           DATA SET RECORD KEY\n*\n*         'D' SECTION - DATA SET RECORD\n*\n         ORG   MCKEND         BACK TO END OF COMMON SECTION\nMCDVSN   DS    CL6            VOL SER OF MIGRATION VOLUME\nMCDFLGS  DS    0XL2           FLAGS\nMCDFLG1  DS    X\nMCDFLASN EQU   B'10000000'    MIGRATED COPY EXISTS\nMCDFLMIG EQU   B'01000000'    DATA SET IS TO BE MIGRATED\nMCDFNOMG EQU   B'00100000'    RETAINED FROM MIGRATION\nMCDFDEL  EQU   B'00010000'    DATA SET WAS DELETED\nMCDFSDP  EQU   B'00001000'    VSAM SMALL DATASET PACKING\nMCDFL2   EQU   B'00000100'    DATA SET IS ON LEVEL 2\nMCDFNSCR EQU   B'00000010'    RECALLED BUT MIG COPY NOT YER SCRATCHED\nMCDJES3  EQU   B'00000001'    RECORD PROCESSED DURING JES3 SETUP\nMCDFLG2  DS    X\nMCDFMCO  EQU   B'10000000'    MCO RECORD EXISTS\nMCDFMIGP EQU   B'01000000'    VSAM MIGRATION IN PROGRESS\nMCDNOUPD EQU   B'00100000'    RACF PROFILE NOT UPDATED\nMCDRACND EQU   B'00010000'    RACF INDICATED\n*        EQU   B'00001000'    RESERVED\nMCDFSMVL EQU   B'00000100'    SPACE MANAGMENT FLAGS VALID\nMCDFDUMD EQU   B'00000010'    DUMMY RECORD\nMCDFR3   EQU   B'00000001'    RECORD CREATED BY HSM REL 3\nMCDCOMPR DS    X              PER CENT SAVED BY COMPACTION\n         DS    XL3            RESERVED\nMCDDLC   DS    XL4            DATE CREATED           00YYDDDF\nMCDTLR   DS    XL4            TIME LAST REF'D        HHMMSSTH\nMCDDLR   DS    XL4            DATE LAST REF'D        00YYDDDF\nMCDTLU   DS    XL4            TIME LAST UPDATED      HHMMSSTH\nMCDDLU   DS    XL4            DATE LAST UPDATED      00YYDDDF\nMCDTMIG  DS    XL4            TIME LAST MIGRATE      HHMMSSTH\nMCDDMIG  DS    XL4            DATE LAST MIGRATE      00YYDDDF\nMCDDSORG DS    XL2            DATA SET ORGANIZATION FROM DSCB\nMCDBLKSZ DS    H              BLOCK SIZE\nMCDKEYLN DS    X              KEY LENGTH\nMCDRECFM DS    X              RECORD FORMAT FROM DSCB\nMCDDSIND DS    X              DATA SET INDICATORS FROM FMT1\nMCDHID   DS    X              PROCESSOR ID OF PROCESSOR USING REC\nMCDSIZE  DS    F              USER SIZE ALLOCATED IN TRACKS\nMCDSIZEB DS    F              USER SIZE USED      IN BYTES\nMCDCSZ   DS    F              SIZE IN 2K BLOCKS ON MIG VOL\nMCDNMIG  DS    H              NUMBER OF TIMES MIGRATED\nMCDDAYS  DS    H              DAYS BEFORE FILE ELIGIBLE FOR MIG\nMCDFRVSN DS    0CL6           MIG FROM VOL SER\nMCDOVSN  DS    CL6            RECALLED TO VOL SER\nMDCFLG3  DS    X              FLAGS\nMCDFMCL  EQU   B'10000000'    MCL RECORD EXISTS\nMCDMCL43 DS    X              CHAR 43 FOR MCL RECORD KEY\nMCDCTID  DS    XL4            COMPACTION TABLE ID\nMCDUCBTY DS    XL4            UCBTYPE OF DATA SET FROM DSCB\nMCDTRES  DS    XL4            TIME DATA SET REC/DEL  HHMMSSTH\nMCDDRES  DS    XL4            DATE DATA SET REC/DEL  00YYDDDF\nMCDMDEVT DS    0XL4           DEVT OF MIGRAT VOL\n         DS    X              RESERVED\n         DS    X\nMCDFMVRT EQU   X'08'          VOLUME IS A VIRTUAL VOLUME\n         DS    X\nMCDTPDEV EQU   X'80'          USING TAPE DEVICE\nMCDFMVDA EQU   X'20'          USING DASD DEVICE\n         DS    X              RESERVED\nMCDJDAYS DS    X              USED TO CHANGE DEF # DAYS TO MIG\nMCDJDATE DS    XL3            LAST DATE THAT HSM WILL DELAY MIG\nMCDJVEXD DS    XL3            LAST DATE HSM WILL HOLD VAL IN MCDJVOLS\nMCDPDEP  DS    X              SWITCH\n*              X'01'          VOLUMES IN MCDJVOLS FROM GENERAL POOL\n*              X'02'          VOLUMES IN MCDJVOLS FROM USER    POOL\nMCDJCT   DS    X              NUMBER OF ELIG VOLS FOR DIRECTED RECALL\nMCDJVOLS DS    0XL10          FIRST ENTRY\nMCDJVSN1 DS    CL6            FIRST    VOL SER\nMCDJCT1  DS    XL4            FIRST    DEVT\nMCDJVSN2 DS    CL6            SECOND   VOL SER\nMCDJCT2  DS    XL4            SECOND   DEVT\nMCDJVSN3 DS    CL6            THIRD    VOL SER\nMCDJCT3  DS    XL4            THIRD    DEVT\nMCDJVSN4 DS    CL6            FOURTH   VOL SER\nMCDJCT4  DS    XL4            FOURTH   DEVT\nMCDJVSN5 DS    CL6            FIFTH    VOL SER\nMCDJCT5  DS    XL4            FIFTH    DEVT\nMCDRECAK DS    X              FLAGS\nMCDFDBA  EQU   B'10000000'    DATA SET MUST BE RECALLED IF 0\nMCDFRBU  EQU   B'01000000'    1 = FROM VOL WITH DEL IF BKU FLAG SET\n*                             0 = FROM VOL WITH DEL BY AGE FLAG SET\n*                             SWITCH VALID ONLY IF MCDFDBA = 1\nMCDFBDCS EQU   B'00100000'    MIG FROM VOL WITH BKP DEV CAT SPEC\nMCDFBDCT EQU   B'00010000'    1 = FR VOL WITH BKP DEV CAT = TAPE\n*                             0 = FR VOL WITH BKP DEV CAT = DASD\n*                             SWITCH VALID ONLY IF MCDFDCS = 1\nMCDFAM   EQU   B'00001000'    RECALL TO VOL AUTO SPC MGMT THIS CPU\nMCDFAB   EQU   B'00000100'    RECALL TO VOL AUTO BACKUP   THIS CPU\n*        EQU   B'00000010'    RESERVED\n*        EQU   B'00000001'    RESERVED\nMCDEXPDT DS    XL4            EXPDT FROM USER VOL\nMCDMCANM DS    CL44           KEY OF MCA REC\n         ORG   ,              TO THE END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HSMMWE": {"ttr": 7692, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00\\xbc\\x00\\xbc\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 188, "newlines": 188, "modlines": 0, "user": "FILE097"}, "text": "*\n*        REF:  LY35-0077 DATA FACILITY HIRERARCHICAL STORAGE MANAGER\n*                        DIAGNOSIS REFERENCE VOLUME 2\n*\n*        MWE - MANAGEMENT WORK ELEMENT\n*\nMWEHDR   DS    0XL140\nMWEFWD   DS    F\nMWEBWD   DS    F\nMWESPN   DS    CL1\nMWELEN   DS    AL3\nMWEFSR   DS    F\nMWETSTIM DS    F\nMWETSDAT DS    F\nMWEFUNC  DS    X\n*\n*   CODE 0 - RETURN QUEUE CONTROL TABLE PTR\n*        1 - START HSM\n*        2 - STOP HSM\n*        3 - RECALL A DATA SET\n*        4 - UNUSED\n*        5 - RECOVER A DATA SET\n*        6 - MIGRATE A DATA SET\n*        7 - BACK UP A DATA SET\n*        8 - READ A CONTROL DATA SET RECORD\n*        9 - PROCESS AN OPERATOR COMMAND\n*       10 - POST AN MWE AS COMPLETED\n*       11 - PURGE MWE'S\n*       12 - DELETE A MIGRATED DATA SET\n*\nMWEFLGS  DS    0XL3\nMWEFLG11 DS    X\n*        EQU   B'10000000' RESERVED\nMWEFNOW  EQU   B'01000000' NOWAIT WAS SPECIFIED\nMWEFRECV EQU   B'00100000' HSM HAS COPIED MWE INTO ITS ADDR SPACE\nMWEFTSOR EQU   B'00010000' THIS MWE IS TSO INTERACTIVE REQUEST\n*        EQU   B'00001000' RESERVED\nMWEMLEV2 EQU   B'00000100' IF MWEFUNC=6 THEN MIGRATE TO LEVEL 2\nMWEFDATE EQU   B'00000100' IF MWEFUNC=5 THEN MWEDATE CONTAINS DATE\nMWEFRTYW EQU   B'00000010' TASK IS WAITING FOR VOLUME BEFORE RETRY\nMWEFUNWT EQU   B'00000001' USER HAS BEEN NOTIFIED THAT MWE IS WAITING\nMWEFLG12 DS    X\nMWE29DU  EQU   B'10000000' REQUEST IS FROM IGG029DU\nMWEGDG   EQU   B'01000000' SCRATCH GDG FROM CATALOGUE MANAGEMENT\nMWEFEX0A EQU   B'00100000' REQUEST IS FROM IGG0EX0A\nMWEFPODS EQU   B'00010000' MIG,DEL OR RECL REQUIRES OLD DATA SET PURGE\nMWEFNOMT EQU   B'00001000' NO WAIT FOR VOLUME MOUNT\nMWEFBTOT EQU   B'00000100' BACKUP IS TOTAL, ELSE INCREMENTAL\nMWEFKGT  EQU   B'00000010' IF MWEFUNC=8 THEN GET KEY GRTR THAN SPECFD\n*                      0   IF MWEFUNC=8 THEN GET KEY EQUAL TO SPECFD\nMWEFNCAT EQU   B'00000001' GET NEXT CONTROL DATA SET RECORD\n*                       0  GET SPECIFIED CONTROL DATA SET RECORD\nMWEFLG13 DS    X\nMWEFDAYS EQU   B'10000000' MWEDAYS CONTAINS VALID DATE\nMWEFAUTH EQU   B'01000000' SENDER OF MWE HAS SPACE MANAGEMENT AUTH\nMWEFRSV  EQU   B'00100000' IF MWEFUNC=3 VOLUME SPECIFIED FOR RECALL\nMWEFTERM EQU   B'00100000' IF MWEFUNC=6 ROUTE LOG OUTPUT TO TERMINAL\n*                              FOR MIGRATE REQUEST\nMWEFDONE EQU   B'00010000' THIS MWE HAS BEEN PROCESSED\nMWEFABND EQU   B'00001000' HSM ABNORMALLY TERMINATED THIS MWE\nMWEFOP   EQU   B'00000100' THIS MWE IF FOR OPERATOR COMMAND\nMWEFMFRC EQU   B'00000010' FORCE VOL MOUNT EVEN IF MCV SHOWS IN USE\nMWEFBUSY EQU   B'00000001' MWE IS BEING PROCESSED BY HSM\nMWEUID   DS    0CL8  ID FOR TSO USER MAKING REQUEST\n*                    A DUMMY ID OTHERWISE\n         DS    CL7   FIRST SEVEN CHARS OF TSO ID\n*                    '**OPER*' IF FROM OPERATOR CONSOLE\nMWECONID DS    X     CONSOLE ID IF FROM OPERATOR CONSOLE\nMWERQN   DS    F     HSM MWE NUMBER\nMWEASCB  DS    F     USER ASCB ADDR\nMWEECB   DS    F     ECB FOR WAITING UNTIL MWE DONE\nMWERC    DS    F     RETURN CODE\nMWEREAS  DS    F     REASON CODE\nMWEID    DS    CL4   MUST BE 'MWE '\nMWEABCC  DS    F     SYSTEM ABEND CODE\nMWEGROUP DS    XL8   GROUP ID FOR RACF\nMWELOCK  DS    X     LOCK BYTE FOR CROSS-MEMORY POST IF TSO AND\n*                    ATTENTION INTERRUPT OCCURS\nMWEFLG2  DS    0CL2\nMWEFLG21 DS    X\nMWEFATMP EQU   B'10000000'   CONSIDERED BUT NOT PROCESSED BECAUSE\n*                            IT CONFLICTED WITH AN EXECUTING MWE\n*                            OR THE FUNCTION IS HELD\nMWEFBDCS EQU   B'01000000'   BACKUP DEVICE CATEGORY SPECIFIED\nMWEFBDCT EQU   B'00100000'   IF MWEFBDCS=1 THEN DEVICE IS TAPE\n*                  0         IF MWEFBDCS=1 THEN DEVICE IS DISK\nMWEFSMSP EQU   B'00010000'   THIS COMMAND DOES SPACE MANAGEMENT\nMWEFDBA  EQU   B'00001000'   0 = MIGRATE, OTHERWISE SEE MWEFRBU\nMWEFRBU  EQU   B'00000100'   IF MWEFDBA=1 THEN DATA SET RETIREMENT OK\n*                     0      IF MWEFDBA=1 THEN DATA SET DELETION OK\nMWEFCNVT EQU   B'00000010'   CNVT FUNC REQ OR XTND REDUCE DONE\nMWEFSTCK EQU   B'00000001'   STCK HAS BEEN DONE FOR THIS MWE\nMWEFLG22 DS    X\nMWEFRDRC EQU   B'10000000'   MCD MUST BE READ TO STORE IN THIS MWE\n*                            THE BEGINNING AND ENDING TAPE VOLSERS\n*                            FOR THE MIGRATED DATA SET\nMWEFINHB EQU   B'01000000'   THIS MWE NOT SELECTED DURING RECALL Q SCAN\nMWEFNATT EQU   B'00100000'   ARCATTNW SHOULD NOT ATTACH THE SVC\nMWEFDNOW EQU   B'00010000'   ARCCTL SHOULD DELETE THIS MWE AFTER ARCCTL\n*                            COPIES IT TO THE DFHSM ADDRESS SPACE\nMWEF26DU EQU   B'00001000'   DELETE REQUEST FROM IGG026DU\nMWEFWSDP EQU   B'00000100'   WAITING FOR ANOTHER RECALL FROM SDSP\n*        EQU   B'00000011'   RESERVED\nMWERCLCT DS    0X     NUMBER OF ATTEMPTS AT RECALL OF DATA SET\nMWEATCTR DS    X      ALIAS FOR MWERCLCT\nMWEJBN   DS    CL8    REQUESTOR JOB NAME\nMWERST   DS    F      READER START TIME FOR JOB  HHMMSSTH\nMWERSD   DS    F      READ START DATE OF JOB     00YYDDDS\nMWERHSCT DS    X      TIMES RECALL TRIED WHILE ANOTHER CPU WAS USING\n*                     THE DATASET\n         DS    XL3    RESERVED\n         DS    XL16   RESERVED\n         DS    XL16   RESERVED\n         DS    XL4    RESERVED\nMWEVINUS DS    CL6    VOLSER OF TAPE CAUSING RC=82 FOR MSG ARC0380I\n         DS    XL2    RESERVED\nMWEHDRND DS    0X     END OF MWEHDR\n*\n         ORG   MWEHDRND\n*\n*   APPENDED TO HEADER FOR OPERATOR COMMANDS OR HSEND\n*\nMWECMDL  DS    H       LENGTH OF COMMAND TEXT PLUS 4\nMWECMDO  DS    H       OFFSET FOR TSO SCAN AND PARSE\nMWECMDT  DS    0C      COMMAND TEXT\n*\n         ORG   MWEHDRND\n*\n*   APPENDED TO HEADER FOR OTHER THAN OPER COMMANDS OR HSEND\n*\nMWEMCNT  DS    H     NUMBER OF MWE IN THIS REQUEST\nMWESEQN  DS    H     SEQUENCE NUMBER IN MULTIPLE REQUEST\nMWECCNT  DS    H     NUMBER OF MWE PROCESSED IN THIS REQUEST SO FAR\nMWEDARC  DS    H     DYNAMIC ALLOCATION RETURN CODE\nMWEDSN   DS    CL44  DATA SET NAME\n         DS    XL8   RESERVED\nMWEPW    DS    CL8   DATA SET PASSWORD\nMWEDEVT  DS    XL4   DEVICE TYPE AS IN UCB\nMWEVSN   DS    CL6   VOLSER  '*ALL  ' MEANS ALL VOLUMES\n*                            '*LEV0 ' MEANS ALL PRIMARY\n*                            '*LEV1 ' MEANS ALL ML1\nMWECETYP DS    C     IF MWEFUNC=8 THEN IS CONTROL DATAT SET TYPE\nMWEFRACF DS    X     RACF FLAGS AS ACEEFLG1 IN ACEE\nMWEGEN   DS    0F    IF MWEFDATE = 0 THEN IS BACKUP VERSION NUMBER\nMWEDATE  DS    0F    IF MWEFDATE = 1 THEN IS 00YYDDDS FOR RECOVER\nMWE2DEVT DS    F     DEVT OF MWE2VSN VOL\nMWEDAYS  DS    F     DAYS PARAMETER FROM MIGRATE COMMAND\nMWE2VSN  DS    CL6   VSN OF THE CONVERT PARAM OF MIGRATE CMD\n         DS    XL2   RESERVED\nMWEDBADY DS    H     DBA DAYS FROM MIGRATE COMMAND\nMWECVSN  DS    CL6   VOLSER OF CATALOG VOLUME\nMWECDEVT DS    F     DEVICE TYPE OF CATALOG VOLUME\nMWEPDEP  DS    F     ADDR OF POOL DESCRIPTOR ELEMENT\nMWESTAMP DS    F     TWO MINUTE WAIT INTERVAL STAMP\n         DS    XL12  RESERVED\nMWEFBID  DS    F     FILE SEQ OF MIGRATED DATA SET ON TAPE\nMWESTVOL DS    CL6   VOL SER OF TAPE WHERE MIGRATED DATA SET BEGINS\nMWELSTVL DS    CL6   VOL SER OF TAPE WHERE MIGRATED DATA SET ENDS\nMWEBUFL  DS    H     LENGTH OF BUFFER OF CONTROL DATA SET\nMWEBUFU  DS    H     LENGTH USED IN THAT BUFFER\nMWEBUFD  DS    0C    BUFFER OF DATA FROM CONTROL DATA SET\n*\n         ORG   MWEBUFD\n*\n*   APPENDED TO THE MWE FOR RECOVER REQUESTS ONLY\n*\nMWENDSN  DS    CL44      NEW DATA SET NAME FOR BACKUP VERSION\nMWEFRVOL DS    CL6       ORIGINAL VOLUME OF BACKUPED DATA SET\n         DS    CL6       RESERVED\nMWENDSPW DS    CL8       PASSWORD FOR NEW NAME\n*\n         ORG   MWEBUFD\n*\n*   APPENDED TO THE MWE FOR JES3\n*   WHEN MWEFUNC = 8 AND MWECETYP = (M OR G)\n*\nMWERVCT  DS    H         NUMBER OF VOLSERS\nMWERVSN1 DS    CL6       VSN  OF FIRST     RETURNED VOL\nMWERDVT1 DS    XL4       DEVT OF FIRST     RETURNED VOL\nMWERVSN2 DS    CL6       VSN  OF SECOND    RETURNED VOL\nMWERDVT2 DS    XL4       DEVT OF SECOND    RETURNED VOL\nMWERVSN3 DS    CL6       VSN  OF THIRD     RETURNED VOL\nMWERDVT3 DS    XL4       DEVT OF THIRD     RETURNED VOL\nMWERVSN4 DS    CL6       VSN  OF FOURTH    RETURNED VOL\nMWERDVT4 DS    XL4       DEVT OF FOURTH    RETURNED VOL\nMWERVSN5 DS    CL6       VSN  OF FIFTH     RETURNED VOL\nMWERDVT5 DS    XL4       DEVT OF FIFTH     RETURNED VOL\n         ORG   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HSMXEQ": {"ttr": 7937, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x01.\\x01.\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 302, "newlines": 302, "modlines": 0, "user": "FILE097"}, "text": "         TITLE 'HSMXEQ  - ISSUE MWE TO HSM'\nHSMXEQ   CSECT\n         REGS\n*\n*        INVOKE HSM SVC TO PERFORM FUNCTION\n*\n*        PARAM LIST FOR THIS ROUTINE:\n*\n*                    R1:  --> 5 FULL WORD PARAMETER ADDRESS LIST\n*\n*                    P1:  --> FULL WORD, MUST CONTAIN F'9'\n*                    P2:  --> FULL WORD, MUST CONTAIN LENGTH OF TEXT\n*                    P3:  --> TEXT AREA\n*                    P4:  --> FULL WORD, WILL CONTAIN HSM REQ NUMBER\n*                             ON RETURN\n*                    P5:  --> FULL WORD, WILL CONTAIN HSM RETURN CODE\n*                             ON RETURN\n*\n*        LOGIC FOR THIS SUBROUTINE IS:\n*\n*            1)  VALIDATE PARAM LIST\n*            2)  (BMWE) BUILD MWE\n*            3)  (XHSM) PASS MWE TO HSM IGX00024 ROUTINE\n*            4)  POST REQ NUMBER AND MWE RETURN CODE TO PARAM LIST\n*            5)  RETURN TO CALLER WITH R15 = R15 FROM HSM\n*\n         USING HSMXEQ,R15     ADDRESSABILITY\n         B     MAINEP\n         DC    AL1(L'CSECTLIT)\nCSECTLIT DC    C'HSMXEQ - EXECUTE AN HSM COMMAND &SYSDATE &SYSTIME'\n         TITLE 'HSMXEQ - ENTRY AND PARM PROCESSING'\nMAINEP   DS    0H\n         SAVE (14,12)         SAVE REGS\n         LR    R12,R15        MOVE BASE\n         DROP  R15\n         USING HSMXEQ,R12     ADDRESSABILITY\n         LR    R2,R13         A(OLD SAVE AREA)\n         LA    R13,SAVEAREA   A(NEW SAVE AREA)\n         USING SAVEAREA,R13   ADDRESSABILITY\n         ST    R13,8(R2)      FORWARD CHAIN\n         ST    R2,4(R13)      BACK CHAIN\n         MVC   RC,=F'0'       CLEAR RETURN CODE\n         ST    R1,ADDRPARM    POST A(PARAM LIST)\n         LTR   R1,R1          IS THERE A PARAM LIST\n         BZ    ERRPARAM       NO -- ERROR\n         L     R15,0(R1)      A(FIRST PARM) - FUNCTION CODE\n         L     R14,0(R15)     POST FUNCTION CODE\n         CH    R14,=H'9'      IS IT 'PROCESS AN OPR COMD'\n         BNE   ERRBADFN       NO -- FUNCTION NUMBER BAD\n         ST    R15,ADDRFUNC   POST A(FUNC)\n         TM    0(R1),X'80'    IS THIS THE LAST PARAM\n         BO    ERRPARAM       YES -- ERROR\n         L     R15,4(R1)      A(SECOND PARAM) TEXT LENGTH\n         MVC   TEXTLEN,0(R15) POST TEXT LENGTH\n         LA    R14,CMDMAX     POST MAX LEGAL COMMAND\n         C     R14,TEXTLEN    TEXT TOO LONG\n         BL    ERRTEXTL       YES -- ERROR\n         TM    4(R1),X'80'    IS THIS THE LAST PARAM\n         BNZ   ERRPARAM       YES -- ERROR\n         L     R15,8(R1)      A(THIRD PARM) TEXT\n         ST    R15,ADDRTEXT   POST\n         TM    8(R1),X'80'    IS THIS THE LAST PARAM\n         BNZ   ERRPARAM       YES -- ERROR\n         L     R15,12(R1)     A(FOURTH PARAM) HSM REQUEST NUMBER\n         ST    R15,ADDRHREQ   POST\n         TM    12(R1),X'80'   IS THIS THE LAST PARAM\n         BNZ   ERRPARAM       YES -- ERROR\n         L     R15,16(R1)     A(FIFTH PARAM) HSM RETURN CODE\n         ST    R15,ADDRHRC\n         TM    16(R1),X'80'   IS THIS THE LAST PARAM\n         BZ    ERRPARAM       NO -- ERROR\n         L     R6,TEXTLEN     L'TEXT\n         LTR   R6,R6          IS IT EMPTY\n         BNP   ERRNOTXT       NO -- ERROR\n         BAL   R14,BMWE       BUILD MWE\n         BAL   R14,XHSM       EXECUTE HSM CALL\n         L     R14,ADDRHREQ   A(HSM REQ NUMBER)\n         MVC   0(4,R14),MWERQN POST\n         L     R14,ADDRHRC    A(HSM RETURN CODE)\n         MVC   0(4,R14),MWERC POST\n         B     EXIT\n         TITLE 'HSMXEQ - BMWE - BUILD MWE'\nBMWE     EQU   *\n*\n*        WARNING:  THIS CODE USES AN INTERFACE THAT IS NOT SUPPORTED\n*                  BY IBM AS A STANDARD EXTERNAL INTERFACE.  THUS,\n*                  IT IS NOT DOCUMENTED IN THE USUAL SENSE AND IS\n*                  SUBJECT TO CHANGE WITHOUT NOTICE.  HOWEVER,\n*                  SINCE THIS INTERFACE IS USED BY TSO, JES, AND\n*                  OTHER MVS COMPONENTS IT IS UNLIKELY TO CHANGE\n*                  DRASTICALLY.\n*\n*        LOGIC FOR THIS SECTION WAS DEVELOPED BY EXAMINING MICROFICHE\n*        FOR HSM COMPONENTS THAT USE THIS INTERFACE AND BY TESTING.\n*        SOME DOCUMENTATION IS AVAILABLE IN LY35-0076 DATA FACILITY\n*        HSM DIAGNOSIS REFERENCE VOLUME 1.  THERE IS A\n*        SECTION ON IGX00024, THE MODULE THAT FIELDS HSM REQUESTE\n*        FROM OTHER COMPONENTS.  AN EXAMINATION OF SEVERAL OF THE\n*        COMMAND SERVICE ROUTINES SUCH AS ARCQARC SHOWS THAT THEY CALL\n*        IGX00024 VIA AN SVC.  EXAMINATION OF THE MICROFICHE FOR\n*        ANY OF THESE MODULES INDICATES FIELDS IN THE MWE THAT MUST BE\n*        FILLED IN BEFORE CALLING THE SVC.\n*\n*        ARCQARC USES AN MWE WHOSE TOTAL LENGTH IS:\n*\n*            HEADER (140 BYTES) + 4 (FOR CONTROL) + 256\n*\n*        ARCQARC LOGIC FLOW IN INITIALIZATION IS:\n*\n*            1)  SET L = 0 (MESSAGE LENGTH)\n*\n*        ARCQARC LOGIC FLOW IN 'INSERT' IS:\n*\n*            2)  APPEND TEXT TO MESSAGE AREA (STARTS AT MWECMDT)\n*            3)  ADD TEXT LENGTH TO L\n*\n*        ARCQARC LOGIC FLOW IN 'SENDMWE' IS:\n*\n*            4)  ZERO OUT HEADER\n*            5)  SET MWELEN = HEADER LEN + 4 + L\n*            6)  SET MWEFUNF = 9\n*            7)  SET MWEFNOW BIT = 1 - INDICATES NO WAIT BY HSM\n*            8)  SET MWECMDL = L + 4 - COMMAND LENGTH\n*            9)  SET MWECMDO = 0     - COMMAND OFFSET\n*           10)  ISSUE ROUTER SVC WITH  R0 = 9 AND R15 = 24\n*\n*        LOGIC FLOW IN THIS ROUTINE IS:\n*\n*            1)  ZERO OUT ENTIRE MWE\n*            2)  SET MWEID TO 'MWE '\n*            3)  SET MWECMDL = TEXT LEN FROM PARAM LIST + 4\n*            4)  SET MWECMDO = 0\n*            5)  COPY TEXT FROM PARAM AREA\n*            6)  SET MWELEN = HEADER LEN + 4 + TEXT LEN\n*            7)  RETURN (SVC IS ISSUED IN XHSM)\n*\n*       NOTE:  TSO (MWEFTSOR) AND NO WAIT (MWEFNOW) BITS ARE NOT SET.\n*              THIS MEANS WE ARE NOT TSO AND WE WANT HSM TO WAIT\n*              US UNTIL THE COMMAND COMPLETES.\n*\n         ST    R14,BMWER14    SAVE RETURN ADDR\n         LA    R0,MWE         A(MWE)\n         LA    R1,MWEMAX      L'MWE AREA\n         L     R14,=F'0'      ZEROES\n         LA    R15,0          L'ZEROES\n         MVCL  R0,R14         CLEAR MWE TO ZEROES\n         MVC   MWEID,=C'MWE ' POST\n         L     R1,TEXTLEN     L'TEXT\n         LA    R1,4(R1)       PLUS HEADER\n         STH   R1,MWECMDL     POST\n         MVC   MWECMDO,=H'0'  CLEAR\n         LA    R0,MWECMDT     A(MWE TEXT)\n         L     R1,TEXTLEN     L'TEXT\n         L     R14,ADDRTEXT   A(SOURCE TEXT)\n         LR    R15,R1         L'TEXT\n         MVCL  R0,R14         COPY TEXT\n         L     R14,BMWER14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'HSMXEQ - XHSM - EXECUTE HSM SEND CMD'\nXHSM     EQU   *\n         ST    R14,XHSMR14    SAVE\n*\n*        TO CALL HSM:\n*              ISSUE SVC109   (ROUTER SVC)\n*              R15 = 24       ROUTES TO IGX00024 (HSM INTERFACE)\n*\n*        THE FOLLOWING INFORMATION WAS FOUND IN COMMENTS IN THE\n*        MICROFICHE FOR IGX00024:\n*\n*        PARAMS:\n*\n*              R0 = FUNC CODE\n*                   00 - RETURN QCT POINTER\n*                   01 - START HSM\n*                   02 - SHUTDOWN HSM\n*                   03 - RECALL MIGRATED DATASET\n*                   04 - UNUSED\n*                   05 - RECOVER BACKUP VERSION OF A DATASET\n*                   06 - MIGRATE A DATASET\n*                   07 - MAKE BACKUP COPY OF A DATASET\n*                   08 - RETURN HSM CDS RECORD\n*                   09 - SEND TSO/OPR COMMAND TO HSM\n*                   10 - POST REQUEST COMPLETE\n*                   11 - UNUSED (WAS PURGE REQUESTS PREVIOUSLY)\n*                   12 - DELETE MIGRATED DATASET\n*\n*              R1 - POINTER TO MWE (FUNC 2 - 12)\n*                      \"    \"  ECB (FUNC 1)\n*\n*              R4 - A(TCB)\n*\n*              R5 - A(SVRB)\n*\n*              R7 - A(ASCB)\n*\n*        RETURN:\n*\n*              R1  - POINTER TO QCT (FUNC = 0,1 ONLY)\n*              R15 - RETURN CODE\n*                    00 - OK\n*                    04 - HSM NOT ACTIVE\n*                    08 - NO SPACE FOR MWE\n*                    12 - POST REQUESTED FOR NONEXISTENT MWE\n*                    16 - JES3 REQ AND HSM NOT ACCEPTING JES3 REQ'S\n*                    20 - HSM ALREADY ACTIVE\n*                    24 - USER NOT AUTHORIZED FOR REQUEST\n*                    28 - INVALID OR ZERO MWE POINTER\n*                    32 - INVALID BUFFER SIZE FOR CDS READ\n*                    36 - INPUT MWE NOT WITHIN USER STORAGE\n*                    40 - CSA RESERVED FOR MWES EXHAUSTED\n*                   100 - INVALID FUNCTION CODE\n*                   104 - FUNCTION CODE NOT RESERVED IN HSM AS (?)\n*              MWERC MAY ALSO HAVE ADDITIONAL INFORMATION\n*\n*        SOME COMMANDS SUCH AS FIXCDS CAN RETURN SUBSTANTIAL AMOUNTS\n*        OF DATA.  AN EXAMINATION OF ARCCPFC FICHE WHICH IMPLEMENTS\n*        FIXCDS INDICATES THAT RESPONSES ARE HANDLED BY ARCWTO,\n*        ARCWTU (AN ENTRY POINT IN ARCWTO), AND ARCPRINT (AN ENTRY\n*        POINT IN ARCPROPN).  ARCPRINT IS USED FOR THE HSM LOG.\n*        ARCWTO ISSUES TPUTS FOR TSO USERS AND WTO/WTOR FORCONSOLES.\n*        NO SUPPORT IS PROVIDED IN THIS ROUTINE TO INTERCEPT OR\n*        SERVICE THIS DATA.\n*\n*        ONLY FUNC 09 IS CURRENTLY SUPPORTED BY THIS SUBROUTINE\n*        IN ADDITION, R5 IS NOT SET TO A(SVRB)\n*\n*        LOGIC FLOW IN THIS ROUTINE IS:\n*\n*            1)  SET R0 = FUNC FROM PARAM LIST\n*            2)  SET R1 = A(MWE)\n*            3)  SET R7 = A(ASCB)\n*            4)  SET R4 = A(TCB)\n*            5)  SET R15 = 24\n*            6)  ISSUE SVC 109\n*            7)  SAVE R15, REQUEST NO, AND MWERC\n*            8)  RESTORE R4 AND R7\n*            9)  RETURN\n*\n         ST    R4,XHSMR4      SAVE\n         ST    R7,XHSMR7      SAVE\n         L     R15,ADDRFUNC   A(FUNC CODE)\n         L     R0,0(R15)      POST FUNC CODE\n         LA    R1,MWE         A(MWE)\n         LA    R4,16          A((A(CVT))\n         L     R4,0(R4)       A(CVT)\n         L     R4,0(R4)       A(TCBPTRS)\n         L     R7,12(R4)      A(ASCB)\n         L     R4,4(R4)       A(TCB)\n         LA    R15,24         SELECT IGX00024 (HSM INTERFACE)\n         SVC   109            ISSUE ROUTER SVC\n         ST    R15,RC         POST RETURN CODE\n         L     R4,XHSMR4      RESTORE\n         L     R7,XHSMR7      RESTORE\n         L     R14,XHSMR14    RESTORE\n         BR    R14            RETURN\n         TITLE 'XHSM - ERROR ROUTINES'\nERRBADFN EQU   *\n         WTO   'HSMXEQ ERROR - FUNCTION CODE NOT 09',                  X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nERRNOTXT EQU   *\n         WTO   'HSMXEQ ERROR - INVALID TEXT LENGTH',                   X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nERRPARAM EQU   *\n         WTO   'HSMXEQ ERROR - BAD PARAMETER LIST',                    X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nERRTEXTL EQU   *\n         WTO   'HSMXEQ ERROR - TEXT LENGTH TOO LONG',                  X\n               ROUTCDE=2,DESC=7\n         B     ABEND\nABEND    EQU   *\n         ABEND 1000,DUMP\n         TITLE 'HSMXEQ - EXIT - RETURN TO CALLER'\nEXIT     EQU   *\n         L     R15,RC\n         L     R13,4(R13)     A(OLD SAVE AREA)\n         RETURN (14,12),RC=(15) RETURN\n         LTORG\n         TITLE 'HSMXEQ - DATA AREA'\nSAVEAREA DS    9D             REG SAVE AREA\nADDRPARM DS    F              A(CALLING PARAMS (R1 ON ENTRY))\nADDRFUNC DS    F              A(FUNCTION CODE)       FROM CALLER\nADDRTEXT DS    F              A(TEXT)                FROM CALLER\nADDRHREQ DS    F              A(HSM REQUEST CODE)    FROM CALLER\nADDRHRC  DS    F              A(HSM RETURN CODE)     FROM CALLER\n*\nBMWER14  DS    F              R14 SAVE AREA FOR BMWE - BUILD MWE\nXHSMR4   DS    F              R4  SAVE AREA FOR XHSM - EXECUTE HSM\nXHSMR7   DS    F              R7  SAVE AREA FOR XHSM\nXHSMR14  DS    F              R14 SAVE AREA FOR XHSM\n*\nTEXTLEN  DS    F              LENGTH OF TEXT FROM USER\nRC       DS    F              RETURN CODE FOR THIS ROUTINE\n         EJECT\nMWE      DS    0D\n         COPY  HSMMWE\n         DS    0D\nMWEMAX   EQU   *-MWE          LENGTH OF MWE\nCMDMAX   EQU   *-MWECMDT      MAXIMUM COMMAND LENGTH\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JCLDM200": {"ttr": 7943, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00\\x04\\x00\\x04\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 4, "newlines": 4, "modlines": 0, "user": "FILE097"}, "text": "//DM200RRP JOB (OPP,N,40),DISK-MANAGEMENT,  FILE RESTORE (ON REQUEST)\n//           CLASS=C,MSGCLASS=J,USER=PRODJCL,PASSWORD=PRODJCL\n//S1      EXEC DM200P10\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLDM203": {"ttr": 7945, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00\\x04\\x00\\x04\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 4, "newlines": 4, "modlines": 0, "user": "FILE097"}, "text": "//DM203DDM JOB (OPP,N,40),DISK-MANAGEMENT,  DAILY VVDS EXTRACT\n//           CLASS=C,MSGCLASS=J,USER=PRODJCL,PASSWORD=PRODJCL\n//S1      EXEC DM203P10\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLDM206": {"ttr": 7947, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17!\\x00\\x04\\x00\\x04\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:21:23", "lines": 4, "newlines": 4, "modlines": 0, "user": "FILE097"}, "text": "//DM206DDM JOB (OPP,N,40),DISK-MANAGEMENT,  DAILY VTOC EXTRACT\n//           CLASS=C,MSGCLASS=J,USER=PRODJCL,PASSWORD=PRODJCL\n//S1      EXEC DM206P10\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLDM210": {"ttr": 7949, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x04\\x00\\x04\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 4, "newlines": 4, "modlines": 0, "user": "FILE097"}, "text": "//DM210DUM JOB (OPP,N,40),DISK-MANAGEMENT,  DAILY UPDATE / REPORTS\n//           CLASS=C,MSGCLASS=J,USER=PRODJCL,PASSWORD=PRODJCL\n//S1      EXEC DM210P10\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLDM220": {"ttr": 7951, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x04\\x00\\x04\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 4, "newlines": 4, "modlines": 0, "user": "FILE097"}, "text": "//DM220WRM JOB (OPP,N,40),DISK-MANAGEMENT,  WEEKLY REPORTS\n//           CLASS=C,MSGCLASS=J,USER=PRODJCL,PASSWORD=PRODJCL\n//S1      EXEC DM220P10\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLDM230": {"ttr": 7953, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x04\\x00\\x04\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 4, "newlines": 4, "modlines": 0, "user": "FILE097"}, "text": "//DM230MRM JOB (OPP,N,40),DISK-MANAGEMENT,  MONTHLY REPORTS\n//           CLASS=C,MSGCLASS=J,USER=PRODJCL,PASSWORD=PRODJCL\n//S1      EXEC DM230P10\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLDM299": {"ttr": 7955, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x04\\x00\\x04\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 4, "newlines": 4, "modlines": 0, "user": "FILE097"}, "text": "//DM299DTM JOB (OPP,N,40),DISK-MANAGEMENT,  DAILY FILE BACKUPS\n//           CLASS=C,MSGCLASS=J,USER=PRODJCL,PASSWORD=PRODJCL\n//S1      EXEC DM299P10\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLDM300": {"ttr": 7957, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x05\\x00\\x05\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 5, "newlines": 5, "modlines": 0, "user": "FILE097"}, "text": "//DM300RUM JOB (OPP,N,40),DISK-MANAGEMENT,  FILE RESTORE (ON REQUEST)\n//         USER=PRODJCL,PASSWORD=PRODJCL,\n//           MSGCLASS=J,CLASS=C\n//S1      EXEC DM300P10\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLDM310": {"ttr": 7959, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x05\\x00\\x05\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 5, "newlines": 5, "modlines": 0, "user": "FILE097"}, "text": "//DM310WDM JOB  (OPP,N,40),DISK-MANAGEMENT, TEST VTOC EXTRACT/SORT\n//         USER=PRODJCL,PASSWORD=PRODJCL,\n//           MSGCLASS=J,CLASS=C\n//S1      EXEC  DM310P10\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLDM315": {"ttr": 7961, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x05\\x00\\x05\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 5, "newlines": 5, "modlines": 0, "user": "FILE097"}, "text": "//DM315WDM JOB  (OPP,N,40),DISK-MANAGEMENT, TEST VVDS EXTRACT/SORT\n//         USER=PRODJCL,PASSWORD=PRODJCL,\n//           MSGCLASS=J,CLASS=C\n//S1      EXEC  DM315P10\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLDM320": {"ttr": 7963, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x05\\x00\\x05\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 5, "newlines": 5, "modlines": 0, "user": "FILE097"}, "text": "//DM320WUM JOB  (OPP,N,40),DISK-MANAGEMENT, MERGED TEST VTOC/VVDS\n//         USER=PRODJCL,PASSWORD=PRODJCL,\n//           MSGCLASS=J,CLASS=C\n//S1      EXEC  DM320P10\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLDM330": {"ttr": 7965, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x05\\x00\\x05\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 5, "newlines": 5, "modlines": 0, "user": "FILE097"}, "text": "//DM330WDM JOB  (OPP,N,40),DISK-MANAGEMENT, HSM VTOC EXTRACT/SORT\n//         USER=PRODJCL,PASSWORD=PRODJCL,\n//           MSGCLASS=J,CLASS=C\n//S1      EXEC  DM330P10\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLDM340": {"ttr": 7967, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x05\\x00\\x05\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 5, "newlines": 5, "modlines": 0, "user": "FILE097"}, "text": "//DM340WDM JOB  (OPP,N,40),DISK-MANAGEMENT, HSM MCDS EXTRACT\n//         USER=PRODJCL,PASSWORD=PRODJCL,\n//           MSGCLASS=J,CLASS=C\n//S1      EXEC  DM340P10\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLDM350": {"ttr": 7969, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x05\\x00\\x05\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 5, "newlines": 5, "modlines": 0, "user": "FILE097"}, "text": "//DM350WUM JOB  (OPP,N,40),DISK-MANAGEMENT, MERGED MCDS/VTOC\n//         USER=PRODJCL,PASSWORD=PRODJCL,\n//           MSGCLASS=J,CLASS=C\n//S1      EXEC  DM350P10\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLDM360": {"ttr": 7971, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x05\\x00\\x05\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 5, "newlines": 5, "modlines": 0, "user": "FILE097"}, "text": "//DM360WUM JOB  (OPP,N,40),DISK-MANAGEMENT, DATASET INFO RPT RUN\n//         USER=PRODJCL,PASSWORD=PRODJCL,\n//           MSGCLASS=J,CLASS=C\n//S1      EXEC  DM360P10\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLDM370": {"ttr": 7973, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x05\\x00\\x05\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 5, "newlines": 5, "modlines": 0, "user": "FILE097"}, "text": "//DM370WUM JOB  (OPP,N,40),DISK-MANAGEMENT, DELETES FOR HSM-MCDS\n//         USER=PRODJCL,PASSWORD=PRODJCL,\n//           MSGCLASS=J,CLASS=C\n//S1      EXEC  DM370P10\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLDM380": {"ttr": 7975, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x05\\x00\\x05\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 5, "newlines": 5, "modlines": 0, "user": "FILE097"}, "text": "//DM380MUM JOB  (OPP,N,40),DISK-MANAGEMENT, BILLING/HISTORY RPTS\n//         USER=PRODJCL,PASSWORD=PRODJCL,\n//           MSGCLASS=J,CLASS=C\n//S1      EXEC  DM380P10\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCLDM390": {"ttr": 8193, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x05\\x00\\x05\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 5, "newlines": 5, "modlines": 0, "user": "FILE097"}, "text": "//DM390WTM JOB  (OPP,N,40),DISK-MANAGEMENT, BACKUP DATASETS\n//         USER=PRODJCL,PASSWORD=PRODJCL,\n//           MSGCLASS=J,CLASS=C\n//S1      EXEC  DM390P10\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JGDATE": {"ttr": 8195, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00Y\\x00Y\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 89, "newlines": 89, "modlines": 0, "user": "FILE097"}, "text": "JGDATE   CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SAVE  (14,12)\n         BALR  R9,0\n         USING *,R9                BASE REGISTER\n         USING ARGLIST,R1          ESTABLISH ADDRESSABILITY TO ARG LIST\n         L     R4,DDDAD            ADDR OF JULIAN DAY TO R4\n         L     R4,0(R4)            JULIAN DAY TO R4\n         L     R5,YYAD             ADDR OF YEAR TO R5\n         L     R5,0(R5)            YEAR TO R5\n         L     R10,DDAD            ADDR OF MONTH DAY TO R10\n         L     R11,MMAD            ADDR OF MONTH NUMBER TO R11\n         DROP  R1                  LOSE ADDRESSABILITY TO ARG LIST\n*\n*\n*        THE FOLLOWING LOGIC IS BASED ON ACM ALGORITHM 398\n*\n*\n         SR    R14,R14             ZERO HIGH ORDER REGISTER\n         LR    R15,R5              LOAD YY INTO LOW ORDER REG\n         LA    R1,4                PUT DIVISOR (4) INTO R1\n         DR    R14,R1              DIVIDE YY BY 4\n         OR    R14,R14             IS REMAIDER ZERO\n         BE    LEAPYEAR\n         LA    R2,0                NOT LEAP YEAR -- T=0\n         B     ENDLEAP\nLEAPYEAR EQU   *\n         LA    R2,1                LEAP YEAR -- T=1\nENDLEAP  EQU   *\n         LA    R6,100              PUT 100 IN R6\n         LA    R7,3055             PUT 3055 IN R7\n         CR    R5,R6               IS YY LESS THAN 100\n         BL    ENDCENT             YES -- BYPASS CENTURY LOGIC\n         SR    R14,R14             ZERO HIGH ORDER REG\n         LR    R15,R5              PUT YY IN LOW ORDER REG\n         DR    R14,R6              DIVIDE BY 100\n         OR    R14,R14             IS REMAINDER 0 (CENTURY)\n         BNE   ENDCENT             NO -- SKIP CENTURY PROCESSING\n         SR    R14,R14             ZERO HIGH ORDER REG\n         DR    R14,R1              DIVIDE CENTURY NO BY 4\n         OR    R14,R14             IS REMAINDER 0 (LEAP CENTURY)\n         BE    ENDCENT             YES -- LEAP CENTURY -- T OK\n         LA    R3,0                NOT A LEAP YEAR T = 0\nENDCENT  EQU   *\n         LA    R3,59(R2)           R3 = T + 59\n         CR    R4,R3               IS DDD GREATER T + 59\n         BH    PASTFEB             AFTER FEBUARY\n         LA    R3,0                R3=0 = NEW T\n         B     DONEFEB\nPASTFEB  EQU   *\n         LA    R3,2                R3 = 2\n         SR    R3,R2               R3 = 2-T = NEW T\nDONEFEB  EQU   *\n         LA    R2,91(R3,R4)        R2 = (D+91) = (91 + N + T)\n         LR    R15,R2              COPY TO R15\n         MR    R14,R6              (D+91) * 100\n         DR    R14,R7              R15 = (M+2) = ((D+91) * 100) / 3055)\n         LR    R1,R15              MOVE TO R1\n         MR    R14,R7              (M+2) * 3055\n         DR    R14,R6              (((M+2) * 3055) / 100)\n         SR    R2,R15              D = (D+91) - (((M+2) * 3055) / 100)\n         ST    R2,0(R10)           STORE AT MONTH DAY ADDR\n         LA    R2,2                PUT 2 IN R2\n         SR    R1,R2               M = ((M+2) - 2)\n         ST    R1,0(R11)           STORE AT ADDR OF MONTH NUMBER\n         MVC   16(4,R13),RC        MOVE RETURN CODE TO SAVED R15\n         RETURN (14,12)            GO HOME\nRC       DC    AL4(0)\nARGLIST  DSECT\nYYAD     DS    F\nDDDAD    DS    F\nMMAD     DS    F\nDDAD     DS    F\n         END   JGDATE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDSLIST": {"ttr": 8198, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 12, "newlines": 12, "modlines": 0, "user": "FILE097"}, "text": "//TTS000PR JOB (TST,T,04,220,TTSM0000,OS),RUSSELL,\n// CLASS=J,MSGCLASS=A\n//*\n//*  REF:  U220PJR.PDS.CNTL(PDSLIST)\n//*\n//*  DOC:  LIST PDS.CNTL\n//*\n//S1 EXEC PDSPDS,OUT='*',DSN='U220PJR.SHAREDM.DATA'\n//SYSIN DD *\n-OPT EJECT=Y\n-LIST ALL.ALL\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCDM200": {"ttr": 8200, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 14, "newlines": 14, "modlines": 0, "user": "FILE097"}, "text": "//DM200P10 PROC GEN='0'\n//*\n//S1DM999 EXEC PGM=DM999DSU\n//SYSPRINT DD  SYSOUT=J\n//SYSIN    DD  UNIT=SYSDA,SPACE=(TRK,(1,1)),DCB=BLKSIZE=800\n//TAPE1    DD  DSN=OPTP.DM299DTP.FIL.BKP(&GEN),DISP=OLD\n//RSTVTOC  DD  DISP=SHR,DSN=PBDS.DM200RRP.VTC.DTA\n//RSTMST   DD  DISP=SHR,DSN=PBDS.DM200RRP.MST.FIL\n//RSTHST   DD  DISP=SHR,DSN=PBDS.DM200RRP.HST.FIL\n//RSTFIXC  DD  DISP=SHR,DSN=PBDS.DM200RRP.FIX.CRD\n//RSTBILL  DD  DISP=SHR,DSN=PBDS.DM200RRP.BIL.FIL\n//RSTVVDS  DD  DISP=SHR,DSN=PBDS.DM203DDM.VVDS.FIL\n//RSTVTC   DD  DISP=SHR,DSN=PBDS.DM206DDM.VTC.FIL\n//RSTPRD   DD  DISP=SHR,DSN=PBDS.DM210DUM.PRD.FIL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCDM203": {"ttr": 8202, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x97\\x00\\x97\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 151, "newlines": 151, "modlines": 0, "user": "FILE097"}, "text": "//DM203P10 PROC\n//S1CR140 EXEC PGM=DM140PUP\n//SYSUDUMP DD SYSOUT=H\n//EXTRACT  DD DSN=PBDS.DM203DDM.VVDS.FIL,DISP=OLD\n//VVDSI051 DD DSN=SYS1.VVDS.VIPO051,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=IPO051,AMP=AMORG\n//VVDSI052 DD DSN=SYS1.VVDS.VIPO052,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=IPO052,AMP=AMORG\n//VVDSI053 DD DSN=SYS1.VVDS.VIPO053,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=IPO053,AMP=AMORG\n//VVDSI054 DD DSN=SYS1.VVDS.VIPO054,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=IPO054,AMP=AMORG\n//VVDSI055 DD DSN=SYS1.VVDS.VIPO055,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=IPO055,AMP=AMORG\n//VVDSI056 DD DSN=SYS1.VVDS.VIPO056,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=IPO056,AMP=AMORG\n//VVDSP040 DD DSN=SYS1.VVDS.VPRD040,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD040,AMP=AMORG\n//VVDSP041 DD DSN=SYS1.VVDS.VPRD041,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD041,AMP=AMORG\n//VVDSP044 DD DSN=SYS1.VVDS.VPRD044,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD044,AMP=AMORG\n//VVDSP045 DD DSN=SYS1.VVDS.VPRD045,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD045,AMP=AMORG\n//VVDSP046 DD DSN=SYS1.VVDS.VPRD046,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD046,AMP=AMORG\n//VVDSP047 DD DSN=SYS1.VVDS.VPRD047,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD047,AMP=AMORG\n//VVDSP048 DD DSN=SYS1.VVDS.VPRD048,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD048,AMP=AMORG\n//VVDSP049 DD DSN=SYS1.VVDS.VPRD049,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD049,AMP=AMORG\n//VVDSP050 DD DSN=SYS1.VVDS.VPRD050,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD050,AMP=AMORG\n//VVDSP051 DD DSN=SYS1.VVDS.VPRD051,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD051,AMP=AMORG\n//VVDSP052 DD DSN=SYS1.VVDS.VPRD052,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD052,AMP=AMORG\n//VVDSP053 DD DSN=SYS1.VVDS.VPRD053,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD053,AMP=AMORG\n//VVDSP054 DD DSN=SYS1.VVDS.VPRD054,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD054,AMP=AMORG\n//VVDSP055 DD DSN=SYS1.VVDS.VPRD055,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD055,AMP=AMORG\n//VVDSP056 DD DSN=SYS1.VVDS.VPRD056,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD056,AMP=AMORG\n//VVDSP057 DD DSN=SYS1.VVDS.VPRD057,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD057,AMP=AMORG\n//VVDSP058 DD DSN=SYS1.VVDS.VPRD058,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD058,AMP=AMORG\n//VVDSP059 DD DSN=SYS1.VVDS.VPRD059,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD059,AMP=AMORG\n//VVDSP060 DD DSN=SYS1.VVDS.VPRD060,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD060,AMP=AMORG\n//VVDSP061 DD DSN=SYS1.VVDS.VPRD061,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD061,AMP=AMORG\n//VVDSP062 DD DSN=SYS1.VVDS.VPRD062,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD062,AMP=AMORG\n//VVDSP063 DD DSN=SYS1.VVDS.VPRD063,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD063,AMP=AMORG\n//VVDSP064 DD DSN=SYS1.VVDS.VPRD064,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD064,AMP=AMORG\n//VVDSP065 DD DSN=SYS1.VVDS.VPRD065,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD065,AMP=AMORG\n//VVDSP066 DD DSN=SYS1.VVDS.VPRD066,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD066,AMP=AMORG\n//VVDSP067 DD DSN=SYS1.VVDS.VPRD067,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD067,AMP=AMORG\n//VVDSP068 DD DSN=SYS1.VVDS.VPRD068,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD068,AMP=AMORG\n//VVDSP069 DD DSN=SYS1.VVDS.VPRD069,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD069,AMP=AMORG\n//VVDSP070 DD DSN=SYS1.VVDS.VPRD070,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD070,AMP=AMORG\n//VVDSP071 DD DSN=SYS1.VVDS.VPRD071,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD071,AMP=AMORG\n//VVDSP072 DD DSN=SYS1.VVDS.VPRD072,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD072,AMP=AMORG\n//VVDSP073 DD DSN=SYS1.VVDS.VPRD073,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD073,AMP=AMORG\n//VVDSP074 DD DSN=SYS1.VVDS.VPRD074,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD074,AMP=AMORG\n//VVDSP075 DD DSN=SYS1.VVDS.VPRD075,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD075,AMP=AMORG\n//VVDSP076 DD DSN=SYS1.VVDS.VPRD076,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD076,AMP=AMORG\n//VVDSP077 DD DSN=SYS1.VVDS.VPRD077,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD077,AMP=AMORG\n//VVDSP078 DD DSN=SYS1.VVDS.VPRD078,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD078,AMP=AMORG\n//VVDSP079 DD DSN=SYS1.VVDS.VPRD079,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD079,AMP=AMORG\n//VVDSP080 DD DSN=SYS1.VVDS.VPRD080,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD080,AMP=AMORG\n//VVDSP081 DD DSN=SYS1.VVDS.VPRD081,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD081,AMP=AMORG\n//VVDSP082 DD DSN=SYS1.VVDS.VPRD082,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD082,AMP=AMORG\n//VVDSP084 DD DSN=SYS1.VVDS.VPRD084,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD084,AMP=AMORG\n//VVDSP085 DD DSN=SYS1.VVDS.VPRD085,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD085,AMP=AMORG\n//VVDSP086 DD DSN=SYS1.VVDS.VPRD086,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD086,AMP=AMORG\n//VVDSP087 DD DSN=SYS1.VVDS.VPRD087,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD087,AMP=AMORG\n//VVDSP088 DD DSN=SYS1.VVDS.VPRD088,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD088,AMP=AMORG\n//VVDSP089 DD DSN=SYS1.VVDS.VPRD089,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD089,AMP=AMORG\n//VVDSP090 DD DSN=SYS1.VVDS.VPRD090,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD090,AMP=AMORG\n//VVDSP091 DD DSN=SYS1.VVDS.VPRD091,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD091,AMP=AMORG\n//VVDSP092 DD DSN=SYS1.VVDS.VPRD092,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD092,AMP=AMORG\n//VVDSP093 DD DSN=SYS1.VVDS.VPRD093,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD093,AMP=AMORG\n//VVDSP095 DD DSN=SYS1.VVDS.VPRD095,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD095,AMP=AMORG\n//VVDSP097 DD DSN=SYS1.VVDS.VPRD097,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD097,AMP=AMORG\n//VVDSP098 DD DSN=SYS1.VVDS.VPRD098,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD098,AMP=AMORG\n//VVDSP099 DD DSN=SYS1.VVDS.VPRD099,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD099,AMP=AMORG\n//VVDSP501 DD DSN=SYS1.VVDS.VPRD501,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD501,AMP=AMORG\n//VVDSP502 DD DSN=SYS1.VVDS.VPRD502,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=PRD502,AMP=AMORG\n//VVDSRS1A DD DSN=SYS1.VVDS.VSRES1A,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=SRES1A,AMP=AMORG\n//VVDSRS1B DD DSN=SYS1.VVDS.VSRES1B,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=SRES1B,AMP=AMORG\n//VVDSRS2A DD DSN=SYS1.VVDS.VSRES2A,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=SRES2A,AMP=AMORG\n//VVDSRS2B DD DSN=SYS1.VVDS.VSRES2B,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=SRES2B,AMP=AMORG\n//VVDSS501 DD DSN=SYS1.VVDS.VSYS501,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=SYS501,AMP=AMORG\n//VVDSS502 DD DSN=SYS1.VVDS.VSYS502,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=SYS502,AMP=AMORG\n//*\n//S2SORT  EXEC PGM=SORT\n//SYSOUT   DD SYSOUT=J\n//SORTIN   DD DSN=PBDS.DM203DDM.VVDS.FIL,DISP=SHR\n//SORTOUT  DD DSN=PBDS.DM203DDM.VVDS.SRT,DISP=OLD\n//SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,5)\n//SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,5)\n//SYSIN    DD DSN=U220PJR.SHAREDM.DATA(CTLDM203),DISP=SHR\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCDM206": {"ttr": 8206, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00U\\x00U\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 85, "newlines": 85, "modlines": 0, "user": "FILE097"}, "text": "//DM310P10 PROC\n//S1CR110 EXEC PGM=DM110PUP\n//SYSUDUMP DD SYSOUT=H\n//EXTRACTV DD DSN=PBDS.DM206DDM.VTC.FIL,DISP=OLD\n//DISKI051 DD UNIT=SYSDA,DISP=OLD,VOL=SER=IPO051\n//DISKI052 DD UNIT=SYSDA,DISP=OLD,VOL=SER=IPO052\n//DISKI053 DD UNIT=SYSDA,DISP=OLD,VOL=SER=IPO053\n//DISKI054 DD UNIT=SYSDA,DISP=OLD,VOL=SER=IPO054\n//DISKI055 DD UNIT=SYSDA,DISP=OLD,VOL=SER=IPO055\n//DISKI056 DD UNIT=SYSDA,DISP=OLD,VOL=SER=IPO056\n//DISKP040 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD040\n//DISKP041 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD041\n//DISKP044 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD044\n//DISKP045 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD045\n//DISKP046 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD046\n//DISKP047 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD047\n//DISKP048 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD048\n//DISKP049 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD049\n//DISKP050 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD050\n//DISKP051 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD051\n//DISKP052 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD052\n//DISKP053 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD053\n//DISKP054 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD054\n//DISKP055 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD055\n//DISKP056 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD056\n//DISKP057 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD057\n//DISKP058 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD058\n//DISKP059 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD059\n//DISKP060 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD060\n//DISKP061 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD061\n//DISKP062 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD062\n//DISKP063 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD063\n//DISKP064 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD064\n//DISKP065 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD065\n//DISKP066 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD066\n//DISKP067 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD067\n//DISKP068 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD068\n//DISKP069 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD069\n//DISKP070 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD070\n//DISKP071 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD071\n//DISKP072 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD072\n//DISKP073 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD073\n//DISKP074 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD074\n//DISKP075 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD075\n//DISKP076 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD076\n//DISKP077 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD077\n//DISKP078 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD078\n//DISKP079 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD079\n//DISKP080 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD080\n//DISKP081 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD081\n//DISKP082 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD082\n//DISKP084 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD084\n//DISKP085 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD085\n//DISKP086 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD086\n//DISKP087 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD087\n//DISKP088 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD088\n//DISKP089 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD089\n//DISKP090 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD090\n//DISKP091 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD091\n//DISKP092 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD092\n//DISKP093 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD093\n//DISKP095 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD095\n//DISKP097 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD097\n//DISKP098 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD098\n//DISKP099 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD099\n//DISKP501 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD501\n//DISKP502 DD UNIT=SYSDA,DISP=OLD,VOL=SER=PRD502\n//DISKRS1A DD UNIT=SYSDA,DISP=OLD,VOL=SER=SRES1A\n//DISKRS1B DD UNIT=SYSDA,DISP=OLD,VOL=SER=SRES1B\n//DISKRS2A DD UNIT=SYSDA,DISP=OLD,VOL=SER=SRES2A\n//DISKRS2B DD UNIT=SYSDA,DISP=OLD,VOL=SER=SRES2B\n//DISKS050 DD UNIT=SYSDA,DISP=OLD,VOL=SER=SYS050\n//DISKS051 DD UNIT=SYSDA,DISP=OLD,VOL=SER=SYS051\n//DISKS052 DD UNIT=SYSDA,DISP=OLD,VOL=SER=SYS052\n//DISKS501 DD UNIT=SYSDA,DISP=OLD,VOL=SER=SYS501\n//DISKS502 DD UNIT=SYSDA,DISP=OLD,VOL=SER=SYS502\n//*\n//S2SORT  EXEC PGM=SORT\n//SYSOUT   DD SYSOUT=J\n//SORTIN   DD DSN=PBDS.DM206DDM.VTC.FIL,DISP=SHR\n//SORTOUT  DD DSN=PBDS.DM206DDM.VTC.SRT,DISP=OLD\n//SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,5)\n//SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,5)\n//SYSIN    DD DSN=U220PJR.SHAREDM.DATA(CTLDM206),DISP=SHR\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCDM210": {"ttr": 8209, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x16\\x00\\x16\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 22, "newlines": 22, "modlines": 0, "user": "FILE097"}, "text": "//DM210P10 PROC\n//*\n//S1UP150 EXEC PGM=DM150PUP\n//SYSUDUMP DD SYSOUT=H\n//SYSPRINT DD SYSOUT=M\n//SORTVVVR DD DSN=PBDS.DM203DDM.VVDS.SRT,DISP=SHR\n//SORTVDSN DD DSN=PBDS.DM206DDM.VTC.SRT,DISP=SHR\n//MERGVDSN DD DSN=PBDS.DM210DUM.PRD.FIL,DISP=OLD\n//*\n//S2UP200 EXEC PGM=DM200PUP,REGION=2048K\n//VOLSERIN DD  DSN=U220PJR.SHAREDM.DATA(CTLDM220),DISP=SHR\n//TRANFILE DD  DSN=PBDS.DM210DUM.PRD.FIL,DISP=SHR\n//MASTER   DD  DSN=PBDS.DM200RRP.MST.FIL,DISP=OLD\n//WORK     DD  UNIT=SYSDA,SPACE=(CYL,(2,1)),\n//             DCB=PBDS.DM200RRP.MST.FIL\n//SORTWK01 DD  UNIT=SYSDA,SPACE=(CYL,5)\n//LISTOUT  DD  SYSOUT=M,COPIES=2\n//ERROUT   DD  SYSOUT=M,COPIES=2\n//RPTTEMP  DD  SYSOUT=M,COPIES=2\n//SYSOUT   DD  SYSOUT=J\n//SYSUDUMP DD  SYSOUT=H\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCDM220": {"ttr": 8211, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x14\\x00\\x14\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 20, "newlines": 20, "modlines": 0, "user": "FILE097"}, "text": "//DM220P10 PROC\n//*\n//S1RP210 EXEC PGM=DM210PRP,REGION=2048K\n//MASTER   DD  DSN=PBDS.DM200RRP.MST.FIL,DISP=SHR\n//VOLSERIN DD  DSN=U220PJR.SHAREDM.DATA(CTLDM220),DISP=SHR\n//OUTFIXC  DD  DSN=PBDS.DM200RRP.FIX.CRD,DISP=OLD\n//SORTWK01 DD  UNIT=SYSDA,SPACE=(CYL,5)\n//RPTPERM  DD  SYSOUT=M                           PERMAMENT RPT\n//RPTRGDG  DD  SYSOUT=M                           GDG RPT\n//RPTVSUM  DD  SYSOUT=M                           VOLUME SUMMARY RPT\n//RPTXTNT  DD  SYSOUT=M                           NONVSAM EXTENT RPT\n//RPTVTNT  DD  SYSOUT=M                           VSAM EXTENT RPT\n//RPTOVER  DD  SYSOUT=M                           OVER ALLOCATION RPT\n//RPTMPTY  DD  SYSOUT=M                           EMPTY DATASET RPT\n//RPTEOLD  DD  SYSOUT=M                           EXPIRED RPT\n//RPTVDET  DD  SYSOUT=M                           VOLUME DETAIL RPT\n//RPTSUMY  DD  SYSOUT=M                           FINAL SUMMARY RPT\n//SYSOUT   DD  SYSOUT=J\n//SYSUDUMP DD  SYSOUT=H\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCDM230": {"ttr": 8213, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x12\\x00\\x12\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 18, "newlines": 18, "modlines": 0, "user": "FILE097"}, "text": "//DM230P10 PROC\n//*\n//S1RP230 EXEC PGM=DM230PRP,REGION=2048K\n//MASTER   DD  DSN=PBDS.DM200RRP.MST.FIL,DISP=SHR\n//CTRLCTRL DD  DSN=U220PJR.SHAREDM.DATA(CTLDM230),DISP=SHR\n//AAMIN    DD  DSN=U220PJR.SHAREDM.DATA(CTLMEAAM),DISP=SHR\n//GRPIN    DD  DSN=U220PJR.SHAREDM.DATA(CTLMEGRP),DISP=SHR\n//HISTORY  DD  DSN=PBDS.DM200RRP.HST.FIL,DISP=SHR\n//BILLOUT  DD  DSN=PBDS.DM200RRP.BIL.FIL,DISP=SHR\n//WORKHIST DD  UNIT=SYSDA,SPACE=(CYL,(1,1)),\n//             DCB=PBDS.DM200RRP.HST.FIL\n//SORTWK01 DD  UNIT=SYSDA,SPACE=(CYL,5)\n//RPTDET   DD  SYSOUT=M\n//RPTBILL  DD  SYSOUT=M,COPIES=3\n//RPTSUM   DD  SYSOUT=M,COPIES=3\n//SYSOUT   DD  SYSOUT=J\n//SYSUDUMP DD  SYSOUT=H\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCDM299": {"ttr": 8215, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 14, "newlines": 14, "modlines": 0, "user": "FILE097"}, "text": "//DM299P10 PROC\n//*\n//S1DM999 EXEC PGM=DM999DSU\n//SYSPRINT DD  SYSOUT=J\n//SYSIN    DD  UNIT=SYSDA,SPACE=(TRK,(1,1)),DCB=BLKSIZE=800\n//TAPE1    DD  DSN=OPTP.DM299DTP.FIL.BKP(+1),UNIT=TAPE,\n//             DCB=(DSCB.MODEL,BLKSIZE=32760),DISP=(,CATLG,DELETE)\n//DMPMST   DD  DISP=SHR,DSN=PBDS.DM200RRP.MST.FIL\n//DMPHST   DD  DISP=SHR,DSN=PBDS.DM200RRP.HST.FIL\n//DMPBILL  DD  DISP=SHR,DSN=PBDS.DM200RRP.BIL.FIL\n//DMPFIXC  DD  DISP=SHR,DSN=PBDS.DM200RRP.FIX.CRD\n//DMPVVDS  DD  DISP=SHR,DSN=PBDS.DM203DDM.VVDS.FIL\n//DMPVTC   DD  DISP=SHR,DSN=PBDS.DM206DDM.VTC.FIL\n//DMPPRD   DD  DISP=SHR,DSN=PBDS.DM210DUM.PRD.FIL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCDM300": {"ttr": 8217, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x18\\x00\\x18\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 24, "newlines": 24, "modlines": 0, "user": "FILE097"}, "text": "//DM300P10 PROC GEN='0'\n//S1RS999 EXEC PGM=DM999DSU\n//SYSPRINT DD  SYSOUT=J\n//SYSIN    DD  UNIT=SYSDA,SPACE=(TRK,(1,1)),DCB=BLKSIZE=800\n//TAPE1    DD  DSN=PBTP.DM390WTM.FIL.BKP(&GEN),DISP=OLD\n//RST0001  DD  DISP=SHR,DSN=PBDS.DM310WDM.VTC.FIL\n//RST0002  DD  DISP=SHR,DSN=PBDS.DM310WDM.VTC.SRT\n//RST0003  DD  DISP=SHR,DSN=PBDS.DM315WDM.VVDS.FIL\n//RST0004  DD  DISP=SHR,DSN=PBDS.DM315WDM.VVDS.SRT\n//RST0005  DD  DISP=SHR,DSN=PBDS.DM320WUM.TST.FIL\n//RST0006  DD  DISP=SHR,DSN=PBDS.DM330WDM.HSM.FIL\n//RST0007  DD  DISP=SHR,DSN=PBDS.DM330WDM.HSM.SRT\n//RST0008  DD  DISP=SHR,DSN=PBDS.DM340WDM.AREC.FIL\n//RST0009  DD  DISP=SHR,DSN=PBDS.DM340WDM.DREC.FIL\n//RST0010  DD  DISP=SHR,DSN=PBDS.DM350WUM.AREC.DEL\n//RST0011  DD  DISP=SHR,DSN=PBDS.DM350WUM.AREC.MRG\n//RST0012  DD  DISP=SHR,DSN=PBDS.DM350WUM.AREC.SRT\n//RST0013  DD  DISP=SHR,DSN=PBDS.DM350WUM.DREC.DEL\n//RST0014  DD  DISP=SHR,DSN=PBDS.DM350WUM.MCDS.FIL\n//RST0015  DD  DISP=SHR,DSN=PBDS.DM360WUM.LVL2.DEL\n//RST0016  DD  DISP=SHR,DSN=PBDS.DM360WUM.TST.MST\n//RST0017  DD  DISP=SHR,DSN=PBDS.DM380MUM.BIL.FIL\n//RST0018  DD  DISP=SHR,DSN=PBDS.DM380MUM.HST.FIL\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCDM310": {"ttr": 8449, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00.\\x00.\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 46, "newlines": 46, "modlines": 0, "user": "FILE097"}, "text": "//DM310P10 PROC\n//S1CR110 EXEC PGM=DM110PUP\n//SYSUDUMP DD SYSOUT=H\n//EXTRACTV DD DSN=PBDS.DM310WDM.VTC.FIL,DISP=OLD\n//DISKT050 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST050\n//DISKT051 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST051\n//DISKT052 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST052\n//DISKT053 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST053\n//DISKT054 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST054\n//DISKT055 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST055\n//DISKT056 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST056\n//DISKT058 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST058\n//DISKT059 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST059\n//DISKT060 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST060\n//DISKT061 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST061\n//DISKT062 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST062\n//DISKT063 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST063\n//DISKT064 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST064\n//DISKT065 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST065\n//DISKT066 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST066\n//DISKT067 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST067\n//DISKT068 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST068\n//DISKT069 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST069\n//DISKT070 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST070\n//DISKT071 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST071\n//DISKT072 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST072\n//DISKT073 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST073\n//DISKT074 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST074\n//DISKT075 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST075\n//DISKT076 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST076\n//DISKT077 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST077\n//DISKT079 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST079\n//DISKT080 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST080\n//DISKT081 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST081\n//DISKT082 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST082\n//DISKT084 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST084\n//DISKT085 DD UNIT=SYSDA,DISP=OLD,VOL=SER=TST085\n//*\n//S2SORT  EXEC PGM=SORT\n//SYSOUT   DD SYSOUT=J\n//SORTIN   DD DSN=PBDS.DM310WDM.VTC.FIL,DISP=SHR\n//SORTOUT  DD DSN=PBDS.DM310WDM.VTC.SRT,DISP=OLD\n//SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,5)\n//SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,5)\n//SYSIN    DD DSN=U220PJR.SHAREDM.DATA(CTLDM310),DISP=SHR\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCDM315": {"ttr": 8451, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00O\\x00O\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 79, "newlines": 79, "modlines": 0, "user": "FILE097"}, "text": "//DM315P10 PROC\n//S1CR140 EXEC PGM=DM140PUP\n//SYSUDUMP DD SYSOUT=H\n//EXTRACT  DD DSN=PBDS.DM315WDM.VVDS.FIL,DISP=OLD\n//VVDST050 DD DSN=SYS1.VVDS.VTST050,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST050,AMP=AMORG\n//VVDST051 DD DSN=SYS1.VVDS.VTST051,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST051,AMP=AMORG\n//VVDST052 DD DSN=SYS1.VVDS.VTST052,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST052,AMP=AMORG\n//VVDST053 DD DSN=SYS1.VVDS.VTST053,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST053,AMP=AMORG\n//VVDST054 DD DSN=SYS1.VVDS.VTST054,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST054,AMP=AMORG\n//VVDST055 DD DSN=SYS1.VVDS.VTST055,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST055,AMP=AMORG\n//VVDST056 DD DSN=SYS1.VVDS.VTST056,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST056,AMP=AMORG\n//VVDST058 DD DSN=SYS1.VVDS.VTST058,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST058,AMP=AMORG\n//VVDST059 DD DSN=SYS1.VVDS.VTST059,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST059,AMP=AMORG\n//VVDST060 DD DSN=SYS1.VVDS.VTST060,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST060,AMP=AMORG\n//VVDST061 DD DSN=SYS1.VVDS.VTST061,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST061,AMP=AMORG\n//VVDST062 DD DSN=SYS1.VVDS.VTST062,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST062,AMP=AMORG\n//VVDST063 DD DSN=SYS1.VVDS.VTST063,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST063,AMP=AMORG\n//VVDST064 DD DSN=SYS1.VVDS.VTST064,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST064,AMP=AMORG\n//VVDST065 DD DSN=SYS1.VVDS.VTST065,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST065,AMP=AMORG\n//VVDST066 DD DSN=SYS1.VVDS.VTST066,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST066,AMP=AMORG\n//VVDST067 DD DSN=SYS1.VVDS.VTST067,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST067,AMP=AMORG\n//VVDST068 DD DSN=SYS1.VVDS.VTST068,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST068,AMP=AMORG\n//VVDST069 DD DSN=SYS1.VVDS.VTST069,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST069,AMP=AMORG\n//VVDST070 DD DSN=SYS1.VVDS.VTST070,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST070,AMP=AMORG\n//VVDST071 DD DSN=SYS1.VVDS.VTST071,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST071,AMP=AMORG\n//VVDST072 DD DSN=SYS1.VVDS.VTST072,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST072,AMP=AMORG\n//VVDST073 DD DSN=SYS1.VVDS.VTST073,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST073,AMP=AMORG\n//VVDST074 DD DSN=SYS1.VVDS.VTST074,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST074,AMP=AMORG\n//VVDST075 DD DSN=SYS1.VVDS.VTST075,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST075,AMP=AMORG\n//VVDST076 DD DSN=SYS1.VVDS.VTST076,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST076,AMP=AMORG\n//VVDST077 DD DSN=SYS1.VVDS.VTST077,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST077,AMP=AMORG\n//VVDST079 DD DSN=SYS1.VVDS.VTST079,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST079,AMP=AMORG\n//VVDST080 DD DSN=SYS1.VVDS.VTST080,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST080,AMP=AMORG\n//VVDST081 DD DSN=SYS1.VVDS.VTST081,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST081,AMP=AMORG\n//VVDST082 DD DSN=SYS1.VVDS.VTST082,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST082,AMP=AMORG\n//VVDST084 DD DSN=SYS1.VVDS.VTST084,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST084,AMP=AMORG\n//VVDST085 DD DSN=SYS1.VVDS.VTST085,DISP=SHR,\n//            UNIT=SYSDA,VOL=SER=TST085,AMP=AMORG\n//*\n//S2SORT  EXEC PGM=SORT\n//SYSOUT   DD SYSOUT=J\n//SORTIN   DD DSN=PBDS.DM315WDM.VVDS.FIL,DISP=SHR\n//SORTOUT  DD DSN=PBDS.DM315WDM.VVDS.SRT,DISP=OLD\n//SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,5)\n//SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,5)\n//SYSIN    DD DSN=U220PJR.SHAREDM.DATA(CTLDM315),DISP=SHR\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCDM320": {"ttr": 8454, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x08\\x00\\x08\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 8, "newlines": 8, "modlines": 0, "user": "FILE097"}, "text": "//DM320P10 PROC\n//S1UP150 EXEC PGM=DM150PUP\n//SYSUDUMP DD SYSOUT=H\n//SYSPRINT DD SYSOUT=M\n//SORTVVVR DD DSN=PBDS.DM315WDM.VVDS.SRT,DISP=SHR\n//SORTVDSN DD DSN=PBDS.DM310WDM.VTC.SRT,DISP=SHR\n//MERGVDSN DD DSN=PBDS.DM320WUM.TST.FIL,DISP=OLD\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCDM330": {"ttr": 8456, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x11\\x00\\x11\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 17, "newlines": 17, "modlines": 0, "user": "FILE097"}, "text": "//DM330P10 PROC\n//S1CR110 EXEC PGM=DM110PUP,PARM=HSM\n//SYSUDUMP DD SYSOUT=H\n//EXTRACTV DD DSN=PBDS.DM330WDM.HSM.FIL,DISP=OLD\n//DISK01   DD UNIT=SYSDA,DISP=OLD,VOL=SER=HSM001\n//DISK02   DD UNIT=SYSDA,DISP=OLD,VOL=SER=HSM002\n//DISK03   DD UNIT=SYSDA,DISP=OLD,VOL=SER=HSM003\n//DISK04   DD UNIT=SYSDA,DISP=OLD,VOL=SER=HSM004\n//*\n//S2SORT  EXEC PGM=SORT\n//SYSOUT   DD SYSOUT=J\n//SORTIN   DD DSN=PBDS.DM330WDM.HSM.FIL,DISP=SHR\n//SORTOUT  DD DSN=PBDS.DM330WDM.HSM.SRT,DISP=OLD\n//SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,5)\n//SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,5)\n//SYSIN    DD DSN=U220PJR.SHAREDM.DATA(CTLDM330),DISP=SHR\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCDM340": {"ttr": 8458, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x07\\x00\\x07\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 7, "newlines": 7, "modlines": 0, "user": "FILE097"}, "text": "//DM340P10 PROC\n//S1CR100 EXEC PGM=DM100PUP\n//SYSUDUMP DD SYSOUT=H\n//MCDS     DD DSN=SYSB.HSM.MCDS,DISP=SHR\n//EXTRACTA DD DSN=PBDS.DM340WDM.AREC.FIL,DISP=OLD\n//EXTRACTD DD DSN=PBDS.DM340WDM.DREC.FIL,DISP=OLD\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCDM350": {"ttr": 8460, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 27, "newlines": 27, "modlines": 0, "user": "FILE097"}, "text": "//DM350P10 PROC\n//S1UP120 EXEC PGM=DM120PUP\n//SYSUDUMP DD SYSOUT=H\n//SYSPRINT DD SYSOUT=M\n//EXTRACTA DD DSN=PBDS.DM340WDM.AREC.FIL,DISP=SHR\n//SORTVDSN DD DSN=PBDS.DM330WDM.HSM.SRT,DISP=SHR\n//MERGEA   DD DSN=PBDS.DM350WUM.AREC.MRG,DISP=OLD\n//*\n//S2SORT  EXEC PGM=SORT\n//SYSOUT   DD SYSOUT=J\n//SORTIN   DD DSN=PBDS.DM350WUM.AREC.MRG,DISP=SHR\n//SORTOUT  DD DSN=PBDS.DM350WUM.AREC.SRT,DISP=OLD\n//SORTWK01 DD UNIT=SYSDA,SPACE=(CYL,5)\n//SORTWK02 DD UNIT=SYSDA,SPACE=(CYL,5)\n//SYSIN    DD DSN=U220PJR.SHAREDM.DATA(CTLDM350),DISP=SHR\n//*\n//S3RP130 EXEC PGM=DM130PRP\n//SYSUDUMP DD SYSOUT=H\n//RPTXTRAA DD SYSOUT=M\n//RPTXTRAD DD SYSOUT=M\n//RPTERROR DD SYSOUT=M\n//EXTRACTD DD DSN=PBDS.DM340WDM.DREC.FIL,DISP=SHR\n//SORTAMRG DD DSN=PBDS.DM350WUM.AREC.SRT,DISP=SHR\n//EDTDMCDS DD DSN=PBDS.DM350WUM.MCDS.FIL,DISP=OLD\n//HCMDA    DD DSN=PBDS.DM350WUM.AREC.DEL,DISP=OLD\n//HCMDD    DD DSN=PBDS.DM350WUM.DREC.DEL,DISP=OLD\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCDM360": {"ttr": 8462, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\n\\x00\\n\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 10, "newlines": 10, "modlines": 0, "user": "FILE097"}, "text": "//DM360P10 PROC\n//S1RP160 EXEC PGM=DM160PRP\n//SYSUDUMP DD  SYSOUT=H\n//RPTMAST  DD  SYSOUT=C\n//DISTTBL  DD  DSN=U220PJR.SHAREDM.DATA(CTLTSOID),DISP=SHR\n//TESTVTOC DD  DSN=PBDS.DM320WUM.TST.FIL,DISP=SHR\n//TESTMAST DD  DSN=PBDS.DM360WUM.TST.MST,DISP=OLD\n//EDTDMCDS DD  DSN=PBDS.DM350WUM.MCDS.FIL,DISP=SHR\n//HCMDD    DD  DSN=PBDS.DM360WUM.LVL2.DEL,DISP=OLD\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCDM370": {"ttr": 8464, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x08\\x00\\x08\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 8, "newlines": 8, "modlines": 0, "user": "FILE097"}, "text": "//DM370P10 PROC\n//S1UP190 EXEC PGM=DM190PUP\n//SYSPRINT DD SYSOUT=J\n//SYSUDUMP DD SYSOUT=H\n//SYSIN    DD DSN=PBDS.DM350WUM.AREC.DEL,DISP=SHR\n//         DD DSN=PBDS.DM350WUM.DREC.DEL,DISP=SHR\n//         DD DSN=PBDS.DM360WUM.LVL2.DEL,DISP=SHR\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCDM380": {"ttr": 8466, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x11\\x00\\x11\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 17, "newlines": 17, "modlines": 0, "user": "FILE097"}, "text": "//DM380P10 PROC\n//S1RP170 EXEC PGM=DM170PRP,REGION=2048K\n//MASTER   DD  DSN=PBDS.DM360WUM.TST.MST,DISP=SHR\n//AAMIN    DD  DSN=U220PJR.SHAREDM.DATA(CTLMEAAM),DISP=SHR\n//GRPIN    DD  DSN=U220PJE.SHAREDM.DATA(CTLMEGRP),DISP=SHR\n//HISTORY  DD  DSN=PBDS.DM380MUM.HST.FIL,DISP=OLD\n//BILLOUT  DD  DSN=PBDS.DM380MUM.BIL.FIL,DISP=OLD\n//WORKHIST DD  UNIT=SYSDA,SPACE=(CYL,(1,1)),\n//             DCB=PBDS.DM380MUM.HST.FIL\n//SORTWK01 DD  UNIT=SYSDA,SPACE=(CYL,5)\n//RPTDET   DD  SYSOUT=M\n//RPTBILL  DD  SYSOUT=M,COPIES=2\n//RPTSUM   DD  SYSOUT=M,COPIES=2\n//SYSOUT   DD  SYSOUT=J\n//SYSUDUMP DD  SYSOUT=H\n//CTRLCTRL DD  DSN=U220PJR.SHAREDM.DATA(CTLDM380),DISP=SHR\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRCDM390": {"ttr": 8468, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x19\\x00\\x19\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 25, "newlines": 25, "modlines": 0, "user": "FILE097"}, "text": "//DM390P10 PROC\n//S1BK999 EXEC PGM=DM999DSU\n//SYSPRINT DD  SYSOUT=J\n//SYSIN    DD  UNIT=SYSDA,SPACE=(TRK,(1,1)),DCB=BLKSIZE=800\n//TAPE1    DD  DSN=PBTP.DM390WTM.FIL.BKP(+1),UNIT=TAPE,\n//             DCB=(DSCB.MODEL,BLKSIZE=32760),DISP=(,CATLG,DELETE)\n//DMP0001  DD  DISP=SHR,DSN=PBDS.DM310WDM.VTC.FIL\n//DMP0002  DD  DISP=SHR,DSN=PBDS.DM310WDM.VTC.SRT\n//DMP0003  DD  DISP=SHR,DSN=PBDS.DM315WDM.VVDS.FIL\n//DMP0004  DD  DISP=SHR,DSN=PBDS.DM315WDM.VVDS.SRT\n//DMP0005  DD  DISP=SHR,DSN=PBDS.DM320WUM.TST.FIL\n//DMP0006  DD  DISP=SHR,DSN=PBDS.DM330WDM.HSM.FIL\n//DMP0007  DD  DISP=SHR,DSN=PBDS.DM330WDM.HSM.SRT\n//DMP0008  DD  DISP=SHR,DSN=PBDS.DM340WDM.AREC.FIL\n//DMP0009  DD  DISP=SHR,DSN=PBDS.DM340WDM.DREC.FIL\n//DMP0010  DD  DISP=SHR,DSN=PBDS.DM350WUM.AREC.DEL\n//DMP0011  DD  DISP=SHR,DSN=PBDS.DM350WUM.AREC.MRG\n//DMP0012  DD  DISP=SHR,DSN=PBDS.DM350WUM.AREC.SRT\n//DMP0013  DD  DISP=SHR,DSN=PBDS.DM350WUM.DREC.DEL\n//DMP0014  DD  DISP=SHR,DSN=PBDS.DM350WUM.MCDS.FIL\n//DMP0015  DD  DISP=SHR,DSN=PBDS.DM360WUM.LVL2.DEL\n//DMP0016  DD  DISP=SHR,DSN=PBDS.DM360WUM.TST.MST\n//DMP0017  DD  DISP=SHR,DSN=PBDS.DM380MUM.BIL.FIL\n//DMP0018  DD  DISP=SHR,DSN=PBDS.DM380MUM.HST.FIL\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USERDUMP": {"ttr": 8470, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 11, "newlines": 11, "modlines": 0, "user": "FILE097"}, "text": "USERDUMP CSECT\n         USING *,15\nR1       EQU   1\n         L     R1,0(R1)\n         LH    R1,0(R1)\n         LTR   R1,R1\n         BC    4,NODUMP\n         ABEND (R1),DUMP,STEP\nNODUMP   LPR   R1,R1\n         ABEND (R1),,STEP\n         END   USERDUMP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VVDSLIS$": {"ttr": 8472, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x10\\x01\\x07\"_\\x01 \"\\x0f\\x00R\\x00\\x1c\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2007-08-13T00:00:00", "modifydate": "2020-08-07T00:52:10", "lines": 28, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(VVDSLIST)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n SETCODE AC(1)\n ORDER   VVDSLIST\n SETSSI  CB500097\n ENTRY   VVDSLIST\n NAME    VVDSLIST(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VVDSLIST": {"ttr": 8474, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00\\x06\\x00\\x92\\x19\\x8f\\x01 \"\\x0f\\x14\\x15\\x0b\\xab\\x0b\\x94\\x00\\\\\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "1992-07-16T00:00:00", "modifydate": "2020-08-07T14:15:06", "lines": 2987, "newlines": 2964, "modlines": 92, "user": "SBGOLOB"}, "text": "         TITLE 'VVDSLIST - FORMATTED VVDS LIST'\nVVDSLIST CSECT\n         YREGS\nAPOST    EQU   X'7D'          APOSTROPHE FOR LITTERALS\n*\n*   SCAN THE VVDS OF SELECTED VOLUMES\n*   PRODUCE A FORMATTED REPORT LISTING ALL FIELDS\n*\n*   REF:  LY26-3956 - MVS/EXTENDED ARCHITECTURE CATALOG\n*                     DIAGNOSIS REFERENCE\n*\n*   NOTE:  SYS1.MODGEN REQUIRED IN SYSLIB CONCATINATION AT\n*          ASM TIME FOR MACRO IEFJFCBN.\n*\n*          ALL THE ABENDS ARE USER 1000.  TO SEE DIAGNOSITC\n*          INFORMATION FOR ONE OF THESE, PLEASE SEE THE USER\n*          MESSAGES THAT ACCOMPANY THE ABEND.\n*\n*  ----------------------------------------------------------------\n*\n*   CHANGE LOG:\n*\n*   07JUNE2020 - IF THERE IS NO VVDS ON THE VOLUME, THEN EXIT WITH\n*                RETURN CODE 16, INSTEAD OF AN ABEND.  AND WRITE A\n*                MESSAGE TO SYSPRINT SAYING THAT THERE IS PROBABLY\n*                NO VVDS ON THE DISK PACK.   SBG\n*\n*                COSMETIC CHANGES FROM RICHARD FOCHTMAN INCLUDED.\n*\n*                APPARENTLY, AMSDB CELLS DO NOT HAVE TO HAVE ONLY\n*                LENGTHS OF DECIMAL 98 (HEX 62) ANYMORE.  LENGTH\n*                CHECK FOR AMSDB CELLS WAS COMMENTED OUT.\n*                (SEE LABEL PC60)\n*\n*                DUMP OPTION WAS REMOVED FROM THE ABEND 1000,\n*                BECAUSE MOST ERRORS DON'T NEED SYSUDUMP TO BE\n*                FILLED UP.\n*\n*  ----------------------------------------------------------------\n         USING VVDSLIST,R15\n         B     MAINEP\n         DC    AL1(L'CSECTLIT)\nCSECTLIT DC    C'VVDSLIST - FORMATTED VVDS LIST &SYSDATE'\n         EJECT\nMAINEP   DS    0H\n         SAVE  (14,12)\n         LR    R12,R15        ENTRY ADR TO BASE REG\n         DROP  R15\n         LA    R11,2048(,R12)\n         LA    R11,2048(,R11)\n         USING VVDSLIST,R12,R11 PGM BASES\n         LR    R2,R13\n         LA    R13,SAVEAREA   SAVEAREA AND WORKING STORAGE\n         LA    R10,2048(,R13)\n         LA    R10,2048(,R10)\n         LA    R9,2048(,R10)\n         LA    R9,2048(,R9)\n         LA    R8,2048(,R9)\n         LA    R8,2048(,R8)\n         LA    R7,2048(,R8)\n         LA    R7,2048(,R7)\n         USING SAVEAREA,R13,R10,R9,R8,R7 ADDRESSABILITY\n         ST    R2,SAVEAREA+4  SAVE CALLERS R13\n         ST    R13,8(,R2)     BACK LINK SAVEAREA\n         USING IHADCB,R6      ADDRESSABILITY\n         LA    R6,SYSPRINT    A(DCB)\n         OPEN  ((R6),OUTPUT)\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROEXT        NO\n         DROP  R6\n         GENCB BLK=ACB,                                                X\n               AM=VSAM,                                                X\n               DDNAME=XXXXXXXX,                                        X\n               MACRF=(ADR,SEQ)\n         ST    R1,ADDRACB     SAVE A(ACB)\n         LR    R6,R1          POST TO NEW REG\n         L     R0,BLRECL      POST REC LEN OF BUFFER\n         GETMAIN R,LV=(0)     GETMAIN A RECORD AREA\n         ST    R1,ADDRVREC    SAVE\n         LR    R5,R1          POST TO A MORE CONVENIENT REG\n         L     R4,BLRECL      POST LRECL\n         GENCB BLK=RPL,                                                X\n               ACB=(R6),                                               X\n               AM=VSAM,                                                X\n               AREA=(R5),                                              X\n               AREALEN=(R4),                                           X\n               OPTCD=(ADR,SEQ)\n         ST    R1,ADDRRPL     SAVE A(RPL)\n         EXTRACT TIOT,FIELDS=TIOT GET ADDRESS OF TIOT\n         L     R2,TIOT        LOAD ADDRESS OF TIOT IN REG2\n         LA    R2,24(,R2)     SKIP TO DD ENTRIES\n         ST    R2,NEXTDD      SAVE FIRST DD TO INITIALIZE LOOP\n         TITLE 'TIOTLOOP - SCAN TIOT'\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        SCAN TIOT FOR DDNAMES 'VVDSXXXX' WHERE X CAN BE ANYTHING     *\n*        WHEN FINDING ONE TAKE OFF SCAN FOR VVR RECORDS               *\n*        WHEN HITTING END OF TIOT GO TO END OF JOB                    *\n*                                                                     *\n***********************************************************************\n*                                                                     *\nTIOTLOOP DS    0H\n         L     R2,NEXTDD      PICK UP CURRENT DD SEG\n         SR    R3,R3          CLEAR REG3\n         IC    R3,0(,R2)      DETERMINE IF END OF TIOT\n         LTR   R3,R3          END OF TIOT?\n         BZ    EXIT           GO TO EOJ NORMAL\n         LA    R1,0(R2,R3)    ADDR OF NEXT TIOT\n         ST    R1,NEXTDD      SAVE\n         CLC   =C'VVDS',4(R2) IS THIS A VALID DD ENTRY\n         BNE   TIOTLOOP       NO -- SKIP IT\n         MVC   DDNAME,4(R2)   SAVE DDNAME\n         LA    R6,DCBJFCB     A(MODEL DCB) FOR RDJFCB\n         USING IHADCB,R6      ADDRESSABILITY\n         MVC   DCBDDNAM,DDNAME POST DD NAME\n         RDJFCB ((R6))\n         LTR   R15,R15        RDJFCB OK\n         BNZ   ERRJFCB        NO -- ERROR\n         DROP  R6\n         MVC   TL01DSN,JFCBDSNM POST DATA SET NAME\n         MVC   TL01DDN,DDNAME POST DD NAME\n         L     R6,ADDRACB     POST A(ACB)\n         MODCB ACB=(R6),                                               X\n               DDNAME=(*,DDNAME)\n         OPEN  ((6))          OPEN FILE\n         CH    R15,=H'4'      ABOVE 'WARNING'\n         BH    ERROPV         YES -- ERROR\n         SHOWCB ACB=(R6),                                              X\n               AREA=RLRECL,                                            X\n               LENGTH=L'RLRECL,                                        X\n               FIELDS=LRECL\n         L     R6,ADDRRPL     POST A(RPL)\n         CLC   RLRECL,BLRECL  CHECK BUF SIZE\n         BNH   VVDSSCAN       NO -- OK\n         L     R1,ADDRVREC    A(REC AREA)\n         L     R0,BLRECL      L'REC AREA\n         FREEMAIN R,LV=(0),A=(1)\n         L     R0,RLRECL      NEW L'REC AREA\n         ST    R0,BLRECL      POST\n         GETMAIN R,LV=(0)     GETMAIN A RECORD AREA\n         ST    R1,ADDRVREC    SAVE\n         LR    R5,R1          POST TO A MORE CONVENIENT REG\n         L     R4,BLRECL      POST TO A MORE CONVENIENT REG\n         MODCB RPL=(R6),                                               X\n               AREA=(R5),                                              X\n               AREALEN=(R4)\nVVDSSCAN DS    0H\n         MVI   SWV,C'O'       POST FILE OPEN\n         BAL   R14,SCAN       SCAN THE VVDS\n         L     R6,ADDRACB     POST A(ACB)\n         CLOSE ((R6))         CLOSE THIS FILE\n         B     TIOTLOOP       LOOP BACK\n         TITLE 'SCAN     - SCAN THE VVDS'\nSCAN     DS    0H             PROCESS NEXT REC\n         ST    R14,SCANR14    SAVE RETURN ADDR\n         BAL   R14,GETV       GET VVCR\n         CLI   SWV,C'E'       EOF?\n         BE    ERRNOCR        YES -- ERROR\n         L     R5,ADDRVREC    REFRESH RECORD ADDR\n         MVC   DL02LIT,LT01   INDICATE VVCR\n         BAL   R14,PHDR       PUT RECORD HEADER\n         BAL   R14,PVCR       PROCESS VVCR\n         BAL   R14,GETV       GET SELF DEFINING VVR\n         CLI   SWV,C'E'       EOF?\n         BE    ERRNOSDR       YES -- ERROR\n         L     R5,ADDRVREC    REFRESH RECORD ADDR\n         MVC   DL02LIT,LT02   INDICATE S-D VVR\n         BAL   R14,PHDR       PUT RECORD HEADER\n         BAL   R14,SVVR       PROCESS SELF DEFINING VVR REC\nSCANLOOP DS    0H\n         BAL   R14,GETV       GET NEXT VVR REC\n         CLI   SWV,C'E'       EOF\n         BE    SCANEXIT       YES -- DONE\n         L     R5,ADDRVREC    REFRESH RECORD ADDR\n         USING DSE9,R5        ADDRESSABILITY\n         MVC   DL02LIT,LT03   INDICATE PRIMARY VVR\n         CLI   VVRTYPE,C'Z'   PRIMARY\n         BE    SCANZ          YES -- PROCESS\n         MVC   DL02LIT,LT04   INDICATE SECONDARY VVR\n         CLI   VVRTYPE,C'Q'   SECONDARY\n         BE    SCANQ          YES -- PROCESS\n         B     ERRRTY         ERROR -- BAD RECORD TYPE\nSCANZ    DS    0H\n         BAL   R14,PHDR       PUT RECORD HEADER\n         BAL   R14,PVRZ       PROCESS Z REC\n         B     SCANLOOP       LOOP BACK\nSCANQ    DS    0H\n         BAL   R14,PHDR       PUT RECORD HEADER\n         BAL   R14,PVRQ       PROCESS Q REC\n         B     SCANLOOP       LOOP BACK\nSCANEXIT DS    0H\n         L     R14,SCANR14    RESTORE RETURN ADDR\n         BR    R14            DONE -- EXIT\n         TITLE 'PHDR     - PUT RECORD HEADER'\nPHDR     DS    0H\n         ST    R14,PHDRR14    SAVE RETURN ADDR\n         SHOWCB RPL=((R6)),                                            X\n               AREA=SHOWAREA,                                          X\n               LENGTH=L'SHOWAREA,                                      X\n               FIELDS=(RBA,RECLEN)\n*\n         L     R15,SHOWRBA    POST\n         CVD   R15,WORKDW     NOW PACKED\n         SRP   WORKDW,1,0     SHIFT 1 LEFT FOR EDIT\n         MVC   DL02RBA,ED02   POST EDIT MASK\n         ED    DL02RBA,WORKDW+2\n*\n         ZAP   WORKDW,GETVRC  POST RECORD COUNT\n         MVC   DL02RECN,ED03  POST EDIT MASK\n         ED    DL02RECN,WORKDW+4\n*\n         L     R15,SHOWRECL   POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL02LEN,HD2LIT POST\n*\n         ZAP   PUTLGC,PUTLLMAX FORCE PAGE EJECT\n         MVC   PUTLLINE,DL02  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n         MVC   PUTLLINE,SPACES POST BLANK LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n         L     R14,PHDRR14    RESTORE RETURN ADDR\n         BR    R14\n         TITLE 'PVCR     - PROCESS VSAM VOL CTL REC'\nPVCR     DS    0H\n         ST    R14,PVCRR14    SAVE RETURN ADDR\n         USING VVCR,R5        ADDRESSABILITY\n         SR    R15,R15        CLEAR\n         ICM   R15,B'0011',VVCRLEN POST\n         CH    R15,=H'4088'   CHECK VALUE\n         BNE   ERRVVCRL       ERROR - WRONG LENGTH\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL04LEN,HD2LIT POST\n*\n         ICM   R15,B'0011',VVCNUMCI POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL04NCI,HD2LIT POST\n*\n         LA    R1,20          LENGTH\n         LA    R15,VVCRRSV    ADDR\n         BAL   R14,HEX        CVT TO HEX\n         MVC   DL04RSV,HEXLIT POST\n*\n         MVC   PUTLLINE,DL04  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R4,VVCATNMS    A(1ST CAT ENTRY)\n         LA    R3,36          COUNT\n         BAL   R14,PCRC       PROCESS CONTROL REC CAT ENTRIES\n*\n         LA    R4,VVCCISPC    A(CI SPACE MAP)\n         LA    R3,64          COUNT (32 BYTES PER)\n         BAL   R14,PCRS       PROCESS CONTROL REC SPACE ENTRIES\n*\n         DROP  R5\n         L     R14,PVCRR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PCRC     - PROCESS CTRL REC CAT ENTRIES'\n*\n*        ON ENTRY:  R4 - ADDR OF START OF FIRST CAT ENTRY\n*                   R3 - NUMBER OF CAT ENTRIES (39)\n*\nPCRC     DS    0H\n         ST    R14,PCRCR14    SAVE RETURN ADDR\n         USING VVCATENT,R4    ADDRESSABILITY\n         ZAP   PCRCLN,=P'0'   SET LOOP NUMBER\nPCRCLOOP DS    0H\n         AP    PCRCLN,=P'1'   BUMP LOOP NUMBER\n         MVC   DL05ENT,ED04   POST EDIT MASK\n         ED    DL05ENT,PCRCLN POST\n*\n         LA    R15,VVCCATNM   A(CAT NAME)\n         LA    R1,44          L'CAT NAME\n         BAL   R14,HEX        CVT TO HEX\n         MVC   DL05CTN,HEXLIT POST\n*\n         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL05  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   DL06CTN,VVCCATNM\n         TR    DL06CTN,TRNAME\n*\n         ICM   R15,B'1111',VVCDTRBA POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL06RBA,HD4LIT POST\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL06  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVCIXRBA POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL07IXRB,HD4LIT POST\n*\n         ICM   R15,B'1111',VVCSSRBA POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL07SSRB,HD4LIT POST\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL07  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n         MVC   PUTLLINE,SPACES POST BLANK LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R4,VVCATLN(,R4) BUMP TO NEXT ENTRY\n         BCT   R3,PCRCLOOP    LOOP BACK\n*\n         DROP  R4\n         L     R14,PCRCR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PCRS     - PROCESS CTL REC SPACE MAP'\n*\n*        ON ENTRY:  R4 - ADDR OF START OF SPACE MAP\n*                   R3 - NUMBER OF 32 BYTE SEGS IN SPACE MAP (64)\n*\nPCRS     DS    0H\n         ST    R14,PCRSR14    SAVE RETURN ADDR\n         ST    R4,PCRSBASE    SAVE BASE ADDR\nPCRSLOOP DS    0H\n         LR    R15,R4         POST CURRENT ADDR\n         S     R15,PCRSBASE   LESS BASE ADDR = OFFSET\n         STH   R15,WORKDW     POST\n         LA    R15,WORKDW     ADDR\n         LA    R1,2           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL08BASE,HEXLIT POST\n*\n         LA    R15,00(,R4)    A(HEX SEG 1)\n         LA    R1,4           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL08HX00,HEXLIT POST\n*\n         LA    R15,04(,R4)    A(HEX SEG 2)\n         LA    R1,4           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL08HX04,HEXLIT POST\n*\n         LA    R15,08(,R4)    A(HEX SEG 3)\n         LA    R1,4           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL08HX08,HEXLIT POST\n*\n         LA    R15,12(,R4)    A(HEX SEG 4)\n         LA    R1,4           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL08HX0C,HEXLIT POST\n*\n         LA    R15,16(,R4)    A(HEX SEG 5)\n         LA    R1,4           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL08HX10,HEXLIT POST\n*\n         LA    R15,20(,R4)    A(HEX SEG 6)\n         LA    R1,4           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL08HX14,HEXLIT POST\n*\n         LA    R15,24(,R4)    A(HEX SEG 7)\n         LA    R1,4           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL08HX18,HEXLIT POST\n*\n         LA    R15,28(,R4)    A(HEX SEG 8)\n         LA    R1,4           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL08HX1C,HEXLIT POST\n*\n         MVC   PUTLLINE,DL08  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R4,32(,R4)     BUMP TO NEXT ENTRY\n         BCT   R3,PCRSLOOP    LOOP BACK\n*\n         L     R14,PCRSR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'SVVR     - PROCESS SELF DEFINING VVR REC'\nSVVR     DS    0H\n         ST    R14,SVVRR14    SAVE RETURN ADDR\n         USING DSE9,R5        ADDRESSABILITY\n         CLI   VVRTYPE,C'Z'   PRIMARY\n         BNE   ERRSVVRZ       NO -- ERROR\n         TM    VVRFLAG,B'01000000' SELF DEFINING VVR\n         BZ    ERRSVVRF       NO -- ERROR\n         BAL   R14,PVRZ       PROCESS Z REC\n         DROP  R5\n         L     R14,SVVRR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PVRQ     - PROCESS VVR RECORD TYPE Q'\nPVRQ     DS    0H\n         ST    R14,PVRQR14    SAVE RETURN ADDR\n         USING DSE9,R5        ADDRESSABILITY\n         BAL   R14,PCE9       PROCESS CELL E9\n         AH    R5,VVRHDLEN    BUMP TO NEXT CELL\n         LA    R5,L'VVRLEN(R5) ALLOW FOR VVRLEN\n         USING DS23,R5        ADDRESSABILITY\n         BAL   R14,PC23       PROCESS CELL 23\n         DROP  R5\n         L     R14,PVRQR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PVRZ     - PROCESS VVR RECORD TYPE Z'\nPVRZ     DS    0H\n         ST    R14,PVRZR14    SAVE RETURN ADDR\n         USING DSE9,R5        ADDRESSABILITY\n         BAL   R14,PCE9       PROCESS CELL E9\n         AH    R5,VVRHDLEN    BUMP TO NEXT CELL\n         LA    R5,L'VVRLEN(R5) ALLOW FOR VVRLEN\n         USING DS21,R5        ADDRESSABILITY\n         BAL   R14,PC21       PROCESS CELL 21\n         AH    R5,VVRDSLEN    BUMP TO NEXT CELL\n         USING DS60,R5        ADDRESSABILITY\n         BAL   R14,PC60       PROCESS CELL 60\n         AH    R5,VVRAMDCN    BUMP TO NEXT CELL\n         USING DS23,R5        ADDRESSABILITY\n         BAL   R14,PC23       PROCESS CELL 23\n         DROP  R5\n         L     R14,PVRZR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PC21     - PROCESS VVR CELL TYPE 21'\nPC21     DS    0H\n         ST    R14,PC21R14    SAVE RETURN ADDR\n         MVC   DL03LIT,LT06   INDICATE DATASET INFORMATION CELL\n         BAL   R14,POFF       PUT OFFSET LINE\n         USING DS21,R5        ADDRESSABILITY\n         CLC   VVRDSLEN,=H'53' SEGMENT LENGTH CHECK\n         BE    PC21LNOK       SHORT VALUE -- OK\n         CLC   VVRDSLEN,=H'85' SEGMENT LENGTH CHECK\n         BE    PC21LNOK       LONG VALUE -- OK\n         B     ERRDSLEN       BAD LENGTH -- ERROR\nPC21LNOK DS    0H\n         ICM   R15,B'0011',VVRDSLEN POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL23DSLN,HD2LIT POST\n*\n         LA    R15,VVRDSTYP   A(HEX)\n         LA    R1,1           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL23HTY,HEXLIT POST\n*\n         MVC   DL23CTY,VVRDSTYP POST\n         TR    DL23CTY,TRNAME NOW VALID\n*\n         MVC   PUTLLINE,DL23  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R15,VVRATTR1   POST\n         BAL   R14,BIN        NOW BIN\n         MVC   DL24ATR1,BINLIT POST\n*\n         LA    R15,VVRATTR2   POST\n         BAL   R14,BIN        NOW BIN\n         MVC   DL24ATR2,BINLIT POST\n*\n         LA    R15,VVROPIND   POST\n         LA    R1,1           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL24OIND,HEXLIT POST\n*\n         ZAP   PUTLGC,=P'8'   POST 8 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL24  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'7'   POST 7 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL25  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'6'   POST 6 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL26  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'5'   POST 5 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL27  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL28  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL29  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL30  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL31  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   PUTLLINE,DL32  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRBUFSZ POST\n         BAL   R14,HD4        CVT 2 BYTES TO HEX/CHR\n         MVC   DL33BSZ,HD4LIT POST\n*\n         SR    R15,R15        CLEAR\n         ICM   R15,B'0111',VVRPRISP POST\n         BAL   R14,HD3        CVT 3 BYTES TO HEX/CHR\n         MVC   DL33PSP,HD3LIT POST\n*\n         SR    R15,R15        CLEAR\n         ICM   R15,B'0111',VVRSECSP POST\n         BAL   R14,HD3        CVT 3 BYTES TO HEX/CHR\n         MVC   DL33SSP,HD3LIT POST\n*\n         MVC   PUTLLINE,DL33  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT\n*\n         LA    R15,VVRSPCFG   POST A()\n         BAL   R14,BIN        NOW BIN\n         MVC   DL34SPFG,BINLIT POST\n*\n         ICM   R15,B'1111',VVRDSHU POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL34DSHU,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRDSHA POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL34DSHA,HD4LIT POST\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL34  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL35  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   PUTLLINE,DL36  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRLRECL POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL37RECL,HD4LIT POST\n*\n         LA    R15,VVRLRECL+L'VVRLRECL POST A(0)\n         LA    R1,2           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL37RSV,HEXLIT POST\n*\n         LA    R15,VVREXCPX   POST A()\n         LA    R1,8           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL37HXCP,HEXLIT POST\n*\n         MVC   DL37CXCP,VVREXCPX POST\n         TR    DL37CXCP,TRNAME FIX\n*\n         MVC   PUTLLINE,DL37  POST TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRDSHK POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL38DSHK,HD4LIT POST\n*\n         LA    R15,VVRCLSFG   POST A()\n         BAL   R14,BIN        NOW BIN\n         MVC   DL38CLSF,BINLIT POST\n*\n         LA    R15,VVRAIXFG   POST A()\n         BAL   R14,BIN        NOW BIN\n         MVC   DL38AIXF,BINLIT POST\n*\n         ZAP   PUTLGC,=P'5'   POST 5 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL38  POST TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL39  POST TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL40  POST TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL41  POST TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL42  POST TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   PUTLLINE,DL43  POST TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R15,VVRTMSTP   POST A()\n         LA    R1,8           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL44TMST,HEXLIT POST\n*\n         CLC   VVRDSLEN,=H'53' SHORT SEGMENT\n         BE    PC21SH         YES\n         LA    R15,VVRALTSP   POST A()\n         LA    R1,8           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL44ALSP,HEXLIT POST\n*\n         MVC   PUTLLINE,DL44  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R15,VVRALTSP+L'VVRALTSP POST A()\n         LA    R1,24          LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL45RSV,HEXLIT POST\n*\n         MVC   PUTLLINE,DL45  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n         B     PC21X          DONE -- EXIT\n*\nPC21SH   DS    0H\n         MVC   DL44ALSP,LT10  POST NOT AVAILABLE\n*\n         MVC   PUTLLINE,DL44  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   DL45RSV,LT11   POST NOT AVAILABLE\n*\n         MVC   PUTLLINE,DL45  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\nPC21X    DS    0H\n         DROP  R5\n         L     R14,PC21R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PC23     - PROCESS VVR CELL TYPE 23'\nPC23     DS    0H\n         ST    R14,PC23R14    SAVE RETURN ADDR\n         MVC   DL03LIT,LT08   INDICATE VOLUME INFORMATION CELL\n         BAL   R14,POFF       PUT OFFSET LINE\n         USING DS23,R5        ADDRESSABILITY\n         ICM   R15,B'0011',VVRVOLLN POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL72VOLL,HD2LIT POST\n*\n         LA    R15,VVRVOLTP   POST A()\n         LA    R1,1           POST LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL72HVT,HEXLIT POST\n*\n         MVC   DL72CVT,VVRVOLTP POST\n         TR    DL72CVT,TRNAME FIX\n*\n         LA    R15,VVRVOLFG   POST A()\n         BAL   R14,BIN        NOW BIN\n         MVC   DL72VOLF,BINLIT POST\n*\n         SR    R15,R15        CLEAR\n         IC    R15,VVRNOEXT   POST\n         BAL   R14,HD1        CVT 1 BYTE TO HEX/CHR\n         MVC   DL72NOXT,HD1LIT POST\n*\n         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL72  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL73  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL74  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL75  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   PUTLLINE,DL76  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRHKRBA POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL77HKRB,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRHURBA POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL77HURB,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRHARBA POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL77HARB,HD4LIT POST\n*\n         MVC   PUTLLINE,DL77  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRBLKSZ POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL78BKSZ,HD4LIT POST\n*\n         ICM   R15,B'0011',VVRBLKTK POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL78BKTK,HD2LIT POST\n*\n         ICM   R15,B'0011',VVRTRKAU POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL78TKAU,HD2LIT POST\n*\n         MVC   PUTLLINE,DL78  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R15,VVRTPEXT   POST A()\n         BAL   R14,BIN        NOW BIN\n         MVC   DL79TPXT,BINLIT POST\n*\n         ICM   R15,B'0011',VVRTKCYL POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL79TKCY,HD2LIT POST\n*\n         ICM   R15,B'1111',VVRBYTTK POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL79BYTK,HD4LIT POST\n*\n         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL79  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL80  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL81  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL82  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   PUTLLINE,DL83  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRBYTAU POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL84BYAU,HD4LIT POST\n*\n         MVC   PUTLLINE,DL84  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R15,VVRLOKYL   POST  A()\n         LA    R1,2           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL85LOKL,HEXLIT POST\n*\n         LA    R15,VVRLOKYV   POST A()\n         SR    R1,R1          CLEAR\n         ICM   R1,B'0011',VVRLOKYL POST\n         STC   R1,LNHEXTR     POST HEX LENGTH\n         MVC   DL85XTLT,SPACES POST NO HEX TRUNC\n         CH    R1,=H'40'      TOO LONG\n         BNH   PC23HLT1       NO -- CONTINUE\n         MVC   DL85XTLT,LT09  POST HEX TRUNC\n         LH    R1,=H'40'      POST SHORTER LENGTH\n         STC   R1,LNHEXTR     SAVE\nPC23HLT1 DS    0H\n         MVC   DL85LOKV,SPACES CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PC23HLT2       NOT ZERO -- PROCESS\n         MVI   DL85LOKV,APOST POST CLOSING APOST\n         B     PC23HLZ        CONTINUE\nPC23HLT2 DS    0H\n         BAL   R14,HEX        NOW HEX\n         LA    R0,HEXLIT      FROM ADDR\n         SR    R1,R1          CLEAR\n         IC    R1,LNHEXTR     LENGTH\n         AR    R1,R1          X 2 FOR HEX\n         LA    R14,DL85LOKV   TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         MVI   0(R14),APOST   POST\nPC23HLZ  DS    0H\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL85  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         ICM   R1,B'0011',VVRLOKYL POST\n         CVD   R1,WORKDW      NOW PACKED\n         MVC   DL86LOKL,ED01  POST EDIT MASK\n         ED    DL86LOKL,WORKDW+5\n*\n         STC   R1,LNCHRTR     SAVE\n         MVC   DL86CTLT,SPACES POST NO CHR TRUNC\n         CH    R1,=H'80'      TOO LONG\n         BNH   PC23CLT1       NO -- CONTINUE\n         LH    R1,=H'80'      TOO LONG\n         MVC   DL86CTLT,LT09  POST CHR TRUNC\n         STC   R1,LNCHRTR     SAVE\nPC23CLT1 DS    0H\n         MVC   DL86LOKV,SPACES CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PC23CLT2       NOT ZERO -- PROCESS\n         MVI   DL86LOKV,APOST POST CLOSING APOST\n         B     PC23CLZ        CONTINUE\nPC23CLT2 DS    0H\n         LA    R0,VVRLOKYV    FROM ADDR\n*                             FROM LENGTH ALREADY IN R1\n         LA    R14,DL86LOKV   TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         TR    DL86LOKV,TRNAME FIX\n         MVI   0(R14),APOST   ADD TRAILING APOST\nPC23CLZ  DS    0H\n*\n         MVC   PUTLLINE,DL86  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         ICM   R1,B'0011',VVRLOKYL L'VVRLOKYV\n         LA    R4,VVRLOKYV(R1) NOW A(VVRHIKYL)\n         LA    R15,0(,R4)     POST A(VVRHIKYL)\n         LA    R1,2           POST LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL87HIKL,HEXLIT POST\n*\n         LA    R15,2(,R4)     POST A(VVRHIKYV)\n         SR    R1,R1          CLEAR\n         ICM   R1,B'0011',0(R4) POST VVRHIKYL\n         STC   R1,LNHEXTR     POST HEX LENGTH\n         MVC   DL87XTLT,SPACES POST NO HEX TRUNC\n         CH    R1,=H'40'      TOO LONG\n         BNH   PC23HHT1       NO -- CONTINUE\n         MVC   DL87XTLT,LT09  POST HEX TRUNC\n         LH    R1,=H'40'      POST SHORTER LENGTH\n         STC   R1,LNHEXTR     SAVE\nPC23HHT1 DS    0H\n         MVC   DL87HIKV,SPACES CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PC23HHT2       NOT ZERO -- PROCESS\n         MVI   DL87HIKV,APOST POST CLOSING APOST\n         B     PC23HHZ        CONTINUE\nPC23HHT2 DS    0H\n         BAL   R14,HEX        NOW HEX\n         LA    R0,HEXLIT      FROM ADDR\n         SR    R1,R1          CLEAR\n         IC    R1,LNHEXTR     LENGTH\n         AR    R1,R1          X 2 FOR HEX\n         LA    R14,DL87HIKV   TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         MVI   0(R14),APOST   POST\nPC23HHZ  DS    0H\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL87  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         ICM   R1,B'0011',0(R4) POST VVRHIKYL\n         CVD   R1,WORKDW      NOW PACKED\n         MVC   DL88HIKL,ED01  POST EDIT MASK\n         ED    DL88HIKL,WORKDW+5\n*\n         STC   R1,LNCHRTR     SAVE\n         MVC   DL88CTLT,SPACES POST NO CHR TRUNC\n         CH    R1,=H'80'      TOO LONG\n         BNH   PC23CHT1       NO -- CONTINUE\n         LH    R1,=H'80'      TOO LONG\n         MVC   DL88CTLT,LT09  POST CHR TRUNC\n         STC   R1,LNCHRTR     SAVE\nPC23CHT1 DS    0H\n         MVC   DL88HIKV,SPACES CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PC23CHT2       NOT ZERO -- PROCESS\n         MVI   DL88HIKV,APOST POST CLOSING APOST\n         B     PC23CHZ        CONTINUE\nPC23CHT2 DS    0H\n         LA    R0,2(,R4)      FROM ADDR VVRHIKYV\n*                             FROM LENGTH ALREADY IN R1\n         LA    R14,DL88HIKV   TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         TR    DL88HIKV,TRNAME FIX\n         MVI   0(R14),APOST   ADD TRAILING APOST\nPC23CHZ  DS    0H\n*\n         MVC   PUTLLINE,DL88  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         ICM   R1,B'0011',0(R4) L'VVRHIKYV\n         LA    R4,2(R1,R4)    NOW A(VVRXTNTL)\n         ICM   R15,B'0011',0(R4) POST VVRXTNTL\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL89XTL,HD2LIT POST\n*\n         SR    R15,R15        CLEAR\n         ICM   R15,B'0011',0(R4) POST VVRXTNTL\n         SR    R14,R14        CLEAR\n         D     R14,=F'20'     NOW NUMBER OF EXTENTS\n         LTR   R14,R14        REMAINDER S/B ZERO\n         BNZ   ERRXTNTL       NOT ZERO -- ERROR\n         LR    R3,R15         POST COUNT\n         CVD   R3,WORKDW      QUOTIENT NOW PACKED\n         MVC   DL89XTN,ED04   POST EDIT MASK\n         ED    DL89XTN,WORKDW+6 POST\n*\n         MVC   PUTLLINE,DL89  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R4,2(,R4)      BUMP TO VVRXTNT\n         LTR   R3,R3          ZERO COUNT\n         BNP   PC23XTX        YES -- CONTINUE\nPC23XTL  DS    0H\n         USING VVRX,R4        ADDRESSABILITY\n         ICM   R15,B'0011',VVRXSEQN POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL90XSQN,HD2LIT POST\n*\n         ICM   R15,B'0011',VVRXSC POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL90XSC,HD2LIT POST\n*\n         ICM   R15,B'0011',VVRXSH POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL90XSH,HD2LIT POST\n*\n         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL90  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'0011',VVRXEC POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL91XEC,HD2LIT POST\n*\n         ICM   R15,B'0011',VVRXEH POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL91XEH,HD2LIT POST\n*\n         ICM   R15,B'0011',VVRXNTRK POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL91XNTR,HD2LIT POST\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL91  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRXSRBA POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL92XSRB,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRXERBA POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL92XERB,HD4LIT POST\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL92  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n         MVC   PUTLLINE,SPACES POST BLANK LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R4,20(,R4)     BUMP TO NEXT ENTRY\n         BCT   R3,PC23XTL     LOOP BACK\n         DROP  R4\nPC23XTX  DS    0H\n         DROP  R5\n         L     R14,PC23R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PC60     - PROCESS VVR CELL TYPE 60'\nPC60     DS    0H\n         ST    R14,PC60R14    SAVE RETURN ADDR\n         MVC   DL03LIT,LT07   INDICATE AMSDB CELL\n         BAL   R14,POFF       PUT OFFSET LINE\n         USING DS60,R5        ADDRESSABILITY\n* Z/OS   CLC   VVRAMDCN,=H'98' LENGTH CHECK\n* Z/OS   BNE   ERRAMDCN       LENGTH BAD -- ERROR\n         ICM   R15,B'0011',VVRAMDCN POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL46DCN,HD2LIT POST\n*\n         LA    R15,VVRAMID    POST A()\n         LA    R1,1           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL46HID,HEXLIT POST\n*\n         MVC   DL46CID,VVRAMID POST\n         TR    DL46CID,TRNAME FIX\n*\n         LA    R15,VVRAMATR   POST\n         BAL   R14,BIN        NOW BIN\n         MVC   DL46ATR,BINLIT POST\n*\n         ZAP   PUTLGC,=P'8'   POST 8 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL46  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'7'   POST 7 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL47  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'6'   POST 6 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL48  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'5'   POST 5 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL49  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL50  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL51  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL52  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL53  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   PUTLLINE,DL54  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'0011',VVRAMLEN POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL55LEN,HD2LIT POST\n*\n         ICM   R15,B'0011',VVRAMNST POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL55NST,HD2LIT POST\n*\n         ICM   R15,B'0011',VVRAMAKP POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL55AKP,HD2LIT POST\n*\n         ICM   R15,B'0011',VVRAMRKP POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL55RKP,HD2LIT POST\n*\n         MVC   PUTLLINE,DL55  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'0011',VVRAMKLN POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL56KLN,HD2LIT POST\n*\n         IC    R15,VVRAMPCA   POST\n         BAL   R14,HD1        CVT 1 BYTE TO HEX/CHR\n         MVC   DL56PCA,HD1LIT POST\n*\n         IC    R15,VVRAMPCI   POST\n         BAL   R14,HD1        CVT 1 BYTE TO HEX/CHR\n         MVC   DL56PCI,HD1LIT POST\n*\n         ICM   R15,B'0011',VVRAMCCA POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL56CCA,HD2LIT POST\n*\n         MVC   PUTLLINE,DL56  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'0011',VVRAMFCA POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL57FCA,HD2LIT POST\n*\n         ICM   R15,B'1111',VVRAMFCI POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL57FCI,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRAMCIV POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL57CIV,HD4LIT POST\n*\n         MVC   PUTLLINE,DL57  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRAMLCL POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL58LCL,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRAMHLR POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL58HLR,HD4LIT POST\n*\n         MVC   PUTLLINE,DL58  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRAMSSR POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL59SSR,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRAMARD POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL59ARD,HD4LIT POST\n*\n         MVC   PUTLLINE,DL59  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R15,VVRAMAT3   POST A()\n         BAL   R14,BIN        NOW BIN\n         MVC   DL60AT3,BINLIT POST\n*\n         IC    R15,VVRAMSNO   POST\n         BAL   R14,HD1        CVT 1 BYTE TO HEX/CHR\n         MVC   DL60SNO,HD1LIT POST\n*\n         ICM   R15,B'1111',VVRAMDUI POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL60DUI,HD4LIT POST\n*\n         ZAP   PUTLGC,=P'6'   POST 6 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL60  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'5'   POST 5 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL61  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL62  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL63  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL64  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL65  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   PUTLLINE,DL66  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'0011',VVRAMBFI POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL67BFI,HD2LIT POST\n*\n         LA    R15,VVRAMSTS   POST A()\n         LA    R1,8           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL67STS,HEXLIT POST\n*\n         ICM   R15,B'0011',VVRAMNIL POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL67NIL,HD2LIT POST\n*\n         MVC   PUTLLINE,DL67  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'0011',VVRAMNXT POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL68NXT,HD2LIT POST\n*\n         ICM   R15,B'1111',VVRAMNLR POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL68NLR,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRAMDLR POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL68DLR,HD4LIT POST\n*\n         MVC   PUTLLINE,DL68  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRAMINR POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL69INR,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRAMUPR POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL69UPR,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRAMRTR POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL69RTR,HD4LIT POST\n*\n         MVC   PUTLLINE,DL69  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRAMASP POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL70ASP,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRAMCIS POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL70CIS,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRAMCAS POST\n         BAL   R14,HD4        CVT 4 BYTES TH HEX/CHR\n         MVC   DL70CAS,HD4LIT POST\n*\n         MVC   PUTLLINE,DL70  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRAMEXC POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL71EXC,HD4LIT POST\n*\n         MVC   PUTLLINE,DL71  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         DROP  R5\n         L     R14,PC60R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PCE9     - PROCESS VVR CELL TYPE E9'\nPCE9     DS    0H\n         ST    R14,PCE9R14    SAVE RETURN ADDR\n         MVC   DL03LIT,LT05   INDICATE P/S HEADER CELL\n         BAL   R14,POFF       PUT OFFSET LINE\n         USING DSE9,R5        ADDRESSABILITY\n         ICM   R15,B'0011',VVRLEN POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL09LEN,HD2LIT POST\n*\n         ICM   R15,B'0011',VVRHDLEN POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL09HDLN,HD2LIT POST\n*\n         LA    R15,VVRTYPE    POST A()\n         LA    R1,1           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL09HTY,HEXLIT POST\n*\n         MVC   DL09CTY,VVRTYPE POST\n         TR    DL09CTY,TRNAME FIX\n*\n         MVC   PUTLLINE,DL09  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT\n*\n         LA    R15,VVRFLAG    POST A()\n         BAL   R14,BIN        NOW BIN\n         MVC   DL10FLAG,BINLIT POST\n*\n         LA    R15,VVRKRQ     POST A()\n         LA    R1,4           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL10KRQ,HEXLIT POST\n*\n         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL10  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL11  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL12  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL13  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   PUTLLINE,DL14  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R15,VVRCMPNL   POST\n         LA    R1,1           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL15NL,HEXLIT  POST\n*\n         LA    R15,VVRCMPNM   POST A()\n         SR    R1,R1          CLEAR\n         IC    R1,VVRCMPNL    POST\n         STC   R1,LNHEXTR     POST HEX LENGTH\n         CH    R1,=H'44'      TOO LONG\n         BNH   PCE9HPT1       NO -- CONTINUE\n         LH    R1,=H'44'      POST SHORTER LENGTH\n         STC   R1,LNHEXTR     SAVE\nPCE9HPT1 DS    0H\n         MVC   DL15NM,SPACES  CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PCE9HPT2       NOT ZERO - PROCESS\n         MVI   DL15NM,APOST   POST CLOSING APOST\n         B     PCE9HPZ        CONTINUE\nPCE9HPT2 DS    0H\n         BAL   R14,HEX        NOW HEX\n         LA    R0,HEXLIT      FROM ADDR\n         SR    R1,R1          CLEAR\n         IC    R1,LNHEXTR     LENGTH\n         AR    R1,R1          X 2 FOR HEX\n         LA    R14,DL15NM     TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         MVI   0(R14),APOST   POST\nPCE9HPZ  DS    0H\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL15  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         IC    R1,VVRCMPNL    POST\n         CVD   R1,WORKDW      NOW PACKED\n         MVC   DL16NL,ED04    POST EDIT MASK\n         ED    DL16NL,WORKDW+6\n*\n         STC   R1,LNCHRTR     SAVE\n         CH    R1,=H'44'      TOO LONG\n         BNH   PCE9CPT1       NO -- CONTINUE\n         LH    R1,=H'44'      TOO LONG\n         STC   R1,LNCHRTR     SAVE\nPCE9CPT1 DS    0H\n         MVC   DL16NM,SPACES  CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PCE9CPT2       NOT ZERO -- PROCESS\n         MVI   DL16NM,APOST   POST CLOSING APOST\n         B     PCE9CPZ        CONTINUE\nPCE9CPT2 DS    0H\n         LA    R0,VVRCMPNM    FROM ADDR\n*                             FROM LENGTH ALREADY IN R1\n         LA    R14,DL16NM     TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         TR    DL16NM,TRNAME  FIX\n         MVI   0(R14),APOST   ADD TRAILING APOST\nPCE9CPZ  DS    0H\n*\n         MVC   PUTLLINE,DL16  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         IC    R1,VVRCMPNL    L'VVRCMPNM\n         LA    R4,VVRCMPNM(R1) NOW A(VVRKEYL)\n         LA    R15,0(,R4)     POST A(VVRKEYL)\n         LA    R1,1           POST LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL17KL,HEXLIT  POST\n*\n         LA    R15,1(,R4)     POST A(VVRKEYV)\n         SR    R1,R1          CLEAR\n         IC    R1,0(,R4)      POST VVRKEYL\n         STC   R1,LNHEXTR     POST HEX LENGTH\n         CH    R1,=H'45'      TOO LONG\n         BNH   PCE9HKT1       NO -- CONTINUE\n         LH    R1,=H'45'      POST SHORTER LENGTH\n         STC   R1,LNHEXTR     SAVE\nPCE9HKT1 DS    0H\n         MVC   DL17K,SPACES   CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PCE9HKT2       NOT ZERO -- PROCESS\n         MVI   DL17K,APOST    POST CLOSING APOST\n         B     PCE9HKZ        CONTINUE\nPCE9HKT2 DS    0H\n         BAL   R14,HEX        NOW HEX\n         LA    R0,HEXLIT      FROM ADDR\n         SR    R1,R1          CLEAR\n         IC    R1,LNHEXTR     LENGTH\n         AR    R1,R1          X 2 FOR HEX\n         LA    R14,DL17K      TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         MVI   0(R14),APOST   POST\nPCE9HKZ  DS    0H\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL17  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         IC    R1,0(,R4)      POST VVRKEYL\n         CVD   R1,WORKDW      NOW PACKED\n         MVC   DL18KL,ED04    POST EDIT MASK\n         ED    DL18KL,WORKDW+6\n*\n         STC   R1,LNCHRTR     SAVE\n         CH    R1,=H'45'      TOO LONG\n         BNH   PCE9CKT1       NO -- CONTINUE\n         LH    R1,=H'45'      TOO LONG\n         STC   R1,LNCHRTR     SAVE\nPCE9CKT1 DS    0H\n         MVC   DL18K,SPACES   CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PCE9CKT2       NOT ZERO -- PROCESS\n         MVI   DL18K,APOST    POST CLOSING APOST\n         B     PCE9CKZ        CONTINUE\nPCE9CKT2 DS    0H\n         LA    R0,1(,R4)      FROM ADDR VVRKEY\n*                             FROM LENGTH ALREADY IN R1\n         LA    R14,DL18K      TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         TR    DL18K,TRNAME   FIX\n         MVI   0(R14),APOST   ADD TRAILING APOST\nPCE9CKZ  DS    0H\n*\n         MVC   PUTLLINE,DL18  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         IC    R1,0(,R4)      L'VVRKEY\n         LA    R4,1(R1,R4)    NOW A(VVRCATNL)\n         LA    R15,0(,R4)     POST A(VVRCATNL)\n         LA    R1,1           POST LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL19NL,HEXLIT  POST\n*\n         LA    R15,1(,R4)     POST A(VVRCATNM)\n         SR    R1,R1          CLEAR\n         IC    R1,0(,R4)      POST VVRCATNL\n         STC   R1,LNHEXTR     POST HEX LENGTH\n         CH    R1,=H'44'      TOO LONG\n         BNH   PCE9HTT1       NO -- CONTINUE\n         LH    R1,=H'44'      POST SHORTER LENGTH\n         STC   R1,LNHEXTR     SAVE\nPCE9HTT1 DS    0H\n         MVC   DL19NM,SPACES  CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PCE9HTT2       NO -- PROCESS\n         MVI   DL19NM,APOST   POST CLOSING APOST\n         B     PCE9HTZ        CONTINUE\nPCE9HTT2 DS    0H\n         BAL   R14,HEX        NOW HEX\n         LA    R0,HEXLIT      FROM ADDR\n         SR    R1,R1          CLEAR\n         IC    R1,LNHEXTR     LENGTH\n         AR    R1,R1          X 2 FOR HEX\n         LA    R14,DL19NM     TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         MVI   0(R14),APOST   POST\nPCE9HTZ  DS    0H\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL19  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         IC    R1,0(,R4)      POST VVRCATNL\n         CVD   R1,WORKDW      NOW PACKED\n         MVC   DL20NL,ED04    POST EDIT MASK\n         ED    DL20NL,WORKDW+6\n*\n         STC   R1,LNCHRTR     SAVE\n         CH    R1,=H'44'      TOO LONG\n         BNH   PCE9CTT1       NO -- CONTINUE\n         LH    R1,=H'44'      TOO LONG\n         STC   R1,LNCHRTR     SAVE\nPCE9CTT1 DS    0H\n         MVC   DL20NM,SPACES  CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PCE9CTT2       NOT ZERO -- PROCESS\n         MVI   DL20NM,APOST   POST CLOSING APOST\n         B     PCE9CTZ        CONTINUE\nPCE9CTT2 DS    0H\n         LA    R0,1(,R4)      FROM ADDR VVRKEY\n*                             FROM LENGTH ALREADY IN R1\n         LA    R14,DL20NM     TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         TR    DL20NM,TRNAME  FIX\n         MVI   0(R14),APOST   ADD TRAILING APOST\nPCE9CTZ  DS    0H\n*\n         MVC   PUTLLINE,DL20  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         IC    R1,0(,R4)      L'VVRCATNM\n         LA    R4,1(R1,R4)    NOW A(VVRBSENL)\n         LA    R15,0(,R4)     POST A(VVRBSENL)\n         LA    R1,1           POST LENGHT\n         BAL   R14,HEX        NOW HEX\n         MVC   DL21NL,HEXLIT  POST\n*\n         LA    R15,1(,R4)     POST A(VVRBSENM)\n         SR    R1,R1          CLEAR\n         IC    R1,0(,R4)      POST VVRBSENL\n         STC   R1,LNHEXTR     POST HEX LENGTH\n         CH    R1,=H'44'      TOO LONG\n         BNH   PCE9HBT1       NO -- CONTINUE\n         LH    R1,=H'44'      POST SHORTER LENGTH\n         STC   R1,LNHEXTR     SAVE\nPCE9HBT1 DS    0H\n         MVC   DL21NM,SPACES  CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PCE9HBT2       NOT ZERO -- PROCESS\n         MVI   DL21NM,APOST   POST TRAILING APOST\n         B     PCE9HBZ        CONTINUE\nPCE9HBT2 DS    0H\n         BAL   R14,HEX        NOW HEX\n         LA    R0,HEXLIT      FROM ADDR\n         SR    R1,R1          CLEAR\n         IC    R1,LNHEXTR     LENGTH\n         AR    R1,R1          X 2 FOR HEX\n         LA    R14,DL21NM     TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         MVI   0(R14),APOST   POST\nPCE9HBZ  DS    0H\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL21  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         IC    R1,0(,R4)      POST VVRBSENL\n         CVD   R1,WORKDW      NOW PACKED\n         MVC   DL22NL,ED04    POST EDIT MASK\n         ED    DL22NL,WORKDW+6\n*\n         STC   R1,LNCHRTR     SAVE\n         CH    R1,=H'44'      TOO LONG\n         BNH   PCE9CBT1       NO -- CONTINUE\n         LH    R1,=H'44'      TOO LONG\n         STC   R1,LNCHRTR     SAVE\nPCE9CBT1 DS    0H\n         MVC   DL22NM,SPACES  CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PCE9CBT2       NOT ZERO -- PROCESS\n         MVI   DL22NM,APOST   POST TRAILING APOST\n         B     PCE9CBZ        CONTINUE\nPCE9CBT2 DS    0H\n         LA    R0,1(,R4)      FROM ADDR VVRBSENM\n*                             FROM LENGTH ALREADY IN R1\n         LA    R14,DL22NM     TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         TR    DL22NM,TRNAME  FIX\n         MVI   0(R14),APOST   ADD TRAILING APOST\nPCE9CBZ  DS    0H\n*\n         MVC   PUTLLINE,DL22  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         DROP  R5\n         L     R14,PCE9R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'GETV     - GET NEXT VVDS REC'\nGETV     DS    0H\n         ST    R14,GETVR14    SAVE RETURN ADDR\n         CLI   SWV,C'O'       FILE OPEN\n         BNE   ERRGVE         NO -- ERROR\n         AP    GETVRC,=P'1'   BUMP RECORD COUNT\n         GET   RPL=((6))      READ NEXT REC\n         LTR   R15,R15        OK?\n         BZ    GETVX          YES -- DONE\n         ST    R15,FDBKR15    SAVE RETURN CODE\n         SHOWCB RPL=(R6),                                              X\n               AREA=FDBKRPL,                                           X\n               LENGTH=L'FDBKRPL,                                       X\n               FIELDS=FDBK\n         CLC   FDBKR15,=F'8'  LOGIC ERROR\n         BNE   ERRRPL         NO -- ERROR\n         CLC   FDBKRPL,=F'4'  EOF\n         BNE   ERRRPL         NO -- ERROR\n         MVI   SWV,C'E'       SET EOF SW\nGETVX    DS    0H\n         L     R14,GETVR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'POFF     - PRINT OFFSET LINE'\nPOFF     DS    0H\n         ST    R14,POFFR14    SAVE RETURN ADDR\n         LR    R15,R5         POST CURR ADDR\n         S     R15,ADDRVREC   LESS BASE ADDR = OFFSET\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL03OFS,HD2LIT POST\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,SPACES POST BLANK LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL03  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   PUTLLINE,SPACES POST BLANK LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n         L     R14,POFFR14    RESTORE RETURN ADDR\n         BR    R14            RETRUN\n         TITLE 'PUTL     - PRINT A DATA LINE'\nPUTL     DS    0H\n         ST    R14,PUTLR14    SAVE RETURN ADDR\n         AP    PUTLLC,=P'1'   BUMP LINE COUNT\n         AP    PUTLGC,PUTLLC  ALLOW FOR LINE GROUPS\n         CP    PUTLGC,PUTLLMAX PAST END OF PAGE\n         BL    PUTLPUT        NO - SKIP TOP OF PAGE LOGIC\n         AP    PUTLPC,=P'1'   BUMP PAGE COUNT\n         MVC   TL01PGN,ED01   POST EDIT MASK\n         ED    TL01PGN,PUTLPC POST PAGE NO\n         PUT   SYSPRINT,TL01  PRINT TITLE LINE\n         PUT   SYSPRINT,SPACES PRINT BLANK LINE\n         ZAP   PUTLLC,=P'3'   RESET LINE COUNT\nPUTLPUT  DS    0H\n         ZAP   PUTLGC,=P'0'   RESET GROUP COUNT\n         PUT   SYSPRINT,PUTLLINE PRINT DATA LINE\n         L     R14,PUTLR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'HD1      - FORMAT HEX AND DECIMAL - 1 BYTE'\nHD1      DS    0H\n*\n*        ON ENTRY:  R15 - ONE BYTE VALUE FOR PRINTING\n*\n         ST    R14,HD1R14     SAVE RETURN ADDR\n         STC   R15,HDWORK     POST HEX CHAR\n         LA    R15,HDWORK     A(HEX CHAR)\n         LA    R1,1           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   HD1HX,HEXLIT   POST\n         SR    R15,R15        CLEAR\n         IC    R15,HDWORK     POST\n         CVD   R15,WORKDW     NOW PACKED\n         MVC   HD1ED,ED04     POST EDIT MASK\n         ED    HD1ED,WORKDW+6\n         L     R14,HD1R14     RESTORE RETURN ADDR\n         BR    R14\n         TITLE 'HD2      - FORMAT HEX AND DECIMAL - 2 BYTES'\nHD2      DS    0H\n*\n*        ON ENTRY:  R15 - TWO BYTE VALUE FOR PRINTING\n*\n         ST    R14,HD2R14     SAVE RETURN ADDR\n         STH   R15,HDWORK     POST HEX CHAR\n         LA    R15,HDWORK     A(HEX CHARS)\n         LA    R1,2           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   HD2HX,HEXLIT   POST\n         SR    R15,R15        CLEAR\n         ICM   R15,B'0011',HDWORK POST\n         CVD   R15,WORKDW     NOW PACKED\n         MVC   HD2ED,ED01     POST EDIT MASK\n         ED    HD2ED,WORKDW+5\n         L     R14,HD2R14     RESTORE RETURN ADDR\n         BR    R14\n         TITLE 'HD3      - FORMAT HEX AND DECIMAL - 3 BYTES'\nHD3      DS    0H\n*\n*        ON ENTRY:  R15 - THREE BYTE VALUE FOR PRINTING\n*\n         ST    R14,HD3R14     SAVE RETURN ADDR\n         STCM  R15,B'0111',HDWORK POST HEX CHAR\n         LA    R15,HDWORK     A(HEX CHARS)\n         LA    R1,3           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   HD3HX,HEXLIT   POST\n         SR    R15,R15        CLEAR\n         ICM   R15,B'0111',HDWORK POST HEX CHAR\n         CVD   R15,WORKDW     NOW PACKED\n         MVC   HD3ED,ED05     POST EDIT MASK\n         ED    HD3ED,WORKDW+3\n         L     R14,HD3R14     RESTORE RETURN ADDR\n         BR    R14\n         TITLE 'HD4      - FORMAT HEX AND DECIMAL - 4 BYTES'\n*\n*        ON ENTRY:  R15 - FOUR BYTE VALUE FOR PRINTING\n*\nHD4      DS    0H\n         ST    R14,HD4R14     SAVE RETURN ADDR\n         ST    R15,HDWORK     POST HEX CHAR\n         LA    R15,HDWORK     A(HEX CHARS)\n         LA    R1,4           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   HD4HX,HEXLIT   POST\n         L     R15,HDWORK     POST\n         CVD   R15,WORKDW     NOW PACKED\n         SRP   WORKDW,1,0     SHIFT LEFT 1 FOR ED\n         MVC   HD4ED,ED02     POST EDIT MASK\n         ED    HD4ED,WORKDW+2\n         L     R14,HD4R14     RESTORE RETURN ADDR\n         BR    R14\n         TITLE 'HEX      - MAKE TEXT PRINTABLE HEX'\nHEX      DS    0H\n*\n*        ON ENTRY:  R1  - NUMBER OF BYTES\n*                   R15 - ADDR OF SOURCE\n*\n         ST    R14,HEXR14     SAVE RETURN ADDR\n         LTR   R1,R1          LENGTH CHECK\n         BNP   ERRHEXL        MUST BE POS\n         CH    R1,=H'45'      MAX\n         BH    ERRHEXL        OVER -- ERROR\n         LA    R14,HEXLIT     A(START OF ANS)\nHEXLOOP  DS    0H\n         MVC   0(1,R14),0(R15) POST FIRST CHAR\n         TR    0(1,R14),TRHEXH XLATE FOR HIGH BYTE\n         MVC   1(1,R14),0(R15) POST FIRST CHAR AGAIN\n         TR    1(1,R14),TRHEXL XLATE FOR LOW BYTE\n         LA    R14,2(,R14)     BUMP TO NEXT\n         LA    R15,1(,R15)     BUMP TO NEXT\n         BCT   R1,HEXLOOP      LOOP BACK\n         L     R14,HEXR14     RESTORE RETURN ADDR\n         BR    R14\n         TITLE 'BIN      - CONVERT A BYTE TO DISPLAY'\n*\n*        ON ENTRY:  R15 - ADDR OF BYTE\n*\nBIN      DS    0H\n         ST    R14,BINR14     SAVE RETURN ADDR\n         MVI   BINLIT+1,C'0'  ASSUME\n         TM    0(R15),B'10000000'\n         BE    BIN01          ASSUMPTION OK\n         MVI   BINLIT+1,C'1'  FIX ERROR\nBIN01    DS    0H\n         MVI   BINLIT+2,C'0'  ASSUME\n         TM    0(R15),B'01000000'\n         BE    BIN02          ASSUMPTION OK\n         MVI   BINLIT+2,C'1'  FIX ERROR\nBIN02    DS    0H\n         MVI   BINLIT+3,C'0'  ASSUME\n         TM    0(R15),B'00100000'\n         BE    BIN03          ASSUMPTION OK\n         MVI   BINLIT+3,C'1'  FIX ERROR\nBIN03    DS    0H\n         MVI   BINLIT+4,C'0'  ASSUME\n         TM    0(R15),B'00010000'\n         BE    BIN04          ASSUMPTION OK\n         MVI   BINLIT+4,C'1'  FIX ERROR\nBIN04    DS    0H\n         MVI   BINLIT+5,C'0'  ASSUME\n         TM    0(R15),B'00001000'\n         BE    BIN05          ASSUMPTION OK\n         MVI   BINLIT+5,C'1'  FIX ERROR\nBIN05    DS    0H\n         MVI   BINLIT+6,C'0'  ASSUME\n         TM    0(R15),B'00000100'\n         BE    BIN06          ASSUMPTION OK\n         MVI   BINLIT+6,C'1'  FIX ERROR\nBIN06    DS    0H\n         MVI   BINLIT+7,C'0'  ASSUME\n         TM    0(R15),B'00000010'\n         BE    BIN07          ASSUMPTION OK\n         MVI   BINLIT+7,C'1'  FIX ERROR\nBIN07    DS    0H\n         MVI   BINLIT+8,C'0'  ASSUME\n         TM    0(R15),B'00000001'\n         BE    BIN08          ASSUMPTION OK\n         MVI   BINLIT+8,C'1'  FIX ERROR\nBIN08    DS    0H\n         L     R14,BINR14     RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'ERROR MESSAGES'\nERRAMDCN DS    0H\n         WTO   'VVDSLIST - VVRAMDCN INVALID -- S/B 98',                *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRDSLEN DS    0H\n         WTO   'VVDSLIST - VVRDSLEN INVALID -- S/B 53 OR 85',          *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRGVE   DS    0H\n         WTO   'VVDSLIST - INTERNAL LOGIC ERROR AT LABEL GETV',        *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRHEXL  DS    0H\n         ST    R1,HEXLR1      DIAGNOSTIC SAVE\n         WTO   'VVDSLIST - R1 BAD ON ENTRY TO HEX',                    *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRJFCB  DS    0H\n         WTO   'VVDSLIST - RDJFCB FAILED',                             *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRNOCR  DS    0H\n         WTO   'VVDSLIST - VVCR RECORD MISSING ',                      *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRNOSDR DS    0H\n         WTO   'VVDSLIST - SELF DEFINING VVR MISSING',                 *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROEXT  DS    0H\n         WTO   'VVDSLIST - OPEN FAILED FOR SYSPRINT FILE',             *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPV   DS    0H\n         WTO   'VVDSLIST - OPEN FAILED FOR VVDS FILE',                 *\n               ROUTCDE=11,DESC=7\n         WTO   'VVDSLIST - THIS DISK PACK MIGHT NOT HAVE A VVDS ON IT',*\n               ROUTCDE=11,DESC=7\n         PUT   SYSPRINT,NOVVDS\n         B     EXIT16\nERRRPL   DS    0H\n         WTO   'VVDSLIST - I/O ERROR READING VVDS',                    *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRRTY   DS    0H\n         WTO   'VVDSLIST - INVALID VVR RECORD TYPE',                   *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRSVVRF DS    0H\n         WTO   'VVDSLIST - FIRST VVR NOT SELF DEFINING',               *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRSVVRZ DS    0H\n         WTO   'VVDSLIST - FIRST VVR NOT TYPE Z',                      *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRVVCRL DS    0H\n         WTO   'VVDSLIST - VVCR LENGTH INVALID -- S/B 4088',           *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRVVRQZ DS    0H\n         WTO   'VVDSLIST - VVR TYPE NOT Q OR Z',                       *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRXTNTL DS    0H\n         WTO   'VVDSLIST - VVRXTNTL NOT DIVISIBLE BY 20',              *\n               ROUTCDE=11,DESC=7\n         B     ABEND\n         TITLE 'EXIT/ABEND'\nABEND    DS    0H\n*        ABEND 1000,DUMP\n         ABEND 1000\nEXIT     DS    0H\n         CLOSE (SYSPRINT)\n         L     R6,ADDRACB\n         CLOSE ((6))\n         L     R13,4(R13)\n         RETURN (14,12),RC=0\nEXIT16   DS    0H\n         CLOSE (SYSPRINT)\n         L     R6,ADDRACB\n         CLOSE ((6))\n         L     R13,4(,R13)\n         RETURN (14,12),RC=16\n         LTORG\n         TITLE 'DATA AREAS - MISCELLANEOUS'\nSAVEAREA DS    9D                  REG SAVE AREA\n*\nWORKDW   DS    D                   WORK AREA\n*\nBINR14   DS    F                   R14 SAVE AREA FOR BIN\nGETVR14  DS    F                   R14 SAVE AREA FOR GETV\nHD1R14   DS    F                   R14 SAVE AREA FOR HD1\nHD2R14   DS    F                   R14 SAVE AREA FOR HD2\nHD3R14   DS    F                   R14 SAVE AREA FOR HD3\nHD4R14   DS    F                   R14 SAVE AREA FOR HD4\nHEXR14   DS    F                   R14 SAVE AREA FOR HEX\nPCE9R14  DS    F                   R14 SAVE AREA FOR PCE9\nPCRCR14  DS    F                   R14 SAVE AREA FOR PCRC\nPCRSR14  DS    F                   R14 SAVE AREA FOR PCRS\nPC21R14  DS    F                   R14 SAVE AREA FOR PC21\nPC23R14  DS    F                   R14 SAVE AREA FOR PC23\nPC60R14  DS    F                   R14 SAVE AREA FOR PC60\nPHDRR14  DS    F                   R14 SAVE AREA FOR PHDR\nPOFFR14  DS    F                   R14 SAVE AREA FOR POFF\nPUTLR14  DS    F                   R14 SAVE AREA FOR PUTL\nPVCRR14  DS    F                   R14 SAVE AREA FOR PVCR\nPVRQR14  DS    F                   R14 SAVE AREA FOR PVRQ\nPVRZR14  DS    F                   R14 SAVE AREA FOR PVRZ\nSCANR14  DS    F                   R14 SAVE AREA FOR SCAN\nSVVRR14  DS    F                   R14 SAVE AREA FOR SVVR\n*\nADDRACB  DS    F                   A(ACB)\nADDRRPL  DS    F                   A(RPL)\nADDRVREC DS    F                   A(REC)\nFDBKRPL  DS    F                   FDBK FROM ARCDIR IF ERROR\nFDBKR15  DS    F                   R15 FROM GET ON ARCDIR IF ERROR\nRLRECL   DS    F                   LRECL OF CURRENT FILE\nBLRECL   DC    F'4096'             LRECL OF BUFFER\nTIOT     DS    F                   ADDR OF TIOT\nNEXTDD   DS    F                   ADDR OF NEXT DD SEG IN TIOT\nPCRSBASE DS    F                   BASE ADDR FOR PCRS\nHDWORK   DS    F                   WORK AREA FOR HD1 - HD4\nHEXLR1   DS    F                   DIAGNOSTIC SAVE AREA (R1) - ERRHEXL\n*\nJFCBLIST DS    0F\n         DC    X'87'               DCB EXIT LIST - JFCB\n         DC    AL3(INFMJFCB)       JFCB WORK AREA\n*\n         DS    0F\nSHOWAREA DS    0XL16\nSHOWRBA  DS    F\nSHOWRECL DS    F\n*\n*        PACKED FIELDS\n*\nGETVRC   DC    PL6'0'              GETV - RECORD COUNT\nPCRCLN   DC    PL2'0'              PCRC - LOOP NUMBER\nPUTLLMAX DC    PL2'56'             PUTL - MAX LINES / PAGE\nPUTLLC   DC    PL2'56'             PUTL - CURRENT LINE NO\nPUTLGC   DC    PL2'0'              PUTL - CURRENT GROUP COUNT\nPUTLPC   DC    PL3'0'              PUTL - CURRENT PAGE NO\n*\n*        MISC FIELDS\n*\nLNHEXTR  DS    X                   LENGTH OF HEX FIELD FOR TR\nLNCHRTR  DS    X                   LENGTH OF CHR FIELD FOR TR\n*\n*        CHARACTER FIELDS\n*\nSWV      DC    C'C'                FILE V STATUS SW VVDSXXXX\n*              C'C'                CLOSED\n*              C'O'                OPEN\n*              C'E'                FILE AT EOF\n*\nDDNAME   DS    CL8                 DD NAME OF NEXT VVDS TO PROCESS\nSPACES   DC    CL133' '\nPUTLLINE DC    CL133' '            PUTL - NEXT DATA LINE TO PRINT\nHEXLIT   DS    CL90                HEX  - LITERAL AREA FOR ANS\nBINLIT   DS    0CL10\n         DC    AL1(APOST)\n         DC    CL8' '\n         DC    AL1(APOST)\nHD1LIT   DS    0CL10               HD2  - LITERAL AREA FOR ANS\n         DC    AL1(APOST)\nHD1HX    DS    CL2\n         DC    AL1(APOST)\n         DC    C' ='\nHD1ED    DS    CL4\nHD2LIT   DS    0CL15               HD2  - LITERAL AREA FOR ANS\n         DC    AL1(APOST)\nHD2HX    DS    CL4\n         DC    AL1(APOST)\n         DC    C' ='\nHD2ED    DS    CL7\nHD3LIT   DS    0CL22               HD3  - LITERAL AREA FOR ANS\n         DC    AL1(APOST)\nHD3HX    DS    CL6\n         DC    AL1(APOST)\n         DC    C' ='\nHD3ED    DS    CL12\nHD4LIT   DS    0CL26               HD4  - LITERAL AREA FOR ANS\n         DC    AL1(APOST)\nHD4HX    DS    CL8\n         DC    AL1(APOST)\n         DC    C' ='\nHD4ED    DS    CL14\n*\n*        EDIT MASKS\n*\nED01     DC    X'4020206B202120'                        BZZ,ZZ9 (07)\nED02     DC    X'40206B2020206B2020206B202120'   BZ,ZZZ,ZZZ,ZZ9 (14)\nED03     DC    X'40206B2020206B202120'               BZ,ZZZ,ZZ9 (10)\nED04     DC    X'40202120'                                 BZZ9 (04)\nED05     DC    X'402020206B2020206B202120'         BZZZ,ZZZ,ZZ9 (12)\n*\n*         MISC LITERALS\n*\n*                   123456789012345678901234567890123456789012345678901\nLT01     DC    CL38'VSAM VOLUME CONTROL RECORD            '\nLT02     DC    CL38'SELF-DESCRIBING VSAM VOLUME RECORD    '\nLT03     DC    CL38'PRIMARY VSAM VOLUME RECORD            '\nLT04     DC    CL38'SECONDARY VSAM VOLUME RECORD          '\nLT05     DC    CL29'PRIMARY/SECONDARY HEADER CELL'\nLT06     DC    CL29'DATASET INFORMATION CELL     '\nLT07     DC    CL29'AMSDB CELL                   '\nLT08     DC    CL29'VOLUME INFORMATION CELL      '\nLT09     DC    CL04'*TR*'\nLT10     DC    CL16'NOT PRESENT     '\nLT11     DC    CL48'NOT PRESENT                                     '\n*\nNOVVDS   DC    C' OPEN FAILED FOR VVDS--THIS PACK MIGHT NOT HAVE ONE'\n*\n*                   123456789012345678901234567890123456789012345678901\n         TITLE 'WORK AREAS - TRANSLATE TABLES'\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\nTRNAME   DC    X'40404040404040404040404040404040'    0\n         DC    X'40404040404040404040404040404040'    1\n         DC    X'40404040404040404040404040404040'    2\n         DC    X'40404040404040404040404040404040'    3\n         DC    X'40404040404040404040404B40404040'    4  PERIOD\n         DC    X'40404040404040404040405B40404040'    5  $\n         DC    X'40404040404040404040404040404040'    6\n         DC    X'40404040404040404040407B7C404040'    7  @#\n         DC    X'40404040404040404040404040404040'    8\n         DC    X'40404040404040404040404040404040'    9\n         DC    X'40404040404040404040404040404040'    A\n         DC    X'40404040404040404040404040404040'    B\n         DC    X'40C1C2C3C4C5C6C7C8C9404040404040'    C  LETTERS\n         DC    X'40D1D2D3D4D5D6D7D8D9404040404040'    D  LETTERS\n         DC    X'4040E2E3E4E5E6E7E8E9404040404040'    E  LETTERS\n         DC    X'F0F1F2F3F4F5F6F7F8F9404040404040'    F  NUMBERS\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n*                0123456789ABCDEF\nTRHEXH   DC    C'0000000000000000'   0\n         DC    C'1111111111111111'   1\n         DC    C'2222222222222222'   2\n         DC    C'3333333333333333'   3\n         DC    C'4444444444444444'   4\n         DC    C'5555555555555555'   5\n         DC    C'6666666666666666'   6\n         DC    C'7777777777777777'   7\n         DC    C'8888888888888888'   8\n         DC    C'9999999999999999'   9\n         DC    C'AAAAAAAAAAAAAAAA'   A\n         DC    C'BBBBBBBBBBBBBBBB'   B\n         DC    C'CCCCCCCCCCCCCCCC'   C\n         DC    C'DDDDDDDDDDDDDDDD'   D\n         DC    C'EEEEEEEEEEEEEEEE'   E\n         DC    C'FFFFFFFFFFFFFFFF'   F\n*                0123456789ABCDEF\n*                0123456789ABCDEF\nTRHEXL   DC    C'0123456789ABCDEF'   0\n         DC    C'0123456789ABCDEF'   1\n         DC    C'0123456789ABCDEF'   2\n         DC    C'0123456789ABCDEF'   3\n         DC    C'0123456789ABCDEF'   4\n         DC    C'0123456789ABCDEF'   5\n         DC    C'0123456789ABCDEF'   6\n         DC    C'0123456789ABCDEF'   7\n         DC    C'0123456789ABCDEF'   8\n         DC    C'0123456789ABCDEF'   9\n         DC    C'0123456789ABCDEF'   A\n         DC    C'0123456789ABCDEF'   B\n         DC    C'0123456789ABCDEF'   C\n         DC    C'0123456789ABCDEF'   D\n         DC    C'0123456789ABCDEF'   E\n         DC    C'0123456789ABCDEF'   F\n*                0123456789ABCDEF\n         TITLE 'WORK AREAS - JFCB'\n         IEFJFCBN\n         TITLE 'WORK AREAS - DCBS'\n         PUSH  PRINT\n         PRINT NOGEN\nSYSPRINT DCB   DDNAME=SYSPRINT,                                        X\n               DSORG=PS,                                               X\n               LRECL=133,                                              X\n               MACRF=PM,                                               X\n               RECFM=FBA\n*\nDCBJFCB  DCB   DDNAME=DCBJFCB,                                         X\n               DSORG=PS,                                               X\n               EXLST=JFCBLIST,                                         X\n               MACRF=GL\n*\n         DCBD  DSORG=(PS)\nVVDSLIST CSECT\n         POP   PRINT\n         TITLE 'WORK AREAS - DETAIL RECORD AREAS'\nTL01     DC    CL133' '\n         ORG   TL01\n         DC    C'1'           CC = TOP OF PAGE\n         ORG   TL01+9\n         DC    C'VVDSLIST  DD:  '\nTL01DDN  DS    CL8\n         DC    C'  FORMATTED LISTING OF:  '\nTL01DSN  DS    CL44\n         ORG   TL01+109\n         DC    C'PAGE '\nTL01PGN  DS    CL7\n         ORG   ,\n*\nDL02     DC    CL133' '\n         ORG   DL02+1\nDL02LIT  DS    CL38\n         DC    C' RBA ='\nDL02RBA  DS    CL14\n         DC    C'  RECORD NUMBER ='\nDL02RECN DS    CL10\n         DC    C'  LENGTH (RPL) = X'\nDL02LEN  DS    CL15\n         ORG   ,\n*\nDL03     DC    CL133' '\n         ORG   DL03+4\n         DC    C'OFFSET = X'\nDL03OFS  DS    CL15\n         DC    C' - '\nDL03LIT  DS    CL29\n         ORG   ,\n*\nDL04     DC    CL133' '\n         ORG   DL04+9\n         DC    C'VVCRLEN  = X'\nDL04LEN  DS    CL15\n         DC    C'  VVCNUMCI = X'\nDL04NCI  DS    CL15\n         DC    C'  RESERVED = X'\n         DC    AL1(APOST)\nDL04RSV  DS    CL40\n         DC    AL1(APOST)\n         ORG   ,\n*\nDL05     DC    CL133' '\n         ORG   DL05+9\n         DC    C'ENTRY NO'\nDL05ENT  DS    CL4\n         DC    C'  VVCCATNM = X'\n         DC    AL1(APOST)\nDL05CTN  DS    CL88\n         DC    AL1(APOST)\n         ORG   ,\n*\nDL06     DC    CL133' '\n         ORG   DL06+32\n         DC    C'= C'\n         DC    AL1(APOST)\nDL06CTN  DS    CL44\n         DC    AL1(APOST)\n         DC    C'  VVCDTRBA = X'\nDL06RBA  DS    CL26\n         ORG   ,\n*\nDL07     DC    CL133' '\n         ORG   DL07+23\n         DC    C'VVCIXRBA = X'\nDL07IXRB DS    CL26\n         DC    C'  VVCSSRBA = X'\nDL07SSRB DS    CL26\n         ORG   ,\n*\nDL08     DC    CL133' '\n         ORG   DL08+9\n         DC    C'VVCCISPC+X'\n         DC    AL1(APOST)\nDL08BASE DS    CL4\n         DC    AL1(APOST)\n         DC    C' = '\nDL08HX00 DS    CL8\n         DC    C' '\nDL08HX04 DS    CL8\n         DC    C'  '\nDL08HX08 DS    CL8\n         DC    C' '\nDL08HX0C DS    CL8\n         DC    C'    '\nDL08HX10 DS    CL8\n         DC    C' '\nDL08HX14 DS    CL8\n         DC    C'  '\nDL08HX18 DS    CL8\n         DC    C' '\nDL08HX1C DS    CL8\n         ORG   ,\n*\nDL09     DC    CL133' '\n         ORG   DL09+9\n         DC    C'VVRLEN   = X'\nDL09LEN  DS    CL15\n         DC    C'  VVRHDLEN = X'\nDL09HDLN DS    CL15\n         DC    C'  VVRTYPE  = X'\n         DC    AL1(APOST)\nDL09HTY  DS    CL2\n         DC    AL1(APOST)\n         DC    C' = C'\n         DC    AL1(APOST)\nDL09CTY  DS    CL1\n         DC    AL1(APOST)\n         ORG   ,\n*\nDL10     DC    CL133' '\n         ORG   DL10+9\n         DC    C'VVRFLAG  = B'\nDL10FLAG DS    CL10\n         ORG   DL10+66\n         DC    C'VVRKRQ   = X'\n         DC    AL1(APOST)\nDL10KRQ  DS    CL8\n         DC    AL1(APOST)\n         ORG   ,\n*\nDL11     DC    CL133' '\n         ORG   DL11+22\n         DC    C'*  * ***  = RESERVED'\n         ORG   ,\n*\nDL12     DC    CL133' '\n         ORG   DL12+22\n         DC    C' *        = SELF-DESCRIBING VVR'\n         ORG   ,\n*\nDL13     DC    CL133' '\n         ORG   DL13+22\n         DC    C'  *       = CATALOG SELF-DESCRIBING VVR'\n         ORG   ,\n*\nDL14     DC    CL133' '\n         ORG   DL14+22\n         DC    C'    *     = COMPONENT TYPE D (0) OR I (1)'\n         ORG   ,\n*\nDL15     DC    CL133' '\n         ORG   DL15+9\n         DC    C'VVRCMPNL = X'\n         DC    AL1(APOST)\nDL15NL   DS    CL2\n         DC    AL1(APOST)\n         DC    C'  VVRCMPNM = X'\n         DC    AL1(APOST)\nDL15NM   DS    CL89\n         ORG   ,\nDL16     DC    CL133' '\n         ORG   DL16+18\n         DC    C'=  '\nDL16NL   DS    CL4\n         DC    C'           = C'\n         DC    AL1(APOST)\nDL16NM   DS    CL45\n         ORG   ,\n*\nDL17     DC    CL133' '\n         ORG   DL17+9\n         DC    C'VVRKEYL  = X'\n         DC    AL1(APOST)\nDL17KL   DS    CL2\n         DC    AL1(APOST)\n         DC    C'  VVRKEY   = X'\n         DC    AL1(APOST)\nDL17K    DS    CL91\n         ORG   ,\nDL18     DC    CL133' '\n         ORG   DL18+18\n         DC    C'=  '\nDL18KL   DS    CL4\n         DC    C'           = C'\n         DC    AL1(APOST)\nDL18K    DS    CL46\n         ORG   ,\n*\nDL19     DC    CL133' '\n         ORG   DL19+9\n         DC    C'VVRCATNL = X'\n         DC    AL1(APOST)\nDL19NL   DS    CL2\n         DC    AL1(APOST)\n         DC    C'  VVRCATNM = X'\n         DC    AL1(APOST)\nDL19NM   DS    CL89\n         ORG   ,\nDL20     DC    CL133' '\n         ORG   DL20+18\n         DC    C'=  '\nDL20NL   DS    CL4\n         DC    C'           = C'\n         DC    AL1(APOST)\nDL20NM   DS    CL45\n         ORG   ,\n*\nDL21     DC    CL133' '\n         ORG   DL21+9\n         DC    C'VVRBSENL = X'\n         DC    AL1(APOST)\nDL21NL   DS    CL2\n         DC    AL1(APOST)\n         DC    C'  VVRBSENM = X'\n         DC    AL1(APOST)\nDL21NM   DS    CL89\n         ORG   ,\nDL22     DC    CL133' '\n         ORG   DL22+18\n         DC    C'=  '\nDL22NL   DS    CL4\n         DC    C'           = C'\n         DC    AL1(APOST)\nDL22NM   DS    CL45\n         ORG   ,\n*\nDL23     DC    CL133' '\n         ORG   DL23+9\n         DC    C'VVRDSLEN = X'\nDL23DSLN DS    CL15\n         DC    C'  VVRDSTYP = X'\n         DC    AL1(APOST)\nDL23HTY  DS    CL2\n         DC    AL1(APOST)\n         DC    C' = C '\n         DC    AL1(APOST)\nDL23CTY  DS    C\n         DC    AL1(APOST)\n         ORG   ,\n*\nDL24     DC    CL133' '\n         ORG   DL24+9\n         DC    C'VVRATTR1 = B'\nDL24ATR1 DS    CL10\n         ORG   DL24+52\n         DC    C'VVRATTR2 = B'\nDL24ATR2 DS    CL10\n         ORG   DL24+100\n         DC    C'VVROPIND = X'\n         DC    AL1(APOST)\nDL24OIND DS    CL2\n         DC    AL1(APOST)\n         ORG   ,\nDL25     DC    CL133' '\n         ORG   DL25+22\n         DC    C'*         = SPEED'\n         ORG   DL25+65\n         DC    C'**        = REGIONAL SHARING ATTR'\n         ORG   ,\n*\nDL26     DC    CL133' '\n         ORG   DL26+22\n         DC    C' *        = UNIQUE'\n         ORG   DL26+65\n         DC    C'  **      = SYSTEM SHARING ATTR'\n         ORG   ,\n*\nDL27     DC    CL133' '\n         ORG   DL27+22\n         DC    C'  *       = REUSABLE'\n         ORG   DL27+65\n         DC    C'    **    = RESERVED'\n         ORG   ,\n*\nDL28     DC    CL133' '\n         ORG   DL28+22\n         DC    C'   *      = ERASE'\n         ORG   DL28+65\n         DC    C'      *   = INTERNAL SYSTEM DS'\n         ORG   ,\n*\nDL29     DC    CL133' '\n         ORG   DL29+22\n         DC    C'    *     = RESERVED'\n         ORG   DL29+65\n         DC    C'       *  = COMPONENT UNUSABLE'\n         ORG   ,\n*\nDL30     DC    CL133' '\n         ORG   DL30+22\n         DC    C'     *    = INHIBIT UPDATE'\n         ORG   ,\n*\nDL31     DC    CL133' '\n         ORG   DL31+22\n         DC    C'      *   = TEMPORARY EXPORT'\n         ORG   ,\n*\nDL32     DC    CL133' '\n         ORG   DL32+22\n         DC    C'       *  = TRACK OVERFLOW'\n         ORG   ,\n*\nDL33     DC    CL133' '\n         ORG   DL33+9\n         DC    C'VVRBUFSZ = X'\nDL33BSZ  DS    CL26\n         DC    C'  VVRPRISP = X'\nDL33PSP  DS    CL22\n         DC    C'  VVRSECSP = X'\nDL33SSP  DS    CL22\n         ORG   ,\n*\nDL34     DC    CL133' '\n         ORG   DL34+9\n         DC    C'VVRSPCFG = B'\nDL34SPFG DS    CL10\n         DC    C'  VVRDSHU  = X'\nDL34DSHU DS    CL26\n         DC    C'  VVRDSHA  = X'\nDL34DSHA DS    CL26\n         ORG   ,\n*\nDL35     DC    CL133' '\n         ORG   DL35+22\n         DC    C'**       = SPACE OPTIONS'\n         ORG   ,\n*\nDL36     DC    CL133' '\n         ORG   DL36+22\n         DC    C'  ****** = RESERVED'\n         ORG   ,\n*\nDL37     DC    CL133' '\n         ORG   DL37+9\n         DC    C'VVRLRECL = X'\nDL37RECL DS    CL26\n         DC    C'  RESERVED = X'\n         DC    AL1(APOST)\nDL37RSV  DS    CL4\n         DC    AL1(APOST)\n         DC    C'  VVREXCPX = X'\n         DC    AL1(APOST)\nDL37HXCP DS    CL16\n         DC    AL1(APOST)\n         DC    C' = C'\n         DC    AL1(APOST)\nDL37CXCP DS    CL8\n         DC    AL1(APOST)\n         ORG   ,\n*\nDL38     DC    CL133' '\n         ORG   DL38+9\n         DC    C'VVRDSHK  = X'\nDL38DSHK DS    CL26\n         DC    C'  VVRCLSFG = B'\nDL38CLSF DS    CL10\n         ORG   DL38+79\n         DC    C'VVRAIXFG = B'\nDL38AIXF DS    CL10\n         ORG   ,\n*\nDL39     DC    CL133' '\n         ORG   DL39+62\n         DC    C'****     = RESERVED'\n         ORG   DL39+92\n         DC    C'*        = AIX ATTRIBUTE FLAG'\n         ORG   ,\n*\nDL40     DC    CL133' '\n         ORG   DL40+62\n         DC    C'    *    = TIMESTAMPS EXIST'\n         ORG   DL40+92\n         DC    C' ******* = RESERVED'\n         ORG   ,\n*\nDL41     DC    CL133' '\n         ORG   DL41+62\n         DC    C'     *   = VERIFY REQUIRED'\n         ORG   ,\n*\nDL42     DC    CL133' '\n         ORG   DL42+62\n         DC    C'      *  = SWAPSPACE'\n         ORG   ,\n*\nDL43     DC    CL133' '\n         ORG   DL43+62\n         DC    C'       * = PAGESPACE'\n         ORG   ,\n*\nDL44     DC    CL133' '\n         ORG   DL44+9\n         DC    C'VVRTMSTP = X'\n         DC    AL1(APOST)\nDL44TMST DS    CL16\n         DC    AL1(APOST)\n         DC    C'  VVRALTSP = X'\n         DC    AL1(APOST)\nDL44ALSP DS    CL16\n         DC    AL1(APOST)\n         ORG   ,\n*\nDL45     DC    CL133' '\n         ORG   DL45+9\n         DC    C'RESERVED = X'\n         DC    AL1(APOST)\nDL45RSV  DS    CL48\n         DC    AL1(APOST)\n         ORG   ,\n*\nDL46     DC    CL133' '\n         ORG   DL46+9\n         DC    C'VVRAMDCN = X'\nDL46DCN  DS    CL15\n         DC    C'  VVRAMID  = X'\n         DC    AL1(APOST)\nDL46HID  DS    CL2\n         DC    AL1(APOST)\n         DC    C' = C'\n         DC    AL1(APOST)\nDL46CID  DS    CL1\n         DC    AL1(APOST)\n         DC    C'  VVRAMATR = B'\nDL46ATR  DS    CL10\n         ORG   ,\n*\nDL47     DC    CL133' '\n         ORG   DL47+76\n         DC    C'*        = KEY SEQ (1) OR ENT SEQ (0)'\n         ORG   ,\n*\nDL48     DC    CL133' '\n         ORG   DL48+76\n         DC    C' *       = WRITE CHECK'\n         ORG   ,\n*\nDL49     DC    CL133' '\n         ORG   DL49+76\n         DC    C'  *      = IMBED'\n         ORG   ,\n*\nDL50     DC    CL133' '\n         ORG   DL50+76\n         DC    C'   *     = REPLICATE'\n         ORG   ,\n*\nDL51     DC    CL133' '\n         ORG   DL51+76\n         DC    C'    *    = ORDERED'\n         ORG   ,\n*\nDL52     DC    CL133' '\n         ORG   DL52+76\n         DC    C'     *   = KEY RANGE'\n         ORG   ,\n*\nDL53     DC    CL133' '\n         ORG   DL53+76\n         DC    C'      *  = RELATIVE RECORD'\n         ORG   ,\n*\nDL54     DC    CL133' '\n         ORG   DL54+76\n         DC    C'       * = SPANNED'\n         ORG   ,\n*\nDL55     DC    CL133' '\n         ORG   DL55+9\n         DC    C'VVRAMLEN = X'\nDL55LEN  DS    CL15\n         DC    C'  VVRAMNST = X'\nDL55NST  DS    CL15\n         DC    C'  VVRAMAKP = X'\nDL55AKP  DS    CL15\n         DC    C'  VVRAMRKP = X'\nDL55RKP  DS    CL15\n         ORG   ,\n*\nDL56     DC    CL133' '\n         ORG   DL56+9\n         DC    C'VVRAMKLN = X'\nDL56KLN  DS    CL15\n         DC    C'  VVRAMPCA = X'\nDL56PCA  DS    CL10\n         DC    C'  VVRAMPCI = X'\nDL56PCI  DS    CL10\n         DC    C'  VVRAMCCA = X'\nDL56CCA  DS    CL15\n         ORG   ,\n*\nDL57     DC    CL133' '\n         ORG   DL57+9\n         DC    C'VVRAMFCA = X'\nDL57FCA  DS    CL15\n         DC    C'  VVRAMFCI = X'\nDL57FCI  DS    CL26\n         DC    C'  VVRAMCIV = X'\nDL57CIV  DS    CL26\n         ORG   ,\n*\nDL58     DC    CL133' '\n         ORG   DL58+9\n         DC    C'VVRAMLCL = X'\nDL58LCL  DS    CL26\n         DC    C'  VVRAMHLR/VVRAMSLT = X'\nDL58HLR  DS    CL26\n         ORG   ,\n*\nDL59     DC    CL133' '\n         ORG   DL59+9\n         DC    C'VVRAMSSR/VVRAMMRR = X'\nDL59SSR  DS    CL26\n         DC    C'  VVRAMARD = X'\nDL59ARD  DS    CL26\n         ORG   ,\n*\nDL60     DC    CL133' '\n         ORG   DL60+9\n         DC    C'VVRAMAT3 = B'\nDL60AT3  DS    CL10\n         DC    C'  VVRAMSNO = X'\nDL60SNO  DS    CL10\n         DC    C'  VVRAMDUI = X'\nDL60DUI  DS    CL26\n         ORG   ,\n*\nDL61     DC    CL133' '\n         ORG   DL61+22\n         DC    C'*        = UNIQUE KEYS'\n         ORG   ,\n*\nDL62     DC    CL133' '\n         ORG   DL62+22\n         DC    C' *       = STAGE'\n         ORG   ,\n*\nDL63     DC    CL133' '\n         ORG   DL63+22\n         DC    C'  *      = NOT BIND'\n         ORG   ,\n*\nDL64     DC    CL133' '\n         ORG   DL64+22\n         DC    C'   *     = NOT WAIT'\n         ORG   ,\n*\nDL65     DC    CL133' '\n         ORG   DL65+22\n         DC    C'    *    = LOADED'\n         ORG   ,\n*\nDL66     DC    CL133' '\n         ORG   DL66+22\n         DC    C'     *** = RESERVED'\n         ORG   ,\n*\nDL67     DC    CL133' '\n         ORG   DL67+9\n         DC    C'VVRAMBFI/VVRAMBFD = X'\nDL67BFI  DS    CL15\n         DC    C'  VVRAMSTS = X'\n         DC    AL1(APOST)\nDL67STS  DS    CL16\n         DC    AL1(APOST)\n         DC    C'  VVRAMNIL = X'\nDL67NIL  DS    CL15\n         ORG   ,\n*\nDL68     DC    CL133' '\n         ORG   DL68+9\n         DC    C'VVRAMNXT = X'\nDL68NXT  DS    CL15\n         DC    C'  VVRAMNLR = X'\nDL68NLR  DS    CL26\n         DC    C'  VVRAMDLR = X'\nDL68DLR  DS    CL26\n         ORG   ,\n*\nDL69     DC    CL133' '\n         ORG   DL69+9\n         DC    C'VVRAMINR = X'\nDL69INR  DS    CL26\n         DC    C'  VVRAMUPR = X'\nDL69UPR  DS    CL26\n         DC    C'  VVRAMRTR = X'\nDL69RTR  DS    CL26\n         ORG   ,\n*\nDL70     DC    CL133' '\n         ORG   DL70+9\n         DC    C'VVRAMASP = X'\nDL70ASP  DS    CL26\n         DC    C'  VVRAMCIS = X'\nDL70CIS  DS    CL26\n         DC    C'  VVRAMCAS = X'\nDL70CAS  DS    CL26\n         ORG   ,\n*\nDL71     DC    CL133' '\n         ORG   DL71+9\n         DC    C'VVRAMEXC = X'\nDL71EXC  DS    CL26\n         ORG   ,\n*\nDL72     DC    CL133' '\n         ORG   DL72+9\n         DC    C'VVRVOLLN = X'\nDL72VOLL DS    CL15\n         DC    C'  VVRVOLTP = X'\n         DC    AL1(APOST)\nDL72HVT  DS    CL2\n         DC    AL1(APOST)\n         DC    C' = C'\n         DC    AL1(APOST)\nDL72CVT  DS    CL1\n         DC    AL1(APOST)\n         DC    C'  VVRVOLFG = B'\nDL72VOLF DS    CL10\n         DC    C'  VVRNOEXT = X'\nDL72NOXT DS    CL10\n         ORG   ,\n*\nDL73     DC    CL133' '\n         ORG   DL73+76\n         DC    C'*        = PRIME VOLUME'\n         ORG   ,\n*\nDL74     DC    CL133' '\n         ORG   DL74+76\n         DC    C' *       = EXTENT INFO OUT OF SYNC'\n         ORG   ,\n*\nDL75     DC    CL133' '\n         ORG   DL75+76\n         DC    C'  *      = OVERFLOW VOLUME'\n         ORG   ,\n*\nDL76     DC    CL133' '\n         ORG   DL76+76\n         DC    C'   ***** = RESERVED'\n         ORG   ,\n*\nDL77     DC    CL133' '\n         ORG   DL77+9\n         DC    C'VVRHKRBA = X'\nDL77HKRB DS    CL26\n         DC    C'  VVRHURBA = X'\nDL77HURB DS    CL26\n         DC    C'  VVRHARBA = X'\nDL77HARB DS    CL26\n         ORG   ,\n*\nDL78     DC    CL133' '\n         ORG   DL78+9\n         DC    C'VVRBLKSZ = X'\nDL78BKSZ DS    CL26\n         DC    C'  VVRBLKTK = X'\nDL78BKTK DS    CL15\n         DC    C'  VVRTRKAU = X'\nDL78TKAU DS    CL15\n         ORG   ,\n*\nDL79     DC    CL133' '\n         ORG   DL79+9\n         DC    C'VVRTPEXT = B'\nDL79TPXT DS    CL10\n         DC    C'  VVRTKCYL = X'\nDL79TKCY DS    CL15\n         DC    C'  VVRBYTTK = X'\nDL79BYTK DS    CL26\n         ORG   ,\n*\nDL80     DC    CL133' '\n         ORG   DL80+22\n         DC    C'*        = SEQUENCE SET WITH DATA'\n         ORG   ,\n*\nDL81     DC    CL133' '\n         ORG   DL81+22\n         DC    C' *       = EXTENTS NOT PREFORMATTED'\n         ORG   ,\n*\nDL82     DC    CL133' '\n         ORG   DL82+22\n         DC    C'  *      = CONVERTED VSAM BY VOLUME'\n         ORG   ,\n*\nDL83     DC    CL133' '\n         ORG   DL83+22\n         DC    C'   ***** = RESERVED'\n         ORG   ,\n*\nDL84     DC    CL133' '\n         ORG   DL84+9\n         DC    C'VVRBYTAU = X'\nDL84BYAU DS    CL26\n         ORG   ,\n*\nDL85     DC    CL133' '\n         ORG   DL85+9\n         DC    C'VVRLOKYL = X'\n         DC    AL1(APOST)\nDL85LOKL DS    CL4\n         DC    AL1(APOST)\n         DC    C' '\nDL85XTLT DS    CL4\n         DC    C'  VVRLOKYV = X'\n         DC    AL1(APOST)\nDL85LOKV DS    CL81\n         ORG   ,\n*\nDL86     DC    CL133' '\n         ORG   DL86+9\n         DC    C'         = '\nDL86LOKL DS    CL7\n         DC    C' '\nDL86CTLT DS    CL4\n         DC    C'           = C'\n         DC    AL1(APOST)\nDL86LOKV DS    CL81\n         ORG   ,\n*\nDL87     DC    CL133' '\n         ORG   DL87+9\n         DC    C'VVRHIKYL = X'\n         DC    AL1(APOST)\nDL87HIKL DS    CL4\n         DC    AL1(APOST)\n         DC    C' '\nDL87XTLT DS    CL4\n         DC    C'  VVRHIKYV = X'\n         DC    AL1(APOST)\nDL87HIKV DS    CL81\n         ORG   ,\n*\nDL88     DC    CL133' '\n         ORG   DL88+9\n         DC    C'         = '\nDL88HIKL DS    CL7\n         DC    C' '\nDL88CTLT DS    CL4\n         DC    C'           = C'\n         DC    AL1(APOST)\nDL88HIKV DS    CL81\n         ORG   ,\n*\nDL89     DC    CL133' '\n         ORG   DL89+9\n         DC    C'VVRXTNTL = X'\nDL89XTL  DS    CL15\n         DC    C' DIVIDED BY 20 FOR NUMBER OF EXTENTS ='\nDL89XTN  DS    CL4\n         ORG   ,\n*\nDL90     DC    CL133' '\n         ORG   DL90+9\n         DC    C'VVRXSEQN = X'\nDL90XSQN DS    CL15\n         DC    C'  VVRXSC   = X'\nDL90XSC  DS    CL15\n         DC    C'  VVRXSH   = X'\nDL90XSH  DS    CL15\n         ORG   ,\n*\nDL91     DC    CL133' '\n         ORG   DL91+38\n         DC    C'VVRXEC   = X'\nDL91XEC  DS    CL15\n         DC    C'  VVRXEH   = X'\nDL91XEH  DS    CL15\n         DC    C'  VVRXNTRK = X'\nDL91XNTR DS    CL15\n         ORG   ,\n*\nDL92     DC    CL133' '\n         ORG   DL92+38\n         DC    C'VVRXSRBA = X'\nDL92XSRB DS    CL26\n         DC    C'  VVRXERBA = X'\nDL92XERB DS    CL26\n         ORG   ,\n*\n         TITLE 'WORK AREAS - DSECTS'\nDSE9     DSECT                PRIMARY HEADER CELL\n*                        ALSO SECONDARY HEADER CELL (DSD8)\nVVRLEN   DS    XL2            LENGTH OF ENTIRE VVR\nVVRHDLEN DS    XL2            LENGHT OF PRIMARY/SECONDARY HEADER CELL\nVVRTYPE  DS    X              C'Z' PRIMARY OR C'Q' SECONDARY\nVVRFLAG  DS    X              HEADER FLAG\n*              1... ....      RESERVED\n*              .1.. ....      SELF DESCRIBING VVR\n*              ..1. ....      CATALOG SELF DESCRIBING VVR\n*              ...1 ....      RESERVED\n*              .... 1...      COMPONENT TYPE 'D' DATA\n*              .... 0...      COMPONENT TYPE 'I' INDEX\n*              .... .111      RESERVED\nVVRKRQ   DS    XL4            KEY RANGE QUALIFIER\nVVRCMPNL DS    X              COMPONENT NAME LENGTH\nVVRCMPNM DS    X              1ST BYTE OF COMPONENT NAME\n*                             FOLLOWS COMPONENT NAME\nVVRKEYL  DS    X              KEY LENGTH            *** OFFSET INVALID\nVVRKEY   DS    X              KEY (CL NAME + PAD)   *** OFFSET INVALID\n*                             FOLLOWS KEY\nVVRCATNL DS    X              CATALOG NAME LENGTH   *** OFFSET INVALID\nVVRCATNM DS    X              CATALOG NAME          *** OFFSET INVALID\n*                             FOLLOWS CATALOG NAME\nVVRBSENL DS    X              ENTRY NAME LENGTH     *** OFFSET INVALID\nVVRBSENM DS    X              ENTRY NAME            *** OFFSET INVALID\n         EJECT\nDS21     DSECT                DATA SET INFORMATION CELL\nVVRDSLEN DS    XL2            DATA SET CELL LENGTH\nVVRDSTYP DS    X              X'21'\nVVRATTR1 DS    X              DATA SET ATTRIBUTES\n*              1... ....      SPEED\n*              .1.. ....      UNIQUE\n*              ..1. ....      REUSABLE\n*              ...1 ....      ERASE\n*              .... 1...      RESERVED\n*              .... .1..      INHIBIT UPDATE\n*              .... ..1.      TEMPORARY EXPORT\n*              .... ...1      TRACK OVERFLOW\nVVRATTR2 DS    X              SHARE ATTRIBUTES\n*              11.. ....      REGIONAL SHARING ATTRIBUTES\n*              ..11 ....      SYSTEM SHARING ATTRIBUTES\n*              .... 11..      RESERVED\n*              .... ..1.      INTERNAL SYSTEM DATA SET\n*              .... ...1      COMPONENT IS NOT USABLE\nVVROPIND DS    X              OPEN INIDCATOR\nVVRBUFSZ DS    XL4            BUFFER SIZE\nVVRPRISP DS    XL3            PRIMARY SPACE ALLOCATION\nVVRSECSP DS    XL3            SECONDARY SPACE ALLOCATION\nVVRSPCFG DS    X              SPACE FLAGS\n*              11.. ....      SPACE OPTIONS\n*              ..11 1111      RESERVED\nVVRDSHU  DS    XL4            DATA SET HIGH USED      RBA\nVVRDSHA  DS    XL4            DATA SET HIGH ALLOCATED RBA\nVVRLRECL DS    XL4            AVERAGE LOGICAL RECORD LENGTH\n         DS    XL2            RESERVED\nVVREXCPX DS    CL8            EXCEPTION EXIT NAME\nVVRDSHK  DS    XL4            DATA SET HIGH KEY RBA\nVVRCLSFG DS    X              CLUSTER ATTRIBUTE FLAG\n*              1111 ....      RESERVED\n*              .... 1...      TIMESTAMPS EXIST IN THIS CELL\n*              .... .1..      VERIFY IS REQUIRED\n*              .... ..1.      CLUSTER DESCRIBES SWAPSPACE\n*              .... ...1      CLUSTER DESCRIBES PAGESPACE\nVVRAIXFG DS    X              AIX ATTRIBUTE FLAG\n*              1... ....      UPGRADE AIX\n*               111 1111      RESERVED\nVVRTMSTP DS    XL8            TIMESTAMP (CAT ONLY)\nVVRALTSP DS    XL8            ALIAS TABLE TIMESTAMP\n         DS    XL24           RESERVED\n*        WARNING:  TIMESTAMPS AND RESERVED MAY BE TRUNCATED2\n*                  CHECK TIMESTAMP BIT IN VVRCLSFG\n         EJECT\nDS60     DSECT                AMSDB CELL\nVVRAMDCN DS    XL2            LENGTH OF ENTIRE AMSDB CELL\nVVRAMID  DS    X              X'60'\nVVRAMATR DS    X              ATTRIBUTES\n*              1... ....      KEY SEQUENCED\n*              0... ....      ENTRY SEQUENCED\n*              .1.. ....      WRITE CHECK\n*              ..1. ....      SEQUENCE SET WITH DATA (IMBED)\n*              ...1 ....      REPLICATE\n*              .... 1...      USE VOLUMES IN LIST ORDER\n*              .... .1..      KEY RANGE DATA SET\n*              .... ..1.      RELATIVE RECORD DATA SET\n*              .... ....      SPANNED RECORDS ALLOWED\nVVRAMLEN DS    XL2            LENGTH OF AMDSB (VVRAMDCN - 2)\nVVRAMNST DS    XL2            NUMBER OF ENTRIES IN INDEX SECTION\n         ORG   VVRAMNST\nVVRAMAKP DS    XL2            ALTERNATE KEY RKP\nVVRAMRKP DS    XL2            RELATIVE KEY POSITION\nVVRAMKLN DS    XL2            KEY LENGTH\nVVRAMPCA DS    X              % FREE CI IN CA\nVVRAMPCI DS    X              % FREE BYTES IN CI\nVVRAMCCA DS    XL2            NUMBER OF CI'S PER CA\nVVRAMFCA DS    XL2            FREE CI'S PER CA\nVVRAMFCI DS    XL4            FREE BYTES PER CI\nVVRAMCIV DS    XL4            CONTROL INTERVAL SIZE\nVVRAMLCL DS    XL4            MAXIMUM RECORD SIZE\nVVRAMHLR DS    XL4            RBA OF HIGH LEVEL INDEX RECORD\n         ORG   VVRAMHLR\nVVRAMSLT DS    XL4            RECORD SLOTS PER CI\nVVRAMSSR DS    XL4            RBA OF FIRST SEQUENCE SET RECORD\n         ORG   VVRAMSSR\nVVRAMMRR DS    XL4            MAX RELATIVE RECORD NUMBER\nVVRAMARD DS    XL4            POINTER TO FIRST ARDB\nVVRAMAT3 DS    X              ATTRIBUTES\n*              1... ....      NON-UNIQUE OR UNIQUE KEYS\n*              .1.. ....      CYL FAULT MSS OR STAGE\n*              ..1. ....      BIND OR DO NOT BIND ON MSS\n*              ...1 ....      WAIT OR DO NOT WAIT ON RELINQUISH\n*              .... 1...      LOAD MODE OR DATA SET LOADED\n*              .... .111      RESERVED\nVVRAMSNO DS    X              NUMBER OF CONCURRENT REQUESTS\nVVRAMDUI DS    XL4            IMS DRCC USAGE INDICATOR\nVVRAMBFI DS    XL2            NUMBER OF INDEX BUFFERS\n         ORG   VVRAMBFI\nVVRAMBFD DS    XL2            NUMBER OF DATA  BUFFERS\nVVRAMSTS DS    XL8            SYSTEM TIME STAMP\nVVRAMNIL DS    XL2            NUMBER OF INDEX LEVELS\nVVRAMNXT DS    XL2            NUMBER OF EXTENTS\nVVRAMNLR DS    XL4            NUMBER OF LOGICAL   RECORDS\nVVRAMDLR DS    XL4            NUMBER OF DELETED   RECORDS\nVVRAMINR DS    XL4            NUMBER OF INSERTED  RECORDS\nVVRAMUPR DS    XL4            NUMBER OF UPDATED   RECORDS\nVVRAMRTR DS    XL4            NUMBER OF RETRIEVED RECORDS\nVVRAMASP DS    XL4            BYTES OF FREE SPACE IN DATA SET\nVVRAMCIS DS    XL4            NUMBER OF CI SPLITS\nVVRAMCAS DS    XL4            NUMBER OV CA SPLITS\nVVRAMEXC DS    XL4            NUMBER OF EXCP'S\n         EJECT\nDS23     DSECT                VOLUME INFORMATION CELL\nVVRVOLLN DS    XL2            LENGTH OF VOLUME CELL\nVVRVOLTP DS    X              X'23'\nVVRVOLFG DS    X              VOLUME FLAGS\n*              1... ....      PRIME VOLUME\n*              .1.. ....      EXTENT INFO OUT OF SYNC (BY DEFRAG)\n*              ..1. ....      OVERFLOW VOLUME\n*              ...1 1111      RESERVED\nVVRNOEXT DS    X              NUMBER OF EXTENTS\nVVRHKRBA DS    XL4            HIGH KEY RBA\nVVRHURBA DS    XL4            HIGH USED RBA\nVVRHARBA DS    XL4            HIGH ALLOCATED RBA\nVVRBLKSZ DS    XL4            BLOCK SIZE\nVVRBLKTK DS    XL2            BLOCKS PER TRACK\nVVRTRKAU DS    XL2            TRACKS PER ALLOCATION UNIT\nVVRTPEXT DS    X              EXTENT TYPE FLAG\n*              1... ....      SEQUENCE SET WITH DATA\n*              .1.. ....      EXTENTS NOT PREFORMATTED\n*              ..1. ....      CONVERTED VSAM DATASET VOLUME\n*              ...1 1111      RESERVED\nVVRTKCYL DS    XL2            TRACKS PER CYLINDER\nVVRBYTTK DS    XL4            BYTES PER TRACK\nVVRBYTAU DS    XL4            BYTES PER ALLOCATION UNIT\nVVRLOKYL DS    XL2            LOW KEY LENGTH\nVVRLOKYV DS    X              LOW KEY\n*                             FOLLOWS LOW KEY\nVVRHIKYL DS    XL2            HIGH KEY LENGTH       *** OFFSET INVALID\nVVRHYKYV DS    X              HIGH KEY              *** OFFSET INVALID\n*                             FOLLOWS HIGH KEY\nVVRXTNTL DS    XL2            LENGTH OF EXTENT SECT *** OFFSET INVALID\n*                             VVRXTNTL/20 = NUMBER OF EXTENT ENTRIES\n*                             EXTENT ENTRIES IMMEDIATELY FOLLOW\n*                             THEY ARE MAPPED BY THE VVRX DSECT\n         EJECT\nVVRX     DSECT                EXTENT ENTRY\nVVRXSEQN DS    XL2            SEQUENCE NUMBER\nVVRXSC   DS    XL2            STARTING CC\nVVRXSH   DS    XL2            STARTING HH\nVVRXEC   DS    XL2            ENDING   CC\nVVRXEH   DS    XL2            ENDING HH\nVVRXNTRK DS    XL2            NUMBER OF TRACKS\nVVRXSRBA DS    XL4            STARTING RBA\nVVRXERBA DS    XL4            ENDING   RBA\n         EJECT\nVVCR     DSECT\nVVCRLEN  DS    XL2\nVVCNUMCI DS    XL2\nVVCRRSV  DS    XL20\nVVCATNMS DS    CL2016\nVVCCISPC DS    XL2048\n         EJECT\nVVCATENT DSECT\nVVCCATNM DS    CL44\nVVCDTRBA DS    XL4\nVVCIXRBA DS    XL4\nVVCSSRBA DS    XL4\nVVCATLN  EQU   *-VVCATENT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VVDSLIS1": {"ttr": 9735, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x00\\x99\\x08?\\x00\\x99\\x08?\\x17\"\\x0b\\x89\\x0b\\x89\\x00\\x00\\xd6\\xd3\\xc4\\xc5\\xd9@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-03-24T17:22:24", "lines": 2953, "newlines": 2953, "modlines": 0, "user": "OLDER"}, "text": "         TITLE 'VVDSLIST - FORMATTED VVDS LIST'\nVVDSLIST CSECT\n*\n         REGS\nAPOST    EQU   X'7D'          APOSTROPHE FOR LITTERALS\n*\n*   SCAN THE VVDS OF SELECTED VOLUMES\n*   PRODUCE A FORMATTED REPORT LISTING ALL FIELDS\n*\n*   REF:  LY26-3956 - MVS/EXTENDED ARCHITECTURE CATALOG\n*                     DIAGNOSIS REFERENCE\n*\n*   NOTE:  SYS1.AMODGEN REQUIRED IN SYSLIB CONCATINATION AT\n*          ASM TIME FOR MACRO IEFJFCBN.\n*\n         USING VVDSLIST,R15\n         B     MAINEP\n         DC    AL1(L'CSECTLIT)\nCSECTLIT DC    C'VVDSLIST - FORMATTED VVDS LIST &SYSDATE'\n         EJECT\nMAINEP   DS    0H\n         SAVE  (14,12)\n         LR    R12,R15        ENTRY ADR TO BASE REG\n         DROP  R15\n         LA    R11,2048(R12)\n         LA    R11,2048(R11)\n         USING VVDSLIST,R12,R11 PGM BASES\n         LR    R2,R13\n         LA    R13,SAVEAREA   SAVEAREA AND WORKING STORAGE\n         LA    R10,2048(R13)\n         LA    R10,2048(R10)\n         LA    R9,2048(R10)\n         LA    R9,2048(R9)\n         LA    R8,2048(R9)\n         LA    R8,2048(R8)\n         LA    R7,2048(R8)\n         LA    R7,2048(R7)\n         USING SAVEAREA,R13,R10,R9,R8,R7 ADDRESSABILITY\n         ST    R2,SAVEAREA+4  SAVE CALLERS R13\n         ST    R13,8(,R2)     BACK LINK SAVEAREA\n         USING IHADCB,R6      ADDRESSABILITY\n         LA    R6,SYSPRINT    A(DCB)\n         OPEN  ((R6),OUTPUT)\n         TM    DCBOFLGS,DCBOFOPN OPEN OK\n         BNO   ERROEXT        NO\n         DROP  R6\n         GENCB BLK=ACB,                                                X\n               AM=VSAM,                                                X\n               DDNAME=XXXXXXXX,                                        X\n               MACRF=(ADR,SEQ)\n         ST    R1,ADDRACB     SAVE A(ACB)\n         LR    R6,R1          POST TO NEW REG\n         L     R0,BLRECL      POST REC LEN OF BUFFER\n         GETMAIN R,LV=(0)     GETMAIN A RECORD AREA\n         ST    R1,ADDRVREC    SAVE\n         LR    R5,R1          POST TO A MORE CONVENIENT REG\n         L     R4,BLRECL      POST LRECL\n         GENCB BLK=RPL,                                                X\n               ACB=(R6),                                               X\n               AM=VSAM,                                                X\n               AREA=(R5),                                              X\n               AREALEN=(R4),                                           X\n               OPTCD=(ADR,SEQ)\n         ST    R1,ADDRRPL     SAVE A(RPL)\n         EXTRACT TIOT,FIELDS=TIOT GET ADDRESS OF TIOT\n         L     R2,TIOT        LOAD ADDRESS OF TIOT IN REG2\n         LA    R2,24(R2)      SKIP TO DD ENTRIES\n         ST    R2,NEXTDD      SAVE FIRST DD TO INITIALIZE LOOP\n         TITLE 'TIOTLOOP - SCAN TIOT'\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*        SCAN TIOT FOR DDNAMES 'VVDSXXXX' WHERE X CAN BE ANYTHING     *\n*        WHEN FINDING ONE TAKE OFF SCAN FOR VVR RECORDS               *\n*        WHEN HITTING END OF TIOT GO TO END OF JOB                    *\n*                                                                     *\n***********************************************************************\n*                                                                     *\nTIOTLOOP EQU   *\n         L     R2,NEXTDD      PICK UP CURRENT DD SEG\n         SR    R3,R3          CLEAR REG3\n         IC    R3,0(R2)       DETERMINE IF END OF TIOT\n         LTR   R3,R3          END OF TIOT?\n         BZ    EXIT           GO TO EOJ NORMAL\n         LA    R1,0(R2,R3)    ADDR OF NEXT TIOT\n         ST    R1,NEXTDD      SAVE\n         CLC   =C'VVDS',4(R2) IS THIS A VALID DD ENTRY\n         BNE   TIOTLOOP       NO -- SKIP IT\n         MVC   DDNAME,4(R2)   SAVE DDNAME\n         LA    R6,DCBJFCB     A(MODEL DCB) FOR RDJFCB\n         USING IHADCB,R6      ADDRESSABILITY\n         MVC   DCBDDNAM,DDNAME POST DD NAME\n         RDJFCB ((R6))\n         LTR   R15,R15        RDJFCB OK\n         BNZ   ERRJFCB        NO -- ERROR\n         DROP  R6\n         MVC   TL01DSN,JFCBDSNM POST DATA SET NAME\n         MVC   TL01DDN,DDNAME POST DD NAME\n         L     R6,ADDRACB     POST A(ACB)\n         MODCB ACB=(R6),                                               X\n               DDNAME=(*,DDNAME)\n         OPEN  ((6))          OPEN FILE\n         CH    R15,=H'4'      ABOVE 'WARNING'\n         BH    ERROPV         YES -- ERROR\n         SHOWCB ACB=(R6),                                              X\n               AREA=RLRECL,                                            X\n               LENGTH=L'RLRECL,                                        X\n               FIELDS=LRECL\n         L     R6,ADDRRPL     POST A(RPL)\n         CLC   RLRECL,BLRECL  CHECK BUF SIZE\n         BNH   VVDSSCAN       NO -- OK\n         L     R1,ADDRVREC    A(REC AREA)\n         L     R0,BLRECL      L'REC AREA\n         FREEMAIN R,LV=(0),A=(1)\n         L     R0,RLRECL      NEW L'REC AREA\n         ST    R0,BLRECL      POST\n         GETMAIN R,LV=(0)     GETMAIN A RECORD AREA\n         ST    R1,ADDRVREC    SAVE\n         LR    R5,R1          POST TO A MORE CONVENIENT REG\n         L     R4,BLRECL      POST TO A MORE CONVENIENT REG\n         MODCB RPL=(R6),                                               X\n               AREA=(R5),                                              X\n               AREALEN=(R4)\nVVDSSCAN EQU   *\n         MVI   SWV,C'O'       POST FILE OPEN\n         BAL   R14,SCAN       SCAN THE VVDS\n         L     R6,ADDRACB     POST A(ACB)\n         CLOSE ((R6))         CLOSE THIS FILE\n         B     TIOTLOOP       LOOP BACK\n         TITLE 'SCAN     - SCAN THE VVDS'\nSCAN     EQU   *              PROCESS NEXT REC\n         ST    R14,SCANR14    SAVE RETURN ADDR\n         BAL   R14,GETV       GET VVCR\n         CLI   SWV,C'E'       EOF?\n         BE    ERRNOCR        YES -- ERROR\n         L     R5,ADDRVREC    REFRESH RECORD ADDR\n         MVC   DL02LIT,LT01   INDICATE VVCR\n         BAL   R14,PHDR       PUT RECORD HEADER\n         BAL   R14,PVCR       PROCESS VVCR\n         BAL   R14,GETV       GET SELF DEFINING VVR\n         CLI   SWV,C'E'       EOF?\n         BE    ERRNOSDR       YES -- ERROR\n         L     R5,ADDRVREC    REFRESH RECORD ADDR\n         MVC   DL02LIT,LT02   INDICATE S-D VVR\n         BAL   R14,PHDR       PUT RECORD HEADER\n         BAL   R14,SVVR       PROCESS SELF DEFINING VVR REC\nSCANLOOP EQU   *\n         BAL   R14,GETV       GET NEXT VVR REC\n         CLI   SWV,C'E'       EOF\n         BE    SCANEXIT       YES -- DONE\n         L     R5,ADDRVREC    REFRESH RECORD ADDR\n         USING DSE9,R5        ADDRESSABILITY\n         MVC   DL02LIT,LT03   INDICATE PRIMARY VVR\n         CLI   VVRTYPE,C'Z'   PRIMARY\n         BE    SCANZ          YES -- PROCESS\n         MVC   DL02LIT,LT04   INDICATE SECONDARY VVR\n         CLI   VVRTYPE,C'Q'   SECONDARY\n         BE    SCANQ          YES -- PROCESS\n         B     ERRRTY         ERROR -- BAD RECORD TYPE\nSCANZ    EQU   *\n         BAL   R14,PHDR       PUT RECORD HEADER\n         BAL   R14,PVRZ       PROCESS Z REC\n         B     SCANLOOP       LOOP BACK\nSCANQ    EQU   *\n         BAL   R14,PHDR       PUT RECORD HEADER\n         BAL   R14,PVRQ       PROCESS Q REC\n         B     SCANLOOP       LOOP BACK\nSCANEXIT EQU   *\n         L     R14,SCANR14    RESTORE RETURN ADDR\n         BR    R14            DONE -- EXIT\n         TITLE 'PHDR     - PUT RECORD HEADER'\nPHDR     EQU   *\n         ST    R14,PHDRR14    SAVE RETURN ADDR\n         SHOWCB RPL=((R6)),                                            X\n               AREA=SHOWAREA,                                          X\n               LENGTH=L'SHOWAREA,                                      X\n               FIELDS=(RBA,RECLEN)\n*\n         L     R15,SHOWRBA    POST\n         CVD   R15,WORKDW     NOW PACKED\n         SRP   WORKDW,1,0     SHIFT 1 LEFT FOR EDIT\n         MVC   DL02RBA,ED02   POST EDIT MASK\n         ED    DL02RBA,WORKDW+2\n*\n         ZAP   WORKDW,GETVRC  POST RECORD COUNT\n         MVC   DL02RECN,ED03  POST EDIT MASK\n         ED    DL02RECN,WORKDW+4\n*\n         L     R15,SHOWRECL   POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL02LEN,HD2LIT POST\n*\n         ZAP   PUTLGC,PUTLLMAX FORCE PAGE EJECT\n         MVC   PUTLLINE,DL02  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n         MVC   PUTLLINE,SPACES POST BLANK LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n         L     R14,PHDRR14    RESTORE RETURN ADDR\n         BR    R14\n         TITLE 'PVCR     - PROCESS VSAM VOL CTL REC'\nPVCR     EQU   *\n         ST    R14,PVCRR14    SAVE RETURN ADDR\n         USING VVCR,R5        ADDRESSABILITY\n         SR    R15,R15        CLEAR\n         ICM   R15,B'0011',VVCRLEN POST\n         CH    R15,=H'4088'   CHECK VALUE\n         BNE   ERRVVCRL       ERROR - WRONG LENGTH\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL04LEN,HD2LIT POST\n*\n         ICM   R15,B'0011',VVCNUMCI POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL04NCI,HD2LIT POST\n*\n         LA    R1,20          LENGTH\n         LA    R15,VVCRRSV    ADDR\n         BAL   R14,HEX        CVT TO HEX\n         MVC   DL04RSV,HEXLIT POST\n*\n         MVC   PUTLLINE,DL04  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R4,VVCATNMS    A(1ST CAT ENTRY)\n         LA    R3,36          COUNT\n         BAL   R14,PCRC       PROCESS CONTROL REC CAT ENTRIES\n*\n         LA    R4,VVCCISPC    A(CI SPACE MAP)\n         LA    R3,64          COUNT (32 BYTES PER)\n         BAL   R14,PCRS       PROCESS CONTROL REC SPACE ENTRIES\n*\n         DROP  R5\n         L     R14,PVCRR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PCRC     - PROCESS CTRL REC CAT ENTRIES'\n*\n*        ON ENTRY:  R4 - ADDR OF START OF FIRST CAT ENTRY\n*                   R3 - NUMBER OF CAT ENTRIES (39)\n*\nPCRC     EQU   *\n         ST    R14,PCRCR14    SAVE RETURN ADDR\n         USING VVCATENT,R4    ADDRESSABILITY\n         ZAP   PCRCLN,=P'0'   SET LOOP NUMBER\nPCRCLOOP EQU   *\n         AP    PCRCLN,=P'1'   BUMP LOOP NUMBER\n         MVC   DL05ENT,ED04   POST EDIT MASK\n         ED    DL05ENT,PCRCLN POST\n*\n         LA    R15,VVCCATNM   A(CAT NAME)\n         LA    R1,44          L'CAT NAME\n         BAL   R14,HEX        CVT TO HEX\n         MVC   DL05CTN,HEXLIT POST\n*\n         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL05  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   DL06CTN,VVCCATNM\n         TR    DL06CTN,TRNAME\n*\n         ICM   R15,B'1111',VVCDTRBA POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL06RBA,HD4LIT POST\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL06  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVCIXRBA POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL07IXRB,HD4LIT POST\n*\n         ICM   R15,B'1111',VVCSSRBA POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL07SSRB,HD4LIT POST\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL07  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n         MVC   PUTLLINE,SPACES POST BLANK LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R4,VVCATLN(R4) BUMP TO NEXT ENTRY\n         BCT   R3,PCRCLOOP    LOOP BACK\n*\n         DROP  R4\n         L     R14,PCRCR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PCRS     - PROCESS CTL REC SPACE MAP'\n*\n*        ON ENTRY:  R4 - ADDR OF START OF SPACE MAP\n*                   R3 - NUMBER OF 32 BYTE SEGS IN SPACE MAP (64)\n*\nPCRS     EQU   *\n         ST    R14,PCRSR14    SAVE RETURN ADDR\n         ST    R4,PCRSBASE    SAVE BASE ADDR\nPCRSLOOP EQU   *\n         LR    R15,R4         POST CURRENT ADDR\n         S     R15,PCRSBASE   LESS BASE ADDR = OFFSET\n         STH   R15,WORKDW     POST\n         LA    R15,WORKDW     ADDR\n         LA    R1,2           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL08BASE,HEXLIT POST\n*\n         LA    R15,00(R4)     A(HEX SEG 1)\n         LA    R1,4           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL08HX00,HEXLIT POST\n*\n         LA    R15,04(R4)     A(HEX SEG 2)\n         LA    R1,4           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL08HX04,HEXLIT POST\n*\n         LA    R15,08(R4)     A(HEX SEG 3)\n         LA    R1,4           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL08HX08,HEXLIT POST\n*\n         LA    R15,12(R4)     A(HEX SEG 4)\n         LA    R1,4           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL08HX0C,HEXLIT POST\n*\n         LA    R15,16(R4)     A(HEX SEG 5)\n         LA    R1,4           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL08HX10,HEXLIT POST\n*\n         LA    R15,20(R4)     A(HEX SEG 6)\n         LA    R1,4           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL08HX14,HEXLIT POST\n*\n         LA    R15,24(R4)     A(HEX SEG 7)\n         LA    R1,4           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL08HX18,HEXLIT POST\n*\n         LA    R15,28(R4)     A(HEX SEG 8)\n         LA    R1,4           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL08HX1C,HEXLIT POST\n*\n         MVC   PUTLLINE,DL08  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R4,32(R4)      BUMP TO NEXT ENTRY\n         BCT   R3,PCRSLOOP    LOOP BACK\n*\n         L     R14,PCRSR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'SVVR     - PROCESS SELF DEFINING VVR REC'\nSVVR     EQU   *\n         ST    R14,SVVRR14    SAVE RETURN ADDR\n         USING DSE9,R5        ADDRESSABILITY\n         CLI   VVRTYPE,C'Z'   PRIMARY\n         BNE   ERRSVVRZ       NO -- ERROR\n         TM    VVRFLAG,B'01000000' SELF DEFINING VVR\n         BZ    ERRSVVRF       NO -- ERROR\n         BAL   R14,PVRZ       PROCESS Z REC\n         DROP  R5\n         L     R14,SVVRR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PVRQ     - PROCESS VVR RECORD TYPE Q'\nPVRQ     EQU   *\n         ST    R14,PVRQR14    SAVE RETURN ADDR\n         USING DSE9,R5        ADDRESSABILITY\n         BAL   R14,PCE9       PROCESS CELL E9\n         AH    R5,VVRHDLEN    BUMP TO NEXT CELL\n         LA    R5,L'VVRLEN(R5) ALLOW FOR VVRLEN\n         USING DS23,R5        ADDRESSABILITY\n         BAL   R14,PC23       PROCESS CELL 23\n         DROP  R5\n         L     R14,PVRQR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PVRZ     - PROCESS VVR RECORD TYPE Z'\nPVRZ     EQU   *\n         ST    R14,PVRZR14    SAVE RETURN ADDR\n         USING DSE9,R5        ADDRESSABILITY\n         BAL   R14,PCE9       PROCESS CELL E9\n         AH    R5,VVRHDLEN    BUMP TO NEXT CELL\n         LA    R5,L'VVRLEN(R5) ALLOW FOR VVRLEN\n         USING DS21,R5        ADDRESSABILITY\n         BAL   R14,PC21       PROCESS CELL 21\n         AH    R5,VVRDSLEN    BUMP TO NEXT CELL\n         USING DS60,R5        ADDRESSABILITY\n         BAL   R14,PC60       PROCESS CELL 60\n         AH    R5,VVRAMDCN    BUMP TO NEXT CELL\n         USING DS23,R5        ADDRESSABILITY\n         BAL   R14,PC23       PROCESS CELL 23\n         DROP  R5\n         L     R14,PVRZR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PC21     - PROCESS VVR CELL TYPE 21'\nPC21     EQU   *\n         ST    R14,PC21R14    SAVE RETURN ADDR\n         MVC   DL03LIT,LT06   INDICATE DATASET INFORMATION CELL\n         BAL   R14,POFF       PUT OFFSET LINE\n         USING DS21,R5        ADDRESSABILITY\n         CLC   VVRDSLEN,=H'53' SEGMENT LENGTH CHECK\n         BE    PC21LNOK       SHORT VALUE -- OK\n         CLC   VVRDSLEN,=H'85' SEGMENT LENGTH CHECK\n         BE    PC21LNOK       LONG VALUE -- OK\n         B     ERRDSLEN       BAD LENGTH -- ERROR\nPC21LNOK EQU   *\n         ICM   R15,B'0011',VVRDSLEN POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL23DSLN,HD2LIT POST\n*\n         LA    R15,VVRDSTYP   A(HEX)\n         LA    R1,1           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL23HTY,HEXLIT POST\n*\n         MVC   DL23CTY,VVRDSTYP POST\n         TR    DL23CTY,TRNAME NOW VALID\n*\n         MVC   PUTLLINE,DL23  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R15,VVRATTR1   POST\n         BAL   R14,BIN        NOW BIN\n         MVC   DL24ATR1,BINLIT POST\n*\n         LA    R15,VVRATTR2   POST\n         BAL   R14,BIN        NOW BIN\n         MVC   DL24ATR2,BINLIT POST\n*\n         LA    R15,VVROPIND   POST\n         LA    R1,1           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL24OIND,HEXLIT POST\n*\n         ZAP   PUTLGC,=P'8'   POST 8 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL24  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'7'   POST 7 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL25  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'6'   POST 6 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL26  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'5'   POST 5 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL27  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL28  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL29  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL30  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL31  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   PUTLLINE,DL32  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRBUFSZ POST\n         BAL   R14,HD4        CVT 2 BYTES TO HEX/CHR\n         MVC   DL33BSZ,HD4LIT POST\n*\n         SR    R15,R15        CLEAR\n         ICM   R15,B'0111',VVRPRISP POST\n         BAL   R14,HD3        CVT 3 BYTES TO HEX/CHR\n         MVC   DL33PSP,HD3LIT POST\n*\n         SR    R15,R15        CLEAR\n         ICM   R15,B'0111',VVRSECSP POST\n         BAL   R14,HD3        CVT 3 BYTES TO HEX/CHR\n         MVC   DL33SSP,HD3LIT POST\n*\n         MVC   PUTLLINE,DL33  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT\n*\n         LA    R15,VVRSPCFG   POST A()\n         BAL   R14,BIN        NOW BIN\n         MVC   DL34SPFG,BINLIT POST\n*\n         ICM   R15,B'1111',VVRDSHU POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL34DSHU,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRDSHA POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL34DSHA,HD4LIT POST\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL34  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL35  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   PUTLLINE,DL36  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRLRECL POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL37RECL,HD4LIT POST\n*\n         LA    R15,VVRLRECL+L'VVRLRECL POST A(0)\n         LA    R1,2           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL37RSV,HEXLIT POST\n*\n         LA    R15,VVREXCPX   POST A()\n         LA    R1,8           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL37HXCP,HEXLIT POST\n*\n         MVC   DL37CXCP,VVREXCPX POST\n         TR    DL37CXCP,TRNAME FIX\n*\n         MVC   PUTLLINE,DL37  POST TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRDSHK POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL38DSHK,HD4LIT POST\n*\n         LA    R15,VVRCLSFG   POST A()\n         BAL   R14,BIN        NOW BIN\n         MVC   DL38CLSF,BINLIT POST\n*\n         LA    R15,VVRAIXFG   POST A()\n         BAL   R14,BIN        NOW BIN\n         MVC   DL38AIXF,BINLIT POST\n*\n         ZAP   PUTLGC,=P'5'   POST 5 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL38  POST TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL39  POST TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL40  POST TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL41  POST TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL42  POST TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   PUTLLINE,DL43  POST TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R15,VVRTMSTP   POST A()\n         LA    R1,8           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL44TMST,HEXLIT POST\n*\n         CLC   VVRDSLEN,=H'53' SHORT SEGMENT\n         BE    PC21SH         YES\n         LA    R15,VVRALTSP   POST A()\n         LA    R1,8           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL44ALSP,HEXLIT POST\n*\n         MVC   PUTLLINE,DL44  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R15,VVRALTSP+L'VVRALTSP POST A()\n         LA    R1,24          LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL45RSV,HEXLIT POST\n*\n         MVC   PUTLLINE,DL45  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n         B     PC21X          DONE -- EXIT\n*\nPC21SH   EQU   *\n         MVC   DL44ALSP,LT10  POST NOT AVAILABLE\n*\n         MVC   PUTLLINE,DL44  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   DL45RSV,LT11   POST NOT AVAILABLE\n*\n         MVC   PUTLLINE,DL45  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\nPC21X    EQU   *\n         DROP  R5\n         L     R14,PC21R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PC23     - PROCESS VVR CELL TYPE 23'\nPC23     EQU   *\n         ST    R14,PC23R14    SAVE RETURN ADDR\n         MVC   DL03LIT,LT08   INDICATE VOLUME INFORMATION CELL\n         BAL   R14,POFF       PUT OFFSET LINE\n         USING DS23,R5        ADDRESSABILITY\n         ICM   R15,B'0011',VVRVOLLN POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL72VOLL,HD2LIT POST\n*\n         LA    R15,VVRVOLTP   POST A()\n         LA    R1,1           POST LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL72HVT,HEXLIT POST\n*\n         MVC   DL72CVT,VVRVOLTP POST\n         TR    DL72CVT,TRNAME FIX\n*\n         LA    R15,VVRVOLFG   POST A()\n         BAL   R14,BIN        NOW BIN\n         MVC   DL72VOLF,BINLIT POST\n*\n         SR    R15,R15        CLEAR\n         IC    R15,VVRNOEXT   POST\n         BAL   R14,HD1        CVT 1 BYTE TO HEX/CHR\n         MVC   DL72NOXT,HD1LIT POST\n*\n         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL72  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL73  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL74  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL75  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   PUTLLINE,DL76  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRHKRBA POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL77HKRB,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRHURBA POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL77HURB,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRHARBA POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL77HARB,HD4LIT POST\n*\n         MVC   PUTLLINE,DL77  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRBLKSZ POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL78BKSZ,HD4LIT POST\n*\n         ICM   R15,B'0011',VVRBLKTK POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL78BKTK,HD2LIT POST\n*\n         ICM   R15,B'0011',VVRTRKAU POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL78TKAU,HD2LIT POST\n*\n         MVC   PUTLLINE,DL78  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R15,VVRTPEXT   POST A()\n         BAL   R14,BIN        NOW BIN\n         MVC   DL79TPXT,BINLIT POST\n*\n         ICM   R15,B'0011',VVRTKCYL POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL79TKCY,HD2LIT POST\n*\n         ICM   R15,B'1111',VVRBYTTK POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL79BYTK,HD4LIT POST\n*\n         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL79  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL80  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL81  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL82  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   PUTLLINE,DL83  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRBYTAU POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL84BYAU,HD4LIT POST\n*\n         MVC   PUTLLINE,DL84  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R15,VVRLOKYL   POST  A()\n         LA    R1,2           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL85LOKL,HEXLIT POST\n*\n         LA    R15,VVRLOKYV   POST A()\n         SR    R1,R1          CLEAR\n         ICM   R1,B'0011',VVRLOKYL POST\n         STC   R1,LNHEXTR     POST HEX LENGTH\n         MVC   DL85XTLT,SPACES POST NO HEX TRUNC\n         CH    R1,=H'40'      TOO LONG\n         BNH   PC23HLT1       NO -- CONTINUE\n         MVC   DL85XTLT,LT09  POST HEX TRUNC\n         LH    R1,=H'40'      POST SHORTER LENGTH\n         STC   R1,LNHEXTR     SAVE\nPC23HLT1 EQU   *\n         MVC   DL85LOKV,SPACES CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PC23HLT2       NOT ZERO -- PROCESS\n         MVI   DL85LOKV,APOST POST CLOSING APOST\n         B     PC23HLZ        CONTINUE\nPC23HLT2 EQU   *\n         BAL   R14,HEX        NOW HEX\n         LA    R0,HEXLIT      FROM ADDR\n         SR    R1,R1          CLEAR\n         IC    R1,LNHEXTR     LENGTH\n         AR    R1,R1          X 2 FOR HEX\n         LA    R14,DL85LOKV   TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         MVI   0(R14),APOST   POST\nPC23HLZ  EQU   *\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL85  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         ICM   R1,B'0011',VVRLOKYL POST\n         CVD   R1,WORKDW      NOW PACKED\n         MVC   DL86LOKL,ED01  POST EDIT MASK\n         ED    DL86LOKL,WORKDW+5\n*\n         STC   R1,LNCHRTR     SAVE\n         MVC   DL86CTLT,SPACES POST NO CHR TRUNC\n         CH    R1,=H'80'      TOO LONG\n         BNH   PC23CLT1       NO -- CONTINUE\n         LH    R1,=H'80'      TOO LONG\n         MVC   DL86CTLT,LT09  POST CHR TRUNC\n         STC   R1,LNCHRTR     SAVE\nPC23CLT1 EQU   *\n         MVC   DL86LOKV,SPACES CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PC23CLT2       NOT ZERO -- PROCESS\n         MVI   DL86LOKV,APOST POST CLOSING APOST\n         B     PC23CLZ        CONTINUE\nPC23CLT2 EQU   *\n         LA    R0,VVRLOKYV    FROM ADDR\n*                             FROM LENGTH ALREADY IN R1\n         LA    R14,DL86LOKV   TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         TR    DL86LOKV,TRNAME FIX\n         MVI   0(R14),APOST   ADD TRAILING APOST\nPC23CLZ  EQU   *\n*\n         MVC   PUTLLINE,DL86  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         ICM   R1,B'0011',VVRLOKYL L'VVRLOKYV\n         LA    R4,VVRLOKYV(R1) NOW A(VVRHIKYL)\n         LA    R15,0(R4)      POST A(VVRHIKYL)\n         LA    R1,2           POST LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL87HIKL,HEXLIT POST\n*\n         LA    R15,2(R4)      POST A(VVRHIKYV)\n         SR    R1,R1          CLEAR\n         ICM   R1,B'0011',0(R4) POST VVRHIKYL\n         STC   R1,LNHEXTR     POST HEX LENGTH\n         MVC   DL87XTLT,SPACES POST NO HEX TRUNC\n         CH    R1,=H'40'      TOO LONG\n         BNH   PC23HHT1       NO -- CONTINUE\n         MVC   DL87XTLT,LT09  POST HEX TRUNC\n         LH    R1,=H'40'      POST SHORTER LENGTH\n         STC   R1,LNHEXTR     SAVE\nPC23HHT1 EQU   *\n         MVC   DL87HIKV,SPACES CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PC23HHT2       NOT ZERO -- PROCESS\n         MVI   DL87HIKV,APOST POST CLOSING APOST\n         B     PC23HHZ        CONTINUE\nPC23HHT2 EQU   *\n         BAL   R14,HEX        NOW HEX\n         LA    R0,HEXLIT      FROM ADDR\n         SR    R1,R1          CLEAR\n         IC    R1,LNHEXTR     LENGTH\n         AR    R1,R1          X 2 FOR HEX\n         LA    R14,DL87HIKV   TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         MVI   0(R14),APOST   POST\nPC23HHZ  EQU   *\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL87  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         ICM   R1,B'0011',0(R4) POST VVRHIKYL\n         CVD   R1,WORKDW      NOW PACKED\n         MVC   DL88HIKL,ED01  POST EDIT MASK\n         ED    DL88HIKL,WORKDW+5\n*\n         STC   R1,LNCHRTR     SAVE\n         MVC   DL88CTLT,SPACES POST NO CHR TRUNC\n         CH    R1,=H'80'      TOO LONG\n         BNH   PC23CHT1       NO -- CONTINUE\n         LH    R1,=H'80'      TOO LONG\n         MVC   DL88CTLT,LT09  POST CHR TRUNC\n         STC   R1,LNCHRTR     SAVE\nPC23CHT1 EQU   *\n         MVC   DL88HIKV,SPACES CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PC23CHT2       NOT ZERO -- PROCESS\n         MVI   DL88HIKV,APOST POST CLOSING APOST\n         B     PC23CHZ        CONTINUE\nPC23CHT2 EQU   *\n         LA    R0,2(R4)       FROM ADDR VVRHIKYV\n*                             FROM LENGTH ALREADY IN R1\n         LA    R14,DL88HIKV   TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         TR    DL88HIKV,TRNAME FIX\n         MVI   0(R14),APOST   ADD TRAILING APOST\nPC23CHZ  EQU   *\n*\n         MVC   PUTLLINE,DL88  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         ICM   R1,B'0011',0(R4) L'VVRHIKYV\n         LA    R4,2(R1,R4)    NOW A(VVRXTNTL)\n         ICM   R15,B'0011',0(R4) POST VVRXTNTL\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL89XTL,HD2LIT POST\n*\n         SR    R15,R15        CLEAR\n         ICM   R15,B'0011',0(R4) POST VVRXTNTL\n         SR    R14,R14        CLEAR\n         D     R14,=F'20'     NOW NUMBER OF EXTENTS\n         LTR   R14,R14        REMAINDER S/B ZERO\n         BNZ   ERRXTNTL       NOT ZERO -- ERROR\n         LR    R3,R15         POST COUNT\n         CVD   R3,WORKDW      QUOTIENT NOW PACKED\n         MVC   DL89XTN,ED04   POST EDIT MASK\n         ED    DL89XTN,WORKDW+6 POST\n*\n         MVC   PUTLLINE,DL89  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R4,2(R4)       BUMP TO VVRXTNT\n         LTR   R3,R3          ZERO COUNT\n         BNP   PC23XTX        YES -- CONTINUE\nPC23XTL  EQU   *\n         USING VVRX,R4        ADDRESSABILITY\n         ICM   R15,B'0011',VVRXSEQN POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL90XSQN,HD2LIT POST\n*\n         ICM   R15,B'0011',VVRXSC POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL90XSC,HD2LIT POST\n*\n         ICM   R15,B'0011',VVRXSH POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL90XSH,HD2LIT POST\n*\n         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL90  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'0011',VVRXEC POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL91XEC,HD2LIT POST\n*\n         ICM   R15,B'0011',VVRXEH POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL91XEH,HD2LIT POST\n*\n         ICM   R15,B'0011',VVRXNTRK POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL91XNTR,HD2LIT POST\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL91  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRXSRBA POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL92XSRB,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRXERBA POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL92XERB,HD4LIT POST\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL92  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n         MVC   PUTLLINE,SPACES POST BLANK LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R4,20(R4)      BUMP TO NEXT ENTRY\n         BCT   R3,PC23XTL     LOOP BACK\n         DROP  R4\nPC23XTX  EQU   *\n         DROP  R5\n         L     R14,PC23R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PC60     - PROCESS VVR CELL TYPE 60'\nPC60     EQU   *\n         ST    R14,PC60R14    SAVE RETURN ADDR\n         MVC   DL03LIT,LT07   INDICATE AMSDB CELL\n         BAL   R14,POFF       PUT OFFSET LINE\n         USING DS60,R5        ADDRESSABILITY\n         CLC   VVRAMDCN,=H'98' LENGTH CHECK\n         BNE   ERRAMDCN       LENGTH BAD -- ERROR\n         ICM   R15,B'0011',VVRAMDCN POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL46DCN,HD2LIT POST\n*\n         LA    R15,VVRAMID    POST A()\n         LA    R1,1           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL46HID,HEXLIT POST\n*\n         MVC   DL46CID,VVRAMID POST\n         TR    DL46CID,TRNAME FIX\n*\n         LA    R15,VVRAMATR   POST\n         BAL   R14,BIN        NOW BIN\n         MVC   DL46ATR,BINLIT POST\n*\n         ZAP   PUTLGC,=P'8'   POST 8 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL46  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'7'   POST 7 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL47  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'6'   POST 6 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL48  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'5'   POST 5 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL49  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL50  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL51  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL52  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL53  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   PUTLLINE,DL54  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'0011',VVRAMLEN POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL55LEN,HD2LIT POST\n*\n         ICM   R15,B'0011',VVRAMNST POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL55NST,HD2LIT POST\n*\n         ICM   R15,B'0011',VVRAMAKP POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL55AKP,HD2LIT POST\n*\n         ICM   R15,B'0011',VVRAMRKP POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL55RKP,HD2LIT POST\n*\n         MVC   PUTLLINE,DL55  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'0011',VVRAMKLN POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL56KLN,HD2LIT POST\n*\n         IC    R15,VVRAMPCA   POST\n         BAL   R14,HD1        CVT 1 BYTE TO HEX/CHR\n         MVC   DL56PCA,HD1LIT POST\n*\n         IC    R15,VVRAMPCI   POST\n         BAL   R14,HD1        CVT 1 BYTE TO HEX/CHR\n         MVC   DL56PCI,HD1LIT POST\n*\n         ICM   R15,B'0011',VVRAMCCA POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL56CCA,HD2LIT POST\n*\n         MVC   PUTLLINE,DL56  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'0011',VVRAMFCA POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL57FCA,HD2LIT POST\n*\n         ICM   R15,B'1111',VVRAMFCI POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL57FCI,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRAMCIV POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL57CIV,HD4LIT POST\n*\n         MVC   PUTLLINE,DL57  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRAMLCL POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL58LCL,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRAMHLR POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL58HLR,HD4LIT POST\n*\n         MVC   PUTLLINE,DL58  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRAMSSR POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL59SSR,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRAMARD POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL59ARD,HD4LIT POST\n*\n         MVC   PUTLLINE,DL59  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R15,VVRAMAT3   POST A()\n         BAL   R14,BIN        NOW BIN\n         MVC   DL60AT3,BINLIT POST\n*\n         IC    R15,VVRAMSNO   POST\n         BAL   R14,HD1        CVT 1 BYTE TO HEX/CHR\n         MVC   DL60SNO,HD1LIT POST\n*\n         ICM   R15,B'1111',VVRAMDUI POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL60DUI,HD4LIT POST\n*\n         ZAP   PUTLGC,=P'6'   POST 6 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL60  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'5'   POST 5 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL61  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL62  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL63  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL64  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL65  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   PUTLLINE,DL66  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'0011',VVRAMBFI POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL67BFI,HD2LIT POST\n*\n         LA    R15,VVRAMSTS   POST A()\n         LA    R1,8           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL67STS,HEXLIT POST\n*\n         ICM   R15,B'0011',VVRAMNIL POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL67NIL,HD2LIT POST\n*\n         MVC   PUTLLINE,DL67  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'0011',VVRAMNXT POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL68NXT,HD2LIT POST\n*\n         ICM   R15,B'1111',VVRAMNLR POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL68NLR,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRAMDLR POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL68DLR,HD4LIT POST\n*\n         MVC   PUTLLINE,DL68  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRAMINR POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL69INR,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRAMUPR POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL69UPR,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRAMRTR POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL69RTR,HD4LIT POST\n*\n         MVC   PUTLLINE,DL69  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRAMASP POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL70ASP,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRAMCIS POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL70CIS,HD4LIT POST\n*\n         ICM   R15,B'1111',VVRAMCAS POST\n         BAL   R14,HD4        CVT 4 BYTES TH HEX/CHR\n         MVC   DL70CAS,HD4LIT POST\n*\n         MVC   PUTLLINE,DL70  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ICM   R15,B'1111',VVRAMEXC POST\n         BAL   R14,HD4        CVT 4 BYTES TO HEX/CHR\n         MVC   DL71EXC,HD4LIT POST\n*\n         MVC   PUTLLINE,DL71  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         DROP  R5\n         L     R14,PC60R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'PCE9     - PROCESS VVR CELL TYPE E9'\nPCE9     EQU   *\n         ST    R14,PCE9R14    SAVE RETURN ADDR\n         MVC   DL03LIT,LT05   INDICATE P/S HEADER CELL\n         BAL   R14,POFF       PUT OFFSET LINE\n         USING DSE9,R5        ADDRESSABILITY\n         ICM   R15,B'0011',VVRLEN POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL09LEN,HD2LIT POST\n*\n         ICM   R15,B'0011',VVRHDLEN POST\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL09HDLN,HD2LIT POST\n*\n         LA    R15,VVRTYPE    POST A()\n         LA    R1,1           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL09HTY,HEXLIT POST\n*\n         MVC   DL09CTY,VVRTYPE POST\n         TR    DL09CTY,TRNAME FIX\n*\n         MVC   PUTLLINE,DL09  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT\n*\n         LA    R15,VVRFLAG    POST A()\n         BAL   R14,BIN        NOW BIN\n         MVC   DL10FLAG,BINLIT POST\n*\n         LA    R15,VVRKRQ     POST A()\n         LA    R1,4           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL10KRQ,HEXLIT POST\n*\n         ZAP   PUTLGC,=P'4'   POST 4 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL10  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'3'   POST 3 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL11  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,DL12  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL13  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   PUTLLINE,DL14  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         LA    R15,VVRCMPNL   POST\n         LA    R1,1           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL15NL,HEXLIT  POST\n*\n         LA    R15,VVRCMPNM   POST A()\n         SR    R1,R1          CLEAR\n         IC    R1,VVRCMPNL    POST\n         STC   R1,LNHEXTR     POST HEX LENGTH\n         CH    R1,=H'44'      TOO LONG\n         BNH   PCE9HPT1       NO -- CONTINUE\n         LH    R1,=H'44'      POST SHORTER LENGTH\n         STC   R1,LNHEXTR     SAVE\nPCE9HPT1 EQU   *\n         MVC   DL15NM,SPACES  CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PCE9HPT2       NOT ZERO - PROCESS\n         MVI   DL15NM,APOST   POST CLOSING APOST\n         B     PCE9HPZ        CONTINUE\nPCE9HPT2 EQU   *\n         BAL   R14,HEX        NOW HEX\n         LA    R0,HEXLIT      FROM ADDR\n         SR    R1,R1          CLEAR\n         IC    R1,LNHEXTR     LENGTH\n         AR    R1,R1          X 2 FOR HEX\n         LA    R14,DL15NM     TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         MVI   0(R14),APOST   POST\nPCE9HPZ  EQU   *\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL15  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         IC    R1,VVRCMPNL    POST\n         CVD   R1,WORKDW      NOW PACKED\n         MVC   DL16NL,ED04    POST EDIT MASK\n         ED    DL16NL,WORKDW+6\n*\n         STC   R1,LNCHRTR     SAVE\n         CH    R1,=H'44'      TOO LONG\n         BNH   PCE9CPT1       NO -- CONTINUE\n         LH    R1,=H'44'      TOO LONG\n         STC   R1,LNCHRTR     SAVE\nPCE9CPT1 EQU   *\n         MVC   DL16NM,SPACES  CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PCE9CPT2       NOT ZERO -- PROCESS\n         MVI   DL16NM,APOST   POST CLOSING APOST\n         B     PCE9CPZ        CONTINUE\nPCE9CPT2 EQU   *\n         LA    R0,VVRCMPNM    FROM ADDR\n*                             FROM LENGTH ALREADY IN R1\n         LA    R14,DL16NM     TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         TR    DL16NM,TRNAME  FIX\n         MVI   0(R14),APOST   ADD TRAILING APOST\nPCE9CPZ  EQU   *\n*\n         MVC   PUTLLINE,DL16  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         IC    R1,VVRCMPNL    L'VVRCMPNM\n         LA    R4,VVRCMPNM(R1) NOW A(VVRKEYL)\n         LA    R15,0(R4)      POST A(VVRKEYL)\n         LA    R1,1           POST LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL17KL,HEXLIT  POST\n*\n         LA    R15,1(R4)      POST A(VVRKEYV)\n         SR    R1,R1          CLEAR\n         IC    R1,0(R4)       POST VVRKEYL\n         STC   R1,LNHEXTR     POST HEX LENGTH\n         CH    R1,=H'45'      TOO LONG\n         BNH   PCE9HKT1       NO -- CONTINUE\n         LH    R1,=H'45'      POST SHORTER LENGTH\n         STC   R1,LNHEXTR     SAVE\nPCE9HKT1 EQU   *\n         MVC   DL17K,SPACES   CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PCE9HKT2       NOT ZERO -- PROCESS\n         MVI   DL17K,APOST    POST CLOSING APOST\n         B     PCE9HKZ        CONTINUE\nPCE9HKT2 EQU   *\n         BAL   R14,HEX        NOW HEX\n         LA    R0,HEXLIT      FROM ADDR\n         SR    R1,R1          CLEAR\n         IC    R1,LNHEXTR     LENGTH\n         AR    R1,R1          X 2 FOR HEX\n         LA    R14,DL17K      TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         MVI   0(R14),APOST   POST\nPCE9HKZ  EQU   *\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL17  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         IC    R1,0(R4)       POST VVRKEYL\n         CVD   R1,WORKDW      NOW PACKED\n         MVC   DL18KL,ED04    POST EDIT MASK\n         ED    DL18KL,WORKDW+6\n*\n         STC   R1,LNCHRTR     SAVE\n         CH    R1,=H'45'      TOO LONG\n         BNH   PCE9CKT1       NO -- CONTINUE\n         LH    R1,=H'45'      TOO LONG\n         STC   R1,LNCHRTR     SAVE\nPCE9CKT1 EQU   *\n         MVC   DL18K,SPACES   CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PCE9CKT2       NOT ZERO -- PROCESS\n         MVI   DL18K,APOST    POST CLOSING APOST\n         B     PCE9CKZ        CONTINUE\nPCE9CKT2 EQU   *\n         LA    R0,1(R4)       FROM ADDR VVRKEY\n*                             FROM LENGTH ALREADY IN R1\n         LA    R14,DL18K      TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         TR    DL18K,TRNAME   FIX\n         MVI   0(R14),APOST   ADD TRAILING APOST\nPCE9CKZ  EQU   *\n*\n         MVC   PUTLLINE,DL18  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         IC    R1,0(R4)       L'VVRKEY\n         LA    R4,1(R1,R4)    NOW A(VVRCATNL)\n         LA    R15,0(R4)      POST A(VVRCATNL)\n         LA    R1,1           POST LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   DL19NL,HEXLIT  POST\n*\n         LA    R15,1(R4)      POST A(VVRCATNM)\n         SR    R1,R1          CLEAR\n         IC    R1,0(R4)       POST VVRCATNL\n         STC   R1,LNHEXTR     POST HEX LENGTH\n         CH    R1,=H'44'      TOO LONG\n         BNH   PCE9HTT1       NO -- CONTINUE\n         LH    R1,=H'44'      POST SHORTER LENGTH\n         STC   R1,LNHEXTR     SAVE\nPCE9HTT1 EQU   *\n         MVC   DL19NM,SPACES  CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PCE9HTT2       NO -- PROCESS\n         MVI   DL19NM,APOST   POST CLOSING APOST\n         B     PCE9HTZ        CONTINUE\nPCE9HTT2 EQU   *\n         BAL   R14,HEX        NOW HEX\n         LA    R0,HEXLIT      FROM ADDR\n         SR    R1,R1          CLEAR\n         IC    R1,LNHEXTR     LENGTH\n         AR    R1,R1          X 2 FOR HEX\n         LA    R14,DL19NM     TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         MVI   0(R14),APOST   POST\nPCE9HTZ  EQU   *\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL19  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         IC    R1,0(R4)       POST VVRCATNL\n         CVD   R1,WORKDW      NOW PACKED\n         MVC   DL20NL,ED04    POST EDIT MASK\n         ED    DL20NL,WORKDW+6\n*\n         STC   R1,LNCHRTR     SAVE\n         CH    R1,=H'44'      TOO LONG\n         BNH   PCE9CTT1       NO -- CONTINUE\n         LH    R1,=H'44'      TOO LONG\n         STC   R1,LNCHRTR     SAVE\nPCE9CTT1 EQU   *\n         MVC   DL20NM,SPACES  CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PCE9CTT2       NOT ZERO -- PROCESS\n         MVI   DL20NM,APOST   POST CLOSING APOST\n         B     PCE9CTZ        CONTINUE\nPCE9CTT2 EQU   *\n         LA    R0,1(R4)       FROM ADDR VVRKEY\n*                             FROM LENGTH ALREADY IN R1\n         LA    R14,DL20NM     TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         TR    DL20NM,TRNAME  FIX\n         MVI   0(R14),APOST   ADD TRAILING APOST\nPCE9CTZ  EQU   *\n*\n         MVC   PUTLLINE,DL20  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         IC    R1,0(R4)       L'VVRCATNM\n         LA    R4,1(R1,R4)    NOW A(VVRBSENL)\n         LA    R15,0(R4)      POST A(VVRBSENL)\n         LA    R1,1           POST LENGHT\n         BAL   R14,HEX        NOW HEX\n         MVC   DL21NL,HEXLIT  POST\n*\n         LA    R15,1(R4)      POST A(VVRBSENM)\n         SR    R1,R1          CLEAR\n         IC    R1,0(R4)       POST VVRBSENL\n         STC   R1,LNHEXTR     POST HEX LENGTH\n         CH    R1,=H'44'      TOO LONG\n         BNH   PCE9HBT1       NO -- CONTINUE\n         LH    R1,=H'44'      POST SHORTER LENGTH\n         STC   R1,LNHEXTR     SAVE\nPCE9HBT1 EQU   *\n         MVC   DL21NM,SPACES  CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PCE9HBT2       NOT ZERO -- PROCESS\n         MVI   DL21NM,APOST   POST TRAILING APOST\n         B     PCE9HBZ        CONTINUE\nPCE9HBT2 EQU   *\n         BAL   R14,HEX        NOW HEX\n         LA    R0,HEXLIT      FROM ADDR\n         SR    R1,R1          CLEAR\n         IC    R1,LNHEXTR     LENGTH\n         AR    R1,R1          X 2 FOR HEX\n         LA    R14,DL21NM     TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         MVI   0(R14),APOST   POST\nPCE9HBZ  EQU   *\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL21  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         SR    R1,R1          CLEAR\n         IC    R1,0(R4)       POST VVRBSENL\n         CVD   R1,WORKDW      NOW PACKED\n         MVC   DL22NL,ED04    POST EDIT MASK\n         ED    DL22NL,WORKDW+6\n*\n         STC   R1,LNCHRTR     SAVE\n         CH    R1,=H'44'      TOO LONG\n         BNH   PCE9CBT1       NO -- CONTINUE\n         LH    R1,=H'44'      TOO LONG\n         STC   R1,LNCHRTR     SAVE\nPCE9CBT1 EQU   *\n         MVC   DL22NM,SPACES  CLEAR\n         LTR   R1,R1          ZERO CHECK\n         BNZ   PCE9CBT2       NOT ZERO -- PROCESS\n         MVI   DL22NM,APOST   POST TRAILING APOST\n         B     PCE9CBZ        CONTINUE\nPCE9CBT2 EQU   *\n         LA    R0,1(R4)       FROM ADDR VVRBSENM\n*                             FROM LENGTH ALREADY IN R1\n         LA    R14,DL22NM     TO ADDR\n         LR    R15,R1         TO LENGTH\n         MVCL  R14,R0         COPY\n         TR    DL22NM,TRNAME  FIX\n         MVI   0(R14),APOST   ADD TRAILING APOST\nPCE9CBZ  EQU   *\n*\n         MVC   PUTLLINE,DL22  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         DROP  R5\n         L     R14,PCE9R14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'GETV     - GET NEXT VVDS REC'\nGETV     EQU   *\n         ST    R14,GETVR14    SAVE RETURN ADDR\n         CLI   SWV,C'O'       FILE OPEN\n         BNE   ERRGVE         NO -- ERROR\n         AP    GETVRC,=P'1'   BUMP RECORD COUNT\n         GET   RPL=((6))      READ NEXT REC\n         LTR   R15,R15        OK?\n         BZ    GETVX          YES -- DONE\n         ST    R15,FDBKR15    SAVE RETURN CODE\n         SHOWCB RPL=(R6),                                              X\n               AREA=FDBKRPL,                                           X\n               LENGTH=L'FDBKRPL,                                       X\n               FIELDS=FDBK\n         CLC   FDBKR15,=F'8'  LOGIC ERROR\n         BNE   ERRRPL         NO -- ERROR\n         CLC   FDBKRPL,=F'4'  EOF\n         BNE   ERRRPL         NO -- ERROR\n         MVI   SWV,C'E'       SET EOF SW\nGETVX    EQU   *\n         L     R14,GETVR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'POFF     - PRINT OFFSET LINE'\nPOFF     EQU   *\n         ST    R14,POFFR14    SAVE RETURN ADDR\n         LR    R15,R5         POST CURR ADDR\n         S     R15,ADDRVREC   LESS BASE ADDR = OFFSET\n         BAL   R14,HD2        CVT 2 BYTES TO HEX/CHR\n         MVC   DL03OFS,HD2LIT POST\n*\n         ZAP   PUTLGC,=P'2'   POST 2 EXTRA LINES IN GROUP\n         MVC   PUTLLINE,SPACES POST BLANK LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         ZAP   PUTLGC,=P'1'   POST 1 EXTRA LINE IN GROUP\n         MVC   PUTLLINE,DL03  POST LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n*\n         MVC   PUTLLINE,SPACES POST BLANK LINE TO PRINT\n         BAL   R14,PUTL       PRINT IT\n         L     R14,POFFR14    RESTORE RETURN ADDR\n         BR    R14            RETRUN\n         TITLE 'PUTL     - PRINT A DATA LINE'\nPUTL     EQU   *\n         ST    R14,PUTLR14    SAVE RETURN ADDR\n         AP    PUTLLC,=P'1'   BUMP LINE COUNT\n         AP    PUTLGC,PUTLLC  ALLOW FOR LINE GROUPS\n         CP    PUTLGC,PUTLLMAX PAST END OF PAGE\n         BL    PUTLPUT        NO - SKIP TOP OF PAGE LOGIC\n         AP    PUTLPC,=P'1'   BUMP PAGE COUNT\n         MVC   TL01PGN,ED01   POST EDIT MASK\n         ED    TL01PGN,PUTLPC POST PAGE NO\n         PUT   SYSPRINT,TL01  PRINT TITLE LINE\n         PUT   SYSPRINT,SPACES PRINT BALNK LINE\n         ZAP   PUTLLC,=P'3'   RESET LINE COUNT\nPUTLPUT  EQU   *\n         ZAP   PUTLGC,=P'0'   RESET GROUP COUNT\n         PUT   SYSPRINT,PUTLLINE PRINT DATA LINE\n         L     R14,PUTLR14    RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'HD1      - FORMAT HEX AND DECIMAL - 1 BYTE'\nHD1      EQU   *\n*\n*        ON ENTRY:  R15 - ONE BYTE VALUE FOR PRINTING\n*\n         ST    R14,HD1R14     SAVE RETURN ADDR\n         STC   R15,HDWORK     POST HEX CHAR\n         LA    R15,HDWORK     A(HEX CHAR)\n         LA    R1,1           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   HD1HX,HEXLIT   POST\n         SR    R15,R15        CLEAR\n         IC    R15,HDWORK     POST\n         CVD   R15,WORKDW     NOW PACKED\n         MVC   HD1ED,ED04     POST EDIT MASK\n         ED    HD1ED,WORKDW+6\n         L     R14,HD1R14     RESTORE RETURN ADDR\n         BR    R14\n         TITLE 'HD2      - FORMAT HEX AND DECIMAL - 2 BYTES'\nHD2      EQU   *\n*\n*        ON ENTRY:  R15 - TWO BYTE VALUE FOR PRINTING\n*\n         ST    R14,HD2R14     SAVE RETURN ADDR\n         STH   R15,HDWORK     POST HEX CHAR\n         LA    R15,HDWORK     A(HEX CHARS)\n         LA    R1,2           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   HD2HX,HEXLIT   POST\n         SR    R15,R15        CLEAR\n         ICM   R15,B'0011',HDWORK POST\n         CVD   R15,WORKDW     NOW PACKED\n         MVC   HD2ED,ED01     POST EDIT MASK\n         ED    HD2ED,WORKDW+5\n         L     R14,HD2R14     RESTORE RETURN ADDR\n         BR    R14\n         TITLE 'HD3      - FORMAT HEX AND DECIMAL - 3 BYTES'\nHD3      EQU   *\n*\n*        ON ENTRY:  R15 - THREE BYTE VALUE FOR PRINTING\n*\n         ST    R14,HD3R14     SAVE RETURN ADDR\n         STCM  R15,B'0111',HDWORK POST HEX CHAR\n         LA    R15,HDWORK     A(HEX CHARS)\n         LA    R1,3           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   HD3HX,HEXLIT   POST\n         SR    R15,R15        CLEAR\n         ICM   R15,B'0111',HDWORK POST HEX CHAR\n         CVD   R15,WORKDW     NOW PACKED\n         MVC   HD3ED,ED05     POST EDIT MASK\n         ED    HD3ED,WORKDW+3\n         L     R14,HD3R14     RESTORE RETURN ADDR\n         BR    R14\n         TITLE 'HD4      - FORMAT HEX AND DECIMAL - 4 BYTES'\n*\n*        ON ENTRY:  R15 - FOUR BYTE VALUE FOR PRINTING\n*\nHD4      EQU   *\n         ST    R14,HD4R14     SAVE RETURN ADDR\n         ST    R15,HDWORK     POST HEX CHAR\n         LA    R15,HDWORK     A(HEX CHARS)\n         LA    R1,4           LENGTH\n         BAL   R14,HEX        NOW HEX\n         MVC   HD4HX,HEXLIT   POST\n         L     R15,HDWORK     POST\n         CVD   R15,WORKDW     NOW PACKED\n         SRP   WORKDW,1,0     SHIFT LEFT 1 FOR ED\n         MVC   HD4ED,ED02     POST EDIT MASK\n         ED    HD4ED,WORKDW+2\n         L     R14,HD4R14     RESTORE RETURN ADDR\n         BR    R14\n         TITLE 'HEX      - MAKE TEXT PRINTABLE HEX'\nHEX      EQU   *\n*\n*        ON ENTRY:  R1  - NUMBER OF BYTES\n*                   R15 - ADDR OF SOURCE\n*\n         ST    R14,HEXR14     SAVE RETURN ADDR\n         LTR   R1,R1          LENGTH CHECK\n         BNP   ERRHEXL        MUST BE POS\n         CH    R1,=H'45'      MAX\n         BH    ERRHEXL        OVER -- ERROR\n         LA    R14,HEXLIT     A(START OF ANS)\nHEXLOOP  EQU   *\n         MVC   0(1,R14),0(R15) POST FIRST CHAR\n         TR    0(1,R14),TRHEXH XLATE FOR HIGH BYTE\n         MVC   1(1,R14),0(R15) POST FIRST CHAR AGAIN\n         TR    1(1,R14),TRHEXL XLATE FOR LOW BYTE\n         LA    R14,2(R14)      BUMP TO NEXT\n         LA    R15,1(R15)      BUMP TO NEXT\n         BCT   R1,HEXLOOP      LOOP BACK\n         L     R14,HEXR14     RESTORE RETURN ADDR\n         BR    R14\n         TITLE 'BIN      - CONVERT A BYTE TO DISPLAY'\n*\n*        ON ENTRY:  R15 - ADDR OF BYTE\n*\nBIN      EQU   *\n         ST    R14,BINR14     SAVE RETURN ADDR\n         MVI   BINLIT+1,C'0'  ASSUME\n         TM    0(R15),B'10000000'\n         BE    BIN01          ASSUMPTION OK\n         MVI   BINLIT+1,C'1'  FIX ERROR\nBIN01    EQU   *\n         MVI   BINLIT+2,C'0'  ASSUME\n         TM    0(R15),B'01000000'\n         BE    BIN02          ASSUMPTION OK\n         MVI   BINLIT+2,C'1'  FIX ERROR\nBIN02    EQU   *\n         MVI   BINLIT+3,C'0'  ASSUME\n         TM    0(R15),B'00100000'\n         BE    BIN03          ASSUMPTION OK\n         MVI   BINLIT+3,C'1'  FIX ERROR\nBIN03    EQU   *\n         MVI   BINLIT+4,C'0'  ASSUME\n         TM    0(R15),B'00010000'\n         BE    BIN04          ASSUMPTION OK\n         MVI   BINLIT+4,C'1'  FIX ERROR\nBIN04    EQU   *\n         MVI   BINLIT+5,C'0'  ASSUME\n         TM    0(R15),B'00001000'\n         BE    BIN05          ASSUMPTION OK\n         MVI   BINLIT+5,C'1'  FIX ERROR\nBIN05    EQU   *\n         MVI   BINLIT+6,C'0'  ASSUME\n         TM    0(R15),B'00000100'\n         BE    BIN06          ASSUMPTION OK\n         MVI   BINLIT+6,C'1'  FIX ERROR\nBIN06    EQU   *\n         MVI   BINLIT+7,C'0'  ASSUME\n         TM    0(R15),B'00000010'\n         BE    BIN07          ASSUMPTION OK\n         MVI   BINLIT+7,C'1'  FIX ERROR\nBIN07    EQU   *\n         MVI   BINLIT+8,C'0'  ASSUME\n         TM    0(R15),B'00000001'\n         BE    BIN08          ASSUMPTION OK\n         MVI   BINLIT+8,C'1'  FIX ERROR\nBIN08    EQU   *\n         L     R14,BINR14     RESTORE RETURN ADDR\n         BR    R14            RETURN\n         TITLE 'ERROR MESSAGES'\nERRAMDCN EQU   *\n         WTO   'VVDSLIST - VVRAMDCN INVALID -- S/B 98',                *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRDSLEN EQU   *\n         WTO   'VVDSLIST - VVRDSLEN INVALID -- S/B 53 OR 85',          *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRGVE   EQU   *\n         WTO   'VVDSLIST - INTERNAL LOGIC ERROR AT LABEL GETV',        *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRHEXL  EQU   *\n         ST    R1,HEXLR1      DIAGNOSTIC SAVE\n         WTO   'VVDSLIST - R1 BAD ON ENTRY TO HEX',                    *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRJFCB  EQU   *\n         WTO   'VVDSLIST - RDJFCB FAILED',                             *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRNOCR  EQU   *\n         WTO   'VVDSLIST - VVCR RECORD MISSING ',                      *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRNOSDR EQU   *\n         WTO   'VVDSLIST - SELF DEFINING VVR MISSING',                 *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROEXT  EQU   *\n         WTO   'VVDSLIST - OPEN FAILED FOR SYSPRINT FILE',             *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERROPV   EQU   *\n         WTO   'VVDSLIST - OPEN FAILED FOR VVDS FILE',                 *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRRPL   EQU   *\n         WTO   'VVDSLIST - I/O ERROR READING VVDS',                    *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRRTY   EQU   *\n         WTO   'VVDSLIST - INVALID VVR RECORD TYPE',                   *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRSVVRF EQU   *\n         WTO   'VVDSLIST - FIRST VVR NOT SELF DEFINING',               *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRSVVRZ EQU   *\n         WTO   'VVDSLIST - FIRST VVR NOT TYPE Z',                      *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRVVCRL EQU   *\n         WTO   'VVDSLIST - VVCR LENGTH INVALID -- S/B 4088',           *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRVVRQZ EQU   *\n         WTO   'VVDSLIST - VVR TYPE NOT Q OR Z',                       *\n               ROUTCDE=11,DESC=7\n         B     ABEND\nERRXTNTL EQU   *\n         WTO   'VVDSLIST - VVRXTNTL NOT DIVISIBLE BY 20',              *\n               ROUTCDE=11,DESC=7\n         B     ABEND\n         TITLE 'EXIT/ABEND'\nABEND    EQU   *\n         ABEND 1000,DUMP\nEXIT     EQU   *\n         CLOSE (SYSPRINT)\n         L     R6,ADDRACB\n         CLOSE ((6))\n         L     R13,4(R13)\n         RETURN (14,12),RC=0\n         LTORG\n         TITLE 'DATA AREAS - MISCELLANEOUS'\nSAVEAREA DS    9D                  REG SAVE AREA\n*\nWORKDW   DS    D                   WORK AREA\n*\nBINR14   DS    F                   R14 SAVE AREA FOR BIN\nGETVR14  DS    F                   R14 SAVE AREA FOR GETV\nHD1R14   DS    F                   R14 SAVE AREA FOR HD1\nHD2R14   DS    F                   R14 SAVE AREA FOR HD2\nHD3R14   DS    F                   R14 SAVE AREA FOR HD3\nHD4R14   DS    F                   R14 SAVE AREA FOR HD4\nHEXR14   DS    F                   R14 SAVE AREA FOR HEX\nPCE9R14  DS    F                   R14 SAVE AREA FOR PCE9\nPCRCR14  DS    F                   R14 SAVE AREA FOR PCRC\nPCRSR14  DS    F                   R14 SAVE AREA FOR PCRS\nPC21R14  DS    F                   R14 SAVE AREA FOR PC21\nPC23R14  DS    F                   R14 SAVE AREA FOR PC23\nPC60R14  DS    F                   R14 SAVE AREA FOR PC60\nPHDRR14  DS    F                   R14 SAVE AREA FOR PHDR\nPOFFR14  DS    F                   R14 SAVE AREA FOR POFF\nPUTLR14  DS    F                   R14 SAVE AREA FOR PUTL\nPVCRR14  DS    F                   R14 SAVE AREA FOR PVCR\nPVRQR14  DS    F                   R14 SAVE AREA FOR PVRQ\nPVRZR14  DS    F                   R14 SAVE AREA FOR PVRZ\nSCANR14  DS    F                   R14 SAVE AREA FOR SCAN\nSVVRR14  DS    F                   R14 SAVE AREA FOR SVVR\n*\nADDRACB  DS    F                   A(ACB)\nADDRRPL  DS    F                   A(RPL)\nADDRVREC DS    F                   A(REC)\nFDBKRPL  DS    F                   FDBK FROM ARCDIR IF ERROR\nFDBKR15  DS    F                   R15 FROM GET ON ARCDIR IF ERROR\nRLRECL   DS    F                   LRECL OF CURRENT FILE\nBLRECL   DC    F'4096'             LRECL OF BUFFER\nTIOT     DS    F                   ADDR OF TIOT\nNEXTDD   DS    F                   ADDR OF NEXT DD SEG IN TIOT\nPCRSBASE DS    F                   BASE ADDR FOR PCRS\nHDWORK   DS    F                   WORK AREA FOR HD1 - HD4\nHEXLR1   DS    F                   DIAGNOSTIC SAVE AREA (R1) - ERRHEXL\n*\nJFCBLIST DS    0F\n         DC    X'87'               DCB EXIT LIST - JFCB\n         DC    AL3(INFMJFCB)       JFCB WORK AREA\n*\n         DS    0F\nSHOWAREA DS    0XL16\nSHOWRBA  DS    F\nSHOWRECL DS    F\n*\n*        PACKED FIELDS\n*\nGETVRC   DC    PL6'0'              GETV - RECORD COUNT\nPCRCLN   DC    PL2'0'              PCRC - LOOP NUMBER\nPUTLLMAX DC    PL2'56'             PUTL - MAX LINES / PAGE\nPUTLLC   DC    PL2'56'             PUTL - CURRENT LINE NO\nPUTLGC   DC    PL2'0'              PUTL - CURRENT GROUP COUNT\nPUTLPC   DC    PL3'0'              PUTL - CURRENT PAGE NO\n*\n*        MISC FIELDS\n*\nLNHEXTR  DS    X                   LENGTH OF HEX FIELD FOR TR\nLNCHRTR  DS    X                   LENGTH OF CHR FIELD FOR TR\n*\n*        CHARACTER FIELDS\n*\nSWV      DC    C'C'                FILE V STATUS SW VVDSXXXX\n*              C'C'                CLOSED\n*              C'O'                OPEN\n*              C'E'                FILE AT EOF\n*\nDDNAME   DS    CL8                 DD NAME OF NEXT VVDS TO PROCESS\nSPACES   DC    CL133' '\nPUTLLINE DC    CL133' '            PUTL - NEXT DATA LINE TO PRINT\nHEXLIT   DS    CL90                HEX  - LITERAL AREA FOR ANS\nBINLIT   DS    0CL10\n         DC    AL1(APOST)\n         DC    CL8' '\n         DC    AL1(APOST)\nHD1LIT   DS    0CL10               HD2  - LITERAL AREA FOR ANS\n         DC    AL1(APOST)\nHD1HX    DS    CL2\n         DC    AL1(APOST)\n         DC    C' ='\nHD1ED    DS    CL4\nHD2LIT   DS    0CL15               HD2  - LITERAL AREA FOR ANS\n         DC    AL1(APOST)\nHD2HX    DS    CL4\n         DC    AL1(APOST)\n         DC    C' ='\nHD2ED    DS    CL7\nHD3LIT   DS    0CL22               HD3  - LITERAL AREA FOR ANS\n         DC    AL1(APOST)\nHD3HX    DS    CL6\n         DC    AL1(APOST)\n         DC    C' ='\nHD3ED    DS    CL12\nHD4LIT   DS    0CL26               HD4  - LITERAL AREA FOR ANS\n         DC    AL1(APOST)\nHD4HX    DS    CL8\n         DC    AL1(APOST)\n         DC    C' ='\nHD4ED    DS    CL14\n*\n*        EDIT MASKS\n*\nED01     DC    X'4020206B202120'                        BZZ,ZZ9 (07)\nED02     DC    X'40206B2020206B2020206B202120'   BZ,ZZZ,ZZZ,ZZ9 (14)\nED03     DC    X'40206B2020206B202120'               BZ,ZZZ,ZZ9 (10)\nED04     DC    X'40202120'                                 BZZ9 (04)\nED05     DC    X'402020206B2020206B202120'         BZZZ,ZZZ,ZZ9 (12)\n*\n*         MISC LITERALS\n*\n*                   123456789012345678901234567890123456789012345678901\nLT01     DC    CL38'VSAM VOLUME CONTROL RECORD            '\nLT02     DC    CL38'SELF-DESCRIBING VSAM VOLUME RECORD    '\nLT03     DC    CL38'PRIMARY VSAM VOLUME RECORD            '\nLT04     DC    CL38'SECONDARY VSAM VOLUME RECORD          '\nLT05     DC    CL29'PRIMARY/SECONDARY HEADER CELL'\nLT06     DC    CL29'DATASET INFORMATION CELL     '\nLT07     DC    CL29'AMSDB CELL                   '\nLT08     DC    CL29'VOLUME INFORMATION CELL      '\nLT09     DC    CL04'*TR*'\nLT10     DC    CL16'NOT PRESENT     '\nLT11     DC    CL48'NOT PRESENT                                     '\n*                   123456789012345678901234567890123456789012345678901\n         TITLE 'WORK AREAS - TRANSLATE TABLES'\nTRNAME   EQU   *\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         DC    X'40404040404040404040404040404040'    0\n         DC    X'40404040404040404040404040404040'    1\n         DC    X'40404040404040404040404040404040'    2\n         DC    X'40404040404040404040404040404040'    3\n         DC    X'40404040404040404040404B40404040'    4  PERIOD\n         DC    X'40404040404040404040405B40404040'    5  $\n         DC    X'40404040404040404040404040404040'    6\n         DC    X'40404040404040404040407B7C404040'    7  @#\n         DC    X'40404040404040404040404040404040'    8\n         DC    X'40404040404040404040404040404040'    9\n         DC    X'40404040404040404040404040404040'    A\n         DC    X'40404040404040404040404040404040'    B\n         DC    X'40C1C2C3C4C5C6C7C8C9404040404040'    C  LETTERS\n         DC    X'40D1D2D3D4D5D6D7D8D9404040404040'    D  LETTERS\n         DC    X'4040E2E3E4E5E6E7E8E9404040404040'    E  LETTERS\n         DC    X'F0F1F2F3F4F5F6F7F8F9404040404040'    F  NUMBERS\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\nTRHEXH   EQU   *\n*                0123456789ABCDEF\n         DC    C'0000000000000000'   0\n         DC    C'1111111111111111'   1\n         DC    C'2222222222222222'   2\n         DC    C'3333333333333333'   3\n         DC    C'4444444444444444'   4\n         DC    C'5555555555555555'   5\n         DC    C'6666666666666666'   6\n         DC    C'7777777777777777'   7\n         DC    C'8888888888888888'   8\n         DC    C'9999999999999999'   9\n         DC    C'AAAAAAAAAAAAAAAA'   A\n         DC    C'BBBBBBBBBBBBBBBB'   B\n         DC    C'CCCCCCCCCCCCCCCC'   C\n         DC    C'DDDDDDDDDDDDDDDD'   D\n         DC    C'EEEEEEEEEEEEEEEE'   E\n         DC    C'FFFFFFFFFFFFFFFF'   F\n*                0123456789ABCDEF\nTRHEXL   EQU   *\n*                0123456789ABCDEF\n         DC    C'0123456789ABCDEF'   0\n         DC    C'0123456789ABCDEF'   1\n         DC    C'0123456789ABCDEF'   2\n         DC    C'0123456789ABCDEF'   3\n         DC    C'0123456789ABCDEF'   4\n         DC    C'0123456789ABCDEF'   5\n         DC    C'0123456789ABCDEF'   6\n         DC    C'0123456789ABCDEF'   7\n         DC    C'0123456789ABCDEF'   8\n         DC    C'0123456789ABCDEF'   9\n         DC    C'0123456789ABCDEF'   A\n         DC    C'0123456789ABCDEF'   B\n         DC    C'0123456789ABCDEF'   C\n         DC    C'0123456789ABCDEF'   D\n         DC    C'0123456789ABCDEF'   E\n         DC    C'0123456789ABCDEF'   F\n*                0123456789ABCDEF\n         TITLE 'WORK AREAS - JFCB'\n         IEFJFCBN\n         TITLE 'WORK AREAS - DCBS'\n         PUSH  PRINT\n         PRINT NOGEN\nSYSPRINT DCB   DDNAME=SYSPRINT,                                        X\n               DSORG=PS,                                               X\n               LRECL=133,                                              X\n               MACRF=PM,                                               X\n               RECFM=FBA\n*\nDCBJFCB  DCB   DDNAME=DCBJFCB,                                         X\n               DSORG=PS,                                               X\n               EXLST=JFCBLIST,                                         X\n               MACRF=GL\n*\n         DCBD  DSORG=(PS)\nVVDSLIST CSECT\n         POP   PRINT\n         TITLE 'WORK AREAS - DETAIL RECORD AREAS'\nTL01     DC    CL133' '\n         ORG   TL01\n         DC    C'1'           CC = TOP OF PAGE\n         ORG   TL01+9\n         DC    C'VVDSLIST  DD:  '\nTL01DDN  DS    CL8\n         DC    C'  FORMATTED LISTING OF:  '\nTL01DSN  DS    CL44\n         ORG   TL01+109\n         DC    C'PAGE '\nTL01PGN  DS    CL7\n         ORG   ,\n*\nDL02     DC    CL133' '\n         ORG   DL02+1\nDL02LIT  DS    CL38\n         DC    C' RBA ='\nDL02RBA  DS    CL14\n         DC    C'  RECORD NUMBER ='\nDL02RECN DS    CL10\n         DC    C'  LENGTH (RPL) = X'\nDL02LEN  DS    CL15\n         ORG   ,\n*\nDL03     DC    CL133' '\n         ORG   DL03+4\n         DC    C'OFFSET = X'\nDL03OFS  DS    CL15\n         DC    C' - '\nDL03LIT  DS    CL29\n         ORG   ,\n*\nDL04     DC    CL133' '\n         ORG   DL04+9\n         DC    C'VVCRLEN  = X'\nDL04LEN  DS    CL15\n         DC    C'  VVCNUMCI = X'\nDL04NCI  DS    CL15\n         DC    C'  RESERVED = X'\n         DC    AL1(APOST)\nDL04RSV  DS    CL40\n         DC    AL1(APOST)\n         ORG   ,\n*\nDL05     DC    CL133' '\n         ORG   DL05+9\n         DC    C'ENTRY NO'\nDL05ENT  DS    CL4\n         DC    C'  VVCCATNM = X'\n         DC    AL1(APOST)\nDL05CTN  DS    CL88\n         DC    AL1(APOST)\n         ORG   ,\n*\nDL06     DC    CL133' '\n         ORG   DL06+32\n         DC    C'= C'\n         DC    AL1(APOST)\nDL06CTN  DS    CL44\n         DC    AL1(APOST)\n         DC    C'  VVCDTRBA = X'\nDL06RBA  DS    CL26\n         ORG   ,\n*\nDL07     DC    CL133' '\n         ORG   DL07+23\n         DC    C'VVCIXRBA = X'\nDL07IXRB DS    CL26\n         DC    C'  VVCSSRBA = X'\nDL07SSRB DS    CL26\n         ORG   ,\n*\nDL08     DC    CL133' '\n         ORG   DL08+9\n         DC    C'VVCCISPC+X'\n         DC    AL1(APOST)\nDL08BASE DS    CL4\n         DC    AL1(APOST)\n         DC    C' = '\nDL08HX00 DS    CL8\n         DC    C' '\nDL08HX04 DS    CL8\n         DC    C'  '\nDL08HX08 DS    CL8\n         DC    C' '\nDL08HX0C DS    CL8\n         DC    C'    '\nDL08HX10 DS    CL8\n         DC    C' '\nDL08HX14 DS    CL8\n         DC    C'  '\nDL08HX18 DS    CL8\n         DC    C' '\nDL08HX1C DS    CL8\n         ORG   ,\n*\nDL09     DC    CL133' '\n         ORG   DL09+9\n         DC    C'VVRLEN   = X'\nDL09LEN  DS    CL15\n         DC    C'  VVRHDLEN = X'\nDL09HDLN DS    CL15\n         DC    C'  VVRTYPE  = X'\n         DC    AL1(APOST)\nDL09HTY  DS    CL2\n         DC    AL1(APOST)\n         DC    C' = C'\n         DC    AL1(APOST)\nDL09CTY  DS    CL1\n         DC    AL1(APOST)\n         ORG   ,\n*\nDL10     DC    CL133' '\n         ORG   DL10+9\n         DC    C'VVRFLAG  = B'\nDL10FLAG DS    CL10\n         ORG   DL10+66\n         DC    C'VVRKRQ   = X'\n         DC    AL1(APOST)\nDL10KRQ  DS    CL8\n         DC    AL1(APOST)\n         ORG   ,\n*\nDL11     DC    CL133' '\n         ORG   DL11+22\n         DC    C'*  * ***  = RESERVED'\n         ORG   ,\n*\nDL12     DC    CL133' '\n         ORG   DL12+22\n         DC    C' *        = SELF-DESCRIBING VVR'\n         ORG   ,\n*\nDL13     DC    CL133' '\n         ORG   DL13+22\n         DC    C'  *       = CATALOG SELF-DESCRIBING VVR'\n         ORG   ,\n*\nDL14     DC    CL133' '\n         ORG   DL14+22\n         DC    C'    *     = COMPONENT TYPE D (0) OR I (1)'\n         ORG   ,\n*\nDL15     DC    CL133' '\n         ORG   DL15+9\n         DC    C'VVRCMPNL = X'\n         DC    AL1(APOST)\nDL15NL   DS    CL2\n         DC    AL1(APOST)\n         DC    C'  VVRCMPNM = X'\n         DC    AL1(APOST)\nDL15NM   DS    CL89\n         ORG   ,\nDL16     DC    CL133' '\n         ORG   DL16+18\n         DC    C'=  '\nDL16NL   DS    CL4\n         DC    C'           = C'\n         DC    AL1(APOST)\nDL16NM   DS    CL45\n         ORG   ,\n*\nDL17     DC    CL133' '\n         ORG   DL17+9\n         DC    C'VVRKEYL  = X'\n         DC    AL1(APOST)\nDL17KL   DS    CL2\n         DC    AL1(APOST)\n         DC    C'  VVRKEY   = X'\n         DC    AL1(APOST)\nDL17K    DS    CL91\n         ORG   ,\nDL18     DC    CL133' '\n         ORG   DL18+18\n         DC    C'=  '\nDL18KL   DS    CL4\n         DC    C'           = C'\n         DC    AL1(APOST)\nDL18K    DS    CL46\n         ORG   ,\n*\nDL19     DC    CL133' '\n         ORG   DL19+9\n         DC    C'VVRCATNL = X'\n         DC    AL1(APOST)\nDL19NL   DS    CL2\n         DC    AL1(APOST)\n         DC    C'  VVRCATNM = X'\n         DC    AL1(APOST)\nDL19NM   DS    CL89\n         ORG   ,\nDL20     DC    CL133' '\n         ORG   DL20+18\n         DC    C'=  '\nDL20NL   DS    CL4\n         DC    C'           = C'\n         DC    AL1(APOST)\nDL20NM   DS    CL45\n         ORG   ,\n*\nDL21     DC    CL133' '\n         ORG   DL21+9\n         DC    C'VVRBSENL = X'\n         DC    AL1(APOST)\nDL21NL   DS    CL2\n         DC    AL1(APOST)\n         DC    C'  VVRBSENM = X'\n         DC    AL1(APOST)\nDL21NM   DS    CL89\n         ORG   ,\nDL22     DC    CL133' '\n         ORG   DL22+18\n         DC    C'=  '\nDL22NL   DS    CL4\n         DC    C'           = C'\n         DC    AL1(APOST)\nDL22NM   DS    CL45\n         ORG   ,\n*\nDL23     DC    CL133' '\n         ORG   DL23+9\n         DC    C'VVRDSLEN = X'\nDL23DSLN DS    CL15\n         DC    C'  VVRDSTYP = X'\n         DC    AL1(APOST)\nDL23HTY  DS    CL2\n         DC    AL1(APOST)\n         DC    C' = C '\n         DC    AL1(APOST)\nDL23CTY  DS    C\n         DC    AL1(APOST)\n         ORG   ,\n*\nDL24     DC    CL133' '\n         ORG   DL24+9\n         DC    C'VVRATTR1 = B'\nDL24ATR1 DS    CL10\n         ORG   DL24+52\n         DC    C'VVRATTR2 = B'\nDL24ATR2 DS    CL10\n         ORG   DL24+100\n         DC    C'VVROPIND = X'\n         DC    AL1(APOST)\nDL24OIND DS    CL2\n         DC    AL1(APOST)\n         ORG   ,\nDL25     DC    CL133' '\n         ORG   DL25+22\n         DC    C'*         = SPEED'\n         ORG   DL25+65\n         DC    C'**        = REGIONAL SHARING ATTR'\n         ORG   ,\n*\nDL26     DC    CL133' '\n         ORG   DL26+22\n         DC    C' *        = UNIQUE'\n         ORG   DL26+65\n         DC    C'  **      = SYSTEM SHARING ATTR'\n         ORG   ,\n*\nDL27     DC    CL133' '\n         ORG   DL27+22\n         DC    C'  *       = REUSABLE'\n         ORG   DL27+65\n         DC    C'    **    = RESERVED'\n         ORG   ,\n*\nDL28     DC    CL133' '\n         ORG   DL28+22\n         DC    C'   *      = ERASE'\n         ORG   DL28+65\n         DC    C'      *   = INTERNAL SYSTEM DS'\n         ORG   ,\n*\nDL29     DC    CL133' '\n         ORG   DL29+22\n         DC    C'    *     = RESERVED'\n         ORG   DL29+65\n         DC    C'       *  = COMPONENT UNUSABLE'\n         ORG   ,\n*\nDL30     DC    CL133' '\n         ORG   DL30+22\n         DC    C'     *    = INHIBIT UPDATE'\n         ORG   ,\n*\nDL31     DC    CL133' '\n         ORG   DL31+22\n         DC    C'      *   = TEMPORARY EXPORT'\n         ORG   ,\n*\nDL32     DC    CL133' '\n         ORG   DL32+22\n         DC    C'       *  = TRACK OVERFLOW'\n         ORG   ,\n*\nDL33     DC    CL133' '\n         ORG   DL33+9\n         DC    C'VVRBUFSZ = X'\nDL33BSZ  DS    CL26\n         DC    C'  VVRPRISP = X'\nDL33PSP  DS    CL22\n         DC    C'  VVRSECSP = X'\nDL33SSP  DS    CL22\n         ORG   ,\n*\nDL34     DC    CL133' '\n         ORG   DL34+9\n         DC    C'VVRSPCFG = B'\nDL34SPFG DS    CL10\n         DC    C'  VVRDSHU  = X'\nDL34DSHU DS    CL26\n         DC    C'  VVRDSHA  = X'\nDL34DSHA DS    CL26\n         ORG   ,\n*\nDL35     DC    CL133' '\n         ORG   DL35+22\n         DC    C'**       = SPACE OPTIONS'\n         ORG   ,\n*\nDL36     DC    CL133' '\n         ORG   DL36+22\n         DC    C'  ****** = RESERVED'\n         ORG   ,\n*\nDL37     DC    CL133' '\n         ORG   DL37+9\n         DC    C'VVRLRECL = X'\nDL37RECL DS    CL26\n         DC    C'  RESERVED = X'\n         DC    AL1(APOST)\nDL37RSV  DS    CL4\n         DC    AL1(APOST)\n         DC    C'  VVREXCPX = X'\n         DC    AL1(APOST)\nDL37HXCP DS    CL16\n         DC    AL1(APOST)\n         DC    C' = C'\n         DC    AL1(APOST)\nDL37CXCP DS    CL8\n         DC    AL1(APOST)\n         ORG   ,\n*\nDL38     DC    CL133' '\n         ORG   DL38+9\n         DC    C'VVRDSHK  = X'\nDL38DSHK DS    CL26\n         DC    C'  VVRCLSFG = B'\nDL38CLSF DS    CL10\n         ORG   DL38+79\n         DC    C'VVRAIXFG = B'\nDL38AIXF DS    CL10\n         ORG   ,\n*\nDL39     DC    CL133' '\n         ORG   DL39+62\n         DC    C'****     = RESERVED'\n         ORG   DL39+92\n         DC    C'*        = AIX ATTRIBUTE FLAG'\n         ORG   ,\n*\nDL40     DC    CL133' '\n         ORG   DL40+62\n         DC    C'    *    = TIMESTAMPS EXIST'\n         ORG   DL40+92\n         DC    C' ******* = RESERVED'\n         ORG   ,\n*\nDL41     DC    CL133' '\n         ORG   DL41+62\n         DC    C'     *   = VERIFY REQUIRED'\n         ORG   ,\n*\nDL42     DC    CL133' '\n         ORG   DL42+62\n         DC    C'      *  = SWAPSPACE'\n         ORG   ,\n*\nDL43     DC    CL133' '\n         ORG   DL43+62\n         DC    C'       * = PAGESPACE'\n         ORG   ,\n*\nDL44     DC    CL133' '\n         ORG   DL44+9\n         DC    C'VVRTMSTP = X'\n         DC    AL1(APOST)\nDL44TMST DS    CL16\n         DC    AL1(APOST)\n         DC    C'  VVRALTSP = X'\n         DC    AL1(APOST)\nDL44ALSP DS    CL16\n         DC    AL1(APOST)\n         ORG   ,\n*\nDL45     DC    CL133' '\n         ORG   DL45+9\n         DC    C'RESERVED = X'\n         DC    AL1(APOST)\nDL45RSV  DS    CL48\n         DC    AL1(APOST)\n         ORG   ,\n*\nDL46     DC    CL133' '\n         ORG   DL46+9\n         DC    C'VVRAMDCN = X'\nDL46DCN  DS    CL15\n         DC    C'  VVRAMID  = X'\n         DC    AL1(APOST)\nDL46HID  DS    CL2\n         DC    AL1(APOST)\n         DC    C' = C'\n         DC    AL1(APOST)\nDL46CID  DS    CL1\n         DC    AL1(APOST)\n         DC    C'  VVRAMATR = B'\nDL46ATR  DS    CL10\n         ORG   ,\n*\nDL47     DC    CL133' '\n         ORG   DL47+76\n         DC    C'*        = KEY SEQ (1) OR ENT SEQ (0)'\n         ORG   ,\n*\nDL48     DC    CL133' '\n         ORG   DL48+76\n         DC    C' *       = WRITE CHECK'\n         ORG   ,\n*\nDL49     DC    CL133' '\n         ORG   DL49+76\n         DC    C'  *      = IMBED'\n         ORG   ,\n*\nDL50     DC    CL133' '\n         ORG   DL50+76\n         DC    C'   *     = REPLICATE'\n         ORG   ,\n*\nDL51     DC    CL133' '\n         ORG   DL51+76\n         DC    C'    *    = ORDERED'\n         ORG   ,\n*\nDL52     DC    CL133' '\n         ORG   DL52+76\n         DC    C'     *   = KEY RANGE'\n         ORG   ,\n*\nDL53     DC    CL133' '\n         ORG   DL53+76\n         DC    C'      *  = RELATIVE RECORD'\n         ORG   ,\n*\nDL54     DC    CL133' '\n         ORG   DL54+76\n         DC    C'       * = SPANNED'\n         ORG   ,\n*\nDL55     DC    CL133' '\n         ORG   DL55+9\n         DC    C'VVRAMLEN = X'\nDL55LEN  DS    CL15\n         DC    C'  VVRAMNST = X'\nDL55NST  DS    CL15\n         DC    C'  VVRAMAKP = X'\nDL55AKP  DS    CL15\n         DC    C'  VVRAMRKP = X'\nDL55RKP  DS    CL15\n         ORG   ,\n*\nDL56     DC    CL133' '\n         ORG   DL56+9\n         DC    C'VVRAMKLN = X'\nDL56KLN  DS    CL15\n         DC    C'  VVRAMPCA = X'\nDL56PCA  DS    CL10\n         DC    C'  VVRAMPCI = X'\nDL56PCI  DS    CL10\n         DC    C'  VVRAMCCA = X'\nDL56CCA  DS    CL15\n         ORG   ,\n*\nDL57     DC    CL133' '\n         ORG   DL57+9\n         DC    C'VVRAMFCA = X'\nDL57FCA  DS    CL15\n         DC    C'  VVRAMFCI = X'\nDL57FCI  DS    CL26\n         DC    C'  VVRAMCIV = X'\nDL57CIV  DS    CL26\n         ORG   ,\n*\nDL58     DC    CL133' '\n         ORG   DL58+9\n         DC    C'VVRAMLCL = X'\nDL58LCL  DS    CL26\n         DC    C'  VVRAMHLR/VVRAMSLT = X'\nDL58HLR  DS    CL26\n         ORG   ,\n*\nDL59     DC    CL133' '\n         ORG   DL59+9\n         DC    C'VVRAMSSR/VVRAMMRR = X'\nDL59SSR  DS    CL26\n         DC    C'  VVRAMARD = X'\nDL59ARD  DS    CL26\n         ORG   ,\n*\nDL60     DC    CL133' '\n         ORG   DL60+9\n         DC    C'VVRAMAT3 = B'\nDL60AT3  DS    CL10\n         DC    C'  VVRAMSNO = X'\nDL60SNO  DS    CL10\n         DC    C'  VVRAMDUI = X'\nDL60DUI  DS    CL26\n         ORG   ,\n*\nDL61     DC    CL133' '\n         ORG   DL61+22\n         DC    C'*        = UNIQUE KEYS'\n         ORG   ,\n*\nDL62     DC    CL133' '\n         ORG   DL62+22\n         DC    C' *       = STAGE'\n         ORG   ,\n*\nDL63     DC    CL133' '\n         ORG   DL63+22\n         DC    C'  *      = NOT BIND'\n         ORG   ,\n*\nDL64     DC    CL133' '\n         ORG   DL64+22\n         DC    C'   *     = NOT WAIT'\n         ORG   ,\n*\nDL65     DC    CL133' '\n         ORG   DL65+22\n         DC    C'    *    = LOADED'\n         ORG   ,\n*\nDL66     DC    CL133' '\n         ORG   DL66+22\n         DC    C'     *** = RESERVED'\n         ORG   ,\n*\nDL67     DC    CL133' '\n         ORG   DL67+9\n         DC    C'VVRAMBFI/VVRAMBFD = X'\nDL67BFI  DS    CL15\n         DC    C'  VVRAMSTS = X'\n         DC    AL1(APOST)\nDL67STS  DS    CL16\n         DC    AL1(APOST)\n         DC    C'  VVRAMNIL = X'\nDL67NIL  DS    CL15\n         ORG   ,\n*\nDL68     DC    CL133' '\n         ORG   DL68+9\n         DC    C'VVRAMNXT = X'\nDL68NXT  DS    CL15\n         DC    C'  VVRAMNLR = X'\nDL68NLR  DS    CL26\n         DC    C'  VVRAMDLR = X'\nDL68DLR  DS    CL26\n         ORG   ,\n*\nDL69     DC    CL133' '\n         ORG   DL69+9\n         DC    C'VVRAMINR = X'\nDL69INR  DS    CL26\n         DC    C'  VVRAMUPR = X'\nDL69UPR  DS    CL26\n         DC    C'  VVRAMRTR = X'\nDL69RTR  DS    CL26\n         ORG   ,\n*\nDL70     DC    CL133' '\n         ORG   DL70+9\n         DC    C'VVRAMASP = X'\nDL70ASP  DS    CL26\n         DC    C'  VVRAMCIS = X'\nDL70CIS  DS    CL26\n         DC    C'  VVRAMCAS = X'\nDL70CAS  DS    CL26\n         ORG   ,\n*\nDL71     DC    CL133' '\n         ORG   DL71+9\n         DC    C'VVRAMEXC = X'\nDL71EXC  DS    CL26\n         ORG   ,\n*\nDL72     DC    CL133' '\n         ORG   DL72+9\n         DC    C'VVRVOLLN = X'\nDL72VOLL DS    CL15\n         DC    C'  VVRVOLTP = X'\n         DC    AL1(APOST)\nDL72HVT  DS    CL2\n         DC    AL1(APOST)\n         DC    C' = C'\n         DC    AL1(APOST)\nDL72CVT  DS    CL1\n         DC    AL1(APOST)\n         DC    C'  VVRVOLFG = B'\nDL72VOLF DS    CL10\n         DC    C'  VVRNOEXT = X'\nDL72NOXT DS    CL10\n         ORG   ,\n*\nDL73     DC    CL133' '\n         ORG   DL73+76\n         DC    C'*        = PRIME VOLUME'\n         ORG   ,\n*\nDL74     DC    CL133' '\n         ORG   DL74+76\n         DC    C' *       = EXTENT INFO OUT OF SYNC'\n         ORG   ,\n*\nDL75     DC    CL133' '\n         ORG   DL75+76\n         DC    C'  *      = OVERFLOW VOLUME'\n         ORG   ,\n*\nDL76     DC    CL133' '\n         ORG   DL76+76\n         DC    C'   ***** = RESERVED'\n         ORG   ,\n*\nDL77     DC    CL133' '\n         ORG   DL77+9\n         DC    C'VVRHKRBA = X'\nDL77HKRB DS    CL26\n         DC    C'  VVRHURBA = X'\nDL77HURB DS    CL26\n         DC    C'  VVRHARBA = X'\nDL77HARB DS    CL26\n         ORG   ,\n*\nDL78     DC    CL133' '\n         ORG   DL78+9\n         DC    C'VVRBLKSZ = X'\nDL78BKSZ DS    CL26\n         DC    C'  VVRBLKTK = X'\nDL78BKTK DS    CL15\n         DC    C'  VVRTRKAU = X'\nDL78TKAU DS    CL15\n         ORG   ,\n*\nDL79     DC    CL133' '\n         ORG   DL79+9\n         DC    C'VVRTPEXT = B'\nDL79TPXT DS    CL10\n         DC    C'  VVRTKCYL = X'\nDL79TKCY DS    CL15\n         DC    C'  VVRBYTTK = X'\nDL79BYTK DS    CL26\n         ORG   ,\n*\nDL80     DC    CL133' '\n         ORG   DL80+22\n         DC    C'*        = SEQUENCE SET WITH DATA'\n         ORG   ,\n*\nDL81     DC    CL133' '\n         ORG   DL81+22\n         DC    C' *       = EXTENTS NOT PREFORMATTED'\n         ORG   ,\n*\nDL82     DC    CL133' '\n         ORG   DL82+22\n         DC    C'  *      = CONVERTED VSAM BY VOLUME'\n         ORG   ,\n*\nDL83     DC    CL133' '\n         ORG   DL83+22\n         DC    C'   ***** = RESERVED'\n         ORG   ,\n*\nDL84     DC    CL133' '\n         ORG   DL84+9\n         DC    C'VVRBYTAU = X'\nDL84BYAU DS    CL26\n         ORG   ,\n*\nDL85     DC    CL133' '\n         ORG   DL85+9\n         DC    C'VVRLOKYL = X'\n         DC    AL1(APOST)\nDL85LOKL DS    CL4\n         DC    AL1(APOST)\n         DC    C' '\nDL85XTLT DS    CL4\n         DC    C'  VVRLOKYV = X'\n         DC    AL1(APOST)\nDL85LOKV DS    CL81\n         ORG   ,\n*\nDL86     DC    CL133' '\n         ORG   DL86+9\n         DC    C'         = '\nDL86LOKL DS    CL7\n         DC    C' '\nDL86CTLT DS    CL4\n         DC    C'           = C'\n         DC    AL1(APOST)\nDL86LOKV DS    CL81\n         ORG   ,\n*\nDL87     DC    CL133' '\n         ORG   DL87+9\n         DC    C'VVRHIKYL = X'\n         DC    AL1(APOST)\nDL87HIKL DS    CL4\n         DC    AL1(APOST)\n         DC    C' '\nDL87XTLT DS    CL4\n         DC    C'  VVRHIKYV = X'\n         DC    AL1(APOST)\nDL87HIKV DS    CL81\n         ORG   ,\n*\nDL88     DC    CL133' '\n         ORG   DL88+9\n         DC    C'         = '\nDL88HIKL DS    CL7\n         DC    C' '\nDL88CTLT DS    CL4\n         DC    C'           = C'\n         DC    AL1(APOST)\nDL88HIKV DS    CL81\n         ORG   ,\n*\nDL89     DC    CL133' '\n         ORG   DL89+9\n         DC    C'VVRXTNTL = X'\nDL89XTL  DS    CL15\n         DC    C' DIVIDED BY 20 FOR NUMBER OF EXTENTS ='\nDL89XTN  DS    CL4\n         ORG   ,\n*\nDL90     DC    CL133' '\n         ORG   DL90+9\n         DC    C'VVRXSEQN = X'\nDL90XSQN DS    CL15\n         DC    C'  VVRXSC   = X'\nDL90XSC  DS    CL15\n         DC    C'  VVRXSH   = X'\nDL90XSH  DS    CL15\n         ORG   ,\n*\nDL91     DC    CL133' '\n         ORG   DL91+38\n         DC    C'VVRXEC   = X'\nDL91XEC  DS    CL15\n         DC    C'  VVRXEH   = X'\nDL91XEH  DS    CL15\n         DC    C'  VVRXNTRK = X'\nDL91XNTR DS    CL15\n         ORG   ,\n*\nDL92     DC    CL133' '\n         ORG   DL92+38\n         DC    C'VVRXSRBA = X'\nDL92XSRB DS    CL26\n         DC    C'  VVRXERBA = X'\nDL92XERB DS    CL26\n         ORG   ,\n*\n         TITLE 'WORK AREAS - DSECTS'\nDSE9     DSECT                PRIMARY HEADER CELL\n*                        ALSO SECONDARY HEADER CELL (DSD8)\nVVRLEN   DS    XL2            LENGTH OF ENTIRE VVR\nVVRHDLEN DS    XL2            LENGHT OF PRIMARY/SECONDARY HEADER CELL\nVVRTYPE  DS    X              C'Z' PRIMARY OR C'Q' SECONDARY\nVVRFLAG  DS    X              HEADER FLAG\n*              1... ....      RESERVED\n*              .1.. ....      SELF DESCRIBING VVR\n*              ..1. ....      CATALOG SELF DESCRIBING VVR\n*              ...1 ....      RESERVED\n*              .... 1...      COMPONENT TYPE 'D' DATA\n*              .... 0...      COMPONENT TYPE 'I' INDEX\n*              .... .111      RESERVED\nVVRKRQ   DS    XL4            KEY RANGE QUALIFIER\nVVRCMPNL DS    X              COMPONENT NAME LENGTH\nVVRCMPNM DS    X              1ST BYTE OF COMPONENT NAME\n*                             FOLLOWS COMPONENT NAME\nVVRKEYL  DS    X              KEY LENGTH            *** OFFSET INVALID\nVVRKEY   DS    X              KEY (CL NAME + PAD)   *** OFFSET INVALID\n*                             FOLLOWS KEY\nVVRCATNL DS    X              CATALOG NAME LENGTH   *** OFFSET INVALID\nVVRCATNM DS    X              CATALOG NAME          *** OFFSET INVALID\n*                             FOLLOWS CATALOG NAME\nVVRBSENL DS    X              ENTRY NAME LENGTH     *** OFFSET INVALID\nVVRBSENM DS    X              ENTRY NAME            *** OFFSET INVALID\n         EJECT\nDS21     DSECT                DATA SET INFORMATION CELL\nVVRDSLEN DS    XL2            DATA SET CELL LENGTH\nVVRDSTYP DS    X              X'21'\nVVRATTR1 DS    X              DATA SET ATTRIBUTES\n*              1... ....      SPEED\n*              .1.. ....      UNIQUE\n*              ..1. ....      REUSABLE\n*              ...1 ....      ERASE\n*              .... 1...      RESERVED\n*              .... .1..      INHIBIT UPDATE\n*              .... ..1.      TEMPORARY EXPORT\n*              .... ...1      TRACK OVERFLOW\nVVRATTR2 DS    X              SHARE ATTRIBUTES\n*              11.. ....      REGIONAL SHARING ATTRIBUTES\n*              ..11 ....      SYSTEM SHARING ATTRIBUTES\n*              .... 11..      RESERVED\n*              .... ..1.      INTERNAL SYSTEM DATA SET\n*              .... ...1      COMPONENT IS NOT USABLE\nVVROPIND DS    X              OPEN INIDCATOR\nVVRBUFSZ DS    XL4            BUFFER SIZE\nVVRPRISP DS    XL3            PRIMARY SPACE ALLOCATION\nVVRSECSP DS    XL3            SECONDARY SPACE ALLOCATION\nVVRSPCFG DS    X              SPACE FLAGS\n*              11.. ....      SPACE OPTIONS\n*              ..11 1111      RESERVED\nVVRDSHU  DS    XL4            DATA SET HIGH USED      RBA\nVVRDSHA  DS    XL4            DATA SET HIGH ALLOCATED RBA\nVVRLRECL DS    XL4            AVERAGE LOGICAL RECORD LENGTH\n         DS    XL2            RESERVED\nVVREXCPX DS    CL8            EXCEPTION EXIT NAME\nVVRDSHK  DS    XL4            DATA SET HIGH KEY RBA\nVVRCLSFG DS    X              CLUSTER ATTRIBUTE FLAG\n*              1111 ....      RESERVED\n*              .... 1...      TIMESTAMPS EXIST IN THIS CELL\n*              .... .1..      VERIFY IS REQUIRED\n*              .... ..1.      CLUSTER DESCRIBES SWAPSPACE\n*              .... ...1      CLUSTER DESCRIBES PAGESPACE\nVVRAIXFG DS    X              AIX ATTRIBUTE FLAG\n*              1... ....      UPGRADE AIX\n*               111 1111      RESERVED\nVVRTMSTP DS    XL8            TIMESTAMP (CAT ONLY)\nVVRALTSP DS    XL8            ALIAS TABLE TIMESTAMP\n         DS    XL24           RESERVED\n*        WARNING:  TIMESTAMPS AND RESERVED MAY BE TRUNCATED2\n*                  CHECK TIMESTAMP BIT IN VVRCLSFG\n         EJECT\nDS60     DSECT                AMSDB CELL\nVVRAMDCN DS    XL2            LENGTH OF ENTIRE AMSDB CELL\nVVRAMID  DS    X              X'60'\nVVRAMATR DS    X              ATTRIBUTES\n*              1... ....      KEY SEQUENCED\n*              0... ....      ENTRY SEQUENCED\n*              .1.. ....      WRITE CHECK\n*              ..1. ....      SEQUENCE SET WITH DATA (IMBED)\n*              ...1 ....      REPLICATE\n*              .... 1...      USE VOLUMES IN LIST ORDER\n*              .... .1..      KEY RANGE DATA SET\n*              .... ..1.      RELATIVE RECORD DATA SET\n*              .... ....      SPANNED RECORDS ALLOWED\nVVRAMLEN DS    XL2            LENGTH OF AMDSB (VVRAMDCN - 2)\nVVRAMNST DS    XL2            NUMBER OF ENTRIES IN INDEX SECTION\n         ORG   VVRAMNST\nVVRAMAKP DS    XL2            ALTERNATE KEY RKP\nVVRAMRKP DS    XL2            RELATIVE KEY POSITION\nVVRAMKLN DS    XL2            KEY LENGTH\nVVRAMPCA DS    X              % FREE CI IN CA\nVVRAMPCI DS    X              % FREE BYTES IN CI\nVVRAMCCA DS    XL2            NUMBER OF CI'S PER CA\nVVRAMFCA DS    XL2            FREE CI'S PER CA\nVVRAMFCI DS    XL4            FREE BYTES PER CI\nVVRAMCIV DS    XL4            CONTROL INTERVAL SIZE\nVVRAMLCL DS    XL4            MAXIMUM RECORD SIZE\nVVRAMHLR DS    XL4            RBA OF HIGH LEVEL INDEX RECORD\n         ORG   VVRAMHLR\nVVRAMSLT DS    XL4            RECORD SLOTS PER CI\nVVRAMSSR DS    XL4            RBA OF FIRST SEQUENCE SET RECORD\n         ORG   VVRAMSSR\nVVRAMMRR DS    XL4            MAX RELATIVE RECORD NUMBER\nVVRAMARD DS    XL4            POINTER TO FIRST ARDB\nVVRAMAT3 DS    X              ATTRIBUTES\n*              1... ....      NON-UNIQUE OR UNIQUE KEYS\n*              .1.. ....      CYL FAULT MSS OR STAGE\n*              ..1. ....      BIND OR DO NOT BIND ON MSS\n*              ...1 ....      WAIT OR DO NOT WAIT ON RELINQUISH\n*              .... 1...      LOAD MODE OR DATA SET LOADED\n*              .... .111      RESERVED\nVVRAMSNO DS    X              NUMBER OF CONCURRENT REQUESTS\nVVRAMDUI DS    XL4            IMS DRCC USAGE INDICATOR\nVVRAMBFI DS    XL2            NUMBER OF INDEX BUFFERS\n         ORG   VVRAMBFI\nVVRAMBFD DS    XL2            NUMBER OF DATA  BUFFERS\nVVRAMSTS DS    XL8            SYSTEM TIME STAMP\nVVRAMNIL DS    XL2            NUMBER OF INDEX LEVELS\nVVRAMNXT DS    XL2            NUMBER OF EXTENTS\nVVRAMNLR DS    XL4            NUMBER OF LOGICAL   RECORDS\nVVRAMDLR DS    XL4            NUMBER OF DELETED   RECORDS\nVVRAMINR DS    XL4            NUMBER OF INSERTED  RECORDS\nVVRAMUPR DS    XL4            NUMBER OF UPDATED   RECORDS\nVVRAMRTR DS    XL4            NUMBER OF RETRIEVED RECORDS\nVVRAMASP DS    XL4            BYTES OF FREE SPACE IN DATA SET\nVVRAMCIS DS    XL4            NUMBER OF CI SPLITS\nVVRAMCAS DS    XL4            NUMBER OV CA SPLITS\nVVRAMEXC DS    XL4            NUMBER OF EXCP'S\n         EJECT\nDS23     DSECT                VOLUME INFORMATION CELL\nVVRVOLLN DS    XL2            LENGTH OF VOLUME CELL\nVVRVOLTP DS    X              X'23'\nVVRVOLFG DS    X              VOLUME FLAGS\n*              1... ....      PRIME VOLUME\n*              .1.. ....      EXTENT INFO OUT OF SYNC (BY DEFRAG)\n*              ..1. ....      OVERFLOW VOLUME\n*              ...1 1111      RESERVED\nVVRNOEXT DS    X              NUMBER OF EXTENTS\nVVRHKRBA DS    XL4            HIGH KEY RBA\nVVRHURBA DS    XL4            HIGH USED RBA\nVVRHARBA DS    XL4            HIGH ALLOCATED RBA\nVVRBLKSZ DS    XL4            BLOCK SIZE\nVVRBLKTK DS    XL2            BLOCKS PER TRACK\nVVRTRKAU DS    XL2            TRACKS PER ALLOCATION UNIT\nVVRTPEXT DS    X              EXTENT TYPE FLAG\n*              1... ....      SEQUENCE SET WITH DATA\n*              .1.. ....      EXTENTS NOT PREFORMATTED\n*              ..1. ....      CONVERTED VSAM DATASET VOLUME\n*              ...1 1111      RESERVED\nVVRTKCYL DS    XL2            TRACKS PER CYLINDER\nVVRBYTTK DS    XL4            BYTES PER TRACK\nVVRBYTAU DS    XL4            BYTES PER ALLOCATION UNIT\nVVRLOKYL DS    XL2            LOW KEY LENGTH\nVVRLOKYV DS    X              LOW KEY\n*                             FOLLOWS LOW KEY\nVVRHIKYL DS    XL2            HIGH KEY LENGTH       *** OFFSET INVALID\nVVRHYKYV DS    X              HIGH KEY              *** OFFSET INVALID\n*                             FOLLOWS HIGH KEY\nVVRXTNTL DS    XL2            LENGTH OF EXTENT SECT *** OFFSET INVALID\n*                             VVRXTNTL/20 = NUMBER OF EXTENT ENTRIES\n*                             EXTENT ENTRIES IMMEDIATELY FOLLOW\n*                             THEY ARE MAPPED BY THE VVRX DSECT\n         EJECT\nVVRX     DSECT                EXTENT ENTRY\nVVRXSEQN DS    XL2            SEQUENCE NUMBER\nVVRXSC   DS    XL2            STARTING CC\nVVRXSH   DS    XL2            STARTING HH\nVVRXEC   DS    XL2            ENDING   CC\nVVRXEH   DS    XL2            ENDING HH\nVVRXNTRK DS    XL2            NUMBER OF TRACKS\nVVRXSRBA DS    XL4            STARTING RBA\nVVRXERBA DS    XL4            ENDING   RBA\n         EJECT\nVVCR     DSECT\nVVCRLEN  DS    XL2\nVVCNUMCI DS    XL2\nVVCRRSV  DS    XL20\nVVCATNMS DS    CL2016\nVVCCISPC DS    XL2048\n         EJECT\nVVCATENT DSECT\nVVCCATNM DS    CL44\nVVCDTRBA DS    XL4\nVVCIXRBA DS    XL4\nVVCSSRBA DS    XL4\nVVCATLN  EQU   *-VVCATENT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VVDSTES1": {"ttr": 11013, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\'\\x00\\x92\\x19\\x8f\\x01 \"/\\x15R\\x00\\x11\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1992-07-16T00:00:00", "modifydate": "2020-08-09T15:52:27", "lines": 17, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//*   VVDSLIST EXECUTION JCL\n//*\n//*   NOTE: MOST OF THE ERROR CONDITIONS RESULT IN AN\n//*         ABEND 1000.  LOOK AT JESYSMSG FOR THE WTO\n//*         WITH THE ERROR DESCRIPTION.\n//*\n//*   CASE WHERE THE VOLUME HAS NO VVDS\n//*\n//TEST EXEC PGM=VVDSLIST,REGION=0M\n//STEPLIB DD DSN=SYS1.W$$.LINKLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//*YSUDUMP DD SYSOUT=*\n//VVDS0001 DD DSN=SYS1.VVDS.VVPWRKD,DISP=SHR,\n// UNIT=SYSALLDA,VOL=SER=VPWRKD\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VVDSTES2": {"ttr": 11015, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00Y\\x00\\x92\\x19\\x8f\\x01 \"/\\x15Q\\x00\\x11\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1992-07-16T00:00:00", "modifydate": "2020-08-09T15:51:59", "lines": 17, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBM JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//*   VVDSLIST EXECUTION JCL\n//*\n//*   NOTE: MOST OF THE ERROR CONDITIONS RESULT IN AN\n//*         ABEND 1000.  LOOK AT JESYSMSG FOR THE WTO\n//*         WITH THE ERROR DESCRIPTION.\n//*\n//*   CASE WHERE THE VOLUME HAS A VVDS\n//*\n//TEST EXEC PGM=VVDSLIST,REGION=0M\n//STEPLIB DD DSN=SYS1.W$$.LINKLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSUDUMP DD SYSOUT=*\n//VVDS0001 DD DSN=SYS1.VVDS.VVIMVSB,DISP=SHR,\n// UNIT=SYSALLDA,VOL=SER=VIMVSB\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT097/FILE097.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT097", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}