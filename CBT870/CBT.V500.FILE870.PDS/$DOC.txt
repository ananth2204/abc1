Once you have executed the $INSTALL instructions, you should be able to
view several REXX scripts which are briefly discussed in the following:

These scripts are mainly used within a Z/OS USS (Unix System Services)
HTTP "cgi-bin" environment. I've only used these in the standard
default HTTP arena. I have never tried them within Websphere.

------------------------------------------------------------------------

GlobalEnvironmentVariables.txt

  An example of the file that ReadEnvironmentVariables.sh initally
  reads.

GlobalProcessTemplate.sh

  This script provides the ability for a 'cgi-bin' type script to
  process HTML, JCL, and email templates with "File Tailoring"
  functionality that is normally found in an ISPF environment. Such as
  )SEL and )ENDSEL capability and the like. A more detailed explantion
  can be found in document "Script Descriptions.docx" also
  located within this same directory.

  A variation of this script can be created, that can be used in
  batch scripts when you don't wish to execute a batch ISPF session
  just to do some file tailoring.

GetVariablesFromClient.sh

  The purpose of this script is to process the information that is
  sent from the user's browser, back to the script that is identified
  in the URL.  When a HTML issues either a "GET" or "POST" request,
  the URL might be the name of a script such as:

    http://00.000.00.00/cgi-bin/Script01.sh

  If this was a "POST" request, variables are returned to Script01.sh
  within a file.  Script01.sh must then retrieve those variables.
  It can easily to this by calling GetVariablesFromClient.sh. Once
  GetVariablesFromClient.sh has been called, all the variables that
  were in the URL request are now made into REXX variables of the
  same name.

  To call this script, it is best to to just interpret it:

    Interpret 'GetVariablesFromClient'()

  In just one instruction, all the variables that are sent from the
  browser are now REXX variables.

GlobalXaml01.sh
GlobalXaml02.sh

  These scripts provide the means to produce an animated barchart. XAML
  is the language of SilverLight (MicroSoft).  XAML is Microsoft's
  answer to SVG.  These scripts only produce XAML (which is a form of
  XML) which must then be processed by SilverLight.  You can find out
  more information about SilverLight at http://www.silverlight.net/.
  Your browser must have had the SilverLight plugin installed before you
  will be able to see an animated barchart function.

  Member $XAML is a Ms-Word document that describes a batch version of
  these scripts.  More documentation can be found within the scripts
  themselves.

  This process can get a little confussing but an animated barchart
  from the mainframe is really, really cool.

  You can learn more about XAML at: http://www.longhorncorner.com/6/34/

Script Descriptions.docx

  This is an Ms-Word document that describes the scripts that you
  should have restored with the PAX command. To view this document, you
  must make it available to your P/C operating system so that you can
  open it up with MS-Word.  A way of doing this is to FTP it (BIN not
  ASCII mode) to a drive to which you have access.

XAML Barchart.doc

  This is an Ms-Word document that describes a batch version of the
  two XAML scripts.  You'll have to read the comments of the scripts
  themselves to see how differently their process is. The batch version
  was designed to create a XAML text file, but the XAML scripts,that you
  just restored,are designed to be executed within a web environment.
  The inputs are pretty must the same, but are different in how they
  are presented to the script.
