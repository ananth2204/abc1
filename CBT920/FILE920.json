{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013445000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE920.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE920.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x0c'", "DS1TRBAL": "b' h'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\tB\\x00\\x0e\\tC\\x00\\x02\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x04Y\\x00\\x08\\x01\\x14'_\\x01\\x14'_\\x19H\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf9@@@\"", "ispf": {"version": "04.89", "flags": 0, "createdate": "2014-10-02T00:00:00", "modifydate": "2014-10-02T19:48:08", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-489"}, "text": "REGULAR CBT TAPE - VERSION 489    FILE:  920\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT489.FILE920\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 6 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,073 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   10/02/14    19:48:08    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$README": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x13\\x01\\x14%\\x9f\\x01\\x14&\\x1f\\x16I\\x00\\x0e\\x00\\t\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2014-09-16T00:00:00", "modifydate": "2014-09-18T16:49:13", "lines": 14, "newlines": 9, "modlines": 0, "user": "SBGOLOB"}, "text": "\nIn this pds is a REXX from John McKown and sample JCL to run it.\nPlease change it, as necessary, to run on your system.\n\nAs it is a REXX, it is therefore probably easier to modify, than\nthe original IDCMSGEN assembler program from File 360 which is\nmore of a pain to modify, because the parsing isn't as good.\n\nFor example, if and when you need to show DATACLASS and so forth,\nplease note the comments in the code, and uncomment them as needed.\n\nBest of everything.\nSam\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE920": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x04Y\\x00U\\x01\\x14'_\\x01\\x14'_\\x19G\\x00\\r\\x00\\r\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf9@@@\"", "ispf": {"version": "04.89", "flags": 0, "createdate": "2014-10-02T00:00:00", "modifydate": "2014-10-02T19:47:55", "lines": 13, "newlines": 13, "modlines": 0, "user": "CBT-489"}, "text": "//***FILE 920 is from John McKown, via Robert Cichetti, and         *   FILE 920\n//*           contains a REXX exec which generates IDCAMS DEFINE    *   FILE 920\n//*           statements from an existing VSAM file, which can      *   FILE 920\n//*           be used to re-define the file, using the same         *   FILE 920\n//*           characteristics.                                      *   FILE 920\n//*                                                                 *   FILE 920\n//*           Sample JCL to run the EXEC is included.               *   FILE 920\n//*                                                                 *   FILE 920\n//*           email:  john.archie.mckown@gmail.com                  *   FILE 920\n//*                                                                 *   FILE 920\n//*           email:  rcichett@us.ibm.com                           *   FILE 920\n//*                   dasdmanx@yahoo.com                            *   FILE 920\n//*                                                                 *   FILE 920\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DEFINES": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x13\\x01\\x14'_\\x01\\x14'_\\x18&\\x02\\x06\\x02\\x06\\x00\\x00\\xd5\\xc5\\xe6@@@@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2014-10-02T00:00:00", "modifydate": "2014-10-02T18:26:13", "lines": 518, "newlines": 518, "modlines": 0, "user": "NEW"}, "text": "/* REXX PROGRAM TO GENERATE IDCAMS DEFINE */\nTRACE E\nDEFINED = \"\"\nRESTARTS = 0\nDO FOREVER;\n   EXITCODE = @MAIN()\n   IF EXITCODE = 0 THEN LEAVE\n   RESTARTS = RESTARTS+1\n   IF RESTARTS > 3 THEN LEAVE\n   SAY '************ RESTART ***********'\n   ADDRESS ATTACH \"IDCAMS\"\n   IF RC <> 0 THEN LEAVE\nEND;\nEXIT EXITCODE\n@MAIN:PROCEDURE\nTYPE.1 = 'CLUSTER'\nTYPE.2 = 'PATH'\nTYPE.3 = 'AIX'\nBLANKS = COPIES(' ',80)\nDEFCL.= ''\nREF.0 = 0\nDEF.='*NO*'\nOFFSET6 = '$'\nDO FOREVER\n   \"EXECIO 1 DISKR IDCAMS\"\n   IF RC <> 0 THEN LEAVE\n   PARSE PULL RECORD\n   TEST = LEFT(RECORD,7)\n   IF TEST = '1IDCAMS' THEN ITERATE;\n   RECORD=SUBSTR(RECORD,2); /* STRIP OUT THE CARRIAGE */\n   OFFSET = VERIFY(RECORD,' '); /* FIND LOCATION OF 1ST NON-BLANK */\n   IF OFFSET = 0 THEN ITERATE; /* IGNORE BLANK LINE */\n   CALL @NODASH;\n   TOCALL = 'CALL @OFFSET'OFFSET\n   CALL @DOCALL\nEND;\nCALL @DUMPIT\n\"EXECIO 0 DISKR IDCAMS (FINIS\"\n\"EXECIO 0 DISKW DEFINES (FINIS\"\nEXITCODE = 0\nDO I = 1 TO REF.0\n   A = REF.I\n   IF DEF.A = '*YES*' THEN ITERATE\n   CARD = \" LISTC ENT('\"A\"') OUTFILE(IDCAMSO) ALL\"\n   PUSH CARD\n   \"EXECIO 1 DISKW SYSIN\"\n   SAY 'NOT FOUND \"'A'\"'\n   EXITCODE=8\nEND\nIF EXITCODE <> 0 THEN \"EXECIO 0 DISKW SYSIN(FINIS\"\nRETURN EXITCODE;\n@DOCALL:\n   SIGNAL ON SYNTAX\n   INTERPRET TOCALL\n   SIGNAL OFF SYNTAX\n   RETURN;\n@OFFSET1:\n@OFFSET4:\n   SIGNAL OFF SYNTAX\n  PARSE VAR RECORD VARNAME VARDATA\n  VARNAME = LEFT(VARNAME,LENGTH(VARNAME)-1)\n  TOCALL = 'CALL @'VARNAME\n  SIGNAL @DOCALL\n  RETURN;\n@CLUSTER:\n@AIX:\n@PATH:\n   SIGNAL OFF SYNTAX\n  CALL @DUMPIT;\n  DROP DEFCL.\n  DEFCL.=''\n  DEFCL.$TYPE = VARNAME\n  DEFCL.VARNAME = VARDATA\n  COMP = $COMP\n  OFFSET6 = '$'\n  RETURN;\n@DATA:\n@INDEX:\n   SIGNAL OFF SYNTAX\n  COMP = SPACE(VARNAME,0);\n  DEFCL.COMP = SPACE(VARDATA,0);\n  RETURN;\n@OFFSET6:\n   SIGNAL OFF SYNTAX\n  PARSE VAR RECORD FUNCTION REST\n  OFFSET6 = SPACE(FUNCTION,0)\n  RETURN;\n@OFFSET8:\n   SIGNAL OFF SYNTAX\n  DO WHILE LENGTH(RECORD) > 0\n     PARSE VAR RECORD VARNAME RECORD\n     VARNAME = SPACE(VARNAME,0)\n     IF RIGHT(VARNAME,1) = '^'\n     THEN DO;\n          PARSE VAR RECORD VALUE RECORD\n          VALUE = SPACE(VALUE,0)\n          VARNAME = LEFT(VARNAME,LENGTH(VARNAME)-1)\n          C = DEFCL.COMP.VARNAME VALUE\n          DEFCL.COMP.VARNAME = STRIP(C)\n          END;\n     ELSE DEFCL.COMP.$KEYWORD = DEFCL.COMP.$KEYWORD VARNAME' '\n  END;\n  RETURN;\n@NODASH:\n   SIGNAL OFF SYNTAX\n  TRECORD = RECORD\n  TEMP1 = ''\n  FDASH = POS('--',TRECORD)\n  DO WHILE FDASH <> 0\n     TEMP1 = TEMP1 LEFT(TRECORD,FDASH-1)\n     TEMP1 = STRIP(TEMP1,'T')'^ '\n     TRECORD = SUBSTR(TRECORD,FDASH)\n     FDASH = VERIFY(TRECORD,'-'); /* FIND NON-DASH */\n     IF FDASH =0 THEN ITERATE;\n     TRECORD = SUBSTR(TRECORD,FDASH)\n     FDASH = POS('--',TRECORD)\n  END;\n  TEMP1 = TEMP1 TRECORD\n  RECORD = SPACE(TEMP1,1)\nRETURN;\n@DUMP:\n   SIGNAL OFF SYNTAX\n  ARG NAME\n  VALUE = VALUE(NAME)\nRETURN;\n@DUMPIT:\n   SIGNAL OFF SYNTAX\n  CARD = ' '\n  CALL @OUTCARD\n  A=DEFCL.$TYPE\n  A=DEFCL.A\n  DEF.A = '*YES*'\n  DO I=1 TO 3\n     A = TYPE.I\n     B = STRIP(DEFCL.$COMP.A)\n     DO WHILE LENGTH(B) > 0\n        PARSE VAR B DATA B\n        B=STRIP(B)\n        I = REF.0+1\n        REF.0 = I\n        REF.I = DATA\n     END\n  END\n  TOCALL = 'CALL @1'DEFCL.$TYPE\n  SIGNAL @DOCALL\nRETURN;\n@1PATH:\n   SIGNAL OFF SYNTAX\n  PATH = 'PATH'\n  CARD = 'DEL 'DEFCL.PATH' PATH'\n  CALL @OUTCARD\n  CARD = 'DEF PATH(-'\n  CALL @OUTCARD\n  CARD = LEFT(BLANKS,6)'NAME('DEFCL.PATH') -'\n  CALL @OUTCARD\n  AIX='AIX'\n  CARD = LEFT(BLANKS,6)'PATHENTRY('DEFCL.$COMP.AIX') -'\n  CALL @OUTCARD\n  IF POS(' NOUPDATE ',DEFCL.$COMP.$KEYWORD) <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'NOUPDATE -'\n       CALL @OUTCARD\n       END\n  ELSE CARD = LEFT(BLANKS,4)')'\n  CALL @OUTCARD\nRETURN;\n@1CLUSTER:\n   SIGNAL OFF SYNTAX\n  IF DEFCL.DATA.VOLSER <> \" \" THEN ,\n  DEFCL.DATA.VOLSER=WORD(DEFCL.DATA.VOLSER,1) ||,\n                    COPIES(' *',WORDS(DEFCL.DATA.VOLSER)-1)\n  IF DEFCL.INDEX.VOLSER <> \" \" THEN ,\n  DEFCL.INDEX.VOLSER=WORD(DEFCL.INDEX.VOLSER,1) ||,\n                    COPIES(' *',WORDS(DEFCL.INDEX.VOLSER)-1)\n  CLUSTER = 'CLUSTER'\n  DATA = 'DATA'\n  INDEX = 'INDEX'\n  BUFSPACE='BUFSPACE'\n  VOLSER='VOLSER'\n  STORAGECLASS='STORAGECLASS'\n  MANAGEMENTCLASS='MANAGEMENTCLASS'\n  DATACLASS='DATACLASS'\n  DEFCL.DATA.$KEYWORD = DEFCL.DATA.$KEYWORD' '\n  DEFCL.INDEX.$KEYWORD = DEFCL.INDEX.$KEYWORD' '\n  CARD = 'DEL 'DEFCL.CLUSTER' CLUSTER'\n  CALL @OUTCARD\n  CARD = 'DEF CLUSTER( -'\n  CALL @OUTCARD\n  CARD = LEFT(BLANKS,6)'NAME('DEFCL.CLUSTER') -'\n  CALL @OUTCARD\n  IF DEFCL.$COMP.STORAGECLASS <> '' THEN DO\n     CARD = LEFT(BLANKS,6)'STORAGECLASS('DEFCL.$COMP.STORAGECLASS') -'\n     CALL @OUTCARD\n  END\n  IF DEFCL.$COMP.MANAGEMENTCLASS <> '' THEN DO\n     CARD = LEFT(BLANKS,6)'MANAGEMENTCLASS(' ||,\n            DEFCL.$COMP.MANAGEMENTCLASS') -'\n     CALL @OUTCARD\n  END\n  IF DEFCL.$COMP.DATACLASS <> '' THEN DO\n     CARD = LEFT(BLANKS,6)'DATACLASS('DEFCL.$COMP.DATACLASS') -'\n     CALL @OUTCARD\n  END\n  IF DEFCL.$COMP.LOG <> '(NULL)' THEN DO\n     CARD = LEFT(BLANKS,6)'LOG('DEFCL.$COMP.LOG') -'\n     CALL @OUTCARD\n  END\n  IF DEFCL.$COMP.LOGSTREAMID <> '(NULL)' THEN DO\n     CARD = LEFT(BLANKS,6)'LOGSTREAMID('DEFCL.$COMP.LOGSTREAMID') -'\n     CALL @OUTCARD\n  END\n  IF DEFCL.$COMP.FRLOG <> '(NULL)' THEN DO\n     CARD = LEFT(BLANKS,6)'FRLOG('DEFCL.$COMP.FRLOG') -'\n     CALL @OUTCARD\n  END\n  IF DEFCL.DATA.VOLSER = DEFCL.INDEX.VOLSER\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'VOLUMES('DEFCL.DATA.VOLSER') -'\n       CALL @OUTCARD\n       DEFCL.DATA.VOLSER = ''\n       DEFCL.INDEX.VOLSER = ''\n       END;\n  CARD = LEFT(BLANKS,6)'BUFFERSPACE('DEFCL.DATA.BUFSPACE') -'\n  CALL @OUTCARD\n  TEMP1 ='FREESPACE-%CI'\n  TEMP2 ='FREESPACE-%CA'\n  TEMP1 = SPACE(DEFCL.DATA.TEMP1,0)\n  TEMP2 = SPACE(DEFCL.DATA.TEMP2,0)\n  IF TEMP1 <> 0 | TEMP2 <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'FREESPACE('TEMP1 TEMP2') -'\n       CALL @OUTCARD;\n       END;\n  RKP = 'RKP'\n  KEYLEN = 'KEYLEN'\n  IF KEYLEN <> 0\n  THEN DO;\n       A = SPACE(DEFCL.DATA.KEYLEN,0)\n       B = SPACE(DEFCL.DATA.RKP,0)\n       CARD = LEFT(BLANKS,6)'KEYS('A B') -'\n       CALL @OUTCARD;\n       END;\n  MAXLRECL = 'MAXLRECL'\n  AVGLRECL = 'AVGLRECL'\n  A = SPACE(DEFCL.DATA.AVGLRECL,0)\n  B = SPACE(DEFCL.DATA.MAXLRECL,0)\n  CARD = LEFT(BLANKS,6)'RECORDSIZE('A B') -'\n  CALL @OUTCARD\n  PARSE VAR DEFCL.DATA.$KEYWORD . 'SHROPTNS(' SHRX ')' .\n  CARD = LEFT(BLANKS,6)'SHAREOPTIONS('SHRX') -'\n  CALL @OUTCARD\n  IF POS(' REPLICATE ',DEFCL.DATA.$KEYWORD) <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'/*REPLICATE */ -'\n       CALL @OUTCARD;\n       END;\n  IF POS(' IMBED ',DEFCL.DATA.$KEYWORD) <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'/*IMBED*/ -'\n       CALL @OUTCARD;\n       END;\n  IF POS(' NONINDEXED ',DEFCL.DATA.$KEYWORD) <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'NONINDEXED -'\n       CALL @OUTCARD;\n       END;\n  IF POS(' NUMBERED ',DEFCL.DATA.$KEYWORD) <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'NUMBERED -'\n       CALL @OUTCARD\n       END\n  IF POS(' ORDERED ',DEFCL.DATA.$KEYWORD) <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'ORDERED -'\n       CALL @OUTCARD\n       END\n  IF POS(' REUSE ',DEFCL.DATA.$KEYWORD) <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'REUSE -'\n       CALL @OUTCARD\n       END\n  IF POS(' SPANNED ',DEFCL.DATA.$KEYWORD) <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'SPANNED -'\n       CALL @OUTCARD\n       END\n  IF POS(' SPEED ',DEFCL.DATA.$KEYWORD) <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'SPEED -'\n       CALL @OUTCARD\n       END\n  IF POS(' WRITECHK ',DEFCL.DATA.$KEYWORD) <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'WRITECHECK -'\n       CALL @OUTCARD\n       END\n  CARD = LEFT(BLANKS,4)') -'\n  CALL @OUTCARD\n  CARD = LEFT(BLANKS,4)'DATA( -'\n  CALL @OUTCARD\n  CARD = LEFT(BLANKS,6)'NAME('DEFCL.DATA') -'\n  CALL @OUTCARD\n  IF DEFCL.DATA.VOLSER <> ''\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'VOLUMES('DEFCL.DATA.VOLSER') -'\n       CALL @OUTCARD\n       END;\n  CISIZE='CISIZE'\n  CARD = LEFT(BLANKS,6)'CONTROLINTERVALSIZE('DEFCL.DATA.CISIZE') -'\n  CALL @OUTCARD\n  SPRI='SPACE-PRI'\n  SSEC='SPACE-SEC'\n  STYPE='SPACE-TYPE'\n  A = SPACE(DEFCL.DATA.SPRI,0)\n  B = SPACE(DEFCL.DATA.SSEC,0)\n  C = SPACE(DEFCL.DATA.STYPE,0)\n  CARD = LEFT(BLANKS,6) || C'('A B') -'\n  CALL @OUTCARD\n  CARD = LEFT(BLANKS,4)')'\n  IF POS(' INDEXED ',DEFCL.DATA.$KEYWORD) <> 0\n  THEN CARD = CARD'-'\n  ELSE DO;\n       CALL @OUTCARD\n       RETURN;\n       END;\n  CALL @OUTCARD\n  CARD = LEFT(BLANKS,4)'INDEX( -'\n  CALL @OUTCARD\n  CARD = LEFT(BLANKS,6)'NAME('DEFCL.INDEX')-'\n  CALL @OUTCARD\n  IF DEFCL.INDEX.VOLSER <> ''\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'VOLUMES('DEFCL.INDEX.VOLSER') -'\n       CALL @OUTCARD\n       END;\n  CISIZE='CISIZE'\n  CARD = LEFT(BLANKS,6)'CONTROLINTERVALSIZE('DEFCL.INDEX.CISIZE') -'\n  CALL @OUTCARD\n  SPRI='SPACE-PRI'\n  SSEC='SPACE-SEC'\n  STYPE='SPACE-TYPE'\n  A = SPACE(DEFCL.INDEX.SPRI,0)\n  B = SPACE(DEFCL.INDEX.SSEC,0)\n  C = SPACE(DEFCL.INDEX.STYPE,0)\n  CARD = LEFT(BLANKS,6) || C'('A B') -'\n  CALL @OUTCARD\n  CARD = LEFT(BLANKS,4)')'\n  CALL @OUTCARD\nRETURN;\n@1AIX:\n   SIGNAL OFF SYNTAX\n  IF DEFCL.DATA.VOLSER <> \" \" THEN ,\n  DEFCL.DATA.VOLSER=WORD(DEFCL.DATA.VOLSER,1) ||,\n                    COPIES(' *',WORDS(DEFCL.DATA.VOLSER)-1)\n  IF DEFCL.INDEX.VOLSER <> \" \" THEN ,\n  DEFCL.INDEX.VOLSER=WORD(DEFCL.INDEX.VOLSER,1) ||,\n                    COPIES(' *',WORDS(DEFCL.INDEX.VOLSER)-1)\n  CLUSTER = 'CLUSTER'\n  AIX = 'AIX'\n  DATA = 'DATA'\n  INDEX = 'INDEX'\n  BUFSPACE='BUFSPACE'\n  VOLSER='VOLSER'\n  DEFCL.DATA.$KEYWORD = DEFCL.DATA.$KEYWORD' '\n  DEFCL.INDEX.$KEYWORD = DEFCL.INDEX.$KEYWORD' '\n  CARD = 'DEL 'DEFCL.AIX' AIX'\n  CALL @OUTCARD\n  CARD = 'DEF ALTERNATEINDEX (-'\n  CALL @OUTCARD\n  CARD = LEFT(BLANKS,6)'NAME('DEFCL.AIX') -'\n  CALL @OUTCARD\n  SIGNAL ON NOVALUE\n  CARD = LEFT(BLANKS,6)'RELATE('DEFCL.$COMP.CLUSTER') -'\n  SIGNAL OFF NOVALUE\n  CALL @OUTCARD\n  IF DEFCL.DATA.VOLSER = DEFCL.INDEX.VOLSER\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'VOLUMES('DEFCL.DATA.VOLSER') -'\n       CALL @OUTCARD\n       DEFCL.DATA.VOLSER = ''\n       DEFCL.INDEX.VOLSER = ''\n       END;\n  CARD = LEFT(BLANKS,6)'BUFFERSPACE('DEFCL.DATA.BUFSPACE') -'\n  CALL @OUTCARD\n  TEMP1 ='FREESPACE-%CI'\n  TEMP2 ='FREESPACE-%CA'\n  TEMP1 = DEFCL.DATA.TEMP1; TEMP2 = DEFCL.DATA.TEMP2\n  IF TEMP1 <> 0 | TEMP2 <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'FREESPACE('TEMP1 TEMP2') -'\n       CALL @OUTCARD;\n       END;\n  AXRKP = 'AXRKP'\n  KEYLEN = 'KEYLEN'\n  IF KEYLEN <> 0\n  THEN DO;\n       A = SPACE(DEFCL.DATA.KEYLEN,0)\n       B = SPACE(DEFCL.DATA.AXRKP,0)\n       CARD = LEFT(BLANKS,6)'KEYS('A B') -'\n       CALL @OUTCARD;\n       END;\n  MAXLRECL = 'MAXLRECL'\n  AVGLRECL = 'AVGLRECL'\n  A = SPACE(DEFCL.DATA.AVGLRECL,0)\n  B = SPACE(DEFCL.DATA.MAXLRECL,0)\n  CARD = LEFT(BLANKS,6)'RECORDSIZE('A B') -'\n  CALL @OUTCARD\n  IF POS(' ERASE ',DEFCL.DATA.$KEYWORD) <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'ERASE -'\n       CALL @OUTCARD;\n       END;\n  IF POS(' IMBED ',DEFCL.DATA.$KEYWORD) <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'/*IMBED*/ -'\n       CALL @OUTCARD;\n       END;\n  IF POS(' ORDERED ',DEFCL.DATA.$KEYWORD) <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'ORDERED -'\n       CALL @OUTCARD\n       END\n  IF POS(' REPLICATE ',DEFCL.DATA.$KEYWORD) <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'/*REPLICATE*/ -'\n       CALL @OUTCARD\n       END\n  IF POS(' REUSE ',DEFCL.DATA.$KEYWORD) <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'REUSE -'\n       CALL @OUTCARD\n       END\n  IF POS(' SPEED ',DEFCL.DATA.$KEYWORD) <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'SPEED -'\n       CALL @OUTCARD\n       END\n  IF POS(' UNIQUEKEY ',DEFCL.DATA.$KEYWORD) <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'UNIQUEKEY -'\n       CALL @OUTCARD\n       END\n  IF POS(' NOUPGRADE ',DEFCL.DATA.$KEYWORD) <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'NOUPGRADE -'\n       CALL @OUTCARD\n       END\n  IF POS(' WRITECHK ',DEFCL.DATA.$KEYWORD) <> 0\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'WRITECHECK -'\n       CALL @OUTCARD\n       END\n  CARD = LEFT(BLANKS,4)') -'\n  CALL @OUTCARD\n  CARD = LEFT(BLANKS,4)'DATA( -'\n  CALL @OUTCARD\n  CARD = LEFT(BLANKS,6)'NAME('DEFCL.DATA') -'\n  CALL @OUTCARD\n  IF DEFCL.DATA.VOLSER <> ''\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'VOLUMES('DEFCL.DATA.VOLSER') -'\n       CALL @OUTCARD\n       END;\n  CISIZE='CISIZE'\n  CARD = LEFT(BLANKS,6)'CONTROLINTERVALSIZE('DEFCL.DATA.CISIZE') -'\n  CALL @OUTCARD\n  SPRI='SPACE-PRI'\n  SSEC='SPACE-SEC'\n  STYPE='SPACE-TYPE'\n  A = SPACE(DEFCL.DATA.SPRI,0)\n  B = SPACE(DEFCL.DATA.SSEC,0)\n  C = SPACE(DEFCL.DATA.STYPE,0)\n  CARD = LEFT(BLANKS,6) || C'('A B') -'\n  CALL @OUTCARD\n  CARD = LEFT(BLANKS,4)') -'\n  CALL @OUTCARD\n  CARD = LEFT(BLANKS,4)'INDEX( -'\n  CALL @OUTCARD\n  CARD = LEFT(BLANKS,6)'NAME('DEFCL.INDEX')-'\n  CALL @OUTCARD\n  IF DEFCL.INDEX.VOLSER <> ''\n  THEN DO;\n       CARD = LEFT(BLANKS,6)'VOLUMES('DEFCL.INDEX.VOLSER') -'\n       CALL @OUTCARD\n       END;\n  CISIZE='CISIZE'\n  CARD = LEFT(BLANKS,6)'CONTROLINTERVALSIZE('DEFCL.INDEX.CISIZE') -'\n  CALL @OUTCARD\n  SPRI='SPACE-PRI'\n  SSEC='SPACE-SEC'\n  STYPE='SPACE-TYPE'\n  A = SPACE(DEFCL.INDEX.SPRI,0)\n  B = SPACE(DEFCL.INDEX.SSEC,0)\n  C = SPACE(DEFCL.INDEX.STYPE,0)\n  CARD = LEFT(BLANKS,6) || C'('A B') -'\n  CALL @OUTCARD\n  CARD = LEFT(BLANKS,4)')'\n  CALL @OUTCARD\nRETURN;\n@OUTCARD:\n  SIGNAL OFF SYNTAX\n  DO WHILE LENGTH(CARD) > 72\n     BREAKAT=LASTPOS(' ',CARD,70)\n     IF 0 = BREAKAT THEN EXIT 20\n     QUEUE STRIP(LEFT(CARD,BREAKAT),'T')||\" -\"\n     CARD=\"      \" || STRIP(SUBSTR(CARD,BREAKAT),'L')\n  END\n  QUEUE CARD\n  QUEUE ''\n  \"EXECIO * DISKW DEFINES\"\nRETURN;\nNOVALUE:\n  SAY SIGL\n  SAY SOURCELINE(SIGL)\n  SAY ERRORTEXT(RC)\n  EXIT\nSYNTAX:\n  RETURN;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DEFINESO": {"ttr": 770, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00\\x14\\x01\\x14&\\x1f\\x01\\x14&\\x1f\\x13\\x16\\x01\\xf0\\x01\\xee\\x00\\x00\\xd6\\xd3\\xc4@@@@@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "2014-09-18T00:00:00", "modifydate": "2014-09-18T13:16:14", "lines": 496, "newlines": 494, "modlines": 0, "user": "OLD"}, "text": "/* REXX PROGRAM TO GENERATE IDCAMS DEFINE */\nTRACE E\nDEFINED = \"\"\nRESTARTS = 0\nDO FOREVER;\nEXITCODE = @MAIN()\nIF EXITCODE = 0 THEN LEAVE\nRESTARTS = RESTARTS+1\nIF RESTARTS > 3 THEN LEAVE\nSAY '************ RESTART ***********'\nADDRESS ATTACH \"IDCAMS\"\nIF RC <> 0 THEN LEAVE\nEND;\nEXIT EXITCODE\n@MAIN:PROCEDURE\nTYPE.1 = 'CLUSTER'\nTYPE.2 = 'PATH'\nTYPE.3 = 'AIX'\nBLANKS = COPIES(' ',80)\nDEFCL.= ''\nREF.0 = 0\nDEF.='*NO*'\nOFFSET6 = '$'\nDO FOREVER\n\"EXECIO 1 DISKR IDCAMS\"\nIF RC <> 0 THEN LEAVE\nPARSE PULL RECORD\nTEST = LEFT(RECORD,7)\nIF TEST = '1IDCAMS' THEN ITERATE;\nRECORD=SUBSTR(RECORD,2); /* STRIP OUT THE CARRIAGE */\nOFFSET = VERIFY(RECORD,' '); /* FIND LOCATION OF 1ST NON-BLANK */\nIF OFFSET = 0 THEN ITERATE; /* IGNORE BLANK LINE */\nCALL @NODASH;\nTOCALL = 'CALL @OFFSET'OFFSET\nCALL @DOCALL\nEND;\nCALL @DUMPIT\n\"EXECIO 0 DISKR IDCAMS (FINIS\"\n\"EXECIO 0 DISKW DEFINES (FINIS\"\nEXITCODE = 0\nDO I = 1 TO REF.0\nA = REF.I\nIF DEF.A = '*YES*' THEN ITERATE\nCARD = \" LISTC ENT('\"A\"') OUTFILE(IDCAMSO) ALL\"\nPUSH CARD\n\"EXECIO 1 DISKW SYSIN\"\nSAY 'NOT FOUND \"'A'\"'\nEXITCODE=8\nEND\nIF EXITCODE <> 0 THEN \"EXECIO 0 DISKW SYSIN(FINIS\"\nRETURN EXITCODE;\n@DOCALL:\nSIGNAL ON SYNTAX\nINTERPRET TOCALL\nSIGNAL OFF SYNTAX\nRETURN;\n@OFFSET1:\n@OFFSET4:\nSIGNAL OFF SYNTAX\nPARSE VAR RECORD VARNAME VARDATA\nVARNAME = LEFT(VARNAME,LENGTH(VARNAME)-1)\nTOCALL = 'CALL @'VARNAME\nSIGNAL @DOCALL\nRETURN;\n@CLUSTER:\n@AIX:\n@PATH:\nSIGNAL OFF SYNTAX\nCALL @DUMPIT;\nDROP DEFCL.\nDEFCL.=''\nDEFCL.$TYPE = VARNAME\nDEFCL.VARNAME = VARDATA\nCOMP = $COMP\nOFFSET6 = '$'\nRETURN;\n@DATA:\n@INDEX:\nSIGNAL OFF SYNTAX\nCOMP = SPACE(VARNAME,0);\nDEFCL.COMP = SPACE(VARDATA,0);\nRETURN;\n@OFFSET6:\nSIGNAL OFF SYNTAX\nPARSE VAR RECORD FUNCTION REST\nOFFSET6 = SPACE(FUNCTION,0)\nRETURN;\n@OFFSET8:\nSIGNAL OFF SYNTAX\nDO WHILE LENGTH(RECORD) > 0\nPARSE VAR RECORD VARNAME RECORD\nVARNAME = SPACE(VARNAME,0)\nIF RIGHT(VARNAME,1) = '^'\nTHEN DO;\nPARSE VAR RECORD VALUE RECORD\nVALUE = SPACE(VALUE,0)\nVARNAME = LEFT(VARNAME,LENGTH(VARNAME)-1)\nC = DEFCL.COMP.VARNAME VALUE\nDEFCL.COMP.VARNAME = STRIP(C)\nEND;\nELSE DEFCL.COMP.$KEYWORD = DEFCL.COMP.$KEYWORD VARNAME' '\nEND;\nRETURN;\n@NODASH:\nSIGNAL OFF SYNTAX\nTRECORD = RECORD\nTEMP1 = ''\nFDASH = POS('--',TRECORD)\nDO WHILE FDASH <> 0\nTEMP1 = TEMP1 LEFT(TRECORD,FDASH-1)\nTEMP1 = STRIP(TEMP1,'T')'^ '\nTRECORD = SUBSTR(TRECORD,FDASH)\nFDASH = VERIFY(TRECORD,'-'); /* FIND NON-DASH */\nIF FDASH =0 THEN ITERATE;\nTRECORD = SUBSTR(TRECORD,FDASH)\nFDASH = POS('--',TRECORD)\nEND;\nTEMP1 = TEMP1 TRECORD\nRECORD = SPACE(TEMP1,1)\nRETURN;\n@DUMP:\nSIGNAL OFF SYNTAX\nARG NAME\nVALUE = VALUE(NAME)\nRETURN;\n@DUMPIT:\nSIGNAL OFF SYNTAX\nCARD = ' '\nCALL @OUTCARD\nA=DEFCL.$TYPE\nA=DEFCL.A\nDEF.A = '*YES*'\nDO I=1 TO 3\nA = TYPE.I\nB = STRIP(DEFCL.$COMP.A)\nDO WHILE LENGTH(B) > 0\nPARSE VAR B DATA B\nB=STRIP(B)\nI = REF.0+1\nREF.0 = I\nREF.I = DATA\nEND\nEND\nTOCALL = 'CALL @1'DEFCL.$TYPE\nSIGNAL @DOCALL\nRETURN;\n@1PATH:\nSIGNAL OFF SYNTAX\nPATH = 'PATH'\nCALL @OUTCARD\nCARD = 'DEF PATH(-'\nCALL @OUTCARD\nCARD = LEFT(BLANKS,6)'NAME('DEFCL.PATH') -'\nCALL @OUTCARD\nAIX='AIX'\nCARD = LEFT(BLANKS,6)'PATHENTRY('DEFCL.$COMP.AIX') -'\nCALL @OUTCARD\nIF POS(' NOUPDATE ',DEFCL.$COMP.$KEYWORD) <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'NOUPDATE -'\nCALL @OUTCARD\nEND\nELSE CARD = LEFT(BLANKS,4)')'\nCALL @OUTCARD\nRETURN;\n@1CLUSTER:\nSIGNAL OFF SYNTAX\nCLUSTER = 'CLUSTER'\nDATA = 'DATA'\nINDEX = 'INDEX'\nBUFSPACE='BUFSPACE'\nVOLSER='VOLSER'\nSTORAGECLASS='STORAGECLASS'\nMANAGEMENTCLASS='MANAGEMENTCLASS'\nDATACLASS='DATACLASS'\nLOG='LOG'\nLOGSTREAMID = 'LOGSTREAMID'\nDEFCL.DATA.$KEYWORD = DEFCL.DATA.$KEYWORD' '\nDEFCL.INDEX.$KEYWORD = DEFCL.INDEX.$KEYWORD' '\nCALL @OUTCARD\nCARD = 'DEF CLUSTER( -'\nCALL @OUTCARD\nCARD = LEFT(BLANKS,6)'NAME('DEFCL.CLUSTER') -'\nCALL @OUTCARD\nIF DEFCL.$COMP.STORAGECLASS <> '' THEN DO\nCARD = LEFT(BLANKS,6)'STORAGECLASS('DEFCL.$COMP.STORAGECLASS') -'\nCALL @OUTCARD\nEND\n/*  IF DEFCL.$COMP.MANAGEMENTCLASS <> '' THEN DO  */\n/*  CARD = LEFT(BLANKS,6)'MANAGEMENTCLASS(' ||,   */\n/*  DEFCL.$COMP.MANAGEMENTCLASS') -'   */\n/*  CALL @OUTCARD   */\n/*  END   */\n/*  IF DEFCL.$COMP.DATACLASS <> '' THEN DO   */\n/*  CARD = LEFT(BLANKS,6)'DATACLASS('DEFCL.$COMP.DATACLASS') -'  */\n/*  CALL @OUTCARD   */\n/*  END   */\nDEF.DATA.VOLSER=WORD(DEF.DATA.VOLSER,1) COPIES(\"*\",WORDS(DEF.DATA.VOLSER) -1)\nDEF.INDEX.VOLSER=WORD(DEF.INDEX.VOLSER,1) COPIES(\"*\",WORDS(DEF.INDEX.VOLSER)-1)\nIF DEFCL.$COMP.LOG <> '' THEN DO\nCARD = LEFT(BLANKS,6)'LOG('DEFCL.$COMP.LOG') -'\nCALL @OUTCARD\nEND\nIF DEFCL.$COMP.LOGSTREAMID <> '' THEN DO\nCARD = LEFT(BLANKS,6)'LOGSTREAMID('DEFCL.$COMP.LOGSTREAMID') -'\nCALL @OUTCARD\nEND\nIF DEFCL.DATA.VOLSER = DEFCL.INDEX.VOLSER\nTHEN DO;\nCARD = LEFT(BLANKS,6)'VOLUMES('DEFCL.DATA.VOLSER') -'\nCALL @OUTCARD\nDEFCL.DATA.VOLSER = ''\nDEFCL.INDEX.VOLSER = ''\nEND;\n/* CARD = LEFT(BLANKS,6)'BUFFERSPACE('DEFCL.DATA.BUFSPACE') -' */\n/* CALL @OUTCARD  */\nTEMP1 ='FREESPACE-%CI'\nTEMP2 ='FREESPACE-%CA'\nTEMP1 = SPACE(DEFCL.DATA.TEMP1,0)\nTEMP2 = SPACE(DEFCL.DATA.TEMP2,0)\nIF TEMP1 <> 0 | TEMP2 <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'FREESPACE('TEMP1 TEMP2') -'\nCALL @OUTCARD;\nEND;\nRKP = 'RKP'\nKEYLEN = 'KEYLEN'\nIF KEYLEN <> 0\nTHEN DO;\nA = SPACE(DEFCL.DATA.KEYLEN,0)\nB = SPACE(DEFCL.DATA.RKP,0)\nCARD = LEFT(BLANKS,6)'KEYS('A B') -'\nCALL @OUTCARD;\nEND;\nMAXLRECL = 'MAXLRECL'\nAVGLRECL = 'AVGLRECL'\nA = SPACE(DEFCL.DATA.AVGLRECL,0)\nB = SPACE(DEFCL.DATA.MAXLRECL,0)\nCARD = LEFT(BLANKS,6)'RECORDSIZE('A B') -'\nCALL @OUTCARD\nPARSE VAR DEFCL.DATA.$KEYWORD . 'SHROPTNS(' SHRX ')' .\nCARD = LEFT(BLANKS,6)'SHAREOPTIONS('SHRX') -'\nCALL @OUTCARD\nIF POS(' REPLICATE ',DEFCL.DATA.$KEYWORD) <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'/*REPLICATE */ -'\nCALL @OUTCARD;\nEND;\nIF POS(' IMBED ',DEFCL.DATA.$KEYWORD) <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'/*IMBED*/ -'\nCALL @OUTCARD;\nEND;\nIF POS(' NONINDEXED ',DEFCL.DATA.$KEYWORD) <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'NONINDEXED -'\nCALL @OUTCARD;\nEND;\nIF POS(' NUMBERED ',DEFCL.DATA.$KEYWORD) <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'NUMBERED -'\nCALL @OUTCARD\nEND\nIF POS(' ORDERED ',DEFCL.DATA.$KEYWORD) <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'ORDERED -'\nCALL @OUTCARD\nEND\nIF POS(' REUSE ',DEFCL.DATA.$KEYWORD) <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'REUSE -'\nCALL @OUTCARD\nEND\nIF POS(' SPANNED ',DEFCL.DATA.$KEYWORD) <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'SPANNED -'\nCALL @OUTCARD\nEND\nIF POS(' SPEED ',DEFCL.DATA.$KEYWORD) <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'SPEED -'\nCALL @OUTCARD\nEND\nIF POS(' WRITECHK ',DEFCL.DATA.$KEYWORD) <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'WRITECHECK -'\nCALL @OUTCARD\nEND\nCARD = LEFT(BLANKS,4)') -'\nCALL @OUTCARD\nCARD = LEFT(BLANKS,4)'DATA( -'\nCALL @OUTCARD\nCARD = LEFT(BLANKS,6)'NAME('DEFCL.DATA') -'\nCALL @OUTCARD\nIF DEFCL.DATA.VOLSER <> ''\nTHEN DO;\nCARD = LEFT(BLANKS,6)'VOLUMES('DEFCL.DATA.VOLSER') -'\nCALL @OUTCARD\nEND;\nCISIZE='CISIZE'\nCARD = LEFT(BLANKS,6)'CONTROLINTERVALSIZE('DEFCL.DATA.CISIZE') -'\nCALL @OUTCARD\nSPRI='SPACE-PRI'\nSSEC='SPACE-SEC'\nSTYPE='SPACE-TYPE'\nA = SPACE(DEFCL.DATA.SPRI,0)\nB = SPACE(DEFCL.DATA.SSEC,0)\nC = SPACE(DEFCL.DATA.STYPE,0)\nCARD = LEFT(BLANKS,6) || C'('A B') -'\nCALL @OUTCARD\nCARD = LEFT(BLANKS,4)')'\nIF POS(' INDEXED ',DEFCL.DATA.$KEYWORD) <> 0\nTHEN CARD = CARD'-'\nELSE DO;\nCALL @OUTCARD\nRETURN;\nEND;\nCALL @OUTCARD\nCARD = LEFT(BLANKS,4)'INDEX( -'\nCALL @OUTCARD\nCARD = LEFT(BLANKS,6)'NAME('DEFCL.INDEX')-'\nCALL @OUTCARD\nIF DEFCL.INDEX.VOLSER <> ''\nTHEN DO;\nCARD = LEFT(BLANKS,6)'VOLUMES('DEFCL.INDEX.VOLSER') -'\nCALL @OUTCARD\nEND;\nCISIZE='CISIZE'\nCARD = LEFT(BLANKS,6)'CONTROLINTERVALSIZE('DEFCL.INDEX.CISIZE') -'\nCALL @OUTCARD\nSPRI='SPACE-PRI'\nSSEC='SPACE-SEC'\nSTYPE='SPACE-TYPE'\nA = SPACE(DEFCL.INDEX.SPRI,0)\nB = SPACE(DEFCL.INDEX.SSEC,0)\nC = SPACE(DEFCL.INDEX.STYPE,0)\nCARD = LEFT(BLANKS,6) || C'('A B') -'\nCALL @OUTCARD\nCARD = LEFT(BLANKS,4)')'\nCALL @OUTCARD\nRETURN;\n@1AIX:\nSIGNAL OFF SYNTAX\nCLUSTER = 'CLUSTER'\nAIX = 'AIX'\nDATA = 'DATA'\nINDEX = 'INDEX'\nBUFSPACE='BUFSPACE'\nVOLSER='VOLSER'\nDEFCL.DATA.$KEYWORD = DEFCL.DATA.$KEYWORD' '\nDEFCL.INDEX.$KEYWORD = DEFCL.INDEX.$KEYWORD' '\nCALL @OUTCARD\nCARD = 'DEF ALTERNATEINDEX (-'\nCALL @OUTCARD\nCARD = LEFT(BLANKS,6)'NAME('DEFCL.AIX') -'\nCALL @OUTCARD\nSIGNAL ON NOVALUE\nCARD = LEFT(BLANKS,6)'RELATE('DEFCL.$COMP.CLUSTER') -'\nSIGNAL OFF NOVALUE\nCALL @OUTCARD\nIF DEFCL.DATA.VOLSER = DEFCL.INDEX.VOLSER\nTHEN DO;\nCARD = LEFT(BLANKS,6)'VOLUMES('DEFCL.DATA.VOLSER') -'\nCALL @OUTCARD\nDEFCL.DATA.VOLSER = ''\nDEFCL.INDEX.VOLSER = ''\nEND;\nCARD = LEFT(BLANKS,6)'BUFFERSPACE('DEFCL.DATA.BUFSPACE') -'\nCALL @OUTCARD\nTEMP1 ='FREESPACE-%CI'\nTEMP2 ='FREESPACE-%CA'\nTEMP1 = DEFCL.DATA.TEMP1; TEMP2 = DEFCL.DATA.TEMP2\nIF TEMP1 <> 0 | TEMP2 <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'FREESPACE('TEMP1 TEMP2') -'\nCALL @OUTCARD;\nEND;\nAXRKP = 'AXRKP'\nKEYLEN = 'KEYLEN'\nIF KEYLEN <> 0\nTHEN DO;\nA = SPACE(DEFCL.DATA.KEYLEN,0)\nB = SPACE(DEFCL.DATA.AXRKP,0)\nCARD = LEFT(BLANKS,6)'KEYS('A B') -'\nCALL @OUTCARD;\nEND;\nMAXLRECL = 'MAXLRECL'\nAVGLRECL = 'AVGLRECL'\nA = SPACE(DEFCL.DATA.AVGLRECL,0)\nB = SPACE(DEFCL.DATA.MAXLRECL,0)\nCARD = LEFT(BLANKS,6)'RECORDSIZE('A B') -'\nCALL @OUTCARD\nIF POS(' ERASE ',DEFCL.DATA.$KEYWORD) <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'ERASE -'\nCALL @OUTCARD;\nEND;\nIF POS(' IMBED ',DEFCL.DATA.$KEYWORD) <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'/*IMBED*/ -'\nCALL @OUTCARD;\nEND;\nIF POS(' ORDERED ',DEFCL.DATA.$KEYWORD) <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'ORDERED -'\nCALL @OUTCARD\nEND\nIF POS(' REPLICATE ',DEFCL.DATA.$KEYWORD) <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'/*REPLICATE*/ -'\nCALL @OUTCARD\nEND\nIF POS(' REUSE ',DEFCL.DATA.$KEYWORD) <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'REUSE -'\nCALL @OUTCARD\nEND\nIF POS(' SPEED ',DEFCL.DATA.$KEYWORD) <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'SPEED -'\nCALL @OUTCARD\nEND\nIF POS(' UNIQUEKEY ',DEFCL.DATA.$KEYWORD) <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'UNIQUEKEY -'\nCALL @OUTCARD\nEND\nIF POS(' NOUPGRADE ',DEFCL.DATA.$KEYWORD) <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'NOUPGRADE -'\nCALL @OUTCARD\nEND\nIF POS(' WRITECHK ',DEFCL.DATA.$KEYWORD) <> 0\nTHEN DO;\nCARD = LEFT(BLANKS,6)'WRITECHECK -'\nCALL @OUTCARD\nEND\nCARD = LEFT(BLANKS,4)') -'\nCALL @OUTCARD\nCARD = LEFT(BLANKS,4)'DATA( -'\nCALL @OUTCARD\nCARD = LEFT(BLANKS,6)'NAME('DEFCL.DATA') -'\nCALL @OUTCARD\nIF DEFCL.DATA.VOLSER <> ''\nTHEN DO;\nCARD = LEFT(BLANKS,6)'VOLUMES('DEFCL.DATA.VOLSER') -'\nCALL @OUTCARD\nEND;\nCISIZE='CISIZE'\nCARD = LEFT(BLANKS,6)'CONTROLINTERVALSIZE('DEFCL.DATA.CISIZE') -'\nCALL @OUTCARD\nSPRI='SPACE-PRI'\nSSEC='SPACE-SEC'\nSTYPE='SPACE-TYPE'\nA = SPACE(DEFCL.DATA.SPRI,0)\nB = SPACE(DEFCL.DATA.SSEC,0)\nC = SPACE(DEFCL.DATA.STYPE,0)\nCARD = LEFT(BLANKS,6) || C'('A B') -'\nCALL @OUTCARD\nCARD = LEFT(BLANKS,4)') -'\nCALL @OUTCARD\nCARD = LEFT(BLANKS,4)'INDEX( -'\nCALL @OUTCARD\nCARD = LEFT(BLANKS,6)'NAME('DEFCL.INDEX')-'\nCALL @OUTCARD\nIF DEFCL.INDEX.VOLSER <> ''\nTHEN DO;\nCARD = LEFT(BLANKS,6)'VOLUMES('DEFCL.INDEX.VOLSER') -'\nCALL @OUTCARD\nEND;\nCISIZE='CISIZE'\nCARD = LEFT(BLANKS,6)'CONTROLINTERVALSIZE('DEFCL.INDEX.CISIZE') -'\nCALL @OUTCARD\nSPRI='SPACE-PRI'\nSSEC='SPACE-SEC'\nSTYPE='SPACE-TYPE'\nA = SPACE(DEFCL.INDEX.SPRI,0)\nB = SPACE(DEFCL.INDEX.SSEC,0)\nC = SPACE(DEFCL.INDEX.STYPE,0)\nCARD = LEFT(BLANKS,6) || C'('A B') -'\nCALL @OUTCARD\nCARD = LEFT(BLANKS,4)')'\nCALL @OUTCARD\nRETURN;\n@OUTCARD:\nSIGNAL OFF SYNTAX\nPUSH CARD\n\"EXECIO 1 DISKW DEFINES\"\nRETURN;\nNOVALUE:\nSAY SIGL\nSAY SOURCELINE(SIGL)\nSAY ERRORTEXT(RC)\nEXIT\nSYNTAX:\nRETURN;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DEFINE01": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x17\\x01\\x14%\\x9f\\x01\\x14&\\x1f\\x16P\\x00\\x14\\x00\\x11\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2014-09-16T00:00:00", "modifydate": "2014-09-18T16:50:17", "lines": 20, "newlines": 17, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBA  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//LISTC EXEC PGM=IDCAMS\n//SYSPRINT DD DSN=&&SYSPRINT,UNIT=SYSALLDA,\n// DISP=(NEW,PASS),SPACE=(TRK,(5,1))\n//*\n//SYSIN DD *\n LISTC ENT('CHSY227.ARCH.VSAM') ALL\n/*\n//*\n//TMP EXEC PGM=IKJEFT01,\n// PARM='%DEFINES'\n//SYSPROC  DD DISP=SHR,DSN=SBGOLOB.CBT489.FILE920\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN  DD DUMMY\n//DEFINES  DD SYSOUT=*\n//IDCAMS   DD DISP=(SHR,PASS),DSN=*.LISTC.SYSPRINT\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT920/FILE920.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT920", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}