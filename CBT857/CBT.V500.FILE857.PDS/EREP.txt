/* Rexx
---------------------------------------------------------------------
Download site   : www.rizzuto.it
Program Name    : EREP
Authors         : M. Serafini  E-mail Marco.Serafini§t-systems.it
Date Written    : 10 November  1999
Last Modified   : 09 January   2009
Version         : 2.3
Parameters      : parmHLQ : Name library of system list in member (EREPHLQ)
Routine called  : IFCEREP1: Used to give EREP report from logrec
                : PRINTDS : Used to print the SYSOUT report to the spool
Panels          : EREPP@00: Pop windows - input parameters
                : EREPP@01: Pop windows - confirmation panel
                : EREPP@02: Pop windows - select EREP archive
                : EREPP@03: Tutorial for parameter help
                : EREPP@04: Display log execution messages
                : EREPP@05: Pop windows to select system HLQ files
Description     : This on-line command allows you to extract reports from
                : system LOGREC without using batch jcl.
                : Output can be browsed online or printed to sysout
Fixes           : 25.1.2007  Browse file reports do not appear in pop-up
                : 09.1.2009  Error in pop-up when no input in "erphlq"
Prerequisite    : If you would use "SYSEXN=YES" for active LOGREC by
                : "INPUT  ==> 1" selection in first panel, "IFCEREP1"
                : program must to be autorized in IKJTSOxx.
--------------------------------------------------------------------
*/
TRACE O
arg parmHLQ                                      /* parmlib library   */
Trash = MSG('OFF')
user = SYSVAR(SYSUID)                            /* set userid        */
risp = ''                                        /* answ  EREPP@00    */
typ  = 'SDOTH'                                   /* defaults type     */
OCLASS = '8'                                  /* default sysout class */
SW_pan_dis = '0'                                 /* flag first time   */
sel_cursor = 'INPUT'                             /* position cursor   */
/*------ Get LOGREC dataset name from MVS control block ------*/
cvt          = control_block(,10)
ecvt         = control_block(cvt,8c)
ipa          = control_block(ecvt,188)
dsn_log      = control_block(ipa,968)
leng_dsn_log = control_block(ipa,96C,2,D)
name_dsn_log = STORAGE(dsn_log,leng_dsn_log)
/*------ Get LOGREC dataset name from MVS control block ------*/
logrecfi    = name_dsn_log                       /* DSN logrec x ispf */
os_name     = MVSVAR(SYSNAME)                    /* sysname           */
sysclone    = MVSVAR(SYSCLONE)                   /* sysclone          */
/*-------- Standard default name list ------------------------*/
SistUnd = '_'||os_name
TabOs.      = sysclone               /* Default system suffix         */
TabOs._MVSF = '0'
TabOs._MVSL = '0'
TabOs._MVSM = '0'
TabOs._MVST = '0'
TabOs._MVSW = '0'
sist   = TabOs.SistUnd

Tab1Q.      = 'YCSSYS'              /* Defaults ALIAS archived files  */
Tab1Q._MVS0 = 'YDB$S0'
Tab1Q._MVS1 = 'YDB$S0'
FQua    = Tab1Q.SistUnd

erep_arc = FQua||".V"||sist||"00.EREP"
IF parmHLQ = '' | parmHLQ = 'parmHLQ' THEN DO
   parmHLQ = user".V000.SYSIN"                   /* defaults name lib */
end
archHLQmem = parmHLQ'(EREPHLQ)'                  /* member HLQ list   */
ADDRESS ISPEXEC "ADDPOP ROW(00) COLUMN(-1)"      /* open initial pop  */
/*------------------------------------------------------------*/
/*              MAIN PROGRAM                                  */
/*------------------------------------------------------------*/
DO FOREVER
  ADDRESS TSO "FREE FI(ACCIN,SERLOG,TOURIST,EREPPT,SYSIN,
                       DIRECTWK,DCBOUT,DCBTPE,PARMHLQ)"
  ADDRESS ISPEXEC "VGET (OCLASS,INPUT,ERPHLQ,
                         CUA,SDAT,EDAT,STIM,ETIM,DEV,PRT) PROFILE"
  x= Log(,'INITIALIZE')                             /* initialize log */
  zwinttl = "Interactive EREP Report"               /* Comment in POP */
  parm = 'ACC=N,TABSIZE=1024K'              /* Set default parameters */
  if logrecfi = '' then logrecfi = name_dsn_log  /* Default sys. file */
  if erphlq = '' & SW_pan_dis & rc_panel < 3 then do
     call Retrieve_ERP_HLQ
     if status ¬= 'OK' then
        erphlq = erep_arc                    /* Default lvl qualified */
  end
  SW_pan_dis = '1'
  ADDRESS ISPEXEC "DISPLAY PANEL(EREPP@00) CURSOR("sel_cursor")"
  rc_panel = RC
  ADDRESS ISPEXEC "VPUT (OCLASS,INPUT,ERPHLQ,
                         CUA,SDAT,EDAT,STIM,ETIM,DEV,PRT) PROFILE"
  IF rc_panel > 4 THEN leave                       /* stop  execution */
  if Invalid_date_or_time() then iterate           /* Not valid, skip */
  if Invalid_report_type()  then iterate           /* Not valid, skip */
  if (input='1' & logrecfi='') | (input='2' & erphlq='') then do
     ZEDSMSG = 'Set on defaults files  '
     ZEDLMSG = 'EREP-000 No input files specify'
     ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
     iterate                              /* setup defaults name file */
     end
  select
    when input = '1' then do
       logrec_found = LookFor_logrec(logrecfi)   /* Logrec there ?    */
       if logrec_found then
          call Allocate_logrec_file              /* alloc. logrec     */
       end
    when input = '2' then do
       logrec_found = Retrieve_archived_files()  /* arch. files found?*/
       IF logrec_found THEN
          call Allocate_archived_files           /* alloc. arch. file */
       end
    otherwise nop
  end
  if logrec_found & risp = 'ENTER' then do
     msg='EREP REPORT ABOUT TO BE EXECUTED'
     sure_?= Confirm_request(msg)
     if sure_? = 'YES' THEN
        CALL Execute_EREP_report                 /* extract EREP data */
  end
  x= Log(,'TERMINATE')
END                                             /* end do forever     */
ADDRESS ISPEXEC "REMPOP ALL "                   /* remove initial pop */
EXIT 00

/*--------------- check procedure EREP -----------------------*/
Retrieve_archived_files:
archfound=1
ADDRESS TSO "NEWSTACK"
DROP list_arc.
a = OUTTRAP(list_arc.)
ADDRESS TSO "LISTC LVL('"ERPHLQ"') NAME"
a = OUTTRAP(OFF)
rc_outtrap = RC
IF rc_outtrap ¬= 0 THEN DO
  archfound = 0 ; sel_cursor = 'ERPHLQ'
  ZEDSMSG = 'Archive files not found'
  ZEDLMSG = 'EREP-00E No EREP files found 'ERPHLQ
  ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
END
ELSE DO
  ADDRESS ISPEXEC "TBCREATE TARCEREP KEYS(EREPDSN) ",
                  "NAMES(SELDSN EREPCRDT) NOWRITE REPLACE "
  DO l=list_arc.0 TO 1 BY -1
    IF WORD(list_arc.l,1) = 'NONVSAM' THEN DO
      erepdsn = WORD(list_arc.l,3)
      erepcrdt='????????'
      ret= LISTDSI("'"erepdsn"'")
      if ret=0 then erepcrdt= syscreate
      ADDRESS ISPEXEC "TBADD TARCEREP"
    END
  END
END
ADDRESS TSO "DELSTACK"
/*------------ end check procudure EREP ----------------------*/
RETURN archfound

/*--------------- check procedure date -----------------------*/
check_date:
IF sdat ¬= '' THEN DO
  len_day_in = LENGTH(sdat)
  day_in = SUBSTR(sdat,3,3)
  IF day_in < 1 | day_in > 366 | len_day_in < 5 THEN DO
    invalid_data = 1 ; sel_cursor = 'SDAT'
    ZEDSMSG = 'Incorrect date SDATE'
    ZEDLMSG = 'EREP-01E Date must be in f'||,
              'ormat YYDDD with value 00000-99366'
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
    END
  ELSE DO
    IF edat ¬= '' THEN DO
      len_day_en = LENGTH(edat)
      day_en = SUBSTR(edat,3,3)
      IF day_en < 1 | day_en > 366 | len_day_en < 5 THEN DO
        invalid_data = 1 ; sel_cursor = 'EDAT'
        ZEDSMSG = 'Incorrect date EDATE'
        ZEDLMSG = 'EREP-01E Date must be in f'||,
                 'ormat YYDDD with value 00000-99366'
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
        END
      ELSE DO
        IF edat < sdat THEN DO
          invalid_data = 1 ; sel_cursor = 'EDAT'
          ZEDSMSG = 'Date EDATE prior to end date '
          ZEDLMSG = 'EREP-02E Start date must be '||,
                    'prior to end date  '
          ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
          END
        END
      END
    END
  END
/*------------ end check procedure date ----------------------*/
RETURN

/*--------------- check procedure time -----------------------*/
check_time:
IF stim ¬= '' THEN DO
  len_time_in = LENGTH(stim)
  hh_in = SUBSTR(stim,1,2) ; mm_in = SUBSTR(stim,3,2)
  IF hh_in > 23 | mm_in > 59 | len_time_in < 4 THEN DO
    invalid_data = 1 ; sel_cursor = 'STIM'
    ZEDSMSG = 'Incorrect time STIME'
    ZEDLMSG = 'EREP-03E Time must be in f'||,
              'ormat HHMM with value 0000-2359'
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
    END
  END
IF etim ¬= '' THEN DO
  len_time_en = LENGTH(etim)
  hh_en = SUBSTR(etim,1,2) ; mm_en = SUBSTR(etim,3,2)
  IF hh_en > 23 | mm_en > 59 | len_time_en < 4 THEN DO
    invalid_data = 1 ; sel_cursor = 'ETIM'
    ZEDSMSG = 'Incorrect time ETIME'
    ZEDLMSG = 'EREP-03E Time must be in f'||,
              'ormat HHMM with value 0000-2359'
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
    END
  ELSE DO
    IF etim < stim & (edat = '' | edat = sdat) THEN DO
      invalid_data = 1 ; sel_cursor = 'ETIM'
      ZEDSMSG = 'Time ETIME prior to end time '
      ZEDLMSG = 'EREP-04E Start time must be '||,
                    'prior to end time  '
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
      END
    END
  END
/*------------ end check procudure time ----------------------*/
RETURN

/*--------------- check procedure type -----------------------*/
check_type:
IF typ ¬= '' THEN DO
  len_type = LENGTH(typ)
  DO p=1 TO len_type
    cha_type = SUBSTR(typ,p,1)
    IF (cha_type¬='A' & cha_type¬='B' & cha_type¬='C' & cha_type¬='D' &,
        cha_type¬='E' & cha_type¬='F' & cha_type¬='H' & cha_type¬='I' &,
        cha_type¬='M' & cha_type¬='O' & cha_type¬='S' & cha_type¬='T' &,
        cha_type¬='Y' & cha_type¬='Z')  THEN DO
      invalid_data = 1 ; sel_cursor = 'TYP'
      ZEDSMSG = 'Incorrect TYPE'
      ZEDLMSG = 'EREP-05E TYPE can be : A'||,
                '/B/C/D/E/F/H/I/M/O/S/T/Y/Z     '
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
      END
    ELSE DO
      DO d=p+1 TO len_type         /* Ver. type are all different     */
        IF cha_type = SUBSTR(typ,d,1) THEN DO
          invalid_data = 1 ; sel_cursor = 'TYP'
          ZEDSMSG = 'Duplicate TYPE specified'
          ZEDLMSG = 'EREP-06E Each TYPE can only appear'||,
                    ' once                          '
          ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
          END
        END
      END
    END
  END
/*------------ end check procudure type ----------------------*/
RETURN

/*--------------- selection procedure ------------------------*/
Select_archived_EREP:
ADDRESS ISPEXEC "TBDISPL TARCEREP PANEL(EREPP@02)"
rc_panel = RC
cnt_seldsn = ZTDSELS; cnt_erep = 0; save_enter = risp
DROP dsn_erep.
DO cnt_seldsn = cnt_seldsn TO 1 By - 1
   seldsn = ' ' ; cnt_erep = cnt_erep + 1
   dsn_erep.cnt_erep = erepdsn
   ADDRESS ISPEXEC "TBPUT TARCEREP"
   seldsn = ' '
   ADDRESS ISPEXEC "TBPUT TARCEREP"
   IF cnt_seldsn > 1 THEN
      ADDRESS ISPEXEC "TBDISPL TARCEREP POSITION(seldsn)"
END
lst_erep = cnt_erep
risp = save_enter
/*------------- end selection procedure ----------------------*/
RETURN 0

/*-------------- exec procedure report -----------------------*/
Execute_EREP_report:
ADDRESS TSO "ALLOC FI(DIRECTWK) UNIT(SYSDA) SPACE(69,9) CYLINDERS"
ADDRESS TSO "ATTRIB DCBOUT BLKSIZE(26600) RECFM(F B A) LRECL(133)"
status = SYSDSN("'"user".TOURIST.OUTPUT'")
IF status ¬= 'DATASET NOT FOUND' THEN
  "DELETE '"user".TOURIST.OUTPUT'"
status = SYSDSN("'"user".EREPPT.OUTPUT'")
IF status ¬= 'DATASET NOT FOUND' THEN
  "DELETE '"user".EREPPT.OUTPUT'"
ADDRESS TSO "ALLOC FI(TOURIST) DA('"user".TOURIST.OUTPUT') NEW CATALOG
             UNIT(SYSDA) SPACE(05,5) CYLINDERS USING(DCBOUT)"
ADDRESS TSO "ALLOC FI(EREPPT) DA('"user".EREPPT.OUTPUT') NEW CATALOG
             UNIT(SYSDA) SPACE(20,5) CYLINDERS USING(DCBOUT)"
msg='>'TIME()' IFCEREP1 EXECUTED WITH THE FOLLOWING PARAMETERS:'
x=Log('ADD',,msg)
msg='         ' parm
x=Log('ADD',,msg)
ADDRESS TSO "CALL 'SYS1.LINKLIB(IFCEREP1)' '"parm"'"
rc_erepcal = RC
msg='>'TIME()' IFCEREP1 ENDED WITH RETURN CODE ' RC_EREPCAL
x=Log('DISPLAY',,msg)
ADDRESS ISPEXEC "REMPOP ALL"            /* remove pop for Browse/View */
ADDRESS ISPEXEC "BROWSE DATASET('"user".TOURIST.OUTPUT')"
"EXECIO 1 DISKR EREPPT (FINIS SKIP"
rc_erepppt = RC
IF rc_erepppt = 0 THEN
   ADDRESS ISPEXEC "VIEW   DATASET('"user".EREPPT.OUTPUT')"
IF rc_erepcal > 4 | rc_erepppt > 0 THEN DO
  msg='>'TIME()' REQUIRED DATA NOT FOUND OR INCORRECT PARAMETERS ENTERED.'
  x=Log('ADD',,msg)
  msg='          EREP RUN DOES NOT GENERATE ANY OUTPUT'
  x=Log('ADD-DISPL',,msg)
  msg='TOURIST OUTPUT ABOUT TO BE PRINTED'
  sure_?= Confirm_request(msg)
  if sure_? = 'YES' THEN DO
    x =OUTTRAP('msg.')
    ADDRESS TSO "PRINTDS DATASET('"user".TOURIST.OUTPUT') class("oclass") ",
                "NOHOLD NOTITLE"
    rc_printds = RC
    x =OUTTRAP('OFF')
    do i=1 to msg.0
       if i=1 then msg='>'time()' 'msg.i
       else msg= '         ' msg.i
       x=Log('ADD',,msg)
       end
    msg='>'TIME()' TOURIST IN OUTPUT CLASS 'OCLASS' WITH NAME' USER
    END
  END
ELSE DO
  msg='TOURIST & EREPPT OUTPUT ABOUT TO BE PRINTED'
  sure_?= Confirm_request(msg)
  if sure_? = 'YES' THEN DO
    x=OUTTRAP('msg.')
    ADDRESS TSO "PRINTDS DATASET('"user".TOURIST.OUTPUT') class("oclass") ",
                "NOHOLD NOTITLE"
    ADDRESS TSO "PRINTDS DATASET('"user".EREPPT.OUTPUT')  class("oclass") ",
                "NOHOLD NOTITLE"
    rc_printds = RC
    x=OUTTRAP('OFF')
    do i=1 to msg.0
       if i=1 then msg='>'time()' 'msg.i
       else msg= '         ' msg.i
       x=Log('ADD',,msg)
       end
    msg='>'TIME()' TOURIST & EREPPT IN OUTPUT CLASS 'OCLASS' WITH NAME' USER
    END
  END
IF rc_printds ¬= 0  THEN DO                  /* Error in print sysout */
   msg='>'TIME()' ERROR IN PRINTDS|| NO SYSOUT GENERATE IN JES2 QUEUE'
   END
IF sure_? = 'YES' THEN  x=Log('ADD-DISPL',,msg)
ADDRESS TSO "DELETE '"user".TOURIST.OUTPUT'"
ADDRESS TSO "DELETE '"user".EREPPT.OUTPUT'"
ADDRESS TSO "FREE FI(SERLOG,TOURIST,EREPPT,SYSIN,
                     DIRECTWK,DCBOUT,DCBTPE,ACCIN)"
ADDRESS TSO "ALLOC FI(SYSIN) DA(*)"
ADDRESS ISPEXEC "ADDPOP ROW(00) COLUMN(-1)"  /* set again initial pop */
SW_pan_dis = '0'                          /* set no disply panel list */
/* typ = 'SDOTH'                           set initial parm every run */
/*------------ end exec procudure report ---------------------*/
RETURN

/*---------- init procedure control_block --------------------*/
control_block:  procedure
ARG base_addr,offset,length,type
IF base_addr = '' THEN base_addr = 0
IF offset    = '' THEN offset    = 0
IF length    = '' THEN length    = 4
IF type      = '' THEN type      = X
SELECT
  WHEN type=X THEN
    RETURN  C2X(STORAGE(d2x(x2d(base_addr)+x2d(offset)),length))
  WHEN type=D THEN
    RETURN  C2D(STORAGE(d2x(x2d(base_addr)+x2d(offset)),length))
  OTHERWISE DO
    RETURN      STORAGE(d2x(x2d(base_addr)+x2d(offset)),length)
    END
END
/*---------- end  procedure control_block --------------------*/
RETURN

/*------------ exec procedure Confirm_request ----------------*/
Confirm_request:
Arg message
signal off error
address ISPEXEC "VGET (ZSCREEN) ASIS"
address TSO "PROFILE MSGID"
zwinttl= 'CONFIRM REQUEST'
address 'ISPEXEC'
Do until ckey='PF03' | ckey='ENTER'
   ADDRESS ISPEXEC "CONTROL NOCMD"
   ADDRESS ISPEXEC "ADDPOP ROW(16) COLUMN(38)"
   ADDRESS ISPEXEC "DISPLAY PANEL(EREPP@01) CURSOR(answer)"
   rc_panel = RC
   ADDRESS ISPEXEC "REMPOP"
   end
select
   when ckey='PF03'  then answer='NO'
   when ckey='ENTER' & answer<>'NO' then answer='YES'
   otherwise nop
end
zwinttl= ' '
/*---------- end  procedure confirm --------------------------*/
RETURN answer

/*------------------ exec procedure Log ----------------------*/
Log:
pract1 = arg(1) ; pract2 = arg(2) ; progress = arg(3)
if pract1='ADD' | pract1='ADD-DISPL' then
   ADDRESS ISPEXEC "TBADD TPRGRESS"
if pract1='DISPLAY' | pract1='ADD-DISPL' then do
   ADDRESS ISPEXEC "TBTOP TPRGRESS"
   ADDRESS ISPEXEC "ADDPOP ROW(00) COLUMN(02)"
   ADDRESS ISPEXEC "TBDISPL TPRGRESS PANEL(EREPP@04)"
   ADDRESS ISPEXEC "REMPOP"
end
if pract2='TERMINATE' then
   ADDRESS ISPEXEC "TBEND TPRGRESS"
if pract2='INITIALIZE' then
   ADDRESS ISPEXEC "TBCREATE TPRGRESS NAMES(PROGRESS) NOWRITE REPLACE"
/*------------------- end procedure Log ----------------------*/
RETURN 0

/*--------------- check date and time fields -----------------*/
Invalid_date_or_time:
invalid_data=0
IF sdat ¬= '' THEN DO
  IF edat = '' THEN parm = parm||',DATE=('||sdat||')'
  ELSE parm = parm||',DATE=('||sdat||','||edat||')'
  CALL check_date                                /* Ver. date format  */
  IF stim ¬= '' THEN DO
    IF etim = '' THEN parm = parm||',TIME=('||stim||')'
    ELSE parm = parm||',TIME=('||stim||','||etim||')'
    CALL check_time                               /* Ver. time format */
  END
END
/*----------- end procedure Check_Date_and_time --------------*/
RETURN invalid_data

/*------------------- select report type ---------------------*/
Invalid_report_type:
invalid_data= 0
IF ex = 'YES' THEN DO
  ADDRESS TSO "ALLOC FI(SYSIN) DUMMY"
  parm = parm||',SYSEXN'
END
ELSE DO
  ADDRESS TSO "ALLOC FI(SYSIN) DUMMY"
  IF ev = 'YES' THEN
    parm = 'EVENT,'||parm
  ELSE DO
    IF cua ¬= '' THEN DO
       parm = parm||',CUA=('||cua||')'
       num_CUA = verify(cua,'1234567890ABCDEF-,')
       frs_hyp_CUA = POS('-',cua) ;lst_hyp_CUA = LASTPOS('-',cua)
       frs_com_CUA = POS(',',cua) ;lst_com_CUA = LASTPOS(',',cua)
      IF num_CUA ¬= 0 |,                       /* if syntax ok select */
         ((frs_hyp_CUA<4 | lst_hyp_CUA>10)&(frs_hyp_CUA¬=0)) |,
         ((frs_com_CUA<4 | lst_com_CUA>10)&(frs_com_CUA¬=0)) THEN DO
        invalid_data = 1 ; sel_cursor = 'CUA'
        ZEDSMSG = 'Incorrect address in CUA'
        ZEDLMSG = 'EREP-07E The address must '||,
                  'be in HEX format 3-4 long chars '
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
        END
    END
    IF dev ¬= '' THEN parm = parm||',DEV=('||dev||')'
    IF typ ¬= '' THEN DO
      parm = parm||',TYPE='||typ
      CALL check_type                          /* Ver. tipo selezione */
    END
    parm = (parm)(',PRINT=')(prt)
  END
END
/*----------- end procedure Invalid_report_type --------------*/
RETURN invalid_data

/*------------- Allocate archived EREP files -----------------*/
Allocate_archived_files:
zwinttl = '' ; cnt_erep = 0 ; rc_panel = 0
ADDRESS ISPEXEC "ADDPOP COLUMN(17) ROW(01)"
ADDRESS ISPEXEC "TBTOP TARCEREP"
DO UNTIL rc_panel > 4 | (cnt_erep > 0 & invalid_data = 0)
   CALL Select_archived_EREP               /* Seleziona archivio EREP */
END
ADDRESS ISPEXEC "REMPOP"
IF risp = 'ENTER' THEN DO
   DO cnt_erep = 1 TO lst_erep BY 1
      IF cnt_erep = 1 THEN dsn_ERPHLQ = dsn_erep.cnt_erep
      ELSE dsn_ERPHLQ = dsn_ERPHLQ||"','"||dsn_erep.cnt_erep
   END
   ADDRESS TSO "ALLOC FI(ACCIN) DA('"dsn_ERPHLQ"') SHR"
   rc_alloc = RC
   IF rc_alloc ¬=  0 THEN DO
      SAY ''
      SAY '*--------------------* E R R O R *---------------------*'
      SAY '   File allocation error. DD "ACCIN" used to '
      SAY '   process EREP archive. '
      SAY '   PROCESS ABORTED - CONTAT YOUR SYSTEM PROGRAMMER '
      SAY '*------------------------------------------------------*'
      EXIT 12
   END
   parm = parm||',HIST=Y'
   msg= '>'TIME()' EREP DATA EXTRACTED FROM THE FOLLOWING FILES:'
   x= Log('ADD',,msg)
   DO cnt_erep = 1 TO lst_erep BY 1
       msg='         ' dsn_erep.cnt_erep ''
       x= Log('ADD',,msg)
   END
END
/*---------- end procedure allocate archived files -----------*/
RETURN

/*------------------ Allocate LOGREC file --------------------*/
Allocate_logrec_file:
msg='>'TIME()' EREP DATA EXTRACTED DIRECTLY FROM' logrecfi ''
x= Log('ADD',,msg)
ADDRESS TSO "ALLOC FI(SERLOG) DA('"logrecfi"') SHR"
/*----------- end procedure allocate logrec file -------------*/
RETURN

/*----------------- Verify sys1.logrec existence -------------*/
LookFor_logrec:
lrec=arg(1)
ADDRESS TSO "NEWSTACK"
DROP lists.
x = OUTTRAP(lists.)
ADDRESS TSO "LISTD '"lrec"'"
x = OUTTRAP(OFF)
rc_outtrap = RC
ADDRESS TSO "DELSTACK"
IF rc_outtrap ¬= 0 THEN DO
   sys1_logrec_found=0
   sel_cursor = 'LOGRECFI'
   ZEDSMSG = 'Logrec file not found'
   ZEDLMSG = 'EREP-00F LOGREC not found 'lrec
   ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
END
ELSE sys1_logrec_found=1
/*-------------- End Verify sys1.logrec existence ------------*/
RETURN sys1_logrec_found

/*------------------ Retrieve ERP hlq ------------------------*/
Retrieve_ERP_HLQ:
status = SYSDSN("'"archHLQmem"'")
if status ¬= 'OK' then RETURN
ADDRESS TSO "ALLOC FI(PARMHLQ) DA('"archHLQmem"') SHR"
zwinttl = ""                                       /* Comment in POP  */
ADDRESS ISPEXEC "ADDPOP COLUMN(21) ROW(00)"
ADDRESS ISPEXEC "TBCREATE TABHLQER KEYS(SYSID) ",
                "NAMES(ERPHLQ) NOWRITE REPLACE "
"EXECIO * DISKR PARMHLQ (STEM erphlq. FINIS"     /* read all records  */
do n=1 to erphlq.0                                    /* scan parmlib */
  sysid=subword(erphlq.n,1,1)                            /* get sisid */
  erphlq=subword(erphlq.n,2,1)                     /* get archive HLQ */
  address ISPEXEC "TBADD TABHLQER "
end
ADDRESS ISPEXEC "TBSORT TABHLQER FIELDS(SYSID)"
ADDRESS ISPEXEC "TBTOP TABHLQER "
address ISPEXEC "TBDISPL TABHLQER PANEL(EREPP@05)"
address ISPEXEC "VPUT (ERPHLQ)"
ADDRESS ISPEXEC "REMPOP"
/*-------------- End Retrieve ERP hlq ------------------------*/
RETURN
