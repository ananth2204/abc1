{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013104000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 764218, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE857.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 764218, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 764218, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE857.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\r\\x0f'", "DS1TRBAL": "b'r|'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x07\\x0e\\x00\\x05\\x07\\x0f\\x00\\x03\\x00\\x0e'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04S\\x00E\\x01\\x11%/\\x01\\x11%/\\x10Y\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf3@@@'", "ispf": {"version": "04.83", "flags": 0, "createdate": "2011-09-09T00:00:00", "modifydate": "2011-09-09T10:59:45", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-483"}, "text": "REGULAR CBT TAPE - VERSION 483    FILE:  857\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT483.FILE857\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 14 MEMBERS COUNTED; CUMULATIVE SIZE IS 6,942 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   09/09/11    10:59:44    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00C\\x01\\x11%\\x1f\\x01\\x11%\\x1f\\x14\\x10\\x00-\\x03\\xb5\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2011-09-08T00:00:00", "modifydate": "2011-09-08T14:10:43", "lines": 45, "newlines": 949, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Rexx utiliy for interactive report of LOGREC (EREP).\nFrom:     \"MARCO SERAFINI\" <MARCO.SERAFINI@t-systems.it>\nDate:     Tue, 6 Sep 2011 14:12:56 +0200\nTo:       <sbgolob@cbttape.org>\n\nHello!\nThis utility is able to get a interactive report from a LOGREC\nfrom MVS on-line file or archived, without to submit job jcl.\n\nIt was tested with OS/390 rel. 2.6 and as far as z/OS rel. 1.12\n\nThe EREP package is a mix of 1 Rexx pgm and 6 ISPF panels,\nplus, not mandatory, a file/library for defaults list archive.\nThe output will get in view before to put on jes2/spool by\n\"PRINTDS\" utility program.\n\nI've package in ZIP file, but I add in a TXT file the same\nlibrary enclosed in XMIT format, just to look the contents.\n\nYou can find $$README member for instruction and\na \"WORD\" manual (in Italian language) for example.\n\nThanks for your attention.\n\nBest regards,\nMarco S.\n-------------------------------------------------------------\nMarco Serafini\nSystem specialist\nICT-Operations - CSS - Control Centre - CC_MSY - Team 2\nT Systems Italia S.p.A.\nSocieta unipersonale soggetta a direzione e coordinamento di\nT-Systems International GmbH appartenente al Gruppo Deutsche\nTelekom\nSede Legale: Via Vecchia Ferriera, 5  - 36100 Vicenza\nCap. Soc. Euro 1.000.000 i.v., REA Vicenza 192315,\nReg. Impr. VI 01899910242,\nCod. Fisc. 01899910242, Partita IVA IT12622480155\n\nPhone    : +39 0444 558.700  6\nFax.     : +39 0444 558.352\n(Mobile  : +39 348 2734089\nE-mail   : marco.serafini@t-systems.it\nInternet : www.t-systems.it\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$README": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00@\\x01\\x10\"?\\x01\\x11%\\x1f\\x14\\x06\\x00\\'\\x00(\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2010-08-11T00:00:00", "modifydate": "2011-09-08T14:06:40", "lines": 39, "newlines": 40, "modlines": 0, "user": "SBGOLOB"}, "text": "This utility is able to get a interactve report from a LOGREC\nfrom MVS on-line file or archived, without to submit job jcl.\nIt'll verify the coherent of paramiters before to execute pgm.\n\nIt was tested with OS/390 rel. 2.6 and as far as\nz/OS rel. 1.10\n\nThe EREP package is a mix of 1 Rexx pgms and 6 ISPF panels,\nplus, not mandatory, a file/library for defaults list archive.\nIt is possible to customize a default in \"Standard default  ...\"\nsection without use external list.\n\n EREP        : Main rexx program to call interactive IFCEREP1 pgm\n EREPP@00-05 : ISPF panels for interactive use under ISPF\n EREPHLQ     : Eg. list default systems with owned archive files\n LIBDEF      : Eg. for dynamic allocation library\n\nI put all in one library: REXX pgm, ISPF panels and examples.\nYou can split into more if you'd like.\n\nThe REXX pgms expect a static allocation of ISPF libraries.\nTo do dynamic allocation or to test the use of LIBDEF for a pds.\n\nTo install, receive on your z/OS system with \"BIN\" options and\nthen unpack into a library with :\n\n  RECEIVE INDSN(--------.EREPRPT.XMI)\n  Dataset DB00988.REXX.EREPRPT from DB00988 on NJEMVS0\n  Enter restore parameters or 'DELETE' or 'END' +\n  DSN(in-your-lib-name)\n\nPay attention to Prerequisite sections described in EREP, if\nyou do not obey, you might get a \"SYSTEM COMPLETION CODE=047\".\nThere is DOCUMENTATION in WORD format to explain how this works,\nbut in the Italian language.\nI was lazy to translate, but it may be useful to look at the\nimages inside to see examples.\n\n*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$DOCEREP": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x11%\\x1f\\x01\\x11%\\x1f\\x14\\x17\\x17t\\x17t\\x00\\x00\\xc4\\xd6\\xc3`\\xc9\\xe3\\xc1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2011-09-08T00:00:00", "modifydate": "2011-09-08T14:17:00", "lines": 6004, "newlines": 6004, "modlines": 0, "user": "DOC-ITA"}, "mimetype": "application/msword", "datatype": "binary", "extension": ".doc"}, "@FILE857": {"ttr": 2826, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04S\\x008\\x01\\x11%/\\x01\\x11%/\\x10Y\\x00\\x15\\x00\\x15\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf3@@@'", "ispf": {"version": "04.83", "flags": 0, "createdate": "2011-09-09T00:00:00", "modifydate": "2011-09-09T10:59:38", "lines": 21, "newlines": 21, "modlines": 0, "user": "CBT-483"}, "text": "//***FILE 857 is from Marco Serafini and contains a REXX EXEC and   *   FILE 857\n//*           several panels, to execute an interactive report      *   FILE 857\n//*           against the active LOGREC dataset, or against any     *   FILE 857\n//*           archived copy of LOGREC.  Tested at z/OS 1.6 thru     *   FILE 857\n//*           1.10 by the author, and at 1.12 by Sam Golob.         *   FILE 857\n//*                                                                 *   FILE 857\n//*           This system is very nice, to be able to see what is   *   FILE 857\n//*           in LOGREC, with almost no effort.                     *   FILE 857\n//*                                                                 *   FILE 857\n//*           There is also some word doc, but it is in Italian.    *   FILE 857\n//*           Still, you can get a ton of use out of this package   *   FILE 857\n//*           without reading the words of the doc, but by looking  *   FILE 857\n//*           at the illustrations.                                 *   FILE 857\n//*                                                                 *   FILE 857\n//*           Just copy 6 panels into your panel library and run    *   FILE 857\n//*           the EXEC.                                             *   FILE 857\n//*                                                                 *   FILE 857\n//*           email:  MARCO.SERAFINI@t-systems.it                   *   FILE 857\n//*                                                                 *   FILE 857\n//*           See member $$NOTE1 for more contact information.      *   FILE 857\n//*                                                                 *   FILE 857\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EREP": {"ttr": 3073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00 \\x01\\x05#\\x7f\\x01\\x11%\\x1f\\x13U\\x026\\x00\\xf7\\x00\\x00\\xc4\\xc2\\xf0\\xf0\\xf9\\xf8\\xf8@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2005-08-25T00:00:00", "modifydate": "2011-09-08T13:55:20", "lines": 566, "newlines": 247, "modlines": 0, "user": "DB00988"}, "text": "/* Rexx\n---------------------------------------------------------------------\nDownload site   : www.rizzuto.it\nProgram Name    : EREP\nAuthors         : M. Serafini  E-mail Marco.Serafini\u00a7t-systems.it\nDate Written    : 10 November  1999\nLast Modified   : 09 January   2009\nVersion         : 2.3\nParameters      : parmHLQ : Name library of system list in member (EREPHLQ)\nRoutine called  : IFCEREP1: Used to give EREP report from logrec\n                : PRINTDS : Used to print the SYSOUT report to the spool\nPanels          : EREPP@00: Pop windows - input parameters\n                : EREPP@01: Pop windows - confirmation panel\n                : EREPP@02: Pop windows - select EREP archive\n                : EREPP@03: Tutorial for parameter help\n                : EREPP@04: Display log execution messages\n                : EREPP@05: Pop windows to select system HLQ files\nDescription     : This on-line command allows you to extract reports from\n                : system LOGREC without using batch jcl.\n                : Output can be browsed online or printed to sysout\nFixes           : 25.1.2007  Browse file reports do not appear in pop-up\n                : 09.1.2009  Error in pop-up when no input in \"erphlq\"\nPrerequisite    : If you would use \"SYSEXN=YES\" for active LOGREC by\n                : \"INPUT  ==> 1\" selection in first panel, \"IFCEREP1\"\n                : program must to be autorized in IKJTSOxx.\n--------------------------------------------------------------------\n*/\nTRACE O\narg parmHLQ                                      /* parmlib library   */\nTrash = MSG('OFF')\nuser = SYSVAR(SYSUID)                            /* set userid        */\nrisp = ''                                        /* answ  EREPP@00    */\ntyp  = 'SDOTH'                                   /* defaults type     */\nOCLASS = '8'                                  /* default sysout class */\nSW_pan_dis = '0'                                 /* flag first time   */\nsel_cursor = 'INPUT'                             /* position cursor   */\n/*------ Get LOGREC dataset name from MVS control block ------*/\ncvt          = control_block(,10)\necvt         = control_block(cvt,8c)\nipa          = control_block(ecvt,188)\ndsn_log      = control_block(ipa,968)\nleng_dsn_log = control_block(ipa,96C,2,D)\nname_dsn_log = STORAGE(dsn_log,leng_dsn_log)\n/*------ Get LOGREC dataset name from MVS control block ------*/\nlogrecfi    = name_dsn_log                       /* DSN logrec x ispf */\nos_name     = MVSVAR(SYSNAME)                    /* sysname           */\nsysclone    = MVSVAR(SYSCLONE)                   /* sysclone          */\n/*-------- Standard default name list ------------------------*/\nSistUnd = '_'||os_name\nTabOs.      = sysclone               /* Default system suffix         */\nTabOs._MVSF = '0'\nTabOs._MVSL = '0'\nTabOs._MVSM = '0'\nTabOs._MVST = '0'\nTabOs._MVSW = '0'\nsist   = TabOs.SistUnd\n\nTab1Q.      = 'YCSSYS'              /* Defaults ALIAS archived files  */\nTab1Q._MVS0 = 'YDB$S0'\nTab1Q._MVS1 = 'YDB$S0'\nFQua    = Tab1Q.SistUnd\n\nerep_arc = FQua||\".V\"||sist||\"00.EREP\"\nIF parmHLQ = '' | parmHLQ = 'parmHLQ' THEN DO\n   parmHLQ = user\".V000.SYSIN\"                   /* defaults name lib */\nend\narchHLQmem = parmHLQ'(EREPHLQ)'                  /* member HLQ list   */\nADDRESS ISPEXEC \"ADDPOP ROW(00) COLUMN(-1)\"      /* open initial pop  */\n/*------------------------------------------------------------*/\n/*              MAIN PROGRAM                                  */\n/*------------------------------------------------------------*/\nDO FOREVER\n  ADDRESS TSO \"FREE FI(ACCIN,SERLOG,TOURIST,EREPPT,SYSIN,\n                       DIRECTWK,DCBOUT,DCBTPE,PARMHLQ)\"\n  ADDRESS ISPEXEC \"VGET (OCLASS,INPUT,ERPHLQ,\n                         CUA,SDAT,EDAT,STIM,ETIM,DEV,PRT) PROFILE\"\n  x= Log(,'INITIALIZE')                             /* initialize log */\n  zwinttl = \"Interactive EREP Report\"               /* Comment in POP */\n  parm = 'ACC=N,TABSIZE=1024K'              /* Set default parameters */\n  if logrecfi = '' then logrecfi = name_dsn_log  /* Default sys. file */\n  if erphlq = '' & SW_pan_dis & rc_panel < 3 then do\n     call Retrieve_ERP_HLQ\n     if status \u00ac= 'OK' then\n        erphlq = erep_arc                    /* Default lvl qualified */\n  end\n  SW_pan_dis = '1'\n  ADDRESS ISPEXEC \"DISPLAY PANEL(EREPP@00) CURSOR(\"sel_cursor\")\"\n  rc_panel = RC\n  ADDRESS ISPEXEC \"VPUT (OCLASS,INPUT,ERPHLQ,\n                         CUA,SDAT,EDAT,STIM,ETIM,DEV,PRT) PROFILE\"\n  IF rc_panel > 4 THEN leave                       /* stop  execution */\n  if Invalid_date_or_time() then iterate           /* Not valid, skip */\n  if Invalid_report_type()  then iterate           /* Not valid, skip */\n  if (input='1' & logrecfi='') | (input='2' & erphlq='') then do\n     ZEDSMSG = 'Set on defaults files  '\n     ZEDLMSG = 'EREP-000 No input files specify'\n     ADDRESS ISPEXEC \"SETMSG MSG(ISRZ001)\"\n     iterate                              /* setup defaults name file */\n     end\n  select\n    when input = '1' then do\n       logrec_found = LookFor_logrec(logrecfi)   /* Logrec there ?    */\n       if logrec_found then\n          call Allocate_logrec_file              /* alloc. logrec     */\n       end\n    when input = '2' then do\n       logrec_found = Retrieve_archived_files()  /* arch. files found?*/\n       IF logrec_found THEN\n          call Allocate_archived_files           /* alloc. arch. file */\n       end\n    otherwise nop\n  end\n  if logrec_found & risp = 'ENTER' then do\n     msg='EREP REPORT ABOUT TO BE EXECUTED'\n     sure_?= Confirm_request(msg)\n     if sure_? = 'YES' THEN\n        CALL Execute_EREP_report                 /* extract EREP data */\n  end\n  x= Log(,'TERMINATE')\nEND                                             /* end do forever     */\nADDRESS ISPEXEC \"REMPOP ALL \"                   /* remove initial pop */\nEXIT 00\n\n/*--------------- check procedure EREP -----------------------*/\nRetrieve_archived_files:\narchfound=1\nADDRESS TSO \"NEWSTACK\"\nDROP list_arc.\na = OUTTRAP(list_arc.)\nADDRESS TSO \"LISTC LVL('\"ERPHLQ\"') NAME\"\na = OUTTRAP(OFF)\nrc_outtrap = RC\nIF rc_outtrap \u00ac= 0 THEN DO\n  archfound = 0 ; sel_cursor = 'ERPHLQ'\n  ZEDSMSG = 'Archive files not found'\n  ZEDLMSG = 'EREP-00E No EREP files found 'ERPHLQ\n  ADDRESS ISPEXEC \"SETMSG MSG(ISRZ001)\"\nEND\nELSE DO\n  ADDRESS ISPEXEC \"TBCREATE TARCEREP KEYS(EREPDSN) \",\n                  \"NAMES(SELDSN EREPCRDT) NOWRITE REPLACE \"\n  DO l=list_arc.0 TO 1 BY -1\n    IF WORD(list_arc.l,1) = 'NONVSAM' THEN DO\n      erepdsn = WORD(list_arc.l,3)\n      erepcrdt='????????'\n      ret= LISTDSI(\"'\"erepdsn\"'\")\n      if ret=0 then erepcrdt= syscreate\n      ADDRESS ISPEXEC \"TBADD TARCEREP\"\n    END\n  END\nEND\nADDRESS TSO \"DELSTACK\"\n/*------------ end check procudure EREP ----------------------*/\nRETURN archfound\n\n/*--------------- check procedure date -----------------------*/\ncheck_date:\nIF sdat \u00ac= '' THEN DO\n  len_day_in = LENGTH(sdat)\n  day_in = SUBSTR(sdat,3,3)\n  IF day_in < 1 | day_in > 366 | len_day_in < 5 THEN DO\n    invalid_data = 1 ; sel_cursor = 'SDAT'\n    ZEDSMSG = 'Incorrect date SDATE'\n    ZEDLMSG = 'EREP-01E Date must be in f'||,\n              'ormat YYDDD with value 00000-99366'\n    ADDRESS ISPEXEC \"SETMSG MSG(ISRZ001)\"\n    END\n  ELSE DO\n    IF edat \u00ac= '' THEN DO\n      len_day_en = LENGTH(edat)\n      day_en = SUBSTR(edat,3,3)\n      IF day_en < 1 | day_en > 366 | len_day_en < 5 THEN DO\n        invalid_data = 1 ; sel_cursor = 'EDAT'\n        ZEDSMSG = 'Incorrect date EDATE'\n        ZEDLMSG = 'EREP-01E Date must be in f'||,\n                 'ormat YYDDD with value 00000-99366'\n        ADDRESS ISPEXEC \"SETMSG MSG(ISRZ001)\"\n        END\n      ELSE DO\n        IF edat < sdat THEN DO\n          invalid_data = 1 ; sel_cursor = 'EDAT'\n          ZEDSMSG = 'Date EDATE prior to end date '\n          ZEDLMSG = 'EREP-02E Start date must be '||,\n                    'prior to end date  '\n          ADDRESS ISPEXEC \"SETMSG MSG(ISRZ001)\"\n          END\n        END\n      END\n    END\n  END\n/*------------ end check procedure date ----------------------*/\nRETURN\n\n/*--------------- check procedure time -----------------------*/\ncheck_time:\nIF stim \u00ac= '' THEN DO\n  len_time_in = LENGTH(stim)\n  hh_in = SUBSTR(stim,1,2) ; mm_in = SUBSTR(stim,3,2)\n  IF hh_in > 23 | mm_in > 59 | len_time_in < 4 THEN DO\n    invalid_data = 1 ; sel_cursor = 'STIM'\n    ZEDSMSG = 'Incorrect time STIME'\n    ZEDLMSG = 'EREP-03E Time must be in f'||,\n              'ormat HHMM with value 0000-2359'\n    ADDRESS ISPEXEC \"SETMSG MSG(ISRZ001)\"\n    END\n  END\nIF etim \u00ac= '' THEN DO\n  len_time_en = LENGTH(etim)\n  hh_en = SUBSTR(etim,1,2) ; mm_en = SUBSTR(etim,3,2)\n  IF hh_en > 23 | mm_en > 59 | len_time_en < 4 THEN DO\n    invalid_data = 1 ; sel_cursor = 'ETIM'\n    ZEDSMSG = 'Incorrect time ETIME'\n    ZEDLMSG = 'EREP-03E Time must be in f'||,\n              'ormat HHMM with value 0000-2359'\n    ADDRESS ISPEXEC \"SETMSG MSG(ISRZ001)\"\n    END\n  ELSE DO\n    IF etim < stim & (edat = '' | edat = sdat) THEN DO\n      invalid_data = 1 ; sel_cursor = 'ETIM'\n      ZEDSMSG = 'Time ETIME prior to end time '\n      ZEDLMSG = 'EREP-04E Start time must be '||,\n                    'prior to end time  '\n      ADDRESS ISPEXEC \"SETMSG MSG(ISRZ001)\"\n      END\n    END\n  END\n/*------------ end check procudure time ----------------------*/\nRETURN\n\n/*--------------- check procedure type -----------------------*/\ncheck_type:\nIF typ \u00ac= '' THEN DO\n  len_type = LENGTH(typ)\n  DO p=1 TO len_type\n    cha_type = SUBSTR(typ,p,1)\n    IF (cha_type\u00ac='A' & cha_type\u00ac='B' & cha_type\u00ac='C' & cha_type\u00ac='D' &,\n        cha_type\u00ac='E' & cha_type\u00ac='F' & cha_type\u00ac='H' & cha_type\u00ac='I' &,\n        cha_type\u00ac='M' & cha_type\u00ac='O' & cha_type\u00ac='S' & cha_type\u00ac='T' &,\n        cha_type\u00ac='Y' & cha_type\u00ac='Z')  THEN DO\n      invalid_data = 1 ; sel_cursor = 'TYP'\n      ZEDSMSG = 'Incorrect TYPE'\n      ZEDLMSG = 'EREP-05E TYPE can be : A'||,\n                '/B/C/D/E/F/H/I/M/O/S/T/Y/Z     '\n      ADDRESS ISPEXEC \"SETMSG MSG(ISRZ001)\"\n      END\n    ELSE DO\n      DO d=p+1 TO len_type         /* Ver. type are all different     */\n        IF cha_type = SUBSTR(typ,d,1) THEN DO\n          invalid_data = 1 ; sel_cursor = 'TYP'\n          ZEDSMSG = 'Duplicate TYPE specified'\n          ZEDLMSG = 'EREP-06E Each TYPE can only appear'||,\n                    ' once                          '\n          ADDRESS ISPEXEC \"SETMSG MSG(ISRZ001)\"\n          END\n        END\n      END\n    END\n  END\n/*------------ end check procudure type ----------------------*/\nRETURN\n\n/*--------------- selection procedure ------------------------*/\nSelect_archived_EREP:\nADDRESS ISPEXEC \"TBDISPL TARCEREP PANEL(EREPP@02)\"\nrc_panel = RC\ncnt_seldsn = ZTDSELS; cnt_erep = 0; save_enter = risp\nDROP dsn_erep.\nDO cnt_seldsn = cnt_seldsn TO 1 By - 1\n   seldsn = ' ' ; cnt_erep = cnt_erep + 1\n   dsn_erep.cnt_erep = erepdsn\n   ADDRESS ISPEXEC \"TBPUT TARCEREP\"\n   seldsn = ' '\n   ADDRESS ISPEXEC \"TBPUT TARCEREP\"\n   IF cnt_seldsn > 1 THEN\n      ADDRESS ISPEXEC \"TBDISPL TARCEREP POSITION(seldsn)\"\nEND\nlst_erep = cnt_erep\nrisp = save_enter\n/*------------- end selection procedure ----------------------*/\nRETURN 0\n\n/*-------------- exec procedure report -----------------------*/\nExecute_EREP_report:\nADDRESS TSO \"ALLOC FI(DIRECTWK) UNIT(SYSDA) SPACE(69,9) CYLINDERS\"\nADDRESS TSO \"ATTRIB DCBOUT BLKSIZE(26600) RECFM(F B A) LRECL(133)\"\nstatus = SYSDSN(\"'\"user\".TOURIST.OUTPUT'\")\nIF status \u00ac= 'DATASET NOT FOUND' THEN\n  \"DELETE '\"user\".TOURIST.OUTPUT'\"\nstatus = SYSDSN(\"'\"user\".EREPPT.OUTPUT'\")\nIF status \u00ac= 'DATASET NOT FOUND' THEN\n  \"DELETE '\"user\".EREPPT.OUTPUT'\"\nADDRESS TSO \"ALLOC FI(TOURIST) DA('\"user\".TOURIST.OUTPUT') NEW CATALOG\n             UNIT(SYSDA) SPACE(05,5) CYLINDERS USING(DCBOUT)\"\nADDRESS TSO \"ALLOC FI(EREPPT) DA('\"user\".EREPPT.OUTPUT') NEW CATALOG\n             UNIT(SYSDA) SPACE(20,5) CYLINDERS USING(DCBOUT)\"\nmsg='>'TIME()' IFCEREP1 EXECUTED WITH THE FOLLOWING PARAMETERS:'\nx=Log('ADD',,msg)\nmsg='         ' parm\nx=Log('ADD',,msg)\nADDRESS TSO \"CALL 'SYS1.LINKLIB(IFCEREP1)' '\"parm\"'\"\nrc_erepcal = RC\nmsg='>'TIME()' IFCEREP1 ENDED WITH RETURN CODE ' RC_EREPCAL\nx=Log('DISPLAY',,msg)\nADDRESS ISPEXEC \"REMPOP ALL\"            /* remove pop for Browse/View */\nADDRESS ISPEXEC \"BROWSE DATASET('\"user\".TOURIST.OUTPUT')\"\n\"EXECIO 1 DISKR EREPPT (FINIS SKIP\"\nrc_erepppt = RC\nIF rc_erepppt = 0 THEN\n   ADDRESS ISPEXEC \"VIEW   DATASET('\"user\".EREPPT.OUTPUT')\"\nIF rc_erepcal > 4 | rc_erepppt > 0 THEN DO\n  msg='>'TIME()' REQUIRED DATA NOT FOUND OR INCORRECT PARAMETERS ENTERED.'\n  x=Log('ADD',,msg)\n  msg='          EREP RUN DOES NOT GENERATE ANY OUTPUT'\n  x=Log('ADD-DISPL',,msg)\n  msg='TOURIST OUTPUT ABOUT TO BE PRINTED'\n  sure_?= Confirm_request(msg)\n  if sure_? = 'YES' THEN DO\n    x =OUTTRAP('msg.')\n    ADDRESS TSO \"PRINTDS DATASET('\"user\".TOURIST.OUTPUT') class(\"oclass\") \",\n                \"NOHOLD NOTITLE\"\n    rc_printds = RC\n    x =OUTTRAP('OFF')\n    do i=1 to msg.0\n       if i=1 then msg='>'time()' 'msg.i\n       else msg= '         ' msg.i\n       x=Log('ADD',,msg)\n       end\n    msg='>'TIME()' TOURIST IN OUTPUT CLASS 'OCLASS' WITH NAME' USER\n    END\n  END\nELSE DO\n  msg='TOURIST & EREPPT OUTPUT ABOUT TO BE PRINTED'\n  sure_?= Confirm_request(msg)\n  if sure_? = 'YES' THEN DO\n    x=OUTTRAP('msg.')\n    ADDRESS TSO \"PRINTDS DATASET('\"user\".TOURIST.OUTPUT') class(\"oclass\") \",\n                \"NOHOLD NOTITLE\"\n    ADDRESS TSO \"PRINTDS DATASET('\"user\".EREPPT.OUTPUT')  class(\"oclass\") \",\n                \"NOHOLD NOTITLE\"\n    rc_printds = RC\n    x=OUTTRAP('OFF')\n    do i=1 to msg.0\n       if i=1 then msg='>'time()' 'msg.i\n       else msg= '         ' msg.i\n       x=Log('ADD',,msg)\n       end\n    msg='>'TIME()' TOURIST & EREPPT IN OUTPUT CLASS 'OCLASS' WITH NAME' USER\n    END\n  END\nIF rc_printds \u00ac= 0  THEN DO                  /* Error in print sysout */\n   msg='>'TIME()' ERROR IN PRINTDS|| NO SYSOUT GENERATE IN JES2 QUEUE'\n   END\nIF sure_? = 'YES' THEN  x=Log('ADD-DISPL',,msg)\nADDRESS TSO \"DELETE '\"user\".TOURIST.OUTPUT'\"\nADDRESS TSO \"DELETE '\"user\".EREPPT.OUTPUT'\"\nADDRESS TSO \"FREE FI(SERLOG,TOURIST,EREPPT,SYSIN,\n                     DIRECTWK,DCBOUT,DCBTPE,ACCIN)\"\nADDRESS TSO \"ALLOC FI(SYSIN) DA(*)\"\nADDRESS ISPEXEC \"ADDPOP ROW(00) COLUMN(-1)\"  /* set again initial pop */\nSW_pan_dis = '0'                          /* set no disply panel list */\n/* typ = 'SDOTH'                           set initial parm every run */\n/*------------ end exec procudure report ---------------------*/\nRETURN\n\n/*---------- init procedure control_block --------------------*/\ncontrol_block:  procedure\nARG base_addr,offset,length,type\nIF base_addr = '' THEN base_addr = 0\nIF offset    = '' THEN offset    = 0\nIF length    = '' THEN length    = 4\nIF type      = '' THEN type      = X\nSELECT\n  WHEN type=X THEN\n    RETURN  C2X(STORAGE(d2x(x2d(base_addr)+x2d(offset)),length))\n  WHEN type=D THEN\n    RETURN  C2D(STORAGE(d2x(x2d(base_addr)+x2d(offset)),length))\n  OTHERWISE DO\n    RETURN      STORAGE(d2x(x2d(base_addr)+x2d(offset)),length)\n    END\nEND\n/*---------- end  procedure control_block --------------------*/\nRETURN\n\n/*------------ exec procedure Confirm_request ----------------*/\nConfirm_request:\nArg message\nsignal off error\naddress ISPEXEC \"VGET (ZSCREEN) ASIS\"\naddress TSO \"PROFILE MSGID\"\nzwinttl= 'CONFIRM REQUEST'\naddress 'ISPEXEC'\nDo until ckey='PF03' | ckey='ENTER'\n   ADDRESS ISPEXEC \"CONTROL NOCMD\"\n   ADDRESS ISPEXEC \"ADDPOP ROW(16) COLUMN(38)\"\n   ADDRESS ISPEXEC \"DISPLAY PANEL(EREPP@01) CURSOR(answer)\"\n   rc_panel = RC\n   ADDRESS ISPEXEC \"REMPOP\"\n   end\nselect\n   when ckey='PF03'  then answer='NO'\n   when ckey='ENTER' & answer<>'NO' then answer='YES'\n   otherwise nop\nend\nzwinttl= ' '\n/*---------- end  procedure confirm --------------------------*/\nRETURN answer\n\n/*------------------ exec procedure Log ----------------------*/\nLog:\npract1 = arg(1) ; pract2 = arg(2) ; progress = arg(3)\nif pract1='ADD' | pract1='ADD-DISPL' then\n   ADDRESS ISPEXEC \"TBADD TPRGRESS\"\nif pract1='DISPLAY' | pract1='ADD-DISPL' then do\n   ADDRESS ISPEXEC \"TBTOP TPRGRESS\"\n   ADDRESS ISPEXEC \"ADDPOP ROW(00) COLUMN(02)\"\n   ADDRESS ISPEXEC \"TBDISPL TPRGRESS PANEL(EREPP@04)\"\n   ADDRESS ISPEXEC \"REMPOP\"\nend\nif pract2='TERMINATE' then\n   ADDRESS ISPEXEC \"TBEND TPRGRESS\"\nif pract2='INITIALIZE' then\n   ADDRESS ISPEXEC \"TBCREATE TPRGRESS NAMES(PROGRESS) NOWRITE REPLACE\"\n/*------------------- end procedure Log ----------------------*/\nRETURN 0\n\n/*--------------- check date and time fields -----------------*/\nInvalid_date_or_time:\ninvalid_data=0\nIF sdat \u00ac= '' THEN DO\n  IF edat = '' THEN parm = parm||',DATE=('||sdat||')'\n  ELSE parm = parm||',DATE=('||sdat||','||edat||')'\n  CALL check_date                                /* Ver. date format  */\n  IF stim \u00ac= '' THEN DO\n    IF etim = '' THEN parm = parm||',TIME=('||stim||')'\n    ELSE parm = parm||',TIME=('||stim||','||etim||')'\n    CALL check_time                               /* Ver. time format */\n  END\nEND\n/*----------- end procedure Check_Date_and_time --------------*/\nRETURN invalid_data\n\n/*------------------- select report type ---------------------*/\nInvalid_report_type:\ninvalid_data= 0\nIF ex = 'YES' THEN DO\n  ADDRESS TSO \"ALLOC FI(SYSIN) DUMMY\"\n  parm = parm||',SYSEXN'\nEND\nELSE DO\n  ADDRESS TSO \"ALLOC FI(SYSIN) DUMMY\"\n  IF ev = 'YES' THEN\n    parm = 'EVENT,'||parm\n  ELSE DO\n    IF cua \u00ac= '' THEN DO\n       parm = parm||',CUA=('||cua||')'\n       num_CUA = verify(cua,'1234567890ABCDEF-,')\n       frs_hyp_CUA = POS('-',cua) ;lst_hyp_CUA = LASTPOS('-',cua)\n       frs_com_CUA = POS(',',cua) ;lst_com_CUA = LASTPOS(',',cua)\n      IF num_CUA \u00ac= 0 |,                       /* if syntax ok select */\n         ((frs_hyp_CUA<4 | lst_hyp_CUA>10)&(frs_hyp_CUA\u00ac=0)) |,\n         ((frs_com_CUA<4 | lst_com_CUA>10)&(frs_com_CUA\u00ac=0)) THEN DO\n        invalid_data = 1 ; sel_cursor = 'CUA'\n        ZEDSMSG = 'Incorrect address in CUA'\n        ZEDLMSG = 'EREP-07E The address must '||,\n                  'be in HEX format 3-4 long chars '\n        ADDRESS ISPEXEC \"SETMSG MSG(ISRZ001)\"\n        END\n    END\n    IF dev \u00ac= '' THEN parm = parm||',DEV=('||dev||')'\n    IF typ \u00ac= '' THEN DO\n      parm = parm||',TYPE='||typ\n      CALL check_type                          /* Ver. tipo selezione */\n    END\n    parm = (parm)(',PRINT=')(prt)\n  END\nEND\n/*----------- end procedure Invalid_report_type --------------*/\nRETURN invalid_data\n\n/*------------- Allocate archived EREP files -----------------*/\nAllocate_archived_files:\nzwinttl = '' ; cnt_erep = 0 ; rc_panel = 0\nADDRESS ISPEXEC \"ADDPOP COLUMN(17) ROW(01)\"\nADDRESS ISPEXEC \"TBTOP TARCEREP\"\nDO UNTIL rc_panel > 4 | (cnt_erep > 0 & invalid_data = 0)\n   CALL Select_archived_EREP               /* Seleziona archivio EREP */\nEND\nADDRESS ISPEXEC \"REMPOP\"\nIF risp = 'ENTER' THEN DO\n   DO cnt_erep = 1 TO lst_erep BY 1\n      IF cnt_erep = 1 THEN dsn_ERPHLQ = dsn_erep.cnt_erep\n      ELSE dsn_ERPHLQ = dsn_ERPHLQ||\"','\"||dsn_erep.cnt_erep\n   END\n   ADDRESS TSO \"ALLOC FI(ACCIN) DA('\"dsn_ERPHLQ\"') SHR\"\n   rc_alloc = RC\n   IF rc_alloc \u00ac=  0 THEN DO\n      SAY ''\n      SAY '*--------------------* E R R O R *---------------------*'\n      SAY '   File allocation error. DD \"ACCIN\" used to '\n      SAY '   process EREP archive. '\n      SAY '   PROCESS ABORTED - CONTAT YOUR SYSTEM PROGRAMMER '\n      SAY '*------------------------------------------------------*'\n      EXIT 12\n   END\n   parm = parm||',HIST=Y'\n   msg= '>'TIME()' EREP DATA EXTRACTED FROM THE FOLLOWING FILES:'\n   x= Log('ADD',,msg)\n   DO cnt_erep = 1 TO lst_erep BY 1\n       msg='         ' dsn_erep.cnt_erep ''\n       x= Log('ADD',,msg)\n   END\nEND\n/*---------- end procedure allocate archived files -----------*/\nRETURN\n\n/*------------------ Allocate LOGREC file --------------------*/\nAllocate_logrec_file:\nmsg='>'TIME()' EREP DATA EXTRACTED DIRECTLY FROM' logrecfi ''\nx= Log('ADD',,msg)\nADDRESS TSO \"ALLOC FI(SERLOG) DA('\"logrecfi\"') SHR\"\n/*----------- end procedure allocate logrec file -------------*/\nRETURN\n\n/*----------------- Verify sys1.logrec existence -------------*/\nLookFor_logrec:\nlrec=arg(1)\nADDRESS TSO \"NEWSTACK\"\nDROP lists.\nx = OUTTRAP(lists.)\nADDRESS TSO \"LISTD '\"lrec\"'\"\nx = OUTTRAP(OFF)\nrc_outtrap = RC\nADDRESS TSO \"DELSTACK\"\nIF rc_outtrap \u00ac= 0 THEN DO\n   sys1_logrec_found=0\n   sel_cursor = 'LOGRECFI'\n   ZEDSMSG = 'Logrec file not found'\n   ZEDLMSG = 'EREP-00F LOGREC not found 'lrec\n   ADDRESS ISPEXEC \"SETMSG MSG(ISRZ001)\"\nEND\nELSE sys1_logrec_found=1\n/*-------------- End Verify sys1.logrec existence ------------*/\nRETURN sys1_logrec_found\n\n/*------------------ Retrieve ERP hlq ------------------------*/\nRetrieve_ERP_HLQ:\nstatus = SYSDSN(\"'\"archHLQmem\"'\")\nif status \u00ac= 'OK' then RETURN\nADDRESS TSO \"ALLOC FI(PARMHLQ) DA('\"archHLQmem\"') SHR\"\nzwinttl = \"\"                                       /* Comment in POP  */\nADDRESS ISPEXEC \"ADDPOP COLUMN(21) ROW(00)\"\nADDRESS ISPEXEC \"TBCREATE TABHLQER KEYS(SYSID) \",\n                \"NAMES(ERPHLQ) NOWRITE REPLACE \"\n\"EXECIO * DISKR PARMHLQ (STEM erphlq. FINIS\"     /* read all records  */\ndo n=1 to erphlq.0                                    /* scan parmlib */\n  sysid=subword(erphlq.n,1,1)                            /* get sisid */\n  erphlq=subword(erphlq.n,2,1)                     /* get archive HLQ */\n  address ISPEXEC \"TBADD TABHLQER \"\nend\nADDRESS ISPEXEC \"TBSORT TABHLQER FIELDS(SYSID)\"\nADDRESS ISPEXEC \"TBTOP TABHLQER \"\naddress ISPEXEC \"TBDISPL TABHLQER PANEL(EREPP@05)\"\naddress ISPEXEC \"VPUT (ERPHLQ)\"\nADDRESS ISPEXEC \"REMPOP\"\n/*-------------- End Retrieve ERP hlq ------------------------*/\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EREPHLQ": {"ttr": 3083, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x01\\t\\x02\\x1f\\x01\\t\\x02\\x1f\\x120\\x00\\x13\\x00\\x13\\x00\\x00\\xc4\\xc2\\xf0\\xf0\\xf9\\xf8\\xf8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-01-21T00:00:00", "modifydate": "2009-01-21T12:30:39", "lines": 19, "newlines": 19, "modlines": 0, "user": "DB00988"}, "text": "MVSC YDB$SC.V000.EREP\nMVSN YDB$SN.V000.EREP\nMVS2 YDB$SN.V000.EREP\nMVSO YDB$SO.V000.EREP\nMVSP YDB$SZ.VP00.EREP\nMVSR YDB$SR.VR00.EREP\nMVS0 YDB$S0.V000.EREP\nMVS1 YDB$S0.V100.EREP\nMVSB YCSSYS.V000.EREP\nMVSF YCSSYS.V000.EREP\nMVSL YCSSYS.V000.EREP\nMVSM YCSSYS.V000.EREP\nMVSQ YCSSYS.V000.EREP\nMVSR YCSSYS.V000.EREP\nMVST YCSSYS.V000.EREP\nMVSW YCSSYS.V000.EREP\nALL  YCSSYS.VX00.EREP\nROBOT YCSSYS.VX00.EREP\nTAPE TAPEC.GTCS.EREP.MVSX\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EREPP@00": {"ttr": 3329, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01&\\x00\\x11\\x01\\x05#\\x7f\\x01\\x10#\\x1f\\x18R\\x007\\x008\\x00\\x00\\xc4\\xc2\\xf0\\xf0\\xf9\\xf8\\xf8@@@'", "ispf": {"version": "01.38", "flags": 0, "createdate": "2005-08-25T00:00:00", "modifydate": "2010-08-19T18:52:11", "lines": 55, "newlines": 56, "modlines": 0, "user": "DB00988"}, "text": ")ATTR\n % TYPE(TEXT)   INTENS(HIGH) SKIP(ON)\n + TYPE(TEXT)   INTENS(LOW)  SKIP(ON)\n # TYPE(TEXT)   INTENS(HIGH) COLOR(WHITE)\n _ TYPE(INPUT)  INTENS(HIGH) JUST(LEFT) PAD(_)\n $ TYPE(OUTPUT) INTENS(LOW)\n \u00a2 TYPE(OUTPUT) INTENS(HIGH) CAPS(ON) COLOR(YELLOW) SKIP(ON)\n)BODY WINDOW(72,19)\n+  System :%&ZSYSID\n+  Data   :%&ZJDATE  +Command ===>_ZCMD                           +\n%\n%      +INPUT %==>_Z+%1+Read from:\u00a2LOGRECFI                       +\n%                    %2+Read from archived files\n%                      +with HLQ :_ERPHLQ                         +\n%      +SYSOUT%==>_Z+ Class of sysout report if ever printed\n%\n%      +SDATE %==>_SDAT ++EDATE %==>_EDAT + Start-End Date (YYDDD)\n%      +STIME %==>_STIM+ +ETIME %==>_ETIM+ +Start-End Time (HHMM)\n%\n%      +EVENT %==>_EV +   +YES/NO     SYSEXN%==>_EX + +YES/NO\n%\n%+   For reports other than EVENT o SYSEXN you can specify :\n%      +CUA   %==>_CUA           +(Addr,Addr,....)\n%      +DEV   %==>_DEV        +   (Type,Type,....)\n%      +PRINT %==>_Z +          +AL-PS-SU\n%      +TYPE  %==>_TYP          +A/B/C/D/E/F/H/I/M/O/S/T/Y/Z\n#  %F3+- EXIT\n)INIT\n .ZVARS = '(INPUT OCLASS PRT)'\n .HELP = EREPP@03\n &EX  = NO\n &EV  = NO\n)PROC\n   &RISP = .RESP\n   VER (&OCLASS,NB)\n   VER (&INPUT,NB)\n   VER (&INPUT,LIST,1,2)\n   VER (&SDAT,NUM)\n   VER (&STIM,NUM)\n   VER (&EDAT,NUM)\n   VER (&ETIM,NUM)\n   VER (&EV,LIST,YES,NO)\n   IF (&EX = 'NO')\n      IF (&EV = 'NO')\n        VER (&PRT,NB)\n        VER (&PRT,LIST,AL,PS,SU)\n   IF (&EDAT \u00ac= ' ')\n      VER (&SDAT,NB)\n   IF (&STIM \u00ac= ' ')\n      VER (&ETIM,NB)\n      VER (&SDAT,NB)\n   IF (&ETIM \u00ac= ' ')\n      VER (&STIM,NB)\n      VER (&SDAT,NB)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EREPP@01": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x07\\x01\\x05$/\\x01\\x061\\x9f\\x14\\x19\\x00\\x15\\x00\\x0f\\x00\\x00\\xc4\\xc2\\xf0\\xf0\\xf9\\xf8\\xf8@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2005-08-30T00:00:00", "modifydate": "2006-11-15T14:19:07", "lines": 21, "newlines": 15, "modlines": 0, "user": "DB00988"}, "text": ")ATTR DEFAULT(%+_)\n $ TYPE(OUTPUT) INTENS(LOW)  CAPS(OFF) JUST(LEFT) COLOR(TURQUOISE)\n _ TYPE(INPUT)  INTENS(HIGH)\n)BODY WINDOW(45,4)\n$message\n+Are you sure ?_Z  +\n+\n+Press %ENTER+to process or press%END+to exit\n)INIT\n .zvars = '(ANSWER)'\n .CURSOR = ANSWER\n &ANSWER = 'YES'\n)REINIT\n)PROC\n VER (&ANSWER,NB)\n VER (&ANSWER,LIST,YES,NO)\n &CKEY = .PFKEY\n IF (&CKEY = ' ')\n     &CKEY = 'ENTER'\n VPUT (CKEY) SHARED\n)End\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EREPP@02": {"ttr": 3333, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x000\\x01\\x05#\\x7f\\x01\\x07\\x04\\x7f\\x14H\\x00\\x17\\x00\\x11\\x00\\x00\\xc4\\xc2\\xf0\\xf0\\xf9\\xf8\\xf8@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "2005-08-25T00:00:00", "modifydate": "2007-02-16T14:48:30", "lines": 23, "newlines": 17, "modlines": 0, "user": "DB00988"}, "text": ")ATTR\n + TYPE(TEXT)   INTENS(LOW)  SKIP(ON)    COLOR(BLUE)\n $ TYPE(INPUT)  INTENS(LOW)  CAPS(OFF)   JUST(LEFT)\n # TYPE(TEXT)   INTENS(HIGH) COLOR(WHITE)\n | TYPE(INPUT)  INTENS(HIGH) PAD('_')    CAPS(ON)\n \u00ac TYPE(OUTPUT) INTENS(HIGH) COLOR(WHITE)\n)BODY WINDOW(60 17)\n+Command ===>$ZCMD                                 +\n#          Select one or more input files         +\n+\n+Sel Date     Data Set Name                       +\n+--- -------- ---------------------------------------------+\n)MODEL CLEAR(SELDSN)\n+|Z+\u00acZ       \u00acZ                                            +\n)INIT\n&ZTDMARK = ' _______________________ End of data _____________________'\n .ZVARS  = '(SELDSN,EREPCRDT,EREPDSN)'\n .CURSOR = SELDSN\n)PROC\n &RISP = .RESP\n VER (&SELDSN,NB)\n VER (&SELDSN,LIST,S)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EREPP@03": {"ttr": 3335, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x002\\x01\\x05$/\\x01\\x07\\x02o\\x13\\x15\\x00H\\x00\\x1a\\x00\\x00\\xc4\\xc2\\xf0\\xf0\\xf9\\xf8\\xf8@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2005-08-30T00:00:00", "modifydate": "2007-01-26T13:15:32", "lines": 72, "newlines": 26, "modlines": 0, "user": "DB00988"}, "text": ")ATTR\n + TYPE(TEXT)  INTENS(LOW)  COLOR(TURQUOISE)\n \u00a2 TYPE(PT)                          /* panel title line             */\n ? TYPE(PIN)                         /* panel instruction line       */\n < TYPE(FP)                          /* field prompt attribute       */\n # TYPE(NT)                          /* normal text attribute        */\n $ TYPE(NEF)   PADC(_)         /* normal entry field padded with '_' */\n | TYPE(DT)                          /* description text             */\n @ AREA(SCRL)  EXTEND(ON)            /* extendable scrollable area   */\n \u00ac AREA(SCRL)                        /* scrollable area attribute    */\n)BODY\n\u00a2-------------------------- EREP Tutorial ------------------------------\n#Command ===>_ZCMD                                                     #\n#\n#\n\u00acarea1                                                                \u00ac\n\u00ac                                                                     \u00ac\n\u00ac                                                                     \u00ac\n\u00ac                                                                     \u00ac\n\u00ac                                                                     \u00ac\n\u00ac                                                                     \u00ac\n\u00ac                                                                     \u00ac\n\u00ac                                                                     \u00ac\n\u00ac                                                                     \u00ac\n\u00ac                                                                     \u00ac\n\u00ac                                                                     \u00ac\n\u00ac                                                                     \u00ac\n\u00ac                                                                     \u00ac\n\u00ac                                                                     \u00ac\n\u00ac                                                                     \u00ac\n\u00ac                                                                     \u00ac\n#\n#\n)AREA AREA1\n+  This interface allows you to extract EREP data interactively.\n+  This can be done either buy extracting data from the current logrec\n+  or by retrieveing data from archived files. If you leave empty the\n+  field for the archived files HLQ, you will be prompted to choose\n+  one from the list of all available HLQ's.\n+\n+  The following are some of the parameters your can specify:\n+\n+  -%INPUT+\n+      ?1 +- Current logrec  file\n+      ?2 +- Archived logrec file\n+\n+  -%SYSOUT+- Output class of printed report\n+\n+  -%PRINT+selects the type of output to be produced:\n+      ?AL+- all reports\n+      ?PS+- detail edit and detail summary reports\n+      ?SU+- detail summary reports\n+\n+  -%TYPE+is used to specify the records to be extracted:\n+        ?C+ - Channel check/channel report word/subchannel logout\n+        ?D+ - Dynamic device configuration records\n+        ?E+ - System termination (EOD)\n+        ?H+ - Missing interrupt records\n+        ?I+ - System initialization (IPL)\n+        ?M+ - Machine check records\n+        ?O+ - Outboard records; units checks\n+        ?S+ - System abends and other software events\n+        ?T+ - Miscellaneous data reports\n+\n+  %F3+-RETURN\n)INIT\n  .HELP = TUTORPAN                   /* insert name of tutorial panel */\n)REINIT\n)PROC\n)HELP\n  FIELD(FLDNAME) PANEL(PLNAME)       /* insert field help statements  */\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EREPP@04": {"ttr": 3338, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x17\\x01\\x061\\x7f\\x01\\x061\\x9f\\x11\\x13\\x00\\x13\\x00\\x13\\x00\\x00\\xc4\\xc2\\xf0\\xf0\\xf9\\xf8\\xf8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2006-11-13T00:00:00", "modifydate": "2006-11-15T11:13:17", "lines": 19, "newlines": 19, "modlines": 0, "user": "DB00988"}, "text": ")ATTR\n + TYPE(TEXT)   INTENS(LOW)  SKIP(ON)    COLOR(TURQUOISE)\n $ TYPE(INPUT)  INTENS(LOW)  CAPS(OFF)   JUST(LEFT)\n | TYPE(INPUT)  INTENS(HIGH) PAD('_')    CAPS(ON)\n # TYPE(TEXT)   INTENS(HIGH) COLOR(WHITE)\n \u00ac TYPE(OUTPUT) INTENS(HIGH) COLOR(WHITE)\n)BODY WINDOW(74 17)\n+Command ===>$ZCMD                                                   +\n+\n+------------------------------------------------------------------------+\n)MODEL\n\u00acZ                                                                       +\n+------------------------------------------------------------------------+\n)INIT\n&ZTDMARK = ' '\n .ZVARS  = '(PROGRESS)'\n .CURSOR = ZCMD\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EREPP@05": {"ttr": 3340, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x01\\x07\\x01\\x7f\\x01\\x07\\x01\\x8f\\x15\\x08\\x00\\x17\\x00\\x17\\x00\\x00\\xc4\\xc2\\xf0\\xf0\\xf9\\xf8\\xf8@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2007-01-17T00:00:00", "modifydate": "2007-01-18T15:08:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "DB00988"}, "text": ")ATTR\n+ TYPE(TEXT)   INTENS(LOW)  SKIP(ON)\n$ TYPE(INPUT)  INTENS(LOW)  CAPS(OFF)   JUST(LEFT)\n# TYPE(TEXT)   INTENS(HIGH) COLOR(WHITE)\n| TYPE(INPUT)  INTENS(HIGH) PAD('_')    CAPS(ON)\n\u00ac TYPE(OUTPUT) INTENS(HIGH) COLOR(WHITE)\n)BODY WINDOW(40 15)\n+Command ===>$ZCMD                     +\n#    Select one High Level Qualifier   +\n+\n+S Sys  EREP archive HLQ              +\n+- ---- ------------------------------+\n)MODEL CLEAR(SEL)\n|Z\u00acZ   \u00acERPHLQ                        +\n)INIT\n  &ZTDMARK = '____________ End of data ____________'\n .ZVARS  = '(SEL,SYSID)'\n .CURSOR = SEL\n)PROC\n &RISP = .RESP\n VER (&SEL,NB)\n VER (&SEL,LIST,S)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LIBDEF": {"ttr": 3342, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1e\\x00X\\x01\\x061\\x7f\\x01\\x10#\\x1f\\x15\\x10\\x00\\x17\\x00\\x19\\x00\\x00\\xc4\\xc2\\xf0\\xf0\\xf9\\xf8\\xf8@@@'", "ispf": {"version": "01.30", "flags": 0, "createdate": "2006-11-13T00:00:00", "modifydate": "2010-08-19T15:10:58", "lines": 23, "newlines": 25, "modlines": 0, "user": "DB00988"}, "text": "/* rexx                                                               */\narg parmLIB\nif parmLIB = '' THEN parmLIB ='DB00988.V000.EREPRPT'\npanlib  ='DB00988.V000.EREPRPT'\nexeclib ='DB00988.V000.EREPRPT'\n\n/*--------------------------------------------------------------------*/\n/* LIBDEF required datasets                                           */\n/*--------------------------------------------------------------------*/\n\"ALTLIB ACTIVATE APPLICATION(EXEC) DA('\"execlib\"')\"\n\"ISPEXEC LIBDEF ISPPLIB DATASET ID('\"panlib\"')\"\n\n/*--------------------------------------------------------------------*/\n/* Invoke product                                                     */\n/*--------------------------------------------------------------------*/\n\"ISPEXEC SELECT CMD(EREP     \"parmLIB\") PASSLIB NEWAPPL(ERP)\"\n\n/*--------------------------------------------------------------------*/\n/* Free up allocated libraries                                        */\n/*--------------------------------------------------------------------\n\"ISPEXEC LIBDEF ISPPLIB\"\n\"ALTLIB DEACTIVATE APPLICATION(EXEC)\"  */\nexit 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT857/FILE857.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT857", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}