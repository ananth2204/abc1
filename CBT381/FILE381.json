{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011901000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 4291378, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE381.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 4291378, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 4291378, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE381.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00D\\x04'", "DS1TRBAL": "b'\\xab\\x98'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\xbb\\x00\\x03\\x02\\xbf\\x00\\x0b\\x00E'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$DOC": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "./ ADD NAME=PROSE\n1        NORTHWESTERN BANK EXITS, PROGRAMS, AND UTILITIES\n\n  NORTHWESTERN BANK NO LONGER EXISTS.  WE HAVE MERGED WITH FIRST UNION\n  NATIONAL BANK IN CHARLOTTE, N.C. AS PART OF THE CHANGING BANKING\n  INDUSTRY.  I DON'T KNOW IF WE WILL BE ABLE TO MAINTAIN THESE EXITS\n  IN THE FUTURE, BUT WE WILL TRY.  BEST OF LUCK.\n\n\n         THESE ROUTINES ARE COMPLETELY FUNCTIONAL TO THE BEST OF MY\n         KNOWLEDGE.  WE DO NOT GUARANTEE TO KEEP THIS ROUTINE UP TO\n         DATE HOWEVER WE WILL BE GLAD TO ANSWER ANY QUESTIONS AS TIME\n         PERMITS.  GOOD LUCK!\n\n         JOHN V. HOOPER\n         FIRST UNION NATIONAL BANK\n         1 FIRST UNION CENTER\n         301 SOUTH COLLEGE ST.\n         DC-7   FCS-12\n         CHARLOTTE, N.C.  28288\n         (704) 374-2427\n\n\n  THE JES2 EXITS PREFIXED WITH 'JES' ARE FOR MVS SP 1.3.4 (HJE2330),\n  SP 1.3.6 (HJE1367) OR SP 2.1.5 (HJE2157).  THESE EXITS ARE ALMOST\n  IDENTICAL IN FUNCTION TO THE ORIGINAL EXITS WHICH HAVE BEEN\n  AVAILABLE FOR SEVERAL YEARS.  BECAUSE OF CHANGING REQUIREMENTS,\n  THESE EXITS HAVE CHANGED IN OUR CURRENT ENVIRONMENT AND THERE IS NO\n  WAY TO INCORPORATE CHANGES OR ENHANCEMENTS INTO THE OLD EXITS.  THEY\n  WILL BE INCLUDED ONLY FOR THOSE WHO MAY WANT TO COMPARE THE NEW\n  VERSION OF THE EXITS TO THE OLD ONES.\n\n  THE NEW EXITS ARE SET FOR SP 2.2.0 (HJE2221) ALTHOUGH THE CHANGES\n  FROM SP 2.1.5 WERE MINOR.  THESE EXITS ALL START WITH \"J\" FOLLOWED\n  BY AN EXIT NUMBER EXCEPT FOR EXIT 0 WHICH MUST BE NAMED HASPXIT0.\n  THE NEW EXITS DO A LOT MORE BUT THERE IS MORE INSTALLATION DEPENDENT\n  CODE IN THEM.  ALSO, SOME OF THE EXITS REQUIRE MODIFICATIONS TO THE\n  JES2 JQE WHICH FORCES REASSEMBLY OF ALL OF JES2.  THE SMP USERMOD TO\n  ACCOMPLISH THIS IS ALSO INCLUDED AS MEMBER FZ50V0.  I AM INCLUDING\n  ALL OF OUR CURRENT EXITS IN THIS FILE.  SOME MAY BE OF NO INTEREST\n  TO ANYONE.  OTHERS MAY BE CURIOUS AS TO HOW A PARTICULAR FACILITY\n  WAS PROVIDED SO THAT THE TECHNIQUE CAN BE USED FOR OTHER FUNCTIONS.\n  THE FOLLOWING SECTION EXPLAINS THE BASIC FUNCTIONS THAT THESE SERIES\n  OF EXITS PROVIDES:\n\n1                           HOLD PROCESSING\n\n  IBM ONLY PROVIDES ONE FORM OF HOLD PROCESSING AND THAT IS WHAT WE\n  CALL OPERATOR HOLD.  THERE IS ALSO QUEUE HOLD, BUT IS VERY SIMILAR\n  IN ACTUAL PROCESSING.  WE HAD THE REQUIREMENT TO ADD TWO OTHER FORMS\n  OF HOLD TYPES.\n\n  JOBS WHICH REQUIRE OPERATOR ACTION PRIOR TO RELEASING A JOB FOR\n  PROCESSING REPRESENT ONE HOLD TYPE - SETUP HOLD.  UNDER DEFAULT JES2\n  PROCESSING, A /*SETUP CARD TURNS ON THE SAME HOLD BIT AS AN OPERATOR\n  $HJ COMMAND.  THUS THE TAPE LIBRARY MAY RELEASE A JOB BECAUSE SETUP\n  PROCESSING HAS BEEN COMPLETED AND ALLOW A JOB TO RUN THAT THE MASTER\n  CONSOLE OPERATOR MAY WANT TO BE HELD.  BY DISTINGUISHING BETWEEN THE\n  SETUP HOLD AND THE OPERATOR HOLD SITUATIONS, THIS CONFLICT OF\n  INTEREST WILL NOT EXIST.\n\n  OUR DEVELOPMENT STAFF HAD THE REQUIREMENT TO BE ABLE TO SUBMIT LONG\n  RUNNING SERIES OF JOBS THAT WOULD RUN IN A PRESCRIBED ORDER AND\n  STOP EXECUTION IF A FAILURE IN ONE OF THE JOBS OCCURRED.  THIS\n  CAUSED US TO CREATE A NEW CLASSIFICATION OF HOLD - USER HOLD.  ANY\n  JOB WHICH HAS TYPRUN=HOLD ON THE JOB CARD IS PLACED ON USER HOLD.\n  SPECIAL JECL CONTROL CARDS IN OTHER JOBS CAN RELEASE THIS JOB\n  UPON SUCCESSFUL COMPLETION OF EXECUTION.  THIS IS INCORPORATED AS\n  A /*RELEASE CARD.  THIS FORM OF HOLD IS INDEPENDENT FROM BOTH\n  OPERATOR HOLD AND SETUP HOLD.\n\n  BECAUSE WORK SELECTION OPERATES WHILE IN CONTROL OF THE CHECKPOINT,\n  THE HOLD BITS MUST BE IN THE JQE SINCE IT IS THE ONLY CONTROL BLOCK\n  AVAILABLE WITHOUT RELEASING THE CHECKPOINT.  A JQE MODIFICATION IS\n  REQUIRED.\n\n\n1                      DEPENDENT JOB PROCESSING\n\n  AS PREVIOUSLY MENTIONED OUR DEVELOPMENT STAFF HAD THE REQUIREMENT TO\n  BE ABLE TO SUBMIT A LONG RUNNING SERIES OF JOBS THAT WOULD RUN IN A\n  PRESCRIBED ORDER AND STOP EXECUTION IF A FAILURE IN ONE OF THE JOBS\n  OCCURRED.  OTHER SIMILAR REQUIREMENTS IN THE SAME AREA ARE TO SINGLE\n  THREAD JOBS REGARDLESS OF COMPLETION STATUS.  ALSO A MEANS TO\n  PREVENT A JOB FROM RUNNING WHILE ANOTHER JOB IS RUNNING WAS\n  REQUESTED.  OTHER SIMILAR MODIFICATIONS TO ACCOMPLISH THIS HAVE BEEN\n  DISTRIBUTED IN THE PAST BUT THIS IS OUR VERSION.\n\n  /*THREAD ???? NAME\n\n  WHERE ???? MUST BE HOLD OR BLANKS STARTING IN COLUMN 10-14\n        NAME IS A USER DEFINED RESOURCE NAME\n\n  THE THREAD STATEMENT WILL SINGLE THREAD ALL JOBS CONTAINING THE SAME\n  THREAD NAME.  THUS EACH JOB CONTAINING THE SAME NAME WILL RUN ONE\n  AFTER THE OTHER REGARDLESS OF THE STATUS OF THE PREVIOUS JOB.  IF\n  THE OPTIONAL 'HOLD' SPECIFICATION IS MADE, THE JOB WILL BE PLACED ON\n  'USER HOLD' AS WELL WHICH REQUIRES ANOTHER JOB OR OPERATOR TO\n  RELEASE IT PRIOR TO EXECUTION.  THIS CARD IS COLUMN DEPENDENT AND\n  MUST CONTAINS BLANKS OR 'HOLD' IN COLUMN 10 AND THE RESOURCE NAME\n  MUST START IN COLUMN 16\n\n\n  /*EXCLUDE NAME\n\n  WHERE NAME IS THE NAME OF ANOTHER JOB OR A THREAD NAME IN\n             ANOTHER JOB\n\n  THE EXCLUDE STATEMENT WILL PREVENT A JOB FROM RUNNING WHILE A JOB,\n  STARTED TASK, OR USERID BY THE SPECIFIED NAME IS EXECUTING.  ALSO,\n  ANY JOB WHICH IS RUNNING THAT HAS A THREAD NAME OF THE SAME NAME\n  WILL ALSO PREVENT THIS JOB FROM RUNNING.  THE JOB/THREAD NAME IS NOT\n  COLUMN DEPENDENT.\n\n\n  /*RELEASE NAME\n\n  WHERE NAME IS THE NAME OF ANOTHER JOB THAT IS ON OPERATOR HOLD\n\n  THE RELEASE STATEMENT WILL RELEASE ALL JOBS BY THE SPECIFIED JOB,\n  STARTED TASK, OR USERID BY THE SPECIFIED NAME IS EXECUTING.  ALSO,\n  ANY JOB WHICH IS RUNNING THAT HAS A THREAD NAME OF THE SAME NAME\n  WILL ALSO PREVENT THIS JOB FROM RUNNING.  THE JOB/THREAD NAME IS NOT\n  COLUMN DEPENDENT.\n\n\n1                      OUTPUT WORK SELECTION\n\n  IN MOST INSTALLATIONS, PRODUCTION WORK IS MORE IMPORTANT THAN TEST\n  WORK.  THERE ARE TIMES, PERHAPS MOST OF THE TIME, THAT EVEN HUGE\n  PRODUCTION SYSOUT OUTPUT IS MORE IMPORTANT THAN EVEN TINY TEST JOBS.\n  THE ONLY TECHNIQUE THAT NATIVE JES2 HAD GIVEN TO CONTROL THIS\n  SITUATION IS HAVING SEPARATE PRINT CLASSES AND/OR FORM NUMBERS FOR\n  TEST THAN IS USED BY PRODUCTION.  THEN, OPERATIONS MUST REMEMBER TO\n  RESET THE PRINTER TO THE APPROPRIATE CLASS OR FORM FOR TEST WORK TO\n  BE PRINTED.  WE HAVE SET UP A SPECIAL WORK SELECTION CRITERIA CALLED\n  JTYPE TO INDICATE WHICH CATAGORY OF PRINT TO PROCESS.  WE HAVE SET\n  ONLY TWO JOBTYPES - T FOR TEST AND P FOR PRODUCTION.  THE\n  APPROPRIATE TYPES WILL PROCESS IN THE ORDER IN WHICH THEY ARE\n  DEFINED.  IF JTYPE=PT, THEN ALL PRODUCTION WILL PRINT BEFORE ANY\n  TEST.  IF JTYPE=TP, THEN THE REVERSE IS TRUE.  IF JTYPE IS SET TO\n  BLANK, THEN IT IS NOT A FACTOR IN PRINT WORK SELECTION.  THE WORK\n  SELECTION CRITERIA JT MUST BE SET ON THE RIGHT SIDE OF THE SLASH IN\n  THE WORK SELECTION LIST FOR THE DEVICE.  THERE IS ONE PROBLEM.  THIS\n  CRITERIA WILL ONLY WORK FOR LOCAL PRINTERS, LOCAL PUNCHES, AND\n  OFFLOAD DEVICES.  THIS FACILITY WAS NOT PROVIDED BY IBM FOR REMOTE\n  DEVICES.  MAYBE SOME DAY IT WILL.  BUT SINCE IT DOES WORK FOR\n  OFFLOAD DEVICES, THIS FACILITY CAN BE USED TO OFFLOAD ONLY TEST\n  OUTPUT IN CASES WHERE THE SPOOL QUEUE GETS FULL,  AGAIN, THE JTYPE\n  INDICATOR MUST BE IN THE JQE SINCE IT IS THE ONLY CONTROL BLOCK\n  AVAILABLE WHICH CAN BE ACCESSED WITHOUT RELEASING CONTROL OF THE\n  CHECKPOINT.  A JQE MODIFICATION IS REQUIRED.\n\n\n1                 SPECIAL OUTPUT SEPARATOR PROCESSING\n\n  IN A LARGE INSTALLATION, DISTRIBUTION OF PRINTED REPORTS CAN BE A\n  HUGE PROBLEM.  NORMALLY, THE ONLY SOURCE OF DISTRIBUTION INFORMATION\n  IS FROM THE JOBNAME, PROGRAMMER NAME, OR BIN NUMBER.  IN MOST CASES\n  THIS INFORMATION IS EITHER NOT ENOUGH OR JUST PLAIN WRONG.  FOR SOME\n  REPORTS, SPECIAL PROCESSING SUCH AS A PHONE CALL MAY BE IN ORDER.\n  TO PROVIDE THIS FACILITY, WE BUILT A VSAM DISTRIBUTION FILE WHICH IS\n  ACCESSED BY THE JOB SEPARATOR ROUTINE TO EXTRACT DETAILED\n  DISTRIBUTION INFORMATION FOR THE JOB OR USER.  FOR PRODUCTION JOBS,\n  THE KEY TO THE FILE IS THE JOBNAME PLUS THE OUTPUT GROUP NAME.  FOR\n  TEST JOBS, THE KEY IS THE RACF OR OWNERID OF THE USER.  FOR STARTED\n  TASKS THE KEY IS THE JOB NAME.  MAINTENANCE TO THIS FILE IS PROVIDED\n  BY A SERIES OF CICS COMMANDS, BUT THAT CODE IS NOT IN ANY KIND OF\n  SHAPE TO PUT IN THIS FILE.  IT CAN BE MAINTAINED BY REPROING AN ISPF\n  MAINTAINED FILE INTO THE VSAM CLUSTER.  ALL I/O FROM JES2 TO THE\n  VSAM FILE IS PERFORMED BY A SUBTASK TO AVOID STOPPING THE JES2 MAIN\n  TASK DURING THE I/O OPERATION.  THE INFORMATION IN THIS FILE IS AS\n  FOLLOWS:\n\n      8  CHARACTER PRIMARY SEPARATOR/BIN CODE\n      8  CHARACTER SECONDARY SEPARATOR/BIN CODE\n      4  CHARACTER REPORT DUE OUT TIME\n      8  CHARACTER DESCRIPTION\n      20 CHARACTER PROGRAMMER NAME\n      15 CHARACTER LOCATION NAME\n      20 CHARACTER DEPARTMENT NAME\n      10 CHARACTER MAIL CODE\n      15 CHARACTER PHONE NUMBER\n      1  CHARACTER STARTED TASK SYSOUT CLASS\n      1  CHARACTER CA-7 NOTIFICATION INDICATOR\n      100 CHARACTERS OF SPECIAL INSTRUCTIONS\n\n\n1                 STARTED TASK DEFAULT SYSOUT CLASS\n\n  STANDARD JES2 ALLOW THE INSTALLATION TO GIVE ALL STARTED TASKS THE\n  SAME DEFAULT STARTED TASK SYSOUT CLASS.  IN MOST INSTALLATIONS THIS\n  IS SET TO A THROWAWAY CLASS TO AVOID EXCESSIVE GARBAGE PRINT.  WE\n  FELT THIS TO BE RESTRICTIVE AND BUILT A FACILITY TO ALLOW DIFFERENT\n  TASKS TO HAVE DIFFERENT DEFAULT SYSOUT CLASSES.  THIS ALLOWS NOT\n  JUST THE REPORT FOR THE TASK TO PRINT, BUT THE JOBLOG, JCL, AND JOB\n  MESSAGES TO PRINT ALSO.  AS PREVIOUSLY MENTIONED, A SPECIAL VSAM\n  DISTRIBUTION FILE IS ACCESSED TO PRIVIDE DISTRIBUTION INFORMATION\n  FOR THE JOB SEPARATOR ROUTINE.  THIS VSAM FILE IS ALSO USED TO\n  PROVIDE A DEFAULT SYSOUT CLASS FOR STARTED TASKS.  A RECORD IN THIS\n  FILES CAN BE CREATED WITH THE STC NAME AS THE KEY WHICH WILL PROVIDE\n  THE SYSOUT CLASS AT INITIALIZATION TIME.  IF NO RECORD IS FOUND,\n  THEN THE DEFAULT IS USED.  THIS SAME RECORD PROVIDES DISTRIBUTION\n  INFORMATION FOR THAT STARTED TASK.  THIS HAS HELPED A LOT,\n  ESPECIALLY WHEN JCL ERRORS OCCUR FOR IMS OR CICS AND THE JCL LISTING\n  NO LONGER PURGES.\n\n1                 UCC7 (CA-7) JOB NETWORKS\n\n  WE HAVE SOME TIME SENSITIVE REPORTS THAT MUST BE DISTRIBUTED BY A\n  CERTAIN TIME OF THE DAY.  IN THE PAST, THE USER WOULD COMPLAIN ABOUT\n  NOT GETTING THE REPORTS AND THE DISTRIBUTION SECTION WOULD JUST HAVE\n  TO ACCEPT THEIR WORD OR HAVE NO PROOF THAT THE REPORT WAS ACTUALLY\n  PROCESSED.  THE SPECIAL VSAM DISTRIBUTION FILE PREVIOUSLY MENTIONED\n  CONTAINS A CA-7 NOTIFICATION INDICATOR TO INDICATE THAT THE\n  SEPARATOR ROUTINE SHOULD DEMAND A JOB NETWORK FOR THAT REPORT GROUP.\n  THIS JOB NETWORK WOULD THEN BE SATISFIED BY THE DISTRIBUTION GROUP\n  WHEN THE REPORT WAS PLACED IN THE APPROPRIATE BIN OR CART.  THIS\n  PROVIDES ACCOUNTABILITY FOR SPECIFIC OUTPUT GROUPS.  THE ACTUAL\n  INTERFACE WITH CA-7 IS ACCOMPLISHED BY A JES2 SUBTASK TO AVOID\n  STOPPING THE JES2 MAIN TASK DURING THIS PROCESS.\n\n  UCC-7 (CA-7) IS A PRODUCT OF COMPUTER ASSOCIATES\n\n\n1                 /*JOBPARM MODIFICATIONS\n\n  WE HAVE MADE SOME EXTENSIONS TO THE KEYWORDS ALLOWED ON THE JES2\n  JOBPARM STATEMENT.  ONE EXTENSION WAS TO ALLOW A TEST JOB TO SPECIFY\n  A DIFFERENT OWNER FOR DISTRIBUTION PURPOSES THAN THE SUBMITTOR.  WE\n  ALSO USE THE XBATCH FACILITY IN JES2 AND NEEDED A WAY TO SET THE FCB\n  AND UCS ID FOR XBATCH JOBS.  THE FOLLOWING KEYWORDS WERE ADDED TO\n  THE JOBPARM STATEMENT TO PROVIDE THESE FACILITIES:\n\n      OWNERID=      1 TO 8 CHARACTER ID OF THE OWNER OF THIS TEST JOB\n      FCB=          1 TO 4 CHARACTER DEFAULT FCB FOR THE JOB\n      UCS=          1 TO 4 CHARACTER DEFAULT UCS ID FOR THE JOB\n\n\n1                 NJE USER JOB HEADERS\n\n  WITH THE MODIFICATIONS TO THE JQE AND THE DESIRE TO SAVE JOB\n  ACCOUNTING INFORMATION LONGER THAN 4 CHARACTERS, A USER NETWORK JOB\n  HEADER WAS CREATED.  ALL NECESSARY JOB RELATED INFORMATION IS STORED\n  IN THIS RECORD SO THAT IT CAN BE PRESERVED DURING A SPOOL\n  OFFLOAD/RELOAD OPERATION AND ACROSS AN NJE NODE.\n\n\n                       SPOOL PARTITIONING\n\n  OUR MONTH END PROCESSING REQUIRES SEVERAL ADDITIONAL SPOOL VOLUMES\n  TO BE ADDED TO JES2.  AFTER MONTH END, THEY ARE DRAINED AND RESERVED\n  AS EMERGENCY SPARE VOLUMES IN CASE WE HAVE HARDWARE FAILURES.  WE\n  ALSO ONLY PLAN ONE OUTAGE A MONTH ON OUR PRODUCTION CPU - RIGHT\n  BEFORE MONTH END.  WE CANNOT GET THE SPOOL VOLUMES DRAINED IF SOME\n  OF THE LONG RUNNING STARTED TASKS SUCH AS VTAM USE THAT VOLUME.  WE\n  WROTE A SPOOL PARTITIONING EXIT TO INSURE THAT STARTED TASKS ONLY\n  USE THE NORMAL SPOOL VOLUMES.\n\n\n                       STANDARDS ENFORCEMENT\n\n  EACH INSTALLATION HAS SPECIFIC JCL REQUIREMENTS WHICH MUST BE MET.\n  ACCOUNTING VERIFICATION IS ONE.  THIS CAN BE DONE IN EXIT2 OR EXIT3\n  BUT CREATES A PROBLEM IN AN NJE ENVIRONMENT WHERE DIFFERENT JOB\n  ACCOUNTING STANDARDS EXIST.  ALL OF OUR JCL VERIFICATION IS\n  PERFORMED IN EXIT6 WHICH SOLVES THE NJE PROBLEM AND ALLOWS US TO\n  CHECK EVERY JCL STATEMENT FOR ANY RESTRICTED PARAMETERS.  ALL ERROR\n  MESSAGES ARE WRITTEN TO THE JOB MESSAGE DATA SET AS IF IT WERE A\n  STANDARD JCL ERROR OR COMMENT.  THE CLASS OF THE JOB AND THE\n  PRIORITY ARE ALSO SET BY THIS EXIT BASED ON RESOURCE REQUIREMENTS.\n\n\n1                      COMMAND ENHANCEMENTS\n\n  A NUMBER OF JES2 COMMANDS WERE ADDED TO PROVIDE MORE DETAILED\n  INFORMATION OR SUPPORT FOR ADDITIONAL FACILITIES.  A BRIEF LIST\n  FOLLOWS:\n\n  $LF    - A DETAILED VERSION OF THE IBM $DF COMMAND GIVING JOBNAME,\n           LINE OR PAGE COUNT AS WELL AS OTHER INFORMATION.\n\n  $DV    - A COMMAND THAT CAN LIST DASD VOLUMES BY DEVICE ADDRESS OR\n           BY VOLSER OR PREFIX.  IT IS HARD TO FIND A SPECIFIC DASD\n           VOLSER WHEN USING THE MVS 'D U' COMMAND\n\n  $QJ    - A FUNCTIONAL REPLACEMENT FOR THE IBM $DJ COMMAND.  THIS\n           VERSION LISTS ADDITIONAL INFORMATION TO SUPPORT THE\n           MULTIPLE CATAGORIES OF HOLD, FAILURE FLAGS, TEST OR\n           PRODUCTION INDICATORS AND OWNER ID.\n\n  $QN    - A FUNCTIONAL REPLACEMENT FOR THE IBM $DN COMMAND.  THIS\n           VERSION LISTS ADDITIONAL INFORMATION TO SUPPORT THE\n           MULTIPLE CATAGORIES OF HOLD, FAILURE FLAGS, TEST OR\n           PRODUCTION INDICATORS AND OWNER ID.\n\n  $SL    - SUPPORT FOR THE SETUP HOLD FACILITY.  THIS COMMAND WILL\n           EITHER LIST ALL JOBS ON THE SETUP HOLD QUEUE OR LIST\n           THE ACTUAL /*SETUP CONTROL CARDS FOR AN INDIVIDUAL JOB.\n\n  $SR    - SUPPORT FOR THE SETUP HOLD FACILITY.  THIS COMMAND WILL\n           RELEASE JOBS FROM THE SETUP HOLD QUEUE.\n\n  $UL    - SUPPORT FOR THE USER HOLD FACILITY.  THIS COMMAND WILL\n           LIST JOBS IN THE USER HOLD QUEUE.\n\n  $UA    - SUPPORT FOR THE USER HOLD FACILITY.  THIS COMMAND WILL\n           PLACE JOBS IN THE USER HOLD QUEUE.\n\n  $UR    - SUPPORT FOR THE USER HOLD FACILITY.  THIS COMMAND WILL\n           RELEASE JOBS FROM THE USER HOLD QUEUE.\n\n  $TJIT  - SUPPORT FOR THE JOB INFORMATION TASK OR VSAM DISTRIBUTION\n           FILE FACILITY.  THIS COMMAND CAN START, STOP, RESTART,\n           LIST STATUS, OR LIST THE DETAIL RECORD FROM THE VSAM FILE.\n\n  $LOAD  - ALLOW JES2 EXITS TO BE RELOADED WITHOUT PERFORMING A JES2\n           HOT START.\n\n  $TUCC7 - SUPPORT FOR THE UCC-7 (CA-7) INTERFACE.  THIS COMMAND CAN\n           START, STOP, RESTART, OR LIST THE STATUS OF THE INTERFACE.\n\n1                   SOURCE MEMBER DESCRIPTIONS\n\n  JES$LF   - (OLD) A JES2 EXIT (5) TO PROVIDE OPERATOR CAPABILITY TO\n             DISPLAY DETAILED INFORMATION ABOUT JOBS IN THE PRINT\n             QUEUE.  IT IS DESIGNED TO ENHANCE THE DISPLAY NORMALLY\n             PROVIDED BY THE $DF COMMAND.\n\n  JESEXIT1 - (OLD) A JES2 EXIT (1) TO PROVIDE ENHANCEMENTS TO THE IBM\n             SUPPLIED SEPARATOR PAGE.  SUPPORT IS ALSO PROVIDED FOR\n             THE KODAK KOMSTAR MICROFICHE PROCESSOR, THE DATAGRAPHIX\n             ARIS II MICROFICHE PROCESSOR, THE IBM 6670 DOCUMENTATION\n             PROCESSOR AND THE XEROX 9700 PRINTER.\n\n  JESEXIT3 - (OLD) A JES2 EXIT (3) TO CREATE AN NJE JOB HEADER TO SAVE\n             JOB ACCOUNTING INFORMATION LONGER THAN 4 CHARACTERS.\n             NOTE THAT THIS EXIT IS USED IN CONJUNCTION WITH JESEXIT7\n             TO PRODUCE AN SMF TYPE 30 RECORD FOR NJE PRINT JOBS AT\n             THE RECEIVING NODE TO ALLOW JOB ACCOUNTING FOR NJE PRINT.\n\n  JESEXIT5 - (OLD) A JES2 EXIT (5) TO FILTER JES2 COMMANDS TO DISALLOW\n             CERTAIN COMMANDS OR OPERANDS ON THE COMMANDS.\n\n  JESEXIT6 - (OLD) A JES2 EXIT (6) TO PERFORM STANDARDS ENFORCEMENT\n             FOR JCL AS WELL AS SET THE JOB CLASS BASED UPON THE\n             RESOURCES SUCH AS TAPE UNITS, REGION SIZE, OR CPU TIME.\n             VIOLATIONS TO STANDARDS AND JOB CLASS REPORTING IS MADE\n             TO THE JOB MESSAGE DATA SET FOR THE JOB AS IF THE\n             CONVERTER WAS PRODUCING THE ERROR MESSAGES.\n\n  JESEXIT7 - (OLD) A JES2 EXIT (7) TO CREATE AN SMF TYPE 30 RECORD FOR\n             NJE PRINT JOBS AT THE RECEIVING NODE TO ALLOW JOB\n             ACCOUNTING FOR NJE PRINT.  NOTE THAT THIS EXIT IS USED IN\n             CONJUNCTION WITH JESEXIT3 TO PROVIDE JOB ACCOUNTING\n             INFORMATION.\n\n  JESEXIT9 - (OLD) A JES2 EXIT (9) TO ABEND TEST JOBS WHICH EXCEED THE\n             ESTIMATED LINE COUNT WHILE ALLOWING ALL OTHER JOBS TO\n             CONTINUE.\n\n  JESXIT17 - (OLD) A JES2 EXIT (17) TO VALIDATE THE SIGNON CARD FROM\n             BSC RJE WORKSTATIONS.  THIS EXIT WILL ISSUE A CALL TO\n             ACF2 TO VALIDATE THE PASSWORD FOR THE REMOTEID.  THE\n             SIGNON ATTEMPT WILL BE REJECTED WITH APPROPRIATE MESSAGES\n             IF THE PASSWORD IS INVALID.\n\n  JESXIT21 - (OLD) A JES2 EXIT (21) TO EXAMINE JES2 SMF RECORDS TO\n             INSERT JOBNAME IN THE SMF TYPE57 RECORD.  THIS NJE SYSOUT\n             TRANSMISSION RECORD CONTAINS JOB NUMBER BUT NO JOB NAME.\n             IT IS DIFFICULT TO PRODUCE NJE STATISTICS WITHOUT THE\n             JOBNAME.\n\n1 J001$SP  - A JES2 EXIT (1) TO PROVIDE ENHANCEMENTS TO THE IBM\n             SUPPLIED SEPARATOR PAGE.  THIS EXIT WILL REQUEST\n             DISTRIBUTION INFORMATION FROM A JES2 TASK WHICH EXTRACTS\n             THIS INFORMATION FROM A VSAM FILE.  SUPPORT IS ALSO\n             PROVIDED FOR THE KODAK KOMSTAR MICROFICHE PROCESSOR, THE\n             DATAGRAPHIX ARIS II MICROFICHE PROCESSOR, THE XEROX 3700\n             PRINTER AND THE XEROX 9700 PRINTER.  ALSO REQUIRES EXITS\n             HASPXIT0, J024JIT, J015$SP (FOR 3700 SUPPORT), J005JIT,\n             AND J005UCC7 FOR FULL SUPPORT.  THERE ARE SEVERAL\n             ASSEMBLY VARIABLES IN THE EXIT TO SET OPTIONS.  SEE THE\n             COMMENTS IN THE PROGRAM\n\n  J003STCS - A JES2 EXIT (3) TO SET THE DEFAULT SYSOUT CLASS AND\n             PROGRAMMER NAME FOR STARTED TASKS.  THIS INFORMATION IS\n             PROVIDED BY A JES2 TASK WHICH EXTRACTS THIS INFORMATION\n             FROM A VSAM FILE.  THIS ALLOWS SOME STARTED TASKS TO\n             DEFAULT TO A THROWAWAY SYSOUT CLASS AND OTHERS TO PRINT.\n             THIS EXIT ALSO REQUIRES EXITS HASPXIT0 J024JIT, J005JIT,\n             AND J005UCC7 FOR FULL SUPPORT.\n\n  J003UNJH - A JES2 EXIT (3) TO CREATE AN NJE JOB HEADER TO SAVE\n             JOB RELATED INFORMATION ACCROSS AN NJE ENVIRONMENT AND\n             SPOOL OFFLOAD/RELOAD OPERATIONS.  THIS INFORMATION JOB\n             ACCOUNTING INFORMATION LONGER THAN 4 CHARACTERS, AND\n             INSTALLATION FIELDS IN THE JQE.  THE ACCOUNTING\n             INFORMATION IS USED BY EXIT J007JQEU TO PRODUCE AN SMF\n             TYPE 30 RECORD FOR NJE PRINT JOBS AT THE RECEIVING NODE\n             TO ALLOW JOB ACCOUNTING FOR NJE PRINT.\n\n  J004$JEC - A JES2 EXIT (4) TO PROCESS THE DEPENDENT JOB CONTROL\n             JECL STATEMENTS.  THIS EXIT WILL PROCESS THE /*SETUP,\n             /*THREAD, /*EXCLUDE, AND /*RELEASE JECL STATEMENTS.\n             THIS EXIT FILLS IN MANY OF THE USER FIELDS IN THE\n             MODIFIED JQE.  ALSO REQUIRES EXITS J005$SL, J005$SR,\n             J007RLSE, J014$JCL, AND J020UHLD FOR FULL SUPPORT.\n\n  J004$OWN - A JES2 EXIT (4) TO LOCAL EXTENSIONS TO THE /*JOBPARM\n             JECL STATEMENT.  THESE FIELDS ARE OWNERID, FCB, AND\n             UCS.  THIS ALLOWS XBATCH JOBS TO SPECIFY EXTRA JOB\n             ATTRIBUTES.\n\n  J005$DV  - A JES2 EXIT (5) TO PROVIDE OPERATOR CAPABILITY TO DISPLAY\n             DASD VOLUMES BY DEVICE ADDRESS, VOLSER, OR VOLSER PREFIX.\n             THE MVS 'D U' COMMAND IS CUMBERSOME  WHEN LOOKING FOR\n             SPECIFIC VOLUMES.\n\n  J005$LF  - A JES2 EXIT (5) TO PROVIDE OPERATOR CAPABILITY TO DISPLAY\n             DETAILED INFORMATION ABOUT JOBS IN THE PRINT QUEUE.  IT\n             IS DESIGNED TO ENHANCE THE DISPLAY NORMALLY PROVIDED BY\n             THE $DF COMMAND.\n\n1 J005$QJ  - A JES2 EXIT (5) TO PROVIDE A FUNCTIONAL REPLACEMENT FOR\n             THE IBM $DJ COMMAND.  IT WAS WRITTEN TO PROVIDE A MEANS\n             TO DISPLAY THE JOB RELATED INFORMATION ADDED BY OUR\n             INSTALLATION.\n\n  J005$QN  - A JES2 EXIT (5) TO PROVIDE A FUNCTIONAL REPLACEMENT FOR\n             THE IBM $DN COMMAND.  IT WAS WRITTEN TO PROVIDE A MEANS\n             TO DISPLAY THE JOB RELATED INFORMATION ADDED BY OUR\n             INSTALLATION.\n\n  J005$SL  - A JES2 EXIT (5) TO PROVIDE A WAY TO LIST ALL JOBS IN\n             A USER DEFINED QUEUE CALLED THE SETUP QUEUE.  THIS QUEUE\n             PREVENTS JOBS FROM EXECUTING.  IT ALSO ALLOWS THE CONSOLE\n             OPERATOR THE ABILITY TO RELIST THE /*SETUP CARDS FOR EACH\n             JOB.\n\n  J005$SR  - A JES2 EXIT (5) TO PROVIDE A WAY TO RELEASE A JOB FROM\n             A USER DEFINED QUEUE CALLED THE SETUP QUEUE.  THIS QUEUE\n             PREVENTS JOBS FROM EXECUTING.\n\n  J005$UA  - A JES2 EXIT (5) TO PROVIDE A WAY TO REMOVE A JOB FROM\n             A USER DEFINED QUEUE CALLED THE USER HOLD QUEUE.  THIS\n             QUEUE PREVENTS A JOB FROM EXECUTING (NOT FROM PRINTING).\n\n  J005$UH  - A JES2 EXIT (5) TO PROVIDE A WAY TO PLACE A JOB IN A\n             USER DEFINED QUEUE CALLED THE USER HOLD QUEUE.  THIS\n             QUEUE PREVENTS A JOB FROM EXECUTING (NOT PRINTING).\n\n  J005$UL  - A JES2 EXIT (5) TO PROVIDE A WAY TO LIST ALL JOBS IN\n             A USER DEFINED QUEUE CALLED THE USER HOLD QUEUE.  THIS\n             QUEUE PREVENTS A JOB FROM EXECUTING (NOT PRINTING).\n\n  J005FILT - A JES2 EXIT (5) TO FILTER JES2 COMMANDS TO DISALLOW\n             CERTAIN COMMANDS OR OPERANDS ON THE COMMANDS.\n\n  J005JIT  - A JES2 EXIT (5) TO PROVIDE A COMMAND INTERFACE TO THE\n             JOB INFORMATION TASK THAT READS JOB DISTRIBUTION\n             INFORMATION FROM A VSAM FILE.  THIS CAMMAND CAN START,\n             STOP, RESTART, MODIFY, OR PROVIDE STATUS ABOUT THE TASK.\n             IT CAN ALSO LIST INDIVIDUAL RECORDS.\n\n  J005LOAD - A JES2 EXIT (5) TO PROVIDE A MEANS OF RELOADING AN EXIT\n             ROUTINE WITHOUT HAVING TO PERFORM A HOT START.\n\n  J005UCC7 - A JES2 EXIT (5) TO PROVIDE A COMMAND INTERFACE TO THE\n             UCC7 INTERFACE TASK THAT CAN DEMAND A JOB NETWORK ON\n             BEHALF OF THE SEPARATOR ROUTINE BASED ON INFORMATION FROM\n             A VSAM FILE.  THIS COMMAND CAN START, STOP, RESTART,\n             OR PROVIDE STATUS ABOUT THE TASK.\n\n  J006STDS - A JES2 EXIT (6) TO PROCESS THE INTERNAL TEXT FOR ALL\n             JOBS.  THIS ROUTINE PROVIDES ACCOUNTING VERIFICATION,\n             ENFORCEMENT OF STANDARDS, AND SETS CLASS AND PRIORITY\n             BASED ON THE RESOURCES REQUIRED BY A JOB.\n\n1 J007ENDJ - A JES2 EXIT (7) TO WRITE A SPECIAL END OF JOB MESSAGE\n             TO THE CONSOLE (NOT THE JOB LOG).  IT IS VERY SIMILAR TO\n             THE NORMAL END OF JOB MESSAGE EXCEPT IT INDICATES WHETHER\n             THE JOB ABENDED OR HAD A JCL ERROR.  PRODUCTION JOBS HAVE\n             A DIFFERENT MESSAGE NUMBER SO A WTO EXIT ROUTINE COULD\n             MAKE ABEND AND JCL ERROR MESSAGES FOR THESE JOBS NON ROLL\n             DELETABLE TO BRING THESE FAILURES TO THE IMMEDIATE\n             ATTENTION OF THE CONSOLE OPERATOR.\n\n  J007JCTU - A JES2 EXIT (7) TO RETAIN THE SPECIAL USER FIELDS IN\n             THE JQE BY COPYING THEM TO THE NJE JOB HEADER.  THIS EXIT\n             WILL PERFORM THIS TASK EACH TIME THE JCT IS WRITTEN BACK\n             TO THE SPOOL.  THIS RETAINS THIS INFORMATION IN AN NJE\n             ENVIRONMENT AND ACROSS A SPOOL OFFLOAD/RELOAD OPERATION.\n             THIS FUNCTION ALSO REQUIRES J007REST TO RESTORE THESE\n             FIELDS AFTER A RELOAD OPERATION.\n\n  J007JQEU - A JES2 EXIT (7) TO UPDATE THE JQE USER FIELDS FROM THE\n             AVAILABLE INFORMATION EACH TIME THE JCT IS REWRITTEN TO\n             THE SPOOL.  THIS EXIT ALSO WRITES AN SMF TYPE 30 RECORD\n             FOR ALL NJE PRINT JOBS TO PROVIDE ACCOUNTING INFORMATION\n             FOR JOBS WHICH ONLY PRINT AT THIS NJE NODE.\n\n  J007RACF - A JES2 EXIT (7) TO RETAIN THE RACF USERID ACROSS AN\n             NJE SYSTEM.  IBM INTENTIONALLY ZEROS OUT THE RACF\n             FIELDS IN THE JCT PRIOR TO TRANSMISSION.  THIS FORCES\n             JOBS TO CODE USER= AND PASSWORD= ON THE JOB CARD.  THIS\n             EXIT RETAINS THE USERID IN A USER NJE JOB HEADER AND\n             RESTORES IT AFTER TRANSMISSION.  THE EXIT J003UNJH IS\n             ALSO REQUIRED FOR THIS FUNCTION TO BUILD THE USER NJE\n             JOB HEADER.\n\n  J007RLSE - A JES2 EXIT (7) TO PERFORM RELEASE PROCESSING FOR ALL\n             JOBS THAT CONTAIN A /*RELEASE CONTROL CARD.  THIS EXIT\n             WILL RELEASE ALL JOBS WITH THE SPECIFIED JOB NAME AND\n             MATCHING OWNERID NAME AT END OF JOB IF THIS JOB DID NOT\n             ABEND OR HAVE A JCL ERROR.  MESSAGES ARE WRITTEN TO THE\n             CONSOLE GIVING THE RESULTS OF PROCESSING.\n\n  J011SPRT - A JES2 EXIT (11) TO PROVIDE SPOOL PARTITIONING.  WHEN\n             SPOOL VOLUMES ARE STARTED AND DRAINED TO ACCOMODATE\n             FLUCTUATING SPOOL REQUIREMENTS, STARTED TASKS MAY USE\n             THE NEW SPOOL VOLUMES.  THIS WILL PREVENT THAT SPOOL\n             FROM DRAINING UNTIL THE STARTED TASK TERMINATES AND IS\n             PURGED.  THIS EXIT PROVIDES AN ELIGIBLE LIST OF SPOOL\n             VOLUMES FOR STARTED TASKS TO PREVENT THIS FROM OCCURRING.\n\n  J014$JSL - A JES2 EXIT (14) TO PERFORM JOB SELECTION BASES ON USER\n             FIELDS IN THE JQE.  THIS IS WHERE THE USE OF /*THREAD AND\n             /*EXCLUDE JECL CARDS IS PERFORMED AS WELL AS HONORING THE\n             USER HOLD ATTRIBUTE.  BECAUSE THIS PROCESSING REQUIRES\n             CONTROL OF THE JES2 CHECKPOINT, THESE FIELDS MUST BE IN\n             THE JQE TO AVOID RELEASING THE CHECKPOINT.  IF THE\n             ESOTERIC ROUTINE FACILITY IS GOING TO BE USED, USE THE\n             EXIT 14 ROUTINE PROVIDED IN MODULE JESRESRC INSTEAD OF\n             THIS MODULE.\n\n  J015$SP  - A JES2 EXIT (15) TO GENERATE DJDE CONTROL STATEMENTS FOR\n             A XEROX 3700 PRINTER.  THIS EXIT REQUIRES THAT THE 9700\n             SUPPORT PRODUCT XJCF MARKETED BY XENOS COMPUTER SYSTEMS\n             BE INSTALLED.\n\n  J020UHLD - A JES2 EXIT (20) TO CHANGE TYPERUN=HOLD TO A USERHOLD\n             ATTRIBUTE.\n\n  J021$57  - A JES2 EXIT (21) WHICH MODIFIES THE SMF TYPE 57 RECORD\n             WHICH RECORDS NJE ACTIVITY.  FOR SOME STRANGE REASON,\n             THIS RECORD DOES NOT CONTAIN JOBNAME.  THE NETWORK\n             ACCOUNTING FIELD IS OVERLAID WITH THE JOBNAME.  WHAT\n             GOOD IS THIS INFORMATION WITHOUT BEING ABLE TO TIE IT\n             BACK TO A JOB?\n\n  J024JIT  - A JES2 EXIT (24) WHICH STARTS THE TWO JES2 USER SUBTASKS\n             AT INITIALIZATION TIME.  STANDARD JES2 INTERFACES ARE\n             USED TO PERFORM THIS FUNCTION.  CODE IS IN THE EXITS\n             THEMSELVES TO SHUTDOWN WHEN JES2 IS TERMINATED.  THIS\n             EXIT REQUIRES EXIT HASPXIT0 TO ESTABLISH THE SUBTASK\n             ENVIRONMENT.\n\n1 J255$FMT - A JES2 EXIT (24) TO FORMAT JOB RELATED INFORMATION FOR A\n             SPECIFIC JOB IN THE PASSED PARAMETER LIST.  THIS ROUTINE\n             IS USED BY SEVERAL EXITS TO DISPLAY STATUS ABOUT A JOB.\n\n  HASPXIT0 - A JES2 EXIT (0) TO ALLOCATE A USER CONTROL TABLE (UCT),\n             ALLOW THE JIT VSAM DATASET NAME TO BE SPECIFIED IN THE\n             JES2 PARAMETERS, AND ESTABLISH THE USER WORK SELECTION\n             FACILITY FOR FILTERING TEST AND PRODUCTION WORK ON LOCAL\n             PRINTERS, PUNCHES, AND OFFLOAD DEVICES.\n\n  JESRESRC - A SERIES OF JES2 EXITS (4,5, AND 14) TO PROVIDE ESOTERIC\n             JOB ROUTING.  THIS IS A FUNCTIONAL DUPLICATION OF THE\n             MELLON BANK MODS TO PROVIDE THE SAME FUNCTION.  THEY\n             WERE REWRITTEN TO FIT INTO OUR SYSTEM OF EXITS.  THE\n             JOB SELECT EXIT 14 IN THIS MODULE IS A REPLACEMENT FOR\n             J014$JSL.  USE THIS EXIT 14 ROUTINE IF THIS FACILITY\n             IS BEING USED OR USE THE OTHER EXIT 14 ROUTINE IF ONLY\n             IMPLEMENTING THE USER AND SETUP HOLD FACILITY.\n\n  FZ50V0   - A USERMOD TO UPDATE THE JES2 JQE AND QSE TO ADD USER\n             FIELDS.  IT ALSO FORCES REASSEMBLY OF EVERY MODULE\n             IN JES2 TO USE THE UPDATED MACROS.\n\n  FZ51V0   - A USERMOD TO ADD ALL OF THE USER MAPPING MACROS TO THE\n             JES2 MACRO LIBRARY.  MANY OF THE EXITS REQUIRE THESE\n             MACROS.\n\n  CONSOLE  - A TSO COMMAND TO ALLOW A TSO TERMINAL TO EFFECTIVELY BE\n             TURNED INTO A CONSOLE.  CODE WILL FUNCTION ONLY UNDER\n             XA.  A USER SUPPLIED SVC MUST BE SUPPLIED TO GET INTO\n             KEY ZERO FOR AUTHORIZATION PURPOSES.\n\n  DSAT     - A TSO COMMAND TO RETURN DATA SET ATTRIBUTES OF DATA SETS\n             AT A SPECIFIED INDEX LEVEL.  THIS CODE IS LOOSELY BASED\n             ON A COMMAND FROM FPL BUT DOES NOT HAVE ALL OF THE\n             OPTIONS.  WHAT MAKES THIS ONE DIFFERENT IS THAT IT IS\n             WRITTEN FOR DFP ONLY AND RETURNS GDG BASE INFORMATION\n             AS WELL AS VSAM ATTRIBUTES.\n\n  TESTJES  - A PROGRAM WHICH CAN BE USED TO TEST THE SP 1.3.3/1.3.4\n             VERSION OF JESEXIT6 BY SETTING UP A FAKE EXIT ENVIRONMENT\n             AND THEN CALLING THE MAIN ENTRY POINT OF THE EXIT.\n\n  TESTJ136 - A PROGRAM WHICH CAN BE USED TO TEST THE SP 1.3.6/2.1.5\n             VERSION OF JESEXIT6 BY SETTING UP A FAKE EXIT ENVIRONMENT\n             AND THEN CALLING THE MAIN ENTRY POINT OF THE EXIT.\n\n  PRINTDOC - SAMPLE JCL TO PRINT THIS MEMBER ($DOC).\n\n./ ADD NAME=EXIT6\n1                         J 0 0 6 S T D S\n\n         THIS JES2 EXIT PROGRAM IS DESIGNED TO RUN AT CONVERTER\n         TIME TO ENFORCE INSTALLATION JCL STANDARDS AND TO DETERMINE\n         THE APPROPRIATE JOB CLASS BASED ON DEVICE UTILIZATION.\n\n         THERE IS SOME INSTALLATION DEPENDENT CODE IN THIS EXIT\n         ESPECIALLY IN THE JOB ACCOUNTING VERIFICATION ROUTINE\n         AND THE DSNAME STANDARDS ENFORCEMENT ROUTINE.  THE JOB\n         CLASSES ARE SET BY WAY OF A TABLE AS ARE THE UNITNAME\n         ATTRIBUTES.  MUCH MORE COULD BE ENFORCED HERE OR IN\n         OTHER EXITS OR BY A GOOD SECURITY SYSTEM.  WE FELT THAT\n         IT WAS BETTER TO CATCH MANY ERRORS AT READER TIME\n         RATHER THAN WAIT IN SOME CASES A LONG PERIOD OF TIME\n         FOR VIOLATIONS TO OCCUR.\n\n1        VIOLATIONS OF JCL STANDARDS ARE DOCUMENTED BY MESSAGES\n         WRITTEN TO THE JES2 MESSAGE DATA SET FOR THE JOB AND\n         FLAGGED FOR JCL ERROR BY THE USE OF THE JES2 EXIT RETURN\n         CODE TO THE JES2 CONVERTER SUB-TASK.\n\n         THIS EXIT USES THE INTERNAL TEXT DATA SET FOR ITS\n         PROCESSING.  JES2 PASSES EACH INTERNAL TEXT STATEMENT\n         TO THIS EXIT FOR EXAMINATION AND/OR MODIFICATION.  THE\n         EXIT WILL MAINTAIN A TABLE OF DATASET NAMES AND DEVICE\n         COUNTS TO BE USED AT END OF PROCESSING FOR DETERMINING\n         JOB CLASS.  THE ACB FOR THE MESSAGE DATA SET IS IN THE\n         DTE CONTROL BLOCK AND CAN BE USED TO ISSUE ERROR MESSAGES\n         TO THE JOB MESSAGE PORTION OF THE LISTING.\n\n         ALSO, THE CONVERTER IS A DUMB ANIMAL WHEN IT COMES TO\n         SYNTAX CHECKING.  CHECKING IS MADE FOR KEYWORD VALUES,\n         BUT NONE IS MADE ON THE VALUE FOR THE KEYWORD.  IE.,\n         50 CHARACTER DATA SET NAMES, 20 CHARACTER VOLUME SERIAL\n         NUMBERS, AND NUMEROUS SYNTAX ERRORS CAN PASS UNDETECTED\n         THROUGH THE CONVERTER.  THESE ERRORS WILL BE CAUGHT BY\n         THE INTERPRETER WHEN THE JOB GOES INTO EXECUTION, BUT\n         THIS EXIT MUST PROCESS THEM.  CURRENTLY, ALL DETECTED\n         ERRORS OF THIS TYPE WILL ISSUE A MESSAGE DESCRIBING THE\n         ERROR AND FLAG THE JOB TO FAIL.  THE ESTAE ROUTINE,\n         WHEN ENTERED FOR AN ABEND, WILL SET THE CLASS TO 'A'\n         AND RECOVER TO PROTECT THE CONVERSION SUBTASK FROM ABEND\n         AND CONSEQUENT LOSS OF THE JOB.\n\n1        CLASS DETERMINATION IS MADE BY KEEPING A COUNT OF ALL\n         OF THE MOUNTABLE DEVICES USED PER STEP.  THESE COUNTS\n         ARE SAVED IN AN INTERNAL TABLE TO BE PROCESSED AT END\n         OF INTERNAL TEXT.  ALSO SAVED IN THE TABLE ARE ENTRIES\n         FOR DD STATEMENTS WHICH USED MOUNTABLE DEVICES\n         FOR USE IN REFERBACKS AND UNIT=AFF.  IF THE UNIT\n         HAS NOT BEEN DETERMINED AT THE END OF PROCESSING\n         FOR A DD STATEMENT, THE CATALOG IS SEARCHED.  IF THE\n         CATALOGED DEVICE IS SYSDA, THE UCBS ARE SEARCHED\n         TO DETERMINE IF THE PACK IS MOUNTED AS PRIVATE,\n         RESERVED, OR PERMANENTLY RESIDENT.  IF THE PACK\n         IS NOT FOUND, A PRIV DISK MOUNT WILL BE CHARGED.\n         CLASS IS SET ON THE BASIS OF THE MAXIMUM NUMBER OF TAPES\n         PER STEP, MAXIMUM NUMBER OF PRIV DASD DEVICES PER STEP,\n         TOTAL MAXIMUM MOUNTABLE DEVICES PER STEP, MAXIMUM REGION\n         PER STEP, AND ESTIMATED EXECUTION TIME FOR JOB.\n\n         INPUT TO THIS EXIT DURING TESTING WAS CREATED BY USING\n         ONE OF THE LATEST VERSIONS OF \"QUEUE\" ON THE MODS TAPES\n         WHICH ALLOWS ACCESS TO THE INTERNAL TEXT DATA SET\n         FILE 5.  ONCE LISTING THE INTERNAL TEXT DATASET, THE\n         USER CAN THEN ENTER \"SAVE DSN\" AND CREATE A DATASET\n         WHICH THE TSO DRIVER CAN USE.\n\n         THE TSO DRIVER PROGRAM IS TESTJES OR TESTJ136.  READ THE\n         DOCUMENTATION FOR THAT PROGRAM.\n\n1        THERE ARE SEVERAL ASSEMBLER VARIABLES AVAILABLE TO TAILOR\n         THE PROGRAM TO CERTAIN OPTIONS.\n\n         &TSO     'NO'         ASSEMBLE FOR TSO TESTING\n         &CAMLST  'YES'        SEARCH CATALOG FOR DATASETS\n         &ERRMSG  'YES'        PRODUCE JOBFAILED BY EXIT MESSAGE\n         &SDUMP   'YES'        PRODUCE CONSOLE DUMP FOR ABENDS\n         &FLUSH   'YES'        FLUSH JOB FOR STANDARDS VIOLATIONS\n         &MODIFY  'YES'        MODIFY JOB CLASS IN JCT AND JQE\n         &UCBSEAR 'YES'        SEARCH THE UCBS FOR UNMOUNTED PACKS\n\n         &TSO\n\n         WHEN TESTING THIS EXIT UNDER THE TSO INTERFACE, THE LOCAL\n         VARIABLE &&TSO SHOULD BE CHANGED TO 'YES' FROM 'NO' TO\n         CHANGE THE $$WTO INSTRUCTIONS TO WTO INSTRUCTIONS AND\n         BYPASS THE ESTAE MACROS SO THAT THE TEST COMMAND CAN\n         DETERMINE THE ADDRESS OF THE ABEND.\n\n\n         &CAMLST\n\n         THE ONLY WAY THAT THE EXIT CAN DETERMINE THE DEVICE TYPE\n         FOR CATALOGED DATA SETS IS TO ISSUE THE CAMLST LOCATE\n         MACRO FOR EVERY DATASET FOR WHICH NO UNIT IS SPECIFIED.\n         THIS HAS TREMENDOUS OVERHEAD, BUT IS REQUIRED TO SET THE\n         JOB CLASS CORRECTLY BASED ON THE NUMBER OF MOUNTABLE\n         UNITS.\n\n\n         &ERRMSG\n\n         A MESSAGE WILL BE WRITTEN TO THE CONSOLE AND THE JOBLOG\n         FOR THE JOB WHENEVER A STANDARDS VIOLATION IS DETECTED\n         BY THE EXIT.  WITHOUT THIS MESSAGE, THE PERSON WHO\n         SUBMITTED THE JOB MAY HAVE DIFFICULTY DETERMINING THAT\n         THE JOB WAS FLUSHED FOR A VIOLATION.  THE OPTION TO\n         BYPASS THE MESSAGE IS AVAILABLE HOWEVER.\n\n\n         &SDUMP   'YES'        PRODUCE CONSOLE DUMP FOR ABENDS\n\n         A CONSOLE DUMP CAN BE TAKEN BY THE ERROR RECOVERY ROUTINE\n         WHEN REQUESTED BY THE OPTION.  SINCE ERRORS ARE HOPEFULLY\n         FEW AND FAR BETWEEN, IT PROBABLY IS A GOOD IDEA TO TAKE A\n         DUMP WHEN THEY OCCUR.  THE DUMP CAN BE CUT OFF IF DESIRED.\n\n\n         &FLUSH   'YES'        FLUSH JOB FOR STANDARDS VIOLATIONS\n\n         THE EXIT CAN BE RUN IN \"NOFLUSH\" MODE DURING WHICH TIME\n         ALL ERROR MESSAGES WILL BE ISSUED, BUT THE JOB WILL NOT\n         TERMINATED BY THE EXIT.  THIS IS ESPECIALLY USEFUL DURING\n         IMPLEMENTATION.\n\n\n1        &MODIFY  'YES'        MODIFY JOB CLASS IN JCT AND JQE\n\n         THE JOB CLASS OF THE JOB CAN BE SET BY THE EXIT BASED\n         ON THE RESOURCE REQUIREMENTS OF THE JOB.  THE MODIFICATION\n         OF THE JOB CLASS IS MADE BY MODIFYING THE JOBCLASS FIELDS\n         IN THE JCT AND THE JQE SINCE THEY WILL BE REWRITTEN AND\n         REQUEUED FOLLOWING CONVERSION.  IT MAY BE NOTED THAT THERE\n         IS CODE IN THE EXIT TO SET JOB \"RESOURCE\" INDICATORS BASED\n         ON JOB CATAGORY, PROGRAM NAME, AND OTHER CRITERIA.  THIS\n         CODE IS NOT CURRENTLY BEING USED AND IS IN THE PROGRAM\n         FOR INFORMATIONAL PURPOSES ONLY.  THIS CAN BE USED WITH\n         THE MELLON BANK RESOURCE MOD WHICH IS AVAILABLE ON THE\n         MODS TAPE (I THINK).  IF YOU TRY TO INCORPORATE THIS CODE\n         INTO THE RESOURCE MOD, ALL YOU SHOULD HAVE TO DO IS TO\n         \"OR\" THE PROPERLY SETUP RESOURCE BITS INTO THE EXISTING\n         BITS IN THE JQE.  GOOD LUCK.\n\n\n         &UCBSEAR 'YES'        SEARCH UCBS FOR UNMOUNTED PACKS\n\n         THE EXIT SEARCHES THE UCBS TO DETERMINE IF THE DASD\n         VOLUMES REFERENCED BY A DD STATEMENT ARE MOUNTED.  THE\n         JOB CAN BE CHARGED FOR THE MOUNT OR TERMINATE WITH A\n         JCL ERROR AS IS CURRENTLY THE CASE.\n\n1                  JOB CARD FIELDS PROCESSED\n\n         1)  JOBNAME\n         2)  ACCOUNTING FIELD\n             THE FORMAT OF THE FIRST ACCOUNTING IS VERIFIED BY AN\n             SVC ROUTINE.  OTHER INSTALLATIONS WILL HAVE TO INSERT\n             THEIR OWN VERIFICATION ROUTINES IN THAT AREA OF CODE.\n         3)  PROGRAMMER NAME\n             THE PROGRAMMER NAME IS SAVED BUT IS CURRENTLY NOT\n             BEING USED.  IT COULD BE USED AS ANOTHER SOURCE OF\n             INFORMATION FOR AUTHORIZATION CHECKING.\n         4)  JOB CLASS\n             THE JOB CLASS IS SAVED SINCE CERTAIN JOB CLASS MAY BE\n             SPECIFIED FOR SPECIAL SITUATIONS EVEN THOUGH THE\n             RESOURCES FOR THIS CLASS MAY HAVE TO BE VERIFIED.\n         5)  TIME\n             IF TIME IS NOT SPECIFIED ON THE JOB CARD, THE\n             INTERNAL TEXT WILL BE MODIFIED TO SET THE JOB\n             DEFAULT TIME TO 1 MINUTE OF CPU.\n             ALSO THE USE OF TIME=1440 IS RESTRICTED TO CERTAIN\n             CATAGORIES OF JOBS.\n         6)  REGION\n             THE USE OF REGION ON THE JOB CARD IS RESTRICTED\n             TO CERTAIN CATAGORIES OF JOBS.  REGION SHOULD ONLY\n             BE SPECIFIED ON THE EXECUTE CARD.\n\n1                 EXEC CARD FIELDS PROCESSED\n\n         1)  PGM\n             THE PROGRAM NAME IS PROCESSED TO SET \"RESOURCE\"\n             ROUTINGS.  OTHER USES COULD BE TO RESTRICT THE\n             USE OF CERTAIN PROGRAMS.\n         2)  REGION\n             THE STEP REGION SIZE IS SAVED TO USE IN THE CLASS\n             DETERMINATION ROUTINE.\n         3)  TIME\n             THE TIME PARAMETER IS CHECKED TO PREVENT THE USE\n             OF TIME=1440 BY UNAUTHORIZED JOBS.\n\n1                   DD CARD FIELDS PROCESSED\n\n         1)  DDNAME\n             THE DDNAME IS SAVED IN A TABLE FOR POSSIBLE USE IN\n             THE REFERBACK ROUTINE WHEN NEEDED.\n         2)  DUMMY\n             A DUMMY FILE WILL BE BYPASSED.\n         3)  DSN\n             THE DSNAME IS SAVED IN A TABLE FOR POSSIBLE USE IN\n             THE REFERBACK ROUTINE, BY THE UNIT DETERMINATION\n             ROUTINE OR BY THE AUTHORIZATION CHECKING ROUTINE.\n\n                             N O T E\n\n             IN ADDITION TO STANDARD DATASET NAMES, GENERATION\n             DATA GROUPS AND REFERBACKS WILL BE PROCESSED.\n\n         4)  DISP\n             THE DISP IS PROCESSED TO CHECK FOR ILLEGAL DISPOSITION\n             ON JOBLIB, JOBCAT, STEPLIB, STEPCAT, OR SYSTEM DATA\n             SET.\n         5)  UNIT\n             THE UNIT NAME AND THE UNIT COUNT ARE SAVED IN CASE\n             MULTIPLE UNITS OR PARALLEL MOUNTING IS REQUESTED.\n             A UNIT NAME TABLE IS IN THE PROGRAM TO DETERMINE THE\n             ATTRIBUTES OF THE SPECIFIED UNITNAME.\n             UNIT = AFF IS ALSO PROCESSED.\n         6)  VOL\n             THE VOLUME COUNT IS SAVED IN CASE PARALLEL MOUNTING\n             IS REQUESTED.\n         7)  VOL=SER\n             THE NUMBER OF VOL/SERS IS SAVED IN CASE PARALLEL\n             MOUNTING IS REQUESTED.  THE FIRST VOLSER IS SAVED\n             SO THAT ANY DD STATEMENTS WITHIN THE SAME STEP WHICH\n             USE THE SAME VOLSER WILL USE IMPLIED UNIT=AFF\n             PROCESSING.\n         8)  VOL=REF\n             THE VOL=REF IS USED TO SEARCH THE TABLE OF SAVED\n             MOUNTABLE DEVICES TO DETERMINE WHETHER OR NOT THE\n             VOLUME REFERRED TO IS ON A MOUNTABLE DEVICE.\n\n1                   OUTPUT CARD FIELDS PROCESSED\n\n         1)  PRTY\n             TEST JOBS ARE NOT ALLOWED TO USE ALTER THE STANDARD\n             PRIORITY OF THEIR OUTPUT.\n\n1        IF UNIT HAS NOT BEEN DETERMINED, THE UNIT TYPE MUST\n         BE SEARCHED FOR IN THE FOLLOWING ORDER:\n\n         1)  THE DSNAME TABLE MAINTAINED BY THIS EXIT SINCE THE\n             DATASET MAY HAVE BEEN CATALOGED OR PASSED BY A\n             PREVIOUS DD STATEMENT.\n         2)  THE SYSTEM CATALOG\n         3)  THE SYSTEM UCBS MUST BE SEARCHED TO SEE IF THE\n             REQUESTED DASD VOLUME IS MOUNTED OR ONLY MOUNTED\n             PRIVATE IN WHICH CASE IT WILL BE DISMOUNTED AT END\n             OF JOB.  IF NOT FOUND OR PRIVATE, IT IS A \"PRIV\"\n             UNIT.\n\n1        THE JOB CLASS DETERMINATION ROUTINE WILL USE ONY ONE OF\n         SEVERAL TABLES DEPENDING ON JOB CATAGORY TO FIND A MATCH\n         ON RESOURCES REQUIRED AND THE CORRESPONDING JOB CLASS.\n         NOTE THAT SEVERAL CATAGORIES OF JOBS MAY SPECIFY A JOB\n         CLASS TO SINGLE THREAD A SERIES OF JOBS OR BYPASS CERTAIN\n         RESTRICTIONS.  SOME OF THESE MAY BE CHECKED FOR EXCEEDING\n         THE ALLOWABLE RESOURCES FOR THAT CLASS.\n         THE FORMAT OF THE CLASS TABLES IS AS FOLLOWS:\n             1)  1 BYTE CLASS CODE APPLYING TO ENTRY\n             2)  3 BYTE FILLER\n             3)  HALFWORD MAXIMUM TAPES PER STEP\n             4)  HALFWORD MAXIMUM PRIV UNITS PER STEP\n             5)  HALFWORD MAXIMUM TOTAL DEVICES PER STEP\n             6)  HALFWORD MAXIMUM REGION PER STEP\n             7)  FULLWORD MAXIMUM CPU TIME FOR JOB\n\n                            N O T E\n\n         WHILE THE CLASS TABLES SUPPORT MOUNTABLE DASD DEVICES,\n         WE NO LONGER HAVE ANY.  THUS THERE IS A CHECK IN THE\n         CODE WHICH WILL FAIL ANY JOB REQUIRING A MOUNTABLE\n         DASD DEVICE.\n\n1                   M E S S A G E S\n\n\n FUN100I PROCSTEP JOBSTEP  TAPES= XXXXX PACKS= XXXXXX REGION= NNNNNK\n         JTIME= XXXXX\n\n FUN101I CLASS SET TO X\n\n FUN102I JOB BEING PLACED IN THE SETUP QUEUE BECAUSE OF JOB\n         REQUIREMENTS\n\n FUN103W JOB CLASS REQUESTED DOES NOT ALLOW SETUP - JOB CLASS WILL BE\n         RESET\n\n FUN104I INTERNAL ERROR - MATCH WITHIN CLASS TABLE NOT FOUND\n\n FUN105W NDM REQUESTS MUST BE ISSUED ONLY FROM A SINGLE STEP JOB\n\n FUN106W ILLEGAL JOB CLASS REQUESTED BY A TEST JOB\n\n FUN107I JOB BEING PLACES IN THE OPERATOR HOLD QUEUE BECAUSE OF JOB\n         REQUIREMENTS\n\n FUN001E INTERNAL ERROR - INVALID TEXT STATEMENT TYPE DETECTED\n\n FUN002E JOBNAME, ACCOUNTING INFORMATION, OR JOBNAME MISSING ON THE\n         JOB CARD\n\n FUN003E LENGTH OF JOBNAME EXCEEDS MAXIMUM OF 8 CHARACTERS\n\n FUN004E LENGTH OF PROGRAMMER NAME FIELD ON THE JOB CARD EXCEEDS\n          A MAXIMUM OF 20 CHARACTERS\n\n FUN006E TIME VALUE ON THE JOB CARD IS NOT NUMERIC\n\n FUN007E UNAUTHORIZED USE OF TIME=1440 ON THE JOB CARD\n\n FUN008E LENGTH OF THE STEP NAME ON THE EXECUTE CARD EXCEEDS\n         A MAXIMUM OF 8 CHARACTERS\n\n FUN009E LENGTH OF THE PROGRAM NAME ON THE EXECUTE CARD EXCEEDS\n         A MAXIMUM OF 8 CHARACTERS\n\n FUN010E INVALID FORMAT FOR THE REGION PARAMETER ON THE EXECUTE CARD\n\n FUN011E REGION SIZE ON THE EXECUTE CARD IS NOT NUMERIC\n\n FUN012E INVALID FORMAT FOR THE TIME PARAMETER ON THE EXECUTE CARD\n\n FUN013E UNAUTHORIZED USE OF TIME=1440 ON THE EXECUTE CARD\n\n1FUN014E LENGTH OF THE DDNAME ON THE DD CARD EXCEEDS MAXIMUM OF\n         8 CHARACTERS\n\n FUN015E INVALID FORMAT FOR THE DSNAME PARAMETER ON THE DD CARD\n\n FUN016E LENGTH OF THE DSNAME ON THE DD CARD EXCEEDS MAXIMUM OF\n         44 CHARACTERS\n\n FUN017E INVALID FORMAT FOR THE DISP PARAMETER ON THE DD CARD\n\n FUN018E INVALID FORMAT FOR THE UNIT PARAMETER ON THE DD CARD\n\n FUN019E UNIT COUNT WITHIN THE UNIT PARAMETER ON THE DD CARD IS NOT\n         NUMERIC\n\n FUN020E INVALID FORMAT FOR THE VOLUME PARAMETER ON THE DD CARD\n\n FUN021E VOLUME COUNT WITHIN THE VOLUME PARAMETER ON THE DD CARD IS\n         NOT NUMERIC\n\n FUN022E LENGTH OF THE VOLSER PARAMETER(S) ON THE DD CARD EXCEEDS\n         A MAXIMUM OF 6 CHARACTERS\n\n FUN023E UNAUTHORIZED DISPOSITION SPECIFIED FOR A SYSTEM DATA SET\n\n FUN024E INTERNAL ERROR - LENGTH OF THE INTERNAL TEXT OF AN EXECUTE\n         CARD EXCEEDS 512 CHARS\n\n FUN025E LENGTH OF THE PROC STEP NAME ON THE EXECUTE CARD EXCEEDS\n         A MAXIMUM OF 8 CHARACTERS\n\n FUN026E INVALID FORMAT FOR THE REFERBACK SUBPARAMETER ON THE DD CARD\n\n FUN027E INVALID DISPOSITION ON A JOBLIB, STEPLIB, JOBCAT, OR STEPCAT\n         DD\n\n FUN028I THE LENGTH OF THE DSNAME ON A VOLUME REFERBACK EXCEEDS A\n         MAXIMUM OF 44 CHARACTERS\n\n FUN029E THE REQUIRED ACCOUNTING FIELD ON THE JOB CARD WAS NOT\n         SPECIFIED\n\n FUN030E INVALID FIRST UNION ACCOUNTING CODE SPECIFIED ON THE JOB CARD\n\n FUN031W UNAUTHORIZED USE OF JOBCAT OR STEPCAT DD STATEMENT\n\n FUN032W UNAUTHORIZED ATTEMPT TO ALLOCATE THE JES2 INTERNAL READER\n\n FUN034E UNAUTHORIZED USE OF PRTY PARAMETER ON OUTPUT STATEMENT\n\n./ ADD NAME=CONSOLE\n1                T S O    C O N S O L E    C O M M A N D\n\n         THIS TSO COMMAND WILL ALLOW A TSO USER TO FUNCTION AS\n         AN O/S CONSOLE.  THE ORIGINAL CODE WAS PROBABLY THE SPY\n         COMMAND ON THE MODS TAPES, BUT IT HAS EVOLVED OVER A\n         PERIOD OF TIME.  I REGRET THAT THE NAME OF THE ORIGINATOR\n         OF THE CODE HAS BEEN LOST.\n\n\n\n         THE COMMAND CHECKS FOR TSO OPERATOR AUTHORITY FOR ACCESS.  IT\n         IS RECOMMENDED THAT SOME OTHER FORM OF PROTECTION SUCH AS\n         RACF PROGRAM PROTECTION BE USED TO PROTECT THIS COMMAND.  IF\n         ALL OF THESE CHECKS ARE MET, THE USER WILL THEN BE PROMPTED\n         FOR AN AUTHORIZATION PASSWORD.  WHILE EXCESSIVE, THESE KINDS\n         OF CHECKS WERE REQUIRED HERE TO MAKE PEOPLE HAPPY.  SINCE THE\n         CONSOLE BUFFERS ARE IN THEIR OWN ADDRESS SPACE UNDER XA AND\n         THE COMMAND INTERFACE IS SVC 34, THIS COMMAND MUST BE\n         AUTHORIZED.  THIS AUTHORIZATION IS CURRENTLY PROVIDED BY AN\n         SVC CALL TO AN SVC WHICH SETS THE COMMAND IN PROTECT KEY 0 TO\n         SET THE AUTHORIZED BIT ON.  THUS THE COMMAND CAN PERFORM ALL\n         REQUIRED FUCTIONS LATER AS REQUIRED.  THE SVC METHOD OF\n         AUTHORIZATION IS USED INSTEAD OF IKJEFTE2 AUTHORIZATION SO\n         THAT THIS COMMAND CAN RUN UNDER SPF OPTION 6 WITHOUT TSO/E.\n\n         THE CONSOLE BUFFERS WHICH ARE DISPLAYED UPON ENTRY ARE THOSE\n         FOR THE MASTER CONSOLE.  WHEN THE CONSOLE BEING VIEWED IS THE\n         MASTER, MASTER-CONSOLE-ONLY COMMANDS SUCH AS DUMP AND FORCE\n         CAN BE ISSUED.  CONSOLE SWITCHING CAN BE ACCOMPLISHED BY THE\n         CONSOLE=NN COMMAND WHERE NN IS THE CONSOLE NUMBER OF ANOTHER\n         CONSOLE.  CONSOLE=M CAN BE ISSUED TO SWITCH BACK TO THE\n         MASTER CONSOLE.\n\n\n\n1     COMMAND      DESCRIPTION\n\n         ?         DISPLAYS HELP FOR CONSOLE\n         END       END; END THE PROGRAM\n         FREEZE    FREEZE DISPLAY ON THE CURRENT PAGE\n         RELEASE   RELEASE DISPLAY; SHOW ALTERNATING PAGES\n         WAITXX    AUTOMATICALLY REFRESH THE SCREEN\n                   XX TIMES, THEN RETURN TO NORMAL MODE.\n                   IF XX IS NOT ENTERED, 30 ITERATIONS ARE ASSUMED.\n                   IF XX = 0, THE COMMAND WILL REFRESH THE SCREEN\n                   UNTIL THE TSO USER PRESSES THE ATTENTION KEY\n                   TO EXIT FROM THE DISPLAY.  NOTE THAT THE ATTN\n                   KEY IS NOT THE PA1 KEY ON AN IBM 3278 TERMINAL.\n         DELAYXX   SET DELAY TIME BETWEEN REFRESHES TO XX TENTHS\n                   OF A SECOND.\n         CONSOLE=NN SWITCH TO CONSOLE NUMBER NN\n         RECALL    RECALL LAST ENTERED COMMAND FOR UPDATE\n         Z         HALT: END THE PROGRAM\n\n\n./ ADD NAME=DSAT\n1                T S O    D S A T    C O M M A N D\n\n         THIS TSO COMMAND WILL ALLOW A TSO USER TO LIST DATA SET\n         ATTRIBUTES AT A SPECIFIED INDEX LEVEL.  THE CODE IS\n         LOOSELY BASED ON A COMMAND FROM FLORIDA POWER AND LIGHT\n         BUT DOES NOT HAVE ALL OF THE OPTIONS.  THIS VERSION WILL\n         WORK PROPERLY ONLY UNDER DFP USING ICF CATALOGS.  IT WILL\n         RETURN GDG BASE INFORMATION AS WELL AS ATTRIBUTES OF VSAM\n         DATA SETS.  THE USE OF AN UNDOCUMENTED CATALOG INTERFACE\n         ALLOWS THIS INFORMATION TO BE OBTAINED.\n\n\n    COMMAND FORMAT:\n\n         DSAT DSNAME ALL/DAONLY LONG/SHORT\n\n         WHERE\n\n         DSNAME - THE DATA SET NAME OR INDEX LEVEL FOR WHICH\n                  INFORMATION IS TO BE LISTED.  IT DEFAULTS\n                  TO THE TSO PREFIX OF THE TSO USER, BUT MUST\n                  BE SPECIFIED IF ANY OF THE OTHER OPTIONAL\n                  PARAMETERS ARE USED.\n\n         ALL    - DISPLAY ALL OF THE DATA SETS UNDER THE\n                  SPECIFIED INDEX LEVEL.\n\n         DAONLY - DISPLAY DATA SETS ON MOUNTED DASD VOLUMES\n\n         LONG   - DISPLAY DCB AND DASD SPACE INFORMATION\n\n         SHORT  - DISPLAY ONLY VOLUME INFORMATION\n\n./ ADD NAME=TESTJ136\n1                         T E S T J 1 3 6\n\n         THIS PROGRAM WAS WRITTEN TO TEST THE JES2 EXIT6 PROGRAM\n         DESIGNED TO ENFORCE INSTALLATION JCL STANDARDS AND TO\n         SET THE APPROPRIATE JOB CLASS BASED ON DEVICES USED.\n\n         THIS VERSION OF THE PROGRAM WILL WORK WITH SP 1.3.6\n         OR SP 2.1.5 JES2 ONLY.\n\n         THE INPUT TO THIS PROGRAM IS A SEQUENTIAL FILE OF INTERNAL\n         TEXT CREATED USING THE QUEUE COMMAND AVAILABLE ON MOST OF\n         THE MODS TAPES.  FILE 5 OF A JOB CAN BE PROCESSED WITH ONE\n         OF THE NEWER VERSIONS OF THE QUEUE COMMAND AND THE SAVE\n         COMMAND CAN BE USED TO SAVE THIS FILE INTO A DATA SET.\n\n         THE OUTPUT FILE MUST BE A JES2 SYSOUT DATA SET SINCE THE\n         EXIT WILL DO A JES2 WRITE INTO THIS DATA SET WHENEVER AN\n         ERROR IS DETECTED OR STEP STATISTICS ARE TO BE LISTED.\n\n         THE REQUIRED JES2 CONTROL BLOCKS FOR THE EXIT ARE FAKED\n         AND CREATED WITH JUST ENOUGH INFORMATION FOR THE EXIT\n         TO FUNCTION.  THE CONTROL BLOCKS CREATED ARE THE JCT,\n         PCE, AND JQE.\n\n         THIS PROGRAM MAY BE LINKED INTO A TEST LIBRARY WITH ANY\n         NAME BUT MUST HAVE AN ALIAS OF TESTJES TO UTILIZE THE\n         ACTUAL ROUTINE ENTRY POINT INSTEAD OF THE JES PROLOGUE\n         AT THE MAIN ENTRY POINT.\n\n         THE EXIT MAY BE LINKED INTO A TEST LIBRARY WITH ANY\n         NAME BUT MUST HAVE AN ALIAS OF E006STDS TO UTILIZE THE\n         ACTUAL ROUTINE ENTRY POINT INSTEAD OF THE JES PROLOGUE\n         AT THE MAIN ENTRY POINT.  IT ALSO MUST BE LINKED AS\n         REENTRANT FOR THIS TEST PROCEDURE TO WORK.\n\n         WHEN TESTING THIS JES2 EXIT, THE LOCAL VARIABLE &&TSO\n         IN THE EXIT SHOULD BE CHANGED TO 'YES' FROM 'NO' TO\n         CHANGE THE $$WTO INSTRUCTIONS TO WTO INSTRUCTIONS AND\n         BYPASS THE ESTAE MACROS SO THAT THE TEST COMMAND CAN\n         DETERMINE THE ADDRESS OF ANY ABENDS.\n\n                   CLIST USED TO TEST JES2 EXIT6\n\n         PROC 1 DSN\n         CONTROL NOMSG\n         FREE F(INTEXT,JESMSG)\n         CONTROL MSG\n         ALLOC F(INTEXT) DA(&DSN) SHR\n         ALLOC F(JESMSG) SYSOUT(A) HOLD\n         TEST USER.LIBRARY(TESTJES)\n         LOAD USER.LIBRARY(E006STDS)\n         Q E006STDS\n\n\n./ ADD NAME=TESTJES\n1                         T E S T J E S\n\n         THIS PROGRAM WAS WRITTEN TO TEST THE JES2 EXIT6 PROGRAM\n         DESIGNED TO ENFORCE INSTALLATION JCL STANDARDS AND TO\n         SET THE APPROPRIATE JOB CLASS BASED ON DEVICES USED.\n\n         THIS VERSION OF THE PROGRAM WILL WORK WITH SP 1.3.3\n         OR SP 1.3.4 JES2 ONLY.\n\n         THE INPUT TO THIS PROGRAM IS A SEQUENTIAL FILE OF INTERNAL\n         TEXT CREATED USING THE QUEUE COMMAND AVAILABLE ON MOST OF\n         THE MODS TAPES.  FILE 5 OF A JOB CAN BE PROCESSED WITH ONE\n         OF THE NEWER VERSIONS OF THE QUEUE COMMAND AND THE SAVE\n         COMMAND CAN BE USED TO SAVE THIS FILE INTO A DATA SET.\n\n         THE OUTPUT FILE MUST BE A JES2 SYSOUT DATA SET SINCE THE\n         EXIT WILL DO A JES2 WRITE INTO THIS DATA SET WHENEVER AN\n         ERROR IS DETECTED OR STEP STATISTICS ARE TO BE LISTED.\n\n         THE REQUIRED JES2 CONTROL BLOCKS FOR THE EXIT ARE FAKED\n         AND CREATED WITH JUST ENOUGH INFORMATION FOR THE EXIT\n         TO FUNCTION.  THE CONTROL BLOCKS CREATED ARE THE JCT,\n         PCE, AND JQE.\n\n         THIS PROGRAM MAY BE LINKED INTO A TEST LIBRARY WITH ANY\n         NAME BUT MUST HAVE AN ALIAS OF TESTJES TO UTILIZE THE\n         ACTUAL ROUTINE ENTRY POINT INSTEAD OF THE JES PROLOGUE\n         AT THE MAIN ENTRY POINT.\n\n         THE EXIT MAY BE LINKED INTO A TEST LIBRARY WITH ANY\n         NAME BUT MUST HAVE AN ALIAS OF EXIT6 TO UTILIZE THE\n         ACTUAL ROUTINE ENTRY POINT INSTEAD OF THE JES PROLOGUE\n         AT THE MAIN ENTRY POINT.  IT ALSO MUST BE LINKED AS\n         REENTRANT FOR THIS TEST PROCEDURE TO WORK.\n\n         WHEN TESTING THIS JES2 EXIT, THE LOCAL VARIABLE &&TSO\n         IN THE EXIT SHOULD BE CHANGED TO 'YES' FROM 'NO' TO\n         CHANGE THE $$WTO INSTRUCTIONS TO WTO INSTRUCTIONS AND\n         BYPASS THE ESTAE MACROS SO THAT THE TEST COMMAND CAN\n         DETERMINE THE ADDRESS OF ANY ABENDS.\n\n                   CLIST USED TO TEST JES2 EXIT6\n\n         PROC 1 DSN\n         CONTROL NOMSG\n         FREE F(INTEXT,JESMSG)\n         CONTROL MSG\n         ALLOC F(INTEXT) DA(&DSN) SHR\n         ALLOC F(JESMSG) SYSOUT(A) HOLD\n         TEST USER.LIBRARY(TESTJES)\n         LOAD USER.LIBRARY(EXIT6)\n         Q EXIT6\n\n\n./ ADD NAME=$LF\n1                   J E S 2    $ L F    C O M M A N D\n\n\n         A NEW COMMAND HAS BEEN ADDED TO JES2 FOR USE BY THE MVS\n         COMPUTER CONSOLE OPERATORS.  IBM DID NOT SEE FIT TO SUPPLY AN\n         EASY WAY FOR AN OPERATOR TO DETERMINE WHICH JOBS ARE WAITING\n         TO PRINT, WHAT ORDER IN WHICH THESE JOBS WILL PRINT, OR HOW\n         MANY LINES ARE TO BE PRINTED.  THE COMMAND SUPPLIED BY IBM IS\n         THE $DF COMMAND WHICH ONLY LISTS HOW MANY JOBS ARE WAITING TO\n         PRINT AS SEEN IN THE FOLLOWING EXAMPLE:\n\n         $DF\n         $HASP621 OUT R=LOCAL    F=STD. C=**** T=**** W= (NONE)  CLASS\n                  A=15,R=1,C=1,D=2\n\n1        THIS NEW COMMAND ALLOWS THE OPERATOR TO DETERMINE THE\n         JOBNAME, JOB NUMBER, AND NUMBER OF PRINT LINES FOR EACH PRINT\n         GROUP.  NOTE THAT THE XS OPERAND IS OPTIONAL FOR USERS OF THE\n         XJCF PRODUCT FROM XENOS COMPUTING WHICH GIVES NATIVE JES2\n         SUPPORT FOR THE XEROX 9700 PRINTER.  THE FORMAT OF THE NEW\n         COMMAND IS AS FOLLOWS:\n\n\n                        $LF,\n                            Q=CLASSES,\n                            J=JXXXX-YYYY,\n                            R=RXX-RYY,\n                            F=FORM,\n                            C=FCB,\n                            T=UCS,\n                            O=OVERLAY,\n                            B=Y/N,\n                            LIM=LOW-HIGH,\n                            XS=S/D/N,\n                            HOLD,\n                            L\n         WHERE\n\n         Q=CLASSES    - OPTIONAL LIST OF UP TO 8 SYSOUT Q CLASSES TO\n                        BE LISTED\n                        (DETAULTS TO ALL CLASSES)\n         J=JXXXX-YYYY - OPTIONAL JOB OR RANGE OF JOBS TO BE LISTED\n                        (DEFAULTS TO ALL JOBS)\n         R=RXX-YY     - OPTIONAL LIST OF REMOTE DESTINATIONS TO BE\n                        LISTED\n                        (DEFAULTS TO LOCAL)\n         F=FORM       - OPTIONAL SELECTION BY FORM NUMBER\n                        (DEFAULTS TO ALL FORMS)\n         C=FCB        - OPTIONAL SELECTION BY FCB NUMBER\n                        (DEFAULTS TO ALL FCBS)\n         T=UCS        - OPTIONAL SELECTION BY UCS OR CHARACTER SET\n                        (DEFAULTS TO ALL UCS IDS)\n         O=OVERLAY    - OPTIONAL SELECTION BY OVERLAY NAME\n                        (DEFAULTS TO ALL OVERLAYS)\n         B=Y/N        - OPTIONAL SELECTION BY 3800 BURST SPECIFICATION\n                        (Y/N)\n                        (DEFAULTS TO ALL VALUES)\n         LIM=LOW-HIGH - OPTIONAL SELECTION BY LINE LIMIT RANGE\n                        (DEFAULTS TO 0-*)\n         XS=S/D/N     - OPTIONAL SELECTION BY XJCF SHIFT SPECIFICATION\n                        (SIMPLEX/DUPLEX/NONE)\n                        (DEFAULTS TO ALL VALUES)\n         HOLD         - OPTIONAL SELECTION OF ONLY JOBS WHICH ARE HELD\n                        OR NON-SELECTABLE\n                        (DEFAULTS TO ALL JOBS)\n         L            - OPTIONAL INDICATION TO USE THE LONG FORM OF\n                        RESPONSE FOR MORE DETAIL\n                        (DEFAULTS TO S)\n\n1        SINCE THERE MAY BE MANY GROUPS OF OUTPUT WAITING TO PRINT,\n         THERE MAY BE MANY CONSOLE MESSAGES GENERATED BY THIS COMMAND.\n         THE $DF COMMAND CAN BE USED TO DETERMINE WHICH SYSOUT CLASSES\n         ARE OF INTEREST, AND THE $LF COMMAND ENTERED WITH THE ONE OR\n         MORE OF THE OPTIONAL OPERANDS TO LIMIT THE NUMBER OF\n         MESSAGES.  SOME EXAMPLES OF THE COMMAND AND THE RESPONSES ARE\n         AS FOLLOWS:\n\n              $LF,Q=R\n              $HASP900 LOGWTR   S 304 LOCAL  Q=R F=STD  XS=D    13702\n\n              $LF,Q=R,L\n              $HASP900 LOGWTR   S 304 LOCAL  Q=R F=STD  XS=D    13702\n              $HASP900                C=**** T=**** O=**** B=N\n\n              $LF,Q=CDR\n              $HASP900 PA300200 J 323 LOCAL  Q=C F=STD  XS=S   237236\n              $HASP900 PA300140 J 316 LOCAL  Q=D F=X404 XS=D    36256\n              $HASP900 PA300200*J 323 LOCAL  Q=D F=X403 XS=N   187464\n              $HASP900 LOGWTR   S 304 LOCAL  Q=R F=STD  XS=D    13702\n\n                  THE ASTERISK BESIDE THE JOBNAME IN THE ABOVE EXAMPLE\n                  INDICATES THAT THE JOB IS CURRENTLY BEING PRINTED.\n\n              $LF,Q=CDR,XS=D\n              $HASP900 PA300140 J 316 LOCAL  Q=D F=X404 XS=D    36256\n              $HASP900 LOGWTR   S 304 LOCAL  Q=R F=STD  XS=D    13702\n\n              $LF,R=DX\n              $HASP900 SA03PRNT J 465 U1     Q=K F=STD  XD=D      350\n\n                  DX IS THE DESTINATION OF THE DATAGRAPHIX MICROFICHE\n                  PROCESSORS.\n\n              $LF,Q=E\n              $HASP919 NO OUTPUT QUEUED\n\n./ ADD NAME=$QJ\n1\n                        JES2 $QJ COMMAND\n\n\n EXTENSIVE MODIFICATIONS HAVE BEEN MADE TO CONTROL JOB PROCESSING AT\n FIRST UNION NATIONAL BANK.  THIS HAS CAUSED THE ADDITION OF MANY\n \"JOB FLAGS\" TO BE ASSIGNED TO A JOB.  THE STANDARD IBM DISPLAY\n COMMAND DOES NOT DISPLAY THESE FLAGS.  A NEW COMMAND WAS WRITTEN TO\n EFFECTIVELY REPLACE THE IBM $DJ OR $D'JOBNAME' COMMAND.  THE FORMAT\n OF THE COMMAND IS IDENTICAL TO THE IBM COMMAND EXCEPT THAT THE LETTER\n 'Q' IS SUBSTITUTED FOR THE LETTER 'D'.\n\n\n THE OUTPUT FROM THE COMMAND IS ALMOST IDENTICAL TO THE OUTPUT FROM\n THE IBM DISPLAY COMMAND EXCEPT WAITING HAS BEEN ABBREVIATED TO WAIT,\n EXECUTION TO EXEC, CONVERSION TO CONV, AND OUTPUT TO OUT.  THIS\n SHORTENS THE MESSAGE ENOUGH TO ALLOW MOST MESSAGES FOR A JOB TO\n FIT ON ONE LINE.  WHAT HAS CHANGED IS THE LIST OF ATTRIBUTES FOR\n THE JOB WHICH ARE DISPLAYED IMMEDIATELY AFTER THE PRIORITY.  A LIST\n OF THESE ATTRIBUTES FOLLOWS:\n\n    TEST   - THE JOB IS A TEST JOB\n    PROD   - THE JOB IS A PRODUCTION JOB\n    SETUP  - THE JOB IS WAITING FOR SETUP\n    UHOLD  - THE JOB IS WAITING FOR EXECUTION BECAUSE THE JOB HAS\n             BEEN HELD BY A SPECIAL TSO COMMAND BY A TSO USER.\n    DUPL   - THE JOB IS WAITING FOR EXECUTION BECAUSE A JOB BY THE\n             SAME NAME IS EXECUTING\n    QHOLD  - THE JOB IS WAITING FOR EXECUTION BECAUSE THE ENTIRE\n             EXECUTION CLASS HAS BEEN HELD BY THE OPERATOR\n    OHOLD  - THE JOB IS WAITING FOR EXECUTION BECAUSE THE JOB HAS\n             BEEN HELD BY A $HJ COMMAND ISSUED BY THE OPERATOR OR\n             THE JOB HAS A TYPRUN=HOLD ON THE JOB CARD.\n    JCLERR - THE JOB FAILED WITH A JCL ERROR\n    ABND   - THE JOB FAILED WITH AN ABEND\n    PURGE  - THE JOB IS WAITING FOR AN OPERATOR PURGE COMMAND\n             TO TAKE EFFECT\n    CANCEL - THE JOB IS WAITING FOR AN OPERATOR CANCEL COMMAND\n             TO TAKE EFFECT\n\n\n1\n                       $QJ COMMAND FORMAT\n\n\n         $Q\n             J=JXXXX-YYYY\n                OR\n             J=SXXXX-YYYY\n                OR\n             J=TXXXX-YYYY\n                OR\n             'JOBNAME'\n\n                           ,SPOOL\n                           ,OWNERID\n\n\n WHERE\n\n J=JXXXX-YYYY - JOB OR RANGE OF JOBS TO BE LISTED\n J=SXXXX-YYYY - JOB OR RANGE OF STARTED TASKS TO BE LISTED\n J=TXXXX-YYYY - JOB OR RANGE OF TSO USERS TO BE LISTED\n 'JOBNAME'    - NAME OF JOB TO BE LISTED.  THE NAME DOES NOT HAVE\n 'JOBNAME       TO BE FOLLOWED BY A CLOSING QUOTE LIKE THE IBM\n 'JOBNAME*'     DISPLAY COMMAND.  THE JOBNAME MAY END IN A '*'\n                TO INDICATE THAT ALL JOBS WHICH START WITH THE\n                PRECEDING CHARACTERS ARE TO BE LISTED.\n SPOOL        - OPTIONAL REQUEST TO LIST THE NUMBER OF TRACK GROUPS,\n                PERCENT OF SPOOL USED, AND A LIST OF ALL SPOOL\n                VOLUMES USED BY EACH JOB.\n OWNERID      - OPTIONAL REQUEST TO LIST THE RACF OR JOBPARM \"OWNER\"\n                OF THE JOB.\n1\n SINCE THERE MAY BE MANY JOBS REQUESTED BY THIS COMMAND, THERE MAY BE\n MANY CONSOLE MESSAGES GENERATED BY THIS COMMAND.  SOME EXAMPLES OF\n THE COMMAND AND THE RESPONSES ARE AS FOLLOWS:\n\n\n         $QJ272\n         JOB  272 $HASP908 GENER2   WAIT EXEC  1 PRIO 6 TEST ANY\n\n\n         $QJ303\n         JOB  303 $HASP908 GENER2   PRT LOCAL    PUN LOCAL    PRIO 1\n                           TEST ANY\n\n\n         $Q'EC*\n         JOB  1023 $HASP908 EC131    ON PRINTER3 PRIO 1 PROD GK81\n         JOB  1045 $HASP908 EC141    WAIT EXEC  A PRIO 3 PROD ANY\n         JOB  1652 $HASP908 EC130    PRT LOCAL    PUN LOCAL    PRIO 1\n                            PROD ABND ANY\n         JOB  1972 $HASP908 EC145    WAIT EXEC  A PRIO 4 PROD OHOLD\n                            GK81\n\n\n         $QJ289,SPOOL\n         JOB  289 $HASP908 EC130    PRT LOCAL    PUN LOCAL    PRIO 1\n                  PROD ABND USES   123 TRACK GROUPS -   5% OF SPOOL ON\n                  ($POOL1,3,4)\n\n\n         $QJ289,OWNER\n         JOB  289 $HASP908 EC130    PRT LOCAL    PUN LOCAL    PRIO 1\n                  PROD ABND FOR D33997\n\n\n         $QJ303\n                  $HASP919 JOB(S) NOT FOUND\n\n./ ADD NAME=$QN\n1\n                        JES2 $DN COMMAND\n\n\n EXTENSIVE MODIFICATIONS HAVE BEEN MADE TO CONTROL JOB PROCESSING AT\n FIRST UNION NATIONAL BANK.  THIS HAS CAUSED THE ADDITION OF MANY\n \"JOB FLAGS\" TO BE ASSIGNED TO A JOB.  THE STANDARD IBM DISPLAY\n COMMAND DOES NOT DISPLAY THESE FLAGS.  A NEW COMMAND WAS WRITTEN TO\n EFFECTIVELY REPLACE THE IBM $DN COMMAND.  THE FORMAT OF THE COMMAND\n IS IDENTICAL TO THE IBM COMMAND EXCEPT FOR SOME NEW ADDED\n PARAMETERS.  AFTER ALL SELECTED JOBS HAVE BEEN DISPLAYED, THE\n HASP946 MESSAGE WILL BE DISPLAYED GIVING THE PERCENT SPOOL\n UTILIZATION.  IF NO JOBS MEET THE DISPLAY REQUIREMENTS, ONLY THE\n HASP946 MESSAGE WILL BE DISPLAYED.  THE IBM $DN COMMAND CAN STILL\n BE ACCESSED BY USING ENTERING $QN INSTEAD.\n\n THE OUTPUT FROM THE COMMAND IS ALMOST IDENTICAL TO THE OUTPUT FROM\n THE IBM DISPLAY COMMAND EXCEPT WAITING HAS BEEN ABBREVIATED TO WAIT,\n EXECUTION TO EXEC, CONVERSION TO CONV, AND OUTPUT TO OUT.  THIS\n SHORTENS THE MESSAGE ENOUGH TO ALLOW MOST MESSAGES FOR A JOB TO\n FIT ON ONE LINE.  WHAT HAS CHANGED IS THE LIST OF ATTRIBUTES FOR\n THE JOB WHICH ARE DISPLAYED IMMEDIATELY AFTER THE PRIORITY.  A LIST\n OF THESE ATTRIBUTES FOLLOWS:\n\n    TEST   - THE JOB IS A TEST JOB\n    PROD   - THE JOB IS A PRODUCTION JOB\n    SETUP  - THE JOB IS WAITING FOR SETUP\n    UHOLD  - THE JOB IS WAITING FOR EXECUTION BECAUSE THE JOB HAS\n             BEEN HELD BY A SPECIAL TSO COMMAND BY A TSO USER.\n    DUPL   - THE JOB IS WAITING FOR EXECUTION BECAUSE A JOB BY THE\n             SAME NAME IS EXECUTING\n    QHOLD  - THE JOB IS WAITING FOR EXECUTION BECAUSE THE ENTIRE\n             EXECUTION CLASS HAS BEEN HELD BY THE OPERATOR\n    OHOLD  - THE JOB IS WAITING FOR EXECUTION BECAUSE THE JOB HAS\n             BEEN HELD BY A $HJ COMMAND ISSUED BY THE OPERATOR OR\n             THE JOB HAS A TYPRUN=HOLD ON THE JOB CARD.\n    JCLERR - THE JOB FAILED WITH A JCL ERROR\n    ABND   - THE JOB FAILED WITH AN ABEND\n    PURGE  - THE JOB IS WAITING FOR AN OPERATOR PURGE COMMAND\n             TO TAKE EFFECT\n    CANCEL - THE JOB IS WAITING FOR AN OPERATOR CANCEL COMMAND\n             TO TAKE EFFECT\n\n\n1\n                       $DN COMMAND FORMAT\n\n\n         $DN,\n             SYSTEM-ID\n                OR\n             ANY\n                OR\n             ALL\n                            Q=CNV CLASS\n                              XEQ CLASS\n                              OUT\n                              PPU\n                              HOLD\n                              XMT DEST1 - DEST2\n                            IND\n                            V=VOLSER\n                            R=DEST1 - DEST2\n                            JTYPE=JOBTYPE\n                            FLAGS=HOLD  +\n                                  OHOLD +\n                                  UHOLD +\n                                  SETUP +\n                                  FAIL  +\n                                  ABEND +\n                                  JCLERROR\n                            OWNERID\n                            OWNERID=USERID\n\n\n WHERE\n\n SYSTEM-ID    - THE SYSTEM IS TO DISPLAY THE JOB INFORMATION\n                FOR ALL JOBS WHOSE SYSTEM AFFINITIES INCLUDE\n                THIS SYSTEM NAME.  THE DEFAULT IS THE SYSTEM-ID\n                OF THE SYSTEM ON WHICH THE COMMAND IS ENTERED.\n ANY          - THE SYSTEM IS TO DISPLAY ONLY JOBS WHICH HAVE\n                NO SYSTEM AFFINITY TO ANY CPU AND THUS HAVE AN\n                AFFINITY OF \"ANY\".\n ALL          - THE SYSTEM IS TO DISPLAY ALL JOBS REGARDLESS\n                OF ANY SYSTEM AFFINITY.\n Q=CNV CLASS  - THE SYSTEM IS TO DISPLAY ONLY JOBS WAITING FOR\n                CONVERSION.  THE OPTIONAL CLASS, STC, OR TSU\n                DESIGNATION CAN BE USED TO LIMIT WHICH JOBS\n                ARE DISPLAYED.\n Q=XEQ CLASS  - THE SYSTEM IS TO DISPLAY ONLY JOBS WAITING FOR\n                CONVERSION OR EXECUTION.  THE OPTIONAL CLASS, STC, OR\n                TSU DESIGNATION CAN BE USED TO LIMIT WHICH JOBS ARE\n                DISPLAYED.\n1\n Q=OUT        - THE SYSTEM IS TO DISPLAY ONLY JOBS WAITING FOR\n                OUTPUT PROCESSING.\n Q=PPU        - THE SYSTEM IS TO DISPLAY ONLY JOBS WAITING FOR\n                PRINT OR PUNCH PROCESSING.\n Q=HOLD       - THE SYSTEM IS TO DISPLAY ONLY JOBS WHICH HAVE BEEN\n                HELD BY THE OPERATOR.\n Q=XMT DEST   - THE SYSTEM IS TO DISPLAY ONLY JOBS WAITING FOR\n                TRANSMISSION TO ANOTHER NJE NODE.  THE OPTIONAL\n                DESTINATION OR DESTINATION RANGE CAN BE USED TO\n                LIMIT WHICH JOBS ARE DISPLAYED.\n IND          - THE SYSTEM IS TO DISPLAY ONLY JOBS WHICH HAVE BEEN\n                SET TO AFFINITY TO A SPECIAL AFFINITY OF IND.\n V=VOLSER     - THE SYSTEM IS TO DISPLAY ONLY JOBS WHICH HAVE BEEN\n                DATA ON THE SPECIFIED SPOOL VOLUME.\n R=DEST       - THE SYSTEM IS TO DISPLAY ONLY JOBS WHICH HAVE DEFAULT\n                PRINT OR PUNCH FOR THE SPECIFIED DESTINATION OR\n                DESTINATION RANGE.  NOTE THAT ANY INDIVIDUAL OUTPUT\n                GROUPS TO OTHER THAN THE JOB'S DEFAULT DESTINATION\n                WILL NOT BE DISPLAYED.\n JTYPE=TYPE   - THE SYSTEM IS TO DISPLAY ONLY JOBS WHICH HAVE A JOB\n                TYPE MATCHING THE SPECIFIED TYPE.  THE ONLY VALUES\n                FOR TYPE THAT ARE ALLOWED ARE P FOR PRODUCTION OR\n                T FOR TEST.\n FLAGS=LIST   - THE SYSTEM IS TO DISPLAY ONLY JOBS WHICH CONTAIN\n                THE REQUESTED FLAGS.  MORE THAN ONE FLAG VALUE CAN\n                BE SPECIFIED BY SEPARATING THE FLAG NAMES WITH A\n                '+' SIGN.  IF MORE THAN ONE FLAG VALUE IS LISTED,\n                ONLY JOBS WHICH MATCH ALL REQUESTS WILL BE DISPLAYED.\n                FOR EXAMPLE, FLAGS=OHOLD+JCLERROR WILL DISPLAY ONLY\n                JOBS ON OPERATOR HOLD WHICH HAVE FAILED WITH A JCL\n                ERROR.\n FLAGS=HOLD   - THE SYSTEM IS TO DISPLAY ONLY JOBS WHICH ARE ON\n                OPERATOR HOLD, USER HOLD, OR SETUP HOLD.  THIS FLAG\n                VALUE IS EQUIVALENT TO OHOLD+UHOLD+SETUP.\n FLAGS=OHOLD  - THE SYSTEM IS TO DISPLAY ONLY JOBS WHICH ARE ON\n                OPERATOR HOLD.\n FLAGS=UHOLD  - THE SYSTEM IS TO DISPLAY ONLY JOBS WHICH ARE ON\n                USER HOLD.\n FLAGS=SETUP  - THE SYSTEM IS TO DISPLAY ONLY JOBS WHICH ARE ON\n                SETUP HOLD.\n FLAGS=FAIL   - THE SYSTEM IS TO DISPLAY ONLY JOBS WHICH HAVE FAILED\n                WITH AN ABEND OR JCL ERROR.  THIS FLAG VALUE IS\n                EQUIVALENT TO ABEND+JCLERROR.\n FLAGS=ABEND  - THE SYSTEM IS TO DISPLAY ONLY JOBS WHICH HAVE FAILED\n                WITH AN ABEND.\n FLAGS=JCLERR - THE SYSTEM IS TO DISPLAY ONLY JOBS WHICH HAVE FAILED\n                WITH A JCL ERROR.\n OWNERID      - THE SYSTEM IS TO INCLUDE THE OWNERID OF THE JOB WITH\n OWNERID=OWNER  THE REST OF THE JOB INFORMATION.  IF AN OPTIONAL\n                OWNERID VALUE IS SPECIFIED, ONLY JOBS FOR THAT USER\n                WILL BE DISPLAYED.\n\n1\n SINCE THERE MAY BE MANY JOBS REQUESTED BY THIS COMMAND, THERE MAY BE\n MANY CONSOLE MESSAGES GENERATED BY THIS COMMAND.  SOME EXAMPLES OF\n THE COMMAND AND THE RESPONSES ARE AS FOLLOWS:\n\n\n         $DN,Q=XEQ\n         JOB  272 $HASP908 GENER2   WAIT EXEC  1 PRIO 6 TEST ANY\n                  $HASP946   41 PERCENT SPOOL UTILIZATION\n\n\n         $DN,Q=XEQ,OWNERID\n         JOB  272 $HASP908 GENER2   WAIT EXEC  1 PRIO 6 TEST ANY\n                           FOR S40384\n                  $HASP946   41 PERCENT SPOOL UTILIZATION\n\n\n         $DN,Q=PPU\n         JOB  303 $HASP908 GENER2   PRT LOCAL    PUN LOCAL    PRIO 1\n                           TEST ANY\n                  $HASP946   62 PERCENT SPOOL UTILIZATION\n\n\n         $DN,JT=P\n         JOB  1023 $HASP908 EC131    ON PRINTER3 PRIO 1 PROD GK81\n         JOB  1045 $HASP908 EC141    WAIT EXEC  A PRIO 3 PROD ANY\n         JOB  1652 $HASP908 EC130    PRT LOCAL    PUN LOCAL    PRIO 1\n                            PROD ABND ANY\n         JOB  1972 $HASP908 EC145    WAIT EXEC  A PRIO 4 PROD OHOLD\n                            GK81\n                  $HASP946   19 PERCENT SPOOL UTILIZATION\n\n\n         $DN,FLAGS=FAIL\n         JOB  289 $HASP908 EC130    PRT LOCAL    PUN LOCAL    PRIO 1\n                           PROD ABND\n                  $HASP946   33 PERCENT SPOOL UTILIZATION\n\n\n         $DN,Q=XEQ\n                  $HASP946   46 PERCENT SPOOL UTILIZATION\n\n./ ADD NAME=$TJIT\n1\n\n\n                        JES2 $TJIT COMMAND\n\n\n EXTENSIVE MODIFICATIONS HAVE BEEN MADE TO THE JES2 JOB SEPARATOR\n ROUTINES AT FIRST UNION BANK TO PROVIDE JOB DISTRITBUTION INFORMATION\n WHICH IS NOT NORMALLY AVAILABLE FOR A JOB.  THIS INFORMATION IS\n EXTRACTED FROM A VSAM FILE BY JOBNAME FOR PRODUCTION JOBS OR BY\n OWNERID FOR TEST JOBS.  TO AVOID THE EXPOSURE OF JES2 GOING INTO A\n WAIT STATE WHILE READING THE VSAM FILE, THE ACTUAL I/O TO THE\n FILE IS PERFORMED BY A SEPARATE TASK.  ANY JES2 ROUTINE CAN REQUEST\n INFORMATION FROM THIS TASK BY QUEUEING A REQUEST TO THE JIT OR\n JOB INFORMATION TASK.  BECAUSE THE JIT IS DEPENDENT UPON BEING ABLE\n TO READ A VSAM FILE, THE FACILITY CAN BE EFFECTIVELY DISABLED DUE\n TO I/O BOTTLENECKS, I/O ERRORS, OR A DAMAGED FILE.  A MECHANISM\n HAS BEEN PROVIDED TO DISPLAY AND/OR ALTER THE STATUS OF THE JIT.\n\n\n                         COMMAND FORMAT\n\n    $TJIT\n             ,STOP\n             ,START\n             ,RESTART\n             ,STATUS\n             ,LIST=JIT.KEY\n             ,DSN=VSAM.FILE.DSNAME\n\n STOP      - THE JIT IS TO CLOSE AND FREE THE VSAM FILE.  ANY REQUEST\n             FOR INFORMATION WILL BE PROCESSED AS IF THE REQUESTED\n             INFORMATION WAS NOT FOUND.  THIS MUST BE THE FIRST\n             OPERAND IF SPECIFIED.\n\n START     - THE JIT IS TO ALLOCATE AND OPEN THE VSAM FILE.  NORMAL\n             JIT PROCESSING IS TO RESUME.  THIS MUST BE THE FIRST\n             OPERAND IF SPECIFIED.\n\n RESTART   - THE JIT IS TO CONDITIONALLY CLOSE AND FREE THE VSAM FILE\n             IF IT IS CURRENTLY IN USE AND THEN REALLOCATE AND OPEN\n             THE FILE.  THIS COULD FOLLOW A CHANGE IN THE VSAM FILE\n             NAME AND WOULD RESULT IN SWITCHING TO ANOTHER FILE\n             WITHOUT INTERRUPTION OF PROCESSING.  THIS MUST BE THE\n             FIRST OPERAND IF SPECIFIED.\n\n STATUS    - THE STATUS OF THE JIT IS TO BE EXAMINED BY THE COMMAND\n             ROUTINE AND RETURN THE INFORMATION TO THE OPERATOR.\n             JIT SERVICES ARE NOT USED TO SUPPLY THIS INFORMATION.\n             THIS MUST BE THE FIRST OPERAND IF SPECIFIED.\n\n1\n\n\n LIST=KEY  - THE JIT IS TO RETURN THE JOB INFORMATION RECORD TO THE\n             COMMAND ROUTINE TO BE DISPLAYED.  THE KEY WILL BE THE\n             OWNERID FOR TEST OR THE JOBNAME FOLLOWED BY THE OPTIONAL\n             OUTPUT GROUP NAME FOR PRODUCTION.  IF THE OPTIONAL OUTPUT\n             GROUP NAME IS SPECIFIED AND THE JOBNAME IS LESS THAN 8\n             CHARACTERS LONG, THE JOBNAME MUST BE PADDED WITH \".\" OR\n             \"*\" TO FILL IN THE SPACE PRIOR TO THE OUTPUT GROUP NAME.\n             THIS MUST BE THE FIRST OPERAND IF SPECIFIED.\n\n DSN=DSN   - THE DSNAME OF THE VSAM FILE USED BY THE JIT IS TO BE\n             ALTERED.  THIS WILL NOT AFFECT CURRENT JIT PROCESSING\n             BUT WILL TAKE EFFECT ON THE NEXT STOP/STOP SEQUENCE OR\n             ON THE NEXT RESTART REQUEST.  NOTE THAT THIS OPERAND CAN\n             BE USED AT THE SAME TIME AS A RESTART REQUEST SO THAT THE\n             NAME CAN BE CHANGED AND THEN ACTIVATED AT THE SAME TIME.\n\n1\n\n\n                  MESSAGES FROM THE $TJIT COMMAND\n\n\n         $HASP990 INSUFFICIENT OPERANDS\n\n                  AT LEAST ONE OPERAND MUST BE SPECIFIED ON THE $TJIT\n                  COMMAND\n\n         $HASP990 ......... INVALID OPERAND\n\n                  THE LISTED OPERAND IS EITHER INVALID OR SPECIFIED\n                  OUT OF SEQUENCE.  SEVERAL OPERANDS MUST BE THE FIRST\n                  OPERAND IN THE LIST IF SPECIFIED.\n\n         $HASP990 DSNAME SUCCESSFULLY MODIFIED\n\n                  THE $TJIT COMMAND WAS SPECIFIED WITH THE DSN=\n                  OPERAND.  THE DSNAME VALUE WAS STORED FOR FUTURE\n                  JIT START OR RESTART PROCESSING.\n\n         $HASP990 JOB INFORMATION TASK NOT INITIALIZED\n\n                  THE INTERNAL CONTROL BLOCK STRUCTURE INDICATES\n                  THAT THE JIT WAS NOT INITIALIZED WHEN JES2 WAS\n                  STARTED.  JIT PROCESSING WILL BE BYPASSED\n\n         $HASP990 JIT ....... PROCESSING FAILED\n\n                  AN ERROR OCCURRED ATTEMPTING TO PROCESS ONE\n                  OF THE $TJIT OPTIONS.  A MESSAGE GIVING THE\n                  REASON FOR THE FAILURE WILL PRECEDE THIS\n                  MESSAGE.\n\n         $HASP990 JIT ....... PROCESSING SUCCESSFULLY COMPLETED\n\n                  THE REQUESTED $TJIT OPTION WAS SUCCESSFULLY\n                  PROCESSED.  ADDITIONAL MESSAGES MAY FOLLOW\n                  IF INFORMATION FROM THE JIT WAS REQUESTED.\n1\n\n\n         $HASP990 JIT DSN=............\n         $HASP990 JIT STOPPED/STARTED INIT ALLOC OPENED I/O WAIT\n                      ACTIVE QUEUE=NNN\n\n                  THESE MESSAGES ARE IN RESPONSE TO THE STATUS\n                  OPTION.  THE FIRST MESSAGE WILL LIST THE DSNAME\n                  OF THE VSAM FILE.  THIS MAY NOT BE THE NAME OF\n                  THE FILE CURRENTLY IN USE IF THE NAME HAS BEEN\n                  ALTERED.  THE SECOND MESSAGE WILL LIST ATTRIBUTES\n                  OF THE TASK AS FOLLOWS:\n\n                  STOPPED   - THE JIT INTERFACE IS STOPPED BECAUSE\n                              OF INITIALIZATION FAILURES OR OPERATOR\n                              REQUEST.\n\n                  STARTED   - THE JIT INTERFACE IS AVAILABLE FOR\n                              NORMAL PROCESSING.\n\n                  INIT      - THE INTERNAL VSAM CONTROL BLOCKS HAVE\n                              BEEN INITIALIZED.\n\n                  ALLOC     - THE VSAM FILE HAS BEEN ALLOCATED.\n\n                  OPENED    - THE VSAM FILE IS OPENED FOR PROCESSING.\n\n                  I/O       - A VSAM I/O REQUEST IS IN PROCESS.\n\n                  WAIT      - THE JIT IS WAITING FOR WORK.\n\n                  ACTIVE    - THE JIT IS CURRENTLY PROCESSING A\n                              REQUEST.\n\n                  QUEUE=NNN - THE JIT QUEUE HAS NNN REQUESTS\n                              PENDING.\n\n\n         $HASP990 JOBNAME =........  GROUPID =........\n         $HASP990 PDIST   =........  SDIST   =........\n         $HASP990 DUEOUT  =....      SYSCLASS=.\n         $HASP990 DESCR   =........  UCC7FLG =.\n         $HASP990 NAME    =....................\n         $HASP990 PHONE   =...............\n         $HASP990 LOCATION=...............\n         $HASP990 DEPT    =....................\n         $HASP990 MAILCODE=..........\n         $HASP990 INS 1   =.........................\n         $HASP990 INS 2   =.........................\n         $HASP990 INS 3   =.........................\n         $HASP990 INS 4   =.........................\n\n                  THESE MESSAGES ARE IN RESPONSE TO THE LIST=\n                  OPTION.  THESE MESSAGES WILL APPEAR EVEN IF\n                  LIST REQUEST FAILS SINCE IT WILL DISPLAY THE\n                  JOBNAME AND OUTPUT GROUP NAME WHICH WAS\n                  REQUESTED.\n1\n\n\n                  MESSAGES FROM THE JOB INFORMATION TASK\n\n\n         $HASP970 JOB INFORMATION SUBTASK INITIALIZATION BEGINNING\n\n                  THIS MESSAGE SHOULD APPEAR WHEN JES2 IS STARTED\n                  WHEN THE SYSTEM IS IPLED OR JES2 IS RESTARTED\n                  FOR A HOT START.\n\n         $HASP970 JOB INFORMATION SUBTASK TERMINATION REQUESTED\n\n                  THIS MESSAGE SHOULD APPEAR WHEN JES2 IS STOPPED\n                  FOR ANY REASON.\n\n         $HASP970 INVALID JITB CHAIN ENCOUNTERED IN JOB INFORMATION\n                  TASK\n\n                  THIS JIT IS ATTEMPTING TO TAKE A REQUEST FROM THE\n                  CHAIN OF REQUESTS, AND ONE OF THE REQUESTS IN THE\n                  CHAIN IS NOT A JITB.  SINCE THE REQUEST CANNOT BE\n                  PROPERLY HANDLED, IT IS LIKELY THAT ONE OR MORE\n                  OF THE JES2 PROCESSORS WILL BE PERMANENTLY LOCKED\n                  UP WAITING ON JIT PROCESSING.  BECAUSE OF THIS,\n                  JES2 WILL BE TERMINATED WITH A SYSTEM FFF ABEND\n                  AND A SYSTEM DUMP AUTOMATICALLY TAKEN.  JES2 CAN\n                  THEN BE HOT STARTED TO RESUME PROCESSING.\n\n         $HASP970 JOB INFORMATION FILE NOT STOPPED\n\n                  A START REQUEST WAS RECEIVED AND THE JIT WAS\n                  ALREADY STARTED.  A STOP REQUEST MUST FIRST BE\n                  PROCESSED BEFORE A START REQUEST CAN BE ISSUED.\n\n         $HASP970 JOB INFORMATION FILE CANNOT BE STARTED\n\n                  AN INTERNAL ROUTINE FAILURE OCCURRED WHILE\n                  PROCESSING A START REQUEST.  ANOTHER HASP970\n                  MESSAGE HAS BEEN ISSUED GIVING THE REASON FOR\n                  THE FAILURE.\n\n         $HASP970 JOB INFORMATION FILE NOT STARTED\n\n                  A STOP REQUEST WAS RECEIVED AND THE JIT WAS\n                  ALREADY STOPPED.  A START REQUEST MUST FIRST BE\n                  PROCESSED BEFORE A STOP REQUEST CAN BE ISSUED.\n\n         $HASP970 JOB INFORMATION FILE CANNOT BE STOPPED\n\n                  AN INTERNAL ROUTINE FAILURE OCCURRED WHILE\n                  PROCESSING A STOP REQUEST.  ANOTHER HASP970\n                  MESSAGE HAS BEEN ISSUED GIVING THE REASON FOR\n                  THE FAILURE.\n1\n\n\n         $HASP970 JOB INFORMATION FILE CANNOT BE RESTARTED\n\n                  AN INTERNAL ROUTINE FAILURE OCCURRED WHILE\n                  PROCESSING A RESTART REQUEST.  ANOTHER HASP970\n                  MESSAGE HAS BEEN ISSUED GIVING THE REASON FOR\n                  THE FAILURE.\n\n         $HASP970 LENGTH OF DSNAME FOR JOB INFORMATION FILE IS ZERO\n\n                  THE JIT ALLOCATION ROUTINE DETERMINED THAT THE\n                  CURRENT DSNAME FOR THE JIT FILE IS BLANK WHICH\n                  IS DETECTED WHEN THE LENGTH IS ZERO.  THE START\n                  OR RESTART REQUEST IS TERMINATED.\n\n         $HASP970 UNABLE TO ALLOCATE JOB INFORMATION FILE\n         $HASP970 SVC99 RC=XX E=XXXX I=XXXX\n\n                  THESE MESSAGES ARE ISSUED WHEN THE ATTEMPT TO\n                  ALLOCATE THE JIT FILE IS UNSUCESSFUL.  THE DYNAMIC\n                  ALLOCATION RETURN CODE, ERROR CODE, AND INFORMATION\n                  CODE WILL AID TECHNICAL SERVICES IN PROBLEM\n                  DETERMINATION.\n\n         $HASP970 UNABLE TO GENERATE ACB FOR JOB INFORMATION FILE\n\n                  THE JIT INITIALIZATION ROUTINE FAILED ATTEMPTING TO\n                  INITIALIZE THE ACB FOR THE JIT FILE.  THE\n                  START/RESTART REQUEST IS TERMINATED.  NOTIFY\n                  TECHNICAL SERVICES.\n\n         $HASP970 UNABLE TO GENERATE RPL FOR JOB INFORMATION FILE\n\n                  THE JIT INITIALIZATION ROUTINE FAILED ATTEMPTING TO\n                  INITIALIZE THE RPL FOR THE JIT FILE.  THE\n                  START/RESTART REQUEST IS TERMINATED.  NOTIFY\n                  TECHNICAL SERVICES.\n\n         $HASP970 UNABLE TO MODIFY ACB FOR JOB INFORMATION FILE\n\n                  THE JIT INITIALIZATION ROUTINE FAILED ATTEMPTING TO\n                  INITIALIZE THE ACB FOR THE JIT FILE.  THE\n                  START/RESTART REQUEST IS TERMINATED.  NOTIFY\n                  TECHNICAL SERVICES.\n\n         $HASP970 UNABLE TO MODIFY RPL FOR JOB INFORMATION FILE\n\n                  THE JIT INITIALIZATION ROUTINE FAILED ATTEMPTING TO\n                  INITIALIZE THE RPL FOR THE JIT FILE.  THE\n                  START/RESTART REQUEST IS TERMINATED.  NOTIFY\n                  TECHNICAL SERVICES.\n\n         $HASP970 UNABLE TO OPEN THE JOB INFORMATION FILE\n\n                  THE JIT OPEN ROUTINE DETERMINED THAT THE SYSTEM OPEN\n                  REQUEST FAILED. THE START/RESTART REQUEST IS\n                  TERMINATED.  NOTIFY TECHNICAL SERVICES.\n1\n\n\n         $HASP970 JOB INFORMATION FILE I/O ERROR R15=XX\n                  RPLFDBWD=XXXXXXXX\n\n                  AN I/O ERROR OCCURRED ATTEMPTING TO READ THE JIT\n                  FILE.  THE JIT REQUEST IS FAILED.  NOTIFY TECHNICAL\n                  SERVICES.\n\n         $HASP970 JOB INFORMATION FILE TASK ABEND - CURRENT REQUEST\n                  WILL BE TERMINATED\n\n                  AN ABEND WAS DETECTED IN THE JIT ROUTINE.  RECOVERY\n                  WILL BE ATTEMPTED, BUT THE CURRENT REQUEST WILL BE\n                  TERMINATED.\n\n./ ADD NAME=$TUCC7\n1\n\n\n                        JES2 $TUCC7 COMMAND\n\n\n EXTENSIVE MODIFICATIONS HAVE BEEN MADE TO THE JES2 JOB SEPARATOR\n ROUTINES AT FIRST UNION BANK TO PROVIDE JOB DISTRITBUTION INFORMATION\n WHICH IS NOT NORMALLY AVAILABLE FOR A JOB.  THIS INFORMATION IS\n EXTRACTED FROM A VSAM FILE BY JOBNAME FOR PRODUCTION JOBS OR BY\n OWNERID FOR TEST JOBS.  IF THE VSAM RECORD FOR THIS JOB REQUESTS IT,\n THE SEPARATOR EXIT CAN DEMAND A JOB NETWORK FROM UCC7 FOR THE JOB\n WHICH HAS JUST BEEN PRINTED.  THIS NETWORK MUST BE POSTED BY\n DISTRIBUTION WHEN THIS REPORT IS PLACED IN THE USER'S BIN OR CART.\n THIS ALLOWS TRACKING OF SERVICE LEVEL AGREEMENTS FOR PRODUCTION\n PRINTED OUTPUT.  TO AVOID THE EXPOSURE OF JES2 GOING INTO A WAIT\n STATE WHILE THE UCC7 REQUEST IS BEING PROCESSED, A SEPARATE TASK HAS\n BEEN INITIALIZED TO PROCESS THESE REQUESTS.  ANY JES2 ROUTINE CAN\n DEMAND A NETWORK BY QUEUEING A REQUEST TO THE UCC7 TASK.  BECAUSE THE\n UCC7 INTERFACE PERFORMS EXTERNAL PROCESSING, THE FACILITY CAN BE\n EFFECTIVELY DISABLED DUE TO SYSTEM BOTTLENECKS. A MECHANISM HAS BEEN\n PROVIDED TO DISPLAY AND/OR ALTER THE STATUS OF THE UCC7 TASK.\n\n                         COMMAND FORMAT\n\n    $TUCC7\n             ,STOP\n             ,START\n             ,RESTART\n             ,STATUS\n             ,DEMAND=JIT.KEY\n\n STOP      - THE UCC7 TASK IS DISABLE THE UCC7 INTERFACE.  ANY REQUEST\n             WILL BE PROCESSED AS IF THE PROCESS FAILED.  THIS MUST BE\n             THE FIRST OPERAND IF SPECIFIED.\n\n START     - THE UCC7 TASK  IS TO RELOAD THE UCC7 INTERFACE MODULE\n             AND ENABLE THE UCC7 INTERFACE.  THIS MUST BE THE FIRST\n             OPERAND IF SPECIFIED.\n\n RESTART   - THE UCC7 TASK  IS TO RELOAD THE UCC7 INTERFACE MODULE\n             AND ENABLE THE UCC7 INTERFACE.  THIS MUST BE THE FIRST\n             OPERAND IF SPECIFIED.\n\n STATUS    - THE STATUS OF THE UCC7 TASK  IS TO BE EXAMINED BY THE\n             COMMAND ROUTINE AND RETURN THE INFORMATION TO THE\n             OPERATOR.  UCC7 TASK  SERVICES ARE NOT USED TO SUPPLY\n             THIS INFORMATION.  THIS MUST BE THE FIRST OPERAND IF\n             SPECIFIED.\n\n DMD=KEY   - THE COMMAND ROUTINE IS TO READ THE JOB INFORMATION RECORD\n             FROM THE JIT ACCORDING TO THE KEY ENTERED.  IF THE UCC7\n             REQUESTED INDICATOR IS ON IN THE RECORD, THE UCC7 TASK\n             WILL BE POSTED TO DEMAND THE JOB NETWORK.  THE KEY IS THE\n             JOBNAME FOLLOWED BY THE GROUP NAME.  IF THE JOBNAME IS\n             LESS THAN 8 CHARACTERS LONG, THE JOBNAME MUST BE PADDED\n             WITH \".\" OR \"*\" TO FILL IN THE SPACE PRIOR TO THE OUTPUT\n             GROUP NAME.  THIS MUST BE THE FIRST OPERAND IF SPECIFIED.\n1\n\n\n                  MESSAGES FROM THE $TUCC7 COMMAND\n\n\n         $HASP990 INSUFFICIENT OPERANDS\n\n                  AT LEAST ONE OPERAND MUST BE SPECIFIED ON THE $TUCC7\n                  COMMAND\n\n         $HASP990 ......... INVALID OPERAND\n\n                  THE LISTED OPERAND IS EITHER INVALID OR SPECIFIED\n                  OUT OF SEQUENCE.  SEVERAL OPERANDS MUST BE THE FIRST\n                  OPERAND IN THE LIST IF SPECIFIED.\n\n         $HASP990 UCC7 TASK TASK NOT INITIALIZED\n\n                  THE INTERNAL CONTROL BLOCK STRUCTURE INDICATES THAT\n                  THE UCC7 TASK  WAS NOT INITIALIZED WHEN JES2 WAS\n                  STARTED.  UCC7 TASK  PROCESSING WILL BE BYPASSED.\n\n         $HASP990 JOB INFORMATION TASK NOT INITIALIZED\n\n                  THE INTERNAL CONTROL BLOCK STRUCTURE INDICATES\n                  THAT THE JIT WAS NOT INITIALIZED WHEN JES2 WAS\n                  STARTED.  UCC7 DEMAND  PROCESSING WILL BE BYPASSED\n                  SINCE THE JITB CANNOT BE READ.\n\n         $HASP990 UCC7 ....... PROCESSING FAILED\n\n                  AN ERROR OCCURRED ATTEMPTING TO PROCESS ONE\n                  OF THE $TUCC7 OPTIONS.  A MESSAGE GIVING THE\n                  REASON FOR THE FAILURE WILL PRECEDE THIS\n                  MESSAGE.\n\n         $HASP990 UCC7 ....... PROCESSING SUCCESSFULLY COMPLETED\n\n                  THE REQUESTED $TUCC7 OPTION WAS SUCCESSFULLY\n                  PROCESSED.  ADDITIONAL MESSAGES MAY FOLLOW\n                  IF THE DEMAND PROCESSING WAS REQUESTED.\n1\n\n\n         $HASP990 UCC7 ENABLED/DISABLED INTERFACE LOADED\n\n                  THIS MESSAGES ARE IN RESPONSE TO THE STATUS\n                  OPTION.  THIS WILL LIST ATTRIBUTES OF THE TASK\n                  AS FOLLOWS:\n\n                  DISABLED  - THE UCC7 INTERFACE IS STOPPED BECAUSE\n                              OF INITIALIZATION FAILURES, AN INTERFACE\n                              ABEND, OR OPERATOR REQUEST.\n\n                  ENABLED   - THE UCC7 INTERFACE IS AVAILABLE FOR\n                              NORMAL PROCESSING.\n\n                  INTERFACE LOADED - THE UCC7 INTERFACE MODULE HAS\n                              BEEN SUCESSFULLY LOADED INTO MEMORY.\n\n\n         $HASP980 UCC7 JOBNAME =........\n         $HASP980 UCC7 GROUPID =........\n\n                  THESE MESSAGES ARE IN RESPONSE TO THE DMD= OPTION.\n                  THESE MESSAGES WILL APPEAR EVEN IF DEMAND REQUEST\n                  FAILS SINCE IT WILL DISPLAY THE JOBNAME AND OUTPUT\n                  GROUP NAME WHICH WAS REQUESTED.\n1\n\n\n                      MESSAGES FROM THE UCC7 TASK\n\n\n         $HASP980 UCC7 SUBTASK INITIALIZATION BEGINNING\n\n                  THIS MESSAGE SHOULD APPEAR WHEN JES2 IS STARTED\n                  WHEN THE SYSTEM IS IPLED OR JES2 IS RESTARTED\n                  FOR A HOT START.\n\n         $HASP980 UCC7 SUBTASK TERMINATION REQUESTED\n\n                  THIS MESSAGE SHOULD APPEAR WHEN JES2 IS STOPPED\n                  FOR ANY REASON.\n\n         $HASP980 INVALID JITB CHAIN ENCOUNTERED IN UCC7 SUBTASK\n\n                  THE UCC7 TASK IS ATTEMPTING TO TAKE A REQUEST FROM\n                  THE CHAIN OF REQUESTS, AND ONE OF THE REQUESTS IN\n                  THE CHAIN IS NOT A JITB.  SINCE THE REQUEST CANNOT\n                  BE PROPERLY HANDLED, IT IS LIKELY THAT ONE OR MORE\n                  OF THE JES2 PROCESSORS WILL BE PERMANENTLY LOCKED UP\n                  WAITING ON UCC7 TASK PROCESSING.  BECAUSE OF THIS,\n                  JES2 WILL BE TERMINATED WITH A SYSTEM FFF ABEND AND\n                  A SYSTEM DUMP AUTOMATICALLY TAKEN.  JES2 CAN THEN BE\n                  HOT STARTED TO RESUME PROCESSING.\n\n         $HASP980 ERROR LOADING UCC7 INTERFACE MODULE -\n                  ABEND SXXX RC=NNNN\n\n                  THE UCC7 TASK ATTEMPTED TO LOAD THE UCC7 INTERFACE\n                  MODULE, BUT AN ERROR OCCURRED.  CONTACT TECHNICAL\n                  SUPPORT FOR PROBLEM RESOLUTION.\n\n         $HASP980 DEMAND FOR UCC7 NETWORK JJJJJJJJ.NNNNNNNN FAILED -\n                  INTERFACE ROUTINE LOAD ERROR\n\n                  THE UCC7 TASK ATTEMPTED TO DEMAND A NETWORK FOR\n                  JOBNAME JJJJJJJJ AND OUTPUT GROUP NNNNNNNN BUT IT\n                  COULD NOT SINCE A PREVIOUS ATTEMPT TO LOAD THE\n                  UCC7 INTERFACE MODULE HAD FAILED.\n\n         $HASP980 DEMAND FOR UCC7 NETWORK JJJJJJJJ.NNNNNNNN FAILED -\n                  INTERFACE ROUTINE DISABLED\n\n                  THE UCC7 TASK ATTEMPTED TO DEMAND A NETWORK FOR\n                  JOBNAME JJJJJJJJ AND OUTPUT GROUP NNNNNNNN BUT IT\n                  COULD NOT SINCE THE INTERFACE WAS DISABLED DUE\n                  TO A PREVIOUS ABEND CONDITION OR OPERATOR COMMAND.\n\n         $HASP980 UCC7 INTERFACE TASK ABEND - INTERFACE WILL BE\n                  DISABLED\n\n                  AN ABEND WAS DETECTED IN THE UCC7 TASK ROUTINE.\n                  RECOVERY WILL BE ATTEMPTED, BUT THE CURRENT REQUEST\n                  WILL BE TERMINATED AND THE INTERFACE DISABLED.\n\n./ ADD NAME=$DV\n1\n                        JES2 $DV COMMAND\n\n\n A NEW COMMAND HAS BEEN ADDED TO JES2 FOR USE BY THE MVS COMPUTER\n CONSOLE OPERATORS.  THERE ARE INSTANCES WHERE SOMEONE AT THE OPERATOR\n CONSOLE NEETS TO DISPLAY INFORMATION ABOUT A DASD VOLUME AND ALL THAT\n IS KNOWN IS THE VOLSER OR VOLSER PREFIX.  THE D U,DASD,ONLINE COMMAND\n WAS USED TO DISPLAY ALL VOLUMES AND THE LIST SCANNED FOR THE CORRECT\n VOLSER.  THE $DV COMMAND GIVES THE CONSOLE OPERATOR THE ABILITY TO\n DISPLAY DASD VOLUMES BY VOLSER, VOLSER PREFIX, OR UNIT ADDRESS.\n\n         $DV,MVSRS\n         $HASP900 MVSRSG  141 3380   PRIV/RSDNT    202\n         $HASP900 MVSRSF  250 3380   PRIV/RSDNT    000\n         $HASP900 MVSRS2  252 3380   PRIV/RSDNT    000\n\n THIS NEW COMMAND ALLOWS THE OPERATOR TO DETERMINE THE UNIT ADDRESS,\n DEVICE TYPE, MOUNT ATTRIBUTES, AND USE COUNT. THE FORMAT OF THE NEW\n COMMAND IS AS FOLLOWS:\n\n\n1\n                       $DV COMMAND FORMAT\n\n\n         $DV,\n             VOLSER\n               OR\n             @UUU\n               OR\n             ALL\n WHERE\n\n VOLSER       - THE COMPLETE VOLSER OR VOLSER PREFIX FOR WHICH\n                INFORMATION IS TO BE DISPLAYED.\n @UUU         - AN \"@\" CHARACTER FOLLOWED BY THE FULL UNIT ADDRESS OR\n                ADDRESS PREFIX FOR WHICH INFORMATION IS TO BE\n                DISPLAYED.\n ALL          - INDICATED THAT INFORMATION IS TO BE DISPLAYED FOR\n                ALL DASD VOLUMES.\n1\n         $DV,MVSRS\n         $HASP900 MVSRSG  141 3380   PRIV/RSDNT    202\n         $HASP900 MVSRSF  250 3380   PRIV/RSDNT    000\n         $HASP900 MVSRS2  252 3380   PRIV/RSDNT    000\n\n         $DV,MVSRSG\n         $HASP900 MVSRSG  141 3380   PRIV/RSDNT    202\n\n         $DV,@141\n         $HASP900 MVSRSG  141 3380   PRIV/RSDNT    202\n\n         $DV,DASD\n         $HASP919 NO VOLUME(S) FOUND\n./ ADD NAME=$SL\n1\n                        JES2 $SL COMMAND\n\n\n MODIFICATIONS HAVE BEEN MADE TO THE STANDARD IBM SETUP PROCESSING\n AT FIRST UNION NATIONAL BANK.  WE HAVE A REQUIREMENT TO BE ABLE TO\n LIST ALL JOBS WHICH HAVE NOT HAD THEIR SETUP REQUIREMENTS MET.\n OPERATIONS MUST ALSO BE ABLE TO RE-LIST THE JES2 SETUP CARDS WHICH\n DESCRIBE THE SETUP REQUIREMENTS.  THE $SL COMMAND WAS WRITTEN TO\n PROVIDE THIS FACILITY.\n\n\n1\n                       $SL COMMAND FORMAT\n\n\n         $SL\n\n                  OR\n\n         $SL\n             J=JXXXX-YYYY\n                OR\n             J=SXXXX-YYYY\n                OR\n             J=TXXXX-YYYY\n\n                           ,JECL\n\n\n WHERE\n\n NO OPERANDS REQUESTS A LIST OF ALL JOBS WHICH ARE WAITING\n FOR SETUP.  SEE THE DOCUMENTATION ON THE $QJ COMMAND FOR\n DETAILS ON THE MESSAGE RESPONSE.\n\n J=JXXXX-YYYY - JOB OR RANGE OF JOBS TO BE LISTED\n J=SXXXX-YYYY - TASK OR RANGE OF STARTED TASKS TO BE LISTED\n J=TXXXX-YYYY - TSO USER OR RANGE OF TSO USERS TO BE LISTED\n JECL         - OPTIONAL REQUEST TO LIST THE JOB CARD AND ANY JES2\n                JECL CONTROL CARDS FOR THE REQUESTED JOB(S).\n\n1\n SINCE THERE MAY BE MANY JOBS REQUESTED BY THIS COMMAND, THERE MAY BE\n MANY CONSOLE MESSAGES GENERATED BY THIS COMMAND.  SOME EXAMPLES OF\n THE COMMAND AND THE RESPONSES ARE AS FOLLOWS:\n\n\n         $SL\n         JOB  271 $HASP908 GENER1   WAIT EXEC  T PRIO 6 TEST SETUP ANY\n         JOB  272 $HASP908 GENER2   WAIT EXEC  T PRIO 3 TEST SETUP\n                  GK81\n         JOB  273 $HASP908 GENER3   WAIT EXEC  T PRIO 7 TEST SETUP ANY\n\n\n         $SL\n                  $HASP999 NO JOBS AWAITING SETUP!\n\n\n         $SL,J=J272\n                  $HASP900 JOB  272 GENER2   AWAITING SETUP\n                  $HASP900 JOB  SETUP:  SETUP MESSAGE 1\n                  $HASP900              SETUP MESSAGE 2\n                  $HASP900              SETUP MESSAGE 3\n\n\n         $SL,J=J272\n                  $HASP999 JOB  272 GENER2   NO SETUP INFORMATION\n                           AVAILABLE\n\n\n         $SL,J=J272\n                  $HASP999 JOB(S) NOT FOUND\n./ ADD NAME=$SR\n1\n                        JES2 $SR COMMAND\n\n\n MODIFICATIONS HAVE BEEN MADE TO THE STANDARD IBM SETUP PROCESSING AT\n FIRST UNION NATIONAL BANK.  WE HAVE A REQUIREMENT TO PLACE JOBS IN A\n SPECIAL SETUP QUEUE UNTIL THEIR SETUP REQUIREMENTS ARE MET.\n OPERATIONS MUST THEN BE ABLE SETUP THE JOB BY REMOVING THE JOB FROM\n THE SETUP QUEUE.  THE $SR COMMAND WAS WRITTEN TO PROVIDE THIS\n FACILITY.\n\n\n1\n                       $SR COMMAND FORMAT\n\n\n         $SR\n             J=JXXXX-YYYY\n                OR\n             J=SXXXX-YYYY\n                OR\n             J=TXXXX-YYYY\n\n\n WHERE\n\n J=JXXXX-YYYY - JOB OR RANGE OF JOBS TO BE SETUP\n J=SXXXX-YYYY - TASK OR RANGE OF STARTED TASKS TO BE SETUP\n J=TXXXX-YYYY - TSO USER OR RANGE OF TSO USERS TO BE SETUP\n\n IF A NUMBER IS ENTERED WITHOUT A \"J\" OR \"S\" OR A \"T\", THE \"J\" IS\n ASSUMED.\n1\n SOME EXAMPLES OF THE COMMAND AND THE RESPONSES ARE AS FOLLOWS:\n\n\n         $SR  271\n         $HASP901 JOB  271 GENER1   HAS BEEN SETUP\n\n         $SR J271\n         $HASP901 JOB  271 GENER1   HAS BEEN SETUP\n\n         $SR J272\n         $HASP902 JOB  272 GENER2   NOT AWAITING SETUP\n\n         $SR  271,276\n         $HASP901 JOB  271 GENER1   HAS BEEN SETUP\n         $HASP901 JOB  276 GENER3   HAS BEEN SETUP\n\n         $SR J299\n         $HASP900 JOB(S) NOT FOUND\n\n         $SR J299,B\n         $HASP999 B       INVALID OPERAND\n\n./ ADD NAME=$UA\n1\n                        JES2 $UA COMMAND\n\n\n MODIFICATIONS HAVE BEEN MADE TO THE STANDARD IBM HOLD PROCESSING TO\n PLACE JOBS IN A SPECIAL HOLD QUEUE CALLED THE USER HOLD QUEUE.  THIS\n IS NORMALLY ACCOMPLISHED BY USING THE TYPRUN=HOLD OPERAND ON THE JOB\n CARD FOR THE JOB OR USING THE HOLD OPERAND ON THE /*THREAD CARD.\n THESE JOBS WILL NORMALLY BE RELEASED FROM USER HOLD BY /*RELEASE\n CARDS IN OTHER JOBS.  THE USER CAN ALSO RELEASE HIS/HER OWN JOBS BY\n ENTERING THIS COMMAND THROUGH A PROGRAMMED INTERFACE.  THE $UA\n COMMAND WAS WRITTEN TO PROVIDE THIS FACILITY.\n\n\n1\n                       $UA COMMAND FORMAT\n\n\n         $UA\n             J=JXXXX-YYYY\n                OR\n             J=SXXXX-YYYY\n                OR\n             J=TXXXX-YYYY\n\n\n WHERE\n\n J=JXXXX-YYYY - JOB OR RANGE OF JOBS TO BE RELEASED FROM USER HOLD\n J=SXXXX-YYYY - TASK OR RANGE OF STARTED TASKS TO BE RELEASED FROM\n                USER HOLD\n J=TXXXX-YYYY - TSO USER OR RANGE OF TSO USERS TO BE RELEASED FROM\n                USER HOLD\n\n IF A NUMBER IS ENTERED WITHOUT A \"J\" OR \"S\" OR A \"T\", THE \"J\" IS\n ASSUMED.\n1\n SOME EXAMPLES OF THE COMMAND AND THE RESPONSES ARE AS FOLLOWS:\n\n\n         $UA  271\n         $HASP903 JOB  271 GENER1   RELEASED FROM USER HOLD\n\n         $UA J271\n         $HASP903 JOB  271 GENER1   RELEASED FROM USER HOLD\n\n         $UA J272\n         $HASP904 JOB  272 GENER2   NOT ON USER HOLD\n\n         $UA  271,276\n         $HASP903 JOB  271 GENER1   RELEASED FROM USER HOLD\n         $HASP903 JOB  276 GENER3   RELEASED FROM USER HOLD\n\n         $UA J299\n         $HASP900 JOB(S) NOT FOUND\n\n         $UA J299,B\n         $HASP999 B       INVALID OPERAND\n\n./ ADD NAME=$UH\n1\n                        JES2 $UH COMMAND\n\n\n MODIFICATIONS HAVE BEEN MADE TO THE STANDARD IBM HOLD PROCESSING TO\n PLACE JOBS IN A SPECIAL HOLD QUEUE CALLED THE USER HOLD QUEUE.  THIS\n IS NORMALLY ACCOMPLISHED BY USING THE TYPRUN=HOLD OPERAND ON THE JOB\n CARD FOR THE JOB OR USING THE HOLD OPERAND ON THE /*THREAD CARD.\n A JOB CAN ALSO BE PLACED IN THIS QUEUE BY USING THIS COMMAND.\n\n\n1\n                       $UH COMMAND FORMAT\n\n\n         $UH\n             J=JXXXX-YYYY\n                OR\n             J=SXXXX-YYYY\n                OR\n             J=TXXXX-YYYY\n\n\n WHERE\n\n J=JXXXX-YYYY - JOB OR RANGE OF JOBS TO BE PLACED IN USER HOLD\n J=SXXXX-YYYY - TASK OR RANGE OF STARTED TASKS TO BE PLACED IN\n                USER HOLD\n J=TXXXX-YYYY - TSO USER OR RANGE OF TSO USERS TO BE PLACED IN\n                USER HOLD\n\n IF A NUMBER IS ENTERED WITHOUT A \"J\" OR \"S\" OR A \"T\", THE \"J\" IS\n ASSUMED.\n1\n SOME EXAMPLES OF THE COMMAND AND THE RESPONSES ARE AS FOLLOWS:\n\n\n         $UH  271\n         $HASP905 JOB  271 GENER1   PLACED ON USER HOLD\n\n         $UH J271\n         $HASP905 JOB  271 GENER1   PLACED ON USER HOLD\n\n         $UH J272\n         $HASP906 JOB  272 GENER2   ALREADY ON USER HOLD\n\n         $UH  271,276\n         $HASP905 JOB  271 GENER1   PLACED ON USER HOLD\n         $HASP905 JOB  276 GENER3   PLACED ON USER HOLD\n\n         $UH J299\n         $HASP900 JOB(S) NOT FOUND\n\n         $UH J299,B\n         $HASP999 B       INVALID OPERAND\n\n./ ADD NAME=$UL\n1\n                        JES2 $UL COMMAND\n\n\n MODIFICATIONS HAVE BEEN MADE TO THE STANDARD IBM HOLD PROCESSING TO\n PLACE JOBS IN A SPECIAL HOLD QUEUE CALLED THE USER HOLD QUEUE.  THIS\n IS NORMALLY ACCOMPLISHED BY USING THE TYPRUN=HOLD OPERAND ON THE JOB\n CARD FOR THE JOB OR USING THE HOLD OPERAND ON THE /*THREAD CARD.\n THERE IS ALSO A REQUIREMENT TO LIST JOBS IN THIS QUEUE.\n\n\n1\n                       $UL COMMAND FORMAT\n\n\n         $UH (NO OPERANDS)\n\n SOME EXAMPLES OF THE COMMAND AND THE RESPONSES ARE AS FOLLOWS:\n\n\n         $UL\n         JOB  271 $HASP908 GENER1   WAIT EXEC X PRIO X XXXX\n         JOB  276 $HASP908 GENER3   WAIT EXEC X PRIO X XXXX\n\n\n         $UL\n         $HASP900 JOB(S) NOT FOUND\n\n         $UL J299\n         $HASP999 J299    INVALID OPERAND\n\n./ ADD NAME=$LOAD\n1\n                        JES2 $LOAD COMMAND\n\n\n IN INSTALLATIONS WHICH HAVE EXTENSIVE JES2 EXIT ROUTINES, IT MAY BE\n HARD AT TIMES TO GET A JES2 HOT START TO RELOAD AN EXIT WHICH MUST\n BE MODIFIED.  HOT STARTS WORK, BUT THEY ARE VERY DISRUPTIVE TO\n PRINTER, RJE, AND NJE ACTIVITY.  THE $LOAD COMMAND WAS WRITTEN TO\n PROVIDE A FACILITY TO RELOAD A JES2 EXIT WITHOUT A JES2 OUTAGE.\n\n\n1\n                       $LOAD COMMAND FORMAT\n\n\n         $ULOAD, MODULENAME\n\n         WHERE MODULENAME IS THE NAME OF THE EXIT LOAD MODULE WHICH\n               IS TO BE RELOADED.\n\n SOME EXAMPLES OF THE COMMAND AND THE RESPONSES ARE AS FOLLOWS:\n\n\n\n         $LOAD,J001$SP\n         $HASP000 J001$SP  RELOADED\n\n         THE REQUESTED EXIT LOAD MODULE WAS RELOADED SUCCESSFULLY.\n\n\n         $LOAD,J001$SPX\n         $HASP000 J001$SP  IS NOT IN THE LMT\n\n         THE SPECIFIED LOAD MODULE NAME IS NOT IN THE LOAD MODULE\n         TABLE FOR JES2.\n\n\n\n         $LOAD,J001$SPY\n         $HASP000 J001$SY  LOAD ERROR\n\n         A FAILURE OCCURRED TRYING TO LOAD A NEW COPY OF THE LOAD\n         MODULE.  PROBABLY THE MODULE COULD NOT BE FOUND.\n\n\n\n         $LOAD,J005LOAD\n         $HASP000 J005LOAD INVALID\n\n         THIS COMMAND CANNOT RELOAD A COPY OF ITSELF.\n\n./ ADD NAME=$DC\n1\n                        JES2 $DC COMMAND\n\n\n THE $DC COMMAND IS ONE OF THE 4 CONSOLE COMMANDS WHICH CONTROL THE\n RESOURCE ROUTING FACILITY OF JES2.  THE OTHER COMMANDS ARE $QA, $QD,\n AND $DR.  A JOB CAN REQUEST ONE OR MORE RESOURCES FROM A PREDEFINED\n LIST OF RESOURCES AND WILL NOT RUN UNLESS THAT RESOURCE NAME IS\n ATTACHED TO THE APPROPRIATE PROCESSOR.  THIS COMMAND DISPLAYS ANY\n JOBS THAT CANNOT RUN BECAUSE THEY REQUEST ONE OR MORE RESOURCES THAT\n ARE NOT ATTACHED TO ANY PROCESSOR.  THIS COMMAND ALLOWS THE CONSOLE\n OPERATOR TO SEE THE CONFLICTS AND REACT APPROPRIATELY TO IT.  THIS\n COMMAND WILL ALSO BE INVOKED INTERNALLY WHENEVER A RESOURCE IS ADDED\n OR DELETED FROM A PROCESSOR.  THE FORMAT OF THE $DC COMMAND IS AS\n FOLLOWS:\n\n\n                       $DC COMMAND FORMAT\n\n\n         $DC        NO OPERANDS\n\n\n         EXAMPLES:\n\n         $DC\n         $HASP900 - NO CONFLICTS EXIST\n\n         $DC\n         $HASP908 JOB1     WAIT EXEC A PRIO 1 ANY  IMS\n         $HASP908 JOB2     WAIT EXEC C PRIO 1 ANY  CICS TAPE\n         $HASP900 - END OF CONFLICTS\n\n         $DC,ANY\n         $HASP972 NO OPERANDS ALLOWED ON THE $DC COMMAND\n./ ADD NAME=$DR\n1\n                        JES2 $DR COMMAND\n\n\n THE $DR COMMAND IS ONE OF THE 4 CONSOLE COMMANDS WHICH CONTROL THE\n RESOURCE ROUTING FACILITY OF JES2.  THE OTHER COMMANDS ARE $QA, $QD,\n AND $DC.  THIS DISPLAYS THE ESOTERIC RESOURCE NAMES THAT ARE ATTACHED\n TO A PROCESSOR.  A JOB THAT REQUESTS ONE OF A PREDEFINED LIST OF\n RESOURCES WILL NOT RUN UNLESS THAT RESOURCE NAME IS ATTACHED TO THE\n APPROPRIATE PROCESSOR.  THIS COMMAND ALLOWS THE CONSOLE OPERATOR TO\n SEE WHICH RESOURCES HAVE BEEN ATTACHED.  THIS COMMAND WILL ALSO BE\n INVOKED INTERNALLY WHENEVER A RESOURCE IS ADDED OR DELETED FROM A\n PROCESSOR.  THE FORMAT OF THE $DR COMMAND IS AS FOLLOWS:\n\n\n1\n                       $DR COMMAND FORMAT\n\n\n         $DR,\n             SID\n               OR\n             ALL\n WHERE\n\n SID          - ONE OF THE SYSTEM IDS THAT HAVE BEEN DEFINED IN THE\n                JES2 SYSTEM.  THE VALID VALUES CAN BE DISPLAYED WITH\n                THE $LSYS COMMAND.\n ALL          - INDICATED THAT INFORMATION IS TO BE DISPLAYED FOR\n                ALL SYSTEMS IN THE COMPLEX.\n\n THE DEFAULT SYSTEM ID IS THE SYSTEM ON WHICH THE COMMAND IS ENTERED.\n\n1\n         $DR\n         $HASP900 G290 = TEST     IMSTEST  CICSTEST TAPE\n\n         $DR,F290\n         $HASP900 F290 = PROD     IMS      CICS     TAPE\n\n         $DR,H290\n         $HASP900 H290 = NO RESOURCES ATTACHED\n\n         $DR,ALL\n         $HASP900 F290 = PROD     IMS      CICS     TAPE\n         $HASP900 G290 = TEST     IMSTEST  CICSTEST TAPE\n         $HASP900 H290 = NO RESOURCES ATTACHED\n\n         $DR,XXXX\n         $HASP974 XXXX     INVALID SYSTEM ID\n./ ADD NAME=$QA\n1\n                        JES2 $QA COMMAND\n\n\n THE $QA COMMAND IS ONE OF THE 4 CONSOLE COMMANDS WHICH CONTROL THE\n RESOURCE ROUTING FACILITY OF JES2.  THE OTHER COMMANDS ARE $DR, $QD,\n AND $DC.  JOBS THAT REQUEST RESOURCES WILL NOT RUN UNLESS THAT\n RESOURCE NAME IS ATTACHED TO THE APPROPRIATE PROCESSOR.  THIS COMMAND\n ALLOWS THE CONSOLE OPERATOR TO ATTACH A RESOURCE NAME TO A PROCESSOR\n TO ALLOW THE APPROPRIATE JOBS TO RUN ON THAT MACHINE.  THE $DR\n COMMAND WILL BE AUTOMATICALLY INVOKED AFTER PROCESSING COMPLETES FOR\n THIS COMMAND TO LIST THE RESOURCES THAT ARE NOW ATTACHED.  THE $DC\n COMMAND WILL ALSO BE AUTOMATICALLY INVOKED TO DISPLAY ANY JOBS WHICH\n STILL CANNOT EXECUTE BECAUSE THE APPROPRIATE RESOURCES ARE NOT\n AVAILABLE.  THE FORMAT OF THE $QA COMMAND IS AS FOLLOWS:\n\n\n1\n                       $QA COMMAND FORMAT\n\n\n         $QA,\n             RESOURCE\n                ,SID\n WHERE\n\n RESOURCE     - ONE OF THE PREDEFINED LIST OF RESOURCE NAMES THAT CAN\n                BE ATTACHED.  THE VALID RESOURCE NAMES WILL BE LISTED\n                LATER IN THIS DESCRIPTION.\n SID          - ONE OF THE SYSTEM IDS THAT HAVE BEEN DEFINED IN THE\n                JES2 SYSTEM.  THE VALID VALUES CAN BE DISPLAYED WITH\n                THE $LSYS COMMAND.\n\n THE DEFAULT SYSTEM ID IS THE SYSTEM ON WHICH THE COMMAND IS ENTERED.\n\n                       CURRENTLY VALID RESOURCE NAMES\n\n                 1)   NDM\n                 2)   TAPE\n                 3)   TESTAPE\n                 4)   TESTING\n                 5)   IMS\n                 6)   CICS\n                 7)   TSO\n                 8)   IMSTEST\n                 9)   CICSTEST\n                 10)  ROSCOE\n                 11)  ROSTEST\n\n1\n         $QA,IMSTEST\n         $HASP900 G290 = TEST     IMSTEST  CICSTEST TAPE\n         $HASP900 - NO CONFLICTS EXIST\n\n         $QA,IMS,F290\n         $HASP900 F290 = PROD     IMS      CICS     TAPE\n         $HASP900 - NO CONFLICTS EXIST\n\n         $QA,XXXX\n         $HASP900 XXXX     INVALID RESOURCE NAME\n\n         $QA\n         $HASP900 RESOURCE NAME MUST BE SPECIFIED\n\n         $QA,IMS,XXXX\n         $HASP900 XXXX     INVALID SYSTEM ID\n\n./ ADD NAME=$QD\n1\n                        JES2 $QD COMMAND\n\n\n THE $QD COMMAND IS ONE OF THE 4 CONSOLE COMMANDS WHICH CONTROL THE\n RESOURCE ROUTING FACILITY OF JES2.  THE OTHER COMMANDS ARE $QA, $DR,\n AND $DC.  JOBS WHICH SPECIFY RESOURCES WILL NOT RUN UNLESS THAT\n RESOURCE NAME IS ATTACHED TO THE APPROPRIATE PROCESSOR.  THIS COMMAND\n ALLOWS THE CONSOLE OPERATOR TO DETACH A RESOURCE NAME FROM A\n PROCESSOR IF THAT RESOURCE IS NO LONGER AVAILABLE IN ORDER TO PREVENT\n JOBS WHICH REQUIRE THAT RESOURCE FROM EXECUTING.  THE $DR COMMAND\n WILL BE AUTOMATICALLY INVOKED AFTER PROCESSING COMPLETES FOR THIS\n COMMAND TO LIST THE RESOURCES THAT ARE STILL ATTACHED.  THE $DC\n COMMAND WILL ALSO BE AUTOMATICALLY INVOKED TO DISPLAY ANY JOBS WHICH\n NOW CANNOT EXECUTE BECAUSE THE APPROPRIATE RESOURCES ARE NOT\n AVAILABLE.  THE FORMAT OF THE $QD COMMAND IS AS FOLLOWS:\n\n1\n                       $QD COMMAND FORMAT\n\n\n         $QD,\n             RESOURCE\n                ,SID\n WHERE\n\n RESOURCE     - ONE OF THE PREDEFINED LIST OF RESOURCE NAMES THAT IS\n                TO BE REMOVED.  THE VALID RESOURCE NAMES WILL BE\n                LISTED LATER IN THIS DESCRIPTION.\n SID          - ONE OF THE SYSTEM IDS THAT HAVE BEEN DEFINED IN THE\n                JES2 SYSTEM.  THE VALID VALUES CAN BE DISPLAYED WITH\n                THE $LSYS COMMAND.\n\n THE DEFAULT SYSTEM ID IS THE SYSTEM ON WHICH THE COMMAND IS ENTERED.\n\n                       CURRENTLY VALID RESOURCE NAMES\n\n                 1)   NDM\n                 2)   TAPE\n                 3)   TESTAPE\n                 4)   TESTING\n                 5)   IMS\n                 6)   CICS\n                 7)   TSO\n                 8)   IMSTEST\n                 9)   CICSTEST\n                 10)  ROSCOE\n                 11)  ROSTEST\n\n1                       EXAMPLES\n\n         $QD,IMSTEST\n         $HASP900 G290 = TEST     CICSTEST TAPE\n         $HASP900 - NO CONFLICTS EXIST\n\n         $QD,IMS,F290\n         $HASP900 F290 = PROD     CICS     TAPE\n         $HASP900 - NO CONFLICTS EXIST\n\n         $QD,XXXX\n         $HASP900 XXXX     INVALID RESOURCE NAME\n\n         $QD\n         $HASP900 RESOURCE NAME MUST BE SPECIFIED\n\n         $QD,IMS,XXXX\n         $HASP900 XXXX     INVALID SYSTEM ID\n\n./ ADD NAME=AUTHSVC\n1                         A U T H S V C\n\n         THIS SVC IS A TYPE 4 SVC WRITTEN TO ALLOW THE CALLER TO\n         ENTER KEY 0.  THIS SVC IS A LITTLE DIFFERENT FROM MOST\n         OTHER SVC CODE IN THAT IT WRITES AN SMF RECORD FOR EACH\n         CALL TO PERFORM A FUNCTION.  THE CALLING PROGRAM NAME IS\n         ASSUMED TO BE POINTED TO BY REGISTER 0 ON INPUT AND ALL\n         OTHER INFORMATION SUCH AS JOBNAME/TSONAME, PROGRAMMER\n         NAME, AND ACCOUNTING INFORMATION IS EXTRACTED TO PROVIDE\n         AN AUDIT CAPABILITY FOR UNAUTHORIZED USE.  THE FUNCTION\n         TO BE PERFORMED IS IN REGISTER 1 ON INPUT.  A ZERO INDICATES\n         THAT PROTECT KEY ZERO IS DESIRED.  ANY OTHER VALUE WILL\n         RESET THE USER BACK TO THE PROTECT KEY IN THE TCB.\n\n./ ADD NAME=RESROUT\n1                   R E S O U R C E   R O U T I N G\n\n         A SERIES OF EXITS AND CONTROL BLOCK MODIFICATIONS PROVIDES\n         A FACILITY WITHIN JES2 TO ROUTE JOBS TO A RESOURCE NAME\n         RATHER THAN A SPECIFIC PROCESSOR.  THIS FACILITY IS A\n         FUNCTIONAL COPY OF A SIMILAR FACILITY WHICH WAS DEVELOPED\n         AND SUPPORTED BY MELLON BANK AND PROVIDED ON MANY OF THE\n         MVS MODS TAPES.\n\n         IN A JES2 SHARED SPOOL ENVIRONMENT, THERE ARE OFTEN\n         FACILITIES THAT ARE AVAILABLE ON ONE PROCESSOR THAT ARE NOT\n         AVAILABLE ON ALL PROCESSORS.  THE ONLY FACILITY THAT IS\n         PROVIDED BY JES2 FOR SPECIFIC ROUTING IS TO USE THE /*JOBPARM\n         SYSTEM AFFINITY STATEMENT TO ROUTE THE JOB TO THE SPECIFIC\n         PROCESSOR.  IF THE FACILITY IS MOVED TO ANOTHER PROCESSOR ALL\n         JOBS WHICH USE THAT FACILITY MUST BE ALTERED.  THERE IS ALSO\n         NO WAY TO AUTOMATICALLY HOLD ALL JOBS WHICH NEED THAT\n         RESOURCE IF IT BECOMES UNAVAILABLE FOR A PERIOD OF TIME.\n\n         A FACILITY WAS DEVELOPED BY WHICH A JOB COULD BE ROUTED\n         TO A USER SPECIFIED RESOURCE NAME INSTEAD OF THE SMF SYSTEM\n         ID.  THE CONSOLE OPERATOR COULD ATTACH THAT RESOURCE NAME\n         TO A SPECIFIC PROCESSOR OR, IF APPLICABLE, TO ALL PROCESSORS,\n         WHICH WOULD ALLOW THESE JOBS TO RUN.  THIS ALLOWS RESOURCES\n         TO BE MOVED OR TEMPORARILY HALTED BY THE OPERATOR WITHOUT\n         REQUIRING JCL CHANGES.  THE BEST WAY TO TO DESCRIBE THIS IS\n         GIVE AN EXAMPLE.\n\n         A JOB HAS THE FOLLOWING JCL\n\n         //JOB1   JOB ......\n         /*JOBPARM S=G290\n         /*ROUTE  XEQ TEST\n         //STEP1  EXEC PGM=....\n\n         THIS JOB WILL ONLY EXECUTE ON A PROCESSOR WHICH HAS THE\n         \"TEST\" RESOURCE ATTACHED.\n\n\n         THE $DC COMMAND CAN BE ISSUED TO SHOW ANY JOBS WHICH CANNOT\n         EXECUTE BECAUSE THEY REQUIRE A RESOURCE THAT IS NOT AVAILABLE\n         ON ANY PROCESSOR.\n\n         $DC\n         .\n         $HASP908 JOB1     WAIT EXEC A PRIO 1 G290 TEST\n         $HASP900 END OF CONFLICTS\n\n\n         THE $QA COMMAND WILL ADD A RESOURCE NAME TO AN APPROPRIATE\n         PROCESSOR AND THEN DISPLAY ALL OF THE RESOURCES ATTACHED TO\n         THAT PROCESSOR.\n\n         $QA,TEST,G290\n         .\n         $HASP900 G290 = TEST\n\n\n1        THE $DC COMMAND WILL NOW SHOW NO CONFLICTS SINCE THE RESOURCE\n         NAME IS NOW ATTACHED.\n\n         $DC\n         .\n         $HASP900 NO CONFLICTS EXIST\n\n\n         A JOB CAN BE ROUTED TO MULTIPLE RESOURCE NAMES AND WILL NOT\n         EXECUTE UNLESS ALL RESOURCE NAMES ARE ATTACHED.  THIS FACILITY\n         WILL BE EXPANDED IN THE FUTURE BY AUTOMATICALLY ADDING CERTAIN\n         RESOURCE NAMES AUTOMATICALLY IN JES2 EXITS BASED UPON THE JCL.\n         RESOURCE NAMES SUCH AS \"TEST\", \"PROD\", \"TAPE\", \"IMS\", \"CICS\",\n         \"IMSTEST\", OR \"CICSTEST\" COULD AUTOMATICALLY BE ATTACHED TO A\n         JOB AT READER TIME.  THIS WOULD REALLY MAKE THIS A POWERFUL\n         FACILITY.\n\n         THIS RESOURCE ROUTINE FACILITY IS CONTROLLED CURRENTLY BY\n         /*ROUTE AND /*XEQ CONTROL CARDS WHICH ATTACH RESOURCES TO A\n         PARTICULAR JOB AND THE FOLLOWING COMMANDS WHICH CONTROL THE\n         RESOURCES ATTACHED TO A PROCESSOR:\n\n         $QA - ADDS RESOURCES TO A PROCESSOR\n\n         $QD - DELETES A RESOURCE FROM A PROCESSOR\n\n         $DR - DISPLAYS RESOURCES THAT ARE ATTACHED TO A PROCESSOR\n\n         $DC - DISPLAYS RESOURCE CONFLICTS.  THAT IS JOBS THAT\n               CANNOT EXECUTE BECAUSE THE REQUIRED RESOURCES ARE\n               NOT ATTACHED TO ANY PROCESSOR.\n\n         THE DETAILED DESCRIPTION OF THE COMMANDS AND THE APPROPRIATE\n         OPERANDS WILL FOLLOW.  THE RESOURCE NAMES THAT CAN BE USED\n         ARE USER DEFINED IN THE $RESTABL MACRO AND ANY THAT ARE USED\n         ARE FOR EXAMPLES ONLY.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AUTHSVC": {"ttr": 1544, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "IGC0024H TITLE 'SVC 248 - SET KEY ZERO SVC'\n***********************************************************************\n*                                                                     *\n*        OPERATING SYSTEM - MVS                                       *\n*                                                                     *\n*        SVC TYPE         - TYPE 3 OR 4                               *\n*                                                                     *\n*        SIZE             - 200 BYTES                                 *\n*                                                                     *\n*        LINK EDIT ATTRIB - RENT, REUS, REFR                          *\n*                                                                     *\n*        IBM MACROS USED:                                             *\n*              CVT          SYS1.AMODGEN                              *\n*              FREEMAIN     SYS1.MACLIB                               *\n*              GETMAIN      SYS1.MACLIB                               *\n*              IEESMCA      SYS1.AMODGEN                              *\n*              IEFAJCTB     SYS1.AMODGEN                              *\n*              IEZJSCB      SYS1.AMODGEN                              *\n*              IKJTCB       SYS1.AMODGEN                              *\n*              IHARB        SYS1.AMODGEN                              *\n*              SMFEWTM      SYS1.MACLIB                               *\n*              TIME         SYS1.MACLIB                               *\n*                                                                     *\n*        USER MACROS USED:  NONE                                      *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST COMPUTER SERVICES                      *\n*                        420 BRUSHY MOUNTAIN ROAD                     *\n*                        WILKESBORO, N.C. 28697                       *\n*                        (919) 651-5414                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS SVC CAN BE CALLED TO SET AN UNATHORIZED PROGRAM         *\n*        INTO PROTECT KEY ZERO OR TO RESET THE PROGRAM BACK TO        *\n*        THE ORIGINAL PROTECT KEY.  UPON ENTRY REGISTER 0 WILL        *\n*        POINT TO AN EIGHT (8) BYTE ENTRY GIVING THE PROGRAM          *\n*        NAME OF THE CALLER.  THE SVC WILL WRITE A USER SMF           *\n*        RECORD TELLING THE DATE, TIME, CPU, JOBNAME, PROGRAM         *\n*        NAME, ETC. OF THE THE REQUEST.                               *\n*        1)  REGISTER 1 = ZERO    - SET THE CALLER INTO KEY           *\n*            ZERO.                                                    *\n*        2)  REGISTER 1 = NONZERO - RESET THE PROTECT KEY AND         *\n*            PROBLEM STATE TO THE VALUE IN THE TCB.                   *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*                 R E G I S T E R     E Q U A T E S                   *\n*                                                                     *\n***********************************************************************\nR0       EQU   0              ON SVC ENTRY - PARAMETER ADDRESS\nR1       EQU   1              ON SVC ENTRY - PARAMETER ADDRESS\nR2       EQU   2              USED FOR ADDR OF DCB\nR3       EQU   3              ON SVC ENTRY - CVT ADDRESS\nR4       EQU   4              ON SVC ENTRY - TCB ADDRESS\nR5       EQU   5              ON SVC ENTRY - SVRB ADDRESS\nR6       EQU   6              ON SVC ENTRY - ENTRY POINT ADDRESS\nR7       EQU   7              ON SVC ENTRY - ASCB ADDRESS\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13             ON SVC ENTRY - SAME AS BEFORE SVC CALL\nR14      EQU   14             ON SVC ENTRY - RETURN ADDRESS\nR15      EQU   15\n         EJECT\n***********************************************************************\n*                                                                     *\n*        START OF PROGRAM                                             *\n*                                                                     *\n***********************************************************************\nIGC0024H CSECT\n         USING IGC0024H,R6    SET ADDRESSABILITY FOR SVC\n         USING CVT,R3         SET ADDRESSABILITY TO CVT\n         USING TCB,R4         SET ADDRESSABILITY TO TCB\n         USING RBBASIC,R5     SET ADDRESSABILITY TO SVRB\n         LR    R10,R0         SAVE REG 0\n         LR    R11,R1         SAVE REG 1\n         GETMAIN R,LV=DSALEN  GET STORAGE FOR WORKAREA\n         LR    R12,R1         SAVE GETMAIN ADDRESS\n         USING DSA,R12        SET ADDRESSABILITY TO SAVE AREA\n***********************************************************************\n*                                                                     *\n*        GET THE FOLLOWING FIELDS OUT OF THE MVS CONTROL BLOCKS:      *\n*                                                                     *\n*        1)  JOBNAME                                                  *\n*        2)  PROGRAMMER NAME                                          *\n*        3)  FIRST 20 CHARACTERS OF THE JOB ACCOUNTING FIELD          *\n*        4)  SMF CPUID                                                *\n*                                                                     *\n***********************************************************************\n         MVC   JOBNAME,BLANKS BLANK JOBNAME\n         MVC   PGMRNAME,BLANKS BLANK PROGRAMMER NAME\n         MVC   ACCT,BLANKS    BLANK ACCOUNTING FIELD\n         MVC   CPUID,BLANKS   BLANK THE CPUID\n*\n***********************************************************************\n*        SAVE THE CPUID FROM THE SMCA                                 *\n***********************************************************************\n         L     R8,CVTSMCA     LOAD SMCA ADDRESS\n         USING SMCABASE,R8    SET ADDRESSABILITY TO SMCA\n         MVC   CPUID,SMCASID  MOVE CPUID TO SAVE\n         DROP  R8             DROP ADDRESSABILITY TO SMCA\n         L     R8,TCBJSCB     LOAD JSCB ADDRESS\n         USING IEZJSCB,R8     SET ADDRESSABILITY TO JSCB\n         L     R8,JSCBACT     LOAD ADDRESS OF ACTIVE JSCB\n         L     R8,JSCBJCT     LOAD ADDRESS OF JCT PREFIX\n         DROP  R8             DROP ADDRESSABILITY TO JSCB\n         LA    R8,16(R8)      INCREMENT PAST JCT PREFIX\n         USING INJMJCT,R8     SET ADDRESSABILITY TO JCT\n***********************************************************************\n*        SAVE THE JOBNAME FROM THE O/S JCT                            *\n***********************************************************************\n         MVC   JOBNAME,JCTJNAME SAVE JOBNAME\n         ICM   R8,7,JCTACTAD  LOAD ADDRESS OF ACT PREFIX\n         LA    R8,16(R8)      INCREMENT PAST ACT PREFIX\n         DROP  R8             DROP ADDRESSABILITY TO JCT\n         USING IEFAACTB,R8    SET ADDRESSABILITY TO ACT\n***********************************************************************\n*        SAVE THE PROGRAMMER NAME FROM THE ACT                        *\n***********************************************************************\n         MVC   PGMRNAME,ACTPRGNM SAVE PROGRAMMER NAME\n         SLR   R3,R3          CLEAR REG FOR ICM\n         ICM   R3,1,ACTJNFLD  LOAD NUMBER OF ACCOUNTING FIELDS\n         BZ    NOACCT         ZERO, NONE, EXIT\n         ICM   R3,1,ACTACCNT  LOAD LENGTH OF FIRST ACCOUNTING FIELD\n         BZ    NOACCT         ZERO, NONE, EXIT\n         CH    R3,H#20        SEE IF LENGTH AT 20 CHARACTERS\n         BL    MOVEIT         NO, BRANCH\n         LA    R3,20          SET LENGTH TO 20\n***********************************************************************\n*        SAVE THE FIRST 20 BYTES OF THE ACCOUNTING FIELD IN THE ACT   *\n***********************************************************************\nMOVEIT   BCTR  R3,0           MAKE MACHINE LENGTH\n         EX    R3,MOVEACT     MOVE ACCOUNTING INFORMATION TO SAVE\n         B     NOACCT         BYPASS EXECUTED INSTRUCTION\nMOVEACT  MVC   ACCT(0),ACTACCNT+1 SAVE FIRST 20 CHARACTERS OF ACCT\n         DROP  R8             DROP ADDRESSABILITY TO ACT\n***********************************************************************\n*        SAVE THE PROGRAM NAME AS POINTED TO BY REGISTER 0 UPON       *\n*        ENTRY TO THE SVC.                                            *\n***********************************************************************\nNOACCT   MVC   PROGNAME,0(R10) SAVE PGMNAME FROM POINTER IN REG 0\n         EJECT\n***********************************************************************\n*        BUILD AND WRITE THE USER SMF RECORD OF THE ACTIVITY          *\n***********************************************************************\n         LA    R1,LEN         LOAD LENGTH OF SMF RECORD\n         STH   R1,SMFRDW      AND SAVE IT IN THE SMF RECORD\n         XC    SMFILL,SMFILL  CLEAR FILLER AREA\n         LA    R1,SMFTYPE     LOAD SMF RECORD NUMBER\n         STH   R1,SMFRTYP     AND SAVE IT IN THE SMF RECORD\n         TIME  BIN            GET TIME OF DAY\n         STCM  R0,15,SMFT     SAVE BINARY TIME\n         STCM  R1,15,SMFD     SAVE BINARY DATE\n         MVC   SMFCPUID,CPUID   MOVE CPUID TO SMF RECORD\n         MVC   SMFJOB,JOBNAME   MOVE JOBNAME TO SMF RECORD\n         MVC   SMFACCT,ACCT     MOVE ACCT TO SMF RECORD\n         MVC   SMFPGMR,PGMRNAME MOVE PROGRAMMER NAME TO SMF RECORD\n         MVC   SMFPGMN,PROGNAME MOVE PROGRAM NAME TO SMF RECORD\n         MVI   SMFOPTN,SMFKEY0 ASSUME SETTING TO KEY 0\n         LTR   R11,R11        TEST REG 1 AS UPON ENTRY\n         BZ    WRITEIT        IT WAS ZERO, BRANCH\n         MVI   SMFOPTN,SMFKEYN0 REQUEST TO KEY NOT ZERO\nWRITEIT  LA      R9,SMFRECD   LOAD ADDRESS OF SMF RECORD\n         SMFEWTM (R9)         WRITE RECORD TO SMF\n         EJECT\n***********************************************************************\n*        SET PROTECT KEY AS REQUESTED BY REG 1 ON ENTRY               *\n***********************************************************************\nSETKEY   L     R5,RBLINK      LOAD PREVIOUS RB ADDRESS FROM SVRB\n         LTR   R11,R11        TEST PASSED VALUE IN REG 1\n         BNZ   NZERO          NOT ZERO, TURN OFF PROTECT KEY ZERO\nZERO     NI    RBOPSWB2,X'0F' MAKE PROTECTION KEY ZERO\n         B     RETURN         GET OUT\nNZERO    MVZ   RBOPSWB2(1),TCBPKF RESET TO PROTECT KEY FROM TCB\n         OI    RBOPSWB2,X'01' MAKE PROBLEM STATE\n         SPACE 3\n***********************************************************************\n*        RETURN TO CALLER                                             *\n***********************************************************************\nRETURN   FREEMAIN R,LV=DSALEN,A=(12) FREE WORK AREA\n         SLR   R15,R15        SET RETURN CODE TO 0\nSVC3     SVC   3              RETURN\n         EJECT\n***********************************************************************\n*        PROGRAM CONSTANTS                                            *\n***********************************************************************\nBLANKS   DC    CL20' '        CHARACTER STRING OF BLANKS\nH#20     DC    H'20'          HALFWORD CONSTANT '20'\n         EJECT\n         CVT   DSECT=YES\n         EJECT\n         IKJTCB LIST=YES\n         EJECT\n         IHARB\n         EJECT\n         IEESMCA\n         EJECT\n         IEZJSCB\n         EJECT\nJCT      DSECT\n         IEFAJCTB\n         EJECT\n***********************************************************************\n*        PROGRAM DYNAMIC SAVE AREA                                    *\n***********************************************************************\nDSA      DSECT\nJOBNAME  DS    CL8            JOBNAME FROM THE O/S JCT\nPGMRNAME DS    CL20           PROGRAMMER NAME FROM THE ACT\nACCT     DS    CL20           FIRST ACCOUNTING FIELD FROM THE ACT\nPROGNAME DS    CL8            CALLING PROGRAM NAME FROM PTR IN REG 0\nCPUID    DS    CL4            SMF CPUID FROM THE SMCA\n*\nSMFRECD  DS    0F             USER SMF RECORD\nSMFRDW   DS    AL2(LEN)       LENGTH OF RECORD\nSMFILL   DS    H              FILLER (ZEROS)\nSMFRTYP  DS    AL2(SMFTYPE)   SMF RECORD TYPE\nSMFTYPE  EQU   244\nSMFT     DS    XL4            TIME\nSMFD     DS    XL4            DATE\nSMFCPUID DS    CL4            SMF CPUID\nSMFJOB   DS    CL8            JOBNAME\nSMFACCT  DS    CL20           JOB ACCOUNTING FIELD\nSMFPGMR  DS    CL20           PROGRAMMER NAME\nSMFPGMN  DS    CL8            PROGRAM NAME\nSMFOPTN  DS    X              ENTRY OPTION (ZERO/NOT ZERO)\nSMFKEY0  EQU   X'00'\nSMFKEYN0 EQU   X'80'\nLEN      EQU   *-SMFRDW\nDSALEN   EQU   *-DSA\n         END   IGC0024H\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CONSOLE": {"ttr": 1793, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'CONSOLE -- TSO ALTERNATE CONSOLE COMMAND'\n***********************************************************************\n*                                                                     *\n*                         C O N S O L E                               *\n*                                                                     *\n*                       OPERATOR CONSOLE MONITOR                      *\n*                                                                     *\n*     THIS PROGRAM DISPLAYS ALL ACTIVE OPERATORS CONSOLES ON          *\n*     A 3270 TSO TERMINAL. SINCE THIS BUFFER CAN BE 35 LINES LONG,    *\n*     IT MUST BE DISPLAYED IN TWO 'PAGES'. VARIOUS CONTROL            *\n*     COMMANDS ARE AVAILABLE AND ARE DESCRIBED BELOW.                 *\n*                                                                     *\n*     COMMAND      DESCRIPTION                                        *\n*                                                                     *\n*        ?         DISPLAYS HELP FOR CONSOLE                          *\n*        END       END; END THE PROGRAM                               *\n*        FREEZE    FREEZE DISPLAY ON THE CURRENT PAGE                 *\n*        RELEASE   RELEASE DISPLAY; SHOW ALTERNATING PAGES            *\n*        WAITXX    AUTOMATICALLY REFRESH THE SCREEN                   *\n*                  XX TIMES, THEN RETURN TO NORMAL MODE.              *\n*                  IF XX IS NOT ENTERED, 30 ITERATIONS ARE ASSUMED.   *\n*                  IF XX = 0, THE COMMAND WILL REFRESH THE SCREEN     *\n*                  UNTIL THE TSO USER PRESSES THE ATTENTION KEY       *\n*                  TO EXIT FROM THE DISPLAY.  NOTE THAT THE ATTN      *\n*                  KEY IS NOT THE PA1 KEY ON AN IBM 3278 TERMINAL.    *\n*        DELAYXX   SET DELAY TIME BETWEEN REFRESHES TO XX TENTHS      *\n*                  OF A SECOND.                                       *\n*        RECALL    RECALL LAST ENTERED COMMAND FOR UPDATE             *\n*        CONSOLE=N RESET DISPLAY TO SPECIFIED CONSOLE NUMBER          *\n*        Z         HALT: END THE PROGRAM                              *\n*                                                                     *\n*     HITTING THE ATTENTION KEY WHILE IN TIMER MODE WILL CAUSE        *\n*     THE TIMER TO BE RESET TO ZERO AND WAIT MODE TERMINATED.         *\n*                                                                     *\n*     ONLY TSO USERS WITH OPERATOR AUTHORITY MAY USE THIS PROGRAM.    *\n*     AN AUTHORIZATION SUPERVISOR CALL IS REQUIRED AND THE SVC 34     *\n*     INTERFACE IS USED TO ISSUE COMMANDS FROM TSO. TO UTILIZE THIS   *\n*     FACILITY REQUIRES PROTECT KEY ZERO AND THEREFORE MUST BE        *\n*     APF AUTHORIZED.  ALSO THE CONSOLE BUFFERS ARE NOW IN FETCH      *\n*     PROTECTED STORAGE AND CONSOLE MUST GO INTO PROTECT KEY ZERO TO  *\n*     ACCESS THEIR CONTENTS.                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 4\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\nCONSOLE  CSECT\n         USING CONSOLE,R15         SET TEMPORARY PGM ADDRESSABILITY\n         B     SAVE+18*4           BRANCH AROUND SAVE AREAS\n         DC    CL9'CONSOLE'        IDENTIFIER\n         DC    CL9'&SYSDATE'       ASSEMBLY DATE\n         DC    CL6'&SYSTIME'       ASSEMBLY TIME\nSAVE     DC    18F'0'              SAVE AREA\n         DROP  R15                 DROP TEMPORARY ADDRESSABILITY\n         STM   R14,R12,12(R13)     SAVE REGISTERS\n         LR    R12,R15             R12 = ADDR OF ENTRY POINT\n         USING CONSOLE,R12,R11,R10 ADDRESABILITY TO CSECT\n         LA    R11,SAVE            R11 = ADDR OF OUR SAVE AREA\n         ST    R13,SAVE+4          SAVE POINTER TO CALLERS SAVE AREA\n         ST    R11,8(R13)          SAVE PTR TO OUR SAVE IN CALLER'S\n         LR    R13,R11             R13 = ADDR OF OUR SAVE AREA\n         LA    R11,4095(R12)       R11 WILL BE\n         LA    R11,1(R11)          SECOND BASE REGISTER\n         LA    R10,4095(R11)       R10 WILL BE\n         LA    R10,1(R10)          THIRD BASE REGISTER\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*                       PROGRAM INITIALIZATION                        *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*                       AUTHORIZE OURSELVES                           *\n*                                                                     *\n***********************************************************************\n         LA    R0,PROGNAME         LOAD ADDRESS OF PROGRAM NAME\n         SLR   R1,R1               REQUEST PROTECT KEY ZERO\n         SVC   248                 GET AUTHORIZATION\n         L     R2,PSATOLD          GET TCB\n         USING TCB,R2              SET ADDRESSABILITY TO TCB\n         L     R2,TCBJSCB          GET POINTER TO JSCB\n         DROP  R2                  DROP ADDRESSABILITY TO TCB\n         USING IEZJSCB,R2          SET ADDRESSABILITY TO JSCB\n         OI    JSCBOPTS,JSCBAUTH   TURN ON AUTHORIZATION BIT\n         DROP  R2                  DROP ADDRESSABILITY TO JSCB\n         LA    R0,PROGNAME         LOAD ADDRESS OF PROGRAM NAME\n         LA    R1,8                REQUEST PROTECT KEY RETURN\n         SVC   248                 GET AUTHORIZATION\n***********************************************************************\n*                                                                     *\n*  CHECK THE PSCB TO SEE IF THE USER HAS OPERATOR AUTHORITY. IF       *\n*  NOT THEN WE SIMPLY RETURN TO THE TMP WITH NO PROCESSING.           *\n*  THIS IS THE FIRST LEVEL OF AUTHORIZATION.                          *\n*                                                                     *\n***********************************************************************\n         EXTRACT PSCBADDR,'S',FIELDS=(PSB) GET PSCB ADDRESS\n         L     R3,PSCBADDR         GET PSCB ADDR\n         USING PSCB,R3             ADDRESSABILITY TO PSCB\n         TM    PSCBATR1,PSCBCTRL   OPERATOR AUTHORITY ?\n         BNO   EXIT                NO, DON'T ISSUE COMMAND\n         MVI   VIPFLG,X'FF'        YES, SUPER USER\n***********************************************************************\n*                                                                     *\n*        MATCH THE JOB/TSO NAME IN THE PSCB WITH NAMES IN THE TABLE.  *\n*        IF NO MATCH, JUST RETURN AS IF NOTHING HAPPENED.             *\n*                                                                     *\n*                         **** NOTE ****                              *\n*                                                                     *\n*              THIS CHECK IS CURRENTLY BEING BYPASSED                 *\n*                                                                     *\n***********************************************************************\n         B     CONSOLE1            ***** BYPASS LOGONID CHECK *****\n         LA    R8,AUTHNAME         LOAD ADDR OF AUTHORIZED NAMES TABLE\nAUTHLOOP CLI   0(R8),X'FF'         END OF AUTHNAME TABLE?\n         BE    EXIT                YES, GET OUT\n         CLC   PSCBUSER,0(R8)      SEE IF JOB/TSO NAME IN TABLE\n         BE    CONSOLE1            YES, GO DO IT\n         LA    R8,8(,R8)           INCREMENT TO NEXT TABLE ENTRY\n         B     AUTHLOOP            LOOP UNTIL DONE\nCONSOLE1 DS    0H\n         STFSMODE ON,INITIAL=YES   TURN ON VTAM FULL SCREEN MODE\n***********************************************************************\n*                                                                     *\n*        TEST THE SIZE OF THE TERMINAL FROM WHICH THE COMMAND WAS     *\n*        ISSUED.  THIS INFORMATION WILL BE SAVED TO RESET THE         *\n*        TERMINAL ATTRIBUTES UPON EXIT.  THIS CODE ASSUMES THAT       *\n*        THE TERMINAL IS A 3278-4 OR A 3278-5 TERMINAL WITH TWO       *\n*        MODES OF OPERATION.  IF THE TERMINAL IS A CRT, ONE OF        *\n*        THE AVAILABLE MODES OF OPERATION MUST BE 24 X 80.            *\n*                                                                     *\n***********************************************************************\n         GTSIZE\n         ST    R0,LPSCREEN         R0 = LINES PER SCREEN\n         ST    R1,CPLINE           R1 = CHARACTERS PER LINE\n         LTR   R0,R0               R0 = NUMBER OF LINES PER SCREEN\n         BZ    NOTCRT              ZERO MEANS HARDCOPY\n         GTTERM PRMSZE=PRMSIZE,ALTSZE=ALTSIZE\n         CLC   PRMSIZE,STDSIZE     SEE IF 24 X 80 ALLOWED\n         BE    SETSIZE             YES, GO SET SIZE\n         CLC   ALTSIZE,STDSIZE     SEE IF 24 X 80 ALLOWED\n         BE    SETSIZE             YES, GO SET SIZE\n         TPUT  ERRMSG8,26          WRITE ERROR MSG\n         ABEND 001,DUMP            NEITHER SIZE IS 24 X 80\nSETSIZE  STSIZE LINE=24,SIZE=80    SET STD SIZE\n         B     GETPWD              GO GET PASSWORD\nNOTCRT   STSIZE SIZE=80            HARDCOPY - SET LSIZE=80\n         MVI   CRTFLAG,X'00'       WE ARE USING A HARDCOPY\n         MVC   CMDCTRL(6),BLANKS   ZAP OUT 3277 CNTRL CHARS\n         MVC   PHEADING(6),BLANKS  ZAP OUT 3277 CNTRL CHARS\n         MVC   HELP(14),BLANKS     ZAP OUT 3277 CNTRL CHARS\n         EJECT\n***********************************************************************\n*                                                                     *\n*  PROMPT THE USER FOR AN ADMISSION PASSWORD. THIS IS THE SECOND      *\n*  LEVEL OF AUTHORIZATION REQUIRED.                                   *\n*                                                                     *\n*                         **** NOTE ****                              *\n*                                                                     *\n*              THIS CHECK IS CURRENTLY BEING BYPASSED                 *\n*                                                                     *\n***********************************************************************\nGETPWD   DS    0H\n         B     PSWDOK              BYPASS PASSWORD ROUTINE\n         LA    R2,PWREPLY          LOAD ADDRESS OF REPLY AREA\n         TPUT  CLEAR,CLEARGTH,FULLSCR  CLEAR SCREEN\n         TPUT  ENTER,ENTERLN,FULLSCR   PROMPT FOR PASSWORD\n         TCLEARQ INPUT             CLEAR INPUT BUFFER\n         TGET  (2),8               GET THE OPERATOR'S REPLY\n         TPUT  CLEAR,CLEARGTH,FULLSCR  CLEAR SCREEN\n         B     COMPSWD             GO COMPARE PASSWORD\nENTER    DC    X'C11140401DE8'     WCC, SBA, SF\n         DC    C'ENTER PASSWORD:'  PROMPT MESSAGE\n         DC    X'1D4D13'           SF, NON-DISP, IC\nENTERLN  EQU   *-ENTER             LENGTH OF 3270 MESSAGE\nCOMPSWD  DS    0H\n         MVC   PWDWRK,PWDENTER     MOVE LOWER CASE PASSWORD TO WORK\n         OC    PWDWRK,BLANKS       MAKE UPPER CASE\n         OC    PWREPLY,BLANKS      MAKE UPPER CASE\n         CLC   PWREPLY,PWDWRK      SEE IF PASSWORD MATCHES\n         BNE   EXIT                NO, EXIT\n***********************************************************************\n*                                                                     *\n*  GETMAIN SAVE AREA FOR CONSOLE BUFFERS                              *\n*                                                                     *\n***********************************************************************\nPSWDOK   GETMAIN R,LV=4096,SP=0    GET 4K BUFFER SAVE AREA\n         ST    R1,GETADDR          SAVE GETMAIN ADDRESS\n***********************************************************************\n*                                                                     *\n*  SETUP STAX FOR ATTENTION INTERRUPTIONS                             *\n*                                                                     *\n***********************************************************************\n         LA    R3,STAXLIST         R3 = ADDRESS OF STAX LIST MACRO\n         STAX  ATTNEXIT,USADDR=ATTNFLG,MF=(E,(3)) ATTN EXIT TRAP\n***********************************************************************\n*                                                                     *\n*  SETUP CROSS MEMORY                                                 *\n*                                                                     *\n***********************************************************************\n         MODESET MODE=SUP,KEY=ZERO AUTHORIZE OURSELVES\n         ESAR  R9                  GET SECONDARY ASID\n         ST    R9,SASID            AND SAVE IT\n         AXSET AX=ONE              SET AX TO ALLOW SSAR\n         MODESET MODE=PROB,KEY=NZERO UNAUTHORIZE OURSELVES\n***********************************************************************\n*                                                                     *\n*          BUILD A TABLE OF ALL UCM ADDRESSES                         *\n*                                                                     *\n***********************************************************************\nBLDUCMS  L     R4,16               R4 = ADDR OF CVT\n         USING CVT,R4              SET ADDRESSABILITY TO CVT\n         L     R4,CVTCUCB          R4 = ADDR OF 'CUCB' (UCM BASE)\n         DROP  R4                  DROP ADDRESSABILITY TO CVT\n         USING UCM,R4              SET ADDRESSABILITY TO UCM BASE\n         L     R5,UCMVEA           ADDRESS OF FIRST UCM ENTRY\n         L     R6,UCMVEZ           LOAD LENGTH OF EACH UCM ENTRY\n         L     R7,UCMVEL           ADDRESS OF LAST UCM ENTRY\n         DROP  R4                  DROP ADDRESSABILITY TO UCM BASE\n         USING UCMLIST,R5          SET ADDRESSABILITY TO UCM\n         LA    R8,UCMTAB+4         LOAD ADDR OF 1ST UCM ADDR (REL 1)\n         LA    R15,UCMTABC         LOAD NUMBER OF ENTRIES IN TABLE\nUCMTBLP  SLR   R8,R8               ZERO REGISTER FOR IC\n         IC    R8,UCMID            LOAD UCMID\n         CR    R8,R15              SEE IF UCMID OUTSIDE OUR TABLE\n         BH    UCMTBLP1            YES, IGNORE IT\n         SLL   R8,2                MULTIPLY BY 4\n         LA    R8,UCMTAB(R8)       POINT WITHIN TABLE\n         ST    R5,0(R8)            SAVE UCM ADDRESS\nUCMTBLP1 LA    R8,4(,R8)           INCREMENT TO NEXT UCMTAB ENTRY\n         AR    R5,R6               INCREMENT TO NEXT UCM ENTRY\n         CR    R5,R7               SEE IF END OF UCM ENTRIES\n         BNH   UCMTBLP             NO, LOOP\nUCMTDONE STH   R15,NUMUCMS         SAVE MAX NUMBER OF UCMS\n         DROP  R5                  DROP ADDRESSABILITY TO UCM\n         EJECT\n***********************************************************************\n*                                                                     *\n*          FIND THE MASTER CONSOLE UCM AND DCM ADDRESS                *\n*                                                                     *\n***********************************************************************\nFINDUCM  SLR   R5,R5               CLEAR REG FOR IC\n         IC    R5,CNSLNUM          LOAD CONSOLE NUMBER\n         CLI   CNSLNUM,C'M'        WAS MASTER REQUESTED?\n         BE    UCMMAST             YES, BRANCH\n         SLR   R15,R15             ZERO REG FOR IC\n         IC    R15,CNSLNUM         LOAD CONSOLE NUMBER\n         CH    R15,NUMUCMS         SEE IF TOO HIGH\n         BH    UCMERR6             YES, INVALID\n         SLA   R15,2               MULTIPLY BY 4\n         L     R4,UCMTAB(R15)      LOAD UCM ENTRY\n         LTR   R4,R4               TEST ADDRESS\n         BZ    UCMERR6             ZERO, NOT A CONSOLE\n         USING UCMLIST,R4          SET ADDRESSABILITY TO UCM\n         TM    UCMATR,UCMUF        IS THE DEVICE ACTIVE?\n         BO    ACTIVE              YES, BRANCH\nUCMERR5  MVC   ERROR(26),ERRMSG5   SET INACTIVE CONSOLE MESSAGE\n         B     UCMMAST             GO SET TO MASTER\nUCMERR6  MVC   ERROR(26),ERRMSG6   SET INVALID CONSOLE MESSAGE\nUCMMAST  LA    R5,1                SET STARTING CONSOLE NUMBER\n         LH    R15,NUMUCMS         LOAD NUMBER OF UCMS\n         LA    R14,UCMTAB+4        LOAD ADDRESS OF UCM TABLE\nUCMMLOOP ICM   R4,15,0(R14)        LOAD UCM ENTRY\n         BZ    UCMMLOO1            ZERO, CONSOLE IS NOT A CRT\n         TM    UCMDISP1,UCMDISPA   IS THIS A MASTER CONSOLE?\n         BNO   UCMMLOO1            NO, LOOP\n         TM    UCMATR,UCMUF        IS THE DEVICE ACTIVE?\n         BO    ACTIVE              YES, BRANCH\n         TPUT  ERRMSG1,26          WRITE ERROR MSG\n         ABEND 002,DUMP            ABEND THE COMMAND\nUCMMLOO1 LA    R14,4(,R14)         INCREMENT TO NEXT UCM TABLE ENTRY\n         LA    R5,1(,R5)           ADD 1 TO CONSOLE NUMBER\n         BCT   R15,UCMMLOOP        LOOP ON UCM TABLE ENTRIES\n         TPUT  ERRMSG1,26          WRITE ERROR MSG\n         ABEND 002,DUMP            ABEND THE COMMAND\nACTIVE   ST    R4,CONFLG1          SAVE UCM ADDRESS\n         STC   R5,CNSLNUM          STORE CONSOLE NUMBER\n         DROP  R4                  DROP ADDRESSABILITY TO UCM\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*              LOCATE SCREEN BUFFER AND PREPARE TO TPUT               *\n*                                                                     *\n*              OUTPUT LOOP RETURNS TO HERE TO HANDLE POSSIBLE         *\n*              MASTER CONSOLE SWITCH                                  *\n*                                                                     *\n***********************************************************************\nNEXTPAGE CLI   ATTNFLG,X'00'       WAS ATTN HIT?\n         BE    NOATTN              NO\n*                                  ATTENTION KEY HIT; PROCESS IT\n         STFSMODE ON\n         MVI   ATTNFLG,X'00'       YES, RESET FLAG\n         MVC   TIME(3),BLANKS      BLANK OUT TIMER FIELD\n         MVI   WAITFLG,X'00'       TURN OFF WAIT FLAG\n         XC    TIMER,TIMER         SET TIMER TO 0\nNOATTN   L     R5,CONFLG1          R5 = ADDR OF UCM\n         USING UCMLIST,R5          SET ADDRESSABILITY TO UCM\n         L     R6,UCMXB            R6 = ADDR OF RDCM\n         LTR   R6,R6               IS THIS A GRAPHICS CONSOLE?\n         BP    GRAPHICS            YES\n         MVC   ERROR(26),ERRMSG4   NON-GRAPHIC CONSOLE\n         B     DONE                GET OUT\n         SPACE\nGRAPHICS MVC   CTYPE(28),BLANKS    BLANK OUT CONSOLE TYPE FIELD\n         TM    UCMDISP1,UCMDISPA   IS THIS A MASTER CONSOLE?\n         BNO   AUTH                NO\n         MVC   MASTER(6),=CL6'MASTER' YES\nAUTH     TM    UCMAUTHA,UCMAUTH1   IS THIS CONSOLE SYSTEM AUTHORIZED?\n         BNO   AUTH1               NO\n         MVC   SYS(3),=CL3'SYS'    YES\nAUTH1    TM    UCMAUTHA,UCMAUTH2   IS IT I/O AUTHORIZED?\n         BNO   AUTH2               NO\n         MVC   IO(3),=CL3'I/O'     YES\nAUTH2    TM    UCMAUTHA,UCMAUTH3   IS IT CONS AUTHORIZED?\n         BNO   AUTHDONE            NO\n         MVC   CONS(4),=CL4'CONS'  YES\nAUTHDONE L     R7,UCMUCB           R7 = ADDR OF UCB\n         MVC   UNIT(3),13(R7)      MOVE UNIT ADDR INTO LINE\n         MODESET MODE=SUP,KEY=ZERO AUTHORIZE OURSELVES\n         LA    R9,CONASID          GET 'CONSOLE' ASID\n         SSAR  R9                  SET 'CONSOLE' AS SECONDARY ASID\n         LR    R8,R6               R8 = ADDR OF RDCM\n         LA    R4,LORDCM           R4 = ADDR OF COPY OF RDCM\n         LA    R5,4                R5 = WANT 1ST 4 BYTES ONLY\n         SLR   R15,R15             SET 'FROM' KEY TO ZERO\n         MVCP  0(R5,R4),0(R8),R15  MOVE IT\n         L     R8,LORDCM           R8 = ADDR OF PAGEABLE DCM FROM RDCM\n         LA    R4,LOCDCM           R4 = ADDR OF COPY OF PDCM\n         LA    R5,L'LOCDCM         R5 = LENGTH OF PDCM\n         SLR   R15,R15             SET 'FROM' KEY TO ZERO\nMVLOOP   MVCP  0(R5,R4),0(R8),R15  MOVE IT\n         BZ    MVDONE              FINISHED\n         LA    R4,256(R4)          INCREMENT 'TO' ADDRESS\n         LA    R8,256(R8)          INCREMENT 'FROM' ADDRESS\n         SH    R5,=H'256'          DECREMENT LENGTH LEFT TO MOVE\n         B     MVLOOP              MOVE NEXT 256 BYTES\nMVDONE   L     R9,SASID            RESTORE PREVIOUS SECONDARY ASID\n         SSAR  R9                  SHOULD BE SAME AS PRIMARY\n         LA    R7,LOCDCM           R7 = ADDR OF COPY OF TDCM\n         USING PDCM,R7             SET ADDRESSABILITY TO PAGEABLE DCM\n         SPACE\n***********************************************************************\n*                                                                     *\n*                 FILLIN TRAILER AT BOTTOM OF SCREEN                  *\n*                                                                     *\n***********************************************************************\n         MVC   LASTLINE(40),DCMINPUT   MOVE IN INPUT BUFFER LINE\n         MVI   MODE+1,C' '         BLANK OUT VIP INDICATOR\n         CLI   VIPFLG,X'FF'        IS THE VIP FLAG ON?\n         BNE   CHKINTEG            NOPE\n         MVI   MODE+1,C'*'         TURN ON VIP INDICATOR\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*                    CHECK FOR INTEGRATED CONSOLE                     *\n*                                                                     *\n*     IF THIS IS A INTEGRATED CONSOLE(3066), SPECIAL PROCESSING MUST  *\n*     BE MADE FOR PROCESSING THE 30 LINES ON THE 3277 TSO SCREEN.     *\n*                                                                     *\n***********************************************************************\nCHKINTEG MVI   INTEGFLG,X'FF'      TURN ON INTEGRATED CONSOLE FLAG\n         LH    R15,DCMMSGAL        LOAD NUMBER OF MESSAGE LINES\n         STH   R15,NUMIN           SAVE NUMBER OF INPUT LINES\n         LH    R15,DCMCORLN        LOAD LENGTH OF MESSAGE LINE\n         STH   R15,LENIN           SAVE LENGTH OF INPUT LINE\n         SH    R15,=H'78'          SUBTRACT LENGTH OF TEXT\n         STH   R15,BUFINDEX        AND SAVE BUFFER INDEX AMOUNT\nNOCTRL   LH    R15,LENIN           LOAD LENGTH OF BUFFER LINE\n         MH    R15,NUMIN           MULTIPLY BY NUMBER OF LINES\n         STH   R15,MOVEL           SAVE LENGTH OF CONSOLE BUFFERS\n         EJECT\n*********************************************************************\n*                                                                   *\n*        SET UP MOVE LENGTH FOR PAGE1 AND PAGE2 (IF 3066 CONSOLE)   *\n*        AND BUFFER OFFSET FOR MOVE FOR PAGE2 .                     *\n*                                                                   *\n*********************************************************************\n         SPACE 3\n*********************************************************************\n*                                                                   *\n*        ASSUME 3277 TYPE CONSOLE WHICH MEANS THAT NO PAGE2 WILL    *\n*        REQUIRED FOR EITHER A 3277 OR A 3278 TSO CRT.              *\n*                                                                   *\n*********************************************************************\n         SLR   R15,R15             CLEAR REGISTER\n         STH   R15,PAGE2OFF        ASSUME NO PAGE2\n         LH    R15,NUMIN           LOAD NUMBER OF LINES IN BUFFER\n         MH    R15,=H'84'          MULTIPLY BY TPUT LINE LENGTH\n         STH   R15,PAGEML          AND SAVE MOVE LENGTH\n         LH    R15,NUMIN           LOAD NUMBER OF LINES IN BUFFER\n         CH    R15,=H'19'          IS THIS A 3277 TYPE CONSOLE?\n         BE    MOVEBUFF            YES, ALL SET UP\n         CH    R15,=H'20'          IS THIS A 3278 TYPE CONSOLE?\n         BE    MOVEBUFF            YES, ALL SET UP\n*********************************************************************\n*                                                                   *\n*        WE KNOW THAT THE CONSOLE IS A 3066 AND WILL HAVE 30 LINES  *\n*        OF BUFFERS.  THE TSO CRT IS A 3277 OR 3278 IN MOD 2 MODE   *\n*        SO PAGE2 WILL BE REQUIRED.  PAGE1 WILL HAVE THE FIRST      *\n*        20 LINES AND PAGE2 WILL HAVE THE LAST 20 LINES.            *\n*                                                                   *\n*********************************************************************\n         LA    R15,20              PAGE 1 WILL HAVE FIRST 20 LINES\n         MH    R15,=H'84'          MULTIPLY BY TPUT LINE LENGTH\n         STH   R15,PAGEML          AND SAVE MOVE LENGTH\n         LH    R15,LENIN           CALCULATE OFFSET\n         MH    R15,=H'10'              FOR 10 LINES\n         STH   R15,PAGE2OFF        AND SAVE THE OFFSET VALUE\n*       MOVE CONSOLE BUFFER TO GETMAIN\nMOVEBUFF LA    R9,CONASID          GET 'CONSOLE' ASID\n         SSAR  R9                  SET 'CONSOLE' AS SECONDARY ASID\n         L     R8,DCMASCRN         R8 = ADDR OF SCREEN BUFFER\n         SH    R8,BUFINDEX         SUBTRACT BUFFER INDEX (IF ANY)\n         L     R4,GETADDR          R4 = ADDR OF OUTPUT BUFFER\n         LH    R5,MOVEL            R5 = LENGTH OF ALL CONSOLE BUFFERS\n         SLR   R15,R15             SET 'FROM' KEY TO ZERO\nMOVELOOP MVCP  0(R5,R4),0(R8),R15  MOVE IT\n         BZ    MOVEDONE            FINISHED\n         LA    R4,256(R4)          INCREMENT 'TO' ADDRESS\n         LA    R8,256(R8)          INCREMENT 'FROM' ADDRESS\n         SH    R5,=H'256'          DECREMENT LENGTH LEFT TO MOVE\n         B     MOVELOOP            MOVE NEXT 256 BYTES\nMOVEDONE L     R9,SASID            RESTORE PREVIOUS SECONDARY ASID\n         SSAR  R9                  SHOULD BE SAME AS PRIMARY\n*       SET PROPER TPUT LENGTH\n         LH    R15,PAGEML          LOAD LENGTH OF MESSAGE LINES\n         LA    R15,TRAILEN(R15)    ADD TRAILER LENGTH\n         ST    R15,TPUTLEN         SET LENGTH FOR FULL SCREEN\n         SPACE 2\n         CLC   DCMMSGAL(2),=H'30'  IS THIS REALLY INTEGRATED CONSOLE?\n         BE    MOD3066             YES\n         CLC   DCMMSGAL(2),=H'19'  IS THIS A TYPE 3277 ?\n         BE    MOD3277             YES\n         CLC   DCMMSGAL(2),=H'20'  IS THIS A TYPE 3278 ?\n         BE    MOD3277             YES\n         TPUT  ERRMSG7,26          WRITE ERROR MSG\n         ABEND 003,DUMP            WHAT IS IT\nMOD3277  MVI   INTEGFLG,X'00'      NO; TURN OFF INTEGRATED CONSOLE FLAG\n         MVI   FREEZE,C'F'         FREEZE DISPLAY\n         MVI   PAGE,C'1'           ON PAGE 1\n         SPACE 1\nMOD3066  CLI   PAGE,C'1'           ARE WE ON PAGE 1?\n         BNE   ONTWO               NO, SO WE MUST BE ON 2\n         CLI   FREEZE,C'F'         ARE WE FROZEN ON PAGE 1?\n         BNE   PAGE2               NO, SO DISPLAY PAGE 2\n         B     PAGE1               YES, SO DISPLAY PAGE 1\nONTWO    CLI   FREEZE,C'F'         ARE WE FROZEN ON PAGE 2?\n         BE    PAGE2               YES, SO DISPLAY PAGE 2\nPAGE1    MVI   PAGE,C'1'           PAGE = 1\n*       MOVE FROM GETMAIN AREA + ZERO\n         L     R8,GETADDR          R8 = ADDR OF SCREEN BUFFER SAVE AREA\n         AH    R8,BUFINDEX         ADD MSG PREFIX LENGTH TO BUFFER ADDR\n         LA    R4,BUF              R4 = ADDR OF OUTPUT BUFFER\n         LH    R5,NUMIN            LOAD NUMBER OF MESSAGE LINES\n         CH    R5,=H'20'           SEE IF EXCEEDS 20\n         BNH   PAGE1A              NO, BRANCH\n         LA    R5,20               SET NUMBER OF LINES TO 20\nPAGE1A   SLR   R9,R9               SET ROW NUMBER TO ZERO\nPAGE1B   LA    R9,1(R9)            ADD 1 TO ROW NUMBER\n         STH   R9,ROW              SAVE NEW ROW NUMBER\n         BAL   R14,GETSBA          GO GET SBA ADDRESS OF THIS LINE\n         MVI   0(R4),X'11'         SET SBA ORDER IN TPUT BUFFER\n         MVC   1(2,R4),SBA         MOVE SBA TO TPUT BUFFER\n         MVC   3(3,R4),=X'1DE840'  SET FIELD ATTRIBUTES\n         MVC   6(78,R4),0(R8)      MOVE MESSAGE TO TPUT BUFFER\n         CLI   3(R8),C'*'          SEE IF NON ROLL-DELETABLE\n         BE    PAGE1C              YES, LEAVE THE ATTRIBUTES ALONE\n         CLI   3(R8),C'@'          SEE IF NON ROLL-DELETABLE\n         BE    PAGE1C              YES, LEAVE THE ATTRIBUTES ALONE\n         MVC   3(3,R4),=X'1DE440'  SET TO NORMAL INTENSITY\nPAGE1C   LA    R4,84(R4)           POINT TO NEXT RECORD IN TPUT BUFFER\n         AH    R8,LENIN            POINT TO NEXT RECORD IN CNSL BUFFER\n         BCT   R5,PAGE1B           LOOP UNTIL ALL RECORDS PROCESSED\n         B     MVETRAIL            GO MOVE THE BUFFER\nPAGE2    MVI   PAGE,C'2'           PAGE = 2\n*       MOVE FROM GETMAIN AREA + OFFSET TO LAST 20 LINES\n         L     R8,GETADDR          R8 = ADDR OF SCREEN BUFFER SAVE AREA\n         AH    R8,PAGE2OFF         ADD BUFFER OFFSET FOR PAGE2\n         AH    R8,BUFINDEX         ADD MSG PREFIX LENGTH TO BUFFER ADDR\n         LA    R4,BUF              R4 = ADDR OF OUTPUT BUFFER\n         LH    R5,NUMIN            LOAD NUMBER OF MESSAGE LINES\n         CH    R5,=H'20'           SEE IF EXCEEDS 20\n         BNH   PAGE2A              NO, BRANCH\n         LA    R5,20               SET NUMBER OF LINES TO 20\nPAGE2A   SLR   R9,R9               SET ROW NUMBER TO ZERO\nPAGE2B   LA    R9,1(R9)            ADD 1 TO ROW NUMBER\n         STH   R9,ROW              SAVE NEW ROW NUMBER\n         BAL   R14,GETSBA          GO GET SBA ADDRESS OF THIS LINE\n         MVI   0(R4),X'11'         SET SBA ORDER IN TPUT BUFFER\n         MVC   1(2,R4),SBA         MOVE SBA TO TPUT BUFFER\n         MVC   3(3,R4),=X'1DE840'  SET FIELD ATTRIBUTES\n         MVC   6(78,R4),0(R8)      MOVE MESSAGE TO TPUT BUFFER\n         CLI   3(R8),C'*'          SEE IF NON ROLL-DELETABLE\n         BE    PAGE2C              YES, LEAVE THE ATTRIBUTES ALONE\n         CLI   3(R8),C'@'          SEE IF NON ROLL-DELETABLE\n         BE    PAGE2C              YES, LEAVE THE ATTRIBUTES ALONE\n         MVC   3(3,R4),=X'1DE440'  SET TO NORMAL INTENSITY\nPAGE2C   LA    R4,84(R4)           POINT TO NEXT RECORD IN TPUT BUFFER\n         AH    R8,LENIN            POINT TO NEXT RECORD IN CNSL BUFFER\n         BCT   R5,PAGE2B           LOOP UNTIL ALL RECORDS PROCESSED\nMVETRAIL LA    R4,BUF              R4 = ADDR OF OUTPUT BUFFER\n         AH    R4,PAGEML           R4 = ADDR OF TRAILER\n         MVC   0(TRAILEN,R4),CMDCTRL MOVE IN TRAILER\n         MODESET MODE=PROB,KEY=NZERO UNAUTHORIZE OURSELVES\n         DROP  R5,R7\n         CLI   CRTFLAG,X'FF'       IS THIS A CRT?\n         BE    TPUTCRT             YES\n         SPACE 5\n***********************************************************************\n*                                                                     *\n*      DISPLAY THE OPERATOR'S SCREEN ON A TSO HARDCOPY TERMINAL       *\n*                                                                     *\n***********************************************************************\nNOT3270  LH    R8,NUMIN            R8 = NUMBER OF INPUT LINES\n         LA    R3,BUF              SET POINTER TO FIRST LINE\n         AH    R3,BUFINDEX         ADD BUFFER INDEX TO START\n         ICM   R3,8,EDITFLG        EDIT MODE\n         L     R0,=F'80'           R0 LENGTH OF OUTPUT LINE\n         CH    R0,LENIN            SEE IF LINE LENGTH = 80 (3066)\n         BE    NEXTL               YES, BRANCH\n         L     R0,=F'78'           SET TPUT LENGTH TO 78\nNEXTL    TPUT  (3),(0),R           PRINT ONE LINE ON HARDCOPY\n         AH    R3,LENIN            ADD LINE LENGTH TO BUFFER ADDR\n         BCT   R8,NEXTL            LOOP UNTIL PRINTED LAST LINE?\nDOLAST2  TPUT  LASTLINE,79,EDIT    DISPLAY OPER CMD LINE\n         TPUT  HEADING,79,EDIT     DISPLAY CONSOLE STATUS LINE\n         TPUT  USERLINE,79,EDIT    DISPLAY USER CMD LINE\n         B     INPUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*               DISPLAY THE OPERATORS SCREEN ON A 3277                *\n*                                                                     *\n***********************************************************************\nTPUTCRT  LA    R1,CLEAR            R1 = ADDR OF OUTPUT STREAM\n         L     R0,TPUTLEN          R0 = LENGTH OF TPUT\n         ICM   R1,8,FULLSCR        SET ASIS TYPE FOR TPUT\n         TPUT  (1),(0),R           DISPLAY ENTIRE SCREEN\n         MODESET MODE=SUP,KEY=ZERO AUTHORIZE OURSELVES\n         SLR   R1,R1               CLEAR PARM REG\n         SYSEVENT TGETTPUT         MARK END OF TRANSACTION\n         MODESET MODE=PROB,KEY=NZERO UNAUTHORIZE OURSELVES\nINPUT    MVC   ERROR(32),BLANKS    BLANK OUT ERROR FIELD\n         CLI   WAITFLG,X'FF'       IS THE WAIT FLAG ON?\n         BNE   READCHAR            NO, SO GO GET A COMMAND\n         STIMER WAIT,BINTVL=DELAY WAIT FOR DELAY*.01 SECONDS\n         L     R2,TIMER            R2 = CURRENT VALUE OF TIMER\n         BCTR  R2,0                TIMER = TIMER - 1\n         ST    R2,TIMER            STORE NEW VALUE OF TIMER\n         CVD   R2,WORK             CONVERT TO DECIMAL.\n         MVC   SCRATCH(4),PATTERN  MOVE IN EDIT PATTERN\n         ED    SCRATCH(4),WORK+6   EDIT IN CONSOLE NUMBER\n         MVC   TIME(3),SCRATCH+1   MOVE TIME LEFT INTO PLACE\n         LTR   R2,R2               HAS TIMER HIT ZERO?\n         BNZ   NEXTPAGE            NO, CONTINUE TO COUNT\n         MVC   TIME(3),BLANKS      CLEAR COUNTER FIELD\n         XI    WAITFLG,X'FF'       TOGGLE WAIT FLAG OFF\n         B     NEXTPAGE            AND GO ON AS IF NOTHING HAPPENED..\n         EJECT\n***********************************************************************\n*                                                                     *\n*                       READ COMMAND FROM USER                        *\n*                                                                     *\n***********************************************************************\nREADCHAR MVC   REPLY,BLANKS        SHOW NO COMMAND\n         TGET  REPLYBUF,85,ASIS    GET 79 CHARACTERS FROM TERMINAL\n         CH    R15,=H'20'          SEE IF RETURN CODE VALID\n         BH    INVALID             NO, BRANCH\n         B     BRTAB(R15)          BRANCH TO BRANCH TABLE\nBRTAB    B     OK                  RC=0\n         B     NEXTPAGE            RC=4  (NO DATA AVAILABLE)\n         B     ATTN                RC=8  (ATTENTION WAS HIT)\n         B     NEXTPAGE            RC=12 (IGNORE DATA)\n         B     INVALID             RC=16 (INVALID TPUT)\n         B     IOERROR             RC=20 (TERMINAL DISCONNECTED)\nINVALID  TPUT  ERRMSG9,26          WRITE ERROR MSG\n         ABEND 004,DUMP            ABEND THE COMMAND\nIOERROR  TPUT  ERRMSG10,26         WRITE ERROR MSG\n         ABEND 005,DUMP            ABEND THE COMMAND\nATTN     MVI   ATTNFLG,X'FF'       SET ATTENTION INDICATOR\n         B     NEXTPAGE            AND CONTINUE AS IF ENTER PRESSED\nOK       CLI   REPLYBUF,X'7D'      ENTER KEY ?\n         BE    NOPFK               YES, SKIP PFK LOGIC\n         CLI   REPLYBUF,X'60'      ERROR (NO AID)?\n         BE    NEXTPAGE            YES, CONTINUE AS IF ENTER PRESSED\n         CLI   REPLYBUF,X'6B'      PA3 KEY ?\n         BE    NEXTPAGE            YES, CONTINUE AS IF ENTER PRESSED\n         CLI   REPLYBUF,X'6C'      PA1 KEY ?\n         BE    ATTN                YES, PROCESS AS IF ATTN\n         CLI   REPLYBUF,X'6D'      CLEAR KEY ?\n         BE    NEXTPAGE            YES, CONTINUE AS IF ENTER PRESSED\n         CLI   REPLYBUF,X'6E'      IS THIS A RESHOW? (VTAM ONLY)\n         BE    NEXTPAGE            YES, CONTINUE AS IF ENTER PRESSED\n         CLI   REPLYBUF,X'F0'      TEST REQ?\n         BE    NEXTPAGE            YES, CONTINUE AS IF ENTER PRESSED\n         CLI   REPLYBUF,X'7A'      PFK10 (RECALL) ?\n         BE    RECALL              YES, GO DO RECALL COMMAND\n         NI    REPLYBUF,X'0F'      TURN OFF HIGH BYTE\n         SR    R1,R1               CLEAR REGISTER\n         IC    R1,REPLYBUF         GET PFK NUMBER\n         LTR   R1,R1               TEST PFK NUMBER\n         BNP   NEXTPAGE            ZERO OR NEGATIVE, CONTINUE\n         BCTR  R1,0                DECREMENT BY 1\n         CH    R1,=H'9'            HIGHEST DEFINED PFK IS 10\n         BH    NEXTPAGE            SO SKIP OTHERS OR BUF TRANSFER ERROR\n         MH    R1,=H'80'           GET OFFSET INTO TABLE\n         LA    R1,PFKTABLE(R1)     GET ADDRESS OF COMMAND\n         MVC   REPLY,0(R1)         INSERT COMMAND\nNOPFK    CLI   REPLY,C' '          JUST A BLANK?\n         BE    NEXTPAGE            YES, JUST GO REFRESH\n         MVC   USERLINE,BLANKS     BLANK OUT INPUT FIELD\n         OC    REPLY(79),BLANKS    CONVERT CHARS TO UPPER CASE\n         CLC   REPLY(6),=C'RECALL' RECALL COMMAND ?\n         BE    RECALL              YES, GO DO IT\n         CLC   REPLY(3),=C'RCL'    RECALL COMMAND (SHORT FORM) ?\n         BNE   CHEKWAIT            NO, CHECK FOR WAIT COMMAND\nRECALL   DS    0H\n         MVC   LASTUSER,LASTRPLY   RESTORE LAST ENTERED COMMAND\n         MVC   USERLINE(L'LASTRPLY),LASTRPLY   RECALL LAST COMMAND\n         B     NEXTPAGE            GIVE OPER THE CHANCE TO CHANGE\n***********************************************************************\n*                                                                     *\n*                    WAIT  --  ENTER WAIT MODE                        *\n*                                                                     *\n***********************************************************************\nCHEKWAIT DS    0H\n         CLC   REPLY(4),=C'WAIT'   DO WE SHIFT TO WAIT MODE?\n         BNE   CDELAY              NO, SO CONTINUE\n         LA    R1,REPLY+4          LOAD START ADDRESS OF VALUE\n         XI    WAITFLG,X'FF'       TURN ON WAIT FLAG\n         LA    R2,30               SET DEFAULT VALUE = 30\n         LA    R15,CONVBIN         BRANCH TO CONVERSION RTN\n         BALR  R14,R15             EBCDIC TO BINARY\n         MVC   SCRATCH(4),PATTERN  MOVE IN EDIT PATTERN\n         ED    SCRATCH(4),WORK+6   EDIT IN CONSOLE NUMBER\n         MVC   TIME(3),SCRATCH+1   MOVE TIME LEFT INTO PLACE\n         ST    R2,TIMER            STORE STARTING TIMER VALUE\n         B     NEXTPAGE            ALL SET - GO DISPLAY NEXT PAGE\n***********************************************************************\n*                                                                     *\n*        DELAY  --  SET TIMER DELAY IN TENTHS OF A SECOND             *\n*                                                                     *\n***********************************************************************\nCDELAY   CLC   REPLY(5),=C'DELAY'  ARE WE CHANGING THE TIME DELAY?\n         BNE   CNSL                NO, SO CONTINUE\n         LA    R1,REPLY+5          LOAD START ADDRESS OF VALUE\n         LA    R2,10               SET DEFAULT VALUE = 10 TENTHS SECOND\n         LA    R15,CONVBIN         BRANCH TO CONVERSION RTN\n         BALR  R14,R15             EBCDIC TO BINARY\n         MVC   SCRATCH(5),DPATTRN  MOVE IN EDIT PATTERN\n         ED    SCRATCH(5),WORK+6   EDIT IN DELAY TIME\n         MVC   PAUSE(3),SCRATCH+2  MOVE TIME LEFT INTO PLACE\n         MH    R2,=H'10'           CONVERT TO 100THS OF A SECOND\n         ST    R2,DELAY            STORE WAIT DELAY VALUE\n         B     NEXTPAGE            ALL SET - GO DISPLAY NEXT PAGE\n***********************************************************************\n*                                                                     *\n*                   CONSOLE --  CHANGE CONSOLE ADDRESS                *\n*                                                                     *\n***********************************************************************\nCNSL     CLC   REPLY(8),=C'CONSOLE=' IS THIS A CONSOLE CHANGE REQUEST\n         BNE   END                 NO, BRANCH\n         MVI   CNSLNUM,C'M'        SET DEFAULT TO MASTER\n         LA    R1,REPLY+8          LOAD START ADDRESS OF VALUE\n         CLI   0(R1),C'M'          IS THE MASTER CONSOLE REQUESTED?\n         BE    FINDUCM             YES, BRANCH\n         LA    R2,0                SET DEFAULT VALUE = 00\n         LA    R15,CONVBIN         BRANCH TO CONVERSION RTN\n         BALR  R14,R15             EBCDIC TO BINARY\n         LTR   R2,R2               TEST VALUE\n         BZ    FINDUCM             ZERO, USE 'M'\n         STC   R2,CNSLNUM          SAVE CONSOLE NUMBER\n         B     FINDUCM             GO PROCESS CONSOLE SWITCH\n***********************************************************************\n*                                                                     *\n*                       END --  TERMINATE CONSOLE                     *\n*                                                                     *\n***********************************************************************\nEND      CLC   REPLY(2),=C'EN'     IS IT AN 'END' ?\n         BE    DONE                YES, SO QUIT\n***********************************************************************\n*                                                                     *\n*                        Z  --  TERMINATE CONSOLE                     *\n*                                                                     *\n***********************************************************************\nHALT     CLC   REPLY(4),=C'Z   '   IS IT AN 'Z'?\n         BE    DONE                YES, SO QUIT\n***********************************************************************\n*                                                                     *\n*          FREEZE  --  FREEZE DISPLAY ON CURRENT PAGE                 *\n*                                                                     *\n***********************************************************************\nF        CLC   REPLY(2),=C'FR'     IS IT AN 'FREEZE' ?\n         BNE   R                   NO, SO CONTINUE ON\n         MVI   FREEZE,C'F'         TURN ON FREEZE INDICATOR\n         B     NEXTPAGE            CONTINUE\n***********************************************************************\n*                                                                     *\n*     RELEASE  --  RELEASE FREEZE ON CURRENT PAGE DISPLAY             *\n*                                                                     *\n***********************************************************************\nR        CLC   REPLY(2),=C'RE'     IS IT AN 'RELEASE' ?\n         BNE   GETHELP             NO, SO CONTINUE ON\n         MVI   FREEZE,C'R'         TURN OFF FREEZE INDICATOR\n         B     NEXTPAGE            CONTINUE\n         EJECT\n***********************************************************************\n*                                                                     *\n*           ?  --  LIST HELP FOR CONSOLE COMMANDS ON TERMINAL         *\n*                                                                     *\n***********************************************************************\nGETHELP  CLI   REPLY,C'?'          IS HE ASKING FOR HELP?\n         BNE   VIP                 NO,SO CONTINUE\n         LA    R1,HELP             R1 = ADDR OF HELP PAGE\n         LA    R0,HLENGTH          R0 = LENGTH OF HELP PAGE\n         ICM   R1,8,FULLSCR        INSERT ASIS CNTL CHARS\n         TPUT  (1),(0),R           DISPLAY HELP\n         B     READCHAR\n***********************************************************************\n*                                                                     *\n*   CHECK FOR THE 'VIP' PASSWORD. THIS IS THE THIRD AND LAST LEVEL    *\n*   OF AUTHORIZATION REQUIRED TO ISSUE OS/JES COMMANDS.               *\n*                                                                     *\n***********************************************************************\nVIP      DS    0H\n         MVC   LASTRPLY,REPLY      SAVE THIS COMMAND FOR RECALL\n         MVC   LASTUSER,REPLY      SHOW LAST ENTERED USER COMMAND\n         CLI   VIPFLG,X'FF'        SUPER OPERATOR ?\n         BE    DYNA                YES, ANY COMMAND VALID\n         CLC   REPLY(2),=C'R '     NO, REPLY COMMAND ?\n         BE    DYNA                YES, REPLY VALID FOR OTHERS\n         CLC   REPLY(6),=C'REPLY ' NO, FULL REPLY COMMAND ?\n         BE    DYNA                YES, REPLY VALID\n         CLC   REPLY(2),=C'$D'     NO, DISPLAY COMMAND ?\n         BE    DYNA                YES, DISPLAY VALID FOR OTHERS\n         CLC   REPLY(2),=C'D '     NO, OS DISPLAY COMMAND ?\n         BE    DYNA                YES, DISPLAY VALID FOR OTHERS\n         B     BADCMD              SORRY, OTHER COMMAND INVALID\n***********************************************************************\n*                                                                     *\n*                       JES OPERATOR COMMANDS                         *\n*                      SYSTEM OPERATOR COMMANDS                       *\n*                                                                     *\n***********************************************************************\nDYNA     DS    0H\n         MODESET MODE=SUP,KEY=ZERO AUTHORIZE OURSELVES\n         MVC   COMMDATA+4(50),REPLY MOVE CMD TO WTO LIST FORM\n         MVC   REPLY(79),BLANKS    BLANK OUT REPLY FIELD\n         SLR   R0,R0               CLEAR REG 0\n         IC    R0,CNSLNUM          SET UCMID FOR COMMAND\n         LA    R1,COMMDATA         LOAD ADDRESS OF WTO LIST FORM\n         MGCR  (1)                 ISSUE COMMAND\n         MODESET MODE=PROB,KEY=NZERO UNAUTHORIZE OURSELVES\n         B     NEXTPAGE            LOOP\nCOMMDATA WTO   '12345678901234567890123456789012345678901234567890',   X\n               ROUTCDE=(2),DESC=4,MF=L\n***********************************************************************\n*                                                                     *\n*                      COMMAND WAS INVALID                            *\n*                                                                     *\n***********************************************************************\nBADCMD   MVC   ERROR(26),ERRMSG3   COMMAND WAS INVALID\n         B     NEXTPAGE            LOOP\n         SPACE 5\nDONE     CLI   CRTFLAG,X'00'       IS THIS A HARDCOPY?\n         BE    ALLDONE             YES\n         TPUT  CLEAR,CLEARGTH,FULLSCR  NO, LETS CLEAR THE SCREEN FIRST\n         STFSMODE OFF              TURN OFF FS MODE\n         L     R1,GETADDR          LOAD GETMAIN AREA ADDRESS\nALLDONE  FREEMAIN R,LV=4096,SP=0,A=(1) FREE GETMAIN BUFFER ADDR\nEXIT     STSIZE LINELOC=LPSCREEN,SIZELOC=CPLINE RESET SCREEN ATTR\n         MODESET MODE=SUP,KEY=ZERO AUTHORIZE OURSELVES\n         AXSET AX=ZERO             SET AUTHORIZATION INDEX BACK TO ZERO\n         MODESET MODE=PROB,KEY=NZERO UNAUTHORIZE OURSELVES\n***********************************************************************\n*                                                                     *\n*                     UNAUTHORIZE OURSELVES                           *\n*                                                                     *\n***********************************************************************\n         LA    R0,PROGNAME         LOAD ADDRESS OF PROGRAM NAME\n         SLR   R1,R1               REQUEST PROTECT KEY ZERO\n         SVC   248                 GET AUTHORIZATION\n         L     R2,PSATOLD          GET TCB\n         USING TCB,R2              SET ADDRESSABILITY TO TCB\n         L     R2,TCBJSCB          GET POINTER TO JSCB\n         DROP  R2                  DROP ADDRESSABILITY TO TCB\n         USING IEZJSCB,R2          SET ADDRESSABILITY TO JSCB\n         NI    JSCBOPTS,255-JSCBAUTH   TURN OFF AUTHORIZATION BIT\n         DROP  R2                  DROP ADDRESSABILITY TO JSCB\n         LA    R0,PROGNAME         LOAD ADDRESS OF PROGRAM NAME\n         LA    R1,8                REQUEST PROTECT KEY RETURN\n         SVC   248                 GET AUTHORIZATION\n         L     R13,SAVE+4          RESTORE PTR TO CALLER'S SAVE AREA\n         LM    R14,R12,12(R13)     RESTORE REGISTERS\n         LA    R15,0               SET RETURN CODE TO ZERO\n         BR    R14                 RETURN TO SYSTEM\n         EJECT\n***********************************************************************\n*                                                                     *\n*            CONVERT EBCDIC NUMBERS FROM USER INTO BINARY             *\n*                                                                     *\n***********************************************************************\nCONVBIN  CVD   R2,WORK             CONVERT TO DECIMAL.\n         CLI   0(R1),C' '          DID HE ENTER A NUMBER?\n         BE    RTRN                NO, USE THE DEFAULT\n         CLI   0(R1),C'0'          IS THE HEX CODE < 'F0' ?\n         BL    BADCHAR             YES, ERROR\n         CLI   0(R1),C'9'          IS THE HEX CODE > 'F9' ?\n         BH    BADCHAR             YES, ERROR\n         PACK  WORK(8),0(1,R1)     PACK EBCDIC (ASSUME 1 DIGIT)\n         CLI   1(R1),C' '          DID HE ENTER 2 DIGITS?\n         BE    CVB                 NO, DONT DO THE 2 DIGIT PACK\n         CLI   1(R1),C'0'          IS THE HEX CODE < 'F0' ?\n         BL    BADCHAR             YES, ERROR\n         CLI   1(R1),C'9'          IS THE HEX CODE > 'F9' ?\n         BH    BADCHAR             YES, ERROR\n         PACK  WORK(8),0(2,R1)     PACK AGAIN, WITH 2 DIGITS THIS TIME\nCVB      CVB   R2,WORK             GET BINARY\nRTRN     BR    R14                 RETURN TO MAINLINE\nBADCHAR  MVC   ERROR(26),ERRMSG2   CONSOLE NUMBER ERROR\n         BR    R14                 RETURN TO MAINLINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THIS IS THE ROUTINE TO CONVERT ROW AND COLUMN TO A           *\n*        CRT SET BUFFER ADDRESS (SBA) VALUE                           *\n*                                                                     *\n*        THE ROW AND COLUMN ARE AT HALFWORDS NAMED ROW AND COL        *\n*        RESPECTIVELY                                                 *\n*                                                                     *\n*              ON RETURN:                                             *\n*                                                                     *\n*        THE SBA ADDRESS WILL BE IN A TWO BYTE FIELD NAMED SBA.       *\n*                                                                     *\n***********************************************************************\nGETSBA   STM   R0,R15,SAVGSBA      SAVE INPUT REGISTERS\n         LH    R2,ROW              LOAD ROW NUMBER\n         BCTR  R2,0                MAKE RELATIVE TO ZERO\n         LH    R3,COL              LOAD COLUMN NUMBER\n         BCTR  R3,0                MAKE RELATIVE TO ZERO\n         MH    R2,=H'80'           MULTIPLY ROW NUMBER BY LINE SIZE\n         AR    R2,R3               DETERMINE RELATIVE SCREEN POSITION\n         SRDA  R2,32               SHIFT TO ODD REG OF PAIR\n         D     R2,=F'64'           DIVIDE BY 64 FOR TBL OFFSETS\n*        QUOTIENT  IN REG 3\n*        REMAINDER IN REG 2\n         LA    R4,SBATBL1          LOAD ADDRESS OF SBA TABLE\n         IC    R5,0(R3,R4)         LOAD FIRST SBA CHAR\n         STC   R5,SBA              SAVE FIRST SBA CHAR\n         IC    R5,0(R2,R4)         LOAD SECOND SBA CHAR\n         STC   R5,SBA+1            SAVE SECOND SBA CHAR\n***********************************************************************\n*                      EXIT FROM GETSBA ROUTINE                       *\n***********************************************************************\nGSBAEXIT LM    R0,R15,SAVGSBA      RESTORE REGS\n         BR    R14                 RETURN TO CALLER\n         SPACE 3\nSBATBL1  DS    0CL64\n         DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'\n         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'\n         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'\n         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'\n         SPACE 3\nSAVGSBA  DS    16F                 GETSBA ROUTINE SAVE AREA\nROW      DC    H'0'                ROW NUMBER TO BE CONVERTED\nCOL      DC    H'1'                COLUMN NUMBER TO BE CONVERTED\nSBA      DS    XL2                 RESULTING SBA\n         DROP  12\n         EJECT\n***********************************************************************\n*                                                                     *\n*                          A T T N E X I T                            *\n*                                                                     *\n*         TRAP USERS ATTENTION INTERRUPTS AND FLAG FOR RESET          *\n*                                                                     *\n***********************************************************************\n         USING ATTNEXIT,R15        ESTABLISH EXIT ADDRESSABILITY\nATTNEXIT L     R1,8(R1)            LOAD ADDRESS OF STAX USADDR\n         MVI   0(R1),X'FF'         SET ATTN FLAG (ATTNFLG)\n         BR    R14                 RETURN TO CALLER\n         DROP  R15\nAUTHNAME DS    0CL8\n         DC    CL8'S40384 '        HOOPER\n         DC    8XL1'FF'\n         EJECT\nPFKTABLE DS    0H\nPFK1     DC    CL80'?'\nPFK2     DC    CL80'WAIT0'\nPFK3     DC    CL80'END'\nPFK4     DC    CL80'$DQ'\nPFK5     DC    CL80'$DF'\nPFK6     DC    CL80'$DI'\nPFK7     DC    CL80'$DA'\nPFK8     DC    CL80'D A,L'\nPFK9     DC    CL80'D TS,L'\nPFK10    DC    CL80'RECALL'\n         EJECT\n***********************************************************************\n*                                                                     *\n*                         C O N S T A N T S                           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nPSATOLD  EQU   540\nPSAAOLD  EQU   548\n         DS    0D\nWORK     DS    D                   WORK AREA FOR PACKS\nSCRATCH  DS    D                   SCRATCH AREA FOR CHAR. MANIP\nCONFLG1  DC    F'1'                CONSOLE TO BE LOOKED AT\nTPUTLEN  DC    F'0'                LENGTH OF FULLSCREEN TPUT\nLPSCREEN DC    F'0'                LINES PER SCREEN\nCPLINE   DC    F'0'                CHARACTERS PER LINE\nLENIN    DC    H'0'                LENGTH OF LINE IN DCM\nNUMIN    DC    H'0'                NUMBER OF LINES IN DCM\nPAGEML   DC    H'0'                SIZE OF 1 PAGE OF BUFFERS\nPAGE2OFF DC    H'0'                OFFSET WITHIN GETMAIN TO 2ND PAGE\nMOVEL    DC    H'0'                TOTAL SIZE OF LINES IN DCM\nBUFINDEX DC    H'0'                INDEX (0 OR 6) FOR CONTROL CHARS\nGETADDR  DC    F'0'                SAVE AREA FOR GETMAIN ADDR\nTIMER    DC    F'30'               SECONDS LEFT ON TIMER\nDELAY    DC    F'100'              DELAY FOR 100 HUNDREDTHS OF A SECOND\nATTNFLG  DC    X'00'               X'FF' INDICATES ATTN WAS TRAPPED\nCRTFLAG  DC    X'FF'               X'FF' INDICATES CRT IN USE\nWAITFLG  DC    X'00'               X'00' INDICATES NOT IN WAIT MODE\nVIPFLG   DC    X'00'               X'FF' INDICATES VIP MODE\nINTEGFLG DC    X'00'               INTEGRATED CONSOLE FLAG\nFULLSCR  DC    X'03'               TPUT ASIS FLAG\nEDITFLG  DC    X'00'               TPUT EDIT FLAG\nPWREPLY  DC    CL8' '              REPLY AREA FOR PASSWORD\nPWDENTER DC    X'A495898396999540' LOWER CASE PASSWORD\nNULLS    DC    80X'00'             JUST NULLS\nPATTERN  DC    X'40202020'         EDIT PATTERN FIELD\nDPATTRN  DC    X'4021204B20'       EDIT PATTERN FIELD\nREPLYBUF DS    0CL85               TGET REPLY BUFFER\nREPLYAID DS    CL6                 TGET ATTENTION IDENTIFICATION VALUES\nREPLY    DC    CL79' '             USERS COMMAND INPUT FIELD\nLASTRPLY DC    CL79' '             USERS LAST COMMAND INPUT\nPAD      DC    C' '                PAD CHARACTER FOR MOVEBUFF MVC\nSTAXLIST STAX  ATTNEXIT,MF=L\nBLANKS   DC    CL80' '             CHARACTER STRING OF BLANKS\n         CNOP  0,4\nSVCKEY   DC    C'0000'\nPRMSIZE  DS    H                   PRIMARY SIZE OF TERMINAL\nALTSIZE  DS    H                   ALTERNATE SIZE OF TERMINAL\nSTDSIZE  DC    AL1(24),AL1(80)     STD SIZE OF TERMINAL (24 X 80)\nSASID    DS    F                   SAVE PREVIOUS SECONDARY ASID\nPSCBADDR DS    F                   ADDRESS OF PSCB\nCONASID  EQU   7                   ASID OF 'CONSOLE'\nONE      DC    H'1'                TO SET AX 1\nZERO     DC    H'0'                TO SET AX 0\nPWDWRK   DS    CL8                 PASSWORD WORK\nPROGNAME DC    CL8'CONSOLE'        PROGRAM NAME FOR USER SVC\nCNSLNUM  DC    C'M'                DEFAULT TO MASTER CONSOLE\nUCMTAB   DC    F'0'                NULL FIRST UCM ADDRESS FOR REL 1\n         DC    20F'0'              ROOM FOR 20 UCM ADDRESSES\nUCMTABC  EQU   (*-(UCMTAB+4))/4    NUMBER OF UCM ADDRESSES\nNUMUCMS  DS    H                   NUMBER OF UCM ENTRIES\n         SPACE 5\n***********************************************************************\n*                                                                     *\n*                  DISPLAY SCREEN - HEADER SECTION                    *\n*                                                                     *\n***********************************************************************\nHEADER   EQU   *\nCLEAR    EQU   *\n         DC    X'27F5C3'\nCLEARGTH EQU   *-CLEAR\n         DC    X'114040'           SBA TO ROW 1, COL 1\n         DC    X'1D60'             ATTR BYTE - PROTECTED FIELD\n         DC    X'40'\n***********************************************************************\n*                                                                     *\n*               DISPLAY SCREEN - IMAGE BUFFER SECTION                 *\n*                                                                     *\n***********************************************************************\nBUF      DC    3000C' '            TPUT BUFFER\n***********************************************************************\n*                                                                     *\n*               DISPLAY SCREEN - TRAILER SECTION                      *\n*                                                                     *\n***********************************************************************\nTRAILER  EQU   *\nCMDCTRL  DC    X'115A50'           SBA TO ROW 22, COL 1\n         DC    X'1DE8'             ATTR BYTE - PROTECTD, HIGH INTENSITY\nLASTLINE DS    0CL79               OPERATORS COMMAND INPUT LINE\nLASTOPER DC    CL40' '             LAST OPERATOR INPUT BUFFER\nLASTUSER DC    CL39' '             LAST USER INPUT BUFFER\nPHEADING DC    X'115B60'           SBA TO ROW 23, COL 1\n         DC    X'1DE8'             ATTR BYTE - PROTECTD, HIGH INTENSITY\nHEADING  DC    CL8'CONSOLE '\nCONNUM   DC    CL2'  '             CONSOLE NUMBER\nCTYPE    DC    CL4' '\nMASTER   DC    CL8' '              MASTER CONSOLE\nSYS      DC    CL4' '              SYS  AUTHORIZATION\nIO       DC    CL4' '              I/O  AUTHORIZATION\nCONS     DC    CL5' '              CONS AUTHORIZATION\n         DC    CL3' '\n         DC    CL5'UNIT'\nUNIT     DC    CL4' '              UNIT ADDR OF CONSOLE\nHEADING1 DC    CL7'TIMER: '\nTIME     DC    CL3' '              SECONDS REMAINING ON TIMER\nSLASH    DC    CL1'/'\nPAUSE    DC    CL3'1.0'            DELAY IN SECONDS\n         DC    CL2' '\nHEADING2 DC    CL6'MODE: '\nFREEZE   DC    C'F'                FREEZE/RELEASE MODE\nMODE     DC    CL1' '\n         DC    CL2' '\n         DC    CL5'PAGE '\nPAGE     DC    CL1'2'              PAGE NUMBER\nR24C1    DC    X'115CF0'           SBA TO ROW 24, COL 1\n         DC    X'1D40'             ATTR BYTE - UNPROTECTD, LOW INTENS.\n         DC    X'13'               INSERT CURSOR\nUSERLINE DC    CL13' '             USERS COMMAND INPUT LINE\nERROR    DC    CL66' '             ERROR MSG FIELD\nTRAILEN  EQU   *-TRAILER           LENGTH OF TRAILER\n         SPACE 5\n         LTORG\n         SPACE 5\nERRMSG1  DC    CL26'ERROR - NO MASTER CONSOLE '\nERRMSG2  DC    CL26'ERROR - NON-NUMERIC VALUE '\nERRMSG3  DC    CL26'ERROR - INVALID COMMAND   '\nERRMSG4  DC    CL26'ERROR - NON-CRT CONSOLE   '\nERRMSG5  DC    CL26'ERROR - CONSOLE INACTIVE  '\nERRMSG6  DC    CL26'ERROR - CONSOLE INVALID   '\nERRMSG7  DC    CL26'INVALID CONSOLE TYPE      '\nERRMSG8  DC    CL26'INVALID TSO TERMINAL TYPE '\nERRMSG9  DC    CL26'INVALID TGET COMMAND      '\nERRMSG10 DC    CL26'TERMINAL DISCONNECTED     '\n         SPACE 5\n***********************************************************************\n*                                                                     *\n*                           USER HELP PAGE                            *\n*                                                                     *\n***********************************************************************\nHELP     DC    X'C1'               WCC\n         DC    X'114040'           SBA TO ROW 1, COL 1\n         DC    X'3C404000'         FILL SCREEN WITH NULLS\nR1C01    DC    X'114040',X'1DE8',C'COMMAND     DESCRIPTION'\nR2C01    DC    X'11C150'\nR3C01    DC    X'11C260'\nR4C01    DC    X'11C3F0'\nR5C01    DC    X'11C540',C' DELAYXX    SET DELAY TO XX TENTHS SECONDS'\nR6C01    DC    X'11C650',C' END        END CONSOLE'\nR7C01    DC    X'11C760',C' FREEZE     FREEZE DISPLAY ON CURRENT PAGE'\nR8C01    DC    X'11C8F0',C' RECALL     RECALL LAST COMMAND FOR UPDATE'\nR9C01    DC    X'114A40',C' CONSOLE=NN SWITCH TO CONSOLE NUMBER NN'\nR10C01   DC    X'114B50',C' RELEASE    RELEASE DISPLAY'\nR11C01   DC    X'114C60',C' WAIT       START TIMER MODE FOR 30 SECONDS'\nR12C01   DC    X'114DF0',C' WAITXX     START TIMER MODE FOR XX SECONDS'\nR13C01   DC    X'114F40',C' WAIT0      START UNLIMITED TIMER MODE'\nR14C01   DC    X'115050',C' Z          END CONSOLE'\nR15C01   DC    X'11D160',C' ?          DISPLAY THIS PAGE'\nR16C01   DC    X'11D2F0',C'                          '\nR17C01   DC    X'11D440'\nR18C01   DC    X'11D550',C'HITTING ATTENTION WILL STOP THE WAIT TIMER'\nR19C01   DC    X'11D660'\nR20C01   DC    X'11D7F0',C' PFK 1=HELP    PFK 2=WAIT0    PFK 3=END'\nR21C01   DC    X'11D940',C' PFK 4=$DQ     PFK 5=$DF      PFK 6=$DI'\nR22C01   DC    X'115A50',C' PFK 7=$DA     PFK 8=D A,L    PFK 9=D TS,L'\nR23C01   DC    X'115B60',C' PFK10=RECALL  PFK11=         PFK12=  '\nR24C01   DC    X'115CF0'\n         DC    C'HIT ENTER TO CONTINUE'\n         DC    X'115DC6'           ROW 24, COL 23\n         DC    X'1D40'\n         DC    X'1340'\n         DC    X'1DE8'\nHLENGTH  EQU   *-HELP              LENGTH OF HELP TPUT\n         EJECT\n         CVT   DSECT=YES\n         EJECT\nPDCM     DSECT\n         IEECDCM DEVICE=D\n         EJECT\n         IEECUCM FORMAT=NEW,LIST=YES\n         EJECT\n         IKJPSCB\n         EJECT\n         IKJUPT\n         EJECT\n         IHAASCB\n         IKJTSB LIST=YES,EXT=YES\n         EJECT\n         IKJTCB\n         EJECT\n         IEZJSCB\nCONSOLE  CSECT\n         EJECT\n         DS    0F\nLORDCM   DS    CL4                 LOCAL COPY OF 1ST 4 BYTES OF RDCM\n         DS    0F\nLOCDCM   DS    CL(ENDDCM-STRTDCM)  LOCAL COPY OF PDCM\n         END   CONSOLE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSAT": {"ttr": 2057, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'DSAT COMMAND FOR TSO'\n***********************************************************************\n*                                                                     *\n*        THE TSO DSAT COMMAND IS DESIGNED TO RETURN CATALOG           *\n*        AND/OR ALLOCATION INFORMATION ABOUT A GROUP OF DATASETS      *\n*        DEFINED BY THE INDEXED PASSED TO THE COMMAND.  THE           *\n*        FORMAT OF THE COMMAND IS AS FOLLOWS:                         *\n*                                                                     *\n*        DSAT INDEX LONG/SHORT DAONLY/ALL                             *\n*                                                                     *\n*        WHERE INDEX IS A 1 TO 44 CHARACTER DSNAME OR INDEX TO        *\n*        BE USED IN SEARCHING THE CATALOG FOR A LIST OF NAMES.        *\n*                                                                     *\n*        LONG -  LIST SPACE AND DSATSET ATTRIBUTES FOR EACH           *\n*                DATASET                                              *\n*                                                                     *\n*        SHORT - LIST ONLY VOLUME AND DSNAME FOR EACH DATASET         *\n*                                                                     *\n*        DAONLY - LIST DIRECT ACCESS DATASETS ONLY                    *\n*                                                                     *\n*        ALL    - LIST DIRECT ACCESS AND UNSUPPORTED DEVICE TYPE      *\n*                 DATASETS                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        THE ASSEMBLY VARIABLE &WKSIZE IS USED TO DEFINE THE          *\n*        MAXIMUM WORK AREA SIZE TO BE USED FOR THE GENERIC            *\n*        LOCATE TO AN INDEX LEVEL.  CATALOG MANAGEMENT RETURNS        *\n*        A LIST OF 45 CHARACTER ENTRIES FOR EACH LEVEL WITHIN         *\n*        AN INDEX.  THIS WORK AREA SHOULD BE LARGE ENOUGH TO          *\n*        ACCOMODATE LARGE INDEXES WITHOUT CAUSING AN 80A              *\n*        ABEND OR A PAGING PROBLEM.  NOTE THAT THIS ROUTINE           *\n*        WILL START WITH 16K AND INCREMENT BY 16K UP TO THE           *\n*        MAXIMUM DEFINED BY THIS VARIABLE IN AN ATTEMPT TO            *\n*        GET A LARGE ENOUGH WORK AREA.                                *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LCLC  &WKSIZE\n&WKSIZE  SETC  '500000'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MACROS USED IN THIS PROGRAM                                  *\n*                                                                     *\n*        1)  CAMLST   - SYS1.MACLIB                                   *\n*        2)  CVT      - SYS1.AMODGEN                                  *\n*        3)  FREEMAIN - SYS1.MACLIB                                   *\n*        4)  GETMAIN  - SYS1.MACLIB                                   *\n*        5)  IECSDSL1 - SYS1.AMODGEN                                  *\n*        6)  IEFUCBOB - SYS1.AMODGEN                                  *\n*        7)  IKJENDP  - SYS1.MACLIB                                   *\n*        8)  IKJKEYWD - SYS1.MACLIB                                   *\n*        9)  IKJNAME  - SYS1.MACLIB                                   *\n*        10) IKJPARM  - SYS1.MACLIB                                   *\n*        11) IKJPOSIT - SYS1.MACLIB                                   *\n*        12) IKJPSCB  - SYS1.MACLIB                                   *\n*        13) IKJRLSA  - SYS1.MACLIB                                   *\n*        14) IKJUPT   - SYS1.MACLIB                                   *\n*        15) LINK     - SYS1.MACLIB                                   *\n*        16) OBTAIN   - SYS1.MACLIB                                   *\n*        17) PUTLINE  - SYS1.MACLIB                                   *\n*        18) RETURN   - SYS1.MACLIB                                   *\n*        19) SAVE     - SYS1.MACLIB                                   *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n***********************************************************************\n*                                                                     *\n*        START OF PROGRAM                                             *\n*                                                                     *\n***********************************************************************\nDSAT     CSECT\n         SAVE  (14,12)             SAVE REGISTERS\n         LR    R11,R15             SET FIRST BASE REGISTER\n         LA    R12,4095(R11)       SET SECOND\n         LA    R12,1(,R12)             BASE REGISTER\n         USING DSAT,R11,R12        SET ADDRESSABILITY TO CSECT\n         LR    R2,R1               SAVE CPPL ADDRESS\n         GETMAIN R,LV=LDSA         GET WORK AREA\n         LR    R3,R1               SAVE GETMAIN ADDRESS\n         LR    R14,R3              SET 'TO' ADDRESS FOR MVCL\n         LA    R15,LDSA            SET 'TO' LENGTH\n         SLR   R0,R0               SET 'FROM' ADDRESS\n         LA    R1,0                SET 'FROM' LENGTH\n         ICM   R1,8,=X'00'         SET PAD CHARACTER TO ZEROS\n         MVCL  R14,R0              BLANK ENTIRE GETMAIN AREA\n         ST    R3,8(R13)           SAVE NEW SAVE ADDRESS IN OLD\n         ST    R13,4(R3)           SAVE OLD SAVE ADDRESS IN NEW\n         LR    R13,R3              SET NEW SAVE AREA ADDRESS\n         USING WORKA,R13           SET ADDRESSABILITY TO WORK AREA\n         MVC   CPPL(16),0(R2)      SAVE CPPL\n***********************************************************************\n*        INITIALIZE THE IOPL FOR PUTLINE                              *\n***********************************************************************\n         MVC   IOPL+0(4),CPPLUPT   SAVE UPT ADDRESS IN IOPL\n         MVC   IOPL+4(4),CPPLECT   SAVE ECT ADDRESS IN IOPL\n         LA    R15,ECB             LOAD ADDRESS OF MY ECB\n         ST    R15,IOPL+8          SAVE IN IOPL\n***********************************************************************\n*        INITIALIZE THE PUTLINE CONTROL BLOCKS                        *\n***********************************************************************\n         MVC   PUTLINE(LPUTLINE),PUTLINIT INITIALIZE PUTLINE LIST FORM\n         LA    R15,1               SET NUMBER OF MESSAGE LINES\n         ST    R15,MSGOUT          SAVE IN MSG POINTER LIST\n         LA    R15,MSGLINE         LOAD ADDRESS OF MSG LINE\n         ST    R15,MSGOUT+4        SAVE IN MSG POINTER LIST\n         LA    R15,121             LOAD LENGTH OF MESSAGE LINE\n         STH   R15,MSGLINE         SAVE IN MSG LINE\n         XC    MSGLINE+2(2),MSGLINE+2 ZERO THE OFFSET FIELD\n         MVI   MSGPREF,C' '        BLANK THE MSG PREFIX CHAR\n         MVC   MSG,BLANKS          BLANK THE ACTUAL MESSAGE AREA\n         MVC   MSGDATA,BLANKS      BLANK THE SPECIAL MSG AREA\n         EJECT\n***********************************************************************\n*        EXTRACT TSO ID AND PROFILE PREFIX VALUES                     *\n***********************************************************************\nFINDID   L     R3,CPPLPSCB         LOAD PSCB ADDRESS\n         USING PSCB,R3             SET ADDRESSABILITY TO PSCB\n         MVC   TSOID,PSCBUSER      SAVE LOGONID VALUE\n         DROP  R3                  DROP ADDRESSABILITY TO UPT\n         L     R3,CPPLUPT          LOAD UPT ADDRESS\n         USING UPT,R3              SET ADDRESSABILITY TO UPT\n         MVC   TSOPREF,UPTPREFX    SAVE PROFILE PREFIX VALUE\n         MVC   TSOPREFL,UPTPREFL   SAVE LENGTH OF PREFIX VALUE\n         DROP  R3                  DROP ADDRESSABILITY TO UPT\n         EJECT\n***********************************************************************\n*        PARSE THE INPUT COMMAND                                      *\n***********************************************************************\n         MVC   PPLUPT,CPPLUPT      SET UPT ADDRESS\n         MVC   PPLECT,CPPLECT      SET ECT ADDRESS\n         XC    ECB,ECB             ZERO MY ECT\n         LA    R15,ECB             LOAD ADDRESS OF MY ECB\n         ST    R15,PPLECB          SET MY ECB ADDRESS\n         L     R15,=A(DSATPCL)     LOAD ADDRESS OF PARSE CONTROL LIST\n         ST    R15,PPLPCL          SET PCL ADDRESS\n         XC    PDLPOINT,PDLPOINT   ZERO PDL\n         LA    R15,PDLPOINT        LOAD ADDRESS OF PDL\n         ST    R15,PPLPDL          SET POINTER TO PDL\n         MVC   PPLBUFF,CPPLCBUF    SET COMMAND BUFFER ADDRESS\n         XC    PPLWORK,PPLWORK     ZERO WORK AREA ADDRESS\n         LA    R1,PPL              LOAD ADDRESS OF PPL\n         LINK  EP=IKJPARS          GO TO PARSE\n         LTR   R15,R15             TEST RETURN CODE FROM PARSE\n         BZ    GOODPARS            ZERO, OK BRANCH\n         MVC   MSG,=CL120'RETURN CODE XXXXX FROM PARSE'\n         CVD   R15,DOUBLE          CONVERT RETURN CODE TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN PRINTABLE\n         UNPK  MSG+12(5),DOUBLE+5  UNPACK RETURN CODE INTO MSG\n         BAL   R14,PUTMSG          GO WRITE ERROR MESSAGE\n         B     EXIT\n         EJECT\n***********************************************************************\n*        PROCESS THE DSNAME (IF ANY)                                  *\n***********************************************************************\nGOODPARS L     R2,PDLPOINT         LOAD ADDRESS OF PDL\n         USING DSATPDL,R2          SET ADDRESSABILITY TO PDL\n         MVC   DSN,BLANKS          BLANK THE DSNAME\n         ICM   R3,15,PARSDSN       LOAD POINTER TO DSN\n         BZ    NODSN               ZERO, NONE, USE LOGON ID\n         LA    R4,DSN              LOAD ADDRESS OF DSNAME FIELD\n         TM    PARSDSN+6,X'40'     SEE IF DSNAME WITHIN QUOTES\n         BO    QUOTED              YES, BRANCH\n         CLI   TSOPREFL,0          SEE IF PREFIX LENGTH ZERO\n         BE    QUOTED              YES, BRANCH\n         MVC   DSN(7),TSOPREF      SET PREFIX\nDSNLP    CLI   0(R4),C' '          END OF PREFIX\n         BE    DSNLP1              YES, BRANCH\n         LA    R4,1(,R4)           INCREMENT TO NEXT CHARACTER PREFIX\n         B     DSNLP               LOOP\nDSNLP1   MVI   0(R4),C'.'          SET SEPARATOR\n         LA    R4,1(,R4)           INCREMENT PAST '.'\nQUOTED   LH    R5,PARSDSN+4        LOAD LENGTH OF DSN\n         BCTR  R5,0                MAKE MACHING LENGTH\n         EX    R5,SAVEDSN          SAVE DSNAME FROM PARSE\n         B     CKSHORT             GO CHECK FOR SHORT OPTION\nSAVEDSN  MVC   0(0,R4),0(R3)       **** EXECUTE ONLY ****\nNODSN    MVC   DSN(7),TSOPREF      SET DSN TO PROFILE PREFIX\n         CLI   TSOPREFL,0          SEE IF PREFIX LENGTH ZERO\n         BNE   CKSHORT             NO, GO CHECK FOR SHORT OPTION\n         MVC   DSN(7),TSOID        SET DSN TO TSO ID\n         B     CKSHORT             GO CHECK FOR SHORT OPTION\n         SPACE 3\n***********************************************************************\n*        PROCESS THE LONG/SHORT OPTION                                *\n***********************************************************************\nCKSHORT  CLC   OPT(2),=H'2'        SEE IF SHORT SPECIFIED\n         BNE   CKDAONLY            NO, CHECK FOR DAONLY\n         OI    MISCINFO,SHORT      SET SWITCH\n         SPACE 3\n***********************************************************************\n*        PROCESS THE DAONLY/ALL OPTION                                *\n***********************************************************************\nCKDAONLY CLC   DAOPT(2),=H'2'      SEE IF DAONLY SPECIFIED\n         BNE   PARSEND             NO, END OF PARSE\n         OI    MISCINFO,DAONLY     SET SWITCH\n         SPACE 3\n***********************************************************************\n*        END OF PARSE                                                 *\n***********************************************************************\nPARSEND  LA    R1,PDLPOINT         LOAD ADDRESS OF POINTER TO PDL\n         IKJRLSA (1)               FREE STORAGE USED BY PARSE\n         DROP  R2                  DROP ADDRESSABILITY TO PDL\n         EJECT\n***********************************************************************\n*        GET STORAGE FOR SVC26 WORK AREA                              *\n***********************************************************************\n         GETMAIN R,LV=5120         GET SPECIAL SVC26 WORK AREA\n         ST    R1,SVC26SPC         SAVE WORK AREA ADDRESS\n         LR    R8,R1               SET REGISTER WITH RESULTS AREA\n         USING RESULTS,R8          SET ADDRESSABILITY TO RESULTS AREA\n         MVC   WKSIZE,=F'16384'    SET DEFAULT WORK AREA SIZE TO 16K\n***********************************************************************\n*        INITIALIZE OBTAIN BY NAME CAMLST PARAMETER LIST              *\n***********************************************************************\n         XC    CAMLST2(16),CAMLST2 ZERO CAMLST PARM LIST\n         MVI   CAMLST2,193         SET FLAG BYTE\n         LA    R15,LDSN            LOAD ADDRESS OF DSNAME FIELD\n         ST    R15,CAMLST2+4       SAVE IN PARM LIST2\n         LA    R15,OVOLSER         LOAD ADDRESS OF VOLSER FIELD\n         ST    R15,CAMLST2+8       SAVE IN PARM LIST2\n         LA    R15,DSCB1+44        LOAD ADDRESS OF RETURN AREA\n         ST    R15,CAMLST2+12      SAVE IN PARM LIST2\n***********************************************************************\n*        INITIALIZE OBTAIN BY CCHHR CAMLST PARAMETER LIST             *\n***********************************************************************\n         XC    CAMLST3(16),CAMLST3 ZERO CAMLST PARM LIST\n         MVI   CAMLST3,192         SET FLAG BYTE\n         MVI   CAMLST3+1,128       SET FLAG BYTE\n         LA    R15,CCHHR           LOAD ADDRESS OF SEEK VALUE\n         ST    R15,CAMLST3+4       SAVE IN PARM LIST3\n         LA    R15,OVOLSER         LOAD ADDRESS OF VOLSER FIELD\n         ST    R15,CAMLST3+8       SAVE IN PARM LIST3\n         LA    R15,DSCB3           LOAD ADDRESS OF RETURN AREA\n         ST    R15,CAMLST3+12      SAVE IN PARM LIST3\n***********************************************************************\n*        INITIALIZE REST OF WORK AREAS                                *\n***********************************************************************\n         MVC   PDSN,BLANKS         BLANK PREVIOUS DSNAME FIELD\n         MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE\n         XC    TOTSPACE,TOTSPACE   ZERO THE TOTAL SPACE ALLOCATED\n         XC    TOTUSED,TOTUSED     ZERO THE TOTAL SPACE USED\n         XC    TOTDS,TOTDS         ZERO THE TOTAL DATASET COUNT\n***********************************************************************\n*        PRODUCE PROPER HEADINGS                                      *\n***********************************************************************\n         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND\n         BO    HEAD1               YES, BRANCH\n         MVC   MSG,HEADING1        NO, PRODUCE LONG HEADINGS\n         BAL   R14,PUTMSG          WRITE HEADING LINE\n         B     FINDIT              GO SEE IF INDEX LEVEL\nHEAD1    MVC   MSG,HEADING2        PRODUCE SHORT HEADINGS\n         BAL   R14,PUTMSG          WRITE HEADING LINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CALL SPECIAL SVC 26 FOR THE DSNAME ENTERED.  IF AN           *\n*        ENTRY IS FOUND, THE INFORMATION FOR THAT ENTRY MUST          *\n*        BE FORMATED PRIOR TO CALLING SVC 26 FOR A GENERIC            *\n*        LOCATE FOR ALL ENTRIES WHICH MAY USE THIS NAME AS            *\n*        AN INDEX LEVEL SUCH AS A GDG BASE OR CLUSTER.                *\n*                                                                     *\n***********************************************************************\nFINDIT   DS    0H\n         MVC   LDSN,DSN            SET DSNAME\n         BAL   R14,DSETINFO        GO GET DATASET/GDG INFO\n         CLI   ENTYPE,C' '         SEE IF ANYTHING FOUND\n         BE    CATNDX1             NO, GO DO GENERIC LOCATE\n         OI    MISCINFO,DOGEN      TURN ON NEED GENERIC LOCATE\n         CLI   ENTYPE,C'A'         NONVSAM RECORD\n         BE    NVSAMR              YES, BRANCH\n         CLI   ENTYPE,C'B'         GDG BASE RECORD\n         BE    GDGR                YES, BRANCH\n         CLI   ENTYPE,C'C'         CLUSTER\n         BE    CLUSTRR             YES, BRANCH\n         CLI   ENTYPE,C'R'         PATH RECORD\n         BE    PATHR               YES, BRANCH\n         CLI   ENTYPE,C'V'         VOLUME RECORD\n         BE    VOLUMER             YES, BRANCH\n         CLI   ENTYPE,C'X'         ALIAS RECORD\n         BE    ALIASR              YES, BRANCH\n         CLI   ENTYPE,C'Y'         UPGRADE RECORD\n         BE    UPGRDR              YES, BRANCH\n         CLI   ENTYPE,C'G'         ALTERNATE INDEX RECORD\n         BE    AIXR                YES, BRANCH\n         CLI   ENTYPE,C'D'         VSAM DATASET COMPONENT RECORD\n         BE    VSAMR               YES, BRANCH\n         CLI   ENTYPE,C'I'         VSAM INDEX COMPONENT RECORD\n         BE    VSAMR               YES, BRANCH\n         CLI   ENTYPE,C'M'         MASTER CATALOG RECORD\n         BE    MCATR               YES, BRANCH\n         CLI   ENTYPE,C'P'         PAGE DATA SET RECORD\n         BE    PAGEDSR             YES, BRANCH\n         CLI   ENTYPE,C'U'         USER CATALOG RECORD\n         BE    UCATR               YES, BRANCH\n         EJECT\n***********************************************************************\n*        DO A GENERIC LOCATE FOR THE DSNAME INDEX GIVEN               *\n***********************************************************************\nCATNDX1  NI    MISCINFO,255-DOGEN  TURN OFF NEED GENERIC LOCATE\n         MVC   SVC26DS,DSN         MOVE DSNAME TO SVC26 AREA\n         LA    R1,44               LOAD MAXIMUM LENGTH OF DSN\n         LA    R14,SVC26DS+43      LOAD ADDRESS OF END OF DSN\nCATNDX2  CLI   0(R14),C' '         SEE IF LAST CHAR DSN\n         BNE   CATNDX3             YES, BRANCH\n         BCTR  R14,0               BACK UP DSN POINTER 1 POSITION\n         BCT   R1,CATNDX2          LOOP UNTIL FOUND\nCATNDX3  CH    R1,=H'44'           SEE IF FULL DSN\n         BE    CATNDX4             YES, DO NOT ADD '.'\n         CLI   0(R14),C'.'         IS SEPARATOR ALREADY PROVIDED?\n         BE    CATNDX4             YES, BRANCH\n         MVI   1(R14),C'.'         SET SEPARATOR\n         LA    R1,1(,R1)           ADD 1 TO LENGTH\nCATNDX4  STC   R1,SVC26DSL         SAVE LENGTH OF DSN\n***********************************************************************\n*        INITIALIZE SVC 26 PARAMETER LIST                             *\n***********************************************************************\n***********************************************************************\n*        GET STORAGE FOR SVC26 WORK AREA                              *\n***********************************************************************\nCATNDX5  L     R0,WKSIZE           LOAD WORK AREA SIZE\n         GETMAIN R,LV=(0)          GET SVC26 WORK AREA\n         ST    R1,SVC26WRK         SAVE WORK AREA ADDRESS\n         XC    CTGPL,CTGPL         ZERO PARM LIST\n         MVI   CTGPL,B'00000101'   SET CTGOPTN1\n         MVI   CTGPL+2,B'00010001' SET CTGOPTN3\n         LA    R1,SVC26DSN         LOAD ADDRESS OF DSNAME\n         ST    R1,CTGPL+4          SET CTGENT\n         XC    CTGPL+8(4),CTGPL+8  ZERO CTGCAT\n         L     R1,WKSIZE           LOAD LENGTH OF WORK AREA\n         L     R15,SVC26WRK        LOAD ADDRESS OF SVC26 WORK AREA\n         ST    R1,0(R15)           SAVE LENGTH AT START OF WORK AREA\n         MVC   4(4,R15),=A(8)      SET LENGTH OF WORK AREA AT OFFSET 4\n         ST    R15,CTGPL+12        SET CTGWKA\n         MVI   CTGPL+16,X'04'      SET FOR FORMAT-2 WORK AREA\n         LA    R1,CTGPL            LOAD ADDRESS OF WORK AREA\n         SVC   26                  CALL CATALOG GENERIC SEARCH\n         CH    R15,=H'40'          RETURN CODE = 40?\n         BE    TOOSMLL             YES, WORKAREA TOO SMALL\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ENDDS               NOT ZERO, BRANCH\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FOUND DATA SETS AT THE GIVEN INDEX LEVEL.                    *\n*                                                                     *\n*        THE WORK AREA IS OF THE FOLLOWING FORMAT:                    *\n*                                                                     *\n*        4  BYTE FULL LENGTH OF WORK AREA                             *\n*        4  BYTE USED LENGTH OF WORK AREA                             *\n*        45 BYTE ENTRIES FOR EACH DATASET                             *\n*                                                                     *\n*           THIS FIELD IS IN THE FORMAT OF A 1 BYTE TYPE FIELD        *\n*           FOLLOWED BY THE 44 BYTE DSNAME.                           *\n*                                                                     *\n*           TYPE FIELD                                                *\n*                                                                     *\n*           A - NON-VSAM                                              *\n*           B - GDG BASE                                              *\n*           C - CLUSTER                                               *\n*           D - DATA SET                                              *\n*           G - ALTERNATE INDEX                                       *\n*           I - INDEX                                                 *\n*           M - MASTER CATALOG                                        *\n*           P - PAGE SPACE                                            *\n*           R - PATH                                                  *\n*           U - USER CATALOG                                          *\n*           V - VOLUME                                                *\n*           X - ALIAS NAME                                            *\n*           Y - UPGRADE                                               *\n*                                                                     *\n***********************************************************************\n         L     R4,SVC26WRK         LOAD ADDRESS OF SVC26 WORK AREA\n         L     R14,4(R4)           LOAD LENGTH OF AREA INCLUDING PREFIX\n         SH    R14,=H'8'           SUBTRACT LENGTH OF PREFIX\n         SRDA  R14,32              SHIFT TO ODD REGISTER OF PAIR\n         D     R14,=F'45'          DIVIDE BY LENGTH OF EACH ENTRY\n         LTR   R5,R15              TEST NUMBER OF DSNAMES RETURNED\n         BZ    ENDDS               ZERO, NONE\n         BM    ENDDS               NEGATIVE, ????, NONE\n         LA    R4,8(R4)            POINT TO FIRST DSN\n         EJECT\n***********************************************************************\n*        PROCESS EACH ENTRY TYPE                                      *\n***********************************************************************\nPROCDSN  MVC   LDSN,1(R4)          SET DSNAME FOR LOCATE\n         CLI   0(R4),C'A'          NONVSAM\n         BE    NVSAMR              YES, BRANCH\n         CLI   0(R4),C'C'          CLUSTER\n         BE    CLUSTRR             YES, BRANCH\n         CLI   0(R4),C'B'          GDG BASE RECORD\n         BE    GDGR                YES, BRANCH\n         CLI   0(R4),C'R'          PATH RECORD\n         BE    PATHR               YES, BRANCH\n         CLI   0(R4),C'V'          VOLUME RECORD\n         BE    VOLUMER             YES, BRANCH\n         CLI   0(R4),C'X'          ALIAS RECORD\n         BE    ALIASR              YES, BRANCH\n         CLI   0(R4),C'Y'          UPGRADE RECORD\n         BE    UPGRDR              YES, BRANCH\n         CLI   0(R4),C'G'          ALTERNATE INDEX RECORD\n         BE    AIXR                YES, BRANCH\n         CLI   0(R4),C'M'          MASTER CATALOG\n         BE    MCATR               YES, BRANCH\n         CLI   0(R4),C'U'          USER CATALOG\n         BE    UCATR               YES, BRANCH\n         CLI   0(R4),C'P'          PAGE DATASET\n         BE    PAGEDSR             YES, BRANCH\n         CLI   0(R4),C'D'          DATASET COMPONENT\n         BE    VSAMR               YES, BRANCH\n         CLI   0(R4),C'I'          INDEX COMPONENT\n         BE    VSAMR               YES, BRANCH\n         B     ERRORR              NO, ERROR UNKNOWN TYPE\n         EJECT\n***********************************************************************\n*        END OF PROCESSING FOR THIS DATASET, CHECK FOR OTHER          *\n*        DATASETS.                                                    *\n***********************************************************************\nDSNLOOP  LA    R4,45(,R4)          INCREMENT TO NEXT DSNAME ENTRY\n         BCT   R5,PROCDSN          LOOP UNTIL END OF DSNAMES\n         B     ENDDS               GET OUT\n         EJECT\n***********************************************************************\n*        WORK AREA TOO SMALL                                          *\n***********************************************************************\nTOOSMLL  L     R2,WKSIZE           LOAD SIZE OF WORK AREA\n         AH    R2,=H'16384'        ADD 16K TO THE SIZE\n         C     R2,=F'&WKSIZE'      SEE IF EXCEEDS MAX ALLOWED\n         BH    TOOSMLL1            YES, ISSUE ERROR MESSAGE\n         L     R1,SVC26WRK         LOAD ADDRESS OF WORK AREA\n         L     R0,WKSIZE           LOAD SIZE OF WORK AREA\n         FREEMAIN R,LV=(0),A=(1)   FREE WORK AREA\n         ST    R2,WKSIZE           STORE NEW SIZE OF WORK AREA\n         B     CATNDX5             GO TRY AGAIN\nTOOSMLL1 MVC   MSG(80),=CL80'TOO MANY DATASETS FOR INDEX ENTERED - REENX\n               TER WITH MORE SPECIFIC INDEX'\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         B     EXIT                GET OUT\n         SPACE 3\n***********************************************************************\n*        PRODUCE TOTALS                                               *\n***********************************************************************\nENDDS    L     R15,TOTDS           LOAD NUMBER OF DATASETS PROCESSED\n         LTR   R15,R15             TEST FOR ZERO\n         BNZ   ENDDS1              NOT ZERO, BRANCH\n         MVC   MSG(80),=CL80'DATASET NAME NOT FOUND'\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         B     EXIT                GET OUT\nENDDS1   MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE\n         L     R15,TOTSPACE        LOAD TOTAL TRACKS ALLOCATED\n         CVD   R15,DOUBLE          CONVERT TO PACKED\n         MVC   DBL(6),=X'402020202020' SET EDIT MASK\n         ED    DBL(6),DOUBLE+5     EDIT COUNT TO WORK\n         MVC   OSPALLOC,DBL+1      MOVE COUNT TO MSG\n         L     R15,TOTUSED         LOAD TOTAL TRACKS USED\n         CVD   R15,DOUBLE          CONVERT TO PACKED\n         MVC   DBL(6),=X'402020202020' SET EDIT MASK\n         ED    DBL(6),DOUBLE+5     EDIT COUNT TO WORK\n         MVC   OSPUSED,DBL+1       MOVE COUNT TO MSG\n         L     R15,TOTDS           LOAD DATASET COUNT\n         CVD   R15,DOUBLE          CONVERT TO PACKED\n         MVC   DBL(6),=X'402020202120' SET EDIT MASK\n         ED    DBL(6),DOUBLE+5     EDIT COUNT TO WORK\n         MVC   ODSN-1(5),DBL+1     MOVE COUNT TO MSG\n         MVC   ODSN+5(20),=CL20'DATA SETS DISPLAYED'\n         MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         B     EXIT                GET OUT\n         EJECT\n***********************************************************************\n*        GDG BASE ENTRY                                               *\n***********************************************************************\nGDGR     MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE\n         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?\n         BO    GDGR1               NO, BRANCH\n         BAL   R14,DSETINFO        GO GET SPECIAL CATALOG INFO\n***********************************************************************\n*        ISSUE SHORT FORM OF GDG DETAIL                               *\n***********************************************************************\nGDGR1    TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND\n         BZ    GDGR2               NO, BRANCH\n         MVC   OSMSG(20),=CL20'GDG BASE ENTRY' SET TYPE IN MESSAGE\n         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE\n         B     GDGR5               GO WRITE MESSAGE\n***********************************************************************\n*        ISSUE LONG FORM OF GDG DETAIL                                *\n***********************************************************************\nGDGR2    MVC   OMSG(20),=CL20'GDG BASE ENTRY' SET TYPE IN MESSAGE\n         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE\n         MVC   OGDGLIM(4),=C'LIM('   SET LIMIT TITLE\n         SLR   R1,R1               CLEAR REG FOR IC\n         IC    R1,GDGLIMIT         LOAD LIMIT VALUE\n         CVD   R1,DOUBLE           CONVERT TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN PRINTABLE\n         UNPK  OGDGLIM+4(3),DOUBLE+6(2)  UNPACK LIMIT VALUE\n         MVI   OGDGLIM+7,C')'      SET CLOSING PARENS\n         MVC   OGDGEMP,=C'EMPTY'   ASSUME EMPTY OPTION\n         TM    GDGATTR,GDGEMP      TEST BIT\n         BO    GDGR3               YES, BRANCH\n         MVC   OGDGEMP,=C'NOEMP'   SET TO NOEMPTY OPTION\nGDGR3    MVC   OGDGSCR,=C'SCR  '   ASSUME SCRATCH OPTION\n         TM    GDGATTR,GDGSCR      TEST BIT\n         BO    GDGR4               YES, BRANCH\n         MVC   OGDGSCR,=C'NOSCR'   SET TO NOSCRATCH OPTION\nGDGR4    MVC   PJDATE,DSETCRDT     MOVE CREATION DATE TO PJDATE\n         L     R15,=V(DATERTN)     LOAD ADDRESS OF DATE CONVERT ROUTINE\n         BALR  R14,R15             GO CONVERT JULIAN TO CALENDAR DATE\n         MVC   OCRTDT,CALDATE      MOVE CREATION DATE TO MSG\n***********************************************************************\n*        WRITE GDG DETAIL LINE                                        *\n***********************************************************************\nGDGR5    MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         L     R15,TOTDS           LOAD NUMBER OF DSNAMES\n         LA    R15,1(R15)          ADD 1 TO COUNT\n         ST    R15,TOTDS           SAVE NUMBER OF DATASETS\n         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?\n         BO    CATNDX1             NO, GO DO IT\n         B     DSNLOOP             YES, GO PROCESS NEXT DSN\n         EJECT\n***********************************************************************\n*        CLUSTER ENTRY                                                *\n***********************************************************************\nCLUSTRR  MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE\n***********************************************************************\n*        ISSUE SHORT FORM OF CLUSTER DETAIL                           *\n***********************************************************************\n         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND\n         BZ    CLUSTRR1            NO, BRANCH\n         MVC   OSMSG(20),=CL20'CLUSTER' SET TYPE IN MESSAGE\n         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE\n         B     CLUSTRR2            GO WRITE MESSAGE\n***********************************************************************\n*        ISSUE LONG FORM OF CLUSTER DETAIL                            *\n***********************************************************************\nCLUSTRR1 MVC   OMSG(20),=CL20'CLUSTER' SET TYPE IN MESSAGE\n         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE\n***********************************************************************\n*        WRITE CLUSTER DETAIL LINE                                    *\n***********************************************************************\nCLUSTRR2 MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         L     R15,TOTDS           LOAD NUMBER OF DSNAMES\n         LA    R15,1(R15)          ADD 1 TO COUNT\n         ST    R15,TOTDS           SAVE NUMBER OF DATASETS\n         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?\n         BO    CATNDX1             NO, GO DO IT\n         B     DSNLOOP             YES, GO PROCESS NEXT DSN\n         EJECT\n***********************************************************************\n*        PATH ENTRY                                                   *\n***********************************************************************\nPATHR    MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE\n***********************************************************************\n*        ISSUE SHORT FORM OF PATH DETAIL                              *\n***********************************************************************\n         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND\n         BZ    PATHR1              NO, BRANCH\n         MVC   OSMSG(20),=CL20'PATH ENTRY' SET TYPE IN MESSAGE\n         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE\n         B     PATHR2              GO WRITE MESSAGE\n***********************************************************************\n*        ISSUE LONG FORM OF PATH DETAIL                               *\n***********************************************************************\nPATHR1   MVC   OMSG(20),=CL20'PATH ENTRY' SET TYPE IN MESSAGE\n         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE\n***********************************************************************\n*        WRITE PATH DETAIL LINE                                       *\n***********************************************************************\nPATHR2   MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         L     R15,TOTDS           LOAD NUMBER OF DSNAMES\n         LA    R15,1(R15)          ADD 1 TO COUNT\n         ST    R15,TOTDS           SAVE NUMBER OF DATASETS\n         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?\n         BO    CATNDX1             NO, GO DO IT\n         B     DSNLOOP             YES, GO PROCESS NEXT DSN\n         EJECT\n***********************************************************************\n*        VOLUME ENTRY                                                 *\n***********************************************************************\nVOLUMER  MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE\n***********************************************************************\n*        ISSUE SHORT FORM OF VOLUME DETAIL                            *\n***********************************************************************\n         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND\n         BZ    VOLUMER1            NO, BRANCH\n         MVC   OSMSG(20),=CL20'VOLUME ENTRY' SET TYPE IN MESSAGE\n         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE\n         B     VOLUMER2            GO WRITE MESSAGE\n***********************************************************************\n*        ISSUE LONG FORM OF VOLUME DETAIL                             *\n***********************************************************************\nVOLUMER1 MVC   OMSG(20),=CL20'VOLUME ENTRY' SET TYPE IN MESSAGE\n         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE\n***********************************************************************\n*        WRITE VOLUME DETAIL LINE                                     *\n***********************************************************************\nVOLUMER2 MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         L     R15,TOTDS           LOAD NUMBER OF DSNAMES\n         LA    R15,1(R15)          ADD 1 TO COUNT\n         ST    R15,TOTDS           SAVE NUMBER OF DATASETS\n         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?\n         BO    CATNDX1             NO, GO DO IT\n         B     DSNLOOP             YES, GO PROCESS NEXT DSN\n         EJECT\n***********************************************************************\n*        ALIAS ENTRY                                                  *\n***********************************************************************\nALIASR   MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE\n***********************************************************************\n*        ISSUE SHORT FORM OF ALIAS DETAIL                             *\n***********************************************************************\n         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND\n         BZ    ALIASR1             NO, BRANCH\n         MVC   OSMSG(20),=CL20'ALIAS ENTRY' SET TYPE IN MESSAGE\n         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE\n         B     ALIASR2             GO WRITE MESSAGE\n***********************************************************************\n*        ISSUE LONG FORM OF ALIAS DETAIL                              *\n***********************************************************************\nALIASR1  MVC   OMSG(20),=CL20'ALIAS ENTRY' SET TYPE IN MESSAGE\n         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE\n***********************************************************************\n*        WRITE ALIAS DETAIL LINE                                      *\n***********************************************************************\nALIASR2  MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         L     R15,TOTDS           LOAD NUMBER OF DSNAMES\n         LA    R15,1(R15)          ADD 1 TO COUNT\n         ST    R15,TOTDS           SAVE NUMBER OF DATASETS\n         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?\n         BO    CATNDX1             NO, GO DO IT\n         B     DSNLOOP             YES, GO PROCESS NEXT DSN\n         EJECT\n***********************************************************************\n*        UPGRADE ENTRY                                                *\n***********************************************************************\nUPGRDR   MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE\n***********************************************************************\n*        ISSUE SHORT FORM OF UPGRADE DETAIL                           *\n***********************************************************************\n         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND\n         BZ    UPGRDR1             NO, BRANCH\n         MVC   OSMSG(20),=CL20'UPGRADE ENTRY' SET TYPE IN MESSAGE\n         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE\n         B     UPGRDR2             GO WRITE MESSAGE\n***********************************************************************\n*        ISSUE LONG FORM OF UPGRADE DETAIL                            *\n***********************************************************************\nUPGRDR1  MVC   OMSG(20),=CL20'UPGRADE ENTRY' SET TYPE IN MESSAGE\n         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE\n***********************************************************************\n*        WRITE UPGRADE DETAIL LINE                                    *\n***********************************************************************\nUPGRDR2  MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         L     R15,TOTDS           LOAD NUMBER OF DSNAMES\n         LA    R15,1(R15)          ADD 1 TO COUNT\n         ST    R15,TOTDS           SAVE NUMBER OF DATASETS\n         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?\n         BO    CATNDX1             NO, GO DO IT\n         B     DSNLOOP             YES, GO PROCESS NEXT DSN\n         EJECT\n***********************************************************************\n*        ALTERNATE INDEX ENTRY                                        *\n***********************************************************************\nAIXR     MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE\n         BAL   R14,DSETINFO        GO GET DATASET/GDG INFO\n         CLI   ENTYPE,C' '         SEE IF ENTRY FOUND\n         BE    AIXR1               NO, BRANCH\n***********************************************************************\n*        ISSUE SHORT FORM OF ALTERNATE INDEX DETAIL                   *\n***********************************************************************\nAIXR1    TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND\n         BZ    AIXR3               NO, BRANCH\n         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST\n         BE    AIXR4               YES, JUST GO WRITE MESSAGE\n         MVC   OSMSG(20),=CL20'ALTERNATE INDEX' SET TYPE IN MESSAGE\n         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE\n         MVC   PDSN,LDSN           SAVE CURRENT DSNAME\n         B     AIXR4               GO WRITE MESSAGE\n***********************************************************************\n*        ISSUE LONG FORM OF ALTERNATE INDEX DETAIL                    *\n***********************************************************************\nAIXR3    MVC   OMSG(20),=CL20'ALTERNATE INDEX' SET TYPE IN MESSAGE\n         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE\n         MVC   PDSN,LDSN           SAVE CURRENT DSNAME\n***********************************************************************\n*        WRITE ALTERNATE INDEX DETAIL LINE                            *\n***********************************************************************\nAIXR4    MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         L     R15,TOTDS           LOAD NUMBER OF DSNAMES\n         LA    R15,1(R15)          ADD 1 TO COUNT\n         ST    R15,TOTDS           SAVE NUMBER OF DATASETS\n         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?\n         BO    CATNDX1             NO, GO DO IT\n         B     DSNLOOP             YES, GO PROCESS NEXT DSN\n         EJECT\n***********************************************************************\n*        MASTER CATALOG ENTRY                                         *\n***********************************************************************\nMCATR    MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE\n         BAL   R14,DSETINFO        GO GET DATASET/GDG INFO\n         CLI   ENTYPE,C' '         SEE IF ENTRY FOUND\n         BE    MCATR1              NO, BRANCH\n         LH    R2,NBRVOLS          LOAD NUMBER OF VOLUMES\n         BNZ   VSAMR01             NOT ZERO, TREAT LIKE VSAM\n***********************************************************************\n*        ISSUE SHORT FORM OF MASTER CATALOG DETAIL                    *\n***********************************************************************\nMCATR1   TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND\n         BZ    MCATR3              NO, BRANCH\n         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST\n         BE    MCATR4              YES, JUST GO WRITE MESSAGE\n         MVC   OSMSG(20),=CL20'MASTER CATALOG' SET TYPE IN MESSAGE\n         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE\n         MVC   PDSN,LDSN           SAVE CURRENT DSNAME\n         B     MCATR4              GO WRITE MESSAGE\n***********************************************************************\n*        ISSUE LONG FORM OF MASTER CATALOG DETAIL                     *\n***********************************************************************\nMCATR3   MVC   OMSG(20),=CL20'MASTER CATALOG' SET TYPE IN MESSAGE\n         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE\n         MVC   PDSN,LDSN           SAVE CURRENT DSNAME\n***********************************************************************\n*        WRITE MASTER CATALOG DETAIL LINE                             *\n***********************************************************************\nMCATR4   MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         L     R15,TOTDS           LOAD NUMBER OF DSNAMES\n         LA    R15,1(R15)          ADD 1 TO COUNT\n         ST    R15,TOTDS           SAVE NUMBER OF DATASETS\n         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?\n         BO    CATNDX1             NO, GO DO IT\n         B     DSNLOOP             YES, GO PROCESS NEXT DSN\n         EJECT\n***********************************************************************\n*        USER CATALOG ENTRY                                           *\n***********************************************************************\nUCATR    MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE\n         BAL   R14,DSETINFO        GO GET DATASET/GDG INFO\n         CLI   ENTYPE,C' '         SEE IF ENTRY FOUND\n         BE    UCATR1              NO, BRANCH\n         LH    R2,NBRVOLS          LOAD NUMBER OF VOLUMES\n         BNZ   VSAMR01             NOT ZERO, TREAT LIKE VSAM\n***********************************************************************\n*        ISSUE SHORT FORM OF USER CATALOG DETAIL                      *\n***********************************************************************\nUCATR1   TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND\n         BZ    UCATR3              NO, BRANCH\n         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST\n         BE    UCATR4              YES, JUST GO WRITE MESSAGE\n         MVC   OSMSG(20),=CL20'USER CATALOG' SET TYPE IN MESSAGE\n         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE\n         MVC   PDSN,LDSN           SAVE CURRENT DSNAME\n         B     UCATR4              GO WRITE MESSAGE\n***********************************************************************\n*        ISSUE LONG FORM OF USER CATALOG DETAIL                       *\n***********************************************************************\nUCATR3   MVC   OMSG(20),=CL20'USER CATALOG' SET TYPE IN MESSAGE\n         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE\n         MVC   PDSN,LDSN           SAVE CURRENT DSNAME\n***********************************************************************\n*        WRITE USER CATALOG DETAIL LINE                               *\n***********************************************************************\nUCATR4   MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         L     R15,TOTDS           LOAD NUMBER OF DSNAMES\n         LA    R15,1(R15)          ADD 1 TO COUNT\n         ST    R15,TOTDS           SAVE NUMBER OF DATASETS\n         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?\n         BO    CATNDX1             NO, GO DO IT\n         B     DSNLOOP             YES, GO PROCESS NEXT DSN\n         EJECT\n***********************************************************************\n*        PAGE DATASET ENTRY                                           *\n***********************************************************************\nPAGEDSR  MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE\n         BAL   R14,DSETINFO        GO GET DATASET/GDG INFO\n         CLI   ENTYPE,C' '         SEE IF ENTRY FOUND\n         BE    PAGEDSR1            NO, BRANCH\n         LH    R2,NBRVOLS          LOAD NUMBER OF VOLUMES\n         BNZ   VSAMR01             NOT ZERO, TREAT LIKE VSAM\n***********************************************************************\n*        ISSUE SHORT FORM OF PAGE DATASET DETAIL                      *\n***********************************************************************\nPAGEDSR1 TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND\n         BZ    PAGEDSR3            NO, BRANCH\n         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST\n         BE    PAGEDSR4            YES, JUST GO WRITE MESSAGE\n         MVC   OSMSG(20),=CL20'PAGE DATASET' SET TYPE IN MESSAGE\n         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE\n         MVC   PDSN,LDSN           SAVE CURRENT DSNAME\n         B     PAGEDSR4            GO WRITE MESSAGE\n***********************************************************************\n*        ISSUE LONG FORM OF PAGE DATASET DETAIL                       *\n***********************************************************************\nPAGEDSR3 MVC   OMSG(20),=CL20'PAGE DATASET' SET TYPE IN MESSAGE\n         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE\n         MVC   PDSN,LDSN           SAVE CURRENT DSNAME\n***********************************************************************\n*        WRITE PAGE DATASET DETAIL LINE                               *\n***********************************************************************\nPAGEDSR4 MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         L     R15,TOTDS           LOAD NUMBER OF DSNAMES\n         LA    R15,1(R15)          ADD 1 TO COUNT\n         ST    R15,TOTDS           SAVE NUMBER OF DATASETS\n         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?\n         BO    CATNDX1             NO, GO DO IT\n         B     DSNLOOP             YES, GO PROCESS NEXT DSN\n         EJECT\n***********************************************************************\n*         UNKNOWN CATALOG ENTRY TYPE                                  *\n***********************************************************************\nERRORR   MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE\n***********************************************************************\n*        ISSUE SHORT FORM OF ERROR MESSAGE                            *\n***********************************************************************\n         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND\n         BZ    ERRORR1             NO, BRANCH\n         MVC   OSMSG(20),=CL20'UNKNOWN TYPE      ' SET ERROR MESSAGE\n         MVC   OSMSG+13(1),0(R4)   SET TYPE IN MESSAGE\n         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE\n         B     ERRORR2             GO WRITE MESSAGE\n***********************************************************************\n*        ISSUE LONG FORM OF ERROR MESSAGE                             *\n***********************************************************************\nERRORR1  MVC   OMSG(20),=CL20'UNKNOWN TYPE      ' SET ERROR MESSAGE\n         MVC   OMSG+13(1),0(R4)    SET TYPE IN MESSAGE\n         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE\n***********************************************************************\n*        WRITE ERROR MESSAGE DETAIL LINE                              *\n***********************************************************************\nERRORR2  MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         L     R15,TOTDS           LOAD NUMBER OF DSNAMES\n         LA    R15,1(R15)          ADD 1 TO COUNT\n         ST    R15,TOTDS           SAVE NUMBER OF DATASETS\n         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?\n         BO    CATNDX1             NO, GO DO IT\n         B     DSNLOOP             YES, GO PROCESS NEXT DSN\n         EJECT\n***********************************************************************\n*        READ CATALOG FOR UNIT TYPE AND VOLSER                        *\n***********************************************************************\nNVSAMR   MVC   DETAIL,BLANKS       BLANK DETAIL LINE\n         BAL   R14,DSETINFO        GO GET DATASET/GDG INFO\n         CLI   ENTYPE,C'A'         SEE IF NONVSAM FOUND\n         BNE   NVSAMR30            NO, CONSIDER NOT FOUND\n         LA    R6,VOLSER           POINT TO FIRST VOLUME ENTRY\n         USING VOLSER,R6           SET ADDRESSABILITY TO VOLUME ENTRY\n         LH    R7,NBRVOLS          LOAD NUMBER OF VOLUMES IN LIST\n         LTR   R7,R7               TEST FOR ZERO\n         BZ    NVSAMR30            SAME AS NOT FOUND, BRANCH\n***********************************************************************\n*        PROCESS THE VOLSER LIST                                      *\n***********************************************************************\nNVSAMR01 CLC   VOLSER,=C'******'   SEE IF SPECIAL SYSRES VOLSER\n         BNE   NVSAMR0Y            NO, BRANCH\n         CLI   SYSVOL,C' '         SEE IF SYSRES VOLUME HAS BEEN DETERM\n         BH    NVSAMR0X            YES, BRANCH\n         BAL   R14,UCBLOOK         NO, GO GET SYSRES VOLSER\nNVSAMR0X MVC   VOLSER,SYSVOL       SET VOLSER TO SYSRES VOLSER\n         MVC   DEVTYP,SYSTYP       SET DEVICE TYPE TO SYSRES DEV TYPE\nNVSAMR0Y TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND\n         BO    NVSAMR02            YES, BRANCH\n         TM    DEVTYP+2,X'20'      IS THIS DIRECT ACCESS?\n         BNO   NVSAMR27            NO, BRANCH\n         SLR   R1,R1               ZERO REG FOR IC\n         IC    R1,DEVTYP+3         LOAD UNIT TYPE DEVICE CODE FIELD\n         IC    R1,TRKSCYL(R1)      LOAD TRKS PER CYLINDER FROM TABLE\n         STH   R1,TRKCYL           SAVE TRACKS PER CYLINDER\n***********************************************************************\n*        READ FORMAT 1 DSCB FOR VOLUME                                *\n***********************************************************************\n         MVC   OVOLSER,VOLSER      SET VOLSER FOR OBTAIN\n         OBTAIN CAMLST2            READ FORMAT 1 DSCB\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   NVSAMR24            NOT ZERO, FAILED\n         B     NVSAMR04            GO FORMAT LONG PRINT LINE\n         EJECT\n***********************************************************************\n*        FORMAT SHORT PRINT LINE                                      *\n***********************************************************************\nNVSAMR02 TM    DEVTYP+2,X'20'      IS THIS DIRECT ACCESS?\n         BO    NVSAMR03            YES, BRANCH\n         TM    MISCINFO,DAONLY     SEE IF DASD ONLY REQUESTED\n         BZ    NVSAMR03            NO, CONTINUE\n         MVC   DETAIL,BLANKS       BLANK DETAIL LINE\n         MVC   PDSN,LDSN           SAVE CURRENT DSNAME\n         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?\n         BO    CATNDX1             NO, GO DO IT\n         B     DSNLOOP             YES, GO PROCESS NEXT DSN\nNVSAMR03 MVC   OVOL,VOLSER         MOVE VOLSER TO MESSAGE\n         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST\n         BE    NVSAMR22            YES, DO NOT SET DSNAME IN DETAIL\n         MVC   OSHORTDS,LDSN       NO, SET DSNAME IN DETAIL LINE\n         B     NVSAMR22            GO WRITE DETAIL LINE\n         EJECT\n***********************************************************************\n*        FORMAT LONG PRINT LINE                                       *\n***********************************************************************\n***********************************************************************\n*        VOLSER                                                       *\n***********************************************************************\nNVSAMR04 MVC   OVOL,VOLSER         MOVE VOLSER TO MESSAGE\n***********************************************************************\n*        SPACE ALLOCATED                                              *\n***********************************************************************\nNVSAMR05 XC    SPALLOC,SPALLOC     ZERO SPACE ALLOCATED\n         SLR   R15,R15             CLEAR REG FOR ICM\n         ICM   R15,1,DS1NOEPV      LOAD NUMBER OF EXTENTS\n         BZ    NVSAMR08            ZERO, NO EXTENTS\n         STH   R15,EXTLEFT         SAVE EXTENTS LEFT\n         CH    R15,=H'3'           SEE IF MORE THAN THREE EXTENTS\n         BNH   NVSAMR06            NO, BRANCH\n         LA    R15,3               SET NUMBER OF EXTENTS TO THREE\nNVSAMR06 LA    R1,DS1EXT1          LOAD START OF EXTENTS\n         BAL   R14,EXTCALC         CALL CALCULATION ROUTINE\n         STH   R15,SPALLOC         SAVE NUMBER OF TRACKS\n         LH    R15,EXTLEFT         LOAD NUMBER OF EXTENTS LEFT\n         SH    R15,=H'3'           SUBTRACT NUMBER IN FMT1\n         BNP   NVSAMR08            NONE LEFT, BRANCH\n         STH   R15,EXTLEFT         SAVE EXTENTS LEFT\n         CLC   DS1PTRDS,=10X'00'   SEE IF POINTER TO FMT3\n         BE    NVSAMR08            NO, ????, END OF SPACE\n         MVC   CCHHR,DS1PTRDS      SET SEEK ADDRESS\nNVSAMR07 OBTAIN CAMLST3            READ FORMAT3 DSCB\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   NVSAMR08            IGNORE ERROR AND USE SPACE FROM FMT1\n         LA    R15,4               SET NUMBER OF EXTENTS TO FOUR\n         LA    R1,DS3EXTNT         LOAD START OF FIRST GROUP OF EXTENTS\n         BAL   R14,EXTCALC         CALL CALCULATION ROUTINE\n         LH    R1,SPALLOC          LOAD SPACE ACUMMULATOR\n         AR    R1,R15              ADD NUMBER OF TRACKS IN EXTENT GROUP\n         STH   R1,SPALLOC          SAVE NEW SPACE ACCUMULATOR\n         LA    R15,9               SET NUMBER OF EXTENTS TO NINE\n         LA    R1,DS3ADEXT         LOAD START OF SECOND GRP OF EXTENTS\n         BAL   R14,EXTCALC         CALL CALCULATION ROUTINE\n         LH    R1,SPALLOC          LOAD SPACE ACUMMULATOR\n         AR    R1,R15              ADD NUMBER OF TRACKS IN EXTENT GROUP\n         STH   R1,SPALLOC          SAVE NEW SPACE ACCUMULATOR\n         LH    R15,EXTLEFT         LOAD NUMBER OF EXTENTS LEFT\n         SH    R15,=H'13'          SUBTRACT NUMBER IN FMT3\n         BNP   NVSAMR08            NONE LEFT, BRANCH\n         STH   R15,EXTLEFT         SAVE NEW NUMBER OF EXTENTS\n         CLC   DS3PTRDS,=10X'00'   SEE IF POINTER TO FMT3\n         BE    NVSAMR08            NO, ????, END OF SPACE\n         MVC   CCHHR,DS3PTRDS      SET SEEK ADDRESS\n         B     NVSAMR07            GO GET ANOTHER FMT3\nNVSAMR08 L     R15,TOTSPACE        LOAD TOTAL SPACE ALLOC ACCUMULATOR\n         AH    R15,SPALLOC         ADD SPACE ALLOCATED TO THIS DATASET\n         ST    R15,TOTSPACE        SAVE UPDATED TOTAL SPACE ALLOCATED\n         LH    R15,SPALLOC         LOAD SPACE ALLOCATED FOR DATA SET\n         CVD   R15,DOUBLE          CONVERT TO PACKED\n         MVC   DBL(6),=X'402020202120' SET EDIT MASK\n         ED    DBL(6),DOUBLE+5     EDIT SPACE ALLOCATED TO WORK\n         MVC   OSPALLOC,DBL+1      MOVE SPACE ALLOCATED VALUE TO MSG\n***********************************************************************\n*                                                                     *\n*        SPACE USED                                                   *\n*                                                                     *\n*        THIS FIGURE IS CALCULATED FROM THE DS1LSTAR FIELD            *\n*        WHERE THE FORMAT IS AS FOLLOWS:                              *\n*                                                                     *\n*        TTTTRR - TTTT IS THE RELATIVE ADDRESS OF THE LAST USED       *\n*                      TRACK IN THE DATA SET                          *\n*               - RR   IS THE LAST USED RECORD ON THE LAST USED       *\n*                      TRACK IN THE DATASET                           *\n*        IF RR IS NOT EQUAL TO ZERO, THEN AN ADDITIONAL TRACK WILL    *\n*        BE ADDED TO TTTT TO ACCOUNT FOR THE PARTIAL TRACK.           *\n*                                                                     *\n***********************************************************************\nNVSAMR09 LH    R1,DS1LSTAR         LOAD DS1LSTAR REL TRACK NUMBER\n         ICM   R14,1,DS1LSTAR+2    TEST 'RR' VALUE\n         BZ    NVSAMR10            ZERO, BRANCH\n         LA    R1,1(,R1)           ADD TO TO REL TRACK NUMBER\nNVSAMR10 L     R15,TOTUSED         LOAD TOTAL SPACE USED ACCUMULATOR\n         AR    R15,R1              ADD SPACE USED BY THIS DATASET\n         ST    R15,TOTUSED         SAVE UPDATED TOTAL SPACE USED\n         CVD   R1,DOUBLE           CONVERT TRACKS USED TO PACKED\n         MVC   DBL(6),=X'402020202120' SET EDIT MASK\n         ED    DBL(6),DOUBLE+5     EDIT SPACE USED TO WORK\n         MVC   OSPUSED,DBL+1       MOVE SPACE USED VALUE TO MSG\n***********************************************************************\n*        NUMBER OF EXTENTS                                            *\n***********************************************************************\nNVSAMR11 SLR   R15,R15             CLEAR REG FOR IC\n         IC    R15,DS1NOEPV        LOAD NUMBER OF EXTENTS\n         CVD   R15,DOUBLE          CONVERT NBR OF EXTENTS TO PACKED\n         MVC   DBL(4),=X'40202120' SET EDIT MASK\n         ED    DBL(4),DOUBLE+6     EDIT NBR OF EXTENTS TO WORK\n         MVC   OEXTENT,DBL+1       MOVE EXTENT NUMBER TO MSG\n***********************************************************************\n*        DO NOT FORMAT ANY OTHER OF THE DETAILED INFORMATION          *\n*        UNLESS THE DSNAME HAS CHANGED.  HOPEFULLY THE DETAILED       *\n*        INFORMATION IS IDENTICAL FOR MULTIVOLUME DATASETS.           *\n***********************************************************************\n         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST\n         BE    NVSAMR22            YES, BRANCH\n***********************************************************************\n*        DSORG                                                        *\n***********************************************************************\nNVSAMR12 MVC   ODSORG,=C'IS'       SET TO ISAM ORGANIZATION\n         TM    DS1DSORG+1,X'80'    IS IT IS\n         BO    NVSAMR13            YES, BRANCH\n         MVC   ODSORG,=C'PS'       SET TO PHYSICAL SEQUENTIAL\n         TM    DS1DSORG,X'40'      IS IT PS\n         BO    NVSAMR13            YES, BRANCH\n         MVC   ODSORG,=C'DA'       SET TO DIRECT ACCESS\n         TM    DS1DSORG,X'20'      IS IT DA\n         BO    NVSAMR13            YES, BRANCH\n         MVC   ODSORG,=C'PO'       SET TO PARTITIONED ORGANIZATION\n         TM    DS1DSORG,X'02'      IS IT PO\n         BO    NVSAMR13            YES, BRANCH\n         MVC   ODSORG,=C'VS'       SET TO VSAM ORGANIZATION\n         TM    DS1DSORG+1,X'08'    IS IT VS\n         BO    NVSAMR13            YES, BRANCH\n         MVC   ODSORG,BLANKS       SET DSORG TO BLANKS\nNVSAMR13 TM    DS1DSORG,X'01'      IS DATASET UNMOVEABLE\n         BZ    NVSAMR14            NO, BRANCH\n         MVI   ODSORG+2,C'U'       SET UNMOVEABLE INDICATOR\n         EJECT\n***********************************************************************\n*        RECFM                                                        *\n***********************************************************************\nNVSAMR14 CLC   ODSORG,=C'VS'       IS THIS A VSAM DATASET\n         BE    NVSAMR20            YES, DCB STUFF INCORRECT\n         LA    R15,ORECFM          LOAD ADDR OF DETAIL RECFM FIELD\n         CLI   DS1RECFM,X'00'      SEE IF RECFM SPECIFIED\n         BE    NVSAMR18            IF NOT SPECIFIED, EXIT\n         MVI   0(R15),C'U'         ASSUME UNDEFINED\n         TM    DS1RECFM,B'11000000' TEST RECFM=U\n         BO    NVSAMR18            IF RECFM=U, EXIT\n         MVI   0(R15),C'F'         ASSUME FIXED\n         TM    DS1RECFM,B'10000000' TEST RECFM=F\n         BO    NVSAMR15            IF RECFM=F, BRANCH\n         MVI   0(R15),C'V'         IF NOT RECFM=F, THEN RECFM=V\nNVSAMR15 LA    R15,1(R15)          INCREMENT TO NEXT OUTPUT BYTE\n         TM    DS1RECFM,B'00010000' TEST RECFM=B\n         BNO   NVSAMR16            IF NOT BLOCKED, BRANCH\n         MVI   0(R15),C'B'         SET DETAIL TO BLOCKED\n         LA    R15,1(R15)          INCREMENT TO NEXT OUTPUT BYTE\nNVSAMR16 TM    DS1RECFM,B'00001000' TEST RECFM=S\n         BNO   NVSAMR17            IF NOT RECFM=S, BRANCH\n         MVI   0(R15),C'S'         MOVE RECFM=S TO DETAIL\n         LA    R15,1(R15)          INCREMENT TO NEXT OUTPUT BYTE\nNVSAMR17 TM    DS1RECFM,B'00000110' SEE IF PRINT CONTROL\n         BZ    NVSAMR18            IF NOT PRINT CONTROL, EXIT\n         MVI   0(R15),C'A'         ASSUME ASA CONTROL\n         TM    DS1RECFM,B'00000100' TEST FOR ASA CONTROL\n         BO    NVSAMR18            IF ASA CONTROL, EXIT\n         MVI   0(R15),C'M'         IF NOT ASA, THEN MUST BE MACHINE CTL\n***********************************************************************\n*        BLKSIZE                                                      *\n***********************************************************************\nNVSAMR18 LH    R15,DS1BLKL         LOAD BLOCK SIZE\n         CVD   R15,DOUBLE          CONVERT TO PACKED\n         MVC   DBL(6),=X'402020202020' SET EDIT MASK\n         ED    DBL(6),DOUBLE+5     EDIT BLKSIZE TO WORK\n         MVC   OBLKSIZE,DBL+1      MOVE BLKSIZE TO MSG\n***********************************************************************\n*        LRECL                                                        *\n***********************************************************************\nNVSAMR19 LH    R15,DS1LRECL        LOAD LOGICAL RECORD SIZE\n         CVD   R15,DOUBLE          CONVERT TO PACKED\n         MVC   DBL(6),=X'402020202020' SET EDIT MASK\n         ED    DBL(6),DOUBLE+5     EDIT LRECL TO WORK\n         MVC   OLRECL,DBL+1        MOVE LRECL TO MSG\n***********************************************************************\n*        CREATION DATE                                                *\n***********************************************************************\nNVSAMR20 SLR   R15,R15             CLEAR REG FOR ICM\n         ICM   R15,3,DS1CREDT+1    LOAD DAY\n         CVD   R15,DOUBLE          CONVERT DAY TO PACKED\n         ZAP   PJDATE,DOUBLE       MOVE DAY TO PJDATE\n         SLR   R15,R15             CLEAR REG FOR ICM\n         ICM   R15,1,DS1CREDT      LOAD YEAR\n         CVD   R15,DOUBLE          CONVERT YEAR TO PACKED\n         MVO   DBL,DOUBLE+6(2)     MOVE YEAR BY OFFSET FOR UNSIGNED\n         MVC   PJDATE(1),DBL+6     MOVE YEAR TO PJDATE\n         L     R15,=V(DATERTN)     LOAD ADDRESS OF DATE CONVERT ROUTINE\n         BALR  R14,R15             GO CONVERT JULIAN TO CALENDAR DATE\n         MVC   OCRTDT,CALDATE      MOVE CREATION DATE TO MSG\n***********************************************************************\n*        DSNAME                                                       *\n***********************************************************************\nNVSAMR21 CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST\n         BE    NVSAMR22            YES, BRANCH\n         MVC   ODSN,LDSN           NO, SET DSNAME IN DETAIL LINE\n***********************************************************************\n*        WRITE DETAIL LINE                                            *\n***********************************************************************\nNVSAMR22 MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         MVC   DETAIL,BLANKS       BLANK DETAIL LINE\n         MVC   PDSN,LDSN           SAVE CURRENT DSNAME\nNVSAMR23 LA    R6,16(,R6)          INCREMENT TO NEXT VOLUME ENTRY\n         BCT   R7,NVSAMR01         LOOP UNTIL END OF VOLUME LIST\n         L     R15,TOTDS           LOAD NUMBER OF DSNAMES\n         LA    R15,1(R15)          ADD 1 TO COUNT\n         ST    R15,TOTDS           SAVE NUMBER OF DATASETS\n         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?\n         BO    CATNDX1             NO, GO DO IT\n         B     DSNLOOP             YES, GO PROCESS NEXT DSN\n         EJECT\n***********************************************************************\n*        NO FORMAT1 DSCB FOUND                                        *\n***********************************************************************\nNVSAMR24 MVC   MSGDATA(20),=CL20'VOLUME NOT MOUNTED'\n         CH    R15,=H'4'           RETURN CODE OF 4\n         BE    NVSAMR25            YES, CORRECT MESSAGE\n         MVC   MSGDATA(20),=CL20'NOT ON INDICATED VOL'\n         CH    R15,=H'8'           RETURN CODE OF 8\n         BE    NVSAMR25            YES, CORRECT MESSAGE\n         MVC   MSGDATA(20),=CL20'I/O ERROR IN VTOC   '\nNVSAMR25 MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE\n         MVC   OVOL,VOLSER         SET VOLSER IN MESSAGE\n         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND\n         BZ    NVSAMR26            NO, BRANCH\n         MVC   OSMSG(20),MSGDATA   SET ERROR MESSAGE\n         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE\n         B     NVSAMR22            GO WRITE MESSAGE\nNVSAMR26 MVC   OMSG(20),MSGDATA    SET ERROR MESSAGE\n         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE\n         B     NVSAMR22            GO WRITE MESSAGE\n         EJECT\n***********************************************************************\n*        NOT A DASD DATASET                                           *\n***********************************************************************\nNVSAMR27 TM    MISCINFO,DAONLY     SEE IF DASD ONLY REQUESTED\n         BO    NVSAMR29            YES, BYPASS THIS ONE\n         MVC   OVOL,VOLSER         MOVE VOLSER TO MESSAGE\n         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST\n         BE    NVSAMR28            YES, BRANCH\n         MVC   ODSN,LDSN           NO, SET DSNAME IN DETAIL LINE\nNVSAMR28 MVC   OSPALLOC(25),=CL25'UNSUPPORTED DEVICE TYPE'\n         B     NVSAMR22            GO PROCESS VOLSERS\nNVSAMR29 MVC   DETAIL,BLANKS       BLANK DETAIL LINE\n         MVC   PDSN,LDSN           SAVE CURRENT DSNAME\n         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?\n         BO    CATNDX1             NO, GO DO IT\n         B     DSNLOOP             YES, GO PROCESS NEXT DSN\n         EJECT\n***********************************************************************\n*        DATASET NOT FOUND                                            *\n***********************************************************************\nNVSAMR30 MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE\n         MVC   OVOL,VOLSER         SET VOLSER IN MESSAGE\n         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND\n         BZ    NVSAMR31            NO, BRANCH\n         MVC   OSMSG(20),=CL20'DATASET NOT FOUND'  SET ERROR MESSAGE\n         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE\n         B     NVSAMR32            GO WRITE MESSAGE\nNVSAMR31 MVC   OMSG(20),=CL20'DATASET NOT FOUND'  SET ERROR MESSAGE\n         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE\nNVSAMR32 MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         MVC   DETAIL,BLANKS       BLANK DETAIL LINE\n         MVC   PDSN,LDSN           SAVE CURRENT DSNAME\n         L     R15,TOTDS           LOAD NUMBER OF DSNAMES\n         LA    R15,1(R15)          ADD 1 TO COUNT\n         ST    R15,TOTDS           SAVE NUMBER OF DATASETS\n         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?\n         BO    CATNDX1             NO, GO DO IT\n         B     DSNLOOP             YES, GO PROCESS NEXT DSN\n         DROP  R6                  DROP ADDRESSABILITY TO VOLSER SECTN\n         EJECT\n***********************************************************************\n*        PROCESS DATASET OR INDEX COMPONENTS                          *\n***********************************************************************\nVSAMR    MVC   DETAIL,BLANKS       BLANK DETAIL LINE\n         BAL   R14,DSETINFO        GO GET DATASET/GDG INFO\nVSAMR01  LA    R6,VOLSER           POINT TO FIRST VOLUME ENTRY\n         USING VOLSER,R6           SET ADDRESSABILITY TO VOLUME ENTRY\n         LH    R7,NBRVOLS          LOAD NUMBER OF VOLUMES IN LIST\n         LTR   R7,R7               TEST FOR ZERO\n         BZ    VSAMR09             NONE, CATALOG ERROR\n***********************************************************************\n*        PROCESS THE VOLSER LIST                                      *\n***********************************************************************\nVSAMR02  TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND\n         BZ    VSAMR03             NO, BRANCH\n***********************************************************************\n*        FORMAT SHORT PRINT LINE                                      *\n***********************************************************************\n         MVC   OVOL,VOLSER         SET VOLSER IN MESSAGE\n         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST\n         BE    VSAMR08             YES, DO NOT SET DSNAME IN DETAIL\n         MVC   OSHORTDS,LDSN       NO, SET DSNAME IN DETAIL LINE\n         B     VSAMR08             GO WRITE DETAIL LINE\n         EJECT\n***********************************************************************\n*        FORMAT LONG PRINT LINE                                       *\n***********************************************************************\n***********************************************************************\n*        VOLSER                                                       *\n***********************************************************************\nVSAMR03  MVC   OVOL,VOLSER         MOVE VOLSER TO MESSAGE\n***********************************************************************\n*        IF SPACE ALLOCATED = 0 THEN CANDIDATE ONLY                   *\n***********************************************************************\n         OC    NOTRKSA,NOTRKSA     SEE IF SPACE ALLOCATED\n         BZ    VSAMR12             ZERO, CANDIDATE\n***********************************************************************\n*        SPACE ALLOCATED                                              *\n***********************************************************************\n         L     R15,TOTSPACE        LOAD TOTAL SPACE ALLOC ACCUMULATOR\n         AH    R15,NOTRKSA         ADD SPACE ALLOCATED TO THIS DATASET\n         ST    R15,TOTSPACE        SAVE UPDATED TOTAL SPACE ALLOCATED\n         LH    R15,NOTRKSA         LOAD SPACE ALLOCATED FOR DATA SET\n         CVD   R15,DOUBLE          CONVERT TO PACKED\n         MVC   DBL(6),=X'402020202120' SET EDIT MASK\n         ED    DBL(6),DOUBLE+5     EDIT SPACE ALLOCATED TO WORK\n         MVC   OSPALLOC,DBL+1      MOVE SPACE ALLOCATED VALUE TO MSG\n***********************************************************************\n*        SPACE USED                                                   *\n***********************************************************************\n         L     R15,TOTUSED         LOAD TOTAL SPACE USED ACCUMULATOR\n         AH    R15,NOTRKSU         ADD SPACE USED BY THIS DATASET\n         ST    R15,TOTUSED         SAVE UPDATED TOTAL SPACE USED\n         LH    R15,NOTRKSU         LOAD SPACE USED BY THIS DATASET\n         CVD   R15,DOUBLE          CONVERT TRACKS USED TO PACKED\n         MVC   DBL(6),=X'402020202120' SET EDIT MASK\n         ED    DBL(6),DOUBLE+5     EDIT SPACE USED TO WORK\n         MVC   OSPUSED,DBL+1       MOVE SPACE USED VALUE TO MSG\n***********************************************************************\n*        NUMBER OF EXTENTS                                            *\n***********************************************************************\n         LH    R15,NOEXT           LOAD NUMBER OF EXTENTS\n         CVD   R15,DOUBLE          CONVERT NBR OF EXTENTS TO PACKED\n         MVC   DBL(4),=X'40202120' SET EDIT MASK\n         ED    DBL(4),DOUBLE+6     EDIT NBR OF EXTENTS TO WORK\n         MVC   OEXTENT,DBL+1       MOVE EXTENT NUMBER TO MSG\n***********************************************************************\n*        DO NOT FORMAT ANY OTHER OF THE DETAILED INFORMATION          *\n*        UNLESS THE DSNAME HAS CHANGED.  HOPEFULLY THE DETAILED       *\n*        INFORMATION IS IDENTICAL FOR MULTIVOLUME DATASETS.           *\n***********************************************************************\n         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST\n         BE    VSAMR08             YES, BRANCH\n***********************************************************************\n*        DSORG                                                        *\n***********************************************************************\n         MVC   ODSORG,=C'VS'       SET TO VSAM ORGANIZATION\n         LA    R15,ODSORG+2        POINT TO EXTRA AREA\n         TM    VSAMATTR,IMBED      SEE IF HAS IMBEDDED KEYS\n         BZ    VSAMR04             NO, BRANCH\n         MVI   0(R15),C'I'         SET INDICATOR\n         LA    R15,1(R15)          INCREMENT FIELD ADDRESS\nVSAMR04  TM    VSAMATTR,REPLIC     SEE IF HAS REPLICATED KEYS\n         BZ    VSAMR05             NO, BRANCH\n         MVI   0(R15),C'R'         SET INDICATOR\n         LA    R15,1(R15)          INCREMENT FIELD ADDRESS\n         EJECT\n***********************************************************************\n*        RECFM                                                        *\n***********************************************************************\nVSAMR05  LA    R15,ORECFM          LOAD ADDR OF DETAIL RECFM FIELD\n         MVI   0(R15),C'F'         ASSUME FIXED\n         CLC   LRECL,MAXLRECL      SEE IF AVG LRECL = MAX\n         BE    VSAMR06             YES, FIXED\n         MVI   0(R15),C'V'         NO, SET TO VARIABLE\nVSAMR06  LA    R15,1(R15)          INCREMENT TO NEXT CHAR RECFM\n         MVI   0(R15),C'B'         SET TO BLOCKED (VSAM ALWAYS BLOCKED)\n         LA    R15,1(R15)          INCREMENT TO NEXT CHAR RECFM\n         TM    VSAMATTR,SPANNED    SEE IF SPANNED\n         BZ    VSAMR07             NO, BRANCH\n         MVI   0(R15),C'S'         SET TO SPANNED\n***********************************************************************\n*        BLKSIZE (CISIZE)                                             *\n***********************************************************************\nVSAMR07  L     R15,CISIZE          LOAD CI SIZE\n         CVD   R15,DOUBLE          CONVERT TO PACKED\n         MVC   DBL(6),=X'402020202020' SET EDIT MASK\n         ED    DBL(6),DOUBLE+5     EDIT BLKSIZE TO WORK\n         MVC   OBLKSIZE,DBL+1      MOVE BLKSIZE TO MSG\n***********************************************************************\n*        LRECL (AVG)                                                  *\n***********************************************************************\n         L     R15,LRECL           LOAD AVERAGE LRECL\n         CVD   R15,DOUBLE          CONVERT TO PACKED\n         MVC   DBL(6),=X'402020202120' SET EDIT MASK\n         ED    DBL(6),DOUBLE+5     EDIT LRECL TO WORK\n         MVC   OLRECL,DBL+1        MOVE LRECL TO MSG\n***********************************************************************\n*        CREATION DATE                                                *\n***********************************************************************\n         MVC   PJDATE,DSETCRDT     MOVE CRDATE TO PJDATE\n         L     R15,=V(DATERTN)     LOAD ADDRESS OF DATE CONVERT ROUTINE\n         BALR  R14,R15             GO CONVERT JULIAN TO CALENDAR DATE\n         MVC   OCRTDT,CALDATE      MOVE CREATION DATE TO MSG\n***********************************************************************\n*        DSNAME                                                       *\n***********************************************************************\n         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST\n         BE    VSAMR08             YES, BRANCH\n         MVC   ODSN,LDSN           NO, SET DSNAME IN DETAIL LINE\n***********************************************************************\n*        WRITE DETAIL LINE                                            *\n***********************************************************************\nVSAMR08  MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         MVC   DETAIL,BLANKS       BLANK DETAIL LINE\n         MVC   PDSN,LDSN           SAVE CURRENT DSNAME\n         LA    R6,16(,R6)          INCREMENT TO NEXT VOLUME ENTRY\n         BCT   R7,VSAMR02          LOOP UNTIL END OF VOLUME LIST\n         L     R15,TOTDS           LOAD NUMBER OF DSNAMES\n         LA    R15,1(R15)          ADD 1 TO COUNT\n         ST    R15,TOTDS           SAVE NUMBER OF DATASETS\n         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?\n         BO    CATNDX1             NO, GO DO IT\n         B     DSNLOOP             YES, GO PROCESS NEXT DSN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DATASET WITHOUT DETAILS                                      *\n*                                                                     *\n*        THIS APPEARS TO ONLY OCCUR WITH CATALOG ERRORS SUCH AS       *\n*        TRUENAME ENTRIES WITHOUT THEIR RELATED BASE ENTRY,           *\n*        CATALOG POINTERS TO A VVDS WHICH DOES NOT CONTAIN THE        *\n*        ENTRY OR JUST A TRUE VSAM I/O ERROR.                         *\n*                                                                     *\n***********************************************************************\nVSAMR09  MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE\n         MVC   OVOL,VOLSER         SET VOLSER\n         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND\n         BZ    VSAMR10             NO, BRANCH\n         MVC   OSMSG(20),=CL20'** CATALOG ERROR **'  SET ERROR MESSAGE\n         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE\n         B     VSAMR11             GO WRITE MESSAGE\nVSAMR10  MVC   OMSG(20),=CL20'** CATALOG ERROR **'  SET ERROR MESSAGE\n         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE\nVSAMR11  MVC   MSG,DETAIL          MOVE DETAIL LINE TO MSG\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         MVC   DETAIL,BLANKS       BLANK DETAIL LINE\n         MVC   PDSN,LDSN           SAVE CURRENT DSNAME\n         L     R15,TOTDS           LOAD NUMBER OF DSNAMES\n         LA    R15,1(R15)          ADD 1 TO COUNT\n         ST    R15,TOTDS           SAVE NUMBER OF DATASETS\n         TM    MISCINFO,DOGEN      HAS GENERIC LOCATE BEEN DONE?\n         BO    CATNDX1             NO, GO DO IT\n         B     DSNLOOP             YES, GO PROCESS NEXT DSN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        VOLUME WITHOUT SPACE - CANDIDATE                             *\n*                                                                     *\n*        THIS COULD ALSO BE A VSAM OBJECT WHOSE VOLUME IS NOT         *\n*        MOUNTED.                                                     *\n*                                                                     *\n***********************************************************************\nVSAMR12  MVC   DETAIL,BLANKS       BLANK THE DETAIL LINE\n         MVC   OVOL,VOLSER         SET VOLSER\n         TM    MISCINFO,SHORT      SEE IF SHORT FORM OF COMMAND\n         BZ    VSAMR13             NO, BRANCH\n         MVC   OSMSG(20),=CL20'CANDIDATE' SET MESSAGE\n         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST\n         BE    VSAMR14             YES, DO NOT SET DSNAME\n         MVC   OSHORTDS,LDSN       SET DSNAME IN MESSAGE\n         B     VSAMR14             GO WRITE MESSAGE\nVSAMR13  MVC   OMSG(20),=CL20'CANDIDATE' SET MESSAGE\n         CLC   LDSN,PDSN           SEE IF SAME DSNAME AS LAST\n         BE    VSAMR14             YES, DO NOT SET DSNAME\n         MVC   ODSN,LDSN           SET DSNAME IN MESSAGE\nVSAMR14  B     VSAMR07             GO WRITE MESSAGE\n         DROP  R6                  DROP ADDRESSABILITY TO VOLSER SECTN\n         EJECT\n***********************************************************************\n*                                                                     *\n*                        EXTCALC ROUTINE                              *\n*                                                                     *\n*        THIS WILL CALCULATE THE NUMBER OF TRACKS IN THE EXTENT       *\n*        ENTRY(S) POINTED TO BY REGISTER 1 UPON ENTRY.  REGISTER      *\n*        15 CONTAINS THE NUMBER OF EXTENT DESCRIPTORS, BUT ALL        *\n*        CALCULATIONS WILL TERMINATE UPON ENCOUNTERING THE FIRST      *\n*        ZERO EXTENT DESCRIPTOR.  THE NUMBER OF TRACKS IN THE         *\n*        EXTENT DESCRIPTORS WILL BE RETURNED IN REGISTER 15, AND      *\n*        RETURN FROM THIS ROUTINE WILL BE MADE TO REGISTER 14.        *\n*                                                                     *\n***********************************************************************\nEXTCALC  ST    R14,RETEXTC         SAVE RETURN ADDRESS\n         LR    R14,R15             SAVE NUMBER OF EXTENTS\n         SLR   R15,R15             ZERO THE SPACE ACCUMULATOR\nEXTCALC1 CLC   0(10,R1),=10X'00'   SEE IF EXTENT DESC ALL ZEROS\n         BE    EXTCALC2            YES, POSSIBLE ERROR BUT JUST EXIT\n         SLR   R2,R2               ZERO REG FOR ICM\n         ICM   R2,3,6(R1)          LOAD END CC\n         MH    R2,TRKCYL           MULTIPLY BY TRKS PER CYL\n         AR    R15,R2              ADD TO ACCUMULATOR\n         SLR   R2,R2               ZERO REG FOR ICM\n         ICM   R2,3,8(R1)          LOAD END HH\n         AR    R15,R2              ADD TO ACCUMULATOR\n         SLR   R2,R2               ZERO REG FOR ICM\n         ICM   R2,3,2(R1)          LOAD START CC\n         MH    R2,TRKCYL           MULTIPLY BY TRKS PER CYL\n         SR    R15,R2              SUBTRACT FROM ACCUMULATOR\n         SLR   R2,R2               ZERO REG FOR ICM\n         ICM   R2,3,4(R1)          LOAD START HH\n         SR    R15,R2              SUBTRACT FROM ACCUMULATOR\n         LA    R15,1(,R15)         ADD 1 TO MAKE SIZE REL TO 1\n         LA    R1,10(,R1)          INCREMENT TO NEXT EXTENT DESCRIPTION\n         BCT   R14,EXTCALC1        LOOP\nEXTCALC2 L     R14,RETEXTC         RESTORE RETURN ADDRESS\n         BR    R14                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        END OF PROGRAM ROUTINE                                       *\n*                                                                     *\n***********************************************************************\nEXIT     L     R1,SVC26WRK         LOAD ADDRESS OF WORK AREA\n         L     R0,WKSIZE           LOAD SIZE OF WORK AREA\n         FREEMAIN R,LV=(0),A=(1)   FREE WORK AREA\n         L     R1,SVC26SPC         LOAD ADDRESS OF WORK AREA\n         FREEMAIN R,LV=5120,A=(1)  FREE WORK AREA\n         LR    R1,R13              SAVE DSA ADDRESS\n         L     R13,4(R13)          LOAD ADDRESS OF ORIGINAL SAVE\n         FREEMAIN R,LV=LDSA,A=(1)  FREE WORK AREA\n         RETURN (14,12),RC=0       RETURN TO TSO USER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        WRITE MESSAGE LINE TO TSO TERMINAL                           *\n*                                                                     *\n***********************************************************************\nPUTMSG   ST    R14,SAVERET         SAVE RETURN ADDRESS\n         XC    ECB,ECB             ZERO MY ECB\n         PUTLINE PARM=PUTLINE,OUTPUT=(MSGOUT,TERM,SINGLE,INFOR),       X\n               MF=(E,IOPL)\n         L     R14,SAVERET         RESTORE RETURN ADDRESS\n         BR    R14                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CALL SVC26 TO RETURN DATASET/GDG BASE INFORMATION            *\n*                                                                     *\n***********************************************************************\nDSETINFO STM   R0,R15,SAVEDINF     SAVE INPUT REGISTERS\n         MVC   ENTNAME,LDSN        SET DSNAME IN PARM LIST\n         LA    R1,RESULTS          LOAD ADDRESS OF PARM LIST\n         L     R15,=V(VSAMRTN)     LOAD ADDRESS OF SPECIAL VSAM ROUTINE\n         BALR  R14,R15             GO GET SPECIAL VSAM INFORMATION\n         LM    R0,R14,SAVEDINF     RESTORE INPUT REGISTERS EXCEPT 15\n         BR    R14                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SCAN UCB TABLE FOR SYSRES VOLUME                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nUCBLOOK  ST    R14,RETUCBL         SAVE RETURN ADDRESS\n         MVC   SYSVOL,=C'******'   SET VOLSER\n         XC    SYSTYP,SYSTYP       SET DEVICE TYPE\n         L     R1,CVTPTR           GET CVT ADDRESS\n         L     R14,CVTUCBSC-CVT(R1) POINT TO UCB SCAN SERVICE RTN\n         ST    R14,IOSVSUCB        SAVE ADDR OF UCB SCAN ROUTINE\n         MVI   DEVCLASS,UCB3DACC   SET FOR DASD UCBS ONLY\n         LA    R1,SCANWORK         LOAD ADDRESS OF SCAN WORK AREA\n         ST    R1,SCANP1           SAVE IN PARM LIST\n         LA    R1,DEVCLASS         LOAD ADDRESS OF DEVICE CLASS\n         ST    R1,SCANP2           SAVE IN PARM LIST\n         LA    R1,UCBADDR          LOAD ADDRESS OF UCB RETURN\n         ST    R1,SCANP3           SAVE IN PARM LIST\n         OI    SCANP3,X'80'        TURN ON HIGH ORDER BIT\n         XC    SCANWORK,SCANWORK   CLEAR SCAN SERVICE WORK AREA\nUCBLOOK1 L     R15,IOSVSUCB        LOAD ADDR OF UCB SCAN ROUTINE\n         LA    R1,SCANPARM         LOAD ADDRESS OF UCB SCAN PARM\n         BALR  R14,R15             GO TO UCB SCAN SERVICE ROUTINE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   UCBLOOK2            NOT ZERO, END OF UCBS\n         L     R9,UCBADDR          LOAD UCB ADDRESS\n***********************************************************************\n*        SEE IF THE SYSRES VOLUME                                     *\n***********************************************************************\n         USING UCB,R9              SET ADDRESSABILITY TO UCB\n         TM    UCBSTAT,UCBSYSR     IS IT THE SYSRES VOLUME?\n         BZ    UCBLOOK1            NO, GO LOOK AT THE NEXT UCB\n         MVC   SYSVOL,UCBVOLI      MOVE VOLSER TO SAVE AREA\n         MVC   SYSTYP,UCBTYP       MOVE DEVICE TYPE TO SAVE AREA\nUCBLOOK2 L     R14,RETUCBL         LOAD RETURN ADDRESS\n         BR    R14                 RETURN TO CALLER\n         DROP  R9                  DROP ADDRESSABILITY TO UCB\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS USED BY THIS PROGRAM                               *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*        TRACKS PER CYLINDER TABLE BASED ON DEVICE TYPE               *\n***********************************************************************\nTRKSCYL  DC    AL1(0)                  00 (00) - UNASSIGNED\n         DC    AL1(10)                 01 (01) - 2311 DISK\n         DC    AL1(200)                02 (02) - 2301 DRUM\n         DC    AL1(10)                 03 (03) - 2303 DRUM\n         DC    AL1(46)                 04 (04) - 2302 DISK FILE\n         DC    AL1(00)                 05 (05) - 2321 DATA CELL\n         DC    AL1(8)                  06 (06) - 2305-1\n         DC    AL1(8)                  07 (07) - 2305-2\n         DC    AL1(20)                 08 (08) - 2314 DISK\n         DC    AL1(19)                 09 (09) - 3330 DISK\n         DC    AL1(00)                 10 (0A) - 3340\n         DC    AL1(30)                 11 (0B) - 3350 DISK\n         DC    AL1(00)                 12 (0C) - 3375\n         DC    AL1(19)                 13 (0D) - 3330-11 DISK\n         DC    AL1(15)                 14 (0E) - 3380\n         DC    AL1(00)                 15 (0F) - UNASSIGNED\n         SPACE 3\nBLANKS   DC    CL120' '            CHARACTER STRING OF BLANKS\nHEADING1 DC    CL120'SERIAL ALLOC  USED  EX DSO  -DCB ATTRIBUTES- CR. DX\n               ATE -DSNAME-'\nHEADING2 DC    CL120'SERIAL -DSNAME-'\nPUTLINIT PUTLINE MF=L              PUTLINE LIST FORM\n         EJECT\n         LTORG\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DYNAMIC WORK AREA                                            *\n*                                                                     *\n***********************************************************************\nWORKA    DSECT\n         DS    18F                 PROGRAM SAVE AREA\nSAVEDATE DS    18F                 SAVE AREA FOR DATE ROUTINE\nSAVEDINF DS    16F                 SAVE AREA FOR DATASET INFO ROUTINE\nSAVERET  DS    F                   REGISTER SAVE AREA FOR PUTMSG RTN\nRETEXTC  DS    F                   RETURN ADDRESS FROM EXTENT CALC RTN\nRETUCBL  DS    F                   RETURN ADDRESS FROM UCB LOOKUP RTN\nDOUBLE   DS    D                   DOUBLE WORD WORK AREA\nDBL      DS    D                   DOUBLE WORD WORK AREA\nTSOID    DS    CL7                 TSO LOGONID\nTSOPREF  DS    CL7                 TSO PROFILE PREFIX\nTSOPREFL DS    C                   LENGTH OF PROFILE PREFIX\n*\nDSN      DS    CL44                DSN FOR SEARCH\nCATDSN   DS    CL44                CATALOG DSNAME\n*\nMSGDATA  DS    CL20                SPECIAL MESSAGE DATA\n         SPACE 3\nMISCINFO DS    X                   MISCELLANEOUS INDICATORS\nSHORT    EQU   X'80'               SHORT RESPONSE TO COMMAND\nSPMSG    EQU   X'40'               SPECIAL MESSAGE FOR DATASET\nDAONLY   EQU   X'20'               REPORT ONLY ON DA DATASETS\nDOGEN    EQU   X'10'               DO GENERIC LOCATE\n         CNOP  0,4\nCALDATE  DS    CL8                 CALENDAR DATE (MM/DD/YY)\nPJDATE   DS    PL3                 PACKED JULIAN DATE (YYDDDS)\nLDSN     DS    CL44                DSNAME USED BY LOCATE\nPDSN     DS    CL44                PREVIOUS DSNAME DISPLAYED\nSVC26DSN DS    0CL45               DSNAME USED BY SVC26\nSVC26DSL DS    CL1                 LENGTH OF DSN\nSVC26DS  DS    CL44                ACTUAL DSNAME INDEX\n         EJECT\nSVC26WRK DS    F                   ADDRESS OF SVC26 WORK AREA\nWKSIZE   DS    F                   SIZE OF SVC26WRK\nSVC26SPC DS    F                   ADDRESS OF SPECIAL SVC26 WORK AREA\nTOTSPACE DS    F                   TOTAL SPACE ALLOCATED\nTOTUSED  DS    F                   TOTAL SPACE USED\nTOTDS    DS    F                   TOTAL DATASETS\nEXTLEFT  DS    H                   NUMBER OF VTOC EXTENTS LEFT\nSPALLOC  DS    H                   SPACE ALLOCATED FOR THIS DATASET\nTRKCYL   DS    H                   TRACKS PER CYLINDER FOR THIS VOLUME\n         SPACE 3\nDETAIL   DS    0CL120              DETAIL LINE\nOVOL     DS    CL6                 OUTPUT VOLSER\n         DS    C\nOSPALLOC DS    CL5                 OUTPUT SPACE ALLOCATED\n         DS    C\nOSPUSED  DS    CL5                 OUTPUT SPACE USED\n         DS    C\nOEXTENT  DS    CL3                 OUTPUT NUMBER OF EXTENTS\n         DS    C\nODSORG   DS    CL2                 OUTPUT DSORG\n         DS    3C\nORECFM   DS    CL4                 OUTPUT RECFM\n         DS    C\nOBLKSIZE DS    CL5                 OUTPUT BLKSIZE\n         DS    C\nOLRECL   DS    CL5                 OUTPUT LRECL\n         DS    C\nOCRTDT   DS    CL8                 OUTPUT CREATION DATE\n         DS    C\nODSN     DS    CL44                OUTPUT DSNAME\n         DS    CL22\nOSHORTDS EQU   DETAIL+7,44         OUTPUT DSN FOR SHORT FORMAT\nOSMSG    EQU   DETAIL+52,20        OUTPUT MSG FOR SHORT FORMAT\nOMSG     EQU   DETAIL+7,20         OUTPUT MSG FOR LONG  FORMAT\nOGDGLIM  EQU   DETAIL+24,8         OUTPUT GDG LIMIT FIELD\nOGDGEMP  EQU   DETAIL+33,5         OUTPUT GDG EMPTY/NOEMPTY IND\nOGDGSCR  EQU   DETAIL+39,5         OUTPUT GDG SCRATCH/NOSCRATCH IND\n         SPACE 3\nCAMLST2  CAMLST SEARCH,LDSN,OVOLSER,DSCB1+44 OBTAIN BY NAME PARAM AREA\n         SPACE 3\nCAMLST3  CAMLST SEEK,CCHHR,OVOLSER,DSCB3 OBTAIN BY DSCB ADDR PARAM AREA\n         SPACE 3\n         CNOP  0,4\nCTGPL    DS    XL60                CATALOG MANAGEMENT PARAMETER LIST\nCCHHR    DS    XL5                 CCHHR OF FORMAT 3 DSCB\nOVOLSER  DS    CL6                 VOLSER OF VTOC\nDSCB1    DS    0F                  FORMAT 1 DSCB\n         IECSDSL1 1\n         ORG   DSCB1+44+140\nDSCB3    DS    0F                  FORMAT 3 DSCB\n         IECSDSL1 3\n         ORG   DSCB3+140\nCPPL     DS    0F                  COMMAND PROCESSOR PARAMETER LIST\nCPPLCBUF DS    F                   COMMAND BUFFER\nCPPLUPT  DS    F                   USER PROFILE TABLE\nCPPLPSCB DS    F                   PROTECTED STEP CONTROL BLOCK\nCPPLECT  DS    F                   ENVIRONMENT CONTROL TABLE\n*\nPPL      DS    0F                  PARSE PARAMETER LIST\nPPLUPT   DS    F                   USER PROFILE TABLE\nPPLECT   DS    F                   EVIRONMENT CONTROL TABLE\nPPLECB   DS    F                   MY ECB\nPPLPCL   DS    F                   PARSE CONTROL LIST\nPPLPDL   DS    F                   POINTER TO PARSE DESCRIPTOR LIST\nPPLBUFF  DS    F                   COMMAND BUFFER ADDRESS\nPPLWORK  DS    F                   USER WORK AREA ADDRESS\n*\nPDLPOINT DS    F                   ADDRESS OF PARSE DESCRIPTOR LIST\n*\nPUTLINE  PUTLINE MF=L              PUTLINE LIST FORM\nLPUTLINE EQU   *-PUTLINE           LENGTH OF PUTLINE LIST FORM\n*\nIOPL     DS    4F                  IOPL\n*\nECB      DS    F                   MY ECB\n*\nMSGOUT   DS    2F                  PUTLINE MSG POINTER\nMSGLINE  DS    0CL125              PUTLINE MSG AREA\n         DS    AL2(121)            LENGTH OF MSG\n         DS    AL2(0)              RESERVED\nMSGPREF  DS    C                   START WITH BLANK CHAR\nMSG      DS    CL120               ACTUAL MESSAGE\n*\nDEVCLASS DS    X                   IOSVSUCB DEVICE TYPE\nSCANWORK DS    CL100               IOSVSUCB SCAN WORK AREA\nUCBADDR  DS    F                   ADDRESS OF UCB\nIOSVSUCB DS    F                   ADDRESS OF IOSVSUCB ROUTINE\nSCANPARM DS    0F                  IOSVSUCB PARM LIST\nSCANP1   DS    F                   ADDRESS OF WORK AREA\nSCANP2   DS    F                   ADDRESS OF DEVICE TYPE FIELD\nSCANP3   DS    F                   ADDRESS OF UCB RETURN AREA\n*\nSYSVOL   DS    CL6                 VOLSER OF SYSRES VOLUME\nSYSTYP   DS    XL4                 DEVICE TYPE OF SYSRES VOLUME\n*\nLDSA     EQU   *-WORKA             LENGTH OF WORK AREA\n         EJECT\n***********************************************************************\n*                                                                     *\n*                          D A T E R T N                              *\n*                                                                     *\n*         CONVERT JULIAN DATA TO CALENDAR DATE                        *\n*                                                                     *\n*         PJDATE  - PACKED JULIAN DATE                                *\n*         CALDATE - CALENDAR DATE RETURNED FROM THIS ROUTINE          *\n*                                                                     *\n***********************************************************************\nDATERTN  CSECT\n         DROP  ,                   DROP ALL PREVIOUS USINGS\n         USING WORKA,R13           SET ADDRESSABILITY TO SAVE AREA\n         STM   R14,R12,SAVEDATE    SAVE INPUT REGISTERS\n         LR    R12,R15             SET FIRST BASE REGISTER\n         USING DATERTN,R12         SET ADDRESABILITY TO CSECT\n         SR    R3,R3               ZERO REGISTER\n         LA    R6,CALDATE+7        LOAD ADDR OF LOW BYTE OF CAL DATE\n         SR    R0,R0               CLEAR REG 0\n         SR    R1,R1               CLEAR REG 1\n         ICM   R1,7,PJDATE         INSERT JULIAN DATE\n         SLDL  R0,16(0)            SHIFT YEAR OF JULIAN DATE TO REG 0\n         BAL   R2,DATERTN7         MOVE LOW BYTE YEAR TO CAL DATE\n         BAL   R2,DATERTN7         MOVE HIGH BYTE YEAR TO CAL DATE\n         BCTR  R6,0                SHIFT LEFT PAST '/'\n         SRL   R1,20(0)            SHIFT DAY TO LOW ORDER 12 BITS\n         TM    CALDATE+7,X'01'     SEE IF ODD YEAR\n         BO    DATERTN3            YES, BRANCH\n         TM    CALDATE+6,X'01'     SEE IF 1ST DIGIT YEAR ODD\n         BO    DATERTN1            YES, BRANCH\n         TM    CALDATE+7,X'02'     SEE IF LOW DIGIT YEAR 2 OR 6\n         BO    DATERTN3            YES, BRANCH\n         B     DATERTN2            BRANCH\nDATERTN1 TM    CALDATE+7,X'02'     SEE IF LOW DIGIT YEAR 2 OR 6\n         BNO   DATERTN3            NO, BRANCH\nDATERTN2 LA    R3,1                MUST BE LEAP YEAR\nDATERTN3 SLL   R1,4(0)             SHIFT DAY 'DDD' TO LEFT\n         LA    R1,12(R1)           MOVE SIGN 'C'\n         STH   R1,CALDATE+2        SAVE DAY (PACKED)\n         ZAP   CALDATE(2),=P'1'    ADD 1 TO PACKED MONTH\n         LA    R7,DAYTABLE         LOAD ADDR OF DAY IN MONTH TABLE\n         LA    R15,12              SET LOOP COUNT\nDATERTN4 MVC   CALDATE+4(2),0(R7)  MOVE DAYS IN MONTH\n         CP    CALDATE(2),=P'2'    SEE IF FEBRUARY\n         BNE   DATERTN5            NO, BRANCH\n         LTR   R3,R3               SEE IF LEAP YEAR\n         BZ    DATERTN5            NO, BRANCH\n         AP    CALDATE+4(2),=P'1'  ADD 1 TO DAYS FOR LEAP YEAR\nDATERTN5 CP    CALDATE+2(2),CALDATE+4(2)  CHECK JULIAN DAYS LEFT\n         BNH   DATERTN6            ONLY PARTIAL MONTH LEFT, BRANCH\n         SP    CALDATE+2(2),CALDATE+4(2)  SUBTR DAY/MONTH FROM JDAYS\n         AP    CALDATE(2),=P'1'    ADD 1 TO MONTH\n         LA    R7,2(R7)            INDEX TO NEXT DAYS IN MONTH ENTRY\n         BCT   R15,DATERTN4        LOOP\nDATERTN6 LH    R0,CALDATE+2        LOAD DAY WITHIN MONTH (PACKED)\n         SRL   R0,4(0)             SHIFT OFF SIGN\n         BAL   R2,DATERTN7         MOVE LOW DIGIT DAY TO OUTPUT\n         BAL   R2,DATERTN7         MOVE HIGH DIGIT DAY TO OUTPUT\n         BCTR  R6,0                SHIFT PAST '/'\n         LH    R0,CALDATE          LOAD MONTH (PACKED)\n         SRL   R0,4(0)             SHIFT OFF SIGN\n         BAL   R2,DATERTN7         MOVE LOW DIGIT MONTH TO OUTPUT\n         BAL   R2,DATERTN7         MOVE HIGH DIGIT MONTH TO OUTPUT\n         MVI   CALDATE+5,C'/'      MOVE '/' TO OUTPUT\n         MVI   CALDATE+2,C'/'      MOVE '/' TO OUTPUT\n         LM    R14,R12,SAVEDATE    RESTORE REGISTERS\n         SR    R15,R15             ZERO RETURN CODE\n         BR    R14                 RETURN\nDATERTN7 STC   R0,0(R6)            STORE LOW BYTE R0 TO OUTPUT\n         SRL   R0,4(0)             SHIFT LOW BYTE R0 OUT\n         OI    0(R6),X'F0'         MAKE PRINTABLE\n         BCTR  R6,0                MOVE OUTPUT POINTER TO LEFT\n         BR    R2                  RETURN\nDAYTABLE DS    0H\nJAN#     DC    PL2'31'\nFEB#     DC    PL2'28'\nMAR#     DC    PL2'31'\nAPR#     DC    PL2'30'\nMAY#     DC    PL2'31'\nJUN#     DC    PL2'30'\nJUL#     DC    PL2'31'\nAUG#     DC    PL2'31'\nSEP#     DC    PL2'30'\nOCT#     DC    PL2'31'\nNOV#     DC    PL2'30'\nDEC#     DC    PL2'31'\n         SPACE 3\n         LTORG\n         EJECT\n***********************************************************************\n*                                                                     *\n*        START OF SPECIAL VSAM CATALOG ACCESS ROUTINE                 *\n*                                                                     *\n***********************************************************************\nVSAMRTN  CSECT\n         DROP  ,                   DROP ALL PREVIOUS USINGS\n         SAVE  (14,12)             SAVE REGISTERS\n         LR    R11,R15             SET FIRST BASE REGISTER\n         LA    R12,4095(R11)       SET SECOND\n         LA    R12,1(,R12)             BASE REGISTER\n         USING VSAMRTN,R11,R12     SET ADDRESSABILITY TO CSECT\n         LR    R8,R1               SAVE PARM ADDRESS\n         USING RESULTS,R8          SET ADDRESSABILITY TO RESULTS AREA\n         GETMAIN R,LV=LGETM        GET WORK AREA\n         LR    R2,R1               SAVE GETMAIN ADDRESS\n         LR    R14,R2              SET 'TO' ADDRESS FOR MVCL\n         LA    R15,LGETM           SET 'TO' LENGTH\n         SLR   R0,R0               SET 'FROM' ADDRESS\n         LA    R1,0                SET 'FROM' LENGTH\n         ICM   R1,8,=X'00'         SET PAD CHARACTER TO ZEROS\n         MVCL  R14,R0              BLANK ENTIRE GETMAIN AREA\n         ST    R2,8(R13)           SAVE NEW SAVE ADDRESS IN OLD\n         ST    R13,4(R2)           SAVE OLD SAVE ADDRESS IN NEW\n         LR    R13,R2              SET NEW SAVE AREA ADDRESS\n         USING VSAMWRK,R13         SET ADDRESSABILITY TO WORK AREA\n         GETMAIN R,LV=20480        GET SVC26 WORK AREA\n         ST    R1,S26WRK           SAVE WORK AREA ADDRESS\n         MVC   CATENT,ENTNAME      SET INITIAL ENTRY NAME\n         MVC   SAVEENT,ENTNAME     SAVE INITIAL ENTRY NAME\n         MVC   CATNAME,BLNKS       SET INITIAL CATALOG NAME TO BLANKS\n         XC    CATACBA,CATACBA     ZERO CATALOG ACB ADDRESS\n         BAL   R10,CALLSVC         GO ISSUE SVC26\n         LA    R1,OPTNLIST         POINT TO ENTYPE OPTION LIST\n         ICM   R2,15,16(R1)        LOAD LENGTH OF RESULT AREA\n         BZ    CK1                 NOT ZERO, NOT FOUND\n         ICM   R2,15,20(R1)        LOAD ADDRESS OF ENTYPE\n         BZ    CK1                 NOT ZERO, NOT FOUND\n***********************************************************************\n*                                                                     *\n*        SOME OF THE CATALOG ENTRIES SUCH AS PAGE DATA SETS           *\n*        OR CATALOGS REQUIRE USING SVC26 TO READ THE CATALOG          *\n*        USING THE CATALOG ACB ADDRESS TO RETURN DETAILED             *\n*        CLUSTER INFORMATION.                                         *\n*                                                                     *\n***********************************************************************\n         CLI   0(R2),C'M'          SEE IF MASTER CATALOG ENTRY\n         BE    VSAMRTN5            YES, BRANCH\n         CLI   0(R2),C'U'          SEE IF USER CATALOG ENTRY\n         BE    VSAMRTN5            YES, BRANCH\n         CLI   0(R2),C'P'          SEE IF PAGE DATASET ENTRY\n         BE    VSAMRTN1            YES, BRANCH\n         CLI   0(R2),C'G'          SEE IF ALTERNATE INDEX ENTRY\n         BE    VSAMRTN1            YES, BRANCH\n         CLI   0(R2),C'C'          SEE IF CLUSTER ENTRY\n         BE    VSAMRTN1            YES, BRANCH\n         B     CK1                 NO, PROCESS ORIGINAL INFORMATION\n***********************************************************************\n*        IF WE HAVE VOLUME INFORMATION, EVERYTHING IS OK.             *\n***********************************************************************\nVSAMRTN1 LA    R1,OPTNLIST+168     POINT TO ENTVOL OPTION LIST\n         ICM   R2,15,16(R1)        LOAD LENGTH OF RESULT AREA\n         BNZ   CK1                 NOT ZERO, USE WHAT WE HAVE\n***********************************************************************\n*        SEE IF WE HAVE AN ACB ADDRESS                                *\n***********************************************************************\n         LA    R1,OPTNLIST+216     POINT TO CATACB OPTION LIST\n         ICM   R2,15,16(R1)        LOAD LENGTH OF RESULT AREA\n         BZ    CK1                 NONE, NOTHING WE CAN DO\n***********************************************************************\n*        SEE IF WE HAVE ANY ASSOCIATED ENTRIES                        *\n***********************************************************************\n         LA    R1,OPTNLIST+192     POINT TO NAMEDS OPTION LIST\n         ICM   R2,15,16(R1)        LOAD LENGTH OF RESULT AREA\n         BZ    CK1                 ZERO, USE WHAT WE HAVE\n***********************************************************************\n*                                                                     *\n*        IF THE ELEMENT IS ASSOCIATED WITH ONLY 1 ELEMENT AND         *\n*        IT IS A DATASET, USE THE ASSOCIATION NAME AND THE            *\n*        CATALOG ACB ADDRESS TO \"FAKE\" THE ASSOCIATION NAME           *\n*        BEING THE SAME AS THE ORIGINAL NAME.  THIS WILL              *\n*        HAPPEN WITH PAGE DATA SETS ESPECIALLY OR ESDS DATA           *\n*        SETS.                                                        *\n*                                                                     *\n*        IF THE ELEMENT NAME EXACTLY MATCHES ONE OF THE               *\n*        ASSOCIATION NAMES, USE THE CATALOG ACB ADDRESS TO            *\n*        OBTAIN THE DETAILED INFORMATION.  THIS WILL HAPPEN           *\n*        WITH ICF CATALOGS THEMSELVES.                                *\n*                                                                     *\n*        IF THE ELEMENT IS ASSOCIATED WITH AN ALIAS ENTRY,            *\n*        THEN THE ELEMENT IS A CATALOG.  SVC ROUTINE MUST             *\n*        BE CALLED USING THE CATALOG NAME, AND THEN CALLED            *\n*        AGAIN USING THE ACB ADDRESS FOR THE CATALOG TO               *\n*        GET THE DETAILED INFORMATION.                                *\n*                                                                     *\n***********************************************************************\n         LA    R1,OPTNLIST+192     POINT TO NAMEDS OPTION LIST\n         ICM   R2,15,16(R1)        LOAD LENGTH OF RESULT AREA\n         SRDA  R2,32               SHIFT TO ODD REG OF PAIR\n         D     R2,=F'45'           DIVIDE BY LENGTH OF EACH ENTRY\n         L     R2,20(R1)           LOAD ADDRESS OF RELATED ENTRIES\n         CLI   0(R2),C'X'          IS THIS AN ALIAS ENTRY\n         BE    VSAMRTN5            YES, GO HANDLE CATALOG\n         CLI   0(R2),C'D'          IS THIS A DATASET ENTRY\n         BNE   VSAMRTN2            NO, BRANCH\n         CH    R3,=H'1'            SEE IF ONLY ONE ENTRY\n         BE    VSAMRTN3            YES, GO HANDLE ESDS\nVSAMRTN2 CLC   1(44,R2),CATENT     SEE IF ASSOCIATION TO OURSELVES\n         BE    VSAMRTN4            YES, GO HANDLE DUPL ASSOCIATION\n         LA    R2,45(R2)           INCREMENT TO NEXT ASSOCIATION\n         BCT   R3,VSAMRTN2         LOOP THROUGH ASSOCIATIONS\n         B     CK1                 NOTHING WE CAN HANDLE, CONTINUE\nVSAMRTN3 MVC   CATENT,1(R2)        MOVE ASSOCIATION NAME TO DSNAME\nVSAMRTN4 LA    R1,OPTNLIST+216     POINT TO CATACB OPTION LIST\n         ICM   R2,15,20(R1)        LOAD ADDRESS OF ACB\n         BZ    CK1                 NONE, NOTHING WE CAN DO\n         ST    R2,CATACBA          SAVE ACB ADDRESS\n         BAL   R10,CALLSVC         GO ISSUE SVC26\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    CK1                 GO PROCESS NEW VALUES\n         B     VSAMRTN6            TRY TO RECOVER\nVSAMRTN5 MVC   CATNAME,CATENT      SET CATALOG NAME TO ENTRY NAME\n         BAL   R10,CALLSVC         GO ISSUE SVC26 WITH CATALOG NAME\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   VSAMRTN6            NOT ZERO, TRY TO RECOVER\n         LA    R1,OPTNLIST+216     POINT TO CATACB OPTION LIST\n         ICM   R2,15,20(R1)        LOAD ADDRESS OF ACB\n         BZ    VSAMRTN6            NONE, TRY TO RECOVER\n         ST    R2,CATACBA          SAVE ACB ADDRESS\n         BAL   R10,CALLSVC         GO ISSUE SVC26\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    CK1                 GO PROCESS NEW VALUES\n         B     VSAMRTN4            GO READ WITH ACB ADDRESS\n***********************************************************************\n*        OUR FANCY PROCESSING FAILED, REDO THE ORIGINAL CALL          *\n***********************************************************************\nVSAMRTN6 MVC   CATENT,SAVEENT      SET INITIAL ENTRY NAME\n         MVC   CATNAME,BLNKS       SET INITIAL CATALOG NAME TO BLANKS\n         XC    CATACBA,CATACBA     ZERO CATALOG ACB ADDRESS\n         BAL   R10,CALLSVC         GO ISSUE SVC26\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE ENTYPE RETURN AREA                               *\n*                                                                     *\n***********************************************************************\nCK1      LA    R2,OPTNLIST         POINT TO ENTYPE OPTION LIST\n         ICM   R1,15,16(R2)        LOAD LENGTH OF RESULT AREA\n         BZ    CK2                 ZERO, NON-APPLICABLE\n         L     R3,20(R2)           LOAD ADDRESS OF RESULT AREA\n         MVC   ENTYPE,0(R3)        MOVE ENTRY TYPE TO PARM LIST\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        PROCESS THE ENTNAME RETURN AREA                              *\n*                                                                     *\n***********************************************************************\nCK2      LA    R2,OPTNLIST+24      POINT TO ENTNAME OPTION LIST\n         ICM   R1,15,16(R2)        LOAD LENGTH OF RESULT AREA\n         BZ    CK3                 ZERO, NON-APPLICABLE\n         L     R3,20(R2)           LOAD ADDRESS OF RESULT AREA\n         MVC   ENTNAME,0(R3)       MOVE ENTRY NAME TO PARM LIST\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        PROCESS THE DSETCRDT RETURN AREA                             *\n*                                                                     *\n***********************************************************************\nCK3      LA    R2,OPTNLIST+48      POINT TO DSETCRDT OPTION LIST\n         ICM   R1,15,16(R2)        LOAD LENGTH OF RESULT AREA\n         BZ    CK4                 ZERO, NON-APPLICABLE\n         L     R3,20(R2)           LOAD ADDRESS OF RESULT AREA\n         MVC   DSETCRDT,0(R3)      MOVE CREATION DATE TO PARM LIST\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        PROCESS THE GDGATTR RETURN AREA                              *\n*                                                                     *\n***********************************************************************\nCK4      LA    R2,OPTNLIST+72      POINT TO GDGADDR OPTION LIST\n         ICM   R1,15,16(R2)        LOAD LENGTH OF RESULT AREA\n         BZ    CK5                 ZERO, NON-APPLICABLE\n         L     R3,20(R2)           LOAD ADDRESS OF RESULT AREA\n         MVC   GDGATTR,0(R3)       MOVE GDG ATTRIBUTES TO PARM LIST\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        PROCESS THE GDGLIMIT RETURN AREA                             *\n*                                                                     *\n***********************************************************************\nCK5      LA    R2,OPTNLIST+96      POINT TO GDGLIMIT OPTION LIST\n         ICM   R1,15,16(R2)        LOAD LENGTH OF RESULT AREA\n         BZ    CK6                 ZERO, NON-APPLICABLE\n         L     R3,20(R2)           LOAD ADDRESS OF RESULT AREA\n         MVC   GDGLIMIT,0(R3)      MOVE GDG LIMIT TO PARM LIST\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        PROCESS THE LRECL RETURN AREA                                *\n*                                                                     *\n***********************************************************************\nCK6      LA    R2,OPTNLIST+120     POINT TO LRECL OPTION LIST\n         ICM   R1,15,16(R2)        LOAD LENGTH OF RESULT AREA\n         BZ    CK7                 ZERO, NON-APPLICABLE\n         L     R3,20(R2)           LOAD ADDRESS OF RESULT AREA\n         MVC   LRECL,0(R3)         MOVE AVERAGE LRECL TO PARM LIST\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        PROCESS THE AMDSBCAT RETURN AREA                             *\n*                                                                     *\n***********************************************************************\nCK7      LA    R2,OPTNLIST+144     POINT TO AMDSBCAT OPTION LIST\n         ICM   R1,15,16(R2)        LOAD LENGTH OF RESULT AREA\n         BZ    CK8                 ZERO, NON-APPLICABLE\n         L     R3,20(R2)           LOAD ADDRESS OF RESULT AREA\n         USING S26AMDA,R3          SET ADDRESSABILITY TO RESULT AREA\n         MVC   MAXLRECL,AMDLRECL   MOVE MAXIMUM LRECL TO PARM LIST\n         MVC   CISIZE,AMDCINV      MOVE CI SIZE TO PARM LIST\n         MVC   VSAMATTR,AMDATTR    MOVE VSAM ATTRIBUTES TO PARM LIST\n         DROP  R3                  DROP ADDRESSABILITY TO RESULT AREA\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        PROCESS THE ENTVOL RETURN AREA                               *\n*                                                                     *\n***********************************************************************\nCK8      LA    R2,OPTNLIST+168     POINT TO ENTVOL OPTION LIST\n         ICM   R1,15,16(R2)        LOAD LENGTH OF RESULT AREA\n         BZ    CKEND               ZERO, NON-APPLICABLE\n         L     R3,20(R2)           LOAD ADDRESS OF RESULT AREA\n         USING S26VOLA,R3          SET ADDRESSABILITY TO RESULT AREA\n***********************************************************************\n*                                                                     *\n*        PROCESS INDIVIDUAL VARIABLE LENGTH VOLUME ENTRIES            *\n*        UNTIL THE END OF THE ENTVOL RETURN AREA HAS BEEN             *\n*        REACHED                                                      *\n*                                                                     *\n*        THE ENTVOL RETURN AREA CAN CONTAIN MULTIPLE VOLUME           *\n*        ENTRIES.  EACH VOLUME ENTRY CONTAINS A FIXED AREA            *\n*        FOLLOWED BY A 20 BYTE EXTENT DESCRIPTOR FOR EACH             *\n*        EXTENT.                                                      *\n*                                                                     *\n***********************************************************************\n         AR    R1,R3               CALCULATE END OF RESULTS AREA\n         LA    R4,VOLSER           POINT TO FIRST VOLUME FIELD\n         USING VOLSER,R4           SET ADDR TO FIRST VOLUME SAVE AREA\n***********************************************************************\n*                                                                     *\n*        PROCESS THE NEXT VOLUME ENTRY                                *\n*                                                                     *\n***********************************************************************\nCK8A     CR    R1,R3               SEE IF END OF RESULTS AREA\n         BNH   CKEND               YES, BRANCH\n         MVC   VOLSER,CVOLSER      SAVE VOLSER\n         MVC   DEVTYP,CDEVTYP      SAVE DEVICE TYPE\n         XC    NOEXT,NOEXT         SET NUMBER OF EXTENTS TO ZERO\n         XC    NOTRKSA,NOTRKSA     SET NUMBER OF TRKS ALLOCATED TO ZERO\n         XC    NOTRKSU,NOTRKSU     SET NUMBER OF TRKS USED TO ZERO\n***********************************************************************\n*                                                                     *\n*        GET NUMBER OF EXTENTS.  THERE MAY BE NONE FOR CANDIDATE      *\n*        VOLUMES OR NONVSAM ENTRIES                                   *\n*                                                                     *\n***********************************************************************\n         TM    CVOLFLG,CCAND       SEE IF CANDIDATE ONLY\n         BO    CK8D                YES, BRANCH\n         CLI   CNOEXT,X'FF'        CHECK NUMBER OF EXTENTS\n         BE    CK8D                X'FF', PROBABLY NONVSAM\n         SLR   R9,R9               ZERO REGISTER FOR ICM\n         ICM   R9,1,CNOEXT         LOAD NUMBER OF EXTENTS\n         BZ    CK8D                NO EXTENTS, GET OUT\n         STH   R9,NOEXT            SAVE NUMBER OF EXTENTS\n***********************************************************************\n*                                                                     *\n*        LOOP THROUGH THE EXTENT DESCRIPTORS WHILE ACCUMULATING       *\n*        THE TOTAL NUMBER OF TRACKS ALLOCATED IN ALL DESCRIPTORS.     *\n*                                                                     *\n***********************************************************************\n         LA    R5,CEXTLEN+2        LOAD START ADDR OF 1ST EXT DESCR\n         USING S26EXTA,R5          SET ADDRESSABILITY TO EXT DESCR\n         SLR   R14,R14             ZERO TRACK ACCUMULATOR\nCK8B     AH    R14,CEXTRKS         ADD NBR OF TRKS IN EXT TO ACCUM\n         LA    R5,20(R5)           INCREMENT TO NEXT EXT DESCR\n         BCT   R9,CK8B             LOOP ON NUMBER OF EXTENTS\n***********************************************************************\n*                                                                     *\n*        CALCULATE THE NUMBER OF TRACKS USED BY USING THE             *\n*        FOLLOWING EQUASION:                                          *\n*                                                                     *\n*        TRKSU = TRKSA * HI-USED-RBA / HI-ALLOC-RBA                   *\n*                                                                     *\n***********************************************************************\n         STH   R14,NOTRKSA         SAVE NUMBER OF TRKS ALLOCATED\n         OC    CHARBA,CHARBA       TEST HIGH ALLOCATED RBA\n         BZ    CK8D                ZERO, 0 PERCENT USED\n         SRDA  R14,32              SHIFT TO SECOND REGISTER OF PAIR\n         M     R14,CHURBA          MULTIPLY TRKS BY HIGH USED RBA\n         D     R14,CHARBA          DIVIDE BY HIGH ALLOC RBA\n         LTR   R14,R14             TEST REMAINDER\n         BZ    CK8C                ZERO, NO PARTIAL TRACK\n         LA    R15,1(R15)          ADD 1 TO QUOTIENT\nCK8C     STH   R15,NOTRKSU         SAVE NUMBER OF TRACKS USED\n***********************************************************************\n*                                                                     *\n*        INCREMENT TO THE NEXT VOLUME ENTRY                           *\n*                                                                     *\n*        IF THE CURRENT VOLUME ENTRY IS FOR A SEQUENCE SET,           *\n*        DO NOT INCREMENT THE VOLUME COUNT OR INCREMENT TO            *\n*        THE NEXT VOLUME SAVE AREA.  THIS WILL ALLOW THE              *\n*        NEXT ENTRY TO OVERLAY THE ONE JUST USED FOR THE              *\n*        SEQUENCE SET ENTRY.                                          *\n*                                                                     *\n***********************************************************************\nCK8D     CLI   CEXTFLG,X'FF'       CHECK MISC BIT SWITCHES\n         BE    CK8E                X'FF', PROBABLY NONVSAM\n         TM    CEXTFLG,CSEQSET     IS THIS A SEQUENCE SET?\n         BZ    CK8E                NO, BRANCH\n         LH    R15,NOEXT           RELOAD NUMBER OF EXTENTS\n         B     CK8F                SKIP INCREMENT TO NEXT VOLUME AREA\nCK8E     LH    R15,NBRVOLS         LOAD NUMBER OF VOLUMES\n         LA    R15,1(R15)          ADD 1 TO NUMBER OF VOLUMES\n         STH   R15,NBRVOLS         SAVE NEW NUMBER OF VOLUMES\n         LH    R15,NOEXT           RELOAD NUMBER OF EXTENTS\n         LA    R4,16(R4)           INCREMENT TO NEXT VOLUME SAVE AREA\nCK8F     LA    R3,CEXTLEN+2        LOAD ADDR END OF VOL FIXED AREA\n         LTR   R15,R15             TEST NUMBER OF EXTENTS\n         BZ    CK8A                ZERO, END OF VOLUME ENTRY\nCK8G     LA    R3,20(R3)           INCREMENT PAST EXTENT DESCRIPTOR\n         BCT   R15,CK8G            LOOP THROUGH EXTENT DESCRIPTORS\n         B     CK8A                END OF VOLUME ENTRY\n         DROP  R3                  DROP ADDRESSABILITY TO RESULT AREA\n         SPACE 3\nCKEND    L     R1,S26WRK           LOAD WORK AREA ADDRESS\n         FREEMAIN R,LV=20480,A=(1) FREE SVC26 WORK AREA\n         LR    R1,R13              SAVE GETMAIN ADDRESS\n         L     R13,4(R1)           RESTORE OLD SAVE ADDRESS\n         FREEMAIN R,LV=LGETM,A=(1)  FREE WORK AREA\n         RETURN (14,12),RC=0       RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CALL SVC 26 TO RETURN DATASET/GDG BASE INFORMATION           *\n*                                                                     *\n*        RETURN WILL BE MAKE TO REGISTER 10 ON ENTRY                  *\n*                                                                     *\n***********************************************************************\nCALLSVC  MVC   S26DS,CATENT        SAVE DSN\n         MVC   S26CDSN,CATNAME     SET CATALOG DSNAME\n         MVI   ENTYPE,C' '         SET ENTRY TYPE TO BLANK\n         MVC   ENTNAME,BLNKS       SET ENTRY NAME TO BLANKS\n         ZAP   DSETCRDT,=P'0'      SET CREATION DATE TO ZERO\n         MVI   GDGATTR,X'00'       SET GDG ATTRIBUTES TO ZERO\n         MVI   GDGLIMIT,X'00'      SET GDG LIMIT TO ZERO\n         XC    LRECL,LRECL         ZERO THE AVERAGE LRECL\n         XC    MAXLRECL,MAXLRECL   ZERO THE MAXIMUM LRECL\n         XC    CISIZE,CISIZE       ZERO THE CI SIZE\n         MVI   VSAMATTR,X'00'      ZERO THE VSAM ATTRIBUTES\n         XC    NBRVOLS,NBRVOLS     ZERO THE NUMBER OF VOLUMES\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SET UP STANDARD PARAMETER LIST WITHOUT A CATALOG ACB         *\n*        ADDRESS.                                                     *\n*                                                                     *\n***********************************************************************\nSTS26    XC    CTGPL2,CTGPL2       ZERO PARM LIST\n         MVI   CTGPL2,B'00000110'  SET CTGOPTN1\n         MVI   CTGPL2+1,B'01000001' SET CTGOPTN2\n         MVI   CTGPL2+2,B'10000001' SET CTGOPTN3\n         LA    R1,S26DS            LOAD ADDRESS OF DSNAME\n         ST    R1,CTGPL2+4         SET CTGENT\n         LA    R1,S26CDSN          LOAD ADDRESS OF CATALOG DSN\n         ST    R1,CTGPL2+8         SAVE CTGCAT\n         LH    R1,=H'20480'        LOAD LENGTH OF WORK AREA\n         L     R15,S26WRK          LOAD ADDRESS OF SVC26 WORK AREA\n         STH   R1,0(R15)           SAVE LENGTH AT START OF WORK AREA\n         ST    R15,CTGPL2+12       SET CTGWKA\n         MVI   CTGPL2+16,B'00100001' SET CTGOPTNS\n         LA    R15,10              LOAD NUMBER OF OPTIONS\n         STC   R15,CTGPL2+19       SET CTGNOFLD\n         LA    R14,OPTNLIST        LOAD ADDRESS OF OPTION LIST\n         LA    R1,CTGPL2+28        SAVE IN CTGFIELD\n         LA    R2,OPT1             LOAD ADDRESS OF OPTION NAME LIST\nOPTLOOP  XC    0(24,R14),0(R14)    ZERO THE ENTRY\n         MVI   0(R14),X'01'        SET FIRST FIELD\n         ST    R2,8(R14)           SET ADDRESS OF OPTION NAME\n         ST    R14,0(R1)           SAVE OPTNLIST ADDRESS IN CTGPL\n         LA    R1,4(R1)            POINT TO NEXT OPTNLIST ADDRESS\n         LA    R14,24(R14)         POINT TO NEXT ENTRY IN OPTION LIST\n         LA    R2,8(R2)            POINT TO NEXT OPTION NAME\n         BCT   R15,OPTLOOP         LOOP\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        IF A CATALOG ACB ADDRESS HAS BEEN SPECIFIED IN THE           *\n*        FIELD CATACBA, MODIFY THE PARAMETER LIST TO UTILIZE          *\n*        THIS ADDRESS INSTEAD OF THE DEFAULT CATALOG SEARCH           *\n*        SEQUENCE.                                                    *\n*                                                                     *\n*        IF A CATALOG DSNAME HAS BEEN SPECIFIED IN THE FIELD          *\n*        CATNAME, MODIFY THE PARAMETER LIST TO SEARCH ONLY            *\n*        THIS CATALOG INSTEAD OF ALL CATALOGS.                        *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         OC    CATACBA,CATACBA     TEST ACB ADDRESS\n         BZ    NOACB               NONE, GO CHECK CATALOG DSN\n         MVI   CTGPL2,B'00000100'  SET CTGOPTN1\n         MVI   CTGPL2+1,B'00000001' SET CTGOPTN2\n         L     R1,CATACBA          LOAD ADDRESS OF CATALOG ACB\n         ST    R1,CTGPL2+8         SAVE CTGCAT\n         MVI   CTGPL2+18,C'D'      SET FOR DATASET COMPONENT\n         MVI   CTGPL2+19,X'09'     SET CTGNOFLD\n         B     DOS26               GO DO SVC26 CALL\nNOACB    CLI   CATNAME,C' '        SEE IF CATALOG DSNAME SPECIFIED\n         BE    DOS26               NO, BRANCH\n         MVI   CTGPL2+1,B'00000001' SET CTGOPTN2\nDOS26    LA    R1,CTGPL2           LOAD ADDRESS OF WORK AREA\n         SVC   26                  CALL CATALOG SEARCH FOR GDG BASE\n         BR    R10                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS USED BY THIS ROUTINE                               *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*        CATALOG LOCATE OPTIONS LIST                                  *\n***********************************************************************\nOPT1     DC    CL8'ENTYPE  '\nOPT2     DC    CL8'ENTNAME '\nOPT3     DC    CL8'DSETCRDT'\nOPT4     DC    CL8'GDGATTR '\nOPT5     DC    CL8'GDGLIMIT'\nOPT6     DC    CL8'LRECL   '\nOPT7     DC    CL8'AMDSBCAT'\nOPT8     DC    CL8'ENTVOL  '\nOPT9     DC    CL8'NAMEDS  '\nOPT10    DC    CL8'CATACB  '\n         SPACE 3\nBLNKS    DC    CL120' '            CHARACTER STRING OF BLANKS\n         EJECT\n         LTORG\n***********************************************************************\n*                                                                     *\n*        PARSE CONTROL BLOCKS                                         *\n*                                                                     *\n***********************************************************************\nDSATPCL  IKJPARM DSECT=DSATPDL\nPARSDSN  IKJPOSIT DSNAME\nOPT      IKJKEYWD DEFAULT='LONG'\n         IKJNAME 'LONG'\n         IKJNAME 'SHORT'\nDAOPT    IKJKEYWD DEFAULT='ALL'\n         IKJNAME 'ALL'\n         IKJNAME 'DAONLY'\n         IKJENDP\n         EJECT\n         IKJUPT\n         EJECT\n         IKJPSCB\n         EJECT\nUCB      DSECT\n         IEFUCBOB LIST=YES\n         EJECT\n         CVT   LIST=YES,DSECT=YES\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DYNAMIC WORK AREA FOR SPECIAL VSAM CATALOG ACCESS RTN        *\n*                                                                     *\n***********************************************************************\nVSAMWRK  DSECT\n         DS    18F                 PROGRAM SAVE AREA\nOPTNLIST DS    10CL24              SVC26 OPTION LIST\nCTGPL2   DS    XL68                CATALOG MANAGEMENT PARAMETER LIST\n*\n         DS    0F                  ALIGNMENT\nS26CDSN  DS    CL44                CATALOG DSNAME\nS26DS    DS    CL44                ACTUAL DSNAME INDEX\nS26WRK   DS    F                   ADDRESS OF SVC26 WORK AREA\nSAVEENT  DS    CL44                ORIGINAL CATALOG ENTRY NAME\nCATENT   DS    CL44                CATALOG ENTRY NAME\nCATNAME  DS    CL44                CATALOG NAME\nCATACBA  DS    F                   ADDRESS OF CATALOG ACB\n*\nLGETM    EQU   *-VSAMWRK           LENGTH OF WORK AREA\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SVC26 ENTVOL FIXED AREA                                      *\n*                                                                     *\n***********************************************************************\nS26VOLA  DSECT\nCVOLSEQ  DS    H                   VOLUME SEQUENCE NUMBER\nCDEVTYP  DS    CL4                 DEVICE TYPE\nCVOLSER  DS    CL6                 VOLSER\nCFILESEQ DS    H                   FILE SEQUENCE NUMBER (TAPE)\nCVOLFLG  DS    X                   VOLUME FLAGS\nCPRIME   EQU   X'80'               PRIME AREA\nCCAND    EQU   X'40'               CANDIDATE\nCOVFL    EQU   X'20'               OVERFLOW AREA\nCNOEXT   DS    X                   NUMBER OF EXTENTS ON THIS VOLUME\nCHKRBA   DS    F                   HIGH KEY RBA\nCHURBA   DS    F                   HIGH USED RBA\nCHARBA   DS    F                   HIGH ALLOCATED RBA\nCCISIZE  DS    F                   CI SIZE\nCBLKTR   DS    H                   BLOCKS PER TRACK\nCTRKAL   DS    H                   NUMBER OF TRKS PER ALLOC UNIT\nCEXTFLG  DS    X                   EXTENT FLAGS\nCSEQSET  EQU   X'80'               SEQUENCE SET IS WITH DATA (INDEX)\nCNOTPREF EQU   X'40'               EXTENTS ARE NOT PREFORMATTED\n         DS    CL2                 UNKNOWN (CONTAINS X'FFFF'\n         DS    CL4                 UNKNOWN (CONTAINS X'00000000'\nCEXTLEN  DS    XL2                 LENGTH OF EXTENT DESCRIPTIONS\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SVC26 ENTVOL VARIABLE EXTENT DESCRIPTION AREA                *\n*                                                                     *\n***********************************************************************\nS26EXTA  DSECT\nCEXTNBR  DS    H                   EXTENT NUMBER\nCLOWCCHH DS    XL4                 EXTENT LOW CCHH\nCHICCHH  DS    XL4                 EXTENT HIGH CCHH\nCEXTRKS  DS    H                   EXTENT NUMBER OF TRACKS\nCLOWRBA  DS    F                   EXTENT LOW RBA\nCHIRBA   DS    F                   EXTENT HIGH RBA\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SVC26 AMDSBCAT AREA (AMDSB)                                  *\n*                                                                     *\n***********************************************************************\nS26AMDA  DSECT\nAMDSBID  DS    X                   AMDSB INDENTIFIER X'60'\nAMDATTR  DS    X                   ATTRIBUTES\nAMDDST   EQU   X'80'               KSDS (OFF FOR ESDS)\nAMDWCK   EQU   X'40'               WRITE VALIDITY CHECK\nAMDSDT   EQU   X'20'               IMBED\nAMDREPL  EQU   X'10'               REPLICATE\nAMDORDER EQU   X'08'               ORDERED\nAMDRANGE EQU   X'04'               DIVIDED INTO KEY RANGES\nAMDRRDS  EQU   X'02'               RELATIVE RECORDS\nAMDSPAN  EQU   X'01'               SPANNED RECORDS\nAMDLEN   DS    H                   LENGTH OF AMDSB\nAMDNEST  DS    0H                  NBR OF INDEX ENTRIES - OR -\nAMDAKRKP DS    H                   RKP OF ALTERNATE KEY\nAMDRKP   DS    H                   RELATIVE KEY POSITION\nAMDKEYLN DS    H                   KEY LENGTH\nAMDPCTCA DS    X                   PERCENT FREESPACE FOR CA\nAMDPCTCI DS    X                   PERCENT FREESPACE FOR CI\nAMDCIPCA DS    H                   NBR CI'S IN A CA\nAMDFSCA  DS    H                   NBR FREE CI'S IN A CA\nAMDFSCI  DS    F                   NBR FREE BYTES IN A CA\nAMDCINV  DS    F                   CI SIZE\nAMDLRECL DS    F                   MAX RECORD SIZE\nAMDHLRBA DS    0F                  RBA OF HI-LEVEL INDEX RCD (KSDS)\nAMDNSLOT DS    F                   NBR OF RCD SLOTS PER CI (RRDS)\nAMDSSRBA DS    0F                  RBA OF FIRST SEQ-SET RECD (KSDS)\nAMDMAXRR DS    F                   MAX VALID REL RCD NBR (RRDS)\nAMDPARDB DS    F                   ADDR OF FIRST ARDB\nAMDATTR3 DS    X                   ATTRIBUTES\nAMDUNQ   EQU   X'80'               NON-UNIQUE KEYS (OFF FOR UNIQUE)\nAMDFAULT EQU   X'40'               STAGED BY CYLINDER FAULT\nAMDBIND  EQU   X'20'               STAGED AND BOUND\nAMDWAIT  EQU   X'10'               WAIT FOR DESTAGING\nAMDLM    EQU   X'08'               LOADED\nAMDSTRNO DS    X                   NUMBER OF CONCURRENT REQUESTS\nAMDDUI   DS    XL4                 IMS DBRC USAGE INDICATORS\nAMDBFNO  DS    H                   NUMBER OF DATA OR INDEX BUFFERS\nAMDSTAT  DS    0CL48               STATISTICS\nAMDSTSP  DS    CL8                 TIME STAMP\nAMDNIL   DS    H                   NUMBER OF INDEX LEVELS\nAMDNEXT  DS    H                   NUMBER OF EXTENTS IN DATA SET\nAMDNLR   DS    F                   NUMBER OF RECORDS\nAMDDELR  DS    F                   NUMBER OF DELETED RECORDS\nAMDIREC  DS    F                   NUMBER OF INSERTED RECORDS\nAMDUPR   DS    F                   NUMBER OF UPDATED RECORDS\nAMDRETR  DS    F                   NUMBER OF RETRIEVED RECORDS\nAMDASPA  DS    F                   BYTES OF FREE SPACE\nAMDNCIS  DS    F                   NUMBER OF CI SPLITS\nAMDNCAS  DS    F                   NUMBER OF DA SPLITS\nAMDEXCP  DS    F                   NUMBER OF VSAM EXCPS\n         EJECT\n***********************************************************************\n*                                                                     *\n*        RESULTS OF SPECIAL VSAM CATALOG ACCESS ROUTINE               *\n*                                                                     *\n***********************************************************************\nRESULTS  DSECT\nENTYPE   DS    C                   TYPE OF CATALOG ENTRY\nENTNAME  DS    CL44                NAME OF CATALOG ENTRY\nDSETCRDT DS    PL3                 CREATION DATE\nGDGATTR  DS    X                   GDG ATTRIBUTES\nGDGEMP   EQU   X'80'               EMPTY OPTION\nGDGSCR   EQU   X'40'               SCRATCH OPTION\nGDGLIMIT DS    X                   GDG LIMIT\nNBRVOLS  DS    H                   NUMBER OF VOLUME ENTRIES\nLRECL    DS    F                   AVG LRECL OF DATA SET\nMAXLRECL DS    F                   MAX LRECL OF DATA SET\nCISIZE   DS    F                   CISIZE OF DATA SET\nVSAMATTR DS    X                   VSAM ATTRIBUTES\nIMBED    EQU   X'20'               DATA SET CONTAINS IMBEDDED KEYS\nREPLIC   EQU   X'10'               DATA SET CONTAINS REPLICATED KEYS\nSPANNED  EQU   X'01'               DATA SET CONTAINS SPANNED RECORDS\n         DS    X                   RESERVED\n***********************************************************************\n*        THE FOLLOWING FIELDS ARE REPEATED AS REQUIRED                *\n***********************************************************************\nVOLSER   DS    CL6                 VOLSER\nDEVTYP   DS    XL4                 DEVICE TYPE\nNOEXT    DS    H                   NUMBER OF EXTENTS ON VOL\nNOTRKSA  DS    H                   NUMBER OF TRKS ALLOC ON VOL\nNOTRKSU  DS    H                   NUMBER OF TRKS USED ON VOL\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FZ50V0": {"ttr": 3080, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD (FZ50AV0) /*\n\n                    FIRST UNION BANK USERMOD 50\n\n         THIS USERMOD UPDATES THE JES2 JQE AND THE QSE CONTROL\n         BLOCKS TO ADD INSTALLATION FIELDS.  SINCE THESE CONTROL\n         BLOCKS ARE USED BY ALMOST EVERY MODULE, ASSEMBLIES OF ALL\n         JES2 SOURCE MODULES WILL BE FORCED.\n                                                                     */.\n++ VER (Z038) FMID(HJE2221) PRE(PXB2221) .\n++ MACUPD($JQE)\n   ASSEM(HASPX001,HASPX97,HASPX97A,HASPX97C,HASPX97E,HASPX97I,\n         HASPX97J,HASPX97N,HASPX97P,HASPX97R,HASPX97S,HASPX97X,\n         HASPAM,HASPBLKS,HASPBSC,HASPCKDS,HASPCKPT,HASPCNVT,\n         HASPCOMM,HASPCON,HASPDOC,HASPDYN,HASPFMT0,HASPFMT1,\n         HASPFMT2,HASPFMT3,HASPFMT4,HASPFMT5,HASPFMT6,HASPFMT7,\n         HASPFSSM,HASPFSSP,HASPHOPE,HASPIRA,HASPIRDA,HASPIRMA,\n         HASPIRPL,HASPIRRE,HASPJOS,HASPMISC,HASPMSG,HASPNET,\n         HASPNUC,HASPPRPU,HASPPSO,HASPRAS,HASPRDR,HASPRTAM,\n         HASPSCAN,HASPSERV,HASPSNA,HASPSPOL,HASPSSSM,HASPSTAB,\n         HASPSTAM,HASPSXIT,HASPTABS,HASPTERM,HASPTRAK,HASPWARM,\n         HASPXEQ) .\n./ CHANGE NAME=$JQE,LIST=ALL\nJQEXOWNR DS    CL8                 RACF OWNER OF THE JOB (FOR IOF) FUNB\nJQEXTHRN DS    CL8                 THREAD NAME                     FUNB\nJQEXEXCN DS    CL8                 EXCLUDE NAME                    FUNB\nJQEXRLSN DS    CL8                 RELEASE NAME                    FUNB\n*                                                                  FUNB\nJQEXFLG1 DS    X                   INSTALLATION FLAG BYTE 1        FUNB\nJQEXPROD EQU   C'P'                PRODUCTION JOB                  FUNB\nJQEXTEST EQU   C'T'                TEST JOB                        FUNB\n*                                                                  FUNB\nJQEXFLG2 DS    X                   INSTALLATION FLAG BYTE 2        FUNB\nJQEXTHRD EQU   X'80'               JOB HAS THREAD NAME             FUNB\nJQEXXCLU EQU   X'40'               JOB HAS EXCLUDE NAME            FUNB\nJQEXSETP EQU   X'20'               JOB HAS SETUP - NOT WAITING     FUNB\nJQEXWSET EQU   X'30'               JOB HAS SETUP - WAITING         FUNB\nJQEXUHLD EQU   X'08'               JOB IS WAITING USER HOLD        FUNB\nJQEXSMF  EQU   X'04'               SMF TYPE 30 RECORD WAS WRITTEN  FUNB\nJQEXENDJ EQU   X'02'               END OF JOB MESSAGE WAS WRITTEN  FUNB\nJQEXRLSE EQU   X'01'               JOB HAS RELEASE REQUESTS        FUNB\n*                                                                  FUNB\nJQEXFLG3 DS    X                   INSTALLATION FLAG BYTE 3        FUNB\nJQEXJCLE EQU   X'80'               JOB FAILED WITH JCL ERROR       FUNB\nJQEXABND EQU   X'40'               JOB FAILED WITH AN ABEND        FUNB\nJQEXOWNJ EQU   X'20'               OWNERID SUPPLIED FROM JOBPARM   FUNB\n*                                                                  FUNB\nJQEXFLG4 DS    X                   INSTALLATION FLAG BYTE 4        FUNB\n*                                                                  FUNB\nJQERESRT DS    BL4                 RESOURCE ROUTING FLAGS          FUNB\n*                                                                  FUNB\n++ MACUPD($QSE)\n   ASSEM(HASPX001,HASPX97,HASPX97A,HASPX97C,HASPX97E,HASPX97I,\n         HASPX97J,HASPX97N,HASPX97P,HASPX97R,HASPX97S,HASPX97X,\n         HASPAM,HASPBLKS,HASPBSC,HASPCKDS,HASPCKPT,HASPCNVT,\n         HASPCOMM,HASPCON,HASPDOC,HASPDYN,HASPFMT0,HASPFMT1,\n         HASPFMT2,HASPFMT3,HASPFMT4,HASPFMT5,HASPFMT6,HASPFMT7,\n         HASPFSSM,HASPFSSP,HASPHOPE,HASPIRA,HASPIRDA,HASPIRMA,\n         HASPIRPL,HASPIRRE,HASPJOS,HASPMISC,HASPMSG,HASPNET,\n         HASPNUC,HASPPRPU,HASPPSO,HASPRAS,HASPRDR,HASPRTAM,\n         HASPSCAN,HASPSERV,HASPSNA,HASPSPOL,HASPSSSM,HASPSTAB,\n         HASPSTAM,HASPSXIT,HASPTABS,HASPTERM,HASPTRAK,HASPWARM,\n         HASPXEQ) .\n./ CHANGE NAME=$QSE,LIST=ALL\n*                                                                  FUNB\nQSERESTB DS    F                   RESOURCE ROUTING BITS ATTACHED  FUNB\n*                                                                  FUNB\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FZ51V0": {"ttr": 3082, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "++ USERMOD (FZ51AV0) /*\n\n                    FIRST UNION BANK USERMOD 51\n\n         THIS USERMOD ADDS A USER MACRO $FCSDTE TO JES2.  THIS\n         MACRO MAPS THE DTEWORK AREA OF THE DTE FOR USE BY ALL\n         ROUTINES WHICH USE ONE OF THE INSTALLATION DEFINED\n         DTES.\n\n                                                                     */.\n++ VER (Z038) FMID(HJE2221) .\n++ MAC($FCSDTE) DISTLIB(HASPSRC).\n         MACRO\n         $FCSDTE ,\n***********************************************************************\n*                                                                     *\n*        INSTALLATION COMMON EXTENSION TO THE DTE                     *\n*                                                                     *\n***********************************************************************\nDTEUMSG  DS   CL133                WTO LIST FORM WORK AREA\nDTEFLAGS DS   X                    DTE FLAGS\nJINIT    EQU  X'80'                JINF ROUTINE CTL BLOCKS INITIALIZED\nJALLOC   EQU  X'40'                JINF ROUTINE FILE ALLOCATED\nJOPEN    EQU  X'20'                JINF ROUTINE FILE OPENED\nJACT     EQU  X'10'                JINF ROUTINE FILE I/O ACTIVE\nUENABLE  EQU  X'80'                UCC7 ROUTINE INTERFACE ENABLED\nULOADED  EQU  X'40'                UCC7 INTERFACE ROUTINE LOADED\nDTEFQUE  DS   F                    ADDR OF WORK QUEUE\nDTEJITBA DS   F                    ADDR OF CURRENT JITB\nDTEUEXTN DS   0F                   USER WORK EXTENSION AREA\n         MEND\n++ USERMOD (FZ51BV0) /*\n\n                    FIRST UNION BANK USERMOD 51\n\n         THIS USERMOD ADDS A USER MACRO $FCSUCT TO JES2.  THIS\n         MACRO MAPS THE CONTENTS OF THE UCT FIELD WHICH IS A\n         WORK AREA DEFINED IN A PRE-INITIALIZATION EXIT AND\n         POINTED TO BY THE HCT.\n\n                                                                     */.\n++ VER (Z038) FMID(HJE2221) .\n++ MAC($FCSUCT) DISTLIB(HASPSRC).\n         MACRO\n         $FCSUCT ,\n***********************************************************************\n*                                                                     *\n*        INSTALLATION USER CONTROL TABLE                              *\n*                                                                     *\n***********************************************************************\nUCT      DSECT\nUCTID    DS   CL4\nUCTJITOP DS   X                    JOB INFO TASK INITIALIZATION OPTION\nUCTJITDR EQU  X'80'                LEAVE FILE INITIALLY DRAINED\n         DS   CL3                  RESERVED\nUCTJITDS DS   CL44                 JOB INFO TASK DSNAME\nUCTJITST DS   F                    ADDR OF JOB INFO TASK SCAN TABLE\nUCTJITDT DS   F                    ADDR OF JOB INFO TASK DTE\nUCTJITA  DS   F                    ADDR OF JOB INFO TASK EPLOC\nUCTJITH  DS   F                    ADDR OF JOB INFO TASK CHAIN HEAD\nUCTJITQ  DS   F                    ADDR OF JOB INFO TASK QUEUE\nUCTUC7DT DS   F                    ADDR OF UCC7 TASK DTE\nUCTUC7A  DS   F                    ADDR OF UCC7 TASK EPLOC\nUCTUC7H  DS   F                    ADDR OF UCC7 TASK CHAIN HEAD\nUCTUC7Q  DS   F                    ADDR OF UCC7 TASK QUEUE\nUCTXLAT  DS   CL256                ADDR OF PRINTER NULL TRANSLATE TBL\n         MEND\n++ USERMOD (FZ51CV0) /*\n\n                    FIRST UNION BANK USERMOD 51\n\n         THIS USERMOD ADDS A USER MACRO $FCSUHDR TO JES2.  THIS\n         MACRO MAPS THE NJE USER HEADER WHICH WILL BE ADDED TO\n         THE JES2 NJE HEADER RECORDS AT THE END OF THE JCT.\n\n                                                                     */.\n++ VER (Z038) FMID(HJE2221) .\n++ MAC($FCSUHDR) DISTLIB(HASPSRC).\n         MACRO\n         $FCSUHDR ,\n***********************************************************************\n*                                                                     *\n*        FCS USER HEADER MAPPING DSECT                                *\n*                                                                     *\n***********************************************************************\nFCSUHDR  DSECT\nFCSUHDRL DS    H                   LENGTH OF USER HEADER\nFCSUHTYP DS    X                   TYPE OF HEADER\nFCSUHMOD DS    X                   MODIFIER VALUE\nFCSUHID  DS    CL4                 USER HEADER IDENTIFIER\nFCSUHACL DS    H                   LENGTH OF ACCOUNTING FIELD\nFCSUHACT DS    CL20                ACCOUNTING FIELD\nFCSUHOWN DS    CL8                 JOB OWNERID  (JQEXOWNR)\nFCSUHTHN DS    CL8                 THREAD NAME  (JQEXTHRN)\nFCSUHEXN DS    CL8                 EXCLUDE NAME (JQEXEXCN)\nFCSUHRLN DS    CL8                 RELEASE NAME (JQEXRLSN)\nFCSUHFL1 DS    X                   FLAG FIELD 1 (JQEXFLD1)\nFCSUHFL2 DS    X                   FLAG FIELD 2 (JQEXFLD2)\nFCSUHFL3 DS    X                   FLAG FIELD 3 (JQEXFLD3)\nFCSUHFL4 DS    X                   FLAG FIELD 4 (JQEXFLD4)\nFCSUHUSR DS    CL8                 RACF VERIFIED USERID\n         DS    CL32                RESERVED\nFCSUHDRS EQU   *-FCSUHDR           LENGTH OF USER HEADER\n         MEND\n++ USERMOD (FZ51DV0) /*\n\n                    FIRST UNION BANK USERMOD 51\n\n         THIS USERMOD ADDS A USER MACRO $FCSFMTP TO JES2.  THIS\n         MACRO MAPS THE PARAMETER LIST WHICH IS PASSED FROM AN\n         EXIT 5 ROUTINE TO AN EXIT 255 JOB FORMAT ROUTINE.\n\n                                                                     */.\n++ VER (Z038) FMID(HJE2221) .\n++ MAC($FCSFMTP) DISTLIB(HASPSRC).\n         MACRO\n         $FCSFMTP ,\n***********************************************************************\n*                                                                     *\n*        MAP THE PARMAMETER  LIST WHICH IS PASSED TO AN EXIT 255      *\n*        ROUTINE WHICH DISPLAYS JOB INFORMATION FOR A REQUESTED       *\n*        JOB ACCORDING TO THE SELECTION CRITERIA IN THIS PARM         *\n*        LIST.                                                        *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*                       QBITS                                         *\n*                                                                     *\n*        THESE FIRST BYTE IS USED TO DEFINE THE QUEUE WHICH IS        *\n*        ELIGIBLE FOR DISPLAY.  THE SECOND BYTE IS USED TO            *\n*        FURTHER DEFINE ELIGIBLE JOBS BUT ARE NOT SPECIFICALLY        *\n*        ON A JES2 QUEUE.                                             *\n*                                                                     *\n*                              NOTE                                   *\n*                                                                     *\n*        TURNING ON ALL BITS EXCEPT QHOLD WILL RESULT IN ALL          *\n*        JOBS IN ALL QUEUES BEING ELIGIBLE.                           *\n*                                                                     *\n***********************************************************************\n         DS    0F                  ALIGNMENT\nQBITS    DS    XL2                 Q= OPTION BITS\nQCNV     EQU   X'80',0             Q=CNV\nQXEQ     EQU   X'40',0             Q=XEQ\nQOUT     EQU   X'20',0             Q=OUT\nQPPU     EQU   X'10',0             Q=PPU\nQHOLD    EQU   X'08',0             Q=HOLD\nQXMT     EQU   X'04',0             Q=XMT\nQPUR     EQU   X'02',0             DISPLAY JOBS IN PURGE\nQACT     EQU   X'40',1             ACTIVE JOBS ONLY\nQDEV     EQU   X'20',1             DEVICE ACTIVITY DISPLAYS\n***********************************************************************\n*                                                                     *\n*                       QMISC                                         *\n*                                                                     *\n*        THESE FLAGS ARE USED TO REFLECT NORMAL FILTERING             *\n*        OPTIONS WHICH MAY BE REQUESTED DEPENDING ON THE              *\n*        CALLING EXIT.                                                *\n*                                                                     *\n***********************************************************************\nQMISC    DS    XL3                 MISCELLANEOUS OPTION INDICATORS\nXMTDEST  EQU   X'80',0             SEARCH XMT QUEUE BY DESTINATION\nSELDEST  EQU   X'40',0             SEARCH ALL QUEUES BY DESTINATION\nINDONLY  EQU   X'20',0             DISPLAY JOBS IN INDEPENDENT MODE\nSYSANY   EQU   X'10',0             DISPLAY JOBS WITHOUT SYSTEM AFFIN\nSYSALL   EQU   X'08',0             DISPLAY JOBS FOR ALL SYSTEMS\nSELVOL   EQU   X'04',0             SELECT JOBS BY SPOOL VOLUME\nOWNER    EQU   X'02',0             DISPLAY OWNERID\nSPOOL    EQU   X'01',0             DISPLAY SPOOL VOLUME INFORMATION\nRESOURCE EQU   X'80',1             DISPLAY ATTACHED RESOURCES\n***********************************************************************\n*                                                                     *\n*                       QFILT1                                        *\n*                                                                     *\n*        THESE FLAGS ARE USED TO REFLECT WHICH JOB TYPE               *\n*        (IF ANY) WHICH IS TO BE SELECTED.  IF NO BITS ARE            *\n*        ON, ALL JOB TYPES WILL BE SELECTED.                          *\n*                                                                     *\n***********************************************************************\nQFILT1   DS    X                   MISCELLANEOUS OPTION INDICATORS\nQTEST    EQU   X'80',0             SELECT ONLY TEST JOBS\nQPROD    EQU   X'40',0             SELECT ONLY PRODUCTION JOBS\n***********************************************************************\n*                                                                     *\n*                       QFILT2                                        *\n*                                                                     *\n*        THESE FLAGS ARE USED TO REFLECT SPECIAL FILTERING            *\n*        OPTIONS WHICH MAY BE REQUESTED DEPENDING ON THE              *\n*        CALLING EXIT.                                                *\n*                                                                     *\n***********************************************************************\nQFILT2   DS    X                   MISCELLANEOUS OPTION INDICATORS\nQOHOLD   EQU   X'80',0             SELECT JOBS ON OPERATOR HOLD\nQUHOLD   EQU   X'40',0             SELECT JOBS ON USER     HOLD\nQSETUP   EQU   X'20',0             SELECT JOBS ON SETUP    HOLD\nQABEND   EQU   X'10',0             SELECT JOBS WHICH ABENDED\nQJCLERR  EQU   X'08',0             SELECT JOBS WHICH HAD JCL ERRORS\n***********************************************************************\n*                                                                     *\n*                       OWNERID                                       *\n*                                                                     *\n*        THIS FIELD WILL CONTAIN THE OWNERID TO BE USED FOR           *\n*        SELECTION IF THE OWNER BIT IS ON IN THE QMISC FIELD.         *\n*        IF THIS FIELD CONTAINS BINARY ZEROS OR BLANKS, NO            *\n*        SELECTION WILL BE MADE, BUT THE OWNERID WILL BE              *\n*        ADDED TO THE DISPLAY MESSAGE.                                *\n*                                                                     *\n***********************************************************************\nOWNERID  DS    CL8                 OWNERID TO BE SELECTED\n***********************************************************************\n*                                                                     *\n*                       QCLASS                                        *\n*                                                                     *\n*        THIS FIELD WILL CONTAIN THE CONVERSION OR EXECUTION          *\n*        CLASS TO BE USED FOR SELECTION.  THIS FIELD WILL             *\n*        BE USED FOR FILTERING ONLY IF THE BYCLASS BIT IS ON          *\n*        IN THE QMISC FIELD.                                          *\n*                                                                     *\n***********************************************************************\nQCLASS   DS    C                   CLASS FOR Q=XEQ OR Q=CNV\n***********************************************************************\n*                                                                     *\n*                       LOWDEST / HIDEST                              *\n*                                                                     *\n*        THESE FIELDS CONTAIN THE LOW AND HIGH ROUTE CODES THAT       *\n*        DEFINE WHICH JOBS ARE ELIGIBLE FOR DISPLAY.  THESE           *\n*        FIELDS WILL BE USED FOR FILTERING ONLY IF THE SELDEST        *\n*        BIT IS ON IN THE QMISC FIELD.                                *\n*                                                                     *\n***********************************************************************\nLOWDEST  DS    F                   LOW  R= DESTINATION\nHIDEST   DS    F                   HIGH R= DESTINATION\n***********************************************************************\n*                                                                     *\n*                       LOWXDEST / HIXDEST                            *\n*                                                                     *\n*        THESE FIELDS CONTAIN THE LOW AND HIGH ROUTE CODES THAT       *\n*        DEFINE WHICH JOBS ARE ELIGIBLE FOR DISPLAYING JOBS IN        *\n*        THE TRANSMIT QUEUE.  THESE VALUES WILL BE USED FOR           *\n*        FILTERING ONLY IF THE XMTDEST BIT IS ON IN THE QMISC         *\n*        FIELD.                                                       *\n*                                                                     *\n***********************************************************************\nLOWXDEST DS    F                   LOW  Q=XMT DESTINATION\nHIXDEST  DS    F                   HIGH Q=XMT DESTINATION\n***********************************************************************\n*                                                                     *\n*                       SYSMASK                                       *\n*                                                                     *\n*        THIS FIELD CONTAINS THE MAS SYSTEM MASK DEFINING WHICH       *\n*        JOBSARE ELIGIBLE FOR DISPLAY.  ANY JOB WHICH DOES NOT        *\n*        HAVE THESE BIT(S) ON IN THE AFFINITY MASK WILL NOT BE        *\n*        DISPLAYED.  THIS FIELD WILL BE USED FOR FILTERING UNLESS     *\n*        THE SYSALL OR SYSANY BITS ARE ON IN THE QMISC FIELD.         *\n*                                                                     *\n***********************************************************************\nSYSMASK  DS    X                   SYSTEM AFFINITY MASK FOR SELECTION\n***********************************************************************\n*                                                                     *\n*                       VOLMASK                                       *\n*                                                                     *\n*        THIS FIELD CONTAINS A SPOOL VOLUME MASK TABLE WHICH          *\n*        REPRESENTS THE REQUESTED SPOOL VOLUME(S).  THIS WILL         *\n*        BE USED FOR FILTERING ONLY IF THE SELVOL BIT IS ON IN        *\n*        THE QMISC FIELD.                                             *\n*                                                                     *\n***********************************************************************\nVOLMASK  DS    XL(($MAXDA+31)/32*4) SPOOL MASK OF REQUESTED VOLUME\n         MEND\n++ USERMOD (FZ51EV0) /*\n\n                    FIRST UNION BANK USERMOD 51\n\n         THIS USERMOD ADDS A USER MACRO $FCSFMTP TO JES2.  THIS\n         MACRO MAPS THE JOB INFORMATION TASK CONTROL BLOCK (JITB)\n         FOR USE BY ALL EXITS WHICH UTILIZE JIT SERVICES.\n\n                                                                     */.\n++ VER (Z038) FMID(HJE2221) .\n++ MAC($FCSJITB) DISTLIB(HASPSRC).\n         MACRO\n         $FCSJITB ,\n***********************************************************************\n*                                                                     *\n*        JOB INFORMATION TASK BLOCK                                   *\n*                                                                     *\n***********************************************************************\nJITB     DSECT\nJITBID   DS    CL4                 JITB INDENTIFICATION 'JITB'\nJITBCH   DS    F                   JITB CHAIN TO NEXT JITB\nJITBXECB DS    XL(XECBLEN)         JITB XECB\nJITBFLG  DS    X                   JITB FUNCTION CODE\nJITBREAD EQU   X'80'                    JITB READ FILE\nJITBDMD  EQU   X'80'                    JITB DEMAND A NETWORK\nJITBSTAR EQU   X'40'                    JITB START FILE / UCC7\nJITBSTOP EQU   X'20'                    JITB STOP FILE / UCC7\nJITBREST EQU   X'10'                    JITB RESTART FILE / UCC7\nJITBDISP EQU   X'08'                    JITB DISPLAY STATUS\nJITBSTAT DS    X                   JITB STATUS CODE\nJITBOK   EQU   X'80'                    JITB RECORD FOUND\nJITBREC  DS    0CL226              JITB RECORD\nJITBKEY  DS    0CL16               JITB FILE KEY\nJITBJOBN DS    CL8                 JITB JOBNAME\nJITBGRP  DS    0CL8                JITB OUTPUT GROUP NAME\nJITBSUBI DS    CL8                 JITB SUB ID       (SAME AS JITBGRP)\nJITBPSID DS    0CL8                JITB PRIMARY SEPARATOR ID\nJITBNETN DS    CL8                 JITB NETWORK NAME (SAME AS JITBSID)\nJITBSSID DS    CL8                 JITB SECONDARY SEPARATOR ID\nJITBDUEO DS    FL4                 JITB DUE OUT TIME (HHMM)\nJITBDESC DS    CL8                 JITB DESCRIPTION\nJITBU7FL DS    C                   JITB UCC7 NOTIFY FLAG (Y/N)\nJITBCLAS DS    C                   JITB JOB SYSOUT CLASS (STC)\nJITBPGMR DS    CL20                JITB PROGRAMMER NAME (STC/TSU)\nJITBLOC  DS    CL15                JITB LOCATION NAME\nJITBDEPT DS    CL20                JITB DEPARTMENT NAME\nJITBMAIL DS    CL10                JITB MAIL CODE\nJITBPHON DS    CL15                JITB PHONE NUMBER\nJITBINS1 DS    CL25                JITB SPECIAL INSTRUCTIONS\nJITBINS2 DS    CL25                JITB SPECIAL INSTRUCTIONS\nJITBINS3 DS    CL25                JITB SPECIAL INSTRUCTIONS\nJITBINS4 DS    CL25                JITB SPECIAL INSTRUCTIONS\nJITBLEN  EQU   *-JITB              LENGTH OF JITB\n         MEND\n++ USERMOD (FZ51FV0) /*\n\n                    FIRST UNION BANK USERMOD 51\n\n         THIS USERMOD ADDS A USER MACRO $RESTABL TO JES2.  THIS\n         MACRO DEFINES THE NAMES USED FOR ESOTERIC RESOURCE ROUTING.\n         THIS MACRO WILL BE USED BY ALL EXITS WHICH UTILIZE THIS\n         FACILITY.\n\n                                                                     */.\n++ VER (Z038) FMID(HJE2221) .\n++ MAC($RESTABL) DISTLIB(HASPSRC).\n         MACRO                                                     FUNB\n         $RESTABL ,                                                FUNB\n*****************************************************************  FUNB\n*        DO NOT CHANGE THE ORDER OF THESE RESOURCES AFTER THEY  *  FUNB\n*        HAVE BEEN ATTACHED.($QA'D). UNLESS YOU ARE TO COLDSTART*  FUNB\n*****************************************************************  FUNB\n$RESLEN  EQU   8                   RESOURCE NAME ENTRY SIZE        FUNB\n$RESMAX  EQU   32                  MAX RESOURCES SUPPORTED         FUNB\n$RESTAB  DS    0D                                                  FUNB\n         DC    CL8'NDM     '       SYSTEM WHERE NDM IS RUN         FUNB\n         DC    CL8'TAPE    '       SYSTEM ALLOWING TAPE JOBS       FUNB\n         DC    CL8'TESTTAPE'       SYSTEM ALLOWING TEST TAPE JOBS  FUNB\n         DC    CL8'TESTING '       SYSTEM ALLOWING TEST JOBS       FUNB\n         DC    CL8'IMS     '       SYSTEM RUNNING PROD IMS         FUNB\n         DC    CL8'CICS    '       SYSTEM RUNNING PROD CICS        FUNB\n         DC    CL8'TSO     '       SYSTEM WHERE TSO IS RUN         FUNB\n         DC    CL8'IMSTEST '       SYSTEM RUNNING TEST IMS         FUNB\n         DC    CL8'CICSTEST'       SYSTEM RUNNING TEST CICS        FUNB\n         DC    CL8'ROSCOE  '       SYSTEM RUNNING PROD ROSCOE      FUNB\n         DC    CL8'ROSTEST '       SYSTEM RUNNING TEST ROSCOE      FUNB\n         DC    CL8'AVAIL12 '       AVAILABLE                       FUNB\n         DC    CL8'AVAIL13 '       AVAILABLE                       FUNB\n         DC    CL8'AVAIL14 '       AVAILABLE                       FUNB\n         DC    CL8'AVAIL15 '       AVAILABLE                       FUNB\n         DC    CL8'AVAIL16 '       AVAILABLE                       FUNB\n         DC    CL8'AVAIL17 '       AVAILABLE                       FUNB\n         DC    CL8'AVAIL18 '       AVAILABLE                       FUNB\n         DC    CL8'AVAIL19 '       AVAILABLE                       FUNB\n         DC    CL8'AVAIL20 '       AVAILABLE                       FUNB\n         DC    CL8'AVAIL21 '       AVAILABLE                       FUNB\n         DC    CL8'AVAIL22 '       AVAILABLE                       FUNB\n         DC    CL8'AVAIL23 '       AVAILABLE                       FUNB\n         DC    CL8'AVAIL24 '       AVAILABLE                       FUNB\n         DC    CL8'AVAIL25 '       AVAILABLE                       FUNB\n         DC    CL8'AVAIL26 '       AVAILABLE                       FUNB\n         DC    CL8'AVAIL27 '       AVAILABLE                       FUNB\n         DC    CL8'AVAIL28 '       AVAILABLE                       FUNB\n         DC    CL8'AVAIL29 '       AVAILABLE                       FUNB\n         DC    CL8'AVAIL30 '       AVAILABLE                       FUNB\n         DC    CL8'AVAIL31 '       AVAILABLE                       FUNB\n         DC    CL8'AVAIL32 '       AVAILABLE                       FUNB\n$NOLEFT  EQU   (*-$RESTAB)/$RESLEN NUMBER OF ENTRIES IN TABLE.     FUNB\n*****************************************************************  FUNB\n         MEND                                                      FUNB\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HASPXIT0": {"ttr": 3334, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 PRE INITIALIZATION EXIT'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        ENTRY EXIT0A                                                 *\n*                                                                     *\n*        THIS JES2 EXIT ROUTINE IS DESIGNED TO RUN RIGHT BEFORE       *\n*        JES2 INITIALIZATION OPTIONS ARE PROCESSED WHICH WILL         *\n*        ALLOW US TO MODIFY SOME JES2 CONTROL BLOCKS AS WELL          *\n*        AS CREATE OUR OWN.                                           *\n*                                                                     *\n*        THIS EXIT WILL CREATE A 4K UCT FOR INSTALLATION              *\n*        PURPOSES.  IT WILL THEN SET UP USER INITIALIZATION           *\n*        PARAMETERS SCAN CONTROL BLOCKS AND USER WORK SELECTION       *\n*        CRITERIA CONTROL BLOCKS AND ANCHOR THEM OFF OF THE           *\n*        MCT.                                                         *\n*                                                                     *\n*                                                                     *\n*        ENTRY E005$TD                                                *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED TO SEARCH FOR ALL         *\n*        $T DEV COMMANDS FOR PRINTERS AND PUNCHES FOR THE JTYPE=      *\n*        KEYWORD.  THE JTYPE KEYWORD WILL BE AUTOMATICALLY HANDLED    *\n*        FOR OFFLOAD DEVICES.  IF THE KEYWORD IS NOT FOUND, THE       *\n*        COMMAND WILL BE ALLOWED TO CONTINUE NORMALLY.  IF IT IS      *\n*        FOUND, THIS ROUTINE WILL EXTRACT THE PARAMETER FROM THE      *\n*        COMMAND LIST, PROCESS IT, AND REFORMAT THE COMMAND           *\n*        BUFFER TO ELIMINATE THE UNSUPPORTED KEYWORD.  THIS EXIT      *\n*        CANNOT CHANGE THE NUMBER OF OPERANDS IN THE COMMAND          *\n*        BUFFER, SO A DUMMY WS=(/) PARAMETER IS SUBSTITUTED FOR       *\n*        JTYPE= KEYWORD.  NOTE THAT THIS TECHNIQUE MAY ALLOW          *\n*        THE JTYPE= OPERAND TO BE PROCESSED AND THE REST OF THE       *\n*        COMMAND TO BE REJECTED BY THE NORMAL $T DEV COMMAND          *\n*        PROCESSOR.                                                   *\n*                                                                     *\n*                                                                     *\n*        ENTRY E010$DU                                                *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED EXAMINE AND/OR            *\n*        MODIFY ALL JES2 MESSAGES.  THE PURPOSE OF THIS ROUTINE       *\n*        IS TO EXAMINE ALL $HASP628 MESSAGES WHICH ARE THE            *\n*        RESULT OF A $DU COMMAND TO SEE IF THE UNIT BEING             *\n*        DISPLAYED IS ONE TO WHICH WE HAVE ADDED THE JTYPE=           *\n*        ATTRIBUTE.  SOME OF THE NEWER DEVICES SUCH AS OFFLOAD        *\n*        DEVICES HANDLE THE NEW KEYWORD AUTOMATICALLY.  OTHERS        *\n*        SUCH AS PRINTERS AND PUNCHES DO NOT.  UNTIL THEY ARE         *\n*        PROCESSED IN THE NEW FASHION, WE WILL HAVE TO PLAY           *\n*        THESE GAMES.  THUS FOR PRINTERS AND PUNCHES WE WILL          *\n*        APPEND THE VALUE OF JTYPE ON THE DISPLAYED MESSAGE.          *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   H A S P X I T 0          *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $CMB         SYS1.HASPSRC                               *\n*        04)  $COMWORK     SYS1.HASPSRC                               *\n*        05)  $DCT         SYS1.HASPSRC                               *\n*        06)  $ENTRY       SYS1.HASPSRC                               *\n*        07)  $ERA         SYS1.HASPSRC                               *\n*        08)  $FCSUCT      SYS1.HASPSRC (USER)                        *\n*        09)  $FCSUHDR     SYS1.HASPSRC (USER)                        *\n*        10)  $FREEBUF     SYS1.HASPSRC                               *\n*        11)  $GETBUF      SYS1.HASPSRC                               *\n*        12)  $HASPEQU     SYS1.HASPSRC                               *\n*        13)  $HASPGBL     SYS1.HASPSRC                               *\n*        14)  $HCT         SYS1.HASPSRC                               *\n*        15)  $MCT         SYS1.HASPSRC                               *\n*        16)  $MIT         SYS1.HASPSRC                               *\n*        17)  $JCT         SYS1.HASPSRC                               *\n*        18)  $JOE         SYS1.HASPSRC                               *\n*        19)  $JQE         SYS1.HASPSRC                               *\n*        20)  $MODEND      SYS1.HASPSRC                               *\n*        21)  $MODULE      SYS1.HASPSRC                               *\n*        22)  $PADDR       SYS1.HASPSRC                               *\n*        23)  $PCE         SYS1.HASPSRC                               *\n*        24)  $RETURN      SYS1.HASPSRC                               *\n*        25)  $SAVE        SYS1.HASPSRC                               *\n*        26)  $SCANTAB     SYS1.HASPSRC                               *\n*        27)  $STORE       SYS1.HASPSRC                               *\n*        28)  $WSTAB       SYS1.HASPSRC                               *\n*        29)  $XECB        SYS1.HASPSRC                               *\n*        30)  GETMAIN      SYS1.MACLIB                                *\n*        31)  IAZRESPA     SYS1.AMODGEN                               *\n*        32)  IEZWPL       SYS1.AMODGEN                               *\n*        33)  IFGRPL       SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       2K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nHASPXIT0 $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 PRE INITIALIZATION EXIT',                   X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $CMB,               GENERATE HASP CMB DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $ERA,               GENERATE HASP ERA DSECT             X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $MCT,               GENERATE HASP MCT DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $SCANTAB,           GENERATE HASP SCANTABL TABLE DSECT  X\n               $WSTAB,             GENERATE HASP WSTAB    TABLE DSECT  X\n               $XECB,              GENERATE HASP EXT ECB DSECT         X\n               RESPA,              GENERATE MVS  RESPA DSECT           X\n               RPL,                GENERATE MVS  RPL DSECT             X\n               WPL                 GENERATE MVS  WPL DSECT\n         TITLE 'JES2 PRE INITIALIZATION EXIT'\n         $FCSUCT ,                 GENERATE THE UCT DSECT\nHASPXIT0 CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n         $FCSUHDR ,                GENERATE USER NJE JOB HEADER DSECT\nHASPXIT0 CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        $T DEV COMMAND PREPROCESSOR WORK AREA                        *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n$TDWORK  DSECT                     COMMAND WORK AREA\n         DS    CL(BUFSTART-BFPDSECT) ***** RESERVED BY JES2 *****\nDEVICE   DS    CL8                 FULL DEVICE NAME\nVALUE    DS    CL4                 VALUE OF JTYPE= PARAMETER\nHASPXIT0 CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ACTUAL EXIT0 ENTRY POINT                                     *\n*                                                                     *\n***********************************************************************\nEXIT0A   $ENTRY  BASE=R12\n         $SAVE\n         LR    R12,R15             ESTABLISH BASE REGISTER\n         USING HCT,R11             ESTABLISH ADDRESSABILITY TO HCT\n         ICM   R9,15,$UCT          GET UCT ADDRESS\n         BNZ   EXIT0EN             NOT ZERO, NOT FIRST ENTRY, GET OUT\n         USING UCT,R9              ESTABLISH ADDRESSABILITY TO UCT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GET STORAGE FOR UCT                                          *\n*                                                                     *\n***********************************************************************\n         GETMAIN R,LV=4096,SP=7    GET CORE FOR UCT\n         LR    R9,R1               SET UCT BASE REG\n         ST    R1,$UCT             SAVE UCT ADDRESS\n         LR    R0,R1               CLEAR\n         LH    R1,=H'4096'             ENTIRE\n         SLR   R15,R15                     GETMAINED\n         MVCL  R0,R14                          TO ZEROS\n         MVC   UCTID,=C'UCT '      SET EYECATCHER\n***********************************************************************\n*                                                                     *\n*        SAVE USER PARAMETER SCANTAB ADDRESS IN MCT AND UCT           *\n*                                                                     *\n*        WE WOULD LIKE TO USE THIS TECHNIQUE FOR REMOTE DEVICES       *\n*        BUT THERE IS NO USER WORK SELECTION MCT ENTRY FOR            *\n*        THEM YET.  MAYBE THERE WILL BE IN THE FUTURE.  SO            *\n*        FOR NOW, WE WILL ONLY PROCESS PRINTERS, PUNCHES, AND         *\n*        OFFLOAD DEVICES.                                             *\n*                                                                     *\n***********************************************************************\n         L     R8,$MCT             LOAD ADDRESS OF MASTER CONTROL TABLE\n         USING MCT,R8              ESTABLISH ADDRESSABILITY TO MCT\n         LA    R1,SCANT1           LOAD ADDRESS OF JTYPE SCAN ENTRY\n         ST    R1,MCTPRTTU         SAVE ADDRESS IN MCT PRINTER\n         ST    R1,MCTPUNTU         SAVE ADDRESS IN MCT PUNCH\n         ST    R1,MCTOSRTU         SAVE ADDRESS IN MCT OFF.SR\n         ST    R1,MCTOSTTU         SAVE ADDRESS IN MCT OFF.ST\n         ST    R1,MCTOJRTU         SAVE ADDRESS IN MCT OFF.JR\n         ST    R1,MCTOJTTU         SAVE ADDRESS IN MCT OFF.JT\n         LA    R1,WSTAB1           LOAD ADDRESS OF WORK SELECTION ENTRY\n         ST    R1,MCTPRWTU         SAVE ADDRESS IN MCT WS PRINTER\n         ST    R1,MCTPUWTU         SAVE ADDRESS IN MCT WS PUNCH\n         ST    R1,MCTSRWTU         SAVE ADDRESS IN MCT WS OFF.SR\n         ST    R1,MCTSTWTU         SAVE ADDRESS IN MCT WS OFF.ST\n         ST    R1,MCTJRWTU         SAVE ADDRESS IN MCT WS OFF.JR\n         ST    R1,MCTJTWTU         SAVE ADDRESS IN MCT WS OFF.JT\n         LA    R1,SCANT2           LOAD ADDRESS OF MAIN SCANTAB ENTRY\n         ST    R1,MCTMPSTU         SAVE ADDRESS IN MCT\n         LA    R1,SCANT3           LOAD ADDRESS OF SUB  SCANTAB ENTRY\n         ST    R1,UCTJITST         SAVE ADDRESS IN UCT\n         DROP  R8                  DROP ADDRESSABILITY TO MCT\n***********************************************************************\n*                                                                     *\n*        CREATE NULL TRANSLATE TABLE IN THE UCT.                      *\n*                                                                     *\n*        SOME OF OUR RJE PRINTERS NEET THE PRINTDEF TRANS=YES         *\n*        PARAMETER CODED TO PREVENT GARBAGE FROM BEING SENT TO        *\n*        THEM.  EXIT 15 CAN BE USED TO PROVIDE AN ALTERNATE           *\n*        TRANSLATE TABLE FOR INDIVIDUAL DEVICE.  THIS TABLE           *\n*        WILL TRANSLATE EVERYTHING TO ITSELF AND EFFECTIVELY          *\n*        NULLIFY THE ENTIRE PROCESS FOR THAT DEVICE.                  *\n*                                                                     *\n***********************************************************************\n         LA    R15,UCTXLAT         POINT TO TRANSLATE TABLE AREA\n         LA    R14,256             SET LOOP COUNTER\n         SLR   R1,R1               CLEAR REGISTER\nXLATLOOP STC   R1,0(R15)           STORE CHARACTER\n         LA    R1,1(R1)            ADD 1 TO COUNTER\n         LA    R15,1(R15)          INCREMENT TO NEXT TABLE ENTRY\n         BCT   R14,XLATLOOP        LOOP\n***********************************************************************\n*                        C L E A N    U P                             *\n***********************************************************************\nEXIT0EN $RETURN RC=0\n         EJECT\n***********************************************************************\n*                                                                     *\n*           WORK SELECTION ROUTINE FOR \"JTYPE\"                        *\n*                                                                     *\n*        REGISTERS ON ENTRY:                                          *\n*                                                                     *\n*        R2  - POINTER TO CURRENT CRITERIA                            *\n*        R3  - POINTER TO TABLE PAIR                                  *\n*        R4  - POINTER TO CURRENT WORK VALUE IN TABLE                 *\n*        R5  - WST ADDRESSABILITY                                     *\n*        R6  - *** AVAILABLE ***                                      *\n*        R7  - COMPARISON LENGTH REGISTER                             *\n*        R8  - DEVICE CB ADDRESS                                      *\n*        R9  - *** RESERVED ****                                      *\n*        R10 - COMPARISON CB ADDRESS                                  *\n*        R11 - HCT                                                    *\n*        R12 - HASPSERV ADDRESSABILITY                                *\n*                                                                     *\n*              RETURN FROM WORK SELECTION ROUTINE                     *\n*                                                                     *\n*        RC = 00 - DO NOT SELECT THIS WORK                            *\n*        RC = 04 - YES BUT CONTINUE WITH NEXT CRITERIA                *\n*        RC = 08 - SELECT THIS WORK                                   *\n*        RC = 12 - NO, UNLESS AFTER SLASH                             *\n*                                                                     *\n*        IT APPEARS THAT ONLY REGISTERS 1, 6, 7, AND 15 CAN           *\n*        BE MODIFIED BY THE WORK SELECTION EXIT ROUTINE               *\n*        SINCE THE REGISTERS ARE NOT SAVED PRIOR TO CALLING           *\n*        THE ROUTINE.                                                 *\n*                                                                     *\n***********************************************************************\n         PUSH USING                SAVE CURRENT BASE REGISTERS\nJTSEL    LR    R6,R15              SET ROUTINE BASE REGISTER\n         USING JTSEL,R6            SET ROUTINE ADDRESSABILITY\n         USING DCT,R8              SET ADDRESSABILITY TO DCB (DEVCB)\n         USING JQE,R10             SET ADDRESSABILITY TO JQE (CB)\n         LA    R15,255             SET PRTY\n         CLI   DCTUSER0,C' '       SEE IF USER FIELD = ZEROS OR BLANKS\n         BNH   JTSELR04            YES, NO CRITERIA, SELECT THIS JOB\n         LA    R1,DCTUSER0         POINT TO START OF FIELDS\n         LA    R7,4                SET LENGTH OF FIELDS\nJTSEL01  CLI   0(R1),C' '          SEE IF END OF JTYPE LIST\n         BE    JTSELR12            YES, NO MATCH\n         CLI   0(R1),C'P'          SEE IF PRODUCTION REQUESTED\n         BE    JTSEL03             YES, BRANCH\n         CLI   0(R1),C'T'          SEE IF TEST REQUESTED\n         BE    JTSEL02             YES, BRANCH\n         BE    JTSEL04             NO, SKIP THIS CATEGORY\nJTSEL02  CLI   JQEXFLG1,JQEXPROD   SEE IF PRODUCTION\n         BE    JTSEL04             YES, DO NOT SELECT IT YET\n         B     JTSEL05             NO, SELECT THIS JOB\nJTSEL03  CLI   JQEXFLG1,JQEXPROD   SEE IF PRODUCTION\n         BE    JTSEL05             YES, SELECT THIS JOB\nJTSEL04  BCTR  R15,0               REDUCE PRIORITY BY 1\n         LA    R1,1(R1)            INCREMENT TO NEXT CLASS IN LIST\n         BCT   R7,JTSEL01          LOOP FOR NEXT JTYPE IN LIST\n         B     JTSELR12            END OF LIST, NO MATCH\nJTSEL05  STC   R15,0(R4)           SAVE WORK SELECTION VALUE\n         B     JTSELR04            OK TO SELECT THIS JOB\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*              RETURN FROM WORK SELECTION ROUTINE                     *\n*                                                                     *\n*        RC = 00 - DO NOT SELECT THIS WORK                            *\n*        RC = 04 - YES BUT CONTINUE WITH NEXT CRITERIA                *\n*        RC = 08 - SELECT THIS WORK                                   *\n*        RC = 12 - NO, UNLESS AFTER SLASH                             *\n*                                                                     *\n***********************************************************************\nJTSELR00 LA    R15,0               SET RETURN CODE TO ZERO\n         B     JTSELEND            GO RETURN TO CALLER\nJTSELR04 LA    R15,4               SET RETURN CODE TO FOUR\n         B     JTSELEND            GO RETURN TO CALLER\nJTSELR08 LA    R15,8               SET RETURN CODE TO EIGHT\n         B     JTSELEND            GO RETURN TO CALLER\nJTSELR12 LA    R15,12              SET RETURN CODE TO TWELVE\nJTSELEND BR    R14                 RETURN TO CALLER WITH RC IN R15\n         DROP  R6,R8,R10           DROP BASE REGS FROM ROUTINE\n         POP   USING               RESTORE ORIGINAL BASE REGISTERS\n         EJECT\n***********************************************************************\n*                     C O N S T A N T S                               *\n***********************************************************************\n         LTORG\n         SPACE 3\nSCANT1   $SCANTAB TABLE=(USER,NOENTRY)\n         $SCANTAB NAME=JTYPE,MINLEN=2,CB=PARENT,DSECT=DCT,             X\n               FIELD=(DCTUSER0,4),RANGE=(1,8),                         X\n               CONV=CHARA\n         $SCANTAB TABLE=END\n         SPACE 3\nSCANT2   $SCANTAB TABLE=(USER,NOENTRY)\n         $SCANTAB NAME=JIT,CONV=SUBSCAN,MSGID=900,                     X\n               SCANTAB=(UCTJITST,UCT),                                 X\n               CALLERS=($SCIRPL,$SCIRPLC,$SCDCMDS)\n         $SCANTAB TABLE=END\n         SPACE 3\nSCANT3   $SCANTAB TABLE=(USER,NOENTRY)\n         $SCANTAB NAME=DSNAME,MINLEN=3,CB=UCT,FIELD=UCTJITDS,          X\n               CONV=(CHARJANS,.),RANGE=(1,L'UCTJITDS)\n         $SCANTAB NAME=START,CB=UCT,FIELD=UCTJITOP,                    X\n               CONV=FLAG,VALUE=(,0,FF-UCTJITDR)\n         $SCANTAB NAME=STOP,CB=UCT,FIELD=UCTJITOP,                     X\n               CONV=FLAG,VALUE=(,UCTJITDR,FF)\n         $SCANTAB TABLE=END\n         SPACE 3\nWSTAB1   $WSTAB TABLE=(USER,NOENTRY)\n         $WSTAB NAME=JTYPE,MINLEN=2,RTN=JTSEL,                         X\n               CB=JQE,DEVCB=DCT\n         $WSTAB TABLE=END\n         TITLE 'JES2 $T DEV COMMAND PREPROCESSOR EXIT'\n***********************************************************************\n*                                                                     *\n*        $T DEV EXIT MAIN ENTRY POINT                                 *\n*                                                                     *\n***********************************************************************\n         PUSH USING\nE005$TD  $ENTRY BASE=R12           SAVE CALLERS REGS AND GET NEW SAVE\n         $SAVE ,                   SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       - ADDRESS OF THE CURRENT OPERAND                    *\n*        R6       - INCREMENT VALUE OF 4                              *\n*        R7       - ADDRESS OF THE LAST OPERAND                       *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SEE IF $T (SET) COMMAND.  IF NOT, GET OUT                    *\n*                                                                     *\n***********************************************************************\n         CLI   COMVERB,C'T'        SEE IF SET COMMAND\n         BNE   $MPXIT              NO, GET OUT\n***********************************************************************\n*                                                                     *\n*        SEE IF A PRINTER OR A PUNCH IS BEING SET.                    *\n*                                                                     *\n*        THE DEVICE NAME FOR A PRINTER IS PRT..                       *\n*        THE DEVICE NAME FOR A PUNCH   IS PUN..                       *\n*                                                                     *\n*        JES2 COMMANDS ALLOW ALIAS NAMES TO BE USED.  PRINTERS        *\n*        CAN USE PRINTR.. AND PRINTER.. WHERE PUNCHES CAN USE         *\n*        PUNCH..  THIS CODE HAS TO ALLOW FOR THE ALIAS NAMES.         *\n*                                                                     *\n***********************************************************************\n         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R9,R1               SAVE WORK AREA ADDRESS\n         USING $TDWORK,R9          SET ADDRESSABILITY TO WORK AREA\n         MVC   DEVICE,$BLANKS      BLANK OUT THE DEVICE NAME\n         CLC   COMOPRND(7),=C'PRINTER' SEE IF A PRINTER\n         BE    $TDCK1A             YES, BRANCH\n         CLC   COMOPRND(6),=C'PRINTR' SEE IF A PRINTER\n         BE    $TDCK1B             YES, BRANCH\n         CLC   COMOPRND(3),=C'PRT' SEE IF A PRINTER\n         BE    $TDCK2              YES, BRANCH\n         CLC   COMOPRND(5),=C'PUNCH' SEE IF A PUNCH\n         BE    $TDCK1              YES, BRANCH\n         CLC   COMOPRND(3),=C'PUN' SEE IF A PUNCH\n         BE    $TDCK2              YES, BRANCH\n         B     $MPXIT00            NO, GET OUT\n$TDCK1   MVC   DEVICE(3),=C'PUN'   SET REAL DEVICE NAME\n         LA    R2,COMOPRND+5       POINT PAST ALIAS NAME\n         B     $TDCK1C             BRANCH\n$TDCK1A  MVC   DEVICE(3),=C'PRT'   SET REAL DEVICE NAME\n         LA    R2,COMOPRND+7       POINT PAST ALIAS NAME\n         B     $TDCK1C             BRANCH\n$TDCK1B  MVC   DEVICE(3),=C'PRT'   SET REAL DEVICE NAME\n         LA    R2,COMOPRND+6       POINT PAST ALIAS NAME\n$TDCK1C  LA    R3,DEVICE+3         POINT PAST REAL DEVICE NAME\n         LA    R15,2               SET MAX LOOP COUNTER\n$TDCK1D  CLI   0(R2),C','          END OF DEVICE NUMBER\n         BE    $TDCK3              YES, BRANCH\n         MVC   0(1,R3),0(R2)       SAVE THIS DIGIT OF THE DEVICE NBR\n         LA    R2,1(R2)            INCREMENT TO NEXT DIGIT OF INPUT\n         LA    R3,1(R3)            INCREMENT TO NEXT DIGIT OF OUTPUT\n         BCT   R15,$TDCK1D         LOOP\n         CLI   0(R2),C','          SEE IF END OF DEVICE NUMBER\n         BNE   $MPXIT00            NO, ERROR, LET JES2 DECIDE IT\n         B     $TDCK3              GO PROCESS THE DEVICE NAME\n$TDCK2   LA    R2,COMOPRND         LOAD START ADDRESS OF DEVICE NAME\n         SLR   R15,R15             SET DEVICE NAME LENGTH TO ZERO\n$TDCK2A  CLI   0(R2),C' '          END OF DEVICE NAME\n         BNH   $TDCK2B             YES, BRANCH\n         CLI   0(R2),C','          END OF DEVICE NAME\n         BE    $TDCK2B             YES, BRANCH\n         LA    R2,1(R2)            INCR TO NEXT CHAR OF DEVICE NAME\n         LA    R15,1(R15)          ADD 1 TO LENGTH\n         B     $TDCK2A             LOOP\n$TDCK2B  CH    R15,=H'8'           TEST DEVICE NAME LENGTH\n         BH    $MPXIT00            GT 8, ERROR, BUT LET JES2 DECIDE IT\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MVDEVNM         SAVE DEVICE NAME\n         B     $TDCK3              GET OUT\nMVDEVNM  MVC   DEVICE(0),COMOPRND  *** EXECUTE ONLY ***\n***********************************************************************\n*                                                                     *\n*                 SEARCH THE DCT CHAIN FOR OUR DEVICE                 *\n*                                                                     *\n***********************************************************************\n$TDCK3   ICM   R8,15,$DCTPOOL      LOAD START ADDRESS OF 1ST DCT POOL\n         BZ    $TDCK3B             ZERO, NONE IN POOL, BRANCH\n         USING DCT,R8              SET ADDRESSABILITY TO DCT\n$TDCK3A  CLC   DCTDEVN,DEVICE      SEE IF THIS IS THE DCT WE WANT\n         BE    $TDCK3D             YES, BRANCH\n         ICM   R8,15,DCTCHAIN      LOAD NEXT ADDRESS IN CHAIN\n         BNZ   $TDCK3A             NOT ZERO, LOOP\n$TDCK3B  ICM   R8,15,$DCTPOL2      LOAD START ADDRESS OF 2ND DCT POOL\n         BZ    $MPXIT00            ZERO, NO DCT, JUST GET OUT\n$TDCK3C  CLC   DCTDEVN,DEVICE      SEE IF THIS IS THE DCT WE WANT\n         BE    $TDCK3D             YES, BRANCH\n         ICM   R8,15,DCTCHAIN      LOAD NEXT ADDRESS IN CHAIN\n         BNZ   $TDCK3C             NOT ZERO, LOOP\n         BZ    $MPXIT00            ZERO, JUST GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*                 SEE IF OUR OPERAND IS PRESENT                       *\n*                                                                     *\n***********************************************************************\n$TDCK3D  LR    R4,R5               SAVE ADDRESS OF FIRST OPERAND\n$TDSEAR  BXH   R5,R6,$MPXIT00      GET NEXT OPERAND POINTER UNTIL END\n         L     R1,0(R5)            POINT TO ACTUAL OPERAND\n         LA    R14,KEYWTBL         POINT TO KEYWORD TABLE\n$TDSEAR1 LH    R15,0(R14)          LOAD MACHINE LENGTH OF OUR OPERAND\n         EX    R15,KEYCOMP         SEE IF THIS IS OUR OPERAND\n         BE    $TDGVAL             YES, BRANCH\n         LA    R14,8(R14)          INCREMENT TO NEXT KEYWORD TBL ENTRY\n         CLI   0(R14),X'FF'        SEE IF END OF TABLE\n         BE    $TDSEAR             YES, GO PROCESS NEXT OPERAND\n         B     $TDSEAR1            NO, LOOP FOR NEXT KEYWORD IN TABLE\nKEYCOMP  CLC   0(0,R1),2(R14)      *** EXECUTE ONLY ***\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*                          KEYWORD TABLE                              *\n*                                                                     *\n*        EACH ENTRY HAS A HALFWORD MACHINE LENGTH FOLLOWED BY         *\n*        THE 1 TO 6 CHARACTER KEYWORD OR ABBREVIATION.  THE           *\n*        END OF TABLE IS FLAGGED BY A X'FF' ENTRY                     *\n*                                                                     *\n***********************************************************************\nKEYWTBL  DC    H'2',CL6'JT=   '\n         DC    H'3',CL6'JTY=  '\n         DC    H'4',CL6'JTYP= '\n         DC    H'5',CL6'JTYPE='\n         DC    8X'FF'\n***********************************************************************\n*                                                                     *\n*        GET VALUE OF OUR OPERAND                                     *\n*                                                                     *\n***********************************************************************\n$TDGVAL  LA    R2,1(R15,R1)        INCREMENT PAST \"JTYPE=\"\n         LR    R1,R2               SAVE START OF VALUE\n         SLR   R15,R15             SET LENGTH TO ZERO\n$TDGVALA CLI   0(R2),C','          END OF OPERAND\n         BE    $TDGVALB            YES, BRANCH\n         CLI   0(R2),C' '          END OF OPERAND\n         BE    $TDGVALB            YES, BRANCH\n         LA    R2,1(R2)            INCREMENT TO NEXT CHAR OF OPERAND\n         CH    R15,=H'4'           SEE IF MAX LENGTH EXCEEDED\n         BE    $TDERR01            YES, ERROR\n         LA    R15,1(R15)          ADD 1 TO LENGTH\n         B     $TDGVALA            LOOP\n$TDGVALB MVC   VALUE,$BLANKS       BLANK THE RECEIVING FIELD\n         LTR   R15,R15             SEE IF LENGTH = ZERO\n         BZ    $TDREF              YES, NULL OPERAND, BRANCH\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MVOPND          MOVE THE OPERAND TO A SAVE AREA\n         B     $TDREF              GO REFORMAT COMMAND BUFFER\nMVOPND   MVC   VALUE(0),0(R1)      *** EXECUTE ONLY ***\nBLNKOPND MVC   0(0,R1),=CL20' '    *** EXECUTE ONLY ***\n***********************************************************************\n*                                                                     *\n*        REFORMAT THE COMMAND BUFFER TO EXCLUDE OUR KEYWORD           *\n*        AND VALUE                                                    *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n*        BLANK OUR KEYWORD AND VALUE AREA WITHIN THE BUFFER           *\n***********************************************************************\n$TDREF   MVC   DCTUSER0(4),VALUE   SET NEW VALUE IN DCT\n         DROP  R8                  DROP ADDRESSABILITY TO DCT\n         L     R1,0(R5)            GET ADDRESS OF OUR OPERAND\n         BCTR  R1,0                BACK UP 1 CHARACTER FOR THE COMMA\n         LA    R2,4(R5)            GET NEXT POINTER ADDRESS\n         L     R2,0(R2)            GET ADDRESS OF NEXT OPERAND\n         BCTR  R2,0                BACK UP 1 CHARACTER FOR THE COMMA\n         LR    R3,R2               SAVE ADDRESS OF NEXT OPERAND\n         SR    R3,R1               GET LENGTH OF OUR KEYWORD AND VALUE\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,BLNKOPND         BLANK THE KEYWORD AND VALUE AREA\n         LA    R3,COMMAND+L'COMMAND  GET END ADDRESS OF COMMAND BUFFER\n***********************************************************************\n*        SHIFT THE REST OF THE COMMAND BUFFER TO THE VACATED          *\n*        AREA ONE BYTE AT A TIME.                                     *\n***********************************************************************\n$TDREFA  CR    R2,R3               SEE IF END OF COMMAND BUFFER\n         BE    $TDREFB             YES, DONE\n         CLI   0(R2),C' '          END OF SEND FIELD\n         BE    $TDREFB             YES, DONE\n         MVC   0(1,R1),0(R2)       SHIFT 1 CHARACTER\n         MVI   0(R2),C' '          BLANK THIS CHARACTER\n         LA    R1,1(R1)            INCREMENT TO NEXT CHAR RECEIVE FLD\n         LA    R2,1(R2)            INCREMENT TO NEXT CHAR SEND    FLD\n         B     $TDREFA             LOOP\n         SPACE 3\n***********************************************************************\n*        ADD A DUMMY WS=(/) PARAMETER TO THE COMMAND LIST.  THE       *\n*        EXIT FACILITY DOES NOT ALLOW CHANGING OF REGISTERS AND       *\n*        THE LAST OPERAND POINTER ADDRESS IN REGISTER 7 WOULD         *\n*        HAVE TO CHANGE TO HAVE FEWER PARAMETERS.  THE ADDITION       *\n*        OF THIS DUMMY PARAMETER ELIMINATES THIS PROBLEM.             *\n***********************************************************************\n$TDREFB  MVC   0(7,R1),=C',WS=(/)' MOVE DUMMY PARM TO END OF STRING\n         SPACE 3\n***********************************************************************\n*        RECALCULATE THE OPERAND ADDRESSES AND BXH REGISTERS          *\n***********************************************************************\n$TDREFC  XC    COMPNTER(80),COMPNTER CLEAR POINTER LIST\n         LA    R1,COMPNTER         POINT TO FIRST POINTER\n         LR    R5,R1               SAVE AS FIRST BXH REGISTER\n         LR    R7,R1               SET AS LAST BXH REGISTER\n         LA    R2,COMOPRND         POINT TO FIRST OPERAND\n         ST    R2,0(R1)            SAVE ADDRESS IN POINTER LIST\n         LA    R1,4(R1)            POINT TO NEXT ENTRY IN POINTER LIST\n$TDREFD  CLI   0(R2),C' '          END OF COMMAND\n         BE    $TDREFE             YES, BRANCH\n         CLI   0(R2),C','          END OF OPERAND\n         BE    $TDREFE             YES, BRANCH\n         LA    R2,1(R2)            INCREMENT TO NEXT CHAR OF OPERAND\n         B     $TDREFD             LOOP\n$TDREFE  LA    R2,1(R2)            POINT PAST ','\n         ST    R2,0(R1)            SAVE ADDRESS IN POINTER LIST\n         LA    R1,4(R1)            POINT TO NEXT ENTRY IN POINTER LIST\n         CLI   0(R2),C' '          END OF COMMAND\n         BE    $TDREFF             YES, GET OUT\n         LA    R7,4(R7)            INCREMENT END OF POINTER LIST ADDR\n         B     $TDREFD             LOOP\n$TDREFF  B     $MPXIT00            GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                  E R R O R     R O U T I N E S                      *\n*                                                                     *\n***********************************************************************\n$TDERR01 MVC   COMMAND(L$MPMSG1),$MPMSG1 MOVE MESSAGE TO PCE WORK AREA\n         LA    R0,L$MPMSG1         SET MESSAGE LENGTH IN REG 0\n         B     $MPXIT16            GO EXIT ROUTINE\n         SPACE 3\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\n$MPXIT00 $FREEBUF (R9)             FREE OUR WORK AREA\n$MPXIT   LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\n$MPXIT16 $STORE R0                 SAVE MESSAGE LENGTH\n         $FREEBUF (R9)             FREE OUR WORK AREA\n         LA    R15,16              SET RETURN CODE TO 16\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS USED BY THIS JES2 EXIT                             *\n*                                                                     *\n***********************************************************************\n$MPMSG1  DC    C'THE VALUE FOR JTYPE= OPERAND EXCEEDS EIGHT CHARACTERS'\nL$MPMSG1 EQU   *-$MPMSG1\n         SPACE 3\n         LTORG\n         TITLE 'JES2 JTYPE WTO MESSAGE MODIFICATION EXIT'\n***********************************************************************\n*                                                                     *\n*        E010$DU MAIN ENTRY POINT                                     *\n*                                                                     *\n***********************************************************************\n         PUSH USING\nE010$DU  $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLERS REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R1  - ADDRESS OF THE CMB                                     *\n*        R11 - ADDRESS OF THE HCT                                     *\n*        R13 - ADDRESS OF THE PCE                                     *\n*        R14 - RETURN ADDRESS                                         *\n*        R15 - ENTRY ADDRESS                                          *\n*                                                                     *\n***********************************************************************\n         LR    R8,R1               SAVE CMB ADDRESS\n         USING CMB,R8              SET ADDRESSABILITY TO COMMAND BFR\n***********************************************************************\n*                                                                     *\n*        OFFLOAD DEVICES DO NOT HAVE TO BE HANDLED BY THIS EXIT.      *\n*        THE $T AND @DU ROUTINES FOR THOSE DEVICES HANDLES THEM       *\n*        FOR US.  THE PRINTERS AND PUNCHES WILL PROBABLY BE           *\n*        HANDLED THE SAME WAY IN THE FUTURE, BUT FOR NOW, WE WILL     *\n*        HAVE TO DO IT OURSELVES.                                     *\n*                                                                     *\n***********************************************************************\n         CLC   CMBMID+1(4),=C'HASP' SEE IF STANDARD JES2 MESSAGE\n         BNE   EXIT10A             NO, GO PROCESS OUT-OF-LINE MESSAGE\n         CLC   CMBMID+1(7),=C'HASP628' SEE IF $DU MESSAGE REPLY\n         BNE   EXIT10R0            NO, JUST GET OUT\n         MVC   PCEUSER0(8),CMBJOBN SAVE DEVICE ID\n         B     EXIT10B             GO SEE IF ONE OF OUR DEVICES\nEXIT10A  MVC   PCEUSER0(8),CMBMID  SAVE POSSIBLE DEVICE ID\nEXIT10B  CLC   PCEUSER0(5),=C'PRINT' SEE IF FOR A PRINTER\n         BE    EXIT10C             YES, BRANCH\n         CLC   PCEUSER0(3),=C'PRT'   SEE IF FOR A PRINTER\n         BE    EXIT10C             YES, BRANCH\n         CLC   PCEUSER0(3),=C'PUN' SEE IF FOR A PUNCH\n         BE    EXIT10C             YES, BRANCH\n         B     EXIT10R0            NO, NOT ONE OF OUR DEVICES\nEXIT10C  SLR   R5,R5               CLEAR REG FOR IC\n         IC    R5,CMBML            LOAD MESSAGE LENGTH\n         CH    R5,=H'50'           SEE IF MESSAGE LENGTH GT 50\n         BL    EXIT10R0            NO, MUST BE SHORT FORM OF COMMAND\n         ICM   R2,15,$DCTPOOL      LOAD START ADDRESS OF 1ST DCT POOL\n         BZ    EXIT10E             ZERO, NONE IN POOL, BRANCH\n         USING DCT,R2              SET ADDRESSABILITY TO DCT\nEXIT10D  CLC   DCTDEVN,PCEUSER0    SEE IF THIS IS THE DCT WE WANT\n         BE    EXIT10G             YES, BRANCH\n         ICM   R2,15,DCTCHAIN      LOAD NEXT ADDRESS IN CHAIN\n         BZ    EXIT10E             ZERO, BRANCH\n         B     EXIT10D             LOOP\nEXIT10E  ICM   R2,15,$DCTPOL2      LOAD START ADDRESS OF 2ND DCT POOL\n         BZ    EXIT10R0            ZERO, NO DCT, JUST GET OUT\nEXIT10F  CLC   DCTDEVN,PCEUSER0    SEE IF THIS IS THE DCT WE WANT\n         BE    EXIT10G             YES, BRANCH\n         ICM   R2,15,DCTCHAIN      LOAD NEXT ADDRESS IN CHAIN\n         BZ    EXIT10R0            ZERO, NO DCT, JUST GET OUT\n         B     EXIT10F             LOOP\nEXIT10G  LA    R3,CMBMSG           LOAD START ADDRESS OF MESSAGE\n         AR    R3,R5               ADD LENGTH OF MESSAGE\n         MVC   0(7,R3),=C' JT='    SET FIELD NAME\n         LA    R3,4(R3)            INCREMENT PAST FIELD NAME\n         MVC   0(4,R3),DCTUSER0    MOVE JTYPE VALUES TO LINE\n         MVI   5(R3),C' '          FLAG END OF LIST\n         CLI   0(R3),C' '          SEE IF ANY\n         BH    EXIT10H             YES, BRANCH\n         MVI   0(R3),C','          FLAG END OF LIST\n         LA    R3,1(R3)            INCREMENT PAST ','\n         B     EXIT10I             BRANCH\nEXIT10H  CLI   0(R3),C' '          SEE IF END OF LIST\n         BNH   EXIT10I             YES, BRANCH\n         LA    R3,1(R3)            INCREMENT TO NEXT ENTRY IN LIST\n         B     EXIT10H             LOOP\nEXIT10I  LA    R4,CMBMSG           LOAD START ADDRESS OF MESSAGE\n         SR    R3,R4               CALCULATE LENGTH OF MESSAGE\n         STC   R3,CMBML            SAVE NEW LENGTH OF MESSAGE\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - DISCARD THE MESSAGE                                *\n*                                                                     *\n***********************************************************************\nEXIT10R0 LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nEXIT10R4 LA    R15,4               SET RETURN CODE TO 4\n         $RETURN RC=(R15)          RETURN TO JES2\nEXIT10R8 LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HOOPER": {"ttr": 3592, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         JOHN V. HOOPER\n         FIRST UNION NATIONAL BANK\n         1 FIRST UNION CENTER\n         301 SOUTH COLLEGE ST.\n         DC-7   FCS-12\n         CHARLOTTE, N.C.  28288\n         (704) 374-2427\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JES$LF": {"ttr": 3594, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 $LF COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 1.3.4  OR SP 1.3.6                      *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED PROCESS THE $LF COMMAND   *\n*        WHEN ENTERED.  THIS COMMAND IS IMPLEMENTED AS A TYPE 5       *\n*        EXIT TO JES2, AND AS SUCH MUST INTERCEPT ONLY THE $LF        *\n*        COMMAND WHEN ENCOUNTERED.                                    *\n*                                                                     *\n*                                                                     *\n*        THE $LF COMMAND HAS THE FOLLOWING SYNTAX:                    *\n*                                                                     *\n*        $L F,                                                        *\n*             J=JN-NN,                                                *\n*             R=DEST1-DEST2,                                          *\n*             Q=CLASSES,                                              *\n*             F=FORM,                                                 *\n*             C=FCB,                                                  *\n*             T=UCS,                                                  *\n*             O=OVERLAY,                                              *\n*             B=Y/N,                                                  *\n*             LIM=LOW-HIGH.                                           *\n*             XS=S/D/N,       IF XJCF OPTION TAKEN                    *\n*             HOLD,                                                   *\n*             L                                                       *\n*                                                                     *\n*        WHERE:                                                       *\n*                                                                     *\n*        J=JN-NN       - LIST FORMS FOR THE SPECIFIED JOB(S)          *\n*                        DEFAULTS TO ALL JOBS                         *\n*        R=DEST1-DEST2 - LIST FORMS FOR THE SPECIFIED DESTINATION(S)  *\n*                        DEFAULTS TO DESTINATION OF REQUESTOR         *\n*        Q=CLASSES       LIST FORMS FOR THE SPECIFIED SYSOUT QUEUE(S) *\n*                        UP TO 8 SYSOUT CLASSES MAY BE REQUESTED.     *\n*                        DEFAULTS TO ALL SYSOUT CLASSES.              *\n*        F=FORM          LIST FORMS FOR THE SPECIFIED SYSOUT FORM     *\n*                        ONLY.                                        *\n*                        DEFAULTS TO NOT BEING A SELECTION CRITERIA.  *\n*        C=FCB           LIST FORMS FOR THE SPECIFIED SYSOUT FCB      *\n*                        ONLY.                                        *\n*                        DEFAULTS TO NOT BEING A SELECTION CRITERIA.  *\n*        T=UCS           LIST FORMS FOR THE SPECIFIED SYSOUT UCS      *\n*                        OR CHARACTER SET ONLY.                       *\n*                        DEFAULTS TO NOT BEING A SELECTION CRITERIA.  *\n*        O=OVERLAY       LIST FORMS FOR THE SPECIFIED SYSOUT 3800     *\n*                        OVERLAY NAME.                                *\n*                        DEFAULTS TO NOT BEING A SELECTION CRITERIA.  *\n*        B=Y/N           LIST FORMS FOR THE 3800 BURST SPECIFICATION  *\n*                        OF Y (YES) OR N (NO).                        *\n*                        DEFAULTS TO NOT BEING A SELECTION CRITERIA.  *\n*        LIM=LOW-HIGH    LIST FORMS FOR JOBS WITH OUTPUT CONTAINING   *\n*                        OUTPUT NUMBER OF LINES IN THE RANGE GIVEN.   *\n*                        DEFAULTS TO ALL SIZED (0-*)                  *\n*        XS=SHIFT        LIST FORMS WHICH HAVE THE XJCF SHIFT         *\n*                        DESIGNATION SPECIFIED (L/D/N)                *\n*                        DEFAULTS TO ALL OUTPUT.                      *\n*        HOLD            LIST FORMS WHICH HAVE BEEN HELD BY AN        *\n*                        OPERATOR WHICH MAKES THEM NON-SELECTABLE     *\n*                        FOR PRINTING.                                *\n*                        DEFAULTS TO NOT BEING A SELECTION CRITERIA.  *\n*        L/S             USE THE LONG OR SHORT COMMAND RESPONSE       *\n*                        DEFAULTS TO SHORT 1 LINE RESPONSE.           *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST COMPUTER SERVICES                      *\n*                        420 BRUSHY MOUNTAIN ROAD                     *\n*                        WILKESBORO, N.C. 28697                       *\n*                        (919) 651-5414                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *\n*                                                                     *\n*        1)  THE HASP900 MESSAGE WILL BE ISSUED FOR EACH OUTPUT       *\n*            GROUP WHICH MATCHES THE SELECTION CRITERIA.              *\n*                                                                     *\n*        $HASP900 JJJJJJJJ JNNNN RRRRR Q=X F=FFFF NNNNNNNNN           *\n*        $HASP900                C=CCCC T=TTTT O=OOOO B=B HHHH        *\n*                                                                     *\n*                IF THE XJCF OPTION IS TAKEN THE FORMAT               *\n*                OF THE COMMAND RESPONSE WILL BE                      *\n*                                                                     *\n*        $HASP900 JJJJJJJJ JNNNN RRRRR Q=X F=FFFF XS=? NNNNNNNNN      *\n*        $HASP900                C=CCCC T=TTTT O=OOOO B=B HHHH        *\n*                                                                     *\n*            A)  JJJJJJJJ   - JOBNAME                                 *\n*            B)  JOBNNNN    - JOB NUMBER                              *\n*            C)  RRRRRRRR   - ROUTING (DESTINATION)                   *\n*            D)  X          - SYSOUT QUEUE                            *\n*            E)  FFFF       - SYSOUT FORM                             *\n*            F)  NNNNNNNNNN - TOTAL NUMBER OF PRINT LINES FOR GROUP   *\n*            G)  CCCC       - SYSOUT FCB                              *\n*            H)  TTTT       - SYSOUT UCS                              *\n*            I)  OOOO       - SYSOUT OVERLAY                          *\n*            J)  B          - 3800 BURST INDICATOR (Y/N)              *\n*            K)  HHHH       - HOLD INDICATOR (HOLD/    )              *\n*            L)  XS         - XJCF SHIFT DESIGNATION FOR XEROX 9700   *\n*                             SUPPORT (S/D/N)                         *\n*                                                                     *\n*                                                                     *\n*        2)  THE HASP919 MESSAGE WILL BE ISSUED WHEN NO OUTPUT        *\n*            GROUP MATCHES THE SELECTION CRITERIA.                    *\n*                                                                     *\n*        $HASP919 NO OUTPUT QUEUED                                    *\n*                                                                     *\n*                                                                     *\n*        3)  THE HASP950 MESSAGE WILL BE ISSUED WHEN AN INVALID       *\n*            OPERAND KEYWORD OR VALUE IS DETECTED.                    *\n*                                                                     *\n*        $HASP950 ......... INVALID OPERAND                           *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J E S E X I T 1          *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $CMB         SYS1.HASPSRC                               *\n*        04)  $COMWORK     SYS1.HASPSRC                               *\n*        05)  $CWTO        SYS1.HASPSRC                               *\n*        06)  $DEST        SYS1.HASPSRC                               *\n*        07)  $ENTRY       SYS1.HASPSRC                               *\n*        08)  $GETBUF      SYS1.HASPSRC                               *\n*        09)  $FREEBUF     SYS1.HASPSRC                               *\n*        10)  $HASPEQU     SYS1.HASPSRC                               *\n*        11)  $HASPGBL     SYS1.HASPSRC                               *\n*        12)  $HCT         SYS1.HASPSRC                               *\n*        13)  $JCT         SYS1.HASPSRC                               *\n*        14)  $JOE         SYS1.HASPSRC                               *\n*        15)  $JOT         SYS1.HASPSRC                               *\n*        16)  $JQE         SYS1.HASPSRC                               *\n*        17)  $MIT         SYS1.HASPSRC                               *\n*        18)  $MODEND      SYS1.HASPSRC                               *\n*        19)  $MODULE      SYS1.HASPSRC                               *\n*        20)  $PCE         SYS1.HASPSRC                               *\n*        21)  $RAT         SYS1.HASPSRC                               *\n*        22)  $RETURN      SYS1.HASPSRC                               *\n*        23)  $SAVE        SYS1.HASPSRC                               *\n*        24)  $STORE       SYS1.HASPSRC                               *\n*        25)  IAZRESPA     SYS1.AMODGEN                               *\n*        26)  IFGRPL       SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       3K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SET CONDITIONAL ASSEMBLY VARIABLES                           *\n*                                                                     *\n*        THE XJCF VARIABLE IS DESIGNED TO GENERATE SUPPORT FOR        *\n*        THE XEROX 9700 SUPPORT PRODUCT XJCF OF XEXOS COMPUTING       *\n*        SYSTEMS.  INSTALLATIONS NOT USING THIS PRODUCT MUST          *\n*        SET THE VALUE TO 'NO'.                                       *\n*                                                                     *\n***********************************************************************\n         LCLC  &XJCF\n&XJCF    SETC  'YES'              ASSEMBLE FOR XJCF PRODUCT\n         EJECT\n         COPY  $HASPGBL\nJES$LF   $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 $LF COMMAND PROCESSOR',                     X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               RESPA,              GENERATE MVS  RESPA DSECT           X\n               RPL,                GENERATE MVS  IFGRPL DSECT          X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $RAT,               GENERATE HASP RAT DSECT             X\n               $JOT,               GENERATE HASP JOT DSECT             X\n               $CMB                GENERATE HASP CMB DSECT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREAS                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n$LFWORK  DSECT                     COMMAND WORK AREA\n         DS    CL104               ***** RESERVED BY JES2  *****\nJOEADDR  DS    F                   REGISTER SAVE AREA\nWRKA     DS    CL10                EXIT WORK AREA\nJTYPE    DS    C                   JOB TYPE (* OR JQEFLAG VALUE)\nFORMAT   DS    C                   DISPLAY FORMAT (S / L)\nMISCSW   DS    X                   MISCELLANEOUS SWITCHES\nTWOPART  EQU   X'80'               TWO PART DESTINATION SPECIFIED\nMATCH    EQU   X'40'               MATCH FOR OUTPUT FOUND\nNUMCLASS DS    X                   NUMBER OF OUTPUT CLASSES FOLLOWING\nOUTCLASS DS    CL8                 JOB OUTPUT CLASS / *\nLOWJOB   DS    H                   LOW JOB NUMBER FOR SEARCH\nHIGHJOB  DS    H                   HIGH JOB NUMBER FOR SEARCH\nLOWROUT  DS    F                   LOW ROUTE CODE FOR SEARCH\nHIGHROUT DS    F                   HIGH ROUTE CODE FOR SEARCH\nLOWLIM   DS    F                   LOW OUTPUT LINE LIMIT\nHIGHLIM  DS    F                   HIGH OUTPUT LINE LIMIT\nDEST1P1  DS    CL10                BEGINNING DEST PART 1\nDEST1P2  DS    CL10                BEGINNING DEST PART 2\nDEST2P1  DS    CL10                ENDING DEST PART 1\nOUTFORM  DS    CL4                 JOB FORM\nOUTFCB   DS    CL4                 JOB FCB\nOUTUCS   DS    CL4                 JOB UCS\nOUTOVLY  DS    CL4                 JOB OVLY\nOUTBURST DS    CL1                 JOB BURST IND\nOUTHOLD  DS    CL1                 JOB HOLD IND\nOUTXS    DS    CL1                 JOB OUTPUT XJCF SHIFT VALUE\nCLEARLN  EQU   *-$LFWORK           LENGTH OF WORK AREA PREFIX\nMESSAGE  DS    CL100               MESSAGE WORK AREA\n*\nMSG1     EQU   MESSAGE             FIRST MESSAGE\nOJOBNM   EQU   MESSAGE,8           OUTPUT JOBNAME\nOBUSYIND EQU   MESSAGE+8,1         OUTPUT BUSY (PRINTING/PUNCHING)\nOJOBNO   EQU   MESSAGE+9,5         OUTPUT JOB NUMBER\nODEST    EQU   MESSAGE+14,8        OUTPUT DESTINATION\nOCLASS   EQU   MESSAGE+24,1        OUTPUT CLASS\nOFORM    EQU   MESSAGE+28,4        OUTPUT FORM\n         AIF   ('&XJCF' EQ 'YES').XJCF1\nOQTY     EQU   MESSAGE+33,8        OUTPUT NUMBER OF LINES/CARDS\n         AGO   .XJCF1E\n.XJCF1   ANOP\nOXS      EQU   MESSAGE+36,1        XJCF SHIFT VALUE\nOQTY     EQU   MESSAGE+38,8        OUTPUT NUMBER OF LINES/CARDS\n.XJCF1E  ANOP\nMSG2     EQU   MESSAGE+46          SECOND MESSAGE\nOFCB     EQU   MESSAGE+63,4        OUTPUT FCB\nOUCS     EQU   MESSAGE+70,4        OUTPUT UCS\nOOVLY    EQU   MESSAGE+77,4        OUTPUT OVERLAY\nOBURST   EQU   MESSAGE+84,1        OUTPUT BURST INDICATOR\nOHOLDIND EQU   MESSAGE+86,4        OUTPUT HOLD INDICATOR\nJES$LF   CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         TITLE 'JES2 $LF COMMAND PROCESSOR'\n         PRINT OFF\n         AIF   ('&VERSION' NE 'SP 1.3.6' AND                           X\n               '&VERSION' NE 'SP 2.1.5').VEREND\n         PRINT ON\n***********************************************************************\n*                                                                     *\n*        EQUATED VARIABLES FOR SP 1.3.6 OR SP 2.1.5                   *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nRATDSECT EQU   RAT\nJOTDSECT EQU   JOT\nJOEDSECT EQU   JOE\nJOECFLAG EQU   JOEFLAGC,1\n$JOEBRST EQU   JOEFCBRT\nQUEJOB   EQU   JQE3JOB\nQUESTC   EQU   JQE3STC\nQUETSU   EQU   JQE3TSU\nJOEFLAG  EQU   JOEFLAG1,1\n$JOEBUSY EQU   JOE1BUSY\nJQEFLAGS EQU   JQEFLAG1,1\nQUEHOLDA EQU   JQE1HLDA\nQUEHOLD1 EQU   JQE1HLD1\n$JOESLEC EQU   JOE2SLEC\n         EJECT\n.VEREND  ANOP\n         PRINT ON\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\n$LF      $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       - ADDRESS OF THE CURRENT OPERAND                    *\n*        R6       - INCREMENT VALUE OF 4                              *\n*        R7       - ADDRESS OF THE LAST OPERAND                       *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SEE IF THIS IS A $LF COMMAND                                 *\n*                                                                     *\n***********************************************************************\n         CLC   COMVERB(2),=C'LF'   ISF IF THIS IS THE $LF COMMAND\n         BNE   EXIT0               NO, BRANCH TO COMMAND OK EXIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        $L F,J=JN-NN,R=DEST1-DEST2,Q=CLASS,L/S                       *\n*            (IF L/S (LONG OR SHORT FORM) IS NOT SPECIFIED, THE       *\n*            SHORT FORM WILL BE USED)                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        GET A JES2 BUFFER FOR REENTRANCY AND                         *\n*        CLEAR THE COMMAND WORK AREA                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R8,R1               SAVE WORK AREA ADDRESS\n         USING $LFWORK,R8          SET ADDRESSABILITY TO WORK AREA\n         XC    $LFWORK(CLEARLN),$LFWORK CLEAR WORK AREA PREFIX\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        GET THE DEFAULT ROUTE CODE FOR $LF                           *\n*                                                                     *\n***********************************************************************\nGETROUT  L     R1,COMJROUT         LOAD COMMAND ROUTE CODE\n         TM    COMFLAG,CMBFLAGW    IS THIS A RJE\n         BNO   GETROUTE            NO, BRANCH\n         CLM   R1,B'1100',$OWNNODE IS THIS OUR NODE AND RJE\n         BNE   GETROUTE            NO, BRANCH\n         LH    R1,COMJRMT          LOAD THE REMOTE NUMBER\n         BCTR  R1,0                MAKE NUMBER RELATIVE TO ZERO\n         MH    R1,=Y(RATTLE)       MULTIPLY BY RAT LENGTH FOR OFFSET\n         AL    R1,$RATABLE         POINT TO RAT ENTRY FOR THIS RJE\n         L     R1,RATROUTE-RATDSECT(,R1) PICK UP PROPER ROUTINE\nGETROUTE ST    R1,LOWROUT          SET DEFAULT LOW ROUTE CODE\n         ST    R1,HIGHROUT         AND HIGH ROUTE CODE\n***********************************************************************\n*                                                                     *\n*        GET THE DEFAULT JOB RANGE FOR $LF                            *\n*                                                                     *\n***********************************************************************\nGETJRNG  SLR   R1,R1               SET DEFAULT LOW JOB NUMBER\n         STH   R1,LOWJOB           SAVE LOW JOB NUMBER\n         LH    R1,$NUMJBNO         SET DEFAULT HIGH JOB NUMBER\n         STH   R1,HIGHJOB          SAVE HIGH JOB NUMBER\n         MVI   JTYPE,C'*'          SET TO DISPLAY ALL JOB TYPES\n***********************************************************************\n*                                                                     *\n*        SET THE DEFAULT JOB OUTPUT CLASS AND CMD FORMAT              *\n*                                                                     *\n***********************************************************************\n         MVI   OUTCLASS,C'*'       SET TO ALL CLASSES\n         MVI   FORMAT,C'S'         SET TO SHORT FORM OF COMMAND\n         MVC   OUTFORM,=C'****'    SET TO ALL FORMS\n         MVC   OUTFCB,=C'****'     SET TO ALL FCBS\n         MVC   OUTUCS,=C'****'     SET TO ALL UCS IDS\n         MVC   OUTOVLY,=C'****'    SET TO ALL OVERLAYS\n         MVI   OUTBURST,C'*'       SET TO ALL BURST TYPES\n         MVI   OUTHOLD,C'*'        SET TO NOT SELECT ONLY HELD OUTPUT\n         MVI   OUTXS,C'*'          SET FOR ALL XJCF SHIFT VALUES\n         XC    LOWLIM,LOWLIM       SET LOW LINE LIMIT TO ZERO\n         MVC   HIGHLIM,=X'7FFFFFFF' SET HIGH LINE LIMIT TO 2 GIG\n         MVI   MISCSW,X'00'        ZERO THE MISCELLANEOUS SWITCHES\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXAMINE THE COMMAND OPERANDS                                 *\n*                                                                     *\n***********************************************************************\nCLFNSPEC BXH   R5,R6,CLFOK         IF NO MORE EXIT\n         L     R1,0(,R5)           POINT TO OPERAND\n         CLC   0(2,R1),=C'J='      JOB(S) SELECTION?\n         BE    CLFJ                YES, BRANCH\n         CLC   0(2,R1),=C'R='      RJE(S) SELECTION?\n         BE    CLFR                YES, BRANCH\n         CLC   0(2,R1),=C'Q='      SYSOUT CLASS SELECTION?\n         BE    CLFQ                YES, BRANCH\n         CLC   0(2,R1),=C'F='      FORM SELECTION?\n         BE    CLFF                YES, BRANCH\n         CLC   0(2,R1),=C'C='      FCB SELECTION?\n         BE    CLFC                YES, BRANCH\n         CLC   0(2,R1),=C'T='      UCS/CHARS SELECTION?\n         BE    CLFT                YES, BRANCH\n         CLC   0(2,R1),=C'O='      3800 OVERLAY SELECTION?\n         BE    CLFOV               YES, BRANCH\n         CLC   0(2,R1),=C'B='      3800 BURST SELECTION?\n         BE    CLFB                YES, BRANCH\n         CLC   0(4,R1),=C'LIM='    OUTPUT LINE LIMIT SELECTION?\n         BE    CLFLIM              YES, BRANCH\n         CLC   0(5,R1),=C'HOLD '   HELD ONLY SELECTION?\n         BE    CLFH                YES, BRANCH\n         CLC   0(5,R1),=C'HOLD,'   HELD ONLY SELECTION?\n         BE    CLFH                YES, BRANCH\n         CLC   0(2,R1),=C'L '      LONG FORM OF COMMAND DESIRED?\n         BE    CLFORM              YES, BRANCH\n         CLC   0(2,R1),=C'L,'      LONG FORM OF COMMAND DESIRED?\n         BE    CLFORM              YES, BRANCH\n         CLC   0(2,R1),=C'S '      SHORT FORM OF COMMAND DESIRED?\n         BE    CLFORM              YES, BRANCH\n         CLC   0(2,R1),=C'S,'      SHORT FORM OF COMMAND DESIRED?\n         BE    CLFORM              YES, BRANCH\n         AIF   ('&XJCF' NE 'YES').XJCF2\n         CLC   0(3,R1),=C'XS='     XJCF SHIFT SELECTION?\n         BE    CLFXS               YES, BRANCH\n.XJCF2   ANOP\n         B     BADOPRND            ERROR EXIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE JOB (J) RANGE SUBPARAMETER                       *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFJ     DS    0H\n         L     R1,0(R5)            POINT TO OPERAND\n         SLR   R15,R15             SET LENGTH TO ZERO\n         LA    R1,3(R1)            INDEX PAST 'J=J' ETC\n         LR    R14,R1              SAVE START OF OPERAND\n         MVI   LOWJOB,X'FF'        SET START OF PROCESSING INDICATOR\nCLFJ1    CLI   0(R1),C'-'          END OF FIRST OPERAND\n         BE    CLFJ2               YES, BRANCH\n         CLI   0(R1),C','          END OF ALL OPERANDS\n         BE    CLFJ2               YES, BRANCH\n         CLI   0(R1),C' '          END OF ALL OPERANDS\n         BE    CLFJ2               YES, BRANCH\n         CLI   0(R1),C'0'          NUMERIC OPERAND\n         BL    BADOPRND            NO, ERROR\n         CLI   0(R1),C'9'          NUMERIC OPERAND\n         BH    BADOPRND            NO, ERROR\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR JOB NUMBER\n         LA    R15,1(,R15)         ADD 1 TO OPERAND LENGTH\n         B     CLFJ1               LOOP UNTIL DONE\nCLFJ2    LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,PACKJOB         PACK JOB NUMBER\n         CVB   R15,$DOUBLE         CONVERT TO BINARY\n         C     R15,=F'20000'       SEE IF NUMBER TOO LARGE\n         BH    BADOPRND            YES, ERROR\n         CLI   0(R1),C'-'          LOW JOB OF RANGE\n         BE    CLFJ3               YES, BRANCH\n         STH   R15,HIGHJOB         SAVE HIGH JOB NUMBER\n         CLI   LOWJOB,X'FF'        IS THIS THE FIRST JOB NUMBER\n         BNE   CLFJ4               NO, ALL DONE WITH NUMBER, BRANCH\n         STH   R15,LOWJOB          SAVE LOW JOB NUMBER\n         B     CLFJ4               ALL DONE WITH NUMBER, BRANCH\nCLFJ3    CLI   LOWJOB,X'FF'        HAS LOW JOB NUMBER ALREADY BEEN PROC\n         BNE   BADOPRND            YES, ERROR\n         STH   R15,LOWJOB          SAVE LOW JOB NUMBER\n         LA    R1,1(,R1)           INCREMENT PAST '-'\n         LR    R14,R1              SAVE START OF OPERAND\n         SLR   R15,R15             RESET LENGTH TO ZERO\n         B     CLFJ1               LOOP FOR NEXT NUMBER OF RANGE\nPACKJOB  PACK  $DOUBLE,0(0,R14)    PACK JOB NUMBER\n         SPACE 1\nCLFJ4    L     R15,0(,R5)          POINT TO OPERAND\n         MVC   JTYPE,2(R15)        SET JOB TYPE\n         CLI   2(R15),C'J'         JOB?\n         BE    CLFNSPEC            YES, GET NEXT SPECIFICATION\n         CLI   2(R15),C'S'         STC?\n         BE    CLFNSPEC            YES, GET NEXT SPECIFICATION\n         CLI   2(R15),C'T'         TSU?\n         BNE   BADOPRND            NO, ERROR\n         B     CLFNSPEC            GET NEXT SPECIFICATION\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE ROUTE CODE (R) SUBPARAMETER                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*    RANGES ALLOWED  -    ONLY ASCENDING RANGES ARE PERMITTED         *\n*    --------------                                                   *\n*    NNNNNRNNNN (-RMMMM)                                              *\n*    NNNN.RNNNN (-RMMMM)                                              *\n*    NAME.RNNNN (-RMMMM)                                              *\n*                      -  RANGE OF REMOTES AT A GIVEN NODE            *\n*                        (NAME IS 8-BYTE EBCDIC FROM A DESTID CARD    *\n*    NNNNN(-NMMMM)     -  RANGE OF ALL REMOTES/UNITS AT GIVEN NODE    *\n*    UNNNN(-UMMMM)     -  RANGE OF UNITS AT THE LOCAL NODE ONLY       *\n*    RNNNN(-RMMMM)     -  RANGE OF REMOTES AT THE LOCAL NODE ONLY     *\n*    NAME1(-NAME2)     -  AS ANY ONE OF THE ABOVE, BUT NO OTHERS      *\n*    LOCAL             -  ALL SPECIAL LOCAL                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFR     L     R3,0(,R5)           POINT TO OPERAND\n         LA    R3,2(,R3)           INCREMENT PAST 'R='\n         SLR   R1,R1               SET ZERO LENGTH\n         LR    R4,R3               SAVE START OF OPERAND\n         MVC   DEST1P1,=CL10' '    BLANK DEST1 PART1\n         MVC   DEST1P2,=CL10' '    BLANK DEST1 PART2\n         MVC   DEST2P1,=CL10' '    BLANK DEST2 PART1\nCLFRLOOP CLI   0(R4),C'-'          END OF FIRST OPERAND\n         BE    CLFR2               YES, BRANCH\n         CLI   0(R4),C','          END OF LAST OPERAND\n         BE    CLFR2               YES, BRANCH\n         CLI   0(R4),C' '          END OF LAST OPERAND\n         BE    CLFR2               YES, BRANCH\n         CLI   0(R4),C'.'          TWO PART DESTINATION\n         BE    CLFR1               YES, BRANCH\n         LA    R4,1(,R4)           INCREMENT TO NEXT CHAR OF DEST\n         LA    R1,1(,R1)           ADD 1 TO LENGTH\n         B     CLFRLOOP            LOOP UNTIL DONE\nCLFR1    OI    MISCSW,TWOPART      SET TWO PART DEST INDICATION\n         CLI   DEST1P1,C' '        HAS FIRST ALREADY BEEN SPECIFIED\n         BNE   BADOPRND            YES, ERROR\n         B     CLFR2               GO PROCESS DEST FIELD\nCLFR2    LTR   R1,R1               CHECK LENGTH OF DEST\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R1,=H'10'           CHECK LENGTH OF DEST\n         BH    BADOPRND            GREATER THAN 10, ERROR\n         BCTR  R1,0                MAKE MACHINE LENGTH\n         CLI   DEST1P1,C' '        HAS PART1 ALREADY BEEN SPECIFIED\n         BNE   CLFR3               YES, BRANCH\n         EX    R1,MDEST1P1         MOVE DEST1 PART1\n         B     CLFR5               GET OUT\nCLFR3    TM    MISCSW,TWOPART      SEE IF TWO PART DEST INDICATION\n         BZ    CLFR4               NO, BRANCH\n         CLI   DEST1P2,C' '        SEE IF PART2 ALREADY BEEN SPECIFIED\n         BNE   CLFR4               YES, THIS IS THE SECOND DEST\n         EX    R1,MDEST1P2         MOVE DEST1 PART2\n         B     CLFR5               GET OUT\nCLFR4    CLI   DEST2P1,C' '        SEE IF DEST2 ALREADY BEEN SPECIFIED\n         BNE   BADOPRND            YES, ERROR\n         EX    R1,MDEST2P1         MOVE DEST2 PART1\n         B     CLFR5               GET OUT\nMDEST1P1 MVC   DEST1P1(0),0(R3)    MOVE DEST1 PART1\nMDEST1P2 MVC   DEST1P2(0),0(R3)    MOVE DEST1 PART2\nMDEST2P1 MVC   DEST2P1(0),0(R3)    MOVE DEST2 PART1\nCLFR5    CLI   0(R4),C'-'          SEE IF DESTINATION RANGE SPECIFIED\n         BE    CLFR6               YES, BRANCH\n         CLI   0(R4),C'.'          SEE IF TWO PART DEST SPECIFIED\n         BE    CLFR6               YES, BRANCH\n         B     CLFR10              GO CONVERT DEST TO ROUTE CODES\nCLFR6    LA    R4,1(,R4)           INCREMENT PAST '-' OR '.'\n         LR    R3,R4               SAVE START ADDRESS\n         SLR   R1,R1               RESET LENGTH TO ZERO\n         B     CLFRLOOP            LOOP FOR NEXT DESTINATION\nCLFR10   DS    0H\n         MVC   COMDWORK(2),COMJNOD SET DEFAULT NODE\n         $DEST DEST1P1,COMDWORK,LEN=10 CONVERT DEST1 PART1\n         BZ    BADOPRND            BAD DEST, ERROR\n         ST    R1,LOWROUT          SAVE ROUTE CODE\n         CLI   DEST1P2,C' '        CHECK IF TWO PART DEST\n         BE    CLFR12              NO, BRANCH\nCLFR11   CLM   R1,B'0011',$ZEROES  SEE IF NODAL DESTINATION ONLY\n         BNE   BADOPRND            NO, ERROR\n         CLM   R1,B'1100',$ZEROES  SEE IF NODE NUMBER SET\n         BE    BADOPRND            NO, ERROR\n         ST    R1,COMDWORK         SET DEFAULT NODE FOR SECOND PART\n         $DEST DEST1P2,COMDWORK,LEN=10 CONVERT DEST1 PART1\n         BZ    BADOPRND            BAD DEST, ERROR\n         ST    R1,LOWROUT          SAVE ROUTE CODE\n         CLM   R1,B'1100',COMDWORK MAKE SURE NODE DEFAULTED\n         BNE   BADOPRND            NO, ERROR\nCLFR12   MVC   HIGHROUT,LOWROUT    SET DEST RANGE TO EQUAL VALUES\n         CLI   DEST2P1,C' '        WAS DEST RANGE SPECIFIED\n         BE    CLFR13              NO, BRANCH\n         $DEST DEST2P1,COMDWORK,LEN=10 CONVERT DEST2 PART1\n         BZ    BADOPRND            BAD DEST, ERROR\n         ST    R1,HIGHROUT         SAVE ROUTE CODE\nCLFR13   CLC   HIGHROUT,LOWROUT    CHECK FOR ASCENDING RANGE\n         BL    BADOPRND            NO, ERROR\n         B     CLFNSPEC            LOOP TO NEXT SPECIFICATION\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE SYSOUT CLASS (Q) SUBPARAMETER                    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFQ     L     R1,0(,R5)           POINT TO OPERAND\n         LA    R1,2(,R1)           INCREMENT PAST 'Q='\n         LR    R14,R1              SAVE CLASS STRING ADDRESS\n         SLR   R15,R15             SET LENGTH TO ZERO\nCLFQ1    CLI   0(R1),C' '          END OF CLASS STRING\n         BE    CLFQ2               YES, BRANCH\n         CLI   0(R1),C','          END OF CLASS STRING\n         BE    CLFQ2               YES, BRANCH\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF CLASS\n         LA    R15,1(,R15)         ADD 1 TO LENGTH\n         B     CLFQ1               LOOP\nCLFQ2    STC   R15,NUMCLASS        SAVE LENGTH\n         LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'8'           SEE IF GT 8\n         BH    BADOPRND            GREATER THAN 8, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MOVECLAS        SAVE CLASS STRING\n         EX    R15,TRTCLASS        TEST CLASSES\n         BNZ   BADOPRND            NOT VALID, ERROR\n         B     CLFNSPEC            GET NEXT SPECIFICATION\nMOVECLAS MVC   OUTCLASS(0),0(R14)  MOVE SYSOUT CLASSES TO SAVE\nTRTCLASS TRT   OUTCLASS(0),CLASSTBL TEST SYSOUT CLASSES\nCLASSTBL DC    256X'01'            VALID SYSOUT CLASSES\n         ORG   CLASSTBL+C'A'\n         DC    9X'00'              CLASS A-I\n         ORG   CLASSTBL+C'J'\n         DC    9X'00'              CLASS J-R\n         ORG   CLASSTBL+C'S'\n         DC    8X'00'              CLASS S-Z\n         ORG   CLASSTBL+C'0'\n         DC    10X'00'             CLASS 0-9\n         ORG\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE SYSOUT FORM (F) SUBPARAMETER                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFF     L     R1,0(,R5)           POINT TO OPERAND\n         LA    R1,2(,R1)           INCREMENT PAST 'F='\n         LR    R14,R1              SAVE FORM NAME START ADDRESS\n         SLR   R15,R15             SET LENGTH TO ZERO\nCLFF1    CLI   0(R1),C' '          END OF FORM NAME\n         BE    CLFF2               YES, BRANCH\n         CLI   0(R1),C','          END OF FORM NAME\n         BE    CLFF2               YES, BRANCH\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF FORM NAME\n         LA    R15,1(,R15)         ADD 1 TO LENGTH\n         B     CLFF1               LOOP\nCLFF2    LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'4'           SEE IF GT 4\n         BH    BADOPRND            GREATER THAN 4, ERROR\n         MVC   OUTFORM,=CL4' '     BLANK FORM NAME\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MOVEFORM        SAVE FORMS ID\n         B     CLFNSPEC            GET NEXT SPECIFICATION\nMOVEFORM MVC   OUTFORM(0),0(R14)   MOVE FORM NAME TO SAVE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE SYSOUT FCB  (C) SUBPARAMETER                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFC     L     R1,0(,R5)           POINT TO OPERAND\n         LA    R1,2(,R1)           INCREMENT PAST 'C='\n         LR    R14,R1              SAVE FCB NAME START ADDRESS\n         SLR   R15,R15             SET LENGTH TO ZERO\nCLFC1    CLI   0(R1),C' '          END OF FCB NAME\n         BE    CLFC2               YES, BRANCH\n         CLI   0(R1),C','          END OF FCB NAME\n         BE    CLFC2               YES, BRANCH\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF FCB NAME\n         LA    R15,1(,R15)         ADD 1 TO LENGTH\n         B     CLFC1               LOOP\nCLFC2    LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'4'           SEE IF GT 4\n         BH    BADOPRND            GREATER THAN 4, ERROR\n         MVC   OUTFCB,=CL4' '      BLANK FCB NAME\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MOVEFCB         SAVE FCB NAME\n         B     CLFNSPEC            GET NEXT SPECIFICATION\nMOVEFCB  MVC   OUTFCB(0),0(R14)    MOVE FCB NAME TO SAVE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE SYSOUT UCS/CHARS (T) SUBPARAMETER                *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFT     L     R1,0(,R5)           POINT TO OPERAND\n         LA    R1,2(,R1)           INCREMENT PAST 'C='\n         LR    R14,R1              SAVE UCS NAME START ADDRESS\n         SLR   R15,R15             SET LENGTH TO ZERO\nCLFT1    CLI   0(R1),C' '          END OF UCS NAME\n         BE    CLFT2               YES, BRANCH\n         CLI   0(R1),C','          END OF UCS NAME\n         BE    CLFT2               YES, BRANCH\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF UCS NAME\n         LA    R15,1(,R15)         ADD 1 TO LENGTH\n         B     CLFT1               LOOP\nCLFT2    LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'4'           SEE IF GT 4\n         BH    BADOPRND            GREATER THAN 4, ERROR\n         MVC   OUTUCS,=CL4' '      BLANK UCS NAME\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MOVEUCS         SAVE UCS NAME\n         B     CLFNSPEC            GET NEXT SPECIFICATION\nMOVEUCS  MVC   OUTUCS(0),0(R14)    MOVE UCS NAME TO SAVE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE SYSOUT OVERLAY (O) SUBPARAMETER                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFOV    L     R1,0(,R5)           POINT TO OPERAND\n         LA    R1,2(,R1)           INCREMENT PAST 'C='\n         LR    R14,R1              SAVE OVERLAY NAME START ADDRESS\n         SLR   R15,R15             SET LENGTH TO ZERO\nCLFOV1   CLI   0(R1),C' '          END OF OVERLAY NAME\n         BE    CLFOV2              YES, BRANCH\n         CLI   0(R1),C','          END OF OVERLAY NAME\n         BE    CLFOV2              YES, BRANCH\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF OVLY NAME\n         LA    R15,1(,R15)         ADD 1 TO LENGTH\n         B     CLFOV1              LOOP\nCLFOV2   LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'4'           SEE IF GT 4\n         BH    BADOPRND            GREATER THAN 4, ERROR\n         MVC   OUTOVLY,=CL4' '     BLANK OVERLAY NAME\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MOVEOVLY        SAVE OVERLAY NAME\n         B     CLFNSPEC            GET NEXT SPECIFICATION\nMOVEOVLY MVC   OUTOVLY(0),0(R14)   MOVE OVERLAY NAME TO SAVE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE SYSOUT BURST (B) SUBPARAMETER                    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFB     L     R1,0(,R5)           POINT TO OPERAND\n         LA    R1,2(,R1)           INCREMENT PAST 'B='\n         MVC   OUTBURST,1(R1)      SAVE BURST SPECIFICATION\n         CLI   0(R1),C'Y'          SEE IF BURST=Y\n         BE    CLFB1               YES, BRANCH\n         CLI   0(R1),C'N'          SEE IF BURST=N\n         BNE   BADOPRND            NO, ERROR, NOT Y/N\nCLFB1    B     CLFNSPEC            GET NEXT SPECIFICATION\n         AIF   ('&XJCF' NE 'YES').XJCF3\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE SYSOUT BURST (B) SUBPARAMETER                    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFXS    L     R1,0(,R5)           POINT TO OPERAND\n         LA    R1,3(,R1)           INCREMENT PAST 'XS='\n         MVC   OUTXS,0(R1)         SAVE XS PARAMETER\n         CLI   0(R1),C'N'          SEE IF XS=N\n         BE    CLFXS1              YES, BRANCH\n         CLI   0(R1),C'D'          SEE IF XS=D\n         BE    CLFXS1              YES, BRANCH\n         CLI   0(R1),C'S'          SEE IF XS=S\n         BE    CLFXS1              YES, BRANCH\n         B     BADOPRND            NO, ERROR, NOT Y/N\nCLFXS1   CLI   1(R1),C' '          END OF SPECIFICATIONS\n         BE    CLFXS2              YES, GET OUT\n         CLI   1(R1),C','          END OF SPECIFICATIONS\n         BNE   BADOPRND            NO, ERROR\nCLFXS2   B     CLFNSPEC            GET NEXT SPECIFICATION\n.XJCF3   ANOP\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE OUTPUT LIMIT (LIM) SUBPARAMETER                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFLIM   L     R1,0(R5)            POINT TO OPERAND\n         SLR   R15,R15             SET LENGTH TO ZERO\n         LA    R1,4(R1)            INDEX PAST 'LIM='\n         LR    R14,R1              SAVE START OF OPERAND\nCLFLIM1  CLI   0(R1),C'-'          END OF FIRST OPERAND\n         BE    CLFLIM2             YES, BRANCH\n         CLI   0(R1),C','          END OF ALL OPERANDS\n         BE    CLFLIM2             YES, BRANCH\n         CLI   0(R1),C' '          END OF ALL OPERANDS\n         BE    CLFLIM2             YES, BRANCH\n         CLI   0(R1),C'0'          NUMERIC OPERAND\n         BL    BADOPRND            NO, ERROR\n         CLI   0(R1),C'9'          NUMERIC OPERAND\n         BH    BADOPRND            NO, ERROR\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR LOW LIM\n         LA    R15,1(,R15)         ADD 1 TO OPERAND LENGTH\n         B     CLFLIM1             LOOP UNTIL DONE\nCLFLIM2  LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'10'          SEE IF TOO LONG\n         BH    BADOPRND            ZERO, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,PACKLIM         PACK LOW LIMIT\n         CP    $DOUBLE,=P'2147483647'  SEE IF EXCEEDS 2 GIG\n         BH    BADOPRND            YES, ERROR\n         CVB   R15,$DOUBLE         CONVERT TO BINARY\n         ST    R15,LOWLIM          SAVE LOW OUTPUT LIM\nCLFLIM3  CLI   0(R1),C'-'          SEE IF SECOND NUMBER OF RANGE\n         BNE   CLFLIM6             NO, BRANCH\n         LA    R1,1(,R1)           INCREMENT PAST '-'\n         LR    R14,R1              SAVE START OF OPERAND\n         SLR   R15,R15             RESET LENGTH TO ZERO\n         CLC   0(2,R1),=C'* '      SEE IF MAX SECOND RANGE SPECIFIED\n         BE    CLFLIM6             YES, GET OUT\n         CLC   0(2,R1),=C'*,'      SEE IF MAX SECOND RANGE SPECIFIED\n         BE    CLFLIM6             YES, GET OUT\nCLFLIM4  CLI   0(R1),C','          END OF ALL OPERANDS\n         BE    CLFLIM5             YES, BRANCH\n         CLI   0(R1),C' '          END OF ALL OPERANDS\n         BE    CLFLIM5             YES, BRANCH\n         CLI   0(R1),C'0'          NUMERIC OPERAND\n         BL    BADOPRND            NO, ERROR\n         CLI   0(R1),C'9'          NUMERIC OPERAND\n         BH    BADOPRND            NO, ERROR\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR LOW LIM\n         LA    R15,1(,R15)         ADD 1 TO OPERAND LENGTH\n         B     CLFLIM4             LOOP UNTIL DONE\nCLFLIM5  LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'10'          SEE IF TOO LONG\n         BH    BADOPRND            ZERO, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,PACKLIM         PACK LOW LIMIT\n         CP    $DOUBLE,=P'2147483647'  SEE IF EXCEEDS 2 GIG\n         BH    BADOPRND            YES, ERROR\n         CVB   R15,$DOUBLE         CONVERT TO BINARY\n         ST    R15,HIGHLIM         SAVE HIGH OUTPUT LIM\nCLFLIM6  B     CLFNSPEC            GET NEXT SPECIFICATION\nPACKLIM  PACK  $DOUBLE,0(0,R14)    PACK OUTPUT LIMIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE HOLD SUBPARAMETER                                *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFH     L     R15,0(,R5)          POINT TO OPERAND\n         MVI   OUTHOLD,C'H'        SAVE HELD OUTPUT REQUEST\n         B     CLFNSPEC            GET NEXT SPECIFICATION\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE COMMAND FORMAT (S/L) SUBPARAMETER                *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFORM   L     R15,0(,R5)          POINT TO OPERAND\n         MVC   FORMAT,3(R15)       SAVE COMMAND FORMAT\n         B     CLFNSPEC            GET NEXT SPECIFICATION\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GET CHARACTERISTICS JOE AND PREPARE TO SCAN                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFOK    L     R7,$JOTABLE         GET ADDRESS OF JOT\n         USING JOTDSECT,R7         SET ADDRESSABILITY TO JOT\n         LA    R4,JOTCHRQ-(JOENEXT-JOEDSECT) QUEUE HEAD\n         USING JOEDSECT,R4         SET ADDRESSABILITY TO JOE\n         ST    R4,JOEADDR          SAVE STARTING POINT\n         MVC   MESSAGE(90),INITRESP INITIALIZE RESPONSE BUFFER\n         B     CHARJOES            BYPASS DC\n         AIF   ('&XJCF' EQ 'YES').XJCF4\nINITRESP DS    0CL90\n         DC    CL46'JJJJJJJJ JNNNN RRRRRR Q=X F=FFFF NNNNNNNN'\n         DC    CL46'               C=CCCC T=TTTT O=OOOO B=B HHHH  '\n         AGO   .XJCF4E\n.XJCF4   ANOP\nINITRESP DS    0CL90\n         DC    CL46'JJJJJJJJ JNNNN RRRRRR Q=X F=FFFF XS=X NNNNNNNN'\n         DC    CL46'               C=CCCC T=TTTT O=OOOO B=B HHHH  '\n.XJCF4E  ANOP\n         SPACE 1\nCHARJOES L     R4,JOEADDR          GET PREV CHARACTERISTICS JOE ADDR\n         L     R4,JOENEXT          POINT TO NEXT CHARACTERISTICS JOE\n         N     R4,$ZEROFFF         IS THIS THE END OF THE JOE CHAIN\n         BZ    ENDJOES             YES, EXIT\n         ALR   R4,R7               CALCULATE ACTUAL JOE ADDRESS\n         ST    R4,JOEADDR          SAVE NEW CHARACTERISTICS JOE ADDR\n***********************************************************************\n*        MOVE THE FORM NUMBER TO THE MESSAGE                          *\n***********************************************************************\n         MVC   OFORM,JOEFORM       MOVE FORM TO MESSAGE\n***********************************************************************\n*        MOVE THE FCB  NUMBER TO THE MESSAGE                          *\n***********************************************************************\n         MVC   OFCB,JOEFCB         MOVE FCB  TO MESSAGE\n***********************************************************************\n*        MOVE THE UCS  NUMBER TO THE MESSAGE                          *\n***********************************************************************\n         MVC   OUCS,JOEUCS         MOVE UCS  TO MESSAGE\n***********************************************************************\n*        MOVE THE OVLY NUMBER TO THE MESSAGE                          *\n***********************************************************************\n         MVC   OOVLY,JOEFLASH      MOVE OVLY TO MESSAGE\n***********************************************************************\n*        MOVE THE BURST INDICATOR TO THE MESSAGE                      *\n***********************************************************************\n         MVI   OBURST,C'N'         ASSUME BURST=NO\n         TM    JOECFLAG,$JOEBRST   IS THIS BURST=YES\n         BZ    NOBURST             NO, BRANCH\n         MVI   OBURST,C'Y'         SET BURST=YES\nNOBURST  DS    0H\n         AIF   ('&XJCF' NE 'YES').XJCF5\n***********************************************************************\n*        SET THE XJCF XS VALUE IN THE MESSAGE                         *\n***********************************************************************\n         MVI   OXS,C'N'            ASSUME SHIFT=NONE\n         TM    JOEFLAGC,JOEFCSFT   SEE IF SHIFT SPECIFIED\n         BZ    ENDXS               NO, GET OUT\n         MVI   OXS,C'D'            ASSUME SHIFT=DUPLEX\n         TM    JOEFLAGC,JOEFCDPX   SEE IF DUPLEXED\n         BO    ENDXS               YES, GET OUT\n         MVI   OXS,C'S'            SET TO SHIFT=SIMPLEX\nENDXS    DS    0H\n.XJCF5   ANOP\n***********************************************************************\n*        CHECK THE SYSOUT FORM FOR OUR VALUE                          *\n***********************************************************************\nCKFORM   CLI   OUTFORM,C'*'        DO WE WANT ALL FORMS?\n         BE    CKFCB               YES, BRANCH\n         CLC   OFORM,OUTFORM       SEE IF CORRECT FORM\n         BNE   CHARJOES            NO, BYPASS THESE JOES\n         SPACE 1\n***********************************************************************\n*        CHECK THE SYSOUT FCB FOR OUR VALUE                           *\n***********************************************************************\nCKFCB    CLI   OUTFCB,C'*'         DO WE WANT ALL FCBS?\n         BE    CKUCS               YES, BRANCH\n         CLC   OFCB,OUTFCB         SEE IF CORRECT FCB\n         BNE   CHARJOES            NO, BYPASS THESE JOES\n         SPACE 1\n***********************************************************************\n*        CHECK THE SYSOUT UCS FOR OUR VALUE                           *\n***********************************************************************\nCKUCS    CLI   OUTUCS,C'*'         DO WE WANT ALL UCSS?\n         BE    CKOVLY              YES, BRANCH\n         CLC   OUCS,OUTUCS         SEE IF CORRECT UCS\n         BNE   CHARJOES            NO, BYPASS THESE JOES\n         SPACE 1\n***********************************************************************\n*        CHECK THE SYSOUT OVLY FOR OUR VALUE                          *\n***********************************************************************\nCKOVLY   CLI   OUTOVLY,C'*'        DO WE WANT ALL OVERLAYS?\n         BE    CKBURST             YES, BRANCH\n         CLC   OOVLY,OUTOVLY       SEE IF CORRECT OVLY\n         BNE   CHARJOES            NO, BYPASS THESE JOES\n         SPACE 1\n***********************************************************************\n*        CHECK THE SYSOUT BURST TYPE FOR OUR VALUE                    *\n***********************************************************************\nCKBURST  CLI   OUTBURST,C'*'       DO WE WANT ALL BURST TYPES?\n         BE    CKEND               YES, BRANCH\n         CLC   OBURST,OUTBURST     SEE IF CORRECT BURST TYPE\n         BNE   CHARJOES            NO, BYPASS THESE JOES\nCKEND    DS    0H\n         AIF   ('&XJCF' NE 'YES').XJCF6\n         SPACE 1\n***********************************************************************\n*        CHECK THE SYSOUT XJCF SHIFT TYPE FOR OUR VALUE               *\n***********************************************************************\nCKXS     CLI   OUTXS,C'*'          DO WE WANT ALL XS VALUES?\n         BE    SCAN                YES, BRANCH\n         CLC   OXS,OUTXS           SEE IF CORRECT XJCF SHIFT TYPE\n         BNE   CHARJOES            NO, BYPASS THESE JOES\n         EJECT\n.XJCF6   ANOP\n***********************************************************************\n*                                                                     *\n*        SCAN WORK JOES AND JQES FOR MATCH ON OUR CRITERIA            *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSCAN     LA    R4,JOEWKPTR         GET START OF QUEUE\n         SL    R4,=A(JOECHNXT-JOEDSECT) BACKUP FOR START OF LOOP\nWORKJOES L     R4,JOECHNXT         GET OFFSET OF NEXT WORK JOE\n         N     R4,$ZEROFFF         IS THIS THE END OF THE WORK JOES\n         BZ    CHARJOES            YES, BRANCH\n         ALR   R4,R7               COMPUTE WORK JOE ADDRESS\n         L     R3,JOEJQE           GET JQE OFFSET\n         N     R3,$ZEROFFF         CLEAR THE HI-ORDER BYTE\n         AL    R3,$JOBQPTR         CONVERT THE OFFSET TO ADDRESS\n         USING JQE,R3              SET ADDRESSABILITY TO JQE\n***********************************************************************\n*        CHECK THE DESTINATION FOR OUR VALUES                         *\n***********************************************************************\n         CLC   JOEROUT,LOWROUT     SEE IF LT OUR LOWER ROUTE CODE\n         BL    WORKJOES            NO, BRANCH\n         CLC   JOEROUT,HIGHROUT    SEE IF GT OUR HIGHER ROUTE CODE\n         BH    WORKJOES            YES, BRANCH\n***********************************************************************\n*        CHECK THE SYSOUT CLASS FOR OUR VALUE                         *\n***********************************************************************\nCKCLASS  CLI   OUTCLASS,C'*'       DO WE WANT ALL SYSOUT CLASSES?\n         BE    GOODCLAS            YES, BRANCH\n         SLR   R1,R1               CLEAR REG FOR IC\n         IC    R1,NUMCLASS         LOAD NUMBER OF OUTPUT CLASSES\n         LA    R15,OUTCLASS        LOAD ADDRESS OF CLASS TABLE\nCKCLASS1 CLC   JOECURCL,0(R15)     IS THIS THE CORRECT SYSOUT CLASS\n         BE    GOODCLAS            YES, BRANCH\n         LA    R15,1(,R15)         INCREMENT TO NEXT CLASS ENTRY\n         BCT   R1,CKCLASS1         LOOP\n         B     WORKJOES            CLASS MISMATCH, BYPASS THIS JOE\n***********************************************************************\n*        CHECK THE JOB NUMBER FOR OUR VALUES                          *\n***********************************************************************\nGOODCLAS CLI   JTYPE,C'*'          WANT ALL JOBS?\n         BE    GOODJOB             YES, BRANCH\nCKBATCH  CLI   JTYPE,C'J'          WANT BATCH JOBS?\n         BNE   CKSTC               NO, BRANCH\n         TM    JQEFLAG3,QUEJOB     IS THIS A BATCH JOB\n         BZ    GOODTYPE            YES, BRANCH\n         B     WORKJOES            NO, IGNORE THIS JOE\nCKSTC    CLI   JTYPE,C'S'          WANT STARTED TASKS?\n         BNE   CKTSU               NO, BRANCH\n         TM    JQEFLAG3,QUESTC     IS THIS A STARTED TASK\n         BO    GOODTYPE            YES, BRANCH\n         B     WORKJOES            NO, IGNORE THIS JOE\nCKTSU    CLI   JTYPE,C'T'          WANT TSO USERS?\n         BNE   WORKJOES            NO, UNKNOWN REQUEST, GET OUT\n         TM    JQEFLAG3,QUETSU     IS THIS A TSO USER\n         BNO   WORKJOES            NO, IGNORE THIS JOE\nGOODTYPE CLC   JQEJOBNO,LOWJOB     SEE IF LT OUR LOWER JOB NUMBER\n         BL    WORKJOES            NO, IGNORE THIS JOE\n         CLC   JQEJOBNO,HIGHJOB    SEE IF GT OUR HIGHER JOB NUMBER\n         BH    WORKJOES            YES, IGNORE THIS JOE\n***********************************************************************\n*        CHECK THE OUTPUT LINE LIMIT SPECIFICATION                    *\n***********************************************************************\nGOODJOB  CLC   JOERECCT,LOWLIM     CHECK ON LOW LIMIT\n         BL    WORKJOES            LESS THAN OUR LOW, IGNORE THIS JOE\n         CLC   JOERECCT,HIGHLIM    CHECK ON HIGH LIMIT\n         BH    WORKJOES            GREATER THAN OUR HIGH, IGNORE IT\n***********************************************************************\n*        CHECK THE HELD OUTPUT REQUESTED INDICATOR                    *\n***********************************************************************\nGOODLIM  CLI   OUTHOLD,C'*'        DO WE WANT ALL OUTPUT?\n         BE    GOODJOE             YES, BRANCH\n         TM    JQEFLAGS,QUEHOLDA+QUEHOLD1 IS THIS JOB HELD\n         BZ    WORKJOES            NO, IGNORE THIS JOE\n***********************************************************************\n*        MOVE THE JOBNAME TO THE MESSAGE                              *\n***********************************************************************\nGOODJOE  MVC   OJOBNM,JQEJNAME     MOVE JOBNAME TO MESSAGE\n***********************************************************************\n*        MOVE THE JOB NUMBER TO THE MESSAGE                           *\n***********************************************************************\n         LH    R0,JQEJOBNO         LOAD JOB NUMBER\n         CVD   R0,$DOUBLE          CONVERT JOB NUMBER TO PACKED\n         MVC   WRKA(6),=X'402020202120' SET EDIT MASK\n         ED    WRKA(6),$DOUBLE+5   UNPACK JOB NUMBER TO WORK AREA\n         MVC   OJOBNO+1(4),WRKA+2  MOVE JOB NUMBER TO MESSAGE\n         MVI   OJOBNO,C'J'         ASSUME BATCH JOB\n         TM    JQEFLAG3,QUEJOB     IS THIS A BATCH JOB\n         BZ    GOODJNO             YES, BRANCH\n         MVI   OJOBNO,C'S'         ASSUME STARTED TASK\n         TM    JQEFLAG3,QUESTC     IS THIS A STARTED TASK\n         BO    GOODJNO             YES, BRANCH\n         MVI   OJOBNO,C'T'         ASSUME TSO LOGON\n         TM    JQEFLAG3,QUETSU     IS THIS A TSO LOGON\n         BO    GOODJNO             YES, BRANCH\n         MVI   OJOBNO,C'X'         ASSUME TRANSMITTER\nGOODJNO  DS    0H\n***********************************************************************\n*        SET THE BUSY INDICATOR IN THE MESSAGE                        *\n***********************************************************************\n         MVI   OBUSYIND,C' '       BLANK THE BUSY INDICATOR\n         TM    JOEFLAG,$JOEBUSY    SEE IF BEING PRINTED/PUNCHED\n         BZ    NOTBUSY             NO, BRANCH\n         MVI   OBUSYIND,C'*'       SET THE BUSY INDICATOR\nNOTBUSY  DS    0H\n***********************************************************************\n*        MOVE THE SYSOUT CLASS TO THE MESSAGE                         *\n***********************************************************************\n         MVC   OCLASS,JOECURCL     MOVE SYSOUT CLASS TO MESSAGE\n***********************************************************************\n*        SET THE HOLD INDICATOR IN THE MESSAGE                        *\n***********************************************************************\n         MVC   OHOLDIND,=C'    '   RESET HOLD INDICATOR\n         TM    JQEFLAGS,QUEHOLDA+QUEHOLD1 IS THIS JOB HELD\n         BZ    HOLDSET             NO, BRANCH\n         MVC   OHOLDIND,=C'HOLD'   SET HOLD INDICATOR\n         B     NSELSET             NO, BRANCH\nHOLDSET  DS    0H\n***********************************************************************\n*        SET THE NON-SELECTABLE INDICATOR IN THE MESSAGE              *\n***********************************************************************\n         TM    JOEFLAG2,$JOESLEC   IS THIS JOE SELECTABLE\n         BZ    NSELSET             YES, BRANCH\n         MVC   OHOLDIND,=C'NSEL'   SET NON-SELECTABLE INDICATOR\nNSELSET  DS    0H\n***********************************************************************\n*        SET THE DESTINATION VALUE IN THE MESSAGE                     *\n*                                                                     *\n*        ONLY ROOM FOR A SIX DIGIT DESTINATION NAME CONSISTING OF     *\n*        NODE NUMBER AND REMOTE NUMBER HAS BEEN LEFT IN THE OUTPUT    *\n*        AREA.  IF THE LENGTH OF THE NODE NUMBER PLUS THE REMOTE      *\n*        NUMBER EXCEEDS 4 DIGITS, THE DESTINATION NAME WILL           *\n*        OVERRUN THE NEXT FIELD.  THE MAXIMUM LENGTH DESTINATION      *\n*        WHICH CAN BE CREATED IS 9 DIGITS.  WE DON'T HAVE THE         *\n*        PROBLEM, BUT I KNOW SOME OF YOU DO.                          *\n*                                                                     *\n***********************************************************************\nCNVDEST  LA    R1,COMEWORK         POINT TO OUTPUT AREA\n         MVC   0(12,R1),=CL12' R'  ASSUME ' RXXXX      '\n         SLR   R0,R0               CLEAR REG FOR ICM\n         CLC   $OWNNODE,JOEROUT    IS THIS OUR NODE\n         BE    CNVDEST1            YES, NO NODE NUMBERS\n         MVI   1(R1),C'N'          ASSUME NODE SPECIFICATION\n         ICM   R0,B'0011',JOEROUT  LOAD NODE NUMBER\n         BNZ   CNVDEST2            NODE NUMBER NOT ZERO, CONVERT IT\n         MVI   1(R1),C'U'          ELSE MUST BE SPECIAL UNIT\nCNVDEST1 ICM   R0,B'0011',JOEROUT+2 LOAD REMOTE NUMBER\n         BNZ   CNVDEST2            REMOTE NUMBER NOT ZERO, CONVERT IT\n         MVC   1(5,R1),=C'LOCAL'   ZERO, SET TO LOCAL\n         B     CNVDEST6            AND GET OUT\n         SPACE 1\nCNVDEST2 CVD   R0,$DOUBLE          CONVERT NODE/RMT NUMBER TO PACKED\n         UNPK  2(5,R1),$DOUBLE     UNPACK NODE/RMT NUMBER\n         OI    6(R1),X'F0'         MAKE NODE/RMT NUMBER PRINTABLE\nCNVDEST3 CLI   2(R1),C'0'          IS HIGH BYTE ZERO\n         BNE   CNVDEST4            NO, GO SEE IF DONE\n         MVC   2(5,R1),3(R1)       SHIFT OFF HIGH ORDER ZERO BYTE\n         B     CNVDEST3            LOOP UNTIL LEADING ZEROS GONE\nCNVDEST4 CLI   1(R1),C'N'          SEE IF NODE SPECIFIED\n         BNE   CNVDEST6            NO, DONE\n         ICM   R0,B'0011',JOEROUT+2 LOAD REMOTE NUMBER\n         BZ    CNVDEST6            ZERO, EXIT\nCNVDEST5 LA    R1,1(,R1)           INCREMENT TO NEXT CHARACTER\n         CLI   1(R1),C' '          END OF NODE NUMBER?\n         BNE   CNVDEST5            NO, CONTINUE\n         MVI   1(R1),C'R'          SETUP FOR REMOTE NUMBER\n         B     CNVDEST2            GO CONVERT REMOTE NUMBER\n         SPACE 1\nCNVDEST6 MVC   ODEST,COMEWORK      MOVE CONVERTED DEST TO MESSAGE\n         EJECT\n***********************************************************************\n*        SET THE OUTPUT LINE COUNT IN THE MESSAGE                     *\n***********************************************************************\n         L     R1,JOERECCT         LOAD THE SYSOUT RECORD COUNT\n         CVD   R1,$DOUBLE          CONVERT TO PACKED\n         MVC   WRKA,=X'40202020202020202120' SET EDIT MASK\n         ED    WRKA,$DOUBLE+3      EDIT SYSOUT RECORD COUNT TO AREA\n         MVC   OQTY,WRKA+2         MOVE SYSOUT RECORD COUNT TO MESSAGE\n***********************************************************************\n*                                                                     *\n*        WRITE THE MESSAGE FOR THIS JOE                               *\n*                                                                     *\n***********************************************************************\n         LA    R0,46               WRITE FIRST MESSAGE\n         LA    R1,MSG1             LOAD ADDRESS OF MESSAGE\n         $CWTO L=(R0),MSG=(R1),MSGID=900  DISPLAY MESSAGE\n         CLI   FORMAT,C'S'         IS THIS THE SHORT FORM\n         BE    SETFND              YES, BRANCH\n         LA    R0,46               SET TO LONG FORM LENGTH\n         LA    R1,MSG2             LOAD ADDRESS OF MESSAGE\n         $CWTO L=(R0),MSG=(R1),MSGID=900  DISPLAY MESSAGE\nSETFND   OI    MISCSW,MATCH        TURN ON MATCH FOUND SWITCH\n         B     WORKJOES            GO GET ANOTHER WORK JOE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        END OF ALL JOES.  IF NO MESSAGES WERE ISSUED, ISSUE          *\n*        A MESSAGE THAT NO OUTPUT WAS QUEUED.                         *\n*                                                                     *\n***********************************************************************\nENDJOES  TM    MISCSW,MATCH        WAS A MATCH FOUND\n         BZ    NOUTPUT             NO, BRANCH\n         B     EXIT8               GET OUT\nNOUTPUT  $CWTO MSG='NO OUTPUT QUEUED',MSGID=919  ISSUE MESSAGE\n         B     EXIT8               GET OUT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        INVALID $LF OPERAND                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nBADOPRND L     R1,0(0,R5)          POINT TO INVALID OPERAND\n         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG\n         MVC   COMMAND+9(16),=C' INVALID OPERAND' SET ERROR MSG\n         LA    R0,25               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=950    WRITE ERROR MESSAGE\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\nEXIT0    DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nEXIT8    DS    0H\n         $FREEBUF (R8)             FREE THE WORK AREA\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JESEXIT1": {"ttr": 4104, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 EXIT 1 PRINT/PUNCH SEPARATOR EXIT'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 1.3.4  OR SP 1.3.6                      *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED TO REPLACE THE IBM        *\n*        STANDARD PRINT AND PUNCH SEPARATOR ROUTINES.  THE PUNCH      *\n*        SEPARATOR LACE CARD AND BLANK CARD IS PRODUCED EXACTLY       *\n*        AS IBM PRODUCED THEM.  THE PRINT SEPARATOR PAGE IS THE       *\n*        SAME AS THAT PRODUCED BY IBM EXCEPT THAT INSTEAD OF TWO      *\n*        LINES OF BLOCK LETTERS, THREE ARE PRODUCED.  THE SECOND      *\n*        LINE OF THE BLOCK LETTERS IS THE FIRST EIGHT (8) BYTES       *\n*        OF THE PROGRAMMER NAME FIELD.  NOTE THAT ONLY AS MANY        *\n*        LINES OF BLOCK LETTERS ARE PRODUCED AS THERE IS ROOM         *\n*        FOR AS DEFINED BY THE NUMBER OF LINES ON THE LOCAL OR        *\n*        REMOTE SPECIFICATIONS FOR &PRIDCT OR &TPIDCT.                *\n*                                                                     *\n*        STARTED TASKS DO NOT PROVIDE A PROGRAMMER NAME FIELD TO      *\n*        BE USED BY THE SEPARATOR ROUTINE.  TSO LOGONS ALSO DO        *\n*        NOT NORMALLY PROVIDE THIS INFORMATION, HOWEVER ACF2          *\n*        BUILDS A NORMAL JOB CARD WITH A PROGRAMMER NAME.  THIS       *\n*        EXIT CAN OPTIONALLY PROVIDE PGMR NAME AND BIN NUMBER         *\n*        FOR TSO AND STARTED TASKS.  THIS EXIT CAN ACCESS A           *\n*        TABLE PREVIOUSLY BUILT IN CSA BY ANOTHER JOB WHICH           *\n*        PROVIDES A THE BIN NUMBER AND PROGRAMMER NAME FOR            *\n*        STARTED TASKS AND TSO USERS.  THIS TABLE WAS SORTED BY       *\n*        JOBNAME THUS PROVIDING THE ABILITY TO PERFORM A BINARY       *\n*        SEARCH WHEN ATTEMPTING TO FIND A MATCH ON JOBNAME.  THE      *\n*        CONSTANT 'TECH SUP' WILL BE SUPPLIED FOR ANY STARTED         *\n*        TASKS NOT FOUND IN THE TABLE AND FOR TSO LOGONS NOT          *\n*        SUPPLYING THE PROGRAMMER NAME, THE CONSTANT 'TSO USER'       *\n*        WILL BE USED.                                                *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST COMPUTER SERVICES                      *\n*                        420 BRUSHY MOUNTAIN ROAD                     *\n*                        WILKESBORO, N.C. 28697                       *\n*                        (919) 651-5414                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                          KOMSTAR                                    *\n*                                                                     *\n*        SUPPORT EXISTS IN THIS EXIT FOR ONLINE KOMSTAR (KODAK).      *\n*        THE DEVICE NAMES OF PRINTER7 IS RESERVED FOR THIS            *\n*        DEVICE.  IF THE DEVICE IS THIS UNIT, STANDARD HEADER         *\n*        AND TRAILER PAGES ARE BYPASSED, AND, BASED UPON THE          *\n*        SYSOUT CLASS OF THE DATA BEING PROCESSED, DIFFERENT          *\n*        ACTION MAY BE TAKEN IN THIS EXIT.                            *\n*                                                                     *\n*        SYSOUT CLASSES               ACTION                          *\n*                                                                     *\n*        P,Q,R,L     NO ACTION IS TAKEN BY THIS EXIT FOR ANY          *\n*                    ENTRY FOR THESE CLASSES.  THESE CLASSES ARE      *\n*                    RESERVED FOR OUTPUT FROM PME OR STARLINK1        *\n*                    WHICH REQUIRES NO SETUP FOR THE KOMSTAR        . *\n*                    RUNNING IN NATIVE MODE                           *\n*                                                                     *\n*        C,D,E,M     NATIVE COMMAND ARE ISSUED AT START OF PRINT      *\n*                    TO SET MICROFORM SETUP REQUIREMENTS FOR THE      *\n*                    KOMSTAR IN EMULATION MODE.  NOTE THAT THE        *\n*                    TYPE 1 CARD BEING ISSUED HERE ELIMINATES         *\n*                    THE ABILITY TO MODIFY THESE VALUES BY            *\n*                    HAVING THE OPERATOR SET THEM BY READING A        *\n*                    '1' CARD INTO THE OPERATOR PANEL ON THE          *\n*                    KOMSTAR PRIOR TO STARTING THE JOB FROM           *\n*                    JES2.                                            *\n*                                                                     *\n*        OTHERS      NATIVE COMMANDS TO SET HEADINGS FOR JOB          *\n*                    NAME, PROGRAMMER NAME, ROOM NUMBER, AND          *\n*                    DATE ARE ISSUED AT 'START' OR 'CONT'             *\n*                    SEPARATOR ENTRY AND A NATIVE COMMAND TO          *\n*                    EJECT THE FICHE AT 'END' SEPARATOR ENTRY.        *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                    DATAGRAPHIX ARIS II                              *\n*                                                                     *\n*        SUPPORT EXISTS IN THIS EXIT FOR ONLINE ARIS (DATAGRAPHIX).   *\n*        THE DEVICE NAMES PRINTR6, PRINTR8, PRINTR9, AND              *\n*        PRINTR10 ARE RESERVED FOR THESE ONLINE MICROFICHE            *\n*        UNITS.  IF THE DEVICE IS ONE OF THESE UNITS, STANDARD        *\n*        HEADER AND TRAILER PAGES ARE BYPASSED, AND, BASED UPON       *\n*        THE INFORMATION IN THE PROGRAMMER NAME FIELD, THE FICHE      *\n*        UNIT WILL BE GIVEN THE \"JOB\" PROCESSING NAME TO USE.         *\n*                                                                     *\n*        THE \"JOB\" PROCESSING ID WILL BE INDICATED BY THE EXTERNAL    *\n*        WRITER NAME FOR THE OUTPUT GROUP.  IF NOT SPECIFIED FOR      *\n*        THE GROUP, THE PROGRAMMER NAME FIELD WILL BE SCANNED FOR     *\n*        THE CHARACTERS \"K=XXXXXX\".  IF THE \"K=\" OPERAND IS NOT       *\n*        PRESENT, A DEFAULT SET OF FICHE HEADINGS WLL BE SET          *\n*        BASED UPON THE JES2 INFORMATION AVAILABLE.                   *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*                         IBM 6670                                    *\n*                                                                     *\n*        SUPPORT EXISTS IN THIS EXIT TO SUPPLY A SEPARATOR PAGE       *\n*        FOR THE IBM 6670 REMOTE PRINTER WRITING AN INFORMATION       *\n*        LINE AND THEN FORCING A PAGE EJECT SO THE REPORT CAN         *\n*        START ON THE TOP OF THE NEXT PAGE AS FOLLOWS:                *\n*                                                                     *\n*        'JOBNAME (JOBID) ROOM PGMR-NAME TIME DATE             '      *\n*        'EJECT COMMAND                                        '      *\n*                                                                     *\n*        THE DETERMINATION THAT THE DEVICE IS A 6670 IS MADE          *\n*        BY CHECKING THE DCT DEVICE NAME FOR THE PROPER REMOTE        *\n*        DEVICE.  LIKE ALL PROCESSING IN THIS EXIT, THE FACILITY      *\n*        MAY BE ENABLED OR DISABLED BY TURNING ON SEP=Y/N ON          *\n*        THE PRINTER.                                                 *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*                XJCF SUPPORT FOR THE XEROX 9700                      *\n*                                                                     *\n*        SUPPORT EXISTS IN THIS EXIT TO UTILIZE THE XJCF PRODUCT      *\n*        FROM XENOS COMPUTER SYSTEMS TO SUPPORT THE XEROX 9700        *\n*        PAGE PRINTER.  THE SUPPORT IS GENERATED BY SETTING THE       *\n*        LOCAL ASSEMBLY VARIABLE &XJCF TO 'YES'.                      *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*               A S S E M B L Y     O P T I O N S                     *\n*                                                                     *\n*        SEVERAL ASSEMBLY OPTIONS ARE PROVIDED FOR EASE IN            *\n*        PROVIDING THE DESIRED NUMBER OF SEPARATORS ON THE            *\n*        START/CONT OR END SEPARATOR FOR BOTH LOCAL AND REMOTE        *\n*        DEVICES.                                                     *\n*                                                                     *\n*        THE DEFAULTS SET ARE AS FOLLOWS:                             *\n*                                                                     *\n*        NPRSEPSL (2) - NUMBER OF START/CONT PAGES FOR LOCAL PRTRS    *\n*        NPRSEPEL (1) - NUMBER OF END        PAGES FOR LOCAL PRTRS    *\n*        NPRSEPSR (2) - NUMBER OF START/CONT PAGES FOR REMOTE PRTRS   *\n*        NPRSEPER (1) - NUMBER OF END        PAGES FOR REMOTE PRTRS   *\n*        IPLINES  (4) - VALUE TO ADD TO $PRIDCT FOR IMPACT PRINTERS   *\n*                       TO ALLOW PRINTING ON THE PERFORATION.         *\n*        BLOCK        - CONDITIONAL VARIABLE TO DETERMINE WHICH       *\n*                       INFORMATION TO PLACE ON THE THIRD BLOCK       *\n*                       LETTER LINE ON THE SEPARATOR PAGE.  THE       *\n*                       VALUES SHOULD BE NORMAL/BIN.                  *\n*        FILL         - CONDITIONAL VARIABLE TO GENERATE CODE TO      *\n*                       PROVIDE PROGRAMMER NAME AND BIN NUMBER FOR    *\n*                       TSO AND STARTED TASK OUTPUT.  THE VALUES      *\n*                       SHOULD BE YES/NO.                             *\n*        XJCF         - GENERATE XJCF SUPPORT FOR THE XEROX 9700      *\n*                       PRINTER.  THE VALUES SHOULD BE YES/NO.        *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J E S E X I T 1          *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $DCT         SYS1.HASPSRC                               *\n*        04)  $ENTRY       SYS1.HASPSRC                               *\n*        05)  $FREEBUF     SYS1.HASPSRC                               *\n*        06)  $GETBUF      SYS1.HASPSRC                               *\n*        07)  $HASPEQU     SYS1.HASPSRC                               *\n*        08)  $HASPGBL     SYS1.HASPSRC                               *\n*        09)  $HCT         SYS1.HASPSRC                               *\n*        10)  $JCT         SYS1.HASPSRC                               *\n*        11)  $JOE         SYS1.HASPSRC                               *\n*        12)  $JQE         SYS1.HASPSRC                               *\n*        13)  $MIT         SYS1.HASPSRC                               *\n*        14)  $MODEND      SYS1.HASPSRC                               *\n*        15)  $MODULE      SYS1.HASPSRC                               *\n*        16)  $PBLOCK      SYS1.HASPSRC                               *\n*        17)  $PCE         SYS1.HASPSRC                               *\n*        18)  $PDDB        SYS1.HASPSRC                               *\n*        19)  $PPPWORK     SYS1.HASPSRC                               *\n*        20)  $PRPUT       SYS1.HASPSRC                               *\n*        21)  $RDT         SYS1.HASPSRC                               *\n*        22)  $RETURN      SYS1.HASPSRC                               *\n*        23)  $SAVE        SYS1.HASPSRC                               *\n*        24)  $SEPPDIR     SYS1.HASPSRC                               *\n*        25)  $SCAT        SYS1.HASPSRC                               *\n*        26)  $SVT         SYS1.HASPSRC                               *\n*        27)  $SYSPARM     SYS1.HASPSRC                               *\n*        28)  $XECB        SYS1.HASPSRC                               *\n*        29)  CVT          SYS1.AMODGEN                               *\n*        30)  IFGRPL       SYS1.MACLIB                                *\n*        31)  TIME         SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       4K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJESEXIT1 $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 EXIT1 PRINT/PUNCH SEPARATOR EXIT',          X\n               CVT,                GENERATE MVS CVT DSECT              X\n               RPL,                GENERATE MVS RPL DSECT              X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $RDT,               GENERATE HASP RDT DSECT             X\n               $SVT,               GENERATE HASP SSVT DSECT            X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PDDB,              GENERATE HASP PDDB DSECT            X\n               $SCAT,              GENERATE HASP SCAT DSECT            X\n               $XECB,              GENERATE HASP XECB DSECT            X\n               $PPPWORK            GENERATE HASP PPPWORK DSECT\n         TITLE 'JES2 EXIT 1 PRINT/PUNCH SEPARATOR EXIT'\n***********************************************************************\n*                                                                     *\n*        WORK AREA USED BY THIS JES2 EXIT                             *\n*                                                                     *\n***********************************************************************\nHDRDSECT DSECT                     HASP HEADER DSECT\n         DS    CL104               *****  RESERVED BY JES2 1.3.6 *****\nHDR      DS    0CL133\nHDRLEN   DS    AL1                 LENGTH OF PRINT LINE\nHDRFRAME DS    XL1                 PP1 FRAME CHARACTERS\nHDRCLASS DS    XL1                 PP2 SYSOUT CLASS\n         DS    X                   PP3 BLANK\nHDRFORM  DS    XL5                 PP4-8  FORM TYPE START/CONT/END\n         DS    X                   PP9  BLANK\nHDRNUM   DS    XL8                 PP10-17 JOB NUMBER\n         DS    X                   PP18 BLANK\nHDRNAME  DS    XL8                 PP19-26 JOB NAME\n         DS    X                   PP27 BLANK\nHDRJNAME DS    XL8                 PP28-35 JOE NAME\n         DS    X                   PP36 BLANK\nHDRJID1  DS    XL3                 PP37-39 JOE ID 1\n         DS    X                   PP40 BLANK\nHDRJID2  DS    XL3                 PP41-43 JOE ID 2\n         DS    X                   PP44 BLANK\nHDRJROUT DS    XL8                 PP45-52 JOE ROUTE\n         DS    X                   PP53 BLANK\nHDRPNAME DS    XL20                PP54-73 PROGRAMMER NAME\n         DS    X                   PP74 BLANK\nHDRRKEY  DS    XL4                 PP75-78 'ROOM'\n         DS    X                   PP79 BLANK\nHDRROOM  DS    XL4                 PP80-83 ROOM NUMBER\nHDRPTTN  DS    0XL10\n         DS    X                   PP84 BLANK USED AS FILL CHARACTER\n         DS    X                   PP85 BLANKED BY TIME EDIT PROCESS\n         DS    XL8                 PP86-93 HH.MM.SS\n         DS    X                   PP94 BLANK\nHDRAM    DS    XL2                 PP95-96 AM/PM\n         DS    X                   PP97 BLANK\nHDRDATE  DS    XL9                 PP98-106 DD MMM YY\n         DS    X                   PP107 BLANK\nHDRDNAME DS    XL8                 PP108-115 DEVICE NAME\n         DS    X                   PP116 BLANK\nHDRSYS   DS    XL4                 PP117-120 SYSTEM NAME\n         DS    X                   PP121 BLANK\nHDRFORMX DS    XL5                 PP122-126 FORM\n         DS    X                   PP127 BLANK\nHDRCLASX DS    X                   PP128  JOE CLASS\nHDRFRAMX DS    XL4                 PP129-132 FRAME CHARACTERS\nHDRLENTH EQU   *-HDR               LEN FOR CLEARING HEADER\n         ORG   HDR\nR6670HDR DS    0H                  DETAIL HEADER LINE FOR 6670\n         DS    X\n         DS    CL4\nH66JOBNM DS    CL8                 JOBNAME\n         DS    CL2\nH66JOBID DS    CL8                 JOBID\n         DS    CL2\nH66ROOM  DS    CL4                 ROOM NUMBER\n         DS    CL1\nH66PGMR  DS    CL20                PROGRAMMER NAME\n         DS    CL1\nH66DATE  DS    CL9                 DATE\n         DS    CL1\nH66TIME  DS    CL10                TIME\n         DS    CL1\nH66AM    DS    CL2                 AM/PM\n         ORG\nEXITWRK1 DS    D                   EXIT WORK AREA 1\nEXITWRK2 DS    D                   EXIT WORK AREA 2\nEXITWRK3 DS    D                   EXIT WORK AREA 3\nEXITWRK4 DS    F                   EXIT WORK AREA 4\nSAVETBL  DS    12F                 AREA FOR COPY OF DATE TABLE\nFEB      EQU   SAVETBL+4,4         DATE TABLE ENTRY FOR FEBRUARY\nJESEXIT1 CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         PRINT OFF\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ASSEMBLY VARIABLES                                           *\n*                                                                     *\n***********************************************************************\n         LCLC  &BLOCK\n         LCLC  &FILL\n         LCLC  &XJCF\nNPRSEPSL EQU   2                   NBR OF LOCAL PRTR START SEPARATORS\nNPRSEPEL EQU   1                   NBR OF LOCAL PRTR END   SEPARATORS\nNPRSEPSR EQU   2                   NBR OF RMT   PRTR START SEPARATORS\nNPRSEPER EQU   1                   NBR OF RMT   PRTR END   SEPARATORS\nIPLINES  EQU   5                   EXTRA SEP LINES ON LOCAL IMPACT PTR\n&BLOCK   SETC  'BIN'               SET THIRD BLOCK LINE TO BIN NUMBER\n&FILL    SETC  'YES'               FILL IN PGMR NAME AND BIN NUMBERS\n&XJCF    SETC  'YES'               GENERATE XJCF/XEROX 9700 SUPPORT\n         AIF   ('&VERSION' NE 'SP 1.3.6' AND                           X\n               '&VERSION' NE 'SP 2.1.5').VEREND\n         PRINT ON\n***********************************************************************\n*                                                                     *\n*        EQUATED VARIABLES FOR SP 1.3.6 OR SP 2.1.5                   *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nDCTDSECT EQU   DCT\nJCTDSECT EQU   JCT\nJOEDSECT EQU   JOE\nPCEDSECT EQU   PCE\nRDTDSECT EQU   RDT\nPPFLAG   EQU   PPPFLAG1,1\nPPKEY    EQU   PPPKEY,6\nPRLINECT EQU   PPPLNECT,4\nPDEVTYPE EQU   PPPDEVTP,4\nPWKJOE   EQU   PPPWKJOE,4\nPCHJOE   EQU   PPPCHJOE,4\nPCEJMTTR EQU   PPPLEBTR,4\nPCEEJRCB EQU   PPPEBRCB,4\n$SSVT    EQU   $SVT,4\n$SVRDT   EQU   SVTRDT,4\n         SPACE 3\n         USING JCT,R10             SET ADDRESSABILITY TO JCT\n.VEREND  ANOP\n         PRINT ON\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nEXIT1    $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         LR    R2,R0               SAVE INPUT PARAMETER\n         LR    R3,R1               SAVE INPUT DCT ADDRESS\n         USING DCTDSECT,R3         SET ADDRESSABILITY TO DCT\n         $GETBUF TYPE=HASP,FIX=YES,WAIT=YES GET A WORK BUFFER\n         LR    R4,R1               SAVE ADDRESS OF BUFFER\n         $GETBUF TYPE=HASP,FIX=YES,WAIT=YES GET A WORK BUFFER\n         LR    R8,R1               SAVE ADDRESS OF BUFFER\n         USING HDRDSECT,R8         SET ADDRESSABILITY TO HEADER LINE\n         TM    DCTPPSW,DCTPPSWS    SEE IF SEPARATORS REQUESTED\n         BO    EXIT                NO, GET OUT\n         EJECT\n         AIF   ('&FILL' NE 'YES').FILL1\n***********************************************************************\n*                                                                     *\n*        SET PGMR NAME AND BIN NUMBER FOR STARTED TASKS AND TSO       *\n*        LOGONS                                                       *\n*                                                                     *\n*        NOTE:                                                        *\n*                                                                     *\n*        THE INFORMATION TO SUPPLY THE PGMR NAME AND BIN NUMBER       *\n*        WAS LOADED INTO A TABLE ANCHORED OFF OF THE CVT.  THE        *\n*        TABLE WAS LOADED BY A BATCH JOB WHICH BUILT THE TABLE        *\n*        IN CSA AND COULD RELOAD THE TABLE AS REQUIRED.  THE          *\n*        FORMAT OF THE TABLE IS AS FOLLOWS:                           *\n*                                                                     *\n*        1)  4 BYTE SUBPOOL NUMBER AND MEMORY SIZE OF TABLE           *\n*        2)  4 BYTE NUMBER OF ENTRIES IN TABLE                        *\n*        3)  32 BYTE ENTRIES FOR EACH \"JOBNAME\" AS FOLLOWS:           *\n*            A)  8 BYTE \"JOBNAME\"                                     *\n*            B)  4 BYTE BIN NUMBER                                    *\n*            C) 20 BYTE PGMR NAME                                     *\n*                                                                     *\n*        NOTE ALSO THAT THIS TABLE IS SORTED BY JOBNAME AND THUS      *\n*        A BINARY SEARCH CAN BE PERFORMED TO FIND A MATCH.            *\n*                                                                     *\n***********************************************************************\nSETPGMR  DS    0H                  CHANGE THE JOB CLASS\n         STM   R0,R15,HDR          SAVE REGISTERS\n         TM    JCTJOBFL,JCTSTCJB+JCTTSUJB IS THIS A STC OR TSO USER?\n         BZ    NOFILL              NO, BRANCH\n         L     R15,16              LOAD ADDRESS OF CVT\n         USING CVT,R15             SET ADDRESSABILITY TO CVT\n         ICM   R5,15,CVTUSER       LOAD START OF TABLE AREA\n         BZ    NOFILL              NO TABLE, BRANCH\n         DROP  R15                 DROP ADDRESSABILITY TO CVT\n         L     R3,4(R5)            SET HIGH INDEX TO NUMBER OF ENTRIES\n         LA    R5,8(,R5)           INCREMENT PAST TABLE PREFIX\n         SLR   R2,R2               SET LOW INDEX TO ZERO\nSEARCH   LA    R7,0(R2,R3)         ADD LOW INDEX TO HIGH INDEX\n         SRL   R7,1                DIVIDE BY 2 FOR HALF\n         LR    R6,R7               SAVE CURRENT INDEX\n         MH    R6,H#32             MULTIPLY BY LENGTH OF ENTRY\n         LA    R6,0(R5,R6)         POINT TO ACTUAL ENTRY\n         CLC   JCTJNAME,0(R6)      SEE IF MATCH\n         BE    FOUND               EQUAL, FOUND\n         BL    SEARCH2             LOW, BRANCH\nSEARCH1  CR    R2,R7               SEE IF CURRENT SAME AS LOW\n         BE    NOFILL              YES, NOT FOUND\n         LR    R2,R7               RESET LOW TO CURRENT\n         B     SEARCH              LOOP\nSEARCH2  CR    R3,R7               SEE IF CURRENT SAME AS HIGH\n         BE    NOFILL              YES, NOT FOUND\n         LR    R3,R7               RESET HIGH TO CURRENT\n         B     SEARCH              LOOP\nFOUND    MVC   JCTROOMN,8(R6)      SAVE BIN NUMBER FROM TABLE\n         MVC   JCTPNAME,12(R6)     SAVE PGMR NAME FROM TABLE\nNOFILL   LM    R0,R15,HDR          RESTORE REGISTERS\n         SPACE 3\n.FILL1   ANOP\n***********************************************************************\n*        TEST FOR PRINTER OR PUNCH                                    *\n***********************************************************************\n         TM    PCEID,PCEPUSID      IS THIS A PUNCH\n         BO    PUNCH               YES, BRANCH\n         EJECT\n***********************************************************************\n*                                                                     *\n*                      P R I N T E R                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        PRODUCE THE SETUP HEADER FOR A SNA REMOTE IF REQUIRED.       *\n*                                                                     *\n***********************************************************************\nPRINTER  CLC   DCTDEVN,PRINTR6     IS THIS A DATAGRAPHIX ARIS\n         BE    ARIS                YES, BRANCH\n         CLC   DCTDEVN,PRINTR7     IS THIS A KOMSTAR\n         BE    KOMSTAR             YES, BRANCH\n         CLC   DCTDEVN,PRINTR8     IS THIS A DATAGRAPHIX ARIS\n         BE    ARIS                YES, BRANCH\n         CLC   DCTDEVN,PRINTR9     IS THIS A DATAGRAPHIX ARIS\n         BE    ARIS                YES, BRANCH\n         CLC   DCTDEVN,PRINTR10    IS THIS A DATAGRAPHIX ARIS\n         BE    ARIS                YES, BRANCH\n         CLC   DCTDEVN,RMT1PR1     IS THIS THE 6670\n         BE    P6670               YES, BRANCH\n         TM    MDCTFEAT,DCTPSHDR   SEE IF SETUP HDR REQUIRED\n         BNO   SETSEPCT            NO, BYPASS $SEPPDIR ROUTINE\n         $SEPPDIR (R4)             SEND PDIR TO SNA RMT\n***********************************************************************\n*                                                                     *\n*        DETERMINE THE NUMBER OF LINES TO BE PRODUCTED ON THE         *\n*        SEPARATOR PAGE.  THIS MAY VARY DEPENDING ON WHETHER OR       *\n*        NOT THE DEVICE IS A LOCAL PRINTER OR A REMOTE PRINTER.       *\n*                                                                     *\n***********************************************************************\nSETSEPCT TM    DCTDEVID,DCTRMTID   IS THIS A REMOTE DEVICE?\n         BZ    SETLOCAL            NO, BRANCH\nSETRMT   LA    R1,NPRSEPSR         LOAD NBR OF START SEP PGS FOR REMOTE\n         CH    R2,H#8              TEST ENTRY REASON CODE\n         BNE   SETCOUNT            NOT EIGHT, NOT END, BRANCH\n         LA    R1,NPRSEPER         LOAD NBR OF END SEP PGS FOR REMOTE\n         B     SETCOUNT            GO SET SEPARATOR PAGE COUNT\nSETLOCAL LA    R1,NPRSEPSL         LOAD NBR OF START SEP PGS FOR LOCAL\n         CH    R2,H#8              TEST ENTRY REASON CODE\n         BNE   SETCOUNT            NOT EIGHT, NOT END, BRANCH\n         LA    R1,NPRSEPEL         LOAD NBR OF END SEP PGS FOR LOCAL\nSETCOUNT BCTR  R1,0                REDUCE COUNT BY 1\n         ST    R1,EXITWRK4         AND SAVE COUNT\n         EJECT\n         AIF   ('&XJCF' NE 'YES').XJCF#1\n***********************************************************************\n*                                                                     *\n*        IF THIS IS THE 'END' SEPARATOR FOR A 9700, MAKE SURE         *\n*        THAT THE CHANNEL 1 IS ON LINE 1.  A PROBLEM OCCURS IF        *\n*        THE FCB FOR A PREVIOUS PRINT HAS CHANNEL 1 ON ANOTHER        *\n*        LINE.  THE DJDE IS NOT RECOGNIZED FOR THE SEPARATOR AND      *\n*        THE FOLLOWING JOB.                                           *\n*                                                                     *\n***********************************************************************\n         TM    DCTPPSW9,DCT9700    SEE IF 9700\n         BZ    N9700#1             NO, BRANCH\n         CH    R2,H#8              SEE IF ENTRY FOR END-OF-JOB\n         BNE   N9700#E             NO, BRANCH\n         MVC   HDR(LDJDECRD),DJDECRD SET DJDE LINE\n         LA    R0,LDJDECRD         LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF DJDE LINE\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\nN9700#E  DS    0H\n         $DJDE BUFFER=(R4)         ISSUE A DJDE FOR SEPARATOR\nN9700#1  DS    0H\n.XJCF#1 ANOP\n         B     PRINTRTN            GO PRINT FIRST SEPARATOR\nCALLPRNT ICM   R1,15,EXITWRK4      LOAD NUMBER OF SEP PAGES LEFT TO DO\n         BZ    ENDPRNT             ZERO, DONE, EXIT\n         BM    ENDPRNT             NEGATIVE, ERROR, BUT EXIT ANYWAY\n         AIF   ('&XJCF' NE 'YES').XJCF#2\n         TM    DCTPPSW9,DCT9700    SEE IF 9700\n         BO    ENDPRNT             YES, ONLY 1 SEPARATOR\n.XJCF#2 ANOP\n         BCTR  R1,0                REDUCE COUNT BY 1\n         ST    R1,EXITWRK4         AND SAVE NEW COUNT\n         MVC   HDR(2),PAGEJECT     MOVE EJECT COMMAND TO BUFFER\n         LA    R0,2                LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF EJECT COMMAND\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         B     PRINTRTN            GO PRINT A SEPARATOR\n         EJECT\n***********************************************************************\n*                                                                     *\n*        IF WE HAVE JUST FINISHED PROCESSING END SEPARATOR            *\n*        PAGE(S), AN EJECT COMMAND MUST BE ISSUED TO PROPERLY         *\n*        POSITION FOR EDGE MARKING.                                   *\n*                                                                     *\n***********************************************************************\nENDPRNT  CH    R2,H#8              TEST ENTRY REASON CODE\n         BNE   ENDPRNT2            NOT EIGHT, NOT END, BRANCH\n***********************************************************************\n*                                                                     *\n*        FORCE PAGE EJECT AFTER END SEPARATOR PAGE                    *\n*                                                                     *\n***********************************************************************\nENDPRNT1 MVC   HDR(2),PAGEJECT     MOVE EJECT COMMAND TO BUFFER\n         LA    R0,2                LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF EJECT COMMAND\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         B     EXIT                GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ACTIVATE PRINTING OF THE JES2 NEWS DATASET FOR TEST          *\n*        JOBS WITH FORMS=STD.                                         *\n*                                                                     *\n*        NO NEWS WILL BE CREATED FOR STARTED TASKS OR TSO             *\n*        OUTPUT.                                                      *\n*                                                                     *\n***********************************************************************\nENDPRNT2 TM    JCTJOBFL,JCTSTCJB+JCTTSUJB IS THIS A STC OR TSO USER?\n         BM    EXIT                YES, NO NEWS\n         CLI   JCTJNAME,C'P'       SEE IF PRODUCTION JOB\n         BE    EXIT                YES, NO NEWS\n         L     R6,PCHJOE           LOAD ADDRESS CHARACTERISTICS-JOE\n         USING JOEDSECT,R6         SET ADDRESSABILITY TO JOE\n         CLC   JOEFORM(4),=C'STD ' SEE IF STANDARD FORM\n         BNE   EXIT                NO, NO NEWS\n         DROP  R6                  DROP ADDRESSABILITY TO CHAR JOE\n         L     R15,$NEWSTTR        GET JES2 NEWS MTTR\n         LTR   R15,R15             SEE IF JES2 NEWS EXISTS\n         BZ    EXIT                NO, GET OUT\n         ST    R15,PCEJMTTR        SET JES2 NEWS MTTR\n         OI    PPFLAG,X'01'        SET JES2 NEWS FLAG\n         MVC   PCEEJRCB,$H1        SET RCB OFFSET\n         MVC   PPKEY,=C'$$NEWS'    SET SPECIAL NEWS KEY\n         MVC   PRLINECT,=F'-1'     SET LARGE PAGE SIZE\n         B     EXIT                GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PRINT SEPARATOR ROUTINE - MAY BE CALLED MULTIPLE TIMES       *\n*                                                                     *\n***********************************************************************\nPRINTRTN SLR   R5,R5               CLEAR REG FOR IC\n         IC    R5,$TPIDCT          LOAD REMOTE SEPARATOR LINE COUNT\n         TM    DCTDEVID,DCTRMTID   SEE IF THIS IS A REMOTE DEVICE\n         BO    STARTPRT            YES, BRANCH\n         IC    R5,$PRIDCT          LOAD LOCAL SEPARATOR LINE COUNT\n         AIF   ('&XJCF' NE 'YES').XJCF#3\n         TM    DCTPPSW9,DCT9700    SEE IF 9700\n         BO    STARTPRT            YES, DO NOT ADD EXTRA LINES\n.XJCF#3 ANOP\n         TM    DCTPPSW2,DCTNIPRT   SEE IF THIS IS A NON-IMPACT PRINTER\n         BO    STARTPRT            YES, BRANCH\n         LA    R5,IPLINES(R5)      ADD EXTRA LINES FOR INPACT PRINTER\n***********************************************************************\n*                                                                     *\n*        PRODUCE FROM 1 TO THREE BLOCK LETTER LINES.  IF ONLY         *\n*        ENOUGH ROOM FOR 1 BLOCK LETTER LINE, THE JOBNAME LINE        *\n*        WILL BE GENERATED.  IF THERE IS ROOM FOR ALL THREE LINES,    *\n*        THE SECOND BLOCK LETTER LINE WILL BE THE FIRST EIGHT         *\n*        CHARACTERS OF THE PROGRAMMER NAME.  IF THERE IS ONLY ROOM    *\n*        FOR TWO LINES, THE PROGRAMMER NAME LINE WILL NOT BE          *\n*        GENERATED, BUT RATHER THE LAST BLOCK LETTER LINE OF THE      *\n*        JOB NUMBER AND SYSOUT CLASS OR OPTIONALLY THE BIN/ROOM       *\n*        NUMBER WILL BE GENERATED.                                    *\n*                                                                     *\n***********************************************************************\nSTARTPRT CH    R5,H#15             SEE IF ROOM FOR 1 LINE OF HEADING\n         BL    BLDSEPLN            NO, JUST GO PRINT SINGLE LINES\nBLOCK1   LA    R0,JCTJNAME         LOAD JOB NAME ADDRESS\n         $PBLOCK BUFFER=(R4),DATA=(R0),SLANT=NO\n         MVI   HDR,C' '            CLEAR ENTIRE\n         MVC   HDR+1(132),HDR            BUFFER\n         LA    R1,1                SET LENGTH TO 1\n         STC   R1,HDRLEN           AND SAVE IT IN BUFFER\n         LA    R1,2                SET REPEAT COUNT\n         BAL   R7,PRINT            GO WRITE BLANK LINES\n         SH    R5,H#14             SUBTRACT LINES FOR BLOCK AND BLANKS\nBLOCK2   CH    R5,H#31             SEE IF ROOM FOR TWO BLOCK LETTERS\n         BL    BLOCK3              NO, GO SEE IF ROOM FOR LAST BLOCK\n         LA    R1,1                SET REPEAT COUNT\n         BAL   R7,PRINT            GO PRINT ONE MORE BLANK LINE\n         SH    R5,H#1              SUBTRACT ONE LINE FOR BLANK LINE\n         CLC   JCTPNAME,BLANKS     SEE IF PGMR NAME SPECIFIED\n         BNE   BLOCK2B             YES, BRANCH\n         CLI   JCTJOBID,C'J'       IS THIS A BATCH JOB?\n         BE    BLOCK2B             YES, BRANCH\n         CLI   JCTJOBID,C'T'       IS THIS A TSO USER?\n         BE    BLOCK2A             YES, BRANCH\n         MVC   JCTPNAME,C#STC      SET PROGRAMMER NAME TO 'TECH SUP'\n         B     BLOCK2B             GO PRINT BLOCK LETTER\nBLOCK2A  MVC   JCTPNAME,C#TSU      SET PROGRAMMER NAME TO 'TSO USER'\nBLOCK2B  LA    R0,JCTPNAME         LOAD ADDRESS OF PROGRAMMER NAME\n         $PBLOCK BUFFER=(R4),DATA=(R0),SLANT=NO\n         MVI   HDR,C' '            CLEAR ENTIRE\n         MVC   HDR+1(132),HDR            BUFFER\n         LA    R1,1                SET LENGTH TO 1\n         STC   R1,HDRLEN           AND SAVE IT IN BUFFER\n         LA    R1,2                SET REPEAT COUNT\n         BAL   R7,PRINT            GO WRITE BLANK LINES\n         SH    R5,H#14             SUBTRACT LINES FOR BLOCK AND BLANKS\nBLOCK3   CH    R5,H#16             SEE IF ROOM FOR MORE BLOCK LETTERS\n         BL    BLDSEPLN            NO, JUST GO PRINT SINGLE LINES\n         LA    R1,1                SET REPEAT COUNT\n         BAL   R7,PRINT            GO PRINT ONE MORE BLANK LINE\n         SH    R5,H#1              SUBTRACT ONE LINE FOR BLANK LINE\n         MVC   EXITWRK1(8),BLANKS  CLEAR WORK AREA\n         AIF   ('&BLOCK' NE 'BIN').NORMAL1\n         CLC   JCTROOMN,HEXZERO    SEE IF ROOM NUMBER SPECIFIED\n         BE    BLOCK3C             NO, BRANCH\n         MVC   EXITWRK1(4),JCTROOMN MOVE ROOM NUMBER TO WORK\n         AGO   .NORMAL2\n.NORMAL1 ANOP\n         MVC   EXITWRK1(1),JCTJOBID GET JOB TYPE\n         MVC   EXITWRK1+1(4),JCTJOBID+4 AND JOB NUMBER\nBLOCK3A  CLI   EXITWRK1+1,C' '     LEFT\n         BNE   BLOCK3B               JUSTIFY\n         MVC   EXITWRK1+1(4),EXITWRK1+2 JOB\n         B     BLOCK3A                   NUMBER\nBLOCK3B  L     R6,PWKJOE           LOAD ADDRESS WORK-JOE\n         USING JOEDSECT,R6         SET ADDRESSABILITY TO JOE\n         MVC   EXITWRK1+6(1),JOECURCL GET SYSOUT CLASS\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\n         MVI   EXITWRK1+7,C' '     SET TRAILING BLANK\n.NORMAL2 ANOP\nBLOCK3C  LA    R0,EXITWRK1         LOAD ADDRESS OF JOB NUMBER AND CLASS\n         $PBLOCK BUFFER=(R4),DATA=(R0),SLANT=NO\n         MVI   HDR,C' '            CLEAR ENTIRE\n         MVC   HDR+1(132),HDR            BUFFER\n         LA    R1,1                SET LENGTH TO 1\n         STC   R1,HDRLEN           AND SAVE IT IN BUFFER\n         LA    R1,2                SET REPEAT COUNT\n         BAL   R7,PRINT            GO WRITE BLANK LINES\n         SH    R5,H#14             SUBTRACT LINES FOR BLOCK AND BLANKS\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CALL SEPLINE ROUTINE TO BUILD THE SINGLE SEPARATOR LINE      *\n*        WHICH WILL BE PRODUCED MULTIPLE TIMES DEPENDING ON THE       *\n*        SPECIFIED NUMBER OF LINES ON THE SEPARATOR PAGE FOR THE      *\n*        DEVICE.                                                      *\n*                                                                     *\n***********************************************************************\nBLDSEPLN BAL   R9,SEPLINE          GO BUILD SINGLE SEPARATOR LINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PRODUCE THE SINGLE LINE WHICH WAS JUST CREATED AS MANY       *\n*        TIMES AS REQUIRED TO FILL THE REST OF THE PAGE AS DEFINED    *\n*        BY JES2 INITIALIZATION PARAMETERS.  THE NUMBER OF LINES      *\n*        LEFT TO PRINT IS IN REGISTER R5.                             *\n*                                                                     *\n***********************************************************************\n         LR    R1,R5               SET REMAIN LINE COUNT IN REG 1\n         BAL   R7,PRINT            GO WRITE HEADER LINES\n         B     CALLPRNT            DONE WITH PAGE, RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*                        P U N C H                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        PRODUCE THE SETUP HEADER FOR A SNA REMOTE IF REQUIRED.       *\n*                                                                     *\n***********************************************************************\nPUNCH    TM    MDCTFEAT,DCTPSHDR   SEE IF SETUP HDR REQUIRED\n         BNO   PUNCH1              NO, BYPASS $SEPPDIR ROUTINE\n         $SEPPDIR (R4)             SEND PDIR TO SNA RMT\nPUNCH1   MVC   EXITWRK3(4),JCTROOMN SET ROOM NUMBER\n         MVC   EXITWRK3+4(4),JCTJOBID+4 AND JOB NUMBER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONVERT EACH OF THE EIGHT CHARACTERS IN PEXITWRK3 TO         *\n*        A STRING OF 8 CHARACTERS WHICH WILL PRINT AS A 12-11-X       *\n*        PUNCH.  EACH CHARACTER WILL BE PRECEDED BY A NULL            *\n*        12-11 PUNCH TO DIVIDE THE CHARACTERS.                        *\n*                                                                     *\n*        NOTE THAT THAT THE ZONE PORTION OF ALPHA CHARACTERS WILL     *\n*        BE LOST LEAVING ONLY THE NUMERIC PORTION ALONG WITH THE      *\n*        12-11 ZONE PUNCH.  ALSO NOTE THAT ALL CHARACTERS LESS        *\n*        AN \"A\" WILL PRINT AS A NULL 12-11 PUNCH.                     *\n*                                                                     *\n***********************************************************************\n         LA    R6,80               SET LENGTH TO 80\n         STC   R6,HDRLEN           AND SAVE IT IN THE BUFFER\n         LA    R6,HDR+1            LOAD START OF PUNCH LINE IN BUFFER\n         SLR   R5,R5               ZERO INDEX POINTER\nPUNCH2   MVI   0(R6),X'6A'         START THE FIELD WITH 12-11 PNCH\n         IC    R0,EXITWRK3(R5)     LOAD NEXT CHARACTER\n         STC   R0,1(,R6)           MOVE CHARACTER TO BUFFER\n         OI    1(R6),X'30'         MASK LETTERS TO NUMERIC\n         CLI   1(R6),X'F0'         SEE IF NOW ZERO\n         BE    PUNCH3              YES, GO SET TO X'E0'\n         BH    PUNCH4              GT ZERO, GO MASK TO 12-11-X\n         MVI   1(R6),X'EA'         LT, SET TO X'EA'\nPUNCH3   XI    1(R6),X'E0'         MASK OFF X'E0'\nPUNCH4   XI    1(R6),X'60'         MASK RESULTING CHARACTER TO 12-11-X\n         MVC   2(7,R6),1(R6)       PROPAGATE CHARACTER 7 MORE TIMES\n         MVI   9(R6),X'6A'         END FIELD WITH 12-11 PUNCH\n         LA    R6,10(,R6)          INCREMENT TO NEXT OUTPUT AREA\n         LA    R5,1(,R5)           INCREMENT TO NEXT INPUT CHARACTER\n         CH    R5,H#8              SEE IF END OF INPUT\n         BL    PUNCH2              NO, LOOP\n***********************************************************************\n*                                                                     *\n*        PRODUCE PUNCH LACE CARD                                      *\n*                                                                     *\n***********************************************************************\n         LA    R1,1                SET REPEAT COUNT\n         BAL   R7,PRINT            GO WRITE PUNCH CARD\n***********************************************************************\n*                                                                     *\n*        PRODUCE BLANK SEPARATOR CARD IF NOT A 3525                   *\n*                                                                     *\n***********************************************************************\n         CLI   PDEVTYPE+3,X'0C'    IS THIS A 3525\n         BE    PUNCH6              YES, DO NOT PUNCH A BLANK CARD\n         MVC   HDR(2),PUNBLANK     MOVE BLANK CARD INTO BUFFER\n         LA    R0,2                LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF BLANK CARD\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\nPUNCH6   B     EXIT                DONE, GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PRODUCE THE SINGLE LINE FOR THE JOB SEPARATOR ROUTINE        *\n*        WHICH WILL BE REPRODUCED MULTIPLE TIMES BASED UPON THE       *\n*        NUMBER OF LINES SET FOR THE SEPARATOR ROUTINE.               *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CONVERT JOEROUT TO EBCIDIC FOR PRINT SEPERATOR PAGES         *\n*        THE ROUTE IS FIRST CHECKED TO SEE IF THERE IS A              *\n*        DESTID THAT MATCHES THE ROUTE.  IF A DESTID IS FOUND THEN    *\n*        THAT NAME IS MOVED TO THE HEADER LINE. IF MORE THAN ONE      *\n*        DESTID IS FOUND FOR A ROUTE THEN THE ROUTE IS CONVERTED      *\n*        ACCORDING TO THE FOLLOWING FORMAT                            *\n*                                                                     *\n*             RNNNN  (REMOTE)                                         *\n*             UNNNN  (SPECIAL LOCAL)                                  *\n*             'LOCAL' (LOCAL DEVICE)                                  *\n*             CCCCCCCC (DESTID)                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nSEPLINE  L     R6,PWKJOE           LOAD ADDRESS OF WORK JOE\n         USING JOEDSECT,R6         SET ADDRESSABILITY TO JOE\n         L     R7,$SSVT            GET ADDRESS OF SSVT\n         LM    R14,R15,$SVRDT-SSVT(R7)  LOAD ADDRESS OF FIRST RDT\n         USING RDTDSECT,R14        SET ADDRESSABILITY TO RDT\n         NI    EXITWRK2,X'00'      TURN OFF DESTID FOUND\nSEPLINE1 CR    R14,R15             END OF TABLE?\n         BH    SEPLINE4            YES, GET OUT\n         ICM   R7,15,RDTROUTE      LOAD ROUTE CODE FROM RDT\n         TM    RDTFLAG,RDTFLAGR    IS THIS A REMOTE DESTINATION ENTRY\n         BZ    SEPLINE2            NO, BRANCH\n         TM    RDTFLAG,RDTFLAGN    IS NODE SPECIFIED IN THE ENTRY\n         BO    SEPLINE2            YES, BRANCH\n         ICM   R7,B'1100',$OWNNODE MOVE DEFAULT NODE TO ROUTE CODE\nSEPLINE2 CL    R7,JOEROUT          SEE IF DESTID MATCHES THIS JOE\n         BNE   SEPLINE3            NO, GO CHECK NEXT RDT ENTRY\n         TM    EXITWRK2,X'FF'      HAS A DESTID ALREADY BEEN FOUND?\n         BO    SEPLINE5            YES, BRANCH\n         OI    EXITWRK2,X'FF'      SET FIRST DESTID FOUND FLAG\n         MVC   EXITWRK3,RDTNAME    SAVE DESTID\nSEPLINE3 LA    R14,RDTSIZ(R14)     INCREMENT TO NEXT RDT\n         B     SEPLINE1            GO CHECK NEXT RDT ENTRY\nSEPLINE4 TM    EXITWRK2,X'FF'      IS THERE A DESTID FOR THIS JOE..\n         BO    SEPLINE8            YES, GO BUILD SEPARATOR LINE\nSEPLINE5 CLC   JOEREMOT,$ZEROS     IS THIS A LOCAL DESTID\n         BE    SEPLINE7            YES, GO SET TO LOCAL\n         SLR   R15,R15             CLEAR REG FOR ICM\n         ICM   R15,3,JOEREMOT      MOVE REMOTE NUMBER TO A REG\n         CVD   R15,EXITWRK3        CONVERT REMOTE NUMBER TO PACKED\n         MVC   EXITWRK3-1(6),MASK1 SET EDIT PATTERN\n         ED    EXITWRK3-1(6),EXITWRK3+5  MAKE REMOTE NUMBER PRINTABLE\n         CLC   JOERNODE,$ZEROS     SEE IF UNIT SPECIFICATION\n         BE    SEPLINE6            YES, GO SET  'U' LABEL\n         MVI   EXITWRK3,C'R'       NO,  REMOTE, 'R' LABEL\n         MVC   EXITWRK3+5(3),BLANKS BLANK REST OF FIELD\n         B     SEPLINE8            GO BUILD SEPARATOR LINE\n         SPACE 1\nSEPLINE6 MVI   EXITWRK3,C'U'       SET 'U' LABEL\n         MVC   EXITWRK3+5(3),BLANKS BLANK REST OF FIELD\n         B     SEPLINE8            GO BUILD SEPARATOR LINE\n         SPACE 1\nSEPLINE7 MVC   EXITWRK3,C#LOCAL    SET 'LOCAL' LABEL\n         DROP  R14                 DROP ADDRESSABILITY TO RDT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BUILD THE OUTPUT SINGLE LINE WHICH WILL BE REPEATED ENOUGH   *\n*        TIMES TO FILL THE REST OF THE PAGE AS DEFINED BY THE JES2    *\n*        INITIALIZATION PARAMTERS FOR &PRIDCT FOR LOCAL PRINTERS OR   *\n*        &TPIDCT FOR REMOTE PRINTERS.                                 *\n*                                                                     *\n***********************************************************************\nSEPLINE8 MVI   HDR,C' '            CLEAR ENTIRE\n         MVC   HDR+1(132),HDR            BUFFER\n         LA    R6,132              LOAD LENGTH OF PRINT LINE\n         STC   R6,HDRLEN           AND SAVE IT\n***********************************************************************\n*        FRAME CHARACTERS                                             *\n***********************************************************************\n         MVC   HDRFRAME(2),C#ASTER  SET FRAME CHARACTER\n         MVC   HDRFRAMX(1),HDRFRAME SET END FRAME CHARACTER\n***********************************************************************\n*        SYSOUT CLASS                                                 *\n***********************************************************************\n         L     R6,PWKJOE           LOAD ADDRESS OF WORK JOE\n         USING JOEDSECT,R6         SET ADDRESSABILITY TO JOE\n         MVC   HDRCLASS,JOECURCL   SET SYSOUT CLASS\n         MVC   HDRCLASX,JOECURCL       TWICE\n***********************************************************************\n*        SYSOUT JOE NAME                                              *\n***********************************************************************\n         MVC   HDRJNAME,JOENAME    SET JOE OUTPUT NAME\n***********************************************************************\n*        SYSOUT JOE ID                                                *\n***********************************************************************\n         LH    R1,JOEID1           LOAD 1ST JOEID\n         CVD   R1,EXITWRK1         CONVERT TO PACKED\n         OI    EXITWRK1+7,X'0F'    SET SIGN\n         UNPK  HDRJID1,EXITWRK1+6(2) SET JOEID1\n         LH    R1,JOEID2           LOAD 2ND JOEID\n         CVD   R1,EXITWRK1         CONVERT TO PACKED\n         OI    EXITWRK1+7,X'0F'    SET SIGN\n         UNPK  HDRJID2,EXITWRK1+6(2) SET JOEID2\n***********************************************************************\n*        SYSOUT JOE ROUTE AS DETERMINED BY PREVIOUS ROUTINE           *\n***********************************************************************\n         MVC   HDRJROUT,EXITWRK3   SET JOE ROUTE OR DESTID\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\n***********************************************************************\n*        SEPARATOR FORM TYPE (START/CONT/END)                         *\n***********************************************************************\n         MVC   HDRFORM,C#START     ASSUME \"START\" ENTRY\n         LTR   R2,R2               TEST ENTRY REASON CODE\n         BZ    FORMSET             ZERO, START, BRANCH\n         MVC   HDRFORM,C#CONT      ASSUME \"CONT \" ENTRY\n         CH    R2,H#4              TEST ENTRY REASON CODE\n         BE    FORMSET             FOUR, CONT, BRANCH\n         MVC   HDRFORM,C#END       MUST BE \"END  \" ENTRY\nFORMSET  MVC   HDRFORMX,HDRFORM    SET FORM TYPE TWICE\n***********************************************************************\n*        SYSOUT JOB NUMBER                                            *\n***********************************************************************\n         MVC   HDRNUM,JCTJOBID     SET JOB NUMBER\n***********************************************************************\n*        SYSOUT JOB NAME                                              *\n***********************************************************************\n         MVC   HDRNAME,JCTJNAME    SET JOB NAME\n***********************************************************************\n*        SYSOUT SYSTEM ID                                             *\n***********************************************************************\n         MVC   HDRSYS,$SID         SET SYSTEM ID\n***********************************************************************\n*        SYSOUT PROGRAMMER NAME                                       *\n***********************************************************************\n         MVC   HDRPNAME,JCTPNAME   SET PROGRAMMER NAME\n***********************************************************************\n*        SYSOUT ROOM NUMBER                                           *\n***********************************************************************\n         MVC   HDRRKEY,C#ROOM      SET THE ROOM LABEL\n         MVC   HDRROOM,JCTROOMN    SET ROOM NUMBER\n***********************************************************************\n*        SYSOUT TIME (HH.MM.SS XM)                                    *\n***********************************************************************\n         TIME  DEC                 GET TIME AND DATE\n         ST    R0,EXITWRK3         SAVE TIME (HHMMSSTT)\n         MVO   EXITWRK2(5),EXITWRK3(4) SHIFT TO ADD SIGN\n         OI    EXITWRK2+4,X'0F'    SET SIGN\n         MVC   HDRAM,C#AM          SET TO 'AM'\n         CP    EXITWRK2(5),P#12MIL TEST TIME\n         BL    SEPLINE9            BRANCH IF AM\n         MVI   HDRAM,C'P'          CHANGE FROM AM TO PM\n         CP    EXITWRK2(5),P#13MIL SEE IF AFTER 1 PM\n         BL    SEPLINE9            YES, DO NOT ADJUST FOR PM\n         SP    EXITWRK2(5),P#12MIL SUBTRACT 12 HOURS\nSEPLINE9 MVC   HDRPTTN,MASK2       SET EDIT MASK\n         ED    HDRPTTN,EXITWRK2    EDIT TIME INTO HEADER LINE\n***********************************************************************\n*        SYSOUT DATE (DD MMM YY)                                      *\n***********************************************************************\n         ST    R1,EXITWRK3+4       SAVE DATE\n         MVC   SAVETBL(48),YEARTBL GET MODIFIABLE COPY OF DAY TABLE\n         TM    EXITWRK3+5,X'01'    IT THIS AN ODD YEAR\n         BO    SEPLINEA            YES, CANNOT BE LEAP YEAR\n         TM    EXITWRK3+5,X'12'    MAGIC LEAP YEAR MASK\n         BM    SEPLINEA            MIXED, CANNOT BE LEAP YEAR\n         MVI   FEB,29              CHANGE FEB TO 29 DAYS\nSEPLINEA MVC   HDRDATE+6(3),MASK3  MOVE EDIT PATTERN\n         ED    HDRDATE+7(3),EXITWRK3+5    EDIT THE YEAR (YY) TO HDR\n         MVC   EXITWRK3(6),$ZEROS  CLEAR ALL DATE EXCEPT JULIAN DAY\n         CVB   R1,EXITWRK3         CONVERT TO BINARY DAY\n         LA    R6,SAVETBL-4        LOAD ADDRESS OF DATE TABLE\n         SLR   R0,R0               CLEAR FOR IC\nSEPLINEB SLR   R1,R0               SUBTRACT DAY/MONTH FROM TOTAL\n         LA    R6,4(,R6)           INCREMENT TO NEXT DATE ENTRY\n         IC    R0,0(,R6)           LOAD NUMBER OF DAYS IN THAT MONTH\n         CLR   R0,R1               SEE IF ONLY PARTIAL MONTH REMAINDING\n         BL    SEPLINEB            NO, LOOP\n         CVD   R1,EXITWRK3         CONVERT TO DECIMAL DAY\n         MVI   HDRDATE-1,C' '      CLEAR 1ST BYTE OF AREA\n         UNPK  HDRDATE(2),EXITWRK3+6(2) PLACE DAY (DD)\n         OI    HDRDATE+1,X'F0'             INTO PMESSAGE\n         MVI   HDRDATE+2,C' '      INSERT DELIMITER\n         MVC   HDRDATE+3(3),1(R6)  MOVE EBCDIC MONTH (MMM)\n***********************************************************************\n*        SYSOUT DEVICE NAME                                           *\n***********************************************************************\n         MVC   HDRDNAME,DCTDEVN    DEVICE NAME\n         BR    R9                  RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*                      K O M S T A R                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        PRODUCE THE PROPER NATIVE MODE COMMANDS FOR THE KODAK        *\n*        KOMSTAR UNIT IF REQUIRED FOR THE SYSOUT CLASS BEING          *\n*        PROCESSED.                                                   *\n*                                                                     *\n***********************************************************************\nKOMSTAR  L     R6,PWKJOE           LOAD ADDRESS OF WORK JOE\n         USING JOEDSECT,R6         SET ADDRESSABILITY TO JOE\n         CLI   JOECURCL,C'P'       PROD HOT PME/STARLINK1 CLASS?\n         BE    EXIT                YES, BYPASS NATIVE KOMSTAR COMMANDS\n         CLI   JOECURCL,C'Q'       PROD WARM PME/STARLINK1 CLASS?\n         BE    EXIT                YES, BYPASS NATIVE KOMSTAR COMMANDS\n         CLI   JOECURCL,C'R'       PROD REGULAR PME/STARLINK1 CLASS?\n         BE    EXIT                YES, BYPASS NATIVE KOMSTAR COMMANDS\n         CLI   JOECURCL,C'L'       TEST PME/STARLINK1 CLASS?\n         BE    EXIT                YES, BYPASS NATIVE KOMSTAR COMMANDS\n         CLI   JOECURCL,C'C'       PROD HOT KOM-80 SYSOUT CLASS?\n         BE    KOM80               YES, BYPASS NATIVE KOMSTAR COMMANDS\n         CLI   JOECURCL,C'D'       PROD WARM KOM-80 SYSOUT CLASS?\n         BE    KOM80               YES, BYPASS NATIVE KOMSTAR COMMANDS\n         CLI   JOECURCL,C'E'       PROD REGULAR KOM-80 SYSOUT CLASS?\n         BE    KOM80               YES, BYPASS NATIVE KOMSTAR COMMANDS\n         CLI   JOECURCL,C'M'       TEST KOM-80 SYSOUT CLASS?\n         BE    KOM80               YES, BYPASS NATIVE KOMSTAR COMMANDS\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\n         CH    R2,H#8              TEST ENTRY REASON CODE\n         BE    KOMEND              EIGHT, END, BRANCH\n         B     KOMBEG              START OR CONT, BRANCH\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        FORCE FICHE EJECT AT END OF PROCESSING                       *\n*                                                                     *\n***********************************************************************\nKOMEND   MVC   HDR(LKOMRCD4),KOMRCD4 MOVE EJECT SEQUENCE TO      BUFFER\n         LA    R0,LKOMRCD4         LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF EJECT COMMAND\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         B     EXIT                DONE, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SET FCB, FICHE FORMAT AND TITLES AT START OF PROCESSING      *\n*                                                                     *\n***********************************************************************\nKOMBEG   MVC   HDR(LKOMRCD1),KOMRCD1 MOVE 1ST SETUP TO BUFFER\n***********************************************************************\n*        WRITE KOMSTAR SETUP RECORD 1                                 *\n***********************************************************************\n         LA    R0,LKOMRCD1         LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF SETUP COMMAND\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         MVC   HDR(LKOMRCD2),KOMRCD2 MOVE 2ND SETUP TO BUFFER\n         MVC   JNAME,JCTJNAME      MOVE JOBNAME TO BUFFER\n         CLC   JCTPNAME,BLANKS     SEE IF PGMR NAME SPECIFIED\n         BNE   KOMBEG2             YES, BRANCH\n         CLI   JCTJOBID,C'J'       IS THIS A BATCH JOB?\n         BE    KOMBEG2             YES, BRANCH\n         CLI   JCTJOBID,C'T'       IS THIS A TSO USER?\n         BE    KOMBEG1             YES, BRANCH\n         MVC   JCTPNAME,C#STC      SET PROGRAMMER NAME TO 'TECH SUP'\n         B     KOMBEG2             BRANCH\nKOMBEG1  MVC   JCTPNAME,C#TSU      SET PROGRAMMER NAME TO 'TSO USER'\nKOMBEG2  MVC   PNAME1,JCTPNAME     MOVE PROGRAMMER NAME PART1 TO BUFFER\n         MVC   PNAME2,JCTPNAME+10  MOVE PROGRAMMER NAME PART2 TO BUFFER\n         MVC   JOBID,JCTJOBID      SET JOB ID\n         MVC   ROOMNBR,JCTROOMN    MOVE ROOM NUMBER TO BUFFER\n         TIME  DEC                 GET TIME AND DATE\n         ST    R0,EXITWRK1         SAVE TIME (HHMMSSTT)\n         ST    R1,EXITWRK3+4       SAVE DATE\n         MVC   SAVETBL,YEARTBL     SAVE A COPY OF DAE TABLE FOR UPDATE\n         TM    EXITWRK3+5,X'01'    IT THIS AN ODD YEAR\n         BO    KOMBEG3             YES, CANNOT BE LEAP YEAR\n         TM    EXITWRK3+5,X'12'    MAGIC LEAP YEAR MASK\n         BM    KOMBEG3             MIXED, CANNOT BE LEAP YEAR\n         MVI   FEB,29              CHANGE FEB TO 29 DAYS\nKOMBEG3  MVC   DATE+6(3),MASK3     MOVE EDIT PATTERN\n         ED    DATE+7(3),EXITWRK3+5    EDIT THE YEAR (YY) TO HDR\n         MVC   EXITWRK3(6),$ZEROS  CLEAR ALL DATE EXCEPT JULIAN DAY\n         CVB   R1,EXITWRK3         CONVERT TO BINARY DAY\n         LA    R6,SAVETBL-4        LOAD ADDRESS OF DATE TABLE\n         SLR   R0,R0               CLEAR FOR IC\nKOMBEG4  SLR   R1,R0               SUBTRACT DAY/MONTH FROM TOTAL\n         LA    R6,4(,R6)           INCREMENT TO NEXT DATE ENTRY\n         IC    R0,0(,R6)           LOAD NUMBER OF DAYS IN THAT MONTH\n         CLR   R0,R1               SEE IF ONLY PARTIAL MONTH REMAINDING\n         BL    KOMBEG4             NO, LOOP\n         CVD   R1,EXITWRK3         CONVERT TO DECIMAL DAY\n         MVI   DATE-1,C' '         CLEAR 1ST BYTE OF AREA\n         UNPK  DATE(2),EXITWRK3+6(2) PLACE DAY (DD)\n         OI    DATE+1,X'F0'             INTO PMESSAGE\n         MVI   DATE+2,C' '         INSERT DELIMITER\n         MVC   DATE+3(3),1(R6)     MOVE EBCDIC MONTH (MMM)\n***********************************************************************\n*        WRITE KOMSTAR SETUP RECORD 2                                 *\n***********************************************************************\n         LA    R0,LKOMRCD2         LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF SETUP COMMAND\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         MVC   HDR(LKOMRCD3),KOMRCD3 MOVE 3ND SETUP TO BUFFER\n         MVC   TIME,MASK4          SET EDIT MASK\n         ED    TIME-1(9),EXITWRK1  EDIT TIME TO BUFFER\n***********************************************************************\n*        WRITE KOMSTAR SETUP RECORD 3                                 *\n***********************************************************************\n         LA    R0,LKOMRCD3         LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF SETUP COMMAND\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         B     EXIT                DONE, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*                         K O M 8 0                                   *\n*                                                                     *\n*             SET AN FCB FOR THE KOMSTAR FOR ALL KOM-80               *\n*             EMULATION OUTPUT TO SET THE '1' CARD TO                 *\n*             DEFINE THE STANDARD MICORFORM SETUP PARAMETERS.         *\n*                                                                     *\n***********************************************************************\nKOM80    CH    R2,H#8              TEST ENTRY REASON CODE\n         BE    EXIT                EIGHT, END, EXIT\n         MVC   HDR(LKOMRCD5),KOMRCD5 MOVE KOM80 SETUP TO BUFFER\n         LA    R0,LKOMRCD5         LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF EJECT COMMAND\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         B     EXIT                DONE, GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                        A R I S   I I                                *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        DETERMINE THE PROPER DATAGRAPHIX \"JOB\" ID AND SEND THE       *\n*        COMMAND TO THE UNIT.  IF JES2 INFORMATION IS REQUIRED        *\n*        BY THE \"JOB\" TO DETERMINE THE HEADINGS, A STANDARD           *\n*        HEADING LINE WILL ALSO BE SENT.                              *\n*                                                                     *\n*        THE DATAGRAPHIX \"JOB\" ID CAN BE FROM ONE OF TWO SOURCES.     *\n*        THE CHARACTERISTICS JOE WILL BE EXAMINED FOR AN EXTERNAL     *\n*        WRITER NAME BEING SPECIFIED.  THE FIRST SIX CHARACTERS       *\n*        OF THE WRITER NAME WILL BE USED FOR THE DATAGRAPHIX JOB      *\n*        NAME IF ONE HAS BEEN SPECIFIED.  IF THERE IS NO NAME         *\n*        THERE, THE PROGRAMMER NAME FIELD IN THE JCT WILL BE          *\n*        SCANNED FOR THE CHARACTERS \"K=' TO DEFINE THE DATAGRAPHIX    *\n*        JOB ID.  IF NONE IS DEFINED IN THE PROGRAMMER NAME FIELD,    *\n*        A DEFAULT OF \"JES133\" WILL BE USED.                          *\n*                                                                     *\n*        THE FOLLOWING IS AN EXAMPLE OF DATAGRAPHIX DXUTIL CONTROL    *\n*        STATEMENTS TO ACTUALLY FORMAT THE DEFAULT \"JES2\" SEPARATOR   *\n*        TITLES ON THE MICROFICHE.                                    *\n*                                                                     *\n*              DATAGRAPHIX PARMS FOR JES2 SEPARATOR                   *\n*                                                                     *\n*              TITLE FRAME PARMS - SUBTABLE 17                        *\n*                                                                     *\n*INIT TFRM YES 64 132 3 1 3 7 2 3 1 2 8 3 2 4 2 2 3 0 NO END          *\n*                                                                     *\n*              TEMPORARY WORK AREA - SUBTABLE 65                      *\n*                                                                     *\n*INIT FPAD CLEAR END                                                  *\n*INIT FPAD 4 BSEQ 1 END                                               *\n*                                                                     *\n*              TITLE LINE1 PARMS - SUBTABLE 15                        *\n*                                                                     *\n*INIT TL1 CLEAR END                                                   *\n*INIT TL1 63 OPER 33 'DATE' END                                       *\n*INIT TL1 63 SEP 20 08 0 NO HOLD 75 MA ' ROOM ' 01 END                *\n*INIT TL1 63 SEP 55 20 0 NO HOLD 75 MA ' ROOM ' 10 END                *\n*INIT TL1 63 SEP 99 09 0 NO HOLD 75 MA ' ROOM ' 39 END                *\n*INIT TL1 63 FPAD 2 03 0 NO NHLD 00 54 END                            *\n*                                                                     *\n*              TITLE LINE2 PARMS - SUBTABLE 16                        *\n*                                                                     *\n*INIT TL2 CLEAR END                                                   *\n*INIT TL2 63 OPER 33 'TIME' END                                       *\n*INIT TL2 63 SEP 11 08 0 NO HOLD 75 MA ' ROOM ' 10 END                *\n*INIT TL2 63 SEP 81 04 0 NO HOLD 75 MA ' ROOM ' 27 END                *\n*INIT TL2 63 SEP 87 11 0 NO HOLD 75 MA ' ROOM ' 39 END                *\n*                                                                     *\n*                                                                     *\n*SAVE JES133 'NWB JES2 SEPARATOR' +                                   *\n*     STBL  15 16 17 65 END                                           *\n*                                                                     *\n***********************************************************************\nARIS     CH    R2,H#8              TEST ENTRY REASON CODE\n         BE    ARISEND             EIGHT, END, EXIT\n         MVC   HDR(LARISR1),ARISR1 MOVE ARIS START JOB TO BUF\n         L     R6,PCHJOE           LOAD ADDRESS CHARACTERISTICS-JOE\n         USING JOEDSECT,R6         SET ADDRESSABILITY TO JOE\n         MVC   HDR+14(6),JOEWTRID  SET DX JOB ID FROM WRITERID\n         CLI   JOEWTRID,C'A'       SEE IF WRITERID SPECIFIED\n         BNL   ARIS5               YES, BRANCH\n         MVC   HDR+14(6),BLANKS    SET DX JOB ID BACK TO BLANKS\n         DROP  R6                  DROP ADDRESSABILITY TO CHAR JOE\n         LA    R1,JCTPNAME         POINT TO PROGRAMMER NAME\n         LA    R15,20              SET LOOP COUNTER\nARIS1    CLC   0(2,R1),=C'K='      LOOK FOR OUR KEYWORD\n         BE    ARIS2               YES, BRANCH\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHARACTER\n         BCT   R15,ARIS1           LOOP\nARIS2    CH    R15,=H'3'           AT LEAST THREE CHARACTERS LEFT?\n         BL    ARIS4               NO, USE DEFAULT NAME\n         LA    R14,HDR+14          POINT TO START OF ARIS JOB NAME\n         SH    R15,=H'2'           SUBTRACT 2 FROM REMAINING LENGTH\n         LA    R1,2(,R1)           INCREMENT PAST 'K='\n         CH    R15,=H'6'           IS THERE ROOM FOR FULL NAME\n         BNH   ARIS3               NO, USE REMAINING LENGTH\n         LA    R15,6               SET SCAN LENGTH TO MAX\nARIS3    CLI   0(R1),C' '          SEE IF END OF NAME\n         BE    ARIS4               YES, BRANCH\n         CLI   0(R1),C','          SEE IF END OF NAME\n         BE    ARIS4               YES, BRANCH\n         MVC   0(1,R14),0(R1)      MOVE CHARACTER TO CONTROL RECORD\n         LA    R1,1(,R1)           POINT TO NEXT CHAR OF PGMR NAME\n         LA    R14,1(,R14)         POINT TO NEXT CHAR OF CONTROL RECORD\n         BCT   R15,ARIS3           LOOP\nARIS4    CLI   HDR+14,C' '         WAS A NAME SET\n         BNE   ARIS5               YES, BRANCH\n         MVC   HDR+14(6),=C'JES133' SET DEFAULT JOB NAME\nARIS5    LA    R0,LARISR1          LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF ARIS CONTROL RECD\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SEND TITLING DATA LINE TO THE ARIS                           *\n*        THIS WILL BE THE EXACT SAME LINE USED BY THE NORMAL PRINT    *\n*        SEPARATOR ROUTINE.  THE DATAGRAPHIX JOB CAN THEN EXTRACT     *\n*        WHATEVER INFORMATION THAT IS REQUIRED FOR THE HEADINGS.      *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*        CALL SEPLINE ROUTINE TO BUILD THE SINGLE SEPARATOR LINE      *\n*        WHICH WILL BE SENT TO THE ARIS FOR TITLING DATA.             *\n***********************************************************************\n         BAL   R9,SEPLINE          GO BUILD SINGLE SEPARATOR LINE\n***********************************************************************\n*        SET THE ARIS CONTROL CHARACTERS, WRITE THE CONTROL RECORD,   *\n*        AND GET OUT.                                                 *\n***********************************************************************\n         MVI   HDR,X'C9'           SET ARIS CHANNEL COMMAND CODE\n         MVI   HDR+1,X'15'         SET CONTROL RECORD ID\n         LA    R0,133              LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF ARIS CONTROL RECD\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         B     EXIT                DONE, EXIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORCE FICHE EJECT AT END OF PROCESSING                       *\n*                                                                     *\n***********************************************************************\nARISEND MVC    HDR(LARISR2),ARISR2 MOVE EJOB RECORD TO BUFFER\n         LA    R0,LARISR2          LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF EJOB RECORD\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         B     EXIT                DONE, GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                         P 6 6 7 0                                   *\n*                                                                     *\n*             THIS ROUTINE WILL CREATE JOB SEPARATOR PRINT LINES      *\n*             TO SUPPORT THE IBM 6670 ATTACHED AS AN RJE.             *\n*                                                                     *\n***********************************************************************\nP6670    TM    MDCTFEAT,DCTPSHDR   SEE IF SETUP HDR REQUIRED\n         BNO   P6670A              NO, BYPASS $SEPPDIR ROUTINE\n         $SEPPDIR (R4)             SEND PDIR TO SNA RMT\nP6670A   CH    R2,H#8              TEST ENTRY REASON CODE\n         BE    EXIT                EIGHT, END, EXIT\n         MVC   HDR(LR6670#1),R6670#1 MOVE 1ST 6670 HEADER TO BUF\n         MVC   H66JOBNM,JCTJNAME   SET JOB NAME\n         MVC   H66JOBID,JCTJOBID   SET JOB NUMBER\n         MVC   H66PGMR,JCTPNAME    SET PROGRAMMER NAME\n         MVC   H66ROOM,JCTROOMN    SET ROOM NUMBER\n***********************************************************************\n*        SYSOUT TIME (HH.MM.SS XM)                                    *\n***********************************************************************\n         TIME  DEC                 GET TIME AND DATE\n         ST    R0,EXITWRK3         SAVE TIME (HHMMSSTT)\n         MVO   EXITWRK2(5),EXITWRK3(4) SHIFT TO ADD SIGN\n         OI    EXITWRK2+4,X'0F'    SET SIGN\n         MVC   H66AM,C#AM          SET TO 'AM'\n         CP    EXITWRK2(5),P#12MIL TEST TIME\n         BL    P6670B              BRANCH IF AM\n         MVI   H66AM,C'P'          CHANGE FROM AM TO PM\n         CP    EXITWRK2(5),P#13MIL SEE IF AFTER 1 PM\n         BL    P6670B              YES, DO NOT ADJUST FOR PM\n         SP    EXITWRK2(5),P#12MIL SUBTRACT 12 HOURS\nP6670B   MVC   H66TIME,MASK2       SET EDIT MASK\n         ED    H66TIME,EXITWRK2    EDIT TIME INTO HEADER LINE\n***********************************************************************\n*        SYSOUT DATE (DD MMM YY)                                      *\n***********************************************************************\n         ST    R1,EXITWRK3+4       SAVE DATE\n         MVC   SAVETBL(48),YEARTBL SAVE A COPY OF DAY TABLE FOR UPDATE\n         TM    EXITWRK3+5,X'01'    IT THIS AN ODD YEAR\n         BO    P6670C              YES, CANNOT BE LEAP YEAR\n         TM    EXITWRK3+5,X'12'    MAGIC LEAP YEAR MASK\n         BM    P6670C              MIXED, CANNOT BE LEAP YEAR\n         MVI   FEB,29              CHANGE FEB TO 29 DAYS\nP6670C   MVC   H66DATE+6(3),MASK3  MOVE EDIT PATTERN\n         ED    H66DATE+7(3),EXITWRK3+5    EDIT THE YEAR (YY) TO HDR\n         MVC   EXITWRK3(6),$ZEROS  CLEAR ALL DATE EXCEPT JULIAN DAY\n         CVB   R1,EXITWRK3         CONVERT TO BINARY DAY\n         LA    R6,SAVETBL-4        LOAD ADDRESS OF DATE TABLE\n         SLR   R0,R0               CLEAR FOR IC\nP6670D   SLR   R1,R0               SUBTRACT DAY/MONTH FROM TOTAL\n         LA    R6,4(,R6)           INCREMENT TO NEXT DATE ENTRY\n         IC    R0,0(,R6)           LOAD NUMBER OF DAYS IN THAT MONTH\n         CLR   R0,R1               SEE IF ONLY PARTIAL MONTH REMAINDING\n         BL    P6670D              NO, LOOP\n         CVD   R1,EXITWRK3         CONVERT TO DECIMAL DAY\n         MVI   H66DATE-1,C' '      CLEAR 1ST BYTE OF AREA\n         UNPK  H66DATE(2),EXITWRK3+6(2) PLACE DAY (DD)\n         OI    H66DATE+1,X'F0'             INTO PMESSAGE\n         MVI   H66DATE+2,C' '      INSERT DELIMITER\n         MVC   H66DATE+3(3),1(R6)  MOVE EBCDIC MONTH (MMM)\n***********************************************************************\n*        WRITE SEPARATOR RECORD                                       *\n***********************************************************************\n         LA    R0,LR6670#1         LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF EJECT COMMAND\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         MVC   HDR(2),PAGEJECT     MOVE EJECT COMMAND TO BUFFER\n         LA    R0,2                LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF EJECT COMMAND\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         B     EXIT                DONE, GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                           E X I T                                   *\n*                                                                     *\n*             RETURN CODE OF 8 TELLS JES2 TO PRODUCE ANY USER         *\n*             SEPARATOR THAT HAS BEEN CREATED AND TO SUPPRESS         *\n*             THE STANDARD SEPARATOR.                                 *\n*                                                                     *\n***********************************************************************\nEXIT     $FREEBUF (R4)             FREE FIRST WORK BUFFER\n         $FREEBUF (R8)             FREE SECOND WORK BUFFER\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\nTRTX     EQU   *-240\n         DC    C'0123456789ABCDEF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*                           P R I N T                                 *\n*                                                                     *\n*        WRITE THE OUTPUT LINE DEFINED AT HDR.  REPEAT THE LINE       *\n*        BY THE NUMBER OF TIMES INDICATED BY THE VALUE IN REGISTER    *\n*        1 ON ENTRY.  THE LENGTH OF THE PRINT LINE IS INDICATED       *\n*        BY THE FIRST BYTE OF HDR.  THE ACTUAL DATA STARTS AT HDR+1.  *\n*                                                                     *\n***********************************************************************\nPRINT    LTR   R6,R1               SAVE LINE COUNT\n         BNPR  R7                  ZERO OR NEGATIVE, GET OUT\nPRINTLP  SLR   R0,R0               CLEAR REG 0 FOR IC\n         IC    R0,HDR              LOAD LINE LENGTH\n         LA    R1,HDR+1            LOAD ADDRESS OF TRUE LINE\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES\n         BCT   R6,PRINTLP          LOOP UNTIL DONE\n         BR    R7                  RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS USED BY THIS JES2 EXIT                             *\n*                                                                     *\n***********************************************************************\nYEARTBL  DC    AL1(31),C'JAN',AL1(28),C'FEB'   JULIAN DATE\n         DC    AL1(31),C'MAR',AL1(30),C'APR'       TO\n         DC    AL1(31),C'MAY',AL1(30),C'JUN'  DAY AND MONTH\n         DC    AL1(31),C'JUL',AL1(31),C'AUG'    CONVERSION\n         DC    AL1(30),C'SEP',AL1(31),C'OCT'      TABLE\n         DC    AL1(30),C'NOV',AL1(99),C'DEC'\n         SPACE 3\nH#1      DC    H'1'                HALFWORD CONSTANT '1'\nH#4      DC    H'4'                HALFWORD CONSTANT '4'\nH#8      DC    H'8'                HALFWORD CONSTANT '8'\nH#14     DC    H'14'               HALFWORD CONSTANT '14\nH#15     DC    H'15'               HALFWORD CONSTANT '15\nH#16     DC    H'16'               HALFWORD CONSTANT '16\nH#31     DC    H'31'               HALFWORD CONSTANT '31'\nH#32     DC    H'32'               HALFWORD CONSTANT '32'\nC#LOCAL  DC    CL8'LOCAL'          CHARACTER CONSTANT 'LOCAL   '\nC#ASTER  DC    CL2'* '             CHARACTER CONSTANT '* '\nC#SYS    DC    CL3'SYS'            CHARACTER CONSTANT 'SYS'\nC#ROOM   DC    CL4'ROOM'           CHARACTER CONSTANT 'ROOM'\nC#AM     DC    CL2'AM'             CHARACTER CONSTANT 'AM'\nC#START  DC    CL5'START'          CHARACTER CONSTANT 'START'\nC#CONT   DC    CL5'CONT '          CHARACTER CONSTANT 'CONT '\nC#END    DC    CL5'END  '          CHARACTER CONSTANT 'END  '\nC#STC    DC    CL20'TECH SUP'      CHARACTER CONSTANT 'TECH SUP'\nC#TSU    DC    CL20'TSO USER'      CHARACTER CONSTANT 'TSO USER'\nP#12MIL  DC    PL5'12000000'       PACKED CONSTANT FOR TIME 12.00.00.00\nP#13MIL  DC    PL5'13000000'       PACKED CONSTANT FOR TIME 13.00.00.00\nPRINTR6  DC    CL8'PRINTR6'        CHARACTER CONSTANT 'PRINTR6'\nPRINTR7  DC    CL8'PRINTR7'        CHARACTER CONSTANT 'PRINTR7'\nPRINTR8  DC    CL8'PRINTR8'        CHARACTER CONSTANT 'PRINTR8'\nPRINTR9  DC    CL8'PRINTR9'        CHARACTER CONSTANT 'PRINTR9'\nPRINTR10 DC    CL8'PRINTR10'       CHARACTER CONSTANT 'PRINTR10'\nRMT1PR1  DC    CL8'R1.PR1  '       CHARACTER CONSTANT 'R1.PR1  '\nBLANKS   DC    CL20' '             STRING OF 20 BLANKS\nHEXZERO  DC    8X'00'              STRING OF  8 HEXZEROS\nPAGEJECT DC    X'8B40'             PRINTER SKIP TO CHANNEL 1 COMMAND\nPUNBLANK DC    X'0140'             PUNCH BLANK CARD INTO POCKET 1\nMASK1    DC    X'402120202020'     EDIT MASK\nMASK2    DC    X'402021204B20204B2020' EDIT MASK\nMASK3    DC    X'402120'           EDIT MASK\nMASK4    DC    X'21204B20204B2020' EDIT MASK\nKOMRCD1  DS    0H\n         DC    X'01'\n         DC    X'4163FF'\n         DC    CL20'12013335162528141116'   SYSTEM\n         DC    CL20'20101020503100415'      FCB PART 1\n         DC    CL20'20520062507300835'      FCB PART 2\n         DC    CL20'21040114512500959'      FCB PART 3\n         DC    CL20'H10001  Y'              SEQUENCE NUMBER\n         DC    CL20'G164064B'               GRID\n         DC    X'FC10'                      CONTINUE\nLKOMRCD1 EQU   *-KOMRCD1\nKOMRCD2  DS    0H\n         DC    X'01'\n         DC    X'4163FF'\n         DC    CL20'B108013L  JJJJJJJJ  '   JOBNAME\n         DC    CL20'B210053T  PPPPPPPPPP'   PROGRAMMER NAME PART 1\n         DC    CL20'B310083T1 PPPPPPPPPP'   PROGRAMMER NAME PART 2\n         DC    CL20'B408053B  IIIIIIII  '   JOB ID\n         DC    CL20'B504103B1 RRRR      '   ROOM NUMBER\n         DC    CL20'B609123T2 DDDDDDDDD '   DATE\n         DC    X'FC10'                      CONTINUE\nLKOMRCD2 EQU   *-KOMRCD2\nJNAME    EQU   HDR+14,8\nPNAME1   EQU   HDR+34,10\nPNAME2   EQU   HDR+54,10\nJOBID    EQU   HDR+74,8\nROOMNBR  EQU   HDR+94,4\nDATE     EQU   HDR+114,9\nKOMRCD3  DS    0H\n         DC    X'01'\n         DC    X'4163FF'\n         DC    CL20'B708123B2 TTTTTTTT  '   TIME\n         DC    CL20'B803163T  S$$$      '   SEQ # SPECIFICATION\n         DC    CL20'B9041282  DATE      '   DATE TITLE\n         DC    CL20'BA041284  TIME      '   TIME TITLE\n         DC    X'1040'                      END\nLKOMRCD3 EQU   *-KOMRCD3\nTIME     EQU   HDR+14,8\nKOMRCD4  DS    0H\n         DC    X'01'\n         DC    X'4163FF'\n         DC    CL20'12013335162528141116'   SYSTEM\n         DC    CL20'20101020503100415'      FCB PART 1\n         DC    CL20'20520062507300835'      FCB PART 2\n         DC    CL20'21040114512500959'      FCB PART 3\n         DC    CL20'ASM0013???'             ELIMINATE BLANK FICHE\n         DC    X'1040'                      END\nLKOMRCD4 EQU   *-KOMRCD4\nKOMRCD5  DS    0H\n         DC    X'01'\n         DC    X'4163FF'\n         DC    CL20'12013335162528141116'   SYSTEM\n         DC    CL20'20101020503100415'      FCB PART 1\n         DC    CL20'20520062507300835'      FCB PART 2\n         DC    CL20'21040114512500959'      FCB PART 3\n         DC    X'1040'                      END\nLKOMRCD5 EQU   *-KOMRCD5\nARISR1   DS    0H\n         DC    X'C9'\n         DC    X'0D4040'\n         DC    CL10'SJOB LOAD '             START JOB COMMAND\n         DC    CL6'       '                 ARIS JOB NAME\n         DC    CL2'  '\nLARISR1 EQU    *-ARISR1\nARISR2   DS    0H\n         DC    X'C9'\n         DC    X'0D4040'\n         DC    CL10'EJOB'                   END JOB COMMAND\nLARISR2 EQU    *-ARISR2\nR6670#1  DS    0H\n         DC    X'09'\n         DC    CL4'JOB '\n         DC    CL8' '\n         DC    CL2' ('\n         DC    CL8' '\n         DC    CL2') '\n         DC    CL4' '\n         DC    C' '\n         DC    CL20' '\n         DC    C' '\n         DC    CL09' '\n         DC    C' '\n         DC    CL13' '\nLR6670#1 EQU   *-R6670#1\n         AIF   ('&XJCF' NE 'YES').XJCF#4\nDJDECRD  DC    X'01'\n         DC    C'$X9700$DJDE ASSIGN=(1,1),'\nLDJDECRD EQU   *-DJDECRD\n.XJCF#4 ANOP\n         EJECT\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JESEXIT3": {"ttr": 4865, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 USER NETWORK JOB HEADER CREATION ROUTINE'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 1.3.4  OR SP 1.3.6                      *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM WILL CREATE A USER NETWORK JOB        *\n*        HEADER RECORD FOR EVERY JOB.  THIS HEADER RECORD IS          *\n*        DESIGNED PRIMARILY TO CONTAIN THE JOB ACCOUNTING             *\n*        INFORMATION FOR A JOB SINCE IT IS TOO LARGE TO BE            *\n*        CONTAINED IN THE FOUR BYTE FIELD PROVIDED BY JES2.           *\n*        ROOM WILL BE LEFT IN THE HEADER RECORD FOR FUTURE USE.       *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST COMPUTER SERVICES                      *\n*                        420 BRUSHY MOUNTAIN ROAD                     *\n*                        WILKESBORO, N.C. 28697                       *\n*                        (919) 651-5414                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*            M A C R O S   U S E D   I N   J E S X I T 1 7            *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $ENTRY       SYS1.HASPSRC                               *\n*        04)  $FREEBUF     SYS1.HASPSRC                               *\n*        05)  $GETBUF      SYS1.HASPSRC                               *\n*        06)  $HASPEQU     SYS1.HASPSRC                               *\n*        07)  $HASPGBL     SYS1.HASPSRC                               *\n*        08)  $HCT         SYS1.HASPSRC                               *\n*        09)  $JCT         SYS1.HASPSRC                               *\n*        10)  $JQE         SYS1.HASPSRC                               *\n*        11)  $MIT         SYS1.HASPSRC                               *\n*        12)  $MODEND      SYS1.HASPSRC                               *\n*        13)  $MODULE      SYS1.HASPSRC                               *\n*        14)  $MSG         SYS1.HASPSRC                               *\n*        15)  $NHD         SYS1.HASPSRC                               *\n*        16)  $PCE         SYS1.HASPSRC                               *\n*        17)  $SAVE        SYS1.HASPSRC                               *\n*        18)  $RETURN      SYS1.HASPSRC                               *\n*        19)  $WTO         SYS1.HASPSRC                               *\n*        20)  IFGRPL       SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       1K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJESEXIT3 $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 USER NETWORK JOB HEADER CREATION ROUTINE',  X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               RPL,                GENERATE MVS  RPL DSECT             X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HCT,               GENERATE HASP SVT DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $NHD,               GENERATE HASP NDH DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $PCE                GENERATE HASP PCE DSECT\n         TITLE 'JES2 USER NETWORK JOB HEADER CREATION ROUTINE'\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREA                                            *\n*                                                                     *\n***********************************************************************\nWORKAREA DSECT\n         DS    CL102               ***** RESERVED BY JES2 *****\nTRLENGTH DS    H                   LENGTH OF TRAILER RECORDS\nSOFLNGTH DS    H                   LENGTH OF SPOOL OFFLOAD FAC SECTION\nSOFADDR  DS    F                   ORIGINAL ADDR OF SOF SECTION\nSAVETRL  DS    0F\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        FCS USER HEADER MAPPING DSECT                                *\n*                                                                     *\n***********************************************************************\nFCSUHDR  DSECT\nFCSUHDRL DS    H                   LENGTH OF USER HEADER\nFCSUHTYP DS    X                   TYPE OF HEADER\nFCSUHMOD DS    X                   MODIFIER VALUE\nFCSUHID  DS    CL4                 USER HEADER IDENTIFIER\nFCSUHACL DS    H                   LENGTH OF ACCOUNTING FIELD\nFCSUHACT DS    CL20                ACCOUNTING FIELD\n         DS    CL40                RESERVED\nFCSUHDRS EQU   *-FCSUHDR           LENGTH OF USER HEADER\nJESEXIT3 CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n         PRINT OFF\n         AIF   ('&VERSION' NE 'SP 1.3.6' AND                           X\n               '&VERSION' NE 'SP 2.1.5').V134\n         PRINT ON\n***********************************************************************\n*                                                                     *\n*        EQUATED VARIABLES FOR SP 1.3.6 OR SP 2.1.5                   *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         USING JCT,R10             SET ADDRESSABILITY TO JCT\n         SPACE 3\n         AGO   .VEREND\n.V134    ANOP\n         PRINT ON\n***********************************************************************\n*                                                                     *\n*        EQUATED VARIABLES FOR SP 1.3.4                               *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nNJTO$MOD EQU   X'80'               JES2 RECORD SUBTYPE FOR SOF SECTION\n         SPACE 3\n.VEREND  ANOP\n         PRINT ON\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nEXIT3    $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLERS REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R0  - LENGTH OF ACCOUNTING FIELD.                            *\n*        R1  - THE ADDRESS OF A 3 WORD PARAMETER LIST                 *\n*              WORD 1 - ADDRESS OF THE ACCOUNTING FIELD (JCTWORK)     *\n*              WORD 2 - ADDRESS OF THE EXIT FLAG BYTE IN THE PCE      *\n*              WORD 3 - ADDRESS OF THE JCTXWRK FIELD IN THE JCT       *\n*        R10 - ADDRESS OF THE JCT                                     *\n*        R11 - ADDRESS OF THE HCT                                     *\n*        R13 - ADDRESS OF THE PCE                                     *\n*        R14 - RETURN ADDRESS                                         *\n*        R15 - ENTRY ADDRESS                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*        SAVE INPUT REGISTERS\n***********************************************************************\n         LR    R7,R0              SAVE REG 0\n         LR    R8,R1              SAVE REG 1\n***********************************************************************\n*        GET A WORK AREA FOR THE EXIT                                 *\n***********************************************************************\n         SPACE 3\n         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R9,R1               SAVE WORK AREA ADDRESS\n         USING WORKAREA,R9         SET ADDRESSABILITY TO BUFFER\n***********************************************************************\n*        SEE IF ROOM FOR USER AREA IN JCT                             *\n***********************************************************************\n         SPACE 3\n         LA    R4,JCTNJHDR         POINT TO START OF NETWORK HEADERS\n         LH    R5,0(R4)            LOAD LENGTH OF NETWORK HEADERS\n         AR    R4,R5               POINT TO START OF NETWORK TRAILERS\n         AH    R5,0(R4)            ADD LEN OF TRAILERS TO LEN OF HEAD\n         LA    R6,FCSUHDRS         LOAD LENGTH OF USER HEADER\n         AR    R6,R5               GET NEW LEN OF HEADERS AND TRAILERS\n         LA    R4,JCTNJHDR         GET LENGTH OF\n         SR    R4,R10                   JCT BASE AREA\n         AR    R4,R6               GET NEW LENGTH OF JCT\n         CH    R4,$BUFSIZE         SEE IF EXCEEDS MAXIMUM\n         BH    ERROR1              YES, ERROR\n***********************************************************************\n*                                                                     *\n*        SEARCH FOR THE SPOOL OFFLOAD HEADER (IF ONE)                 *\n*                                                                     *\n*        JES2 SP 1.3.6 AND SP 2.1.5 HAVE A SPOOL OFFLOAD HEADER       *\n*        SECTION WHICH MUST BE THE LAST SECTION OF THE NETWORK        *\n*        HEADERS.                                                     *\n*                                                                     *\n***********************************************************************\nFSOF01   LA    R2,JCTNJHDR         POINT TO START OF NETWORK HEADERS\n         USING NJH2,R2             SET ADDRESSABILITY TO JES2 HEADER\n         XC    SOFLNGTH,SOFLNGTH   ZERO THE LENGTH OF THE SOF HEADER\n         XC    SOFADDR,SOFADDR     ZERO THE ADDRESS OF THE SOF HEADER\n         LH    R3,0(R2)            LOAD LENGTH OF NETWORK HEADERS\n         AR    R3,R2               GET END ADDRESS OF NETWORK HEADERS\n         LA    R2,4(R2)            LOAD START ADDRESS OF FIRST HEADER\nFSOF02   CR    R2,R3               SEE IF END OF HEADERS\n         BNL   FSOFEND             YES, GET OUT\n         CLI   NJH2TYPE,NTYPJES2   SEE IF JES2 SECTION\n         BNE   FSOF03              NO, GO GET NEXT HEADER\n         CLI   NJH2MOD,NJTO$MOD    SEE IF SOF SUB TYPE\n         BE    FSOF04              YES, BRANCH\nFSOF03   AH    R2,0(R2)            POINT TO NEXT HEADER\n         B     FSOF02              LOOP\nFSOF04   MVC   SOFLNGTH,0(R2)      SAVE LENGTH OF SOF HEADER\n         ST    R2,SOFADDR          SAVE ADDRESS OF THE SOF HEADER\nFSOFEND  DS    0H\n***********************************************************************\n*        SAVE SOF SECTION AND NETWORK TRAILER RECORDS IN WORK AREA    *\n***********************************************************************\n         LA    R2,JCTNJHDR         POINT TO START OF NETWORK HEADERS\n         LH    R3,0(R2)            LOAD LENGTH OF NETWORK HEADERS\n         AR    R2,R3               POINT TO START OF NETWORK TRAILERS\n         LH    R3,0(R2)            LOAD LENGTH OF TRAILERS\n         AH    R3,SOFLNGTH         ADD LENGTH OF SOF SECTION\n         OC    SOFADDR,SOFADDR     SEE IF SOF SECTION FOUND\n         BZ    NOSOF1              NO, BRANCH\n         L     R2,SOFADDR          YES, USE ADDR OF SOF AS START\nNOSOF1   LA    R4,SAVETRL          LOAD ADDRESS OF WORK AREA\n         LR    R5,R3               SET LENGTH OF WORK AREA\n         STH   R5,TRLENGTH         SAVE LENGTH\n         MVCL  R4,R2               SAVE TRAILER\n***********************************************************************\n*        CREATE USER HEADER RECORD IN VACATED AREA                    *\n***********************************************************************\n         LA    R1,JCTNJHDR         POINT TO START OF NETWORK HEADERS\n         LH    R3,0(R1)            LOAD LENGTH OF NETWORK HEADERS\n         AR    R1,R3               POINT PAST OLD HEADERS\n         OC    SOFADDR,SOFADDR     SEE IF SOF SECTION FOUND\n         BZ    NOSOF2              NO, BRANCH\n         L     R1,SOFADDR          YES, USE ADDR OF SOF AS START\n         USING FCSUHDR,R1          SET ADDRESSABILITY TO USER HDR RECD\nNOSOF2   XC    FCSUHDR(FCSUHDRS),FCSUHDR CLEAR USER HDR RECORD\n         LA    R4,FCSUHDRS         LOAD LENGTH OF USER HEADER RECORD\n         STH   R4,FCSUHDRL         SAVE IN USER HEADER RECORD\n         MVI   FCSUHTYP,NTYPUSER   SET TO USER HEADER TYPE\n         MVI   FCSUHMOD,NJHU$MOD   SET MODIFIER VALUE\n         MVC   FCSUHID,=CL4'FCSH'  SET USER HEADER IDENTIFIER\n***********************************************************************\n*        RESET LENGTH FIELD AND MOVE TRAILER RECORDS BACK             *\n***********************************************************************\n         LA    R2,JCTNJHDR         POINT TO START OF NETWORK HEADERS\n         LH    R3,0(R2)            LOAD OLD LENGTH OF NETWORK HEADERS\n         LA    R3,FCSUHDRS(R3)     ADD LENGTH OF USER HEADER TO OLD LEN\n         STH   R3,0(R2)            SAVE NEW LENGTH OF NETWORK HEADERS\n         AR    R2,R3               POINT PAST NETWORK HEADERS\n         OC    SOFADDR,SOFADDR     SEE IF SOF SECTION FOUND\n         BZ    NOSOF3              NO, BRANCH\n         L     R2,SOFADDR          YES, USE ADDR OF SOF AS START\n         LA    R2,FCSUHDRS(R2)     ADD LENGTH OF USER HEADER TO START\nNOSOF3   LH    R3,TRLENGTH         SET LENGTH OF NETWORK TRAILERS\n         LA    R4,SAVETRL          LOAD ADDRESS OF WORK AREA\n         LR    R5,R3               SET LENGTH OF WORK AREA\n         MVCL  R2,R4               RESTORE TRAILER\n***********************************************************************\n*        MOVE FIRST JOB ACCOUNTING FIELD TO USER HEADER RECORD        *\n***********************************************************************\nSETACCT  LTR   R7,R7               TEST LENGTH OF ACCOUNTING FIELD\n         BZ    EXIT                ZERO, LEAVE IT ALONE\n         L     R2,0(R8)            LOAD ADDRESS OF ACCOUNTING AREA\n         LR    R0,R2               SAVE START OF FIELD ADDRESS\n         SLR   R3,R3               SET 1ST ACCOUNTING FIELD LENGTH TO 0\n         CLI   0(R2),C'('          NORMAL START OF ACCOUNTING FIELD\n         BE    SETACCT1            YES, BRANCH\n         CLI   0(R2),C''''         SEE IF QUOTED FIELD\n         BE    SETACCT3            YES, BRANCH\n         B     SETACCT2            GO PROCESS AT START OF FIELD\nSETACCT1 LA    R2,1(R2)            INCREMENT PAST '('\n         LR    R0,R2               SAVE START OF FIELD ADDRESS\n         BCTR  R7,0                REDUCE LENGTH OF ACCT FIELD BY 1\n         LTR   R7,R7               TEST LENGTH\n         BZ    EXIT                ZERO, NO REAL ACCT\n         CLI   0(R2),C''''         SEE IF QUOTED FIELD\n         BE    SETACCT3            YES, BRANCH\nSETACCT2 CLI   0(R2),C','          END OF FIELD\n         BE    SETACCT6            YES, BRANCH\n         CLI   0(R2),C')'          END OF FIELD\n         BE    SETACCT6            YES, BRANCH\n         CLI   0(R2),C' '          END OF FIELD\n         BE    SETACCT6            YES, BRANCH\n         LA    R3,1(R3)            ADD 1 TO LENGTH COUNTER\n         LA    R2,1(R2)            INCREMENT TO NEXT POSITION OF ACCT\n         BCT   R7,SETACCT2         LOOP\n         B     SETACCT6            GO SAVE ACCT\nSETACCT3 LA    R2,1(R2)            INCREMENT PAST QUOTE\n         LR    R0,R2               SAVE START OF FIELD ADDRESS\n         BCTR  R7,0                REDUCE LENGTH OF ACCT FIELD BY 1\n         LTR   R7,R7               TEST LENGTH\n         BZ    EXIT                ZERO, NO REAL PARM\nSETACCT4 CLC   0(2,R2),=C''''''    DOUBLE QUOTE?\n         BE    SETACCT5            YES, BRANCH\n         CLI   0(R2),C''''         END OF FIELD\n         BE    SETACCT6            YES, BRANCH\n         LA    R3,1(R3)            ADD 1 TO LENGTH COUNTER\n         LA    R2,1(R2)            INCREMENT TO NEXT POSITION OF ACCT\n         BCT   R7,SETACCT4         LOOP\n         B     SETACCT6            GO SAVE ACCT FIELD\nSETACCT5 LA    R3,2(R3)            ADD 2 TO LENGTH COUNTER\n         LA    R2,2(R2)            INCREMENT TO NEXT POSITION OF ACCT\n         BCTR  R7,0                DECREMENT LOOP COUNTER 1 EXTRA TIME\n         BCT   R7,SETACCT4         LOOP\nSETACCT6 LR    R2,R0               RESET START OF ACCT ADDRESS\n         LTR   R3,R3               TEST ACCT LENGTH\n         BZ    EXIT                ZERO, NO REAL ACCT\n         CH    R3,=H'20'           SEE IF ACCT LENGTH GT 20\n         BNH   SETACCT7            NO, BRANCH\n         LH    R3,=H'20'           SET TO MAX LENGTH\nSETACCT7 STH   R3,FCSUHACL         SAVE LENGTH OF PARM\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MVACCT           MOVE ACCOUNTING FIELD TO USER HEADER\n         B     EXIT                GET OUT\nMVACCT   MVC   FCSUHACT(0),0(R2)   **** EXECUTE ONLY ****\n         DROP  R1                  DROP ADDRESSABILITY TO USER HDR RECD\n***********************************************************************\n*                                                                     *\n*        FREE THE WORK AREA AND RETURN WITH THE APPROPRIATE           *\n*        RETURN CODE.                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nEXIT     $FREEBUF (R9)             FREE THE BUFFER\n         B     RETURN0             GET OUT\n         DROP  R9                  DROP ADDRESSABILITY TO THE BUFFER\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - CANCEL THE JOB BUT PRODUCT THE OUTPUT LISTING      *\n*        RC = 12 - PURGE THE JOB WITH NO OUTPUT                       *\n*                                                                     *\n***********************************************************************\nRETURN0  DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n***********************************************************************\n*                                                                     *\n*                      ERROR ROUTINES                                 *\n*                                                                     *\n***********************************************************************\n               SPACE 3\nERROR1   LA    R1,MSG1             LOAD ADDRESS OF MESSAGE\n         LA    R0,L'MSG1           LOAD LENGTH OF MESSAGE\n         $WTO  (R1),(R0),JOB=NO,CMB=NO,WAIT=NO,ROUTE=$MAIN,UCM=NO\n               SPACE 3\n         B     EXIT                GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                   CONSTANTS USED IN THIS EXIT                       *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LTORG\n         SPACE 3\nMSG1     $MSG  999,'NO ROOM IN JCT TO ADD NETWORK USER HEADER'\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JESEXIT5": {"ttr": 4872, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 EXIT 5 COMMAND PREPROCESSOR EXIT'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 1.3.4  OR SP 1.3.6                      *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED TO SCAN ALL COMMANDS      *\n*        TO JES2 TO PREVENT SEVERAL COMMANDS AS WELL AS ELIMINATE     *\n*        THE USE OF JOB RANGES ON MANY COMMANDS.  THE USE OF          *\n*        JOB RANGES EITHER PRODUCES AN EXCESSIVE NUMBER OF CONSOLE    *\n*        MESSAGES OR PERFORMS AN UNINTENTIONAL OPERATION ON TOO       *\n*        MANY JOBS.  AN EXAMPLE OF THIS IS THE USE OF $PJ1-9999       *\n*        WHEN THE OPERATOR INTENDED TO ENTER $DJ1-9999.  THE          *\n*        RESTRICTION OF THE USE OF THE RANGE OPERAND CAUSES LESS      *\n*        PROBLEMS THAN THE ACCIDENTAL MISUSE OT THE COMMAND.          *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST COMPUTER SERVICES                      *\n*                        420 BRUSHY MOUNTAIN ROAD                     *\n*                        WILKESBORO, N.C. 28697                       *\n*                        (919) 651-5414                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J E S E X I T 1          *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $COMWORK     SYS1.HASPSRC                               *\n*        04)  $ENTRY       SYS1.HASPSRC                               *\n*        05)  $HASPEQU     SYS1.HASPSRC                               *\n*        06)  $HASPGBL     SYS1.HASPSRC                               *\n*        07)  $HCT         SYS1.HASPSRC                               *\n*        08)  $JCT         SYS1.HASPSRC                               *\n*        09)  $JOE         SYS1.HASPSRC                               *\n*        10)  $JQE         SYS1.HASPSRC                               *\n*        11)  $MIT         SYS1.HASPSRC                               *\n*        12)  $MODEND      SYS1.HASPSRC                               *\n*        13)  $MODULE      SYS1.HASPSRC                               *\n*        14)  $PCE         SYS1.HASPSRC                               *\n*        15)  $RETURN      SYS1.HASPSRC                               *\n*        16)  $SAVE        SYS1.HASPSRC                               *\n*        17)  $STORE       SYS1.HASPSRC                               *\n*        18)  IAZRESPA     SYS1.AMODGEN                               *\n*        19)  IFGRPL       SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       1K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJESEXIT5 $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 EXIT 5 COMMAND PREPROCESSOR EXIT',          X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               RESPA,              GENERATE MVS  RESPA DSECT           X\n               RPL,                GENERATE MVS  IFGRPL DSECT          X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $MIT                GENERATE HASP MIT DSECT\n         TITLE 'JES2 EXIT 5 COMMAND PREPROCESSOR EXIT'\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nEXIT5    $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       - ADDRESS OF THE CURRENT OPERAND                    *\n*        R6       - INCREMENT VALUE OF 4                              *\n*        R7       - ADDRESS OF THE LAST OPERAND                       *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        COMPARE THE FIRST 2 CHARACTERS IN THE COMMAND FOR AN         *\n*        ENTRY IN THE VALIDATION TABLE.                               *\n*                                                                     *\n***********************************************************************\n         LA    R2,COMTABLE         LOAD ADDRESS OF THE COMMAND TABLE\nCOMLOOP  CLI   0(R2),X'FF'         END OF TABLE?\n         BE    EXIT0               YES, BRANCH TO COMMAND OK EXIT\n         CLC   0(2,R2),COMVERB     COMPARE TABLE TO ENTRY COMMAND\n         BE    CKACTION            YES, GO CHECK FOR ACTION TO TAKE\n         LA    R2,4(,R2)           INCREMENT TO NEXT TABLE ENTRY\n         B     COMLOOP             LOOP UNTIL DONE\n***********************************************************************\n*                                                                     *\n*        BRANCH TO THE INDICATED ROUTINE FOR THE COMMAND USING        *\n*        THE OFFSET IN THE COMMAND ENTRY IN A BRANCH TABLE.           *\n*                                                                     *\n***********************************************************************\nCKACTION LH    R15,2(R2)           LOAD OFFSET FROM COMMAND TABLE ENTRY\n         B     BTABLE(R15)         BRANCH TO ROUTINE\nBTABLE   B     EXIT0               00 - NOT USED\n         B     ROUT$AJ             04 - $AJ\n         B     ROUT$CJ             08 - $CJ\n         B     ROUT$DJ             12 - $DJ\n         B     ROUT$EJ             16 - $EJ\n         B     ROUT$HJ             20 - $HJ\n         B     ROUT$LJ             24 - $LJ\n         B     ROUT$OJ             28 - $OJ\n         B     ROUT$PJ             32 - $PJ\n         B     ROUT$TJ             36 - $TJ\n         B     ERROR1              40 - $TC\n         B     ERROR1              44 - $TM\n         B     ROUT$DN             48 - $DN\n         B     ROUT$PQ             52 - $PQ\n         B     EXIT0               56 - NOT USED\n         B     EXIT0               60 - NOT USED\n         B     EXIT0               64 - NOT USED\n         B     EXIT0               68 - NOT USED\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $AJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$AJ  LA    R1,COMVERB+2        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         CH    R15,MAX$AJ          TEST RANGE VALUE\n         BH    ERROR2              EXCEEDS ALLOWABLE RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $CJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$CJ  LA    R1,COMVERB+2        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         CH    R15,MAX$CJ          TEST RANGE VALUE\n         BH    ERROR2              EXCEEDS ALLOWABLE RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $DJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$DJ  LA    R1,COMVERB+2        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         CH    R15,MAX$DJ          TEST RANGE VALUE\n         BH    ERROR2              EXCEEDS ALLOWABLE RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $EJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$EJ  LA    R1,COMVERB+2        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         CH    R15,MAX$EJ          TEST RANGE VALUE\n         BH    ERROR2              EXCEEDS ALLOWABLE RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $HJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$HJ  LA    R1,COMVERB+2        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         CH    R15,MAX$HJ          TEST RANGE VALUE\n         BH    ERROR2              EXCEEDS ALLOWABLE RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $LJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$LJ  LA    R1,COMVERB+2        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         CH    R15,MAX$LJ          TEST RANGE VALUE\n         BH    ERROR2              EXCEEDS ALLOWABLE RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $OJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$OJ  LA    R1,COMVERB+2        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         CH    R15,MAX$OJ          TEST RANGE VALUE\n         BH    ERROR2              EXCEEDS ALLOWABLE RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $PJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$PJ  LA    R1,COMVERB+2        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         CH    R15,MAX$PJ          TEST RANGE VALUE\n         BH    ERROR2              EXCEEDS ALLOWABLE RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $TJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$TJ  LA    R1,COMVERB+2        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         CH    R15,MAX$TJ          TEST RANGE VALUE\n         BH    ERROR2              EXCEEDS ALLOWABLE RANGE, ERROR\nROUT$TJ1 BXH   R5,R6,ROUT$TJ2      GET NEXT OPERAND\n         L     R15,0(R5)           LOAD ADDRESS OF PARAMETER\n         CLC   0(2,R15),C#CEQ      SEE IF CHANGING JOB CLASS\n         BE    ERROR3              YES, ERROR\n         B     ROUT$TJ1            LOOP FOR NEXT OPERAND\nROUT$TJ2 B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $DN COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$DN  CR    R5,R7               SEE IF FIRST OPND SAME AS LAST\n         BE    ERROR4              YES, NO OPERANDS, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $PQ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$PQ  CR    R5,R7               SEE IF FIRST OPND SAME AS LAST\n         BE    ERROR4              YES, NO OPERANDS, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                  E R R O R     R O U T I N E S                      *\n*                                                                     *\n***********************************************************************\nERROR1   MVC   COMMAND(LMSG1),MSG1 MOVE MESSAGE TO PCE WORK AREA\n         LA    R0,LMSG1            SET MESSAGE LENGTH IN REG 0\n         B     EXIT16              GO EXIT ROUTINE\n         SPACE 3\nERROR2   MVC   COMMAND(LMSG2),MSG2 MOVE MESSAGE TO PCE WORK AREA\n         LA    R0,LMSG2            SET MESSAGE LENGTH IN REG 0\n         B     EXIT16              GO EXIT ROUTINE\n         SPACE 3\nERROR3   MVC   COMMAND(LMSG3),MSG3 MOVE MESSAGE TO PCE WORK AREA\n         LA    R0,LMSG3            SET MESSAGE LENGTH IN REG 0\n         B     EXIT16              GO EXIT ROUTINE\n         SPACE 3\nERROR4   MVC   COMMAND(LMSG4),MSG4 MOVE MESSAGE TO PCE WORK AREA\n         LA    R0,LMSG4            SET MESSAGE LENGTH IN REG 0\n         B     EXIT16              GO EXIT ROUTINE\n         SPACE 3\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\nEXIT0    LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nEXIT16   $STORE R0                 SAVE MESSAGE LENGTH\n         LA    R15,16              SET RETURN CODE TO 16\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n***********************************************************************\n*                                                                     *\n*                         C K R A N G E                               *\n*                                                                     *\n*        THIS ROUTINE EXAMINES THE OPERANDS POINTER TO BY REG 1       *\n*        ON ENTRY FOR A RANGE VALUE IE. 1-9999.  IF NOT NUMERIC       *\n*        A VALUE OF ZERO WILL BE PASSED BACK IN REGISTER 1.  IF       *\n*        NOT A RANGE, A VALUE OF ONE WILL BE PASSED IN REGISTER       *\n*        1.  IF IT IS A RANGE, THE NUMBER VALUE OF THE SPAN OF        *\n*        NUMBERS WILL BE PASSED IN REGISTER 1.                        *\n*                                                                     *\n*        RETURN WILL BE MADE TO REGISTER 4 .                          *\n*                                                                     *\n***********************************************************************\nCKRANGE  LR    R2,R1               SAVE START OF VALUE1\nCKRANGE1 CLI   0(R1),C'0'          SEE IF NUMERIC\n         BL    CKRANGE2            NO, INVALID, OR END OF FIELDS\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHARACTER\n         B     CKRANGE1            LOOP\nCKRANGE2 CLI   0(R1),C'-'          IS THIS A JOB RANGE\n         BNE   CKRANGE6            NO, BRANCH\n         LR    R3,R1               SAVE LOCATION POINTER\n         SR    R3,R2               GET LENGTH OF FIELD\n         BZ    CKRANGE5            ZERO, ZERO LENGTH\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,PACKIT           PACK \"JOB\" NUMBER\n         CVB   R15,$DOUBLE         CONVERT TO BINARY\n         ST    R15,PCEUSER0        SAVE \"JOB\" NUMBER\n         LA    R1,1(,R1)           POINT PAST '-'\n         LR    R2,R1               SAVE START OF VALUE2\nCKRANGE3 CLI   0(R1),C'0'          SEE IF NUMERIC\n         BL    CKRANGE4            NO, INVALID, OR END OF FIELDS\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHARACTER\n         B     CKRANGE3            LOOP\nCKRANGE4 LR    R3,R1               SAVE LOCATION POINTER\n         SR    R3,R2               GET LENGTH OF FIELD\n         BZ    CKRANGE5            ZERO, ZERO LENGTH\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,PACKIT           PACK \"JOB\" NUMBER\n         CVB   R15,$DOUBLE         CONVERT TO BINARY\n         S     R15,PCEUSER0        SUBTRACT START FROM END \"JOB\" NBR\n         BM    CKRANGE5            NEGATIVE RANGE, INVALID\n         LA    R15,1(,R15)         ADD 1 FOR TRUE RANGE VALUE\n         B     CKRANGE7            GO EXIT THIS ROUTINE\nCKRANGE5 LA    R15,0               SET RANGE VALUE TO ZERO FOR ERROR\n         B     CKRANGE7            GO EXIT THIS ROUTINE\nCKRANGE6 LA    R15,1               SET RANGE VALUE TO 1\nCKRANGE7 BR    R4                  RETURN TO CALLER\n         SPACE\nPACKIT   PACK  $DOUBLE,0(0,R2)     **** EXECUTE ONLY ****\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS USED BY THIS JES2 EXIT                             *\n*                                                                     *\n***********************************************************************\nC#CEQ    DC    CL2'C='             CHARACTER CONSTANT 'C='\nMSG1     DC    C'COMMAND NOT ALLOWED IN THIS INSTALLATION'\nLMSG1    EQU   *-MSG1\nMSG2     DC    C'JOB RANGE NOT ALLOWED FOR THIS COMMAND'\nLMSG2    EQU   *-MSG2\nMSG3     DC    C'JOB CLASS MAY NOT BE CHANGED'\nLMSG3    EQU   *-MSG3\nMSG4     DC    C'VALID OPERANDS ARE REQUIRED FOR THIS COMMAND'\nLMSG4    EQU   *-MSG4\nMAX$AJ   DC    H'1'                MAXIMUM \"JOB\" RANGE FOR $AJ\nMAX$CJ   DC    H'1'                MAXIMUM \"JOB\" RANGE FOR $CJ\nMAX$DJ   DC    H'1'                MAXIMUM \"JOB\" RANGE FOR $DJ\nMAX$EJ   DC    H'1'                MAXIMUM \"JOB\" RANGE FOR $EJ\nMAX$HJ   DC    H'1'                MAXIMUM \"JOB\" RANGE FOR $HJ\nMAX$LJ   DC    H'1'                MAXIMUM \"JOB\" RANGE FOR $LJ\nMAX$OJ   DC    H'1'                MAXIMUM \"JOB\" RANGE FOR $OJ\nMAX$PJ   DC    H'1'                MAXIMUM \"JOB\" RANGE FOR $PJ\nMAX$TJ   DC    H'1'                MAXIMUM \"JOB\" RANGE FOR $TJ\nCOMTABLE DC    CL2'AJ',AL2(4)      $AJ\n         DC    CL2'AS',AL2(4)      $AS\n         DC    CL2'AT',AL2(4)      $AT\n         DC    CL2'CJ',AL2(8)      $CJ\n         DC    CL2'CS',AL2(8)      $CS\n         DC    CL2'CT',AL2(8)      $CT\n         DC    CL2'DJ',AL2(12)     $DJ\n         DC    CL2'DS',AL2(12)     $DS\n         DC    CL2'DT',AL2(12)     $DT\n         DC    CL2'EJ',AL2(16)     $EJ\n         DC    CL2'ES',AL2(16)     $ES\n         DC    CL2'ET',AL2(16)     $ET\n         DC    CL2'HJ',AL2(20)     $HJ\n         DC    CL2'HS',AL2(20)     $HS\n         DC    CL2'HT',AL2(20)     $HT\n         DC    CL2'LJ',AL2(24)     $LJ\n         DC    CL2'LS',AL2(24)     $LS\n         DC    CL2'LT',AL2(24)     $LT\n         DC    CL2'OJ',AL2(28)     $OJ\n         DC    CL2'OS',AL2(28)     $OS\n         DC    CL2'OT',AL2(28)     $OT\n         DC    CL2'PJ',AL2(32)     $PJ\n         DC    CL2'PS',AL2(32)     $PS\n         DC    CL2'PT',AL2(32)     $PT\n         DC    CL2'TJ',AL2(36)     $TJ\n         DC    CL2'TS',AL2(36)     $TS\n         DC    CL2'TT',AL2(36)     $TT\n         DC    CL2'TC',AL2(40)     $TC\n         DC    CL2'TM',AL2(44)     $TM\n         DC    CL2'DN',AL2(48)     $DN\n         DC    CL2'PQ',AL2(52)     $PQ\n         DC    4X'FF'              END OF TABLE\n         EJECT\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JESEXIT6": {"ttr": 5125, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 EXIT 6 INTERNAL TEXT EXIT'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 1.3.4  OR SP 1.3.6                      *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED TO RUN AT CONVERTER       *\n*        TIME TO ENFORCE INSTALLATION JCL STANDARDS AND TO DETERMINE  *\n*        THE APPROPRIATE JOB CLASS BASED ON DEVICE UTILIZATION.       *\n*                                                                     *\n*        VIOLATIONS OF JCL STANDARDS ARE DOCUMENTED BY MESSAGES       *\n*        WRITTEN TO THE JES2 MESSAGE DATA SET FOR THE JOB AND         *\n*        FLAGGED FOR JCL ERROR BY THE USE OF THE JES2 EXIT RETURN     *\n*        CODE TO THE JES2 CONVERTER SUB-TASK.                         *\n*                                                                     *\n*        THIS EXIT USES THE INTERNAL TEXT DATA SET FOR ITS            *\n*        PROCESSING.  JES2 PASSES EACH INTERNAL TEXT STATEMENT        *\n*        TO THIS EXIT FOR EXAMINATION AND/OR MODIFICATION.  THE       *\n*        EXIT WILL MAINTAIN A TABLE OF DATASET NAMES AND DEVICE       *\n*        COUNTS TO BE USED AT END OF PROCESSING FOR DETERMINING       *\n*        JOB CLASS.  THE ACB FOR THE MESSAGE DATA SET IS IN THE       *\n*        PCE WORK AREA FOR 1.3.4 AND IN THE DTE FOR 1.3.6 AND         *\n*        2.1.5 AND CAN BE USED TO ISSUE ERROR MESSAGES TO THE         *\n*        JOB MESSAGE PORTION OF THE LISTING.                          *\n*                                                                     *\n*        ALSO, THE CONVERTER IS A DUMB ANIMAL WHEN IT COMES TO        *\n*        SYNTAX CHECKING.  CHECKING IS MADE FOR KEYWORD VALUES,       *\n*        BUT NONE IS MADE ON THE VALUE FOR THE KEYWORD.  IE.,         *\n*        50 CHARACTER DATA SET NAMES, 20 CHARACTER VOLUME SERIAL      *\n*        NUMBERS, AND NUMEROUS SYNTAX ERRORS CAN PASS UNDETECTED      *\n*        THROUGH THE CONVERTER.  THESE ERRORS WILL BE CAUGHT BY       *\n*        THE INTERPRETER WHEN THE JOB GOES INTO EXECUTION, BUT        *\n*        THIS EXIT MUST PROCESS THEM.  CURRENTLY, ALL ERRORS OF       *\n*        THIS TYPE WILL ISSUE A MESSAGE TO THE EFFECT OF AN INTERNAL  *\n*        ERROR AND SET THE JOB TO CLASS=A.  THE ESTAE ROUTINE,        *\n*        WHEN ENTERED FOR AN ABEND, WILL ALSO SET THE CLASS TO        *\n*        'A' AND RECOVER TO PROTECT THE CONVERSION SUBTASK FROM       *\n*        ABEND AND CONSEQUENT LOSS OF THE JOB.                        *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CLASS DETERMINATION IS MADE BY KEEPING A COUNT OF ALL        *\n*        OF THE MOUNTABLE DEVICES USED PER STEP.  THESE COUNTS        *\n*        ARE SAVED IN AN INTERNAL TABLE TO BE PROCESSED AT END        *\n*        OF INTERNAL TEXT.  ALSO SAVED IN THE TABLE ARE ENTRIES       *\n*        FOR DD STATEMENTS WHICH USED MOUNTABLE DEVICES               *\n*        FOR USE IN REFERBACKS AND UNIT=AFF.  IF THE UNIT             *\n*        HAS NOT BEEN DETERMINED AT THE END OF PROCESSING             *\n*        FOR A DD STATEMENT, THE CATALOG IS SEARCHED.  IF THE         *\n*        CATALOGED DEVICE IS SYSDA, THE UCBS ARE SEARCHED             *\n*        TO DETERMINE IF THE PACK IS MOUNTED AS PRIVATE,              *\n*        RESERVED, OR PERMANENTLY RESIDENT.  IF THE PACK              *\n*        IS NOT FOUND, A PRIV DISK MOUNT WILL BE CHARGED.             *\n*        CLASS IS SET ON THE BASIS OF THE MAXIMUM NUMBER OF TAPES     *\n*        PER STEP, MAXIMUM NUMBER OF PRIV DASD DEVICES PER STEP,      *\n*        TOTAL MAXIMUM MOUNTABLE DEVICES PER STEP, MAXIMUM REGION     *\n*        PER STEP, AND ESTIMATED EXECUTION TIME FOR JOB.              *\n*                                                                     *\n*        WHEN TESTING THIS EXIT UNDER THE TSO INTERFACE, THE LOCAL    *\n*        VARIABLE &&TSO SHOULD BE CHANGED TO 'YES' FROM 'NO' TO       *\n*        CHANGE THE $$WTO INSTRUCTIONS TO WTO INSTRUCTIONS AND        *\n*        BYPASS THE ESTAE MACROS SO THAT THE TEST COMMAND CAN         *\n*        DETERMINE THE ADDRESS OF THE ABEND.                          *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST COMPUTER SERVICES                      *\n*                        420 BRUSHY MOUNTAIN ROAD                     *\n*                        WILKESBORO, N.C. 28697                       *\n*                        (919) 651-5414                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J E S E X I T 6          *\n*                                                                     *\n*        01)  $$WTO        SYS1.HASPSRC                               *\n*        02)  $BUFFER      SYS1.HASPSRC                               *\n*        03)  $CAT         SYS1.HASPSRC                               *\n*        04)  $CNVWORK     SYS1.HASPSRC                               *\n*        05)  $DCT         SYS1.HASPSRC (136/215)                     *\n*        06)  $DTE         SYS1.HASPSRC (136/215)                     *\n*        07)  $DTECNV      SYS1.HASPSRC (136/215)                     *\n*        08)  $ENTRY       SYS1.HASPSRC                               *\n*        09)  $ERA         SYS1.HASPSRC                               *\n*        10)  $HASPEQU     SYS1.HASPSRC                               *\n*        11)  $HASPGBL     SYS1.HASPSRC                               *\n*        12)  $HCT         SYS1.HASPSRC                               *\n*        13)  $JCT         SYS1.HASPSRC                               *\n*        14)  $JOE         SYS1.HASPSRC                               *\n*        15)  $JQE         SYS1.HASPSRC                               *\n*        16)  $MID         SYS1.HASPSRC                               *\n*        17)  $MIT         SYS1.HASPSRC                               *\n*        18)  $MODEND      SYS1.HASPSRC                               *\n*        19)  $MODULE      SYS1.HASPSRC                               *\n*        20)  $PCE         SYS1.HASPSRC                               *\n*        21)  $TQE         SYS1.HASPSRC (136/215)                     *\n*        22)  $XECB        SYS1.HASPSRC (136/215)                     *\n*        23)  CAMLST       SYS1.MACLIB                                *\n*        24)  CVT          SYS1.MACLIB                                *\n*        25)  ESTAE        SYS1.MACLIB                                *\n*        26)  FREEMAIN     SYS1.MACLIB                                *\n*        27)  GETMAIN      SYS1.MACLIB                                *\n*        28)  IEFNEL       SYS1.AMODGEN                               *\n*        29)  IEFTXTFT     SYS1.AMODGEN                               *\n*        30)  IEFUCBOB     SYS1.AMODGEN                               *\n*        31)  IEFVKEYS     SYS1.AMODGEN                               *\n*        32)  IEZDEB       SYS1.AMODGEN                               *\n*        33)  IEZWPL       SYS1.AMODGEN                               *\n*        34)  IFGRPL       SYS1.MACLIB                                *\n*        35)  IHASDWA      SYS1.MACLIB                                *\n*        36)  LOCATE       SYS1.MACLIB                                *\n*        37)  RETURN       SYS1.MACLIB                                *\n*        38)  SAVE         SYS1.MACLIB                                *\n*        39)  SDUMP        SYS1.MACLIB                                *\n*        40)  SETRP        SYS1.MACLIB                                *\n*        41)  WTO          SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       20K                                              *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SET CONDITIONAL ASSEMBLY VARIABLES                           *\n*                                                                     *\n***********************************************************************\n         LCLC &TSO\n         LCLC &CAMLST\n         LCLC &ERRMSG\n         LCLC &SDUMP\n         LCLC &FLUSH\n         LCLC &MODIFY\n         LCLC &UCBSEAR\n         LCLC &BINREQD\n         LCLC &ESTAE\n&TSO     SETC 'NO'                 ASSEMBLE FOR TSO TESTING\n&CAMLST  SETC 'YES'                SEARCH CATALOG FOR DATASETS\n&ERRMSG  SETC 'YES'                PRODUCE JOBFAILED BY EXIT MESSAGE\n&SDUMP   SETC 'YES'                PRODUCE CONSOLE DUMP FOR ABENDS\n&FLUSH   SETC 'YES'                FLUSH JOB FOR STANDARDS VIOLATIONS\n&MODIFY  SETC 'YES'                MODIFY JOB CLASS IN JCT AND JQE\n&UCBSEAR SETC 'YES'                SEARCH UCBS FOR UNMOUNTED VOLUMES\n&BINREQD SETC 'YES'                IS BIN NUMBER REQUIRED\n&ESTAE   SETC 'YES'                CREATE ESTAE ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        JES2 MACRO EXPANSIONS                                        *\n*                                                                     *\n*        IF RUNNING UNDER JES2 1.3.4, THE THE LINES FOR THE           *\n*        FOLLOWING DSECTS MUST BE DELETED:                            *\n*                                                                     *\n*        $DCT                                                         *\n*        $DTE                                                         *\n*        $DTECNV                                                      *\n*        $ERA                                                         *\n*        $TQE                                                         *\n*        $XECB                                                        *\n*                                                                     *\n*        IF WAS TOO MUCH TROUBLE TO PROVIDE THESE EXTENSIONS          *\n*        WITHIN CONDITIONAL ASSEMBLY SINCE THE VERSION                *\n*        VARIABLE IS GENERATED BY THE $MODULE MACRO ITSELF.           *\n*                                                                     *\n***********************************************************************\n         COPY  $HASPGBL\nJESEXIT6 $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=SUBTASK,                                        X\n               TITLE='JES2 EXIT 6 INTERNAL TEXT EXIT',                 X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               NEL,                GENERATE MVS  NEL DSECT             X\n               CVT,                GENERATE MVS  CVT DSECT             X\n               UCB,                GENERATE MVS  UCB DSECT             X\n               DEB,                GENERATE MVS  DEB DSECT             X\n               TEXT,               GENERATE MVS  TEXT DSECT            X\n               KEYS,               GENERATE MVS  TEXT KEYS EQUATES     X\n               RPL,                GENERATE MVS  RPL DSECT             X\n               SDWA,               GENERATE MVS  SDWA DSECT            X\n               WPL,                GENERATE MVS  WPL DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $CNVWORK,           GENERATE HASP CNVWORK DSECT         X\n               $DTE,               GENERATE HASP DTE DSECT (136)       X\n               $DTECNV,            GENERATE HASP CNV DTE EXTEN (136)   X\n               $ERA,               GENERATE HASP ERA DSECT (136)       X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $TQE,               GENERATE HASP TQE DSECT (136)       X\n               $XECB,              GENERATE HASP EXT ECB DSECT (136)   X\n               $MIT                GENERATE HASP MIT DSECT             X\n               SPACE 3\n         PRINT OFF\n         AIF   ('&VERSION' NE 'SP 1.3.6' AND                           X\n               '&VERSION' NE 'SP 2.1.5').V134A\n         PRINT ON\n         TITLE 'JES2 EXIT 6 INTERNAL TEXT EXIT'\n               EJECT\n***********************************************************************\n*                                                                     *\n*        EQUATED VARIABLES FOR SP 1.3.6 OR SP 2.1.5                   *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nJCTDSECT EQU   JCT\nJQEDSECT EQU   JQE\n         AGO   .VENDA\n.V134A   ANOP\n         PRINT ON\n         TITLE 'JES2 EXIT 6 INTERNAL TEXT EXIT'\n         DROP  R13                 DROP DEFAULT PCE ADDRESSABILITY\n         DROP  R10                 DROP DEFAULT JCT ADDRESSABILITY\n.VENDA   ANOP\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        ACTUAL JES2 EXIT ENTRY POINT                                 *\n*                                                                     *\n***********************************************************************\nEXIT6    $ENTRY  BASE=(R12,R9,R10)\n         SAVE  (14,12)             SAVE CALLERS REGISTERS\n         LR    R5,R1               SAVE INPUT PARM LIST ADDRESS\n         AIF   ('&VERSION' NE 'SP 1.3.6' AND                           X\n               '&VERSION' NE 'SP 2.1.5').V134B\n         L     R2,12(R1)           LOAD JCT ADDRESS\n         AGO   .VENDB\n.V134B   ANOP\n         LR    R2,R10              SAVE JCT ADDRESS\n.VENDB   ANOP\n         LR    R12,R15             ESTABLISH BASE REGISTER\n         LA    R9,2048(R12)        SET SECOND\n         LA    R9,2048(R9)             BASE REGISTER\n         LA    R10,2048(R9)        SET THIRD\n         LA    R10,2048(R10)           BASE REGISTER\n         LR    R4,R0               SAVE REG 0\n         L     R6,4(R1)            LOAD ADDRESS OF INTERNAL TEXT RECORD\n         USING TEXT,R6             SET ADDRESSABILITY TO TEXT RECORD\n         L     R15,0(R5)           LOAD ADDRESS OF EXIT WORK AREA\n         ICM   R1,15,0(R15)        LOAD GETMAINED AREA ADDRESS (IF ONE)\n         BZ    GETMAIN             ZERO, GO DO REQUIRED GETMAINS\n         ST    R13,4(R1)           SAVE OLD SAVE ADDR IN NEW\n         ST    R1,8(R13)           SAVE NEW SAVE ADDR IN OLD\n         LR    R13,R1              SAVE NEW SAVE AND WORKAREA ADDRESS\n         USING WORKAREA,R13        SET ADDRESSABILITY\n         L     R7,SUBTABLE         RESTORE SUB TABLE AREA\n         USING SAVTABLE,R7         SET ADDRESSABILITY\n         B     ENDGETM             BYPASS GETMAINS\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GET STORAGE FOR WORK AREAS ON FIRST ENTRY TO EXIT FOR        *\n*        THE JOB                                                      *\n*                                                                     *\n***********************************************************************\nGETMAIN  DS    0H\n         LH    R0,GETLEN           LOAD GETMAIN SIZE\n         GETMAIN R,LV=(0)          GET CORE FOR DYNAMIC SAVE AREA\n         LR    R3,R1               SAVE GETMAINED ADDRESS\n         LR    R0,R1               CLEAR\n         LH    R1,GETLEN               ENTIRE\n         SLR   R15,R15                     GETMAINED\n         MVCL  R0,R14                          TO ZEROS\n         ST    R13,4(R3)           SAVE OLD SAVE ADDR IN NEW\n         ST    R3,8(R13)           SAVE NEW SAVE ADDR IN OLD\n         LR    R13,R3              SAVE NEW SAVE AND WORKAREA ADDRESS\n         L     R15,0(R5)           LOAD ADDRESS OF EXIT WORK AREA\n         ST    R13,0(R15)          SAVE GETMAINED ADDRESS IN EXIT WA\n         L     R0,F#16384          LOAD GETMAIN SIZE\n         GETMAIN R,LV=(0)          GET CORE FOR JCL TABLE\n         LR    R7,R1               SAVE GETMAIN ADDRESS\n         ST    R7,SUBTABLE         STORE ADDR OF SUB TABLE AREA\n         LR    R0,R7               CLEAR\n         L     R1,F#16384              ENTIRE\n         SLR   R15,R15                     GETMAINED\n         MVCL  R0,R14                          TO ZEROS\n         LA    R15,MSGRPL          LOAD OUTPUT RPL ADDRESS\n         ST    R15,OUTRPL          SAVE OUTPUT RPL ADDRESS\n         AIF   ('&VERSION' EQ 'SP 1.3.6' OR                            X\n               '&VERSION' EQ 'SP 2.1.5').V136C\n         LA    R15,JPCEMSG         LOAD OUTPUT ACB ADDRESS\n         ST    R15,OUTACB          SAVE OUTPUT ACB ADDRESS\n         AGO   .VENDC\n.V136C   ANOP\n         L     R15,8(R5)           LOAD DTE ADDRESS\n         USING DTE,R15             SET ADDRESSABILITY TO DTE\n         LA    R15,DCNVMSG         LOAD OUTPUT ACB ADDRESS\n         ST    R15,OUTACB          SAVE OUTPUT ACB ADDRESS\n         DROP  R15                 DROP ADDRESSABILITY TO DTE\n.VENDC   ANOP\nENDGETM  ST    R2,JCTADDR          SAVE JCT ADDRESS\n         ST    R5,WORKADDR         SAVE EXIT PARM LIST ADDRESS\n         ST    R6,TEXTSTAR         SAVE TEXT STARTING ADDRESS\n         AIF   ('&VERSION' NE 'SP 1.3.6' AND                           X\n               '&VERSION' NE 'SP 2.1.5').V134D\n         USING JCT,R2              SET ADDRESSABILITY TO JCT\n         L     R1,JCTJQE           LOAD JQE OFFSET\n         N     R1,$ZEROFFF         CLEAR HIGH ORDER BYTE\n         AL    R1,$JOBQPTR         GET ACTUAL JQE ADDRESS\n         ST    R1,JQEADDR          SAVE JQE ADDRESS\n         AGO   .VENDD\n.V134D   ANOP\n         USING PCEDSECT,R8         SET ADDRESSABILITY TO PCE\n         L     R1,PCEJQE           LOAD JQE ADDRESS\n         ST    R1,JQEADDR          SAVE JQE ADDRESS\n         DROP  R8                  DROP ADDRESSABILITY TO PCE\n.VENDD   ANOP\n         EJECT\n***********************************************************************\n*        ESTABLISH ESTAE ENVIRONMENT                                  *\n***********************************************************************\n         MVC   ESTAEL(LESTAEL),ESTAE INITIALIZE ESTAE LIST FORM\n         STM   R14,R12,STAEREGS+12 SAVE CURRENT REGISTERS\n         LA    R1,ESTAEL           LOAD ADDRESS OF ESTAE LIST FORM\n         AIF   ('&TSO' EQ 'YES').TSO9\n         AIF   ('&ESTAE' NE 'YES').TSO9\n         ESTAE STAEXIT,CT,PARAM=(13),XCTL=NO,PURGE=NONE,ASYNCH=NO,     X\n               RECORD=YES,TERM=NO,MF=(E,(1))\n.TSO9    ANOP\n         LR    R0,R4               RESTORE REG 0\n         LTR   R0,R0               INDIVIDUAL ENTRY FOR INTERNAL TEXT\n         BZ    CHECKJCT            YES, BRANCH\n         B     EOF                 GET OUT\n         EJECT\n***********************************************************************\n*        SOME TYPES OF ERRORS DETECTED BY THE CONVERTER TURN ON BITS  *\n*        IN THE JCTCNVRC FIELD WHICH WILL FAIL THE JOB WHEN THE       *\n*        CONVERTER COMPLETES.  THESE BITS WILL BE TESTED, AND IF      *\n*        THE JOB IS TO BE FAILED, A QUICK PATH THROUGH THE EXIT       *\n*        WILL BE MADE.                                                *\n***********************************************************************\nCHECKJCT TM    JOBIND2,SEVERE      SEE IF SEVERE ERROR HAS OCCURRED\n         BO    GETNEXT             YES, IGNORE THIS ENTRY\n         L     R14,JCTADDR         LOAD JCT ADDRESS\n         USING JCTDSECT,R14        SET ADDRESSABILITY TO JCT\n         LA    R15,JCTCJCL         SET JCL ERROR IN CONVERTER RTN CODE\n         C     R15,JCTCNVRC        TEST CONVERTER RETURN CODE\n         BE    BADERROR            BAD, GO PROCESS SEVERE ERROR\n         DROP  R14                 DROP ADDRESSABILITY TO JCT\n         EJECT\n***********************************************************************\n*        WE MUST DETERMINE IF THE CURRENT STATEMENT IS THE LAST       *\n*        STATEMENT FOR THE STEP.  IF THE STATEMENT IS A DD STATEMENT  *\n*        AND IT IS THE LAST STATEMENT OF THE STEP, THE TEXT INDICATOR *\n*        WILL REFLECT LAST STATEMENT OF THE STEP.  IF, HOWEVER, THE   *\n*        CURRENT STATEMENT IS AN EXEC STATEMENT AND IT HAS NO DD      *\n*        STATEMENTS, THIS INDICATOR WILL NOT BE ON, SO WE HAVE TO     *\n*        CHECK FOR THIS CONDITION ALSO.                               *\n***********************************************************************\nRECORD1  TM    STRINDCS,LASTSTMT   LAST STMT FOR STEP?\n         BO    RECORD3             YES, BRANCH\n         TM    STRINDCS,EXECSTR    EXEC STMT?\n         BNO   RECORD2             NO, BRANCH\n         TM    STREINDC,ETXNODD    STEP HAS NO DD STMTS?\n         BO    RECORD3             TRUE, ALSO LAST STMT FOR STEP\n***********************************************************************\n*        AT THIS POINT THE STMT IS NOT THE LAST STMT FOR STEP         *\n***********************************************************************\nRECORD2  NI    EOFIND,X'FE'        TURN OFF LAST STMT IND\n         B     RECORD4             GET OUT\n***********************************************************************\n*        AT THIS POINT THE STMT IS THE LAST STMT FOR STEP             *\n***********************************************************************\nRECORD3  OI    EOFIND,ENDSTEP      TURN ON LAST STMT IND\nRECORD4  TM    STRINDCS,JOBSTR     JOB STATEMENT?\n         BO    JOBCARD             YES, BRANCH\n         TM    STRINDCS,EXECSTR    EXEC STATEMENT?\n         BO    EXECARD             YES, BRANCH\n         TM    STRINDCS,DDSTR      DD STATEMENT?\n         BO    DDCARD              YES, BRANCH\n         TM    STRINDCS,PROCSTR    PROC STATEMENT?\n         BO    GETNEXT             YES, BRANCH\n         TM    STRINDCS,JDVBSTR    JDT OUTPUT STATEMENT?\n         BO    JDTCARD             YES, BRANCH\n         LA    R15,1               SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     GETNEXT             GO GET ANOTHER STATEMENT\n         EJECT\n***********************************************************************\n*        THE TEXT OF THE JOBCARD IS AS FOLLOWS:                       *\n*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        *\n*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          *\n*            3)  3 BYTES OF MISCELLANEOUS INDICATORS                  *\n*            4)  1 BYTE INDICATOR X'B4' INDICATING JOB POS PARAMS     *\n*            5)  1 BYTE NUMBER OF POSITIONAL PARAMETERS               *\n*                1ST POS PARAM IS JOBNAME                             *\n*                2ND POS PARAM IS ACCT PARAM LIST                     *\n*                3RD POS PARAM IS PGMR NAME                           *\n*            5A) JOBNAME PRECEDED BY A 1 BYTE LENGTH FIELD            *\n*            5B) HASP ACCOUNTING PARAMETERS PRECEDED BY A             *\n*                1 BYTE LENGTH FIELD LOOKS LIKE THE FOLLOWING         *\n*                THE 1ST HALF BYTE IS '8' IF MORE THAN 1 ACCT ENTRY   *\n*                IF MORE THAN 1 ACCT ENTRY -                          *\n*                THE 2ND HALF BYTE IS THE NUMBER OF ACCT ENTRIES      *\n*                FOLLOWED BY A VARIABLE LENGTH LIST OF HASP PARAMETERS*\n*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               *\n*                IF ONLY 1 ACCT ENTRY -                               *\n*                THE 2ND HALF BYTE IS THE LENGTH OF THE ACCT ENTRY    *\n*                FOLLOWED BY THE ACCOUNTING ENTRY                     *\n*            5C) PGMR NAME PRECEDED BY A 1 BYTE LENGTH FIELD          *\n*            6)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS           *\n*                EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF   *\n*                POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF      *\n*                SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD *\n*                WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER *\n*                POSITIONAL PARAMETER.                                *\n***********************************************************************\n         EJECT\nJOBCARD  EQU   *\n***********************************************************************\n*        INITIALIZE ENTRY IN TABLE SINCE ONE MUST ALWAYS BE CREATED   *\n***********************************************************************\nJOBINIT  L     R14,JCTADDR         LOAD JCT ADDRESS\n         USING JCTDSECT,R14        SET ADDRESSABILITY TO JCT\n         MVI   ENTRYTYP,TYPJOB     SET TO JOB ENTRY\n         MVI   JENTRY,C' '         BLANK FIRST BYTE OF JOB INFO\n         MVC   JENTRY+1(30),JENTRY BLANK ENTIRE JOB INFO\n         ST    R7,LASTENT          SAVE ADDR OF LAST ENTRY IN TABLE\n         ST    R7,FIRSTENT         SAVE ADDR OF FIRST ENTRY IN TABLE\n         XC    CLASSFLD,CLASSFLD   ZERO DETERMINED JOB CLASS\n         XC    MAXTIME,MAXTIME     CLEAR MAXIMUM CPU TIME\n         TM    JCTJOBFL,JCTSTCJB   IS THIS A STARTED TASK?\n         BNO   JOBINIT1            NO, BRANCH\n         OI    JOBIND,JOBSTC       TURN ON STC INDICATOR\nJOBINIT1 TM    JCTJOBFL,JCTTSUJB   IS THIS A TSO USER?\n         BNO   JOBINIT2            NO, BRANCH\n         OI    JOBIND,JOBTSO       TURN ON TSO INDICATOR\n         DROP  R14                 DROP ADDRESSABILITY TO JCT\n***********************************************************************\n*        INITIALIZE MSG HANDLER PARAMETERS ON FIRST ENTRY             *\n***********************************************************************\nJOBINIT2 LA    R15,1               SET REG TO 1\n         ST    R15,CARDNO          SET CARD COUNT TO 1\n         XC    MSGCOUNT,MSGCOUNT   ZERO MESSAGE COUNTER\n         XC    RESOURCE,RESOURCE   CLEAR JES2 RESOURCES\n         MVI   INCLASS,C'A'        SET INPUT DEFAULT CLASS TO 'A'\n         MVI   U7TEST,C'N'         SET UCC7 LOAD JOB TO 'N' FOR NO\n         EJECT\n***********************************************************************\n*        START SCAN OF JOB CARD POSITIONAL PARAMETERS                 *\n*            1ST POS PARAM IS ACCT NUMBER UNLESS ONLY 1 ENTRY         *\n*            2ND POS PARAM IS BIN LOC UNLESS ONLY 2 ENTRIES           *\n*            3RD POS PARAM IS EST TIME UNLESS ONLY 3 ENTRIES          *\n*            LAST ENTRY IS ALWAYS PROGRAMMER NAME                     *\n***********************************************************************\nJOBSTART XC    LASTEXEC,LASTEXEC NO PREVIOUS EXEC CARD\n         LA    R2,STRJKEY          LOAD START OF TRUE TEXT\n         ST    R2,PARMADDR         SAVE START OF PARAMETER ADDRESS\n         LA    R2,1(,R2)           INCR PAST JOB POSIT PARAM KEYWORD\n         SLR   R15,R15             CLEAR REGISTER FOR IC\n         IC    R15,0(R2)           LOAD NUMBER OF POS SUBPARAMS\n         CH    R15,H#3             SEE IF THREE (JOBNAME, ACCT, PRMRNM)\n         BNL   JOBCK1              YES, BRANCH\n         TM    JOBIND,JOBSTC+JOBTSO ARE ALL PARAMETERS REQUIRED?\n         BM    JOBCK1              NO, BRANCH\n         LA    R15,2               SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBLOOP             BYPASS FIELDS\nJOBCK1   LA    R2,1(,R2)           INCR PAST NUM OF POS SUBPARAMS\nJOBNM    SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,1,0(R2)          LOAD JOB NAME LENGTH\n         BZ    JOBNM2              LENGTH ZERO, DO NOT MOVE\n         CH    R3,H#8              SEE IF LENGTH > 8\n         BNH   *+16                NO, CONTINUE\n         LA    R15,3               SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBLOOP             BYPASS FIELDS\n         MVC   JNAME,BLANKS        BLANK THE JOB NAME\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE1            MOVE JOB NAME TO SAVE TABLE\n         LA    R3,1(,R3)           RESTORE LENGTH\n         MVC   JOBNAME,JNAME       SAVE JOB NAME\n         CLC   JNAME,C#MOUNT       SEE IF MOUNT\n         BNE   JOBNM2              NO, BRANCH\n         OI    JOBIND2,MOUNT       SET MOUNT AUTHORITY\nJOBNM2   LA    R2,1(R3,R2)         INCREMENT PAST JOB NAME\n         TM    JOBIND,JOBSTC+JOBTSO ARE ACCOUNTING/PGMR NAME REQUIRED?\n         BM    JOBLOOP             NO, BRANCH\n         EJECT\nJOBACT   SLR   R4,R4               CLEAR REGISTER FOR ICM\n         ICM   R4,1,0(R2)          INSERT CONTROL BYTE\n         BNM   JOBACT1             HIGH ORDER BIT NOT ON, ONLY 1 PARAME\n         N     R4,F#127            'AND' OUT THE HIGH ORDER BIT\n         LA    R2,1(,R2)           INCREMENT PAST CONTROL BYTE\n         LTR   R4,R4               TEST NUMBER OF ACCOUNTING PARMS\n         BNZ   JOBACT2             NOT ZERO, BRANCH\n         LA    R15,4               SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         AIF   ('&BINREQD' NE 'YES').BIN1\n         LA    R15,51              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n.BIN1    ANOP\n         B     JOBPGMR             BYPASS ACCOUNTING PROCESSING\nJOBACT1  LA    R4,1                SET NUMBER OF ACCOUNTING FIELDS TO 1\n         EJECT\n***********************************************************************\n*        WE ARE CHECKING THE FIRST ACCOUNTING FIELD FOR FORMATTING    *\n*        ERRORS.  THE LENGTH OF THE FIRST ACCOUNTING FIELD MUST BE    *\n*        7 OR 13 DEPENDING ON WHETHER OR NOT IT IS A TEST JOB IN      *\n*        WHICH CASE A SIX CHARACTER PAC2 PROJECT CODE MUST BE         *\n*        ADDED TO THE FIRST 8 CHARACTERS.                             *\n*                                                                     *\n*        THE FIRST ACCOUNTING FIELD IS FORMATTED AS FOLLOWS:          *\n*                                                                     *\n*        1)  1 CHARACTER RESOURCE CODE.                               *\n*        2)  2 CHARACTER APPLICATION CODE.                            *\n*        3)  4 CHARACTER GL COST CENTER NUMBER.                       *\n*        4)  6 CHARACTER PAC2 PROJECT CODE (NOT PRODUCTION)           *\n*                                                                     *\n***********************************************************************\nJOBACT2  ICM   R3,1,0(R2)          LOAD PARAMETER LENGTH\n         BNZ   *+16                NOT ZERO, BRANCH\n         LA    R15,35              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBACT17            BYPASS ACCT NUM\n***********************************************************************\n*        CHECK THE LENGTH OF THE FIRST ACCOUNTING FIELD FOR           *\n*        7 OR 13.                                                     *\n***********************************************************************\n         CH    R3,H#13             COMPARE LENGTH TO 13\n         BE    JOBACT3             ACCT LENGTH = 13, BRANCH\n         BL    *+16                ACCT LENGTH < 13, BRANCH\n         LA    R15,4               SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBLOOP             BYPASS FIELDS\n         CH    R3,H#7              SEE IF ACCT LENGTH = 7\n         BE    *+16                YES, BRANCH\n         LA    R15,4               SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBACT17            BYPASS FIELD\nJOBACT3  BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE2            MOVE ACCT NUM TO SAVE TABLE\n         EX    R3,MOVE16           MOVE ACCT NUM TO WORK AREA\n         LA    R3,1(,R3)           RESTORE LENGTH\n         STC   R3,JACCTLEN         SAVE LENGTH OF ACCT NUM\n***********************************************************************\n*        CHECK THE FIRST POSITION OF THE FIRST ACCOUNTING FIELD       *\n*        FOR ONE OF THE FOLLOWING:                                    *\n*        \"S\" - TECH SUPPORT                                           *\n*        \"P\" - PRODUCTION                                             *\n*        \"T\" - TESTING                                                *\n*        \"O\" - OPERATIONS                                             *\n*        \"R\" - REMOTE TSO                                             *\n*        \"X\" - PARALLEL TEST                                          *\n***********************************************************************\n         CLI   JACCTNO,C'S'        TECH SUPPORT JOB?\n         BE    JOBACT5             YES, BYPASS RESOURCE SETTING\n         CLI   JACCTNO,C'P'        PRODUCTION JOB?\n         BE    JOBACT10            YES, GO ADD 'PROD' RESOURCE\n         CLI   JACCTNO,C'T'        TEST JOB?\n         BE    JOBACT4             YES, BRANCH\n         CLI   JACCTNO,C'O'        OPERATIONS SUPPORT JOB?\n         BE    JOBACT5             YES, BRANCH\n         CLI   JACCTNO,C'R'        REMOTE TSO USERS JOB?\n         BE    JOBACT5             YES, BRANCH\n         CLI   JACCTNO,C'X'        PARALLEL TEST JOB?\n         BE    JOBACT5             YES, BRANCH\n         LA    R15,36              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBACT11            BYPASS CHECK\n***********************************************************************\n*                        T E S T I N G                                *\n*                                                                     *\n*        1)  THE LENGTH OF THE ACCCOUNTING FIELD MUST BE 13           *\n*            TO INCLUDE THE 6 CHARACTER PAC2 PROJECT FIELD            *\n*            UNLESS THE JOB BELONGS TO SEVERAL GROUPS IN              *\n*            WHICH CASE THE PAC2 PROJECT CODE FIELD IS                *\n*            OPTIONAL.                                                *\n*        2)  THE PAC2 PROJECT CODE FIELD MUST BE ALPHANUMERIC.        *\n*        3)  PSEUDO TESTING JOBS DO NOT REQUIRE THE PAC2 PROJECT      *\n*            CODE.                                                    *\n*                                                                     *\n***********************************************************************\nJOBACT4  OI    RESOURCE,TESTING    YES, ADD 'TESTING' RESOURCE\n         CLI   JNAME,C'S'          TECH SUPPORT JOB?\n         BE    JOBACT5             YES, PAC2 PROJECT CODE NOT REQUIRED\n         CLI   JNAME,C'R'          REMOTE TSO USER JOB?\n         BE    JOBACT5             YES, PAC2 PROJECT CODE NOT REQUIRED\n         CLI   JNAME,C'C'          COMPUTER OPERATIONS JOB?\n         BE    JOBACT5             YES, PAC2 PROJECT CODE NOT REQUIRED\n         CLI   JNAME,C'Q'          QUALITY CONTROL JOB?\n         BE    JOBACT5             YES, PAC2 PROJECT CODE NOT REQUIRED\n         CLI   JNAME,C'N'          NETWORK CONTROL JOB?\n         BE    JOBACT5             YES, PAC2 PROJECT CODE NOT REQUIRED\n         CLI   JNAME,C'A'          AUDITORS JOB?\n         BE    JOBACT5             YES, PAC2 PROJECT CODE NOT REQUIRED\n         CLI   JNAME,C'X'          PARALLEL TEST JOB?\n         BE    JOBACT5             YES, PAC2 PROJECT CODE NOT REQUIRED\n         CLI   JNAME,C'K'          DATA ENTRY JOB?\n         BE    JOBACT5             YES, PAC2 PROJECT CODE NOT REQUIRED\n         CH    R3,H#13             CHECK LENGTH OF ACCOUNTING FIELD\n         BE    JOBACT6             YES, BRANCH\n         LA    R15,37              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBACT11            BYPASS CHECK\n***********************************************************************\n*                    T E C H     S U P P O R T                        *\n*                                                                     *\n*                      O P E R A T I O N S                            *\n*                                                                     *\n*                  N O N     P R O D U C T I O N                      *\n*                                                                     *\n*        1)  THE LENGTH OF THE ACCCOUNTING FIELD CAN BE 13            *\n*            TO INCLUDE THE 6 CHARACTER PAC2 PROJECT CODE FIELD.      *\n*        2)  THE PAC2 PROJECT CODE FIELD (IF PRESENT MUST BE          *\n*            ALPHANUMERIC.                                            *\n***********************************************************************\nJOBACT5  CH    R3,H#13             SEE IF PAC2 PROJECT FIELD PRESENT\n         BNE   JOBACT11            NO, BYPASS CHECK\nJOBACT6  LA    R1,JACCTNO+7        POINT TO PAC2 PROJECT CODE FIELD\n         LA    R14,6               SET LENGTH OF FIELD\nJOBACT7  CLI   0(R1),C'A'          SEE IF LESS THAN 'A'\n         BL    JOBACT9             YES, NOT ALPHA\n         CLI   0(R1),C'Z'          SEE IF GREATER THAN 'Z'\n         BNH   JOBACT8             NO, ALPHA, OK\n         CLI   0(R1),C'0'          SEE IF LESS THAN '0'\n         BL    JOBACT9             YES, NOT NUMERIC\n         CLI   0(R1),C'9'          SEE IF GREATER THAN '9'\n         BH    JOBACT9             YES, NOT NUMERIC\nJOBACT8  LA    R1,1(,R1)           INCREMENT TO NEXT POSITION OF ACCT\n         BCT   R14,JOBACT7         LOOP UNTIL DONE\n         B     JOBACT11            GO CHECK REST OF ACCOUNTING FIELD\nJOBACT9  LA    R15,38              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBACT11            GO CHECK REST OF ACCOUNTING FIELD\n***********************************************************************\n*                     P R O D U C T I O N                             *\n*                                                                     *\n*        1)  THE PAC2 PROJECT CODE MUST NOT BE PRESENT                *\n***********************************************************************\nJOBACT10 OI    RESOURCE,PROD       ADD 'PRODUCTION' RESOURCE\n         CH    R3,H#13             SEE IF PAC2 PROJECT FIELD PRESENT\n         BNE   JOBACT11            NO, BRANCH\n         LA    R15,39              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n***********************************************************************\n*                     A L L    J O B S                                *\n*                                                                     *\n*        1)  THE APPLICATION CODE MUST BE 2 NUMERIC CHARACTERS.       *\n*        2)  THE GL COST CENTER NUMBER MUST BE 4 NUMERIC CHARACTERS   *\n***********************************************************************\nJOBACT11 LA    R1,JACCTNO+1        POINT TO APPLICATION CODE FIELD\n         LA    R14,2               SET LENGTH OF FIELD\nJOBACT12 CLI   0(R1),C'0'          SEE IF LESS THAN '0'\n         BL    JOBACT13            YES, NOT ALPHA\n         CLI   0(R1),C'9'          SEE IF GREATER THAN '9'\n         BH    JOBACT13            YES, NOT ALPHA\n         LA    R1,1(,R1)           INCREMENT TO NEXT POSITION OF ACCT\n         BCT   R14,JOBACT12        LOOP UNTIL DONE\n         B     JOBACT14            GO CHECK GL COST CENTER NUMBER\nJOBACT13 LA    R15,40              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\nJOBACT14 LA    R14,4               SET LENGTH OF FIELD\n         LA    R1,JACCTNO+3        POINT TO GL COST CENTER\nJOBACT15 CLI   0(R1),C'0'          SEE IF LESS THAN '0'\n         BL    JOBACT16            YES, NOT ALPHA\n         CLI   0(R1),C'9'          SEE IF GREATER THAN '9'\n         BH    JOBACT16            YES, NOT ALPHA\n         LA    R1,1(,R1)           INCREMENT TO NEXT POSITION OF ACCT\n         BCT   R14,JOBACT15        LOOP UNTIL DONE\n         B     JOBACT17            GET OUT\nJOBACT16 LA    R15,41              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\nJOBACT17 LA    R2,1(R3,R2)         INCREMENT PAST ACCT\n         BCTR  R4,0                REDUCE ACCOUNT PARM COUNT BY 1\n         CH    R4,H#1              SEE IF ANOTHER ACCOUNT PARM (BIN NUM\n         BL    JOBACT18            NO, ERROR\n         IC    R3,0(R2)            LOAD LENGTH OF BIN NUMBER\n         LTR   R3,R3               TEST LENGTH OF BIN NUMBER\n         BZ    JOBACT18            ZERO, NOT ENTERED\n         CH    R3,H#4              TEST LENGTH OF BIN NUMBER\n         BE    JOBACT19            FOUR, GOOD, BRANCH\n         AIF   ('&BINREQD' NE 'YES').BIN2\n         LA    R15,52              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n.BIN2    ANOP\n         B     JOBACT20            CONTINUE PROCESSING ACCOUNTING PARMS\nJOBACT18 DS    0H                  SET MISSING BIN NUMBER MESSAGE\n         AIF   ('&BINREQD' NE 'YES').BIN3\n         LA    R15,51              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n.BIN3    ANOP\n         B     JOBPGMR             DONE WITH ACCOUNTING PARMS\nJOBACT19 LA    R2,1(R3,R2)         INCREMENT PAST PARM\n         IC    R3,0(R2)            LOAD LENGTH OF NEXT PARM\nJOBACT20 BCT   R4,JOBACT19         LOOP UNTIL PROCESSED ALL ACCT FIELDS\n         EJECT\n***********************************************************************\n*        SAVE THE PROGRAMMER NAME                                     *\n***********************************************************************\nJOBPGMR  ICM   R3,1,0(R2)          LOAD PGMR NAME LENGTH\n         BZ    PGMREND             ZERO LENGTH, MISSING PARAM\n         CH    R3,H#20             SEE IF LENGTH > 20\n         BNH   *+16                NO, CONTINUE\n         LA    R15,5               SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBLOOP             BYPASS FIELDS\n         CH    R3,H#10             SEE IF LENGTH > 10\n         BNH   PGMR10              IF NOT > 10, OK\n         LH    R3,H#10             MAKE LENGTH = 10\nPGMR10   BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE3            MOVE PGMR NAME TO SAVE TABLE\n         ICM   R3,1,0(R2)          RELOAD PGMR NAME LENGTH\n         EJECT\n***********************************************************************\n*        COMPARE THE RESOURCE CODE IN THE ACCOUNTING TO THE JOB       *\n*        AUTHORITY INDICATED BY THE FIRST POSITION OF THE JOB NAME.   *\n*        VALID COMBINATIONS ARE AS FOLLOWS:                           *\n*                                                                     *\n*        1)  RESOURCE CODE = S                                        *\n*            A)  \"SUPPORT\"      JOBS                                  *\n*                                                                     *\n*        2)  RESOURCE CODE = P                                        *\n*            A)  \"PRODUCTION\"   JOBS                                  *\n*            B)  \"OPERATIONS\"   JOBS                                  *\n*                                                                     *\n*        3)  RESOURCE CODE = T                                        *\n*            A)  \"TEST\"         JOBS                                  *\n*            B)  \"OPERATIONS\"   JOBS                                  *\n*            C)  \"REMOTE USERS\" JOBS                                  *\n*            D)  \"SUPPORT\"      JOBS                                  *\n*            E)  \"DEVELOPMENT\"  JOBS                                  *\n*            F)  \"COMP OPNS\"    JOBS                                  *\n*            G)  \"QUALITY CTL\"  JOBS                                  *\n*            H)  \"NETWORK CTL\"  JOBS                                  *\n*            I)  \"AUDITORS\"     JOBS                                  *\n*            J)  \"DATA ENTRY\"   JOBS                                  *\n*                                                                     *\n*        4)  RESOURCE CODE = O                                        *\n*            A)  \"OPERATIONS\"   JOBS                                  *\n*                                                                     *\n*        5)  RESOURCE CODE = R                                        *\n*            A)  \"REMOTE USERS\" JOBS                                  *\n*            B)  \"OPERATIONS\"   JOBS                                  *\n*            C)  \"TECH SUPPORT\" JOBS                                  *\n*                                                                     *\n*        6)  RESOURCE CODE = X                                        *\n*            A)  \"PARALLEL TST\" JOBS                                  *\n*                                                                     *\n***********************************************************************\nPGMREND  CLI   JACCTNO,C'S'        IS THIS A TECH SUPPORT JOB?\n         BNE   CKAUTH1             NO, BRANCH\n         OI    JOBIND,JOBTECH      TURN ON TECH SUPPORT INDICATOR\n         CLI   JNAME,C'S'          SEE IF JOBNAME CHARACTER OK\n         BE    CKAUTH7             YES, BRANCH\n         B     CKAUTH6             NO, ERROR\nCKAUTH1  CLI   JACCTNO,C'P'        IS THIS A PRODUCTION JOB?\n         BNE   CKAUTH2             NO, BRANCH\n         OI    JOBIND,JOBPROD      TURN ON PRODUCTION JOB INDICATOR\n         CLI   JNAME,C'P'          SEE IF JOBNAME CHARACTER OK\n         BE    CKAUTH7             YES, BRANCH\n         CLI   JNAME,C'O'          SEE IF JOBNAME CHARACTER OK\n         BE    CKAUTH7             YES, BRANCH\n         B     CKAUTH6             NO, ERROR\nCKAUTH2  CLI   JACCTNO,C'T'        IS THIS A TEST JOB?\n         BNE   CKAUTH3             NO, BRANCH\n         OI    JOBIND,JOBTEST      TURN ON TEST JOB INDICATOR\n         CLI   JNAME,C'T'          SEE IF JOBNAME CHARACTER OK\n         BE    CKAUTH7             YES, BRANCH\n         CLI   JNAME,C'O'          SEE IF JOBNAME CHARACTER OK\n         BE    CKAUTH7             YES, BRANCH\n         CLI   JNAME,C'S'          SEE IF JOBNAME CHARACTER OK\n         BE    CKAUTH7             YES, BRANCH\n         CLI   JNAME,C'D'          SEE IF JOBNAME CHARACTER OK\n         BE    CKAUTH7             YES, BRANCH\n         CLI   JNAME,C'C'          SEE IF JOBNAME CHARACTER OK\n         BE    CKAUTH7             YES, BRANCH\n         CLI   JNAME,C'Q'          SEE IF JOBNAME CHARACTER OK\n         BE    CKAUTH7             YES, BRANCH\n         CLI   JNAME,C'N'          SEE IF JOBNAME CHARACTER OK\n         BE    CKAUTH7             YES, BRANCH\n         CLI   JNAME,C'A'          SEE IF JOBNAME CHARACTER OK\n         BE    CKAUTH7             YES, BRANCH\n         CLI   JNAME,C'K'          SEE IF JOBNAME CHARACTER OK\n         BE    CKAUTH7             YES, BRANCH\n         B     CKAUTH6             NO, ERROR\nCKAUTH3  CLI   JACCTNO,C'O'        IS THIS A OPERATIONS JOB?\n         BNE   CKAUTH4             NO, BRANCH\n         OI    JOBIND,JOBOPER      TURN ON OPERATIONS JOB INDICATOR\n         CLI   JNAME,C'O'          SEE IF JOBNAME CHARACTER OK\n         BE    CKAUTH7             YES, BRANCH\n         B     CKAUTH6             NO, ERROR\nCKAUTH4  CLI   JACCTNO,C'R'        IS THIS A REMOTE USERS JOB?\n         BNE   CKAUTH5             NO, BRANCH\n         OI    JOBIND,JOBTEST      TURN ON TEST JOB INDICATOR\n         CLI   JNAME,C'R'          SEE IF JOBNAME CHARACTER OK\n         BE    CKAUTH7             YES, BRANCH\n         CLI   JNAME,C'O'          SEE IF JOBNAME CHARACTER OK\n         BE    CKAUTH7             YES, BRANCH\n         CLI   JNAME,C'S'          SEE IF JOBNAME CHARACTER OK\n         BE    CKAUTH7             YES, BRANCH\n         B     CKAUTH6             NO, ERROR\nCKAUTH5  CLI   JACCTNO,C'X'        IS THIS A PARALLEL TEST JOB?\n         BNE   CKAUTH7             NO, BRANCH\n         OI    JOBIND,JOBTEST      TURN ON TEST JOB INDICATOR\n         CLI   JNAME,C'X'          SEE IF JOBNAME CHARACTER OK\n         BE    CKAUTH7             YES, BRANCH\n         B     CKAUTH6             NO, ERROR\nCKAUTH6  LA    R15,42              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\nCKAUTH7  B     JOBLOOP             LOOP FOR NEXT PARAMETER\n         EJECT\n***********************************************************************\n*        WE ARE LOOKING FOR INVALID KEYWORDS OR KEYWORDS HAVING       *\n*        ILLEGAL VALUES OR OTHER THAN DEFAULT                         *\n***********************************************************************\n*\n***********************************************************************\n*        KEYWORD ENTRIES ARE NORMALLY AS FOLLOWS:                     *\n*            1)  1 BYTE HEX KEYWORD                                   *\n*            2)  1 BYTE NUMBER OF SUBPARAMETERS                       *\n*            3)  LIST OF POSITIONAL SUBPARAMETERS EACH PRECEDED BY A  *\n*                1 BYTE LENGTH FIELD                                  *\n*        THERE ARE OCCASIONS WHEN THE POSITIONAL SUBPARAMETERS WILL   *\n*        HAVE POSITIONAL SUBPARAMETERS THEMSELVES                     *\n*        THIS WILL BE FLAGGED IN THE LENGTH FIELD FOR THAT SUBPARAM   *\n*        BY A HIGH ORDER BIT IN THE FIELD.  IN THIS CASE, THIS IS NOT *\n*        A LENGTH FIELD, BUT A COUNT OF SUBPARAMETERS, WHICH WILL BE  *\n*        A LIST OF PARAMETERS, EACH PRECEDED BY A 1 BYTE LENGTH FIELD.*\n*        THUS THE ENTRY FOR A SUBPARAMETER WITH SUBPARAMETERS WILL    *\n*        APPEAR AS FOLLOWS:                                           *\n*            1)  A 1 BYTE NUMBER OF SUBPARAMS AS INDICATED BY A       *\n*                HIGH ORDER BIT                                       *\n*            2)  A LIST OF SUBPARAMETERS EACH PRECEDED BY A 1 BYTE    *\n*                LENGTH FIELD                                         *\n***********************************************************************\n*\nJOBPARMS CLI   0(R2),ENDK          END OF TEXT STRING?????\n         BNE   JCLASS              NO, BRANCH\n***********************************************************************\n*        IF THE JOB CPU TIME LIMIT WAS NOT SPECIFIED ON THE JOB       *\n*        CARD, AN INTERNAL TEXT KEY WITH 1 MINUTE OF CPU TIME         *\n*        WILL BE ADDED TO THE TEXT FOR THE JOB CARD TO SET THE        *\n*        JOBS DEFAULT TIME TO 1 MINUTE.                               *\n***********************************************************************\n         L     R15,MAXTIME         LOAD TIME FROM JOB CARD\n         CH    R15,H#0             SEE IF DEFAULT (NOT ENTERED)\n         BNE   GETNEXT             NO, BRANCH\n         TM    JOBIND,JOBSTC+JOBTSO SEE IF STC OR TSO\n         BM    GETNEXT             YES, DO NOT RESET CPU TIME\n         MVC   MAXTIME,F#1         SET DEFAULT CPU TIME\n         MVC   0(8,R2),DEFTIME     SET DEFAULT CPU TIME TO 1\n         L     R6,TEXTSTAR         RELOAD START OF TEXT STRING\n         SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,3,STRLTH         LOAD TEXT STRING LENGTH\n         AH    R3,H#8              ADD LENGTH OF CPU TIME FIELD\n         STCM  R3,3,STRLTH         SAVE NEW STRING LENGTH\n         BE    GETNEXT             YES, GO GET ANOTHER STRING\n         EJECT\n***********************************************************************\n*        JOB CLASS                                                    *\n***********************************************************************\nJCLASS   CLI   0(R2),CLASSJK       SEE IF CLASS=KEY\n         BNE   JPERF               NO, BRANCH\n         MVC   INCLASS,3(R2)       SAVE INPUT CLASS\n         B     JOBLOOP             GO GET NEXT PARAM\n         EJECT\n***********************************************************************\n*        JOB PERFORM                                                  *\n***********************************************************************\nJPERF    CLI   0(R2),PRFMJK        SEE IF PERFORM= KEY\n         BNE   JADDR               NO, BRANCH\n         TM    JOBIND,JOBSTC       SEE IF ALLOWED\n         BO    JOBLOOP             YES, PERFORM OK ON JOB CARD\n         LA    R15,6               SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBLOOP             BYPASS FIELDS\n         EJECT\n***********************************************************************\n*        JOB ADDRSPC                                                  *\n***********************************************************************\nJADDR    CLI   0(R2),ADRSPJK       SEE IF ADDRSPC= KEY\n         BNE   JPRTY               NO, BRANCH\n         TM    JOBIND,JOBPROD      SEE IF ALLOWED\n         BO    JOBLOOP             YES, ADDRSPC OK ON JOB CARD\n         LA    R15,7               SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBLOOP             BYPASS FIELDS\n         EJECT\n***********************************************************************\n*        JOB PRTY                                                     *\n***********************************************************************\nJPRTY    CLI   0(R2),PRTYJK        SEE IF PRTY= KEY\n         BNE   JESTIME             NO, BRANCH\n         LA    R2,1(,R2)           INCREMENT PAST KEYWORD DESCR\n         SLR   R4,R4               CLEAR REGISTER FOR ICM\n         ICM   R4,1,0(R2)          INSERT NUMBER OF SUBPARAMETERS\n         BZ    JOBLOOP             NONE, IGNORE\n         LA    R2,1(,R2)           INCREMENT PAST CONTROL BYTE\n         SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,1,0(R2)          LOAD LENGTH OF PRTY VALUE\n         BZ    JOBLOOP             ZERO, NULL VALUE, EXIT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,PACK6            PACK PRTY\n         CP    DOUBLE,P#0          SEE IF PRTY=0\n         BE    JOBLOOP             YES, DEFAULT, ALWAYS OK\n         TM    JOBIND,JOBTECH+JOBPROD+JOBSTC SEE IF ALLOWED\n         BM    JOBLOOP             YES, PRTY OK ON JOB CARD\n*        B     JOBLOOP             ALLOW EVERYONE TO USE PRTY\n         LA    R15,49              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBLOOP             BYPASS FIELDS\n         EJECT\n***********************************************************************\n*        JOB TIME                                                     *\n***********************************************************************\nJESTIME  CLI   0(R2),TIMEJK        SEE IF TIME= KEY\n         BNE   JREGN               NO, BRANCH\n         LA    R2,1(,R2)           INCREMENT PAST KEYWORD DESCR\n         SLR   R4,R4               CLEAR REGISTER FOR ICM\n         ICM   R4,1,0(R2)          INSERT NUMBER OF SUBPARAMETERS\n         BZ    JOBLOOP             NONE, IGNORE\n         MVC   MAXTIME,F#1         SET DEFAULT CPU TIME\n         LA    R2,1(,R2)           INCREMENT PAST CONTROL BYTE\n         SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,1,0(R2)          LOAD LENGTH OF FIRST TIME FIELD\n         BZ    JOBLOOP             ZERO, ONLY SECONDS ENTERED, EXIT\n         LA    R4,1(,R2)           SAVE LOCATION OF TIME\n         LR    R5,R3               SAVE LENGTH OF TIME\nJESTIME1 CLI   0(R4),C'0'          SEE IF LESS THAN ZERO\n         BL    JESTIME2            YES, NOT NUMERIC, ERROR\n         CLI   0(R4),C'9'          SEE IF GREATER THAN NINE\n         BH    JESTIME2            YES, NOT NUMERIC, ERROR\n         LA    R4,1(,R4)           INCREMENT TO NEXT DIGIT OF REGION\n         BCT   R5,JESTIME1         LOOP UNTIL DONE\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,PACK5            PACK TIME\n         CVB   R15,DOUBLE          CONVERT TO BINARY\n         CH    R15,H#0             SEE IF ZERO\n         BE    JOBLOOP             ZERO, ONLY SECONDS ENTERED, EXIT\n         ST    R15,MAXTIME         SAVE CPU TIME\n         CH    R15,H#1440          SEE IF TIME = 1440\n         BNE   JOBLOOP             NO, BRANCH\n         TM    JOBIND,JOBSTC+JOBTECH SEE IF ALLOWED\n         BM    JOBLOOP             YES, TIME=1440 OK ON JOB CARD\n         LA    R15,9               SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBLOOP             GET OUT\nJESTIME2 LA    R15,8               SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBLOOP             GET OUT\n         EJECT\n***********************************************************************\n*        JOB REGION                                                   *\n***********************************************************************\nJREGN    CLI   0(R2),REGINJK       SEE IF REGION= KEY\n         BNE   JTYPRUN             NO, BRANCH\n         TM    JOBIND,JOBTSO+JOBTECH  SEE IF ALLOWED\n         BM    JOBLOOP             YES, REGION OK ON JOB CARD\n         TM    STRJINDC,JTXREGDF   SEE IF REGION WAS BY DEFAULT\n         BO    JOBLOOP             YES, BRANCH\n         LA    R15,10              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBLOOP             GET OUT\n         EJECT\n***********************************************************************\n*        JOB TYPRUN                                                   *\n***********************************************************************\nJTYPRUN  CLI   0(R2),TYPRUNJK      SEE IF TYPRUN= KEY\n         BNE   JOBLOOP             NO, BRANCH\n         LA    R2,1(,R2)           INCREMENT PAST KEYWORD DESCR\n         SLR   R4,R4               CLEAR REGISTER FOR ICM\n         ICM   R4,1,0(R2)          INSERT NUMBER OF SUBPARAMETERS\n         BZ    JOBLOOP             NONE, IGNORE\n         LA    R2,1(,R2)           INCREMENT PAST CONTROL BYTE\n         SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,1,0(R2)          LOAD LENGTH OF FIRST VALUE FIELD\n         CH    R3,H#4              SEE IF CORRECT LENGTH\n         BNE   JOBLOOP             NO, EXIT\n         CLC   1(4,R2),C#HOLD      SEE IF TYPRUN=HOLD\n         BNE   JOBLOOP             NO, EXIT\n         OI    JOBIND2,HELD        TURN ON HELD INDICATOR\n         B     JOBLOOP             GET OUT\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING         *\n*        PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR       *\n*        FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT      *\n*        WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER     *\n*        BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF       *\n*        SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.        *\n*        IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY    *\n*        A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH      *\n*        ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A         *\n*        SINGLE SUBPARAMETER.                                         *\n***********************************************************************\nJOBLOOP  L     R2,PARMADDR         RESTORE START OF PARAMETER ADDRESS\n         SLR   R5,R5               CLEAR REGISTER FOR ICM\n         LA    R2,1(,R2)           INCREMENT PAST KEYWORD\n         ICM   R5,1,0(R2)          LOAD SUBPARAMETER COUNT\n         BNZ   JOBLOOP1            OK, BRANCH INTO ROUTINE\n         LA    R2,1(,R2)           NONE, INCREMENT PAST COUNT\n         B     JOBLOOP5            AND GET OUT OF ROUTINE\nJOBLOOP1 LA    R2,1(,R2)           INCREMENT PAST KEYWORD DESCR\nJOBLOOP2 SLR   R4,R4               CLEAR REGISTER FOR ICM\n         ICM   R4,1,0(R2)          LOAD PARAMETER LENGTH\n         BNM   JOBLOOP3            HIGH BIT NOT ON, ONLY 1 PARAMETER\n         N     R4,F#127            'AND' OUT THE HIGH ORDER BIT\n         LA    R2,1(,R2)           INCREMENT PAST CONTROL BYTE\n         B     JOBLOOP4            BRANCH\nJOBLOOP3 LA    R4,1                SET PARAM COUNT TO 1\nJOBLOOP4 SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,1,0(R2)          LOAD PARAMETER LENGTH\n         LA    R2,1(R3,R2)         INCREMENT PAST PARM\n         BCT   R4,JOBLOOP4         LOOP UNTIL PROCESSED ALL PARMS\n         BCT   R5,JOBLOOP2         LOOP UNTIL PROCESSED ALL PARMS\nJOBLOOP5 ST    R2,PARMADDR         SAVE START OF PARAMETER ADDRESS\n         B     JOBPARMS            CONTINUE\n         EJECT\n***********************************************************************\n*        THE TEXT OF THE EXEC CARD TEXT IS AS FOLLOWS                 *\n*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        *\n*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          *\n*            3)  1 BYTE OF MISCELLANEOUS INDICATORS                   *\n*            4)  1 BYTE INDICATOR X'94' INDICATING EXEC POS INFORMATN *\n*            5)  1 BYTE NUMBER OF EXEC POSITIONAL PARAMETERS          *\n*                THE 1ST POS PARAMETER IS THE STEP NAME               *\n*                ALL OTHER POS PARAMETERS WILL BE IGNORED             *\n*            6)  VARIABLE LENGTH LIST OF EXEC POS PARAMETERS          *\n*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               *\n*            7)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS           *\n*                EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF   *\n*                POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF      *\n*                SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD *\n*                WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER *\n*                POSITIONAL PARAMETER.                                *\n***********************************************************************\n         EJECT\nEXECARD  EQU   *\n***********************************************************************\n*        UPDATE LAST EXEC TABLE (IF NEEDED) WITH UNIT INFO            *\n***********************************************************************\nEXECUPDT L     R7,LASTEXEC         LOAD ADDR OF LAST EXEC ENTRY\n         LTR   R7,R7               SEE IF ADDR = 0\n         BZ    EUPDT1              IF ZERO, NO UPDATE, BRANCH\n         MVC   ETAPES,TAPECNT      MOVE STEP TAPE UNIT CNT TO TABLE\n         MVC   EPRIVS,PRIVCNT      MOVE STEP PRIV UNIT CNT TO TABLE\n         XC    TAPECNT,TAPECNT     ZERO TAPE UNIT CNT\n         XC    PRIVCNT,PRIVCNT     ZERO PRIV UNIT CNT\n         XC    LASTEXEC,LASTEXEC   ZERO ADDR OF LAST EXEC ENTRY\nEUPDT1   TM    STREINDC,ETXPRCV    STATEMENT INVOKE A PROCEDURE?\n         BO    PROCARD             YES, BRANCH\n         EJECT\n***********************************************************************\n*        INITIALIZE NEW STEP ENTRY IN TABLE                           *\n***********************************************************************\nEXECINIT LH    R15,ENTCOUNT        LOAD TABLE ENTRY COUNT\n         LA    R15,1(,R15)         ADD 1 TO COUNT\n         CH    R15,MAXENTS         SEE IF MAXIMUM REACHED\n         BNL   TBLFULL             MAXIMUM REACHED, BAG THE JOB AND EXI\n         STH   R15,ENTCOUNT        STORE NEW ENTRY COUNT\n         L     R7,LASTENT          LOAD ADDR OF LAST ENTRY IN TABLE\n         LA    R7,ENTLEN(,R7)      INCREMENT TO NEXT ENTRY\n         ST    R7,LASTENT          SAVE ADDR OF LAST ENTRY IN TABLE\n         ST    R7,LASTEXEC         SAVE ADDR OF LAST EXEC ENTRY\n         MVI   ENTRYTYP,TYPEXEC    SET TO EXEC ENTRY\n         MVI   EENTRY,C' '         BLANK 1ST BYTE OF EXEC INFO\n         MVC   EENTRY+1(23),EENTRY BLANK MOST OF EXEC INFO\n         XC    ELIBIND(7),ELIBIND  ZERO REST OF EXEC INFO\n         MVC   EREGION,H#512       SET DEFAULT REGION SIZE TO 512K\n         TM    STREINDC,ETXPROC    STATEMENT FROM A PROC??\n         BNO   EINIT1              NO, BRANCH\n         MVC   EJSTEP,SAVEPROC     MOVE JOB STEP NAME TO TABLE\nEINIT1   TM    STREINDC,ETXSTPLB   STEP HAVE STEPLIB DD??\n         BNO   EINIT2              NO, BRANCH\n         OI    ELIBIND,ESTEPLIB    SET INDICATOR IN TABLE\nEINIT2   TM    JOBIND,JOBLIB       DOES JOB HAVE JOBLIB??\n         BNO   EXECSTAR            NO, BRANCH\n         OI    ELIBIND,EJOBLIB     SET INDICATOR IN TABLE\n         EJECT\nEXECSTAR MVC   ECARDNO,CARDNO      SAVE CARD NUMBER OF THIS STATEMENT\n         LA    R2,STREKEY          LOAD START OF TRUE TEXT\n         ST    R2,PARMADDR         SAVE START OF PARAMETER ADDRESS\nEXECPARM CLI   0(R2),ENDK          END OF TEXT STRING?????\n         BE    PROCSEAR            YES, GO SEE IF FROM A PROC\n         EJECT\n***********************************************************************\n*        EXEC STEPNAME                                                *\n***********************************************************************\nESTEPN   CLI   0(R2),EXECK         SEE IF STEPNAME KEY\n         BNE   EPGM                NO, BRANCH\n         SLR   R4,R4               CLEAR REG FOR ICM\n         ICM   R4,1,1(R2)          LOAD NUMBER OF SUBPARAMS\n         BZ    EXELOOP             ZERO, NO STEP NAME\n         SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,1,2(R2)          LOAD LENGTH OF 1ST POS SUBPARAM\n         BZ    EXELOOP             ZERO, NO STEP NAME, BRANCH\n         CH    R3,H#8              SEE IF MAX LENGTH EXCEEDED\n         BNH   *+16                NO, CONTINUE\n         LA    R15,11              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         TM    STREINDC,ETXPROC    STATEMENT FROM A PROC\n         BO    ESTEPN1             YES, THEN NAME IS PROC STEP NAME\n         EX    R3,MOVE5            MOVE NAME TO JOBSTEP NAME\n         B     EXELOOP             BRANCH\nESTEPN1  EX    R3,MOVE6            MOVE NAME TO PROCSTEP NAME\n         B     EXELOOP             BRANCH\n         EJECT\n***********************************************************************\n*        EXEC PGM                                                     *\n***********************************************************************\nEPGM     CLI   0(R2),PGMEK         SEE IF PGM= KEY\n         BNE   EREGN               NO, BRANCH\n         SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,1,2(R2)          LOAD LENGTH OF PGM NAME\n         BZ    EXELOOP             ZERO, NULL, BRANCH\n         BM    EXELOOP             HIGH BIT ON, REFERBACK, IGNORE\n         CH    R3,H#8              SEE IF LENGTH > 8\n         BNH   *+16                NO, CONTINUE\n         LA    R15,12              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE7            MOVE PGM NAME TO TABLE\n         SPACE\n         CLC   PGMCICS,3(R2)       Q. CICS PGM NAME ?\n         BNE   CHK7074             NO, TRY 7074\n         OI    RESOURCE+1,PCICS    YES, ATTACH 'CICS' RESOURCE\n         B     EXELOOP             & GET NEXT EXEC PARM\nCHK7074  CLC   PGM7074,3(R2)       Q. PGM NAME 7074 ?\n         BNE   CHK1401             NO, TRY 1401\n         OI    RESOURCE+1,P7074    YES,ATTACH '7074' RESOURCE\n         B     EXELOOP             & GET NEXT EXEC PARM\nCHK1401  CLC   PGM1401,3(R2)       Q. PGM NAME 1401 ?\n         BNE   CHKXMIT             NO, TRY XMISSIONS\n         OI    RESOURCE,P1401      YES, ATTACH '1401' RESOURCE\n         B     EXELOOP             & GET NEXT EXEC PARM\nCHKXMIT  CLC   PGMNDM,3(R2)        Q. PGM NAME FOR NDM   ?\n         BNE   U7LOAD              NO, GET NEXT EXEC PARM\n         OI    RESOURCE,NDM        YES, ATTACH 'NDM' RESOURCE\n         B     EXELOOP             BRANCH\nU7LOAD   CLC   PGMUC7,3(R2)        Q. PGM NAME FOR UCC7 LOAD PROG ?\n         BNE   EXELOOP             NO, GET NEXT EXEC PARM\n         MVI   U7TEST,C'Y'         MOVE TO UCC7 LOAD PROGRAM\n         B     EXELOOP             BRANCH\n         EJECT\n***********************************************************************\n*        EXEC REGION                                                  *\n***********************************************************************\nEREGN    CLI   0(R2),REGINEEK      SEE IF REGION= KEY\n         BNE   EREGN@              NO, BRANCH\n         LA    R2,1(,R2)           INCREMENT PAST KEYWORD\n         SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,1,0(R2)          LOAD SUBPARAMETER COUNT\n         BZ    EXELOOP             NO SUBPARAMETERS, BRANCH\n         LA    R2,1(,R2)           INCREMENT PAST NUMBER OF FIELDS\n         ICM   R3,1,0(R2)          LOAD LENGTH OF REGION PARAM\n         BZ    EXELOOP             ZERO, NULL, BRANCH\n         CH    R3,H#8              SEE IF MAX LENGTH EXCEEDED\n         BNH   *+16                NO, CONTINUE\n         LA    R15,13              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         CH    R3,H#3              SEE IF AT LEAST 3 CHARACTERS\n         BL    EXELOOP             NO, MAX IS 99K, IGNORE\n         LA    R15,0(R3,R2)        POINT TO LAST CHAR OF REGION SIZE\n         NI    ELIBIND,255-EREGIONK TURN OFF REGION SIZE IN 'K' IND\n         CLI   0(R15),C'K'         END IN 'K'\n         BNE   EREGN1              NO, BRANCH\n         BCTR  R3,0                REDUCE REGION LENGTH BY 1\n         OI    ELIBIND,EREGIONK    REMEMBER REGION SIZE IN 'K'\nEREGN1   LA    R4,1(,R2)           SAVE LOCATION OF REGION\n         LR    R5,R3               SAVE LENGTH OF REGION\nEREGN2   CLI   0(R4),C'0'          SEE IF LESS THAN ZERO\n         BL    EREGN4              YES, NOT NUMERIC, ERROR\n         CLI   0(R4),C'9'          SEE IF GREATER THAN NINE\n         BH    EREGN4              YES, NOT NUMERIC, ERROR\n         LA    R4,1(,R4)           INCREMENT TO NEXT DIGIT OF REGION\n         BCT   R5,EREGN2           LOOP UNTIL DONE\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,PACK1            PACK REGION SIZE\n         CVB   R15,DOUBLE          CONVERT REGION SIZE TO BINARY\n         TM    ELIBIND,EREGIONK    WAS REGION SPECIFIED IN 'K'\n         BO    EREGN3              YES, BRANCH\n         SRA   R15,10              DIVIDE BY 1024 FOR 'K' VALUE\nEREGN3   STH   R15,EREGION         STORE REGION SIZE IN TABLE\n         B     EXELOOP             BRANCH\nEREGN4   LA    R15,14              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         EJECT\n***********************************************************************\n*        EXEC REGION.                                                 *\n***********************************************************************\nEREGN@   CLI   0(R2),REGINPEK      SEE IF REGION. KEY\n         BNE   ETIME               NO, BRANCH\n         LA    R2,1(,R2)           INCREMENT PAST KEYWORD\n         SLR   R4,R4               ZERO REGISTER\n         ICM   R4,1,0(R2)          LOAD NUMBER OF SUBPARAMS\n         BNZ   *+16                NOT ZERO, BRANCH\n         LA    R15,13              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         CH    R4,H#2              CHECK NUMBER OF SUBPARAMS\n         BNH   *+16                NOT > 2, OK\n         LA    R15,13              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         LA    R2,1(,R2)           INCREMENT PAST NUMBER OF SUBPARAMETE\n         SLR   R3,R3               ZERO REGISTER\n         ICM   R3,1,0(R2)          LOAD LENGTH OF STEPNAME\n         BNZ   *+16                NOT ZERO, BRANCH\n         LA    R15,13              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         CH    R3,H#8              SEE IF MAX LENGTH EXCEEDED\n         BNH   *+16                NO, CONTINUE\n         LA    R15,13              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,COMPARE3         SEE IF OVERRIDE FOR CURRENT STEP\n         BNE   EXELOOP             NO, GET OUT\n         LA    R2,2(R2,R3)         SET REG TO START OF 2ND PARAM\n         ICM   R3,1,0(R2)          LOAD LENGTH OF 2ND PARAM\n         BZ    EXELOOP             ZERO, NULL, BRANCH\n         CH    R3,H#8              SEE IF MAX LENGTH EXCEEDED\n         BNH   *+16                NO, CONTINUE\n         LA    R15,13              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         CH    R3,H#3              SEE IF AT LEAST 3 CHARACTERS\n         BL    EXELOOP             NO, MAX IS 99K, IGNORE\n         LA    R15,0(R3,R2)        POINT TO LAST CHAR OF REGION SIZE\n         NI    ELIBIND,255-EREGIONK TURN OFF REGION SIZE IN 'K' IND\n         CLI   0(R15),C'K'         END IN 'K'\n         BNE   EREGN@1             NO, BRANCH\n         BCTR  R3,0                REDUCE REGION LENGTH BY 1\n         OI    ELIBIND,EREGIONK    REMEMBER REGION SIZE IN 'K'\nEREGN@1  LA    R4,1(,R2)           SAVE LOCATION OF REGION\n         LR    R5,R3               SAVE LENGTH OF REGION\nEREGN@2  CLI   0(R4),C'0'          SEE IF LESS THAN ZERO\n         BL    EREGN@4             YES, NOT NUMERIC, ERROR\n         CLI   0(R4),C'9'          SEE IF GREATER THAN NINE\n         BH    EREGN@4             YES, NOT NUMERIC, ERROR\n         LA    R4,1(,R4)           INCREMENT TO NEXT DIGIT OF REGION\n         BCT   R5,EREGN@2          LOOP UNTIL DONE\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,PACK4            PACK REGION SIZE\n         CVB   R15,DOUBLE          CONVERT REGION SIZE TO BINARY\n         TM    ELIBIND,EREGIONK    WAS REGION SPECIFIED IN 'K'\n         BO    EREGN@3             YES, BRANCH\n         SRA   R15,10              DIVIDE BY 1024 FOR 'K' VALUE\nEREGN@3  STH   R15,EREGION         STORE REGION SIZE IN TABLE\n         B     EXELOOP             BRANCH\nEREGN@4  LA    R15,14              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         EJECT\n***********************************************************************\n*        EXEC TIME                                                    *\n***********************************************************************\nETIME    CLI   0(R2),TIMEEEK       SEE IF TIME= KEY\n         BNE   ETIME@              NO, BRANCH\n         LA    R2,1(,R2)           INCREMENT PAST KEYWORD DESCR\n         SLR   R4,R4               CLEAR REGISTER FOR ICM\n         ICM   R4,1,0(R2)          LOAD NUMBER OF SUBPARAMETERS\n         BZ    EXELOOP             ZERO, IGNORE\n         LA    R2,1(,R2)           INCREMENT PAST CONTROL BYTE\nETIME1   SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,1,0(R2)          LOAD LENGTH OF FIRST TIME FIELD\n         CH    R3,H#4              COMPARE LENGTH TO 4\n         BL    EXELOOP             LT 4, GET OUT\n         BE    *+16                EQ 4, COMPARE\n         LA    R15,15              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         CLC   1(4,R2),C#1440      SEE IF TIME = 1440\n         BNE   EXELOOP             NO, BRANCH\n         TM    JOBIND,JOBSTC+JOBTECH SEE IF ALLOWED\n         BM    EXELOOP             YES, TIME=1440 OK ON JOB CARD\n         LA    R15,16              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         EJECT\n***********************************************************************\n*        EXEC TIME.                                                   *\n***********************************************************************\nETIME@   CLI   0(R2),TIMEPEK       SEE IF TIME. KEY\n         BNE   EPERF               NO, BRANCH\n         SLR   R3,R3               ZERO WORK REG\n         SLR   R4,R4               ZERO WORK REG\n         LA    R2,1(,R2)           INCREMENT PAST KEYWORD\n         ICM   R4,1,0(R2)          LOAD NUMBER OF SUBPARAMS\n         BZ    EXELOOP             NO SUBPARAMS, BRANCH\n         CH    R4,H#3              SEE IF MORE THAN 3 SUBPARAMS\n         BNH   *+16                NO, BRANCH\n         LA    R15,15              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         LA    R2,1(,R2)           INCREMENT PAST NUMBER OF SUBPARAMETE\n         CH    R4,H#2              SEE IF AT LEAST 2 SUBPARAMS\n         BL    EXELOOP             ONLY ONE, IGNORE STEPNAME\n         ICM   R3,1,0(R2)          LOAD LENGTH OF STEPNAME\n         BZ    EXELOOP             NO STEPNAME, BRANCH\n         CH    R3,H#8              SEE IF MAX LENGTH EXCEEDED\n         BNH   *+16                NO, BRANCH\n         LA    R15,15              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,COMPARE3         SEE IF CORRECT STEPNAME\n         BNE   EXELOOP             NO, GET OUT\n         LA    R2,2(R2,R3)         LOAD ADDR OF 2ND SUBPARAM\n         IC    R3,0(R2)            LOAD LENGTH OF MINUTES PORTION\n         CH    R3,H#4              COMPARE LENGTH TO 4\n         BL    EXELOOP             LT 4, GET OUT\n         BE    *+16                EQ 4, COMPARE\n         LA    R15,15              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         CLC   1(4,R2),C#1440      SEE IF TIME = 1440\n         BNE   EXELOOP             NO, BRANCH\n         TM    JOBIND,JOBSTC+JOBTECH SEE IF ALLOWED\n         BM    EXELOOP             YES, TIME=1440 OK ON JOB CARD\n         LA    R15,16              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         EJECT\n***********************************************************************\n*        EXEC PERFORM                                                 *\n***********************************************************************\nEPERF    CLI   0(R2),PRFMEEK       SEE IF PERFORM= KEY\n         BNE   EPERF@              NO, BRANCH\n         TM    JOBIND,JOBTSO+JOBSTC+JOBTECH+JOBPROD+JOBOPER ALLOWED\n         BM    EXELOOP             YES, PERFORM OK ON EXEC CARD\n         LA    R15,17              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         EJECT\n***********************************************************************\n*        EXEC PERFORM.                                                *\n***********************************************************************\nEPERF@   CLI   0(R2),PRFMPEK       SEE IF PERFORM. KEY\n         BNE   EADDR               NO, BRANCH\n         TM    JOBIND,JOBTSO+JOBSTC+JOBTECH+JOBPROD SEE IF ALLOWED\n         BM    EXELOOP             YES, PERFORM OK ON EXEC CARD\n         LA    R15,17              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         EJECT\n***********************************************************************\n*        EXEC ADDRSPC                                                 *\n***********************************************************************\nEADDR    CLI   0(R2),ADRSPEEK      SEE IF ADDRSPC= KEY\n         BNE   EADDR@              NO, BRANCH\n         TM    JOBIND,JOBSTC+JOBTECH SEE IF ALLOWED\n         BM    EXELOOP             YES, ADDRSPC OK ON EXEC CARD\n         LA    R15,18              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         EJECT\n***********************************************************************\n*        EXEC ADDRSPC.                                                *\n***********************************************************************\nEADDR@   CLI   0(R2),ADRSPPEK      SEE IF ADDRSPC. KEY\n         BNE   EDPRTY              NO, BRANCH\n         TM    JOBIND,JOBSTC+JOBTECH SEE IF ALLOWED\n         BM    EXELOOP             YES, ADDRSPC OK ON EXEC CARD\n         LA    R15,18              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         EJECT\n***********************************************************************\n*        EXEC DPRTY                                                   *\n***********************************************************************\nEDPRTY   CLI   0(R2),SDPEEK        SEE IF  DPRTY= KEY\n         BNE   EDPRTY@             NO, BRANCH\n         TM    JOBIND,JOBSTC       SEE IF ALLOWED\n         BO    EXELOOP             YES, DPRTY OK ON EXEC CARD\n         LA    R15,19              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         EJECT\n***********************************************************************\n*        EXEC DPRTY.                                                  *\n***********************************************************************\nEDPRTY@  CLI   0(R2),SDPPEK        SEE IF  DPRTY. KEY\n         BNE   EXELOOP             NO, BRANCH\n         TM    JOBIND,JOBSTC       SEE IF ALLOWED\n         BO    EXELOOP             YES, DPRTY OK ON EXEC CARD\n         LA    R15,19              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING         *\n*        PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR       *\n*        FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT      *\n*        WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER     *\n*        BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF       *\n*        SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.        *\n*        IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY    *\n*        A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH      *\n*        ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A         *\n*        SINGLE SUBPARAMETER.                                         *\n***********************************************************************\nEXELOOP  L     R2,PARMADDR         RESTORE START OF PARAMETER ADDRESS\n         SLR   R5,R5               CLEAR REGISTER FOR ICM\n         LA    R2,1(,R2)           INCREMENT PAST KEYWORD\n         ICM   R5,1,0(R2)          LOAD SUBPARAMETER COUNT\n         BNZ   EXELOOP1            OK, BRANCH INTO ROUTINE\n         LA    R2,1(,R2)           NONE, INCREMENT PAST COUNT\n         B     EXELOOP5            AND GET OUT OF ROUTINE\nEXELOOP1 LA    R2,1(,R2)           INCREMENT PAST KEYWORD DESCR\nEXELOOP2 SLR   R4,R4               CLEAR REGISTER FOR ICM\n         ICM   R4,1,0(R2)          LOAD PARAMETER LENGTH\n         BNM   EXELOOP3            HIGH BIT NOT ON, ONLY 1 PARAMETER\n         N     R4,F#127            'AND' OUT THE HIGH ORDER BIT\n         LA    R2,1(,R2)           INCREMENT PAST CONTROL BYTE\n         B     EXELOOP4            BRANCH\nEXELOOP3 LA    R4,1                SET PARAM COUNT TO 1\nEXELOOP4 SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,1,0(R2)          LOAD PARAMETER LENGTH\n         LA    R2,1(R3,R2)         INCREMENT PAST PARM\n         BCT   R4,EXELOOP4         LOOP UNTIL PROCESSED ALL PARMS\n         BCT   R5,EXELOOP2         LOOP UNTIL PROCESSED ALL PARMS\nEXELOOP5 ST    R2,PARMADDR         SAVE START OF PARAMETER ADDRESS\n         B     EXECPARM            CONTINUE\n         EJECT\n***********************************************************************\n*        THE TEXT OF THE DD CARD TEXT IS AS FOLLOWS                   *\n*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        *\n*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          *\n*            3)  1 BYTE OF MISCELLANEOUS INDICATORS                   *\n*            4)  1 BYTE INDICATOR X'6E' INDICATING DD POS INFORMATION *\n*            5)  1 BYTE NUMBER OF DD POSITIONAL PARAMETERS            *\n*                THE 1ST POS PARAMETER IS THE DDNAME IF PRESENT       *\n*                ALL OTHER POS PARAMETERS WILL BE IGNORED             *\n*            6)  VARIABLE LENGTH LIST OF DD POS PARAMETERS            *\n*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               *\n*            7)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS           *\n*                EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF   *\n*                POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF      *\n*                SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD *\n*                WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER *\n*                POSITIONAL PARAMETER.                                *\n***********************************************************************\nDDCARD   TM    STRDINDC,DTXDDNM    SEE IF DD DDNAME= STATEMENT\n         BO    GETNEXT             YES, BYPASS\n         TM    STRDINDC,DTXDYNAM   SEE IF DD DYNAM STATEMENT\n         BO    GETNEXT             YES, BYPASS\n         TM    STRDINDC,DTXSYSIN   SEE IF DD INPUT SPOOL FILE\n         BO    GETNEXT             YES, BYPASS\n         EJECT\n***********************************************************************\n*        INITIALIZE TEMPORARY ENTRY WHICH WILL BE USED                *\n*        IF PRIV OR TAPE UNIT                                         *\n***********************************************************************\n         XC    UNITIND,UNITIND     ZERO UNIT TYPE IND\n         XC    DISPIND,DISPIND     ZERO DISP IND\n         MVI   UNITCOUN,X'01'      SET DEFAULT UNIT COUNT TO 1\n         MVI   TENTRY,C' '         BLANK FIRST BYTE OF TEMP ENTRY\n         MVC   TENTRY+1(58),TENTRY BLANK ENTIRE TEMP ENTRY\n         XC    TTYPE,TTYPE         ZERO TEMPORARY UNIT TYPE\n         XC    TVOLSER,TVOLSER     ZERO TEMP 1ST VOLSER\nDDSTART  LA    R2,STRDKEY          LOAD START OF TRUE TEXT\n         ST    R2,PARMADDR         SAVE START OF PARAMETER ADDRESS\n         OI    DDIND,DDBEGIN       TURN ON FIRST ENTRY INDICATOR\nDDPARM   CLI   0(R2),ENDK          END OF TEXT STRING??\n         BE    DDEND               YES, GO CHECK FOR UPDATE\n         EJECT\n***********************************************************************\n*        DD DDNAME                                                    *\n***********************************************************************\nDDDNAME  CLI   0(R2),DDK           SEE IF DDNAME KEY\n         BNE   DDDUMMY             NO, BRANCH\n         SLR   R4,R4               CLEAR REG FOR ICM\n         ICM   R4,1,1(R2)          LOAD NUMBER OF SUBPARAMS\n         BZ    DDLOOP1             ZERO, NO SUBPARAMS\n         SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,1,2(R2)          LOAD LENGTH OF DDNAME\n         BZ    DDLOOP1             YES, CONCATINATED DD, LOOP\n         CH    R3,H#8              SEE IF MAX LENGTH EXCEEDED\n         BNH   *+16                NO, CONTINUE\n         LA    R15,20              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP1             GET OUT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE8            MOVE DDNAME TO TEMP ENTRY\n         B     DDLOOP1             GO GET NEXT PARAM\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DD DUMMY                                                     *\n*                                                                     *\n*        THIS KEYWORD WILL BE IN THE INTERNAL TEXT EVEN IF            *\n*        OVERRIDDEN IN A PROCEDURE.  IT WILL BE THE FIRST             *\n*        ENTRY IN THE STRING AFTER THE DDNAME IF TRUELY A             *\n*        DUMMY FILE.  IT WILL BE LAST IF OVERRIDDEN.                  *\n*                                                                     *\n***********************************************************************\nDDDUMMY  CLI   0(R2),DUMMK         SEE IF DUMMY KEY\n         BNE   DDSNAME             NO, BRANCH\n         TM    DDIND,DDBEGIN       TEST FIRST ENTRY SWITCH\n         BO    GETNEXT             FIRST PARM, REALLY A DUMMY\n         B     DDLOOP              NOT FIRST, IGNORE IT\n         EJECT\n***********************************************************************\n*        DD DSNAME                                                    *\n***********************************************************************\nDDSNAME  CLI   0(R2),DSNAMEK       SEE IF DSNAME KEY\n         BNE   DDISP               NO, BRANCH\n         SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,1,2(R2)          LOAD LENGTH OF DSN\n         BZ    DDLOOP              ZERO, NULL, BRANCH\n         BNM   DSNSTD              HIGH BIT NOT ON, STANDARD DSN\n         CLI   4(R2),C'*'          SEE IF 1ST PARAM = * (REFERBACK)\n         BE    DSNREFBK            YES, REFERBACK\n***********************************************************************\n*        DSNAME PROBABLY A GDG                                        *\n***********************************************************************\nDSNGDG   N     R3,F#127            TURN OFF HIGH ORDER BIT\n         CH    R3,H#2              SEE IF TWO SUBPARAMS\n         BE    *+16                YES, BRANCH\n         LA    R15,21              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         LA    R4,3(,R2)           LOAD ADDR OF START OF 1ST ENTRY\n         IC    R3,0(R4)            LOAD LENGTH OF 1ST ENTRY\n         CH    R3,H#35             SEE IF MAX LENGTH EXCEEDED\n         BNH   *+16                NOT EXCEEDED, BRANCH\n         LA    R15,22              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE14           MOVE 1ST PART DSN TO TEMP ENTRY\n         LA    R3,1(,R3)           MAKE TRUE LENGTH AGAIN\n         LA    R4,1(R3,R4)         INCREMENT TO 2ND ENTRY\n         LA    R5,TDSN             LOAD ADDR OF TEMPORARY DSN\n         AR    R5,R3               LOAD ADDR WITHIN TDSN FOR GEN #\n         LR    R15,R3              SAVE LENGTH OF 1ST PART DSN\n         ICM   R3,1,0(R4)          LOAD LENGTH OF 2ND PART DSN\n         BNZ   *+16                NOT ZERO, BRANCH\n         LA    R15,21              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         AR    R15,R3              ADD NEW LENGTH OF 2ND PART TO 1ST\n         CH    R15,H#42            SEE IF TOTAL LENGTH EXCEEDS MAX\n         BNH   *+16                NO, BRANCH\n         LA    R15,22              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         MVI   0(R5),C'('          PUT PARENS FOR GEN #\n         LA    R5,1(,R5)           INCREMENT TO START TRUE GEN #\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE15           MOVE GEN # TO TDSN\n         LA    R5,1(R3,R5)         INCREMENT TO END OF TDSN FIELD\n         MVI   0(R5),C')'          FINISH PARENS FOR GEN #\n         B     DDLOOP              GO GET NEXT ENTRY\n***********************************************************************\n*        DSNAME PROBABLY A REFERBACK                                  *\n***********************************************************************\nDSNREFBK BAL   R14,REFBACK         GO TO REFERBACK RTN\n         MVC   TDSN,REFDSN         SAVE REFERBACK DSNAME\n         B     DDLOOP              GO GET NEXT ENTRY\n***********************************************************************\n*        DSNAME PROBABLY STANDARD                                     *\n***********************************************************************\nDSNSTD   CH    R3,H#44             SEE IF > MAX LENGTH\n         BNH   *+16                NO, BRANCH\n         LA    R15,22              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         CLC   3(8,R2),NULLFILE    SEE IF DSN=NULLFILE\n         BE    GETNEXT             YES, DUMMY, IGNORE STATEMENT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE9            MOVE DSN TO TEMP ENTRY\n         B     DDLOOP              GO GET NEXT ENTRY\n         EJECT\n***********************************************************************\n*        DD DISP                                                      *\n***********************************************************************\nDDISP    CLI   0(R2),DISPK         SEE IF DISP= KEYWORD\n         BNE   DUNIT               NO, BRANCH\n         SLR   R4,R4               CLEAR REG FOR ICM\n         ICM   R4,1,1(R2)          LOAD NUMBER SUBPARAMS\n         BZ    DDLOOP              ZERO, NULL, BRANCH\n         LA    R2,2(,R2)           LOAD START ADDR OF SUBPARAMS\n         CH    R4,H#3              SEE IF NUMBER > 3\n         BNH   *+16                NO, CONTINUE\n         LA    R15,23              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         SLR   R5,R5               ZERO WORK REG\nDSPLOO1  LA    R5,1(,R5)           ADD 1 TO COUNTER\n         CR    R5,R4               SEE IF ALL PROCESSED\n         BH    DISPCHK             YES, GO CHECK RESULTS\n         SLR   R3,R3               ZERO WORK REG\n         IC    R3,0(R2)            LOAD LEN OF PARAM\n         CH    R5,H#1              SEE IF 1ST PARAM\n         BE    DSPLOO2             YES, BRANCH TO PROCESS\n         CH    R5,H#2              SEE IF 2ND PARAM\n         BE    DSPLOO7             YES, BRANCH TO PROCESS\n         B     DSPLOO9             BRANCH TO PROCESS\n***********************************************************************\n*         FIRST DISP PARAMETER                                        *\n***********************************************************************\nDSPLOO2  LTR   R3,R3               SEE IF LENGTH = 0\n         BZ    DSPLOO3             YES, GO SET TO NEW\n         CLC   1(3,R2),C#NEW       SEE IF NEW\n         BNE   DSPLOO4             NO, BRANCH\nDSPLOO3  OI    DISPIND,NEW         SET TO NEW\n         B     DSPLOO14            GO GET NEXT\nDSPLOO4  CLC   1(3,R2),C#SHR       SEE IF SHR\n         BNE   DSPLOO5             NO, BRANCH\n         OI    DISPIND,SHR         SET TO SHR\n         B     DSPLOO14            GO GET NEXT\nDSPLOO5  CLC   1(3,R2),C#OLD       SEE IF OLD\n         BNE   DSPLOO6             NO, MUST BE \"MOD\", BRANCH\n         OI    DISPIND,OLD         SET TO OLD\n         B     DSPLOO14            GO GET NEXT\nDSPLOO6  OI    DISPIND,MOD         SET TO MOD\n         B     DSPLOO14            GO GET NEXT\n***********************************************************************\n*         SECOND DISP PARAMETER                                       *\n***********************************************************************\nDSPLOO7  LTR   R3,R3               SEE IF LENGTH = 0\n         BNZ   DSPLOO9             NOT ZERO, NO DEFAULT\n         TM    DISPIND,OLD         SEE IF OLD\n         BO    DSPLOO8             YES, GO SET DEFAULT TO KEEP\n         TM    DISPIND,SHR         SEE IF SHR\n         BO    DSPLOO8             YES, GO SET DEFAULT TO KEEP\n         TM    DISPIND,MOD         SEE IF MOD\n         BO    DSPLOO8             YES, GO SET DEFAULT TO KEEP\n         OI    DISPIND,DELETE      SET DEFAULT TO DELETE FOR \"NEW\"\n         B     DSPLOO14            GO GET NEXT\nDSPLOO8  OI    DISPIND,KEEP        SET TO KEEP\n         B     DSPLOO14            GO GET NEXT\n***********************************************************************\n*         THIRD DISP PARAMETER                                        *\n***********************************************************************\nDSPLOO9  LTR   R3,R3               SEE IF LENGTH = 0\n         BZ    DSPLOO14            YES, USE DEFAULT OF PREVIOUS PARAMET\n         CLC   1(4,R2),C#KEEP      SEE IF KEEP\n         BNE   DSPLOO10            NO, BRANCH\n         OI    DISPIND,KEEP        SET TO KEEP\n         B     DSPLOO14            GO GET NEXT\nDSPLOO10 CLC   1(4,R2),C#PASS      SEE IF PASS\n         BNE   DSPLOO11            NO, BRANCH\n         OI    DISPIND,PASS        SET TO PASS\n         B     DSPLOO14            GO GET NEXT\nDSPLOO11 CLC   1(5,R2),C#CATLG     SEE IF CATLG\n         BNE   DSPLOO12            NO, BRANCH\n         OI    DISPIND,CATLG       SET TO CATLG\n         B     DSPLOO14            GO GET NEXT\nDSPLOO12 CLC   1(6,R2),C#DELETE    SEE IF DELETE\n         BNE   DSPLOO13            NO, GO SET TO \"UNCATLG\"\n         OI    DISPIND,DELETE      SET TO DELETE\n         B     DSPLOO14            GO GET NEXT\nDSPLOO13 OI    DISPIND1,UNCATLG    SET TO UNCATLG\nDSPLOO14 LA    R2,1(R3,R2)         INCREMENT TO NEXT ENTRY\n         B     DSPLOO1             LOOP\n***********************************************************************\n*         CHECK RESULTS OF PROCESSING ALL DISP PARAMETERS             *\n*         IF ONLY 1 DISP PARAMETER WAS ENTERED, THE DEFAULT           *\n*         FOR THE SECOND PARAMETER MUST BE DETERMINED.                *\n***********************************************************************\nDISPCHK  CH    R4,H#1              SEE IF ONLY 1 ENTRY\n         BNE   DISPEND             NO, DO NOT SET DEFAULT\n         TM    DISPIND,OLD         SEE IF OLD\n         BO    DISPCHK2            YES, BRANCH\n         TM    DISPIND,SHR         SEE IF SHR\n         BO    DISPCHK2            YES, BRANCH\n         TM    DISPIND,MOD         SEE IF MOD\n         BO    DISPCHK2            YES, BRANCH\n***********************************************************************\n*        DISP=NEW  DEFAULT TO DELETE                                  *\n***********************************************************************\nDISPCHK1 OI    DISPIND,DELETE      SET TO DELETE\n         B     DISPEND             GET OUT\n***********************************************************************\n*        DISP=OLD, MOD, OR SHR  DEFAULT TO KEEP                       *\n***********************************************************************\nDISPCHK2 OI    DISPIND,KEEP        SET TO KEEP\nDISPEND  B     DDLOOP              GO GET NEXT PARAM\n         EJECT\n***********************************************************************\n*        DD UNIT                                                      *\n***********************************************************************\nDUNIT    CLI   0(R2),UNITK         SEE IF UNIT= PARAM\n         BNE   DAFF                NO, BRANCH\n         ICM   R4,1,1(R2)          GET NUMBER OF POS SUBPARAMS\n         BZ    DDLOOP              ZERO, NO POS SUBPARAMS\n         CH    R4,H#3              SEE IF NUMBER > 3\n         BNH   *+16                NO, CONTINUE\n         LA    R15,24              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         LA    R2,2(,R2)           LOAD START OF POS PARAMS\n         SLR   R5,R5               ZERO WORK REG\n***********************************************************************\n*        LOOP ON NUMBER OF PARAMETERS.  NOTE THAT THE FIRST           *\n*        PARAMETER (UNITNAME) AND THE SECOND PARAMETER (UNIT          *\n*        COUNT) ARE ALL WE ARE INTERESTED IN.                         *\n***********************************************************************\nUNITLOO1 LA    R5,1(,R5)           ADD 1 TO COUNT\n         CR    R5,R4               SEE IF PROCESSED ALL SUBPARAMS\n         BH    DDLOOP              YES, GO GET NEXT PARM\n         SLR   R3,R3               ZERO WORK REG\n         ICM   R3,1,0(R2)          LOAD LENGTH OF SUBPARAM\n         BZ    UNITLOO2            ZERO, GO GET NEXT SUBPARAM\n         CH    R3,H#8              SEE IF LENGTH > 8\n         BNH   *+16                NO, CONTINUE\n         LA    R15,24              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         CH    R5,H#1              SEE IF 1ST POS SUBP\n         BE    UNITNM1             YES, BRANCH\n         CH    R5,H#2              SEE IF 2ND POS SUBP\n         BE    UNITCT              YES, BRANCH\n         B     UNITLOO2            ANYTHING ELSE NOT WANTED\n***********************************************************************\n*        PROCESS UNIT NAME                                            *\n***********************************************************************\nUNITNM1  SLR   R15,R15             CLEAR REG 15\n         LA    R1,DEVTABLE         LOAD ADDR OF DEV TABLE\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         CH    R3,H#2              Q. POSSIBLE ABSOLUTE ALLOC(CUU)?\n         BNE   UNITNM2             NO, CHK FOR CLASS DEVICES\n         CLI   1(R2),C'0'          Q. CHAN NOS  NUMERIC?\n         BL    UNITNM2             NO, CAN'T BE DEDICATED DEVICE\n         OI    RESOURCE+1,DEDICATE YES, ADD 'DEDICATE' RESOURCE\n***********************************************************************\n*        SEARCH THE DEVICE TABLE FOR A MATCH ON UNIT NAME TO          *\n*        DETERMINE THE ATTRIBUTES OF THE UNIT NAME.                   *\n***********************************************************************\nUNITNM2  CLI   1(R1),X'00'         SEE IF END OF TABLE\n         BE    UNITNM3             YES, BRANCH\n         IC    R15,1(R1)           INSERT LENGTH OF UNIT NAME\n         EX    R15,COMPARE2        SEE IF UNIT NAME MATCH\n         BE    UNITNM3             YES, BRANCH\n         LA    R1,10(,R1)          INCREMENT TO NEXT ENTRY\n         B     UNITNM2             LOOP\nUNITNM3  LA    R3,1(,R3)           MAKE ORIG LENGTH\n         OC    UNITIND,0(R1)       'OR' IN THE UNIT TYPE BITS\n         B     UNITLOO2            GO PROCESS NEXT POS PARAM\nUNITCT   CLI   1(R2),C'P'          PARALLEL MOUNTING?\n         BNE   UNITCT1             NO, BRANCH\n         MVI   UNITCOUN,C'P'       SET UNIT COUNT TO 'P'\n         B     UNITLOO2\n***********************************************************************\n*        PROCESS UNIT COUNT                                           *\n***********************************************************************\nUNITCT1  LR    R15,R3              SAVE LENGTH OF UNIT COUNT\n         LA    R14,1(,R2)          LOAD ADDRESS OF UNIT COUNT\nUNITCT2  CLI   0(R14),C'0'         SEE IF NUMERIC\n         BL    UNITLOO3            NO, ERROR\n         CLI   0(R14),C'9'         SEE IF NUMERIC\n         BH    UNITLOO3            NO, ERROR\n         LA    R14,1(,R14)         INCREMENT TO NEXT CHAR UNIT COUNT\n         BCT   R15,UNITCT2         LOOP UNTIL DONE\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,PACK2            PACK UNIT COUNT\n         LA    R3,1(,R3)           MAKE ORIG LENGTH\n         CVB   R15,DOUBLE          CONVERT UNIT COUNT TO BIN\n         STC   R15,UNITCOUN        SAVE UNIT COUNT\nUNITLOO2 LA    R2,1(R3,R2)         INCREMENT TO NEXT ENTRY\n         B     UNITLOO1            GO PROCESS NEXT SUBPARAM\nUNITLOO3 LA    R15,25              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         EJECT\n***********************************************************************\n*        DD UNIT=AFF                                                  *\n***********************************************************************\nDAFF     CLI   0(R2),AFFMK         SEE IF UNIT=AFF= KEY\n         BNE   DVOL                NO, BRANCH\n         MVI   REFERBCK,C' '       BLANK START OF REFERBACK WORK AREA\n         MVC   REFERBCK+1(23),REFERBCK BLANK ENTIRE FIELD\n         LA    R2,2(,R2)           LOAD ADDR OF AFF FIELD\n         SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,1,0(R2)          LOAD LENGTH OF DDNAME\n         BZ    DDLOOP              YES, GO PROCESS NEXT PARAM\n         CH    R3,H#8              SEE IF LENGTH > 8\n         BNH   *+16                NO, CONTINUE\n         LA    R15,24              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE10           MOVE DDNAME TO REFERBACK FIELD\n         L     R7,LASTEXEC         LOAD ADDR LAST EXEC ENTRY\n         OI    UNITIND,UNITFND     SET UNIT FOUND IND\nAFFLOOP  LA    R7,ENTLEN(,R7)      INCREMENT TO NEXT DD ENTRY\n         CLI   ENTRYTYP,TYPEND     END OF TABLE?\n         BE    AFFEND              YES, BRANCH\n         CLC   REFDDN,DDDN         MATCH DDNAME?\n         BE    AFFOUND             YES, BRANCH\n         B     AFFLOOP             LOOP\nAFFOUND  OC    UNITIND,DTYPE       SET UNIT TYPE FROM PREV\n         OI    UNITIND,AFF         TURN ON FOUND BY AFF IND\nAFFEND   B     DDLOOP              GO PROCESS NEXT ENTRY\n         EJECT\n***********************************************************************\n*        DD VOL                                                       *\n***********************************************************************\nDVOL     CLI   0(R2),VOLUMEK       SEE IF VOL= KEYWORD\n         BNE   DSER                NO, BRANCH\n         ICM   R4,1,1(R2)          LOAD NUM OF SUBPARAMS\n         BZ    DDLOOP              YES, GO GET NEXT PARAM\n         CH    R4,H#4              SEE IF AT LEAST 4 PARAMS\n         BL    DDLOOP              LESS THAN 4, NONE NEEDED\n         BNH   *+16                NO, CONTINUE\n         LA    R15,26              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n***********************************************************************\n*        WE NEED ONLY THE 4TH PARAM (VOL COUNT)                       *\n***********************************************************************\n         SR    R5,R5               ZERO WORK REG\n         LA    R2,2(,R2)           LOAD START OF SUBPARAMS\nVOLOOP1  LA    R5,1(,R5)           ADD 1 TO COUNTER\n         SLR   R3,R3               CLEAR REG FOR IC\n         IC    R3,0(R2)            LOAD LENGTH OF SUBPARAM\n         CH    R5,H#4              SEE IF 4TH PARAM\n         BL    VOLOOP3             LESS THAN 4, GO GET NEXT\n         BH    VOLEND              GREATER THAN 4, GET OUT\n         LTR   R3,R3               TEST LENGTH\n         BZ    VOLEND              ZERO, GET OUT\n         CH    R3,H#8              SEE IF LENGTH > 8\n         BNH   *+16                NO, CONTINUE\n         LA    R15,26              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         LR    R15,R3              SAVE LENGTH OF VOL COUNT\n         LA    R14,1(,R2)          LOAD ADDRESS OF VOL COUNT\n***********************************************************************\n*        CHECK VOLUME COUNT FOR NUMERIC                               *\n***********************************************************************\nVOLOOP2  CLI   0(R14),C'0'         SEE IF NUMERIC\n         BL    VOLOOP4             NO, ERROR\n         CLI   0(R14),C'9'         SEE IF NUMERIC\n         BH    VOLOOP4             NO, ERROR\n         LA    R14,1(,R14)         INCREMENT TO NEXT CHAR VOL COUNT\n         BCT   R15,VOLOOP2         LOOP UNTIL DONE\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,PACK3            PACK VOLUME COUNT\n         LA    R3,1(,R3)           RESTORE LENGTH\n         CVB   R15,DOUBLE          CONVERT VOL COUNT TO BIN\n         STC   R15,VOLCNT          SAVE VOL CNT\nVOLOOP3  LA    R2,1(R3,R2)         INCRMENT TO NEXT POS SUBPARAM\n         B     VOLOOP1             LOOP\nVOLOOP4  LA    R15,27              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\nVOLEND   B     DDLOOP              GO GET NEXT PARAM\n         EJECT\n***********************************************************************\n*        DD VOL=SER                                                   *\n***********************************************************************\nDSER     CLI   0(R2),SERMK         SEE IF VOL=SER= KEYWORD\n         BNE   DREF                NO, BRANCH\n***********************************************************************\n*        ALL WE NEED IS THE NUMBER OF VOL/SER'S                       *\n*        AND THE 1ST VOLSER IN THE LIST IF PRESENT                    *\n***********************************************************************\n         ICM   R4,1,1(R2)          LOAD NUMBER OF SUBPARAMS\n         STC   R4,SERCNT           SAVE NUMBER OF VOL/SER'S\n         BZ    DDLOOP              ZERO SUBPARAMS, GET OUT\n         ICM   R3,1,2(R2)          LOAD LEN OF 1ST VOLSER\n         BZ    DDLOOP              NULL VOLSER, GET OUT\n         CH    R3,H#6              SEE IF MAX LEN EXCEEDED\n         BNH   *+16                NO, BRANCH\n         LA    R15,28              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE13           MOVE 1ST VOLSER TO SAVE\n         B     DDLOOP              GO GET NEXT PARAM\n         EJECT\n***********************************************************************\n*        DD VOL=REF                                                   *\n***********************************************************************\nDREF     CLI   0(R2),REFMK         SEE IF VOL=REF= KEYWORD\n         BNE   DLABEL              NO, BRANCH\n         SLR   R4,R4               CLEAR REG FOR ICM\n         ICM   R4,1,2(R2)          LOAD 'LENGTH' OF REFERBACK\n         BZ    DDLOOP              ZERO LENGTH, NULL, BRANCH\n         BP    DREF00              HIGH BIT NOT ON, NOT A REFERBACK\n         BAL   R14,REFBACK         GO TO REFERBACK ROUTINE\n         OI    UNITIND,UNITFND     SET UNIT FOUND IND\n         OC    UNITIND,REFUNIT     SAVE UNIT OF PREV DD\n         MVC   TVOLSER,REFVOL      SAVE REFERBACK VOLSER\n         B     DDLOOP              GO GET NEXT PARAM\n***********************************************************************\n*        AT THIS POINT, THE REFERBACK IS PROBABLY TO A CATALOGED      *\n*        DATA SET.                                                    *\n***********************************************************************\nDREF00   CH    R4,H#44             SEE IF LENGTH OF DSNAME EXCEEDS MAX\n         BNH   *+16                NO, BRANCH\n         LA    R15,34              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         MVC   LDSN,BLANKS         BLANK DSNAME\n         BCTR  R4,0                MAKE MACHINE LENGTH\n         EX    R4,MOVE17           MOVE DSNAME TO SAVE\n         L     R7,FIRSTENT         LOAD START OF TABLE\n         LA    R7,ENTLEN(,R7)      INCREMENT PAST JOB ENTRY\nDREF01   CLI   ENTRYTYP,TYPEDD     SEE IF DD ENTRY\n         BE    DREF02              YES, GO SEE IF MATCH\n         CLI   ENTRYTYP,TYPEND     SEE IF END OF TABLE\n         BE    DREF05              NOT FOUND, GO CHECK CATALOG\n         B     DREF03              LOOP\nDREF02   CLC   DDSN,3(R2)          SEE IF SAME DSNAME\n         BE    DREF04              YES, CHARGE FOR THE DSNAME\nDREF03   LA    R7,ENTLEN(,R7)      INCREMENT TO NEXT DD ENTRY\n         B     DREF01              LOOP UNTIL DONE\nDREF04   OI    UNITIND,UNITFND     SET UNIT FOUND IND\n         OC    UNITIND,DTYPE       SAVE UNIT TYPE FROM TABLE\n         MVC   TVOLSER,DVOLSER     SAVE VOLSER FROM TABLE\n         B     DDLOOP              GO GET NEXT PARAM\nDREF05   BAL   R5,LOCATE           GO READ CATALOG\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   DDLOOP              NOT CATALOGED, IGNORE IT\n         CLC   CAMLCNT,H#0         ANY VOLUME ENTRIES?\n         BE    DDLOOP              NO, IGNORE IT\n         CLI   CAMVOL,X'00'        MAKE USER THAT THERE IS A VOLSER\n         BE    DDLOOP              NO, VSAM LIED AGAIN, IGNORE THIS ENT\n         MVC   VOLCNT,CAMLCNT+1    SAVE VOLUME COUNT\n         MVC   TVOLSER,CAMVOL      SAVE VOLSER FROM CATALOG\n         TM    UCBTYP3,X'80'       TAPE UNIT?\n         BO    DREF06              YES, BRANCH\n         BAL   R5,UCBSEAR          NO, GO SEARCH UCBS FOR PRIV MOUNT\n         B     DDLOOP              GO GET NEXT PARAM\nDREF06   OI    UNITIND,TAPE        TURN ON TAPE IND\n         B     DDLOOP              GO GET NEXT PARAM\n         EJECT\n***********************************************************************\n*        DD LABEL                                                     *\n***********************************************************************\nDLABEL   CLI   0(R2),LABELK        SEE IF LABEL= KEYWORD\n         BNE   DEXPDT              NO, BRANCH\n         SLR   R4,R4               CLEAR REG FOR ICM\n         ICM   R4,1,1(R2)          LOAD NUMBER SUBPARAMS\n         CH    R4,H#2              SEE IF AT LEAST 2 SUBPARAMETERS\n         BL    DDLOOP              NO, BRANCH\n         SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,1,2(R2)          LOAD LENGTH OF FIRST SUBPARAM\n         LA    R2,3(R3,R2)         LOAD START ADDR OF SECOND SUBPARAMET\n         ICM   R3,1,0(R2)          LOAD LENGTH OF SECOND SUBPARAM\n         CLC   1(3,R2),C#BLP       SEE IF BLP PROCESSING\n         BNE   DDLOOP              NO, GET OUT\n***********************************************************************\n*        DO NOT ALLOW BLP                                             *\n***********************************************************************\n         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER ALLOWED\n         BM    DDLOOP              YES, GET OUT\n         B     DDLOOP              ALLOW EVERYONE TO USE BLP\n         LA    R15,44              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         EJECT\n***********************************************************************\n*        DD LABEL=EXPDT                                               *\n***********************************************************************\nDEXPDT   CLI   0(R2),EXPDTMK       SEE IF LABEL=EXPDT KEYWORD\n         BNE   DINTRDR             NO, BRANCH\n         SLR   R4,R4               CLEAR REG FOR ICM\n         ICM   R4,1,1(R2)          LOAD NUMBER SUBPARAMS\n         BZ    DDLOOP              ZERO, NULL, BRANCH\n         LA    R2,2(,R2)           LOAD START ADDR OF SUBPARAMS\n         SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,1,0(R2)          LOAD LENGTH OF FIRST SUBPARAM\n         CH    R3,H#5              SEE IF LENGTH = 5\n         BNE   DDLOOP              NO, GET OUT\n         CLC   1(5,R2),C#98000     SEE IF EXPDT=98000\n         BNE   DDLOOP              NO, GET OUT\n***********************************************************************\n*        DO NOT ALLOW EXPDT=98000                                     *\n***********************************************************************\n         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER ALLOWED\n         BM    DDLOOP              YES, GET OUT\n         LA    R15,45              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         EJECT\n***********************************************************************\n*        DD SYSOUT                                                    *\n***********************************************************************\nDINTRDR  CLI   0(R2),SYSOUTK       SEE IF SYSOUT= KEYWORD\n         BNE   DDLOOP              NO, BRANCH\n         SLR   R4,R4               CLEAR REG FOR ICM\n         ICM   R4,1,1(R2)          LOAD NUMBER SUBPARAMS\n         BZ    DDLOOP              NONE, BRANCH\n         SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,1,2(R2)          LOAD LENGTH OF FIRST SUBPARAM\n         LA    R5,PSYSOUT          LOAD ADDRESS OF PRODUCTION SYSOUT CL\nDINTRDR1 CLI   0(R5),X'FF'         END OF TABLE\n         BE    DINTRDR3            YES, BRANCH\n         CLC   0(1,R5),3(R2)       SEE IF CLASS MATCHES\n         BE    DINTRDR2            YES, PRODUCTION SYSOUT CLASS\n         LA    R5,1(,R5)           INCREMENT TO NEXT TABLE ENTRY\n         B     DINTRDR1            LOOP\nDINTRDR2 TM    JOBIND,JOBTECH+JOBPROD+JOBSTC IS PROD SYSOUT CLASS OK\n         BM    DINTRDR6            YES, NOT AN ERROR\n*        B     DINTRDR6            ALLOW EVERYONE ALL SYSOUT\n         LA    R15,50              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DINTRDR6            GET OUT\nDINTRDR3 LA    R5,TSYSOUT          LOAD ADDRESS OF PRODUCTION SYSOUT CL\nDINTRDR4 CLI   0(R5),X'FF'         END OF TABLE\n         BE    DINTRDR6            YES, BRANCH\n         CLC   0(1,R5),3(R2)       SEE IF CLASS MATCHES\n         BE    DINTRDR5            YES, PRODUCTION SYSOUT CLASS\n         LA    R5,1(,R5)           INCREMENT TO NEXT TABLE ENTRY\n         B     DINTRDR4            LOOP\nDINTRDR5 TM    JOBIND,JOBTECH+JOBTEST+JOBOPER IS TEST SYSOUT CLASS OK\n         BM    DINTRDR6            YES, NOT AN ERROR\n*        B     DINTRDR6            ALLOW EVERYONE ALL SYSOUT\n         LA    R15,53              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\nDINTRDR6 CH    R4,H#2              SEE IF AT LEAST 2 SUBPARAMETERS\n         BL    DDLOOP              NO, BRANCH\n         LA    R2,3(R3,R2)         LOAD START ADDR OF SECOND SUBPARAMET\n         ICM   R3,1,0(R2)          LOAD LENGTH OF SECOND SUBPARAM\n         CH    R3,H#6              SEE IF LENGTH = 6\n         BNE   GETNEXT             NO, GET OUT\n         CLC   1(6,R2),C#INTRDR    SEE IF INTERNAL READER\n         BNE   GETNEXT             NO, BYPASS REST OF SYSOUT STATEMENT\n***********************************************************************\n*        DO NOT ALLOW INTERNAL READER                                 *\n***********************************************************************\n         TM    JOBIND,JOBSTC+JOBTECH ALLOWED\n         BM    GETNEXT             YES, BYPASS REST OF SYSOUT STATEMENT\n         B     GETNEXT             ALLOW EVERYONE TO USE INTRDR\n         LA    R15,46              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     GETNEXT             BYPASS REST OF SYSOUT STATEMENT\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING         *\n*        PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR       *\n*        FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT      *\n*        WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER     *\n*        BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF       *\n*        SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.        *\n*        IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY    *\n*        A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH      *\n*        ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A         *\n*        SINGLE SUBPARAMETER.                                         *\n***********************************************************************\nDDLOOP   NI    DDIND,255-DDBEGIN   TURN OFF FIRST ENTRY SWITCH\nDDLOOP1  L     R2,PARMADDR         RESTORE START OF PARAMETER ADDRESS\n         SLR   R5,R5               CLEAR REGISTER FOR ICM\n         LA    R2,1(,R2)           INCREMENT PAST KEYWORD\n         ICM   R5,1,0(R2)          LOAD SUBPARAMETER COUNT\n         BNZ   DDLOOP2             OK, BRANCH INTO ROUTINE\n         LA    R2,1(,R2)           NONE, INCREMENT PAST COUNT\n         B     DDLOOP6             AND GET OUT OF ROUTINE\nDDLOOP2  LA    R2,1(,R2)           INCREMENT PAST KEYWORD DESCR\nDDLOOP3  SLR   R4,R4               CLEAR REGISTER FOR ICM\n         ICM   R4,1,0(R2)          LOAD PARAMETER LENGTH\n         BNM   DDLOOP4             HIGH BIT NOT ON, ONLY 1 PARAMETER\n         N     R4,F#127            'AND' OUT THE HIGH ORDER BIT\n         LA    R2,1(,R2)           INCREMENT PAST CONTROL BYTE\n         B     DDLOOP5             BRANCH\nDDLOOP4  LA    R4,1                SET PARAM COUNT TO 1\nDDLOOP5  SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,1,0(R2)          LOAD PARAMETER LENGTH\n         LA    R2,1(R3,R2)         INCREMENT PAST PARM\n         BCT   R4,DDLOOP5          LOOP UNTIL PROCESSED ALL PARMS\n         BCT   R5,DDLOOP3          LOOP UNTIL PROCESSED ALL PARMS\nDDLOOP6  ST    R2,PARMADDR         SAVE START OF PARAMETER ADDRESS\n         B     DDPARM              CONTINUE\n         EJECT\n***********************************************************************\n*        THIS IS WHERE WE LOOK AT WHAT WE HAVE FOUND OUT ABOUT THE    *\n*        DD STATEMENT WE HAVE JUST FINISHED PROCESSING.               *\n*        THE FOLLOWING ARE LOOKED AT                                  *\n*          1)  THE DISPOSITION FOR SOME DATA SETS                     *\n*              MUST BE AUTHORIZED FOR OTHER THAT SHR                  *\n*          2)  THE TEMPORARY ENTRY MUST BE SAVED IF UNIT IS A TAPE    *\n*              OR A PRIV UNIT.                                        *\n*          3)  IF THE ENTRY IS A TAPE OR PRIV, THE UNIT COUNT MUST BE *\n*              ADDED TO THE RUNNING COUNT FOR THE STEP.               *\n***********************************************************************\n*\n***********************************************************************\n*        DO NOT ALLOW A DISP OF \"DELETE\" FOR SYSTEM DATA SETS.        *\n***********************************************************************\nDDEND    CLC   TDSN(5),C#SYSP      SEE IF SYSP. DATA SET\n         BE    DDEND20             YES, BRANCH\n         CLC   TDSN(5),C#SYS1      SEE IF SYS1. DATA SET\n         BE    DDEND20             YES, BRANCH\n         CLC   TDSN(5),C#PRD1      SEE IF PRD1. DATA SET\n         BE    DDEND20             YES, BRANCH\n         CLC   TDSN(5),C#TST1      SEE IF TST1. DATA SET\n         BE    DDEND20             YES, BRANCH\n         B     DDEND40             NO, GET OUT\nDDEND20  TM    DISPIND,DELETE      SEE IF DISP=DELETE\n         BNO   DDEND30             NO, BRANCH\n         TM    JOBIND,JOBSTC+JOBTECH IS JOB AUTHORIZED\n         BM    DDEND30             YES, BRANCH\n         LA    R15,29              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDEND40             GET OUT\n***********************************************************************\n*        DO NOT ALLOW A DISP OTHER THAN \"SHR\" FOR SYSTEM DATA         *\n*        SETS.                                                        *\n***********************************************************************\nDDEND30  TM    DISPIND,SHR         SEE IF DISP=SHR\n         BO    DDEND40             YES, BRANCH\n*        IF DISP NOT = SHR, MUST BE AUTHORIZED\n         TM    JOBIND,JOBSTC+JOBTECH IS JOB AUTHORIZED\n         BM    DDEND40             YES, BRANCH\n         LA    R15,29              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n***********************************************************************\n*        IF UNIT HAS NOT BEEN DETERMINED, THE UNIT TYPE MUST          *\n*        BE SEARCHED FOR IN THE FOLLOWING ORDER:                      *\n*                                                                     *\n*        1)  THE DSNAME TABLE MAINTAINED BY THIS EXIT SINCE THE       *\n*            DATASET MAY HAVE BEEN CATALOGED OR PASSED BY A           *\n*            PREVIOUS DD STATEMENT.                                   *\n*        2)  THE SYSTEM CATALOG                                       *\n*                                                                     *\n***********************************************************************\nDDEND40  CLI   UNITIND,X'00'       SEE IF UNIT HAS BEEN DETERMINED\n         BE    DDEND45             NO, BRANCH\n         CLI   TVOLSER,X'00'       SEE IF VOLSER SPECIFIED\n         BE    DDEND45             NO, GO SEARCH TABLE AND/OR CATALOG\n         TM    UNITIND,TAPE        SEE IF TAPE UNIT\n         BO    DDEND150            YES, BRANCH\n         BAL   R5,UCBSEAR          NO, GO SEARCH UCBS FOR PRIV MOUNT\n         B     DDEND150            GET OUT\nDDEND45  CLI   TDSN,C' '           SEE IF DSN SPECIFIED\n         BE    DDEND150            NOT SPECIFIED, GET OUT\n         TM    DISPIND,NEW         SEE IF THIS IS A NEW DATASET\n         BO    DDEND150            YES, VOLSER WILL BE A WORK PACK\n         L     R7,FIRSTENT         LOAD ADDR OF START OF TABLE\n***********************************************************************\n*        SEARCH THE DSNAME TABLE MAINTAINED BY THIS EXIT              *\n***********************************************************************\nDDEND50  LA    R7,ENTLEN(,R7)      INCREMENT TO NEXT ENTRY\n         CLI   ENTRYTYP,TYPEND     END OF TABLE?\n         BE    DDEND60             YES, GO CHECK CATALOG\n         TM    ENTRYTYP,TYPEDD     DD ENTRY?\n         BNO   DDEND50             NO, LOOP\n         CLC   DDSN,TDSN           DSN MATCH?\n         BNE   DDEND50             NO, LOOP\n         OC    UNITIND,DTYPE       SAVE UNIT INFO\n         MVC   TVOLSER,DVOLSER     SAVE VOLSER INFO\n         B     DDEND150            GET OUT\n***********************************************************************\n*        SEARCH CATALOG FOR UNIT INFO                                 *\n***********************************************************************\nDDEND60  DS    0H\n         AIF   ('&CAMLST' EQ 'YES').CAML1\n         B     DDEND150            BYPASS CAMLST NOP\n.CAML1   ANOP\n         CLC   TDSN(5),C#SYS1      SEE IF SYS1. DATA SET\n         BE    DDEND150            YES, NO NEED TO CAMLST\n         TM    STRDINDC,DTXSYOUT   SEE IF DD OUTPUT SPOOL FILE\n         BO    DDEND150            YES, NO NEED TO CAMLST\n         MVC   LDSN,TDSN           SAVE DSNAME\n         BAL   R5,LOCATE           GO READ CATALOG\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    DDEND70             ZERO, BRANCH\n         CH    R15,H#8             DSNAME NOT FOUND OR GDG LEVEL?\n         BE    DDEND90             YES, BRANCH\nDDEND70  CLC   CAMLCNT,H#0         ANY VOLUME ENTRIES?\n         BE    DDEND150            NO, BRANCH\n         CLI   CAMVOL,X'00'        MAKE USER THAT THERE IS A VOLSER\n         BE    DDEND150            NO, VSAM LIED AGAIN, IGNORE THIS ENT\n         MVC   VOLCNT,CAMLCNT+1    SAVE VOLUME COUNT\n         MVC   TVOLSER,CAMVOL      SAVE VOLSER FROM CATALOG\n         TM    UCBTYP3,X'80'       TAPE UNIT?\n         BO    DDEND80             YES, BRANCH\n         BAL   R5,UCBSEAR          NO, GO SEARCH UCBS FOR PRIV MOUNT\n         B     DDEND150            GET OUT\nDDEND80  OI    UNITIND,TAPE        TURN ON TAPE IND\n         B     DDEND150            BYPASS ROUTINES\n         EJECT\n***********************************************************************\n*        DATA SET NOT FOUND, MAY BE GDG LEVEL                         *\n*        DO A GENERIC LOCATE FOR THE DSNAME INDEX GIVEN               *\n***********************************************************************\nDDEND90  MVC   SVC26DS,LDSN        MOVE DSNAME TO SVC26 AREA\n         LA    R1,43               LOAD MAXIMUM LENGTH OF DSN\n         LA    R14,SVC26DS+42      LOAD ADDRESS OF END OF DSN\nDDEND100 CLI   0(R14),C' '         SEE IF LAST CHAR DSN\n         BNE   DDEND110            YES, BRANCH\n         BCTR  R14,0               BACK UP DSN POINTER 1 POSITION\n         BCT   R1,DDEND100         LOOP UNTIL FOUND\nDDEND110 LTR   R1,R1               TEST LENGTH\n         BZ    DDEND150            ZERO, NO DSN, BRANCH\n         STC   R1,SVC26DSL         SAVE LENGTH OF DSN\n         XC    CTGPL,CTGPL         ZERO PARM LIST\n         MVI   CTGPL,B'00000111'   SET CTGOPTN1\n         MVI   CTGPL+2,B'00010001' SET CTGOPTN3\n         LA    R1,SVC26DSN         LOAD ADDRESS OF DSNAME\n         ST    R1,CTGPL+4          SET CTGENT\n         XC    CTGPL+8(4),CTGPL+8  ZERO CTGCAT\n         XC    CTGPL+18(4),CTGPL+18 ZERO CTGPSWD\n         LH    R1,H#5000           LOAD LENGTH OF WORK AREA\n         STH   R1,SVC26WRK         AND SAVE IT WORK AREA\n         LA    R1,SVC26WRK         LOAD ADDRESS OF WORK AREA\n         ST    R1,CTGPL+12         SET CTGWKA\n         LA    R1,CTGPL            LOAD ADDRESS OF WORK AREA\n         SVC   26                  CALL CATALOG GENERIC SEARCH\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   DDEND150            NOT ZERO, BRANCH\n***********************************************************************\n*        FOUND DATA SETS AT THE GIVEN INDEX LEVEL.  CHECK TO SEE      *\n*        IF GDG LEVEL.                                                *\n***********************************************************************\n         LH    R14,SVC26WRK+2      LOAD LENGTH OF AREA+4\n         SH    R14,H#4             SUBTRACT LENGTH OF PREFIX\n         SRDA  R14,32              SHIFT TO ODD REGISTER OF PAIR\n         D     R14,F#45            DIVIDE BY LENGTH OF EACH ENTRY\n         LTR   R4,15               TEST NUMBER OF DSNAMES RETURNED\n         BZ    DDEND150            ZERO, NONE\n         BM    DDEND150            NEGATIVE, ERROR\n         LA    R2,SVC26WRK+4       POINT TO FIRST DSN\n         CLI   0(R2),C'B'          IS THIS A GDG BASE (VSAM CATALOG ONL\n         BE    DDEND140            YES, BRANCH\n         CLI   0(R2),C'A'          IS THIS A NONVSAM ENTRY\n         BNE   DDEND150            NO, BRANCH\n         SLR   R15,R15             ZERO, REGISTER FOR IC\n         IC    R15,SVC26DSL        LOAD BASE DSN LENGTH\n         LA    R15,2(R15,R2)       POINT PAST TYPE, BASE, AND '.'\n         CLI   0(R15),C'G'         POSSIBLE GDG\n         BNE   DDEND150            NO, BRANCH\n         CLI   5(R15),C'V'         POSSIBLE GDG\n         BNE   DDEND150            NO, BRANCH\n         CLI   8(R15),C' '         POSSIBLE GDG\n         BNE   DDEND150            NO, BRANCH\n         MVC   DOUBLE,0(R15)       SAVE DSN SUFFIX\n         OC    DOUBLE,GDGMASK      TEST NUMERIC POSITIONS\n         CLC   DOUBLE,0(R15)       SEE IF CHANGED\n         BNE   DDEND150            YES, NOT GDG, BRANCH\n         OI    UNITIND,UNITGDG     UNIT INFORMATION FROM GDG PROCESSING\n***********************************************************************\n*        LOCATE INDIVIDUAL DATA SETS RETURNED FROM THE GENERIC        *\n*        LOCATE FROM SVC26.  ALL ENTRIES ARE LOCATED TO GET THE       *\n*        VOLUME COUNT IF 'PARALLEL' MOUNTING IS REQUESTED.            *\n***********************************************************************\nDDEND120 MVC   LDSN,1(R2)          SAVE DSNAME\n         BAL   R5,LOCATE           GO READ CATALOG\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   DDEND140            NOT ZERO, SOMETHINGS WRONG, LOOP\n         CLC   CAMLCNT,H#0         ANY VOLUME ENTRIES?\n         BE    DDEND140            NO, BYPASS ENTRY\n         CLI   CAMVOL,X'00'        MAKE USER THAT THERE IS A VOLSER\n         BE    DDEND140            NO, VSAM LIED AGAIN, IGNORE THIS ENT\n         MVC   TVOLSER,CAMVOL      SAVE VOLSER FROM CATALOG\n         SLR   R15,R15             CLEAR REG FOR IC\n         MVC   VOLCNT,CAMLCNT+1    SAVE VOLUME COUNT\n         TM    UCBTYP3,X'80'       TAPE UNIT?\n         BO    DDEND130            YES, BRANCH\n         BAL   R5,UCBSEAR          NO, GO SEARCH UCBS FOR PRIV MOUNT\n         B     DDEND140            GET OUT\nDDEND130 OI    UNITIND,TAPE        TURN ON TAPE IND\nDDEND140 LA    R2,45(,R2)          INCREMENT TO NEXT ENTRY\n         BCT   R4,DDEND120         LOOP UNTIL DONE\n***********************************************************************\n*        PROCESS ONLY DD STATEMENTS WHICH ARE FOR MOUNTABLE           *\n*        DEVICES.                                                     *\n***********************************************************************\nDDEND150 TM    UNITIND,TAPE        IS THIS A TAPE DD?\n         BO    DDEND160            YES, BRANCH\n         TM    UNITIND,PRIV        IS THIS A PRIV DD?\n         BNO   DDEND240            NO, DO NOT SAVE\n***********************************************************************\n*        IF THIS STATEMENT REQUIRES A MOUNTABLE DISK PACK, WRITE      *\n*        AN ERROR MESSAGE SINCE WE NO LONGER HAVE ANY MOUNTABLE       *\n*        DISK PACKS.                                                  *\n***********************************************************************\n         TM    JOBIND2,MOUNT       DOES JOB HAVE DASD MOUNT AUTHORITY\n         BO    DDEND160            YES, BRANCH\n         LA    R15,48              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n***********************************************************************\n*        IF THE UNIT WAS DETERMINED BY UNIT=AFF, DO NOT CHARGE        *\n*        FOR THE DEVICE BUT SAVE THE TABLE ENTRY FOR POSSIBLE         *\n*        REFERBACKS BY SUBSEQUENT STATEMENTS.                         *\n***********************************************************************\nDDEND160 TM    UNITIND,AFF         UNIT=AFF DD STATEMENT\n         BO    DDEND230            YES, DO NOT ADD TO UNIT COUNTS\n         CLI   TVOLSER,X'00'       VOLSER SPECIFIED??\n         BE    DDEND180            NO, BRANCH\n         L     R7,LASTEXEC         LOAD ADDR LAST EXEC ENTRY\n***********************************************************************\n*        SEE IF THE VOLSER WAS USED PREVIOUSLY IN THIS STEP.          *\n*        IF SO, DO NOT CHARGE FOR THE DEVICE BUT AGAIN SAVE THE       *\n*        TABLE ENTRY FOR POSSIBLE REFERBACKS BY FOLLOWING             *\n*        STATEMENTS.                                                  *\n***********************************************************************\nDDEND170 LA    R7,ENTLEN(,R7)      INCREMENT TO NEXT ENTRY\n         CLI   ENTRYTYP,TYPEND     SEE IF END OF TABLE\n         BE    DDEND180            YES, NO MATCH, BRANCH\n         CLC   TVOLSER,DVOLSER     SEE IF VOLSER ALREADY REFERENCED\n         BE    DDEND230            YES, DO NOT CHARGE FOR IT\n         B     DDEND170            LOOP\n***********************************************************************\n*        IF PARALLEL MOUNTING WAS REQUESTED, CHARGE THE GREATER       *\n*        OF THE DEVICES SPECIFIED BY THE UNITCOUNT FIELD OR THE       *\n*        NUMBER OF VOLUMES.                                           *\n***********************************************************************\nDDEND180 CLI   UNITCOUN,C'P'       SEE IF PARALLEL MOUNTING\n         BE    DDEND190            YES, BRANCH\n         MVC   ADDCOUNT,UNITCOUN   MOVE UNIT COUNT TO COMMON\n         B     DDEND210            BRANCH\nDDEND190 CLC   VOLCNT,SERCNT       COMPARE VOL COUNT & SERIAL CNT\n         BL    DDEND200            SERIAL COUNT GREATER\n         MVC   ADDCOUNT,VOLCNT     MOVE VOLUME COUNT TO COMMON\n         B     DDEND205            BRANCH\nDDEND200 MVC   ADDCOUNT,SERCNT     MOVE SERIAL COUNT TO COMMON\nDDEND205 CLI   ADDCOUNT,X'00'      SEE IF COUNT IS ZERO\n         BNE   DDEND210            NO, BRANCH\n         MVI   ADDCOUNT,X'01'      SET COUNT TO 1\n***********************************************************************\n*        ADD THE DEVICE COUNT TO THE APPROPRIATE ACCUMULATOR.         *\n***********************************************************************\nDDEND210 SLR   R15,R15             ZERO WORK REG\n         IC    R15,ADDCOUNT        MOVE UNIT COUNT TO REG\n         TM    UNITIND,TAPE        IS THIS A TAPE DD?\n         BO    DDEND220            YES, BRANCH\n         AH    R15,PRIVCNT         ADD RUNNING COUNT TO THIS ONE\n         STH   R15,PRIVCNT         SAVE NEW RUNNING COUNT\n         B     DDEND230            BRANCH\nDDEND220 AH    R15,TAPECNT         ADD RUNNING COUNT TO THIS ONE\n         STH   R15,TAPECNT         SAVE NEW RUNNING COUNT\n***********************************************************************\n*        SAVE THE CURRENT TEMPORARY ENTRY SINCE IT SPECIFIES A        *\n*        MOUNTABLE DEVICE TYPE.                                       *\n***********************************************************************\nDDEND230 OC    TTYPE,UNITIND       SAVE UNIT INFO\n         LH    R14,ENTCOUNT        LOAD TABLE ENTRY COUNT\n         LA    R14,1(,R14)         ADD 1 TO COUNT\n         CH    R14,MAXENTS         SEE IF MAXIMUM REACHED\n         BNL   TBLFULL             MAXIMUM REACHED, BAG THE JOB AND EXI\n         STH   R14,ENTCOUNT        STORE NEW ENTRY COUNT\n         L     R7,LASTENT          LOAD ADDR OF LAST ENTRY\n         LA    R7,ENTLEN(,R7)      INCREMENT TO NEXT ENTRY\n         MVI   ENTRYTYP,TYPEDD     SET ENTRY TO DD\n         MVC   DENTRY,TENTRY       MOVE TEMPORARY ENTRY TO TABLE\n         MVC   DTYPE,UNITIND       SAVE UNIT INDICATOR\n         ST    R7,LASTENT          SAVE ADDR OF LAST ENTRY\n***********************************************************************\n*        IF THE DD STATEMENT IS FOR A JOBLIB, STEPLIB, JOBCAT,        *\n*        OR A STEPCAT, THE DISPOSITION MUST BE \"SHR\".                 *\n***********************************************************************\nDDEND240 CLC   TDDN,C#JOBLIB       SEE IF JOBLIB DD\n         BE    DDEND250            YES, BRANCH\n         CLC   TDDN,C#STEPLI       SEE IF STEPLIB DD\n         BE    DDEND260            YES, BRANCH\n         CLC   TDDN,C#JOBCAT       SEE IF JOBCAT DD\n         BE    DDEND270            YES, BRANCH\n         CLC   TDDN,C#STEPCA       SEE IF STEPCAT DD\n         BE    DDEND270            YES, BRANCH\n         B     DDALLDON            NO, GET OUT\nDDEND250 OI    JOBIND,JOBLIB       TURN ON JOBLIB INDICATOR\n***********************************************************************\n*        IF THE DD STATEMENT IS FOR A JOBLIB, THE JOB MUST BE         *\n*        AUTHORIZED.                                                  *\n***********************************************************************\n         TM    JOBIND,JOBTECH      IS JOBLIB ALLOWED\n         BO    DDEND260            YES, BRANCH\n*        B     DDEND260            ALLOW EVERYONE TO HAVE JOBLIB\n         LA    R15,47              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDALLDON            GET OUT\nDDEND260 TM    DISPIND,SHR         SEE IF DISP=SHR\n         BO    DDALLDON            YES, BRANCH\n         LA    R15,33              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDALLDON            GET OUT\n***********************************************************************\n*        IF THE DD STATEMENT IS FOR A JOBCAT OR A STEPCAT, THE        *\n*        JOB MUST BE AUTHORIZED.                                      *\n***********************************************************************\nDDEND270 TM    JOBIND,JOBSTC+JOBTECH SEE IF JOBCAT/STEPCAT ALLOWED\n         BM    DDEND280            YES, BRANCH\n         LA    R15,43              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\nDDEND280 TM    DISPIND,SHR         SEE IF DISP=SHR\n         BO    DDALLDON            YES, BRANCH\n         LA    R15,33              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\nDDALLDON B     GETNEXT             GO GET NEXT TEXT RECORD\n         EJECT\n***********************************************************************\n*        THE TEXT OF THE EXEC CARD WHICH CALLS A PROC IS AS FOLLOWS   *\n*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        *\n*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          *\n*            3)  1 BYTE OF MISCELLANEOUS INDICATORS                   *\n*            4)  1 BYTE INDICATOR X'94' INDICATING EXEC POS INFORMATN *\n*            5)  1 BYTE NUMBER OF EXEC POSITIONAL PARAMETERS          *\n*                THE 1ST POS PARAMETER IS THE JOB STEP NAME           *\n*                THE 2ND POS PARAMETER IS THE PROC NAME               *\n*            6)  VARIABLE LENGTH LIST OF EXEC POS PARAMETERS          *\n*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               *\n*            7)  THE REST OF THE RECORD WILL BE IGNORED               *\n***********************************************************************\n*\n***********************************************************************\n*        THE TEXT OF THE PROC CARD WILL BE SAVED FOR SUBSEQUENT       *\n*        EXEC CARD PROCESSING.  THE STEP NAME WILL BE SAVED FROM      *\n*        THE PROC CARD AND AND A POINTER SAVED TO THE START OF        *\n*        THE FIRST KEYWORD PARM.  AFTER THE NORMAL EXEC CARD HAS      *\n*        BEEN PROCESSED, THE PROC CARD TEXT WILL BE PROCESSED         *\n*        WHICH WILL OVERRIDE ANY PREVIOUSLY PROCESSED PARAMETERS      *\n*        ON THE EXEC CARD.                                            *\n***********************************************************************\n         EJECT\n***********************************************************************\n*        SAVE THE ENTIRE TEXT OF THE EXECUTE STATEMENT WHICH          *\n*        CALLS A PROCEDURE SO THAT ALL PROC OVERRIDES MAY BE          *\n*        PROCESSED.                                                   *\n***********************************************************************\nPROCARD  EQU   *\nPROCSTAR LR    R14,R6              SAVE ADDRESS OF CURRENT RECORD\n         LH    R15,STRLTH          LOAD LENGTH OF TEXT RECORD\n         CH    R15,H#512           SEE IF LENGTH EXCEEDS 512 BYTES\n         BNH   *+16                NO, BRANCH\n         LA    R15,30              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     GETNEXT             GET OUT\n         LA    R0,PROCTXT          LOAD ADDR OF TEXT SAVE AREA\n         LR    R1,R15              LET REG 1 ALSO CONTAIN THE LENGTH\n         MVCL  R0,R14              MOVE TEXT STRING TO SAVE\n         LA    R6,PROCTXT          POINT TO START OF COPIED TEXT\n         LA    R2,STREKEY          LOAD START OF TRUE TEXT\n         ST    R2,PARMADDR         SAVE START OF PARAMETER ADDRESS\n         LA    R2,1(,R2)           INCR PAST EXEC POS IND\n         SLR   R4,R4               CLEAR REG FOR ICM\n         ICM   R4,1,0(R2)          LOAD NUMBER OF SUBPARAMETERS\n         BNZ   PROCEND1            NOT ZERO, BRANCH\n         LA    R2,1(,R2)           ZERO, INCREMENT PAST COUNT\n         B     PROCEND3            GET OUT\n***********************************************************************\n*        SAVE THE PROC STEP NAME                                      *\n***********************************************************************\nPROCEND1 LA    R2,1(,R2)           INCREMENT PAST COUNT\n         MVI   SAVEPROC,C' '       MOVE BLANK TO 1ST POS SAVE\n         MVC   SAVEPROC+1(7),SAVEPROC BLANK ENTIRE STEP NAME SAVE\n         SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,1,0(R2)          LOAD LENGTH OF JOB STEP NAME\n         BZ    PROCEND2            IF ZERO, NO JOB STEP NAME\n         CH    R3,H#8              SEE IF LENGTH > 8\n         BNH   *+16                NO, CONTINUE\n         LA    R15,31              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     GETNEXT             GET OUT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE4            MOVE STEP NAME TO SAVE AREA\nPROCEND2 ICM   R3,1,0(R2)          LOAD LENGTH OF SUBPARAMETER\n         LA    R2,1(R3,R2)         INCREMENT TO NEXT SUBPARAMETER\n         BCT   R4,PROCEND2         LOOP UNTIL DONE\n***********************************************************************\n*        SAVE POINTER TO THE FIRST KEYWORD ON THE STATEMENT           *\n***********************************************************************\nPROCEND3 ST    R2,PROCTEXT         SAVE ADDRESS OF FIRST KEYWORD PARM\n         B     GETNEXT             GET OUT\n         EJECT\n***********************************************************************\n*        IF THE CURRENT EXECUTE STATEMENT IS FROM A PROCEDURE,        *\n*        LOAD THE ADDRESS OF THE PREVIOUS STATEMENT WHICH CALLED      *\n*        THE PROCEDURE AND RETURN TO THE EXECUTE CARD PROCESSOR       *\n*        TO PROCESS THE OVERRIDES WHICH MAY HAVE BEEN ENTERED         *\n*        ON THAT STATEMENT.                                           *\n***********************************************************************\nPROCSEAR TM    STREINDC,ETXPROC    STATEMENT FROM A PROCEDURE?\n         BNO   GETNEXT             NO, GET OUT\n         XI    PROCIND,X'01'       FLIP-FLOP SWITCH\n         BZ    GETNEXT             NOW ZERO, ALREADY PROCESSED PROC TEX\n         L     R2,PROCTEXT         LOAD ADDR OF PROC TEXT\n         ST    R2,PARMADDR         SAVE START OF PARAMETER ADDRESS\n         B     EXECPARM            GO PROCESS ADDITIONAL TEXT\n         EJECT\n***********************************************************************\n*        THE TEXT OF THE JDT OUTPUT STATEMENT IS AS FOLLOWS           *\n*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        *\n*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          *\n*            3)  1 BYTE OF MISCELLANEOUS INDICATORS                   *\n*            4)  1 BYTE INDICATOR X'BE' INDICATING JDT VERB (OUTPUT)  *\n*            5)  1 BYTE NUMBER OF POSITIONAL PARAMETERS               *\n*                THE 1ST POS PARAMETER IS 'OUTPUT'                    *\n*                THE 2ND POS PARAMETER IS THE OUTPUT NAME             *\n*            6)  VARIABLE LENGTH LIST OF KEYWORDS AND VALUES          *\n*                1 BYTE INDICATOR X'1A' INDICATING JDT KEYWORD        *\n*                1 BYTE NUMBER OF PARAMETERS IN KEYWORD               *\n*                1 BYTE PARAMETER LENGTH FOLLOWED BY THE PARAMETER    *\n*                       FOR EACH OF THE KEYWORD PARAMETERS            *\n***********************************************************************\n         EJECT\n***********************************************************************\n*        THE JDT STATEMENT IS CURRENTLY USED TO PROCESS THE           *\n*        OUTPUT STATEMENT.  ANY SUCH STATEMENT IS ASSUMED TO          *\n*        BE FOR AN OUTPUT JCL CARD AND DOES NOT TAKE THE TIME         *\n*        TO CHECK THE JDT VERB TO VERIFY THAT FACT.  THE JDT          *\n*        KEYS ARE SCANNED FOR A CLASS KEYWORD TO VERIFY THE           *\n*        JOBS AUTHORITY TO USE PRODUCTION CLASSES.                    *\n***********************************************************************\nJDTCARD  EQU   *\nJDTSTART LA    R2,STRSKEY          LOAD START OF TRUE TEXT\n         ST    R2,PARMADDR         SAVE START OF PARAMETER ADDRESS\nJDTPARM  CLI   0(R2),ENDK          END OF TEXT STRING??\n         BE    JDTEND              YES, GET OUT\n         EJECT\n***********************************************************************\n*        JDT VERB                                                     *\n***********************************************************************\nJDTVERB  CLI   0(R2),JDTVERBK      SEE IF JDT VERB KEY\n         BE    JDTLOOP             YES, IGNORE IT\n         EJECT\n***********************************************************************\n*        JDT KEYWORD                                                  *\n***********************************************************************\nJDTKEY   CLI   0(R2),JDTKWDK       SEE IF JDT KEYWORD KEY\n         BNE   JDTLOOP             NO, UNKNOWN BUT IGNORE IT\n         EJECT\n***********************************************************************\n*        CHECK JDT KEYWORD FOR SYSOUT CLASS                           *\n***********************************************************************\nJDTCLASS CLI   1(R2),X'02'         DO BOTH KEYWORD AND VALUE EXIST\n         BNE   JDTLOOP             NO, IGNORE\n         CLI   2(R2),X'05'         SEE IF LENGTH OF KEYWORD IS 5\n         BNE   JDTPRTY             NO, CANNOT BE \"CLASS\"\n         CLC   3(5,R2),C#CLASS     SEE IF CLASS KEYWORD\n         BNE   JDTLOOP             NO, IGNORE THIS KEYWORD\n         LA    R5,PSYSOUT          LOAD ADDRESS OF PRODUCTION SYSOUT CL\nJDTCL1   CLI   0(R5),X'FF'         END OF TABLE\n         BE    JDTCL3              YES, BRANCH\n         CLC   0(1,R5),9(R2)       SEE IF CLASS MATCHES\n         BE    JDTCL2              YES, PRODUCTION SYSOUT CLASS\n         LA    R5,1(,R5)           INCREMENT TO NEXT TABLE ENTRY\n         B     JDTCL1              LOOP\nJDTCL2   TM    JOBIND,JOBTECH+JOBPROD+JOBSTC IS PROD SYSOUT CLASS OK\n         BM    JDTCL6              YES, NOT AN ERROR\n*        B     JDTCL6              ALLOW EVERYONE ALL SYSOUT\n         LA    R15,50              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JDTCL6              GET OUT\nJDTCL3   LA    R5,TSYSOUT          LOAD ADDRESS OF TEST SYSOUT CLASSES\nJDTCL4   CLI   0(R5),X'FF'         END OF TABLE\n         BE    JDTCL6              YES, BRANCH\n         CLC   0(1,R5),9(R2)       SEE IF CLASS MATCHES\n         BE    JDTCL5              YES, TEST SYSOUT CLASS\n         LA    R5,1(,R5)           INCREMENT TO NEXT TABLE ENTRY\n         B     JDTCL4              LOOP\nJDTCL5   TM    JOBIND,JOBTECH+JOBTEST+JOBOPER+JOBTSO  IS CLASS OK\n         BM    JDTCL6              YES, NOT AN ERROR\n*        B     JDTCL6              ALLOW EVERYONE ALL SYSOUT\n         LA    R15,53              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\nJDTCL6   B     JDTLOOP             DONE WITH THIS PARAMETER\nJDTPRTY  CLI   2(R2),X'04'         SEE IF LENGTH OF KEYWORD IS 4\n         BNE   JDTLOOP             NO, CANNOT BE \"PRTY\"\n         CLC   3(4,R2),C#PRTY       SEE IF PRTY KEYWORD\n         BNE   JDTLOOP             NO, IGNORE THIS KEYWORD\n         TM    JOBIND,JOBTECH+JOBPROD+JOBSTC+JOBOPER  IS JOB AUTHORIZED\n         BM    JDTLOOP             YES, NOT AN ERROR\n         LA    R15,54              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JDTLOOP             LOOP TO NEXT PARAMETER\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING         *\n*        PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR       *\n*        FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT      *\n*        WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER     *\n*        BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF       *\n*        SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.        *\n*        IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY    *\n*        A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH      *\n*        ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A         *\n*        SINGLE SUBPARAMETER.                                         *\n***********************************************************************\nJDTLOOP  L     R2,PARMADDR         RESTORE START OF PARAMETER ADDRESS\n         SLR   R5,R5               CLEAR REGISTER FOR ICM\n         LA    R2,1(,R2)           INCREMENT PAST KEYWORD\n         ICM   R5,1,0(R2)          LOAD SUBPARAMETER COUNT\n         BNZ   JDTLOOP1            OK, BRANCH INTO ROUTINE\n         LA    R2,1(,R2)           NONE, INCREMENT PAST COUNT\n         B     JDTLOOP5            AND GET OUT OF ROUTINE\nJDTLOOP1 LA    R2,1(,R2)           INCREMENT PAST KEYWORD DESCR\nJDTLOOP2 SLR   R4,R4               CLEAR REGISTER FOR ICM\n         ICM   R4,1,0(R2)          LOAD PARAMETER LENGTH\n         BNM   JDTLOOP3            HIGH BIT NOT ON, ONLY 1 PARAMETER\n         N     R4,F#127            'AND' OUT THE HIGH ORDER BIT\n         LA    R2,1(,R2)           INCREMENT PAST CONTROL BYTE\n         B     JDTLOOP4            BRANCH\nJDTLOOP3 LA    R4,1                SET PARAM COUNT TO 1\nJDTLOOP4 SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,1,0(R2)          LOAD PARAMETER LENGTH\n         LA    R2,1(R3,R2)         INCREMENT PAST PARM\n         BCT   R4,JDTLOOP4         LOOP UNTIL PROCESSED ALL PARMS\n         BCT   R5,JDTLOOP2         LOOP UNTIL PROCESSED ALL PARMS\nJDTLOOP5 ST    R2,PARMADDR         SAVE START OF PARAMETER ADDRESS\n         B     JDTPARM             CONTINUE\nJDTEND   B     GETNEXT             GO GET NEXT TEXT RECORD\n         EJECT\n***********************************************************************\n*                                                                     *\n*                         L O C A T E                                 *\n*                                                                     *\n*        ISSUE THE LOCATE MACRO TO OBTAIN THE REQUESTED UNIT TYPE     *\n*        AND VOLSER INFORMATION.                                      *\n*                                                                     *\n***********************************************************************\nLOCATE   LA    R15,68              LOAD OPTION VALUE\n         SLL   R15,24              SHIFT OPTION TO HIGH BYTE\n         ST    R15,CAMLST          STORE INTO CAMLST AREA\n         LA    R15,LDSN            LOAD ADDR OF DSN\n         ST    R15,CAMLST+4        STORE INTO CAMLST AREA\n         XC    CAMLST+8(4),CAMLST+8 ZERO 3RD PARAM CAMLST AREA\n         XC    LOCAREA(12),LOCAREA CLEAR FIRST PART OF THE WORK AREA\n         LA    R15,LOCAREA         LOAD ADDR OF LOCATE WORK AREA\n         ST    R15,CAMLST+12       STORE INTO CAMLST AREA\n         LOCATE CAMLST             READ CATALOG\n         BR    R5                  RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*                         U C B S E A R                               *\n*                                                                     *\n*        SEARCH THE SYSTEM UCBS TO SEE IF THE REQUESTED DASD VOLUME   *\n*        IS MOUNTED OR ONLY MOUNTED PRIVATE IN WHICH CASE IT WILL     *\n*        BE DISMOUNTED AT END OF JOB.  IF NOT FOUND OR PRIVATE, IT    *\n*        IS A 'PRIV' UNIT.                                            *\n*                                                                     *\n***********************************************************************\nUCBSEAR  DS    0H\n         AIF   ('&UCBSEAR' EQ 'YES').UCBS1\n         BR    R5                  RETURN TO CALLER\n         AGO   .UCBS2\n.UCBS1   ANOP\n         SPACE 3\n*        SCAN UCB TABLE\n         SPACE 1\n         STM   R14,R12,SAVEREGS    SAVE REGISTERS\n         L     R1,CVTPTR           GET CVT ADDRESS\n         L     R6,CVTUCBSC-CVT(R1) POINT TO UCB SCAN SERVICE RTN\n         ST    R6,IOSVSUCB         SAVE ADDR OF UCB SCAN ROUTINE\n         MVI   DEVCLASS,UCB3DACC   SET FOR DASD UCBS ONLY\n         LA    R1,SCANWORK         LOAD ADDRESS OF SCAN WORK AREA\n         ST    R1,SCANP1           SAVE IN PARM LIST\n         LA    R1,DEVCLASS         LOAD ADDRESS OF DEVICE CLASS\n         ST    R1,SCANP2           SAVE IN PARM LIST\n         LA    R1,UCBADDR          LOAD ADDRESS OF UCB RETURN\n         ST    R1,SCANP3           SAVE IN PARM LIST\n         OI    SCANP3,X'80'        TURN ON HIGH ORDER BIT\n         XC    SCANWORK,SCANWORK   CLEAR SCAN SERVICE WORK AREA\nUCBSEAR1 L     R15,IOSVSUCB        LOAD ADDR OF UCB SCAN ROUTINE\n         LA    R1,SCANPARM         LOAD ADDRESS OF UCB SCAN PARM\n         BALR  R14,R15             GO TO UCB SCAN SERVICE ROUTINE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   UCBSEAR2            NOT ZERO, END OF UCBS\n         L     R2,UCBADDR          LOAD UCB ADDRESS\n         USING UCBCMSEG,R2         SET ADDRESSABILITY TO UCB\n         TM    UCBTBYT3,UCB3DACC   DIRECT ACCESS?\n         BZ    UCBSEAR1            NO\n         TM    UCBSTAT,UCBONLI     ONLINE?\n         BNO   UCBSEAR1            NO, IGNORE DEVICE\n         TM    UCBVOLI,X'FF'       ANY NAME?\n         BZ    UCBSEAR1            NO, IGNORE IT\n         CLC   TVOLSER,UCBVOLI     SEE IF OUR VOLSER\n         BE    UCBSEAR3            YES, FOUND IT\n         B     UCBSEAR1            NO, LOOK AT ANOTHER UCB\nUCBSEAR2 OI    UNITIND,PRIV        SINCE VOLUME NOT MOUNTED, PRIV\n         MVC   WTOLIST(LWTO5),WTO5 SET WTO LIST FORM\n         MVC   WTOLIST+34(6),TVOLSER SET VOLSER IN MESSAGE\n         MVC   WTOLIST+63(8),JOBNAME SET JOBNAME IN MESSAGE\n         AIF   ('&TSO' NE 'YES').TSO12\n         WTO   MF=(E,WTOLIST)\n         AGO   .TSO13\n.TSO12   ANOP\n         $$WTO WTOLIST             WRITE ERROR MESSAGE\n.TSO13   ANOP\n         B     GETNEXT             SKIP PROCESSING OF THIS STATEMENT\n         $MID  905\nWTO5     WTO   '&MID.REQUIRED DASD VOLUME XXXXXX NOT AVAILABLE FOR JOB X\n               XXXXXXXX',ROUTCDE=(2),DESC=(4),MF=L\nLWTO5    EQU   *-WTO5\nUCBSEAR3 LM    R14,R12,SAVEREGS    RESTORE REGISTERS\n         BR    R5                  RETURN TO CALLER\n         DROP  R2                  DROP ADDRESSABILITY TO UCB\n.UCBS2   ANOP\n         EJECT\n***********************************************************************\n*        UPDATE LAST EXEC TABLE (IF NEEDED) WITH UNIT INFO            *\n***********************************************************************\nEOF      TM    JOBIND,JOBFAIL      WAS JOB FAILED BY EXIT?\n         BO    JOBERROR            YES, BRANCH\n         L     R7,LASTEXEC         LOAD ADDR OF LAST EXEC ENTRY\n         LTR   R7,R7               SEE IF ADDR = 0\n         BZ    EOF1                IF ZERO, NO UPDATE, BRANCH\n         MVC   ETAPES,TAPECNT      MOVE STEP TAPE UNIT CNT TO TABLE\n         MVC   EPRIVS,PRIVCNT      MOVE STEP PRIV UNIT CNT TO TABLE\n         XC    TAPECNT,TAPECNT     ZERO TAPE UNIT CNT\n         XC    PRIVCNT,PRIVCNT     ZERO PRIV UNIT CNT\n         EJECT\n***********************************************************************\n*        THIS ROUTINE SEARCHES THE TABLE SAVED FOR JOB, EXEC AND DD   *\n*        ENTRIES TO DETERMINE THE MAXIMUM RESOURCES USED BY THE JOB   *\n*        THIS INFORMATION WILL BE USED TO COMPARE AGAINST A CLASS     *\n*        TABLE TO DETERMINE THE CLASS WHICH SHOULD BE SET FOR THE JOB.*\n***********************************************************************\nEOF1     MVC   STEPM,MSG0          INITIALIZE STEP MESSAGE\n         MVC   JOBM,MSG1           INITIALIZE JOB CLASS MESSAGE\n         MVC   JOBMSG(10),BLANKS   BLANK MESSAGE PREFIX\n         XC    STEPCNTR,STEPCNTR   ZERO STEP COUNTER FIELD\n         XC    MAXTAPE,MAXTAPE     ZERO MAX FIELD\n         XC    MAXPRIV,MAXPRIV     ZERO MAX FIELD\n         XC    MAXTOTAL,MAXTOTAL   ZERO MAX FIELD\n         XC    MAXREGN,MAXREGN     ZERO MAX FIELD\n         L     R7,FIRSTENT         LOAD START OF TABLE\n         CLC   ENTLEN(2,R7),H#0    SEE IF ONLY JOB ENTRY\n         BE    JOBERROR            ZEROS, NO OTHER ENTRIES, FLUSH JOB\nEOFLOOP1 CLI   ENTRYTYP,TYPJOB     SEE IF JOB ENTRY\n         BE    EOFLOOP2            YES, BRANCH\n         CLI   ENTRYTYP,TYPEXEC    SEE IF EXEC ENTRY\n         BE    EOFEXEC             YES, BRANCH\n         CLI   ENTRYTYP,TYPEND     SEE IF END OF TABLE\n         BE    EOFSCAN             YES, BRANCH\n         B     EOFLOOP2            LOOP\n***********************************************************************\n*        PRODUCE A STEP RESOURCE STATISTICS MESSAGE FOR EACH STEP     *\n*        TO BE WRITTEN TO THE JES2 MESSAGE DATA SET.                  *\n***********************************************************************\nEOFEXEC  LH    R4,STEPCNTR         LOAD STEP COUNTER\n         LA    R4,1(R4)            ADD ONE TO STEP COUNTER\n         STH   R4,STEPCNTR         SAVE STEP COUNTER\n         L     R4,ECARDNO          LOAD CARD NUMBER\n         CVD   R4,DOUBLE           CONVERT CARD NUMBER TO PACKED\n         MVC   STEPMSG-1(11),PREFIX MOVE MSG PREFIX TO MESSAGE\n         ED    STEPMSG-1(6),DOUBLE+5 EDIT CARD NUMBER TO PREFIX\n         MVC   STEPM+8(8),EJSTEP   MOVE JOB STEP TO MESSAGE\n         MVC   STEPM+17(8),EPSTEP  MOVE PROC STEP TO MESSAGE\n         LH    R4,ETAPES           LOAD NUMBER OF TAPES FOR STEP\n         CVD   R4,DOUBLE           CONVERT TO PACKED\n         MVC   STEPM+32(6),EDMASK  SET MESSAGE EDIT MASK\n         ED    STEPM+32(6),DOUBLE+5 EDIT NUMBER OF TAPES TO MESSAGE\n         LH    R4,EPRIVS           LOAD NUMBER OF PACK MOUNTS FOR STEP\n         CVD   R4,DOUBLE           CONVERT TO PACKED\n         MVC   STEPM+45(6),EDMASK  SET MESSAGE EDIT MASK\n         ED    STEPM+45(6),DOUBLE+5 EDIT NUMBER OF PACK MOUNTS TO MSG\n         LH    R4,EREGION          LOAD REGION SIZE FOR STEP\n         CVD   R4,DOUBLE           CONVERT TO PACKED\n         MVC   STEPM+59(6),EDMASK  SET MESSAGE EDIT MASK\n         ED    STEPM+59(6),DOUBLE+5 EDIT REGION SIZE TO MESSAGE\n         L     R4,MAXTIME          LOAD MAXIMUM CPU JOB CPU TIME\n         CVD   R4,DOUBLE           CONVERT TO PACKED\n         MVC   STEPM+73(6),EDMASK  SET MESSAGE EDIT MASK\n         ED    STEPM+73(6),DOUBLE+5 EDIT REGION SIZE TO MESSAGE\n         LA    R15,STEPMSG         LOAD ADDRESS OF STEP MESSAGE\n         BAL   R14,MSGRTN          GO PUT MSG TO JES MESSAGE DATA SET\n***********************************************************************\n*        COMPARE THE RESOURCES USED BY THIS STEP TO THE MAXIMUM       *\n*        RESOURCES USED BY PREVIOUS STEPS.  RETAIN THE GREATER        *\n*        OF THE NUMBER OF RESOURCES.                                  *\n***********************************************************************\nEOFCONT1 CLC   ETAPES,MAXTAPE      COMPARE STEP TAPES TO PREV MAX\n         BNH   EOFEXEC1            NOT GREATER, BRANCH\n         MVC   MAXTAPE,ETAPES      MAKE CURR COUNT NEW COUNT\nEOFEXEC1 CLC   EPRIVS,MAXPRIV      COMPARE STEP PRIVS TO PREV MAX\n         BNH   EOFEXEC2            NOT GREATER, BRANCH\n         MVC   MAXPRIV,EPRIVS      MAKE CURR COUNT NEW COUNT\nEOFEXEC2 LH    R4,EPRIVS           LOAD NUMBER OF PRIVS IN STEP\n         AH    R4,ETAPES           ADD NUMBER OF TAPES\n         CH    R4,MAXTOTAL         COMPARE STEP TOT CNT TO PREV MAX\n         BNH   EOFEXEC3            NOT GREATER, BRANCH\n         STH   R4,MAXTOTAL         MADE CURR TOTAL CNT NEW MAX\nEOFEXEC3 CLC   EREGION,MAXREGN     COMPARE STEP REGION TO PREV MAX\n         BNH   EOFLOOP2            NOT GREATER, BRANCH\n         MVC   MAXREGN,EREGION     MAKE CURR REGION NEW MAX\nEOFLOOP2 LA    R7,ENTLEN(,R7)      INCREMENT TO NEXT ENTRY\n         B     EOFLOOP1            LOOP\nEOFSCAN  CLC   MAXTAPE,H#0         SEE IF ANY TAPES\n         BE    EOFPACK             NO TAPES, GO CHECK FOR PRIV\n         OI    RESOURCE,TAPES      TURN ON TAPES RESOURCE\nEOFPACK  CLC   MAXPRIV,H#0         SEE IF ANY PRIV\n         BE    EOFLJOB             NO, BRANCH\n         OI    RESOURCE,USERPACK   TURN ON USERPACK RESOURCE\nEOFLJOB  CLC   MAXTIME,F#15        SEE IF CPU TIME > 15\n         BNH   CLASSEAR            NO, BRANCH\n         OI    RESOURCE+1,LONGJOB  TURN ON LONGJOB RESOURCE\n         EJECT\n***********************************************************************\n*        THIS ROUTINE SEARCHES THE APPROPRIATE CLASS TABLES FOR       *\n*        MATCHES ON RESOURCES USED TO DETERMINE THE CORRECT CLASS     *\n*        FOR A JOB.  NOTE THAT EACH GROUP (TEST, PRODUCTION,          *\n*        OPERATIONS, AND TECH SUPPORT HAVE CLASSES WHICH MAY BE       *\n*        SPECIFIED IN ORDER TO BYPASS THE TABLES OR USED TO SINGLE    *\n*        THREAD A SERIES OF JOBS BECAUSE THERE WILL ONLY BE ONE       *\n*        INITIATOR SET TO THAT CLASS.                                 *\n***********************************************************************\nCLASSEAR TM    JOBIND,JOBSTC+JOBTSO STC OR TSO\n         BM    NOCHANGE            YES, NO CHANGE OF CLASS\n         TM    RESOURCE,NDM        IS THIS AN NDM JOB ?\n         BZ    NOTNDM              NO BRANCH\n         MVI   CLASSFLD,C'U'       SET TO CLASS=U\n         CLC   U7TEST,=C'Y'        SEE IF UCC7 IS LOADING THIS JOB\n         BE    CLASSEA1            BR AROUND COMPARE FOR 1 STEP JOB\n         CLC   STEPCNTR,H#1        SEE IF SINGLE STEP JOB\n         BE    SETCLASS            YES, GO SET CLASS U\n         B     CLASSEA2            GREATER THAN MAX FOR NDM\nCLASSEA1 CLC   STEPCNTR,H#2        SEE IF 2 STEP JOB\n         BE    SETCLASS            YES, GO SET CLASS U\nCLASSEA2 MVC   ERRORM,MSG5         INITIALIZE ERROR MESSAGE\n         MVC   ERRORMSG(10),BLANKS BLANK MESSAGE PREFIX\n         LA    R15,ERRORMSG        LOAD ADDRESS OF MESSAGE\n         BAL   R14,MSGRTN          GO ISSUE ERROR MSG\n         OI    JOBIND,JOBFAIL      TURN ON JOB FAILED IND\n         B     JOBERROR            GO KILL THE JOB\nNOTNDM   L     R7,FIRSTENT         LOAD START OF TABLE\n         LA    R4,JCLASS1          LOAD ADDR OF TEST CLASS TABLE\n         TM    JOBIND,JOBPROD      SEE IF PRODUCTION JOB\n         BO    CLASSPRD            YES, BRANCH\n         TM    JOBIND,JOBTEST      SEE IF TEST JOB\n         BO    CLASST              YES, BRANCH\n         TM    JOBIND,JOBTECH      SEE IF TECH SUPPORT JOB\n         BO    CLASSTS             YES, BRANCH\n         TM    JOBIND,JOBOPER      SEE IF OPERATIONS JOB\n         BNO   EOFSCAN1            NO, USE TEST CLASS TABLE\n***********************************************************************\n*                     O P E R A T I O N S                             *\n***********************************************************************\nCLASSOP  LA    R4,JCLASS1          LOAD ADDR OF TEST CLASS TABLE\n         CLI   INCLASS,C'M'        SPECIAL CLASS FOR OPERATIONS\n         BNE   EOFSCAN1            NO, USE TEST CLASS TABLE\n         MVI   CLASSFLD,C'M'       SET NEW CLASS TO 'M'\n         B     CKCLASS             BYPASS TABLE SEARCH\n***********************************************************************\n*                 T E C H    S U P P O R T                            *\n***********************************************************************\nCLASSTS  LA    R4,JCLASS1          LOAD ADDR OF TEST CLASS TABLE\n         CLI   INCLASS,C'S'        SPECIAL CLASS FOR TECH SUPPORT\n         BNE   EOFSCAN1            NO, USE TEST CLASS TABLE\n         MVI   CLASSFLD,C'S'       SET NEW CLASS TO 'S'\n         B     CKCLASS             BYPASS TABLE SEARCH\n***********************************************************************\n*                       T E S T                                       *\n***********************************************************************\n*\n***********************************************************************\n*        TEST JOBS HAVE SEVERAL JOB CLASSES WHICH MAY BE USED         *\n*        FOR SPECIAL REASONS.  THE CLASS SPECIFIED IN THE JOB         *\n*        CARD WILL BE USED TO SEARCH A TABLE TO SEE IF ONE OF         *\n*        THOSE CLASSES WAS ENTERED.  THE ALLOWABLE RESOURCES          *\n*        FOR THAT JOB CLASS WILL BE COMPARED TO THE RESOURCES         *\n*        ACTUALLY USED BY THE JOB.  IF THE RESOURCES USED ARE         *\n*        GREATER THAN THOSE ALLOWED BY THE SPECIAL CLASS, THE         *\n*        JOB WILL BE GIVEN A JCL ERROR.                               *\n***********************************************************************\nCLASST   LA    R4,JCLASS2          LOAD ADDR OF SPECIAL TEST CLASS TABL\n         CLI   INCLASS,C'0'        SPECIAL SETUP CLASS FOR TEST JOBS\n         BNE   CLASST1             NO, BRANCH\n         MVI   CLASSFLD,C'0'       SET NEW CLASS TO '0'\n         B     CKCLASS             BYPASS TABLE SEARCH\nCLASST1  CLI   0(R4),X'00'         END OF TABLE\n         BE    CLASST4             YES, GO SCAN REGULAR TABLE\n         CLC   INCLASS,0(R4)       SPECIAL CLASS MATCH\n         BE    CLASST2             YES, BRANCH\n         LA    R4,16(,R4)          INCREMENT TO NEXT ENTRY\n         B     CLASST1             LOOP\nCLASST2  CLC   MAXTAPE,4(R4)       MATCH TAPE COUNT\n         BH    CLASST3             COUNT EXCEEDS TABLE, BRANCH\n         CLC   MAXPRIV,6(R4)       MATCH PRIV COUNT\n         BH    CLASST3             COUNT EXCEEDS TABLE, BRANCH\n         CLC   MAXTOTAL,8(R4)      MATCH TOTAL COUNT\n         BH    CLASST3             COUNT EXCEEDS TABLE, BRANCH\n         CLC   MAXREGN,10(R4)      MATCH REGION VALUES\n         BH    CLASST3             REGION EXCEEDS TABLE, BRANCH\n         CLC   MAXTIME,12(R4)      MATCH MAXIMUM CPU TIME\n         BH    CLASST3             CPU TIME EXCEEDS TABLE, BRANCH\n         MVC   CLASSFLD,0(R4)      MOVE CLASS TO SAVE AREA\n         B     CKCLASS             GET OUT OF SEARCH\nCLASST3  MVC   ERRORM,MSG3         INITIALIZE ERROR MESSAGE\n         MVC   ERRORMSG(10),BLANKS BLANK MESSAGE PREFIX\n         LA    R15,ERRORMSG        LOAD ADDRESS OF MESSAGE\n         BAL   R14,MSGRTN          GO ISSUE ERROR MSG\n         OI    JOBIND,JOBFAIL      TURN ON JOB FAILED IND\n         MVI   CLASSFLD,C'A'       SET TO CLASS=A\n         B     CKCLASS             GO SET DEFAULT CLASS\nCLASST4  LA    R4,JCLASS1          LOAD ADDR OF STD TEST CLASS TABLE\n         B     EOFSCAN1            GO USE TEST CLASS TABLE\n***********************************************************************\n*                     P R O D U C T I O N                             *\n***********************************************************************\nCLASSPRD LA    R4,JCLASS3          LOAD ADDR OF PROD CLASS TABLE\n         CLI   INCLASS,C'H'        SPECIAL SETUP CLASS FOR TEST JOBS\n         BNE   EOFSCAN1            NO, GO USE PROD CLASS TABLE\n         MVI   CLASSFLD,C'H'       SET NEW CLASS TO 'H'\n         B     CKCLASS             BYPASS TABLE SEARCH\n***********************************************************************\n*        SCAN THE APPROPRIATE CLASS TABLE FOR THE CLASS WHICH         *\n*        MATCHES THE RESOURCES USED BY THE JOB.                       *\n***********************************************************************\nEOFSCAN1 CLI   0(R4),X'00'         END OF TABLE\n         BNE   EOFSCAN2            NO, CONTINUE\n         MVC   ERRORM,MSG4         INITIALIZE ERROR MESSAGE\n         MVC   ERRORMSG(10),BLANKS BLANK MESSAGE PREFIX\n         LA    R15,ERRORMSG        LOAD ADDRESS OF MESSAGE\n         BAL   R14,MSGRTN          GO ISSUE ERROR MSG\n         MVI   CLASSFLD,C'A'       SET TO CLASS=A\n         B     CKCLASS             GO SET DEFAULT CLASS\nEOFSCAN2 CLC   MAXTAPE,4(R4)       MATCH TAPE COUNT\n         BH    EOFSCAN3            COUNT EXCEEDS TABLE, BRANCH\n         CLC   MAXPRIV,6(R4)       MATCH PRIV COUNT\n         BH    EOFSCAN3            COUNT EXCEEDS TABLE, BRANCH\n         CLC   MAXTOTAL,8(R4)      MATCH TOTAL COUNT\n         BH    EOFSCAN3            COUNT EXCEEDS TABLE, BRANCH\n         CLC   MAXREGN,10(R4)      MATCH REGION VALUES\n         BH    EOFSCAN3            REGION EXCEEDS TABLE, BRANCH\n         CLC   MAXTIME,12(R4)      MATCH MAXIMUM CPU TIME\n         BH    EOFSCAN3            CPU TIME EXCEEDS TABLE, BRANCH\n         MVC   CLASSFLD,0(R4)      MOVE CLASS TO SAVE AREA\n         B     CKCLASS             GET OUT OF SEARCH\nEOFSCAN3 LA    R4,16(,R4)          INCREMENT TO NEXT ENTRY\n         B     EOFSCAN1            LOOP\n***********************************************************************\n*        IF THE CLASS WHICH WAS SPECIFIED OR DETERMINED WAS CLASS     *\n*        \"0\", THE JOB MUST HAVE SPECIFIED TYPRUN=HOLD ON THE JOB      *\n*        CARD.                                                        *\n***********************************************************************\nCKCLASS  CLI   CLASSFLD,C'0'       UNLIMITED TEST CLASS?\n         BNE   SETCLASS            NO, BRANCH\n         TM    JOBIND2,HELD        SEE IF HELD JOB\n         BO    SETCLASS            YES, GO SET CLASS\n         MVC   ERRORM,MSG2         INITIALIZE ERROR MESSAGE\n         MVC   ERRORMSG(10),BLANKS BLANK MESSAGE PREFIX\n         LA    R15,ERRORMSG        LOAD ADDRESS OF MESSAGE\n         BAL   R14,MSGRTN          GO ISSUE ERROR MSG\n         OI    JOBIND,JOBFAIL      TURN ON JOB FAILED IND\n         B     JOBERROR            GO KILL THE JOB\nSETCLASS MVC   JOBM+21(1),CLASSFLD MOVE NEW CLASS TO MESSAGE\n         LA    R15,JOBMSG          LOAD ADDRESS OF JOB CLASS MESSAGE\n         BAL   R14,MSGRTN          GO WRITE MESSAGE TO JES MESSAGE DATA\n         EJECT\nCLEAR    DS    0H\n         CLI   CLASSFLD,C'A'       TEST NEW CLASS\n         BNL   CHGCLASS            NEW, GO RESET TO NEW CLASS\nDEFAULT  MVI   CLASSFLD,C'A'       SET NEW CLASS TO 'A'\n         EJECT\n***********************************************************************\n*                                                                     *\n*              S E T     T H E    N E W    C L A S S                  *\n*                                                                     *\n***********************************************************************\nCHGCLASS DS    0H\n         AIF   ('&MODIFY' NE 'YES').MODIFY1\n         L     R14,JQEADDR    LOAD JQE ADDRESS\n         USING JQEDSECT,R14        SET ADDRESSABILITY TO JQE\n         MVC   JQEJCLAS,CLASSFLD   CHANGE CLASS IN JQE\n         DROP  R14                 DROP ADDRESSABILITY TO JQE\n         L     R14,JCTADDR         LOAD JCT ADDRESS\n         USING JCTDSECT,R14        SET ADDRESSABILITY TO JCT\n         MVC   JCTJCLAS,CLASSFLD   CHANGE CLASS IN JCT\n         MVC   JCTCLASS,CLASSFLD   CHANGE CLASS IN JCT\n         DROP  R14                 DROP ADDRESSABILITY TO JCT\n.MODIFY1 ANOP\n         EJECT\nNOCHANGE XC    RETCODE,RETCODE     SET RETURN CODE TO ZERO\n         TM    JOBIND,JOBFAIL      WAS JOB FAILED BY EXIT?\n         BO    JOBERROR            YES, BRANCH\n         B     ENDOFIT             BRANCH\nJOBERROR DS    0H\n         AIF   ('&ERRMSG' EQ 'YES').ERRMSG1\n         B     JOBERR1             BYPASS WTO FOR FAILURE\n.ERRMSG1 ANOP\n         MVC   WTOLIST(LWTO2),WTO2 SET WTO LIST FORM\n         AIF   ('&TSO' NE 'YES').TSO1\n         WTO   MF=(E,WTOLIST)\n         AGO   .TSO2\n.TSO1    ANOP\n         $$WTO WTOLIST             WRITE ERROR MESSAGE\n.TSO2    ANOP\n         B     JOBERR1             BYPASS WTO LIST FORM\n         $MID  902\nWTO2     WTO   '&MID.JOB TERMINATED BY STANDARDS ENFORCEMENT EXIT',    X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO2    EQU   *-WTO2\nJOBERR1  DS    0H\n         AIF   ('&FLUSH' EQ 'YES').FLUSH1\n         B     ENDOFIT             BYPASS SETTING OF FAILURE RETURN COD\n.FLUSH1  ANOP\n         LA    R15,8               SET JOB FAIL RETURN CODE\n         ST    R15,RETCODE         AND SAVE IT\n         EJECT\n***********************************************************************\n*                        C L E A N    U P                             *\n***********************************************************************\nENDOFIT  DS    0H                  END OF EXIT\n         LA    R1,ESTAEL           LOAD ADDRESS OF ESTAE LIST FORM\n         AIF   ('&TSO' EQ 'YES').TSO10\n         AIF   ('&ESTAE' NE 'YES').TSO10\n         ESTAE 0,MF=(E,(1))        CANCEL ESTAE ENVIRONMENT\n.TSO10   ANOP\n         L     R1,WORKADDR         LOAD ADDRESS OF EXIT PARM LIST\n         L     R1,0(R1)            LOAD ADDRESS OF EXIT WORK AREA\n         XC    0(16,R1),0(R1)      CLEAR EXIT WORK AREA\n         L     R0,F#16384          LOAD FREEMAIN LENGTH\n         L     R1,SUBTABLE         LOAD JCL SUB TABLE AREA ADDRESS\n         FREEMAIN R,LV=(0),A=(1)\n         L     R2,RETCODE          SAVE RETURN CODE\n         LH    R0,GETLEN           LOAD FREEMAIN SIZE\n         LR    R1,R13              SAVE WORKAREA ADDRESS\n         L     R13,4(,R13)         RESTORE ORIG REG 13\n         FREEMAIN R,LV=(0),A=(1)\n         LR    R15,R2              SET RETURN CODE\n         RETURN (14,12),RC=(15)    GO BACK TO JES2\n         EJECT\n***********************************************************************\n*        RETURN TO JES REQUESTING THE NEXT INTERNAL TEXT STATEMENT    *\n***********************************************************************\nGETNEXT  L     R4,CARDNO           LOAD CARD NUMBER FIELD\n         LA    R4,1(,R4)           ADD 1 TO CARD NUMBER\n         ST    R4,CARDNO           STORE NEW CARD NUMBER\n         XC    RETCODE,RETCODE     SET RETURN CODE TO ZERO\n         LA    R1,ESTAEL           LOAD ADDRESS OF ESTAE LIST FORM\n         AIF   ('&TSO' EQ 'YES').TSO11\n         AIF   ('&ESTAE' NE 'YES').TSO11\n         ESTAE 0,MF=(E,(1))        CANCEL ESTAE ENVIRONMENT\n.TSO11   ANOP\n         L     R13,4(,R13)         RESTORE ORIG REG 13\n         SLR   R15,R15             SET RETURN CODE TO ZERO\n         RETURN (14,12),RC=(15)    GO BACK TO JES2\n         EJECT\n***********************************************************************\n*                                                                     *\n*                        E R R O R T N                                *\n*                                                                     *\n*        THIS ROUTINE WILL WRITE A MESSGE TO THE JES MESSAGE DATA     *\n*        SET USING THE INDEX INTO THE MESSAGE TABLE PASSED BY         *\n*        REGISTER 15 TO THE ROUTINE AND USE THE CARDNO FOR THE        *\n*        STATEMENT NUMBER IN THE MESSAGE PREFIX.                      *\n*                                                                     *\n***********************************************************************\n         PUSH  USING\nERRORTN  STM   R14,R12,SAVEREGS    SAVE REGISTERS\n         L     R6,OUTRPL           GET BASE FOR RPL\n         USING IFGRPL,R6           SET ADDRESSABILITY\n         LR    R2,R15              SAVE ERROR NUMBER\n         BCTR  R2,0                MAKE ERROR NUMBER REL TO ZERO\n         MH    R2,H#90             MULTIPLY BY 90 FOR OFFSET\n         L     R3,CARDNO           LOAD CARD NUMBER\n         CVD   R3,DOUBLE           CONVERT CARD NUMBER TO PACKED\n         L     R4,MSGCOUNT         LOAD MESSAGE COUNTER\n         LTR   R4,R4               SEE IF FIRST MESSAGE\n         BNZ   MSGOUT              NO, DO NOT PUT HEADERS\n         MVC   BUFFER,HEADER1      MOVE HEADER LINE1 TO JES2 BUFFER\n         BAL   R5,PUTMSG           GO WRITE TO MSG DATA SET\n         MVC   BUFFER,HEADER2      MOVE HEADER LINE2 TO JES2 BUFFER\n         BAL   R5,PUTMSG           GO WRITE TO MSG DATA SET\nMSGOUT   LA    R4,1(,R4)           ADD 1 TO MESSAGE COUNT\n         ST    R4,MSGCOUNT         SAVE MESSAGE COUNTER\n         MVC   MSGPREF,PREFIX      MOVE MSG PREFIX TO JES2 BUFFER\n         ED    MSGPREF(6),DOUBLE+5 EDIT CARD NUMBER TO PREFIX\n         LA    R3,MESSAGES         LOAD ADDR OF MESSAGE TABLE\n         AR    R3,R2               ADD OFFSET OF MSG TO TBL ADDR\n         MVC   MSGTEXT,0(R3)       MOVE PROPER MSG TO JES2 BUFFER\n         BAL   R5,PUTMSG           GO WRITE TO MSG DATA SET\n         OI    JOBIND,JOBFAIL      TURN ON JOB FAILED IND\nMSGOUT1  LM    R14,R12,SAVEREGS    RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*                          M S G R T N                                *\n*                                                                     *\n*        THIS ROUTINE WILL WRITE THE MESSAGE WHICH IS POINTED TO      *\n*        BY REGISTER 15 TO THE JES MESSAGE DATA SET.                  *\n*                                                                     *\n***********************************************************************\n         PUSH  USING\nMSGRTN   STM   R14,R12,SAVEREGS    SAVE REGISTERS\n         LR    R2,R15              SAVE BUFFER ADDRESS\n         L     R6,OUTRPL           GET BASE FOR RPL\n         USING IFGRPL,R6           SET ADDRESSABILITY\n         L     R3,CARDNO           LOAD CARD NUMBER\n         CVD   R3,DOUBLE           CONVERT CARD NUMBER TO PACKED\n         L     R4,MSGCOUNT         LOAD MESSAGE COUNTER\n         LTR   R4,R4               SEE IF FIRST MESSAGE\n         BNZ   MSGRTN1             NO, DO NOT PUT HEADERS\n         MVC   BUFFER,HEADER1      MOVE HEADER LINE1 TO JES2 BUFFER\n         BAL   R5,PUTMSG           GO WRITE TO MSG DATA SET\n         MVC   BUFFER,HEADER2      MOVE HEADER LINE2 TO JES2 BUFFER\n         BAL   R5,PUTMSG           GO WRITE TO MSG DATA SET\nMSGRTN1  LA    R4,1(,R4)           ADD 1 TO MESSAGE COUNT\n         ST    R4,MSGCOUNT         SAVE MESSAGE COUNTER\n         MVC   BUFFER,0(R2)        MOVE MESSAGE FROM BUFFER\n         BAL   R5,PUTMSG           GO WRITE TO MSG DATA SET\n         LM    R14,R12,SAVEREGS    RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*                          P U T M S G                                *\n*                                                                     *\n*        WRITE MESSAGE TO JES MESSAGE DATA SET                        *\n*                                                                     *\n***********************************************************************\nPUTMSG   DS    0H\n         MVI   RPLREQ,RPLPUT       OPERATION TO BE A PUT\n         L     R0,OUTACB           LOAD OUTPUT ACB ADDRESS\n         ST    R0,RPLDACB          SET IN ACB POINTER IN RPL\n         LA    R0,BUFFER           LOAD ADDR OF BUFFER\n         ST    R0,RPLAREA          POINT TO BUFFER\n         XC    RPLARG(4),RPLARG    ZERO FIELD\n         MVI   RPLOPT1,RPLSEQ      OPERATION TO BE SEQUENTIAL\n         MVI   RPLOPT2,X'00'       ZERO FIELD\n         LA    R0,100              LOAD MESSAGE LENGTH\n         ST    R0,RPLRLEN          STORE MESSAGE LENGTH\n         XC    RPLBUFL(4),RPLBUFL  ZERO FIELD\n         XC    RPLDDDD(4),RPLDDDD  ZERO FIELD\n         ST    R13,PUTSAVE+72      SAVE SAVE AREA POINTER\n         LA    R13,PUTSAVE         SAVE AREA FOR ACCESS METHOD\n         LA    R1,IFGRPL           LOAD ADDR OF RPL\n         PUT   RPL=(1)             WRITE TO MESSAGE DATA SET\n         L     R13,72(R13)         RESTORE SAVE AREA POINTER\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   MSGERROR            BAD, GO BAG JOB\n         BR    R5                  RETURN TO CALLER\n         EJECT\nMSGERROR MVC   WTOLIST(LWTO1),WTO1 SET WTO LIST FORM\n         AIF   ('&TSO' NE 'YES').TSO3\n         WTO   MF=(E,WTOLIST)\n         AGO   .TSO4\n.TSO3    ANOP\n         $$WTO WTOLIST             WRITE ERROR MESSAGE\n.TSO4    ANOP\n         B     JOBERROR            GET OUT\n         $MID  901\nWTO1     WTO   '&MID.PUT TO JOB MESSAGE DATA SET FAILED',              X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO1    EQU   *-WTO1\n         DROP  R6\n         POP   USING\n         EJECT\n***********************************************************************\n*                                                                     *\n*                          R E F B A C K                              *\n*                                                                     *\n*        THIS ROUTINE HANDLES DSN AND VOLSER REFERBACKS.  THE SAVE    *\n*        TABLE WILL BE SEARCHED FROM THE BEGINNING FOR JOBSTEP AND/OR *\n*        PROCSTEP ENTRY AND THEN WITHIN THE DD ENTRIES FOR THAT STEP. *\n*        IF THE ENTRY IS FOUND, THE UNIT AND DSNAME INFORMATION WILL  *\n*        BE SAVED, IF NOT, A RETURN IS MADE TO THE CALLING RTN.       *\n*                                                                     *\n***********************************************************************\n*\nREFBACK  SLR   R3,R3               CLEAR WORK REGISTER\n         SLR   R4,R4               CLEAR WORK REGISTER\n         SLR   R5,R5               CLEAR WORK REGISTER\n         IC    R5,2(R2)            LOAD NUMBER OF DSN SUBPARAMETERS\n         N     R5,F#127            'AND' OUT THE HIGH ORDER BIT\n         LA    R2,3(,R2)           LOAD START OF REFBK ENTRIES\n         CLI   0(R2),X'01'         SEE IF LEN OF 1ST POS = 1\n         BNE   DDLOOP              NO, DSN(MEMBER) PDS DISK ONLY, IGNOR\n         CLI   1(R2),C'*'          SEE IF REFERBACK\n         BNE   DDLOOP              NO, DSN(MEMBER) PDS DISK ONLY, IGNOR\n         CH    R5,H#4              SEE IF NUMBER PARAMS > 4\n         BNH   *+16                NO, CONTINUE\n         LA    R15,32              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         MVI   REFERBCK,C' '       BLANK START OF REFBACK WORK AREA\n         MVC   REFERBCK+1(23),REFERBCK BLANK ENTIRE WORK AREA\n         XC    REFUNIT,REFUNIT     ZERO REFERBACK UNIT FEEDBACK\n         XC    REFVOL,REFVOL       ZERO REFERBACK VOLSER FIELD\n         MVI   REFDSN,C' '         BLANK ENTIRE\n         MVC   REFDSN+1(43),REFDSN  REFERBACK DSNAME FIELD\nREFLOOP1 LA    R4,1(,R4)           ADD 1 TO COUNT\n         CR    R4,R5               SEE IF COUNT EXCEEDED\n         BH    REFSEAR             YES, GO SEARCH BACK\n         ICM   R3,1,0(R2)          LOAD LENGTH OF ENTRY\n         BNZ   *+16                NOT ZERO, OK\n         LA    R15,32              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         CH    R3,H#8              SEE IF LENGTH > 8\n         BNH   *+16                NO, CONTINUE\n         LA    R15,32              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         CH    R4,H#1              SEE IF 1ST ENTRY\n         BE    REFLOOP2            YES, IGNORE\n         CH    R4,H#2              SEE IF 2ND ENTRY\n         BE    REF#2               YES, GO PROCESS IT\n         CH    R4,H#3              SEE IF 3RD ENTRY\n         BE    REF#3               YES, GO PROCESS IT\n*        THIS MUST BE THE 4TH ENTRY\nREF#4    EX    R3,MOVE10           MOVE DDN TO SEARCH FIELD\n         B     REFLOOP2            BRANCH\nREF#3    CH    R5,H#3              SEE IF ONLY 3 ENTRIES\n         BE    REF#3B              YES, MUST BE DDNAME\n*        IF NOT DDNAME, MUST BE PROCSTEP NAME\nREF#3A   EX    R3,MOVE11           MOVE ENTRY TO PSTEP ENTRY\n         B     REFLOOP2            BRANCH\nREF#3B   EX    R3,MOVE10           MOVE ENTRY TO DDNAME\n         B     REFLOOP2            BRANCH\nREF#2    CH    R5,H#2              SEE IF ONLY 2 ENTRIES\n         BE    REF#2B              ONLY 2, MUST BE DDNAME\n*        IF 3 OR 4 ENTRIES, THIS ENTRY MUST BE FOR JOBSTEP\nREF#2A   EX    R3,MOVE12           MOVE ENTRY TO JSTEP\n         B     REFLOOP2            BRANCH\nREF#2B   EX    R3,MOVE10           MOVE ENTRY TO DDNAME\nREFLOOP2 LA    R2,2(R3,R2)         INCREMENT TO NEXT ENTRY\n         B     REFLOOP1            LOOP\nREFSEAR  L     R7,LASTEXEC         LOAD ADDR OF LAST EXEC CARD\n*        IF REFERBACK WITHIN CURRENT STEP, THIS ADDR WILL BE\n*        USED FOR START OF SEARCH\n         CLI   REFJSTEP,C' '       SEE IF JSTEP PART OF SEARCH\n         BE    REFSEAR5            NO, SAME STEP WE ARE IN\n         CLI   REFPSTEP,C' '       SEE IF PROCSTEP PART OF SEARCH\n         BE    REFSEAR1            BLANK, NO PROCSTEP\n         LA    R3,15               SET COMPARE LENGTH FOR JS & PS\n         B     REFSEAR2            BRANCH\nREFSEAR1 LA    R3,7                SET COMPARE LENGTH FOR JS ONLY\nREFSEAR2 L     R7,FIRSTENT         LOAD START OF TABLE\nREFSEAR3 LA    R7,ENTLEN(,R7)      INCREMENT PAST JOB ENTRY\n         CLI   ENTRYTYP,TYPEXEC    SEE IF EXEC ENTRY\n         BE    REFSEAR4            YES, GO COMPARE\n         CLI   ENTRYTYP,TYPEND     SEE IF END OF TABLE\n         BE    REFNO               NOT FOUND, PROBABLE JCL ERROR, EXIT\n         B     REFSEAR3            LOOP\nREFSEAR4 EX    R3,COMPARE1         SEE IF RIGHT STEP\n         BE    REFSEAR5            YES, GO SEARCH FOR DDNAME\n         B     REFSEAR3            LOOP FOR NEXT ENTRY\nREFSEAR5 LA    R7,ENTLEN(,R7)      INCREMENT TO NEXT DD ENTRY\n         TM    ENTRYTYP,TYPEDD     SEE IF DD ENTRY\n         BNO   REFNO               DDNAME NOT FOUND, EXIT\nREFSEAR6 CLC   REFDDN,DDDN         MATCH DDNAME????\n         BNE   REFSEAR5            NO, LOOP FOR NEXT DD\nREFOUND  MVC   REFDSN(L'DDSN),DDSN SAVE DSNAME\n         MVC   REFUNIT,DTYPE       SAVE UNIT INFO\n         MVC   REFVOL,DVOLSER      SAVE VOLSER INFO\nREFNO    BR    R14                 RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*                          B A D E R R O R                            *\n*                                                                     *\n*        A BAD ERROR HAS OCCURRED, AND A FAST PATH THROUGH THE        *\n*        EXIT MUST BE FACILITATED.                                    *\n*                                                                     *\n***********************************************************************\nBADERROR OI    JOBIND2,SEVERE      TURN ON SEVERE INDICATOR\n         OI    JOBIND,JOBFAIL      TURN ON JOB FAILED INDICATOR\n         B     GETNEXT             GO GET NEXT CARD\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*                          T B L F U L L                              *\n*                                                                     *\n*        THE INTERNAL DD TABLE IS FULL.  ISSUE THE APPROPRIATE        *\n*        MESSAGE AND EXIT WITH A JCL ERROR.                           *\n*                                                                     *\n***********************************************************************\nTBLFULL  OI    JOBIND2,SEVERE      TURN ON SEVERE INDICATOR\n         OI    JOBIND,JOBFAIL      TURN ON JOB FAILED INDICATOR\n         MVC   WTOLIST(LWTO3),WTO3 SET WTO LIST FORM\n         AIF   ('&TSO' NE 'YES').TSO5\n         WTO   MF=(E,WTOLIST)\n         AGO   .TSO6\n.TSO5    ANOP\n         $$WTO WTOLIST             WRITE ERROR MESSAGE\n.TSO6    ANOP\n         B     GETNEXT             SKIP PROCESSING OF THIS STATEMENT\n         $MID  903\nWTO3     WTO   '&MID.MAXIMUM ENTRIES IN INTERNAL TABLE EXCEEDED',      X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO3    EQU   *-WTO3\n         EJECT\n***********************************************************************\n*                                                                     *\n*                          S T A E X I T                              *\n*                                                                     *\n*        THIS ROUTINE GETS CONTROL FOR EVERY ABEND OCCURRING IN       *\n*        THE EXIT.  THIS ROUTINE WILL ISSUE AN APPROPRIATE MESSAGE    *\n*        TO THE OPERATOR AND TAKE A CONSOLE DUMP FOR PROBLEM          *\n*        RESOLUTION.  RETRY WILL BE ATTEMPTED FOR ALL ABENDS          *\n*        WHICH WILL SET A FAST PATH THROUGH THE EXIT AND              *\n*        TERMINATE THE JOB.  NOTE THAT THERE IS A RECURSION           *\n*        CHECK TO PROTECT FROM ABEND LOOPS.                           *\n*                                                                     *\n***********************************************************************\n         PUSH  USING\nSTAEXIT  LR    R8,R15              SET NEW BASE ADDR\n         USING STAEXIT,R8          SET ADDRESSABILITY\n         CH    R0,H#12             SEE IF CORE AVAILABLE\n         BE    STAENO              NO, BRANCH\n         SAVE  (14,12)             SAVE REGISTERS\n         SPACE 1\n         L     R2,0(R1)            LOAD PARAMETER ADDRESS\n         L     R11,STAEREGS+64-WORKAREA(R2) RESTORE HCT ADDRESS\n         LA    R3,STAESAVE-WORKAREA(R2) LOAD ADDRESS OF NEW SAVE\n         ST    R3,8(,R13)          SAVE NEW SAVE ADDRESS IN OLD\n         ST    R13,4(,R3)          SAVE OLD SAVE ADDRESS IN NEW\n         LR    R13,R3              SET NEW SAVE ADDRESS\n         LR    R3,R1               SAVE SDWA ADDRESS\n         LA    R0,L'WTO4           LOAD LENGTH OF MESSAGE\n         LA    R1,WTOLIST-WORKAREA(R2) LOAD ADDRESS OF WTO LIST FORM\n         MVC   0(LWTO4,R1),WTO4    SET WTO LIST FORM\n         AIF   ('&TSO' NE 'YES').TSO7\n         WTO   MF=(E,(R1))\n         AGO   .TSO8\n.TSO7    ANOP\n         $$WTO (R1)                WRITE ERROR MESSAGE\n.TSO8    ANOP\n         CLI   RECURS-WORKAREA(R2),X'FF'   SEE IF RECURSIVE ABEND\n         BE    STAENO              YES, TELL ABEND NOT TO RETRY\n         AIF   ('&SDUMP' EQ 'YES').SDUMP1\n         B     STAE1               BYPASS SDUMP SWITCH\n.SDUMP1  ANOP\n         LA    R1,SDUMPL-WORKAREA(R2) LOAD ADDRESS OF SDUMP LIST FORM\n         MVC   0(LSDUMPL,R1),SDUMP INITIALIZE SDUMP LIST FORM\n         SDUMP MF=(E,(1))          TAKE SYSTEM DUMP\nSTAE1    DS    0H\n         L     R13,4(,R13)         RESTORE ORIGINAL REG 13\n         LR    R1,R3               RESTORE SDWA ADDRESS\n         SETRP REGS=(14,12),DUMP=IGNORE,RC=4,FRESDWA=YES,              X\n               RETADDR=STAERTRY\nSTAENO   LA    R0,STAERTRY         LOAD RETRY ADDRESS\n         LA    R15,4               SET RETURN CODE TO RETRY\n         BR    R14                 GO RETRY\n         SPACE 2\n         $MID  904\nWTO4     WTO   '&MID.JES EXIT6 ABEND',                                 X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO4    EQU   *-WTO4\n         SPACE 1\n         DROP  R8                  DROP LOCAL ADDRESSABILITY\n         SPACE 2\n         POP   USING\n***********************************************************************\n*                                                                     *\n*                          S T A E R T R Y                            *\n*                                                                     *\n*        RESTORE ORIGINAL REGISTERS AND GET OUT                       *\n*                                                                     *\n***********************************************************************\nSTAERTRY LR    R13,R1              RESTORE GETMAINED AREA ADDRESS\n         LM    R14,R12,STAEREGS+12 RESTORE REGISTERS\n         B     BADERROR            GET OUT\n         EJECT\n         LTORG\n         EJECT\n***********************************************************************\n*        TABLES USED BY EXIT                                          *\n***********************************************************************\n*\n***********************************************************************\n*    CLASS TABLES FOR TEST AND PRODUCTION                             *\n*                                                                     *\n*        FORMAT OF TABLE IS AS FOLLOWS                                *\n*                                                                     *\n*        1)  A 1 BYTE SYSOUT CLASS                                    *\n*            TABLE ENDS WITH HEX 'FF'                                 *\n*                                                                     *\n***********************************************************************\nPSYSOUT  EQU   *                   PRODUCTION-ONLY SYSOUT CLASSES\n         DC    C'S'                PRODUCTION 3800 SHORT STOCK\n         DC    C'P'                PRODUCTION JOB LOG\n         DC    C'L'                PRODUCTION MICROFICHE HOT\n         DC    C'M'                PRODUCTION MICROFICHE MEDIUM\n         DC    C'N'                PRODUCTION MICROFICHE REGULAR\n         DC    C'R'                PRODUCTION SPECIAL FORMS\n         DC    C'I'                PRODUCTION ITEM PROCESSING\n         DC    C'H'                PRODUCTION HELD OUTPUT\n         DC    C'1'                SYSLOG SYSLOG CLASSES\n         DC    C'2'                SYSLOG SYSLOG CLASSES\n         DC    C'3'                SYSLOG SYSLOG CLASSES\n         DC    C'4'                SYSLOG SYSLOG CLASSES\n         DC    X'FF'               END OF TABLE\nTSYSOUT  EQU   *                   PRODUCTION-ONLY SYSOUT CLASSES\n         DC    C'K'                TEST MICROFICHE\n         DC    C'T'                TEST 3800 SHORT STOCK\n         DC    C'U'                TEST SPECIAL FORMS\n         DC    C'X'                TEST HELD OUTPUT\n         DC    X'FF'               END OF TABLE\n*\n***********************************************************************\n*        FORMAT OF TABLE IS AS FOLLOWS                                *\n*        1)  A 1 BYTE UNIT ATTRIBUTE TYPE                             *\n*            X'01'  UNIMPORTANT DEVICE TYPE                           *\n*            X'02'  TAPE DEVICE                                       *\n*            X'04'  PRIVATE MOUNT DISK DEVICE                         *\n*            X'08'  VIO                                               *\n*        2)  A 1 BYTE MACHINE LENGTH OF ENTRY                         *\n*        3)  AN 8 BYTE FIELD CONTAINING THE DEVICE NAME LEFT JUSTIFIED*\n***********************************************************************\nDEVTABLE EQU   *              DEVICE NAME TABLE\n         DC    X'01',X'04',CL8'SYSDA'    SYSDA\n         DC    X'01',X'04',CL8'SYSSQ'    SYSDA\n         DC    X'01',X'03',CL8'DISK'     SYSDA\n         DC    X'01',X'07',CL8'SYSALLDA' SYSDA\n         DC    X'01',X'06',CL8'SCRATCH'  SYSDA\n         DC    X'01',X'03',CL8'3330'     SYSDA\n         DC    X'01',X'03',CL8'3350'     SYSDA\n         DC    X'01',X'03',CL8'3380'     SYSDA\n         DC    X'02',X'03',CL8'TAPE'     TAPE\n         DC    X'02',X'04',CL8'TAPE9'    TAPE\n         DC    X'02',X'04',CL8'T6250'    TAPE\n         DC    X'02',X'04',CL8'T1600'    TAPE\n         DC    X'02',X'03',CL8'3400'     TAPE\n         DC    X'02',X'03',CL8'3480'     TAPE\n         DC    X'02',X'03',CL8'2400'     TAPE\n         DC    X'02',X'04',CL8'T3480'    TAPE\n         DC    X'04',X'03',CL8'PRIV'     PRIV\n         DC    X'08',X'02',CL8'VIO'      VIO\n         DC    X'08',X'03',CL8'VIOD'     VIO\n         DC    X'02',X'02',CL8'480'      TAPE\n         DC    X'02',X'02',CL8'481'      TAPE\n         DC    X'02',X'02',CL8'482'      TAPE\n         DC    X'02',X'02',CL8'483'      TAPE\n         DC    X'02',X'02',CL8'484'      TAPE\n         DC    X'02',X'02',CL8'485'      TAPE\n         DC    X'02',X'02',CL8'486'      TAPE\n         DC    X'02',X'02',CL8'487'      TAPE\n         DC    X'02',X'02',CL8'488'      TAPE\n         DC    X'02',X'02',CL8'489'      TAPE\n         DC    X'02',X'02',CL8'48A'      TAPE\n         DC    X'02',X'02',CL8'48B'      TAPE\n         DC    X'02',X'02',CL8'48C'      TAPE\n         DC    X'02',X'02',CL8'48D'      TAPE\n         DC    X'02',X'02',CL8'48E'      TAPE\n         DC    X'02',X'02',CL8'48F'      TAPE\n         DC    X'02',X'02',CL8'490'      TAPE\n         DC    X'02',X'02',CL8'491'      TAPE\n         DC    X'02',X'02',CL8'492'      TAPE\n         DC    X'02',X'02',CL8'493'      TAPE\n         DC    X'02',X'02',CL8'494'      TAPE\n         DC    X'02',X'02',CL8'495'      TAPE\n         DC    X'02',X'02',CL8'496'      TAPE\n         DC    X'02',X'02',CL8'497'      TAPE\n         DC    X'02',X'02',CL8'498'      TAPE\n         DC    X'02',X'02',CL8'499'      TAPE\n         DC    X'02',X'02',CL8'49A'      TAPE\n         DC    X'02',X'02',CL8'49B'      TAPE\n         DC    X'02',X'02',CL8'49C'      TAPE\n         DC    X'02',X'02',CL8'49D'      TAPE\n         DC    X'02',X'02',CL8'49E'      TAPE\n         DC    X'02',X'02',CL8'49F'      TAPE\n         DC    10X'00'         END OF TABLE\n         EJECT\n***********************************************************************\n*        FORMAT OF TABLES IS AS FOLLOWS                               *\n*            1)  1 BYTE CLASS CODE APPLYING TO ENTRY                  *\n*            2)  3 BYTE FILLER                                        *\n*            3)  HALFWORD MAXIMUM TAPES PER STEP                      *\n*            4)  HALFWORD MAXIMUM PRIV UNITS PER STEP                 *\n*            5)  HALFWORD MAXIMUM TOTAL DEVICES PER STEP              *\n*            6)  HALFWORD MAXIMUM REGION PER STEP                     *\n*            7)  FULLWORD MAXIMUM CPU TIME FOR JOB                    *\n***********************************************************************\nJCLASS1  DS    0F             NORMAL TEST CLASS TABLE\n         DC    C'1',C'   ',H'0',H'0',H'0',H'2048',F'1'\n         DC    C'2',C'   ',H'0',H'0',H'0',H'4096',F'5'\n         DC    C'3',C'   ',H'1',H'0',H'1',H'2048',F'1'\n         DC    C'4',C'   ',H'1',H'0',H'1',H'2048',F'5'\n         DC    C'5',C'   ',H'2',H'0',H'2',H'4096',F'5'\n         DC    C'6',C'   ',H'0',H'0',H'0',H'2048',F'15'\n         DC    C'0',C'   ',X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    4F'0'          END OF TABLE\n         SPACE 3\nJCLASS2  DS    0F             SPECIAL TEST CLASS TABLE\n         DC    C'7',C'   ',H'0',H'0',H'0',H'2048',F'15'\n         DC    C'8',C'   ',H'1',H'0',H'1',H'2048',F'15'\n         DC    C'9',C'   ',H'2',H'0',H'2',H'2048',F'15'\n         DC    4F'0'          END OF TABLE\n         SPACE 3\nJCLASS3  DS    0F             PRODUCTION CLASS TABLE\n         DC    C'A',C'   ',H'0',H'0',H'0',H'2048',F'5'\n         DC    C'B',C'   ',H'0',H'0',H'0',H'2048',F'30'\n         DC    C'C',C'   ',H'5',H'0',H'5',H'2048',F'60'\n         DC    C'D',C'   ',H'5',H'0',H'5',H'2048',X'FFFFFFFF'\n         DC    C'E',C'   ',X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    4F'0'          END OF TABLE\n         EJECT\n***********************************************************************\n*        CONSTANTS USED BY EXIT                                       *\n***********************************************************************\n*\nBINZEROS DC    2F'0'               FULLWORD BINARY ZEROS\nBLANKS   DC    44C' '              CONSTANT STRING OF BLANKS\nMOVE1    MVC   JNAME(0),1(R2)      MOVE JOBNAME TO SAVE TABLE\nMOVE2    MVC   JACCTNO(0),1(R2)    MOVE ACCOUNT NO TO SAVE TABLE\nMOVE3    MVC   JPGMRNM(0),1(R2)    MOVE PROGRAMMER NAME TO SAVE TABLE\nMOVE4    MVC   SAVEPROC(0),1(R2)   MOVE JOB STEP NAME TO SAVE AREA\nMOVE5    MVC   EJSTEP(0),3(R2)     MOVE JOB STEP NAME TO TABLE\nMOVE6    MVC   EPSTEP(0),3(R2)     MOVE PROC STEP NAME TO TABLE\nMOVE7    MVC   EPGMNM(0),3(R2)     MOVE STEP PGM NAME TO TABLE\nMOVE8    MVC   TDDN(0),3(R2)       MOVE DDNAME TO TEMP DD ENTRY\nMOVE9    MVC   TDSN(0),3(R2)       MOVE DSN TO TEMP DD ENTRY\nMOVE10   MVC   REFDDN(0),1(R2)     MOVE DDNAME TO REFERBACK\nMOVE11   MVC   REFPSTEP(0),1(R2)   MOVE PROCSTEP NAME TO REFERBACK\nMOVE12   MVC   REFJSTEP(0),1(R2)   MOVE JOBSTEP NAME TO REFERBACK\nMOVE13   MVC   TVOLSER(0),3(R2)    SAVE 1ST VOLSER FROM DD\nMOVE14   MVC   TDSN(0),1(R4)       MOVE 1ST PART GDG DSN TO TEMP\nMOVE15   MVC   0(0,R5),1(R4)       MOVE 2ND PART GDG DSN TO TEMP\nMOVE16   MVC   JACCT(0),1(R2)      MOVE ACCOUNT NO TO WORK AREA\nMOVE17   MVC   LDSN(0),3(R2)       MOVE VOL=SER DSNAME TO SAVE\nPACK1    PACK  DOUBLE,1(0,R2)      PACK STEP REGION SIZE\nPACK2    PACK  DOUBLE,1(0,R2)      PACK UNIT COUNT\nPACK3    PACK  DOUBLE,1(0,R2)      PACK VOLUME COUNT\nPACK4    PACK  DOUBLE,1(0,R2)      PACK PROC STEP REGION OVERRIDE\nPACK5    PACK  DOUBLE,1(0,R2)      PACK JOB CPU TIME\nPACK6    PACK  DOUBLE,1(0,R2)      PACK JOB PRTY VALUE\nCOMPARE1 CLC   REFERBCK(0),EENTRY  SEE IF REFERBACK STEPS MATCH\nCOMPARE2 CLC   1(0,R2),2(R1)       SEE IF UNIT NAME IN TABLE\nCOMPARE3 CLC   1(0,R2),EPSTEP      SEE IF PROC OVERRIDE STEPNAME MATCH\nDEFTIME  DC    X'A9',X'01',X'04',CL4'0001',X'FE' DFLT CPU TIME INTEXT\nZEROES   DC    8C'0'               CHARACTER CONSTANT 8 ZEROES\nEDMASK   DC    X'402020202120'     EDIT MASK FOR MESSAGES\nGDGMASK  DC    C'G0000V00'         GDG SUFFIX MASK\nX#FFFF   DC    F'65535'            FULLWORD CONSTANT X'0000FFFF'\nMAXENTS  DC    Y(16384/ENTLEN)     MAX ENTRIES IN 16K TABLE\nGETLEN   DC    AL2(GETSIZE)        SIZE OF GETMAIN AREA\nF#1      DC    F'1'                FULLWORD CONSTANT '1'\nF#15     DC    F'15'               FULLWORD CONSTANT '15'\nF#45     DC    F'45'               FULLWORD CONSTANT '45'\nF#127    DC    F'127'              FULLWORD CONSTANT '127'\nF#16384  DC    F'16384'            CONSTANT FULLWORD '16384'\nH#0      DC    H'0'                HALFWORD CONSTANT '0'\nH#1      DC    H'1'                HALFWORD CONSTANT '1'\nH#2      DC    H'2'                HALFWORD CONSTANT '2'\nH#3      DC    H'3'                HALFWORD CONSTANT '3'\nH#4      DC    H'4'                HALFWORD CONSTANT '4'\nH#5      DC    H'5'                HALFWORD CONSTANT '5'\nH#6      DC    H'6'                HALFWORD CONSTANT '6'\nH#7      DC    H'7'                HALFWORD CONSTANT '7'\nH#8      DC    H'8'                HALFWORD CONSTANT '8'\nH#10     DC    H'10'               HALFWORD CONSTANT '10'\nH#12     DC    H'12'               HALFWORD CONSTANT '12'\nH#13     DC    H'13'               HALFWORD CONSTANT '13'\nH#20     DC    H'20'               HALFWORD CONSTANT '20'\nH#32     DC    H'32'               HALFWORD CONSTANT '32'\nH#35     DC    H'35'               HALFWORD CONSTANT '35'\nH#42     DC    H'42'               HALFWORD CONSTANT '42'\nH#44     DC    H'44'               HALFWORD CONSTANT '44'\nH#90     DC    H'90'               HALFWORD CONSTANT '90'\nH#512    DC    H'512'              HALFWORD CONSTANT '512'\nH#1440   DC    H'1440'             HALFWORD CONSTANT '1440'\nH#5000   DC    H'5000'             HALFWORD CONSTANT '5000'\nP#0      DC    P'0'                PACKED CONSTANT '0'\nC#1440   DC    C'1440'             CHARACTER CONSTANT '1440'\nC#SYS1   DC    C'SYS1.'            SYS1. PREFIX CONSTANT\nC#SYSP   DC    C'SYSP.'            SYSP. PREFIX CONSTANT\nC#PRD1   DC    C'PRD1.'            PRD1. PREFIX CONSTANT\nC#TST1   DC    C'TST1.'            TST1. PREFIX CONSTANT\nC#JOBLIB DC    CL8'JOBLIB'         CHARACTER CONSTANT 'JOBLIB'\nC#STEPLI DC    CL8'STEPLIB'        CHARACTER CONSTANT 'STEPLIB'\nC#JOBCAT DC    CL8'JOBCAT'         CHARACTER CONSTANT 'JOBCAT'\nC#STEPCA DC    CL8'STEPCAT'        CHARACTER CONSTANT 'STEPCAT'\nC#MOUNT  DC    CL8'MOUNT'          CHARACTER CONSTANT 'MOUNT'\nC#OLD    DC    CL3'OLD'            CHARACTER CONSTANT 'OLD'\nC#SHR    DC    CL3'SHR'            CHARACTER CONSTANT 'SHR'\nC#NEW    DC    CL3'NEW'            CHARACTER CONSTANT 'NEW'\nC#MOD    DC    CL3'MOD'            CHARACTER CONSTANT 'MOD'\nC#KEEP   DC    CL4'KEEP'           CHARACTER CONSTANT 'KEEP'\nC#PASS   DC    CL4'PASS'           CHARACTER CONSTANT 'PASS'\nC#CATLG  DC    CL5'CATLG'          CHARACTER CONSTANT 'CATLG'\nC#DELETE DC    CL6'DELETE'         CHARACTER CONSTANT 'DELETE'\nC#UNCAT  DC    CL7'UNCATLG'        CHARACTER CONSTANT 'UNCATLG'\nC#98000  DC    CL5'98000'          CHARACTER CONSTANT '98000'\nC#INTRDR DC    CL6'INTRDR'         CHARACTER CONSTANT 'INTRDR'\nC#BLP    DC    CL3'BLP'            CHARACTER CONSTANT 'BLP'\nC#HOLD   DC    CL4'HOLD'           CHARACTER CONSTANT 'HOLD'\nC#CLASS  DC    CL5'CLASS'          CHARACTER CONSTANT 'CLASS'\nC#PRTY   DC    CL4'PRTY'           CHARACTER CONSTANT 'PRTY'\nNULLFILE DC    CL8'NULLFILE'       CHARACTER CONSTANT NULLFILE\n         SPACE\n*              PGM NAME THAT ADD JES2 RESOURCES\nPGMCICS  DC    C'DFHSIP'           CICS PGMNAME\nPGM7074  DC    C'IIOEM74'          7074 PGMNAME\nPGM1401  DC    C'IIQE14'           1401 PGMNAME\nPGMNDM   DC    C'APINWB'           NDM PGMNAME\nPGMUC7   DC    C'SASSJJCL'         UCC7 LOAD PGMNAME\n         SPACE\nDUMPMSG1 DC    CL40'MAX ENTRIES IN CONVERTER TABLE EXCEEDED '\nHEADER1  DC    CL100' STMT NO. MESSAGE'\nHEADER2  DC    CL100'-                '\nPREFIX   DS    0CL11               NORMAL MESSAGE PREFIX\n         DC    X'402020202120',CL5' '\nESTAE    ESTAE STAEXIT,CT,XCTL=NO,PURGE=NONE,ASYNCH=NO,RECORD=YES,     X\n               TERM=NO,MF=L\nSDUMP    SDUMP HDR='JES2 EXIT6 CONVERTER TIME ESTAE',MF=L\n         EJECT\nWORKAREA DSECT\nSAVEAREA DS    18F                 NEW SAVE AREA\nSAVEREGS DS    18F                 ROUTINE REGISTER SAVE AREA\nSTAEREGS DS    18F                 REGISTERS FOR ESTAE RECOVERY\nSTAESAVE DS    18F                 SAVE AREA FOR ESTAE ROUTINE\nPUTSAVE  DS    19F                 PUT SAVE AREA\nWORKADDR DS    F                   EXIT PARM LIST ADDRESS\nJCTADDR  DS    F                   ADDRESS OF JCT\nJQEADDR  DS    F                   ADDRESS OF JQE\nTEXTSTAR DS    F                   START ADDRESS OF INTERNAL TEXT\nSAVER13  DS    F                   SAVE AREA FOR REG 13 ON PUT RPL\nSUBWORK  DS    F                   ADDR OF TEXT PROCESSER WORK AREA\nSUBTABLE DS    F                   ADDRESS OF AREA FOR JCL STMT TABLE\nEOFIND   DS    C                   END OF FILE INDICATORS\nENDSTEP  EQU   1                   LAST STATEMENT OF STEP IND\nLASTBLK  EQU   2                   BLOCK WITH LAST EXEC STMT PROCESSED\nWTOSAVE  DS    4F                  SAVE AREA FOR REG 14 - 1 BEFORE WTO'\nDOUBLE   DS    D                   DOUBLE WORD FOR PACK & CVB\nFIRSTENT DS    F                   SAVE AREA FOR FIRST SAVE TABLE ENTRY\nLASTENT  DS    F                   SAVE AREA FOR LAST SAVE TABLE ENTRY\nLASTEXEC DS    F                   ADDR OF LAST EXEC TABLE ENTRY\nTAPECNT  DS    H                   COUNT OF TAPE UNITS USED IN STEP\nPRIVCNT  DS    H                   COUNT OF PRIV UNITS USED IN STEP\nENTCOUNT DS    H                   NUMBER OF ACTIVE ENTRIES IN TABLE\nUNITCOUN DS    XL1                 COUNT OF UNITS FOR THIS DD\n*        THIS MAY ALSO BE 'P' FOR PARALLEL MOUNTING\nSAVEPROC DS    CL8                 STEPNAME WHICH CALLS PROC\nPROCTEXT DS    F                   ADDR OF SAVED KEYWORD TEXT FROM PROC\nRETCODE  DS    F                   SAVE AREA FOR RETURN CODE\nPROCIND  DS    C                   PROCESS PROCEDURE TEXT INDICATOR\n*        X'01' INDICATES NEED TO PROCESS PROCEDURE OVERRIDE TEXT\nDDIND    DS    C                   DD RELATED INDICATORS\nDDBEGIN  EQU   1                   DD FIRST KEYWORD INDICATOR\nJOBIND   DS    C                   JOB RELATED INDICATORS\nJOBLIB   EQU   1                   JOB HAD A JOBLIB STMT\nJOBFAIL  EQU   2                   JOB FAILED EXIT TESTING\nJOBSTC   EQU   4                   JOB IS A STARTED TASK\nJOBTSO   EQU   8                   JOB IS A TSO LOGON\nJOBTECH  EQU   16                  JOB IS FOR TECH SUPPORT\nJOBPROD  EQU   32                  JOB IS A PRODUCTION JOB\nJOBTEST  EQU   64                  JOB IS A TEST JOB\nJOBOPER  EQU   128                 JOB IS A OPERATIONS JOB\nJOBIND2  DS    C                   JOB RELATED INDICATORS\nHELD     EQU   1                   JOB HAD TYPRUN=HOLD\nMOUNT    EQU   2                   JOB HAS DASD MOUNT AUTHORITY\nSEVERE   EQU   4                   A SEVERE ERROR HAS OCCURRED\nDISPIND  DS    C                   DD ENTRY DISPOSITION\nNEW      EQU   1                   DISP=NEW\nOLD      EQU   2                   DISP=OLD\nSHR      EQU   4                   DISP=SHR\nMOD      EQU   8                   DISP=MOD\nCATLG    EQU   16                  STEP COMPLETION DISP=CATLG\nPASS     EQU   32                  STEP COMPLETION DISP=PASS\nKEEP     EQU   64                  STEP COMPLETION DISP=KEEP\nDELETE   EQU   128                 STEP COMPLETION DISP=DELETE\nDISPIND1 DS    C                   DD ENTRY DISPOSITION\nUNCATLG  EQU   1                   STEP COMPLETION DISP=UNCATLG\nUNITIND  DS    C                   DD ENTRY UNIT TYPE\nTAPE     EQU   2                   UNIT USED WAS A TAPE\nPRIV     EQU   4                   UNIT USED WAS A PRIV DISK PACK\nVIO      EQU   8                   UNIT WAS VIO\nAFF      EQU   16                  UNIT WAS DETERMINED BY AFF\nUNITGDG  EQU   32                  UNIT TYPE(S) FROM GDG PROCESSING\nUNITFND  EQU   128                 UNIT TYPE HAS BEEN FOUND\nJACCT    DS    CL14                ACCOUNT NUMBER (1ST ACCT INFO FIELD)\nJOBNAME  DS    CL8                 JOB NAME\nTENTRY   DS    0CL59               TEMPORARY DD TEXT TABLE ENTRY\nTDDN     DS    CL8                 TEMP DDNAME\nTTYPE    DS    C                   TEMP UNIT TYPE\nTDSN     DS    CL44                TEMP DSN (FULL)\nTVOLSER  DS    CL6                 TEMP 1ST VOLSER OF DATA SET\nLDSN     DS    CL44                DSNAME USED BY LOCATE\nSVC26DSN DS    0CL44               DSNAME USED BY SVC26\nSVC26DSL DS    CL1                 LENGTH OF DSN\nSVC26DS  DS    CL43                ACTUAL DSNAME INDEX\nREFERBCK DS    0CL25               REFERBACK WORK AREA\nREFJSTEP DS    CL8                 REFERBACK JOBSTEP NAME\nREFPSTEP DS    CL8                 REFERBACK PROCSTEP NAME\nREFDDN   DS    CL8                 REFERBACK DDNAME\nREFUNIT  DS    C                   REFERBACK PREV UNIT TYPE\nREFDSN   DS    CL44                REFERBACK DSN\nREFVOL   DS    CL6                 REFERBACK PREF DD 1ST VOLSER\nVOLCNT   DS    XL1                 VOLUME COUNT FROM UNIT=\nSERCNT   DS    XL1                 SERIAL COUNT FROM VOL=SER=\nADDCOUNT DS    XL1                 WILL CONTAIN # OF UNITS FOR DD\nRECURS   DS    CL1                 RECURSIVE ABEND INDICATOR\nCARDNO   DS    F                   CARD NUMBER FOR MSG ROUTINE\nMSGCOUNT DS    F                   MESSAGE COUNT FOR MSG ROUTINE\nOUTRPL   DS    F                   ADDR OF OUTPUT RPL\nOUTACB   DS    F                   ADDR OF JOB MESSAGE DATASET ACB\nPARMADDR DS    F                   ADDR OF START OF CURRENT TEXT ENTRY\nSTEPCNTR DS    H                   MAX TAPES PER STEP USED\nMAXTAPE  DS    H                   MAX TAPES PER STEP USED\nMAXPRIV  DS    H                   MAX PRIVS PER STEP USED\nMAXTOTAL DS    H                   MAX TOTAL DEVICES PER STEP USED\nMAXREGN  DS    H                   MAX STEP REGION SIZE\nMAXTIME  DS    F                   MAXIMUM CPU TIME\nDEVCLASS DS    X                   IOSVSUCB DEVICE TYPE\nSCANWORK DS    CL100               IOSVSUCB SCAN WORK AREA\nUCBADDR  DS    F                   ADDRESS OF UCB\nIOSVSUCB DS    F                   ADDRESS OF IOSVSUCB ROUTINE\nSCANPARM DS    0F                  IOSVSUCB PARM LIST\nSCANP1   DS    F                   ADDRESS OF WORK AREA\nSCANP2   DS    F                   ADDRESS OF DEVICE TYPE FIELD\nSCANP3   DS    F                   ADDRESS OF UCB RETURN AREA\n         SPACE\nRESOURCE DS    XL2                 JES2 RESOURCES\n*              RESOURCE BYTE ZERO\nTESTING  EQU   128                 JES2 'TESTING' RESOURCE\nPROD     EQU   64                  JES2 'PROD'  RESOURCE\nTAPES    EQU   32                  JES2 'TAPES' RESOURCE\nUSERPACK EQU   8                   JES2 'USERPACK' RESOURCE\nP1401    EQU   2                   JES2 '1401' RESOURCE\nNDM      EQU   1                   JES2 'NDM' RESOURCE\n*              RESOURCE - BYTE ONE(1)\nPCICS    EQU   128                 JES2 'CICS' RESOURCE\nP7074    EQU   64                  JES2 '7074' RESOURCE\nLONGJOB  EQU   8                   JES2 'LONGJOB' RESOURCE\nDEDICATE EQU   4                   JES2 'DEDICATE' RESOURCE\n*\nCLASSFLD DS    C                   CLASS AS DETERMINED FROM TABLE\n         SPACE\nINCLASS  DS    C                   CLASS FROM JOB TEXT RECORD\nU7TEST   DC    C' '                TEST FOR UCC7 LOAD JOB\nAUTHJOB  DS    CL8                 JOBNAME USED IN AUTHORIZATION CHECK\nCAMLST   CAMLST NAME,TDSN,,LOCAREA LOCATE PARAM AREA\n         DS    0D\nLOCAREA  DS    0CL266              LOCATE CAMLST WORK AREA\nCAMLCNT  DS    H                   VOLUMES IN LIST\nCAMLUNIT DS    0CL4                UNIT TYPE FOR 1ST VOLUME\nUCBTYP1  DS    CL1                 UCB TYPE BYTE 1\nUCBTYP2  DS    CL1                 UCB TYPE BYTE 2\nUCBTYP3  DS    CL1                 UCB TYPE BYTE 3\n*        X'80' IN UCBTYP3 INDICATES TAPE DEVICE\nUCBTYP4  DS    CL1                 UCB TYPE BYTE 4\nCAMVOL   DS    CL6                 1ST VOLSER IN DATA SET\n         DS    CL254               REST OF WORK AREA\nLASTUCB  DS    F                   SAVE AREA FOR LAST UCB ADDR PROCESSE\n         DS    CL1                 EDIT FILL CHAR FOR MSG PREFIX\nSTEPMSG  DS    0CL100              STEP RESOURCE MESSAGE\n         DS    CL10                MESSAGE PREFIX\nSTEPM    DC    CL90'NWB000I XXXXXXXX XXXXXXXX TAPES= XXXXX PACKS= XXXXXX\n                REGION= NNNNNK JTIME= XXXXX           '\n         DS    CL1                 EDIT FILL CHAR FOR MSG PREFIX\nJOBMSG   DS    0CL100              JOB CLASS MESSAGE\n         DS    CL10                MESSAGE PREFIX\nJOBM     DC    CL90'NWB000I CLASS SET TO X                             X\n                                                      '\nERRORMSG DS    0CL100              ERROR MESSAGE\n         DS    CL10                MESSAGE PREFIX\nERRORM   DC    CL90' '\nMSGPREF  DS    0CL11               ERROR MESSAGE PREFIX\n         DS    C                   EDIT FILL CHARACTER\nBUFFER   DS    0CL100              JES2 MESSAGE AREA\n         DS    CL10                REST OF MESSAGE PREFIX\nMSGTEXT  DS    CL90                TEXT OF ERROR MESSAGE\nMSGRPL   DS    19F                 SKELETON RPL FOR OUTPUT MSG DATA SET\nWTOLIST  DS    CL120               SET WTO LIST FORM\nPROCTXT  DS    CL512               SAVE AREA FOR PROC CARD TEXT\nCTGPL    DS    XL40                CATALOG MANAGEMENT PARAMETER LIST\nESTAEL   ESTAE STAEXIT,CT,XCTL=NO,PURGE=NONE,ASYNCH=NO,RECORD=YES,     X\n               TERM=NO,MF=L\nLESTAEL  EQU   *-ESTAEL\nSDUMPL   SDUMP HDR='JES2 EXIT6 CONVERTER TIME ESTAE',MF=L\nLSDUMPL  EQU   *-SDUMPL\nSVC26WRK DS    CL5000              SVC26 WORK AREA\nGETSIZE  EQU   *-WORKAREA          LENGTH OF WORK AREA\n         EJECT\nSAVTABLE DSECT\n***********************************************************************\n*        THIS TABLE HAS 3 ENTRY TYPES                                 *\n*            THE 1ST ENTRY IN THE TABLE WILL BE FOR THE JOB CARD      *\n*            THE 2ND ENTRY IN THE TABLE WILL BE FOR THE 1ST EXEC CARD *\n*            FOLLOWING THE EXEC ENTRY WILL BE ANY DD ENTRIES FOR THE  *\n*                STEP WHICH PASS OR CATLG PRIVATE DISK PACKS OR TAPES *\n*            THE EXEC CARD ENTRY AND SUBSEQUENT DD ENTRIES WILL BE    *\n*                REPEATED FOR ALL STEPS OF THE JOB.                   *\n***********************************************************************\nENTLEN   EQU   59                  LENGTH OF EACH TABLE ENTRY\nENTRYTYP DS    C                   TABLE ENTRY TYPE\nTYPEND   EQU   0                   SIGNIFIES END OF TABLE\nTYPJOB   EQU   1                   SIGNIFIES A JOB ENTRY\nTYPEXEC  EQU   2                   SIGNIFIES AN EXEC ENTRY\nTYPEDD   EQU   4                   SIGNIFIES A DD ENTRY\n***********************************************************************\n*                                                                     *\n*                      J O B                                          *\n*                                                                     *\n***********************************************************************\nJENTRY   DS    0CL59               JOB STATEMENT ENTRY\nJNAME    DS    CL8                 JOB NAME\nJPGMRNM  DS    CL10                PROGRAMMER NAME (1ST 10 BYTES ONLY)\nJACCTNO  DS    CL14                ACCOUNT NUMBER (1ST ACCT INFO FIELD)\nJACCTLEN DS    C                   ACCOUNT NUMBER LENGTH\n         ORG   JENTRY\n***********************************************************************\n*                                                                     *\n*                     E X E C                                         *\n*                                                                     *\n***********************************************************************\nEENTRY   DS    0CL59               EXEC STATEMENT ENTRY\nEJSTEP   DS    CL8                 JOB STEP NAME\nEPSTEP   DS    CL8                 PROC STEP NAME\nEPGMNM   DS    CL8                 PGM NAME\nELIBIND  DS    C                   STEP HAD JOBLIB OR STEPLIB\nESTEPLIB EQU   1                   STEPLIB PRESENT\nEJOBLIB  EQU   2                   JOBLIB PRESENT\nEREGIONK EQU   4                   REGION SPECIFIED IN 'K'\nEREGION  DS    H                   STEP REGION SIZE\nETAPES   DS    H                   TAPE UNITS USED IN STEP\nEPRIVS   DS    H                   PRIV UNITS USED IN STEP\nECARDNO  DS    F                   CARD NUMBER OF THIS STATEMENT\n         ORG   JENTRY\n***********************************************************************\n*                                                                     *\n*                       D D                                           *\n*                                                                     *\n***********************************************************************\nDENTRY   DS    0CL59               DD STATEMENT ENTRY\nDDDN     DS    CL8                 DDNAME\nDTYPE    DS    C                   TYPE OF UNIT FOR THIS FILE\nDTAPE    EQU   2                   UNIT = TAPE\nDPRIV    EQU   4                   UNIT = PRIV OR PRIV-1\nDDSN     DS    CL44                DSN FOR THIS FILE\nDVOLSER  DS    CL6                 FIRST VOL/SER OF DATA SET\n         EJECT\nJESEXIT6 CSECT\nMSG0     DC    CL90'NWB100I XXXXXXXX XXXXXXXX TAPES= XXXXX PACKS= XXXXXX\n                REGION= NNNNNK JTIME= XXXXX           '\nMSG1     DC    CL90'NWB101I CLASS SET TO X                             X\n                                                      '\nMSG2     DC    CL90'NWB102E UNLIMITED CLASS 0 FOR TEST JOBS REQUIRES THX\n               E USE OF TYPRUN=HOLD ON THE JOB CARD    '\nMSG3     DC    CL90'NWB103E JOB REQUIREMENTS EXCEED THOSE ALLOWED FOR TX\n               HE SPECIAL TEST JOB CLASS REQUESTED     '\nMSG4     DC    CL90'NWB104I INTERNAL ERROR - MATCH WITHIN CLASS TABLE NX\n               OT FOUND                               '\nMSG5     DC    CL90'NWB105E NDM REQUESTS MUST BE ISSUED ONLY FROM A SINX\n               GLE STEP JOB                            '\nMESSAGES DS    0CL90               MESSAGE TABLE\nM1       DC    CL90'NWB001I INTERNAL ERROR - INVALID TEXT STATEMENT TYPX\n               E DETECTED                             '\nM2       DC    CL90'NWB002E JOBNAME, ACCOUNTING INFORMATION, OR JOBNAMEX\n                MISSING ON THE JOB CARD               '\nM3       DC    CL90'NWB003I LENGTH OF JOBNAME EXCEEDS MAXIMUM OF 8 CHARX\n               ACTERS                                 '\nM4       DC    CL90'NWB004E INVALID LENGTH OF THE FIRST ACCOUNTING FIELX\n               D                                      '\nM5       DC    CL90'NWB005I LENGTH OF PROGRAMMER NAME FIELD ON THE JOB X\n               CARD EXCEEDS MAXIMUM OF 20 CHARACTERS  '\nM6       DC    CL90'NWB006E UNAUTHORIZED USE OF THE PERFORM KEYWORD ON X\n               THE JOB CARD                           '\nM7       DC    CL90'NWB007E UNAUTHORIZED USE OF THE ADDRSPC KEYWORD ON X\n               THE JOB CARD                           '\nM8       DC    CL90'NWB008I TIME VALUE ON THE JOB CARD IS NOT NUMERIC  X\n                                                      '\nM9       DC    CL90'NWB009E UNAUTHORIZED USE OF TIME=1440 ON THE JOB CAX\n               RD                                     '\nM10      DC    CL90'NWB010E UNAUTHORIZED USE OF THE REGION KEYWORD ON TX\n               HE JOB CARD                            '\nM11      DC    CL90'NWB011I LENGTH OF THE STEP NAME ON THE EXECUTE CARDX\n                EXCEEDS MAXIMUM OF 8 CHARACTERS       '\nM12      DC    CL90'NWB012I LENGTH OF THE PROGRAM NAME ON THE EXECUTE CX\n               ARD EXCEEDS MAXIMUM OF 8 CHARACTERS    '\nM13      DC    CL90'NWB013I INVALID FORMAT FOR THE REGION PARAMETER ON X\n               THE EXECUTE CARD                       '\nM14      DC    CL90'NWB014I REGION SIZE ON THE EXECUTE CARD IS NOT NUMEX\n               RIC                                    '\nM15      DC    CL90'NWB015I INVALID FORMAT FOR THE TIME PARAMETER ON THX\n               E EXECUTE CARD                         '\nM16      DC    CL90'NWB016E UNAUTHORIZED USE OF TIME=1440 ON THE EXECUTX\n               E CARD                                 '\nM17      DC    CL90'NWB017E UNAUTHORIZED USE OF THE PERFORM KEYWORD ON X\n               THE EXECUTE CARD                       '\nM18      DC    CL90'NWB018E UNAUTHORIZED USE OF THE ADDRSPC KEYWORD ON X\n               THE EXECUTE CARD                       '\nM19      DC    CL90'NWB019E UNAUTHORIZED USE OF THE DPRTY KEYWORD ON THX\n               E EXECUTE CARD                         '\nM20      DC    CL90'NWB020I LENGTH OF THE DDNAME ON THE DD CARD EXCEEDSX\n                MAXIMUM OF 8 CHARACTERS               '\nM21      DC    CL90'NWB021I INVALID FORMAT FOR THE DSNAME PARAMETER ON X\n               THE DD CARD                            '\nM22      DC    CL90'NWB022I LENGTH OF THE DSNAME ON THE DD CARD EXCEEDSX\n                MAXIMUM OF 44 CHARACTERS              '\nM23      DC    CL90'NWB023I INVALID FORMAT FOR THE DISP PARAMETER ON THX\n               E DD CARD                              '\nM24      DC    CL90'NWB024I INVALID FORMAT FOR THE UNIT PARAMETER ON THX\n               E DD CARD                              '\nM25      DC    CL90'NWB025I UNIT COUNT WITHIN THE UNIT PARAMETER ON THEX\n                DD CARD IS NOT NUMERIC                '\nM26      DC    CL90'NWB026I INVALID FORMAT FOR THE VOLUME PARAMETER ON X\n               THE DD CARD                            '\nM27      DC    CL90'NWB027I VOLUME COUNT WITHIN THE VOLUME PARAMETER ONX\n                THE DD CARD IS NOT NUMERIC            '\nM28      DC    CL90'NWB028I LENGTH OF THE VOLSER PARAMETER(S) ON THE DDX\n                CARD EXCEEDS MAXIMUM OF 6 CHARACTERS  '\nM29      DC    CL90'NWB029E UNAUTHORIZED DISPOSITION SPECIFIED FOR A SYX\n               STEM DATA SET                          '\nM30      DC    CL90'NWB030I INTERNAL ERROR - LENGTH OF THE INTERNAL TEXX\n               T OF AN EXECUTE CARD EXCEEDS 512 CHARS '\nM31      DC    CL90'NWB031I LENGTH OF THE PROC STEP NAME ON THE EXECUTEX\n                CARD EXCEEDS MAXIMUM OF 8 CHARACTERS  '\nM32      DC    CL90'NWB032I INVALID FORMAT FOR THE REFERBACK SUBPARAMETX\n               ER ON THE DD CARD                      '\nM33      DC    CL90'NWB033E INVALID DISPOSITION ON A JOBLIB, STEPLIB, JX\n               OBCAT, OR STEPCAT DD CARD              '\nM34      DC    CL90'NWB034I THE LENGTH OF THE DSNAME ON A VOLUME REFERBX\n               ACK EXCEEDS A MAXIMUM OF 44 CHARACTERS '\nM35      DC    CL90'NWB035E THE REQUIRED ACCOUNTING FIELD ON THE JOB CAX\n               RD WAS NOT SPECIFIED                   '\nM36      DC    CL90'NWB036E INVALID RESOURCE SPECIFIED IN THE ACCOUNTINX\n               G FIELD                                '\nM37      DC    CL90'NWB037E TEST JOBS REQUIRE THE PAC2 PROJECT CODE TO X\n               BE IN THE ACCOUNTING FIELD             '\nM38      DC    CL90'NWB038E INVALID PAC2 PROJECT CODE SPECIFIED IN THE X\n               ACCOUNTING FIELD                       '\nM39      DC    CL90'NWB039E PAC2 PROJECT CODE NOT ALLOWED IN THE ACCOUNX\n               TING FIELD ON A PRODUCTION JOB         '\nM40      DC    CL90'NWB040E INVALID APPLICATION CODE SPECIFIED IN THE AX\n               CCOUNTING FIELD                        '\nM41      DC    CL90'NWB041E INVALID GL COST CENTER SPECIFIED IN THE ACCX\n               OUNTING FIELD                          '\nM42      DC    CL90'NWB042E JOBNAME NOT AUTHORIZED FOR THE RESOURCE SPEX\n               CIFIED IN THE ACCOUNTING FIELD         '\nM43      DC    CL90'NWB043E UNAUTHORIZED USE OF JOBCAT OR STEPCAT DD STX\n               ATEMENT                                 '\nM44      DC    CL90'NWB044E UNAUTHORIZED USE OF BYPASS LABEL PROCESSINGX\n                (BLP)                                  '\nM45      DC    CL90'NWB045E UNAUTHORIZED ATTEMPT TO BYPASS TMS WITH LABX\n               EL=EXPDT=98000                          '\nM46      DC    CL90'NWB046E UNAUTHORIZED ATTEMPT TO ALLOCATE THE JES2 IX\n               NTERNAL READER                          '\nM47      DC    CL90'NWB047E UNAUTHORIZED USE OF JOBLIB DD STATEMENT    X\n                                                       '\nM48      DC    CL90'NWB048E DATASET REQUIRES A DISK PACK WHICH IS NOT AX\n               VAILABLE FOR PROCESSING AT THIS TIME    '\nM49      DC    CL90'NWB049E UNAUTHORIZED USE OF THE PRTY KEYWORD ON THEX\n                JOB CARD                               '\nM50      DC    CL90'NWB050E UNAUTHORIZED USE OF PRODUCTION-ONLY SYSOUT X\n               CLASS IN SYSOUT SPECIFICATION           '\n         AIF   ('&BINREQD' NE 'YES').BIN4\nM51      DC    CL90'NWB051E BIN NUMBER MUST BE SPECIFIED ON THE JOB CARX\n               D                                       '\nM52      DC    CL90'NWB052E BIN NUMBER MUST BE FOUR CHARACTERS LONG    X\n                                                       '\n.BIN4    ANOP\nM53      DC    CL90'NWB053E UNAUTHORIZED USE OF TEST-ONLY SYSOUT CLASS X\n               IN SYSOUT SPECIFICATION                 '\nM54      DC    CL90'NWB054E UNAUTHORIZED USE OF PRTY PARAMETER ON OUTPUX\n               T STATEMENT                             '\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JESEXIT7": {"ttr": 6664, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'CREATE SMF TYPE30 RECORDS FOR NJE JOBS'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 1.3.4  OR SP 1.3.6                      *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM WILL CREATE AN SMF TYPE 30            *\n*        SUBTYPE 1 RECORD FOR EVERY NJE JOB.  THIS IS TO              *\n*        PROVIDE ACCOUNTING INFORMATION FOR NJE PRINT JOBS            *\n*        WHICH IS CURRENTLY BEING LOST SINCE THE WRITER               *\n*        (TYPE6) AND THE PURGE (TYPE26) RECORDS DO NOT                *\n*        PROVIDE JOB ACCOUNTING.  THIS RECORD WILL ONLY BE            *\n*        PRODUCED IF THE APPROPRIATE NJE USER HEADER SECTION          *\n*        IS PRESENT TO PROVIDE THE JOB ACCOUNTING INFORMATION.        *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST COMPUTER SERVICES                      *\n*                        420 BRUSHY MOUNTAIN ROAD                     *\n*                        WILKESBORO, N.C. 28697                       *\n*                        (919) 651-5414                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*            M A C R O S   U S E D   I N   J E S X I T 1 7            *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $ENTRY       SYS1.HASPSRC                               *\n*        04)  $FREEBUF     SYS1.HASPSRC                               *\n*        05)  $GETBUF      SYS1.HASPSRC                               *\n*        06)  $HASPEQU     SYS1.HASPSRC                               *\n*        07)  $HASPGBL     SYS1.HASPSRC                               *\n*        08)  $HCT         SYS1.HASPSRC                               *\n*        09)  $JCT         SYS1.HASPSRC                               *\n*        10)  $JQE         SYS1.HASPSRC                               *\n*        11)  $MIT         SYS1.HASPSRC                               *\n*        12)  $MODEND      SYS1.HASPSRC                               *\n*        13)  $MODULE      SYS1.HASPSRC                               *\n*        14)  $NHD         SYS1.HASPSRC                               *\n*        15)  $PCE         SYS1.HASPSRC                               *\n*        16)  $SAVE        SYS1.HASPSRC                               *\n*        17)  $RETURN      SYS1.HASPSRC                               *\n*        18)  IEESMCA      SYS1.AMODGEN                               *\n*        19)  IFASMFR      SYS1.AMODGEN                               *\n*        20)  IFGRPL       SYS1.MACLIB                                *\n*        21)  SMFEWTM      SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       1K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJESEXIT7 $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='CREATE SMF TYPE30 RECORDS FOR NJE JOBS',         X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               RPL,                GENERATE MVS  RPL DSECT             X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HCT,               GENERATE HASP SVT DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $NHD,               GENERATE HASP NDH DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               SMCA                GENERATE OS SMCA DSECT\n         TITLE 'CREATE SMF TYPE30 RECORDS FOR NJE JOBS'\n         IFASMFR 30\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREA                                            *\n*                                                                     *\n***********************************************************************\nWORKAREA DSECT\n         DS    CL104               ***** RESERVED BY JES2 *****\nHDRADDR  DS    F                   ADDRESS OF USER HEADER SECTION\nSMFREC   DS    CL500\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        FCS USER HEADER MAPPING DSECT                                *\n*                                                                     *\n***********************************************************************\nFCSUHDR  DSECT\nFCSUHDRL DS    H                   LENGTH OF USER HEADER\nFCSUHTYP DS    X                   TYPE OF HEADER\nFCSUHMOD DS    X                   MODIFIER VALUE\nFCSUHID  DS    CL4                 USER HEADER IDENTIFIER\nFCSUHACL DS    H                   LENGTH OF ACCOUNTING FIELD\nFCSUHACT DS    CL20                ACCOUNTING FIELD\n         DS    CL40                RESERVED\nFCSUHDRS EQU   *-FCSUHDR           LENGTH OF USER HEADER\nJESEXIT7 CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n         PRINT OFF\n         AIF   ('&VERSION' NE 'SP 1.3.6' AND                           X\n               '&VERSION' NE 'SP 2.1.5').VEREND\n         PRINT ON\n***********************************************************************\n*                                                                     *\n*        EQUATED VARIABLES FOR SP 1.3.6 OR SP 2.1.5                   *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         USING JCT,R10             SET ADDRESSABILITY TO JCT\n         SPACE 3\n.VEREND  ANOP\n         PRINT ON\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nEXIT7    $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLERS REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R0  - A CODE PASSED TO YOUR ROUTINE BY JES2.                 *\n*              0 - INDICATES THAT THE JCT HAS BEEN READ FROM SPOOL    *\n*              4 - INDICATES THAT THE JCT WILL BE WRITTEN TO SPOOL    *\n*        R1  - ADDRESS OF THE BUFFER THAT CONTAINS THE JCT            *\n*        R11 - ADDRESS OF THE HCT                                     *\n*        R13 - ADDRESS OF THE PCE                                     *\n*        R14 - RETURN ADDRESS                                         *\n*        R15 - ENTRY ADDRESS                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LTR   R0,R0              TEST ENTRY REASON CODE\n         BZ    RETURN0            ZERO, READ ONLY, NOT INTERESTED\n         LR    R10,R1             SET JCT ADDRESS\n         CLC   JCTXNODE,=X'0000'  SEE IF CONTAINS AN EXECUTION NODE\n         BE    RETURN0            NO, JUST GET OUT\n         CLC   JCTXNODE,$OWNNODE  SEE IF AN NJE JOB\n         BE    RETURN0            NO, JUST GET OUT\n***********************************************************************\n*        FIND OUR SPECIAL HEADER                                      *\n***********************************************************************\n         LA    R6,JCTNJHDR         POINT TO START OF NETWORK HEADERS\n         USING FCSUHDR,R6          SET ADDRESSABILITY TO HEADERS\n         LH    R5,0(R6)            LOAD LENGTH OF NETWORK HEADERS\n         AR    R5,R6               GET END ADDRESS OF NETWORK HEADERS\n         LA    R6,4(R6)            LOAD START ADDRESS OF FIRST HEADER\nTSTHDR1  CR    R6,R5               SEE IF END OF HEADERS\n         BNL   RETURN0             YES, GET OUT\n         TM    FCSUHTYP,NTYPUSER   SEE IF USER HEADER\n         BNO   TSTHDR2             NO, GO GET NEXT ONE\n         CLC   FCSUHID,=CL4'FCSH'  SEE IF OUR HEADER\n         BE    TSTHDR3             YES, GO CHECK IT\nTSTHDR2  AH    R6,0(R6)            POINT TO NEXT HEADER\n         B     TSTHDR1             LOOP\nTSTHDR3  TM    FCSUHMOD,X'80'      SEE IF SMF RECORD ALREADY WRITTEN\n         BO    RETURN0             YES, GET OUT\n***********************************************************************\n*        GET A WORK AREA FOR THE EXIT                                 *\n***********************************************************************\n         SPACE 3\n         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R9,R1               SAVE WORK AREA ADDRESS\n         USING WORKAREA,R9         SET ADDRESSABILITY TO BUFFER\n         ST    R6,HDRADDR          SAVE USER HEADER ADDRESS\n         LA    R2,SMFREC           POINT TO START OF TYPE 30 RECORD\n         LH    R3,$BUFSIZE         LOAD LENGTH OF BUFFER\n         SLR   R4,R4               SET \"FROM\" ADDRESS TO ZERO\n         SLR   R5,R5               SET \"FROM\" LENGTH  TO ZERO\n         MVCL  R2,R4               ZERO THE BUFFER\n         LA    R2,SMFREC           POINT TO START OF TYPE 30 RECORD\n         USING SMFRCD30,R2         SET ADDRESSABILITY TO SMF RECORD\n***********************************************************************\n*        BUILD THE SMF TYPE 30 RECORD IN THE WORK AREA                *\n***********************************************************************\nBASELEN  EQU   SMF30EOR+L'SMF30EOR-SMFRCD30\nPSSLEN   EQU   SMF30PNM+L'SMF30PNM-SMF30PSS\nIDLEN    EQU   SMF30TID+L'SMF30TID-SMF30ID\nTYPE30LN EQU   BASELEN+PSSLEN+IDLEN\n***********************************************************************\n*        BUILD THE SMF TYPE 30 BASE SECTION                           *\n***********************************************************************\n         MVC   SMF30LEN,=AL2(TYPE30LN) SET BASE RECORD LENGTH\n         MVI   SMF30FLG,X'02'      SET SYSTEM IDENTIFIER TO VS2\n         MVI   SMF30RTY,30         SET RECORD TYPE TO TYPE 30\n         TIME  BIN                 GET DATE AND TIME\n         STCM  R0,15,SMF30TME      SAVE TIME IN RECORD\n         STCM  R1,15,SMF30DTE      SAVE DATE IN RECORD\n         MVC   SMF30SID,$SID       MOVE CPUID TO RECORD\n         MVC   SMF30WID,=CL4'TSO ' SET SUBSYSTEM ID TO TSO\n         CLI   JCTJOBID,C'T'       SEE IF A TSO USER\n         BE    SSIDOK              YES, BRANCH\n         MVC   SMF30WID,=CL4'STC ' SET SUBSYSTEM ID TO STC\n         CLI   JCTJOBID,C'S'       SEE IF A STARTED TASK\n         BE    SSIDOK              YES, BRANCH\n         MVC   SMF30WID,=CL4'JES2' SET SUBSYSTEM ID TO JES2\nSSIDOK   MVC   SMF30SOF,=A(BASELEN) SAVE OFFSET OF SUBSYSTEM SECTION\n         MVC   SMF30SLN,=AL2(PSSLEN) SAVE LENGTH OF SUBSYSTEM SECTION\n         MVC   SMF30SON,=H'1'      SAVE NUMBER OF IDENT SECTIONS\n         MVC   SMF30IOF,=A(BASELEN+PSSLEN) SAVE OFFSET OF IDENT SECT\n         MVC   SMF30ILN,=AL2(IDLEN) SAVE LENGTH OF IDENT SECTION\n         MVC   SMF30ION,=H'1'      SAVE NUMBER OF IDENT SECTIONS\n***********************************************************************\n*        BUILD THE SMF TYPE 30 SUBSYSTEM SECTION                      *\n***********************************************************************\n         LA    R3,SMFREC+BASELEN   POINT TO START OF SUBSYSTEM SECTION\n         USING SMF30PSS,R3         SET ADDRESSABILITY TO SUBSYS SECTION\n         MVC   SMF30TYP,=H'1'      SET TO SUBTYPE 1\n         MVC   SMF30RVN,=C'01'     SET TO RECORD VERSION 1\n         MVC   SMF30PNM,=CL8'BOGUSNJE' SET SUBSYSTEM NAME\n         DROP  R3                  DROP ADDRESSABILITY TO SUBSYS SECT\n***********************************************************************\n*        BUILD THE SMF TYPE 30 IDENTIFICATION SECTION                 *\n***********************************************************************\n         LA    R3,SMFREC+BASELEN+PSSLEN POINT TO START OF IDENT SECTION\n         USING SMF30ID,R3          SET ADDRESSABILITY TO IDENT SECTION\n         MVC   SMF30JBN,JCTJNAME   SET JOB NAME\n         MVC   SMF30PGM,=CL8' '    SET BLANK PGM NAME\n         MVC   SMF30STM,=CL8'NJEPRINT' SET DUMMY STEP NAME\n         MVC   SMF30UIF,JCTUSEID   SET USER ID FIELD\n         MVC   SMF30JNM,JCTJOBID   SET JES JOB NUMBER\n         MVI   SMF30CLS,C' '       SET JOB CLASS TO BLANK\n         CLI   JCTJOBID,C'J'       SEE IF BATCH JOB\n         BNE   NOTBATCH            NO, BRANCH\n         MVC   SMF30CLS,JCTJCLAS   SET JOB CLASS\nNOTBATCH MVC   SMF30JPT+1(1),JCTPRIO SET JES INPUT PRIORITY\n         MVC   SMF30SIT,SMF30TME   SET STEP INIT TIME TO CURR TIME\n         MVC   SMF30STD,SMF30DTE   SET STEP INIT DATE TO CURR DATE\n         MVC   SMF30RST,JCTRDRON   SET READER START TIME\n         MVC   SMF30RSD,JCTRDTON   SET READER START DATE\n         MVC   SMF30RET,JCTRDROF   SET READER END TIME\n         MVC   SMF30RED,JCTRDTOF   SET READER END DATE\n         OI    SMF30RED+3,X'0F'    MAKE SURE DATE HAS A SIGN\n         MVC   SMF30USR,JCTPNAME   SET PROGRAMMER NAME\n         MVC   SMF30GRP,=CL8' '    SET BLANK RACF GROUP ID\n         MVC   SMF30RUD,=CL8' '    SET BLANK RACF USER ID\n***********************************************************************\n*        TRY TO FIND OUT THE RACF/ACF2 USERID                         *\n***********************************************************************\n***********************************************************************\n*        SAVE JOBNAME AS LOGONID FOR STC OR TSU                       *\n***********************************************************************\n         CLI   JCTJOBID,C'J'       SEE IF A BATCH JOB\n         BE    FUID01              YES, BRANCH\n         MVC   SMF30RUD,JCTJNAME   NO,  MOVE JOBNAME TO LOGONID FIELD\n         B     FUIDEND             GET OUT\n         DROP  R6                  DROP ADDRESSABILITY TO USER HEADER\n***********************************************************************\n*        SEARCH THE JES2 JOB HEADER (3.1.4 OR GREATER)                *\n***********************************************************************\nFUID01   LA    R6,JCTNJHDR         POINT TO START OF NETWORK HEADERS\n         USING NJH2,R6             SET ADDRESSABILITY TO JES2 HEADER\n         LH    R5,0(R6)            LOAD LENGTH OF NETWORK HEADERS\n         AR    R5,R6               GET END ADDRESS OF NETWORK HEADERS\n         LA    R6,4(R6)            LOAD START ADDRESS OF FIRST HEADER\nFUID02   CR    R6,R5               SEE IF END OF HEADERS\n         BNL   FUID07              YES, GET OUT\n         CLI   NJH2TYPE,NTYPJES2   SEE IF JES2 SECTION\n         BE    FUID03              YES, GO PROCESS IT\n         AH    R6,0(R6)            POINT TO NEXT HEADER\n         B     FUID02              LOOP\nFUID03   CLI   NJH2USR,C' '        SEE IF LOGONID SPECIFIED\n         BNH   FUID04              NO, GO CHECK ANOTHER PLACE\n         MVC   SMF30RUD,NJH2USR    YES, MOVE LOGONID FROM JES2 HEADER\n         B     FUIDEND             GET OUT\n         DROP  R6                  DROP ADDRESSABILITY TO JES2 HEADER\n***********************************************************************\n*        SEARCH THE GENERAL NETWORK JOB HEADER FOR VM                 *\n***********************************************************************\nFUID04   LA    R6,JCTNJHDR         POINT TO START OF NETWORK HEADERS\n         USING NJHG,R6             SET ADDRESSABILITY TO GENERAL HDR\n         LH    R5,0(R6)            LOAD LENGTH OF NETWORK HEADERS\n         AR    R5,R6               GET END ADDRESS OF NETWORK HEADERS\n         LA    R6,4(R6)            LOAD START ADDRESS OF FIRST HEADER\nFUID05   CR    R6,R5               SEE IF END OF HEADERS\n         BNL   FUID07              YES, GET OUT\n         CLI   NJHGTYPE,NTYPGEN    SEE IF GENERAL SECTION\n         BE    FUID06              YES, GO PROCESS IT\n         AH    R6,0(R6)            POINT TO NEXT HEADER\n         B     FUID05              LOOP\nFUID06   CLI   NJHGXEQU,C' '       SEE IF VM LOGONID SPECIFIED\n         BNH   FUID07              NO, GO CHECK ANOTHER PLACE\n         MVC   SMF30RUD,NJHGXEQU   MOVE VM LOGONID FROM GENERAL HEADER\n         B     FUIDEND             GET OUT\n         DROP  R6                  DROP ADDRESSABILITY TO GENERAL HDR\n***********************************************************************\n*        SEARCH FOR AN ACF2 USER HEADER                               *\n***********************************************************************\nFUID07   LA    R6,JCTNJHDR         POINT TO START OF NETWORK HEADERS\n         USING FCSUHDR,R6          SET ADDRESSABILITY TO HEADERS\n         LH    R5,0(R6)            LOAD LENGTH OF NETWORK HEADERS\n         AR    R5,R6               GET END ADDRESS OF NETWORK HEADERS\n         LA    R6,4(R6)            LOAD START ADDRESS OF FIRST HEADER\nFUID08   CR    R6,R5               SEE IF END OF HEADERS\n         BNL   FUIDEND             YES, GET OUT\n         TM    FCSUHTYP,NTYPUSER   SEE IF USER HEADER\n         BNO   FUID09              NO, GO GET NEXT ONE\n         CLC   FCSUHID,=CL4'ACF2'  SEE IF ACF2 HEADER\n         BNE   FUID09              NO, GO LOOK AT NEXT HEADER\n         MVC   SMF30RUD,88(R6)     YES, MOVE LOGONID FROM ACF2 HEADER\n         B     FUIDEND             GET OUT\nFUID09   AH    R6,0(R6)            POINT TO NEXT HEADER\n         B     FUID08              LOOP\nFUIDEND  DS    0H                  END OF FIND USERID ROUTINE\n         DROP  R3                  DROP ADDRESSABILITY TO ID SECTION\n***********************************************************************\n*        BUILD THE SMF TYPE 30 ACCOUNTING SECTION                     *\n***********************************************************************\n         L     R6,HDRADDR          RELOAD USER HEADER ADDRESS\n         LA    R3,SMFREC+BASELEN+PSSLEN+IDLEN POINT TO START OF ACCT\n         USING SMF30ACS,R3         SET ADDRESSABILITY TO ACCT SECTION\n         LH    R15,FCSUHACL        LOAD LENGTH OF ACCOUNTING FIELD\n         LTR   R15,R15             TEST LENGTH\n         BZ    WRITESMF            ZERO, NO ACCOUNTING FIELD\n         STC   R15,SMF30ACL        SAVE LENGTH OF ACCOUNTING FIELD\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MVACCT          MOVE ACCT TO RECORD\n***********************************************************************\n*        UPDATE BASE SECTION FOR VARIABLE ACCOUNTING SECTION          *\n***********************************************************************\n         LH    R15,FCSUHACL        RELOAD LENGTH OF ACCOUNTING FIELD\n         LA    R15,1(R15)          GET LENGTH OF ACCOUNTING SECTION\n         LH    R1,SMF30LEN         LOAD LENGTH OF RECORD\n         AR    R1,R15              ADD LENGTH OF ACCOUNT SECTION\n         STH   R1,SMF30LEN         SAVE NEW RECORD LENGTH\n         MVC   SMF30AOF,=A(BASELEN+PSSLEN+IDLEN) LOAD OFFSET OF ACCT\n         STH   R15,SMF30ALN        SAVE LENGTH OF ACCT SECTION\n         MVC   SMF30AON,=H'1'      SAVE NUMBER OF ACCT SECTIONS\n         B     WRITESMF            GO WRITE SMF RECORD\nMVACCT   MVC   SMF30ACT(0),FCSUHACT **** EXECUTE ONLY ****\n***********************************************************************\n*        WRITE SMF TYPE 30 RECORD                                     *\n***********************************************************************\nWRITESMF SMFEWTM (R2)              WRITE THE SMF RECORD\n         OI    FCSUHMOD,X'80'      TURN ON SMF RECORD WRITTEN INDICATOR\n         DROP  R6                  DROP ADDRESSABILITY TO USER HDR RECD\n***********************************************************************\n*                                                                     *\n*        FREE THE WORK AREA AND RETURN WITH THE APPROPRIATE           *\n*        RETURN CODE.                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nEXIT     $FREEBUF (R9)             FREE THE BUFFER\n         B     RETURN0             GET OUT\n         DROP  R9                  DROP ADDRESSABILITY TO THE BUFFER\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*                                                                     *\n***********************************************************************\nRETURN0  DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n***********************************************************************\n*                                                                     *\n*                   CONSTANTS USED IN THIS EXIT                       *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JESEXIT9": {"ttr": 6917, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 OUTPUT EXCESSION EXIT'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 1.3.4  OR SP 1.3.6                      *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED EXAMINE ALL OCCURRENCES   *\n*        OF OUTPUT EXCESSION.  IF THE JOB IS A TEST JOB, IT WILL      *\n*        BE ALLOWED TO ABEND WITH A S722 ABEND.  IF NOT, THE JOB      *\n*        WILL BE ALLOWED TO CONTINUE AFTER ISSUEING THE NORMAL        *\n*        JES2 WARNING MESSAGE                                         *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST COMPUTER SERVICES                      *\n*                        420 BRUSHY MOUNTAIN ROAD                     *\n*                        WILKESBORO, N.C. 28697                       *\n*                        (919) 651-5414                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*            M A C R O S   U S E D   I N   J E S E X I T 9            *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $ENTRY       SYS1.HASPSRC                               *\n*        03)  $HASPEQU     SYS1.HASPSRC                               *\n*        04)  $HASPGBL     SYS1.HASPSRC                               *\n*        05)  $JCT         SYS1.HASPSRC                               *\n*        06)  $MIT         SYS1.HASPSRC                               *\n*        07)  $MODEND      SYS1.HASPSRC                               *\n*        08)  $MODULE      SYS1.HASPSRC                               *\n*        09)  $SCAT        SYS1.HASPSRC                               *\n*        10)  $SVT         SYS1.HASPSRC                               *\n*        11)  $XECB        SYS1.HASPSRC                               *\n*        12)  IFGRPL       SYS1.MACLIB                                *\n*        13)  RETURN       SYS1.MACLIB                                *\n*        14)  SAVE         SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       1K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*        THIS MODULE MUST BE PLACED INTO SYS1.LPALIB OR INCLUDED      *\n*        AS AN 'MLPA' OR 'FLPA' MEMBER INTO COMMONLY ADDRESSABLE      *\n*        STORAGE.  FAILURE TO DO SO WILL NORMALLY RESULT IN S0C4      *\n*        ABENDS AS HASPSSSM BRANCHES TO THE THE CORRECT ROUTINE       *\n*        ADDRESS BUT IN THE USERS ADDRESS SPACE INSTEAD OF THE        *\n*        JES2 ADDRESS SPACE.                                          *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJESEXIT9 $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=USER,                                           X\n               TITLE='JES2 OUTPUT EXCESSION EXIT',                     X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $SCAT,              GENERATE HASP SCAT DSECT            X\n               $SVT,               GENERATE HASP SVT DSECT             X\n               $XECB,              GENERATE HASP XECB DSECT            X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               RPL                 GENERATE MVS  RPL DSECT\n         TITLE 'JES2 OUTPUT EXCESSION EXIT'\n         PRINT OFF\n         AIF   ('&VERSION' NE 'SP 1.3.6' AND                           X\n               '&VERSION' NE 'SP 2.1.5').VEREND\n         PRINT ON\n***********************************************************************\n*                                                                     *\n*        EQUATED VARIABLES FOR SP 1.3.6 OR SP 2.1.5                   *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n$SVDSECT EQU   SVT\n         SPACE 3\n         USING JCT,R10             SET ADDRESSABILITY TO JCT\n.VEREND  ANOP\n         PRINT ON\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nEXIT9    $ENTRY BASE=R12\n         SPACE 1\n         SAVE (14,12)              SAVE REGISTERS\n         SPACE 1\n         LR    R12,R15             LOAD BASE REGISTER\n         LR    R10,R7              MOVE JCT ADDRESS TO PROPER REG\n         USING $SVDSECT,R11        SET ADDRESSABILITY TO SSVT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R0       - A CODE INDICATING THE TYPE OF OUTPUT              *\n*                   0 - INDICATES A PRINT OUTPUT RECORD               *\n*                   4 - INDICATES A PUNCH OUTPUT RECORD               *\n*        R1       - THE CURRENT RECORD COUNT                          *\n*        R7       - ADDRESS OF THE JCT                                *\n*        R11      - ADDRESS OF THE SSVT                               *\n*        R13      - ADDRESS OF AN OS STYLE SAVE AREA                  *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         CLI   JCTCLASS,C'0'       TEST CLASS\n         BL    PROD                NOT NUMERIC, PRODUCTION\n         SPACE 3\nTEST     ICM   R0,15,ABEND         LOAD ABEND INDICATOR\n         ST    R0,20(R13)          SET NEW REG0 IN SAVE AREA\n         B     RETURN8             GET OUT\n         SPACE 3\nPROD     ICM   R0,15,EXTEND        LOAD EXTEND INDICATOR\n         ST    R0,20(R13)          SET NEW REG0 IN SAVE AREA\n         B     RETURN8             GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TAKE ACTION ABSED ON THE RETURN PROCESSING         *\n*                  FLAGS IN R0                                        *\n*                                                                     *\n***********************************************************************\nRETURN0  DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         RETURN (14,12),RC=(15)    RETURN TO JES2\nRETURN4  DS    0H\n         LA    R15,4               SET RETURN CODE TO 4\n         RETURN (14,12),RC=(15)    RETURN TO JES2\nRETURN8  DS    0H\n         LA    R15,8               SET RETURN CODE TO 8\n         RETURN (14,12),RC=(15)    RETURN TO JES2\n         EJECT\n         LTORG\n         SPACE 3\nEXTEND   DC    X'80',AL3(0)        USE OUTPOPT = '0' CONTINUE\nABEND    DC    X'80',AL3(1)        USE OUTPOPT = '1' ABEND W/O DUMP\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JESRESRC": {"ttr": 6921, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 ESOTERIC RESOURCE ROUTING EXITS'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS MODULE CONTAINS SEVERAL EXIT POINTS WHICH WILL          *\n*        IMPLEMENT ESOTERIC ROUTINE CAPABILITIES WITHIN JES2.         *\n*        THE EXITS ARE AS FOLLOWS:                                    *\n*                                                                     *\n*        E004RESC - PROCESS THE ESOTERIC RESOURCE NAMES ON THE        *\n*                   /*ROUTE STATEMENT.                                *\n*                                                                     *\n*        E005RESC - EXIT 5 ROUTINES AS FOLLOWS:                       *\n*                                                                     *\n*            $DC  - DISPLAY THE ESOTERIC RESOURCE CONFLICTS           *\n*                   THAT EXIST OR IN OTHER WORDS, LIST THOSE          *\n*                   JOBS THAT CANNOT RUN BECAUSE NONE OF THE          *\n*                   PROCESSORS CONTAIN ALL THE ESOTERIC               *\n*                   NECESSARY TO RUN THAT JOB.                        *\n*                                                                     *\n*            $DR  - LIST THE ESOTERIC RESOURCES ATTACHED TO A         *\n*                   PROCESSOR.                                        *\n*                                                                     *\n*            $QA  - ADD ESOTERIC RESOURCES TO A PROCESSOR             *\n*                                                                     *\n*            $QD  - DELETE ESOTERIC RESOURCES FROM A PROCESSOR        *\n*                                                                     *\n*        E014RESC - TEST FOR RESOURCE ROUTINGS WITHIN THE JOB         *\n*                   QUEUE WORK SELECT ROUTINE.                        *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n*        CREDITS:                                                     *\n*                   THIS FACILITY IS A DIRECT COPY IN FUNCTION        *\n*                   OF THE MELLON BANK SHARED SPOOL MODS THAT         *\n*                   ARE AVAILABLE ON MANY OF THE MODS TAPES.          *\n*                   THE FACILITY WAS REWRITTEN TO EXCLUDE SOME        *\n*                   PORTIONS OF THE ORIGINAL MODS AND TO FIT          *\n*                   OUR EXISTING EXIT STRUCTURE.                      *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *\n*                                                                     *\n*        1)  THE HASP999 MESSAGE WILL BE ISSUED WHEN AN INVALID       *\n*            L=CCA OPERAND IS ENTERED.                                *\n*                                                                     *\n*        $HASP999 RESPONSE LOCATION L=CCA UNAVAILABLE                 *\n*                                                                     *\n*                                                                     *\n*        2)  THE HASP900 MESSAGE WILL BE ISSUED FOR ALL MESSAGES      *\n*            FROM THE $DR COMMAND.                                    *\n*                                                                     *\n*        $HASP900 SID  = NO RESOURCES FOUND                           *\n*                     OR                                              *\n*        $HASP900 SID  = RESOURCE1 RESOURCE2 RESOURCE3                *\n*                                                                     *\n*                                                                     *\n*        3)  THE HASP900 MESSAGE WILL BE ISSUED FOR ALL MESSAGES      *\n*            FROM THE $DC COMMAND.                                    *\n*                                                                     *\n*        $HASP900 - NO CONFLICTS EXIST                                *\n*                     OR                                              *\n*        $HASP900 - END OF CONFLICTS                                  *\n*                                                                     *\n*        THE END OF CONFLICTS MESSAGE WILL FOLLOW A LIST OF           *\n*        $HASP908 MESSAGES LISTING EACH JOB WHICH HAS RESOURCES       *\n*        WHICH ARE NOT ATTACHED TO ANY PROCESSOR.                     *\n*                                                                     *\n*                                                                     *\n*        5)  THE HASP970 MESSAGE WILL BE ISSUED WHEN WHEN ANY         *\n*            RESOURCE CONTROLLING COMMAND RECEIVES A NULL             *\n*            OPERAND OR AN OPERAND LONGER THAN 8 CHARACTERS.          *\n*                                                                     *\n*                                                                     *\n*        $HASP970 ......... INVALID OPERAND                           *\n*                                                                     *\n*        6)  THE HASP971 MESSAGE WILL BE ISSUED WHEN MORE THAN        *\n*            TWO OPERANDS ARE RECEIVED BY ANY RESOURCE                *\n*            CONTROLLING COMMAND.                                     *\n*                                                                     *\n*        $HASP971 TOO MANY OPERANDS                                   *\n*                                                                     *\n*                                                                     *\n*        7)  THE HASP972 MESSAGE WILL BE ISSUED WHEN THE $DC          *\n*            COMMAND DETECTS ANY OPERAND.  IT MUST BE ENTERED         *\n*            WITHOUT OPERANDS.                                        *\n*                                                                     *\n*        $HASP972 NO OPERANDS ALLOWED ON THE $DC COMMAND              *\n*                                                                     *\n*                                                                     *\n*        8)  THE HASP973 MESSAGE WILL BE ISSUED WHEN THE $QA          *\n*            OR $QD COMMAND DETECTS AN INVALID RESOURCE NAME          *\n*            TO BE ADDED OR DELETED.                                  *\n*                                                                     *\n*        $HASP973 ........ INVALID RESOURCE NAME                      *\n*                                                                     *\n*                                                                     *\n*        9)  THE HASP974 MESSAGE WILL BE ISSUED WHEN THE $QA          *\n*            $QD, OR $DR COMMANDS DETECTS AN INVALID SYSTEM           *\n*            NAME.                                                    *\n*                                                                     *\n*        $HASP974 ........ INVALID SYSTEM ID                          *\n*                                                                     *\n*                                                                     *\n*        10) THE HASP976 MESSAGE WILL BE ISSUED WHEN THE $QA          *\n*            OR $QD COMMAND DETECTS THAT THE RESOURCE NAME WAS        *\n*            NOT ENTERED.                                             *\n*                                                                     *\n*        $HASP976 RESOURCE NAME MUST BE SPECIFIED                     *\n*                                                                     *\n*                                                                     *\n*        11) THE HASP977 MESSAGE WILL BE ISSUED WHEN ANY OF           *\n*            THE RESOURCE CONTROLLING COMMANDS ARE ISSUED FROM        *\n*            A REMOTE CONSOLE.                                        *\n*                                                                     *\n*        $HASP977 COMMAND NOT AUTHORIZED FROM THIS CONSOLE            *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J E S R E S R C          *\n*                                                                     *\n*        01)  $AMODE       SYS1.HASPSRC                               *\n*        02)  $BUFFER      SYS1.HASPSRC                               *\n*        03)  $CAT         SYS1.HASPSRC                               *\n*        04)  $CMB         SYS1.HASPSRC                               *\n*        05)  $COMWORK     SYS1.HASPSRC                               *\n*        06)  $CWA         SYS1.HASPSRC                               *\n*        07)  $CWTO        SYS1.HASPSRC                               *\n*        08)  $ENTRY       SYS1.HASPSRC                               *\n*        09)  $EXITPL      SYS1.HASPSRC                               *\n*        10)  $GETBUF      SYS1.HASPSRC                               *\n*        11)  $FREEBUF     SYS1.HASPSRC                               *\n*        12)  $HASPEQU     SYS1.HASPSRC                               *\n*        13)  $HASPGBL     SYS1.HASPSRC                               *\n*        14)  $HCT         SYS1.HASPSRC                               *\n*        15)  $JCT         SYS1.HASPSRC                               *\n*        16)  $JOE         SYS1.HASPSRC                               *\n*        17)  $JQE         SYS1.HASPSRC                               *\n*        18)  $MIT         SYS1.HASPSRC                               *\n*        19)  $MODEND      SYS1.HASPSRC                               *\n*        20)  $MODULE      SYS1.HASPSRC                               *\n*        21)  $PADDR       SYS1.HASPSRC                               *\n*        22)  $PCE         SYS1.HASPSRC                               *\n*        23)  $POST        SYS1.HASPSRC                               *\n*        24)  $QGET        SYS1.HASPSRC                               *\n*        25)  $QSE         SYS1.HASPSRC                               *\n*        26)  $QSUSE       SYS1.HASPSRC                               *\n*        27)  $RDRWORK     SYS1.HASPSRC                               *\n*        28)  $RETURN      SYS1.HASPSRC                               *\n*        29)  $SAVE        SYS1.HASPSRC                               *\n*        30)  $STORE       SYS1.HASPSRC                               *\n*        31)  $XIT         SYS1.HASPSRC                               *\n*        32)  IAZRESPA     SYS1.AMODGEN                               *\n*        33)  IEFUCBOB     SYS1.AMODGEN                               *\n*        34)  IEZCVT       SYS1.AMODGEN                               *\n*        35)  IFGRPL       SYS1.MACLIB                                *\n*        36)  MODESET      SYS1.AMODGEN                               *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       2K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJESRESRC $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 ESOTERIC RESOURCE ROUTING EXITS',           X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $CMB,               GENERATE HASP CMB DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $CWA,               GENERATE HASP CWA DSECT             X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $EXITPL,            GENERATE HASP $EXIT PARM LIST       X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $QGET,              GENERATE HASP QGET DSECT            X\n               $QSE,               GENERATE HASP QSE DSECT             X\n               $RDRWORK,           GENERATE HASP RDRWORK DSECT         X\n               $XIT,               GENERATE HASP XIT DSECT             X\n               CVT,                GENERATE MVS  CVT DSECT             X\n               RESPA,              GENERATE MVS  RESPA DSECT           X\n               RPL,                GENERATE MVS  IFGRPL DSECT          X\n               UCB                 GENERATE MVS  UCB DSECT\n               SPACE 3\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREAS                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nRESWORK1 DSECT                     EXIT WORK AREA\nE004NAME DS    CL8                 POSSIBLE RESOURCE NAME\nE004BITS DS    F                   RESOURCE BITS WORK AREA\n*\n         SPACE 3\nRESWORK2 DSECT                     COMMAND WORK AREA\n         DS    CL(BUFSTART-BFPDSECT) **** RESERVED BY JES2 ****\n         $FCSFMTP                  MAP THE EXIT 255 PARM LIST\nBUFADDR  DS    F                   ADDRESS OF A WORK BUFFER\nWRKA     DS    CL10                EXIT WORK AREA\nE005INDX DS    H                   JOB QUEUE OFFSET INDEX\nE005SW1  DS    X                   MISCELLANEOUS BIT SWITCHES\nCMD$DC   EQU   X'80'               $DC COMMAND\nCMD$DR   EQU   X'40'               $DR COMMAND\nCMD$QA   EQU   X'20'               $QA COMMAND\nCMD$QD   EQU   X'10'               $QD COMMAND\nFOUND    EQU   X'08'               RESOURCE CONFLICT FOUND\nE005OP1  DS    CL8                 FIRST COMMAND OPERAND\nE005OP2  DS    CL8                 SECOND COMMAND OPERAND\nMESSAGE  DS    CL100               MESSAGE WORK AREA\n*\nJESRESRC CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         TITLE 'JES2 ESOTERIC RESOURCE ROUTING EXITS - EXIT 4'\n***********************************************************************\n*                                                                     *\n*        RESOURCE ROUTINE EXIT 4                                      *\n*                                                                     *\n***********************************************************************\nE004RESC $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R0       - STATEMENT TYPE INDICATOR                          *\n*                   0 - JES2 CONTROL STATEMENT                        *\n*                   4 - JCL CONTROL STATEMENT                         *\n*        R1       - ADDRESS OF A 3 WORD PARAMETER LIST                *\n*                   WORD 1 - ADDRESS OF THE CONTROL STATEMENT         *\n*                   WORD 2 - ADDRESS OF THE EXIT FLAG                 *\n*                   WORD 3 - ADDRESS OF 80 BYTE JCTXWORK FIELD        *\n*        R10      - ADDRESS OF THE JCT                                *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE PCE                                *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SEE IF THIS IS A JECL STATEMENT                              *\n*                                                                     *\n***********************************************************************\n         LTR   R0,R0               SEE IF JES2 CONTROL STATEMENT\n         BNZ   E004RC00            NO, PASS THIS STATEMENT ALONG\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SEE IF THIS IS ONE THAT WE WANT                              *\n*                                                                     *\n***********************************************************************\n         L     R2,0(R1)            GET ADDRESS OF JECL STATEMENT\n         L     R4,8(R1)            GET ADDRESS OF WORK AREA\n         LTR   R4,R4               SEE IF JCT EXISTS YET\n         BZ    E004RC00            NO, PASS THIS STATEMENT ALONG\n         USING RESWORK1,R4         SET ADDRESSABILITY TO WORK AREA\n         XC    RESWORK1(80),RESWORK1 CLEAR THE WORK AREA\n         CLC   2(6,R2),=C'ROUTE '  SEE IF /*ROUTE CARD\n         BE    E004PR              YES, GO CHECK SOME MORE\n         CLC   2(4,R2),=C'XEQ '    SEE IF /*XEQ CARD\n         BE    E004PR              YES, GO CHECK SOME MORE\n         B     E004RC00            NO, PASS THIS STATEMENT ALONG\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SEARCH FOR FIRST OPERAND PAST XEQ                            *\n*        IF NONE, JUST PASS THE STATEMENT ALONG TO JES2               *\n*                                                                     *\n***********************************************************************\nE004PR   LA    R7,2(R2)            POINT TO CONTROL CARD\n         LA    R5,70(R2)           POINT TO END OF CONTROL CARD\nE004PR1  CLC   0(4,R7),=C'XEQ '    SEE IF OUR KEYWORD\n         BE    E004PR2             YES, BRANCH\n         LA    R7,1(R7)            INCREMENT TO NEXT CHAR OF CARD\n         CR    R7,R5               SEE IF DONE\n         BL    E004PR1             NO, LOOP\n         B     E004RC00            NOT FOUND, PASS THIS ONE ALONG\nE004PR2  LA    R7,4(R7)            POINT PAST 'XEQ '\nE004PR3  CLI   0(R7),C' '          SEE IF START OF NEXT OPERAND\n         BNE   E004PR4             YES, BRANCH\n         LA    R7,1(R7)            INCREMENT TO NEXT CHAR OF CARD\n         CR    R7,R5               SEE IF DONE\n         BL    E004PR3             NO, LOOP\n         B     E004RC00            NOT FOUND, PASS THIS ONE ALONG\nE004PR4  LR    R6,R7               SAVE START ADDRESS OF OPERAND\nE004PR5  CLI   0(R7),C' '          SEE IF END OF OPERAND\n         BE    E004PR6             YES, BRANCH\n         LA    R7,1(R7)            INCREMENT TO NEXT CHAR OF CARD\n         CR    R7,R5               SEE IF DONE\n         BL    E004PR5             NO, LOOP\n         B     E004RC00            NOT FOUND, PASS THIS ONE ALONG\nE004PR6  SR    R7,R6               GET LENGTH OF OPERAND\n         CH    R7,=H'8'            SEE IF EXCEEDS 8 CHARACTERS\n         BH    E004RC00            NOT OURS, PASS THIS ONE ALONG\n         LA    R15,0(R7,R6)        CALCULATE END ADDRESS OF OPERAND\n         CR    R15,R5              SEE IF PAST END OF CARD\n         BH    E004RC00            LET JES2 HANDLE THIS ERROR\n         MVC   E004NAME,$BLANKS    BLANK THE POSSIBLE RESOURCE NAME\n         BCTR  R7,0                MAKE MACHINE LENGTH\n         EX    R7,E004MVC          MOVE POSSIBLE RESOURCE NAME TO SAVE\n***********************************************************************\n*                                                                     *\n*        SEE IF ONE OF OUR SPECIAL VALUES                             *\n*                                                                     *\n***********************************************************************\n         CLC   E004NAME,=CL8'HERE' SEE IF 'HERE'\n         BE    E004PR9             YES, BRANCH\n         LA    R7,$RESTAB          POINT TO START OF RESOURCE NAMES\n         LA    R15,$RESMAX         SET LOOP COUNTER\n         ICM   R5,B'1111',=X'80000000' SET RESOURCE BIT MASK\nE004PR7  CLC   E004NAME,0(R7)      SEE IF MATCH ON NAME\n         BE    E004PR8             YES, BRANCH\n         LA    R7,$RESLEN(R7)      INCREMENT TO NEXT RESTABLE ENTRY\n         SRL   R5,1                SHIFT RESOURCE BIT MASK\n         BCT   R15,E004PR7         LOOP\n         B     E004PR10            NOT A RESOURCE, CHECK AFFINITY NAME\nE004PR8  L     R3,PCEJQE           LOAD JQE ADDRESS\n         USING JQE,R3              SET ADDRESSABILITY TO JQE\n         $QSUSE ,                  GET CONTROL OF JES2 CHECKPOINT\n         ST    R5,E004BITS         SAVE RESOURCE BIT EQUIVALENT\n         OC    JQERESRT,E004BITS   ADD THIS RESOURCE NAME TO LIST\n         B     E004RC08            DONE, GET OUT\nE004MVC  MVC   E004NAME(0),0(R6)   **** EXECUTE ONLY ****\n         DROP  R3                  DROP ADDRESSABILITY TO JQE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SEE IF ROUTING TO A SYSTEM-ID                                *\n*                                                                     *\n***********************************************************************\nE004PR9  MVC   E004NAME(4),$SID    CHANGE 'HERE' TO OUR SYSTEM ID\nE004PR10 CLC   E004NAME+4(4),$BLANKS SEE IF NOT OVER 4 CHARACTERS\n         BNE   E004RC00            NOT A SID, PASS THIS ONE ALONG\n         L     R5,$QSE1            LOAD ADDRESS OF FIRST QSE\n         USING QSE,R5              SET ADDRESSABILITY TO QSE\nE004PR11 CLC   QSESID,E004NAME     SEE IF SID MATCH\n         BE    E004PR12            YES, BRANCH\n         TM    QSESTAT,QSELAST     SEE IF LAST QSE\n         BO    E004RC00            YES, NOT A SID,PASS THIS ONE ALONG\n         LA    R5,QSELEN(R5)       INCREMENT TO NEXT QSE ENTRY\n         B     E004PR11            LOOP\nE004PR12 MVC   RDWSIAFF,QSESIAFF   SET/RESET SYSTEM AFFINITY\n         B     E004RC08            DONE, GET OUT\n         DROP  R5                  DROP ADDRESSABILITY TO QSE\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - BYPASS FURTHER PROCESSING OF THIS STATEMENT        *\n*        RC = 12 - CANCEL THE JOB WITH INCOMPLETE LISTING             *\n*        RC = 16 - CANCEL THE JOB WITH NO OUTPUT                      *\n*                                                                     *\n***********************************************************************\nE004RC00 DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nE004RC08 DS    0H\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\n         DROP  R4                  DROP ADDRESSABILITY TO WORK AREA\n         EJECT\n         LTORG\n         TITLE 'JES2 ESOTERIC RESOURCE ROUTING EXITS - EXIT 5'\n***********************************************************************\n*                                                                     *\n*        RESOURCE ROUTINE EXIT 5                                      *\n*                                                                     *\n***********************************************************************\nE005RESC $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       - ADDRESS OF THE CURRENT OPERAND                    *\n*        R6       - INCREMENT VALUE OF 4                              *\n*        R7       - ADDRESS OF THE LAST OPERAND                       *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SEE IF THIS IS ONE OF OUR COMMANDS:                          *\n*                                                                     *\n*        $DC - DISPLAY JOBS NON-EXECUTABLE BECAUSE OF                 *\n*              RESOURCE COMBINATIONS.                                 *\n*        $QA - ATTACH A RESOURCE TO A CPU                             *\n*        $QD - DETATCH A RESOURCE FROM A CPU                          *\n*        $DR - DISPLAY CPU RESOURCES                                  *\n*                                                                     *\n***********************************************************************\n         CLC   COMVERB(8),=C'DCKPTDEF' SEE IF DISPLAYING CKPTDEF\n         BE    E005RC00            YES, LET IT PASS THROUGH\n         CLC   COMVERB(7),=C'DCONDEF' SEE IF DISPLAYING CONDEF\n         BE    E005RC00            YES, LET IT PASS THROUGH\n         LA    R2,CMD$DC           ASSUME $DC\n         CLC   COMVERB(2),=C'DC'   SEE IF $DC COMMAND\n         BE    E005GBUF            YES, GO PROCESS IT\n         LA    R2,CMD$DR           ASSUME $DR\n         CLC   COMVERB(2),=C'DR'   SEE IF $DR COMMAND\n         BE    E005GBUF            YES, GO PROCESS IT\n         LA    R2,CMD$QA           ASSUME $QA\n         CLC   COMVERB(2),=C'QA'   SEE IF $QA COMMAND\n         BE    E005GBUF            YES, GO PROCESS IT\n         LA    R2,CMD$QD           ASSUME $QD\n         CLC   COMVERB(2),=C'QD'   SEE IF $QD COMMAND\n         BE    E005GBUF            YES, GO PROCESS IT\n         B     E005RC00            NO,  LET IT PASS THROUGH\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GET A JES2 BUFFER FOR REENTRANCY AND                         *\n*        CLEAR THE COMMAND WORK AREA                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nE005GBUF $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R4,R1               SAVE WORK AREA ADDRESS\n         USING RESWORK2,R4         SET ADDRESSABILITY TO WORK AREA\n         LA    R14,RESWORK2+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS\n         LH    R15,$BUFSIZE        SET   'TO'   LENGTH\n         SLR   R0,R0               CLEAR 'FROM' ADDRESS\n         SLR   R1,R1               CLEAR 'FROM' LENGTH\n         MVCL  R14,R0              CLEAR THE BUFFER\n         STC   R2,E005SW1          SAVE COMMAND INDICATORS\n         MVC   E005OP1,$BLANKS     BLANK THE FIRST OPERAND VALUE\n         MVC   E005OP2,$BLANKS     BLANK THE SECOND OPERAND VALUE\n         EJECT\n*****************************************************************\n*                                                               *\n*        CHECK FOR REDIRECTION OF RESPONSES                     *\n*                                                               *\n*****************************************************************\n         SPACE 1\nE005RED  TM    COMFLAG,CMBFLAGU    IS THIS A UCM\n         BZ    E005AUTH            NO, SKIP REDIRECTION\n         TM    FBLFLG,FBLFLGC+FBLFLGR CONSOLE SET OR REMOTE SYSTEM\n         BNZ   E005RED1            SKIP AUTOMATIC L=CCA\n         LA    R1,2                LOAD REDIRECT OFFSET FOR CMDS\n*                                  SAME AS FOR $DF\n         BCTR  R1,0                REDUCE BY 1\n         SLL   R1,1                DOUBLE\n         SLR   R2,R2               ZERO REGISTER FOR IC\n         IC    R2,COMUCM           PICK UP CURRENT UCM ID\n         L     R14,$COMEXTN        POINT TO CONSOLE WORK AREA\n         USING CWA,R14             SET ADDRESSABILITY TO CWA\n         CH    R2,CWAOCON          SEE IF EXCEEDS MAXIMUM\n         BH    E005RED1            YES, ERROR, NO AUTOMATIC REDIRECTION\n         MH    R2,CWALCON          MULTIPLY BY LENGTH OF EACH ENTRY\n         AR    R1,R2               COMBINE OFFSETS\n         LA    R1,CWARESP-CWACONL(R1) POINT TO CORRECT CWA ENTRY\n         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID\n         TM    FBLFLG,FBLFLGA      HAS AREA BEEN SET\n         BO    E005RED1            YES, SKIP AUTOMATIC REDIRECTION\n         MVC   COMUCMA,CWACONA(R1) SET NEW AREA\n         DROP  R14                 DROP ADDRESSABILITY TO CWA\n         EJECT\n*****************************************************************\n*                                                               *\n*        ROUTINE TO VERIFY CONSOLE/AREA                         *\n*                                                               *\n*****************************************************************\n         SPACE 1\nE005RED1 TM    FBLFLG,FBLFLGR      SEE IF REMOTE SYSTEM UCM\n         BO    E005RED3            YES, UCM AND AREA ARE OK\n         L     R2,$COMEXTN         POINT TO CONSOLE WORK AREA\n         USING CWA,R2              SET ADDRESSABILITY TO CWA\n         MVC   XASCID(1),COMUCM    SET UCM ID\n         MVC   XASDID(1),COMUCMA   SET AREA ID\n         CLI   XASDID,0            SEE IF AREA ID SPECIFIED\n         BNZ   E005RED2            YES, BRANCH\n         MVI   XASDID,C'Z'         NO,  FORCE AREA Z\nE005RED2 MVC   XAU(1),COMUCM       TELL OS SOURCE IS SAME AS OUTPUT\n         MVI   XAN,X'22'           SET ID FOR VERIFIER\n         MODESET EXTKEY=ZERO       GET KEY 0\n         L     R15,CWA7603D        POINT TO OS VERIFICATION ROUTINE\n         $AMODE 24,PUSHR=0,R=R14   GO TO AMODE 24\n         BALR  R14,R15             ENTER IT\n         $AMODE POPR=0,R=R14       RETURN TO ORIGINAL AMODE\n         MODESET EXTKEY=HASP       RETURN TO KEY 1\n         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR\n         BNH   E005RED3            NO, GO ISSUE ERROR MESSAGE\n         SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,B'0011',COMUCM   PICK UP UCM AND AREA ID\n         MVI   COMUCMA,0           FORCE NO DISPLAY AREA\n         CH    R15,=H'12'          SEE IF CONSOLE DOWN\n         BNE   *+16                NO, DO NOT SET LOGICAL CONSOLE\n         MVC   COMFLAG(4),MOWTOL   DESTROY APPARENT SOURCE INFO\n         MVC   COMOUT,MOWTOL+(COMOUT-COMFLAG) OMITTING CNTL FIELD\n         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND\n         MVC   COMMAND(MBVINVL),MBVINV SET ERROR MESSAGE TEXT\n         STC   R3,MBVINVA          SET AREA\n         SRL   R3,8                ALIGN CONSOLE ID\n         CVD   R3,$DOUBLE          CONVERT TO PACKED\n         MVC   WRKA(4),=X'F0212020' SET EDIT MASK\n         ED    WRKA(4),$DOUBLE+6   EDIT CONSOLE ID TO AREA\n         MVC   MBVINVC,WRKA+2      MOVE CONSOLE ID TO MESSAGE\n         MVC   COMMAND+MBVINVL(8),COMACEID MOVE IDENTIFIER\n         $CWTO L=MBVINVL,MSGID=999 WRITE ERROR MESSAGE TO CONSOLE\n         B     E005RC08            GET OUT\n         DROP  R2                  DROP ADDRESSABILITY TO CWA\nE005RED3 CLI   COMUCMA,0           TEST FOR DISPLAY AREA\n         BE    E005AUTH            IF NOT, SKIP\n         MVI   COMLINET,X'80'      SET CONTROL LINE\n         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND\n         MVI   COMLINET,X'20'      SET DATA LINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CHECK THE CONSOLE AUTHORITY FOR THESE COMMANDS               *\n*                                                                     *\n*        ONLY LOCAL CONSOLES ARE ALLOWED TO ISSUE THE COMMANDS        *\n*                                                                     *\n***********************************************************************\nE005AUTH TM    COMFLAG,CMBFLAGU    IS THIS A UCM (LOCAL CONSOLE)\n         BZ    E005ERR7            NO, ERROR\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        PARSE THE COMMAND BUFFER.                                    *\n*                                                                     *\n*        1)  ONLY TWO OPERANDS ARE ALLOWED                            *\n*        2)  EACH OPERAND CAN ONLY BE 8 CHARACTERS LONG               *\n*        3)  EACH COMMAND WILL VALIDATE THE INDIVIDUAL VALUES         *\n*                                                                     *\n***********************************************************************\nE005CK   BXH   R5,R6,E005CK8       IF NO MORE EXIT\n         L     R1,0(,R5)           POINT TO OPERAND\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE FIRST PARAMETER                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nE005CK1  LR    R14,R1              SAVE PARAMETER ADDRESS\n         SLR   R15,R15             SET LENGTH TO ZERO\nE005CK2  CLI   0(R1),C' '          END OF PARAMETER STRING\n         BE    E005CK3             YES, BRANCH\n         CLI   0(R1),C','          END OF PARAMETER STRING\n         BE    E005CK3             YES, BRANCH\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF SUBPARAM\n         LA    R15,1(,R15)         ADD 1 TO LENGTH\n         B     E005CK2             LOOP\nE005CK3  LTR   R15,R15             TEST LENGTH\n         BZ    E005ERR1            ZERO, ERROR\n         CH    R15,=H'8'           SEE IF GT 8\n         BH    E005ERR1            GREATER THAN 8, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,E005MV1         SAVE FIRST OPERAND\n         B     E005CK5             GO PROCESS SECOND PARAMETER\nE005MV1  MVC   E005OP1(0),0(R14)   **** EXECUTE ONLY ****\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE SECOND PARAMETER                                 *\n*                                                                     *\n***********************************************************************\nE005CK5  BXH   R5,R6,E005CK8       IF NO MORE EXIT\n         L     R1,0(,R5)           POINT TO OPERAND\n         LR    R14,R1              SAVE PARAMETER ADDRESS\n         SLR   R15,R15             SET LENGTH TO ZERO\nE005CK6  CLI   0(R1),C' '          END OF PARAMETER STRING\n         BE    E005CK7             YES, BRANCH\n         CLI   0(R1),C','          END OF PARAMETER STRING\n         BE    E005ERR2            YES, ERROR\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF PARAM\n         LA    R15,1(,R15)         ADD 1 TO LENGTH\n         B     E005CK6             LOOP\nE005CK7  LTR   R15,R15             TEST LENGTH\n         BZ    E005ERR1            ZERO, ERROR\n         CH    R15,=H'8'           SEE IF GT 8\n         BH    E005ERR1            GREATER THAN 8, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,E005MV2         SAVE FIRST OPERAND\n         B     E005CK8             GO CHECK VALUES\nE005MV2  MVC   E005OP2(0),0(R14)   **** EXECUTE ONLY ****\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GO TO THE PROPER ROUTINE TO PROCESS THE COMMAND              *\n*                                                                     *\n***********************************************************************\nE005CK8  TM    E005SW1,CMD$DR      SEE IF $DR COMMAND\n         BO    E005$DR             YES, BRANCH\n         TM    E005SW1,CMD$QA      SEE IF $QA COMMAND\n         BO    E005$QA             YES, BRANCH\n         TM    E005SW1,CMD$QD      SEE IF $QD COMMAND\n         BO    E005$QD             YES, BRANCH\n         B     E005$DC             NO,  MUST BE $DC COMMAND\n         EJECT\n***********************************************************************\n*                                                                     *\n*        $DC COMMAND                                                  *\n*                                                                     *\n***********************************************************************\nE005$DC  TM    E005SW1,CMD$DC      SEE IF $DC COMMAND\n         BNO   E005$DC1            NO, BYPASS OPERAND CHECK\n         CLI   E005OP1,C' '        SEE IF ANY OPERANDS SPECIFIED\n         BNE   E005ERR3            YES, ERROR\n***********************************************************************\n*                                                                     *\n*        THIS COMMAND WILL SCAN THE QUEUES FOR ALL JOBS WAITING       *\n*        FOR EXECUTION.  THE RESOURCE BITS FOR THOSE JOBS WILL        *\n*        BE EXAMINED TO DETERMINE IF THERE IS A PROCESSOR THAT        *\n*        HAS ALL OF THE APPROPRIATE BITS SET AN THUS COULD RUN        *\n*        THE JOB.  IF THERE IS NO PROCESSOR, A CONFLICT EXISTS        *\n*        AND THE JOB STATUS INFORMATION FOR THESE JOBS WILL BE        *\n*        DISPLAYED ON THE CONSOLE.                                    *\n*                                                                     *\n*        THE JOB QUEUES ARE ANCHORED OFF OF THE HCT.  THE FIELD       *\n*        $JQHEADS POINT TO 46 + 1 DUMMY CLASS QUEUES.  EACH           *\n*        QUEUE HAS THE OFFSET FROM THE START OF THE JOB QUEUE         *\n*        OF THE FIRST JQE IN THAT CATAGORY.  THESE QUEUES ARE         *\n*        AS FOLLOWS:                                                  *\n*                                                                     *\n*          WORD     QUEUE                                             *\n*                                                                     *\n*           1       PURGE QUEUE                                       *\n*           2       HARDCOPY (PRINT) QUEUE                            *\n*           3       OUTPUT QUEUE                                      *\n*           4       RECEIVE QUEUE                                     *\n*           5       SETUP QUEUE                                       *\n*           6       XMIT QUEUE                                        *\n*           7       INPUT QUEUE                                       *\n*           8       CONVERSION QUEUE                                  *\n*           9       STARTED TASK EXECUTION QUEUE                      *\n*           10      TSO EXECUTION QUEUE                               *\n*           11-36   CLASS A-Z EXECUTION QUEUE                         *\n*           37-46   CLASS 0-9 EXECUTION QUEUE                         *\n*           47      DUMMY ENTRY                                       *\n*                                                                     *\n*        THE FIRST QUEUE IN THE QUEUE WILL POINT TO THE NEXT          *\n*        JQE, ETC, UNTIL THE END OF THE QUEUE.                        *\n*                                                                     *\n***********************************************************************\nE005$DC1 SLR   R3,R3               ZERO THE QUEUE OFFSET\n         STH   R3,E005INDX         SAVE THE QUEUE OFFSET\n         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         ST    R1,BUFADDR          SAVE BUFFER ADDRESS\nE005$DC2 LA    R9,$JQHEADS-(JQENEXT-JQE)(R3) POINT TO NEXT QUEUE\n         USING JQE,R9              SET ADDRESSABILITY TO JQE\nE005$DC3 L     R9,JQENEXT          GET OFFSET OF FIRST/NEXT JQE\n         N     R9,$ZEROFFF         CLEAR THE HIGH ORDER BYTE\n         BZ    E005$DC8            ZERO, END OF QUEUE, GO TO NEXT\n         AL    R9,$JOBQPTR         CHANGE JQE OFFSET TO ACTUAL ADDRESS\n         TM    JQETYPE,$XEQ        SEE IF POSSIBLY AWAITING EXECUTION\n         BNO   E005$DC7            NO, BYPASS THIS JQE\n         TM    JQEFLAG1,JQE1BUSY   SEE IF BUSY (EXECUTING)\n         BO    E005$DC7            YES, BYPASS THIS JQE\n         ICM   R15,B'1111',JQERESRT LOAD RESOURCE BITS\n         BZ    E005$DC7            NONE, BYPASS THIS JQE\n         L     R1,$QSE1            LOAD ADDRESS OF FIRST QSE\n         USING QSE,R1              SET ADDRESSABILITY TO QSE\nE005$DC4 ICM   R14,B'1111',QSERESTB LOAD RESOURCE BITS\n         BZ    E005$DC5            THIS PROCESSOR IS NOT ELIGIBLE\n         OR    R14,R15             'OR' THE RESOURCES TOGETHER\n         C     R14,QSERESTB        SEE IF THEY CHANGED\n         BE    E005$DC3            NO, THERE IS ONE ELIGIBLE PROCESSOR\nE005$DC5 TM    QSESTAT,QSELAST     SEE IF LAST QSE\n         BO    E005$DC6            YES, NONE ELIGIBLE, GO FORMAT IT\n         LA    R1,QSELEN(R1)       INCREMENT TO NEXT QSE\n         B     E005$DC4            GO PROCESS NEXT QSE\n         DROP  R1                  DROP ADDRESSABILITY TO QSE\nE005$DC6 MVI   QBITS,QCNV+QXEQ     EXECUTION QUEUE ONLY\n         MVI   QBITS+1,0           NO ACTIVE JOBS OR DEVICE ACTIVITY\n         MVI   QMISC+L'SYSALL,SYSALL ALL SYSTEMS\n         MVI   QMISC+L'RESOURCE,RESOURCE LIST RESOURCE NAMES\n         MVI   QFILT1,0            NO SPECIAL FILTERING\n         MVI   QFILT2,0            NO SPECIAL FILTERING\n         MVI   QCLASS,0            ZERO THE XEQ/CNV CLASS\n         XC    OWNERID,OWNERID     NO OWNERID SELECTION\n         L     R10,BUFADDR         GET A BUFFER ADDRESS\n         LA    R1,QBITS            POINT TO EXIT PARM LIST\n         $EXIT 255,ENVIRON=JES2,MAXRC=8 CALL FORMAT ROUTINE\n         CH    R15,=H'8'           SEE IF CONSOLE BUFFER SHORTAGE\n         BE    E005RC08            YES, GET OUT\n         CH    R15,=H'4'           SEE IF JOB PASSED FILTERING\n         BE    E005$DC7            NO, DO NOT TURN ON JOB FOUND\n         OI    E005SW1,FOUND       TURN ON JOB FOUND INDICATOR\nE005$DC7 B     E005$DC3            GO PROCESS NEXT JQE\nE005$DC8 LH    R3,E005INDX         LOAD THE QUEUE OFFSET\n         LA    R3,4(R3)            INCREMENT TO NEXT QUEUE\n         STH   R3,E005INDX         SAVE THE NEW QUEUE OFFSET\n         LA    R1,$JQTYPES*$JQHEADL CALCULATE END OF QUEUE\n         CLR   R3,R1               SEE IF END OF QUEUE\n         BL    E005$DC2            NO, GO PROCESS THIS QUEUE\nE005$DC9 L     R10,BUFADDR         GET THE WORK AREA ADDRESS\n         $FREEBUF (R10)            FREE THE WORK AREA\n         TM    E005SW1,FOUND       SEE IF RESOURCE CONFLICT FOUND\n         BNO   E005$DCA            YES, BRANCH\n         MVC   MESSAGE(20),=CL20'- END OF CONFLICTS'\n         LA    R0,20               LOAD LENGTH OF MESSAGE\n         LA    R1,MESSAGE          LOAD ADDRESS OF MESSAGE\n         $CWTO L=(R0),MSG=(R1),MSGID=900  DISPLAY MESSAGE\n         B     E005RC08            END OF COMMAND\nE005$DCA MVC   MESSAGE(20),=CL20'- NO CONFLICTS EXIST'\n         LA    R0,20               LOAD LENGTH OF MESSAGE\n         LA    R1,MESSAGE          LOAD ADDRESS OF MESSAGE\n         $CWTO L=(R0),MSG=(R1),MSGID=900  DISPLAY MESSAGE\n         B     E005RC08            END OF COMMAND\n         DROP  R9                  DROP ADDRESSABILITY TO JQE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        $DR COMMAND                                                  *\n*                                                                     *\n***********************************************************************\nE005$DR  TM    E005SW1,CMD$DR      SEE IF $DR COMMAND\n         BNO   E005$DR2            NO, BYPASS OPERAND CHECK\n         CLI   E005OP2,C' '        SEE IF TOO MANY OPERANDS\n         BNE   E005ERR2            YES, ERROR\n         CLI   E005OP1,C' '        SEE IF SID SPECIFIED\n         BNE   E005$DR1            YES, BRANCH\n         MVC   E005OP1(4),$SID     SET DEFAULT SID\nE005$DR1 MVC   E005OP2,E005OP1     MOVE SID TO SECOND OPERAND\n***********************************************************************\n*                                                                     *\n*        FIND THE QSE THAT MATCHES THE SID                            *\n*                                                                     *\n***********************************************************************\nE005$DR2 LA    R1,E005OP2          POINT TO SID\n         CLI   E005OP2+4,C' '      SEE IF SID LENGTH GREATER THAN 4\n         BNE   E005ERR5            YES, ERROR\n         L     R8,$QSE1            LOAD ADDRESS OF FIRST QSE\n         USING QSE,R8              SET ADDRESSABILITY TO QSE\n         CLC   E005OP2(4),=C'ALL ' SEE IF WANT ALL SIDS\n         BE    E005$DR4            YES, GO FORMAT THIS ONE\nE005$DR3 CLC   QSESID,0(R1)        SEE IF MATCH ON SID\n         BE    E005$DR4            YES, BRANCH\n         TM    QSESTAT,QSELAST     SEE IF LAST QSE\n         BO    E005ERR5            YES, ERROR\n         LA    R8,QSELEN(R8)       LOAD ADDRESS OF NEXT QSE\n         B     E005$DR3            LOOP\nE005$DR4 MVI   MESSAGE,C' '        BLANK THE ENTIRE\n         MVC   MESSAGE+1(99),MESSAGE MESSAGE AREA\n         MVC   MESSAGE(4),QSESID   SET THE SYSTEM ID\n         MVI   MESSAGE+5,C'='      SET EQUAL SIGN\n         LA    R3,$RESTAB          POINT TO FIRST RESOURCE NAME\n         LA    R15,MESSAGE+7       POINT TO RESOURCE NAME AREA\n         ICM   R6,B'1111',QSERESTB LOAD THE SYSTEM RESOURCE BITS\n         BNZ   E005$DR5            NOT ZERO, WE HAVE SOME\n         MVC   MESSAGE+7(21),=C'NO RESOURCES ATTACHED'\n         LA    R0,28               LOAD LENGTH OF MESSAGE\n         LA    R1,MESSAGE          LOAD ADDRESS OF MESSAGE\n         $CWTO L=(R0),MSG=(R1),MSGID=900  DISPLAY MESSAGE\n         B     E005$DR8            END OF THIS QSE\nE005$DR5 LTR   R6,R6               TEST RESOURCE BIT\n         BZ    E005$DR7            ZERO, DONE, BRANCH\n         BP    E005$DR6            NOT ON, BRANCH\n         MVC   0($RESLEN,R15),0(R3) MOVE RESOURCE NAME TO MSG\n         LA    R15,$RESLEN+1(R15)  INCREMENT TO NEXT SLOT IN MSG\n         LA    R0,MESSAGE+40       LOAD LINE LIMIT ADDRESS\n         CR    R15,R0              SEE IF PAST LIMIT\n         BL    E005$DR6            NO, BRANCH\n         LA    R1,MESSAGE          LOAD ADDRESS OF MESSAGE\n         LA    R0,$RESLEN+1(R15)   CALCULATE LENGTH\n         SR    R0,R1                  OF MESSAGE\n         $CWTO L=(R0),MSG=(R1),MSGID=900  DISPLAY MESSAGE\n         MVI   MESSAGE,C' '        BLANK THE ENTIRE\n         MVC   MESSAGE+1(99),MESSAGE MESSAGE AREA\n         MVI   MESSAGE+1,C'\"'      SET CONTINUATION INDICATOR\n         MVI   MESSAGE+5,C'='      SET EQUAL SIGN\n         LA    R15,MESSAGE+7       POINT TO RESOURCE NAME AREA\n         B     E005$DR6            GO PROCESS NEXT RESOURCE BIT\nE005$DR6 SLL   R6,1                SHIFT RESOURCE BITS\n         LA    R3,$RESLEN(R3)      INCREMENT TO NEXT RESOURCE NAME\n         B     E005$DR5            GO TEST THIS BIT\nE005$DR7 CLI   MESSAGE+7,C' '      HAS A RESOURCE NAME BEEN SET\n         BE    E005$DR8            NO, NOTHING ELSE TO WRITE\n         LA    R1,MESSAGE          LOAD ADDRESS OF MESSAGE\n         LA    R0,$RESLEN+1(R15)   CALCULATE LENGTH\n         SR    R0,R1                  OF MESSAGE\n         $CWTO L=(R0),MSG=(R1),MSGID=900  DISPLAY MESSAGE\n         MVI   MESSAGE,C' '        BLANK THE ENTIRE\n         MVC   MESSAGE+1(99),MESSAGE MESSAGE AREA\nE005$DR8 CLC   E005OP2(4),=C'ALL ' SEE IF WANT ALL SIDS\n         BNE   E005$DR9            NO, BRANCH\n         TM    QSESTAT,QSELAST     SEE IF LAST QSE\n         BO    E005$DR9            YES, GET OUT\n         LA    R8,QSELEN(R8)       LOAD ADDRESS OF NEXT QSE\n         B     E005$DR4            GO FORMAT THIS ONE ALSO\n         DROP  R8                  DROP ADDRESSABILITY TO QSE\nE005$DR9 TM    E005SW1,CMD$QA+CMD$QD SEE IF $QA OR $QD COMMAND\n         BNZ   E005$DC             YES, BRANCH ENTER THE $DC COMMAND\n         B     E005RC08            NO,  GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        $QA COMMAND                                                  *\n*                                                                     *\n***********************************************************************\nE005$QA  CLI   E005OP1,C' '        SEE IF RESOURCE NAME SPECIFIED\n         BE    E005ERR6            NO, ERROR\n         CLI   E005OP2,C' '        SEE IF SID SPECIFIED\n         BNE   E005$QA1            YES, BRANCH\n         MVC   E005OP2(4),$SID     NO,  USE DEFAULT SID\n***********************************************************************\n*                                                                     *\n*        FIND THE QSE THAT MATCHES THE SID                            *\n*                                                                     *\n***********************************************************************\nE005$QA1 LA    R1,E005OP2          POINT TO SID\n         CLI   E005OP2+4,C' '      SEE IF SID LENGTH GREATER THAN 4\n         BNE   E005ERR5            YES, ERROR\n         L     R8,$QSE1            LOAD ADDRESS OF FIRST QSE\n         USING QSE,R8              SET ADDRESSABILITY TO QSE\nE005$QA2 CLC   QSESID,0(R1)        SEE IF MATCH ON SID\n         BE    E005$QA3            YES, BRANCH\n         TM    QSESTAT,QSELAST     SEE IF LAST QSE\n         BO    E005ERR5            YES, ERROR\n         LA    R8,QSELEN(R8)       LOAD ADDRESS OF NEXT QSE\n         B     E005$QA2            LOOP\n***********************************************************************\n*                                                                     *\n*        FIND THE RESOURCE NAME IN THE RESTABL                        *\n*                                                                     *\n***********************************************************************\nE005$QA3 LA    R1,E005OP1          POINT TO RESOURCE NAME\n         LA    R7,$RESTAB          POINT TO START OF RESOURCE NAMES\n         LA    R15,$RESMAX         SET LOOP COUNTER\n         ICM   R5,B'1111',=X'80000000' SET RESOURCE BIT MASK\nE005$QA4 CLC   E005OP1,0(R7)       SEE IF MATCH ON NAME\n         BE    E005$QA5            YES, BRANCH\n         LA    R7,$RESLEN(R7)      INCREMENT TO NEXT RESTABLE ENTRY\n         SRL   R5,1                SHIFT RESOURCE BIT MASK\n         BCT   R15,E005$QA4        LOOP\n         B     E005ERR4            INVALID RESOURCE NAME, ERROR\nE005$QA5 LR    R3,R5               SAVE RESOURCE BITS\n         O     R3,QSERESTB         'OR' THE QSE BITS ON ALSO\n         CL    R3,QSERESTB         SEE IF CHANGED\n         BE    E005$QA6            NO, NOTHING CHANGED\n         $QSUSE ,                  GET CONTROL OF THE CHECKPOINT\n         O     R5,QSERESTB         'OR' THE QSE BITS\n         STCM  R5,B'1111',QSERESTB AND REPLACE IN THE QSE\nE005$QA6 $POST $HASPECF,JOB        POST JES2 WORK SELECT ROUTINE\n         B     E005$DR             DONE, GO DISPLAY RESOURCES\n         DROP  R8                  DROP ADDRESSABILITY TO QSE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        $QD COMMAND                                                  *\n*                                                                     *\n***********************************************************************\nE005$QD  CLI   E005OP1,C' '        SEE IF RESOURCE NAME SPECIFIED\n         BE    E005ERR6            NO, ERROR\n         CLI   E005OP2,C' '        SEE IF SID SPECIFIED\n         BNE   E005$QD1            YES, BRANCH\n         MVC   E005OP2(4),$SID     NO,  USE DEFAULT SID\n***********************************************************************\n*                                                                     *\n*        FIND THE QSE THAT MATCHES THE SID                            *\n*                                                                     *\n***********************************************************************\nE005$QD1 LA    R1,E005OP2          POINT TO SID\n         CLI   E005OP2+4,C' '      SEE IF SID LENGTH GREATER THAN 4\n         BNE   E005ERR5            YES, ERROR\n         L     R8,$QSE1            LOAD ADDRESS OF FIRST QSE\n         USING QSE,R8              SET ADDRESSABILITY TO QSE\nE005$QD2 CLC   QSESID,0(R1)        SEE IF MATCH ON SID\n         BE    E005$QD3            YES, BRANCH\n         TM    QSESTAT,QSELAST     SEE IF LAST QSE\n         BO    E005ERR5            YES, ERROR\n         LA    R8,QSELEN(R8)       LOAD ADDRESS OF NEXT QSE\n         B     E005$QD2            LOOP\n***********************************************************************\n*                                                                     *\n*        FIND THE RESOURCE NAME IN THE RESTABL                        *\n*                                                                     *\n***********************************************************************\nE005$QD3 LA    R1,E005OP1          POINT TO RESOURCE NAME\n         LA    R7,$RESTAB          POINT TO START OF RESOURCE NAMES\n         LA    R15,$RESMAX         SET LOOP COUNTER\n         ICM   R5,B'1111',=X'80000000' SET RESOURCE BIT MASK\nE005$QD4 CLC   E005OP1,0(R7)       SEE IF MATCH ON NAME\n         BE    E005$QD5            YES, BRANCH\n         LA    R7,$RESLEN(R7)      INCREMENT TO NEXT RESTABLE ENTRY\n         SRL   R5,1                SHIFT RESOURCE BIT MASK\n         BCT   R15,E005$QD4        LOOP\n         B     E005ERR4            INVALID RESOURCE NAME, ERROR\nE005$QD5 LR    R3,R5               SAVE NEW RESOURCE BIT\n         O     R3,QSERESTB         'OR' THE QSE BITS ON ALSO\n         XR    R3,R5               'EXCLUSIVE OR' THE NEW BIT\n         CL    R3,QSERESTB         SEE IF CHANGED\n         BE    E005$QD6            NO, NOTHING CHANGED\n         $QSUSE ,                  GET CONTROL OF THE CHECKPOINT\n         LR    R3,R5               SAVE NEW RESOURCE BIT\n         O     R5,QSERESTB         'OR' THE QSE BITS ON ALSO\n         XR    R3,R5               'EXCLUSIVE OR' THE NEW BIT\n         STCM  R3,B'1111',QSERESTB AND REPLACE IN THE QSE\nE005$QD6 $POST $HASPECF,JOB        POST JES2 WORK SELECT ROUTINE\n         B     E005$DR             DONE, GO DISPLAY RESOURCES\n         DROP  R8                  DROP ADDRESSABILITY TO QSE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INVALID OPERAND SPECIFIED                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nE005ERR1 L     R1,0(0,R5)          POINT TO INVALID OPERAND\n         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG\n         MVC   COMMAND+9(16),=C' INVALID OPERAND' SET ERROR MSG\n         LA    R0,25               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=970    WRITE ERROR MESSAGE\n         B     E005RC08            GET OUT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        TOO MANY COMMAND OPERANDS                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nE005ERR2 MVC   COMMAND(18),=C' TOO MANY OPERANDS' SET ERROR MSG\n         LA    R0,18               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=971    WRITE ERROR MESSAGE\n         B     E005RC08            GET OUT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        NO OPERANDS ON $DC COMMAND                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nE005ERR3 MVC   COMMAND(40),=CL40' NO OPERANDS ALLOWED ON THE $DC COMMANX\n               D'\n         LA    R0,40               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=972    WRITE ERROR MESSAGE\n         B     E005RC08            GET OUT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        INVALID RESOURCE NAME                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nE005ERR4 MVC   COMMAND(8),0(R1)    MOVE RESOURCE NAME TO MSG\n         MVC   COMMAND+8(23),=C' INVALID RESOURCE NAME ' SET ERROR MSG\n         LA    R0,30               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=973    WRITE ERROR MESSAGE\n         B     E005RC08            GET OUT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        INVALID SYSTEM ID                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nE005ERR5 MVC   COMMAND(8),0(R1)    MOVE SYSTEM ID TO MESSAGE\n         MVC   COMMAND+9(22),=C'INVALID SYSTEM ID     ' SET ERROR MSG\n         LA    R0,30               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=974    WRITE ERROR MESSAGE\n         B     E005RC08            GET OUT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        RESOURCE NAME MISSING                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nE005ERR6 MVC   COMMAND(35),=CL35' RESOURCE NAME MUST BE SPECIFIED'\n         LA    R0,35               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=976    WRITE ERROR MESSAGE\n         B     E005RC08            GET OUT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        COMMAND NOT FROM A LOCAL CONSOLE                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nE005ERR7 MVC   COMMAND(45),=CL45' COMMAND NOT AUTHORIZED FROM THIS CONS*\n               OLE'\n         LA    R0,45               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=977    WRITE ERROR MESSAGE\n         B     E005RC08            GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\nE005RC00 DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nE005RC08 DS    0H\n         $FREEBUF (R4)             FREE THE WORK AREA\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\n         DROP  R4                  DROP ADDRESSABILITY TO WORK AREA\n         EJECT\n*****************************************************************\n*                                                               *\n*       R E D I R E C T   R O U T I N E   C O N S T A N T S     *\n*                                                               *\n*****************************************************************\n         SPACE 1\nMOWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX\nMBVINV   DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '\nMBVINVL  EQU   *-MBVINV\nMBVINVC  EQU   COMMAND+MBVINVL-16,2\nMBVINVA  EQU   MBVINVC+2,1\nFBLFLG   EQU   COMEWORK+2          FLAG BYTE\nCOMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER\nFBLFLGR  EQU   1                   UCM COMMAND FROM REMOTE SYSTEM\nFBLFLGC  EQU   2                   CONSOLE HAS BEEN SPECIFIED\nFBLFLGA  EQU   4                   AREA HAS BEEN SPECIFIED\n         EJECT\n         $RESTABL ,\n         EJECT\n         LTORG\n         EJECT\n         TITLE 'JES2 ESOTERIC RESOURCE ROUTING EXITS - EXIT 14'\n***********************************************************************\n*                                                                     *\n*        RESOURCE ROUTINE EXIT 14                                     *\n*                                                                     *\n***********************************************************************\nE014RESC $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R1       - ADDRESS OF A QGET PARAMETER LIST                  *\n*                   WORD 1 - ADDRESS OF THE NODE TABLE                *\n*                   WORD 2 - ADDRESS OF THE CONTROL BLOCK             *\n*                            PIT  --  IF INWS                         *\n*                            DCT  --  IF OJTWS OR OJTWSC              *\n*                   WORD 3 - ADDRESS OF THE CLASS LIST                *\n*                   WORD 4 - ADDRESS OF THE SELECTED JQE              *\n*                   WORD 5 - MISCELLANEOUS BYTES                      *\n*                            1 - LENGTH OF THE CLASS LIST             *\n*                            2 - QUEUE TYPE                           *\n*                            3 - WORK SELECTION TYPE FLAG             *\n*                            4 - RESERVED                             *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE PCE                                *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         LR    R2,R1               COPY $QGET PARAMETER LIST ADDR\n         USING QGT,R2              SET ADDRESSABILITY TO THE QGT\n***********************************************************************\n*                                                                     *\n*        LIMIT PROCESSING TO REQUESTS FOR JOBS AWAITING EXECUTION     *\n*                                                                     *\n***********************************************************************\n         TM    QGTWSTP,$QGTLST+$QGTLSTC WORK SELECTION FOR OFFJT\n         BM    E014RC00            YES, LET JES2 DO IT\n         TM    QGTWSTP,$QGTINWS    INITIATOR CLASS LIST SEARCH\n         BO    E014QLST            YES, GO PROCESS IT\n         TM    QGTTYP,$XEQ         EXECUTION QUEUE REQUEST\n         BNO   E014RC00            NO, LET JES2 DO IT\n         CLI   QGTTYP,$XEQ         CONVERSION QUEUE REQUEST\n         BE    E014RC00            YES, LET JES2 TO IT ALSO\nE014QLST ICM   R5,B'1111',QGTCLST  GET CLASS LIST ADDRESS\n         BZ    E014RC00            NONE, LET JES2 DO IT\n         SLR   R3,R3               CLEAR REGISTER FOR CLASS COUNTER\n***********************************************************************\n*                                                                     *\n*        RUN THROUGH THE SPECIFIED CLASS LIST.  CALCULATE THE         *\n*        $QINDEX OFFSET OF EACH CLASS IN THE LIST AND SCAN THAT       *\n*        CLASS QUEUE.                                                 *\n*                                                                     *\n***********************************************************************\nE014NXTC CLM   R3,B'0001',QGTLSTLN SEE IF END OF CLASS LIST\n         BNL   E014RC12            YES, EXIT WITH NO JQE FOUND\n         SLR   R6,R6               CLEAR REG FOR IC\n         IC    R6,0(R5)            GET NEXT CLASS IN LIST\n         CLM   R6,B'0001',$BLANKS  SEE IF END OF CLASS LIST\n         BE    E014RC12            YES, EXIT WITH NO JQE FOUND\n         LA    R5,1(,R5)           POINT TO NEXT CLASS IN LIST\n         LA    R3,1(,R3)           INCREMENT CLASS LIST COUNTER\n         N     R6,=A($XEQCLAS)     MODIFY CLASS FOR TABLE INDEX\n         LA    R4,X'3F'            GET MASK FOR RELATIVE CAT ENTRY\n         NR    R4,R6               GET RELATIVE CAT ENTRY\n         MH    R4,=Y(CATLEN)       MULTIPLY BY CAT ENTRY LENGTH\n         AL    R4,$CATABLE         POINT TO CAT ENTRY\n         USING CAT,R4              SET ADDRESSABILITY TO CAT\n***********************************************************************\n*                                                                     *\n*        IF CURRENT CLASS IS A TSU, STC, OR HELD CLASS, DON'T         *\n*        SCAN THE CLASS QUEUE FOR JQES                                *\n*                                                                     *\n***********************************************************************\n         TM    CATJOBFL,JCTTSUJB+JCTSTCJB IS THIS A TSU OR SCT CLASS\n         BNZ   E014NXTC            YES, GET NEXT CLASS\n         TM    CATJBOPT,JCTQHELD   IS THIS A HELD CLASS\n         BO    E014NXTC            YES, GET NEXT CLASS\n         DROP  R4                  KILL CAT ADDRESSABILITY\n         L     R15,$QINDEXA        GET JOB QUEUE..\n         IC    R6,0(R6,R15)        LOAD QUEUE HEADER OFFSET\n         LTR   R6,R6               IS THIS A VALID QUEUE TYPE\n         BZ    E014CLST            YES, CHECK IF RUNNING CLASS LIST\n         LA    R6,$JQHEADS-$JQHEADL-(JQENEXT-JQE)(R6) SETUP Q SCAN\n         USING JQE,R6              SET ADDRESSABILITY TO JQE\n***********************************************************************\n*        SCAN SELECTED QUEUE FOR A JQE                                *\n***********************************************************************\nE014NXTQ L     R6,JQENEXT          GET OFFSET OF FIRST/NEXT JQE\n         N     R6,$ZEROFFF         CLEAR THE HIGH ORDER BYTE\n         BNZ   E014CK1             NOT END OF QUEUE, GO CHECK THIS ONE\nE014CLST TM    QGTWSTP,$QGTINWS    CLASS LIST BEING SCANNED\n         BO    E014NXTC            YES, GET NEXT CLASS\n         B     E014RC12            NO,  RETURN WITH NO JQE FOUND\n***********************************************************************\n*                                                                     *\n*        CHECK FOR ACTIVE OR HELD JOB                                 *\n*                                                                     *\n***********************************************************************\nE014CK1  AL    R6,$JOBQPTR         CALCULATE JQE ADDRESS\n         TM    JQETYPE,$XEQ        IS QUEUE TYPE XEQ?\n         BNO   E014NXTQ            NO, BYPASS\n         CLI   JQETYPE,$XEQ        JOB ON CONVERSION QUEUE\n         BE    E014NXTQ            YES, BYPASS\n         TM    JQEFLAG1,JQE1HLDA+JQE1HLD1+JQE1HLD2+JQE1BUSY\n         BNZ   E014NXTQ            BYPASS IF HELD OR ACTIVE\n         TM    JQEFLAG4,JQE4CAN    IS FORCE PURGE FLAG ON\n         BO    E014NXTQ            YES, BYPASS\n         TM    JQEXFLG2,JQEXUHLD   JOB ON USER HOLD\n         BO    E014NXTQ            YES, BYPASS\n         CLI   JQETYPE,$XMIT       JOB IS ON NJE TRANSMISSION QUEUE\n         BE    E014NXTQ            YES, BYPASS\n         TM    JQEXFLG2,JQEXWSET   JOB AWAITING SETUP\n         BO    E014NXTQ            YES, BYPASS\n***********************************************************************\n*                                                                     *\n*        CHECK THAT ALL SPOOLS FOR THIS JOB ARE ONLINE                *\n*                                                                     *\n***********************************************************************\nE014CK2  LH    R15,$JQEMSKL        GET JQE SPOOL MASK LENGTH-1\n         EX    R15,MBJQEMVC        GET SPOOLS USED BY THIS JOB\n         NC    $SPMSKWA,$SPLSLCT   'AND' WITH QUALIFYING SPOOLS\n         EX    R15,MBJQECLC        ALL REQUIRED SPOOLS MOUNTED\n         BNE   E014NXTQ            NO, BYPASS\n***********************************************************************\n*                                                                     *\n*        CHECK FOR AFFINITY AND INDEPENDENT MODE                      *\n*                                                                     *\n***********************************************************************\nE014CK3  TM    $STATUS,$INDMODE    IS THE CPU IN INDEPENDENT MODE\n         BO    E014CK4             YES, GO CHECK THE JQE\n         TM    JQEFLAG2,JQE2IND    IS THE JOB IN INDEPENDENT MODE\n         BO    E014NXTQ            YES, BYPASS THIS ONE\n         B     E014CK5             NO,  GO CHECK AFFINITY\nE014CK4  TM    JQEFLAG2,JQE2IND    IS THE JOB IN INDEPENDENT MODE\n         BZ    E014NXTQ            NO, BYPASS THIS ONE\nE014CK5  SLR   R15,R15             CLEAR R15 FOR IC\n         IC    R15,$SIDAFF         GET THE SYSTEM ID (CAN BE 1-7)\n         EX    R15,MBTSTAFF        MAY JOB RUN ON THIS SYSTEM\n         BZ    E014NXTQ            NO, BYPASS THIS ONE\n***********************************************************************\n*                                                                     *\n*        CHECK FOR RESOURCE ROUTINE BITS                              *\n*                                                                     *\n***********************************************************************\nE014CK6  L     R15,$AQSE           LOAD ADDRESS OF OUR QSE\n         ICM   R15,B'1111',QSERESTB-QSE(R15) LOAD RESOURCE BITS\n         N     R15,JQERESRT        COMBINE WITH BITS FOR THE JOB\n         C     R15,JQERESRT        SEE IF CHANGED\n         BNE   E014NXTQ            YES, INSUFFICIENT RESOURCES\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        CHECK FOR THREAD/EXCLUDE RESTRICTIONS                        *\n*                                                                     *\n***********************************************************************\nE014DEP  TM    JQEXFLG2,JQEXTHRD+JQEXXCLU JOB HAVE THREAD OR EXCLUDE\n         BZ    E014RC08            NO. USE THIS JOB\n         SLR   R8,R8               ZERO THE QUEUE OFFSET\n         B     E014DEP2            GO PROCESS THE FIRST QUEUE\n***********************************************************************\n*                                                                     *\n*        POINT TO NEXT QUEUE ENTRY                                    *\n*                                                                     *\n***********************************************************************\nE014DEP1 LA    R8,$JQHEADL(R8)     POINT TO NEXT QUEUE\n         LA    R1,$JQTYPES*$JQHEADL CALCULATE END OF QUEUES\n         CLR   R8,R1               SEE IF END OF QUEUES\n         BNL   E014RC08            YES, NO THREAD/EXCLUDE, GO JQE\nE014DEP2 LA    R1,$JQHEADS-(JQENEXT-JQE)(R8) POINT TO FIRST IN QUEUE\n***********************************************************************\n*                                                                     *\n*        POINT TO NEXT JQE IN CURRENT EXECUTION QUEUE                 *\n*                                                                     *\n***********************************************************************\nE014DEP3 L     R1,JQENEXT-JQE(R1)  GET OFFSET OF FIRST/NEXT JQE\n         N     R1,$ZEROFFF         CLEAR THE HIGH ORDER BYPE\n         BZ    E014DEP1            ZERO, END OF QUEUE, GO TO NEXT\n         AL    R1,$JOBQPTR         CHANGE JQE OFFSET TO ACTUAL ADDRESS\n         CLI   JQETYPE-JQE(R1),$XEQ IS THIS THE CONVERSION QUEUE\n         BE    E014DEP3            YES, GO GET NEXT JQE\n         TM    JQETYPE-JQE(R1),$XEQ IS THIS THE $XEQ QUEUE\n         BNO   E014DEP3            NO, GO GET NEXT JQE\n         TM    JQEFLAG1-JQE(R1),JQE1BUSY IS THIS JOB ACTIVE\n         BZ    E014DEP3            NO, GET NEXT JQE\n         CLR   R6,R1               IS IT OUR JQE?\n         BE    E014DEP3            YES, GO GET NEXT JQE\n***********************************************************************\n*                                                                     *\n*        CHECK FOR THREAD CONTROL                                     *\n*                                                                     *\n***********************************************************************\nE014THRD TM    JQEXFLG2,JQEXTHRD   DID JOB USE THREAD\n         BZ    E014EXCL            NO. TEST FOR EXCLUDE\n         CLC   JQEXTHRN(8),JQEJNAME-JQE(R1) THREAD NAME = JOB NAME?\n         BE    E014NXTQ            YES. DON'T SELECT THIS JQE\n         TM    JQEXFLG2-JQE(R1),JQEXTHRD DID OTHER JOB USE THREAD\n         BZ    E014EXCL            NO. TRY EXCLUDE\n         CLC   JQEXTHRN(8),JQEXTHRN-JQE(R1) IS THREAD NAME EQUAL\n         BE    E014NXTQ            YES. DON'T SELECT THIS JQE\n***********************************************************************\n*                                                                     *\n*        CHECK FOR EXCLUDE CONTROL                                    *\n*                                                                     *\n***********************************************************************\nE014EXCL TM    JQEXFLG2,JQEXXCLU   DID JOB USE EXCLUDE?\n         BZ    E014DEP3            NO. GET ANOTHER EXECUTING JQE\n         CLC   JQEXEXCN(8),JQEJNAME-JQE(R1) EXCLUDE NAME = JOB NAME?\n         BE    E014NXTQ            YES. DON'T SELECT THIS JQE\n         TM    JQEXFLG2-JQE(R1),JQEXTHRD DID OTHER JOB USE THREAD\n         BZ    E014DEP3            NO. GET ANOTHER EXECUTING JQE\n         CLC   JQEXEXCN(8),JQEXTHRN-JQE(R1) EXCLUDE NAME = THREAD NAME\n         BE    E014NXTQ            YES. DON'T SELECT THIS JQE\n         B     E014DEP3            GET ANOTHER EXECUTING JQE\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - USE THE JQE PROVIDED                               *\n*        RC = 12 - NO JQE WAS FOUND                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nE014RC00 LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nE014RC04 LA    R15,4               SET RETURN CODE TO 4\n         $RETURN RC=(R15)          RETURN TO JES2\nE014RC08 ST    R6,QGTJQE           PLACE JQE ADDRESS IN $QGET LIST\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\nE014RC12 LA    R15,12              SET RETURN CODE TO 12\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n***********************************************************************\n*                                                                     *\n*        E X I T    R O U T I N E    C O N S T A N T S                *\n*                                                                     *\n***********************************************************************\n         LTORG                    EXPAND LITERAL POOL HERE\n         SPACE 1\nMBJQEMVC MVC   $SPMSKWA(*-*),JQESUMSK  EXECUTED INSTRUCTION\nMBJQECLC CLC   $SPMSKWA(*-*),JQESUMSK  EXECUTED INSTRUCTION\nMBTSTAFF TM    JQEFLAG2,*-*       EXECUTED INSTRUCTION\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JESTABLE": {"ttr": 7432, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "JESTABLE TITLE 'BUILD JES2 JOBNAME/ROOM/PGMR NAME TABLE'\n***********************************************************************\n*                                                                     *\n*        THIS PROGRAM WILL BUILD A JOBNAME/ROOM/PGMR NAME TABLE       *\n*        IN CSA TO BE USED BY JES2 TO SET ROOM AND/OR PROGRAMMER      *\n*        NAME VALUES FOR STARTED TASKS AND TSO LOGONS WHICH DO        *\n*        NOT NORMALLY PROVIDE THIS INFORMATION TO JES2.  THIS         *\n*        TABLE WILL BE USED BY THE PRINT/PUNCH SEPARATOR EXIT         *\n*        (EXIT1) TO PRINT THE APPROPRIATE PROGRAMMER NAME AND         *\n*        BIN NUMBER ON THE JOB SEPARATOR PAGE FOR OUTPUT FROM         *\n*        STARTED TASKS AND TSO USERS.                                 *\n*                                                                     *\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                  BASE REGISTER\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n***********************************************************************\n*                                                                     *\n*        START OF PROGRAM                                             *\n*                                                                     *\n***********************************************************************\nJESTABLE CSECT\n         USING JESTABLE,R12        SET PROGRAM ADDRESSABILITY\n         SAVE  (14,12)             SAVE REGISTERS\n         LR    R12,R15             INITIALIZE BASE REG WITH ENTRY POINT\n         LR    R15,R13             SAVE CALLING'S SAVE AREA ADDR\n         LA    R13,NEWSAVE         LOAD ADDR OF NEW SAVE AREA\n         ST    R13,8(R15)          STORE NEW SAVE ADDR IN OLD\n         ST    R15,4(R13)          STORE OLD SAVE ADDR IN NEW\n***********************************************************************\n*        GET STORAGE FOR TABLE WORK AREA                              *\n***********************************************************************\n         L     R0,GETSIZE          LOAD SUBPOOL AND SIZE OF AREA\n         GETMAIN R,LV=(0)          GET WORK AREA\n         LR    R2,R1               SAVE GETMAINED ADDRESS\n         ST    R2,GETMAIN          SAVE GETMAINED ADDRESS\n         MVC   0(4,R2),GETSIZE     SAVE GETMAIN PARM IN TBL PREFIX\n         L     R4,GETSIZE          LOAD SIZE OF WORK AREA\n         LA    R2,8(R2)            INCREMENT PAST PREFIX\n         LA    R4,0(R4)            CLEAR HIGH ORDER BYTE\n         SH    R4,=H'8'            SUBTRACT 8 FOR LENGTH OF PREFIX\n         SRDL  R4,32               SHIFT TO ODD REG OF PAIR\n         D     R4,=F'32'           DIVIDE BY LENGTH OF EACH ENTRY\n         ST    R5,TBLENTS          SAVE MAX NUMBER OF TABLE ENTRIES\n         SLR   R3,R3               SET NUMBER OF TABLE ENTRIES TO ZERO\n***********************************************************************\n*        OPEN INPUT FILE                                              *\n***********************************************************************\n         OPEN  (SYSIN,(INPUT))     OPEN INPUT FILE\n***********************************************************************\n*        READ INPUT FILE                                              *\n*                                                                     *\n*        1)  MOVE FIRST 32 CHARACTERS IN INPUT RECORD TO TABLE        *\n*        2)  KEEP COUNT OF ENTRIES                                    *\n*        3)  AT END, SAVE ENTRY COUNT IN TABLE PREFIX                 *\n*                                                                     *\n***********************************************************************\nREAD     GET   SYSIN               READ INPUT FILE\n         LTR   R5,R5               TEST NUMBER OF ENTRIES LEFT\n         BZ    ERROR1              ZERO, ERROR\n         MVC   0(32,R2),0(R1)      SAVE FIRST 32 CHARACTERS OF RECORD\n         LA    R2,32(,R2)          INCREMENT TO NEXT TABLE ENTRY\n         LA    R3,1(,R3)           ADD 1 TO ENTRY COUNT\n         BCTR  R5,0                REDUCE ENTRIES LEFT COUNT\n         B     READ                GO READ ANOTHER INPUT RECORD\nEOF      L     R2,GETMAIN          LOAD START OF WORK AREA\n         ST    R3,4(R2)            SAVE ENTRY COUNT IN PREFIX\n***********************************************************************\n*        SORT THE TABLE ACCORDING TO THE JOBNAME                      *\n*        WHICH IS THE FIRST 8 CHARACTERS IN THE TABLE                 *\n***********************************************************************\nSORT     L     R2,GETMAIN          LOAD START OF TABLE\n         ICM   R3,15,4(R2)         LOAD TABLE ENTRY COUNT\n         BZ    ERROR2              ZERO, NO ENTRIES\n         LA    R2,8(,R2)           POINT TO FIRST ENTRY IN TABLE\n         LR    R4,R3               SAVE ENTRY COUNT\n         BCTR  R4,0                MAKE COUNT RELATIVE TO ZERO\n         MH    R4,=H'32'           MULTIPLY BY LENGTH OF EACH ENTRY\n         AR    R4,R2               SET ADDRESS OF LAST ENTRY\n         LR    R5,R2               SET FLOATING ENTRY\nSORT1    CLC   0(08,R5),0(R2)      COMPARE THIS ENTRY TO LOW ENTRY\n         BNL   SORT2               NOT NEW LOW, BRANCH\n         MVC   SAVEENT(32),0(R2)   SAVE OLD LOW ENTRY\n         MVC   0(32,R2),0(R5)      SWAP THIS ENTRY\n         MVC   0(32,R5),SAVEENT        WITH THE OLD LOW ENTRY\nSORT2    LA    R5,32(,R5)          INCREMENT TO NEXT TABLE ENTRY\n         CR    R4,R5               SEE IF END OF TABLE\n         BNL   SORT1               NO, LOOP\n         LA    R2,32(,R2)          INCREMENT TO NEXT LOW TABLE ENTRY\n         LR    R5,R2               SET FLOATING ENTRY ADDRESS\n         CR    R4,R2               SEE IF END OF TABLE\n         BH    SORT2               NO, LOOP\n***********************************************************************\n*        GET THE EXACT AMOUNT OF CSA STORAGE TO CONTAIN THE           *\n*        TABLE WHICH WE HAVE JUST SORTED.                             *\n***********************************************************************\nENDSORT  L     R2,GETMAIN          LOAD ADDRESS OF WORK AREA\n         L     R3,4(R2)            LOAD NUMBER OF ENTRIES\n         MH    R3,=H'32'           MULTIPLY BY LENGTH OF EACH ENTRY\n         LA    R3,8(,R3)           ADD LENGTH OF PREFIX\n         STCM  R3,7,CSASIZE+1      SAVE CSA LENGTH\n         L     R0,CSASIZE          LOAD CSA GETMAIN PARM\nGETCSA   GETMAIN R,LV=(0)          GET CSA TABLE AREA\n         LR    R6,R1               SAVE CSA TABLE ADDRESS\n***********************************************************************\n*        MOVE OUR WORK TABLE TO CSA.  DO NOT FORGET TO SAVE THE       *\n*        GETMAIN PARM IN THE PREFIX IN ORDER TO FREEMAIN THE AREA     *\n*        IF THE TABLE IS RELOADED.                                    *\n***********************************************************************\n         LR    R2,R6               SET ADDRESS OF 'TO' AREA\n         L     R3,CSASIZE          LOAD SIZE OF TABLE\n         LA    R3,0(,R3)           SET SIZE OF 'TO' AREA\n         L     R4,GETMAIN          SET ADDRESS OF 'FROM' AREA\n         LR    R5,R3               SET SIZE OF 'FROM' AREA\n         MVCL  R2,R4               MOVE OUR TABLE TO CSA\n         MVC   0(4,R6),CSASIZE     MOVE GETMAIN PARM TO CSA TBL PREFIX\n***********************************************************************\n*        SEE IF THE CVT USER FIELD ALREADY HAS A POINTER TO A         *\n*        PREVIOUSLY LOADED TABLE.  IF SO, SWAP OUR WORK NEW CSA       *\n*        TABLE ADDRESS FOR THE OLD TABLE, WAIT A WHILE FOR ANY        *\n*        JES2 PROCESSING ON THE OLD TABLE TO COMPLETE, AND THEN       *\n*        FREEMAIN THE OLD CSA TABLE.  UNLESS YOU ARE X/A, THERE       *\n*        IS NEVER ENOUGH CSA TO GO WASTE.                             *\n***********************************************************************\n         L     R2,16               LOAD CVT ADDRESS\n         USING CVT,R2              SET ADDRESSABILITY TO CVT\n         MODESET KEY=ZERO          GET INTO KEY ZERO\n         L     R3,CVTUSER          LOAD ADDRESS (IF ANY) OF PREV TABLE\n         ST    R6,CVTUSER          SAVE NEW CSA TABLE ADDRESS IN CVT\n         MODESET KEY=NZERO         GET OUT OF KEY ZERO\n         LTR   R3,R3               TEST OLD TABLE ADDRESS\n         BZ    CLOSE               ZERO, FIRST TIME\n         STIMER WAIT,BINTVL=ABIT   WAIT A BIT\n         L     R0,0(R3)            LOAD FREEMAIN PARM IN PREFIX\n         FREEMAIN R,LV=(0),A=(R3)  FREEMAIN OLD CSA TABLE AREA\nCLOSE    CLOSE (SYSIN)             CLOSE INPUT FILES\n         L     R13,4(R13)          RESTORE ORIG SAVE\n         RETURN (14,12),RC=0       RETURN\n         EJECT\n***********************************************************************\n*        ERROR ROUTINES                                               *\n***********************************************************************\n         SPACE 3\nERROR1   WTO   'BLDJ001E MAXIMUM NUMBER OF JOBNAME TABLE ENTRIES EXCEEDX\n               ED - JOB ABORTED',ROUTCDE=2\n         ABEND 001,DUMP\n         SPACE 3\nERROR2   WTO   'BLDJ002E NO INPUT JOBNAME ENTRIES SUPPLIED - JOB ABORTEX\n               D',ROUTCDE=2\n         ABEND 001,DUMP\n         EJECT\n         LTORG\nGETSIZE  DS    0F                  GETMAIN PARM FOR WORK AREA\n         DC    AL1(0),AL3(40*1024) SUBPOOL 0 - 40K\nCSASIZE  DS    0F                  GETMAIN PARM FOR CSA STORAGE\n         DC    AL1(241),AL3(0)     SUBPOOL 241\nGETMAIN  DS    F                   ADDRESS OF GETMAINED WORK AREA\nTBLENTS  DS    F                   MAXIMUM TBL ENTRIES IN WORK AREA\nSAVEENT  DS    CL32                WORK AREA FOR CORE SORT\nNEWSAVE  DS    18F\nABIT     DC    A(1500)             STIMER INTERVAL (15.00 SECONDS)\n         PRINT NOGEN\nSYSIN    DCB   DDNAME=SYSIN,MACRF=GL,DSORG=PS,EODAD=EOF\n         PRINT GEN\n         EJECT\n         CVT   DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JESXIT17": {"ttr": 7681, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 BSC RJE SIGNON/SIGNOFF EXIT'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 1.3.4  OR SP 1.3.6                      *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED EXAMINE ALL SIGNON        *\n*        CARDS AND ISSUE A CALL TO ACF2 TO VALIDATE THE PASSWORD      *\n*        ON THE SIGNON CARD.  IF THE PASSWORD DOES NOT MATCH,         *\n*        THE SIGNON ATTEMPT IS TERMINATED.  IF THE PASSWORD           *\n*        MATCHES, THE PASSWORD FIELD IN THE SIGNON CARD WILL BE       *\n*        BLANKED AND NORMAL SIGNON PROCESSING ALLOWED TO CONTINUE.    *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST COMPUTER SERVICES                      *\n*                        420 BRUSHY MOUNTAIN ROAD                     *\n*                        WILKESBORO, N.C. 28697                       *\n*                        (919) 651-5414                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*            M A C R O S   U S E D   I N   J E S X I T 1 7            *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $DCT         SYS1.HASPSRC                               *\n*        04)  $ENTRY       SYS1.HASPSRC                               *\n*        05)  $HASPEQU     SYS1.HASPSRC                               *\n*        06)  $HASPGBL     SYS1.HASPSRC                               *\n*        07)  $HCT         SYS1.HASPSRC                               *\n*        08)  $JCT         SYS1.HASPSRC                               *\n*        09)  $JQE         SYS1.HASPSRC                               *\n*        10)  $MIT         SYS1.HASPSRC                               *\n*        11)  $MSG         SYS1.HASPSRC                               *\n*        12)  $MODEND      SYS1.HASPSRC                               *\n*        13)  $MODULE      SYS1.HASPSRC                               *\n*        14)  $PCE         SYS1.HASPSRC                               *\n*        15)  $SAVE        SYS1.HASPSRC                               *\n*        16)  $RETURN      SYS1.HASPSRC                               *\n*        17)  $WTO         SYS1.HASPSRC                               *\n*        18)  ACCVT        SYSP.ACFMAC                                *\n*        19)  ACFINCVT     SYSP.ACFMAC                                *\n*        20)  ACFSVC       SYSP.ACFMAC                                *\n*        21)  FREEMAIN     SYS1.MACLIB                                *\n*        22)  GETMAIN      SYS1.MACLIB                                *\n*        23)  IFGRPL       SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       1K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJESXIT17 $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 BSC RJE SIGNON/SIGNOFF EXIT',               X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               RPL,                GENERATE MVS  RPL DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HCT,               GENERATE HASP SVT DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $PCE                GENERATE HASP PCE DSECT\n         TITLE 'JES2 BSC RJE SIGNON/SIGNOFF EXIT'\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nEXIT17   $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLERS REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R0  - A CODE INDICATING THE ENTRY REASON                     *\n*              0 - INDICATES SIGN-ON BEFORE PARM PROCESSING           *\n*              4 - INDICATES SIGN-ON AFTER PARM PROCESSING            *\n*              8 - INDICATES SIGN-OFF PROCESSING                      *\n*        R1  - THE ADDRESS OF A 5 WORD PARAMETER LIST                 *\n*              WORD 1 - ADDRESS OF RAT (R0=0) OR                      *\n*                     - ADDRESS OF RAT ENTRY (R0=4 OR 8)              *\n*              WORD 2 - ADDRESS OF THE LINE DCT                       *\n*              WORD 3 - ZERO                                          *\n*              WORD 4 - ADDRESS OF CARD IMAGE (R0=0)                  *\n*              WORD 5 - LENGTH OF CARD IMAGE  (R0=0)  ALWAYS 80       *\n*        R11 - ADDRESS OF THE HCT                                     *\n*        R13 - ADDRESS OF LINE MANAGER OR REMOTE READER PCE           *\n*        R14 - RETURN ADDRESS                                         *\n*        R15 - ENTRY ADDRESS                                          *\n*                                                                     *\n***********************************************************************\n         CH    R0,=H'0'            SEE IF SIGNON BEFORE PARM PROCESS\n         BNE   RETURN0             NO, GET OUT\n         SPACE 3\n         L     R2,12(R1)           LOAD ADDRESS OF CARD IMAGE\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        GET A WORK AREA FOR THE EXIT                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LA    R0,WORKLEN          LOAD SIZE OF WORK AREA\n         GETMAIN R,LV=(0)          GET A WORK AREA\n         LR    R3,R1               SAVE BUFFER ADDRESS\n         USING WORKAREA,R3         SET ADDRESSABILITY TO BUFFER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BUILD ACF2 PARAMETER LIST                                    *\n*                                                                     *\n*        NOTE:                                                        *\n*                                                                     *\n*        THE LOGONID FIELD WILL BE THE REMOTE NAME ON THE             *\n*        SIGNON CARD.                                                 *\n*        THE PASSWORD WILL BE THE LINE PASSWORD STARTING IN           *\n*        COLUMN 25 OF THE SIGNON CARD.                                *\n*        THE SOURCE FIELD WILL BE THE EXIT NAME.  THE PSWD-VIO        *\n*        COUNT WILL BE INCREMENTED FOR INVALID PASSWORDS WHICH        *\n*        COULD RESULT IN A LOGONID BEING SUSPENDED.                   *\n*                                                                     *\n***********************************************************************\n         MVC   ACFRET,=F'16'       SET RETURN CODE TO 16\n         XC    ACVALD(ACVLEN),ACVALD CLEAR PARM LIST\n         USING ACCVT,R4            SET ADDRESSABILITY TO ACF CVT\n         ACFINCVT R4,NONE=ERROR1   GET THE ACF2 CVT ADDRESS\n         MVI   ACVFCN,X'01'        SET FUNCTION ID\n         MVI   ACVSFCN,ACVSVALD    SET SUB FUNCTION CODE\n         MVI   ACVCNTL,ACVCIPSD    COUNT VIOS\n         LA    R1,ACFMSG           LOAD ADDRESS OF ACF2 MSG AREA\n         ST    R1,ACVMSG           SAVE IN PARM LIST\n         MVC   ACVLID,15(R2)       SET LID EQUAL TO THE REMOTE ID\n         MVC   ACVPSWD,24(R2)      MOVE SIGNON PSWD1 TO PARM LIST\n         MVC   24(8,R2),=CL8' '    BLANK THE PASSWORD IN THE RECORD\n         MVC   ACVSRCE,=CL8'JESXIT17'  SET SOURCE FIELD TO EXIT NAME\n         MVC   ACVJOBV,=CL8'JES2'  SET JOBNAME TO JES2\n         MVC   ACVSLID,=CL8' '     BLANK SUBMITTERS LID ????\n         MVC   ACVAPROG,=CL8' '    CLEAR PROGRAM NAME\n         LA    R1,LIDAREA          LOAD ADDRESS OF 512 BYTE LID AREA\n         ST    R1,ACVRECB          SAVE IN PARM LIST\n         MVC   ACVRECL,=F'512'     SET LENGTH OF AREA IN PARM LIST\n         CLI   ACVPSWD,C' '        SEE IF A PASSWORD WAS SUPPLIED\n         BNE   ACFCALL             NO, BRANCH\n         OI    ACVCNTL,ACVCNPSD    TURN ON NO PASSWORD SUPPLIED IND\nACFCALL  ACFSVC ACVALD,TYPE=A,CVT=HAVE,NONE=ERROR2 CALL ACF/2\n         ST    R15,ACFRET          SAVE RETURN CODE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ERROR3              NOT ZERO, BAD, ERROR\n***********************************************************************\n*                                                                     *\n*        FREE THE WORK AREA AND RETURN WITH THE APPROPRIATE           *\n*        RETURN CODE.                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nEXIT     L     R4,ACFRET           SAVE THE ACF2 RETURN CODE\n         LA    R0,WORKLEN          LOAD LENGTH OF WORK AREA\n         LR    R1,R3               SET WORK AREA ADDRESS\n         FREEMAIN R,LV=(0),A=(1)   FREE THE BUFFER\n         LTR   R4,R4               TEST THE RETURN CODE\n         BZ    RETURN0             ZERO, GOOD, CONTINUE\n         B     RETURN8             NOT ZERO, BAD, TERMINATE SIGN-ON\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE NORMAL SIGN-ON PROCESSING                *\n*        RC = 12 - BYPASS SYNTAX BUT NOT PASSWORD PROCESSING          *\n*        RC = 16 - BYPASS BOTH SYNTAX AND PASSWORD PROCESSING         *\n*                                                                     *\n***********************************************************************\nRETURN0  DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nRETURN8  DS    0H\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n***********************************************************************\n*                                                                     *\n*                      ERROR ROUTINES                                 *\n*                                                                     *\n***********************************************************************\n               SPACE 3\nERROR1   LA    R1,MSG1             LOAD ADDRESS OF MESSAGE\n         LA    R0,L'MSG1           LOAD LENGTH OF MESSAGE\n         $WTO  (R1),(R0),JOB=NO,CMB=NO,WAIT=NO,ROUTE=$MAIN,UCM=NO\n               SPACE 3\n         B     EXIT                GET OUT\nERROR2   LA    R1,MSG2             LOAD ADDRESS OF MESSAGE\n         LA    R0,L'MSG2           LOAD LENGTH OF MESSAGE\n         $WTO  (R1),(R0),JOB=NO,CMB=NO,WAIT=NO,ROUTE=$MAIN,UCM=NO\n         B     EXIT                GET OUT\nERROR3   LA    R1,MSG3             LOAD ADDRESS OF MESSAGE\n         LA    R0,L'MSG3           LOAD LENGTH OF MESSAGE\n         $WTO  (R1),(R0),JOB=NO,CMB=NO,WAIT=NO,ROUTE=$MAIN,UCM=NO\n         MVC   $WTOWRK(L'MSG4),MSG4 INITIALIZE MSG4 WORK AREA\n         MVC   $WTOWRK+2(124),ACFMSG+4 SET ACF2 MESSAGE\n         LA    R1,$WTOWRK          LOAD ADDRESS OF MESSAGE\n         LA    R0,L'MSG4           LOAD LENGTH OF MESSAGE\n         $WTO  (R1),(R0),JOB=NO,CMB=NO,WAIT=NO,ROUTE=$MAIN,UCM=NO\n         B     EXIT                GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                   CONSTANTS USED IN THIS EXIT                       *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LTORG\n         SPACE 3\nMSG1     $MSG  910,'REMOTE SIGNON DENIED - UNABLE TO FIND ACF2 CVT'\nMSG2     $MSG  911,'REMOTE SIGNON DENIED - ACF2 IS NOT ACTIVE'\nMSG3     $MSG  912,'REMOTE SIGNON DENIED - ACCESS DENIED BY ACF2'\nMSG4     $MSG  913,'123456789 123456789 123456789 123456789 123456789 1X\n               23456789 123456789 123456789 123456789 123456789 1234567X\n               89 123456789 1234'\n         EJECT\n         $MODEND\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREA                                            *\n*                                                                     *\n***********************************************************************\nWORKAREA DSECT\nACFRET   DS    F                   RETURN CODE FROM ACF2\nACFMSG   DS    CL128               ACF/2 MESSAGE AREA\nLIDAREA  DS    CL512               ACF/2 LID AREA\n         ACVALD DSECT=NO           ACF2 WORK AREA\n$WTOWRK  DS    CL130               $WTO WORK AREA\nWORKLEN  EQU   *-WORKAREA          LENGTH OF WORK AREA\n         EJECT\n         ACCVT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JESXIT21": {"ttr": 7686, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 SMF RECORD EXIT'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 1.3.4  OR SP 1.3.6                      *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED EXAMINE AND/OR            *\n*        MODIFY ALL JES2 SMF RECORDS.  THE SMF TYPE 57 RECORD         *\n*        IS WRITTEN FOR EACH NJE SYSOUT TRANSMISSION WHICH            *\n*        OCCURS.  THE ONLY PROBLEM IS THAT THE JOBNAME IS NOT         *\n*        CONTAINED ANYWHERE IN THE RECORD.  THIS EXIT WILL PUT        *\n*        THE JOBNAME INTO THE TYPE 57 RECORD IN THE NETACCT           *\n*        FIELD WHICH IS AN EIGHT BYTE FIELD WHICH IS UNUSED           *\n*        BY OUR INSTALLATION.                                         *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST COMPUTER SERVICES                      *\n*                        420 BRUSHY MOUNTAIN ROAD                     *\n*                        WILKESBORO, N.C. 28697                       *\n*                        (919) 651-5414                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*            M A C R O S   U S E D   I N   J E S X I T 1 7            *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $ENTRY       SYS1.HASPSRC                               *\n*        04)  $HASPEQU     SYS1.HASPSRC                               *\n*        05)  $HASPGBL     SYS1.HASPSRC                               *\n*        06)  $HCT         SYS1.HASPSRC                               *\n*        07)  $JCT         SYS1.HASPSRC                               *\n*        08)  $JQE         SYS1.HASPSRC                               *\n*        09)  $MIT         SYS1.HASPSRC                               *\n*        10)  $MODEND      SYS1.HASPSRC                               *\n*        11)  $MODULE      SYS1.HASPSRC                               *\n*        12)  $PCE         SYS1.HASPSRC                               *\n*        13)  $SAVE        SYS1.HASPSRC                               *\n*        14)  $SMF         SYS1.HASPSRC                               *\n*        15)  $RETURN      SYS1.HASPSRC                               *\n*        16)  IFGRPL       SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       1K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJESXIT21 $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 SMF RECORD EXIT',                           X\n               RPL,                GENERATE MVS  RPL DSECT             X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP SVT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $SMF,               GENERATE HASP SMF BUFFER DSECT      X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $PCE                GENERATE HASP PCE DSECT\n         TITLE 'JES2 SMF RECORD EXIT'\n         PRINT OFF\n         AIF   ('&VERSION' NE 'SP 1.3.6' AND                           X\n               '&VERSION' NE 'SP 2.1.5').VEREND\n         PRINT ON\n***********************************************************************\n*                                                                     *\n*        EQUATED VARIABLES FOR SP 1.3.6 OR SP 2.1.5                   *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nJQEDSECT EQU   JQE\nSMFDSECT EQU   SMF\nSMFHDRTY EQU   SMF57RTY\n         SPACE 3\n         USING PCE,R13             SET ADDRESSABILITY TO PCE\n.VEREND  ANOP\n         PRINT ON\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nEXIT21   $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLERS REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R0  - ZERO                                                   *\n*        R1  - SMF BUFFER ADDRESS                                     *\n*        R11 - ADDRESS OF THE HCT                                     *\n*        R13 - ADDRESS OF THE CALLER'S PCE                            *\n*        R14 - RETURN ADDRESS                                         *\n*        R15 - ENTRY ADDRESS                                          *\n*                                                                     *\n***********************************************************************\n         USING SMFDSECT,R1         SET ADDRESSABILITY TO SMF BUFFER\n         CLI   SMFHDRTY,57         SEE IF TYPE 57 RECORD\n         BNE   RETURN0             NO, JUST GET OUT\n         MVC   SMF57ACN,=CL8' '    BLANK THE NETWORK ACCT FIELD\n         ICM   R2,15,PCEJQE        LOAD JQE ADDRESS FROM PCE\n         USING JQEDSECT,R2         SET ADDRESSABILITY TO JQE\n         BZ    RETURN0             JQE ADDRESS ZERO, EXIT\n         MVC   SMF57ACN,JQEJNAME   MOVE JOBNAME TO NETWORK ACCT FIELD\n         B     RETURN0             GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE NORMAL SMF QUEUE PROCESSING              *\n*                                                                     *\n***********************************************************************\nRETURN0  DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nRETURN4  DS    0H\n         LA    R15,4               SET RETURN CODE TO 4\n         $RETURN RC=(R15)          RETURN TO JES2\nRETURN8  DS    0H\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "J001$SP": {"ttr": 7689, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 EXIT 1 PRINT/PUNCH SEPARATOR EXIT'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED TO REPLACE THE IBM        *\n*        STANDARD PRINT AND PUNCH SEPARATOR ROUTINES.  THE PUNCH      *\n*        SEPARATOR LACE CARD AND BLANK CARD IS PRODUCED EXACTLY       *\n*        AS IBM PRODUCED THEM.  THE PRINT SEPARATOR WILL SUPPLY       *\n*        EXTRA INFORMATION WHICH WILL BE SUPPLIED BY WHAT IS          *\n*        CALLED A JOB INFORMATION TASK WHICH WILL SUPPLY EXTRA        *\n*        DISTRIBUTION INFORMATION ON THE BASIS OF JOBNAME AND         *\n*        OUTPUT GROUP NAME.  THE USE OF SMALLER BLOCK LETTERS         *\n*        (5 X 7) WILL ALLOW UP TO 19 CHARACTERS ACROSS THE PAGE.      *\n*        ONLY AS MANY LINES OF BLOCK LETTERS WILL BE PRODUCED         *\n*        AS THERE IS ROOM FOR AS DEFINED BY THE NUMBER OF LINES       *\n*        ON THE LOCAL OR REMOTE SEPARATOR IN THE PRINTDEF SEPLINE     *\n*        AND RSEPLINE PARAMETERS.                                     *\n*                                                                     *\n*        STARTED TASKS AND TSO LOGONS DO NOT NORMALLY PROVIDE         *\n*        INFORMATION SUCH AS PROGRAMMER NAME OR BIN NUMBER.           *\n*        THIS EXIT WILL REQUEST THIS INFORMATION FROM THE JOB         *\n*        INFORMATION TASK.  IF AN ENTRY IS NOT FOUND FOR THESE        *\n*        JOBS IN THE VSAM FILE SEARCHED BY THE JOB INFORMATION        *\n*        TASK, DEFAULT VALUES WILL BE SET.                            *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*                          KOMSTAR                                    *\n*                                                                     *\n*        SUPPORT EXISTS IN THIS EXIT FOR ONLINE KOMSTAR (KODAK).      *\n*        THE DEVICE NAMES ARE CHECKED FOR THOSE RESERVED FOR          *\n*        THIS DEVICE TYPE.  THE STANDARD HEADER AND TRAILER           *\n*        PAGES FOR THE KOMSTAR WILL BE BYPASSED AND BASED UPON THE    *\n*        SYSOUT CLASS OF THE DATA BEING PROCESSED, DIFFERENT          *\n*        ACTION MAY BE TAKEN IN THIS EXIT.                            *\n*                                                                     *\n*        SYSOUT CLASSES               ACTION                          *\n*                                                                     *\n*        Q           NO ACTION IS TAKEN BY THIS EXIT FOR ANY          *\n*                    ENTRY FOR THESE CLASSES.  THESE CLASSES ARE      *\n*                    RESERVED FOR OUTPUT WHICH IS DEBLOCKED           *\n*                    INFOLINK FORMATTED DATA.  THE KOMSTAR MUST       *\n*                    EMULATION MODE.                                  *\n*                                                                     *\n*        G           ONLY A TITLE RECORD IS SENT TO THE KOMSTAR       *\n*                    FOR THESE CLASSES.  THESE CLASSES ARE            *\n*                    RESERVED FOR OUTPUT FROM PME OR STARLINK1        *\n*                    WHICH REQUIRES NO SETUP FOR THE KOMSTAR        . *\n*                    RUNNING IN NATIVE MODE                           *\n*                                                                     *\n*        OTHERS      NATIVE COMMANDS TO SET HEADINGS FOR JOB          *\n*                    NAME, PROGRAMMER NAME, ROOM NUMBER, AND          *\n*                    DATE ARE ISSUED AT 'START' OR 'CONT'             *\n*                    SEPARATOR ENTRY AND A NATIVE COMMAND TO          *\n*                    EJECT THE FICHE AT 'END' SEPARATOR ENTRY.        *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    DATAGRAPHIX ARIS II / XL                         *\n*                                                                     *\n*        SUPPORT EXISTS IN THIS EXIT FOR ONLINE DATAGRAPHIX           *\n*        MICROFICHE UNITS.  CERTAIN DEVICE NAMES HAVE BEEN            *\n*        RESERVED FOR THE DATAGRAPHIX UNITS.  STANDARD                *\n*        HEADER AND TRAILER PAGES ARE BYPASSED, AND A SPECIAL         *\n*        PROCESSING SJOB RECORD WILL BE SENT TO THE PRINTER BASED     *\n*        UPON THE WRITER NAME FOR THE OUTPUT GROUP.  SPECIAL          *\n*        TITLE LINES WILL BE GENERATED AND SENT TO THE PRINTER TO     *\n*        ALLOW THE UNIT TO EXTRACT ANY DESIRED INFORMATION SUCH       *\n*        AS JOBNAME, JOB NUMBER, DATE, TIME, PROGRAMMER NAME AND      *\n*        BIN NUMBER.  THE DEFAULT PROCESS ROUTINE ON THE DEVICE       *\n*        WILL EXTRACT INFORMATION FROM THESE TITLE RECORDS TO         *\n*        GENERATE THE APPROPRIATE TITLES.                             *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*                XJCF SUPPORT FOR THE XEROX 9700                      *\n*                                                                     *\n*        SUPPORT EXISTS IN THIS EXIT TO UTILIZE THE XJCF PRODUCT      *\n*        FROM XENOS COMPUTER SYSTEMS TO SUPPORT THE XEROX 9700        *\n*        PAGE PRINTER.  THE SUPPORT IS GENERATED BY SETTING THE       *\n*        LOCAL ASSEMBLY VARIABLE &XJCF TO 'YES'.                      *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*               A S S E M B L Y     O P T I O N S                     *\n*                                                                     *\n*        SEVERAL ASSEMBLY OPTIONS ARE PROVIDED FOR EASE IN            *\n*        PROVIDING THE DESIRED NUMBER OF SEPARATORS ON THE            *\n*        START/CONT OR END SEPARATOR FOR BOTH LOCAL AND REMOTE        *\n*        DEVICES.                                                     *\n*                                                                     *\n*        THE DEFAULTS SET ARE AS FOLLOWS:                             *\n*                                                                     *\n*        NPRSEPSL (1) - NUMBER OF START/CONT PAGES FOR LOCAL PRTRS    *\n*        NPRSEPEL (1) - NUMBER OF END        PAGES FOR LOCAL PRTRS    *\n*        NPRSEPSR (1) - NUMBER OF START/CONT PAGES FOR REMOTE PRTRS   *\n*        NPRSEPER (1) - NUMBER OF END        PAGES FOR REMOTE PRTRS   *\n*        IPLINES  (0) - VALUE TO ADD TO $PRIDCT FOR IMPACT PRINTERS   *\n*                       TO ALLOW PRINTING ON THE PERFORATION.         *\n*        JIT          - GENERATE SUPPORT FOR THE JOB INFORMATION      *\n*                       TASK TO PROVIDE DISTRIBUTION INFORMATION.     *\n*                       THE VALUES SHOULD BE YES/NO.                  *\n*        UCC7         - GENERATE SUPPORT FOR THE UCC7 TASK WHICH      *\n*                       WILL DEMAND JOB NETWORKS AT END OF PRINT      *\n*                       PROCESSING.  THE VALUES SHOULD BE YES/NO.     *\n*        UJQE         - GENERATE SUPPORT FOR USER FIELDS WHICH        *\n*                       HAVE BEEN ADDED TO THE JQE - ESPECIALLY       *\n*                       THE TEST/PRODUCTION INDICATOR.                *\n*                       THE VALUES SHOULD BE YES/NO.                  *\n*        XJCF         - GENERATE XJCF SUPPORT FOR THE XEROX 9700      *\n*                       PRINTER.  THE VALUES SHOULD BE YES/NO.        *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        ALSO, TWO START/CONT JOB SEPARATOR PAGES WILL BE GENERATED   *\n*        WHENEVER A PRODUCTION JOB IS PROCESSED.  THIS ALLOWS ONE     *\n*        PAGE TO BE KEPT BY DISTRIBUTION.                             *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J 0 0 1 S E P            *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CALL        SYS1.HASPSRC                               *\n*        03)  $CAT         SYS1.HASPSRC                               *\n*        04)  $DCT         SYS1.HASPSRC                               *\n*        05)  $DTE         SYS1.HASPSRC                               *\n*        06)  $ENTRY       SYS1.HASPSRC                               *\n*        07)  $ERA         SYS1.HASPSRC                               *\n*        08)  $FCSDTE      SYS1.HASPSRC (USER)                        *\n*        09)  $FCSJITB     SYS1.HASPSRC (USER)                        *\n*        10)  $FCSUCT      SYS1.HASPSRC (USER)                        *\n*        11)  $FREEBUF     SYS1.HASPSRC                               *\n*        12)  $GETBUF      SYS1.HASPSRC                               *\n*        13)  $GETWORK     SYS1.HASPSRC                               *\n*        14)  $HASPEQU     SYS1.HASPSRC                               *\n*        15)  $HASPGBL     SYS1.HASPSRC                               *\n*        16)  $HCT         SYS1.HASPSRC                               *\n*        17)  $HFAME       SYS1.HASPSRC                               *\n*        18)  $JCT         SYS1.HASPSRC                               *\n*        19)  $JOE         SYS1.HASPSRC                               *\n*        120  $JQE         SYS1.HASPSRC                               *\n*        21)  $MIT         SYS1.HASPSRC                               *\n*        22)  $MODEND      SYS1.HASPSRC                               *\n*        23)  $MODULE      SYS1.HASPSRC                               *\n*        24)  $PADDR       SYS1.HASPSRC                               *\n*        25)  $PBLOCK      SYS1.HASPSRC                               *\n*        26)  $PCE         SYS1.HASPSRC                               *\n*        27)  $PDDB        SYS1.HASPSRC                               *\n*        28)  $PPPWORK     SYS1.HASPSRC                               *\n*        29)  $PRPUT       SYS1.HASPSRC                               *\n*        30)  $RDT         SYS1.HASPSRC                               *\n*        31)  $RETURN      SYS1.HASPSRC                               *\n*        32)  $SAVE        SYS1.HASPSRC                               *\n*        33)  $SEPPDIR     SYS1.HASPSRC                               *\n*        34)  $SCAT        SYS1.HASPSRC                               *\n*        35)  $SVT         SYS1.HASPSRC                               *\n*        36)  $SYSPARM     SYS1.HASPSRC                               *\n*        37)  $XECB        SYS1.HASPSRC                               *\n*        38)  CVT          SYS1.AMODGEN                               *\n*        39)  IFGRPL       SYS1.MACLIB                                *\n*        40)  TIME         SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       4K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ001$SP  $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 EXIT1 PRINT/PUNCH SEPARATOR EXIT',          X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $DTE,               GENERATE HASP DTE DSECT             X\n               $ERA,               GENERATE HASP ERA DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $HFAME,             GENERATE HASP FAME DSECT            X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $PDDB,              GENERATE HASP PDDB DSECT            X\n               $PPPWORK,           GENERATE HASP PPPWORK DSECT         X\n               $RDT,               GENERATE HASP RDT DSECT             X\n               $SCAT,              GENERATE HASP SCAT DSECT            X\n               $SVT,               GENERATE HASP SSVT DSECT            X\n               $XECB,              GENERATE HASP XECB DSECT            X\n               CVT,                GENERATE MVS CVT DSECT              X\n               RPL                 GENERATE MVS RPL DSECT\n         TITLE 'JES2 EXIT 1 PRINT/PUNCH SEPARATOR EXIT'\n***********************************************************************\n*                                                                     *\n*        USER ADDITION TO THE DTE                                     *\n*                                                                     *\n***********************************************************************\nDTE      DSECT\n         ORG   DTEWORK\n         DS    0CL2048             2048 BYTE EXTENSION\n         $FCSDTE ,                 MAP THE DTE EXTENSION AREA\nJ001$SP  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        USER CONTROL TABLE (UCT)                                     *\n*                                                                     *\n***********************************************************************\n         $FCSUCT ,                 MAP THE USER CONTROL TABLE\nJ001$SP  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        JOB INFORMATION TASK CONTROL BLOCK                           *\n*                                                                     *\n***********************************************************************\n         $FCSJITB ,                MAP THE JITB CONTROL BLOCK\nJ001$SP  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        WORK AREA USED BY THIS JES2 EXIT                             *\n*                                                                     *\n***********************************************************************\nHDRDSECT DSECT                     HASP HEADER DSECT\n         DS    CL(BUFSTART-BFPDSECT) *****  RESERVED BY JES2 *****\nDEVTYPE  DS    C                   DEVICE TYPE\nDEV3700  EQU   X'80'               XEROX 3700 DEVICE\nHDR      DS    0CL133\nHDRLEN   DS    AL1                 LENGTH OF PRINT LINE\nHDRFRAME DS    XL1                 PP1 FRAME CHARACTERS\nHDRCLASS DS    XL1                 PP2 SYSOUT CLASS\n         DS    X                   PP3 BLANK\nHDRFORM  DS    XL5                 PP4-8  FORM TYPE START/CONT/END\n         DS    X                   PP9  BLANK\nHDRNUM   DS    XL8                 PP10-17 JOB NUMBER\n         DS    X                   PP18 BLANK\nHDRNAME  DS    XL8                 PP19-26 JOB NAME\n         DS    X                   PP27 BLANK\nHDRJNAME DS    XL8                 PP28-35 JOE NAME\n         DS    X                   PP36 BLANK\nHDRJID1  DS    XL3                 PP37-39 JOE ID 1\n         DS    X                   PP40 BLANK\nHDRJID2  DS    XL3                 PP41-43 JOE ID 2\n         DS    X                   PP44 BLANK\nHDRJROUT DS    XL8                 PP45-52 JOE ROUTE\n         DS    X                   PP53 BLANK\nHDRPNAME DS    XL20                PP54-73 PROGRAMMER NAME\n         DS    X                   PP74 BLANK\nHDRRKEY  DS    XL4                 PP75-78 'ROOM'\n         DS    X                   PP79 BLANK\nHDRROOM  DS    XL4                 PP80-83 ROOM NUMBER\n         DS    X                   PP84 BLANK\n         DS    X                   PP85 BLANK\nHDRPTTN  DS    XL8                 PP86-93 HH.MM.SS\n         DS    X                   PP94 BLANK\nHDRAM    DS    XL2                 PP95-96 AM/PM\n         DS    X                   PP97 BLANK\nHDRDATE  DS    XL9                 PP98-106 DD MMM YY\n         DS    X                   PP107 BLANK\nHDRDNAME DS    XL8                 PP108-115 DEVICE NAME\n         DS    X                   PP116 BLANK\nHDRSYS   DS    XL4                 PP117-120 SYSTEM NAME\n         DS    X                   PP121 BLANK\nHDRFORMX DS    XL5                 PP122-126 FORM\n         DS    X                   PP127 BLANK\nHDRCLASX DS    X                   PP128  JOE CLASS\nHDRFRAMX DS    XL4                 PP129-132 FRAME CHARACTERS\nHDRLENTH EQU   *-HDR               LEN FOR CLEARING HEADER\n         ORG\nEXITWRK1 DS    D                   EXIT WORK AREA 1\nEXITWRK2 DS    D                   EXIT WORK AREA 2\nEXITWRK3 DS    D                   EXIT WORK AREA 3\nEXITWRK4 DS    F                   EXIT WORK AREA 4\nEXITWRK5 DS    D                   EXIT WORK AREA 5\nDBL      DS    D                   DOUBLE WORD WORK AREA\nSAVETBL  DS    12F                 AREA FOR COPY OF DATE TABLE\nFEB      EQU   SAVETBL+4,4         DATE TABLE ENTRY FOR FEBRUARY\nREASON   DS    H                   EXIT ENTRY REASON CODE (0/4/8)\nBINNBR   DS    CL8                 BIN NUMBER FROM JOB CARD OR ACCT\nCDATE    DS    CL8                 CALENDAR DATE (MM/DD/YY)\nJDATE    DS    CL6                 JULIAN DATE   (YY.DDD)\nMONTH    DS    CL3                 NAME OF MONTH (MMM)\nTOD      DS    CL11                TIME OF DAY (HH.MM.SS XM)\nTIMEWORK DS    CL10                WORK AREA FOR TIME OF DAY ROUTINE\nBUFWRK   DS    F                   ADDRESS OF A BUFFER WORK AREA\n         DS    0F\nDESTWORK DS    CL8                 CNVDEST WORK AREA\nDEST     DS    CL8                 JOE DESTINATION NAME\nTREC1    DS    0CL133              DATAGRAPHIX TITLE RECORD\nTRECCTL1 DS    CL2                 CONTROL CHARACTERS\nTRECID1  DS    CL5                 TREC ID CHARACTERS 'TREC1'\nTRJOBNM  DS    CL8                 JOBNAME\nTRJOBID  DS    CL8                 JOBID\nTRPNAME  DS    CL20                PROGRAMMER NAME\nTRPBIN   DS    CL9                 PRIMARY BIN NUMBER\nTRGROUP  DS    CL8                 OUTPUT GROUP NAME\nTRCDATE  DS    CL8                 CALENDAR DATE (MM/DD/YY)\nTRJDATE  DS    CL6                 JULIAN DATE   (YY.DDD)\nTRTIME   DS    CL11                TIME OF DAY (HH.MM.SS XM)\n         ORG   TREC1\nTREC2    DS    0CL133              DATAGRAPHIX TITLE RECORD\nTRECCTL2 DS    CL2                 CONTROL CHARACTERS\nTRECID2  DS    CL5                 TREC ID CHARACTERS 'TREC2'\nTRTPIND  DS    C                   TEST/PRODUCTION IND (T/P)\nTROWNER  DS    CL8                 OWNERID OF JOB\nTRSBIN   DS    CL9                 SECONDARY BIN NUMBER (FROM JITB)\nTROWNAME DS    CL20                OWNERID NAME         (FROM JITB)\nTRLOC    DS    CL15                LOCATION             (FROM JITB)\nTRDEPT   DS    CL20                DEPARTMENT           (FROM JITB)\nTRMAIL   DS    CL10                MAIL CODE            (FROM JITB)\nTRPHONE  DS    CL15                PHONE NUMBER         (FROM JITB)\n         ORG   TREC2+133\nSTAT1    DS    CL132               STATISTICS LINE 1\nSTAT2    DS    CL132               STATISTICS LINE 2\nSTAT3    DS    CL132               STATISTICS LINE 3\nSTAT4    DS    CL132               STATISTICS LINE 4\nSTAT5    DS    CL132               STATISTICS LINE 5\nSTAT6    DS    CL132               STATISTICS LINE 6\nSTAT7    DS    CL132               STATISTICS LINE 7\nSTAT8    DS    CL132               STATISTICS LINE 8\nSTAT9    DS    CL132               STATISTICS LINE 9\nSTAT10   DS    CL132               STATISTICS LINE 10\nJ001$SP  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         PRINT OFF\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ASSEMBLY VARIABLES                                           *\n*                                                                     *\n***********************************************************************\n         LCLC  &JIT\n         LCLC  &UCC7\n         LCLC  &UJQE\n         LCLC  &XJCF\nNPRSEPSL EQU   1                   NBR OF LOCAL PRTR START SEPARATORS\nNPRSEPEL EQU   1                   NBR OF LOCAL PRTR END   SEPARATORS\nNPRSEPSR EQU   1                   NBR OF RMT   PRTR START SEPARATORS\nNPRSEPER EQU   1                   NBR OF RMT   PRTR END   SEPARATORS\nIPLINES  EQU   0                   EXTRA SEP LINES ON LOCAL IMPACT PTR\n&JIT     SETC  'YES'               GENERATE JIT INTERFACE CODE\n&UCC7    SETC  'YES'               GENERATE UCC7 INTERFACE CODE\n&UJQE    SETC  'YES'               USE USER EXTENSIONS TO JQE\n&XJCF    SETC  'YES'               GENERATE XJCF/XEROX 9700 SUPPORT\n         PRINT ON\n         SPACE 3\n         USING JCT,R10             SET ADDRESSABILITY TO JCT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE001$PR  $ENTRY BASE=(R9,R12)\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R9,R15              LOAD FIRST BASE REGISTER\n         LA    R12,4095(R9)        LOAD SECOND\n         LA    R12,1(R12)               BASE REGISTER\n         LR    R2,R0               SAVE INPUT PARAMETER\n         LR    R3,R1               SAVE INPUT DCT ADDRESS\n         USING DCT,R3              SET ADDRESSABILITY TO DCT\n         $GETBUF TYPE=HASP,FIX=YES,WAIT=YES GET A WORK BUFFER\n         LR    R8,R1               SAVE ADDRESS OF BUFFER\n         USING HDRDSECT,R8         SET ADDRESSABILITY TO HEADER LINE\n         LA    R14,HDRDSECT+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS\n         LH    R15,$BUFSIZE        SET   'TO'   LENGTH\n         SLR   R0,R0               CLEAR 'FROM' ADDRESS\n         SLR   R1,R1               CLEAR 'FROM' LENGTH\n         MVCL  R14,R0              CLEAR THE BUFFER\n         $GETBUF TYPE=HASP,FIX=YES,WAIT=YES GET A WORK BUFFER\n         LR    R4,R1               SAVE ADDRESS OF BUFFER\n         LA    R1,BUFSTART-BFPDSECT(R4) POINT PAST BUFFER HEADER\n         ST    R1,BUFWRK           SAVE ADDRESS OF BUFFER WORK AREA\n         TM    DCTPPSW,DCTPPSWS    SEE IF SEPARATORS REQUESTED\n         BO    EXIT                NO, GET OUT\n         STH   R2,REASON           SAVE ENTRY REASON CODE\n***********************************************************************\n*        GET A JITB FOR THE DEVICE IF NOT ALREADY ONE                 *\n***********************************************************************\nGETJIT   ICM   R2,B'1111',DCTUSER1 LOAD THE ADDRESS OF THE JITB\n         BNZ   GETJIT1             GOOD, BRANCH\n         USING JITB,R2             SET ADDRESSABILITY TO JITB\n         $GETWORK WORDS=128,USE=JITB,WAIT=YES GET A 512 BYTE WORK AREA\n         ST    R1,DCTUSER1         SAVE THE ADDRESS\n         LR    R2,R1               MOVE THE JITB ADDRESS TO REG 2\n         MVC   JITBID,=CL4'JITB'   SET IDENTIFIER\nGETJIT1  CLC   JITBID,=CL4'JITB'   SEE IF REALLY A JITB\n         BE    GETJIT2             YES, BRANCH\nGETJIT2  CLC   REASON,=H'8'        SEE IF \"END\" SEPARATOR\n         BE    TODRTN              YES, JITB ALREADY SET\n***********************************************************************\n*                                                                     *\n*        SET THE JITB KEY                                             *\n*                                                                     *\n*        TEST - THE OUTPUT GROUP NAME (IF SPECIFIED) WILL             *\n*               BE THE FIRST KEY TO ALLOW A DEVELOPER TO              *\n*               SEND OUTPUT TO ANOTHER USER OR DEPARTMENT.            *\n*               IF THERE IS NO MATCH, THEN THE OWNERID WILL           *\n*               BE THE KEY TO EXTRACT JITB INFORMATION FOR            *\n*               THE JOB.                                              *\n*                                                                     *\n*        PROD - THE JOBNAME AND OUTPUT GROUP NAME (IF SPECIFIED)      *\n*               WILL BE THE KEY.  IF THERE IS NO JITB AT THAT         *\n*               LEVEL, THE JOBNAME BY ITSELF WILL BE USED TO          *\n*               SEE IF A JOB DEFAULT EXISTS.  IF THERE IS NO          *\n*               JITB AT THAT LEVEL, THEN THE FIRST TWO DIGITS         *\n*               OF THE JOBNAME (SYSTEM CODE) WILL BE USED TO          *\n*               GET A DEFAULT FOR THAT APPLICATION.                   *\n*                                                                     *\n***********************************************************************\n         MVC   JITBJOBN,JCTJNAME   ASSUME STC OR TSU\n         MVC   JITBGRP,=CL8' '     BLANK THE GROUP NAME\n         TM    JCTJOBFL,JCTSTCJB+JCTTSUJB SEE IF TSO OR STC\n         BNZ   GETJIT4             YES, GO CALL JOB INFORMATION TASK\n         L     R7,JCTJQE           LOAD OFFSET OF JQE\n         AL    R7,$JOBQPTR         CALCULATE ADDRESS OF JQE\n         USING JQE,R7              SET ADDRESSABILITY TO JQE\n         CLI   JQEXFLG1,JQEXPROD   SEE IF PRODUCTION JOB\n         BE    GETJIT3             YES, GO SET GROUP ID\n         L     R6,PPPWKJOE         LOAD ADDRESS OF WORK JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         CLI   JOENAME,C'0'        SEE IF JOE GROUP NAME NUMERIC\n         BNL   GETJIT6             YES, GO TRY OWNERID\n         MVC   JITBJOBN,JOENAME    NO,  SET KEY TO OWNERID\n         B     GETJIT4             GO CALL JOB INFORMATION TASK\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\n         DROP  R7                  DROP ADDRESSABILITY TO JQE\nGETJIT3  L     R6,PPPWKJOE         LOAD ADDRESS OF WORK JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         CLI   JOENAME,C'0'        SEE IF JOE GROUP NAME NUMERIC\n         BNL   GETJIT4             YES, LEAVE BLANK\n         MVC   JITBGRP,JOENAME     MOVE JOE OUTPUT NAME TO JITB KEY\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\n***********************************************************************\n*        CALL JITB COMMUNICATION TASK                                 *\n***********************************************************************\nGETJIT4  $CALL CALLJIT             CALL JOB INFORMATION TASK\n         TM    JITBSTAT,JITBOK     SEE IF ACTUALLY SUCCESSFUL\n         BO    TODRTN              YES, CONTINUE\n         L     R7,JCTJQE           LOAD OFFSET OF JQE\n         AL    R7,$JOBQPTR         CALCULATE ADDRESS OF JQE\n         USING JQE,R7              SET ADDRESSABILITY TO JQE\n         CLI   JQEXFLG1,JQEXPROD   SEE IF PRODUCTION JOB\n         BNE   GETJIT6             NO, GO TRY OWNERID FOR KEY\n         CLI   JITBGRP,C' '        SEE IF GROUP NAME SPECIFIED\n         BNH   GETJIT5             NO, BRANCH\n         MVC   JITBGRP,=CL8' '     BLANK THE GROUP NAME FOR JOB DFLT\n         $CALL CALLJIT             CALL JOB INFORMATION TASK\n         TM    JITBSTAT,JITBOK     SEE IF ACTUALLY SUCCESSFUL\n         BO    TODRTN              YES, CONTINUE\nGETJIT5  MVC   JITBJOBN+2(6),=CL8' ' BLANK ALL BUT SYSTEM CODE\n         $CALL CALLJIT             CALL JOB INFORMATION TASK\n         B     TODRTN              TAKE WHAT WE HAVE\nGETJIT6  MVC   JITBJOBN,JQEXOWNR   SET KEY TO OWNERID\n         $CALL CALLJIT             CALL JOB INFORMATION TASK\n         B     TODRTN              TAKE WHAT WE HAVE\n         DROP  R7                  DROP ADDRESSABILITY TO JQE\n         EJECT\n***********************************************************************\n*        GET TIME AND DATE                                            *\n***********************************************************************\nTODRTN   TIME  DEC                 GET TIME AND DATE\n***********************************************************************\n*        TIME (HH.MM.SS XM)                                           *\n***********************************************************************\n         ST    R0,EXITWRK3         SAVE TIME (HHMMSSTT)\n         ST    R1,EXITWRK3+4       SAVE DATE\n         MVO   EXITWRK2(5),EXITWRK3(4) SHIFT TO ADD SIGN\n         OI    EXITWRK2+4,X'0F'    SET SIGN\n         MVC   TOD+9(2),=CL2'AM'   SET TO 'AM'\n         CP    EXITWRK2(5),=PL5'12000000' TEST TIME\n         BL    TODRTN1             BRANCH IF AM\n         MVI   TOD+9,C'P'          CHANGE FROM AM TO PM\n         CP    EXITWRK2(5),=PL5'13000000' SEE IF AFTER 1 PM\n         BL    TODRTN1             YES, DO NOT ADJUST FOR PM\n         SP    EXITWRK2(5),=PL5'12000000' SUBTRACT 12 HOURS\nTODRTN1  MVC   TIMEWORK,=X'402021204B20204B2020' SET EDIT MASK\n         ED    TIMEWORK,EXITWRK2   EDIT TIME INTO WORK AREA\n         MVC   TOD(8),TIMEWORK+2   SET TIME\n***********************************************************************\n*        DATE (MM/DD/YY AND YY.DDD)                                   *\n***********************************************************************\n         MVC   SAVETBL(48),YEARTBL SAVE A COPY OF DATE TABLE FOR UPDATE\n         TM    EXITWRK3+5,X'01'    IT THIS AN ODD YEAR\n         BO    TODRTN2             YES, CANNOT BE LEAP YEAR\n         TM    EXITWRK3+5,X'12'    MAGIC LEAP YEAR MASK\n         BM    TODRTN2             MIXED, CANNOT BE LEAP YEAR\n         MVI   FEB,29              CHANGE FEB TO 29 DAYS\nTODRTN2  MVC   EXITWRK5+5(3),=X'402120' MOVE EDIT PATTERN\n         ED    EXITWRK5+6(3),EXITWRK3+5 EDIT THE YEAR (YY) TO WORK\n         MVC   CDATE+6(2),EXITWRK5+6 MOVE YEAR (YY) TO CALENDAR DATE\n         MVC   JDATE(2),EXITWRK5+6 MOVE YEAR (YY) TO JULIAN DATE\n         MVC   EXITWRK3(6),$ZEROS  CLEAR ALL DATE EXCEPT JULIAN DAY\n         OI    EXITWRK3+7,X'0F'    MAKE PRINTABLE\n         UNPK  JDATE+3(3),EXITWRK3+6(2) MOVE DAY (DDD) TO JULIAN DATE\n         MVI   JDATE+2,C'.'        SET DELIMITER\n         CVB   R1,EXITWRK3         CONVERT TO BINARY DAY\n         LA    R6,SAVETBL-4        LOAD ADDRESS OF DATE TABLE\n         SLR   R0,R0               CLEAR FOR IC\n         SLR   R15,R15             ZERO THE MONTH COUNTER\nTODRTN3  SLR   R1,R0               SUBTRACT DAY/MONTH FROM TOTAL\n         LA    R6,4(,R6)           INCREMENT TO NEXT DATE ENTRY\n         IC    R0,0(,R6)           LOAD NUMBER OF DAYS IN THAT MONTH\n         LA    R15,1(R15)          ADD 1 TO THE MONTH COUNTER\n         CLR   R0,R1               SEE IF ONLY PARTIAL MONTH REMAINDING\n         BL    TODRTN3             NO, LOOP\n         MVC   MONTH,1(R6)         SAVE NAME OF MONTH (MMM)\n         CVD   R15,EXITWRK3        CONVERT TO DECIMAL MONTH\n         OI    EXITWRK3+7,X'0F'    MAKE MONTH PRINTABLE\n         UNPK  CDATE+0(2),EXITWRK3+6(2) PLACE MONTH (MM)\n         CVD   R1,EXITWRK3         CONVERT TO DECIMAL DAY\n         OI    EXITWRK3+7,X'0F'    MAKE DAY PRINTABLE\n         UNPK  CDATE+3(2),EXITWRK3+6(2) PLACE DAY (DD)\n         MVI   CDATE+2,C'/'        INSERT DELIMITER\n         MVI   CDATE+5,C'/'        INSERT DELIMITER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DETERMINE THE DESTINATION NAME FOR THE JOE                   *\n*                                                                     *\n***********************************************************************\nGDEST    MVC   DESTWORK,=CL8'LOCAL' SET DEFAULT DESTINATION NAME\n         L     R6,PPPWKJOE         LOAD ADDRESS OF WORK JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         CLC   JOEROUT(4),$ZEROS   SEE IF DESTINATION SPECIFIED\n         BE    GDEST2              NO, LEAVE IT \"LOCAL\"\n         CLC   JOEROUT(2),$OWNNODE SEE IF OUR NODE\n         BNE   GDEST1              NO, GO LOOK AT DESTID TABLE\n         CLC   JOEROUT+2(2),$ZEROS SEE IF REMOTE NUMBER\n         BE    GDEST2              NO, LEAVE IT \"LOCAL\"\nGDEST1   MVC   DESTWORK(4),JOEROUT SET DESTID FOR CNVDEST ROUTINE\n         $CALL CNVDEST             CONVERT DESTINATION CODE\nGDEST2   MVC   DEST,DESTWORK       SAVE THE DEST CODE\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DETERMINE THE DEFAULT BIN NUMBER FOR THE JOB                 *\n*                                                                     *\n***********************************************************************\n         $CALL DETBIN              DETERMINE THE DEFAULT BIN NUMBER\n         EJECT\n***********************************************************************\n*        TEST FOR PRINTER OR PUNCH                                    *\n***********************************************************************\n         TM    PCEID,PCEPUSID      IS THIS A PUNCH\n         BO    PUNCH               YES, BRANCH\n         CLC   $OWNNODE,=H'2'      SEE IF NODE LE 2 (JACKSONVILLE FLA)\n         BNH   PRINTER             YES, BRANCH\n         CLC   DCTDEVN(6),=CL6'R20.PR'  IS THIS A 3700\n         BE    DEVT3700            YES, BRANCH\n         CLC   DCTDEVN(6),=CL6'R21.PR'  IS THIS A 3700\n         BNE   PRINTER             NO, BRANCH\nDEVT3700 OI    DEVTYPE,DEV3700     TURN ON A 3700 BIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                      P R I N T E R                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        GO PROCESS LOCAL MICROFICHE DEVICES                          *\n*                                                                     *\n***********************************************************************\nPRINTER  CLC   $OWNNODE,=H'1'      SEE IF NODE = 1 (JACKSONVILLE FLA)\n         BE    PRNTJAX             YES, BRANCH\n         CLC   $OWNNODE,=H'2'      SEE IF NODE = 2 (JACKSONVILLE FLA)\n         BE    PRNTJAX             YES, BRANCH\nPRNTCHL  CLC   DCTDEVN,=CL8'PRINTR18' IS THIS A DATAGRAPHIX ARIS / XL\n         BE    DX                  YES, BRANCH\n         CLC   DCTDEVN,=CL8'PRT18'  ' IS THIS A DATAGRAPHIX ARIS / XL\n         BE    DX                  YES, BRANCH\n         CLC   DCTDEVN,=CL8'PRINTR19' IS THIS A DATAGRAPHIX ARIS / XL\n         BE    DX                  YES, BRANCH\n         CLC   DCTDEVN,=CL8'PRT19'    IS THIS A DATAGRAPHIX ARIS / XL\n         BE    DX                  YES, BRANCH\n         CLC   DCTDEVN,=CL8'PRINTR25' IS THIS A DATAGRAPHIX ARIS / XL\n         BE    DX                  YES, BRANCH\n         CLC   DCTDEVN,=CL8'PRT25'    IS THIS A DATAGRAPHIX ARIS / XL\n         BE    DX                  YES, BRANCH\n         CLC   DCTDEVN,=CL8'PRINTR26' IS THIS A DATAGRAPHIX ARIS / XL\n         BE    DX                  YES, BRANCH\n         CLC   DCTDEVN,=CL8'PRT26'    IS THIS A DATAGRAPHIX ARIS / XL\n         BE    DX                  YES, BRANCH\n         CLC   DCTDEVN,=CL8'PRINTR1'  IS THIS A KOMSTAR\n         BE    KOMSTAR             YES, BRANCH\n         CLC   DCTDEVN,=CL8'PRT1'     IS THIS A KOMSTAR\n         BE    KOMSTAR             YES, BRANCH\n         CLC   DCTDEVN,=CL8'PRINTR10' IS THIS A KOMSTAR\n         BE    KOMSTAR             YES, BRANCH\n         CLC   DCTDEVN,=CL8'PRT10'    IS THIS A KOMSTAR\n         BE    KOMSTAR             YES, BRANCH\n         CLC   DCTDEVN,=CL8'PRINTR14' IS THIS A KOMSTAR\n         BE    KOMSTAR             YES, BRANCH\n         CLC   DCTDEVN,=CL8'PRT14'    IS THIS A KOMSTAR\n         BE    KOMSTAR             YES, BRANCH\n         B     NORMAL              NO, JUST A 'NORMAL' PRINTER\nPRNTJAX  CLC   DCTDEVN,=CL8'PRINTR7'  IS THIS A DATAGRAPHIX ARIS / XL\n         BE    DX                  YES, BRANCH\n         CLC   DCTDEVN,=CL8'PRT7'     IS THIS A DATAGRAPHIX ARIS / XL\n         BE    DX                  YES, BRANCH\n         CLC   DCTDEVN,=CL8'PRINTR10' IS THIS A DATAGRAPHIX ARIS / XL\n         BE    DX                  YES, BRANCH\n         CLC   DCTDEVN,=CL8'PRT10'    IS THIS A DATAGRAPHIX ARIS / XL\n         BE    DX                  YES, BRANCH\n         CLC   DCTDEVN,=CL8'PRINTR6'  IS THIS A DATAGRAPHIX ARIS / XL\n         BE    DX                  YES, BRANCH\n         CLC   DCTDEVN,=CL8'PRT6'     IS THIS A DATAGRAPHIX ARIS / XL\n         BE    DX                  YES, BRANCH\n***********************************************************************\n*                                                                     *\n*        PRODUCE THE SETUP HEADER FOR A SNA REMOTE IF REQUIRED.       *\n*                                                                     *\n***********************************************************************\nNORMAL   TM    MDCTFEAT,DCTPSHDR   SEE IF SETUP HDR REQUIRED\n         BNO   SETSEPCT            NO, BYPASS $SEPPDIR ROUTINE\n         $SEPPDIR (R4)             SEND PDIR TO SNA RMT\n***********************************************************************\n*                                                                     *\n*        DETERMINE THE NUMBER OF LINES TO BE PRODUCTED ON THE         *\n*        SEPARATOR PAGE.  THIS MAY VARY DEPENDING ON WHETHER OR       *\n*        NOT THE DEVICE IS A LOCAL PRINTER OR A REMOTE PRINTER.       *\n*                                                                     *\n***********************************************************************\nSETSEPCT TM    DCTDEVID,DCTRMTID   IS THIS A REMOTE DEVICE?\n         BZ    SETLOCAL            NO, BRANCH\n         TM    DEVTYPE,DEV3700     SEE IF A XEROX 3700 DEVICE\n         BO    SETLOCAL            YES, CONSIDER A LOCAL DEVICE\nSETRMT   LA    R1,NPRSEPSR         LOAD NBR OF START SEP PGS FOR REMOTE\n         CLC   REASON,=H'8'        TEST ENTRY REASON CODE\n         BNE   SETCOUNT            NOT EIGHT, NOT END, BRANCH\n         LA    R1,NPRSEPER         LOAD NBR OF END SEP PGS FOR REMOTE\n         B     SETCOUNT            GO SET SEPARATOR PAGE COUNT\nSETLOCAL LA    R1,NPRSEPEL         LOAD NBR OF END SEP PGS FOR LOCAL\n         CLC   REASON,=H'8'        TEST ENTRY REASON CODE\n         BE    SETCOUNT            EIGHT, END SEPARATOR, BRANCH\n         LA    R1,NPRSEPSL         LOAD NBR OF START SEP PGS FOR LOCAL\n         AIF   ('&XJCF' NE 'YES').XJCF#1\n         AIF   ('&UJQE'  NE 'YES').XJCF#1\n         TM    DCTPPSW9,DCT9700    SEE IF 9700\n         BO    SET9700             YES, GO SET SEPARATOR COUNT\n         TM    DEVTYPE,DEV3700     SEE IF A XEROX 3700 DEVICE\n         BNO   SETCOUNT            NO, KEEP THE CURRENT SEPARATOR CNT\nSET3700  LA    R1,1                SET SEPARATOR COUNT TO 1\n         B     SETCOUNT            GO PROCESS SEPARATOR PAGE\nSET9700  LA    R1,1                SET SEPARATOR COUNT TO 1\n         L     R7,JCTJQE           LOAD OFFSET OF JQE\n         AL    R7,$JOBQPTR         CALCULATE ADDRESS OF JQE\n         USING JQE,R7              SET ADDRESSABILITY TO JQE\n         CLI   JQEXFLG1,JQEXPROD   SEE IF PRODUCTION JOB\n         BNE   SETCOUNT            NO, LEAVE SEPARATOR COUNT EQUAL TO 1\n         LA    R1,2                SET SEPARATOR COUNT TO 2 FOR PROD\n         DROP  R7                  DROP ADDRESSABILITY TO JQE\n.XJCF#1  ANOP\nSETCOUNT BCTR  R1,0                REDUCE COUNT BY 1\n         ST    R1,EXITWRK4         AND SAVE COUNT\n         EJECT\n         AIF   ('&XJCF' NE 'YES').XJCF#2\n***********************************************************************\n*                                                                     *\n*        PRODUCE THE DJDE FOR THE SEPARATOR PAGE.  THE $DJDE          *\n*        MACRO COULD BE USED TO DO THIS EASILY BUT DUE TO THE         *\n*        WAY WE GENERATE XJCF BANNERS, IT CANNOT GENERATE A           *\n*        FONTINDEX OTHER THAN \"NONE\".  TO GET AROUND THIS             *\n*        PROBLEM, WE WILL ESSENTIALLY DUPLICATE THE DJDE THAT         *\n*        THE $DJDE MACRO WOULD HAVE GENERATED AND SET THE             *\n*        XJCF BITS THAT REFLECT THAT ACTION.                          *\n*                                                                     *\n*                                                                     *\n*        IF THIS IS THE 'END' SEPARATOR FOR A 9700, MAKE SURE         *\n*        THAT THE CHANNEL 1 IS ON LINE 1.  A PROBLEM OCCURS IF        *\n*        THE FCB FOR A PREVIOUS PRINT HAS CHANNEL 1 ON ANOTHER        *\n*        LINE.  THE DJDE IS NOT RECOGNIZED FOR THE SEPARATOR AND      *\n*        THE FOLLOWING JOB.                                           *\n*                                                                     *\n***********************************************************************\n         TM    DCTPPSW9,DCT9700    SEE IF 9700\n         BO    N9700#0             YES, BRANCH\n         TM    DEVTYPE,DEV3700     SEE IF A XEROX 3700 DEVICE\n         BNO   N9700#8             NO, BYPASS DJDE ROUTINE\nN9700#0  CLC   REASON,=H'8'        SEE IF ENTRY FOR END-OF-JOB\n         BNE   N9700#1             NO, BRANCH\n         MVC   HDR(LDJDECRD),DJDECRD SET DJDE LINE\n         LA    R0,LDJDECRD         LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF DJDE LINE\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\nN9700#1  DS    0H\n*        $DJDE BUFFER=(R4)         ISSUE A DJDE FOR SEPARATOR\n         MVI   HDR,C' '            BLANK THE ENTIRE\n         MVC   HDR+1(132),HDR         DJDE WORK AREA\n         LA    R15,HDR             LOAD ADDRESS OF DJDE AREA\n         MVC   HDR(LDJDE1A),DJDE1A  SET SPECIAL DJDE LINE PART 1\n         LA    R15,LDJDE1A(R15)    INCREMENT PAST DJDE PART 1\n         TM    DEVTYPE,DEV3700     SEE IF A XEROX 3700 DEVICE\n         BO    N9700#3             YES, BYPASS DUPLEX ROUTINE\n         L     R6,PPPCHJOE         LOAD ADDRESS CHARACTERISTICS JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         TM    JOEFLAGC,JOEFCDPX   SEE IF DUPLEX\n         BNO   N9700#2             NO,  BRANCH\n         MVC   0(11,R15),=C',DUPLEX=YES' SET TO DUPLEX=YES\n         LA    R15,11(R15)         INCREMENT PAST \"DUPLEX=YES\"\n         B     N9700#3             GO WRITE DJDE\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\nN9700#2  MVC   0(10,R15),=C',DUPLEX=NO' SET TO DUPLEX=NO\n         LA    R15,10(R15)         INCREMENT PAST \"DUPLEX=NO\"\nN9700#3  MVC   0(LDJDE1B,R15),DJDE1B  SET REST OF DJDE\n         LA    R15,LDJDE1B(R15)    INCREMENT PAST DJDE PART 2\n         MVI   0(R15),C';'         ASSUME JOBID MESSAGE REQUIRED\n         TM    DEVTYPE,DEV3700     SEE IF A XEROX 3700 DEVICE\n         BO    N9700#3A            YES, NEVER PRODUCE JOBID MESSAGE\n         CLC   REASON,=H'8'        SEE IF 'END' SEPARATOR\n         BNE   N9700#4             NO, JOBID MESSAGE IS REQUIRED\nN9700#3A MVC   0(4,R15),=C'END;'   YES, SET END OF DJDE\nN9700#4  LA    R0,132              LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF DJDE LINE\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         TM    DEVTYPE,DEV3700     SEE IF A XEROX 3700 DEVICE\n         BO    N9700#7             YES, NEVER PRODUCE JOBID MESSAGE\n         CLC   REASON,=H'8'        SEE IF 'END' SEPARATOR\n         BE    N9700#7             YES, NO, JOBID MESSAGE REQUIRED\n         MVC   HDR(LDJDE2),DJDE2   SET SPECIAL DJDE LINE\n         MVC   HDR+21(8),JCTJNAME  SET JOB NAME\n         MVC   HDR+30(8),JCTJOBID  SET JOB ID\n         MVC   HDR+39(7),=C'''),END;' SET END OF DJDE\n         TM    PPXFLAG2,PPX2SET    SEE IF SETUP REQUIRED\n         BNO   N9700#6             NO, BRANCH\n         MVC   HDR+39(7),=CL20' '  BLANK END OF RECORD\n         MVC   HDR+40(2),=C'F='    SET TITLE\n         L     R6,PPPCHJOE         LOAD ADDRESS CHARACTERISTICS JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         MVC   HDR+42(8),JOEFORM   SET FORM NUMBER\n         MVI   HDR+51,C'('         SET DELIMETER\n         MVC   HDR+52(8),=C'NOSHIFT)' ASSUME NOSHIFT\n         TM    JOEFLAGC,JOEFCSFT   SEE IF SHIFT=YES\n         BNO   N9700#5             NO, LEAVE IT NOSHIFT\n         MVC   HDR+52(8),=C'SIMPLEX)' ASSUME SIMPLEX\n         TM    DEVTYPE,DEV3700     SEE IF A XEROX 3700 DEVICE\n         BO    N9700#5             YES, LEAVE IT SIMPLEX\n         TM    JOEFLAGC,JOEFCDPX   SEE IF DUPLEX\n         BNO   N9700#5             NO, LEAVE IT SIMPLEX\n         MVC   HDR+52(8),=C'DUPLEX) ' SET TO DUPLEX\nN9700#5  MVC   HDR+60(12),=C''',WAIT),END;' SET END OF DJDE\nN9700#6  LA    R0,LDJDE2           LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF DJDE LINE\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\nN9700#7  NI    PPXFLAG2,255-PPX2SET-PPX2GJID TURN OFF SETUP/MSG BITS\n         OI    PPXFLAG2,PPX2GJDL   GENERATE JDL/JDE OPNDS ON NXT DJDE\nN9700#8  DS    0H\n.XJCF#2 ANOP\n         B     PRINTRTN            GO PRINT FIRST SEPARATOR\nCALLPRNT ICM   R1,15,EXITWRK4      LOAD NUMBER OF SEP PAGES LEFT TO DO\n         BZ    ENDPRNT             ZERO, DONE, EXIT\n         BM    ENDPRNT             NEGATIVE, ERROR, BUT EXIT ANYWAY\n         BCTR  R1,0                REDUCE COUNT BY 1\n         ST    R1,EXITWRK4         AND SAVE NEW COUNT\n         AIF   ('&XJCF' NE 'YES').XJCF#3\n***********************************************************************\n*                                                                     *\n*        IF THIS IS A 9700 PRINTER IN DUPLEX MODE, A BLANK            *\n*        SEPARATOR PAGE MUST BE CREATED BETWEEN EACH PAGE SO          *\n*        THAT MULTIPLE SEPARATOR PAGES WILL ALL BE ON THE FRONT       *\n*        OF A PHYSICAL PAGE.                                          *\n*                                                                     *\n***********************************************************************\n         TM    DEVTYPE,DEV3700     SEE IF A XEROX 3700 DEVICE\n         BO    NOBLANK             YES, BYPASS BLANK PAGE ROUTINE\n         TM    DCTPPSW9,DCT9700    SEE IF 9700\n         BNO   NOBLANK             NO, BRANCH\nCKBLANK  L     R6,PPPCHJOE         LOAD ADDRESS CHARACTERISTICS JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         TM    JOEFLAGC,JOEFCDPX   SEE IF IN DUPLEX MODE\n         BNO   NOBLANK             NO, BRANCH\n         DROP  R6                  DROP ADDRESSABILITY TO CHAR JOE\n         MVC   HDR(2),=X'8B40'     MOVE EJECT COMMAND TO BUFFER\n         LA    R0,2                LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF EJECT COMMAND\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         MVI   HDR,X'40'           MOVE BLANK LINE TO BUFFER\n         LA    R0,1                LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF EJECT COMMAND\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES\n.XJCF#3 ANOP\nNOBLANK  MVC   HDR(2),=X'8B40'     MOVE EJECT COMMAND TO BUFFER\n         LA    R0,2                LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF EJECT COMMAND\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         B     PRINTRTN            GO PRINT A SEPARATOR\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FINISH PROCESSING ON ALL SEPARATOR PAGES                     *\n*                                                                     *\n***********************************************************************\nENDPRNT  DS    0H\n***********************************************************************\n*                                                                     *\n*        IF WE HAVE JUST FINISHED PROCESSING END SEPARATOR            *\n*        PAGE(S), AN EJECT COMMAND MUST BE ISSUED TO PROPERLY         *\n*        POSITION FOR EDGE MARKING.                                   *\n*                                                                     *\n***********************************************************************\nENDPRNT1 CLC   REASON,=H'8'        TEST ENTRY REASON CODE\n         BNE   ENDPRNT3            NOT EIGHT, NOT END, BRANCH\n***********************************************************************\n*                                                                     *\n*        FORCE PAGE EJECT AFTER END SEPARATOR PAGE                    *\n*                                                                     *\n***********************************************************************\nENDPRNT2 MVC   HDR(2),=X'8B40'     MOVE EJECT COMMAND TO BUFFER\n         LA    R0,2                LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF EJECT COMMAND\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         SPACE 3\n         AIF   ('&UCC7' NE 'YES').UCC7#1\n***********************************************************************\n*                                                                     *\n*        CALL UCC7 TASK TO DEMAND A JOB NETWORK IF THE JITB           *\n*        THAT HAS BEEN READ FOR THE JOB REQUESTS THIS ACTION.         *\n*                                                                     *\n***********************************************************************\n         TM    JITBSTAT,JITBOK     DO WE HAVE A GOOD JITB\n         BNO   EXIT                NO, GET OUT\n         CLI   JITBU7FL,C'Y'       SEE IF UCC7 NETWORK REQUESTED\n         BNE   EXIT                NO, GET OUT\n         $CALL CALLUC7             CALL UCC7 TASK\n.UCC7#1  ANOP\n         B     EXIT                GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ACTIVATE PRINTING OF THE JES2 NEWS DATASET FOR TEST          *\n*        JOBS WITH FORMS=STD.                                         *\n*                                                                     *\n*        NO NEWS WILL BE CREATED FOR STARTED TASKS OR TSO             *\n*        OUTPUT.                                                      *\n*                                                                     *\n***********************************************************************\nENDPRNT3 TM    JCTJOBFL,JCTSTCJB+JCTTSUJB IS THIS A STC OR TSO USER?\n         BM    EXIT                YES, NO NEWS\n         AIF   ('&UJQE' NE 'YES').UJQE#1\n         L     R7,JCTJQE           LOAD OFFSET OF JQE\n         AL    R7,$JOBQPTR         CALCULATE ADDRESS OF JQE\n         USING JQE,R7              SET ADDRESSABILITY TO JQE\n         CLI   JQEXFLG1,JQEXPROD   SEE IF PRODUCTION JOB\n         BE    EXIT                YES, NO NEWS\n         DROP  R7                  DROP ADDRESSABILITY TO JQE\n.UJQE#1  ANOP\n         L     R6,PPPCHJOE         LOAD ADDRESS CHARACTERISTICS JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         CLC   JOEFORM(4),=C'STD ' SEE IF STANDARD FORM\n         BNE   EXIT                NO, NO NEWS\n         DROP  R6                  DROP ADDRESSABILITY TO CHAR JOE\n         L     R15,$NEWSTTR        GET JES2 NEWS MTTR\n         LTR   R15,R15             SEE IF JES2 NEWS EXISTS\n         BZ    EXIT                NO, GET OUT\n         ST    R15,PPPLEBTR        SET JES2 NEWS MTTR\n         OI    PPPFLAG1,X'01'      SET JES2 NEWS FLAG\n         MVC   PPPEBRCB,$H1        SET RCB OFFSET\n         MVC   PPPKEY(6),=C'$$NEWS'   SET SPECIAL NEWS KEY\n         MVC   PPPLNECT,=F'-1'     SET LARGE PAGE SIZE\n         B     EXIT                GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PRINT SEPARATOR ROUTINE - MAY BE CALLED MULTIPLE TIMES       *\n*                                                                     *\n***********************************************************************\nPRINTRTN SLR   R5,R5               CLEAR REG FOR IC\n         TM    DEVTYPE,DEV3700     SEE IF A XEROX 3700 DEVICE\n         BO    NOTRMT              YES, TREAT LIKE A LOCAL PRINTER\n         IC    R5,$TPIDCT          LOAD REMOTE SEPARATOR LINE COUNT\n         TM    DCTDEVID,DCTRMTID   SEE IF THIS IS A REMOTE DEVICE\n         BO    STARTPRT            YES, BRANCH\nNOTRMT   IC    R5,$PRIDCT          LOAD LOCAL SEPARATOR LINE COUNT\n         AIF   ('&XJCF' NE 'YES').XJCF#4\n         TM    DCTPPSW9,DCT9700    SEE IF 9700\n         BO    PR9700              YES, GO PRODUCE SPECIAL SEPARATOR\n         TM    DEVTYPE,DEV3700     SEE IF A XEROX 3700 DEVICE\n         BNO   NOT9700             NO, GO PRODUCE NORMAL SEPARATOR\n***********************************************************************\n*                                                                     *\n*        PRODUCE THE 9700 SEPARATOR PAGE                              *\n*                                                                     *\n***********************************************************************\nPR9700   L     R5,BUFWRK           POINT TO BUFFER WORK AREA\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'6'          SET FONT INDEX\n         LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=1 WRITE HEADING LINE\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'8'          SET FONT INDEX\n         MVC   1(4,R5),BINNBR      MOVE BIN NUMBER TO BIN AREA 1\n         MVC   49(4,R5),BINNBR     MOVE BIN NUMBER TO BIN AREA 2\n         MVI   5(R5),C'-'          SET DELIMETER\n         MVI   53(R5),C'-'         SET DELIMETER\n         MVC   6(4,R5),BINNBR+4    MOVE BIN NUMBER  TO BIN AREA2\n         MVC   54(4,R5),BINNBR+4   MOVE BIN NUMBER  TO BIN AREA2\n         TM    JITBSTAT,JITBOK     DO WE HAVE A GOOD JITB\n         BNO   PR9700A             NO, BRANCH\n         CLC   JITBPSID,=CL20' '  SEE IF PRIMARY SEP ID SPECIFIED\n         BNH   PR9700A             NO, USE DEFAULT\n         MVC   1(9,R5),=CL20' '    BLANK PRIMARY SEPARATOR ID\n         MVC   49(9,R5),=CL20' '   BLANK PRIMARY SEPARATOR ID\n         MVC   1(4,R5),JITBPSID    MOVE PRIM SEP ID1 TO BIN AREA 1\n         MVC   49(4,R5),JITBPSID   MOVE PRIM SEP ID1 TO BIN AREA 1\n         MVC   6(4,R5),JITBPSID+4  MOVE PRIM SEP ID2 TO BIN AREA 2\n         MVC   54(4,R5),JITBPSID+4 MOVE PRIM SEP ID2 TO BIN AREA 2\n         CLC   JITBPSID(4),=CL20' ' SEE IF PRIMARY SEP ID1 SPECIFIED\n         BE    PR9700A             NO, NO DELIMETER\n         CLC   JITBPSID+4(4),=CL20' ' SEE IF PRIMARY SEP ID2 SPECIFIED\n         BE    PR9700A             NO, NO DELIMETER\n         MVI   5(R5),C'-'          SET DELIMETER\n         MVI   53(R5),C'-'         SET DELIMETER\nPR9700A  LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=1 WRITE HEADING LINE\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'8'          SET FONT INDEX\nPR9700B  LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=1 WRITE HEADING LINE\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'7'          SET FONT INDEX\n         MVC   35(8,R5),JCTJNAME   MOVE JOB NAME TO MSG AREA\nPR9700C  LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=1 WRITE HEADING LINE\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'7'          SET FONT INDEX\nPR9700D  LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=1 WRITE HEADING LINE\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'7'          SET FONT INDEX\n         L     R6,PPPWKJOE         LOAD ADDRESS OF WORK JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         CLI   JOENAME,C'0'        SEE IF JOE GROUP NAME NUMERIC\n         BNL   PR9700E             YES, LEAVE BLANK\n         MVC   35(8,R5),JOENAME    MOVE JOE OUTPUT NAME TO MSG AREA\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\nPR9700E  LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=1 WRITE HEADING LINE\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'7'          SET FONT INDEX\nPR9700F  LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=1 WRITE HEADING LINE\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'7'          SET FONT INDEX\n         MVC   35(8,R5),JCTJOBID   MOVE JOB ID TO MSG AREA\nPR9700G1 CLI   39(R5),C' '         SEE IF LEFT JUSTIFIED\n         BNE   PR9700G             YES, GET OUT\n         MVC   39(4,R5),40(R5)     SHIFT JOB NUMBER\n         B     PR9700G1            LOOP\nPR9700G  LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=1 WRITE HEADING LINE\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'7'          SET FONT INDEX\nPR9700H  LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=2 WRITE HEADING LINE\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'7'          SET FONT INDEX\n         MVC   35(20,R5),JCTPNAME  MOVE PGMR NAME TO MSG AREA\nPR9700I  LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=1 WRITE HEADING LINE\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'7'          SET FONT INDEX\nPR9700J  LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=1 WRITE HEADING LINE\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'7'          SET FONT INDEX\n         TM    JITBSTAT,JITBOK     DO WE HAVE A GOOD JITB\n         BNO   PR9700K             NO, BRANCH\n         CLI   JITBPGMR,C' '       SEE IF PROGRAMMER NAME SPECIFIED\n         BNH   PR9700K             NO, USE BLANKS\n         MVC   35(20,R5),JITBPGMR  MOVE PROGRAMMER NAME TO MSG AREA\nPR9700K  LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=1 WRITE HEADING LINE\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'7'          SET FONT INDEX\nPR9700L  LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=2 WRITE HEADING LINE\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'7'          SET FONT INDEX\n         MVC   35(8,R5),CDATE      MOVE DATE TO MSG AREA\nPR9700M  LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=1 WRITE HEADING LINE\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'7'          SET FONT INDEX\nPR9700N  LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=1 WRITE HEADING LINE\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'7'          SET FONT INDEX\n         MVC   35(11,R5),TOD       MOVE TIME TO MSG AREA\n         OI    35(R5),X'F0'        ELIMINATE POSSIBLE LEADING BLANK\nPR9700O  LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=1 WRITE HEADING LINE\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'7'          SET FONT INDEX\nPR9700P  LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=1 WRITE HEADING LINE\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'7'          SET FONT INDEX\n         TM    JITBSTAT,JITBOK     DO WE HAVE A GOOD JITB\n         BNO   PR9700Q             NO, BRANCH\n         CLC   JITBSSID,=CL20' '   SEE IF SECONDARY SEP ID SPECIFIED\n         BNH   PR9700Q             NO, LEAVE IT BLANK\n         MVC   35(4,R5),JITBSSID   MOVE SECOND SEP ID1 TO BIN AREA\n         MVC   40(4,R5),JITBSSID+4  MOVE SECOND SEP ID2 TO BIN AREA\n         CLC   JITBSSID(4),=CL20' ' SEE IF SECOND SEP ID1 SPECIFIED\n         BE    PR9700Q             NO, NO DELIMETER\n         CLC   JITBSSID+4(4),=CL20' ' SEE IF SECOND SEP ID2 SPECIFIED\n         BE    PR9700Q             NO, NO DELIMETER\n         MVI   39(R5),C'-'         SET DELIMETER\nPR9700Q  LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=1 WRITE HEADING LINE\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'7'          SET FONT INDEX\nPR9700R  LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=1 WRITE HEADING LINE\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'8'          SET FONT INDEX\nPR9700S  LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=1 WRITE HEADING LINE\n         MVI   0(R5),C' '          BLANK THE ENTIRE\n         MVC   1(132,R5),0(R5)         BUFFER WORK AREA\n         MVI   0(R5),C'6'          SET FONT INDEX\nPR9700T  LA    R0,132              LOAD LINE LENGTH\n         $PRPUT DATA=(R5),LEN=(R0),WAIT=YES,COUNT=4 WRITE HEADING LINE\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        BUILD THE DETAILED STATISTICS LINES WHICH FOLLOW THE         *\n*        HEADING LINES.                                               *\n*                                                                     *\n***********************************************************************\n         $CALL STATLNE             GO BUILD STATISTICS LINES\n         LA    R6,STAT1            POINT TO FIRST STATISTICS LINE\n         LA    R7,10               SET LOOP COUNTER\nPR9700Z  MVI   0(R5),C'6'          SET FONT INDEX\n         MVC   1(132,R5),0(R6)     MOVE STAT LINE TO MSG AREA\n         LA    R0,133              SET LENGTH OF RECORD\n         $PRPUT DATA=(R5),LEN=(R0),COUNT=1,WAIT=YES\n         LA    R6,132(R6)          INCREMENT TO NEXT STATISTICS LINE\n         BCT   R7,PR9700Z          LOOP UNTIL ALL 10 ARE PRINTED\n         B     CALLPRNT            DONE WITH PAGE, RETURN TO CALLER\n         EJECT\n.XJCF#4 ANOP\n***********************************************************************\n*                                                                     *\n*        PRODUCE SEPARATOR PAGE FOR ALL PRINTERS EXCEPT 9700          *\n*                                                                     *\n***********************************************************************\nNOT9700  TM    DCTPPSW2,DCTNIPRT   SEE IF THIS IS A NON-IMPACT PRINTER\n         BO    STARTPRT            YES, BRANCH\n         LA    R5,IPLINES(R5)      ADD EXTRA LINES FOR INPACT PRINTER\n***********************************************************************\n*                                                                     *\n*        PRODUCE FROM 1 TO 5 SMALL 5X7 BLOCK LETTER LINES.  THE       *\n*        8 STATISTICS LINES WILL ALWAYS BE WRITTEN.  THE BLOCK        *\n*        LETTER LINES WILL BE PRODUCED AS THE NUMBER OF HEADING       *\n*        LINES ALLOWS.                                                *\n*                                                                     *\n***********************************************************************\nSTARTPRT L     R1,BUFWRK           LOAD ADDRESS OF BUFFER WORK AREA\n         MVI   0(R1),X'40'         SET BLANK LINE\n         LA    R0,1                LOAD LINE LENGTH\n         $PRPUT DATA=(R1),LEN=(R0),WAIT=YES,COUNT=1 WRITE 1 BLANK LNE\n         SH    R5,=H'1'            SUBTRACT NUMBER OF BLANK LINES\n         CH    R5,=H'23'           ROOM FOR 1 LINE PLUS STATS\n         BL    BLDSTAT             NO, JUST GO PRINT STATS\nBLOCK1   MVI   PPPMSG,C' '         BLANK THE ENTIRE\n         MVC   PPPMSG+1(39),PPPMSG     MSG WORK AREA\n         MVC   PPPMSG(8),JCTJNAME  MOVE JOB NAME TO MSG AREA\n         MVC   PPPMSG+10(4),BINNBR MOVE BIN NUMBER  TO BIN AREA\n         MVI   PPPMSG+14,C'-'      SET DELIMETER\n         MVC   PPPMSG+15(4),BINNBR+4  MOVE BIN NUMBER  TO BIN AREA\n         TM    JITBSTAT,JITBOK     DO WE HAVE A GOOD JITB\n         BNO   BLOCK1A             NO, BRANCH\n         CLC   JITBPSID,=CL20' '   SEE IF PRIMARY SEP ID SPECIFIED\n         BNH   BLOCK1A             NO, USE DEFAULT\n         MVC   PPPMSG+10(9),=CL20' ' BLANK BIN AREA\n         MVC   PPPMSG+10(4),JITBPSID MOVE PRIM SEP ID1 TO BIN AREA\n         MVC   PPPMSG+15(4),JITBPSID+4 MOVE PRIM SEP ID2 TO BIN AREA\n         CLC   JITBPSID(4),=CL20' ' SEE IF PRIMARY SEP ID1 SPECIFIED\n         BE    BLOCK1A             NO, NO DELIMETER\n         CLC   JITBPSID+4(4),=CL20' ' SEE IF PRIMARY SEP ID2 SPECIFIED\n         BE    BLOCK1A             NO, NO DELIMETER\n         MVI   PPPMSG+14,C'-'      SET DELIMETER\nBLOCK1A  $CALL BLK5X7              CALL 5X7 BLOCK ROUTINE\n         SH    R5,=H'9'            SUBTRACT LINES FOR BLOCK AND BLANKS\n         CH    R5,=H'23'           ROOM FOR ANOTHER LINE PLUS STATS\n         BL    BLDSTAT             NO, JUST GO PRINT STATS\nBLOCK2   MVI   PPPMSG,C' '         BLANK THE ENTIRE\n         MVC   PPPMSG+1(39),PPPMSG     MSG WORK AREA\n         L     R6,PPPWKJOE         LOAD ADDRESS OF WORK JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         CLI   JOENAME,C'0'        SEE IF JOE GROUP NAME NUMERIC\n         BNL   BLOCK2A             YES, LEAVE BLANK\n         MVC   PPPMSG(8),JOENAME   MOVE JOE OUTPUT NAME TO MSG AREA\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\nBLOCK2A  $CALL BLK5X7              CALL 5X7 BLOCK ROUTINE\n         SH    R5,=H'9'            SUBTRACT LINES FOR BLOCK AND BLANKS\n         CH    R5,=H'23'           ROOM FOR ANOTHER LINE PLUS STATS\n         BL    BLDSTAT             NO, JUST GO PRINT STATS\nBLOCK3   MVI   PPPMSG,C' '         BLANK THE ENTIRE\n         MVC   PPPMSG+1(39),PPPMSG     MSG WORK AREA\n         MVC   PPPMSG(20),JCTPNAME MOVE PGMR NAME TO MSG AREA\n         $CALL BLK5X7              CALL 5X7 BLOCK ROUTINE\n         SH    R5,=H'9'            SUBTRACT LINES FOR BLOCK AND BLANKS\n         CH    R5,=H'23'           ROOM FOR ANOTHER LINE PLUS STATS\n         BL    BLDSTAT             NO, JUST GO PRINT STATS\nBLOCK4   MVI   PPPMSG,C' '         BLANK THE ENTIRE\n         MVC   PPPMSG+1(39),PPPMSG     MSG WORK AREA\n         TM    JITBSTAT,JITBOK     DO WE HAVE A GOOD JITB\n         BNO   BLOCK4A             NO, BRANCH\n         CLI   JITBPGMR,C' '       SEE IF PROGRAMMER NAME SPECIFIED\n         BNH   BLOCK4A             NO, USE BLANKS\n         MVC   PPPMSG(20),JITBPGMR MOVE PROGRAMMER NAME TO MSG AREA\nBLOCK4A  $CALL BLK5X7              CALL 5X7 BLOCK ROUTINE\n         SH    R5,=H'9'            SUBTRACT LINES FOR BLOCK AND BLANKS\n         CH    R5,=H'23'           ROOM FOR ANOTHER LINE PLUS STATS\n         BL    BLDSTAT             NO, JUST GO PRINT STATS\nBLOCK5   MVI   PPPMSG,C' '         BLANK THE ENTIRE\n         MVC   PPPMSG+1(39),PPPMSG     MSG WORK AREA\n         MVC   PPPMSG(8),JCTJOBID  MOVE JOBID TO MSG AREA\nBLOCK5A  CLI   PPPMSG+4,C' '       SEE IF LEFT JUSTIFIED\n         BNE   BLOCK5B             YES, GET OUT\n         MVC   PPPMSG+4(4),PPPMSG+5 SHIFT JOB NUMBER\n         B     BLOCK5A             LOOP\nBLOCK5B  DS    0H\n         TM    JITBSTAT,JITBOK     DO WE HAVE A GOOD JITB\n         BNO   BLOCK5C             NO, BRANCH\n         CLC   JITBSSID,=CL20' '   SEE IF SECOND SEP ID1 SPECIFIED\n         BNH   BLOCK5C             NO, LEAVE IT BLANK\n         MVC   PPPMSG+10(4),JITBSSID MOVE SECOND SEP ID1 TO BIN AREA\n         MVC   PPPMSG+15(4),JITBSSID+4 MOVE SECOND SEP ID2 TO BIN AREA\n         CLC   JITBSSID(4),=CL20' ' SEE IF SECOND SEP ID1 SPECIFIED\n         BE    BLOCK5C             NO, NO DELIMETER\n         CLC   JITBSSID+4(4),=CL20' ' SEE IF SECOND SEP ID2 SPECIFIED\n         BE    BLOCK5C             NO, NO DELIMETER\n         MVI   PPPMSG+14,C'-'      SET DELIMETER\nBLOCK5C  $CALL BLK5X7              CALL 5X7 BLOCK ROUTINE\n         SH    R5,=H'9'            SUBTRACT LINES FOR BLOCK AND BLANKS\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        BUILD THE DETAILED STATISTICS LINES WHICH FOLLOW THE         *\n*        BLOCK LETTERS.                                               *\n*                                                                     *\n***********************************************************************\nBLDSTAT  L     R1,BUFWRK           LOAD ADDRESS OF BUFFER WORK AREA\n         MVI   0(R1),X'40'         SET BLANK LINE\n         LA    R0,1                LOAD LINE LENGTH\n         $PRPUT DATA=(R1),LEN=(R0),WAIT=YES,COUNT=4 WRITE 4 BLANK LNES\n         SH    R5,=H'4'            SUBTRACT NUMBER OF BLANK LINES\n         $CALL STATLNE             GO BUILD STATISTICS LINES\n         LA    R6,STAT1            POINT TO FIRST STATISTICS LINE\n         LA    R7,10               SET LOOP COUNTER\nBLDSTAT1 LA    R0,132              SET LENGTH OF RECORD\n         LR    R1,R6               LOAD ADDRESS OF STATISTICS LINE\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES\n         LA    R6,132(R6)          INCREMENT TO NEXT STATISTICS LINE\n         BCT   R7,BLDSTAT1         LOOP UNTIL ALL 10 ARE PRINTED\n         SH    R5,=H'10'           SUBTRACT LINES FOR STATISTICS\n         LTR   R5,R5               TEST REMAIN LINE COUNT IN REG 5\n         BNP   CALLPRNT            NOT GREATER THAN ZERO, DONE\n         L     R1,BUFWRK           LOAD ADDRESS OF BUFFER WORK AREA\n         MVI   0(R1),X'40'         SET BLANK LINE\n         LA    R0,1                LOAD LINE LENGTH\n         $PRPUT DATA=(R1),LEN=(R0),WAIT=YES,COUNT=1 WRITE 1 BLANK LNES\n         SH    R5,=H'1'            SUBTRACT NUMBER OF BLANK LINES\n         LTR   R5,R5               TEST REMAIN LINE COUNT IN REG 5\n         BNP   CALLPRNT            NOT GREATER THAN ZERO, DONE\n***********************************************************************\n*                                                                     *\n*        CALL SEPLINE ROUTINE TO BUILD THE SINGLE SEPARATOR LINE      *\n*        WHICH WILL BE PRODUCED MULTIPLE TIMES DEPENDING ON THE       *\n*        SPECIFIED NUMBER OF LINES ON THE SEPARATOR PAGE FOR THE      *\n*        DEVICE.                                                      *\n*                                                                     *\n***********************************************************************\nBLDSEPLN $CALL SEPLINE             GO BUILD SINGLE SEPARATOR LINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PRODUCE THE SINGLE LINE WHICH WAS JUST CREATED AS MANY       *\n*        TIMES AS REQUIRED TO FILL THE REST OF THE PAGE AS DEFINED    *\n*        BY JES2 INITIALIZATION PARAMETERS.  THE NUMBER OF LINES      *\n*        LEFT TO PRINT IS IN REGISTER R5.                             *\n*                                                                     *\n***********************************************************************\n         LTR   R5,R5               TEST REMAIN LINE COUNT IN REG 5\n         BNP   CALLPRNT            NOT GREATER THAN ZERO, DONE\nSEPLP    SLR   R0,R0               CLEAR REG 0 FOR IC\n         IC    R0,HDR              LOAD LINE LENGTH\n         LA    R1,HDR+1            LOAD ADDRESS OF TRUE LINE\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES\n         BCT   R5,SEPLP            LOOP UNTIL DONE\n         B     CALLPRNT            DONE WITH PAGE, RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*                        P U N C H                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        PRODUCE THE SETUP HEADER FOR A SNA REMOTE IF REQUIRED.       *\n*                                                                     *\n***********************************************************************\nPUNCH    TM    MDCTFEAT,DCTPSHDR   SEE IF SETUP HDR REQUIRED\n         BNO   PUNCH1              NO, BYPASS $SEPPDIR ROUTINE\n         $SEPPDIR (R4)             SEND PDIR TO SNA RMT\nPUNCH1   MVC   EXITWRK3(4),JCTROOMN SET ROOM NUMBER\n         MVC   EXITWRK3+4(4),JCTJOBID+4 AND JOB NUMBER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONVERT EACH OF THE EIGHT CHARACTERS IN PEXITWRK3 TO         *\n*        A STRING OF 8 CHARACTERS WHICH WILL PRINT AS A 12-11-X       *\n*        PUNCH.  EACH CHARACTER WILL BE PRECEDED BY A NULL            *\n*        12-11 PUNCH TO DIVIDE THE CHARACTERS.                        *\n*                                                                     *\n*        NOTE THAT THAT THE ZONE PORTION OF ALPHA CHARACTERS WILL     *\n*        BE LOST LEAVING ONLY THE NUMERIC PORTION ALONG WITH THE      *\n*        12-11 ZONE PUNCH.  ALSO NOTE THAT ALL CHARACTERS LESS        *\n*        AN \"A\" WILL PRINT AS A NULL 12-11 PUNCH.                     *\n*                                                                     *\n***********************************************************************\n         LA    R6,80               SET LENGTH TO 80\n         STC   R6,HDRLEN           AND SAVE IT IN THE BUFFER\n         LA    R6,HDR+1            LOAD START OF PUNCH LINE IN BUFFER\n         SLR   R5,R5               ZERO INDEX POINTER\nPUNCH2   MVI   0(R6),X'6A'         START THE FIELD WITH 12-11 PNCH\n         IC    R0,EXITWRK3(R5)     LOAD NEXT CHARACTER\n         STC   R0,1(,R6)           MOVE CHARACTER TO BUFFER\n         OI    1(R6),X'30'         MASK LETTERS TO NUMERIC\n         CLI   1(R6),X'F0'         SEE IF NOW ZERO\n         BE    PUNCH3              YES, GO SET TO X'E0'\n         BH    PUNCH4              GT ZERO, GO MASK TO 12-11-X\n         MVI   1(R6),X'EA'         LT, SET TO X'EA'\nPUNCH3   XI    1(R6),X'E0'         MASK OFF X'E0'\nPUNCH4   XI    1(R6),X'60'         MASK RESULTING CHARACTER TO 12-11-X\n         MVC   2(7,R6),1(R6)       PROPAGATE CHARACTER 7 MORE TIMES\n         MVI   9(R6),X'6A'         END FIELD WITH 12-11 PUNCH\n         LA    R6,10(,R6)          INCREMENT TO NEXT OUTPUT AREA\n         LA    R5,1(,R5)           INCREMENT TO NEXT INPUT CHARACTER\n         CH    R5,=H'8'            SEE IF END OF INPUT\n         BL    PUNCH2              NO, LOOP\n***********************************************************************\n*                                                                     *\n*        PRODUCE PUNCH LACE CARD                                      *\n*                                                                     *\n***********************************************************************\n         SLR   R0,R0               CLEAR REG 0 FOR IC\n         IC    R0,HDR              LOAD LINE LENGTH\n         LA    R1,HDR+1            LOAD ADDRESS OF TRUE LINE\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES\n***********************************************************************\n*                                                                     *\n*        PRODUCE BLANK SEPARATOR CARD IF NOT A 3525                   *\n*                                                                     *\n***********************************************************************\n         CLI   PPPDEVTP+3,X'0C'    IS THIS A 3525\n         BE    PUNCH6              YES, DO NOT PUNCH A BLANK CARD\n         MVC   HDR(2),=X'0140'     MOVE BLANK CARD INTO BUFFER\n         LA    R0,2                LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF BLANK CARD\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\nPUNCH6   DS    0H\n         AIF   ('&UCC7' NE 'YES').UCC7#2\n***********************************************************************\n*                                                                     *\n*        CALL UCC7 TASK TO DEMAND A JOB NETWORK IF THE JITB           *\n*        THAT HAS BEEN READ FOR THE JOB REQUESTS THIS ACTION.         *\n*                                                                     *\n***********************************************************************\n         TM    JITBSTAT,JITBOK     DO WE HAVE A GOOD JITB\n         BNO   EXIT                NO, GET OUT\n         CLI   JITBU7FL,C'Y'       SEE IF UCC7 NETWORK REQUESTED\n         BNE   EXIT                NO, GET OUT\n         $CALL CALLUC7             CALL UCC7 TASK\n.UCC7#2  ANOP\n         B     EXIT                DONE, GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                      K O M S T A R                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        PRODUCE THE PROPER NATIVE MODE COMMANDS FOR THE KODAK        *\n*        KOMSTAR UNIT IF REQUIRED FOR THE SYSOUT CLASS BEING          *\n*        PROCESSED.                                                   *\n*                                                                     *\n***********************************************************************\nKOMSTAR  L     R6,PPPWKJOE         LOAD ADDRESS OF WORK JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         CLI   JOECURCL,C'Q'       PREFORMATTED KOM80 CLASS\n         BE    EXIT                DO NOTHING\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\n         CLC   REASON,=H'8'        TEST ENTRY REASON CODE\n         BE    KOMEND              EIGHT, END, BRANCH\n         B     KOMBEG              START OR CONT, BRANCH\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        FORCE FICHE EJECT AT END OF PROCESSING                       *\n*                                                                     *\n***********************************************************************\nKOMEND   MVC   HDR(LKOMRCD5),KOMRCD5 MOVE EJECT SEQUENCE TO      BUFFER\n         LA    R0,LKOMRCD5         LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF EJECT COMMAND\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         AIF   ('&UCC7' NE 'YES').UCC7#3\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CALL UCC7 TASK TO DEMAND A JOB NETWORK IF THE JITB           *\n*        THAT HAS BEEN READ FOR THE JOB REQUESTS THIS ACTION.         *\n*                                                                     *\n***********************************************************************\n         TM    JITBSTAT,JITBOK     DO WE HAVE A GOOD JITB\n         BNO   EXIT                NO, GET OUT\n         CLI   JITBU7FL,C'Y'       SEE IF UCC7 NETWORK REQUESTED\n         BNE   EXIT                NO, GET OUT\n         $CALL CALLUC7             CALL UCC7 TASK\n.UCC7#3  ANOP\n         B     EXIT                DONE, GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SET FCB, FICHE FORMAT AND TITLES AT START OF PROCESSING      *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n*        WRITE KOMSTAR TITLE RECORD                                   *\n***********************************************************************\nKOMBEG   MVC   HDR(LKOMRCD0),KOMRCD0 MOVE TITLE RECORD TO BUFFER\n         MVC   JNAME,JCTJNAME      MOVE JOBNAME TO BUFFER\n         MVC   JOBID(1),JCTJOBID   SET JOB ID CHARACTER\n         MVC   JOBID+1(4),JCTJOBID+4 SET JOB ID NUMBER\n         LA    R0,LKOMRCD0         LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF TITLE RECORD\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         L     R6,PPPWKJOE         LOAD ADDRESS OF WORK JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         CLI   JOECURCL,C'G'       PREFORMATTED PME CLASS\n         BE    EXIT                YES, BYPASS OUR HEADING ROUTINES\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\n***********************************************************************\n*        WRITE KOMSTAR SETUP RECORD 1                                 *\n***********************************************************************\nKR1      MVC   HDR(LKOMRCD1),KOMRCD1 MOVE 1ST SETUP TO BUFFER\n         AIF   ('&UJQE' NE 'YES').UJQE#2\n         L     R7,JCTJQE           LOAD OFFSET OF JQE\n         AL    R7,$JOBQPTR         CALCULATE ADDRESS OF JQE\n         USING JQE,R7              SET ADDRESSABILITY TO JQE\n         CLI   JQEXFLG1,JQEXPROD   SEE IF PRODUCTION JOB\n         BNE   KR1A                NO, LEAVE THE REVERSE IMAGE ALONE\n         MVI   RIMAGE,C' '         YES, TURN OFF REVERSE IMAGE\n         DROP  R7                  DROP ADDRESSABILITY TO JQE\n.UJQE#2  ANOP\nKR1A     LA    R0,LKOMRCD1         LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF SETUP COMMAND\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n***********************************************************************\n*        WRITE KOMSTAR SETUP RECORD 2                                 *\n***********************************************************************\nKR2      MVC   HDR(LKOMRCD2),KOMRCD2 MOVE 2ND SETUP TO BUFFER\n         MVC   KJOBNM,JCTJNAME     MOVE JOBNAME TO BUFFER\n         MVC   KJOBID(1),JCTJOBID  SET JOB ID CHARACTER\n         MVC   KJOBID+1(4),JCTJOBID+4 SET JOB ID NUMBER\n         L     R6,PPPWKJOE         LOAD ADDRESS OF WORK JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         CLI   JOENAME,C'0'        SEE IF DEFAULT NAME\n         BNL   NOKGRP              YES, LEAVE IT ALONE\n         MVC   KGROUPID,JOENAME    SET OUTPUT GROUP NAME\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\nNOKGRP   LA    R0,LKOMRCD2         LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF SETUP COMMAND\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n***********************************************************************\n*        WRITE KOMSTAR SETUP RECORD 3                                 *\n***********************************************************************\nKR3      MVC   HDR(LKOMRCD3),KOMRCD3 MOVE 3ND SETUP TO BUFFER\n         AIF   ('&UJQE' NE 'YES').UJQE#3\n         L     R7,JCTJQE           LOAD OFFSET OF JQE\n         AL    R7,$JOBQPTR         CALCULATE ADDRESS OF JQE\n         USING JQE,R7              SET ADDRESSABILITY TO JQE\n         CLI   JQEXOWNR,C' '       SEE IF SPECIFIED\n         BNH   KR3A                NO, BRANCH\n         MVC   KOWNER,JQEXOWNR     MOVE OWNERID TO RECORD\n         CLI   JQEXFLG1,JQEXPROD   SEE IF PRODUCTION JOB\n         BNE   KR3A                NO, LEAVE OWNERID\n         MVC   KOWNER,=CL20' '     BLANK OWNERID\n         DROP  R7                  DROP ADDRESSABILITY TO JQE\n.UJQE#3  ANOP\nKR3A     CLC   JCTPNAME,=CL20' '   SEE IF PGMR NAME SPECIFIED\n         BNE   KR3C                YES, BRANCH\n         CLI   JCTJOBID,C'J'       IS THIS A BATCH JOB?\n         BE    KR3C                YES, BRANCH\n         CLI   JCTJOBID,C'T'       IS THIS A TSO USER?\n         BE    KR3B                YES, BRANCH\n         MVC   JCTPNAME,=CL20'TECH SUP' SET PGMR NAME TO 'TECH SUP'\n         B     KR3C                BRANCH\nKR3B     MVC   JCTPNAME,=CL20'TSO USER' SET PGMR NAME TO 'TSO USER'\nKR3C     MVC   KPNAME1,JCTPNAME    MOVE PROGRAMMER NAME PART1 TO BUFFER\n         MVC   KPNAME2,JCTPNAME+10 MOVE PROGRAMMER NAME PART2 TO BUFFER\n         TM    JITBSTAT,JITBOK     DO WE HAVE A GOOD JITB\n         BNO   KR3D                NO, BRANCH\n         MVC   KONAME1,JITBPGMR    MOVE OWNER NAME PART1 TO BUFFER\n         MVC   KONAME2,JITBPGMR+10 MOVE OWNER NAME PART2 TO BUFFER\nKR3D     LA    R0,LKOMRCD3         LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF SETUP COMMAND\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n***********************************************************************\n*        WRITE KOMSTAR SETUP RECORD 4                                 *\n***********************************************************************\nKR4      MVC   HDR(LKOMRCD4),KOMRCD4 MOVE 4TH SETUP TO BUFFER\n         MVC   KPBIN(4),BINNBR     SET FIRST PART OF DFLT BIN NUMBER\n         MVI   KPBIN+4,C'-'        SET BIN NUMBER SEPARATOR\n         MVC   KPBIN+5(4),BINNBR+4 SET SECOND PART OF DFLT BIN NUMBER\n         TM    JITBSTAT,JITBOK     DO WE HAVE A GOOD JITB\n         BNO   KR4B                NO, BRANCH\n         CLC   JITBPSID,=CL20' '   SEE IF PRIM SEP ID1 SPECIFIED\n         BNH   KR4A                NO, LEAVE IT ALONE\n         MVC   KPBIN(4),JITBPSID   MOVE PRIM SEP ID1 TO BIN AREA\n         MVC   KPBIN+5(4),JITBPSID+4 MOVE PRIM SEP ID1 TO BIN AREA\n         CLC   JITBPSID(4),=CL20' ' SEE IF PRIM SEP ID1 SPECIFIED\n         BE    KR4A                NO, NO DELIMETER\n         CLC   JITBPSID+4(4),=CL20' ' SEE IF PRIM SEP ID2 SPECIFIED\n         BE    KR4A                NO, NO DELIMETER\n         MVI   KPBIN+4,C'-'        SET DELIMETER\nKR4A     CLC   JITBSSID,=CL20' '   SEE IF SECOND SEP ID1 SPECIFIED\n         BNH   KR4B                NO, LEAVE IT ALONE\n         MVC   KSBIN(4),JITBSSID   MOVE SECOND SEP ID1 TO BIN AREA\n         MVC   KSBIN+5(4),JITBSSID+4 MOVE SECOND SEP ID1 TO BIN AREA\n         CLC   JITBSSID(4),=CL20' ' SEE IF SECOND SEP ID1 SPECIFIED\n         BE    KR4B                NO, NO DELIMETER\n         CLC   JITBSSID+4(4),=CL20' ' SEE IF SECOND SEP ID2 SPECIFIED\n         BE    KR4B                NO, NO DELIMETER\n         MVI   KSBIN+4,C'-'        SET DELIMETER\nKR4B     MVC   KTIME1,TOD          MOVE TIME (HH.MM.SS) TO BUFFER\n         OI    KTIME1,X'F0'        ELIMINATE POSSIBLE LEADING BLANK\n         MVC   KTIME2,TOD+9        MOVE TIME (AM/PM)    TO BUFFER\n         MVC   KDATE,CDATE         MOVE DATE (MM/DD/YY) TO BUFFER\n         LA    R0,LKOMRCD4         LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF SETUP COMMAND\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         B     EXIT                DONE, GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*            D A T A G R A P H I X     A R I S   /   X L              *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        DETERMINE THE PROPER DATAGRAPHIX \"JOB\" ID AND SEND THE       *\n*        COMMAND TO THE UNIT.  IF JES2 INFORMATION IS REQUIRED        *\n*        BY THE \"JOB\" TO DETERMINE THE HEADINGS, A STANDARD           *\n*        HEADING LINE WILL ALSO BE SENT.                              *\n*                                                                     *\n*        THE DATAGRAPHIX \"JOB\" ID WILL BE DETERMINED FROM THE         *\n*        WRITER NAME.  IF THERE IS NO NAME SPECIFIED, THE             *\n*        DEFAULT NAME OF 'STD' SILL BE USED.                          *\n*                                                                     *\n*        TITLE RECORDS WILL BE SENT TO THE DEVICE AFTER THE           *\n*        JOBID IS SENT.  THE DEFAULT DATAGRAPHIX JOB OR EVEN          *\n*        THE SPECIFIED JOB CAN OPTIONALLY EXTRACT JOB RELATED         *\n*        INFORMATION FROM THESE RECORDS.                              *\n*                                                                     *\n***********************************************************************\nDX       CLC   REASON,=H'8'        TEST ENTRY REASON CODE\n         BE    DXEND               EIGHT, END, EXIT\n         MVC   HDR(LDXR1),DXR1     MOVE DATAGRAPHIX START JOB TO BUF\n         L     R6,PPPCHJOE         LOAD ADDRESS CHARACTERISTICS JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         MVC   HDR+14(8),JOEWTRID  SET DX JOB ID FROM WRITERID\n         CLI   JOEWTRID,C'A'       SEE IF WRITERID SPECIFIED\n         BNL   DX1                 YES, BRANCH\n         MVC   HDR+14(6),=C'STD   ' SET DEFAULT JOB NAME\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\nDX1      LA    R0,LDXR1            LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF DX CONTROL RECD\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         SPACE 3\n***********************************************************************\n*        BUILD THE FIRST TITLE RECORD FOR THE DATAGRAPHIX DEVICE.     *\n***********************************************************************\n         MVI   TREC1,C' '          CLEAR ENTIRE\n         MVC   TREC1+1(132),TREC1        BUFFER\n         MVC   TRECID1,=CL5'TREC1' SET RECORD ID\n         MVC   TRJOBNM,JCTJNAME    SET JOB NAME\n         MVC   TRJOBID,JCTJOBID    SET JOB NUMBER\n         MVC   TRPNAME,JCTPNAME    SET PROGRAMMER NAME\n         MVC   TRPBIN(8),BINNBR    SET PRIMARY BIN NUMBER\n         TM    JITBSTAT,JITBOK     SEE IF JITB READ SUCCESSFULLY\n         BNO   DX2                 NO, BRANCH\n         CLC   JITBPSID,=CL20' '   SEE IF PRIMARY SEPID SPECIFIED\n         BE    DX2                 NO, LEAVE THE DEFAULT\n         MVC   TRPBIN,=CL20' '     BLANK THE BIN NUMBER\n         MVC   TRPBIN(4),JITBPSID  SET PRIMARY BIN NUMBER PART 1\n         MVC   TRPBIN+5(4),JITBPSID+4   SET PRIMARY BIN NUMBER PART 2\n         CLC   JITBPSID(4),=CL20' ' SEE IF FIRST PART EXISTS\n         BE    DX2                 NO, NO DELIMETER\n         CLC   JITBPSID+4(4),=CL20' ' SEE IF SECOND PART EXISTS\n         BE    DX2                 NO, NO DELIMETER\n         MVI   TRPBIN+4,C'-'       SET DELIMETER\nDX2      L     R6,PPPWKJOE         LOAD ADDRESS OF WORK JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         CLI   JOENAME,C'0'        SEE IF DEFAULT NAME\n         BNL   DX3                 YES, LEAVE IT ALONE\n         MVC   TRGROUP,JOENAME     SET OUTPUT GROUP NAME\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\nDX3      MVC   TRCDATE,CDATE       SET CALENDAR DATE (MM/DD/YY)\n         MVC   TRJDATE,JDATE       SET JULIAN DATE   (YY.DDD)\n         MVC   TRTIME,TOD          SET TIME\n         OI    TRTIME,X'F0'        ELIMINATE POSSIBLE LEADING BLANK\n***********************************************************************\n*        WRITE THE FIRST TITLE RECORD FOR THE DATAGRAPHIX DEVICE.     *\n***********************************************************************\n         MVI   TRECCTL1,X'C9'      SET DX CHANNEL COMMAND CODE\n         MVI   TRECCTL1+1,X'15'    SET CONTROL RECORD ID\n         LA    R0,133              LOAD LINE LENGTH\n         LA    R1,TREC1            LOAD ADDRESS OF DX CONTROL RECD\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         SPACE 3\n         AIF   ('&UJQE' NE 'YES' AND '&JIT' NE 'YES').JIT#1\n***********************************************************************\n*        BUILD THE SECOND TITLE RECORD FOR THE DATAGRAPHIX DEVICE.    *\n***********************************************************************\n         MVI   TREC2,C' '          CLEAR ENTIRE\n         MVC   TREC2+1(132),TREC2        BUFFER\n         MVC   TRECID2,=CL5'TREC2' SET RECORD ID\n         AIF   ('&UJQE' NE 'YES').UJQE#4\n         L     R7,JCTJQE           LOAD OFFSET OF JQE\n         AL    R7,$JOBQPTR         CALCULATE ADDRESS OF JQE\n         USING JQE,R7              SET ADDRESSABILITY TO JQE\n         MVC   TRTPIND,JQEXFLG1    SAVE TEST/PRODUCTION INDICATOR\n         MVC   TROWNER,JQEXOWNR    SET OWNERID\n         DROP  R7                  DROP ADDRESSABILITY TO JQE\n.UJQE#4  ANOP\n         TM    JITBSTAT,JITBOK     SEE IF JITB READ SUCCESSFULLY\n         BNO   DX5                 NO, BRANCH\n         CLC   JITBSSID,=CL8' '    SEE IF SECONDARY SEPID SPECIFIED\n         BE    DX4                 NO, LEAVE IT BLANK\n         MVC   TRSBIN(4),JITBSSID  SET SECONDARY SEPARATOR ID PART 1\n         MVC   TRSBIN+5(4),JITBSSID+4 SET SECOND SEPARATOR ID PART 2\n         CLC   JITBSSID(4),=CL20' ' SEE IF FIRST PART EXISTS\n         BE    DX4                 NO, NO DELIMETER\n         CLC   JITBSSID+4(4),=CL20' ' SEE IF SECOND PART EXISTS\n         BE    DX4                 NO, NO DELIMETER\n         MVI   TRSBIN+4,C'-'       SET DELIMETER\nDX4      MVC   TROWNAME,JITBPGMR   SET OWNERID NAME\n         MVC   TRLOC,JITBLOC       SET LOCATION\n         MVC   TRDEPT,JITBDEPT     SET DEPARTMENT\n         MVC   TRMAIL,JITBMAIL     SET MAIL CODE\n         MVC   TRPHONE,JITBPHON    SET PHONE NUMBER\n***********************************************************************\n*        WRITE THE SECOND TITLE RECORD FOR THE DATAGRAPHIX DEVICE.    *\n***********************************************************************\nDX5      MVI   TRECCTL2,X'C9'      SET DX CHANNEL COMMAND CODE\n         MVI   TRECCTL2+1,X'15'    SET CONTROL RECORD ID\n         LA    R0,133              LOAD LINE LENGTH\n         LA    R1,TREC2            LOAD ADDRESS OF DX CONTROL RECD\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n.JIT#1   ANOP\n         B     EXIT                DONE, EXIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORCE FICHE EJECT AT END OF PROCESSING                       *\n*                                                                     *\n***********************************************************************\nDXEND   MVC    HDR(LDXR2),DXR2     MOVE EJOB RECORD TO BUFFER\n         LA    R0,LDXR2            LOAD LINE LENGTH\n         LA    R1,HDR              LOAD ADDRESS OF EJOB RECORD\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         AIF   ('&UCC7' NE 'YES').UCC7#4\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CALL UCC7 TASK TO DEMAND A JOB NETWORK IF THE JITB           *\n*        THAT HAS BEEN READ FOR THE JOB REQUESTS THIS ACTION.         *\n*                                                                     *\n***********************************************************************\n         TM    JITBSTAT,JITBOK     DO WE HAVE A GOOD JITB\n         BNO   EXIT                NO, GET OUT\n         CLI   JITBU7FL,C'Y'       SEE IF UCC7 NETWORK REQUESTED\n         BNE   EXIT                NO, GET OUT\n         $CALL CALLUC7             CALL UCC7 TASK\n.UCC7#4  ANOP\n         B     EXIT                DONE, GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                           E X I T                                   *\n*                                                                     *\n*             RETURN CODE OF 8 TELLS JES2 TO PRODUCE ANY USER         *\n*             SEPARATOR THAT HAS BEEN CREATED AND TO SUPPRESS         *\n*             THE STANDARD SEPARATOR.                                 *\n*                                                                     *\n***********************************************************************\nEXIT     $FREEBUF (R4)             FREE FIRST WORK BUFFER\n         $FREEBUF (R8)             FREE SECOND WORK BUFFER\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\nTRTX     EQU   *-240\n         DC    C'0123456789ABCDEF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS USED BY THIS JES2 EXIT                             *\n*                                                                     *\n***********************************************************************\nYEARTBL  DC    AL1(31),C'JAN',AL1(28),C'FEB'   JULIAN DATE\n         DC    AL1(31),C'MAR',AL1(30),C'APR'       TO\n         DC    AL1(31),C'MAY',AL1(30),C'JUN'  DAY AND MONTH\n         DC    AL1(31),C'JUL',AL1(31),C'AUG'    CONVERSION\n         DC    AL1(30),C'SEP',AL1(31),C'OCT'      TABLE\n         DC    AL1(30),C'NOV',AL1(99),C'DEC'\n         SPACE 3\nJNAME    EQU   HDR+6,8                      JOBNAME\nJOBID    EQU   HDR+14,5                     JOBID\nKOMRCD0  DS    0H\n         DC    X'01'\n         DC    X'4163FF'\n         DC    CL20'W1'                     TITLE INFORMATION RECORD\n         DC    X'FC10'                      CONTINUE\nLKOMRCD0 EQU   *-KOMRCD0\nRIMAGE   EQU   HDR+93,1                     REVERSE IMAGE IND\nKOMRCD1  DS    0H\n         DC    X'01'\n         DC    X'4163FF'\n         DC    CL20'11013335162728141116'   SYSTEM\n         DC    CL20'20101020303090417'      FCB PART 1\n         DC    CL20'20525063307410849'      FCB PART 2\n         DC    CL20'21055115612600964'      FCB PART 3\n         DC    CL20'H10001  YY'             SEQUENCE NBR & REV IMAGE\n         DC    CL20'G101133B'               GRID\n         DC    X'FC10'                      CONTINUE\nLKOMRCD1 EQU   *-KOMRCD1\nKJOBNM   EQU   HDR+54,8                     JOB NAME\nKJOBID   EQU   HDR+74,5                     JOB ID\nKGROUPID EQU   HDR+94,8                     OUTPUT GROUPID\nKOMRCD2  DS    0H\n         DC    X'01'\n         DC    X'4163FF'\n         DC    CL20'AR1160002132'\n         DC    CL20'H2 3 Y 64'              MAXIMUM LINES = 64\n         DC    CL20'B108014T            '   JOBNAME\n         DC    CL20'B205014B            '   JOB NUMBER\n         DC    CL20'B308034T1           '   OUTPUT GROUP ID\n         DC    X'FC10'                      CONTINUE\nLKOMRCD2 EQU   *-KOMRCD2\nKOWNER   EQU   HDR+14,10                    OWNER ID\nKPNAME1  EQU   HDR+34,10                    PROGRAMMER NAME PART 1\nKPNAME2  EQU   HDR+54,9                     PROGRAMMER NAME PART 2\nKONAME1  EQU   HDR+74,10                    OWNER NAME PART 1\nKONAME2  EQU   HDR+94,9                     OWNER NAME PART 2\nKOMRCD3  DS    0H\n         DC    X'01'\n         DC    X'4163FF'\n         DC    CL20'B408034B1           '   ONWER ID\n         DC    CL20'B510054T2           '   PROGRAMMER NAME PART 1\n         DC    CL20'B609084T            '   PROGRAMMER NAME PART 2\n         DC    CL20'B710054B2           '   OWNER NAME PART 1\n         DC    CL20'B809084B            '   OWNER NAME PART 2\n         DC    X'FC10'                      CONTINUE\nLKOMRCD3 EQU   *-KOMRCD3\nKPBIN    EQU   HDR+14,9                     PRIMARY BIN NUMBER\nKSBIN    EQU   HDR+34,9                     SECONDARY BIN NUMBER\nKTIME1   EQU   HDR+54,8                     TIME PART 1\nKTIME2   EQU   HDR+74,2                     TIME PART 2\nKDATE    EQU   HDR+94,8                     DATE\nKOMRCD4  DS    0H\n         DC    X'01'\n         DC    X'4163FF'\n         DC    CL20'B909104T2           '   PRIMARY BIN NUMBER\n         DC    CL20'BA09104B2           '   SECONDARY BIN NUMBER\n         DC    CL20'BB08134T            '   TIME PART 1\n         DC    CL20'BC02154T1           '   TIME PART 2\n         DC    CL20'BD08134B            '   DATE\n         DC    CL20'BE04164T  S$$$      '   SEQUENCE NUMBER\n         DC    X'1040'                      END\nLKOMRCD4 EQU   *-KOMRCD4\nKOMRCD5  DS    0H\n         DC    X'01'\n         DC    X'4163FF'\n         DC    CL20'11013335162728141116'   SYSTEM\n         DC    CL20'20101020303090417'      FCB PART 1\n         DC    CL20'20525063307410849'      FCB PART 2\n         DC    CL20'21055115612600964'      FCB PART 3\n         DC    CL20'ASM0013???'             ELIMINATE BLANK FICHE\n         DC    X'1040'                      END\nLKOMRCD5 EQU   *-KOMRCD5\nDXR1     DS    0H\n         DC    X'C9'\n         DC    X'0D4040'\n         DC    CL10'SJOB LOAD '             START JOB COMMAND\n         DC    CL6'       '                 DATAGRAPHIX PROCESS NAME\n         DC    CL2'  '\nLDXR1 EQU      *-DXR1\nDXR2     DS    0H\n         DC    X'C9'\n         DC    X'0D4040'\n         DC    CL10'EJOB'                   END JOB COMMAND\nLDXR2 EQU      *-DXR2\n         AIF   ('&XJCF' NE 'YES').XJCF#5\nDJDECRD  DC    X'01'\n         DC    C'$X9700$DJDE ASSIGN=(1,1),;'\nLDJDECRD EQU   *-DJDECRD\nDJDE1A   DC    X'01'\n         DC    C'$X9700$DJDE COPIES=1,SHIFT=YES'\nLDJDE1A  EQU   *-DJDE1A\nDJDE1B   DC    C',FORMAT=LF148,FONTINDEX=0,DATA=(1,150),FORMS=NONE,MODIX\n               FY=NONE,'\nLDJDE1B  EQU   *-DJDE1B\nDJDE2    DC    X'01'\n         DC    C'$X9700$DJDE OTEXT=(''JJJJJJJJ(JOB NNNN)               X\n                                                  '\nLDJDE2   EQU   *-DJDE2\n.XJCF#5 ANOP\n         SPACE 3\n***********************************************************************\n*        ROUTINE CONSTANTS                                            *\n***********************************************************************\n         LTORG\n         EJECT\n         TITLE '5 X 7 BLOCK LETTER SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*              5 X 7 BLOCK LETTER ROUTINE                             *\n*                                                                     *\n*        ON INPUT:                                                    *\n*                                                                     *\n*        R2     - JITB ADDRESS                                        *\n*        R3     - DCT ADDRESS                                         *\n*        R4     - BUFFER ADDRESS                                      *\n*        R8     - COMMON EXIT WORK AREA                               *\n*        R11    - HCT                                                 *\n*        R13    - PCE                                                 *\n*        R15    - ENTRY POINT ADDRESS                                 *\n*        PPPMSG - CHARACTERS TO PRINT                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nBLK5X7   $SAVE\n         USING BLK5X7,R12          SET ADDRESSABILITY TO ROUTINE\n         LR    R12,R15             SET BASE REGISTER\n         L     R3,BUFWRK           LOAD ADDRESS OF PRINT BUFFER\n         LA    R4,132              LOAD LENGTH OF PRINT LINE\n         LA    R5,7                SET LINE CTR TO 7\n         LA    R10,BLK5X7T4-65     INITIALIZE TABLE POINTER\n         MVC   PPPMSG+20(20),PPPMSG DUPLICATE 19 CHARS\n         NC    PPPMSG+20(20),BLK5X7T1   REDUCE TO 64 CHAR SET\n         TR    PPPMSG+20(20),BLK5X7T2   CONVERT TO PATRN OFFST\n         NC    PPPMSG(20),BLK5X7T1      REDUCE TO 64 CHAR SET\n         TR    PPPMSG(20),BLK5X7T3      CONVERT TO DISPLY CHAR\nBLK5X7A  LA    R10,64(R10)         INCREMENT TABLE POINTER\n         SLR   R6,R6               SET INPUT  CHAR INDEX TO 0\n         SLR   R8,R8               SET OUTPUT CHAR INDEX TO 0\n         MVI   0(R3),C' '          BLANK THE ENTIRE\n         MVC   1(131,R3),0(R3)         OUTPUT LINE\nBLK5X7B  IC    R2,PPPMSG(R6)       GET DISPLAY CHAR\n         SLR   R15,R15             RESET TABLE INDEX\n         IC    R15,PPPMSG+20(R6)   SET CURRENT LETTER TBL POINTER\n         IC    R15,0(R10,R15)      TRANSLATE TO BIT PATTERN\n         LA    R7,7                SET BIT COUNTER TO 7\n         SLL   R15,24+2            PUT IN TOP OF REG\nBLK5X7C  SLL   R15,1               PUSH OUT 1 BIT\n         LTR   R15,R15             IS NEXT BIT ON?\n         BNM   BLK5X7D             NO, GO TO NEXT POSITION\n         STC   R2,0(R3,R8)         STORE THE CHAR INTO PRINT LINE\nBLK5X7D  LA    R8,1(,R8)           INCREMENT TO NEXT OUTPUT POSITION\n         BCT   R7,BLK5X7C          LOOP UNTIL ALL 7 BITS PROCESSED\nBLK5X7E  LA    R6,1(,R6)           POINT TO NEXT INPUT CHARACTER\n         CH    R6,=H'19'           HAVE WE DONE ALL 19 YET?\n         BL    BLK5X7B             NO, LOOP\nBLK5X7F  $PRPUT DATA=(R3),LEN=(R4),WAIT=YES   WRITE PRINT LINE\n         BCT   R5,BLK5X7A          LOOP UNTIL ALL 7 LINES PROCESSED\n         MVI   0(R3),X'40'         MOVE BLANK LINE\n         LA    R4,1                SET LENGTH OF LINE\n         $PRPUT DATA=(R3),LEN=(R4),WAIT=YES,COUNT=2 WRITE 2 BLANK LNES\n         $RETURN                   RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*                   5 X 7 BLOCK LETTER TABLE                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nBLK5X7T1 DC    20X'3F'             PUT ALL IN ONE QUADRANT\nBLK5X7T2 EQU   *                   XLATE TO PATTERN TBL OFFSET\n         DC    AL1(37,01,02,03,04,05,06,07,08,09,48,45,49,50,39,51)\n         DC    AL1(41,10,11,12,13,14,15,16,17,18,52,44,46,53,47,54)\n         DC    AL1(38,40,19,20,21,22,23,24,25,26,64,55,56,57,58,59)\n         DC    AL1(27,28,29,30,31,32,33,34,35,36,60,42,43,61,62,63)\n         SPACE 3\nBLK5X7T3 EQU   *                   XLATE TO EXPANSION CHAR.\n         DC    C' ABCDEFGHI*.*(+I'       ABCDEFGHI\u00a2.<(+|\n         DC    C'&&JKLMNOPQR*$*),-'     &JKLMNOPQR!$*);\u00ac\n         DC    C'-/STUVWXYZX,O-*0'      -/STUVWXYZ\u00a6,%_>?\n         DC    C'0123456789.#@''='''    0123456789:#@'=\"\n         SPACE 3\nBLK5X7T4 EQU *                     7 X 64 BIT PATTERN TABLE\n         DC    X'041E0E1E1F1F0E110E07111011111F1E0E1E0E1F'  LINE 1 BITS\n         DC    X'11111111111F0E040E0E021F0E1F0E0E00000000'\n         DC    X'0E0A0E0E00000E040201040E1000001800080E00'\n         DC    X'07000A00'\n         DC    X'0A11111110101111040212101111111111111104'  LINE 2 BITS\n         DC    X'111111111101110C111106101101111100000401'\n         DC    X'120A111500110E0F0402040E080000190004110E'\n         DC    X'0E000A00'\n         DC    X'1111101110101011040214101B19111111111004'  LINE 3 BITS\n         DC    X'1111110A0A02130401010A101002111100000402'\n         DC    X'121F0114000A00150804040E040000020002010E'\n         DC    X'1C1F0A00'\n         DC    X'1F1E10111E1E101F040218101515111E111E0E04'  LINE 4 BITS\n         DC    X'1111150404041504020E1F1E1E040E0F001F1F04'\n         DC    X'0C0A0D0E001F0E141004040E041F0E0400010600'\n         DC    X'00000000'\n         DC    X'1111101110101711040214101113111015140104'  LINE 5 BITS\n         DC    X'11111B0A04081904040102011108110100000408'\n         DC    X'0D1F1505000A0E150804040E04010E080002040E'\n         DC    X'001F0000'\n         DC    X'1111111110101111041212101111111012121104'  LINE 6 BITS\n         DC    X'110A111104101104081102111108111100000410'\n         DC    X'120A11150E11020F04020400080002130004040E'\n         DC    X'00000000'\n         DC    X'111E0E1E1F100E110E0C111F11111F100D110E04'  LINE 7 BITS\n         DC    X'0E041111041F0E0E1F0E020E0E080E0E00000000'\n         DC    X'0D0A0F0E0E000C040201040E10000C031F080400'\n         DC    X'00000000'\n         SPACE 3\n***********************************************************************\n*        ROUTINE CONSTANTS                                            *\n***********************************************************************\n         LTORG\n         EJECT\n         TITLE 'SEPARATOR RIPPLE LINE SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*        PRODUCE THE SINGLE LINE FOR THE JOB SEPARATOR ROUTINE        *\n*        WHICH WILL BE REPRODUCED MULTIPLE TIMES BASED UPON THE       *\n*        NUMBER OF LINES SET FOR THE SEPARATOR ROUTINE.               *\n*                                                                     *\n*        ON INPUT:                                                    *\n*                                                                     *\n*        R2     - JITB ADDRESS                                        *\n*        R3     - DCT ADDRESS                                         *\n*        R4     - BUFFER ADDRESS                                      *\n*        R8     - COMMON EXIT WORK AREA                               *\n*        R11    - HCT                                                 *\n*        R13    - PCE                                                 *\n*        R15    - ENTRY POINT ADDRESS                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nSEPLINE  $SAVE\n         USING SEPLINE,R12         SET ADDRESSABILITY TO ROUTINE\n         LR    R12,R15             SET BASE REGISTER\n         SPACE 3\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BUILD THE OUTPUT SINGLE LINE WHICH WILL BE REPEATED ENOUGH   *\n*        TIMES TO FILL THE REST OF THE PAGE AS DEFINED BY THE JES2    *\n*        INITIALIZATION PARAMTERS FOR &PRIDCT FOR LOCAL PRINTERS OR   *\n*        &TPIDCT FOR REMOTE PRINTERS.                                 *\n*                                                                     *\n***********************************************************************\nSEPLINE8 MVI   HDR,C' '            CLEAR ENTIRE\n         MVC   HDR+1(132),HDR            BUFFER\n         LA    R6,132              LOAD LENGTH OF PRINT LINE\n         STC   R6,HDRLEN           AND SAVE IT\n***********************************************************************\n*        FRAME CHARACTERS                                             *\n***********************************************************************\n         MVC   HDRFRAME(2),=CL2'* ' SET FRAME CHARACTER\n         MVC   HDRFRAMX(1),HDRFRAME SET END FRAME CHARACTER\n***********************************************************************\n*        SYSOUT CLASS                                                 *\n***********************************************************************\n         L     R6,PPPWKJOE         LOAD ADDRESS OF WORK JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         MVC   HDRCLASS,JOECURCL   SET SYSOUT CLASS\n         MVC   HDRCLASX,JOECURCL       TWICE\n***********************************************************************\n*        SYSOUT JOE NAME                                              *\n***********************************************************************\n         MVC   HDRJNAME,JOENAME    SET JOE OUTPUT NAME\n***********************************************************************\n*        SYSOUT JOE ID                                                *\n***********************************************************************\n         LH    R1,JOEID1           LOAD 1ST JOEID\n         CVD   R1,EXITWRK1         CONVERT TO PACKED\n         OI    EXITWRK1+7,X'0F'    SET SIGN\n         UNPK  HDRJID1,EXITWRK1+6(2) SET JOEID1\n         LH    R1,JOEID2           LOAD 2ND JOEID\n         CVD   R1,EXITWRK1         CONVERT TO PACKED\n         OI    EXITWRK1+7,X'0F'    SET SIGN\n         UNPK  HDRJID2,EXITWRK1+6(2) SET JOEID2\n***********************************************************************\n*        SYSOUT JOE ROUTE AS DETERMINED BY PREVIOUS ROUTINE           *\n***********************************************************************\n         MVC   HDRJROUT,DEST       SET JOE ROUTE OR DESTID\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\n***********************************************************************\n*        SEPARATOR FORM TYPE (START/CONT/END)                         *\n***********************************************************************\n         MVC   HDRFORM,=CL5'START' ASSUME \"START\" ENTRY\n         CLC   REASON,=H'0'        TEST ENTRY REASON CODE\n         BE    SEPLINE9            ZERO, START, BRANCH\n         MVC   HDRFORM,=CL5'CONT'  ASSUME \"CONT \" ENTRY\n         CLC   REASON,=H'4'        TEST ENTRY REASON CODE\n         BE    SEPLINE9            FOUR, CONT, BRANCH\n         MVC   HDRFORM,=CL5'END'   MUST BE \"END  \" ENTRY\nSEPLINE9 MVC   HDRFORMX,HDRFORM    SET FORM TYPE TWICE\n***********************************************************************\n*        SYSOUT JOB NUMBER                                            *\n***********************************************************************\n         MVC   HDRNUM,JCTJOBID     SET JOB NUMBER\n***********************************************************************\n*        SYSOUT JOB NAME                                              *\n***********************************************************************\n         MVC   HDRNAME,JCTJNAME    SET JOB NAME\n***********************************************************************\n*        SYSOUT SYSTEM ID                                             *\n***********************************************************************\n         MVC   HDRSYS,$SID         SET SYSTEM ID\n***********************************************************************\n*        SYSOUT PROGRAMMER NAME                                       *\n***********************************************************************\n         MVC   HDRPNAME,JCTPNAME   SET PROGRAMMER NAME\n***********************************************************************\n*        SYSOUT ROOM NUMBER                                           *\n***********************************************************************\n         MVC   HDRRKEY,=CL4'ROOM'  SET THE ROOM LABEL\n         MVC   HDRROOM,JCTROOMN    SET ROOM NUMBER\n***********************************************************************\n*        SYSOUT TIME (HH.MM.SS XM)                                    *\n***********************************************************************\n         MVC   HDRPTTN(11),TOD     MOVE TIME INTO HEADER LINE\n***********************************************************************\n*        SYSOUT DATE (DD MMM YY)                                      *\n***********************************************************************\n         MVC   HDRDATE(2),CDATE+3  MOVE DAY (DD)\n         MVI   HDRDATE+2,C' '      SET DELIMITER\n         MVC   HDRDATE+3(3),MONTH  MOVE MONTH (MMM)\n         MVI   HDRDATE+6,C' '      SET DELIMITER\n         MVC   HDRDATE+7(2),CDATE+6  MOVE YEAR (YY)\n***********************************************************************\n*        SYSOUT DEVICE NAME                                           *\n***********************************************************************\n         MVC   HDRDNAME,DCTDEVN    DEVICE NAME\n         $RETURN ,                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*        ROUTINE CONSTANTS                                            *\n***********************************************************************\n         LTORG\n         EJECT\n         TITLE 'BUILD STATISTICS LINE SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*        PRODUCE THE 8 LINES OF JOB STATISTICS TO BE PRINTED ON       *\n*        THE SEPARATOR PAGE.  THEY WILL BE STORED IN FIELDS           *\n*        STAT1 THROUGH STAT10.                                        *\n*                                                                     *\n*        ON INPUT:                                                    *\n*                                                                     *\n*        R2     - JITB ADDRESS                                        *\n*        R3     - DCT ADDRESS                                         *\n*        R4     - BUFFER ADDRESS                                      *\n*        R8     - COMMON EXIT WORK AREA                               *\n*        R11    - HCT                                                 *\n*        R13    - PCE                                                 *\n*        R15    - ENTRY POINT ADDRESS                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nSTATLNE  $SAVE\n         USING STATLNE,R12         SET ADDRESSABILITY TO ROUTINE\n         LR    R12,R15             SET BASE REGISTER\n         SPACE 3\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BUILD THE STATISTICS LINE 1                                  *\n*                                                                     *\n***********************************************************************\nSTATL1   LA    R7,STAT1            POINT TO STAT LINE\n         USING SL1,R7              SET ADDRESSABILITY TO STAT LINE\n         MVI   0(R7),C' '          CLEAR ENTIRE\n         MVC   1(131,R7),0(R7)           LINE AREA\n         MVC   SL1TYPE,=CL5'START' ASSUME \"START\" ENTRY\n         CLC   REASON,=H'0'        TEST ENTRY REASON CODE\n         BZ    STATL1A             ZERO, START, BRANCH\n         MVC   SL1TYPE,=CL5'CONT'  ASSUME \"CONT \" ENTRY\n         CLC   REASON,=H'4'        TEST ENTRY REASON CODE\n         BE    STATL1A             FOUR, CONT, BRANCH\n         MVC   SL1TYPE,=CL5'END'   MUST BE \"END  \" ENTRY\nSTATL1A  MVC   SL1T1,=C'JOB:'      SET TITLE 1\n         MVC   SL1JOBNM,JCTJNAME   SET JOB NAME\n         MVI   SL1JOBID,C'('       SET JOBID DELIMITER\n         MVC   SL1JOBID+1(1),JCTJOBID MOVE JOBID CHARACTER (J/S/T)\n         MVC   SL1JOBID+2(4),JCTJOBID+4 MOVE JOB NUMBER\n         OC    SL1JOBID+2(4),=X'F0F0F0F0' TURN BLANKS INTO ZEROS\n         MVI   SL1JOBID+6,C')'     SET JOBID DELIMITER\n         MVC   SL1T2,=C'REPORTID:' SET TITLE 2\n         L     R6,PPPWKJOE         LOAD ADDRESS OF WORK JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         MVC   SL1GRPID,JOENAME    SET OUTPUT GROUP NAME\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\n         L     R6,PPPWKJOE         LOAD ADDRESS OF WORK JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         LH    R1,JOEID1           LOAD 1ST JOEID\n         CVD   R1,EXITWRK1         CONVERT TO PACKED\n         OI    EXITWRK1+7,X'0F'    SET SIGN\n         UNPK  SL1GRPI1,EXITWRK1+6(2) SET JOEID1\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\n         L     R6,PPPWKJOE         LOAD ADDRESS OF WORK JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         LH    R1,JOEID2           LOAD 2ND JOEID\n         CVD   R1,EXITWRK1         CONVERT TO PACKED\n         OI    EXITWRK1+7,X'0F'    SET SIGN\n         UNPK  SL1GRPI2,EXITWRK1+6(2) SET JOEID2\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\n         MVC   SL1T3,=C'USER:'     SET TITLE 3\n         AIF   ('&UJQE' NE 'YES').UJQE#5\n         L     R6,JCTJQE           LOAD OFFSET OF JQE\n         AL    R6,$JOBQPTR         CALCULATE ADDRESS OF JQE\n         USING JQE,R6              SET ADDRESSABILITY TO JQE\n         MVC   SL1OWNER,JQEXOWNR   SET OWNERID\n         DROP  R6                  DROP ADDRESSABILITY TO JQE\n.UJQE#5  ANOP\n         MVC   SL1T4,=C'DATE:'     SET TITLE 4\n         MVC   SL1CDATE,CDATE      SET CALENDAR DATE\n         MVC   SL1JDATE,JDATE+2    SET JULIAN DATE\n         MVC   SL1T5,=C'TIME:'     SET TITLE 5\n         MVC   SL1TIME,TOD         SET TIME OF DAY\n         DROP  R7                  DROP ADDRESSABILITY TO STAT LINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BUILD THE STATISTICS LINE 2                                  *\n*                                                                     *\n***********************************************************************\nSTATL2   LA    R7,STAT2            POINT TO STAT LINE\n         MVI   0(R7),C' '          CLEAR ENTIRE\n         MVC   1(131,R7),0(R7)           LINE AREA\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BUILD THE STATISTICS LINE 3                                  *\n*                                                                     *\n***********************************************************************\nSTATL3   LA    R7,STAT3            POINT TO STAT LINE\n         USING SL3,R7              SET ADDRESSABILITY TO STAT LINE\n         MVI   0(R7),C' '          CLEAR ENTIRE\n         MVC   1(131,R7),0(R7)           LINE AREA\n         MVC   SL3T1,=C'DEV:'      SET TITLE 1\n         MVC   SL3DEVNM,DCTDEVN    SET DEVICE NAME\n         MVC   SL3SYSID,$SID       SET SYSTEM ID\n         MVC   SL3T2,=C'AT:'       SET TITLE 2\n         XC    DESTWORK,DESTWORK   CLEAR CNVDEST WORK AREA\n         MVC   DESTWORK(2),$OWNNODE SET OUR NODE AS OUTPUT NODE NUMBER\n         $CALL CNVDEST             CONVERT DESTINATION CODE\n         MVC   SL3ONODE,DESTWORK   SAVE THE DESTINATION NAME\n         MVC   SL3T3,=C'FOR:'      SET TITLE 3\n         MVC   SL3DEST,DEST        SET OUTPUT DESTINATION NAME\n         MVC   SL3T4,=C'FROM:'     SET TITLE 4\n         XC    DESTWORK,DESTWORK   CLEAR CNVDEST WORK AREA\n         MVC   DESTWORK(2),JCTXNODE GET POSSIBLE EXECUTION NODE NUMBER\n         CLC   JCTXNODE,$ZEROS     SEE IF EXECUTION NODE SPECIFIED\n         BNE   STATL3A             YES, BRANCH\n         MVC   DESTWORK(2),JCTXEQND GET POSSIBLE EXECUTION NODE NUMBER\n         CLC   JCTXEQND,$ZEROS     SEE IF EXECUTION NODE SPECIFIED\n         BNE   STATL3A             YES, BRANCH\n         MVC   SL3ENODE,=CL8'UNKNOWN' SET UNKNOWN NODE NAME\n         B     STATL3B             GET OUT\nSTATL3A  $CALL CNVDEST             CONVERT DESTINATION CODE\n         MVC   SL3ENODE,DESTWORK   SAVE THE DESTINATION NAME\nSTATL3B  MVC   SL3T5,=C'CLASS:'    SET TITLE 5\n         L     R6,PPPWKJOE         LOAD ADDRESS OF WORK JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         MVC   SL3CLASS,JOECURCL   SET SYSOUT CLASS\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\n         MVC   SL3T6,=C'FORMS:'    SET TITLE 6\n         L     R6,PPPCHJOE         LOAD ADDRESS CHARACTERISTICS JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         MVC   SL3FORM,JOEFORM     SET SYSOUT FORM\n         DROP  R6                  DROP ADDRESSABILITY TO CHAR JOE\n         MVC   SL3T7,=C'LINES:'    SET TITLE 7\n         L     R6,PPPWKJOE         LOAD ADDRESS OF WORK JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         L     R15,JOERECCT        LOAD RECORD COUNT\n         CVD   R15,DBL             CONVERT TO PACKED\n         MVC   SL3LNES(12),=X'402020206B2020206B202120'\n         ED    SL3LNES(12),DBL+3   EDIT LINE COUNT\nSTATL3C  CLI   SL3LNES,C' '        START OF NUMBER\n         BNE   STATL3D             YES, BRANCH\n         MVC   SL3LNES(12),SL3LNES+1 SHIFT LINE COUNT\n         B     STATL3C             LOOP\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\nSTATL3D  MVC   SL3T8,=C'PAGES:'    SET TITLE 8\n         L     R6,PPPWKJOE         LOAD ADDRESS OF WORK JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\n         L     R15,JOEPGCT         LOAD PAGE COUNT\n         CVD   R15,DBL             CONVERT TO PACKED\n         MVC   SL3PGS(9),=X'40202020206B202120'\n         ED    SL3PGS(9),DBL+4    EDIT PAGE COUNT\nSTATL3E  CLI   SL3PGS,C' '         START OF NUMBER\n         BNE   STATL3F             YES, BRANCH\n         MVC   SL3PGS(9),SL3PGS+1 SHIFT PAGE COUNT\n         B     STATL3E             LOOP\nSTATL3F  DS    0H\n         DROP  R6                  DROP ADDRESSABILITY TO JOE\n         DROP  R7                  DROP ADDRESSABILITY TO STAT LINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BUILD THE STATISTICS LINE 4                                  *\n*                                                                     *\n***********************************************************************\nSTATL4   LA    R7,STAT4            POINT TO STAT LINE\n         MVI   0(R7),C' '          CLEAR ENTIRE\n         MVC   1(131,R7),0(R7)           LINE AREA\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BUILD THE STATISTICS LINE 5                                  *\n*                                                                     *\n***********************************************************************\nSTATL5   LA    R7,STAT5            POINT TO STAT LINE\n         USING SL5,R7              SET ADDRESSABILITY TO STAT LINE\n         MVI   0(R7),C' '          CLEAR ENTIRE\n         MVC   1(131,R7),0(R7)           LINE AREA\n         MVC   SL5T1,=C'SPECIAL INSTRUCTIONS:' SET TITLE 1\n         MVC   SL5T2,=C'NOTE:'                 SET TITLE 2\n         MVC   SL5T3,=C'RETURN THIS PAGE TO A&&O' SET TITLE 3\n         DROP  R7                  DROP ADDRESSABILITY TO STAT LINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BUILD THE STATISTICS LINE 6                                  *\n*                                                                     *\n***********************************************************************\nSTATL6   LA    R7,STAT6            POINT TO STAT LINE\n         USING SL6,R7              SET ADDRESSABILITY TO STAT LINE\n         MVI   0(R7),C' '          CLEAR ENTIRE\n         MVC   1(131,R7),0(R7)           LINE AREA\n         MVC   SL6T1,=C'DISTRIBUTION:' SET TITLE 1\n         TM    JITBSTAT,JITBOK     DO WE HAVE A GOOD JITB\n         BNO   STATL6A             NO, BRANCH\n         MVC   SL6INST1,JITBINS1   SET SPECIAL INSTRUCTIONS 1\nSTATL6A  MVC   SL6T2,=C'QUALITY CONTROL AT MAIL' SET TITLE 2\n         CLC   $OWNNODE,=H'2'      SEE IF NODE LE 2 (JACKSONVILLE FLA)\n         BH    STATL7              NO, BRANCH\n         MVC   SL6T2,=C'OUTPUT CONTROL  AT MAIL' SET TITLE 2\n         DROP  R7                  DROP ADDRESSABILITY TO STAT LINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BUILD THE STATISTICS LINE 7                                  *\n*                                                                     *\n***********************************************************************\nSTATL7   LA    R7,STAT7            POINT TO STAT LINE\n         USING SL7,R7              SET ADDRESSABILITY TO STAT LINE\n         MVI   0(R7),C' '          CLEAR ENTIRE\n         MVC   1(131,R7),0(R7)           LINE AREA\n         MVC   SL7PBIN(4),BINNBR   SET PRIMARY BIN PART 1\n         MVI   SL7PBIN+4,C'-'      SET SEPARATOR\n         MVC   SL7PBIN+5(4),BINNBR+4  SET PRIMARY BIN PART 2\n         TM    JITBSTAT,JITBOK     DO WE HAVE A GOOD JITB\n         BNO   STATL7B             NO, BRANCH\n         CLC   JITBPSID,=CL20' '   SEE IF PRIMARY SEP ID SPECIFIED\n         BE    STATL7A             NO, USE DEFAULT\n         MVC   SL7PBIN(9),=CL20' ' BLANK BIN NUMBER\n         MVC   SL7PBIN(4),JITBPSID SET PRIMARY BIN PART 1\n         MVC   SL7PBIN+5(4),JITBPSID+4 SET PRIMARY BIN PART 2\n         CLC   JITBPSID(4),=CL20' ' SEE IF PRIMARY SEP ID1 SPECIFIED\n         BE    STATL7A             NO, NO DELIMETER\n         CLC   JITBPSID+4(4),=CL20' ' SEE IF PRIMARY SEP ID2 SPECIFIED\n         BE    STATL7A             NO, NO DELIMETER\n         MVI   SL7PBIN+4,C'-'      SET DELIMETER\nSTATL7A  CLC   JITBSSID,=CL20' '   SEE IF SECONDARY SEP ID SPECIFIED\n         BNH   STATL7B             NO, LEAVE BLANK\n         MVC   SL7SBIN(4),JITBSSID SET SECOND BIN PART 1\n         MVC   SL7SBIN+5(4),JITBSSID+4 SET SECOND BIN PART 2\n         CLC   JITBSSID(4),=CL20' ' SEE IF SECOND BIN PART 1 SPECIFIED\n         BE    STATL7B             NO, NO DELIMTER\n         CLC   JITBSSID+4(4),=CL20' ' SEE IF SECOND BIN PART 2 SPEC\n         BE    STATL7B             NO, NO DELIMTER\n         MVI   SL7SBIN+4,C'-'      SET DELIMETER\nSTATL7B  MVC   SL7T1,=C'LOCATION:' SET TITLE 1\n         TM    JITBSTAT,JITBOK     DO WE HAVE A GOOD JITB\n         BNO   STATL7C             NO, BRANCH\n         MVC   SL7LOC,JITBLOC      SET LOCATION NAME\n         MVC   SL7INST2,JITBINS2   SET SPECIAL INSTRUCTIONS 2\nSTATL7C  MVC   SL7T2,=C'CODE - FCS11  WITH  ANY' SET TITLE 2\n         CLC   $OWNNODE,=H'2'      SEE IF NODE LE 2 (JACKSONVILLE FLA)\n         BH    STATL8              NO, BRANCH\n         MVC   SL7T2,=C'CODE - 32231-0445  WITH' SET TITLE 2\n         DROP  R7                  DROP ADDRESSABILITY TO STAT LINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BUILD THE STATISTICS LINE 8                                  *\n*                                                                     *\n***********************************************************************\nSTATL8   LA    R7,STAT8            POINT TO STAT LINE\n         USING SL8,R7              SET ADDRESSABILITY TO STAT LINE\n         MVI   0(R7),C' '          CLEAR ENTIRE\n         MVC   1(131,R7),0(R7)           LINE AREA\n         MVC   SL8T1,=C'DEPT:'     SET TITLE 1\n         TM    JITBSTAT,JITBOK     DO WE HAVE A GOOD JITB\n         BNO   STATL8A             NO, BRANCH\n         MVC   SL8DEPT,JITBDEPT    SET DEPARTMENT NAME\nSTATL8A  MVC   SL8T2,=C'MAIL CODE:' SET TITLE 2\n         TM    JITBSTAT,JITBOK     DO WE HAVE A GOOD JITB\n         BNO   STATL8B             NO, BRANCH\n         MVC   SL8MAILC,JITBMAIL   SET MAIL CODE\n         MVC   SL8INST3,JITBINS3   SET SPECIAL INSTRUCTIONS 3\nSTATL8B  MVC   SL8T3,=C'CHANGES MARKED.        ' SET TITLE 3\n         CLC   $OWNNODE,=H'2'      SEE IF NODE LE 2 (JACKSONVILLE FLA)\n         BH    STATL9              NO, BRANCH\n         MVC   SL8T3,=C'ANY CHANGES MARKED.    ' SET TITLE 3\n         DROP  R7                  DROP ADDRESSABILITY TO STAT LINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BUILD THE STATISTICS LINE 9                                  *\n*                                                                     *\n***********************************************************************\nSTATL9   LA    R7,STAT9            POINT TO STAT LINE\n         USING SL9,R7              SET ADDRESSABILITY TO STAT LINE\n         MVI   0(R7),C' '          CLEAR ENTIRE\n         MVC   1(131,R7),0(R7)           LINE AREA\n         MVC   SL9T1,=C'PHONE:'    SET TITLE 1\n         TM    JITBSTAT,JITBOK     DO WE HAVE A GOOD JITB\n         BNO   STATL9A             NO, BRANCH\n         MVC   SL9PHONE,JITBPHON   SET PHONE NUMBER\nSTATL9A  MVC   SL9T2,=C'ATTN:'     SET TITLE 2\n         TM    JITBSTAT,JITBOK     DO WE HAVE A GOOD JITB\n         BNO   STATL10             NO, BRANCH\n         MVC   SL9ATTN,JITBPGMR    SET ATTENTION NAME\n         MVC   SL9INST4,JITBINS4   SET SPECIAL INSTRUCTIONS 4\n         DROP  R7                  DROP ADDRESSABILITY TO STAT LINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BUILD THE STATISTICS LINE 10                                 *\n*                                                                     *\n***********************************************************************\nSTATL10  LA    R7,STAT10           POINT TO STAT LINE\n         MVI   0(R7),C' '          CLEAR ENTIRE\n         MVC   1(131,R7),0(R7)           LINE AREA\n         EJECT\n***********************************************************************\n*        RETURN TO CALLER                                             *\n***********************************************************************\n         $RETURN ,                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*        ROUTINE CONSTANTS                                            *\n***********************************************************************\n         LTORG\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONVERT A ROUTE CODE TO EBCIDIC BY SCANNING THE              *\n*        REMOTE DESTINATION TABLE FOR A MATCH.  IF A DESTID           *\n*        IS FOUND THEN THAT NAME WILL BE USED.  IF A DESTID IS        *\n*        NOT FOUND FOR A ROUTE CODE THEN THE ROUTE IS CONVERTED       *\n*        ACCORDING TO THE FOLLOWING FORMAT                            *\n*                                                                     *\n*             NNNNN  (NODE)                                           *\n*             RNNNN  (REMOTE)                                         *\n*             UNNNN  (SPECIAL LOCAL)                                  *\n*             'LOCAL' (LOCAL DEVICE)                                  *\n*             CCCCCCCC (DESTID)                                       *\n*                                                                     *\n*        ON INPUT:                                                    *\n*                                                                     *\n*        R2     - JITB ADDRESS                                        *\n*        R3     - DCT ADDRESS                                         *\n*        R4     - BUFFER ADDRESS                                      *\n*        R8     - COMMON EXIT WORK AREA                               *\n*        R11    - HCT                                                 *\n*        R13    - PCE                                                 *\n*        R15    - ENTRY POINT ADDRESS                                 *\n*                                                                     *\n*        DESTWORK - THE 4 BYTE JES2 ROUTE CODE                        *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nCNVDEST  $SAVE\n         USING CNVDEST,R12         SET ADDRESSABILITY TO ROUTINE\n         LR    R12,R15             SET BASE REGISTER\n         L     R7,$SVT             GET ADDRESS OF SSVT\n         LM    R14,R15,SVTRDT-SSVT(R7)  LOAD ADDRESS OF FIRST RDT\n         USING RDT,R14             SET ADDRESSABILITY TO RDT\nCNVDEST1 CR    R14,R15             END OF TABLE?\n         BH    CNVDEST4            YES, GET OUT\n         ICM   R7,15,RDTROUTE      LOAD ROUTE CODE FROM RDT\n         TM    RDTFLAG,RDTFLAGR    IS THIS A REMOTE DESTINATION ENTRY\n         BZ    CNVDEST2            NO, BRANCH\n         TM    RDTFLAG,RDTFLAGN    IS NODE SPECIFIED IN THE ENTRY\n         BO    CNVDEST2            YES, BRANCH\n         ICM   R7,B'1100',$OWNNODE MOVE DEFAULT NODE TO ROUTE CODE\nCNVDEST2 CL    R7,DESTWORK         SEE IF DESTID MATCHES THIS ENTRY\n         BNE   CNVDEST3            NO, GO CHECK NEXT RDT ENTRY\n         MVC   EXITWRK3,RDTNAME    SAVE DESTID\n         B     CNVDEST9            GET OUT\nCNVDEST3 LA    R14,RDTSIZ(R14)     INCREMENT TO NEXT RDT\n         B     CNVDEST1            GO CHECK NEXT RDT ENTRY\nCNVDEST4 CLC   DESTWORK(4),$ZEROS  IS THIS A LOCAL DESTID\n         BE    CNVDEST8            YES, GO SET TO LOCAL\n         CLC   DESTWORK(2),$ZEROS  SEE IF NODE NUMBER SPECIFIED\n         BE    CNVDEST6            NO, GO PROCESS SPECIAL OR RMT\n         CLC   DESTWORK(2),$OWNNODE  SEE IF OUR NODE\n         BNE   CNVDEST5            NO, BRANCH\n         CLC   DESTWORK+2(2),$ZEROS  IS THIS A LOCAL DESTID\n         BE    CNVDEST8            YES, GO SET TO LOCAL\n         B     CNVDEST6            NO, GO PROCESS SPECIAL OR RMT\nCNVDEST5 SLR   R15,R15             CLEAR REG FOR ICM\n         ICM   R15,3,DESTWORK      LOAD NODE NUMBER\n         CVD   R15,EXITWRK3        CONVERT NODE NUMBER TO PACKED\n         MVC   EXITWRK3-1(6),=X'402120202020' SET EDIT PATTERN\n         ED    EXITWRK3-1(6),EXITWRK3+5  MAKE REMOTE NUMBER PRINTABLE\n         MVI   EXITWRK3,C'N'       SET 'N' LABEL\n         MVC   EXITWRK3+5(3),=CL20' ' BLANK REST OF FIELD\n         B     CNVDEST9            GET OUT\nCNVDEST6 SLR   R15,R15             CLEAR REG FOR ICM\n         ICM   R15,3,DESTWORK+2    MOVE REMOTE NUMBER TO A REG\n         CVD   R15,EXITWRK3        CONVERT REMOTE NUMBER TO PACKED\n         MVC   EXITWRK3-1(6),=X'402120202020' SET EDIT PATTERN\n         ED    EXITWRK3-1(6),EXITWRK3+5  MAKE REMOTE NUMBER PRINTABLE\n         CLC   DESTWORK(2),$ZEROS  SEE IF UNIT SPECIFICATION\n         BE    CNVDEST7            YES, GO SET  'U' LABEL\n         MVI   EXITWRK3,C'R'       NO,  REMOTE, 'R' LABEL\n         B     CNVDEST9            GO BUILD SEPARATOR LINE\nCNVDEST7 MVI   EXITWRK3,C'U'       SET 'U' LABEL\n         MVC   EXITWRK3+5(3),=CL20' ' BLANK REST OF FIELD\n         B     CNVDEST9            GO BUILD SEPARATOR LINE\nCNVDEST8 MVC   EXITWRK3,=CL8'LOCAL' SET 'LOCAL' LABEL\nCNVDEST9 MVC   DESTWORK,EXITWRK3   SAVE THE DEST CODE\n         $RETURN ,                 RETURN TO CALLER\n         DROP  R14                 DROP ADDRESSABILITY TO RDT\n         SPACE 3\n         LTORG\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DETERMINE THE BIN NUMBER FROM THE JOB CARD OR THE            *\n*        USERID.                                                      *\n*                                                                     *\n*        ON INPUT:                                                    *\n*                                                                     *\n*        R2     - JITB ADDRESS                                        *\n*        R3     - DCT ADDRESS                                         *\n*        R4     - BUFFER ADDRESS                                      *\n*        R8     - COMMON EXIT WORK AREA                               *\n*        R11    - HCT                                                 *\n*        R13    - PCE                                                 *\n*        R15    - ENTRY POINT ADDRESS                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nDETBIN   $SAVE\n         USING DETBIN,R12          SET ADDRESSABILITY TO ROUTINE\n         LR    R12,R15             SET BASE REGISTER\n         MVC   BINNBR(8),=CL8'BIN ???' SET DEFAULT BIN NUMBER\n         CLC   JCTROOMN,=F'0'      SEE IF ROOM NUMBER SPECIFIED\n         BE    DETBIN1             NO, BRANCH\n         MVC   BINNBR+4(4),JCTROOMN SAVE ROOM NUMBER\n         B     DETBIN5             DONE\nDETBIN1  DS    0H\n         AIF   ('&UJQE' NE 'YES').UJQE#6\n         L     R6,JCTJQE           LOAD OFFSET OF JQE\n         AL    R6,$JOBQPTR         CALCULATE ADDRESS OF JQE\n         USING JQE,R6              SET ADDRESSABILITY TO JQE\n         CLI   JQEXFLG1,JQEXPROD   SEE IF PRODUCTION JOB\n         BNE   DETBIN2             NO, BRANCH\n         MVC   BINNBR+4(4),=CL4'PCHL' SET PRODUCTION BIN NUMBER\n         CLC   $OWNNODE,=H'2'      SEE IF NODE LE 2 (JACKSONVILLE FLA)\n         BH    DETBIN5             NO, BRANCH\n         MVC   BINNBR+4(4),=CL4'PJAX' SET PRODUCTION BIN NUMBER\n         B     DETBIN5             DONE\nDETBIN2  LA    R5,BINTBL           LOAD ADDRESS OF BIN NUMBER TBL\nDETBIN3  CLI   0(R5),X'FF'         END OF TABLE\n         BE    DETBIN5             YES, DONE\n         CLC   JQEXOWNR(1),0(R5)   SEE IF MATCH ON OWNERID CHARACTER\n         BE    DETBIN4             YES, BRANCH\n         LA    R5,4(R5)            INCREMENT TO NEXT TABLE ENTRY\n         B     DETBIN3             LOOP\nDETBIN4  MVC   BINNBR+4(3),1(R5)   SAVE BIN NUMBER FROM TABLE\n.UJQE#6  ANOP\nDETBIN5  $RETURN ,                 RETURN TO CALLER\n         SPACE 3\n         AIF   ('&UJQE' NE 'YES').UJQE#7\nBINTBL   DS    0F                  BIN NUMBER TABLE\n         DC    C'A',CL3'ADM'\n         DC    C'B',CL3'MKT'\n         DC    C'D',CL3'SDD'\n         DC    C'M',CL3'MSD'\n         DC    C'N',CL3'ACT'\n         DC    C'O',CL3'OPD'\n         DC    C'R',CL3'RSD'\n         DC    C'S',CL3'SSD'\n         DC    C'Z',CL3'AUD'\n         DC    X'FF'\n.UJQE#7  ANOP\n         LTORG\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CALL THE JOB INFORMATION TASK                                *\n*                                                                     *\n*        ON INPUT:                                                    *\n*                                                                     *\n*        R2     - JITB ADDRESS                                        *\n*        R3     - DCT ADDRESS                                         *\n*        R4     - BUFFER ADDRESS                                      *\n*        R8     - COMMON EXIT WORK AREA                               *\n*        R11    - HCT                                                 *\n*        R13    - PCE                                                 *\n*        R15    - ENTRY POINT ADDRESS                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCALLJIT  $SAVE\n         USING CALLJIT,R12         SET ADDRESSABILITY TO ROUTINE\n         LR    R12,R15             SET BASE REGISTER\n         AIF   ('&JIT' NE 'YES').JIT#2\n         ICM   R5,B'1111',$UCT     LOAD UCT ADDRESS\n         BZ    CALLJITB            NONE, BRANCH\n         USING UCT,R5              SET ADDRESSABILITY TO UCT\n         ICM   R4,B'1111',UCTJITDT LOAD JIT DTE ADDRESS\n         BZ    CALLJITB            NONE, BRANCH\n         USING DTE,R4              SET ADDRESSABILITY TO DTE\n         MVI   JITBFLG,JITBREAD    TURN ON READ OPERATION REQUEST\n         XC    JITBXECB(L'XECBECB),JITBXECB CLEAR THE XECB\n         L     R1,DTEFQUE          LOAD THE WORK QUEUE ADDRESS\nCALLJITA ST    R1,JITBCH           PUSH HEAD QUEUE DOWN\n         CS    R1,R2,DTEFQUE       ADD TO WORK QUEUE\n         BNE   CALLJITA            CHANGED, TRY AGAIN\n         POST  DTEWECB             POST SUBTASK\n         $WAIT OPER,XECB=JITBXECB,INHIBIT=YES\n         DROP  R4                  DROP ADDRESSABILITY TO DTE\n         DROP  R5                  DROP ADDRESSABILITY TO UCT\n         SPACE 1\n.JIT#2   ANOP\nCALLJITB $RETURN ,                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CALL THE JOB UCC7 TASK                                       *\n*                                                                     *\n*        ON INPUT:                                                    *\n*                                                                     *\n*        R2     - JITB ADDRESS                                        *\n*        R3     - DCT ADDRESS                                         *\n*        R4     - BUFFER ADDRESS                                      *\n*        R8     - COMMON EXIT WORK AREA                               *\n*        R11    - HCT                                                 *\n*        R13    - PCE                                                 *\n*        R15    - ENTRY POINT ADDRESS                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCALLUC7  $SAVE\n         USING CALLUC7,R12         SET ADDRESSABILITY TO ROUTINE\n         LR    R12,R15             SET BASE REGISTER\n         AIF   ('&UCC7' NE 'YES').UCC7#5\n         ICM   R5,B'1111',$UCT     LOAD UCT ADDRESS\n         BZ    CALLUC7B            NONE, BRANCH\n         USING UCT,R5              SET ADDRESSABILITY TO UCT\n         ICM   R4,B'1111',UCTUC7DT LOAD UCC7 DTE ADDRESS\n         BZ    CALLUC7B            NONE, BRANCH\n         USING DTE,R4              SET ADDRESSABILITY TO DTE\n         MVI   JITBFLG,JITBDMD     TURN ON DEMAND NETWORK REQUEST\n         XC    JITBXECB(L'XECBECB),JITBXECB CLEAR THE XECB\n         L     R1,DTEFQUE          LOAD THE WORK QUEUE ADDRESS\nCALLUC7A ST    R1,JITBCH           PUSH HEAD QUEUE DOWN\n         CS    R1,R2,DTEFQUE       ADD TO WORK QUEUE\n         BNE   CALLUC7A            CHANGED, TRY AGAIN\n         POST  DTEWECB             POST SUBTASK\n         $WAIT OPER,XECB=JITBXECB,INHIBIT=YES\n         DROP  R4                  DROP ADDRESSABILITY TO DTE\n         DROP  R5                  DROP ADDRESSABILITY TO UCT\n         SPACE 1\n.UCC7#5  ANOP\nCALLUC7B $RETURN ,                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        STATISTICS LINE  1 DSECT                                     *\n*                                                                     *\n***********************************************************************\nSL1      DSECT\nSL1TYPE  DS    CL5      001-005    SL1 TITLE 1 \"START/CONT/END\"\n         DS    CL1\nSL1T1    DS    CL4      007-010    SL1 TITLE 1 \"JOB:\"\n         DS    CL1\nSL1JOBNM DS    CL8      012-019    SL1 JOB NAME\nSL1JOBID DS    CL7      020-026    SL1 JOBID\n         DS    CL2\nSL1T2    DS    CL9      029-037    SL1 TITLE 2 \"REPORTID:\"\n         DS    CL1\nSL1GRPID DS    CL8      039-046    SL1 OUTPUT GROUP NAME\n         DS    CL1\nSL1GRPI1 DS    CL3      048-050    SL1 OUTPUT GROUP ID 1\n         DS    CL1\nSL1GRPI2 DS    CL3      052-054    SL1 OUTPUT GROUP ID 2\n         DS    CL5\nSL1T3    DS    CL5      060-064    SL1 TITLE 3 \"USER:\"\n         DS    CL1\nSL1OWNER DS    CL8      066-073    SL1 OWNER ID\n         DS    CL2\nSL1T4    DS    CL5      076-080    SL1 TITLE 4 \"DATE:\"\n         DS    CL1\nSL1CDATE DS    CL8      082-089    SL1 CALENDAR DATE (MM/DD/YY)\nSL1JDATE DS    CL4      090-093    SL1 JULIAN   DATE (.DDD)\n         DS    CL2\nSL1T5    DS    CL5      096-100    SL1 TITLE 5 \"TIME:\"\n         DS    CL1\nSL1TIME  DS    CL11     102-112    SL1 TIME OF DAY (HH.MM.SS XM)\n         EJECT\n***********************************************************************\n*                                                                     *\n*        STATISTICS LINE  3 DSECT                                     *\n*                                                                     *\n***********************************************************************\nSL3      DSECT\nSL3T1    DS    CL4      001-004    SL3 TITLE 1 \"DEV:\"\n         DS    CL1\nSL3DEVNM DS    CL8      006-013    SL3 DEVICE NAME\n         DS    CL1\nSL3SYSID DS    CL4      015-018    SL3 SYSTEM ID\n         DS    CL4\nSL3T2    DS    CL3      023-025    SL3 TITLE 2 \"ON:\"\n         DS    CL1\nSL3ONODE DS    CL8      027-034    SL3 OUTPUT NODE NAME\n         DS    CL2\nSL3T3    DS    CL4      037-040    SL3 TITLE 3 \"FOR:\"\n         DS    CL1\nSL3DEST  DS    CL8      042-049    SL3 DESTINATION NAME\n         DS    CL2\nSL3T4    DS    CL5      052-056    SL3 TITLE 3 \"FROM:\"\n         DS    CL1\nSL3ENODE DS    CL8      058-065    SL3 EXECUTION NODE\n         DS    CL2\nSL3T5    DS    CL6      068-073    SL3 TITLE 3 \"CLASS:\"\n         DS    CL1\nSL3CLASS DS    CL1      075-075    SL3 OUTPUT CLASS\n         DS    CL2\nSL3T6    DS    CL6      078-083    SL3 TITLE 3 \"FORMS:\"\n         DS    CL1\nSL3FORM  DS    CL8      085-092    SL3 OUTPUT FORM NUMBER\n         DS    CL2\nSL3T7    DS    CL6      095-100    SL3 TITLE 3 \"LINES:\"\n         DS    CL1\nSL3LNES  DS    CL11     102-112    SL3 NUMBER OF LINES (NNN,NNN,NNN)\n         DS    CL1\nSL3T8    DS    CL6      114-119    SL3 TITLE 3 \"PAGES:\"\n         DS    CL1\nSL3PGS   DS    CL8      121-126    SL3 NUMBER OF PAGES (NNNN,NNN)\n         EJECT\n***********************************************************************\n*                                                                     *\n*        STATISTICS LINE  5 DSECT                                     *\n*                                                                     *\n***********************************************************************\nSL5      DSECT\n         DS    CL68\nSL5T1    DS    CL21     069-089    SL5 TITLE 1 \"SPECIAL INSTRUCTIONS:\"\n         DS    CL13\nSL5T2    DS    CL5      103-107    SL5 TITLE 2 \"NOTE:\"\n         DS    CL1\nSL5T3    DS    CL23     109-131    SL5 T 3 \"RETURN THIS PAGE TO A&O\"\n         EJECT\n***********************************************************************\n*                                                                     *\n*        STATISTICS LINE  6 DSECT                                     *\n*                                                                     *\n***********************************************************************\nSL6      DSECT\nSL6T1    DS    CL12     001-012    SL6 TITLE 1 \"DISTRIBUTION\"\n         DS    CL57\nSL6INST1 DS    CL25     070-094    SL6 SPECIAL INSTRUCTIONS PART 1\n         DS    CL14\nSL6T2    DS    CL23     109-131    SL6 T 3 \"QUALITY CONTROL AT MAIL\"\n         EJECT\n***********************************************************************\n*                                                                     *\n*        STATISTICS LINE  7 DSECT                                     *\n*                                                                     *\n***********************************************************************\nSL7      DSECT\n         DS    CL1\nSL7PBIN  DS    CL9      002-010    SL7 PRIMARY BIN NUMBER\n         DS    CL2\nSL7SBIN  DS    CL9      013-021    SL7 SECONDARY BIN NUMBER\n         DS    CL13\nSL7T1    DS    CL9      035-043    SL7 TITLE 1 \"LOCATION:\"\n         DS    CL1\nSL7LOC   DS    CL15     045-059    SL7 LOCATION NAME\n         DS    CL10\nSL7INST2 DS    CL25     070-094    SL7 SPECIAL INSTRUCTIONS PART 1\n         DS    CL14\nSL7T2    DS    CL23     109-131    SL7 T 2 \"CODE - FCS11  WITH  ANY\"\n         EJECT\n***********************************************************************\n*                                                                     *\n*        STATISTICS LINE  8 DSECT                                     *\n*                                                                     *\n***********************************************************************\nSL8      DSECT\n         DS    CL1\nSL8T1    DS    CL5      002-006    SL8 TITLE 1 \"DEPT:\"\n         DS    CL1\nSL8DEPT  DS    CL20     008-027    SL8 DEPARTMENT NAME\n         DS    CL7\nSL8T2    DS    CL10     035-044    SL8 TITLE 2 \"MAIL CODE:\"\n         DS    CL1\nSL8MAILC DS    CL10     046-055    SL8 MAIL CODE\n         DS    CL14\nSL8INST3 DS    CL25     070-094    SL8 SPECIAL INSTRUCTIONS PART 3\n         DS    CL14\nSL8T3    DS    CL23     109-131    SL8 T 3 \"CHANGES MARKED.        \"\n         EJECT\n***********************************************************************\n*                                                                     *\n*        STATISTICS LINE  9 DSECT                                     *\n*                                                                     *\n***********************************************************************\nSL9      DSECT\n         DS    CL1\nSL9T1    DS    CL6      002-007    SL9 TITLE 1 \"PHONE:\"\n         DS    CL1\nSL9PHONE DS    CL15     009-023    SL9 PHONE NUMBER\n         DS    CL11\nSL9T2    DS    CL5      035-039    SL9 TITLE 2 \"ATTN:\"\n         DS    CL1\nSL9ATTN  DS    CL20     041-060    SL9 ATTENTION NAME\n         DS    CL09\nSL9INST4 DS    CL25     070-094    SL9 SPECIAL INSTRUCTIONS PART 4\n         EJECT\nJ001$SP  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "J002SPRT": {"ttr": 8961, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "J002SPRT TITLE 'SPOOL PARTITIONING'\n         SPACE\n         COPY  $HASPGBL\nJ002SPRT $MODULE $HASPEQU,                                             X\n               $PCE,               CONTAINS USING PCEDSECT,R13         X\n               $CMB,                                                   X\n               $DAS,                                                   X\n               $DCT,                                                   X\n               $PDDB,                                                  X\n               $IOT,                                                   X\n               $RDRWORK,                                               X\n               $BUFFER,                                                X\n               $JQE,                                                   X\n               $JCT,                                                   X\n               $CAT,                                                   X\n               $JOE,                                                   X\n               $NIT,                                                   X\n               $TAB,                                                   X\n               $MIT,                                                   X\n               $KIT,                                                   X\n               $HCT,                                                   X\n               $PADDR,                                                 X\n               RPL\n***********************************************************************\n*\n* PURPOSE:\n*\n*  J002SPRT IS A SPOOL PARTITIONING EXIT DESIGNED TO WORK OFF OF EXIT 2\n*  THIS EXIT WILL TELL JES TO TRY AND ONLY USE SPOOL SPACE ON THE\n*  VOLUMES THAT ARE DESIGNATED IN THE SPLTBL (SPOOL TABLE) FOR STARTED\n*  TASKS.\n*\n* METHOD USED:\n*\n*  WHEN EXIT IS ENTERED, A CHECK IS MADE TO SEE IF JOB IS A STARTED\n*  TASK.  IF NOT A STC, THEN LEAVE EXIT WITH RC=0.  IF STC THEN ZERO\n*  OUT THE JCTSAMSK (SPOOL PARTITIONING MASK).  GO THROUGH SPLTBL\n*  AND DAS ENTRIES TO FIND MATCHES.  ONCE A MATCH IS FOUND, CHECK TO\n*  SEE IF THE SPOOL IS SUITABLE FOR USE.  IF SO, \"OR\" THE DASMASK ONTO\n*  THE JCTSAMSK (SPOOLMASK) AND GO GET NEXT ENTRY IN SPLTBL.  IF THE\n*  SPOOL VOLUME IS NOT AVAILABLE, SKIP THIS PARTICULAR SPLTBL ENTRY\n*  AND GO GET ANOTHER.  ONCE THE LIST FROM SPLTBL HAS BEEN EXHAUSTED,\n*  RETURN CONTROL BACK TO JES.  IF NO MATCH IS FOUND, THE JCTSAMSK IS\n*  LEFT TO BE ALL ZERO'S.  JES WILL THEN ASSIGN THE CORRECT DEFAULT\n*  VALUE CORRESPONDING TO THE FENCE=YES/NO PARAMETER.\n*\n*  WRITTEN BY: JEFF CANIPE\n*  ADDRESS:    FIRST UNION NATIONAL BANK\n*              301 SOUTH TRYON STREET CHARLOTTE, N.C. 28288\n*  PHONE:      (704) 374-4320\n*\n***********************************************************************\n*\n* REGISTER USAGE IN J002SPRT\n*\n*  R0  - A CODE INDICATING THE TYPE OF JOB STATEMENT BEING SCANNED\n*        0  INDICATES AN INITIAL JOB STATEMENT IMAGE\n*        4  INDICATES AN SUBSEQUENT JOB CONTINUATION STATEMENT\n*  R1  - ADDRESS OF A 3-WORD PARMAMETER LIST IN THE FOLLOWING FORMAT:\n*        WORD 1 (+0) POINTS TO THE JOB STATEMENT IMAGE BUFFER\n*        WORD 2 (+4) POINTS TO THE EXIT FLAG BYTE, RDWFLAGX, IN THE PCE\n*        WORD 3 (+8) POINTS TO THE JCTXWRK FIELD IN THE JCT\n*  R2  - DAS\n*  R3  - ADDRESS OF SPOOL VOLUME TABLE\n*  R4  - NUMBER OF ENTRIES IN SPOOL VOLUME TABLE\n*  R5  -\n*  R6  - NUMBER OF SPOOL VOLUMES ALLOWED IN RUNNING JES\n*  R7  -\n*  R8  -\n*  R9  -\n*  R10 - JCT\n*  R11 - HCT\n*  R12 - BASE\n*  R13 - PCE\n*  R14 - RETURN\n*  R15 - ENTRY POINT; BALR; RETURN CODE\n*\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE002SPRT $ENTRY BASE=(R12),CSECT=YES\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD FIRST BASE REGISTER\n         USING JCT,R10             SET UP ADDRESSABILITY TO JCT\n         USING HCT,R11             SET UP ADDRESSABILITY TO HCT\n         CLI   JCTJOBID,C'S'       IS THIS A STARTED TASK?\n         BNE   EXIT0               NO... BETTER LEAVE\n         LA    R3,SPLTBL           LOAD ADDRESS OF SPOOL VOLUME TABLE\n         LA    R4,#ENTRYS          GET THE NUMBER OF VOLUMES IN TABLE\n         XC    JCTSAMSK,JCTSAMSK   CLEAR OUT SPOOL MASK\nRESETDAS L     R2,$DASFRST         LOAD ADDRESS OF FIRST DAS\n         USING DAS,R2              SET ADDRESSABILITY TO DAS\n         LH    R6,$SPOLNUM         GET NUMBER OF SPOOL VOLUMES\nCHKSPOOL CLC   0(6,R2),0(R3)       COMPARE DAS VOL TO SPLTBL VOL\n         BNE   NXTDAS              NO MATCH HERE.  TRY ANOTHER DAS.\n         TM    DASFLAG,DASACTIV+DASEXSTS+DASRPSF CAN WE USE THIS ONE?\n         BNO   NXTSPOL             SORRY WE'RE CLOSED.  COME AGAIN...\n         OC    JCTSAMSK,DASMASK    TURN ON CORRESPONDING BIT\n         B     NXTSPOL             GO GET ANOTHER VOLUME FROM TABLE\nNXTDAS   LA    R2,DASSIZ(,R2)      INCREMENT TO NEXT DAS ENTRY\n         BCT   R6,CHKSPOOL         GO TRY NEXT DAS\nNXTSPOL  LA    R3,ENTLEN(,R3)      POINT TO NEXT VOL IN SPOOL TABLE\n         BCT   R4,RESETDAS         GO START WITH FIRST DAS\nEXIT0    SR    R15,R15             SET RETURN CODE TO 0\nRETURN   $RETURN RC=(R15)          RETURN TO JES2\nSPLTBL   EQU   *\n         DC    CL6'SPOOL1' <---------\nENTLEN   EQU   *-SPLTBL             |\n         DC    CL6'SPOOL2'          |------ENTER SPOOL VOLUMES HERE\n         DC    CL6'SPOOL3'          |\n         DC    CL6'SPOOL4'          |\n         DC    CL6'SPOOL5' <---------\n#ENTRYS  EQU   (*-SPLTBL)/ENTLEN   CALCULATE THE NUMBER OF VOLUMES\n         EJECT\n         DROP  R2\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "J003STCS": {"ttr": 8964, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 SUPPLY STC JOB INFORMATION ROUTINE'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM WILL SUPPLY JOB INFORMATION           *\n*        FOR STARTED TASKS INCLUDING PROGRAMMER NAME AND              *\n*        MESSAGE CLASS BY USING JIT (JOB INFORMATION TASK)            *\n*        SERVICES TO EXTRACT THIS INFORMATION FROM A VSAM             *\n*        DISTRIBUTION INFORMATION FILE.                               *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*            M A C R O S   U S E D   I N   J 0 0 3 S T C S            *\n*                                                                     *\n*        01)  POST         SYS1.MACLIB                                *\n*        02)  $BUFFER      SYS1.HASPSRC                               *\n*        03)  $CALL        SYS1.HASPSRC                               *\n*        04)  $CAT         SYS1.HASPSRC                               *\n*        05)  $DTE         SYS1.HASPSRC                               *\n*        06)  $ENTRY       SYS1.HASPSRC                               *\n*        07)  $ERA         SYS1.HASPSRC                               *\n*        08)  $FCSDTE      SYS1.HASPSRC (USER)                        *\n*        09)  $FCSJITB     SYS1.HASPSRC (USER)                        *\n*        10)  $FCSUCT      SYS1.HASPSRC (USER)                        *\n*        11)  $GETWORK     SYS1.HASPSRC                               *\n*        12)  $HASPEQU     SYS1.HASPSRC                               *\n*        13)  $HASPGBL     SYS1.HASPSRC                               *\n*        14)  $HCT         SYS1.HASPSRC                               *\n*        15)  $JCT         SYS1.HASPSRC                               *\n*        16)  $JQE         SYS1.HASPSRC                               *\n*        17)  $MIT         SYS1.HASPSRC                               *\n*        18)  $MODEND      SYS1.HASPSRC                               *\n*        19)  $MODULE      SYS1.HASPSRC                               *\n*        20)  $MSG         SYS1.HASPSRC                               *\n*        21)  $PADDR       SYS1.HASPSRC                               *\n*        22)  $PCE         SYS1.HASPSRC                               *\n*        23)  $SAVE        SYS1.HASPSRC                               *\n*        24)  $RETURN      SYS1.HASPSRC                               *\n*        25)  $WAIT        SYS1.HASPSRC                               *\n*        26)  $WTO         SYS1.HASPSRC                               *\n*        27)  $XECB        SYS1.HASPSRC                               *\n*        28)  IFGRPL       SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       1K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ003STCS $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 SUPPLY STC JOB INFORMATION ROUTINE',        X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $DTE,               GENERATE HASP DTE DSECT             X\n               $ERA,               GENERATE HASP ERA DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP SVT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $XECB,              GENERATE HASP XECB DSECT            X\n               RPL                 GENERATE MVS  RPL DSECT\n         TITLE 'JES2 SUPPLY STC JOB INFORMATION ROUTINE'\n***********************************************************************\n*                                                                     *\n*        USER ADDITION TO THE DTE                                     *\n*                                                                     *\n***********************************************************************\nDTE      DSECT\n         ORG   DTEWORK\n         DS    0CL2048             2048 BYTE EXTENSION\n         $FCSDTE ,                 MAP THE DTE EXTENSION AREA\nJ003STCS CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        USER CONTROL TABLE (UCT)                                     *\n*                                                                     *\n***********************************************************************\n         $FCSUCT ,                 MAP THE USER CONTROL TABLE\nJ003STCS CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        JOB INFORMATION TASK CONTROL BLOCK                           *\n*                                                                     *\n***********************************************************************\n         $FCSJITB ,                MAP THE JITB CONTROL BLOCK\nJ003STCS CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE003STCS $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLERS REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         USING JCT,R10             SET ADDRESSABILITY TO JCT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R0  - LENGTH OF ACCOUNTING FIELD.                            *\n*        R1  - THE ADDRESS OF A 3 WORD PARAMETER LIST                 *\n*              WORD 1 - ADDRESS OF THE ACCOUNTING FIELD (JCTWORK)     *\n*              WORD 2 - ADDRESS OF THE EXIT FLAG BYTE IN THE PCE      *\n*              WORD 3 - ADDRESS OF THE JCTXWRK FIELD IN THE JCT       *\n*        R10 - ADDRESS OF THE JCT                                     *\n*        R11 - ADDRESS OF THE HCT                                     *\n*        R13 - ADDRESS OF THE PCE                                     *\n*        R14 - RETURN ADDRESS                                         *\n*        R15 - ENTRY ADDRESS                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*        SEE IF THIS IS A STARTED TASK                                *\n***********************************************************************\n         TM    JCTJOBFL,JCTSTCJB   SEE IF STC\n         BNO   RETURN0             NO, GET OUT\n         SPACE 3\n***********************************************************************\n*        SUPPLY DEFAULT INFORMATION FOR STARTED TASKS                 *\n***********************************************************************\n         MVC   JCTPNAME,=CL20'DELIVER TO SSD'\n         MVC   JCTROOMN,=CL4'SSD'\n         SPACE 3\n***********************************************************************\n*        SEE IF JIT ENTRY FOR THIS STC                                *\n***********************************************************************\n***********************************************************************\n*        GET A JITB FOR THE DEVICE IF NOT ALREADY ONE                 *\n***********************************************************************\nGETJIT   ICM   R2,B'1111',PCEUSER0 LOAD THE ADDRESS OF THE JITB\n         BNZ   GETJIT2             GOOD, BRANCH\n         USING JITB,R2             SET ADDRESSABILITY TO JITB\nGETJIT1  $GETWORK WORDS=128,USE=JITB,WAIT=YES GET A 512 BYTE WORK AREA\n         ST    R1,PCEUSER0         SAVE THE ADDRESS\n         LR    R2,R1               MOVE THE JITB ADDRESS TO REG 2\n         MVC   JITBID,=CL4'JITB'   SET IDENTIFIER\nGETJIT2  CLC   JITBID,=CL4'JITB'   SEE IF REALLY A JITB\n         BE    GETJIT3             YES, GO CALL JIT TASK\n         LA    R1,MSG1             LOAD ADDRESS OF MESSAGE\n         LA    R0,L'MSG1           LOAD LENGTH OF MESSAGE\n         $WTO  (R1),(R0),JOB=YES,CMB=NO,WAIT=NO,ROUTE=$MAIN,UCM=NO\n         B     GETJIT1             GO GET A JITB\n*        B     RETURN0             GET OUT\n***********************************************************************\n*                                                                     *\n*        SET THE JITB KEY                                             *\n*                                                                     *\n*        STC  - THE STARTED TASK NAME WILL BE THE KEY WITH            *\n*               A BLANK GROUP NAME.                                   *\n*                                                                     *\n***********************************************************************\nGETJIT3  MVC   JITBJOBN,JCTJNAME   SET KEY TO JOBNAME\n         MVC   JITBGRP,=CL8' '     BLANK THE GROUP NAME\n         NI    JITBSTAT,255-JITBOK TURN OFF OK INDICATOR\n***********************************************************************\n*        CALL JITB COMMUNICATION TASK                                 *\n***********************************************************************\n         $CALL CALLJIT             CALL JOB INFORMATION TASK\n         TM    JITBSTAT,JITBOK     DO WE HAVE A GOOD JITB\n         BNO   RETURN0             NO, GET OUT\n         CLI   JITBCLAS,C'A'       SEE IF WE HAVE A GOOD SYSOUT CLASS\n         BL    RETURN0             NO, GET OUT\n         MVC   JCTPNAME,JITBPGMR   SAVE PGMR NAME FROM JIT RECORD\n         MVC   JCTMCLAS,JITBCLAS   SAVE DEFAULT SYSOUT CLASS FROM JIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - CANCEL THE JOB BUT PRODUCT THE OUTPUT LISTING      *\n*        RC = 12 - PURGE THE JOB WITH NO OUTPUT                       *\n*                                                                     *\n***********************************************************************\nRETURN0  DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CALL THE JOB INFORMATION TASK                                *\n*                                                                     *\n*        ON INPUT:                                                    *\n*                                                                     *\n*        R2     - JITB ADDRESS                                        *\n*        R11    - HCT                                                 *\n*        R13    - PCE                                                 *\n*        R15    - ENTRY POINT ADDRESS                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCALLJIT  $SAVE\n         USING CALLJIT,R12         SET ADDRESSABILITY TO ROUTINE\n         LR    R12,R15             SET BASE REGISTER\n         ICM   R5,B'1111',$UCT     LOAD UCT ADDRESS\n         BZ    CALLJITB            NONE, BRANCH\n         USING UCT,R5              SET ADDRESSABILITY TO UCT\n         ICM   R4,B'1111',UCTJITDT LOAD JIT DTE ADDRESS\n         BZ    CALLJITB            NONE, BRANCH\n         USING DTE,R4              SET ADDRESSABILITY TO DTE\n         MVI   JITBFLG,JITBREAD    TURN ON READ OPERATION REQUEST\n         XC    JITBXECB(L'XECBECB),JITBXECB CLEAR THE XECB\n         L     R1,DTEFQUE          LOAD THE WORK QUEUE ADDRESS\nCALLJITA ST    R1,JITBCH           PUSH HEAD QUEUE DOWN\n         CS    R1,R2,DTEFQUE       ADD TO WORK QUEUE\n         BNE   CALLJITA            CHANGED, TRY AGAIN\n         POST  DTEWECB             POST SUBTASK\n         $WAIT OPER,XECB=JITBXECB,INHIBIT=YES\n         DROP  R4                  DROP ADDRESSABILITY TO DTE\n         DROP  R5                  DROP ADDRESSABILITY TO UCT\n         SPACE 1\nCALLJITB $RETURN ,                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*                   CONSTANTS USED IN THIS EXIT                       *\n*                                                                     *\n***********************************************************************\nMSG1     $MSG  999,'EXIT ROUTINE J003STCS ENCOUNTERED AN INVALID JITB'\n         SPACE 3\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "J003UNJH": {"ttr": 8969, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 USER NETWORK JOB HEADER CREATION ROUTINE'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM WILL CREATE A USER NETWORK JOB        *\n*        HEADER RECORD FOR EVERY JOB.  THIS HEADER RECORD IS          *\n*        DESIGNED PRIMARILY TO CONTAIN THE JOB ACCOUNTING             *\n*        INFORMATION FOR A JOB SINCE IT IS TOO LARGE TO BE            *\n*        CONTAINED IN THE FOUR BYTE FIELD PROVIDED BY JES2            *\n*        AND THE JQE USER FIELDS SO THEY CAN BE MAINTAINED            *\n*        ACROSS NJE TRANSMISSION AND SPOOL OFFLOAD/RELOAD.            *\n*        ROOM WILL BE LEFT IN THE HEADER RECORD FOR FUTURE USE.       *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*            M A C R O S   U S E D   I N   J 0 0 3 U N J H            *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $ENTRY       SYS1.HASPSRC                               *\n*        04)  $FCSUHDR     SYS1.HASPSRC (USER)                        *\n*        04)  $FREEBUF     SYS1.HASPSRC                               *\n*        05)  $GETBUF      SYS1.HASPSRC                               *\n*        06)  $HASPEQU     SYS1.HASPSRC                               *\n*        07)  $HASPGBL     SYS1.HASPSRC                               *\n*        08)  $HCT         SYS1.HASPSRC                               *\n*        09)  $JCT         SYS1.HASPSRC                               *\n*        10)  $JQE         SYS1.HASPSRC                               *\n*        11)  $MIT         SYS1.HASPSRC                               *\n*        12)  $MODEND      SYS1.HASPSRC                               *\n*        13)  $MODULE      SYS1.HASPSRC                               *\n*        14)  $MSG         SYS1.HASPSRC                               *\n*        15)  $NHD         SYS1.HASPSRC                               *\n*        16)  $PADDR       SYS1.HASPSRC                               *\n*        17)  $PCE         SYS1.HASPSRC                               *\n*        18)  $SAVE        SYS1.HASPSRC                               *\n*        19)  $RETURN      SYS1.HASPSRC                               *\n*        20)  $WTO         SYS1.HASPSRC                               *\n*        21)  IFGRPL       SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       1K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ003UNJH $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 USER NETWORK JOB HEADER CREATION ROUTINE',  X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP SVT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $NHD,               GENERATE HASP NDH DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               RPL                 GENERATE MVS  RPL DSECT\n         TITLE 'JES2 USER NETWORK JOB HEADER CREATION ROUTINE'\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREA                                            *\n*                                                                     *\n***********************************************************************\nWORKAREA DSECT\n         DS    CL(BUFSTART-BFPDSECT) ***** RESERVED BY JES2 *****\nTRLENGTH DS    H                   LENGTH OF TRAILER RECORDS\nSOFLNGTH DS    H                   LENGTH OF SPOOL OFFLOAD FAC SECTION\nSOFADDR  DS    F                   ORIGINAL ADDR OF SOF SECTION\nSAVETRL  DS    0F\n         SPACE 3\n         $FCSUHDR ,                GENERATE USER NJE JOB HEADER DSECT\nJ003UNJH CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE003UNJH $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLERS REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         USING JCT,R10             SET ADDRESSABILITY TO JCT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R0  - LENGTH OF ACCOUNTING FIELD.                            *\n*        R1  - THE ADDRESS OF A 3 WORD PARAMETER LIST                 *\n*              WORD 1 - ADDRESS OF THE ACCOUNTING FIELD (JCTWORK)     *\n*              WORD 2 - ADDRESS OF THE EXIT FLAG BYTE IN THE PCE      *\n*              WORD 3 - ADDRESS OF THE JCTXWRK FIELD IN THE JCT       *\n*        R10 - ADDRESS OF THE JCT                                     *\n*        R11 - ADDRESS OF THE HCT                                     *\n*        R13 - ADDRESS OF THE PCE                                     *\n*        R14 - RETURN ADDRESS                                         *\n*        R15 - ENTRY ADDRESS                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*        SAVE INPUT REGISTERS\n***********************************************************************\n         LR    R7,R0              SAVE REG 0\n         LR    R8,R1              SAVE REG 1\n***********************************************************************\n*        GET A WORK AREA FOR THE EXIT                                 *\n***********************************************************************\n         SPACE 3\n         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R9,R1               SAVE WORK AREA ADDRESS\n         USING WORKAREA,R9         SET ADDRESSABILITY TO BUFFER\n***********************************************************************\n*        SEE IF ROOM FOR USER AREA IN JCT                             *\n***********************************************************************\n         SPACE 3\n         LA    R4,JCTNJHDR         POINT TO START OF NETWORK HEADERS\n         LH    R5,0(R4)            LOAD LENGTH OF NETWORK HEADERS\n         AR    R4,R5               POINT TO START OF NETWORK TRAILERS\n         AH    R5,0(R4)            ADD LEN OF TRAILERS TO LEN OF HEAD\n         LA    R6,FCSUHDRS         LOAD LENGTH OF USER HEADER\n         AR    R6,R5               GET NEW LEN OF HEADERS AND TRAILERS\n         LA    R4,JCTNJHDR         GET LENGTH OF\n         SR    R4,R10                   JCT BASE AREA\n         AR    R4,R6               GET NEW LENGTH OF JCT\n         CH    R4,$BUFSIZE         SEE IF EXCEEDS MAXIMUM\n         BH    ERROR1              YES, ERROR\n***********************************************************************\n*                                                                     *\n*        SEARCH FOR A USER NETWORK HEADER (IF ONE)                    *\n*                          OR                                         *\n*        SEARCH FOR THE SPOOL OFFLOAD HEADER (IF ONE)                 *\n*                                                                     *\n*        ALL JES2 LEVELS ABOVE SP 1.3.4 HAVE A SPOOL OFFLOAD          *\n*        HEADER SECTION WHICH MUST BE THE LAST SECTION OF THE         *\n*        NETWORK HEADERS.                                             *\n*                                                                     *\n***********************************************************************\nFSOF01   LA    R2,JCTNJHDR         POINT TO START OF NETWORK HEADERS\n         USING NJHU,R2             SET ADDRESSABILITY TO USER HEADER\n         XC    SOFLNGTH,SOFLNGTH   ZERO THE LENGTH OF THE SOF HEADER\n         XC    SOFADDR,SOFADDR     ZERO THE ADDRESS OF THE SOF HEADER\n         LH    R3,0(R2)            LOAD LENGTH OF NETWORK HEADERS\n         AR    R3,R2               GET END ADDRESS OF NETWORK HEADERS\n         LA    R2,4(R2)            LOAD START ADDRESS OF FIRST HEADER\nFSOF02   CR    R2,R3               SEE IF END OF HEADERS\n         BNL   FSOFEND             YES, GET OUT\n         TM    NJHUTYPE,NTYPUSER   SEE IF USER SECTION\n         BNO   FSOF03              NO, GO GET NEXT HEADER\n         CLC   NJHUCODE,=CL4'FCSH' SEE IF OUR USER SECTION\n         BE    EXIT                YES, NO NEED FOR ANOTHER SECTION\nFSOF03   CLI   NJHUTYPE,NTYPJES2   SEE IF JES2 SECTION\n         BNE   FSOF04              NO, GO GET NEXT HEADER\n         CLI   NJHUMOD,NJTO$MOD    SEE IF SOF SUB TYPE\n         BE    FSOF05              YES, BRANCH\nFSOF04   AH    R2,0(R2)            POINT TO NEXT HEADER\n         B     FSOF02              LOOP\nFSOF05   MVC   SOFLNGTH,0(R2)      SAVE LENGTH OF SOF HEADER\n         ST    R2,SOFADDR          SAVE ADDRESS OF THE SOF HEADER\nFSOFEND  DS    0H\n***********************************************************************\n*        SAVE SOF SECTION AND NETWORK TRAILER RECORDS IN WORK AREA    *\n***********************************************************************\n         LA    R2,JCTNJHDR         POINT TO START OF NETWORK HEADERS\n         LH    R3,0(R2)            LOAD LENGTH OF NETWORK HEADERS\n         AR    R2,R3               POINT TO START OF NETWORK TRAILERS\n         LH    R3,0(R2)            LOAD LENGTH OF TRAILERS\n         AH    R3,SOFLNGTH         ADD LENGTH OF SOF SECTION\n         OC    SOFADDR,SOFADDR     SEE IF SOF SECTION FOUND\n         BZ    NOSOF1              NO, BRANCH\n         L     R2,SOFADDR          YES, USE ADDR OF SOF AS START\nNOSOF1   LA    R4,SAVETRL          LOAD ADDRESS OF WORK AREA\n         LR    R5,R3               SET LENGTH OF WORK AREA\n         STH   R5,TRLENGTH         SAVE LENGTH\n         MVCL  R4,R2               SAVE TRAILER\n***********************************************************************\n*        CREATE USER HEADER RECORD IN VACATED AREA                    *\n***********************************************************************\n         LA    R1,JCTNJHDR         POINT TO START OF NETWORK HEADERS\n         LH    R3,0(R1)            LOAD LENGTH OF NETWORK HEADERS\n         AR    R1,R3               POINT PAST OLD HEADERS\n         OC    SOFADDR,SOFADDR     SEE IF SOF SECTION FOUND\n         BZ    NOSOF2              NO, BRANCH\n         L     R1,SOFADDR          YES, USE ADDR OF SOF AS START\n         USING FCSUHDR,R1          SET ADDRESSABILITY TO USER HDR RECD\nNOSOF2   XC    FCSUHDR(FCSUHDRS),FCSUHDR CLEAR USER HDR RECORD\n         LA    R4,FCSUHDRS         LOAD LENGTH OF USER HEADER RECORD\n         STH   R4,FCSUHDRL         SAVE IN USER HEADER RECORD\n         MVI   FCSUHTYP,NTYPUSER   SET TO USER HEADER TYPE\n         MVI   FCSUHMOD,NJHU$MOD   SET MODIFIER VALUE\n         MVC   FCSUHID,=CL4'FCSH'  SET USER HEADER IDENTIFIER\n***********************************************************************\n*        RESET LENGTH FIELD AND MOVE TRAILER RECORDS BACK             *\n***********************************************************************\n         LA    R2,JCTNJHDR         POINT TO START OF NETWORK HEADERS\n         LH    R3,0(R2)            LOAD OLD LENGTH OF NETWORK HEADERS\n         LA    R3,FCSUHDRS(R3)     ADD LENGTH OF USER HEADER TO OLD LEN\n         STH   R3,0(R2)            SAVE NEW LENGTH OF NETWORK HEADERS\n         AR    R2,R3               POINT PAST NETWORK HEADERS\n         OC    SOFADDR,SOFADDR     SEE IF SOF SECTION FOUND\n         BZ    NOSOF3              NO, BRANCH\n         L     R2,SOFADDR          YES, USE ADDR OF SOF AS START\n         LA    R2,FCSUHDRS(R2)     ADD LENGTH OF USER HEADER TO START\nNOSOF3   LH    R3,TRLENGTH         SET LENGTH OF NETWORK TRAILERS\n         LA    R4,SAVETRL          LOAD ADDRESS OF WORK AREA\n         LR    R5,R3               SET LENGTH OF WORK AREA\n         MVCL  R2,R4               RESTORE TRAILER\n***********************************************************************\n*        MOVE FIRST JOB ACCOUNTING FIELD TO USER HEADER RECORD        *\n***********************************************************************\nSETACCT  LTR   R7,R7               TEST LENGTH OF ACCOUNTING FIELD\n         BZ    EXIT                ZERO, LEAVE IT ALONE\n         L     R2,0(R8)            LOAD ADDRESS OF ACCOUNTING AREA\n         LR    R0,R2               SAVE START OF FIELD ADDRESS\n         SLR   R3,R3               SET 1ST ACCOUNTING FIELD LENGTH TO 0\n         CLI   0(R2),C'('          NORMAL START OF ACCOUNTING FIELD\n         BE    SETACCT1            YES, BRANCH\n         CLI   0(R2),C''''         SEE IF QUOTED FIELD\n         BE    SETACCT3            YES, BRANCH\n         B     SETACCT2            GO PROCESS AT START OF FIELD\nSETACCT1 LA    R2,1(R2)            INCREMENT PAST '('\n         LR    R0,R2               SAVE START OF FIELD ADDRESS\n         BCTR  R7,0                REDUCE LENGTH OF ACCT FIELD BY 1\n         LTR   R7,R7               TEST LENGTH\n         BZ    EXIT                ZERO, NO REAL ACCT\n         CLI   0(R2),C''''         SEE IF QUOTED FIELD\n         BE    SETACCT3            YES, BRANCH\nSETACCT2 CLI   0(R2),C','          END OF FIELD\n         BE    SETACCT6            YES, BRANCH\n         CLI   0(R2),C')'          END OF FIELD\n         BE    SETACCT6            YES, BRANCH\n         CLI   0(R2),C' '          END OF FIELD\n         BE    SETACCT6            YES, BRANCH\n         LA    R3,1(R3)            ADD 1 TO LENGTH COUNTER\n         LA    R2,1(R2)            INCREMENT TO NEXT POSITION OF ACCT\n         BCT   R7,SETACCT2         LOOP\n         B     SETACCT6            GO SAVE ACCT\nSETACCT3 LA    R2,1(R2)            INCREMENT PAST QUOTE\n         LR    R0,R2               SAVE START OF FIELD ADDRESS\n         BCTR  R7,0                REDUCE LENGTH OF ACCT FIELD BY 1\n         LTR   R7,R7               TEST LENGTH\n         BZ    EXIT                ZERO, NO REAL PARM\nSETACCT4 CLC   0(2,R2),=C''''''    DOUBLE QUOTE?\n         BE    SETACCT5            YES, BRANCH\n         CLI   0(R2),C''''         END OF FIELD\n         BE    SETACCT6            YES, BRANCH\n         LA    R3,1(R3)            ADD 1 TO LENGTH COUNTER\n         LA    R2,1(R2)            INCREMENT TO NEXT POSITION OF ACCT\n         BCT   R7,SETACCT4         LOOP\n         B     SETACCT6            GO SAVE ACCT FIELD\nSETACCT5 LA    R3,2(R3)            ADD 2 TO LENGTH COUNTER\n         LA    R2,2(R2)            INCREMENT TO NEXT POSITION OF ACCT\n         BCTR  R7,0                DECREMENT LOOP COUNTER 1 EXTRA TIME\n         BCT   R7,SETACCT4         LOOP\nSETACCT6 LR    R2,R0               RESET START OF ACCT ADDRESS\n         LTR   R3,R3               TEST ACCT LENGTH\n         BZ    EXIT                ZERO, NO REAL ACCT\n         CH    R3,=H'20'           SEE IF ACCT LENGTH GT 20\n         BNH   SETACCT7            NO, BRANCH\n         LH    R3,=H'20'           SET TO MAX LENGTH\nSETACCT7 STH   R3,FCSUHACL         SAVE LENGTH OF PARM\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MVACCT           MOVE ACCOUNTING FIELD TO USER HEADER\n         B     EXIT                GET OUT\nMVACCT   MVC   FCSUHACT(0),0(R2)   **** EXECUTE ONLY ****\n         DROP  R1                  DROP ADDRESSABILITY TO USER HDR RECD\n***********************************************************************\n*                                                                     *\n*        FREE THE WORK AREA AND RETURN WITH THE APPROPRIATE           *\n*        RETURN CODE.                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nEXIT     $FREEBUF (R9)             FREE THE BUFFER\n         B     RETURN0             GET OUT\n         DROP  R9                  DROP ADDRESSABILITY TO THE BUFFER\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - CANCEL THE JOB BUT PRODUCT THE OUTPUT LISTING      *\n*        RC = 12 - PURGE THE JOB WITH NO OUTPUT                       *\n*                                                                     *\n***********************************************************************\nRETURN0  DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n***********************************************************************\n*                                                                     *\n*                      ERROR ROUTINES                                 *\n*                                                                     *\n***********************************************************************\n               SPACE 3\nERROR1   LA    R1,MSG1             LOAD ADDRESS OF MESSAGE\n         LA    R0,L'MSG1           LOAD LENGTH OF MESSAGE\n         $WTO  (R1),(R0),JOB=NO,CMB=NO,WAIT=NO,ROUTE=$MAIN,UCM=NO\n               SPACE 3\n         B     EXIT                GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                   CONSTANTS USED IN THIS EXIT                       *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LTORG\n         SPACE 3\nMSG1     $MSG  999,'NO ROOM IN JCT TO ADD NETWORK USER HEADER'\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "J004$JEC": {"ttr": 9220, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "J004$JEC TITLE 'FUNB MODIFICATION FOR DEPENDENT JOB CONTROL'\n***********************************************************************\n*                                                                     *\n* MODULE NAME - J004$JEC                                              *\n*                                                                     *\n* DESCRIPTIVE NAME - DEPENDENT JOB CONTROL                            *\n*                                                                     *\n* JES2 LEVEL - SP 2.2.0                                               *\n*                                                                     *\n* FUNCTION - THIS EXIT SUPPORTS THE FUNB DEPENDENT JOB CONTROL        *\n*            FACILITY.  JECL STATEMENTS ARE SCANNED AND SPECIFIC      *\n*            OPERATIONS ARE PERFORMED ON EACH OF THE ONES LISTED      *\n*            BELOW.  THE INFORMATION IS SET IN THE JQE.               *\n*                                                                     *\n*            /*SETUP    USED TO NAME THE TAPE OR DISK VOLUMES         *\n*                       NEEDED BY THE JOB.                            *\n*                                                                     *\n*            /*THREAD   SPECIFIES A NAME THAT WILL BE USED TO SINGLE  *\n*                       THREAD ALL OTHER JOBS SPECIFYING THIS NAME.   *\n*                       THIS STATEMENT CAN OPTIONALLY PLACE A JOB ON  *\n*                       USER HOLD PENDING RELEASE BY ANOTHER JOB.     *\n*                                                                     *\n*            /*EXCLUDE  SPECIFIES ONE JOB NAME THAT, IF CURRENTLY     *\n*                       EXECUTING, WILL KEEP THIS JOB FROM            *\n*                       EXECUTING.  THE REVERSE IS NOT TRUE           *\n*                       UNLESS THOSE JOBS EXCLUDE THIS ONE AS WELL.   *\n*                                                                     *\n*            /*RELEASE  SPECIFIES ONE JOB NAME THAT WILL GET          *\n*                       RELEASED FROM USER HOLD                       *\n*                                                                     *\n*            OPERATOR COMMANDS ALLOW THE JQE TO BE DISPLAYED, JOBS    *\n*            TO BE SETUP AND RELEASED.                                *\n*                                                                     *\n*            QUEUE SCAN REPLACEMENT PERFORM THREAD/EXCLUDE PROCESSING.*\n*                                                                     *\n*                                                                     *\n* EXIT ENVIRONMENT                                                    *\n*                                                                     *\n*    JES2 MAIN TASK                                                   *\n*                                                                     *\n* MODULE ATTRIBUTES                                                   *\n*                                                                     *\n*                                                                     *\n* ENTRY POINTS = E004$JEC - PROCESS JECL STATEMENTS                   *\n*                                                                     *\n***********************************************************************\n         SPACE\n         COPY  $HASPGBL\nJ004$JEC $MODULE $HASPEQU,                                             X\n               $PCE,               CONTAINS USING PCEDSECT,R13         X\n               $CMB,                                                   X\n               $DCT,                                                   X\n               $PDDB,                                                  X\n               $IOT,                                                   X\n               $RDRWORK,                                               X\n               $BUFFER,                                                X\n               $JQE,                                                   X\n               $JCT,                                                   X\n               $CAT,                                                   X\n               $JOE,                                                   X\n               $NIT,                                                   X\n               $TAB,                                                   X\n               $MIT,                                                   X\n               $KIT,                                                   X\n               $HCT,                                                   X\n               $PADDR,                                                 X\n               RPL\n         TITLE 'MAPPING OF JCTXWRK AREA'\nFCSXWRK  DSECT                      FUNB USAGE OF JCTXWRK (80 BYTES)\nFCSXSAVE DS   2F                    R0 & R1 SAVE AREA\nFCSXPARM DS   0F                    SCANDLMT PARAMETER LIST\nFCSXDLM  DS    F                      A(DELIMITER TABLE)\nFCSXSTA  DS    F                      START OF FIELD\nFCSXEND  DS    F                      END OF FIELD\nFCSXFND  DS    F                      A(FOUND DELIMITER)\nFCSXGM   DS    F                    ADDR. OF GETMAINED WORK AREA\nFCSXDLMT DS    CL4                  DELIMITER WORK AREA\n         SPACE\nFCSLPARM DS   0F                    $LOCATE PARAMETER LIST\nFCSLACCT DS    F\nFCSLWORK DS    F\nFCSLRC   DS    F\nFCSLPID  DS    XL4\n         TITLE 'ROUTINE E004$JEC UPDATE JQE FLAGS FROM JECL STATEMENTS'\nE004$JEC $ENTRY BASE=R12,CSECT=YES\n         $SAVE\n*----------------------------------------------------------------------\n*\n* REGISTER USAGE IN E004$JEC\n*\n*  R0  -\n*  R1  -\n*  R2  - BUFFER CONTAINING STATEMENT; WORK\n*  R3  - WORK AREA IN JCT (0 IF NO JCT EXIST)\n*  R4  - WORK\n*  R5  - PARAMETER PROCESSING\n*  R7  -\n*  R9  -\n*  R10 - JCT\n*  R11 - HCT\n*  R12 - BASE\n*  R13 - PCE\n*  R14 - RETURN\n*  R15 - ENTRY POINT; BALR; RETURN CODE\n*\n*----------------------------------------------------------------------\n         SPACE 1\n         LR    R12,R15             LOAD OUR BASE\n         USING JCT,R10\n         LTR   R0,R0               IS THIS FOR A JECL STATEMENT?\n         BNZ   RETURN0               NO, RETURN TO JES\n         L     R2,0(R1)            GET ADDRESS OF STATEMENT BUFFER\n         L     R3,8(R1)              AND WORK AREA\n         LTR   R3,R3               IF NO JCT EXISTS YET,\n         BZ    RETURN0               DON'T PROCESS ANYTHING\n         USING FCSXWRK,R3\n         STM   R0,R1,FCSXSAVE      SAVE INPUT PARAMETERS\n         SPACE\n*======================================================================\n* DETERMINE LENGTH OF JECL STATEMENT NAME\n*======================================================================\n         SPACE\n         LA    R4,2(R2)            POINT PAST /*\n         ST    R4,FCSXSTA            AND SET STARTING POINT\n         LA    R4,70(R2)           POINT TO END OF CARD\n         ST    R4,FCSXEND            AND SET STARTING POINT\n         LA    R4,=X'0140'         SCAN FOR A BLANK\n         ST    R4,FCSXDLM\n         LA    R1,FCSXPARM         PRELOAD R1\n         CALL  SCANDLMT             AND CALL SCAN ROUTINE\n         L     R1,FCSXFND          GET ADDR OF FOUND DELIMITER\n         LTR   R1,R1               IF NO BLANK FOUND,\n         BZ    RETURN0               RETURN AND LET JES FLAG IT.\n         S     R1,FCSXSTA          GET LENGTH OF JECL NAME\n         BNP   RETURN0             IF 0 OR -, CAN IT!\n         CH    R1,=H'8'            IF > 8,\n         BH    RETURN0               RETURN AND LET JES FLAG IT.\n         BCTR  R1,R0               DROP 1 FOR EXECUTED CLC\n         SPACE\n*======================================================================\n* SEE IF THIS JECL STATEMENT IS TO BE PROCESSED BY US\n*======================================================================\n         SPACE\n         L     R2,FCSXSTA          POINT TO JECL NAME\n         LA    R4,JECLTBL          TABLE OF APPLICABLE JECL STMTS\n         LA    R5,JECL#              AND # ENTRIES\nCKJECL   EX    R1,CLCJECL          IF EQUAL\n         BE    PRCJECL               GO CALL PROCESSING RTN.\n         LA    R4,LJECLTBL(R4)     ELSE, INCREMENT TO NEXT ENTRY\n         BCT   R5,CKJECL             AND TRY AGAIN.\n         B     RETURN0             NO MATCH, RETURN TO JES.\n         SPACE\nPRCJECL  L     R15,8(R4)           GET PROCESSING ROUTINE\n         LA    R1,FCSXWRK          GIVE IT THE WORK AREA ADDRESS\n         BALR  R14,R15               AND CONTROL\n         B     RETURN              ROUTINE WILL SET RC FOR US\n         SPACE\nRETURN0  SR    R15,R15             SET ZERO RETURN CODE\n         SPACE\nRETURN   $RETURN RC=(R15)          ISSUE RETURN\n         SPACE\nCLCJECL  CLC   0(1,R2),0(R4)\nJECLTBL  DS   0F\n         DC    CL8'SETUP',A(PRCSETP)\nLJECLTBL EQU   *-JECLTBL\n         DC    CL8'THREAD',A(PRCTHRD)\n         DC    CL8'EXCLUDE',A(PRCEXCL)\n         DC    CL8'RELEASE',A(PRCRLSE)\n         DC    CL8'CHAIN',A(PRCCHN)\nJECL#    EQU   (*-JECLTBL)/LJECLTBL\n         LTORG\n*\n         TITLE 'ROUTINE PRCSETP - PROCESS SETUP JECL STATEMENT'\n***********************************************************************\n*                                                                     *\n* ROUTINE: PRCSETP - SUBROUTINE TO PROCESS SETUP JECL STATEMENTS FOR  *\n*                    DEPENDENT JOB CONTROL.                           *\n*                                                                     *\n* INPUT  R1    - FCSXWRK                                              *\n*        R10   - JCT                                                  *\n*        R11   - HCT                                                  *\n*        R12   - BASE                                                 *\n*        R13   - PCE                                                  *\n*        R14   - RETURN                                               *\n*        R15   - ENTRY                                                *\n*                                                                     *\n* OUTPUT                                                              *\n*        R15   - RETURN CODE FOR JES2                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nPRCSETP  CSECT\n         $SAVE\n         USING PRCSETP,R12              SETUP\n         LR    R12,R15                   BASE\n         L     R9,PCEJQE                GET JQE ADDRESS\n         USING JQE,R9                     AND SET UP ADDRESSABILITY\n         TM    JQEXFLG2,JQEXWSET        IS SETUP ON?\n         BC    1,RETSETP0               YEP..GET OUT OF TOWN PARTNER\n         $QSUSE ,                       SYNC. CHECKPOINT AND WAIT\n         OI    JQEXFLG2,JQEXWSET        INDICATE JOB SETUP\n         SPACE\nRETSETP0 LA    R15,8                    TELL JES TO COMMENT OUT CARD\n         $RETURN RC=(R15)\n         LTORG\n         DROP  R3,R9\n*\n         TITLE 'ROUTINE PRCTHRD - PROCESS THREAD JECL STATEMENT'\n***********************************************************************\n*                                                                     *\n* ROUTINE: PRCTHRD - SUBROUTINE TO PROCESS THREAD JECL STATEMENTS     *\n*                    FOR DEPENDENT JOB CONTROL.                       *\n*                                                                     *\n* JECL FORMAT: FIXED FORMAT AS FOLLOWS.                               *\n*                                                                     *\n*              COLS  1- 8  /*THREAD                                   *\n*                   11-14  HOLD OR BLANKS                             *\n*                   16-23  THREAD NAME DELIMITED BY A BLANK           *\n*                   24-71  UNREFERENCED                               *\n*                                                                     *\n* INPUT  R1    - FCSXWRK                                              *\n*        R10   - JCT                                                  *\n*        R11   - HCT                                                  *\n*        R13   - PCE                                                  *\n*        R14   - RETURN                                               *\n*        R15   - ENTRY                                                *\n*                                                                     *\n* USAGE  R1    - WORK                                                 *\n*        R2    - DEFAULT ERROR MESSAGE TO BE ISSUED                   *\n*        R3    - FCSXWRK                                              *\n*        R4    - WORK                                                 *\n*        R9    - JQE                                                  *\n*        R12   - BASE                                                 *\n*                                                                     *\n* OUTPUT                                                              *\n*        R15   - RETURN CODE FOR JES2                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nPRCTHRD  CSECT\n         $SAVE\n         USING PRCTHRD,R12              SETUP\n         LR    R12,R15                   BASE\n         LR    R3,R1                    GET WORK AREA ADDRESS\n         USING FCSXWRK,R3                 AND SET UP ADDRESSABILITY\n         LA    R2,PRCITHRD              POINT TO DEFAULT INVALID MSG\n         L     R9,PCEJQE\n         USING JQE,R9                   SET UP ADDRESSABILITY TO JQE\n         $QSUSE ,                       SYNCHRONIZE FOR SHARED QUEUES\n         SPACE\nPRCTHRDA L     R1,FCSXSAVE+4            POINT TO SAVED REG1\n         L     R1,0(R1)                  AND RELOAD R1 (CARD IMAGE)\n         XC    FCSXDLMT,FCSXDLMT        USE FCSXDLMT AS A SAVE\n         CLC   9(6,R1),=C' HOLD '       IF COLS 10-15 = ' HOLD '\n         BNE   PRCTHRDC\n         OI    JQEXFLG2,JQEXUHLD        SET USER HOLD INDICATOR\n         B     PRCTHRDE                   AND CHECK FOR A THREAD NAME\n         SPACE\nPRCTHRDC CLC   9(6,R1),$BLANKS          IF 'HOLD' OR BLANKS DONT EXIST\n         BNE   RETTHRDC                   CAN THIS JOB!\n         SPACE\nPRCTHRDE LA    R1,15(R1)                POINT TO BEGINNING\n         ST    R1,FCSXSTA                 OF THREAD NAME\n         LA    R1,9(R1)                 POINT TO END\n         ST    R1,FCSXEND                 OF SCAN\n         LA    R1,=X'0140'              SCAN FOR A\n         ST    R1,FCSXDLM                 BLANK\n         LA    R1,FCSXPARM              PRELOAD PARM LIST ADDRESS\n         CALL  SCANDLMT                 INVOKE SCAN\n         SPACE\n         L     R4,FCSXFND               GET A(DELIMITER)\n         LTR   R4,R4                    WAS ONE FOUND?\n         BZ    RETTHRDC                   NO, TELL JES TO CAN JOB\n         S     R4,FCSXSTA               GET L' THREAD NAME\n         BNP   RETTHRDC                 IF 0 OR -, CAN THIS ONE!\n         CH    R4,=H'8'                 IF > 8\n         BNH   PRCTHRDG                   TRUNCATE TO 8.\n         LH    R4,=H'8'\nPRCTHRDG BCTR  R4,R0                    DROP FOR EXECUTED MVC\n         MVC   JQEXTHRN,$BLANKS         BLANK FIELD FIRST\n         L     R5,FCSXSTA               POINT TO START OF SUPPLIED NAME\n         EX    R4,MVCTHRD                 AND MOVE IT.\n         OI    JQEXFLG2,JQEXTHRD        TURN ON THREAD BIT\n         SPACE\nRETTHRD8 SR    R15,R15                  SET RETURN CODE SO THAT\n         LA    R15,8                      STATEMENT IS BYPASSED\n         B     RETTHRD                    THEN RETURN\n         SPACE\nRETTHRDC SR    R15,R15                  SET RETURN CODE\n         LA    R15,12                     TO 12.\n         L     R1,FCSXWRK+4             RELOAD INITIAL PARAMETER VALUE\n         L     R4,4(R1)                 A(EXIT FLAG)\n         OI    0(R4),X'20'              INDICATE WE HAVE AN ERROR MSG\n         L     R4,8(R1)                 LOAD A(JCTXWRK)\n         MVC   0(80,R4),0(R2)           MOVE SUPPLIED MESSAGE\n         MVC   0(1,R4),$CCOMCHR           AND INDICATE WHICH JES WE ARE\n         B     RETTHRD\n         SPACE\nRETTHRD  $RETURN RC=(R15)               RETURN TO CALLER\n         SPACE\nMVCTHRD  MVC   JQEXTHRN(1),0(R5)\nPRCITHRD DC    CL80'$HASPFCS INVALID /*THREAD STATEMENT'\n         LTORG\n         DROP  R3,R9\n*\n         TITLE 'ROUTINE PRCEXCL - PROCESS EXCLUDE JECL STATEMENT'\n***********************************************************************\n*                                                                     *\n* ROUTINE: PRCEXCL - SUBROUTINE TO PROCESS EXCLUDE JECL STATEMENTS    *\n*                    FOR DEPENDENT JOB CONTROL.                       *\n*                                                                     *\n* JECL FORMAT: FIXED FORMAT AS FOLLOWS.                               *\n*                                                                     *\n*              COLS  1- 8  /*EXCLUDE                                  *\n*                    9 71  ONE OR MORE BLANKS FOLLOWED BY EXCLUDE     *\n*                          NAMES SEPARATED BY COMMAS.                 *\n*                                                                     *\n* INPUT  R1    - FCSXWRK                                              *\n*        R10   - JCT                                                  *\n*        R11   - HCT                                                  *\n*        R13   - PCE                                                  *\n*        R14   - RETURN                                               *\n*        R15   - ENTRY                                                *\n*                                                                     *\n* USAGE  R1    - WORK                                                 *\n*        R2    - DEFAULT ERROR MESSAGE TO BE ISSUED                   *\n*        R3    - FCSXWRK                                              *\n*        R4    - WORK                                                 *\n*        R9    - JQE                                                  *\n*        R12   - BASE                                                 *\n*                                                                     *\n* OUTPUT                                                              *\n*        R15   - RETURN CODE FOR JES2                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nPRCEXCL  CSECT\n         $SAVE\n         USING PRCEXCL,R12              SETUP\n         LR    R12,R15                   BASE\n         LR    R3,R1                    GET WORK AREA ADDRESS\n         USING FCSXWRK,R3                 AND SET UP ADDRESSABILITY\n         L     R9,PCEJQE                GET ADDRESS OF JQE\n         USING JQE,R9                     AND SET UP ADDRESSABILITY\n         L     R4,FCSXFND               SET NEW\n         ST    R4,FCSXSTA                 STARTING ADDRESS\n         LA    R4,=X'00'                SCAN FOR NON-BLANK\n         ST    R4,FCSXDLM\n         LA    R1,FCSXPARM              PRELOAD R1\n         CALL  SCANDLMT                 POSITION AT FIRST EXCLUDE NAME\n         L     R4,FCSXFND               GET FIRST NON-BLANK\n         LTR   R4,R4                    FIND ONE?\n         BZ    RETEXCLC                   NO, CAN THE JOB!\n         ST    R4,FCSXSTA               SET STARTING ADDRESS\n         LA    R4,=X'02406B'            SCAN FOR BLANK OR COMMA\n         ST    R4,FCSXDLM\n         XC    FCSXDLMT,FCSXDLMT        CLEAR RESULT INDICATORS\n         SPACE\nPRCEXCLB EQU   *\n*======================================================================\n*  FIND NEXT EXCLUDE NAME AND MOVE IT IN\n*======================================================================\n         CALL  SCANDLMT                 SCAN FOR NEXT DELIMITER\n         L     R4,FCSXFND               GET DELIMITER ADDR.\n         LTR   R4,R4                    IF ONE WAS FOUND,\n         BNZ   PRCEXCLD                   CONTINUE\n         L     R4,FCSXEND               ELSE, END OF CARD WAS REACHED\n         LA    R4,1(R4)                   SET ADDRESS TO END OF CARD\n         SPACE\nPRCEXCLD L     R6,FCSXSTA               START OF EXCLUDE NAME\n         SR    R4,R6                    GET LENGTH OF EXCLUDE NAME\n         BNP   RETEXCLC                   CANCEL IF 0 OF NEGATIVE\n         CH    R4,=H'8'                 IF > 8,\n         BH    RETEXCLC                   TELL JES TO CAN THIS JOB\n         BCTR  R4,R0                    ELSE DROP 1 FOR EXECUTED MOVE\n         $QSUSE ,                       SYNC. CHECKPOINT AND WAIT\n         MVC   JQEXEXCN,$BLANKS          BLANK OUT CURRENT JQE ENTRY\n         EX    R4,PRCMEXCL                AND MOVE IN EXCLUDE NAME\n         OI    JQEXFLG2,JQEXXCLU        TURN ON EXCLUDE BIT\n         SPACE\n*======================================================================\n*  TEST FOR END OF CARD\n*======================================================================\n*        L     R4,FCSXFND               GET DELIMITER ADDRESS\n*        LTR   R4,R4                    IF ZERO,\n*        BZ    PRCEXCLF                   END OF CARD\n*        CLI   0(R4),C' '               IF DELIMITER FOUND IS BLANK\n*        BE    PRCEXCLF                   END OF CARD\n*        SPACE\n*        LA    R4,1(R4)                 POINT TO NEXT POSITION\n*        C     R4,FCSXEND               IF > = END OF CARD,\n*        BNL   PRCEXCLF                   WE'RE DONE\n*        ST    R4,FCSXSTA               ELSE UPDATE STARTING POINT\n*        B     PRCEXCLB                   AND CONTINUE\n         SPACE\nPRCEXCLF EQU   *\n*======================================================================\n*  RETURNS\n*======================================================================\n         SPACE\nRETEXCL8 SR    R15,R15                  CLEAR RETURN CODE\n         LA    R15,8                    SET FOR JES2 TO IGNORE\n         B     RETEXCL\n         SPACE\nRETEXCLC L     R1,FCSXWRK+4             RELOAD ENTRY R1 VALUE\n         L     R2,4(R1)                   ADDRESS RXITFLAG\n         OI    0(R2),X'20'              INDICATE MESSAGE SUPPLIED\n         L     R2,8(R1)                 RELOAD JCTXWRK\n         MVC   0(80,R2),PRCIEXCL         MOVE IN MESSAGE\n         MVC   0(1,R2),$CCOMCHR          INDICATE PRI/SEC SUBSYSTEM\n         SR    R15,R15\n         LA    R15,12\n         SPACE\nRETEXCL  $RETURN RC=(R15)               RETURN TO CALLER\n         SPACE\nPRCMEXCL MVC   JQEXEXCN(1),0(R6)            MOVE IT INTO PLACE\nPRCIEXCL DC    CL80'$HASPFCS INVALID /*EXCLUDE STATEMENT'\n         LTORG\n         DROP  R3,R9\n         TITLE 'ROUTINE PRCRLSE - PROCESS RELEASE JECL STATEMENT'\n***********************************************************************\n*                                                                     *\n* ROUTINE: PRCRLSE - SUBROUTINE TO PROCESS RELEASE JECL STATEMENTS    *\n*                    FOR DEPENDENT JOB CONTROL.                       *\n*                                                                     *\n* JECL FORMAT: FIXED FORMAT AS FOLLOWS.                               *\n*                                                                     *\n*              COLS  1- 8  /*RELEASE                                  *\n*                    9 71  ONE OR MORE BLANKS FOLLOWED BY RELEASE     *\n*                          NAMES SEPARATED BY COMMAS.                 *\n*                                                                     *\n* INPUT  R1    - FCSXWRK                                              *\n*        R10   - JCT                                                  *\n*        R11   - HCT                                                  *\n*        R13   - PCE                                                  *\n*        R14   - RETURN                                               *\n*        R15   - ENTRY                                                *\n*                                                                     *\n* USAGE  R1    - WORK                                                 *\n*        R2    - DEFAULT ERROR MESSAGE TO BE ISSUED                   *\n*        R3    - FCSXWRK                                              *\n*        R4    - WORK                                                 *\n*        R9    - JQE                                                  *\n*        R12   - BASE                                                 *\n*                                                                     *\n* OUTPUT                                                              *\n*        R15   - RETURN CODE FOR JES2                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nPRCRLSE  CSECT\n         $SAVE\n         USING PRCRLSE,R12              SETUP\n         LR    R12,R15                   BASE\n         LR    R3,R1                    GET WORK AREA ADDRESS\n         USING FCSXWRK,R3                 AND SET UP ADDRESSABILITY\n         L     R9,PCEJQE                GET ADDRESS OF JQE\n         USING JQE,R9                     AND SET UP ADDRESSABILITY\n         L     R4,FCSXFND               SET NEW\n         ST    R4,FCSXSTA                 STARTING ADDRESS\n         LA    R4,=X'00'                SCAN FOR NON-BLANK\n         ST    R4,FCSXDLM\n         LA    R1,FCSXPARM              PRELOAD R1\n         CALL  SCANDLMT                 POSITION AT FIRST RELEASE NAME\n         L     R4,FCSXFND               GET FIRST NON-BLANK\n         LTR   R4,R4                    FIND ONE?\n         BZ    RETRLSEC                   NO, CAN THE JOB!\n         ST    R4,FCSXSTA               SET STARTING ADDRESS\n         LA    R4,=X'02406B'            SCAN FOR BLANK OR COMMA\n         ST    R4,FCSXDLM\n         XC    FCSXDLMT,FCSXDLMT        CLEAR RESULT INDICATORS\n         SPACE\nPRCRLSEB EQU   *\n*======================================================================\n*  FIND NEXT RELEASE NAME AND MOVE IT IN\n*======================================================================\n         CALL  SCANDLMT                 SCAN FOR NEXT DELIMITER\n         L     R4,FCSXFND               GET DELIMITER ADDR.\n         LTR   R4,R4                    IF ONE WAS FOUND,\n         BNZ   PRCRLSED                   CONTINUE\n         L     R4,FCSXEND               ELSE, END OF CARD WAS REACHED\n         LA    R4,1(R4)                   SET ADDRESS TO END OF CARD\n         SPACE\nPRCRLSED L     R6,FCSXSTA               START OF RELEASE NAME\n         SR    R4,R6                    GET LENGTH OF RELEASE NAME\n         BNP   RETRLSEC                   CANCEL IF 0 OF NEGATIVE\n         CH    R4,=H'8'                 IF > 8,\n         BH    RETRLSEC                   TELL JES TO CAN THIS JOB\n         BCTR  R4,R0                    ELSE DROP 1 FOR EXECUTED MOVE\n         $QSUSE ,                       SYNC. CHECKPOINT AND WAIT\n         MVC   JQEXRLSN,$BLANKS          BLANK OUT CURRENT JQE ENTRY\n         EX    R4,PRCMRLSE                AND MOVE IN RELEASE NAME\n         OI    JQEXFLG2,JQEXRLSE        TURN ON RELEASE BIT\n         SPACE\n*======================================================================\n*  TEST FOR END OF CARD\n*======================================================================\n*        L     R4,FCSXFND               GET DELIMITER ADDRESS\n*        LTR   R4,R4                    IF ZERO,\n*        BZ    PRCRLSEF                   END OF CARD\n*        CLI   0(R4),C' '               IF DELIMITER FOUND IS BLANK\n*        BE    PRCRLSEF                   END OF CARD\n*        SPACE\n*        LA    R4,1(R4)                 POINT TO NEXT POSITION\n*        C     R4,FCSXEND               IF > = END OF CARD,\n*        BNL   PRCRLSEF                   WE'RE DONE\n*        ST    R4,FCSXSTA               ELSE UPDATE STARTING POINT\n*        B     PRCRLSEB                   AND CONTINUE\n         SPACE\nPRCRLSEF EQU   *\n*======================================================================\n*  RETURNS\n*======================================================================\n         SPACE\nRETRLSE8 SR    R15,R15                  CLEAR RETURN CODE\n         LA    R15,8                    SET FOR JES2 TO IGNORE\n         B     RETRLSE\n         SPACE\nRETRLSEC L     R1,FCSXWRK+4             RELOAD ENTRY R1 VALUE\n         L     R2,4(R1)                   ADDRESS RXITFLAG\n         OI    0(R2),X'20'              INDICATE MESSAGE SUPPLIED\n         L     R2,8(R1)                 RELOAD JCTXWRK\n         MVC   0(80,R2),PRCIRLSE         MOVE IN MESSAGE\n         MVC   0(1,R2),$CCOMCHR          INDICATE PRI/SEC SUBSYSTEM\n         SR    R15,R15\n         LA    R15,12\n         SPACE\nRETRLSE  $RETURN RC=(R15)               RETURN TO CALLER\n         SPACE\nPRCMRLSE MVC   JQEXRLSN(1),0(R6)            MOVE IT INTO PLACE\nPRCIRLSE DC    CL80'$HASPFCS INVALID /*RELEASE STATEMENT'\n         LTORG\n         DROP  R3,R9\n         TITLE 'ROUTINE PRCCHN - PROCESS RELEASE JECL STATEMENT'\n***********************************************************************\n*                                                                     *\n* ROUTINE: PRCCHN - SUBROUTINE TO PROCESS CHAIN JECL STATEMENTS       *\n*                    FOR DEPENDENT JOB CONTROL.                       *\n*                                                                     *\n* JECL FORMAT: FIXED FORMAT AS FOLLOWS.                               *\n*                                                                     *\n*              COLS  1- 8  /*CHAIN                                    *\n*                    9 71  ONE OR MORE BLANKS FOLLOWED BY CHAIN       *\n*                          NAMES SEPARATED BY COMMAS.                 *\n*                                                                     *\n* INPUT  R1    - FCSXWRK                                              *\n*        R10   - JCT                                                  *\n*        R11   - HCT                                                  *\n*        R13   - PCE                                                  *\n*        R14   - RETURN                                               *\n*        R15   - ENTRY                                                *\n*                                                                     *\n* USAGE  R1    - WORK                                                 *\n*        R2    - DEFAULT ERROR MESSAGE TO BE ISSUED                   *\n*        R3    - FCSXWRK                                              *\n*        R4    - WORK                                                 *\n*        R9    - JQE                                                  *\n*        R12   - BASE                                                 *\n*                                                                     *\n* OUTPUT                                                              *\n*        R15   - RETURN CODE FOR JES2                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nPRCCHN   CSECT\n         $SAVE\n         USING PRCCHN,R12               SETUP\n         LR    R12,R15                   BASE\n*======================================================================\n*  RETURNS\n*======================================================================\n         SPACE\n         SR    R15,R15                  CLEAR RETURN CODE\n         LA    R15,8                    SET FOR JES2 TO IGNORE\n         SPACE\nRETCHN   $RETURN RC=(R15)               RETURN TO CALLER\n         SPACE\n         LTORG\n         TITLE 'J004$JEC COMMON ROUTINES; '\n         SPACE 1\n         TITLE 'SCANDLMT - SCAN A FIELD FOR ONE OR MORE DELIMITERS'\n*----------------------------------------------------------------------\n*\n* USE THIS ROUTINE TO FIND A DELIMITER WITHIN A FIELD.  MORE THAN ONE\n* DELIMITER CAN BE SCANNED FOR.  IF YOU WANT TO SCAN A FIELD FOR THE\n* FIRST NON-BLANK, SET THE NUMBER OF DELIMITERS TO ZERO.\n*\n* R1 - PARAMETER LIST\n*\n*      +0 - DELIMITER LIST.  FIRST BYTE = BINARY # DELIMITERS IN LIST\n*                            FOLLOWED BY DELIMITERS.  IE., TO SCAN A\n*                            A FIELD FOR (,) YOU WOULD CODE X'034D6B5D'\n*      +4 - BEGINNING OF FIELD TO BE SCANNED\n*      +8 - END OF FIELD TO BE SCANNED.\n*     +12 - ADDRESS OF FOUND DELIMITER\n*\n*----------------------------------------------------------------------\n         SPACE\nSCANDLMT CSECT\n         USING SCANDLMT,R15\n         $SAVE                     SAVE CALLERS REGISTERS\n         L     R2,0(R1)            POINT TO DELIMITER LIST\n         L     R7,4(R1)            GET FIELD STARTING ADDRESS\n         LA    R8,1                INCREMENT\n         L     R9,8(R1)            GET FIELD ENDING ADDRESS\n         SR    R3,R3               (CLEAN UP R3)\n         SPACE\nDLMTLOOP IC    R3,0(R2)            # CHARACTERS TO SCAN FOR.\n         LTR   R3,R3               IF 0,\n         BZ    NONBLNK               SCAN FOR FIRST NON-BLANK\n         LA    R4,1(R2)            POINT TO LIST OF DELIMITERS\n         SPACE\nCKDLMT   CLC   0(1,R7),0(R4)       FIND A HIT?\n         BE    DONE                  YES, SET RETURN POINTERS\n         LA    R4,1(R4)              NO, POINT TO NEXT DELIMITER\n         BCT   R3,CKDLMT               AND CONTINUE\n         SPACE\n         BXLE  R7,R8,DLMTLOOP      POINT TO NEXT BUFFER ADDRESS\n         SPACE\n         SR    R7,R7               INDICATE NO DELIMITER FOUND\n         B     DONE\n         SPACE\nNONBLNK  CLI   0(R7),C' '\n         BNE   DONE\n         BXLE  R7,R8,NONBLNK\n         SR    R7,R7               INDICATE NO DELIMITER FOUND\n         B     DONE\n         SPACE\nDONE     ST    R7,12(R1)           SET ADDRESS OF DELIMITER\n         $RETURN RC=0\n         LTORG\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "J004$OWN": {"ttr": 9477, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "J004$OWN TITLE 'ESTABLISH JOB OWNERSHIP FROM JOBPARM STATEMENT'\n***********************************************************************\n*                                                                     *\n* MODULE NAME - J004$OWN                                              *\n*                                                                     *\n* DESCRIPTIVE NAME - FUNB JOB OWNERSHIP ROUTINES                      *\n*                                                                     *\n* JES2 LEVEL - SP 2.2.0                                               *\n*                                                                     *\n* FUNCTION - THIS MODULE WILL PROCESS THE OWNERID PARAMETER OF        *\n*            THE JES2 JOBPARM STATEMENT.                              *\n*                                                                     *\n* EXIT ENVIRONMENT                                                    *\n*                                                                     *\n*    JES2 MAIN TASK                                                   *\n*                                                                     *\n* MODULE ATTRIBUTES                                                   *\n*                                                                     *\n*    RENTRANT, REUSABLE, REFRESHABLE                                  *\n*                                                                     *\n* ENTRY POINTS = E004$OWN   - SET USERID FROM OWNERID= OF /*JOBPARM   *\n*                                                                     *\n*                NOTE: THE FIELD JCTUSEID IS SET IN THE ACCOUNT CODE  *\n*                      VALIDATION ROUTINES.  ALTHOUGH THIS IS AN SMF  *\n*                      FIELD, IT IS CONSIDERED THE DEFAULT OWNERID    *\n*                      FOR THE JOB.                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\n         COPY  $HASPGBL\nJ004$OWN $MODULE RESPA,                                                X\n               $HASPEQU,                                               X\n               $PCE,               CONTAINS USING PCE,R13              X\n               $DCT,                                                   X\n               $PDDB,                                                  X\n               $PPPWORK,                                               X\n               $BUFFER,                                                X\n               $JQE,                                                   X\n               $JCT,                                                   X\n               $CAT,                                                   X\n               $JOE,                                                   X\n               $NIT,                                                   X\n               $MIT,                                                   X\n               $HCT,                                                   X\n               $PADDR,                                                 X\n               $SCANTAB,                                               X\n               $SCANWA,                                                X\n               $RDRWORK,                                               X\n               $CMB,                                                   X\n               $COMWORK,                                               X\n               RPL\n         USING JCT,R10\n#ON      EQU   X'FF'\n#OFF     EQU   X'00'\n         LTORG\n         TITLE 'EXIT 4: PROCESS OWNERID= OF /*JOBPARM STATEMENT'\nE004$OWN $ENTRY BASE=R12,CSECT=YES\n         $SAVE\n*======================================================================\n*                                                                     *\n* REGISTER USAGE IN E004$OWN                                          *\n*                                                                     *\n*  R0  - A CODE INDICATING WHETHER A JES2 OF JCL STATEMENT WAS READ   *\n*         0 - INDICATES A JES2 CONTROL STATEMENT                      *\n*         4 - INDICATES A JCL STATEMENT                               *\n*                                                                     *\n*  R1  - A(3 WORD PARAMETER LIST)                                     *\n*        +0 POINTS TO STATEMENT IMAGE BUFFER                          *\n*        +4 POINTS TO EXIT FLAG BYTE, RXITFLAG IN THE PCE.            *\n*        +8 POINTS TO JCTXWRK IN THE JCT                              *\n*                                                                     *\n*  R2  -                                                              *\n*  R3  -                                                              *\n*  R4  -                                                              *\n*  R5  -                                                              *\n*  R7  -                                                              *\n*  R9  -                                                              *\n*  R10 - JCT                                                          *\n*  R11 - HCT                                                          *\n*  R12 - BASE                                                         *\n*  R13 - PCE                                                          *\n*  R14 - RETURN                                                       *\n*  R15 - ENTRY POINT; BALR; RETURN CODE                               *\n*                                                                     *\n* RETURN CODES                                                        *\n*                                                                     *\n*   0  CALL NEXT ROUTINE ASSOCIATED WITH THIS EXIT; PERFORM STANDARD  *\n*      HASPRDR PROCESSING.                                            *\n*                                                                     *\n*   4  IGNORE ANY FURTHER ROUTINES ASSOCIATED WITH THIS EXIT;         *\n*      PERFORM STANDARD HASPRDR PROCESSING.                           *\n*                                                                     *\n*   8  FOR JES2 STATEMENTS, COMMENT THIS STATEMENT, NO PROCESSING     *\n*      FOR JCL STATEMENTS, PERFORM STANDARD HASPRDR PROCESSING        *\n*                                                                     *\n*  12  CANCEL THE JOB DUE TO AN ILLEGAL CONTROL STATEMENT.  OUTPUT    *\n*      WILL BE PRODUCED.                                              *\n*                                                                     *\n*  16  PURGE THE JOB DUE TO AN ILLEGAL CONTROL STATEMENT.  OUTPUT     *\n*      WILL NOT BE PRODUCED.                                          *\n*                                                                     *\n*=====================================================================*\n*                                                                     *\n* SETUP ADDRESSABILITIES, PERFORM INITIALIZATION                      *\n*                                                                     *\n*======================================================================\n         SPACE 1\n         LR    R12,R15             LOAD OUR BASE\n         SR    R15,R15             CLEAR RETURN CODE\n         SPACE\n         LTR   R0,R0               IF THIS IS A JCL STATEMENT,\n         BNZ   FC4RETB               RETURN RC=0.\n         SPACE 1\nRJBPCARD LTR   R10,R10             TEST FOR JOB\n         BZ    FC4RETB             IGNORE JOBPARM CARD IF NOT IN JOB\nRJBNODE  CLC   JCTXEQND,$OWNNODE   TEST EXECUTION NODE\n         BNE   FC4RETB             IGNORE IF ROUTED TO DIFF NODE\n         L     R2,0(R1)            PUT A(STATEMENT IMAGE BUFFER) IN R2\n         CLC   0(9,R2),=C'/*JOBPARM'  IS IT A JOBPARM ?\n         BNE   FC4RETB             IF NOT, LET JES PROCEED\n         USING FCSXWRK,R5          ESTABLISH ADDRESSABILITY\n         LA    R5,JCTWORK          PUT A(JCTWORK) IN R5 TO LAY\n*                                  FCSXWRK DSECT OVER\n         XC    FCSXSAVE(LEXITWRK),FCSXSAVE CLEAR ADDRESS FIELDS\n         ST    R2,BUFFAD           SAVE A(STATEMENT IMAGE BUFFER)\n         LA    R2,9(R2)            PUSH PAST /*JOBPARM\n         CLI   0(R2),C' '           IS THERE A BLANK IN COLUMN 10?\n         BE    CONT\n         LA    R15,4               COL. 10 NOT BLANK; LET JES PROCESS\n*                                         AND CANCEL BECAUSE OF ILLEGAL\n*                                         JOBPARM\n         B     FC4RET               ADIOS KEMO SABE\nCONT     EQU   *\n         LA    R2,1(R2)            ADVANCE TO COLUMN 11\n         LA    R7,60(R2)           PUT END ADDRESS (COL 71) IN R7\n         ST    R2,STMNTSAV         SAVE A(BEGIN OF CARD IN BUFFER)\n         ST    R2,PARMAD           SAVE A(BEGIN OF CARD IN BUFFER)\n         ST    R7,ENDSTSAV         SAVE A(END OF CARD IN BUFFER)\n*=====================================================================*\n*                                                                     *\n* PROCESS MIX OF FUNB PARAMETERS AND STANDARD JES PARAMETERS          *\n*    MOVE FUNB PARAMETERS TO END OF JOBPARM IN JCTXWRK                *\n*    SET RXCCRDSW IN RXITFLAG SO JES WILL LOOK IN JCTXWRK FOR JOBPARM *\n*    GIVE JES A RETURN CODE OF ZERO                                   *\n*                                                                     *\n*=====================================================================*\n         MVI   JCTXWRK,C' '             BLANK JOBPARM\n         MVC   JCTXWRK+1(70),JCTXWRK      IN JCTXWRK\n         LA    R4,JCTXWRK       PUT ADDRESS OF JCTXRK IN R4\n         LA    R4,1(R4)    BUMP OVER 1: LEAVE BLANK IN FIRST POSITION\n         ST    R4,XWRKCUR      SAVE BEGINNING ADDRESS OF JCTXWRK\n         MVC   FCSXSTA,STMNTSAV   MOVE ADDRESS OF START FOR SCAN\n         MVC   FCSXEND,ENDSTSAV   MOVE ADDRESS OF END FOR SCAN\n         MVI   FCSXDLMT,X'00'        SET TO SCAN FOR NON-BLANK\n         LA    R4,FCSXDLMT          SET DELIMETER TABLE\n         ST    R4,FCSXDLM             ADDRESS IN PARM LIST\n         LA    R1,FCSXPARM\n         CALL  SCANDLMT                SCAN FOR A COMMA OR BLANK\n         L     R8,FCSXFND          PUT A(DELIMETER) IN R8\n         LTR   R8,R8              WAS THERE A DELIMETER?\n         BZ    FC4RET0             IF NOT (??), LET JES PROCESS\n         MVC   CURAD,FCSXFND      MOVE ADDRESS OF START FOR SCAN\n         L     R9,CURAD         PUT ADDRESS OF BEGIN OF PARM IN R9\n*----------------------------------------------------------------------\nAGAIN    EQU   *\n         LA    R2,FCSTAB                A(TABLE)\n         L     R3,ENTRIES                GET # ENTRIES\n         SR    R6,R6                     CLEAR WORK REG\n         SPACE\nLOCLOOP  IC    R6,0(R2)                 GET L' CHARS TO COMPARE\n         EX    R6,COMPARE1                AND CHECK FOR A MATCH\n         BE    FOUNDONE                 IF EQUAL, PREPARE FOR RETURN\n         LA    R4,LENGENT               ELSE,\n         LA    R2,0(R4,R2)                    POINT TO NEXT ENTRY\n         BCT   R3,LOCLOOP                 AND TRY AGAIN.\n         CLI   JESIND,X'FF'          IS THIS THE FIRST JES PARM?\n         BE    NONFCS                NO. THE INDICATOR IS ALREADY SET.\n         MVI   JESIND,X'FF'          YES. TURN IT ON.\n         B     NONFCS                GO PROCESS\n         CLI   JESIND,X'FF'          IS THIS THE FIRST JES PARM?\nFOUNDONE EQU   *\n         MVI   ONOFF,X'FF'      TURN ON SO WE KNOW WE ARE DOING FUNB\n         MVI   FLAGS,CHKPT      TURN ON SO WE WILL REQUEST CHKPT\n         CLI   FCSIND,X'FF'          IS THIS THE FIRST FUNB PARM?\n         BE    NONFCS                NO. THE INDICATOR IS ALREADY SET.\n         MVI   FCSIND,X'FF'          YES. TURN IT ON.\nNONFCS   EQU   *\n         MVC   FCSXSTA,CURAD      MOVE ADDRESS OF START FOR SCAN\n         MVC   FCSXEND,ENDSTSAV   MOVE ADDRESS OF END FOR SCAN\n         MVI   FCSXDLMT,X'02'        SET TO SCAN FOR\n         MVI   FCSXDLMT+1,C','         COMMA  OR\n         MVI   FCSXDLMT+2,C' '         BLANK\n         LA    R4,FCSXDLMT          SET DELIMETER TABLE\n         ST    R4,FCSXDLM             ADDRESS IN PARM LIST\n         LA    R1,FCSXPARM\n         CALL  SCANDLMT                SCAN FOR A COMMA OR BLANK\n         L     R8,FCSXFND          PUT A(DELIMETER) IN R8\n         LTR   R8,R8              WAS THERE A DELIMETER?\n         BNZ   CHAR                FOUND SOMETHING - CONTINUE PROCESS\n*                            OTHERWISE, MUST BE END OF PARMS (COL. 71)\n         MVI   LASTPARM,X'FF'     TURN INDICATOR ON FOR LAST PARAM\n         B     COMMA                  GO ON\nCHAR     EQU   *\n         CLI   0(R8),C' '           IS IT A BLANK?\n         BNE   COMMA                 NO. GO ON.\n         MVI   LASTPARM,X'FF'     TURN INDICATOR ON FOR LAST PARAM\nCOMMA    EQU   *\n         CLI   ONOFF,X'FF'        IS INDICATOR ON FOR FUNB PROCESSING?\n         BNE   JESSIE             NO. DO JES PARAMETER PROCESSING.\n         MVI   ONOFF,X'00'        TURN IT OFF FOR NEXT TIME\n         B     JCTSTUFF          GO DO FUNB THINGS IN JCT .\nJESSIE   EQU   *\n         L     R6,FCSXFND         PUT ADDRESS OF END OF PARM IN R6\n         S     R6,CURAD         SUBTRACT BEGINNING ADDRESS OF PARM\n         L     R7,PARMAD    ADDRESS OF BEGIN OF PARMS IN BUFFER IN R7\n         L     R8,CURAD    ADDRESS OF CURRENT KEYWORD AND VALUE IN R8\n         EX    R6,PARMOVE              SHIFT PARM OVER\n         AR    R7,R6           ADD THE LENGTH TO PARMAD\n         LA    R7,1(R7)          INCREMENT BY 1\n         ST    R7,PARMAD\nLAST     EQU   *\n         CLI   LASTPARM,X'FF'     IS INDICATOR ON?\n         BE    FINISHED             GOOD-BYE FOREVER\n         L     R9,FCSXFND        PUT NEW ADDRESS IN R9 FOR COMPARE\n         LA    R9,1(R9)          PUSH PAST COMMA TO NEXT KEYWORD\n         ST    R9,CURAD           PUT NEW ADDRESS IN CURAD\n         B     AGAIN             OTHERWISE, CONTINUE.\nJCTSTUFF EQU   *\n         L     R6,FCSXFND         PUT ADDRESS OF END OF PARM IN R6\n         S     R6,CURAD         SUBTRACT BEGINNING ADDRESS OF PARM\n         L     R7,XWRKCUR     PUT THE DESTINATION ADDRESS IN R7\n         L     R8,CURAD    ADDRESS OF CURRENT KEYWORD AND VALUE IN R8\n         EX    R6,PARMOVE     MOVE FUNB PARM(S) TO JCTXWRK\n         AR    R7,R6          ADD LENGTH TO XWRKCUR\n         LA    R7,1(R7)       ADD 1 TO POSITION PAST END FOR NEXT\n         ST    R7,XWRKCUR       SAVE NEW LOCATION IN JCTXWRK\n         XR    R5,R5             CLEAR REGISTER FOR INSERT\n         IC    R5,0(R2)          LOAD LENGTH OF KEYWORD FROM TABLE\n         LA    R5,2(R5)         ADD 2 TO POSITION PAST EQUALS\n         AR    R8,R5           ADD THE LENGTH TO THE KEYWORD START\n         LA    R5,JCTWORK      RELOAD ADDRESS OF DSECT\n         L     R9,FCSXFND      ADDRESS OF END OF KEYWORD AND VALUE\n         SR    R9,R8           SUBTRACT BEGINNING OF KEYWORD\n*                                SO WE ARE LEFT WITH THE LENGTH\n         XR    R7,R7             CLEAR REGISTER FOR INSERT\n         IC    R7,8(R2)   LOAD LENGTH OF KEYWORD VALUE FROM TABLE\n         CR    R9,R7          IS THE LENGTH VALID ?\n         BH    FC4RET0          NO - LET JES FLUSH\n         ICM   R9,B'1000',BLANKS   PUT A BLANK PAD BYTE IN R9\n*                                       WHICH HAS THE LENGTH OF\n*                                       THE ORIGINATING FIELD\n         LR    R6,R10           PUT JCT ADDRESS IN R6\n         XR    R5,R5             CLEAR REGISTER FOR INSERT\n         ICM   R5,B'0111',9(R2)    ADD OFFSET FOR FIELD\n         AR    R6,R5           ADD THE LENGTH TO THE JCT\n         MVCL  R6,R8             STICK IT IN THE JCT\n         LA    R5,JCTWORK      RELOAD ADDRESS OF DSECT\n         B     LAST               IS THE INDICATOR ON FOR LAST PARM?\nFINISHED EQU   *\n         CLI   JESIND,X'FF'    DID WE PROCESS JES PARMS?\n         BNE   FC4RET8         NO. ALL FCS, SO COMMENT OUT.\n         CLI   FCSIND,X'FF'    DID WE PROCESS FUNB AS WELL AS JES?\n         BNE   MOVEIT          NO. ONLY JES, SO BLANK OUT JOBPARM\n*                                    BEYOND JES PARAMETERS\nMOVEIT   EQU   *\n         L     R7,PARMAD     PUT A(END OF JES PARMS IN BUFFER) IN R7\n         BCTR  R7,R0           SUBTRACT 1 AND CHECK FOR A COMMA\n         CLI   0(R7),C','      IS THE LAST CHARACTER A COMMA\n         BE    COPYBACK         YES. OVERLAY THE COMMA\n         LA    R7,1(R7)         NO. ADD 1 BACK\n         ST    R7,PARMAD        CHANGE PARMAD LIKEWISE.\nCOPYBACK EQU   *\n         L     R6,BUFFAD         PUT A(STATEMENT IMAGE BUFFER) IN R6\n         L     R8,ENDSTSAV      COMPUTE LENGTH OF MOVE\n         S     R8,PARMAD      SUBTRACT END OF PARMS FROM END OF CARD\n         BCTR  R8,R0             LESS 1 FOR EXECUTED MOVE\n         EX    R8,XWRKOUT     MOVE FUNB PARMS FROM JCTXWRK TO BUFFER\n         B     FC4RET0             LET JES PROCESS CONVERTED JOBPARM\nFC4RET0  SR    R15,R15         CLEAR RETURN CODE\n         B     FC4RET\n         SPACE\nFC4RET8  LA    R15,8           TELL JES TO COMMENT JOBPARM\nFC4RET   TM    FLAGS+L'CHKPT,CHKPT  IS A CHECKPOINT REQUIRED?\n         BNO   FC4RETB                NO, JUST RETURN\n         CLI   JCTUSEID,C' '        SEE IF OWNERID HAS BEEN SET\n         BNH   FC4RETB              NO, JUST RETURN\n         USING JQE,R9               ELSE,\n         ICM   R9,B'1111',PCEJQE      SEE IF JQE IS AVAILABLE\n         BZ    FC4RETB\n         ST    R15,FCSXSAVE           SAVE RETURN CODE FOR JES\n         $QSUSE ,                     UPDATE\n         MVC   JQEXOWNR,JCTUSEID       JQE AND\n         OI    JQEXFLG3,JQEXOWNJ           FLAG\n         L     R15,FCSXSAVE           RELOAD RETURN CODE\n         SPACE\nFC4RETB  $RETURN RC=(R15)           RETURN TO JES\n         SPACE\nCOMPARE1 CLC   1(1,R2),0(R9)   *****   EXECUTED COMPARE *****\nPARMOVE  MVC   0(1,R7),0(R8)   *****   EXECUTED MOVE   *****\nXWRKOUT  MVC   0(1,R7),JCTXWRK *****   EXECUTED MOVE   *****\n         SPACE\n*\n*    TABLE HAS LENGTH OF KEYWORD, KEYWORD, LENGTH OF KEYWORD\n*           VALUE, AND FIELD IN JCT TO PUT VALUE\n*\nFCSTAB   EQU   *\nFIRSTENT DC    AL1(6),CL7'OWNERID',AL1(8),AL3(JCTUSEID-JCT)\nLENGENT  EQU   *-FIRSTENT\n         DC    AL1(0),CL7'Q',AL1(8),AL3(JCTUSEID-JCT)\n         DC    AL1(1),CL7'ID',AL1(3),AL3(JCTROOMN-JCT)\n         DC    AL1(0),CL7'W',AL1(3),AL3(JCTROOMN-JCT)\n         DC    AL1(2),CL7'FCB',AL1(4),AL3(JCTFCB-JCT)\n         DC    AL1(0),CL7'O',AL1(4),AL3(JCTFCB-JCT)\n         DC    AL1(2),CL7'UCS',AL1(4),AL3(JCTUCS-JCT)\n         DC    AL1(0),CL7'U',AL1(4),AL3(JCTUCS-JCT)\nENTRIES  DC    A((*-FCSTAB)/LENGENT)\nBLANKS   DC    XL4'40000000'\n         LTORG\n         SPACE\nFCSXWRK  DSECT\nFCSXSAVE DS   2F                    R0 & R1 SAVE AREA\nFCSXPARM DS   0F                    SCANDLMT PARAMETER LIST\nFCSXDLM  DS    F                      A(DELIMITER TABLE)\nFCSXSTA  DS    F                      START OF FIELD\nFCSXEND  DS    F                      END OF FIELD\nFCSXFND  DS    F                      A(FOUND DELIMITER)\nFCSXGM   DS    F                    ADDR. OF GETMAINED WORK AREA\nFCSXDLMT DS    CL4                  DELIMITER WORK AREA\nSTMNTSAV DS    F    BEGINNING OF JOBPARM IN BUFFER (COL. 11)\nENDSTSAV DS    F    END OF JOBPARM IN BUFFER (COL. 71)\nCURAD    DS    F    CURRENT POSITION IN BUFFER FOR SCANS\nXWRKCUR  DS    F    CURRENT ADDRESS IN JCTXWRK FOR MOVING FUNB PARMS TO\nPARMAD   DS    F    CURRENT ADDRESS IN BUFFER FOR MOVING JES PARMS TO\nBUFFAD   DS    F    ADDRESS OF STATEMENT IMAGE BUFFER\nLSTMTSAV EQU   *-STMNTSAV\nLASTPARM DS    X           INDICATE LAST PARM PROCESSED\nJESIND   DS    X           TURNED ON IF ANY JES PARMS PROCESSED\nFCSIND   DS    X           TURNED ON IF ANY FUNB PARMS PROCESSED\nONOFF    DS    X           TURNED ON WHEN PROCESSING FUNB TABLE\n*                              ENTRY AND TURNED OF AT END OF\n*                              PROCESS.\nFLAGS    DS    X\nCHKPT    EQU   X'80',0     MOVE DATA FROM JCT AND CHKPT JQE.\nLEXITWRK EQU   *-FCSXSAVE\n         EJECT\n         TITLE 'SCANDLMT - SCAN A FIELD FOR ONE OR MORE DELIMITERS'\n*----------------------------------------------------------------------\n*\n* USE THIS ROUTINE TO FIND A DELIMITER WITHIN A FIELD.  MORE THAN ONE\n* DELIMITER CAN BE SCANNED FOR.  IF YOU WANT TO SCAN A FIELD FOR THE\n* FIRST NON-BLANK, SET THE NUMBER OF DELIMITERS TO ZERO.\n*\n* R1 - PARAMETER LIST\n*\n*      +0 - DELIMITER LIST.  FIRST BYTE = BINARY # DELIMITERS IN LIST\n*                            FOLLOWED BY DELIMITERS.  IE., TO SCAN A\n*                            A FIELD FOR (,) YOU WOULD CODE X'034D6B5D'\n*      +4 - BEGINNING OF FIELD TO BE SCANNED\n*      +8 - END OF FIELD TO BE SCANNED.\n*     +12 - ADDRESS OF FOUND DELIMITER\n*\n*----------------------------------------------------------------------\n         SPACE\nSCANDLMT CSECT\n         USING SCANDLMT,R15\n         $SAVE                     SAVE CALLERS REGISTERS\n         L     R2,0(R1)            POINT TO DELIMITER LIST\n         L     R7,4(R1)            GET FIELD STARTING ADDRESS\n         LA    R8,1                INCREMENT\n         L     R9,8(R1)            GET FIELD ENDING ADDRESS\n         SR    R3,R3               (CLEAN UP R3)\n         SPACE\nDLMTLOOP IC    R3,0(R2)            # CHARACTERS TO SCAN FOR.\n         LTR   R3,R3               IF 0,\n         BZ    NONBLNK               SCAN FOR FIRST NON-BLANK\n         LA    R4,1(R2)            POINT TO LIST OF DELIMITERS\n         SPACE\nCKDLMT   CLC   0(1,R7),0(R4)       FIND A HIT?\n         BE    DONE                  YES, SET RETURN POINTERS\n         LA    R4,1(R4)              NO, POINT TO NEXT DELIMITER\n         BCT   R3,CKDLMT               AND CONTINUE\n         SPACE\n         BXLE  R7,R8,DLMTLOOP      POINT TO NEXT BUFFER ADDRESS\n         SPACE\n         SR    R7,R7               INDICATE NO DELIMITER FOUND\n         B     DONE\n         SPACE\nNONBLNK  CLI   0(R7),C' '\n         BNE   DONE\n         BXLE  R7,R8,NONBLNK\n         SR    R7,R7               INDICATE NO DELIMITER FOUND\n         B     DONE\n         SPACE\nDONE     ST    R7,12(R1)           SET ADDRESS OF DELIMITER\n         $RETURN RC=0\n         LTORG\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "J005$DV": {"ttr": 9484, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 $DV COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED PROCESS THE $DV COMMAND   *\n*        WHEN ENTERED.  THIS COMMAND IS IMPLEMENTED AS A TYPE 5       *\n*        EXIT TO JES2, AND AS SUCH MUST INTERCEPT ONLY THE $DV        *\n*        COMMAND WHEN ENCOUNTERED.                                    *\n*                                                                     *\n*                                                                     *\n*        THE $DV COMMAND HAS THE FOLLOWING SYNTAX:                    *\n*                                                                     *\n*        $D V,VVVVVV       WHERE                                      *\n*                                                                     *\n*             VVVVVV IS THE VOLSER OR PREFIX TO BE DISPLAYED          *\n*                                                                     *\n*                  OR                                                 *\n*                                                                     *\n*        $D V,@UUU         WHERE                                      *\n*                                                                     *\n*             UUU IS THE UNIT ADDRESS OR PORTION OF THE UNIT          *\n*                 ADDRESS TO BE DISPLAYED                             *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *\n*                                                                     *\n*        1)  THE HASP900 MESSAGE WILL BE ISSUED FOR EACH VOLUME       *\n*            WHICH IS FOUND.                                          *\n*                                                                     *\n*        $HASP900 VVVVVV UUU DEVTYP MNT/ATTR USECNT                   *\n*                                                                     *\n*                                                                     *\n*        2)  THE HASP919 MESSAGE WILL BE ISSUED WHEN NO OUTPUT        *\n*            GROUP MATCHES THE SELECTION CRITERIA.                    *\n*                                                                     *\n*        $HASP919 NO VOLUME(S) FOUND                                  *\n*                                                                     *\n*                                                                     *\n*        3)  THE HASP950 MESSAGE WILL BE ISSUED WHEN AN INVALID       *\n*            OPERAND KEYWORD OR VALUE IS DETECTED.                    *\n*                                                                     *\n*        $HASP950 ......... INVALID OPERAND                           *\n*                                                                     *\n*        4)  THE HASP951 MESSAGE WILL BE ISSUED WHEN MORE THAN        *\n*            ONE OPERAND IS ENTERED.                                  *\n*                                                                     *\n*        $HASP951 TOO MANY OPERANDS                                   *\n*                                                                     *\n*        4)  THE HASP952 MESSAGE WILL BE ISSUED WHEN NO VOLSER        *\n*            IS ENTERED.                                              *\n*                                                                     *\n*        $HASP952 NO VOLSER ENTERED                                   *\n*                                                                     *\n*        5)  THE HASP999 MESSAGE WILL BE ISSUED WHEN THE L=CCA        *\n*            OPERAND SPECIFIES AN INVALID CONSOLE OR DISPLAY          *\n*            AREA.                                                    *\n*                                                                     *\n*        $HASP999 RESPONSE LOCATION L=CCA UNAVAILABLE                 *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J 0 0 5 $ D V            *\n*                                                                     *\n*        01)  $AMODE       SYS1.HASPSRC                               *\n*        02)  $BUFFER      SYS1.HASPSRC                               *\n*        03)  $CMB         SYS1.HASPSRC                               *\n*        04)  $COMWORK     SYS1.HASPSRC                               *\n*        05)  $CWA         SYS1.HASPSRC                               *\n*        06)  $CWTO        SYS1.HASPSRC                               *\n*        07)  $ENTRY       SYS1.HASPSRC                               *\n*        08)  $GETBUF      SYS1.HASPSRC                               *\n*        09)  $FREEBUF     SYS1.HASPSRC                               *\n*        10)  $HASPEQU     SYS1.HASPSRC                               *\n*        11)  $HASPGBL     SYS1.HASPSRC                               *\n*        12)  $HCT         SYS1.HASPSRC                               *\n*        13)  $JOE         SYS1.HASPSRC                               *\n*        14)  $MIT         SYS1.HASPSRC                               *\n*        15)  $MODEND      SYS1.HASPSRC                               *\n*        16)  $MODULE      SYS1.HASPSRC                               *\n*        17)  $PADDR       SYS1.HASPSRC                               *\n*        18)  $PCE         SYS1.HASPSRC                               *\n*        19)  $RETURN      SYS1.HASPSRC                               *\n*        20)  $SAVE        SYS1.HASPSRC                               *\n*        21)  $STORE       SYS1.HASPSRC                               *\n*        22)  IAZRESPA     SYS1.AMODGEN                               *\n*        23)  IEFUCBOB     SYS1.AMODGEN                               *\n*        24)  IEZCVT       SYS1.AMODGEN                               *\n*        25)  IFGRPL       SYS1.MACLIB                                *\n*        26)  MODESET      SYS1.AMODGEN                               *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       2K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ005$DV  $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 $DV COMMAND PROCESSOR',                     X\n               $CMB,               GENERATE HASP CMB     DSECT         X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $CWA,               GENERATE HASP CWA DSECT             X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               CVT,                GENERATE MVS  CVT DSECT             X\n               RESPA,              GENERATE MVS  RESPA DSECT           X\n               RPL,                GENERATE MVS  IFGRPL DSECT          X\n               UCB                 GENERATE MVS  UCB DSECT\n               SPACE 3\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREAS                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n$DVWORK  DSECT                     COMMAND WORK AREA\n         DS    CL(BUFSTART-BFPDSECT) **** RESERVED BY JES2 ****\nDOUBLE   DS    D                   DOUBLE WORD WORK AREA\nSWITCH   DS    X                   MISCELLANEOUS BIT SWITCHES\nFOUND    EQU   X'80'               A VOLUME HAS BEEN FOUND\n*\nDEVCLASS DS    X                   IOSVSUCB DEVICE TYPE\n         DS    0D\nWRKA     DS    CL10                EXIT WORK AREA\nSCANWORK DS    CL100               IOSVSUCB SCAN WORK AREA\nUCBADDR  DS    F                   ADDRESS OF UCB\nIOSVSUCB DS    F                   ADDRESS OF IOSVSUCB ROUTINE\nSCANPARM DS    0F                  IOSVSUCB PARM LIST\nSCANP1   DS    F                   ADDRESS OF WORK AREA\nSCANP2   DS    F                   ADDRESS OF DEVICE TYPE FIELD\nSCANP3   DS    F                   ADDRESS OF UCB RETURN AREA\nMESSAGE  DS    CL100               MESSAGE WORK AREA\n*\nMSG1     EQU   MESSAGE             FIRST MESSAGE\nUNITADD  DS    CL3                 UNIT ADDRESS FOR SEARCH\nVOLSER   DS    CL6                 VOLSER FOR SEARCH\nVOLEN    DS    H                   LENGTH OF VOLSER\nDETAIL   EQU   MESSAGE,35          DETAIL LINE\nOUTVOL   EQU   MESSAGE,6           OUTPUT VOLSER\nOUTADDR  EQU   MESSAGE+8,3         OUTPUT DEVICE ADDRESS\nOUTDEVT  EQU   MESSAGE+12,6        OUTPUT DEVICE TYPE\nOUTMNT1  EQU   MESSAGE+19,4        FIRST MOUNT ATTRIBUTE\nOUTSLASH EQU   MESSAGE+23,1        CONSTANT '/'\nOUTMNT2  EQU   MESSAGE+24,5        SECOND MOUNT ATTRIBUTE\nOUTCLASS EQU   MESSAGE+30,1        OUTPUT SPECIAL CLASS\nOUTUCNT  EQU   MESSAGE+32,3        OUTPUT USE COUNT\nJ005$DV  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         TITLE 'JES2 $DV COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE005$DV  $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       - ADDRESS OF THE CURRENT OPERAND                    *\n*        R6       - INCREMENT VALUE OF 4                              *\n*        R7       - ADDRESS OF THE LAST OPERAND                       *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SEE IF THIS IS A $DV COMMAND                                 *\n*                                                                     *\n***********************************************************************\n         CLC   COMVERB(2),=C'DV'   ISF IF THIS IS THE $DV COMMAND\n         BNE   EXIT0               NO, BRANCH TO COMMAND OK EXIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        $D V,VOLSER        OR                                        *\n*        $D V,@UUU                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        GET A JES2 BUFFER FOR REENTRANCY AND                         *\n*        CLEAR THE COMMAND WORK AREA                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R9,R1               SAVE WORK AREA ADDRESS\n         USING $DVWORK,R9          SET ADDRESSABILITY TO WORK AREA\n         LA    R14,$DVWORK+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS\n         LH    R15,$BUFSIZE        SET   'TO'   LENGTH\n         SLR   R0,R0               CLEAR 'FROM' ADDRESS\n         SLR   R1,R1               CLEAR 'FROM' LENGTH\n         MVCL  R14,R0              CLEAR THE BUFFER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXAMINE THE COMMAND OPERANDS                                 *\n*                                                                     *\n***********************************************************************\nCDVNSPEC BXH   R5,R6,CDVOK         IF NO MORE EXIT\n         L     R1,0(,R5)           POINT TO OPERAND\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE VOLSER OR UNITADDRESS SUBPARAMETER               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCDVVOL   L     R1,0(,R5)           POINT TO OPERAND\n         LR    R14,R1              SAVE SUBPARAMETER ADDRESS\n         SLR   R15,R15             SET LENGTH TO ZERO\n         MVC   VOLSER,BLANKS       SET VOLSER TO BLANKS\n         MVC   UNITADD,BLANKS      SET UNITADDRESS TO BLANKS\nCDVVOL1  CLI   0(R1),C' '          END OF SUBPARAMETER STRING\n         BE    CDVVOL2             YES, BRANCH\n         CLI   0(R1),C','          END OF SUBPARAMETER STRING\n         BE    XTRAOPND            YES, ERROR\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF SUBPARAM\n         LA    R15,1(,R15)         ADD 1 TO LENGTH\n         B     CDVVOL1             LOOP\nCDVVOL2  LTR   R15,R15             TEST LENGTH\n         BZ    BADOPND             ZERO, ERROR\n         CLI   0(R14),C'@'         SEE IF UNITADDRESS SPECIFICATION\n         BE    CDVVOL3             YES, BRANCH\n         CH    R15,=H'6'           SEE IF GT 6\n         BH    BADOPND             GREATER THAN 6, ERROR\n         STH   R15,VOLEN           SAVE VOLSER LENGTH\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MOVEVOL         SAVE VOLSER\n         EX    R15,TRTVOL          TEST VOLSER\n         BNZ   BADOPND             NOT VALID, ERROR\n         B     CDVNSPEC            GET NEXT SPECIFICATION\nCDVVOL3  BCTR  R15,0               REDUCE LENGTH BY 1 FOR @\n         LTR   R15,R15             TEST LENGTH\n         BZ    BADOPND             ZERO, ERROR\n         CH    R15,=H'3'           SEE IF GT 3\n         BH    BADOPND             GREATER THAN 3, ERROR\n         STH   R15,VOLEN           SAVE UNITADD LENGTH\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MOVEUNIT        SAVE UNITADDRESS\n         EX    R15,TRTUNIT         TEST UNITADD\n         BNZ   BADOPND             NOT VALID, ERROR\n         B     CDVNSPEC            GET NEXT SPECIFICATION\nMOVEVOL  MVC   VOLSER(0),0(R14)    MOVE VOLSER TO SAVE AREA\nMOVEUNIT MVC   UNITADD(0),1(R14)   MOVE UNITADDRESS TO SAVE AREA\nTRTVOL   TRT   VOLSER(0),TRTBL     TEST VOLSER\nTRTUNIT  TRT   UNITADD(0),TRTBL    TEST UNITADD\nTRTBL    DC    256X'01'            VALID VOLSER OR UNITADD CHARS\n         ORG   TRTBL+C'A'\n         DC    9X'00'              A-I\n         ORG   TRTBL+C'J'\n         DC    9X'00'              J-R\n         ORG   TRTBL+C'S'\n         DC    8X'00'              S-Z\n         ORG   TRTBL+C'0'\n         DC    10X'00'             0-9\n         ORG\n         EJECT\n*****************************************************************\n*                                                               *\n*        CHECK FOR REDIRECTION OF RESPONSES                     *\n*                                                               *\n*****************************************************************\n         SPACE 1\nCDVOK    TM    COMFLAG,CMBFLAGU    IS THIS A UCM\n         BZ    MSGGOOD             NO, SKIP REDIRECTION\nREDIR    TM    FBLFLG,FBLFLGC+FBLFLGR CONSOLE SET OR REMOTE SYSTEM\n         BNZ   REDIR1              SKIP AUTOMATIC L=CCA\n         LA    R1,2                LOAD REDIRECT OFFSET FOR $DV\n*                                  SAME AS FOR $DF\n         BCTR  R1,0                REDUCE BY 1\n         SLL   R1,1                DOUBLE\n         SLR   R2,R2               ZERO REGISTER FOR IC\n         IC    R2,COMUCM           PICK UP CURRENT UCM ID\n         L     R14,$COMEXTN        POINT TO CONSOLE WORK AREA\n         USING CWA,R14             SET ADDRESSABILITY TO CWA\n         CH    R2,CWAOCON          SEE IF EXCEEDS MAXIMUM\n         BH    REDIR1              YES, ERROR, NO AUTOMATIC REDIRECTION\n         MH    R2,CWALCON          MULTIPLY BY LENGTH OF EACH ENTRY\n         AR    R1,R2               COMBINE OFFSETS\n         LA    R1,CWARESP-CWACONL(R1) POINT TO CORRECT CWA ENTRY\n         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID\n         TM    FBLFLG,FBLFLGA      HAS AREA BEEN SET\n         BO    REDIR1              YES, SKIP AUTOMATIC REDIRECTION\n         MVC   COMUCMA,CWACONA(R1) SET NEW AREA\n         DROP  R14                 DROP ADDRESSABILITY TO CWA\n         EJECT\n*****************************************************************\n*                                                               *\n*        ROUTINE TO VERIFY CONSOLE/AREA                         *\n*                                                               *\n*****************************************************************\n         SPACE 1\nREDIR1   TM    FBLFLG,FBLFLGR      SEE IF REMOTE SYSTEM UCM\n         BO    REDIR3              YES, UCM AND AREA ARE OK\n         L     R2,$COMEXTN         POINT TO CONSOLE WORK AREA\n         USING CWA,R2              SET ADDRESSABILITY TO CWA\n         MVC   XASCID(1),COMUCM    SET UCM ID\n         MVC   XASDID(1),COMUCMA   SET AREA ID\n         CLI   XASDID,0            SEE IF AREA ID SPECIFIED\n         BNZ   REDIR2              YES, BRANCH\n         MVI   XASDID,C'Z'         NO,  FORCE AREA Z\nREDIR2   MVC   XAU(1),COMUCM       TELL OS SOURCE IS SAME AS OUTPUT\n         MVI   XAN,X'22'           SET ID FOR VERIFIER\n         MODESET EXTKEY=ZERO       GET KEY 0\n         L     R15,CWA7603D        POINT TO OS VERIFICATION ROUTINE\n         $AMODE 24,PUSHR=0,R=R14   GO TO AMODE 24\n         BALR  R14,R15             ENTER IT\n         $AMODE POPR=0,R=R14       RETURN TO ORIGINAL AMODE\n         MODESET EXTKEY=HASP       RETURN TO KEY 1\n         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR\n         BNH   REDIR3              NO, GO ISSUE ERROR MESSAGE\n         SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,B'0011',COMUCM   PICK UP UCM AND AREA ID\n         MVI   COMUCMA,0           FORCE NO DISPLAY AREA\n         CH    R15,=H'12'          SEE IF CONSOLE DOWN\n         BNE   *+16                NO, DO NOT SET LOGICAL CONSOLE\n         MVC   COMFLAG(4),MOWTOL   DESTROY APPARENT SOURCE INFO\n         MVC   COMOUT,MOWTOL+(COMOUT-COMFLAG) OMITTING CNTL FIELD\n         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND\n         MVC   COMMAND(MBVINVL),MBVINV SET ERROR MESSAGE TEXT\n         STC   R3,MBVINVA          SET AREA\n         SRL   R3,8                ALIGN CONSOLE ID\n         CVD   R3,$DOUBLE          CONVERT TO PACKED\n         MVC   WRKA(4),=X'F0212020' SET EDIT MASK\n         ED    WRKA(4),$DOUBLE+6   EDIT CONSOLE ID TO AREA\n         MVC   MBVINVC,WRKA+2      MOVE CONSOLE ID TO MESSAGE\n         MVC   COMMAND+MBVINVL(8),COMACEID MOVE IDENTIFIER\n         $CWTO L=MBVINVL,MSGID=999 WRITE ERROR MESSAGE TO CONSOLE\n         B     EXIT8               GET OUT\n         DROP  R2                  DROP ADDRESSABILITY TO CWA\nREDIR3   CLI   COMUCMA,0           TEST FOR DISPLAY AREA\n         BE    MSGGOOD             IF NOT, SKIP\n         MVI   COMLINET,X'80'      SET CONTROL LINE\n         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND\n         MVI   COMLINET,X'20'      SET DATA LINE\n         B     MSGGOOD             CONTINUE\n         EJECT\n*****************************************************************\n*                                                               *\n*       R E D I R E C T   R O U T I N E   C O N S T A N T S     *\n*                                                               *\n*****************************************************************\n         SPACE 1\nMOWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX\nMBVINV   DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '\nMBVINVL  EQU   *-MBVINV\nMBVINVC  EQU   COMMAND+MBVINVL-16,2\nMBVINVA  EQU   MBVINVC+2,1\nFBLFLG   EQU   COMEWORK+2          FLAG BYTE\nCOMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER\nFBLFLGR  EQU   1                   UCM COMMAND FROM REMOTE SYSTEM\nFBLFLGC  EQU   2                   CONSOLE HAS BEEN SPECIFIED\nFBLFLGA  EQU   4                   AREA HAS BEEN SPECIFIED\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SCAN THE UCBS FOR THE REQUESTED VOLSER(S)                    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        SCAN UCB TABLE                                               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nMSGGOOD  CLI   VOLSER,0            SEE IF A VOLSER ENTERED\n         BE    NOOPND              NO, ERROR\nUCBLKUP  L     R1,CVTPTR           GET CVT ADDRESS\n         L     R6,CVTUCBSC-CVT(R1) POINT TO UCB SCAN SERVICE RTN\n         ST    R6,IOSVSUCB         SAVE ADDR OF UCB SCAN ROUTINE\n         MVI   DEVCLASS,UCB3DACC   SET FOR DASD UCBS ONLY\n         LA    R1,SCANWORK         LOAD ADDRESS OF SCAN WORK AREA\n         ST    R1,SCANP1           SAVE IN PARM LIST\n         LA    R1,DEVCLASS         LOAD ADDRESS OF DEVICE CLASS\n         ST    R1,SCANP2           SAVE IN PARM LIST\n         LA    R1,UCBADDR          LOAD ADDRESS OF UCB RETURN\n         ST    R1,SCANP3           SAVE IN PARM LIST\n         OI    SCANP3,X'80'        TURN ON HIGH ORDER BIT\n         XC    SCANWORK,SCANWORK   CLEAR SCAN SERVICE WORK AREA\nCDVLOOP  L     R15,IOSVSUCB        LOAD ADDR OF UCB SCAN ROUTINE\n         LA    R1,SCANPARM         LOAD ADDRESS OF UCB SCAN PARM\n         BALR  R14,R15             GO TO UCB SCAN SERVICE ROUTINE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ENDUCBS             NOT ZERO, END OF UCBS\n         L     R8,UCBADDR          LOAD UCB ADDRESS\n         EJECT\n***********************************************************************\n*                                                                     *\n*        TEST EACH UCB FOR PROPER ATTRIBUTES                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         USING UCBCMSEG,R8         SET ADDRESSABILITY TO UCB\n         TM    UCBTBYT3,UCB3DACC   DIRECT ACCESS?\n         BZ    CDVLOOP             NO\n         TM    UCBSTAT,UCBONLI     ONLINE?\n         BNO   CDVLOOP             NO, IGNORE DEVICE\n         CLC   UCBTBYT3(2),=X'2005' DATA CELL?\n         BE    CDVLOOP             IF SO SKIP IT\n         TM    UCBVOLI,X'FF'       ANY NAME?\n         BZ    CDVLOOP             NO, IGNORE IT\n***********************************************************************\n*                                                                     *\n*        SEE IF OUR VOLSER                                            *\n*                                                                     *\n***********************************************************************\n         LH    R1,VOLEN            LOAD VOLSER/UNITADD LENGTH\n         BCTR  R1,0                MACHINE LENGTH\nUSENAME  CLI   UNITADD,C' '        SEE IF UNITADDRESS SPECIFIED\n         BNE   USEUNIT             YES, BRANCH\n         EX    R1,EXCLC1           SEE IF THIS IS A MATCH\n         BE    USEUCB              YES, GO FORMAT THE UCB\n         B     CDVLOOP             NO, SKIP IT\n         SPACE 1\nUSEUNIT  EX    R1,EXCLC2           SEE IF THIS IS A MATCH\n         BE    USEUCB              YES, GO FORMAT THE UCB\n         B     CDVLOOP             NO, SKIP IT\n         SPACE 1\nEXCLC1   CLC   VOLSER(0),UCBVOLI   *** EXECUTE ONLY ***\nEXCLC2   CLC   UNITADD(0),UCBNAME  *** EXECUTE ONLY ***\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FORMAT UCB INFORMATION                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nUSEUCB   DS    0H\n         OI    SWITCH,FOUND        TURN ON FOUND SWITCH\n         MVC   DETAIL,BLANKS       CLEAR THE DETAIL LINE\n         MVC   OUTVOL,UCBVOLI      MOVE VOLSER TO DETAIL LINE\n         MVC   OUTADDR,UCBNAME     MOVE UNIT ADDRESS TO DETAIL LINE\n         PRINT OFF\n***********************************************************************\n*                                                                     *\n*        SET THE ICM MASK FOR THE UCB USER FIELD.  IN SP SYSTEMS      *\n*        THE LENGTH IS 1.  IN XA SYSTEMS THE LENGTH IS 2.  CODE       *\n*        IS SET FOR ANY LENGTH UP TO 4.                               *\n*                                                                     *\n***********************************************************************\n         LCLA  &MASK\n&MASK    SETA  1\n         AIF   (L'UCBUSER EQ 1).LENOK\n&MASK    SETA  3\n         AIF   (L'UCBUSER EQ 2).LENOK\n&MASK    SETA  7\n         AIF   (L'UCBUSER EQ 3).LENOK\n&MASK    SETA  15\n.LENOK   ANOP\n         PRINT ON\n         XR    R1,R1               ZERO REG FOR IC\n         ICM   R1,&MASK,UCBUSER    LOAD USE COUNT\n         CVD   R1,DOUBLE           CONVERT USE COUNT TO PACKED\n         OI    DOUBLE+7,X'0F'      FIX SIGN BITS\n         UNPK  OUTUCNT,DOUBLE+6(2) MOVE USE COUNT TO DETAIL LINE\n         MVC   OUTDEVT,=CL6'3350'  SET DEVICE TYPE TO 3350\n         CLI   UCBTBYT4,X'0B'      IS THIS A 3350?\n         BE    CKMNT1              YES, GO CHECK MOUNT ATTR\n         MVC   OUTDEVT,=CL6'3380'  SET DEVICE TYPE TO 3380\n         CLI   UCBTBYT4,X'0E'      IS THIS A 3380?\n         BE    CKMNT1              YES, GO CHECK MOUNT ATTR\n         MVC   OUTDEVT,=CL6'3330-1' SET DEVICE TYPE TO 3330-1\n         CLI   UCBTBYT4,X'0D'      IS THIS A 3330-1?\n         BE    CKMNT1              YES, GO CHECK MOUNT ATTR\n         MVC   OUTDEVT,=CL6'3330'  SET DEVICE TYPE TO 3330\n         CLI   UCBTBYT4,X'09'      IS THIS A 3330?\n         BE    CKMNT1              YES, GO CHECK MOUNT ATTR\n         MVC   OUTDEVT,=CL6'3340'  SET DEVICE TYPE TO 3340\n         CLI   UCBTBYT4,X'0A'      IS THIS A 3340?\n         BE    CKMNT1              YES, GO CHECK MOUNT ATTR\n         MVC   OUTDEVT,=CL6'3375'  SET DEVICE TYPE TO 3375\n         CLI   UCBTBYT4,X'0C'      IS THIS A 3375?\n         BE    CKMNT1              YES, GO CHECK MOUNT ATTR\n         MVC   OUTDEVT,=CL6'2305-2' SET DEVICE TYPE TO 2305-2\n         CLI   UCBTBYT4,X'07'      IS THIS A 2305-2?\n         BE    CKMNT1              YES, GO CHECK MOUNT ATTR\n         MVC   OUTDEVT,=CL6'2305-1' SET DEVICE TYPE TO 2305-1\n         CLI   UCBTBYT4,X'06'      IS THIS A 2305-1?\n         BE    CKMNT1              YES, GO CHECK MOUNT ATTR\n         MVC   OUTDEVT,=CL6'2314'  SET DEVICE TYPE TO 2314\n         CLI   UCBTBYT4,X'08'      IS THIS A 2314?\n         BE    CKMNT1              YES, GO CHECK MOUNT ATTR\n         MVC   OUTDEVT,=CL6'UNKN'  SET DEVICE TYPE TO UNKN\nCKMNT1   MVC   OUTMNT1,=CL4'PRIV'  SET 1ST MOUNT ATTR TO PRIV\n         TM    UCBSTAB,UCBBPRV     IS IT MOUNTED PRIVATE?\n         BO    CKMNT2              YES, GO CHECK NEXT MOUNT ATTR\n         MVC   OUTMNT1,=CL4'STRG'  SET 1ST MOUNT ATTR TO STRG\n         TM    UCBSTAB,UCBBSTR     IS IT MOUNTED AS STORAGE?\n         BO    CKMNT2              YES, GO CHECK NEXT MOUNT ATTR\n         MVC   OUTMNT1,=CL4'PUBL'  SET 1ST MOUNT ATTR TO PUBL\n         TM    UCBSTAB,UCBBPUB     IS IT MOUNTED PUBLIC?\n         BO    CKMNT2              YES, GO CHECK NEXT MOUNT ATTR\n         MVC   OUTMNT1,=CL4'UNKN'  SET 1ST MOUNT ATTR TO UNKN\nCKMNT2   MVI   OUTSLASH,C'/'       SET SLASH CONSTANT\n         MVC   OUTMNT2,=CL5'RSDNT' SET 2ND MOUNT ATTR TO RSDNT\n         TM    UCBSTAT,UCBPRES     IS IT MOUNTED PERM RESIDENT?\n         BO    SPECLASS            YES, GO CHECK FOR SPEC CLASS\n         MVC   OUTMNT2,=CL5'RSERV' SET 2ND MOUNT ATTR TO RSERV\n         TM    UCBSTAT,UCBRESV     IS IT MOUNTED RESERVED?\n         BO    SPECLASS            YES, GO CHECK FOR SPEC CLASS\n         MVC   OUTMNT2,=CL5'UNKN'  SET 2ND MOUNT ATTR TO UNKN\nSPECLASS MVI   OUTCLASS,C'S'       SET TO SYSRES VOLUME\n         TM    UCBSTAT,UCBSYSR     IS IT THE SYSRES VOLUME?\n         BO    ENDFMT              YES, END OF FORMAT ROUTINE\n         MVI   OUTCLASS,C'P'       SET TO PAGING VOLUME\n         TM    UCBSTAB,UCBPGFL     IS IT USED AS A PAGING VOLUME?\n         BO    ENDFMT              YES, END OF FORMAT ROUTINE\n         MVI   OUTCLASS,C' '       SET TO NO SPECIAL CLASS\nENDFMT   DS    0H\n***********************************************************************\n*                                                                     *\n*        WRITE THE MESSAGE FOR THIS UCB                               *\n*                                                                     *\n***********************************************************************\n         LA    R0,35               WRITE FIRST MESSAGE\n         LA    R1,MESSAGE          LOAD ADDRESS OF MESSAGE\n         $CWTO L=(R0),MSG=(R1),MSGID=900  DISPLAY MESSAGE\nSETFND   OI    SWITCH,FOUND        TURN ON MATCH FOUND SWITCH\n         B     CDVLOOP             GO GET ANOTHER UCB\n         EJECT\n***********************************************************************\n*                                                                     *\n*        END OF ALL UCBS.  IF NO MESSAGES WERE ISSUED, ISSUE          *\n*        A MESSAGE THAT NO VOLUMES WERE FOUND.                        *\n*                                                                     *\n***********************************************************************\nENDUCBS  TM    SWITCH,FOUND        WAS A MATCH FOUND\n         BZ    NOUTPUT             NO, BRANCH\n         B     EXIT8               GET OUT\nNOUTPUT  $CWTO MSG='NO VOLUME(S) FOUND',MSGID=919  ISSUE MESSAGE\n         B     EXIT8               GET OUT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        INVALID $DV OPERAND                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nBADOPND  L     R1,0(0,R5)          POINT TO INVALID OPERAND\n         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG\n         MVC   COMMAND+9(16),=C' INVALID OPERAND' SET ERROR MSG\n         LA    R0,25               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=950    WRITE ERROR MESSAGE\n         B     EXIT8               GET OUT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        TOO MANY $DV OPERANDS                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nXTRAOPND MVC   COMMAND(18),=C' TOO MANY OPERANDS' SET ERROR MSG\n         LA    R0,18               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=951    WRITE ERROR MESSAGE\n         B     EXIT8               GET OUT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        NO VOLSER ENTERED                                            *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nNOOPND   MVC   COMMAND(18),=C' NO VOLSER ENTERED' SET ERROR MSG\n         LA    R0,18               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=952    WRITE ERROR MESSAGE\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\nEXIT0    DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nEXIT8    DS    0H\n         $FREEBUF (R9)             FREE THE WORK AREA\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n         LTORG\n         SPACE 3\nBLANKS   DC    100C' '             STRING OF BLANKS\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "J005$LF": {"ttr": 9738, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 $LF COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED PROCESS THE $LF COMMAND   *\n*        WHEN ENTERED.  THIS COMMAND IS IMPLEMENTED AS A TYPE 5       *\n*        EXIT TO JES2, AND AS SUCH MUST INTERCEPT ONLY THE $LF        *\n*        COMMAND WHEN ENCOUNTERED.                                    *\n*                                                                     *\n*                                                                     *\n*        THE $LF COMMAND HAS THE FOLLOWING SYNTAX:                    *\n*                                                                     *\n*        $L F,                                                        *\n*             J=JN-NN,                                                *\n*             R=DEST1-DEST2,                                          *\n*             Q=CLASSES,                                              *\n*             F=FORM,                                                 *\n*             C=FCB,                                                  *\n*             T=UCS,                                                  *\n*             O=OVERLAY,                                              *\n*             B=Y/N,                                                  *\n*             LIM=LOW-HIGH.                                           *\n*             XS=S/D/N,       IF XJCF OPTION TAKEN                    *\n*             HOLD,                                                   *\n*             L                                                       *\n*                                                                     *\n*        WHERE:                                                       *\n*                                                                     *\n*        J=JN-NN       - LIST FORMS FOR THE SPECIFIED JOB(S)          *\n*                        DEFAULTS TO ALL JOBS                         *\n*        R=DEST1-DEST2 - LIST FORMS FOR THE SPECIFIED DESTINATION(S)  *\n*                        DEFAULTS TO DESTINATION OF REQUESTOR         *\n*        Q=CLASSES       LIST FORMS FOR THE SPECIFIED SYSOUT QUEUE(S) *\n*                        UP TO 8 SYSOUT CLASSES MAY BE REQUESTED.     *\n*                        DEFAULTS TO ALL SYSOUT CLASSES.              *\n*        F=FORM          LIST FORMS FOR THE SPECIFIED SYSOUT FORM     *\n*                        ONLY.                                        *\n*                        DEFAULTS TO NOT BEING A SELECTION CRITERIA.  *\n*        C=FCB           LIST FORMS FOR THE SPECIFIED SYSOUT FCB      *\n*                        ONLY.                                        *\n*                        DEFAULTS TO NOT BEING A SELECTION CRITERIA.  *\n*        T=UCS           LIST FORMS FOR THE SPECIFIED SYSOUT UCS      *\n*                        OR CHARACTER SET ONLY.                       *\n*                        DEFAULTS TO NOT BEING A SELECTION CRITERIA.  *\n*        O=OVERLAY       LIST FORMS FOR THE SPECIFIED SYSOUT 3800     *\n*                        OVERLAY NAME.                                *\n*                        DEFAULTS TO NOT BEING A SELECTION CRITERIA.  *\n*        B=Y/N           LIST FORMS FOR THE 3800 BURST SPECIFICATION  *\n*                        OF Y (YES) OR N (NO).                        *\n*                        DEFAULTS TO NOT BEING A SELECTION CRITERIA.  *\n*        LIM=LOW-HIGH    LIST FORMS FOR JOBS WITH OUTPUT CONTAINING   *\n*                        OUTPUT NUMBER OF LINES IN THE RANGE GIVEN.   *\n*                        DEFAULTS TO ALL SIZED (0-*)                  *\n*        XS=SHIFT        LIST FORMS WHICH HAVE THE XJCF SHIFT         *\n*                        DESIGNATION SPECIFIED (L/D/N)                *\n*                        DEFAULTS TO ALL OUTPUT.                      *\n*        HOLD            LIST FORMS WHICH HAVE BEEN HELD BY AN        *\n*                        OPERATOR WHICH MAKES THEM NON-SELECTABLE     *\n*                        FOR PRINTING.                                *\n*                        DEFAULTS TO NOT BEING A SELECTION CRITERIA.  *\n*        L/S             USE THE LONG OR SHORT COMMAND RESPONSE       *\n*                        DEFAULTS TO SHORT 1 LINE RESPONSE.           *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *\n*                                                                     *\n*        1)  THE HASP900 MESSAGE WILL BE ISSUED FOR EACH OUTPUT       *\n*            GROUP WHICH MATCHES THE SELECTION CRITERIA.              *\n*                                                                     *\n*        $HASP900 JJJJJJJJ RRRRR Q=X F=FFFF NNNNNNN PGS HH            *\n*        $HASP900          C=CCCC T=TTTT O=OOOO B=B                   *\n*                                                                     *\n*                IF THE XJCF OPTION IS TAKEN THE FORMAT               *\n*                OF THE COMMAND RESPONSE WILL BE                      *\n*                                                                     *\n*        $HASP900 JJJJJJJJ RRRRR Q=X F=FFFF XS=? NNNNNNN PGS HH       *\n*        $HASP900          C=CCCC T=TTTT O=OOOO B=B                   *\n*                                                                     *\n*            A)  JJJJJJJJ   - JOBNAME                                 *\n*            B)  JOBNNNN    - JOB NUMBER                              *\n*            C)  RRRRRRRR   - ROUTING (DESTINATION)                   *\n*            D)  X          - SYSOUT QUEUE                            *\n*            E)  FFFF       - SYSOUT FORM                             *\n*            F)  NNNNNNN    - TOTAL NUMBER OF PRINT LINES FOR GROUP   *\n*                NNNNNNN    - TOTAL NUMBER OF PRINT PAGES FOR GROUP   *\n*            G)  HH         - HOLD INDICATOR (OH/NS/   )              *\n*            H)  CCCC       - SYSOUT FCB                              *\n*            I)  TTTT       - SYSOUT UCS                              *\n*            J)  OOOO       - SYSOUT OVERLAY                          *\n*            K)  B          - 3800 BURST INDICATOR (Y/N)              *\n*            L)  XS         - XJCF SHIFT DESIGNATION FOR XEROX 9700   *\n*                             SUPPORT (S/D/N)                         *\n*                                                                     *\n*                                                                     *\n*        2)  THE HASP919 MESSAGE WILL BE ISSUED WHEN NO OUTPUT        *\n*            GROUP MATCHES THE SELECTION CRITERIA.                    *\n*                                                                     *\n*        $HASP919 NO OUTPUT QUEUED                                    *\n*                                                                     *\n*                                                                     *\n*        3)  THE HASP950 MESSAGE WILL BE ISSUED WHEN AN INVALID       *\n*            OPERAND KEYWORD OR VALUE IS DETECTED.                    *\n*                                                                     *\n*        $HASP950 ......... INVALID OPERAND                           *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J 0 0 5 $ L F            *\n*                                                                     *\n*        01)  $AMODE       SYS1.HASPSRC                               *\n*        02)  $BUFFER      SYS1.HASPSRC                               *\n*        03)  $CAT         SYS1.HASPSRC                               *\n*        04)  $CMB         SYS1.HASPSRC                               *\n*        05)  $COMWORK     SYS1.HASPSRC                               *\n*        06)  $CWA         SYS1.HASPSRC                               *\n*        07)  $CWTO        SYS1.HASPSRC                               *\n*        08)  $DEST        SYS1.HASPSRC                               *\n*        09)  $ENTRY       SYS1.HASPSRC                               *\n*        10)  $GETBUF      SYS1.HASPSRC                               *\n*        11)  $FREEBUF     SYS1.HASPSRC                               *\n*        12)  $HASPEQU     SYS1.HASPSRC                               *\n*        13)  $HASPGBL     SYS1.HASPSRC                               *\n*        14)  $HCT         SYS1.HASPSRC                               *\n*        15)  $JCT         SYS1.HASPSRC                               *\n*        16)  $JOE         SYS1.HASPSRC                               *\n*        17)  $JOT         SYS1.HASPSRC                               *\n*        18)  $JQE         SYS1.HASPSRC                               *\n*        19)  $MIT         SYS1.HASPSRC                               *\n*        20)  $MODEND      SYS1.HASPSRC                               *\n*        21)  $MODULE      SYS1.HASPSRC                               *\n*        22)  $PADDR       SYS1.HASPSRC                               *\n*        23)  $PCE         SYS1.HASPSRC                               *\n*        24)  $RAT         SYS1.HASPSRC                               *\n*        25)  $RETURN      SYS1.HASPSRC                               *\n*        26)  $SAVE        SYS1.HASPSRC                               *\n*        27)  $STORE       SYS1.HASPSRC                               *\n*        28)  IAZRESPA     SYS1.AMODGEN                               *\n*        29)  IFGRPL       SYS1.MACLIB                                *\n*        30)  MODESET      SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       3K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SET CONDITIONAL ASSEMBLY VARIABLES                           *\n*                                                                     *\n*        THE XJCF VARIABLE IS DESIGNED TO GENERATE SUPPORT FOR        *\n*        THE XEROX 9700 SUPPORT PRODUCT XJCF OF XEXOS COMPUTING       *\n*        SYSTEMS.  INSTALLATIONS NOT USING THIS PRODUCT MUST          *\n*        SET THE VALUE TO 'NO'.                                       *\n*                                                                     *\n***********************************************************************\n         LCLC  &XJCF\n&XJCF    SETC  'YES'              ASSEMBLE FOR XJCF PRODUCT\n         EJECT\n         COPY  $HASPGBL\nJ005$LF  $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 $LF COMMAND PROCESSOR',                     X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $CMB,               GENERATE HASP CMB DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $CWA,               GENERATE HASP CWA DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JOT,               GENERATE HASP JOT DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $RAT,               GENERATE HASP RAT DSECT             X\n               RESPA,              GENERATE MVS  RESPA DSECT           X\n               RPL                 GENERATE MVS  IFGRPL DSECT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREAS                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n$LFWORK  DSECT                     COMMAND WORK AREA\n         DS    CL(BUFSTART-BFPDSECT) ***** RESERVED BY JES2  *****\nJOEADDR  DS    F                   REGISTER SAVE AREA\nWRKA     DS    CL10                EXIT WORK AREA\nJTYPE    DS    C                   JOB TYPE (* OR JQEFLAG VALUE)\nFORMAT   DS    C                   DISPLAY FORMAT (S / L)\nMISCSW   DS    X                   MISCELLANEOUS SWITCHES\nTWOPART  EQU   X'80'               TWO PART DESTINATION SPECIFIED\nMATCH    EQU   X'40'               MATCH FOR OUTPUT FOUND\nNUMCLASS DS    X                   NUMBER OF OUTPUT CLASSES FOLLOWING\nOUTCLASS DS    CL8                 JOB OUTPUT CLASS / *\nLOWJOB   DS    H                   LOW JOB NUMBER FOR SEARCH\nHIGHJOB  DS    H                   HIGH JOB NUMBER FOR SEARCH\nLOWROUT  DS    F                   LOW ROUTE CODE FOR SEARCH\nHIGHROUT DS    F                   HIGH ROUTE CODE FOR SEARCH\nLOWLIM   DS    F                   LOW OUTPUT LINE LIMIT\nHIGHLIM  DS    F                   HIGH OUTPUT LINE LIMIT\nDEST1P1  DS    CL10                BEGINNING DEST PART 1\nDEST1P2  DS    CL10                BEGINNING DEST PART 2\nDEST2P1  DS    CL10                ENDING DEST PART 1\nOUTFORM  DS    CL4                 JOB FORM\nOUTFCB   DS    CL4                 JOB FCB\nOUTUCS   DS    CL4                 JOB UCS\nOUTOVLY  DS    CL4                 JOB OVLY\nOUTBURST DS    CL1                 JOB BURST IND\nOUTHOLD  DS    CL1                 JOB HOLD IND\nOUTXS    DS    CL1                 JOB OUTPUT XJCF SHIFT VALUE\nMESSAGE  DS    CL100               MESSAGE WORK AREA\n*\nOJOBNO   EQU   COMMAND+0,8         OUTPUT JOB NUMBER\nOJOBNM   EQU   COMMAND+9,8         OUTPUT JOB NAME\nMSG1     EQU   MESSAGE             FIRST MESSAGE\nOBUSYIND EQU   MESSAGE+00,1        OUTPUT BUSY (PRINTING/PUNCHING)\nODEST    EQU   MESSAGE+01,7        OUTPUT DESTINATION\nOCLASS   EQU   MESSAGE+11,1        OUTPUT CLASS\nOFORM    EQU   MESSAGE+15,4        OUTPUT FORM\n         AIF   ('&XJCF' EQ 'YES').XJCF1\nOQTY     EQU   MESSAGE+20,7        OUTPUT NUMBER OF RECS/PAGES\nOTYP     EQU   MESSAGE+28,3        OUTPUT TYPE (RECS/PAGES)\nOHOLDIND EQU   MESSAGE+32,1        OUTPUT HOLD INDICATOR\n         AGO   .XJCF1E\n.XJCF1   ANOP\nOXS      EQU   MESSAGE+23,1        XJCF SHIFT VALUE\nOQTY     EQU   MESSAGE+25,7        OUTPUT NUMBER OF RECS/PAGES\nOTYP     EQU   MESSAGE+33,3        OUTPUT TYPE (RECS/PAGES)\nOHOLDIND EQU   MESSAGE+37,1        OUTPUT HOLD INDICATOR\n.XJCF1E  ANOP\nMSG2     EQU   MESSAGE+38          SECOND MESSAGE\nOFCB     EQU   MESSAGE+41,4        OUTPUT FCB\nOUCS     EQU   MESSAGE+48,4        OUTPUT UCS\nOOVLY    EQU   MESSAGE+55,4        OUTPUT OVERLAY\nOBURST   EQU   MESSAGE+62,1        OUTPUT BURST INDICATOR\nJ005$LF  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         TITLE 'JES2 $LF COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE005$LF  $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       - ADDRESS OF THE CURRENT OPERAND                    *\n*        R6       - INCREMENT VALUE OF 4                              *\n*        R7       - ADDRESS OF THE LAST OPERAND                       *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SEE IF THIS IS A $LF COMMAND                                 *\n*                                                                     *\n***********************************************************************\n         CLC   COMVERB(2),=C'LF'   ISF IF THIS IS THE $LF COMMAND\n         BNE   EXIT0               NO, BRANCH TO COMMAND OK EXIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        $L F,J=JN-NN,R=DEST1-DEST2,Q=CLASS,L/S                       *\n*            (IF L/S (LONG OR SHORT FORM) IS NOT SPECIFIED, THE       *\n*            SHORT FORM WILL BE USED)                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        GET A JES2 BUFFER FOR REENTRANCY AND                         *\n*        CLEAR THE COMMAND WORK AREA                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R8,R1               SAVE WORK AREA ADDRESS\n         USING $LFWORK,R8          SET ADDRESSABILITY TO WORK AREA\n         LA    R14,$LFWORK+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS\n         LH    R15,$BUFSIZE        SET   'TO'   LENGTH\n         SLR   R0,R0               CLEAR 'FROM' ADDRESS\n         SLR   R1,R1               CLEAR 'FROM' LENGTH\n         MVCL  R14,R0              CLEAR THE BUFFER\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        GET THE DEFAULT ROUTE CODE FOR $LF                           *\n*                                                                     *\n***********************************************************************\nGETROUT  L     R1,COMJROUT         LOAD COMMAND ROUTE CODE\n         TM    COMFLAG,CMBFLAGW    IS THIS A RJE\n         BNO   GETROUTE            NO, BRANCH\n         CLM   R1,B'1100',$OWNNODE IS THIS OUR NODE AND RJE\n         BNE   GETROUTE            NO, BRANCH\n         LH    R1,COMJRMT          LOAD THE REMOTE NUMBER\n         BCTR  R1,0                MAKE NUMBER RELATIVE TO ZERO\n         MH    R1,=Y(RATTLE)       MULTIPLY BY RAT LENGTH FOR OFFSET\n         AL    R1,$RATABLE         POINT TO RAT ENTRY FOR THIS RJE\n         L     R1,RATROUTE-RAT(,R1) PICK UP PROPER ROUTINE\nGETROUTE ST    R1,LOWROUT          SET DEFAULT LOW ROUTE CODE\n         ST    R1,HIGHROUT         AND HIGH ROUTE CODE\n***********************************************************************\n*                                                                     *\n*        GET THE DEFAULT JOB RANGE FOR $LF                            *\n*                                                                     *\n***********************************************************************\nGETJRNG  SLR   R1,R1               SET DEFAULT LOW JOB NUMBER\n         STH   R1,LOWJOB           SAVE LOW JOB NUMBER\n         LH    R1,$NUMJBNO         SET DEFAULT HIGH JOB NUMBER\n         STH   R1,HIGHJOB          SAVE HIGH JOB NUMBER\n         MVI   JTYPE,C'*'          SET TO DISPLAY ALL JOB TYPES\n***********************************************************************\n*                                                                     *\n*        SET THE DEFAULT JOB OUTPUT CLASS AND CMD FORMAT              *\n*                                                                     *\n***********************************************************************\n         MVI   OUTCLASS,C'*'       SET TO ALL CLASSES\n         MVI   FORMAT,C'S'         SET TO SHORT FORM OF COMMAND\n         MVC   OUTFORM,=C'****'    SET TO ALL FORMS\n         MVC   OUTFCB,=C'****'     SET TO ALL FCBS\n         MVC   OUTUCS,=C'****'     SET TO ALL UCS IDS\n         MVC   OUTOVLY,=C'****'    SET TO ALL OVERLAYS\n         MVI   OUTBURST,C'*'       SET TO ALL BURST TYPES\n         MVI   OUTHOLD,C'*'        SET TO NOT SELECT ONLY HELD OUTPUT\n         MVI   OUTXS,C'*'          SET FOR ALL XJCF SHIFT VALUES\n         XC    LOWLIM,LOWLIM       SET LOW LINE LIMIT TO ZERO\n         MVC   HIGHLIM,=X'7FFFFFFF' SET HIGH LINE LIMIT TO 2 GIG\n         MVI   MISCSW,X'00'        ZERO THE MISCELLANEOUS SWITCHES\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXAMINE THE COMMAND OPERANDS                                 *\n*                                                                     *\n***********************************************************************\nCLFNSPEC BXH   R5,R6,CLFOK         IF NO MORE EXIT\n         L     R1,0(,R5)           POINT TO OPERAND\n         CLC   0(2,R1),=C'J='      JOB(S) SELECTION?\n         BE    CLFJ                YES, BRANCH\n         CLC   0(2,R1),=C'R='      RJE(S) SELECTION?\n         BE    CLFR                YES, BRANCH\n         CLC   0(2,R1),=C'Q='      SYSOUT CLASS SELECTION?\n         BE    CLFQ                YES, BRANCH\n         CLC   0(2,R1),=C'F='      FORM SELECTION?\n         BE    CLFF                YES, BRANCH\n         CLC   0(2,R1),=C'C='      FCB SELECTION?\n         BE    CLFC                YES, BRANCH\n         CLC   0(2,R1),=C'T='      UCS/CHARS SELECTION?\n         BE    CLFT                YES, BRANCH\n         CLC   0(2,R1),=C'O='      3800 OVERLAY SELECTION?\n         BE    CLFOV               YES, BRANCH\n         CLC   0(2,R1),=C'B='      3800 BURST SELECTION?\n         BE    CLFB                YES, BRANCH\n         CLC   0(4,R1),=C'LIM='    OUTPUT LINE LIMIT SELECTION?\n         BE    CLFLIM              YES, BRANCH\n         CLC   0(5,R1),=C'HOLD '   HELD ONLY SELECTION?\n         BE    CLFH                YES, BRANCH\n         CLC   0(5,R1),=C'HOLD,'   HELD ONLY SELECTION?\n         BE    CLFH                YES, BRANCH\n         CLC   0(2,R1),=C'L '      LONG FORM OF COMMAND DESIRED?\n         BE    CLFORM              YES, BRANCH\n         CLC   0(2,R1),=C'L,'      LONG FORM OF COMMAND DESIRED?\n         BE    CLFORM              YES, BRANCH\n         CLC   0(2,R1),=C'S '      SHORT FORM OF COMMAND DESIRED?\n         BE    CLFORM              YES, BRANCH\n         CLC   0(2,R1),=C'S,'      SHORT FORM OF COMMAND DESIRED?\n         BE    CLFORM              YES, BRANCH\n         AIF   ('&XJCF' NE 'YES').XJCF2\n         CLC   0(3,R1),=C'XS='     XJCF SHIFT SELECTION?\n         BE    CLFXS               YES, BRANCH\n.XJCF2   ANOP\n         B     BADOPRND            ERROR EXIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE JOB (J) RANGE SUBPARAMETER                       *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFJ     DS    0H\n         L     R1,0(R5)            POINT TO OPERAND\n         SLR   R15,R15             SET LENGTH TO ZERO\n         LA    R1,3(R1)            INDEX PAST 'J=J' ETC\n         LR    R14,R1              SAVE START OF OPERAND\n         MVI   LOWJOB,X'FF'        SET START OF PROCESSING INDICATOR\nCLFJ1    CLI   0(R1),C'-'          END OF FIRST OPERAND\n         BE    CLFJ2               YES, BRANCH\n         CLI   0(R1),C','          END OF ALL OPERANDS\n         BE    CLFJ2               YES, BRANCH\n         CLI   0(R1),C' '          END OF ALL OPERANDS\n         BE    CLFJ2               YES, BRANCH\n         CLI   0(R1),C'0'          NUMERIC OPERAND\n         BL    BADOPRND            NO, ERROR\n         CLI   0(R1),C'9'          NUMERIC OPERAND\n         BH    BADOPRND            NO, ERROR\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR JOB NUMBER\n         LA    R15,1(,R15)         ADD 1 TO OPERAND LENGTH\n         B     CLFJ1               LOOP UNTIL DONE\nCLFJ2    LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,PACKJOB         PACK JOB NUMBER\n         CVB   R15,$DOUBLE         CONVERT TO BINARY\n         LTR   R15,R15             SEE IF NUMBER TOO SMALL\n         BZ    BADOPRND            YES, ERROR\n         CH    R15,=H'9999'        SEE IF NUMBER TOO LARGE\n         BH    BADOPRND            YES, ERROR\n         CLI   0(R1),C'-'          LOW JOB OF RANGE\n         BE    CLFJ3               YES, BRANCH\n         STH   R15,HIGHJOB         SAVE HIGH JOB NUMBER\n         CLI   LOWJOB,X'FF'        IS THIS THE FIRST JOB NUMBER\n         BNE   CLFJ4               NO, ALL DONE WITH NUMBER, BRANCH\n         STH   R15,LOWJOB          SAVE LOW JOB NUMBER\n         B     CLFJ4               ALL DONE WITH NUMBER, BRANCH\nCLFJ3    CLI   LOWJOB,X'FF'        HAS LOW JOB NUMBER ALREADY BEEN PROC\n         BNE   BADOPRND            YES, ERROR\n         STH   R15,LOWJOB          SAVE LOW JOB NUMBER\n         LA    R1,1(,R1)           INCREMENT PAST '-'\n         LR    R14,R1              SAVE START OF OPERAND\n         SLR   R15,R15             RESET LENGTH TO ZERO\n         B     CLFJ1               LOOP FOR NEXT NUMBER OF RANGE\nPACKJOB  PACK  $DOUBLE,0(0,R14)    PACK JOB NUMBER\n         SPACE 1\nCLFJ4    L     R15,0(,R5)          POINT TO OPERAND\n         MVC   JTYPE,2(R15)        SET JOB TYPE\n         CLI   2(R15),C'J'         JOB?\n         BE    CLFNSPEC            YES, GET NEXT SPECIFICATION\n         CLI   2(R15),C'S'         STC?\n         BE    CLFNSPEC            YES, GET NEXT SPECIFICATION\n         CLI   2(R15),C'T'         TSU?\n         BNE   BADOPRND            NO, ERROR\n         B     CLFNSPEC            GET NEXT SPECIFICATION\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE ROUTE CODE (R) SUBPARAMETER                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*    RANGES ALLOWED  -    ONLY ASCENDING RANGES ARE PERMITTED         *\n*    --------------                                                   *\n*    NNNNNRNNNN (-RMMMM)                                              *\n*    NNNN.RNNNN (-RMMMM)                                              *\n*    NAME.RNNNN (-RMMMM)                                              *\n*                      -  RANGE OF REMOTES AT A GIVEN NODE            *\n*                        (NAME IS 8-BYTE EBCDIC FROM A DESTID CARD    *\n*    NNNNN(-NMMMM)     -  RANGE OF ALL REMOTES/UNITS AT GIVEN NODE    *\n*    UNNNN(-UMMMM)     -  RANGE OF UNITS AT THE LOCAL NODE ONLY       *\n*    RNNNN(-RMMMM)     -  RANGE OF REMOTES AT THE LOCAL NODE ONLY     *\n*    NAME1(-NAME2)     -  AS ANY ONE OF THE ABOVE, BUT NO OTHERS      *\n*    LOCAL             -  ALL SPECIAL LOCAL                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFR     L     R3,0(,R5)           POINT TO OPERAND\n         LA    R3,2(,R3)           INCREMENT PAST 'R='\n         SLR   R1,R1               SET ZERO LENGTH\n         LR    R4,R3               SAVE START OF OPERAND\n         MVC   DEST1P1,=CL10' '    BLANK DEST1 PART1\n         MVC   DEST1P2,=CL10' '    BLANK DEST1 PART2\n         MVC   DEST2P1,=CL10' '    BLANK DEST2 PART1\nCLFRLOOP CLI   0(R4),C'-'          END OF FIRST OPERAND\n         BE    CLFR2               YES, BRANCH\n         CLI   0(R4),C','          END OF LAST OPERAND\n         BE    CLFR2               YES, BRANCH\n         CLI   0(R4),C' '          END OF LAST OPERAND\n         BE    CLFR2               YES, BRANCH\n         CLI   0(R4),C'.'          TWO PART DESTINATION\n         BE    CLFR1               YES, BRANCH\n         LA    R4,1(,R4)           INCREMENT TO NEXT CHAR OF DEST\n         LA    R1,1(,R1)           ADD 1 TO LENGTH\n         B     CLFRLOOP            LOOP UNTIL DONE\nCLFR1    OI    MISCSW,TWOPART      SET TWO PART DEST INDICATION\n         CLI   DEST1P1,C' '        HAS FIRST ALREADY BEEN SPECIFIED\n         BNE   BADOPRND            YES, ERROR\n         B     CLFR2               GO PROCESS DEST FIELD\nCLFR2    LTR   R1,R1               CHECK LENGTH OF DEST\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R1,=H'10'           CHECK LENGTH OF DEST\n         BH    BADOPRND            GREATER THAN 10, ERROR\n         BCTR  R1,0                MAKE MACHINE LENGTH\n         CLI   DEST1P1,C' '        HAS PART1 ALREADY BEEN SPECIFIED\n         BNE   CLFR3               YES, BRANCH\n         EX    R1,MDEST1P1         MOVE DEST1 PART1\n         B     CLFR5               GET OUT\nCLFR3    TM    MISCSW,TWOPART      SEE IF TWO PART DEST INDICATION\n         BZ    CLFR4               NO, BRANCH\n         CLI   DEST1P2,C' '        SEE IF PART2 ALREADY BEEN SPECIFIED\n         BNE   CLFR4               YES, THIS IS THE SECOND DEST\n         EX    R1,MDEST1P2         MOVE DEST1 PART2\n         B     CLFR5               GET OUT\nCLFR4    CLI   DEST2P1,C' '        SEE IF DEST2 ALREADY BEEN SPECIFIED\n         BNE   BADOPRND            YES, ERROR\n         EX    R1,MDEST2P1         MOVE DEST2 PART1\n         B     CLFR5               GET OUT\nMDEST1P1 MVC   DEST1P1(0),0(R3)    MOVE DEST1 PART1\nMDEST1P2 MVC   DEST1P2(0),0(R3)    MOVE DEST1 PART2\nMDEST2P1 MVC   DEST2P1(0),0(R3)    MOVE DEST2 PART1\nCLFR5    CLI   0(R4),C'-'          SEE IF DESTINATION RANGE SPECIFIED\n         BE    CLFR6               YES, BRANCH\n         CLI   0(R4),C'.'          SEE IF TWO PART DEST SPECIFIED\n         BE    CLFR6               YES, BRANCH\n         B     CLFR10              GO CONVERT DEST TO ROUTE CODES\nCLFR6    LA    R4,1(,R4)           INCREMENT PAST '-' OR '.'\n         LR    R3,R4               SAVE START ADDRESS\n         SLR   R1,R1               RESET LENGTH TO ZERO\n         B     CLFRLOOP            LOOP FOR NEXT DESTINATION\nCLFR10   DS    0H\n         MVC   COMDWORK(2),COMJNOD SET DEFAULT NODE\n         $DEST DEST1P1,COMDWORK,LEN=10 CONVERT DEST1 PART1\n         BZ    BADOPRND            BAD DEST, ERROR\n         ST    R1,LOWROUT          SAVE ROUTE CODE\n         CLI   DEST1P2,C' '        CHECK IF TWO PART DEST\n         BE    CLFR12              NO, BRANCH\nCLFR11   CLM   R1,B'0011',$ZEROES  SEE IF NODAL DESTINATION ONLY\n         BNE   BADOPRND            NO, ERROR\n         CLM   R1,B'1100',$ZEROES  SEE IF NODE NUMBER SET\n         BE    BADOPRND            NO, ERROR\n         ST    R1,COMDWORK         SET DEFAULT NODE FOR SECOND PART\n         $DEST DEST1P2,COMDWORK,LEN=10 CONVERT DEST1 PART1\n         BZ    BADOPRND            BAD DEST, ERROR\n         ST    R1,LOWROUT          SAVE ROUTE CODE\n         CLM   R1,B'1100',COMDWORK MAKE SURE NODE DEFAULTED\n         BNE   BADOPRND            NO, ERROR\nCLFR12   MVC   HIGHROUT,LOWROUT    SET DEST RANGE TO EQUAL VALUES\n         CLI   DEST2P1,C' '        WAS DEST RANGE SPECIFIED\n         BE    CLFR13              NO, BRANCH\n         $DEST DEST2P1,COMDWORK,LEN=10 CONVERT DEST2 PART1\n         BZ    BADOPRND            BAD DEST, ERROR\n         ST    R1,HIGHROUT         SAVE ROUTE CODE\nCLFR13   CLC   HIGHROUT,LOWROUT    CHECK FOR ASCENDING RANGE\n         BL    BADOPRND            NO, ERROR\n         B     CLFNSPEC            LOOP TO NEXT SPECIFICATION\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE SYSOUT CLASS (Q) SUBPARAMETER                    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFQ     L     R1,0(,R5)           POINT TO OPERAND\n         LA    R1,2(,R1)           INCREMENT PAST 'Q='\n         LR    R14,R1              SAVE CLASS STRING ADDRESS\n         SLR   R15,R15             SET LENGTH TO ZERO\nCLFQ1    CLI   0(R1),C' '          END OF CLASS STRING\n         BE    CLFQ2               YES, BRANCH\n         CLI   0(R1),C','          END OF CLASS STRING\n         BE    CLFQ2               YES, BRANCH\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF CLASS\n         LA    R15,1(,R15)         ADD 1 TO LENGTH\n         B     CLFQ1               LOOP\nCLFQ2    STC   R15,NUMCLASS        SAVE LENGTH\n         LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'8'           SEE IF GT 8\n         BH    BADOPRND            GREATER THAN 8, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MOVECLAS        SAVE CLASS STRING\n         EX    R15,TRTCLASS        TEST CLASSES\n         BNZ   BADOPRND            NOT VALID, ERROR\n         B     CLFNSPEC            GET NEXT SPECIFICATION\nMOVECLAS MVC   OUTCLASS(0),0(R14)  MOVE SYSOUT CLASSES TO SAVE\nTRTCLASS TRT   OUTCLASS(0),CLASSTBL TEST SYSOUT CLASSES\nCLASSTBL DC    256X'01'            VALID SYSOUT CLASSES\n         ORG   CLASSTBL+C'A'\n         DC    9X'00'              CLASS A-I\n         ORG   CLASSTBL+C'J'\n         DC    9X'00'              CLASS J-R\n         ORG   CLASSTBL+C'S'\n         DC    8X'00'              CLASS S-Z\n         ORG   CLASSTBL+C'0'\n         DC    10X'00'             CLASS 0-9\n         ORG\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE SYSOUT FORM (F) SUBPARAMETER                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFF     L     R1,0(,R5)           POINT TO OPERAND\n         LA    R1,2(,R1)           INCREMENT PAST 'F='\n         LR    R14,R1              SAVE FORM NAME START ADDRESS\n         SLR   R15,R15             SET LENGTH TO ZERO\nCLFF1    CLI   0(R1),C' '          END OF FORM NAME\n         BE    CLFF2               YES, BRANCH\n         CLI   0(R1),C','          END OF FORM NAME\n         BE    CLFF2               YES, BRANCH\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF FORM NAME\n         LA    R15,1(,R15)         ADD 1 TO LENGTH\n         B     CLFF1               LOOP\nCLFF2    LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'4'           SEE IF GT 4\n         BH    BADOPRND            GREATER THAN 4, ERROR\n         MVC   OUTFORM,=CL4' '     BLANK FORM NAME\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MOVEFORM        SAVE FORMS ID\n         B     CLFNSPEC            GET NEXT SPECIFICATION\nMOVEFORM MVC   OUTFORM(0),0(R14)   MOVE FORM NAME TO SAVE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE SYSOUT FCB  (C) SUBPARAMETER                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFC     L     R1,0(,R5)           POINT TO OPERAND\n         LA    R1,2(,R1)           INCREMENT PAST 'C='\n         LR    R14,R1              SAVE FCB NAME START ADDRESS\n         SLR   R15,R15             SET LENGTH TO ZERO\nCLFC1    CLI   0(R1),C' '          END OF FCB NAME\n         BE    CLFC2               YES, BRANCH\n         CLI   0(R1),C','          END OF FCB NAME\n         BE    CLFC2               YES, BRANCH\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF FCB NAME\n         LA    R15,1(,R15)         ADD 1 TO LENGTH\n         B     CLFC1               LOOP\nCLFC2    LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'4'           SEE IF GT 4\n         BH    BADOPRND            GREATER THAN 4, ERROR\n         MVC   OUTFCB,=CL4' '      BLANK FCB NAME\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MOVEFCB         SAVE FCB NAME\n         B     CLFNSPEC            GET NEXT SPECIFICATION\nMOVEFCB  MVC   OUTFCB(0),0(R14)    MOVE FCB NAME TO SAVE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE SYSOUT UCS/CHARS (T) SUBPARAMETER                *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFT     L     R1,0(,R5)           POINT TO OPERAND\n         LA    R1,2(,R1)           INCREMENT PAST 'C='\n         LR    R14,R1              SAVE UCS NAME START ADDRESS\n         SLR   R15,R15             SET LENGTH TO ZERO\nCLFT1    CLI   0(R1),C' '          END OF UCS NAME\n         BE    CLFT2               YES, BRANCH\n         CLI   0(R1),C','          END OF UCS NAME\n         BE    CLFT2               YES, BRANCH\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF UCS NAME\n         LA    R15,1(,R15)         ADD 1 TO LENGTH\n         B     CLFT1               LOOP\nCLFT2    LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'4'           SEE IF GT 4\n         BH    BADOPRND            GREATER THAN 4, ERROR\n         MVC   OUTUCS,=CL4' '      BLANK UCS NAME\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MOVEUCS         SAVE UCS NAME\n         B     CLFNSPEC            GET NEXT SPECIFICATION\nMOVEUCS  MVC   OUTUCS(0),0(R14)    MOVE UCS NAME TO SAVE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE SYSOUT OVERLAY (O) SUBPARAMETER                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFOV    L     R1,0(,R5)           POINT TO OPERAND\n         LA    R1,2(,R1)           INCREMENT PAST 'C='\n         LR    R14,R1              SAVE OVERLAY NAME START ADDRESS\n         SLR   R15,R15             SET LENGTH TO ZERO\nCLFOV1   CLI   0(R1),C' '          END OF OVERLAY NAME\n         BE    CLFOV2              YES, BRANCH\n         CLI   0(R1),C','          END OF OVERLAY NAME\n         BE    CLFOV2              YES, BRANCH\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF OVLY NAME\n         LA    R15,1(,R15)         ADD 1 TO LENGTH\n         B     CLFOV1              LOOP\nCLFOV2   LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'4'           SEE IF GT 4\n         BH    BADOPRND            GREATER THAN 4, ERROR\n         MVC   OUTOVLY,=CL4' '     BLANK OVERLAY NAME\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MOVEOVLY        SAVE OVERLAY NAME\n         B     CLFNSPEC            GET NEXT SPECIFICATION\nMOVEOVLY MVC   OUTOVLY(0),0(R14)   MOVE OVERLAY NAME TO SAVE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE SYSOUT BURST (B) SUBPARAMETER                    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFB     L     R1,0(,R5)           POINT TO OPERAND\n         LA    R1,2(,R1)           INCREMENT PAST 'B='\n         MVC   OUTBURST,1(R1)      SAVE BURST SPECIFICATION\n         CLI   0(R1),C'Y'          SEE IF BURST=Y\n         BE    CLFB1               YES, BRANCH\n         CLI   0(R1),C'N'          SEE IF BURST=N\n         BNE   BADOPRND            NO, ERROR, NOT Y/N\nCLFB1    B     CLFNSPEC            GET NEXT SPECIFICATION\n         AIF   ('&XJCF' NE 'YES').XJCF3\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE SYSOUT BURST (B) SUBPARAMETER                    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFXS    L     R1,0(,R5)           POINT TO OPERAND\n         LA    R1,3(,R1)           INCREMENT PAST 'XS='\n         MVC   OUTXS,0(R1)         SAVE XS PARAMETER\n         CLI   0(R1),C'N'          SEE IF XS=N\n         BE    CLFXS1              YES, BRANCH\n         CLI   0(R1),C'D'          SEE IF XS=D\n         BE    CLFXS1              YES, BRANCH\n         CLI   0(R1),C'S'          SEE IF XS=S\n         BE    CLFXS1              YES, BRANCH\n         B     BADOPRND            NO, ERROR, NOT Y/N\nCLFXS1   CLI   1(R1),C' '          END OF SPECIFICATIONS\n         BE    CLFXS2              YES, GET OUT\n         CLI   1(R1),C','          END OF SPECIFICATIONS\n         BNE   BADOPRND            NO, ERROR\nCLFXS2   B     CLFNSPEC            GET NEXT SPECIFICATION\n.XJCF3   ANOP\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE OUTPUT LIMIT (LIM) SUBPARAMETER                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFLIM   L     R1,0(R5)            POINT TO OPERAND\n         SLR   R15,R15             SET LENGTH TO ZERO\n         LA    R1,4(R1)            INDEX PAST 'LIM='\n         LR    R14,R1              SAVE START OF OPERAND\nCLFLIM1  CLI   0(R1),C'-'          END OF FIRST OPERAND\n         BE    CLFLIM2             YES, BRANCH\n         CLI   0(R1),C','          END OF ALL OPERANDS\n         BE    CLFLIM2             YES, BRANCH\n         CLI   0(R1),C' '          END OF ALL OPERANDS\n         BE    CLFLIM2             YES, BRANCH\n         CLI   0(R1),C'0'          NUMERIC OPERAND\n         BL    BADOPRND            NO, ERROR\n         CLI   0(R1),C'9'          NUMERIC OPERAND\n         BH    BADOPRND            NO, ERROR\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR LOW LIM\n         LA    R15,1(,R15)         ADD 1 TO OPERAND LENGTH\n         B     CLFLIM1             LOOP UNTIL DONE\nCLFLIM2  LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'10'          SEE IF TOO LONG\n         BH    BADOPRND            ZERO, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,PACKLIM         PACK LOW LIMIT\n         CP    $DOUBLE,=P'2147483647'  SEE IF EXCEEDS 2 GIG\n         BH    BADOPRND            YES, ERROR\n         CVB   R15,$DOUBLE         CONVERT TO BINARY\n         ST    R15,LOWLIM          SAVE LOW OUTPUT LIM\nCLFLIM3  CLI   0(R1),C'-'          SEE IF SECOND NUMBER OF RANGE\n         BNE   CLFLIM6             NO, BRANCH\n         LA    R1,1(,R1)           INCREMENT PAST '-'\n         LR    R14,R1              SAVE START OF OPERAND\n         SLR   R15,R15             RESET LENGTH TO ZERO\n         CLC   0(2,R1),=C'* '      SEE IF MAX SECOND RANGE SPECIFIED\n         BE    CLFLIM6             YES, GET OUT\n         CLC   0(2,R1),=C'*,'      SEE IF MAX SECOND RANGE SPECIFIED\n         BE    CLFLIM6             YES, GET OUT\nCLFLIM4  CLI   0(R1),C','          END OF ALL OPERANDS\n         BE    CLFLIM5             YES, BRANCH\n         CLI   0(R1),C' '          END OF ALL OPERANDS\n         BE    CLFLIM5             YES, BRANCH\n         CLI   0(R1),C'0'          NUMERIC OPERAND\n         BL    BADOPRND            NO, ERROR\n         CLI   0(R1),C'9'          NUMERIC OPERAND\n         BH    BADOPRND            NO, ERROR\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR LOW LIM\n         LA    R15,1(,R15)         ADD 1 TO OPERAND LENGTH\n         B     CLFLIM4             LOOP UNTIL DONE\nCLFLIM5  LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'10'          SEE IF TOO LONG\n         BH    BADOPRND            ZERO, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,PACKLIM         PACK LOW LIMIT\n         CP    $DOUBLE,=P'2147483647'  SEE IF EXCEEDS 2 GIG\n         BH    BADOPRND            YES, ERROR\n         CVB   R15,$DOUBLE         CONVERT TO BINARY\n         ST    R15,HIGHLIM         SAVE HIGH OUTPUT LIM\nCLFLIM6  B     CLFNSPEC            GET NEXT SPECIFICATION\nPACKLIM  PACK  $DOUBLE,0(0,R14)    PACK OUTPUT LIMIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE HOLD SUBPARAMETER                                *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFH     L     R15,0(,R5)          POINT TO OPERAND\n         MVI   OUTHOLD,C'H'        SAVE HELD OUTPUT REQUEST\n         B     CLFNSPEC            GET NEXT SPECIFICATION\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE COMMAND FORMAT (S/L) SUBPARAMETER                *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCLFORM   L     R15,0(,R5)          POINT TO OPERAND\n         MVC   FORMAT,3(R15)       SAVE COMMAND FORMAT\n         B     CLFNSPEC            GET NEXT SPECIFICATION\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GET CHARACTERISTICS JOE AND PREPARE TO SCAN                  *\n*                                                                     *\n***********************************************************************\n         EJECT\n*****************************************************************\n*                                                               *\n*        CHECK FOR AUTOMATIC REDIRECTION OF RESPONSES           *\n*                                                               *\n*****************************************************************\n         SPACE 1\nCLFOK    TM    COMFLAG,CMBFLAGU    IS THIS A UCM\n         BZ    MSGGOOD             NO, SKIP REDIRECTION\n         TM    FBLFLG,FBLFLGC+FBLFLGR CONSOLE SET OR REMOTE SYSTEM\n         BNZ   MSGRPT              SKIP AUTOMATIC L=CCA\n         LA    R1,2                LOAD REDIRECT OFFSET FOR $LF\n*                                  SAME AS FOR $DF\n         BCTR  R1,0                REDUCE BY 1\n         SLL   R1,1                DOUBLE\n         SLR   R2,R2               ZERO REGISTER FOR IC\n         IC    R2,COMUCM           PICK UP CURRENT UCM ID\n         L     R14,$COMEXTN        POINT TO CONSOLE WORK AREA\n         USING CWA,R14             SET ADDRESSABILITY TO CWA\n         CH    R2,CWAOCON          SEE IF EXCEEDS MAXIMUM\n         BH    MSGRPT              YES, ERROR, NO AUTOMATIC REDIRECTION\n         MH    R2,CWALCON          MULTIPLY BY LENGTH OF EACH ENTRY\n         AR    R1,R2               COMBINE OFFSETS\n         LA    R1,CWARESP-CWACONL(R1) POINT TO CORRECT CWA ENTRY\n         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID\n         TM    FBLFLG,FBLFLGA      HAS AREA BEEN SET\n         BO    MSGRPT              YES, SKIP AUTOMATIC REDIRECTION\n         MVC   COMUCMA,CWACONA(R1) SET NEW AREA\n         DROP  R14                 DROP ADDRESSABILITY TO CWA\nMSGRPT   BAL   R9,MSGVCCA          VERIFY CCA (NO RETURN IF BAD)\n         CLI   COMUCMA,0           TEST FOR DISPLAY AREA\n         BE    MSGGOOD             IF NOT, SKIP\n         MVI   COMLINET,X'80'      SET CONTROL LINE\n         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND\n         MVI   COMLINET,X'20'      SET DATA LINE\nMSGGOOD  L     R7,$JOTABLE         GET ADDRESS OF JOT\n         USING JOT,R7              SET ADDRESSABILITY TO JOT\n         LA    R4,JOTCHRQ-(JOENEXT-JOE) QUEUE HEAD\n         USING JOE,R4              SET ADDRESSABILITY TO JOE\n         ST    R4,JOEADDR          SAVE STARTING POINT\n         MVC   MESSAGE(66),INITRESP INITIALIZE RESPONSE BUFFER\n         B     CHARJOES            BYPASS DC\n         AIF   ('&XJCF' EQ 'YES').XJCF4\nINITRESP DS    0CL76\n         DC    CL38' RRRRRRR Q=X F=FFFF NNNNNNN PGS       '\n         DC    CL38' C=CCCC T=TTTT O=OOOO B=B             '\n         AGO   .XJCF4E\n.XJCF4   ANOP\nINITRESP DS    0CL76\n         DC    CL38' RRRRRRR Q=X F=FFFF XS=X NNNNNNN PGS H'\n         DC    CL38' C=CCCC T=TTTT O=OOOO B=B             '\n.XJCF4E  ANOP\n         SPACE 1\nCHARJOES L     R4,JOEADDR          GET PREV CHARACTERISTICS JOE ADDR\n         L     R4,JOENEXT          POINT TO NEXT CHARACTERISTICS JOE\n         N     R4,$ZEROFFF         IS THIS THE END OF THE JOE CHAIN\n         BZ    ENDJOES             YES, EXIT\n         ALR   R4,R7               CALCULATE ACTUAL JOE ADDRESS\n         ST    R4,JOEADDR          SAVE NEW CHARACTERISTICS JOE ADDR\n***********************************************************************\n*        MOVE THE FORM NUMBER TO THE MESSAGE                          *\n***********************************************************************\n         MVC   OFORM,JOEFORM       MOVE FORM TO MESSAGE\n***********************************************************************\n*        MOVE THE FCB  NUMBER TO THE MESSAGE                          *\n***********************************************************************\n         MVC   OFCB,JOEFCB         MOVE FCB  TO MESSAGE\n***********************************************************************\n*        MOVE THE UCS  NUMBER TO THE MESSAGE                          *\n***********************************************************************\n         MVC   OUCS,JOEUCS         MOVE UCS  TO MESSAGE\n***********************************************************************\n*        MOVE THE OVLY NUMBER TO THE MESSAGE                          *\n***********************************************************************\n         MVC   OOVLY,JOEFLASH      MOVE OVLY TO MESSAGE\n***********************************************************************\n*        MOVE THE BURST INDICATOR TO THE MESSAGE                      *\n***********************************************************************\n         MVI   OBURST,C'N'         ASSUME BURST=NO\n         TM    JOEFLAGC,JOEFCBRT   IS THIS BURST=YES\n         BZ    NOBURST             NO, BRANCH\n         MVI   OBURST,C'Y'         SET BURST=YES\nNOBURST  DS    0H\n         AIF   ('&XJCF' NE 'YES').XJCF5\n***********************************************************************\n*        SET THE XJCF XS VALUE IN THE MESSAGE                         *\n***********************************************************************\n         MVI   OXS,C'N'            ASSUME SHIFT=NONE\n         TM    JOEFLAGC,JOEFCSFT   SEE IF SHIFT SPECIFIED\n         BZ    ENDXS               NO, GET OUT\n         MVI   OXS,C'D'            ASSUME SHIFT=DUPLEX\n         TM    JOEFLAGC,JOEFCDPX   SEE IF DUPLEXED\n         BO    ENDXS               YES, GET OUT\n         MVI   OXS,C'S'            SET TO SHIFT=SIMPLEX\nENDXS    DS    0H\n.XJCF5   ANOP\n***********************************************************************\n*        CHECK THE SYSOUT FORM FOR OUR VALUE                          *\n***********************************************************************\nCKFORM   CLI   OUTFORM,C'*'        DO WE WANT ALL FORMS?\n         BE    CKFCB               YES, BRANCH\n         CLC   OFORM,OUTFORM       SEE IF CORRECT FORM\n         BNE   CHARJOES            NO, BYPASS THESE JOES\n         SPACE 1\n***********************************************************************\n*        CHECK THE SYSOUT FCB FOR OUR VALUE                           *\n***********************************************************************\nCKFCB    CLI   OUTFCB,C'*'         DO WE WANT ALL FCBS?\n         BE    CKUCS               YES, BRANCH\n         CLC   OFCB,OUTFCB         SEE IF CORRECT FCB\n         BNE   CHARJOES            NO, BYPASS THESE JOES\n         SPACE 1\n***********************************************************************\n*        CHECK THE SYSOUT UCS FOR OUR VALUE                           *\n***********************************************************************\nCKUCS    CLI   OUTUCS,C'*'         DO WE WANT ALL UCSS?\n         BE    CKOVLY              YES, BRANCH\n         CLC   OUCS,OUTUCS         SEE IF CORRECT UCS\n         BNE   CHARJOES            NO, BYPASS THESE JOES\n         SPACE 1\n***********************************************************************\n*        CHECK THE SYSOUT OVLY FOR OUR VALUE                          *\n***********************************************************************\nCKOVLY   CLI   OUTOVLY,C'*'        DO WE WANT ALL OVERLAYS?\n         BE    CKBURST             YES, BRANCH\n         CLC   OOVLY,OUTOVLY       SEE IF CORRECT OVLY\n         BNE   CHARJOES            NO, BYPASS THESE JOES\n         SPACE 1\n***********************************************************************\n*        CHECK THE SYSOUT BURST TYPE FOR OUR VALUE                    *\n***********************************************************************\nCKBURST  CLI   OUTBURST,C'*'       DO WE WANT ALL BURST TYPES?\n         BE    CKEND               YES, BRANCH\n         CLC   OBURST,OUTBURST     SEE IF CORRECT BURST TYPE\n         BNE   CHARJOES            NO, BYPASS THESE JOES\nCKEND    DS    0H\n         AIF   ('&XJCF' NE 'YES').XJCF6\n         SPACE 1\n***********************************************************************\n*        CHECK THE SYSOUT XJCF SHIFT TYPE FOR OUR VALUE               *\n***********************************************************************\nCKXS     CLI   OUTXS,C'*'          DO WE WANT ALL XS VALUES?\n         BE    SCAN                YES, BRANCH\n         CLC   OXS,OUTXS           SEE IF CORRECT XJCF SHIFT TYPE\n         BNE   CHARJOES            NO, BYPASS THESE JOES\n         EJECT\n.XJCF6   ANOP\n***********************************************************************\n*                                                                     *\n*        SCAN WORK JOES AND JQES FOR MATCH ON OUR CRITERIA            *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSCAN     MVI   COMMAND,C' '        BLANK THE ENTIRE\n         MVC   COMMAND+1(19),COMMAND     COMMAND AREA PREFIX\n         LA    R4,JOEWKPTR         GET START OF QUEUE\n         SL    R4,=A(JOECHNXT-JOE) BACKUP FOR START OF LOOP\nWORKJOES L     R4,JOECHNXT         GET OFFSET OF NEXT WORK JOE\n         N     R4,$ZEROFFF         IS THIS THE END OF THE WORK JOES\n         BZ    CHARJOES            YES, BRANCH\n         ALR   R4,R7               COMPUTE WORK JOE ADDRESS\n         L     R10,JOEJQE          GET JQE OFFSET\n         N     R10,$ZEROFFF        CLEAR THE HI-ORDER BYTE\n         AL    R10,$JOBQPTR        CONVERT THE OFFSET TO ADDRESS\n         USING JQE,R10             SET ADDRESSABILITY TO JQE\n***********************************************************************\n*        MOVE JOBNAME AND NUMBER TO THE MESSAGE AREA                  *\n***********************************************************************\n         MVC   OJOBNM,JQEJNAME     MOVE JOBNAME TO MESSAGE\n         LH    R0,JQEJOBNO         LOAD JOB NUMBER\n         CVD   R0,$DOUBLE          CONVERT JOB NUMBER TO PACKED\n         MVC   WRKA(6),=X'402020202120' SET EDIT MASK\n         ED    WRKA(6),$DOUBLE+5   UNPACK JOB NUMBER TO WORK AREA\n         MVC   OJOBNO+3(5),WRKA+1  MOVE JOB NUMBER TO MESSAGE\n         MVC   OJOBNO(3),=C'JOB'   ASSUME BATCH JOB\n         TM    JQEFLAG3,JQE3JOB    IS THIS A BATCH JOB\n         BZ    GOODJNO             YES, BRANCH\n         MVC   OJOBNO(3),=C'STC'   ASSUME STARTED TASK\n         TM    JQEFLAG3,JQE3STC    IS THIS A STARTED TASK\n         BO    GOODJNO             YES, BRANCH\n         MVC   OJOBNO(3),=C'TSU'   ASSUME TSO LOGON\n         TM    JQEFLAG3,JQE3TSU    IS THIS A TSO LOGON\n         BO    GOODJNO             YES, BRANCH\n         MVC   OJOBNO(3),=C'XMT'   ASSUME TRANSMITTER\nGOODJNO  DS    0H\n***********************************************************************\n***********************************************************************\n*        CHECK THE DESTINATION FOR OUR VALUES                         *\n***********************************************************************\n         CLC   JOEROUT,LOWROUT     SEE IF LT OUR LOWER ROUTE CODE\n         BL    WORKJOES            NO, BRANCH\n         CLC   JOEROUT,HIGHROUT    SEE IF GT OUR HIGHER ROUTE CODE\n         BH    WORKJOES            YES, BRANCH\n***********************************************************************\n*        CHECK THE SYSOUT CLASS FOR OUR VALUE                         *\n***********************************************************************\nCKCLASS  CLI   OUTCLASS,C'*'       DO WE WANT ALL SYSOUT CLASSES?\n         BE    GOODCLAS            YES, BRANCH\n         SLR   R1,R1               CLEAR REG FOR IC\n         IC    R1,NUMCLASS         LOAD NUMBER OF OUTPUT CLASSES\n         LA    R15,OUTCLASS        LOAD ADDRESS OF CLASS TABLE\nCKCLASS1 CLC   JOECURCL,0(R15)     IS THIS THE CORRECT SYSOUT CLASS\n         BE    GOODCLAS            YES, BRANCH\n         LA    R15,1(,R15)         INCREMENT TO NEXT CLASS ENTRY\n         BCT   R1,CKCLASS1         LOOP\n         B     WORKJOES            CLASS MISMATCH, BYPASS THIS JOE\n***********************************************************************\n*        CHECK THE JOB NUMBER FOR OUR VALUES                          *\n***********************************************************************\nGOODCLAS CLI   JTYPE,C'*'          WANT ALL JOBS?\n         BE    GOODJOB             YES, BRANCH\nCKBATCH  CLI   JTYPE,C'J'          WANT BATCH JOBS?\n         BNE   CKSTC               NO, BRANCH\n         TM    JQEFLAG3,JQE3JOB    IS THIS A BATCH JOB\n         BZ    GOODTYPE            YES, BRANCH\n         B     WORKJOES            NO, IGNORE THIS JOE\nCKSTC    CLI   JTYPE,C'S'          WANT STARTED TASKS?\n         BNE   CKTSU               NO, BRANCH\n         TM    JQEFLAG3,JQE3STC    IS THIS A STARTED TASK\n         BO    GOODTYPE            YES, BRANCH\n         B     WORKJOES            NO, IGNORE THIS JOE\nCKTSU    CLI   JTYPE,C'T'          WANT TSO USERS?\n         BNE   WORKJOES            NO, UNKNOWN REQUEST, GET OUT\n         TM    JQEFLAG3,JQE3TSU    IS THIS A TSO USER\n         BNO   WORKJOES            NO, IGNORE THIS JOE\nGOODTYPE CLC   JQEJOBNO,LOWJOB     SEE IF LT OUR LOWER JOB NUMBER\n         BL    WORKJOES            NO, IGNORE THIS JOE\n         CLC   JQEJOBNO,HIGHJOB    SEE IF GT OUR HIGHER JOB NUMBER\n         BH    WORKJOES            YES, IGNORE THIS JOE\n***********************************************************************\n*        CHECK THE OUTPUT LINE LIMIT SPECIFICATION                    *\n***********************************************************************\nGOODJOB  CLC   JOERECCT,LOWLIM     CHECK ON LOW LIMIT\n         BL    WORKJOES            LESS THAN OUR LOW, IGNORE THIS JOE\n         CLC   JOERECCT,HIGHLIM    CHECK ON HIGH LIMIT\n         BH    WORKJOES            GREATER THAN OUR HIGH, IGNORE IT\n***********************************************************************\n*        CHECK THE HELD OUTPUT REQUESTED INDICATOR                    *\n***********************************************************************\nGOODLIM  CLI   OUTHOLD,C'*'        DO WE WANT ALL OUTPUT?\n         BE    GOODJOE             YES, BRANCH\n         TM    JQEFLAG1,JQE1HLDA+JQE1HLD1 IS THIS JOB HELD\n         BNZ   GOODJOE             YES, SELECT THIS JOE\n         TM    JOEFLAG2,JOE2SLEC   IS THIS JOE SELECTABLE\n         BZ    WORKJOES            NO, IGNORE THIS JOE\n***********************************************************************\n*        SET THE BUSY INDICATOR IN THE MESSAGE                        *\n***********************************************************************\nGOODJOE  DS    0H\n         MVI   OBUSYIND,C' '       BLANK THE BUSY INDICATOR\n         TM    JOEFLAG1,JOE1BUSY   SEE IF BEING PRINTED/PUNCHED\n         BZ    NOTBUSY             NO, BRANCH\n         MVI   OBUSYIND,C'*'       SET THE BUSY INDICATOR\nNOTBUSY  DS    0H\n***********************************************************************\n*        MOVE THE SYSOUT CLASS TO THE MESSAGE                         *\n***********************************************************************\n         MVC   OCLASS,JOECURCL     MOVE SYSOUT CLASS TO MESSAGE\n***********************************************************************\n*        SEE IF OPERATOR HOLD                                         *\n***********************************************************************\n         MVI   OHOLDIND,C' '       RESET HOLD INDICATOR\n         TM    JQEFLAG1,JQE1HLDA+JQE1HLD1 IS THIS JOB HELD\n         BZ    CKHOLD1             NO, BRANCH\n         MVI   OHOLDIND,C'H'       SET HOLD INDICATOR\nCKHOLD1  DS    0H\n***********************************************************************\n*        SEE IF NON-SELECTABLE                                        *\n***********************************************************************\n         TM    JOEFLAG2,JOE2SLEC   IS THIS JOE SELECTABLE\n         BZ    CKHOLD2             YES, BRANCH\n         MVI   OHOLDIND,C'N'       SET NON-SELECTABLE INDICATOR\nCKHOLD2  DS    0H\n***********************************************************************\n*        SET THE DESTINATION VALUE IN THE MESSAGE                     *\n*                                                                     *\n*        ONLY ROOM FOR A SIX DIGIT DESTINATION NAME CONSISTING OF     *\n*        NODE NUMBER AND REMOTE NUMBER HAS BEEN LEFT IN THE OUTPUT    *\n*        AREA.  IF THE LENGTH OF THE NODE NUMBER PLUS THE REMOTE      *\n*        NUMBER EXCEEDS 4 DIGITS, THE DESTINATION NAME WILL           *\n*        OVERRUN THE NEXT FIELD.  THE MAXIMUM LENGTH DESTINATION      *\n*        WHICH CAN BE CREATED IS 9 DIGITS.  WE DON'T HAVE THE         *\n*        PROBLEM, BUT I KNOW SOME OF YOU DO.                          *\n*                                                                     *\n***********************************************************************\nCNVDEST  LA    R1,COMEWORK         POINT TO OUTPUT AREA\n         MVC   0(12,R1),=CL12'R'   ASSUME ' RXXXX      '\n         SLR   R0,R0               CLEAR REG FOR ICM\n         CLC   $OWNNODE,JOEROUT    IS THIS OUR NODE\n         BE    CNVDEST1            YES, NO NODE NUMBERS\n         MVI   0(R1),C'N'          ASSUME NODE SPECIFICATION\n         ICM   R0,B'0011',JOEROUT  LOAD NODE NUMBER\n         BNZ   CNVDEST2            NODE NUMBER NOT ZERO, CONVERT IT\n         MVI   0(R1),C'U'          ELSE MUST BE SPECIAL UNIT\nCNVDEST1 ICM   R0,B'0011',JOEROUT+2 LOAD REMOTE NUMBER\n         BNZ   CNVDEST2            REMOTE NUMBER NOT ZERO, CONVERT IT\n         MVC   0(5,R1),=C'LOCAL'   ZERO, SET TO LOCAL\n         B     CNVDEST6            AND GET OUT\n         SPACE 1\nCNVDEST2 CVD   R0,$DOUBLE          CONVERT NODE/RMT NUMBER TO PACKED\n         UNPK  1(5,R1),$DOUBLE     UNPACK NODE/RMT NUMBER\n         OI    5(R1),X'F0'         MAKE NODE/RMT NUMBER PRINTABLE\nCNVDEST3 CLI   1(R1),C'0'          IS HIGH BYTE ZERO\n         BNE   CNVDEST4            NO, GO SEE IF DONE\n         MVC   1(5,R1),2(R1)       SHIFT OFF HIGH ORDER ZERO BYTE\n         B     CNVDEST3            LOOP UNTIL LEADING ZEROS GONE\nCNVDEST4 CLI   0(R1),C'N'          SEE IF NODE SPECIFIED\n         BNE   CNVDEST6            NO, DONE\n         ICM   R0,B'0011',JOEROUT+2 LOAD REMOTE NUMBER\n         BZ    CNVDEST6            ZERO, EXIT\nCNVDEST5 LA    R1,1(,R1)           INCREMENT TO NEXT CHARACTER\n         CLI   0(R1),C' '          END OF NODE NUMBER?\n         BNE   CNVDEST5            NO, CONTINUE\n         MVI   0(R1),C'R'          SETUP FOR REMOTE NUMBER\n         B     CNVDEST2            GO CONVERT REMOTE NUMBER\n         SPACE 1\nCNVDEST6 MVC   ODEST,COMEWORK      MOVE CONVERTED DEST TO MESSAGE\n         EJECT\n***********************************************************************\n*        SET THE OUTPUT LINE OR PAGE COUNT IN THE MESSAGE             *\n***********************************************************************\nSETCNT   ICM   R1,15,JOEPGCT       SEE IF PAGE COUNT EXISTS\n         BZ    SETCNT2             NO, BRANCH\n         CVD   R1,$DOUBLE          CONVERT TO PACKED\n         MVC   WRKA,=X'40202020202020202120' SET EDIT MASK\n         ED    WRKA,$DOUBLE+3      EDIT SYSOUT RECORD COUNT TO AREA\n         MVC   OTYP,=C'PGS'        SET FOR PAGE COUNT\n         MVC   OQTY,WRKA+3         MOVE SYSOUT PAGE COUNT TO MESSAGE\n         CLI   WRKA+2,C' '         SEE IF LOST ANYTHING\n         BE    SETCNT3             NO, BRANCH\n         MVC   OQTY,=C'*******'    SET OVERFLOW INDICATION\n         B     SETCNT3             GET OUT\nSETCNT2  L     R1,JOERECCT         LOAD THE SYSOUT RECORD COUNT\n         CVD   R1,$DOUBLE          CONVERT TO PACKED\n         MVC   WRKA,=X'40202020202020202120' SET EDIT MASK\n         ED    WRKA,$DOUBLE+3      EDIT SYSOUT RECORD COUNT TO AREA\n         MVC   OTYP,=C'LNS'        SET FOR LINE COUNT\n         MVC   OQTY,WRKA+3         MOVE SYSOUT LINE COUNT TO MESSAGE\n         CLI   WRKA+2,C' '         SEE IF LOST ANYTHING\n         BE    SETCNT3             NO, BRANCH\n         MVC   OQTY,=C'*******'    SET OVERFLOW INDICATION\nSETCNT3  DS    0H\n***********************************************************************\n*                                                                     *\n*        WRITE THE MESSAGE FOR THIS JOE                               *\n*                                                                     *\n***********************************************************************\n         MVC   COMMAND+17(38),MSG1 MOVE MESSAGE TO COMWRK BUFFER\n         LA    R0,37+18            LOAD LENGTH OF FIRST MESSAGE\n         $CWTO L=(R0),MSGID=900,JOB=YES  DISPLAY MESSAGE\n         CLI   FORMAT,C'S'         IS THIS THE SHORT FORM\n         BE    SETFND              YES, BRANCH\n         MVC   COMMAND+17(38),MSG2 MOVE MESSAGE TO COMWRK BUFFER\n         LA    R0,37+18            LOAD LENGTH OF SECOND MESSAGE\n         $CWTO L=(R0),MSGID=900,JOB=YES  DISPLAY MESSAGE\nSETFND   OI    MISCSW,MATCH        TURN ON MATCH FOUND SWITCH\n         B     WORKJOES            GO GET ANOTHER WORK JOE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        END OF ALL JOES.  IF NO MESSAGES WERE ISSUED, ISSUE          *\n*        A MESSAGE THAT NO OUTPUT WAS QUEUED.                         *\n*                                                                     *\n***********************************************************************\nENDJOES  TM    MISCSW,MATCH        WAS A MATCH FOUND\n         BZ    NOUTPUT             NO, BRANCH\n         B     EXIT8               GET OUT\nNOUTPUT  $CWTO MSG='NO OUTPUT QUEUED',MSGID=919  ISSUE MESSAGE\n         B     EXIT8               GET OUT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        INVALID $LF OPERAND                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nBADOPRND L     R1,0(0,R5)          POINT TO INVALID OPERAND\n         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG\n         MVC   COMMAND+9(16),=C' INVALID OPERAND' SET ERROR MSG\n         LA    R0,25               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=950    WRITE ERROR MESSAGE\n         B     EXIT8               GET OUT\n         EJECT\n*****************************************************************\n*                                                               *\n*        SUBROUTINE TO VERIFY CONSOLE/AREA                      *\n*                                                               *\n*****************************************************************\n         SPACE 1\nMSGVCCA  TM    FBLFLG,FBLFLGR      SEE IF REMOTE SYSTEM UCM\n         BOR   R9                  YES, UCM AND AREA ARE OK\n         L     R2,$COMEXTN         POINT TO CONSOLE WORK AREA\n         USING CWA,R2              SET ADDRESSABILITY TO CWA\n         MVC   XASCID(1),COMUCM    SET UCM ID\n         MVC   XASDID(1),COMUCMA   SET AREA ID\n         CLI   XASDID,0            SEE IF AREA ID SPECIFIED\n         BNZ   MSGSSAOP            YES, BRANCH\n         MVI   XASDID,C'Z'         NO,  FORCE AREA Z\nMSGSSAOP MVC   XAU(1),COMUCM       TELL OS SOURCE IS SAME AS OUTPUT\n         MVI   XAN,X'22'           SET ID FOR VERIFIER\n         MODESET EXTKEY=ZERO       GET KEY 0\n         L     R15,CWA7603D        POINT TO OS VERIFICATION ROUTINE\n         $AMODE 24,PUSHR=0,R=R14   GO TO AMODE 24\n         BALR  R14,R15             ENTER IT\n         $AMODE POPR=0,R=R14       RETURN TO ORIGINAL AMODE\n         MODESET EXTKEY=HASP       RETURN TO KEY 1\n         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR\n         BNHR  R9                  NO, RETURN TO CALLER\n         SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,B'0011',COMUCM   PICK UP UCM AND AREA ID\n         MVI   COMUCMA,0           FORCE NO DISPLAY AREA\n         CH    R15,=H'12'          SEE IF CONSOLE DOWN\n         BNE   *+16                NO, DO NOT SET LOGICAL CONSOLE\n         MVC   COMFLAG(4),MOWTOL   DESTROY APPARENT SOURCE INFO\n         MVC   COMOUT,MOWTOL+(COMOUT-COMFLAG) OMITTING CNTL FIELD\n         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND\n         MVC   COMMAND(MBVINVL),MBVINV SET ERROR MESSAGE TEXT\n         STC   R3,MBVINVA          SET AREA\n         SRL   R3,8                ALIGN CONSOLE ID\n         CVD   R3,$DOUBLE          CONVERT TO PACKED\n         MVC   WRKA(4),=X'F0212020' SET EDIT MASK\n         ED    WRKA(4),$DOUBLE+6   EDIT CONSOLE ID TO AREA\n         MVC   MBVINVC,WRKA+2      MOVE CONSOLE ID TO MESSAGE\n         MVC   COMMAND+MBVINVL(8),COMACEID MOVE IDENTIFIER\n         $CWTO L=MBVINVL,MSGID=999 WRITE ERROR MESSAGE TO CONSOLE\n         B     EXIT8               GET OUT\n         DROP  R2                  DROP ADDRESSABILITY TO CWA\n         EJECT\n*****************************************************************\n*                                                               *\n*       R E D I R E C T   R O U T I N E   C O N S T A N T S     *\n*                                                               *\n*****************************************************************\n         SPACE 1\nMOWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX\nMBVINV   DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '\nMBVINVL  EQU   *-MBVINV\nMBVINVC  EQU   COMMAND+MBVINVL-16,2\nMBVINVA  EQU   MBVINVC+2,1\nFBLFLG   EQU   COMEWORK+2          FLAG BYTE\nCOMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER\nFBLFLGR  EQU   1                   UCM COMMAND FROM REMOTE SYSTEM\nFBLFLGC  EQU   2                   CONSOLE HAS BEEN SPECIFIED\nFBLFLGA  EQU   4                   AREA HAS BEEN SPECIFIED\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\nEXIT0    DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nEXIT8    DS    0H\n         $FREEBUF (R8)             FREE THE WORK AREA\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "J005$QJ": {"ttr": 10497, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 $DJ COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED TO PROCESS THE $DJ        *\n*        COMMAND WHEN ENTERED.  THIS COMMAND IS IMPLEMENTED AS        *\n*        A TYPE 5 EXIT TO JES2, AND AS SUCH MUST INTERCEPT ONLY       *\n*        THE $DJ COMMAND WHEN ENCOUNTERED.  THE IBM $DJ COMMAND       *\n*        CAN BE EXECUTED BY EXECUTING THE $QJ COMMAND.                *\n*                                                                     *\n*        NOTE THAT AN EXIT 255 ROUTINE WILL BE CALLED TO PERFORM      *\n*        THE ACTUAL DISPLAY OF THE REQUESTED JOBS.  THIS EXIT         *\n*        WILL PROCESS THE COMMAND, PERFORM SOME PRELIMINARY           *\n*        SELECTION PROCESSING, AND CALL THE EXIT WITH AN              *\n*        APPROPRIATE PARM LIST.  THE PARM LIST IS MAPPED WITH         *\n*        A USER MACRO $FCSFMTP.                                       *\n*                                                                     *\n*        THE $DJ COMMAND HAS THE FOLLOWING SYNTAX:                    *\n*                                                                     *\n*        $D                                                           *\n*             'JOBNAME'                                               *\n*             'JOBNAME                                                *\n*             'JOBNAME*                                               *\n*             JN-NN                                                   *\n*             SN-NN                                                   *\n*             TN-NN                                                   *\n*                        SPOOL                                        *\n*                        OWNERID                                      *\n*                        RESOURCE                                     *\n*                                                                     *\n*        WHERE:                                                       *\n*                                                                     *\n*        'JOBNAME'     - LIST JOB INFORMATION FOR THIS JOBNAME        *\n*                        WITHIN QUOTES                                *\n*        'JOBNAME      - LIST JOB INFORMATION FOR THIS JOBNAME        *\n*                        WITHIN UNPAIRED QUOTES                       *\n*        'JOBNAME*     - LIST JOB INFORMATION FOR ALL JOBS            *\n*                        BEGINNING WITH THESE CHARACTERS              *\n*        JN-NN         - LIST JOB INFORMATION FOR THE SPECIFIED       *\n*                        BATCH JOB(S)                                 *\n*        SN-NN         - LIST JOB INFORMATION FOR THE SPECIFIED       *\n*                        STARTED TASK(S)                              *\n*        TN-NN         - LIST JOB INFORMATION FOR THE SPECIFIED       *\n*                        TSO USER(S)                                  *\n*        SPOOL         - DISPLAY THE SPOOL VOLUMES USED BY EACH       *\n*                        OF THE REQUESTED JOB(S)                      *\n*        OWNERID       - DISPLAY THE OWNERID OF EACH OF THE           *\n*                        REQUESTED JOB(S)                             *\n*        RESOURCE      - DISPLAY THE ESOTERIC RESOURCES ATTACHED      *\n*                        TO EACH OF THE REQUESTED JOB(S)              *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *\n*                                                                     *\n*        1)  THE HASP908 MESSAGE WILL BE ISSUED FOR EACH JOB          *\n*            WHICH IS DISPLAYED.                                      *\n*                                                                     *\n*        $HASP908 JOBNAME  EXECUTING C PRIO XX SSSS                   *\n*                                                                     *\n*        $HASP908 JOBNAME  ON PRINTRXX PRIO XX SSSS                   *\n*                                                                     *\n*        $HASP908 JOBNAME  WAIT EXEC X PRIO XX SSSS                   *\n*                                                                     *\n*        2)  THE HASP900 MESSAGE WILL BE ISSUED WHEN NONE             *\n*            OF THE REQUESTED JOBS CANNOT BE FOUND.                   *\n*                                                                     *\n*        $HASP900 JOB(S) NOT FOUND                                    *\n*                                                                     *\n*        3)  THE HASP999 MESSAGE WILL BE ISSUED FOR ALL               *\n*            ERRORS.                                                  *\n*                                                                     *\n*        $HASP999 XXXXXXXXX INVALID OPERAND                           *\n*                                                                     *\n*        THE JOBNAME/JOB NUMBER CONTAINS INVALID SYNTAX.              *\n*                                                                     *\n*        $HASP999 LIST INCOMPLETE                                     *\n*                                                                     *\n*        DURING WTO PROCESSING A BUFFER SHORTAGE WAS DETECTED, SO     *\n*        $DJ PROCESSING WILL BE TERMINATED TO PREVENT FURTHER         *\n*        BUFFER SHORTAGES.                                            *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J 0 0 5 $ D J            *\n*                                                                     *\n*        01)  $AMODE       SYS1.HASPSRC                               *\n*        02)  $BUFFER      SYS1.HASPSRC                               *\n*        03)  $CAT         SYS1.HASPSRC                               *\n*        04)  $CMB         SYS1.HASPSRC                               *\n*        05)  $COMWORK     SYS1.HASPSRC                               *\n*        06)  $CWA         SYS1.HASPSRC                               *\n*        07)  $CWTO        SYS1.HASPSRC                               *\n*        08)  $DAS         SYS1.HASPSRC                               *\n*        09)  $DCT         SYS1.HASPSRC                               *\n*        10)  $ENTRY       SYS1.HASPSRC                               *\n*        11)  $EXIT        SYS1.HASPSRC                               *\n*        12)  $EXITPL      SYS1.HASPSRC                               *\n*        13)  $FCSFMTP     SYS1.HASPSRC (USER)                        *\n*        14)  $FREEBUF     SYS1.HASPSRC                               *\n*        15)  $GETBUF      SYS1.HASPSRC                               *\n*        16)  $HASPEQU     SYS1.HASPSRC                               *\n*        17)  $HASPGBL     SYS1.HASPSRC                               *\n*        18)  $HCT         SYS1.HASPSRC                               *\n*        19)  $IOT         SYS1.HASPSRC                               *\n*        20)  $JCT         SYS1.HASPSRC                               *\n*        21)  $JOE         SYS1.HASPSRC                               *\n*        22)  $JQE         SYS1.HASPSRC                               *\n*        23)  $LCK         SYS1.HASPSRC                               *\n*        24)  $MIT         SYS1.HASPSRC                               *\n*        25)  $MODEND      SYS1.HASPSRC                               *\n*        26)  $MODULE      SYS1.HASPSRC                               *\n*        27)  $PADDR       SYS1.HASPSRC                               *\n*        28)  $PCE         SYS1.HASPSRC                               *\n*        29)  $QLOC        SYS1.HASPSRC                               *\n*        20)  $QSE         SYS1.HASPSRC                               *\n*        31)  $RETURN      SYS1.HASPSRC                               *\n*        32)  $SAVE        SYS1.HASPSRC                               *\n*        33)  $TAB         SYS1.HASPSRC                               *\n*        34)  $XIT         SYS1.HASPSRC                               *\n*        35)  IAZRESPA     SYS1.AMODGEN                               *\n*        36)  IFGRPL       SYS1.MACLIB                                *\n*        37)  MODESET      SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       4K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ005$QJ  $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 $DJ COMMAND PROCESSOR',                     X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $CMB,               GENERATE HASP CMB DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $CWA,               GENERATE HASP CWA DSECT             X\n               $DAS,               GENERATE HASP DAS DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $EXITPL,            GENERATE HASP EXITPL DSECT          X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $IOT,               GENERATE HASP IOT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $LCK,               GENERATE HASP LCK DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $PDDB,              GENERATE HASP PDDB DSECT            X\n               $QSE,               GENERATE HASP QSE DSECT             X\n               $TAB,               GENERATE HASP TAB DSECT             X\n               $XIT,               GENERATE HASP XIT DSECT             X\n               RESPA,              GENERATE MVS  RESPA DSECT           X\n               RPL                 GENERATE MVS  IFGRPL DSECT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREAS                                           *\n*                                                                     *\n***********************************************************************\n$DJWORK  DSECT\n         DS    CL(BUFSTART-BFPDSECT) **** RESERVED BY JES2 ****\n         $FCSFMTP ,                MAP THE EXIT 255 PARM LIST\nDOUBLE   DS    D                   DOUBLE WORD WORK AREA\nDBL      DS    D                   DOUBLE WORD WORK AREA\nROUTCDE  DS    F                   DESTINATION CODE FOR SETDEST ROUTINE\nSAVEBAS  DS    CL18                MSG SAVE AREA FOR JOB NBR AND NAME\nLTEXT    DS    H                   CURRENT LENGTH OF MESSAGE AREA\nRC       DS    H                   $CWTO RETURN CODE\nLOWJOB   DS    H                   LOW RANGE JOB REQUESTED\nHIGHJOB  DS    H                   HIGH RANGE JOB REQUESTED\nJOBNAME  DS    CL8                 JOBNAME REQUESTED\nJOBNAMEL DS    H                   LENGTH OF JOBNAME REQUESTED\nMISCSW1  DS    X                   MISCELLANEOUS SWITCHES\nNAME     EQU   X'80'               A JOBNAME WAS ENTERED - NOT NUMBER\nFOUND    EQU   X'40'               A JOB WAS FOUND FOR PROCESSING\nSPOOLS   EQU   X'20'               SPOOL VOLUME INFORMATION REQUESTED\nVOLHEAD  EQU   X'10'               SPOOL VOLUME HEADER WRITTEN IND\nMISCSW2  DS    X                   MISCELLANEOUS SWITCHES\nJOEFND   EQU   X'80'               AN ACTIVE JOE FOUND FOR THIS JOB\nLASTYPE  DS    C                   LAST JOB TYPE PROCESSED\nDEVNO    DS    H                   NUMBER OF ACTIVE DEVICES\nLASTRNG  DS    F                   ADDRESS OF LAST RANGE ENTRY\nRANGES   DS    H                   NUMBER OF JOB RANGES ENTERED\n***********************************************************************\n*                                                                     *\n*       THE JOB RANGE ENTRY TABLE HAS A FORMAT AS FOLLOWS:            *\n*                                                                     *\n*       1 BYTE   JOB TYPE (J/S/T)                                     *\n*       1 BYTE   FILLER                                               *\n*       HALFWORD LOW  JOB NUMBER IN RANGE                             *\n*       HALFWORD HIGH JOB NUMBER IN RANGE                             *\n*                                                                     *\n***********************************************************************\nRANGETBL DS    51CL6               ROOM FOR 50 RANGES + END OF LIST\nSAVEAFF  DS    16F                 REGISTER SAVE FOR SETAFF  ROUTINE\nSAVESPL  DS    16F                 REGISTER SAVE FOR SETSPL  ROUTINE\nSAVEBLD  DS    16F                 REGISTER SAVE FOR BLDACT  ROUTINE\nSAVEPUT  DS    16F                 REGISTER SAVE FOR BLDPUT  ROUTINE\nDEVTBL   DS    50XL4               ACTIVE DEVICE TABLE\n         SPACE 3\nJ005$DJ  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         TITLE 'JES2 $DJ COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE005$QJ  $ENTRY BASE=(R12)\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD FIRST BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       - ADDRESS OF THE CURRENT OPERAND                    *\n*        R6       - INCREMENT VALUE OF 4                              *\n*        R7       - ADDRESS OF THE LAST OPERAND                       *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CONVERT $QJ, $QS, $QT, AND $Q\" COMMANDS TO $D. AND           *\n*        PASS IT ALONG TO THE IBM COMMAND PROCESSOR.                  *\n*                                                                     *\n***********************************************************************\n         CLI   COMVERB,C'Q'        SEE IF THIS IS THE $DJ COMMAND\n         BNE   CKDISPL             NO, GO SEE IF DISPLAY COMMAND\n         CLI   COMVERB+1,C'J'      SEE IF $QJ\n         BE    MODIFY              YES, GO CHANGE TO $DJ\n         CLI   COMVERB+1,C'S'      SEE IF $QS\n         BE    MODIFY              YES, GO CHANGE TO $DS\n         CLI   COMVERB+1,C'T'      SEE IF $QS\n         BE    MODIFY              YES, GO CHANGE TO $DT\n         CLI   COMVERB+1,C''''     SEE IF $Q\"\n         BE    MODIFY              YES, GO CHANGE TO $DT\n         B     EXIT0               NO,  GET OUT\nMODIFY   MVI   COMVERB,C'D'        CHANGE TO DISPLAY COMMAND\n         B     EXIT0               GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SEE IF THIS IS A $DJ COMMAND                                 *\n*                                                                     *\n***********************************************************************\nCKDISPL  CLI   COMVERB,C'D'        SEE IF THIS IS THE $DJ COMMAND\n         BNE   EXIT0               NO, BRANCH TO COMMAND OK EXIT\n         CLC   COMVERB+1(8),=C'JOBCLASS' SEE IF DISPLAY JOBCLASS\n         BE    EXIT0               YES, BRANCH TO COMMAND OK EXIT\n         CLC   COMVERB+1(6),=C'JOBDEF' SEE IF DISPLAY JOBDEF\n         BE    EXIT0               YES, BRANCH TO COMMAND OK EXIT\n         CLC   COMVERB+1(7),=C'JOBPRTY' SEE IF DISPLAY JOBPRTY\n         BE    EXIT0               YES, BRANCH TO COMMAND OK EXIT\n         CLC   COMVERB+1(8),=C'SPOOLDEF' SEE IF DISPLAY SPOOLDEF\n         BE    EXIT0               YES, BRANCH TO COMMAND OK EXIT\n         CLC   COMVERB+1(6),=C'SMFDEF' SEE IF DISPLAY SMFDEF\n         BE    EXIT0               YES, BRANCH TO COMMAND OK EXIT\n         CLC   COMVERB+1(8),=C'STCCLASS' SEE IF DISPLAY STCCLASS\n         BE    EXIT0               YES, BRANCH TO COMMAND OK EXIT\n         CLC   COMVERB+1(5),=C'TPDEF' SEE IF DISPLAY TPDEF\n         BE    EXIT0               YES, BRANCH TO COMMAND OK EXIT\n         CLC   COMVERB+1(8),=C'TSUCLASS' SEE IF DISPLAY TSUCLASS\n         BE    EXIT0               YES, BRANCH TO COMMAND OK EXIT\n         CLC   COMVERB+1(5),=C'SPOOL' SEE IF DISPLAY SPOOL\n         BE    EXIT0               YES, BRANCH TO COMMAND OK EXIT\n         CLC   COMVERB+1(3),=C'SPL'   SEE IF DISPLAY SPOOL\n         BE    EXIT0               YES, BRANCH TO COMMAND OK EXIT\n         CLI   COMVERB+1,C'J'      SEE IF BATCH JOBS REQUESTED\n         BE    DJOK                YES, BRANCH\n         CLI   COMVERB+1,C'T'      SEE IF TSO USERS REQUESTED\n         BE    DJOK                YES, BRANCH\n         CLI   COMVERB+1,C'S'      SEE IF STARTED TASKS REQUESTED\n         BE    DJOK                YES, BRANCH\n         CLI   COMVERB+1,C''''     SEE IF JOB NAME ENTERED\n         BE    DJOK                YES, BRANCH\n         B     EXIT0               NO, LET JES TAKE CARE OF IT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GET A JES2 BUFFER FOR REENTRANCY AND                         *\n*        CLEAR THE COMMAND WORK AREA                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nDJOK     $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R8,R1               SAVE WORK AREA ADDRESS\n         USING $DJWORK,R8          SET ADDRESSABILITY TO WORK AREA\n         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA FOR EXIT 255\n         LR    R10,R1              SAVE WORK AREA ADDRESS FOR EXIT\n         LA    R14,$DJWORK+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS\n         LH    R15,$BUFSIZE        SET   'TO'   LENGTH\n         SLR   R0,R0               CLEAR 'FROM' ADDRESS\n         SLR   R1,R1               CLEAR 'FROM' LENGTH\n         MVCL  R14,R0              CLEAR THE BUFFER\n*****************************************************************\n*                                                               *\n*        INITIALIZE PARM LIST FOR EXIT 225 ROUTINE              *\n*                                                               *\n*****************************************************************\n         MVI   QBITS,QCNV+QXEQ+QOUT+QPPU+QXMT+QPUR ALL QUEUES\n         MVI   QBITS+1,QACT+QDEV ACTIVE AND DEVICE ACTIVITY\n         MVI   QMISC+L'SYSALL,SYSALL ALL SYSTEMS\n         MVI   QFILT1,0            NO SPECIAL FILTERING\n         MVI   QFILT2,0            NO SPECIAL FILTERING\n         MVI   QCLASS,0            ZERO THE XEQ/CNV CLASS\n         XC    OWNERID,OWNERID     NO OWNERID SELECTION\n*****************************************************************\n*                                                               *\n*        CHECK FOR AUTOMATIC REDIRECTION OF RESPONSES           *\n*                                                               *\n*****************************************************************\n         SPACE 1\n         TM    COMFLAG,CMBFLAGU    IS THIS A UCM\n         BZ    MSGGOOD             NO, SKIP REDIRECTION\n         TM    FBLFLG,FBLFLGC+FBLFLGR CONSOLE SET OR REMOTE SYSTEM\n         BNZ   MSGRPT              SKIP AUTOMATIC L=CCA\n         LA    R1,4                LOAD REDIRECT OFFSET FOR $DJ\n*                                  SAME AS FOR $DJ\n         BCTR  R1,0                REDUCE BY 1\n         SLL   R1,1                DOUBLE\n         SLR   R2,R2               ZERO REGISTER FOR IC\n         IC    R2,COMUCM           PICK UP CURRENT UCM ID\n         L     R14,$COMEXTN        POINT TO CONSOLE WORK AREA\n         USING CWA,R14             SET ADDRESSABILITY TO CWA\n         CH    R2,CWAOCON          SEE IF EXCEEDS MAXIMUM\n         BH    MSGRPT              YES, ERROR, NO AUTOMATIC REDIRECTION\n         MH    R2,CWALCON          MULTIPLY BY LENGTH OF EACH ENTRY\n         AR    R1,R2               COMBINE OFFSETS\n         LA    R1,CWARESP-CWACONL(R1) POINT TO CORRECT CWA ENTRY\n         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID\n         TM    FBLFLG,FBLFLGA      HAS AREA BEEN SET\n         BO    MSGRPT              YES, SKIP AUTOMATIC REDIRECTION\n         MVC   COMUCMA,CWACONA(R1) SET NEW AREA\n         DROP  R14                 DROP ADDRESSABILITY TO CWA\nMSGRPT   BAL   R4,MSGVCCA          VERIFY CCA (NO RETURN IF BAD)\n         CLI   COMUCMA,0           TEST FOR DISPLAY AREA\n         BZ    MSGGOOD             IF NOT, SKIP\n         MVI   COMLINET,X'80'      SET CONTROL LINE\n         $CWTO L=L'CMBMSG,MSGID=908 ECHO THE COMMAND\n         MVI   COMLINET,X'20'      SET DATA LINE\n***********************************************************************\n*                                                                     *\n*        EXTRACT THE JOB/TSU/STC RANGE FROM THE COMMAND BUFFER        *\n*                                                                     *\n***********************************************************************\nMSGGOOD  CLI   COMVERB+1,C''''     SEE IF JOBNAME ENTERED\n         BNE   SETRANGE            NO, BRANCH\nQQENT    OI    MISCSW1,NAME        SET NAME FLAG\n         MVC   LOWJOB,=H'1'        SET LOW JOB NUMBER TO 1\n         MVC   HIGHJOB,$NUMJBNO    SET HIGH JOB NUMBER\n         B     SETNAME             AND GO PROCESS NAME\n***********************************************************************\n*        SEARCH FOR END OF FIRST JOB NUMBER IN RANGE                  *\n***********************************************************************\nSETRANGE MVC   LASTYPE,COMVERB+1   SAVE LAST JOB TYPE\n         LA    R1,COMVERB+1        POINT TO START OF JOB NUMBER\n         LA    R4,RANGETBL         POINT TO JOB RANGE TABLE\nSETRNG01 LR    R14,R1              POINT TO OPERAND\n         LR    R2,R1               SAVE START OF OPERAND ADDRESS\n         SLR   R15,R15             SET LENGTH\n         CLI   0(R14),C'0'         SEE IF NUMERIC\n         BNL   SETRNG04            YES, MUST BE JOB NUMBER\n         CLC   0(3,R14),=C'JOB'    SEE IF JOB\n         BE    SETRNG03            YES, BRANCH\n         CLC   0(3,R14),=C'STC'    SEE IF STC\n         BE    SETRNG03            YES, BRANCH\n         CLC   0(3,R14),=C'TSU'    SEE IF TSO\n         BE    SETRNG03            YES, BRANCH\n         CLI   0(R14),C'J'         SEE IF JOB\n         BE    SETRNG02            YES, BRANCH\n         CLI   0(R14),C'S'         SEE IF STC\n         BE    SETRNG02            YES, BRANCH\n         CLI   0(R14),C'T'         SEE IF TSO\n         BNE   CKOPND1             NO, MUST BE A KEYWORD OPERAND\nSETRNG02 MVC   LASTYPE,0(R1)       SAVE JOB TYPE\n         CLI   1(R14),C'0'         SEE IF NEXT CHAR NUMERIC\n         BL    CKOPND1             NO, MUST BE A KEYWORD OPERAND\n         LA    R14,1(R14)          INCREMENT PAST JOB TYPE\n         LR    R2,R14              SAVE START OF OPERAND ADDRESS\n         B     SETRNG04            GO PROCESS NUMERIC PORTION\nSETRNG03 MVC   LASTYPE,0(R1)       SAVE JOB TYPE\n         CLI   3(R14),C'0'         SEE IF NEXT CHAR NUMERIC\n         BL    CKOPND1             NO, MUST BE A KEYWORD OPERAND\n         LA    R14,3(R14)          INCREMENT PAST JOB TYPE\n         LR    R2,R14              SAVE START OF OPERAND ADDRESS\nSETRNG04 CLI   0(R14),C' '         END OF OPERAND\n         BE    SETRNG05            YES, BRANCH\n         CLI   0(R14),C'-'         END OF OPERAND\n         BE    SETRNG05            YES, BRANCH\n         CLI   0(R14),C','         END OF OPERAND\n         BE    SETRNG05            YES, BRANCH\n         CLI   0(R14),C'0'         SEE IF NUMERIC\n         BL    BADOPRND            NO, ERROR\n         CLI   0(R14),C'9'         SEE IF NUMERIC\n         BH    BADOPRND            NO, ERROR\n         LA    R15,1(R15)          ADD 1 TO LENGTH\n         LA    R14,1(R14)          INCREMENT TO NEXT CHAR OF JOB NBR\n         B     SETRNG04            LOOP\nSETRNG05 LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'6'           TEST LENGTH\n         BH    BADOPRND            GREATER THAN 6, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,PKJOBNO         PACK JOB NUMBER\n         CVB   R15,DOUBLE          CONVERT TO BINARY\n         LTR   R15,R15             SEE IF JOB NUMBER IS ZERO\n         BZ    BADOPRND            YES, ERROR\n         CH    R15,=H'9999'        SEE IF EXCEEDS MAXIMUM JOB NUMBER\n         BH    BADOPRND            YES, ERROR\n         STH   R15,LOWJOB          SAVE AS LOW JOB NUMBER\n         STH   R15,HIGHJOB         AND AS HIGH JOB NUMBER\n         CLI   0(R14),C'-'         SEE IF JOB RANGE REQUESTED\n         BNE   SETRNG08            NO, GO SEE IF OTHER JOB RANGES\n         LA    R14,1(R14)          INCREMENT PAST '-'\n         LR    R2,R14              SAVE START OF OPERAND ADDRESS\n         XR    R15,R15             SET LENGTH\n***********************************************************************\n*        SEARCH FOR END OF SECOND JOB NUMBER IN RANGE                 *\n***********************************************************************\nSETRNG06 CLI   0(R14),C' '         END OF OPERAND\n         BE    SETRNG07            YES, BRANCH\n         CLI   0(R14),C','         END OF OPERAND\n         BE    SETRNG07            YES, BRANCH\n         CLI   0(R14),C'0'         SEE IF NUMERIC\n         BL    BADOPRND            NO, ERROR\n         CLI   0(R14),C'9'         SEE IF NUMERIC\n         BH    BADOPRND            NO, ERROR\n         LA    R15,1(R15)          ADD 1 TO LENGTH\n         LA    R14,1(R14)          INCREMENT TO NEXT CHAR OF JOB NBR\n         B     SETRNG06            LOOP\nSETRNG07 LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'6'           TEST LENGTH\n         BH    BADOPRND            GREATER THAN 6, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,PKJOBNO         PACK JOB NUMBER\n         CVB   R15,DOUBLE          CONVERT TO BINARY\n         LTR   R15,R15             SEE IF JOB NUMBER IS ZERO\n         BZ    BADOPRND            YES, ERROR\n         CH    R15,=H'9999'        SEE IF EXCEEDS MAXIMUM JOB NUMBER\n         BH    BADOPRND            YES, ERROR\n         STH   R15,HIGHJOB         AND AS HIGH JOB NUMBER\nSETRNG08 LH    R15,RANGES          LOAD NUMBER OF RANGES\n         LA    R15,1(R15)          ADD 1 TO NUMBER OF RANGES\n         CH    R15,=H'50'          SEE IF MAX EXCEEDED\n         BNH   SETRNG09            NO, CONTINUE\n         MVC   COMMAND(L'MSG1),MSG1 SET MAXIMUM RANGE EXCEEDED MSG\n         LA    R0,L'MSG1           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\nSETRNG09 STH   R15,RANGES          SAVE NEW NUMBER OF RANGES\n         MVC   0(1,R4),LASTYPE     SET JOB TYPE IN TABLE\n         MVC   2(2,R4),LOWJOB      SET LOW JOB NUMBER IN TABLE\n         MVC   4(2,R4),HIGHJOB     SET HIGH JOB NUMBER IN TABLE\n         LA    R4,6(R4)            INCREMENT TO NEXT RANGE TABLE ENTRY\n         MVI   0(R4),X'FF'         FLAG END OF LIST\n         BXH   R5,R6,JQESCAN       IF NO MORE EXIT\n         L     R1,0(R5)            POINT TO OPERAND\n         B     SETRNG01            PROCESS THIS OPERAND\nPKJOBNO  PACK  DOUBLE,0(0,R2)      *** EXECUTE ONLY ***\n         SPACE 3\n***********************************************************************\n*        PROCESS JOB NAME                                             *\n***********************************************************************\nSETNAME  LA    R14,COMVERB+2       POINT TO START OF JOB NAME\n         LA    R1,COMVERB+2        POINT TO OPERAND\n         LR    R2,R1               SAVE START OF OPERAND ADDRESS\n         XR    R15,R15             SET LENGTH TO ZERO\nSETNAME1 CLI   0(R14),C' '         END OF JOBNAME\n         BE    SETNAME2            YES, BRANCH\n         CLI   0(R14),C','         END OF JOBNAME\n         BE    SETNAME2            YES, BRANCH\n         CLI   0(R14),C''''        END OF JOBNAME\n         BE    SETNAME2            YES, BRANCH\n         LA    R15,1(R15)          ADD 1 TO LENGTH COUNTER\n         LA    R14,1(R14)          INCREMENT TO NEXT CHAR OF JOBNAME\n         B     SETNAME1            LOOP\nSETNAME2 LTR   R15,R15             TEST NAME LENGTH\n         BZ    BADOPRND            ZERO, BAD OPERAND\n         CH    R15,=H'8'           SEE IF LENGTH GT 8\n         BH    BADOPRND            YES, BAD OPERAND\n         MVC   JOBNAME,BLANKS      BLANK THE JOB NAME\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,SAVEJOBN        SAVE JOB NAME\n         MVC   JOBNAMEL,=H'8'      SET JOB NAME LENGTH TO 8\n         LA    R14,COMVERB+2       POINT TO START OF JOB NAME\n         XR    R15,R15             SET LENGTH TO ZERO\n***********************************************************************\n*        SET LENGTH TO OTHER THAN 8 FOR GENERIC JOBNAME SEARCH        *\n***********************************************************************\nSETNAME3 CLI   0(R14),C'*'         GENERIC JOB NAME\n         BE    SETNAME4            YES, BRANCH\n         CLI   0(R14),C' '         END OF JOBNAME\n         BE    SETNAME5            YES, BRANCH\n         CLI   0(R14),C','         END OF JOBNAME\n         BE    SETNAME5            YES, BRANCH\n         CLI   0(R14),C''''        END OF JOBNAME\n         BE    SETNAME5            YES, BRANCH\n         LA    R15,1(R15)          ADD 1 TO LENGTH COUNTER\n         LA    R14,1(R14)          INCREMENT TO NEXT CHAR OF JOBNAME\n         B     SETNAME3            LOOP\nSETNAME4 LTR   R15,R15             TEST NAME LENGTH\n         BZ    BADOPRND            ZERO, BAD OPERAND\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         STH   R15,JOBNAMEL        SAVE JOB NAME LENGTH\nSETNAME5 B     CKOPND              GO CHECK FOR OPERANDS\nSAVEJOBN MVC   JOBNAME(0),0(R1)    *** EXECUTE ONLY ***\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXAMINE THE COMMAND OPERANDS                                 *\n*                                                                     *\n***********************************************************************\nCKOPND   BXH   R5,R6,JQESCAN       IF NO MORE EXIT\n         L     R1,0(R5)            POINT TO OPERAND\nCKOPND1  CLC   0(5,R1),=C'SPOOL'   SEE IF SPOOL VOLUME INFO REQUESTED\n         BE    DOSPOOLS            YES, BRANCH\nCKOPND2  CLC   0(5,R1),=C'OWNER'   SEE IF OWNERID INFO REQUESTED\n         BE    DOOWNER             YES, BRANCH\nCKOPND3  CLC   0(8,R1),=C'RESOURCE' SEE IF RESOURCE INFO REQUESTED\n         BE    DORES               YES, BRANCH\n         B     BADOPRND            UNKNOWN OPERAND, ERROR\n***********************************************************************\n*                                                                     *\n*        TURN ON THE SPOOL INFORMATION REQUESTED INDICATOR            *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nDOSPOOLS OI    QMISC+L'SPOOL,SPOOL SPOOL VOLUME INFORMATION REQUESTED\n         B     CKOPND              LOOP FOR NEXT OPERAND\n***********************************************************************\n*                                                                     *\n*        TURN ON THE OWNERID INFORMATION REQUESTED INDICATOR          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nDOOWNER  OI    QMISC+L'OWNER,OWNER OWNERID INFORMATION REQUESTED\n         B     CKOPND              LOOP FOR NEXT OPERAND\n***********************************************************************\n*                                                                     *\n*        TURN ON THE RESOURCE INFORMATION REQUESTED INDICATOR         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nDORES    OI    QMISC+L'RESOURCE,RESOURCE RESOURCE INFO REQUESTED\n         B     CKOPND              LOOP FOR NEXT OPERAND\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SCAN THE JOB QUEUE FOR THE JOB LIST                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nJQESCAN  TM    MISCSW1,NAME        SEE IF SEARCHING BY JOBNAME\n         BO    JQESCAN1            YES, BRANCH\n         LA    R1,RANGETBL         LOAD ADDRESS OF FIRST RANGE ENTRY\n         ST    R1,LASTRNG          SAVE ADDRESS OF THIS RANGE ENTRY\n         MVC   LASTYPE,0(R1)       SAVE JOB TYPE\n         MVC   LOWJOB,2(R1)        SAVE LOW JOB\n         MVC   HIGHJOB,4(R1)       SAVE HIGH JOB\nJQESCAN1 LH    R1,LOWJOB           LOAD JOB NUMBER\n         $QLOC (R1)                GET JQE FOR THIS JOB NUMBER\n         BZ    NEXTJQE             GET NEXT JQE IF NOT FOUND\n         LR    R9,R1               SAVE JQE ADDRESS\n         USING JQE,R9              SET ADDRESSABILITY TO JQE\n         TM    MISCSW1,NAME        SEE IF SEARCHING BY JOBNAME\n         BZ    CKJOBNO             NO, BRANCH\n         LH    R15,JOBNAMEL        LOAD JOB NAME LENGTH\n         EX    R15,CLCJNAME        SEE IF THIS IS OUR JOB\n         BE    JQEFND              YES, BRANCH\n         B     NEXTJQE             NO, BYPASS THIS JOB\nCLCJNAME CLC   JQEJNAME(0),JOBNAME *** EXECUTE ONLY ***\nCKJOBNO  TM    JQEFLAG3,JQE3JOB    IS THIS A BATCH JOB\n         BNZ   CKSTC               NO, SEE IF STARTED TASK\n         CLI   LASTYPE,C'J'        ARE WE LOOKING FOR A BATCH JOB\n         BE    JQEFND              YES, GO PROCESS IT\n         B     NEXTJQE             NO, GET NEXT JQE\nCKSTC    TM    JQEFLAG3,JQE3STC    IS THIS A STC\n         BNO   CKTSU               NO, SEE IF A TSO USER\n         CLI   LASTYPE,C'S'        ARE WE LOOKING FOR A STARTED TASK\n         BE    JQEFND              YES, GO PROCESS IT\n         B     NEXTJQE             NO, GET NEXT JQE\nCKTSU    CLI   LASTYPE,C'T'        ARE WE LOOKING FOR A TSO USER\n         BE    JQEFND              YES, GO PROCESS IT\nNEXTJQE  LH    R1,LOWJOB           LOAD PREVIOUS JOB NUMBER\n         LA    R1,1(R1)            ADD 1 TO JOB NUMBER\n         STH   R1,LOWJOB           SAVE NEW JOB NUMBER\n         CH    R1,HIGHJOB          SEE IF END OF RANGE\n         BNH   JQESCAN1            NO, LOOP\n         TM    MISCSW1,NAME        SEE IF SEARCHING BY JOBNAME\n         BO    NEXTJQE1            YES, END OF PROCESSING\n         L     R1,LASTRNG          LOAD ADDRESS OF LAST RANGE ENTRY\n         LA    R1,6(R1)            INCREMENT TO NEXT ENTRY\n         ST    R1,LASTRNG          AND SAVE ADDRESS OF THIS ENTRY\n         CLI   0(R1),X'FF'         SEE IF END OF RANGES\n         BE    NEXTJQE1            YES, END OF PROCESSING\n         MVC   LASTYPE,0(R1)       SAVE JOB TYPE\n         MVC   LOWJOB,2(R1)        SAVE LOW JOB\n         MVC   HIGHJOB,4(R1)       SAVE HIGH JOB\n         B     JQESCAN1            GO PROCESS THIS RANGE\nNEXTJQE1 TM    MISCSW1,FOUND       SEE IF ANY JOBS FOUND\n         BO    EXIT8               YES, GET OUT\n         MVC   COMMAND(L'MSG2),MSG2 SET NO JOBS FOUND MESSAGE\n         LA    R0,L'MSG2           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=900    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CALL EXIT 255 TO FORMAT THE JOB INFORMATION                  *\n*                                                                     *\n***********************************************************************\nJQEFND   OI    MISCSW1,FOUND       TURN ON JOB FOUND INDICATOR\n         LA    R1,QBITS            POINT TO EXIT PARM LIST\nEXIT255  $EXIT 255,ENVIRON=JES2,MAXRC=8 CALL FORMAT ROUTINE\n         CH    R15,=H'8'           TEST FOR CONSOLE BUFFER SHORTAGE\n         BNE   NEXTJQE             NO, CONTINUE\n         B     EXIT8               YES, GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*              SUBROUTINE TO VERIFY CONSOLE/AREA                      *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nMSGVCCA  TM    FBLFLG,FBLFLGR      SEE IF REMOTE SYSTEM UCM\n         BOR   R4                  YES, UCM AND AREA ARE OK\n         L     R2,$COMEXTN         POINT TO CONSOLE WORK AREA\n         USING CWA,R2              SET ADDRESSABILITY TO CWA\n         MVC   XASCID(1),COMUCM    SET UCM ID\n         MVC   XASDID(1),COMUCMA   SET AREA ID\n         CLI   XASDID,0            SEE IF AREA ID SPECIFIED\n         BNZ   MSGSSAOP            YES, BRANCH\n         MVI   XASDID,C'Z'         NO,  FORCE AREA Z\nMSGSSAOP MVC   XAU(1),COMUCM       TELL OS SOURCE IS SAME AS OUTPUT\n         MVI   XAN,X'22'           SET ID FOR VERIFIER\n         MODESET EXTKEY=ZERO       GET KEY 0\n         L     R15,CWA7603D        POINT TO OS VERIFICATION ROUTINE\n         $AMODE 24,PUSHR=0,R=R14   GO TO AMODE 24\n         BALR  R14,R15             ENTER IT\n         $AMODE POPR=0,R=R14       RETURN TO ORIGINAL AMODE\n         MODESET EXTKEY=HASP       RETURN TO KEY 1\n         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR\n         BNHR  R4                  NO, RETURN TO CALLER\n         SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,B'0011',COMUCM   PICK UP UCM AND AREA ID\n         MVI   COMUCMA,0           FORCE NO DISPLAY AREA\n         CH    R15,=H'12'          SEE IF CONSOLE DOWN\n         BNE   *+16                NO, DO NOT SET LOGICAL CONSOLE\n         MVC   COMFLAG(4),MOWTOL   DESTROY APPARENT SOURCE INFO\n         MVC   COMOUT,MOWTOL+(COMOUT-COMFLAG) OMITTING CNTL FIELD\n         $CWTO L=L'CMBMSG,MSGID=908 ECHO THE COMMAND\n         MVC   COMMAND(MBVINVL),MBVINV SET ERROR MESSAGE TEXT\n         STC   R3,MBVINVA          SET AREA\n         SRL   R3,8                ALIGN CONSOLE ID\n         CVD   R3,$DOUBLE          CONVERT TO PACKED\n         MVC   DBL(4),=X'F0212020' SET EDIT MASK\n         ED    DBL(4),$DOUBLE+6    EDIT CONSOLE ID TO AREA\n         MVC   MBVINVC,DBL+2       MOVE CONSOLE ID TO MESSAGE\n         MVC   COMMAND+MBVINVL(8),COMACEID MOVE IDENTIFIER\n         $CWTO L=MBVINVL,MSGID=999 WRITE ERROR MESSAGE TO CONSOLE\n         B     EXIT8               GET OUT\n         DROP  R2                  DROP ADDRESSABILITY TO CWA\n         EJECT\n**********************************************************************\n*                                                                    *\n*       R E D I R E C T   R O U T I N E   C O N S T A N T S          *\n*                                                                    *\n**********************************************************************\n         SPACE 1\nMOWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX\nMBVINV   DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '\nMBVINVL  EQU   *-MBVINV\nMBVINVC  EQU   COMMAND+MBVINVL-16,2\nMBVINVA  EQU   MBVINVC+2,1\nFBLFLG   EQU   COMEWORK+2          FLAG BYTE\nCOMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER\nFBLFLGR  EQU   1                   UCM COMMAND FROM REMOTE SYSTEM\nFBLFLGC  EQU   2                   CONSOLE HAS BEEN SPECIFIED\nFBLFLGA  EQU   4                   AREA HAS BEEN SPECIFIED\n         EJECT\n***********************************************************************\n*        CONSTANTS FOR $DJ                                            *\n***********************************************************************\n         SPACE 3\nBLANKS   DC    CL20' '             STRING OF 20 BLANKS\n         SPACE 3\nMSG1     DC    C'MORE THAN 50 JOBS OR RANGES SPECIFIED'\nMSG2     DC    CL16'JOB(S) NOT FOUND'\nMSG3     DC    C' INVALID OPERAND'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INVALID $DJ OPERAND                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nBADOPRND L     R1,0(0,R5)          POINT TO INVALID OPERAND\n         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG\n         MVC   COMMAND+9(L'MSG3),MSG3 SET ERROR MESSAGE\n         LA    R0,L'MSG3+9         SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\nEXIT0    LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nEXIT8    $FREEBUF (R8)             FREE THE WORK AREA\n         $FREEBUF (R10)            FREE THE WORK AREA\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "J005$QN": {"ttr": 10756, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 $DN COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED PROCESS THE $DN COMMAND   *\n*        WHEN ENTERED.  THIS COMMAND IS IMPLEMENTED AS A TYPE 5       *\n*        EXIT TO JES2, AND AS SUCH MUST INTERCEPT ONLY THE $DN        *\n*        COMMAND WHEN ENCOUNTERED.  THE IBM $DN COMMAND CAN BE        *\n*        EXECUTED BY ENTERING THE $QN COMMAND.                        *\n*                                                                     *\n*        NOTE THAT AN EXIT 255 ROUTINE WILL BE CALLED TO PERFORM      *\n*        THE ACTUAL DISPLAY OF THE REQUESTED JOBS.  THIS EXIT         *\n*        WILL PROCESS THE COMMAND, PERFORM SOME PRELIMINARY           *\n*        SELECTION PROCESSING, AND CALL THE EXIT WITH AN              *\n*        APPROPRIATE PARM LIST.  THE PARM LIST IS MAPPED WITH         *\n*        A USER MACRO $FCSFMTP.                                       *\n*                                                                     *\n*        THE $DN COMMAND HAS THE FOLLOWING SYNTAX:                    *\n*                                                                     *\n*        $DN  ,SYSTEM-ID                                              *\n*             ,ANY                                                    *\n*             ,ALL                                                    *\n*                                                                     *\n*                         ,V=VOLSER                                   *\n*                         ,IND                                        *\n*                         ,R=DEST1 (-DEST2)                           *\n*                         ,Q=CNV (CLASS)                              *\n*                            XEQ (CLASS)                              *\n*                            OUT                                      *\n*                            PPU                                      *\n*                            HOLD                                     *\n*                            XMT (DEST1 (-DEST2))                     *\n*                         ,JTYPE=JOBTYPE                              *\n*                         ,FLAGS=HOLD                                 *\n*                               +OHOLD                                *\n*                               +UHOLD                                *\n*                               +SETUP                                *\n*                               +FAIL                                 *\n*                               +ABEND                                *\n*                               +JCLERROR                             *\n*                         ,OWNERID                                    *\n*                         ,OWNERID=OWNERID                            *\n*                         ,RESOURCE                                   *\n*                          ,L=CCA                                     *\n*                                                                     *\n*                                                                     *\n*        WHERE:                                                       *\n*                                                                     *\n*        SYSTEM-ID     - LIST ONLY JOBS WITH AFFINITIES TO THE        *\n*                        SPECIFIED SYSTEM IDENTIFIER                  *\n*        ANY           - LIST ONLY JOBS WITHOUT ANY SYSTEM            *\n*                        AFFINITY                                     *\n*        ALL           - LIST JOBS REGARDLESS OF SYSTEM AFFINITY      *\n*        VOLSER        - LIST ONLY JOBS WHICH HAVE DATA ON THE        *\n*                        SPECIFIED SPOOL VOLUME                       *\n*        IND           - LIST ONLY JOBS WHOSE SYSTEM AFFINITY         *\n*                        IS FOR JOBS SET TO RUN IN THE INDEPENDENT    *\n*                        MODE OF OPERATION                            *\n*        R=DEST        - LIST ONLY JOBS WHICH HAVE PRINT/PUNCH        *\n*                        ROUTING TO THE SPECIFIED DESTINATION         *\n*                        NAME OR RANGE OF DESTINATIONS                *\n*        CNV (CLASS)   - LIST ONLY JOBS AWAITING CONVERSION WITH      *\n*                        OPTIONAL SPECIFIED CLASS OR '*' FOR ALL.     *\n*        OUT           - LIST ONLY JOBS AWAITING OUTPUT PROCESSING    *\n*        PPU           - LIST ONLY JOBS WITH OUTPUT QUEUED FOR        *\n*                        PRINT/PUNCH PROCESSING                       *\n*        HOLD          - LIST ONLY JOBS WAITING FOR ACTIVITY AND      *\n*                        IN HOLD PROCESSING                           *\n*        XMT (DEST)    - LIST ONLY JOBS AWAITING TRANSMISSION         *\n*                        TO ANOTHER NODE WITH OPTIONAL NODE           *\n*                        NUMBER OR RANGE                              *\n*        JOBTYPE       - LIST ONLY JOB THAT ARE THE REQUESTED         *\n*                        JOB TYPE.  THIS MUST BE A T (TEST) OR        *\n*                        P (PRODUCTION)                               *\n*        FLAGS         - LIST ONLY JOB THAT CONTAIN THE REQUESTED     *\n*                        SPECIAL JOB FLAG(S).  IF MORE THAN ONE       *\n*                        IS REQUESTED, THEY MUST SEPARATED BY A       *\n*                        PLUS SIGN.  THEY WILL BE PROCESSED AS        *\n*                        AN 'AND' CONDITION IN WHICH ANY JOB WITH     *\n*                        ANY OF THE FLAGS WILL BE LISTED.             *\n*        HOLD          - LIST ONLY JOB THAT ARE ON HOLD.  THIS        *\n*                        WILL INCLUDE JOBS ON OPERATOR HOLD,          *\n*                        USER HOLD, OR SETUP HOLD.                    *\n*        OHOLD         - LIST ONLY JOB THAT ARE ON OPERATOR           *\n*                        HOLD.                                        *\n*        UHOLD         - LIST ONLY JOB THAT ARE ON USER HOLD          *\n*        SETUP         - LIST ONLY JOB THAT ARE ON SETUP HOLD         *\n*        FAIL          - LIST ONLY JOB THAT HAVE FAILED WITH          *\n*                        AN ABEND OR JCLERROR.                        *\n*        ABEND         - LIST ONLY JOB THAT HAVE FAILED WITH          *\n*                        AN ABEND.                                    *\n*        JCLERROR      - LIST ONLY JOB THAT HAVE FAILED WITH          *\n*                        A JCL ERROR.                                 *\n*        OWNERID       - LIST THE OWNERID FOR ALL JOBS THAT           *\n*                        ARE SELECTED.  IF THE OWNERID VALUE          *\n*                        FOLLOWS THIS SPECIFICATION, ONLY JOBS        *\n*                        WITH THAT OWNERID WILL BE LISTED.            *\n*        RESOURCE      - LIST THE ESOTERIC RESOURCES ATTACHED         *\n*                        THE SELECTED JOBS.                           *\n*                                                                     *\n*        NOTE                                                         *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *\n*                                                                     *\n*        1)  THE HASP908 MESSAGE WILL BE ISSUED FOR EACH JOB          *\n*            WHICH IS DISPLAYED.                                      *\n*                                                                     *\n*        $HASP908 JOBNAME  EXECUTING C PRIO XX SSSS                   *\n*                                                                     *\n*        $HASP908 JOBNAME  ON PRINTRXX PRIO XX SSSS                   *\n*                                                                     *\n*        $HASP908 JOBNAME  WAIT EXEC X PRIO XX SSSS                   *\n*                                                                     *\n*        2)  THE HASP946 MESSAGE WILL BE ISSUED AFTER ALL             *\n*            APPROPRIATE JOBS HAVE BEEN DISPLAYED.                    *\n*                                                                     *\n*        $HASP946 ??? PERCENT SPOOL UTILIZATION                       *\n*                                                                     *\n*        3)  THE HASP999 MESSAGE WILL BE ISSUED FOR ALL               *\n*            ERRORS.                                                  *\n*                                                                     *\n*        $HASP999 XXXXXXXXX INVALID OPERAND                           *\n*                                                                     *\n*        THE JOBNAME/JOB NUMBER CONTAINS INVALID SYNTAX.              *\n*                                                                     *\n*        $HASP999 LIST INCOMPLETE                                     *\n*                                                                     *\n*        DURING WTO PROCESSING A BUFFER SHORTAGE WAS DETECTED, SO     *\n*        $DN PROCESSING WILL BE TERMINATED TO PREVENT FURTHER         *\n*        BUFFER SHORTAGES.                                            *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J 0 0 5 $ D N            *\n*                                                                     *\n*        01)  $AMODE       SYS1.HASPSRC                               *\n*        02)  $BUFFER      SYS1.HASPSRC                               *\n*        03)  $CAT         SYS1.HASPSRC                               *\n*        04)  $CMB         SYS1.HASPSRC                               *\n*        05)  $COMWORK     SYS1.HASPSRC                               *\n*        06)  $CWA         SYS1.HASPSRC                               *\n*        07)  $CWTO        SYS1.HASPSRC                               *\n*        08)  $DAS         SYS1.HASPSRC                               *\n*        09)  $DEST        SYS1.HASPSRC                               *\n*        10)  $DCT         SYS1.HASPSRC                               *\n*        11)  $ENTRY       SYS1.HASPSRC                               *\n*        12)  $EXIT        SYS1.HASPSRC                               *\n*        13)  $EXITPL      SYS1.HASPSRC                               *\n*        14)  $FREEBUF     SYS1.HASPSRC                               *\n*        15)  $GETBUF      SYS1.HASPSRC                               *\n*        16)  $HASPEQU     SYS1.HASPSRC                               *\n*        17)  $HASPGBL     SYS1.HASPSRC                               *\n*        18)  $HCT         SYS1.HASPSRC                               *\n*        19)  $IOT         SYS1.HASPSRC                               *\n*        20)  $JCT         SYS1.HASPSRC                               *\n*        21)  $JOE         SYS1.HASPSRC                               *\n*        22)  $JQE         SYS1.HASPSRC                               *\n*        23)  $LCK         SYS1.HASPSRC                               *\n*        24)  $MIT         SYS1.HASPSRC                               *\n*        25)  $MODEND      SYS1.HASPSRC                               *\n*        26)  $MODULE      SYS1.HASPSRC                               *\n*        27)  $PADDR       SYS1.HASPSRC                               *\n*        28)  $PCE         SYS1.HASPSRC                               *\n*        29)  $QLOC        SYS1.HASPSRC                               *\n*        30)  $QSE         SYS1.HASPSRC                               *\n*        31)  $RAT         SYS1.HASPSRC                               *\n*        32)  $RETURN      SYS1.HASPSRC                               *\n*        33)  $SAVE        SYS1.HASPSRC                               *\n*        34)  $TAB         SYS1.HASPSRC                               *\n*        35)  $XIT         SYS1.HASPSRC                               *\n*        36)  IAZRESPA     SYS1.AMODGEN                               *\n*        37)  IFGRPL       SYS1.MACLIB                                *\n*        38)  MODESET      SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       4K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ005$QN  $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 $DN COMMAND PROCESSOR',                     X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $CMB,               GENERATE HASP CMB DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $CWA,               GENERATE HASP CWA DSECT             X\n               $DAS,               GENERATE HASP DAS DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $EXITPL,            GENERATE HASP EXITPL DSECT          X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $IOT,               GENERATE HASP IOT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $LCK,               GENERATE HASP LCK DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $PDDB,              GENERATE HASP PDDB DSECT            X\n               $QSE,               GENERATE HASP QSE DSECT             X\n               $RAT,               GENERATE HASP RAT DSECT             X\n               $TAB,               GENERATE HASP TAB DSECT             X\n               $XIT,               GENERATE HASP XIT DSECT             X\n               RESPA,              GENERATE MVS  RESPA DSECT           X\n               RPL                 GENERATE MVS  IFGRPL DSECT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREAS                                           *\n*                                                                     *\n***********************************************************************\n$DNWORK  DSECT\n         DS    CL(BUFSTART-BFPDSECT) **** RESERVED BY JES2 ****\n         $FCSFMTP ,                MAP THE EXIT 255 PARM LIST\nSYSID    DS    CL4                 REQUESTED SYSTEM ID\nVOLSER   DS    CL6                 REQUESTED SPOOL VOLUME\nROUTCDE  DS    F                   DESTINATION CODE FOR SETDEST ROUTINE\nSAVEBAS  DS    CL18                MSG SAVE AREA FOR JOB NBR AND NAME\nOPNDCTR  DS    H                   COMMAND OPERAND COUNTER\nLTEXT    DS    H                   CURRENT LENGTH OF MESSAGE AREA\nRC       DS    H                   $CWTO RETURN CODE\nLOWROUT  DS    F                   LOW ROUTE CODE FROM PROCDEST\nHIGHROUT DS    F                   HIGH ROUTE CODE FROM PROCDEST\nLOWJOB   DS    H                   LOW RANGE JOB REQUESTED\nHIGHJOB  DS    H                   HIGH RANGE JOB REQUESTED\nMISCSW1  DS    X                   MISCELLANEOUS SWITCHES\nTWOPART  EQU   X'40'               A TWO PART DESTINATION WAS FOUND\nVOLHEAD  EQU   X'20'               SPOOL VOLUME HEADER MSG PROCESSED\nSPOOLS   EQU   X'10'               SPOOL VOLUME INFORMATION REQUESTED\nMISCSW2  DS    X                   MISCELLANEOUS SWITCHES\nJOEFND   EQU   X'80'               AN ACTIVE JOE FOUND FOR THIS JOB\nLASTYPE  DS    C                   LAST JOB TYPE PROCESSED\nDEVNO    DS    H                   NUMBER OF ACTIVE DEVICES\nDOUBLE   DS    D                   DOUBLE WORD WORK AREA\nDBL      DS    D                   DOUBLE WORD WORK AREA\nDEST1P1  DS    CL10                BEGINNING DEST PART 1\nDEST1P2  DS    CL10                BEGINNING DEST PART 2\nDEST2P1  DS    CL10                ENDING DEST PART 1\nSAVEAFF  DS    16F                 REGISTER SAVE FOR SETAFF  ROUTINE\nSAVEOWN  DS    16F                 REGISTER SAVE FOR SETOWN  ROUTINE\nSAVESPL  DS    16F                 REGISTER SAVE FOR SETSPL  ROUTINE\nSAVEBLD  DS    16F                 REGISTER SAVE FOR BLDACT  ROUTINE\nSAVEPUT  DS    16F                 REGISTER SAVE FOR BLDPUT  ROUTINE\nDEVTBL   DS    50XL4               ACTIVE DEVICE TABLE\n         SPACE 3\nJ005$QN  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         TITLE 'JES2 $QN COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE005$QN  $ENTRY BASE=(R12)\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD FIRST BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       - ADDRESS OF THE CURRENT OPERAND                    *\n*        R6       - INCREMENT VALUE OF 4                              *\n*        R7       - ADDRESS OF THE LAST OPERAND                       *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SEE IF THIS IS A $QN COMMAND.  IF IT IS, CHANGE IT           *\n*        TO A $DN COMMAND AND PASS IT BACK TO JES2.                   *\n*                                                                     *\n***********************************************************************\n         CLC   COMVERB(7),=C'DNJEDEF' SEE IF DISPLAY NJEDEF COMMAND\n         BE    EXIT0               YES, LET IBM HANDLE IT\n         CLC   COMVERB(2),=C'DN'   SEE IF THIS IS THE $DN COMMAND\n         BE    DNOK                YES, GO PROCESS IT\n         CLC   COMVERB(2),=C'QN'   SEE IF THIS IS THE $QN COMMAND\n         BNE   EXIT0               NO, BRANCH TO COMMAND OK EXIT\n         MVC   COMVERB(2),=C'DN'   CHANGE TO THE IBM DN COMMAND\n         B     EXIT0               GO LET IBM HANDLE IT\n***********************************************************************\n*                                                                     *\n*        GET A JES2 BUFFER FOR REENTRANCY AND                         *\n*        CLEAR THE COMMAND WORK AREA                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nDNOK     $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R8,R1               SAVE WORK AREA ADDRESS\n         USING $DNWORK,R8          SET ADDRESSABILITY TO WORK AREA\n         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R10,R1              SAVE WORK AREA ADDRESS\n         LA    R14,$DNWORK+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS\n         LH    R15,$BUFSIZE        SET   'TO'   LENGTH\n         SLR   R0,R0               CLEAR 'FROM' ADDRESS\n         SLR   R1,R1               CLEAR 'FROM' LENGTH\n         MVCL  R14,R0              CLEAR THE BUFFER\n         EJECT\n*****************************************************************\n*                                                               *\n*        CHECK FOR AUTOMATIC REDIRECTION OF RESPONSES           *\n*                                                               *\n*****************************************************************\n         SPACE 1\n         TM    COMFLAG,CMBFLAGU    IS THIS A UCM\n         BZ    MSGGOOD             NO, SKIP REDIRECTION\n         TM    FBLFLG,FBLFLGC+FBLFLGR CONSOLE SET OR REMOTE SYSTEM\n         BNZ   MSGRPT              SKIP AUTOMATIC L=CCA\n         LA    R1,4                LOAD REDIRECT OFFSET FOR $DN\n*                                  SAME AS FOR $DN\n         BCTR  R1,0                REDUCE BY 1\n         SLL   R1,1                DOUBLE\n         SLR   R2,R2               ZERO REGISTER FOR IC\n         IC    R2,COMUCM           PICK UP CURRENT UCM ID\n         L     R14,$COMEXTN        POINT TO CONSOLE WORK AREA\n         USING CWA,R14             SET ADDRESSABILITY TO CWA\n         CH    R2,CWAOCON          SEE IF EXCEEDS MAXIMUM\n         BH    MSGRPT              YES, ERROR, NO AUTOMATIC REDIRECTION\n         MH    R2,CWALCON          MULTIPLY BY LENGTH OF EACH ENTRY\n         AR    R1,R2               COMBINE OFFSETS\n         LA    R1,CWARESP-CWACONL(R1) POINT TO CORRECT CWA ENTRY\n         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID\n         TM    FBLFLG,FBLFLGA      HAS AREA BEEN SET\n         BO    MSGRPT              YES, SKIP AUTOMATIC REDIRECTION\n         MVC   COMUCMA,CWACONA(R1) SET NEW AREA\n         DROP  R14                 DROP ADDRESSABILITY TO CWA\nMSGRPT   BAL   R4,MSGVCCA          VERIFY CCA (NO RETURN IF BAD)\n         CLI   COMUCMA,0           TEST FOR DISPLAY AREA\n         BZ    MSGGOOD             IF NOT, SKIP\n         MVI   COMLINET,X'80'      SET CONTROL LINE\n         $CWTO L=L'CMBMSG,MSGID=908 ECHO THE COMMAND\n         MVI   COMLINET,X'20'      SET DATA LINE\n***********************************************************************\n*                                                                     *\n*        INITIALIZE FIELDS                                            *\n*                                                                     *\n***********************************************************************\nMSGGOOD  DS    0H\n         CLI   COMVERB+2,C' '      SEE IF OTHER OPERANDS SPECIFIED\n         BE    INSUFF              NO, INSUFFICIENT OPERANDS\n         CLI   COMVERB+2,C','      SEE IF PROPER DELIMETER\n         BNE   BADOPRND            NO, INVALID OPERAND\n         MVC   LOWJOB,=H'1'        SET LOW JOB NUMBER TO 1\n         MVC   HIGHJOB,$NUMJBNO    SET HIGH JOB NUMBER\n         XC    OPNDCTR,OPNDCTR     ZERO THE OPERAND COUNTER\n         MVI   QBITS,QCNV+QXEQ+QOUT+QPPU+QXMT+QPUR SET DEFAULT BITS\n         MVI   QBITS+1,0           SET DEFAULT BITS\n         MVI   QFILT1,0            ZERO THE FILTER FLAGS FIELD\n         MVI   QFILT2,0            ZERO THE FILTER FLAGS FIELD\n         MVI   VOLMASK,X'FF'       SET SPOOL MASK\n         MVC   VOLMASK+1(L'VOLMASK-1),VOLMASK  TO VOLUMES\n         MVC   SYSMASK,$SIDAFF     SET DEFAULT SYSTEM ID MASK\n         XC    OWNERID,OWNERID     ZERO THE OWNERID FIELD\n***********************************************************************\n*                                                                     *\n*        GET THE DEFAULT ROUTE CODE FOR $DN                           *\n*                                                                     *\n***********************************************************************\nGETROUT  L     R1,COMJROUT         LOAD COMMAND ROUTE CODE\n         TM    COMFLAG,CMBFLAGW    IS THIS AN RJE\n         BNO   GETROUTE            NO, BRANCH\n         CLM   R1,B'1100',$OWNNODE IS THIS OUR NODE AND RJE\n         BNE   GETROUTE            NO, BRANCH\n         LH    R1,COMJRMT          LOAD THE REMOTE NUMBER\n         BCTR  R1,0                MAKE NUMBER RELATIVE TO ZERO\n         MH    R1,=Y(RATTLE)       MULTIPLY BY RAT LENGTH FOR OFFSET\n         AL    R1,$RATABLE         POINT TO RAT ENTRY FOR THIS RJE\n         L     R1,RATROUTE-RAT(,R1) PICK UP PROPER ROUTINE\nGETROUTE OI    QMISC+L'SELDEST,SELDEST TURN ON SELECT BY DEST INDICATOR\n         ST    R1,LOWDEST          SET DEFAULT LOW ROUTE CODE\n         ST    R1,HIDEST           AND HIGH ROUTE CODE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXAMINE THE COMMAND OPERANDS                                 *\n*                                                                     *\n***********************************************************************\nCKOPND   BXH   R5,R6,JQESCAN       IF NO MORE EXIT\n         L     R3,0(R5)            POINT TO OPERAND\n         LH    R15,OPNDCTR         LOAD OPERAND COUNTER\n         LA    R15,1(R15)          ADD 1 TO COUNTER\n         STH   R15,OPNDCTR         SAVE OPERAND COUNTER\n         CLC   0(2,R3),=C'V='      SEE IF 'V=' OPERAND\n         BE    OPV                 YES, GO PROCESS IT\n         CLC   0(2,R3),=C'R='      SEE IF 'R=' OPERAND\n         BE    OPR                 YES, GO PROCESS IT\n         CLC   0(2,R3),=C'Q='      SEE IF 'Q=' OPERAND\n         BE    OPQ                 YES, GO PROCESS IT\n         CLC   0(3,R3),=C'IND'     SEE IF 'IND' OPERAND\n         BE    OPIND               YES, GO PROCESS IT\n         CLC   0(6,R3),=C'JTYPE='  SEE IF 'JT' OPERAND\n         BE    OPJT                YES, GO PROCESS IT\n         CLC   0(3,R3),=C'JT='     SEE IF 'JT' OPERAND\n         BE    OPJT                YES, GO PROCESS IT\n         CLC   0(6,R3),=C'FLAGS='  SEE IF 'FLAGS' OPERAND\n         BE    OPFLAG              YES, GO PROCESS IT\n         CLC   0(5,R3),=C'FLAG='   SEE IF 'FLAGS' OPERAND\n         BE    OPFLAG              YES, GO PROCESS IT\n         CLC   0(3,R3),=C'FL='     SEE IF 'FLAGS' OPERAND\n         BE    OPFLAG              YES, GO PROCESS IT\n         CLC   0(2,R3),=C'F='      SEE IF 'FLAGS' OPERAND\n         BE    OPFLAG              YES, GO PROCESS IT\n         CLC   0(7,R3),=C'OWNERID' SEE IF 'OWNERID' OPERAND\n         BE    OPOWN               YES, GO PROCESS IT\n         CLC   0(5,R3),=C'OWNER'   SEE IF 'OWNERID' OPERAND\n         BE    OPOWN               YES, GO PROCESS IT\n         CLC   0(8,R3),=C'RESOURCE' SEE IF 'RESOURCE' OPERAND\n         BE    OPRES               YES, GO PROCESS IT\n         CLI   0(R3),C'O'          SEE IF 'OWNERID' OPERAND\n         BE    OPOWN               YES, GO PROCESS IT\n         CLC   OPNDCTR,=H'1'       IS THIS THE FIRST OPERAND\n         BNE   BADOPRND            NO, INVALID OPERAND\n         CLC   0(3,R3),=C'ANY'     SEE IF 'ANY' OPERAND\n         BE    OPANY               YES, GO PROCESS IT\n         CLC   0(3,R3),=C'ALL'     SEE IF 'ALL' OPERAND\n         BE    OPALL               YES, GO PROCESS IT\n         B     OPSYSID             ASSUME SYSTEM-ID\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE V= OPERAND                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPV      OI    QMISC+L'SELVOL,SELVOL TURN ON SELECT BY VOLUME IND\n         SLR   R14,R14             SET VOLSER LENGTH\n         LA    R15,2(R3)           POINT TO VOLSER OPERAND\n         MVC   VOLSER,$BLANKS      BLANK THE VOLSER\nOPV1     CLI   0(R15),C' '         END OF VOLSER\n         BE    OPV2                YES, BRANCH\n         CLI   0(R15),C','         END OF VOLSER\n         BE    OPV2                YES, BRANCH\n         LA    R14,1(R14)          ADD 1 TO VOLSER LENGTH\n         LA    R15,1(R15)          INCREMENT TO NEXT CHAR VOLSER\n         B     OPV1                LOOP\nOPV2     LTR   R14,R14             TEST VOLSER LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R14,=H'6'           SEE IF EXCEEDS MAX\n         BH    BADOPRND            YES, ERROR\n         BCTR  R14,0               MAKE MACHINE LENGTH\n         EX    R14,MVVOL           MOVE VOLSER TO WORK AREA\n         L     R15,$DASFRST        LOAD ADDRESS OF FIRST DAS\n         USING DAS,R15             SET ADDRESSABILITY TO DAS\n         LH    R14,$SPOLNUM        LOAD NUMBER OF SPOOL VOLUMES\n         LTR   R14,R14             TEST NUMBER OF SPOOL VOLUMES\n         BZ    BADOPRND            NO SPOOL VOLUMES, BAD OPERAND\nOPV3     CLC   DASVOLID,VOLSER     SEE IF MATCH ON SPOOL VOLSER\n         BE    OPV4                YES, BRANCH\n         LA    R15,DASSIZ(R15)     POINT TO NEXT DAS ENTRY\n         BCT   R14,OPV3            LOOP FOR NEXT DAS\n         B     BADOPRND            INVALID VOLSER, BAD OPERAND\nOPV4     MVC   VOLMASK,DASMASK     SAVE DAS VOLUME MASK\n         B     CKOPND              LOOP FOR NEXT OPERAND\n         DROP  R15                 DROP ADDRESSABILITY TO DAS\nMVVOL    MVC   VOLSER(0),2(R3)     **** EXECUTE ONLY ****\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE R= OPERAND                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPR      OI    QMISC+L'SELDEST,SELDEST TURN ON SELECT BY DEST IND\n         L     R3,0(,R5)           POINT TO OPERAND\n         LA    R1,2(,R3)           INCREMENT PAST 'R='\n         $CALL PROCDEST            CALL THE DEST CONVERSION ROUTINE\n         MVC   LOWDEST,LOWROUT     SAVE FIRST DESTINATION CODE\n         MVC   HIDEST,HIGHROUT     SAVE SECOND DESTINATION CODE\n         B     CKOPND              GO GET NEXT OPERAND\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE Q= OPERAND                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPQ      SLR   R14,R14             SET VOLSER LENGTH\n         LA    R15,2(R3)           POINT TO Q OPERAND\nOPQ1     CLI   0(R15),C' '         END OF OPERAND\n         BE    OPQ2                YES, BRANCH\n         CLI   0(R15),C','         END OF OPERAND\n         BE    OPQ2                YES, BRANCH\n         LA    R14,1(R14)          ADD 1 TO OPERAND LENGTH\n         LA    R15,1(R15)          INCREMENT TO NEXT CHAR OPERAND\n         B     OPQ1                LOOP\nOPQ2     CLI   QBITS,QCNV+QXEQ+QOUT+QPPU+QXMT+QPUR SEE IF DEFAULT BITS\n         BNE   BADOPRND            NO, SECOND Q= OPERAND, ERROR\n         CH    R14,=H'3'           TEST OPERAND LENGTH\n         BL    BADOPRND            LESS THAN 3, ERROR\n         CLC   2(3,R3),=C'CNV'     SEE IF CONVERSION QUEUE\n         BE    OPQ3                YES, BRANCH\n         CLC   2(3,R3),=C'XEQ'     SEE IF EXECUTION QUEUE\n         BE    OPQ4                YES, BRANCH\n         CLC   2(3,R3),=C'OUT'     SEE IF OUTPUT QUEUE\n         BE    OPQ5                YES, BRANCH\n         CLC   2(3,R3),=C'PPU'     SEE IF PRINT/PUNCH QUEUE\n         BE    OPQ6                YES, BRANCH\n         CLC   2(4,R3),=C'HOLD'    SEE IF HOLD QUEUE\n         BE    OPQ7                YES, BRANCH\n         CLC   2(3,R3),=C'XMT'     SEE IF TRANSMISSION QUEUE\n         BE    OPQ8                YES, BRANCH\n         B     BADOPRND            NO, ERROR\n***********************************************************************\n*                                                                     *\n*        PROCESS THE Q=CNV OPERAND                                    *\n*                                                                     *\n***********************************************************************\nOPQ3     MVI   QBITS+L'QCNV,QCNV   TURN ON CONVERSION QUEUE BIT\n         CH    R14,=H'3'           SEE IF LENGTH = 3\n         BE    CKOPND              YES, DONE WITH THIS OPERAND\n         CH    R14,=H'4'           SEE IF LENGTH = 4\n         BNE   OPQ3A               NO, BRANCH\n         CLI   5(R3),C'*'          SEE IF 'CNV*'\n         BE    CKOPND              YES, IGNORE CLASS\n         MVC   QCLASS,5(R3)        NO, SAVE CLASS\n         B     CKOPND              GO GET NEXT OPERAND\nOPQ3A    CH    R14,=H'6'           SEE IF LENGTH = 6\n         BNE   BADOPRND            NO, ERROR\n         CLC   5(3,R3),=C'STC'     SEE IF WANT STARTED TASKS\n         BNE   OPQ3B               NO, BRANCH\n         MVI   QCLASS,C'$'         SET CLASS TO '$'\n         B     CKOPND              GO GET NEXT OPERAND\nOPQ3B    CLC   5(3,R3),=C'TSU'     SEE IF WANT TSO USERS\n         BNE   BADOPRND            NO, ERROR\n         MVI   QCLASS,C'@'         SET CLASS TO '@'\n         B     CKOPND              GO GET NEXT OPERAND\n***********************************************************************\n*                                                                     *\n*        PROCESS THE Q=XEQ OPERAND                                    *\n*                                                                     *\n***********************************************************************\nOPQ4     MVI   QBITS+L'QXEQ,QXEQ   TURN ON EXECUTION QUEUE BIT\n         OI    QBITS+L'QCNV,QCNV   TURN ON CONVERSION QUEUE BIT ALSO\n         CH    R14,=H'3'           SEE IF LENGTH = 3\n         BE    CKOPND              YES, DONE WITH THIS OPERAND\n         CH    R14,=H'4'           SEE IF LENGTH = 4\n         BNE   OPQ4A               NO, BRANCH\n         MVC   QCLASS,5(R3)        NO, SAVE CLASS\n         B     CKOPND              GO GET NEXT OPERAND\nOPQ4A    CH    R14,=H'6'           SEE IF LENGTH = 6\n         BNE   BADOPRND            NO, ERROR\n         CLC   5(3,R3),=C'STC'     SEE IF WANT STARTED TASKS\n         BNE   OPQ4B               NO, BRANCH\n         MVI   QCLASS,C'$'         SET CLASS TO '$'\n         B     CKOPND              GO GET NEXT OPERAND\nOPQ4B    CLC   5(3,R3),=C'TSU'     SEE IF WANT TSO USERS\n         BNE   BADOPRND            NO, ERROR\n         MVI   QCLASS,C'@'         SET CLASS TO '@'\n         B     CKOPND              GO GET NEXT OPERAND\n***********************************************************************\n*                                                                     *\n*        PROCESS THE Q=OUT OPERAND                                    *\n*                                                                     *\n***********************************************************************\nOPQ5     MVI   QBITS+L'QOUT,QOUT   TURN ON OUTPUT QUEUE BIT\n         CH    R14,=H'3'           SEE IF LENGTH = 3\n         BNE   BADOPRND            NO, ERROR\n         B     CKOPND              GO GET NEXT OPERAND\n***********************************************************************\n*                                                                     *\n*        PROCESS THE Q=PPU OPERAND                                    *\n*                                                                     *\n***********************************************************************\nOPQ6     MVI   QBITS+L'QPPU,QPPU   TURN ON PRINT/PUNCH QUEUE BIT\n         CH    R14,=H'3'           SEE IF LENGTH = 3\n         BNE   BADOPRND            NO, ERROR\n         B     CKOPND              GO GET NEXT OPERAND\n***********************************************************************\n*                                                                     *\n*        PROCESS THE Q=HOLD OPERAND                                   *\n*                                                                     *\n***********************************************************************\nOPQ7     OI    QBITS+L'QHOLD,QHOLD TURN ON HOLD QUEUE BIT\n         CH    R14,=H'4'           SEE IF LENGTH = 4\n         BNE   BADOPRND            NO, ERROR\n         B     CKOPND              GO GET NEXT OPERAND\n***********************************************************************\n*                                                                     *\n*        PROCESS THE Q=XMT OPERAND                                    *\n*                                                                     *\n***********************************************************************\nOPQ8     MVI   QBITS+L'QXMT,QXMT   TURN ON TRANSMISSION QUEUE BIT\n         CH    R14,=H'3'           SEE IF LENGTH = 3\n         BE    CKOPND              YES, DONE WITH THIS OPERAND\n         OI    QMISC+L'XMTDEST,XMTDEST TURN ON SELECT XMT BY DEST IND\n         LA    R1,5(,R3)           INCREMENT PAST 'Q=XMT'\n         $CALL PROCDEST            CALL THE DEST CONVERSION ROUTINE\n         MVC   LOWXDEST,LOWROUT    SAVE FIRST DESTINATION CODE\n         MVC   HIXDEST,HIGHROUT    SAVE SECOND DESTINATION CODE\n         CLC   LOWXDEST+2(2),=H'0' MAKE SURE ONLY NODE SPECIFIED\n         BNE   BADOPRND            NO, ERROR\n         CLC   HIXDEST+2(2),=H'0'  MAKE SURE ONLY NODE SPECIFIED\n         BNE   BADOPRND            NO, ERROR\n         B     CKOPND              GO GET NEXT OPERAND\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE IND OPERAND                                      *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPIND    OI    QMISC+L'INDONLY,INDONLY TURN ON IND INDICATOR\n         CLI   3(R3),C' '          THREE CHARACTER OPERAND\n         BE    CKOPND              YES, GO GET NEXT OPERAND\n         CLI   3(R3),C','          THREE CHARACTER OPERAND\n         BNE   BADOPRND            NO, ERROR\n         B     CKOPND              GO GET NEXT OPERAND\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE ANY OPERAND                                      *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPANY    OI    QMISC+L'SYSANY,SYSANY TURN ON 'ANY' SYSTEM INDICATOR\n         CLI   3(R3),C' '          THREE CHARACTER OPERAND\n         BE    CKOPND              YES, GO GET NEXT OPERAND\n         CLI   3(R3),C','          THREE CHARACTER OPERAND\n         BNE   BADOPRND            NO, ERROR\n         B     CKOPND              GO GET NEXT OPERAND\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE ALL OPERAND                                      *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPALL    OI    QMISC+L'SYSALL,SYSALL TURN ON ALL SYSTEMS INDICATOR\n         CLI   3(R3),C' '          THREE CHARACTER OPERAND\n         BE    CKOPND              YES, GO GET NEXT OPERAND\n         CLI   3(R3),C','          THREE CHARACTER OPERAND\n         BNE   BADOPRND            NO, ERROR\n         B     CKOPND              GO GET NEXT OPERAND\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE SYSTEM-ID OPERAND                                *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPSYSID  MVC   SYSID,$BLANKS       BLANK THE SYSTEM ID\n         SLR   R14,R14             SET VOLSER LENGTH\n         LR    R15,R3              POINT TO SYSTEM ID\nOPSYSID1 CLI   0(R15),C' '         END OF OPERAND\n         BE    OPSYSID2            YES, BRANCH\n         CLI   0(R15),C','         END OF OPERAND\n         BE    OPSYSID2            YES, BRANCH\n         LA    R14,1(R14)          ADD 1 TO OPERAND LENGTH\n         LA    R15,1(R15)          INCREMENT TO NEXT CHAR OPERAND\n         B     OPSYSID1            LOOP\nOPSYSID2 LTR   R14,R14             TEST SYSID LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R14,=H'4'           TEST MAX LENGTH\n         BH    BADOPRND            GREATER THAN 4, ERROR\n         BCTR  R14,0               MAKE MACHINE LENGTH\n         EX    R14,MVSYSID         SAVE SYSTEM ID\n         L     R14,$QSE1           LOAD ADDRESS OF FIRST QSE\n         USING QSE,R14             SET ADDRESSABILITY TO QSE\nOPSYSID3 MVC   SYSMASK,QSESIAFF    SAVE SYSTEM AFFINITY BIT\n         CLC   QSESID,SYSID        SEE IF OUR SYSTEM ID\n         BE    CKOPND              YES, GO GET NEXT OPERAND\n         TM    QSESTAT,QSELAST     SEE IF LAST QSE\n         BO    BADOPRND            YES, INVALID SYSTEM ID\n         LA    R14,QSELEN(R14)     INCREMENT TO NEXT QSE\n         B     OPSYSID3            LOOP\n         DROP  R14                 DROP ADDRESSABILITY TO QSE\nMVSYSID  MVC   SYSID(0),0(R3)      **** EXECUTE ONLY ****\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE JOBTYPE OPERAND                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPJT     LA    R15,8               SET LOOP COUNTER\nOPJT1    CLI   0(R3),C'='          FIND END OF KEYWORD\n         BE    OPJT2               YES, BRANCH\n         LA    R3,1(R3)            INCREMENT TO NEXT CHAR\n         BCT   R15,OPJT1           LOOP\n         B     BADOPRND            NO '=' ERROR\nOPJT2    LA    R3,1(R3)            INCREMENT PAST '='\n         CLI   1(R3),C' '          PROPER END OF VALUE\n         BE    OPJT3               YES, BRANCH\n         CLI   1(R3),C','          PROPER END OF VALUE\n         BE    OPJT3               YES, BRANCH\nOPJT3    OI    QFILT1,QPROD        ASSUME PROD\n         CLI   0(R3),C'P'          SEE IF PRODUCTION\n         BE    CKOPND              YES, GO GET NEXT OPERAND\n         OI    QFILT1,QTEST        ASSUME TEST\n         CLI   0(R3),C'T'          SEE IF TEST\n         BE    CKOPND              YES, GO GET NEXT OPERAND\n         B     BADOPRND            NO, ERROR\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE FLAG OPERAND                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPFLAG   LA    R15,8               SET LOOP COUNTER\nOPFLAG1  CLI   0(R3),C'='          FIND END OF KEYWORD\n         BE    OPFLAG2             YES, BRANCH\n         LA    R3,1(R3)            INCREMENT TO NEXT CHAR\n         BCT   R15,OPFLAG1         LOOP\n         B     BADOPRND            NO '=' ERROR\nOPFLAG2  LA    R3,1(R3)            INCREMENT PAST '=' OR '+'\n         LR    R4,R3               SAVE START OF VALUE ADDRESS\n         LA    R15,10              SET LOOP COUNTER\nOPFLAG3  CLI   0(R4),C','          PROPER END OF VALUE\n         BE    OPFLAG4             YES, BRANCH\n         CLI   0(R4),C' '          PROPER END OF VALUE\n         BE    OPFLAG4             YES, BRANCH\n         CLI   0(R4),C'+'          PROPER END OF VALUE\n         BE    OPFLAG4             YES, BRANCH\n         LA    R4,1(R4)            INCREMENT TO NEXT CHAR\n         BCT   R15,OPFLAG3         LOOP\n         B     BADOPRND            OPERAND TOO LONG\nOPFLAG4  LR    R15,R4              SAVE END ADDRESS\n         SR    R15,R3              CALCULATE LENGTH\n         LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,CLCHOLD         SEE IF HOLD\n         BE    OPFLAG5             YES, BRANCH\n         EX    R15,CLCOHOLD        SEE IF OPERATOR HOLD\n         BE    OPFLAG6             YES, BRANCH\n         EX    R15,CLCUHOLD        SEE IF USER HOLD\n         BE    OPFLAG7             YES, BRANCH\n         EX    R15,CLCSETUP        SEE IF SETUP HOLD\n         BE    OPFLAG8             YES, BRANCH\n         EX    R15,CLCFAIL         SEE IF FAIL\n         BE    OPFLAG9             YES, BRANCH\n         EX    R15,CLCABEND        SEE IF ABEND\n         BE    OPFLAG10            YES, BRANCH\n         EX    R15,CLCJCLER        SEE IF JCL ERROR\n         BE    OPFLAG11            YES, BRANCH\n         B     BADOPRND            NO, BAD OPERAND\nCLCHOLD  CLC   0(0,R3),=C'HOLD'    **** EXECUTE ONLY ****\nCLCOHOLD CLC   0(0,R3),=C'OHOLD'   **** EXECUTE ONLY ****\nCLCUHOLD CLC   0(0,R3),=C'UHOLD'   **** EXECUTE ONLY ****\nCLCSETUP CLC   0(0,R3),=C'SETUP'   **** EXECUTE ONLY ****\nCLCFAIL  CLC   0(0,R3),=C'FAIL'    **** EXECUTE ONLY ****\nCLCABEND CLC   0(0,R3),=C'ABEND'   **** EXECUTE ONLY ****\nCLCJCLER CLC   0(0,R3),=C'JCLERROR' **** EXECUTE ONLY ****\nOPFLAG5  OI    QFILT2+L'QOHOLD,QOHOLD SET OPERATOR HOLD INDICATOR\n         OI    QFILT2+L'QUHOLD,QUHOLD SET USER    HOLD INDICATOR\n         OI    QFILT2+L'QSETUP,QSETUP SET SETUP   HOLD INDICATOR\n         B     OPFLAG12            GO CHECK FOR ANOTHER FLAG\nOPFLAG6  OI    QFILT2+L'QOHOLD,QOHOLD SET OPERATOR HOLD INDICATOR\n         B     OPFLAG12            GO CHECK FOR ANOTHER FLAG\nOPFLAG7  OI    QFILT2+L'QUHOLD,QUHOLD SET USER HOLD INDICATOR\n         B     OPFLAG12            GO CHECK FOR ANOTHER FLAG\nOPFLAG8  OI    QFILT2+L'QSETUP,QSETUP SET SETUP HOLD INDICATOR\n         B     OPFLAG12            GO CHECK FOR ANOTHER FLAG\nOPFLAG9  OI    QFILT2+L'QABEND,QABEND SET ABEND INDICATOR\n         OI    QFILT2+L'QJCLERR,QJCLERR SET JCL ERROR INDICATOR\n         B     OPFLAG12            GO CHECK FOR ANOTHER FLAG\nOPFLAG10 OI    QFILT2+L'QABEND,QABEND SET ABEND INDICATOR\n         B     OPFLAG12            GO CHECK FOR ANOTHER FLAG\nOPFLAG11 OI    QFILT2+L'QJCLERR,QJCLERR SET JCL ERROR INDICATOR\n         B     OPFLAG12            GO CHECK FOR ANOTHER FLAG\nOPFLAG12 CLI   0(R4),C'+'          SEE IF ANOTHER FLAG\n         BNE   CKOPND              NO, GO GET NEXT OPERAND\n         LR    R3,R4               SET ADDRESS OF NEXT FLAG OPTION\n         B     OPFLAG2             GO CHECK NEXT FLAG OPTION\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE OWNERID OPERAND                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPOWN    OI    QMISC+L'OWNER,OWNER SET OWNERID REQUEST FLAG\n         XC    OWNERID,OWNERID     SET OWNERID TO ZEROS\n         LA    R15,8               SET LOOP COUNTER\nOPOWN1   CLI   0(R3),C'='          FIND END OF KEYWORD\n         BE    OPOWN2              YES, BRANCH\n         CLI   0(R3),C' '          FIND END OF KEYWORD\n         BE    CKOPND              YES, NO OWNERID, GET NEXT OPERAND\n         CLI   0(R3),C','          FIND END OF KEYWORD\n         BE    CKOPND              YES, NO OWNERID, GET NEXT OPERAND\n         LA    R3,1(R3)            INCREMENT TO NEXT CHAR\n         BCT   R15,OPOWN1          LOOP\n         B     BADOPRND            NO '=' ERROR\nOPOWN2   LA    R3,1(R3)            INCREMENT PAST '='\n         LR    R4,R3               SAVE START ADDRESS OF OPERAND\n         LA    R15,8               SET LOOP COUNTER\nOPOWN3   CLI   0(R4),C' '          PROPER END OF VALUE\n         BE    OPOWN4              YES, BRANCH\n         CLI   0(R4),C','          PROPER END OF VALUE\n         BE    OPOWN4              YES, BRANCH\n         LA    R4,1(R4)            INCREMENT TO NEXT CHAR OF OPERAND\n         BCT   R15,OPOWN3          LOOP\n         B     BADOPRND            OWNERID TOO LONG\nOPOWN4   SR    R4,R3               CALCULATE LENGTH OF OWNERID\n         LTR   R4,R4               TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         BCTR  R4,0                MAKE MACHINE LENGTH\n         MVC   OWNERID,BLANKS      BLANK OWNERID\n         EX    R4,MVCOWNER         SAVE OWNERID\n         B     CKOPND              GO GET NEXT OPERAND\nMVCOWNER MVC   OWNERID(0),0(R3)    **** EXECUTE ONLY ****\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE RESOURCE OPERAND                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPRES    OI    QMISC+L'RESOURCE,RESOURCE SET RESOURCE REQUESTED FLAG\n         B     CKOPND              GO GET NEXT OPERAND\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SCAN THE JOB QUEUE FOR THE JOB LIST                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nJQESCAN  LH    R1,LOWJOB           LOAD JOB NUMBER\n         $QLOC (R1)                GET JQE FOR THIS JOB NUMBER\n         BZ    NEXTJQE             GET NEXT JQE IF NOT FOUND\n         LR    R9,R1               SAVE JQE ADDRESS\n         USING JQE,R9              SET ADDRESSABILITY TO JQE\n         LA    R1,QBITS            POINT TO EXIT PARM LIST\nEXIT255  $EXIT 255,ENVIRON=JES2,MAXRC=8 CALL FORMAT ROUTINE\n         CH    R15,=H'8'           TEST FOR CONSOLE BUFFER SHORTAGE\n         BNE   NEXTJQE             NO, CONTINUE\n         B     ENDJOB              YES, GET OUT\nNEXTJQE  LH    R1,LOWJOB           LOAD PREVIOUS JOB NUMBER\n         LA    R1,1(R1)            ADD 1 TO JOB NUMBER\n         STH   R1,LOWJOB           SAVE NEW JOB NUMBER\n         CH    R1,HIGHJOB          SEE IF END OF RANGE\n         BNH   JQESCAN             NO, LOOP\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DISPALY THE PERCENT SPOOL UTILIZATION MESSAGE                *\n*                                                                     *\n***********************************************************************\nENDJOB   LA    R15,100             SET TO 100% IF NO TRACK GROUPS\n         ICM   R1,B'1111',$TGTOTAL LOAD TOTAL NUMBER OF TRACK GROUPS\n         BZ    ENDJOB1             NONE, BRANCH\n         L     R15,$TGALLOC        LOAD NUMBER OF ALLOC TRACK GROUPS\n         M     R14,=F'100'         MULTIPLY BY 100 FOR PERCENT\n         DR    R14,R1              COMPUTE PERCENT= (ALLOC*100)/TOTAL\n         LTR   R15,R15             TEST QUOTIENT\n         BNZ   ENDJOB1             NOT ZERO, BRANCH\n         LA    R15,1               MAKE AT LEAST 1 PERCENT\nENDJOB1  CVD   R15,DBL             CONVERT TO PACKED\n         MVC   COMMAND(L'MSG1),MSG1 SET PERCENT SPOOL UTIL MSG\n         MVC   COMMAND(4),=X'40202120' SET EDIT MASK\n         ED    COMMAND(4),DBL+6  EDIT PERCENT TO MESSAGE\n         LA    R0,L'MSG1           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=946    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n         EJECT\n*****************************************************************\n*                                                               *\n*        SUBROUTINE TO VERIFY CONSOLE/AREA                      *\n*                                                               *\n*****************************************************************\n         SPACE 1\nMSGVCCA  TM    FBLFLG,FBLFLGR      SEE IF REMOTE SYSTEM UCM\n         BOR   R4                  YES, UCM AND AREA ARE OK\n         L     R2,$COMEXTN         POINT TO CONSOLE WORK AREA\n         USING CWA,R2              SET ADDRESSABILITY TO CWA\n         MVC   XASCID(1),COMUCM    SET UCM ID\n         MVC   XASDID(1),COMUCMA   SET AREA ID\n         CLI   XASDID,0            SEE IF AREA ID SPECIFIED\n         BNZ   MSGSSAOP            YES, BRANCH\n         MVI   XASDID,C'Z'         NO,  FORCE AREA Z\nMSGSSAOP MVC   XAU(1),COMUCM       TELL OS SOURCE IS SAME AS OUTPUT\n         MVI   XAN,X'22'           SET ID FOR VERIFIER\n         MODESET EXTKEY=ZERO       GET KEY 0\n         L     R15,CWA7603D        POINT TO OS VERIFICATION ROUTINE\n         $AMODE 24,PUSHR=0,R=R14   GO TO AMODE 24\n         BALR  R14,R15             ENTER IT\n         $AMODE POPR=0,R=R14       RETURN TO ORIGINAL AMODE\n         MODESET EXTKEY=HASP       RETURN TO KEY 1\n         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR\n         BNHR  R4                  NO, RETURN TO CALLER\n         SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,B'0011',COMUCM   PICK UP UCM AND AREA ID\n         MVI   COMUCMA,0           FORCE NO DISPLAY AREA\n         CH    R15,=H'12'          SEE IF CONSOLE DOWN\n         BNE   *+16                NO, DO NOT SET LOGICAL CONSOLE\n         MVC   COMFLAG(4),MOWTOL   DESTROY APPARENT SOURCE INFO\n         MVC   COMOUT,MOWTOL+(COMOUT-COMFLAG) OMITTING CNTL FIELD\n         $CWTO L=L'CMBMSG,MSGID=908 ECHO THE COMMAND\n         MVC   COMMAND(MBVINVL),MBVINV SET ERROR MESSAGE TEXT\n         STC   R3,MBVINVA          SET AREA\n         SRL   R3,8                ALIGN CONSOLE ID\n         CVD   R3,$DOUBLE          CONVERT TO PACKED\n         MVC   DBL(4),=X'F0212020' SET EDIT MASK\n         ED    DBL(4),$DOUBLE+6    EDIT CONSOLE ID TO AREA\n         MVC   MBVINVC,DBL+2       MOVE CONSOLE ID TO MESSAGE\n         MVC   COMMAND+MBVINVL(8),COMACEID MOVE IDENTIFIER\n         $CWTO L=MBVINVL,MSGID=999 WRITE ERROR MESSAGE TO CONSOLE\n         B     EXIT8               GET OUT\n         DROP  R2                  DROP ADDRESSABILITY TO CWA\n         EJECT\n*****************************************************************\n*                                                               *\n*       R E D I R E C T   R O U T I N E   C O N S T A N T S     *\n*                                                               *\n*****************************************************************\n         SPACE 1\nMOWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX\nMBVINV   DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '\nMBVINVL  EQU   *-MBVINV\nMBVINVC  EQU   COMMAND+MBVINVL-16,2\nMBVINVA  EQU   MBVINVC+2,1\nFBLFLG   EQU   COMEWORK+2          FLAG BYTE\nCOMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER\nFBLFLGR  EQU   1                   UCM COMMAND FROM REMOTE SYSTEM\nFBLFLGC  EQU   2                   CONSOLE HAS BEEN SPECIFIED\nFBLFLGA  EQU   4                   AREA HAS BEEN SPECIFIED\n         EJECT\n***********************************************************************\n*        CONSTANTS FOR $DN                                            *\n***********************************************************************\n         SPACE 3\nBLANKS   DC    CL20' '             STRING OF 20 BLANKS\n         SPACE 3\nMSG1     DC    C' XXX PERCENT SPOOL UTILIZATION'\nMSG2     DC    C' INVALID OPERAND'\nMSG3     DC    C' INSUFFICIENT OPERANDS'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INVALID $DN OPERAND                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nBADOPRND L     R1,0(0,R5)          POINT TO INVALID OPERAND\n         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG\n         MVC   COMMAND+9(L'MSG2),MSG2 SET ERROR MESSAGE\n         LA    R0,L'MSG2+9         SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INSUFFICIENT OPERANDS                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nINSUFF   MVC   COMMAND(L'MSG3),MSG3 SET ERROR MESSAGE\n         LA    R0,L'MSG3           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE DESTINATION RANGE POINTED TO BY REGISTER 1       *\n*        ON ENTRY.  ANY ERRORS WILL RESULT IN THE OPERAND AND         *\n*        SUBSEQUENTLY THE COMMAND BEING REJECTED BY AN INVALID        *\n*        OPERAND MESSAGE.  IF NO ERRORS ARE DETECTED, THE             *\n*        DESTINATION RANGE VALUES WILL BE STORED IN LOWROUT           *\n*        AND HIGHROUT RESPECTIVELY WITH BOTH VALUES BEING THE         *\n*        SAME IF ONLY ONE DESTINATION IS SPECIFIED.                   *\n*                                                                     *\n*    RANGES ALLOWED  -    ONLY ASCENDING RANGES ARE PERMITTED         *\n*    --------------                                                   *\n*    NNNNNRNNNN (-RMMMM)                                              *\n*    NNNN.RNNNN (-RMMMM)                                              *\n*    NAME.RNNNN (-RMMMM)                                              *\n*                      -  RANGE OF REMOTES AT A GIVEN NODE            *\n*                        (NAME IS 8-BYTE EBCDIC FROM A DESTID CARD    *\n*    NNNNN(-NMMMM)     -  RANGE OF ALL REMOTES/UNITS AT GIVEN NODE    *\n*    UNNNN(-UMMMM)     -  RANGE OF UNITS AT THE LOCAL NODE ONLY       *\n*    RNNNN(-RMMMM)     -  RANGE OF REMOTES AT THE LOCAL NODE ONLY     *\n*    NAME1(-NAME2)     -  AS ANY ONE OF THE ABOVE, BUT NO OTHERS      *\n*    LOCAL             -  ALL SPECIAL LOCAL                           *\n*                                                                     *\n***********************************************************************\nPROCDEST $SAVE                     SET REGISTER SAVE AREA\n         NI    MISCSW1,255-TWOPART  TURN OFF TWO PART DEST SWITCH\n         LR    R3,R1               SAVE START OF OPERAND\n         LR    R4,R1               SAVE START OF OPERAND\n         SLR   R1,R1               SET ZERO LENGTH\n         MVC   DEST1P1,=CL10' '    BLANK DEST1 PART1\n         MVC   DEST1P2,=CL10' '    BLANK DEST1 PART2\n         MVC   DEST2P1,=CL10' '    BLANK DEST2 PART1\nPRDLOOP CLI    0(R4),C'-'          END OF FIRST OPERAND\n         BE    PRD2                YES, BRANCH\n         CLI   0(R4),C','          END OF LAST OPERAND\n         BE    PRD2                YES, BRANCH\n         CLI   0(R4),C' '          END OF LAST OPERAND\n         BE    PRD2                YES, BRANCH\n         CLI   0(R4),C'.'          TWO PART DESTINATION\n         BE    PRD1                YES, BRANCH\n         LA    R4,1(,R4)           INCREMENT TO NEXT CHAR OF DEST\n         LA    R1,1(,R1)           ADD 1 TO LENGTH\n         B     PRDLOOP             LOOP UNTIL DONE\nPRD1     OI    MISCSW1,TWOPART     SET TWO PART DEST INDICATION\n         CLI   DEST1P1,C' '        HAS FIRST ALREADY BEEN SPECIFIED\n         BNE   BADOPRND            YES, ERROR\n         B     PRD2                GO PROCESS DEST FIELD\nPRD2     LTR   R1,R1               CHECK LENGTH OF DEST\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R1,=H'10'           CHECK LENGTH OF DEST\n         BH    BADOPRND            GREATER THAN 10, ERROR\n         BCTR  R1,0                MAKE MACHINE LENGTH\n         CLI   DEST1P1,C' '        HAS PART1 ALREADY BEEN SPECIFIED\n         BNE   PRD3                YES, BRANCH\n         EX    R1,MDEST1P1         MOVE DEST1 PART1\n         B     PRD5                GET OUT\nPRD3     TM    MISCSW1,TWOPART     SEE IF TWO PART DEST INDICATION\n         BZ    PRD4                NO, BRANCH\n         CLI   DEST1P2,C' '        SEE IF PART2 ALREADY BEEN SPECIFIED\n         BNE   PRD4                YES, THIS IS THE SECOND DEST\n         EX    R1,MDEST1P2         MOVE DEST1 PART2\n         B     PRD5                GET OUT\nPRD4     CLI   DEST2P1,C' '        SEE IF DEST2 ALREADY BEEN SPECIFIED\n         BNE   BADOPRND            YES, ERROR\n         EX    R1,MDEST2P1         MOVE DEST2 PART1\n         B     PRD5                GET OUT\nMDEST1P1 MVC   DEST1P1(0),0(R3)    MOVE DEST1 PART1\nMDEST1P2 MVC   DEST1P2(0),0(R3)    MOVE DEST1 PART2\nMDEST2P1 MVC   DEST2P1(0),0(R3)    MOVE DEST2 PART1\nPRD5     CLI   0(R4),C'-'          SEE IF DESTINATION RANGE SPECIFIED\n         BE    PRD6                YES, BRANCH\n         CLI   0(R4),C'.'          SEE IF TWO PART DEST SPECIFIED\n         BE    PRD6                YES, BRANCH\n         B     PRD7                GO CONVERT DEST TO ROUTE CODES\nPRD6     LA    R4,1(,R4)           INCREMENT PAST '-' OR '.'\n         LR    R3,R4               SAVE START ADDRESS\n         SLR   R1,R1               RESET LENGTH TO ZERO\n         B     PRDLOOP             LOOP FOR NEXT DESTINATION\nPRD7     DS    0H\n         MVC   COMDWORK(2),COMJNOD SET DEFAULT NODE\n         $DEST DEST1P1,COMDWORK,LEN=10 CONVERT DEST1 PART1\n         BZ    BADOPRND            BAD DEST, ERROR\n         ST    R1,LOWROUT          SAVE ROUTE CODE\n         CLI   DEST1P2,C' '        CHECK IF TWO PART DEST\n         BE    PRD9                NO, BRANCH\nPRD8     CLM   R1,B'0011',$ZEROES  SEE IF NODAL DESTINATION ONLY\n         BNE   BADOPRND            NO, ERROR\n         CLM   R1,B'1100',$ZEROES  SEE IF NODE NUMBER SET\n         BE    BADOPRND            NO, ERROR\n         ST    R1,COMDWORK         SET DEFAULT NODE FOR SECOND PART\n         $DEST DEST1P2,COMDWORK,LEN=10 CONVERT DEST1 PART1\n         BZ    BADOPRND            BAD DEST, ERROR\n         ST    R1,LOWROUT          SAVE ROUTE CODE\n         CLM   R1,B'1100',COMDWORK MAKE SURE NODE DEFAULTED\n         BNE   BADOPRND            NO, ERROR\nPRD9     MVC   HIGHROUT,LOWROUT    SET DEST RANGE TO EQUAL VALUES\n         CLI   DEST2P1,C' '        WAS DEST RANGE SPECIFIED\n         BE    PRD10               NO, BRANCH\n         $DEST DEST2P1,COMDWORK,LEN=10 CONVERT DEST2 PART1\n         BZ    BADOPRND            BAD DEST, ERROR\n         ST    R1,HIGHROUT         SAVE ROUTE CODE\nPRD10    CLC   HIGHROUT,LOWROUT    CHECK FOR ASCENDING RANGE\n         BL    BADOPRND            NO, ERROR\n         $RETURN RC=0              RETURN TO CALLERERAND\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\nEXIT0    LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nEXIT8    $FREEBUF (R8)             FREE THE WORK AREA\n         $FREEBUF (R10)            FREE THE WORK AREA\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "J005$SL": {"ttr": 11265, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 $SL COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED PROCESS THE $SL COMMAND   *\n*        WHEN ENTERED.  THIS COMMAND IS IMPLEMENTED AS A TYPE 5       *\n*        EXIT TO JES2, AND AS SUCH MUST INTERCEPT ONLY THE $SL        *\n*        COMMAND WHEN ENCOUNTERED.                                    *\n*                                                                     *\n*        THIS COMMAND WAS WRITTEN TO EITHER LIST ALL JOBS WHICH       *\n*        ARE WAITING FOR SETUP TO BE COMPLETED OR TO LIST THE         *\n*        ACTUAL SETUP INFORMATION FOR INDIVIDUAL JOBS.                *\n*                                                                     *\n*        IF NO OPERANDS ARE ENTERED, THE JOB QUEUE IS SEARCHED        *\n*        FOR ALL JOBS WHICH ARE AWAITING SETUP,  A MESSAGE IS         *\n*        ISSUED FOR EACH JOB.  THE MESSAGE FOR EACH IS JOB            *\n*        IS ACTUALLY WRITTEN BY AN EXIT 255 ROUTINE WILL IS           *\n*        CALLED WITH AN APPROPRIATE PARM LIST.  THE PARM LIST         *\n*        IS MAPPED WITH A USER MACRO $FCSFMTP.                        *\n*                                                                     *\n*        IF A JOB OR JOB RANGE IS REQUESTED, THE INDIVIDUAL           *\n*        SETUP STATEMENTS WILL BE LISTED FOR THE REQUESTED JOB(S)     *\n*        BY READING THE JCL IMAGES DATA SET FOR THE JOB.              *\n*                                                                     *\n*                                                                     *\n*        THE $SL COMMAND HAS THE FOLLOWING SYNTAX:                    *\n*                                                                     *\n*        $SL,                                                         *\n*             J=JN-NN                                                 *\n*             J=SN-NN                                                 *\n*             J=TN-NN                                                 *\n*                                                                     *\n*                   , JECL                                            *\n*                                                                     *\n*                                                                     *\n*        WHERE:                                                       *\n*                                                                     *\n*        JN-NN         - LIST SETUP/JECL CONTROL CARDS FOR THE        *\n*                        SPECIFIED BATCH JOB(S)                       *\n*        SN-NN         - LIST SETUP/JECL CONTROL CARDS FOR THE        *\n*                        SPECIFIED STARTED TASK(S)                    *\n*        TN-NN         - LIST SETUP/JECL CONTROL CARDS FOR THE        *\n*                        SPECIFIED TSO USER(S)                        *\n*        JECL          - LIST THE JOB CARD AND ALL OF THE JECL        *\n*                        CARDS FOR THE SPECIFIED JOB(S)               *\n*                                                                     *\n*                                                                     *\n*        NOTE                                                         *\n*                                                                     *\n*        SUPPORT FOR TSO USERS AND STARTED TASKS IS CODED ALTHOUGH    *\n*        NO JECL MUCH LESS SETUP CARDS CAN BE SUPPLIED FOR THESE      *\n*        \"JOBS\".  THE JOB CARD CAN BE LISTED WITH THE \"JCL\" OPTION.   *\n*                                                                     *\n*        JOB RANGES MAY BE DISALLOWED BY SETTING THE ASSEMBLER        *\n*        VARIABLE &RANGE TO 'NO'                                      *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *\n*                                                                     *\n*        1)  THE HASP908 MESSAGE WILL BE ISSUED FOR EACH JOB          *\n*            WHICH IS DISPLAYED.                                      *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        $HASP908 JOBNAME  WAIT EXEC X PRIO XX SSSS                   *\n*                                                                     *\n*        2)  THE HASP900 MESSAGE WILL BE ISSUED WHEN NO JOBS          *\n*            ARE IN THE SETUP QUEUE.                                  *\n*                                                                     *\n*        $HASP900 NO JOBS AWAITING SETUP!                             *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        3)  THE HASP900 MESSAGE WILL BE ISSUED FOR EACH JOB/JECL     *\n*            STATEMENT WHICH IS REQUESTED.                            *\n*                                                                     *\n*        $HASP900 JOB NNNN JOBNAME  AWAITING SETUP                    *\n*        $HASP900 JOB SETUP:  HOLD THIS JOB FOR TAPE                  *\n*        $HASP900             NUMBER 000001 000002 AND 000003         *\n*                                                                     *\n*                   OR THE FOLLOWING IF 'JECL' OPTION                 *\n*                                                                     *\n*        $HASP900 //JOBNAME  JOB (ACCOUNT,BIN),'PGMR-NAME',           *\n*        $HASP900 //         CLASS=A,MSGCLASS=X,NOTIFY=TSOUSER        *\n*        $HASP900 //*SETUP  HOLD THIS JOB FOR TAPE                    *\n*        $HASP900 //*SETUP  NUMBER 000001 000002 AND 000003           *\n*        $HASP900 //*JOBPARM K=60                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        4)  THE HASP900 MESSAGE WILL BE ISSUED IF THE REQUESTED      *\n*            JOB(S) CANNOT BE LOCATED IN THE JOB QUEUE.               *\n*                                                                     *\n*        $HASP900 JOB(S) NOT FOUND                                    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                        ERROR MESSAGES                               *\n*                                                                     *\n*        $HASP999 JOB NNNN JOBNAME  JES2 GENERATED JOB, CANNOT BE     *\n*                                   DISPLAYED                         *\n*                                                                     *\n*        $HASP999 JOB NNNN JOBNAME  CANNOT LOCATE JCL IMAGES PDDB     *\n*                                                                     *\n*        $HASP999 JOB NNNN JOBNAME  I/O ERROR ON SPOOL IN SL          *\n*                                   COMMAND, COMMAND ABORTED          *\n*                                                                     *\n*        $HASP999 JOBS(S) NOT IN SETUP QUEUE                          *\n*                                                                     *\n*        $HASP999 JOBS RANGE NOT ALLOWED FOR THE SL COMMAND           *\n*                                                                     *\n*        $HASP999 JOB NNNN JOBNAME  REQUIRED SPOOL VOLUMES NOT        *\n*                                   MOUNTED                           *\n*                                                                     *\n*        $HASP999 XXXXXXXXX INVALID OPERAND                           *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J 0 0 5 $ S L            *\n*                                                                     *\n*        01)  $AMODE       SYS1.HASPSRC                               *\n*        02)  $BUFFER      SYS1.HASPSRC                               *\n*        03)  $CAT         SYS1.HASPSRC                               *\n*        04)  $CMB         SYS1.HASPSRC                               *\n*        05)  $COMWORK     SYS1.HASPSRC                               *\n*        06)  $CWA         SYS1.HASPSRC                               *\n*        07)  $CWTO        SYS1.HASPSRC                               *\n*        08)  $DCT         SYS1.HASPSRC                               *\n*        09)  $ENTRY       SYS1.HASPSRC                               *\n*        10)  $EXCP        SYS1.HASPSRC                               *\n*        11)  $EXIT        SYS1.HASPSRC                               *\n*        12)  $EXITPL      SYS1.HASPSRC                               *\n*        13)  $GETBUF      SYS1.HASPSRC                               *\n*        14)  $FCSFMTP     SYS1.HASPSRC (USER)                        *\n*        15)  $FREEBUF     SYS1.HASPSRC                               *\n*        16)  $HASPEQU     SYS1.HASPSRC                               *\n*        17)  $HASPGBL     SYS1.HASPSRC                               *\n*        18)  $HCT         SYS1.HASPSRC                               *\n*        19)  $IOERROR     SYS1.HASPSRC                               *\n*        20)  $IOT         SYS1.HASPSRC                               *\n*        21)  $JCT         SYS1.HASPSRC                               *\n*        22)  $JOE         SYS1.HASPSRC                               *\n*        23)  $JQE         SYS1.HASPSRC                               *\n*        24)  $MIT         SYS1.HASPSRC                               *\n*        25)  $MODEND      SYS1.HASPSRC                               *\n*        26)  $MODULE      SYS1.HASPSRC                               *\n*        27)  $PADDR       SYS1.HASPSRC                               *\n*        28)  $PCE         SYS1.HASPSRC                               *\n*        29)  $PDDB        SYS1.HASPSRC                               *\n*        30)  $QLOC        SYS1.HASPSRC                               *\n*        31)  $QSE         SYS1.HASPSRC                               *\n*        32)  $RETURN      SYS1.HASPSRC                               *\n*        33)  $SAVE        SYS1.HASPSRC                               *\n*        34)  $TAB         SYS1.HASPSRC                               *\n*        35)  $WAIT        SYS1.HASPSRC                               *\n*        36)  $XIT         SYS1.HASPSRC                               *\n*        37)  IAZRESPA     SYS1.AMODGEN                               *\n*        38)  IFGRPL       SYS1.MACLIB                                *\n*        39)  MODESET      SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       2K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ005$SL  $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 $SL COMMAND PROCESSOR',                     X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $CMB,               GENERATE HASP CMB DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $CWA,               GENERATE HASP CWA DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $EXITPL,            GENERATE HASP EXITPL DSECT          X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $IOT,               GENERATE HASP IOT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $PDDB,              GENERATE HASP PDDB DSECT            X\n               $QSE,               GENERATE HASP QSE DSECT             X\n               $TAB,               GENERATE HASP TAB DSECT             X\n               $XIT,               GENERATE HASP XIT DSECT             X\n               RESPA,              GENERATE MVS  RESPA DSECT           X\n               RPL                 GENERATE MVS  IFGRPL DSECT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREAS                                           *\n*                                                                     *\n***********************************************************************\n$SLWORK  DSECT\n         DS    CL(BUFSTART-BFPDSECT) **** RESERVED BY JES2 ****\n         $FCSFMTP ,                MAP THE EXIT 255 PARM LIST\nBUFADDR  DS    F                   ADDRESS OF A JES2 BUFFER\nDOUBLE   DS    D                   DOUBLE WORD WORK AREA\nDBL      DS    D                   DOUBLE WORD WORK AREA\nLOWJOB   DS    H                   LOW RANGE JOB REQUESTED\nHIGHJOB  DS    H                   HIGH RANGE JOB REQUESTED\nRC       DS    H                   $CWTO RETURN CODE\nLTEXT    DS    H                   CURRENT LENGTH OF MESSAGE AREA\nMISCSW1  DS    X                   MISCELLANEOUS SWITCHES\nTSO      EQU   X'80'               REQUEST IS FOR A RANGE OF TSO USERS\nSTC      EQU   X'40'               REQUEST IS FOR A RANGE OF STC'S\nJOB      EQU   X'20'               REQUEST IS FOR A RANGE OF BATCH JOBS\nFOUND    EQU   X'10'               A JOB WAS FOUND FOR PROCESSING\nNOSETUP  EQU   X'04'               JOB REQUESTED HAS NO SETUP CARDS\nGOOD     EQU   X'02'               A GOOD/NORMAL JOB WAS REQUESTED\nJECL     EQU   X'01'               JECL OPTION WAS SPECIFIED\nMISCSW2  DS    X                   MISCELLANEOUS SWITCHES\nJCFND    EQU   X'80'               JOB CARD HAS BEEN FOUND\nJCEND    EQU   X'40'               JOB CARD HAS BEEN FINISHED\nCDMAX    DS    H                   MAXIMUM CARDS IN TABLE\nCDCNT    DS    H                   CURRENT COUNT OF CARDS IN TABLE\nWRKLEN   DS    H                   LENGTH OF CARD TABLE AREA\nCURRCARD DS    F                   ADDRESS OF CURRENT CARD IN TABLE\n$SLBLEN  EQU   *-$SLWORK           LENGTH OF BASIC WORK AREA\n         SPACE 3\nJ005$SL  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         TITLE 'JES2 $SL COMMAND PROCESSOR'\n         PRINT OFF\n***********************************************************************\n*                                                                     *\n*       LOCAL ASSEMBLER VARIABLES                                     *\n*                                                                     *\n***********************************************************************\n        LCLC  &RANGE\n&RANGE  SETC  'NO'\n        PRINT ON\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE005$SL  $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       - ADDRESS OF THE CURRENT OPERAND                    *\n*        R6       - INCREMENT VALUE OF 4                              *\n*        R7       - ADDRESS OF THE LAST OPERAND                       *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SEE IF THIS IS A $SL COMMAND                                 *\n*                                                                     *\n***********************************************************************\n         CLC   COMVERB(3),=C'SL '  SEE IF THIS IS THE $SL COMMAND\n         BE    SLOK                YES, GO PROCESS IT\n         CLC   COMVERB(3),=C'SL,'  SEE IF THIS IS THE $SL COMMAND\n         BNE   EXIT0               NO, BRANCH TO COMMAND OK EXIT\n***********************************************************************\n*                                                                     *\n*        GET A JES2 BUFFER FOR REENTRANCY AND                         *\n*        CLEAR THE COMMAND WORK AREA                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSLOK     $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R8,R1               SAVE WORK AREA ADDRESS\n         USING $SLWORK,R8          SET ADDRESSABILITY TO WORK AREA\n         LA    R14,$SLWORK+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS\n         LH    R15,$BUFSIZE        SET   'TO'   LENGTH\n         SLR   R0,R0               CLEAR 'FROM' ADDRESS\n         SLR   R1,R1               CLEAR 'FROM' LENGTH\n         MVCL  R14,R0              CLEAR THE BUFFER\n         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         ST    R1,BUFADDR          SAVE BUFFER ADDRESS\n         MVC   LOWJOB,=H'1'        SET LOW JOB NUMBER\n         MVC   HIGHJOB,=H'9999'    SET HIGH JOB NUMBER\n         EJECT\n*****************************************************************\n*                                                               *\n*        CHECK FOR AUTOMATIC REDIRECTION OF RESPONSES           *\n*                                                               *\n*****************************************************************\n         SPACE 1\n         TM    COMFLAG,CMBFLAGU    IS THIS A UCM\n         BZ    MSGGOOD             NO, SKIP REDIRECTION\n         TM    FBLFLG,FBLFLGC+FBLFLGR CONSOLE SET OR REMOTE SYSTEM\n         BNZ   MSGRPT              SKIP AUTOMATIC L=CCA\n         LA    R1,4                LOAD REDIRECT OFFSET FOR $SL\n*                                  SAME AS FOR $DJ\n         BCTR  R1,0                REDUCE BY 1\n         SLL   R1,1                DOUBLE\n         SLR   R2,R2               ZERO REGISTER FOR IC\n         IC    R2,COMUCM           PICK UP CURRENT UCM ID\n         L     R14,$COMEXTN        POINT TO CONSOLE WORK AREA\n         USING CWA,R14             SET ADDRESSABILITY TO CWA\n         CH    R2,CWAOCON          SEE IF EXCEEDS MAXIMUM\n         BH    MSGRPT              YES, ERROR, NO AUTOMATIC REDIRECTION\n         MH    R2,CWALCON          MULTIPLY BY LENGTH OF EACH ENTRY\n         AR    R1,R2               COMBINE OFFSETS\n         LA    R1,CWARESP-CWACONL(R1) POINT TO CORRECT CWA ENTRY\n         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID\n         TM    FBLFLG,FBLFLGA      HAS AREA BEEN SET\n         BO    MSGRPT              YES, SKIP AUTOMATIC REDIRECTION\n         MVC   COMUCMA,CWACONA(R1) SET NEW AREA\n         DROP  R14                 DROP ADDRESSABILITY TO CWA\nMSGRPT   BAL   R10,MSGVCCA         VERIFY CCA (NO RETURN IF BAD)\n         CLI   COMUCMA,0           TEST FOR DISPLAY AREA\n         BZ    MSGGOOD             IF NOT, SKIP\n         MVI   COMLINET,X'80'      SET CONTROL LINE\n         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND\n         MVI   COMLINET,X'20'      SET DATA LINE\nMSGGOOD  DS    0H\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXAMINE THE COMMAND OPERANDS                                 *\n*                                                                     *\n***********************************************************************\nCKOPNDS  BXH   R5,R6,JQESCAN       IF NO MORE EXIT\n         L     R1,0(R5)            POINT TO OPERAND\n         CLC   0(2,R1),=C'J='      SEE IF INDIVIDUAL JOBS REQUESTED\n         BE    JOBOPT              YES, BRANCH\n         CLC   0(5,R1),=C'JECL '   SEE IF JECL OPTION TAKEN\n         BE    JECLOPT             YES, BRANCH\n         CLC   0(5,R1),=C'JECL,'   SEE IF JECL OPTION TAKEN\n         BE    JECLOPT             YES, BRANCH\n         B     BADOPRND            NO, ERROR\n***********************************************************************\n*        SET THE JECL OPTION                                          *\n***********************************************************************\n         SPACE 1\nJECLOPT  OI    MISCSW1,JECL        TURN ON THE JECL OPTION\n         B     CKOPNDS             GO GET NEXT OPTION\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXTRACT THE JOB/TSU/STC RANGE FROM THE COMMAND BUFFER        *\n*                                                                     *\n***********************************************************************\nJOBOPT   CLI   2(R1),C'J'          SEE IF BATCH JOBS REQUESTED\n         BE    SLENT               YES, BRANCH\n         CLI   2(R1),C'T'          SEE IF TSO USERS REQUESTED\n         BE    QTENT               YES, BRANCH\n         CLI   2(R1),C'S'          SEE IF STARTED TASKS REQUESTED\n         BE    QSENT               YES, BRANCH\n         B     BADOPRND            NO, BAD OPERAND\nSLENT    OI    MISCSW1,JOB         SET JOB RANGE FLAG\n         B     SETRANGE            AND ENTER COMMON SECTION\nQTENT    OI    MISCSW1,TSO         SET TSU RANGE FLAG\n         B     SETRANGE            AND ENTER COMMON SECTION\nQSENT    OI    MISCSW1,STC         SET STC RANGE FLAG\nSETRANGE LA    R14,3(R1)           POINT TO START OF JOB NUMBER\n         LA    R1,3(R1)            POINT TO OPERAND\n         LR    R2,R1               SAVE START OF OPERAND ADDRESS\n         XR    R15,R15             SET LENGTH\nSETRNG01 CLI   0(R14),C' '         END OF OPERAND\n         BE    SETRNG02            YES, BRANCH\n         CLI   0(R14),C'-'         END OF OPERAND\n         BE    SETRNG02            YES, BRANCH\n         CLI   0(R14),C','         END OF OPERAND\n         BE    SETRNG02            YES, BRANCH\n         CLI   0(R14),C'0'         SEE IF NUMERIC\n         BL    BADOPRND            NO, ERROR\n         CLI   0(R14),C'9'         SEE IF NUMERIC\n         BH    BADOPRND            NO, ERROR\n         LA    R15,1(R15)          ADD 1 TO LENGTH\n         LA    R14,1(R14)          INCREMENT TO NEXT CHAR OF JOB NBR\n         B     SETRNG01            LOOP\nSETRNG02 LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'6'           TEST LENGTH\n         BH    BADOPRND            GREATER THAN 6, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,PKJOBNO         PACK JOB NUMBER\n         CVB   R15,DOUBLE          CONVERT TO BINARY\n         LTR   R15,R15             TEST JOB NUMBER\n         BZ    BADOPRND            YES, BRANCH\n         CH    R15,=H'9999'        SEE IF EXCEEDS MAXIMUM\n         BH    BADOPRND            YES, BRANCH\n         STH   R15,LOWJOB          SAVE AS LOW JOB NUMBER\n         STH   R15,HIGHJOB         AND AS HIGH JOB NUMBER\n         CLI   0(R14),C'-'         SEE IF JOB RANGE REQUESTED\n         BNE   CKOPNDS             NO, BRANCH\n         LA    R14,1(R14)          INCREMENT PAST '-'\n         LR    R2,R14              SAVE START OF OPERAND ADDRESS\n         XR    R15,R15             SET LENGTH\nSETRNG03 CLI   0(R14),C' '         END OF OPERAND\n         BE    SETRNG04            YES, BRANCH\n         CLI   0(R14),C','         END OF OPERAND\n         BE    SETRNG04            YES, BRANCH\n         CLI   0(R14),C'0'         SEE IF NUMERIC\n         BL    BADOPRND            NO, ERROR\n         CLI   0(R14),C'9'         SEE IF NUMERIC\n         BH    BADOPRND            NO, ERROR\n         LA    R15,1(R15)          ADD 1 TO LENGTH\n         LA    R14,1(R14)          INCREMENT TO NEXT CHAR OF JOB NBR\n         B     SETRNG03            LOOP\nSETRNG04 LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'6'           TEST LENGTH\n         BH    BADOPRND            GREATER THAN 6, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,PKJOBNO         PACK JOB NUMBER\n         CVB   R15,DOUBLE          CONVERT TO BINARY\n         LTR   R15,R15             TEST JOB NUMBER\n         BZ    BADOPRND            YES, BRANCH\n         CH    R15,=H'9999'        SEE IF EXCEEDS MAXIMUM\n         BH    BADOPRND            YES, BRANCH\n         STH   R15,HIGHJOB         AND AS HIGH JOB NUMBER\n         AIF   ('&RANGE' NE 'NO').RANGE\n         CLC   LOWJOB,HIGHJOB      SEE IF JOB RANGE REALLY SPECIFIED\n         BE    CKOPNDS             NO, BRANCH\n         MVC   COMMAND(L'MSG8),MSG8 SET NO JOB RANGE MESSAGE\n         LA    R0,L'MSG8           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n.RANGE   ANOP\n         B     CKOPNDS             GO SEE IF OTHER OPERANDS\nPKJOBNO  PACK  DOUBLE,0(0,R2)      *** EXECUTE ONLY ***\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SCAN THE JOB QUEUE FOR THE JOB LIST                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nJQESCAN  LH    R1,LOWJOB           LOAD JOB NUMBER\n         $QLOC (R1)                GET JQE FOR THIS JOB NUMBER\n         BZ    NEXTJQE             GET NEXT JQE IF NOT FOUND\n         LR    R9,R1               SAVE JQE ADDRESS\n         USING JQE,R9              SET ADDRESSABILITY TO JQE\n         TM    MISCSW1,JOB+STC+TSO SEE IF LOOKING FOR INDIVIDUAL JOB\n         BZ    JFND                NO, GO PROCESS JOB LIST REQUEST\n         TM    JQEFLAG3,JQE3JOB    IS THIS A BATCH JOB\n         BNZ   CKSTC               NO, SEE IF STARTED TASK\n         TM    MISCSW1,JOB         ARE WE LOOKING FOR A BATCH JOB\n         BO    JQEFND              YES, GO PROCESS IT\n         B     NEXTJQE             NO, GET NEXT JQE\nCKSTC    TM    JQEFLAG3,JQE3STC    IS THIS A STC\n         BNO   CKTSU               NO, SEE IF A TSO USER\n         TM    MISCSW1,STC         ARE WE LOOKING FOR A STARTED TASK\n         BO    JQEFND              YES, GO PROCESS IT\n         B     NEXTJQE             NO, GET NEXT JQE\nCKTSU    TM    MISCSW1,TSO         ARE WE LOOKING FOR A TSO USER\n         BO    JQEFND              YES, GO PROCESS IT\nNEXTJQE  LH    R1,LOWJOB           LOAD PREVIOUS JOB NUMBER\n         LA    R1,1(R1)            ADD 1 TO JOB NUMBER\n         STH   R1,LOWJOB           SAVE NEW JOB NUMBER\n         CH    R1,HIGHJOB          SEE IF END OF RANGE\n         BNH   JQESCAN             NO, LOOP\n         TM    MISCSW1,JOB+STC+TSO SEE IF LOOKING FOR INDIVIDUAL JOB\n         BZ    TSTGOOD2            NO, GO PROCESS JOB LIST REQUEST\n         TM    MISCSW1,FOUND       SEE IF ANY JOBS FOUND\n         BO    TSTGOOD1            YES, SEE IF GOOD JOB FOUND\n         MVC   COMMAND(L'MSG1),MSG1 SET NO JOBS FOUND MESSAGE\n         LA    R0,L'MSG1           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=900    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\nTSTGOOD1 TM    MISCSW1,GOOD        SEE IF A GOOD JOB FOUND\n         BO    EXIT8               YES, BYPASS ERROR MESSAGE\n         TM    MISCSW1,NOSETUP     NON-SETUP JOB REQUESTED\n         BZ    EXIT8               NO, AN INDIVIDUAL MSG ALREADY SENT\n         MVC   COMMAND(L'MSG7),MSG7 SET JOB NOT IN HELD QUEUE MESSAGE\n         LA    R0,L'MSG7           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\nTSTGOOD2 TM    MISCSW1,FOUND       SEE IF ANY JOBS FOUND\n         BO    EXIT8               YES, GET OUT\n         MVC   COMMAND(L'MSG10),MSG10 SET NO JOBS FOUND MESSAGE\n         LA    R0,L'MSG10          SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=900    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\nJQEFND   MVI   COMMAND,C' '        BLANK ENTIRE\n         MVC   COMMAND+1(199),COMMAND  COMMAND\n         MVC   COMMAND+201(200),COMMAND+200  AREA\n         LH    R1,LOWJOB           LOAD JOB NUMBER\n         MVC   COMMAND(3),=C'JOB'  ASSUME BATCH JOB\n         TM    JQEFLAG3,JQE3JOB    IS IT A BATCH JOB\n         BZ    JQEFND01            YES, BRANCH\n         MVC   COMMAND(3),=C'STC'  ASSUME STARTED TASK\n         TM    JQEFLAG3,JQE3STC    IS IT A STC\n         BO    JQEFND01            YES, BRANCH\n         MVC   COMMAND(3),=C'TSU'  MUST BE A TSO USER\nJQEFND01 OI    MISCSW1,FOUND       TURN ON JOB FOUND INDICATOR\n         TM    MISCSW1,JECL        SEE IF WANT JECL/JOB CARD\n         BO    JQEFND02            YES, DISPLAY IT ANYWAY\n         TM    JQEXFLG2,JQEXSETP   SEE IF JOB HAS SETUP CARDS\n         BZ    NOTSETUP            NO, BYPASS THIS JOB\nJQEFND02 CVD   R1,DOUBLE           CONVERT JOB NUMBER TO PACKED\n         MVC   DBL(6),=X'402020202120' SET EDIT MASK\n         ED    DBL(6),DOUBLE+5     EDIT JOB NUMBER\n         MVC   COMMAND+3(5),DBL+1  MOVE JOB NUMBER TO MESSAGE\n         MVC   COMMAND+10(8),JQEJNAME MOVE JOB NAME TO MESSAGE\n         LH    R14,$JQEMSKL        GET JQE SPOOL MASK LEN-1\n         EX    R14,MVSPMASK        SAVE SPOOL MASK USED BY THIS JOB\n         NC    $SPMSKWA,$SPLSLCT   'AND' WITH QUALIFYING SPOOLS\n         EX    R14,CKSPMASK        SEE IF ALL REQUIRIED SPOOLS AVAIL\n         BNE   NOSPOOLS            NO, ERROR\nJQEFND03 MVI   MISCSW2,0           TURN OFF MISC SWITCHES\n         TM    JQEFLAG3,JQE3SYSD   IS THIS A JES2 CREATED JOB\n         BZ    JQEFND04            NO, BRANCH\n         MVC   COMMAND+19(L'MSG2),MSG2 SET MSG TEXT\n         $CWTO L=L'MSG2+19,MSGID=999 WRITE THE MSG TO THE OPERATOR\n         B     NEXTJQE             GO GET NEXT JQE\nJQEFND04 LH    R3,$BUFSIZE         LOAD LENGTH OF BUFFER\n         SH    R3,=Y($SLBLEN-(BUFSTART-BFPDSECT)) SUBTR LEN OF BASIC\n         STH   R3,WRKLEN           SAVE LENGTH OF WORK AREA\n         LA    R2,$SLWORK+$SLBLEN  POINT TO CARD SECTION OF BUFFER\n         ST    R2,CURRCARD         SAVE ADDRESS OF FIRST CARD\n         XR    R5,R5               SET MOVE LENGTH TO ZERO\n         ICM   R5,B'1000',=C' '    SET PAD CHARACTER\n         MVCL  R2,R4               BLANK CARD AREA\n         LH    R2,WRKLEN           RELOAD LENGTH OF WORK AREA\n         SRDA  R2,32               SHIFT TO ODD REG OF PAIR\n         D     R2,=F'70'           CALCULATE AVAILABLE CARD SLOTS\n         STH   R3,CDMAX            SAVE MAXIMUM SLOTS\n         XC    CDCNT,CDCNT         ZERO THE CARD COUNT\n         LA    R3,PCEDADCT         POINT TO DA DCT\n         L     R4,BUFADDR          GET A BUFFER ADDRESS\n         USING BFPDSECT,R4         SET ADDRESSABILITY TO THE BUFFER\n         MVI   PCEDEVTP,PCEDARD    INDICATE READ REQUEST\n         ST    R4,PCEBUFAD         SET THE BUFFER ADDRESS\n         L     R15,JQETRAK         GET THE JCT TRACK ADDRESS\n         ST    R15,PCESEEK         SET THE TRACK ADDRESS\n         LA    R15,IOBCCW1         LOAD START ADDRESS OF CCW'S\n         ST    R15,IOBSTART        STORE ADDRESS IN BUFFER\n         $EXCP (R3)                READ IN THE JCT\nWAITIO1  $WAIT IO                  WAIT FOR IO TO COMPLETE\n         TM    BUFECBCC,X'7F'      TEST COMPLETION OF OUR IO\n         BZ    WAITIO1             NOT COMPLETE, GO WAIT AGAIN\n         BM    IOERROR             GO PROCESS I/O ERROR\n***********************************************************************\n*                                                                     *\n*        AT THIS POINT WE HAVE SUCCESSFULLY READ THE JCT              *\n*                                                                     *\n***********************************************************************\n         LR    R10,R4              MOVE JCT ADDRESS TO REG 10\n         USING JCT,R10             SET ADDRESSABILITY TO JCT\n         L     R0,$JOBQPTR         GET ADDR OF JOB QUEUE ORIGIN\n         AL    R0,JCTJQE           ADD JQE OFFSET FROM JCT\n         CLR   R0,R9               SEE IF IT MATCHES OUR JQE ADDRESS\n         BNE   IOERROR             NO, ERROR\n***********************************************************************\n*                                                                     *\n*        AT THIS POINT WE HAVE A VALID JCT FOR THE JOB                *\n*                                                                     *\n***********************************************************************\n         L     R15,JCTIOT          GET FIRST IOT TRACK ADDR\nREADIOT  ST    R15,PCESEEK         SET SEEK ADDRESS FOR READ\n         $EXCP (R3)                READ THE IOT\nWAITIO2  $WAIT IO                  WAIT FOR IO TO COMPLETE\n         TM    BUFECBCC,X'7F'      TEST COMPLETION OF OUR IO\n         BZ    WAITIO2             NOT COMPLETE GO WAIT AGAIN\n         BM    IOERROR             GO PROCESS I/O ERROR\n***********************************************************************\n*                                                                     *\n*        AT THIS POINT WE HAVE SUCCESSFULLY READ THE IOT              *\n*        NOW ATTEMPT TO FIND THE JCL IMAGES PDDB                      *\n*                                                                     *\n***********************************************************************\n         DROP  R10                 DROP ADDRESSABILITY TO JCT\n         LR    R10,R4              SAVE ADDRESS OF IOT BUFFER\n         DROP  R4                  DROP ADDRESSABILITY TO BUFFER\n         USING IOT,R4              SET ADDRESSABILITY TO IOT\n         L     R10,IOTPDDB         LOAD OFFSET TO FIRST PDDB\n         LA    R10,0(R10,R4)       POINT TO FIRST PDDB IN THIS IOT\n         L     R15,IOTPDDBP        LOAD OFFSET PAST LAST PDDB\n         LA    R15,0(R15,R4)       POINT PAST LAST PDDB IN THIS IOT\nPDDBLOOP CR    R15,R10             LAST PDDB IN THIS IOT\n         BNH   NEXTIOT             YES, GO GET NEXT IOT\n         CLC   PDBDSKEY-PDB(2,R10),=Y(PDBINJCL) JCL IMAGE DATA SET\n         BE    READJCL1            YES, GO PROCESS IT\n         LA    R10,PDBLENG(,R10)   NO, POINT TO NEXT PDDB IN IOT\n         B     PDDBLOOP            GO CHECK NEXT PDDB\nNEXTIOT  ICM   R15,B'1111',IOTIOTTR   YES, GET NEXT IOT TRACK ADDRESS\n         BNZ   READIOT             GO READ NEXT IOT IF PRESENT\n         MVC   COMMAND+19(L'MSG3),MSG3 SET IN MSG TEXT\n         $CWTO L=L'MSG3+19,MSGID=999 WRITE THE MSG TO THE OPERATOR\n         B     ENDJQE              GO CLEANUP FOR THIS JOB\n         DROP  R4                  DROP ADDRESSABILITY TO IOT\n         USING BFPDSECT,R4         SET ADDRESSABILITY TO THE BUFFER\nREADJCL1 L     R15,PDBMTTR-PDB(R10) POINT TO START OF JCL DATA SET\nREADJCL2 ST    R15,PCESEEK         SET FOR READ\n         $EXCP (R3)                READ THE DATA SET\nWAITIO3  $WAIT IO                  WAIT FOR IO TO COMPLETE\n         TM    BUFECBCC,X'7F'      TEST COMPLETION OF OUR IO\n         BZ    WAITIO3             NOT COMPLETE GO WAIT AGAIN\n         BM    IOERROR             GO PROCESS I/O ERROR\n***********************************************************************\n*                                                                     *\n*        AT THIS POINT WE HAVE A BUFFER CONTAINING THE JCL            *\n*        STATEMENTS FOR A JOB                                         *\n*                                                                     *\n***********************************************************************\n         LA    R5,BUFSTART+10      POINT TO DATA\n         SLR   R6,R6               CLEAR REGISTER FOR IC\nGETCARD  IC    R6,0(,R5)           GET LENGTH\n         TM    MISCSW2,JCEND       HAS THE JOB CARD BEEN FINISHED\n         BO    CKCARD              YES, BRANCH\nJOBCD    TM    MISCSW2,JCFND       SEE IF FIRST JOB CARD FOUND\n         BO    JOBCD1              YES, BRANCH\n         OI    MISCSW2,JCFND       TURN ON JOB CARD FOUND SWITCH\n         B     CTLFND              GO SAVE THIS CARD\nJOBCD1   CLC   3(3,R5),=C'// '     CONTINUATION OF JOB CARD\n         BE    CTLFND              YES, GO SAVE IT\n         OI    MISCSW2,JCEND       TURN ON END OF JOB CARD PROCESSING\nCKCARD   CLC   3(3,R5),=C'//*'     IS IT POTENTIAL JES2 JECL CARD\n         BNE   NEXTCARD            NO, IGNORE IT.\n***********************************************************************\n*                                                                     *\n*        AT THIS POINT WE HAVE A JES2 JECL CONTROL CARD.              *\n*        SEARCH THE JECL TABLE FOR THOSE THAT WE ARE INTERESTED       *\n*        IN.                                                          *\n*                                                                     *\n***********************************************************************\n         XR    R15,R15             CLEAR REGISTER FOR IC\n         LA    R14,CTLTABLE        BEGINNING OF TABLE.\nCTLLOOP  CLI   0(R14),X'FF'        SEE IF END OF TABLE\n         BE    NEXTCARD            YES, IGNORE THIS CARD\n         IC    R15,0(R14)          LOAD MACHINE LENGTH OF THIS ENTRY\n         EX    R15,COMPTBL         SEE IF ONE OF OUR CONTROL CARDS\n         BE    CTLFND              YES, GO PROCESS\n         LA    R14,9(,R14)         POINT TO NEXT TABLE ENTRY\n         B     CTLLOOP             LOOP\nCOMPTBL  CLC   6(0,R5),1(R14)      *** EXECUTE ONLY ***\nNEXTCARD LA    R5,3(R5,R6)         POINT TO NEXT CARD IN THE BUFFER\n         CLI   0(R5),X'FF'         END OF THE BUFFER\n         BE    NEXTBUFF            YES, GO GET NEXT BUFFER\n         CLI   1(R5),X'FF'         TEST NEXT BYTE ALSO FOR END OF BUFF\n         BE    NEXTBUFF            YES, GO GET NEXT BUFFER\n         B     GETCARD             TO PROCESS NEXT CARD\nCTLFND   L     R15,CURRCARD        LOAD POINTER TO NEXT SAVE CARD ENTRY\n         BCTR  R6,0                MAKE MACHINE LENGTH\n         EX    R6,MOVECARD         MOVE CARD TO SAVE CARD ENTRY\n         LA    R6,1(R6)            RESTORE LENGTH\n         LA    R15,70(R15)         POINT TO NEXT CARD TABLE ENTRY\n         ST    R15,CURRCARD        AND SAVE ADDRESS\n         LH    R15,CDCNT           LOAD NUMBER OF ENTRIES IN TABLE\n         LA    R15,1(,R15)         ADD 1 TO NUMBER\n         STH   R15,CDCNT           SAVE NEW NUMBER OF ENTRIES IN TABLE\n         CH    R15,CDMAX           HAVE WE REACHED OUR LIMIT\n         BL    NEXTCARD            NO, GO GET NEXT CARD\n         B     PUTCDS              YES, QUIT LOOKING\nNEXTBUFF ICM   R15,15,HDBNXTRK     NEXT BUFFER ADDRESS\n         BNZ   READJCL2            END OF CHAIN IF ZERO\n***********************************************************************\n*                                                                     *\n*        AT THIS POINT WE HAVE A SAVED ALL JECL CONTROL CARDS         *\n*        AND ARE READY TO WRITE THEM TO THE OPERATOR.                 *\n*                                                                     *\n***********************************************************************\nPUTCDS   OI    MISCSW1,GOOD        TURN ON GOOD JOB PROCESSED IND\n         LA    R2,$SLWORK+$SLBLEN  POINT TO CARD SECTION OF BUFFER\n         LH    R5,CDCNT            LOAD NUMBER OF ENTRIES IN TABLE\n         TM    MISCSW1,JECL        SEE IF ALL JECL WANTED\n         BO    PUTLP2              YES, BRANCH\n         TM    JQEXFLG2,JQEXSETP   HAS JOB EVER BEEN SETUP\n         BZ    NOSET               NO, ERROR\n         MVC   COMMAND+19(14),=C'AWAITING SETUP' ASSUME STILL WAITING\n         TM    JQEXFLG2,JQEXWSET   SEE IF WAITING FOR SETUP\n         BO    PUTCDS1             YES, BRANCH\n         MVC   COMMAND+19(14),=C'HAS BEEN SETUP' SET ALREADY SETUP MSG\nPUTCDS1  $CWTO L=33,MSGID=900      WRITE FIRST LINE OF MESSAGE\n         MVC   COMMAND(12),=C'JOB SETUP:  ' IDENTIFY FIRST SETUP MSG\nPUTLP1   CLC   0(8,R2),=C'//*SETUP' SEE IF THIS IS A SETUP CARD\n         BNE   PUTLP1A             NO, BRANCH\n         MVC   COMMAND+12(61),9(R2) MOVE THE MESSAGE PORTION TO BUFFER\n         $CWTO L=72,MSGID=900      WRITE THE MSG TO THE OPERATOR\n         MVC   COMMAND(10),=10C' ' BLANK THE FIRST LINE TITLE AREA\nPUTLP1A  LA    R2,70(R2)           POINT TO THE NEXT CARD\n         BCT   R5,PUTLP1           LOOP\n         B     ENDJQE              GET OUT\nPUTLP2   MVC   COMMAND+10(70),0(R2) MOVE A CARD TO THE WTO BUFFER\n         $CWTO L=80,MSGID=900      WRITE THE MSG TO THE OPERATOR\n         LA    R2,70(R2)           POINT TO THE NEXT CARD\n         BCT   R5,PUTLP2           LOOP\nENDJQE   B     NEXTJQE             GO GET NEXT JQE\nIOERROR  $IOERROR (R4)             ISSUE IOERROR MESSAGE\n         MVC   COMMAND+19(L'MSG4),MSG4 MOVE ERROR MSG TO BUFFER\n         LA    R0,L'MSG4+19        SET LENGTH OF MESSAGE\n         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     ENDJQE              GO CLEAN UP FOR NEXT JOB\nNOTSETUP OI    MISCSW1,NOSETUP     TURN ON NOT SETUP IND\n         B     NEXTJQE             GO GET NEXT JQE\nNOSPOOLS MVC   COMMAND+19(L'MSG5),MSG5 MOVE MESSAGE TO BUFFER\n         LA    R0,L'MSG5+19        SET LENGTH\n         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     NEXTJQE             GO GET NEXT JQE\nNOSET    MVC   COMMAND+19(L'MSG9),MSG9 MOVE MESSAGE TO BUFFER\n         LA    R0,L'MSG9+19        SET LENGTH\n         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     NEXTJQE             GO GET NEXT JQE\n         SPACE 1\nMOVECARD MVC   0(*-*,R15),3(R5)       *** EXECUTE ONLY ***\nMVSPMASK MVC   $SPMSKWA(0),JQESUMSK   *** EXECUTE ONLY ***\nCKSPMASK CLC   $SPMSKWA(0),JQESUMSK   *** EXECUTE ONLY ***\n*\n         DROP  R4                  DROP ADDRESSABILITY TO BUFFER / IOT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BUILD BASIC PORTION OF MESSAGE                               *\n*                                                                     *\n***********************************************************************\nJFND     TM    JQEXFLG2,JQEXWSET   SEE IF WAITING FOR SETUP\n         BNO   NEXTJQE             NO, GO GET NEXT JQE\n         MVI   QBITS,QCNV+QXEQ     EXECUTION QUEUE ONLY\n         MVI   QBITS+1,0           NO ACTIVE JOBS OR DEVICE ACTIVITY\n         MVI   QMISC,SYSALL        ALL SYSTEMS\n         MVI   QFILT1,0            NO SPECIAL FILTERING\n         MVI   QFILT2,0            NO SPECIAL FILTERING\n         MVI   QCLASS,0            ZERO THE XEQ/CNV CLASS\n         XC    OWNERID,OWNERID     NO OWNERID SELECTION\n         L     R10,BUFADDR         GET A BUFFER ADDRESS\n***********************************************************************\n*                                                                     *\n*        CALL EXIT 255 TO FORMAT THE JOB INFORMATION                  *\n*                                                                     *\n***********************************************************************\n         LA    R1,QBITS            POINT TO EXIT PARM LIST\nEXIT255  $EXIT 255,ENVIRON=JES2,MAXRC=8 CALL FORMAT ROUTINE\n         CH    R15,=H'8'           SEE IF CONSOLE BUFFER SHORTAGE\n         BE    EXIT8               YES, GET OUT\n         CH    R15,=H'4'           SEE IF JOB PASSED FILTERING\n         BE    NEXTJQE             NO, DO NOT TURN ON JOB FOUND\n         OI    MISCSW1,FOUND       TURN ON JOB FOUND INDICATOR\n         B     NEXTJQE             GO GET NEXT JOB\n         EJECT\n**********************************************************************\n*                                                                    *\n*             SUBROUTINE TO VERIFY CONSOLE/AREA                      *\n*                                                                    *\n**********************************************************************\n         SPACE 1\nMSGVCCA  TM    FBLFLG,FBLFLGR      SEE IF REMOTE SYSTEM UCM\n         BOR   R10                 YES, UCM AND AREA ARE OK\n         L     R2,$COMEXTN         POINT TO CONSOLE WORK AREA\n         USING CWA,R2              SET ADDRESSABILITY TO CWA\n         MVC   XASCID(1),COMUCM    SET UCM ID\n         MVC   XASDID(1),COMUCMA   SET AREA ID\n         CLI   XASDID,0            SEE IF AREA ID SPECIFIED\n         BNZ   MSGSSAOP            YES, BRANCH\n         MVI   XASDID,C'Z'         NO,  FORCE AREA Z\nMSGSSAOP MVC   XAU(1),COMUCM       TELL OS SOURCE IS SAME AS OUTPUT\n         MVI   XAN,X'22'           SET ID FOR VERIFIER\n         MODESET EXTKEY=ZERO       GET KEY 0\n         L     R15,CWA7603D        POINT TO OS VERIFICATION ROUTINE\n         $AMODE 24,PUSHR=0,R=R14   GO TO AMODE 24\n         BALR  R14,R15             ENTER IT\n         $AMODE POPR=0,R=R14       RETURN TO ORIGINAL AMODE\n         MODESET EXTKEY=HASP       RETURN TO KEY 1\n         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR\n         BNHR  R10                 NO, RETURN TO CALLER\n         SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,B'0011',COMUCM   PICK UP UCM AND AREA ID\n         MVI   COMUCMA,0           FORCE NO DISPLAY AREA\n         CH    R15,=H'12'          SEE IF CONSOLE DOWN\n         BNE   *+16                NO, DO NOT SET LOGICAL CONSOLE\n         MVC   COMFLAG(4),MOWTOL   DESTROY APPARENT SOURCE INFO\n         MVC   COMOUT,MOWTOL+(COMOUT-COMFLAG) OMITTING CNTL FIELD\n         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND\n         MVC   COMMAND(MBVINVL),MBVINV SET ERROR MESSAGE TEXT\n         STC   R3,MBVINVA          SET AREA\n         SRL   R3,8                ALIGN CONSOLE ID\n         CVD   R3,$DOUBLE          CONVERT TO PACKED\n         MVC   DBL(4),=X'F0212020' SET EDIT MASK\n         ED    DBL(4),$DOUBLE+6    EDIT CONSOLE ID TO AREA\n         MVC   MBVINVC,DBL+2       MOVE CONSOLE ID TO MESSAGE\n         MVC   COMMAND+MBVINVL(8),COMACEID MOVE IDENTIFIER\n         $CWTO L=MBVINVL,MSGID=999 WRITE ERROR MESSAGE TO CONSOLE\n         B     EXIT8               GET OUT\n         DROP  R2                  DROP ADDRESSABILITY TO CWA\n         EJECT\n**********************************************************************\n*                                                                    *\n*       R E D I R E C T   R O U T I N E   C O N S T A N T S          *\n*                                                                    *\n**********************************************************************\n         SPACE 1\nMOWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX\nMBVINV   DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '\nMBVINVL  EQU   *-MBVINV\nMBVINVC  EQU   COMMAND+MBVINVL-16,2\nMBVINVA  EQU   MBVINVC+2,1\nFBLFLG   EQU   COMEWORK+2          FLAG BYTE\nCOMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER\nFBLFLGR  EQU   1                   UCM COMMAND FROM REMOTE SYSTEM\nFBLFLGC  EQU   2                   CONSOLE HAS BEEN SPECIFIED\nFBLFLGA  EQU   4                   AREA HAS BEEN SPECIFIED\n         EJECT\n***********************************************************************\n*        CONSTANTS FOR $SL                                            *\n***********************************************************************\n         SPACE 3\nBLANKS   DC    CL20' '             STRING OF 20 BLANKS\n         SPACE 3\nMSG1     DC    CL16'JOB(S) NOT FOUND'\nMSG2     DC    C' JES2 GENERATED JOB, CANNOT BE DISPLAYED'\nMSG3     DC    C' CANNOT LOCATE JCL IMAGES PDDB'\nMSG4     DC    C' I/O ERROR ON SPOOL IN SL COMMAND, COMMAND ABORTED'\nMSG5     DC    C' REQUIRED SPOOL VOLUMES NOT MOUNTED'\nMSG6     DC    C' INVALID OPERAND'\nMSG7     DC    C'JOB(S) NOT IN SETUP QUEUE'\nMSG8     DC    C'JOB RANGE NOT ALLOWED FOR THE SL COMMAND'\nMSG9     DC    C'NO SETUP INFORMATION AVAILABLE'\nMSG10    DC    C'NO JOBS AWAITING SETUP!'\n         SPACE 3\nCTLTABLE DS    0H                  CONTROL CARD TABLE\n         DC    X'06',CL8'JOBPARM '\n         DC    X'05',CL8'NOTIFY  '\n         DC    X'04',CL8'SETUP   '\n         DC    X'04',CL8'ROUTE   '\n         DC    X'03',CL8'XMIT    '\n         DC    X'02',CL8'XEQ     '\n         DC    X'05',CL8'THREAD  '\n         DC    X'06',CL8'EXCLUDE '\n         DC    X'06',CL8'RELEASE '\n         DC    X'FF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INVALID $SL OPERAND                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nBADOPRND L     R1,0(0,R5)          POINT TO INVALID OPERAND\n         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG\n         MVC   COMMAND+9(L'MSG6),MSG6 SET ERROR MESSAGE\n         LA    R0,L'MSG6+9         SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\nEXIT0    LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nEXIT8    L     R10,BUFADDR         LOAD BUFFER ADDRESS\n         $FREEBUF (R10)            FREE THE BUFFER\n         $FREEBUF (R8)             FREE THE WORK AREA\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "J005$SR": {"ttr": 11526, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "J005$SR  TITLE 'JES2 $SR COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED PROCESS THE $SR COMMAND   *\n*        WHEN ENTERED.  THIS COMMAND IS IMPLEMENTED AS A TYPE 5       *\n*        EXIT TO JES2, AND AS SUCH MUST INTERCEPT ONLY THE $SR        *\n*        COMMAND WHEN ENCOUNTERED.                                    *\n*                                                                     *\n*                                                                     *\n*        THE $SR COMMAND HAS THE FOLLOWING SYNTAX:                    *\n*                                                                     *\n*        $SR                                                          *\n*             JN-NN                                                   *\n*             SN-NN                                                   *\n*             TN-NN                                                   *\n*                                                                     *\n*        WHERE:                                                       *\n*                                                                     *\n*        JN-NN         - LIST JOB INFORMATION FOR THE SPECIFIED       *\n*                        BATCH JOB(S)                                 *\n*        SN-NN         - LIST JOB INFORMATION FOR THE SPECIFIED       *\n*                        STARTED TASK(S)                              *\n*        TN-NN         - LIST JOB INFORMATION FOR THE SPECIFIED       *\n*                        TSO USER(S)                                  *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *\n*                                                                     *\n*        1)  THE HASP90X MESSAGES ARE ISSUSED UPON COMPLETION OF      *\n*            COMMAND                                                  *\n*                                                                     *\n*        $HASP901 JOB NNN XXXXXXXX HAS BEEN SETUP                     *\n*                                                                     *\n*        $HASP902 JOB NNN XXXXXXXX NOT AWAITING SETUP                 *\n*                                                                     *\n*        2)  THE HASP900 MESSAGE WILL BE ISSUED WHEN NONE             *\n*            OF THE REQUESTED JOBS CANNOT BE FOUND.                   *\n*                                                                     *\n*        $HASP900  JOB(S) NOT FOUND                                   *\n*                                                                     *\n*        3)  THE HASP999 MESSAGE WILL BE ISSUED FOR ALL               *\n*            ERRORS.                                                  *\n*                                                                     *\n*        $HASP999 XXXXXXXXX INVALID OPERAND                           *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J 0 0 5 $ S R            *\n*                                                                     *\n*        01)  $AMODE       SYS1.HASPSRC                               *\n*        02)  $BUFFER      SYS1.HASPSRC                               *\n*        03)  $CAT         SYS1.HASPSRC                               *\n*        04)  $CMB         SYS1.HASPSRC                               *\n*        05)  $COMWORK     SYS1.HASPSRC                               *\n*        06)  $CWA         SYS1.HASPSRC                               *\n*        07)  $CWTO        SYS1.HASPSRC                               *\n*        08)  $DAS         SYS1.HASPSRC                               *\n*        09)  $DCT         SYS1.HASPSRC                               *\n*        10)  $ENTRY       SYS1.HASPSRC                               *\n*        11)  $FREEBUF     SYS1.HASPSRC                               *\n*        12)  $GETBUF      SYS1.HASPSRC                               *\n*        13)  $HASPEQU     SYS1.HASPSRC                               *\n*        14)  $HASPGBL     SYS1.HASPSRC                               *\n*        15)  $HCT         SYS1.HASPSRC                               *\n*        16)  $IOT         SYS1.HASPSRC                               *\n*        17)  $JCT         SYS1.HASPSRC                               *\n*        18)  $JOE         SYS1.HASPSRC                               *\n*        19)  $JQE         SYS1.HASPSRC                               *\n*        20)  $LCK         SYS1.HASPSRC                               *\n*        21)  $MIT         SYS1.HASPSRC                               *\n*        22)  $MODEND      SYS1.HASPSRC                               *\n*        23)  $MODULE      SYS1.HASPSRC                               *\n*        24)  $PADDR       SYS1.HASPSRC                               *\n*        25)  $PCE         SYS1.HASPSRC                               *\n*        26)  $POST        SYS1.HASPSRC                               *\n*        27)  $QLOC        SYS1.HASPSRC                               *\n*        26)  $QSE         SYS1.HASPSRC                               *\n*        27)  $QSUSE       SYS1.HASPSRC                               *\n*        28)  $RETURN      SYS1.HASPSRC                               *\n*        29)  $SAVE        SYS1.HASPSRC                               *\n*        30)  $TAB         SYS1.HASPSRC                               *\n*        32)  IAZRESPA     SYS1.AMODGEN                               *\n*        32)  IFGRPL       SYS1.MACLIB                                *\n*        33)  MODESET      SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       4K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ005$SR  $MODULE $HASPEQU,                                             X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $CMB,               GENERATE HASP CMB DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $CWA,               GENERATE HASP CWA DSECT             X\n               $DAS,               GENERATE HASP DAS DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $IOT,               GENERATE HASP IOT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $KIT,               GENERATE HASP KIT DSECT             X\n               $LCK,               GENERATE HASP LCK DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $PDDB,              GENERATE HASP PDDB DSECT            X\n               $QSE,               GENERATE HASP QSE DSECT             X\n               $TAB,               GENERATE HASP TAB DSECT             X\n               RESPA,              GENERATE MVS  RESPA DSECT           X\n               RPL                 GENERATE MVS  IFGRPL DSECT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREAS                                           *\n*                                                                     *\n***********************************************************************\n$SRWORK  DSECT\n         DS    CL(BUFSTART-BFPDSECT) **** RESERVED BY JES2 ****\nDOUBLE   DS    D                   DOUBLE WORD WORK AREA\nFOPRND   DS    X                   FIRST OPERAND FLAG\nDBL      DS    D                   DOUBLE WORD WORK AREA\nLOWJOB   DS    H                   LOW RANGE JOB REQUESTED\nHIGHJOB  DS    H                   HIGH RANGE JOB REQUESTED\nMISCSW1  DS    X                   MISCELLANEOUS SWITCHES\nNAME     EQU   X'80'               A JOBNAME WAS ENTERED - NOT NUMBER\nFOUND    EQU   X'40'               A JOB WAS FOUND FOR PROCESSING\nSPOOLS   EQU   X'20'               SPOOL VOLUME INFORMATION REQUESTED\nVOLHEAD  EQU   X'10'               SPOOL VOLUME HEADER WRITTEN IND\nLASTYPE  DS    C                   LAST JOB TYPE PROCESSED\nLASTRNG  DS    F                   ADDRESS OF LAST RANGE ENTRY\nRANGES   DS    H                   NUMBER OF JOB RANGES ENTERED\n***********************************************************************\n*                                                                     *\n*       THE JOB RANGE ENTRY TABLE HAS A FORMAT AS FOLLOWS:            *\n*                                                                     *\n*       1 BYTE   JOB TYPE (J/S/T)                                     *\n*       1 BYTE   FILLER                                               *\n*       HALFWORD LOW  JOB NUMBER IN RANGE                             *\n*       HALFWORD HIGH JOB NUMBER IN RANGE                             *\n*                                                                     *\n***********************************************************************\nRANGETBL DS    51CL6               ROOM FOR 50 RANGES + END OF LIST\n         SPACE 3\nJ005$SR  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         TITLE 'JES2 $SR COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE005$SR  $ENTRY BASE=(R10,R12)\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R10,R15             LOAD FIRST BASE REGISTER\n         LA    R12,4095(R10)       LOAD SECOND\n         LA    R12,1(R12)               BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       - ADDRESS OF THE CURRENT OPERAND                    *\n*        R6       - INCREMENT VALUE OF 4                              *\n*        R7       - ADDRESS OF THE LAST OPERAND                       *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SEE IF THIS IS A $SR COMMAND                                 *\n*                                                                     *\n***********************************************************************\n         CLC   COMVERB(2),=C'SR'   SEE IF THIS IS THE $SR COMMAND\n         BNE   EXIT0               NO, BRANCH TO COMMAND OK EXIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GET A JES2 BUFFER FOR REENTRANCY AND                         *\n*        CLEAR THE COMMAND WORK AREA                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nSROK     $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R8,R1               SAVE WORK AREA ADDRESS\n         USING $SRWORK,R8          SET ADDRESSABILITY TO WORK AREA\n         LA    R14,$SRWORK+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS\n         LH    R15,$BUFSIZE        SET   'TO'   LENGTH\n         SLR   R0,R0               CLEAR 'FROM' ADDRESS\n         SLR   R1,R1               CLEAR 'FROM' LENGTH\n         MVCL  R14,R0              CLEAR THE BUFFER\n*****************************************************************\n*                                                               *\n*        CHECK FOR AUTOMATIC REDIRECTION OF RESPONSES           *\n*                                                               *\n*****************************************************************\n         SPACE 1\n         TM    COMFLAG,CMBFLAGU    IS THIS A UCM\n         BZ    MSGGOOD             NO, SKIP REDIRECTION\n         TM    FBLFLG,FBLFLGC+FBLFLGR CONSOLE SET OR REMOTE SYSTEM\n         BNZ   MSGRPT              SKIP AUTOMATIC L=CCA\n         LA    R1,4                LOAD REDIRECT OFFSET FOR $SR\n*                                  SAME AS FOR $DJ\n         BCTR  R1,0                REDUCE BY 1\n         SLL   R1,1                DOUBLE\n         SLR   R2,R2               ZERO REGISTER FOR IC\n         IC    R2,COMUCM           PICK UP CURRENT UCM ID\n         L     R14,$COMEXTN        POINT TO CONSOLE WORK AREA\n         USING CWA,R14             SET ADDRESSABILITY TO CWA\n         CH    R2,CWAOCON          SEE IF EXCEEDS MAXIMUM\n         BH    MSGRPT              YES, ERROR, NO AUTOMATIC REDIRECTION\n         MH    R2,CWALCON          MULTIPLY BY LENGTH OF EACH ENTRY\n         AR    R1,R2               COMBINE OFFSETS\n         LA    R1,CWARESP-CWACONL(R1) POINT TO CORRECT CWA ENTRY\n         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID\n         TM    FBLFLG,FBLFLGA      HAS AREA BEEN SET\n         BO    MSGRPT              YES, SKIP AUTOMATIC REDIRECTION\n         MVC   COMUCMA,CWACONA(R1) SET NEW AREA\n         DROP  R14                 DROP ADDRESSABILITY TO CWA\nMSGRPT   BAL   R4,MSGVCCA          VERIFY CCA (NO RETURN IF BAD)\n         CLI   COMUCMA,0           TEST FOR DISPLAY AREA\n         BZ    MSGGOOD             IF NOT, SKIP\n         MVI   COMLINET,X'80'      SET CONTROL LINE\n         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND\n         MVI   COMLINET,X'20'      SET DATA LINE\n***********************************************************************\n*                                                                     *\n*        EXTRACT THE JOB/TSU/STC RANGE FROM THE COMMAND BUFFER        *\n*                                                                     *\n***********************************************************************\n*        SEARCH FOR END OF FIRST JOB NUMBER IN RANGE                  *\n***********************************************************************\nMSGGOOD  MVI   LASTYPE,C'J'        DEFAULT JOB TYPE TO JOB\n         LA    R1,COMVERB+2        POINT TO START OF JOB NUMBER\n         LA    R4,RANGETBL         POINT TO JOB RANGE TABLE\n         MVI   FOPRND,X'00'        SET FIRST OPERAND FLAG ON\nSETRNG01 LR    R14,R1              POINT TO OPERAND\n         LR    R2,R1               SAVE START OF OPERAND ADDRESS\n         SLR   R15,R15             SET LENGTH\n         CLI   0(R14),C'0'         SEE IF NUMERIC\n         BNL   SETRNG03            YES, MUST BE JOB NUMBER\n         CLC   0(3,R14),=C'JOB'    SEE IF JOB\n         BNE   CKJOB2              NO, CHECK FOR JXXX\n         LA    R14,2(R14)          UPDATE R14 TO POINT TO LAST CHAR\n         B     SETRNG02            NOW GO PROCESS AS A JOB\nCKJOB2   CLI   0(R14),C'J'         SEE IF JOB\n         BE    SETRNG02            YES, BRANCH\n         CLC   0(3,R14),=C'STC'    SEE IF STC\n         BNE   CKSTC2              NO, CHECK FOR JXXX\n         LA    R14,2(R14)          UPDATE R14 TO POINT TO LAST CHAR\n         B     SETRNG02            NOW GO PROCESS AS A JOB\nCKSTC2   CLI   0(R14),C'S'         SEE IF STC\n         BE    SETRNG02            YES, BRANCH\n         CLC   0(3,R14),=C'TSO'    SEE IF TSO\n         BNE   CKTSO2              NO, CHECK FOR JXXX\n         LA    R14,2(R14)          UPDATE R14 TO POINT TO LAST CHAR\n         B     SETRNG02            NOW GO PROCESS AS A JOB\nCKTSO2   CLI   0(R14),C'T'         SEE IF TSO\n         BNE   BADOPRND            NO, MUST BE A KEYWORD OPERAND\nSETRNG02 MVC   LASTYPE,0(R1)       SAVE JOB TYPE\n         CLI   1(R14),C'0'         SEE IF NEXT CHAR NUMERIC\n         BL    BADOPRND            NO, MUST BE A KEYWORD OPERAND\n         LA    R14,1(R14)          INCREMENT PAST JOB TYPE\n         LR    R2,R14              SAVE START OF OPERAND ADDRESS\nSETRNG03 CLI   0(R14),C' '         END OF OPERAND\n         BE    SETRNG04            YES, BRANCH\n         CLI   0(R14),C'-'         END OF OPERAND\n         BE    SETRNG04            YES, BRANCH\n         CLI   0(R14),C','         END OF OPERAND\n         BE    SETRNG04            YES, BRANCH\n         CLI   0(R14),C'0'         SEE IF NUMERIC\n         BL    BADOPRND            NO, ERROR\n         CLI   0(R14),C'9'         SEE IF NUMERIC\n         BH    BADOPRND            NO, ERROR\n         LA    R15,1(R15)          ADD 1 TO LENGTH\n         LA    R14,1(R14)          INCREMENT TO NEXT CHAR OF JOB NBR\n         B     SETRNG03            LOOP\nSETRNG04 LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'5'           TEST LENGTH\n         BH    BADOPRND            GREATER THAN 5, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,PKJOBNO         PACK JOB NUMBER\n         CVB   R15,DOUBLE          CONVERT TO BINARY\n         LTR   R15,R15             TEST JOB NUMBER\n         BZ    BADOPRND            YES, BRANCH\n         CH    R15,=H'9999'        SEE IF EXCEEDS MAXIMUM\n         BH    BADOPRND            YES, BRANCH\n         STH   R15,LOWJOB          SAVE AS LOW JOB NUMBER\n         STH   R15,HIGHJOB         AND AS HIGH JOB NUMBER\n         CLI   0(R14),C'-'         SEE IF JOB RANGE REQUESTED\n         BNE   SETRNG07            NO, GO SEE IF OTHER JOB RANGES\n         LA    R14,1(R14)          INCREMENT PAST '-'\n         LR    R2,R14              SAVE START OF OPERAND ADDRESS\n         XR    R15,R15             SET LENGTH\n***********************************************************************\n*        SEARCH FOR END OF SECOND JOB NUMBER IN RANGE                 *\n***********************************************************************\nSETRNG05 CLI   0(R14),C' '         END OF OPERAND\n         BE    SETRNG06            YES, BRANCH\n         CLI   0(R14),C','         END OF OPERAND\n         BE    SETRNG06            YES, BRANCH\n         CLI   0(R14),C'0'         SEE IF NUMERIC\n         BL    BADOPRND            NO, ERROR\n         CLI   0(R14),C'9'         SEE IF NUMERIC\n         BH    BADOPRND            NO, ERROR\n         LA    R15,1(R15)          ADD 1 TO LENGTH\n         LA    R14,1(R14)          INCREMENT TO NEXT CHAR OF JOB NBR\n         B     SETRNG05            LOOP\nSETRNG06 LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'5'           TEST LENGTH\n         BH    BADOPRND            GREATER THAN 5, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,PKJOBNO         PACK JOB NUMBER\n         CVB   R15,DOUBLE          CONVERT TO BINARY\n         LTR   R15,R15             TEST JOB NUMBER\n         BZ    BADOPRND            YES, BRANCH\n         CH    R15,=H'9999'        SEE IF EXCEEDS MAXIMUM\n         BH    BADOPRND            YES, BRANCH\n         STH   R15,HIGHJOB         AND AS HIGH JOB NUMBER\nSETRNG07 LH    R15,RANGES          LOAD NUMBER OF RANGES\n         LA    R15,1(R15)          ADD 1 TO NUMBER OF RANGES\n         CH    R15,=H'50'          SEE IF MAX EXCEEDED\n         BNH   SETRNG08            NO, CONTINUE\n         MVC   COMMAND(L'MSG1),MSG1 SET MAXIMUM RANGE EXCEEDED MSG\n         LA    R0,L'MSG1           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\nSETRNG08 STH   R15,RANGES          SAVE NEW NUMBER OF RANGES\n         MVC   0(1,R4),LASTYPE     SET JOB TYPE IN TABLE\n         MVC   2(2,R4),LOWJOB      SET LOW JOB NUMBER IN TABLE\n         MVC   4(2,R4),HIGHJOB     SET HIGH JOB NUMBER IN TABLE\n         LA    R4,6(R4)            INCREMENT TO NEXT RANGE TABLE ENTRY\n         MVI   0(R4),X'FF'         FLAG END OF LIST\n         BXH   R5,R6,JQESCAN       IF NO MORE EXIT\n         L     R1,0(R5)            POINT TO OPERAND\n         MVI   FOPRND,X'FF'        NO LONGER FIRST OPERAND\n         B     SETRNG01            PROCESS THIS OPERAND\nPKJOBNO  PACK  DOUBLE,0(0,R2)      *** EXECUTE ONLY ***\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SCAN THE JOB QUEUE FOR THE JOB LIST                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nJQESCAN  LA    R1,RANGETBL         LOAD ADDRESS OF FIRST RANGE ENTRY\n         ST    R1,LASTRNG          SAVE ADDRESS OF THIS RANGE ENTRY\n         MVC   LASTYPE,0(R1)       SAVE JOB TYPE\n         MVC   LOWJOB,2(R1)        SAVE LOW JOB\n         MVC   HIGHJOB,4(R1)       SAVE HIGH JOB\nJQESCAN1 LH    R1,LOWJOB           LOAD JOB NUMBER\n         $QLOC (R1)                GET JQE FOR THIS JOB NUMBER\n         BZ    NEXTJQE             GET NEXT JQE IF NOT FOUND\n         LR    R9,R1               SAVE JQE ADDRESS\n         USING JQE,R9              SET ADDRESSABILITY TO JQE\nCKJOBNO  TM    JQEFLAG3,JQE3JOB    IS THIS A BATCH JOB\n         BNZ   CKSTC               NO, SEE IF STARTED TASK\n         CLI   LASTYPE,C'J'        ARE WE LOOKING FOR A BATCH JOB\n         BE    JQEFND              YES, GO PROCESS IT\n         B     NEXTJQE             NO, GET NEXT JQE\nCKSTC    TM    JQEFLAG3,JQE3STC    IS THIS A STC\n         BNO   CKTSU               NO, SEE IF A TSO USER\n         CLI   LASTYPE,C'S'        ARE WE LOOKING FOR A STARTED TASK\n         BE    JQEFND              YES, GO PROCESS IT\n         B     NEXTJQE             NO, GET NEXT JQE\nCKTSU    CLI   LASTYPE,C'T'        ARE WE LOOKING FOR A TSO USER\n         BE    JQEFND              YES, GO PROCESS IT\nNEXTJQE  LH    R1,LOWJOB           LOAD PREVIOUS JOB NUMBER\n         LA    R1,1(R1)            ADD 1 TO JOB NUMBER\n         STH   R1,LOWJOB           SAVE NEW JOB NUMBER\n         CH    R1,HIGHJOB          SEE IF END OF RANGE\n         BNH   JQESCAN1            NO, LOOP\n         L     R1,LASTRNG          LOAD ADDRESS OF LAST RANGE ENTRY\n         LA    R1,6(R1)            INCREMENT TO NEXT ENTRY\n         ST    R1,LASTRNG          AND SAVE ADDRESS OF THIS ENTRY\n         CLI   0(R1),X'FF'         SEE IF END OF RANGES\n         BE    NEXTJQE1            YES, END OF PROCESSING\n         MVC   LASTYPE,0(R1)       SAVE JOB TYPE\n         MVC   LOWJOB,2(R1)        SAVE LOW JOB\n         MVC   HIGHJOB,4(R1)       SAVE HIGH JOB\n         B     JQESCAN1            GO PROCESS THIS RANGE\nNEXTJQE1 TM    MISCSW1,FOUND       SEE IF ANY JOBS FOUND\n         BO    EXIT8               YES, GET OUT\n         MVC   COMMAND(L'MSG2),MSG2 SET NO JOBS FOUND MESSAGE\n         LA    R0,L'MSG2           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=900    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BUILD BASIC PORTION OF MESSAGE                               *\n*                                                                     *\n***********************************************************************\nJQEFND   OI    MISCSW1,FOUND       TURN ON JOB FOUND INDICATOR\n         MVI   COMMAND,C' '        BLANK ENTIRE\n         MVC   COMMAND+1(199),COMMAND  COMMAND\n         LH    R1,LOWJOB           LOAD JOB NUMBER\n         MVC   COMMAND(3),=C'JOB'  ASSUME BATCH JOB\n         TM    JQEFLAG3,JQE3JOB    IS IT A BATCH JOB\n         BZ    JQEFND01            YES, BRANCH\n         MVC   COMMAND(3),=C'STC'  ASSUME STARTED TASK\n         TM    JQEFLAG3,JQE3STC    IS IT A STC\n         BO    JQEFND01            YES, BRANCH\n         MVC   COMMAND(3),=C'TSU'  MUST BE A TSO USER\nJQEFND01 CVD   R1,DOUBLE           CONVERT JOB NUMBER TO PACKED\n         MVC   DBL(6),=X'402020202120' SET EDIT MASK\n         ED    DBL(6),DOUBLE+5     EDIT JOB NUMBER\n         MVC   COMMAND+3(5),DBL+1  MOVE JOB NUMBER TO MESSAGE\n         MVC   COMMAND+9(8),JQEJNAME MOVE JOB NAME TO MESSAGE\n         TM    JQEXFLG2,JQEXWSET   JOB ON SETUP?\n         BNO   NOSETUP             NO. JQE NOT SETUP\n         $QSUSE ,\n         NI    JQEXFLG2,255-JQEXWSET+JQEXSETP TURN OFF WAITING BIT\n         $POST $HASPECF,(JOB,CNVT,HOPE,PURGE),MASPOST=YES\n         LR     R1,R9\n         $CKPT  ID=JQE,ADDR=(R1)                SET CHECKPOINT\n*\n* UPDATE THE JCT VIA EXIT 7 JCT READ/WRITE EXIT\n*\n         $JCTIO TYPE=READ,JQE=(R9) BRING IN THE JCT FOR THIS JQE\n         LR    R3,R1               PUT ADDRESS OF BUFFER IN R3\n         $JCTIO TYPE=WRITE,JQE=(R9),JCTBUF=(R3),FREE=YES REWRITE JCT\n         MVC   COMMAND+18(L'MSG4),MSG4\n         LA    R0,LMSG4\n         $CWTO L=(R0),JOB=NO,MSGID=901\n         B     NEXTJQE             GO GET ANOTHER ONE\nNOSETUP  DS    0H\n         MVC   COMMAND+18(L'MSG5),MSG5\n         LA    R0,LMSG5\n         $CWTO L=(R0),JOB=NO,MSGID=902\n         B     NEXTJQE\n         EJECT\n*****************************************************************\n*                                                               *\n*        SUBROUTINE TO VERIFY CONSOLE/AREA                      *\n*                                                               *\n*****************************************************************\n         SPACE 1\nMSGVCCA  TM    FBLFLG,FBLFLGR      SEE IF REMOTE SYSTEM UCM\n         BOR   R4                  YES, UCM AND AREA ARE OK\n         L     R2,$COMEXTN         POINT TO CONSOLE WORK AREA\n         USING CWA,R2              SET ADDRESSABILITY TO CWA\n         MVC   XASCID(1),COMUCM    SET UCM ID\n         MVC   XASDID(1),COMUCMA   SET AREA ID\n         CLI   XASDID,0            SEE IF AREA ID SPECIFIED\n         BNZ   MSGSSAOP            YES, BRANCH\n         MVI   XASDID,C'Z'         NO,  FORCE AREA Z\nMSGSSAOP MVC   XAU(1),COMUCM       TELL OS SOURCE IS SAME AS OUTPUT\n         MVI   XAN,X'22'           SET ID FOR VERIFIER\n         MODESET EXTKEY=ZERO       GET KEY 0\n         L     R15,CWA7603D        POINT TO OS VERIFICATION ROUTINE\n         $AMODE 24,PUSHR=0,R=R14   GO TO AMODE 24\n         BALR  R14,R15             ENTER IT\n         $AMODE POPR=0,R=R14       RETURN TO ORIGINAL AMODE\n         MODESET EXTKEY=HASP       RETURN TO KEY 1\n         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR\n         BNHR  R4                  NO, RETURN TO CALLER\n         SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,B'0011',COMUCM   PICK UP UCM AND AREA ID\n         MVI   COMUCMA,0           FORCE NO DISPLAY AREA\n         CH    R15,=H'12'          SEE IF CONSOLE DOWN\n         BNE   *+16                NO, DO NOT SET LOGICAL CONSOLE\n         MVC   COMFLAG(4),MOWTOL   DESTROY APPARENT SOURCE INFO\n         MVC   COMOUT,MOWTOL+(COMOUT-COMFLAG) OMITTING CNTL FIELD\n         $CWTO L=L'CMBMSG,MSGID=908 ECHO THE COMMAND\n         MVC   COMMAND(MBVINVL),MBVINV SET ERROR MESSAGE TEXT\n         STC   R3,MBVINVA          SET AREA\n         SRL   R3,8                ALIGN CONSOLE ID\n         CVD   R3,$DOUBLE          CONVERT TO PACKED\n         MVC   DBL(4),=X'F0212020' SET EDIT MASK\n         ED    DBL(4),$DOUBLE+6    EDIT CONSOLE ID TO AREA\n         MVC   MBVINVC,DBL+2       MOVE CONSOLE ID TO MESSAGE\n         MVC   COMMAND+MBVINVL(8),COMACEID MOVE IDENTIFIER\n         $CWTO L=MBVINVL,MSGID=999 WRITE ERROR MESSAGE TO CONSOLE\n         B     EXIT8               GET OUT\n         DROP  R2                  DROP ADDRESSABILITY TO CWA\n         EJECT\n*****************************************************************\n*                                                               *\n*       R E D I R E C T   R O U T I N E   C O N S T A N T S     *\n*                                                               *\n*****************************************************************\n         SPACE 1\nMOWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX\nMBVINV   DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '\nMBVINVL  EQU   *-MBVINV\nMBVINVC  EQU   COMMAND+MBVINVL-16,2\nMBVINVA  EQU   MBVINVC+2,1\nFBLFLG   EQU   COMEWORK+2          FLAG BYTE\nCOMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER\nFBLFLGR  EQU   1                   UCM COMMAND FROM REMOTE SYSTEM\nFBLFLGC  EQU   2                   CONSOLE HAS BEEN SPECIFIED\nFBLFLGA  EQU   4                   AREA HAS BEEN SPECIFIED\n         EJECT\n***********************************************************************\n*        CONSTANTS FOR $SR                                            *\n***********************************************************************\n         SPACE 3\nBLANKS   DC    CL20' '             STRING OF 20 BLANKS\n         SPACE 3\nMSG1     DC    C'MORE THAN 50 JOBS OR RANGES SPECIFIED'\nMSG2     DC    CL16'JOB(S) NOT FOUND'\nMSG3     DC    C' INVALID OPERAND'\nMSG4     DC    C' HAS BEEN SETUP'\nLMSG4    EQU   *-MSG4+18\nMSG5     DC    C' NOT AWAITING SETUP'\nLMSG5    EQU   *-MSG5+18\n         SPACE 3\nDEVNTBL  DS    0F                  DEVICE NAME TABLE\n         DC    AL1(5),CL7'INTRDR'\n         DC    AL1(5),CL7'READER'\n         DC    AL1(5),CL7'PRINTR'\n         DC    AL1(4),CL7'PUNCH'\n         DC    AL1(1),CL7'JT'\n         DC    AL1(1),CL7'JR'\n         DC    AL1(1),CL7'ST'\n         DC    AL1(1),CL7'SR'\n         DC    AL1(2),CL7'RMT'\n         DC    AL1(2),CL7'RDR'\n         DC    AL1(2),CL7'PRT'\n         DC    AL1(2),CL7'PUN'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INVALID $SR OPERAND                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nBADOPRND CLI   FOPRND,X'00'        IS THIS FIRST OPERAND?\n         BE    EXIT2JES            YES. GIVE IT TO JES\n         L     R1,0(0,R5)          POINT TO INVALID OPERAND\n         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG\n         MVC   COMMAND+9(L'MSG3),MSG3 SET ERROR MESSAGE\n         LA    R0,L'MSG3+9         SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\nEXIT2JES $FREEBUF (R8)             FREE THE WORK AREA\nEXIT0    LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nEXIT8    $FREEBUF (R8)             FREE THE WORK AREA\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "J005$UA": {"ttr": 11782, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "J005$UA  TITLE 'JES2 $UA COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED PROCESS THE $UA COMMAND   *\n*        WHEN ENTERED.  THIS COMMAND IS IMPLEMENTED AS A TYPE 5       *\n*        EXIT TO JES2, AND AS SUCH MUST INTERCEPT ONLY THE $UA        *\n*        COMMAND WHEN ENCOUNTERED.                                    *\n*                                                                     *\n*                                                                     *\n*        THE $UA COMMAND HAS THE FOLLOWING SYNTAX:                    *\n*                                                                     *\n*        $UA                                                          *\n*             JN-NN                                                   *\n*             SN-NN                                                   *\n*             TN-NN                                                   *\n*                                                                     *\n*        WHERE:                                                       *\n*                                                                     *\n*        JN-NN         - LIST JOB INFORMATION FOR THE SPECIFIED       *\n*                        BATCH JOB(S)                                 *\n*        SN-NN         - LIST JOB INFORMATION FOR THE SPECIFIED       *\n*                        STARTED TASK(S)                              *\n*        TN-NN         - LIST JOB INFORMATION FOR THE SPECIFIED       *\n*                        TSO USER(S)                                  *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *\n*                                                                     *\n*        1)  THE HASP90X MESSAGES ARE MADE UPON COMPLETION OF         *\n*            COMMAND                                                  *\n*                                                                     *\n*        $HASP903 JOB XXX XXXXXXXX RELEASED FROM USER HOLD            *\n*                                                                     *\n*        $HASP904 JOB XXX XXXXXXXX NOT ON USER HOLD                   *\n*                                                                     *\n*        2)  THE HASP900 MESSAGE WILL BE ISSUED WHEN NONE             *\n*            OF THE REQUESTED JOBS CANNOT BE FOUND.                   *\n*                                                                     *\n*        $HASP900 JOB(S) NOT FOUND                                    *\n*                                                                     *\n*        3)  THE HASP999 MESSAGE WILL BE ISSUED FOR ALL               *\n*            ERRORS.                                                  *\n*                                                                     *\n*        $HASP999 XXXXXXXXX INVALID OPERAND                           *\n*                                                                     *\n*        THE JOBNAME/JOB NUMBER CONTAINS INVALID SYNTAX.              *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J 0 0 5 $ U A            *\n*                                                                     *\n*        01)  $AMODE       SYS1.HASPSRC                               *\n*        02)  $BUFFER      SYS1.HASPSRC                               *\n*        03)  $CAT         SYS1.HASPSRC                               *\n*        04)  $CMB         SYS1.HASPSRC                               *\n*        05)  $COMWORK     SYS1.HASPSRC                               *\n*        06)  $CWA         SYS1.HASPSRC                               *\n*        07)  $CWTO        SYS1.HASPSRC                               *\n*        08)  $DAS         SYS1.HASPSRC                               *\n*        09)  $DCT         SYS1.HASPSRC                               *\n*        10)  $ENTRY       SYS1.HASPSRC                               *\n*        11)  $FREEBUF     SYS1.HASPSRC                               *\n*        12)  $GETBUF      SYS1.HASPSRC                               *\n*        13)  $HASPEQU     SYS1.HASPSRC                               *\n*        14)  $HASPGBL     SYS1.HASPSRC                               *\n*        15)  $HCT         SYS1.HASPSRC                               *\n*        16)  $IOT         SYS1.HASPSRC                               *\n*        17)  $JCT         SYS1.HASPSRC                               *\n*        18)  $JOE         SYS1.HASPSRC                               *\n*        19)  $JQE         SYS1.HASPSRC                               *\n*        20)  $LCK         SYS1.HASPSRC                               *\n*        21)  $MIT         SYS1.HASPSRC                               *\n*        22)  $MODEND      SYS1.HASPSRC                               *\n*        23)  $MODULE      SYS1.HASPSRC                               *\n*        24)  $PADDR       SYS1.HASPSRC                               *\n*        25)  $PCE         SYS1.HASPSRC                               *\n*        26)  $POST        SYS1.HASPSRC                               *\n*        27)  $QLOC        SYS1.HASPSRC                               *\n*        28)  $QSE         SYS1.HASPSRC                               *\n*        29)  $QSUSE       SYS1.HASPSRC                               *\n*        30)  $RETURN      SYS1.HASPSRC                               *\n*        31)  $SAVE        SYS1.HASPSRC                               *\n*        32)  $TAB         SYS1.HASPSRC                               *\n*        33)  IAZRESPA     SYS1.AMODGEN                               *\n*        34)  IFGRPL       SYS1.MACLIB                                *\n*        35)  MODESET      SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       4K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ005$UA  $MODULE $HASPEQU,                                             X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $CMB,               GENERATE HASP CMB DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $CWA,               GENERATE HASP CWA DSECT             X\n               $DAS,               GENERATE HASP DAS DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $IOT,               GENERATE HASP IOT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $KIT,               GENERATE HASP KIT DSECT             X\n               $LCK,               GENERATE HASP LCK DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $PDDB,              GENERATE HASP PDDB DSECT            X\n               $QSE,               GENERATE HASP QSE DSECT             X\n               $TAB,               GENERATE HASP TAB DSECT             X\n               RESPA,              GENERATE MVS  RESPA DSECT           X\n               RPL                 GENERATE MVS  IFGRPL DSECT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREAS                                           *\n*                                                                     *\n***********************************************************************\n$UAWORK  DSECT\n         DS    CL(BUFSTART-BFPDSECT) **** RESERVED BY JES2 ****\nDOUBLE   DS    D                   DOUBLE WORD WORK AREA\nDBL      DS    D                   DOUBLE WORD WORK AREA\nROUTCDE  DS    F                   DESTINATION CODE FOR SETDEST ROUTINE\nSAVEBAS  DS    CL18                MSG SAVE AREA FOR JOB NBR AND NAME\nLTEXT    DS    H                   CURRENT LENGTH OF MESSAGE AREA\nRC       DS    H                   $CWTO RETURN CODE\nLOWJOB   DS    H                   LOW RANGE JOB REQUESTED\nHIGHJOB  DS    H                   HIGH RANGE JOB REQUESTED\nJOBNAME  DS    CL8                 JOBNAME REQUESTED\nJOBNAMEL DS    H                   LENGTH OF JOBNAME REQUESTED\nMISCSW1  DS    X                   MISCELLANEOUS SWITCHES\nNAME     EQU   X'80'               A JOBNAME WAS ENTERED - NOT NUMBER\nFOUND    EQU   X'40'               A JOB WAS FOUND FOR PROCESSING\nSPOOLS   EQU   X'20'               SPOOL VOLUME INFORMATION REQUESTED\nVOLHEAD  EQU   X'10'               SPOOL VOLUME HEADER WRITTEN IND\nMISCSW2  DS    X                   MISCELLANEOUS SWITCHES\nJOEFND   EQU   X'80'               AN ACTIVE JOE FOUND FOR THIS JOB\nLASTYPE  DS    C                   LAST JOB TYPE PROCESSED\nDEVNO    DS    H                   NUMBER OF ACTIVE DEVICES\nLASTRNG  DS    F                   ADDRESS OF LAST RANGE ENTRY\nRANGES   DS    H                   NUMBER OF JOB RANGES ENTERED\n***********************************************************************\n*                                                                     *\n*       THE JOB RANGE ENTRY TABLE HAS A FORMAT AS FOLLOWS:            *\n*                                                                     *\n*       1 BYTE   JOB TYPE (J/S/T)                                     *\n*       1 BYTE   FILLER                                               *\n*       HALFWORD LOW  JOB NUMBER IN RANGE                             *\n*       HALFWORD HIGH JOB NUMBER IN RANGE                             *\n*                                                                     *\n***********************************************************************\nRANGETBL DS    51CL6               ROOM FOR 50 RANGES + END OF LIST\nSAVEAFF  DS    16F                 REGISTER SAVE FOR SETAFF  ROUTINE\nSAVESPL  DS    16F                 REGISTER SAVE FOR SETSPL  ROUTINE\nSAVEBLD  DS    16F                 REGISTER SAVE FOR BLDACT  ROUTINE\nSAVEPUT  DS    16F                 REGISTER SAVE FOR BLDPUT  ROUTINE\nDEVTBL   DS    50XL4               ACTIVE DEVICE TABLE\n         SPACE 3\nJ005$UA  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         TITLE 'JES2 $UA COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE005$UA  $ENTRY BASE=(R10,R12)\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R10,R15             LOAD FIRST BASE REGISTER\n         LA    R12,4095(R10)       LOAD SECOND\n         LA    R12,1(R12)               BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       - ADDRESS OF THE CURRENT OPERAND                    *\n*        R6       - INCREMENT VALUE OF 4                              *\n*        R7       - ADDRESS OF THE LAST OPERAND                       *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SEE IF THIS IS A $UA COMMAND                                 *\n*                                                                     *\n***********************************************************************\n         CLC   COMVERB(2),=C'UA'   SEE IF THIS IS THE $UA COMMAND\n         BNE   EXIT0               NO, BRANCH TO COMMAND OK EXIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GET A JES2 BUFFER FOR REENTRANCY AND                         *\n*        CLEAR THE COMMAND WORK AREA                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nUAOK     $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R8,R1               SAVE WORK AREA ADDRESS\n         USING $UAWORK,R8          SET ADDRESSABILITY TO WORK AREA\n         LA    R14,$UAWORK+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS\n         LH    R15,$BUFSIZE        SET   'TO'   LENGTH\n         SLR   R0,R0               CLEAR 'FROM' ADDRESS\n         SLR   R1,R1               CLEAR 'FROM' LENGTH\n         MVCL  R14,R0              CLEAR THE BUFFER\n*****************************************************************\n*                                                               *\n*        CHECK FOR AUTOMATIC REDIRECTION OF RESPONSES           *\n*                                                               *\n*****************************************************************\n         SPACE 1\n         TM    COMFLAG,CMBFLAGU    IS THIS A UCM\n         BZ    MSGGOOD             NO, SKIP REDIRECTION\n         TM    FBLFLG,FBLFLGC+FBLFLGR CONSOLE SET OR REMOTE SYSTEM\n         BNZ   MSGRPT              SKIP AUTOMATIC L=CCA\n         LA    R1,4                LOAD REDIRECT OFFSET FOR $UA\n*                                  SAME AS FOR $DJ\n         BCTR  R1,0                REDUCE BY 1\n         SLL   R1,1                DOUBLE\n         SLR   R2,R2               ZERO REGISTER FOR IC\n         IC    R2,COMUCM           PICK UP CURRENT UCM ID\n         L     R14,$COMEXTN        POINT TO CONSOLE WORK AREA\n         USING CWA,R14             SET ADDRESSABILITY TO CWA\n         CH    R2,CWAOCON          SEE IF EXCEEDS MAXIMUM\n         BH    MSGRPT              YES, ERROR, NO AUTOMATIC REDIRECTION\n         MH    R2,CWALCON          MULTIPLY BY LENGTH OF EACH ENTRY\n         AR    R1,R2               COMBINE OFFSETS\n         LA    R1,CWARESP-CWACONL(R1) POINT TO CORRECT CWA ENTRY\n         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID\n         TM    FBLFLG,FBLFLGA      HAS AREA BEEN SET\n         BO    MSGRPT              YES, SKIP AUTOMATIC REDIRECTION\n         MVC   COMUCMA,CWACONA(R1) SET NEW AREA\n         DROP  R14                 DROP ADDRESSABILITY TO CWA\nMSGRPT   BAL   R4,MSGVCCA          VERIFY CCA (NO RETURN IF BAD)\n         CLI   COMUCMA,0           TEST FOR DISPLAY AREA\n         BZ    MSGGOOD             IF NOT, SKIP\n         MVI   COMLINET,X'80'      SET CONTROL LINE\n         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND\n         MVI   COMLINET,X'20'      SET DATA LINE\n***********************************************************************\n*                                                                     *\n*        EXTRACT THE JOB/TSU/STC RANGE FROM THE COMMAND BUFFER        *\n*                                                                     *\n***********************************************************************\n*        SEARCH FOR END OF FIRST JOB NUMBER IN RANGE                  *\n***********************************************************************\nMSGGOOD  MVI   LASTYPE,C'J'        DEFAULT JOB TYPE TO JOB\n         LA    R1,COMVERB+2        POINT TO START OF JOB NUMBER\n         LA    R4,RANGETBL         POINT TO JOB RANGE TABLE\nSETRNG01 LR    R14,R1              POINT TO OPERAND\n         LR    R2,R1               SAVE START OF OPERAND ADDRESS\n         SLR   R15,R15             SET LENGTH\n         CLI   0(R14),C'0'         SEE IF NUMERIC\n         BNL   SETRNG03            YES, MUST BE JOB NUMBER\n         CLC   0(3,R14),=C'JOB'    SEE IF JOB\n         BNE   CKJOB2              NO, CHECK FOR JXXX\n         LA    R14,2(R14)          UPDATE R14 TO POINT TO LAST CHAR\n         B     SETRNG02            NOW GO PROCESS AS A JOB\nCKJOB2   CLI   0(R14),C'J'         SEE IF JOB\n         BE    SETRNG02            YES, BRANCH\n         CLC   0(3,R14),=C'STC'    SEE IF STC\n         BNE   CKSTC2              NO, CHECK FOR JXXX\n         LA    R14,2(R14)          UPDATE R14 TO POINT TO LAST CHAR\n         B     SETRNG02            NOW GO PROCESS AS A JOB\nCKSTC2   CLI   0(R14),C'S'         SEE IF STC\n         BE    SETRNG02            YES, BRANCH\n         CLC   0(3,R14),=C'TSO'    SEE IF TSO\n         BNE   CKTSO2              NO, CHECK FOR JXXX\n         LA    R14,2(R14)          UPDATE R14 TO POINT TO LAST CHAR\n         B     SETRNG02            NOW GO PROCESS AS A JOB\nCKTSO2   CLI   0(R14),C'T'         SEE IF TSO\n         BNE   BADOPRND            NO, MUST BE A KEYWORD OPERAND\nSETRNG02 MVC   LASTYPE,0(R1)       SAVE JOB TYPE\n         CLI   1(R14),C'0'         SEE IF NEXT CHAR NUMERIC\n         BL    BADOPRND            NO, MUST BE A KEYWORD OPERAND\n         LA    R14,1(R14)          INCREMENT PAST JOB TYPE\n         LR    R2,R14              SAVE START OF OPERAND ADDRESS\nSETRNG03 CLI   0(R14),C' '         END OF OPERAND\n         BE    SETRNG04            YES, BRANCH\n         CLI   0(R14),C'-'         END OF OPERAND\n         BE    SETRNG04            YES, BRANCH\n         CLI   0(R14),C','         END OF OPERAND\n         BE    SETRNG04            YES, BRANCH\n         CLI   0(R14),C'0'         SEE IF NUMERIC\n         BL    BADOPRND            NO, ERROR\n         CLI   0(R14),C'9'         SEE IF NUMERIC\n         BH    BADOPRND            NO, ERROR\n         LA    R15,1(R15)          ADD 1 TO LENGTH\n         LA    R14,1(R14)          INCREMENT TO NEXT CHAR OF JOB NBR\n         B     SETRNG03            LOOP\nSETRNG04 LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'5'           TEST LENGTH\n         BH    BADOPRND            GREATER THAN 5, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,PKJOBNO         PACK JOB NUMBER\n         CVB   R15,DOUBLE          CONVERT TO BINARY\n         LTR   R15,R15             TEST JOB NUMBER\n         BZ    BADOPRND            YES, BRANCH\n         CH    R15,=H'9999'        SEE IF EXCEEDS MAXIMUM\n         BH    BADOPRND            YES, BRANCH\n         STH   R15,LOWJOB          SAVE AS LOW JOB NUMBER\n         STH   R15,HIGHJOB         AND AS HIGH JOB NUMBER\n         CLI   0(R14),C'-'         SEE IF JOB RANGE REQUESTED\n         BNE   SETRNG07            NO, GO SEE IF OTHER JOB RANGES\n         LA    R14,1(R14)          INCREMENT PAST '-'\n         LR    R2,R14              SAVE START OF OPERAND ADDRESS\n         XR    R15,R15             SET LENGTH\n***********************************************************************\n*        SEARCH FOR END OF SECOND JOB NUMBER IN RANGE                 *\n***********************************************************************\nSETRNG05 CLI   0(R14),C' '         END OF OPERAND\n         BE    SETRNG06            YES, BRANCH\n         CLI   0(R14),C','         END OF OPERAND\n         BE    SETRNG06            YES, BRANCH\n         CLI   0(R14),C'0'         SEE IF NUMERIC\n         BL    BADOPRND            NO, ERROR\n         CLI   0(R14),C'9'         SEE IF NUMERIC\n         BH    BADOPRND            NO, ERROR\n         LA    R15,1(R15)          ADD 1 TO LENGTH\n         LA    R14,1(R14)          INCREMENT TO NEXT CHAR OF JOB NBR\n         B     SETRNG05            LOOP\nSETRNG06 LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'5'           TEST LENGTH\n         BH    BADOPRND            GREATER THAN 5, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,PKJOBNO         PACK JOB NUMBER\n         CVB   R15,DOUBLE          CONVERT TO BINARY\n         LTR   R15,R15             TEST JOB NUMBER\n         BZ    BADOPRND            YES, BRANCH\n         CH    R15,=H'9999'        SEE IF EXCEEDS MAXIMUM\n         BH    BADOPRND            YES, BRANCH\n         STH   R15,HIGHJOB         AND AS HIGH JOB NUMBER\nSETRNG07 LH    R15,RANGES          LOAD NUMBER OF RANGES\n         LA    R15,1(R15)          ADD 1 TO NUMBER OF RANGES\n         CH    R15,=H'50'          SEE IF MAX EXCEEDED\n         BNH   SETRNG08            NO, CONTINUE\n         MVC   COMMAND(L'MSG1),MSG1 SET MAXIMUM RANGE EXCEEDED MSG\n         LA    R0,L'MSG1           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\nSETRNG08 STH   R15,RANGES          SAVE NEW NUMBER OF RANGES\n         MVC   0(1,R4),LASTYPE     SET JOB TYPE IN TABLE\n         MVC   2(2,R4),LOWJOB      SET LOW JOB NUMBER IN TABLE\n         MVC   4(2,R4),HIGHJOB     SET HIGH JOB NUMBER IN TABLE\n         LA    R4,6(R4)            INCREMENT TO NEXT RANGE TABLE ENTRY\n         MVI   0(R4),X'FF'         FLAG END OF LIST\n         BXH   R5,R6,JQESCAN       IF NO MORE EXIT\n         L     R1,0(R5)            POINT TO OPERAND\n         B     SETRNG01            PROCESS THIS OPERAND\nPKJOBNO  PACK  DOUBLE,0(0,R2)      *** EXECUTE ONLY ***\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SCAN THE JOB QUEUE FOR THE JOB LIST                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nJQESCAN  LA    R1,RANGETBL         LOAD ADDRESS OF FIRST RANGE ENTRY\n         ST    R1,LASTRNG          SAVE ADDRESS OF THIS RANGE ENTRY\n         MVC   LASTYPE,0(R1)       SAVE JOB TYPE\n         MVC   LOWJOB,2(R1)        SAVE LOW JOB\n         MVC   HIGHJOB,4(R1)       SAVE HIGH JOB\nJQESCAN1 LH    R1,LOWJOB           LOAD JOB NUMBER\n         $QLOC (R1)                GET JQE FOR THIS JOB NUMBER\n         BZ    NEXTJQE             GET NEXT JQE IF NOT FOUND\n         LR    R9,R1               SAVE JQE ADDRESS\n         USING JQE,R9              SET ADDRESSABILITY TO JQE\nCKJOBNO  TM    JQEFLAG3,JQE3JOB    IS THIS A BATCH JOB\n         BNZ   CKSTC               NO, SEE IF STARTED TASK\n         CLI   LASTYPE,C'J'        ARE WE LOOKING FOR A BATCH JOB\n         BE    JQEFND              YES, GO PROCESS IT\n         B     NEXTJQE             NO, GET NEXT JQE\nCKSTC    TM    JQEFLAG3,JQE3STC    IS THIS A STC\n         BNO   CKTSU               NO, SEE IF A TSO USER\n         CLI   LASTYPE,C'S'        ARE WE LOOKING FOR A STARTED TASK\n         BE    JQEFND              YES, GO PROCESS IT\n         B     NEXTJQE             NO, GET NEXT JQE\nCKTSU    CLI   LASTYPE,C'T'        ARE WE LOOKING FOR A TSO USER\n         BE    JQEFND              YES, GO PROCESS IT\nNEXTJQE  LH    R1,LOWJOB           LOAD PREVIOUS JOB NUMBER\n         LA    R1,1(R1)            ADD 1 TO JOB NUMBER\n         STH   R1,LOWJOB           SAVE NEW JOB NUMBER\n         CH    R1,HIGHJOB          SEE IF END OF RANGE\n         BNH   JQESCAN1            NO, LOOP\n         L     R1,LASTRNG          LOAD ADDRESS OF LAST RANGE ENTRY\n         LA    R1,6(R1)            INCREMENT TO NEXT ENTRY\n         ST    R1,LASTRNG          AND SAVE ADDRESS OF THIS ENTRY\n         CLI   0(R1),X'FF'         SEE IF END OF RANGES\n         BE    NEXTJQE1            YES, END OF PROCESSING\n         MVC   LASTYPE,0(R1)       SAVE JOB TYPE\n         MVC   LOWJOB,2(R1)        SAVE LOW JOB\n         MVC   HIGHJOB,4(R1)       SAVE HIGH JOB\n         B     JQESCAN1            GO PROCESS THIS RANGE\nNEXTJQE1 TM    MISCSW1,FOUND       SEE IF ANY JOBS FOUND\n         BO    EXIT8               YES, GET OUT\n         MVC   COMMAND(L'MSG2),MSG2 SET NO JOBS FOUND MESSAGE\n         LA    R0,L'MSG2           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=900    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BUILD BASIC PORTION OF MESSAGE                               *\n*                                                                     *\n***********************************************************************\nJQEFND   OI    MISCSW1,FOUND       TURN ON JOB FOUND INDICATOR\n         MVI   COMMAND,C' '        BLANK ENTIRE\n         MVC   COMMAND+1(199),COMMAND  COMMAND\n         LH    R1,LOWJOB           LOAD JOB NUMBER\n         MVC   COMMAND(3),=C'JOB'  ASSUME BATCH JOB\n         TM    JQEFLAG3,JQE3JOB    IS IT A BATCH JOB\n         BZ    JQEFND01            YES, BRANCH\n         MVC   COMMAND(3),=C'STC'  ASSUME STARTED TASK\n         TM    JQEFLAG3,JQE3STC    IS IT A STC\n         BO    JQEFND01            YES, BRANCH\n         MVC   COMMAND(3),=C'TSU'  MUST BE A TSO USER\nJQEFND01 CVD   R1,DOUBLE           CONVERT JOB NUMBER TO PACKED\n         MVC   DBL(6),=X'402020202120' SET EDIT MASK\n         ED    DBL(6),DOUBLE+5     EDIT JOB NUMBER\n         MVC   COMMAND+3(5),DBL+1  MOVE JOB NUMBER TO MESSAGE\n         MVC   COMMAND+9(8),JQEJNAME MOVE JOB NAME TO MESSAGE\n         TM    JQEXFLG2,JQEXUHLD   USER HOLD?\n         BNO   NOHLD               NO. JQE NOT ON USER HOLD\n         $QSUSE ,\n         NI    JQEXFLG2,255-JQEXUHLD TURN OFF THE BIT\n         $POST $HASPECF,(JOB,CNVT,HOPE,PURGE),MASPOST=YES\n         LR     R1,R9\n         $CKPT  ID=JQE,ADDR=(R1)                SET CHECKPOINT\n*\n* UPDATE THE JCT VIA EXIT 7 JCT READ/WRITE EXIT\n*\n         $JCTIO TYPE=READ,JQE=(R9) BRING IN THE JCT FOR THIS JQE\n         LR    R3,R1               PUT ADDRESS OF BUFFER IN R3\n         $JCTIO TYPE=WRITE,JQE=(R9),JCTBUF=(R3),FREE=YES REWRITE JCT\n         MVC   COMMAND+18(L'MSG4),MSG4\n         LA    R0,LMSG4\n         $CWTO L=(R0),JOB=NO,MSGID=903\n         B     NEXTJQE             GO GET ANOTHER ONE\nNOHLD    DS    0H\n         MVC   COMMAND+18(L'MSG5),MSG5\n         LA    R0,LMSG5\n         $CWTO L=(R0),JOB=NO,MSGID=904\n         B     NEXTJQE\n         EJECT\n*****************************************************************\n*                                                               *\n*        SUBROUTINE TO VERIFY CONSOLE/AREA                      *\n*                                                               *\n*****************************************************************\n         SPACE 1\nMSGVCCA  TM    FBLFLG,FBLFLGR      SEE IF REMOTE SYSTEM UCM\n         BOR   R4                  YES, UCM AND AREA ARE OK\n         L     R2,$COMEXTN         POINT TO CONSOLE WORK AREA\n         USING CWA,R2              SET ADDRESSABILITY TO CWA\n         MVC   XASCID(1),COMUCM    SET UCM ID\n         MVC   XASDID(1),COMUCMA   SET AREA ID\n         CLI   XASDID,0            SEE IF AREA ID SPECIFIED\n         BNZ   MSGSSAOP            YES, BRANCH\n         MVI   XASDID,C'Z'         NO,  FORCE AREA Z\nMSGSSAOP MVC   XAU(1),COMUCM       TELL OS SOURCE IS SAME AS OUTPUT\n         MVI   XAN,X'22'           SET ID FOR VERIFIER\n         MODESET EXTKEY=ZERO       GET KEY 0\n         L     R15,CWA7603D        POINT TO OS VERIFICATION ROUTINE\n         $AMODE 24,PUSHR=0,R=R14   GO TO AMODE 24\n         BALR  R14,R15             ENTER IT\n         $AMODE POPR=0,R=R14       RETURN TO ORIGINAL AMODE\n         MODESET EXTKEY=HASP       RETURN TO KEY 1\n         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR\n         BNHR  R4                  NO, RETURN TO CALLER\n         SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,B'0011',COMUCM   PICK UP UCM AND AREA ID\n         MVI   COMUCMA,0           FORCE NO DISPLAY AREA\n         CH    R15,=H'12'          SEE IF CONSOLE DOWN\n         BNE   *+16                NO, DO NOT SET LOGICAL CONSOLE\n         MVC   COMFLAG(4),MOWTOL   DESTROY APPARENT SOURCE INFO\n         MVC   COMOUT,MOWTOL+(COMOUT-COMFLAG) OMITTING CNTL FIELD\n         $CWTO L=L'CMBMSG,MSGID=908 ECHO THE COMMAND\n         MVC   COMMAND(MBVINVL),MBVINV SET ERROR MESSAGE TEXT\n         STC   R3,MBVINVA          SET AREA\n         SRL   R3,8                ALIGN CONSOLE ID\n         CVD   R3,$DOUBLE          CONVERT TO PACKED\n         MVC   DBL(4),=X'F0212020' SET EDIT MASK\n         ED    DBL(4),$DOUBLE+6    EDIT CONSOLE ID TO AREA\n         MVC   MBVINVC,DBL+2       MOVE CONSOLE ID TO MESSAGE\n         MVC   COMMAND+MBVINVL(8),COMACEID MOVE IDENTIFIER\n         $CWTO L=MBVINVL,MSGID=999 WRITE ERROR MESSAGE TO CONSOLE\n         B     EXIT8               GET OUT\n         DROP  R2                  DROP ADDRESSABILITY TO CWA\n         EJECT\n*****************************************************************\n*                                                               *\n*       R E D I R E C T   R O U T I N E   C O N S T A N T S     *\n*                                                               *\n*****************************************************************\n         SPACE 1\nMOWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX\nMBVINV   DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '\nMBVINVL  EQU   *-MBVINV\nMBVINVC  EQU   COMMAND+MBVINVL-16,2\nMBVINVA  EQU   MBVINVC+2,1\nFBLFLG   EQU   COMEWORK+2          FLAG BYTE\nCOMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER\nFBLFLGR  EQU   1                   UCM COMMAND FROM REMOTE SYSTEM\nFBLFLGC  EQU   2                   CONSOLE HAS BEEN SPECIFIED\nFBLFLGA  EQU   4                   AREA HAS BEEN SPECIFIED\n         EJECT\n***********************************************************************\n*        CONSTANTS FOR $UA                                            *\n***********************************************************************\n         SPACE 3\nBLANKS   DC    CL20' '             STRING OF 20 BLANKS\n         SPACE 3\nMSG1     DC    C'MORE THAN 50 JOBS OR RANGES SPECIFIED'\nMSG2     DC    CL16'JOB(S) NOT FOUND'\nMSG3     DC    C' INVALID OPERAND'\nMSG4     DC    C' RELEASED FROM USER HOLD'\nLMSG4    EQU   *-MSG4+18\nMSG5     DC    C' NOT ON USER HOLD'\nLMSG5    EQU   *-MSG5+18\n         SPACE 3\nDEVNTBL  DS    0F                  DEVICE NAME TABLE\n         DC    AL1(5),CL7'INTRDR'\n         DC    AL1(5),CL7'READER'\n         DC    AL1(5),CL7'PRINTR'\n         DC    AL1(4),CL7'PUNCH'\n         DC    AL1(1),CL7'JT'\n         DC    AL1(1),CL7'JR'\n         DC    AL1(1),CL7'ST'\n         DC    AL1(1),CL7'SR'\n         DC    AL1(2),CL7'RMT'\n         DC    AL1(2),CL7'RDR'\n         DC    AL1(2),CL7'PRT'\n         DC    AL1(2),CL7'PUN'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INVALID $UA OPERAND                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nBADOPRND L     R1,0(0,R5)          POINT TO INVALID OPERAND\n         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG\n         MVC   COMMAND+9(L'MSG3),MSG3 SET ERROR MESSAGE\n         LA    R0,L'MSG3+9         SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\nEXIT0    LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nEXIT8    $FREEBUF (R8)             FREE THE WORK AREA\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "J005$UH": {"ttr": 12038, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "J005$UH  TITLE 'JES2 $UH COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED PROCESS THE $UH COMMAND   *\n*        WHEN ENTERED.  THIS COMMAND IS IMPLEMENTED AS A TYPE 5       *\n*        EXIT TO JES2, AND AS SUCH MUST INTERCEPT ONLY THE $UH        *\n*        COMMAND WHEN ENCOUNTERED.                                    *\n*                                                                     *\n*                                                                     *\n*        THE $UH COMMAND HAS THE FOLLOWING SYNTAX:                    *\n*                                                                     *\n*        $UH                                                          *\n*             JN-NN                                                   *\n*             SN-NN                                                   *\n*             TN-NN                                                   *\n*                                                                     *\n*        WHERE:                                                       *\n*                                                                     *\n*        JN-NN         - LIST JOB INFORMATION FOR THE SPECIFIED       *\n*                        BATCH JOB(S)                                 *\n*        SN-NN         - LIST JOB INFORMATION FOR THE SPECIFIED       *\n*                        STARTED TASK(S)                              *\n*        TN-NN         - LIST JOB INFORMATION FOR THE SPECIFIED       *\n*                        TSO USER(S)                                  *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *\n*                                                                     *\n*        1)  THE HASP90X MESSAGES ARE MADE UPON COMPLETION OF         *\n*            COMMAND                                                  *\n*                                                                     *\n*        $HASP905 JOB XXX XXXXXXXX PLACED ON USER HOLD                *\n*                                                                     *\n*        $HASP906 JOB XXX XXXXXXXX ALREADY ON USER HOLD               *\n*                                                                     *\n*        2)  THE HASP900 MESSAGE WILL BE ISSUED WHEN NONE             *\n*            OF THE REQUESTED JOBS CANNOT BE FOUND.                   *\n*                                                                     *\n*        $HASP900 JOB(S) NOT FOUND                                    *\n*                                                                     *\n*        3)  THE HASP999 MESSAGE WILL BE ISSUED FOR ALL               *\n*            ERRORS.                                                  *\n*                                                                     *\n*        $HASP999 XXXXXXXXX INVALID OPERAND                           *\n*                                                                     *\n*        THE JOBNAME/JOB NUMBER CONTAINS INVALID SYNTAX.              *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J 0 0 5 $ U H            *\n*                                                                     *\n*        01)  $AMODE       SYS1.HASPSRC                               *\n*        02)  $BUFFER      SYS1.HASPSRC                               *\n*        03)  $CAT         SYS1.HASPSRC                               *\n*        04)  $CMB         SYS1.HASPSRC                               *\n*        05)  $COMWORK     SYS1.HASPSRC                               *\n*        06)  $CWA         SYS1.HASPSRC                               *\n*        07)  $CWTO        SYS1.HASPSRC                               *\n*        08)  $DAS         SYS1.HASPSRC                               *\n*        09)  $DCT         SYS1.HASPSRC                               *\n*        10)  $ENTRY       SYS1.HASPSRC                               *\n*        11)  $FREEBUF     SYS1.HASPSRC                               *\n*        12)  $GETBUF      SYS1.HASPSRC                               *\n*        13)  $HASPEQU     SYS1.HASPSRC                               *\n*        14)  $HASPGBL     SYS1.HASPSRC                               *\n*        15)  $HCT         SYS1.HASPSRC                               *\n*        16)  $IOT         SYS1.HASPSRC                               *\n*        17)  $JCT         SYS1.HASPSRC                               *\n*        18)  $JOE         SYS1.HASPSRC                               *\n*        19)  $JQE         SYS1.HASPSRC                               *\n*        20)  $LCK         SYS1.HASPSRC                               *\n*        21)  $MIT         SYS1.HASPSRC                               *\n*        22)  $MODEND      SYS1.HASPSRC                               *\n*        23)  $MODULE      SYS1.HASPSRC                               *\n*        24)  $PADDR       SYS1.HASPSRC                               *\n*        25)  $PCE         SYS1.HASPSRC                               *\n*        26)  $QLOC        SYS1.HASPSRC                               *\n*        27)  $QSE         SYS1.HASPSRC                               *\n*        28)  $RETURN      SYS1.HASPSRC                               *\n*        29)  $SAVE        SYS1.HASPSRC                               *\n*        30)  $TAB         SYS1.HASPSRC                               *\n*        31)  IAZRESPA     SYS1.AMODGEN                               *\n*        32)  IFGRPL       SYS1.MACLIB                                *\n*        33)  MODESET      SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       4K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ005$UH  $MODULE $HASPEQU,                                             X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $CMB,               GENERATE HASP CMB DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $CWA,               GENERATE HASP CWA DSECT             X\n               $DAS,               GENERATE HASP DAS DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $IOT,               GENERATE HASP IOT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $KIT,               GENERATE HASP KIT DSECT             X\n               $LCK,               GENERATE HASP LCK DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $PDDB,              GENERATE HASP PDDB DSECT            X\n               $QSE,               GENERATE HASP QSE DSECT             X\n               $TAB,               GENERATE HASP TAB DSECT             X\n               RESPA,              GENERATE MVS  RESPA DSECT           X\n               RPL                 GENERATE MVS  IFGRPL DSECT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREAS                                           *\n*                                                                     *\n***********************************************************************\n$UHWORK  DSECT\n         DS    CL(BUFSTART-BFPDSECT) **** RESERVED BY JES2 ****\nDOUBLE   DS    D                   DOUBLE WORD WORK AREA\nDBL      DS    D                   DOUBLE WORD WORK AREA\nROUTCDE  DS    F                   DESTINATION CODE FOR SETDEST ROUTINE\nSAVEBAS  DS    CL18                MSG SAVE AREA FOR JOB NBR AND NAME\nLTEXT    DS    H                   CURRENT LENGTH OF MESSAGE AREA\nRC       DS    H                   $CWTO RETURN CODE\nLOWJOB   DS    H                   LOW RANGE JOB REQUESTED\nHIGHJOB  DS    H                   HIGH RANGE JOB REQUESTED\nJOBNAME  DS    CL8                 JOBNAME REQUESTED\nJOBNAMEL DS    H                   LENGTH OF JOBNAME REQUESTED\nMISCSW1  DS    X                   MISCELLANEOUS SWITCHES\nNAME     EQU   X'80'               A JOBNAME WAS ENTERED - NOT NUMBER\nFOUND    EQU   X'40'               A JOB WAS FOUND FOR PROCESSING\nSPOOLS   EQU   X'20'               SPOOL VOLUME INFORMATION REQUESTED\nVOLHEAD  EQU   X'10'               SPOOL VOLUME HEADER WRITTEN IND\nMISCSW2  DS    X                   MISCELLANEOUS SWITCHES\nJOEFND   EQU   X'80'               AN ACTIVE JOE FOUND FOR THIS JOB\nLASTYPE  DS    C                   LAST JOB TYPE PROCESSED\nDEVNO    DS    H                   NUMBER OF ACTIVE DEVICES\nLASTRNG  DS    F                   ADDRESS OF LAST RANGE ENTRY\nRANGES   DS    H                   NUMBER OF JOB RANGES ENTERED\n***********************************************************************\n*                                                                     *\n*       THE JOB RANGE ENTRY TABLE HAS A FORMAT AS FOLLOWS:            *\n*                                                                     *\n*       1 BYTE   JOB TYPE (J/S/T)                                     *\n*       1 BYTE   FILLER                                               *\n*       HALFWORD LOW  JOB NUMBER IN RANGE                             *\n*       HALFWORD HIGH JOB NUMBER IN RANGE                             *\n*                                                                     *\n***********************************************************************\nRANGETBL DS    51CL6               ROOM FOR 50 RANGES + END OF LIST\nSAVEAFF  DS    16F                 REGISTER SAVE FOR SETAFF  ROUTINE\nSAVESPL  DS    16F                 REGISTER SAVE FOR SETSPL  ROUTINE\nSAVEBLD  DS    16F                 REGISTER SAVE FOR BLDACT  ROUTINE\nSAVEPUT  DS    16F                 REGISTER SAVE FOR BLDPUT  ROUTINE\nDEVTBL   DS    50XL4               ACTIVE DEVICE TABLE\n         SPACE 3\nJ005$UH  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         TITLE 'JES2 $UH COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE005$UH  $ENTRY BASE=(R10,R12)\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R10,R15             LOAD FIRST BASE REGISTER\n         LA    R12,4095(R10)       LOAD SECOND\n         LA    R12,1(R12)               BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       - ADDRESS OF THE CURRENT OPERAND                    *\n*        R6       - INCREMENT VALUE OF 4                              *\n*        R7       - ADDRESS OF THE LAST OPERAND                       *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SEE IF THIS IS A $UH COMMAND                                 *\n*                                                                     *\n***********************************************************************\n         CLC   COMVERB(2),=C'UH'   SEE IF THIS IS THE $UH COMMAND\n         BNE   EXIT0               NO, BRANCH TO COMMAND OK EXIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GET A JES2 BUFFER FOR REENTRANCY AND                         *\n*        CLEAR THE COMMAND WORK AREA                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nUHOK     $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R8,R1               SAVE WORK AREA ADDRESS\n         USING $UHWORK,R8          SET ADDRESSABILITY TO WORK AREA\n         LA    R14,$UHWORK+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS\n         LH    R15,$BUFSIZE        SET   'TO'   LENGTH\n         SLR   R0,R0               CLEAR 'FROM' ADDRESS\n         SLR   R1,R1               CLEAR 'FROM' LENGTH\n         MVCL  R14,R0              CLEAR THE BUFFER\n*****************************************************************\n*                                                               *\n*        CHECK FOR AUTOMATIC REDIRECTION OF RESPONSES           *\n*                                                               *\n*****************************************************************\n         SPACE 1\n         TM    COMFLAG,CMBFLAGU    IS THIS A UCM\n         BZ    MSGGOOD             NO, SKIP REDIRECTION\n         TM    FBLFLG,FBLFLGC+FBLFLGR CONSOLE SET OR REMOTE SYSTEM\n         BNZ   MSGRPT              SKIP AUTOMATIC L=CCA\n         LA    R1,4                LOAD REDIRECT OFFSET FOR $UH\n*                                  SAME AS FOR $DJ\n         BCTR  R1,0                REDUCE BY 1\n         SLL   R1,1                DOUBLE\n         SLR   R2,R2               ZERO REGISTER FOR IC\n         IC    R2,COMUCM           PICK UP CURRENT UCM ID\n         L     R14,$COMEXTN        POINT TO CONSOLE WORK AREA\n         USING CWA,R14             SET ADDRESSABILITY TO CWA\n         CH    R2,CWAOCON          SEE IF EXCEEDS MAXIMUM\n         BH    MSGRPT              YES, ERROR, NO AUTOMATIC REDIRECTION\n         MH    R2,CWALCON          MULTIPLY BY LENGTH OF EACH ENTRY\n         AR    R1,R2               COMBINE OFFSETS\n         LA    R1,CWARESP-CWACONL(R1) POINT TO CORRECT CWA ENTRY\n         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID\n         TM    FBLFLG,FBLFLGA      HAS AREA BEEN SET\n         BO    MSGRPT              YES, SKIP AUTOMATIC REDIRECTION\n         MVC   COMUCMA,CWACONA(R1) SET NEW AREA\n         DROP  R14                 DROP ADDRESSABILITY TO CWA\nMSGRPT   BAL   R4,MSGVCCA          VERIFY CCA (NO RETURN IF BAD)\n         CLI   COMUCMA,0           TEST FOR DISPLAY AREA\n         BZ    MSGGOOD             IF NOT, SKIP\n         MVI   COMLINET,X'80'      SET CONTROL LINE\n         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND\n         MVI   COMLINET,X'20'      SET DATA LINE\n***********************************************************************\n*                                                                     *\n*        EXTRACT THE JOB/TSU/STC RANGE FROM THE COMMAND BUFFER        *\n*                                                                     *\n***********************************************************************\n*        SEARCH FOR END OF FIRST JOB NUMBER IN RANGE                  *\n***********************************************************************\nMSGGOOD  MVI   LASTYPE,C'J'        DEFAULT JOB TYPE TO JOB\n         LA    R1,COMVERB+2        POINT TO START OF JOB NUMBER\n         LA    R4,RANGETBL         POINT TO JOB RANGE TABLE\nSETRNG01 LR    R14,R1              POINT TO OPERAND\n         LR    R2,R1               SAVE START OF OPERAND ADDRESS\n         SLR   R15,R15             SET LENGTH\n         CLI   0(R14),C'0'         SEE IF NUMERIC\n         BNL   SETRNG03            YES, MUST BE JOB NUMBER\n         CLC   0(3,R14),=C'JOB'    SEE IF JOB\n         BNE   CKJOB2              NO, CHECK FOR JXXX\n         LA    R14,2(R14)          UPDATE R14 TO POINT TO LAST CHAR\n         B     SETRNG02            NOW GO PROCESS AS A JOB\nCKJOB2   CLI   0(R14),C'J'         SEE IF JOB\n         BE    SETRNG02            YES, BRANCH\n         CLC   0(3,R14),=C'STC'    SEE IF STC\n         BNE   CKSTC2              NO, CHECK FOR JXXX\n         LA    R14,2(R14)          UPDATE R14 TO POINT TO LAST CHAR\n         B     SETRNG02            NOW GO PROCESS AS A JOB\nCKSTC2   CLI   0(R14),C'S'         SEE IF STC\n         BE    SETRNG02            YES, BRANCH\n         CLC   0(3,R14),=C'TSO'    SEE IF TSO\n         BNE   CKTSO2              NO, CHECK FOR JXXX\n         LA    R14,2(R14)          UPDATE R14 TO POINT TO LAST CHAR\n         B     SETRNG02            NOW GO PROCESS AS A JOB\nCKTSO2   CLI   0(R14),C'T'         SEE IF TSO\n         BNE   BADOPRND            NO, MUST BE A KEYWORD OPERAND\nSETRNG02 MVC   LASTYPE,0(R1)       SAVE JOB TYPE\n         CLI   1(R14),C'0'         SEE IF NEXT CHAR NUMERIC\n         BL    BADOPRND            NO, MUST BE A KEYWORD OPERAND\n         LA    R14,1(R14)          INCREMENT PAST JOB TYPE\n         LR    R2,R14              SAVE START OF OPERAND ADDRESS\nSETRNG03 CLI   0(R14),C' '         END OF OPERAND\n         BE    SETRNG04            YES, BRANCH\n         CLI   0(R14),C'-'         END OF OPERAND\n         BE    SETRNG04            YES, BRANCH\n         CLI   0(R14),C','         END OF OPERAND\n         BE    SETRNG04            YES, BRANCH\n         CLI   0(R14),C'0'         SEE IF NUMERIC\n         BL    BADOPRND            NO, ERROR\n         CLI   0(R14),C'9'         SEE IF NUMERIC\n         BH    BADOPRND            NO, ERROR\n         LA    R15,1(R15)          ADD 1 TO LENGTH\n         LA    R14,1(R14)          INCREMENT TO NEXT CHAR OF JOB NBR\n         B     SETRNG03            LOOP\nSETRNG04 LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'5'           TEST LENGTH\n         BH    BADOPRND            GREATER THAN 5, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,PKJOBNO         PACK JOB NUMBER\n         CVB   R15,DOUBLE          CONVERT TO BINARY\n         LTR   R15,R15             TEST JOB NUMBER\n         BZ    BADOPRND            YES, BRANCH\n         CH    R15,=H'9999'        SEE IF EXCEEDS MAXIMUM\n         BH    BADOPRND            YES, BRANCH\n         STH   R15,LOWJOB          SAVE AS LOW JOB NUMBER\n         STH   R15,HIGHJOB         AND AS HIGH JOB NUMBER\n         CLI   0(R14),C'-'         SEE IF JOB RANGE REQUESTED\n         BNE   SETRNG07            NO, GO SEE IF OTHER JOB RANGES\n         LA    R14,1(R14)          INCREMENT PAST '-'\n         LR    R2,R14              SAVE START OF OPERAND ADDRESS\n         XR    R15,R15             SET LENGTH\n***********************************************************************\n*        SEARCH FOR END OF SECOND JOB NUMBER IN RANGE                 *\n***********************************************************************\nSETRNG05 CLI   0(R14),C' '         END OF OPERAND\n         BE    SETRNG06            YES, BRANCH\n         CLI   0(R14),C','         END OF OPERAND\n         BE    SETRNG06            YES, BRANCH\n         CLI   0(R14),C'0'         SEE IF NUMERIC\n         BL    BADOPRND            NO, ERROR\n         CLI   0(R14),C'9'         SEE IF NUMERIC\n         BH    BADOPRND            NO, ERROR\n         LA    R15,1(R15)          ADD 1 TO LENGTH\n         LA    R14,1(R14)          INCREMENT TO NEXT CHAR OF JOB NBR\n         B     SETRNG05            LOOP\nSETRNG06 LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         CH    R15,=H'5'           TEST LENGTH\n         BH    BADOPRND            GREATER THAN 5, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,PKJOBNO         PACK JOB NUMBER\n         CVB   R15,DOUBLE          CONVERT TO BINARY\n         LTR   R15,R15             TEST JOB NUMBER\n         BZ    BADOPRND            YES, BRANCH\n         CH    R15,=H'9999'        SEE IF EXCEEDS MAXIMUM\n         BH    BADOPRND            YES, BRANCH\n         STH   R15,HIGHJOB         AND AS HIGH JOB NUMBER\nSETRNG07 LH    R15,RANGES          LOAD NUMBER OF RANGES\n         LA    R15,1(R15)          ADD 1 TO NUMBER OF RANGES\n         CH    R15,=H'50'          SEE IF MAX EXCEEDED\n         BNH   SETRNG08            NO, CONTINUE\n         MVC   COMMAND(L'MSG1),MSG1 SET MAXIMUM RANGE EXCEEDED MSG\n         LA    R0,L'MSG1           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\nSETRNG08 STH   R15,RANGES          SAVE NEW NUMBER OF RANGES\n         MVC   0(1,R4),LASTYPE     SET JOB TYPE IN TABLE\n         MVC   2(2,R4),LOWJOB      SET LOW JOB NUMBER IN TABLE\n         MVC   4(2,R4),HIGHJOB     SET HIGH JOB NUMBER IN TABLE\n         LA    R4,6(R4)            INCREMENT TO NEXT RANGE TABLE ENTRY\n         MVI   0(R4),X'FF'         FLAG END OF LIST\n         BXH   R5,R6,JQESCAN       IF NO MORE EXIT\n         L     R1,0(R5)            POINT TO OPERAND\n         B     SETRNG01            PROCESS THIS OPERAND\nPKJOBNO  PACK  DOUBLE,0(0,R2)      *** EXECUTE ONLY ***\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SCAN THE JOB QUEUE FOR THE JOB LIST                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nJQESCAN  LA    R1,RANGETBL         LOAD ADDRESS OF FIRST RANGE ENTRY\n         ST    R1,LASTRNG          SAVE ADDRESS OF THIS RANGE ENTRY\n         MVC   LASTYPE,0(R1)       SAVE JOB TYPE\n         MVC   LOWJOB,2(R1)        SAVE LOW JOB\n         MVC   HIGHJOB,4(R1)       SAVE HIGH JOB\nJQESCAN1 LH    R1,LOWJOB           LOAD JOB NUMBER\n         $QLOC (R1)                GET JQE FOR THIS JOB NUMBER\n         BZ    NEXTJQE             GET NEXT JQE IF NOT FOUND\n         LR    R9,R1               SAVE JQE ADDRESS\n         USING JQE,R9              SET ADDRESSABILITY TO JQE\nCKJOBNO  TM    JQEFLAG3,JQE3JOB    IS THIS A BATCH JOB\n         BNZ   CKSTC               NO, SEE IF STARTED TASK\n         CLI   LASTYPE,C'J'        ARE WE LOOKING FOR A BATCH JOB\n         BE    JQEFND              YES, GO PROCESS IT\n         B     NEXTJQE             NO, GET NEXT JQE\nCKSTC    TM    JQEFLAG3,JQE3STC    IS THIS A STC\n         BNO   CKTSU               NO, SEE IF A TSO USER\n         CLI   LASTYPE,C'S'        ARE WE LOOKING FOR A STARTED TASK\n         BE    JQEFND              YES, GO PROCESS IT\n         B     NEXTJQE             NO, GET NEXT JQE\nCKTSU    CLI   LASTYPE,C'T'        ARE WE LOOKING FOR A TSO USER\n         BE    JQEFND              YES, GO PROCESS IT\nNEXTJQE  LH    R1,LOWJOB           LOAD PREVIOUS JOB NUMBER\n         LA    R1,1(R1)            ADD 1 TO JOB NUMBER\n         STH   R1,LOWJOB           SAVE NEW JOB NUMBER\n         CH    R1,HIGHJOB          SEE IF END OF RANGE\n         BNH   JQESCAN1            NO, LOOP\n         L     R1,LASTRNG          LOAD ADDRESS OF LAST RANGE ENTRY\n         LA    R1,6(R1)            INCREMENT TO NEXT ENTRY\n         ST    R1,LASTRNG          AND SAVE ADDRESS OF THIS ENTRY\n         CLI   0(R1),X'FF'         SEE IF END OF RANGES\n         BE    NEXTJQE1            YES, END OF PROCESSING\n         MVC   LASTYPE,0(R1)       SAVE JOB TYPE\n         MVC   LOWJOB,2(R1)        SAVE LOW JOB\n         MVC   HIGHJOB,4(R1)       SAVE HIGH JOB\n         B     JQESCAN1            GO PROCESS THIS RANGE\nNEXTJQE1 TM    MISCSW1,FOUND       SEE IF ANY JOBS FOUND\n         BO    EXIT8               YES, GET OUT\n         MVC   COMMAND(L'MSG2),MSG2 SET NO JOBS FOUND MESSAGE\n         LA    R0,L'MSG2           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=900    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BUILD BASIC PORTION OF MESSAGE                               *\n*                                                                     *\n***********************************************************************\nJQEFND   OI    MISCSW1,FOUND       TURN ON JOB FOUND INDICATOR\n         MVI   COMMAND,C' '        BLANK ENTIRE\n         MVC   COMMAND+1(199),COMMAND  COMMAND\n         LH    R1,LOWJOB           LOAD JOB NUMBER\n         MVC   COMMAND(3),=C'JOB'  ASSUME BATCH JOB\n         TM    JQEFLAG3,JQE3JOB    IS IT A BATCH JOB\n         BZ    JQEFND01            YES, BRANCH\n         MVC   COMMAND(3),=C'STC'  ASSUME STARTED TASK\n         TM    JQEFLAG3,JQE3STC    IS IT A STC\n         BO    JQEFND01            YES, BRANCH\n         MVC   COMMAND(3),=C'TSU'  MUST BE A TSO USER\nJQEFND01 CVD   R1,DOUBLE           CONVERT JOB NUMBER TO PACKED\n         MVC   DBL(6),=X'402020202120' SET EDIT MASK\n         ED    DBL(6),DOUBLE+5     EDIT JOB NUMBER\n         MVC   COMMAND+3(5),DBL+1  MOVE JOB NUMBER TO MESSAGE\n         MVC   COMMAND+9(8),JQEJNAME MOVE JOB NAME TO MESSAGE\n         TM    JQEXFLG2,JQEXUHLD   USER HOLD?\n         BO    UHOLD               YES. JOB ALREADY ON USER HOLD\n         $QSUSE ,\n         OI    JQEXFLG2,JQEXUHLD   TURN ON USER HOLD\n         $POST $HASPECF,(JOB,CNVT,HOPE,PURGE),MASPOST=YES\n         LR     R1,R9\n         $CKPT  ID=JQE,ADDR=(R1)                SET CHECKPOINT\n*\n* UPDATE THE JCT VIA EXIT 7 JCT READ/WRITE EXIT\n*\n         $JCTIO TYPE=READ,JQE=(R9) BRING IN THE JCT FOR THIS JQE\n         LR    R3,R1               PUT ADDRESS OF BUFFER IN R3\n         $JCTIO TYPE=WRITE,JQE=(R9),JCTBUF=(R3),FREE=YES REWRITE JCT\n         MVC   COMMAND+18(L'MSG4),MSG4\n         LA    R0,LMSG4\n         $CWTO L=(R0),JOB=NO,MSGID=905\n         B     NEXTJQE             GO GET ANOTHER ONE\nUHOLD    DS    0H\n         MVC   COMMAND+18(L'MSG5),MSG5 ISSUE JOB ON HOLD MESSAGE\n         LA    R0,LMSG5\n         $CWTO L=(R0),JOB=NO,MSGID=906\n         B     NEXTJQE\n         EJECT\n*****************************************************************\n*                                                               *\n*        SUBROUTINE TO VERIFY CONSOLE/AREA                      *\n*                                                               *\n*****************************************************************\n         SPACE 1\nMSGVCCA  TM    FBLFLG,FBLFLGR      SEE IF REMOTE SYSTEM UCM\n         BOR   R4                  YES, UCM AND AREA ARE OK\n         L     R2,$COMEXTN         POINT TO CONSOLE WORK AREA\n         USING CWA,R2              SET ADDRESSABILITY TO CWA\n         MVC   XASCID(1),COMUCM    SET UCM ID\n         MVC   XASDID(1),COMUCMA   SET AREA ID\n         CLI   XASDID,0            SEE IF AREA ID SPECIFIED\n         BNZ   MSGSSAOP            YES, BRANCH\n         MVI   XASDID,C'Z'         NO,  FORCE AREA Z\nMSGSSAOP MVC   XAU(1),COMUCM       TELL OS SOURCE IS SAME AS OUTPUT\n         MVI   XAN,X'22'           SET ID FOR VERIFIER\n         MODESET EXTKEY=ZERO       GET KEY 0\n         L     R15,CWA7603D        POINT TO OS VERIFICATION ROUTINE\n         $AMODE 24,PUSHR=0,R=R14   GO TO AMODE 24\n         BALR  R14,R15             ENTER IT\n         $AMODE POPR=0,R=R14       RETURN TO ORIGINAL AMODE\n         MODESET EXTKEY=HASP       RETURN TO KEY 1\n         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR\n         BNHR  R4                  NO, RETURN TO CALLER\n         SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,B'0011',COMUCM   PICK UP UCM AND AREA ID\n         MVI   COMUCMA,0           FORCE NO DISPLAY AREA\n         CH    R15,=H'12'          SEE IF CONSOLE DOWN\n         BNE   *+16                NO, DO NOT SET LOGICAL CONSOLE\n         MVC   COMFLAG(4),MOWTOL   DESTROY APPARENT SOURCE INFO\n         MVC   COMOUT,MOWTOL+(COMOUT-COMFLAG) OMITTING CNTL FIELD\n         $CWTO L=L'CMBMSG,MSGID=908 ECHO THE COMMAND\n         MVC   COMMAND(MBVINVL),MBVINV SET ERROR MESSAGE TEXT\n         STC   R3,MBVINVA          SET AREA\n         SRL   R3,8                ALIGN CONSOLE ID\n         CVD   R3,$DOUBLE          CONVERT TO PACKED\n         MVC   DBL(4),=X'F0212020' SET EDIT MASK\n         ED    DBL(4),$DOUBLE+6    EDIT CONSOLE ID TO AREA\n         MVC   MBVINVC,DBL+2       MOVE CONSOLE ID TO MESSAGE\n         MVC   COMMAND+MBVINVL(8),COMACEID MOVE IDENTIFIER\n         $CWTO L=MBVINVL,MSGID=999 WRITE ERROR MESSAGE TO CONSOLE\n         B     EXIT8               GET OUT\n         DROP  R2                  DROP ADDRESSABILITY TO CWA\n         EJECT\n*****************************************************************\n*                                                               *\n*       R E D I R E C T   R O U T I N E   C O N S T A N T S     *\n*                                                               *\n*****************************************************************\n         SPACE 1\nMOWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX\nMBVINV   DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '\nMBVINVL  EQU   *-MBVINV\nMBVINVC  EQU   COMMAND+MBVINVL-16,2\nMBVINVA  EQU   MBVINVC+2,1\nFBLFLG   EQU   COMEWORK+2          FLAG BYTE\nCOMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER\nFBLFLGR  EQU   1                   UCM COMMAND FROM REMOTE SYSTEM\nFBLFLGC  EQU   2                   CONSOLE HAS BEEN SPECIFIED\nFBLFLGA  EQU   4                   AREA HAS BEEN SPECIFIED\n         EJECT\n***********************************************************************\n*        CONSTANTS FOR $UH                                            *\n***********************************************************************\n         SPACE 3\nBLANKS   DC    CL20' '             STRING OF 20 BLANKS\n         SPACE 3\nMSG1     DC    C'MORE THAN 50 JOBS OR RANGES SPECIFIED'\nMSG2     DC    CL16'JOB(S) NOT FOUND'\nMSG3     DC    C' INVALID OPERAND'\nMSG4     DC    C' PLACED ON USER HOLD'\nLMSG4    EQU   *-MSG4+18\nMSG5     DC    C' ALREADY ON USER HOLD'\nLMSG5    EQU   *-MSG5+18\n         SPACE 3\nDEVNTBL  DS    0F                  DEVICE NAME TABLE\n         DC    AL1(5),CL7'INTRDR'\n         DC    AL1(5),CL7'READER'\n         DC    AL1(5),CL7'PRINTR'\n         DC    AL1(4),CL7'PUNCH'\n         DC    AL1(1),CL7'JT'\n         DC    AL1(1),CL7'JR'\n         DC    AL1(1),CL7'ST'\n         DC    AL1(1),CL7'SR'\n         DC    AL1(2),CL7'RMT'\n         DC    AL1(2),CL7'RDR'\n         DC    AL1(2),CL7'PRT'\n         DC    AL1(2),CL7'PUN'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INVALID $UH OPERAND                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nBADOPRND L     R1,0(0,R5)          POINT TO INVALID OPERAND\n         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG\n         MVC   COMMAND+9(L'MSG3),MSG3 SET ERROR MESSAGE\n         LA    R0,L'MSG3+9         SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\nEXIT0    LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nEXIT8    $FREEBUF (R8)             FREE THE WORK AREA\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "J005$UL": {"ttr": 12294, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 $UL COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED PROCESS THE $UL COMMAND   *\n*        WHEN ENTERED.  THIS COMMAND IS IMPLEMENTED AS A TYPE 5       *\n*        EXIT TO JES2, AND AS SUCH MUST INTERCEPT ONLY THE $UL        *\n*        COMMAND WHEN ENCOUNTERED.                                    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        THE $UL COMMAND HAS THE FOLLOWING SYNTAX:                    *\n*                                                                     *\n*        $UL                                                          *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *\n*                                                                     *\n*        1)  THE HASP908 MESSAGES ARE MADE UPON COMPLETION OF         *\n*            COMMAND                                                  *\n*                                                                     *\n*        $HASP908 JOBNAME  EXECUTING C PRIO XX SSSS                   *\n*                                                                     *\n*        $HASP908 JOBNAME  ON PRINTRXX PRIO XX SSSS                   *\n*                                                                     *\n*        $HASP908 JOBNAME  WAIT EXEC X PRIO XX SSSS                   *\n*                                                                     *\n*        2)  THE HASP900 MESSAGE WILL BE ISSUED WHEN NONE             *\n*            OF THE REQUESTED JOBS CANNOT BE FOUND.                   *\n*                                                                     *\n*        $HASP900 JOB(S) NOT FOUND                                    *\n*                                                                     *\n*        3)  THE HASP999 MESSAGE WILL BE ISSUED FOR ALL               *\n*            ERRORS.                                                  *\n*                                                                     *\n*        $HASP999 XXXXXXXXX INVALID OPERAND                           *\n*                                                                     *\n*        THE JOBNAME/JOB NUMBER CONTAINS INVALID SYNTAX.              *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J E S $ U L              *\n*                                                                     *\n*        01)  $AMODE       SYS1.HASPSRC                               *\n*        02)  $BUFFER      SYS1.HASPSRC                               *\n*        03)  $CAT         SYS1.HASPSRC                               *\n*        04)  $CMB         SYS1.HASPSRC                               *\n*        05)  $COMWORK     SYS1.HASPSRC                               *\n*        06)  $CWA         SYS1.HASPSRC                               *\n*        07)  $CWTO        SYS1.HASPSRC                               *\n*        08)  $DCT         SYS1.HASPSRC                               *\n*        09)  $ENTRY       SYS1.HASPSRC                               *\n*        10)  $EXCP        SYS1.HASPSRC                               *\n*        11)  $GETBUF      SYS1.HASPSRC                               *\n*        12)  $FREEBUF     SYS1.HASPSRC                               *\n*        13)  $HASPEQU     SYS1.HASPSRC                               *\n*        14)  $HASPGBL     SYS1.HASPSRC                               *\n*        15)  $HCT         SYS1.HASPSRC                               *\n*        16)  $IOERROR     SYS1.HASPSRC                               *\n*        17)  $IOT         SYS1.HASPSRC                               *\n*        18)  $JCT         SYS1.HASPSRC                               *\n*        19)  $JOE         SYS1.HASPSRC                               *\n*        20)  $JQE         SYS1.HASPSRC                               *\n*        21)  $MIT         SYS1.HASPSRC                               *\n*        22)  $MODEND      SYS1.HASPSRC                               *\n*        23)  $MODULE      SYS1.HASPSRC                               *\n*        24)  $PADDR       SYS1.HASPSRC                               *\n*        25)  $PCE         SYS1.HASPSRC                               *\n*        26)  $PDDB        SYS1.HASPSRC                               *\n*        27)  $QLOC        SYS1.HASPSRC                               *\n*        28)  $QSE         SYS1.HASPSRC                               *\n*        29)  $RETURN      SYS1.HASPSRC                               *\n*        30)  $SAVE        SYS1.HASPSRC                               *\n*        31)  $TAB         SYS1.HASPSRC                               *\n*        32)  $WAIT        SYS1.HASPSRC                               *\n*        33)  IAZRESPA     SYS1.AMODGEN                               *\n*        34)  IFGRPL       SYS1.MACLIB                                *\n*        35)  MODESET      SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       2K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ005$UL  $MODULE $HASPEQU,                                             X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $CMB,               GENERATE HASP CMB DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $CWA,               GENERATE HASP CWA DSECT             X\n               $DAS,               GENERATE HASP DAS DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $EXITPL,            GENERATE HASP EXITPL DSECT          X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $IOT,               GENERATE HASP IOT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $LCK,               GENERATE HASP LCK DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $PDDB,              GENERATE HASP PDDB DSECT            X\n               $QSE,               GENERATE HASP QSE DSECT             X\n               $TAB,               GENERATE HASP TAB DSECT             X\n               $XIT,               GENERATE HASP XIT DSECT             X\n               RESPA,              GENERATE MVS  RESPA DSECT           X\n               RPL                 GENERATE MVS  IFGRPL DSECT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREAS                                           *\n*                                                                     *\n***********************************************************************\n$ULWORK  DSECT\n         DS    CL(BUFSTART-BFPDSECT) **** RESERVED BY JES2 ****\n         $FCSFMTP ,\nDOUBLE   DS    D                   DOUBLE WORD WORK AREA\nDBL      DS    D                   DOUBLE WORD WORK AREA\nLOWJOB   DS    H                   LOW RANGE JOB REQUESTED\nHIGHJOB  DS    H                   HIGH RANGE JOB REQUESTED\nROUTCDE  DS    F                   DESTINATION CODE FOR SETDEST ROUTIN\nRC       DS    H                   $CWTO RETURN CODE\nLTEXT    DS    H                   CURRENT LENGTH OF MESSAGE AREA\nMISCSW1  DS    X                   MISCELLANEOUS SWITCHES\nTSO      EQU   X'80'               REQUEST IS FOR A RANGE OF TSO USERS\nSTC      EQU   X'40'               REQUEST IS FOR A RANGE OF STC'S\nJOB      EQU   X'20'               REQUEST IS FOR A RANGE OF BATCH JOBS\nFOUND    EQU   X'10'               A JOB WAS FOUND FOR PROCESSING\nMISCSW2  DS    X                   MISCELLANEOUS SWITCHES\nDEVNO    DS    H                   NUMBER OF ACTIVE DEVICES\nSAVEBAS  DS   CL18                 MSG SAVE AREA FOR JOB NBR AND NAME\nSAVEAFF  DS    16F                 REGISTER SAVE AREA FOR SETAFF RTN\nSAVEPUT  DS    16F                 REGISTER SAVE AREA FOR PUTMSG RTN\nRANGETBL DS    51CL6               ROOM FOR 50 RANGES + END OF LIST\nSAVEBLD  DS    16F                 REGISTER SAVE FOR BLDACT  ROUTINE\nDEVTBL   DS    50XL4               ACTIVE DEVICE TABLE\n         SPACE 3\nJ005$UL  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         TITLE 'JES2 $UL COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE005$UL  $ENTRY BASE=(R12)\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       - ADDRESS OF THE CURRENT OPERAND                    *\n*        R6       - INCREMENT VALUE OF 4                              *\n*        R7       - ADDRESS OF THE LAST OPERAND                       *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SEE IF THIS IS A $UL COMMAND                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CLC   COMVERB(2),=C'UL'   SEE IF THIS IS THE $UL COMMAND\n         BNE   EXIT0               NO. LET JES HANDLE IT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        GET A JES2 BUFFER FOR REENTRANCY AND                         *\n*        CLEAR THE COMMAND WORK AREA                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nULOK     $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R8,R1               SAVE WORK AREA ADDRESS\n         USING $ULWORK,R8          SET ADDRESSABILITY TO WORK AREA\n         LA    R14,$ULWORK+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS\n         LH    R15,$BUFSIZE        SET   'TO'   LENGTH\n         SLR   R0,R0               CLEAR 'FROM' ADDRESS\n         SLR   R1,R1               CLEAR 'FROM' LENGTH\n         MVCL  R14,R0              CLEAR THE BUFFER\n         SPACE 1\n*****************************************************************\n*                                                               *\n*        INITIALIZE PARM LIST FOR EXIT 225 ROUTINE              *\n*                                                               *\n*****************************************************************\n         SPACE 1\n         MVI   QBITS,QCNV+QXEQ+QOUT+QPPU+QXMT+QPUR ALL QUEUES\n         MVI   QBITS+1,QACT+QDEV ACTIVE AND DEVICE ACTIVITY\n         MVI   QMISC,SYSALL        ALL SYSTEMS\n         MVI   QFILT1,0            NO SPECIAL FILTERING\n         MVI   QFILT2,0            NO SPECIAL FILTERING\n         MVI   QCLASS,0            ZERO THE XEQ/CNV CLASS\n         XC    OWNERID,OWNERID     NO OWNERID SELECTION\n*\n         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R10,R1              SAVE BUFFER ADDRESS\n         MVC   LOWJOB,=H'1'        SET LOW JOB NUMBER\n         MVC   HIGHJOB,=H'9999'    SET HIGH JOB NUMBER\n         L     R1,0(R5)            GET ADDRESS OF FIRST OPERAND\n         CLI   1(R1),C' '          IS THERE A BLANK AFTER UL\n         BNE   BADOPRND            NO. TELL USER\n         BXH   R5,R6,TSTUCM        CHECK FOR ANY MORE OPERANDS\n         B     BADOPRND            TELL USER\n         SPACE 1\n*****************************************************************\n*                                                               *\n*        CHECK FOR AUTOMATIC REDIRECTION OF RESPONSES           *\n*                                                               *\n*****************************************************************\n         SPACE 1\nTSTUCM   TM    COMFLAG,CMBFLAGU    IS THIS A UCM\n         BZ    MSGGOOD             NO, SKIP REDIRECTION\n         TM    FBLFLG,FBLFLGC+FBLFLGR CONSOLE SET OR REMOTE SYSTEM\n         BNZ   MSGRPT              SKIP AUTOMATIC L=CCA\n         LA    R1,4                LOAD REDIRECT OFFSET FOR $UL\n*                                  SAME AS FOR $DJ\n         BCTR  R1,0                REDUCE BY 1\n         SLL   R1,1                DOUBLE\n         SLR   R2,R2               ZERO REGISTER FOR IC\n         IC    R2,COMUCM           PICK UP CURRENT UCM ID\n         L     R14,$COMEXTN        POINT TO CONSOLE WORK AREA\n         USING CWA,R14             SET ADDRESSABILITY TO CWA\n         CH    R2,CWAOCON          SEE IF EXCEEDS MAXIMUM\n         BH    MSGRPT              YES, ERROR, NO AUTOMATIC REDIRECTION\n         MH    R2,CWALCON          MULTIPLY BY LENGTH OF EACH ENTRY\n         AR    R1,R2               COMBINE OFFSETS\n         LA    R1,CWARESP-CWACONL(R1) POINT TO CORRECT CWA ENTRY\n         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID\n         TM    FBLFLG,FBLFLGA      HAS AREA BEEN SET\n         BO    MSGRPT              YES, SKIP AUTOMATIC REDIRECTION\n         MVC   COMUCMA,CWACONA(R1) SET NEW AREA\n         DROP  R14                 DROP ADDRESSABILITY TO CWA\nMSGRPT   BAL   R9,MSGVCCA          VERIFY CCA (NO RETURN IF BAD)\n         CLI   COMUCMA,0           TEST FOR DISPLAY AREA\n         BZ    MSGGOOD             IF NOT, SKIP\n         MVI   COMLINET,X'80'      SET CONTROL LINE\n         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND\n         MVI   COMLINET,X'20'      SET DATA LINE\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        SCAN THE JOB QUEUE FOR THE JOB LIST                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nMSGGOOD  DS    0H\n         OI    MISCSW1,JOB         TURN ON JOB DEFAULT TYPE\n         SPACE 1\nJQESCAN  LH    R1,LOWJOB           LOAD JOB NUMBER\n         $QLOC (R1)                GET JQE FOR THIS JOB NUMBER\n         BZ    NEXTJQE             GET NEXT JQE IF NOT FOUND\n         LR    R9,R1               SAVE JQE ADDRESS\n         USING JQE,R9              SET ADDRESSABILITY TO JQE\n         TM    JQEXFLG2,JQEXUHLD   SEE IF JOB IS ON USER HOLD\n         BO    JQEFND              FOUND ONE. GO PROCESS\nNEXTJQE  LH    R1,LOWJOB           LOAD PREVIOUS JOB NUMBER\n         LA    R1,1(R1)            ADD 1 TO JOB NUMBER\n         STH   R1,LOWJOB           SAVE NEW JOB NUMBER\n         CH    R1,HIGHJOB          SEE IF END OF RANGE\n         BNH   JQESCAN             NO, LOOP\n         TM    MISCSW1,FOUND       SEE IF ANY JOBS FOUND\n         BO    EXIT8               YES. LEAVE AND SMILE\n         MVC   COMMAND(L'MSG2),MSG2 SET NO JOBS FOUND MESSAGE\n         LA    R0,L'MSG2           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=900    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\nJQEFND   OI    MISCSW1,FOUND       TURN ON JOB FOUND INDICATOR\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CALL EXIT 255 TO FORMAT THE JOB INFORMATION                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         LA    R1,QBITS            POINT TO EXIT PARM LIST\nEXIT255  $EXIT 255,ENVIRON=JES2,MAXRC=8 CALL FORMAT ROUTINE\n         CH    R15,=H'8'           SEE IF CONSOLE BUFFER SHORTAGE\n         BE    EXIT8               YES, GET OUT\n         B     NEXTJQE             GO GET NEXT JOB\n         EJECT\n*****************************************************************\n*                                                               *\n*        SUBROUTINE TO VERIFY CONSOLE/AREA                      *\n*                                                               *\n*****************************************************************\n         SPACE 1\nMSGVCCA  TM    FBLFLG,FBLFLGR      SEE IF REMOTE SYSTEM UCM\n         BOR   R9                  YES, UCM AND AREA ARE OK\n         L     R2,$COMEXTN         POINT TO CONSOLE WORK AREA\n         USING CWA,R2              SET ADDRESSABILITY TO CWA\n         MVC   XASCID(1),COMUCM    SET UCM ID\n         MVC   XASDID(1),COMUCMA   SET AREA ID\n         CLI   XASDID,0            SEE IF AREA ID SPECIFIED\n         BNZ   MSGSSAOP            YES, BRANCH\n         MVI   XASDID,C'Z'         NO,  FORCE AREA Z\nMSGSSAOP MVC   XAU(1),COMUCM       TELL OS SOURCE IS SAME AS OUTPUT\n         MVI   XAN,X'22'           SET ID FOR VERIFIER\n         MODESET EXTKEY=ZERO       GET KEY 0\n         L     R15,CWA7603D        POINT TO OS VERIFICATION ROUTINE\n         $AMODE 24,PUSHR=0,R=R14   GO TO AMODE 24\n         BALR  R14,R15             ENTER IT\n         $AMODE POPR=0,R=R14       RETURN TO ORIGINAL AMODE\n         MODESET EXTKEY=HASP       RETURN TO KEY 1\n         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR\n         BNHR  R9                  NO, RETURN TO CALLER\n         SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,B'0011',COMUCM   PICK UP UCM AND AREA ID\n         MVI   COMUCMA,0           FORCE NO DISPLAY AREA\n         CH    R15,=H'12'          SEE IF CONSOLE DOWN\n         BNE   *+16                NO, DO NOT SET LOGICAL CONSOLE\n         MVC   COMFLAG(4),MOWTOL   DESTROY APPARENT SOURCE INFO\n         MVC   COMOUT,MOWTOL+(COMOUT-COMFLAG) OMITTING CNTL FIELD\n         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND\n         MVC   COMMAND(MBVINVL),MBVINV SET ERROR MESSAGE TEXT\n         STC   R3,MBVINVA          SET AREA\n         SRL   R3,8                ALIGN CONSOLE ID\n         CVD   R3,$DOUBLE          CONVERT TO PACKED\n         MVC   DBL(4),=X'F0212020' SET EDIT MASK\n         ED    DBL(4),$DOUBLE+6    EDIT CONSOLE ID TO AREA\n         MVC   MBVINVC,DBL+2       MOVE CONSOLE ID TO MESSAGE\n         MVC   COMMAND+MBVINVL(8),COMACEID MOVE IDENTIFIER\n         $CWTO L=MBVINVL,MSGID=999 WRITE ERROR MESSAGE TO CONSOLE\n         B     EXIT8               GET OUT\n         DROP  R2                  DROP ADDRESSABILITY TO CWA\n         EJECT\n*****************************************************************\n*                                                               *\n*       R E D I R E C T   R O U T I N E   C O N S T A N T S     *\n*                                                               *\n*****************************************************************\n         SPACE 1\nMOWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX\nMBVINV   DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '\nMBVINVL  EQU   *-MBVINV\nMBVINVC  EQU   COMMAND+MBVINVL-16,2\nMBVINVA  EQU   MBVINVC+2,1\nFBLFLG   EQU   COMEWORK+2          FLAG BYTE\nCOMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER\nFBLFLGR  EQU   1                   UCM COMMAND FROM REMOTE SYSTEM\nFBLFLGC  EQU   2                   CONSOLE HAS BEEN SPECIFIED\nFBLFLGA  EQU   4                   AREA HAS BEEN SPECIFIED\n         EJECT\n***********************************************************************\n*        CONSTANTS FOR $UL                                            *\n***********************************************************************\n         SPACE 3\nBLANKS   DC    CL20' '             STRING OF 20 BLANKS\n         SPACE 3\nMSG1     DC    C'MORE THAN 50 JOBS OR RANGES SPECIFIED'\nMSG2     DC    C'NO JOBS FOUND ON USER HOLD'\nMSG3     DC    C' INVALID OPERAND'\nMSG4     DC    C' LIST INCOMPLETE'\n         SPACE 3\nDEVNTBL  DS    0F                  DEVICE NAME TABLE\n         DC    AL1(5),CL7'INTRDR'\n         DC    AL1(5),CL7'READER'\n         DC    AL1(5),CL7'PRINTR'\n         DC    AL1(4),CL7'PUNCH'\n         DC    AL1(1),CL7'JT'\n         DC    AL1(1),CL7'JR'\n         DC    AL1(1),CL7'ST'\n         DC    AL1(1),CL7'SR'\n         DC    AL1(2),CL7'RMT'\n         DC    AL1(2),CL7'RDR'\n         DC    AL1(2),CL7'PRT'\n         DC    AL1(2),CL7'PUN'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INVALID $QJ OPERAND                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nBADOPRND L     R1,0(0,R5)          POINT TO INVALID OPERAND\n         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG\n         MVC   COMMAND+9(L'MSG3),MSG3 SET ERROR MESSAGE\n         LA    R0,L'MSG3+9         SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nEXIT0    LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nEXIT8    $FREEBUF (R8)             FREE THE WORK AREA\n         $FREEBUF (R10)            FREE THE WORK AREA\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "J005FILT": {"ttr": 12548, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 COMMAND FILTER EXIT'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED TO SCAN ALL COMMANDS      *\n*        TO JES2 TO PREVENT SEVERAL COMMANDS OR CERTAIN OPERANDS.     *\n*        THE USE OF JOB RANGES EITHER PRODUCES AN EXCESSIVE NUMBER    *\n*        OF CONSOLE MESSAGES OR PERFORMS AN UNINTENTIONAL OPERATION   *\n*        ON TOO MANY JOBS.  AN EXAMPLE OF THIS IS THE USE OF          *\n*        $CJ1-9999 WHEN THE OPERATOR INTENDED TO ENTER $DJ1-9999.     *\n*        THE RESTRICTION OF THE USE OF THE RANGE OPERAND CAUSES       *\n*        LESS PROBLEMS THAN THE ACCIDENTAL MISUSE OF THE COMMAND.     *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J 0 0 5 F I L T          *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $COMWORK     SYS1.HASPSRC                               *\n*        04)  $ENTRY       SYS1.HASPSRC                               *\n*        05)  $HASPEQU     SYS1.HASPSRC                               *\n*        06)  $HASPGBL     SYS1.HASPSRC                               *\n*        07)  $HCT         SYS1.HASPSRC                               *\n*        08)  $JCT         SYS1.HASPSRC                               *\n*        09)  $JOE         SYS1.HASPSRC                               *\n*        10)  $JQE         SYS1.HASPSRC                               *\n*        11)  $MIT         SYS1.HASPSRC                               *\n*        12)  $MODEND      SYS1.HASPSRC                               *\n*        13)  $MODULE      SYS1.HASPSRC                               *\n*        14)  $PADDR       SYS1.HASPSRC                               *\n*        15)  $PCE         SYS1.HASPSRC                               *\n*        16)  $RETURN      SYS1.HASPSRC                               *\n*        17)  $SAVE        SYS1.HASPSRC                               *\n*        18)  $STORE       SYS1.HASPSRC                               *\n*        19)  IAZRESPA     SYS1.AMODGEN                               *\n*        20)  IFGRPL       SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       1K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ005FILT $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 COMMAND FILTER EXIT',                       X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               RESPA,              GENERATE MVS  RESPA DSECT           X\n               RPL                 GENERATE MVS  IFGRPL DSECT\n         TITLE 'JES2 COMMAND FILTER EXIT'\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE005FILT $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       - ADDRESS OF THE CURRENT OPERAND                    *\n*        R6       - INCREMENT VALUE OF 4                              *\n*        R7       - ADDRESS OF THE LAST OPERAND                       *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        COMPARE THE FIRST 2 CHARACTERS IN THE COMMAND FOR AN         *\n*        ENTRY IN THE VALIDATION TABLE.                               *\n*                                                                     *\n***********************************************************************\n         LA    R2,COMTABLE         LOAD ADDRESS OF THE COMMAND TABLE\nCOMLOOP  CLI   0(R2),X'FF'         END OF TABLE?\n         BE    EXIT0               YES, BRANCH TO COMMAND OK EXIT\n         CLC   0(2,R2),COMVERB     COMPARE TABLE TO ENTRY COMMAND\n         BE    CKACTION            YES, GO CHECK FOR ACTION TO TAKE\n         LA    R2,4(,R2)           INCREMENT TO NEXT TABLE ENTRY\n         B     COMLOOP             LOOP UNTIL DONE\n***********************************************************************\n*                                                                     *\n*        BRANCH TO THE INDICATED ROUTINE FOR THE COMMAND USING        *\n*        THE OFFSET IN THE COMMAND ENTRY IN A BRANCH TABLE.           *\n*                                                                     *\n***********************************************************************\nCKACTION LH    R15,2(R2)           LOAD OFFSET FROM COMMAND TABLE ENTRY\n         B     BTABLE(R15)         BRANCH TO ROUTINE\nBTABLE   B     EXIT0               00 - NOT USED\n         B     EXIT0               04 - $AJ\n         B     ROUT$CJ             08 - $CJ\n         B     EXIT0               12 - $DJ   *** NULLIFIED ***\n         B     ROUT$EJ             16 - $EJ\n         B     EXIT0               20 - $HJ   *** NULLIFIED ***\n         B     EXIT0               24 - $LJ   *** NULLIFIED ***\n         B     EXIT0               28 - $OJ   *** NULLIFIED ***\n         B     ROUT$PJ             32 - $PJ\n         B     EXIT0               36 - $TJ   *** NULLIFIED ***\n         B     ERROR1              40 - $TC\n         B     ERROR1              44 - $TM\n         B     ROUT$PQ             48 - $PQ   *** NULLIFIED ***\n         B     EXIT0               52 - $QJ   *** NULLIFIED ***\n         B     EXIT0               56 - $UH   *** NULLIFIED ***\n         B     EXIT0               60 - $UA   *** NULLIFIED ***\n         B     EXIT0               64 - NOT USED\n         B     EXIT0               68 - NOT USED\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $AJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$AJ  LA    R1,COMVERB+1        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         LTR   R15,15              TEST RETURN CODE\n         BNZ   ERROR2              NOT ZERO, RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $CJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$CJ  LA    R1,COMVERB+1        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         LTR   R15,15              TEST RETURN CODE\n         BNZ   ERROR2              NOT ZERO, RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $DJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$DJ  LA    R1,COMVERB+1        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         LTR   R15,15              TEST RETURN CODE\n         BNZ   ERROR2              NOT ZERO, RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $EJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$EJ  LA    R1,COMVERB+1        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         LTR   R15,15              TEST RETURN CODE\n         BNZ   ERROR2              NOT ZERO, RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $HJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$HJ  LA    R1,COMVERB+1        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         LTR   R15,15              TEST RETURN CODE\n         BNZ   ERROR2              NOT ZERO, RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $LJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$LJ  LA    R1,COMVERB+1        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         LTR   R15,15              TEST RETURN CODE\n         BNZ   ERROR2              NOT ZERO, RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $OJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$OJ  LA    R1,COMVERB+1        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         LTR   R15,15              TEST RETURN CODE\n         BNZ   ERROR2              NOT ZERO, RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $PJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$PJ  LA    R1,COMVERB+1        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         LTR   R15,15              TEST RETURN CODE\n         BNZ   ERROR2              NOT ZERO, RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $TJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$TJ  LA    R1,COMVERB+1        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         LTR   R15,15              TEST RETURN CODE\n         BNZ   ERROR2              NOT ZERO, RANGE, ERROR\nROUT$TJ1 BXH   R5,R6,ROUT$TJ2      GET NEXT OPERAND\n         L     R15,0(R5)           LOAD ADDRESS OF PARAMETER\n         CLC   0(2,R15),C#CEQ      SEE IF CHANGING JOB CLASS\n         BE    ERROR3              YES, ERROR\n         B     ROUT$TJ1            LOOP FOR NEXT OPERAND\nROUT$TJ2 B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $PQ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$PQ  BXH   R5,R6,ROUT$PQ1      GET NEXT OPERAND\n         L     R15,0(R5)           LOAD ADDRESS OF PARAMETER\n         CLC   0(3,R15),C#ALL      SEE IF USING THE ALL OPERAND\n         BE    ERROR4              YES, ERROR\n         B     ROUT$PQ             LOOP FOR NEXT OPERAND\nROUT$PQ1 B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $QJ COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$QJ  LA    R1,COMVERB+1        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         LTR   R15,15              TEST RETURN CODE\n         BNZ   ERROR2              NOT ZERO, RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $UH COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$UH  LA    R1,COMVERB+2        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         LTR   R15,15              TEST RETURN CODE\n         BNZ   ERROR2              NOT ZERO, RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CHECK OPERANDS FOR THE $UA COMMAND                           *\n*                                                                     *\n***********************************************************************\nROUT$UA  LA    R1,COMVERB+2        POINT PAST COMMAND NAME\n         BAL   R4,CKRANGE          GO SEE OF JOB RANGE SELECTED\n         LTR   R15,15              TEST RETURN CODE\n         BNZ   ERROR2              NOT ZERO, RANGE, ERROR\n         B     EXIT0               END OF CHECKING, GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                  E R R O R     R O U T I N E S                      *\n*                                                                     *\n***********************************************************************\nERROR1   MVC   COMMAND(LMSG1),MSG1 MOVE MESSAGE TO PCE WORK AREA\n         LA    R0,LMSG1            SET MESSAGE LENGTH IN REG 0\n         B     EXIT16              GO EXIT ROUTINE\n         SPACE 3\nERROR2   MVC   COMMAND(LMSG2),MSG2 MOVE MESSAGE TO PCE WORK AREA\n         LA    R0,LMSG2            SET MESSAGE LENGTH IN REG 0\n         B     EXIT16              GO EXIT ROUTINE\n         SPACE 3\nERROR3   B     EXIT0               ***** BYPASS THIS ERROR *****\n         MVC   COMMAND(LMSG3),MSG3 MOVE MESSAGE TO PCE WORK AREA\n         LA    R0,LMSG3            SET MESSAGE LENGTH IN REG 0\n         B     EXIT16              GO EXIT ROUTINE\n         SPACE 3\nERROR4   MVC   COMMAND(LMSG4),MSG4 MOVE MESSAGE TO PCE WORK AREA\n         LA    R0,LMSG4            SET MESSAGE LENGTH IN REG 0\n         B     EXIT16              GO EXIT ROUTINE\n         SPACE 3\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\nEXIT0    LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nEXIT16   $STORE R0                 SAVE MESSAGE LENGTH\n         LA    R15,16              SET RETURN CODE TO 16\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n***********************************************************************\n*                                                                     *\n*                         C K R A N G E                               *\n*                                                                     *\n*        THIS ROUTINE EXAMINES THE OPRANDS POINTED TO BY REG 1        *\n*        ON ENTRY FOR A JOB/STC/TSU RANGE.  NOTE THAT IN MOST         *\n*        CASES, INDIVIDUAL JOB REQUESTS CAN BE MIXED WITH JOB         *\n*        RANGES SO ALL OPERANDS MUST BE SCANNED UNTIL THE END         *\n*        OF OPERANDS OR KEYWORDS ARE ENTERED.  AN EXAMPLE OF          *\n*        THIS IS $DJ101,265,672-677,S33.  THIS TECHNIQUE IS           *\n*        NOT USED OFTEN, BUT MUST BE DETECTED.                        *\n*                                                                     *\n*        IF A RANGE IS DETECTED, REGISTER 15 WILL CONTAIN AN 8,       *\n*        OTHERWISE, IT WILL CONTAIN A ZERO.                           *\n*                                                                     *\n*        RETURN WILL BE MADE TO REGISTER 4 .                          *\n*                                                                     *\n***********************************************************************\nCKRANGE  LR    R2,R1               SAVE START OF VALUE1\nCKRANGE1 CLI   0(R1),C'0'          SEE IF FIRST CHARACTER JOB NUMBER\n         BNL   CKRANGE3            YES, BRANCH\n         CLI   0(R1),C'J'          SEE IF JOB NUMBER\n         BE    CKRANGE2            YES, BRANCH\n         CLI   0(R1),C'S'          SEE IF STC NUMBER\n         BE    CKRANGE2            YES, BRANCH\n         CLI   0(R1),C'T'          SEE IF TSO NUMBER\n         BNE   CKRANGE5            NO, MUST BE A KEYWORD\nCKRANGE2 CLI   1(R1),C'0'          SEE IF NEXT CHARACTER NUMERIC\n         BL    CKRANGE5            NO, INVALID, OR A KEYWORD\n         CLI   1(R1),C'9'          SEE IF NEXT CHARACTER NUMERIC\n         BH    CKRANGE5            NO, INVALID, OR A KEYWORD\n         LA    R1,1(R1)            INCREMENT PAST JOB TYPE\n         LR    R2,R1               RESET START OF VALUE1\nCKRANGE3 CLI   0(R1),C','          SEE IF END OF \"JOB\" NUMBER\n         BE    CKRANGE4            YES, BRANCH\n         CLI   0(R1),C' '          SEE IF END OF \"JOB\" NUMBER\n         BE    CKRANGE5            YES, NO RANGE, SET RETURN CODE TO 0\n         CLI   0(R1),C'-'          SEE IF JOB RANGE DIVIDER\n         BE    CKRANGE6            YES, A RANGE, SET RETURN CODE TO 8\n         CLI   0(R1),C'0'          SEE IF NUMERIC\n         BL    CKRANGE5            NO, INVALID, OR KEYWORD\n         CLI   0(R1),C'9'          SEE IF NUMERIC\n         BH    CKRANGE5            NO, INVALID, OR KEYWORD\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHARACTER\n         B     CKRANGE3            LOOP\nCKRANGE4 LA    R1,1(,R1)           INCREMENT PAST ','\n         B     CKRANGE             GO CHECK NEXT NUMBER\nCKRANGE5 SLR   R15,R15             SET RETURN CODE TO ZERO\n         B     CKRANGE7            GO EXIT THIS ROUTINE\nCKRANGE6 LA    R15,8               SET RETURN CODE TO 8\nCKRANGE7 BR    R4                  RETURN TO CALLER\n         SPACE\nPACKIT   PACK  $DOUBLE,0(0,R2)     **** EXECUTE ONLY ****\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS USED BY THIS JES2 EXIT                             *\n*                                                                     *\n***********************************************************************\nC#CEQ    DC    CL2'C='             CHARACTER CONSTANT 'C='\nC#ALL    DC    CL3'ALL'            CHARACTER CONSTANT 'ALL'\nMSG1     DC    C'COMMAND NOT ALLOWED IN THIS INSTALLATION'\nLMSG1    EQU   *-MSG1\nMSG2     DC    C'JOB RANGE NOT ALLOWED FOR THIS COMMAND'\nLMSG2    EQU   *-MSG2\nMSG3     DC    C'JOB CLASS MAY NOT BE CHANGED'\nLMSG3    EQU   *-MSG3\nMSG4     DC    C'THE ''ALL'' OPERAND IS NOT ALLOWED FOR THIS COMMAND'\nLMSG4    EQU   *-MSG4\nCOMTABLE DC    CL2'AJ',AL2(4)      $AJ\n         DC    CL2'AS',AL2(4)      $AS\n         DC    CL2'AT',AL2(4)      $AT\n         DC    CL2'CJ',AL2(8)      $CJ\n         DC    CL2'CS',AL2(8)      $CS\n         DC    CL2'CT',AL2(8)      $CT\n         DC    CL2'DJ',AL2(12)     $DJ\n         DC    CL2'DS',AL2(12)     $DS\n         DC    CL2'DT',AL2(12)     $DT\n         DC    CL2'EJ',AL2(16)     $EJ\n         DC    CL2'ES',AL2(16)     $ES\n         DC    CL2'ET',AL2(16)     $ET\n         DC    CL2'HJ',AL2(20)     $HJ\n         DC    CL2'HS',AL2(20)     $HS\n         DC    CL2'HT',AL2(20)     $HT\n         DC    CL2'LJ',AL2(24)     $LJ\n         DC    CL2'LS',AL2(24)     $LS\n         DC    CL2'LT',AL2(24)     $LT\n         DC    CL2'OJ',AL2(28)     $OJ\n         DC    CL2'OS',AL2(28)     $OS\n         DC    CL2'OT',AL2(28)     $OT\n         DC    CL2'PJ',AL2(32)     $PJ\n         DC    CL2'PS',AL2(32)     $PS\n         DC    CL2'PT',AL2(32)     $PT\n         DC    CL2'TJ',AL2(36)     $TJ\n         DC    CL2'TS',AL2(36)     $TS\n         DC    CL2'TT',AL2(36)     $TT\n         DC    CL2'TC',AL2(40)     $TC\n         DC    CL2'TM',AL2(44)     $TM\n         DC    CL2'PQ',AL2(48)     $PQ\n         DC    CL2'QJ',AL2(52)     $QJ  USER COMMAND\n         DC    CL2'QS',AL2(52)     $QS  USER COMMAND\n         DC    CL2'QT',AL2(52)     $QT  USER COMMAND\n         DC    CL2'UH',AL2(56)     $UH  USER COMMAND\n         DC    CL2'UA',AL2(60)     $UA  USER COMMAND\n         DC    4X'FF'              END OF TABLE\n         EJECT\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "J005JIT": {"ttr": 12556, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 $TJIT COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED PROCESS THE $TJIT         *\n*        COMMAND WHEN ENTERED.  THIS COMMAND IS IMPLEMENTED AS        *\n*        AN EXIT5 EXIT TO JES2, AND AS SUCH MUST INTERCEPT ONLY       *\n*        $TJIT COMMAND WHEN ENCOUNTERED.                              *\n*                                                                     *\n*                                                                     *\n*        THE $TJIT COMMAND HAS THE FOLLOWING SYNTAX:                  *\n*                                                                     *\n*        $TJIT,                                                       *\n*              STOP      STOP JOB INFORMATION TASK PROCESSING         *\n*                        BY CLOSING AND FREEING THE VSAM FILE.        *\n*                                                                     *\n*              START     START JOB INFORMATION TASK PROCESSING        *\n*                        BY ALLOCATING AND REOPENING THE VSAM         *\n*                        FILE AND RESUMING NORMAL PROCESSING.         *\n*                                                                     *\n*              RESTART   STOP JOB INFORMATION TASK PROCESSING,        *\n*                        CLOSE AND FREE THE VSAM FILE, REALLOCATE     *\n*                        AND OPEN THE FILE AND RESUME NORMAL          *\n*                        PROCESSING,                                  *\n*                                                                     *\n*              STATUS    DISPLAY THE STATUS OF THE JOB INFORMATION    *\n*                        TASK.                                        *\n*                                                                     *\n*              DSN=DSN   MODIFY THE NAME OF THE VSAM FILE.  THIS      *\n*                        MODIFICATION WILL NOT TAKE EFFECT UNTIL      *\n*                        THE START OR RESTART OPTION IS REQUESTED.    *\n*                                                                     *\n*              LIST=KEY  LIST A RECORD FROM THE VSAM FILE WITH        *\n*                        THE SPECIFIED KEY.  IF IMBEDDED BLANKS       *\n*                        EXIST IN THE KEY, A '.' OR A '*' SHOULD      *\n*                        BE USED INSTEAD OF THE BLANK.                *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *\n*                                                                     *\n*        1)  THE HASP990 MESSAGE WILL BE ISSUED FOR EACH REQUEST      *\n*                                                                     *\n*        $HASP990 JIT START   PROCESSING SUCESSFULLY COMPLETED        *\n*        $HASP990 JIT STOP    PROCESSING SUCESSFULLY COMPLETED        *\n*        $HASP990 JIT RESTART PROCESSING SUCESSFULLY COMPLETED        *\n*        $HASP990 JIT LIST    PROCESSING SUCESSFULLY COMPLETED        *\n*        $HASP990 JIT DSNAME SUCESSFULLY MODIFIED                     *\n*                                                                     *\n*        2)  THE HASP990 MESSAGE WILL BE ISSUED FOR EACH STATUS       *\n*            REQUEST.                                                 *\n*                                                                     *\n*        $HASP990 JIT DSN=DSNAME                                      *\n*        $HASP990 JIT STOPPED/STARTED INIT ALLOC OPENED I/O           *\n*        $HASP990 JIT WAIT/ACTIVE QUEUE=NNN                           *\n*                                                                     *\n*        3)  THE HASP990 MESSAGE WILL BE ISSUED FOR EACH LIST         *\n*            REQUEST.                                                 *\n*                                                                     *\n*        $HASP990 JIT JOBNAME =JOBNAME                                *\n*        $HASP990 JIT GROUPID =OUTPUT GROUP NAME                      *\n*        $HASP990 JIT SEPID   =SEPARATOR ID                           *\n*        $HASP990 JIT DUEOUT  =DUE OUT TIME                           *\n*        $HASP990 JIT SYSCLASS=SYSOUT CLASS FOR STC                   *\n*        $HASP990 JIT PGMRNAME=PROGRAMMER NAME FOR STC/TSU            *\n*                                                                     *\n*        4)  THE HASP999 MESSAGE WILL BE ISSUED WHEN AN INVALID       *\n*            OPERAND KEYWORD OR VALUE IS DETECTED OR WHEN ONE         *\n*            OF THE POSITIONAL KEYWORDS ARE NOT FIRST IN THE LIST.    *\n*                                                                     *\n*        $HASP999 ......... INVALID OPERAND                           *\n*                                                                     *\n*        5)  THE HASP999 MESSAGE WILL BE ISSUED WHEN THE L=CCA        *\n*            OPERAND SPECIFIES AN INVALID CONSOLE OR DISPLAY          *\n*            AREA.                                                    *\n*                                                                     *\n*        $HASP999 RESPONSE LOCATION L=CCA UNAVAILABLE                 *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J 0 0 5 J I T            *\n*                                                                     *\n*        01)  $AMODE       SYS1.HASPSRC                               *\n*        02)  $BUFFER      SYS1.HASPSRC                               *\n*        03)  $CAT         SYS1.HASPSRC                               *\n*        04)  $CMB         SYS1.HASPSRC                               *\n*        05)  $CWA         SYS1.HASPSRC                               *\n*        06)  $COMWORK     SYS1.HASPSRC                               *\n*        07)  $CWTO        SYS1.HASPSRC                               *\n*        08)  $DTE         SYS1.HASPSRC                               *\n*        09)  $ENTRY       SYS1.HASPSRC                               *\n*        10)  $ERA         SYS1.HASPSRC                               *\n*        11)  $GETBUF      SYS1.HASPSRC                               *\n*        12)  $FCSDTE      SYS1.HASPSRC (USER)                        *\n*        13)  $FCSJITB     SYS1.HASPSRC (USER)                        *\n*        14)  $FCSUCT      SYS1.HASPSRC (USER)                        *\n*        15)  $FREEBUF     SYS1.HASPSRC                               *\n*        16)  $HASPEQU     SYS1.HASPSRC                               *\n*        17)  $HASPGBL     SYS1.HASPSRC                               *\n*        18)  $HCT         SYS1.HASPSRC                               *\n*        19)  $JCT         SYS1.HASPSRC                               *\n*        20)  $JOE         SYS1.HASPSRC                               *\n*        21)  $JOT         SYS1.HASPSRC                               *\n*        22)  $JQE         SYS1.HASPSRC                               *\n*        23)  $MIT         SYS1.HASPSRC                               *\n*        24)  $MODEND      SYS1.HASPSRC                               *\n*        25)  $MODULE      SYS1.HASPSRC                               *\n*        26)  $PADDR       SYS1.HASPSRC                               *\n*        27)  $PCE         SYS1.HASPSRC                               *\n*        28)  $RETURN      SYS1.HASPSRC                               *\n*        29)  $SAVE        SYS1.HASPSRC                               *\n*        30)  $STORE       SYS1.HASPSRC                               *\n*        31)  $XECB        SYS1.HASPSRC                               *\n*        32)  $WAIT        SYS1.HASPSRC                               *\n*        33)  IAZRESPA     SYS1.AMODGEN                               *\n*        34)  IFGRPL       SYS1.MACLIB                                *\n*        35)  MODESET      SYS1.MACLIB                                *\n*        36)  POST         SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       2K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ005JIT  $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 $TJIT COMMAND PROCESSOR',                   X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $CMB,               GENERATE HASP CMB DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $CWA,               GENERATE HASP CWA DSECT             X\n               $DTE,     DTE       GENERATE HASP DTE DSECT             X\n               $ERA,     DTE       GENERATE HASP ERA DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JOT,               GENERATE HASP JOT DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $XECB,    DTE       GENERATE HASP XECB DSECT            X\n               CVT,                GENERATE MVS  CVT DSECT             X\n               RESPA,              GENERATE MVS  RESPA  DSECT          X\n               RPL,                GENERATE MVS  IFGRPL DSECT          X\n               UCB                 GENERATE MVS  UCB DSECT\n               SPACE 3\n         EJECT\n***********************************************************************\n*                                                                     *\n*        USER ADDITION OF THE DTE                                     *\n*                                                                     *\n***********************************************************************\nDTE      DSECT\n         ORG  DTEWORK\n         DS   0CL2048              2048 BYTE EXTENSION\n         $FCSDTE ,                 MAP THE COMMON DTE EXTENSION AREA\nJ005JIT  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n         $FCSUCT ,                 MAP THE UCT DSECT\nJ005JIT  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n         $FCSJITB ,                MAP THE JITB DSECT\nJ005JIT  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREAS                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n$JITWORK DSECT                     COMMAND WORK AREA\n         DS    CL(BUFSTART-BFPDSECT) **** RESERVED BY JES2 ****\nJITBAREA DS    CL200               RESERVE 200 CHARACTERS FOR JITB\nOPNDCTR  DS    H                   COUNT OF COMMAND OPERANDS\nDSNAME   DS    CL44                REQUESTED NEW DSNAME\nDBL1     DS    D                   DOUBLE WORD WORK AREA\nWRKA     DS    CL10                EXIT WORK AREA\nJ005JIT  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         TITLE 'JES2 $TJIT COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE005JIT  $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       - ADDRESS OF THE CURRENT OPERAND                    *\n*        R6       - INCREMENT VALUE OF 4                              *\n*        R7       - ADDRESS OF THE LAST OPERAND                       *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SEE IF THIS IS A $TJIT COMMAND                               *\n*                                                                     *\n***********************************************************************\n         CLC   COMVERB(4),=C'TJIT' SEE IF THIS IS THE $TJIT COMMAND\n         BNE   EXIT0               NO, BRANCH TO COMMAND OK EXIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GET A JES2 BUFFER FOR REENTRANCY AND                         *\n*        CLEAR THE COMMAND WORK AREA                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R9,R1               SAVE WORK AREA ADDRESS\n         USING $JITWORK,R9         SET ADDRESSABILITY TO WORK AREA\n         LA    R14,$JITWORK+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS\n         LH    R15,$BUFSIZE        SET   'TO'   LENGTH\n         SLR   R0,R0               CLEAR 'FROM' ADDRESS\n         SLR   R1,R1               CLEAR 'FROM' LENGTH\n         MVCL  R14,R0              CLEAR THE BUFFER\n         CLI   COMVERB+4,C' '      SEE IF OTHER OPERANDS SPECIFIED\n         BE    INSUFF              NO, INSUFFICIENT OPERANDS\n         ICM   R10,15,$UCT         LOAD ADDRESS OF UCT\n         BZ    NOJIT               ZERO, NONE, ERROR\n         USING UCT,R10             SET ADDRESSABILITY TO UCT\n         LA    R8,JITBAREA         LOAD ADDRESS OF JITB AREA\n         USING JITB,R8             SET ADDRESSABILITY TO JITB\n         MVC   JITBID,=C'JITB'     SET THE JITBID FIELD\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXAMINE THE COMMAND OPERANDS                                 *\n*                                                                     *\n***********************************************************************\nCKOPND   BXH   R5,R6,CTJITOK       IF NO MORE GO PROCESS THEM\n         L     R3,0(,R5)           POINT TO OPERAND\n         LH    R15,OPNDCTR         LOAD OPERAND COUNTER\n         LA    R15,1(R15)          ADD 1 TO COUNTER\n         STH   R15,OPNDCTR         SAVE OPERAND COUNTER\n         CLC   0(4,R3),=C'DSN='    SEE IF 'DSN=' OPERAND\n         BE    OPDSN               YES, GO PROCESS IT\n         CLC   OPNDCTR,=H'1'       IS THIS THE FIRST OPERAND\n         BNE   BADOPRND            NO, INVALID OPERAND\n         CLC   0(5,R3),=C'START'   SEE IF 'START' OPTION\n         BE    OPSTART             YES, GO PROCESS IT\n         CLC   0(4,R3),=C'STOP'    SEE IF 'STOP' OPTION\n         BE    OPSTOP              YES, GO PROCESS IT\n         CLC   0(7,R3),=C'RESTART' SEE IF 'RESTART' OPTION\n         BE    OPREST              YES, GO PROCESS IT\n         CLC   0(6,R3),=C'STATUS'  SEE IF 'STATUS' OPTION\n         BE    OPSTAT              YES, GO PROCESS IT\n         CLC   0(5,R3),=C'LIST='   SEE IF 'LIST' OPTION\n         BE    OPLIST              YES, GO PROCESS IT\n         B     BADOPRND            NOT VALID, ERROR\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE START OPERAND                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPSTART  MVI   JITBFLG,JITBSTAR    TURN ON 'START' OPTION\n         CLI   5(R3),C' '          FIVE CHARACTER OPERAND\n         BE    CKOPND              YES, GO GET NEXT OPERAND\n         CLI   5(R3),C','          FIVE CHARACTER OPERAND\n         BNE   BADOPRND            NO, ERROR\n         B     CKOPND              GO GET NEXT OPERAND\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        PROCESS THE STOP OPERAND                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPSTOP   MVI   JITBFLG,JITBSTOP    TURN ON 'STOP' OPTION\n         CLI   4(R3),C' '          FOUR CHARACTER OPERAND\n         BE    CKOPND              YES, GO GET NEXT OPERAND\n         CLI   4(R3),C','          FOUR CHARACTER OPERAND\n         BNE   BADOPRND            NO, ERROR\n         B     CKOPND              GO GET NEXT OPERAND\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        PROCESS THE RESTART OPERAND                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPREST   MVI   JITBFLG,JITBREST    TURN ON 'RESTART' OPTION\n         CLI   7(R3),C' '          SEVEN CHARACTER OPERAND\n         BE    CKOPND              YES, GO GET NEXT OPERAND\n         CLI   7(R3),C','          SEVEN CHARACTER OPERAND\n         BNE   BADOPRND            NO, ERROR\n         B     CKOPND              GO GET NEXT OPERAND\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        PROCESS THE STATUS OPERAND                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPSTAT   MVI   JITBFLG,JITBDISP    TURN ON 'STATUS' OPTION\n         CLI   6(R3),C' '          SIX CHARACTER OPERAND\n         BE    CKOPND              YES, GO GET NEXT OPERAND\n         CLI   6(R3),C','          SIX CHARACTER OPERAND\n         BNE   BADOPRND            NO, ERROR\n         B     CKOPND              GO GET NEXT OPERAND\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        PROCESS THE LIST OPERAND                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPLIST   MVI   JITBKEY,C' '        BLANK ENTIRE\n         MVC   JITBKEY+1(15),JITBKEY   FILE KEY FIELD\n         MVI   JITBFLG,JITBREAD    TURN ON OPTION BIT\n         LA    R15,8               SET LOOP COUNTER\nOPLIST1  CLI   0(R3),C'='          FIND END OF KEYWORD\n         BE    OPLIST2             YES, BRANCH\n         LA    R3,1(R3)            INCREMENT TO NEXT CHAR\n         BCT   R15,OPLIST1         LOOP\n         B     BADOPRND            NO '=' ERROR\nOPLIST2  LA    R3,1(R3)            INCREMENT PAST '='\n         LR    R4,R3               SAVE START OF VALUE ADDRESS\n         LA    R15,17              SET LOOP COUNTER\nOPLIST3  CLI   0(R4),C','          PROPER END OF VALUE\n         BE    OPLIST4             YES, BRANCH\n         CLI   0(R4),C' '          PROPER END OF VALUE\n         BE    OPLIST4             YES, BRANCH\n         LA    R4,1(R4)            INCREMENT TO NEXT CHAR\n         BCT   R15,OPLIST3         LOOP\n         B     BADOPRND            OPERAND TOO LONG\nOPLIST4  LR    R15,R4              SAVE END ADDRESS\n         SR    R15,R3              CALCULATE LENGTH\n         LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MVKEY           SAVE KEY\n***********************************************************************\n*        TRANSLATE PLACEHOLDER CHARACTERS IN KEY TO BLANKS            *\n***********************************************************************\n         LA    R15,16              SET LOOP COUNTER\n         LA    R14,JITBKEY         POINT TO JITB KEY\nOPLIST5  CLI   0(R14),C'*'         SEE IF PLACEHOLDER\n         BE    OPLIST6             YES, BRANCH\n         CLI   0(R14),C'.'         SEE IF PLACEHOLDER\n         BNE   OPLIST7             NO,  BRANCH\nOPLIST6  MVI   0(R14),C' '         MAKE IT A BLANK\nOPLIST7  LA    R14,1(R14)          INCREMENT TO NEXT CHAR\n         BCT   R15,OPLIST5         LOOP\n         B     CKOPND              GO GET NEXT OPERAND\nMVKEY    MVC   JITBKEY(0),0(R3)    **** EXECUTE ONLY ****\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        PROCESS THE DSN OPERAND                                      *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPDSN    MVI   DSNAME,C' '         BLANK ENTIRE\n         MVC   DSNAME+1(43),DSNAME     DSNAME FIELD\n         LA    R15,8               SET LOOP COUNTER\nOPDSN1   CLI   0(R3),C'='          FIND END OF KEYWORD\n         BE    OPDSN2              YES, BRANCH\n         LA    R3,1(R3)            INCREMENT TO NEXT CHAR\n         BCT   R15,OPDSN1          LOOP\n         B     BADOPRND            NO '=' ERROR\nOPDSN2   LA    R3,1(R3)            INCREMENT PAST '='\n         LR    R4,R3               SAVE START OF VALUE ADDRESS\n         LA    R15,45              SET LOOP COUNTER\nOPDSN3   CLI   0(R4),C','          PROPER END OF VALUE\n         BE    OPDSN4              YES, BRANCH\n         CLI   0(R4),C' '          PROPER END OF VALUE\n         BE    OPDSN4              YES, BRANCH\n         LA    R4,1(R4)            INCREMENT TO NEXT CHAR\n         BCT   R15,OPDSN3          LOOP\n         B     BADOPRND            OPERAND TOO LONG\nOPDSN4   LR    R15,R4              SAVE END ADDRESS\n         SR    R15,R3              CALCULATE LENGTH\n         LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MVDSN           SAVE DSNAME\n         B     CKOPND              GO GET NEXT OPERAND\nMVDSN    MVC   DSNAME(0),0(R3)     **** EXECUTE ONLY ****\n         EJECT\n*****************************************************************\n*                                                               *\n*        CHECK FOR REDIRECTION OF RESPONSES                     *\n*                                                               *\n*****************************************************************\n         SPACE 1\nCTJITOK  TM    COMFLAG,CMBFLAGU    IS THIS A UCM\n         BZ    PROCESS             NO, SKIP REDIRECTION\nREDIR    TM    FBLFLG,FBLFLGC+FBLFLGR CONSOLE SET OR REMOTE SYSTEM\n         BNZ   REDIR1              SKIP AUTOMATIC L=CCA\n         LA    R1,2                LOAD REDIRECT OFFSET FOR $TJIT\n*                                  SAME AS FOR $DF\n         BCTR  R1,0                REDUCE BY 1\n         SLL   R1,1                DOUBLE\n         SLR   R2,R2               ZERO REGISTER FOR IC\n         IC    R2,COMUCM           PICK UP CURRENT UCM ID\n         L     R14,$COMEXTN        POINT TO CONSOLE WORK AREA\n         USING CWA,R14             SET ADDRESSABILITY TO CWA\n         CH    R2,CWAOCON          SEE IF EXCEEDS MAXIMUM\n         BH    REDIR1              YES, ERROR, NO AUTOMATIC REDIRECTION\n         MH    R2,CWALCON          MULTIPLY BY LENGTH OF EACH ENTRY\n         AR    R1,R2               COMBINE OFFSETS\n         LA    R1,CWARESP-CWACONL(R1) POINT TO CORRECT CWA ENTRY\n         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID\n         TM    FBLFLG,FBLFLGA      HAS AREA BEEN SET\n         BO    REDIR1              YES, SKIP AUTOMATIC REDIRECTION\n         MVC   COMUCMA,CWACONA(R1) SET NEW AREA\n         DROP  R14                 DROP ADDRESSABILITY TO CWA\n         EJECT\n*****************************************************************\n*                                                               *\n*        ROUTINE TO VERIFY CONSOLE/AREA                         *\n*                                                               *\n*****************************************************************\n         SPACE 1\nREDIR1   TM    FBLFLG,FBLFLGR      SEE IF REMOTE SYSTEM UCM\n         BO    REDIR3              YES, UCM AND AREA ARE OK\n         L     R2,$COMEXTN         POINT TO CONSOLE WORK AREA\n         USING CWA,R2              SET ADDRESSABILITY TO CWA\n         MVC   XASCID(1),COMUCM    SET UCM ID\n         MVC   XASDID(1),COMUCMA   SET AREA ID\n         CLI   XASDID,0            SEE IF AREA ID SPECIFIED\n         BNZ   REDIR2              YES, BRANCH\n         MVI   XASDID,C'Z'         NO,  FORCE AREA Z\nREDIR2   MVC   XAU(1),COMUCM       TELL OS SOURCE IS SAME AS OUTPUT\n         MVI   XAN,X'22'           SET ID FOR VERIFIER\n         MODESET EXTKEY=ZERO       GET KEY 0\n         L     R15,CWA7603D        POINT TO OS VERIFICATION ROUTINE\n         $AMODE 24,PUSHR=0,R=R14   GO TO AMODE 24\n         BALR  R14,R15             ENTER IT\n         $AMODE POPR=0,R=R14       RETURN TO ORIGINAL AMODE\n         MODESET EXTKEY=HASP       RETURN TO KEY 1\n         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR\n         BNH   REDIR3              NO, GO ISSUE ERROR MESSAGE\n         SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,B'0011',COMUCM   PICK UP UCM AND AREA ID\n         MVI   COMUCMA,0           FORCE NO DISPLAY AREA\n         CH    R15,=H'12'          SEE IF CONSOLE DOWN\n         BNE   *+16                NO, DO NOT SET LOGICAL CONSOLE\n         MVC   COMFLAG(4),MOWTOL   DESTROY APPARENT SOURCE INFO\n         MVC   COMOUT,MOWTOL+(COMOUT-COMFLAG) OMITTING CNTL FIELD\n         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND\n         MVC   COMMAND(MBVINVL),MBVINV SET ERROR MESSAGE TEXT\n         STC   R3,MBVINVA          SET AREA\n         SRL   R3,8                ALIGN CONSOLE ID\n         CVD   R3,$DOUBLE          CONVERT TO PACKED\n         MVC   WRKA(4),=X'F0212020' SET EDIT MASK\n         ED    WRKA(4),$DOUBLE+6   EDIT CONSOLE ID TO AREA\n         MVC   MBVINVC,WRKA+2      MOVE CONSOLE ID TO MESSAGE\n         MVC   COMMAND+MBVINVL(8),COMACEID MOVE IDENTIFIER\n         $CWTO L=MBVINVL,MSGID=999 WRITE ERROR MESSAGE TO CONSOLE\n         B     EXIT8               GET OUT\n         DROP  R2                  DROP ADDRESSABILITY TO CWA\nREDIR3   CLI   COMUCMA,0           TEST FOR DISPLAY AREA\n         BE    PROCESS             IF NOT, SKIP\n         MVI   COMLINET,X'80'      SET CONTROL LINE\n         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND\n         MVI   COMLINET,X'20'      SET DATA LINE\n         B     PROCESS             CONTINUE\n         EJECT\n*****************************************************************\n*                                                               *\n*       R E D I R E C T   R O U T I N E   C O N S T A N T S     *\n*                                                               *\n*****************************************************************\n         SPACE 1\nMOWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX\nMBVINV   DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '\nMBVINVL  EQU   *-MBVINV\nMBVINVC  EQU   COMMAND+MBVINVL-16,2\nMBVINVA  EQU   MBVINVC+2,1\nFBLFLG   EQU   COMEWORK+2          FLAG BYTE\nCOMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER\nFBLFLGR  EQU   1                   UCM COMMAND FROM REMOTE SYSTEM\nFBLFLGC  EQU   2                   CONSOLE HAS BEEN SPECIFIED\nFBLFLGA  EQU   4                   AREA HAS BEEN SPECIFIED\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE REQUESTED OPERANDS                               *\n*                                                                     *\n***********************************************************************\nPROCESS  DS    0H\nCK1      CLI   DSNAME,C' '         SEE IF DSNAME REQUEST\n         BNH   CK2                 NO, BRANCH\n         MVC   UCTJITDS,DSNAME     RESET THE DSNAME IN THE UCT\n         MVC   COMMAND(L'MSG3),MSG3 SET MESSAGE TEXT\n         LA    R0,L'MSG3           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE MESSAGE\nCK2      TM    JITBFLG,JITBDISP    SEE IF DISPLAY STATUS OPTION\n         BO    STATUS              YES, BRANCH\nCK3      CLI   JITBFLG,0           SEE IF ANY OTHER OPTIONS SET\n         BE    EXIT8               NO, GET OUT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        CHAIN THE JITB FOR THE JIT SUBTASK                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         ICM   R4,B'1111',UCTJITDT LOAD JIT DTE ADDRESS\n         BZ    NOJIT               NONE, BRANCH\n         USING DTE,R4              SET ADDRESSABILITY TO DTE\n         XC    JITBXECB(L'XECBECB),JITBXECB CLEAR THE XECB\n         L     R1,DTEFQUE          LOAD THE WORK QUEUE ADDRESS\nCSLOOP   ST    R1,JITBCH           PUSH HEAD QUEUE DOWN\n         CS    R1,R8,DTEFQUE       ADD TO WORK QUEUE\n         BNE   CSLOOP              CHANGED, TRY AGAIN\n         POST  DTEWECB             POST SUBTASK\n         $WAIT OPER,XECB=JITBXECB,INHIBIT=YES\n         DROP  R4                  DROP ADDRESSABILITY TO DTE\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        DISPLAY THE RESULTS OF THE CALL TO THE JIT SUBTASK           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nRESULTS1 MVI   COMMAND,C' '        BLANK ENTIRE\n         MVC   COMMAND+1(99),COMMAND     COMMAND AREA\n         MVC   COMMAND(3),=C'JIT'  SET MESSAGE PREFIX\n         MVC   COMMAND+12(10),=C'PROCESSING' SET MESSAGE TEXT\n         MVC   COMMAND+23(6),=C'FAILED'  ASSUME THAT IT FAILED\n         TM    JITBSTAT,JITBOK     SEE IF ACTUALLY SUCCESSFUL\n         BNO   RESULTS2            NO, CONTINUE\n         MVC   COMMAND+23(22),=C'SUCCESSFULLY COMPLETED'\nRESULTS2 MVC   COMMAND+4(4),=C'LIST' ASSUME LIST REQUEST\n         TM    JITBFLG,JITBREAD    SEE IF LIST REQUEST\n         BO    RESULTS3            YES, BRANCH\n         MVC   COMMAND+4(4),=C'STOP' ASSUME STOP REQUEST\n         TM    JITBFLG,JITBSTOP    SEE IF STOP REQUEST\n         BO    RESULTS3            YES, BRANCH\n         MVC   COMMAND+4(5),=C'START' ASSUME START REQUEST\n         TM    JITBFLG,JITBSTAR    SEE IF START REQUEST\n         BO    RESULTS3            YES, BRANCH\n         MVC   COMMAND+4(7),=C'RESTART' ASSUME RESTART REQUEST\n         TM    JITBFLG,JITBREST    SEE IF RESTART REQUEST\n         BO    RESULTS3            YES, BRANCH\n         MVC   COMMAND+4(7),=C'UNKNOWN' UNKNOWN REQUEST\nRESULTS3 LA    R0,50               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         TM    JITBFLG,JITBREAD    SEE IF LIST REQUEST\n         BNO   EXIT8               NO, DONE\nRESULTS4 MVC   COMMAND(4),=C'JIT ' SET LINE TITLE\n         MVC   COMMAND+4(36),BLANKS BLANK DISPLAY LINE\n         MVC   COMMAND+4(9),=C'JOBNAME =' SET FIELD TITLE\n         MVC   COMMAND+13(08),JITBJOBN SET FIELD\n         MVC   COMMAND+23(9),=C'GROUPID =' SET FIELD TITLE\n         MVC   COMMAND+32(08),JITBGRP  SET FIELD\n         LA    R0,40               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         MVC   COMMAND+4(9),=C'PDIST   =' SET FIELD TITLE\n         MVC   COMMAND+13(08),JITBPSID SET FIELD\n         MVC   COMMAND+23(9),=C'SDIST   =' SET FIELD TITLE\n         MVC   COMMAND+32(08),JITBSSID SET FIELD\n         LA    R0,40               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         MVC   COMMAND+4(9),=C'DUEOUT  =' SET FIELD TITLE\n         MVC   COMMAND+13(08),BLANKS BLANK FIELD\n         MVC   COMMAND+13(04),JITBDUEO SET FIELD\n         MVC   COMMAND+23(9),=C'SYSCLASS=' SET FIELD TITLE\n         MVC   COMMAND+32(08),BLANKS BLANK FIELD\n         MVC   COMMAND+32(01),JITBCLAS SET FIELD\n         LA    R0,33               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         MVC   COMMAND+4(9),=C'DESCR   =' SET FIELD TITLE\n         MVC   COMMAND+13(08),JITBDESC SET FIELD\n         MVC   COMMAND+23(9),=C'UCC7FLG =' SET FIELD TITLE\n         MVC   COMMAND+32(01),JITBU7FL SET FIELD\n         LA    R0,33               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         MVC   COMMAND+4(9),=C'NAME    =' SET MESSAGE PREFIX\n         MVC   COMMAND+13(20),JITBPGMR SET MESSAGE KEY\n         LA    R0,33               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         MVC   COMMAND+4(9),=C'PHONE   =' SET MESSAGE PREFIX\n         MVC   COMMAND+13(15),JITBPHON SET MESSAGE KEY\n         LA    R0,28               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         MVC   COMMAND+4(9),=C'LOCATION=' SET MESSAGE PREFIX\n         MVC   COMMAND+13(15),JITBLOC  SET MESSAGE KEY\n         LA    R0,28               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         MVC   COMMAND+4(9),=C'DEPT    =' SET MESSAGE PREFIX\n         MVC   COMMAND+13(20),JITBDEPT SET MESSAGE KEY\n         LA    R0,33               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         MVC   COMMAND+4(9),=C'MAILCODE=' SET MESSAGE PREFIX\n         MVC   COMMAND+13(10),JITBMAIL SET MESSAGE KEY\n         LA    R0,23               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         MVC   COMMAND+4(9),=C'INST 1  =' SET MESSAGE PREFIX\n         MVC   COMMAND+13(25),JITBINS1 SET MESSAGE KEY\n         LA    R0,38               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         MVC   COMMAND+4(9),=C'INST 2  =' SET MESSAGE PREFIX\n         MVC   COMMAND+13(25),JITBINS2 SET MESSAGE KEY\n         LA    R0,38               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         MVC   COMMAND+4(9),=C'INST 3  =' SET MESSAGE PREFIX\n         MVC   COMMAND+13(25),JITBINS3 SET MESSAGE KEY\n         LA    R0,38               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         MVC   COMMAND+4(9),=C'INST 4  =' SET MESSAGE PREFIX\n         MVC   COMMAND+13(25),JITBINS4 SET MESSAGE KEY\n         LA    R0,38               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DISPLAY THE STATUS OF THE JIT SUBTASK                        *\n*                                                                     *\n***********************************************************************\nSTATUS   ICM   R4,B'1111',UCTJITDT LOAD JIT DTE ADDRESS\n         BZ    NOJIT               NONE, BRANCH\n         USING DTE,R4              SET ADDRESSABILITY TO DTE\n         MVI   COMMAND,C' '        BLANK ENTIRE\n         MVC   COMMAND+1(99),COMMAND     COMMAND AREA\n         MVC   COMMAND(8),=C'JIT DSN=' SET MSG TITLE\n         CLI   UCTJITDS,C' '       SEE IF DSNAME SET\n         BNH   STATUS01            NO, BRANCH\n         MVC   COMMAND+8(44),UCTJITDS MOVE DSNAME TO MESSAGE\nSTATUS01 LA    R0,52               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE MESSAGE\n         MVI   COMMAND,C' '        BLANK ENTIRE\n         MVC   COMMAND+1(99),COMMAND     COMMAND AREA\n         LA    R14,COMMAND         POINT TO COMMAND AREA\n         SLR   R15,R15             ZERO THE LENGTH FIELD\n         MVC   0(3,R14),=C'JIT'    SET MSG TITLE\n         LA    R15,4(R15)          ADD 8 TO LENGTH\n         LA    R14,4(R14)          INCREMENT TO FIRST STATUS LOCATION\n         TM    DTEFLAGS,JALLOC+JOPEN  SEE IF JIT STARTED\n         BO    STATUS02            YES, BRANCH\n         MVC   0(7,R14),=C'STOPPED' SET STATUS TO STOPPED\n         LA    R15,8(R15)          ADD 8 TO LENGTH\n         LA    R14,8(R14)          INCREMENT TO NEXT STATUS LOCATION\n         B     STATUS03            BRANCH\nSTATUS02 MVC   0(7,R14),=C'STARTED' SET STATUS TO STARTED\n         LA    R15,8(R15)          ADD 8 TO LENGTH\n         LA    R14,8(R14)          INCREMENT TO NEXT STATUS LOCATION\nSTATUS03 TM   DTEFLAGS,JINIT       SEE IF CONTROL BLOCKS INITIALIZED\n         BNO   STATUS04            NO, BRANCH\n         MVC   0(4,R14),=C'INIT'   SET STATUS TO INITIALIZED\n         LA    R15,5(R15)          ADD 5 TO LENGTH\n         LA    R14,5(R14)          INCREMENT TO NEXT STATUS LOCATION\nSTATUS04 TM   DTEFLAGS,JALLOC      SEE IF FILE ALLOCATED\n         BNO   STATUS05            NO, BRANCH\n         MVC   0(5,R14),=C'ALLOC'  SET STATUS TO ALLOCATED\n         LA    R15,6(R15)          ADD 6 TO LENGTH\n         LA    R14,6(R14)          INCREMENT TO NEXT STATUS LOCATION\nSTATUS05 TM   DTEFLAGS,JOPEN       SEE IF FILE OPENED\n         BNO   STATUS06            NO, BRANCH\n         MVC   0(6,R14),=C'OPENED'  SET STATUS TO OPENED\n         LA    R15,7(R15)          ADD 7 TO LENGTH\n         LA    R14,7(R14)          INCREMENT TO NEXT STATUS LOCATION\nSTATUS06 TM   DTEFLAGS,JACT        SEE IF ACTIVE I/O\n         BNO   STATUS07            NO, BRANCH\n         MVC   0(3,R14),=C'I/O'    SET STATUS TO I/O ACTIVE\n         LA    R15,4(R15)          ADD 4 TO LENGTH\n         LA    R14,4(R14)          INCREMENT TO NEXT STATUS LOCATION\nSTATUS07 TM   DTEWECB,X'80'        SEE IF SUBTASK WAITING ON ECB\n         BNO   STATUS08            NO, BRANCH\n         MVC   0(4,R14),=C'WAIT'   SET STATUS TO WAITING\n         LA    R15,5(R15)          ADD 5 TO LENGTH\n         LA    R14,5(R14)          INCREMENT TO NEXT STATUS LOCATION\n         B     STATUS09            BRANCH\nSTATUS08 MVC   0(6,R14),=C'ACTIVE' SET STATUS TO ACTIVE\n         LA    R15,7(R15)          ADD 7 TO LENGTH\n         LA    R14,7(R14)          INCREMENT TO NEXT STATUS LOCATION\nSTATUS09 SLR   R2,R2               SET COUNTER TO ZERO\n         L     R8,DTEFQUE          POINT TO FIRST JITB IN QUEUE\nSTATUS10 LTR   R8,R8               TEST JITB ADDRESS\n         BZ    STATUS11            END OF QUEUE, BRANCH\n         CLC   JITBID,=C'JITB'     MAKE SURE IT IS REALLY A JITB\n         BNE   STATUS11            NO, JUST GET OUT\n         LA    R2,1(R2)            ADD 1 TO COUNTER\n         L     R8,JITBCH           LOAD ADDRESS OF NEXT JITB\n         B     STATUS10            LOOP\nSTATUS11 MVC   0(6,R14),=C'QUEUE=' SET QUEUE DEPTH TITLE\n         CVD   R2,DBL1             CONVERT QUEUE COUNT TO PACKED\n         OI    DBL1+7,X'0F'        MAKE PRINTABLE\n         UNPK  6(3,R14),DBL1+6(2)  UNPACK COUNT TO MESSAGE\n         LA    R15,9(R15)          ADD 7 TO LENGTH\n         LA    R14,9(R14)          INCREMENT TO NEXT STATUS LOCATION\n         LR    R0,R15              SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE MESSAGE\n         B     EXIT8               GET OUT\n         DROP  R4                  DROP ADDRESSABILITY TO DTE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INVALID $TJIT OPERAND                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nBADOPRND L     R1,0(0,R5)          POINT TO INVALID OPERAND\n         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG\n         MVC   COMMAND+9(L'MSG2),MSG2 SET ERROR MESSAGE\n         LA    R0,L'MSG2+9         SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        JOB INFORMATION TASK NOT INITIALIZED                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nNOJIT    MVC   COMMAND(L'MSG4),MSG4 SET ERROR MESSAGE\n         LA    R0,L'MSG4           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INSUFFICIENT $TJIT OPERANDS                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nINSUFF   MVC   COMMAND(L'MSG1),MSG1 SET ERROR MESSAGE\n         LA    R0,L'MSG1           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE ERROR MESSAGE\n         B     EXIT8               GET OUT\nMSG1     DC    C'INSUFFICIENT OPERANDS'\nMSG2     DC    C' INVALID OPERAND'\nMSG3     DC    C'DSNAME SUCCESSFULLY MODIFIED'\nMSG4     DC    C'JOB INFORMATION TASK NOT INITIALIZED'\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\nEXIT0    DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nEXIT8    DS    0H\n         $FREEBUF (R9)             FREE THE WORK AREA\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n         LTORG\n         SPACE 3\nBLANKS   DC    100C' '             STRING OF BLANKS\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "J005LOAD": {"ttr": 13060, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 $LOAD COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED PROCESS THE $LOAD COMMAND *\n*        WHEN ENTERED.  THIS COMMAND IS IMPLEMENTED AS A TYPE 5       *\n*        EXIT TO JES2, AND AS SUCH MUST INTERCEPT ONLY THE $LOAD      *\n*        COMMAND WHEN ENCOUNTERED.                                    *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        THE $LOAD COMMAND HAS THE FOLLOWING SYNTAX:                  *\n*                                                                     *\n*        $LOAD                                                        *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *\n*                                                                     *\n*        1)  THE HASP000 MESSAGES ARE MADE UPON COMPLETION OF         *\n*            COMMAND                                                  *\n*                                                                     *\n*        $HASP000 MODULE RELOADED                                     *\n*                                                                     *\n*        $HASP000 MODULE IS NOT IN THE LMT                            *\n*                                                                     *\n*        $HASP000 MODULE LOAD ERROR                                   *\n*                                                                     *\n*        $HASP000 MODULE INVALID                                      *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J E S $ L O A D          *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $COMWORK     SYS1.HASPSRC                               *\n*        04)  $CWA         SYS1.HASPSRC                               *\n*        05)  $DCT         SYS1.HASPSRC                               *\n*        06)  $ENTRY       SYS1.HASPSRC                               *\n*        07)  $HASPEQU     SYS1.HASPSRC                               *\n*        08)  $HASPGBL     SYS1.HASPSRC                               *\n*        09)  $HCT         SYS1.HASPSRC                               *\n*        10)  $JCT         SYS1.HASPSRC                               *\n*        11)  $JOE         SYS1.HASPSRC                               *\n*        12)  $JQE         SYS1.HASPSRC                               *\n*        13)  $LMT         SYS1.HASPSRC                               *\n*        14)  $MIT         SYS1.HASPSRC                               *\n*        15)  $MITETBL     SYS1.HASPSRC                               *\n*        16)  $MODEND      SYS1.HASPSRC                               *\n*        17)  $MODULE      SYS1.HASPSRC                               *\n*        18)  $PADDR       SYS1.HASPSRC                               *\n*        19)  $PCE         SYS1.HASPSRC                               *\n*        20)  $PDDB        SYS1.HASPSRC                               *\n*        21)  $PPPWORK     SYS1.HASPSRC                               *\n*        22)  $QLOC        SYS1.HASPSRC                               *\n*        23)  $QSE         SYS1.HASPSRC                               *\n*        24)  $RETURN      SYS1.HASPSRC                               *\n*        25)  $SAVE        SYS1.HASPSRC                               *\n*        26)  $SJB         SYS1.HASPSRC                               *\n*        27)  $TQE         SYS1.HASPSRC                               *\n*        28)  $XIT         SYS1.HASPSRC                               *\n*        29)  $XRT         SYS1.HASPSRC                               *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       2K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ005LOAD $MODULE $HASPEQU,                                             X\n               DEB,                                                    X\n               RESPA,              GENERATE MVS  RESPA DSECT           X\n               RPL,                GENERATE HASP RPL DSECT             X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $LMT,               GENERATE HASP LMT DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $MITETBL,           GENERATE HASP MITETBL DSECT         X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $PDDB,              GENERATE HASP PDDB DSECT            X\n               $PIT,               GENERATE HASP PIT DSECT             X\n               $PPPWORK,           GENERATE HASP PPPWORK DSECT         X\n               $SJB,               GENERATE HASP SJB DSECT             X\n               $TQE,               GENERATE HASP TQE DSECT             X\n               $XIT,               GENERATE HASP XIT DSECT             X\n               $XRT                GENERATE HASP XRT DSECT\n         EJECT\nJ005LOAD CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         TITLE 'JES2 $LOAD COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE005LOAD $ENTRY BASE=(R12)\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       - ADDRESS OF THE CURRENT OPERAND                    *\n*        R6       - INCREMENT VALUE OF 4                              *\n*        R7       - ADDRESS OF THE LAST OPERAND                       *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SEE IF THIS IS A $LOAD COMMAND                               *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         CLC   COMVERB(4),=C'LOAD'   SEE IF THIS IS THE $LOAD COMMAND\n         BNE   EXIT0                 NO. LET JES HANDLE IT\n         SPACE 1\n         USING HCT,R11               ADDRESS HCT\n         USING PCE,R13               ADDRESS PCE\n         LA    R2,COMVERB\n         LA    R0,MSGL               LOAD MESSAGE LENGTH\n         $STORE (R0)                 STORE IT IN MESSAGE AREA\n         SPACE 1\n         MVC   PCEUSER0(8),5(R2)     MOVE MODULE NAME\n         MVC   COMMAND(MSGL),MSGOK   MOVE 'OK' MESSAGE\n         MVC   COMMAND(8),PCEUSER0   MOVE MODULE NAME\n         CLC   PCEUSER0(8),EDLOAD    THIS PGM?\n         BE    EXITERR3              YES - ERROR\n         SPACE 1\n         USING LMT,R2                ADDRESS LMT\n         L     R2,$LMTADDR           LOAD LMT ADDRESS\nEXITLOD1 EQU   *\n         CLC   LMTMODNM,PCEUSER0     NAMES EQUAL?\n         BE    EXITLOD2              YES - CONTINUE\n         CLI   LMTMODNM,X'00'        END OF TABLE?\n         BE    EXITERR1              YES - ERROR\n         LA    R2,LMTLNGTH(,R2)      POINT TO NEXT ENTRY\n         B     EXITLOD1              TRY NEXT ONE\nEXITLOD2 EQU   *\n         SPACE 1\n         DELETE EPLOC=PCEUSER0,RELATED=('NEXT LOAD')\n         SPACE 1\n         LOAD  EPLOC=PCEUSER0,ERRET=EXITERR2,                          X\n               RELATED=('PREVIOUS DELETE')\n         SPACE 1\n         LTR   R0,R0                 DID WE GET IT?\n         BZ    EXITERR2              NO - ERROR\n         ST    R0,LMTMITAD           YES - STORE IT\n         B     EXITTBL               GO FILE THE XIT TABLE\n         DROP  R2\n********************************************************************\n*                     EXITTBL                                      *\n********************************************************************\nEXITTBL  EQU   *\n         L     R1,$XITADDR           GET XIT ADDRESS\n         USING XIT,R1                XIT ENTRY ADDRESSABILITY\n         USING MTE,R3                MITETBL ADDRESSABILITY\n         USING XRT,R2                XRT ENTRY ADDRESSABILITY\n         LA    R4,256                GET NO. OF XIT ENTRIES\n         LR    R6,R0                 SAVE MIT ADDRESS\nEXITTBL1 ICM   R2,15,XITXRTAD        GET NEXT XRT POINTER\n         BZ    EXITTBL6              IF NO XRT, SKIP\n         SPACE 1\n         SLR   R5,R5                 CLEAR FOR INSERT\n         IC    R5,XIT#RTNS           GET NO. OF RTNS IN XRT\nEXITTBL2 L     R3,MITENTAD-MIT(,R6)  GET MITETBL ADDRESS\nEXITTBL3 CLI   MTENAME,X'FF'         IS THIS THE END OF THE TABLE\n         BE    EXITTBL5              YES - GO GET NEXT XRTE\n         CLC   XRTRNAME,MTENAME      IS ROUTINE NAME IN MIT?\n         BE    EXITTBL4              YES - UPDATE XRT\n         LA    R3,MTELEN(,R3)        POINT TO NEXT MITETBL ENTRY\n         B     EXITTBL3              NO - LOOP TO NEXT ENTRY\nEXITTBL4 MVC   XRTRADDR,MTEADDR      SET ROUTINE ADDR IN XRT\n         SPACE 1\nEXITTBL5 LA    R2,XRTLNGTH(,R2)      BUMP TO NEXT XRT ENTRY\n         BCT   R5,EXITTBL2            UNTIL ENTIRE XRT DONE\nEXITTBL6 LA    R1,XITLNGTH(,R1)      BUMP TO NEXT XIT ENTRY\n         BCT   R4,EXITTBL1            UNTIL ENTIRE XIT DONE\n         B     EXIT16\n********************************************************************\n*                     EXITERR                                      *\n********************************************************************\nEXITERR1 EQU   *\n         MVC   COMMAND(MSGL),MSGERR1 MOVE 'NOT LOADED' MSG\n         MVC   COMMAND(8),PCEUSER0   MOVE MODULE NAME\n         B     EXIT16\nEXITERR2 EQU   *\n         MVC   COMMAND(MSGL),MSGERR2 MOVE 'NOT FOUND' MSG\n         MVC   COMMAND(8),PCEUSER0   MOVE MODULE NAME\n         B     EXIT16\nEXITERR3 EQU   *\n         MVC   COMMAND(MSGL),MSGERR3 MOVE 'INVALID' MSG\n         MVC   COMMAND(8),PCEUSER0   MOVE MODULE NAME\n         B     EXIT16\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nEXIT0    LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nEXIT16   LA    R15,16              LOAD RETURN CODE\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n********************************************************************\n*                  DATA AREAS                                      *\n********************************************************************\nEDLOAD   DC    CL8'J005LOAD'\nMSGOK    DC    C'XXXXXXXX RELOADED             '\nMSGERR1  DC    C'XXXXXXXX IS NOT IN THE LMT    '\nMSGERR2  DC    C'XXXXXXXX LOAD ERROR           '\nMSGERR3  DC    C'XXXXXXXX INVALID              '\nMSGL     EQU   *-MSGERR3\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "J005UCC7": {"ttr": 13065, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 $TUCC7 COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED PROCESS THE $TUCC7        *\n*        COMMAND WHEN ENTERED.  THIS COMMAND IS IMPLEMENTED AS        *\n*        AN EXIT5 EXIT TO JES2, AND AS SUCH MUST INTERCEPT ONLY       *\n*        $TUCC7 COMMAND WHEN ENCOUNTERED.                             *\n*                                                                     *\n*                                                                     *\n*        THE $TUCC7 COMMAND HAS THE FOLLOWING SYNTAX:                 *\n*                                                                     *\n*        $TUCC7,                                                      *\n*              STOP      STOP UCC7 TASK PROCESSING BY TURNING         *\n*                        OFF THE ENABLED BIT.                         *\n*                                                                     *\n*              START     START UCC7 TASK PROCESSING BY RELOADING      *\n*                        THE UCC7 INTERFACE MODULE AND TURNING        *\n*                        ON THE ENABLED BIT.                          *\n*                                                                     *\n*              RESTART   RESTART UCC7 TASK PROCESSING BY RELOADING    *\n*                        THE UCC7 INTERFACE MODULE AND TURNING ON     *\n*                        THE ENABLED BIT.                             *\n*                                                                     *\n*              STATUS    DISPLAY THE STATUS OF THE UCC7 TASK.         *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *\n*                                                                     *\n*        1)  THE HASP990 MESSAGE WILL BE ISSUED FOR EACH REQUEST      *\n*                                                                     *\n*        $HASP990 UCC7 START   PROCESSING SUCESSFULLY COMPLETED       *\n*        $HASP990 UCC7 STOP    PROCESSING SUCESSFULLY COMPLETED       *\n*        $HASP990 UCC7 RESTART PROCESSING SUCESSFULLY COMPLETED       *\n*        $HASP990 UCC7 DEMAND  PROCESSING SUCESSFULLY COMPLETED       *\n*                                                                     *\n*        2)  THE HASP990 MESSAGE WILL BE ISSUED FOR EACH STATUS       *\n*            REQUEST.                                                 *\n*                                                                     *\n*        3)  THE HASP990 MESSAGE WILL BE ISSUED FOR EACH DEMAND       *\n*            REQUEST.                                                 *\n*                                                                     *\n*        $HASP990 UCC7 JOBNAME =JOBNAME                               *\n*        $HASP990 UCC7 GROUPID =OUTPUT GROUP NAME                     *\n*                                                                     *\n*        $HASP990 UCC7 ENABLED/DISABLED INTERFACE LOADED              *\n*                                                                     *\n*        4)  THE HASP999 MESSAGE WILL BE ISSUED WHEN AN INVALID       *\n*            OPERAND KEYWORD OR VALUE IS DETECTED OR WHEN ONE         *\n*            OF THE POSITIONAL KEYWORDS ARE NOT FIRST IN THE LIST.    *\n*                                                                     *\n*        $HASP999 ......... INVALID OPERAND                           *\n*                                                                     *\n*        5)  THE HASP999 MESSAGE WILL BE ISSUED WHEN THE L=CCA        *\n*            OPERAND SPECIFIES AN INVALID CONSOLE OR DISPLAY          *\n*            AREA.                                                    *\n*                                                                     *\n*        $HASP999 RESPONSE LOCATION L=CCA UNAVAILABLE                 *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J 0 0 5 U C C 7          *\n*                                                                     *\n*        01)  $AMODE       SYS1.HASPSRC                               *\n*        02)  $BUFFER      SYS1.HASPSRC                               *\n*        03)  $CAT         SYS1.HASPSRC                               *\n*        04)  $CMB         SYS1.HASPSRC                               *\n*        05)  $COMWORK     SYS1.HASPSRC                               *\n*        06)  $CWA         SYS1.HASPSRC                               *\n*        07)  $CWTO        SYS1.HASPSRC                               *\n*        08)  $DTE         SYS1.HASPSRC                               *\n*        09)  $ENTRY       SYS1.HASPSRC                               *\n*        10)  $ERA         SYS1.HASPSRC                               *\n*        11)  $GETBUF      SYS1.HASPSRC                               *\n*        12)  $FCSDTE      SYS1.HASPSRC (USER)                        *\n*        13)  $FCSJITB     SYS1.HASPSRC (USER)                        *\n*        14)  $FCSUCT      SYS1.HASPSRC (USER)                        *\n*        15)  $FREEBUF     SYS1.HASPSRC                               *\n*        16)  $HASPEQU     SYS1.HASPSRC                               *\n*        17)  $HASPGBL     SYS1.HASPSRC                               *\n*        18)  $HCT         SYS1.HASPSRC                               *\n*        19)  $JCT         SYS1.HASPSRC                               *\n*        20)  $JOE         SYS1.HASPSRC                               *\n*        21)  $JOT         SYS1.HASPSRC                               *\n*        22)  $JQE         SYS1.HASPSRC                               *\n*        23)  $MIT         SYS1.HASPSRC                               *\n*        24)  $MODEND      SYS1.HASPSRC                               *\n*        25)  $MODULE      SYS1.HASPSRC                               *\n*        26)  $PADDR       SYS1.HASPSRC                               *\n*        27)  $PCE         SYS1.HASPSRC                               *\n*        28)  $RETURN      SYS1.HASPSRC                               *\n*        29)  $SAVE        SYS1.HASPSRC                               *\n*        30)  $STORE       SYS1.HASPSRC                               *\n*        31)  $XECB        SYS1.HASPSRC                               *\n*        32)  $WAIT        SYS1.HASPSRC                               *\n*        33)  IAZRESPA     SYS1.AMODGEN                               *\n*        34)  IFGRPL       SYS1.MACLIB                                *\n*        35)  MODESET      SYS1.AMODGEN                               *\n*        36)  POST         SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       2K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ005UCC7 $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 $TUCC7 COMMAND PROCESSOR',                  X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $CMB,               GENERATE HASP CMB DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $CWA,               GENERATE HASP CWA DSECT             X\n               $DTE,               GENERATE HASP DTE DSECT             X\n               $ERA,               GENERATE HASP ERA DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JOT,               GENERATE HASP JOT DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $XECB,              GENERATE HASP XECB DSECT            X\n               CVT,                GENERATE MVS  CVT DSECT             X\n               RESPA,              GENERATE MVS  RESPA  DSECT          X\n               RPL,                GENERATE MVS  IFGRPL DSECT          X\n               UCB                 GENERATE MVS  UCB DSECT\n               SPACE 3\n         EJECT\n***********************************************************************\n*                                                                     *\n*        USER ADDITION OF THE DTE                                     *\n*                                                                     *\n***********************************************************************\nDTE      DSECT\n         ORG  DTEWORK\n         DS   0CL2048              2048 BYTE EXTENSION\n         $FCSDTE ,                 MAP THE COMMON DTE EXTENSION AREA\nJ005UCC7 CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n         $FCSUCT ,                 MAP THE UCT DSECT\nJ005UCC7 CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n         $FCSJITB ,                MAP THE JITB DSECT\nJ005UCC7 CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREAS                                           *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n$UC7WORK DSECT                     COMMAND WORK AREA\n         DS    CL(BUFSTART-BFPDSECT) **** RESERVED BY JES2 ****\nJITBAREA DS    CL200               RESERVE 200 CHARACTERS FOR JITB\nOPNDCTR  DS    H                   COUNT OF COMMAND OPERANDS\nDSNAME   DS    CL44                REQUESTED NEW DSNAME\nDBL1     DS    D                   DOUBLE WORD WORK AREA\nWRKA     DS    CL10                EXIT WORK AREA\nJ005UCC7 CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         TITLE 'JES2 $TUCC7 COMMAND PROCESSOR'\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE005UCC7 $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R5       - ADDRESS OF THE CURRENT OPERAND                    *\n*        R6       - INCREMENT VALUE OF 4                              *\n*        R7       - ADDRESS OF THE LAST OPERAND                       *\n*        R11      - ADDRESS OF THE HCT                                *\n*        R13      - ADDRESS OF THE HASPCOMM PCE                       *\n*        R14      - RETURN ADDRESS                                    *\n*        R15      - ENTRY ADDRESS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        SEE IF THIS IS A $TUCC7 COMMAND                              *\n*                                                                     *\n***********************************************************************\n         CLC   COMVERB(5),=C'TUCC7' SEE IF THIS IS THE $TUCC7 COMMAND\n         BNE   EXIT0               NO, BRANCH TO COMMAND OK EXIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GET A JES2 BUFFER FOR REENTRANCY AND                         *\n*        CLEAR THE COMMAND WORK AREA                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R9,R1               SAVE WORK AREA ADDRESS\n         USING $UC7WORK,R9         SET ADDRESSABILITY TO WORK AREA\n         LA    R14,$UC7WORK+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS\n         LH    R15,$BUFSIZE        SET   'TO'   LENGTH\n         SLR   R0,R0               CLEAR 'FROM' ADDRESS\n         SLR   R1,R1               CLEAR 'FROM' LENGTH\n         MVCL  R14,R0              CLEAR THE BUFFER\n         CLI   COMVERB+5,C' '      SEE IF OTHER OPERANDS SPECIFIED\n         BE    INSUFF              NO, INSUFFICIENT OPERANDS\n         ICM   R10,15,$UCT         LOAD ADDRESS OF UCT\n         BZ    NOUCC7              ZERO, NONE, ERROR\n         USING UCT,R10             SET ADDRESSABILITY TO UCT\n         LA    R8,JITBAREA         LOAD ADDRESS OF JITB AREA\n         USING JITB,R8             SET ADDRESSABILITY TO JITB\n         MVC   JITBID,=C'JITB'     SET THE JITBID FIELD\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXAMINE THE COMMAND OPERANDS                                 *\n*                                                                     *\n***********************************************************************\nCKOPND   BXH   R5,R6,CTUCC7OK      IF NO MORE GO PROCESS THEM\n         L     R3,0(,R5)           POINT TO OPERAND\n         LH    R15,OPNDCTR         LOAD OPERAND COUNTER\n         LA    R15,1(R15)          ADD 1 TO COUNTER\n         STH   R15,OPNDCTR         SAVE OPERAND COUNTER\n         CLC   0(4,R3),=C'DMD='    SEE IF 'DEMAND' OPTION\n         BE    OPDMD               YES, GO PROCESS IT\n         CLC   0(7,R3),=C'DEMAND=' SEE IF 'DEMAND' OPTION\n         BE    OPDMD               YES, GO PROCESS IT\n         CLC   OPNDCTR,=H'1'       IS THIS THE FIRST OPERAND\n         BNE   BADOPRND            NO, INVALID OPERAND\n         CLC   0(5,R3),=C'START'   SEE IF 'START' OPTION\n         BE    OPSTART             YES, GO PROCESS IT\n         CLC   0(4,R3),=C'STOP'    SEE IF 'STOP' OPTION\n         BE    OPSTOP              YES, GO PROCESS IT\n         CLC   0(7,R3),=C'RESTART' SEE IF 'RESTART' OPTION\n         BE    OPREST              YES, GO PROCESS IT\n         CLC   0(6,R3),=C'STATUS'  SEE IF 'STATUS' OPTION\n         BE    OPSTAT              YES, GO PROCESS IT\n         B     BADOPRND            NOT VALID, ERROR\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE START OPERAND                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPSTART  MVI   JITBFLG,JITBSTAR    TURN ON 'START' OPTION\n         CLI   5(R3),C' '          FIVE CHARACTER OPERAND\n         BE    CKOPND              YES, GO GET NEXT OPERAND\n         CLI   5(R3),C','          FIVE CHARACTER OPERAND\n         BNE   BADOPRND            NO, ERROR\n         B     CKOPND              GO GET NEXT OPERAND\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        PROCESS THE STOP OPERAND                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPSTOP   MVI   JITBFLG,JITBSTOP    TURN ON 'STOP' OPTION\n         CLI   4(R3),C' '          FOUR CHARACTER OPERAND\n         BE    CKOPND              YES, GO GET NEXT OPERAND\n         CLI   4(R3),C','          FOUR CHARACTER OPERAND\n         BNE   BADOPRND            NO, ERROR\n         B     CKOPND              GO GET NEXT OPERAND\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        PROCESS THE RESTART OPERAND                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPREST   MVI   JITBFLG,JITBREST    TURN ON 'RESTART' OPTION\n         CLI   7(R3),C' '          SEVEN CHARACTER OPERAND\n         BE    CKOPND              YES, GO GET NEXT OPERAND\n         CLI   7(R3),C','          SEVEN CHARACTER OPERAND\n         BNE   BADOPRND            NO, ERROR\n         B     CKOPND              GO GET NEXT OPERAND\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        PROCESS THE STATUS OPERAND                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPSTAT   MVI   JITBFLG,JITBDISP    TURN ON 'STATUS' OPTION\n         CLI   6(R3),C' '          SIX CHARACTER OPERAND\n         BE    CKOPND              YES, GO GET NEXT OPERAND\n         CLI   6(R3),C','          SIX CHARACTER OPERAND\n         BNE   BADOPRND            NO, ERROR\n         B     CKOPND              GO GET NEXT OPERAND\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        PROCESS THE DEMAND OPERAND                                   *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nOPDMD    MVI   JITBKEY,C' '        BLANK ENTIRE\n         MVC   JITBKEY+1(15),JITBKEY   FILE KEY FIELD\n         MVI   JITBFLG,JITBDMD     TURN ON OPTION BIT\n         LA    R15,8               SET LOOP COUNTER\nOPDMD1   CLI   0(R3),C'='          FIND END OF KEYWORD\n         BE    OPDMD2              YES, BRANCH\n         LA    R3,1(R3)            INCREMENT TO NEXT CHAR\n         BCT   R15,OPDMD1          LOOP\n         B     BADOPRND            NO '=' ERROR\nOPDMD2   LA    R3,1(R3)            INCREMENT PAST '='\n         LR    R4,R3               SAVE START OF VALUE ADDRESS\n         LA    R15,17              SET LOOP COUNTER\nOPDMD3   CLI   0(R4),C','          PROPER END OF VALUE\n         BE    OPDMD4              YES, BRANCH\n         CLI   0(R4),C' '          PROPER END OF VALUE\n         BE    OPDMD4              YES, BRANCH\n         LA    R4,1(R4)            INCREMENT TO NEXT CHAR\n         BCT   R15,OPDMD3          LOOP\n         B     BADOPRND            OPERAND TOO LONG\nOPDMD4   LR    R15,R4              SAVE END ADDRESS\n         SR    R15,R3              CALCULATE LENGTH\n         LTR   R15,R15             TEST LENGTH\n         BZ    BADOPRND            ZERO, ERROR\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MVKEY           SAVE KEY\n***********************************************************************\n*        TRANSLATE PLACEHOLDER CHARACTERS IN KEY TO BLANKS            *\n***********************************************************************\n         LA    R15,16              SET LOOP COUNTER\n         LA    R14,JITBKEY         POINT TO JITB KEY\nOPDMD5   CLI   0(R14),C'*'         SEE IF PLACEHOLDER\n         BE    OPDMD6              YES, BRANCH\n         CLI   0(R14),C'.'         SEE IF PLACEHOLDER\n         BNE   OPDMD7              NO,  BRANCH\nOPDMD6   MVI   0(R14),C' '         MAKE IT A BLANK\nOPDMD7   LA    R14,1(R14)          INCREMENT TO NEXT CHAR\n         BCT   R15,OPDMD5          LOOP\n         B     CKOPND              GO GET NEXT OPERAND\nMVKEY    MVC   JITBKEY(0),0(R3)    **** EXECUTE ONLY ****\n         SPACE 1\n         EJECT\n*****************************************************************\n*                                                               *\n*        CHECK FOR REDIRECTION OF RESPONSES                     *\n*                                                               *\n*****************************************************************\n         SPACE 1\nCTUCC7OK TM    COMFLAG,CMBFLAGU    IS THIS A UCM\n         BZ    PROCESS             NO, SKIP REDIRECTION\nREDIR    TM    FBLFLG,FBLFLGC+FBLFLGR CONSOLE SET OR REMOTE SYSTEM\n         BNZ   REDIR1              SKIP AUTOMATIC L=CCA\n         LA    R1,2                LOAD REDIRECT OFFSET FOR $TJIT\n*                                  SAME AS FOR $DF\n         BCTR  R1,0                REDUCE BY 1\n         SLL   R1,1                DOUBLE\n         SLR   R2,R2               ZERO REGISTER FOR IC\n         IC    R2,COMUCM           PICK UP CURRENT UCM ID\n         L     R14,$COMEXTN        POINT TO CONSOLE WORK AREA\n         USING CWA,R14             SET ADDRESSABILITY TO CWA\n         CH    R2,CWAOCON          SEE IF EXCEEDS MAXIMUM\n         BH    REDIR1              YES, ERROR, NO AUTOMATIC REDIRECTION\n         MH    R2,CWALCON          MULTIPLY BY LENGTH OF EACH ENTRY\n         AR    R1,R2               COMBINE OFFSETS\n         LA    R1,CWARESP-CWACONL(R1) POINT TO CORRECT CWA ENTRY\n         MVC   COMUCM,CWACON(R1)   INSERT NEW CONSOLE ID\n         TM    FBLFLG,FBLFLGA      HAS AREA BEEN SET\n         BO    REDIR1              YES, SKIP AUTOMATIC REDIRECTION\n         MVC   COMUCMA,CWACONA(R1) SET NEW AREA\n         DROP  R14                 DROP ADDRESSABILITY TO CWA\n         EJECT\n*****************************************************************\n*                                                               *\n*        ROUTINE TO VERIFY CONSOLE/AREA                         *\n*                                                               *\n*****************************************************************\n         SPACE 1\nREDIR1   TM    FBLFLG,FBLFLGR      SEE IF REMOTE SYSTEM UCM\n         BO    REDIR3              YES, UCM AND AREA ARE OK\n         L     R2,$COMEXTN         POINT TO CONSOLE WORK AREA\n         USING CWA,R2              SET ADDRESSABILITY TO CWA\n         MVC   XASCID(1),COMUCM    SET UCM ID\n         MVC   XASDID(1),COMUCMA   SET AREA ID\n         CLI   XASDID,0            SEE IF AREA ID SPECIFIED\n         BNZ   REDIR2              YES, BRANCH\n         MVI   XASDID,C'Z'         NO,  FORCE AREA Z\nREDIR2   MVC   XAU(1),COMUCM       TELL OS SOURCE IS SAME AS OUTPUT\n         MVI   XAN,X'22'           SET ID FOR VERIFIER\n         MODESET EXTKEY=ZERO       GET KEY 0\n         L     R15,CWA7603D        POINT TO OS VERIFICATION ROUTINE\n         $AMODE 24,PUSHR=0,R=R14   GO TO AMODE 24\n         BALR  R14,R15             ENTER IT\n         $AMODE POPR=0,R=R14       RETURN TO ORIGINAL AMODE\n         MODESET EXTKEY=HASP       RETURN TO KEY 1\n         CH    R15,=H'4'           CHECK FOR SERIOUS ERROR\n         BNH   REDIR3              NO, GO ISSUE ERROR MESSAGE\n         SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,B'0011',COMUCM   PICK UP UCM AND AREA ID\n         MVI   COMUCMA,0           FORCE NO DISPLAY AREA\n         CH    R15,=H'12'          SEE IF CONSOLE DOWN\n         BNE   *+16                NO, DO NOT SET LOGICAL CONSOLE\n         MVC   COMFLAG(4),MOWTOL   DESTROY APPARENT SOURCE INFO\n         MVC   COMOUT,MOWTOL+(COMOUT-COMFLAG) OMITTING CNTL FIELD\n         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND\n         MVC   COMMAND(MBVINVL),MBVINV SET ERROR MESSAGE TEXT\n         STC   R3,MBVINVA          SET AREA\n         SRL   R3,8                ALIGN CONSOLE ID\n         CVD   R3,$DOUBLE          CONVERT TO PACKED\n         MVC   WRKA(4),=X'F0212020' SET EDIT MASK\n         ED    WRKA(4),$DOUBLE+6   EDIT CONSOLE ID TO AREA\n         MVC   MBVINVC,WRKA+2      MOVE CONSOLE ID TO MESSAGE\n         MVC   COMMAND+MBVINVL(8),COMACEID MOVE IDENTIFIER\n         $CWTO L=MBVINVL,MSGID=999 WRITE ERROR MESSAGE TO CONSOLE\n         B     EXIT8               GET OUT\n         DROP  R2                  DROP ADDRESSABILITY TO CWA\nREDIR3   CLI   COMUCMA,0           TEST FOR DISPLAY AREA\n         BE    PROCESS             IF NOT, SKIP\n         MVI   COMLINET,X'80'      SET CONTROL LINE\n         $CWTO L=L'CMBMSG,MSGID=900 ECHO THE COMMAND\n         MVI   COMLINET,X'20'      SET DATA LINE\n         B     PROCESS             CONTINUE\n         EJECT\n*****************************************************************\n*                                                               *\n*       R E D I R E C T   R O U T I N E   C O N S T A N T S     *\n*                                                               *\n*****************************************************************\n         SPACE 1\nMOWTOL   $WTO  PRI=$HI,CLASS=$ALWAYS,JOB=NO,ROUTE=X'C000',MF=LX\nMBVINV   DC    C'RESPONSE LOCATION L=CCA UNAVAILABLE '\nMBVINVL  EQU   *-MBVINV\nMBVINVC  EQU   COMMAND+MBVINVL-16,2\nMBVINVA  EQU   MBVINVC+2,1\nFBLFLG   EQU   COMEWORK+2          FLAG BYTE\nCOMJMBR  EQU   COMJRMT             SHARED SPOOL MEMBER NUMBER\nFBLFLGR  EQU   1                   UCM COMMAND FROM REMOTE SYSTEM\nFBLFLGC  EQU   2                   CONSOLE HAS BEEN SPECIFIED\nFBLFLGA  EQU   4                   AREA HAS BEEN SPECIFIED\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS THE REQUESTED OPERANDS                               *\n*                                                                     *\n***********************************************************************\nPROCESS  DS    0H\nCK1      TM    JITBFLG,JITBDISP    SEE IF DISPLAY STATUS OPTION\n         BO    STATUS              YES, BRANCH\nCK2      TM    JITBFLG,JITBDMD     SEE IF DEMAND OPTION\n         BNO   CK3                 NO, BRANCH\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        CHAIN THE JITB FOR THE JIT SUBTASK                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         ICM   R4,B'1111',UCTJITDT LOAD JIT DTE ADDRESS\n         BZ    NOJIT               NONE, BRANCH\n         USING DTE,R4              SET ADDRESSABILITY TO DTE\n         XC    JITBXECB(L'XECBECB),JITBXECB CLEAR THE XECB\n         L     R1,DTEFQUE          LOAD THE WORK QUEUE ADDRESS\nCSLOOP1  ST    R1,JITBCH           PUSH HEAD QUEUE DOWN\n         CS    R1,R8,DTEFQUE       ADD TO WORK QUEUE\n         BNE   CSLOOP1             CHANGED, TRY AGAIN\n         POST  DTEWECB             POST SUBTASK\n         $WAIT OPER,XECB=JITBXECB,INHIBIT=YES\n         TM    JITBSTAT,JITBOK     SEE IF ACTUALLY SUCCESSFUL\n         BO    CK3                 YES, BRANCH\n         MVI   COMMAND,C' '        BLANK ENTIRE\n         MVC   COMMAND+1(99),COMMAND     COMMAND AREA\n         MVC   COMMAND(3),=C'JIT'  SET MESSAGE PREFIX\n         MVC   COMMAND+4(4),=C'READ' ASSUME LIST REQUEST\n         MVC   COMMAND+12(10),=C'PROCESSING' SET MESSAGE TEXT\n         MVC   COMMAND+23(6),=C'FAILED'  SAY THAT IT FAILED\n         B     RESULTS3            GO DISPLAY MESSAGE\n         DROP  R4                  DROP ADDRESSABILITY TO DTE\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        CHAIN THE JITB FOR THE UCC7 SUBTASK                          *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nCK3      CLI   JITBFLG,0           SEE IF ANY OPTIONS SET\n         BE    EXIT8               NO, GET OUT\n         ICM   R4,B'1111',UCTUC7DT LOAD UCC7 DTE ADDRESS\n         BZ    NOUCC7              NONE, BRANCH\n         USING DTE,R4              SET ADDRESSABILITY TO DTE\n         XC    JITBXECB(L'XECBECB),JITBXECB CLEAR THE XECB\n         L     R1,DTEFQUE          LOAD THE WORK QUEUE ADDRESS\nCSLOOP2  ST    R1,JITBCH           PUSH HEAD QUEUE DOWN\n         CS    R1,R8,DTEFQUE       ADD TO WORK QUEUE\n         BNE   CSLOOP2             CHANGED, TRY AGAIN\n         POST  DTEWECB             POST SUBTASK\n         $WAIT OPER,XECB=JITBXECB,INHIBIT=YES\n         DROP  R4                  DROP ADDRESSABILITY TO DTE\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        DISPLAY THE RESULTS OF THE CALL TO THE JIT SUBTASK           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nRESULTS1 MVI   COMMAND,C' '        BLANK ENTIRE\n         MVC   COMMAND+1(99),COMMAND     COMMAND AREA\n         MVC   COMMAND(4),=C'UCC7'  SET MESSAGE PREFIX\n         MVC   COMMAND+13(10),=C'PROCESSING' SET MESSAGE TEXT\n         MVC   COMMAND+24(6),=C'FAILED'  ASSUME THAT IT FAILED\n         TM    JITBSTAT,JITBOK     SEE IF ACTUALLY SUCCESSFUL\n         BNO   RESULTS2            NO, CONTINUE\n         MVC   COMMAND+24(22),=C'SUCCESSFULLY COMPLETED'\nRESULTS2 MVC   COMMAND+5(4),=C'STOP' ASSUME STOP REQUEST\n         TM    JITBFLG,JITBSTOP    SEE IF STOP REQUEST\n         BO    RESULTS3            YES, BRANCH\n         MVC   COMMAND+5(5),=C'START' ASSUME START REQUEST\n         TM    JITBFLG,JITBSTAR    SEE IF START REQUEST\n         BO    RESULTS3            YES, BRANCH\n         MVC   COMMAND+5(6),=C'DEMAND' ASSUME DEMAND REQUEST\n         TM    JITBFLG,JITBDMD     SEE IF DEMAND REQUEST\n         BO    RESULTS3            YES, BRANCH\n         MVC   COMMAND+5(7),=C'RESTART' ASSUME RESTART REQUEST\n         TM    JITBFLG,JITBREST    SEE IF RESTART REQUEST\n         BO    RESULTS3            YES, BRANCH\n         MVC   COMMAND+5(7),=C'UNKNOWN' UNKNOWN REQUEST\nRESULTS3 LA    R0,50               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         TM    JITBFLG,JITBDMD     SEE IF DEMAND OPTION\n         BNO   EXIT8               NO, BRANCH\n         MVC   COMMAND(5),=C'UCC7 ' SET LINE TITLE\n         MVC   COMMAND+5(9),=C'JOBNAME =' SET MESSAGE PREFIX\n         MVC   COMMAND+14(08),JITBJOBN SET MESSAGE KEY\n         LA    R0,22               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         MVC   COMMAND+5(9),=C'GROUPID =' SET MESSAGE PREFIX\n         MVC   COMMAND+14(08),JITBGRP  SET MESSAGE KEY\n         LA    R0,22               SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DISPLAY THE STATUS OF THE UCC7 SUBTASK                       *\n*                                                                     *\n***********************************************************************\nSTATUS   ICM   R4,B'1111',UCTUC7DT LOAD JIT DTE ADDRESS\n         BZ    NOUCC7              NONE, BRANCH\n         USING DTE,R4              SET ADDRESSABILITY TO DTE\n         MVI   COMMAND,C' '        BLANK ENTIRE\n         MVC   COMMAND+1(99),COMMAND     COMMAND AREA\n         LA    R14,COMMAND         POINT TO COMMAND AREA\n         SLR   R15,R15             ZERO THE LENGTH FIELD\n         MVC   0(4,R14),=C'UCC7'   SET MSG TITLE\n         LA    R15,5(R15)          ADD 8 TO LENGTH\n         LA    R14,5(R14)          INCREMENT TO FIRST STATUS LOCATION\n         TM    DTEFLAGS,UENABLE    SEE IF UCC7 TASK ENABLED\n         BO    STATUS02            YES, BRANCH\n         MVC   0(8,R14),=C'DISABLED' SET STATUS TO DISABLED\n         LA    R15,9(R15)          ADD 8 TO LENGTH\n         LA    R14,9(R14)          INCREMENT TO NEXT STATUS LOCATION\n         B     STATUS03            BRANCH\nSTATUS02 MVC   0(7,R14),=C'ENABLED' SET STATUS TO ENABLED\n         LA    R15,8(R15)          ADD 8 TO LENGTH\n         LA    R14,8(R14)          INCREMENT TO NEXT STATUS LOCATION\nSTATUS03 TM   DTEFLAGS,ULOADED     SEE IF UCC7 INTERFACE MODULE LOADED\n         BNO   STATUS04            NO, BRANCH\n         MVC   0(16,R14),=C'INTERFACE LOADED' TELL THAT IT IS LOADED\n         LA    R15,17(R15)         ADD 17 TO LENGTH\n         LA    R14,17(R14)         INCREMENT TO NEXT STATUS LOCATION\nSTATUS04 LR    R0,R15              SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE MESSAGE\n         B     EXIT8               GET OUT\n         DROP  R4                  DROP ADDRESSABILITY TO DTE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INVALID $TUCC7 OPERAND                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nBADOPRND L     R1,0(0,R5)          POINT TO INVALID OPERAND\n         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG\n         MVC   COMMAND+9(L'MSG2),MSG2 SET ERROR MESSAGE\n         LA    R0,L'MSG2+9         SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        UCC7 TASK NOT INITIALIZED                                    *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nNOUCC7   MVC   COMMAND(L'MSG3),MSG3 SET ERROR MESSAGE\n         LA    R0,L'MSG3           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n***********************************************************************\n*                                                                     *\n*        JOB INFORMATION TASK NOT INITIALIZED                         *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nNOJIT    MVC   COMMAND(L'MSG4),MSG4 SET ERROR MESSAGE\n         LA    R0,L'MSG4           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INSUFFICIENT $TUCC7 OPERANDS                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nINSUFF   MVC   COMMAND(L'MSG1),MSG1 SET ERROR MESSAGE\n         LA    R0,L'MSG1           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=990    WRITE ERROR MESSAGE\n         B     EXIT8               GET OUT\nMSG1     DC    C'INSUFFICIENT OPERANDS'\nMSG2     DC    C' INVALID OPERAND'\nMSG3     DC    C'UCC7 TASK NOT INITIALIZED'\nMSG4     DC    C'JOB INFORMATION TASK NOT INITIALIZED'\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      *\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 *\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            *\n*                                                                     *\n***********************************************************************\nEXIT0    DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nEXIT8    DS    0H\n         $FREEBUF (R9)             FREE THE WORK AREA\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n         LTORG\n         SPACE 3\nBLANKS   DC    100C' '             STRING OF BLANKS\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "J006STDS": {"ttr": 13320, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 INTERNAL TEXT STDS ENFORCEMENT EXIT'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP S.S.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED TO RUN AT CONVERTER       *\n*        TIME TO ENFORCE INSTALLATION JCL STANDARDS AND TO DETERMINE  *\n*        THE APPROPRIATE JOB CLASS BASED ON DEVICE UTILIZATION.       *\n*                                                                     *\n*        VIOLATIONS OF JCL STANDARDS ARE DOCUMENTED BY MESSAGES       *\n*        WRITTEN TO THE JES2 MESSAGE DATA SET FOR THE JOB AND         *\n*        FLAGGED FOR JCL ERROR BY THE USE OF THE JES2 EXIT RETURN     *\n*        CODE TO THE JES2 CONVERTER SUB-TASK.                         *\n*                                                                     *\n*        THIS EXIT USES THE INTERNAL TEXT DATA SET FOR ITS            *\n*        PROCESSING.  JES2 PASSES EACH INTERNAL TEXT STATEMENT        *\n*        TO THIS EXIT FOR EXAMINATION AND/OR MODIFICATION.  THE       *\n*        EXIT WILL MAINTAIN A TABLE OF DATASET NAMES AND DEVICE       *\n*        COUNTS TO BE USED AT END OF PROCESSING FOR DETERMINING       *\n*        JOB CLASS.  THE ACB FOR THE MESSAGE DATA SET IS IN THE       *\n*        DTE FOR SP 1.3.6 AND 2.1.5 AND CAN BE USED TO ISSUE          *\n*        ERROR MESSAGES TO THE JOB MESSAGE PORTION OF THE             *\n*        LISTING.                                                     *\n*                                                                     *\n*        ALSO, THE CONVERTER IS A DUMB ANIMAL WHEN IT COMES TO        *\n*        SYNTAX CHECKING.  CHECKING IS MADE FOR KEYWORD VALUES,       *\n*        BUT NONE IS MADE ON THE VALUE FOR THE KEYWORD.  IE.,         *\n*        50 CHARACTER DATA SET NAMES, 20 CHARACTER VOLUME SERIAL      *\n*        NUMBERS, AND NUMEROUS SYNTAX ERRORS CAN PASS UNDETECTED      *\n*        THROUGH THE CONVERTER.  THESE ERRORS WILL BE CAUGHT BY       *\n*        THE INTERPRETER WHEN THE JOB GOES INTO EXECUTION, BUT        *\n*        THIS EXIT MUST PROCESS THEM.  CURRENTLY, ALL ERRORS OF       *\n*        THIS TYPE WILL ISSUE A MESSAGE TO THE EFFECT OF AN INTERNAL  *\n*        ERROR AND SET THE JOB TO CLASS=A.  THE ESTAE ROUTINE,        *\n*        WHEN ENTERED FOR AN ABEND, WILL ALSO SET THE CLASS TO        *\n*        'A' AND RECOVER TO PROTECT THE CONVERSION SUBTASK FROM       *\n*        ABEND AND CONSEQUENT LOSS OF THE JOB.                        *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CLASS DETERMINATION IS MADE BY KEEPING A COUNT OF ALL        *\n*        OF THE MOUNTABLE DEVICES USED PER STEP.  THESE COUNTS        *\n*        ARE SAVED IN AN INTERNAL TABLE TO BE PROCESSED AT END        *\n*        OF INTERNAL TEXT.  ALSO SAVED IN THE TABLE ARE ENTRIES       *\n*        FOR DD STATEMENTS WHICH USED MOUNTABLE DEVICES               *\n*        FOR USE IN REFERBACKS AND UNIT=AFF.  IF THE UNIT             *\n*        HAS NOT BEEN DETERMINED AT THE END OF PROCESSING             *\n*        FOR A DD STATEMENT, THE CATALOG IS SEARCHED.  IF THE         *\n*        CATALOGED DEVICE IS SYSDA, THE UCBS ARE SEARCHED             *\n*        TO DETERMINE IF THE PACK IS MOUNTED AS PRIVATE,              *\n*        RESERVED, OR PERMANENTLY RESIDENT.  IF THE PACK              *\n*        IS NOT FOUND, A PRIV DISK MOUNT WILL BE CHARGED.             *\n*        CLASS IS SET ON THE BASIS OF THE MAXIMUM NUMBER OF TAPES     *\n*        PER STEP, MAXIMUM NUMBER OF PRIV DASD DEVICES PER STEP,      *\n*        TOTAL MAXIMUM MOUNTABLE DEVICES PER STEP, MAXIMUM REGION     *\n*        PER STEP, AND ESTIMATED EXECUTION TIME FOR JOB.              *\n*                                                                     *\n*        WHEN TESTING THIS EXIT UNDER THE TSO INTERFACE, THE LOCAL    *\n*        VARIABLE &&TSO SHOULD BE CHANGED TO 'YES' FROM 'NO' TO       *\n*        CHANGE THE $$WTO INSTRUCTIONS TO WTO INSTRUCTIONS AND        *\n*        BYPASS THE ESTAE MACROS SO THAT THE TEST COMMAND CAN         *\n*        DETERMINE THE ADDRESS OF THE ABEND.                          *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J 0 0 6 S T D S          *\n*                                                                     *\n*        01)  $$WTO        SYS1.HASPSRC                               *\n*        02)  $BUFFER      SYS1.HASPSRC                               *\n*        03)  $CAT         SYS1.HASPSRC                               *\n*        04)  $CNVWORK     SYS1.HASPSRC                               *\n*        05)  $DCT         SYS1.HASPSRC                               *\n*        06)  $DTE         SYS1.HASPSRC                               *\n*        07)  $DTECNV      SYS1.HASPSRC                               *\n*        08)  $ENTRY       SYS1.HASPSRC                               *\n*        09)  $ERA         SYS1.HASPSRC                               *\n*        10)  $HASPEQU     SYS1.HASPSRC                               *\n*        11)  $HASPGBL     SYS1.HASPSRC                               *\n*        12)  $HCT         SYS1.HASPSRC                               *\n*        13)  $JCT         SYS1.HASPSRC                               *\n*        14)  $JOE         SYS1.HASPSRC                               *\n*        15)  $JQE         SYS1.HASPSRC                               *\n*        16)  $MID         SYS1.HASPSRC                               *\n*        17)  $MIT         SYS1.HASPSRC                               *\n*        18)  $MODEND      SYS1.HASPSRC                               *\n*        19)  $MODULE      SYS1.HASPSRC                               *\n*        20)  $PADDR       SYS1.HASPSRC                               *\n*        21)  $PCE         SYS1.HASPSRC                               *\n*        22)  $TQE         SYS1.HASPSRC                               *\n*        23)  $XECB        SYS1.HASPSRC                               *\n*        24)  CAMLST       SYS1.MACLIB                                *\n*        25)  CVT          SYS1.MACLIB                                *\n*        26)  ESTAE        SYS1.MACLIB                                *\n*        27)  FREEMAIN     SYS1.MACLIB                                *\n*        28)  GETMAIN      SYS1.MACLIB                                *\n*        29)  IEFNEL       SYS1.AMODGEN                               *\n*        30)  IEFTXTFT     SYS1.AMODGEN                               *\n*        31)  IEFUCBOB     SYS1.AMODGEN                               *\n*        32)  IEFVKEYS     SYS1.AMODGEN                               *\n*        33)  IEZDEB       SYS1.AMODGEN                               *\n*        34)  IEZWPL       SYS1.AMODGEN                               *\n*        35)  IFGRPL       SYS1.MACLIB                                *\n*        36)  IHASDWA      SYS1.MACLIB                                *\n*        37)  LOCATE       SYS1.MACLIB                                *\n*        38)  RETURN       SYS1.MACLIB                                *\n*        39)  SAVE         SYS1.MACLIB                                *\n*        40)  SDUMP        SYS1.MACLIB                                *\n*        41)  SETRP        SYS1.MACLIB                                *\n*        42)  WTO          SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       20K                                              *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SET CONDITIONAL ASSEMBLY VARIABLES                           *\n*                                                                     *\n***********************************************************************\n         LCLC &TSO\n         LCLC &CAMLST\n         LCLC &ERRMSG\n         LCLC &WRNMSG\n         LCLC &STATMSG\n         LCLC &SDUMP\n         LCLC &FLUSH\n         LCLC &MODIFY\n         LCLC &UCBSEAR\n         LCLC &BINREQD\n         LCLC &ESTAE\n&TSO     SETC 'NO'                 ASSEMBLE FOR TSO TESTING\n&CAMLST  SETC 'NO'                 SEARCH CATALOG FOR DATASETS\n&ERRMSG  SETC 'YES'                PRODUCE JOBFAILED BY EXIT MESSAGE\n&WRNMSG  SETC 'YES'                PRODUCE WARNED    BY EXIT MESSAGE\n&STATMSG SETC 'NO'                 PRODUCE STATISTICS        MESSAGE\n&SDUMP   SETC 'YES'                PRODUCE CONSOLE DUMP FOR ABENDS\n&FLUSH   SETC 'YES'                FLUSH JOB FOR STANDARDS VIOLATIONS\n&MODIFY  SETC 'YES'                MODIFY JOB CLASS IN JCT AND JQE\n&UCBSEAR SETC 'NO'                 SEARCH UCBS FOR UNMOUNTED VOLUMES\n&BINREQD SETC 'NO'                 IS BIN NUMBER REQUIRED\n&ESTAE   SETC 'YES'                CREATE ESTAE ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        JES2 MACRO EXPANSIONS                                        *\n*                                                                     *\n***********************************************************************\n         COPY  $HASPGBL\nJ006STDS $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=SUBTASK,                                        X\n               TITLE='JES2 INTERNAL TEXT STDS ENFORCEMENT EXIT',       X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $CNVWORK,           GENERATE HASP CNVWORK DSECT         X\n               $DTE,               GENERATE HASP DTE DSECT             X\n               $DTECNV,            GENERATE HASP CNV DTE EXTEN         X\n               $ERA,               GENERATE HASP ERA DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $TQE,               GENERATE HASP TQE DSECT             X\n               $XECB,              GENERATE HASP EXT ECB DSECT         X\n               CVT,                GENERATE MVS  CVT DSECT             X\n               DEB,                GENERATE MVS  DEB DSECT             X\n               KEYS,               GENERATE MVS  TEXT KEYS EQUATES     X\n               NEL,                GENERATE MVS  NEL DSECT             X\n               RPL,                GENERATE MVS  RPL DSECT             X\n               SDWA,               GENERATE MVS  SDWA DSECT            X\n               TEXT,               GENERATE MVS  TEXT DSECT            X\n               UCB,                GENERATE MVS  UCB DSECT             X\n               WPL                 GENERATE MVS  WPL DSECT\n               SPACE 3\n         TITLE 'JES2 INTERNAL TEXT STDS ENFORCEMENT EXIT'\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        ACTUAL JES2 EXIT ENTRY POINT                                 *\n*                                                                     *\n***********************************************************************\nE006STDS $ENTRY  BASE=(R12,R9,R10)\n         SAVE  (14,12)             SAVE CALLERS REGISTERS\n         LR    R5,R1               SAVE INPUT PARM LIST ADDRESS\n         L     R2,12(R1)           LOAD JCT ADDRESS\n         USING JCT,R2              SET ADDRESSABILITY TO JCT\n         LR    R12,R15             ESTABLISH BASE REGISTER\n         LA    R9,2048(R12)        SET SECOND\n         LA    R9,2048(R9)             BASE REGISTER\n         LA    R10,2048(R9)        SET THIRD\n         LA    R10,2048(R10)           BASE REGISTER\n         LR    R4,R0               SAVE REG 0\n         TM    JCTJBOPT,JCTXBACH   IS THIS AN XBATCH JOB\n         BO    QUICKOUT            YES, GET OUT IMMEDIATELY\n         L     R6,4(R1)            LOAD ADDRESS OF INTERNAL TEXT RECORD\n         USING TEXT,R6             SET ADDRESSABILITY TO TEXT RECORD\n         L     R15,0(R5)           LOAD ADDRESS OF EXIT WORK AREA\n         ICM   R1,15,0(R15)        LOAD GETMAINED AREA ADDRESS (IF ONE)\n         BZ    GETMAIN             ZERO, GO DO REQUIRED GETMAINS\n         ST    R13,4(R1)           SAVE OLD SAVE ADDR IN NEW\n         ST    R1,8(R13)           SAVE NEW SAVE ADDR IN OLD\n         LR    R13,R1              SAVE NEW SAVE AND WORKAREA ADDRESS\n         USING WORKAREA,R13        SET ADDRESSABILITY\n         L     R7,SUBTABLE         RESTORE SUB TABLE AREA\n         USING SAVTABLE,R7         SET ADDRESSABILITY\n         B     ENDGETM             BYPASS GETMAINS\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GET STORAGE FOR WORK AREAS ON FIRST ENTRY TO EXIT FOR        *\n*        THE JOB                                                      *\n*                                                                     *\n***********************************************************************\nGETMAIN  DS    0H\n         LH    R0,GETLEN           LOAD GETMAIN SIZE\n         GETMAIN R,LV=(0)          GET CORE FOR DYNAMIC SAVE AREA\n         LR    R3,R1               SAVE GETMAINED ADDRESS\n         LR    R0,R1               CLEAR\n         LH    R1,GETLEN               ENTIRE\n         SLR   R15,R15                     GETMAINED\n         MVCL  R0,R14                          TO ZEROS\n         ST    R13,4(R3)           SAVE OLD SAVE ADDR IN NEW\n         ST    R3,8(R13)           SAVE NEW SAVE ADDR IN OLD\n         LR    R13,R3              SAVE NEW SAVE AND WORKAREA ADDRESS\n         L     R15,0(R5)           LOAD ADDRESS OF EXIT WORK AREA\n         ST    R13,0(R15)          SAVE GETMAINED ADDRESS IN EXIT WA\n         L     R0,F#16384          LOAD GETMAIN SIZE\n         GETMAIN R,LV=(0)          GET CORE FOR JCL TABLE\n         LR    R7,R1               SAVE GETMAIN ADDRESS\n         ST    R7,SUBTABLE         STORE ADDR OF SUB TABLE AREA\n         LR    R0,R7               CLEAR\n         L     R1,F#16384              ENTIRE\n         SLR   R15,R15                     GETMAINED\n         MVCL  R0,R14                          TO ZEROS\n         LA    R15,MSGRPL          LOAD OUTPUT RPL ADDRESS\n         ST    R15,OUTRPL          SAVE OUTPUT RPL ADDRESS\n         L     R15,8(R5)           LOAD DTE ADDRESS\n         USING DTE,R15             SET ADDRESSABILITY TO DTE\n         LA    R15,DCNVMSG         LOAD OUTPUT ACB ADDRESS\n         ST    R15,OUTACB          SAVE OUTPUT ACB ADDRESS\n         DROP  R15                 DROP ADDRESSABILITY TO DTE\nENDGETM  ST    R2,JCTADDR          SAVE JCT ADDRESS\n         ST    R5,WORKADDR         SAVE EXIT PARM LIST ADDRESS\n         ST    R6,TEXTSTAR         SAVE TEXT STARTING ADDRESS\n         L     R1,JCTJQE           LOAD JQE OFFSET\n         N     R1,$ZEROFFF         CLEAR HIGH ORDER BYTE\n         AL    R1,$JOBQPTR         GET ACTUAL JQE ADDRESS\n         ST    R1,JQEADDR          SAVE JQE ADDRESS\n         DROP  R2                  DROP ADDRESSABILITY TO JCT\n         EJECT\n***********************************************************************\n*        ESTABLISH ESTAE ENVIRONMENT                                  *\n***********************************************************************\n         MVC   ESTAEL(LESTAEL),ESTAE INITIALIZE ESTAE LIST FORM\n         STM   R14,R12,STAEREGS+12 SAVE CURRENT REGISTERS\n         LA    R1,ESTAEL           LOAD ADDRESS OF ESTAE LIST FORM\n         AIF   ('&TSO' EQ 'YES').TSO9\n         AIF   ('&ESTAE' NE 'YES').TSO9\n         ESTAE STAEXIT,CT,PARAM=(13),XCTL=NO,PURGE=NONE,ASYNCH=NO,     X\n               RECORD=YES,TERM=NO,MF=(E,(1))\n.TSO9    ANOP\n         LR    R0,R4               RESTORE REG 0\n         LTR   R0,R0               INDIVIDUAL ENTRY FOR INTERNAL TEXT\n         BZ    CHECKJCT            YES, BRANCH\n         B     EOF                 GET OUT\n         EJECT\n***********************************************************************\n*        SOME TYPES OF ERRORS DETECTED BY THE CONVERTER TURN ON BITS  *\n*        IN THE JCTCNVRC FIELD WHICH WILL FAIL THE JOB WHEN THE       *\n*        CONVERTER COMPLETES.  THESE BITS WILL BE TESTED, AND IF      *\n*        THE JOB IS TO BE FAILED, A QUICK PATH THROUGH THE EXIT       *\n*        WILL BE MADE.                                                *\n***********************************************************************\nCHECKJCT TM    JOBIND2,SEVERE      SEE IF SEVERE ERROR HAS OCCURRED\n         BO    GETNEXT             YES, IGNORE THIS ENTRY\n         L     R14,JCTADDR         LOAD JCT ADDRESS\n         USING JCT,R14             SET ADDRESSABILITY TO JCT\n         LA    R15,JCTCJCL         SET JCL ERROR IN CONVERTER RTN CODE\n         C     R15,JCTCNVRC        TEST CONVERTER RETURN CODE\n         BE    BADERROR            BAD, GO PROCESS SEVERE ERROR\n         DROP  R14                 DROP ADDRESSABILITY TO JCT\n         EJECT\n***********************************************************************\n*        WE MUST DETERMINE IF THE CURRENT STATEMENT IS THE LAST       *\n*        STATEMENT FOR THE STEP.  IF THE STATEMENT IS A DD STATEMENT  *\n*        AND IT IS THE LAST STATEMENT OF THE STEP, THE TEXT INDICATOR *\n*        WILL REFLECT LAST STATEMENT OF THE STEP.  IF, HOWEVER, THE   *\n*        CURRENT STATEMENT IS AN EXEC STATEMENT AND IT HAS NO DD      *\n*        STATEMENTS, THIS INDICATOR WILL NOT BE ON, SO WE HAVE TO     *\n*        CHECK FOR THIS CONDITION ALSO.                               *\n***********************************************************************\nRECORD1  TM    STRINDCS,LASTSTMT   LAST STMT FOR STEP?\n         BO    RECORD3             YES, BRANCH\n         TM    STRINDCS,EXECSTR    EXEC STMT?\n         BNO   RECORD2             NO, BRANCH\n         TM    STREINDC,ETXNODD    STEP HAS NO DD STMTS?\n         BO    RECORD3             TRUE, ALSO LAST STMT FOR STEP\n***********************************************************************\n*        AT THIS POINT THE STMT IS NOT THE LAST STMT FOR STEP         *\n***********************************************************************\nRECORD2  NI    EOFIND,X'FE'        TURN OFF LAST STMT IND\n         B     RECORD4             GET OUT\n***********************************************************************\n*        AT THIS POINT THE STMT IS THE LAST STMT FOR STEP             *\n***********************************************************************\nRECORD3  OI    EOFIND,ENDSTEP      TURN ON LAST STMT IND\nRECORD4  TM    STRINDCS,JOBSTR     JOB STATEMENT?\n         BO    JOBCARD             YES, BRANCH\n         TM    STRINDCS,EXECSTR    EXEC STATEMENT?\n         BO    EXECARD             YES, BRANCH\n         TM    STRINDCS,DDSTR      DD STATEMENT?\n         BO    DDCARD              YES, BRANCH\n         TM    STRINDCS,PROCSTR    PROC STATEMENT?\n         BO    GETNEXT             YES, BRANCH\n         TM    STRINDCS,JDVBSTR    JDT OUTPUT STATEMENT?\n         BO    JDTCARD             YES, BRANCH\n         LA    R15,1               SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     GETNEXT             GO GET ANOTHER STATEMENT\n         EJECT\n***********************************************************************\n*        THE TEXT OF THE JOBCARD IS AS FOLLOWS:                       *\n*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        *\n*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          *\n*            3)  3 BYTES OF MISCELLANEOUS INDICATORS                  *\n*            4)  1 BYTE INDICATOR X'B4' INDICATING JOB POS PARAMS     *\n*            5)  1 BYTE NUMBER OF POSITIONAL PARAMETERS               *\n*                1ST POS PARAM IS JOBNAME                             *\n*                2ND POS PARAM IS ACCT PARAM LIST                     *\n*                3RD POS PARAM IS PGMR NAME                           *\n*            5A) JOBNAME PRECEDED BY A 1 BYTE LENGTH FIELD            *\n*            5B) HASP ACCOUNTING PARAMETERS PRECEDED BY A             *\n*                1 BYTE LENGTH FIELD LOOKS LIKE THE FOLLOWING         *\n*                THE 1ST HALF BYTE IS '8' IF MORE THAN 1 ACCT ENTRY   *\n*                IF MORE THAN 1 ACCT ENTRY -                          *\n*                THE 2ND HALF BYTE IS THE NUMBER OF ACCT ENTRIES      *\n*                FOLLOWED BY A VARIABLE LENGTH LIST OF HASP PARAMETERS*\n*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               *\n*                IF ONLY 1 ACCT ENTRY -                               *\n*                THE 2ND HALF BYTE IS THE LENGTH OF THE ACCT ENTRY    *\n*                FOLLOWED BY THE ACCOUNTING ENTRY                     *\n*            5C) PGMR NAME PRECEDED BY A 1 BYTE LENGTH FIELD          *\n*            6)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS           *\n*                EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF   *\n*                POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF      *\n*                SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD *\n*                WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER *\n*                POSITIONAL PARAMETER.                                *\n***********************************************************************\n         EJECT\nJOBCARD  EQU   *\n***********************************************************************\n*        INITIALIZE ENTRY IN TABLE SINCE ONE MUST ALWAYS BE CREATED   *\n***********************************************************************\nJOBINIT  L     R14,JCTADDR         LOAD JCT ADDRESS\n         USING JCT,R14             SET ADDRESSABILITY TO JCT\n         MVI   ENTRYTYP,TYPJOB     SET TO JOB ENTRY\n         MVI   JENTRY,C' '         BLANK FIRST BYTE OF JOB INFO\n         MVC   JENTRY+1(30),JENTRY BLANK ENTIRE JOB INFO\n         ST    R7,LASTENT          SAVE ADDR OF LAST ENTRY IN TABLE\n         ST    R7,FIRSTENT         SAVE ADDR OF FIRST ENTRY IN TABLE\n         XC    CLASSFLD,CLASSFLD   ZERO DETERMINED JOB CLASS\n         XC    MAXTIME,MAXTIME     CLEAR MAXIMUM CPU TIME\n         TM    JCTJOBFL,JCTSTCJB   IS THIS A STARTED TASK?\n         BNO   JOBINIT1            NO, BRANCH\n         OI    JOBIND,JOBSTC       TURN ON STC INDICATOR\nJOBINIT1 TM    JCTJOBFL,JCTTSUJB   IS THIS A TSO USER?\n         BNO   JOBINIT2            NO, BRANCH\n         OI    JOBIND,JOBTSO       TURN ON TSO INDICATOR\n         DROP  R14                 DROP ADDRESSABILITY TO JCT\n***********************************************************************\n*        INITIALIZE MSG HANDLER PARAMETERS ON FIRST ENTRY             *\n***********************************************************************\nJOBINIT2 LA    R15,1               SET REG TO 1\n         ST    R15,CARDNO          SET CARD COUNT TO 1\n         XC    MSGCOUNT,MSGCOUNT   ZERO MESSAGE COUNTER\n         XC    RESOURCE,RESOURCE   CLEAR JES2 RESOURCES\n         MVI   INCLASS,C'A'        SET INPUT DEFAULT CLASS TO 'A'\n         MVI   U7TEST,C'N'         SET UCC7 LOAD JOB TO 'N' FOR NO\n         EJECT\n***********************************************************************\n*        START SCAN OF JOB CARD POSITIONAL PARAMETERS                 *\n*            1ST POS PARAM IS ACCT NUMBER UNLESS ONLY 1 ENTRY         *\n*            2ND POS PARAM IS BIN LOC UNLESS ONLY 2 ENTRIES           *\n*            3RD POS PARAM IS EST TIME UNLESS ONLY 3 ENTRIES          *\n*            LAST ENTRY IS ALWAYS PROGRAMMER NAME                     *\n***********************************************************************\nJOBSTART XC    LASTEXEC,LASTEXEC NO PREVIOUS EXEC CARD\n         LA    R2,STRJKEY          LOAD START OF TRUE TEXT\n         ST    R2,PARMADDR         SAVE START OF PARAMETER ADDRESS\n         LA    R2,1(,R2)           INCR PAST JOB POSIT PARAM KEYWORD\n         SLR   R15,R15             CLEAR REGISTER FOR IC\n         IC    R15,0(R2)           LOAD NUMBER OF POS SUBPARAMS\n         CH    R15,H#3             SEE IF THREE (JOBNAME, ACCT, PRMRNM)\n         BNL   JOBCK1              YES, BRANCH\n         TM    JOBIND,JOBSTC+JOBTSO ARE ALL PARAMETERS REQUIRED?\n         BM    JOBCK1              NO, BRANCH\n         LA    R15,2               SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBLOOP             BYPASS FIELDS\nJOBCK1   LA    R2,1(,R2)           INCR PAST NUM OF POS SUBPARAMS\nJOBNM    SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,1,0(R2)          LOAD JOB NAME LENGTH\n         BZ    JOBNM2              LENGTH ZERO, DO NOT MOVE\n         CH    R3,H#8              SEE IF LENGTH > 8\n         BNH   *+16                NO, CONTINUE\n         LA    R15,3               SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBLOOP             BYPASS FIELDS\n         MVC   JNAME,BLANKS        BLANK THE JOB NAME\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE1            MOVE JOB NAME TO SAVE TABLE\n         LA    R3,1(,R3)           RESTORE LENGTH\n         MVC   JOBNAME,JNAME       SAVE JOB NAME\n         CLC   JNAME,C#MOUNT       SEE IF MOUNT\n         BNE   JOBNM2              NO, BRANCH\n         OI    JOBIND2,MOUNT       SET MOUNT AUTHORITY\nJOBNM2   LA    R2,1(R3,R2)         INCREMENT PAST JOB NAME\n         TM    JOBIND,JOBSTC+JOBTSO ARE ACCOUNTING/PGMR NAME REQUIRED?\n         BM    JOBLOOP             NO, BRANCH\n         EJECT\nJOBACT   SLR   R4,R4               CLEAR REGISTER FOR ICM\n         ICM   R4,1,0(R2)          INSERT CONTROL BYTE\n         BNM   JOBACT1             HIGH ORDER BIT NOT ON, ONLY 1 PARAME\n         N     R4,F#127            'AND' OUT THE HIGH ORDER BIT\n         LA    R2,1(,R2)           INCREMENT PAST CONTROL BYTE\n         LTR   R4,R4               TEST NUMBER OF ACCOUNTING PARMS\n         BNZ   JOBACT2             NOT ZERO, BRANCH\n         LA    R15,29              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         AIF   ('&BINREQD' NE 'YES').BIN1\n         LA    R15,33              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n.BIN1    ANOP\n         B     JOBPGMR             BYPASS ACCOUNTING PROCESSING\nJOBACT1  LA    R4,1                SET NUMBER OF ACCOUNTING FIELDS TO 1\n         EJECT\n***********************************************************************\n*                                                                     *\n*        WE ARE CHECKING THE FIRST ACCOUNTING FIELD.  AN SVC          *\n*        WILL BE CALLED TO DO THE DETAILED VALIDATION OF THE          *\n*        VALUES.                                                      *\n*                                                                     *\n***********************************************************************\nJOBACT2  ICM   R3,1,0(R2)          LOAD PARAMETER LENGTH\n         BNZ   *+16                NOT ZERO, BRANCH\n         LA    R15,29              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBACT10            BYPASS ACCT NUM\n***********************************************************************\n*        SAVE THE JOB ACCOUNTING FIELD                                *\n***********************************************************************\nJOBACT3  BCTR  R3,0                MAKE MACHINE LENGTH\n         MVC   JACCTNO,BLANKS      BLANK JOB ACCOUNTING\n         MVC   JACCT,BLANKS        BLANK JOB ACCOUNTING\n         EX    R3,MOVE2            MOVE ACCT NUM TO SAVE TABLE\n         EX    R3,MOVE16           MOVE ACCT NUM TO WORK AREA\n         LA    R3,1(,R3)           RESTORE LENGTH\n         STC   R3,JACCTLEN         SAVE LENGTH OF ACCT NUM\n***********************************************************************\n*        CHECK THE FIRST POSITION OF THE FIRST ACCOUNTING FIELD       *\n*        FOR ONE OF THE FOLLOWING:                                    *\n*        \"S\"  - TSD - SYSTEMS SUPPORT                                 *\n*        \"O\"  - OPD - OPERATIONS                                      *\n*        \"D\"  - SDD - SYSTEMS DEVELOPMENT                             *\n*        \"F\"  - FCS - TRUE PRODUCTION                                 *\n*        REST - PSEUDO PRODUCTION                                     *\n***********************************************************************\n         CLI   JACCTNO,C'S'        SYSTEMS SUPPORT JOB?\n         BE    JOBACT4             YES, BYPASS RESOURCE SETTING\n         CLI   JACCTNO,C'O'        OPERATIONS SUPPORT JOB?\n         BE    JOBACT5             YES, BRANCH\n         CLI   JACCTNO,C'F'        PRODUCTION JOB?\n         BE    JOBACT7             YES, BRANCH\n         B     JOBACT6             MUST BE TEST\n***********************************************************************\n*                                                                     *\n*                    T E C H     S U P P O R T                        *\n*                                                                     *\n***********************************************************************\nJOBACT4  OI    JOBIND,JOBTECH      TURN ON SYSTEMS SUPPORT INDICATOR\n         B     JOBACT8             BYPASS CHECK\n***********************************************************************\n*                                                                     *\n*                      O P E R A T I O N S                            *\n*                                                                     *\n***********************************************************************\nJOBACT5  OI    JOBIND,JOBOPER      TURN ON OPERATIONS JOB INDICATOR\n         B     JOBACT8             BYPASS CHECK\n***********************************************************************\n*                                                                     *\n*                        T E S T I N G                                *\n*                                                                     *\n***********************************************************************\nJOBACT6  OI    JOBIND,JOBTEST      TURN ON TEST JOB INDICATOR\n         OI    RESOURCE,TESTING    YES, ADD 'TESTING' RESOURCE\n         B     JOBACT8             BYPASS CHECK\n***********************************************************************\n*                                                                     *\n*                     P R O D U C T I O N                             *\n*                                                                     *\n***********************************************************************\nJOBACT7  OI    JOBIND,JOBPROD      TURN ON PRODUCTION JOB INDICATOR\n         OI    RESOURCE,PROD       ADD 'PRODUCTION' RESOURCE\n***********************************************************************\n*                                                                     *\n*                     A L L    J O B S                                *\n*                                                                     *\n***********************************************************************\nJOBACT8  GETMAIN R,LV=256          GET 256 BYTE WORK AREA\n         ST    R1,ACTWORK          SAVE GETMAIN ADDRESS\n         LA    R0,JACCT            POINT TO 20 BYTE JOB ACCT FIELD\n         SVC   250                 CALL ACCOUNTING CHECK SVC\n         LR    R5,R15              SAVE RETURN CODE\n         L     R1,ACTWORK          LOAD ADDRESS OF WORK AREA\n         FREEMAIN R,LV=256,A=(1)   FREE THE WORK AREA\n         LTR   R5,R5               TEST RETURN CODE FROM ACCT RTN\n         BZ    JOBACT10            ZERO, OK\nJOBACT9  LA    R15,30              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\nJOBACT10 LA    R2,1(R3,R2)         INCREMENT PAST ACCT\n         BCTR  R4,0                REDUCE ACCOUNT PARM COUNT BY 1\n         CH    R4,H#1              SEE IF ANOTHER ACCT PARM (BIN NBR)\n         BL    JOBACT11            NO, ERROR\n         IC    R3,0(R2)            LOAD LENGTH OF BIN NUMBER\n         LTR   R3,R3               TEST LENGTH OF BIN NUMBER\n         BZ    JOBACT11            ZERO, NOT ENTERED\n         B     JOBACT12            NOT ZERO, GOOD, BRANCH\nJOBACT11 DS    0H                  SET MISSING BIN NUMBER MESSAGE\n         AIF   ('&BINREQD' NE 'YES').BIN3\n         LA    R15,33              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n.BIN3    ANOP\n         B     JOBPGMR             DONE WITH ACCOUNTING PARMS\nJOBACT12 LA    R2,1(R3,R2)         INCREMENT PAST PARM\n         IC    R3,0(R2)            LOAD LENGTH OF NEXT PARM\nJOBACT13 BCT   R4,JOBACT12         LOOP UNTIL PROCESSED ALL ACCT FIELDS\n         EJECT\n***********************************************************************\n*        SAVE THE PROGRAMMER NAME                                     *\n***********************************************************************\nJOBPGMR  ICM   R3,1,0(R2)          LOAD PGMR NAME LENGTH\n         BZ    PGMREND             ZERO LENGTH, MISSING PARAM\n         CH    R3,H#20             SEE IF LENGTH > 20\n         BNH   *+16                NO, CONTINUE\n         LA    R15,4               SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBLOOP             BYPASS FIELDS\n         CH    R3,H#10             SEE IF LENGTH > 10\n         BNH   PGMR10              IF NOT > 10, OK\n         LH    R3,H#10             MAKE LENGTH = 10\nPGMR10   BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE3            MOVE PGMR NAME TO SAVE TABLE\n         ICM   R3,1,0(R2)          RELOAD PGMR NAME LENGTH\nPGMREND  B     JOBLOOP             LOOP FOR NEXT PARAMETER\n         EJECT\n***********************************************************************\n*        WE ARE LOOKING FOR INVALID KEYWORDS OR KEYWORDS HAVING       *\n*        ILLEGAL VALUES OR OTHER THAN DEFAULT                         *\n***********************************************************************\n*\n***********************************************************************\n*        KEYWORD ENTRIES ARE NORMALLY AS FOLLOWS:                     *\n*            1)  1 BYTE HEX KEYWORD                                   *\n*            2)  1 BYTE NUMBER OF SUBPARAMETERS                       *\n*            3)  LIST OF POSITIONAL SUBPARAMETERS EACH PRECEDED BY A  *\n*                1 BYTE LENGTH FIELD                                  *\n*        THERE ARE OCCASIONS WHEN THE POSITIONAL SUBPARAMETERS WILL   *\n*        HAVE POSITIONAL SUBPARAMETERS THEMSELVES                     *\n*        THIS WILL BE FLAGGED IN THE LENGTH FIELD FOR THAT SUBPARAM   *\n*        BY A HIGH ORDER BIT IN THE FIELD.  IN THIS CASE, THIS IS NOT *\n*        A LENGTH FIELD, BUT A COUNT OF SUBPARAMETERS, WHICH WILL BE  *\n*        A LIST OF PARAMETERS, EACH PRECEDED BY A 1 BYTE LENGTH FIELD.*\n*        THUS THE ENTRY FOR A SUBPARAMETER WITH SUBPARAMETERS WILL    *\n*        APPEAR AS FOLLOWS:                                           *\n*            1)  A 1 BYTE NUMBER OF SUBPARAMS AS INDICATED BY A       *\n*                HIGH ORDER BIT                                       *\n*            2)  A LIST OF SUBPARAMETERS EACH PRECEDED BY A 1 BYTE    *\n*                LENGTH FIELD                                         *\n***********************************************************************\n*\nJOBPARMS CLI   0(R2),ENDK          END OF TEXT STRING?????\n         BNE   JCLASS              NO, BRANCH\n***********************************************************************\n*        IF THE JOB CPU TIME LIMIT WAS NOT SPECIFIED ON THE JOB       *\n*        CARD, AN INTERNAL TEXT KEY WITH 2 MINUTES OF CPU TIME        *\n*        WILL BE ADDED TO THE TEXT FOR THE JOB CARD TO SET THE        *\n*        JOBS DEFAULT TIME TO 2 MINUTES.                              *\n***********************************************************************\n         L     R15,MAXTIME         LOAD TIME FROM JOB CARD\n         LTR   R15,R15             SEE IF DEFAULT (NOT ENTERED)\n         BNZ   GETNEXT             NO, BRANCH\n         TM    JOBIND,JOBSTC+JOBTSO SEE IF STC OR TSO\n         BM    GETNEXT             YES, DO NOT RESET CPU TIME\n         MVC   MAXTIME,F#120       SET DEFAULT CPU TIME\n         MVC   0(8,R2),DEFTIME     SET DEFAULT CPU TIME TO 2\n         L     R6,TEXTSTAR         RELOAD START OF TEXT STRING\n         SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,3,STRLTH         LOAD TEXT STRING LENGTH\n         AH    R3,H#7              ADD LENGTH OF CPU TIME FIELD\n         STCM  R3,3,STRLTH         SAVE NEW STRING LENGTH\n         B     GETNEXT             YES, GO GET ANOTHER STRING\n         EJECT\n***********************************************************************\n*        JOB CLASS                                                    *\n***********************************************************************\nJCLASS   CLI   0(R2),CLASSJK       SEE IF CLASS=KEY\n         BNE   JESTIME             NO, BRANCH\n         MVC   INCLASS,3(R2)       SAVE INPUT CLASS\n         B     JOBLOOP             GO GET NEXT PARAM\n         EJECT\n***********************************************************************\n*        JOB TIME                                                     *\n***********************************************************************\nJESTIME  CLI   0(R2),TIMEJK        SEE IF TIME= KEY\n         BNE   JOBLOOP             NO, BRANCH\n         LA    R2,1(,R2)           INCREMENT PAST KEYWORD DESCR\n         SLR   R14,R14             CLEAR REGISTER FOR ICM\n         ICM   R14,1,0(R2)         INSERT NUMBER OF SUBPARAMETERS\n         BZ    JOBLOOP             NONE, IGNORE\n         LA    R2,1(,R2)           INCREMENT PAST CONTROL BYTE\n         SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,1,0(R2)          LOAD LENGTH OF FIRST TIME FIELD\n         BZ    JESTIME2            ZERO, GO PROCESS SECONDS\n         LA    R4,1(,R2)           SAVE LOCATION OF TIME\n         LR    R5,R3               SAVE LENGTH OF TIME\nJESTIME1 CLI   0(R4),C'0'          SEE IF LESS THAN ZERO\n         BL    JESTIME6            YES, NOT NUMERIC, ERROR\n         CLI   0(R4),C'9'          SEE IF GREATER THAN NINE\n         BH    JESTIME6            YES, NOT NUMERIC, ERROR\n         LA    R4,1(,R4)           INCREMENT TO NEXT DIGIT OF TIME\n         BCT   R5,JESTIME1         LOOP UNTIL DONE\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,PACK5            PACK TIME\n         LA    R3,1(R3)            MAKE TRUE LENGTH AGAIN\n         CVB   R15,DOUBLE          CONVERT TO BINARY\n         MH    R15,H#60            MULTIPLY BY 60 FOR SECONDS\n         ST    R15,MAXTIME         SAVE TIME\nJESTIME2 LA    R2,1(R3,R2)         INCREMENT TO NEXT PARM\n         BCTR  R14,0               REDUCE PARM COUNT BY 1\n         LTR   R14,R14             TEST PARM COUNT\n         BZ    JESTIME4            ZERO, DONE WITH TIME\n         SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,1,0(R2)          LOAD LENGTH OF SECOND TIME FIELD\n         BZ    JESTIME4            ZERO, DONE WITH TIME\n         LA    R4,1(,R2)           SAVE LOCATION OF TIME\n         LR    R5,R3               SAVE LENGTH OF TIME\nJESTIME3 CLI   0(R4),C'0'          SEE IF LESS THAN ZERO\n         BL    JESTIME6            YES, NOT NUMERIC, ERROR\n         CLI   0(R4),C'9'          SEE IF GREATER THAN NINE\n         BH    JESTIME6            YES, NOT NUMERIC, ERROR\n         LA    R4,1(,R4)           INCREMENT TO NEXT DIGIT OF TIME\n         BCT   R5,JESTIME3         LOOP UNTIL DONE\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,PACK5            PACK TIME\n         LA    R3,1(R3)            MAKE TRUE LENGTH AGAIN\n         CVB   R15,DOUBLE          CONVERT TO BINARY\n         A     R15,MAXTIME         ADD MINUTES TO SECONDS\n         ST    R15,MAXTIME         SAVE CPU TIME\nJESTIME4 L     R15,MAXTIME         RELOAD CPU TIME\n         LTR   R15,R15             TEST FOR ZERO TIME\n         BZ    JESTIME5            ZERO, BRANCH\n         C     R15,F#86400         SEE IF TIME = 1440 (IN SECONDS)\n         BNE   JOBLOOP             NO, BRANCH\n         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD SEE IF ALLOWED\n         BM    JOBLOOP             YES, TIME=1440 OK ON JOB CARD\n         LA    R15,7               SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBLOOP             GET OUT\nJESTIME5 MVC   MAXTIME,F#120       SET DEFAULT CPU TIME\n         B     JOBLOOP             GET OUT\nJESTIME6 LA    R15,6               SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JOBLOOP             GET OUT\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING         *\n*        PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR       *\n*        FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT      *\n*        WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER     *\n*        BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF       *\n*        SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.        *\n*        IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY    *\n*        A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH      *\n*        ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A         *\n*        SINGLE SUBPARAMETER.                                         *\n***********************************************************************\nJOBLOOP  L     R2,PARMADDR         RESTORE START OF PARAMETER ADDRESS\n         SLR   R5,R5               CLEAR REGISTER FOR ICM\n         LA    R2,1(,R2)           INCREMENT PAST KEYWORD\n         ICM   R5,1,0(R2)          LOAD SUBPARAMETER COUNT\n         BNZ   JOBLOOP1            OK, BRANCH INTO ROUTINE\n         LA    R2,1(,R2)           NONE, INCREMENT PAST COUNT\n         B     JOBLOOP5            AND GET OUT OF ROUTINE\nJOBLOOP1 LA    R2,1(,R2)           INCREMENT PAST KEYWORD DESCR\nJOBLOOP2 SLR   R4,R4               CLEAR REGISTER FOR ICM\n         ICM   R4,1,0(R2)          LOAD PARAMETER LENGTH\n         BNM   JOBLOOP3            HIGH BIT NOT ON, ONLY 1 PARAMETER\n         N     R4,F#127            'AND' OUT THE HIGH ORDER BIT\n         LA    R2,1(,R2)           INCREMENT PAST CONTROL BYTE\n         B     JOBLOOP4            BRANCH\nJOBLOOP3 LA    R4,1                SET PARAM COUNT TO 1\nJOBLOOP4 SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,1,0(R2)          LOAD PARAMETER LENGTH\n         LA    R2,1(R3,R2)         INCREMENT PAST PARM\n         BCT   R4,JOBLOOP4         LOOP UNTIL PROCESSED ALL PARMS\n         BCT   R5,JOBLOOP2         LOOP UNTIL PROCESSED ALL PARMS\nJOBLOOP5 ST    R2,PARMADDR         SAVE START OF PARAMETER ADDRESS\n         B     JOBPARMS            CONTINUE\n         EJECT\n***********************************************************************\n*        THE TEXT OF THE EXEC CARD TEXT IS AS FOLLOWS                 *\n*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        *\n*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          *\n*            3)  1 BYTE OF MISCELLANEOUS INDICATORS                   *\n*            4)  1 BYTE INDICATOR X'94' INDICATING EXEC POS INFORMATN *\n*            5)  1 BYTE NUMBER OF EXEC POSITIONAL PARAMETERS          *\n*                THE 1ST POS PARAMETER IS THE STEP NAME               *\n*                ALL OTHER POS PARAMETERS WILL BE IGNORED             *\n*            6)  VARIABLE LENGTH LIST OF EXEC POS PARAMETERS          *\n*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               *\n*            7)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS           *\n*                EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF   *\n*                POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF      *\n*                SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD *\n*                WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER *\n*                POSITIONAL PARAMETER.                                *\n***********************************************************************\n         EJECT\nEXECARD  EQU   *\n***********************************************************************\n*        UPDATE LAST EXEC TABLE (IF NEEDED) WITH UNIT INFO            *\n***********************************************************************\nEXECUPDT L     R7,LASTEXEC         LOAD ADDR OF LAST EXEC ENTRY\n         LTR   R7,R7               SEE IF ADDR = 0\n         BZ    EUPDT1              IF ZERO, NO UPDATE, BRANCH\n         MVC   ETAPES,TAPECNT      MOVE STEP TAPE UNIT CNT TO TABLE\n         MVC   EPRIVS,PRIVCNT      MOVE STEP PRIV UNIT CNT TO TABLE\n         XC    TAPECNT,TAPECNT     ZERO TAPE UNIT CNT\n         XC    PRIVCNT,PRIVCNT     ZERO PRIV UNIT CNT\n         XC    LASTEXEC,LASTEXEC   ZERO ADDR OF LAST EXEC ENTRY\nEUPDT1   TM    STREINDC,ETXPRCV    STATEMENT INVOKE A PROCEDURE?\n         BO    PROCARD             YES, BRANCH\n         EJECT\n***********************************************************************\n*        INITIALIZE NEW STEP ENTRY IN TABLE                           *\n***********************************************************************\nEXECINIT LH    R15,ENTCOUNT        LOAD TABLE ENTRY COUNT\n         LA    R15,1(,R15)         ADD 1 TO COUNT\n         CH    R15,MAXENTS         SEE IF MAXIMUM REACHED\n         BNL   TBLFULL             MAXIMUM REACHED, BAG THE JOB AND EXI\n         STH   R15,ENTCOUNT        STORE NEW ENTRY COUNT\n         L     R7,LASTENT          LOAD ADDR OF LAST ENTRY IN TABLE\n         LA    R7,ENTLEN(,R7)      INCREMENT TO NEXT ENTRY\n         ST    R7,LASTENT          SAVE ADDR OF LAST ENTRY IN TABLE\n         ST    R7,LASTEXEC         SAVE ADDR OF LAST EXEC ENTRY\n         MVI   ENTRYTYP,TYPEXEC    SET TO EXEC ENTRY\n         MVI   EENTRY,C' '         BLANK 1ST BYTE OF EXEC INFO\n         MVC   EENTRY+1(23),EENTRY BLANK MOST OF EXEC INFO\n         XC    ELIBIND(7),ELIBIND  ZERO REST OF EXEC INFO\n         MVC   EREGION,H#512       SET DEFAULT REGION SIZE TO 512K\n         TM    STREINDC,ETXPROC    STATEMENT FROM A PROC??\n         BNO   EINIT1              NO, BRANCH\n         MVC   EJSTEP,SAVEPROC     MOVE JOB STEP NAME TO TABLE\nEINIT1   TM    STREINDC,ETXSTPLB   STEP HAVE STEPLIB DD??\n         BNO   EINIT2              NO, BRANCH\n         OI    ELIBIND,ESTEPLIB    SET INDICATOR IN TABLE\nEINIT2   TM    JOBIND,JOBLIB       DOES JOB HAVE JOBLIB??\n         BNO   EXECSTAR            NO, BRANCH\n         OI    ELIBIND,EJOBLIB     SET INDICATOR IN TABLE\n         EJECT\nEXECSTAR MVC   ECARDNO,CARDNO      SAVE CARD NUMBER OF THIS STATEMENT\n         LA    R2,STREKEY          LOAD START OF TRUE TEXT\n         ST    R2,PARMADDR         SAVE START OF PARAMETER ADDRESS\nEXECPARM CLI   0(R2),ENDK          END OF TEXT STRING?????\n         BE    PROCSEAR            YES, GO SEE IF FROM A PROC\n         EJECT\n***********************************************************************\n*        EXEC STEPNAME                                                *\n***********************************************************************\nESTEPN   CLI   0(R2),EXECK         SEE IF STEPNAME KEY\n         BNE   EPGM                NO, BRANCH\n         SLR   R4,R4               CLEAR REG FOR ICM\n         ICM   R4,1,1(R2)          LOAD NUMBER OF SUBPARAMS\n         BZ    EXELOOP             ZERO, NO STEP NAME\n         SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,1,2(R2)          LOAD LENGTH OF 1ST POS SUBPARAM\n         BZ    EXELOOP             ZERO, NO STEP NAME, BRANCH\n         CH    R3,H#8              SEE IF MAX LENGTH EXCEEDED\n         BNH   *+16                NO, CONTINUE\n         LA    R15,8               SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         TM    STREINDC,ETXPROC    STATEMENT FROM A PROC\n         BO    ESTEPN1             YES, THEN NAME IS PROC STEP NAME\n         EX    R3,MOVE5            MOVE NAME TO JOBSTEP NAME\n         B     EXELOOP             BRANCH\nESTEPN1  EX    R3,MOVE6            MOVE NAME TO PROCSTEP NAME\n         B     EXELOOP             BRANCH\n         EJECT\n***********************************************************************\n*        EXEC PGM                                                     *\n***********************************************************************\nEPGM     CLI   0(R2),PGMEK         SEE IF PGM= KEY\n         BNE   EREGN               NO, BRANCH\n         SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,1,2(R2)          LOAD LENGTH OF PGM NAME\n         BZ    EXELOOP             ZERO, NULL, BRANCH\n         BM    EXELOOP             HIGH BIT ON, REFERBACK, IGNORE\n         CH    R3,H#8              SEE IF LENGTH > 8\n         BNH   *+16                NO, CONTINUE\n         LA    R15,9               SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE7            MOVE PGM NAME TO TABLE\n         SPACE\n         CLC   PGMCICS,3(R2)       Q. CICS PGM NAME ?\n         BNE   CHK7074             NO, TRY 7074\n         OI    RESOURCE+1,PCICS    YES, ATTACH 'CICS' RESOURCE\n         B     EXELOOP             & GET NEXT EXEC PARM\nCHK7074  CLC   PGM7074,3(R2)       Q. PGM NAME 7074 ?\n         BNE   CHK1401             NO, TRY 1401\n         OI    RESOURCE+1,P7074    YES,ATTACH '7074' RESOURCE\n         B     EXELOOP             & GET NEXT EXEC PARM\nCHK1401  CLC   PGM1401,3(R2)       Q. PGM NAME 1401 ?\n         BNE   CHKXMIT             NO, TRY XMISSIONS\n         OI    RESOURCE,P1401      YES, ATTACH '1401' RESOURCE\n         B     EXELOOP             & GET NEXT EXEC PARM\nCHKXMIT  CLC   PGMNDM,3(R2)        Q. PGM NAME FOR NDM   ?\n         BNE   U7LOAD              NO, GET NEXT EXEC PARM\n         OI    RESOURCE,NDM        YES, ATTACH 'NDM' RESOURCE\n         B     EXELOOP             BRANCH\nU7LOAD   CLC   PGMUC7,3(R2)        Q. PGM NAME FOR UCC7 LOAD PROG ?\n         BNE   EXELOOP             NO, GET NEXT EXEC PARM\n         MVI   U7TEST,C'Y'         MOVE TO UCC7 LOAD PROGRAM\n         B     EXELOOP             BRANCH\n         EJECT\n***********************************************************************\n*        EXEC REGION                                                  *\n***********************************************************************\nEREGN    CLI   0(R2),REGINEEK      SEE IF REGION= KEY\n         BNE   EREGN@              NO, BRANCH\n         LA    R2,1(,R2)           INCREMENT PAST KEYWORD\n         SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,1,0(R2)          LOAD SUBPARAMETER COUNT\n         BZ    EXELOOP             NO SUBPARAMETERS, BRANCH\n         LA    R2,1(,R2)           INCREMENT PAST NUMBER OF FIELDS\n         ICM   R3,1,0(R2)          LOAD LENGTH OF REGION PARAM\n         BZ    EXELOOP             ZERO, NULL, BRANCH\n         CH    R3,H#8              SEE IF MAX LENGTH EXCEEDED\n         BNH   *+16                NO, CONTINUE\n         LA    R15,10              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         CH    R3,H#3              SEE IF AT LEAST 3 CHARACTERS\n         BL    EXELOOP             NO, MAX IS 99K, IGNORE\n         LA    R15,0(R3,R2)        POINT TO LAST CHAR OF REGION SIZE\n         NI    ELIBIND,255-EREGIONK-EREGIONM TURN OFF REGION INDS\n         CLI   0(R15),C'K'         END IN 'K'\n         BE    EREGNK              YES, BRANCH\n         CLI   0(R15),C'M'         END IN 'M'\n         BE    EREGNM              YES, BRANCH\n         B     EREGN1              NO, REGION MUST BE NUMERIC\nEREGNK   BCTR  R3,0                REDUCE REGION LENGTH BY 1\n         OI    ELIBIND,EREGIONK    REMEMBER REGION SIZE IN 'K'\n         B     EREGN1              GO PROCESS NUMERIC PORTION\nEREGNM   BCTR  R3,0                REDUCE REGION LENGTH BY 1\n         OI    ELIBIND,EREGIONM    REMEMBER REGION SIZE IN 'M'\nEREGN1   LA    R4,1(,R2)           SAVE LOCATION OF REGION\n         LR    R5,R3               SAVE LENGTH OF REGION\nEREGN2   CLI   0(R4),C'0'          SEE IF LESS THAN ZERO\n         BL    EREGN5              YES, NOT NUMERIC, ERROR\n         CLI   0(R4),C'9'          SEE IF GREATER THAN NINE\n         BH    EREGN5              YES, NOT NUMERIC, ERROR\n         LA    R4,1(,R4)           INCREMENT TO NEXT DIGIT OF REGION\n         BCT   R5,EREGN2           LOOP UNTIL DONE\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,PACK1            PACK REGION SIZE\n         CVB   R15,DOUBLE          CONVERT REGION SIZE TO BINARY\n         TM    ELIBIND,EREGIONK    WAS REGION SPECIFIED IN 'K'\n         BO    EREGN4              YES, BRANCH\n         TM    ELIBIND,EREGIONM    WAS REGION SPECIFIED IN 'M'\n         BO    EREGN3              YES, BRANCH\n         SRA   R15,10              DIVIDE BY 1024 FOR 'K' VALUE\n         B     EREGN4              BRANCH\nEREGN3   SLA   R15,10              MULTIPLY BY 1024 FOR 'M' VALUE\nEREGN4   STH   R15,EREGION         STORE REGION SIZE IN TABLE\n         B     EXELOOP             BRANCH\nEREGN5   LA    R15,11              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         EJECT\n***********************************************************************\n*        EXEC REGION.                                                 *\n***********************************************************************\nEREGN@   CLI   0(R2),REGINPEK      SEE IF REGION. KEY\n         BNE   ETIME               NO, BRANCH\n         LA    R2,1(,R2)           INCREMENT PAST KEYWORD\n         SLR   R4,R4               ZERO REGISTER\n         ICM   R4,1,0(R2)          LOAD NUMBER OF SUBPARAMS\n         BNZ   *+16                NOT ZERO, BRANCH\n         LA    R15,10              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         CH    R4,H#2              CHECK NUMBER OF SUBPARAMS\n         BNH   *+16                NOT > 2, OK\n         LA    R15,10              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         LA    R2,1(,R2)           INCREMENT PAST NUMBER OF SUBPARAMETE\n         SLR   R3,R3               ZERO REGISTER\n         ICM   R3,1,0(R2)          LOAD LENGTH OF STEPNAME\n         BNZ   *+16                NOT ZERO, BRANCH\n         LA    R15,10              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         CH    R3,H#8              SEE IF MAX LENGTH EXCEEDED\n         BNH   *+16                NO, CONTINUE\n         LA    R15,10              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,COMPARE3         SEE IF OVERRIDE FOR CURRENT STEP\n         BNE   EXELOOP             NO, GET OUT\n         LA    R2,2(R2,R3)         SET REG TO START OF 2ND PARAM\n         ICM   R3,1,0(R2)          LOAD LENGTH OF 2ND PARAM\n         BZ    EXELOOP             ZERO, NULL, BRANCH\n         CH    R3,H#8              SEE IF MAX LENGTH EXCEEDED\n         BNH   *+16                NO, CONTINUE\n         LA    R15,10              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         CH    R3,H#3              SEE IF AT LEAST 3 CHARACTERS\n         BL    EXELOOP             NO, MAX IS 99K, IGNORE\n         LA    R15,0(R3,R2)        POINT TO LAST CHAR OF REGION SIZE\n         NI    ELIBIND,255-EREGIONK-EREGIONM TURN OFF REGION INDS\n         CLI   0(R15),C'K'         END IN 'K'\n         BE    EREGN@K             YES, BRANCH\n         CLI   0(R15),C'M'         END IN 'M'\n         BE    EREGN@M             YES, BRANCH\n         B     EREGN@1             NO, REGION MUST BE NUMERIC\nEREGN@K  BCTR  R3,0                REDUCE REGION LENGTH BY 1\n         OI    ELIBIND,EREGIONK    REMEMBER REGION SIZE IN 'K'\n         B     EREGN@1             GO PROCESS NUMERIC PORTION\nEREGN@M  BCTR  R3,0                REDUCE REGION LENGTH BY 1\n         OI    ELIBIND,EREGIONM    REMEMBER REGION SIZE IN 'M'\nEREGN@1  LA    R4,1(,R2)           SAVE LOCATION OF REGION\n         LR    R5,R3               SAVE LENGTH OF REGION\nEREGN@2  CLI   0(R4),C'0'          SEE IF LESS THAN ZERO\n         BL    EREGN@5             YES, NOT NUMERIC, ERROR\n         CLI   0(R4),C'9'          SEE IF GREATER THAN NINE\n         BH    EREGN@5             YES, NOT NUMERIC, ERROR\n         LA    R4,1(,R4)           INCREMENT TO NEXT DIGIT OF REGION\n         BCT   R5,EREGN@2          LOOP UNTIL DONE\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,PACK4            PACK REGION SIZE\n         CVB   R15,DOUBLE          CONVERT REGION SIZE TO BINARY\n         TM    ELIBIND,EREGIONK    WAS REGION SPECIFIED IN 'K'\n         BO    EREGN@4             YES, BRANCH\n         TM    ELIBIND,EREGIONM    WAS REGION SPECIFIED IN 'M'\n         BO    EREGN@3             YES, BRANCH\n         SRA   R15,10              DIVIDE BY 1024 FOR 'K' VALUE\n         B     EREGN@4             BRANCH\nEREGN@3  SLA   R15,10              MULTIPLY BY 1024 FOR 'M' VALUE\nEREGN@4  STH   R15,EREGION         STORE REGION SIZE IN TABLE\n         B     EXELOOP             BRANCH\nEREGN@5  LA    R15,11              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         EJECT\n***********************************************************************\n*        EXEC TIME                                                    *\n***********************************************************************\nETIME    CLI   0(R2),TIMEEEK       SEE IF TIME= KEY\n         BNE   ETIME@              NO, BRANCH\n         LA    R2,1(,R2)           INCREMENT PAST KEYWORD DESCR\n         SLR   R4,R4               CLEAR REGISTER FOR ICM\n         ICM   R4,1,0(R2)          LOAD NUMBER OF SUBPARAMETERS\n         BZ    EXELOOP             ZERO, IGNORE\n         LA    R2,1(,R2)           INCREMENT PAST CONTROL BYTE\nETIME1   SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,1,0(R2)          LOAD LENGTH OF FIRST TIME FIELD\n         CH    R3,H#4              COMPARE LENGTH TO 4\n         BL    EXELOOP             LT 4, GET OUT\n         BE    *+16                EQ 4, COMPARE\n         LA    R15,12              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         CLC   1(4,R2),C#1440      SEE IF TIME = 1440\n         BNE   EXELOOP             NO, BRANCH\n         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD SEE IF ALLOWED\n         BM    EXELOOP             YES, TIME=1440 OK ON JOB CARD\n         LA    R15,13              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         EJECT\n***********************************************************************\n*        EXEC TIME.                                                   *\n***********************************************************************\nETIME@   CLI   0(R2),TIMEPEK       SEE IF TIME. KEY\n         BNE   EXELOOP             NO, BRANCH\n         SLR   R3,R3               ZERO WORK REG\n         SLR   R4,R4               ZERO WORK REG\n         LA    R2,1(,R2)           INCREMENT PAST KEYWORD\n         ICM   R4,1,0(R2)          LOAD NUMBER OF SUBPARAMS\n         BZ    EXELOOP             NO SUBPARAMS, BRANCH\n         CH    R4,H#3              SEE IF MORE THAN 3 SUBPARAMS\n         BNH   *+16                NO, BRANCH\n         LA    R15,12              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         LA    R2,1(,R2)           INCREMENT PAST NUMBER OF SUBPARAMETE\n         CH    R4,H#2              SEE IF AT LEAST 2 SUBPARAMS\n         BL    EXELOOP             ONLY ONE, IGNORE STEPNAME\n         ICM   R3,1,0(R2)          LOAD LENGTH OF STEPNAME\n         BZ    EXELOOP             NO STEPNAME, BRANCH\n         CH    R3,H#8              SEE IF MAX LENGTH EXCEEDED\n         BNH   *+16                NO, BRANCH\n         LA    R15,12              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,COMPARE3         SEE IF CORRECT STEPNAME\n         BNE   EXELOOP             NO, GET OUT\n         LA    R2,2(R2,R3)         LOAD ADDR OF 2ND SUBPARAM\n         IC    R3,0(R2)            LOAD LENGTH OF MINUTES PORTION\n         CH    R3,H#4              COMPARE LENGTH TO 4\n         BL    EXELOOP             LT 4, GET OUT\n         BE    *+16                EQ 4, COMPARE\n         LA    R15,12              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         CLC   1(4,R2),C#1440      SEE IF TIME = 1440\n         BNE   EXELOOP             NO, BRANCH\n         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD SEE IF ALLOWED\n         BM    EXELOOP             YES, TIME=1440 OK ON EXECUTE CARD\n         LA    R15,13              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     EXELOOP             GET OUT\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING         *\n*        PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR       *\n*        FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT      *\n*        WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER     *\n*        BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF       *\n*        SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.        *\n*        IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY    *\n*        A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH      *\n*        ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A         *\n*        SINGLE SUBPARAMETER.                                         *\n***********************************************************************\nEXELOOP  L     R2,PARMADDR         RESTORE START OF PARAMETER ADDRESS\n         SLR   R5,R5               CLEAR REGISTER FOR ICM\n         LA    R2,1(,R2)           INCREMENT PAST KEYWORD\n         ICM   R5,1,0(R2)          LOAD SUBPARAMETER COUNT\n         BNZ   EXELOOP1            OK, BRANCH INTO ROUTINE\n         LA    R2,1(,R2)           NONE, INCREMENT PAST COUNT\n         B     EXELOOP5            AND GET OUT OF ROUTINE\nEXELOOP1 LA    R2,1(,R2)           INCREMENT PAST KEYWORD DESCR\nEXELOOP2 SLR   R4,R4               CLEAR REGISTER FOR ICM\n         ICM   R4,1,0(R2)          LOAD PARAMETER LENGTH\n         BNM   EXELOOP3            HIGH BIT NOT ON, ONLY 1 PARAMETER\n         N     R4,F#127            'AND' OUT THE HIGH ORDER BIT\n         LA    R2,1(,R2)           INCREMENT PAST CONTROL BYTE\n         B     EXELOOP4            BRANCH\nEXELOOP3 LA    R4,1                SET PARAM COUNT TO 1\nEXELOOP4 SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,1,0(R2)          LOAD PARAMETER LENGTH\n         LA    R2,1(R3,R2)         INCREMENT PAST PARM\n         BCT   R4,EXELOOP4         LOOP UNTIL PROCESSED ALL PARMS\n         BCT   R5,EXELOOP2         LOOP UNTIL PROCESSED ALL PARMS\nEXELOOP5 ST    R2,PARMADDR         SAVE START OF PARAMETER ADDRESS\n         B     EXECPARM            CONTINUE\n         EJECT\n***********************************************************************\n*        THE TEXT OF THE DD CARD TEXT IS AS FOLLOWS                   *\n*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        *\n*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          *\n*            3)  1 BYTE OF MISCELLANEOUS INDICATORS                   *\n*            4)  1 BYTE INDICATOR X'6E' INDICATING DD POS INFORMATION *\n*            5)  1 BYTE NUMBER OF DD POSITIONAL PARAMETERS            *\n*                THE 1ST POS PARAMETER IS THE DDNAME IF PRESENT       *\n*                ALL OTHER POS PARAMETERS WILL BE IGNORED             *\n*            6)  VARIABLE LENGTH LIST OF DD POS PARAMETERS            *\n*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               *\n*            7)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS           *\n*                EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF   *\n*                POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF      *\n*                SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD *\n*                WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER *\n*                POSITIONAL PARAMETER.                                *\n***********************************************************************\nDDCARD   TM    STRDINDC,DTXDDNM    SEE IF DD DDNAME= STATEMENT\n         BO    GETNEXT             YES, BYPASS\n         TM    STRDINDC,DTXDYNAM   SEE IF DD DYNAM STATEMENT\n         BO    GETNEXT             YES, BYPASS\n         TM    STRDINDC,DTXSYSIN   SEE IF DD INPUT SPOOL FILE\n         BO    GETNEXT             YES, BYPASS\n         EJECT\n***********************************************************************\n*        INITIALIZE TEMPORARY ENTRY WHICH WILL BE USED                *\n*        IF PRIV OR TAPE UNIT                                         *\n***********************************************************************\n         XC    UNITIND,UNITIND     ZERO UNIT TYPE IND\n         XC    DISPIND,DISPIND     ZERO DISP IND\n         MVI   UNITCOUN,X'01'      SET DEFAULT UNIT COUNT TO 1\n         MVI   TENTRY,C' '         BLANK FIRST BYTE OF TEMP ENTRY\n         MVC   TENTRY+1(58),TENTRY BLANK ENTIRE TEMP ENTRY\n         XC    TTYPE,TTYPE         ZERO TEMPORARY UNIT TYPE\n         XC    TVOLSER,TVOLSER     ZERO TEMP 1ST VOLSER\nDDSTART  LA    R2,STRDKEY          LOAD START OF TRUE TEXT\n         ST    R2,PARMADDR         SAVE START OF PARAMETER ADDRESS\n         OI    DDIND,DDBEGIN       TURN ON FIRST ENTRY INDICATOR\nDDPARM   CLI   0(R2),ENDK          END OF TEXT STRING??\n         BE    DDEND               YES, GO CHECK FOR UPDATE\n         EJECT\n***********************************************************************\n*        DD DDNAME                                                    *\n***********************************************************************\nDDDNAME  CLI   0(R2),DDK           SEE IF DDNAME KEY\n         BNE   DDDUMMY             NO, BRANCH\n         SLR   R4,R4               CLEAR REG FOR ICM\n         ICM   R4,1,1(R2)          LOAD NUMBER OF SUBPARAMS\n         BZ    DDLOOP1             ZERO, NO SUBPARAMS\n         SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,1,2(R2)          LOAD LENGTH OF DDNAME\n         BZ    DDLOOP1             YES, CONCATINATED DD, LOOP\n         CH    R3,H#8              SEE IF MAX LENGTH EXCEEDED\n         BNH   *+16                NO, CONTINUE\n         LA    R15,14              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP1             GET OUT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE8            MOVE DDNAME TO TEMP ENTRY\n         B     DDLOOP1             GO GET NEXT PARAM\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DD DUMMY                                                     *\n*                                                                     *\n*        THIS KEYWORD WILL BE IN THE INTERNAL TEXT EVEN IF            *\n*        OVERRIDDEN IN A PROCEDURE.  IT WILL BE THE FIRST             *\n*        ENTRY IN THE STRING AFTER THE DDNAME IF TRUELY A             *\n*        DUMMY FILE.  IT WILL BE LAST IF OVERRIDDEN.                  *\n*                                                                     *\n***********************************************************************\nDDDUMMY  CLI   0(R2),DUMMK         SEE IF DUMMY KEY\n         BNE   DDSNAME             NO, BRANCH\n         TM    DDIND,DDBEGIN       TEST FIRST ENTRY SWITCH\n         BO    GETNEXT             FIRST PARM, REALLY A DUMMY\n         B     DDLOOP              NOT FIRST, IGNORE IT\n         EJECT\n***********************************************************************\n*        DD DSNAME                                                    *\n***********************************************************************\nDDSNAME  CLI   0(R2),DSNAMEK       SEE IF DSNAME KEY\n         BNE   DDISP               NO, BRANCH\n         SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,1,2(R2)          LOAD LENGTH OF DSN\n         BZ    DDLOOP              ZERO, NULL, BRANCH\n         BNM   DSNSTD              HIGH BIT NOT ON, STANDARD DSN\n         CLI   4(R2),C'*'          SEE IF 1ST PARAM = * (REFERBACK)\n         BE    DSNREFBK            YES, REFERBACK\n***********************************************************************\n*        DSNAME PROBABLY A GDG                                        *\n***********************************************************************\nDSNGDG   N     R3,F#127            TURN OFF HIGH ORDER BIT\n         CH    R3,H#2              SEE IF TWO SUBPARAMS\n         BE    *+16                YES, BRANCH\n         LA    R15,15              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         LA    R4,3(,R2)           LOAD ADDR OF START OF 1ST ENTRY\n         IC    R3,0(R4)            LOAD LENGTH OF 1ST ENTRY\n         CH    R3,H#35             SEE IF MAX LENGTH EXCEEDED\n         BNH   *+16                NOT EXCEEDED, BRANCH\n         LA    R15,16              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE14           MOVE 1ST PART DSN TO TEMP ENTRY\n         LA    R3,1(,R3)           MAKE TRUE LENGTH AGAIN\n         LA    R4,1(R3,R4)         INCREMENT TO 2ND ENTRY\n         LA    R5,TDSN             LOAD ADDR OF TEMPORARY DSN\n         AR    R5,R3               LOAD ADDR WITHIN TDSN FOR GEN #\n         LR    R15,R3              SAVE LENGTH OF 1ST PART DSN\n         ICM   R3,1,0(R4)          LOAD LENGTH OF 2ND PART DSN\n         BNZ   *+16                NOT ZERO, BRANCH\n         LA    R15,15              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         AR    R15,R3              ADD NEW LENGTH OF 2ND PART TO 1ST\n         CH    R15,H#42            SEE IF TOTAL LENGTH EXCEEDS MAX\n         BNH   *+16                NO, BRANCH\n         LA    R15,16              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         MVI   0(R5),C'('          PUT PARENS FOR GEN #\n         LA    R5,1(,R5)           INCREMENT TO START TRUE GEN #\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE15           MOVE GEN # TO TDSN\n         LA    R5,1(R3,R5)         INCREMENT TO END OF TDSN FIELD\n         MVI   0(R5),C')'          FINISH PARENS FOR GEN #\n         B     DDLOOP              GO GET NEXT ENTRY\n***********************************************************************\n*        DSNAME PROBABLY A REFERBACK                                  *\n***********************************************************************\nDSNREFBK BAL   R14,REFBACK         GO TO REFERBACK RTN\n         MVC   TDSN,REFDSN         SAVE REFERBACK DSNAME\n         B     DDLOOP              GO GET NEXT ENTRY\n***********************************************************************\n*        DSNAME PROBABLY STANDARD                                     *\n***********************************************************************\nDSNSTD   CH    R3,H#44             SEE IF > MAX LENGTH\n         BNH   *+16                NO, BRANCH\n         LA    R15,16              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         CLC   3(8,R2),NULLFILE    SEE IF DSN=NULLFILE\n         BE    GETNEXT             YES, DUMMY, IGNORE STATEMENT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE9            MOVE DSN TO TEMP ENTRY\n         B     DDLOOP              GO GET NEXT ENTRY\n         EJECT\n***********************************************************************\n*        DD DISP                                                      *\n***********************************************************************\nDDISP    CLI   0(R2),DISPK         SEE IF DISP= KEYWORD\n         BNE   DUNIT               NO, BRANCH\n         SLR   R4,R4               CLEAR REG FOR ICM\n         ICM   R4,1,1(R2)          LOAD NUMBER SUBPARAMS\n         BZ    DDLOOP              ZERO, NULL, BRANCH\n         LA    R2,2(,R2)           LOAD START ADDR OF SUBPARAMS\n         CH    R4,H#3              SEE IF NUMBER > 3\n         BNH   *+16                NO, CONTINUE\n         LA    R15,17              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         SLR   R5,R5               ZERO WORK REG\nDSPLOO1  LA    R5,1(,R5)           ADD 1 TO COUNTER\n         CR    R5,R4               SEE IF ALL PROCESSED\n         BH    DISPCHK             YES, GO CHECK RESULTS\n         SLR   R3,R3               ZERO WORK REG\n         IC    R3,0(R2)            LOAD LEN OF PARAM\n         CH    R5,H#1              SEE IF 1ST PARAM\n         BE    DSPLOO2             YES, BRANCH TO PROCESS\n         CH    R5,H#2              SEE IF 2ND PARAM\n         BE    DSPLOO7             YES, BRANCH TO PROCESS\n         B     DSPLOO9             BRANCH TO PROCESS\n***********************************************************************\n*         FIRST DISP PARAMETER                                        *\n***********************************************************************\nDSPLOO2  LTR   R3,R3               SEE IF LENGTH = 0\n         BZ    DSPLOO3             YES, GO SET TO NEW\n         CLC   1(3,R2),C#NEW       SEE IF NEW\n         BNE   DSPLOO4             NO, BRANCH\nDSPLOO3  OI    DISPIND,NEW         SET TO NEW\n         B     DSPLOO14            GO GET NEXT\nDSPLOO4  CLC   1(3,R2),C#SHR       SEE IF SHR\n         BNE   DSPLOO5             NO, BRANCH\n         OI    DISPIND,SHR         SET TO SHR\n         B     DSPLOO14            GO GET NEXT\nDSPLOO5  CLC   1(3,R2),C#OLD       SEE IF OLD\n         BNE   DSPLOO6             NO, MUST BE \"MOD\", BRANCH\n         OI    DISPIND,OLD         SET TO OLD\n         B     DSPLOO14            GO GET NEXT\nDSPLOO6  OI    DISPIND,MOD         SET TO MOD\n         B     DSPLOO14            GO GET NEXT\n***********************************************************************\n*         SECOND DISP PARAMETER                                       *\n***********************************************************************\nDSPLOO7  LTR   R3,R3               SEE IF LENGTH = 0\n         BNZ   DSPLOO9             NOT ZERO, NO DEFAULT\n         TM    DISPIND,OLD         SEE IF OLD\n         BO    DSPLOO8             YES, GO SET DEFAULT TO KEEP\n         TM    DISPIND,SHR         SEE IF SHR\n         BO    DSPLOO8             YES, GO SET DEFAULT TO KEEP\n         TM    DISPIND,MOD         SEE IF MOD\n         BO    DSPLOO8             YES, GO SET DEFAULT TO KEEP\n         OI    DISPIND,DELETE      SET DEFAULT TO DELETE FOR \"NEW\"\n         B     DSPLOO14            GO GET NEXT\nDSPLOO8  OI    DISPIND,KEEP        SET TO KEEP\n         B     DSPLOO14            GO GET NEXT\n***********************************************************************\n*         THIRD DISP PARAMETER                                        *\n***********************************************************************\nDSPLOO9  LTR   R3,R3               SEE IF LENGTH = 0\n         BZ    DSPLOO14            YES, USE DEFAULT OF PREVIOUS PARAMET\n         CLC   1(4,R2),C#KEEP      SEE IF KEEP\n         BNE   DSPLOO10            NO, BRANCH\n         OI    DISPIND,KEEP        SET TO KEEP\n         B     DSPLOO14            GO GET NEXT\nDSPLOO10 CLC   1(4,R2),C#PASS      SEE IF PASS\n         BNE   DSPLOO11            NO, BRANCH\n         OI    DISPIND,PASS        SET TO PASS\n         B     DSPLOO14            GO GET NEXT\nDSPLOO11 CLC   1(5,R2),C#CATLG     SEE IF CATLG\n         BNE   DSPLOO12            NO, BRANCH\n         OI    DISPIND,CATLG       SET TO CATLG\n         B     DSPLOO14            GO GET NEXT\nDSPLOO12 CLC   1(6,R2),C#DELETE    SEE IF DELETE\n         BNE   DSPLOO13            NO, GO SET TO \"UNCATLG\"\n         OI    DISPIND,DELETE      SET TO DELETE\n         B     DSPLOO14            GO GET NEXT\nDSPLOO13 OI    DISPIND1,UNCATLG    SET TO UNCATLG\nDSPLOO14 LA    R2,1(R3,R2)         INCREMENT TO NEXT ENTRY\n         B     DSPLOO1             LOOP\n***********************************************************************\n*         CHECK RESULTS OF PROCESSING ALL DISP PARAMETERS             *\n*         IF ONLY 1 DISP PARAMETER WAS ENTERED, THE DEFAULT           *\n*         FOR THE SECOND PARAMETER MUST BE DETERMINED.                *\n***********************************************************************\nDISPCHK  CH    R4,H#1              SEE IF ONLY 1 ENTRY\n         BNE   DISPEND             NO, DO NOT SET DEFAULT\n         TM    DISPIND,OLD         SEE IF OLD\n         BO    DISPCHK2            YES, BRANCH\n         TM    DISPIND,SHR         SEE IF SHR\n         BO    DISPCHK2            YES, BRANCH\n         TM    DISPIND,MOD         SEE IF MOD\n         BO    DISPCHK2            YES, BRANCH\n***********************************************************************\n*        DISP=NEW  DEFAULT TO DELETE                                  *\n***********************************************************************\nDISPCHK1 OI    DISPIND,DELETE      SET TO DELETE\n         B     DISPEND             GET OUT\n***********************************************************************\n*        DISP=OLD, MOD, OR SHR  DEFAULT TO KEEP                       *\n***********************************************************************\nDISPCHK2 OI    DISPIND,KEEP        SET TO KEEP\nDISPEND  B     DDLOOP              GO GET NEXT PARAM\n         EJECT\n***********************************************************************\n*        DD UNIT                                                      *\n***********************************************************************\nDUNIT    CLI   0(R2),UNITK         SEE IF UNIT= PARAM\n         BNE   DAFF                NO, BRANCH\n         ICM   R4,1,1(R2)          GET NUMBER OF POS SUBPARAMS\n         BZ    DDLOOP              ZERO, NO POS SUBPARAMS\n         CH    R4,H#3              SEE IF NUMBER > 3\n         BNH   *+16                NO, CONTINUE\n         LA    R15,18              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         LA    R2,2(,R2)           LOAD START OF POS PARAMS\n         SLR   R5,R5               ZERO WORK REG\n***********************************************************************\n*        LOOP ON NUMBER OF PARAMETERS.  NOTE THAT THE FIRST           *\n*        PARAMETER (UNITNAME) AND THE SECOND PARAMETER (UNIT          *\n*        COUNT) ARE ALL WE ARE INTERESTED IN.                         *\n***********************************************************************\nUNITLOO1 LA    R5,1(,R5)           ADD 1 TO COUNT\n         CR    R5,R4               SEE IF PROCESSED ALL SUBPARAMS\n         BH    DDLOOP              YES, GO GET NEXT PARM\n         SLR   R3,R3               ZERO WORK REG\n         ICM   R3,1,0(R2)          LOAD LENGTH OF SUBPARAM\n         BZ    UNITLOO2            ZERO, GO GET NEXT SUBPARAM\n         CH    R3,H#8              SEE IF LENGTH > 8\n         BNH   *+16                NO, CONTINUE\n         LA    R15,18              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         CH    R5,H#1              SEE IF 1ST POS SUBP\n         BE    UNITNM1             YES, BRANCH\n         CH    R5,H#2              SEE IF 2ND POS SUBP\n         BE    UNITCT              YES, BRANCH\n         B     UNITLOO2            ANYTHING ELSE NOT WANTED\n***********************************************************************\n*        PROCESS UNIT NAME                                            *\n***********************************************************************\nUNITNM1  SLR   R15,R15             CLEAR REG 15\n         LA    R1,DEVTABLE         LOAD ADDR OF DEV TABLE\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         CH    R3,H#2              Q. POSSIBLE ABSOLUTE ALLOC(CUU)?\n         BNE   UNITNM2             NO, CHK FOR CLASS DEVICES\n         CLI   1(R2),C'0'          Q. CHAN NOS  NUMERIC?\n         BL    UNITNM2             NO, CAN'T BE DEDICATED DEVICE\n         OI    RESOURCE+1,DEDICATE YES, ADD 'DEDICATE' RESOURCE\n***********************************************************************\n*        SEARCH THE DEVICE TABLE FOR A MATCH ON UNIT NAME TO          *\n*        DETERMINE THE ATTRIBUTES OF THE UNIT NAME.                   *\n***********************************************************************\nUNITNM2  CLI   1(R1),X'00'         SEE IF END OF TABLE\n         BE    UNITNM3             YES, BRANCH\n         IC    R15,1(R1)           INSERT LENGTH OF UNIT NAME\n         EX    R15,COMPARE2        SEE IF UNIT NAME MATCH\n         BE    UNITNM3             YES, BRANCH\n         LA    R1,10(,R1)          INCREMENT TO NEXT ENTRY\n         B     UNITNM2             LOOP\nUNITNM3  LA    R3,1(,R3)           MAKE ORIG LENGTH\n         OC    UNITIND,0(R1)       'OR' IN THE UNIT TYPE BITS\n         B     UNITLOO2            GO PROCESS NEXT POS PARAM\nUNITCT   CLI   1(R2),C'P'          PARALLEL MOUNTING?\n         BNE   UNITCT1             NO, BRANCH\n         MVI   UNITCOUN,C'P'       SET UNIT COUNT TO 'P'\n         B     UNITLOO2\n***********************************************************************\n*        PROCESS UNIT COUNT                                           *\n***********************************************************************\nUNITCT1  LR    R15,R3              SAVE LENGTH OF UNIT COUNT\n         LA    R14,1(,R2)          LOAD ADDRESS OF UNIT COUNT\nUNITCT2  CLI   0(R14),C'0'         SEE IF NUMERIC\n         BL    UNITLOO3            NO, ERROR\n         CLI   0(R14),C'9'         SEE IF NUMERIC\n         BH    UNITLOO3            NO, ERROR\n         LA    R14,1(,R14)         INCREMENT TO NEXT CHAR UNIT COUNT\n         BCT   R15,UNITCT2         LOOP UNTIL DONE\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,PACK2            PACK UNIT COUNT\n         LA    R3,1(,R3)           MAKE ORIG LENGTH\n         CVB   R15,DOUBLE          CONVERT UNIT COUNT TO BIN\n         STC   R15,UNITCOUN        SAVE UNIT COUNT\nUNITLOO2 LA    R2,1(R3,R2)         INCREMENT TO NEXT ENTRY\n         B     UNITLOO1            GO PROCESS NEXT SUBPARAM\nUNITLOO3 LA    R15,19              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         EJECT\n***********************************************************************\n*        DD UNIT=AFF                                                  *\n***********************************************************************\nDAFF     CLI   0(R2),AFFMK         SEE IF UNIT=AFF= KEY\n         BNE   DVOL                NO, BRANCH\n         MVI   REFERBCK,C' '       BLANK START OF REFERBACK WORK AREA\n         MVC   REFERBCK+1(23),REFERBCK BLANK ENTIRE FIELD\n         LA    R2,2(,R2)           LOAD ADDR OF AFF FIELD\n         SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,1,0(R2)          LOAD LENGTH OF DDNAME\n         BZ    DDLOOP              YES, GO PROCESS NEXT PARAM\n         CH    R3,H#8              SEE IF LENGTH > 8\n         BNH   *+16                NO, CONTINUE\n         LA    R15,18              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE10           MOVE DDNAME TO REFERBACK FIELD\n         L     R7,LASTEXEC         LOAD ADDR LAST EXEC ENTRY\n         OI    UNITIND,UNITFND     SET UNIT FOUND IND\nAFFLOOP  LA    R7,ENTLEN(,R7)      INCREMENT TO NEXT DD ENTRY\n         CLI   ENTRYTYP,TYPEND     END OF TABLE?\n         BE    AFFEND              YES, BRANCH\n         CLC   REFDDN,DDDN         MATCH DDNAME?\n         BE    AFFOUND             YES, BRANCH\n         B     AFFLOOP             LOOP\nAFFOUND  OC    UNITIND,DTYPE       SET UNIT TYPE FROM PREV\n         OI    UNITIND,AFF         TURN ON FOUND BY AFF IND\nAFFEND   B     DDLOOP              GO PROCESS NEXT ENTRY\n         EJECT\n***********************************************************************\n*        DD VOL                                                       *\n***********************************************************************\nDVOL     CLI   0(R2),VOLUMEK       SEE IF VOL= KEYWORD\n         BNE   DSER                NO, BRANCH\n         ICM   R4,1,1(R2)          LOAD NUM OF SUBPARAMS\n         BZ    DDLOOP              YES, GO GET NEXT PARAM\n         CH    R4,H#4              SEE IF AT LEAST 4 PARAMS\n         BL    DDLOOP              LESS THAN 4, NONE NEEDED\n         BNH   *+16                NO, CONTINUE\n         LA    R15,20              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n***********************************************************************\n*        WE NEED ONLY THE 4TH PARAM (VOL COUNT)                       *\n***********************************************************************\n         SR    R5,R5               ZERO WORK REG\n         LA    R2,2(,R2)           LOAD START OF SUBPARAMS\nVOLOOP1  LA    R5,1(,R5)           ADD 1 TO COUNTER\n         SLR   R3,R3               CLEAR REG FOR IC\n         IC    R3,0(R2)            LOAD LENGTH OF SUBPARAM\n         CH    R5,H#4              SEE IF 4TH PARAM\n         BL    VOLOOP3             LESS THAN 4, GO GET NEXT\n         BH    VOLEND              GREATER THAN 4, GET OUT\n         LTR   R3,R3               TEST LENGTH\n         BZ    VOLEND              ZERO, GET OUT\n         CH    R3,H#8              SEE IF LENGTH > 8\n         BNH   *+16                NO, CONTINUE\n         LA    R15,20              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         LR    R15,R3              SAVE LENGTH OF VOL COUNT\n         LA    R14,1(,R2)          LOAD ADDRESS OF VOL COUNT\n***********************************************************************\n*        CHECK VOLUME COUNT FOR NUMERIC                               *\n***********************************************************************\nVOLOOP2  CLI   0(R14),C'0'         SEE IF NUMERIC\n         BL    VOLOOP4             NO, ERROR\n         CLI   0(R14),C'9'         SEE IF NUMERIC\n         BH    VOLOOP4             NO, ERROR\n         LA    R14,1(,R14)         INCREMENT TO NEXT CHAR VOL COUNT\n         BCT   R15,VOLOOP2         LOOP UNTIL DONE\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,PACK3            PACK VOLUME COUNT\n         LA    R3,1(,R3)           RESTORE LENGTH\n         CVB   R15,DOUBLE          CONVERT VOL COUNT TO BIN\n         STC   R15,VOLCNT          SAVE VOL CNT\nVOLOOP3  LA    R2,1(R3,R2)         INCRMENT TO NEXT POS SUBPARAM\n         B     VOLOOP1             LOOP\nVOLOOP4  LA    R15,21              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\nVOLEND   B     DDLOOP              GO GET NEXT PARAM\n         EJECT\n***********************************************************************\n*        DD VOL=SER                                                   *\n***********************************************************************\nDSER     CLI   0(R2),SERMK         SEE IF VOL=SER= KEYWORD\n         BNE   DREF                NO, BRANCH\n***********************************************************************\n*        ALL WE NEED IS THE NUMBER OF VOL/SER'S                       *\n*        AND THE 1ST VOLSER IN THE LIST IF PRESENT                    *\n***********************************************************************\n         ICM   R4,1,1(R2)          LOAD NUMBER OF SUBPARAMS\n         STC   R4,SERCNT           SAVE NUMBER OF VOL/SER'S\n         BZ    DDLOOP              ZERO SUBPARAMS, GET OUT\n         ICM   R3,1,2(R2)          LOAD LEN OF 1ST VOLSER\n         BZ    DDLOOP              NULL VOLSER, GET OUT\n         CH    R3,H#6              SEE IF MAX LEN EXCEEDED\n         BNH   *+16                NO, BRANCH\n         LA    R15,22              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE13           MOVE 1ST VOLSER TO SAVE\n         B     DDLOOP              GO GET NEXT PARAM\n         EJECT\n***********************************************************************\n*        DD VOL=REF                                                   *\n***********************************************************************\nDREF     CLI   0(R2),REFMK         SEE IF VOL=REF= KEYWORD\n         BNE   DINTRDR             NO, BRANCH\n         SLR   R4,R4               CLEAR REG FOR ICM\n         ICM   R4,1,2(R2)          LOAD 'LENGTH' OF REFERBACK\n         BZ    DDLOOP              ZERO LENGTH, NULL, BRANCH\n         BP    DREF00              HIGH BIT NOT ON, NOT A REFERBACK\n         BAL   R14,REFBACK         GO TO REFERBACK ROUTINE\n         OI    UNITIND,UNITFND     SET UNIT FOUND IND\n         OC    UNITIND,REFUNIT     SAVE UNIT OF PREV DD\n         MVC   TVOLSER,REFVOL      SAVE REFERBACK VOLSER\n         B     DDLOOP              GO GET NEXT PARAM\n***********************************************************************\n*        AT THIS POINT, THE REFERBACK IS PROBABLY TO A CATALOGED      *\n*        DATA SET.                                                    *\n***********************************************************************\nDREF00   CH    R4,H#44             SEE IF LENGTH OF DSNAME EXCEEDS MAX\n         BNH   *+16                NO, BRANCH\n         LA    R15,28              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         MVC   LDSN,BLANKS         BLANK DSNAME\n         BCTR  R4,0                MAKE MACHINE LENGTH\n         EX    R4,MOVE17           MOVE DSNAME TO SAVE\n         L     R7,FIRSTENT         LOAD START OF TABLE\n         LA    R7,ENTLEN(,R7)      INCREMENT PAST JOB ENTRY\nDREF01   CLI   ENTRYTYP,TYPEDD     SEE IF DD ENTRY\n         BE    DREF02              YES, GO SEE IF MATCH\n         CLI   ENTRYTYP,TYPEND     SEE IF END OF TABLE\n         BE    DREF05              NOT FOUND, GO CHECK CATALOG\n         B     DREF03              LOOP\nDREF02   CLC   DDSN,3(R2)          SEE IF SAME DSNAME\n         BE    DREF04              YES, CHARGE FOR THE DSNAME\nDREF03   LA    R7,ENTLEN(,R7)      INCREMENT TO NEXT DD ENTRY\n         B     DREF01              LOOP UNTIL DONE\nDREF04   OI    UNITIND,UNITFND     SET UNIT FOUND IND\n         OC    UNITIND,DTYPE       SAVE UNIT TYPE FROM TABLE\n         MVC   TVOLSER,DVOLSER     SAVE VOLSER FROM TABLE\n         B     DDLOOP              GO GET NEXT PARAM\nDREF05   BAL   R5,LOCATE           GO READ CATALOG\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   DDLOOP              NOT CATALOGED, IGNORE IT\n         CLC   CAMLCNT,H#0         ANY VOLUME ENTRIES?\n         BE    DDLOOP              NO, IGNORE IT\n         CLI   CAMVOL,X'00'        MAKE USER THAT THERE IS A VOLSER\n         BE    DDLOOP              NO, VSAM LIED AGAIN, IGNORE THIS ENT\n         MVC   VOLCNT,CAMLCNT+1    SAVE VOLUME COUNT\n         MVC   TVOLSER,CAMVOL      SAVE VOLSER FROM CATALOG\n         TM    UCBTYP3,X'80'       TAPE UNIT?\n         BO    DREF06              YES, BRANCH\n         BAL   R5,UCBSEAR          NO, GO SEARCH UCBS FOR PRIV MOUNT\n         B     DDLOOP              GO GET NEXT PARAM\nDREF06   OI    UNITIND,TAPE        TURN ON TAPE IND\n         B     DDLOOP              GO GET NEXT PARAM\n         EJECT\n***********************************************************************\n*        DD SYSOUT                                                    *\n***********************************************************************\nDINTRDR  CLI   0(R2),SYSOUTK       SEE IF SYSOUT= KEYWORD\n         BNE   DDLOOP              NO, BRANCH\n         SLR   R4,R4               CLEAR REG FOR ICM\n         ICM   R4,1,1(R2)          LOAD NUMBER SUBPARAMS\n         BZ    DDLOOP              NONE, BRANCH\n         SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,1,2(R2)          LOAD LENGTH OF FIRST SUBPARAM\n         CH    R4,H#2              SEE IF AT LEAST 2 SUBPARAMETERS\n         BL    DDLOOP              NO, BRANCH\n         LA    R2,3(R3,R2)         LOAD START ADDR OF SECOND SUBPARAMET\n         ICM   R3,1,0(R2)          LOAD LENGTH OF SECOND SUBPARAM\n         CH    R3,H#6              SEE IF LENGTH = 6\n         BNE   GETNEXT             NO, GET OUT\n         CLC   1(6,R2),C#INTRDR    SEE IF INTERNAL READER\n         BNE   GETNEXT             NO, BYPASS REST OF SYSOUT STATEMENT\n***********************************************************************\n*        DO NOT ALLOW INTERNAL READER                                 *\n***********************************************************************\n         TM    JOBIND,JOBPROD      SEE IF PRODUCTION\n         BNO   GETNEXT             YES, BYPASS REST OF SYSOUT STATEMENT\n         LA    R15,32              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     GETNEXT             BYPASS REST OF SYSOUT STATEMENT\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING         *\n*        PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR       *\n*        FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT      *\n*        WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER     *\n*        BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF       *\n*        SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.        *\n*        IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY    *\n*        A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH      *\n*        ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A         *\n*        SINGLE SUBPARAMETER.                                         *\n***********************************************************************\nDDLOOP   NI    DDIND,255-DDBEGIN   TURN OFF FIRST ENTRY SWITCH\nDDLOOP1  L     R2,PARMADDR         RESTORE START OF PARAMETER ADDRESS\n         SLR   R5,R5               CLEAR REGISTER FOR ICM\n         LA    R2,1(,R2)           INCREMENT PAST KEYWORD\n         ICM   R5,1,0(R2)          LOAD SUBPARAMETER COUNT\n         BNZ   DDLOOP2             OK, BRANCH INTO ROUTINE\n         LA    R2,1(,R2)           NONE, INCREMENT PAST COUNT\n         B     DDLOOP6             AND GET OUT OF ROUTINE\nDDLOOP2  LA    R2,1(,R2)           INCREMENT PAST KEYWORD DESCR\nDDLOOP3  SLR   R4,R4               CLEAR REGISTER FOR ICM\n         ICM   R4,1,0(R2)          LOAD PARAMETER LENGTH\n         BNM   DDLOOP4             HIGH BIT NOT ON, ONLY 1 PARAMETER\n         N     R4,F#127            'AND' OUT THE HIGH ORDER BIT\n         LA    R2,1(,R2)           INCREMENT PAST CONTROL BYTE\n         B     DDLOOP5             BRANCH\nDDLOOP4  LA    R4,1                SET PARAM COUNT TO 1\nDDLOOP5  SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,1,0(R2)          LOAD PARAMETER LENGTH\n         LA    R2,1(R3,R2)         INCREMENT PAST PARM\n         BCT   R4,DDLOOP5          LOOP UNTIL PROCESSED ALL PARMS\n         BCT   R5,DDLOOP3          LOOP UNTIL PROCESSED ALL PARMS\nDDLOOP6  ST    R2,PARMADDR         SAVE START OF PARAMETER ADDRESS\n         B     DDPARM              CONTINUE\n         EJECT\n***********************************************************************\n*        THIS IS WHERE WE LOOK AT WHAT WE HAVE FOUND OUT ABOUT THE    *\n*        DD STATEMENT WE HAVE JUST FINISHED PROCESSING.               *\n*        THE FOLLOWING ARE LOOKED AT                                  *\n*          1)  THE DISPOSITION FOR SOME DATA SETS                     *\n*              MUST BE AUTHORIZED FOR OTHER THAT SHR                  *\n*          2)  THE TEMPORARY ENTRY MUST BE SAVED IF UNIT IS A TAPE    *\n*              OR A PRIV UNIT.                                        *\n*          3)  IF THE ENTRY IS A TAPE OR PRIV, THE UNIT COUNT MUST BE *\n*              ADDED TO THE RUNNING COUNT FOR THE STEP.               *\n***********************************************************************\n*\n***********************************************************************\n*        DO NOT ALLOW A DISP OF \"DELETE\" FOR SYSTEM DATA SETS.        *\n***********************************************************************\nDDEND    LA    R14,SDSNTBL         LOAD ADDRESS OF SYSTEM DSNS\n         SLR   R15,R15             CLEAR REG FOR IC\nDDEND10  CLI   0(R14),X'FF'        SEE IF END OF TABLE\n         BE    DDEND40             YES, GET OUT\n         IC    R15,0(R14)          LOAD MCH LEN OF DSN\n         EX    R15,CLCSDSN         SEE IF A SYSTEM DATA SET\n         BE    DDEND20             YES, BRANCH\n         LA    R14,2(R15,R14)      INCREMENT TO NEXT TABLE ENTRY\n         B     DDEND10             LOOP\nCLCSDSN  CLC   TDSN(0),1(R14)      **** EXECUTE ONLY ****\nDDEND20  TM    DISPIND,DELETE      SEE IF DISP=DELETE\n         BNO   DDEND30             NO, BRANCH\n         TM    JOBIND,JOBSTC+JOBTECH IS JOB AUTHORIZED\n         BM    DDEND30             YES, BRANCH\n         LA    R15,23              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDEND40             GET OUT\n***********************************************************************\n*        DO NOT ALLOW A DISP OTHER THAN \"SHR\" FOR SYSTEM DATA         *\n*        SETS.                                                        *\n***********************************************************************\nDDEND30  TM    DISPIND,SHR         SEE IF DISP=SHR\n         BO    DDEND40             YES, BRANCH\n*        IF DISP NOT = SHR, MUST BE AUTHORIZED\n         TM    JOBIND,JOBSTC+JOBTECH IS JOB AUTHORIZED\n         BM    DDEND40             YES, BRANCH\n         LA    R15,23              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n***********************************************************************\n*        IF UNIT HAS NOT BEEN DETERMINED, THE UNIT TYPE MUST          *\n*        BE SEARCHED FOR IN THE FOLLOWING ORDER:                      *\n*                                                                     *\n*        1)  THE DSNAME TABLE MAINTAINED BY THIS EXIT SINCE THE       *\n*            DATASET MAY HAVE BEEN CATALOGED OR PASSED BY A           *\n*            PREVIOUS DD STATEMENT.                                   *\n*        2)  THE SYSTEM CATALOG                                       *\n*                                                                     *\n***********************************************************************\nDDEND40  CLI   UNITIND,X'00'       SEE IF UNIT HAS BEEN DETERMINED\n         BE    DDEND45             NO, BRANCH\n         CLI   TVOLSER,X'00'       SEE IF VOLSER SPECIFIED\n         BE    DDEND45             NO, GO SEARCH TABLE AND/OR CATALOG\n         TM    UNITIND,TAPE        SEE IF TAPE\n         BO    DDEND150            YES, GET OUT\n         BAL   R5,UCBSEAR          NO, GO SEARCH UCBS FOR PRIV MOUNT\n         B     DDEND150            GET OUT\nDDEND45  CLI   TDSN,C' '           SEE IF DSN SPECIFIED\n         BE    DDEND150            NOT SPECIFIED, GET OUT\n         TM    DISPIND,NEW         SEE IF THIS IS A NEW DATASET\n         BO    DDEND150            YES, VOLSER WILL BE A WORK PACK\n         L     R7,FIRSTENT         LOAD ADDR OF START OF TABLE\n***********************************************************************\n*        SEARCH THE DSNAME TABLE MAINTAINED BY THIS EXIT              *\n***********************************************************************\nDDEND50  LA    R7,ENTLEN(,R7)      INCREMENT TO NEXT ENTRY\n         CLI   ENTRYTYP,TYPEND     END OF TABLE?\n         BE    DDEND60             YES, GO CHECK CATALOG\n         TM    ENTRYTYP,TYPEDD     DD ENTRY?\n         BNO   DDEND50             NO, LOOP\n         CLC   DDSN,TDSN           DSN MATCH?\n         BNE   DDEND50             NO, LOOP\n         OC    UNITIND,DTYPE       SAVE UNIT INFO\n         MVC   TVOLSER,DVOLSER     SAVE VOLSER INFO\n         B     DDEND150            GET OUT\n***********************************************************************\n*        SEARCH CATALOG FOR UNIT INFO                                 *\n***********************************************************************\nDDEND60  DS    0H\n         AIF   ('&CAMLST' EQ 'YES').CAML1\n         B     DDEND150            BYPASS CAMLST NOP\n.CAML1   ANOP\n         CLC   TDSN(5),C#SYS1      SEE IF SYS1. DATA SET\n         BE    DDEND150            YES, NO NEED TO CAMLST\n         TM    STRDINDC,DTXSYOUT   SEE IF DD OUTPUT SPOOL FILE\n         BO    DDEND150            YES, NO NEED TO CAMLST\n         MVC   LDSN,TDSN           SAVE DSNAME\n         BAL   R5,LOCATE           GO READ CATALOG\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    DDEND70             ZERO, BRANCH\n         CH    R15,H#8             DSNAME NOT FOUND OR GDG LEVEL?\n         BE    DDEND90             YES, BRANCH\nDDEND70  CLC   CAMLCNT,H#0         ANY VOLUME ENTRIES?\n         BE    DDEND150            NO, BRANCH\n         CLI   CAMVOL,X'00'        MAKE USER THAT THERE IS A VOLSER\n         BE    DDEND150            NO, VSAM LIED AGAIN, IGNORE THIS ENT\n         MVC   VOLCNT,CAMLCNT+1    SAVE VOLUME COUNT\n         MVC   TVOLSER,CAMVOL      SAVE VOLSER FROM CATALOG\n         TM    UCBTYP3,X'80'       TAPE UNIT?\n         BO    DDEND80             YES, BRANCH\n         BAL   R5,UCBSEAR          NO, GO SEARCH UCBS FOR PRIV MOUNT\n         B     DDEND150            GET OUT\nDDEND80  OI    UNITIND,TAPE        TURN ON TAPE IND\n         B     DDEND150            BYPASS ROUTINES\n         EJECT\n***********************************************************************\n*        DATA SET NOT FOUND, MAY BE GDG LEVEL                         *\n*        DO A GENERIC LOCATE FOR THE DSNAME INDEX GIVEN               *\n***********************************************************************\nDDEND90  MVC   SVC26DS,LDSN        MOVE DSNAME TO SVC26 AREA\n         LA    R1,43               LOAD MAXIMUM LENGTH OF DSN\n         LA    R14,SVC26DS+42      LOAD ADDRESS OF END OF DSN\nDDEND100 CLI   0(R14),C' '         SEE IF LAST CHAR DSN\n         BNE   DDEND110            YES, BRANCH\n         BCTR  R14,0               BACK UP DSN POINTER 1 POSITION\n         BCT   R1,DDEND100         LOOP UNTIL FOUND\nDDEND110 LTR   R1,R1               TEST LENGTH\n         BZ    DDEND150            ZERO, NO DSN, BRANCH\n         STC   R1,SVC26DSL         SAVE LENGTH OF DSN\n         XC    CTGPL,CTGPL         ZERO PARM LIST\n         MVI   CTGPL,B'00000111'   SET CTGOPTN1\n         MVI   CTGPL+2,B'00010001' SET CTGOPTN3\n         LA    R1,SVC26DSN         LOAD ADDRESS OF DSNAME\n         ST    R1,CTGPL+4          SET CTGENT\n         XC    CTGPL+8(4),CTGPL+8  ZERO CTGCAT\n         XC    CTGPL+18(4),CTGPL+18 ZERO CTGPSWD\n         LH    R1,H#5000           LOAD LENGTH OF WORK AREA\n         STH   R1,SVC26WRK         AND SAVE IT WORK AREA\n         LA    R1,SVC26WRK         LOAD ADDRESS OF WORK AREA\n         ST    R1,CTGPL+12         SET CTGWKA\n         LA    R1,CTGPL            LOAD ADDRESS OF WORK AREA\n         SVC   26                  CALL CATALOG GENERIC SEARCH\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   DDEND150            NOT ZERO, BRANCH\n***********************************************************************\n*        FOUND DATA SETS AT THE GIVEN INDEX LEVEL.  CHECK TO SEE      *\n*        IF GDG LEVEL.                                                *\n***********************************************************************\n         LH    R14,SVC26WRK+2      LOAD LENGTH OF AREA+4\n         SH    R14,H#4             SUBTRACT LENGTH OF PREFIX\n         SRDA  R14,32              SHIFT TO ODD REGISTER OF PAIR\n         D     R14,F#45            DIVIDE BY LENGTH OF EACH ENTRY\n         LTR   R4,15               TEST NUMBER OF DSNAMES RETURNED\n         BZ    DDEND150            ZERO, NONE\n         BM    DDEND150            NEGATIVE, ERROR\n         LA    R2,SVC26WRK+4       POINT TO FIRST DSN\n         CLI   0(R2),C'B'          IS THIS A GDG BASE (VSAM CATALOG ONL\n         BE    DDEND140            YES, BRANCH\n         CLI   0(R2),C'A'          IS THIS A NONVSAM ENTRY\n         BNE   DDEND150            NO, BRANCH\n         SLR   R15,R15             ZERO, REGISTER FOR IC\n         IC    R15,SVC26DSL        LOAD BASE DSN LENGTH\n         LA    R15,2(R15,R2)       POINT PAST TYPE, BASE, AND '.'\n         CLI   0(R15),C'G'         POSSIBLE GDG\n         BNE   DDEND150            NO, BRANCH\n         CLI   5(R15),C'V'         POSSIBLE GDG\n         BNE   DDEND150            NO, BRANCH\n         CLI   8(R15),C' '         POSSIBLE GDG\n         BNE   DDEND150            NO, BRANCH\n         MVC   DOUBLE,0(R15)       SAVE DSN SUFFIX\n         OC    DOUBLE,GDGMASK      TEST NUMERIC POSITIONS\n         CLC   DOUBLE,0(R15)       SEE IF CHANGED\n         BNE   DDEND150            YES, NOT GDG, BRANCH\n         OI    UNITIND,UNITGDG     UNIT INFORMATION FROM GDG PROCESSING\n***********************************************************************\n*        LOCATE INDIVIDUAL DATA SETS RETURNED FROM THE GENERIC        *\n*        LOCATE FROM SVC26.  ALL ENTRIES ARE LOCATED TO GET THE       *\n*        VOLUME COUNT IF 'PARALLEL' MOUNTING IS REQUESTED.            *\n***********************************************************************\nDDEND120 MVC   LDSN,1(R2)          SAVE DSNAME\n         BAL   R5,LOCATE           GO READ CATALOG\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   DDEND140            NOT ZERO, SOMETHINGS WRONG, LOOP\n         CLC   CAMLCNT,H#0         ANY VOLUME ENTRIES?\n         BE    DDEND140            NO, BYPASS ENTRY\n         CLI   CAMVOL,X'00'        MAKE USER THAT THERE IS A VOLSER\n         BE    DDEND140            NO, VSAM LIED AGAIN, IGNORE THIS ENT\n         MVC   TVOLSER,CAMVOL      SAVE VOLSER FROM CATALOG\n         MVC   VOLCNT,CAMLCNT+1    SAVE VOLUME COUNT\n         TM    UCBTYP3,X'80'       TAPE UNIT?\n         BO    DDEND130            YES, BRANCH\n         BAL   R5,UCBSEAR          NO, GO SEARCH UCBS FOR PRIV MOUNT\n         B     DDEND140            GET OUT\nDDEND130 OI    UNITIND,TAPE        TURN ON TAPE IND\nDDEND140 LA    R2,45(,R2)          INCREMENT TO NEXT ENTRY\n         BCT   R4,DDEND120         LOOP UNTIL DONE\n***********************************************************************\n*        PROCESS ONLY DD STATEMENTS WHICH ARE FOR MOUNTABLE           *\n*        DEVICES.                                                     *\n***********************************************************************\nDDEND150 TM    UNITIND,TAPE        IS THIS A TAPE DD?\n         BO    DDEND160            YES, BRANCH\n         TM    UNITIND,PRIV        IS THIS A PRIV DD?\n         BNO   DDEND240            NO, DO NOT SAVE\n***********************************************************************\n*        IF THE UNIT WAS DETERMINED BY UNIT=AFF, DO NOT CHARGE        *\n*        FOR THE DEVICE BUT SAVE THE TABLE ENTRY FOR POSSIBLE         *\n*        REFERBACKS BY SUBSEQUENT STATEMENTS.                         *\n***********************************************************************\nDDEND160 TM    UNITIND,AFF         UNIT=AFF DD STATEMENT\n         BO    DDEND230            YES, DO NOT ADD TO UNIT COUNTS\n         CLI   TVOLSER,X'00'       VOLSER SPECIFIED??\n         BE    DDEND180            NO, BRANCH\n         L     R7,LASTEXEC         LOAD ADDR LAST EXEC ENTRY\n***********************************************************************\n*        SEE IF THE VOLSER WAS USED PREVIOUSLY IN THIS STEP.          *\n*        IF SO, DO NOT CHARGE FOR THE DEVICE BUT AGAIN SAVE THE       *\n*        TABLE ENTRY FOR POSSIBLE REFERBACKS BY FOLLOWING             *\n*        STATEMENTS.                                                  *\n***********************************************************************\nDDEND170 LA    R7,ENTLEN(,R7)      INCREMENT TO NEXT ENTRY\n         CLI   ENTRYTYP,TYPEND     SEE IF END OF TABLE\n         BE    DDEND180            YES, NO MATCH, BRANCH\n         CLC   TVOLSER,DVOLSER     SEE IF VOLSER ALREADY REFERENCED\n         BE    DDEND230            YES, DO NOT CHARGE FOR IT\n         B     DDEND170            LOOP\n***********************************************************************\n*        IF PARALLEL MOUNTING WAS REQUESTED, CHARGE THE GREATER       *\n*        OF THE DEVICES SPECIFIED BY THE UNITCOUNT FIELD OR THE       *\n*        NUMBER OF VOLUMES.                                           *\n***********************************************************************\nDDEND180 CLI   UNITCOUN,C'P'       SEE IF PARALLEL MOUNTING\n         BE    DDEND190            YES, BRANCH\n         MVC   ADDCOUNT,UNITCOUN   MOVE UNIT COUNT TO COMMON\n         B     DDEND210            BRANCH\nDDEND190 CLC   VOLCNT,SERCNT       COMPARE VOL COUNT & SERIAL CNT\n         BL    DDEND200            SERIAL COUNT GREATER\n         MVC   ADDCOUNT,VOLCNT     MOVE VOLUME COUNT TO COMMON\n         B     DDEND205            BRANCH\nDDEND200 MVC   ADDCOUNT,SERCNT     MOVE SERIAL COUNT TO COMMON\nDDEND205 CLI   ADDCOUNT,X'00'      SEE IF COUNT IS ZERO\n         BNE   DDEND210            NO, BRANCH\n         MVI   ADDCOUNT,X'01'      SET COUNT TO 1\n***********************************************************************\n*        ADD THE DEVICE COUNT TO THE APPROPRIATE ACCUMULATOR.         *\n***********************************************************************\nDDEND210 SLR   R15,R15             ZERO WORK REG\n         IC    R15,ADDCOUNT        MOVE UNIT COUNT TO REG\n         TM    UNITIND,TAPE        IS THIS A TAPE DD?\n         BO    DDEND220            YES, BRANCH\n         AH    R15,PRIVCNT         ADD RUNNING COUNT TO THIS ONE\n         STH   R15,PRIVCNT         SAVE NEW RUNNING COUNT\n         B     DDEND230            BRANCH\nDDEND220 AH    R15,TAPECNT         ADD RUNNING COUNT TO THIS ONE\n         STH   R15,TAPECNT         SAVE NEW RUNNING COUNT\n***********************************************************************\n*        SAVE THE CURRENT TEMPORARY ENTRY SINCE IT SPECIFIES A        *\n*        MOUNTABLE DEVICE TYPE.                                       *\n***********************************************************************\nDDEND230 OC    TTYPE,UNITIND       SAVE UNIT INFO\n         LH    R14,ENTCOUNT        LOAD TABLE ENTRY COUNT\n         LA    R14,1(,R14)         ADD 1 TO COUNT\n         CH    R14,MAXENTS         SEE IF MAXIMUM REACHED\n         BNL   TBLFULL             MAXIMUM REACHED, BAG THE JOB AND EXI\n         STH   R14,ENTCOUNT        STORE NEW ENTRY COUNT\n         L     R7,LASTENT          LOAD ADDR OF LAST ENTRY\n         LA    R7,ENTLEN(,R7)      INCREMENT TO NEXT ENTRY\n         MVI   ENTRYTYP,TYPEDD     SET ENTRY TO DD\n         MVC   DENTRY,TENTRY       MOVE TEMPORARY ENTRY TO TABLE\n         MVC   DTYPE,UNITIND       SAVE UNIT INDICATOR\n         ST    R7,LASTENT          SAVE ADDR OF LAST ENTRY\n***********************************************************************\n*        IF THE DD STATEMENT IS FOR A JOBLIB, STEPLIB, JOBCAT,        *\n*        OR A STEPCAT, THE DISPOSITION MUST BE \"SHR\".                 *\n***********************************************************************\nDDEND240 CLC   TDDN,C#JOBLIB       SEE IF JOBLIB DD\n         BE    DDEND250            YES, BRANCH\n         CLC   TDDN,C#STEPLI       SEE IF STEPLIB DD\n         BE    DDEND260            YES, BRANCH\n         CLC   TDDN,C#JOBCAT       SEE IF JOBCAT DD\n         BE    DDEND270            YES, BRANCH\n         CLC   TDDN,C#STEPCA       SEE IF STEPCAT DD\n         BE    DDEND270            YES, BRANCH\n         B     DDALLDON            NO, GET OUT\nDDEND250 OI    JOBIND,JOBLIB       TURN ON JOBLIB INDICATOR\nDDEND260 TM    DISPIND,SHR         SEE IF DISP=SHR\n         BO    DDALLDON            YES, BRANCH\n         LA    R15,27              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDALLDON            GET OUT\n***********************************************************************\n*        IF THE DD STATEMENT IS FOR A JOBCAT OR A STEPCAT, THE        *\n*        JOB MUST BE AUTHORIZED.                                      *\n***********************************************************************\nDDEND270 TM    JOBIND,JOBSTC+JOBTECH SEE IF JOBCAT/STEPCAT ALLOWED\n         BM    DDEND280            YES, BRANCH\n         LA    R15,31              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\nDDEND280 TM    DISPIND,SHR         SEE IF DISP=SHR\n         BO    DDALLDON            YES, BRANCH\n         LA    R15,27              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\nDDALLDON B     GETNEXT             GO GET NEXT TEXT RECORD\n         EJECT\n***********************************************************************\n*        THE TEXT OF THE EXEC CARD WHICH CALLS A PROC IS AS FOLLOWS   *\n*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        *\n*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          *\n*            3)  1 BYTE OF MISCELLANEOUS INDICATORS                   *\n*            4)  1 BYTE INDICATOR X'94' INDICATING EXEC POS INFORMATN *\n*            5)  1 BYTE NUMBER OF EXEC POSITIONAL PARAMETERS          *\n*                THE 1ST POS PARAMETER IS THE JOB STEP NAME           *\n*                THE 2ND POS PARAMETER IS THE PROC NAME               *\n*            6)  VARIABLE LENGTH LIST OF EXEC POS PARAMETERS          *\n*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               *\n*            7)  THE REST OF THE RECORD WILL BE IGNORED               *\n***********************************************************************\n*\n***********************************************************************\n*        THE TEXT OF THE PROC CARD WILL BE SAVED FOR SUBSEQUENT       *\n*        EXEC CARD PROCESSING.  THE STEP NAME WILL BE SAVED FROM      *\n*        THE PROC CARD AND AND A POINTER SAVED TO THE START OF        *\n*        THE FIRST KEYWORD PARM.  AFTER THE NORMAL EXEC CARD HAS      *\n*        BEEN PROCESSED, THE PROC CARD TEXT WILL BE PROCESSED         *\n*        WHICH WILL OVERRIDE ANY PREVIOUSLY PROCESSED PARAMETERS      *\n*        ON THE EXEC CARD.                                            *\n***********************************************************************\n         EJECT\n***********************************************************************\n*        SAVE THE ENTIRE TEXT OF THE EXECUTE STATEMENT WHICH          *\n*        CALLS A PROCEDURE SO THAT ALL PROC OVERRIDES MAY BE          *\n*        PROCESSED.                                                   *\n***********************************************************************\nPROCARD  EQU   *\nPROCSTAR LR    R14,R6              SAVE ADDRESS OF CURRENT RECORD\n         LH    R15,STRLTH          LOAD LENGTH OF TEXT RECORD\n         CH    R15,H#512           SEE IF LENGTH EXCEEDS 512 BYTES\n         BNH   *+16                NO, BRANCH\n         LA    R15,24              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     GETNEXT             GET OUT\n         LA    R0,PROCTXT          LOAD ADDR OF TEXT SAVE AREA\n         LR    R1,R15              LET REG 1 ALSO CONTAIN THE LENGTH\n         MVCL  R0,R14              MOVE TEXT STRING TO SAVE\n         LA    R6,PROCTXT          POINT TO START OF COPIED TEXT\n         LA    R2,STREKEY          LOAD START OF TRUE TEXT\n         ST    R2,PARMADDR         SAVE START OF PARAMETER ADDRESS\n         LA    R2,1(,R2)           INCR PAST EXEC POS IND\n         SLR   R4,R4               CLEAR REG FOR ICM\n         ICM   R4,1,0(R2)          LOAD NUMBER OF SUBPARAMETERS\n         BNZ   PROCEND1            NOT ZERO, BRANCH\n         LA    R2,1(,R2)           ZERO, INCREMENT PAST COUNT\n         B     PROCEND3            GET OUT\n***********************************************************************\n*        SAVE THE PROC STEP NAME                                      *\n***********************************************************************\nPROCEND1 LA    R2,1(,R2)           INCREMENT PAST COUNT\n         MVI   SAVEPROC,C' '       MOVE BLANK TO 1ST POS SAVE\n         MVC   SAVEPROC+1(7),SAVEPROC BLANK ENTIRE STEP NAME SAVE\n         SLR   R3,R3               CLEAR REG FOR ICM\n         ICM   R3,1,0(R2)          LOAD LENGTH OF JOB STEP NAME\n         BZ    PROCEND2            IF ZERO, NO JOB STEP NAME\n         CH    R3,H#8              SEE IF LENGTH > 8\n         BNH   *+16                NO, CONTINUE\n         LA    R15,25              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     GETNEXT             GET OUT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         EX    R3,MOVE4            MOVE STEP NAME TO SAVE AREA\nPROCEND2 ICM   R3,1,0(R2)          LOAD LENGTH OF SUBPARAMETER\n         LA    R2,1(R3,R2)         INCREMENT TO NEXT SUBPARAMETER\n         BCT   R4,PROCEND2         LOOP UNTIL DONE\n***********************************************************************\n*        SAVE POINTER TO THE FIRST KEYWORD ON THE STATEMENT           *\n***********************************************************************\nPROCEND3 ST    R2,PROCTEXT         SAVE ADDRESS OF FIRST KEYWORD PARM\n         B     GETNEXT             GET OUT\n         EJECT\n***********************************************************************\n*        IF THE CURRENT EXECUTE STATEMENT IS FROM A PROCEDURE,        *\n*        LOAD THE ADDRESS OF THE PREVIOUS STATEMENT WHICH CALLED      *\n*        THE PROCEDURE AND RETURN TO THE EXECUTE CARD PROCESSOR       *\n*        TO PROCESS THE OVERRIDES WHICH MAY HAVE BEEN ENTERED         *\n*        ON THAT STATEMENT.                                           *\n***********************************************************************\nPROCSEAR TM    STREINDC,ETXPROC    STATEMENT FROM A PROCEDURE?\n         BNO   GETNEXT             NO, GET OUT\n         XI    PROCIND,X'01'       FLIP-FLOP SWITCH\n         BZ    GETNEXT             NOW ZERO, ALREADY PROCESSED PROC TEX\n         L     R2,PROCTEXT         LOAD ADDR OF PROC TEXT\n         ST    R2,PARMADDR         SAVE START OF PARAMETER ADDRESS\n         B     EXECPARM            GO PROCESS ADDITIONAL TEXT\n         EJECT\n***********************************************************************\n*        THE TEXT OF THE JDT OUTPUT STATEMENT IS AS FOLLOWS           *\n*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        *\n*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          *\n*            3)  1 BYTE OF MISCELLANEOUS INDICATORS                   *\n*            4)  1 BYTE INDICATOR X'BE' INDICATING JDT VERB (OUTPUT)  *\n*            5)  1 BYTE NUMBER OF POSITIONAL PARAMETERS               *\n*                THE 1ST POS PARAMETER IS 'OUTPUT'                    *\n*                THE 2ND POS PARAMETER IS THE OUTPUT NAME             *\n*            6)  VARIABLE LENGTH LIST OF KEYWORDS AND VALUES          *\n*                1 BYTE INDICATOR X'1A' INDICATING JDT KEYWORD        *\n*                1 BYTE NUMBER OF PARAMETERS IN KEYWORD               *\n*                1 BYTE PARAMETER LENGTH FOLLOWED BY THE PARAMETER    *\n*                       FOR EACH OF THE KEYWORD PARAMETERS            *\n***********************************************************************\n         EJECT\n***********************************************************************\n*        THE JDT STATEMENT IS CURRENTLY USED TO PROCESS THE           *\n*        OUTPUT STATEMENT.  ANY SUCH STATEMENT IS ASSUMED TO          *\n*        BE FOR AN OUTPUT JCL CARD AND DOES NOT TAKE THE TIME         *\n*        TO CHECK THE JDT VERB TO VERIFY THAT FACT.  THE JDT          *\n*        KEYS ARE SCANNED FOR A CLASS KEYWORD TO VERIFY THE           *\n*        JOBS AUTHORITY TO USE PRODUCTION CLASSES.                    *\n***********************************************************************\nJDTCARD  EQU   *\nJDTSTART LA    R2,STRSKEY          LOAD START OF TRUE TEXT\n         ST    R2,PARMADDR         SAVE START OF PARAMETER ADDRESS\nJDTPARM  CLI   0(R2),ENDK          END OF TEXT STRING??\n         BE    JDTEND              YES, GET OUT\n         EJECT\n***********************************************************************\n*        JDT VERB                                                     *\n***********************************************************************\nJDTVERB  CLI   0(R2),JDTVERBK      SEE IF JDT VERB KEY\n         BE    JDTLOOP             YES, IGNORE IT\n         EJECT\n***********************************************************************\n*        JDT KEYWORD                                                  *\n***********************************************************************\nJDTKEY   CLI   0(R2),JDTKWDK       SEE IF JDT KEYWORD KEY\n         BNE   JDTLOOP             NO, UNKNOWN BUT IGNORE IT\n         EJECT\n***********************************************************************\n*        CHECK JDT KEYWORD FOR SYSOUT CLASS                           *\n***********************************************************************\nJDTCLASS CLI   1(R2),X'02'         DO BOTH KEYWORD AND VALUE EXIST\n         BNE   JDTLOOP             NO, IGNORE\n         CLI   2(R2),X'04'         SEE IF LENGTH OF KEYWORD IS 4\n         BNE   JDTLOOP             NO, CANNOT BE \"PRTY\"\n         CLC   3(4,R2),C#PRTY       SEE IF PRTY KEYWORD\n         BNE   JDTLOOP             NO, IGNORE THIS KEYWORD\n         B     JDTLOOP             ***** BYPASS *****\n         TM    JOBIND,JOBTECH+JOBPROD+JOBSTC+JOBOPER\n         BM    JDTLOOP             YES, NOT AN ERROR\n         LA    R15,34              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     JDTLOOP             LOOP TO NEXT PARAMETER\n         EJECT\n***********************************************************************\n*        THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING         *\n*        PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR       *\n*        FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT      *\n*        WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER     *\n*        BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF       *\n*        SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.        *\n*        IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY    *\n*        A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH      *\n*        ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A         *\n*        SINGLE SUBPARAMETER.                                         *\n***********************************************************************\nJDTLOOP  L     R2,PARMADDR         RESTORE START OF PARAMETER ADDRESS\n         SLR   R5,R5               CLEAR REGISTER FOR ICM\n         LA    R2,1(,R2)           INCREMENT PAST KEYWORD\n         ICM   R5,1,0(R2)          LOAD SUBPARAMETER COUNT\n         BNZ   JDTLOOP1            OK, BRANCH INTO ROUTINE\n         LA    R2,1(,R2)           NONE, INCREMENT PAST COUNT\n         B     JDTLOOP5            AND GET OUT OF ROUTINE\nJDTLOOP1 LA    R2,1(,R2)           INCREMENT PAST KEYWORD DESCR\nJDTLOOP2 SLR   R4,R4               CLEAR REGISTER FOR ICM\n         ICM   R4,1,0(R2)          LOAD PARAMETER LENGTH\n         BNM   JDTLOOP3            HIGH BIT NOT ON, ONLY 1 PARAMETER\n         N     R4,F#127            'AND' OUT THE HIGH ORDER BIT\n         LA    R2,1(,R2)           INCREMENT PAST CONTROL BYTE\n         B     JDTLOOP4            BRANCH\nJDTLOOP3 LA    R4,1                SET PARAM COUNT TO 1\nJDTLOOP4 SLR   R3,R3               CLEAR REGISTER FOR ICM\n         ICM   R3,1,0(R2)          LOAD PARAMETER LENGTH\n         LA    R2,1(R3,R2)         INCREMENT PAST PARM\n         BCT   R4,JDTLOOP4         LOOP UNTIL PROCESSED ALL PARMS\n         BCT   R5,JDTLOOP2         LOOP UNTIL PROCESSED ALL PARMS\nJDTLOOP5 ST    R2,PARMADDR         SAVE START OF PARAMETER ADDRESS\n         B     JDTPARM             CONTINUE\nJDTEND   B     GETNEXT             GO GET NEXT TEXT RECORD\n         EJECT\n***********************************************************************\n*                                                                     *\n*                         L O C A T E                                 *\n*                                                                     *\n*        ISSUE THE LOCATE MACRO TO OBTAIN THE REQUESTED UNIT TYPE     *\n*        AND VOLSER INFORMATION.                                      *\n*                                                                     *\n***********************************************************************\nLOCATE   LA    R15,68              LOAD OPTION VALUE\n         SLL   R15,24              SHIFT OPTION TO HIGH BYTE\n         ST    R15,CAMLST          STORE INTO CAMLST AREA\n         LA    R15,LDSN            LOAD ADDR OF DSN\n         ST    R15,CAMLST+4        STORE INTO CAMLST AREA\n         XC    CAMLST+8(4),CAMLST+8 ZERO 3RD PARAM CAMLST AREA\n         XC    LOCAREA(12),LOCAREA CLEAR FIRST PART OF THE WORK AREA\n         LA    R15,LOCAREA         LOAD ADDR OF LOCATE WORK AREA\n         ST    R15,CAMLST+12       STORE INTO CAMLST AREA\n         LOCATE CAMLST             READ CATALOG\n         BR    R5                  RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*                         U C B S E A R                               *\n*                                                                     *\n*        SEARCH THE SYSTEM UCBS TO SEE IF THE REQUESTED DASD VOLUME   *\n*        IS MOUNTED OR ONLY MOUNTED PRIVATE IN WHICH CASE IT WILL     *\n*        BE DISMOUNTED AT END OF JOB.  IF NOT FOUND OR PRIVATE, IT    *\n*        IS A 'PRIV' UNIT.                                            *\n*                                                                     *\n***********************************************************************\nUCBSEAR  DS    0H\n         AIF   ('&UCBSEAR' EQ 'YES').UCBS1\n         BR    R5                  RETURN TO CALLER\n         AGO   .UCBS2\n.UCBS1   ANOP\n         SPACE 3\n*        SCAN UCB TABLE\n         SPACE 1\n         STM   R14,R12,SAVEREGS    SAVE REGISTERS\n         L     R1,CVTPTR           GET CVT ADDRESS\n         L     R6,CVTUCBSC-CVT(R1) POINT TO UCB SCAN SERVICE RTN\n         ST    R6,IOSVSUCB         SAVE ADDR OF UCB SCAN ROUTINE\n         MVI   DEVCLASS,UCB3DACC   SET FOR DASD UCBS ONLY\n         LA    R1,SCANWORK         LOAD ADDRESS OF SCAN WORK AREA\n         ST    R1,SCANP1           SAVE IN PARM LIST\n         LA    R1,DEVCLASS         LOAD ADDRESS OF DEVICE CLASS\n         ST    R1,SCANP2           SAVE IN PARM LIST\n         LA    R1,UCBADDR          LOAD ADDRESS OF UCB RETURN\n         ST    R1,SCANP3           SAVE IN PARM LIST\n         OI    SCANP3,X'80'        TURN ON HIGH ORDER BIT\n         XC    SCANWORK,SCANWORK   CLEAR SCAN SERVICE WORK AREA\nUCBSEAR1 L     R15,IOSVSUCB        LOAD ADDR OF UCB SCAN ROUTINE\n         LA    R1,SCANPARM         LOAD ADDRESS OF UCB SCAN PARM\n         BALR  R14,R15             GO TO UCB SCAN SERVICE ROUTINE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   UCBSEAR2            NOT ZERO, END OF UCBS\n         L     R2,UCBADDR          LOAD UCB ADDRESS\n         USING UCBCMSEG,R2         SET ADDRESSABILITY TO UCB\n         TM    UCBTBYT3,UCB3DACC   DIRECT ACCESS?\n         BZ    UCBSEAR1            NO\n         TM    UCBSTAT,UCBONLI     ONLINE?\n         BNO   UCBSEAR1            NO, IGNORE DEVICE\n         TM    UCBVOLI,X'FF'       ANY NAME?\n         BZ    UCBSEAR1            NO, IGNORE IT\n         CLC   TVOLSER,UCBVOLI     SEE IF OUR VOLSER\n         BE    UCBSEAR3            YES, FOUND IT\n         B     UCBSEAR1            NO, LOOK AT ANOTHER UCB\nUCBSEAR2 OI    UNITIND,PRIV        SINCE VOLUME NOT MOUNTED, PRIV\n         MVC   WTOLIST(LWTO5),WTO5 SET WTO LIST FORM\n         MVC   WTOLIST+34(6),TVOLSER SET VOLSER IN MESSAGE\n         MVC   WTOLIST+63(8),JOBNAME SET JOBNAME IN MESSAGE\n         AIF   ('&TSO' NE 'YES').TSO12\n         WTO   MF=(E,WTOLIST)\n         AGO   .TSO13\n.TSO12   ANOP\n         $$WTO WTOLIST             WRITE ERROR MESSAGE\n.TSO13   ANOP\n         B     GETNEXT             SKIP PROCESSING OF THIS STATEMENT\n         $MID  905\nWTO5     WTO   '&MID.REQUIRED DASD VOLUME XXXXXX NOT AVAILABLE FOR JOB X\n               XXXXXXXX',ROUTCDE=(2),DESC=(4),MF=L\nLWTO5    EQU   *-WTO5\nUCBSEAR3 LM    R14,R12,SAVEREGS    RESTORE REGISTERS\n         BR    R5                  RETURN TO CALLER\n         DROP  R2                  DROP ADDRESSABILITY TO UCB\n.UCBS2   ANOP\n         EJECT\n***********************************************************************\n*        UPDATE LAST EXEC TABLE (IF NEEDED) WITH UNIT INFO            *\n***********************************************************************\nEOF      TM    JOBIND,JOBFAIL      WAS JOB FAILED BY EXIT?\n         BO    JOBERROR            YES, BRANCH\n         L     R7,LASTEXEC         LOAD ADDR OF LAST EXEC ENTRY\n         LTR   R7,R7               SEE IF ADDR = 0\n         BZ    EOF1                IF ZERO, NO UPDATE, BRANCH\n         MVC   ETAPES,TAPECNT      MOVE STEP TAPE UNIT CNT TO TABLE\n         MVC   EPRIVS,PRIVCNT      MOVE STEP PRIV UNIT CNT TO TABLE\n         XC    TAPECNT,TAPECNT     ZERO TAPE UNIT CNT\n         XC    PRIVCNT,PRIVCNT     ZERO PRIV UNIT CNT\n         EJECT\n***********************************************************************\n*        THIS ROUTINE SEARCHES THE TABLE SAVED FOR JOB, EXEC AND DD   *\n*        ENTRIES TO DETERMINE THE MAXIMUM RESOURCES USED BY THE JOB   *\n*        THIS INFORMATION WILL BE USED TO COMPARE AGAINST A CLASS     *\n*        TABLE TO DETERMINE THE CLASS WHICH SHOULD BE SET FOR THE JOB.*\n***********************************************************************\nEOF1     MVC   STEPM,MSG0          INITIALIZE STEP MESSAGE\n         MVC   JOBM,MSG1           INITIALIZE JOB CLASS MESSAGE\n         MVC   JOBMSG(10),BLANKS   BLANK MESSAGE PREFIX\n         XC    STEPCNTR,STEPCNTR   ZERO STEP COUNTER FIELD\n         XC    MAXTAPE,MAXTAPE     ZERO MAX FIELD\n         XC    MAXPRIV,MAXPRIV     ZERO MAX FIELD\n         XC    MAXTOTAL,MAXTOTAL   ZERO MAX FIELD\n         XC    MAXREGN,MAXREGN     ZERO MAX FIELD\n         L     R7,FIRSTENT         LOAD START OF TABLE\n         CLC   ENTLEN(2,R7),H#0    SEE IF ONLY JOB ENTRY\n         BE    JOBERROR            ZEROS, NO OTHER ENTRIES, FLUSH JOB\nEOFLOOP1 CLI   ENTRYTYP,TYPJOB     SEE IF JOB ENTRY\n         BE    EOFLOOP2            YES, BRANCH\n         CLI   ENTRYTYP,TYPEXEC    SEE IF EXEC ENTRY\n         BE    EOFEXEC             YES, BRANCH\n         CLI   ENTRYTYP,TYPEND     SEE IF END OF TABLE\n         BE    EOFSCAN             YES, BRANCH\n         B     EOFLOOP2            LOOP\n***********************************************************************\n*        PRODUCE A STEP RESOURCE STATISTICS MESSAGE FOR EACH STEP     *\n*        TO BE WRITTEN TO THE JES2 MESSAGE DATA SET.                  *\n***********************************************************************\nEOFEXEC  LH    R4,STEPCNTR         LOAD STEP COUNTER\n         LA    R4,1(R4)            ADD ONE TO STEP COUNTER\n         STH   R4,STEPCNTR         SAVE STEP COUNTER\n         L     R4,ECARDNO          LOAD CARD NUMBER\n         CVD   R4,DOUBLE           CONVERT CARD NUMBER TO PACKED\n         MVC   STEPMSG-1(11),PREFIX MOVE MSG PREFIX TO MESSAGE\n         ED    STEPMSG-1(6),DOUBLE+5 EDIT CARD NUMBER TO PREFIX\n         MVC   STEPM+8(8),EJSTEP   MOVE JOB STEP TO MESSAGE\n         MVC   STEPM+17(8),EPSTEP  MOVE PROC STEP TO MESSAGE\n         LH    R4,ETAPES           LOAD NUMBER OF TAPES FOR STEP\n         CVD   R4,DOUBLE           CONVERT TO PACKED\n         MVC   STEPM+32(6),EDMASK  SET MESSAGE EDIT MASK\n         ED    STEPM+32(6),DOUBLE+5 EDIT NUMBER OF TAPES TO MESSAGE\n         LH    R4,EPRIVS           LOAD NUMBER OF PACK MOUNTS FOR STEP\n         CVD   R4,DOUBLE           CONVERT TO PACKED\n         MVC   STEPM+45(6),EDMASK  SET MESSAGE EDIT MASK\n         ED    STEPM+45(6),DOUBLE+5 EDIT NUMBER OF PACK MOUNTS TO MSG\n         LH    R4,EREGION          LOAD REGION SIZE FOR STEP\n         CVD   R4,DOUBLE           CONVERT TO PACKED\n         MVC   STEPM+59(6),EDMASK  SET MESSAGE EDIT MASK\n         ED    STEPM+59(6),DOUBLE+5 EDIT REGION SIZE TO MESSAGE\n         L     R4,MAXTIME          LOAD MAXIMUM CPU JOB CPU TIME\n         CVD   R4,DOUBLE           CONVERT TO PACKED\n         MVC   STEPM+73(6),EDMASK  SET MESSAGE EDIT MASK\n         ED    STEPM+73(6),DOUBLE+5 EDIT JOB TIME TO MESSAGE\n         LA    R15,STEPMSG         LOAD ADDRESS OF STEP MESSAGE\n         AIF   ('&STATMSG' NE 'YES').STATMSG\n         BAL   R14,MSGRTN          GO PUT MSG TO JES MESSAGE DATA SET\n.STATMSG ANOP\n***********************************************************************\n*        COMPARE THE RESOURCES USED BY THIS STEP TO THE MAXIMUM       *\n*        RESOURCES USED BY PREVIOUS STEPS.  RETAIN THE GREATER        *\n*        OF THE NUMBER OF RESOURCES.                                  *\n***********************************************************************\nEOFCONT1 CLC   ETAPES,MAXTAPE      COMPARE STEP TAPES TO PREV MAX\n         BNH   EOFEXEC1            NOT GREATER, BRANCH\n         MVC   MAXTAPE,ETAPES      MAKE CURR COUNT NEW COUNT\nEOFEXEC1 CLC   EPRIVS,MAXPRIV      COMPARE STEP PRIVS TO PREV MAX\n         BNH   EOFEXEC2            NOT GREATER, BRANCH\n         MVC   MAXPRIV,EPRIVS      MAKE CURR COUNT NEW COUNT\nEOFEXEC2 LH    R4,EPRIVS           LOAD NUMBER OF PRIVS IN STEP\n         AH    R4,ETAPES           ADD NUMBER OF TAPES\n         CH    R4,MAXTOTAL         COMPARE STEP TOT CNT TO PREV MAX\n         BNH   EOFEXEC3            NOT GREATER, BRANCH\n         STH   R4,MAXTOTAL         MADE CURR TOTAL CNT NEW MAX\nEOFEXEC3 CLC   EREGION,MAXREGN     COMPARE STEP REGION TO PREV MAX\n         BNH   EOFLOOP2            NOT GREATER, BRANCH\n         MVC   MAXREGN,EREGION     MAKE CURR REGION NEW MAX\nEOFLOOP2 LA    R7,ENTLEN(,R7)      INCREMENT TO NEXT ENTRY\n         B     EOFLOOP1            LOOP\nEOFSCAN  CLC   MAXTAPE,H#0         SEE IF ANY TAPES\n         BE    EOFPACK             NO TAPES, GO CHECK FOR PRIV\n         OI    RESOURCE,TAPES      TURN ON TAPES RESOURCE\nEOFPACK  CLC   MAXPRIV,H#0         SEE IF ANY PRIV\n         BE    EOFLJOB             NO, BRANCH\n         OI    RESOURCE,USERPACK   TURN ON USERPACK RESOURCE\nEOFLJOB  CLC   MAXTIME,F#900       SEE IF CPU TIME > 15 MINUTES\n         BNH   CLASSEAR            NO, BRANCH\n         OI    RESOURCE+1,LONGJOB  TURN ON LONGJOB RESOURCE\n         EJECT\n***********************************************************************\n*        THIS ROUTINE SEARCHES THE APPROPRIATE CLASS TABLES FOR       *\n*        MATCHES ON RESOURCES USED TO DETERMINE THE CORRECT CLASS     *\n*        FOR A JOB.  NOTE THAT EACH GROUP (TEST, PRODUCTION,          *\n*        OPERATIONS, AND SYSTEMS SUPPORT HAVE CLASSES WHICH MAY BE    *\n*        SPECIFIED IN ORDER TO BYPASS THE TABLES OR USED TO SINGLE    *\n*        THREAD A SERIES OF JOBS BECAUSE THERE WILL ONLY BE ONE       *\n*        INITIATOR SET TO THAT CLASS.                                 *\n***********************************************************************\nCLASSEAR TM    JOBIND,JOBSTC+JOBTSO STC OR TSO\n         BM    NOCHANGE            YES, NO CHANGE OF CLASS\n         TM    RESOURCE,NDM        IS THIS AN NDM JOB ?\n         BZ    NOTNDM              NO BRANCH\n         CLC   U7TEST,=C'Y'        SEE IF UCC7 IS LOADING THIS JOB\n         BE    CLASSEA1            BR AROUND COMPARE FOR 1 STEP JOB\n         CLC   STEPCNTR,H#1        SEE IF SINGLE STEP JOB\n         BNE   CLASSEA2            GREATER THAN MAX FOR NDM\n*        MVI   CLASSFLD,C'U'       SET TO CLASS=U\n*        B     SETCLASS            GO SET CLASS U\n         B     NOTNDM              TREAT IT LIKE IT IS NOT AN NDM JOB\nCLASSEA1 CLC   STEPCNTR,H#2        SEE IF 2 STEP JOB\n         BNE   CLASSEA2            GREATER THAN MAX FOR NDM\n*        MVI   CLASSFLD,C'U'       SET TO CLASS=U\n*        B     SETCLASS            GO SET CLASS U\n         B     NOTNDM              TREAT IT LIKE IT IS NOT AN NDM JOB\nCLASSEA2 MVC   ERRORM,MSG5         INITIALIZE ERROR MESSAGE\n         MVC   ERRORMSG(10),BLANKS BLANK MESSAGE PREFIX\n         LA    R15,ERRORMSG        LOAD ADDRESS OF MESSAGE\n         BAL   R14,MSGRTN          GO ISSUE ERROR MSG\n         CLI   ERRORM+6,C'I'       IS THIS AN INFORMATIONAL MESSAGE\n         BE    CLASSEA4            YES, JUST GET OUT\n         CLI   ERRORM+6,C'E'       IS THIS AN ERROR MESSAGE\n         BE    CLASSEA3            YES, GO TURN ON ERROR INDICATOR\n         OI    JOBIND2,WARNING     TURN ON JOB WARNED IND\n         B     CLASSEA4            GET OUT\nCLASSEA3 OI    JOBIND,JOBFAIL      TURN ON JOB FAILED IND\nCLASSEA4 DS    0H\nNOTNDM   L     R7,FIRSTENT         LOAD START OF TABLE\n         LA    R4,JCLASST          LOAD ADDR OF TEST CLASS TABLE\n         TM    JOBIND,JOBPROD      SEE IF PRODUCTION JOB\n         BO    CLASSPRD            YES, BRANCH\n         TM    JOBIND,JOBTEST      SEE IF TEST JOB\n         BO    CLASST              YES, BRANCH\n         TM    JOBIND,JOBTECH      SEE IF SYSTEMS SUPPORT JOB\n         BO    CLASSTS             YES, BRANCH\n         TM    JOBIND,JOBOPER      SEE IF OPERATIONS JOB\n         BNO   EOFSCAN1            NO, USE TEST CLASS TABLE\n***********************************************************************\n*                     O P E R A T I O N S                             *\n***********************************************************************\nCLASSOP  LA    R4,JCLASST          LOAD ADDR OF TEST CLASS TABLE\n         CLI   INCLASS,C'*'        SPECIAL CLASS FOR OPERATIONS\n         BNE   CLASST1             NO, USE TEST CLASS TABLE\n         MVI   CLASSFLD,C'M'       SET NEW CLASS TO 'M'\n         LA    R4,JCLASSM          POINT TO SPECIAL CLASS TABLE\n         B     CKCLASS             BYPASS TABLE SEARCH\n***********************************************************************\n*                 T E C H    S U P P O R T                            *\n***********************************************************************\nCLASSTS  LA    R4,JCLASST          LOAD ADDR OF TEST CLASS TABLE\n         CLI   INCLASS,C'*'        SPECIAL CLASS FOR SYSTEMS SUPPORT\n         BNE   CLASST1             NO, USE TEST CLASS TABLE\n         MVI   CLASSFLD,C'S'       SET NEW CLASS TO 'S'\n         LA    R4,JCLASSS          POINT TO SPECIAL CLASS TABLE\n         B     CKCLASS             BYPASS TABLE SEARCH\n***********************************************************************\n*                       T E S T                                       *\n***********************************************************************\n*\n***********************************************************************\n*        TEST JOBS HAVE SEVERAL JOB CLASSES WHICH MAY BE USED         *\n*        FOR SPECIAL REASONS.  THE CLASS SPECIFIED IN THE JOB         *\n*        CARD WILL BE USED TO SEARCH A TABLE TO SEE IF ONE OF         *\n*        THOSE CLASSES WAS ENTERED.  THE ALLOWABLE RESOURCES          *\n*        FOR THAT JOB CLASS WILL BE COMPARED TO THE RESOURCES         *\n*        ACTUALLY USED BY THE JOB.  IF THE RESOURCES USED ARE         *\n*        GREATER THAN THOSE ALLOWED BY THE SPECIAL CLASS, THE         *\n*        JOB WILL BE GIVEN A JCL ERROR.                               *\n***********************************************************************\nCLASST   LA    R4,JCLASST          LOAD ADDR OF TEST CLASS TABL\nCLASST1  CLI   0(R4),X'00'         END OF TABLE\n         BE    CLASST7             YES, GO SET DEFAULT CLASS\n         CLC   INCLASS,0(R4)       SPECIAL CLASS MATCH\n         BE    CLASST3             YES, BRANCH\nCLASST2  LA    R4,16(,R4)          INCREMENT TO NEXT ENTRY\n         B     CLASST1             LOOP\nCLASST3  OI    JOBIND2,LEGALCLS    TURN ON LEGAL CLASS INDICATOR\n         TM    1(R4),MUSTSPEC      SEE IF THIS MUST BE SPECIFIED\n         BNO   CLASST7             NO, NOT A SPECIAL CLASS\n         MVC   CLASSFLD,INCLASS    SET PROBABLE NEW JOB CLASS\n         CLC   MAXTAPE,4(R4)       MATCH TAPE COUNT\n         BH    CLASST4             COUNT EXCEEDS TABLE, BRANCH\n         CLC   MAXPRIV,6(R4)       MATCH PRIV COUNT\n         BH    CLASST4             COUNT EXCEEDS TABLE, BRANCH\n         CLC   MAXTOTAL,8(R4)      MATCH TOTAL COUNT\n         BH    CLASST4             COUNT EXCEEDS TABLE, BRANCH\n         CLC   MAXREGN,10(R4)      MATCH REGION VALUES\n         BH    CLASST4             REGION EXCEEDS TABLE, BRANCH\n         CLC   MAXTIME,12(R4)      MATCH MAXIMUM CPU TIME\n         BH    CLASST4             CPU TIME EXCEEDS TABLE, BRANCH\n         MVC   CLASSFLD,0(R4)      MOVE CLASS TO SAVE AREA\n         B     CKCLASS             GET OUT OF SEARCH\nCLASST4  MVC   ERRORM,MSG3         INITIALIZE ERROR MESSAGE\n         MVC   ERRORMSG(10),BLANKS BLANK MESSAGE PREFIX\n         LA    R15,ERRORMSG        LOAD ADDRESS OF MESSAGE\n         BAL   R14,MSGRTN          GO ISSUE ERROR MSG\n         CLI   ERRORM+6,C'I'       IS THIS AN INFORMATIONAL MESSAGE\n         BE    CLASST6             YES, CONTINUE PROCESSING WITH IT\n         CLI   ERRORM+6,C'E'       IS THIS AN ERROR MESSAGE\n         BE    CLASST5             YES, GO TURN ON ERROR INDICATOR\n         OI    JOBIND2,WARNING     TURN ON JOB WARNED IND\n         B     CLASST6             CONTINUE PROCESSING WITH IT\nCLASST5  OI    JOBIND,JOBFAIL      TURN ON JOB FAILED IND\nCLASST6  DS    0H\nCLASST7  LA    R4,JCLASST          RELOAD ADDR OF TEST CLASS TABLE\n         TM    JOBIND2,LEGALCLS    SEE IF LEGAL CLASS FOUND\n         BO    EOFSCAN1            YES, GO USE TEST CLASS TABLE\n         MVC   ERRORM,MSG6         INITIALIZE ERROR MESSAGE\n         MVC   ERRORMSG(10),BLANKS BLANK MESSAGE PREFIX\n         LA    R15,ERRORMSG        LOAD ADDRESS OF MESSAGE\n         BAL   R14,MSGRTN          GO ISSUE ERROR MSG\n         CLI   ERRORM+6,C'I'       IS THIS AN INFORMATIONAL MESSAGE\n         BE    CLASST9             YES, JUST GET OUT\n         CLI   ERRORM+6,C'E'       IS THIS AN ERROR MESSAGE\n         BE    CLASST8             YES, GO TURN ON ERROR INDICATOR\n         OI    JOBIND2,WARNING     TURN ON JOB WARNED IND\n         B     CLASST9             RESET THE CLASS\nCLASST8  OI    JOBIND,JOBFAIL      TURN ON JOB FAILED IND\nCLASST9  B     EOFSCAN1            CONTINUE WITH TEST CLASS TABLE\n***********************************************************************\n*                     P R O D U C T I O N                             *\n***********************************************************************\nCLASSPRD LA    R4,JCLASSP          LOAD ADDR OF PROD CLASS TABLE\n         CLI   0(R4),X'00'         SEE IF ANY TABLE ENTRIES\n         BE    CKCLASS             NO, BRANCH\nCLASSP1  CLI   0(R4),X'00'         END OF TABLE\n         BE    CLASSP4             YES, GO SCAN REGULAR TABLE\n         CLC   INCLASS,0(R4)       SPECIAL CLASS MATCH\n         BE    CLASSP3             YES, BRANCH\nCLASSP2  LA    R4,16(,R4)          INCREMENT TO NEXT ENTRY\n         B     CLASSP1             LOOP\nCLASSP3  MVC   CLASSFLD,INCLASS    SET NEW CLASS FIELD\n         TM    1(R4),MUSTSPEC      SEE IF THIS MUST BE SPECIFIED\n         BO    CKCLASS             YES, GOOD SPECIAL CLASS\nCLASSP4  LA    R4,JCLASSP          RELOAD ADDR OF PROD CLASS TABLE\n***********************************************************************\n*        SCAN THE APPROPRIATE CLASS TABLE FOR THE CLASS WHICH         *\n*        MATCHES THE RESOURCES USED BY THE JOB.                       *\n***********************************************************************\nEOFSCAN1 CLI   0(R4),X'00'         END OF TABLE\n         BNE   EOFSCAN2            NO, CONTINUE\n         MVC   ERRORM,MSG4         INITIALIZE ERROR MESSAGE\n         MVC   ERRORMSG(10),BLANKS BLANK MESSAGE PREFIX\n         LA    R15,ERRORMSG        LOAD ADDRESS OF MESSAGE\n         BAL   R14,MSGRTN          GO ISSUE ERROR MSG\n         MVI   CLASSFLD,C'A'       SET TO CLASS=A\n         LA    R4,JCLASSDF         LOAD ADDRESS OF DEFAULT CLASS TABLE\n         B     CKCLASS             GO SET DEFAULT CLASS\nEOFSCAN2 TM    1(R4),MUSTSPEC      SEE IF THIS MUST BE SPECIFIED\n         BO    EOFSCAN3            YES, IGNORE THIS ENTRY\n         CLC   MAXTAPE,4(R4)       MATCH TAPE COUNT\n         BH    EOFSCAN3            COUNT EXCEEDS TABLE, BRANCH\n         CLC   MAXPRIV,6(R4)       MATCH PRIV COUNT\n         BH    EOFSCAN3            COUNT EXCEEDS TABLE, BRANCH\n         CLC   MAXTOTAL,8(R4)      MATCH TOTAL COUNT\n         BH    EOFSCAN3            COUNT EXCEEDS TABLE, BRANCH\n         CLC   MAXREGN,10(R4)      MATCH REGION VALUES\n         BH    EOFSCAN3            REGION EXCEEDS TABLE, BRANCH\n         CLC   MAXTIME,12(R4)      MATCH MAXIMUM CPU TIME\n         BH    EOFSCAN3            CPU TIME EXCEEDS TABLE, BRANCH\n         MVC   CLASSFLD,0(R4)      MOVE CLASS TO SAVE AREA\n         B     CKCLASS             GET OUT OF SEARCH\nEOFSCAN3 LA    R4,16(,R4)          INCREMENT TO NEXT ENTRY\n         B     EOFSCAN1            LOOP\n***********************************************************************\n*                                                                     *\n*        IF THE JOB IS NOT A PRODUCTION JOB, R4 WILL STILL            *\n*        POINT TO THE CLASS TABLE ENTRY.                              *\n*                                                                     *\n***********************************************************************\nCKCLASS  TM    JOBIND3,HOLD        SEE IF THIS CLASS REQUIRES HOLD\n         BZ    SETCLASS            NO, BRANCH\n         MVC   ERRORM,MSG7         INITIALIZE MESSAGE AREA\n         MVC   ERRORMSG(10),BLANKS BLANK MESSAGE PREFIX\n         LA    R15,ERRORMSG        LOAD ADDRESS OF MESSAGE\n         BAL   R14,MSGRTN          GO ISSUE HELD MESSAGE\nSETCLASS MVC   JOBM+21(1),CLASSFLD MOVE NEW CLASS TO MESSAGE\n         LA    R15,JOBMSG          LOAD ADDRESS OF JOB CLASS MESSAGE\n         BAL   R14,MSGRTN          GO WRITE MESSAGE TO JES MESSAGE DATA\n         EJECT\n***********************************************************************\n*                                                                     *\n*    SET JOBS PRIORITY BASED ON CPU TIME                              *\n*                                                                     *\n*    * * *  SEE THE NOTE FARTHER DOWN FOR A DESCRIPTION OF  * * *     *\n*    * * *  HOW $RTIMTAB IS INTREPRETED BY THIS ROUTINE     * * *     *\n*                                                                     *\n*        THE PRIORITY FIELD, JCTPRIO, IS  A ONE BYTE FIELD            *\n*        CONTAINING THE PRIORITY GROUP (DISPLAYED PRIORITY) IN        *\n*        THE LEFTMOST 4 BITS AND THE AGING BITS IN THE RIGHTMOST      *\n*        4 BITS.  THIS MOD ASSIGNS THE PRIORITY GROUP BASED ON        *\n*        THE $RTIMTAB VALUES.  IN ADDITION, THE AGING BITS ARE        *\n*        USED TO ASSIGN A SUB-PRIORITY BASED ON THE CPU TIME FOR      *\n*        THAT GROUP.  THE ALGORITHM FOR THIS IS                       *\n*                                                                     *\n*                                                                     *\n*                     15                                              *\n*        ----------------------------- * ($RTIMTAB(X) - CPUTIME)      *\n*        ($RTIMTAB(X) - $RTIMTAB(X-1))                                *\n*                                                                     *\n*        WHERE X IS THE ENTRY WHERE $RTIMTAB > =  CPUTIME             *\n*              X-1 IS THE PREVIOUS $RTIMTAB ENTRY OR 0.               *\n*                                                                     *\n*        EX. $RTIMTAB 1 030 - 6 (PRIORITY GROUP)                      *\n*                     2 045 - 5                                       *\n*                     3 060 - 4                                       *\n*                     4 120 - 3                                       *\n*                                                                     *\n*        CPU TIME = 70 SECS                                           *\n*                                                                     *\n*        PRIORITY GROUP IS 3  (120 > =  CPUTIME)                      *\n*                                                                     *\n*        SUB-PRIORITY CALCULATION IS...                               *\n*                                                                     *\n*             15                                                      *\n*         ---------- * (120 - 70)  = 12 OR X'0C'                      *\n*         (120 - 60)                                                  *\n*                                                                     *\n*        FINAL PRIORITY IS 3C                                         *\n*                                                                     *\n*    NOTE:                                                            *\n*        $RTIMTAB CAN PROCESS ONLY WHOLE MINUTES.  SINCE WE           *\n*        DESIRE A FINER BREAKDOWN, THE VALUES IN JESPARM ARE IN       *\n*        SECONDS.  JES WILL MULTIPLY THESE VALUES BY 60 BEFORE        *\n*        STORING THEM IN THE TABLE.  IN THIS EXIT WE WILL             *\n*        MULTIPLY THE VALUE IN MAXTIME BY 60 BEFORE USING IT IN       *\n*        THE COMPUTATIONS.                                            *\n*                                                                     *\n*        THE $RTIMTAB TABLE IS A SERIES OF 4 BYTE ENTRIES WHICH       *\n*        IS FORMATTED AS FOLLOWS:                                     *\n*        1)  A 1 BYTE PRIORITY                                        *\n*        2)  A 3 BYTE TIME VALUE                                      *\n*                                                                     *\n***********************************************************************\nPRIRTN   L     R14,JCTADDR         LOAD JCT ADDRESS\n         USING JCT,R14             SET ADDRESSABILITY TO JCT\n         TM    JCTJBOPT,JCTPRICD   WAS PRIORITY SPECIFIED?\n         BO    NOCPRIO             YES, DEFAULT PRIORITY\n         MVI   PRTY,X'50'          SET DEFAULT PROD INPUT PRIORITY\n         TM    JOBIND,JOBPROD      SEE IF PRODUCTION JOB\n         BO    NOCPRIO             YES, LEAVE DEFAULT PRIORITY\n         MVI   PRTY,X'10'          SET DEFAULT TEST INPUT PRIORITY\n         L     R7,MAXTIME          LOAD MAX CPU TIME FOR JOB\n         MH    R7,H#60             MAKE IT COMPATIBLE WITH $RTIMTAB\n         SLR   R0,R0               CLEAR WORK REGISTER\n         SLR   R2,R2               CLEAR WORK REGISTER\n         L     R6,$RTIMTAB         LOAD ADDRESS OF PRTY/CPUTIME TABLE\n         B     RTIM1ST             GO PROCESS FIRST ENTRY\nRTIMLOOP ICM   R0,B'0111',1(R6)    SAVE CURRENT AS PREVIOUS\n         LA    R6,4(R6)            POINT TO NEXT RTIMTAB ENTRY\nRTIM1ST  CLM   R7,B'0111',1(R6)    COMPARE NEW ENTRY TO ESTIM. TIME\n         BH    RTIMLOOP            STILL TOO LOW, LOOP\n         ICM   R2,B'0111',1(R6)    COMPUTE DIFF BETWEEN THIS RTIMTBL\n         SR    R2,R0                 ENTRY AND LAST RTIMTBL ENTRY\n         BZ    NOCPRIO             PROTECT OURSELVES FROM ZERODIVIDE\n         L     R0,=F'150000'       LOAD 15 X WEIGHTING VALUE\n         SRDA  R0,32(0)            SHIFT TO ODD REG OF PAIR\n         DR    R0,R2               DIVIDE 15 BY THE DIFFERENCE\n         ICM   R2,B'0111',1(R6)    COMPUTE DIFF BETWEEN EST TIME\n         SR    R2,R7                 AND THIS RTIMTBL ENTRY\n         MR    R0,R2               APPLY THE WEIGHT\n         D     R0,=F'10000'        REMOVE THE SCALING FACTOR\n         STC   R1,PRTY             SAVE THE SUB-PRIORITY\n         SLR   R2,R2               CLEAR REG FOR IC\n         IC    R2,0(R6)            LOAD PRIORITY FOR THIS RTIMTBL ENTRY\n         SLL   R2,4                SHIFT TO FIRST NIBBLE\n         NI    PRTY,X'0F'          PURIFY THE SUB-PRIORITY IN JCT\n         SLR   R0,R0                 AND 'OR'\n         IC    R0,PRTY                 IT WITH\n         OR    R2,R0                     THE PRIORITY GROUP\n         STC   R2,PRTY             PUT IT BACK IN THE JCT\n         DROP  R14                 DROP ADDRESSABILITY TO JCT\nNOCPRIO  EQU   *\n         EJECT\n***********************************************************************\n*                                                                     *\n*              S E T     T H E    N E W    C L A S S                  *\n*                    A N D    P R I O R I T Y                         *\n*                                                                     *\n***********************************************************************\nCHGCL    CLI   CLASSFLD,C'A'       TEST NEW CLASS\n         BNL   CHGCL1              NEW, GO RESET TO NEW CLASS\nDEFAULT  MVI   CLASSFLD,C'A'       SET NEW CLASS TO 'A'\nCHGCL1   DS    0H\n         AIF   ('&MODIFY' NE 'YES').MODIFY1\n         L     R14,JCTADDR         LOAD JCT ADDRESS\n         USING JCT,R14             SET ADDRESSABILITY TO JCT\n         L     R15,JQEADDR         LOAD ADDRESS OF JQE\n         USING JQE,R15             SET ADDRESSABILITY TO JQE\n         MVC   JCTJCLAS,CLASSFLD   CHANGE CLASS IN JCT\n         MVC   JCTCLASS,CLASSFLD   CHANGE CLASS IN JCT\nCHGCL2   TM    JOBIND3,HOLD        SEE IF NEED OPERATOR HOLD\n         BZ    CHGCL3              NO, BRANCH\n         MVI   JCTUSER0,C'O'       SET FOR HOLD IN ANOTHER EXIT\nCHGCL3   TM    JOBIND3,NOPRTY      SEE IF ALLOW OVERRIDE PRIO\n         BO    CHGCL4              NO, BRANCH\n         TM    JCTJBOPT,JCTPRICD   WAS PRIORITY SPECIFIED?\n         BO    CHGCL5              YES, DO NOT CHANGE IT\nCHGCL4   MVC   JCTPRIO,PRTY        MODIFY EXECUTION PRIORITY\nCHGCL5   DS    0H\n         DROP  R14                 DROP ADDRESSABILITY TO JCT\n         DROP  R15                 DROP ADDRESSABILITY TO JQE\n.MODIFY1 ANOP\n         EJECT\nNOCHANGE XC    RETCODE,RETCODE     SET RETURN CODE TO ZERO\n         TM    JOBIND,JOBFAIL      WAS JOB FAILED BY EXIT?\n         BO    JOBERROR            YES, BRANCH\n         TM    JOBIND2,WARNING     WAS JOB WARNED BY EXIT?\n         BO    JOBWARN             YES, BRANCH\n         B     ENDOFIT             BRANCH\nJOBWARN  DS    0H\n         AIF   ('&WRNMSG' EQ 'YES').WRNMSG1\n         B     ENDOFIT             BYPASS WTO FOR WARNING\n         AGO   .WRNMSG2\n.WRNMSG1 ANOP\n         MVC   WTOLIST(LWTO6),WTO6 SET WTO LIST FORM\n         MVC   WTOLIST+13+4(8),JOBNAME  MOVE JOBNAME TO MESSAGE\n         AIF   ('&TSO' NE 'YES').TSO14\n         WTO   MF=(E,WTOLIST)\n         AGO   .TSO15\n.TSO14   ANOP\n         $$WTO WTOLIST             WRITE ERROR MESSAGE\n.TSO15   ANOP\n         B     ENDOFIT             BYPASS WTO LIST FORM\n         $MID  906\nWTO6     WTO   '&MID.JOB XXXXXXXX CONTAINED WARNINGS FOR STANDARDS VIOLX\n               ATIONS',                                                X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO6    EQU   *-WTO6\n.WRNMSG2 ANOP\nJOBERROR DS    0H\n         AIF   ('&ERRMSG' EQ 'YES').ERRMSG1\n         B     JOBERR1             BYPASS WTO FOR FAILURE\n.ERRMSG1 ANOP\n         MVC   WTOLIST(LWTO2),WTO2 SET WTO LIST FORM\n         MVC   WTOLIST+13+4(8),JOBNAME  MOVE JOBNAME TO MESSAGE\n         AIF   ('&TSO' NE 'YES').TSO1\n         WTO   MF=(E,WTOLIST)\n         AGO   .TSO2\n.TSO1    ANOP\n         $$WTO WTOLIST             WRITE ERROR MESSAGE\n.TSO2    ANOP\n         B     JOBERR1             BYPASS WTO LIST FORM\n         $MID  902\nWTO2     WTO   '&MID.JOB XXXXXXXX TERMINATED FOR STANDARDS VIOLATIONS',X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO2    EQU   *-WTO2\nJOBERR1  DS    0H\n         AIF   ('&FLUSH' EQ 'YES').FLUSH1\n         B     ENDOFIT             BYPASS SETTING OF FAILURE RETURN COD\n.FLUSH1  ANOP\n         LA    R15,8               SET JOB FAIL RETURN CODE\n         ST    R15,RETCODE         AND SAVE IT\n         EJECT\n***********************************************************************\n*                        C L E A N    U P                             *\n***********************************************************************\nENDOFIT  DS    0H                  END OF EXIT\n         LA    R1,ESTAEL           LOAD ADDRESS OF ESTAE LIST FORM\n         AIF   ('&TSO' EQ 'YES').TSO10\n         AIF   ('&ESTAE' NE 'YES').TSO10\n         ESTAE 0,MF=(E,(1))        CANCEL ESTAE ENVIRONMENT\n.TSO10   ANOP\n         L     R1,WORKADDR         LOAD ADDRESS OF EXIT PARM LIST\n         L     R1,0(R1)            LOAD ADDRESS OF EXIT WORK AREA\n         XC    0(16,R1),0(R1)      CLEAR EXIT WORK AREA\n         L     R0,F#16384          LOAD FREEMAIN LENGTH\n         L     R1,SUBTABLE         LOAD JCL SUB TABLE AREA ADDRESS\n         FREEMAIN R,LV=(0),A=(1)\n         L     R2,RETCODE          SAVE RETURN CODE\n         LH    R0,GETLEN           LOAD FREEMAIN SIZE\n         LR    R1,R13              SAVE WORKAREA ADDRESS\n         L     R13,4(,R13)         RESTORE ORIG REG 13\n         FREEMAIN R,LV=(0),A=(1)\n         LR    R15,R2              SET RETURN CODE\n         RETURN (14,12),RC=(15)    GO BACK TO JES2\n         EJECT\n***********************************************************************\n*        RETURN TO JES REQUESTING THE NEXT INTERNAL TEXT STATEMENT    *\n***********************************************************************\nGETNEXT  L     R4,CARDNO           LOAD CARD NUMBER FIELD\n         LA    R4,1(,R4)           ADD 1 TO CARD NUMBER\n         ST    R4,CARDNO           STORE NEW CARD NUMBER\n         XC    RETCODE,RETCODE     SET RETURN CODE TO ZERO\n         LA    R1,ESTAEL           LOAD ADDRESS OF ESTAE LIST FORM\n         AIF   ('&TSO' EQ 'YES').TSO11\n         AIF   ('&ESTAE' NE 'YES').TSO11\n         ESTAE 0,MF=(E,(1))        CANCEL ESTAE ENVIRONMENT\n.TSO11   ANOP\n         L     R13,4(,R13)         RESTORE ORIG REG 13\nQUICKOUT SLR   R15,R15             SET RETURN CODE TO ZERO\n         RETURN (14,12),RC=(15)    GO BACK TO JES2\n         EJECT\n***********************************************************************\n*                                                                     *\n*                        E R R O R T N                                *\n*                                                                     *\n*        THIS ROUTINE WILL WRITE A MESSGE TO THE JES MESSAGE DATA     *\n*        SET USING THE INDEX INTO THE MESSAGE TABLE PASSED BY         *\n*        REGISTER 15 TO THE ROUTINE AND USE THE CARDNO FOR THE        *\n*        STATEMENT NUMBER IN THE MESSAGE PREFIX.                      *\n*                                                                     *\n***********************************************************************\n         PUSH  USING\nERRORTN  STM   R14,R12,SAVEREGS    SAVE REGISTERS\n         L     R6,OUTRPL           GET BASE FOR RPL\n         USING IFGRPL,R6           SET ADDRESSABILITY\n         LR    R2,R15              SAVE ERROR NUMBER\n         BCTR  R2,0                MAKE ERROR NUMBER REL TO ZERO\n         MH    R2,H#90             MULTIPLY BY 90 FOR OFFSET\n         L     R3,CARDNO           LOAD CARD NUMBER\n         CVD   R3,DOUBLE           CONVERT CARD NUMBER TO PACKED\n         L     R4,MSGCOUNT         LOAD MESSAGE COUNTER\n         LTR   R4,R4               SEE IF FIRST MESSAGE\n         BNZ   MSGOUT              NO, DO NOT PUT HEADERS\n         MVC   BUFFER,HEADER1      MOVE HEADER LINE1 TO JES2 BUFFER\n         BAL   R5,PUTMSG           GO WRITE TO MSG DATA SET\n         MVC   BUFFER,HEADER2      MOVE HEADER LINE2 TO JES2 BUFFER\n         BAL   R5,PUTMSG           GO WRITE TO MSG DATA SET\nMSGOUT   LA    R4,1(,R4)           ADD 1 TO MESSAGE COUNT\n         ST    R4,MSGCOUNT         SAVE MESSAGE COUNTER\n         MVC   MSGPREF,PREFIX      MOVE MSG PREFIX TO JES2 BUFFER\n         ED    MSGPREF(6),DOUBLE+5 EDIT CARD NUMBER TO PREFIX\n         LA    R3,MESSAGES         LOAD ADDR OF MESSAGE TABLE\n         AR    R3,R2               ADD OFFSET OF MSG TO TBL ADDR\n         MVC   MSGTEXT,0(R3)       MOVE PROPER MSG TO JES2 BUFFER\n         BAL   R5,PUTMSG           GO WRITE TO MSG DATA SET\n         CLI   MSGTEXT+6,C'I'      IS THIS AN INFORMATIONAL MESSAGE\n         BE    MSGOUT2             YES, JUST GET OUT\n         CLI   MSGTEXT+6,C'E'      IS THIS AN ERROR MESSAGE\n         BE    MSGOUT1             YES, JUST GET OUT\n         OI    JOBIND2,WARNING     TURN ON JOB WARNED IND\n         B     MSGOUT2             GET OUT\nMSGOUT1  OI    JOBIND,JOBFAIL      TURN ON JOB FAILED IND\nMSGOUT2  LM    R14,R12,SAVEREGS    RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*                          M S G R T N                                *\n*                                                                     *\n*        THIS ROUTINE WILL WRITE THE MESSAGE WHICH IS POINTED TO      *\n*        BY REGISTER 15 TO THE JES MESSAGE DATA SET.                  *\n*                                                                     *\n***********************************************************************\n         PUSH  USING\nMSGRTN   STM   R14,R12,SAVEREGS    SAVE REGISTERS\n         LR    R2,R15              SAVE BUFFER ADDRESS\n         L     R6,OUTRPL           GET BASE FOR RPL\n         USING IFGRPL,R6           SET ADDRESSABILITY\n         L     R3,CARDNO           LOAD CARD NUMBER\n         CVD   R3,DOUBLE           CONVERT CARD NUMBER TO PACKED\n         L     R4,MSGCOUNT         LOAD MESSAGE COUNTER\n         LTR   R4,R4               SEE IF FIRST MESSAGE\n         BNZ   MSGRTN1             NO, DO NOT PUT HEADERS\n         MVC   BUFFER,HEADER1      MOVE HEADER LINE1 TO JES2 BUFFER\n         BAL   R5,PUTMSG           GO WRITE TO MSG DATA SET\n         MVC   BUFFER,HEADER2      MOVE HEADER LINE2 TO JES2 BUFFER\n         BAL   R5,PUTMSG           GO WRITE TO MSG DATA SET\nMSGRTN1  LA    R4,1(,R4)           ADD 1 TO MESSAGE COUNT\n         ST    R4,MSGCOUNT         SAVE MESSAGE COUNTER\n         MVC   BUFFER,0(R2)        MOVE MESSAGE FROM BUFFER\n         BAL   R5,PUTMSG           GO WRITE TO MSG DATA SET\n         LM    R14,R12,SAVEREGS    RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*                          P U T M S G                                *\n*                                                                     *\n*        WRITE MESSAGE TO JES MESSAGE DATA SET                        *\n*                                                                     *\n***********************************************************************\nPUTMSG   DS    0H\n         MVI   RPLREQ,RPLPUT       OPERATION TO BE A PUT\n         L     R0,OUTACB           LOAD OUTPUT ACB ADDRESS\n         ST    R0,RPLDACB          SET IN ACB POINTER IN RPL\n         LA    R0,BUFFER           LOAD ADDR OF BUFFER\n         ST    R0,RPLAREA          POINT TO BUFFER\n         XC    RPLARG(4),RPLARG    ZERO FIELD\n         MVI   RPLOPT1,RPLSEQ      OPERATION TO BE SEQUENTIAL\n         MVI   RPLOPT2,X'00'       ZERO FIELD\n         LA    R0,100              LOAD MESSAGE LENGTH\n         ST    R0,RPLRLEN          STORE MESSAGE LENGTH\n         XC    RPLBUFL(4),RPLBUFL  ZERO FIELD\n         XC    RPLDDDD(4),RPLDDDD  ZERO FIELD\n         ST    R13,PUTSAVE+72      SAVE SAVE AREA POINTER\n         LA    R13,PUTSAVE         SAVE AREA FOR ACCESS METHOD\n         LA    R1,IFGRPL           LOAD ADDR OF RPL\n         PUT   RPL=(1)             WRITE TO MESSAGE DATA SET\n         L     R13,72(R13)         RESTORE SAVE AREA POINTER\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   MSGERROR            BAD, GO BAG JOB\n         BR    R5                  RETURN TO CALLER\n         EJECT\nMSGERROR MVC   WTOLIST(LWTO1),WTO1 SET WTO LIST FORM\n         AIF   ('&TSO' NE 'YES').TSO3\n         WTO   MF=(E,WTOLIST)\n         AGO   .TSO4\n.TSO3    ANOP\n         $$WTO WTOLIST             WRITE ERROR MESSAGE\n.TSO4    ANOP\n         B     JOBERROR            GET OUT\n         $MID  901\nWTO1     WTO   '&MID.PUT TO JOB MESSAGE DATA SET FAILED',              X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO1    EQU   *-WTO1\n         DROP  R6\n         POP   USING\n         EJECT\n***********************************************************************\n*                                                                     *\n*                          R E F B A C K                              *\n*                                                                     *\n*        THIS ROUTINE HANDLES DSN AND VOLSER REFERBACKS.  THE SAVE    *\n*        TABLE WILL BE SEARCHED FROM THE BEGINNING FOR JOBSTEP AND/OR *\n*        PROCSTEP ENTRY AND THEN WITHIN THE DD ENTRIES FOR THAT STEP. *\n*        IF THE ENTRY IS FOUND, THE UNIT AND DSNAME INFORMATION WILL  *\n*        BE SAVED, IF NOT, A RETURN IS MADE TO THE CALLING RTN.       *\n*                                                                     *\n***********************************************************************\n*\nREFBACK  SLR   R3,R3               CLEAR WORK REGISTER\n         SLR   R4,R4               CLEAR WORK REGISTER\n         SLR   R5,R5               CLEAR WORK REGISTER\n         IC    R5,2(R2)            LOAD NUMBER OF DSN SUBPARAMETERS\n         N     R5,F#127            'AND' OUT THE HIGH ORDER BIT\n         LA    R2,3(,R2)           LOAD START OF REFBK ENTRIES\n         CLI   0(R2),X'01'         SEE IF LEN OF 1ST POS = 1\n         BNE   DDLOOP              NO, DSN(MEMBER) PDS DISK ONLY, IGNOR\n         CLI   1(R2),C'*'          SEE IF REFERBACK\n         BNE   DDLOOP              NO, DSN(MEMBER) PDS DISK ONLY, IGNOR\n         CH    R5,H#4              SEE IF NUMBER PARAMS > 4\n         BNH   *+16                NO, CONTINUE\n         LA    R15,26              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         MVI   REFERBCK,C' '       BLANK START OF REFBACK WORK AREA\n         MVC   REFERBCK+1(23),REFERBCK BLANK ENTIRE WORK AREA\n         XC    REFUNIT,REFUNIT     ZERO REFERBACK UNIT FEEDBACK\n         XC    REFVOL,REFVOL       ZERO REFERBACK VOLSER FIELD\n         MVI   REFDSN,C' '         BLANK ENTIRE\n         MVC   REFDSN+1(43),REFDSN  REFERBACK DSNAME FIELD\nREFLOOP1 LA    R4,1(,R4)           ADD 1 TO COUNT\n         CR    R4,R5               SEE IF COUNT EXCEEDED\n         BH    REFSEAR             YES, GO SEARCH BACK\n         ICM   R3,1,0(R2)          LOAD LENGTH OF ENTRY\n         BNZ   *+16                NOT ZERO, OK\n         LA    R15,26              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         CH    R3,H#8              SEE IF LENGTH > 8\n         BNH   *+16                NO, CONTINUE\n         LA    R15,26              SET ERROR NUMBER\n         BAL   R14,ERRORTN         GO ISSUE ERROR MSG\n         B     DDLOOP              GET OUT\n         BCTR  R3,0                MAKE MACHINE LENGTH\n         CH    R4,H#1              SEE IF 1ST ENTRY\n         BE    REFLOOP2            YES, IGNORE\n         CH    R4,H#2              SEE IF 2ND ENTRY\n         BE    REF#2               YES, GO PROCESS IT\n         CH    R4,H#3              SEE IF 3RD ENTRY\n         BE    REF#3               YES, GO PROCESS IT\n*        THIS MUST BE THE 4TH ENTRY\nREF#4    EX    R3,MOVE10           MOVE DDN TO SEARCH FIELD\n         B     REFLOOP2            BRANCH\nREF#3    CH    R5,H#3              SEE IF ONLY 3 ENTRIES\n         BE    REF#3B              YES, MUST BE DDNAME\n*        IF NOT DDNAME, MUST BE PROCSTEP NAME\nREF#3A   EX    R3,MOVE11           MOVE ENTRY TO PSTEP ENTRY\n         B     REFLOOP2            BRANCH\nREF#3B   EX    R3,MOVE10           MOVE ENTRY TO DDNAME\n         B     REFLOOP2            BRANCH\nREF#2    CH    R5,H#2              SEE IF ONLY 2 ENTRIES\n         BE    REF#2B              ONLY 2, MUST BE DDNAME\n*        IF 3 OR 4 ENTRIES, THIS ENTRY MUST BE FOR JOBSTEP\nREF#2A   EX    R3,MOVE12           MOVE ENTRY TO JSTEP\n         B     REFLOOP2            BRANCH\nREF#2B   EX    R3,MOVE10           MOVE ENTRY TO DDNAME\nREFLOOP2 LA    R2,2(R3,R2)         INCREMENT TO NEXT ENTRY\n         B     REFLOOP1            LOOP\nREFSEAR  L     R7,LASTEXEC         LOAD ADDR OF LAST EXEC CARD\n*        IF REFERBACK WITHIN CURRENT STEP, THIS ADDR WILL BE\n*        USED FOR START OF SEARCH\n         CLI   REFJSTEP,C' '       SEE IF JSTEP PART OF SEARCH\n         BE    REFSEAR5            NO, SAME STEP WE ARE IN\n         CLI   REFPSTEP,C' '       SEE IF PROCSTEP PART OF SEARCH\n         BE    REFSEAR1            BLANK, NO PROCSTEP\n         LA    R3,15               SET COMPARE LENGTH FOR JS & PS\n         B     REFSEAR2            BRANCH\nREFSEAR1 LA    R3,7                SET COMPARE LENGTH FOR JS ONLY\nREFSEAR2 L     R7,FIRSTENT         LOAD START OF TABLE\nREFSEAR3 LA    R7,ENTLEN(,R7)      INCREMENT PAST JOB ENTRY\n         CLI   ENTRYTYP,TYPEXEC    SEE IF EXEC ENTRY\n         BE    REFSEAR4            YES, GO COMPARE\n         CLI   ENTRYTYP,TYPEND     SEE IF END OF TABLE\n         BE    REFNO               NOT FOUND, PROBABLE JCL ERROR, EXIT\n         B     REFSEAR3            LOOP\nREFSEAR4 EX    R3,COMPARE1         SEE IF RIGHT STEP\n         BE    REFSEAR5            YES, GO SEARCH FOR DDNAME\n         B     REFSEAR3            LOOP FOR NEXT ENTRY\nREFSEAR5 LA    R7,ENTLEN(,R7)      INCREMENT TO NEXT DD ENTRY\n         TM    ENTRYTYP,TYPEDD     SEE IF DD ENTRY\n         BNO   REFNO               DDNAME NOT FOUND, EXIT\nREFSEAR6 CLC   REFDDN,DDDN         MATCH DDNAME????\n         BNE   REFSEAR5            NO, LOOP FOR NEXT DD\nREFOUND  MVC   REFDSN(L'DDSN),DDSN SAVE DSNAME\n         MVC   REFUNIT,DTYPE       SAVE UNIT INFO\n         MVC   REFVOL,DVOLSER      SAVE VOLSER INFO\nREFNO    BR    R14                 RETURN\n         EJECT\n***********************************************************************\n*                                                                     *\n*                          B A D E R R O R                            *\n*                                                                     *\n*        A BAD ERROR HAS OCCURRED, AND A FAST PATH THROUGH THE        *\n*        EXIT MUST BE FACILITATED.                                    *\n*                                                                     *\n***********************************************************************\nBADERROR OI    JOBIND2,SEVERE      TURN ON SEVERE INDICATOR\n         OI    JOBIND,JOBFAIL      TURN ON JOB FAILED INDICATOR\n         B     GETNEXT             GO GET NEXT CARD\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*                          T B L F U L L                              *\n*                                                                     *\n*        THE INTERNAL DD TABLE IS FULL.  ISSUE THE APPROPRIATE        *\n*        MESSAGE AND EXIT WITH A JCL ERROR.                           *\n*                                                                     *\n***********************************************************************\nTBLFULL  OI    JOBIND2,SEVERE      TURN ON SEVERE INDICATOR\n         OI    JOBIND,JOBFAIL      TURN ON JOB FAILED INDICATOR\n         MVC   WTOLIST(LWTO3),WTO3 SET WTO LIST FORM\n         AIF   ('&TSO' NE 'YES').TSO5\n         WTO   MF=(E,WTOLIST)\n         AGO   .TSO6\n.TSO5    ANOP\n         $$WTO WTOLIST             WRITE ERROR MESSAGE\n.TSO6    ANOP\n         B     GETNEXT             SKIP PROCESSING OF THIS STATEMENT\n         $MID  903\nWTO3     WTO   '&MID.MAXIMUM ENTRIES IN INTERNAL TABLE EXCEEDED',      X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO3    EQU   *-WTO3\n         EJECT\n***********************************************************************\n*                                                                     *\n*                          S T A E X I T                              *\n*                                                                     *\n*        THIS ROUTINE GETS CONTROL FOR EVERY ABEND OCCURRING IN       *\n*        THE EXIT.  THIS ROUTINE WILL ISSUE AN APPROPRIATE MESSAGE    *\n*        TO THE OPERATOR AND TAKE A CONSOLE DUMP FOR PROBLEM          *\n*        RESOLUTION.  RETRY WILL BE ATTEMPTED FOR ALL ABENDS          *\n*        WHICH WILL SET A FAST PATH THROUGH THE EXIT AND              *\n*        TERMINATE THE JOB.  NOTE THAT THERE IS A RECURSION           *\n*        CHECK TO PROTECT FROM ABEND LOOPS.                           *\n*                                                                     *\n***********************************************************************\n         PUSH  USING\nSTAEXIT  LR    R8,R15              SET NEW BASE ADDR\n         USING STAEXIT,R8          SET ADDRESSABILITY\n         CH    R0,H#12             SEE IF CORE AVAILABLE\n         BE    STAENO              NO, BRANCH\n         SAVE  (14,12)             SAVE REGISTERS\n         SPACE 1\n         L     R2,0(R1)            LOAD PARAMETER ADDRESS\n         L     R11,STAEREGS+64-WORKAREA(R2) RESTORE HCT ADDRESS\n         LA    R3,STAESAVE-WORKAREA(R2) LOAD ADDRESS OF NEW SAVE\n         ST    R3,8(,R13)          SAVE NEW SAVE ADDRESS IN OLD\n         ST    R13,4(,R3)          SAVE OLD SAVE ADDRESS IN NEW\n         LR    R13,R3              SET NEW SAVE ADDRESS\n         LR    R3,R1               SAVE SDWA ADDRESS\n         LA    R0,L'WTO4           LOAD LENGTH OF MESSAGE\n         LA    R1,WTOLIST-WORKAREA(R2) LOAD ADDRESS OF WTO LIST FORM\n         MVC   0(LWTO4,R1),WTO4    SET WTO LIST FORM\n         AIF   ('&TSO' NE 'YES').TSO7\n         WTO   MF=(E,(R1))\n         AGO   .TSO8\n.TSO7    ANOP\n         $$WTO (R1)                WRITE ERROR MESSAGE\n.TSO8    ANOP\n         CLI   RECURS-WORKAREA(R2),X'FF'   SEE IF RECURSIVE ABEND\n         BE    STAENO              YES, TELL ABEND NOT TO RETRY\n         AIF   ('&SDUMP' EQ 'YES').SDUMP1\n         B     STAE1               BYPASS SDUMP SWITCH\n.SDUMP1  ANOP\n         LA    R1,SDUMPL-WORKAREA(R2) LOAD ADDRESS OF SDUMP LIST FORM\n         MVC   0(LSDUMPL,R1),SDUMP INITIALIZE SDUMP LIST FORM\n         SDUMP MF=(E,(1))          TAKE SYSTEM DUMP\nSTAE1    DS    0H\n         L     R13,4(,R13)         RESTORE ORIGINAL REG 13\n         LR    R1,R3               RESTORE SDWA ADDRESS\n         SETRP REGS=(14,12),DUMP=IGNORE,RC=4,FRESDWA=YES,              X\n               RETADDR=STAERTRY\nSTAENO   LA    R0,STAERTRY         LOAD RETRY ADDRESS\n         LA    R15,4               SET RETURN CODE TO RETRY\n         BR    R14                 GO RETRY\n         SPACE 2\n         $MID  904\nWTO4     WTO   '&MID.JES J006STDS ABEND',                              X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO4    EQU   *-WTO4\n         SPACE 1\n         DROP  R8                  DROP LOCAL ADDRESSABILITY\n         SPACE 2\n         POP   USING\n***********************************************************************\n*                                                                     *\n*                          S T A E R T R Y                            *\n*                                                                     *\n*        RESTORE ORIGINAL REGISTERS AND GET OUT                       *\n*                                                                     *\n***********************************************************************\nSTAERTRY LR    R13,R1              RESTORE GETMAINED AREA ADDRESS\n         LM    R14,R12,STAEREGS+12 RESTORE REGISTERS\n         B     BADERROR            GET OUT\n         EJECT\n         LTORG\n         EJECT\n***********************************************************************\n*        TABLES USED BY EXIT                                          *\n***********************************************************************\n*\n***********************************************************************\n*                                                                     *\n*    SYSTEM DATA SET NAME TABLE                                       *\n*                                                                     *\n*        FORMAT OF TABLE IS AS FOLLOWS                                *\n*                                                                     *\n*        1)  A 1 BYTE MACHINE LENGTH OF DSNAME                        *\n*        2)  A 1-44 BYTE DATA SET NAME OR PREFIX                      *\n*            TABLE ENDS WITH HEX 'FF'                                 *\n*                                                                     *\n***********************************************************************\nSDSNTBL  EQU   *                   SYSTEM DATA SET NAMES\n         DC    AL1(4),C'SYS1.'\n         DC    AL1(3),C'LIB.'\n         DC    AL1(3),C'LNK.'\n         DC    AL1(3),C'LNS.'\n         DC    X'FF'\n*\n***********************************************************************\n*        FORMAT OF TABLE IS AS FOLLOWS                                *\n*        1)  A 1 BYTE UNIT ATTRIBUTE TYPE                             *\n*            X'01'  UNIMPORTANT DEVICE TYPE                           *\n*            X'02'  TAPE DEVICE                                       *\n*            X'04'  PRIVATE MOUNT DISK DEVICE                         *\n*            X'08'  VIO                                               *\n*        2)  A 1 BYTE MACHINE LENGTH OF ENTRY                         *\n*        3)  AN 8 BYTE FIELD CONTAINING THE DEVICE NAME LEFT JUSTIFIED*\n***********************************************************************\nDEVTABLE EQU   *              DEVICE NAME TABLE\n         DC    X'01',X'04',CL8'SYSDA'    SYSDA\n         DC    X'01',X'04',CL8'SYSSQ'    SYSDA\n         DC    X'01',X'03',CL8'DISK'     SYSDA\n         DC    X'01',X'07',CL8'SYSALLDA' SYSDA\n         DC    X'01',X'06',CL8'SCRATCH'  SYSDA\n         DC    X'01',X'03',CL8'3330'     SYSDA\n         DC    X'01',X'03',CL8'3350'     SYSDA\n         DC    X'01',X'03',CL8'3380'     SYSDA\n         DC    X'02',X'03',CL8'TAPE'     TAPE\n         DC    X'02',X'04',CL8'TAPE9'    TAPE\n         DC    X'02',X'04',CL8'TAPEC'    TAPE\n         DC    X'02',X'04',CL8'T6250'    TAPE\n         DC    X'02',X'04',CL8'T1600'    TAPE\n         DC    X'02',X'03',CL8'3400'     TAPE\n         DC    X'02',X'03',CL8'3480'     TAPE\n         DC    X'02',X'03',CL8'2400'     TAPE\n         DC    X'02',X'04',CL8'T3480'    TAPE\n         DC    X'04',X'03',CL8'PRIV'     PRIV\n         DC    X'08',X'02',CL8'VIO'      VIO\n         DC    X'08',X'03',CL8'VIOD'     VIO\n         DC    X'02',X'02',CL8'480'      TAPE\n         DC    X'02',X'02',CL8'481'      TAPE\n         DC    X'02',X'02',CL8'482'      TAPE\n         DC    X'02',X'02',CL8'483'      TAPE\n         DC    X'02',X'02',CL8'484'      TAPE\n         DC    X'02',X'02',CL8'485'      TAPE\n         DC    X'02',X'02',CL8'486'      TAPE\n         DC    X'02',X'02',CL8'487'      TAPE\n         DC    X'02',X'02',CL8'488'      TAPE\n         DC    X'02',X'02',CL8'489'      TAPE\n         DC    X'02',X'02',CL8'48A'      TAPE\n         DC    X'02',X'02',CL8'48B'      TAPE\n         DC    X'02',X'02',CL8'48C'      TAPE\n         DC    X'02',X'02',CL8'48D'      TAPE\n         DC    X'02',X'02',CL8'48E'      TAPE\n         DC    X'02',X'02',CL8'48F'      TAPE\n         DC    X'02',X'02',CL8'490'      TAPE\n         DC    X'02',X'02',CL8'491'      TAPE\n         DC    X'02',X'02',CL8'492'      TAPE\n         DC    X'02',X'02',CL8'493'      TAPE\n         DC    X'02',X'02',CL8'494'      TAPE\n         DC    X'02',X'02',CL8'495'      TAPE\n         DC    X'02',X'02',CL8'496'      TAPE\n         DC    X'02',X'02',CL8'497'      TAPE\n         DC    X'02',X'02',CL8'498'      TAPE\n         DC    X'02',X'02',CL8'499'      TAPE\n         DC    X'02',X'02',CL8'49A'      TAPE\n         DC    X'02',X'02',CL8'49B'      TAPE\n         DC    X'02',X'02',CL8'49C'      TAPE\n         DC    X'02',X'02',CL8'49D'      TAPE\n         DC    X'02',X'02',CL8'49E'      TAPE\n         DC    X'02',X'02',CL8'49F'      TAPE\n         DC    X'02',X'02',CL8'4A0'      TAPE\n         DC    X'02',X'02',CL8'4A1'      TAPE\n         DC    X'02',X'02',CL8'4A2'      TAPE\n         DC    X'02',X'02',CL8'4A3'      TAPE\n         DC    X'02',X'02',CL8'4A4'      TAPE\n         DC    X'02',X'02',CL8'4A5'      TAPE\n         DC    X'02',X'02',CL8'4A6'      TAPE\n         DC    X'02',X'02',CL8'4A7'      TAPE\n         DC    X'02',X'02',CL8'4A8'      TAPE\n         DC    X'02',X'02',CL8'4A9'      TAPE\n         DC    X'02',X'02',CL8'4AA'      TAPE\n         DC    X'02',X'02',CL8'4AB'      TAPE\n         DC    X'02',X'02',CL8'4AC'      TAPE\n         DC    X'02',X'02',CL8'4AD'      TAPE\n         DC    X'02',X'02',CL8'4AE'      TAPE\n         DC    X'02',X'02',CL8'4AF'      TAPE\n         DC    X'02',X'02',CL8'660'      TAPE\n         DC    10X'00'         END OF TABLE\n         EJECT\n***********************************************************************\n*        FORMAT OF TABLES IS AS FOLLOWS                               *\n*            1)  1 BYTE CLASS CODE APPLYING TO ENTRY                  *\n*            2)  1 BYTE MISC BIT SWITCHES                             *\n*            3)  2 BYTE FILLER                                        *\n*            4)  HALFWORD MAXIMUM TAPES PER STEP                      *\n*            5)  HALFWORD MAXIMUM PRIV UNITS PER STEP                 *\n*            6)  HALFWORD MAXIMUM TOTAL DEVICES PER STEP              *\n*            7)  HALFWORD MAXIMUM REGION PER STEP                     *\n*            8)  FULLWORD MAXIMUM CPU TIME FOR JOB IN SECONDS         *\n*                                                                     *\n*                                                                     *\n*       A CLASS MAY BE A SPECIAL \"MUST BE SPECIFIED\" CATAGORY         *\n*       AND ALSO BE A DEFAULT CLASS.  THIS ALLOWS A USER TO           *\n*       BE ABLE TO SELECT A MORE RESTRICTIVE CLASS THAN THE           *\n*       DEFAULT (IF HE WANTS TO).  IF THIS IS DONE, THE               *\n*       ENTRY CONTAINING THE \"MUSTSPEC\" FLAG MUST BE FIRST            *\n*       IN THE TABLE.                                                 *\n*                                                                     *\n***********************************************************************\nMUSTSPEC EQU   X'80'          THIS JOB CLASS MUST BE SPECIFIED\nHOLD     EQU   X'40'          THIS JOB CLASS REQUIRES OPERATOR HOLD\nNOPRTY   EQU   X'20'          THIS JOB CLASS DOES NOT ALLOW PRTY\nJCLASST  DS    0F             NORMAL TEST CLASS TABLE\n         DC    C'T',AL1(0),C'  '\n         DC         H'0',H'0',H'0',X'FFFF',F'120'\n         DC    C'X',AL1(0),C'  '\n         DC         H'0',H'0',H'0',X'FFFF',X'FFFFFFFF'\n         DC    C'A',AL1(0),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'U',AL1(MUSTSPEC),C'  '\n         DC         H'0',H'0',H'0',X'FFFF',X'FFFFFFFF'\n         DC    C'Z',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'M',AL1(MUSTSPEC+HOLD),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    4F'0'          END OF TABLE\n         SPACE 3\nJCLASSP  DS    0F             PRODUCTION CLASS TABLE\n         DC    C'B',AL1(0),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'C',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'D',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'E',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'F',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'G',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'H',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'I',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'J',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'K',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'L',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'M',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'N',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'O',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'P',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'Q',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'R',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'S',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'U',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'V',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'W',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    C'Y',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    4F'0'          END OF TABLE\n         SPACE 3\nJCLASSS  DS    0F             SPECIAL TECH SUPPORT CLASS TABLE\n         DC    C'S',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    4F'0'          END OF TABLE\n         SPACE 3\nJCLASSM  DS    0F             SPECIAL OPNS SUPPORT CLASS TABLE\n         DC    C'M',AL1(MUSTSPEC),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    4F'0'          END OF TABLE\n         SPACE 3\nJCLASSDF DS    0F             SPECIAL DEFAULT CLASS TABLE\n         DC    C'A',AL1(0),C'  '\n         DC         X'FFFF',X'FFFF',X'FFFF',X'FFFF',X'FFFFFFFF'\n         DC    4F'0'          END OF TABLE\n         EJECT\n***********************************************************************\n*        CONSTANTS USED BY EXIT                                       *\n***********************************************************************\n*\nBINZEROS DC    2F'0'               FULLWORD BINARY ZEROS\nBLANKS   DC    44C' '              CONSTANT STRING OF BLANKS\nMOVE1    MVC   JNAME(0),1(R2)      MOVE JOBNAME TO SAVE TABLE\nMOVE2    MVC   JACCTNO(0),1(R2)    MOVE ACCOUNT NO TO SAVE TABLE\nMOVE3    MVC   JPGMRNM(0),1(R2)    MOVE PROGRAMMER NAME TO SAVE TABLE\nMOVE4    MVC   SAVEPROC(0),1(R2)   MOVE JOB STEP NAME TO SAVE AREA\nMOVE5    MVC   EJSTEP(0),3(R2)     MOVE JOB STEP NAME TO TABLE\nMOVE6    MVC   EPSTEP(0),3(R2)     MOVE PROC STEP NAME TO TABLE\nMOVE7    MVC   EPGMNM(0),3(R2)     MOVE STEP PGM NAME TO TABLE\nMOVE8    MVC   TDDN(0),3(R2)       MOVE DDNAME TO TEMP DD ENTRY\nMOVE9    MVC   TDSN(0),3(R2)       MOVE DSN TO TEMP DD ENTRY\nMOVE10   MVC   REFDDN(0),1(R2)     MOVE DDNAME TO REFERBACK\nMOVE11   MVC   REFPSTEP(0),1(R2)   MOVE PROCSTEP NAME TO REFERBACK\nMOVE12   MVC   REFJSTEP(0),1(R2)   MOVE JOBSTEP NAME TO REFERBACK\nMOVE13   MVC   TVOLSER(0),3(R2)    SAVE 1ST VOLSER FROM DD\nMOVE14   MVC   TDSN(0),1(R4)       MOVE 1ST PART GDG DSN TO TEMP\nMOVE15   MVC   0(0,R5),1(R4)       MOVE 2ND PART GDG DSN TO TEMP\nMOVE16   MVC   JACCT(0),1(R2)      MOVE ACCOUNT NO TO WORK AREA\nMOVE17   MVC   LDSN(0),3(R2)       MOVE VOL=SER DSNAME TO SAVE\nPACK1    PACK  DOUBLE,1(0,R2)      PACK STEP REGION SIZE\nPACK2    PACK  DOUBLE,1(0,R2)      PACK UNIT COUNT\nPACK3    PACK  DOUBLE,1(0,R2)      PACK VOLUME COUNT\nPACK4    PACK  DOUBLE,1(0,R2)      PACK PROC STEP REGION OVERRIDE\nPACK5    PACK  DOUBLE,1(0,R2)      PACK JOB CPU TIME\nCOMPARE1 CLC   REFERBCK(0),EENTRY  SEE IF REFERBACK STEPS MATCH\nCOMPARE2 CLC   1(0,R2),2(R1)       SEE IF UNIT NAME IN TABLE\nCOMPARE3 CLC   1(0,R2),EPSTEP      SEE IF PROC OVERRIDE STEPNAME MATCH\nDEFTIME  DC    X'A9',X'01',X'04',CL4'0002',X'FE' DFLT CPU TIME INTEXT\nZEROES   DC    8C'0'               CHARACTER CONSTANT 8 ZEROES\nEDMASK   DC    X'402020202120'     EDIT MASK FOR MESSAGES\nGDGMASK  DC    C'G0000V00'         GDG SUFFIX MASK\nX#FFFF   DC    F'65535'            FULLWORD CONSTANT X'0000FFFF'\nMAXENTS  DC    Y(16384/ENTLEN)     MAX ENTRIES IN 16K TABLE\nGETLEN   DC    AL2(GETSIZE)        SIZE OF GETMAIN AREA\nF#2      DC    F'2'                FULLWORD CONSTANT '2'\nF#45     DC    F'45'               FULLWORD CONSTANT '45'\nF#120    DC    F'120'              FULLWORD CONSTANT '120'\nF#127    DC    F'127'              FULLWORD CONSTANT '127'\nF#900    DC    F'900'              FULLWORD CONSTANT '900'\nF#16384  DC    F'16384'            CONSTANT FULLWORD '16384'\nF#86400  DC    F'86400'            CONSTANT FULLWORD '86400'\nH#0      DC    H'0'                HALFWORD CONSTANT '0'\nH#1      DC    H'1'                HALFWORD CONSTANT '1'\nH#2      DC    H'2'                HALFWORD CONSTANT '2'\nH#3      DC    H'3'                HALFWORD CONSTANT '3'\nH#4      DC    H'4'                HALFWORD CONSTANT '4'\nH#5      DC    H'5'                HALFWORD CONSTANT '5'\nH#6      DC    H'6'                HALFWORD CONSTANT '6'\nH#7      DC    H'7'                HALFWORD CONSTANT '7'\nH#8      DC    H'8'                HALFWORD CONSTANT '8'\nH#10     DC    H'10'               HALFWORD CONSTANT '10'\nH#12     DC    H'12'               HALFWORD CONSTANT '12'\nH#20     DC    H'20'               HALFWORD CONSTANT '20'\nH#32     DC    H'32'               HALFWORD CONSTANT '32'\nH#35     DC    H'35'               HALFWORD CONSTANT '35'\nH#42     DC    H'42'               HALFWORD CONSTANT '42'\nH#44     DC    H'44'               HALFWORD CONSTANT '44'\nH#60     DC    H'60'               HALFWORD CONSTANT '60'\nH#90     DC    H'90'               HALFWORD CONSTANT '90'\nH#512    DC    H'512'              HALFWORD CONSTANT '512'\nH#5000   DC    H'5000'             HALFWORD CONSTANT '5000'\nP#0      DC    P'0'                PACKED CONSTANT '0'\nC#1440   DC    C'1440'             CHARACTER CONSTANT '1440'\nC#SYS1   DC    C'SYS1.'            SYS1. PREFIX CONSTANT\nC#JOBLIB DC    CL8'JOBLIB'         CHARACTER CONSTANT 'JOBLIB'\nC#STEPLI DC    CL8'STEPLIB'        CHARACTER CONSTANT 'STEPLIB'\nC#JOBCAT DC    CL8'JOBCAT'         CHARACTER CONSTANT 'JOBCAT'\nC#STEPCA DC    CL8'STEPCAT'        CHARACTER CONSTANT 'STEPCAT'\nC#MOUNT  DC    CL8'MOUNT'          CHARACTER CONSTANT 'MOUNT'\nC#OLD    DC    CL3'OLD'            CHARACTER CONSTANT 'OLD'\nC#SHR    DC    CL3'SHR'            CHARACTER CONSTANT 'SHR'\nC#NEW    DC    CL3'NEW'            CHARACTER CONSTANT 'NEW'\nC#MOD    DC    CL3'MOD'            CHARACTER CONSTANT 'MOD'\nC#KEEP   DC    CL4'KEEP'           CHARACTER CONSTANT 'KEEP'\nC#PASS   DC    CL4'PASS'           CHARACTER CONSTANT 'PASS'\nC#CATLG  DC    CL5'CATLG'          CHARACTER CONSTANT 'CATLG'\nC#DELETE DC    CL6'DELETE'         CHARACTER CONSTANT 'DELETE'\nC#UNCAT  DC    CL7'UNCATLG'        CHARACTER CONSTANT 'UNCATLG'\nC#98000  DC    CL5'98000'          CHARACTER CONSTANT '98000'\nC#INTRDR DC    CL6'INTRDR'         CHARACTER CONSTANT 'INTRDR'\nC#BLP    DC    CL3'BLP'            CHARACTER CONSTANT 'BLP'\nC#HOLD   DC    CL4'HOLD'           CHARACTER CONSTANT 'HOLD'\nC#CLASS  DC    CL5'CLASS'          CHARACTER CONSTANT 'CLASS'\nC#PRTY   DC    CL4'PRTY'           CHARACTER CONSTANT 'PRTY'\nNULLFILE DC    CL8'NULLFILE'       CHARACTER CONSTANT NULLFILE\n         SPACE\n*              PGM NAME THAT ADD JES2 RESOURCES\nPGMCICS  DC    C'DFHSIP'           CICS PGMNAME\nPGM7074  DC    C'IIOEM74'          7074 PGMNAME\nPGM1401  DC    C'IIQE14'           1401 PGMNAME\nPGMNDM   DC    C'APIFUN'           NDM PGMNAME\nPGMUC7   DC    C'SASSJJCL'         UCC7 LOAD PGMNAME\n         SPACE\nDUMPMSG1 DC    CL40'MAX ENTRIES IN CONVERTER TABLE EXCEEDED '\nHEADER1  DC    CL100' STMT NO. MESSAGE'\nHEADER2  DC    CL100'-                '\nPREFIX   DS    0CL11               NORMAL MESSAGE PREFIX\n         DC    X'402020202120',CL5' '\nESTAE    ESTAE STAEXIT,CT,XCTL=NO,PURGE=NONE,ASYNCH=NO,RECORD=YES,     X\n               TERM=NO,MF=L\nSDUMP    SDUMP HDR='JES2 J006STDS CONVERTER TIME ESTAE',MF=L\n         EJECT\nWORKAREA DSECT\nSAVEAREA DS    18F                 NEW SAVE AREA\nSAVEREGS DS    18F                 ROUTINE REGISTER SAVE AREA\nSTAEREGS DS    18F                 REGISTERS FOR ESTAE RECOVERY\nSTAESAVE DS    18F                 SAVE AREA FOR ESTAE ROUTINE\nPUTSAVE  DS    19F                 PUT SAVE AREA\nACTWORK  DS    F                   ACCOUNTING ROUTINE WORK AREA ADDRESS\nWORKADDR DS    F                   EXIT PARM LIST ADDRESS\nJCTADDR  DS    F                   ADDRESS OF JCT\nJQEADDR  DS    F                   ADDRESS OF JQE\nTEXTSTAR DS    F                   START ADDRESS OF INTERNAL TEXT\nSAVER13  DS    F                   SAVE AREA FOR REG 13 ON PUT RPL\nSUBWORK  DS    F                   ADDR OF TEXT PROCESSER WORK AREA\nSUBTABLE DS    F                   ADDRESS OF AREA FOR JCL STMT TABLE\nEOFIND   DS    C                   END OF FILE INDICATORS\nENDSTEP  EQU   1                   LAST STATEMENT OF STEP IND\nLASTBLK  EQU   2                   BLOCK WITH LAST EXEC STMT PROCESSED\nWTOSAVE  DS    4F                  SAVE AREA FOR REG 14 - 1 BEFORE WTO'\nDOUBLE   DS    D                   DOUBLE WORD FOR PACK & CVB\nFIRSTENT DS    F                   SAVE AREA FOR FIRST SAVE TABLE ENTRY\nLASTENT  DS    F                   SAVE AREA FOR LAST SAVE TABLE ENTRY\nLASTEXEC DS    F                   ADDR OF LAST EXEC TABLE ENTRY\nTAPECNT  DS    H                   COUNT OF TAPE UNITS USED IN STEP\nPRIVCNT  DS    H                   COUNT OF PRIV UNITS USED IN STEP\nENTCOUNT DS    H                   NUMBER OF ACTIVE ENTRIES IN TABLE\nUNITCOUN DS    XL1                 COUNT OF UNITS FOR THIS DD\n*        THIS MAY ALSO BE 'P' FOR PARALLEL MOUNTING\nSAVEPROC DS    CL8                 STEPNAME WHICH CALLS PROC\nPROCTEXT DS    F                   ADDR OF SAVED KEYWORD TEXT FROM PROC\nRETCODE  DS    F                   SAVE AREA FOR RETURN CODE\nPROCIND  DS    C                   PROCESS PROCEDURE TEXT INDICATOR\n*        X'01' INDICATES NEED TO PROCESS PROCEDURE OVERRIDE TEXT\nDDIND    DS    C                   DD RELATED INDICATORS\nDDBEGIN  EQU   1                   DD FIRST KEYWORD INDICATOR\nJOBIND   DS    C                   JOB RELATED INDICATORS\nJOBLIB   EQU   1                   JOB HAD A JOBLIB STMT\nJOBFAIL  EQU   2                   JOB FAILED EXIT TESTING\nJOBSTC   EQU   4                   JOB IS A STARTED TASK\nJOBTSO   EQU   8                   JOB IS A TSO LOGON\nJOBTECH  EQU   16                  JOB IS FOR SYSTEMS SUPPORT\nJOBPROD  EQU   32                  JOB IS A PRODUCTION JOB\nJOBTEST  EQU   64                  JOB IS A TEST JOB\nJOBOPER  EQU   128                 JOB IS A OPERATIONS JOB\nJOBIND2  DS    C                   JOB RELATED INDICATORS\nMOUNT    EQU   1                   JOB HAS DASD MOUNT AUTHORITY\nSEVERE   EQU   2                   A SEVERE ERROR HAS OCCURRED\nWARNING  EQU   4                   JOB WARNING MESSAGES WRITTEN\nLEGALCLS EQU   8                   JOB HAS A LEGAL CLASS\nJOBIND3  DS    X                   JOB CLASS INDICATORS FROM TABLE\nDISPIND  DS    C                   DD ENTRY DISPOSITION\nNEW      EQU   1                   DISP=NEW\nOLD      EQU   2                   DISP=OLD\nSHR      EQU   4                   DISP=SHR\nMOD      EQU   8                   DISP=MOD\nCATLG    EQU   16                  STEP COMPLETION DISP=CATLG\nPASS     EQU   32                  STEP COMPLETION DISP=PASS\nKEEP     EQU   64                  STEP COMPLETION DISP=KEEP\nDELETE   EQU   128                 STEP COMPLETION DISP=DELETE\nDISPIND1 DS    C                   DD ENTRY DISPOSITION\nUNCATLG  EQU   1                   STEP COMPLETION DISP=UNCATLG\nUNITIND  DS    C                   DD ENTRY UNIT TYPE\nTAPE     EQU   2                   UNIT USED WAS A TAPE\nPRIV     EQU   4                   UNIT USED WAS A PRIV DISK PACK\nVIO      EQU   8                   UNIT WAS VIO\nAFF      EQU   16                  UNIT WAS DETERMINED BY AFF\nUNITGDG  EQU   32                  UNIT TYPE(S) FROM GDG PROCESSING\nUNITFND  EQU   128                 UNIT TYPE HAS BEEN FOUND\nJACCT    DS    CL20                ACCOUNT NUMBER (1ST ACCT INFO FIELD)\nJOBNAME  DS    CL8                 JOB NAME\nTENTRY   DS    0CL59               TEMPORARY DD TEXT TABLE ENTRY\nTDDN     DS    CL8                 TEMP DDNAME\nTTYPE    DS    C                   TEMP UNIT TYPE\nTDSN     DS    CL44                TEMP DSN (FULL)\nTVOLSER  DS    CL6                 TEMP 1ST VOLSER OF DATA SET\nLDSN     DS    CL44                DSNAME USED BY LOCATE\nSVC26DSN DS    0CL44               DSNAME USED BY SVC26\nSVC26DSL DS    CL1                 LENGTH OF DSN\nSVC26DS  DS    CL43                ACTUAL DSNAME INDEX\nREFERBCK DS    0CL25               REFERBACK WORK AREA\nREFJSTEP DS    CL8                 REFERBACK JOBSTEP NAME\nREFPSTEP DS    CL8                 REFERBACK PROCSTEP NAME\nREFDDN   DS    CL8                 REFERBACK DDNAME\nREFUNIT  DS    C                   REFERBACK PREV UNIT TYPE\nREFDSN   DS    CL44                REFERBACK DSN\nREFVOL   DS    CL6                 REFERBACK PREF DD 1ST VOLSER\nVOLCNT   DS    XL1                 VOLUME COUNT FROM UNIT=\nSERCNT   DS    XL1                 SERIAL COUNT FROM VOL=SER=\nADDCOUNT DS    XL1                 WILL CONTAIN # OF UNITS FOR DD\nRECURS   DS    CL1                 RECURSIVE ABEND INDICATOR\nCARDNO   DS    F                   CARD NUMBER FOR MSG ROUTINE\nMSGCOUNT DS    F                   MESSAGE COUNT FOR MSG ROUTINE\nOUTRPL   DS    F                   ADDR OF OUTPUT RPL\nOUTACB   DS    F                   ADDR OF JOB MESSAGE DATASET ACB\nPARMADDR DS    F                   ADDR OF START OF CURRENT TEXT ENTRY\nSTEPCNTR DS    H                   MAX TAPES PER STEP USED\nMAXTAPE  DS    H                   MAX TAPES PER STEP USED\nMAXPRIV  DS    H                   MAX PRIVS PER STEP USED\nMAXTOTAL DS    H                   MAX TOTAL DEVICES PER STEP USED\nMAXREGN  DS    H                   MAX STEP REGION SIZE\nMAXTIME  DS    F                   MAXIMUM CPU TIME IN SECONDS\nDEVCLASS DS    X                   IOSVSUCB DEVICE TYPE\nSCANWORK DS    CL100               IOSVSUCB SCAN WORK AREA\nUCBADDR  DS    F                   ADDRESS OF UCB\nIOSVSUCB DS    F                   ADDRESS OF IOSVSUCB ROUTINE\nSCANPARM DS    0F                  IOSVSUCB PARM LIST\nSCANP1   DS    F                   ADDRESS OF WORK AREA\nSCANP2   DS    F                   ADDRESS OF DEVICE TYPE FIELD\nSCANP3   DS    F                   ADDRESS OF UCB RETURN AREA\n         SPACE\nRESOURCE DS    XL2                 JES2 RESOURCES\n*              RESOURCE BYTE ZERO\nTESTING  EQU   128                 JES2 'TESTING' RESOURCE\nPROD     EQU   64                  JES2 'PROD'  RESOURCE\nTAPES    EQU   32                  JES2 'TAPES' RESOURCE\nUSERPACK EQU   8                   JES2 'USERPACK' RESOURCE\nP1401    EQU   2                   JES2 '1401' RESOURCE\nNDM      EQU   1                   JES2 'NDM' RESOURCE\n*              RESOURCE - BYTE ONE(1)\nPCICS    EQU   128                 JES2 'CICS' RESOURCE\nP7074    EQU   64                  JES2 '7074' RESOURCE\nLONGJOB  EQU   8                   JES2 'LONGJOB' RESOURCE\nDEDICATE EQU   4                   JES2 'DEDICATE' RESOURCE\n*\nCLASSFLD DS    C                   CLASS AS DETERMINED FROM TABLE\nPRTY     DS    X                   PRTY AS DETERMINED FROM CPU TIME\n         SPACE\nINCLASS  DS    C                   CLASS FROM JOB TEXT RECORD\nU7TEST   DC    C' '                TEST FOR UCC7 LOAD JOB\nAUTHJOB  DS    CL8                 JOBNAME USED IN AUTHORIZATION CHECK\nCAMLST   CAMLST NAME,TDSN,,LOCAREA LOCATE PARAM AREA\n         DS    0D\nLOCAREA  DS    0CL266              LOCATE CAMLST WORK AREA\nCAMLCNT  DS    H                   VOLUMES IN LIST\nCAMLUNIT DS    0CL4                UNIT TYPE FOR 1ST VOLUME\nUCBTYP1  DS    CL1                 UCB TYPE BYTE 1\nUCBTYP2  DS    CL1                 UCB TYPE BYTE 2\nUCBTYP3  DS    CL1                 UCB TYPE BYTE 3\n*        X'80' IN UCBTYP3 INDICATES TAPE DEVICE\nUCBTYP4  DS    CL1                 UCB TYPE BYTE 4\nCAMVOL   DS    CL6                 1ST VOLSER IN DATA SET\n         DS    CL254               REST OF WORK AREA\nLASTUCB  DS    F                   SAVE AREA FOR LAST UCB ADDR PROCESSE\n         DS    CL1                 EDIT FILL CHAR FOR MSG PREFIX\nSTEPMSG  DS    0CL100              STEP RESOURCE MESSAGE\n         DS    CL10                MESSAGE PREFIX\nSTEPM    DC    CL90'FUN000I XXXXXXXX XXXXXXXX TAPES= XXXXX PACKS= XXXXXX\n                REGION= NNNNNK JTIME= XXXXX           '\n         DS    CL1                 EDIT FILL CHAR FOR MSG PREFIX\nJOBMSG   DS    0CL100              JOB CLASS MESSAGE\n         DS    CL10                MESSAGE PREFIX\nJOBM     DC    CL90'FUN000I CLASS SET TO X                             X\n                                                      '\nERRORMSG DS    0CL100              ERROR MESSAGE\n         DS    CL10                MESSAGE PREFIX\nERRORM   DC    CL90' '\nMSGPREF  DS    0CL11               ERROR MESSAGE PREFIX\n         DS    C                   EDIT FILL CHARACTER\nBUFFER   DS    0CL100              JES2 MESSAGE AREA\n         DS    CL10                REST OF MESSAGE PREFIX\nMSGTEXT  DS    CL90                TEXT OF ERROR MESSAGE\nMSGRPL   DS    19F                 SKELETON RPL FOR OUTPUT MSG DATA SET\nWTOLIST  DS    CL120               SET WTO LIST FORM\nPROCTXT  DS    CL512               SAVE AREA FOR PROC CARD TEXT\nCTGPL    DS    XL40                CATALOG MANAGEMENT PARAMETER LIST\nESTAEL   ESTAE STAEXIT,CT,XCTL=NO,PURGE=NONE,ASYNCH=NO,RECORD=YES,     X\n               TERM=NO,MF=L\nLESTAEL  EQU   *-ESTAEL\nSDUMPL   SDUMP HDR='JES2 J006STDS CONVERTER TIME ESTAE',MF=L\nLSDUMPL  EQU   *-SDUMPL\n         CNOP  0,4\nSVC26WRK DS    CL5000              SVC26 WORK AREA\nGETSIZE  EQU   *-WORKAREA          LENGTH OF WORK AREA\n         EJECT\nSAVTABLE DSECT\n***********************************************************************\n*        THIS TABLE HAS 3 ENTRY TYPES                                 *\n*            THE 1ST ENTRY IN THE TABLE WILL BE FOR THE JOB CARD      *\n*            THE 2ND ENTRY IN THE TABLE WILL BE FOR THE 1ST EXEC CARD *\n*            FOLLOWING THE EXEC ENTRY WILL BE ANY DD ENTRIES FOR THE  *\n*                STEP WHICH PASS OR CATLG PRIVATE DISK PACKS OR TAPES *\n*            THE EXEC CARD ENTRY AND SUBSEQUENT DD ENTRIES WILL BE    *\n*                REPEATED FOR ALL STEPS OF THE JOB.                   *\n***********************************************************************\nENTLEN   EQU   60                  LENGTH OF EACH TABLE ENTRY\nENTRYTYP DS    C                   TABLE ENTRY TYPE\nTYPEND   EQU   0                   SIGNIFIES END OF TABLE\nTYPJOB   EQU   1                   SIGNIFIES A JOB ENTRY\nTYPEXEC  EQU   2                   SIGNIFIES AN EXEC ENTRY\nTYPEDD   EQU   4                   SIGNIFIES A DD ENTRY\n***********************************************************************\n*                                                                     *\n*                      J O B                                          *\n*                                                                     *\n***********************************************************************\nJENTRY   DS    0CL59               JOB STATEMENT ENTRY\nJNAME    DS    CL8                 JOB NAME\nJPGMRNM  DS    CL10                PROGRAMMER NAME (1ST 10 BYTES ONLY)\nJACCTNO  DS    CL14                ACCOUNT NUMBER (1ST ACCT INFO FIELD)\nJACCTLEN DS    C                   ACCOUNT NUMBER LENGTH\n         ORG   JENTRY\n***********************************************************************\n*                                                                     *\n*                     E X E C                                         *\n*                                                                     *\n***********************************************************************\nEENTRY   DS    0CL59               EXEC STATEMENT ENTRY\nEJSTEP   DS    CL8                 JOB STEP NAME\nEPSTEP   DS    CL8                 PROC STEP NAME\nEPGMNM   DS    CL8                 PGM NAME\nELIBIND  DS    C                   STEP HAD JOBLIB OR STEPLIB\nESTEPLIB EQU   1                   STEPLIB PRESENT\nEJOBLIB  EQU   2                   JOBLIB PRESENT\nEREGIONK EQU   4                   REGION SPECIFIED IN 'K'\nEREGIONM EQU   8                   REGION SPECIFIED IN 'M'\nEREGION  DS    H                   STEP REGION SIZE\nETAPES   DS    H                   TAPE UNITS USED IN STEP\nEPRIVS   DS    H                   PRIV UNITS USED IN STEP\nECARDNO  DS    F                   CARD NUMBER OF THIS STATEMENT\n         ORG   JENTRY\n***********************************************************************\n*                                                                     *\n*                       D D                                           *\n*                                                                     *\n***********************************************************************\nDENTRY   DS    0CL59               DD STATEMENT ENTRY\nDDDN     DS    CL8                 DDNAME\nDTYPE    DS    C                   TYPE OF UNIT FOR THIS FILE\nDTAPE    EQU   2                   UNIT = TAPE\nDPRIV    EQU   4                   UNIT = PRIV OR PRIV-1\nDDSN     DS    CL44                DSN FOR THIS FILE\nDVOLSER  DS    CL6                 FIRST VOL/SER OF DATA SET\n         EJECT\nJ006STDS CSECT\nMSG0     DC    CL90'FUN100I XXXXXXXX XXXXXXXX TAPES= XXXXX PACKS= XXXXXX\n                REGION= NNNNNK JTIME= XXXXX           '\nMSG1     DC    CL90'FUN101I CLASS SET TO X                             X\n                                                      '\nMSG2     DC    CL90'FUN102I                                            X\n                                                       '\nMSG3     DC    CL90'FUN103I RESOURCES REQUIRED BY THE JOB EXCEED THOSE X\n               ALLOWED FOR THE SPECIFIED JOB CLASS     '\nMSG4     DC    CL90'FUN104I INTERNAL ERROR - MATCH WITHIN CLASS TABLE NX\n               OT FOUND                               '\nMSG5     DC    CL90'FUN105W NDM REQUESTS MUST BE ISSUED ONLY FROM A SINX\n               GLE STEP JOB                            '\nMSG6     DC    CL90'FUN106W ILLEGAL JOB CLASS REQUESTED BY A TEST JOB  X\n                                                       '\nMSG7     DC    CL90'FUN107I JOB BEING PLACED IN THE OPERATOR HOLD QUEUEX\n                 BECAUSE OF JOB REQUIREMENTS           '\nMESSAGES DS    0CL90               MESSAGE TABLE\nM1       DC    CL90'FUN001E INTERNAL ERROR - INVALID TEXT STATEMENT TYPX\n               E DETECTED                             '\nM2       DC    CL90'FUN002E JOBNAME, ACCOUNTING INFORMATION, OR JOBNAMEX\n                MISSING ON THE JOB CARD               '\nM3       DC    CL90'FUN003E LENGTH OF JOBNAME EXCEEDS MAXIMUM OF 8 CHARX\n               ACTERS                                 '\nM4       DC    CL90'FUN004E LENGTH OF PROGRAMMER NAME FIELD ON THE JOB X\n               CARD EXCEEDS MAXIMUM OF 20 CHARACTERS  '\nM5       DC    CL90'                                                   X\n                                                      '\nM6       DC    CL90'FUN006E TIME VALUE ON THE JOB CARD IS NOT NUMERIC  X\n                                                      '\nM7       DC    CL90'FUN007E UNAUTHORIZED USE OF TIME=1440 ON THE JOB CAX\n               RD                                     '\nM8       DC    CL90'FUN008E LENGTH OF THE STEP NAME ON THE EXECUTE CARDX\n                EXCEEDS MAXIMUM OF 8 CHARACTERS       '\nM9       DC    CL90'FUN009E LENGTH OF THE PROGRAM NAME ON THE EXECUTE CX\n               ARD EXCEEDS MAXIMUM OF 8 CHARACTERS    '\nM10      DC    CL90'FUN010E INVALID FORMAT FOR THE REGION PARAMETER ON X\n               THE EXECUTE CARD                       '\nM11      DC    CL90'FUN011E REGION SIZE ON THE EXECUTE CARD IS NOT NUMEX\n               RIC                                    '\nM12      DC    CL90'FUN012E INVALID FORMAT FOR THE TIME PARAMETER ON THX\n               E EXECUTE CARD                         '\nM13      DC    CL90'FUN013E UNAUTHORIZED USE OF TIME=1440 ON THE EXECUTX\n               E CARD                                 '\nM14      DC    CL90'FUN014E LENGTH OF THE DDNAME ON THE DD CARD EXCEEDSX\n                MAXIMUM OF 8 CHARACTERS               '\nM15      DC    CL90'FUN015E INVALID FORMAT FOR THE DSNAME PARAMETER ON X\n               THE DD CARD                            '\nM16      DC    CL90'FUN016E LENGTH OF THE DSNAME ON THE DD CARD EXCEEDSX\n                MAXIMUM OF 44 CHARACTERS              '\nM17      DC    CL90'FUN017E INVALID FORMAT FOR THE DISP PARAMETER ON THX\n               E DD CARD                              '\nM18      DC    CL90'FUN018E INVALID FORMAT FOR THE UNIT PARAMETER ON THX\n               E DD CARD                              '\nM19      DC    CL90'FUN019E UNIT COUNT WITHIN THE UNIT PARAMETER ON THEX\n                DD CARD IS NOT NUMERIC                '\nM20      DC    CL90'FUN020E INVALID FORMAT FOR THE VOLUME PARAMETER ON X\n               THE DD CARD                            '\nM21      DC    CL90'FUN021E VOLUME COUNT WITHIN THE VOLUME PARAMETER ONX\n                THE DD CARD IS NOT NUMERIC            '\nM22      DC    CL90'FUN022E LENGTH OF THE VOLSER PARAMETER(S) ON THE DDX\n                CARD EXCEEDS MAXIMUM OF 6 CHARACTERS  '\nM23      DC    CL90'FUN023W UNAUTHORIZED DISPOSITION SPECIFIED FOR A SYX\n               STEM DATA SET                          '\nM24      DC    CL90'FUN024E INTERNAL ERROR - LENGTH OF THE INTERNAL TEXX\n               T OF AN EXECUTE CARD EXCEEDS 512 CHARS '\nM25      DC    CL90'FUN025E LENGTH OF THE PROC STEP NAME ON THE EXECUTEX\n                CARD EXCEEDS MAXIMUM OF 8 CHARACTERS  '\nM26      DC    CL90'FUN026E INVALID FORMAT FOR THE REFERBACK SUBPARAMETX\n               ER ON THE DD CARD                      '\nM27      DC    CL90'FUN027W INVALID DISPOSITION ON A JOBLIB, STEPLIB, JX\n               OBCAT, OR STEPCAT DD CARD              '\nM28      DC    CL90'FUN028E THE LENGTH OF THE DSNAME ON A VOLUME REFERBX\n               ACK EXCEEDS A MAXIMUM OF 44 CHARACTERS '\nM29      DC    CL90'FUN029E THE REQUIRED ACCOUNTING FIELD ON THE JOB CAX\n               RD WAS NOT SPECIFIED                   '\nM30      DC    CL90'FUN030E INVALID FIRST UNION ACCOUNTING CODE SPECIFIX\n               ED ON THE JOB CARD                     '\nM31      DC    CL90'FUN031W UNAUTHORIZED USE OF JOBCAT OR STEPCAT DD STX\n               ATEMENT                                 '\nM32      DC    CL90'FUN032W UNAUTHORIZED ATTEMPT TO ALLOCATE THE JES2 IX\n               NTERNAL READER                          '\nM33      DC    CL90'FUN033W BIN NUMBER MUST BE SPECIFIED ON THE JOB CARX\n               D                                       '\nM34      DC    CL90'FUN034W UNAUTHORIZED USE OF PRTY PARAMETER ON OUTPUX\n               T STATEMENT                             '\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "J007ENDJ": {"ttr": 14855, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'WRITE SPECIAL END-OF-JOB MESSAGES'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS SMF EXIT PROGRAM WILL WRITE SPECIAL END-OF-JOB          *\n*        MESSAGES FOR PRODUCTION JOBS WHICH HAVE ABENDED OR           *\n*        HAVE FAILED WITH A JCL ERROR.  THE MESSAGE WILL BE           *\n*        NON-ROLL DELETABLE.  THE ABEND MESSAGE COULD BE WRITTEN      *\n*        FROM AN SMF EXIT, BUT THE JCL ERROR MESSAGE COULD NOT.       *\n*        NOTE THAT THIS EXIT REQUIRES THAT THE JQE BE MODIFIED        *\n*        TO ADD THE ABEND AND JCL ERROR BITS AND PROVIDE A BIT        *\n*        TO INDICATE THAT THIS MESSAGE HAS BEEN WRITTEN.              *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*            M A C R O S   U S E D   I N   J 0 0 7 E N D J            *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $CKPT        SYS1.HASPSRC                               *\n*        04)  $ENTRY       SYS1.HASPSRC                               *\n*        05)  $FREEBUF     SYS1.HASPSRC                               *\n*        06)  $GETBUF      SYS1.HASPSRC                               *\n*        07)  $HASPEQU     SYS1.HASPSRC                               *\n*        08)  $HASPGBL     SYS1.HASPSRC                               *\n*        09)  $HCT         SYS1.HASPSRC                               *\n*        10)  $JCT         SYS1.HASPSRC                               *\n*        11)  $JQE         SYS1.HASPSRC                               *\n*        12)  $KIT         SYS1.HASPSRC                               *\n*        13)  $MIT         SYS1.HASPSRC                               *\n*        14)  $MODEND      SYS1.HASPSRC                               *\n*        15)  $MODULE      SYS1.HASPSRC                               *\n*        16)  $MSG         SYS1.HASPSRC                               *\n*        17)  $PADDR       SYS1.HASPSRC                               *\n*        18)  $PCE         SYS1.HASPSRC                               *\n*        19)  $QSUSE       SYS1.HASPSRC                               *\n*        20)  $SAVE        SYS1.HASPSRC                               *\n*        21)  $RETURN      SYS1.HASPSRC                               *\n*        22)  $WTO         SYS1.HASPSRC                               *\n*        23)  IEESMCA      SYS1.AMODGEN                               *\n*        24)  IFGRPL       SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       1K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ007ENDJ $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='WRITE SPECIAL END-OF-JOB MESSAGES',              X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP SVT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $KIT,               GENERATE HASP KIT DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               RPL                 GENERATE MVS  RPL DSECT\n         TITLE 'WRITE SPECIAL END-OF-JOB MESSAGES'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREA                                            *\n*                                                                     *\n***********************************************************************\nWORKAREA DSECT\n         DS    CL(BUFSTART-BFPDSECT) ***** RESERVED BY JES2 *****\n$WTOWRK  DS    CL130               $WTO WORK AREA\nJ007ENDJ CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE007ENDJ $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLERS REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         LR    R10,R1              SET JCT ADDRESS\n         USING JCT,R10             SET ADDRESSABILITY TO JCT\n         L     R7,JCTJQE           LOAD OFFSET OF JQE\n         AL    R7,$JOBQPTR         GET ADDRESS OF JQE\n         USING JQE,R7              SET ADDRESSABILITY TO JQE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R0  - A CODE PASSED TO YOUR ROUTINE BY JES2.                 *\n*              0 - INDICATES THAT THE JCT HAS BEEN READ FROM SPOOL    *\n*              4 - INDICATES THAT THE JCT WILL BE WRITTEN TO SPOOL    *\n*        R1  - ADDRESS OF THE BUFFER THAT CONTAINS THE JCT            *\n*        R11 - ADDRESS OF THE HCT                                     *\n*        R13 - ADDRESS OF THE PCE                                     *\n*        R14 - RETURN ADDRESS                                         *\n*        R15 - ENTRY ADDRESS                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LTR   R0,R0               TEST ENTRY REASON CODE\n         BZ    RETURN0             ZERO, READ ONLY, NOT INTERESTED\n         TM    JQEXFLG2,JQEXENDJ   HAS END-OF-JOB MESSAGE BEEN DONE\n         BO    RETURN0             YES, JUST GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SEE IF JOB HAS JUST LEFT THE INPUT OR EXECUTION QUEUES.      *\n*                                                                     *\n***********************************************************************\n         TM    JQETYPE,$XEQ+$INPUT+$XMIT+$RECEIVE SEE IF FINISHED\n         BNZ   RETURN0             NO, JUST GET OUT\n***********************************************************************\n*                                                                     *\n*        GET A WORK AREA FOR THE EXIT                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R9,R1               SAVE WORK AREA ADDRESS\n         USING WORKAREA,R9         SET ADDRESSABILITY TO BUFFER\n***********************************************************************\n*                                                                     *\n*        FORMAT THE JOB ENDED MESSAGE                                 *\n*                                                                     *\n***********************************************************************\n         $QSUSE TYPE=WAIT          GET CONTROL OF THE SHARED QUEUES\n         OI    JQEXFLG2,JQEXENDJ   SET END-OF-JOB MESSAGE PROCESS IND\n         LR    R1,R7               SET JQE ADDRESS\n         $CKPT ID=JQE,ADDR=(R1)    TELL JES2 ABOUT THE UPDATE\n         MVC   $WTOWRK(L'MSG1),MSG1 INITIALIZE MSG1 WORK AREA\n         TM    JQEXFLG3,JQEXABND+JQEXJCLE SEE IF NORMAL TERMINATION\n         BZ    NORMAL              NO, GO ISSUE NORMAL MESSAGE\n         MVC   $WTOWRK+2+6(10),=C'(ABNORMAL)' ASSUME ABEND\n         TM    JQEXFLG3,JQEXABND   SEE IF ABENDED\n         BO    CKPROD              YES, BRANCH\n         MVC   $WTOWRK+2+6(10),=C'(JCLERROR)' ASSUME JCLERROR\nCKPROD   CLI   JQEXFLG1,JQEXPROD   SEE IF PRODUCTION\n         BNE   NORMAL              GO ISSUE NORMAL MESSAGE\n         $QSUSE TYPE=WAIT          GET CONTROL OF THE SHARED QUEUES\n         OI    JQEFLAG1,JQE1HLD1   TURN ON OPERATOR HOLD\n         LR    R1,R7               SET JQE ADDRESS\n         $CKPT ID=JQE,ADDR=(R1)    TELL JES2 ABOUT THE UPDATE\n         MVC   $WTOWRK(2),MSG2     CHANGE THE MESSAGE NUMBER\nNORMAL   LA    R1,$WTOWRK          LOAD ADDRESS OF MESSAGE\n         LA    R0,L'MSG1           LOAD LENGTH OF MESSAGE\n         $WTO  (R1),(R0),JOB=YES,CMB=NO,WAIT=NO,ROUTE=$MAIN,UCM=NO\n         B     EXIT                GO FREE WORK AREA AND EXIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FREE THE WORK AREA AND RETURN WITH THE APPROPRIATE           *\n*        RETURN CODE.                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nEXIT     $FREEBUF (R9)             FREE THE BUFFER\n         B     RETURN0             GET OUT\n         DROP  R9                  DROP ADDRESSABILITY TO THE BUFFER\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*                                                                     *\n***********************************************************************\nRETURN0  DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n***********************************************************************\n*                                                                     *\n*                   CONSTANTS USED IN THIS EXIT                       *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LTORG\n         EJECT\nMSG1     $MSG  995,'ENDED           '\nMSG2     $MSG  996,'ENDED           '\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "J007JCTU": {"ttr": 14859, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'UPDATE JCT USER HEADER WITH JQE USER FIELDS'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS SMF EXIT PROGRAM WILL UPDATE USER FIELDS IN THE JCT     *\n*        USER NETWORK JOB HEADER FROM THE USER FIELDS IN THE JQE.     *\n*        THIS WILL PRESERVE THESE VALUES ACROSS NJE OR SPOOL          *\n*        OFFLOAD/RELOAD PROCESSES.                                    *\n*                                                                     *\n*        THIS SHOULD BE THE LAST EXIT 7 ROUTINE TO INSURE THAT        *\n*        ANY JQE UPDATES IN OTHER EXIT 7 ROUTINES WILL BE             *\n*        REFLECTED IN THE JCT USER NETWORK JOB HEADER.                *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*            M A C R O S   U S E D   I N   J 0 0 7 J C T U            *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $ENTRY       SYS1.HASPSRC                               *\n*        04)  $FCSUHDR     SYS1.HASPSRC (USER)                        *\n*        05)  $HASPEQU     SYS1.HASPSRC                               *\n*        06)  $HASPGBL     SYS1.HASPSRC                               *\n*        07)  $HCT         SYS1.HASPSRC                               *\n*        08)  $JCT         SYS1.HASPSRC                               *\n*        09)  $JQE         SYS1.HASPSRC                               *\n*        10)  $MIT         SYS1.HASPSRC                               *\n*        11)  $MODEND      SYS1.HASPSRC                               *\n*        12)  $MODULE      SYS1.HASPSRC                               *\n*        13)  $NHD         SYS1.HASPSRC                               *\n*        14)  $NHDGET      SYS1.HASPSRC                               *\n*        15)  $PADDR       SYS1.HASPSRC                               *\n*        16)  $PCE         SYS1.HASPSRC                               *\n*        17)  $SAVE        SYS1.HASPSRC                               *\n*        18)  $RETURN      SYS1.HASPSRC                               *\n*        19)  IEESMCA      SYS1.AMODGEN                               *\n*        20)  IFGRPL       SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       1K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ007JCTU $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='UPDATE JCT USER HEADER WITH JQE USER FIELDS',    X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP SVT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $NHD,               GENERATE HASP NDH DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $SMF,               GENERATE HASP SMF DSECT             X\n               RPL,                GENERATE MVS  RPL DSECT             X\n               SMCA                GENERATE MVS  SMCA DSECT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        USER JOB HEADER                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         $FCSUHDR\nJ007JCTU CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE007JCTU $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLERS REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         LR    R10,R1              SET JCT ADDRESS\n         USING JCT,R10             SET ADDRESSABILITY TO JCT\n         L     R7,JCTJQE           LOAD OFFSET OF JQE\n         AL    R7,$JOBQPTR         GET ADDRESS OF JQE\n         USING JQE,R7              SET ADDRESSABILITY TO JQE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R0  - A CODE PASSED TO YOUR ROUTINE BY JES2.                 *\n*              0 - INDICATES THAT THE JCT HAS BEEN READ FROM SPOOL    *\n*              4 - INDICATES THAT THE JCT WILL BE WRITTEN TO SPOOL    *\n*        R1  - ADDRESS OF THE BUFFER THAT CONTAINS THE JCT            *\n*        R11 - ADDRESS OF THE HCT                                     *\n*        R13 - ADDRESS OF THE PCE                                     *\n*        R14 - RETURN ADDRESS                                         *\n*        R15 - ENTRY ADDRESS                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LTR   R0,R0               TEST ENTRY REASON CODE\n         BZ    RETURN0             ZERO, READ ONLY, NOT INTERESTED\n***********************************************************************\n*        FIND OUR SPECIAL NJE USER HEADER                             *\n***********************************************************************\n         LA    R8,JCTNJHDR         POINT TO START OF NETWORK HEADERS\n         USING FCSUHDR,R8          SET ADDRESSABILITY TO HEADERS\n         LH    R5,0(R8)            LOAD LENGTH OF NETWORK HEADERS\n         AR    R5,R8               GET END ADDRESS OF NETWORK HEADERS\n         LA    R8,4(R8)            LOAD START ADDRESS OF FIRST HEADER\nCKHD1    CR    R8,R5               SEE IF END OF HEADERS\n         BNL   CKHD3               YES, GET OUT\n         TM    FCSUHTYP,NTYPUSER   SEE IF USER HEADER\n         BNO   CKHD2               NO, GO GET NEXT ONE\n         CLC   FCSUHID,=CL4'FCSH'  SEE IF OUR HEADER\n         BE    CKHD4               YES, GO CHECK IT\nCKHD2    AH    R8,0(R8)            POINT TO NEXT HEADER\n         B     CKHD1               LOOP\nCKHD3    B     RETURN0             NO USER HEADER, JUST GET OUT\nCKHD4    DS    0H\n         EJECT\n***********************************************************************\n*                                                                     *\n*        UPDATE THE USER FIELDS IN THE JCT USER HEADER WITH           *\n*        USER FIELDS IN THE JQE.                                      *\n*                                                                     *\n***********************************************************************\n         MVC   FCSUHOWN,JQEXOWNR   SET OWNERID\n         MVC   FCSUHTHN,JQEXTHRN   SET THREAD NAME\n         MVC   FCSUHEXN,JQEXEXCN   SET EXCLUDE NAME\n         MVC   FCSUHRLN,JQEXRLSN   SET RELEASE NAME\n         MVC   FCSUHFL1,JQEXFLG1   SET FLAG1 FIELD\n         MVC   FCSUHFL2,JQEXFLG2   SET FLAG2 FIELD\n         MVC   FCSUHFL3,JQEXFLG3   SET FLAG3 FIELD\n         MVC   FCSUHFL4,JQEXFLG4   SET FLAG4 FIELD\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*                                                                     *\n***********************************************************************\nRETURN0  DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n***********************************************************************\n*                                                                     *\n*                   CONSTANTS USED IN THIS EXIT                       *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "J007JQEU": {"ttr": 15108, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'UPDATE JQE USER FIELDS AND WRITE SMF30 RECORD'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS SMF EXIT PROGRAM WILL UPDATE USER FIELDS IN THE JQE     *\n*        WITH INFORMATION FROM THE JCT.  THIS WILL INCLUDE            *\n*        JCLERROR/ABEND INDICATORS, TEST/PRODUCTION INDICATOR,        *\n*        SETUP REQUESTS FROM OTHER EXITS, AND OWNERID FIELD.          *\n*        ALSO FOR NJE JOBS, AN SMF TYPE 30 SUBTYPE 1 RECORD WILL      *\n*        BE WRITTEN TO PROVIDE ACCOUNTING INFORMATION FOR NJE         *\n*        PRINT JOBS WHICH IS CURRENTLY BEING LOST SINCE THE WRITER    *\n*        (TYPE6) AND THE PURGE (TYPE26) RECORDS DO NOT PROVIDE        *\n*        JOB ACCOUNTING.  THIS RECORD WILL ONLY BE PRODUCED IF        *\n*        THE APPROPRIATE NJE USER HEADER SECION IS PRESENT TO         *\n*        PROVIDE THE JOB ACCOUNTING INFORMATION.                      *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*            M A C R O S   U S E D   I N   J 0 0 7 J Q E U            *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $CKPT        SYS1.HASPSRC                               *\n*        04)  $ENTRY       SYS1.HASPSRC                               *\n*        05)  $FCSUHDR     SYS1.HASPSRC (USER)                        *\n*        06)  $GETSMFB     SYS1.HASPSRC                               *\n*        07)  $HASPEQU     SYS1.HASPSRC                               *\n*        08)  $HASPGBL     SYS1.HASPSRC                               *\n*        09)  $HCT         SYS1.HASPSRC                               *\n*        10)  $JCT         SYS1.HASPSRC                               *\n*        11)  $JQE         SYS1.HASPSRC                               *\n*        12)  $KIT         SYS1.HASPSRC                               *\n*        13)  $MIT         SYS1.HASPSRC                               *\n*        14)  $MODEND      SYS1.HASPSRC                               *\n*        15)  $MODULE      SYS1.HASPSRC                               *\n*        16)  $NHD         SYS1.HASPSRC                               *\n*        17)  $NHDGET      SYS1.HASPSRC                               *\n*        18)  $PADDR       SYS1.HASPSRC                               *\n*        19)  $PCE         SYS1.HASPSRC                               *\n*        20)  $QUESMFB     SYS1.HASPSRC                               *\n*        21)  $QSUSE       SYS1.HASPSRC                               *\n*        22)  $SAVE        SYS1.HASPSRC                               *\n*        23)  $SMF         SYS1.HASPSRC                               *\n*        24)  $RETURN      SYS1.HASPSRC                               *\n*        25)  IEESMCA      SYS1.AMODGEN                               *\n*        26)  IFASMFR      SYS1.AMODGEN                               *\n*        27)  IFGRPL       SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       1K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ007JQEU $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='UPDATE JQE USER FIELDS AND WRITE SMF30 RECORD',  X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP SVT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $KIT,               GENERATE HASP KIT DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $NHD,               GENERATE HASP NDH DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $SMF,               GENERATE HASP SMF DSECT             X\n               RPL,                GENERATE MVS  RPL DSECT             X\n               SMCA,               GENERATE MVS  SMCA DSECT            X\n               SSOB                GENERATE MVS  SSOB DSECTS\n         TITLE 'UPDATE JQE USER FIELDS AND WRITE SMF30 RECORD'\n         IFASMFR 30\n         EJECT\n***********************************************************************\n*                                                                     *\n*        USER JOB HEADER                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         $FCSUHDR\nJ007JQEU CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE007JQEU $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLERS REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         LR    R10,R1              SET JCT ADDRESS\n         USING JCT,R10             SET ADDRESSABILITY TO JCT\n         L     R7,JCTJQE           LOAD OFFSET OF JQE\n         AL    R7,$JOBQPTR         GET ADDRESS OF JQE\n         USING JQE,R7              SET ADDRESSABILITY TO JQE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R0  - A CODE PASSED TO YOUR ROUTINE BY JES2.                 *\n*              0 - INDICATES THAT THE JCT HAS BEEN READ FROM SPOOL    *\n*              4 - INDICATES THAT THE JCT WILL BE WRITTEN TO SPOOL    *\n*        R1  - ADDRESS OF THE BUFFER THAT CONTAINS THE JCT            *\n*        R11 - ADDRESS OF THE HCT                                     *\n*        R13 - ADDRESS OF THE PCE                                     *\n*        R14 - RETURN ADDRESS                                         *\n*        R15 - ENTRY ADDRESS                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LTR   R0,R0               TEST ENTRY REASON CODE\n         BZ    RETURN0             ZERO, READ ONLY, NOT INTERESTED\n***********************************************************************\n*        FIND OUR SPECIAL NJE USER HEADER                             *\n***********************************************************************\n         LA    R8,JCTNJHDR         POINT TO START OF NETWORK HEADERS\n         USING FCSUHDR,R8          SET ADDRESSABILITY TO HEADERS\n         LH    R5,0(R8)            LOAD LENGTH OF NETWORK HEADERS\n         AR    R5,R8               GET END ADDRESS OF NETWORK HEADERS\n         LA    R8,4(R8)            LOAD START ADDRESS OF FIRST HEADER\nCKHD1    CR    R8,R5               SEE IF END OF HEADERS\n         BNL   CKHD3               YES, GO ZERO THE HEADER ADDRESS\n         TM    FCSUHTYP,NTYPUSER   SEE IF USER HEADER\n         BNO   CKHD2               NO, GO GET NEXT ONE\n         CLC   FCSUHID,=CL4'FCSH'  SEE IF OUR HEADER\n         BE    CKHD4               YES, GO CHECK IT\nCKHD2    AH    R8,0(R8)            POINT TO NEXT HEADER\n         B     CKHD1               LOOP\nCKHD3    SLR   R8,R8               CLEAR USER HEADER ADDRESS\nCKHD4    DS    0H\n         EJECT\n***********************************************************************\n*                                                                     *\n*        UPDATE THE USER FIELDS IN THE JQE FROM INFORMATION           *\n*        IN THE JCT                                                   *\n*                                                                     *\n***********************************************************************\nCKBAD    CLI   JQEXFLG3,0          SEE IF ANY 'BAD' BITS ALREADY ON\n         BNE   CKTP                YES, GO CHECK TEST/PRODUCTION\n         CLI   JQETYPE,$INPUT      IS JOB PRE-CONVERTER/EXECUTION\n         BE    CKTP                YES, NO JCLERROR OR ABEND YET\n***********************************************************************\n*        CHECK FOR JCL ERROR OR ABEND INDICATORS                      *\n***********************************************************************\n         CLC   JCTCNVRC,=F'0'      SEE IF CONVERTER RETURN CODE = 0\n         BNE   JCLERR              NO, JCL ERROR\n         CLI   JCTJTFLG,SSJTJFAL   SEE IF JCL ERROR DURING EXECUTION\n         BE    JCLERR              YES, BRANCH\n         TM    JCTJTFLG,SSJTABND   SEE IF ABENDED\n         BO    ABEND               YES, BRANCH\n         B     CKTP                GO CHECK TEST/PRODUCTION\nJCLERR   BAL   R4,GETCKPT          GET CONTROL OF CHECKPOINT\n         OI    JQEXFLG3,JQEXJCLE   TURN ON JCL ERROR INDICATOR\n         BAL   R4,PUTCKPT          SCHEDULE REWRITE OF JQE\n         B     CKTP                GO CHECK TEST/PRODUCTION\nABEND    BAL   R4,GETCKPT          GET CONTROL OF CHECKPOINT\n         OI    JQEXFLG3,JQEXABND   TURN ON ABENDED INDICATOR\n         BAL   R4,PUTCKPT          SCHEDULE REWRITE OF JQE\n***********************************************************************\n*        CHECK FOR TEST OR PRODUCTION STATUS                          *\n***********************************************************************\nCKTP     CLI   JQEXFLG1,0          SEE IF TEST/PRODUCTION FLAG SET\n         BNE   CKHOLD              YES, GO CHECK FOR HOLD REQUEST\n***********************************************************************\n*        SEE IF WE HAVE OUR SPECIAL NJE USER HEADER                   *\n***********************************************************************\n         LTR   R8,R8               TEST USER HEADER ADDRESS\n         BZ    CKHOLD              NO, GO CHECK FOR HOLD REQUEST\n***********************************************************************\n*        CHECK THE NJE USER HEADER FOR PRODUCTION JOB ACCOUNTING      *\n***********************************************************************\nCKTP1    BAL   R4,GETCKPT          GET CONTROL OF CHECKPOINT\n         CLC   $OWNNODE,=H'1'      SEE IF JACKSONVILLE 9080\n         BE    CKTP1J              YES, GO HANDLE IT DIFFERENTLY\n         MVI   JQEXFLG1,JQEXTEST   DEFAULT TO TEST STATUS\n         CLC   FCSUHACT(2),=C'F0'  SEE IF PRODUCTION ACCOUNTING\n         BNE   CKTP2               NO, LEAVE IT TEST\n         MVI   JQEXFLG1,JQEXPROD   TURN ON PRODUCTION INDICATOR\n         B     CKTP2               GO SCHEDULE REWRITE OF JQE\nCKTP1J   MVI   JQEXFLG1,JQEXTEST   DEFAULT TO TEST STATUS\n         CLI   JCTJOBID,C'J'       SEE IF BATCH JOB\n         BNE   CKTP2               NO, LEAVE IT TEST\n         CLI   JCTJNAME+2,C'T'     SEE IF \"T\" IN 3RD POS JOBNAME\n         BE    CKTP2               YES, LEAVE IT TEST\n         MVI   JQEXFLG1,JQEXPROD   SET TO PRODUCTION STATUS\nCKTP2    BAL   R4,PUTCKPT          SCHEDULE REWRITE OF JQE\n***********************************************************************\n*        CHECK FOR OPERATOR HOLD REQUEST FROM ANOTHER EXIT            *\n***********************************************************************\nCKHOLD   CLI   JCTUSER0,C'O'       SEE IF HOLD REQUEST\n         BNE   CKOWN               NO, GO CHECK OWNERID\n         BAL   R4,GETCKPT          GET CONTROL OF CHECKPOINT\n         OI    JQEFLAG1,JQE1HLD1   TURN ON OPERATOR HOLD INDICATOR\n         BAL   R4,PUTCKPT          SCHEDULE REWRITE OF JQE\n         MVI   JCTUSER0,0          TURN OFF REQUEST\n***********************************************************************\n*                                                                     *\n*        EXTRACT JOB OWNERID FROM RACF/VM/ACF2 LOGONID                *\n*                                                                     *\n*                              NOTE                                   *\n*                                                                     *\n*        THE RACFID IN THE JES2 RECORD CAN CHANGE DURING JOB          *\n*        PROCESSING IF EARLY VERIFICATION IS REQUESTED.  THE          *\n*        FIRST RACFID WILL BE THE SUBMITTER'S AND IT WILL             *\n*        LATER BE CHANGED TO THE VALUE SPECIFIED IN THE               *\n*        USER= PARAMETER ON THE JOB CARD.  IN EITHER CASE, WE         *\n*        WANT THE LAST VALUE WHICH IS SET.                            *\n*                                                                     *\n*        IF THE OWNERID VALUE HAS BEEN SET FROM A THE OWNERID         *\n*        VALUE ON A JOBPARM STATEMENT, THEN THE VALUE MUST            *\n*        NEVER BE RESET.                                              *\n*                                                                     *\n***********************************************************************\nCKOWN    TM    JQEXFLG3,JQEXOWNJ   SEE IF OWNERID SET BY JOBPARM\n         BO    WRTSMF              YES, GO WRITE SMF TYPE 30 RECORD\n***********************************************************************\n*        SAVE JOBNAME AS OWNERID FOR STC OR TSU                       *\n***********************************************************************\n         CLI   JCTJOBID,C'J'       SEE IF A BATCH JOB\n         BE    CKOWN01             YES, BRANCH\n         CLI   JQEXOWNR,0          SEE IF OWNERID ALREADY SET\n         BNE   CKOWN04             YES, GET OUT\n         BAL   R4,GETCKPT          GET CONTROL OF CHECKPOINT\n         MVC   JQEXOWNR,JCTJNAME   MOVE JOBNAME TO LOGONID FIELD\n         BAL   R4,PUTCKPT          SCHEDULE REWRITE OF JQE\n         B     CKOWN04             GET OUT\n***********************************************************************\n*        SEARCH THE GENERAL NETWORK JOB HEADER FOR VM                 *\n***********************************************************************\nCKOWN01  $NHDGET HEADER=JCTNJHDR,TYPE=NTYPGEN,MOD=NJHG$MOD,            X\n               NOSEC=CKOWN02       GET NJE GENERAL SECTION\n         LR    R6,R1               SAVE GENERAL HEADER ADDRESS\n         USING NJHG,R6             SET ADDRESSABILITY TO GENERAL HDR\n         CLI   NJHGXEQU,C' '       SEE IF VM LOGONID SPECIFIED\n         BNH   CKOWN02             NO, NOT VM, GO CHECK FOR JES2\n         CLC   JQEXOWNR,NJHGXEQU   SEE IF SAME OWNERID AS LAST\n         BE    CKOWN04             YES, GET OUT\n         BAL   R4,GETCKPT          GET CONTROL OF CHECKPOINT\n         MVC   JQEXOWNR,NJHGXEQU   MOVE VM LOGONID FROM GENERAL HEADER\n         BAL   R4,PUTCKPT          SCHEDULE REWRITE OF JQE\n         B     CKOWN04             GET OUT\n         DROP  R6                  DROP ADDRESSABILITY TO GENERAL HDR\n***********************************************************************\n*        SEARCH THE JES2 JOB HEADER                                   *\n***********************************************************************\nCKOWN02  $NHDGET HEADER=JCTNJHDR,TYPE=NTYPJES2,MOD=NJH2$MOD,           X\n               NOSEC=CKOWN03       GET JES2 GENERAL HEADER\n         LR    R6,R1               SAVE JES2 HEADER ADDRESS\n         USING NJH2,R6             SET ADDRESSABILITY TO JES2 HEADER\n         CLI   NJH2USR,C' '        SEE IF LOGONID SPECIFIED\n         BNH   CKOWN03             NO, GO CHECK ANOTHER PLACE\n         CLC   JQEXOWNR,NJH2USR    SEE IF SAME OWNERID AS LAST\n         BE    CKOWN04             YES, GET OUT\n         BAL   R4,GETCKPT          GET CONTROL OF CHECKPOINT\n         MVC   JQEXOWNR,NJH2USR    YES, MOVE LOGONID TO JQE\n         BAL   R4,PUTCKPT          SCHEDULE REWRITE OF JQE\n         B     CKOWN04             GET OUT\n         DROP  R6                  DROP ADDRESSABILITY TO JES2 HEADER\n***********************************************************************\n*        SEARCH FOR AN ACF2 USER HEADER                               *\n***********************************************************************\nCKOWN03  $NHDGET HEADER=JCTNJHDR,TYPE=ACFUHDR,MOD=ACFUMOD,             X\n               NOSEC=CKOWN04       GET ACF2 HEADER\nACFUHDR  EQU   X'E0'               EQUATE FOR ACF2 HEADER TYPE ID\nACFUMOD  EQU   X'01'               EQUATE FOR ACF2 MODIFICATION ID\n         LR    R6,R1               SAVE JES2 HEADER ADDRESS\n         USING NJHU,R6             SET ADDRESSABILITY TO HEADERS\n         CLC   NJHUCODE,=CL4'ACF2' SEE IF ACF2 HEADER\n         BNE   CKOWN04             NO, NO WAY TO FIND THE OWNERID\n         CLC   JQEXOWNR,88(R6)     SEE IF SAME OWNERID AS LAST\n         BE    CKOWN04             YES, GET OUT\n         BAL   R4,GETCKPT          GET CONTROL OF CHECKPOINT\n         MVC   JQEXOWNR,88(R6)     YES, MOVE LOGONID FROM ACF2 HEADER\n         BAL   R4,PUTCKPT          SCHEDULE REWRITE OF JQE\nCKOWN04  DS    0H                  END OF FIND USERID ROUTINE\n         DROP  R6                  DROP ADDRESSABILITY TO USER SECTION\n         EJECT\n***********************************************************************\n*                                                                     *\n*        WRITE AN SMF TYPE 30 RECORD IF THIS IS AN NJE JOB            *\n*                                                                     *\n***********************************************************************\nWRTSMF   CLC   JCTXNODE,=X'0000'   SEE IF CONTAINS AN EXECUTION NODE\n         BE    RETURN0             NO, JUST GET OUT\n         CLC   JCTXNODE,$OWNNODE   SEE IF AN NJE JOB\n         BE    RETURN0             NO, JUST GET OUT\n***********************************************************************\n*        SEE IF TYPE 30 RECORD ALREADY WRITTEN                        *\n***********************************************************************\n         TM    JQEXFLG2,JQEXSMF    SEE IF SMF TYPE30 RCD ALREADY DONE\n         BO    RETURN0             YES, GET OUT\n***********************************************************************\n*        GET AN SMF BUFFER                                            *\n***********************************************************************\n         SPACE 3\n         $GETSMFB WAIT=YES         GET AN SMF BUFFER\n         LR    R9,R1               SAVE BUFFER ADDRESS\n         USING SMF,R9              SET ADDRESSABILITY TO SMF BUFFER\n         LA    R2,SMFRDW           POINT TO RECORD AREA IN BUFFER\n         USING SMFRCD30,R2         SET ADDRESSABILITY TO SMF RECORD\n***********************************************************************\n*        BUILD THE SMF TYPE 30 RECORD IN THE WORK AREA                *\n***********************************************************************\nBASELEN  EQU   SMF30EOR+L'SMF30EOR-SMFRCD30\nPSSLEN   EQU   SMF30PNM+L'SMF30PNM-SMF30PSS\nIDLEN    EQU   SMF30TID+L'SMF30TID-SMF30ID\nTYPE30LN EQU   BASELEN+PSSLEN+IDLEN\n***********************************************************************\n*        BUILD THE SMF TYPE 30 BASE SECTION                           *\n***********************************************************************\n         MVC   SMF30LEN,=AL2(TYPE30LN) SET BASE RECORD LENGTH\n         MVI   SMF30FLG,X'02'      SET SYSTEM IDENTIFIER TO VS2\n         MVI   SMF30RTY,30         SET RECORD TYPE TO TYPE 30\n         TIME  BIN                 GET DATE AND TIME\n         STCM  R0,15,SMF30TME      SAVE TIME IN RECORD\n         STCM  R1,15,SMF30DTE      SAVE DATE IN RECORD\n         MVC   SMF30SID,$SID       MOVE CPUID TO RECORD\n         MVC   SMF30WID,=CL4'TSO ' SET SUBSYSTEM ID TO TSO\n         CLI   JCTJOBID,C'T'       SEE IF A TSO USER\n         BE    SSIDOK              YES, BRANCH\n         MVC   SMF30WID,=CL4'STC ' SET SUBSYSTEM ID TO STC\n         CLI   JCTJOBID,C'S'       SEE IF A STARTED TASK\n         BE    SSIDOK              YES, BRANCH\n         MVC   SMF30WID,=CL4'JES2' SET SUBSYSTEM ID TO JES2\nSSIDOK   MVC   SMF30SOF,=A(BASELEN) SAVE OFFSET OF SUBSYSTEM SECTION\n         MVC   SMF30SLN,=AL2(PSSLEN) SAVE LENGTH OF SUBSYSTEM SECTION\n         MVC   SMF30SON,=H'1'      SAVE NUMBER OF IDENT SECTIONS\n         MVC   SMF30IOF,=A(BASELEN+PSSLEN) SAVE OFFSET OF IDENT SECT\n         MVC   SMF30ILN,=AL2(IDLEN) SAVE LENGTH OF IDENT SECTION\n         MVC   SMF30ION,=H'1'      SAVE NUMBER OF IDENT SECTIONS\n***********************************************************************\n*        BUILD THE SMF TYPE 30 SUBSYSTEM SECTION                      *\n***********************************************************************\n         LA    R3,SMF30RHD+BASELEN POINT TO START OF SUBSYSTEM SECTION\n         USING SMF30PSS,R3         SET ADDRESSABILITY TO SUBSYS SECTION\n         MVC   SMF30TYP,=H'1'      SET TO SUBTYPE 1\n         MVC   SMF30RVN,=C'01'     SET TO RECORD VERSION 1\n         MVC   SMF30PNM,=CL8'BOGUSNJE' SET SUBSYSTEM NAME\n         DROP  R3                  DROP ADDRESSABILITY TO SUBSYS SECT\n***********************************************************************\n*        BUILD THE SMF TYPE 30 IDENTIFICATION SECTION                 *\n***********************************************************************\n         LA    R3,SMF30RHD+BASELEN+PSSLEN POINT TO START OF IDENT SECTN\n         USING SMF30ID,R3          SET ADDRESSABILITY TO IDENT SECTION\n         MVC   SMF30JBN,JCTJNAME   SET JOB NAME\n         MVC   SMF30PGM,=CL8' '    SET BLANK PGM NAME\n         MVC   SMF30STM,=CL8'NJEPRINT' SET DUMMY STEP NAME\n         MVC   SMF30UIF,JCTUSEID   SET USER ID FIELD\n         MVC   SMF30JNM,JCTJOBID   SET JES JOB NUMBER\n         MVI   SMF30CLS,C' '       SET JOB CLASS TO BLANK\n         CLI   JCTJOBID,C'J'       SEE IF BATCH JOB\n         BNE   NOTBATCH            NO, BRANCH\n         MVC   SMF30CLS,JCTJCLAS   SET JOB CLASS\nNOTBATCH MVC   SMF30JPT+1(1),JCTPRIO SET JES INPUT PRIORITY\n         MVC   SMF30SIT,SMF30TME   SET STEP INIT TIME TO CURR TIME\n         MVC   SMF30STD,SMF30DTE   SET STEP INIT DATE TO CURR DATE\n         MVC   SMF30RST,JCTRDRON   SET READER START TIME\n         MVC   SMF30RSD,JCTRDTON   SET READER START DATE\n         MVC   SMF30RET,JCTRDROF   SET READER END TIME\n         MVC   SMF30RED,JCTRDTOF   SET READER END DATE\n         OI    SMF30RED+3,X'0F'    MAKE SURE DATE HAS A SIGN\n         MVC   SMF30USR,JCTPNAME   SET PROGRAMMER NAME\n         MVC   SMF30GRP,=CL8' '    SET BLANK RACF GROUP ID\n         MVC   SMF30RUD,=CL8' '    SET BLANK RACF USER ID\n***********************************************************************\n*        TRY TO FIND OUT THE RACF/ACF2 USERID                         *\n***********************************************************************\n***********************************************************************\n*        SAVE JOBNAME AS LOGONID FOR STC OR TSU                       *\n***********************************************************************\nFUID     CLI   JCTJOBID,C'J'       SEE IF A BATCH JOB\n         BE    FUID01              YES, BRANCH\n         MVC   SMF30RUD,JCTJNAME   NO,  MOVE JOBNAME TO LOGONID FIELD\n         B     FUID04              GET OUT\n***********************************************************************\n*        SEARCH THE JES2 JOB HEADER                                   *\n***********************************************************************\nFUID01   $NHDGET HEADER=JCTNJHDR,TYPE=NTYPJES2,MOD=NJHO$MOD,           X\n               NOSEC=FUID02        GET JES2 GENERAL HEADER\n         LR    R6,R1               SAVE JES2 HEADER ADDRESS\n         USING NJH2,R6             SET ADDRESSABILITY TO JES2 HEADER\n         CLI   NJH2USR,C' '        SEE IF LOGONID SPECIFIED\n         BNH   FUID02              NO, GO CHECK ANOTHER PLACE\n         MVC   SMF30RUD,NJH2USR    YES, MOVE LOGONID TO SMF RECORD\n         B     FUID04              GET OUT\n         DROP  R6                  DROP ADDRESSABILITY TO JES2 HEADER\n***********************************************************************\n*        SEARCH THE GENERAL NETWORK JOB HEADER FOR VM                 *\n***********************************************************************\nFUID02   $NHDGET HEADER=JCTNJHDR,TYPE=NTYPGEN,MOD=NJHG$MOD,            X\n               NOSEC=FUID03        GET NJE GENERAL SECTION\n         LR    R6,R1               SAVE GENERAL HEADER ADDRESS\n         USING NJHG,R6             SET ADDRESSABILITY TO GENERAL HDR\n         CLI   NJHGXEQU,C' '       SEE IF VM LOGONID SPECIFIED\n         BNH   FUID02A             NO, GO CHECK ANOTHER PLACE\n         MVC   SMF30RUD,NJHGXEQU   MOVE VM LOGONID FROM GENERAL HEADER\n         B     FUID04              GET OUT\nFUID02A  CLI   NJHGUSID,C' '       SEE IF TSO LOGONID SPECIFIED\n         BNH   FUID03              NO, GO CHECK ANOTHER PLACE\n         MVC   SMF30RUD,NJHGUSID   MOVE TSO LOGONID FROM GENERAL HEADER\n         B     FUID04              GET OUT\n         DROP  R6                  DROP ADDRESSABILITY TO GENERAL HDR\n***********************************************************************\n*        SEARCH FOR AN ACF2 USER HEADER                               *\n***********************************************************************\nFUID03   $NHDGET HEADER=JCTNJHDR,TYPE=ACFUHDR,MOD=ACFUMOD,             X\n               NOSEC=FUID04        GET ACF2 HEADER\n         LR    R6,R1               SAVE JES2 HEADER ADDRESS\n         USING NJHU,R6             SET ADDRESSABILITY TO ACF2 USER HDR\n         CLC   NJHUCODE,=CL4'ACF2' SEE IF ACF2 HEADER\n         BNE   FUID04              NO, NO WAY TO FIND THE OWNERID\n         MVC   SMF30RUD,88(R6)     YES, MOVE LOGONID FROM ACF2 HEADER\nFUID04   DS    0H                  END OF FIND USERID ROUTINE\n         DROP  R3                  DROP ADDRESSABILITY TO ID SECTION\n         DROP  R6                  DROP ADDRESSABILITY TO USER HDR RECD\n***********************************************************************\n*        BUILD THE SMF TYPE 30 ACCOUNTING SECTION                     *\n***********************************************************************\n         LTR   R8,R8               TEST USER HEADER ADDRESS\n         BZ    WRITESMF            NONE, BRANCH\n         LA    R3,SMF30RHD+BASELEN+PSSLEN+IDLEN POINT TO START OF ACCT\n         USING SMF30ACS,R3         SET ADDRESSABILITY TO ACCT SECTION\n         LH    R15,FCSUHACL        LOAD LENGTH OF ACCOUNTING FIELD\n         LTR   R15,R15             TEST LENGTH\n         BZ    WRITESMF            ZERO, NO ACCOUNTING FIELD\n         STC   R15,SMF30ACL        SAVE LENGTH OF ACCOUNTING FIELD\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MVACCT          MOVE ACCT TO RECORD\n***********************************************************************\n*        UPDATE BASE SECTION FOR VARIABLE ACCOUNTING SECTION          *\n***********************************************************************\n         LH    R15,FCSUHACL        RELOAD LENGTH OF ACCOUNTING FIELD\n         LA    R15,1(R15)          ADD 1 FOR LENGTH OF ACCT SECTION\n         LH    R1,SMF30LEN         LOAD LENGTH OF RECORD\n         AR    R1,R15              ADD LENGTH OF ACCOUNT SECTION\n         STH   R1,SMF30LEN         SAVE NEW RECORD LENGTH\n         MVC   SMF30AOF,=A(BASELEN+PSSLEN+IDLEN) LOAD OFFSET OF ACCT\n         STH   R15,SMF30ALN        SAVE LENGTH OF ACCT SECTION\n         MVC   SMF30AON,=H'1'      SAVE NUMBER OF ACCT SECTIONS\n         B     WRITESMF            GO WRITE SMF RECORD\nMVACCT   MVC   SMF30ACT(0),FCSUHACT **** EXECUTE ONLY ****\n***********************************************************************\n*        WRITE SMF TYPE 30 RECORD                                     *\n***********************************************************************\nWRITESMF $QUESMFB (R9)             WRITE THE SMF RECORD\n         BAL   R4,GETCKPT          GET CONTROL OF CHECKPOINT\n         OI    JQEXFLG2,JQEXSMF    TURN ON SMF RECORD WRITTEN INDICATOR\n         BAL   R4,PUTCKPT          SCHEDULE REWRITE OF JQE\n         B     RETURN0             GET OUT\n         DROP  R9                  DROP ADDRESSABILITY TO SMF BUFFER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GET CONTROL OF THE JES2 CHECKPOINT SO THAT THE JQE CAN       *\n*        BE UPDATED.                                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nGETCKPT  $QSUSE TYPE=WAIT          GET CONTROL OF THE SHARED QUEUES\n         BR    R4                  RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        TELL ABOUT THE CHANGE OF THE JQE SO THE JQE WILL BE          *\n*        REWRITTEN AT THE END OF THIS CHECKPOINT CYCLE.               *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nPUTCKPT  LR    R1,R7               SET JQE ADDRESS\n         $CKPT ID=JQE,ADDR=(R1)    SCHEDULE REWRITE OF JQE\n         BR    R4                  RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*                                                                     *\n***********************************************************************\nRETURN0  DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n***********************************************************************\n*                                                                     *\n*                   CONSTANTS USED IN THIS EXIT                       *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "J007RACF": {"ttr": 15362, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'PRESERVE RACF USERID ACROSS NJE NODES'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS EXIT WILL PRESERVE THE RACF USERID IN THE USER          *\n*        NJE JOB HEADER.  IT WILL RESTORE THIS FIELD WHENEVER         *\n*        NECESSARY.  THIS REQUIRES THAT AN APPROPRIATE NJE            *\n*        USER HEADER BE CREATED PRIOR TO ENTRY INTO THIS EXIT.        *\n*        SUPPORT IS ALSO CODED FOR PROPAGATION OF THE VM USERID       *\n*        AS WELL.                                                     *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                   JOHN V. HOOPER                                    *\n*                   FIRST UNION NATIONAL BANK                         *\n*                   301 S. COLLEGE ST                                 *\n*                   DC-7  FCS-12                                      *\n*                   CHARLOTTE, N.C.  28288                            *\n*                   (704) 374-2427                                    *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*            M A C R O S   U S E D   I N   J 0 0 7 R A C F            *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $CKPT        SYS1.HASPSRC                               *\n*        04)  $ENTRY       SYS1.HASPSRC                               *\n*        05)  $FCSUHDR     SYS1.HASPSRC (USER)                        *\n*        06)  $GETSMFB     SYS1.HASPSRC                               *\n*        07)  $HASPEQU     SYS1.HASPSRC                               *\n*        08)  $HASPGBL     SYS1.HASPSRC                               *\n*        09)  $HCT         SYS1.HASPSRC                               *\n*        10)  $JCT         SYS1.HASPSRC                               *\n*        11)  $JQE         SYS1.HASPSRC                               *\n*        12)  $KIT         SYS1.HASPSRC                               *\n*        13)  $MIT         SYS1.HASPSRC                               *\n*        14)  $MODEND      SYS1.HASPSRC                               *\n*        15)  $MODULE      SYS1.HASPSRC                               *\n*        16)  $NHD         SYS1.HASPSRC                               *\n*        17)  $NHDGET      SYS1.HASPSRC                               *\n*        18)  $PADDR       SYS1.HASPSRC                               *\n*        19)  $PCE         SYS1.HASPSRC                               *\n*        20)  $QSUSE       SYS1.HASPSRC                               *\n*        21)  $SAVE        SYS1.HASPSRC                               *\n*        22)  $SMF         SYS1.HASPSRC                               *\n*        23)  $RETURN      SYS1.HASPSRC                               *\n*        24)  IEESMCA      SYS1.AMODGEN                               *\n*        25)  IFGRPL       SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       1K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ007RACF $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='PRESERVE RACF USERID ACROSS NJE NODES',          X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP SVT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $KIT,               GENERATE HASP KIT DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $NHD,               GENERATE HASP NDH DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $SMF,               GENERATE HASP SMF DSECT             X\n               RPL,                GENERATE MVS  RPL DSECT             X\n               SMCA                GENERATE MVS  SMCA DSECT\n         TITLE 'PRESERVE RACF USERID ACROSS NJE NODES'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        USER JOB HEADER                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         $FCSUHDR\nJ007RACF CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE007RACF $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLERS REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         LR    R10,R1              SET JCT ADDRESS\n         USING JCT,R10             SET ADDRESSABILITY TO JCT\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R0  - A CODE PASSED TO YOUR ROUTINE BY JES2.                 *\n*              0 - INDICATES THAT THE JCT HAS BEEN READ FROM SPOOL    *\n*              4 - INDICATES THAT THE JCT WILL BE WRITTEN TO SPOOL    *\n*        R1  - ADDRESS OF THE BUFFER THAT CONTAINS THE JCT            *\n*        R11 - ADDRESS OF THE HCT                                     *\n*        R13 - ADDRESS OF THE PCE                                     *\n*        R14 - RETURN ADDRESS                                         *\n*        R15 - ENTRY ADDRESS                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LTR   R0,R0               TEST ENTRY REASON CODE\n         BZ    RETURN0             ZERO, READ ONLY, NOT INTERESTED\n         CLI   JCTJOBID,C'J'       SEE IF BATCH JOB\n         BNE   RETURN0             NO, NOT INTERESTED\n         CLI   JCTJCLAS,C'0'       SEE IF NUMERIC CLASS (XBM)\n         BNL   RETURN0             YES, NOT INTERESTED\n***********************************************************************\n*        FIND OUR SPECIAL NJE USER HEADER                             *\n***********************************************************************\n         LA    R8,JCTNJHDR         POINT TO START OF NETWORK HEADERS\n         USING FCSUHDR,R8          SET ADDRESSABILITY TO HEADERS\n         LH    R5,0(R8)            LOAD LENGTH OF NETWORK HEADERS\n         AR    R5,R8               GET END ADDRESS OF NETWORK HEADERS\n         LA    R8,4(R8)            LOAD START ADDRESS OF FIRST HEADER\nCKHD1    CR    R8,R5               SEE IF END OF HEADERS\n         BNL   RETURN0             YES, CANNOT SAVE ANYTHING\n         TM    FCSUHTYP,NTYPUSER   SEE IF USER HEADER\n         BNO   CKHD2               NO, GO GET NEXT ONE\n         CLC   FCSUHID,=CL4'FCSH'  SEE IF OUR HEADER\n         BE    CKHD4               YES, GO CHECK IT\nCKHD2    AH    R8,0(R8)            POINT TO NEXT HEADER\n         B     CKHD1               LOOP\n         SPACE 3\n***********************************************************************\n*        FIND THE GENERAL NJE HEADER                                  *\n***********************************************************************\nCKHD4    $NHDGET HEADER=JCTNJHDR,TYPE=NTYPGEN,MOD=NJHG$MOD,            X\n               NOSEC=RETURN0       GET NJE GENERAL SECTION\n         LR    R6,R1               SAVE GENERAL HEADER ADDRESS\n         USING NJHG,R6             SET ADDRESSABILITY TO GENERAL HDR\n         SPACE 3\n***********************************************************************\n*        FIND THE JES2 NJE HEADER                                     *\n***********************************************************************\nCKHD5    $NHDGET HEADER=JCTNJHDR,TYPE=NTYPJES2,MOD=NJH2$MOD,           X\n               NOSEC=RETURN0       GET JES2 GENERAL HEADER\n         LR    R7,R1               SAVE JES2 HEADER ADDRESS\n         USING NJH2,R7             SET ADDRESSABILITY TO JES2 HEADER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SAVE THE VERIFIED USERID (IF ONE)                            *\n*                                                                     *\n***********************************************************************\nSHDR     CLI   NJHGXEQU,C' '       SEE IF VM LOGONID SPECIFIED\n         BNH   SHDR1               NO, NOT VM, GO PROCESS JES2\n         CLC   NJHGUSID,NJHGXEQU   SEE IF JOB USERID = VM USERID\n         BNE   SHDR1               NO, GO PROCESS JES2\n         MVC   FCSUHUSR,NJHGXEQU   SAVE AS A VERIFIED USERID\n         B     RHDR                GO RESTORE VERIFIED USERID\nSHDR1    CLI   NJH2USR,C' '        SEE IF NJH2USR HAS BEEN SET\n         BNH   SHDR2               NO, BRANCH\n         TM    JCTFLAG2,JCT2RPAI   SEE IF RACF VERIFIED NJH2USR\n         BNO   SHDR2               NO, BRANCH\n         MVC   FCSUHUSR,NJH2USR    SAVE VERIFIED USER ID\n         B     RHDR                GO RESTORE VERIFIED USERID\nSHDR2    CLI   FCSUHUSR,C' '       SEE IF ALREADY HAVE A VERIFIED USER\n         BH    RHDR                YES, GO RESTORE VERIFIED USERID\n         MVC   FCSUHUSR,NJH2SUSR   SAVE SUBMITTERS USER ID\n         EJECT\n***********************************************************************\n*                                                                     *\n*        RESTORE THE VERIFIED USERID (IF REQUIRED)                    *\n*                                                                     *\n***********************************************************************\nRHDR     CLI   NJH2SUSR,C' '       SEE IF NJH2SUSR HAS BEEN SET\n         BH    RETURN0             YES, NO REASON TO RESTORE\n         CLI   NJH2USR,C' '        SEE IF NJH2USR HAS BEEN SET\n         BNH   RHDR1               NO, BRANCH\n         TM    JCTFLAG2,JCT2RPAI   SEE IF RACF VERIFIED NJH2USR\n         BO    RETURN0             YES, NO NEED TO RESTORE ANYTHING\nRHDR1    CLI   NJH2SUSR,C' '       SEE IF NJH2SUSR HAS BEEN SET\n         BH    RETURN0             YES, NO REASON TO RESTORE\nRHDR2    CLI   FCSUHUSR,C' '       SEE IF ANYTHING TO RESTORE\n         BNH   RETURN0             NO, RETURN TO JES2\n         MVC   NJH2SUSR,FCSUHUSR   RESTORE SUBMITTERS ID FROM HEADER\n         B     RETURN0             RETURN TO JES2\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*                                                                     *\n***********************************************************************\nRETURN0  LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\n         SPACE 3\n         DROP  R6                  DROP ADDRESSABILITY TO GENERAL HDR\n         DROP  R7                  DROP ADDRESSABILITY TO JES2 HEADER\n         DROP  R8                  DROP ADDRESSABILITY TO USER HEADER\n         EJECT\n***********************************************************************\n*                                                                     *\n*                   CONSTANTS USED IN THIS EXIT                       *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "J007REST": {"ttr": 15367, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'RESTORE JQE USER FIELDS FROM JCT USER HEADER'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS SMF EXIT PROGRAM WILL RESTORE USER FIELDS IN THE        *\n*        JQE FROM THE USER NETWORK JOB HEADER.  THIS WILL BE          *\n*        DONE WHEN THE JQE FIELDS HAVE NOT YET BEEN INITIALIZED       *\n*        BUT THE NETWORK JOB HEADER HAS VALID VALUES.  THIS WILL      *\n*        ONLY OCCUR WHEN RECEIVING A JOB FROM NJE OR ON A SPOOL       *\n*        RELOAD CONDITION.  THIS WILL PRESERVE THE JQE USER           *\n*        FIELDS UNDER THESE CONDITIONS.                               *\n*                                                                     *\n*        THIS SHOULD BE THE FIRST EXIT 7 ROUTINE SO THAT THE          *\n*        JQE FIELDS CAN BE RESTORED PRIOR TO FURTHER MODIFICATION     *\n*        BY ANY OTHER EXIT 7 ROUTINES.                                *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*            M A C R O S   U S E D   I N   J 0 0 7 R E S T            *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $CKPT        SYS1.HASPSRC                               *\n*        04)  $ENTRY       SYS1.HASPSRC                               *\n*        05)  $FCSUHDR     SYS1.HASPSRC (USER)                        *\n*        06)  $HASPEQU     SYS1.HASPSRC                               *\n*        07)  $HASPGBL     SYS1.HASPSRC                               *\n*        08)  $HCT         SYS1.HASPSRC                               *\n*        09)  $JCT         SYS1.HASPSRC                               *\n*        10)  $JQE         SYS1.HASPSRC                               *\n*        11)  $KIT         SYS1.HASPSRC                               *\n*        12)  $MIT         SYS1.HASPSRC                               *\n*        13)  $MODEND      SYS1.HASPSRC                               *\n*        14)  $MODULE      SYS1.HASPSRC                               *\n*        15)  $NHD         SYS1.HASPSRC                               *\n*        16)  $NHDGET      SYS1.HASPSRC                               *\n*        17)  $PADDR       SYS1.HASPSRC                               *\n*        18)  $PCE         SYS1.HASPSRC                               *\n*        19)  $QSUSE       SYS1.HASPSRC                               *\n*        20)  $SAVE        SYS1.HASPSRC                               *\n*        21)  $RETURN      SYS1.HASPSRC                               *\n*        22)  IEESMCA      SYS1.AMODGEN                               *\n*        23)  IFGRPL       SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       1K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ007REST $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='RESTORE JQE USER FIELDS FROM JCT USER HEADER',   X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP SVT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $KIT,               GENERATE HASP KIT DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $NHD,               GENERATE HASP NDH DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $SMF,               GENERATE HASP SMF DSECT             X\n               RPL,                GENERATE MVS  RPL DSECT             X\n               SMCA                GENERATE MVS  SMCA DSECT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        USER JOB HEADER                                              *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         $FCSUHDR\nJ007REST CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE007REST $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLERS REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         LR    R10,R1              SET JCT ADDRESS\n         USING JCT,R10             SET ADDRESSABILITY TO JCT\n         L     R7,JCTJQE           LOAD OFFSET OF JQE\n         AL    R7,$JOBQPTR         GET ADDRESS OF JQE\n         USING JQE,R7              SET ADDRESSABILITY TO JQE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R0  - A CODE PASSED TO YOUR ROUTINE BY JES2.                 *\n*              0 - INDICATES THAT THE JCT HAS BEEN READ FROM SPOOL    *\n*              4 - INDICATES THAT THE JCT WILL BE WRITTEN TO SPOOL    *\n*        R1  - ADDRESS OF THE BUFFER THAT CONTAINS THE JCT            *\n*        R11 - ADDRESS OF THE HCT                                     *\n*        R13 - ADDRESS OF THE PCE                                     *\n*        R14 - RETURN ADDRESS                                         *\n*        R15 - ENTRY ADDRESS                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LTR   R0,R0               TEST ENTRY REASON CODE\n         BZ    RETURN0             ZERO, READ ONLY, NOT INTERESTED\n***********************************************************************\n*        SEE IF JQE HAS USER FIELDS                                   *\n***********************************************************************\n         CLI   JQEXFLG1,C' '       SEE IF JOB TYPE ALREADY SET\n         BH    RETURN0             YES, GET OUT\n***********************************************************************\n*        FIND OUR SPECIAL NJE USER HEADER                             *\n***********************************************************************\n         LA    R8,JCTNJHDR         POINT TO START OF NETWORK HEADERS\n         USING FCSUHDR,R8          SET ADDRESSABILITY TO HEADERS\n         LH    R5,0(R8)            LOAD LENGTH OF NETWORK HEADERS\n         AR    R5,R8               GET END ADDRESS OF NETWORK HEADERS\n         LA    R8,4(R8)            LOAD START ADDRESS OF FIRST HEADER\nCKHD1    CR    R8,R5               SEE IF END OF HEADERS\n         BNL   CKHD3               YES, GET OUT\n         TM    FCSUHTYP,NTYPUSER   SEE IF USER HEADER\n         BNO   CKHD2               NO, GO GET NEXT ONE\n         CLC   FCSUHID,=CL4'FCSH'  SEE IF OUR HEADER\n         BE    CKHD4               YES, GO CHECK IT\nCKHD2    AH    R8,0(R8)            POINT TO NEXT HEADER\n         B     CKHD1               LOOP\nCKHD3    B     RETURN0             NO USER HEADER, JUST GET OUT\nCKHD4    DS    0H\n         EJECT\n***********************************************************************\n*                                                                     *\n*        UPDATE THE USER FIELDS IN THE JCT USER HEADER WITH           *\n*        USER FIELDS IN THE JQE IF THEY HAVE BEEN PREVIOUSLY          *\n*        SET.  THIS WILL OCCUR FOR NJE JOBS AS WELL AS FOR            *\n*        SPOOL OFFLOAD/RELOAD SITUATIONS.                             *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n*        SEE IF NETWORK JOB HEADER HAS VALID INFORMATION              *\n***********************************************************************\n         CLI   FCSUHFL1,C' '       SEE IF JOB TYPE ALREADY SET\n         BNH   RETURN0             NO, GET OUT\n         $QSUSE ,                  GET CONTROL OF THE CHECKPOINT\n         MVC   JQEXOWNR,FCSUHOWN   SET OWNERID\n         MVC   JQEXTHRN,FCSUHTHN   SET THREAD NAME\n         MVC   JQEXEXCN,FCSUHEXN   SET EXCLUDE NAME\n         MVC   JQEXRLSN,FCSUHRLN   SET RELEASE NAME\n         MVC   JQEXFLG1,FCSUHFL1   SET FLAG1 FIELD\n         MVC   JQEXFLG2,FCSUHFL2   SET FLAG2 FIELD\n         MVC   JQEXFLG3,FCSUHFL3   SET FLAG3 FIELD\n         MVC   JQEXFLG4,FCSUHFL4   SET FLAG4 FIELD\n         LR    R1,R7               SET JQE ADDRESS\n         $CKPT ID=JQE,ADDR=(R1)    TELL JES2 ABOUT THE CHANGES\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*                                                                     *\n***********************************************************************\nRETURN0  DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n***********************************************************************\n*                                                                     *\n*                   CONSTANTS USED IN THIS EXIT                       *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "J007RLSE": {"ttr": 15371, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'PERFORM /*RELEASE REQUEST PROCESSING'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM WILL PERFORM RELEASE PROCESSING       *\n*        AT JOB TERMINATION FOR JOBS WHICH REQUEST THAT A JOB         *\n*        BE RELEASED FROM USER HOLD UPON SUCCESSFUL COMPLETION        *\n*        OF PROCESSING.  ALL JOBS OF THE RELEASE NAME WILL BE         *\n*        RELEASED FROM USER HOLD IF THE JQEXOWN NAMES MATCH.          *\n*        EACH JOB THAT IS RELEASED WILL BE ACCOMPANIED BY A           *\n*        MESSAGE TO THAT EFFECT.  IF NO JOB(S) CAN BE FOUND, A        *\n*        MESSAGE FOR THAT ERROR WILL ALSO BE ISSUED.                  *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*            M A C R O S   U S E D   I N   J 0 0 7 R L S E            *\n*                                                                     *\n*        01)  $#POST       SYS1.HASPSRC                               *\n*        02)  $BUFFER      SYS1.HASPSRC                               *\n*        03)  $CAT         SYS1.HASPSRC                               *\n*        04)  $CKPT        SYS1.HASPSRC                               *\n*        05)  $ENTRY       SYS1.HASPSRC                               *\n*        06)  $FREEBUF     SYS1.HASPSRC                               *\n*        07)  $GETBUF      SYS1.HASPSRC                               *\n*        08)  $HASPEQU     SYS1.HASPSRC                               *\n*        09)  $HASPGBL     SYS1.HASPSRC                               *\n*        10)  $HCT         SYS1.HASPSRC                               *\n*        11)  $JCT         SYS1.HASPSRC                               *\n*        12)  $JQE         SYS1.HASPSRC                               *\n*        13)  $KIT         SYS1.HASPSRC                               *\n*        14)  $MIT         SYS1.HASPSRC                               *\n*        15)  $MODEND      SYS1.HASPSRC                               *\n*        16)  $MODULE      SYS1.HASPSRC                               *\n*        17)  $MSG         SYS1.HASPSRC                               *\n*        18)  $PADDR       SYS1.HASPSRC                               *\n*        19)  $PCE         SYS1.HASPSRC                               *\n*        20)  $POST        SYS1.HASPSRC                               *\n*        21)  $SAVE        SYS1.HASPSRC                               *\n*        22)  $RETURN      SYS1.HASPSRC                               *\n*        23)  $WTO         SYS1.HASPSRC                               *\n*        24)  IEESMCA      SYS1.AMODGEN                               *\n*        25)  IFGRPL       SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       1K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ007RLSE $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='PERFORM /*RELEASE REQUEST PROCESSING',           X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP SVT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $KIT,               GENERATE HASP KIT DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               WPL,                GENERATE MVS  WPL DSECT             X\n               RPL                 GENERATE MVS  RPL DSECT\n         TITLE 'PERFORM /*RELEASE REQUEST PROCESSING'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREA                                            *\n*                                                                     *\n***********************************************************************\nWORKAREA DSECT\n         DS    CL(BUFSTART-BFPDSECT) ***** RESERVED BY JES2 *****\nDBL      DS    D                   DOUBLE WORK WORK AREA\nRLSENAME DS    CL8                 RELEASE NAME\nOWNERID  DS    CL8                 THE OWNER OF THE JOB\nRLSEIND  DS    X                   MISCELLANEOUS RELEASE INDICATORS\nRELEASED EQU   X'80'               AT LEASE ONE JOB HAS BEEN RELEASED\nJQEADDR  DS    F                   ADDRESS OF CURRENT JQE\nJQENBR   DS    F                   JQE NUMBER BEING REQUESTED\n$WTOWRK  DS    CL130               $WTO WORK AREA\nJ007RLSE CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE007RLSE $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLERS REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         LR    R10,R1              SET JCT ADDRESS\n         USING JCT,R10             SET ADDRESSABILITY TO JCT\n         L     R7,JCTJQE           LOAD OFFSET OF JQE\n         AL    R7,$JOBQPTR         GET ADDRESS OF JQE\n         USING JQE,R7              SET ADDRESSABILITY TO JQE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R0  - A CODE PASSED TO YOUR ROUTINE BY JES2.                 *\n*              0 - INDICATES THAT THE JCT HAS BEEN READ FROM SPOOL    *\n*              4 - INDICATES THAT THE JCT WILL BE WRITTEN TO SPOOL    *\n*        R1  - ADDRESS OF THE BUFFER THAT CONTAINS THE JCT            *\n*        R11 - ADDRESS OF THE HCT                                     *\n*        R13 - ADDRESS OF THE PCE                                     *\n*        R14 - RETURN ADDRESS                                         *\n*        R15 - ENTRY ADDRESS                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LTR   R0,R0               TEST ENTRY REASON CODE\n         BZ    RETURN0             ZERO, READ ONLY, NOT INTERESTED\n         TM    JQEXFLG2,JQEXRLSE   DOES JOB HAVE RELEASE REQUESTS\n         BNO   RETURN0             NO, JUST GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SEE IF JOB HAS JUST LEFT THE INPUT OR EXECUTION QUEUES.      *\n*                                                                     *\n***********************************************************************\n         TM    JQETYPE,$XEQ+$INPUT+$XMIT+$RECEIVE SEE IF FINISHED\n         BNZ   RETURN0             NO, JUST GET OUT\n***********************************************************************\n*                                                                     *\n*        GET A WORK AREA FOR THE EXIT                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         $GETBUF TYPE=HASP,WAIT=YES GET A WORK AREA\n         LR    R9,R1               SAVE WORK AREA ADDRESS\n         USING WORKAREA,R9         SET ADDRESSABILITY TO BUFFER\n***********************************************************************\n*                                                                     *\n*        SAVE STUFF FROM OUR JQE TO TEST OTHER JQE'S                  *\n*                                                                     *\n***********************************************************************\n         MVC   RLSENAME,JQEXRLSN   SAVE THE RELEASE NAME\n         MVC   OWNERID,JQEXOWNR    SAVE THE JOB OWNERID\n         XC    RLSEIND,RLSEIND     CLEAR THE MISC SWITCHES\n         XC    JQENBR,JQENBR       CLEAR THE JQE NUMBER\n         ST    R7,JQEADDR          SAVE ADDRESS OF CURRENT JQE\n         TM    JQEXFLG3,JQEXABND+JQEXJCLE SEE IF ABEND OR JCL ERROR\n         BNZ   FAILURE             YES, BRANCH\n***********************************************************************\n*                                                                     *\n*        LOOK AT ALL OTHER JQE'S FOR THE FOLLOWING                    *\n*                                                                     *\n*        1)  THE JOBNAME MUST MATCH OUR RELEASE NAME                  *\n*        2)  THE OWNERID MUST MATCH OUR OWNERID                       *\n*        3)  THE JOB MUST BE ON USER HOLD                             *\n*                                                                     *\n***********************************************************************\nJQELOOP  L     R1,JQENBR           LOAD LAST JQE NUMBER\n         LA    R1,1(R1)            ADD 1 TO JQE NUMBER\n         ST    R1,JQENBR           SAVE NEW JQE NUMBER\n         CH    R1,=H'9999'         SEE IF IT EXCEEDS THE MAX\n         BH    LASTJQE             YES, GET OUT\n         $QLOC (R1)                GET THE NEXT JQE\n         BZ    JQELOOP             ZERO, NOT FOUND, LOOP\n         LR    R7,R1               SET THE JQE ADDRESS\n         CLC   JQEJNAME,RLSENAME   SEE IF JOB NAME MATCHES\n         BNE   JQELOOP             NO, LOOP\n         CLC   JQEXOWNR,OWNERID    SEE IF JOB BELONGS TO THIS USER\n         BNE   JQELOOP             NO, LOOP\n         TM    JQEXFLG2,JQEXUHLD   SEE IF JOB ON USER HOLD\n         BNO   JQELOOP             NO, LOOP\n         $QSUSE TYPE=WAIT          GET CONTROL OF THE SHARED QUEUES\n         NI    JQEXFLG2,255-JQEXUHLD TURN OFF USER HOLD BIT\n         $POST $HASPECF,(JOB,CNVT,HOPE,PURGE),MASPOST=YES\n         $#POST TYPE=JQE,ADDR=(R1) TELL OUTPUT PROCESSOR ABOUT CHANGES\n         LR    R1,R7               SET JQE ADDRESS\n         $CKPT ID=JQE,ADDR=(R1)    TELL JES2 TO CHECKPOINT THE CHGS\n         MVC   $WTOWRK(L'MSG1),MSG1 INITIALIZE MSG1 WORK AREA\n         MVC   $WTOWRK+2+4(8),JQEJNAME SET JOB NAME IN MESSAGE\n         LH    R1,JQEJOBNO         LOAD JOB NUMBER\n         CVD   R1,DBL              CONVERT TO PACKED\n         OI    DBL+7,X'0F'         MAKE PRINTABLE\n         UNPK  $WTOWRK+2+18(4),DBL UNPACK JOB NUMBER\n         MVC   $WTOWRK+2+14(3),=C'TSU' ASSUME A TSO USER\n         TM    JQEFLAG3,JQE3TSU    SEE IF A TSO USER\n         BO    PUTMSG              YES, BRANCH\n         MVC   $WTOWRK+2+14(3),=C'STC' ASSUME A STARTED TASK\n         TM    JQEFLAG3,JQE3STC    SEE IF A STARTED TASK\n         BO    PUTMSG              YES, BRANCH\n         MVC   $WTOWRK+2+14(3),=C'JOB' ASSUME A BATCH JOB\nPUTMSG   LA    R1,$WTOWRK          LOAD ADDRESS OF MESSAGE\n         LA    R0,L'MSG1           LOAD LENGTH OF MESSAGE\n         $WTO  (R1),(R0),JOB=YES,CMB=NO,WAIT=NO,ROUTE=$MAIN+$LOG,      X\n               UCM=NO,CLASS=$NORMAL\n         OI    RLSEIND,RELEASED    TURN ON JOB RELEASED INDICATOR\n         B     JQELOOP             GO GET NEXT JQE\nLASTJQE  TM    RLSEIND,RELEASED    SEE IF ANY JOB(S) RELEASED\n         BO    EXIT                YES, DONE\n         MVC   $WTOWRK(L'MSG2),MSG2 INITIALIZE MSG2 WORK AREA\n         MVC   $WTOWRK+2+4(8),RLSENAME SET RELEASE NAME IN MESSAGE\n         LA    R1,$WTOWRK          LOAD ADDRESS OF MESSAGE\n         LA    R0,L'MSG2           LOAD LENGTH OF MESSAGE\n         $WTO  (R1),(R0),JOB=YES,CMB=NO,WAIT=NO,ROUTE=$MAIN+$LOG,      X\n               UCM=NO,CLASS=$NORMAL\n         B     EXIT                DONE\nFAILURE  MVC   $WTOWRK(L'MSG3),MSG3 INITIALIZE MSG2 WORK AREA\n         MVC   $WTOWRK+2+4(8),RLSENAME SET RELEASE NAME IN MESSAGE\n         LA    R1,$WTOWRK          LOAD ADDRESS OF MESSAGE\n         LA    R0,L'MSG3           LOAD LENGTH OF MESSAGE\n         $WTO  (R1),(R0),JOB=YES,CMB=NO,WAIT=NO,ROUTE=$MAIN+$LOG,      X\n               UCM=NO,CLASS=$NORMAL\n         B     EXIT                DONE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FREE THE WORK AREA AND RETURN WITH THE APPROPRIATE           *\n*        RETURN CODE.                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nEXIT     $QSUSE TYPE=WAIT          GET CONTROL OF THE SHARED QUEUES\n         L     R7,JQEADDR          LOAD OUR JQE ADDRESS\n         NI    JQEXFLG2,255-JQEXRLSE TURN OFF RELEASE FLAG\n         $FREEBUF (R9)             FREE THE BUFFER\n         B     RETURN0             GET OUT\n         DROP  R9                  DROP ADDRESSABILITY TO THE BUFFER\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*                                                                     *\n***********************************************************************\nRETURN0  DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n***********************************************************************\n*                                                                     *\n*                   CONSTANTS USED IN THIS EXIT                       *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LTORG\n         EJECT\nMSG1     $MSG  707,'JOB XXXXXXXX (TTT NNNN) HAS BEEN RELEASED FROM USERX\n                HOLD'\nMSG2     $MSG  706,'JOB XXXXXXXX NOT RELEASED FROM USER HOLD BECAUSE ITX\n                COULD NOT BE FOUND'\nMSG3     $MSG  705,'JOB XXXXXXXX NOT RELEASED FROM USER HOLD BECAUSE OFX\n                JOB FAILURE'\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "J011SPRT": {"ttr": 15620, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "J011SPRT TITLE 'SPOOL PARTITIONING FOR SYSLOG AND STARTED TASKS'\n         SPACE\n         COPY  $HASPGBL\nJ011SPRT $MODULE NOTICE=SP220,ENVIRON=JES2,                            X\n               SYSP=(GEN,GEN,DATA,GEN,GEN),                            X\n               RPL,                                                    X\n               $HASPEQU,                                               X\n               $PCE,               CONTAINS USING PCEDSECT,R13         X\n               $CMB,                                                   X\n               $DAS,                                                   X\n               $DCT,                                                   X\n               $PDDB,                                                  X\n               $IOT,                                                   X\n               $RDRWORK,                                               X\n               $BUFFER,                                                X\n               $JCT,                                                   X\n               $CAT,                                                   X\n               $JOE,                                                   X\n               $NIT,                                                   X\n               $TAB,                                                   X\n               $MIT,                                                   X\n               $KIT,                                                   X\n               $HCT,                                                   X\n               $XECB,                                                  X\n               $PADDR\n***********************************************************************\n*\n* PURPOSE:\n*\n*  J011SPRT IS A SPOOL PARTITIONING EXIT DESIGNED TO WORK FROM EXIT 11\n*  THIS EXIT WILL TELL JES TO TRY TO USE ONLY TRACK GROUPS ON THE SPOOL\n*  VOLUMES THAT ARE DESIGNATED IN THE SPLTBL (SPOOL TABLE) FOR SYSLOG\n*  AND STARTED TASKS.\n*\n* ENVIRONMENT: JES2 MAIN TASK\n*\n* POINT OF PROCESSING: THIS EXIT IS TAKEN FROM THE JES2 MAIN TASK,\n*                      FROM THE $TRACK SUBROUTINE IN HASPTRAK,\n*                      WHEN THERE IS NO SPACE AVAILABLE ON THE SPOOL\n*                      VOLUMES FROM WHICH THE CURRENT JOB IS PERMITTED\n*                      TO ALLOCATE SPACE.\n*\n* METHOD USED:\n*\n*  WHEN EXIT IS ENTERED, A CHECK IS MADE TO SEE IF JOB IS A STARTED\n*  TASK OR ANYTHING OTHER THAN A JOB OR TSO SESSION. IF NOT, SET RC=0.\n*  IF IT IS, THEN ZERO OUT THE JCTSAMSK (SPOOL PARTITIONING MASK -\n*  ACTUALLY THE MASK WORK AREA FOR THIS EXIT).  GO THROUGH SPLTBL\n*  AND DAS ENTRIES TO FIND MATCHES.  ONCE A MATCH IS FOUND, CHECK TO\n*  SEE IF THE SPOOL IS SUITABLE FOR USE.  IF SO, \"OR\" THE DASMASK ONTO\n*  THE MASK WORK AREA AND GET THE NEXT ENTRY IN SPLTBL.  IF THE SPOOL\n*  VOLUME IS NOT AVAILABLE, SKIP THIS PARTICULAR SPLTBL ENTRY AND GET\n*  ANOTHER.  ONCE THE LIST FROM SPLTBL HAS BEEN EXHAUSTED, RETURN\n*  CONTROL TO JES WTIH RC=8, TELLING JES THAT AN UPDATED VERSION OF\n*  THE SPOOL PARTITIONING MASK - WITH AT LEAST ONE ADDITIONAL BIT\n*  TURNED ON - HAS BEEN PASSED TO JES IN THE SPOOL MASK WORK AREA\n*  AND WILL NOW DETERMINE SUBSEQUENT SPOOL ALLOCATION.  IT ALSO TELLS\n*  JES TO REISSUE THE $TRACK REQUEST.  IF NO MATCH IS FOUND, THE MASK\n*  WORK AREA IS LEFT UNALTERED (SET TO IOTSAMSK FIELD AS ON ENTRY) AND\n*  RC=0 TELLS JES TO SET THE SPOOL PARTITIONING MASK AS INDICATED\n*  BY THE FENCE PARAMETER ON THE SPOOLDEF INITIALIZATION STATEMENT\n*  AND TO REISSUE THE $TRACK REQUEST.\n*\n*  WRITTEN BY: DAVID VAN ZILE\n*  ADDRESS:    FIRST UNION NATIONAL BANK\n*              301 SOUTH COLLEGE STREET CHARLOTTE, N.C. 28288\n*  PHONE:      (704) 374-4695\n*\n***********************************************************************\n*\n* REGISTER USAGE IN J011SPRT\n*\n*  R0    - N/A\n*  R1  - ADDRESS OF A 3-WORD PARMAMETER LIST IN THE FOLLOWING FORMAT:\n*        WORD 1 (+0) ADDRESS OF THE IOT\n*        WORD 2 (+4) ADDRESS OF THE JCT (IF AVAILABLE); ELSE, 0\n*        WORD 3 (+8) ADDRESS OF 32-BYTE SPOOL PARTITIONING MASK WORK\n*                    AREA, INITIALLY SET TO THE IOTSAMSK FIELD\n*\n*  R2  - DAS\n*  R3  - ADDRESS OF SPOOL VOLUME TABLE\n*  R4  - NUMBER OF ENTRIES IN SPOOL VOLUME TABLE\n*  R5  -\n*  R6  - NUMBER OF SPOOL VOLUMES ALLOWED IN RUNNING JES\n*  R7  - ADDRESS OF SPOOL PARTITIONING MASK WORK AREA (FROM PARMLIST)\n*  R8  -\n*  R9  -\n*  R10 - JCT  (LOADED FROM PARAMETER LIST)\n*  R11 - ADDRESS OF THE HCT\n*  R12 - BASE\n*  R13 - ADDRESS OF THE PCE\n*  R14 - RETURN\n*  R15 - ENTRY POINT; BALR; RETURN CODE\n*\n***********************************************************************\n*                                                                     *\n*        MAIN ENTRY POINT OF THE EXIT                                 *\n*                                                                     *\n***********************************************************************\nE011SPRT $ENTRY BASE=(R12),CSECT=YES\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD FIRST BASE REGISTER\n*\n         USING JCT,R10             SET UP ADDRESSABILITY TO JCT\n         USING HCT,R11             SET UP ADDRESSABILITY TO HCT\n*                                  SET UP ADDRESSABILITY TO\n         ICM   R10,B'1111',4(R1)   LOAD ADDRESS OF JCT FROM PARM LIST\n         BZ    GOPART              IF JCT NOT AVAILABLE (0), PARTITION\n         CLI   JCTJOBID,C'J'       IS THIS A JOB?\n         BE    EXIT0               YES.. FORGET IT\n         CLI   JCTJOBID,C'T'       IS THIS A TSO SESSION?\n         BE    EXIT0               YES.. FORGET IT\nGOPART   EQU   *\n         L     R7,8(R1)            LOAD ADDRESS OF MASK WORK FROM PARM\n         XC    0(32,R7),0(R7)      CLEAR OUT SPOOL MASK WORK AREA\n         LA    R3,SPLTBL           LOAD ADDRESS OF SPOOL VOLUME TABLE\n         LA    R4,#ENTRYS          GET THE NUMBER OF VOLUMES IN TABLE\nRESETDAS L     R2,$DASFRST         LOAD ADDRESS OF FIRST DAS\n         USING DAS,R2              SET ADDRESSABILITY TO DAS\n         LH    R6,$SPOLNUM         GET NUMBER OF SPOOL VOLUMES\nCHKSPOOL CLC   0(6,R2),0(R3)       COMPARE DAS VOL TO SPLTBL VOL\n         BNE   NXTDAS              NO MATCH HERE.  TRY ANOTHER DAS.\n         TM    DASFLAG,DASACTIV+DASEXSTS+DASRPSF CAN WE USE THIS ONE?\n         BNO   NXTSPOL             SORRY WE'RE CLOSED.  COME AGAIN...\n         OC    0(32,R7),DASMASK    TURN ON CORRESPONDING BIT\n         B     NXTSPOL             GO GET ANOTHER VOLUME FROM TABLE\nNXTDAS   LA    R2,DASSIZ(,R2)      INCREMENT TO NEXT DAS ENTRY\n         BCT   R6,CHKSPOOL         GO TRY NEXT DAS\nNXTSPOL  LA    R3,ENTLEN(,R3)      POINT TO NEXT VOL IN SPOOL TABLE\n         BCT   R4,RESETDAS         GO START WITH FIRST DAS\n         LA    R15,8               SET RC=8\n         B     EXIT8               MASK HAS BEEN SET - TELL JES\n*\n* RETURN TO CALLER\n*\nEXIT0    SLR   R15,R15                 SET RETURN CODE TO 0\nEXIT8    EQU   *\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\nSPLTBL   EQU   *\n         DC    C'SPOOL1' <---------\nENTLEN   EQU   *-SPLTBL           |\n         DC    C'SPOOL2'          |------ENTER SPOOL VOLUMES HERE\n         DC    C'SPOOL3'          |\n         DC    C'SPOOL4'          |\n         DC    C'SPOOL5' <---------\n#ENTRYS  EQU   (*-SPLTBL)/ENTLEN   CALCULATE THE NUMBER OF VOLUMES\n*\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "J014$JSL": {"ttr": 15624, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "J014$JSL TITLE 'JOB QUEUE WORK SELECT EXIT FOR DEPENDENT JOB CONTROL'\n***********************************************************************\n*                                                                     *\n* MODULE NAME - J014$JSL                                              *\n*                                                                     *\n* DESCRIPTIVE NAME - DEPENDENT JOB CONTROL                            *\n*                                                                     *\n* JES2 LEVEL - SP 2.2.0                                               *\n*                                                                     *\n* FUNCTION - THIS MODIFICATION SUPPORTS THE FUNB DEPENDENT JOB        *\n*            SELECTION EXIT #14.    DEPENDENT JOB CONTROL GROUPS      *\n*            INFORMATION CONCERNING THE VARIOUS JOB DEPENDENCIES      *\n*            INTO ONE CONTROL BLOCK.  THE JECL STATEMENTS USED TO     *\n*            DEFINE THESE DEPENDENCIES ARE:                           *\n*                                                                     *\n*            /*SETUP    USED TO NAME THE TAPE OR DISK VOLUMES         *\n*                       NEEDED BY THE JOB.                            *\n*                                                                     *\n*            /*THREAD   SPECIFIES A NAME THAT WILL BE USED TO SINGLE  *\n*                       THREAD ALL OTHER JOBS SPECIFYING THIS NAME.   *\n*                       THIS STATEMENT CAN OPTIONALLY PLACE A JOB ON  *\n*                       USER HOLD PENDING RELEASE BY ANOTHER JOB.     *\n*                                                                     *\n*            /*EXCLUDE  SPECIFIES ONE OR MORE JOB NAMES THAT, IF      *\n*                       CURRENTLY EXECUTING, WILL KEEP THIS JOB       *\n*                       FROM EXECUTING.  THE REVERSE IS NOT TRUE      *\n*                       UNLESS THOSE JOBS EXCLUDE THIS ONE AS WELL.   *\n*                                                                     *\n*            QUEUE SCAN REPLACEMENT PERFORM THREAD/EXCLUDE PROCESSING.*\n*                                                                     *\n*                                                                     *\n* EXIT ENVIRONMENT                                                    *\n*                                                                     *\n*    JES2 MAIN TASK                                                   *\n*                                                                     *\n* MODULE ATTRIBUTES                                                   *\n*                                                                     *\n*                                                                     *\n* ENTRY POINTS = E014$SL - JOB QUEUE WORK SELECT                      *\n*                                                                     *\n*                                                                     *\n* ENTRY POINT DOCUMENTATION:                                          *\n*                                                                     *\n*     REGISTERS AT ENTRY-                                             *\n*                                                                     *\n*              R0  = N/A                                              *\n*              R1  = POINTER TO QGET PARAMETER LIST                   *\n*                  = +00 - ADDRESS OF NODE TABLE                      *\n*                  = +04 - ADDRESS OF CONTROL BLOCK                   *\n*                  =       .  PIT  --  IF INWS                        *\n*                  =       .  DCT  --  IF OJTWS OR OJTWSC             *\n*                  = +08 - ADDRESS OF CLASS LIST (IF APPLICABLE)      *\n*                  = +12 - ADDRESS OF JQE                             *\n*                  = +16 - EACH BYTE SET AS FOLLOWS:                  *\n*                  =       +16  LENGTH OF CLASS LIST                  *\n*                  =       +17  QUEUE TYPE; REFER TO $QGET MACRO      *\n*                  =       +18  WORK SELECTION TYPE FLAG              *\n*                  =       +19  RESERVED                              *\n*              R2  = N/A                                              *\n*              R3  = N/A                                              *\n*              R4  = N/A                                              *\n*              R5  = N/A                                              *\n*              R6  = N/A                                              *\n*              R7  = N/A                                              *\n*              R8  = N/A                                              *\n*              R9  = N/A                                              *\n*              R10 = N/A                                              *\n*              R11 = HCT ADDRESS                                      *\n*              R12 = N/A                                              *\n*              R13 = PCE ADDRESS                                      *\n*              R14 = RETURN ADDRESS                                   *\n*              R15 = ENTRY ADDRESS                                    *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n         SPACE\n         COPY  $HASPGBL\nJ014$JSL $MODULE $HASPEQU,                                             X\n               $PCE,               CONTAINS USING PCEDSECT,R13         X\n               $CMB,                                                   X\n               $DCT,                                                   X\n               $PDDB,                                                  X\n               $IOT,                                                   X\n               $RDRWORK,                                               X\n               $BUFFER,                                                X\n               $JQE,                                                   X\n               $JCT,                                                   X\n               $CAT,                                                   X\n               $JOE,                                                   X\n               $NIT,                                                   X\n               $TAB,                                                   X\n               $MIT,                                                   X\n               $KIT,                                                   X\n               $HCT,                                                   X\n               $PADDR,                                                 X\n               $QGET,                                                  X\n               $QSE,                                                   X\n               RPL\n         SPACE 1\nE014$SL  $ENTRY BASE=R12,CSECT=YES PROVIDE PROCESSOR ENTRY POINT\n         $SAVE                    SAVE CALLERS REGISTERS\n         LR    R12,R15            LOAD UP BASE REGISTER\n         LR    R2,R1              COPY $QGET PARAMETER LIST ADDR\n         USING QGT,R2             R2  ADDRESSABILITY FOR QGT\n*\n*        LIMIT PROCESSING TO REQUESTS FOR JOBS AWAITING EXECUTION\n*\n         TM    QGTWSTP,$QGTLST+$QGTLSTC   OFFJT WORK SELECTION ??\n         BM    X014RC00           YES, LET JES2 SCAN FOR JQE\n         L     R10,$JOBQPTR       R10 => JOB QUEUE ORIGIN\n         TM    QGTWSTP,$QGTINWS   INITIATOR CLASS LIST SEARCH ??\n         BO    QLIST              YES, BR AROUND\n         TM    QGTTYP,$XEQ        EXECUTION QUEUE REQUEST ??\n         BNO   X014RC00           NO, LET JES2 SCAN FOR JQE\n         CLI   QGTTYP,$XEQ        CONVERSION QUEUE REQUEST ??\n         BE    X014RC00           YES, LET JES2 SCAN FOR JQE\n         SPACE 1\nQLIST    DS    0H\n         ICM   R5,B'1111',QGTCLST GET CLASS LIST ADDRESS\n         BZ    X014RC00           IF NO ADDRESS, LET JES2 SCAN\n         XR    R3,R3              CLEAR REGISTER FOR CLASS COUNTER\n*\n*        RUN THROUGH THE SPECIFIED CLASS LIST.  CALCULATE THE\n*        $QINDEX OFFSET OF EACH CLASS IN THE LIST AND SCAN THAT\n*        CLASS QUEUE.\n*\nQNXTCLAS DS    0H\n         CLM   R3,B'0001',QGTLSTLN  CLASS LIST EXHAUSTED ??\n         BNL   X014RC12             YES, EXIT WITH NO JQE FOUND\n         XR    R6,R6              CLEAR REG FOR IC\n         IC    R6,0(,R5)          GET NEXT CLASS IN LIST\n         CLM   R6,B'0001',$BLANKS END OF LIST ??\n         BE    X014RC12           YES, EXIT WITH NO JQE FOUND\n         LA    R5,1(,R5)          POINT TO NEXT CLASS IN LIST\n         LA    R3,1(,R3)          INCREMENT CLASS LIST COUNTER\n         N     R6,=A($XEQCLAS)    MODIFY CLASS FOR TABLE INDEX\n         LA    R4,X'3F'           GET MASK FOR RELATIVE CAT ENTRY\n         NR    R4,R6              GET RELATIVE CAT ENTRY\n         MH    R4,=Y(CATLEN)      MULTIPLY BY CAT ENTRY LENGTH\n         AL    R4,$CATABLE        POINT TO CAT ENTRY\n         SPACE 1\n         USING CAT,R4             CAT ADDRESSABILITY\n         SPACE 1\n*\n*        IF CURRENT CLASS IS A TSU, STC, OR HELD CLASS, DON'T\n*        SCAN THE CLASS QUEUE FOR JQES\n*\n         TM    CATJOBFL,JCTTSUJB+JCTSTCJB   TSU OR STC CLASS ??\n         BNZ   QNXTCLAS                     YES, GET NEXT CLASS\n         TM    CATJBOPT,JCTQHELD  IS THIS A HELD CLASS ??\n         BO    QNXTCLAS           YES, GET THE NEXT CLASS\n         B     QGTINDX            BR TO CONTINUE SEARCH\n         SPACE 1\n         DROP  R4                 KILL CAT ADDRESSABILITY\n         SPACE 1\nQGTCLAS  DS    0H\n         XR    R6,R6              CLEAR R6 FOR INSERT\n         IC    R6,QGTTYP          GET CLASS QUEUE\n         SPACE 1\nQGTINDX  DS    0H\n         L     R15,$QINDEXA       GET JOB QUEUE..\n         IC    R6,0(R6,R15)       ..HEADER OFFSET\n         LTR   R6,R6              VALID QUEUE TYPE ??\n         BZ    QCHKCLST           YES, CHECK IF RUNNING CLASS LIST\n         LA    R6,$JQHEADS-$JQHEADL-(JQENEXT-JQE)(R6) SETUP Q SCAN\n         USING JQE,R6             JQE ADDRESSABILITY\n         SPACE 2\n***********************************************************************\n*        SCAN SELECTED QUEUE FOR A JQE                                *\n***********************************************************************\n         SPACE 1\nQNEXT    DS    0H\n         L     R6,JQENEXT         GET OFFSET OF NEXT JQE\n         N     R6,$ZEROFFF        END OF THIS QUEUE ??\n         BNZ   QCNTCHK            NO, CHECK-OUT THE JQE\n         SPACE 1\nQCHKCLST DS    0H\n         TM    QGTWSTP,$QGTINWS   CLASS LIST BEING SCANNED ??\n         BNO   X014RC12           NO, RETURN WITH NO JQE FOUND\n         B     QNXTCLAS           ELSE GET NEXT CLASS\n         SPACE 1\nQCNTCHK  DS    0H\n         ALR   R6,R10             R6 = ABSOLUTE JQE ADDRESS\n*\n*        CHECK FOR ACTIVE OR HELD JOB\n*\n         TM    JQEFLAG1,JQE1HLDA+JQE1HLD1+JQE1HLD2+JQE1BUSY\n         BNZ   QNEXT              BR IF THIS JQE HELD OR ACTIVE\n         TM    JQEFLAG4,JQE4CAN   FORCE PURGE FLAG ON ??\n         BO    QNEXT              YES, SKIP THIS JQE\n         TM    JQEXFLG2,JQEXUHLD  JOB ON USER HOLD ??\n         BO    QNEXT              YES, SKIP THIS JQE\n         CLI   JQETYPE,$XMIT      IF JOB IS ON NJE TRANSMISSION QUEUE\n         BE    QNEXT              YES, SKIP THIS JQE\n         TM    JQEXFLG2,JQEXWSET  IS JOB AWAITING SETUP ?\n         BO    QNEXT              YES, SKIP THIS ONE\n         TM    JQETYPE,$XEQ       IS QUEUE TYPE XEQ?\n         BNO   QNEXT              NO, SKIP THIS ONE\n*\n*        CHECK THAT ALL SPOOLS FOR THIS JOB ARE ONLINE\n*\nQSPOOLS  DS    0H\n         LH    R15,$JQEMSKL       GET JQE SPOOL MASK LENGTH-1\n         EX    R15,MBJQEMVC       GET SPOOLS USED BY THIS JOB\n         NC    $SPMSKWA,$SPLSLCT  'AND' WITH QUALIFYING SPOOLS\n         EX    R15,MBJQECLC       ALL REQUIRED SPOOLS MOUNTED ??\n         BNE   QNEXT              NO, SKIP THIS JQE\n*\n*        CHECK FOR AFFINITY AND INDEPENDENT MODE\n*\nQCHKIND  DS    0H                 CHECK CPU/JOB INDEPENDENCE\n         TM    $STATUS,$INDMODE   CPU IN INDEPENDENT MODE ??\n         BO    QCPUIND            YES, GO CHECK THE JQE\n         TM    JQEFLAG2,JQE2IND   JOB IN INDEPENDENT MODE ??\n         BO    QNEXT              YES, SKIP THIS JQE\n         B     QCHKAFF            NO,  BR AROUND\nQCPUIND  DS    0H\n         TM    JQEFLAG2,JQE2IND   JOB IN INDEPENDENT MODE ??\n         BZ    QNEXT              NO, SKIP THIS JOB\nQCHKAFF  DS    0H                 CHECK JOB CPU AFFFINITY\n         XR    R15,R15            CLEAR R15 FOR INSERT\n         IC    R15,$SIDAFF        GET THE SYSTEM ID (CAN BE 1-7)\n         EX    R15,MBTSTAFF       MAY JOB RUN ON THIS SYSTEM ??\n         BZ    QNEXT              NO, SKIP THIS JQE\n         SPACE 1\n***********************************************************************\n*               AT THIS POINT WE HAVE A GOOD JQE                      *\n***********************************************************************\n***********************************************************************\n*                                                                     *\n* CHECK FOR THREAD/EXCLUDE RESTRICTIONS                               *\n*                                                                     *\n***********************************************************************\nQGETDJC  LA    R7,$XEQ                  PREPARE\n         L     R15,$QINDEXA               TO SCAN\n         IC    R7,0(R7,R15)               EXECUTION BY\n         XR    R8,R8                      CLASS + CNV + STC + TSU\n*\n*        POINT TO NEXT EXECUTION QUEUE ANCHOR\n*\nQNXTQUE  DS    0H\n         LA    R8,$JQHEADL(,R8)    ADD TO INDEX INTO THE QUEUE\n         CL    R8,=A($JQCLSSZ+(3*$JQHEADL)) ANOTHER QUEUE??\n         BH    X014RC08            NO, WE HAVE A GOOD JOB\n         LA    R1,0(R7,R8)         PREPARE TO SCAN NEXT EXECUTION\n         LA    R1,$JQHEADS-(2*$JQHEADL)-(JQENEXT-JQE)(R1) QUEUE\n*\n*        POINT TO NEXT JQE IN CURRENT EXECUTION QUEUE\n*\nQNXTJQE  DS    0H\n         L     R1,JQENEXT-JQE(R1) OFFSET OF NEXT JQE.\n         N     R1,$ZEROFFF         END OF EXECUTION QUEUE...\n         BZ    QNXTQUE             BR IF END OF CURRENT QUEUE\n         ALR   R1,R10              CONVERT OFFSET TO ABSOLUTE ADR\n         TM    JQETYPE-JQE(R1),$XEQ        IS IT $XEQ QUEUE ??\n         BNO   QNXTJQE             NO, GO GET NEXT JQE\n         CLI   JQETYPE-JQE(R1),$XMIT       IS IT $XMIT QUEUE ??\n         BE    QNXTJQE             YES, GO GET NEXT JQE\n         TM    JQEFLAG1-JQE(R1),JQE1BUSY IS OTHER ACTIVE?\n         BZ    QNXTJQE             NO - GET NEXT JQE\n         CLR   R6,R1               IS IT OUR JQE?                @\n         BE    QNXTJQE             YES, GO GET NEXT JQE\n         SPACE 1\n*\n*        R1 POINTS TO A JQE IN THE EXECUTION QUEUE\n*\n         TM    JQEXFLG2,JQEXTHRD+JQEXXCLU JOB HAVE THREAD OR EXCLUDE\n         BZ    X014RC08            NO. USE THIS JOB\n         TM    JQEXFLG2,JQEXTHRD   DID JOB USE THREAD\n         BZ    QEXCL               NO. TEST FOR EXCLUDE\n         CLC   JQEXTHRN(8),JQEJNAME-JQE(R1) THREAD NAME = JOB NAME?\n         BE    QNEXT               YES. DON'T SELECT THIS JQE\n         TM    JQEXFLG2-JQE(R1),JQEXTHRD DID OTHER JOB USE THREAD\n         BZ    QEXCL               NO. TRY EXCLUDE\n*\n*        BOTH JOBS USED THREAD CARD NOW SEE IF SAME NAME\n*\nCKTHRD2  CLC   JQEXTHRN(8),JQEXTHRN-JQE(R1) IS THREAD NAME EQUAL\n         BE    QNEXT               YES. DON'T SELECT THIS JQE\n*\n*        SEE IF SELECTED JQE SHOULD RUN AFTER OTHER JQE\nQEXCL    DS    0H\n         TM    JQEXFLG2,JQEXXCLU   DID JOB USE EXCLUDE?\n         BZ    QNXTJQE             NO. GET ANOTHER EXECUTING JQE\n         CLC   JQEXEXCN(8),JQEJNAME-JQE(R1) EXCLUDE NAME = JOB NAME?\n         BE    QNEXT               YES. DON'T SELECT THIS JQE\n         TM    JQEXFLG2-JQE(R1),JQEXTHRD DID OTHER JOB USE THREAD\n         BZ    QNXTJQE             NO. GET ANOTHER EXECUTING JQE\n         CLC   JQEXEXCN(8),JQEXTHRN-JQE(R1) EXCLUDE NAME = THREAD NAME?\n         BE    QNEXT               YES. DON'T SELECT THIS JQE\n         B     QNXTJQE             GET ANOTHER EXECUTING JQE\n*\n         SPACE\n         TITLE 'HASP $QGET JOB QUEUE WORK SELECT -- RETURNS'\n***********************************************************************\n*                                                                     *\n*      J 0 1 4 $ J S L   C O M M O N   R E T U R N S                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nX014RC12 DS    0H                 JQE NOT FOUND\n         LA    R15,12             SET RC=12\n         B     X014RTN            BR TO RETURN\n         SPACE 1\nX014RC08 DS    0H                 JQE SELECTED BY $QGET EXIT\n         ST    R6,QGTJQE          PLACE JQE ADDRESS IN $QGET LIST\n         LA    R15,8              SET RC=8\n         B     X014RTN            BR TO RETURN\n         SPACE 1\nX014RC04 DS    0H                 CONTINUE + IGNORE OTHER EXITS\n         LA    R15,4              SET RC=4\n         B     X014RTN            BR TO RETURN\n         SPACE 1\nX014RC00 DS    0H                 CONTINUE NORMAL PROCESSING\n         XR    R15,R15            SET RC=0\n         SPACE 1\nX014RTN  DS    0H\n         $RETURN RC=(R15)          RETURN TO MAINLINE HASPNUC\n         TITLE 'HASP $QGET JOB QUEUE WORK SELECT -- CONSTANTS'\n***********************************************************************\n*                                                                     *\n*        M B X 0 1 4   C O N S T A N T S                              *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         LTORG                    EXPAND LITERAL POOL HERE\n         SPACE 1\nMBJQEMVC MVC   $SPMSKWA(*-*),JQESUMSK  EXECUTED INSTRUCTION\nMBJQECLC CLC   $SPMSKWA(*-*),JQESUMSK  EXECUTED INSTRUCTION\nMBTSTAFF TM    JQEFLAG2,*-*       EXECUTED INSTRUCTION\n         SPACE 1\nQCTLSNAM DC    CL8' '     SELECTED JQE CNTL NAME WORKAREA\nQCTLBNAM DC    CL8' '     BUSY (ACTIVE) JQE CNTL NAME WORKAREA\nQCTLSFLG DC    X'00'      SELECTED JQE CNTL NAME STATUS INDICATOR\nQCTLBFLG DC    X'00'      BUSY JQE CNTL NAME STATUS INDICATOR\nQCTLSHR  EQU   B'11000000'         SHARED\nQCTLEXC  EQU   B'01000000'         EXCLUSIVE\nQCTLMUT  EQU   B'10000000'         MUTUAL\n         DROP  ,\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "J015$SP": {"ttr": 15875, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 EXIT 15 DATASET SEPARATOR EXIT FOR XEROX 3700'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM WILL GAIN CONTROL BETWEEN EACH        *\n*        DATASET OF AN OUTPUT GROUP AND BETWEEN COPIES OF A           *\n*        DATASET.  THIS SPECIFIC EXIT WILL BE FUNCTIONAL ONLY         *\n*        FOR OUR XEROX 3700 RJE DEVICES.  ALL OTHER DEVICES           *\n*        WILL BE A QUICK EXIT.  THIS EXIT WILL USE THE XJCF           *\n*        PRODUCT (XENOS COMPUTER SYSTEM) EXTENSION FIELDS IN          *\n*        THE JOE AND THE PDDB TO CREATE DJDE RECORDS FOR EACH         *\n*        OUTPUT DATASET GOING TO THE 3700'S.  NOT ALL OF THE          *\n*        EXTENSIONS WILL BE SUPPORTED, BUT AN ATTEMPT WILL BE         *\n*        MADE TO KEEP THEM AS COMPATABLE AS POSSIBLE.                 *\n*                                                                     *\n*        THIS EXIT ASSUMES THAT THE JOB SEPARATOR PAGE HAS            *\n*        ALREADY BEEN PRINTED AND THAT ALL IS REQUIRED IS TO          *\n*        WRITE THE DJDE FOR THE DATASET.  EXIT1 COULD NOT             *\n*        EASILY PERFORM THIS FUNCTION SINCE THE PDDB IS NOT           *\n*        AVAILABLE TO THAT EXIT.                                      *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J 0 1 5 $ S P            *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CALL        SYS1.HASPSRC                               *\n*        03)  $CAT         SYS1.HASPSRC                               *\n*        04)  $DCT         SYS1.HASPSRC                               *\n*        05)  $DTE         SYS1.HASPSRC                               *\n*        06)  $ENTRY       SYS1.HASPSRC                               *\n*        07)  $ERA         SYS1.HASPSRC                               *\n*        08)  $FCSUCT      SYS1.HASPSRC (USER)                        *\n*        09)  $FREEBUF     SYS1.HASPSRC                               *\n*        10)  $GETBUF      SYS1.HASPSRC                               *\n*        11)  $HASPEQU     SYS1.HASPSRC                               *\n*        12)  $HASPGBL     SYS1.HASPSRC                               *\n*        13)  $HCT         SYS1.HASPSRC                               *\n*        14)  $HFAME       SYS1.HASPSRC                               *\n*        15)  $JCT         SYS1.HASPSRC                               *\n*        16)  $JOE         SYS1.HASPSRC                               *\n*        17)  $JQE         SYS1.HASPSRC                               *\n*        18)  $MIT         SYS1.HASPSRC                               *\n*        19)  $MODEND      SYS1.HASPSRC                               *\n*        20)  $MODULE      SYS1.HASPSRC                               *\n*        21)  $PADDR       SYS1.HASPSRC                               *\n*        22)  $PCE         SYS1.HASPSRC                               *\n*        23)  $PDDB        SYS1.HASPSRC                               *\n*        24)  $PPPWORK     SYS1.HASPSRC                               *\n*        25)  $PRPUT       SYS1.HASPSRC                               *\n*        26)  $RDT         SYS1.HASPSRC                               *\n*        27)  $RETURN      SYS1.HASPSRC                               *\n*        28)  $SAVE        SYS1.HASPSRC                               *\n*        29)  $SCAT        SYS1.HASPSRC                               *\n*        30)  $SVT         SYS1.HASPSRC                               *\n*        31)  $XECB        SYS1.HASPSRC                               *\n*        32)  CVT          SYS1.AMODGEN                               *\n*        33)  IFGRPL       SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       4K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ015$SP  $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 EXIT15 DATASET SEPARATOR EXIT',             X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $DTE,               GENERATE HASP DTE DSECT             X\n               $ERA,               GENERATE HASP ERA DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $HFAME,             GENERATE HASP FAME DSECT            X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $PDDB,              GENERATE HASP PDDB DSECT            X\n               $PPPWORK,           GENERATE HASP PPPWORK DSECT         X\n               $RDT,               GENERATE HASP RDT DSECT             X\n               $SCAT,              GENERATE HASP SCAT DSECT            X\n               $SVT,               GENERATE HASP SSVT DSECT            X\n               $XECB,              GENERATE HASP XECB DSECT            X\n               CVT,                GENERATE MVS CVT DSECT              X\n               RPL                 GENERATE MVS RPL DSECT\n         TITLE 'JES2 EXIT 15 DATASET SEPARATOR EXIT FOR XEROX 3700'\n         $FCSUCT ,                 MAP THE UCT DSECT\nJ015$SP  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        WORK AREA USED BY THIS JES2 EXIT                             *\n*                                                                     *\n***********************************************************************\nHDRDSECT DSECT                     HASP HEADER DSECT\n         DS    CL(BUFSTART-BFPDSECT) *****  RESERVED BY JES2 *****\nHDR      DS    CL133\nJ015$SP  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         SPACE 3\n         USING JCT,R10             SET ADDRESSABILITY TO JCT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE015$SP  $ENTRY BASE=(R9,R12)\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R9,R15              LOAD FIRST BASE REGISTER\n         LA    R12,4095(R9)        LOAD SECOND\n         LA    R12,1(R12)               BASE REGISTER\n         CH    R0,=H'4'            IS THIS ENTRY FOR DATASET SEPARATOR\n         BNE   EXITQ               NO, TAKE QUICK EXIT\n         LR    R4,R1               SAVE INPUT PARM ADDRESS\n         L     R10,8(R4)           LOAD JCT ADDRESS\n         L     R2,16(R4)           LOAD INPUT DCT ADDRESS\n         USING DCT,R2              SET ADDRESSABILITY TO DCT\n         L     R3,12(R4)           LOAD INPUT PDDB ADDRESS\n         USING PDB,R3              SET ADDRESSABILITY TO PDDB\n         CLC   DCTDEVN(6),=CL6'R20.PR'  SEE IF ONE OF OUR 3700'S\n         BE    DEV3700             YES, BRANCH\n         CLC   DCTDEVN(6),=CL6'R21.PR'  SEE IF ONE OF OUR 3700'S\n         BNE   EXITQ               NO, TAKE QUICK EXIT\n***********************************************************************\n*                                                                     *\n*        MODIFY THE PRINT TRANSLATE TABLE TO THE NULL TABLE IN        *\n*        THE UCT.  THIS ALLOWS THESE DEVICES TO EFFECTIVELY BE        *\n*        TRANSLATE = NO.                                              *\n*                                                                     *\n***********************************************************************\nDEV3700  ICM   R5,B'1111',$UCT     LOAD UCT ADDRESS\n         BZ    CKDJDE              NONE, BYPASS THIS ROUTINE\n         USING UCT,R5              SET ADDRESSABILITY TO UCT\n         LA    R15,UCTXLAT         LOAD ADDRESS OF TRANSLATE TABLE\n         ST    R15,24(R4)          MODIFY ADDRESS IN PARM LIST\n         DROP  R5                  DROP ADDRESSABILITY TO UCT\nCKDJDE   TM    PDBFLAG9,PDB9NODJ   SEE IF NO DJDE REQUESTED\n         BO    EXITQ               YES, TAKE QUICK EXIT\n         $GETBUF TYPE=HASP,FIX=YES,WAIT=YES GET A WORK BUFFER\n         LR    R8,R1               SAVE ADDRESS OF BUFFER\n         USING HDRDSECT,R8         SET ADDRESSABILITY TO HEADER LINE\n         LA    R14,HDRDSECT+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS\n         LH    R15,$BUFSIZE        SET   'TO'   LENGTH\n         SLR   R0,R0               CLEAR 'FROM' ADDRESS\n         SLR   R1,R1               CLEAR 'FROM' LENGTH\n         MVCL  R14,R0              CLEAR THE BUFFER\n***********************************************************************\n*                                                                     *\n*        PRODUCE THE DJDE FOR DATASET.                                *\n*                                                                     *\n***********************************************************************\n         MVI   HDR,C' '            BLANK THE ENTIRE\n         MVC   HDR+1(132),HDR         DJDE WORK AREA\n         LA    R15,HDR             LOAD ADDRESS OF DJDE AREA\n         MVC   HDR(LDJDE1),DJDE1   SET SPECIAL DJDE LINE\n         LA    R15,LDJDE1(R15)     INCREMENT PAST DJDE\n         L     R6,PPPCHJOE         LOAD ADDRESS CHARACTERISTICS JOE\n         USING JOE,R6              SET ADDRESSABILITY TO JOE\nCKSHIFT  TM    JOEFLAGC,JOEFCSFT   SEE IF SHIFT=YES\n         BO    SHIFT               YES, BRANCH\nNOSHIFT  MVC   0(9,R15),=C'SHIFT=NO,' SET FOR SHIFT=NO\n         LA    R15,9(R15)          INCREMENT BY LENGTH OF KEYWORD\n         B     CKORIENT            GO CHECK NEXT FIELD\nSHIFT    MVC   0(10,R15),=C'SHIFT=YES,' SET FOR SHIFT=YES\n         LA    R15,10(R15)         INCREMENT BY LENGTH OF KEYWORD\nCKORIENT TM    PDBFLAG9,PDB9PORT   SEE IF PMODE=PORTRAIT\n         BO    PORTRAIT            YES, BRANCH\nLANDSCAP MVC   0(16,R15),=C'PMODE=LANDSCAPE,' SET FOR LANDSCAPE\n         LA    R15,16(R15)         INCREMENT BY LENGTH OF KEYWORD\n         B     CKPDE               GO CHECK NEXT FIELD\nPORTRAIT MVC   0(15,R15),=C'PMODE=PORTRAIT,' SET FOR PORTRAIT\n         LA    R15,15(R15)         INCREMENT BY LENGTH OF KEYWORD\nCKPDE    MVC   0(7,R15),=C'FORMAT=' SET PDE KEYWORD\n         LA    R15,7(R15)          INCREMENT BY LENGTH OF KEYWORD\n         CLI   PDBXFMT,C'*'        SEE IF PDE SPECIFIED\n         BE    NOPDE               NO, BRANCH\nPDE      MVC   0(6,R15),PDBXFMT    SET PDE NAME\nPDE1     CLI   0(R15),C' '         END OF PDE\n         BE    PDE2                YES, BRANCH\n         LA    R15,1(R15)          INCREMENT TO NEXT CHAR OF PDE NAME\n         B     PDE1                LOOP\nPDE2     MVI   0(R15),C','         SET END OF VALUE\n         LA    R15,1(R15)          INCREMENT PAST ','\n         B     CKFLASH             GO CHECK NEXT FIELD\nNOPDE    MVC   0(6,R15),=C'PDFLT,' ASSUME PORTRAIT\n         TM    PDBFLAG9,PDB9PORT   SEE IF PMODE=PORTRAIT\n         BO    NOPDE1              YES, BRANCH\n         MVC   0(6,R15),=C'LDFLT,' MAKE LANDSCAPE\nNOPDE1   LA    R15,6(R15)          INCREMENT PAST PDE NAME\nCKFLASH  MVC   0(6,R15),=C'FORMS=' SET FORMS KEYWORD\n         LA    R15,6(R15)          INCREMENT PAST KEYWORD\n         MVC   0(4,R15),JOEFLASH   SET PROBABLE FORMS NAME\n         CLI   JOEFLASH,C'*'       SEE IF DEFAULT FLASH\n         BE    CKFLASH1            YES, BRANCH\n         CLC   JOEFLASH,=C'LINE'   SEE IF SPECIAL FLASH NAME\n         BNE   CKFLASH2            NO, BRANCH\nCKFLASH1 MVC   0(4,R15),=C'P001'   ASSUME PORTRAIT\n         TM    PDBFLAG9,PDB9PORT   SEE IF PMODE=PORTRAIT\n         BO    CKFLASH2            YES, BRANCH\n         MVC   0(4,R15),=C'L001'   MAKE LANDSCAPE\nCKFLASH2 CLI   0(R15),C' '         END OF FORM NAME\n         BE    CKFLASH3            YES, BRANCH\n         LA    R15,1(R15)          INCREMENT TO NEXT CHAR OF FORM NAME\n         B     CKFLASH2            LOOP\nCKFLASH3 MVI   0(R15),C','         SET END OF VALUE\n         LA    R15,1(R15)          INCREMENT PAST ','\nCKOPTCD  TM    PDBFLAG2,PDB2OPTJ   SEE IF OPTCD=J SPECIFIED\n         BO    CKOPTCD1            YES, BRANCH\n         MVC   0(15,R15),=C'FONTINDEX=NONE,' SET NO FONTINDEX\n         LA    R15,15(R15)         INCREMENT PAST PARAMETER\n         MVC   0(13,R15),=C'DATA=(0,150),'   SET FULL DATA LINE\n         LA    R15,13(R15)         INCREMENT PAST PARAMETER\n         B     ENDDJDE             GET OUT\nCKOPTCD1 MVC   0(12,R15),=C'FONTINDEX=0,' SET FONTINDEX\n         LA    R15,12(R15)         INCREMENT PAST PARAMETER\n         MVC   0(13,R15),=C'DATA=(1,150),'   SET PARTIAL DATA LINE\n         LA    R15,13(R15)         INCREMENT PAST PARAMETER\nENDDJDE  MVC   0(4,R15),=C'END;'   FLAG END OF DJDE\n         LA    R1,HDR              SET DJDE ADDRESS\n         LA    R0,133              SET LENGTH = 133\n         $PRPUT DATA=(R1),LEN=(R0),WAIT=YES,CC=M WRITE DJDE\n         EJECT\n***********************************************************************\n*                                                                     *\n*                           E X I T                                   *\n*                                                                     *\n*             RETURN CODE OF 0 TELLS JES2 TO CALL ANY ADDITIONAL      *\n*             EXIT ROUTINES AND CONTINUE WITH NORMAL JES2             *\n*             PROCESSING.                                             *\n*                                                                     *\n***********************************************************************\nEXIT     $FREEBUF (R8)             FREE SECOND WORK BUFFER\nEXITQ    LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS USED BY THIS JES2 EXIT                             *\n*                                                                     *\n***********************************************************************\nDJDE1    DC    X'01'\n         DC    C'$X9700$DJDE COPIES=1,'\nLDJDE1   EQU   *-DJDE1\n         SPACE 3\n***********************************************************************\n*        ROUTINE CONSTANTS                                            *\n***********************************************************************\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "J020UHLD": {"ttr": 15880, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'CHANGE TYPRUN=HOLD TO USERHOLD'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT WILL GAIN CONTROL AT END-OF-INPUT TO          *\n*        ALLOW MODIFICATION OF MANY OF A JOB'S ATTRIBUTES.            *\n*        THIS EXIT WILL SPECIFICALLY MODIFY THE PURPOSE OF            *\n*        TYPRUN=HOLD TO USE A SPECIAL BIT IN THE JQE TO INDICATE      *\n*        USERHOLD INSTEAD OF OPERATOR HOLD.  IT WILL DO SO BY         *\n*        TURNING ON THE USERHOLD BIT IN THE JQE AND TURNING OFF       *\n*        THE TYPRUN=HOLD BIT IN THE JCT WHICH WOULD LATER HAVE        *\n*        RESULTED IN THE JQE1HLD1 BIT BEING TURNED ON IN THE JQE.     *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*            M A C R O S   U S E D   I N   J 0 2 0 U H L D            *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $CKPT        SYS1.HASPSRC                               *\n*        04)  $ENTRY       SYS1.HASPSRC                               *\n*        05)  $HASPEQU     SYS1.HASPSRC                               *\n*        06)  $HASPGBL     SYS1.HASPSRC                               *\n*        07)  $HCT         SYS1.HASPSRC                               *\n*        08)  $JCT         SYS1.HASPSRC                               *\n*        09)  $JQE         SYS1.HASPSRC                               *\n*        10)  $KIT         SYS1.HASPSRC                               *\n*        11)  $MIT         SYS1.HASPSRC                               *\n*        12)  $MODEND      SYS1.HASPSRC                               *\n*        13)  $MODULE      SYS1.HASPSRC                               *\n*        14)  $PADDR       SYS1.HASPSRC                               *\n*        15)  $PCE         SYS1.HASPSRC                               *\n*        16)  $QSUSE       SYS1.HASPSRC                               *\n*        17)  $SAVE        SYS1.HASPSRC                               *\n*        18)  $RETURN      SYS1.HASPSRC                               *\n*        19)  IFGRPL       SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       1K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ020UHLD $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='CHANGE TYPRUN=HOLD TO USERHOLD',                 X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP SVT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $KIT,               GENERATE HASP KIT DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               RPL                 GENERATE MVS  RPL DSECT\n         TITLE 'CHANGE TYPRUN=HOLD TO USERHOLD'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE020UHLD $ENTRY BASE=R12\n         SPACE 1\n         $SAVE                     SAVE CALLERS REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R0  - ZERO                                                   *\n*        R10 - ADDRESS OF THE JCT                                     *\n*        R11 - ADDRESS OF THE HCT                                     *\n*        R13 - ADDRESS OF THE PCE                                     *\n*        R14 - RETURN ADDRESS                                         *\n*        R15 - ENTRY ADDRESS                                          *\n*                                                                     *\n***********************************************************************\n         USING JCT,R10             SET ADDRESSABILITY TO JCT\n         L     R7,JCTJQE           LOAD OFFSET OF JQE FROM JCT\n         AL    R7,$JOBQPTR         GET ADDRESS OF JQE\n         USING JQE,R7              SET ADDRESSABILITY TO JQE\n***********************************************************************\n*                                                                     *\n*        SEE IF TYPRUN=HOLD HAS BEEN SPECIFIED                        *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nCK1      TM    JCTJBOPT,JCTTHOLD   SEE IF TYPRUN=HOLD SPECIFIED\n         BZ    RETURN0             NO, GET OUT\n         CLC   JCTXEQND,$OWNNODE   SEE IF OUR JOB\n         BNE   RETURN0             NO, LEAVE IT ALONE\n         $QSUSE ,                  GET CONTROL OF THE CHECKPOINT\n         OI    JQEXFLG2,JQEXUHLD   TURN ON USER HOLD INDICATOR\n         LR    R1,R7               SET JQE ADDRESS\n         $CKPT ID=JQE,ADDR=(R1)    TELL JES2 ABOUT THE CHANGE\n         NI    JCTJBOPT,255-JCTTHOLD TURN OFF TYPRUN=HOLD IND\n         B     RETURN0             GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE NORMAL PROCESSING AND PRINT THE OUTPUT   *\n*        RC = 12 - TERMINATE NORMAL PROCESSING WITHOUT PRINTING       *\n*                                                                     *\n***********************************************************************\nRETURN0  DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n***********************************************************************\n*                                                                     *\n*                   CONSTANTS USED IN THIS EXIT                       *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         LTORG\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "J021$57": {"ttr": 15883, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "J021$57  TITLE 'FCS NJE SMF EXIT'\n***********************************************************************\n*                                                                     *\n* MODULE NAME - J021$57                                               *\n*                                                                     *\n* DESCRIPTIVE NAME - NETWORKING SMF EXIT                              *\n*                                                                     *\n* JES2 LEVEL - SP 2.2.0                                               *\n*                                                                     *\n*                                                                     *\n* FUNCTION - THIS JES2 EXIT PROGRAM IS DESIGNED EXAMINE AND/OR        *\n*            MODIFY ALL JES2 SMF RECORDS.  THE SMF TYPE 57 RECORD     *\n*            IS WRITTEN FOR EACH NJE SYSOUT TRANSMISSION WHICH        *\n*            OCCURS.  THE ONLY PROBLEM IS THAT THE JOBNAME IS NOT     *\n*            CONTAINED ANYWHERE IN THE RECORD.  THIS EXIT WILL PUT    *\n*            THE JOBNAME INTO THE TYPE 57 RECORD IN THE NETACCT       *\n*            FIELD WHICH IS AN EIGHT BYTE FIELD WHICH IS UNUSED       *\n*            BY OUR INSTALLATION.                                     *\n*                                                                     *\n* EXIT ENVIRONMENT                                                    *\n*                                                                     *\n*    JES2 MAIN TASK                                                   *\n*                                                                     *\n* MODULE ATTRIBUTES                                                   *\n*                                                                     *\n*    JES2 REENTRANT                                                   *\n*                                                                     *\n* ENTRY POINTS = E021$57 - PROCESS SMF 57 NJE RECORDS.                *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ021$57 $MODULE $CAT,                                                  X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP SVT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $SMF,               GENERATE HASP SMF BUFFER DSECT      X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               RPL\n         TITLE 'JES2 NJE SMF 57 RECORD EXIT'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             *\n*                                                                     *\n*        R0  - ZERO                                                   *\n*        R1  - SMF BUFFER ADDRESS                                     *\n*        R11 - ADDRESS OF THE HCT                                     *\n*        R13 - ADDRESS OF THE CALLER'S PCE                            *\n*        R14 - RETURN ADDRESS                                         *\n*        R15 - ENTRY ADDRESS                                          *\n*                                                                     *\n***********************************************************************\nE021$57  $ENTRY BASE=R12\n         $SAVE                     SAVE CALLERS REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         SPACE 1\n         USING SMF,R1              SET ADDRESSABILITY TO SMF BUFFER\n         CLI   SMF57RTY,57         SEE IF TYPE 57 RECORD\n         BNE   RETURN0             NO, JUST GET OUT\n         MVC   SMF57ACN,=CL8' '    BLANK THE NETWORK ACCT FIELD\n         ICM   R2,15,PCEJQE        LOAD JQE ADDRESS FROM PCE\n         USING JQE,R2              SET ADDRESSABILITY TO JQE\n         BZ    RETURN0             JQE ADDRESS ZERO, EXIT\n         MVC   SMF57ACN,JQEJNAME   MOVE JOBNAME TO NETWORK ACCT FIELD\n         B     RETURN0             GET OUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                *\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        *\n*        RC = 08 - TERMINATE NORMAL SMF QUEUE PROCESSING              *\n*                                                                     *\n***********************************************************************\nRETURN0  DS    0H\n         LA    R15,0               SET RETURN CODE TO 0\n         $RETURN RC=(R15)          RETURN TO JES2\nRETURN4  DS    0H\n         LA    R15,4               SET RETURN CODE TO 4\n         $RETURN RC=(R15)          RETURN TO JES2\nRETURN8  DS    0H\n         LA    R15,8               SET RETURN CODE TO 8\n         $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n         LTORG ,                   ROUTINE LITERAL POOL\n         TITLE 'J021$57 END'\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "J024JIT": {"ttr": 16129, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 POST INITIALIZATION EXIT'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED TO RUN RIGHT BEFORE       *\n*        JES2 INITIALIZATION ENDS TO MODIFY JES2 CONTROL BLOCKS       *\n*        AND CREATE OUR OWN CONTROL BLOCKS.                           *\n*                                                                     *\n*        THIS EXIT WILL DEFINE ITS OWN DTE ATTACH CONTROL             *\n*        BLOCK FOR TWO SUBTASKS AND ANCHOR IT OFF OF THE              *\n*        MCT.  THE TWO SUBTASKS WILL THEN BE STARTED USING            *\n*        THE STANDARD DTE INTERFACE.                                  *\n*                                                                     *\n*        THE FIRST SUBTASK IS A JOB INFORMATION TASK.  IT             *\n*        WILL RECEIVE REQUESTS FOR JOB INFORMATION FROM               *\n*        VARIOUS JES2 PROCESSORS TO RETURN JOB RELATED                *\n*        INFORMATION ON THE BASIS OF JOBNAME AND/OR OUTPUT            *\n*        GROUP-ID.  THIS SUBTASK WILL READ THE JOB INFORMATION        *\n*        FROM A VSAM FILE WHICH IS MAINTAINED BY A CICS               *\n*        SYSTEM.  THIS INFORMATION WILL BE USED PRIMARILY             *\n*        TO EXPAND THE INFORMATION ON A USER JOB SEPARATOR            *\n*        AT PRINT TIME OR TO NOTIFY UCC7 OF THE COMPLETION            *\n*        OF PRINT PROCESSING FOR A REPORT GROUP.                      *\n*                                                                     *\n*        THE SECOND SUBTASK IS A UCC7 SUBTASK WHICH WILL              *\n*        DEMAND A NETWORK BASED ON THE INFORMATION IN THE             *\n*        JITB.  THIS WILL NORMALLY BE REQUESTED AT THE END            *\n*        OF A JES2 EVENT SUCH AS PRINT PROCESSING.                    *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J 0 2 4 J I T            *\n*                                                                     *\n*        01)  $$WTO        SYS1.HASPSRC                               *\n*        02)  $AMODE       SYS1.HASPSRC                               *\n*        03)  $DTE         SYS1.HASPSRC                               *\n*        04)  $DTETAB      SYS1.HASPSRC                               *\n*        05)  $ENTRY       SYS1.HASPSRC                               *\n*        06)  $ERA         SYS1.HASPSRC                               *\n*        07)  $FCSDTE      SYS1.HASPSRC (USER)                        *\n*        08)  $FCSJITB     SYS1.HASPSRC (USER)                        *\n*        09)  $FCSUCT      SYS1.HASPSRC (USER)                        *\n*        10)  $HASPEQU     SYS1.HASPSRC                               *\n*        11)  $HASPGBL     SYS1.HASPSRC                               *\n*        12)  $HCT         SYS1.HASPSRC                               *\n*        13)  $MID         SYS1.HASPSRC                               *\n*        14)  $MIT         SYS1.HASPSRC                               *\n*        15)  $MODEND      SYS1.HASPSRC                               *\n*        16)  $MODULE      SYS1.HASPSRC                               *\n*        17)  $PADDR       SYS1.HASPSRC                               *\n*        18)  $PCE         SYS1.HASPSRC                               *\n*        19)  $SETRP       SYS1.HASPSRC                               *\n*        20)  $XECB        SYS1.HASPSRC                               *\n*        21)  ABEND        SYS1.MACLIB                                *\n*        22)  CLOSE        SYS1.MACLIB                                *\n*        23)  DYNALLOC     SYS1.MACLIB                                *\n*        24)  ESTAE        SYS1.MACLIB                                *\n*        25)  GENCB        SYS1.MACLIB                                *\n*        26)  GET          SYS1.MACLIB                                *\n*        27)  IEZWPL       SYS1.AMODGEN                               *\n*        28)  IFGACB       SYS1.MACLIB                                *\n*        29)  IFGRPL       SYS1.MACLIB                                *\n*        30)  IHAECB       SYS1.MACLIB                                *\n*        31)  LOAD         SYS1.MACLIB                                *\n*        32)  MODCB        SYS1.MACLIB                                *\n*        33)  MRKBFR       SYS1.MACLIB                                *\n*        34)  OPEN         SYS1.MACLIB                                *\n*        35)  POST         SYS1.MACLIB                                *\n*        36)  RETURN       SYS1.MACLIB                                *\n*        37)  SAVE         SYS1.MACLIB                                *\n*        38)  SU7SVC       SYS1.UCC7.MACLIB                           *\n*        39)  WTO          SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       10K                                              *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ024JIT  $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 POST INITIALIZATION EXIT',                  X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $DTE,               GENERATE HASP DTE DSECT             X\n               $DTETAB,            GENERATE HASP DTE TABLE DSECT       X\n               $SCANTAB,           GENERATE HASP SCANTABL TABLE DSECT  X\n               $ERA,               GENERATE HASP ERA DSECT             X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $XECB,              GENERATE HASP EXT ECB DSECT         X\n               $MCT,               GENERATE HASP MCT DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               ACB,                GENERATE MVS  IFGACB DSECT          X\n               RPL,                GENERATE MVS  IFGRPL DSECT          X\n               WPL                 GENERATE MVS  WPL DSECT\n               SPACE 3\n         EJECT\n***********************************************************************\n*                                                                     *\n*        USER ADDITION OF THE DTE                                     *\n*                                                                     *\n***********************************************************************\nDTE      DSECT\n         ORG  DTEWORK\n         DS   0CL2048              2048 BYTE EXTENSION\n         $FCSDTE ,                 MAP THE COMMON DTE EXTENSION AREA\n***********************************************************************\n*                                                                     *\n*        WORK AREA USED BY JOB INFORMATION FILE ROUTINE               *\n*                                                                     *\n***********************************************************************\nSAVER14  DS    F                   ROUTINE RETURN ADDRESS\nMYACBADD DS    F                   ADDRESS OF OUR ACB\nMYRPLADD DS    F                   ADDRESS OF OUR RPL\nOPENL    OPEN  (,INPUT),MF=L       OPEN LIST FORM\nCLOSEL   CLOSE (0),MF=L            CLOSE LIST FORM\nKEY      DS    CL16                VSAM FILE KEY\nLDDN     DS    H                   LENGTH OF DDNAME\nDDNAME   DS    CL8                 DDNAME OF VSAM FILE\nLDSN     DS    H                   LENGTH OF DSNAME\nDSNAME   DS    CL44                DSNAME OF VSAM FILE\nINREC    DS    CL256               VSAM RECORD\nRLIST    DS    20F                 REMOTE PARAMETER LIST\nDBLJ1    DS    D                   DOUBLE WORD WORK AREA 1\nDBLJ2    DS    D                   DOUBLE WORD WORK AREA 2\nERRCODE1 DS    CL5                 DYNFAIL WORK AREA\nERRCODE2 DS    CL5                 DYNFAIL WORK AREA\n         SPACE 3\n***********************************************************************\n*                SVC 99 INPUT REQUEST BLOCK                           *\n***********************************************************************\nS99RBP   DS     0F\nS99RBPTR DC     X'80',AL3(S99RB)   REQUEST BLOCK POINTER\nS99RB    DS     0F                 REQUEST BLOCK\nS99RBLN  DC     AL1(20)            LENGTH OF REQUEST BLOCK\nS99VERB  DC     X'01'              VERB CODE\nS99VRBAL EQU    X'01'              ALLOCATION\nS99VRBUN EQU    X'02'              UNALLOCATION\nS99VRBCC EQU    X'03'              CONCATENATION\nS99VRBDC EQU    X'04'              DECONCATENATION\nS99VRBRI EQU    X'05'              REMOVE IN-USE\nS99VRBDN EQU    X'06'              DDNAME ALLOCATION\nS99VRBIN EQU    X'07'              INFORMATION RETRIEVAL\nS99FLAG1 DS     0CL2               FLAGS\nS99FLG11 DC     XL1'00'            FIRST FLAGS BYTE\nS99ONCNV EQU    X'80'              ALLOC FUNCTION-DO NOT USE AN\n*                                  EXISTING ALLOCATION THAT DOES\n*                                  NOT HAVE THE CONVERTIBLE\n*                                  ATTRIBUTE TO SATISFY A REQUEST\nS99NOCNV EQU    X'40'              ALLOC FUNCTION-DO NOT USE AN\n*                                  EXISTING ALLOCATION TO SATISFY\n*                                  THE REQUEST\nS99NOMNT EQU    X'20'              ALLOC FUNCTION-DO NOT MOUNT\n*                                  VOLUMES OR CONSIDER OFFLINE\n*                                  UNITS (THIS FLAG OVERRIDES\n*                                  S99MOUNT AND S99OFFLN BELOW)\nS99JBSYS EQU    X'10'              ALLOC FUNC-JOB RELATED SYSOUT\nS99CNENQ EQU    X'08'              ALL FUNCTIONS-ISSUE A\n*                                  CONDITIONAL ENQ ON TIOT\n*                                  RESOURCE. IF NOT\n*                                  AVAILABLE, RETURN AN\n*                                  ERROR CODE TO USER.\nS99FLG12 DC     XL1'00'            SECOND BYTE OF FLAGS\nS99RSC   DS     0CL4               REASON CODE FIELDS\nS99ERROR DC     XL2'0000'          ERROR REASON CODE\nS99INFO  DC     XL2'0000'          INFORMATION REASON CODE\nS99TXTPP DC     A(S99TUPL)         ADDR OF LIST OF TEXT UNIT PTRS\nS99RSV01 DC     F'0'               RESERVED\nS99FLAG2 DS     0CL4               FLAGS FOR AUTHORIZED FUNCTIONS\nS99FLG21 DC     XL1'00'            FIRST BYTE OF FLAGS\nS99WTVOL EQU    X'80'              ALLOC FUNCTION-WAIT FOR\n*                                  VOLUMES\nS99WTDSN EQU    X'40'              ALLOC FUNCTION-WAIT FOR DSNAME\nS99NORES EQU    X'20'              ALLOC FUNCTION-DO NOT DO\n*                                  DATA SET RESERVATION\nS99WTUNT EQU    X'10'              ALLOC FUNCTION-WAIT FOR UNITS\nS99OFFLN EQU    X'08'              ALLOC FUNCTION-CONSIDER OFFLINE\n*                                  UNITS\nS99TIONQ EQU    X'04'              ALL FUNCTIONS-TIOT ENQ ALREADY\n*                                  DONE\nS99CATLG EQU    X'02'              ALLOC FUNCTION-SET SPECIAL\n*                                  CATALOG DATA SET INDICATORS\nS99MOUNT EQU    X'01'              ALLOC FUNCTION-MAY MOUNT VOLUME\nS99FLG22 DC     XL1'00'            SECOND BYTE OF FLAGS\nS99UDEVT EQU    X'80'              ALLOCATION FUNCTION-UNIT NAME\n*                                  PARM IS A DEVICE TYPE\nS99PCINT EQU    X'40'              ALLOC FUNCTION-ALLOC\n*                                  PRIVATE CATALOG TO\n*                                  INITIATOR\nS99FLG23 DC     XL1'00'            THIRD BYTE OF FLAGS\nS99FLG24 DC     XL1'00'            FOURTH BYTE OF FLAGS\nS99RBEND EQU    *                  END MARKER\n***********************************************************************\n* SVC 99 TEXT UNIT POINTER LIST                                       *\n***********************************************************************\n         DS     0F                 TEXT UNIT POINTER LIST\nS99TUPL  DC     10A(0)             ROOM FOR 10 TEXT UNITS\n         SPACE 3\n         DS    0H\nTUDDN    DC    X'0001',AL2(1),AL2(8),CL8' '         DDNAME\n         DS    0H\nTUDSN    DC    X'0002',AL2(1),AL2(44),CL44' '       DSNAME\n         DS    0H\nTUDISP   DC    X'0004',AL2(1),AL2(01),XL01'08'      DISP=SHR\n         DS    0H\nTURDDN   DC    X'0055',AL2(1),AL2(08),CL08' '       NEW DDNAME\n         ORG   DTEUEXTN            USER WORK EXTENSION AREA\nDBLU1    DS    D                   DOUBLE WORD WORK AREA 1\nDBLU2    DS    D                   DOUBLE WORD WORK AREA 2\nUCC7SVCA DS    F                   EPA ADDRESS OF SASSSVCA\nUCC7CMD  DS    CL100               COMMAND LIST PASSED TO SASSSVCA\n         SU7SVC TYPE=DA,SECT=NO    MAP THE SASSSVCA PARM LIST\nJ024JIT  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n         $FCSUCT ,                 GENERATE THE UCT DSECT\nJ024JIT  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n         $FCSJITB ,                GENERATE THE JITB DSECT\nJ024JIT  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ACTUAL JES2 EXIT ENTRY POINT                                 *\n*                                                                     *\n***********************************************************************\nE024JIT  $ENTRY  BASE=(R10,R12)\n         $SAVE\n         LR    R10,R15             ESTABLISH FIRST BASE REGISTER\n         LA    R12,4095(R10)       ESTABLISH SECOND\n         LA    R12,1(R12)              BASE REGISTER\n         USING HCT,R11             ESTABLISH ADDRESSABILITY TO HCT\n         ICM   R9,15,$UCT          GET UCT ADDRESS\n         BZ    EXIT24EN            ZERO, JUST GET OUT\n         USING UCT,R9              ESTABLISH ADDRESSABILITY TO UCT\n         LA    R1,JOBINFO          LOAD EPA ADDRESS OF SUBTASK\n         ST    R1,UCTJITA          SAVE EPA ADDRESS IN UCT\n         LA    R1,UCC7TASK         LOAD EPA ADDRESS OF SUBTASK\n         ST    R1,UCTUC7A          SAVE EPA ADDRESS IN UCT\n***********************************************************************\n*        SAVE USER DTETAB ADDRESS IN MCT                              *\n***********************************************************************\n         L     R8,$MCT             LOAD ADDRESS OF MASTER CONTROL TABLE\n         USING MCT,R8              ESTABLISH ADDRESSABILITY TO MCT\n         LA    R1,DTES             LOAD ADDRESS OF USER DTETABLE\n         ST    R1,MCTDTETU         SAVE ADDRESS IN MCT\n         DROP  R8                  DROP ADDRESSABILITY TO MCT\n***********************************************************************\n*        START JOB INFORMATION SUBTASK                                *\n***********************************************************************\n         $DTEDYN ATTACH,WAIT=ECB,PARM=HCT,ID=255,ERRET=ERROR02\n         ST    R1,UCTJITDT         SAVE DTE ADDRESS IN UCT\n         LR    R8,R1               SET ADDRESS OF DTE\n         USING DTE,R8              SET ADDRESSABILITY TO DTE\n         XC    DTEFQUE,DTEFQUE     ZERO THE WORK QUEUE POINTER\n         MVC   DTEUMSG(LWTO4),WTO4 SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE INIT COMPLETE MESSAGE\n         DROP  R8                  DROP ADDRESSABILITY TO DTE\n***********************************************************************\n*        START UCC7 SUBTASK                                           *\n***********************************************************************\n         $DTEDYN ATTACH,WAIT=ECB,PARM=HCT,ID=254,ERRET=ERROR03\n         ST    R1,UCTUC7DT         SAVE DTE ADDRESS IN UCT\n         LR    R8,R1               SET ADDRESS OF DTE\n         USING DTE,R8              SET ADDRESSABILITY TO DTE\n         XC    DTEFQUE,DTEFQUE     ZERO THE WORK QUEUE POINTER\n         MVC   DTEUMSG(LWTO5),WTO5 SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE INIT COMPLETE MESSAGE\n***********************************************************************\n*                        C L E A N    U P                             *\n***********************************************************************\nEXIT24EN $RETURN RC=0\n         EJECT\n***********************************************************************\n*                     E R R O R    R O U T I N E S                    *\n***********************************************************************\nERROR01  MVC   DTEUMSG(LWTO1),WTO1 SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE ERROR MESSAGE\n         B     EXIT24EN            GET OUT\nERROR02  MVC   DTEUMSG(LWTO2),WTO2 SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE ERROR MESSAGE\n         B     EXIT24EN            GET OUT\nERROR03  MVC   DTEUMSG(LWTO3),WTO3 SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE ERROR MESSAGE\n         B     EXIT24EN            GET OUT\n         DROP  R8                  DROP ADDRESSABILITY TO DTE\n         EJECT\n***********************************************************************\n*                     C O N S T A N T S                               *\n***********************************************************************\n         LTORG\n         SPACE 3\n         $MID  960\nWTO1     WTO   '&MID.PREVIOUSLY DEFINED UCT FOUND DURING JOB INFORMATIOX\n               N ROUTINE INITIALIZATION',                              X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO1    EQU   *-WTO1\nWTO2     WTO   '&MID.UNABLE TO ATTACH JOB INFORMATION ROUTINE SUBTASK',X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO2    EQU   *-WTO2\nWTO3     WTO   '&MID.UNABLE TO ATTACH UCC7 SUBTASK',                   X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO3    EQU   *-WTO3\nWTO4     WTO   '&MID.JOB INFORMATION SUBTASK INITIALIZATION COMPLETE', X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO4    EQU   *-WTO4\nWTO5     WTO   '&MID.UCC7 SUBTASK INITIALIZATION COMPLETE',            X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTO5    EQU   *-WTO5\n         SPACE 3\n         $DTETAB TABLE=USER\nDTES     $DTETAB NAME=JOBINFO,ID=255,EPNAME=JOBINFO,                   X\n               EPLOC=UCTJITA,HEAD=UCTJITH,SZERO=NO,                    X\n               WORKLEN=2048\n         $DTETAB NAME=UCC7TASK,ID=254,EPNAME=UCC7TASK,                 X\n               EPLOC=UCTUC7A,HEAD=UCTUC7H,SZERO=NO,                    X\n               WORKLEN=2048\n         $DTETAB TABLE=END\n         EJECT\n         PUSH USING\n         TITLE 'JES2 JOB INFORMATION ROUTINE SUBTASK'\n***********************************************************************\n*                                                                     *\n*        ACTUAL JOB INFORMATION ROUTINE SUBTASK ENTRY POINT           *\n*                                                                     *\n***********************************************************************\nJOBINFO  $ENTRY  BASE=(R10,R12)\n         LR    R10,R15             ESTABLISH FIRST BASE REGISTER\n         LA    R12,4095(R10)       ESTABLISH SECOND\n         LA    R12,1(R12)              BASE REGISTER\n         LR    R13,R1              SET NEW SAVE AREA ADDRESS\n         USING DTE,R13             ESTABLISH ADDRESSABILITY TO DTE\n         L     R11,DTEPARM         LOAD HCT ADDRESS FROM DTE\n         USING HCT,R11             ESTABLISH ADDRESSABILITY TO HCT\n         $AMODE 31                 GO TO AMODE 31\n***********************************************************************\n*                                                                     *\n*        SET UP ESTAE ENVIRONMENT                                     *\n*                                                                     *\n***********************************************************************\n         MVC   DTEVRXAD,$ZEROS     SET RECOVERY VRA EXIT ADDRESS\n         MVC   DTEESXAD,$ZEROS     SET RECOVERY CLEAN UP EXIT ADDR\n         MVC   DTERTXAD,=A(JINFRETR) SET RECOVERY RETRY EXIT ADDRESS\n         L     R2,$STABNDA         LOAD SUBTASK ESTAE RTN ADDRESS\n         LR    R3,R13              SET DTE ADDRESS\n         MVC   DTEAWRKA(LESTAEL1),ESTAEL1 SET ESATE LIST FORM\n         ESTAE (2),PARAM=(3),RECORD=YES,MF=(E,DTEAWRKA)\n         LA    R14,DTEWORK         SET 'TO' ADDRESS\n         LA    R15,2048            SET   'TO'   LENGTH\n         SLR   R0,R0               CLEAR 'FROM' ADDRESS\n         SLR   R1,R1               CLEAR 'FROM' LENGTH\n         MVCL  R14,R0              CLEAR THE WORK AREA\n***********************************************************************\n*                                                                     *\n*        FINISH INITIALIZATION PROCESSING                             *\n*                                                                     *\n***********************************************************************\n         MVC   DTEUMSG(LWTOJIM1),WTOJIM1 SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE INIT STARTED MESSAGE\nJINFRIN  TM    UCTJITOP,UCTJITDR   SEE IF INITIAL OPTION OF DRAINED\n         BO    JINFACT             YES, BYPASS INITIALIZATION\n         BAL   R14,JINFINIT        GO INITIALIZE FILE PROCESSING\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   JINFACT             NOT ZERO, BAD\n         BAL   R14,JINFALOC        GO ALLOCATE JOB INFO FILE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   JINFACT             NOT ZERO, BAD\n         BAL   R14,JINFOPEN        GO OPEN JOB INFO FILE\nJINFACT  OI    DTEFLAG1,DTE1ACTV   TURN ON ACTIVE BIT\n         POST  DTEIECB             POST INITIALIZATION COMPLETE\nJINFWAIT TM    DTEFLAG1,DTE1TERM   SEE IF TERMINATION REQUESTED\n         BO    JINFTERM            YES, BRANCH\n         WAIT  ECB=DTEWECB         WAIT ON WORK\n         XC    DTEWECB,DTEWECB     ZERO THE ECB AGAIN\n***********************************************************************\n*                                                                     *\n*        GET A JITB FROM THE LIFO QUEUE OF PENDING WORK               *\n*                                                                     *\n***********************************************************************\nJINFNEXT TM    DTEFLAG1,DTE1TERM   SEE IF TERMINATION REQUESTED\n         BO    JINFTERM            YES, BRANCH\n         ICM   R7,15,DTEFQUE       CHECK QUEUE POINTER\n         USING JITB,R7             SET ADDRESSABILITY TO JITB\n         BZ    JINFWAIT            ZERO, NONE, GO WAIT FOR WORK\nJINFUNCH L     R1,JITBCH           LOAD ADDRESS OF NEXT JITB\n         CS    R7,R1,DTEFQUE       REMOVE JITB FROM QUEUE\n         BNE   JINFUNCH            QUEUE CHANGED, LOOP\n         CLC   JITBID,=C'JITB'     SEE IF REALLY A JITB\n         BNE   JINFABND            NO, ERROR\n         ST    R7,DTEJITBA         SAVE ADDRESS OF CURRENT JITB\n         MVI   JITBSTAT,0          ZERO THE STATUS FLAGS\n***********************************************************************\n*                                                                     *\n*        TEST FOR READ REQUEST                                        *\n*                                                                     *\n***********************************************************************\nJINFOP1  TM    JITBFLG,JITBREAD    SEE IF REQUEST FOR READ\n         BNO   JINFOP2             NO, BRANCH\n         TM    DTEFLAGS,JOPEN      SEE IF FILE OPENED\n         BNO   JINFPOST            FILE NOT OPENED, IGNORE THIS REQUEST\n         MVC   KEY,JITBKEY         SET VSAM FILE KEY\n         BAL   R14,JINFGET         GO READ JOB INFO FILE\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    JINFOUND            ZERO, FOUND THE RECORD\n         B     JINFPOST            NOT ZERO, RECORD NOT FOUND\n         EJECT\n***********************************************************************\n*                                                                     *\n*        TEST FOR START FILE REQUEST                                  *\n*                                                                     *\n***********************************************************************\nJINFOP2  TM    JITBFLG,JITBSTAR    SEE IF START FILE REQUEST\n         BNO   JINFOP3             NO, BRANCH\n         TM    DTEFLAGS,JALLOC+JOPEN SEE IF FILE HAS BEEN STOPPED\n         BNZ   JINFOP2A            NO, ERROR\n         BAL   R14,JINFINIT        GO INITIALIZE FILE PROCESSING\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   JINFOP2B            NOT ZERO, BAD\n         BAL   R14,JINFALOC        GO ALLOCATE JOB INFO FILE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   JINFOP2B            NOT ZERO, BAD\n         BAL   R14,JINFOPEN        GO OPEN JOB INFO FILE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   JINFOP2B            NOT ZERO, BAD\n         OI    JITBSTAT,JITBOK     TURN ON 'OK' FLAG\n         B     JINFPOST            ZERO, GO GET ANOTHER JITB (IF ONE)\nJINFOP2A MVC   DTEUMSG(LWTOJIM4),WTOJIM4 FILE NOT STOPPED MSG\n         $$WTO DTEUMSG             WRITE MESSAGE\n         B     JINFPOST            GO GET ANOTHER JITB (IF ONE)\nJINFOP2B MVC   DTEUMSG(LWTOJIM5),WTOJIM5 FILE CANNOT BE STARTED MSG\n         $$WTO DTEUMSG             WRITE MESSAGE\n         B     JINFPOST            GO GET ANOTHER JITB (IF ONE)\n         EJECT\n***********************************************************************\n*                                                                     *\n*        TEST FOR STOP FILE REQUEST                                   *\n*                                                                     *\n***********************************************************************\nJINFOP3  TM    JITBFLG,JITBSTOP    SEE IF STOP FILE REQUEST\n         BNO   JINFOP4             NO, BRANCH\n         TM    DTEFLAGS,JALLOC+JOPEN SEE IF FILE HAS BEEN STOPPED\n         BZ    JINFOP3A            YES, ERROR\n         BAL   R14,JINFCLOS        GO CLOSE THE JOB INFO FILE\n         BAL   R14,JINFREE         GO FREE THE JOB INFO FILE\n         OI    JITBSTAT,JITBOK     TURN ON 'OK' FLAG\n         TM    DTEFLAGS,JALLOC+JOPEN SEE IF FILE HAS BEEN STOPPED\n         BNZ   JINFOP3B            NO, ERROR\n         B     JINFPOST            ZERO, GO GET ANOTHER JITB (IF ONE)\nJINFOP3A MVC   DTEUMSG(LWTOJIM6),WTOJIM6 FILE NOT STARTED MSG\n         $$WTO DTEUMSG             WRITE MESSAGE\n         B     JINFPOST            GO GET ANOTHER JITB (IF ONE)\nJINFOP3B MVC   DTEUMSG(LWTOJIM7),WTOJIM7 FILE CANNOT BE STOPPED MSG\n         $$WTO DTEUMSG             WRITE MESSAGE\n         B     JINFPOST            GO GET ANOTHER JITB (IF ONE)\n         EJECT\n***********************************************************************\n*                                                                     *\n*        TEST FOR RESTART FILE REQUEST                                *\n*                                                                     *\n***********************************************************************\nJINFOP4  TM    JITBFLG,JITBREST    SEE IF RESTART FILE REQUEST\n         BNO   JINFPOST            UNKNOWN REQUEST, IGNORE IT\n         TM    DTEFLAGS,JALLOC+JOPEN SEE IF FILE HAS BEEN STOPPED\n         BZ    JINFOP4A            YES, BRANCH\n         BAL   R14,JINFCLOS        GO CLOSE THE JOB INFO FILE\n         BAL   R14,JINFREE         GO FREE THE JOB INFO FILE\n         TM    DTEFLAGS,JALLOC+JOPEN SEE IF FILE HAS BEEN STOPPED\n         BNZ   JINFOP4B            NO, ERROR\nJINFOP4A BAL   R14,JINFINIT        GO INITIALIZE FILE PROCESSING\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   JINFOP4B            NOT ZERO, BAD\n         BAL   R14,JINFALOC        GO ALLOCATE JOB INFO FILE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   JINFOP4B            NOT ZERO, BAD\n         BAL   R14,JINFOPEN        GO OPEN JOB INFO FILE\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   JINFOP4B            NOT ZERO, BAD\n         OI    JITBSTAT,JITBOK     TURN ON 'OK' FLAG\n         B     JINFPOST            GO GET ANOTHER JITB (IF ONE)\nJINFOP4B MVC   DTEUMSG(LWTOJIM8),WTOJIM8 FILE CANNOT BE RESTARTED MSG\n         $$WTO DTEUMSG             WRITE MESSAGE\n         B     JINFPOST            GO GET ANOTHER JITB (IF ONE)\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MATCH FOUND                                                  *\n*                                                                     *\n***********************************************************************\nJINFOUND MVC   JITBREC,INREC       MOVE VSAM RECORD TO JITB\n         OI    JITBSTAT,JITBOK     TURN ON 'OK' FLAG\n***********************************************************************\n*                                                                     *\n*        END OF PROCESSING FOR THIS JITB                              *\n*                                                                     *\n***********************************************************************\nJINFPOST XC    DTEJITBA,DTEJITBA   ZERO ADDRESS OF CURRENT JITB\n         POST  JITBXECB            POST CALLER OF COMPLETION\n         B     JINFNEXT            GO GET ANOTHER JITB (IF ONE)\n         EJECT\n***********************************************************************\n*                                                                     *\n*        TERMINATION REQUESTED                                        *\n*                                                                     *\n***********************************************************************\nJINFTERM MVC   DTEUMSG(LWTOJIM2),WTOJIM2 SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE TERMINATION REQUESTED MESSAGE\n         BAL   R14,JINFCLOS        GO CLOSE THE JOB INFO FILE\n         BAL   R14,JINFREE         GO FREE THE JOB INFO FILE\n         NI    DTEFLAG1,255-DTE1ACTV TURN OFF ACTIVE SWITCH\n         ESTAE 0                   CANCEL ESTAE ENVIRONMENT\n         SVC   3                   TERMINATE SUBTASK\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ALLOCATE THE VSAM FILE                                       *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n*        DETERMINE THE LENGTH OF THE DSNAME                           *\n***********************************************************************\nJINFALOC ST    R14,SAVER14         SAVE RETURN ADDRESS\n         TM    DTEFLAGS,JALLOC     TEST ALLOCATED INDICATOR\n         BO    JINFAL03            ON, JUST GET OUT OF ROUTINE\n         MVC   DSNAME,UCTJITDS     SAVE DSNAME\n         LA    R15,44              SET LOOP COUNTER\n         LA    R14,0               SET LENGTH OF DSN\n         LA    R1,DSNAME           POINT TO START OF DSNAME\nJINFAL01 CLI   0(R1),C' '          SEE IF END OF DSNAME\n         BNH   JINFAL02            YES, GET OUT\n         LA    R14,1(R14)          ADD 1 TO LENGTH\n         LA    R1,1(R1)            INCREMENT TO NEXT CHAR OF DSNAME\n         BCT   R15,JINFAL01        LOOP\nJINFAL02 STH   R14,LDSN            SAVE LENGTH OF DSNAME\n         LTR   R14,R14             TEST LENGTH OF DSNAME\n         BZ    JINFAL06            ZERO, ERROR\n***********************************************************************\n*        PERFORM DYNAMIC ALLOCATION                                   *\n***********************************************************************\n         LA    R15,S99RB           LOAD ADDRESS OF RB\n         ST    R15,S99RBPTR        SAVE IT IN RB POINTER LIST\n         MVI   S99RBPTR,X'80'      FLAG END OF LIST\n         MVI   S99RBLN,20          SET LENGTH OF RB\n         MVI   S99VERB,S99VRBAL    SET VERB FOR ALLOCATION\n         XC    S99FLAG1,S99FLAG1   ZERO FLAG FIELD 1\n         XC    S99RSC,S99RSC       ZERO RETURN CODE FIELDS\n         LA    R15,S99TUPL         LOAD ADDRESS OF TEXT UNIT PARM LIST\n         ST    R15,S99TXTPP        AND SAVE IT IN RB\n         XC    S99RSV01,S99RSV01   ZERO RESERVED FIELD\n         XC    S99FLAG2,S99FLAG2   ZERO FLAG FIELD 2\n         LA    R15,TUDSN           LOAD ADDRESS OF DSN TEXT UNIT\n         ST    R15,S99TUPL         SAVE IT IN TEXT UNIT PARM LIST\n         LA    R15,TUDISP          LOAD ADDRESS OF DISP TEXT UNIT\n         ST    R15,S99TUPL+4       SAVE IT IN TEXT UNIT PARM LIST\n         LA    R15,TURDDN          LOAD ADDRESS OF RETURN DDN TEXT UNIT\n         ST    R15,S99TUPL+8       SAVE IT IN TEXT UNIT PARM LIST\n         MVI   S99TUPL+8,X'80'     FLAG END OF LIST\n         MVC   TUDSN(LTUDSN),ITUDSN    INITIALIZE DSN TEXT UNIT\n         MVC   TUDISP(LTUDISP),ITUDISP INITIALIZE DISP TEXT UNIT\n         MVC   TURDDN(LTURDDN),ITURDDN INITIALIZE RETURN DDN TEXT UNIT\n         LH    R15,LDSN            LOAD LENGTH OF DSNAME\n         STH   R15,TUDSN+4         SAVE LENGTH OF DSNAME IN TEXT UNIT\n         MVI   TUDSN+6,C' '        BLANK THE\n         MVC   TUDSN+7(43),TUDSN+6       ENTIRE DSNAME\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MVDSN           MOVE DSNAME TO TEXT UNIT\nMVDSN    MVC   TUDSN+6(0),DSNAME   **** EXECUTE ONLY ****\n         LA    R1,S99RBPTR         LOAD ADDRESS OF RB POINTER\n         DYNALLOC ,                CALL DYNAMIC ALLOCATION\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   JINFAL07            NOT ZERO, ERROR\n         LH    R15,TURDDN+4        LOAD LENGTH OF DDNAME\n         STH   R15,LDDN            SAVE LENGTH OF DDNAME\n         MVI   DDNAME,C' '         BLANK THE\n         MVC   DDNAME+1(7),DDNAME        ENTIRE DDNAME\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MVDDN1          MOVE DDNAME TO SAVE AREA\nMVDDN1   MVC   DDNAME(0),TURDDN+6  **** EXECUTE ONLY ****\n         L     R2,MYACBADD         LOAD ADDRESS OF ACB\n         LA    R6,RLIST            LOAD ADDRESS OF REMOTE PARM LIST\n         MODCB ACB=(R2),                                               X\n               DDNAME=(*,DDNAME),                                      X\n               MF=(G,(R6),LRLIST1)\n         LTR   R15,R15             TEST MODCB RETURN CODE\n         BNZ   JINFAL08            NOT ZERO, ERROR\n***********************************************************************\n*        RETURN TO CALLER WITH APPROPRIATE RETURN CODE                *\n***********************************************************************\nJINFAL03 SLR   R15,R15             SET RETURN CODE TO ZERO\n         OI    DTEFLAGS,JALLOC     TURN ON ALLOCATED INDICATOR\n         B     JINFAL05            GO RETURN TO CALLER\nJINFAL04 LA    R15,4               SET RETURN CODE TO 4\nJINFAL05 L     R14,SAVER14         RESTORE RETURN ADDRESS\n         BR    R14                 RETURN TO CALLER\n***********************************************************************\n*        THE LENGTH OF THE DSNAME WAS ZERO                            *\n***********************************************************************\nJINFAL06 MVC   DTEUMSG(LWTOJIM9),WTOJIM9 SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE ERROR MESSAGE\n         MVC   DTEUMSG(LWTOJIMA),WTOJIMA SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE ERROR MESSAGE\n         B     JINFAL04            GO RETURN TO CALLER\n***********************************************************************\n*        DYNAMIC ALLOCATION FAILURE                                   *\n***********************************************************************\nJINFAL07 CVD   R15,DBLJ1           CONVERT RETURN CODE TO PACKED\n         MVC   DBLJ2(4),=X'F0202120' SET EDIT MASK\n         ED    DBLJ2(4),DBLJ1+6    MAKE RETURN CODE PRINTABLE\n         UNPK  ERRCODE1(5),S99ERROR(3) UNPACK ERROR CODE + 1 BYTE\n         TR    ERRCODE1(4),TRTBL1  MAKE IT PRINTABLE\n         UNPK  ERRCODE2(5),S99INFO(3) UNPACK INFO CODE + 1 BYTE\n         TR    ERRCODE2(4),TRTBL1  MAKE IT PRINTABLE\n         MVC   DTEUMSG(LWTOJIMA),WTOJIMA SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE ERROR MESSAGE\n         MVC   DTEUMSG(LWTOJIMB),WTOJIMB SET MESSAGE BUFFER\n         MVC   DTEUMSG+4+9+9(2),DBLJ2+2   MOVE RETURN CODE TO MESSAGE\n         MVC   DTEUMSG+4+9+14(4),ERRCODE1 MOVE ERRCD TO MESSAGE\n         MVC   DTEUMSG+4+9+21(4),ERRCODE2 MOVE INFOCD TO MESSAGE\n         $$WTO DTEUMSG             WRITE ERROR MESSAGE\n         B     JINFAL04            GO RETURN TO CALLER\nTRTBL1   EQU   *-240               HEX TO DISPLAY TRANSLATE TABLE\n         DC    C'0123456789ABCDEF'\n***********************************************************************\n*        MODCB FOR ACB FAILED                                         *\n***********************************************************************\nJINFAL08 MVC   DTEUMSG(LWTOJIME),WTOJIME SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE ERROR MESSAGE\n         B     JINFAL04            GO RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INITIALIZE THE ACB AND THE RPL FOR THE JOB INFORMATION       *\n*        FILE                                                         *\n*                                                                     *\n***********************************************************************\nJINFINIT ST    R14,SAVER14         SAVE RETURN ADDRESS\n         TM    DTEFLAGS,JINIT      TEST INITIALIZED INDICATOR\n         BO    JINFIN02            ON, JUST GET OUT OF ROUTINE\n         LA    R6,RLIST            LOAD ADDRESS OF REMOTE PARM LIST\n         GENCB BLK=ACB,                                                X\n               AM=VSAM,                                                X\n               BUFND=1,                                                X\n               BUFNI=3,                                                X\n               MACRF=(KEY,DIR,IN),                                     X\n               MF=(G,(R6),LRLIST2)\n         LTR   R15,R15             TEST GENCB RETURN CODE\n         BNZ   JINFIN05            NOT ZERO, ERROR\n         ST    R1,MYACBADD         SAVE ADDRESS OF ACB\n         LR    R2,R1               SAVE ACB ADDRESS\n         LA    R6,RLIST            LOAD ADDRESS OF REMOTE PARM LIST\n         GENCB BLK=RPL,                                                X\n               AM=VSAM,                                                X\n               AREALEN=256,                                            X\n               KEYLEN=16,                                              X\n               OPTCD=(KEY,DIR,SYN,NUP,KEQ,FKS,MVE),                    X\n               MF=(G,(R6),LRLIST3)\n         LTR   R15,R15             TEST GENCB RETURN CODE\n         BNZ   JINFIN06            NOT ZERO, ERROR\n         ST    R1,MYRPLADD         SAVE ADDRESS OF RPL\n         LR    R3,R1               SAVE RPL ADDRESS\n         LA    R6,RLIST            LOAD ADDRESS OF REMOTE PARM LIST\n         MODCB RPL=(R3),                                               X\n               ACB=(R2),                                               X\n               AREA=(S,INREC),                                         X\n               ARG=(S,KEY),                                            X\n               MF=(G,(R6),LRLIST4)\n         LTR   R15,R15             TEST MODCB RETURN CODE\n         BNZ   JINFIN07            NOT ZERO, ERROR\n***********************************************************************\n*        RETURN TO CALLER WITH APPROPRIATE RETURN CODE                *\n***********************************************************************\nJINFIN02 SLR   R15,R15             SET RETURN CODE TO ZERO\n         OI    DTEFLAGS,JINIT      TURN ON INITIALIZED INDICATOR\n         B     JINFIN04            GO RETURN TO CALLER\nJINFIN03 LA    R15,4               SET RETURN CODE TO 4\nJINFIN04 L     R14,SAVER14         RESTORE RETURN ADDRESS\n         BR    R14                 RETURN TO CALLER\n***********************************************************************\n*        GENCB FOR ACB FAILED                                         *\n***********************************************************************\nJINFIN05 MVC   DTEUMSG(LWTOJIMC),WTOJIMC SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE ERROR MESSAGE\n         B     JINFIN03            GO RETURN TO CALLER\n***********************************************************************\n*        GENCB FOR RPL FAILED                                         *\n***********************************************************************\nJINFIN06 MVC   DTEUMSG(LWTOJIMD),WTOJIMD SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE ERROR MESSAGE\n         B     JINFIN03            GO RETURN TO CALLER\n***********************************************************************\n*        MODCB FOR RPL FAILED                                         *\n***********************************************************************\nJINFIN07 MVC   DTEUMSG(LWTOJIMF),WTOJIMF SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE ERROR MESSAGE\n         B     JINFIN03            GO RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        OPEN THE JOB INFORMATION FILE                                *\n*                                                                     *\n***********************************************************************\nJINFOPEN ST    R14,SAVER14         SAVE RETURN ADDRESS\n         TM    DTEFLAGS,JOPEN      TEST OPEN INDICATOR\n         BO    JINFOP01            ON, JUST GET OUT OF ROUTINE\n         L     R2,MYACBADD         LOAD THE ACB ADDRESS\n         MVI   OPENL,X'80'         SET END OF LIST INDICATOR\n         OPEN  ((R2),INPUT),MF=(E,OPENL)\n         USING IFGACB,R2           SET ADDRESSABILITY TO ACB\n         TM    ACBOFLGS,ACBOPEN    SEE IF OPEN FLAG IS ON\n         BNO   JINFOP04            NO, ERROR\n         DROP  R2                  DROP ADDRESSABILITY TO ACB\n***********************************************************************\n*        RETURN TO CALLER WITH APPROPRIATE RETURN CODE                *\n***********************************************************************\nJINFOP01 SLR   R15,R15             SET RETURN CODE TO ZERO\n         OI    DTEFLAGS,JOPEN      TURN ON OPEN INDICATOR\n         B     JINFOP03            GO RETURN TO CALLER\nJINFOP02 LA    R15,4               SET RETURN CODE TO 4\nJINFOP03 L     R14,SAVER14         RESTORE RETURN ADDRESS\n         BR    R14                 RETURN TO CALLER\n***********************************************************************\n*        OPEN FAILED FOR THE JOB INFORMATION FILE                     *\n***********************************************************************\nJINFOP04 MVC   DTEUMSG(LWTOJIMG),WTOJIMG SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE ERROR MESSAGE\n         B     JINFOP02            GO RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        READ A RECORD FROM THE JOB INFORMATION FILE                  *\n*                                                                     *\n***********************************************************************\nJINFGET  ST    R14,SAVER14         SAVE RETURN ADDRESS\n         TM    DTEFLAGS,JOPEN      TEST OPEN INDICATOR\n         BNO   JINFGE03            NO, ACT IF GET FAILED\n         OI    DTEFLAGS,JACT       TURN ON I/O ACTIVE INDICATOR\n         L     R3,MYRPLADD         LOAD THE RPL ADDRESS\n         GET   RPL=(R3)            READ A RECORD\n         NI    DTEFLAGS,255-JACT   TURN OFF I/O ACTIVE INDICATOR\n         LR    R2,R15              SAVE RETURN CODE\n         LTR   R15,R15             TEST RETURN CODE\n         BZ    JINFGE02            ZERO, OK\n         CH    R15,=H'8'           SEE IF LOGICAL ERROR\n         BNE   JINFGE01            NO, ABNORMAL RC\n         USING IFGRPL,R3           SET ADDRESSABILITY TO RPL\n         CLI   RPLERRCD,X'04'      SEE IF EOF\n         BE    JINFGE02            YES, NORMAL RECORD NOT FOUND\n         CLI   RPLERRCD,X'10'      SEE IF RECORD NOT FOUND\n         BE    JINFGE02            YES, NORMAL RECORD NOT FOUND\nJINFGE01 MVC   DTEUMSG(LWTOJIMH),WTOJIMH SET MESSAGE BUFFER\n         CVD   R15,DBLJ1           CONVERT RETURN CODE TO PACKED\n         OI    DBLJ1+7,X'0F'       MAKE PRINTABLE\n         UNPK  DTEUMSG+4+9+35(2),DBLJ1+6(2)  UNPACK RETURN CODE\n         UNPK  DBLJ1(5),RPLFDBWD(3) UNPACK 1ST HALF FEEDBACK WORK\n         TR    DBLJ1(4),TRTBL1     MAKE PRINTABLE\n         MVC   DTEUMSG+4+9+47(4),DBLJ1 MOVE 1ST HALF TO MESSAGE\n         UNPK  DBLJ1(5),RPLFDBWD+2(3) UNPACK 2ND HALF FEEDBACK WORK\n         TR    DBLJ1(4),TRTBL1     MAKE PRINTABLE\n         MVC   DTEUMSG+4+9+51(4),DBLJ1 MOVE 2ND HALF TO MESSAGE\n         $$WTO DTEUMSG             I/O ERROR MESSAGE\nJINFGE02 MRKBFR RPL=(R3),MARK=XINVALID MARK BUFFERS INVALID\n         LR    R15,R2              RESTORE RETURN CODE\n         B     JINFGE04            GET OUT WITH RESIDUAL RETURN CODE\nJINFGE03 LA    R15,4               SET RETURN CODE TO 4\nJINFGE04 L     R14,SAVER14         RESTORE RETURN ADDRESS\n         BR    R14                 RETURN TO CALLER\n         DROP  R3                  DROP ADDRESSABILITY TO RPL\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CLOSE THE JOB INFORMATION FILE                               *\n*                                                                     *\n***********************************************************************\nJINFCLOS ST    R14,SAVER14         SAVE RETURN ADDRESS\n         TM    DTEFLAGS,JOPEN      TEST OPEN INDICATOR\n         BNO   JINFCL01            NOT OPEN, JUST GET OUT OF ROUTINE\n         L     R2,MYACBADD         LOAD THE ACB ADDRESS\n         MVI   CLOSEL,X'80'        SET END OF LIST INDICATOR\n         CLOSE ((R2)),MF=(E,CLOSEL) CLOSE THE ACB\n***********************************************************************\n*        RETURN TO CALLER WITH APPROPRIATE RETURN CODE                *\n***********************************************************************\nJINFCL01 SLR   R15,R15             SET RETURN CODE TO ZERO\n         NI    DTEFLAGS,255-JOPEN  TURN OFF OPEN INDICATOR\n         B     JINFCL03            GO RETURN TO CALLER\nJINFCL02 LA    R15,4               SET RETURN CODE TO 4\nJINFCL03 L     R14,SAVER14         RESTORE RETURN ADDRESS\n         BR    R14                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FREE THE JOB INFORMATION FILE                                *\n*                                                                     *\n***********************************************************************\nJINFREE  ST    R14,SAVER14         SAVE RETURN ADDRESS\n         TM    DTEFLAGS,JALLOC     TEST ALLOCATED INDICATOR\n         BNO   JINFFR01            NOT ALLOC, JUST GET OUT OF ROUTINE\n         LA    R15,S99RB           LOAD ADDRESS OF RB\n         ST    R15,S99RBPTR        SAVE IT IN RB POINTER LIST\n         MVI   S99RBPTR,X'80'      FLAG END OF LIST\n         MVI   S99RBLN,20          SET LENGTH OF RB\n         MVI   S99VERB,S99VRBUN    SET VERB FOR UNALLOCATION\n         XC    S99FLAG1,S99FLAG1   ZERO FLAG FIELD 1\n         XC    S99RSC,S99RSC       ZERO RETURN CODE FIELDS\n         LA    R15,S99TUPL         LOAD ADDRESS OF TEXT UNIT PARM LIST\n         ST    R15,S99TXTPP        AND SAVE IT IN RB\n         XC    S99RSV01,S99RSV01   ZERO RESERVED FIELD\n         XC    S99FLAG2,S99FLAG2   ZERO FLAG FIELD 2\n         LA    R15,TUDDN           LOAD ADDRESS OF DDN TEXT UNIT\n         ST    R15,S99TUPL         SAVE IT IN TEXT UNIT PARM LIST\n         MVI   S99TUPL,X'80'       FLAG END OF LIST\n         MVC   TUDDN(LTUDDN),ITUDDN    INITIALIZE DDN TEXT UNIT\n         LH    R15,LDDN            LOAD LENGTH OF DDNAME\n         STH   R15,TUDDN+4         SAVE LENGTH OF DDNAME IN TEXT UNIT\n         MVI   TUDDN+6,C' '        BLANK THE\n         MVC   TUDDN+7(7),TUDDN+6        ENTIRE DDNAME\n         BCTR  R15,0               MAKE MACHINE LENGTH\n         EX    R15,MVDDN2          MOVE DDNAME TO TEXT UNIT\nMVDDN2   MVC   TUDDN+6(0),DDNAME   **** EXECUTE ONLY ****\n         LA    R1,S99RBPTR         LOAD ADDRESS OF RB POINTER\n         DYNALLOC ,                CALL DYNAMIC ALLOCATION\n***********************************************************************\n*        RETURN TO CALLER WITH APPROPRIATE RETURN CODE                *\n***********************************************************************\nJINFFR01 NI    DTEFLAGS,255-JALLOC TURN OFF ALLOCATED INDICATOR\n         SLR   R15,R15             SET RETURN CODE TO ZERO\n         L     R14,SAVER14         RESTORE RETURN ADDRESS\n         BR    R14                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        TERMINATE JES2 ROUTINE                                       *\n*                                                                     *\n***********************************************************************\nJINFABND MVC   DTEUMSG(LWTOJIM3),WTOJIM3 SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE ERROR MESSAGE\n         ESTAE 0                   CANCEL OLD ESTAE ENVIRONMENT\n         MVC   DTEVRXAD,$ZEROS     SET RECOVERY VRA EXIT ADDRESS\n         MVC   DTEESXAD,=A(JINFCLN) SET RECOVERY CLEAN UP EXIT ADDR\n         MVC   DTERTXAD,$ZEROS     SET RECOVERY RETRY EXIT ADDRESS\n         L     R2,$STABNDA         LOAD SUBTASK ESTAE RTN ADDRESS\n         LR    R3,R13              SET DTE ADDRESS\n         MVC   DTEAWRKA(LESTAEL1),ESTAEL1 SET ESATE LIST FORM\n         ESTAE (2),PARAM=(3),RECORD=YES,MF=(E,DTEAWRKA)\n         ABEND X'FFF',DUMP,,SYSTEM   ABEND THE SUBTASK\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ESTAE RETRY ROUTINE                                          *\n*                                                                     *\n***********************************************************************\nJINFRETR SAVE  (14,12)             SAVE REGISTERS\n         USING JINFRETR,R15        SET TEMPORARY ADDRESSABILITY\n         USING ERA,R1              SET ADDRESSABILITY TO ERA\n         L     R10,=A(JOBINFO)     RESET FIRST BASE REGISTER\n         L     R12,=A(JOBINFO+4096) RESET SECOND BASE REGISTER\n         ST    R10,ERAREG10        SAVE BASE REGISTER FOR RESTART\n         ST    R12,ERAREG12        SAVE BASE REGISTER FOR RESTART\n         L     R11,DTEPARM         RESTORE HCT ADDRESS\n         ST    R11,ERAREG11        SAVE HCT REGISTER FOR RESTART\n         DROP  R15                 DROP TEMPORARY ADDRESSABILITY\n         $SETRP RESUME=JINFRES     SET RETRY ADDRESS\n         MVC   DTEUMSG(LWTOJIMI),WTOJIMI SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE ERROR MESSAGE\n         RETURN (14,12)            RESTORE REGS AND RETURN TO CALLER\n         DROP  R1                  DROP ADDRESSABILITY TO ERA\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ESTAE RESUME ENTRY POINT                                     *\n*                                                                     *\n***********************************************************************\nJINFRES  ICM   R7,B'1111',DTEJITBA RESTORE JITB ADDRESS\n         BNZ   JINFPOST            GOT ONE, GO POST IT COMPLETE\n         TM    DTEFLAG1,DTE1ACTV   SEE IF INITIALIZATION COMPLETE\n         BNO   JINFRIN             NO,  GO COMPLETE INITIALIZATION\n         B     JINFNEXT            YES, GO PROCESS NEXT REQUEST\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ESTAE CLEAN UP ROUTINE                                       *\n*                                                                     *\n*        A RETURN CODE OF 4 TELLS DTE TERMINATION SUPPORT TO          *\n*        ABEND THE MAIN TASK                                          *\n*                                                                     *\n***********************************************************************\nJINFCLN  LA    R15,4               SET RETURN CODE TO 4\n         BR    R14                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                     C O N S T A N T S                               *\n***********************************************************************\n         LTORG\n         SPACE 3\nJBLANKS  DC    CL20' '             STRING OF BLANKS\n         DS    0H\nITUDDN   DC    X'0001',AL2(1),AL2(8),CL8' '         DDNAME\nLTUDDN   EQU   *-ITUDDN\n         DS    0H\nITUDSN   DC    X'0002',AL2(1),AL2(44),CL44' '       DSNAME\nLTUDSN   EQU   *-ITUDSN\n         DS    0H\nITUDISP  DC    X'0004',AL2(1),AL2(01),XL01'08'      DISP=SHR\nLTUDISP  EQU   *-ITUDISP\n         DS    0H\nITURDDN  DC    X'0055',AL2(1),AL2(08),CL08' '       NEW DDNAME\nLTURDDN  EQU   *-ITURDDN\n         SPACE 3\n         $MID  970\nWTOJIM1  WTO   '&MID.JOB INFORMATION SUBTASK INITIALIZATION BEGINNING',X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTOJIM1 EQU   *-WTOJIM1\nWTOJIM2  WTO   '&MID.JOB INFORMATION SUBTASK TERMINATION REQUESTED',   X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTOJIM2 EQU   *-WTOJIM2\nWTOJIM3  WTO   '&MID.INVALID JITB CHAIN ENCOUNTERED IN JOB INFORMATION X\n               TASK',ROUTCDE=(2),DESC=(4),MF=L\nLWTOJIM3 EQU   *-WTOJIM3\nWTOJIM4  WTO   '&MID.JOB INFORMATION FILE NOT STOPPED',                X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTOJIM4 EQU   *-WTOJIM4\nWTOJIM5  WTO   '&MID.JOB INFORMATION FILE CANNOT BE STARTED',          X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTOJIM5 EQU   *-WTOJIM5\nWTOJIM6  WTO   '&MID.JOB INFORMATION FILE NOT STARTED',                X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTOJIM6 EQU   *-WTOJIM6\nWTOJIM7  WTO   '&MID.JOB INFORMATION FILE CANNOT BE STOPPED',          X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTOJIM7 EQU   *-WTOJIM7\nWTOJIM8  WTO   '&MID.JOB INFORMATION FILE CANNOT BE RESTARTED',        X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTOJIM8 EQU   *-WTOJIM8\nWTOJIM9  WTO   '&MID.LENGTH OF DSNAME FOR JOB INFORMATION FILE IS ZERO'X\n               ,ROUTCDE=(2),DESC=(4),MF=L\nLWTOJIM9 EQU   *-WTOJIM9\nWTOJIMA  WTO   '&MID.UNABLE TO ALLOCATE JOB INFORMATION FILE',         X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTOJIMA EQU   *-WTOJIMA\nWTOJIMB  WTO   '&MID.SVC99 RC=XX E=XXXX I=XXXX',                       X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTOJIMB EQU   *-WTOJIMB\nWTOJIMC  WTO   '&MID.UNABLE TO GENERATE ACB FOR JOB INFORMATION FILE', X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTOJIMC EQU   *-WTOJIMC\nWTOJIMD  WTO   '&MID.UNABLE TO GENERATE RPL FOR JOB INFORMATION FILE', X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTOJIMD EQU   *-WTOJIMD\nWTOJIME  WTO   '&MID.UNABLE TO MODIFY ACB FOR JOB INFORMATION FILE',   X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTOJIME EQU   *-WTOJIME\nWTOJIMF  WTO   '&MID.UNABLE TO MODIFY RPL FOR JOB INFORMATION FILE',   X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTOJIMF EQU   *-WTOJIMF\nWTOJIMG  WTO   '&MID.UNABLE TO OPEN THE JOB INFORMATION FILE',         X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTOJIMG EQU   *-WTOJIMG\nWTOJIMH  WTO   '&MID.JOB INFORMATION FILE I/O ERROR R15=XX RPLFDBWD=XXXX\n               XXXXX',ROUTCDE=(2),DESC=(4),MF=L\nLWTOJIMH EQU   *-WTOJIMH\nWTOJIMI  WTO   '&MID.JOB INFORMATION TASK ABEND - CURRENT REQUEST WILL X\n               BE TERMINATED',ROUTCDE=(2),DESC=(4),MF=L\nLWTOJIMI EQU   *-WTOJIMI\n         SPACE 3\nESTAEL1  ESTAE *-*,MF=L\nLESTAEL1 EQU   *-ESTAEL1\n         EJECT\n         PUSH USING\n         TITLE 'JES2 UCC7 ROUTINE SUBTASK'\n***********************************************************************\n*                                                                     *\n*        ACTUAL UCC7 SUBTASK ENTRY POINT                              *\n*                                                                     *\n***********************************************************************\nUCC7TASK $ENTRY  BASE=(R10,R12)\n         LR    R10,R15             ESTABLISH FIRST BASE REGISTER\n         LA    R12,4095(R10)       ESTABLISH SECOND\n         LA    R12,1(R12)              BASE REGISTER\n         LR    R13,R1              SET NEW SAVE AREA ADDRESS\n         USING DTE,R13             ESTABLISH ADDRESSABILITY TO DTE\n         L     R11,DTEPARM         LOAD HCT ADDRESS FROM DTE\n         USING HCT,R11             ESTABLISH ADDRESSABILITY TO HCT\n         $AMODE 31                 GO TO AMODE 31\n***********************************************************************\n*                                                                     *\n*        SET UP ESTAE ENVIRONMENT                                     *\n*                                                                     *\n***********************************************************************\n         MVC   DTEVRXAD,$ZEROS     SET RECOVERY VRA EXIT ADDRESS\n         MVC   DTEESXAD,$ZEROS     SET RECOVERY CLEAN UP EXIT ADDR\n         MVC   DTERTXAD,=A(UCC7RETR) SET RECOVERY RETRY EXIT ADDRESS\n         L     R2,$STABNDA         LOAD SUBTASK ESTAE RTN ADDRESS\n         LR    R3,R13              SET DTE ADDRESS\n         MVC   DTEAWRKA(LESTAEL2),ESTAEL2 SET ESATE LIST FORM\n         ESTAE (2),PARAM=(3),RECORD=YES,MF=(E,DTEAWRKA)\n         LA    R14,DTEWORK         SET 'TO' ADDRESS\n         LA    R15,2048            SET   'TO'   LENGTH\n         SLR   R0,R0               CLEAR 'FROM' ADDRESS\n         SLR   R1,R1               CLEAR 'FROM' LENGTH\n         MVCL  R14,R0              CLEAR THE WORK AREA\n***********************************************************************\n*                                                                     *\n*        FINISH INITIALIZATION PROCESSING                             *\n*                                                                     *\n***********************************************************************\n         MVC   DTEUMSG(LWTOU7M1),WTOU7M1 SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE INIT STARTED MESSAGE\nUCC7RIN  XC    UCC7SVCA,UCC7SVCA   ZERO THE UCC7 ROUTINE EPA\n         LA    R0,SASSSVCA         LOAD UCC7 ROUTINE NAME ADDRESS\n         LOAD  EPLOC=(0),ERRET=UCC7ER1I LOAD THE ROUTINE\n         ST    R0,UCC7SVCA         SAVE UCC7 ROUTINE EPA\n         OI    DTEFLAGS,ULOADED    TURN ON INTERFACE MODULE LOADED IND\nUCC7RIN1 POST  DTEIECB             POST INITIALIZATION COMPLETE\n         OI    DTEFLAG1,DTE1ACTV   TURN ON ACTIVE BIT\n         OI    DTEFLAGS,UENABLE    TURN ON INTERFACE ENABLED IND\nUCC7WAIT TM    DTEFLAG1,DTE1TERM   SEE IF TERMINATION REQUESTED\n         BO    UCC7TERM            YES, BRANCH\n         WAIT  ECB=DTEWECB         WAIT ON WORK\n         XC    DTEWECB,DTEWECB     ZERO THE ECB AGAIN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        GET A JITB FROM THE LIFO QUEUE OF PENDING WORK               *\n*                                                                     *\n***********************************************************************\nUCC7NEXT TM    DTEFLAG1,DTE1TERM   SEE IF TERMINATION REQUESTED\n         BO    UCC7TERM            YES, BRANCH\n         ICM   R7,15,DTEFQUE       CHECK QUEUE POINTER\n         USING JITB,R7             SET ADDRESSABILITY TO JITB\n         BZ    UCC7WAIT            ZERO, NONE, GO WAIT FOR WORK\nUCC7UNCH L     R1,JITBCH           LOAD ADDRESS OF NEXT JITB\n         CS    R7,R1,DTEFQUE       REMOVE JITB FROM QUEUE\n         BNE   UCC7UNCH            QUEUE CHANGED, LOOP\n         CLC   JITBID,=C'JITB'     SEE IF REALLY A JITB\n         BNE   UCC7ABND            NO, ERROR\n         ST    R7,DTEJITBA         SAVE ADDRESS OF CURRENT JITB\n         MVI   JITBSTAT,0          ZERO THE STATUS FLAGS\n***********************************************************************\n*                                                                     *\n*        TEST FOR DEMAND REQUEST                                      *\n*                                                                     *\n***********************************************************************\nUCC7OP1  TM    JITBFLG,JITBDMD     SEE IF REQUEST FOR DEMAND\n         BNO   UCC7OP2             NO, BRANCH\nUCC7P    TM    DTEFLAGS,UENABLE    SEE IF INTERFACE ENABLED\n         BNO   UCC7ER4             NO, ERROR\n         CLI   JITBJOBN,C' '       SEE IF JOBNAME SPECIFIED\n         BE    UCC7POST            NO, IGNORE REQUEST\n         CLI   JITBNETN,C' '       SEE IF NETWORK NAME SPECIFIED\n         BE    UCC7POST            NO, IGNORE REQUEST\n         CLI   JITBSUBI,C' '       SEE IF SUBID SPECIFIED\n         BE    UCC7POST            NO, IGNORE REQUEST\n         MVI   UCC7CMD,C' '        BLANK THE ENTIRE\n         MVC   UCC7CMD+1(99),UCC7CMD     UCC7 PARM FIELD\n         LA    R3,UCC7CMD          LOAD START ADDRESS OF UCC7 PARM\n         ST    R3,DAREC            SAVE START ADDRESS OF UCC7 PARM\n         SLR   R4,R4               ZERO THE LENGTH FIELD\nUCC7P1   MVC   0(21,R3),=CL21'/LOGON JES2;DMDNW,NW='\n         LA    R3,21(R3)           INCREMENT PAST STRING\n         LA    R4,21(R4)           ADD LENGTH OF STRING\nUCC7P2   MVC   0(8,R3),JITBNETN    MOVE NETWORK NAME TO PARM\nUCC7P2A  CLI   0(R3),C' '          SEE IF END OF NETWORK NAME\n         BE    UCC7P3              YES, GET OUT\n         LA    R3,1(R3)            INCREMENT TO NEXT CHAR\n         LA    R4,1(R4)            ADD 1 TO LENGTH OF PARM\n         B     UCC7P2A             LOOP\nUCC7P3   MVC   0(5,R3),=CL5',JOB='\n         LA    R3,5(R3)            INCREMENT PAST STRING\n         LA    R4,5(R4)            ADD LENGTH OF STRING\n         MVC   0(8,R3),JITBJOBN    MOVE JOBNAME TO PARM\nUCC7P3A  CLI   0(R3),C' '          SEE IF END OF JOB NAME\n         BE    UCC7P4              YES, GET OUT\n         LA    R3,1(R3)            INCREMENT TO NEXT CHAR\n         LA    R4,1(R4)            ADD 1 TO LENGTH OF PARM\n         B     UCC7P3A             LOOP\nUCC7P4   MVC   0(7,R3),=CL7',SUBID='\n         LA    R3,7(R3)            INCREMENT PAST STRING\n         LA    R4,7(R4)            ADD LENGTH OF STRING\n         MVC   0(8,R3),JITBSUBI    MOVE SUBID TO PARM\nUCC7P4A  CLI   0(R3),C' '          SEE IF END OF SUBID\n         BE    UCC7P5              YES, GET OUT\n         LA    R3,1(R3)            INCREMENT TO NEXT CHAR\n         LA    R4,1(R4)            ADD 1 TO LENGTH OF PARM\n         B     UCC7P4A             LOOP\nUCC7P5   CLI   JITBDESC,C' '       SEE IF OPTIONAL DESCRIPTION\n         BE    UCC7P6              NO, GET OUT\n         MVC   0(6,R3),=CL6',DESC='\n         LA    R3,6(R3)            INCREMENT PAST STRING\n         LA    R4,6(R4)            ADD LENGTH OF STRING\n         MVC   0(8,R3),JITBDESC    MOVE DESCRIPTION TO PARM\nUCC7P5A  CLI   0(R3),C' '          SEE IF END OF DESCRIPTION\n         BE    UCC7P6              YES, GET OUT\n         LA    R3,1(R3)            INCREMENT TO NEXT CHAR\n         LA    R4,1(R4)            ADD 1 TO LENGTH OF PARM\n         B     UCC7P5A             LOOP\nUCC7P6   MVC   0(8,R3),=CL8';/LOGOFF'\n         LA    R3,8(R3)            INCREMENT PAST STRING\n         LA    R4,8(R4)            ADD LENGTH OF STRING\n         ST    R4,DARECL           SAVE LENGTH OF UCC7 PARM\n         XC    DA,DA               CLEAR UCC7 OPTIONS\n         MVI   DACALL,DAPGM        SET CALL FROM PGM\n         MVI   DATYPE,DAPROC       SET TYPE TO PROCESS\n         XC    DAHOLD,DAHOLD       CLEAR THE HOLD AREA ADDRESS\n         TM    DTEFLAGS,ULOADED    SEE IF UCC7 INTERFACE MODULE LOADED\n         BNO   UCC7ER3             NO, ERROR\n*        B     UCC7P7              **********************************\n         L     R15,UCC7SVCA        LOAD ADDR OF UCC7 INTERFACE MODULE\n         LA    R2,DA               LOAD PARM ADDRESS IN REG 2\n         BALR  R14,R15             CALL SASSSVCA\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   UCC7ER2             NOT ZERO, ERROR\nUCC7P7   DS    0H                  **********************************\n         OI    JITBSTAT,JITBOK     TURN ON 'OK' FLAG\n         B     UCC7POST            GET OUT\n***********************************************************************\n*                                                                     *\n*        TEST FOR START REQUEST                                       *\n*                                                                     *\n***********************************************************************\nUCC7OP2  TM    JITBFLG,JITBSTAR    SEE IF REQUEST FOR START\n         BNO   UCC7OP3             NO, BRANCH\n         TM    DTEFLAGS,ULOADED    SEE IF UCC7 INTERFACE MODULE LOADED\n         BNO   UCC7OP2A            NO, BRANCH\n         LA    R0,SASSSVCA         LOAD UCC7 ROUTINE NAME ADDRESS\n         NI    DTEFLAGS,255-ULOADED TURN OFF UCC7 INTERFACE LOADED IND\n         DELETE EPLOC=(0)          DELETE THE ROUTINE\n         LA    R0,SASSSVCA         LOAD UCC7 ROUTINE NAME ADDRESS\nUCC7OP2A LOAD  EPLOC=(0),ERRET=UCC7ER1R RELOAD THE ROUTINE\n         ST    R0,UCC7SVCA         SAVE UCC7 ROUTINE EPA\n         OI    DTEFLAGS,ULOADED    TURN ON INTERFACE MODULE LOADED IND\n         OI    DTEFLAGS,UENABLE    TURN ON INTERFACE ENABLED IND\n         OI    JITBSTAT,JITBOK     TURN ON 'OK' FLAG\n         B     UCC7POST            GET OUT\n***********************************************************************\n*                                                                     *\n*        TEST FOR STOP REQUEST                                        *\n*                                                                     *\n***********************************************************************\nUCC7OP3  TM    JITBFLG,JITBSTOP    SEE IF REQUEST FOR STOP\n         BNO   UCC7OP4             NO, BRANCH\n         NI    DTEFLAGS,255-UENABLE TURN OFF INTERFACE ENABLED IND\n         OI    JITBSTAT,JITBOK     TURN ON 'OK' FLAG\n         B     UCC7POST            GET OUT\n***********************************************************************\n*                                                                     *\n*        TEST FOR RESTART REQUEST                                     *\n*                                                                     *\n***********************************************************************\nUCC7OP4  TM    JITBFLG,JITBSTOP    SEE IF REQUEST FOR STOP\n         BNO   UCC7POST            UNKNOWN REQUEST, IGNORE IT\n         TM    DTEFLAGS,ULOADED    SEE IF UCC7 INTERFACE MODULE LOADED\n         BNO   UCC7OP4A            NO, BRANCH\n         LA    R0,SASSSVCA         LOAD UCC7 ROUTINE NAME ADDRESS\n         NI    DTEFLAGS,255-ULOADED TURN OFF UCC7 INTERFACE LOADED IND\n         DELETE EPLOC=(0)          DELETE THE ROUTINE\n         LA    R0,SASSSVCA         LOAD UCC7 ROUTINE NAME ADDRESS\nUCC7OP4A LOAD  EPLOC=(0),ERRET=UCC7ER1R RELOAD THE ROUTINE\n         ST    R0,UCC7SVCA         SAVE UCC7 ROUTINE EPA\n         OI    DTEFLAGS,ULOADED    TURN ON INTERFACE MODULE LOADED IND\n         OI    DTEFLAGS,UENABLE    TURN ON INTERFACE ENABLED IND\n         OI    JITBSTAT,JITBOK     TURN ON 'OK' FLAG\n***********************************************************************\n*                                                                     *\n*        END OF THIS REQUEST                                          *\n*                                                                     *\n***********************************************************************\nUCC7POST XC    DTEJITBA,DTEJITBA   ZERO ADDRESS OF CURRENT JITB\n         POST  JITBXECB            POST CALLER OF COMPLETION\n         B     UCC7NEXT            GO GET ANOTHER JITB IF ONE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ERROR LOADING UCC7 INTERFACE MODULE                          *\n*        DURING INITIALIZATION                                        *\n*                                                                     *\n***********************************************************************\nUCC7ER1I MVC   DTEUMSG(LWTOU7M4),WTOU7M4 SET MESSAGE BUFFER\n         ST    R1,DBLU1            SAVE ABEND CODE\n         UNPK  DBLU1(5),DBLU1+2(3) UNPACK ABEND CODE\n         TR    DBLU1(4),TRTBL2     MAKE PRINTABLE\n         MVC   DTEUMSG+4+9+45(3),DBLU1+1 MOVE ABEND CODE TO MESSAGE\n         ST    R15,DBLU1           SAVE REASON CODE\n         UNPK  DBLU1(5),DBLU1+2(3) UNPACK REASON CODE\n         TR    DBLU1(4),TRTBL2     MAKE PRINTABLE\n         MVC   DTEUMSG+4+9+52(4),DBLU1 MOVE REASON CODE TO MESSAGE\n         $$WTO DTEUMSG             WRITE LOAD FAILED MESSAGE\n         B     UCC7RIN1            CONTINUE INITIALIZATION\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ERROR LOADING UCC7 INTERFACE MODULE                          *\n*        DURING RESTART PROCESSING                                    *\n*                                                                     *\n***********************************************************************\nUCC7ER1R MVC   DTEUMSG(LWTOU7M4),WTOU7M4 SET MESSAGE BUFFER\n         ST    R1,DBLU1            SAVE ABEND CODE\n         UNPK  DBLU1(5),DBLU1+2(3) UNPACK ABEND CODE\n         TR    DBLU1(4),TRTBL2     MAKE PRINTABLE\n         MVC   DTEUMSG+4+9+45(3),DBLU1+1 MOVE ABEND CODE TO MESSAGE\n         ST    R15,DBLU1           SAVE REASON CODE\n         UNPK  DBLU1(5),DBLU1+2(3) UNPACK REASON CODE\n         TR    DBLU1(4),TRTBL2     MAKE PRINTABLE\n         MVC   DTEUMSG+4+9+52(4),DBLU1 MOVE REASON CODE TO MESSAGE\n         $$WTO DTEUMSG             WRITE LOAD FAILED MESSAGE\n         B     UCC7POST            POST THIS REQUEST COMPLETE\nTRTBL2   EQU   *-240               HEX TO DISPLAY TRANSLATE TABLE\n         DC    C'0123456789ABCDEF'\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BAD RETURN CODE FROM UCC7 INTERFACE MODULE                   *\n*                                                                     *\n***********************************************************************\nUCC7ER2  MVC   DTEUMSG(LWTOU7M5),WTOU7M5 SET MESSAGE BUFFER\n         MVC   DTEUMSG+4+9+24(8),JITBJOBN MOVE JOBNAME TO MESSAGE\n         MVC   DTEUMSG+4+9+33(8),JITBNETN MOVE NETWORK NAME TO MESSAGE\n         CVD   R15,DBLU1           CONVERT RETURN CODE TO PACKED\n         OI    DBLJ1+7,X'0F'       MAKE PRINTABLE\n         UNPK  DTEUMSG+4+9+54(4),DBLU1+5 MOVE RETURN CODE TO MESSAGE\n         $$WTO DTEUMSG             WRITE LOAD FAILED MESSAGE\n         B     UCC7POST            TERMINATE REQUEST\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INTERFACE MODULE NOT AVAILABLE                               *\n*                                                                     *\n***********************************************************************\nUCC7ER3  MVC   DTEUMSG(LWTOU7M6),WTOU7M6 SET MESSAGE BUFFER\n         MVC   DTEUMSG+4+9+24(8),JITBJOBN MOVE JOBNAME TO MESSAGE\n         MVC   DTEUMSG+4+9+33(8),JITBNETN MOVE NETWORK NAME TO MESSAGE\n         $$WTO DTEUMSG             WRITE LOAD FAILED MESSAGE\n         B     UCC7POST            TERMINATE REQUEST\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INTERFACE DISABLED                                           *\n*                                                                     *\n***********************************************************************\nUCC7ER4  MVC   DTEUMSG(LWTOU7M7),WTOU7M7 SET MESSAGE BUFFER\n         MVC   DTEUMSG+4+9+24(8),JITBJOBN MOVE JOBNAME TO MESSAGE\n         MVC   DTEUMSG+4+9+33(8),JITBNETN MOVE NETWORK NAME TO MESSAGE\n         $$WTO DTEUMSG             WRITE LOAD FAILED MESSAGE\n         B     UCC7POST            TERMINATE REQUEST\n         EJECT\n***********************************************************************\n*                                                                     *\n*        TERMINATION REQUESTED                                        *\n*                                                                     *\n***********************************************************************\nUCC7TERM MVC   DTEUMSG(LWTOU7M2),WTOU7M2 SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE TERMINATION REQUESTED MESSAGE\n         TM    DTEFLAGS,ULOADED    SEE IF UCC7 INTERFACE MODULE LOADED\n         BNO   UCC7TRM1            NO, BRANCH\n         LA    R0,SASSSVCA         LOAD UCC7 ROUTINE NAME ADDRESS\n         NI    DTEFLAGS,255-ULOADED TURN OFF UCC7 INTERFACE LOADED IND\n         DELETE EPLOC=(0)          DELETE THE ROUTINE\n         NI    DTEFLAG1,255-DTE1ACTV TURN OFF ACTIVE SWITCH\nUCC7TRM1 ESTAE 0                   CANCEL ESTAE ENVIRONMENT\n         SVC   3                   TERMINATE SUBTASK\n         EJECT\n***********************************************************************\n*                                                                     *\n*        TERMINATE JES2 ROUTINE                                       *\n*                                                                     *\n*        AN UNRECOVERABLE ERROR HAS OCCURRED WHICH WILL               *\n*        REQUIRE JES2 TO BE RESTARTED.                                *\n*                                                                     *\n***********************************************************************\nUCC7ABND MVC   DTEUMSG(LWTOU7M3),WTOU7M3 SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE ERROR MESSAGE\n         ESTAE 0                   CANCEL OLD ESTAE ENVIRONMENT\n         MVC   DTEVRXAD,$ZEROS     SET RECOVERY VRA EXIT ADDRESS\n         MVC   DTEESXAD,=A(UCC7CLN) SET RECOVERY CLEAN UP EXIT ADDR\n         MVC   DTERTXAD,$ZEROS     SET RECOVERY RETRY EXIT ADDRESS\n         L     R2,$STABNDA         LOAD SUBTASK ESTAE RTN ADDRESS\n         LR    R3,R13              SET DTE ADDRESS\n         MVC   DTEAWRKA(LESTAEL2),ESTAEL2 SET ESATE LIST FORM\n         ESTAE (2),PARAM=(3),RECORD=YES,MF=(E,DTEAWRKA)\n         ABEND X'FFF',DUMP,,SYSTEM   ABEND THE SUBTASK\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ESTAE RETRY ROUTINE                                          *\n*                                                                     *\n***********************************************************************\nUCC7RETR SAVE  (14,12)             SAVE REGISTERS\n         USING UCC7RETR,R15        SET TEMPORARY ADDRESSABILITY\n         USING ERA,R1              SET ADDRESSABILITY TO ERA\n         L     R10,=A(UCC7TASK)    RESET FIRST BASE REGISTER\n         L     R12,=A(UCC7TASK+4096)    RESET SECOND BASE REGISTER\n         ST    R10,ERAREG10        SAVE BASE REGISTER FOR RESTART\n         ST    R12,ERAREG12        SAVE BASE REGISTER FOR RESTART\n         L     R11,DTEPARM         RESTORE HCT ADDRESS\n         ST    R11,ERAREG11        SAVE HCT REGISTER FOR RESTART\n         DROP  R15                 DROP TEMPORARY ADDRESSABILITY\n         $SETRP RESUME=UCC7RES     SET RETRY ADDRESS\n         NI    DTEFLAGS,255-UENABLE DISABLE THE EXIT\n         MVC   DTEUMSG(LWTOU7M8),WTOU7M8 SET MESSAGE BUFFER\n         $$WTO DTEUMSG             WRITE ERROR MESSAGE\n         RETURN (14,12)            RESTORE REGS AND RETURN TO CALLER\n         DROP  R1                  DROP ADDRESSABILITY TO ERA\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ESTAE RESUME ENTRY POINT                                     *\n*                                                                     *\n***********************************************************************\nUCC7RES  ICM   R7,B'1111',DTEJITBA RESTORE JITB ADDRESS\n         BNZ   UCC7POST            GOT ONE, GO POST IT COMPLETE\n         TM    DTEFLAG1,DTE1ACTV   SEE IF INITIALIZATION COMPLETE\n         BNO   UCC7RIN             NO,  GO COMPLETE INITIALIZATION\n         B     UCC7NEXT            YES, GO PROCESS NEXT REQUEST\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ESTAE CLEAN UP ROUTINE                                       *\n*                                                                     *\n*        A RETURN CODE OF 4 TELLS DTE TERMINATION SUPPORT TO          *\n*        ABEND THE MAIN TASK                                          *\n*                                                                     *\n***********************************************************************\nUCC7CLN  LA    R15,4               SET RETURN CODE TO 4\n         BR    R14                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                     C O N S T A N T S                               *\n***********************************************************************\n         LTORG\n         SPACE 3\nUBLANKS  DC    CL20' '             STRING OF BLANKS\nSASSSVCA DC    CL8'SASSSVCA'       UCC7 INTERFACE MODULE NAME\n         SPACE 3\n         $MID  980\nWTOU7M1  WTO   '&MID.UCC7 SUBTASK INITIALIZATION BEGINNING',           X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTOU7M1 EQU   *-WTOU7M1\nWTOU7M2  WTO   '&MID.UCC7 SUBTASK TERMINATION REQUESTED',              X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTOU7M2 EQU   *-WTOU7M2\nWTOU7M3  WTO   '&MID.INVALID JITB CHAIN ENCOUNTERED IN UCC7 SUBTASK',  X\n               ROUTCDE=(2),DESC=(4),MF=L\nLWTOU7M3 EQU   *-WTOU7M3\nWTOU7M4  WTO   '&MID.ERROR LOADING UCC7 INTERFACE MODULE - ABEND SXXX RX\n               C=NNNN',ROUTCDE=(2),DESC=(4),MF=L\nLWTOU7M4 EQU   *-WTOU7M4\nWTOU7M5  WTO   '&MID.DEMAND FOR UCC7 NETWORK JJJJJJJJ.NNNNNNNN FAILED -X\n                RC=XXXX',ROUTCDE=(2),DESC=(4),MF=L\nLWTOU7M5 EQU   *-WTOU7M5\nWTOU7M6  WTO   '&MID.DEMAND FOR UCC7 NETWORK JJJJJJJJ.NNNNNNNN FAILED -X\n                INTERFACE ROUTINE LOAD ERROR',ROUTCDE=(2),DESC=(4),MF=L\nLWTOU7M6 EQU   *-WTOU7M6\nWTOU7M7  WTO   '&MID.DEMAND FOR UCC7 NETWORK JJJJJJJJ.NNNNNNNN FAILED -X\n                INTERFACE ROUTINE DISABLED',ROUTCDE=(2),DESC=(4),MF=L\nLWTOU7M7 EQU   *-WTOU7M7\nWTOU7M8  WTO   '&MID.UCC7 INTERFACE TASK ABEND - INTERFACE WILL BE DISAX\n               BLED',ROUTCDE=(2),DESC=(4),MF=L\nLWTOU7M8 EQU   *-WTOU7M8\n         SPACE 3\nESTAEL2  ESTAE *-*,MF=L\nLESTAEL2 EQU   *-ESTAEL2\n         POP   USING\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "J255$FMT": {"ttr": 16644, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'JES2 JQE FORMAT ROUTINE'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 2.2.0                                   *\n*                                                                     *\n*        THIS JES2 EXIT PROGRAM IS DESIGNED TO RUN AS AN EXIT TO      *\n*        AN EXIT5 ROUTINE WHENEVER A JOB IS TO BE DISPLAYED ON THE    *\n*        CONSOLE.  THIS EXIT WILL SELECT/REJECT THE REQUESTED JOB     *\n*        ON THE BASIS OF AN INPUT PARAMETER LIST PASSED IN REGISTER   *\n*        1.  THE INPUT PARAMETER LIST IS MAPPED BY THE USER MACRO     *\n*        $FCSFMTP.                                                    *\n*                                                                     *\n*        INPUT TO THIS EXIT IS AS FOLLOWS:                            *\n*                                                                     *\n*        R1  - ADDRESS OF THE INPUT PARM LIST                         *\n*        R9  - ADDRESS OF THE JQE                                     *\n*        R10 - ADDRESS OF A JES2 BUFFER FOR A WORK AREA               *\n*        R11 - ADDRESS OF THE HCT                                     *\n*        R13 - ADDRESS OF THE HASPCOMM PCE                            *\n*        R14 - RETURN ADDRESS                                         *\n*        R15 - ENTRY ADDRESS                                          *\n*                                                                     *\n*                                                                     *\n*        NOTE                                                         *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST UNION NATIONAL BANK                    *\n*                        301 SOUTH TRYON STREET                       *\n*                        CHARLOTTE, N.C.  28288                       *\n*                        (704) 374-2427                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           *\n*                                                                     *\n*        1)  THE HASP908 MESSAGE WILL BE ISSUED FOR EACH JOB          *\n*            WHICH IS DISPLAYED.                                      *\n*                                                                     *\n*        $HASP908 JOBNAME  EXECUTING C PRIO XX SSSS                   *\n*                                                                     *\n*        $HASP908 JOBNAME  ON PRINTRXX PRIO XX SSSS                   *\n*                                                                     *\n*        $HASP908 JOBNAME  WAIT EXEC X PRIO XX SSSS                   *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        $HASP999 LIST INCOMPLETE                                     *\n*                                                                     *\n*        DURING WTO PROCESSING A BUFFER SHORTAGE WAS DETECTED, SO     *\n*        $QN PROCESSING WILL BE TERMINATED TO PREVENT FURTHER         *\n*        BUFFER SHORTAGES.                                            *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J 2 5 5 $ F M T          *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $CMB         SYS1.HASPSRC                               *\n*        04)  $COMWORK     SYS1.HASPSRC                               *\n*        05)  $CWTO        SYS1.HASPSRC                               *\n*        06)  $DAS         SYS1.HASPSRC                               *\n*        07)  $DCT         SYS1.HASPSRC                               *\n*        08)  $ENTRY       SYS1.HASPSRC                               *\n*        09)  $FCSFMTP     SYS1.HASPSRC (USER)                        *\n*        10)  $HASPEQU     SYS1.HASPSRC                               *\n*        11)  $HASPGBL     SYS1.HASPSRC                               *\n*        12)  $HCT         SYS1.HASPSRC                               *\n*        13)  $IOT         SYS1.HASPSRC                               *\n*        14)  $JCT         SYS1.HASPSRC                               *\n*        15)  $JOE         SYS1.HASPSRC                               *\n*        16)  $JQE         SYS1.HASPSRC                               *\n*        17)  $LCK         SYS1.HASPSRC                               *\n*        18)  $MIT         SYS1.HASPSRC                               *\n*        19)  $MODEND      SYS1.HASPSRC                               *\n*        20)  $MODULE      SYS1.HASPSRC                               *\n*        21)  $PADDR       SYS1.HASPSRC                               *\n*        22)  $PCE         SYS1.HASPSRC                               *\n*        23)  $QSE         SYS1.HASPSRC                               *\n*        24)  $RESTABL     SYS1.HASPSRC (USER)                        *\n*        25)  $RETURN      SYS1.HASPSRC                               *\n*        26)  $SAVE        SYS1.HASPSRC                               *\n*        27)  $TAB         SYS1.HASPSRC                               *\n*        28)  IAZRESPA     SYS1.AMODGEN                               *\n*        29)  IFGRPL       SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       4K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n        PRINT OFF\n***********************************************************************\n*                                                                     *\n*        THIS EXIT CAN ALSO OPTIONALLY FORMAT THE ESOTERIC            *\n*        RESOURCE ROUTINE NAMES ATTACHED TO A JOB.  THIS IS           *\n*        ENABLED BY SETTING THE FOLLOWING LOCAL ASSEMBLER             *\n*        VARIABLE TO 'YES'.  IF THIS FACILITY IS NOT DESIRED,         *\n*        SET THE VARIABLE TO 'NO'.                                    *\n*                                                                     *\n***********************************************************************\n         LCLC  &RESRCE\n&RESRCE  SETC  'YES'               ENABLE THE LISTING OF RESOURCE NAMES\n         PRINT ON\n         EJECT\n         COPY  $HASPGBL\nJ255$FMT $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 JQE FORMAT ROUTINE',                        X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $CMB,               GENERATE HASP CMB DSECT             X\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X\n               $DAS,               GENERATE HASP DAS DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $IOT,               GENERATE HASP IOT DSECT             X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $LCK,               GENERATE HASP LCK DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $PDDB,              GENERATE HASP PDDB DSECT            X\n               $QSE,               GENERATE HASP QSE DSECT             X\n               $TAB,               GENERATE HASP TAB DSECT             X\n               RESPA,              GENERATE MVS  RESPA DSECT           X\n               RPL                 GENERATE MVS  IFGRPL DSECT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PARM LIST FROM CALLING EXIT PROGRAM                          *\n*                                                                     *\n***********************************************************************\n$FMTPARM DSECT\n         $FCSFMTP ,                MAP THE INPUT PARM LIST\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROGRAM WORK AREAS                                           *\n*                                                                     *\n***********************************************************************\n$FMTWORK DSECT\n         DS    CL(BUFSTART-BFPDSECT) **** RESERVED BY JES2 ****\nROUTCDE  DS    F                   DESTINATION CODE FOR SETDEST ROUTINE\nSAVEBAS  DS    CL18                MSG SAVE AREA FOR JOB NBR AND NAME\nLTEXT    DS    H                   CURRENT LENGTH OF MESSAGE AREA\nRC       DS    H                   $CWTO RETURN CODE\nMISCSW1  DS    X                   MISCELLANEOUS SWITCHES\nVOLHEAD  EQU   X'80'               SPOOL VOLUME HEADER MSG PROCESSED\nMSG      EQU   X'40'               MESSAGE FOR JOB HAS BEEN WRITTEN\nDEVNO    DS    H                   NUMBER OF ACTIVE DEVICES\nDOUBLE   DS    D                   DOUBLE WORD WORK AREA\nDBL      DS    D                   DOUBLE WORD WORK AREA\nSAVEAFF  DS    16F                 REGISTER SAVE FOR SETAFF  ROUTINE\nSAVEOWN  DS    16F                 REGISTER SAVE FOR SETOWN  ROUTINE\nSAVERES  DS    16F                 REGISTER SAVE FOR SETRES  ROUTINE\nSAVESPL  DS    16F                 REGISTER SAVE FOR SETSPL  ROUTINE\nSAVEBLD  DS    16F                 REGISTER SAVE FOR BLDACT  ROUTINE\nSAVEPUT  DS    16F                 REGISTER SAVE FOR PUTMSG  ROUTINE\nDEVTBL   DS    50XL4               ACTIVE DEVICE TABLE\n         SPACE 3\nJ255$FMT CSECT ,                   RESTORE THE CSECT ENVIRONMENT\n         TITLE 'JES2 JQE FORMAT ROUTINE'\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nE255$FMT $ENTRY BASE=(R12,R8)\n         SPACE 1\n         $SAVE                     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD FIRST BASE REGISTER\n         LA    R8,4095(R12)        LOAD SECOND\n         LA    R8,1(R8)                 BASE REGISTER\n         LR    R7,R1               SAVE ADDRESS OF INPUT PARM LIST\n         USING $FMTPARM,R7         SET ADDRESSABILITY TO INPUT PARM\n         USING $FMTWORK,R10        SET ADDRESSABILITY TO WORK AREA\n         USING JQE,R9              SET ADDRESSABILITY TO JQE\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        CLEAR INPUT WORK AREA                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         LA    R14,$FMTWORK+(BUFSTART-BFPDSECT) SET 'TO' ADDRESS\n         LH    R15,$BUFSIZE        SET   'TO'   LENGTH\n         SLR   R0,R0               CLEAR 'FROM' ADDRESS\n         SLR   R1,R1               CLEAR 'FROM' LENGTH\n         MVCL  R14,R0              CLEAR THE BUFFER\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        BUILD BASIC PORTION OF MESSAGE                               *\n*                                                                     *\n***********************************************************************\nJQEFND   MVI   COMMAND,C' '        BLANK ENTIRE\n         MVC   COMMAND+1(199),COMMAND  COMMAND\n         MVC   COMMAND+201(200),COMMAND+200  AREA\n         LH    R1,JQEJOBNO         LOAD JOB NUMBER\n         MVC   COMMAND(3),=C'JOB'  ASSUME BATCH JOB\n         TM    JQEFLAG3,JQE3JOB    IS IT A BATCH JOB\n         BZ    JQEFND01            YES, BRANCH\n         MVC   COMMAND(3),=C'STC'  ASSUME STARTED TASK\n         TM    JQEFLAG3,JQE3STC    IS IT A STC\n         BO    JQEFND01            YES, BRANCH\n         MVC   COMMAND(3),=C'TSU'  MUST BE A TSO USER\nJQEFND01 CVD   R1,DOUBLE           CONVERT JOB NUMBER TO PACKED\n         MVC   DBL(6),=X'402020202120' SET EDIT MASK\n         ED    DBL(6),DOUBLE+5     EDIT JOB NUMBER\n         MVC   COMMAND+3(5),DBL+1  MOVE JOB NUMBER TO MESSAGE\n         MVC   COMMAND+9(8),JQEJNAME MOVE JOB NAME TO MESSAGE\n         MVC   SAVEBAS,COMMAND     SAVE FIRST 18 CHARACTERS OF MSG\n         LA    R15,18              LOAD LENGTH OF BASE TEXT\n         STH   R15,LTEXT           SAVE LENGTH\n***********************************************************************\n*                                                                     *\n*        CHECK FOR SELECTION BY JOB ORIENTED SELECTION                *\n*        CRITERIA                                                     *\n*                                                                     *\n***********************************************************************\nCKJQE    TM    QMISC+L'INDONLY,INDONLY WANT ONLY INDEPENDENT JOBS?\n         BZ    CKJQE1              NO, BRANCH\n         TM    JQEFLAG2,JQE2IND    SEE IF IN 'IND' MODE\n         BZ    GOBACK              NO, BYPASS THIS JOB\nCKJQE1   TM    QMISC+L'SELVOL,SELVOL SELECTING BY SPOOL VOLUME?\n         BZ    CKJQE2              NO, BRANCH\n         XC    $SPMSKWA,$SPMSKWA   ZERO THE SPOOL MASK WORK AREA\n         LH    R1,$JQEMSKL         GET MACHINE LENGTH OF JQE SPOOL MASK\n         EX    R1,MVOLMASK         MOVE JQE VOLUME MASK TO WORK AREA\n         EX    R1,OVOLMASK         'OR' JQE MASK WITH OUR MASK\n         EX    R1,CJQESPM1         SEE IF STAYED THE SAME\n         BNE   GOBACK              NO, BYPASS THIS JOB\nCKJQE2   TM    QBITS+L'QHOLD,QHOLD SEE IF WANT HOLD QUEUE ONLY\n         BZ    CKJQE3              NO, BRANCH\n         TM    JQEFLAG1,JQE1HLD1   SEE IF OPERATOR HOLD\n         BNO   GOBACK              NO, BYPASS THIS JOB\nCKJQE3   CLI   QFILT1,0            SEE IF JOB TYPE FILTER FLAGS ON\n         BE    CKJQE4              NO, BRANCH\n         TM    QFILT1,QTEST        SEE IF WANT ONLY TEST JOB\n         BNO   CKJQE3A             NO, BRANCH\n         TM    JQEXFLG1,JQEXTEST   SEE IF TEST JOB\n         BNO   GOBACK              NO, BYPASS THIS JOB\n         B     CKJQE4              YES, GO SEE IF OTHER FILTERS\nCKJQE3A  TM    JQEXFLG1,JQEXPROD   SEE IF PRODUCTION JOB\n         BNO   GOBACK              NO, BYPASS THIS JOB\nCKJQE4   CLI   QFILT2,0            SEE IF FILTERS ON\n         BE    CKJQE5              NO, BRANCH\n         TM    QFILT2,QOHOLD+QUHOLD+QSETUP SEE IF ANY HOLD BITS ON\n         BZ    CKJQE4D             NO, BRANCH\n         TM    QFILT2,QOHOLD       SEE IF WANT OPERATOR HOLD\n         BNO   CKJQE4A             NO, BRANCH\n         TM    JQEFLAG1,JQE1HLD1   SEE IF ON OPERATOR HOLD\n         BO    CKJQE4D             YES, PASS THIS CHECK\nCKJQE4A  TM    QFILT2,QUHOLD       SEE IF WANT USER HOLD\n         BNO   CKJQE4B             NO, BRANCH\n         TM    JQEXFLG2,JQEXUHLD   SEE IF ON OPERATOR HOLD\n         BO    CKJQE4D             YES, PASS THIS CHECK\nCKJQE4B  TM    QFILT2,QSETUP       SEE IF WANT SETUP HOLD\n         BNO   CKJQE4C             NO, BRANCH\n         TM    JQEXFLG2,JQEXWSET   SEE IF ON WAITING FOR SETUP\n         BO    CKJQE4D             YES, PASS THIS CHECK\nCKJQE4C  B     GOBACK              NO,  NO HOLD BITS ON, BYPASS\nCKJQE4D  TM    QFILT2,QABEND+QJCLERR SEE IF ANY FAIL BITS ON\n         BZ    CKJQE5              NO, BRANCH\nCKJQE4E  TM    QFILT2,QABEND       SEE IF WANT ABENDED JOBS\n         BNO   CKJQE4F             NO, BRANCH\n         TM    JQEXFLG3,JQEXABND   SEE IF ABENDED\n         BO    CKJQE5              YES, PASS THIS CHECK\nCKJQE4F  TM    QFILT2,QJCLERR      SEE IF WANT JCL ERROR JOBS\n         BNO   CKJQE4G             NO, BRANCH\n         TM    JQEXFLG3,JQEXJCLE   SEE IF ABENDED\n         BO    CKJQE5              YES, PASS THIS CHECK\nCKJQE4G  B     GOBACK              NO,  NO FAIL BITS ON, BYPASS\nCKJQE5   CLI   OWNERID,C' '        SEE IF OWNERID SPECIFIED\n         BNH   CKJQE6              NO, BRANCH\n         CLC   JQEXOWNR,OWNERID    SEE IF OWNERID MATCHES\n         BNE   GOBACK              NO, BYPASS THIS JOB\nCKJQE6   B     CKCONV              GO PROCESS THIS JOB\nMVOLMASK MVC   $SPMSKWA(0),JQESUMSK **** EXECUTE ONLY ****\nOVOLMASK NC    $SPMSKWA(0),VOLMASK  **** EXECUTE ONLY ****\nCVOLMASK CLC   $SPMSKWA(0),VOLMASK  **** EXECUTE ONLY ****\n***********************************************************************\n*                                                                     *\n*        SEE IF JOB IS IN THE CONVERSION/EXECUTION QUEUE              *\n*                                                                     *\n***********************************************************************\nCKCONV   TM    JQETYPE,$XEQ        SEE IF CONVERSION/EXECUTION QUEUE\n         BZ    CKXMIT              NO, GO CHECK JOB TRANSMITTER\n         TM    JQEFLAG1,JQE1BUSY   SEE IF JOB BUSY\n         BZ    CKCONV1             NO, BRANCH\n         TM    JQEDEVID,DCTXFRID+DCTNJTID IS JOB ON JOB TRANSMITTER\n         BO    CKJOES              YES, GO PROCESS JOE CHAIN\nCKCONV1  CLI   JQETYPE,$XEQ        SEE IF ON CONVERSION QUEUE\n         BNE   CKXEQ               NO, GO CHECK EXECUTION QUEUE\n         TM    QBITS+L'QCNV,QCNV   DO WE WANT JOBS IN CONVERSION\n         BNO   CKXEQ               NO, GO CHECK EXECUTION QUEUE\n***********************************************************************\n*        JOB IS IN THE CONVERSION QUEUE                               *\n***********************************************************************\n         CLI   QCLASS,X'40'        SEE IF SELECTING BY CLASS\n         BNH   CKCONV3             NO, BRANCH\n         MVI   DBL,CATSTCID        ASSUME STC\n         CLI   JQEJCLAS,CATSTCCL   SEE IF STC\n         BE    CKCONV2             YES, BRANCH\n         MVI   DBL,CATTSUID        ASSUME TSO USER\n         CLI   JQEJCLAS,CATTSUCL   SEE IF TSO USER\n         BE    CKCONV2             YES, BRANCH\n         MVC   DBL(1),JQEJCLAS     SET BATCH JOB CLASS\nCKCONV2  CLC   DBL(1),QCLASS       SEE IF MATCH ON CLASS\n         BNE   GOBACK              NO, GO PROCESS NEXT JQE\nCKCONV3  TM    JQEFLAG1,JQE1BUSY   SEE IF JOB BUSY\n         BNO   CKCONV4             NO, BRANCH\n         LA    R15,COMMAND         POINT TO NEXT PART OF\n         AH    R15,LTEXT               MESSAGE AREA\n         MVC   0(10,R15),=C'CONVERTING' SET QUEUE TYPE\n         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE\n         LA    R15,11(R15)         POINT PAST OUR TEXT\n         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\n         B     CKCONV5             GO FILL IN REST OF MESSAGE\nCKCONV4  LA    R15,COMMAND         POINT TO NEXT PART OF\n         AH    R15,LTEXT               MESSAGE AREA\n         MVC   0(9,R15),=C'WAIT CONV' SET QUEUE TYPE\n         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE\n         LA    R15,10(R15)         POINT PAST OUR TEXT\n         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\nCKCONV5  BAL   R14,SETCL           GO MOVE CLASS TO MESSAGE\n         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE\n         LA    R15,1(R15)          ADD 1 MORE SPACE\n         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\n         BAL   R14,CKQDEST         GO CHECK JOB DESTINATION CODES\n         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE\n         BAL   R14,CKSAFF          GO CHECK SYSTEM AFFINITY\n         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE\n         BAL   R14,SETPRIO         GO MOVE PRIORITY TO MESSAGE\n         BAL   R14,SETATT          GO MOVE SPECIAL ATTRIBUTES TO MSG\n         BAL   R14,SETAFF          GO MOVE SYSTEM AFFINITY TO MESSAGE\n         BAL   R14,SETOWN          GO SET JOB OWNERID INFORMATION\n         BAL   R14,SETSPL          GO SET SPOOL VOLUME INFORMATION\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         BZ    GOBACK              GOOD, GO PROCESS THE NEXT JQE\n         B     INCMPLT             BAD,  GO WRITE MESSAGE AND EXIT\n***********************************************************************\n*        JOB IS IN THE EXECUTION QUEUE                                *\n***********************************************************************\nCKXEQ    LA    R15,COMMAND         POINT TO NEXT PART OF\n         AH    R15,LTEXT               MESSAGE AREA\n         TM    JQEFLAG1,JQE1BUSY   SEE IF JOB BUSY\n         BZ    CKXEQ2              NO, BRANCH\n         TM    QBITS+L'QACT,QACT   DO WE WANT ACTIVE JOBS\n         BNO   CKXEQ1              NO, GO SEE IF SPIN DATA SETS\n         MVC   0(9,R15),=C'EXECUTING'  SET QUEUE TYPE\n         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE\n         LA    R15,10(R15)         POINT PAST OUR TEXT\n         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\n         BAL   R14,SETCL           GO MOVE CLASS TO MESSAGE\n         BAL   R14,CKQDEST         GO CHECK JOB DESTINATION CODES\n         BNE   CKXEQ1              NO MATCH, IGNORE THIS MESSAGE\n         BAL   R14,CKSAFF          GO CHECK SYSTEM AFFINITY\n         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE\n         BAL   R14,SETPRIO         GO MOVE PRIORITY TO MESSAGE\n         BAL   R14,SETATT          GO MOVE SPECIAL ATTRIBUTES TO MSG\n         BAL   R14,SETUATTR        GO MOVE SPECIAL USER CONTROL TO MSG\n         IC    R1,JQEFLAG1         LOAD ACTIVE BIT\n         BAL   R14,SETACTS         GO MOVE ACTIVE SYSTEM ID TO MESSAGE\n         BAL   R14,SETOWN          GO SET JOB OWNERID INFORMATION\n         BAL   R14,SETSPL          GO SET SPOOL VOLUME INFORMATION\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         BNZ   INCMPLT             BAD,  GO WRITE MESSAGE AND EXIT\nCKXEQ1   CLC   JQEJOEB,$ZEROS      ANY SPIN DATA SETS YET\n         BE    GOBACK              NO, GO PROCESS NEXT JQE\n         B     CKJOES              YES, GO SEARCH JOES\nCKXEQ2   TM    QBITS+L'QXEQ,QXEQ   DO WE WANT JOBS AWAITING EXECUTION\n         BNO   GOBACK              NO, BYPASS THIS JOB\n         CLI   QCLASS,X'40'        SEE IF SELECTING BY CLASS\n         BNH   CKXEQ4              NO, BRANCH\n         MVI   DBL,CATSTCID        ASSUME STC\n         CLI   JQEJCLAS,CATSTCCL   SEE IF STC\n         BE    CKXEQ3              YES, BRANCH\n         MVI   DBL,CATTSUID        ASSUME TSO USER\n         CLI   JQEJCLAS,CATTSUCL   SEE IF TSO USER\n         BE    CKXEQ3              YES, BRANCH\n         MVC   DBL(1),JQEJCLAS     SET BATCH JOB CLASS\nCKXEQ3   CLC   DBL(1),QCLASS       SEE IF MATCH ON CLASS\n         BNE   GOBACK              NO, GO PROCESS NEXT JQE\nCKXEQ4   MVC   0(9,R15),=C'WAIT EXEC' SET QUEUE TYPE\n         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE\n         LA    R15,10(R15)         POINT PAST OUR TEXT\n         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\n         BAL   R14,SETCL           GO MOVE CLASS TO MESSAGE\n         BAL   R14,CKQDEST         GO CHECK JOB DESTINATION CODES\n         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE\n         BAL   R14,CKSAFF          GO CHECK SYSTEM AFFINITY\n         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE\n         BAL   R14,SETPRIO         GO MOVE PRIORITY TO MESSAGE\n         BAL   R14,SETATT          GO MOVE SPECIAL ATTRIBUTES TO MSG\n         BAL   R14,SETUATTR        GO MOVE SPECIAL USER CONTROL TO MSG\n         BAL   R14,SETAFF          GO MOVE SYSTEM AFFINITY TO MESSAGE\n         BAL   R14,SETRES          GO MOVE RESOURCE NAMES TO MESSAGE\n         BAL   R14,SETOWN          GO SET JOB OWNERID INFORMATION\n         BAL   R14,SETSPL          GO SET SPOOL VOLUME INFORMATION\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         BZ    GOBACK              GOOD, GO PROCESS THE NEXT JQE\n         B     INCMPLT             BAD,  GO WRITE MESSAGE AND EXIT\n         EJECT\n***********************************************************************\n*        JOB IS ON THE TRANSMISSION QUEUE                             *\n***********************************************************************\nCKXMIT   CLI   JQETYPE,$XMIT       SEE IF JOB ON THE XMIT QUEUE\n         BNE   CKJOES              NO, GO SEARCH JOES\n         TM    QBITS+L'QXMT,QXMT   DO WE WANT JOBS IN TRANSMISSION QUE\n         BNO   GOBACK              NO, BYPASS THIS JOB\n         TM    QMISC+L'XMTDEST,XMTDEST SELECTING BY NODE NUMBER?\n         BZ    CKXMIT1             NO, BRANCH\n         CLC   LOWXDEST(2),JQEXEQND SEE IF CORRECT NODE NUMBER\n         BL    GOBACK              NO, BYPASS THIS JOB\n         CLC   HIXDEST(2),JQEXEQND SEE IF CORRECT NODE NUMBER\n         BH    GOBACK              NO, BYPASS THIS JOB\n***********************************************************************\n*        JOB IS ON THE TRANSMISSION QUEUE                             *\n***********************************************************************\nCKXMIT1  TM    JQEFLAG1,JQE1BUSY   SEE IF JOB BUSY\n         BNZ   CKJOES              YES, GO SEARCH JOES\n         LA    R15,COMMAND         POINT TO NEXT PART OF\n         AH    R15,LTEXT               MESSAGE AREA\n         MVC   0(9,R15),=C'WAIT XMIT' SET QUEUE TYPE\n         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE\n         LA    R15,10(R15)         POINT PAST OUR TEXT\n         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\n         SLR   R1,R1               CLEAR REG FOR ICM\n         ICM   R1,B'1100',JQEXEQND LOAD NODE NUMBER\n         BAL   R14,SETDEST         GET DEST NAME FOR ROUTE CODE\n         BAL   R14,CKQDEST         GO CHECK JOB DESTINATION CODES\n         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE\n         BAL   R14,CKSAFF          GO CHECK SYSTEM AFFINITY\n         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE\n         BAL   R14,SETPRIO         GO MOVE PRIORITY TO MESSAGE\n         BAL   R14,SETATT          GO MOVE SPECIAL ATTRIBUTES TO MSG\n         IC    R1,JQEFLAG1         LOAD ACTIVE BIT\n         BAL   R14,SETACTS         GO MOVE ACTIVE SYSTEM ID TO MESSAGE\n         BAL   R14,SETOWN          GO SET JOB OWNERID INFORMATION\n         BAL   R14,SETSPL          GO SET SPOOL VOLUME INFORMATION\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         BZ    GOBACK              GOOD, GO PROCESS THE NEXT JQE\n         B     INCMPLT             BAD,  GO WRITE MESSAGE AND EXIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        SEE IF JOB HAS ANY ACTIVE JOES                               *\n*                                                                     *\n***********************************************************************\nCKJOES   TM    QBITS+L'QDEV,QDEV   DO WE WANT DEVICE ACTIVITY\n         BNO   CKOUT               NO, GO CHECK OUTPUT QUEUE\n         BAL   R14,BLDACT          GO BUILD TBL OF ACTIVE OUTPUT\n         LH    R15,DEVNO           LOAD NUMBER OF ENTRIES IN THE TABLE\n         LTR   R15,R15             TEST NUMBER OF DEVICES\n         BZ    CKOUT               NONE, GO CHECK OUTPUT QUEUE\n         LA    R2,DEVTBL           LOAD START ADDRESS OF TABLE\nCKJOES00 LH    R15,DEVNO           LOAD NUMBER OF ENTRIES LEFT IN TBL\n         LTR   R15,R15             TEST NUMBER OF DEVICES\n         BZ    GOBACK              NONE, GO GET NEXT JQE\n         BCTR  R15,0               REDUCE DEVICE COUNT BY 1\n         STH   R15,DEVNO           SAVE NEW DEVICE COUNT\nCKJOES01 MVI   COMMAND,C' '        BLANK ENTIRE\n         MVC   COMMAND+1(199),COMMAND  COMMAND\n         MVC   COMMAND+201(200),COMMAND+200  AREA\n         MVC   COMMAND(18),SAVEBAS RESTORE JOB NAME AND NUMBER\n         MVC   LTEXT,=H'18'        RESET MESSAGE LENGTH\n         LA    R15,COMMAND         POINT TO NEXT PART OF\n         AH    R15,LTEXT               MESSAGE AREA\n         MVC   0(2,R15),=C'ON'     SET 'ON' MESSAGE\n         LA    R15,3(R15)          INCREMENT PAST THIS TEXT\nCKJOES02 TM    1(R2),DCTRMTID+DCTNJTID SEE IF NJE OR RJE\n         BNZ   CKJOES03            YES, BRANCH\n         CLI   1(R2),X'0F'         SEE IF 'PSO'\n         BE    CKJOES10            YES, BRANCH\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DEVICE IS ONE OF THE FOLLOWING                               *\n*                                                                     *\n*        1)  INTRDR                                                   *\n*        2)  READER*                                                  *\n*        3)  PRINTR*                                                  *\n*        4)  PUNCH*                                                   *\n*                                                                     *\n***********************************************************************\n         SLR   R3,R3               CLEAR REG FOR IC\n         IC    R3,1(R2)            LOAD DEVICE FLAGS\n         SRL   R3,4                SHIFT OFF LOW 4 BITS\n         SLL   R3,3                MULTIPLY BY 8 FOR OFFSET\n         LA    R3,DEVNTBL(R3)      POINT TO DEVICE NAME\n         SLR   R14,R14             CLEAR REG FOR IC\n         IC    R14,0(R3)           LOAD LENGTH OF DEVICE NAME\n         EX    R14,MVDEVNM1        MOVE DEVICE NAME TO MESSAGE\n         LA    R15,1(R14,R15)      INCREMENT PAST DEVICE NAME\n         SLR   R1,R1               CLEAR REG FOR ICM\n         ICM   R1,B'0011',2(R2)    LOAD DEVICE NUMBER\n         CVD   R1,DOUBLE           CONVERT TO PACKED\n         MVC   1(3,R15),=X'202020' SET EDIT MASK\n         EDMK  0(4,R15),DOUBLE+6   EDIT DEVICE NUMBER\n         MVC   0(4,R15),0(R1)      POSITION DEVICE NUMBER\n         B     CKJOES11            GET OUT OF DEVICE NAME ROUTINE\nCKJOES03 TM    1(R2),DCTNJTID+DCTXFRID SEE IF TRANSFER DEVICE\n         BNO   CKJOES04            NO, BRANCH\n***********************************************************************\n*                                                                     *\n*        DEVICE IS ONE OF THE FOLLOWING                               *\n*                                                                     *\n*        1)  OFF*.JT                                                  *\n*        2)  OFF*.JR                                                  *\n*        3)  OFF*.ST                                                  *\n*        4)  OFF*.SR                                                  *\n*                                                                     *\n***********************************************************************\n         MVC   0(3,R15),=C'OFF'    SET DEVICE TYPE IN MESSAGE\n         MVC   3(1,R15),3(R2)      MOVE DEVICE NUMBER TO MESSAGE\n         OI    3(R15),X'F0'        MAKE PRINTABLE\n         MVI   4(R15),C'.'         SET SEPARATOR\n         SLR   R3,R3               CLEAR REG FOR IC\n         IC    R3,1(R2)            LOAD DEVICE FLAGS\n         SRL   R3,4                SHIFT OFF LOW 4 BITS\n         SLL   R3,3                MULTIPLY BY 8 FOR OFFSET\n         LA    R3,DEVNTBL(R3)      POINT TO DEVICE NAME\n         SLR   R14,R14             CLEAR REG FOR IC\n         IC    R14,0(R3)           LOAD LENGTH OF DEVICE NAME\n         EX    R14,MVDEVNM2        MOVE DEVICE NAME TO MESSAGE\n         B     CKJOES11            GET OUT OF DEVICE NAME ROUTINE\nCKJOES04 TM    1(R2),DCTNJTID+DCTRTEID SEE IF ROUTE DEVICE\n         BNO   CKJOES05            NO, BRANCH\n***********************************************************************\n*                                                                     *\n*        DEVICE IS ONE OF THE FOLLOWING                               *\n*                                                                     *\n*        1)  ROUTE.RD*                                                *\n*        2)  ROUTE.PR*                                                *\n*        3)  ROUTE.PU*                                                *\n*                                                                     *\n***********************************************************************\n         MVC   0(6,R15),=C'ROUTE.' SET DEVICE TYPE IN MESSAGE\n         SLR   R3,R3               CLEAR REG FOR IC\n         IC    R3,1(R2)            LOAD DEVICE FLAGS\n         SRL   R3,4                SHIFT OFF LOW 4 BITS\n         SLL   R3,3                MULTIPLY BY 8 FOR OFFSET\n         LA    R3,DEVNTBL(R3)      POINT TO DEVICE NAME\n         SLR   R14,R14             CLEAR REG FOR IC\n         IC    R14,0(R3)           LOAD LENGTH OF DEVICE NAME\n         EX    R14,MVDEVNM3        MOVE DEVICE NAME TO MESSAGE\n         MVC   8(1,R15),1(R2)      MOVE DEVICE FLAGS TO MESSAGE\n         OI    8(R15),X'F0'        MAKE DEVICE NUMBER PRINTABLE\n         NI    8(R15),FF-DCTRTEID  TURN OFF FLAG BIT\n         B     CKJOES11            GET OUT OF DEVICE NAME ROUTINE\n***********************************************************************\n*                                                                     *\n*        DEVICE IS ONE OF THE FOLLOWING                               *\n*                                                                     *\n*        1)  L*.JT*                                                   *\n*        2)  L*.JR*                                                   *\n*        3)  L*.ST*                                                   *\n*        4)  L*.SR*                                                   *\n*        5)  R*.RD*                                                   *\n*        6)  R*.PR*                                                   *\n*        7)  R*.PU*                                                   *\n*                                                                     *\n***********************************************************************\nCKJOES05 MVI   0(R15),C'L'         ASSUME NJE DEVICE\n         TM    1(R2),DCTRMTID      SEE IF RJE DEVICE\n         BZ    CKJOES06            NO, BRANCH\n         MVI   0(R15),C'R'         SET TO RJE DEVICE\nCKJOES06 LH    R1,2(R2)            LOAD REMOTE/LINE NUMBER\n         CVD   R1,DOUBLE           CONVERT TO PACKED\n         MVC   2(5,R15),=X'2020202020' SET EDIT MASK\n         EDMK  1(6,R15),DOUBLE+5   EDIT REMOTE/LINE NUMBER\n         MVC   1(5,R15),0(R1)      POSITION REMOTE/LINE NUMBER\nCKJOES07 CLI   0(R15),C' '         END OF REMOTE/LINE NUMBER\n         BE    CKJOES08            YES, BRANCH\n         LA    R15,1(R15)          INCREMENT TO NEXT CHAR\n         B     CKJOES07            LOOP\nCKJOES08 LH    R1,2(R2)            LOAD REMOTE/LINE NUMBER\n         CH    R1,=H'999'          SEE IF REMOTE NUMBER GT 999\n         BH    CKJOES09            YES, BRANCH\n         MVI   0(R15),C'.'         SET SEPARATOR IF NOT GT 999\n         LA    R15,1(R15)          INCREMENT PAST '.'\nCKJOES09 SLR   R3,R3               CLEAR REG FOR IC\n         IC    R3,1(R2)            LOAD DEVICE FLAGS\n         SRL   R3,4                SHIFT OFF LOW 4 BITS\n         SLL   R3,3                MULTIPLY BY 8 FOR OFFSET\n         LA    R3,DEVNTBL(R3)      POINT TO DEVICE NAME\n         SLR   R14,R14             CLEAR REG FOR IC\n         IC    R14,0(R3)           LOAD LENGTH OF DEVICE NAME\n         EX    R14,MVDEVNM1        MOVE DEVICE NAME TO MESSAGE\n         LA    R15,1(R14,R15)      INCREMENT PAST DEVICE NAME\n         MVC   0(1,R15),1(R2)      MOVE DEVICE NUMBER TO MESSAGE\n         OI    0(R15),X'F0'        MAKE PRINTABLE\n         B     CKJOES11            GET OUT OF DEVICE NAME ROUTINE\n***********************************************************************\n*                                                                     *\n*        DEVICE IS IN PROCESS SYSOUT MODE                             *\n*                                                                     *\n***********************************************************************\nCKJOES10 MVC   0(8,R15),=C'PRSYSOUT' SET DEVICE NAME\n         B     CKJOES11            GET OUT OF DEVICE NAME ROUTINE\nMVDEVNM1 MVC   0(0,R15),1(R3)      *** EXECUTE ONLY ***\nMVDEVNM2 MVC   5(0,R15),1(R3)      *** EXECUTE ONLY ***\nMVDEVNM3 MVC   6(0,R15),1(R3)      *** EXECUTE ONLY ***\nCKJOES11 LH    R15,LTEXT           LOAD LENGTH OF MESSAGE\n         LA    R15,12(R15)         ADD LENGTH OF DEVICE NAME + 'ON'\n         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\n         BAL   R14,SETPRIO         GO MOVE PRIORITY TO MESSAGE\n         BAL   R14,SETATT          GO MOVE SPECIAL ATTRIBUTES TO MSG\n         IC    R1,0(R2)            LOAD ACTIVE BITS\n         BAL   R14,SETACTS         GO MOVE ACTIVE SYSTEM ID TO MESSAGE\n         BAL   R14,SETOWN          GO SET JOB OWNERID INFORMATION\n         BAL   R14,SETSPL          GO SET SPOOL VOLUME INFORMATION\n         LA    R2,4(R2)            INCREMENT TO NEXT DEVICE TBL ENTRY\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         BZ    CKJOES00            GOOD, GO PROCESS NEXT DEVICE FOR JOB\n         B     INCMPLT             BAD,  GO WRITE MESSAGE AND EXIT\n         EJECT\nCKOUT    TM    JQETYPE,$OUTPUT     SEE IF JOB IN OUTPUT QUEUE\n         BNO   CKPRPU              NO, BRANCH\n         TM    QBITS+L'QOUT,QOUT   DO WE WANT JOBS ON OUTPUT QUEUE\n         BNO   CKPRPU              NO, BRANCH\n***********************************************************************\n*        JOB IS ON THE OUTPUT QUEUE                                   *\n***********************************************************************\n         LA    R15,COMMAND         POINT TO NEXT PART OF\n         AH    R15,LTEXT               MESSAGE AREA\n         MVC   0(9,R15),=C'WAIT OUT ' ASSUME AWAITING\n         TM    JQEFLAG1,JQE1BUSY   SEE IF JOB BUSY\n         BZ    CKOUT01             NO, BRANCH\n         MVC   0(4,R15),=C'  IN'   SET TO 'IN PROCESS'\nCKOUT01  LH    R15,LTEXT           LOAD LENGTH OF MESSAGE\n         LA    R15,10(R15)         ADD LENGTH OF OUR TEXT\n         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\n         BAL   R14,CKQDEST         GO CHECK JOB DESTINATION CODES\n         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE\n         BAL   R14,CKSAFF          GO CHECK SYSTEM AFFINITY\n         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE\n         BAL   R14,SETPRIO         GO MOVE PRIORITY TO MESSAGE\n         BAL   R14,SETATT          GO MOVE SPECIAL ATTRIBUTES TO MSG\n         BAL   R14,SETAFF          GO MOVE SYSTEM AFFINITY TO MESSAGE\n         BAL   R14,SETOWN          GO SET JOB OWNERID INFORMATION\n         BAL   R14,SETSPL          GO SET SPOOL VOLUME INFORMATION\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         BZ    GOBACK              GOOD, GO PROCESS THE NEXT JQE\n         B     INCMPLT             BAD,  GO WRITE MESSAGE AND EXIT\n         EJECT\nCKPRPU   TM    JQETYPE,$HARDCPY    SEE IF JOB IN HARDCOPY QUEUE\n         BNO   CKPURG              NO, BRANCH\n         TM    QBITS+L'QPPU,QPPU   DO WE WANT JOBS ON PRINT/PUNCH QUEUE\n         BNO   CKPURG              NO, BRANCH\n***********************************************************************\n*        JOB IS ON THE PRINT/PUNCH QUEUE                              *\n***********************************************************************\n         LA    R15,COMMAND         POINT TO NEXT PART OF\n         AH    R15,LTEXT               MESSAGE AREA\n         MVC   0(3,R15),=C'PRT'    SET TITLE\n         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE\n         LA    R15,4(R15)          ADD LENGTH OF OUR TEXT\n         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\n         SLR   R1,R1               CLEAR REG FOR ICM\n         ICM   R1,B'1111',JQEPRTRT LOAD PRINT ROUTE CODE\n         BAL   R14,SETDEST         GET DEST NAME FOR ROUTE CODE\n         LA    R15,COMMAND         POINT TO NEXT PART OF\n         AH    R15,LTEXT               MESSAGE AREA\n         MVC   0(3,R15),=C'PUN'    SET TITLE\n         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE\n         LA    R15,4(R15)          ADD LENGTH OF OUR TEXT\n         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\n         SLR   R1,R1               CLEAR REG FOR ICM\n         ICM   R1,B'1111',JQEPUNRT LOAD PRINT ROUTE CODE\n         BAL   R14,SETDEST         GET DEST NAME FOR ROUTE CODE\n         BAL   R14,CKQDEST         GO CHECK JOB DESTINATION CODES\n         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE\n         BAL   R14,SETPRIO         GO MOVE PRIORITY TO MESSAGE\n         BAL   R14,SETATT          GO MOVE SPECIAL ATTRIBUTES TO MSG\n         LA    R15,COMMAND         POINT TO NEXT PART OF\n         AH    R15,LTEXT               MESSAGE AREA\n         MVC   0(3,R15),=C'ANY'    SET AFFINITY TO ANY\n         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE\n         LA    R15,4(R15)          ADD LENGTH OF OUR TEXT\n         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\n         BAL   R14,SETOWN          GO SET JOB OWNERID INFORMATION\n         BAL   R14,SETSPL          GO SET SPOOL VOLUME INFORMATION\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         BZ    GOBACK              GOOD, GO PROCESS THE NEXT JQE\n         B     INCMPLT             BAD,  GO WRITE MESSAGE AND EXIT\n         EJECT\nCKPURG   TM    JQETYPE,$PURGE      SEE IF JOB ON PURGE QUEUE\n         BNO   GOBACK              NO, BRANCH\n         TM    QBITS+L'QPUR,QPUR   DO WE WANT JOBS ON PURGE QUEUE\n         BNO   GOBACK              NO, BYPASS THIS JOB\n***********************************************************************\n*        JOB IS ON THE PURGE QUEUE                                    *\n***********************************************************************\n         LA    R15,COMMAND         POINT TO NEXT PART OF\n         AH    R15,LTEXT               MESSAGE AREA\n         MVC   0(9,R15),=C'WAIT PURG'  ASSUME AWAITING\n         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE\n         LA    R15,10(R15)         ADD LENGTH OF OUR TEXT\n         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\n         BAL   R14,CKQDEST         GO CHECK JOB DESTINATION CODES\n         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE\n         BAL   R14,CKSAFF          GO CHECK SYSTEM AFFINITY\n         BNE   GOBACK              NO MATCH, IGNORE THIS MESSAGE\n         BAL   R14,SETPRIO         GO MOVE PRIORITY TO MESSAGE\n         BAL   R14,SETATT          GO MOVE SPECIAL ATTRIBUTES TO MSG\n         BAL   R14,SETAFF          GO MOVE SYSTEM AFFINITY TO MESSAGE\n         BAL   R14,SETOWN          GO SET JOB OWNERID INFORMATION\n         BAL   R14,SETSPL          GO SET SPOOL VOLUME INFORMATION\n         BAL   R14,PUTMSG          GO WRITE MESSAGE\n         BZ    GOBACK              GOOD, GO PROCESS THE NEXT JQE\n         B     INCMPLT             BAD,  GO WRITE MESSAGE AND EXIT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CHECK DESTINATION CODE IN JQE                                *\n*                                                                     *\n***********************************************************************\nCKQDEST  TM    QMISC+L'SELDEST,SELDEST SELECTING BY DESTINATION?\n         BNO   CKQDEST2            NO, BRANCH\n         CLC   LOWDEST,JQEPRTRT    SEE IF IN OUR DESTINATION RANGE\n         BL    CKQDEST1            NO, BRANCH\n         CLC   HIDEST,JQEPRTRT     SEE IF IN OUR DESTINATION RANGE\n         BNH   CKQDEST2            YES, SELECT THIS JQE\nCKQDEST1 CLC   LOWDEST,JQEPUNRT    SEE IF IN OUR DESTINATION RANGE\n         BL    CKQDEST3            NO, BRANCH\n         CLC   HIDEST,JQEPUNRT     SEE IF IN OUR DESTINATION RANGE\n         BH    CKQDEST3            NO, BYPASS THIS JQE\nCKQDEST2 CR    R14,R14             SET RETURN CODE TO 'EQUAL'\nCKQDEST3 BR    R14                 RETURN WITH RESIDUAL RETURN CODE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CHECK SYSTEM AFFINITY                                        *\n*                                                                     *\n***********************************************************************\nCKSAFF   TM    QMISC+L'SYSALL,SYSALL ALL SYSTEM AFFINITIES OK?\n         BO    CKSAFF2             YES, SELECT ALL JOBS\n         TM    JQEFLAG2,JQE2SAF    SEE IF JOB HAS SYSTEM AFFINITY\n         BO    CKSAFF2             NO, SELECT THIS JOB\n         TM    QMISC+L'SYSANY,SYSANY WANT ONLY JOBS W/O AFFINITY?\n         BO    CKSAFF3             YES, DO NOT SELECT THIS JOB\nCKSAFF1  MVC   DBL(1),JQEFLAG2     SAVE AFFINITY FLAGS\n         OC    DBL(1),SYSMASK      'OR' OUR SYSTEM AFFINITY MASK\n         CLC   DBL(1),JQEFLAG2     SEE IF CHANGED\n         BNE   CKSAFF3             YES, NOT OUR SYSTEM\nCKSAFF2  CR    R14,R14             SET RETURN CODE TO 'EQUAL'\nCKSAFF3  BR    R14                 RETURN WITH RESIDUAL RETURN CODE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MOVE EXECUTION CLASS TO MESSAGE                              *\n*                                                                     *\n***********************************************************************\nSETCL    LA    R15,COMMAND         POINT TO NEXT PART OF\n         AH    R15,LTEXT               MESSAGE AREA\n         MVI   0(R15),CATSTCID     ASSUME STC\n         CLI   JQEJCLAS,CATSTCCL   SEE IF STC\n         BE    SETCL1              YES, BRANCH\n         MVI   0(R15),CATTSUID     ASSUME TSO USER\n         CLI   JQEJCLAS,CATTSUCL   SEE IF TSO USER\n         BE    SETCL1              YES, BRANCH\n         MVC   0(1,R15),JQEJCLAS   SET BATCH JOB CLASS\nSETCL1   LH    R15,LTEXT           LOAD LENGTH OF MESSAGE\n         LA    R15,2(R15)          POINT PAST OUR TEXT\n         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\n         BR    R14                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MOVE PRIORITY TO MESSAGE                                     *\n*                                                                     *\n***********************************************************************\nSETPRIO  LA    R15,COMMAND         POINT TO NEXT PART OF\n         AH    R15,LTEXT               MESSAGE AREA\n         MVC   0(4,R15),=C'PRIO'   SET TITLE\n         MVC   DBL,=X'40202120'    SET EDIT MASK\n         SLR   R0,R0               CLEAR REG FOR IC\n         IC    R0,JQEPRIO          LOAD PRIORITY * 16 FROM JQE\n         SRA   R0,4                DIVIDE BY 16\n         CVD   R0,DOUBLE           CONVERT PRIORITY TO PACKED\n         ED    DBL(4),DOUBLE+6     EDIT PRIORITY TO WORK AREA\n         MVC   5(2,R15),DBL+2      MOVE PRIORITY TO MESSAGE\n         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE\n         LA    R15,8(R15)          POINT PAST OUR TEXT\n         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\n         BR    R14                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MOVE SPECIAL ATTRIBUTES TO MESSAGE                           *\n*                                                                     *\n***********************************************************************\nSETATT   LA    R15,COMMAND         POINT TO NEXT PART OF\n         AH    R15,LTEXT               MESSAGE AREA\n         MVC   0(4,R15),=C'TEST'   ASSUME TEST\n         CLI   JQEXFLG1,JQEXPROD   SEE IF PRODUCTION\n         BNE   SETATT0             NO, LEAVE SET TO TEST\n         MVC   0(4,R15),=C'PROD'   SET TO PRODUCTION\nSETATT0  LA    R15,5(R15)          POINT PAST TEST/PROD INDICATOR\n         TM    JQEXFLG2,JQEXWSET   IS JOB AWAITING SETUP\n         BO    SETATT1             YES, BRANCH\n         TM    JQEXFLG2,JQEXUHLD   IS JOB ON USER HOLD\n         BO    SETATT2             YES, BRANCH\n         TM    JQEFLAG1,JQE1HLD2   SEE IF DUPLICATE JOB\n         BO    SETATT3             YES, BRANCH\n         TM    JQEFLAG1,JQE1HLDA   SEE IF ALL JOBS HELD\n         BO    SETATT4             YES, BRANCH\n         TM    JQEFLAG1,JQE1HLD1   SEE IF SINGLE JOB HELD\n         BO    SETATT5             YES, BRANCH\n         B     SETATT6             NO, GO CHECK PURGE ATTRIBUTE\nSETATT1  MVC   0(5,R15),=C'SETUP'  SET SETUP MESSAGE\n         LA    R15,6(R15)          POINT PAST SETUP MESSAGE\n         B     SETATT6             GO CHECK PURGE ATTRIBUTE\nSETATT2  MVC   0(5,R15),=C'UHOLD'  SET USER HOLD MESSAGE\n         LA    R15,6(R15)          POINT PAST USER HOLD MESSAGE\n         B     SETATT6             GO CHECK PURGE ATTRIBUTE\nSETATT3  MVC   0(4,R15),=C'DUPL'   SET DUPL MESSAGE\n         LA    R15,5(R15)          POINT PAST DUPL MESSAGE\n         B     SETATT6             GO CHECK PURGE ATTRIBUTE\nSETATT4  MVC   0(5,R15),=C'QHOLD'  SET QUEUE HOLD MESSAGE\n         LA    R15,6(R15)          POINT PAST QUEUE HOLD MESSAGE\n         B     SETATT6             GO CHECK PURGE ATTRIBUTE\nSETATT5  MVC   0(5,R15),=C'OHOLD'   SET OPERATOR/JOB HOLD MESSAGE\n         LA    R15,6(R15)          POINT PAST OPERATOR HOLD MESSAGE\nSETATT6  TM    JQEXFLG3,JQEXJCLE   SEE IF JOB FAILED WITH A JCL ERROR\n         BZ    SETATT7             NO, BRANCH\n         MVC   0(6,R15),=C'JCLERR'  SET JCLERROR MESSAGE\n         LA    R15,7(R15)          POINT PAST JCLERROR MESSAGE\n         B     SETATT8             GO CHECK PURGE ATTRIBUTE\nSETATT7  TM    JQEXFLG3,JQEXABND   SEE IF JOB ABENDED\n         BZ    SETATT9             NO, BRANCH\n         MVC   0(4,R15),=C'ABND'   SET ABENDED MESSAGE\n         LA    R15,5(R15)          POINT PAST ABENDED MESSAGE\nSETATT8  TM    JQEFLAG1,JQE1PURG   SEE IF AWAITING PURGE\n         BZ    SETATT9             NO, BRANCH\n         MVC   0(5,R15),=C'PURGE'  SET PURGED MESSAGE\n         LA    R15,6(R15)          POINT PAST PURGED MESSAGE\nSETATT9  TM    JQEFLAG1,JQE1OCAN   SEE IF CANCELLED\n         BZ    SETATT10            NO, BRANCH\n         MVC   0(6,R15),=C'CANCEL' SET CANCELLED MESSAGE\n         LA    R15,7(R15)          POINT PAST CANCELLED MESSAGE\nSETATT10 LA    R0,COMMAND          POINT TO START OF MESSAGE\n         SR    R15,R0              COMPUTE LENGTH\n         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\n         BR    R14                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MOVE SPECIAL USER CONTROL ATTRIBUTES (/*THREAD /*EXCLUDE)    *\n*        TO THE MESSAGE                                               *\n***********************************************************************\nSETUATTR LA    R15,COMMAND         POINT TO NEXT PART OF\n         AH    R15,LTEXT               MESSAGE AREA\n         TM    JQEXFLG2,JQEXTHRD+JQEXXCLU   THREAD OR EXCLUDE?\n         BZ    BACK                NO, RETURN\n         MVC   0(7,R15),=C'USERCTL'  PUT USER CONTROL IN MESSAGE\n         LA    R15,8(R15)          POINT PAST USER CONTROL MESSAGE\n         LA    R0,COMMAND          POINT TO START OF MESSAGE\n         SR    R15,R0              COMPUTE LENGTH\n         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\nBACK     EQU   *\n         BR    R14                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MOVE SYSTEM AFFINITY TO MESSAGE                              *\n*                                                                     *\n***********************************************************************\nSETAFF   STM   R0,R15,SAVEAFF      SAVE INPUT REGISTERS\n         LA    R15,COMMAND         POINT TO NEXT PART OF\n         AH    R15,LTEXT               MESSAGE AREA\n         TM    JQEFLAG2,JQE2SAF    SEE IF SYSTEM AFFINITY SET\n         BNO   SETAFF1             YES, BRANCH\n         MVC   0(3,R15),=C'ANY'    ASSUME NO SYSTEM AFFINITY\n         LA    R15,5(R15)          POINT PAST AFFINITY\n         B     SETAFF4             GO CHECK IND\nSETAFF1  L     R14,$QSE1           POINT TO QSE'S\n         USING QSE,R14             SET ADDRESSABILITY TO QSE\n         SLR   R1,R1               CLEAR REG FIR IC\nSETAFF2  IC    R1,QSESIAFF         LOAD SYSTEM AFFINITY BIT\n         EX    R1,CKSYSAFF         SEE IF QUEUED TO THIS QSE\n         BZ    SETAFF3             NO, BRANCH\n         MVC   0(4,R15),QSESID     MOVE SYSTEM NAME IN MESSAGE\n         LA    R15,5(R15)          POINT PAST SYSTEM NAME\nSETAFF3  TM    QSESTAT,QSELAST     END OF QSE'S\n         BO    SETAFF4             YES, BRANCH\n         LA    R14,QSELEN(R14)     POINT TO NEXT QSE\n         B     SETAFF2             LOOP\nSETAFF4  TM    JQEFLAG2,JQE2IND    SEE IF IN 'IND' MODE\n         BZ    SETAFF5             NO, BRANCH\n         MVC   0(3,R15),=C'IND'    SET 'IND' MODE IN MESSAGE\n         LA    R15,5(R15)          POINT PAST MODE\nSETAFF5  LA    R14,COMMAND         POINT TO START OF MESSAGE\n         SR    R15,R14             COMPUTE LENGTH\n         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\n         LM    R0,R15,SAVEAFF      RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         DROP  R14                 DROP ADDRESSABILITY TO QSE\n         SPACE 3\nCKSYSAFF TM    JQEFLAG2,0          *** EXECUTE ONLY ***\n         EJECT\n         AIF   ('&RESRCE' NE 'YES').RESRC1\n***********************************************************************\n*                                                                     *\n*        SET RESOURCE NAME(S) IF REQUESTED                            *\n*                                                                     *\n***********************************************************************\nSETRES   STM   R0,R15,SAVERES      SAVE INPUT REGISTERS\n         LA    R15,COMMAND         POINT TO NEXT PART OF\n         AH    R15,LTEXT               MESSAGE AREA\n         TM    QMISC+L'RESOURCE,RESOURCE RESOURCE NAMES REQUESTED?\n         BNO   SETRES6             NO, GET OUT\n         ICM   R5,B'1111',JQERESRT LOAD RESOURCE BITS FOR JOB\n         BZ    SETRES6             ALL ZERO, BRANCH\n         LA    R4,$RESTAB          POINT TO RESOURCE NAME TABLE\n         LH    R14,LTEXT           LOAD LENGTH OF MESSAGE\nSETRES1  LTR   R5,R5               TEST RESOURCE BITS\n         BZ    SETRES5             ZERO, DONE\n         BP    SETRES4             POSITIVE, HIGH BIT NOT ON, BRANCH\n         MVC   0(8,R15),0(R4)      MOVE RESOURCE NAME\nSETRES2  CLI   0(R15),C' '         END OF RESOURCE NAME\n         BE    SETRES3             YES, BRANCH\n         LA    R15,1(R15) POINT TO NEXT CHAR OF RESOURCE NAME\n         LA    R14,1(R14)          ADD 1 TO LENGTH\n         B     SETRES2             LOOP FOR NEXT CHAR RESOURCE NAME\nSETRES3  LA    R15,1(R15)          LEAVE A BLANK SPACE\n         LA    R14,1(R14)          ADD 1 TO LENGTH\nSETRES4  SLL   R5,1                SHIFT BITS 1 POSITION\n         LA    R4,$RESLEN(R4)      POINT TO NEXT RESOURCE NAME\n         B     SETRES1             CHECK FOR MORE BITS\nSETRES5  STH   R14,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\nSETRES6  LM    R0,R15,SAVERES      RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         EJECT\n.RESRC1  ANOP\n***********************************************************************\n*                                                                     *\n*        MOVE OWNERID (IF REQUESTED) TO MESSAGE                       *\n*                                                                     *\n***********************************************************************\nSETOWN   STM   R0,R15,SAVEOWN      SAVE INPUT REGISTERS\n         LA    R15,COMMAND         POINT TO NEXT PART OF\n         AH    R15,LTEXT               MESSAGE AREA\n         TM    QMISC+L'OWNER,OWNER OWNERID REQUESTED?\n         BNO   SETOWN2             NO, GET OUT\n         CLI   JQEXOWNR,C' '       SEE IF OWNERID PRESENT\n         BNH   SETOWN2             NO, GET OUT\n         MVC   0(3,R15),=C'FOR'    SET LABEL\n         MVC   4(8,R15),JQEXOWNR   MOVE OWNERID TO MESSAGE\nSETOWN1  LH    R14,LTEXT           LOAD LENGTH OF MESSAGE\n         LA    R14,13(R14)         ADD 13 TO LENGTH\n         STH   R14,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\nSETOWN2  LM    R0,R15,SAVEOWN      RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MOVE SPOOL VOLUME INFORMATION TO MESSAGE IF REQUESTED        *\n*                                                                     *\n***********************************************************************\nSETSPL   STM   R0,R15,SAVESPL      SAVE INPUT REGISTERS\n         TM    QMISC+L'SPOOL,SPOOL WANT SPOOL INFORMATION?\n         BZ    SETSPL12            NO, GET OUT\n         LA    R15,COMMAND         POINT TO NEXT PART OF\n         AH    R15,LTEXT               MESSAGE AREA\n         XC    $SPMSKWA,$SPMSKWA   ZERO THE SPOOL MASK WORK AREA\n         LH    R1,$JQEMSKL         GET MACHINE LENGTH OF JQE SPOOL MASK\n         EX    R1,MVJQESPM         MOVE JQE SPOOL MASK TO WORK AREA\n         NC    $SPMSKWA,$SPLSLCT   'AND' JQE MASK TO AVAIL SPOOL MASK\n         EX    R1,CJQESPM1         SEE IF STAYED THE SAME\n         BE    SETSPL02            YES, GO PROCESS SPOOL VOLUMES\n         EX    R1,EXJQESPM         'XC' MODIFIED MASK FOR CHANGED BITS\n         NC    $SPMSKWA,$SPLINAC   'AND' JQE MASK TO INACT SPOOL MASK\n         BZ    SETSPL01            NO MATCHED BITS, MUST BE HALTING\n         MVC   0(17,R15),=C'SPOOL(S) INACTIVE' SET MESSAGE\n         LA    R15,18(R15)         INCREMENT PAST MESSAGE\n         B     SETSPL02            GO PROCESS SPOOL VOLUMES\nSETSPL01 MVC   0(16,R15),=C'SPOOL(S) HALTING' SET MESSAGE\n         LA    R15,17(R15)         INCREMENT PAST MESSAGE\nSETSPL02 MVC   0(40,R15),=C'USES ****** TRACK GROUPS - ***% OF SPOOL'\n         LH    R2,JQETGNUM         LOAD NUMBER OF TG OR OFFSET\n         TM    JQEFLAG5,JQE5XUSD   SEE IF EXTENSION USED FOR TB COUNT\n         BZ    SETSPL03            NO, THIS IS THE ACTUAL NUMBER\n         AL    R2,$JQEEXT          CALCULATE ADDR OF TG NUMBER\n         LH    R2,$JEXTTGN(R2)     LOAD NUMBER OF TG\nSETSPL03 CL    R2,=A(32767)        SEE IF EXCEEDS MAXIMUM\n         BNL   SETSPL04            YES, LEAVE NUMBERS ALONE\n         CVD   R2,DBL              CONVERT TG FOR JOB TO PACKED\n         MVC   5(6,R15),=X'402020202120' SET EDIT MASK\n         ED    5(6,R15),DBL+5      EDIT TG COUNT TO MESSAGE\n         MH    R2,=H'100'          MULTIPLY BY 100 FOR PERCENT\n         SRDL  R2,32               SHIFT TO ODD REG OF PAIR\n         D     R2,$TGDEFND         DIVIDE BY TOTAL TRACK GRPS\n         CVD   R3,DBL              CONVERT PERCENT TO PACKED\n         MVC   26(4,R15),=X'40202120' SET EDIT MASK\n         ED    26(4,R15),DBL+6     EDIT TG PERCENT TO MESSAGE\nSETSPL04 LA    R15,41(R15)         INCREMENT PAST MESSAGE\n         L     R5,$DASFRST         LOAD ADDRESS OF FIRST DAS\n         USING DAS,R5              SET ADDRESSABILITY TO DAS\n         LH    R6,$SPOLNUM         LOAD NUMBER OF VOLUMES\n         LA    R0,50(R15)          SET ARBITRARY END OF VOLSER LIST\n         MVC   0(4,R15),=C'ON ('   SET MESSAGE\n         LA    R15,4(R15)          INCREMENT PAST MESSAGE\n         XC    $SPMSKWA,$SPMSKWA   ZERO THE SPOOL MASK WORK AREA\n         EX    R1,CJQESPM1         SEE IF ANY SPOOLS IN MASK\n         BNE   SETSPL05            YES, BRANCH\n         MVC   0(4,R15),=C'NONE'   SET SPOOL ID TO 'NONE'\n         LA    R15,4(R15)          INCREMENT PAST SPOOL ID\n         B     SETSPL11            GO END LIST\nSETSPL05 MVC   $SPMSKWA,DASMASK    GET THE SPOOL ID MASK\n         EX    R1,NCJQESPM         'AND' THE SYSTEM MASK TO THE JOBS\n         BZ    SETSPL09            ZERO, NOT ON THIS VOLUME\n         TM    MISCSW1,VOLHEAD     SEE IF VOLUME HEADER WRITTEN\n         BO    SETSPL08            YES, BRANCH\n         OI    MISCSW1,VOLHEAD     TURN ON VOLUME HEADER WRITTEN IND\n         MVC   0(6,R15),DASVOLID   SET FULL VOLSER AS HEADER\n         SLR   R4,R4               CLEAR REG FOR IC\n         IC    R4,$SPLLEN          LOAD LENGTH OF SPOOL VOLUME PREFIX-1\n         LA    R15,1(R4,R15)       POINT PAST SPOOL VOLUME PREFIX\nSETSPL06 LA    R14,DASVOLID        POINT TO FULL VOLSER\n         LA    R14,1(R4,R14)       POINT PAST SPOOL VOLUME PREFIX\n         LA    R2,L'DASVOLID       LOAD FULL LENGTH OF VOLUME NAME\n         SR    R2,R4               CALCULATE SUFFIX LENGTH\n         BCTR  R2,0                    OF VOLSER PAST PREFIX\nSETSPL07 CLI   0(R14),C' '         SEE IF END OF VOLSER\n         BE    SETSPL09            YES, GO GET NEXT DAS ENTRY\n         MVC   0(1,R15),0(R14)     MOVE VOLSER CHARACTER TO MESSAGE\n         LA    R15,1(R15)          INCREMENT TO NEXT CHAR OF VOLSER\n         LA    R14,1(R14)          INCREMENT TO NEXT CHAR OF VOLSER\n         BCT   R2,SETSPL07         LOOP UNTIL END OF VOLSER\n         B     SETSPL09            GO GET NEXT DAS ENTRY\nSETSPL08 MVI   0(R15),C','         SET VOLSER SEPARATOR\n         LA    R15,1(R15)          INCREMENT PAST SEPARATOR\n         B     SETSPL06            GO PROCESS THIS VOLSER\nSETSPL09 LA    R5,DASSIZ(R5)       INCREMENT TO NEXT DAS ENTRY\n         CR    R15,R0              SEE IF LIMIT REACHED ON VOLUMES\n         BH    SETSPL10            YES, GET OUT\n         BCT   R6,SETSPL05         LOOP ON THIS DAS ENTRY\n         B     SETSPL11            GO FLAG END OF LIST\nSETSPL10 MVI   0(R15),C'*'         FLAG LAST VOLUME OF LIST\n         LA    R15,1(R15)          INCREMENT PAST '*'\nSETSPL11 MVI   0(R15),C')'         FLAG END OF LIST\n         LA    R15,2(R15)          INCREMENT PAST ')'\n         LA    R14,COMMAND         POINT TO START OF MESSAGE\n         SR    R15,R14             COMPUTE LENGTH\n         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\nSETSPL12 NI    MISCSW1,255-VOLHEAD TURN OFF VOLUME HEADER WRITTEN IND\n         LM    R0,R15,SAVESPL      RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n         SPACE 3\nMVJQESPM MVC   $SPMSKWA(0),JQESUMSK **** EXECUTE ONLY ****\nCJQESPM1 CLC   $SPMSKWA(0),JQESUMSK **** EXECUTE ONLY ****\nEXJQESPM XC    $SPMSKWA(0),JQESUMSK **** EXECUTE ONLY ****\nNCJQESPM NC    $SPMSKWA(0),JQESUMSK **** EXECUTE ONLY ****\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MOVE ACTIVE SYSTEM TO MESSAGE                                *\n*                                                                     *\n***********************************************************************\nSETACTS  LA    R15,COMMAND         POINT TO NEXT PART OF\n         AH    R15,LTEXT               MESSAGE AREA\n         N     R1,=A(JQE1BUSY)     TURN OFF ALL BUT BUSY BITS\n         BCTR  R1,0                MAKE RELATIVE TO 0\n         MH    R1,=AL2(QSELEN)     MULTIPLY BY QSE LEN FOR OFFSET\n         AL    R1,$QSE1            ADD ORIGIN TO OFFSET FOR ADDRESS\n         USING QSE,R1              SET ADDRESSABILITY TO QSE\n         MVC   0(4,R15),QSESID     MOVE SYSTEM NAME TO MESSAGE\n         LH    R15,LTEXT           LOAD LENGTH OF MESSAGE\n         LA    R15,5(R15)          POINT PAST OUR TEXT\n         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\n         BR    R14                 RETURN TO CALLER\n         DROP  R1                  DROP ADDRESSABILITY TO QSE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MOVE DESTINATION NAME TO MESSAGE                             *\n*                                                                     *\n***********************************************************************\nSETDEST  ST    R1,ROUTCDE          SAVE ROUTCDE\n         LA    R15,COMMAND         POINT TO NEXT PART OF\n         AH    R15,LTEXT               MESSAGE AREA\n         SLR   R0,R0               CLEAR REG FOR ICM\n         MVI   0(R15),C'R'         ASSUME REMOTE NUMBER\n         CLC   ROUTCDE(2),$OWNNODE IS THIS OUR NODE\n         BE    SETDEST1            YES, BYPASS\n         MVI   0(R15),C'N'         ASSUME NODE NUMBER\n         ICM   R0,B'0011',ROUTCDE  LOAD NODE NUMBER\n         BNZ   SETDEST2            NOT ZERO, NODE NUMBER\n         MVI   0(R15),C'U'         SPECIAL DESTINATION\nSETDEST1 ICM   R0,B'0011',ROUTCDE+2 LOAD REMOTE/SPECIAL NUMBER\n         BNZ   SETDEST2            HAS REMOTE NUMBER, NOT LOCAL\n         MVC   0(5,R15),=C'LOCAL'  SET TO LOCAL\n         B     SETDEST6            GET OUT\nSETDEST2 CVD   R0,DOUBLE           CONVERT NODE/RMT NUMBER TO PACKED\n         UNPK  1(5,R15),DOUBLE     UNPACK NODE/RMT NUMBER\n         OI    5(R15),X'F0'        MAKE PRINTABLE\nSETDEST3 CLI   1(R15),C'0'         IS HIGH BYTE ZERO\n         BNE   SETDEST4            NO, BRANCH\n         MVC   1(5,R15),2(R15)     SHIFT OFF HIGH ORDER ZERO\n         B     SETDEST3            LOOP\nSETDEST4 CLI   0(R15),C'N'         IS THIS NODE NUMBER\n         BNE   SETDEST6            NO, DONE\n         ICM   R0,B'0011',ROUTCDE+2 LOAD REMOTE NUMBER\n         BZ    SETDEST6            ZERO, NO REMOTE NUMBER\nSETDEST5 LA    R15,1(R15)          INCREMENT TO NEXT CHAR NODE NUMBER\n         CLI   0(R15),C' '         END OF REMOTE NUMBER\n         BNE   SETDEST5            NO, LOOP\n         MVI   0(R15),C'R'         SET UP FOR REMOTE NUMBER\n         B     SETDEST2            GO PROCESS REMOTE NUMBER\nSETDEST6 LH    R15,LTEXT           LOAD LENGTH OF MESSAGE\n         LA    R15,11(R15)         POINT PAST OUR TEXT\n         STH   R15,LTEXT           SAVE NEW LENGTH OF OUR MESSAGE\n         BR    R14                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        BUILD TABLE OF ACTIVE OUTPUT PROCESSING FROM JOES            *\n*                                                                     *\n*        THE TABLE WILL CONTAIN A LIST OF 4 BYTE ENTRIES              *\n*        1)  A ONE BYTE SYSTEM BUSY NUMBER                            *\n*        2)  A THREE BYTE DEVICE ID FIELD                             *\n*            A)  A ONE BYTE DEVICE TYPE                               *\n*                X'10' - READER                                       *\n*                X'20' - PRINTER                                      *\n*                X'30' - PUNCH                                        *\n*                X'4F' - OFFLOAD JT                                   *\n*                X'5F' - OFFLOAD JR                                   *\n*                X'6F' - OFFLOAD ST                                   *\n*                X'7F' - OFFLOAD SR                                   *\n*                X'9X' - REMOTE READER  WHERE X IS THE DEVICE #       *\n*                X'AX' - REMOTE PRINTER WHERE X IS THE DEVICE #       *\n*                X'BX' - REMOTE PUNCH   WHERE X IS THE DEVICE #       *\n*                                                                     *\n*                X'48' - ROUT.JTX       WHERE X IS THE NUMBER         *\n*                                       FROM THE LOW 3 BITS           *\n*                X'58' - ROUT.JRX       WHERE X IS THE NUMBER         *\n*                                       FROM THE LOW 3 BITS           *\n*                                                                     *\n*            B)  A 2 BYTE DEVICE NUMBER                               *\n*                FOR LOCAL DEVICES   - THE DEVICE NUMBER              *\n*                FOR REMOTE DEVICES  - THE REMOTE NUMBER              *\n*                FOR OFFLOAD DEVICES - THE OFFLOADER NUMBER           *\n*                                                                     *\n***********************************************************************\nBLDACT   STM   R0,R15,SAVEBLD      SAVE INPUT REGISTERS\n         XC    DEVNO,DEVNO         SET DEVICE COUNT TO ZERO\n         LA    R1,DEVTBL           LOAD START ADDRESS OF TABLE\n         CLI   JQETYPE,$INPUT      IS JOB ON READER\n         BE    BLDACT2             YES, USE JQE DEVICE ID\n         CLI   JQETYPE,$RECEIVE    IS JOB ON SYSOUT RECEIVER\n         BE    BLDACT2             YES, USE JQE DEVICE ID\n         TM    JQETYPE,$XEQ        IS JOB ON CONVERTER/EXECUTION QUEUE\n         BNO   BLDACT1             NO, BRANCH\n         TM    JQEFLAG1,JQE1BUSY   IS JOB BUSY\n         BZ    BLDACT6             NO, GO CHECK JOES\n         TM    JQEDEVID,DCTXFRID+DCTNJTID IS JOB ON JOB OFFLOADER\n         BO    BLDACT2             YES, USE JQE DEVICE ID\n         B     BLDACT6             NO, GO CHECK JOES\nBLDACT1  CLI   JQETYPE,$XMIT       IS JOB ON JOB TRANSMITTER\n         BNE   BLDACT3             NO, GO CHECK SPOF\n         TM    JQEFLAG1,JQE1BUSY   IS JOB BUSY\n         BZ    BLDACT6             NO, GO CHECK JOES\nBLDACT2  MVC   DEVTBL(1),JQEFLAG1  SET DEVICE FLAG BYTE\n         NI    DEVTBL,JQE1BUSY     TURN OFF ALL BUT 'BUSY' BITS\n         MVC   DEVTBL+1(3),JQEDEVID SET DEVICE ID\n         MVC   DEVNO,=H'1'         SET FOR 1 DEVICE\n         B     BLDACT13            GET OUT\nBLDACT3  CLI   JQETYPE,$HARDCPY    IS JOB ON HARDCOPY\n         BNE   BLDACT6             NO, GO CHECK JOES\n         TM    JQEFLAG1,JQE1BUSY   IS JOB BUSY\n         BZ    BLDACT6             NO, GO CHECK JOES\n         LR    R2,R9               SET ADDRESS OF JQE\n         SL    R2,$JOBQPTR         SUBTRACT ORIGIN FOR OFFSET\n         LA    R3,1                SET DEVICE NUMBER TO 1\n         L     R4,$LCKPTR          LOAD ADDRESS OF LCK TABLE\n         USING LCK,R4              SET ADDRESSABILITY TO LCK\n         LA    R0,$MAXLCK          SET LOOP COUNTER\nBLDACT4  C     R2,LCKJQE           IS THIS OUR JOB\n         BE    BLDACT5             YES, BRANCH\n         LA    R3,1(R3)            ADD 1 TO DEVICE NUMBER\n         LA    R4,LCKSIZE(R4)      INCREMENT TO NEXT LCK ENTRY\n         BCT   R0,BLDACT4          LOOP\n         B     BLDACT6             GO CHECK JOES\n         DROP  R4                  DROP ADDRESSABILITY TO LCK\nBLDACT5  MVC   DEVTBL(1),JQEFLAG1  SET DEVICE FLAG BYTE\n         NI    DEVTBL,JQE1BUSY     TURN OFF ALL BUT 'BUSY' BITS\n         MVI   DEVTBL+1,DCTXFRID+DCTNSTID SET DEVICE ID\n         STCM  R3,B'0011',DEVTBL+1 SAVE DEVICE NUMBER\n         MVC   DEVNO,=H'1'         SET FOR 1 DEVICE\n         LA    R1,4(R1)            INCR PAST THIS DEVICE TBL ENTRY\nBLDACT6  LR    R2,R9               SET ADDRESS OF JQE\n         SL    R2,$JOBQPTR         SUBTRACT ORIGIN FOR OFFSET\n         L     R3,JQEJOE           LOAD OFFSET OF 1ST WORK JOE\n         B     BLDACT8             BYPASS FIRST LOAD\n         USING JOE,R3              SET ADDRESSABILITY TO JOE\nBLDACT7  L     R3,JOEJQNXT         LOAD OFFSET OF NEXT WORK JOE\nBLDACT8  N     R3,$ZEROFFF         SEE IF END OF CHAIN\n         BZ    BLDACT13            YES, BRANCH\n         AL    R3,$JOTABLE         COMPUTE JOE ADDRESS\n         TM    JOEFLAG1,JOE1BUSY   SEE IF JOE IS BUSY\n         BZ    BLDACT12            NO, BYPASS THIS JOE\n         CLC   JOEDEVID,$ZEROS     SEE IF ON A DEVICE\n         BE    BLDACT12            YES, BYPASS THIS JOE\n         TM    QMISC+L'SELDEST,SELDEST SELECTING BY DESTINATION?\n         BNO   BLDACT9             NO, BRANCH\n         CLC   LOWDEST,JOEDEST     SEE IF MATCH ON DEST\n         BL    BLDACT12            NO, BYPASS THIS JOE\n         CLC   HIDEST,JOEDEST      SEE IF MATCH ON DEST\n         BH    BLDACT12            NO, BYPASS THIS JOE\n         MVC   0(1,R1),JOEFLAG1    SAVE BUSY BITS\nBLDACT9  NI    0(R1),JOE1BUSY      TURN OFF ALL BUT BUSY BITS\n         MVC   1(3,R1),JOEDEVID    SAVE DEVICE ID\n         LH    R15,DEVNO           LOAD NUMBER OF DEVICES IN TBL\n         LTR   R15,R15             TEST NUMBER OF DEVICES\n         BZ    BLDACT11            ZERO, FIRST ENTRY\n         LA    R4,DEVTBL           LOAD START OF DEVICE TABLE\nBLDACT10 CLC   0(4,R4),0(R1)       SEE IF DUPLICATE ENTRY\n         BE    BLDACT12            YES, DROP THIS ENTRY\n         LA    R4,4(R4)            INCREMENT TO NEXT TABLE ENTRY\n         BCT   R15,BLDACT10        LOOP\nBLDACT11 LH    R15,DEVNO           LOAD NUMBER OF DEVICES IN TABLE\n         LA    R15,1(R15)          ADD 1 TO COUNT\n         STH   R15,DEVNO           AND SAVE NEW COUNT\n         CH    R15,=H'50'          SEE IF TABLE IS FULL\n         BE    BLDACT13            YES, JUST QUIT\n         LA    R1,4(R1)            INCREMENT TO NEXT TABLE ENTRY\nBLDACT12 B     BLDACT7             GO PROCESS NEXT JOE\nBLDACT13 LM    R0,R15,SAVEBLD      RESTORE INPUT REGISTERS\n         BR    R14                 RETURN TO CALLER\n         DROP  R3                  DROP ADDRESSABILITY TO JOE\n         EJECT\n***********************************************************************\n*                                                                     *\n*        WRITE OUTPUT MESSAGE                                         *\n*                                                                     *\n***********************************************************************\nPUTMSG   STM   R0,R15,SAVEPUT      SAVE INPUT REGISTERS\n         OI    MISCSW1,MSG         TURN ON MESSAGE ISSUED SWITCH\n         XC    RC,RC               ZERO THE RETURN CODE FIELD\n         LH    R3,LTEXT            LOAD LENGTH OF MESSAGE TEXT\n         LR    R4,R3               SAVE LENGTH OF MESSAGE TEXT\n         CH    R3,=H'70'           SEE IF EXCEEDS MAXIMUM\n         BNH   PUTMSG02            NO, BRANCH\n         LA    R4,70               LOAD MAX LENGTH OF MESSAGE\n         LA    R5,COMMAND+69       POINT TO LAST CHAR OF MAX LENGTH\nPUTMSG01 CLI   0(R5),C' '          APPROPRIATE STOPPING PLACE\n         BE    PUTMSG02            YES, BRANCH\n         BCTR  R4,0                REDUCE LENGTH BY 1\n         BCTR  R5,0                BACK UP 1 CHARACTER\n         B     PUTMSG01            LOOP\nPUTMSG02 LR    R0,R4               SAVE LENGTH OF MESSAGE\n         $CWTO L=(R0),JOB=YES,MSGID=908\n         BZ    *+10                IF NO $WAIT FOR CMB, BRANCH\n         MVC   RC,=H'16'           SET RETURN CODE OF $WAIT\n         SR    R3,R4               CALCULATE REMAINING MSG LENGTH\n         LR    R4,R3               AND RESET LENGTH REGISTER\n         BZ    PUTMSG03            NONE LEFT, GET OUT\n         MVC   COMMAND(18),BLANKS  BLANK OUT THE JOB NAME AND NBR\n         LA    R14,COMMAND+18      POINT TO START POINT OF MSG TEXT\n         LR    R15,R3              SET REMAINING LENGTH\n         LA    R0,1(R5)            POINT TO START OF SECOND PART\n         LR    R1,R15              SET LENGTH OF SECOND PART\n         MVCL  R14,R0              SHIFT MESSAGE FOR SECOND PART\n         LA    R3,18(R3)           ADD LENGTH OF BASIC MESSAGE\n         LR    R4,R3               RESET REMAINING LENGTH REGISTER\n         CH    R4,=H'19'           SEE IF ONLY BASIC MESSAGE LEFT\n         BH    PUTMSG02            NO, GO PROCESS SECOND PART OF MSG\nPUTMSG03 MVI   COMMAND,C' '        BLANK ENTIRE\n         MVC   COMMAND+1(199),COMMAND  COMMAND\n         MVC   COMMAND+201(200),COMMAND+200  AREA\n         MVC   COMMAND(18),SAVEBAS RESTORE JOB NAME AND NUMBER\n         MVC   LTEXT,=H'18'        RESET MESSAGE LENGTH\n         ICM   R15,B'0011',RC      LOAD $CWTO RETURN CODE\n         LM    R0,R15,SAVEPUT      RESTORE INPUT REGISTERS\n         BR    R14                 RETURN TO CALLER\n         EJECT\n***********************************************************************\n*        CONSTANTS FOR FORMAT ROUTINE                                 *\n***********************************************************************\n         SPACE 3\nBLANKS   DC    CL20' '             STRING OF 20 BLANKS\n         SPACE 3\nMSG1     DC    C' LIST INCOMPLETE'\n         SPACE 3\nDEVNTBL  DS    0F                  DEVICE NAME TABLE\n         DC    AL1(5),CL7'INTRDR'\n         DC    AL1(5),CL7'READER'\n         DC    AL1(5),CL7'PRINTR'\n         DC    AL1(4),CL7'PUNCH'\n         DC    AL1(1),CL7'JT'\n         DC    AL1(1),CL7'JR'\n         DC    AL1(1),CL7'ST'\n         DC    AL1(1),CL7'SR'\n         DC    AL1(2),CL7'RMT'\n         DC    AL1(2),CL7'RDR'\n         DC    AL1(2),CL7'PRT'\n         DC    AL1(2),CL7'PUN'\n         EJECT\n         AIF   ('&RESRCE' NE 'YES').RESRC2\n         $RESTABL ,                GENERATE RESOURCE NAME TABLE\n         EJECT\n.RESRC2  ANOP\n***********************************************************************\n*                                                                     *\n*        SHORTAGE OF COMMAND BUFFERS                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nINCMPLT  MVC   COMMAND(L'MSG1),MSG1 SET ERROR MESSAGE\n         LA    R0,L'MSG1           SET MESSAGE LENGTH\n         $CWTO L=(R0),MSGID=999    WRITE THE MSG TO THE OPERATOR\n         B     EXIT8               GET OUT\n***********************************************************************\n*                                                                     *\n*        RETURN TO CALLER AFTER FORMATTING JQE AND/OR JOES            *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nGOBACK   TM    MISCSW1,MSG         SEE IF MESSAGE WRITTEN\n         BO    EXIT0               YES, SET RETURN CODE TO ZERO\n         B     EXIT4               NO,  SET RETURN CODE TO FOUR\n         EJECT\n***********************************************************************\n*                                                                     *\n*                    E X I T     R O U T I N E S                      *\n*                                                                     *\n*        RC = 00 - JQE FORMAT COMPLETE                                *\n*        RC = 04 - JOB DROPPED BY FILTER                              *\n*        RC = 08 - CONSOLE BUFFER SHORTAGE                            *\n*                                                                     *\n***********************************************************************\nEXIT0    LA    R15,0               SET RETURN CODE TO 0\n         B     RETURN              GET OUT\nEXIT4    LA    R15,4               SET RETURN CODE TO 4\n         B     RETURN              GET OUT\nEXIT8    LA    R15,8               SET RETURN CODE TO 8\n         B     RETURN              GET OUT\nRETURN   $RETURN RC=(R15)          RETURN TO JES2\n         EJECT\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRINTDOC": {"ttr": 17158, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//NWBPRNT  JOB (S980000),'PRINT DOCUMENTATION',\n//             CLASS=A,MSGCLASS=X,NOTIFY=SA03\n//IEBUPDTE EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD  DUMMY\n//SYSUT2   DD  DSN=SA03.PRNT,UNIT=SYSALLDA,DISP=(,CATLG),\n//             SPACE=(80,(1000,200,10)),\n//             DCB=(LRECL=80,BLKSIZE=6160,RECFM=FBA)\n//SYSIN    DD  DSN=SA03.MODS.ASM($DOC),DISP=SHR\n//PRINT    EXEC PGM=IEBGENER,COND=(0,NE)\n//SYSPRINT DD  DUMMY\n//SYSUT1   DD  DSN=SA03.PRNT(PROSE),DISP=(OLD,DELETE)\n//         DD  DSN=SA03.PRNT(EXIT6),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT(CONSOLE),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT(DSAT),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT(TESTJES),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT(TESTJ136),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT($LF),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT($QJ),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT($QN),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT($TJIT),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT($TUCC7),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT($DV),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT($SL),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT($SR),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT($UA),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT($UH),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT($UL),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT($LOAD),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT($DC),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT($DR),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT($UA),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT($UH),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT(AUTHSVC),DISP=(OLD,KEEP)\n//         DD  DSN=SA03.PRNT(RESROUT),DISP=(OLD,KEEP)\n//SYSUT2   DD  SYSOUT=*\n//SYSIN    DD  DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TESTJES": {"ttr": 17160, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'PROGRAM TO TEST PSEUDO JES2 EXIT6'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 1.3.4  LEVEL 8506                       *\n*                      JES2 FOR SP 1.3.4                              *\n*                                                                     *\n*        THIS PROGRAM WAS WRITTEN TO TEST THE JES2 EXIT6 PROGRAM      *\n*        WRITTEN TO ENFORCE INSTALLATION JCL STANDARDS AND TO         *\n*        SET THE APPROPRIATE JOB CLASS BASED ON DEVICES USED.         *\n*                                                                     *\n*        THE INPUT TO THIS PROGRAM IS A SEQUENTIAL FILE OF            *\n*        INTERNAL TEXT CREATED USING THE QUEUE COMMAND AVAILABLE      *\n*        ON MOST OF THE MODS TAPES.  FILE 5 OF A JOB CAN BE           *\n*        PROCESSED WITH ONE OF THE NEWER VERSIONS OF THE QUEUE        *\n*        COMMAND AND THE SAVE COMMAND CAN BE USED TO SAVE THIS FILE   *\n*        INTO A DATA SET.                                             *\n*                                                                     *\n*        THE OUTPUT FILE MUST BE A JES2 SYSOUT DATA SET SINCE THE     *\n*        EXIT WILL DO A JES2 WRITE INTO THIS DATA SET WHENEVER        *\n*        AN ERROR IS DETECTED OR THE STEP STATISTICS ARE TO BE        *\n*        LISTED.                                                      *\n*                                                                     *\n*        THE REQUIRED JES2 CONTROL BLOCKS FOR THE EXIT ARE FAKED      *\n*        AND CREATED WITH JUST ENOUGH INFORMATION FOR THE EXIT        *\n*        TO FUNCTION.  THE CONTROL BLOCKS CREATED ARE THE JCT,        *\n*        PCE, AND JQE.                                                *\n*                                                                     *\n*        THIS ROUTINE LOADS THE ENTRY NAMED 'EXIT6' FOR PROCESSING.   *\n*        THIS NAME MUST MATCH THE NAME ON THE $ENTRY STATEMENT IN     *\n*        THE EXIT CODE AND MUST BE AN ALIAS FOR OR THE ENTRY POINT    *\n*        FOR THE MODULE BEING TESTED SO THAT THE JES2 PREFIX STUFF    *\n*        CAN BE BYPASSED.                                             *\n*                                                                     *\n*        WHEN TESTING THIS JES2 EXIT, THE LOCAL VARIABLE &&TSO        *\n*        IN THE EXIT SHOULD BE CHANGED TO 'YES' FROM 'NO' TO          *\n*        CHANGE THE $$WTO INSTRUCTIONS TO WTO INSTRUCTIONS AND        *\n*        BYPASS THE ESTAE MACROS SO THAT THE TEST COMMAND CAN         *\n*        DETERMINE THE ADDRESS OF ANY ABENDS.                         *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST COMPUTER SERVICES                      *\n*                        420 BRUSHY MOUNTAIN ROAD                     *\n*                        WILKESBORO, N.C. 28697                       *\n*                        (919) 651-5414                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*      THIS PROGRAM MAY BE LINKED INTO A TEST LIBRARY WITH ANY        *\n*      NAME BUT MUST HAVE AN ALIAS OF TESTJES TO UTILIZE THE          *\n*      ACTUAL ROUTINE ENTRY POINT INSTEAD OF THE JES PROLOGUE         *\n*      AT THE MAIN ENTRY POINT.                                       *\n*                                                                     *\n*      THE EXIT MAY BE LINKED INTO A TEST LIBRARY WITH ANY            *\n*      NAME BUT MUST HAVE AN ALIAS OF EXIT6 TO UTILIZE THE            *\n*      ACTUAL ROUTINE ENTRY POINT INSTEAD OF THE JES PROLOGUE         *\n*      AT THE MAIN ENTRY POINT.  IT MUST BE LINKEDITED AS             *\n*      REENTRANT FOR THIS TEST PROCEDURE TO WORK.                     *\n*                                                                     *\n*                                                                     *\n*              CLIST USED TO TEST JES2 EXIT6                          *\n*                                                                     *\n*      PROC 1 DSN                                                     *\n*      CONTROL NOMSG                                                  *\n*      FREE F(INTEXT,JESMSG)                                          *\n*      CONTROL MSG                                                    *\n*      ALLOC F(INTEXT) DA(&DSN) SHR                                   *\n*      ALLOC F(JESMSG) SYSOUT(A) HOLD                                 *\n*      TEST USER.LIBRARY(TESTJES)                                     *\n*      LOAD USER.LIBRARY(EXIT6)                                       *\n*      Q EXIT6                                                        *\n*                                                                     *\n***********************************************************************\n         COPY  $HASPGBL\nTJ       $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               $HASPEQU,                                               X\n               NEL,                                                    X\n               DEB,                                                    X\n               $BUFFER,                                                X\n               $PCE,                                                   X\n               $CNVWORK,                                               X\n               $JCT,                                                   X\n               $MIT,                                                   X\n               $JQE\n               SPACE 1\n         DROP  R13\n         USING PCEDSECT,R8\nTESTJES  $ENTRY BASE=R12\n         LR    R12,R15        SET BASE REGISTER\n         STM   R14,R12,12(R13) SAVE REGISTERS\n         LR    R12,R15        INITIALIZE BASE REG WITH ENTRY POINT\n         LR    R15,R13        SAVE CALLING'S SAVE AREA ADDR\n         LA    R13,NEWSAVE    LOAD ADDR OF NEW SAVE AREA\n         ST    R13,8(R15)     STORE NEW SAVE ADDR IN OLD\n         ST    R15,4(R13)     STORE OLD SAVE ADDR IN NEW\nLJCT     EQU   JCTNJHDR-JCTSTART\nLPCE     EQU   PCEWORK+JCLPCEWS-PSVID\nLJQE     EQU   JQELNGTH\n         LA    R0,LJCT        LOAD LENGTH OF JCT\n         GETMAIN R,LV=(0)     GET CORE FOR JCT\n         LR    R10,R1         SET JCT ADDRESS\n         LA    R0,LPCE        LOAD LENGTH OF PCE\n         GETMAIN R,LV=(0)     GET CORE FOR PCE\n         LR    R8,R1          SAVE PCE ADDRESS\n         LA    R0,LJQE        LOAD LENGTH OF JQE\n         GETMAIN R,LV=(0)     GET CORE FOR JQE\n         LR    R3,R1          SAVE JQE ADDRESS\n         USING JQEDSECT,R3    SET ADDRESSABILITY TO JQE\n         ST    R3,PCEJQE      SAVE JQE ADDRESS IN PCE\n         XC    PCEUSER0,PCEUSER0 CLEAR USER FIELD\n         XC    JCTCNVRC,JCTCNVRC SET CONVERTER RETURN CODE TO ZERO\n         MVI   JCTJOBFL,JCTBATCH SET TO BATCH JOB\n         MVI   JCTJCLAS,C'T'  SET CLASS TO 'T'\n         MVI   JCTCLASS,C'T'  SET CLASS TO 'T'\n         MVI   JQEJCLAS,C'T'  SET CLASS TO 'T'\n         OPEN  (JESMSG,(OUTPUT))\n         OPEN  INTEXT\n         MVC   JPCEMSG(LACB),JESMSG INITIALIZE OUTPUT ACB\n         LOAD  EP=EXIT6       LOAD EXIT ROUTINE\n         ST    R0,EXITADDR    SAVE EPA ADDRESS\nREAD     GET   INTEXT\n         ST    R1,PARM+4      SAVE TEXT ADDRESS\n         SLR   R0,R0          CLEAR REG ZERO\n         LA    R1,PARM        POINT TO PARMS\n         L     R15,EXITADDR   LOAD EXIT ADDRESS\nCALL     STM   R0,R13,SAVEREGS SAVE REGISTERS\n         BALR  R14,R15        GO TO EXIT\n         LM    R0,R13,SAVEREGS PROTECT OURSELVES\n         LTR   R15,R15        TEST RETURN CODE\n         BZ    READ           ZERO, CONTINUE\n         MVC   PTBUF(LMSG1),MSG1 SET ERROR MSG\n         BAL   R9,TPUTRTN     WRITE MESSAGE\n         B     EOJ            GET OUT\n         EJECT\nEOF      LA    R0,4           SET RETURN CODE TO EOF\n         LA    R1,PARM        POINT TO PARMS\n         L     R15,EXITADDR   LOAD EXIT ADDRESS\n         BALR  R14,R15        GO TO EXIT\n         LTR   R15,R15        TEST RETURN CODE\n         BZ    OK             ZERO, CONTINUE\n         MVC   PTBUF(LMSG2),MSG2 SET ERROR MSG\n         BAL   R9,TPUTRTN     WRITE MESSAGE\n         B     EOJ            GET OUT\n         EJECT\nOK       MVC   M3+18(1),JCTJCLAS SET JOB CLASS\n         MVC   PTBUF(LMSG3),MSG3 SET ERROR MSG\n         BAL   R9,TPUTRTN     WRITE MESSAGE\n         B     EOJ            GET OUT\n         EJECT\nEOJ      DELETE EP=EXIT6      DELETE EXIT ROUTINE\n         LA    R0,LJCT        LOAD LENGTH OF JCT\n         FREEMAIN R,LV=(0),A=(R10) FREE CORE FOR JCT\n         LA    R0,LPCE        LOAD LENGTH OF PCE\n         FREEMAIN R,LV=(0),A=(R8) FREE CORE FOR PCE\n         LA    R0,LJQE        LOAD LENGTH OF JQE\n         FREEMAIN R,LV=(0),A=(R3) FREE CORE FOR JQE\n         LA    R15,0          SET REG 15 TO '0'\n         L     R13,4(R13)     RESTORE ADDR OF ORIGINAL SAVE\n         L     R14,12(R13)    RESTORE ORIGINAL REGISTERS\n         LM    R0,R12,20(R13) EXCEPT REG 15\n         BR    R14            RETURN\n         EJECT\nTPUTRTN  LH    R0,PTBUF       LOAD MSG LENGTH TO REG 0\n         SH    R0,=H'2'       SUBTRACT 2 FROM LENGTH FOR MESSAGE PREFIX\n         LA    R1,PTBUF+2     LOAD ADDR OF ERROR MSG TO REG 1\n         TPUT  (R1),(R0)      WRITE ERROR MESSAGE\n         BR    R9             RETURN\n         EJECT\n*\n*  FOLLOWING IS THE LIST OF POSSIBLE ERROR MESSAGES THAT CAN BE\n*  ISSUED BY THE PROGRAM\n*\nMSG1     DC    Y(LMSG1)\nM1       DC    C'EXIT REQUESTED EARLY TERMINATION'\nLMSG1    EQU   L'M1+2\nMSG2     DC    Y(LMSG2)\nM2       DC    C'EXIT CANCELLED JOB'\nLMSG2    EQU   L'M2+2\nMSG3     DC    Y(LMSG3)\nM3       DC    C'JOB CLASS WILL BE X'\nLMSG3    EQU   L'M3+2\n         EJECT\nPTBUF    DS    H,CL120        BUFFER FOR TPUT MESSAGE\nNEWSAVE  DS    18F            NEW SAVE AREA FOR MAIN ROUTINE\nSAVEREGS DS    18F            CYA FOR CALLING EXIT ROUTINE\nWORK     DC    16F'0'         NEW SAVE AREA FOR MAIN ROUTINE\nEXITADDR DS    F              ADDRESS OF JESEXIT6\nPARM     DS    0F             JES EXIT PARM\n         DC    A(WORK)        ADDRESS OF 16 WORK WORK AREA\n         DC    A(0)\n         EJECT\n         PRINT NOGEN\nINTEXT   DCB   DDNAME=INTEXT,DSORG=PS,MACRF=GL,EODAD=EOF\nJESMSG   ACB   DDNAME=JESMSG,MACRF=(ADR,SEQ,OUT)\nLACB     EQU   *-JESMSG\n         PRINT GEN\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TESTJ136": {"ttr": 17164, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'PROGRAM TO TEST PSEUDO JES2 EXIT6'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS SP 1.3.6                                   *\n*                                                                     *\n*        THIS PROGRAM WAS WRITTEN TO TEST THE JES2 EXIT6 PROGRAM      *\n*        WRITTEN TO ENFORCE INSTALLATION JCL STANDARDS AND TO         *\n*        SET THE APPROPRIATE JOB CLASS BASED ON DEVICES USED.         *\n*                                                                     *\n*        THE INPUT TO THIS PROGRAM IS A SEQUENTIAL FILE OF            *\n*        INTERNAL TEXT CREATED USING THE QUEUE COMMAND AVAILABLE      *\n*        ON MOST OF THE MODS TAPES.  FILE 5 OF A JOB CAN BE           *\n*        PROCESSED WITH ONE OF THE NEWER VERSIONS OF THE QUEUE        *\n*        COMMAND AND THE SAVE COMMAND CAN BE USED TO SAVE THIS FILE   *\n*        INTO A DATA SET.                                             *\n*                                                                     *\n*        THE OUTPUT FILE MUST BE A JES2 SYSOUT DATA SET SINCE THE     *\n*        EXIT WILL DO A JES2 WRITE INTO THIS DATA SET WHENEVER        *\n*        AN ERROR IS DETECTED OR THE STEP STATISTICS ARE TO BE        *\n*        LISTED.                                                      *\n*                                                                     *\n*        THE REQUIRED JES2 CONTROL BLOCKS FOR THE EXIT ARE FAKED      *\n*        AND CREATED WITH JUST ENOUGH INFORMATION FOR THE EXIT        *\n*        TO FUNCTION.  THE CONTROL BLOCKS CREATED ARE THE JCT,        *\n*        DTE, AND JQE.                                                *\n*                                                                     *\n*        THIS ROUTINE LOADS THE ENTRY NAMED 'EXIT6' FOR PROCESSING.   *\n*        THIS NAME MUST MATCH THE NAME ON THE $ENTRY STATEMENT IN     *\n*        THE EXIT CODE AND MUST BE AN ALIAS FOR OR THE ENTRY POINT    *\n*        FOR THE MODULE BEING TESTED SO THAT THE JES2 PREFIX STUFF    *\n*        CAN BE BYPASSED.                                             *\n*                                                                     *\n*        WHEN TESTING THIS JES2 EXIT, THE LOCAL VARIABLE &&TSO        *\n*        IN THE EXIT SHOULD BE CHANGED TO 'YES' FROM 'NO' TO          *\n*        CHANGE THE $$WTO INSTRUCTIONS TO WTO INSTRUCTIONS AND        *\n*        BYPASS THE ESTAE MACROS SO THAT THE TEST COMMAND CAN         *\n*        DETERMINE THE ADDRESS OF ANY ABENDS.                         *\n*                                                                     *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        JOHN V. HOOPER                               *\n*                        FIRST COMPUTER SERVICES                      *\n*                        420 BRUSHY MOUNTAIN ROAD                     *\n*                        WILKESBORO, N.C. 28697                       *\n*                        (919) 651-5414                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*      THIS PROGRAM MAY BE LINKED INTO A TEST LIBRARY WITH ANY        *\n*      NAME BUT MUST HAVE AN ALIAS OF TESTJES TO UTILIZE THE          *\n*      ACTUAL ROUTINE ENTRY POINT INSTEAD OF THE JES PROLOGUE         *\n*      AT THE MAIN ENTRY POINT.                                       *\n*                                                                     *\n*      THE EXIT MAY BE LINKED INTO A TEST LIBRARY WITH ANY            *\n*      NAME BUT MUST HAVE AN ALIAS OF EXIT6 TO UTILIZE THE            *\n*      ACTUAL ROUTINE ENTRY POINT INSTEAD OF THE JES PROLOGUE         *\n*      AT THE MAIN ENTRY POINT.  IT MUST BE LINKEDITED AS             *\n*      REENTRANT FOR THIS TEST PROCEDURE TO WORK.                     *\n*                                                                     *\n*                                                                     *\n*              CLIST USED TO TEST JES2 EXIT6                          *\n*                                                                     *\n*      PROC 1 DSN                                                     *\n*      CONTROL NOMSG                                                  *\n*      FREE F(INTEXT,JESMSG)                                          *\n*      CONTROL MSG                                                    *\n*      ALLOC F(INTEXT) DA(&DSN) SHR                                   *\n*      ALLOC F(JESMSG) SYSOUT(A) HOLD                                 *\n*      TEST USER.LIBRARY(TESTJES)                                     *\n*      LOAD USER.LIBRARY(EXIT6)                                       *\n*      Q EXIT6                                                        *\n*                                                                     *\n***********************************************************************\n         COPY  $HASPGBL\nTJ       $MODULE SYSP=(GEN,GEN,DATA,GEN,GEN),                          X\n               $HASPEQU,                                               X\n               NEL,                                                    X\n               DEB,                                                    X\n               $BUFFER,                                                X\n               $PCE,                                                   X\n               $CNVWORK,                                               X\n               $JCT,                                                   X\n               $TQE,                                                   X\n               $DTE,                                                   X\n               $DTECNV,                                                X\n               $XECB,                                                  X\n               $ERA,                                                   X\n               $MIT,                                                   X\n               $HCT,                                                   X\n               RPL,                                                    X\n               $JQE\n               SPACE 1\n         USING DTE,R8\n         USING JCT,R10\nTESTJES  $ENTRY BASE=R12\n         LR    R12,R15        SET BASE REGISTER\n         STM   R14,R12,12(R13) SAVE REGISTERS\n         LR    R12,R15        INITIALIZE BASE REG WITH ENTRY POINT\n         LR    R15,R13        SAVE CALLING'S SAVE AREA ADDR\n         LA    R13,NEWSAVE    LOAD ADDR OF NEW SAVE AREA\n         ST    R13,8(R15)     STORE NEW SAVE ADDR IN OLD\n         ST    R15,4(R13)     STORE OLD SAVE ADDR IN NEW\nLJCT     EQU   JCTNJHDR-JCTSTART\nLJQE     EQU   JQEBLEN\nLDTE     EQU   DTELEN+DCNVLEN\nLHCT     EQU   $SAVEEND-HCT\n         LA    R0,LJCT        LOAD LENGTH OF JCT\n         GETMAIN R,LV=(0)     GET CORE FOR JCT\n         LR    R10,R1         SET JCT ADDRESS\n         ST    R10,PARM+12    SAVE JCT ADDRESS\n         LA    R0,LDTE        LOAD LENGTH OF DTE\n         GETMAIN R,LV=(0)     GET CORE FOR DTE\n         LR    R8,R1          SAVE DTE ADDRESS\n         ST    R8,PARM+8      SAVE JCT ADDRESS\n         LA    R0,LHCT        LOAD LENGTH OF HCT\n         GETMAIN R,LV=(0)     GET CORE FOR HCT\n         LR    R11,R1         SAVE HCT ADDRESS\n         LA    R0,LJQE        LOAD LENGTH OF JQE\n         GETMAIN R,LV=(0)     GET CORE FOR JQE\n         LR    R3,R1          SAVE JQE ADDRESS\n         USING JQE,R3         SET ADDRESSABILITY TO JQE\n         ST    R3,JCTJQE      SAVE JQE ADDRESS IN JCT\n         XC    JCTCNVRC,JCTCNVRC SET CONVERTER RETURN CODE TO ZERO\n         MVI   JCTJOBFL,JCTBATCH SET TO BATCH JOB\n         MVI   JCTJCLAS,C'T'  SET CLASS TO 'T'\n         MVI   JCTCLASS,C'T'  SET CLASS TO 'T'\n         MVI   JQEJCLAS,C'T'  SET CLASS TO 'T'\n         XC    $JOBQPTR,$JOBQPTR\n         MVC   $ZEROFFF,=X'00FFFFFF'\n         OPEN  (JESMSG,(OUTPUT))\n         OPEN  INTEXT\n         MVC   DCNVMSG(LACB),JESMSG INITIALIZE OUTPUT ACB\n         LOAD  EP=EXIT6       LOAD EXIT ROUTINE\n         ST    R0,EXITADDR    SAVE EPA ADDRESS\nREAD     GET   INTEXT\n         ST    R1,PARM+4      SAVE TEXT ADDRESS\n         SLR   R0,R0          CLEAR REG ZERO\n         LA    R1,PARM        POINT TO PARMS\n         L     R15,EXITADDR   LOAD EXIT ADDRESS\nCALL     STM   R0,R13,SAVEREGS SAVE REGISTERS\n         BALR  R14,R15        GO TO EXIT\n         LM    R0,R13,SAVEREGS PROTECT OURSELVES\n         LTR   R15,R15        TEST RETURN CODE\n         BZ    READ           ZERO, CONTINUE\n         MVC   PTBUF(LMSG1),MSG1 SET ERROR MSG\n         BAL   R9,TPUTRTN     WRITE MESSAGE\n         B     EOJ            GET OUT\n         EJECT\nEOF      LA    R0,4           SET RETURN CODE TO EOF\n         LA    R1,PARM        POINT TO PARMS\n         L     R15,EXITADDR   LOAD EXIT ADDRESS\n         BALR  R14,R15        GO TO EXIT\n         LTR   R15,R15        TEST RETURN CODE\n         BZ    OK             ZERO, CONTINUE\n         MVC   PTBUF(LMSG2),MSG2 SET ERROR MSG\n         BAL   R9,TPUTRTN     WRITE MESSAGE\n         B     EOJ            GET OUT\n         EJECT\nOK       MVC   M3+18(1),JCTJCLAS SET JOB CLASS\n         MVC   PTBUF(LMSG3),MSG3 SET ERROR MSG\n         BAL   R9,TPUTRTN     WRITE MESSAGE\n         B     EOJ            GET OUT\n         EJECT\nEOJ      DELETE EP=EXIT6      DELETE EXIT ROUTINE\n         LA    R0,LJCT        LOAD LENGTH OF JCT\n         FREEMAIN R,LV=(0),A=(R10) FREE CORE FOR JCT\n         LA    R0,LDTE        LOAD LENGTH OF DTE\n         FREEMAIN R,LV=(0),A=(R8) FREE CORE FOR DTE\n         LA    R0,LHCT        LOAD LENGTH OF HCT\n         FREEMAIN R,LV=(0),A=(R11) FREE CORE FOR HCT\n         LA    R0,LJQE        LOAD LENGTH OF JQE\n         FREEMAIN R,LV=(0),A=(R3) FREE CORE FOR JQE\n         LA    R15,0          SET REG 15 TO '0'\n         L     R13,4(R13)     RESTORE ADDR OF ORIGINAL SAVE\n         L     R14,12(R13)    RESTORE ORIGINAL REGISTERS\n         LM    R0,R12,20(R13) EXCEPT REG 15\n         BR    R14            RETURN\n         EJECT\nTPUTRTN  LH    R0,PTBUF       LOAD MSG LENGTH TO REG 0\n         SH    R0,=H'2'       SUBTRACT 2 FROM LENGTH FOR MESSAGE PREFIX\n         LA    R1,PTBUF+2     LOAD ADDR OF ERROR MSG TO REG 1\n         TPUT  (R1),(R0)      WRITE ERROR MESSAGE\n         BR    R9             RETURN\n         EJECT\n*\n*  FOLLOWING IS THE LIST OF POSSIBLE ERROR MESSAGES THAT CAN BE\n*  ISSUED BY THE PROGRAM\n*\nMSG1     DC    Y(LMSG1)\nM1       DC    C'EXIT REQUESTED EARLY TERMINATION'\nLMSG1    EQU   L'M1+2\nMSG2     DC    Y(LMSG2)\nM2       DC    C'EXIT CANCELLED JOB'\nLMSG2    EQU   L'M2+2\nMSG3     DC    Y(LMSG3)\nM3       DC    C'JOB CLASS WILL BE X'\nLMSG3    EQU   L'M3+2\n         EJECT\nPTBUF    DS    H,CL120        BUFFER FOR TPUT MESSAGE\nNEWSAVE  DS    18F            NEW SAVE AREA FOR MAIN ROUTINE\nSAVEREGS DS    18F            CYA FOR CALLING EXIT ROUTINE\nWORK     DC    16F'0'         NEW SAVE AREA FOR MAIN ROUTINE\nEXITADDR DS    F              ADDRESS OF JESEXIT6\nPARM     DS    0F             JES EXIT PARM\n         DC    A(WORK)        ADDRESS OF 16 WORK WORK AREA\n         DC    A(0)\n         DC    A(0)           ADDRESS OF DTE\n         DC    A(0)           ADDRESS OF JCT\n         EJECT\n         PRINT NOGEN\nINTEXT   DCB   DDNAME=INTEXT,DSORG=PS,MACRF=GL,EODAD=EOF\nJESMSG   ACB   DDNAME=JESMSG,MACRF=(ADR,SEQ,OUT)\nLACB     EQU   *-JESMSG\n         PRINT GEN\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT381/FILE381.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT381", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}