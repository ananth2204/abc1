{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011819000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE350.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE350.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x04'", "DS1TRBAL": "b'\\xa6j'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\x8b\\x00\\x0c\\x02\\x8c\\x00\\x00\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$INTRO": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x986\\x1f\\x00\\x986\\x1f\\x03\\x11\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-12-27T00:00:00", "modifydate": "1998-12-27T03:11:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "THESE JES2 EXITS IMPLEMENT CONVERSION TO WLM RESOURCE AFFINITY\nSCHEDULING, FROM OTHER SCHEMES.\n\n   MELLON04 AND MELLON06 IMPLEMENT CHANGE OF MELLON MODS\n      /*ROUTE XEQ RESNAME  (RESOURCE NAMES)   TO\n      SCHENV=RESNAME\n\n   PROCNV06 IMPLEMENTS CONVERSION OF SW BELL CORP'S PRO SYSTEM'S\n      \"SYMBOLIC JOBCLASSES\"  TO  SCHENV=SYMJBCLS\n\n     These exits are from Bob Break of St.Louis, Missouri\n           bbreak@swbell.net\n           cb7485@sbc.com\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MELLON04": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x986\\x1f\\x00\\x986\\x1f\\x02X\\x00\\xc0\\x00\\xc0\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-12-27T00:00:00", "modifydate": "1998-12-27T02:58:00", "lines": 192, "newlines": 192, "modlines": 0, "user": "SBGOLOB"}, "text": "*********************************************************************\n*                                                                   *\n*                        HASP EXIT 4                                *\n*                                                                   *\n*     This exit gets control whenever JES2 encounters a JCL or      *\n*     JES2 control statement and performs the following functions:  *\n*                                                                   *\n*     > Parses any \"/*ROUTE XEQ resname\" control statements that    *\n*       have been specified.  Any Mellon resource name that has     *\n*       been specified is then converted to a WLM scheduling        *\n*       environment.                                                *\n*                                                                   *\n*     Entry point: EXIT04                                           *\n*                                                                   *\n*     Input registers:                                              *\n*        R0     Code indicating whether a JES2 control or JCL       *\n*               statement is being processed.                       *\n*               0 = JES2 control statement                          *\n*               4 = JCL statement                                   *\n*        R1     Pointer to a three word parameter list formatted    *\n*               as follows:                                         *\n*               +0  Address of image buffer                         *\n*               +4  Address of RDWFLAGX                             *\n*               +8  Address of JCTXWRK                              *\n*        R2-9   N/A                                                 *\n*        R10    JCT address or zero                                 *\n*        R11    HCT address                                         *\n*        R12    N/A                                                 *\n*        R13    PCE address                                         *\n*        R14    Return address                                      *\n*        R15    Entry address                                       *\n*                                                                   *\n*     Output registers:                                             *\n*        R0-14  Unchanged                                           *\n*        R15:   Return code                                         *\n*                                                                   *\n*     Register usage(internal):                                     *\n*        R0-9   Work registers                                      *\n*        R10    JCT address                                         *\n*        R11    HCT address                                         *\n*        R12    Base register                                       *\n*        R13    PCE address                                         *\n*        R14-15 Work and linkage registers                          *\n*                                                                   *\n*     Note: This module is for use with JES2 Version 6.0.4          *\n*                                                                   *\n*     Author: Bob Break                                             *\n*             St. Louis, Mo.                                        *\n*                                                                   *\n*********************************************************************\n\n         COPY  $HASPGBL\n\nMELLON04 $MODULE ENVIRON=JES2,                                         X\n               RMODE=ANY,                                              X\n               SPLEVEL=NOCHECK,                                        X\n               CVT,                                                    X\n               PSA,                                                    X\n               RPL,                                                    X\n               $BUFFER,                                                X\n               $CADDR,                                                 X\n               $DCT,                                                   X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $HCCT,                                                  X\n               $JCT,                                                   X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PADDR,                                                 X\n               $PARMLST,                                               X\n               $PCE,                                                   X\n               $PSV,                                                   X\n               $RDRWORK,                                               X\n               $SQD,                                                   X\n               $TRE,                                                   X\n               $USERCBS,                                               X\n               $XECB\n\nEXIT04  $ENTRY BASE=R12            Exit routine entry point\n\n*********************************************************************\n*                                                                   *\n*        Save caller's registers and establish addressabilities.    *\n*                                                                   *\n*********************************************************************\n\n         USING JCT,R10\nEXIT000 $SAVE  NAME=EXIT04         Save caller's registers\n         LR    R12,R15             Set base register\n\n*********************************************************************\n*                                                                   *\n*        Determine if this exit was entered for a JES2 control      *\n*        statement.                                                 *\n*                                                                   *\n*********************************************************************\n\n         LTR   R0,R0               Processing JES2 control statement?\n         BNZ   RETURN0             No - branch, return\n\n*********************************************************************\n*                                                                   *\n*        Determine if a JCT is present.                             *\n*                                                                   *\n*********************************************************************\n\n         LTR   R10,R10             JCT present?\n         BZ    RETURN0             No - branch, return\n\n*********************************************************************\n*                                                                   *\n*        Determine if a \"/*ROUTE XEQ\" control statement is being    *\n*        processed.                                                 *\n*                                                                   *\n*********************************************************************\n\n         L     R3,0(,R1)           Get contol statement image address\n         CLC   ROUTCARD,0(R3)      \"/*ROUTE XEQ\" statement?\n         BNE   RETURN0             No - branch, return\n\n*********************************************************************\n*                                                                   *\n*        Isolate the resource name or JES2 destination.             *\n*                                                                   *\n*********************************************************************\n\n         LA    R3,L'ROUTCARD+1(,R3)  Point to resource name\n         TRT   0(9,R3),TRANSTBL     Find end of resource name\n         SLR   R1,R3                Calculate resource name length\n         LR    R2,R1                Save resource name length\n\n*********************************************************************\n*                                                                   *\n*        Determine if a valid JES2 destination has been specified.  *\n*        If not, process the symbolic as a resource name that is to *\n*        be converted to a scheduling environment.                  *\n*                                                                   *\n*********************************************************************\n\n        $DEST  DEST=(R3),LEN=8,NODE=$OWNNODE,RMTPOOL=NO\n         LTR   R15,R15              Valid destination?\n         BZ    RETURN0              Yes - branch, return\n        $DEST  DEST=(R3),LEN=8,NODE=$OWNNODE,RMTPOOL=NO,EXPLICIT=YES\n         LTR   R15,R15              Valid destination?\n         BZ    RETURN0              Yes - branch, return\n\n*********************************************************************\n*                                                                   *\n*        Set the scheduling environment in the JCT.                 *\n*                                                                   *\n*********************************************************************\n\n         BCTR  R2,0                 Minus 1 for execute\n         MVI   JCTSCHEN,C' '        Blank init scheduling environment\n         MVC   JCTSCHEN+1(L'JCTSCHEN-1),JCTSCHEN  *\n         MVC   JCTSCHEN(0),0(R3)    Executed instruction\n         EX    R2,*-6               Set scheduling environment\n\n*********************************************************************\n*                                                                   *\n*        Convert the \"/*ROUTE XEQ\" statement to a JCL comment       *\n*        statement.  This will prevent an invalid destination from  *\n*        causing a jcl error.                                       *\n*                                                                   *\n*********************************************************************\n\n         B     RETURN8              Branch - set return code = 8\n\n*********************************************************************\n*                                                                   *\n*        Return to caller.                                          *\n*                                                                   *\n*********************************************************************\n\nRETURN0  XR    R15,R15              Set return code = 0\n         B     RETURN               Branch - continue\nRETURN8  L     R15,$F8              Set return code = 8\nRETURN  $RETURN RC=(R15)            Return to caller\n\n         LTORG\n\nROUTCARD DC    C'/*ROUTE XEQ'       \"/*ROUTE XEQ\" fixed text\nTRANSTBL DC    256X'00'             EXIT04 translate table\n         ORG   TRANSTBL+C' '\n         DC    X'FF'                ' '\n\n         DROP  R10                  JCT\n\n        $MODEND\n\n         END\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MELLON06": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x986\\x1f\\x00\\x986\\x1f\\x02Y\\x00\\xef\\x00\\xef\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-12-27T00:00:00", "modifydate": "1998-12-27T02:59:00", "lines": 239, "newlines": 239, "modlines": 0, "user": "SBGOLOB"}, "text": "*********************************************************************\n*                                                                   *\n*                        HASP EXIT 6                                *\n*                                                                   *\n*     This exit gets control after each jcl statement has been      *\n*     converted into internal text and once after all of a job's    *\n*     jcl has been converted.  It performs the following functions: *\n*     > Checks if a scheduling environment (SCHENV=) has been       *\n*       coded on the jobcard.  If specified, the scheduling         *\n*       environment is used.  Otherwise if a Mellon resource name   *\n*       has been specified on a \"/*ROUTE XEQ resname\" control       *\n*       statement, then the resource name is used as a scheduling   *\n*       environment.                                                *\n*                                                                   *\n*     Entry point: EXIT06                                           *\n*                                                                   *\n*     Input registers:                                              *\n*        R0 Code indicating status of conversion processing         *\n*           0  Indicates that a jcl statement has been converted    *\n*              to a c/i text image.                                 *\n*           4  Indicates that all of the jcl for a particular       *\n*              job has been converted to c/i text.                  *\n*        R1     Address of 5-word parameter list                    *\n*        R2-10  N/A                                                 *\n*        R11    HCT address                                         *\n*        R12    N/A                                                 *\n*        R13    Address of an 18 word OS-style save area            *\n*        R14    Return address                                      *\n*        R15    Entry address                                       *\n*                                                                   *\n*     Output registers:                                             *\n*        R0-14  Unchanged                                           *\n*        R15:   Return code                                         *\n*               0 - Queue job for execution                         *\n*               8 - Cancel job and queue for output                 *\n*                                                                   *\n*     Register usage(internal):                                     *\n*        R0-8   Work registers                                      *\n*        R9     Workarea address                                    *\n*        R10    JCT address                                         *\n*        R11    HCT address                                         *\n*        R12    Base register                                       *\n*        R13    Address of an 18 word OS-style save area            *\n*        R14-15 Work and linkage registers                          *\n*                                                                   *\n*     Note: This module is for use with JES2 Version 6.0.4          *\n*                                                                   *\n*     Author: Bob Break                                             *\n*             St. Louis, Mo.                                        *\n*                                                                   *\n*********************************************************************\n\n         COPY  $HASPGBL\n\nMELLON06 $MODULE ENVIRON=SUBTASK,                                      X\n               RMODE=ANY,                                              X\n               SPLEVEL=NOCHECK,                                        X\n               CNMB,                                                   X\n               CVT,                                                    X\n               (KEYS,NOGEN),                                           X\n               PSA,                                                    X\n               (TEXT,NOGEN),                                           X\n               $CADDR,                                                 X\n               $DTE,                                                   X\n               $DTECNV,                                                X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $HCCT,                                                  X\n               $JCT,                                                   X\n               $JCTX,                                                  X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PADDR,                                                 X\n               $PARMLST,                                               X\n               $PCE,                                                   X\n               $TRE,                                                   X\n               $XIT\n\nEXIT06   $ENTRY BASE=R12           Exit routine entry point\n\n*********************************************************************\n*                                                                   *\n*        Save caller's registers and establish addressabilities.    *\n*                                                                   *\n*********************************************************************\n\n         USING HCT,R11\nEXIT000 $SAVE  NAME=EXIT06         Save caller's registers\n         LR    R12,R15             Set base register\n         LTR   R0,R0               Final EXIT6 call?\n         BNZ   RETURN0             Yes - branch, return\n         L     R10,12(,R1)         Get JCT address\n         USING JCT,R10\n         CLC   JCTCNVRC,=A(JCTCOK)  Job successfully converted?\n         BNE   RETURN0             No - branch, return\n         TM    JCTJOBFL,JCTBATCH   Batch job?\n         BZ    RETURN0             No - branch, return\n         L     R2,4(,R1)           Get text image address\n         USING TEXT,R2\n         TM    STRINDCS,JOBSTR     'JOB' statement?\n         BZ    RETURN0             No - branch, return\n         DROP  R2                  TEXT\n         LR    R2,R1               Save input parameter list address\n         LA    R0,EXIT06WL         Get workarea length\n         GETMAIN RU,LV=(R0),LOC=ANY\n         LR    R9,R1               Set workarea address\n         LR    R14,R1              Set move to address\n         LA    R15,EXIT06WL        Set move to length\n         XR    R1,R1               Set move from length and pad\n         MVCL  R14,R0              Clear workarea\n         USING EXIT06W,R9\n         ST    R2,PARMADDR         Save input parm list address\n\n*********************************************************************\n*                                                                   *\n*        Check if a scheduling environment has been coded on        *\n*        the jobcard.  If specified, allow it to be used.           *\n*                                                                   *\n*********************************************************************\n\nEXIT100  L     R1,8(,R1)           Get DTE address\n         USING DTE,R1\n         TM    DCNVSCHE,FF-C' '    Scheduling environment specified?\n         BZ    EXIT110             No - branch, continue\n         MVI   JCTSCHEN,C' '       Clear scheduling environment in JCT\n         MVC   JCTSCHEN+1(L'JCTSCHEN-1),JCTSCHEN  *\n         B     EXIT199             Branch - continue\n         DROP  R1                  DTE\n\n*********************************************************************\n*                                                                   *\n*        Check if a scheduling environment has been placed in the   *\n*        JCT by EXIT4.  If so, invoke the WLM IWMSEDES service and  *\n*        verify that the scheduling environment is defined.         *\n*        If undefined, fail the job with a jcl error.               *\n*                                                                   *\n*********************************************************************\n\nEXIT110  TM    JCTSCHEN,FF-C' '    Scheduling environment in JCT?\n         BZ    EXIT199             No - branch, continue\n         MVC   SYSNAME(L'SYSNAME),$BLANKS  Blank init SYSNAME\n         MVC   SYSNAME($MAXSNML),$SID  Set SYSNAME\n         MVC   IWMSEDWK(IWMSEDLN),IWMSEDL  Set IWMSEDES parm list\n         IWMSEDES SCHENV=JCTSCHEN,                                     X\n               SYSTEM_NAME=SYSNAME,                                    X\n               MF=(E,IWMSEDWK)\n         C     R15,$F4             Return code > 4?\n         BH    EXIT199             Yes - error - branch, continue\n         N     R0,=X'0000FFFF'     Isolate external reason code\n         LA    R1,IWMRSNCODESCHENVNOSYSTEM  Get reason code\n         CR    R0,R1               Invalid system specified?\n         BE    EXIT199             Yes - branch, continue\n         LA    R1,IWMRSNCODESCHENVNOTFOUND  Get reason code\n         CR    R0,R1               SCHENV defined to WLM?\n         BNE   EXIT199             Yes - branch, continue\n\n*********************************************************************\n*                                                                   *\n*        Issue a message to the JCLMSG data set and fail the job.   *\n*                                                                   *\n*********************************************************************\n\nEXIT120  GETMAIN RU,LV=CNMBSIZE+CNMBMAXL,SP=230,LOC=BELOW\n         XC    0(CNMBSIZE+CNMBMAXL,R1),0(R1)  CLear CNMB storage\n         L     R15,PARMADDR        Set CNMB address in parm list\n         ST    R1,16(,R15)         *\n         LR    R3,R1               Get CNMB address into work register\n         USING CNMB,R3\n         MVC   CNMBID,=C'CNMB'     Set identifier\n         MVI   CNMBVER,CNMBCVER    Set version number\n         MVI   CNMBSUBP,230        Set subpool number\n         LA    R1,CNMBSIZE+CNMBMAXL  Set CNMB buffer length\n         STH   R1,CNMBLEN            *\n         LA    R15,CNMBMSG         Point to message area\n         MVC   0(L'SCHEMSG1,R15),SCHEMSG1  Set fixed message text\n         LA    R15,L'SCHEMSG1(,R15)  Point past fixed text\n         LA    R14,JCTSCHEN        Point to schenv name\n         LA    R1,JCTSCHEN+15      Pre-set schenv name end\n         TRT   0(L'JCTSCHEN,R14),TRANSTBL  Check schenv name for blanks\n         BZ    EXIT121             Branch - no blanks found\n         BCTR  R1,0                Point back to last non-blank\nEXIT121  SLR   R1,R14              Calculate schenv name length - 1\n         LA    R2,1(,R1)           Save true schenv name length\n         MVC   0(0,R15),0(R14)     Executed instruction\n         EX    R1,*-6              Set schenv name in message text\n         LA    R15,0(R15,R2)       Point past schenv name\n         MVC   0(L'SCHEMSG2,R15),SCHEMSG2  Set fixed message text\n         LA    R1,L'SCHEMSG1+L'SCHEMSG2(,R2)  Set CNMB message length\n         STC   R1,CNMBMLEN                    *\n         MVC   JCTCNVRC,=A(JCTCJCL)  Set jcl error indicator\n         B     RETURN8             Branch -  continue\n         DROP  R3                  CNMB\n\nEXIT199  DS    0H\n\n*********************************************************************\n*                                                                   *\n*        Return to caller.                                          *\n*                                                                   *\n*********************************************************************\n\nRETURN0  XR     R15,R15            Set return code = 0\n         B      RETURN             Branch - continue\nRETURN8  LA     R0,EXIT06WL        Get workarea length\n         FREEMAIN RU,LV=(R0),A=(R9)\n         L      R15,$F8            Set return code = 8\nRETURN  $RETURN RC=(R15)           Return to caller\n\n         DROP  R10,R11             JCT, HCT\n\n         LTORG\n\n         IWMSEDES MF=(L,IWMSEDL)   IWMSEDES parm list\nIWMSEDLN EQU   *-IWMSEDL\n\nSCHEMSG1 DC    C'MELLON06 SCHEDULING ENVIRONMENT '\nSCHEMSG2 DC    C' DOES NOT EXIST IN THE WLM SERVICE DEFINITION'\n\nTRANSTBL DC    256X'00'            EXIT06 translate table\n         ORG   TRANSTBL+C' '\n         DC    X'FF'               ' '\n         ORG\n\n        $MODEND\n\nEXIT06W  DSECT                     EXIT06 workarea\nEX06FLAG DS    XL1                 Work flag\n         DS    XL3                 Reserved\nPARMADDR DS    A                   EXIT06 input parm list address\nSYSNAME  DS    CL8                 System name\n         DS    0D\nIWMSEDWK DS    (IWMSEDLN)X         IWMSEDES parm list workarea\nEXIT06WL EQU   *-EXIT06W           EXIT06 workarea length\n\n         IWMSET\n         IWMYCON\n\n         END\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PROCNV06": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x986\\x1f\\x00\\x986\\x1f\\x03\\x02\\x00\\xea\\x00\\xea\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-12-27T00:00:00", "modifydate": "1998-12-27T03:02:00", "lines": 234, "newlines": 234, "modlines": 0, "user": "SBGOLOB"}, "text": "*                                                                   *\n*   This JES2 Exit 6 routine converts PRO \"symbolic jobclass\"       *\n*    parameters to SCHENV=  keyword parameters under the covers.    *\n*                                                                   *\n*********************************************************************\n*                        HASP EXIT 6                                *\n*                                                                   *\n*     This exit gets control after each jcl statement has been      *\n*     converted into internal text and once after all of a job's    *\n*     jcl has been converted.  It performs the following function:  *\n*     > Checks if a scheduling environment (SCHENV=) has been       *\n*       coded on the jobcard.  If specified, the scheduling         *\n*       environment is used and a valid WLM mode jobclass supplied. *\n*       If no scheduling environment has been coded, then a check   *\n*       is made for a symbolic jobclass (CLASS=xxxxxxxx) on the     *\n*       jobcard.  If specified, a check is then made for a valid    *\n*       scheduling environment that matches the symbolic jobclass.  *\n*       If a match is found, the scheduling environment is used.    *\n*       Otherwise the symbolic jobclass is used.                    *\n*                                                                   *\n*     Entry point: EXIT06                                           *\n*                                                                   *\n*     Input registers:                                              *\n*        R0 Code indicating status of conversion processing         *\n*           0  Indicates that a jcl statement has been converted    *\n*              to a c/i text image.                                 *\n*           4  Indicates that all of the jcl for a particular       *\n*              job has been converted to c/i text.                  *\n*        R1     Address of 5-word parameter list                    *\n*        R2-10  N/A                                                 *\n*        R11    HCT address                                         *\n*        R12    N/A                                                 *\n*        R13    Address of an 18 word OS-style save area            *\n*        R14    Return address                                      *\n*        R15    Entry address                                       *\n*                                                                   *\n*     Output registers:                                             *\n*        R0-14  Unchanged                                           *\n*        R15:   Return code                                         *\n*               0 - Queue job for execution                         *\n*               8 - Cancel job and queue for output                 *\n*                                                                   *\n*     Register usage(internal):                                     *\n*        R0-8   Work registers                                      *\n*        R9     EXIT06 workarea address                             *\n*        R10    JCT address                                         *\n*        R11    HCT address                                         *\n*        R12    Base register                                       *\n*        R13    Address of an 18 word OS-style save area            *\n*        R14-15 Work and linkage registers                          *\n*                                                                   *\n*     Note: This module is for use with JES2 Version 6.0.4          *\n*                                                                   *\n*     Author: Bob Break                                             *\n*              Southwestern Bell Telephone Co.                      *\n*                                                                   *\n*********************************************************************\n\n         COPY  $HASPGBL\n\nHASPEX06 $MODULE ENVIRON=SUBTASK,                                      X\n               RMODE=ANY,                                              X\n               SPLEVEL=NOCHECK,                                        X\n               CVT,                                                    X\n               (KEYS,NOGEN),                                           X\n               PSA,                                                    X\n               (TEXT,NOGEN),                                           X\n               $CADDR,                                                 X\n               $DTE,                                                   X\n               $DTECNV,                                                X\n               $HASPEQU,                                               X\n               $HCT,                                                   X\n               $HCCT,                                                  X\n               $JCT,                                                   X\n               $JCTX,                                                  X\n               $MIT,                                                   X\n               $MITETBL,                                               X\n               $PADDR,                                                 X\n               $PARMLST,                                               X\n               $PCE,                                                   X\n               $TRE,                                                   X\n               $XIT\n\nEXIT06   $ENTRY BASE=R12           Exit routine entry point\n\n*********************************************************************\n*                                                                   *\n*        Save caller's registers and establish addressabilities.    *\n*                                                                   *\n*********************************************************************\n\n         USING HCT,R11\nEXIT000 $SAVE  NAME=EXIT06         Save caller's registers\n         LR    R12,R15             Set base register\n         LR    R2,R0               Save input R0\n         LR    R3,R1               Save input parameter list address\n         LA    R0,EXIT06WL         Get workarea length\n         GETMAIN RU,LV=(R0),LOC=ANY\n         LR    R9,R1               Set workarea address\n         LR    R14,R1              Set move to address\n         LA    R15,EXIT06WL        Set move to length\n         XR    R1,R1               Set move from length and pad\n         MVCL  R14,R0              Clear workarea\n         USING EXIT06W,R9\n         ST    R3,PARMADDR         Save input parm list address\n         L     R10,12(,R3)         Get JCT address\n         USING JCT,R10\n         CLC   JCTCNVRC,=A(JCTCOK)  Job successfully converted?\n         BNE   RETURN              No - branch, return\n         ST    R2,R0SAVE           Save input R0\n\n*********************************************************************\n*                                                                   *\n*        Check if a scheduling environment has been coded on        *\n*        the jobcard.  If specified, allow it to be used.           *\n*                                                                   *\n*********************************************************************\n\nEXIT100  TM    JCTJOBFL,JCTBATCH   Batch job?\n         BZ    EXIT199             No - branch, continue\n         ICM   R1,15,R0SAVE        Final EXIT6 call?\n         BZ    EXIT199             No - branch, continue\n         L     R1,PARMADDR         Get input parm list address\n         L     R1,8(,R1)           Get DTE address\n         USING DTE,R1\n         TM    DCNVSCHE,FF-C' '    Scheduling environment specified?\n         BZ    EXIT110             No - branch, continue\n         DROP  R1                  DTE\n         OI    EX06FLAG,SCHENV     Indicate SCHENV specified\n         B     EXIT120             Branch - continue\n\n*********************************************************************\n*                                                                   *\n*        Check if a symbolic jobclass was coded on the jobcard.     *\n*        If specified, invoke WLM services to check if a matching   *\n*        scheduling environment is defined.                         *\n*                                                                   *\n*********************************************************************\n\nEXIT110 $JCTXGET JCT=JCT,TYPE='SWBT',MOD=1,OKRET=EXIT111,ERRET=EXIT199\nEXIT111  LTR   R15,R15             JCTXGET successful?\n         BNZ   EXIT199             No - branch, continue\n         LA    R1,JCXBASLN(,R1)    Point to SWBTJCT\n         USING SWBTJCT,R1\n         TM    SWBJSYMJ,FF-C' '    Symbolic jobclass specified?\n         BZ    EXIT199             No - branch, continue\n         MVC   SYMCLASS,SWBJSYMJ   Retrieve symbolic jobclass\n         DROP  R1                  SWBTJCT\n         MVC   SCHENVNM(8),SYMCLASS  Set SCHENV name to check\n         MVC   SCHENVNM+8(8),$BLANKS  Blank pad SCHENV name\n         MVC   SYSNAME(L'SYSNAME),$BLANKS  Blank init SYSNAME\n         MVC   SYSNAME($MAXSNML),$SID  Set SYSNAME\n         MVC   IWMSEDWK(IWMSEDLN),IWMSEDL  Set IWMSEDES parm list\n         IWMSEDES SCHENV=SCHENVNM,                                     X\n               SYSTEM_NAME=SYSNAME,                                    X\n               MF=(E,IWMSEDWK)\n         C     R15,$F4            Return code > 4?\n         BH    EXIT199            Yes - error - branch, return\n         N     R0,=X'0000FFFF'    Isolate external reason code\n         LA    R1,IWMRSNCODESCHENVNOSYSTEM  Get reason code\n         CR    R0,R1              Invalid system specified?\n         BE    EXIT199            Yes - branch, return\n         LA    R1,IWMRSNCODESCHENVNOTFOUND  Get reason code\n         CR    R0,R1              SCHENV defined to WLM?\n         BE    EXIT199            No - branch, return\n\n*********************************************************************\n*                                                                   *\n*        Set the WLM managed jobclass in the JCT.                   *\n*                                                                   *\n*********************************************************************\n\nEXIT120  MVI   JCTJCLAS,C'W'       Set jobclass in JCT fields\n         MVI   JCTCLASS,C'W'       *\n         MVI   JCTAXCLS,C'W'       *\n\n*********************************************************************\n*                                                                   *\n*        Set the scheduling environment in the JCT if it has been   *\n*        converted from a symbolic jobclass.                        *\n*                                                                   *\n*********************************************************************\n\n         TM    EX06FLAG,SCHENV     SCHENV specified on jobcard?\n         BO    EXIT199             Yes - branch, continue\n         MVC   JCTSCHEN(8),SYMCLASS  Set scheduling environment\n         MVC   JCTSCHEN+8(8),$BLANKS   in JCTSCHEN\n\nEXIT199  DS    0H\n\n*********************************************************************\n*                                                                   *\n*        Return to caller.                                          *\n*                                                                   *\n*********************************************************************\n\nRETURN   L      R2,RETCODE          Get routine return code\n         LA     R0,EXIT06WL         Get workarea length\n         FREEMAIN RU,LV=(R0),A=(R9)\n         LR     R15,R2              Set return code in R15\n        $RETURN RC=(R15)            Return to caller\n\n         DROP  R9,R10,R11           EXIT06W, JCT, HCT\n\n         LTORG\n\n         IWMSEDES MF=(L,IWMSEDL)    IWMSEDES parm list\nIWMSEDLN EQU   *-IWMSEDL\n\n\n        $MODEND\n\n\nEXIT06W  DSECT                     EXIT06 workarea\nEX06FLAG DS    XL1                 Work flag\nSCHENV   EQU   X'80'               SCHENV specified\n         DS    XL3                 Reserved\nPARMADDR DS    A                   EXIT06 input parm list address\nRETCODE  DS    F                   EXIT06 return code\nR0SAVE   DS    F                   Input R0 save area\nSYMCLASS DS    CL8                 Symbolic jobclass\nSCHENVNM DS    CL16                Scheduling environment name\nSYSNAME  DS    CL8                 System name\n         DS    0D\nIWMSEDWK DS    (IWMSEDLN)X         IWMSEDES parm list workarea\nEXIT06WL EQU   *-EXIT06W           EXIT06 workarea length\n\n\n        $SWBTJCT\n         IWMSET\n         IWMYCON\n\n         END\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT350/FILE350.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT350", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}