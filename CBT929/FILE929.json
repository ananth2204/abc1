{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013459000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE929.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE929.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x02\\x0b'", "DS1TRBAL": "b'\\x874'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\tZ\\x00\\x0b\\tZ\\x00\\r\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Z\\x00G\\x01\\x15\\x08?\\x01\\x15\\x08?\\x19G\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf0@@@'", "ispf": {"version": "04.90", "flags": 0, "createdate": "2015-03-24T00:00:00", "modifydate": "2015-03-24T19:47:47", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-490"}, "text": "REGULAR CBT TAPE - VERSION 490    FILE:  929\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT490.FILE929\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 3 MEMBERS COUNTED; CUMULATIVE SIZE IS 189 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   03/24/15    19:47:47    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE929": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Z\\x005\\x01\\x15\\x08?\\x01\\x15\\x08?\\x19G\\x00!\\x00!\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf0@@@'", "ispf": {"version": "04.90", "flags": 0, "createdate": "2015-03-24T00:00:00", "modifydate": "2015-03-24T19:47:35", "lines": 33, "newlines": 33, "modlines": 0, "user": "CBT-490"}, "text": "//***FILE 929 is from somitcw and contains a program called         *   FILE 929\n//*           REALNAME, which is a REXX function that returns       *   FILE 929\n//*           the actual file name of a gdg dataset, or the         *   FILE 929\n//*           actual name of an alias in a catalog.                 *   FILE 929\n//*                                                                 *   FILE 929\n//*           The original version of REALNAME was written by       *   FILE 929\n//*           Doug Nadel.                                           *   FILE 929\n//*                                                                 *   FILE 929\n//*           email:  somitcw@yahoo.com                             *   FILE 929\n//*                                                                 *   FILE 929\n//*       REALNAME is used to:                                      *   FILE 929\n//*                                                                 *   FILE 929\n//*       1. Translate an alias in a catalog to a real name.        *   FILE 929\n//*          (Which includes finding a usercatalog name from        *   FILE 929\n//*          a hlq.)                                                *   FILE 929\n//*                                                                 *   FILE 929\n//*       2. Resolve a relative Generation Data Set name to an      *   FILE 929\n//*          absolute one.                                          *   FILE 929\n//*                                                                 *   FILE 929\n//*       If the input name is already a real name, it will be      *   FILE 929\n//*       returned.                                                 *   FILE 929\n//*                                                                 *   FILE 929\n//*       If the input name is not cataloged and an absolute        *   FILE 929\n//*       Generation Data Set name cannot be calculated within      *   FILE 929\n//*       a Generation Data Group, then 'UNKNOWN' will be           *   FILE 929\n//*       returned.                                                 *   FILE 929\n//*                                                                 *   FILE 929\n//*          Sample REXX calls:                                     *   FILE 929\n//*                                                                 *   FILE 929\n//*       gds = REALNAME(the.gdg.name(+1))                          *   FILE 929\n//*                                                                 *   FILE 929\n//*       SAY REALNAME(hlq)                                         *   FILE 929\n//*                                                                 *   FILE 929\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REALNAME": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01\\x15\\x07\\x7f\\x01\\x15\\x07\\x7f#H\\x00\\x90\\x00\\x90\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-03-18T00:00:00", "modifydate": "2015-03-18T23:48:35", "lines": 144, "newlines": 144, "modlines": 0, "user": "SBGOLOB"}, "text": "//SOMITCWR JOB (xxxxxxxx,xxxx,1439,9999,9999),REALNAME-SOMITCW,\n//             CLASS=x,MSGCLASS=x,\n//             NOTIFY=SOMITCW,PERFORM=xx,COND=(0,NE)\n//HLASMCL EXEC HLASMCL,PARM.C=(RENT,NODECK,OBJECT),PARM.L=REFR\nPASS     TITLE 'Translate catalog alias or relative GDS name'\n         PRINT ON,GEN,DATA\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*     This is the assembler program for REXX function REALNAME.\n*\n*  It is used to:\n*\n*  1. Translate an alias in a catalog to a real name.\n*     ( Which includes finding a usercatalog name from a hlq. )\n*\n*  2. Resolve a relative Generation Data Set name to an absolute one.\n*\n*\n*  If the input name is already a real name, it will be returned.\n*\n*  If the input name is not cataloged and an absolute Generation Data\n*  Set name cannot be calculated within a Generation Data Group, then\n*  'UNKNOWN' will be returned.\n*\n*\n*     Sample REXX calls:\n*\n*  gds = REALNAME(the.gdg.name(+1))\n*\n*  SAY REALNAME(hlq)\n*\n*\n*  Date Written: 2000-01-19\n*\n*  Written by: Doug Nadel\n*\n*  Downloaded from: http://somebody.home.mindspring.com/\n*\n*  LinkEdit Attributes: REENTRANT, REUSEABLE, REFRESHABLE\n*\n*  R0  = System use\n*  R1  = System use\n*  R2  = TRT uses\n*  R3  = Input parameters\n*  R4  = Address of REXX Evaluation Block\n*  R5  = Address of input and output data set name\n*      -\n*  R9  = Work register for CPPL address and data set name length\n*  R10 = Work register for input data set name\n*  R11 = Base register for dynamically acquired storage\n*  R12 = Base register for program\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n         MACRO\n         REGS  ,\n         LCLA  &N\n.REGNEXT ANOP  ,\nR&N      EQU   &N                 Register Equate\n         AIF   (&N GT 14).REGOUT\n&N       SETA  &N+1\n         AGO   .REGNEXT\n.REGOUT  ANOP  ,\n         MEND\n\nREALNAME CSECT ,\nREALNAME AMODE 31\nREALNAME RMODE ANY\n         STM   R14,R12,12(R13)    Save caller's registers\n         LR    R12,R15            Load base register\n         USING REALNAME,R12\n         LR    R3,R1              Save PARM address\n         STORAGE OBTAIN,LENGTH=WORKSIZE,LOC=ANY Get above line storage\n         LR    R11,R1             Load work area location\n         USING WORKAREA,R11       Set addressability to work area\n         XC    CAMLST(12),CAMLST  Clear most of CAMLST\n         MVI   CAMLST,X'44'       Set CAMLST to NAME for LOCATE\n         LA    R1,LOCAREA         Load address of CAMLST catalog area\n         ST    R1,CAMLST+12       Store address of CAMLST catalog area\n         L     R4,20(,R3)         Load address of REXX Eval. Block\n         L     R4,0(,R4)          R4 = Address REXX Eval Block\n         USING EVALBLOCK,R4\n         CLC   EVALBLOCK_EVSIZE,=F'7'  Insure EVDATA area large enough\n         BNH   ABEND1             Abend if not 44 bytes in EVDATA\n         LA    R5,EVALBLOCK_EVDATA R5 = ADDR(EVALBLOCK_EVDATA);\n         ST    R5,CAMLST+4     CAMLST(2) = ADDR(EVALBLOCK_EVDATA);\n         MVI   0(R5),C' '      EVALBLOCK_EVDATA(1:44) = INPUT DSN\n         MVC   1(43,R5),0(R5)     CLEAR 44 BYTES\n         L     R9,16(,R3)         R9  = ADDR OF PARM LIST  ( CPPL )\n         L     R10,0(,R9)         R10 = ADDR OF INPUT DSNAME\n         L     R9,4(,R9)          R9  = LENGTH OF INPUT DSNAME\n         BCTR  R9,0               Drop length by one for EX instruction\n         C     R9,=F'44'          Insure input not too large\n         BNL   UNKNOWN            Go exit with an error\n         EX    R9,MVCINSTR        -> EX MVC 0(0,R5),0(R10)\n         LOCATE CAMLST            Translate the data set name\n         LTR   R15,R15         IF R15 = 0 THEN\n         BNZ   UNKNOWN            Go move 'UNKNOWN' as data set name\n         LA    R1,EVALBLOCK_EVDATA+44  Find ending address of dsname+1\n         TRT   EVALBLOCK_EVDATA(44),FINDSPAC  Find space after dsname\n* R1 will now contain either the address of the space after the data\n* set name or if there are no spaces in the data set name field, it\n* will contain the address of the byte after the data set name field.\n         SR    R1,R5              Find the length of the new dsname\n         ST    R1,EVALBLOCK_EVLEN Store length of new data set name\nEXIT     DS    0H\n         STORAGE RELEASE,LENGTH=WORKSIZE,ADDR=(R11) Free work area\n         LM    R14,R12,12(R13)    Restore caller's registers\n         SLR   R15,R15            Always set return code to zero\n         BR    R14                Return to caller\n\nUNKNOWN  DS    0H\n         MVC   EVALBLOCK_EVLEN,=F'7'              RESULT LENGTH=7\n         MVC   EVALBLOCK_EVDATA(7),=CL7'UNKNOWN'  RESULT='UNKNOWN'\n         B     EXIT               Go free storage and return to caller\n\nMVCINSTR MVC   EVALBLOCK_EVDATA(0),0(R10)  Target of EX instruction\n\nABEND1   DS    0H\n         WTO   'REALNAME Abending due to small EVALBLOCK_EVDATA size', C\n               ROUTCDE=11\n         ABEND 1,DUMP             Abend the program with a dump\n\nFINDSPAC DC   XL256'0'            Define an empty table\n         ORG  FINDSPAC+C' '       Backup location counter to X'40'\n         DC   X'40'               Overlay the blank position to find it\n         ORG  ,                   Return the location counter to normal\n\n         LTORG ,                  In case there are literals\n\nWORKAREA DSECT ,\nLOCAREA  DS    0D,256C            Catalog work area\nCAMLST   DS    4F                 Four words for CAMLST\n* CAMLST CAMLST NAME,INPUTDSN,,LOCAREA\n* CAMLST DC    XL4'44000000',A(INPUTDSN),A(0),A(LOCAREA)\nWORKSIZE EQU   *-WORKAREA         Get size of work area\n\n         IRXEVALB ,               REXX Evaluation Block\n*        IKJCPPL ,                TSO Command Processor Parameter List\n\n         REGS  ,                  Register equates\n\n         END   ,\n//L.SYSLMOD DD DSN=SYSx.LOADxxxx,DISP=SHR,SPACE=\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT929/FILE929.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT929", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}