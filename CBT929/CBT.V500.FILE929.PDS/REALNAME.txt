//SOMITCWR JOB (xxxxxxxx,xxxx,1439,9999,9999),REALNAME-SOMITCW,
//             CLASS=x,MSGCLASS=x,
//             NOTIFY=SOMITCW,PERFORM=xx,COND=(0,NE)
//HLASMCL EXEC HLASMCL,PARM.C=(RENT,NODECK,OBJECT),PARM.L=REFR
PASS     TITLE 'Translate catalog alias or relative GDS name'
         PRINT ON,GEN,DATA
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*     This is the assembler program for REXX function REALNAME.
*
*  It is used to:
*
*  1. Translate an alias in a catalog to a real name.
*     ( Which includes finding a usercatalog name from a hlq. )
*
*  2. Resolve a relative Generation Data Set name to an absolute one.
*
*
*  If the input name is already a real name, it will be returned.
*
*  If the input name is not cataloged and an absolute Generation Data
*  Set name cannot be calculated within a Generation Data Group, then
*  'UNKNOWN' will be returned.
*
*
*     Sample REXX calls:
*
*  gds = REALNAME(the.gdg.name(+1))
*
*  SAY REALNAME(hlq)
*
*
*  Date Written: 2000-01-19
*
*  Written by: Doug Nadel
*
*  Downloaded from: http://somebody.home.mindspring.com/
*
*  LinkEdit Attributes: REENTRANT, REUSEABLE, REFRESHABLE
*
*  R0  = System use
*  R1  = System use
*  R2  = TRT uses
*  R3  = Input parameters
*  R4  = Address of REXX Evaluation Block
*  R5  = Address of input and output data set name
*      -
*  R9  = Work register for CPPL address and data set name length
*  R10 = Work register for input data set name
*  R11 = Base register for dynamically acquired storage
*  R12 = Base register for program
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

         MACRO
         REGS  ,
         LCLA  &N
.REGNEXT ANOP  ,
R&N      EQU   &N                 Register Equate
         AIF   (&N GT 14).REGOUT
&N       SETA  &N+1
         AGO   .REGNEXT
.REGOUT  ANOP  ,
         MEND

REALNAME CSECT ,
REALNAME AMODE 31
REALNAME RMODE ANY
         STM   R14,R12,12(R13)    Save caller's registers
         LR    R12,R15            Load base register
         USING REALNAME,R12
         LR    R3,R1              Save PARM address
         STORAGE OBTAIN,LENGTH=WORKSIZE,LOC=ANY Get above line storage
         LR    R11,R1             Load work area location
         USING WORKAREA,R11       Set addressability to work area
         XC    CAMLST(12),CAMLST  Clear most of CAMLST
         MVI   CAMLST,X'44'       Set CAMLST to NAME for LOCATE
         LA    R1,LOCAREA         Load address of CAMLST catalog area
         ST    R1,CAMLST+12       Store address of CAMLST catalog area
         L     R4,20(,R3)         Load address of REXX Eval. Block
         L     R4,0(,R4)          R4 = Address REXX Eval Block
         USING EVALBLOCK,R4
         CLC   EVALBLOCK_EVSIZE,=F'7'  Insure EVDATA area large enough
         BNH   ABEND1             Abend if not 44 bytes in EVDATA
         LA    R5,EVALBLOCK_EVDATA R5 = ADDR(EVALBLOCK_EVDATA);
         ST    R5,CAMLST+4     CAMLST(2) = ADDR(EVALBLOCK_EVDATA);
         MVI   0(R5),C' '      EVALBLOCK_EVDATA(1:44) = INPUT DSN
         MVC   1(43,R5),0(R5)     CLEAR 44 BYTES
         L     R9,16(,R3)         R9  = ADDR OF PARM LIST  ( CPPL )
         L     R10,0(,R9)         R10 = ADDR OF INPUT DSNAME
         L     R9,4(,R9)          R9  = LENGTH OF INPUT DSNAME
         BCTR  R9,0               Drop length by one for EX instruction
         C     R9,=F'44'          Insure input not too large
         BNL   UNKNOWN            Go exit with an error
         EX    R9,MVCINSTR        -> EX MVC 0(0,R5),0(R10)
         LOCATE CAMLST            Translate the data set name
         LTR   R15,R15         IF R15 = 0 THEN
         BNZ   UNKNOWN            Go move 'UNKNOWN' as data set name
         LA    R1,EVALBLOCK_EVDATA+44  Find ending address of dsname+1
         TRT   EVALBLOCK_EVDATA(44),FINDSPAC  Find space after dsname
* R1 will now contain either the address of the space after the data
* set name or if there are no spaces in the data set name field, it
* will contain the address of the byte after the data set name field.
         SR    R1,R5              Find the length of the new dsname
         ST    R1,EVALBLOCK_EVLEN Store length of new data set name
EXIT     DS    0H
         STORAGE RELEASE,LENGTH=WORKSIZE,ADDR=(R11) Free work area
         LM    R14,R12,12(R13)    Restore caller's registers
         SLR   R15,R15            Always set return code to zero
         BR    R14                Return to caller

UNKNOWN  DS    0H
         MVC   EVALBLOCK_EVLEN,=F'7'              RESULT LENGTH=7
         MVC   EVALBLOCK_EVDATA(7),=CL7'UNKNOWN'  RESULT='UNKNOWN'
         B     EXIT               Go free storage and return to caller

MVCINSTR MVC   EVALBLOCK_EVDATA(0),0(R10)  Target of EX instruction

ABEND1   DS    0H
         WTO   'REALNAME Abending due to small EVALBLOCK_EVDATA size', C
               ROUTCDE=11
         ABEND 1,DUMP             Abend the program with a dump

FINDSPAC DC   XL256'0'            Define an empty table
         ORG  FINDSPAC+C' '       Backup location counter to X'40'
         DC   X'40'               Overlay the blank position to find it
         ORG  ,                   Return the location counter to normal

         LTORG ,                  In case there are literals

WORKAREA DSECT ,
LOCAREA  DS    0D,256C            Catalog work area
CAMLST   DS    4F                 Four words for CAMLST
* CAMLST CAMLST NAME,INPUTDSN,,LOCAREA
* CAMLST DC    XL4'44000000',A(INPUTDSN),A(0),A(LOCAREA)
WORKSIZE EQU   *-WORKAREA         Get size of work area

         IRXEVALB ,               REXX Evaluation Block
*        IKJCPPL ,                TSO Command Processor Parameter List

         REGS  ,                  Register equates

         END   ,
//L.SYSLMOD DD DSN=SYSx.LOADxxxx,DISP=SHR,SPACE=
