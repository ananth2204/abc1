SAVEPARM   TITLE 'Save or Add the Parameter to the $$PARM File'
*
* COPYRIGHT Clement Clarke, CLARKE COMPUTER SOFTWARE 2010
* ALL RIGHTS RESERVED
* ANY USE OF THIS CODE MUST RETAIN THE ABOVE COPYRIGHT NOTICE
*
*
* This program is provided free of charge, under the Apache Licence,
* for Hercules and "Hobbyist" licences.
*
* However, you are invited to contribute if
* you find this software useful. And this will assist with the
* development of new software.
*
* There is no warranty - source code is provided so that the program
* may be maintained.
*
* Note: You may not convert this program into a paid product, and all
*       source code changes must be made available for everyone.
*
* My email is clemclarke@gmail.com
*
*
* This a stand alone program.  It is inspired by Jol,
*        the Universal Command Language for all computers.
*
* Note: Versions of Jol exist for Z/OS, VSE, Windows, Linux, OS/2,
*       and soon Macs.
*
*
*
*
*                   J             000000            L
*                   J            0      0           L
*                   J           0        0          L
*                   J          0          0         L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*        J          J         0            0        L
*         J        J           0          0         L
*          J      J             0        0          L
*           J    J               0      0           L
*            JJJJ                 000000            LLLLLLLLLLL
           SPACE 3
PARMCNTL CSECT                                                    86211
         DS    0H
*
*   This program simply save the parameter the program was
*   executed with to the $$PARM DD card.
*
*   If the parameter has PGM=abc, has the first part of the
*   parameter, then that program is executed.
*
*   If the parameter has DDN=ddn, after the PGM=abc,
*   the the DDNAME is used instead of $$CNTL.
*
* NOTE:  If there is a parameter field, the $$PARM file is
*   NOT USED.
*
* NOTE:  There is no provision to pass a parameter to the
*   problem program.
*
*     The $$PARM file must be a VB data set.
*     The $$CNTL file can be a Fixed or Variable file.
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
SAVEPRM  SAVE   (14,12),,PARMCNTL.COPYRIGHT.CLEM.CLARKE;COMPILED.ON.&SY+
               SDATE.:&SYSTIME
         USING PARMCNTL,R11    ADDRESS OURSELVES
         LR    R11,R15         AND FIX UP BASE REGISTER
         LR    R9,R1           SAVE R1 FOR A WHILE
         L     R0,=A(CONEND-CONSTART)  LOAD R0 WITH LENGTH OF CONSTANT
*                                      AREA + LENGTH SAVE AREA
         GETMAIN R,LV=(0)      GET THE REQUIRED STORAGE
         ST    R13,4(R1)
         ST    R1,8(R13)
         USING SAVEAREA,R13
         LR    R13,R1          LINKAGE SET UP NOW
         MVC   EYEBALL1,=CL16'#RECIN  #RECIN'
         MVC   EYEBALL2,=CL16'#RECOUT #RECOUT'
         MVC   EYEBALLP,=CL16'#PARMxxxx#PARMxxxx'
         MVC   #PARMPP,=H'0'   Initialise Problem Program Parm to Null.
         SPACE 3
*
         L     R9,0(R9)       POINT TO PARAMETER AREA(OS)         75128
         USING PARMIN,R9
         CLC   =H'0',#PARM     IS THERE A PARAMETER?
         BNE   GETPARM         Yes, copy it so we can use it.
*
* Here, no parameters so read the file in here...
*
* Get the long Parameter from the $$PARM DD Card
*
*
*        OPEN ($$PARM,INPUT)
OPEN     DS    0H
         MVC   $$PARM($$PARMCL),$$PARMC  Copy DCB to gotten storage
         MVC   OPENWRK(OPENINS),OPENIN  Copy Open Initialised List
         OPEN  ($$PARM,(INPUT)),MF=(E,OPENWRK)
*
         LA    R1,$$PARM       Get address of Input DCB
         USING IHADCB,R1
         TM    DCBOFLGS,DCBOFOPN OPEN okay ?
         BZ    OPENERR         If OPEN failed, go to ABEND
         TM    DCBRECFM,DCBRECV VARIABLE RECORD FORMAT ?
         BNO   MUSTBEVB        NO, Must be VB (for version 1)
         DROP  R1
*
         GET   $$PARM,VBLRECL2 Get the first record directly into area
         LH    R1,VBLRECL2     Load the VB LRECL
         SH    R1,=H'4'        -4
         STH   R1,#RECIN       Saved as a PL/I type string
* See if a 2nd record is here.
* We will use the RECOUT Field temporarily.
* (I should have used Get Locate... Next version ...)
*
INLOOP   GET   $$PARM,VBLRECL1 Try for 2nd Record
         LH    R1,VBLRECL1     Load the VB LRECL
         SH    R1,=H'4'        -4
         STH   R1,#RECOUT      Saved as a PL/I type string
* If we get here, a second or subsequent record was read.  We need
* to concatenate it to the end of the current Parm.
*
* We need to set R14 to From Address, R0 = To Address
* and R15 and R1 to the length to move.
         LA   R14,RECOUT       Get the address of the Data
         LA   R0,RECIN         Get TO Area Address
         AH   R0,#RECIN        Current length. We now point to END
         LH   R15,#RECOUT      Get DATA LENGTH
         LR   R1,R15           TO SOURCE & DEST LENGTH REGS
         MVCL 0,14             COPY THE DATA
         LH   R15,#RECOUT      Get DATA LENGTH
         AH   R15,#RECIN       Current length. We now point to END
         STH  R15,#RECIN       Set new parameter length.
         B    INLOOP           Try for 3rd etc record.
*
PARMEOD  DS    0H              Got End of File on $$PARM
*
         MVC   OPENWRK(OPENINS),OPENIN  Copy Open Initialised List
         CLOSE ($$PARM),MF=(E,OPENWRK)  Close the input control file
         B     GOTPARM
*
*
GETPARM  DS    0H
*
         DEVTYPE =CL8'$$PARM',CALLAREA See if $$PARM DD file as well.
         LTR   R15,R15
         BNZ   NOPARMDD
         PRINT NOGEN
         WTO   'ParmCntl: Parmeter Field used - $$PARM File Ignored.', *
               ROUTCDE=(2,11)
         PRINT GEN
NOPARMDD DS    0H
*
* Copy the PARM field into working storage.
*
         LH    R14,#PARM       Get Parameter Length
         CH    R14,=AL2(3000)  Check if Parameter too long
         BL    PARMLOK         Parm Length OK
         PRINT NOGEN
         WTO   'ParmCntl: Parameter Too Long (>3000 Bytes)  ',         *
               ROUTCDE=(2,11)
         PRINT GEN
         B     DISPLHLP
*
*
PARMLOK  DS   0H
*
* We will copy the Parameter Field to a PL/I style string. Then
* we can examine it for LF or <p> characters.
*
* Naturally, we had better copy more than 100 characters
* (if necessary)!!!!
*
* Prepare for an MVCL.
*
* We need to set R14 to From Address, R0 = To Address
* and R15 and R1 to the length to move.
         LA   R14,PARM         Get the address of the Data
         LA   R0,RECIN         Get TO Area Address
         LH   R15,#PARM        Get DATA LENGTH
         LR   R1,R15           TO SOURCE & DEST LENGTH REGS
         MVCL 0,14             COPY THE DATA
         LH   R15,#PARM        Get DATA LENGTH
         STH  R15,#RECIN       Set the Data Length.
*
GOTPARM  DS    0H
         MVC   TASKNAME,=CL8'        '
         MVC   DDN,=CL8'        '
TPGM     CLC   =C'PGM=',RECIN  Test Program Name Keyword
         BE    FINDCOM         Find the terminating comma
         CLC   =C'DDN=',RECIN  Test DDNAME Name Keyword
         BE    FINDCOM         Find the terminating comma
         CLC   =C'PARM=''',RECIN  Test Parameter Keyword
         BNE   OPENCNTL        Go start copying to $$CNTL file.
FINDQUOT DS    0H
* Get the Program Name or the DDNAME from the Parameter Field
         LA    R1,RECIN+7     Point past the PARM='
         LH    R15,#RECIN     Get current length of the string
         AR    R15,R1         R15 points to end of string
         LA    R14,1          Set R14 to the Increment for the BXLE
QUOTLUP  CLI   0(R1),C''''    Is this a ' character?
         BE    QUOTFND        YES
         BXLE  R1,R14,QUOTLUP ROUND LOOP
         WTO   'ParmCntl: No Quote ('') after PARM=''',                *
               ROUTCDE=(2,11)
         B     DISPLHLP       Display the Help
FINDCOM  DS    0H
* Get the Program Name or the DDNAME from the Parameter Field
         LA    R1,RECIN       LOAD R1 WITH ADDRESS OF STRING
         LH    R15,#RECIN     Get current length of the string
         AR    R15,R1         R15 points to end of string
         LA    R14,1          Set R14 to the Increment for the BXLE
COMMALUP CLI   0(R1),C','     Is this a LF character?
         BE    COMMAFND       YES
         BXLE  R1,R14,COMMALUP ROUND LOOP
         WTO   'ParmCntl: No Comma (,) after PGM= or DDN= Parameter',  *
               ROUTCDE=(2,11)
         B     DISPLHLP       Display the Help
*
QUOTFND  DS    0H
         LA    R1,1(R1)       Skip over ', point to the comma after
COMMAFND DS    0H
* R1 points to the ',' or the "'" character.
* And R15 points to the last byte in the string.
*
* Copy up to the C',' to the output area, then SUBSTR the data.
*
* We have:
* ____________________________________________________________
* |     |                                                    |
* | len | PGM=xyz,                                           |
* |_____|____________________________________________________|
* |     |        |                                           |
* #Recin| Recin  R1                                         R15
*                                                       (don't need)
         MVC   RECOUT(12),=CL12' '
         LR    R12,R1          Save R1 - the pointer to the ','
         LR    R8,R1           Calc Length to Move
         LA    R14,RECIN       Get Address of Recin
         SR    R8,R14          Length, including the comma
         CLC   =C'PARM=''',RECIN  Test Parameter Keyword
         BNE   ISDDN           Must be DDN= or PGM=
         SH    R8,=H'8'        We don't want the comma, and the EX
         EX    R8,MVCPARM       needs 1 less byte
         LA    R8,1(R8)
         STH   R8,#PARMPP      Problem Program Parameter.
MVCPARM  MVC   PARMPP(*-*),RECIN+6 Move the PARM= parameter
         LA    R14,1(R14)      Bump past the Quote.
         CLI   0(R14),C''''
         BNE   SUBSTR02
         PRINT NOGEN
         WTO   'Parmcntl: Implementation Restriction: Double Quotes Not*
                Allowed',                                              *
               ROUTCDE=(2,11)
         PRINT GEN
         B     DISPLHLP
*
ISDDN    SH    R8,=H'5'        We don't want the comma, and the EX
         EX    R8,MVCFLD        needs 1 less byte
MVCFLD   MVC   RECOUT(*-*),RECIN+4 Move the PGM= or the DDN=
*
* Now move the PGM or the DDN to the correct field.
         CLC   =C'PGM=',RECIN
         BNE   TDDN2
         MVC   TASKNAME,RECOUT
         B     SUBSTR02
TDDN2    CLC   =C'DDN=',RECIN
         BE    MOVEDDN
* ?????
         WTO   'ParmCntl: Catastrophic Error.  Impossible Happened ',  *
               ROUTCDE=(2,11)
         B     DISPLHLP       Display the Help
MOVEDDN  MVC   DDN,RECOUT
*
* Now we need to copy from the OLD R1 (+ a bit) to RECIN.
* Remember, R1 pointed to the comma,
* and that we saved it in R12.
*
SUBSTR02 LR    R14,R12         Load R14 with the saved pntr.
         LA    R14,1(R14)      Bump past the comma.
         LA    R1,RECIN Address of start of string
         AH    R1,#RECIN       Point to end of current string
         LR    R15,R1
         SR    R15,R14         New length of string
         STH   R15,#RECIN      Stored
         LR    R1,R15          Make lengths equal
         LA    R0,RECIN        Get the TO address again
         MVCL  0,14            Do the SUBSTR (copy string down)
*
         B     TPGM            Test if DDN=, really (could be 2 PGM=)?
*
*
*
* OK, Now open the $$CNTL DD Card, preparing to write to it.
*
*        OPEN ($$CNTL,OUTPUT)
OPENCNTL DS    0H
         MVC   $$CNTL($$CNTLCL),$$CNTLC  Copy DCB to gotten storage
         MVC   OPENWRK(OPENOUTS),OPENOUT Copy Open Initialised List
         LA    R10,$$CNTL      Get address of Output DCB
         USING IHADCB,R10
         CLC   =CL8' ',DDN     Is there an over-riding DDNAME?
         BE    NODDN
         MVC   DCBDDNAM,DDN    Change it from $$CNTL
NODDN    DS    0H
         OPEN  ($$CNTL,(OUTPUT)),MF=(E,OPENWRK)
         TM    DCBOFLGS,DCBOFOPN OPEN okay ?
         BZ    OPENERR         If OPEN failed, go to ABEND
*
* Scan down the data to be written looking for a X'25' or a < (<p>)
* I am going to go round a loop, sort of SUBSTRINGing the data
* when I output a record, rather than keeping pointers to where I am.
*
FINDLF   CLC   =H'0',#RECIN   Test if a null or empty string.
         BE    ENDPROG        Just exit.
         LA    R1,RECIN       LOAD R1 WITH ADDRESS OF STRING
         LH    R15,#RECIN     Get current length of the string
         AR    R15,R1         R15 points to end of string
         LA    R14,1          Set R14 to the Increment for the BXLE
BXLELOOP CLI   0(R1),X'25'    Is this a LF character?
         BE    LFFND          YES
         CLI   0(R1),C'<'     Is this a < character? Maybe <p>?
         BE    OPENBRAC       YES
BXLEREAL BXLE  R1,R14,BXLELOOP ROUND LOOP
* Just Move record to Output Area
         B     WRITEALL        DIDN'T FIND IT -> OUT
*
OPENBRAC DS    0H
* R1 points to the < character.
         CLC   =C'p>',1(R1)
         BE    ENDBRAC
         CLC   =C'P>',1(R1)
         BE    ENDBRAC
         B     BXLEREAL
*
LFFND    DS    0H
* R1 points to the LF character.
*
ENDBRAC  DS    0H
* R1 points to the < character (of the <p>)
*
* And so R1 either points to the < or the x'25'.
* And R15 points to the last byte in the string.
*
*
* Copy up to the x'25' or <p> to the output area, then SUBSTR the data.
*
* We have:
* ____________________________________________________________
* |     |                                                    |
* | len | PASSWORD=xyz,   <p>                                |
* |_____|____________________________________________________|
* |     |                 |                                  |
* #Recin| Recin           R1                                R15
*                                                       (don't need)
*
* We need to set R14 to From Address, R0 = To Address
* and R15 and R1 to the length to move.
         LR    R12,R1          Save R1 (We could recalc it later).
         LA    R0,RECOUT       Get TO Area Address
         LA    R14,RECIN       Get the start Address of the Data
         LR    R15,R1          Calculate the DATA LENGTH
         SR    R15,R14         Calc Amount to move
         LR    R1,R15          TO SOURCE & DEST LENGTH REGS
         STH   R1,#RECOUT      Set the string length, too.
         CH    R1,=AL2(L'RECOUT) Just check it isn't too big
         BH    RECBIG
         MVCL  0,14            Copy from "recin" to "recout"
*
* Now we need to copy from the OLD R1 (+ a bit) to RECIN.
* Remember, R1 pointed to the X'25', or the start of the <p>,
* and that we saved it in R12.
*
         LR    R14,R12         Load R14 with the saved pntr.
         CLI   0(R14),X'25'    LF Character?
         BNE   ADD3
         LA    R14,1(R14)      Bump past the X'25'
         B     SUBSTR01        Shorten the string
ADD3     LA    R14,3(R14)      Bump past the <p>
SUBSTR01 LA    R1,RECIN Address of start of string
         AH    R1,#RECIN       Point to end of current string
         LR    R15,R1
         SR    R15,R14         New length of string
         STH   R15,#RECIN      Stored
         LR    R1,R15          Make lengths equal
         LA    R0,RECIN        Get the TO address again
         MVCL  0,14            Do the SUBSTR (copy string down)
*
         LA    R1,#RECOUT
         BAL   R12,WRITEREC
         B     FINDLF          Find the next LF or <p>
*
WRITEALL DS    0H              Here, the LF or <p> wasn't found,
*                              so, write the entire parameter out.
         LA    R1,#RECIN       Address the copy of the input parameter
         BAL   R12,WRITEREC
         B     ENDPROG         Close files, and return to OS.
*
WRITEREC DS    0H
*
* Test if VB or FB, and write the data accordingly.
*
         TM    DCBRECFM,DCBRECV VARIABLE RECORD FORMAT ?
         BNO   TESTFB          Must be VB or FB
*
* Here it is VB.
*
* R1 points to the length field of the data to go out.
* The data follows immediately after, and we have deliberately
* allocated two bytes before the string to be used
* as the Variable Blocked file record length, which
* we will use.
*
         LH    R14,0(R1)       Get the STRING length.
         LA    R14,4(R14)      Add 4 for VB length.
         LR    R15,R1          Point to record length again
         SH    R15,=H'2'       We need to store R14 there.
         STH   R14,0(R15)      Record length stored
         SR    R14,R14         Set next two bytes to zero.
         STH   R14,0(R1)       Done
         LA    R1,$$CNTL
         LR    R2,R15
*         DC    H'0'
         PUT   $$CNTL,0(R15)   Put the first record directly from area
         BR    R12             Back to caller.
*
TESTFB   TM    DCBRECFM,DCBRECF Fixed RECORD FORMAT ?
         BNO   BADRECFM        Must be VB or FB - Error, Abend
* Here it is F or FB.
*
* R1 points to the length field of the data to go out.
* The data follows immediately after.
*
* For FB files, we need to make sure that the last record
* is padded out with blanks.  So, the easiest thing to do
* is to put 80 blanks on the end of the data to go out
* (and that assumes the LRECL is 80...)
*
         LH    R14,0(R1)       Get the STRING length.
         LA    R15,2(R1,R14)   Point to end of the string
         ST    R15,AENDBYTE    Save to compare in output loop.
         MVC   0(100,R15),=CL100' ' Copy blanks to end.
*
* Now loop around outputting the FB records.
*
         LA    R2,2(R1)        Point to record to go out
WRITEFB  PUT   $$CNTL,0(R2)    Put the record directly from area
         AH    R2,DCBLRECL     Add the record length
         C     R2,AENDBYTE
         BL    WRITEFB
         BR    R12             Back to caller.
*
*
*
ENDPROG  DS    0H              Got End of File on $$CNTL
         MVC   OPENWRK(OPENOUTS),OPENOUT Copy Open Initialised List
         CLOSE ($$CNTL),MF=(E,OPENWRK)  Close the input control file
*
* Version 2 - added PGM= and DDN=.  So, check if we XCTL to a
* another program.  Or Link, or Attach, or something!!!!
*
         CLC   TASKNAME,=CL8' '
         LA    R1,TASKNAME
*     DC  H'0'
         BE    NOLINK
         B     ATTACH
*
***********************************************************
*
* We could link here.  It works for IEBCOPY.  However, for whatever
* reason (flip of the coin?) I decided to ATTACH.
* With ATTACH, APF is used.
*
         LA    R1,ATASKPRM
         LA    R7,TASKNAME
         LINK  EPLOC=TASKNAME,PARAM=(NULLPARM),MF=(E,CALLAREA),        *
               SF=(E,CALLAREA+12),VL=1,DCB=0
         LR    R10,R15   Get Return Code
         B     BADRETN
*
***********************************************************
*
*
*
* NOW ATTACH PROBLEM PROGRAM.                                     75311
*
* Note:  We could set up the SCT so that SMF records the "correct"
*        program.  Wait for user feedback.
*
*
ATTACH   LA    R1,#PARMPP      Get Address of User Parameters
         LH    R15,#PARMPP     Put some banls at the end
         LA    R15,2(R1,R15)   Point to end of string
         MVC   0(20,R15),BLANKS
*     DC    H'0'
*
         ST    R1,ATASKPRM     Store it
         OI    ATASKPRM,X'80'  Set Hi Bit                         75311
         LA    R1,ATASKPRM     Set R1 for Attach                  75311
         XC    TASKECB,TASKECB CLEAR ECB                          75311
         MVC   ATTACHL(ATTACHLN),ATTACHW INITIALISE ATTACH
*                              BECAUSE 'E' FORM DOESN'T INITIALISE
*                              ALL THE BITS.
         ATTACH EPLOC=TASKNAME,ECB=TASKECB,SF=(E,ATTACHL),             *
               RSAPF=YES,                                              *
               JSTCB=YES,MF=(E,(1))                               76200
         LR    R5,R1
         WAIT  ECB=TASKECB
         MVC   TASKRETN(1),X'1D'(R5) SHIFT IN ABEND CODE
         MVC   TASKRETN+1(3),TASKECB+1 AND RETURN CODE
* NOW I'M BACK IN CONTROL,I.E THE SUBTASK FINISHED.
*    WHAT AM I TO DO NOW ?
         ST    R5,CALLAREA
         DETACH CALLAREA
TABEND   TM    TASKRETN,128    NORMAL RETURN FOR TASK?            75003
         BNO   TESTGOBK   YES,SO TEST GOBACK TO OS INDIC          76200
         IC    R7,TASKRETN     SET R7 = ABEND CODE
         L     R1,TASKRETN     LOAD TASKRETN TO REG 1
         ABEND (1)
*        N     R1,=X'00FFFFFF' LEAVE RETURN CODE
TESTGOBK EQU   *
           SPACE 3
RETNOS   EQU   *
         LH    R10,TASKRETN+2  LOAD 2ND 2 BYTES OF RETURN CODE
BADRETN  EQU   *
         L     R7,4(R13)       LOAD R7 WITH PREVIOUS SAVEAREA ADDRESS
         LR    R1,R13          LOAD R1 WITH THE ADDRESS OF GOTTEN
*                              STORAGE
         FREEMAIN R,LV=CONEND-CONSTART,A=(1)
         LR    R13,R7          SET R13=OLD SAVE
         LR    R15,R10         SET UP RETURN CODE
         L     R14,12(13)      AND RETURN ADDRESS
         LM    R0,R12,20(R13)  AND OLD REGISTERS
         BR    R14             AND BACK WE GO
*
.NOATT   ANOP
NOLINK   L     R7,4(R13)       LOAD R7 WITH PREVIOUS SAVEAREA ADDRESS
         LR    R1,R13          LOAD R1 WITH THE ADDRESS OF GOTTEN
*                              STORAGE
         FREEMAIN R,LV=CONEND-CONSTART,A=(1)
         LR    R13,R7          SET R13=OLD SAVE
         LR    R15,R10         SET UP RETURN CODE
         L     R14,12(13)      AND RETURN ADDRESS
         LM    R0,R12,20(R13)  AND OLD REGISTERS
         SR    R15,R15
         BR    R14             AND BACK WE GO
*
*
*
         PRINT NOGEN
*
DISPLHLP WTO   'ParmCntl: Parameter or data in the $$PARM File',       *
               ROUTCDE=(2,11)
         WTO   'ParmCntl: Is Saved to an FB or VB Control File,',      *
               ROUTCDE=(2,11)
         WTO   'ParmCntl: allocated with the $$CNTL DDname,    ',      *
               ROUTCDE=(2,11)
         WTO   'ParmCntl: unless over-ridden with the DDN=.    ',      *
               ROUTCDE=(2,11)
         WTO   'ParmCntl: New Lines or card images are created ',      *
               ROUTCDE=(2,11)
         WTO   'ParmCntl: when a LF or <p> characters are found.',     *
               ROUTCDE=(2,11)
         ABEND 16,DUMP
*
OPENERR  DS    0H
         WTO   'ParmCntl: Open of $$CNTL File Failed',ROUTCDE=(2,11)
         ABEND 16,DUMP
*
MUSTBEVB WTO   'ParmCntl: $$PARM File must be V or VB.',               *
               ROUTCDE=(2,11)
         ABEND 16,DUMP
*
BADRECFM WTO   'ParmCntl: $$CNTL File must be V, VB, F or FB    ',     *
               ROUTCDE=(2,11)
         ABEND 16,DUMP
RECBIG   WTO   'ParmCntl: Output Record > 255 Chars - Too Big   ',     *
               ROUTCDE=(2,11)
         ABEND 16,DUMP
         PRINT GEN
*
*
*
$$PARMC  DCB   DDNAME=$$PARM,DSORG=PS,MACRF=GM,EODAD=PARMEOD
$$PARMCL EQU   *-$$PARMC
$$CNTLC  DCB   DDNAME=$$CNTL,DSORG=PS,MACRF=PM
$$CNTLCL EQU   *-$$CNTLC
*
OPENIN   OPEN  (,(INPUT)),MF=L
OPENINS  EQU   *-OPENIN
OPENOUT  OPEN  (,(OUTPUT)),MF=L
OPENOUTS EQU   *-OPENOUT
*
ATTACHW  ATTACH EP=DUMMY,SF=L
*
NULLPARM DC    H'0'         Zero Length (Null) Parm
*
BLANKS   DC    CL200' '     Some blanks for us.
*
         LTORG
ZAPS     DC    28S(*)
         TITLE 'COMMUNICATION AREA FOR MONITOR AND SCHEDULER'
*
* This is the input Parm in the EXEC PGM=ParmCntl
*
PARMIN   DSECT
#PARM    DS  H
PARM     DS  CL3000
*
*
* General Work Area.  This is copied into "gotten" storage for
*  re-enentrancy.
*
CONSTART DSECT
SAVEAREA DS    18F
ATTACHL  ATTACH EP=DUMMY,SF=L
ATTACHLN EQU   *-ATTACHL
OPENWRK  OPEN  (,),MF=L
CALLAREA DS    10F             WORK AREA ONLY FOR PARAMETERS BASICALLY
         DS    0F
OPENLIST DS    A(*-*),A        OPEN/CLOSE parameter list
*
TASKNAME DS    CL8
DDN      DS    CL8
APARM    DS    A
ATASKPRM DS    A               ADDRESS OF GOTTEN STORAGE FOR PARAMETERS
TASKSSI  DC    CL4' '          SSI OF THE SUB-TASK
TASKRETN DC    F'0'            RETURN CODE FROM TASK
TASKECB  DC    F'0'            EVENT CONTROL BLOCK FOR TASK
TASKIND  DC    C' '            SET TO 1 AFTER SCHEDULER CALLED
*                              THE FIRST TIME.
AENDBYTE DS    A               Points to last byte to be written (FB)
*
$$PARM   DCB   DDNAME=$$PARM,DSORG=PS,MACRF=GM,EODAD=PARMEOD
$$CNTL   DCB   DDNAME=$$CNTL,DSORG=PS,MACRF=PM
*
* Here is the data area to be written to the $$CNTL file.
*
         DS    0D
EYEBALL2 DC    C'#RECOUT  #RECOUT  '
VBLRECL1 DS    H
#RECOUT  DS    H               Length of Output Record to $$CNTL DD.
RECOUT   DS    CL255           Record to go out.
SPACEZZ  DS    CL100
         DS    0D
EYEBALLP DC    C'#PARMxxxx#PARMxxxx'
#PARMPP  DS    H               Length of Parm from the PARM=
PARMPP   DS    CL255           Used when PP is Attached.
*
* Here is the data from the Program Parameter, or from file $$PARM.
*
         DS    0D
EYEBALL1 DC    C'#RECIN   #RECIN   '
VBLRECL2 DS    H               For VB Files
#RECIN   DS    H               Length of Input Record from $$PARM DD,
RECIN    DS    CL3004          or Long Parameter Area
*
CONEND   EQU   *
         SPACE 3
*
         DCBD  DSORG=PS
*
         END
