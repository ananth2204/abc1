EXECLONG   TITLE 'Attach User Module Using Long Parameter'
*
* COPYRIGHT Clement Clarke, CLARKE COMPUTER SOFTWARE 2010
* ALL RIGHTS RESERVED
* ANY USE OF THIS CODE MUST RETAIN THE ABOVE COPYRIGHT NOTICE
*
*
* This program is provided free of charge, under the Apache Licence,
* for Hercules and "Hobbyist" licences.
*
* However, you are invited to contribute if
* you find this software useful. And this will assist with the
* development of new software.
*
* There is no warranty - source code is provided so that the program
* may be maintained.
*
* Note: You may not convert this program into a paid product, and all
*       source code changes must be made available for everyone.
*
* My email is clemclarke@gmail.com
*
*
* This a stand alone program.  It is inspired by Jol,
*        the Universal Command Language for all computers.
*
* Note: Versions of Jol exist for Z/OS, VSE, Windows, Linux, OS/2,
*       and soon Macs.
*
*
*
*                   J             000000            L
*                   J            0      0           L
*                   J           0        0          L
*                   J          0          0         L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*                   J         0            0        L
*        J          J         0            0        L
*         J        J           0          0         L
*          J      J             0        0          L
*           J    J               0      0           L
*            JJJJ                 000000            LLLLLLLLLLL
           SPACE 3
EXECLONG CSECT                                                    86211
*
*     This program simply attaches a program after setting up
*     a long parameter from the $$PARM DD card.
*
*     If the Data Set is a VB data set, then the parm is copied as is.
*
* APF facilities are used.                                        75311
*
* We jump into super-visor mode,
* and use the special ATTACH to attach the problem                75311
* program as a new job-step, and allow APF to work as usual.      75311
*
* The program currently uses a $$PARM dd card, and a parameter    10245
*   which specifies the program to be executed, in the form       10245
*   PARM='PGM=pgm-name'.                                          10245
*
* Note that other parameters will be added to the program as it   10245
*   is developed further.                                         10245
*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
EXECLON  SAVE   (14,12),,EXECLONG.COPYRIGHT.CLEM.CLARKE;COMPILED.ON.&SY+
               SDATE.:&SYSTIME
         USING EXECLONG,R11    ADDRESS OURSELVES
         LR    R11,R15         AND FIX UP BASE REGISTER
         LR    R9,R1           SAVE R1 FOR A WHILE
         L     R0,=A(CONEND-CONSTART)  LOAD R0 WITH LENGTH OF CONSTANT
*                                      AREA + LENGTH SAVE AREA
         GETMAIN R,LV=(0)      GET THE REQUIRED STORAGE
         ST    R13,4(R1)
         ST    R1,8(R13)
         USING SAVEAREA,R13
         LR    R13,R1          LINKAGE SET UP NOW
         SPACE 3
         MVC   TASKLABL,=CL8'        '
         SPACE 3
         ST    R9,APARM        STORE ORIGINAL R1 IN GOTTEN CORE
         LA    R1,PARML
         ST    R1,ATASKPRM
         SR    R7,R7           DOUBLE ABEND INDICATOR SO IF THE
*                              SCHEDULER ABENDS,THEN WE WON'T RELOAD
*                              THE SCHEDULER AND LOOP FOREVER
ATTACH   DS    0H
         XC    TASKECB,TASKECB
         L     R15,0(R9)       POINT TO PARAMETER AREA(OS)        75128
         USING PARMIN,R15                                         10245
         CLC   =H'0',#PARM     IS THERE A PARAMETER?              10245
         BNE   TPGM            Test for PGM=
         WTO   'Execlong: No Parameter Specified',ROUTCDE=(2,11)
         B     DISPLHLP
*
TPGM     CLC   =C'PGM=',PARM   Test Program Name Keyword
         BE    TPGM2
DISPLHLP DS    0H
         PRINT NOGEN
         WTO   'Execlong: Parameter Must Be PGM=program-name',         *
               ROUTCDE=(2,11)
         WTO   'Execlong: Parameter for the program must be in',       *
               ROUTCDE=(2,11)
         WTO   'Execlong: a VB Data Set with allocated with a ',       *
               ROUTCDE=(2,11)
         WTO   'Execlong: DDNAME of $$PARM',                           *
               ROUTCDE=(2,11)
         ABEND 16,DUMP
         PRINT GEN
TPGM2    DS    0H
         MVC   TASKNAME,=CL8'        '
* Get the Program Name from the Parameter Field
         LH    R14,#PARM       Get Parameter Length
         SH    R14,=AL2(4+1)   4 for PGM=, 1 for EX Instruction
         EX    R14,MVCPARM
MVCPARM  MVC   TASKNAME(*-*),PARM+4
*
* OK, Now get the long Parameter from the $$PARM DD Card
*
*        OPEN ($$PARM,INPUT)   Non Reentrant Open
OPEN     DS    0H              Do a Reentrant Open
         MVC   $$PARM($$PARMCL),$$PARMC  Copy DCB to gotten storage
         MVC   OPENWRK(OPENINS),OPENIN  Copy Open Inirialised List
         OPEN  ($$PARM,(INPUT)),MF=(E,OPENWRK)
*
         LA    R1,$$PARM       Get address of Input DCB
         USING IHADCB,R1
         TM    DCBOFLGS,DCBOFOPN OPEN okay ?
         BZ    OPENERR         If OPEN failed, go to ABEND
         TM    DCBRECFM,DCBRECV VARIABLE RECORD FORMAT ?
         BNO   MUSTBEVB        NO, Must be VB (for version 1)
         DROP  R1
*
         GET   $$PARM,#FIRSTRC Get the first record directly into area
         LH    R1,#FIRSTRC     Load the VB LRECL
         SH    R1,=H'4'        -4
         STH   R1,#PARML       Saved.  It is now correct for ATTACH
* See if a 2nd record is here.
INLOOP   GET   $$PARM,#RECIN   Try for 2nd Record
* If we get here, a second or subsequent record was read.  We need
* to concatenate it to the end of the current Parm.
*
* We need to set R14 to From Address, R0 = To Address
* and R15 and R1 to the length to move.
         LA   R14,RECIN        Get the address of the Data
         LA   R0,PARML         Get TO Area Address
         AH   R0,#PARML        Current length. We now point to END
         LH   R15,#RECIN       Get DATA LENGTH
         LR   R1,R15           TO SOURCE & DEST LENGTH REGS
         MVCL 0,14             COPY THE DATA
         LH   R15,#RECIN       Get DATA LENGTH
         AH   R15,#PARML       Current length. We now point to END
         SH   R15,=H'4'        -4
         STH  R15,#PARML       Set new parameter length.
         B    INLOOP           Try for 3rd etc record.
*
PARMEOD  DS    0H              Got End of File on $$PARM
         MVC   OPENWRK(OPENINS),OPENIN  Copy Open Initialised List
         CLOSE ($$PARM),MF=(E,OPENWRK)  Close the input control file
*
*
* Now Prepare for Attach to Problem Program
*
         B     ATTACH2         Testing Code - Could be used
*                              for Non-Authorised Code
         LINK  EP=TASKNAME,PARAM=(#PARML),MF=(E,CALLAREA)
         B     ATTACH2
ATTACH2  DS    0H                                                 75128
         AGO   .SINGL
* This code would be used if you were going to attach more
* than one program.  For example, Jol will execute two or more
* programs in one job step sometimes.
         MODESET MODE=SUP      THIS KEEPS ME AUTHORISED
         MODESET KEY=ZERO
         SPACE 1
.SINGL   ANOP
* FIND MY JSCB
         AGO   .SINGL2
         L     R1,X'21C'       PSATOLD-PSA (VS2 MACRO 'IHAPSA')   75311
         L     R6,X'B4'(R1)    POINT TO MASTER JSCB               75311
         NI    236(R6),254     TURN OFF AUTHORISE BIT             75311
.SINGL2  ANOP
* NOW ATTACH PROBLEM PROGRAM.                                     75311
*
* Note:  We could set up the SCT so that SMF records the "correct"
*        program.  Wait for user feedback.
*
*
         LA    R1,#PARML       Get Address of long parameter
         ST    R1,ATASKPRM     Store it
         OI    ATASKPRM,X'80'  Set Hi Bit                         75311
         LA    R1,ATASKPRM     Set R1 for Attach                  75311
         XC    TASKECB,TASKECB CLEAR ECB                          75311
         MVC   ATTACHL(ATTACHLN),ATTACHW INITIALISE ATTACH
*                              BECAUSE 'E' FORM DOESN'T INITIALISE
*                              ALL THE BITS.
         ATTACH EPLOC=TASKNAME,ECB=TASKECB,SF=(E,ATTACHL),             *
               RSAPF=YES,                                              *
               JSTCB=YES,MF=(E,(1))                               76200
         LR    R5,R1
         WAIT  ECB=TASKECB
         AGO   .SINGL3
         OI    236(R6),1       TURN ON  AUTHORISE BIT
         MODESET KEY=NZERO
.SINGL3  ANOP
         MVC   TASKRETN(1),X'1D'(R5) SHIFT IN ABEND CODE
         MVC   TASKRETN+1(3),TASKECB+1 AND RETURN CODE
* NOW I'M BACK IN CONTROL,I.E THE SUBTASK FINISHED.
*    WHAT AM I TO DO NOW ?
         ST    R5,CALLAREA
         DETACH CALLAREA
TABEND   TM    TASKRETN,128    NORMAL RETURN FOR TASK?            75003
         BNO   TESTGOBK   YES,SO TEST GOBACK TO OS INDIC          76200
         IC    R7,TASKRETN     SET R7 = ABEND CODE
         L     R1,TASKRETN     LOAD TASKRETN TO REG 1
         ABEND (1)
*        N     R1,=X'00FFFFFF' LEAVE RETURN CODE
TESTGOBK EQU   *
         SPACE 3
RETNOS   EQU   *
         LH    R10,TASKRETN+2  LOAD 2ND 2 BYTES OF RETURN CODE
BADRETN  EQU   *
         L     R7,4(R13)       LOAD R7 WITH PREVIOUS SAVEAREA ADDRESS
         LR    R1,R13          LOAD R1 WITH THE ADDRESS OF GOTTEN
*                              STORAGE
         FREEMAIN R,LV=CONEND-CONSTART,A=(1)
         LR    R13,R7          SET R13=OLD SAVE
         LR    R15,R10         SET UP RETURN CODE
         L     R14,12(13)      AND RETURN ADDRESS
         LM    R0,R12,20(R13)  AND OLD REGISTERS
         BR    R14             AND BACK WE GO
*
*
*
SETRET   LA    R10,4000                                            DASD
         B     BADRETN
ATTACHW  ATTACH EP=DUMMY,SF=L
ABNDMSG  WTO  'JOL MONITOR ABEND SXXX-YYY: JOB TERMINATED',            .
               MF=L,ROUTCDE=(1,11)
ABNDMSGL EQU   *-ABNDMSG
*
OPENERR  DS    0H
         WTO   'Execlong: Open of $$PARM File Failed',ROUTCDE=(2,11)
         ABEND 16,DUMP
*
MUSTBEVB WTO   'Execlong: $$PARM File must be V or VB (Variable)',     *
               ROUTCDE=(2,11)
         ABEND 16,DUMP
$$PARMC  DCB   DDNAME=$$PARM,DSORG=PS,MACRF=GM,EODAD=PARMEOD
$$PARMCL EQU   *-$$PARMC
OPENIN   OPEN  (,(INPUT)),MF=L
OPENINS  EQU   *-OPENIN
*
ZAPS     DC    28S(*)
         LTORG
*
         LTORG
         TITLE 'COMMUNICATION AREA FOR MONITOR AND SCHEDULER'
*
* This is the input Parm in the EXEC PGM=EXECLONG
*
PARMIN   DSECT
#PARM    DS  H
PARM     DS  CL100
*
*
* General Work Area.  This is copied into "gotten" storage for
*  renentrancy.
*
CONSTART DSECT
SAVEAREA DS    18F
ATTACHL  ATTACH EP=DUMMY,SF=L
ATTACHLN EQU   *-ATTACHL
HEXCONV  DS    XL9,0F
MSGAREA  DS    XL256
PARMAREA DS    0D
TASKLABL DC    CL8' '          STEP-NAME (I.E LABEL IN JOL TERMINOLOGY)
TASKNAME DC    CL8' '          NAME OF PROGRAM BEING EXECUTED AS A
*                            SUBTASK
APARM    DS    A
ATASKPRM DS    A               ADDRESS OF GOTTEN STORAGE FOR PARAMETERS
TASKSSI  DC    CL4' '          SSI OF THE SUB-TASK
TASKRETN DC    F'0'            RETURN CODE FROM TASK
TASKECB  DC    F'0'            EVENT CONTROL BLOCK FOR TASK
TASKIND  DC    C' '            SET TO 1 AFTER SCHEDULER CALLED
*                              THE FIRST TIME.
*                              INSTRUCTIONS.
DBL      DS    D               WORK AREA ONLY
CALLAREA DS    10F             WORK AREA ONLY FOR PARAMETERS BASICALLY
         DS    0F
OPENLIST DS    A(*-*),A        OPEN/CLOSE parameter list
OPENWRK  OPEN  (,),MF=L
*
$$PARM   DCB   DDNAME=$$PARM,DSORG=PS,MACRF=GM,EODAD=PARMEOD
*              SYNAD=QSAMSYND
#FIRSTRC DS    H               We read the first record in here, and
*                              adjust the RDW and save it in #PARML.
#PARML   DS    H               Length of Parameter in following field.
PARML    DS    CL3004          Long Parameter Area
#RECIN   DS    H               Length of Input Record from $$PARM DD.
         DS    H               Necessary for VB Records
RECIN    DS    CL3004          Long Parameter Area
CONEND   EQU   *
         SPACE 3
*
         DCBD  DSORG=PS
*
         END
