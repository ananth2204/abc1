POSSIBLE ERRORS WITH "HALFWORD IMMEDIATE" INSTRUCTIONS
    (fixed by Joe Reichman)

(Negative operand of "halfword-immediate" instructions.)

If the data operand of a halfword instruction has the high-order
halfword bit on, in other words, the X'8000' bit, then the ASMA90
assembler produces the following error messages:  (code level 4)
The assembler "thinks" that the operand is a negative number.

Here is some source code to test this.....

LHITEST  CSECT
         YREGS
         LHI   R3,X'FFF4'
         LHI   R3,X'7FF4'
         LHI   R3,X'8000'
         LHI   R4,X'F'
         END

Assembling this code with the High Level Assembler produces
the following assembled output:  (if you haven't suppressed
return codes of 4 with the assembler option of FLAG(5).)

000000 A738 FFF4            0FFF4    21          LHI   R3,X'FFF4'
** ASMA320W Immediate field operand may have incorrect sign or magnitude
** ASMA435I Record 3 in SBGOLOB.B.ASM(LHITEST) on volume: DATA05
000004 A738 7FF4            07FF4    22          LHI   R3,X'7FF4'
000008 A738 8000            08000    23          LHI   R3,X'8000'
** ASMA320W Immediate field operand may have incorrect sign or magnitude
** ASMA435I Record 5 in SBGOLOB.B.ASM(LHITEST) on volume: DATA05
00000C A748 000F            0000F    24          LHI   R4,X'F'
                                     25          END

Therefore, in order to avoid this assembly error in the disassembled
code, this disassembler now produces the following result:

LHITEST  CSECT
         LHI   R3,-X'000C'                          000000 A738FFF4
         LHI   R3,X'7FF4'                           000004 A7387FF4
         LHI   R3,-X'8000'                          000008 A7388000
         LHI   R4,X'000F'                           00000C A748000F

That is one of the fixes to this disassembler from Joe Reichman.

By contrast, the IBM HLASM Toolkit disassembler ASMDASM (a pay product)
produces the following disassembled code for the same load module.


                                        LHITEST  CSECT
00000000 A738 FFF4                               LHI   R3,-12
00000004 A738 7FF4                               LHI   R3,32756
00000008 A738 8000                               LHI   R3,-32768
0000000C A748 000F                               LHI   R4,15
                                                 ASMDREG
                                                 END

You see that the object code generated by both disassemblers is
now the same, so that the re-assembled disassembled code comes out
the same, as well.  The point is to avoid a "code 4" assembly
error when you try to re-assemble the disassembled code.

