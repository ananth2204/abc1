{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011538000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 881790, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 10, "INMDSNAM": "CBT.V500.FILE234.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 881790, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 881790, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE234.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x0f\\n'", "DS1TRBAL": "b'9\\xa4'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\xa7\\x00\\x0b\\x01\\xa8\\x00\\x0b\\x00\\x10'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04c\\x00Y\\x01\\x193\\x9f\\x01\\x193\\x9f\\x10\\x12\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf9@@@'", "ispf": {"version": "04.99", "flags": 0, "createdate": "2019-12-05T00:00:00", "modifydate": "2019-12-05T10:12:59", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-499"}, "text": "REGULAR CBT TAPE - VERSION 499    FILE:  234\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT499.FILE234\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 25 MEMBERS COUNTED; CUMULATIVE SIZE IS 8,206 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/05/19    10:12:59    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE01": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x003\\x01\\x02\\t_\\x01\\x02\\t_\\x12'\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-05T00:00:00", "modifydate": "2002-04-05T12:27:33", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject: new disassembler\nDate: Wed, 3 Apr 2002 10:14:15 -0500\nFrom: \"Thornton, Dick\" <rthornton@trigon.com>\nTo:  sbgolob@attglobal.net                                              '\"\n\nHi Sam,\nI have written a new disassembler to bring it into the new\nmillennium, and thought you might like it for the CBT tape. My\nearlier disassembler is in file 217, I believe.\n\nThis newer version includes all the instructions that have been\nadded to the instruction set since the earlier version was\nwritten back in the 70's.  Also, it uses the IEWBUFF and IEWBIND\nmacros to access the load module so that it works properly with\neither PDS or PDSE load modules. The code is simpler and should\nbe easier to maintain now that the complexities of reading and\nprocessing RECFM=U load modules is gone.\n\nIf you would like to have this new version, I can sent it in TSO\nXMIT format.\n\nI will be retiring June 30th, so won't be around for maintenance\nor questions, though I hope to take a copy of the source with me\nwhen I leave, and would be happy to talk or email with anyone who\nwishes to discuss the disassembler.\n\nThanks,\nDick Thornton\nrthornton@trigon.com\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE02": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01\\x06&O\\x01\\x06&O\\t\\x18\\x00\\x7f\\x00\\x7f\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-09-21T00:00:00", "modifydate": "2006-09-21T09:18:35", "lines": 127, "newlines": 127, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:     Re: Fw: \u00ddcbt-tape\u00a8 Re: S0C4 ,File 234, Disassembler\nFrom:        John P Kalinich <jkalinic@csc.com>\nDate:        Sun, 17 Sep 2006 10:55:33 -0500\nTo:          Sam Golob <sbgolob@cbttape.org>\n\nJohn P Kalinich wrote:\n\nSam,\n\nCan you update the CBT?\n\nRegards,\nJohn K\n\nNote from Sam Golob:  John Kalinich posted a question about this\n     disassembler on cbt-tape@yahoogroups.com, and received a reply\n     from B. Einsargueix with code changes to solve the problem.\n     These code changes have been applied to the source module\n     called RESOURCE.\n\n----- Forwarded by John P Kalinich/DEF/CSC on 09/15/2006 10:28 AM -----\n\n     \"beinsargueix\"\n     <b.einsargueix@free.fr>\n\n     Sent by:                  cbt-tape@yahoogroups.com\n     Subject:                  \u00ddcbt-tape\u00a8 Re: S0C4 ,File 234,\n                               Disassembler\n     Time:                     09/15/2006 09:17 AM\n\nHello,\n\nI had the same problem and fixed it. There is a problem in the STORAGE\nOBTAIN in the RESOURCE module :\nOriginal :\n*********************************************************************\n* GET STORAGE FOR TABLES AND OPEN FILES FOR PROCESSING              *\n*********************************************************************\nGETSTOR  STORAGE OBTAIN,LENGTH=LBLTBEND,LOC=ANY GET LABEL STORAGE\n         ST    R1,LBLTBADR             SAVE THE GOTTEN ADDRESS\n         A     R1,LBLTBEND             SAVE THE\n         ST    R1,LBLTBEND                  TABLE END ADDRESS\nChanged to :\n*********************************************************************\n* PREPARE REGS BEFORE ISSUING STORAGE OBTAIN                        *\n*********************************************************************\nGETSTOR  ST    R10,LBLTBR10             SAVE R10 BEFORE OBTAIN\n         ST    R11,LBLTBR11             SAVE R11 BEFORE OBTAIN\n         L     R10,LBLTBXXX             MAX LENGTH IN R10\n         L     R11,LBLTBEND             MIN LENGTH IN R11\n*********************************************************************\n* GET STORAGE FOR TABLES AND OPEN FILES FOR PROCESSING              *\n*********************************************************************\nXETSTOR  STORAGE OBTAIN,LOC=ANY,RTCD=MYRC,COND=NO,CHECKZERO=YES,       X\n               LENGTH=((R10),(R11))\n         ST    R0,LBLTBZZZ             SAVE THE LENGTH OF GOTTEN\n         ST    R1,LBLTBYYY             SAVE THE GOTTEN ADDRESS\n         ST    R1,LBLTBADR             SAVE THE GOTTEN ADDRESS\n         A     R1,LBLTBEND             SAVE THE\n         ST    R1,LBLTBEND                  TABLE END ADDRESS\n*********************************************************************\n* RESTORE REGS AFTER  ISSUEING STORAGE OBTAIN                       *\n*********************************************************************\n         L     R10,LBLTBR10             RESTORE R10\n         L     R11,LBLTBR11             RESTORE R11\nAlso add some fields under STORAGE AND FILE AREAS :\n*********************************************************************\n*        STORAGE AND FILE AREAS                                     *\n*********************************************************************\nMYRC     DS    F                       DOUBLEWORD WORK AREA\nLBLTBXXX DC    A(32800*L'LBLENTRY)        SIZR OF 32,800 ENTRIES\nLBLTBYYY DS    F                       ADDR   OF GOTTEN AREA\nLBLTBZZZ DS    F                       LENGTH OF GOTTEN AREA\nLBLTBR10 DS    F                       SAVE AREA FOR R10\nLBLTBR11 DS    F                       SAVE AREA FOR R11\n\nAnd it works....!\n\n--- In cbt-tape@yahoogroups.com, John P Kalinich <jkalinic@...> wrote:\n\n\nWhen I run Dick Thorton's new disassembler (CBT file 234), I get\na S0C4 abend.  Has anyone run this  disassembler successfully?\n\nRegards,\nJohn Kalinich\nComputer Sciences Corp\n\n\n//RESOURCE EXEC  PGM=RESOURCE,PARM=(FLTPT,SUPVR) <==WANT\n\nFLOATPT,PRIV\n\n//STEPLIB  DD    DSN=AD.CMDLIB,DISP=SHR\n//SYSUDUMP DD    SYSOUT=*\n//SYSPRINT DD    SYSOUT=*\n//SYSLIB   DD    DSN=AD.CMDLIB,DISP=SHR\n//SYSOUT   DD    DSN=TRIDJK.DEL.DISTEST.ASM,DISP=(NEW,CATLG,DELETE),\n//         UNIT=DISK,SPACE=(TRK,(15,5),RLSE),\n//         DSORG=PS,RECFM=FB,LRECL=80\n//SYSIN    DD    *\nDISTEST  DISTEST\nDATA 000020 00007F\nDATA 0002C8 00057F\nUSING 000000 000006 F 000000\nUSING 000006        3 000000\nULABL SAVEAREA 000038 072\nULABL MYLBL90  000090 002\nULABL MYLBL12C 00012C 004\nULABL MYLBL2CA 0002CA 002\nULABL NOLBL34C 00034C 004\nULABL NOLBL384 000384 004\n\n\n- DSN=AD.CMDLIB,VOL=SER=PERM69  MEM=(DISTEST  ---------\n\nat * short\n\nNAME     ALIASOF   CREATED  SIZE SSI      ATTRIBUTES\nDISTEST           05/12/28  1456          R24, AANY\nREADLMOD          05/12/28  2928          R24, A31\nREBUILD           05/12/28 10288          R24, A31\nRESOURCE          05/12/28 15656          R24, A31\n4 MEMBERS RMODE24; SIZE IS 30K\n\n(See attached file: rebuild s0c4.txt)\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE03": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00\\x14\\x01\\x16'/\\x01\\x16'/ U\\x00>\\x00\\x11\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "2016-09-28T00:00:00", "modifydate": "2016-09-28T20:55:14", "lines": 62, "newlines": 17, "modlines": 0, "user": "SBGOLOB"}, "text": "POSSIBLE ERRORS WITH \"HALFWORD IMMEDIATE\" INSTRUCTIONS\n    (fixed by Joe Reichman)\n\n(Negative operand of \"halfword-immediate\" instructions.)\n\nIf the data operand of a halfword instruction has the high-order\nhalfword bit on, in other words, the X'8000' bit, then the ASMA90\nassembler produces the following error messages:  (code level 4)\nThe assembler \"thinks\" that the operand is a negative number.\n\nHere is some source code to test this.....\n\nLHITEST  CSECT\n         YREGS\n         LHI   R3,X'FFF4'\n         LHI   R3,X'7FF4'\n         LHI   R3,X'8000'\n         LHI   R4,X'F'\n         END\n\nAssembling this code with the High Level Assembler produces\nthe following assembled output:  (if you haven't suppressed\nreturn codes of 4 with the assembler option of FLAG(5).)\n\n000000 A738 FFF4            0FFF4    21          LHI   R3,X'FFF4'\n** ASMA320W Immediate field operand may have incorrect sign or magnitude\n** ASMA435I Record 3 in SBGOLOB.B.ASM(LHITEST) on volume: DATA05\n000004 A738 7FF4            07FF4    22          LHI   R3,X'7FF4'\n000008 A738 8000            08000    23          LHI   R3,X'8000'\n** ASMA320W Immediate field operand may have incorrect sign or magnitude\n** ASMA435I Record 5 in SBGOLOB.B.ASM(LHITEST) on volume: DATA05\n00000C A748 000F            0000F    24          LHI   R4,X'F'\n                                     25          END\n\nTherefore, in order to avoid this assembly error in the disassembled\ncode, this disassembler now produces the following result:\n\nLHITEST  CSECT\n         LHI   R3,-X'000C'                          000000 A738FFF4\n         LHI   R3,X'7FF4'                           000004 A7387FF4\n         LHI   R3,-X'8000'                          000008 A7388000\n         LHI   R4,X'000F'                           00000C A748000F\n\nThat is one of the fixes to this disassembler from Joe Reichman.\n\nBy contrast, the IBM HLASM Toolkit disassembler ASMDASM (a pay product)\nproduces the following disassembled code for the same load module.\n\n\n                                        LHITEST  CSECT\n00000000 A738 FFF4                               LHI   R3,-12\n00000004 A738 7FF4                               LHI   R3,32756\n00000008 A738 8000                               LHI   R3,-32768\n0000000C A748 000F                               LHI   R4,15\n                                                 ASMDREG\n                                                 END\n\nYou see that the object code generated by both disassemblers is\nnow the same, so that the re-assembled disassembled code comes out\nthe same, as well.  The point is to avoid a \"code 4\" assembly\nerror when you try to re-assemble the disassembled code.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$README": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00S\\x01\\x02\\x08_\\x01\\x02\\t_\\x12\\x11\\x00F\\x00F\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-03-26T00:00:00", "modifydate": "2002-04-05T12:11:53", "lines": 70, "newlines": 70, "modlines": 0, "user": "SBGOLOB"}, "text": "This is a new disassembler that can be used to disassemble load modules\nin PDSE's as well as those in traditional PDS's. It also can disassemble\nthe more recent instructions that have been added to the IBM mainframe\ninstruction set since my earlier disassembler that was written in 1977\nand is now in file 217 of the CBT tape, I believe.\n\nI did not include DSECT statements in this version partly because I have\nnot found them very useful, and partly due to time pressure, as I plan\nto retire June 30, 2002.\n\nInstallation and use notes:\n1. This PDS contains the source code and JCL needed to install and test\n   the RESOURCE/REBUILD/READLMOD disassembler.\n2. Details of coding for the control statements are given in comment\n   statements at the beginning of the RESOURCE program.\n3. Once this PDS is in place, installation is as follows:\n   A. Create a load lobrary (PDS or PDSE) to contain the load modules.\n      Edit all the ASMLKED members and change the SYSLMOD DD state-\n      ments to point to this library. Also change the STEPLIB DD\n      statements in the EXECJCL members to point to it.\n   B. Change the JCL JOB statements for your installation as needed\n      in all the ASMLKED and EXECJCL members.\n   C. Execute ASMLKED1 to assemble and linkedit the READLMOD subroutine\n      into your load library. This subroutine is used to access the\n      load module being disassembled. It uses the IEWBIND and IEWBUFF\n      macros, which provide a much cleaner approach to load module\n      handling. This load module will be statically linked into the\n      RESOURCE program load module in the next step.\n   D. Execute ASMLKED2 to assemble and linkedit the RESOURCE program\n      into your load library. As written, this job expects the READLMOD\n      subroutine's load module to be in your load library. RESOURCE is\n      the initialization program for the disassembler. It processes\n      its EXEC statement PARM field, the control statements in the\n      SYSIN file, and accesses the load module to be disassembled from\n      the SYSLIB file. When initialization is complete, the REBUILD\n      program is LOADed and called dynamically to complete the\n      disassembly and produce the output. Because of this, the load\n      modules for RESOURCE and REBUILD must both live in the same\n      load library at execution time.\n   E. Execute ASMLKED3 to assemble and linkedit the REBUILD program\n      into your load library. It must be in the same library with\n      the RESOURCE program at execution time, as it is dynamically\n      LOADed and executed by RESOURCE.\n   F. Execute ASMLKED4 to create the load module for the RESCHECK\n      program. This program is used to check the result of a\n      disassembly, if desired.\n   G. Execute ASMLKED5 to create the DISTEST load module in your load\n      library. This is a test program that contains a variety of\n      instructions, including floating point and privileged instructions\n      so that all features can be seen.\n   H. Execute EXECJCL6 to disassemble the DISTEST load module created in\n      the step above. Check this JCL before use to insure correct\n      usage for your shop. The SYSPRINT from this run will show the\n      control statements. The disassembled source code is written to\n      a DSORG=PS,RECFM=FB,LRECL=80 dataset. Each statement contains\n      a comment field that shows the CSECT offset and original text\n      at the right. If disassembly was correct, when this source\n      program is assembled, the result should be identical to the\n      original.\n   I. Execute ASMLKED7 to assemble the disassembled output from the\n      RESOURCE program. Input to this program is the disassembled\n      output from RESOURCE. Note that the SYSPRINT output from the\n      assembly step is written to a DSORG=PS,RECFM=FB,LRECL=121\n      dataset that will be read into the RESCHECK program below.\n   J. Execute EXECJCL8 to test the disassembly using the RESCHECK\n      program. This program reads the SYSPRINT from the assembly above\n      and compares the offsets and text given by the assembler to\n      the offset and text included in the source statements by the\n      REBUILD program. This should result in a single line of\n      output stating that the \"Comparison found no differences.\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE234": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04c\\x00R\\x01\\x193\\x9f\\x01\\x193\\x9f\\x10\\x12\\x001\\x001\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf9@@@'", "ispf": {"version": "04.99", "flags": 0, "createdate": "2019-12-05T00:00:00", "modifydate": "2019-12-05T10:12:52", "lines": 49, "newlines": 49, "modlines": 0, "user": "CBT-499"}, "text": "//***FILE 234 is from Dick Thornton, who is the author of the       *   FILE 234\n//*           DISASSEMBLER program on File 217.  This is a rewrite  *   FILE 234\n//*           of the disassembler to be able to handle load modules *   FILE 234\n//*           which are in PDSE's as well as those in PDS'es, and   *   FILE 234\n//*           it has been updated to use IBM's IEWBIND and IEWBUFF  *   FILE 234\n//*           macros to do the load module access.                  *   FILE 234\n//*                                                                 *   FILE 234\n//*      Fixed by Joe Reichman to allow disassembly by              *   FILE 234\n//*      entry point names, and also to fix a \"bug\",                *   FILE 234\n//*      in disassembling \"Halfword Immediate\" instructions         *   FILE 234\n//*      of the form xHI with negative number operands.             *   FILE 234\n//*                                                                 *   FILE 234\n//*      The disassembler will now also include ENTRY (entry        *   FILE 234\n//*      point) assembler instructions in the disassembled code.    *   FILE 234\n//*                                                                 *   FILE 234\n//*         emails:  (check to see which are relevant):             *   FILE 234\n//*                   sbgolob@cbttape.org                           *   FILE 234\n//*                   reichmanjoe@gmail.com                         *   FILE 234\n//*                                                                 *   FILE 234\n//*      The following statements are from Dick Thornton:           *   FILE 234\n//*                                                                 *   FILE 234\n//*      This is a new disassembler that can be used to             *   FILE 234\n//*      disassemble load modules in PDSE's as well as those in     *   FILE 234\n//*      traditional PDS's.  It also can disassemble the more       *   FILE 234\n//*      recent instructions that have been added to the IBM        *   FILE 234\n//*      mainframe instruction set since my earlier disassembler    *   FILE 234\n//*      that was written in 1977 and is now in File 217 of the     *   FILE 234\n//*      CBT tape.                                                  *   FILE 234\n//*                                                                 *   FILE 234\n//*      I did not include DSECT statements in this version         *   FILE 234\n//*      partly because I have not found them very useful, and      *   FILE 234\n//*      partly due to time pressure, as I plan to retire June      *   FILE 234\n//*      30, 2002.                                                  *   FILE 234\n//*                                                                 *   FILE 234\n//*      Installation and use notes:                                *   FILE 234\n//*      1. This PDS contains the source code and JCL needed to     *   FILE 234\n//*         install and test the RESOURCE/REBUILD/READLMOD          *   FILE 234\n//*         disassembler.                                           *   FILE 234\n//*      2. Details of coding for the control statements are        *   FILE 234\n//*         given in comment statements at the beginning of the     *   FILE 234\n//*         RESOURCE program.                                       *   FILE 234\n//*      3. All the rest of the installation instructions may be    *   FILE 234\n//*         found in the $README member of this pds.                *   FILE 234\n//*                                                                 *   FILE 234\n//*   Small fix to the RESOURCE program from John Kalinich, to fix  *   FILE 234\n//*   the translate table of printables.                            *   FILE 234\n//*                                                                 *   FILE 234\n//*         email:  jkalinic@outlook.com                            *   FILE 234\n//*                                                                 *   FILE 234\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASMLKED1": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\n\\x00!\\x01\\x02\\x08_\\x01\\x16'/\\x19'\\x00\\t\\x00\\x0c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.10", "flags": 0, "createdate": "2002-03-26T00:00:00", "modifydate": "2016-09-28T19:27:21", "lines": 9, "newlines": 12, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOB$ JOB 'ADCD V2R9','SYSPROG',NOTIFY=&SYSUID,REGION=0M\n//*******************************************************************\n//*                 BC0THOR.PDS.XMIT(ASMLKED1)                      *\n//* ASSEMBLE, LINK READLMOD SUBROUTINE                              *\n//*******************************************************************\n//ASMACL   EXEC  ASMACL,PARM.L='MAP,LET,LIST,XREF,NCAL'\n//C.SYSIN DD   DSN=SBGOLOB.CBT493.FILE234(READLMOD),DISP=SHR\n//C.SYSPRINT DD DSN=SBGOLOB.FILE234X.SYSPRINT(READLMOD),DISP=SHR\n//L.SYSLMOD DD DSN=SYS1.W$$.LINKLIB(READLMOD),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMLKED2": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x0b\\x00&\\x01\\x02\\x08_\\x01\\x16'/\\x19(\\x00\\x10\\x00\\x0c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.11", "flags": 0, "createdate": "2002-03-26T00:00:00", "modifydate": "2016-09-28T19:28:26", "lines": 16, "newlines": 12, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOB$ JOB 'ADCD V2R9','SYSPROG',NOTIFY=&SYSUID,REGION=0M\n//*******************************************************************\n//*                 BC0THOR.PDS.XMIT(ASMLKED1)                      *\n//* ASSEMBLE, LINK READLMOD SUBROUTINE                              *\n//*******************************************************************\n//*  PAGEDEF=GRYBIG,FORMDEF=GRYBIG\n//*******************************************************************\n//*                 BC0THOR.PDS.XMIT(ASMLKED2)                      *\n//* ASSEMBLE, LINK RESOURCE, THE MAIN PROGRAM                       *\n//*******************************************************************\n//ASMACL   EXEC  ASMACL,PARM.L='MAP,LET,LIST,XREF,CALL'\n//C.SYSIN DD   DSN=SBGOLOB.CBT493.FILE234(RESOURCE),DISP=SHR\n//C.SYSPRINT DD DSN=SBGOLOB.FILE234X.SYSPRINT(RESOURCE),DISP=SHR\n//L.SYSLMOD DD DSN=SYS1.W$$.LINKLIB(RESOURCE),DISP=SHR\n//L.SYSLIB DD DSN=SYS1.W$$.LINKLIB,DISP=SHR\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMLKED3": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\t\\x00S\\x01\\x02\\x08_\\x01\\x16'/\\x19(\\x00\\t\\x00\\x0c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.09", "flags": 0, "createdate": "2002-03-26T00:00:00", "modifydate": "2016-09-28T19:28:53", "lines": 9, "newlines": 12, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOB$ JOB 'ADCD V2R9','SYSPROG',NOTIFY=&SYSUID,REGION=0M\n//*******************************************************************\n//*                 BC0THOR.PDS.XMIT(ASMLKED3)                      *\n//* ASSEMBLE, LINK REBUILD PROGRAM DYNAMICALLY CALLED BY RESOURCE   *\n//*******************************************************************\n//ASMACL   EXEC  ASMACL,PARM.L='MAP,LET,LIST,XREF,NCAL'\n//C.SYSIN DD   DSN=SBGOLOB.CBT493.FILE234(REBUILD),DISP=SHR\n//C.SYSPRINT DD DSN=SBGOLOB.FILE234X.SYSPRINT(REBUILD),DISP=SHR\n//L.SYSLMOD DD DSN=SYS1.W$$.LINKLIB(REBUILD),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMLKED4": {"ttr": 535, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x08\\x00\\x07\\x01\\x02\\x08_\\x01\\x16'/\\x19)\\x00\\t\\x00\\x0c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.08", "flags": 0, "createdate": "2002-03-26T00:00:00", "modifydate": "2016-09-28T19:29:07", "lines": 9, "newlines": 12, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOB$ JOB 'ADCD V2R9','SYSPROG',NOTIFY=&SYSUID,REGION=0M\n//*******************************************************************\n//*                 BC0THOR.PDS.XMIT(ASMLKED4)                      *\n//* ASSEMBLE, LINK RESCHECK, THE RESULT CHECKING PROGRAM            *\n//*******************************************************************\n//ASMACL   EXEC  ASMACL,PARM.L='MAP,LET,LIST,XREF,CALL'\n//C.SYSIN DD   DSN=SBGOLOB.CBT493.FILE234(RESCHECK),DISP=SHR\n//C.SYSPRINT DD DSN=SBGOLOB.FILE234X.SYSPRINT(RESCHECK),DISP=SHR\n//L.SYSLMOD DD DSN=SYS1.W$$.LINKLIB(RESCHECK),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMLKED5": {"ttr": 537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\n\\x00!\\x01\\x02\\x08_\\x01\\x16'/\\x19)\\x00\\x0b\\x00\\r\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.10", "flags": 0, "createdate": "2002-03-26T00:00:00", "modifydate": "2016-09-28T19:29:21", "lines": 11, "newlines": 13, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOB$ JOB 'ADCD V2R9','SYSPROG',NOTIFY=&SYSUID,REGION=0M\n//*******************************************************************\n//*                 BC0THOR.PDS.XMIT(ASMLKED5)                      *\n//* ASSEMBLE, LINK DISTEST PROGRAM. THE RESULTING LOAD MODULE IS    *\n//* USED AS INPUT TO TEST THE RESOURCE/REBUILD DISASSEMBLER.        *\n//*******************************************************************\n//ASMACL   EXEC  ASMACL,PARM.L='MAP,LET,LIST,XREF,NCAL',\n//         PARM.C='FLAG(5)'\n//C.SYSIN DD   DSN=SBGOLOB.CBT493.FILE234(DISTEST),DISP=SHR\n//C.SYSPRINT DD DSN=SBGOLOB.FILE234X.SYSPRINT(DISTEST),DISP=SHR\n//L.SYSLMOD DD DSN=SYS1.W$$.LINKLIB(DISTEST),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMLKED7": {"ttr": 539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00\\x14\\x01\\x02\\x08_\\x01\\x16'/ \\x02\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-03-26T00:00:00", "modifydate": "2016-09-28T20:02:14", "lines": 14, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "//BC0THORD JOB (1152002-9800039,,TMVS01-UR-XXXX),'DTHORNTON',CLASS=V,\n//   MSGCLASS=Y,NOTIFY=BC0THOR,REGION=104M\n//JESOUT OUTPUT GROUPID=02A,DEFAULT=YES,JESDS=ALL,\n//   PAGEDEF=GRYBIG,FORMDEF=GRYBIG\n//*******************************************************************\n//*                 BC0THOR.PDS.XMIT(ASMLKED7)                      *\n//* ASSEMBLE, LINK DISASSEMBLED OUTPUT                              *\n//*******************************************************************\n//ASMACL   EXEC  ASMACL,PARM.L='MAP,LET,LIST,XREF,NCAL'\n//C.SYSPRINT DD DSN=BC0THOR.DEL.DISTEST.SYSPRINT,DISP=(NEW,CATLG),\n//        UNIT=DISK,SPACE=(TRK,(60,15),RLSE),\n//        DSORG=PS,RECFM=FBA,LRECL=121\n//C.SYSIN DD   DSN=BC0THOR.DEL.DISTEST.ASM,DISP=SHR\n//L.SYSLMOD DD DSN=BC0THOR.XMIT.LOAD(DISTESTD),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DISTEST": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x02\\x01\\x02\\x08_\\x01\\x02\\x08_\\x14\\t\\x01\\xba\\x01\\xba\\x00\\x00\\xc2\\xc3\\xf0\\xe3\\xc8\\xd6\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-03-26T00:00:00", "modifydate": "2002-03-26T14:09:02", "lines": 442, "newlines": 442, "modlines": 0, "user": "BC0THOR"}, "text": "         TITLE '*** DISTEST: SAMPLE FOR RESOURCE DISASSEMBLY ***'\nDISTEST CSECT\nDISTEST AMODE ANY\nDISTEST RMODE 24\n*********************************************************************\n* THIS \"PROGRAM\" IS USED TO PRODUCE A LOAD MODULE HAVING A WIDE     *\n* VARIETY OF ASSEMBLER AND MACHINE LANGUAGE CONSTRUCTS THAT WILL    *\n* PROVIDE A GOOD TEST OF THE CAPABILITIES OF THE DISASSEMBLER       *\n* PROGRAM RESOURCE.                                                 *\n*                                                                   *\n* AUTHOR R THORNTON FEB 2002                                        *\n*********************************************************************\n*\n*********************************************************************\n*        SAVE REGISTERS, SET UP BASE REGS, CHAIN SAVE AREAS         *\n*********************************************************************\n         USING DISTEST,R3,R4\n         STM   R14,R12,12(R13)         SAVE CALLER'S REGS\n         LR    R3,R15                  SET UP BASE FIRST BASE REG\n         LA    R4,4095(R3)             SET UP SECOND\n         LA    R4,1(R4)                    BASE REGISTER\n         LA    R15,MYSAVE              POINT TO MY REGISTER SAVE AREA\n         ST    R15,8(R13)              SET LSA IN CALLER'S SAVE\n         ST    R13,4(R15)              SET HSA IN MY SAVE AREA\n         LR    R13,R15                 SET UP SAVE AREA POINTER\n         B     EINST                   BRANCH AROUND CONSTANTS\n         DC    CL8'DISTEST'            PROGRAM NAME IDENTIFIER\n         DC    CL8'&SYSDATE'           ASSEMBLY DATE\n         DC    CL8'&SYSTIME'           ASSEMBLY TIME\nMYSAVE   DS    18F                     MY REGISTER SAVE AREA\n*********************************************************************\n*     E FORMAT INSTRUCTIONS                                         *\n*E:   PR    UPT   SCKPF TRAP2                                       *\n*********************************************************************\nEINST    DS    0H                      BEGIN PROCESSING\n         ENTRY EINST\n         UPT\n*********************************************************************\n*   RR1 FORMAT INSTRUCTIONS                                         *\n*RR1: BALR  BCTR  BSM   BASSM BASR  MVCL  CLCL  LPR   LNR           *\n*     LTR   LCR   NR    CLR   OR    XR    LR    CR    AR            *\n*     SR    MR    DR    ALR   SLR   LPDR  LNDR  LTDR  LCDR          *\n*     HDR   LDXR  MXR   MXDR  LDR   CDR   ADR   SDR   MDR           *\n*     DDR   AWR   SWR   LPER  LNER  LTER  LCER  HER   LEDR          *\n*     AXR   SXR   LER   CER   AER   SER   MDER  DER   AUR           *\n*     SUR                                                           *\n*********************************************************************\nRR1INST  DS    0H                      BEGIN PROCESSING\n         ENTRY RR1INST\n         BALR  R14,R15\n         BCTR  R1,R10\n         MVCL  R0,R2\n         CLCL  R6,R12\n*********************************************************************\n*   RR2 FORMAT INSTRUCTIONS                                         *\n*RR2: SVC                                                           *\n*********************************************************************\nRR2INST  DS    0H                      BEGIN PROCESSING\n         ENTRY RR2INST\n         SVC   251\n         SVC   2\n         SVC   25\n*********************************************************************\n*   RR3 FORMAT INSTRUCTIONS                                         *\n*RR3: SPM                                                           *\n*********************************************************************\nRR3INST  DS    0H                      BEGIN PROCESSING\n         ENTRY RR3INST\n         SPM   R13\n         SPM   R4\n*********************************************************************\n*   RR4 FORMAT INSTRUCTIONS                                         *\n*RR4: BCR                                                           *\n*********************************************************************\nRR4INST  DS    0H                      BEGIN PROCESSING\n         ENTRY RR4INST\n         BCR   0,R15\n         BCR   1,R14\n         BCR   2,R13\n         BCR   3,R12\n         BCR   4,R11\n         BCR   5,R10\n         BCR   6,R9\n         BCR   7,R8\n         BCR   8,R7\n         BCR   9,R6\n         BCR   10,R5\n         BCR   11,R4\n         BCR   12,R3\n         BCR   13,R2\n         BCR   14,R1\n         BCR   15,R0\n*********************************************************************\n*   RRE1 FORMAT INSTRUCTIONS                                        *\n*RRE1:IPTE  IVSK  PT    ISKE  RRBE  SSKE  TB    DXR   BAKR          *\n*     CKSM  SQDR  SQER  STURA EREG  ESTA  LURA  TAR   CPYA          *\n*     SAR   EAR   MSR   MVPG  MVST  CUSE  BSG   BSA   CLST          *\n*     SRST  TRE   CUUTF CUTFU LPEBR LNEBR LTEBR LCEBR LDEBR         *\n*     LXDBR LXEBR MXDBR KEBR  CEBR  AEBR  SEBR  MDEBR DEBR          *\n*     LPDBR LNDBR LTDBR LCDBR SQEBR SQDBR SQXBR MEEBR KDBR          *\n*     CDBR  ADBR  SDBR  MDBR  DDBR  LDER  LXDR  LXER  SQXR          *\n*     MEER  LPXBR LNXBR LTXBR LCXBR LEDBR LDXBR LEXBR KXBR          *\n*     CXBR  AXBR  SXBR  MXBR  DXBR  THDER THDR  LPXR  LNXR          *\n*     LTXR  LCXR  LXR   LEXR  FIXR  CXR   FIER  FIDR  CEFBR         *\n*     CDFBR CXFBR CEFR  CDFR  CXFR                                  *\n*********************************************************************\nRRE1INST DS    0H                      BEGIN PROCESSING\n         ENTRY RRE1INST\n         IPTE  R1,R2\n         IVSK  R9,R10\n         PT    R11,R8\n         ISKE  R14,R15\n*********************************************************************\n*   RRE2 FORMAT INSTRUCTIONS                                        *\n*RRE2:IPM   IAC   SSAR  EPAR  ESAR  MSTA  LZER  LZDR  LZXR          *\n*     SFPC  EFPC                                                    *\n*********************************************************************\nRRE2INST DS    0H                      BEGIN PROCESSING\n         ENTRY RRE2INST\n         IPM   R1\n         IAC   R14\n*********************************************************************\n*   RRE3 FORMAT INSTRUCTIONS                                        *\n*RRE3: PALB                                                         *\n*********************************************************************\nRRE3INST DS    0H                      BEGIN PROCESSING\n         ENTRY RRE3INST\n         PALB\n*********************************************************************\n*   RRF1 FORMAT INSTRUCTIONS                                        *\n*RRF1: MAEBR MSEBR MADBR MSDBR                                      *\n*********************************************************************\nRRF1INST DS    0H                      BEGIN PROCESSING\n         ENTRY RRF1INST\n         MAEBR R1,R3,R2\n         MSEBR R10,R13,R12\n         MADBR R4,R13,R9\n         MSDBR R11,R7,R13\n*********************************************************************\n*   RRF2 FORMAT INSTRUCTIONS                                        *\n*RRF2: FIXBR TBEDR TBDR  FIEBR FIDBR CFEBR CFDBR CFXBR CFER         *\n*      CFDR  CFXR                                                   *\n*********************************************************************\nRRF2INST DS    0H                      BEGIN PROCESSING\n         ENTRY RRF2INST\n         FIXBR R1,1,R9\n         TBEDR R10,14,R13\n         TBDR  R1,4,R12\n         FIEBR R14,5,R6\n*********************************************************************\n*   RRF3 FORMAT INSTRUCTIONS                                        *\n*RRF3:  DIEBR DIDBR                                                 *\n*********************************************************************\nRRF3INST DS    0H                      BEGIN PROCESSING\n         ENTRY RRF3INST\n         DIEBR R1,R3,R2,0\n         DIDBR R15,R14,R13,1\n*********************************************************************\n*    RX1 FORMAT INSTRUCTIONS                                        *\n*RX1: STH   LA    STC   IC    EX    BAL   BCT   LH    CH            *\n*     AH    SH    MH    BAS   CVD   CVB   ST    LAE   N             *\n*     CL    O     X     L     C     A     S     M     D             *\n*     AL    SL    STD   MXD   LD    CD    AD    SD    MD            *\n*     DD    AW    SW    STE   MS    LE    CE    AE    SE            *\n*     MDE   DE    AU    SU    LRA                                   *\n*********************************************************************\nRX1INST  DS    0H                      BEGIN PROCESSING\n         ENTRY RX1INST\n         STH   R1,HWD1\n         LA    R15,HWD2\n         STC   R4,HWDTBL(R7)\n         IC    R13,HTBL2(R5)\n         EX    R2,5(R4,R3)\n         BAL   R10,250(,R9)\n         BCT   R14,128(R2)\n*********************************************************************\n*    RX2 FORMAT INSTRUCTIONS                                        *\n*RX2: BC                                                            *\n*********************************************************************\nRX2INST  DS    0H                      BEGIN PROCESSING\n         ENTRY RX2INST\n         BC    0,RX2001\nRX2001   BC    1,RX2002(R1)\nRX2002   BC    2,RX2003\nRX2003   BC    3,RX2004(R10)\nRX2004   BC    4,54(R7)\n         BC    5,RX2006(R12)\nRX2006   BC    6,128(R4,R2)\n         BC    7,RX2008(R6)\nRX2008   BC    8,16(,R5)\n         BC    9,RX2011(R3)\nRX2011   BC    11,RX2012\nRX2012   BC    12,RX2013(R4)\nRX2013   BC    13,4(R2,R4)\n         BC    14,8(,R6)\n         BC    15,0(R1)\n*********************************************************************\n*    RXE FORMAT INSTRUCTIONS                                        *\n*RXE: LDEB  LXDB  LXEB  MXDB  KEB   CEB   AEB   SEB   MDEB          *\n*     DEB   TCEB  TCDB  TCXB  SQEB  SQDB  MEEB  KDB   CDB           *\n*     ADB   SDB   MDB   DDB   LDE   LXD   LXE   SQE   SQD           *\n*     MEE                                                           *\n*********************************************************************\nRXEINST  DS    0H                      BEGIN PROCESSING\n         ENTRY RXEINST\n         LDEB  R1,122(R4,R8)\n         LXDB  R12,0(,R12)\n         LXEB  R9,RXESHORT\n         MXDB  R1,RXEEXTN(R8)\n         KEB   R12,9(R5)\n*********************************************************************\n*    RXF FORMAT INSTRUCTIONS                                        *\n*RXF: MAEB  MSEB MADB   MSDB                                        *\n*                                                                   *\n*********************************************************************\nRXFINST  DS    0H                      BEGIN PROCESSING\n         ENTRY RXFINST\n         MAEB  R1,R3,100(R4,R7)\n         MSEB  R12,R13,RXFSHORT\n         MADB  R7,R12,RXFINST(R11)\n         MSDB  R1,R6,33(,R12)\n*********************************************************************\n*    RS1 FORMAT INSTRUCTIONS                                        *\n*RS1: BXH   BXLE  STM   LM    TRACE LAM   STAM  MVCLE CLCLE         *\n*     SIGP  STCTL LCTL  CS    CDS                                   *\n*********************************************************************\nRS1INST  DS    0H                      BEGIN PROCESSING\n         ENTRY RS1INST\n         BXH   R1,R3,20(R6)\n         BXLE  R10,R14,RS1STM\nRS1STM   STM   R0,R15,RS1FWDS\n         LM    R15,R6,RS1FWD8\n*********************************************************************\n*    RS2 FORMAT INSTRUCTIONS                                        *\n*RS2: SRL   SLL   SRA   SLA   SRDL  SLDL  SRDA  SLDA  CLM           *\n*     STCM                                                          *\n*********************************************************************\nRS2INST  DS    0H                      BEGIN PROCESSING\n         ENTRY RS2INST\n         SRL   R1,250(R6)\n         SLL   R10,12\n         SRA   R13,7\n         SLA   R9,44(R14)\n*********************************************************************\n*    RS3 FORMAT INSTRUCTIONS                                        *\n*RS3: ICM                                                           *\n*********************************************************************\nRS3INST  DS    0H                      BEGIN PROCESSING\n         ENTRY RS3INST\n         ICM   R1,1,RS3CHR1\n         ICM   R2,15,45(R2)\n         ICM   R7,13,40(R13)\n         ICM   R5,8,RS3CHR2\n         ICM   R13,7,56\n*********************************************************************\n*    RSI FORMAT INSTRUCTIONS                                        *\n*RSI: BRXH  BRXLE                                                   *\n*********************************************************************\nRSIINST  DS    0H                      BEGIN PROCESSING\n         ENTRY RSIINST\n         BRXH  R1,R3,*+16\n         BRXLE R10,R11,RIINST\n         BRXH  R1,R3,RSIINST\n         BRXLE R10,R11,*-16\n*********************************************************************\n*     RI FORMAT INSTRUCTIONS                                        *\n*RI:  TMH   TML   BRC   BRAS  BRCT  LHI   AHI   MHI   CHI           *\n*********************************************************************\nRIINST   DS    0H                      BEGIN PROCESSING\n         ENTRY RIINST\n         TMH   R1,700\n         TML   R10,3\n         BRC   R1,*-64\n         BRAS  R9,SIINST\n*********************************************************************\n*     SI FORMAT INSTRUCTIONS                                        *\n*SI:  TM    MVI   NI    CLI   OI    XI    STNSM STOSM MC            *\n*********************************************************************\nSIINST   DS    0H                      BEGIN PROCESSING\n         ENTRY SIINST\n         TM    SIBYT,X'50'\n         MVI   0(R8),2\n         NI    SIINST,C'A'\n         CLI   SIBYT2,1\n*********************************************************************\n*     S1 FORMAT INSTRUCTIONS                                        *\n*S1:  SSM   LPSW  TS    STIDP SCK   STCK  SCKC  STCKC SPT           *\n*     STPT  SPKA  SPX   STPX  STAP  PC    SAC   CFC   MSCH          *\n*     SSCH  STSCH TSCH  TPI   STCRW STCPS RP    STCKE SACF          *\n*     STSI  SRNM  STFPC LFPC  TRAP4                                 *\n*********************************************************************\nS1INST   DS    0H                      BEGIN PROCESSING\n         ENTRY S1INST\n         SSM   S1MASK\n         LPSW  S1PSW\n         TS    5(R7)\n         STIDP 256(R12)\n         SCK   240(R4)\n         STCK  40(R9)\n*********************************************************************\n*     S2 FORMAT INSTRUCTIONS                                        *\n*S2:  IPK   PTLB  CSCH  HSCH  SAL   RSCH  RCHP  SCHM                *\n*********************************************************************\nS2INST   DS    0H                      BEGIN PROCESSING\n         ENTRY S2INST\n         IPK\n         PTLB\n         CSCH\n         HSCH\n         SAL\n         RSCH\n         RCHP\n         SCHM\n*********************************************************************\n*    SS1 FORMAT INSTRUCTIONS                                        *\n*SS1: MVN   MVC   MVZ   NC    CLC   OC    XC    TR    TRT           *\n*     ED    EDMK  MVCIN                                             *\n*********************************************************************\nSS1INST  DS    0H                      BEGIN PROCESSING\n         ENTRY SS1INST\n         MVN   SS1NTGT,SS1NSRC\n         MVC   2(12,R4),9(R8)\n         MVZ   SS1ZTGT(12),7(R9)\n         NC    2031(245,R5),SS1AND\n*********************************************************************\n*    SS2 FORMAT INSTRUCTIONS                                        *\n*SS2: MVO   PACK  UNPK  ZAP   CP    AP    SP    MP    DP            *\n*********************************************************************\nSS2INST  DS    0H                      BEGIN PROCESSING\n         ENTRY SS2INST\n         MVO   SS2PTGT(5),SS2PSRC(4)\n         PACK  4(3,R5),2(7,R12)\n         UNPK  SS2ZTGT(4),0(6,R9)\n         ZAP   12(5,R8),SS2PKSRC(4)\n*********************************************************************\n*    SS3 FORMAT INSTRUCTIONS                                        *\n*SS3: PLO                                                           *\n*********************************************************************\nSS3INST  DS    0H                      BEGIN PROCESSING\n         ENTRY SS3INST\n         PLO   R1,SS3OP1,R7,SS3OP2\n         PLO   R12,34(R6),R9,SS3OP3\n         PLO   R8,12(R9),R13,63(R2)\n         PLO   R4,SS3OP4,R1,12(R12)\n*********************************************************************\n*    SS4 FORMAT INSTRUCTIONS                                        *\n*SS4: MVCK  MVCP  MVCS                                              *\n*********************************************************************\nSS4INST  DS    0H                      BEGIN PROCESSING\n         ENTRY SS4INST\n         MVCK  SS4OP01(R8),SS4OP02,R9\n         MVCP  12(R1,R2),34(R7),R4\n         MVCS  SS4OP03,128(R8),R15\n*********************************************************************\n*    SS5 FORMAT INSTRUCTIONS                                        *\n*SS5: SRP                                                           *\n*********************************************************************\nSS5INST  DS    0H                      BEGIN PROCESSING\n         ENTRY SS5INST\n         SRP   SS5TGT1(5),64-32,5 RIGHT SHIFT 32 DIGITS, ROUND 5\n         SRP   SS5TG2(3),31,5     LEFT SHIFT 31 DIGITS, ROUND 5\n         SRP   73(7,R4),64-1,5    RIGHT SHIFT 1 DIGIT, ROUND 5\n         SRP   4(5,R6),1,5        LEFT SHIFT 1 DIGIT, ROUND 5\n         SRP   3(5,R9),0,5        NO SHIFT, ROUND 5\n         SRP   SS5TGT1(5),64-32,6 NOT INSTRUCTION (ROUND=6)\n         SRP   SS5TGT1(5),64-32,4 NOT INSTRUCTION (ROUND=4)\n         DC    X'F025351D009F'    NOT AN INSTRUCTION BITS 40-41 NOT 0\n*********************************************************************\n*    SSE FORMAT INSTRUCTIONS                                        *\n*SSE: LASP  TPROT MVCSK MVCDK                                       *\n*********************************************************************\nSSEINST  DS    0H                      BEGIN PROCESSING\n         ENTRY SSEINST\n         LASP  SSETRGT,SSESRCE\n         TPROT SSETGT,6(R7)\n         MVCSK 32(R15),SSESRC2\n         MVCDK 12(R7),15(R2)\n         LTORG\nDISTEST CSECT\n*********************************************************************\n*    DATA AREAS                                                     *\n*********************************************************************\nHWD1     DC    H'1'\nHWD2     DC    H'2'\nHWDTBL   DC    36H'12'\nHTBL2    DC    H'1,2,3,4,5,6,7'\nRXESHORT DC    E'500'                  SHORT FLOAT\nRXEEXTN  DC    L'1234567'              EXTENDED FLOAT\nRXFSHORT DC    E'12'                   SHORT FLOAT\nRXFLONG  DC    D'645.2312'             LONG FLOAT\nRS1FWDS  DC    A(RS1FWD8)              FULLWORDS\n         DC    V(SUBRTN)\n         DC    X'80',AL3(SS2PKSRC)\n         DC    13F'0'\nRS1FWD8  DC    8F'100'                 FULLWORDS\nRS3CHR1  DC    CL1'X'                  CHARACTER\nRS3CHR2  DC    CL1'Z'                  CHARACTER\nSIBYT    DC    X'D2'                   HEX LITERAL\nSIBYT2   DC    X'00'                   HEX LITERAL\nS1MASK   DC    X'80'                   HEX VALUE\nS1PSW    DS    D\nSS1NTGT  DC    CL18'A Z B Y L M Q'     CHARACTER FIELD\nSS1NSRC  DC    CL33'S T U V'           CHARACTER FIELD\nSS1ZTGT  DC    CL20'A B C D'           CHARACTER FIELD\nSS1AND   DC    245X'80'                AND MASK FIELD\nSS2PTGT  DC    PL5'17'                 PACKED DECIMAL\nSS2PSRC  DC    PL6'1032.17'            PACKED DECIMAL\nSS2ZTGT  DC    ZL7'0'                  ZONED DECIMAL\nSS2PKSRC DC    PL4'112233'             PACKED DECIMAL\nSS3OP1   DC    CL5'ABCDE'              CHARACTERS\nSS3OP2   DC    CL5'WXYZ'               CHARACTERS\nSS3OP3   DC    CL5'FGH'                CHARACTERS\nSS3OP4   DC    CL5'ST'                 CHARACTERS\nSS4OP01  DC    D'123'                  DOUBLEWORD\nSS4OP02  DC    D'456'                  DOUBLEWORD\nSS4OP03  DC    D'789'                  DOUBLEWORD\nSS5TGT1  DC    PL5'0'                  PACKED DECIMAL\nSS5TG2   DC    PL3'0'                  PACKED DECIMAL\nSSETRGT  DC    CL20'SSE TARGET FIELD'\nSSESRCE  DC    CL16'SSE SOURCE FIELD'\nSSESRC2  DC    CL28'ANOTHER SSE SOURCE'\nSSETGT   DC    CL32'ANOTHER SSE TARGET'\n*********************************************************************\n*             REGISTER EQUATES                                      *\n*********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EXECJCL": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x1b\\x006\\x01\\x02\\x05\\x0f\\x01\\x16'/\\x199\\x00&\\x00\\x13\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.27", "flags": 0, "createdate": "2002-02-19T00:00:00", "modifydate": "2016-09-28T19:39:36", "lines": 38, "newlines": 19, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOB$ JOB 'ADCD V2R9','SYSPROG',NOTIFY=&SYSUID,REGION=0M\n//*******************************************************************\n//*                 BC0THOR.PDS.XMIT(EXECJCL)                       *\n//* EXECUTE THE RESOURCE/REBUILD DISASSEMBLER AGAINST THE DISTEST   *\n//* LOAD MODULE.                                                    *\n//*   1. FIRST SCRATCH ANY FORMER RESOURCE OUTPUT FILE              *\n//*   2. DISASSEMBLE DISTEST:                                       *\n//*      A. THE PARM FIELD ON THE EXEC JCL STATEMENT SPECIFIES THAT *\n//*         FLOATING POINT AND PRIVILEGED INSTRUCTIONS ARE TO BE    *\n//*         DISASSEMBLED. THESE WOULD NORMALLY NOT BE CONSIDERED    *\n//*         INSTRUCTIONS BY THE PROGRAMS.                           *\n//*      B. SYSOUT FILE WILL CONTAIN THE DISASSEMBLED SOURCE CODE.  *\n//*      C. SYSLIB FILE CONTAINS THE LOAD MODULE TO BE DISASSEMBLED *\n//*      D. SYSIN FILE CONTAINS CONTROL STATEMENTS:                 *\n//*         1. FIRST STATEMENT MUST NAME THE MEMBER AND CSECT TO BE *\n//*            DISASSEMBLED. MEMBER MUST BE IN THE SYSLIB FILE.     *\n//*         2. OPTIONAL DATA STATEMENTS IDENTIFY AREAS IN THE LOAD  *\n//*            MODULE THAT ARE DATA ONLY. THIS PREVENTS THE DIS-    *\n//*            ASSEMBLER FROM MAKING INSTRUCTIONS FROM DATA BYTES.  *\n//*         3. OPTIONAL USING INSTRUCTIONS ALLOW THE DISASSEMBLER   *\n//*            TO CREATE LABELS FROM THE BASE-DISPLACEMENT ADDRESSES*\n//*            IN INSTRUCTIONS. WITHOUT THIS, MOST INSTRUCTIONS WILL*\n//*            BE FORMATTED IN EXPLICIT FORMAT.                     *\n//*******************************************************************\n//RESOURCE EXEC  PGM=RESOURCE,PARM='FLTPT,SUPVR' <==WANT FLOATPT,PRIV\n//STEPLIB  DD    DSN=SYS1.W$$.LINKLIB,DISP=SHR\n//SYSUDUMP DD    SYSOUT=*\n//SYSPRINT DD    SYSOUT=*\n//SYSLIB   DD    DSN=SYS1.NUCLEUS,DISP=SHR\n//SYSOUT   DD    DSN=IBMUSER.TST.DISTEST.ASM,DISP=SHR\n//**SOUT   DD    DSN=IBMUSER.TST.DISTEST.ASM,DISP=(NEW,CATLG,DELETE),\n//**       UNIT=SYSDA,SPACE=(TRK,(15,5),RLSE),\n//**       DSORG=PS,RECFM=FB,LRECL=80\n//SYSIN    DD    *\nIEANUC01 IGC079\nDATA 000004 00001C\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXECJCL1": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x1c\\x00P\\x01\\x02\\x05\\x0f\\x01\\x16'/\\x199\\x00%\\x00\\x13\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.28", "flags": 0, "createdate": "2002-02-19T00:00:00", "modifydate": "2016-09-28T19:39:50", "lines": 37, "newlines": 19, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOB$ JOB 'ADCD V2R9','SYSPROG',NOTIFY=&SYSUID,REGION=0M\n//*******************************************************************\n//*                 BC0THOR.PDS.XMIT(EXECJCL1)                      *\n//* EXECUTE THE RESOURCE/REBUILD DISASSEMBLER AGAINST THE DISTEST   *\n//* LOAD MODULE.                                                    *\n//*   1. FIRST SCRATCH ANY FORMER RESOURCE OUTPUT FILE              *\n//*   2. DISASSEMBLE DISTEST:                                       *\n//*      A. THE PARM FIELD ON THE EXEC JCL STATEMENT SPECIFIES THAT *\n//*         FLOATING POINT AND PRIVILEGED INSTRUCTIONS ARE TO BE    *\n//*         DISASSEMBLED. THESE WOULD NORMALLY NOT BE CONSIDERED    *\n//*         INSTRUCTIONS BY THE PROGRAMS.                           *\n//*      B. SYSOUT FILE WILL CONTAIN THE DISASSEMBLED SOURCE CODE.  *\n//*      C. SYSLIB FILE CONTAINS THE LOAD MODULE TO BE DISASSEMBLED *\n//*      D. SYSIN FILE CONTAINS CONTROL STATEMENTS:                 *\n//*         1. FIRST STATEMENT MUST NAME THE MEMBER AND CSECT TO BE *\n//*            DISASSEMBLED. MEMBER MUST BE IN THE SYSLIB FILE.     *\n//*         2. OPTIONAL DATA STATEMENTS IDENTIFY AREAS IN THE LOAD  *\n//*            MODULE THAT ARE DATA ONLY. THIS PREVENTS THE DIS-    *\n//*            ASSEMBLER FROM MAKING INSTRUCTIONS FROM DATA BYTES.  *\n//*         3. OPTIONAL USING INSTRUCTIONS ALLOW THE DISASSEMBLER   *\n//*            TO CREATE LABELS FROM THE BASE-DISPLACEMENT ADDRESSES*\n//*            IN INSTRUCTIONS. WITHOUT THIS, MOST INSTRUCTIONS WILL*\n//*            BE FORMATTED IN EXPLICIT FORMAT.                     *\n//*******************************************************************\n//RESOURCE EXEC  PGM=RESOURCE,PARM='FLTPT,SUPVR' <==WANT FLOATPT,PRIV\n//STEPLIB  DD    DSN=SYS1.W$$.LINKLIB,DISP=SHR\n//SYSUDUMP DD    SYSOUT=*\n//SYSPRINT DD    SYSOUT=*\n//SYSLIB   DD    DSN=SYS1.NUCLEUS,DISP=SHR\n//SYSOUT   DD    DSN=SBGOLOB.TST.DISTEST.ASM(IEWFETCH),DISP=SHR\n//**SOUT   DD    DSN=SBGOLOB.TST.DISTEST.ASM,DISP=(NEW,CATLG,DELETE),\n//**       UNIT=SYSDA,SPACE=(TRK,(15,5),RLSE),\n//**       DSORG=PS,RECFM=FB,LRECL=80\n//SYSIN    DD    *\nIEANUC01 IEWFETCH\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXECJCL6": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x19\\x00\\x06\\x01\\x02\\x05\\x0f\\x01\\x16'/\\x19@\\x00+\\x00\\x13\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.25", "flags": 0, "createdate": "2002-02-19T00:00:00", "modifydate": "2016-09-28T19:40:06", "lines": 43, "newlines": 19, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOB$ JOB 'ADCD V2R9','SYSPROG',NOTIFY=&SYSUID,REGION=0M\n//*******************************************************************\n//*                 BC0THOR.PDS.XMIT(EXECJCL6)                      *\n//* EXECUTE THE RESOURCE/REBUILD DISASSEMBLER AGAINST THE DISTEST   *\n//* LOAD MODULE.                                                    *\n//*   1. FIRST SCRATCH ANY FORMER RESOURCE OUTPUT FILE              *\n//*   2. DISASSEMBLE DISTEST:                                       *\n//*      A. THE PARM FIELD ON THE EXEC JCL STATEMENT SPECIFIES THAT *\n//*         FLOATING POINT AND PRIVILEGED INSTRUCTIONS ARE TO BE    *\n//*         DISASSEMBLED. THESE WOULD NORMALLY NOT BE CONSIDERED    *\n//*         INSTRUCTIONS BY THE PROGRAMS.                           *\n//*      B. SYSOUT FILE WILL CONTAIN THE DISASSEMBLED SOURCE CODE.  *\n//*      C. SYSLIB FILE CONTAINS THE LOAD MODULE TO BE DISASSEMBLED *\n//*      D. SYSIN FILE CONTAINS CONTROL STATEMENTS:                 *\n//*         1. FIRST STATEMENT MUST NAME THE MEMBER AND CSECT TO BE *\n//*            DISASSEMBLED. MEMBER MUST BE IN THE SYSLIB FILE.     *\n//*         2. OPTIONAL DATA STATEMENTS IDENTIFY AREAS IN THE LOAD  *\n//*            MODULE THAT ARE DATA ONLY. THIS PREVENTS THE DIS-    *\n//*            ASSEMBLER FROM MAKING INSTRUCTIONS FROM DATA BYTES.  *\n//*         3. OPTIONAL USING INSTRUCTIONS ALLOW THE DISASSEMBLER   *\n//*            TO CREATE LABELS FROM THE BASE-DISPLACEMENT ADDRESSES*\n//*            IN INSTRUCTIONS. WITHOUT THIS, MOST INSTRUCTIONS WILL*\n//*            BE FORMATTED IN EXPLICIT FORMAT.                     *\n//*******************************************************************\n//RESOURCE EXEC  PGM=RESOURCE,PARM=(FLTPT,SUPVR) <==WANT FLOATPT,PRIV\n//STEPLIB  DD    DSN=SYS1.W$$.LINKLIB,DISP=SHR\n//SYSUDUMP DD    SYSOUT=*\n//SYSPRINT DD    SYSOUT=*\n//SYSLIB   DD    DSN=SYS1.W$$.LINKLIB,DISP=SHR\n//SYSOUT   DD    DISP=SHR,DSN=SBGOLOB.TST.DISTEST.ASM(DISTEST)\n//*YSOUT   DD    SYSOUT=*\n//SYSIN    DD    *\nDISTEST  DISTEST\nDATA 000020 00007F\nDATA 0002C8 00057F\nUSING 000000 000006 F 000000\nUSING 000006        3 000000\nULABL SAVEAREA 000038 072\nULABL MYLBL90  000090 002\nULABL MYLBL12C 00012C 004\nULABL MYLBL2CA 0002CA 002\nULABL NOLBL34C 00034C 004\nULABL NOLBL384 000384 004\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXECJCL7": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00\\x11\\x01\\x16'/\\x01\\x16'/\\x199\\x00+\\x00+\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "2016-09-28T00:00:00", "modifydate": "2016-09-28T19:39:11", "lines": 43, "newlines": 43, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOB$ JOB 'ADCD V2R9','SYSPROG',NOTIFY=&SYSUID,REGION=0M\n//*******************************************************************\n//*                 BC0THOR.PDS.XMIT(EXECJCL7)                      *\n//* EXECUTE THE RESOURCE/REBUILD DISASSEMBLER AGAINST THE DISTEST   *\n//* LOAD MODULE.                                                    *\n//*   1. FIRST SCRATCH ANY FORMER RESOURCE OUTPUT FILE              *\n//*   2. DISASSEMBLE DISTEST:                                       *\n//*      A. THE PARM FIELD ON THE EXEC JCL STATEMENT SPECIFIES THAT *\n//*         FLOATING POINT AND PRIVILEGED INSTRUCTIONS ARE TO BE    *\n//*         DISASSEMBLED. THESE WOULD NORMALLY NOT BE CONSIDERED    *\n//*         INSTRUCTIONS BY THE PROGRAMS.                           *\n//*      B. SYSOUT FILE WILL CONTAIN THE DISASSEMBLED SOURCE CODE.  *\n//*      C. SYSLIB FILE CONTAINS THE LOAD MODULE TO BE DISASSEMBLED *\n//*      D. SYSIN FILE CONTAINS CONTROL STATEMENTS:                 *\n//*         1. FIRST STATEMENT MUST NAME THE MEMBER AND CSECT TO BE *\n//*            DISASSEMBLED. MEMBER MUST BE IN THE SYSLIB FILE.     *\n//*         2. OPTIONAL DATA STATEMENTS IDENTIFY AREAS IN THE LOAD  *\n//*            MODULE THAT ARE DATA ONLY. THIS PREVENTS THE DIS-    *\n//*            ASSEMBLER FROM MAKING INSTRUCTIONS FROM DATA BYTES.  *\n//*         3. OPTIONAL USING INSTRUCTIONS ALLOW THE DISASSEMBLER   *\n//*            TO CREATE LABELS FROM THE BASE-DISPLACEMENT ADDRESSES*\n//*            IN INSTRUCTIONS. WITHOUT THIS, MOST INSTRUCTIONS WILL*\n//*            BE FORMATTED IN EXPLICIT FORMAT.                     *\n//*******************************************************************\n//RESOURCE EXEC  PGM=RESOURCE,PARM=(FLTPT,SUPVR) <==WANT FLOATPT,PRIV\n//STEPLIB  DD    DSN=SYS1.W$$.LINKLIB,DISP=SHR\n//SYSUDUMP DD    SYSOUT=*\n//SYSPRINT DD    SYSOUT=*\n//SYSLIB   DD    DSN=SYS1.W$$.LINKLIB,DISP=SHR\n//*YSOUT   DD    DISP=SHR,DSN=SBGOLOB.TST.DISTEST.ASM(DISTEST)\n//SYSOUT   DD    SYSOUT=*\n//SYSIN    DD    *\nDISTEST  DISTEST\nDATA 000020 00007F\nDATA 0002C8 00057F\nUSING 000000 000006 F 000000\nUSING 000006        3 000000\nULABL SAVEAREA 000038 072\nULABL MYLBL90  000090 002\nULABL MYLBL12C 00012C 004\nULABL MYLBL2CA 0002CA 002\nULABL NOLBL34C 00034C 004\nULABL NOLBL384 000384 004\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXECJCL8": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x06\\x00\\x04\\x01\\x02\\x08_\\x01\\x16'/ \\x05\\x00\\r\\x00\\r\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.06", "flags": 0, "createdate": "2002-03-26T00:00:00", "modifydate": "2016-09-28T20:05:04", "lines": 13, "newlines": 13, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOB$ JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//*******************************************************************\n//*                 BC0THOR.PDS.XMIT(EXECJCL8)                      *\n//* CHECK ASSEMBLER'S SYSPRINT AFTER ASSEMBLING THE OUTPUT FROM A   *\n//* RESOURCE/REBUILD RUN TO CHECK FOR CORRECT DISASSEMBLY.          *\n//*******************************************************************\n//RESCHECK EXEC  PGM=RESCHECK\n//STEPLIB  DD    DSN=SYS1.W$$.LINKLIB,DISP=SHR\n//SYSPRINT DD    SYSOUT=*\n//SYSIN    DD    DISP=SHR,DSN=SBGOLOB.FILE234T.SYSPRINT(DISTEST)\n//*               (ASSEMBLED DISASSEMBLY OF DISTEST PROGRAM)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXECJCL9": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x1d\\x00\\x07\\x01\\x02\\x05\\x0f\\x01\\x16'/ &\\x00\\x0c\\x00\\x13\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.29", "flags": 0, "createdate": "2002-02-19T00:00:00", "modifydate": "2016-09-28T20:26:07", "lines": 12, "newlines": 19, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOB$ JOB 'ADCD V2R9','SYSPROG',NOTIFY=&SYSUID,REGION=0M\n//*******************************************************************\n//RESOURCE EXEC  PGM=RESOURCE,PARM='FLTPT,SUPVR' <==WANT FLOATPT,PRIV\n//STEPLIB  DD    DSN=SYS1.W$$.LINKLIB,DISP=SHR\n//SYSUDUMP DD    SYSOUT=*\n//SYSPRINT DD    SYSOUT=*\n//SYSLIB   DD    DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSOUT   DD    DSN=SBGOLOB.TST.DISTEST.ASM(LHITEST),DISP=SHR\n//SYSIN    DD    *\nLHITEST  LHITEST\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "READLMOD": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00C\\x01\\x02\\x04?\\x01\\x16#o C\\x01\\x9e\\x01}\\x00\\x00\\xc1\\xc4\\xc3\\xc4\\xd4\\xe2\\xe3@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2002-02-12T00:00:00", "modifydate": "2016-08-23T20:43:43", "lines": 414, "newlines": 381, "modlines": 0, "user": "ADCDMST"}, "text": "   TITLE  '*** READLMOD: IEWBIND SUBROUTINE ***'\nREADLMOD CSECT\nREADLMOD AMODE 31\nREADLMOD RMODE 24\n***********************************************************************\n*  SUBROUTINE USED TO RETURN LOAD MODULE INFORMATION TO THE CALLER.   *\n*  THE IEWBUFF AND IEWBIND MACROS ARE USED TO OBTAIN THE DATA. ON     *\n*  RETURN, A POINTER TO THE DATA BUFFER FROM IEWBIND IS PASSED TO THE *\n*  CALLER.                                                            *\n*                                                                     *\n*  CALLER PASSES A PARAMETER AREA THAT CONTAINS INFORMATION ABOUT THE *\n*  REQUESTED DATA, AND SEVERAL DATA FIELDS THAT WILL RECEIVE DATA     *\n*  FROM THIS SUBROUTINE ON RETURN. FOR DETAILED INFORMATION ON THE    *\n*  IEWBIND AND IEWBUFF MACROS SEE THE IBM MANUAL PROGRAM MANAGEMENT   *\n*  SECTION ON THE API INTERFACE.                                      *\n*                                                                     *\n*  CALLER PASSED PARAMETER AREA FORMAT:                               *\n*       PARMAREA DS    0F      READLMOD PARMS                         *\n*       PRMDDNAM DS    CL8     DDNAME FOR LOADLIB CONTAINING MEMBER   *\n*       PRMEMBER DS    CL8     MEMBER NAME                            *\n*       PRMCSECT DS    CL8     CSECT NAME                             *\n*       PRMREQST DS    CL8     NAME OF DATA TO BE RETRIEVED: ESD, RLD,*\n*       *                         TEXT, SYM, IDRU, IDRL, IDRZ, IDRB,  *\n*       *                         NAME, OR MAP                        *\n*       PRMCURSR DS    F       CURSOR VALUE. CALLER SETS THIS TO ZERO *\n*       *                      BEFORE A FIRST CALL FOR A SET OF DATA, *\n*       *                      THEN LEAVES IT AS-IS WHEN RETURNING FOR*\n*       *                      ADDITIONAL DATA UNTIL IT HAS ALL BEEN  *\n*       *                      RETURNED. CURRENT VALUE IS RETURNED BY *\n*       *                      THIS SUBROUTINE AFTER EACH CALL.       *\n*       PRMRETCD DS    F       RETURN CODE FROM IEWBIND (S/B ZERO)    *\n*       PRMRSNCD DS    F       REASON CODE FROM IEWBIND (ZERO MEANS   *\n*       *                      MORE DATA OF THIS TYPE IS AVAILABLE AND*\n*       *                      WILL BE RETURNED IN SUBSEQUENT CALLS.  *\n*       *                      4 MEANS THE DATA IN THE BUFFER IS ALL  *\n*       *                      THAT IS AVAILABLE OF THE REQUESTED TYPE*\n*       PRMCOUNT DS    F       NUMBER ELEMENTS AVAILABLE IN THE BUFFER*\n*       PRMBUFAD DS    A       ADDRESS OF THE DATA BUFFER HEADER. THE *\n*       *                      HEADER IS 32 BYTES LONG, FOLLOWED BY   *\n*       *                      THE DATA ELEMENTS.                     *\n*       PRMERROR DS    CL1     ERROR INDICATOR ON RETURN:             *\n*       PRMOK    EQU   C' '        SUCCESSFUL READLMOD CALL           *\n*       PRMPRMER EQU   C'P'        PARAMETER ERROR                    *\n*       PRMACERR EQU   C'E'        IEWBIND MACRO ERROR OCCURRED       *\n*                                                                     *\n* AUTHOR R THORNTON FEB 2002                                          *\n***********************************************************************\n***********************************************************************\n*        INIT1:                                                       *\n*   SET UP BASE REGISTERS, CHAIN SAVE AREAS.                          *\n***********************************************************************\n         USING READLMOD,R3\nINIT1    STM   R14,R12,12(R13)    SAVE CALLER'S REGS\n         LR    R3,R15             SET UP BASE FIRST BASE REG\n         LA    R15,MYSAVE         POINT TO MY REGISTER SAVE AREA\n         ST    R15,8(R13)         SET LSA IN CALLER'S SAVE\n         ST    R13,4(R15)         SET HSA IN MY SAVE AREA\n         LR    R13,R15            SET UP SAVE AREA POINTER\n         B     INIT2              BRANCH AROUND CONSTANTS\n         DC    CL8'READLMOD'      PROGRAM NAME IDENTIFIER\n         DC    CL8'&SYSDATE'      ASSEMBLY DATE\n         DC    CL8'&SYSTIME'      ASSEMBLY TIME\nMYSAVE   DS    18F                MY REGISTER SAVE AREA\n*********************************************************************\n*        INIT2:ON: VALIDATE CALLER'S PARAMETERS. OBTAIN BUFFER      *\n*  VALIDATE CALLER'S PARAMETERS. IF FIRST TIME HERE, INITIALIZE THE *\n*  IEWBIND API INTERFACE ENVIRONMENT.                               *\n*********************************************************************\nINIT2    LR    R6,R1              COPY PARMLIST POINTER\n         L     R6,0(R6)           POINT TO PARMLIST\n         USING PARMAREA,R6\n         MVI   PRMERROR,C' '      RESET PARAMETER ERROR BYTE\n         LA    R1,VALREQ          POINT TO VALID REQUEST TABLE\nI2CKEND  CLI   0(R1),X'FF'        END OF TABLE?\n         BNE   I2CKFND            NO\n         MVI   PRMERROR,C'P'      YES, INDICATE PARAMETER ERROR\n         B     RETURN             AND EXIT TO CALLER\nI2CKFND  CLC   PRMREQST,4(R1)     FOUND THE ENTRY?\n         BE    I2FOUND            YES\n         LA    R1,16(R1)          NO, ADVANCE TO NEXT TABLE ENTRY\n         B     I2CKEND            CONTINUE SEARCH\nI2FOUND  MVC   HOLDREQ,0(R1)      SAVE THE REQUEST ENTRY\n*********************************************************************\n*        INIT3:                                                     *\n*  IF FIRST TIME, INITIALIZE THE IEWBIND API INTERFACE ENVIRONMENT  *\n*********************************************************************\nINIT3    CLI   FIRSTIME,1         FIRST TIME HERE?\n         BNE   INIT4              NO\n         MVI   FIRSTIME,0         RESET FIRST TIME SWITCH\n         STORAGE OBTAIN,LENGTH=32768,ADDR=(R11),SP=0 GET BUFFER STORAGE\n         ST    R11,BUFFERAD       SAVE ADDRESS OF BUFFER STORAGE\n         XC    DTOKEN,DTOKEN      CLEAR DIALOG TOKEN\n         IEWBIND FUNC=STARTD,     INITIATE THE BINDER DIALOG           C    C\n               RETCODE=RETCODE,       RETURN CODE                      C    C\n               RSNCODE=RSNCODE,       REASON CODE                      C    C\n               DIALOG=DTOKEN,         DIALOG TOKEN                     C    C\n               VERSION=3              USE VERSION 3 BUFFERS\n         CLC   RETCODE,ZERO       CHECK THE RETURN CODE\n         BE    I3CRWKMD           CONTINUE IF SUCCESSFUL\n         WTO   'UNABLE TO START IEWBIND DIALOG, ABENDING',ROUTCDE=11\nABEND111 ABEND 111,DUMP           TERMINATE IN ERROR\nI3CRWKMD XC    WKTOKEN,WKTOKEN    CLEAR WORKMOD TOKEN\n         IEWBIND FUNC=CREATEW,    CREATE THE WORKMOD                   C    C\n               RETCODE=RETCODE,      RETURN CODE                       C    C\n               RSNCODE=RSNCODE,      REASON CODE                       C    C\n               WORKMOD=WKTOKEN,      WORKMOD TOKEN                     C    C\n               DIALOG=DTOKEN,        DIALOG TOKEN                      C    C\n               INTENT=ACCESS,        WHAT WE NEED IT FOR               C    C\n               VERSION=3             USE VERSION 3 BUFFERS\n         CLC   RETCODE,ZERO       CHECK THE RETURN CODE\n         BE    INIT4              CONTINUE IF SUCCESSFUL\n         WTO   'UNABLE TO CREATE A WORKMOD, ABENDING',ROUTCDE=11\nABEND222 ABEND 222,DUMP           TERMINATE IN ERROR\n***********************************************************************\n*        INIT4:                                                       *\n*    DETERMINE WHETHER AN INCLUDE IS NEEDED, OR IF IT HAS ALREADY     *\n*    BEEN DONE. IF MEMBER NAME IS UNCHANGED, NO INCLUDE IS NEEDED,    *\n*    OTHERWISE, EXTRACT THE MEMBER NAME AND ISSUE AN INCLUDE.         *\n***********************************************************************\nINIT4    MVI   DDNMEMCH,0         CLEAR SWITCH\n         CLC   PRMEMBER,MEMBER    SAME MEMBER NAME BEING PROCESSED?\n         BE    INIT4A             YES, CONTINUE\n         MVI   DDNMEMCH,1         INDICATE MEMBER NAME CHANGED\n         MVC   MEMBER,PRMEMBER    SAVE MEMBER NAME\n         LA    R1,8               MAX LENGTH\n         LA    R2,MEMBER+7        POINT TO RIGHT-HAND END\nI4CKTRL  CLI   0(R2),C' '         TRAILING BLANK?\n         BNE   I4ATRHE            NO\n         BCTR  R2,0               BACK UP 1 BYTE IN MEMBER NAME\n         BCT   R1,I4CKTRL         LOOP\n         MVI   PRMERROR,C'P'      NO MEMBER NAME, PARMAMETER ERROR\n         B     RETURN             AND EXIT TO CALLER\nI4ATRHE  STH   R1,MEMLENG         SAVE MEMBER NAME LENGTH\nINIT4A   CLC   PRMDDNAM,DDNAMEC   SAME DDNAME BEING PROCESSED?\n         BE    I4INCLUD           YES, CONTINUE\n         MVI   DDNMEMCH,1         INDICATE DDNAME CHANGED\n         MVC   DDNAMEC,PRMDDNAM   SAVE DDNAME\n         LA    R1,8               MAX LENGTH\n         LA    R2,DDNAMEC+7       POINT TO RIGHT-HAND END\nI4ACKTRL CLI   0(R2),C' '         TRAILING BLANK?\n         BNE   I4AATRHE           NO\n         BCTR  R2,0               BACK UP 1 BYTE IN DDNAME\n         BCT   R1,I4ACKTRL        LOOP\n         MVI   PRMERROR,C'P'      NO DDNAME, PARMAMETER ERROR\n         B     RETURN             AND EXIT TO CALLER\nI4AATRHE STH   R1,DDNLENG         SAVE DDNAME LENGTH\nI4INCLUD CLI   DDNMEMCH,0         DDNAME OR MEMBER NAME CHANGED?\n         BE    INIT5              NO\n         MVI   LASTERR,C'P'       INSURE CURSOR RESET\n         IEWBIND FUNC=INCLUDE,    INCLUDE THE MEMBER TO PROCESS        C    C\n               RETCODE=RETCODE,      RETURN CODE                       C    C\n               RSNCODE=RSNCODE,      REASON CODE                       C    C\n               WORKMOD=WKTOKEN,      WORKMOD TOKEN                     C    C\n               INTYPE=NAME,          WE'RE SUPPLYING MEMBER NAME       C    C\n               DDNAME=DDNAME,        USE DDNAME TO FIND MEMBER         C    C\n               MEMBER=MEMNAME,       MEMBER NAME WITH LENGTH           C    C\n               VERSION=3 USE VERSION 3 BUFFERS\n         CLC   RETCODE,ZERO       CHECK THE RETURN CODE\n         BE    INIT5              CONTINUE IF SUCCESSFUL\n         WTO   'ERROR INCLUDING REQUESTED MEMBER, ABENDING',ROUTCDE=11\nABEND333 ABEND 333,DUMP           TERMINATE IN ERROR\n***********************************************************************\n*        INIT5:                                                       *\n*    DETERMINE WHETHER BUFFER SHOULD BE INITIALIZED. IF SO, ISSUE     *\n*    AN INITBUFF TO INITIALIZE IT.                                    *\n***********************************************************************\nINIT5    CLI   LASTERR,C' '       LAST CALL IN ERROR?\n         BNE   INITBUFF           YES\n         CLC   LASTRET,ZERO       LAST CALL LEFT MORE DATA?\n         BNE   INITBUFF           NO\n         CLC   LASTREQ,PRMREQST   LAST CALL FOR SAME DATA?\n         BE    INIT6              YES\nINITBUFF XC    CURSOR,CURSOR      RESET CURSOR FOR THIS CALL\n         L     R11,BUFFERAD       POINT TO THE BUFFER\n         L     R15,HOLDINIT       POINT TO INITBUFF FOR REQUESTED CLASS\n         BR    R15                GO TO APPROPRIATE BUFFER INIT.\nINITESD  IEWBUFF FUNC=INITBUF,TYPE=ESD INITIALIZE ESD BUFFER\n         B     INIT6              GO READ REQUESTED DATA\nINITRLD  IEWBUFF FUNC=INITBUF,TYPE=RLD INITIALIZE RLD BUFFER\n         B     INIT6              GO READ REQUESTED DATA\nINITTEXT IEWBUFF FUNC=INITBUF,TYPE=TEXT INITIALIZE TEXT BUFFER\n         B     INIT6              GO READ REQUESTED DATA\nINITSYM  IEWBUFF FUNC=INITBUF,TYPE=SYM  INITIALIZE SYM  BUFFER\n         B     INIT6              GO READ REQUESTED DATA\nINITIDRU IEWBUFF FUNC=INITBUF,TYPE=IDRU INITIALIZE IDRU BUFFER\n         B     INIT6              GO READ REQUESTED DATA\nINITIDRL IEWBUFF FUNC=INITBUF,TYPE=IDRL INITIALIZE IDRL BUFFER\n         B     INIT6              GO READ REQUESTED DATA\nINITIDRZ IEWBUFF FUNC=INITBUF,TYPE=IDRZ INITIALIZE IDRZ BUFFER\n         B     INIT6              GO READ REQUESTED DATA\nINITIDRB IEWBUFF FUNC=INITBUF,TYPE=IDRB INITIALIZE IDRB BUFFER\n         B     INIT6              GO READ REQUESTED DATA\nINITNAME IEWBUFF FUNC=INITBUF,TYPE=NAME INITIALIZE NAME BUFFER\n         B     INIT6              GO READ REQUESTED DATA\nINITMAP  IEWBUFF FUNC=INITBUF,TYPE=MAP  INITIALIZE MAP  BUFFER\n***********************************************************************\n*        INIT6:                                                       *\n*    IF CSECT NAME HAS CHANGED, EXTRACT IT FROM CALLER'S PARAMETERS.  *\n***********************************************************************\nINIT6    CLC   PRMCSECT,CSECT     SAME CSECT NAME BEING PROCESSED?\n         BE    MAINLINE           YES, CONTINUE\n         MVC   CSECT,PRMCSECT     SAVE CSECT NAME\n         LA    R1,8               MAX LENGTH\n         LA    R2,CSECT+7         POINT TO RIGHT-HAND END\nI6CKTRL  CLI   0(R2),C' '         TRAILING BLANK?\n         BNE   I6ATRHE            NO\n         BCTR  R2,0               BACK UP 1 BYTE IN CSECT NAME\n         BCT   R1,I6CKTRL         LOOP\n         MVI   PRMERROR,C'P'      NO CSECT NAME, PARMAMETER ERROR\n         B     RETURN             AND EXIT TO CALLER\nI6ATRHE  STH   R1,CSLENG          SAVE CSECT NAME LENGTH\n*********************************************************************\n*        MAINLINE:                                                  *\n*  ISSUE THE IEWBIND FUNC=GETD MACRO TO READ REQUESTED DATA         *\n*********************************************************************\nMAINLINE MVI   PRMERROR,C' '      CLEAR ERROR INDICATOR\n         L     R11,BUFFERAD       POINT TO BUFFER HEADER\n         LA    R12,32(R11)        POINT TO FIRST OCCURRING ELEMENT\n         CLC   PRMREQST,=CL8'NAME' IS THIS A NAME REQUEST?\n         BE    DOGETN             YES\n*        CLC   PRMREQST,=CL8'ESD'  IS THIS AN ESD REQUEST?\n*        BE    DOGETE             YES\nDOGETD   DS   0H\n         IEWBIND FUNC=GETD,       READ SPECIFIED DATA FOR CSECT NAME   C    C\n               RETCODE=RETCODE,       RETURN CODE                      C    C\n               RSNCODE=RSNCODE,       REASON CODE                      C    C\n               WORKMOD=WKTOKEN,       WORKMOD TOKEN                    C    C\n               CLASS=HOLDREQ,         IDENTIFY DATA TO BE READ         C    C\n               SECTION=CSNAME,        CSECT NAME WITH LENGTH           C    C\n               AREA=0(R11),           READ DATA INTO BUFFER            C    C\n               CURSOR=CURSOR,         CURSOR (0=FIRST CALL)            C    C\n               COUNT=COUNT,           NUMBER ESD ITEMS READ INTO BUFFERC    C\n               VERSION=3              BUFFER VERSION USED\n         B     RETURN             GO BACK TO CALLER\nDOGETN   IEWBIND FUNC=GETN,       READ CSECT (SECTION) NAMES IN MEMBER C    C\n               RETCODE=RETCODE,       RETURN CODE                      C    C\n               RSNCODE=RSNCODE,       REASON CODE                      C    C\n               WORKMOD=WKTOKEN,       WORKMOD TOKEN                    C    C\n               AREA=0(R11),           READ DATA INTO BUFFER            C    C\n               CURSOR=CURSOR,         CURSOR (0=FIRST CALL)            C    C\n               COUNT=COUNT,           NUMBER NAMES GOTTEN IN BUFFER    C    C\n               TCOUNT=TCOUNT,         TOTAL NBR NAMES IN MEMBER        C    C\n               NTYPE=SECTION,         RETURN SECTION (NOT CLASS) NAMES C    C\n               VERSION=3              USE VERSION 3 BUFFERS\n         B     RETURN             GO BACK TO CALLER\nDOGETE   IEWBIND FUNC=GETE,       READ ESD DATA FOR CSECT NAME         C    C\n               RETCODE=RETCODE,       RETURN CODE                      C    C\n               RSNCODE=RSNCODE,       REASON CODE                      C    C\n               WORKMOD=WKTOKEN,       WORKMOD TOKEN                    C    C\n               SECTION=CSNAME,        CSECT NAME WITH LENGTH           C    C\n               CLASS=HOLDREQ,         IDENTIFY DATA TO BE READ         C    C\n               AREA=0(R11),           READ DATA INTO BUFFER            C    C\n               CURSOR=CURSOR,         CURSOR (0=FIRST CALL)            C    C\n               COUNT=COUNT,           NUMBER ESD ITEMS READ INTO BUFFERC    C\n               VERSION=3              BUFFER VERSION USED\n         B     RETURN             GO BACK TO CALLER\n***********************************************************************\n*        RETURN:                                                      *\n*  RETURN PROCESSING. RESTORE CALLER'S REGS, AND RETURN TO CALLER.    *\n***********************************************************************\nRETURN   CLI   PRMERROR,C' '      ANY ERROR FOUND?\n         BNE   RETSAVE            YES\n         MVC   PRMCURSR,CURSOR    SEND BACK IEWBIND CURSOR VALUE\n         MVC   PRMRETCD,RETCODE   SEND BACK IEWBIND RETURN CODE\n         MVC   PRMRSNCD,RSNCODE   SEND BACK IEWBIND REASON CODE\n         MVC   PRMCOUNT,COUNT     SEND BACK IEWBIND COUNT VALUE\n         MVC   PRMBUFAD,BUFFERAD  SEND BACK BUFFER ADDRESS\n         CLC   PRMRETCD,FOUR      ANY IEWBIND ERROR?\n         BNH   RETSAVE            NO\n         MVI   PRMERROR,C'E'      INDICATE IEWBIND ERROR\nRETSAVE  MVC   LASTERR,PRMERROR   SAVE ERROR INDICATOR\n         MVC   LASTRET,RETCODE    SAVE RETURN CODE\n         MVC   LASTREQ,PRMREQST   SAVE LAST REQUEST CODE\nGOBACK   L     R13,4(R13)         POINT TO CALLER'S SAVE AREA\n         L     R14,12(R13)        GET RETURN ADDRESS\n         L     R15,R15RC          GET PROGRAM RETURN CODE\n         LM    R0,R12,20(R13)     RESTORE CALLER'S REGS 0-12\n         BR    R14                RETURN TO CALLER\n***********************************************************************\n*        WORKING STORAGE AREAS                                        *\n***********************************************************************\nDTOKEN   DC    D'0'               DIALOG TOKEN\nWKTOKEN  DC    D'0'               WORKMOD TOKEN\nRETCODE  DC    F'0'               IEWBIND RETURN CODE\nRSNCODE  DC    F'0'               IEWBIND REASON CODE\nCURSOR   DC    F'0'               CURSOR VALUE FROM IEWBIND\nCOUNT    DC    F'0'               COUNT FROM IEWBIND CALLS\nTCOUNT   DC    F'0'               TOTAL COUNT FROM GETN\nR15RC    DC    F'0'               END OF JOB RETURN CODE\nZERO     DC    F'0'               CONSTANT ZERO\nFOUR     DC    F'4'               CONSTANT ZERO\nBUFFERAD DC    A(0)               ADDRESS OF BUFFER FOR IEWBUFF\nDDNMEMCH DC    X'00'              CHANGED SWITCH\nFIRSTIME DC    X'01'              FIRST TIME SWITCH\nBLANKS   DC    CL133' '           CONSTANT BLANKS\n*\nLASTERR  DC    C'P'               ERROR INDICATOR FROM LAST CALL\nLASTRET  DC    XL4'FF'            RETURN CODE FROM LAST CALL\nLASTREQ  DC    CL8'NONE'          DATA REQUEST FROM LAST CALL\n*\n         DS    0F\nHOLDREQ  DS    0CL16              SAVE AREA FOR VALREQ ENTRY\nHOLDLENG DC    H'0'                  LENGTH OF CLASS NAME\nHOLDCLAS DC    CL10' '               REQUESTED CLASS NAME\nHOLDINIT DC    A(0)                  INITBUFF ADDRESS\n*\nDDNAME   DS    0H                 INCLUDE LIBRARY DDNAME AREA\nDDNLENG  DC    H'0'                  INCLUDE LIBRARY NAME LENGTH\nDDNAMEC  DC    CL8' '                INCLUDE LIBRARY DDNAME\n*\nMEMNAME  DS    0H                 MODULE (MEMBER) NAME\nMEMLENG  DC    H'0'                 MEMBER NAME LENGTH\nMEMBER   DC    CL8' '               MEMBER NAME TEXT\n*\nCSNAME   DS    0H                 CSECT NAME\nCSLENG   DC    H'0'                 CSECT NAME LENGTH\nCSECT    DC    CL8' '               CSECT NAME TEXT\n*\nVALREQ   DS    0F                 TABLE OF VALID REQUESTS\n         DC    H'5',CL10'B_ESD     ',A(INITESD)\n         DC    H'5',CL10'B_RLD     ',A(INITRLD)\n         DC    H'6',CL10'B_TEXT    ',A(INITTEXT)\n         DC    H'5',CL10'B_SYM     ',A(INITSYM)\n         DC    H'6',CL10'B_IDRU    ',A(INITIDRU)\n         DC    H'6',CL10'B_IDRL    ',A(INITIDRL)\n         DC    H'6',CL10'B_IDRZ    ',A(INITIDRZ)\n         DC    H'6',CL10'B_IDRB    ',A(INITIDRB)\n         DC    H'6',CL10'B_NAME    ',A(INITNAME)\n         DC    H'5',CL10'B_MAP     ',A(INITMAP)\n         DC    X'FFFF'\n*\n***********************************************************************\n* NAMES AND ESD BUFFER MAPPINGS. NOTE THAT THE BUFFER VERSION MUST    *\n* MATCH THE VERSION OF THE GETN AND THE GETD BINDER API'S. THE MAPBUF *\n* FUNCTION OF THE IEWBUFF MACRO PROVIDES DSECT MAPS FOR BOTH THE ESD  *\n* AND THE NAMES BUFFERS. REGISTERS 6 AND 7 ARE DEDICATED AS BASE REG- *\n* ISTERS FOR THE ESD BUFFER HEADER AND ENTRIES, RESPECTIVELY. SIMIL-  *\n* ARLY, REGISTERS 8 AND 9 ARE DEDICATED TO THE NAMES BUFFER.          *\n* NOTE THAT YOU MUST CODE THE IEWBUFF MACRO WITHIN A CSECT. ALSO NOTE *\n* THAT THE VERSION PARAMETER IN IEWBUFF MUST MATCH THE VALUE OF THE   *\n* VERSION PARAMETER IN THE GETN AND GETD BINDER API'S.                *\n***********************************************************************\n         IEWBUFF FUNC=MAPBUF,TYPE=ESD,BYTES=32768,VERSION=3,           C    C\n               HEADREG=R11,ENTRYREG=R12\n         IEWBUFF FUNC=MAPBUF,TYPE=RLD,BYTES=32768,VERSION=3,           C    C\n               HEADREG=R11,ENTRYREG=R12\n         IEWBUFF FUNC=MAPBUF,TYPE=IDRU,BYTES=32768,VERSION=3,          C    C\n               HEADREG=R11,ENTRYREG=R12\n         IEWBUFF FUNC=MAPBUF,TYPE=IDRL,BYTES=32768,VERSION=3,          C    C\n               HEADREG=R11,ENTRYREG=R12\n         IEWBUFF FUNC=MAPBUF,TYPE=IDRZ,BYTES=32768,VERSION=3,          C    C\n               HEADREG=R11,ENTRYREG=R12\n         IEWBUFF FUNC=MAPBUF,TYPE=IDRB,BYTES=32768,VERSION=3,          C    C\n               HEADREG=R11,ENTRYREG=R12\n         IEWBUFF FUNC=MAPBUF,TYPE=SYM,BYTES=32768,VERSION=3,           C    C\n               HEADREG=R11,ENTRYREG=R12\n         IEWBUFF FUNC=MAPBUF,TYPE=TEXT,BYTES=32768,VERSION=3,          C    C\n               HEADREG=R11,ENTRYREG=R12\n         IEWBUFF FUNC=MAPBUF,TYPE=NAME,BYTES=32768,VERSION=3,          C    C\n               HEADREG=R11,ENTRYREG=R12\n         IEWBUFF FUNC=MAPBUF,TYPE=MAP,BYTES=32768,VERSION=3,           C    C\n               HEADREG=R11,ENTRYREG=R12\n         LTORG\n***********************************************************************\n*  PARAMETER AREA PASSED BY CALLER                                    *\n***********************************************************************\nPARMAREA DSECT ,       READLMOD PARMAREA SENT BY CALLER\nPRMDDNAM DS    CL8     DDNAME FOR LOADLIB CONTAINING MEMBER\nPRMEMBER DS    CL8     MEMBER NAME\nPRMCSECT DS    CL8     CSECT NAME\nPRMREQST DS    CL8     NAME OF DATA TO BE RETRIEVED: ESD, RLD,\n*                           TEXT, SYM, IDRU, IDRL, IDRZ, IDRB,\n*                           NAME, OR MAP\nPRMCURSR DS    F       CURSOR VALUE. CALLER SETS THIS TO ZERO\n*                        BEFORE A FIRST CALL FOR A SET OF DATA,\n*                        THEN LEAVES IT AS-IS WHEN RETURNING FOR\n*                        ADDITIONAL DATA UNTIL IT HAS ALL BEEN\n*                        RETURNED. CURRENT VALUE IS RETURNED BY\n*                        THIS SUBROUTINE AFTER EACH CALL.\nPRMRETCD DS    F       RETURN CODE FROM IEWBIND (S/B ZERO)\nPRMRSNCD DS    F       REASON CODE FROM IEWBIND (ZERO MEANS\n*                        MORE DATA OF THIS TYPE IS AVAILABLE AND\n*                        WILL BE RETURNED IN SUBSEQUENT CALLS.\n*                        4 MEANS THE DATA IN THE BUFFER IS ALL\n*                        THAT IS AVAILABLE OF THE REQUESTED TYPE\nPRMCOUNT DS    F       NUMBER ELEMENTS AVAILABLE IN THE BUFFER\nPRMBUFAD DS    A       ADDRESS OF THE DATA BUFFER HEADER. THE\n*                        HEADER IS 32 BYTES LONG, FOLLOWED BY\n*                        THE DATA ELEMENTS.\nPRMERROR DS    CL1     ERROR INDICATOR ON RETURN:\nPRMOK    EQU   C' '      SUCCESSFUL READLMOD CALL\nPRMPRMER EQU   C'P'      PARAMETER ERROR\nPRMACERR EQU   C'E'      IEWBIND MACRO ERROR OCCURRED\nREADLMOD CSECT\n***********************************************************************\n* REGISTER EQUATES                                                    *\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REBUILD": {"ttr": 1038, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x00T\\x01\\x02\\x17_\\x01\\x16$?\\x14\\x14\\n\\xb6\\n\\x88\\x00\\x00\\xc1\\xc4\\xc3\\xc4\\xd4\\xe2\\xe3@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "2002-06-24T00:00:00", "modifydate": "2016-08-30T14:14:54", "lines": 2742, "newlines": 2696, "modlines": 0, "user": "ADCDMST"}, "text": "         TITLE '*** BUILD ASSEMBLER SOURCE FROM A LOAD MODULE ***'\nREBUILD CSECT\nREBUILD AMODE 31\nREBUILD RMODE 24\n*********************************************************************\n* THIS SUBROUTINE IS CALLED BY THE RESOURCE PROGRAM, WHICH PERFORMS *\n* INITIALIZATION FOR THE DISASSEMBLY. ONCE INITIALIZATION IS        *\n* COMPLETE, THIS ROUTINE IS ENTERED WITH POINTERS TO THE LOAD MODULE*\n* TEXT AND THE TABLES BUILT BY THE RESOURCE PROGRAM.                *\n*                                                                   *\n* REBUILD IS CALLED TWICE BY RESOURCE:                              *\n*   1ST CALL: THE STAGE BYTE = X'01'. DURING THIS PASS, THE TEXT IS *\n*             ANALYZED TO FIND LOCATIONS WHERE LABELS WILL BE NEEDED*\n*             ON SOURCE CODE OUTPUT STATEMENTS. THESE LABELS ARE    *\n*             ADDED TO THE LABEL TABLE.                             *\n*   2ND CALL: THE STAGE BYTE = X'02'. DURING THIS PASS THE SOURCE   *\n*             CODE IS DEVELOPED AND WRITTEN TO THE SYSOUT FILE.     *\n*                                                                   *\n*   DURING PROCESSING, THE OFFSET WITHIN THE TEXT OF THE CSECT BEING*\n*   DISASSEMBLED IS MAINTAINED IN THE LOCATION FIELD. THE TEXT IS   *\n*   SCANNED ONE BYTE AT A TIME. WHEN THE LOCATION FIELD IS AN EVEN  *\n*   NUMBER, THE BYTE MAY BE AN INSTRUCTION OP-CODE, AND IT IS SENT  *\n*   TO THE SRCHOC ROUTINE TO DETERMINE WHETHER OR NOT IT MAY BE AN  *\n*   INSTRUCTION OP-CODE. IF SO, THE ISINST FLAG IS SET, AND THE     *\n*   INSTRUCS ROUTINE INITIALIZES FOR AN INSTRUCTION AND THEN GOES   *\n*   TO THE APPROPRIATE FORMATTING ROUTINE. WITHIN THE FORMATTING    *\n*   ROUTINE ADDITIONAL SPECIALIZED CHECKS ARE MADE TO DETERMINE     *\n*   WHETHER THIS REALLY IS AN INSTRUCTION. IF NOT, THE ISINST FLAG  *\n*   IS RESET, AND ON RETURN, THE BLDCONST ROUTINE WILL BE CALLED TO *\n*   PROCESS THE TEXT AS A CONSTANT. BLDCONST IS ALSO CALLED IF THE  *\n*   SRCHOC ROUTINE FINDS THAT THE TEXT IS NOT A VALID INSTRUCTION   *\n*   OP-CODE.                                                        *\n*                                                                   *\n*   DURING STAGE 1 PROCESSING, INSTRUCTION STORAGE OPERANDS ARE USED*\n*   TO CREATE LABELS IF THERE IS A USING IN EFFECT FOR THE BASE     *\n*   REGISTER IN THE ADDRESS. DURING STAGE 2 PROCESSING, THE LABEL   *\n*   TABLE IS ACCESSED FOR EACH INSTRUCTION STORAGE ADDRESS TO SEE   *\n*   IS A LABEL IS AVAILABLE FOR USE IN THE OPERAND FIELD, OR IF AN  *\n*   EXPLICIT OPERAND MUST BE FORMATTED. FOR EACH OUTPUT STATEMENT   *\n*   IN STAGE 2, THE LABEL TABLE IS ALSO ACCESSED TO SEE IF THERE IS *\n*   A LABEL THAT SHOULD BE INCLUDED IN THE LABEL FIELD OF THE OUTPUT*\n*   STATEMENT.                                                      *\n*                                                                   *\n* AUTHOR R THORNTON FEB 2002                                        *\n*                                                                   *\n*   CHANGES                                                         *\n*  ----------                                                       *\n* 1) FOR IMMEDIATE INSTRUCTIONS GET 2'S COMPLEMENT AND MOVE MINUS   *\n*   '-' SIGN                                                        *\n*                                                                   *\n* 2) ALLOW R0 IN SS1 TYPE INSTRUCTION PSA REFERENCE                 *\n*                                                                   *\n* 3) GENERATE ENTRY STATMENTS                                       *\n*                                                                   *\n* 4) MAKE ENTRY TO LABEL TYPE X'20'                                 *\n*********************************************************************\n*\n*********************************************************************\n*        SAVE REGISTERS, SET UP BASE REGS, CHAIN SAVE AREAS         *\n*********************************************************************\n         USING REBUILD,R3,R4,R5\n         STM   R14,R12,12(R13)         SAVE CALLER'S REGS\n         LR    R3,R15                  SET UP BASE FIRST BASE REG\n         LA    R4,4095(R3)             SET UP SECOND\n         LA    R4,1(R4)                    BASE REGISTER\n         LA    R5,4095(R4)             SET UP THIRD\n         LA    R5,1(R5)                    BASE REGISTER\n         LA    R15,MYSAVE              POINT TO MY REGISTER SAVE AREA\n         ST    R15,8(R13)              SET LSA IN CALLER'S SAVE\n         ST    R13,4(R15)              SET HSA IN MY SAVE AREA\n         LR    R13,R15                 SET UP SAVE AREA POINTER\n         B     PARMS                   BRANCH AROUND CONSTANTS\n         DC    CL8'REBUILD'            PROGRAM NAME IDENTIFIER\n         DC    CL8'&SYSDATE'           ASSEMBLY DATE\n         DC    CL8'&SYSTIME'           ASSEMBLY TIME\nMYSAVE   DS    18F                     MY REGISTER SAVE AREA\n*********************************************************************\n* INITIALIZE FOR PROCESSING                                         *\n*********************************************************************\nPARMS    MVC   PARMAREA(ENDPARMS-PARMAREA),0(R1) SAVE PARMS\n         L     R1,STAGEA               POINT TO STAGE INDICATOR\n         MVC   STAGE,0(R1)             GET STAGE INDICATOR\n         XC    LOCATION,LOCATION       START AT LOCATION ZERO\n         MVI   INDATA,0                RESET IN DATA INDICATOR\n         L     R12,TEXTADDR            POINT TO START OF TEXT\n         ST    R12,CURRTXTA            SAVE CURRENT TEXT ADDRESS\n         L     R1,LBLTBADR             POINT TO 1ST LABEL TABLE ENTRY\n         MVC   CURLBNT,0(R1)           SAVE THE LABEL ENTRY\n         ST    R1,CURRLBLA             SAVE CURRENT LABEL ADDRESS\n         L     R12,CSECTA              POINT TO CSECT ADDRESS\n         MVC   CSECT,0(R12)            SAVE CSECT NAME\n         MVI   CONPROG,0               CLEAR INDICATOR\n         CLI   STAGE,1                 NOW IN STAGE 1?\n         BE    MAINLINE                YES\n         MVC   OUTREC,BLANKS           CLEAR THE OUTPUT RECORD AREA\n         MVC   OUTMNEM,=CL5'CSECT'     BUILD THE\n         MVC   OUTLABEL,CSECT             CSECT STATEMENT\n         BAS   R9,OUTPUT               AND WRITE TO OUTPUT\n*--------------------------------------------------------------* JR\n*             PRINT THE ENTRY POINTS                           * JR\n*--------------------------------------------------------------* JR\n         L    R6,LBLTBADR                  GET STARTING POINT    JR\nAA       USING LBLDSECT,R6                 ADDRESS THIS          JR\n         L    R7,CURRLABL                  GET LAST ENTRY        JR\nLBL_LOOP DS   0H                                                 JR\n         CR   R6,R7                        END OF THE TABLE      JR\n         BNL  MAINLINE                     GET OUT               JR\n         CLC  AA.LBLOFSET,=F'0'            1ST STATEMENT         JR\n         BE   NEXT_ONE                     BYPASS                JR\n         CLI  AA.LBLTYPE,X'20'             IS IT A ENTRY         JR\n         BNE  NEXT_ONE                     NEXT ONE              JR\n         MVC  OUTMNEM,=CL5'ENTRY'          MOVE THE ENTRY        JR\n         MVC  OUTOPND(8),AA.LBLINITU       MOVE THE LABEL        JR\n         BAS  R9,OUTPUT                    WRITE TO OUTPUT       JR\nNEXT_ONE DS   0H                                                 JR\n         LA   R6,LBLSIZE(,R6)             BUMP IT UP             JR\n         B    LBL_LOOP                    LOOP                   JR\n*********************************************************************\n* MAINLINE CONTROL                                                  *\n*********************************************************************\nMAINLINE CLC   CURRTXTA,TEXTENDA       PAST END OF TEXT?\n         BH    RETURN                  YES\n         CLC   CURLBOFS,LOCATION       TIME TO HANDLE A LABEL ENTRY?\n         BH    MLTSTDTA                NO\n         BAS   R9,LABELS               YES, GO HANDLE LABEL ENTRY\n         B     MAINLINE                CONTINUE\nMLTSTDTA CLI   INDATA,1                IN A DATA-ONLY AREA NOW?\n         BE    MLINDATA                YES, GO HANDLE CONSTANTS\n         TM    LOCATION+3,X'01'        AT AN ODD-ADDRESS?\n         BO    MLINDATA                YES, NOT AN OP-CODE\n         BAS   R9,SRCHOC               GO TEST FOR INSTRUCTION OP\n         CLI   ISINST,1                IS THIS AN OP-CODE?\n         BNE   MLINDATA                NO, GO HANDLE CONSTANTS\n         BAS   R9,INSTRUCS             ELSE PROCESS THE INSTRUCTION\n         CLI   ISINST,1                STILL LOOK LIKE AN OP-CODE?\n         BE    MAINLINE                YES, CONTINUE\nMLINDATA BAS   R9,BLDCONST             GO PROCESS AS A CONSTANT\n         B     MAINLINE                CONTINUE\n*********************************************************************\n* PROCESS NEXT LABEL ENTRY                                          *\n*********************************************************************\nLABELS   ST    R9,LS9                  SAVE RETURN ADDRESS\n         LA    R9,LSNEXT               GET DESIRED RETURN ADDRESS\n         CLI   CURLBTYP,CURLDROP       DROP USING REGISTER?\n         BE    ADDDROP                 YES\n         CLI   CURLBTYP,CURLUSNG       SPECIFY USING REGISTER?\n         BE    ADDDROP                 YES\n         CLI   CURLBTYP,CURLDTST       DATA-ONLY START?\n         BE    STDROP                  YES\n         CLI   CURLBTYP,CURLDTND       DATA-ONLY END?\n         BE    STDROP                  YES\n         CLI   CURLBTYP,CURENTRY       ESD ENTRY                  JR\n         BE    SMPLABEL                YES                        JR\n         CLI   CURLBTYP,CURLABEL       SIMPLE LABEL ENTRY?\n         BE    SMPLABEL                YES\n         CLI   CURLBTYP,CURLADCN       ADCON LOCATION?\n         BE    ADCONLOC                YES\n         CLI   CURLBTYP,CURLVCON       V-CON LOCATION?\n         BE    VCONLOC                 YES\nLSNEXT   L     R1,CURRLBLA             POINT TO CURRENT LABEL ENTRY\n         LA    R1,L'CURLBNT(R1)        POINT TO NEXT LABEL ENTRY\n         C     R1,LBLTBEND             PAST END OF LABEL TABLE?\n         BNH   LSMVENTY                NO\n         MVC   CURLBOFS,HEXFFS         YES, SET LABEL OFFSET HIGH\n         B     LSXIT                   AND EXIT\nLSMVENTY MVC   CURLBNT,0(R1)           SAVE THE LABEL ENTRY\n         ST    R1,CURRLBLA             SAVE CURRENT LABEL ADDRESS\nLSXIT    L     R9,LS9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nLS9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n* ADD OR DROP USING REGISTERS                                       *\n*********************************************************************\nADDDROP  ST    R9,AD9                  SAVE RETURN ADDRESS\n         SR    R1,R1                   CLEAR FOR INSERT\n         IC    R1,CURLBURG             INSERT THE USING REGISTER NBR\n         SLL   R1,2                    MULTIPLY BY ENTRY LENGTH = 4\n         LA    R1,USENTRY(R1)          POINT TO ENTRY IN USING TABLE\n         XC    0(L'USENTRY,R1),0(R1)   CLEAR THE ENTRY\n         CLI   CURLBTYP,CURLUSNG       SPECIFY USING REGISTER?\n         BE    ADUSING                 YES\n         CLI   STAGE,1                 IN STAGE 1?\n         BE    ADXIT                   YES, EXIT\n         MVC   HOLDOUT,OUTREC          SAVE OUTPUT RECORD\n         MVC   OUTREC,BLANKS           CLEAR FOR USING OR DROP\n         MVC   OUTMNEM,=CL5'DROP'      SET MNEMONIC\n         LA    R8,OUTOPND              POINT TO OUTPUT OPERAND FIELD\n         IC    R1,CURLBURG             PICK UP REGISTER TO DROP\n         BAS   R9,REGOPNDS             GO FORMAT THE REGISTER OPND\n         BAS   R9,OUTPUT               WRITE THE DROP STATEMENT\n         MVC   OUTREC,HOLDOUT          RESTORE OUTPUT RECORD\n         B     ADXIT                   AND EXIT\nADUSING  MVC   0(L'USENTRY,R1),CURLBINU SET UP USING REGISTER ENTRY\n         OI    0(R1),X'80'             SET IN-USE BIT\n         CLI   STAGE,1                 IN STAGE 1?\n         BE    ADXIT                   YES, EXIT\n         MVC   HOLDOUT,OUTREC          SAVE OUTPUT RECORD\n         MVC   OUTREC,BLANKS           CLEAR FOR USING OR DROP\n         MVC   OUTMNEM,=CL5'USING'     SET MNEMONIC\n         CLC   CURLBINU,XZROS          IS USING VALUE ZERO?\n         BNE   ADUSLBL                 NO, GO BUILD LABEL\n         MVC   OUTOPND(8),CSECT        YES, USE CSECT NAME\n         LA    R8,OUTOPND+7            POINT TO LAST POSSIBLE BYTE\nADUSLUP  CLI   0(R8),C' '              AT RIGHT END OF CSECT NAME?\n         BNE   ADUSRHE                 YES\n         BCT   R8,ADUSLUP              NO, BACK UP AND CHECK AGAIN\nADUSRHE  MVI   1(R8),C','              MOVE OPERAND SEPARATOR\n         LA    R8,2(R8)                STEP PAST THE COMMA\n         B     ADUSREG                 GO FORMAT THE REGISTER OPND\nADUSLBL  MVI   OUTOPND,C'A'            FORMAT\n         UNPK  OUTOPND+1(7),CURLBINU+1(4)   USING\n         TR    OUTOPND+1(6),TRCHAR-C'0'      LABEL\n         MVI   OUTOPND+7,C','          SEPARATE OPERANDS\n         LA    R8,OUTOPND+8            POINT TO REG OPERAND FIELD\nADUSREG  IC    R1,CURLBURG             PICK UP USING REGISTER\n         BAS   R9,REGOPNDS             GO FORMAT THE REGISTER OPND\n         BAS   R9,OUTPUT               WRITE THE DROP STATEMENT\n         MVC   OUTREC,HOLDOUT          RESTORE OUTPUT RECORD\nADXIT    L     R9,AD9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nAD9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n* START OR STOP DATA-ONLY AREAS                                     *\n*********************************************************************\nSTDROP   ST    R9,SD9                  ASSUME DATA-ONLY END\n         MVI   INDATA,0                ASSUME DATA-ONLY END\n         CLI   CURLBTYP,CURLDTND       DATA-ONLY END?\n         BE    SDXIT                   YES, EXIT\n         MVI   INDATA,1                NO, INDICATE NOW IN DATA-ONLY\nSDXIT    L     R9,SD9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nSD9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n* PROCESS SIMPLE LABEL ENTRY                                        *\n*********************************************************************\nSMPLABEL ST    R9,SL9                  ASSUME DATA-ONLY END\n         CLI   STAGE,1                 NOW IN STAGE 1?\n         BE    SLXIT                   YES, NOTHING TO DO NOW\n         CLI   CONPROG,0               IS A CONSTANT IN PROGRESS?\n         BE    SLCKLBL                 NO\nSLFORCE  BAS   R9,FORCECON             YES, GO FORCE CONSTANT OUT\nSLCKLBL  CLI   CURLBLBL,C'A'           VALID LABEL ON LABEL ENTRY?\n         BNL   SLCKLBL2                YES\n         MVI   CURLBLBL,C'A'           NO, MOVE LABEL NAME 1ST CHAR\n         UNPK  CURLBLBL+1(7),CURLBOFS+1(4) UNPACK TO MAKE PRINTABLE\n         MVI   CURLBLBL+7,C' '         CLEAR TRASH\n         TR    CURLBLBL+1(6),TRCHAR-C'0' MAKE IT PRINTABLE\nSLCKLBL2 CLI   OUTLABEL,C' '           LABEL ALREADY ON OUTPUT?\n         BE    SLMOVE                  NO\n         MVC   HOLDOUT,OUTREC          SAVE OUTPUT RECORD\n         MVC   OUTMNEM(3),=CL3'EQU'    SET MNEMONIC TO EQU\n         MVI   OUTOPND,C'*'            SHOW LABEL FOR HERE\n         CLC   LBLLENG,H0              LENGTH ASSOCIATED WITH LABEL?\n         BE    SLOUTPT                 NO\n         MVI   OUTOPND+1,C','          MOVE SEPARATOR\n         LA    R8,OUTOPND+2            POINT PAST THE COMMA\n         LH    R9,LBLLENG              PICK UP LABEL LENGTH\n         BAS   R9,DECMOPND             FORMAT THE LENGTH\nSLOUTPT  BAS   R9,OUTPUT               YES, GO WRITE CURRENT OUTPUT\n         MVC   OUTREC,HOLDOUT          RESTORE OUTPUT RECORD\nSLMOVE   MVC   OUTLABEL,CURLBLBL       MOVE THE LABEL TO OUTPUT\nSLMVLENG MVC   LBLLENG,CURLBRLD        SAVE ASSOCIATED LENGTH\nSLCKOFST CLC   CURLBOFS,LOCATION       LABEL IS FOR THIS LOCATION?\n         BNL   SLCKPROG                YES\n         MVC   HOLDOUT,OUTREC          SAVE OUTPUT RECORD\n         MVC   OUTMNEM(3),=CL3'EQU'    SET MNEMONIC TO EQU\n         MVI   OUTOPND,C'*'            SHOW LABEL FOR HERE\n         MVI   OUTOPND+1,C'-'          MINUS SIGN\n         L     R1,LOCATION             COMPUTE\n         S     R1,CURLBOFS                NEGATIVE ORIGIN\n         LA    R8,OUTOPND+2            POINT TO OPERAND LOCATION\n         BAS   R9,DECMOPND             GO FORMAT THE NEGATIVE ORIGIN\n         CLC   LBLLENG,H0              LENGTH ASSOCIATED WITH LABEL?\n         BE    SLOUTPT2                NO\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST THE COMMA\n         LH    R1,LBLLENG              PICK UP LABEL LENGTH\n         BAS   R9,DECMOPND             GO FORMAT THE LENGTH\nSLOUTPT2 BAS   R9,OUTPUT               YES, GO WRITE CURRENT OUTPUT\n         MVC   CURLBLBL,BLANKS         CLEAR THE LABEL\n         MVC   LBLLENG,XZROS           AND LENGTH\n         MVC   OUTREC,HOLDOUT          RESTORE OUTPUT RECORD\n         MVC   OUTLABEL,BLANKS         CLEAR ANY LABEL THERE\nSLCKPROG CLI   OUTMNEM,C' '            ANY STATEMENT IN PROGRESS?\n         BNE   SLXIT                   YES\n         CLC   CURLBLBL,CSECT          LABEL IS CSECT NAME?\n         BNE   SLXIT                   NO\n         MVC   OUTLABEL,BLANKS         YES, ERASE IT\n         CLC   OUTREC,BLANKS           ANYTHING LEFT TO WRITE?\n         BE    SLXIT                   NO\n         BAS   R9,OUTPUT               WRITE CSECT STATEMENT\nSLXIT    L     R9,SL9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nSL9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n* PROCESS ADDRESS CONSTANTS (ADCON)                                 *\n*********************************************************************\nADCONLOC ST    R9,AC9                  ASSUME DATA-ONLY END\n         CLI   STAGE,1                 NOW IN STAGE 1?\n         BE    ACADVNC                 YES\n         CLI   CONPROG,0               IS A CONSTANT IN PROGRESS?\n         BE    ACCHKLB                 NO\n         BAS   R9,FORCECON             YES, GO FORCE CONSTANT OUT\nACCHKLB  CLI   OUTLABEL,C' '           LABEL ALREADY ON OUTPUT?\n         BE    ACMOVE                  NO\n         CLI   CURLBLBL,C' '           CONSTANT HAS A LABEL?\n         BE    ACMVMNE                 NO, USE EXISTING LABEL\n         MVC   HOLDOUT,OUTREC          SAVE OUTPUT RECORD\n         MVC   OUTMNEM(3),=CL3'EQU'    SET MNEMONIC TO EQU\n         MVI   OUTOPND,C'*'            SHOW LABEL FOR HERE\n         CLC   LBLLENG,H0              LENGTH ASSOCIATED WITH LABEL?\n         BE    ACOUTLB                 NO\n         MVI   OUTOPND+1,C','          MOVE SEPARATOR\n         LH    R9,LBLLENG              PICK UP LABEL LENGTH\n         CVD   R9,DBLWD                CONVERT IT TO PACKED DECIMAL\n         UNPK  OUTOPND+2(3),DBLWD UNPACK LABEL LENGTH\n         OI    OUTOPND+4,X'F0'         CLEAR SIGN\nACOUTLB  BAS   R9,OUTPUT               YES, GO WRITE CURRENT OUTPUT\n         MVC   OUTREC,HOLDOUT          RESTORE OUTPUT RECORD\nACMOVE   MVC   OUTLABEL,CURLBLBL       LABEL TO OUTPUT RECORD\nACMVMNE  MVC   OUTMNEM(2),=CL2'DC'     MNEMONIC\n         MVC   OUTOPND(2),=CL2'AL'     START THE OPERAND\n         MVC   OUTOPND+2(1),CURLBRLD+1 MOVE LENGTH\n         OI    OUTOPND+2,X'F0'             OF CONSTANT\n         MVI   OUTOPND+3,C'('          MOVE THE OPEN PAREN\n         L     R12,CURRTXTA            POINT TO CURRENT TEXT\n         ICM   R2,15,0(R12)            PICK UP 4 BYTES\n         CLC   CURLBRLD,H4             4-BYTE ADCON?\n         BNL   ACSTRR2                 YES\n         SRL   R2,8                    NO, SHIFT OUT LOW ORDER BYTE\n         CLC   CURLBRLD,H3             3-BYTE ADCON?\n         BE    ACSTRR2                 YES\n         SRL   R2,8                    NO, SHIFT OUT LOW ORDER BYTE\n         CLC   CURLBRLD,H2             2-BYTE ADCON?\n         BE    ACSTRR2                 YES\n         SRL   R2,8                    NO, SHIFT OUT LOW ORDER BYTE\nACSTRR2  ST    R2,ADCNVALU             SAVE ADCON TEXT VALUE\n         L     R1,LBLTBADR             POINT TO THE LABEL TABLE\n         USING LBLDSECT,R1\nACCHKND  C     R1,LBLTBEND             PAST END OF TABLE?\n         BH    ACNOLBL                 YES\n         C     R2,LBLOFSET             FOUND THE LABEL ENTRY?\n         BH    ACLBLSTP                NO, NOT THERE YET\n         BL    ACNOLBL                 NO, PAST THE OFFSET\n         CLI   LBLLABEL,C'A'           ENTRY HAS A LABEL?\n         BNL   ACUSELBL                YES\nACLBLSTP LA    R1,L'LBLENTRY(R1)       STEP TO NEXT ENTRY\n         B     ACCHKND                 LOOP TO FIND THE LABEL ENTRY\nACUSELBL MVC   OUTOPND+4(8),LBLLABEL   MOVE LABEL TO OPERAND\n         DROP  R1\n         LA    R1,OUTOPND+11           PT TO LAST POSSIBLE LABEL BYTE\nACCKTRL  CLI   0(R1),C' '              AT A TRAILING BLANK?\n         BNE   ACMVRPN1                NO, GO MOVE ENDING PAREN\n         BCT   R1,ACCKTRL              CONTINUE\nACMVRPN1 MVI   1(R1),C')'              MOVE ENDING PAREN\n         B     ACFINI                  CONTINUE\nACNOLBL  MVC   OUTOPND+4(8),CSECT      MOVE IN CSECT NAME\n         LA    R1,OUTOPND+11           PT TO LAST POSSIBLE BYTE\nACCKRHE2 CLI   0(R1),C' '              AT RIGHT END OF NAME?\n         BNE   ACMVPLUS                YES\n         BCT   R1,ACCKRHE2             LOOP TO FIND RHE\nACMVPLUS MVI   1(R1),C'+'              MOVE PLUS SIGN\n         L     R2,ADCNVALU             GET ADCON TEXT VALUE\n         CVD   R2,DBLWD                CONVERT IT TO DECIMAL\n         UNPK  UNPKWORK,DBLWD          UNPACK ADCON VALUE\n         OI    UNPKWORK+7,X'F0'        CLEAR SIGN\n         LA    R2,UNPKWORK             POINT TO 1ST BYTE\n         LA    R15,8                   MAX LENGTH\nACCKLDG0 CLI   0(R2),C'0'              AT A LEADING ZERO?\n         BNE   ACATLHE                 NO\n         LA    R2,1(R2)                YES, STEP TO NEXT DIGIT\n         BCT   R15,ACCKLDG0            AND LOOP\n         MVI   1(R1),C')'              NO OFFSET, JUST RT PAREN\n         B     ACFINI                  CONTINUE\nACATLHE  BCTR  R15,0                   MAKE LENGTH CODE FOR MOVE\n         EX    R15,ACMVOFST            MOVE IN THE OFFSET\n         AR    R1,R15                  POINT TO END\n         MVI   3(R1),C')'              AND ADD FINAL PAREN\nACFINI   UNPK  OUTOFFST(7),LOCATION+1(4) UNPACK OFFSET\n         MVI   OUTOFFST+6,C' '         CLEAR TRASH\n         TR    OUTOFFST,TRCHAR-C'0'    MAKE PRINTABLE\n         L     R12,CURRTXTA            POINT TO CURRENT TEXT\n         UNPK  OUTTEXT(9),0(5,R12)     UNPACK TEXT\n         MVI   OUTTEXT+8,C' '          CLEAR TRASH\n         TR    OUTTEXT(8),TRCHAR-C'0'  MAKE PRINTABLE\n         CLI   CURLBRLD+1,4            4-BYTE ADCON?\n         BNL   ACOUTPT                 YES\n         MVC   OUTTEXT+6(2),=CL2'  '   LESS, CLEAR LAST TWO\n         CLI   CURLBRLD+1,3            3-BYTE ADCON?\n         BNL   ACOUTPT                 YES\n         MVC   OUTTEXT+4(2),=CL2'  '   LESS, CLEAR LAST TWO\n         CLI   CURLBRLD+1,2            2-BYTE ADCON?\n         BNL   ACOUTPT                 YES\n         MVC   OUTTEXT+2(2),=CL2'  '   LESS, CLEAR LAST TWO\nACOUTPT  BAS   R9,OUTPUT               WRITE TO OUTPUT\nACADVNC  LH    R1,CURLBRLD             GET ADCON LENGTH\n         A     R1,CURRTXTA             UPDATE CURRENT\n         ST    R1,CURRTXTA                TEXT ADDRESS\n         LH    R1,CURLBRLD             GET ADCON LENGTH\n         A     R1,LOCATION             UPDATE CURRENT\n         ST    R1,LOCATION                LOCATION OFFSET\nACXIT    L     R9,AC9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nAC9      DC    A(0)                    RETURN ADDRESS\nACMVOFST MVC   2(1,R1),0(R2)           EXECUTED MOVE\n*********************************************************************\n* PROCESS V-CON ENTRIES                                             *\n*********************************************************************\nVCONLOC  ST    R9,VC9                  ASSUME DATA-ONLY END\n         CLI   STAGE,1                 NOW IN STAGE 1?\n         BE    VCADVNC                 YES\n         CLI   CONPROG,0               IS A CONSTANT IN PROGRESS?\n         BE    VCCHKLB                 NO\n         BAS   R9,FORCECON             YES, GO FORCE CONSTANT OUT\nVCCHKLB  CLI   OUTLABEL,C' '           LABEL ALREADY ON OUTPUT?\n         BE    VCMOVE                  NO\n         CLI   CURLBLBL,C' '           CONSTANT HAS A LABEL?\n         BE    VCMOVE                  NO, USE EXISTING LABEL\n         MVC   HOLDOUT,OUTREC          SAVE OUTPUT RECORD\n         MVC   OUTMNEM(3),=CL3'EQU'    SET MNEMONIC TO EQU\n         MVI   OUTOPND,C'*'            SHOW LABEL FOR HERE\n         CLC   LBLLENG,H0              LENGTH ASSOCIATED WITH LABEL?\n         BE    VCOUTLB                 NO\n         MVI   OUTOPND+1,C','          MOVE SEPARATOR\n         LH    R9,LBLLENG              PICK UP LABEL LENGTH\n         CVD   R9,DBLWD                CONVERT IT TO PACKED DECIMAL\n         UNPK  OUTOPND+2(3),DBLWD UNPACK LABEL LENGTH\n         OI    OUTOPND+4,X'F0'         CLEAR SIGN\nVCOUTLB  BAS   R9,OUTPUT               YES, GO WRITE CURRENT OUTPUT\n         MVC   OUTREC+8(72),HOLDOUT+8  RESTORE OUTPUT RECORD - LABEL\nVCMOVE   MVC   OUTMNEM(2),=CL2'DC'     SET UP MNEMONIC\n         MVC   OUTOPND(2),=CL2'VL'     BEGIN OPERAND\n         MVC   OUTOPND+2(1),CURLBRLD+1 MOVE VCON LENGTH\n         OI    OUTOPND+2,X'F0'            AND MAKE IT PRINTABLE\n         MVI   OUTOPND+3,C'('          OPENING PAREN\n         MVC   OUTOPND+4(8),CURLBLBL   MOVE IN EXTERNAL NAME\n         LA    R2,OUTOPND+11           POINT TO LAST POSSIBLE BYTE\nVCCHKRHE CLI   0(R2),C' '              AT RIGHT END?\n         BNE   VCATRHE                 YES\n         BCT   R2,VCCHKRHE             LOOP TO FIND RHE\nVCATRHE  MVI   1(R2),C')'              MOVE CLOSING PAREN\n         UNPK  OUTOFFST(7),LOCATION+1(4) UNPACK OFFSET\n         MVI   OUTOFFST+6,C' '         CLEAR TRASH\n         TR    OUTOFFST,TRCHAR-C'0'    MAKE PRINTABLE\n         L     R12,CURRTXTA            POINT TO CURRENT TEXT\n         UNPK  OUTTEXT(9),0(5,R12)     UNPACK TEXT\n         MVI   OUTTEXT+8,C' '          CLEAR TRASH\n         TR    OUTTEXT(8),TRCHAR-C'0'  MAKE PRINTABLE\n         CLI   CURLBRLD+1,4            4-BYTE V-CON?\n         BNL   VCOUTPT                 YES\n         MVC   OUTTEXT+6(2),=CL2'  '   LESS, CLEAR LAST TWO\n         CLI   CURLBRLD+1,3            3-BYTE V-CON?\n         BNL   VCOUTPT                 YES\n         MVC   OUTTEXT+4(2),=CL2'  '   LESS, CLEAR LAST TWO\n         CLI   CURLBRLD+1,2            2-BYTE V-CON?\n         BNL   VCOUTPT                 YES\n         MVC   OUTTEXT+2(2),=CL2'  '   LESS, CLEAR LAST TWO\nVCOUTPT  BAS   R9,OUTPUT               YES, GO WRITE CURRENT OUTPUT\nVCADVNC  LH    R1,CURLBRLD             GET ADCON LENGTH\n         A     R1,CURRTXTA             UPDATE CURRENT\n         ST    R1,CURRTXTA                TEXT ADDRESS\n         LH    R1,CURLBRLD             GET ADCON LENGTH\n         A     R1,LOCATION             UPDATE CURRENT\n         ST    R1,LOCATION                LOCATION OFFSET\nVCXIT    L     R9,VC9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nVC9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n* PROCESS MACHINE INSTRUCTIONS. GENERAL OUTPUT FORMATTING IS DONE   *\n* AND A SPECIALIZED ROUTINE IS CALLED TO FORMAT THE OPERANDS. IF    *\n* ANY TESTS DETERMINE THIS MAY NOT BE AN INSTRUCTION, THE ISINST    *\n* FLAG IS TURNED OFF, AND INSTRUCTION PROCESSING IS ABANDONED.      *\n*********************************************************************\nINSTRUCS ST    R9,IS9                  SAVE RETURN ADDRESS\n         CLI   CONPROG,0               IS A CONSTANT IN PROGRESS?\n         BE    ISMVMN                  NO\n         BAS   R9,FORCECON             YES, GO WRITE CONSTANT\nISMVMN   MVC   OUTMNEM,INSTMNEM        MNEMONIC TO OUTPUT\n         UNPK  OUTOFFST(7),LOCATION+1(4) UNPACK LOCATION\n         MVI   OUTOFFST+6,C' '         CLEAR TRASH\n         TR    OUTOFFST,TRCHAR-C'0'    MAKE PRINTABLE\n         UNPK  OUTTEXT(13),INSTTEXT(7) UNPACK INSTRUCTION TEXT\n         MVI   OUTTEXT+12,C' '         CLEAR TRASH\n         TR    OUTTEXT,TRCHAR-C'0'     MAKE PRINTABLE\n         CLI   INSTLENG,6              6-BYTE INSTRUCTION?\n         BE    ISOPNDS                 YES\n         MVC   OUTTEXT+8(4),=CL4' '    NO, CLEAR LAST TWO BYTES\n         CLI   INSTLENG,4              4-BYTE INSTRUCTION?\n         BE    ISOPNDS                 YES\n         MVC   OUTTEXT+4(4),=CL4' '    NO, CLEAR LAST TWO BYTES\nISOPNDS  LA    R9,ISRETRN              LOAD DESIRED RETURN ADDRESS\n         LA    R8,OUTOPND              POINT TO OPERAND FIELD\n         SR    R2,R2                   CLEAR FOR INSERT\n         IC    R2,INSTFMT              PICK UP INSTRUCTION FORMAT CODE\n         SLL   R2,2                    MULTIPLY BY 4\n         B     *(R2)                   GO PROCESS OPERANDS\n         B     EOPND                   FMT=01: E FORMAT\n         B     RIOPND                  FMT=02: RI FORMAT\n         B     RR1OPND                 FMT=03: RR FORMAT TYPE 1\n         B     RR2OPND                 FMT=04: RR FORMAT TYPE 2\n         B     RR3OPND                 FMT=05: RR FORMAT TYPE 3\n         B     RRE1OPND                FMT=06: RRE FORMAT TYPE 1\n         B     RRE2OPND                FMT=07: RRE FORMAT TYPE 2\n         B     RRE3OPND                FMT=08: RRE FORMAT TYPE 3\n         B     RRF1OPND                FMT=09: RRF FORMAT TYPE 1\n         B     RRF2OPND                FMT=0A: RRF FORMAT TYPE 2\n         B     RRF3OPND                FMT=0B: RRF FORMAT TYPE 3\n         B     RS1OPND                 FMT=0C: RS FORMAT TYPE 1\n         B     RS2OPND                 FMT=0D: RS FORMAT TYPE 2\n         B     RS3OPND                 FMT=0E: RS FORMAT TYPE 3\n         B     RSIOPND                 FMT=0F: RSI FORMAT\n         B     RX1OPND                 FMT=10: RX FORMAT TYPE 1\n         B     RX2OPND                 FMT=11: RX FORMAT TYPE 2\n         B     RXEOPND                 FMT=12: RXE FORMAT\n         B     RXFOPND                 FMT=13: RXF FORMAT\n         B     S1OPND                  FMT=14: S FORMAT TYPE 1\n         B     S2OPND                  FMT=15: S FORMAT TYPE 2\n         B     SIOPND                  FMT=16: SI FORMAT\n         B     SS1OPND                 FMT=17: SS FORMAT TYPE 1\n         B     SS2OPND                 FMT=18: SS FORMAT TYPE 2\n         B     SS3OPND                 FMT=19: SS FORMAT TYPE 3\n         B     SS4OPND                 FMT=1A: SS FORMAT TYPE 4\n         B     SS5OPND                 FMT=1B: SS FORMAT TYPE 5\n         B     SSEOPND                 FMT=1C: SSE FORMAT\n         B     RR4OPND                 FMT=1D: RR FORMAT TYPE 4\n         B     S3OPND                  FMT=14: S FORMAT TYPE 3\nISRETRN  CLI   ISINST,1                STILL LOOKS LIKE AN INSTRUCTION?\n         BE    ISOUTPT                 YES, GO WRITE TO OUTPUT\n         MVC   OUTREC,BLANKS           NO, CLEAR OUTPUT RECORD\n         B     ISXIT                   AND EXIT\nISOUTPT  CLI   STAGE,1                 NOW IN STAGE 1?\n         BE    ISADVNC                 YES\n         BAS   R9,OUTPUT               GO WRITE TO OUTPUT\nISADVNC  L     R1,CURRTXTA             POINT TO CURRENT TEXT ADDRESS\n         SR    R2,R2                   CLEAR FOR INSERT\n         IC    R2,INSTLENG             PICK UP INSTRUCTION LENGTH\n         AR    R1,R2                   POINT TO NEXT INSTRUCTION\n         ST    R1,CURRTXTA             UPDATE TEXT ADDRESS\n         A     R2,LOCATION             UPDATE LOCATION\n         ST    R2,LOCATION                COUNTER OFFSET\n         MVI   LAST,C'I'               SHOW LAST WAS INSTRUCTION\n         CLI   INSTCCNT,0              THIS INST SETS COND CODE?\n         BE    ISXIT                   NO\n         SR    R1,R1                   YES, CLEAR FOR INSERT\n         IC    R1,INSTCCNT             PICK UP TABLE ENTRY NBR\n         BCTR  R1,0                    MAKE ZERO-RELATIVE\n         MHI   R1,L'CCTBLNT            MULTIPLY BY TABLE ENTRY LENGTH\n         LA    R1,CCTBLNT(R1)          POINT TO ENTRY\n         MVC   LASTCCNT,0(R1)          AND SAVE THE ENTRY\nISXIT    L     R9,IS9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nIS9      DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              E-FORMAT INSTRUCTION OPERANDS                          *\n*                                                                     *\n* THESE 2 BYTE INSTRUCTIONS HAVE TWO-BYTE OP-CODES, WHERE THE FIRST   *\n* BYTE IS X'01'                                                       *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                       OPERAND CODING       *\n* E1   01   .OC.OC.OC.OC.                        (NONE)               *\n*                                                                     *\n* SINCE THESE INSTRUCTIONS HAVE NO OPERANDS, NO ACTION IS REQUIRED.   *\n*                                                                     *\n* E-FORMAT INSTRUCTIONS INCLUDE:                                      *\n*       PR    UPT   SCKPF TRAP2                                       *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *\n***********************************************************************\nEOPND    ST    R9,EO9                  SAVE RETURN ADDRESS\nEOXIT    L     R9,EO9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nEO9      DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              RI-FORMAT INSTRUCTION OPERANDS                         *\n*                                                                     *\n* THESE 4-BYTE INSTRUCTIONS HAVE 1.5-BYTE OP-CODES, THE FIRST OP-CODE *\n* BYTE IS X'A7' AND THE THIRD NYBBLE IS LOCATED IN THE 4TH NYBBLE     *\n* OF THE INSTRUCTION.                                                 *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* RI1   02  .OC.OC.R1.OC.I2.I2.I2.I2.             R1,I2               *\n*                                                                     *\n* RI-FORMAT INSTRUCTIONS INCLUDE:                                     *\n*       TMH   TML   BRC   BRAS  BRCT  LHI   AHI   MHI   CHI           *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *\n*                                                                     *\n* THE RELATIVE BRANCH INSTRUCTIONS (BRC, BRAS, AND BRCT) TREAT THE I2 *\n* OPERAND AS A NUMBER OF HALFWORDS TO THE BRANCH TARGET BEFORE OR     *\n* AFTER THE CURRENT LOCATION (*- OR *+).                              *\n***********************************************************************\nRIOPND   ST    R9,RI9                  SAVE RETURN ADDRESS\n         CLI   STAGE,1                 THIS STAGE 1?\n         BE    RIXIT                   YES, NOTHING TO DO HERE\n         IC    R1,INSTTEXT+1           GET R1 OPERAND\n         SRL   R1,4                      TO LOW NYBBLE\n         BAS   R9,REGOPNDS             GO FORMAT THE R1 REGISTER\n         CLI   OUTMNEM,C'B'            THIS A RELATIVE BRANCH?\n         BNE   RIHEXI2                 NO\n         MVC   0(3,R8),CMASTRP         MOVE \",*+\"\n         SR    R1,R1                   CLEAR FOR INSERT\n         ICM   R1,3,INSTTEXT+2         PICK UP .I2.I2.I2.I2.\n         BNM   RIRELOP                 BRANCH IF NOT MINUS\n         MVI   2(R8),C'-'              CHANGE THE SIGN\n         LCR   R1,R1                   MAKE VALUE POSITIVE\nRIRELOP  SLL   R1,1                    DOUBLE FOR HALFWORDS\n         LA    R8,3(R8)                STEP PAST THE DELIMITER\n         BAS   R9,DECMOPND             GO FORMAT THE NBR HALFWORDS\n         B     RIXIT                   GO TO EXIT\nRIHEXI2  DS    0H\n         XR    R1,R1                   CLEAR R1                   JR\n         ICM   R1,3,INSTTEXT+2         PICK UP .I2.I2.I2.I2.      JR\n         BNM   ISPOS                   BRANCH IF NOT MINUS        JR\n         LCR   R1,R1                   MAKE POSITIVE              JR\n         STCM  R1,B'0011',INSTTEXT+2   SAVE IT BACK               JR\n         MVC   0(4,R8),=C',-X'''       MOVE MINUS SIGN            JR\n         LA    R8,1(,R8)               BUMP IT UP                 JR\n         B     SETIMD                  SET IMMEDIATE OPERAND      JR\nISPOS    DS    0H                                                 JR\n         MVC   0(3,R8),CMAXQT          MOVE \",X'\"                 JR\nSETIMD   DS    0H                                                 JR\n         UNPK  3(5,R8),INSTTEXT+2(3)   UNPACK IMMEDIATE OPERAND\n         TR    3(4,R8),TRCHAR-C'0'     MAKE IT PRINTABLE\n         MVI   7(R8),C''''             MOVE ENDING QUOTE\nRIXIT    L     R9,RI9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nRI9      DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              RR-FORMAT INSTRUCTIONS, TYPE 1 OPERANDS                *\n* THESE 2-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                       OPERAND CODING       *\n* RR1   03  .OC.OC.R1.R2.                        R1,R2                *\n*                                                                     *\n* RR-FORMAT TYPE 1 INSTRUCTIONS INCLUDE:                              *\n*       BALR  BCTR  BSM   BASSM BASR  MVCL  CLCL  LPR   LNR           *\n*       LTR   LCR   NR    CLR   OR    XR    LR    CR    AR            *\n*       SR    MR    DR    ALR   SLR   LPDR  LNDR  LTDR  LCDR          *\n*       HDR   LDXR  MXR   MXDR  LDR   CDR   ADR   SDR   MDR           *\n*       DDR   AWR   SWR   LPER  LNER  LTER  LCER  HER   LEDR          *\n*       AXR   SXR   LER   CER   AER   SER   MDER  DER   AUR           *\n*       SUR                                                           *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: X'01'                               *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: X'80', X'10', X'04', X'02', X'01'   *\n***********************************************************************\nRR1OPND  ST    R9,RR19                 SAVE RETURN ADDRESS\n         CLC   INSTFLG1(2),XZROS       ANY FLAGS?\n         BE    RR1CKSTG                NO\nRR1F101  TM    INSTFLG1,X'01'          R2 MUST BE FP PAIR START?\n         BZ    RR1F280                 NO\n         MVC   DBLWD(1),INSTTEXT+1     MOVE .R1.R2.\n         NI    DBLWD,X'0F'             CLEAR ALL BUT R2\n         TRT   DBLWD(1),FLTPTPR        VALID FLOATING POINT PAIR?\n         BZ    RR1F280                 YES\nRR1NOTI  MVI   ISINST,0                SHOW NOT AN INSTRUCTION\n         B     RR1XIT                  AND EXIT\nRR1F280  TM    INSTFLG2,X'80'          R1 MUST BE FP PAIR START?\n         BZ    RR1F210                 NO\n         PACK  DBLWD(1),INSTTEXT+1(1)  PACK .R1.R2. INTO DBLWD\n         NI    DBLWD,X'0F'             CLEAR ALL BUT R1\n         TRT   DBLWD(1),FLTPTPR        VALID FLOATING POINT PAIR?\n         BNZ   RR1NOTI                 NO\nRR1F210  TM    INSTFLG2,X'10'          R1 & R2 MUST DIFFER?\n         BZ    RR1F204                 NO\n         PACK  DBLWD(1),INSTTEXT+1(1)  INVERT .R1.R2.\n         CLC   INSTTEXT+1(1),DBLWD     .R1.R2. = .R2.R1.?\n         BE    RR1NOTI                 YES, NOT AN INSTRUCTION\nRR1F204  TM    INSTFLG2,X'04'          R2 MUST BE EVEN?\n         BZ    RR1F202                 NO\n         TM    INSTTEXT+1,X'01'        IS R2 EVEN?\n         BO    RR1NOTI                 NO, NOT AN INSTRUCTION\nRR1F202  TM    INSTFLG2,X'02'          R1 MUST BE EVEN?\n         BZ    RR1CKSTG                NO\n         TM    INSTTEXT+1,X'10'        IS R2 EVEN?\n         BO    RR1NOTI                 NO, NOT AN INSTRUCTION\nRR1CKSTG CLI   STAGE,1                 THIS STAGE 1?\n         BE    RR1XIT                  YES, NOTHING TO DO HERE\n         IC    R1,INSTTEXT+1           PICK UP REGISTER OPERANDS\n         SRL   R1,4                    PUT R1 IN LOW NYBBLE\n         BAS   R9,REGOPNDS             GO FORMAT THE R1 OPERAND\n         MVI   0(R8),C','              MOVE OPERAND SEPARATOR\n         LA    R8,1(R8)                STEP PAST COMMA\nRR1F201  TM    INSTFLG2,X'01'          R2 PRINTS 0 WHEN 0?\n         BZ    RR1FMTR2                NO, GO FORMAT AS A REGISTER\n         TM    INSTTEXT+1,X'0F'        IS R2 ZERO?\n         BNZ   RR1FMTR2                NO\n         MVI   0(R8),C'0'              YES, MOVE A ZERO TO OPERAND\n         B     RR1XIT                  AND EXIT\nRR1FMTR2 IC    R1,INSTTEXT+1           PICK UP THE R2 OPERAND\n         BAS   R9,REGOPNDS             GO FORMAT THE R2 OPERAND\nRR1XIT   L     R9,RR19                 GET RETURN ADDRESS\n         BR    R9                      EXIT\nRR19     DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              RR-FORMAT INSTRUCTIONS, TYPE 2 OPERANDS                *\n* THESE 2-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES. THE SVCOP TABLE*\n* IS USED TO FIND THE SVC NAME, WHICH IS MOVED TO THE SOURCE LINE.    *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                       OPERAND CODING       *\n* RR2   04  .OC.OC.I1.I1.                        I1                   *\n*                                                                     *\n* RR-FORMAT TYPE 2 INSTRUCTIONS INCLUDE: SVC                          *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *\n***********************************************************************\nRR2OPND  ST    R9,RR29                 SAVE RETURN ADDRESS\n         CLI   STAGE,1                 THIS STAGE 1?\n         BE    RR2XIT                  YES, NOTHING TO DO HERE\n         SR    R1,R1                   CLEAR FOR INSERT\n         ICM   R1,1,INSTTEXT+1         PICK UP IMMEDIATE OPERAND VALUE\n         CVD   R1,DBLWD                CONVERT TO PACKED\n         CP    DBLWD,PK99              OVER 100?\n         BH    RR2THREE                YES\n         CP    DBLWD,PK9               OVER 10?\n         BH    RR2TWO                  YES\n         UNPK  OUTOPND(1),DBLWD        SINGLE DIGIT VALUE\n         OI    OUTOPND,X'F0'           CLEAR THE SIGN\n         B     RR2NAME                 AND GO LOCATE THE SVC NAME\nRR2TWO   UNPK  OUTOPND(2),DBLWD        SINGLE DIGIT VALUE\n         OI    OUTOPND+1,X'F0'         CLEAR THE SIGN\n         B     RR2NAME                 AND GO LOCATE THE NAME\nRR2THREE UNPK  OUTOPND(3),DBLWD        SINGLE DIGIT VALUE\n         OI    OUTOPND+2,X'F0'         CLEAR THE SIGN\nRR2NAME  LA    R1,SVCOP                POINT TO THE SVC NAME TABLE\nRR2CKND  CLI   0(R1),X'FF'             AT END OF TABLE?\n         BNE   RR2CKNBR                NO\n         MVC   OUTOPND+14(11),=CL11'UNKNOWN SVC' SHOW UNKNOWN SVC\n         B     RR2XIT                  AND EXIT\nRR2CKNBR CLC   0(1,R1),INSTTEXT+1      FOUND THE SVC NAME ENTRY?\n         BE    RR2GOTIT                YES\n         LA    R1,L'SVCOP(R1)          NO, STEP TO NEXT\n         B     RR2CKND                 CONTINUE SEARCH\nRR2GOTIT MVC   OUTOPND+14(9),1(R1)     MOVE SVC NAME\nRR2XIT   L     R9,RR29                 GET RETURN ADDRESS\n         BR    R9                      EXIT\nRR29     DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              RR-FORMAT INSTRUCTIONS, TYPE 3 OPERANDS                *\n* THESE 2-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                       OPERAND CODING       *\n* RR3   05  .OC.OC.R1.--.                        R1                   *\n*                                                                     *\n* RR-FORMAT TYPE 3 INSTRUCTIONS INCLUDE: SPM                          *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *\n***********************************************************************\nRR3OPND  ST    R9,RR39                 SAVE RETURN ADDRESS\n         TM    INSTTEXT+1,X'0F'        LAST NYBBLE OF INSTRUCTION = 0?\n         BZ    RR3CKSTG                YES\n         MVI   ISINST,0                NO, RESET THE INSTRUCTION SWITCH\n         B     RR3XIT                  AND EXIT\nRR3CKSTG CLI   STAGE,1                 THIS STAGE 1?\n         BE    RR3XIT                  YES, NOTHING TO DO HERE\n         IC    R1,INSTTEXT+1           GET REGISTER OPERAND\n         SRL   R1,4                    AND SHIFT TO LOW NYBBLE\n         BAS   R9,REGOPNDS             GO FORMAT THE REGISTER OPERAND\nRR3XIT   L     R9,RR39                 GET RETURN ADDRESS\n         BR    R9                      EXIT\nRR39     DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              RR-FORMAT INSTRUCTIONS, TYPE 4 OPERANDS                *\n* THESE 2-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES. ONLY THE RR    *\n* FORMAT CONDITIONAL BRANCH INSTRUCTION HAS THIS FORMAT.              *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                       OPERAND CODING       *\n* RR4   05  .OC.OC.M1.R2.                        M1,R2                *\n*                                                                     *\n* RR-FORMAT TYPE 4 INSTRUCTIONS INCLUDE: BCR                          *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: X'01'                               *\n***********************************************************************\nRR4OPND  ST    R9,RR49                 SAVE RETURN ADDRESS\n         CLI   STAGE,1                 THIS STAGE 1?\n         BE    RR4XIT                  YES, NOTHING TO DO HERE\n         IC    R1,INSTTEXT+1           PICK UP THE MASK VALUE\n         SRL   R1,4                    SHIFT TO LOW NYBBLE\n         BAS   R9,CONDOPND             GO PROCESS CONDITIONAL BRANCH\n         TM    INSTFLG2,X'01'          R2 PRINTS AS 0 WHEN 0?\n         BZ    RR4FMTR2                NO\n         TM    INSTTEXT+1,X'0F'        IS R2=0?\n         BNZ   RR4FMTR2                NO\n         MVI   0(R8),C'0'              YES, MOVE A ZERO TO PRINT\n         B     RR4XIT                  AND EXIT\nRR4FMTR2 IC    R1,INSTTEXT+1           PICK UP REGISTER OPERAND VALUE\n         BAS   R9,REGOPNDS             GO FORMAT THE REGISTER OPERAND\nRR4XIT   L     R9,RR49                 GET RETURN ADDRESS\n         BR    R9                      EXIT\nRR49     DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              RRE-FORMAT INSTRUCTION, TYPE 1 OPERANDS                *\n* THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *\n* X'B2' OR X'B3'                                                      *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* RRE1  06  .OC.OC.OC.OC.--.--.R1.R2.             R1,R2               *\n*                                                                     *\n* RRE-FORMAT TYPE 1 INSTRUCTIONS INCLUDE:                             *\n*       IPTE  IVSK  PT    ISKE  RRBE  SSKE  TB    DXR   BAKR          *\n*       CKSM  SQDR  SQER  STURA EREG  ESTA  LURA  TAR   CPYA          *\n*       SAR   EAR   MSR   MVPG  MVST  CUSE  BSG   BSA   CLST          *\n*       SRST  TRE   CUUTF CUTFU LPEBR LNEBR LTEBR LCEBR LDEBR         *\n*       LXDBR LXEBR MXDBR KEBR  CEBR  AEBR  SEBR  MDEBR DEBR          *\n*       LPDBR LNDBR LTDBR LCDBR SQEBR SQDBR SQXBR MEEBR KDBR          *\n*       CDBR  ADBR  SDBR  MDBR  DDBR  LDER  LXDR  LXER  SQXR          *\n*       MEER  LPXBR LNXBR LTXBR LCXBR LEDBR LDXBR LEXBR KXBR          *\n*       CXBR  AXBR  SXBR  MXBR  DXBR  THDER THDR  LPXR  LNXR          *\n*       LTXR  LCXR  LXR   LEXR  FIXR  CXR   FIER  FIDR  CEFBR         *\n*       CDFBR CXFBR CEFR  CDFR  CXFR                                  *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: X'80' (TRE, CKSM), X'01'            *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: X'80', X'10', X'04', X'02'          *\n***********************************************************************\nRRE1OPND ST    R9,RRE19                SAVE RETURN ADDRESS\n         CLI   INSTTEXT+2,0            3RD BYTE IS ALL ZEROS?\n         BZ    RRE1CKFG                YES\nRRE1NOTI MVI   ISINST,0                NO, NOT AN INSTRUCTION\n         B     RRE1XIT                 EXIT\nRRE1CKFG CLC   INSTFLG1(2),XZROS       ANY FLAGS?\n         BE    RRE1CKST                NO\nRRE1F180 TM    INSTFLG1,X'80'          UNUSUAL INSTRUCTION TESTS?\n         BZ    RRE1F101                NO\n         CLC   INSTMNEM(3),=CL3'TRE'   THIS IS TRE?\n         BNE   RRE1CKSM                NO\n         TM    INSTTEXT+3,X'F0'        R1 IS ZERO?\n         BZ    RRE1NOTI                YES, NOT INSTRUCTION\n         TM    INSTTEXT+3,X'0F'        R2 IS ZERO?\n         BZ    RRE1NOTI                YES, NOT INSTRUCTION\n         B     RRE1F101                NO, CONTINUE\nRRE1CKSM IC    R1,INSTTEXT+3           CKSM: PICK UP .R1.R2.\n         LA    R1,1(R1)                COMPUTE .R2.+1\n         STC   R1,DBLWD                SAVE .R1.R2+1.\n         NI    DBLWD,X'0F'             CLEAR ALL BUT R2+1\n         PACK  DBLWD+1(1),INSTTEXT+3(1) INVERT .R1.R2.\n         NI    DBLWD+1,X'0F'           CLEAR ALL BUT R1\n         CLC   DBLWD(1),DBLWD+1        R1 = R2+1?\n         BE    RRE1NOTI                YES, NOT AN INSTRUCTION\nRRE1F101 TM    INSTFLG1,X'01'          R2 MUST BE FP PAIR START?\n         BZ    RRE1F280                NO\n         MVC   DBLWD(1),INSTTEXT+3     MOVE .R1.R2.\n         NI    DBLWD,X'0F'             CLEAR ALL BUT R2\n         TRT   DBLWD(1),FLTPTPR        VALID FLOATING POINT PAIR?\n         BNZ   RRE1NOTI                NO, NOT AN INSTRUCTION\nRRE1F280 TM    INSTFLG2,X'80'          R1 MUST BE FP PAIR START?\n         BZ    RRE1F210                NO\n         PACK  DBLWD(1),INSTTEXT+3(1)  PACK .R1.R2. INTO DBLWD\n         NI    DBLWD,X'0F'             CLEAR ALL BUT R1\n         TRT   DBLWD(1),FLTPTPR        VALID FLOATING POINT PAIR?\n         BNZ   RRE1NOTI                NO\nRRE1F210 TM    INSTFLG2,X'10'          R1 & R2 MUST DIFFER?\n         BZ    RRE1F204                NO\n         PACK  DBLWD(1),INSTTEXT+3(1)  INVERT .R1.R2.\n         CLC   INSTTEXT+3(1),DBLWD     .R1.R2. = .R2.R1.?\n         BE    RRE1NOTI                YES, NOT AN INSTRUCTION\nRRE1F204 TM    INSTFLG2,X'04'          R2 MUST BE EVEN?\n         BZ    RRE1F202                NO\n         TM    INSTTEXT+3,X'01'        IS R2 EVEN?\n         BO    RRE1NOTI                NO, NOT AN INSTRUCTION\nRRE1F202 TM    INSTFLG2,X'02'          R1 MUST BE EVEN?\n         BZ    RRE1CKST                NO\n         TM    INSTTEXT+3,X'10'        IS R2 EVEN?\n         BO    RRE1NOTI                NO, NOT AN INSTRUCTION\nRRE1CKST CLI   STAGE,1                 THIS STAGE 1?\n         BE    RRE1XIT                 YES, NOTHING TO DO HERE\n         IC    R1,INSTTEXT+3           PICK UP R1 OPERAND\n         SRL   R1,4                    AND MOVE TO LOW NYBBLE\n         BAS   R9,REGOPNDS             GO FORMAT THE R1 REGISTER\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST THE COMMA\n         IC    R1,INSTTEXT+3           PICK UP R2 OPERAND\n         BAS   R9,REGOPNDS             GO FORMAT THE R2 REGISTER\nRRE1XIT  L     R9,RRE19                GET RETURN ADDRESS\n         BR    R9                      EXIT\nRRE19    DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              RRE-FORMAT INSTRUCTION, TYPE 2 OPERANDS                *\n* THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *\n* X'B2' OR X'B3'                                                      *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* RRE2  07  .OC.OC.OC.OC.--.--.R1.--.             R1                  *\n*                                                                     *\n* RRE-FORMAT TYPE 2 INSTRUCTIONS INCLUDE:                             *\n*       IPM   IAC   SSAR  EPAR  ESAR  MSTA  LZER  LZDR  LZXR          *\n*       SFPC  EFPC                                                    *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: X'80', X'02'                        *\n***********************************************************************\nRRE2OPND ST    R9,RRE29                SAVE RETURN ADDRESS\n         CLI   INSTTEXT+2,0            BYTE 3 IS ALL ZEROS?\n         BNZ   RRE2NOTI                NO, NOT AN INSTRUCTION\n         TM    INSTTEXT+3,X'0F'        LAST NYBBLE IS ALL ZEROS?\n         BZ    RRE2CKFG                YES, CONTINUE\nRRE2NOTI MVI   ISINST,0                SHOW NOT AN INSTRUCTION\n         B     RRE2XIT                 AND EXIT\nRRE2CKFG CLI   INSTFLG2,0              ANY FLAGS?\n         BE    RRE2CKST                NO\nRRE2F280 TM    INSTFLG2,X'80'          R1 MUST BE FP PAIR START?\n         BZ    RRE2F202                NO\n         PACK  DBLWD(1),INSTTEXT+3(1)  PACK .R1.R2. INTO DBLWD\n         NI    DBLWD,X'0F'             CLEAR ALL BUT R1\n         TRT   DBLWD(1),FLTPTPR        VALID FLOATING POINT PAIR?\n         BNZ   RRE2NOTI                NO\nRRE2F202 TM    INSTFLG2,X'02'          R1 MUST BE EVEN?\n         BZ    RRE2CKST                NO\n         TM    INSTTEXT+3,X'10'        IS R2 EVEN?\n         BO    RRE2NOTI                NO, NOT AN INSTRUCTION\nRRE2CKST CLI   STAGE,1                 THIS STAGE 1?\n         BE    RRE2XIT                 YES, NOTHING TO DO HERE\nRRE2R1   IC    R1,INSTTEXT+3           PICK UP THE R1 OPERAND\n         SRL   R1,4                    AND SHIFT TO LOW NYBBLE\n         BAS   R9,REGOPNDS             GO FORMAT THE R1 OPERAND\nRRE2XIT  L     R9,RRE29                GET RETURN ADDRESS\n         BR    R9                      EXIT\nRRE29    DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              RRE-FORMAT INSTRUCTION, TYPE 3 OPERANDS                *\n* THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *\n* X'B2' OR X'B3'                                                      *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* RRE3  08  .OC.OC.OC.OC.--.--.--.--.             (NONE)              *\n*                                                                     *\n* RRE-FORMAT TYPE 3 INSTRUCTIONS INCLUDE: PALB                        *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *\n***********************************************************************\nRRE3OPND ST    R9,RRE39                SAVE RETURN ADDRESS\n         CLC   INSTTEXT+2(2),XZROS     BYTES 2-3 ARE ALL ZEROS?\n         BZ    RR3XIT                  YES\n         MVI   ISINST,0                NO, SHOW NOT AN INSTRUCTION\nRRE3XIT  L     R9,RRE39                GET RETURN ADDRESS\n         BR    R9                      EXIT\nRRE39    DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              RRF-FORMAT INSTRUCTION, TYPE 1 OPERANDS                *\n* THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *\n* X'B3'.                                                              *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* RRF1  09  .OC.OC.OC.OC.R1.--.R3.R2.             R1,R3,R2            *\n*                                                                     *\n* RRF-FORMAT TYPE 1 INSTRUCTIONS INCLUDE:                             *\n*        MAEBR MSEBR MADBR MSDBR                                      *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *\n***********************************************************************\nRRF1OPND ST    R9,RRF19                SAVE RETURN ADDRESS\n         TM    INSTTEXT+2,X'0F'        6TH NYBBLE IS ALL ZEROS?\n         BZ    RRF1CKST                YES, CONTINUE\n         MVI   ISINST,0                NO, SHOW NOT AN INSTRUCTION\n         B     RRF1XIT                 AND EXIT\nRRF1CKST CLI   STAGE,1                 THIS STAGE 1?\n         BE    RRF1XIT                 YES, NOTHING TO DO HERE\n         IC    R1,INSTTEXT+2           PICK UP THE R1 OPERAND\n         SRL   R1,4                    SHIFT IT TO THE LOW NYBBLE\n         BAS   R9,REGOPNDS             GO FORMAT THE R1 OPERAND\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST THE COMMA\n         IC    R1,INSTTEXT+3           PICK UP THE R3 OPERAND\n         SRL   R1,4                    SHIFT IT TO THE LOW NYBBLE\n         BAS   R9,REGOPNDS             GO FORMAT THE R3 OPERAND\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST THE COMMA\n         IC    R1,INSTTEXT+2           PICK UP THE R2 OPERAND\n         BAS   R9,REGOPNDS             GO FORMAT THE R2 OPERAND\nRRF1XIT  L     R9,RRF19                GET RETURN ADDRESS\n         BR    R9                      EXIT\nRRF19    DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              RRF-FORMAT INSTRUCTION, TYPE 2 OPERANDS                *\n* THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *\n* X'B3'.                                                              *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* RRF2  0A  .OC.OC.OC.OC.M3.--.R1.R2.             R1,M3,R2            *\n*                                                                     *\n* RRF-FORMAT TYPE 2 INSTRUCTIONS INCLUDE:                             *\n*        FIXBR TBEDR TBDR  FIEBR FIDBR CFEBR CFDBR CFXBR CFER         *\n*        CFDR  CFXR                                                   *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: X'01'                               *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: X'80', X'40'                        *\n***********************************************************************\nRRF2OPND ST    R9,RRF29                SAVE RETURN ADDRESS\n         TM    INSTTEXT+2,X'0F'        6TH NYBBLE IS ALL ZEROS?\n         BNZ   RRF2NOTI                NO, NOT AN INSTRUCTION\n         CLC   INSTFLG1(2),XZROS       ANY FLAGS?\n         BE    RRF2CKST                NO\nRRF2F101 TM    INSTFLG1,X'01'          R2 MUST BE FP PAIR START?\n         BZ    RRF2F280                NO\n         MVC   DBLWD(1),INSTTEXT+3     MOVE .R1.R2.\n         NI    DBLWD,X'0F'             CLEAR ALL BUT R2\n         TRT   DBLWD(1),FLTPTPR        VALID FLOATING POINT PAIR?\n         BNZ   RRF2NOTI                NO, NOT AN INSTRUCTION\nRRF2F280 TM    INSTFLG2,X'80'          R1 MUST BE FP PAIR START?\n         BZ    RRF2F240                NO\n         PACK  DBLWD(1),INSTTEXT+3(1)  PACK .R1.R2. INTO DBLWD\n         NI    DBLWD,X'0F'             CLEAR ALL BUT R1\n         TRT   DBLWD(1),FLTPTPR        VALID FLOATING POINT PAIR?\n         BNZ   RRF2NOTI                NO\nRRF2F240 TM    INSTFLG2,X'40'          M3 MUST BE 0,1,4,5,6,7?\n         BZ    RRF2CKST                NO\n         PACK  DBLWD(1),INSTTEXT+2(1)  PACK .M3.--. INTO DBLWD\n         NI    DBLWD,X'0F'             CLEAR ALL BUT M3\n         TRT   DBLWD(1),VALIDM3        VALID M3 MASK VALUE?\n         BZ    RRF2CKST                YES\nRRF2NOTI MVI   ISINST,0                NO, SHOW NOT AN INSTRUCTION\n         B     RRF2XIT                 AND EXIT\nRRF2CKST CLI   STAGE,1                 THIS STAGE 1?\n         BE    RRF2XIT                 YES, NOTHING TO DO HERE\n         IC    R1,INSTTEXT+3           PICK UP R1R2\n         SRL   R1,4                    SHIFT OUT R2\n         BAS   R9,REGOPNDS             GO FORMAT R1 OPERAND\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST COMMA\n         SR    R1,R1                   CLEAR FOR INSERT\n         IC    R1,INSTTEXT+2           PICK UP M3--\n         SRL   R1,4                    SHIFT OUT --\n         BAS   R9,DECMOPND             GO FORMAT M3 OPERAND\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST COMMA\n         IC    R1,INSTTEXT+3           PICK UP R1R2\n         BAS   R9,REGOPNDS             GO FORMAT R2 OPERAND\nRRF2XIT  L     R9,RRF29                GET RETURN ADDRESS\n         BR    R9                      EXIT\nRRF29    DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              RRF-FORMAT INSTRUCTION, TYPE 3 OPERANDS                *\n* THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *\n* X'B3'.                                                              *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* RRF3  0B  .OC.OC.OC.OC.R3.M4.R1.R2.             R1,R3,R2,M4         *\n*                                                                     *\n* RRF-FORMAT TYPE 3 INSTRUCTIONS INCLUDE:  DIEBR DIDBR                *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: X'80' (DIEBR, DIDBR)                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: X'40'                               *\n*********************************************************************\nRRF3OPND ST    R9,RRF39                SAVE RETURN ADDRESS\n         CLC   INSTFLG1(2),XZROS       ANY FLAGS SET?\n         BE    RRF3CKST                NO\n         TM    INSTFLG1,X'80'          DIEBR OR DIDBR INSTRUCTION?\n         BZ    RRF3F240                NO\n         PACK  DBLWD(1),INSTTEXT+2(1)  INVERT .R3.M4.\n         NI    DBLWD,X'0F'             CLEAR ALL BUT R3\n         PACK  DBLWD+1(1),INSTTEXT+3(1) INVERT .R1.R2.\n         NI    DBLWD+1,X'0F'           CLEAR ALL BUT R1\n         MVC   DBLWD+2(1),INSTTEXT+3   MOVE .R1.R2.\n         NI    DBLWD+2,X'0F'           CLEAR ALL BUT R2\n         CLC   DBLWD(1),DBLWD+1        R3=R1?\n         BE    RRF3NOTI                YES, NOT AN INSTRUCTION\n         CLC   DBLWD(1),DBLWD+2        R3=R2?\n         BE    RRF3NOTI                YES, NOT AN INSTRUCTION\n         CLC   DBLWD+1(1),DBLWD+2      R1=R2?\n         BE    RRF3NOTI                YES, NOT AN INSTRUCTION\nRRF3F240 TM    INSTFLG2,X'40'          M3 MUST BE 0,1,4,5,6,7?\n         BZ    RRF3CKST                NO\n         MVC   DBLWD(1),INSTTEXT+2     MOVE .R3.M4. INTO DBLWD\n         NI    DBLWD,X'0F'             CLEAR ALL BUT M4\n         TRT   DBLWD(1),VALIDM3        VALID M3 MASK VALUE?\n         BZ    RRF3CKST                YES\nRRF3NOTI MVI   ISINST,0                SHOW NOT AN INSTRUCTION\n         B     RRF3XIT                 AND EXIT\nRRF3CKST CLI   STAGE,1                 THIS STAGE 1?\n         BE    RRF3XIT                 YES, NOTHING TO DO HERE\n         IC    R1,INSTTEXT+3           PICK UP R1R2\n         SRL   R1,4                    SHIFT OUT R2\n         BAS   R9,REGOPNDS             GO FORMAT R1 OPERAND\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST THE COMMA\n         IC    R1,INSTTEXT+2           PICK UP R3M4\n         SRL   R1,4                    SHIFT OUT M4\n         BAS   R9,REGOPNDS             GO FORMAT R3 OPERAND\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST THE COMMA\n         IC    R1,INSTTEXT+3           PICK UP R1R2\n         BAS   R9,REGOPNDS             GO FORMAT R2 OPERAND\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST THE COMMA\n         IC    R1,INSTTEXT+2           PICK UP R3M4\n         N     R1,ZEROF                ERASE ALL BUT M4\n         BAS   R9,DECMOPND             GO FORMAT M4 OPERAND\nRRF3XIT  L     R9,RRF39                GET RETURN ADDRESS\n         BR    R9                      EXIT\nRRF39    DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*                RS-FORMAT INSTRUCTION, TYPE 1 OPERANDS               *\n* THESE 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* RS1   0C  .OC.OC.R1.R3.B2.D2.D2.D2.             R1,R3,D2(B2)        *\n*                                                                     *\n*  RS-FORMAT TYPE 1 INSTRUCTIONS INCLUDE:                             *\n*       BXH   BXLE  STM   LM    TRACE LAM   STAM  MVCLE CLCLE         *\n*       SIGP  STCTL LCTL  CS    CDS                                   *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: X'80' (MVCLE, CLCLE)                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: X'08', X'02'                        *\n***********************************************************************\nRS1OPND  ST    R9,RS19                 SAVE RETURN ADDRESS\nRS1F180  TM    INSTFLG1,X'80'          SPECIAL TEST REQUIRED?\n         BZ    RS1F208                 NO\n         PACK  DBLWD(1),INSTTEXT+2(1)  INVERT .B2.D2.\n         NI    DBLWD,X'0F'             CLEAR ALL BUT B2\n         IC    R1,INSTTEXT+1           PICK UP .R1.R3.\n         STC   R1,DBLWD+1              SAVE R1R3\n         NI    DBLWD+1,X'0F'           CLEAR ALL BUT R3\n         LA    R1,1(R1)                COMPUTE R3+1\n         STC   R1,DBLWD+2              SAVE .R1.R3+1.\n         NI    DBLWD+2,X'0F'           CLEAR ALL BUT R3+1\n         CLC   DBLWD(1),DBLWD+1        B2 = R3?\n         BE    RS1NOTI                 YES, NOT AN INSTRUCTION\n         CLC   DBLWD(1),DBLWD+2        B2 = R3+1?\n         BE    RS1NOTI                 YES, NOT AN INSTRUCTION\n         PACK  DBLWD+1(1),INSTTEXT+1(1) INVERT .R1.R3.\n         NI    DBLWD+1,X'0F'           CLEAR ALL BUT R1\n         IC    R1,DBLWD+1              PICK UP R1\n         LA    R1,1(R1)                COMPUTE R1+1\n         STC   R1,DBLWD+2              SAVE R1+1\n         CLC   DBLWD(1),DBLWD+1        B2 = R1?\n         BE    RS1NOTI                 YES, NOT AN INSTRUCTION\n         CLC   DBLWD(1),DBLWD+2        B2 = R1+1?\n         BE    RS1NOTI                 YES, NOT AN INSTRUCTION\nRS1F208  TM    INSTFLG2,X'08'          R3 MUST BE EVEN NUMBERED?\n         BZ    RS1F202                 NO\n         TM    INSTTEXT+1,X'01'        IS R3 EVEN?\n         BO    RS1NOTI                 NO, NOT AN INSTRUCTION\nRS1F202  TM    INSTFLG2,X'02'          R1 MUST BE EVEN NUMBERED?\n         BZ    RS1CKSTG                NO\n         TM    INSTTEXT+1,X'10'        IS R1 EVEN?\n         BZ    RS1CKSTG                YES\nRS1NOTI  MVI   ISINST,0                SHOW NOT AN INSTRUCTION\n         B     RS1XIT                  AND EXIT\nRS1CKSTG CLI   STAGE,1                 THIS STAGE 1?\n         BE    RS1BDOP                 YES, SKIP REGISTER OPERANDS\n         IC    R1,INSTTEXT+1           PICK UP R1R3\n         SRL   R1,4                    SHIFT OUT R3\n         BAS   R9,REGOPNDS             GO FORMAT THE R1 OPERAND\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST THE COMMA\n         IC    R1,INSTTEXT+1           PICK UP R1R3\n         BAS   R9,REGOPNDS             GO FORMAT THE R3 OPERAND\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST THE COMMA\nRS1BDOP  ICM   R1,3,INSTTEXT+2         PICK UP THE BASE-DISPL ADDR\n         MVI   LENGTH,0                SET LENGTH TO ZERO (N/A)\n         BAS   R9,BDOPND               GO FORMAT THE BASE-DISPL ADDR\nRS1XIT   L     R9,RS19                 GET RETURN ADDRESS\n         BR    R9                      EXIT\nRS19     DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*                RS-FORMAT INSTRUCTION, TYPE 2 OPERANDS               *\n* THESE 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* RS2   0D  .OC.OC.R1.--.B2.D2.D2.D2.             R1,D2(B2)           *\n*                                                                     *\n*  RS-FORMAT TYPE 2 INSTRUCTIONS INCLUDE:                             *\n*       SRL   SLL   SRA   SLA   SRDL  SLDL  SRDA  SLDA  CLM           *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: X'20', X'02'                        *\n***********************************************************************\nRS2OPND  ST    R9,RS29                 SAVE RETURN ADDRESS\n         TM    INSTTEXT+1,X'0F'        BITS 13-16 ARE ZEROS?\n         BNZ   RS2NOTI                 NO, NOT AN INSTRUCTION\n         CLI   INSTFLG2,X'00'          ANY FLAGS?\n         BE    RS2CKSTG                NO\nRS2F220  TM    INSTFLG2,X'20'          INSTR BITS 16-25 MUST BE ZERO?\n         BZ    RS2F202                 NO\n         CLI   INSTTEXT+2,X'00'        YES, BITS 16-23 ARE ZERO?\n         BNE   RS2NOTI                 NO, NOT AN INSTRUCTION\n         TM    INSTTEXT+3,X'C0'        YES, BITS 24-25 ARE ZERO?\n         BZ    RS2CKSTG                YES\nRS2F202  TM    INSTFLG2,X'02'          R1 MUST BE EVEN?\n         BZ    RS2CKSTG                NO\n         TM    INSTTEXT+1,X'10'        IS R2 EVEN?\n         BZ    RS2CKSTG                YES\nRS2NOTI  MVI   ISINST,0                NO, NOT AN INSTRUCTION\n         B     RS2XIT                  EXIT\nRS2CKSTG CLI   STAGE,1                 THIS STAGE 1?\n         BE    RS2BDOP                 YES, SKIP REGISTER OPERAND\n         IC    R1,INSTTEXT+1           PICK UP R1--\n         SRL   R1,4                    SHIFT OUT THE --\n         BAS   R9,REGOPNDS             GO FORMAT THE R1 REGISTER\n         MVI   0(R8),C','              SET COMMA DELIMITER\n         LA    R8,1(R8)                STEP PAST THE COMMA\nRS2BDOP  ICM   R1,3,INSTTEXT+2         PICK UP THE BASE-DISPL ADDR\n         MVI   LENGTH,0                SET LENGTH TO ZERO (N/A)\n         BAS   R9,BDOPND               GO FORMAT THE BASE-DISPL ADDR\nRS2XIT   L     R9,RS29                 GET RETURN ADDRESS\n         BR    R9                      EXIT\nRS29     DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*                RS-FORMAT INSTRUCTION, TYPE 3 OPERANDS               *\n* THESE 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* RS3   0E  .OC.OC.R1.M3.B2.D2.D2.D2.             R1,M3,D2(B2)        *\n*                                                                     *\n*  RS-FORMAT TYPE 3 INSTRUCTIONS INCLUDE: ICM, STCM                   *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *\n***********************************************************************\nRS3OPND  ST    R9,RS39                 SAVE RETURN ADDRESS\n         TM    INSTTEXT+1,X'0F'        IS THE M3 MASK = 0?\n         BNZ   RS3CKSTG                NO\nRS3NOTI  MVI   ISINST,0                YES, SHOW NOT AN INSTRUCTION\n         B     RS3XIT                  AND EXIT\nRS3CKSTG CLI   STAGE,1                 THIS STAGE 1?\n         BE    RS3BDOP                 YES, SKIP REG, MASK OPERANDS\n         IC    R1,INSTTEXT+1           GET R1 OPERAND\n         SRL   R1,4                      TO LOW NYBBLE\n         BAS   R9,REGOPNDS             GO FORMAT THE R1 REGISTER\n         MVI   0(R8),C','              SET COMMA DELIMITER\n         LA    R8,1(R8)                STEP PAST THE COMMA\n         IC    R1,INSTTEXT+1           GET M1 OPERAND\n         N     R1,ZEROF                   IN THE LOW ORDER NYBBLE\n         BAS   R9,DECMOPND             GO FORMAT THE M1 FIELD\n         MVI   0(R8),C','              SET COMMA DELIMITER\n         LA    R8,1(R8)                STEP PAST THE COMMA\nRS3BDOP  ICM   R1,3,INSTTEXT+2         PICK UP THE BASE-DISPL ADDR\n         MVI   LENGTH,0                SET LENGTH TO ZERO (N/A)\n         BAS   R9,BDOPND               GO FORMAT THE BASE-DISPL ADDR\nRS3XIT   L     R9,RS39                 GET RETURN ADDRESS\n         BR    R9                      EXIT\nRS39     DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*                RSI-FORMAT INSTRUCTION OPERANDS                      *\n* THESE 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* RSI1  0F  .OC.OC.R1.R3.I2.I2.I2.I2.             R1,R3,I2            *\n*                                                                     *\n* RSI-FORMAT INSTRUCTIONS INCLUDE: BRXH  BRXLE                        *\n*                                                                     *\n* NOTE: THE I2 OPERAND IS THE NUMBER OF HALFWORDS FROM THE CURRENT    *\n*       LOCATION TO THE BRANCH TARGET, AND MAY BE POSITIVE OR NEGATIVE*\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *\n***********************************************************************\nRSIOPND  ST    R9,RSI9                 SAVE RETURN ADDRESS\n         CLI   STAGE,1                 THIS STAGE 1?\n         BE    RSIXIT                  YES, NOTHING TO DO HERE\n         IC    R1,INSTTEXT+1           GET R1 OPERAND\n         SRL   R1,4                      TO LOW NYBBLE\n         BAS   R9,REGOPNDS             GO FORMAT THE R1 REGISTER\n         MVI   0(R8),C','              SET COMMA DELIMITER\n         LA    R8,1(R8)                STEP PAST THE COMMA\n         IC    R1,INSTTEXT+1           GET R3 OPERAND\n         BAS   R9,REGOPNDS             GO FORMAT THE R3 FIELD\n         MVC   0(3,R8),CMASTRP         MOVE \",*+\"\n         SR    R1,R1                   CLEAR FOR INSERT\n         ICM   R1,3,INSTTEXT+2         PICK UP .I2.I2.I2.I2.\n         BNM   RSIRELOP                BRANCH IF NOT MINUS\n         MVI   2(R8),C'-'              CHANGE THE SIGN\n         LCR   R1,R1                   MAKE VALUE POSITIVE\nRSIRELOP SLL   R1,1                    DOUBLE FOR HALFWORDS\n         LA    R8,3(R8)                STEP PAST THE DELIMITER\n         BAS   R9,DECMOPND             GO FORMAT THE NBR HALFWORDS\nRSIXIT   L     R9,RSI9                 GET RETURN ADDRESS\n         BR    R9                      EXIT\nRSI9     DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*                RX-FORMAT INSTRUCTION, TYPE 1 OPERANDS               *\n* THESE 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* RX1   10  .OC.OC.R1.X2.B2.D2.D2.D2.             R1,D2(X2,B2)        *\n*                                                                     *\n*  RX-FORMAT TYPE 1 INSTRUCTIONS INCLUDE:                             *\n*       STH   LA    STC   IC    EX    BAL   BCT   LH    CH            *\n*       AH    SH    MH    BAS   CVD   CVB   ST    LAE   N             *\n*       CL    O     X     L     C     A     S     M     D             *\n*       AL    SL    STD   MXD   LD    CD    AD    SD    MD            *\n*       DD    AW    SW    STE   MS    LE    CE    AE    SE            *\n*       MDE   DE    AU    SU    LRA                                   *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: X'80' (EX)                          *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: X'80', X'02'                        *\n***********************************************************************\nRX1OPND  ST    R9,RX19                 SAVE RETURN ADDRESS\n         CLI   INSTFLG2,X'00'          ANY FLAGS?\n         BE    RX1CKSTG                NO\nRX1F280  TM    INSTFLG2,X'80'          R1 MUST BE FP PAIR START?\n         BZ    RX1F202                 NO\n         PACK  DBLWD(1),INSTTEXT+1(1)  PACK .R1.X2. INTO DBLWD\n         NI    DBLWD,X'0F'             CLEAR ALL BUT R1\n         TRT   DBLWD(1),FLTPTPR        VALID FLOATING POINT PAIR?\n         BNZ   RX1NOTI                 NO\nRX1F202  TM    INSTFLG2,X'02'          R1 MUST BE EVEN NUMBERED?\n         BZ    RX1CKSTG                NO\n         TM    INSTTEXT+1,X'10'        IS R1 EVEN NUMBERED?\n         BZ    RX1CKSTG                YES\nRX1NOTI  MVI   ISINST,0                SHOW NOT AN INSTRUCTION\n         B     RX1XIT                  AND EXIT\nRX1CKSTG CLI   STAGE,1                 THIS STAGE 1?\n         BE    RX1BDOP                 YES, SKIP R1 OPERAND\n         CLI   INSTTEXT,X'44'          THIS AN EX INSTRUCTION?\n         BNE   RX1DOR1                 NO\n         TM    INSTTEXT+1,X'F0'        IS R1 ZERO?\n         BNZ   RX1DOR1                 NO\n         MVI   0(R8),C'0'              YES, MOVE A ZERO\n         B     RX1SEPA                 CONTINUE\nRX1DOR1  IC    R1,INSTTEXT+1           PICK UP R1X2\n         SRL   R1,4                    SHIFT OUT X2\n         BAS   R9,REGOPNDS             GO FORMAT THE R1 REGISTER\nRX1SEPA  MVI   0(R8),C','              MOVE COMMA SEPARATOR\n         LA    R8,1(R8)                STEP PAST THE COMMA\nRX1BDOP  ICM   R1,7,INSTTEXT+1         PICK UP M1X2B2D2D2D2 IN R1\n         BAS   R9,XBDOPND              GO FORMAT THE INDEXED OPERAND\nRX1XIT   L     R9,RX19                 GET RETURN ADDRESS\n         BR    R9                      EXIT\nRX19     DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*                RX-FORMAT INSTRUCTION, TYPE 2 OPERANDS               *\n* THESE 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES. ACTUALLY, ONLY *\n* THE CONDITIONAL BRANCH WITH RX-TYPE OPERAND HAS THIS FORMAT.        *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* RX2   11  .OC.OC.M1.X2.B2.D2.D2.D2.             M1,D2(X2,B2)        *\n*                                                                     *\n*  RX-FORMAT TYPE 2 INSTRUCTIONS INCLUDE: BC                          *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *\n***********************************************************************\nRX2OPND  ST    R9,RX29                 SAVE RETURN ADDRESS\n         CLI   STAGE,1                 THIS STAGE 1?\n         BE    RX2BDOP                 YES, SKIP M1 FORMATTING\n         IC    R1,INSTTEXT+1           PICK UP THE MASK VALUE\n         SRL   R1,4                    SHIFT TO LOW NYBBLE\n         BAS   R9,CONDOPND             GO PROCESS CONDITIONAL BRANCH\nRX2BDOP  ICM   R1,7,INSTTEXT+1         PICK UP M1X2B2D2D2D2 IN R1\n         BAS   R9,XBDOPND              GO FORMAT THE INDEXED OPERAND\nRX2XIT   L     R9,RX29                 GET RETURN ADDRESS\n         BR    R9                      EXIT\nRX29     DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*                RXE-FORMAT INSTRUCTION OPERANDS                      *\n* THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *\n* X'ED'.                                                              *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* RXE1  12  .OC.OC.R1.X2.B2.D2.D2.D2.--.--.OC.OC. R1,D2(X2,B2)        *\n*                                                                     *\n*  RXE-FORMAT INSTRUCTIONS INCLUDE:                                   *\n*       LDEB  LXDB  LXEB  MXDB  KEB   CEB   AEB   SEB   MDEB          *\n*       DEB   TCEB  TCDB  TCXB  SQEB  SQDB  MEEB  KDB   CDB           *\n*       ADB   SDB   MDB   DDB   LDE   LXD   LXE   SQE   SQD           *\n*       MEE                                                           *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: X'80'                               *\n***********************************************************************\nRXEOPND  ST    R9,RXE9                 SAVE RETURN ADDRESS\n         CLI   INSTTEXT+4,0            BYTE 5 IS ALL ZEROS?\n         BNZ   RXENOTI                 NO, NOT AN INSTRUCTION\nRXEF280  TM    INSTFLG2,X'80'          R1 MUST BE FP PAIR START?\n         BZ    RXECKSTG                NO\n         PACK  DBLWD(1),INSTTEXT+1(1)  INVERT .R1.X2.\n         NI    DBLWD,X'0F'             CLEAR ALL BUT R1\n         TRT   DBLWD(1),FLTPTPR        VALID FLOATING POINT PAIR?\n         BZ    RXECKSTG                YES\nRXENOTI  MVI   ISINST,0                NO, NOT AN INSTRUCTION\n         B     RXEXIT                  EXIT\nRXECKSTG CLI   STAGE,1                 THIS STAGE 1?\n         BE    RXEBDOP                 YES, SKIP R1 FORMATTING\n         IC    R1,INSTTEXT+1           GET R1 OPERAND\n         SRL   R1,4                      TO LOW NYBBLE\n         BAS   R9,REGOPNDS             GO FORMAT THE R1 REGISTER\n         MVI   0(R8),C','              SET COMMA DELIMITER\n         LA    R8,1(R8)                STEP PAST THE COMMA\nRXEBDOP  ICM   R1,7,INSTTEXT+1         GET X-B-D ADDRESS\n         BAS   R9,XBDOPND              GO FORMAT THE RX ADDRESS\nRXEXIT   L     R9,RXE9                 GET RETURN ADDRESS\n         BR    R9                      EXIT\nRXE9     DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*   OPERANDS FOR RXF-FORMAT INSTRUCTIONS                              *\n* THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *\n* X'ED'.                                                              *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* RXF1  13  .OC.OC.R3.X2.B2.D2.D2.D2.R1.--.OC.OC. R1,R3,D2(X2,B2)     *\n*                                                                     *\n*  RXF-FORMAT INSTRUCTIONS INCLUDE: MAEB  MSEB MADB   MSDB            *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *\n***********************************************************************\nRXFOPND  ST    R9,RXF9                 SAVE RETURN ADDRESS\n         TM    INSTTEXT+4,X'0F'        10TH NYBBLE IS ALL ZEROS?\n         BZ    RXFCKSTG                YES, CONTINUE\n         MVI   ISINST,0                NO, NOT AN INSTRUCTION\n         B     RXFXIT                  EXIT\nRXFCKSTG CLI   STAGE,1                 THIS STAGE 1?\n         BE    RXFBDOP                 YES, SKIP FORMATTING R1 AND R3\n         IC    R1,INSTTEXT+4           GET R1 OPERAND\n         SRL   R1,4                      TO LOW NYBBLE\n         BAS   R9,REGOPNDS             GO FORMAT THE R1 REGISTER\n         MVI   0(R8),C','              SET COMMA DELIMITER\n         LA    R8,1(R8)                STEP PAST THE COMMA\n         IC    R1,INSTTEXT+1           GET R3 OPERAND\n         SRL   R1,4                      TO LOW NYBBLE\n         BAS   R9,REGOPNDS             GO FORMAT THE R3 REGISTER\n         MVI   0(R8),C','              SET COMMA DELIMITER\n         LA    R8,1(R8)                STEP PAST THE COMMA\nRXFBDOP  ICM   R1,7,INSTTEXT+1         GET X-B-D ADDRESS\n         BAS   R9,XBDOPND              GO FORMAT THE RX ADDRESS\nRXFXIT   L     R9,RXF9                 GET RETURN ADDRESS\n         BR    R9                      EXIT\nRXF9     DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*                S-FORMAT INSTRUCTION, TYPE 1 OPERANDS                *\n* THESE 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* S1    14  .OC.OC.--.--.B2.D2.D2.D2.             D2(B2)              *\n*                                                                     *\n*  S-FORMAT TYPE 1 INSTRUCTIONS INCLUDE:                              *\n*       SSM   LPSW  TS                                                *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *\n***********************************************************************\nS1OPND   ST    R9,S19                  SAVE RETURN ADDRESS\n         CLI   INSTTEXT+1,0            SECOND BYTE IS ALL ZEROS?\n         BE    S1BDOP                  YES, CONTINUE\n         MVI   ISINST,0                NO, SHOW NOT AN INSTRUCTION\n         B     S1XIT                   AND EXIT\nS1BDOP   ICM   R1,3,INSTTEXT+2         PICK UP B2D2D2D2\n         MVI   LENGTH,0                SHOW LENGTH N/A\n         BAS   R9,BDOPND               GO FORMAT THE BASE-DISPL ADDR\nS1XIT    L     R9,S19                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nS19      DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*                S-FORMAT INSTRUCTION, TYPE 2 OPERANDS                *\n* THESE 4-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *\n* X'B2'.                                                              *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* S2    15  .OC.OC.OC.OC.--.--.--.--.             (NONE)              *\n*                                                                     *\n*  S-FORMAT TYPE 2 INSTRUCTIONS INCLUDE:                              *\n*       IPK   PTLB  CSCH  HSCH  SAL   RSCH  RCHP  SCHM                *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *\n***********************************************************************\nS2OPND   ST    R9,S29                  SAVE RETURN ADDRESS\n         CLC   INSTTEXT+2(2),XZROS     LAST TWO BYTES ARE ALL ZEROS?\n         BE    S2XIT                   YES, NOTHING ELSE TO DO\n         MVI   ISINST,0                NO, NOT AN INSTRUCTION\nS2XIT    L     R9,S29                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nS29      DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*                S-FORMAT INSTRUCTION, TYPE 3 OPERANDS                *\n* THESE 4-BYTE INSTRUCTIONS HAVE TWO-BYTE OP-CODES.                   *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* S1    14  .OC.OC.OC.OC.B2.D2.D2.D2.             D2(B2)              *\n*                                                                     *\n*  S-FORMAT TYPE 3 INSTRUCTIONS INCLUDE:                              *\n*       STIDP SCK   STCK  SCKC  STCKC SPT   STPT  SPKA  SPX           *\n*       STPX  STAP  PC    SAC   CFC   MSCH  SSCH  STSCH TSCH          *\n*       TPI   STCRW STCPS RP    STCKE SACF  STSI  SRNM  STFPC         *\n*       LFPC  TRAP4                                                   *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: X'80' (CFC)                         *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *\n***********************************************************************\nS3OPND   ST    R9,S39                  SAVE RETURN ADDRESS\n         TM    INSTFLG1,X'80'          THIS THE CFC INSTRUCTION?\n         BZ    S3FORMAT                NO\n         PACK  DBLWD(1),INSTTEXT+2(1)  INVERT .B2.D2.\n         NI    DBLWD,X'0F'             CLEAR ALL BUT B2\n         CLI   DBLWD,X'02'             B2=X'02'?\n         BNE   S3FORMAT                NO, CONTINUE\nS3NOTI   MVI   ISINST,0                SHOW NOT AN INSTRUCTION\n         B     S3XIT                   AND EXIT\nS3FORMAT ICM   R1,3,INSTTEXT+2         PICK UP B2D2D2D2\n         MVI   LENGTH,0                SHOW LENGTH N/A\n         BAS   R9,BDOPND               GO FORMAT THE BASE-DISPL ADDR\nS3XIT    L     R9,S39                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nS39      DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*                SI-FORMAT INSTRUCTION OPERANDS                       *\n* THESE 4-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* SI1   16  .OC.OC.I2.I2.B1.D1.D1.D1.             D1(B1),I2           *\n*                                                                     *\n*  SI-FORMAT INSTRUCTIONS INCLUDE:                                    *\n*       TM    MVI   NI    CLI   OI    XI    STNSM STOSM MC            *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: X'80' (MC)                          *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *\n***********************************************************************\nSIOPND   ST    R9,SI9                  SAVE RETURN ADDRESS\n         TM    INSTFLG1,X'80'          THIS THE MC INSTRUCTION?\n         BZ    SIFORMAT                NO, CONTINUE\n         TM    INSTTEXT+1,X'F0'        BITS 8-11 ARE ZERO?\n         BZ    SIFORMAT                YES\nSINOTI   MVI   ISINST,0                NO, SHOW NOT AN INSTRUCTION\n         B     SIXIT                   AND EXIT\nSIFORMAT ICM   R1,3,INSTTEXT+2         PICK UP B1D1D1D1\n         MVI   LENGTH,0                SHOW LENGTH IS N/A\n         BAS   R9,BDOPND               GO FORMAT BASE-DISPL ADDRESS\n         CLI   STAGE,1                 THIS STAGE 1?\n         BE    SIXIT                   YES, SKIP IMMEDIATE OPND FORMAT\n         MVC   0(3,R8),CMAXQT          FOLLOW WITH \",X'\"\n         UNPK  3(3,R8),INSTTEXT+1(2)   UNPACK I2I2\n         TR    3(2,R8),TRCHAR-C'0'     MAKE PRINTABLE\n         MVI   5(R8),C''''             MOVE ENDING APOSTROPHE\nSIXIT    L     R9,SI9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nSI9      DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              SS-FORMAT INSTRUCTION, TYPE 1 OPERANDS                 *\n* THESE 6-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* SS1   17  .OC.OC.LL.LL.B1.D1.D1.D1.B2.D2.D2.D2. D1(LL,B1),D2(B2)    *\n*                                                                     *\n*  SS-FORMAT TYPE 1 INSTRUCTIONS INCLUDE:                             *\n*       MVN   MVC   MVZ   NC    CLC   OC    XC    TR    TRT           *\n*       ED    EDMK  MVCIN                                             *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *\n***********************************************************************\nSS1OPND  ST    R9,SS19                 SAVE RETURN ADDRESS\n         IC    R1,INSTTEXT+1           PICK UP LLLL\n         LA    R1,1(R1)                ADD 1 FOR LENGTH\n         STC   R1,LENGTH               SET OPERAND LENGTH\n         ICM   R1,3,INSTTEXT+2         PICK UP B1D1D1D1\n         BAS   R9,BDOPND               GO FORMAT THE D1(LL,B1) OPND\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST THE COMMA\n         ICM   R1,3,INSTTEXT+4         PICK UP B2D2D2D2\n         MVI   LENGTH,0                SHOW LENGTH N/A\n         BAS   R9,BDOPND               GO FORMAT THE D2(B2) OPND\nSS1XIT   L     R9,SS19                 GET RETURN ADDRESS\n         BR    R9                      EXIT\nSS19     DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              SS-FORMAT INSTRUCTION, TYPE 2 OPERANDS                 *\n* THESE 6-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* SS2   18  .OC.OC.L1.L2.B1.D1.D1.D1.B2.D2.D2.D2. D1(L1,B1),D2(L2,B2) *\n*                                                                     *\n*  SS-FORMAT TYPE 2 INSTRUCTIONS INCLUDE:                             *\n*       MVO   PACK  UNPK  ZAP   CP    AP    SP    MP    DP            *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *\n***********************************************************************\nSS2OPND  ST    R9,SS29                 SAVE RETURN ADDRESS\n         IC    R1,INSTTEXT+1           PICK UP L1L2\n         SRL   R1,4                    SHIFT OUT L2\n         N     R1,ZEROF                CLEAR ALL BUT L1\n         LA    R1,1(R1)                ADD 1 FOR LENGTH\n         STC   R1,LENGTH               SET OPERAND LENGTH\n         ICM   R1,3,INSTTEXT+2         PICK UP B1D1D1D1\n         BAS   R9,BDOPND               GO FORMAT THE D1(LL,B1) OPND\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST THE COMMA\n         IC    R1,INSTTEXT+1           PICK UP L1L2\n         N     R1,ZEROF                CLEAR ALL BUT L2\n         LA    R1,1(R1)                ADD 1 FOR LENGTH\n         STC   R1,LENGTH               SET OPERAND LENGTH\n         ICM   R1,3,INSTTEXT+4         PICK UP B2D2D2D2\n         BAS   R9,BDOPND               GO FORMAT THE D2(L2,B2) OPND\nSS2XIT   L     R9,SS29                 GET RETURN ADDRESS\n         BR    R9                      EXIT\nSS29     DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              SS-FORMAT INSTRUCTION, TYPE 3 OPERANDS                 *\n* THESE 6-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* SS3   19  .OC.OC.R1.R3.B2.D2.D2.D2.B4.D4.D4.D4. R1,D2(B2),R3,D4(B4) *\n*                                                                     *\n*  SS-FORMAT TYPE 3 INSTRUCTIONS INCLUDE: PLO                         *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *\n***********************************************************************\nSS3OPND  ST    R9,SS39                 SAVE RETURN ADDRESS\n         MVI   LENGTH,0                SHOW LENGTH N/A IN OPERANDS\n         CLI   STAGE,1                 THIS STAGE 1?\n         BE    SS3BDOP1                YES, SKIP R1 FORMAT\n         IC    R1,INSTTEXT+1           PICK UP R1R3\n         SRL   R1,4                    SHIFT OUT R3\n         BAS   R9,REGOPNDS             GO FORMAT R1 OPERAND\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST THE COMMA\nSS3BDOP1 ICM   R1,3,INSTTEXT+2         PICK UP B2D2D2D2\n         BAS   R9,BDOPND               GO FORMAT THE D2(B2) OPERAND\n         CLI   STAGE,1                 THIS STAGE 1?\n         BE    SS3BDOP2                YES, SKIP R3 FORMAT\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST THE COMMA\n         IC    R1,INSTTEXT+1           PICK UP R1R3\n         BAS   R9,REGOPNDS             GO FORMAT R3 OPERAND\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST THE COMMA\nSS3BDOP2 ICM   R1,3,INSTTEXT+4         PICK UP B4D4D4D4\n         BAS   R9,BDOPND               GO FORMAT THE D4(B4) OPERAND\nSS3XIT   L     R9,SS39                 GET RETURN ADDRESS\n         BR    R9                      EXIT\nSS39     DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              SS-FORMAT INSTRUCTION, TYPE 4 OPERANDS                 *\n* THESE 6-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* SS4   1A  .OC.OC.R1.R3.B1.D1.D1.D1.B2.D2.D2.D2. D1(R1,B1),D2(B2),R3 *\n*                                                                     *\n*  SS-FORMAT TYPE 4 INSTRUCTIONS INCLUDE: MVCK  MVCP  MVCS            *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *\n***********************************************************************\nSS4OPND  ST    R9,SS49                 SAVE RETURN ADDRESS\n         MVI   LENGTH,0                SHOW OPERAND LENGTHS N/A\n         IC    R1,INSTTEXT+1           PICK UP R1R3\n         SLL   R1,12                   MOVE R1 TO 4TH NYBBLE OF R1\n         ICM   R1,3,INSTTEXT+2         PICK UP B1D1D1D1\n         BAS   R9,XBDOPND              GO FORMAT D1(R1,B1) OPERAND\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST THE COMMA\n         ICM   R1,3,INSTTEXT+4         PICK UP B2D2D2D2\n         BAS   R9,BDOPND               GO FORMAT THE D2(B2) OPERAND\n         CLI   STAGE,1                 NOW IN STAGE 1?\n         BE    SS4XIT                  YES, SKIP R3 FORMAT\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST THE COMMA\n         IC    R1,INSTTEXT+1           PICK UP R1R3\n         BAS   R9,REGOPNDS             GO FORMAT THE R3 OPERAND\nSS4XIT   L     R9,SS49                 GET RETURN ADDRESS\n         BR    R9                      EXIT\nSS49     DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              SS-FORMAT INSTRUCTION, TYPE 5 OPERANDS                 *\n* THESE 6-BYTE INSTRUCTIONS HAVE SINGLE-BYTE OP-CODES.                *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* SS5   1B  .OC.OC.L1.I3.B1.D1.D1.D1.B2.D2.D2.D2. D1(L1,B1),D2(B2),I3 *\n*                                                                     *\n*  SS-FORMAT TYPE 5 INSTRUCTIONS INCLUDE: SRP                         *\n* NOTES: SRP IS CONSIDERED AN INSTRUCTION ONLY IF THE I3 OPERAND IS 0 *\n*        OR 5, AND THE INSTRUCTION BITS 32-41 ARE ZEROS, SINCE THE SRP*\n*        INSTRUCTION USES THE D2(B2) ADDRESS AS A SHIFT AMOUNT WITH   *\n*        NO B2 VALUE GIVEN. THE INTENT IS TO PREVENT TREATING THE     *\n*        CHARACTER '0' (X'F0') AS THE OP-CODE FOR SRP WHEN IT REALLY  *\n*        IS PART OF A CHARACTER STRING OR SOME OTHER CONSTRUCT.       *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *\n***********************************************************************\nSS5OPND  ST    R9,SS59                 SAVE RETURN ADDRESS\n         IC    R1,INSTTEXT+1           PICK UP L1I3\n         N     R1,ZEROF                CLEAR ALL BUT I3\n         BZ    SS5SHFT                 OK IF ZERO\n         CH    R1,H5                   CHECK ROUND=5\n         BE    SS5SHFT                 OK IF 5\nSS5NOTI  MVI   ISINST,0                INDICATE NOT AN INSTRUCTION\n         B     SS5XIT                  AND EXIT\nSS5SHFT  CLI   INSTTEXT+4,0            .B2.D2. BYTE IS ZERO?\n         BNE   SS5NOTI                 NO, NOT AN INSTRUCTION\n         TM    INSTTEXT+5,X'C0'        HI 2 BITS OF .D2.D2. ARE ZERO?\n         BNZ   SS5NOTI                 NO, NOT AN INSTRUCTION\n         IC    R1,INSTTEXT+1           PICK UP L1I3\n         SRL   R1,4                    SHIFT OUT I3\n         N     R1,ZEROF                CLEAR ALL BUT L1\n         LA    R1,1(R1)                MAKE L1 INTO LENGTH\n         STC   R1,LENGTH               SET OPERAND LENGTH\n         ICM   R1,3,INSTTEXT+2         PICK UP B1D1D1D1\n         BAS   R9,BDOPND               GO FORMAT D1(L1,B1) OPERAND\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST THE COMMA\n         SR    R1,R1                   CLEAR FOR INSERT\n         ICM   R1,3,INSTTEXT+4         PICK UP SHIFT AMOUNT\n         CH    R1,H32                  POSITIVE (RIGHT) SHIFT AMOUNT?\n         BL    SS5SHFMT                YES, GO FORMAT\n         MVC   0(3,R8),=CL3'64-'       SHOW LEFT SHIFT\n         LA    R8,3(R8)                STEP PAST DELIMITER\n         LA    R2,64                   COMPUTE THE\n         SR    R2,R1                      VALUE TO\n         LR    R1,R2                         BE SUBTRACTED\nSS5SHFMT BAS   R9,DECMOPND             GO FORMAT SHIFT AMOUNT\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST THE COMMA\n         IC    R1,INSTTEXT+1           PICK UP L1I3\n         N     R1,ZEROF                CLEAR ALL BUT I3\n         BAS   R9,DECMOPND             GO FORMAT I3 OPERAND\nSS5XIT   L     R9,SS59                 GET RETURN ADDRESS\n         BR    R9                      EXIT\nSS59     DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              SSE-FORMAT INSTRUCTION OPERANDS                        *\n* THESE 6-BYTE INSTRUCTIONS HAVE 2-BYTE OP-CODES WHOSE FIRST BYTE IS  *\n* X'E5'.                                                              *\n*                                                                     *\n* FMT  NBR  MEMORY CONTENT                        OPERAND CODING      *\n* SSE1  1C  .OC.OC.OC.OC.B1.D1.D1.D1.B2.D2.D2.D2. D1(B1),D2(B2)       *\n*                                                                     *\n* SSE-FORMAT INSTRUCTIONS INCLUDE:                                    *\n*       LASP  TPROT MVCSK MVCDK                                       *\n*                                                                     *\n* SPECIAL OPCFLAG1 FLAGS INCLUDE: NONE                                *\n* SPECIAL OPCFLAG2 FLAGS INCLUDE: NONE                                *\n***********************************************************************\nSSEOPND  ST    R9,SSE9                 SAVE RETURN ADDRESS\n         MVI   LENGTH,0                SHOW OPERAND LENGTHS N/A\n         ICM   R1,3,INSTTEXT+2         PICK UP B1D1D1D1\n         BAS   R9,BDOPND               GO FORMAT D1(B1)\n         MVI   0(R8),C','              SEPARATE OPERANDS\n         LA    R8,1(R8)                STEP PAST THE COMMA\n         ICM   R1,3,INSTTEXT+4         PICK UP B2D2D2D2\n         BAS   R9,BDOPND               GO FORMAT THE D2(B2) OPERAND\nSSEXIT   L     R9,SSE9                 GET RETURN ADDRESS\n         BR    R9                      EXIT\nSSE9     DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              FORMAT REGISTER OPERAND                                *\n* ON ENTRY, R8 POINTS TO THE OUTPUT LOCATION TO CONTAIN THE FORMATTED *\n* REGISTER OPERAND. THE REGISTER NUMBER IS IN THE LOW-ORDER NYBBLE OF *\n* R1. TO FORMAT, THE LETTER \"R\" IS MOVED TO THE ADDRESS POINTED TO BY *\n* R8, THEN THE REGISTER NUMBER IS MOVED TO FOLLOW THE \"R\". FINALLY,   *\n* R8 IS ADVANCED TO POINT TO THE BYTE FOLLOWING THIS OPERAND.         *\n***********************************************************************\nREGOPNDS ST    R9,RO9                  SAVE RETURN ADDRESS\n         MVI   0(R8),C'R'              REGISTER DELIMITER\n         N     R1,ZEROF                CLEAR ALL BUT THE REGISTER NBR\n         CHI   R1,9                    SINGLE-DIGIT REGISTER NUMBER?\n         BH    ROTWO                   NO, TWO-DIGIT REGISTER\n         STC   R1,1(R8)                SET REGISTER NUMBER IN OUTPUT\n         OI    1(R8),X'F0'             SET THE SIGN\n         LA    R8,2(R8)                STEP PAST THE OPERAND\n         B     ROXIT                   AND EXIT\nROTWO    MVI   1(R8),C'1'              SET TENS DIGIT IN OUTPUT\n         SH    R1,H10                  DEDUCT TEN\n         STC   R1,2(R8)                SET REGISTER NUMBER IN OUTPUT\n         OI    2(R8),X'F0'             SET THE SIGN\n         LA    R8,3(R8)                STEP PAST THE OPERAND\nROXIT    L     R9,RO9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nRO9      DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              FORMAT DECIMAL OPERAND                                 *\n* ON ENTRY, R8 POINTS TO THE OUTPUT LOCATION TO CONTAIN THE FORMATTED *\n* DECIMAL OPERAND. THE OPERAND VALUE IS GIVEN BY THE LOW ORDER 12 BITS*\n* OF R1 IN BINARY. IT IS CONVERTED TO DECIMAL AND PLACED AT THE       *\n* ADDRESS IN R8. AFTER THIS, R8 IS UPDATED TO POINT PAST THE OPERAND. *\n***********************************************************************\nDECMOPND ST    R9,DO9                  SAVE RETURN ADDRESS\n         N     R1,KEEPLO12             CLEAR ALL BUT LOW 12 BITS\n         CVD   R1,DBLWD                CONVERT TO DECIMAL\n         CP    DBLWD,PK999             4 DIGITS?\n         BH    DO4                     YES\n         CP    DBLWD,PK99              3 DIGITS?\n         BH    DO3                     YES\n         CP    DBLWD,PK9               2 DIGITS?\n         BH    DO2                     YES\nDO1      UNPK  0(1,R8),DBLWD           UNPACK SINGLE DIGIT\n         OI    0(R8),X'F0'             CLEAR THE SIGN\n         LA    R8,1(R8)                STEP PAST THE OPERAND\n         B     DOXIT                   AND EXIT\nDO2      UNPK  0(2,R8),DBLWD           UNPACK SINGLE DIGIT\n         OI    1(R8),X'F0'             CLEAR THE SIGN\n         LA    R8,2(R8)                STEP PAST THE OPERAND\n         B     DOXIT                   AND EXIT\nDO3      UNPK  0(3,R8),DBLWD           UNPACK SINGLE DIGIT\n         OI    2(R8),X'F0'             CLEAR THE SIGN\n         LA    R8,3(R8)                STEP PAST THE OPERAND\n         B     DOXIT                   AND EXIT\nDO4      UNPK  0(4,R8),DBLWD           UNPACK SINGLE DIGIT\n         OI    3(R8),X'F0'             CLEAR THE SIGN\n         LA    R8,4(R8)                STEP PAST THE OPERAND\nDOXIT    L     R9,DO9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nDO9      DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*              FORMAT CONDITIONAL BRANCH OPERAND                      *\n* ON ENTRY, R8 POINTS TO THE FIRST BYTE OF THE OUTPUT OPERAND FIELD.  *\n* THE MASK VALUE IS IN THE LOW-ORDER NYBBLE OF R1. THE  MASK VALUE IS *\n* USED AS AN INDEX TO THE LASTCCNT TABLE TO OBTAIN THE EXTENDED       *\n* MNEMONIC TO BE USED. IF THE ENTRY FOUND IS ALPHABETIC, IT IS MOVED  *\n* TO THE OUTPUT MNEMONIC FIELD (AN \"R\" IS APPENDED IF THIS IS A TWO-  *\n* BYTE BRANCH INSTRUCTION) AND R8 IS LEFT AS-IS. WHEN THE ENTRY FOUND *\n* CONTAINS A NUMERIC VALUE, IT IS MOVED TO THE OUTPUT OPERAND FIELD,  *\n* R8 IS UPDATED TO POINT PAST THE MASK VALUE, AND THE MNEMONIC IS LEFT*\n* AS-IS.                                                              *\n***********************************************************************\nCONDOPND ST    R9,CO9                  SAVE RETURN ADDRESS\n         N     R1,ZEROF                CLEAR ALL BUT THE MASK VALUE\n         MHI   R1,3                    COMPUTE TABLE OFFSET\n         LA    R1,LASTCCNT(R1)         POINT TO COND CODE TABLE VALUE\n         CLI   0(R1),C'0'              NUMERIC TABLE ENTRY?\n         BNL   CONUM                   YES\n         MVC   OUTMNEM(3),0(R1)        MOVE EXTENDED MNEMONIC\n         MVC   OUTMNEM+3(2),BLANKS     CLEAR UNUSED BYTES\n         CLI   INSTLENG,2              THIS A TWO-BYTE BRANCH INST?\n         BNE   COXIT                   NO, FINISHED\n         CLI   OUTMNEM+1,C' '          BYTE 2 IS BLANK?\n         BNE   COTRY3                  NO\n         MVI   OUTMNEM+1,C'R'          YES, MOVE APPENDING R TO BYTE 2\n         B     COXIT                   AND EXIT\nCOTRY3   CLI   OUTMNEM+2,C' '          BYTE 3 IS BLANK?\n         BNE   COIS4                   NO\n         MVI   OUTMNEM+2,C'R'          YES, MOVE APPENDING R TO BYTE 3\n         B     COXIT                   AND EXIT\nCOIS4    MVI   OUTMNEM+3,C'R'          MOVE APPENDING R TO BYTE 4\n         B     COXIT                   AND EXIT\nCONUM    MVC   0(2,R8),0(R1)           MOVE IN MASK DIGITS\n         CLI   1(R8),C' '              SINGLE DIGIT MASK?\n         BNE   COTWO                   NO, TWO DIGIT MASK\n         MVI   1(R8),C','              MOVE IN COMMA SEPARATOR\n         LA    R8,2(R8)                STEP PAST THE OPERAND\n         B     COXIT                   AND EXIT\nCOTWO    MVI   2(R8),C','              MOVE IN COMMA SEPARATOR\n         LA    R8,3(R8)                STEP PAST THE OPERAND\nCOXIT    L     R9,CO9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nCO9      DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*                INDEX-BASE-DISPLACEMENT ADDRESSES                    *\n* ON ENTRY R8 POINTS TO THE NEXT BYTE OF THE OPERAND FIELD, R1'S LOW  *\n* ORDER TWO BYTES CONTAIN THE BASE-DISPLACEMENT PORTION, AND ITS 4TH  *\n* NYBBLE CONTAINS THE INDEX REGISTER NUMBER:                          *\n*      R1 ON ENTRY: --.--.--.XX.BB.DD.DD.DD.                          *\n* IF THIS IS STAGE 1, THE ADDLABEL ROUTINE IS CALLED TO BUILD A LABEL *\n* TABLE ENTRY FOR THE OPERAND ADDRESS, FOR STAGE 2 THE ADDRESS IS     *\n* FORMATTED EITHER AS DISP(INDX,BASE) OR AS LBL(INDX) IF A LABEL IS   *\n* FOUND IN THE LABEL TABLE FOR THE BASE-DISPLACEMENT ADDRESS PORTION. *\n***********************************************************************\nXBDOPND  ST    R9,XO9                  SAVE RETURN ADDRESS\n         STH   R1,DISPLAC              SAVE THE DISPLACEMENT\n         NI    DISPLAC,X'0F'           CLEAR HIGH ORDER NYBBLE\n         SRL   R1,12                   SHIFT OUT DISPLACEMENT\n         STC   R1,BASE                 SAVE BASE REGISTER NUMBER\n         NI    BASE,X'0F'              CLEAR HIGH ORDER NYBBLE\n         CLI   STAGE,2                 IS THIS STAGE 2?\n         BE    XOSTG2                  YES\n         BAS   R9,ADDLABEL             NO, GO ADD NEW LABEL\n         B     XOXIT                   AND THEN EXIT\nXOSTG2   SRL   R1,4                    SHIFT OUT THE BASE REGISTER\n         STC   R1,INDEX                SAVE INDEX REGISTER NUMBER\n         NI    INDEX,X'0F'             CLEAR HIGH ORDER NYBBLE\n         BAS   R9,GETLABEL             GO GET A LABEL\n         CLI   0(R8),0                 WAS A LABEL FOUND?\n         BE    XOEXPL                  NO, FORMAT EXPLICIT OPERAND\n         CLI   INDEX,0                 IS THERE AN INDEX REGISTER?\n         BE    XOXIT                   NO, EXIT\n         MVI   0(R8),C'('              MOVE OPEN PAREN\n         LA    R8,1(R8)                STEP PAST OPENING PAREN\n         IC    R1,INDEX                PICK UP INDEX REGISTER NUMBER\n         BAS   R9,REGOPNDS             GO FORMAT THE REGISTER NUMBER\n         MVI   0(R8),C')'              MOVE CLOSING PARENTHESIS\n         LA    R8,1(R8)                STEP PAST THE OPERAND\n         B     XOXIT                   AND EXIT\nXOEXPL   LH    R1,DISPLAC              PICK UP DISPLACEMENT\n         CVD   R1,DBLWD                CONVERT IT TO PACKED DECIMAL\n         CP    DBLWD,PK999             DISPLACEMENT IS 4 DIGITS?\n         BH    XOGT1K                  YES\n         CP    DBLWD,PK99              DISPLACEMENT IS 3 DIGITS?\n         BH    XOGTHUND                YES\n         CP    DBLWD,PK9               DISPLACEMENT IS 2 DIGITS?\n         BH    XOGTTEN                 YES\n         UNPK  0(1,R8),DBLWD           UNPACK 1-BYTE DISPLACEMENT\n         OI    0(R8),X'F0'             MAKE SIGN VALID\n         LA    R8,1(R8)                STEP PAST DISPLACEMENT\n         B     XOCKANY                 CONTINUE\nXOGT1K   UNPK  0(4,R8),DBLWD           UNPACK 1-BYTE DISPLACEMENT\n         OI    3(R8),X'F0'             MAKE SIGN VALID\n         LA    R8,4(R8)                STEP PAST DISPLACEMENT\n         B     XOCKANY                 CONTINUE\nXOGTHUND UNPK  0(3,R8),DBLWD           UNPACK 1-BYTE DISPLACEMENT\n         OI    2(R8),X'F0'             MAKE SIGN VALID\n         LA    R8,3(R8)                STEP PAST DISPLACEMENT\n         B     XOCKANY                 CONTINUE\nXOGTTEN  UNPK  0(2,R8),DBLWD           UNPACK 1-BYTE DISPLACEMENT\n         OI    1(R8),X'F0'             MAKE SIGN VALID\n         LA    R8,2(R8)                STEP PAST DISPLACEMENT\nXOCKANY  CLI   INDEX,0                 IS THERE AN INDEX REGISTER?\n         BNE   XOSETOPN                YES\n         CLI   BASE,0                  IS THERE A BASE REGISTER?\n         BE    XOXIT                   NO, ALL THRU\nXOSETOPN MVI   0(R8),C'('              MOVE IN OPENING PARENTHESIS\n         LA    R8,1(R8)                STEP PAST OPENING PARENTHESIS\n         CLI   INDEX,0                 IS THERE AN INDEX REG?\n         BE    XOXCKBAS                CONTINUE TO BASE\nXOGOTIX  IC    R1,INDEX                GET INDEX REGISTER NUMBER\n         BAS   R9,REGOPNDS             GO FORMAT INDEX REGISTER\nXOXCKBAS CLI   BASE,0                  IS THERE A BASE REGISTER?\n         BE    XOSETRPN                NO\n         MVI   0(R8),C','              MOVE SEPARATING COMMA\n         LA    R8,1(R8)                STEP PAST THE COMMA\nXOGOTB   IC    R1,BASE                 GET BASE REGISTER NUMBER\n         BAS   R9,REGOPNDS             GO FORMAT THE BASE REGISTER\nXOSETRPN MVI   0(R8),C')'              MOVE CLOSING PARENTHESIS\n         LA    R8,1(R8)                STEP PAST CLOSING PARENTHESIS\nXOXIT    L     R9,XO9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nXO9      DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*                BASE-DISPLACEMENT ADDRESSES                          *\n* ON ENTRY R8 POINTS TO THE NEXT BYTE OF THE OPERAND FIELD, R1'S LOW  *\n* ORDER TWO BYTES CONTAIN THE BASE-DISPLACEMENT ADDRESS:              *\n*      R1 ON ENTRY: --.--.--.--.BB.DD.DD.DD.                          *\n*      LENGTH CONTAINS 0 IF N/A, ELSE THE OPERAND LENGTH              *\n* IF THIS IS STAGE 1, THE ADDLABEL ROUTINE IS CALLED TO BUILD A LABEL *\n* TABLE ENTRY FOR THE OPERAND ADDRESS.                                *\n* FOR STAGE 2 THE LABEL TABLE IS SEARCHED FOR A LABEL AT THE BASE-    *\n* DISPLACEMENT ADDRESS. IF FOUND, FORMAT IS LABEL(LENG) OTHERWISE     *\n* EXPLICIT FORMAT IS USED: DISP(LENG,BASE). THE LENGTH PORTION IS     *\n* OMITTED WHEN LENGTH=0.                                              *\n***********************************************************************\nBDOPND   ST    R9,BO9                  SAVE RETURN ADDRESS\n         STH   R1,DISPLAC              SAVE THE DISPLACEMENT\n         NI    DISPLAC,X'0F'           CLEAR HIGH ORDER NYBBLE\n         SRL   R1,12                   SHIFT OUT DISPLACEMENT\n         STC   R1,BASE                 SAVE BASE REGISTER NUMBER\n         NI    BASE,X'0F'              CLEAR HIGH ORDER NYBBLE\n         CLI   STAGE,2                 IS THIS STAGE 2?\n         BE    BOSTG2                  YES\n         BAS   R9,ADDLABEL             NO, GO ADD NEW LABEL\n         B     BOXIT                   AND THEN EXIT\nBOSTG2   BAS   R9,GETLABEL             GO GET A LABEL\n         CLI   0(R8),0                 WAS A LABEL FOUND?\n         BE    BOEXPL                  NO, FORMAT EXPLICIT OPERAND\n         CLI   LENGTH,0                IS THERE A LENGTH SPECIFIED?\n         BZ    BOXIT                   NO, EXIT\n         MVI   0(R8),C'('              MOVE OPEN PAREN\n         LA    R8,1(R8)                STEP PAST OPENING PAREN\n         SR    R1,R1                   CLEAR FOR INSERT\n         IC    R1,LENGTH               PICK UP LENGTH\n         BAS   R9,DECMOPND             GO FORMAT THE LENGTH\n         MVI   0(R8),C')'              MOVE CLOSING PARENTHESIS\n         LA    R8,1(R8)                STEP PAST THE OPERAND\n         B     BOXIT                   AND EXIT\nBOEXPL   LH    R1,DISPLAC              PICK UP DISPLACEMENT\n         BAS   R9,DECMOPND             GO FORMAT THE DISPLACEMENT\nBOCKANY  CLI   LENGTH,0                IS THERE ANY LENGTH?\n         BNE   BOSETOPN                YES\n*        CLI   BASE,0                  IS THERE A BASE REGISTER?   JR\n*        BE    BOXIT                   NO, ALL THRU                JR\nBOSETOPN MVI   0(R8),C'('              MOVE IN OPENING PARENTHESIS\n         LA    R8,1(R8)                STEP PAST OPENING PARENTHESIS\n         CLI   LENGTH,0                IS THERE A LENGTH SPECIFIED\n         BE    BOXCKBAS                CONTINUE TO BASE\nBOGOTIX  SR    R1,R1                   CLEAR FOR INSERT\n         IC    R1,LENGTH               GET LENGTH\n         BAS   R9,DECMOPND             GO FORMAT THE LENGTH\n         MVI   0(R8),C','              MOVE SEPARATING COMMA\n         LA    R8,1(R8)                STEP PAST THE COMMA\nBOXCKBAS CLI   BASE,0                  IS THERE A BASE REGISTER?\n*        BE    BOSETRPN                NO                          JR\nBOGOTB   IC    R1,BASE                 GET BASE REGISTER NUMBER\n         BAS   R9,REGOPNDS             GO FORMAT THE BASE REGISTER\nBOSETRPN MVI   0(R8),C')'              MOVE CLOSING PARENTHESIS\n         LA    R8,1(R8)                STEP PAST CLOSING PARENTHESIS\nBOXIT    L     R9,BO9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nBO9      DC    A(0)                    RETURN ADDRESS\n***********************************************************************\n*             SEARCH THE LABEL TABLE FOR A LABEL                      *\n* CALLER SETS THE BASE REGISTER NUMBER IN THE BASE FIELD AND THE      *\n* DISPLACEMENT IN THE DISPLAC FIELD. THIS ROUTINE CHECKS TO SEE IF    *\n* A USING HAS BEEN DECLARED FOR THE SPECIFIED BASE REGISTER. IF IT HAS*\n* THE CSECT OFFSET IS COMPUTED AS USING VALUE + DISPLACEMENT VALUE,   *\n* AND THE LABEL TABLE IS SEARCHED FOR A LABEL AT THIS LOCATION. IF    *\n* FOUND, THE LABEL IS MOVED TO THE ADDRESS IN R8, AND R8 IS UPDATED TO*\n* POINT TO THE NEXT BYTE FOLLOWING THE LABEL. IF NO LABEL IS FOUND, R8*\n* WILL BE UNCHANGED, AND THE BYTE AT THE ADDRESS IN R8 WILL BE SET TO *\n* X'00'.                                                              *\n***********************************************************************\nGETLABEL ST    R9,GL9                  SAVE RETURN ADDRESS\n         MVI   0(R8),0                 SET NOT FOUND INDICATOR\n         SR    R1,R1                   CLEAR FOR INSERT\n         IC    R1,BASE                 GET BASE REGISTER NUMBER\n         SLL   R1,2                    MULTIPLY BY 4\n         LA    R1,USENTRY(R1)          POINT TO USING TABLE ENTRY\n         ICM   R1,15,0(R1)             GET USING ELEMENT\n         BZ    GLXIT                   NO USING, EXIT\n         LA    R1,0(R1)                CLEAR HI BIT\n         AH    R1,DISPLAC              COMPUTE CSECT OFFSET TO ADDR\n         L     R15,LBLTBADR            POINT TO LABEL TABLE\n         USING LBLDSECT,R15\nGLCKLBND C     R15,LBLTBEND            PAST END OF TABLE?\n         BNL   GLXIT                   YES, NO LABEL FOUND, EXIT\n         C     R1,LBLOFSET             PAST ANY POSSIBLE ENTRY?\n         BL    GLXIT                   YES, EXIT\n         BH    GLSTEP                  NO, NOT FAR ENOUGH\n         CLI   LBLTYPE,X'20'           POSSIBLY LABEL ENTRY?\n         BL    GLSTEP                  NO\n         CLI   LBLLABEL,C'A'           LABEL PRESENT?\n         BNL   GLGOTONE                YES, GOT ONE\nGLSTEP   LA    R15,L'LBLENTRY(R15)     NO, STEP TO NEXT ENTRY\n         B     GLCKLBND                LOOP THROUGH THE TABLE\nGLGOTONE MVC   0(8,R8),LBLLABEL        YES, MOVE LABEL TO OPERAND FIELD\n         MVC   LABELENG,LBLRLDLN       SAVE ASSOCIATED LABEL LENGTH\n         LA    R8,7(R8)                POINT TO 8TH BYTE OF LABEL\nGLCKRHE  CLI   0(R8),C' '              AT A BLANK?\n         BNE   GLLBIX                  NO, AT RIGHT END\n         BCT   R8,GLCKRHE              LOOP TO FIND RHE\nGLLBIX   LA    R8,1(R8)                STEP PAST THE LABEL\n         DROP  R15\nGLXIT    L     R9,GL9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nGL9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n* BUILD UP THE CONSTANT IN PROGRESS, OR START ONE IF THERE IS NONE  *\n* IN PROGRESS.                                                      *\n*********************************************************************\nBLDCONST ST    R9,BC9                  SAVE RETURN ADDRESS\n         CLI   CONPROG,0               CONSTANT IN PROGRESS?\n         BNE   BCCHKLEN                YES\nBCNEW    L     R12,CURRTXTA            POINT TO CURRENT TEXT BYTE\n         TRT   0(3,R12),CHKCHAR        3 CONSECUTIVE CHARACTERS?\n         BZ    BCNEWC                  YES\n         MVI   CONPROG,C'X'            NO, INDICATE HEX CONSTANT\n         B     BCSETLEN                CONTINUE\nBCNEWC   MVI   CONPROG,C'C'            INDICATE CHARACTER CONSTANT\nBCSETLEN MVC   CONLENG,H1              SET CONSTANT LENGTH TO 0\n         MVC   CONSTRTL,LOCATION       SAVE STARTING LOCATION\n         MVC   CONSTANT(1),0(R12)      SAVE THE CONSTANT BYTE\n         B     BCUPDATE                GO UPDATE POINTERS\nBCCHKLEN CLC   CONLENG,H32             ALREADY HAVE 32 BYTES?\n         BNL   BCFORCE                 YES, GO FORCE IT OUT\n         CLI   CONPROG,C'C'            CHARACTER CONSTANT IN PROGRESS?\n         BE    BCCHLBLL                YES\n         CLC   CONLENG,H16             ALREADY HAVE 16 BYTES?\n         BL    BCCHLBLL                NO, CONTINUE\nBCFORCE  BAS   R9,FORCECON             YES, GO FORCE CURRENT ONE OUT\n         B     BCNEW                   GO START ANOTHER\nBCCHLBLL CLI   OUTLABEL,C' '           STATEMENT HAS A LABEL?\n         BE    BCCKCTNU                NO\n         CLC   LBLLENG,H0              LENGTH ASSOCIATED WITH LABEL?\n         BE    BCCKCTNU                NO\n         CLC   CONLENG,LBLLENG         CONSTANT LENGTH = LABEL LENGTH?\n         BNE   BCCKCTNU                NO\n         B     BCFORCE                 YES, GO FORCE CURRENT ONE OUT\nBCCKCTNU L     R12,CURRTXTA            POINT TO CURRENT TEXT BYTE\n         CLI   CONPROG,C'X'            HEX CONSTANT IN PROGRESS?\n         BNE   BCCKCCTN                NO\n         TRT   0(3,R12),CHKCHAR        3 CHARACTERS FOLLOW HERE?\n         BNZ   BCTACKON                NO, CONTINUE WITH HEX\n         B     BCFORCE                 YES, GO FORCE HEX CONST OUT\nBCCKCCTN TRT   0(1,R12),CHKCHAR        THIS BYTE A CHARACTER?\n         BZ    BCTACKON                YES, CONTINUE IN CHAR\n         B     BCFORCE                 NO, GO FORCE CHAR CONST OUT\nBCTACKON LH    R1,CONLENG              PICK UP CURRENT LENGTH\n         LA    R1,CONSTANT(R1)         POINT TO CURRENT BYTE IN CONST\n         L     R12,CURRTXTA            POINT TO CURRENT TEXT BYTE\n         MVC   0(1,R1),0(R12)          MOVE BYTE TO CONSTANT IN PROG\n         LH    R1,CONLENG              UPDATE\n         LA    R1,1(R1)                   CONSTANT\n         STH   R1,CONLENG                    LENGTH\nBCUPDATE LA    R12,1(R12)              UPDATE CURRENT\n         ST    R12,CURRTXTA               TEXT ADDRESS\n         L     R1,LOCATION             UPDATE\n         LA    R1,1(R1)                   CURRENT\n         ST    R1,LOCATION                   LOCATION\nBCXIT    L     R9,BC9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nBC9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n* FORCE THE CURRENT CONSTANT IN PROGRESS OUT: WRITE THE SYSOUT      *\n* SOURCE STATEMENT AND CLEAR STORAGE AREAS.                         *\n*********************************************************************\nFORCECON ST    R9,FC9\n         CLI   STAGE,1                 NOW IN STAGE 1?\n         BE    FCXIT                   YES, NOTHING TO DO NOW\n         MVC   OUTMNEM(2),=CL2'DC'     MOVE MNEMONIC\n         MVC   OUTOPND(1),CONPROG      BEGIN OPERAND WITH C OR X\n         MVI   OUTOPND+1,C'L'          SET LENGTH DELIMITER\n         LH    R2,CONLENG              GET CONSTANT LENGTH\n         CVD   R2,DBLWD                CONVERT TO PACKED DECIMAL\n         CP    DBLWD,PK9               OVER 9 BYTES?\n         BH    FCOVR9                  YES\n         UNPK  OUTOPND+2(1),DBLWD      UNPACK LENGTH\n         OI    OUTOPND+2,X'F0'         AND CLEAR THE SIGN\n         LA    R11,OUTOPND+3           POINT TO OPENING APOSTROPHE\n         B     FCOPENIT                GO SET OPENING APOSTROPHE\nFCOVR9   UNPK  OUTOPND+2(2),DBLWD      UNPACK LENGTH\n         OI    OUTOPND+3,X'F0'         AND CLEAR THE SIGN\n         LA    R11,OUTOPND+4           POINT TO OPENING APOSTROPHE\nFCOPENIT MVI   0(R11),C''''            OPENING APOSTROPHE\n         LA    R11,1(R11)              STEP PAST LEADING APOSTROPHE\n         LA    R12,CONSTANT            POINT TO CONSTANT AREA\n         LH    R15,CONLENG             GET CONSTANT LENGTH\n         UNPK  OUTOFFST(7),CONSTRTL+1(4) UNPACK LOCATION\n         MVI   OUTOFFST+6,C' '         CLEAR TRASH\n         TR    OUTOFFST,TRCHAR-C'0'    MAKE PRINTABLE\n         CLI   CONPROG,C'C'            THIS A CHARACTER CONSTANT?\n         BE    FCCHARS                 YES\n         ST    R11,WORKFWD             SAVE TEXT START ADDRESS\nFCFMTHEX UNPK  0(3,R11),0(2,R12)       UNPACK\n         MVC   2(2,R11),=C''' '        MOVE ENDING APOSTROPHE\n         TR    0(2,R11),TRCHAR-C'0'    MAKE PRINTABLE\n         LA    R11,2(R11)              TO NEXT OPERAND LOCATION\n         LA    R12,1(R12)              TO NEXT CONSTANT BYTE\n         BCT   R15,FCFMTHEX            LOOP TO BUILD TEXT\n         L     R11,WORKFWD             POINT TO THE TEXT\n         LH    R1,CONLENG              PICK UP CONSTANT LENGTH\n         SLL   R1,1                    DOUBLE FOR HEX\n         BCTR  R1,0                    COMPUTE LENGTH CODE\n         CH    R1,H8                   TOO MUCH TO MOVE?\n         BL    FCMOVIT                 NO\n         LA    R1,7                    SET LENGTH MAX\n         MVC   OUTTEXT+8(3),=CL3'...'  SHOW TEXT TRUNCATED\nFCMOVIT  EX    R1,FCMVTXT              MOVE THE TEXT\n         B     FCFINI                  FINISHED\nFCCHARS  BCTR  R15,0                   GET MOVE LENGTH CODE\n         EX    R15,FCMVCHAR            MOVE CHARACTERS\n         AR    R11,R15                 POINT TO LAST BYTE MOVED\n         MVC   1(2,R11),=C''' '        SET ENDING APOSTROPHE\n         CH    R15,H3                  CONSTANT LESS THAN 4 BYTES?\n         BL    FCCHLT4                 YES\n         UNPK  OUTTEXT(9),0(5,R12)     UNPACK 4 BYTES TO PRINT\n         MVI   OUTTEXT+8,C' '          CLEAR TRASH\n         TR    OUTTEXT(8),TRCHAR-C'0'  MAKE IT PRINTABLE\n         BE    FCFINI                  EXACTLY FOUR BYTES, ALL THROUGH\n         MVC   OUTTEXT+8(3),=CL3'...'  SHOW TEXT TRUNCATED\n         B     FCFINI                  ALL THROUGH\nFCCHLT4  CH    R15,H2                  CONSTANT IS 3 BYTES?\n         BL    FCCHLT3                 NO, LESS THAN 3\n         UNPK  OUTTEXT(7),0(4,R12)     UNPACK 3 BYTES TO PRINT\n         MVI   OUTTEXT+6,C' '          CLEAR TRASH\n         TR    OUTTEXT(6),TRCHAR-C'0'  MAKE PRINTABLE\n         B     FCFINI                  ALL THRU\nFCCHLT3  CH    R15,H1                  CONSTANT IS 2 BYTES?\n         BL    FCCHLT2                 NO, LESS THAN 2 BYTES\n         UNPK  OUTTEXT(5),0(3,R12)     UNPACK 2 BYTES TO PRINT\n         MVI   OUTTEXT+4,C' '          CLEAR TRASH\n         TR    OUTTEXT(4),TRCHAR-C'0'  MAKE PRINTABLE\n         B     FCFINI                  ALL THRU\nFCCHLT2  UNPK  OUTTEXT(3),0(2,R12)     UNPACK 1 BYTE TO PRINT\n         MVI   OUTTEXT+2,C' '          CLEAR TRASH\n         TR    OUTTEXT(2),TRCHAR-C'0'  MAKE PRINTABLE\nFCFINI   BAS   R9,OUTPUT               WRITE OUTPUT LINE\n         MVI   CONPROG,0               RESET CON-IN-PROG SWITCH\n         MVI   LAST,C'C'               SHOW LAST WAS CONSTANT\nFCXIT    L     R9,FC9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nFC9      DC    A(0)                    RETURN ADDRESS\nFCMVTXT  MVC   OUTTEXT(1),0(R11)       EXECUTED MOVE\nFCMVCHAR MVC   0(1,R11),CONSTANT       EXECUTED MOVE\n***********************************************************************\n* TEST A BYTE OF TEXT TO SEE IF IT MAY BEGIN AN INSTRUCTION.          *\n***********************************************************************\nSRCHOC   ST    R9,SO9                  SAVE RETURN ADDRESS\n         L     R12,CURRTXTA            POINT TO CURRENT TEXT BYTE\n         MVI   ISINST,0                CLEAR INDICATOR\n         SR    R1,R1                   CLEAR FOR INSERT\n         IC    R1,0(R12)               PICK UP TEXT BYTE\n         MHI   R1,L'OPCENTRY           MULTIPLY BY ENTRY LENGTH\n         A     R1,OPCDTBLA             POINT TO GENERAL OP-CODE ENTRY\n         USING OPCODES,R1\n         MVC   INSTBYT1,OPCODE1        SAVE (1ST BYTE OF) OP-CODE\n         CLI   OPCTWO2,C'2'            THIS A TWO-BYTE OP-CODE?\n         BNE   SOGOT1                  NO, SINGLE BYTE OP-CODE\n         ICM   R1,15,OPCSRCH2          GET 2-BYTE OP-CODE TABL ADDR\n         CLI   INSTBYT1,X'ED'          IST BYTE OF OP-CODE IS X'ED'?\n         BE    SOPLUS5                 YES, GO SEARCH\n         CLI   INSTBYT1,X'A7'          IST BYTE OF OP-CODE IS X'A7'?\n         BE    SOSRCHA7                YES, GO SEARCH\nSOPLUS1  CLC   0(4,R1),HEXFFS          END OF TABLE?\n         BE    SOXIT                   YES, NOT AN INSTRUCTION\n         CLC   OPCODE2,1(R12)          FOUND THE OPCODE ENTRY?\n         BE    SOGOT1                  YES\n         BH    SOXIT                   NO, PAST IT\n         LA    R1,L'OPCENTRY(R1)       STEP TO NEXT ENTRY\n         B     SOPLUS1                 LOOP THRU TABLE\nSOSRCHA7 SR    R2,R2                   CLEAR FOR INSERTS\nSO1DOT5  CLC   0(4,R1),HEXFFS          END OF TABLE?\n         BE    SOXIT                   YES, NOT AN INSTRUCTION\n         PACK  WORK1(1),1(1,R12)       INVERT THE .R1.OC. BYTE\n         NI    WORK1,X'F0'             LEAVE ONLY .OC. IN HIGH NYBBLE\n         CLC   OPCODE2,WORK1           FOUND THE OPCODE ENTRY?\n         BE    SOGOT1                  YES\n         BH    SOXIT                   NO, PAST IT\n         LA    R1,L'OPCENTRY(R1)       STEP TO NEXT ENTRY\n         B     SO1DOT5                 LOOP THRU TABLE\nSOPLUS5  CLC   0(4,R1),HEXFFS          END OF TABLE?\n         BE    SOXIT                   YES, NOT AN INSTRUCTION\n         CLC   OPCODE2,5(R12)          FOUND THE OPCODE ENTRY?\n         BE    SOGOT1                  YES\n         BH    SOXIT                   NO, PAST IT\n         LA    R1,L'OPCENTRY(R1)       STEP TO NEXT ENTRY\n         B     SOPLUS5                 LOOP THRU TABLE\nSOGOT1   SR    R2,R2                   CLEAR FOR INSERT\n         CLI   OPCMNEM,0               IS IT AN INSTRUCTION?\n         BE    SOXIT                   NO, NOT AN INSTRUCTION\n         MVC   INSTFMT,OPCFORMT        SAVE INSTRUCTION FORMAT CODE\n         MVC   INSTFLG1,OPCFLAG1       SAVE FLAG BYTE 1\n         MVC   INSTFLG2,OPCFLAG2       SAVE FLAG BYTE 2\n         TM    INSTBYT1,X'C0'          TEST OPCODE LENGTH BITS\n         BZ    SOLEN2                  BOTH ZERO: 2-BYTE INSTRUCTION\n         BO    SOLEN6                  BOTH ONE: 6-BYTE INSTRUCTION\n         MVI   INSTLENG,4              SET 4-BYTE LENGTH\n         B     SOCLRTXT                CONTINUE\nSOLEN6   MVI   INSTLENG,6              SET 6-BYTE LENGTH\n         B     SOCLRTXT                CONTINUE\nSOLEN2   MVI   INSTLENG,2              SET 2-BYTE LENGTH\nSOCLRTXT XC    INSTTEXT,INSTTEXT       CLEAR INSTRUCTION TEXT\n         SR    R2,R2                   CLEAR FOR INSERT\n         IC    R2,INSTLENG             GET INSTRUCTION LENGTH\n         BCTR  R2,0                    COMPUTE TEXT LENGTH\n         EX    R2,SOMVTXT              MOVE INSTRUCTION TEXT\n         MVC   INSTMNEM,OPCMNEM        SAVE MNEMONIC\n         MVC   INSTFLAG,OPCFLAGS       SAVE FLAGS\n         MVC   INSTCCNT,OPCNDCOD       SAVE CONDITION CODE ENTRY NBR\n         MVI   ISINST,1                INDICATE TEXT IS INSTRUCTION\n         DROP  R1\nSOXIT    L     R9,SO9                  GET RETURN ADRESS\n         BR    R9                      EXIT\nSO9      DC    A(0)                    RETURN ADDRESS\nSOMVTXT  MVC   INSTTEXT(1),0(R12)      EXECUTED MOVE\n*********************************************************************\n* ADD AN ENTRY TO THE LABEL TABLE. THE NEW ENTRY IS REPRESENTED BY  *\n* A BASE-DISPLACEMENT ADDRESS, AND THE CALLER HAS FILLED IN THE BASE*\n* AND DISPLAC FIELDS BEFORE CALLING THIS ROUTINE.                   *\n* FIRST, THE USENTRY TABLE IS SEARCHED TO SEE IF THERE IS A CURRENT *\n* USING STATEMENT IN EFFECT FOR THE BASE REGISTER SPECIFIED. IF NOT *\n* THE NEW LABEL REQUEST IS IGNORED. NEXT, THE NEW LABEL ENTRY IS    *\n* BUILT AT THE END OF THE TABLE, AND IS THEN SORTED IN CORRECT      *\n* POSITION. IF A LABEL ALREADY EXISTS AT THIS LOCATION, THE NEW ONE *\n* IS DROPPED.                                                       *\n*********************************************************************\nADDLABEL ST    R9,AL9                  SAVE RETURN ADDRESS\n         SR    R1,R1                   CLEAR FOR INSERT\n         IC    R1,BASE                 GET BASE REGISTER NUMBER\n         SLL   R1,2                    MULTIPLY BY 4\n         LA    R1,USENTRY(R1)          POINT TO USING TABLE ENTRY\n         ICM   R1,15,0(R1)             GET USING ELEMENT\n         BZ    ALXIT                   NO USING, EXIT\n         LA    R1,0(R1)                CLEAR HI ORDER BIT\n         AH    R1,DISPLAC              COMPUTE CSECT OFFSET TO ADDR\n         L     R15,CURRLABL            POINT TO NEW LABEL LOCATION\n         USING LBLDSECT,R15\n         XC    LBLENTRY,LBLENTRY       PRE-CLEAR THE ENTRY\n         ST    R1,LBLOFSET             SAVE THE OFFSET\n         MVI   LBLTYPE,X'30'           SET TYPE TO LABEL\n         MVI   LBLLABEL,C'A'           FIRST CHARACTER OF LABEL\n         UNPK  LBLLABEL+1(7),LBLOFSET+1(4) UNPACK LOCATION\n         MVI   LBLLABEL+7,C' '         CLEAR TRASH\n         TR    LBLLABEL+1(6),TRCHAR-C'0' MAKE HEX PRINTABLE\n         DROP  R15\n         L     R1,LBLTBADR             POINT TO FIRST TABLE ENTRY\n         USING LBLDSECT,R1\n         L     R2,CURRLABL             POINT TO NEW ENTRY\nALCHKEND CR    R1,R2                   PRESENTLY AT NEW ENTRY?\n         BNL   ALADVANC                YES\n         CLC   0(5,R2),LBLENTRY        AT INSERTION POINT?\n         BE    ALXIT                   YES, LABEL ALREADY HERE, IGNORE\n         BL    ALINSRT                 YES, NO LABEL HERE, INSERT\n         LA    R1,L'LBLENTRY(R1)       NO, ADVANCE TO NEXT ENTRY\n         B     ALCHKEND                LOOP TO FIND INSERTION POINT\nALINSRT  MVC   HOLDLABL,LBLENTRY       HOLD PRESENT ENTRY\n         MVC   LBLENTRY,0(R2)          MOVE IN NEW ENTRY\n         MVC   0(L'LBLENTRY,R2),HOLDLABL PREVIOUS ENTRY TO END\n         LA    R1,L'LBLENTRY(R1)       STEP TO NEXT ENTRY\n         CR    R1,R2                   PRESENTLY AT LAST ENTRY?\n         BL    ALINSRT                 NO, CONTINUE INSERTION LOOP\nALADVANC LA    R2,L'LBLENTRY(R2)       STEP TO NEXT AVAILABLE SLOT\n         ST    R2,CURRLABL             SAVE UPDATED TABLE ADDRESS\n         C     R2,LBLTBEND             PAST END OF TABLE?\n         BL    ALXIT                   NO\n         MVC   PRT(37),=CL37'LABEL TABLE OF 32,768 ENTRIES IS FULL'\n         BAS   R9,PRINT                PRINT ERROR MESSAGE\n         WTO   'LABEL TABLE OVERFLOW, ABENDING',ROUTCDE=11\n         ABEND 666,DUMP                TERMINATE IN ERROR\nALXIT    L     R9,AL9                  GET RETURN ADDRESS\n         L     R2,CURRLABL             POINT TO CURRENT ENTRY\n         XC    0(L'LBLENTRY,R2),0(R2)  CLEAR TO HEX ZEROS\n         BR    R9                      EXIT\n         DROP  R1\nAL9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n* PRINT ROUTINE                                                     *\n*********************************************************************\nPRINT    ST    R9,P9                   SAVE RETURN ADDRESS\n         L     R9,PRNTDCBA             POINT TO SYSPRINT DCB\n         PUT   0(R9),PRTLINE           WRITE PRINT LINE\n         MVC   PRTLINE,BLANKS          CLEAR PRINT LINE\nPXIT     L     R9,P9                   GET RETURN ADDRESS\n         BR    R9                      RETURN\nP9       DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n* OUTPUT ROUTINE                                                    *\n*********************************************************************\nOUTPUT   ST    R9,OP9                  SAVE RETURN ADDRESS\n         L     R9,OUTDCBA              POINT TO SYSOUT DCB\n         PUT   0(R9),OUTREC            WRITE OUTPUT RECORD\n         MVC   OUTREC,BLANKS           CLEAR OUTPUT RECORD\nOPXIT    L     R9,OP9                  GET RETURN ADDRESS\n         BR    R9                      RETURN\nOP9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n* RETURN TO CALLER                                                  *\n*********************************************************************\nRETURN   CLI   STAGE,1                 IN STAGE 1?\n         BE    RETURN1                 YES\n         ZAP   DBLWD(2),PK0            SET REG NBR TO ZERO\nRETFMEQU MVI   OUTLABEL,C'R'           START REGISTER NAME\n         MVC   OUTMNEM(3),=CL3'EQU'    SET IN MNEMONIC\n         CP    DBLWD(2),PK9            GREATER THAN 9?\n         BH    RETGT9                  YES\n         UNPK  OUTLABEL+1(1),DBLWD+1(1) UNPACK REGISTER NUMBER\n         OI    OUTLABEL+1,X'F0'        CLEAR SIGN\n         B     RETREQND                CONTINUE\nRETGT9   UNPK  OUTLABEL+1(2),DBLWD(2)  UNPACK REGISTER NUMBER\n         OI    OUTLABEL+2,X'F0'        CLEAR SIGN\nRETREQND MVC   OUTOPND(2),OUTLABEL+1   REGISTER NUMBER TO OPERAND\n         BAS   R9,OUTPUT               GO WRITE THE EQU STATEMENT\n         AP    DBLWD(2),PK1            INCREMENT REGISTER NUMBER\n         CP    DBLWD(2),PK15           ALL THROUGH?\n         BNH   RETFMEQU                NO\n         MVC   OUTMNEM(3),=CL3'END'    SET MNEMONIC TO END\n         BAS   R9,OUTPUT               WRITE END STATEMENT\nRETURN1  L     R13,4(R13)              POINT TO CALLER'S SAVE AREA\n         L     R1,24(R13)              GET CALLER'S PARM POINTER\n         MVC   0(ENDPARMS-PARMAREA,R1),PARMAREA UPDATE PARMS\n         LM    R14,R12,12(R13)         RESTORE CALLER'S REGISTERS\n         SR    R15,R15                 SET RETURN CODE TO 0\n         BR    R14                     RETURN\n***********************************************************************\n* WORKING STORAGE AND CONSTANTS                                       *\n***********************************************************************\nDBLWD    DS    D                       DOUBLEWORD WORK AREA\nXZROS    DC    D'0'                    CONSTANT HEX ZEROS\nCSECT    DS    CL8                     CSECT NAME\nLOCATION DC    A(0)                    LOCATION COUNTER\nCONSTRTL DC    A(0)                    LOCATION FOR CONSTANT START\nCURRTXTA DC    A(0)                    CURRENT TEXT LOCATION\nCURRLBLA DC    A(0)                    CURRENT LABEL TABLE ENTRY ADDR\nADCNVALU DC    F'0'                    SAVE FIELD FOR ADCON VALUE\nWORKFWD  DC    F'0'                    WORK FIELD\nZEROF    DC    X'0000000F'             AND MASK: LEAVE ONLY LOW NYBBLE\nKEEPLO12 DC    X'00000FFF'             AND MASK: LEAVE ONLY LOW 12 BITS\nUSENTRY  DC    16F'0'                  USING TABLE\nHEXFFS   DC    4X'FF'                  HEX FF'S\nLBLLENG  DS    H                       LABEL ASSOCIATED DATA LENGTH\nCONLENG  DS    H                       CURRENT CONSTANT LENGTH\nH0       DC    H'0'                    CONSTANT 0\nH1       DC    H'1'                    CONSTANT 1\nH2       DC    H'2'                    CONSTANT 2\nH3       DC    H'3'                    CONSTANT 3\nH4       DC    H'4'                    CONSTANT 4\nH5       DC    H'5'                    CONSTANT 5\nH8       DC    H'8'                    CONSTANT 8\nH10      DC    H'10'                   CONSTANT 10\nH16      DC    H'16'                   CONSTANT 16\nH32      DC    H'32'                   CONSTANT 32\nINDEX    DC    XL1'00'                 INDEX REGISTER NUMBER\nBASE     DC    XL1'00'                 BASE REGISTER VALUE\nDISPLAC  DC    XL2'0000'               DISPLACEMENT VALUE\nLENGTH   DC    XL1'00'                 LENGTH FOR BDDD ADDRESS\nLABEL    DC    CL8' '                  CURRENT LABEL\nLABELENG DC    H'0'                    LABEL LENGTH\nSTAGE    DS    XL1                     STAGE INDICATOR\nPK0      DC    P'0'                    CONSTANT 0\nPK1      DC    P'1'                    CONSTANT 1\nPK9      DC    P'9'                    CONSTANT 9\nPK15     DC    P'15'                   CONSTANT 15\nPK99     DC    P'99'                   CONSTANT 99\nPK999    DC    P'999'                  CONSTANT 999\nINDATA   DC    X'00'                   01=TEXT HERE IS DATA ONLY\nCONPROG  DC    X'00'                   01=CONSTANT IN PROGRESS\nLAST     DC    C'C'                    LAST OUTPUT INDICATOR\nLASTCCNT DC    CL48'NOP1  2  3  4  5  6  7  8  9  10 11 12 13 14 B  '\nREGS     DS    0CL3                    REGISTER OPERAND WORK AREA\nREG1     DS    CL1                       R1 REGISTER NUMBER\nREG2     DS    CL1                       R2 REGISTER AREA\nREG3     DS    CL1                       R3 REGISTER AREA\n*\nCMAXQT   DC    CL3',X'''               LITERAL \",X'\"\nCMASTRP  DC    CL3',*+'                LITERAL \",*+\"\nWORK1    DS    CL1                     WORK FIELD\nCONSTANT DC    CL32' '                 CONSTANT BUILD AREA\nHOLDLABL DS    CL(L'LBLENTRY)          LABEL WORK AREA\nBLANKS   DC    CL133' '                CONSTANT BLANKS\nUNPKWORK DC    CL8' '                  WORK FIELD\nTRCHAR   DC    CL16'0123456789ABCDEF'  TRANSLATE TABLE\nFLTPTPR  DC    X'0000FFFF0000FFFF0000FFFF0000FFFF' FLT PNT PAIR TEST\nVALIDM3  DC    X'000002030000000008090A0B0C0D0E0F' M3 MASK TEST\nHOLDOUT  DC    CL80' '                 HOLD AREA FOR OUTPUT RECORD\n*\nCHKCHAR  DC    256X'FF'                TRT CHARACTER TEST\n         ORG   CHKCHAR+C' '\n         DC    XL1'00'\n         ORG   CHKCHAR+C'\u00a2'\n         DC    XL5'00'                  C'\u00a2.<(+'\n         ORG   CHKCHAR+C'!'\n         DC    XL5'00'                  C'!$*);'\n         ORG   CHKCHAR+C'-'\n         DC    XL2'00'                  C'-/'\n         ORG   CHKCHAR+C','\n         DC    XL2'00'                  C',%'\n         ORG   CHKCHAR+C'>'\n         DC    XL2'00'                  C'>?'\n         ORG   CHKCHAR+C':'\n         DC    XL6'00'                  C':#@''=\"'\n         ORG   CHKCHAR+C'A'\n         DC    XL9'00'                  C'ABCDEFGHI'\n         ORG   CHKCHAR+C'J'\n         DC    XL9'00'                  C'JKLMNOPQR'\n         ORG   CHKCHAR+C'S'\n         DC    XL8'00'                  C'STUVWXYZ'\n         ORG   CHKCHAR+C'0'\n         DC    XL10'00'                 C'0123456789'\n         ORG\n*\nPRTLINE  DS    0CL133                  PRINT LINE\nPCC      DC    CL1' '                     CARRIAGE CONTROL BYTE\nPRT      DC    CL132' '                   PRINT DATA\n*\nOUTREC   DS    0CL80                   OUTPUT RECORD\nOUTLABEL DC    CL8' '                  STATEMENT LABEL\n         DC    CL1' '\nOUTMNEM  DC    CL5' '                  STATEMENT MNEMONIC\n         DC    CL1' '\nOUTOPND  DC    CL36' '                 STATEMENT OPERANDS\n         DC    CL1' '\nOUTOFFST DC    CL6' '                  STATEMENT OFFSET\n         DC    CL1' '\nOUTTEXT  DC    CL12' '                 STATEMENT TEXT\nOUTCTNU  DC    CL1' '                  CONTINUATION INDICATOR\nOUTNBR   DC    CL8' '                  STATEMENT NUMBER\n***********************************************************************\n* INFORMATION ABOUT AN INSTRUCTION SET BY THE SRCHOC ROUTINE          *\n***********************************************************************\nISINST   DC    X'00'                   01=TEXT MAY BE AN INSTRUCTION\nINSTFLAG DS    XL1                     INSTRUCTION FLAG BITS:\n*                                        40=FLOATING POINT\n*                                        20=PRIVILEGED\nINSTCCNT DS    XL1                     CONDITION CODE TABLE ENTRY NBR\nINSTMNEM DS    XL5                     INSTRUCTION MNEMONIC\nINSTLENG DS    XL1                     INSTRUCTION LENGTH\nINSTFMT  DS    XL1                     INSTRUCTION FORMAT: 00=NOT INSTR\n*                                        SEE OPCFORMT FOR LIST OF CODES\nINSTFLG1 DS    XL1                     FLAGS. SEE OPCFLAG1\nINSTFLG2 DS    XL1                     FLAGS. SEE OPCFLAG2\nINSTTEXT DS    XL6                     INSTRUCTION TEXT\nINSTBYT1 DS    XL1                     1ST BYTE OF 2-BYTE OP-CODE\n***********************************************************************\n* DESCRIBES THE INCOMING PARAMETER LIST PASSED BY THE RESOURCE PROGRAM*\n***********************************************************************\nPARMAREA DS    0A                      REBUILD PARAMETER LIST\nSTAGEA   DS    A                          STAGE INDICATOR POINTER\nCSECTA   DS    A                          CSECT NAME POINTER\nLBLTBADR DS    A                          LABEL TABLE STARTING ADDRESS\nCURRLABL DC    A(0)                    ADDRESS OF CURRENT LABEL ENTRY\nLBLTBEND DS    A                          ADDRESS OF END OF LABEL TABLE\nTEXTADDR DS    A                          ADDRESS OF CSECT TEXT\nTEXTENDA DS    A                          ADDRESS OF LAST BYTE OF TEXT\nTEXTLENG DS    A                          TOTAL TEXT LENGTH\nOPCDTBLA DS    A                          OP-CODE TABLE POINTER\nPRNTDCBA DS    A                          SYSPRINT DCB ADDRESS\nOUTDCBA  DS    A                          SYSOUT DCB ADDRESS\nENDPARMS EQU   *\n***********************************************************************\n* THIS IS THE CURRENT LABEL TABLE ENTRY                               *\n***********************************************************************\n         DS    0F\nCURLBNT  DS    0CL16                   LABEL TABLE ENTRY\nCURLBOFS DS    F                           CSECT OFFSET TO THE LABEL\nCURLBTYP DS    X                           ENTRY TYPE\nCURLDROP EQU   X'0C'                           DROP USING REGISTER\nCURLUSNG EQU   X'10'                           SPECIFY USING REGISTER\nCURLDTST EQU   X'18'                           DATA-ONLY START\nCURLDTND EQU   X'1C'                           DATA-ONLY END\nCURENTRY EQU   X'20'                           ENTRY TYPE LABEL   JR\nCURLABEL EQU   X'30'                           SIMPLE LABEL ENTRY\nCURLADCN EQU   X'40'                           ADCON LOCATION\nCURLVCON EQU   X'50'                           V-CON LOCATION\nCURLBURG DS    X                           USING REGISTER\nCURLBRLD DS    H                           LENGTH IF RLD ENTRY ELSE 0\nCURLBLBL DS    0CL8                        LABEL\nCURLBINU DS    XL4                         INITIAL REG VALUE FOR USING\n         DS    XL4\n***********************************************************************\n*     ***** CONDITION CODE TABLE ENTRIES FOR THE CC COLUMN *****      *\n* IN THE TABLE, NON-NUMERIC ENTRIES GIVE THE INSTRUCTION MNEMONIC TO  *\n* BE USED WHEN THE MASK IN THE INSTRUCTION MATCHES THE COLUMN NUMBER. *\n* WHEN THE ENTRY IS NUMERIC, IT IS THE CONDITION TO BE USED, AND THE  *\n* MNEMONIC WILL BE BC OR BCR.                                         *\n***********************************************************************\n*            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F           *\n***********************************************************************\nCCTBLNT  DC    0CL48          CONDITION CODE TABLE. 48-BYTE ENTRIES\nCC01     DC    CL48'NOP1  2  3  4  5  6  7  8  9  10 11 12 13 14 B  '\nCC02     DC    CL48'NOP1  BH 3  BL 5  6  BNEBE 9  10 BNL12 BNH14 B  '\nCC03     DC    CL48'NOP1  2  3  4  5  6  BNZBZ 9  10 11 12 13 14 B  '\nCC04     DC    CL48'NOP1  2  3  4  5  6  BNEBE 9  10 11 12 13 14 B  '\nCC05     DC    CL48'NOP1  BH 3  BL 5  6  BNEBE 9  10 BNL12 13 14 B  '\nCC06     DC    CL48'NOPBO BP 3  4  5  6  BNZBZ 9  10 11 12 13 14 B  '\nCC07     DC    CL48'NOP1  2  3  BM 5  6  BNZBZ 9  10 11 12 13 14 B  '\nCC08     DC    CL48'NOP1  BP 3  BM 5  6  BNZBZ 9  10 BNM12 BNP14 B  '\nCC09     DC    CL48'NOPBO BP 3  BM 5  6  BNZBZ 9  10 BNM12 BNPBNOB  '\nCC0A     DC    CL48'NOP1  BP 3  4  5  6  BNZBZ 9  10 11 12 13 14 B  '\nCC0B     DC    CL48'NOPBO 2  3  BM 5  6  BNZBZ 9  10 BNM12 13 BNOB  '\nCC0C     DC    CL48'NOPBO 2  3  4  5  6  BNZBZ 9  10 11 12 13 BNOB  '\nCC0D     DC    CL48'NOP1  BH 3  BL 5  6  BNEBE 9  10 11 12 13 14 B  '\nCC0E     DC    CL48'NOP1  BP 3  BM 5  6  BNZBZ 9  10 11 12 13 14 B  '\n***********************************************************************\n* THIS DSECT DESCRIBES AN ENTRY IN THE LABEL TABLE                    *\n* THE TABLE ADDRESSES ARE LOCATED AT LBLTBADR, LBLTBEND, AND CURRLBLA.*\n* IF THE LENGTH OF LBLENTRY CHANGES, CHANGE HOLDLABL, AS WELL.        *\n***********************************************************************\nLBLDSECT DSECT ,                       DESCRIBES A LABEL TABLE ENTRY\nLBLENTRY DS    0CL16                   LABEL TABLE ENTRY\nLBLOFSET DS    F                           CSECT OFFSET TO THE LABEL\nLBLTYPE  DS    X                           ENTRY TYPE: 0C=DROP,10=USING\n*                                            18=DATA START, 1C=DATA END\n*                                            20=ENTRY              JR\n*                                            30=LABEL,40=ADCON,50=VCON\nLBLUREG  DS    X                           USING REGISTER\nLBLRLDLN DS    H                           LENGTH IF RLD ENTRY ELSE 0\nLBLLABEL DS    0CL8                        LABEL\nLBLINITU DS    XL4                         INITIAL REG VALUE FOR USING\n         DS    XL4\nLBLSIZE  EQU   *-LBLDSECT                                          JR\n***********************************************************************\n* DESCRIBES AN ENTRY IN AN OP-CODE TABLE                              *\n***********************************************************************\nOPCODES  DSECT ,                       DESCRIBES AN OP-CODE TABLE ENTRY\nOPCENTRY DS    0XL12                   OP-CODE TABLE ENTRY\nOPCODE1  DS    XL1                        OP-CODE BYTE 1\nOPCODE2  DS    XL1                        OP-CODE BYTE 2 OR ZERO\nOPCMNEM  DS    0CL5                       MNEMONIC -OR-\nOPCTWO2  DS    CL1                          '2' FOR 2-BYTE OP-CODES\n*                                           X'00' IF NOT AN OP-CODE\nOPCSRCH2 DS    AL4                          SRCH ADDRESS FOR 2-BYTE O-C\nOPCFORMT DS    XL1                        INSTRUCTION FORMAT CODE\nE1       EQU   X'01' OCOCOCOC                 <==> (NONE)\nRI1      EQU   X'02' OCOCR1OCI2I2I2I2         <==> R1,I2\nRR1      EQU   X'03' OCOCR1R2                 <==> R1,R2\nRR2      EQU   X'04' OCOCI1I1                 <==> I1\nRR3      EQU   X'05' OCOCR1--                 <==> R1\nRRE1     EQU   X'06' OCOCOCOC----R1R2         <==> R1,R2\nRRE2     EQU   X'07' OCOCOCOC----R1--         <==> R1\nRRE3     EQU   X'08' OCOCOCOC--------         <==> (NONE)\nRRF1     EQU   X'09' OCOCOCOCR1--R3R2         <==> R1,R3,R2\nRRF2     EQU   X'0A' OCOCOCOCM3--R1R2         <==> R1,M3,R2\nRRF3     EQU   X'0B' OCOCOCOCR3M4R1R2         <==> R1,R3,R2,M4\nRS1      EQU   X'0C' OCOCR1R3B2D2D2D2         <==> R1,R3,D2(B2)\nRS2      EQU   X'0D' OCOCR1--B2D2D2D2         <==> R1,D2(B2)\nRS3      EQU   X'0E' OCOCR1M3B2D2D2D2         <==> R1,M3,D2(B2)\nRSI1     EQU   X'0F' OCOCR1R3I2I2I2I2         <==> R1,R3,I2\nRX1      EQU   X'10' OCOCR1X2B2D2D2D2         <==> R1,D2(X2,B2)\nRX2      EQU   X'11' OCOCM1X2B2D2D2D2         <==> M1,D2(X2,B2)\nRXE1     EQU   X'12' OCOCR1X2B2D2D2D2----OCOC <==> R1,D2(X2,B2)\nRXF1     EQU   X'13' OCOCR3X2B2D2D2D2R1--OCOC <==> R1,R3,D2(X2,B2)\nS1       EQU   X'14' OCOC----B2D2D2D2         <==> D2(B2)\nS2       EQU   X'15' OCOCOCOC--------         <==> (NONE)\nS3       EQU   X'1E' OCOCOCOCB2D2D2D2         <==> D2(B2)\nSI1      EQU   X'16' OCOCI2I2B1D1D1D1         <==> D1(B1),I2\nSS1      EQU   X'17' OCOCLLLLB1D1D1D1B2D2D2D2 <==> D1(LL,B1),D2(B2)\nSS2      EQU   X'18' OCOCL1L2B1D1D1D1B2D2D2D2 <==> D1(L1,B1),D2(L2,B2)\nSS3      EQU   X'19' OCOCR1R3B2D2D2D2B4D4D4D4 <==> R1,D2(B2),R3,D4(B4)\nSS4      EQU   X'1A' OCOCR1R3B1D1D1D1B2D2D2D2 <==> D1(R1,B1),D2(B2),R3\nSS5      EQU   X'1B' OCOCL1I3B1D1D1D1B2D2D2D2 <==> D1(L1,B1),D2(B2),I3\nSSE1     EQU   X'1C' OCOCOCOCB1D1D1D1B2D2D2D2 <==> D1(B1),D2(B2)\nOPCFLAGS DS    XL1                     FLAGS:\nFP       EQU   X'40'                     FLOATING POINT INSTRUCTION\nPR       EQU   X'20'                     PRIVILEGED INSTRUCTION\nOPCNDCOD DS    XL1                     CONDITION CODE TABLE LINE\nOPCFLAG1 DS    XL1                     FLAG BYTE:\n*                         X'80'=UNUSUAL TEST REQUIRED\n*                         X'01'=R2 MUST BE 0,1,4,5,8,9,12, OR 13\nOPCFLAG2 DS    XL1                     FLAG BYTE\n*                         X'80'=R1 MUST BE 0,1,4,5,8,9,12, OR 13\n*                         X'40'=M3 MUST BE 0,1,4,5,6, OR 7\n*                         X'20'=INSTRUCTION BITS 16-25 MUST BE 0'S\n*                         X'10'=R1 MUST NOT EQUAL R2\n*                         X'08'=R3 MUST BE AN EVEN NUMBERED REGISTER\n*                         X'04'=R2 MUST BE AN EVEN NUMBERED REGISTER\n*                         X'02'=R1 MUST BE AN EVEN NUMBERED REGISTER\n*                         X'01'=IF R2=0, OUTPUT 0, NOT R0\nREBUILD  CSECT\n         LTORG\n*\nSVCOP    DS    0CL10                   SVC NAME TABLE\n         DC    AL1(0),CL9'EXCP/XDAP'\n         DC    AL1(1),CL9'WAIT(R)  '\n         DC    AL1(2),CL9'POST/PRTO'\n         DC    AL1(3),CL9'EXIT     '\n         DC    AL1(4),CL9'GETMAIN  '\n         DC    AL1(5),CL9'FREEMAIN '\n         DC    AL1(6),CL9'LINK     '\n         DC    AL1(7),CL9'XCTL     '\n         DC    AL1(8),CL9'LOAD     '\n         DC    AL1(9),CL9'DELETE   '\n         DC    AL1(10),CL9'GET/FREE '\n         DC    AL1(11),CL9'TIME     '\n         DC    AL1(12),CL9'SYNCH    '\n         DC    AL1(13),CL9'ABEND    '\n         DC    AL1(14),CL9'SPIE     '\n         DC    AL1(15),CL9'ERREXCP  '\n         DC    AL1(16),CL9'PURGE    '\n         DC    AL1(17),CL9'RESTORE  '\n         DC    AL1(18),CL9'BLDL/FIN '\n         DC    AL1(19),CL9'OPEN     '\n         DC    AL1(20),CL9'CLOSE    '\n         DC    AL1(21),CL9'STOW     '\n         DC    AL1(22),CL9'OPEN  J  '\n         DC    AL1(23),CL9'CLOSE T  '\n         DC    AL1(24),CL9'DEVTYPE  '\n         DC    AL1(25),CL9'TRKBAL   '\n         DC    AL1(26),CL9'LOCATE   '\n         DC    AL1(27),CL9'OBTAIN   '\n         DC    AL1(28),CL9'CVOL     '\n         DC    AL1(29),CL9'SCRATCH  '\n         DC    AL1(30),CL9'RENAME   '\n         DC    AL1(31),CL9'FEOV     '\n         DC    AL1(32),CL9'NO MACRO '\n         DC    AL1(33),CL9'IOHALT   '\n         DC    AL1(34),CL9'MGCR/QED '\n         DC    AL1(35),CL9'WTO/WTOR '\n         DC    AL1(36),CL9'WTL      '\n         DC    AL1(37),CL9'SEGLD/SEG'\n         DC    AL1(39),CL9'LABEL    '\n         DC    AL1(40),CL9'EXTRACT  '\n         DC    AL1(41),CL9'IDENTIFY '\n         DC    AL1(42),CL9'ATTACH   '\n         DC    AL1(43),CL9'CIRB     '\n         DC    AL1(44),CL9'CHAP     '\n         DC    AL1(45),CL9'OVLYBRCH '\n         DC    AL1(46),CL9'TTIMER   '\n         DC    AL1(47),CL9'STIMER   '\n         DC    AL1(48),CL9'DEQ      '\n         DC    AL1(51),CL9'SNAP/SDUM'\n         DC    AL1(52),CL9'RESTART  '\n         DC    AL1(53),CL9'RELEX    '\n         DC    AL1(54),CL9'DISABLE  '\n         DC    AL1(55),CL9'EOV      '\n         DC    AL1(56),CL9'ENQ/RESE '\n         DC    AL1(57),CL9'FREEDBUF '\n         DC    AL1(58),CL9'RELBUF   '\n         DC    AL1(59),CL9'OLTEP    '\n         DC    AL1(60),CL9'(E)STAE  '\n         DC    AL1(61),CL9'IKJEGS6A '\n         DC    AL1(62),CL9'DETACH   '\n         DC    AL1(63),CL9'CHKPT    '\n         DC    AL1(64),CL9'RDJFCB   '\n         DC    AL1(66),CL9'BTAMTEST '\n         DC    AL1(67),CL9'SYNADAF  '\n         DC    AL1(68),CL9'SYNADRLS '\n         DC    AL1(69),CL9'BSP      '\n         DC    AL1(70),CL9'GSERV    '\n         DC    AL1(71),CL9'ASGNBFR  '\n         DC    AL1(72),CL9'CHATR    '\n         DC    AL1(73),CL9'SPAR     '\n         DC    AL1(74),CL9'DAR      '\n         DC    AL1(75),CL9'DQUEUE   '\n         DC    AL1(76),CL9'NO MACRO '\n         DC    AL1(78),CL9'NO MACRO '\n         DC    AL1(79),CL9'STATUS   '\n         DC    AL1(81),CL9'SETPRT   '\n         DC    AL1(82),CL9'DASDR    '\n         DC    AL1(83),CL9'SMFWTM   '\n         DC    AL1(84),CL9'GRAPHICS '\n         DC    AL1(85),CL9'DDRSWAP  '\n         DC    AL1(86),CL9'ATLAS    '\n         DC    AL1(87),CL9'DOM      '\n         DC    AL1(88),CL9'MOD88    '\n         DC    AL1(91),CL9'VOLSTAT  '\n         DC    AL1(92),CL9'TCBEXCP  '\n         DC    AL1(93),CL9'TGET/TPU '\n         DC    AL1(94),CL9'STCC     '\n         DC    AL1(95),CL9'SYSEVENT '\n         DC    AL1(96),CL9'STAX     '\n         DC    AL1(97),CL9'TSO TEST '\n         DC    AL1(98),CL9'PROTECT  '\n         DC    AL1(99),CL9'DDDYNAM  '\n         DC    AL1(100),CL9'IKJEFFIB '\n         DC    AL1(101),CL9'QTIP     '\n         DC    AL1(102),CL9'AQCTL    '\n         DC    AL1(103),CL9'XLATE    '\n         DC    AL1(104),CL9'TOPCTL   '\n         DC    AL1(105),CL9'IMAGLIB  '\n         DC    AL1(107),CL9'MODESET  '\n         DC    AL1(109),CL9'ESR TYPE4'\n         DC    AL1(110),CL9'DSTATUS  '\n         DC    AL1(111),CL9'NO MACRO '\n         DC    AL1(112),CL9'PGRLSE   '\n         DC    AL1(113),CL9'PGFIX,CL9'\n         DC    AL1(114),CL9'EXCPVR   '\n         DC    AL1(116),CL9'ESR TYPE1'\n         DC    AL1(117),CL9'DEBCHK   '\n         DC    AL1(119),CL9'TESTAUTH '\n         DC    AL1(120),CL9'GET/FREEM'\n         DC    AL1(121),CL9'VSAM     '\n         DC    AL1(122),CL9'EVENTS   '\n         DC    AL1(123),CL9'PURGEDQ  '\n         DC    AL1(124),CL9'TPIO     '\n         DC    AL1(125),CL9'EVENTS   '\n         DC    AL1(126),CL9'MSS INTFC'\n         DC    X'FF'                   END OF TABLE\n*********************************************************************\n*             REGISTER EQUATES                                      *\n*********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RESCHECK": {"ttr": 2309, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00\\x17\\x01\\x02\\x17_\\x01\\x16'/\\x14 \\x00\\xcf\\x00\\xcf\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-06-24T00:00:00", "modifydate": "2016-09-28T14:20:17", "lines": 207, "newlines": 207, "modlines": 0, "user": "SBGOLOB"}, "text": "         TITLE '*** RESCHECK: CHECK RESOURCE/REBUILD OUTPUT ***'\nRESCHECK CSECT\n*********************************************************************\n* CHECKS THE ASSEMBLED OUTPUT FROM A RESOURCE/REBUILD DISASSEMBLY   *\n* TO SEE WHETHER THE DISASSEMBLY OUT REASSEMBLES AS THE ORIGINAL    *\n* INPUT DID.                                                        *\n*                                                                   *\n* FIRST, THE SOURCE PROGRAM CREATED BY THE RESOURCE/REBUILD PROGRAM *\n* SET IS ASSEMBLED. NEXT, THE SYSPRINT OUTPUT FROM THE ASSEMBLY IS  *\n* WRITTEN TO A DSORG=PS,RECFM=FB,LRECL=133 DATASET THAT IS INPUT TO *\n* THIS PROGRAM.                                                     *\n*                                                                   *\n* THIS PROGRAM READS UNTIL THE FIRST ASSEMBLED STATEMENT IS FOUND:  *\n* LOCATION 000000 IN POSITIONS 2-7 WITH NON-BLANK DATA IN 9-12.     *\n*                                                                   *\n* FROM THE FIRST STATEMENT FOUND UNTIL THE END STATEMENT IS FOUND   *\n* WHERE \" END \" IS FOUND IN POSITIONS 50-54 FOR EACH LINE READ:     *\n*  1. CHECKS FOR A VALID STATEMENT, WHERE A VALID 6-DIGIT HEX       *\n*     LOCATION IS FOUND IN 1-6 WITH NON-BLANK DATA IN 9-12.         *\n*  2. FOR EACH VALID STATEMENT FOUND, COMPARE 2-7 TO 94-99 (LOC)    *\n*     9-12 TO 101-104 (DATA BYTES 1-2), 14-17 TO 105-108 (DATA BYTES*\n*     3-4), AND 19-22 TO 109-112 (DATA BYTES 5-6).                  *\n*  3. IF ANY FIELD DIFFERS, THE LINE IS PRINTED.                    *\n*                                                                   *\n* AUTHOR R THORNTON MAR 2002                                        *\n*********************************************************************\n*\n*********************************************************************\n*        SAVE REGISTERS, SET UP BASE REGS, CHAIN SAVE AREAS         *\n*********************************************************************\n         USING RESCHECK,R3,R4\n         STM   R14,R12,12(R13)         SAVE CALLER'S REGS\n         LR    R3,R15                  SET UP BASE FIRST BASE REG\n         LA    R4,4095(R3)             SET UP SECOND\n         LA    R4,1(R4)                    BASE REGISTER\n         LA    R15,MYSAVE              POINT TO MY REGISTER SAVE AREA\n         ST    R15,8(R13)              SET LSA IN CALLER'S SAVE\n         ST    R13,4(R15)              SET HSA IN MY SAVE AREA\n         LR    R13,R15                 SET UP SAVE AREA POINTER\n         B     START                   BRANCH AROUND CONSTANTS\n         DC    CL8'RESCHECK'           PROGRAM NAME IDENTIFIER\n         DC    CL8'&SYSDATE'           ASSEMBLY DATE\n         DC    CL8'&SYSTIME'           ASSEMBLY TIME\nMYSAVE   DS    18F                     MY REGISTER SAVE AREA\n*********************************************************************\n*        OPEN FILES, LOCATE FIRST STATEMENT                         *\n*********************************************************************\nSTART    OPEN  (SYSPRINT,OUTPUT,SYSIN) OPEN FILES\nFIND1ST  BAS   R9,GETIN                READ INPUT RECORD\n         CLC   INASMLOC,=CL6'000000'   FOUND LOCATION ZERO?\n         BNE   FIND1ST                 NO, CONTINUE SEARCH\n         MVI   GOTSTRT,1               SHOW START RECORD FOUND\n*********************************************************************\n*             MAINLINE ROUTINE                                      *\n*********************************************************************\nMAINLINE BAS   R9,GETIN                READ INPUT RECORD\n         TRT   INASMLOC,HEXDIG         LOCATION IS ALL HEX DIGITS?\n         BNZ   MAINLINE                NO, NOT VALID STATEMENT\n         CLC   INASMLOC,INRESLOC       ASM LOC = RESOURCE LOC?\n         MVC   PASMLOC,INASMLOC        MOVE LOCATION\n         MVC   PASM12,INASM12          MOVE ASM BYTES 1-2\n         MVC   PASM34,INASM34          MOVE ASM BYTES 3-4\n         MVC   PASM56,INASM56          MOVE ASM BYTES 5-6\n         MVC   PRESLOC,INRESLOC        MOVE LOCATION\n         MVC   PRESDATA,INRES12        MOVE DATA BYTES\n         CLC   PRESDATA,PASM12         DATA BYTES IDENTICAL?\n         BE    MAINLINE                YES\n         MVC   PSTMNBR,INASMLIN        ASM'S LINE NUMBER\n         MVC   PLABEL,INLABEL          STATEMENT LABEL\n         MVC   PMNEM,INMNEM            STATEMENT MNEMONIC, OPERANDS\n         BAS   R9,PRINT                PRINT DIFFERENCE LINE\n         MVI   RETCODE+3,4             INDICATE ERROR PRINTED\n         B     MAINLINE                LOOP THROUGH INPUT FILE\n*********************************************************************\n*             READ INPUT FILE SUBROUTINE                            *\n*********************************************************************\nGETIN    GET   SYSIN,INREC             READ NEXT RECORD\n         CLI   INASMBK1,C' '           1ST BLANK FIELD IS BLANK?\n         BNE   GETIN                   NO\n         CLI   INASMBK2,C' '           2ND BLANK FIELD IS BLANK?\n         BNE   GETIN                   NO\n         CLI   INASMBK3,C' '           3RD BLANK FIELD IS BLANK?\n         BNE   GETIN                   NO\n         CLI   INASMBK4,C' '           4TH BLANK FIELD IS BLANK?\n         BNE   GETIN                   NO\n         CLI   INASMBK5,C' '           5TH BLANK FIELD IS BLANK?\n         BNE   GETIN                   NO\n         CLI   INASMBK6,C' '           6TH BLANK FIELD IS BLANK?\n         BNE   GETIN                   NO\n         CLC   INMNEM,=CL5'END '       THIS THE END STATEMENT?\n         BE    EOJ                     YES, ALL THROUGH\n         BR    R9                      RETURN TO CALLER\n*********************************************************************\n*             PRINT SUBROUTINE                                      *\n*********************************************************************\nPRINT    PUT   SYSPRINT,PRTLINE        WRITE PRINT LINE\n         MVC   PRTLINE,BLANKS          CLEAR PRINT LINE\n         BR    R9                      NO, RETURN\n*********************************************************************\n*             ERROR END OF SYSIN                                    *\n*********************************************************************\nERROREND CLI   GOTSTRT,1               GOT THE START RECORD?\n         BE    BADEND                  YES\n         WTO   'MISSING START, ABENDING',ROUTCDE=11\n         ABEND  777,DUMP               TERMINATE IN ERROR\nBADEND   WTO   'MISSING END, ABENDING',ROUTCDE=11\n         ABEND  888,DUMP               TERMINATE IN ERROR\n         BR    R9                      NO, RETURN\n*********************************************************************\n*             END OF JOB                                            *\n*********************************************************************\nEOJ      CLC   RETCODE,XZROS           RETURN CODE IS ZERO?\n         BNE   CLOSES                  NO, BRANCH\n         MVC   PRT(38),=CL38'***COMPARISON FOUND NO DIFFERENCES ***'\n         BAS   R9,PRINT                GO PRINT\nCLOSES   CLOSE (SYSPRINT,,SYSIN) CLOSE FILES\n         L     R13,4(R13)              POINT TO CALLER'S SAVE AREA\n         L     R14,12(R13)             RESTORE RETURN REG: R14\n         L     R15,RETCODE             SET RETURN CODE\n         LM    R0,R12,20(R13)          RESTORE CALLER'S REGS 0-12\n         BR    R14                     RETURN\n*********************************************************************\n*        STORAGE AND FILE AREAS                                     *\n*********************************************************************\n*\nDBLWD    DS    D                       DOUBLEWORD WORK AREA\nXZROS    DC    F'0'                    CONSTANT ZEROS\nRETCODE  DC    F'0'                    RETURN CODE\nBLANKS   DC    CL133' '                BLANKS\nGOTSTRT  DC    X'00'                   1=GOT START LOCATION\nHEXDIG   DC    256X'FF'                TABLE TO TEST FOR HEX DIGITS\n         ORG   HEXDIG+C'0'\n         DC    16X'00'\n         ORG\n*\nPRTLINE  DS    0CL133                  PRINT LINE\nPCC      DS    CL1                     CARRIAGE CONTROL\nPRT      DS    0CL132                  PRINT DATA\nPASMLOC  DC    CL6' '                  ASM'S LOCATION\n         DC    CL1' '\nPASM12   DC    CL4' '                  ASM'S DATA BYTES 1-2\nPASM34   DC    CL4' '                  ASM'S DATA BYTES 3-4\nPASM56   DC    CL4' '                  ASM'S DATA BYTES 5-6\n         DC    CL3' '\nPRESLOC  DC    CL6' '                  RESOURCE'S LOCATION\n         DC    CL1' '\nPRESDATA DC    CL12' '                 RESOURCE'S DATA BYTES 1-6\n         DC    CL3' '\nPSTMNBR  DC    CL5' '                  STATEMENT NUMBER\n         DC    CL1' '\nPLABEL   DC    CL8' '                  LABEL\n         DC    CL1' '\nPMNEM    DC    CL43' '                 MNEMONIC, OPERANDS\n         DC    CL30' '\n*\nINREC    DS    0CL156                   INPUT RECORD\nINCC     DS    CL1           1            CARRIAGE CONTROL\nINASMLOC DS    CL6           2            ASM'S LOCATION\nINASMBK1 DS    CL1           8            BLANK\nINASM12  DS    CL4           9            ASM'S DATA BYTES 1-2\nINASMBK2 DS    CL1          13            BLANK\nINASM34  DS    CL4          14            ASM'S DATA BYTES 3-4\nINASMBK3 DS    CL1          18            BLANK\nINASM56  DS    CL4          19            ASM'S DATA BYTES 5-6\nINASMBK4 DS    CL1          23            BLANK\n         DS    CL12         24\nINASMLIN DS    CL5          36            ASM'S LINE NUMBER\nINASMBK5 DS    CL1          41            BLANK\nINLABEL  DS    CL8          42            STATEMENT LABEL\nINASMBK6 DS    CL1          50            BLANK\nINMNEM   DS    CL5          51            STATEMENT MNEMONIC\n         DS    CL38         56            OPERANDS, COMMENTS\nINRESLOC DS    CL6          94            RESOURCE'S LOCATION\nINRESBK1 DS    CL1         100            BLANK\nINRES12  DS    CL4         101            RESOURCE'S BYTES 1-2\nINRES34  DS    CL4         105            RESOURCE'S BYTES 3-4\nINRES56  DS    CL4         109            RESOURCE'S BYTES 5-6\n         DS    CL43        113\n*********************************************************************\n*             DCB'S                                                 *\n*********************************************************************\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X\n               RECFM=FBA,LRECL=133\nSYSIN    DCB   DSORG=PS,MACRF=GM,DDNAME=SYSIN,EODAD=ERROREND,          X\n               RECFM=FB\n         LTORG\nRESCHECK CSECT\n*********************************************************************\n*             REGISTER EQUATES                                      *\n*********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RESOUOLD": {"ttr": 2313, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x17\\x0f\\x01\\x02\\x17\\x0f\\x19\\x04\\x07R\\x07R\\x00\\x00\\xc2\\xc3\\xf0\\xe3\\xc8\\xd6\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-06-19T00:00:00", "modifydate": "2002-06-19T19:04:00", "lines": 1874, "newlines": 1874, "modlines": 0, "user": "BC0THOR"}, "text": "         TITLE '*** BUILD ASSEMBLER SOURCE FROM A LOAD MODULE ***'\nRESOURCE CSECT\nRESOURCE AMODE 31\nRESOURCE RMODE 24\n*********************************************************************\n* BUILDS AN ASSEMBLER LANGUAGE SOURCE PROGRAM FROM A LOAD MODULE IN *\n* A PDS OR A PDSE. LOAD MODULE DATA IS OBTAINED USING THE READLMOD  *\n* SUBROUTINE, WHICH USES THE IEWBUFF AND IEWBIND MACROS. INITIAL    *\n* PROCESSING IS PERFORMED HERE INCLUDING OPENING FILES, GETTING     *\n* STORAGE FOR TABLES AND WORK AREAS, PROCESSING THE PARM FIELD ON   *\n* THE EXEC STATEMENT, PROCESSING CONTROL STATEMENTS, AND LOADING THE*\n* TEXT FOR THE CSECT TO BE DISASSEMBLED INTO MEMORY. WHEN INITIAL   *\n* PROCESSING IS COMPLETE, THE REBUILD PROGRAM IS CALLED WITH THE    *\n* STAGE SET TO 1 FOR LABEL HANDLING, AND THEN A SECOND TIME WITH    *\n* STAGE SET TO 2 FOR FINAL DISASSEMBLY.                             *\n*                                                                   *\n* JCL DD STATEMENTS ARE REQUIRED AS FOLLOWS:                        *\n*   SYSIN:    INPUT  RECFM=FB  LRECL=80   CONTROL STATEMENTS.       *\n*   SYSPRINT: OUTPUT RECFM=FBA LRECL=133  PRINT LISTING.            *\n*   SYSLIB:   INPUT  PDS OR PDSE RECFM=U  LOAD MODULE TO DISASSEMBLE*\n*   SYSOUT:   OUTPUT RECFM=FB  LRECL=80   ASSEMBLER SOURCE PROGRAM  *\n*                                                                   *\n* CONTROL STATEMENTS ARE ENTERED FOR THE FOLLOWING PURPOSES:        *\n*   1) COMMENTS: AN ASTERISK IN COLUMN 1 IDENTIFIES COMMENTS        *\n*   2) MEMBER AND CSECT NAME RECORD: THIS CONTROL STATEMENT MUST BE *\n*      THE FIRST NON-COMMENT RECORD IN THE CONTROL FILE. IT MUST    *\n*      CONTAIN MEMBER NAME IN COL 1-8 AND CSECT NAME IN COL 10-17.  *\n*   3) DATA ONLY RECORD (OPTIONAL): IDENTIFIES AREAS WITHIN THE TEXT*\n*      THAT CONTAIN NO INSTRUCTIONS, ONLY DATA. MULTIPLE DATA-ONLY  *\n*      RECORDS CAN BE ENTERED, IN ANY ORDER. FORMAT IS:             *\n*         COL 1-5 = 'DATA '                                         *\n*         COL 6-11 = OFFSET TO START OF DATA-ONLY AREA              *\n*         COL 12   = BLANK                                          *\n*         COL 13-18 = OFFSET TO END OF DATA-ONLY AREA               *\n*   4) USING RECORD (OPTIONAL): PROVIDES INFORMATION NEEDED TO      *\n*      TO CREATE USING AND DROP STATEMENTS. FORMAT IS:              *\n*         COL  1-6  = 'USING '                                      *\n*         COL  7-12 = HEX OFFSET TO WHERE THE USING STATEMENT WILL  *\n*                     BE PLACED (IT WILL OCCUR BEFORE THIS OFFSET). *\n*         COL  13   = BLANK                                         *\n*         COL 14-19 = HEX OFFSET TO WHERE THE DROP STATEMENT WILL   *\n*                     BE PLACED (IT WILL OCCUR BEFORE THIS OFFSET). *\n*                     IF BLANK, NO DROP WILL BE CREATED.            *\n*         COL  20   = BLANK                                         *\n*         COL  21   = REGISTER USED WITH THIS USING, 0-9 OR A-F     *\n*         COL  22   = BLANK                                         *\n*         COL 23-28 = INITIAL OFFSET VALUE IN THE USING REGISTER.   *\n*                                                                   *\n*   5) USER LABEL RECORD (OPTIONAL): DEFINE USER LABELS TO BE PLACED*\n*      ON STATEMENTS WITHIN THE PROGRAM. IF PROGRAM BASE REGISTERS  *\n*      ARE SET UP WITH USING CARDS, THESE WILL ALSO BE GENERATED AS *\n*      SYMBOLIC OPERANDS ON INSTRUCTIONS. FORMAT IS:                *\n*         COL  1-5   = LITERAL 'ULABL'                              *\n*         COL   6    = BLANK                                        *\n*         COL  7-14  = LABEL NAME                                   *\n*         COL  15    : BLANK                                        *\n*         COL 16-21  : OFFSET TO LEFT END OF FIELD, IN HEX.         *\n*         COL  22    : BLANK                                        *\n*         COL 23-25  : LENGTH OF FIELD IN DECIMAL. 256 IS MAX.      *\n*                                                                   *\n* NOTE: THE BAS R9,TESTPRNT AT THE EOJ LABEL IS FOR TESTING ONLY    *\n*       AND CAN BE COMMENTED OUT FOR NORMAL USE. IT PROVIDES A      *\n*       PRINTOUT OF THE LABEL TABLE THAT CAN BE HELPFUL WHEN TESTING*\n*       CHANGES.                                                    *\n*                                                                   *\n* AUTHOR R THORNTON FEB 2002                                        *\n*********************************************************************\n*\n*********************************************************************\n*        SAVE REGISTERS, SET UP BASE REGS, CHAIN SAVE AREAS         *\n*********************************************************************\n         USING RESOURCE,R3,R4,R5,R6\n         STM   R14,R12,12(R13)         SAVE CALLER'S REGS\n         LR    R3,R15                  SET UP BASE FIRST BASE REG\n         LA    R4,4095(R3)             SET UP SECOND\n         LA    R4,1(R4)                    BASE REGISTER\n         LA    R5,4095(R4)             SET UP THIRD\n         LA    R5,1(R5)                    BASE REGISTER\n         LA    R6,4095(R5)             SET UP THIRD\n         LA    R6,1(R6)                    BASE REGISTER\n         LA    R15,MYSAVE              POINT TO MY REGISTER SAVE AREA\n         ST    R15,8(R13)              SET LSA IN CALLER'S SAVE\n         ST    R13,4(R15)              SET HSA IN MY SAVE AREA\n         LR    R13,R15                 SET UP SAVE AREA POINTER\n         B     PARMS                   BRANCH AROUND CONSTANTS\n         DC    CL8'RESOURCE'           PROGRAM NAME IDENTIFIER\n         DC    CL8'&SYSDATE'           ASSEMBLY DATE\n         DC    CL8'&SYSTIME'           ASSEMBLY TIME\nMYSAVE   DS    18F                     MY REGISTER SAVE AREA\n*********************************************************************\n* PROCESS THE PARM STATEMENT: DEFAULT IS TO IGNORE ALL FLOATING     *\n* POINT AND PRIVILEGED INSTRUCTIONS. IF PARM CONTAINS 'FLTPT' THEN  *\n* FLOATING POINT INSTRUCTIONS WILL BE INCLUDED AND/OR IF PARM       *\n* CONTAINS 'SUPVR' THEN PRIVILEGED INSTRUCTIONS WILL BE INCLUDED.   *\n*********************************************************************\nPARMS    L     R2,0(R1)                GET PARM FIELD ADDR\n         CLC   0(2,R2),H0              ANY PARM DATA?\n         BE    TBLMODS                 NO, CONTINUE\n         CLC   0(2,R2),H5              VALID PARM LENGTH?\n         BL    BADPARM                 NO\n         BH    PMCK11                  MAYBE, TEST MORE ...\n         CLC   2(5,R2),FLTPT           FLOATING POINT SPECIFIED?\n         BNE   PM5CK2                  NO\n         NI    UNWANTED,X'BF'          YES, TURN OFF '40' BIT\n         B     TBLMODS                 CONTINUE\nPM5CK2   CLC   2(5,R2),SUPVR           SUPVR SPECIFIED?\n         BNE   BADPARM                 NO, ERROR\n         NI    UNWANTED,X'DF'          YES, TURN OFF '20' BIT\n         B     TBLMODS                 CONTINUE\nPMCK11   CLC   0(2,R2),H11             VALID PARM LENGTH?\n         BNE   BADPARM                 NO, ERROR\n         CLC   2(5,R2),FLTPT           FLOATING POINT SPECIFIED?\n         BNE   PM11CK2                 NO\n         NI    UNWANTED,X'BF'          YES, TURN OFF '40' BIT\n         B     PM11CK3                 CONTINUE\nPM11CK2  CLC   2(5,R2),=CL5'SUPVR'     SUPVR SPECIFIED?\n         BNE   BADPARM                 NO, ERROR\n         NI    UNWANTED,X'DF'          YES, TURN OFF '20' BIT\nPM11CK3  CLC   2(5,R2),8(R2)           BOTH PARMS SAME?\n         BE    BADPARM                 YES, ERROR\n         CLI   7(R2),C','              COMMA SEPARATES?\n         BNE   BADPARM                 NO, ERROR\n         CLC   8(5,R2),FLTPT           FLOATING POINT SPECIFIED?\n         BNE   PM11CK4                 NO\n         NI    UNWANTED,X'BF'          YES, TURN OFF '40' BIT\n         B     TBLMODS                 CONTINUE\nPM11CK4  CLC   8(5,R2),SUPVR           SUPVR SPECIFIED?\n         BNE   BADPARM                 NO, ERROR\n         NI    UNWANTED,X'DF'          YES, TURN OFF '20' BIT\n         B     TBLMODS                 CONTINUE\nBADPARM  WTO   'RESOURCE: INVALID PARM ON EXEC STATEMENT',ROUTCDE=11\n         ABEND 111,DUMP\n*********************************************************************\n* THIS ROUTINE MODIFIES THE OP-CODE TABLES TO ELIMINATE ENTRIES FOR *\n* UNWANTED FLOATING POINT AND/OR PRIVILEGED INSTRUCTIONS.           *\n*********************************************************************\nTBLMODS  CLI   UNWANTED,0              FLOATING POINT/SUPVR WANTED?\n         BE    GETSTOR                 YES, BOTH. NO MOD NEEDED\nTSSTART  LA    R11,TABLTABL-4          POINT TO FIRST TABLE ADDRESS -4\n         LA    R12,OPCODTBL            POINT TO FIRST TABLE\nTSNEXT   SR    R10,R10                 CLEAR FOR INSERT\n         IC    R10,UNWANTED            PICK UP UNWANTED MASK\nTSCHKEND CLC   0(4,R12),HEXFFS         END OF TABLE?\n         BE    TSSTEP                  YES, GO TO NEXT\n         USING OPCODES,R12\n         EX    R10,TSCHKWNT            THIS INSTRUCTION WANTED?\n         BZ    TSENTSTP                YES\n         MVC   OPCENTRY,XZROS          CLEAR THE ENTRY\nTSENTSTP LA    R12,L'OPCENTRY(R12)     STEP TO NEXT TABLE ENTRY\n         B     TSCHKEND                CONTINUE\nTSSTEP   LA    R11,4(R11)              STEP TO NEXT TABLE ADDRESS\n         CLC   0(4,R11),HEXFFS         END OF ADDRESS TABLE?\n         BE    TBLCMPRS                YES, GO COMPRESS TABLES\n         L     R12,0(R11)              POINT TO NEXT TABLE\n         B     TSCHKEND                GO MODIFY NEXT TABLE\nTSCHKWNT TM    OPCFLAGS,0              EXECUTED INSTRUCTION\n         DROP  R12\n*********************************************************************\n* COMPRESS THE OP-CODE TABLES AFTER CLEARING ENTRIES FOR UNWANTED   *\n* INSTRUCTIONS. THE GENERAL INSTRUCTION TABLE, OPCODTBL, IS NOT     *\n* COMPRESSED, AS IT CONTAINS 256 ENTRIES, AND IS ACCESSED DIRECTLY  *\n* USING THE FIRST BYTE OF OP-CODE AS AN INDEX.                      *\n*********************************************************************\nTBLCMPRS LA    R10,TABLTABL            POINT TO FIRST TABLE ADDRESS\nTCNEX10  CLC   0(4,R10),HEXFFS         END OF ADDRESS TABLE?\n         BE    GETSTOR                 YES, ALL THRU HERE\n         L     R11,0(R10)              POINT TO OP-CODE TABLE\n         USING OPCODES,R11\nTCNEX11  CLC   0(4,R11),HEXFFS         END OF OP-CODE TABLE?\n         BE    TCSTEP10                YES, STEP TO NEXT TABLE\n         CLI   OPCMNEM,0               THIS A WANTED INSTRUCTION?\n         BNE   TCSTEP11                YES\n         LA    R12,L'OPCENTRY(R11)     NO, STEP TO NEXT ENTRY\nTCNEX12  CLC   0(4,R12),HEXFFS         END OF OP-CODE TABLE?\n         BNE   TCCHKWNT                NO, CHECK FOR WANTED INSTRUCTION\n         MVC   OPCENTRY(4),HEXFFS      YES, SET TABLE END\n         B     TCSTEP10                GO TO NEXT TABLE\nTCCHKWNT CLI   OPCMNEM-OPCENTRY(R12),0 THIS A WANTED INSTRUCTION?\n         BE    TCSTEP12                NO, KEEP GOING\n         MVC   0(L'OPCENTRY,R11),0(R12) MOVE WANTED ENTRY BACK\n         XC    1(L'OPCENTRY-1,R12),1(R12) CLEAR THE ENTRY MOVED\n         B     TCSTEP11                CONTINUE IN TABLE\nTCSTEP12 LA    R12,L'OPCENTRY(R12)     YES, STEP TO NEXT ENTRY\n         B     TCNEX12                 CONTINUE COMPRESSION\nTCSTEP11 LA    R11,L'OPCENTRY(R11)     STEP TO NEXT TABLE ENTRY\n         B     TCNEX11                 CONTINUE\nTCSTEP10 LA    R10,4(R10)              STEP TO NEXT TABLE ADDRESS\n         B     TCNEX10                 GO COMPRESS NEXT TABLE\n         DROP  R11\n*********************************************************************\n* GET STORAGE FOR TABLES AND OPEN FILES FOR PROCESSING              *\n*********************************************************************\nGETSTOR  STORAGE OBTAIN,LENGTH=LBLTBEND,LOC=ANY GET LABEL STORAGE\n         ST    R1,LBLTBADR             SAVE THE GOTTEN ADDRESS\n         A     R1,LBLTBEND             SAVE THE\n         ST    R1,LBLTBEND                  TABLE END ADDRESS\n         OPEN  (SYSPRINT,OUTPUT,SYSOUT,OUTPUT,SYSIN) OPEN FILES\n*********************************************************************\n* READ CONTROL CARD FILE AND PROCESS THE STATEMENTS                 *\n*********************************************************************\nIIREAD   BAS   R9,READCNTL             READ NEXT CONTROL RECORD\n         CLI   MORECNTL,C'Y'           GOT A CONTROL RECORD?\n         BE    IIGOT1                  YES\n         CLI   GOTMCREC,C'Y'           NO, GOT A MEMBER/CSECT CARD?\n         BE    EXEC                    YES, EXIT\n         MVC   PRT(36),=CL36'*** NO CONTROL RECORDS IN SYSIN FILE'\n         BAS   R9,PRINT                PRINT ERROR MESSAGE\n         WTO   '*** NO CONTROL RECORDS IN SYSIN FILE',ROUTCDE=11\n         MVC   RETCODE+2(2),H8         SET RETURN CODE = 8\n         ABEND 111,DUMP                TERMINATE IN ERROR\nIIGOT1   CLI   GOTMCREC,C'Y'           ALREADY HAD MEMBER/CSECT?\n         BE    IIGOT2                  YES\n         BAS   R9,MEMBCSEC             NO, GO PROCESS MEMBER/CSECT\n         B     IIREAD                  GO READ NEXT CONTROL RECORD\nIIGOT2   CLC   CNTLCARD(5),=CL5'DATA ' THIS A DATA-ONLY RECORD?\n         BNE   IIGOT3                  NO\n         BAS   R9,DATAONLY             YES, GO PROCESS IT\n         B     IIREAD                  CONTINUE\nIIGOT3   CLC   CNTLCARD(6),=CL6'ULABL ' THIS A USER LABEL CARD?\n         BNE   IIGOT4                  NO\n         BAS   R9,ULABEL               YES, GO PROCESS ULABL\n         B     IIREAD                  CONTINUE\nIIGOT4   CLC   CNTLCARD(6),=CL6'USING ' THIS A USING RECORD?\n         BNE   IIBADCRD                NO\n         BAS   R9,USINGCRD             YES, GO PROCESS USING\n         B     IIREAD                  CONTINUE\nIIBADCRD MVC   PRT(39),=CL39'INVALID CONTROL RECORD ABOVE IS DROPPED'\n         BAS   R9,PRINT                PRINT MESSAGE\n         MVC   RETCODE+2(2),H8         SET RETURN CODE = 8\n         WTO   'DROPPED AN INVALID CONTROL RECORD',ROUTCDE=11\n         B     IIREAD                  CONTINUE\n*********************************************************************\n* INITIALIZATION FINISHED. LOAD THE DISASSEMBLY ROUTINE. CALL ONCE  *\n* FOR LABEL TABLE BUILD, THEN A SECOND TIME FOR THE FINAL OUTPUT    *\n*********************************************************************\nEXEC     LOAD  EP=REBUILD              GET THE DISASSEMBLY MODULE\n         ST    R0,REBLDEP              SAVE ENTRY POINT ADDRESS\n         LA    R1,REBLDPRM             POINT TO PARAMETERS\n         L     R15,REBLDEP             POINT TO DISASSEMBLY MODULE\n         BASR  R14,R15                 PERFORM LABEL TABLE BUILD\n         MVI   STAGE,2                 SET STAGE 2 INDICATOR\n         LA    R1,REBLDPRM             POINT TO PARAMETERS\n         L     R15,REBLDEP             POINT TO DISASSEMBLY MODULE\n         BASR  R14,R15                 PERFORM DISASSEMBLY\n*********************************************************************\n*        TERMINATE PROCESSING                                       *\n*********************************************************************\nEOJ      EQU   *\n         BAS   R9,TESTPRNT             ????TESTING DISPLAYS?????\n         CLOSE (SYSPRINT,,SYSIN,,SYSOUT) CLOSE FILES\n         L     R13,4(R13)              POINT TO CALLER'S SAVE AREA\n         L     R14,12(R13)             RESTORE RETURN REG: R14\n         L     R15,RETCODE             SET RETURN CODE\n         LM    R0,R12,20(R13)          RESTORE CALLER'S REGS 0-12\n         BR    R14                     RETURN\n*********************************************************************\n*        READ NEXT CONTROL RECORD                                   *\n*********************************************************************\nREADCNTL ST    R9,RC9                  SAVE RETURN ADDRESS\nRCGET    GET   SYSIN,CNTLCARD          READ CONTROL CARD\n         MVC   PRT(21),=CL21'CONTROL RECORD READ: '\n         MVC   PRT+21(59),CNTLCARD     MOVE CONTROL RECORD\n         BAS   R9,PRINT                PRINT IT\n         CLI   CNTLCARD,C'*'           COMMENT?\n         BE    RCGET                   YES\nRCXIT    L     R9,RC9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nRCEOF    MVI   MORECNTL,C'N'           SET EOF INDICATOR\n         B     RCXIT                   AND EXIT\nRC9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n*        PROCESS MEMBER/CSECT CONTROL RECORD                        *\n*********************************************************************\nMEMBCSEC ST    R9,MC9                  SAVE RETURN ADDRESS\n         XC    CURRINFO(CURREND-CURRINFO),CURRINFO CLEAR CURRENT INFO\n         XC    TEXTENDA,TEXTENDA       SAVE TEXT LENGTH\n         MVC   PRMEMBER,CCMEMBER       MOVE REQUESTED MEMBER NAME\n         MVC   CURRMEMB,CCMEMBER       SAVE REQUESTED MEMBER NAME\n         MVC   PRMCSECT,CCCSECT        MOVE REQUESTED CSECT NAME\n         MVC   CURRCSCT,CCCSECT        SAVE REQUESTED CSECT NAME\n         MVC   PRT(29),=CL29'CONTROL CARD READ HAS MEMBER='\n         MVC   PRT+29(8),CCMEMBER      MOVE MEMBER NAME\n         MVC   PRT+39(6),=CL6'CSECT='\n         MVC   PRT+46(8),CCCSECT       MOVE CSECT NAME\n         BAS   R9,PRINT                PRINT CONTROL CARD INFO\n         L     R1,LBLTBADR             POINT TO 1ST LABEL TABLE ENTRY\n         ST    R1,CURRLABL             SET CURRENT LABEL ADDRESS\n         MVI   0(R1),X'FF'             SET TABLE END ADDRESS\n         BAS   R9,GETESD               PROCESS ESD'S FOR THE CSECT\n         BAS   R9,GETRLD               PROCESS RLD'S FOR THE CSECT\n         BAS   R9,GETTEXT              GET TEXT FOR THE CSECT\n         MVI   GOTMCREC,C'Y'           INDICATE MEMBER/CSECT REC DONE\nMCXIT    L     R9,MC9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nMC9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n* PROCESS DATA-ONLY CONTROL RECORDS: VALIDATE THE START AND END     *\n* OFFSETS, THEN BUILD LABEL TABLE ENTRIES FOR THE START OF THE      *\n* AREA AND FOR THE END OF THE AREA.                                 *\n*********************************************************************\nDATAONLY ST    R9,DO9                  SAVE RETURN ADDRESS\n         TRT   CNTLCARD+5(6),CHECKHEX  IS START OFFSET VALID HEX?\n         BNZ   DOBADCRD                NO, ERROR\n         TRT   CNTLCARD+12(6),CHECKHEX IS END OFFSET VALID HEX?\n         BNZ   DOBADCRD                NO, ERROR\n         L     R1,CURRLABL             POINT TO CURRENT LABEL AREA\n         USING LBLDSECT,R1\n         TR    CNTLCARD+5(6),TRHEX     MAKE C1=FA, C2=FB, ... ETC\n         PACK  LBLOFSET(5),CNTLCARD+5(7) PACK TO MAKE HEX\n         MVI   LBLOFSET+4,C' '         CLEAR TRASH\n         MVC   HOLDSTRT,LBLOFSET       SAVE START OFFSET\n         MVI   LBLTYPE,X'18'           TYPE IS DATA-ONLY START\n         XC    LBLUREG(11),LBLUREG     REST IS N/A\n         BAS   R9,ADDLABEL             GO PUT IT IN THE TABLE\n         L     R1,CURRLABL             POINT TO CURRENT LABEL AREA\n         TR    CNTLCARD+12(6),TRHEX    MAKE C1=FA, C2=FB, ... ETC\n         PACK  LBLOFSET(5),CNTLCARD+12(7) PACK TO MAKE HEX\n         MVI   LBLOFSET+4,C' '         CLEAR TRASH\n         CLC   HOLDSTRT,LBLOFSET       IS START LESS THAN END?\n         BNL   DOBADCRD                NO, ERROR\n         MVI   LBLTYPE,X'1C'           TYPE IS DATA-ONLY END\n         XC    LBLUREG(11),LBLUREG     REST IS N/A\n         BAS   R9,ADDLABEL             GO PUT IT IN THE TABLE\n         B     DOXIT                   AND EXIT\n         DROP  R1\nDOBADCRD MVC   PRT(41),=CL41'INVALID DATA-ONLY RECORD ABOVE IS DROPPED'\n         BAS   R9,PRINT                PRINT MESSAGE\n         MVC   RETCODE+2(2),H8         SET RETURN CODE = 8\n         WTO   'DROPPED AN INVALID DATA-ONLY CONTROL RECORD',ROUTCDE=11\nDOXIT    L     R9,DO9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nDO9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n* PROCESS USING CONTROL RECORDS: FIRST VALIDATE THE HEX OFFSET AND  *\n* FIELDS. FORMAT A LABEL ENTRY FOR THE USING AND ADD IT TO THE LABEL*\n* TABLE. IF A DROP LOCATION IS PROVIDED, BUILD A DROP ENTRY AND ADD *\n* IT TO THE LABEL TABLE.                                            *\n*********************************************************************\nUSINGCRD ST    R9,UC9                  SAVE RETURN ADDRESS\n         TRT   CNTLCARD+6(6),CHECKHEX  IS USING OFFSET VALID HEX?\n         BNZ   UCBADCRD                NO, ERROR\n         TRT   CNTLCARD+20(1),CHECKHEX IS REGISTER VALID HEX?\n         BNZ   UCBADCRD                NO, ERROR\n         TRT   CNTLCARD+22(6),CHECKHEX  IS USING INITIAL VALUE HEX?\n         BNZ   UCBADCRD                NO, ERROR\n         CLC   CNTLCARD+13(6),BLANKS   ANY DROP OFFSET ENTERED?\n         BE    UCFORMAT                NO\n         TRT   CNTLCARD+13(6),CHECKHEX  IS USING INITIAL VALUE HEX?\n         BNZ   UCBADCRD                NO, ERROR\nUCFORMAT L     R1,CURRLABL             POINT TO CURRENT LABEL AREA\n         USING LBLDSECT,R1\n         TR    CNTLCARD+6(6),TRHEX     MAKE C1=FA, C2=FB, ... ETC\n         PACK  LBLOFSET(5),CNTLCARD+6(7) PACK TO MAKE HEX\n         MVI   LBLOFSET+4,C' '         CLEAR TRASH\n         MVC   HOLDSTRT,LBLOFSET       SAVE START OFFSET\n         MVI   LBLTYPE,X'10'           TYPE IS USING\n         TR    CNTLCARD+20(1),TRHEX    MAKE C1=FA, C2=FB,... ETC\n         MVC   LBLUREG,CNTLCARD+20     MOVE REGISTER\n         NI    LBLUREG,X'0F'           CLEAR ZONE NYBBLE\n         MVC   HOLDREG,LBLUREG         SAVE REGISTER VALUE\n         XC    LBLRLDLN(10),LBLRLDLN   ZERO OUT REMAINDER\n         TR    CNTLCARD+22(6),TRHEX    MAKE C1=FA, C2=FB, ... ETC\n         MVI   HOLDINIU,0              CLEAR HIGH ORDER BYTE\n         PACK  HOLDINIU+1(4),CNTLCARD+22(7) PACK TO MAKE HEX\n         MVC   LBLINITU,HOLDINIU       MOVE INITIAL USING REG VALUE\n         BAS   R9,ADDLABEL             GO PUT IT IN THE TABLE\n         L     R1,CURRLABL             POINT TO CURRENT LABEL AREA\n         CLC   HOLDINIU,XZROS          USING AT LOCATION ZERO?\n         BE    UCCKDROP                YES, NO LABEL ENTRY NEEDED\n         MVC   LBLOFSET,HOLDINIU       COPY INITIAL VALUE TO LOCATION\n         MVI   LBLOFSET,0              CLEAR 1ST BYTE OF OFFSET\n         MVI   LBLTYPE,X'30'           INDICATE SIMPLE LABEL ENTRY\n         MVI   LBLUREG,0               CLEAR USING REGISTER NBR\n         MVC   LBLRLDLN,XZROS          CLEAR RLD LENGTH\n         XC    LBLLABEL,LBLLABEL       CLEAR LABEL NAME\n         BAS   R9,ADDLABEL             GO PUT IT IN THE TABLE\nUCCKDROP CLC   CNTLCARD+13(6),BLANKS   ANY DROP OFFSET ENTERED?\n         BE    UCXIT                   NO\n         L     R1,CURRLABL             POINT TO CURRENT LABEL AREA\n         TR    CNTLCARD+13(6),TRHEX    MAKE C1=FA, C2=FB, ... ETC\n         PACK  LBLOFSET(5),CNTLCARD+13(7) PACK TO MAKE HEX\n         MVI   LBLOFSET+4,C' '         CLEAR TRASH\n         CLC   HOLDSTRT,LBLOFSET       IS DROP AFTER USING?\n         BNL   UCBADCRD                NO, ERROR\n         MVI   LBLTYPE,X'0C'           TYPE IS DROP\n         MVC   LBLUREG,HOLDREG         MOVE IN REGISTER NBR\n         XC    LBLRLDLN(10),LBLRLDLN   ZERO OUT REST\n         BAS   R9,ADDLABEL             GO PUT IT IN THE TABLE\n         B     UCXIT                   AND EXIT\n         DROP  R1\nUCBADCRD MVC   PRT(37),=CL37'INVALID USING RECORD ABOVE IS DROPPED'\n         BAS   R9,PRINT                PRINT MESSAGE\n         MVC   RETCODE+2(2),H8         SET RETURN CODE = 8\n         WTO   'DROPPED AN INVALID USING CONTROL RECORD',ROUTCDE=11\nUCXIT    L     R9,UC9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nUC9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n* PROCESS USER LABEL RECORDS: FIRST VALIDATE THE HEX OFFSET, DECIMAL*\n* LENGTH, AND CHARACTER LABEL FIELDS. FORMAT A LABEL ENTRY FOR THE  *\n* LABEL AND ADD IT TO THE LABEL TABLE.                              *\n*********************************************************************\nULABEL   ST    R9,UL9                  SAVE RETURN ADDRESS\n         TRT   CNTLCARD+15(6),CHECKHEX IS LABEL OFFSET VALID HEX?\n         BNZ   ULBADCRD                NO, ERROR\n         TRT   CNTLCARD+22(3),CHECKZON IS LENGTH VALID DECIMAL?\n         BNZ   ULBADCRD                NO, ERROR\n         CLI   CNTLCARD+6,C' '         ANY LABEL ENTERED?\n         BE    ULBADCRD                NO\n         CLI   CNTLCARD+6,C'Z'         FIRST CHARACTER VALID?\n         BH    ULBADCRD                NO\n         TRT   CNTLCARD+6(8),CHECKLBL  IS USER LABEL VALID CHARS?\n         BNZ   ULBADCRD                NO, ERROR\nULFORMAT L     R1,CURRLABL             POINT TO CURRENT LABEL AREA\n         USING LBLDSECT,R1\n         TR    CNTLCARD+15(6),TRHEX     MAKE C1=FA, C2=FB, ... ETC\n         PACK  LBLOFSET(5),CNTLCARD+15(7) PACK TO MAKE HEX\n         MVI   LBLOFSET+4,C' '         CLEAR TRASH\n         MVI   LBLTYPE,X'30'           TYPE IS USING\n         MVI   LBLUREG,0               REGISTER NOT USED\n         PACK  DBLWD,CNTLCARD+22(3)    PACK LENGTH VALUE\n         CVB   R15,DBLWD               CONVERT TO PACKED\n         STCM  R15,3,LBLRLDLN          SAVE LENGTH\n         MVC   LBLLABEL,CNTLCARD+6     MOVE IN LABEL NAME\n         BAS   R9,ADDLABEL             GO PUT IT IN THE TABLE\n         B     ULXIT                   AND THEN EXIT\n         DROP  R1\nULBADCRD MVC   PRT(37),=CL37'INVALID ULABL RECORD ABOVE IS DROPPED'\n         BAS   R9,PRINT                PRINT MESSAGE\n         MVC   RETCODE+2(2),H8         SET RETURN CODE = 8\n         WTO   'DROPPED AN INVALID ULABL CONTROL RECORD',ROUTCDE=11\nULXIT    L     R9,UL9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nUL9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n* PROCESS THE ESD RECORDS FOR THIS CSECT: LOOP THROUGH ALL THE ESD  *\n* ENTRIES RETURNED BY THE READLMOD SUBROUTINE. THE FIRST THREE ARE  *\n* NORMALLY FOR THE CSECT ITSELF (AN SD, AN ED, AND AN LD). THESE    *\n* WILL BE FOLLOWED BY OTHER ESD ELEMENTS OF WHICH ONLY THE LD TYPES *\n* ARE USED. THE FIRST SD ELEMENT CONTAINS THE AMODE AND RMODE VALUES*\n* THE ED CONTAINS THE CSECT LENGTH, AND THE LD FOR THE CSECT        *\n* PROVIDES LABEL INFORMATION FOR THE CSECT ITSELF. ANY REMAINING    *\n* LD ENTRIES REPRESENT LABELS IDENTIFIED WITH ENTRY STATEMENTS.     *\n*********************************************************************\nGETESD   ST    R9,GE9                  SAVE RETURN ADDRESS\n         XC    PRMCURSR,PRMCURSR       CLEAR CURSOR FOR FIRST CALL\nGEGETIT  MVC   PRMREQST,=CL8'ESD'      SHOW REQUEST IS FOR ESD DATA\n         BAS   R9,READLMOD             GO READ THE ESD DATA\n         CLC   PRMCOUNT,ZERO           ANY DATA RETURNED?\n         BE    GEXIT                   NO\n         L     R10,PRMCOUNT            GET NUMBER ELEMENTS FOUND\n         L     R11,PRMBUFAD            POINT TO BUFFER HEADER\n         USING ESDHEADR,R11\n         LA    R12,ESDHEND             POINT TO FIRST ELEMENT\n         USING ESDENTRY,R12\nGENEXT   STM   R10,R12,WORKSAVE        SAVE WORK REGISTERS\n         MVC   ESDSYMB,BLANKS          CLEAR SYMBOL NAME\n         LH    R1,ESDNAMEC             GET LENGTH OF SYMBOL\n         LTR   R1,R1                   ANY LENGTH?\n         BZ    GEMVOWBK                NO\n         BCTR  R1,0                    COMPUTE LENGTH CODE\n         CH    R1,H8                   EXCESSIVE LENGTH?\n         BL    GEMVNAM2                NO\n         LA    R1,7                    YES, SET MAX LENGTH\nGEMVNAM2 L     R2,ESDNAMEP             POINT TO THE SYMBOL\n         EX    R1,GEMVSYMX             MOVE SYMBOL NAME\nGEMVOWBK MVC   ESDOWNER,BLANKS         PRE-CLEAR OWNER NAME\n         LH    R1,ESDRESCL             GET OWNER NAME LENGTH\n         LTR   R1,R1                   ANY LENGTH?\n         BZ    GECKTYPE                NO\n         BCTR  R1,0                    COMPUTE LENGTH CODE\n         CH    R1,H8                   EXCESSIVE LENGTH?\n         BL    GEMVOWN2                NO\n         LA    R1,7                    YES, SET MAX LENGTH\nGEMVOWN2 L     R2,ESDRESCP             POINT TO OWNING NAME\n         EX    R1,GEMVOWNX             MOVE IN OWNING NAME\nGECKTYPE CLC   ESDTYPE,=CL2'SD'        IS THIS AN SD (CSECT)?\n         BNE   GECKTYP2                NO\n         CLC   CURRCSCT,ESDSYMB        SYMBOL SAME AS REQUESTED CSECT?\n         BNE   GECKTYP2                NO\n         CLC   CURRCSCT,ESDOWNER       OWNER SAME AS REQUESTED CSECT?\n         BNE   GECKTYP2                NO\n         TM    ESDSYMAT,X'80'          STRONG REFERENCE/DEFINITION?\n         BO    GECKTYP2                YES\n         MVC   CURRAMOD,ESDAMODE       NO, SAVE AMODE\n         MVC   CURRRMOD,ESDRMODE          AND RMODE\n         B     GESTEP                  CONTINUE WITH NEXT ESD ENTRY\nGECKTYP2 CLC   ESDTYPE,=CL2'ED'        THIS AN ED?\n         BNE   GECKTYP3                NO\n         CLC   ESDSYMB,=CL8'B_TEXT'    SYMBOL NAME IS B_TEXT?\n         BNE   GECKTYP3                NO\n         CLC   CURRCSCT,ESDOWNER       OWNER SAME AS REQUESTED CSECT?\n         BNE   GECKTYP3                NO\n         TM    ESDSYMAT,X'80'          STRONG REFERENCE/DEFINITION?\n         BO    GECKTYP2                YES\n         MVC   TEXTENDA,ESDLENG        NO, SAVE TEXT LENGTH\n         MVC   TEXTLENG,ESDLENG           TWICE\n         B     GESTEP                  CONTINUE WITH NEXT ESD ENTRY\nGECKTYP3 CLC   ESDTYPE,=CL2'LD'        THIS AN LD?\n         BNE   GESTEP                  NO\n         CLC   CURRCSCT,ESDOWNER       OWNER SAME AS REQUESTED CSECT?\n         BNE   GESTEP                  NO\n         TM    ESDSYMAT,X'80'          STRONG REFERENCE/DEFINITION?\n         BZ    GESTEP                  NO\n         L     R1,CURRLABL             POINT TO CURRENT LABEL ENTRY\n         USING LBLDSECT,R1\n         MVC   LBLOFSET,ESDELOFF       OFFSET TO LABEL\n         MVI   LBLTYPE,X'30'           TYPE = LABEL\n         MVI   LBLUREG,0               NO USING REGISTER\n         XC    LBLRLDLN,LBLRLDLN       CLEAR LENGTH FOR RLD CONSTANT\n         MVC   LBLLABEL,ESDSYMB        MOVE SYMBOL NAME TO ENTRY\n         DROP  R1\n         BAS   R9,ADDLABEL             GO ADD LABEL ENTRY TO TABLE\nGESTEP   LM    R10,R12,WORKSAVE        GET WORK REGISTERS\n         A     R12,ESDHENTL            POINT TO NEXT ELEMENT\n         BCT   R10,GENEXT              LOOP THRU ESD ENTRIES\n         CLC   PRMRETCD,ZERO           ANY MORE ESD ENTRIES?\n         BE    GEGETIT                 YES, GO READ NEXT ESD BUFFER\nGEXIT    L     R9,GE9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nGE9      DC    A(0)                    RETURN ADDRESS\nGEMVSYMX MVC   ESDSYMB(1),0(R2)        EXECUTED MOVE\nGEMVOWNX MVC   ESDOWNER(1),0(R2)       EXECUTED MOVE\n         DROP  R11\n         DROP  R12\n*********************************************************************\n*        PROCESS THE RLD RECORDS FOR THIS CSECT                     *\n*********************************************************************\nGETRLD   ST    R9,GR9                  SAVE RETURN ADDRESS\n         MVC   PRMREQST,=CL8'RLD'      SHOW REQUEST IS FOR RLD DATA\nGRGET2   BAS   R9,READLMOD             GO READ THE RLD DATA\n         L     R10,PRMCOUNT            GET NUMBER ELEMENTS FOUND\n         LTR   R10,R10                 ANY RLD ELEMENTS READ?\n         BZ    GRXIT                   NO\n         L     R11,PRMBUFAD            POINT TO BUFFER HEADER\n         USING RLDHEADR,R11\n         LA    R12,RLDHEND             POINT TO FIRST ELEMENT\n         USING RLDENTRY,R12\nGRNEXT   STM   R10,R12,WORKSAVE        SAVE WORK REGISTERS\n         MVC   RESIDENT,BLANKS         PRE-CLEAR TO BLANKS\n         LH    R1,RLDRESNL             GET LENGTH OF RES CSECT NAME\n         LTR   R1,R1                   ANY LENGTH?\n         BZ    GRDMVAC                 NO\n         BCTR  R1,0                    COMPUTE LENGTH CODE\n         CH    R1,H8                   EXCESSIVE LENGTH?\n         BL    GRDMVRES                NO\n         LA    R1,7                    YES, SET MAX LENGTH\nGRDMVRES L     R2,RLDRESNP             POINT TO THE SYMBOL\n         EX    R1,GRDMVREX             MOVE SYMBOL NAME\nGRDMVAC  MVC   SYMBPTS2,BLANKS         PRE-CLEAR TO BLANKS\n         LH    R1,RLDTGTNL             GET LENGTH OF SYMBOL POINTED TO\n         LTR   R1,R1                   ANY LENGTH?\n         BZ    GRDCKIT                 NO\n         BCTR  R1,0                    COMPUTE LENGTH CODE\n         CH    R1,H8                   EXCESSIVE LENGTH?\n         BL    GRDMVTGT                NO\n         LA    R1,7                    YES, SET MAX LENGTH\nGRDMVTGT L     R2,RLDTGTNP             POINT TO THE SYMBOL\n         EX    R1,GRDTGTNX             MOVE SYMBOL NAME\nGRDCKIT  CLC   RESIDENT,CURRCSCT       ENTRY RESIDES IN CURRENT CSECT?\n         BNE   GRSTEP                  NO\n         L     R1,CURRLABL             POINT TO LABEL TABLE\n         USING LBLDSECT,R1\nGRLBLOK  MVC   LBLOFSET,RLDRESOF       OFFSET TO LABEL\n         MVI   LBLTYPE,X'40'           ASSUME ADCON\n         CLI   RLDSTAT,X'02'           IS IT AN ADCON?\n         BE    GRCLRU                  YES\n         MVI   LBLTYPE,X'50'           NO, ASSUME VCON\n         CLI   RLDSTAT,X'01'           IS IT A VCON?\n         BNE   GRSTEP                  NO, DROP IT\nGRCLRU   MVI   LBLUREG,0               CLEAR USING REG NBR\n         MVC   LBLRLDLN,RLDADCNL       LENGTH OF ADCON\n         MVC   LBLLABEL,BLANKS         CLEAR SYMBOL NAME FIELD\n         CLC   SYMBPTS2,CURRCSCT       SYMBOL = CURRENT CSECT?\n         BE    GRLBADD                 YES\n         MVC   LBLLABEL,SYMBPTS2       MOVE SYMBOL NAME TO ENTRY\nGRLBADD  BAS   R9,ADDLABEL             GO ADD LABEL TO TABLE.\n         DROP  R1\nGRSTEP   LM    R10,R12,WORKSAVE        GET WORK REGISTERS\n         A     R12,RLDHENTL            POINT TO NEXT ELEMENT\n         BCT   R10,GRNEXT              LOOP THRU ESD ENTRIES\n         CLC   PRMRETCD,ZERO           ANY MORE RLD ENTRIES?\n         BE    GRGET2                  YES\nGRXIT    L     R9,GR9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nGRDMVREX MVC   RESIDENT(1),0(R2)       EXECUTED MOVE\nGRDTGTNX MVC   SYMBPTS2(1),0(R2)       EXECUTED MOVE\nGR9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n*        OBTAIN THE TEXT FOR THIS CSECT: ISSUE A STORAGE OBTAIN     *\n*        FOR A STORAGE AREA ABOVE THE 16M LINE LARGE ENOUGH TO      *\n*        CONTAIN THE TEXT, THEN LOAD ALL THE TEXT INTO IT.          *\n*********************************************************************\nGETTEXT  ST    R9,GT9                  SAVE RETURN ADDRESS\n         MVC   PRMCURSR,ZERO           SET CURSOR=0 TO START\n         L     R0,TEXTENDA             GET TEXT LENGTH SET BY ESD\n         LTR   R0,R0                   HAS TEXT LENGTH BEEN SET?\n         BZ    GTNOTXAD                NO, ERROR\n         AH    R0,H32                  INSURE SUFFICIENT STORAGE\n         B     GTSTOBTN                YES\nGTNOTXAD MVC   PRT(39),=CL39'NO STORAGE SIZE WAS FOUND FOR THE CSECT'\n         BAS   R9,PRINT                PRINT THE ERROR MESSAGE\n         WTO   'MISSING TEXT STORAGE SIZE, ABENDING',ROUTCDE=11\n         ABEND 555,DUMP                TERMINATE IN ERROR\nGTSTOBTN STORAGE OBTAIN,LENGTH=(0),LOC=ANY GET TEXT STORAGE\n         ST    R1,TEXTADDR             SAVE THE GOTTEN ADDRESS\n         ST    R1,CURRTEXT             SET CURRENT TEXT ADDRESS\n         A     R1,TEXTENDA             SAVE THE ADDRESS OF THE\n         ST    R1,TEXTENDA                 END OF THE TEXT AREA\n         MVC   PRMREQST,=CL8'TEXT'     SHOW REQUEST IS FOR ESD DATA\nGTNEXT   BAS   R9,READLMOD             GO READ THE TEXT DATA\n         CLC   PRMCOUNT,ZERO           ANY DATA RETURNED?\n         BE    GTXIT                   NO\n         L     R11,PRMCOUNT            GET NUMBER BYTES IN BUFFER\n         L     R10,PRMBUFAD            POINT TO BUFFER HEADER\n         USING TXTHEADR,R10\n         LA    R10,TXTHEND             POINT TO FIRST TEXT BYTE\n         DROP  R10\n         L     R0,PRMCURSR             GET STARTING\n         S     R0,PRMCOUNT                 TEXT\n         A     R0,TEXTADDR                    ADDRESS\n         LR    R1,R11                  COPY TEXT LENGTH\n         MVCL  R0,R10                  MOVE TEXT\n         CLC   PRMRETCD,ZERO           ANY MORE TEXT?\n         BE    GTNEXT                  YES\nGTXIT    L     R9,GT9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nGT9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n*        CALL READLMOD TO OBTAIN DATA FROM THE LOAD MODULE          *\n*********************************************************************\nREADLMOD ST    R9,RL9                  SAVE RETURN ADDRESS\nRLCALL   CALL  READLMOD,PARMAREA       CALL READLMOD FOR REQUESTED DATA\n         CLI   PRMERROR,C' '           WAS THERE AN ERROR?\n         BE    RLXIT                   NO\n         MVC   PRTREQST,PRMREQST       MOVE REQUESTED DATA TYPE\n         MVC   PRTERROR,PRMERROR       AND THE ERROR CODE\nRLCURS   UNPK  PRTCURSR(9),PRMCURSR(5) CURSOR TO PRINT\n         TR    PRTCURSR,TRCHAR         MAKE IT PRINTABLE\n         MVI   PRTCURSR+8,C' '         CLEAR TRASH\n         UNPK  PRTRETCD(9),PRMRETCD(5) RETURN CODE TO PRINT\n         TR    PRTRETCD,TRCHAR         MAKE IT PRINTABLE\n         MVI   PRTRETCD+8,C' '         CLEAR TRASH\n         UNPK  PRTRSNCD(9),PRMRSNCD(5) REASON CODE TO PRINT\n         TR    PRTRSNCD,TRCHAR         MAKE IT PRINTABLE\n         MVI   PRTRSNCD+8,C' '         CLEAR TRASH\n         UNPK  PRTCOUNT(9),PRMCOUNT(5) COUNT TO PRINT\n         TR    PRTCOUNT,TRCHAR         MAKE IT PRINTABLE\n         MVI   PRTCOUNT+8,C' '         CLEAR TRASH\n         MVC   PRT(80),PRTRETRN        DATA LINE\n         BAS   R9,PRINT                PRINT THE LINE\n         WTO   'RESOURCE FOUND ERROR RETURNED BY READLMOD CALL',       X\n               ROUTCDE=11\n         ABEND 111,DUMP                TERMINATE IN ERROR\nRLXIT    L     R9,RL9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nRL9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n*             PRINT SUBROUTINE                                      *\n*********************************************************************\nPRINT    PUT   SYSPRINT,PRTLINE        WRITE PRINT LINE\n         MVC   PRTLINE,BLANKS          CLEAR PRINT LINE\n         BR    R9                      RETURN\n*********************************************************************\n* ADD AN ENTRY TO THE LABEL TABLE. THE NEW ENTRY HAS BEEN PLACED    *\n* IN THE NEXT AVAILABLE TABLE SLOT THAT IS POINTED TO BY CURRLABL.  *\n* THE NEW ENTRY IS INSERTED INTO THE TABLE IN ADDRESS-TYPE ORDER.   *\n*********************************************************************\nADDLABEL ST    R9,AL9                  SAVE RETURN ADDRESS\n         L     R1,LBLTBADR             POINT TO FIRST TABLE ENTRY\n         USING LBLDSECT,R1\n         L     R2,CURRLABL             POINT TO NEW ENTRY\nALCHKEND CR    R1,R2                   PRESENTLY AT NEW ENTRY?\n         BNL   ALADVANC                YES\n         CLC   0(5,R2),LBLENTRY        AT INSERTION POINT?\n         BL    ALINSRT                 YES\n         LA    R1,L'LBLENTRY(R1)       NO, ADVANCE TO NEXT ENTRY\n         B     ALCHKEND                LOOP TO FIND INSERTION POINT\nALINSRT  MVC   HOLDLABL,LBLENTRY       HOLD PRESENT ENTRY\n         MVC   LBLENTRY,0(R2)          MOVE IN NEW ENTRY\n         MVC   0(L'LBLENTRY,R2),HOLDLABL PREVIOUS ENTRY TO END\n         LA    R1,L'LBLENTRY(R1)       STEP TO NEXT ENTRY\n         CR    R1,R2                   PRESENTLY AT LAST ENTRY?\n         BL    ALINSRT                 NO, CONTINUE INSERTION LOOP\nALADVANC LA    R2,L'LBLENTRY(R2)       STEP TO NEXT AVAILABLE SLOT\n         ST    R2,CURRLABL             SAVE UPDATED TABLE ADDRESS\n         C     R2,LBLTBEND             PAST END OF TABLE?\n         BL    ALXIT                   NO\n         MVC   PRT(37),=CL37'LABEL TABLE OF 32,768 ENTRIES IS FULL'\n         BAS   R9,PRINT                PRINT ERROR MESSAGE\n         WTO   'LABEL TABLE OVERFLOW, ABENDING',ROUTCDE=11\n         ABEND 666,DUMP                TERMINATE IN ERROR\nALXIT    L     R9,AL9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\n         DROP  R1\nAL9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n*        TESTPRNT PRINTS THE LABEL TABLE AND TEXT AREAS AT END OF   *\n*        JOB FOR TESTING.                                           *\n*********************************************************************\nTESTPRNT ST    R9,TP9                  SAVE RETURN ADDRESS\n         MVC   PRT(8),=CL8'LBLOFSET'\n         MVC   PRT+9(4),=CL4'TYPE'\n         MVC   PRT+14(4),=CL4'UREG'\n         MVC   PRT+19(4),=CL4'LENG'\n         MVC   PRT+24(8),=CL8'LABEL'\n         BAS   R9,PRINT\n         L     R12,LBLTBADR            POINT TO LABEL TABLE\n         USING LBLDSECT,R12\nTPNEXTLB UNPK  PRT(9),LBLOFSET(5)\n         MVI   PRT+8,C' '\n         TR    PRT(8),TRCHAR\n         UNPK  PRT+10(3),LBLTYPE(2)\n         MVI   PRT+12,C' '\n         TR    PRT+10(2),TRCHAR\n         UNPK  PRT+15(3),LBLUREG(2)\n         MVI   PRT+17,C' '\n         TR    PRT+15(3),TRCHAR\n         UNPK  PRT+19(5),LBLRLDLN(3)\n         MVI   PRT+23,C' '\n         CLI   LBLTYPE,X'10'\n         BNE   TPLBL\n         UNPK  PRT+24(7),LBLINITU+1(4)\n         MVI   PRT+30,C' '\n         TR    PRT+24(6),TRCHAR\n         B     TPDESCR\nTPLBL    MVC   PRT+24(8),LBLLABEL\nTPDESCR  CLI   LBLTYPE,X'0C'\n         BNE   TPDESC2\n         MVC   PRT+36(4),=CL4'DROP'\n         MVI   PRT+42,C'R'\n         MVC   PRT+43(1),LBLUREG\n         OI    PRT+43,X'F0'\n         CLI   LBLUREG,X'0A'\n         BL    TPPRINT\n         MVI   PRT+43,C'1'\n         IC    R1,LBLUREG\n         LA    R1,6(R1)\n         STC   R1,PRT+44\n         OI    PRT+44,X'F0'\n         B     TPPRINT\nTPDESC2  CLI   LBLTYPE,X'10'\n         BNE   TPDESC3\n         MVC   PRT+36(5),=CL5'USING'\n         MVC   PRT+42(6),PRT+24\n         MVI   PRT+48,C','\n         MVI   PRT+49,C'R'\n         MVC   PRT+50(1),LBLUREG\n         OI    PRT+50,X'F0'\n         CLI   LBLUREG,X'0A'\n         BL    TPPRINT\n         MVI   PRT+50,C'1'\n         IC    R1,LBLUREG\n         LA    R1,6(R1)\n         STC   R1,PRT+51\n         OI    PRT+51,X'F0'\n         B     TPPRINT\nTPDESC3  CLI   LBLTYPE,X'18'\n         BNE   TPDESC4\n         MVC   PRT+36(10),=CL10'DATA START'\n         B     TPPRINT\nTPDESC4  CLI   LBLTYPE,X'1C'\n         BNE   TPDESC5\n         MVC   PRT+36(8),=CL8'DATA END'\n         B     TPPRINT\nTPDESC5  CLI   LBLTYPE,X'30'\n         BNE   TPDESC6\n         MVC   PRT+36(5),=CL5'LABEL'\n         B     TPPRINT\nTPDESC6  CLI   LBLTYPE,X'40'\n         BNE   TPDESC7\n         MVC   PRT+36(5),=CL5'ADCON'\n         B     TPPRINT\nTPDESC7  CLI   LBLTYPE,X'50'\n         BNE   TPPRINT\n         MVC   PRT+36(5),=CL5'V-CON'\n         B     TPPRINT\nTPPRINT  BAS   R9,PRINT\n         LA    R12,L'LBLENTRY(R12)\n         C     R12,CURRLABL\n         BL    TPNEXTLB\n         BAS   R9,PRINT\n         UNPK  PRT(9),TEXTLENG(5)\n         MVI   PRT+8,C' '\n         TR    PRT(8),TRCHAR\n         MVC   PRT+9(22),=CL22' BYTES OF TEXT FOLLOW:'\n         BAS   R9,PRINT\n         L     R12,TEXTADDR            POINT TO TEXT AREA START\nTPNEXTT  UNPK  PRT(9),TPOFF(5)\n         MVI   PRT+8,C' '\n         TR    PRT(8),TRCHAR\n         UNPK  PRT+9(9),0(5,R12)\n         MVI   PRT+17,C' '\n         UNPK  PRT+18(9),4(5,R12)\n         MVI   PRT+26,C' '\n         UNPK  PRT+27(9),8(5,R12)\n         MVI   PRT+35,C' '\n         UNPK  PRT+36(9),12(5,R12)\n         MVI   PRT+44,C' '\n         UNPK  PRT+46(9),16(5,R12)\n         MVI   PRT+54,C' '\n         UNPK  PRT+55(9),20(5,R12)\n         MVI   PRT+63,C' '\n         UNPK  PRT+64(9),24(5,R12)\n         MVI   PRT+72,C' '\n         UNPK  PRT+73(9),28(5,R12)\n         MVI   PRT+81,C' '\n         TR    PRT+9(74),TRCHAR\n         MVC   PRT+83(32),0(R12)\n         BAS   R9,PRINT\n         L     R1,TPOFF\n         LA    R1,32(R1)\n         ST    R1,TPOFF\n         LA    R12,32(R12)\n         C     R12,TEXTENDA\n         BL    TPNEXTT\nTPXIT    L     R9,TP9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nTP9      DC    A(0)                    RETURN ADDRESS\nTPOFF    DC    A(0)                    TEXT OFFSET\n*********************************************************************\n*        STORAGE AND FILE AREAS                                     *\n*********************************************************************\nDBLWD    DS    D                       DOUBLEWORD WORK AREA\nXZROS    DC    16X'00'                 CONSTAND HEX ZEROES\nREBLDEP  DC    A(0)                    E.P. ADDRESS FOR REBUILD\nWORKSAVE DS    3F                      SAVE AREA FOR WORK REGS 10-12\nZERO     DC    F'0'                    CONSTANT ZEROS\nRETCODE  DC    F'0'                    RETURN CODE\nH0       DC    H'0'                    CONSTANT 0\nH5       DC    H'5'                    CONSTANT 5\nH11      DC    H'11'                   CONSTANT 11\nH8       DC    H'8'                    CONSTANT 8\nH32      DC    H'32'                   CONSTANT 32\nRESIDENT DC    CL8' '                  RLD RESIDENT CSECT NAME\nSYMBPTS2 DC    CL8' '                  RLD SYMBOL POINTED TO\nESDSYMB  DC    CL8' '                  ESD SYMBOL NAME\nESDOWNER DC    CL8' '                  ESD OWNING CSECT NAME\nUNWANTED DC    XL1'60'                 40=NO FLTPT, 20=NO PRIV INST\nSUPVR    DC    CL5'SUPVR'              LITERAL CONSTANT\nFLTPT    DC    CL5'FLTPT'              LITERAL CONSTANT\nBLANKS   DC    CL133' '                BLANKS\nMORECNTL DC    CL1'Y'                  N=NO MORE CONTROL RECORDS\nGOTMCREC DC    CL1'N'                  Y=MEMBER/CSECT RECORD PROCESSED\nHOLDLABL DS    CL16                    HOLD AREA FOR LABEL ENTRY SORTS\nHOLDINIU DS    XL4,XL1                 HOLD INITIAL USING REG VALUE\nHOLDSTRT DS    XL4                     WORK FIELD\nHOLDREG  DS    XL1                     WORK FIELD\nSTAGE    DC    XL1'1'                  STAGE NUMBER FOR REBUILD\nHEXFFS   DC    X'FFFFFFFF'             HEX FF'S\nWORK1    DC    C' '                    WORK FIELD\n*\nREBLDPRM DS    0A                      REBUILD PARAMETER LIST\n         DC    A(STAGE)                   STAGE INDICATOR POINTER\n         DC    A(CURRCSCT)                CSECT NAME POINTER\nLBLTBADR DC    A(0)                       LABEL TABLE STARTING ADDRESS\nCURRLABL DC    A(0)                    ADDRESS OF CURRENT LABEL ENTRY\nLBLTBEND DC    A(32768*L'LBLENTRY)        SIZE OF 32,768 ENTRIES\nTEXTADDR DC    A(0)                       ADDRESS OF CSECT TEXT\nTEXTENDA DC    A(0)                       ADDRESS OF LAST BYTE OF TEXT\nTEXTLENG DC    A(0)                       TOTAL TEXT LENGTH\nTBLTBLAD DC    A(OPCODTBL)                OP-CODE TABLE POINTER\nPRNTDCBA DC    A(SYSPRINT)                SYSPRINT DCB ADDRESS\nOUTDCBA  DC    A(SYSOUT)                  SYSOUT DCB ADDRESS\n*\nTABLTABL DS    0A                      TABLE OF OP-CODE TABLE ADDRESSES\n         DC    A(OCTWO01)                  01XX OP-CODE TABLE\n         DC    A(OCTWOA7)                  A7X OP-CODE TABLE\n         DC    A(OCTWOB2)                  B2XX OP-CODE TABLE\n         DC    A(OCTWOB3)                  B3XX OP-CODE TABLE\n         DC    A(OCTWOE5)                  E5XX OP-CODE TABLE\n         DC    A(OCTWOED)                  EDXX OP-CODE TABLE\n         DC    XL4'FFFFFFFF'              END OF TABLE ENTRY\n*\nISINST   DC    X'00'                   01=TEXT MAY BE AN INSTRUCTION\nINSTFLAG DS    XL1                     INSTRUCTION FLAGS\nINSTMNEM DS    XL5                     INSTRUCTION MNEMONIC\nINSTLENG DS    XL1                     INSTRUCTION LENGTH\nINSTFMT  DS    XL1                     INSTRUCTION LENGTH\nINSTTEXT DS    XL6                     INSTRUCTION TEXT\n*\nCURRINFO DS    0F                      CURRENT PROCESSING INFO\nCURRMEMB DC    CL8' '                     MEMBER NAME\nCURRCSCT DC    CL8' '                     CSECT NAME\nCURRTEXT DC    A(0)                    ADDRESS OF CURRENT TEXT BYTE\nCURRAMOD DS    XL1                        REQUESTED CSECT AMODE\nCURRRMOD DS    XL1                        REQUESTED CSECT RMODE\nCURREND  EQU   *\n*\nPRTLINE  DS    0CL133                  PRINT LINE\nPRTCC    DC    CL1'1'                     CARRIAGE CONTROL BYYTE\nPRT      DC    CL132' '                   PRINT DATA LINE\n*\nPRTRETRN DS    0CL80                   PRINT READLMOD RETURNED DATA\n         DC    CL5' REQ='\nPRTREQST DS    CL5                        REQUESTED DATA TYPE\nPRTRERR  DC    CL5' ERR='\nPRTERROR DS    CL1                        ERROR INDICATOR\n         DC    CL8' CURSOR='\nPRTCURSR DS    CL8                        IEWBIND CURSOR\n         DC    CL8' RETCOD='\nPRTRETCD DS    CL8                        IEWBIND RETURN CODE\n         DC    CL8' RSNCOD='\nPRTRSNCD DS    CL8                        IEWBIND REASON CODE\n         DC    CL7' COUNT='\nPRTCOUNT DS    CL8                        IEWBIND COUNT\n         DC    CL1' '\n*\nCNTLCARD DS    0CL80              CONTROL STATEMENT\nCCMEMBER DS    CL8                   MEMBER NAME\n         DS    CL1\nCCCSECT  DS    CL8                   CSECT NAME\n         DS    CL63\n*\nTRCHAR   DC    256C' '            TRANSLATE HEX TO PRINTABLE CHARS\n         ORG   TRCHAR+C'0'\n         DC    C'0123456789ABCDEF'\n         ORG\n*\nCHECKHEX DC    256X'FF'           TRT TABLE TO CHECK FOR VALID HEX\n         ORG   CHECKHEX+C'A'\n         DC    6X'00'\n         ORG   CHECKHEX+C'0'\n         DC    10X'00'\n         ORG\n*\nCHECKZON DC    256X'FF'           TRT TABLE TO CHECK FOR ZONED DECIMAL\n         ORG   CHECKZON+C'0'\n         DC    10X'00'\n         ORG\n*\nCHECKLBL DC    256X'FF'           TRT TABLE TO CHECK LABEL CHARS\n         ORG   CHECKLBL+C'@'\n         DC    X'00'\n         ORG   CHECKLBL+C'$'\n         DC    X'00'\n         ORG   CHECKLBL+C'#'\n         DC    X'00'\n         ORG   CHECKLBL+C' '\n         DC    X'00'\n         ORG   CHECKLBL+C'A'\n         DC    9X'00'\n         ORG   CHECKLBL+C'J'\n         DC    9X'00'\n         ORG   CHECKLBL+C'S'\n         DC    8X'00'\n         ORG   CHECKLBL+C'0'\n         DC    10X'00'\n         ORG\n*\nTRHEX    DC    256C' '                 TRANSLATE TO MAKE REAL HEX\n         ORG   TRHEX+C'A'\n         DC    X'FAFBFCFDFEFF'\n         ORG   TRHEX+C'0'\n         DC    C'0123456789'\n         ORG\n***********************************************************************\n*TABLES OF INSTRUCTION OP-CODES. THE FIRST TABLE CONTAINS 256 ENTRIES,*\n*ONE FOR EACH POSSIBLE SINGLE-BYTE OP-CODE. FOLLOWING TABLES ARE FOR  *\n*THE INSTRUCTIONS HAVING MORE THAN A ONE-BYTE OP-CODE. EACH TABLE     *\n*ENTRY IS 10 BYTES LONG AAND CONTAINS:                                *\n*  BYTE  0   OP-CODE FIRST OR ONLY BYTE                               *\n*  BYTE  1   FOR 1.5 AND 2 BYTE OPCODES, THE SECOND OP-CODE BYTE      *\n*  BYTES 2-6 INSTRUCTION MNEMONIC FOR SINGLE-BYTE OP-CODES            *\n*  BYTE  2   '2' FOR 1.5 AND 2 BYTE OP-CODE INSTRUCTIONS              *\n*  BYTES 3-6 ADDRESS OF THE 1.5 OR 2 BYTE OP-CODE TABLE TO USE        *\n*  BYTE  7   INSTRUCTION FORMAT IDENTIFIER. THIS IDENTIFIES THE MEMORY*\n*            FORMAT AND CODING SYNTAX FOR THE INSTRUCTION (SEE THE EQU*\n*            INSTRUCTIONS FOR THE FORMAT NAMES)                       *\n*  BYTE  8   FLAGS: X'40'=FLOATING POINT INSTRUCTION, X'20'=PRIVILEGED*\n*  BYTE  9   IF THE INSTRUCTION SETS THE CONDITION CODE, THIS BYTE    *\n*            WILL CONTAIN THE NUMBER OF THE CONDITION CODE TABLE ENTRY*\n*            TO BE USED FOR FOLLOWING CONDITIONAL BRANCHES.           *\n*  BYTE 10   FLAG BYTE 1: X'80'=ODD TEST REQUIRED                     *\n*                         X'01'=R2 MUST BE 0,1,4,5,8,9,12, OR 13      *\n*  BYTE 11   FLAG BYTE 2: X'80'=R1 MUST BE 0,1,4,5,8,9,12, OR 13      *\n*                         X'40'=M3 MUST BE 0,1,4,5,6, OR 7            *\n*                         X'20'=INSTRUCTION BITS 16-25 MUST BE 0'S    *\n*                         X'10'=R1 MUST NOT EQUAL R2                  *\n*                         X'08'=R3 MUST BE AN EVEN NUMBERED REGISTER  *\n*                         X'04'=R2 MUST BE AN EVEN NUMBERED REGISTER  *\n*                         X'02'=R1 MUST BE AN EVEN NUMBERED REGISTER  *\n*                         X'01'=IF R2=0, OUTPUT 0, NOT R0             *\n***********************************************************************\n         DS    0F\nOPCODTBL DS    0XL12\n         DC    XL2'0000',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'0100',CL1'2',AL4(OCTWO01),XL5'0000000000'\n         DC    XL2'0200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'0300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'0400',CL5'SPM',AL1(RR3),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'0500',CL5'BALR',AL1(RR1),AL1(0),AL1(0),XL2'0001'\n         DC    XL2'0600',CL5'BCTR',AL1(RR1),AL1(0),AL1(0),XL2'0001'\n         DC    XL2'0700',CL5'BCR',AL1(RR4),AL1(0),AL1(0),XL2'0001'\n         DC    XL2'0800',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'0900',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'0A00',CL5'SVC',AL1(RR2),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'0B00',CL5'BSM',AL1(RR1),AL1(0),AL1(0),XL2'0001'\n         DC    XL2'0C00',CL5'BASSM',AL1(RR1),AL1(0),AL1(0),XL2'0001'\n         DC    XL2'0D00',CL5'BASR',AL1(RR1),AL1(0),AL1(0),XL2'0001'\n         DC    XL2'0E00',CL5'MVCL',AL1(RR1),AL1(0),AL1(1),XL2'0006'\n         DC    XL2'0F00',CL5'CLCL',AL1(RR1),AL1(0),AL1(2),XL2'0016'\n         DC    XL2'1000',CL5'LPR',AL1(RR1),AL1(0),AL1(6),XL2'0000'\n         DC    XL2'1100',CL5'LNR',AL1(RR1),AL1(0),AL1(7),XL2'0000'\n         DC    XL2'1200',CL5'LTR',AL1(RR1),AL1(0),AL1(8),XL2'0000'\n         DC    XL2'1300',CL5'LCR',AL1(RR1),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'1400',CL5'NR',AL1(RR1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'1500',CL5'CLR',AL1(RR1),AL1(0),AL1(2),XL2'0000'\n         DC    XL2'1600',CL5'OR',AL1(RR1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'1700',CL5'XR',AL1(RR1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'1800',CL5'LR',AL1(RR1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'1900',CL5'CR',AL1(RR1),AL1(0),AL1(2),XL2'0000'\n         DC    XL2'1A00',CL5'AR',AL1(RR1),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'1B00',CL5'SR',AL1(RR1),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'1C00',CL5'MR',AL1(RR1),AL1(0),AL1(0),XL2'0002'\n         DC    XL2'1D00',CL5'DR',AL1(RR1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'1E00',CL5'ALR',AL1(RR1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'1F00',CL5'SLR',AL1(RR1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'2000',CL5'LPDR',AL1(RR1),AL1(FP),AL1(10),XL2'0000'\n         DC    XL2'2100',CL5'LNDR',AL1(RR1),AL1(FP),AL1(7),XL2'0000'\n         DC    XL2'2200',CL5'LTDR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'2300',CL5'LCDR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'2400',CL5'HDR',AL1(RR1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'2500',CL5'LDXR',AL1(RR1),AL1(FP),AL1(0),XL2'0100'\n         DC    XL2'2600',CL5'MXR',AL1(RR1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'2700',CL5'MXDR',AL1(RR1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'2800',CL5'LDR',AL1(RR1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'2900',CL5'CDR',AL1(RR1),AL1(FP),AL1(2),XL2'0000'\n         DC    XL2'2A00',CL5'ADR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'2B00',CL5'SDR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'2C00',CL5'MDR',AL1(RR1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'2D00',CL5'DDR',AL1(RR1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'2E00',CL5'AWR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'2F00',CL5'SWR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'3000',CL5'LPER',AL1(RR1),AL1(FP),AL1(10),XL2'0000'\n         DC    XL2'3100',CL5'LNER',AL1(RR1),AL1(FP),AL1(7),XL2'0000'\n         DC    XL2'3200',CL5'LTER',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'3300',CL5'LCER',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'3400',CL5'HER',AL1(RR1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'3500',CL5'LEDR',AL1(RR1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'3600',CL5'AXR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'3700',CL5'SXR',AL1(RR1),AL1(FP),AL1(8),XL2'0180'\n         DC    XL2'3800',CL5'LER',AL1(RR1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'3900',CL5'CER',AL1(RR1),AL1(FP),AL1(2),XL2'0000'\n         DC    XL2'3A00',CL5'AER',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'3B00',CL5'SER',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'3C00',CL5'MDER',AL1(RR1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'3D00',CL5'DER',AL1(RR1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'3E00',CL5'AUR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'3F00',CL5'SUR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'4000',CL5'STH',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4100',CL5'LA',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4200',CL5'STC',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4300',CL5'IC',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4400',CL5'EX',AL1(RX1),AL1(0),AL1(0),XL2'8000'\n         DC    XL2'4500',CL5'BAL',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4600',CL5'BCT',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4700',CL5'BC',AL1(RX2),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4800',CL5'LH',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4900',CL5'CH',AL1(RX1),AL1(0),AL1(2),XL2'0000'\n         DC    XL2'4A00',CL5'AH',AL1(RX1),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'4B00',CL5'SH',AL1(RX1),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'4C00',CL5'MH',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4D00',CL5'BAS',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4E00',CL5'CVD',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4F00',CL5'CVB',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'5000',CL5'ST',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'5100',CL5'LAE',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'5200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'5300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'5400',CL5'N',AL1(RX1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'5500',CL5'CL',AL1(RX1),AL1(0),AL1(2),XL2'0000'\n         DC    XL2'5600',CL5'O',AL1(RX1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'5700',CL5'X',AL1(RX1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'5800',CL5'L',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'5900',CL5'C',AL1(RX1),AL1(0),AL1(2),XL2'0000'\n         DC    XL2'5A00',CL5'A',AL1(RX1),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'5B00',CL5'S',AL1(RX1),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'5C00',CL5'M',AL1(RX1),AL1(0),AL1(0),XL2'0002'\n         DC    XL2'5D00',CL5'D',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'5E00',CL5'AL',AL1(RX1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'5F00',CL5'SL',AL1(RX1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'6000',CL5'STD',AL1(RX1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'6100',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'6200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'6300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'6400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'6500',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'6600',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'6700',CL5'MXD',AL1(RX1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'6800',CL5'LD',AL1(RX1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'6900',CL5'CD',AL1(RX1),AL1(FP),AL1(2),XL2'0000'\n         DC    XL2'6A00',CL5'AD',AL1(RX1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'6B00',CL5'SD',AL1(RX1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'6C00',CL5'MD',AL1(RX1),AL1(FP),AL1(0),XL2'0180'\n         DC    XL2'6D00',CL5'DD',AL1(RX1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'6E00',CL5'AW',AL1(RX1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'6F00',CL5'SW',AL1(RX1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'7000',CL5'STE',AL1(RX1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'7100',CL5'MS',AL1(RX1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'7200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'7300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'7400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'7500',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'7600',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'7700',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'7800',CL5'LE',AL1(RX1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'7900',CL5'CE',AL1(RX1),AL1(FP),AL1(2),XL2'0000'\n         DC    XL2'7A00',CL5'AE',AL1(RX1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'7B00',CL5'SE',AL1(RX1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'7C00',CL5'MDE',AL1(RX1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'7D00',CL5'DE',AL1(RX1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'7E00',CL5'AU',AL1(RX1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'7F00',CL5'SU',AL1(RX1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'8000',CL5'SSM',AL1(S1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'8100',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'8200',CL5'LPSW',AL1(S1),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'8300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'8400',CL5'BRXH',AL1(RSI1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'8500',CL5'BRXLE',AL1(RSI1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'8600',CL5'BXH',AL1(RS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'8700',CL5'BXLE',AL1(RS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'8800',CL5'SRL',AL1(RS2),AL1(0),AL1(0),XL2'0020'\n         DC    XL2'8900',CL5'SLL',AL1(RS2),AL1(0),AL1(0),XL2'0020'\n         DC    XL2'8A00',CL5'SRA',AL1(RS2),AL1(0),AL1(8),XL2'0020'\n         DC    XL2'8B00',CL5'SLA',AL1(RS2),AL1(0),AL1(9),XL2'0020'\n         DC    XL2'8C00',CL5'SRDL',AL1(RS2),AL1(0),AL1(0),XL2'0022'\n         DC    XL2'8D00',CL5'SLDL',AL1(RS2),AL1(0),AL1(0),XL2'0022'\n         DC    XL2'8E00',CL5'SRDA',AL1(RS2),AL1(0),AL1(8),XL2'0022'\n         DC    XL2'8F00',CL5'SLDA',AL1(RS2),AL1(0),AL1(9),XL2'0022'\n         DC    XL2'9000',CL5'STM',AL1(RS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'9100',CL5'TM',AL1(SI1),AL1(0),AL1(11),XL2'0000'\n         DC    XL2'9200',CL5'MVI',AL1(SI1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'9300',CL5'TS',AL1(S1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'9400',CL5'NI',AL1(SI1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'9500',CL5'CLI',AL1(SI1),AL1(0),AL1(2),XL2'0000'\n         DC    XL2'9600',CL5'OI',AL1(SI1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'9700',CL5'XI',AL1(SI1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'9800',CL5'LM',AL1(RS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'9900',CL5'TRACE',AL1(RS1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'9A00',CL5'LAM',AL1(RS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'9B00',CL5'STAM',AL1(RS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'9C00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'9D00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'9E00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'9F00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A000',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A100',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A500',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A600',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A700',CL1'2',AL4(OCTWOA7),XL5'0000000000'\n         DC    XL2'A800',CL5'MVCLE',AL1(RS1),AL1(0),AL1(1),XL2'800A'\n         DC    XL2'A900',CL5'CLCLE',AL1(RS1),AL1(0),AL1(13),XL2'800A'\n         DC    XL2'AA00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'AB00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'AC00',CL5'STNSM',AL1(SI1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'AD00',CL5'STOSM',AL1(SI1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'AE00',CL5'SIGP',AL1(RS1),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'AF00',CL5'MC',AL1(SI1),AL1(0),AL1(0),XL2'8000'\n         DC    XL2'B000',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B100',CL5'LRA',AL1(RX1),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B200',CL1'2',AL4(OCTWOB2),XL5'0000000000'\n         DC    XL2'B300',CL1'2',AL4(OCTWOB3),XL5'0000000000'\n         DC    XL2'B400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B500',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B600',CL5'STCTL',AL1(RS1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B700',CL5'LCTL',AL1(RS1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B800',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B900',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'BA00',CL5'CS',AL1(RS1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'BB00',CL5'CDS',AL1(RS1),AL1(0),AL1(1),XL2'000A'\n         DC    XL2'BC00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'BD00',CL5'CLM',AL1(RS2),AL1(0),AL1(2),XL2'0000'\n         DC    XL2'BE00',CL5'STCM',AL1(RS3),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'BF00',CL5'ICM',AL1(RS3),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'C000',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'C100',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'C200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'C300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'C400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'C500',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'C600',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'C700',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'C800',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'C900',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'CA00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'CB00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'CC00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'CD00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'CE00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'CF00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'D000',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'D100',CL5'MVN',AL1(SS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'D200',CL5'MVC',AL1(SS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'D300',CL5'MVZ',AL1(SS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'D400',CL5'NC',AL1(SS1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'D500',CL5'CLC',AL1(SS1),AL1(0),AL1(2),XL2'0000'\n         DC    XL2'D600',CL5'OC',AL1(SS1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'D700',CL5'XC',AL1(SS1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'D800',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'D900',CL5'MVCK',AL1(SS4),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'DA00',CL5'MVCP',AL1(SS4),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'DB00',CL5'MVCS',AL1(SS4),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'DC00',CL5'TR',AL1(SS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'DD00',CL5'TRT',AL1(SS1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'DE00',CL5'ED',AL1(SS1),AL1(0),AL1(8),XL2'0000'\n         DC    XL2'DF00',CL5'EDMK',AL1(SS1),AL1(0),AL1(8),XL2'0000'\n         DC    XL2'E000',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'E100',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'E200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'E300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'E400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'E500',CL1'2',AL4(OCTWOE5),XL5'0000000000'\n         DC    XL2'E600',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'E700',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'E800',CL5'MVCIN',AL1(SS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'E900',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'EA00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'EB00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'EC00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'ED00',CL1'2',AL4(OCTWOED),XL5'0000000000'\n         DC    XL2'EE00',CL5'PLO',AL1(SS3),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'EF00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'F000',CL5'SRP',AL1(SS5),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'F100',CL5'MVO',AL1(SS2),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'F200',CL5'PACK',AL1(SS2),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'F300',CL5'UNPK',AL1(SS2),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'F400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'F500',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'F600',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'F700',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'F800',CL5'ZAP',AL1(SS2),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'F900',CL5'CP',AL1(SS2),AL1(0),AL1(2),XL2'0000'\n         DC    XL2'FA00',CL5'AP',AL1(SS2),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'FB00',CL5'SP',AL1(SS2),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'FC00',CL5'MP',AL1(SS2),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'FD00',CL5'DP',AL1(SS2),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'FE00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'FF00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    12X'FF'              END OF TABLE\n***********************************************************************\n*TABLES OF TWO-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS 01               *\n***********************************************************************\n         DS    0F\nOCTWO01  DS    0XL12\n         DC    XL2'0101',CL5'PR',AL1(E1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'0102',CL5'UPT',AL1(E1),AL1(0),AL1(4),XL2'0000'\n         DC    XL2'0107',CL5'SCKPF',AL1(E1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'01FF',CL5'TRAP2',AL1(E1),AL1(0),AL1(0),XL2'0000'\n         DC    12X'FF'              END OF TABLE\n***********************************************************************\n*TABLES OF 1.5-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS A7               *\n***********************************************************************\n         DS    0F\nOCTWOA7  DS    0XL12\n         DC    XL2'A700',CL5'TMH',AL1(RI1),AL1(0),AL1(12),XL2'0000'\n         DC    XL2'A710',CL5'TML',AL1(RI1),AL1(0),AL1(12),XL2'0000'\n         DC    XL2'A740',CL5'BRC',AL1(RI1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A750',CL5'BRAS',AL1(RI1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A760',CL5'BRCT',AL1(RI1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A780',CL5'LHI',AL1(RI1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A7A0',CL5'AHI',AL1(RI1),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'A7C0',CL5'MHI',AL1(RI1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A7E0',CL5'CHI',AL1(RI1),AL1(0),AL1(2),XL2'0000'\n         DC    12X'FF'              END OF TABLE\n***********************************************************************\n*TABLES OF TWO-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS B2               *\n***********************************************************************\n         DS    0F\nOCTWOB2  DS    0XL12\n         DC    XL2'B202',CL5'STIDP',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B204',CL5'SCK',AL1(S3),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B205',CL5'STCK',AL1(S3),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'B206',CL5'SCKC',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B207',CL5'STCKC',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B208',CL5'SPT',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B209',CL5'STPT',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B20A',CL5'SPKA',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B20B',CL5'IPK',AL1(S2),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B20D',CL5'PTLB',AL1(S2),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B210',CL5'SPX',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B211',CL5'STPX',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B212',CL5'STAP',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B218',CL5'PC',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B219',CL5'SAC',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B21A',CL5'CFC',AL1(S3),AL1(0),AL1(4),XL2'8000'\n         DC    XL2'B221',CL5'IPTE',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B222',CL5'IPM',AL1(RRE2),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B223',CL5'IVSK',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B224',CL5'IAC',AL1(RRE2),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B225',CL5'SSAR',AL1(RRE2),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B226',CL5'EPAR',AL1(RRE2),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B227',CL5'ESAR',AL1(RRE2),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B228',CL5'PT',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B229',CL5'ISKE',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B22A',CL5'RRBE',AL1(RRE1),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B22B',CL5'SSKE',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B22C',CL5'TB',AL1(RRE1),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B22D',CL5'DXR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'\n         DC    XL2'B230',CL5'CSCH',AL1(S2),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B231',CL5'HSCH',AL1(S2),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B232',CL5'MSCH',AL1(S3),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B233',CL5'SSCH',AL1(S3),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B234',CL5'STSCH',AL1(S3),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B235',CL5'TSCH',AL1(S3),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B236',CL5'TPI',AL1(S3),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B237',CL5'SAL',AL1(S2),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B238',CL5'RSCH',AL1(S2),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B239',CL5'STCRW',AL1(S3),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B23A',CL5'STCPS',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B23B',CL5'RCHP',AL1(S2),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B23C',CL5'SCHM',AL1(S2),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B240',CL5'BAKR',AL1(RRE1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B241',CL5'CKSM',AL1(RRE1),AL1(0),AL1(1),XL2'8014'\n         DC    XL2'B244',CL5'SQDR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B245',CL5'SQER',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B246',CL5'STURA',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B247',CL5'MSTA',AL1(RRE2),AL1(0),AL1(0),XL2'0002'\n         DC    XL2'B248',CL5'PALB',AL1(RRE3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B249',CL5'EREG',AL1(RRE1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B24A',CL5'ESTA',AL1(RRE1),AL1(0),AL1(1),XL2'0002'\n         DC    XL2'B24B',CL5'LURA',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B24C',CL5'TAR',AL1(RRE1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'B24D',CL5'CPYA',AL1(RRE1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B24E',CL5'SAR',AL1(RRE1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B24F',CL5'EAR',AL1(RRE1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B252',CL5'MSR',AL1(RRE1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B254',CL5'MVPG',AL1(RRE1),AL1(0),AL1(1),XL2'0010'\n         DC    XL2'B255',CL5'MVST',AL1(RRE1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'B257',CL5'CUSE',AL1(RRE1),AL1(0),AL1(4),XL2'0006'\n         DC    XL2'B258',CL5'BSG',AL1(RRE1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B25A',CL5'BSA',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B25D',CL5'CLST',AL1(RRE1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'B25E',CL5'SRST',AL1(RRE1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'B277',CL5'RP',AL1(S3),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B278',CL5'STCKE',AL1(S3),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'B279',CL5'SACF',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B27D',CL5'STSI',AL1(S3),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B299',CL5'SRNM',AL1(S3),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B29C',CL5'STFPC',AL1(S3),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B29D',CL5'LFPC',AL1(S3),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B2A5',CL5'TRE',AL1(RRE1),AL1(0),AL1(1),XL2'8012'\n         DC    XL2'B2A6',CL5'CUUTF',AL1(RRE1),AL1(0),AL1(1),XL2'0016'\n         DC    XL2'B2A7',CL5'CUTFU',AL1(RRE1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'B2FF',CL5'TRAP4',AL1(S3),AL1(0),AL1(0),XL2'0000'\n         DC    12X'FF'              END OF TABLE\n***********************************************************************\n*TABLES OF TWO-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS B3               *\n***********************************************************************\n         DS    0F\nOCTWOB3  DS    0XL12\n         DC    XL2'B300',CL5'LPEBR',AL1(RRE1),AL1(FP),AL1(10),XL2'0000'\n         DC    XL2'B301',CL5'LNEBR',AL1(RRE1),AL1(FP),AL1(7),XL2'0000'\n         DC    XL2'B302',CL5'LTEBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'B303',CL5'LCEBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'B304',CL5'LDEBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B305',CL5'LXDBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'B306',CL5'LXEBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'B307',CL5'MXDBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'B308',CL5'KEBR',AL1(RRE1),AL1(FP),AL1(13),XL2'0000'\n         DC    XL2'B309',CL5'CEBR',AL1(RRE1),AL1(FP),AL1(13),XL2'0000'\n         DC    XL2'B30A',CL5'AEBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'B30B',CL5'SEBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'B30C',CL5'MDEBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B30D',CL5'DEBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B30E',CL5'MAEBR',AL1(RRF1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B30F',CL5'MSEBR',AL1(RRF1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B310',CL5'LPDBR',AL1(RRE1),AL1(FP),AL1(10),XL2'0000'\n         DC    XL2'B311',CL5'LNDBR',AL1(RRE1),AL1(FP),AL1(7),XL2'0000'\n         DC    XL2'B312',CL5'LTDBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'B313',CL5'LCDBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'B314',CL5'SQEBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B315',CL5'SQDBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B316',CL5'SQXBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'\n         DC    XL2'B317',CL5'MEEBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B318',CL5'KDBR',AL1(RRE1),AL1(FP),AL1(13),XL2'0000'\n         DC    XL2'B319',CL5'CDBR',AL1(RRE1),AL1(FP),AL1(13),XL2'0000'\n         DC    XL2'B31A',CL5'ADBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'B31B',CL5'SDBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'B31C',CL5'MDBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B31D',CL5'DDBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B31E',CL5'MADBR',AL1(RRF1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B31F',CL5'MSDBR',AL1(RRF1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B324',CL5'LDER',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B325',CL5'LXDR',AL1(RRE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'B326',CL5'LXER',AL1(RRE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'B336',CL5'SQXR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'\n         DC    XL2'B337',CL5'MEER',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B340',CL5'LPXBR',AL1(RRE1),AL1(FP),AL1(10),XL2'0180'\n         DC    XL2'B341',CL5'LNXBR',AL1(RRE1),AL1(FP),AL1(7),XL2'0180'\n         DC    XL2'B342',CL5'LTXBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0180'\n         DC    XL2'B343',CL5'LCXBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0180'\n         DC    XL2'B344',CL5'LEDBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B345',CL5'LDXBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'\n         DC    XL2'B346',CL5'LEXBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'\n         DC    XL2'B347',CL5'FIXBR',AL1(RRF2),AL1(FP),AL1(0),XL2'01C0'\n         DC    XL2'B348',CL5'KXBR',AL1(RRE1),AL1(FP),AL1(13),XL2'0180'\n         DC    XL2'B349',CL5'CXBR',AL1(RRE1),AL1(FP),AL1(13),XL2'0180'\n         DC    XL2'B34A',CL5'AXBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0180'\n         DC    XL2'B34B',CL5'SXBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0180'\n         DC    XL2'B34C',CL5'MXBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'\n         DC    XL2'B34D',CL5'DXBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'\n         DC    XL2'B350',CL5'TBEDR',AL1(RRF2),AL1(FP),AL1(14),XL2'0040'\n         DC    XL2'B351',CL5'TBDR',AL1(RRF2),AL1(FP),AL1(14),XL2'0040'\n         DC    XL2'B353',CL5'DIEBR',AL1(RRF3),AL1(FP),AL1(1),XL2'8040'\n         DC    XL2'B357',CL5'FIEBR',AL1(RRF2),AL1(FP),AL1(0),XL2'0040'\n         DC    XL2'B358',CL5'THDER',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'B359',CL5'THDR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'B35B',CL5'DIDBR',AL1(RRF3),AL1(FP),AL1(1),XL2'8040'\n         DC    XL2'B35F',CL5'FIDBR',AL1(RRF2),AL1(FP),AL1(0),XL2'0040'\n         DC    XL2'B360',CL5'LPXR',AL1(RRE1),AL1(FP),AL1(10),XL2'0180'\n         DC    XL2'B361',CL5'LNXR',AL1(RRE1),AL1(FP),AL1(7),XL2'0180'\n         DC    XL2'B362',CL5'LTXR',AL1(RRE1),AL1(FP),AL1(8),XL2'0180'\n         DC    XL2'B363',CL5'LCXR',AL1(RRE1),AL1(FP),AL1(8),XL2'0180'\n         DC    XL2'B365',CL5'LXR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'\n         DC    XL2'B366',CL5'LEXR',AL1(RRE1),AL1(FP),AL1(0),XL2'0100'\n         DC    XL2'B367',CL5'FIXR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'\n         DC    XL2'B369',CL5'CXR',AL1(RRE1),AL1(FP),AL1(2),XL2'0180'\n         DC    XL2'B374',CL5'LZER',AL1(RRE2),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B375',CL5'LZDR',AL1(RRE2),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B376',CL5'LZXR',AL1(RRE2),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'B377',CL5'FIER',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B37F',CL5'FIDR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B384',CL5'SFPC',AL1(RRE2),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B38C',CL5'EFPC',AL1(RRE2),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B394',CL5'CEFBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B395',CL5'CDFBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B396',CL5'CXFBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'B398',CL5'CFEBR',AL1(RRF2),AL1(FP),AL1(14),XL2'0040'\n         DC    XL2'B399',CL5'CFDBR',AL1(RRF2),AL1(FP),AL1(14),XL2'0040'\n         DC    XL2'B39A',CL5'CFXBR',AL1(RRF2),AL1(FP),AL1(14),XL2'0100'\n         DC    XL2'B3B4',CL5'CEFR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B3B5',CL5'CDFR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B3B6',CL5'CXFR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B3B8',CL5'CFER',AL1(RRF2),AL1(FP),AL1(14),XL2'0040'\n         DC    XL2'B3B9',CL5'CFDR',AL1(RRF2),AL1(FP),AL1(14),XL2'0040'\n         DC    XL2'B3BA',CL5'CFXR',AL1(RRF2),AL1(FP),AL1(14),XL2'0140'\n         DC    12X'FF'              END OF TABLE\n***********************************************************************\n*TABLES OF TWO-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS E5               *\n***********************************************************************\n         DS    0F\nOCTWOE5  DS    0XL12\n         DC    XL2'E500',CL5'LASP',AL1(SSE1),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'E501',CL5'TPROT',AL1(SSE1),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'E50E',CL5'MVCSK',AL1(SSE1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'E50F',CL5'MVCDK',AL1(SSE1),AL1(PR),AL1(0),XL2'0000'\n         DC    12X'FF'              END OF TABLE\n***********************************************************************\n*TABLES OF TWO-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS ED               *\n***********************************************************************\n         DS    0F\nOCTWOED  DS    0XL12\n         DC    XL2'ED04',CL5'LDEB',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED05',CL5'LXDB',AL1(RXE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'ED06',CL5'LXEB',AL1(RXE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'ED07',CL5'MXDB',AL1(RXE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'ED08',CL5'KEB',AL1(RXE1),AL1(FP),AL1(13),XL2'0000'\n         DC    XL2'ED09',CL5'CEB',AL1(RXE1),AL1(FP),AL1(13),XL2'0000'\n         DC    XL2'ED0A',CL5'AEB',AL1(RXE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'ED0B',CL5'SEB',AL1(RXE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'ED0C',CL5'MDEB',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED0D',CL5'DEB',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED0E',CL5'MAEB',AL1(RXF1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED0F',CL5'MSEB',AL1(RXF1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED10',CL5'TCEB',AL1(RXE1),AL1(FP),AL1(1),XL2'0000'\n         DC    XL2'ED11',CL5'TCDB',AL1(RXE1),AL1(FP),AL1(1),XL2'0000'\n         DC    XL2'ED12',CL5'TCXB',AL1(RXE1),AL1(FP),AL1(1),XL2'0080'\n         DC    XL2'ED14',CL5'SQEB',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED15',CL5'SQDB',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED17',CL5'MEEB',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED18',CL5'KDB',AL1(RXE1),AL1(FP),AL1(13),XL2'0000'\n         DC    XL2'ED19',CL5'CDB',AL1(RXE1),AL1(FP),AL1(13),XL2'0000'\n         DC    XL2'ED1A',CL5'ADB',AL1(RXE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'ED1B',CL5'SDB',AL1(RXE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'ED1C',CL5'MDB',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED1D',CL5'DDB',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED1E',CL5'MADB',AL1(RXF1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED1F',CL5'MSDB',AL1(RXF1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED24',CL5'LDE',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED25',CL5'LXD',AL1(RXE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'ED26',CL5'LXE',AL1(RXE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'ED34',CL5'SQE',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED35',CL5'SQD',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED37',CL5'MEE',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    12X'FF'              END OF TABLE\n*\n***********************************************************************\n*     ***** CONDITION CODE TABLE ENTRIES FOR THE CC COLUMN *****      *\n* IN THE TABLE, NON-NUMERIC ENTRIES GIVE THE INSTRUCTION MNEMONIC TO  *\n* BE USED WHEN THE MASK IN THE INSTRUCTION MATCHES THE COLUMN NUMBER. *\n* WHEN THE ENTRY IS NUMERIC, IT IS THE CONDITION TO BE USED, AND THE  *\n* MNEMONIC WILL BE BC OR BCR.                                         *\n***********************************************************************\n*            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F           *\n***********************************************************************\nCC01 DC CL48'NOP1  2  3  4  5  6  7  8  9  10 11 12 13 14 B  '\nCC02 DC CL48'NOP1  BH 3  BL 5  6  BNEBE 9  10 BNL12 BNH14 B  '\nCC03 DC CL48'NOP1  2  3  4  5  6  BNZBZ 9  10 11 12 13 14 B  '\nCC04 DC CL48'NOP1  2  3  4  5  6  BNEBE 9  10 11 12 13 14 B  '\nCC05 DC CL48'NOP1  BH 3  BL 5  6  BNEBE 9  10 BNL12 13 14 B  '\nCC06 DC CL48'NOPBO BP 3  4  5  6  BNZBZ 9  10 11 12 13 14 B  '\nCC07 DC CL48'NOP1  2  3  BM 5  6  BNZBZ 9  10 11 12 13 14 B  '\nCC08 DC CL48'NOP1  BP 3  BM 5  6  BNZBZ 9  10 BNM12 BNP14 B  '\nCC09 DC CL48'NOPBO BP 3  BM 5  6  BNZBZ 9  10 BNM12 BNPBNOB  '\nCC0A DC CL48'NOP1  BP 3  4  5  6  BNZBZ 9  10 11 12 13 14 B  '\nCC0B DC CL48'NOPBO 2  3  BM 5  6  BNZBZ 9  10 BNM12 13 BNOB  '\nCC0C DC CL48'NOPBO 2  3  4  5  6  BNZBZ 9  10 11 12 13 BNOB  '\nCC0D DC CL48'NOP1  BH 3  BL 5  6  BNEBE 9  10 11 12 13 14 B  '\nCC0E DC CL48'NOP1  BP 3  BM 5  6  BNZBZ 9  10 11 12 13 14 B  '\n***********************************************************************\n*  ***** MACHINE AND CODING FORMATS FOR THE FMT COLUMN                *\n***********************************************************************\n* THE FORMAT TABLE BELOW SHOWS FOR EACH FMT NUMBER THE INSTRUCTION    *\n* FORMAT NAME, MACHINE INSTRUCTION FORMAT, AND CODING FORMAT. THE     *\n* MACHINE INSTRUCTION SHOWS HOW THE INSTRUCTION IS FORMATTED IN MEMORY*\n* DURING EXECUTION, WHILE THE CODING FORMAT SHOWS HOW THE INSTRUCTION *\n* IS CODED BY THE ASSEMBLER PROGRAMMER.                               *\n* MACHINE INSTRUCTION FORMATS SHOW EACH NYBBLE (HALF-BYTE) OF THE     *\n* INSTRUCTION, AND THE DATA CONTAINED IN THAT NYBBLE. DATA CONTENT    *\n* ABBREVIATIONS ARE: OC=OP-CODE, R1-R4 ARE REGISTER OPERANDS, M1-M4   *\n* ARE MASK OPERANDS, I1-I4 ARE IMMEDIATE OPERANDS, LL IS A SINGLE     *\n* INSTRUCTION LENGTH, L1 AND L2 ARE OPERAND (1 AND 2) LENGTHS.        *\n***********************************************************************\nFP       EQU  64     FLOATING POINT INSTRUCTION\nPR       EQU  32     PRIVILEGED INSTRUCTION\nE1       EQU  1      OCOCOCOC                 <==> (NONE)\nRI1      EQU  2      OCOCR1OCI2I2I2I2         <==> R1,I2\nRR1      EQU  3      OCOCR1R2                 <==> R1,R2\nRR2      EQU  4      OCOCI1I1                 <==> I1\nRR3      EQU  5      OCOCR1--                 <==> R1\nRR4      EQU  29     OCOCM1R2                 <==> M1,R2\nRRE1     EQU  6      OCOCOCOC----R1R2         <==> R1,R2\nRRE2     EQU  7      OCOCOCOC----R1--         <==> R1\nRRE3     EQU  8      OCOCOCOC--------         <==> (NONE)\nRRF1     EQU  9      OCOCOCOCR1--R3R2         <==> R1,R3,R2\nRRF2     EQU  10     OCOCOCOCM3--R1R2         <==> R1,M3,R2\nRRF3     EQU  11     OCOCOCOCR3M4R1R2         <==> R1,R3,R2,M4\nRS1      EQU  12     OCOCR1R3B2D2D2D2         <==> R1,R3,D2(B2)\nRS2      EQU  13     OCOCR1--B2D2D2D2         <==> R1,D2(B2)\nRS3      EQU  14     OCOCR1M3B2D2D2D2         <==> R1,M3,D2(B2)\nRSI1     EQU  15     OCOCR1R3I2I2I2I2         <==> R1,R3,I2\nRX1      EQU  16     OCOCR1X2B2D2D2D2         <==> R1,D2(X2,B2)\nRX2      EQU  17     OCOCM1X2B2D2D2D2         <==> M1,D2(X2,B2)\nRXE1     EQU  18     OCOCR1X2B2D2D2D2----OCOC <==> R1,D2(X2,B2)\nRXF1     EQU  19     OCOCR3X2B2D2D2D2R1--OCOC <==> R1,R3,D2(X2,B2)\nS1       EQU  20     OCOC----B2D2D2D2         <==> D2(B2)\nS2       EQU  21     OCOCOCOC--------         <==> (NONE)\nS3       EQU  30     OCOCOCOCB2D2D2D2         <==> D2(B2)\nSI1      EQU  22     OCOCI2I2B1D1D1D1         <==> D1(B1),I2\nSS1      EQU  23     OCOCLLLLB1D1D1D1B2D2D2D2 <==> D1(LL,B1),D2(B2)\nSS2      EQU  24     OCOCL1L2B1D1D1D1B2D2D2D2 <==> D1(L1,B1),D2(L2,B2)\nSS3      EQU  25     OCOCR1R3B2D2D2D2B4D4D4D4 <==> R1,D2(B2),R3,D4(B4)\nSS4      EQU  26     OCOCR1R3B1D1D1D1B2D2D2D2 <==> D1(R1,B1),D2(B2),R3\nSS5      EQU  27     OCOCL1I3B1D1D1D1B2D2D2D2 <==> D1(L1,B1),D2(B2),I3\nSSE1     EQU  28     OCOCOCOCB1D1D1D1B2D2D2D2 <==> D1(B1),D2(B2)\n***********************************************************************\n*  PARAMETER AREA PASSED TO THE READLMOD SUBROUTINE                   *\n***********************************************************************\nPARMAREA DS    0F          READLMOD PARAMETER AREA\nPRMDDNAM DC    CL8'SYSLIB'    DDNAME FOR LOADLIB CONTAINING MEMBER\nPRMEMBER DC    CL8' '         MEMBER NAME\nPRMCSECT DC    CL8' '         CSECT NAME\nPRMREQST DC    CL8' '         NAME OF DATA TO BE RETRIEVED: ESD, RLD,\n*                                TEXT, SYM, IDRU, IDRL, IDRZ, IDRB,\n*                                NAME, OR MAP\nPRMCURSR DC    F'0'        CURSOR VALUE. CALLER SETS THIS TO ZERO\n*                             BEFORE A FIRST CALL FOR A SET OF DATA,\n*                             THEN LEAVES IT AS-IS WHEN RETURNING FOR\n*                             ADDITIONAL DATA UNTIL IT HAS ALL BEEN\n*                             RETURNED. CURRENT VALUE IS RETURNED BY\n*                             THIS SUBROUTINE AFTER EACH CALL.\nPRMRETCD DC    F'0'        RETURN CODE FROM IEWBIND (S/B ZERO)\nPRMRSNCD DC    F'0'        REASON CODE FROM IEWBIND (ZERO MEANS\n*                             MORE DATA OF THIS TYPE IS AVAILABLE AND\n*                             WILL BE RETURNED IN SUBSEQUENT CALLS.\n*                             4 MEANS THE DATA IN THE BUFFER IS ALL\n*                             THAT IS AVAILABLE OF THE REQUESTED TYPE\nPRMCOUNT DC    F'0'        NUMBER ELEMENTS AVAILABLE IN THE BUFFER\nPRMBUFAD DC    A(0)        ADDRESS OF THE DATA BUFFER HEADER. THE\n*                             HEADER IS 32 BYTES LONG, FOLLOWED BY\n*                             THE DATA ELEMENTS.\nPRMERROR DS    CL1         ERROR INDICATOR ON RETURN:\nPRMOK    EQU   C' '           SUCCESSFUL READLMOD CALL\nPRMPRMER EQU   C'P'           PARAMETER ERROR\nPRMACERR EQU   C'E'           IEWBIND MACRO ERROR OCCURRED\n*********************************************************************\n*             DCB'S                                                 *\n*********************************************************************\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X\n               RECFM=FBA,LRECL=133\nSYSOUT   DCB   DSORG=PS,MACRF=PM,DDNAME=SYSOUT,                        X\n               RECFM=FB,LRECL=80\nSYSIN    DCB   DSORG=PS,MACRF=GM,DDNAME=SYSIN,EODAD=RCEOF,             X\n               RECFM=FB,LRECL=80\n         LTORG\nRESOURCE CSECT\n*********************************************************************\n*             REGISTER EQUATES                                      *\n*********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n***********************************************************************\n* THE TWO FOLLOWING DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF         *\n* EXTERNAL SYMBOL DICTIONARY (ESD) BUFFER:                            *\n*    ESDHEADR DESCRIBES THE BUFFER HEADER.                            *\n*    ESDENTRY DESCRIBES EACH ESD ENTRY THAT FOLLOWS THE HEADER.       *\n***********************************************************************\nESDHEADR DSECT ,    DESCRIBE THE IEWBUFF ESD BUFFER HEADER              01-IEWBU\nESDHBUFI DS    CL8  BUFFER EYECATCHER.                                  02-00073\nESDHBUFL DS    F    TOTAL BUFFER LENGTH INCLUDING THIS                  02-00074\nESDHVERS DS    AL1  VERSION OF BUFFER.                                  02-00077\n         DS    AL3  RESERVED. MUST BE ZERO.                             02-00078\nESDHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.                        02-00079\nESDHENTC DS    F    NUMBER ESDENTRY ELEMENTS CONTAINED IN THIS BUFFER   02-00080\nESDHNAMO DS    F    OFFSET OF NAME IN NAMES LIST AREA.                  02-00081\nESDHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.                  02-00082\nESDHEND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.                      02-00083\n*\nESDENTRY DSECT ,    DESCRIBE ESDENTRY. OCCURS ESDHENTC TIMES            01-IEWBU\nESDTYPE  DS    CL2  TYPE OF ESD ENTRY.                                  01-IEWBU\nESDTYPEQ DS    CL2  ESD RECORD TYPE QUALIFIER                           01-IEWBU\nESDNAMES DS    CL1  NAME SPACE OF SYMBOL                                01-IEWBU\nESDSCOPE DS    CL1  SCOPE OF THE SYMBOL                                 01-IEWBU\nESDNAME  DS    0CL6 SYMBOL REPRESENTED BY ESD RECORD                    01-IEWBU\nESDNAMEC DS    H      LENGTH OF THE NAME.                               01-IEWBU\nESDNAMEP DS    A      POINTS TO THE NAME OF THE SYMBOL (BLANK = $PRIV)  01-IEWBU\nESDSYMAT DS    BL1  SYMBOL ATTRIBUTE FLAGS                              01-IEWBU\nESDSTRNG EQU   X'80'  ON=STRONG REFERENCE OR DEFINITION                 01-IEWBU\nESDRNMBL EQU   X'40'  ON=THIS SYMBOL IS MAPPED,NOT RENAMED              01-IEWBU\nESDDESCL EQU   X'20'  ON=SYMBOL DEFINES OR REFERENCES A LINKAGE BLOCK   01-IEWBU\nESDMNGLD EQU   X'10'  ON=NAME MAY BE MANGLED                            01-IEWBU\nESDXPLNK EQU   X'08'  ON=USES XPLINK LINKAGE CONVENTIONS                01-IEWBU\n         DS    CL1                                                      01-IEWBU\nESDRESCS DS    0CL6 NAME OF OWNING OR CONTAINING SECTION                01-IEWBU\nESDRESCL DS    H       LENGTH OF THE RESIDENT SECTION NAME              01-IEWBU\nESDRESCP DS    A       POINTER TO NAME OF SECTION WHERE THIS SPEC. OF   01-IEWBU\n*                        THE SYMBOL RESIDES. FOR LD, PR.\nESDLENG  DS    F    LENGTH OF DEFINED ELEMENT                           01-IEWBU\nESDALIGN DS    XL1  ALIGNMENT SPECIFICATION FOR SD, PR                  01-IEWBU\nESDUSBLT DS    XL1  REUSABILITY OF SD                                   01-IEWBU\nESDAMODE DS    XL1  ADDRESSING MODE OF SD                               01-IEWBU\nESDRMODE DS    XL1  RMODE OF SD                                         01-IEWBU\nESDRECFM DS    H    RECORD FORMAT FOR CLASS                             01-IEWBU\nESDLOADF DS    BL1  LOAD ATTRIBUTES                                     01-IEWBU\nESDRO    EQU   X'80'   READ-ONLY                                        01-IEWBU\nESDNL    EQU   X'40'   DO NOT LOAD WITH MODULE                          01-IEWBU\nESDMOVE  EQU   X'20'   MOVEABLE                                         01-IEWBU\nESDSHR   EQU   X'10'   SHAREABLE                                        01-IEWBU\nESDDEFER EQU   X'08'   DEFERRED LOAD                                    01-IEWBU\nESDBINDF DS    BL1  BIND ATTRIBUTES                                     01-IEWBU\nESDGEND  EQU   X'80'   BINDER-GENERATED                                 01-IEWBU\nESDNOCLS EQU   X'40'   NO CLASS DATA AVAILABLE                          01-IEWBU\nESDVL    EQU   X'20'   VARIABLE LENGTH RECORDS                          01-IEWBU\nESDDESCD EQU   X'10'   DESCRIPTIVE DATA                                 01-IEWBU\nESDINIT  EQU   X'08'   HAS PART INITIALIZERS                            01-IEWBU\nESDFILLX EQU   X'04'   ILL HAS BEEN SET                                 01-IEWBU\nESDPADST EQU   X'02'   CLASS HAS PADDING AT START                       01-IEWBU\nESDBINDC DS    BL1  TYPE OF PROGRAM CODE DESCRIBED BY SYMBOL            01-IEWBU\nESDMETH  EQU   X'30'   BINDING METHOD                                   01-IEWBU\n*                        '00'B = CATENATE\n*                        '01'B = MERGE\n*                        '1-'B = RESERVED\nESDTXTTY EQU   X'0F'   TEXT TYPE                                        01-IEWBU\n*                        '0000'B = UNSPECIFIED\n*                        '0001'B = INSTRUCTIONS\n*                        '0010'B = DATA\n*                        '0011'B = TRANSLATOR DEFN\n         DS    XL1                                                      01-IEWBU\nESDXATCL DS    H    LENGTH OF XATTR CLASS NAME                          01-IEWBU\nESDXATCP DS    A    PTR TO EXTENDED ATTRIBUTES CLASS NAME               01-IEWBU\nESDXATOF DS    F    EXTENDED ATTRIBUTES OFFSET                          01-IEWBU\nESDSEGMN DS    H    OVERLAY SEGMENT NUMBER OF SECTION                   01-IEWBU\nESDREGN  DS    H    OVERLAY REGION NUMBER OF SECTION                    01-IEWBU\nESDSIGN  DS    CL8  INTERFACE SIGNATURE                                 01-IEWBU\nESDAUTOC DS    BL1  AUTOCALL SPEC. APPLIES TO REFERENCES                01-IEWBU\nESDNVRCL EQU   X'80'      NEVERCALL WAS SPECIFIED                       01-IEWBU\nESDMINOR EQU   X'40'      AUTOCALLED FROM LPA                           01-IEWBU\nESDSTAT  DS    BL1  STATUS                                              01-IEWBU\nESDRESLV EQU   X'80'      SYMBOL IS RESOLVED                            01-IEWBU\nESDACPRC EQU   X'40'      PROCESSED BY AUTOCALL                         01-IEWBU\nESDINCLD EQU   X'20'      INCLUDE ATTEMPTED                             01-IEWBU\nESDNOTFD EQU   X'10'      MEMBER NOT FOUND                              01-IEWBU\nESDEXTRN EQU   X'08'      RESOLVED OUTSIDE MODULE                       01-IEWBU\nESDNOCAL EQU   X'04'      NOCALL/NEVERCALL                              01-IEWBU\nESDNOREF EQU   X'02'      NO STRONG REFERENCES                          01-IEWBU\nESDLIBRY EQU   X'01'      SPECIAL CALL LIBRARY REQUESTED                01-IEWBU\nESDTGTL  DS    H    LENGTH OF THE TARGET.                               01-IEWBU\nESDTGTP  DS    A    POINTS TO NAME OF SECTION WHERE SYMBOL RESIDES. FOR 01-IEWBU\n*                      EXTERNAL REFERENCES.\n         DS    H                                                        01-IEWBU\nESDCNTCL DS    H    LENGTH OF THE CLASS                                 01-IEWBU\nESDCNTCP DS    A    POINTS TO NAME OF CONTAINING CLASS                  01-IEWBU\nESDELOFF DS    F    OFFSET WITHIN THE CLASS ELEMENT                     01-IEWBU\nESDCLOFF DS    F    OFFSET WITHIN THE CLASS SEGMENT                     01-IEWBU\n         DS    H                                                        01-IEWBU\nESDADAL  DS    H    ASSOCIATED DATA LENG                                01-IEWBU\nESDADAP  DS    A    POINTS TO ASSOCIATED DATA                           01-IEWBU\n         DS    F                                                        01-IEWBU\nESDPRTY  DS    F    BINDING SEQUENCE                                    01-IEWBU\nESDNTEND DS    0F                                                       01-IEWBU\n***********************************************************************\n* THE TWO FOLLOWING DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF NAME    *\n* BUFFER:                                                             *\n*    BNLHEADR DESCRIBES THE BUFFER HEADER.                            *\n*    BNLENTRY DESCRIBES EACH ENTRY THAT FOLLOWS THE HEADER.           *\n***********************************************************************\nBNLHEADR DSECT ,    DESCRIBES THE HEADER FOR THE IEWBUFF NAME BUFFER    01-IEWBU\nBNLHBUFI DS    CL8  BUFFER EYECATCHER.                                  02-00073\nBNLHBUFL DS    F    TOTAL BUFFER LENGTH, INCLUDING THIS                 02-00074\nBNLHVER  DS    AL1  VERSION OF BUFFER.                                  02-00077\n         DS    AL3                                                      02-00078\nBNLHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.                        02-00079\nBNLHENTC DS    F    NUMBER BNLENTRY ELEMENTS CONTAINED IN THIS BUFFER   02-00080\nHNAMO DS    F    OFFSET OF NAME IN NAMES LIST AREA.                     02-00081\nBNLHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.                  02-00082\nBNLHEND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.                      02-00083\n*                                                                       02-00121\nBNLENTRY DSECT ,    DESCRIBES NAME BUFFER ENTRY. OCCURS BNLHENTC TIMES  01-IEWBU\nBNLCLSL  DS    F    CLASS LENGTH (FOR CLASS NAMES)                      01-IEWBU\nBNLBINDF DS    XL1  FLAG BITS                                           01-IEWBU\nBNLBFGEN EQU   X'80'  GENERATED BY BINDER                               01-IEWBU\nBNLBFEMP EQU   X'40'  NO DATA PRESENT                                   01-IEWBU\nBNLBFVL  EQU   X'20'  VARYING LENGTH RECORDS                            01-IEWBU\nBNLBFDES EQU   X'10'  DESCRIPTIVE DATA (NON-TEXT)                       01-IEWBU\nBNLBFINI EQU   X'08'  CLASS HAS INITIAL DATA                            01-IEWBU\nBNLBFFIL EQU   X'04'  FILL CHARACTER SPECIFIED                          01-IEWBU\nBNLBFERR EQU   X'01'  CLASS VALIDATION ERROR                            01-IEWBU\nBNLPAD1  DS    XL1  1 BYTE PAD FOR BOUNDARY ALIGNMENT                   01-IEWBU\nBNLNAMEL DS    H    NBR SIGNIFICANT CHARS IN CLASS/SECTION NAME         01-IEWBU\nBNLNAMEP DS    AL4  POINTER TO CLASS OR SECTION NAME                    01-IEWBU\nBNLELEMC DS    F    NUMBER ELEMENTS IN CLASS OR SECT                    01-IEWBU\nBNLEND   DS    0F                                                       01-IEWBU\n***********************************************************************\n* THE TWO FOLLOWING DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF         *\n* RELOCATION DICTIONARY (RLD) BUFFER:                                 *\n*    RLDHEADR DESCRIBES THE BUFFER HEADER.                            *\n*    RLDENTRY DESCRIBES EACH RLD ENTRY THAT FOLLOWS THE HEADER.       *\n***********************************************************************\nRLDHEADR DSECT ,    DESCRIBE IEWBUFF RLD BUFFER HEADER                  01-IEWBU\nRLDHBUFI DS    CL8  BUFFER EYECATCHER.                                  02-00073\nRLDHBUFL DS    F    TOTAL BUFFER LENGTH, INCLUDING THIS                 02-00074\nRLDHVER  DS    AL1  VERSION OF BUFFER.                                  02-00077\n         DS    XL3                                                      02-00078\nRLDHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.                        02-00079\nRLDHENTC DS    F    NUMBER RLDENTRY ELEMENTS CONTAINED IN THIS BUFFER   02-00080\nRLDHNAMP DS    F    OFFSET OF NAME IN NAMES LIST AREA.                  02-00081\nRLDHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.                  02-00082\nRLDHEND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.                      02-00083\n*\nRLDENTRY DSECT ,    DESCRIBE RLD BUFFER ENTRY. OCCURS RLDHENTC TIMES    01-IEWBU\nRLDTYPE  DS    XL1  ADCON TYPE.                                         01-IEWBU\nRLDSTAT  DS    XL1  ADCON RELOCATION STATUS.                            01-IEWBU\nRLDRESNL DS    H    LENGTH OF THE RESIDENT.                             01-IEWBU\nRLDRESNP DS    A    POINTS TO NAME OF SECTION WHERE ADCON RESIDES       01-IEWBU\nRLDADCNL DS    H    LENGTH OF THE ADCON.                                01-IEWBU\nRLDRESCL DS    H    LENGTH OF THE RESIDENT CLASS NAME                   01-IEWBU\nRLDRESCP DS    A    POINTS TO NAME OF CLASS WHERE ADCON RESIDES         01-IEWBU\nRLDRESOF DS    F    OFFSET OF ADDRESS CONSTANT IN ELEMENT OR PART:      01-IEWBU\n*                      RLDRESPL=0: ELEMENT; RLDRESPL>0: PART\nRLDCLOF  DS    F    OFFSET OF THE ADDRESS WITHIN CLASS SEGMENT          01-IEWBU\nRLDADCNB DS    XL1  ADCON BOUNDARY SPECIFICATION.                       01-IEWBU\nRLDBNDAT DS    BL1  ADCON BOUNDARY STATUS                               01-IEWBU\nRLDDIR   EQU   X'80'   RELOCATION SIGN: '0' = POS; '1' = NEG            01-IEWBU\nRLDHOBST EQU   X'40'   SET HIGH ORDER BIT FROM AMODE OF TARGET          01-IEWBU\nRLDINTXT EQU   X'20'   INTERNAL/EXTERNAL: '0' = INT; '1' = EXT          01-IEWBU\nRLDHOBCH EQU   X'10'   HIGH ORDER BIT CHANGED BY BINDER                 01-IEWBU\nRLDPARTR EQU   X'08'   ADCON LOCATED IN PART                            01-IEWBU\nRLDXATCL DS    H    LENGTH OF EXTENDED ATTR CLASS NAME                  01-IEWBU\nRLDXATCP DS    A    POINTER TO EXTENDED ATTRIBUTES CLASS NAME           01-IEWBU\nRLDXATOF DS    F    OFFSET OF EXTENDED ATTRIBUTES IN THE ELEMENT        01-IEWBU\nRLDNAMSP DS    XL1  NAME SPACE OF REFERENCE                             01-IEWBU\n         DS    XL1                                                      01-IEWBU\nRLDTGTNL DS    H    LENGTH OF THE TARGET NAME                           01-IEWBU\nRLDTGTNP DS    A    POINTER TO NAME OF SYMBOL TO WHICH ADCON POINTS     01-IEWBU\n         DS    XL2                                                      01-IEWBU\nRLDRESPL DS    H    RESIDENT PART LENGTH                                01-IEWBU\nRLDRESPP DS    A    RESIDENT PART POINTER                               01-IEWBU\nRLDEND   DS    0F                                                       01-IEWBU\n***********************************************************************\n* THE TWO FOLLOWING DSECT DESCRIBES THE CONTENT OF AN IEWBUFF         *\n* TEXT BUFFER                                                         *\n***********************************************************************\nTXTHEADR DSECT ,    DESCRIBE THE IEWBUFF TEXT BUFFER HEADER             01-IEWBU\nTXTHBUFI DS    CL8  BUFFER EYECATCHER.                                  02-00073\nTXTHBUFL DS    F    TOTAL BUFFER LENGTH, INCLUDING THIS                 02-00074\nTXTHVER  DS    AL1  VERSION OF BUFFER.                                  02-00077\n         DS    AL3                                                      02-00078\nTXTHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.                        02-00079\nTXTHENTC DS    F    NUMBER TEXT BYTES CONTAINED IN THIS BUFFER          02-00080\nTXTHNAMO DS    F    OFFSET OF NAME IN NAMES LIST AREA.                  02-00081\nTXTHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.                  02-00082\nTXTHEND  DS    0F   BEGINNING OF TEXT AREA                              02-00083\n*\nTXTENTRY DSECT ,    DESCRIBES TEXT AREA\nTXTBYTE  DS    0C   TEXT BYTE. OCCURS TXTHENTC TIMES                    02-00083\n***********************************************************************\n* THE TWO FOLLOWING DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF IDRL    *\n* BUFFER:                                                             *\n*    IDLHEADR DESCRIBES THE BUFFER HEADER.                            *\n*    IDLENTRY DESCRIBES EACH ENTRY THAT FOLLOWS THE HEADER.           *\n***********************************************************************\nIDLHEADR DSECT ,    DESCRIBE THE IEWBUFF IDRL BUFFER HEADER             01-IEWBU\nIDLHBUFI DS    CL8  BUFFER EYECATCHER.                                  02-00073\nIDLHBUFL DS    F    TOTAL BUFFER LENGTH, INCLUDING THIS                 02-00074\nIDLHVER  DS    AL1  VERSION OF BUFFER.                                  02-00077\n         DS    AL3                                                      02-00078\nIDLHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.                        02-00079\nIDLHENTC DS    F    NUMBER IDLENTRY ELEMENTS CONTAINED IN THIS BUFFER   02-00080\nIDLHNAMO DS    F    OFFSET OF NAME IN NAMES LIST AREA.                  02-00081\nIDLHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.                  02-00082\nIDLHEND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.                      02-00083\n*                                                                       02-00121\nIDLENTRY DSECT ,    DESCRIBE IDRLENTRY. OCCURS IDLHENTC TIMES           01-IEWBU\nIDLPIDID DS    CL10 PROCESSOR IDENTIFICATION (PID ORDER NUMBER)         01-IEWBU\nIDLVER   DS    CL2  PROCESSOR VERSION  NUMBER.                          01-IEWBU\nIDLMODLV DS    CL2  PROCESSOR MODIFICATION LEVEL.                       01-IEWBU\nIDLDATPR DS    CL7  DATE OF COMPILATION OR ASSEMBLY (YYYYDDD)           01-IEWBU\n         DS    XL1                                                      01-IEWBU\nIDLRESNL DS    H    LENGTH OF THE RESIDENT.                             01-IEWBU\nIDLRESNP DS    AL4  POINTS TO NAME OF SECTION TO WHICH THIS APPLIES     01-IEWBU\nIDLEND   DS    0F                                                       01-IEWBU\n***********************************************************************\n* THIS DSECT DESCRIBES AN ENTRY IN THE LABEL TABLE                    *\n* THE TABLE ADDRESSES ARE LOCATED AT LBLTBADR, LBLTBEND, AND CURRLABL *\n* IF THE LENGTH OF LBLENTRY CHANGES, CHANGE HOLDLABL, AS WELL.        *\n***********************************************************************\nLBLDSECT DSECT ,                       DESCRIBES A LABEL TABLE ENTRY\nLBLENTRY DS    0CL16                   LABEL TABLE ENTRY\nLBLOFSET DS    F                           CSECT OFFSET TO THE LABEL\nLBLTYPE  DS    X                           ENTRY TYPE: 0C=DROP,10=USING\n*                                            18=DATA START, 1C=DATA END\n*                                            30=LABEL,40=ADCON,50=VCON\nLBLUREG  DS    X                           USING REGISTER\nLBLRLDLN DS    H                           LENGTH IF RLD ENTRY ELSE 0\nLBLLABEL DS    0CL8                        LABEL\nLBLINITU DS    XL4                         INITIAL REG VALUE FOR USING\n         DS    XL4\n***********************************************************************\n* DESCRIBES AN ENTRY IN AN OP-CODE TABLE                              *\n***********************************************************************\nOPCODES  DSECT ,                       DESCRIBES AN OP-CODE TABLE ENTRY\nOPCENTRY DS    0XL12                   OP-CODE TABLE ENTRY\nOPCODE1  DS    XL1                        OP-CODE BYTE 1\nOPCODE2  DS    XL1                        OP-CODE BYTE 2 OR ZERO\nOPCMNEM  DS    0CL5                       MNEMONIC -OR-\nOPCTWO2  DS    CL1                          '2' FOR 2-BYTE OP-CODES\n*                                           X'00' IF NOT AN OP-CODE\nOPCSRCH2 DS    AL4                          SRCH ADDRESS FOR 2-BYTE O-C\nOPCFORMT DS    XL1                        INSTRUCTION FORMAT CODE\nOPCFLAGS DS    XL1                        FLAGS: 40=FLOATING POINT INST\n*                                                20=PRIVILEGED\nOPCNDCOD DS    XL1                        CONDITION CODE TABLE LINE\nOPCFLAG1 DS    XL1                        FLAG BYTE\nOPCFLAG2 DS    XL1                        FLAG BYTE\nRESOURCE CSECT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RESOURCE": {"ttr": 3080, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00\\x05\\x01\\x02\\x17\\x0f\\x01\\x16$?\\x17Y\\x07y\\x07R\\x00\\x00\\xc1\\xc4\\xc3\\xc4\\xd4\\xe2\\xe3@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "2002-06-19T00:00:00", "modifydate": "2016-08-30T17:59:05", "lines": 1913, "newlines": 1874, "modlines": 0, "user": "ADCDMST"}, "text": "         TITLE '*** BUILD ASSEMBLER SOURCE FROM A LOAD MODULE ***'\nRESOURCE CSECT\nRESOURCE AMODE 31\nRESOURCE RMODE 24\n*********************************************************************\n* BUILDS AN ASSEMBLER LANGUAGE SOURCE PROGRAM FROM A LOAD MODULE IN *\n* A PDS OR A PDSE. LOAD MODULE DATA IS OBTAINED USING THE READLMOD  *\n* SUBROUTINE, WHICH USES THE IEWBUFF AND IEWBIND MACROS. INITIAL    *\n* PROCESSING IS PERFORMED HERE INCLUDING OPENING FILES, GETTING     *\n* STORAGE FOR TABLES AND WORK AREAS, PROCESSING THE PARM FIELD ON   *\n* THE EXEC STATEMENT, PROCESSING CONTROL STATEMENTS, AND LOADING THE*\n* TEXT FOR THE CSECT TO BE DISASSEMBLED INTO MEMORY. WHEN INITIAL   *\n* PROCESSING IS COMPLETE, THE REBUILD PROGRAM IS CALLED WITH THE    *\n* STAGE SET TO 1 FOR LABEL HANDLING, AND THEN A SECOND TIME WITH    *\n* STAGE SET TO 2 FOR FINAL DISASSEMBLY.                             *\n*                                                                   *\n* JCL DD STATEMENTS ARE REQUIRED AS FOLLOWS:                        *\n*   SYSIN:    INPUT  RECFM=FB  LRECL=80   CONTROL STATEMENTS.       *\n*   SYSPRINT: OUTPUT RECFM=FBA LRECL=133  PRINT LISTING.            *\n*   SYSLIB:   INPUT  PDS OR PDSE RECFM=U  LOAD MODULE TO DISASSEMBLE*\n*   SYSOUT:   OUTPUT RECFM=FB  LRECL=80   ASSEMBLER SOURCE PROGRAM  *\n*                                                                   *\n* CONTROL STATEMENTS ARE ENTERED FOR THE FOLLOWING PURPOSES:        *\n*   1) COMMENTS: AN ASTERISK IN COLUMN 1 IDENTIFIES COMMENTS        *\n*   2) MEMBER AND CSECT NAME RECORD: THIS CONTROL STATEMENT MUST BE *\n*      THE FIRST NON-COMMENT RECORD IN THE CONTROL FILE. IT MUST    *\n*      CONTAIN MEMBER NAME IN COL 1-8 AND CSECT NAME IN COL 10-17.  *\n*   3) DATA ONLY RECORD (OPTIONAL): IDENTIFIES AREAS WITHIN THE TEXT*\n*      THAT CONTAIN NO INSTRUCTIONS, ONLY DATA. MULTIPLE DATA-ONLY  *\n*      RECORDS CAN BE ENTERED, IN ANY ORDER. FORMAT IS:             *\n*         COL 1-5 = 'DATA '                                         *\n*         COL 6-11 = OFFSET TO START OF DATA-ONLY AREA              *\n*         COL 12   = BLANK                                          *\n*         COL 13-18 = OFFSET TO END OF DATA-ONLY AREA               *\n*   4) USING RECORD (OPTIONAL): PROVIDES INFORMATION NEEDED TO      *\n*      TO CREATE USING AND DROP STATEMENTS. FORMAT IS:              *\n*         COL  1-6  = 'USING '                                      *\n*         COL  7-12 = HEX OFFSET TO WHERE THE USING STATEMENT WILL  *\n*                     BE PLACED (IT WILL OCCUR BEFORE THIS OFFSET). *\n*         COL  13   = BLANK                                         *\n*         COL 14-19 = HEX OFFSET TO WHERE THE DROP STATEMENT WILL   *\n*                     BE PLACED (IT WILL OCCUR BEFORE THIS OFFSET). *\n*                     IF BLANK, NO DROP WILL BE CREATED.            *\n*         COL  20   = BLANK                                         *\n*         COL  21   = REGISTER USED WITH THIS USING, 0-9 OR A-F     *\n*         COL  22   = BLANK                                         *\n*         COL 23-28 = INITIAL OFFSET VALUE IN THE USING REGISTER.   *\n*                                                                   *\n*   5) USER LABEL RECORD (OPTIONAL): DEFINE USER LABELS TO BE PLACED*\n*      ON STATEMENTS WITHIN THE PROGRAM. IF PROGRAM BASE REGISTERS  *\n*      ARE SET UP WITH USING CARDS, THESE WILL ALSO BE GENERATED AS *\n*      SYMBOLIC OPERANDS ON INSTRUCTIONS. FORMAT IS:                *\n*         COL  1-5   = LITERAL 'ULABL'                              *\n*         COL   6    = BLANK                                        *\n*         COL  7-14  = LABEL NAME                                   *\n*         COL  15    : BLANK                                        *\n*         COL 16-21  : OFFSET TO LEFT END OF FIELD, IN HEX.         *\n*         COL  22    : BLANK                                        *\n*         COL 23-25  : LENGTH OF FIELD IN DECIMAL. 256 IS MAX.      *\n*                                                                   *\n* NOTE: THE BAS R9,TESTPRNT AT THE EOJ LABEL IS FOR TESTING ONLY    *\n*       AND CAN BE COMMENTED OUT FOR NORMAL USE. IT PROVIDES A      *\n*       PRINTOUT OF THE LABEL TABLE THAT CAN BE HELPFUL WHEN TESTING*\n*       CHANGES.                                                    *\n*                                                                   *\n* AUTHOR R THORNTON FEB 2002                                        *\n*                                                                   *\n*  CHANGES                                                          *\n* ----------                                                        *\n*    MAKE ENTRY A LABEL TYPE OF X'20'                               *\n*********************************************************************\n*\n*********************************************************************\n*        SAVE REGISTERS, SET UP BASE REGS, CHAIN SAVE AREAS         *\n*********************************************************************\n         USING RESOURCE,R3,R4,R5,R6\n         STM   R14,R12,12(R13)         SAVE CALLER'S REGS\n         LR    R3,R15                  SET UP BASE FIRST BASE REG\n         LA    R4,4095(R3)             SET UP SECOND\n         LA    R4,1(R4)                    BASE REGISTER\n         LA    R5,4095(R4)             SET UP THIRD\n         LA    R5,1(R5)                    BASE REGISTER\n         LA    R6,4095(R5)             SET UP THIRD\n         LA    R6,1(R6)                    BASE REGISTER\n         LA    R15,MYSAVE              POINT TO MY REGISTER SAVE AREA\n         ST    R15,8(R13)              SET LSA IN CALLER'S SAVE\n         ST    R13,4(R15)              SET HSA IN MY SAVE AREA\n         LR    R13,R15                 SET UP SAVE AREA POINTER\n         B     PARMS                   BRANCH AROUND CONSTANTS\n         DC    CL8'RESOURCE'           PROGRAM NAME IDENTIFIER\n         DC    CL8'&SYSDATE'           ASSEMBLY DATE\n         DC    CL8'&SYSTIME'           ASSEMBLY TIME\nMYSAVE   DS    18F                     MY REGISTER SAVE AREA\n*********************************************************************\n* PROCESS THE PARM STATEMENT: DEFAULT IS TO IGNORE ALL FLOATING     *\n* POINT AND PRIVILEGED INSTRUCTIONS. IF PARM CONTAINS 'FLTPT' THEN  *\n* FLOATING POINT INSTRUCTIONS WILL BE INCLUDED AND/OR IF PARM       *\n* CONTAINS 'SUPVR' THEN PRIVILEGED INSTRUCTIONS WILL BE INCLUDED.   *\n*********************************************************************\nPARMS    L     R2,0(R1)                GET PARM FIELD ADDR\n         CLC   0(2,R2),H0              ANY PARM DATA?\n         BE    TBLMODS                 NO, CONTINUE\n         CLC   0(2,R2),H5              VALID PARM LENGTH?\n         BL    BADPARM                 NO\n         BH    PMCK11                  MAYBE, TEST MORE ...\n         CLC   2(5,R2),FLTPT           FLOATING POINT SPECIFIED?\n         BNE   PM5CK2                  NO\n         NI    UNWANTED,X'BF'          YES, TURN OFF '40' BIT\n         B     TBLMODS                 CONTINUE\nPM5CK2   CLC   2(5,R2),SUPVR           SUPVR SPECIFIED?\n         BNE   BADPARM                 NO, ERROR\n         NI    UNWANTED,X'DF'          YES, TURN OFF '20' BIT\n         B     TBLMODS                 CONTINUE\nPMCK11   CLC   0(2,R2),H11             VALID PARM LENGTH?\n         BNE   BADPARM                 NO, ERROR\n         CLC   2(5,R2),FLTPT           FLOATING POINT SPECIFIED?\n         BNE   PM11CK2                 NO\n         NI    UNWANTED,X'BF'          YES, TURN OFF '40' BIT\n         B     PM11CK3                 CONTINUE\nPM11CK2  CLC   2(5,R2),=CL5'SUPVR'     SUPVR SPECIFIED?\n         BNE   BADPARM                 NO, ERROR\n         NI    UNWANTED,X'DF'          YES, TURN OFF '20' BIT\nPM11CK3  CLC   2(5,R2),8(R2)           BOTH PARMS SAME?\n         BE    BADPARM                 YES, ERROR\n         CLI   7(R2),C','              COMMA SEPARATES?\n         BNE   BADPARM                 NO, ERROR\n         CLC   8(5,R2),FLTPT           FLOATING POINT SPECIFIED?\n         BNE   PM11CK4                 NO\n         NI    UNWANTED,X'BF'          YES, TURN OFF '40' BIT\n         B     TBLMODS                 CONTINUE\nPM11CK4  CLC   8(5,R2),SUPVR           SUPVR SPECIFIED?\n         BNE   BADPARM                 NO, ERROR\n         NI    UNWANTED,X'DF'          YES, TURN OFF '20' BIT\n         B     TBLMODS                 CONTINUE\nBADPARM  WTO   'RESOURCE: INVALID PARM ON EXEC STATEMENT',ROUTCDE=11\n         ABEND 111,DUMP\n*********************************************************************\n* THIS ROUTINE MODIFIES THE OP-CODE TABLES TO ELIMINATE ENTRIES FOR *\n* UNWANTED FLOATING POINT AND/OR PRIVILEGED INSTRUCTIONS.           *\n*********************************************************************\nTBLMODS  CLI   UNWANTED,0              FLOATING POINT/SUPVR WANTED?\n         BE    GETSTOR                 YES, BOTH. NO MOD NEEDED\nTSSTART  LA    R11,TABLTABL-4          POINT TO FIRST TABLE ADDRESS -4\n         LA    R12,OPCODTBL            POINT TO FIRST TABLE\nTSNEXT   SR    R10,R10                 CLEAR FOR INSERT\n         IC    R10,UNWANTED            PICK UP UNWANTED MASK\nTSCHKEND CLC   0(4,R12),HEXFFS         END OF TABLE?\n         BE    TSSTEP                  YES, GO TO NEXT\n         USING OPCODES,R12\n         EX    R10,TSCHKWNT            THIS INSTRUCTION WANTED?\n         BZ    TSENTSTP                YES\n         MVC   OPCENTRY,XZROS          CLEAR THE ENTRY\nTSENTSTP LA    R12,L'OPCENTRY(R12)     STEP TO NEXT TABLE ENTRY\n         B     TSCHKEND                CONTINUE\nTSSTEP   LA    R11,4(R11)              STEP TO NEXT TABLE ADDRESS\n         CLC   0(4,R11),HEXFFS         END OF ADDRESS TABLE?\n         BE    TBLCMPRS                YES, GO COMPRESS TABLES\n         L     R12,0(R11)              POINT TO NEXT TABLE\n         B     TSCHKEND                GO MODIFY NEXT TABLE\nTSCHKWNT TM    OPCFLAGS,0              EXECUTED INSTRUCTION\n         DROP  R12\n*********************************************************************\n* COMPRESS THE OP-CODE TABLES AFTER CLEARING ENTRIES FOR UNWANTED   *\n* INSTRUCTIONS. THE GENERAL INSTRUCTION TABLE, OPCODTBL, IS NOT     *\n* COMPRESSED, AS IT CONTAINS 256 ENTRIES, AND IS ACCESSED DIRECTLY  *\n* USING THE FIRST BYTE OF OP-CODE AS AN INDEX.                      *\n*********************************************************************\nTBLCMPRS LA    R10,TABLTABL            POINT TO FIRST TABLE ADDRESS\nTCNEX10  CLC   0(4,R10),HEXFFS         END OF ADDRESS TABLE?\n         BE    GETSTOR                 YES, ALL THRU HERE\n         L     R11,0(R10)              POINT TO OP-CODE TABLE\n         USING OPCODES,R11\nTCNEX11  CLC   0(4,R11),HEXFFS         END OF OP-CODE TABLE?\n         BE    TCSTEP10                YES, STEP TO NEXT TABLE\n         CLI   OPCMNEM,0               THIS A WANTED INSTRUCTION?\n         BNE   TCSTEP11                YES\n         LA    R12,L'OPCENTRY(R11)     NO, STEP TO NEXT ENTRY\nTCNEX12  CLC   0(4,R12),HEXFFS         END OF OP-CODE TABLE?\n         BNE   TCCHKWNT                NO, CHECK FOR WANTED INSTRUCTION\n         MVC   OPCENTRY(4),HEXFFS      YES, SET TABLE END\n         B     TCSTEP10                GO TO NEXT TABLE\nTCCHKWNT CLI   OPCMNEM-OPCENTRY(R12),0 THIS A WANTED INSTRUCTION?\n         BE    TCSTEP12                NO, KEEP GOING\n         MVC   0(L'OPCENTRY,R11),0(R12) MOVE WANTED ENTRY BACK\n         XC    1(L'OPCENTRY-1,R12),1(R12) CLEAR THE ENTRY MOVED\n         B     TCSTEP11                CONTINUE IN TABLE\nTCSTEP12 LA    R12,L'OPCENTRY(R12)     YES, STEP TO NEXT ENTRY\n         B     TCNEX12                 CONTINUE COMPRESSION\nTCSTEP11 LA    R11,L'OPCENTRY(R11)     STEP TO NEXT TABLE ENTRY\n         B     TCNEX11                 CONTINUE\nTCSTEP10 LA    R10,4(R10)              STEP TO NEXT TABLE ADDRESS\n         B     TCNEX10                 GO COMPRESS NEXT TABLE\n         DROP  R11\n*********************************************************************\n* PREPARE REGS BEFORE ISSUING STORAGE OBTAIN                        *\n*********************************************************************\nGETSTOR  ST    R10,LBLTBR10             SAVE R10 BEFORE OBTAIN\n         ST    R11,LBLTBR11             SAVE R11 BEFORE OBTAIN\n         L     R10,LBLTBXXX             MAX LENGTH IN R10\n         L     R11,LBLTBEND             MIN LENGTH IN R11\n*********************************************************************\n* GET STORAGE FOR TABLES AND OPEN FILES FOR PROCESSING              *\n*********************************************************************\nXETSTOR  STORAGE OBTAIN,LOC=ANY,RTCD=MYRC,COND=NO,CHECKZERO=YES,       X\n               LENGTH=((R10),(R11))\n         ST    R0,LBLTBZZZ             SAVE THE LENGTH OF GOTTEN\n         ST    R1,LBLTBYYY             SAVE THE GOTTEN ADDRESS\n         ST    R1,LBLTBADR             SAVE THE GOTTEN ADDRESS\n         A     R1,LBLTBEND             SAVE THE\n         ST    R1,LBLTBEND                  TABLE END ADDRESS\n*********************************************************************\n* RESTORE REGS AFTER ISSUING STORAGE OBTAIN                         *\n*********************************************************************\n         L     R10,LBLTBR10             RESTORE R10\n         L     R11,LBLTBR11             RESTORE R11\n         OPEN  (SYSPRINT,OUTPUT,SYSOUT,OUTPUT,SYSIN) OPEN FILES\n*********************************************************************\n* READ CONTROL CARD FILE AND PROCESS THE STATEMENTS                 *\n*********************************************************************\nIIREAD   BAS   R9,READCNTL             READ NEXT CONTROL RECORD\n         CLI   MORECNTL,C'Y'           GOT A CONTROL RECORD?\n         BE    IIGOT1                  YES\n         CLI   GOTMCREC,C'Y'           NO, GOT A MEMBER/CSECT CARD?\n         BE    EXEC                    YES, EXIT\n         MVC   PRT(36),=CL36'*** NO CONTROL RECORDS IN SYSIN FILE'\n         BAS   R9,PRINT                PRINT ERROR MESSAGE\n         WTO   '*** NO CONTROL RECORDS IN SYSIN FILE',ROUTCDE=11\n         MVC   RETCODE+2(2),H8         SET RETURN CODE = 8\n         ABEND 111,DUMP                TERMINATE IN ERROR\nIIGOT1   CLI   GOTMCREC,C'Y'           ALREADY HAD MEMBER/CSECT?\n         BE    IIGOT2                  YES\n         BAS   R9,MEMBCSEC             NO, GO PROCESS MEMBER/CSECT\n         B     IIREAD                  GO READ NEXT CONTROL RECORD\nIIGOT2   CLC   CNTLCARD(5),=CL5'DATA ' THIS A DATA-ONLY RECORD?\n         BNE   IIGOT3                  NO\n         BAS   R9,DATAONLY             YES, GO PROCESS IT\n         B     IIREAD                  CONTINUE\nIIGOT3   CLC   CNTLCARD(6),=CL6'ULABL ' THIS A USER LABEL CARD?\n         BNE   IIGOT4                  NO\n         BAS   R9,ULABEL               YES, GO PROCESS ULABL\n         B     IIREAD                  CONTINUE\nIIGOT4   CLC   CNTLCARD(6),=CL6'USING ' THIS A USING RECORD?\n         BNE   IIBADCRD                NO\n         BAS   R9,USINGCRD             YES, GO PROCESS USING\n         B     IIREAD                  CONTINUE\nIIBADCRD MVC   PRT(39),=CL39'INVALID CONTROL RECORD ABOVE IS DROPPED'\n         BAS   R9,PRINT                PRINT MESSAGE\n         MVC   RETCODE+2(2),H8         SET RETURN CODE = 8\n         WTO   'DROPPED AN INVALID CONTROL RECORD',ROUTCDE=11\n         B     IIREAD                  CONTINUE\n*********************************************************************\n* INITIALIZATION FINISHED. LOAD THE DISASSEMBLY ROUTINE. CALL ONCE  *\n* FOR LABEL TABLE BUILD, THEN A SECOND TIME FOR THE FINAL OUTPUT    *\n*********************************************************************\nEXEC     LOAD  EP=REBUILD              GET THE DISASSEMBLY MODULE\n         ST    R0,REBLDEP              SAVE ENTRY POINT ADDRESS\n         LA    R1,REBLDPRM             POINT TO PARAMETERS\n         L     R15,REBLDEP             POINT TO DISASSEMBLY MODULE\n         BASR  R14,R15                 PERFORM LABEL TABLE BUILD\n         MVI   STAGE,2                 SET STAGE 2 INDICATOR\n         LA    R1,REBLDPRM             POINT TO PARAMETERS\n         L     R15,REBLDEP             POINT TO DISASSEMBLY MODULE\n         BASR  R14,R15                 PERFORM DISASSEMBLY\n*********************************************************************\n*        TERMINATE PROCESSING                                       *\n*********************************************************************\nEOJ      EQU   *\n         BAS   R9,TESTPRNT             ????TESTING DISPLAYS?????\n         CLOSE (SYSPRINT,,SYSIN,,SYSOUT) CLOSE FILES\n         L     R13,4(R13)              POINT TO CALLER'S SAVE AREA\n         L     R14,12(R13)             RESTORE RETURN REG: R14\n         L     R15,RETCODE             SET RETURN CODE\n         LM    R0,R12,20(R13)          RESTORE CALLER'S REGS 0-12\n         BR    R14                     RETURN\n*********************************************************************\n*        READ NEXT CONTROL RECORD                                   *\n*********************************************************************\nREADCNTL ST    R9,RC9                  SAVE RETURN ADDRESS\nRCGET    GET   SYSIN,CNTLCARD          READ CONTROL CARD\n         MVC   PRT(21),=CL21'CONTROL RECORD READ: '\n         MVC   PRT+21(59),CNTLCARD     MOVE CONTROL RECORD\n         BAS   R9,PRINT                PRINT IT\n         CLI   CNTLCARD,C'*'           COMMENT?\n         BE    RCGET                   YES\nRCXIT    L     R9,RC9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nRCEOF    MVI   MORECNTL,C'N'           SET EOF INDICATOR\n         B     RCXIT                   AND EXIT\nRC9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n*        PROCESS MEMBER/CSECT CONTROL RECORD                        *\n*********************************************************************\nMEMBCSEC ST    R9,MC9                  SAVE RETURN ADDRESS\n         XC    CURRINFO(CURREND-CURRINFO),CURRINFO CLEAR CURRENT INFO\n         XC    TEXTENDA,TEXTENDA       SAVE TEXT LENGTH\n         MVC   PRMEMBER,CCMEMBER       MOVE REQUESTED MEMBER NAME\n         MVC   CURRMEMB,CCMEMBER       SAVE REQUESTED MEMBER NAME\n         MVC   PRMCSECT,CCCSECT        MOVE REQUESTED CSECT NAME\n         MVC   CURRCSCT,CCCSECT        SAVE REQUESTED CSECT NAME\n         MVC   PRT(29),=CL29'CONTROL CARD READ HAS MEMBER='\n         MVC   PRT+29(8),CCMEMBER      MOVE MEMBER NAME\n         MVC   PRT+39(6),=CL6'CSECT='\n         MVC   PRT+45(8),CCCSECT       MOVE CSECT NAME        DRK JUN07\n         BAS   R9,PRINT                PRINT CONTROL CARD INFO\n         L     R1,LBLTBADR             POINT TO 1ST LABEL TABLE ENTRY\n         ST    R1,CURRLABL             SET CURRENT LABEL ADDRESS\n         MVI   0(R1),X'FF'             SET TABLE END ADDRESS\n         BAS   R9,GETESD               PROCESS ESD'S FOR THE CSECT\n         BAS   R9,GETRLD               PROCESS RLD'S FOR THE CSECT\n         BAS   R9,GETTEXT              GET TEXT FOR THE CSECT\n         MVI   GOTMCREC,C'Y'           INDICATE MEMBER/CSECT REC DONE\nMCXIT    L     R9,MC9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nMC9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n* PROCESS DATA-ONLY CONTROL RECORDS: VALIDATE THE START AND END     *\n* OFFSETS, THEN BUILD LABEL TABLE ENTRIES FOR THE START OF THE      *\n* AREA AND FOR THE END OF THE AREA.                                 *\n*********************************************************************\nDATAONLY ST    R9,DO9                  SAVE RETURN ADDRESS\n         TRT   CNTLCARD+5(6),CHECKHEX  IS START OFFSET VALID HEX?\n         BNZ   DOBADCRD                NO, ERROR\n         TRT   CNTLCARD+12(6),CHECKHEX IS END OFFSET VALID HEX?\n         BNZ   DOBADCRD                NO, ERROR\n         L     R1,CURRLABL             POINT TO CURRENT LABEL AREA\n         USING LBLDSECT,R1\n         TR    CNTLCARD+5(6),TRHEX     MAKE C1=FA, C2=FB, ... ETC\n         PACK  LBLOFSET(5),CNTLCARD+5(7) PACK TO MAKE HEX\n         MVI   LBLOFSET+4,C' '         CLEAR TRASH\n         MVC   HOLDSTRT,LBLOFSET       SAVE START OFFSET\n         MVI   LBLTYPE,X'18'           TYPE IS DATA-ONLY START\n         XC    LBLUREG(11),LBLUREG     REST IS N/A\n         BAS   R9,ADDLABEL             GO PUT IT IN THE TABLE\n         L     R1,CURRLABL             POINT TO CURRENT LABEL AREA\n         TR    CNTLCARD+12(6),TRHEX    MAKE C1=FA, C2=FB, ... ETC\n         PACK  LBLOFSET(5),CNTLCARD+12(7) PACK TO MAKE HEX\n         MVI   LBLOFSET+4,C' '         CLEAR TRASH\n         CLC   HOLDSTRT,LBLOFSET       IS START LESS THAN END?\n         BNL   DOBADCRD                NO, ERROR\n         MVI   LBLTYPE,X'1C'           TYPE IS DATA-ONLY END\n         XC    LBLUREG(11),LBLUREG     REST IS N/A\n         BAS   R9,ADDLABEL             GO PUT IT IN THE TABLE\n         B     DOXIT                   AND EXIT\n         DROP  R1\nDOBADCRD MVC   PRT(41),=CL41'INVALID DATA-ONLY RECORD ABOVE IS DROPPED'\n         BAS   R9,PRINT                PRINT MESSAGE\n         MVC   RETCODE+2(2),H8         SET RETURN CODE = 8\n         WTO   'DROPPED AN INVALID DATA-ONLY CONTROL RECORD',ROUTCDE=11\nDOXIT    L     R9,DO9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nDO9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n* PROCESS USING CONTROL RECORDS: FIRST VALIDATE THE HEX OFFSET AND  *\n* FIELDS. FORMAT A LABEL ENTRY FOR THE USING AND ADD IT TO THE LABEL*\n* TABLE. IF A DROP LOCATION IS PROVIDED, BUILD A DROP ENTRY AND ADD *\n* IT TO THE LABEL TABLE.                                            *\n*********************************************************************\nUSINGCRD ST    R9,UC9                  SAVE RETURN ADDRESS\n         TRT   CNTLCARD+6(6),CHECKHEX  IS USING OFFSET VALID HEX?\n         BNZ   UCBADCRD                NO, ERROR\n         TRT   CNTLCARD+20(1),CHECKHEX IS REGISTER VALID HEX?\n         BNZ   UCBADCRD                NO, ERROR\n         TRT   CNTLCARD+22(6),CHECKHEX  IS USING INITIAL VALUE HEX?\n         BNZ   UCBADCRD                NO, ERROR\n         CLC   CNTLCARD+13(6),BLANKS   ANY DROP OFFSET ENTERED?\n         BE    UCFORMAT                NO\n         TRT   CNTLCARD+13(6),CHECKHEX  IS USING INITIAL VALUE HEX?\n         BNZ   UCBADCRD                NO, ERROR\nUCFORMAT L     R1,CURRLABL             POINT TO CURRENT LABEL AREA\n         USING LBLDSECT,R1\n         TR    CNTLCARD+6(6),TRHEX     MAKE C1=FA, C2=FB, ... ETC\n         PACK  LBLOFSET(5),CNTLCARD+6(7) PACK TO MAKE HEX\n         MVI   LBLOFSET+4,C' '         CLEAR TRASH\n         MVC   HOLDSTRT,LBLOFSET       SAVE START OFFSET\n         MVI   LBLTYPE,X'10'           TYPE IS USING\n         TR    CNTLCARD+20(1),TRHEX    MAKE C1=FA, C2=FB,... ETC\n         MVC   LBLUREG,CNTLCARD+20     MOVE REGISTER\n         NI    LBLUREG,X'0F'           CLEAR ZONE NYBBLE\n         MVC   HOLDREG,LBLUREG         SAVE REGISTER VALUE\n         XC    LBLRLDLN(10),LBLRLDLN   ZERO OUT REMAINDER\n         TR    CNTLCARD+22(6),TRHEX    MAKE C1=FA, C2=FB, ... ETC\n         MVI   HOLDINIU,0              CLEAR HIGH ORDER BYTE\n         PACK  HOLDINIU+1(4),CNTLCARD+22(7) PACK TO MAKE HEX\n         MVC   LBLINITU,HOLDINIU       MOVE INITIAL USING REG VALUE\n         BAS   R9,ADDLABEL             GO PUT IT IN THE TABLE\n         L     R1,CURRLABL             POINT TO CURRENT LABEL AREA\n         CLC   HOLDINIU,XZROS          USING AT LOCATION ZERO?\n         BE    UCCKDROP                YES, NO LABEL ENTRY NEEDED\n         MVC   LBLOFSET,HOLDINIU       COPY INITIAL VALUE TO LOCATION\n         MVI   LBLOFSET,0              CLEAR 1ST BYTE OF OFFSET\n         MVI   LBLTYPE,X'30'           INDICATE SIMPLE LABEL ENTRY\n         MVI   LBLUREG,0               CLEAR USING REGISTER NBR\n         MVC   LBLRLDLN,XZROS          CLEAR RLD LENGTH\n         XC    LBLLABEL,LBLLABEL       CLEAR LABEL NAME\n         BAS   R9,ADDLABEL             GO PUT IT IN THE TABLE\nUCCKDROP CLC   CNTLCARD+13(6),BLANKS   ANY DROP OFFSET ENTERED?\n         BE    UCXIT                   NO\n         L     R1,CURRLABL             POINT TO CURRENT LABEL AREA\n         TR    CNTLCARD+13(6),TRHEX    MAKE C1=FA, C2=FB, ... ETC\n         PACK  LBLOFSET(5),CNTLCARD+13(7) PACK TO MAKE HEX\n         MVI   LBLOFSET+4,C' '         CLEAR TRASH\n         CLC   HOLDSTRT,LBLOFSET       IS DROP AFTER USING?\n         BNL   UCBADCRD                NO, ERROR\n         MVI   LBLTYPE,X'0C'           TYPE IS DROP\n         MVC   LBLUREG,HOLDREG         MOVE IN REGISTER NBR\n         XC    LBLRLDLN(10),LBLRLDLN   ZERO OUT REST\n         BAS   R9,ADDLABEL             GO PUT IT IN THE TABLE\n         B     UCXIT                   AND EXIT\n         DROP  R1\nUCBADCRD MVC   PRT(37),=CL37'INVALID USING RECORD ABOVE IS DROPPED'\n         BAS   R9,PRINT                PRINT MESSAGE\n         MVC   RETCODE+2(2),H8         SET RETURN CODE = 8\n         WTO   'DROPPED AN INVALID USING CONTROL RECORD',ROUTCDE=11\nUCXIT    L     R9,UC9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nUC9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n* PROCESS USER LABEL RECORDS: FIRST VALIDATE THE HEX OFFSET, DECIMAL*\n* LENGTH, AND CHARACTER LABEL FIELDS. FORMAT A LABEL ENTRY FOR THE  *\n* LABEL AND ADD IT TO THE LABEL TABLE.                              *\n*********************************************************************\nULABEL   ST    R9,UL9                  SAVE RETURN ADDRESS\n         TRT   CNTLCARD+15(6),CHECKHEX IS LABEL OFFSET VALID HEX?\n         BNZ   ULBADCRD                NO, ERROR\n         TRT   CNTLCARD+22(3),CHECKZON IS LENGTH VALID DECIMAL?\n         BNZ   ULBADCRD                NO, ERROR\n         CLI   CNTLCARD+6,C' '         ANY LABEL ENTERED?\n         BE    ULBADCRD                NO\n         CLI   CNTLCARD+6,C'Z'         FIRST CHARACTER VALID?\n         BH    ULBADCRD                NO\n         TRT   CNTLCARD+6(8),CHECKLBL  IS USER LABEL VALID CHARS?\n         BNZ   ULBADCRD                NO, ERROR\nULFORMAT L     R1,CURRLABL             POINT TO CURRENT LABEL AREA\n         USING LBLDSECT,R1\n         TR    CNTLCARD+15(6),TRHEX     MAKE C1=FA, C2=FB, ... ETC\n         PACK  LBLOFSET(5),CNTLCARD+15(7) PACK TO MAKE HEX\n         MVI   LBLOFSET+4,C' '         CLEAR TRASH\n         MVI   LBLTYPE,X'30'           TYPE IS USING\n         MVI   LBLUREG,0               REGISTER NOT USED\n         PACK  DBLWD,CNTLCARD+22(3)    PACK LENGTH VALUE\n         CVB   R15,DBLWD               CONVERT TO PACKED\n         STCM  R15,3,LBLRLDLN          SAVE LENGTH\n         MVC   LBLLABEL,CNTLCARD+6     MOVE IN LABEL NAME\n         BAS   R9,ADDLABEL             GO PUT IT IN THE TABLE\n         B     ULXIT                   AND THEN EXIT\n         DROP  R1\nULBADCRD MVC   PRT(37),=CL37'INVALID ULABL RECORD ABOVE IS DROPPED'\n         BAS   R9,PRINT                PRINT MESSAGE\n         MVC   RETCODE+2(2),H8         SET RETURN CODE = 8\n         WTO   'DROPPED AN INVALID ULABL CONTROL RECORD',ROUTCDE=11\nULXIT    L     R9,UL9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nUL9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n* PROCESS THE ESD RECORDS FOR THIS CSECT: LOOP THROUGH ALL THE ESD  *\n* ENTRIES RETURNED BY THE READLMOD SUBROUTINE. THE FIRST THREE ARE  *\n* NORMALLY FOR THE CSECT ITSELF (AN SD, AN ED, AND AN LD). THESE    *\n* WILL BE FOLLOWED BY OTHER ESD ELEMENTS OF WHICH ONLY THE LD TYPES *\n* ARE USED. THE FIRST SD ELEMENT CONTAINS THE AMODE AND RMODE VALUES*\n* THE ED CONTAINS THE CSECT LENGTH, AND THE LD FOR THE CSECT        *\n* PROVIDES LABEL INFORMATION FOR THE CSECT ITSELF. ANY REMAINING    *\n* LD ENTRIES REPRESENT LABELS IDENTIFIED WITH ENTRY STATEMENTS.     *\n*********************************************************************\nGETESD   ST    R9,GE9                  SAVE RETURN ADDRESS\n         XC    PRMCURSR,PRMCURSR       CLEAR CURSOR FOR FIRST CALL\nGEGETIT  MVC   PRMREQST,=CL8'ESD'      SHOW REQUEST IS FOR ESD DATA\n         BAS   R9,READLMOD             GO READ THE ESD DATA\n         CLC   PRMCOUNT,ZERO           ANY DATA RETURNED?\n         BE    GEXIT                   NO\n         L     R10,PRMCOUNT            GET NUMBER ELEMENTS FOUND\n         L     R11,PRMBUFAD            POINT TO BUFFER HEADER\n         USING ESDHEADR,R11\n         LA    R12,ESDHEND             POINT TO FIRST ELEMENT\n         USING ESDENTRY,R12\nGENEXT   STM   R10,R12,WORKSAVE        SAVE WORK REGISTERS\n         MVC   ESDSYMB,BLANKS          CLEAR SYMBOL NAME\n         LH    R1,ESDNAMEC             GET LENGTH OF SYMBOL\n         LTR   R1,R1                   ANY LENGTH?\n         BZ    GEMVOWBK                NO\n         BCTR  R1,0                    COMPUTE LENGTH CODE\n         CH    R1,H8                   EXCESSIVE LENGTH?\n         BL    GEMVNAM2                NO\n         LA    R1,7                    YES, SET MAX LENGTH\nGEMVNAM2 L     R2,ESDNAMEP             POINT TO THE SYMBOL\n         EX    R1,GEMVSYMX             MOVE SYMBOL NAME\nGEMVOWBK MVC   ESDOWNER,BLANKS         PRE-CLEAR OWNER NAME\n         LH    R1,ESDRESCL             GET OWNER NAME LENGTH\n         LTR   R1,R1                   ANY LENGTH?\n         BZ    GECKTYPE                NO\n         BCTR  R1,0                    COMPUTE LENGTH CODE\n         CH    R1,H8                   EXCESSIVE LENGTH?\n         BL    GEMVOWN2                NO\n         LA    R1,7                    YES, SET MAX LENGTH\nGEMVOWN2 L     R2,ESDRESCP             POINT TO OWNING NAME\n         EX    R1,GEMVOWNX             MOVE IN OWNING NAME\nGECKTYPE CLC   ESDTYPE,=CL2'SD'        IS THIS AN SD (CSECT)?\n         BNE   GECKTYP2                NO\n         CLC   CURRCSCT,ESDSYMB        SYMBOL SAME AS REQUESTED CSECT?\n         BNE   GECKTYP2                NO\n         CLC   CURRCSCT,ESDOWNER       OWNER SAME AS REQUESTED CSECT?\n         BNE   GECKTYP2                NO\n         TM    ESDSYMAT,X'80'          STRONG REFERENCE/DEFINITION?\n         BO    GECKTYP2                YES\n         MVC   CURRAMOD,ESDAMODE       NO, SAVE AMODE\n         MVC   CURRRMOD,ESDRMODE          AND RMODE\n         B     GESTEP                  CONTINUE WITH NEXT ESD ENTRY\nGECKTYP2 CLC   ESDTYPE,=CL2'ED'        THIS AN ED?\n         BNE   GECKTYP3                NO\n         CLC   ESDSYMB,=CL8'B_TEXT'    SYMBOL NAME IS B_TEXT?\n         BNE   GECKTYP3                NO\n         CLC   CURRCSCT,ESDOWNER       OWNER SAME AS REQUESTED CSECT?\n         BNE   GECKTYP3                NO\n         TM    ESDSYMAT,X'80'          STRONG REFERENCE/DEFINITION?\n         BO    GECKTYP2                YES\n         MVC   TEXTENDA,ESDLENG        NO, SAVE TEXT LENGTH\n         MVC   TEXTLENG,ESDLENG           TWICE\n         B     GESTEP                  CONTINUE WITH NEXT ESD ENTRY\nGECKTYP3 CLC   ESDTYPE,=CL2'LD'        THIS AN LD?\n         BNE   GESTEP                  NO\n         CLC   CURRCSCT,ESDOWNER       OWNER SAME AS REQUESTED CSECT?\n         BNE   GESTEP                  NO\n         TM    ESDSYMAT,X'80'          STRONG REFERENCE/DEFINITION?\n         BZ    GESTEP                  NO\n         L     R1,CURRLABL             POINT TO CURRENT LABEL ENTRY\n         USING LBLDSECT,R1\n         MVC   LBLOFSET,ESDELOFF       OFFSET TO LABEL\n         MVI   LBLTYPE,X'20'           TYPE = LABEL               JR\n         MVI   LBLUREG,0               NO USING REGISTER\n         XC    LBLRLDLN,LBLRLDLN       CLEAR LENGTH FOR RLD CONSTANT\n         MVC   LBLLABEL,ESDSYMB        MOVE SYMBOL NAME TO ENTRY\n         DROP  R1\n         BAS   R9,ADDLABEL             GO ADD LABEL ENTRY TO TABLE\nGESTEP   LM    R10,R12,WORKSAVE        GET WORK REGISTERS\n         A     R12,ESDHENTL            POINT TO NEXT ELEMENT\n         BCT   R10,GENEXT              LOOP THRU ESD ENTRIES\n         CLC   PRMRETCD,ZERO           ANY MORE ESD ENTRIES?\n         BE    GEGETIT                 YES, GO READ NEXT ESD BUFFER\nGEXIT    L     R9,GE9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nGE9      DC    A(0)                    RETURN ADDRESS\nGEMVSYMX MVC   ESDSYMB(1),0(R2)        EXECUTED MOVE\nGEMVOWNX MVC   ESDOWNER(1),0(R2)       EXECUTED MOVE\n         DROP  R11\n         DROP  R12\n*********************************************************************\n*        PROCESS THE RLD RECORDS FOR THIS CSECT                     *\n*********************************************************************\nGETRLD   ST    R9,GR9                  SAVE RETURN ADDRESS\n         MVC   PRMREQST,=CL8'RLD'      SHOW REQUEST IS FOR RLD DATA\nGRGET2   BAS   R9,READLMOD             GO READ THE RLD DATA\n         L     R10,PRMCOUNT            GET NUMBER ELEMENTS FOUND\n         LTR   R10,R10                 ANY RLD ELEMENTS READ?\n         BZ    GRXIT                   NO\n         L     R11,PRMBUFAD            POINT TO BUFFER HEADER\n         USING RLDHEADR,R11\n         LA    R12,RLDHEND             POINT TO FIRST ELEMENT\n         USING RLDENTRY,R12\nGRNEXT   STM   R10,R12,WORKSAVE        SAVE WORK REGISTERS\n         MVC   RESIDENT,BLANKS         PRE-CLEAR TO BLANKS\n         LH    R1,RLDRESNL             GET LENGTH OF RES CSECT NAME\n         LTR   R1,R1                   ANY LENGTH?\n         BZ    GRDMVAC                 NO\n         BCTR  R1,0                    COMPUTE LENGTH CODE\n         CH    R1,H8                   EXCESSIVE LENGTH?\n         BL    GRDMVRES                NO\n         LA    R1,7                    YES, SET MAX LENGTH\nGRDMVRES L     R2,RLDRESNP             POINT TO THE SYMBOL\n         EX    R1,GRDMVREX             MOVE SYMBOL NAME\nGRDMVAC  MVC   SYMBPTS2,BLANKS         PRE-CLEAR TO BLANKS\n         LH    R1,RLDTGTNL             GET LENGTH OF SYMBOL POINTED TO\n         LTR   R1,R1                   ANY LENGTH?\n         BZ    GRDCKIT                 NO\n         BCTR  R1,0                    COMPUTE LENGTH CODE\n         CH    R1,H8                   EXCESSIVE LENGTH?\n         BL    GRDMVTGT                NO\n         LA    R1,7                    YES, SET MAX LENGTH\nGRDMVTGT L     R2,RLDTGTNP             POINT TO THE SYMBOL\n         EX    R1,GRDTGTNX             MOVE SYMBOL NAME\nGRDCKIT  CLC   RESIDENT,CURRCSCT       ENTRY RESIDES IN CURRENT CSECT?\n         BNE   GRSTEP                  NO\n         L     R1,CURRLABL             POINT TO LABEL TABLE\n         USING LBLDSECT,R1\nGRLBLOK  MVC   LBLOFSET,RLDRESOF       OFFSET TO LABEL\n         MVI   LBLTYPE,X'40'           ASSUME ADCON\n         CLI   RLDSTAT,X'02'           IS IT AN ADCON?\n         BE    GRCLRU                  YES\n         MVI   LBLTYPE,X'50'           NO, ASSUME VCON\n         CLI   RLDSTAT,X'01'           IS IT A VCON?\n         BNE   GRSTEP                  NO, DROP IT\nGRCLRU   MVI   LBLUREG,0               CLEAR USING REG NBR\n         MVC   LBLRLDLN,RLDADCNL       LENGTH OF ADCON\n         MVC   LBLLABEL,BLANKS         CLEAR SYMBOL NAME FIELD\n         CLC   SYMBPTS2,CURRCSCT       SYMBOL = CURRENT CSECT?\n         BE    GRLBADD                 YES\n         MVC   LBLLABEL,SYMBPTS2       MOVE SYMBOL NAME TO ENTRY\nGRLBADD  BAS   R9,ADDLABEL             GO ADD LABEL TO TABLE.\n         DROP  R1\nGRSTEP   LM    R10,R12,WORKSAVE        GET WORK REGISTERS\n         A     R12,RLDHENTL            POINT TO NEXT ELEMENT\n         BCT   R10,GRNEXT              LOOP THRU ESD ENTRIES\n         CLC   PRMRETCD,ZERO           ANY MORE RLD ENTRIES?\n         BE    GRGET2                  YES\nGRXIT    L     R9,GR9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nGRDMVREX MVC   RESIDENT(1),0(R2)       EXECUTED MOVE\nGRDTGTNX MVC   SYMBPTS2(1),0(R2)       EXECUTED MOVE\nGR9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n*        OBTAIN THE TEXT FOR THIS CSECT: ISSUE A STORAGE OBTAIN     *\n*        FOR A STORAGE AREA ABOVE THE 16M LINE LARGE ENOUGH TO      *\n*        CONTAIN THE TEXT, THEN LOAD ALL THE TEXT INTO IT.          *\n*********************************************************************\nGETTEXT  ST    R9,GT9                  SAVE RETURN ADDRESS\n         MVC   PRMCURSR,ZERO           SET CURSOR=0 TO START\n         L     R0,TEXTENDA             GET TEXT LENGTH SET BY ESD\n         LTR   R0,R0                   HAS TEXT LENGTH BEEN SET?\n         BZ    GTNOTXAD                NO, ERROR\n         AH    R0,H32                  INSURE SUFFICIENT STORAGE\n         B     GTSTOBTN                YES\nGTNOTXAD MVC   PRT(39),=CL39'NO STORAGE SIZE WAS FOUND FOR THE CSECT'\n         BAS   R9,PRINT                PRINT THE ERROR MESSAGE\n         WTO   'MISSING TEXT STORAGE SIZE, ABENDING',ROUTCDE=11\n         ABEND 555,DUMP                TERMINATE IN ERROR\nGTSTOBTN STORAGE OBTAIN,LENGTH=(0),LOC=ANY GET TEXT STORAGE\n         ST    R1,TEXTADDR             SAVE THE GOTTEN ADDRESS\n         ST    R1,CURRTEXT             SET CURRENT TEXT ADDRESS\n         A     R1,TEXTENDA             SAVE THE ADDRESS OF THE\n         ST    R1,TEXTENDA                 END OF THE TEXT AREA\n         MVC   PRMREQST,=CL8'TEXT'     SHOW REQUEST IS FOR ESD DATA\nGTNEXT   BAS   R9,READLMOD             GO READ THE TEXT DATA\n         CLC   PRMCOUNT,ZERO           ANY DATA RETURNED?\n         BE    GTXIT                   NO\n         L     R11,PRMCOUNT            GET NUMBER BYTES IN BUFFER\n         L     R10,PRMBUFAD            POINT TO BUFFER HEADER\n         USING TXTHEADR,R10\n         LA    R10,TXTHEND             POINT TO FIRST TEXT BYTE\n         DROP  R10\n         L     R0,PRMCURSR             GET STARTING\n         S     R0,PRMCOUNT                 TEXT\n         A     R0,TEXTADDR                    ADDRESS\n         LR    R1,R11                  COPY TEXT LENGTH\n         MVCL  R0,R10                  MOVE TEXT\n         CLC   PRMRETCD,ZERO           ANY MORE TEXT?\n         BE    GTNEXT                  YES\nGTXIT    L     R9,GT9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nGT9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n*        CALL READLMOD TO OBTAIN DATA FROM THE LOAD MODULE          *\n*********************************************************************\nREADLMOD ST    R9,RL9                  SAVE RETURN ADDRESS\nRLCALL   CALL  READLMOD,PARMAREA       CALL READLMOD FOR REQUESTED DATA\n         CLI   PRMERROR,C' '           WAS THERE AN ERROR?\n         BE    RLXIT                   NO\n         MVC   PRTREQST,PRMREQST       MOVE REQUESTED DATA TYPE\n         MVC   PRTERROR,PRMERROR       AND THE ERROR CODE\nRLCURS   UNPK  PRTCURSR(9),PRMCURSR(5) CURSOR TO PRINT\n         TR    PRTCURSR,TRCHAR         MAKE IT PRINTABLE\n         MVI   PRTCURSR+8,C' '         CLEAR TRASH\n         UNPK  PRTRETCD(9),PRMRETCD(5) RETURN CODE TO PRINT\n         TR    PRTRETCD,TRCHAR         MAKE IT PRINTABLE\n         MVI   PRTRETCD+8,C' '         CLEAR TRASH\n         UNPK  PRTRSNCD(9),PRMRSNCD(5) REASON CODE TO PRINT\n         TR    PRTRSNCD,TRCHAR         MAKE IT PRINTABLE\n         MVI   PRTRSNCD+8,C' '         CLEAR TRASH\n         UNPK  PRTCOUNT(9),PRMCOUNT(5) COUNT TO PRINT\n         TR    PRTCOUNT,TRCHAR         MAKE IT PRINTABLE\n         MVI   PRTCOUNT+8,C' '         CLEAR TRASH\n         MVC   PRT(80),PRTRETRN        DATA LINE\n         BAS   R9,PRINT                PRINT THE LINE\n         WTO   'RESOURCE FOUND ERROR RETURNED BY READLMOD CALL',       X\n               ROUTCDE=11\n         ABEND 111,DUMP                TERMINATE IN ERROR\nRLXIT    L     R9,RL9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nRL9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n*             PRINT SUBROUTINE                                      *\n*********************************************************************\nPRINT    PUT   SYSPRINT,PRTLINE        WRITE PRINT LINE\n         MVC   PRTLINE,BLANKS          CLEAR PRINT LINE\n         BR    R9                      RETURN\n*********************************************************************\n* ADD AN ENTRY TO THE LABEL TABLE. THE NEW ENTRY HAS BEEN PLACED    *\n* IN THE NEXT AVAILABLE TABLE SLOT THAT IS POINTED TO BY CURRLABL.  *\n* THE NEW ENTRY IS INSERTED INTO THE TABLE IN ADDRESS-TYPE ORDER.   *\n*********************************************************************\nADDLABEL ST    R9,AL9                  SAVE RETURN ADDRESS\n         L     R1,LBLTBADR             POINT TO FIRST TABLE ENTRY\n         USING LBLDSECT,R1\n         L     R2,CURRLABL             POINT TO NEW ENTRY\nALCHKEND CR    R1,R2                   PRESENTLY AT NEW ENTRY?\n         BNL   ALADVANC                YES\n         CLC   0(5,R2),LBLENTRY        AT INSERTION POINT?\n         BL    ALINSRT                 YES\n         LA    R1,L'LBLENTRY(R1)       NO, ADVANCE TO NEXT ENTRY\n         B     ALCHKEND                LOOP TO FIND INSERTION POINT\nALINSRT  MVC   HOLDLABL,LBLENTRY       HOLD PRESENT ENTRY\n         MVC   LBLENTRY,0(R2)          MOVE IN NEW ENTRY\n         MVC   0(L'LBLENTRY,R2),HOLDLABL PREVIOUS ENTRY TO END\n         LA    R1,L'LBLENTRY(R1)       STEP TO NEXT ENTRY\n         CR    R1,R2                   PRESENTLY AT LAST ENTRY?\n         BL    ALINSRT                 NO, CONTINUE INSERTION LOOP\nALADVANC LA    R2,L'LBLENTRY(R2)       STEP TO NEXT AVAILABLE SLOT\n         ST    R2,CURRLABL             SAVE UPDATED TABLE ADDRESS\n         C     R2,LBLTBEND             PAST END OF TABLE?\n         BL    ALXIT                   NO\n         MVC   PRT(37),=CL37'LABEL TABLE OF 32,768 ENTRIES IS FULL'\n         BAS   R9,PRINT                PRINT ERROR MESSAGE\n         WTO   'LABEL TABLE OVERFLOW, ABENDING',ROUTCDE=11\n         ABEND 666,DUMP                TERMINATE IN ERROR\nALXIT    L     R9,AL9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\n         DROP  R1\nAL9      DC    A(0)                    RETURN ADDRESS\n*********************************************************************\n*        TESTPRNT PRINTS THE LABEL TABLE AND TEXT AREAS AT END OF   *\n*        JOB FOR TESTING.                                           *\n*********************************************************************\nTESTPRNT ST    R9,TP9                  SAVE RETURN ADDRESS\n         MVC   PRT(8),=CL8'LBLOFSET'\n         MVC   PRT+9(4),=CL4'TYPE'\n         MVC   PRT+14(4),=CL4'UREG'\n         MVC   PRT+19(4),=CL4'LENG'\n         MVC   PRT+24(8),=CL8'LABEL'\n         BAS   R9,PRINT\n         L     R12,LBLTBADR            POINT TO LABEL TABLE\n         USING LBLDSECT,R12\nTPNEXTLB UNPK  PRT(9),LBLOFSET(5)\n         MVI   PRT+8,C' '\n         TR    PRT(8),TRCHAR\n         UNPK  PRT+10(3),LBLTYPE(2)\n         MVI   PRT+12,C' '\n         TR    PRT+10(2),TRCHAR\n         UNPK  PRT+15(3),LBLUREG(2)\n         MVI   PRT+17,C' '\n         TR    PRT+15(3),TRCHAR\n         UNPK  PRT+19(5),LBLRLDLN(3)\n         MVI   PRT+23,C' '\n         CLI   LBLTYPE,X'10'\n         BNE   TPLBL\n         UNPK  PRT+24(7),LBLINITU+1(4)\n         MVI   PRT+30,C' '\n         TR    PRT+24(6),TRCHAR\n         B     TPDESCR\nTPLBL    MVC   PRT+24(8),LBLLABEL\nTPDESCR  CLI   LBLTYPE,X'0C'\n         BNE   TPDESC2\n         MVC   PRT+36(4),=CL4'DROP'\n         MVI   PRT+42,C'R'\n         MVC   PRT+43(1),LBLUREG\n         OI    PRT+43,X'F0'\n         CLI   LBLUREG,X'0A'\n         BL    TPPRINT\n         MVI   PRT+43,C'1'\n         IC    R1,LBLUREG\n         LA    R1,6(R1)\n         STC   R1,PRT+44\n         OI    PRT+44,X'F0'\n         B     TPPRINT\nTPDESC2  CLI   LBLTYPE,X'10'\n         BNE   TPDESC3\n         MVC   PRT+36(5),=CL5'USING'\n         MVC   PRT+42(6),PRT+24\n         MVI   PRT+48,C','\n         MVI   PRT+49,C'R'\n         MVC   PRT+50(1),LBLUREG\n         OI    PRT+50,X'F0'\n         CLI   LBLUREG,X'0A'\n         BL    TPPRINT\n         MVI   PRT+50,C'1'\n         IC    R1,LBLUREG\n         LA    R1,6(R1)\n         STC   R1,PRT+51\n         OI    PRT+51,X'F0'\n         B     TPPRINT\nTPDESC3  CLI   LBLTYPE,X'18'\n         BNE   TPDESC4\n         MVC   PRT+36(10),=CL10'DATA START'\n         B     TPPRINT\nTPDESC4  CLI   LBLTYPE,X'1C'\n         BNE   TPDESC5\n         MVC   PRT+36(8),=CL8'DATA END'\n         B     TPPRINT\nTPDESC5  CLI   LBLTYPE,X'30'\n         BNE   TPDESC6\n         MVC   PRT+36(5),=CL5'LABEL'\n         B     TPPRINT\nTPDESC6  CLI   LBLTYPE,X'40'\n         BNE   TPDESC7\n         MVC   PRT+36(5),=CL5'ADCON'\n         B     TPPRINT\nTPDESC7  CLI   LBLTYPE,X'50'\n         BNE   TPPRINT\n         MVC   PRT+36(5),=CL5'V-CON'\n         B     TPPRINT\nTPPRINT  BAS   R9,PRINT\n         LA    R12,L'LBLENTRY(R12)\n         C     R12,CURRLABL\n         BL    TPNEXTLB\n         BAS   R9,PRINT\n         UNPK  PRT(9),TEXTLENG(5)\n         MVI   PRT+8,C' '\n         TR    PRT(8),TRCHAR\n         MVC   PRT+9(22),=CL22' BYTES OF TEXT FOLLOW:'\n         BAS   R9,PRINT\n         L     R12,TEXTADDR            POINT TO TEXT AREA START\nTPNEXTT  UNPK  PRT(9),TPOFF(5)\n         MVI   PRT+8,C' '\n         TR    PRT(8),TRCHAR\n         UNPK  PRT+9(9),0(5,R12)\n         MVI   PRT+17,C' '\n         UNPK  PRT+18(9),4(5,R12)\n         MVI   PRT+26,C' '\n         UNPK  PRT+27(9),8(5,R12)\n         MVI   PRT+35,C' '\n         UNPK  PRT+36(9),12(5,R12)\n         MVI   PRT+44,C' '\n         UNPK  PRT+46(9),16(5,R12)\n         MVI   PRT+54,C' '\n         UNPK  PRT+55(9),20(5,R12)\n         MVI   PRT+63,C' '\n         UNPK  PRT+64(9),24(5,R12)\n         MVI   PRT+72,C' '\n         UNPK  PRT+73(9),28(5,R12)\n         MVI   PRT+81,C' '\n         TR    PRT+9(74),TRCHAR\n         MVC   PRT+83(32),0(R12)\n         TR    PRT+83(32),PRTCHAR      TRANSLATE TO PRINTABLE DRK JUN07\n         BAS   R9,PRINT\n         L     R1,TPOFF\n         LA    R1,32(R1)\n         ST    R1,TPOFF\n         LA    R12,32(R12)\n         C     R12,TEXTENDA\n         BL    TPNEXTT\nTPXIT    L     R9,TP9                  GET RETURN ADDRESS\n         BR    R9                      EXIT\nTP9      DC    A(0)                    RETURN ADDRESS\nTPOFF    DC    A(0)                    TEXT OFFSET\n*********************************************************************\n*        STORAGE AND FILE AREAS                                     *\n*********************************************************************\nDBLWD    DS    D                       DOUBLEWORD WORK AREA\nXZROS    DC    16X'00'                 CONSTAND HEX ZEROES\nREBLDEP  DC    A(0)                    E.P. ADDRESS FOR REBUILD\nWORKSAVE DS    3F                      SAVE AREA FOR WORK REGS 10-12\nZERO     DC    F'0'                    CONSTANT ZEROS\nRETCODE  DC    F'0'                    RETURN CODE\nH0       DC    H'0'                    CONSTANT 0\nH5       DC    H'5'                    CONSTANT 5\nH11      DC    H'11'                   CONSTANT 11\nH8       DC    H'8'                    CONSTANT 8\nH32      DC    H'32'                   CONSTANT 32\nRESIDENT DC    CL8' '                  RLD RESIDENT CSECT NAME\nSYMBPTS2 DC    CL8' '                  RLD SYMBOL POINTED TO\nESDSYMB  DC    CL8' '                  ESD SYMBOL NAME\nESDOWNER DC    CL8' '                  ESD OWNING CSECT NAME\nUNWANTED DC    XL1'60'                 40=NO FLTPT, 20=NO PRIV INST\nSUPVR    DC    CL5'SUPVR'              LITERAL CONSTANT\nFLTPT    DC    CL5'FLTPT'              LITERAL CONSTANT\nBLANKS   DC    CL133' '                BLANKS\nMORECNTL DC    CL1'Y'                  N=NO MORE CONTROL RECORDS\nGOTMCREC DC    CL1'N'                  Y=MEMBER/CSECT RECORD PROCESSED\nHOLDLABL DS    CL16                    HOLD AREA FOR LABEL ENTRY SORTS\nHOLDINIU DS    XL4,XL1                 HOLD INITIAL USING REG VALUE\nHOLDSTRT DS    XL4                     WORK FIELD\nHOLDREG  DS    XL1                     WORK FIELD\nSTAGE    DC    XL1'1'                  STAGE NUMBER FOR REBUILD\nHEXFFS   DC    X'FFFFFFFF'             HEX FF'S\nWORK1    DC    C' '                    WORK FIELD\nMYRC     DS    F                       DOUBLEWORD WORK AREA\nLBLTBXXX DC    A(32800*L'LBLENTRY)        SIZE OF 32,800 ENTRIES\nLBLTBYYY DS    F                       ADDR   OF GOTTEN AREA\nLBLTBZZZ DS    F                       LENGTH OF GOTTEN AREA\nLBLTBR10 DS    F                       SAVE AREA FOR R10K REGS 10-12\nLBLTBR11 DS    F                       SAVE AREA FOR R11\n*\nREBLDPRM DS    0A                      REBUILD PARAMETER LIST\n         DC    A(STAGE)                   STAGE INDICATOR POINTER\n         DC    A(CURRCSCT)                CSECT NAME POINTER\nLBLTBADR DC    A(0)                       LABEL TABLE STARTING ADDRESS\nCURRLABL DC    A(0)                    ADDRESS OF CURRENT LABEL ENTRY\nLBLTBEND DC    A(32768*L'LBLENTRY)        SIZE OF 32,768 ENTRIES\nTEXTADDR DC    A(0)                       ADDRESS OF CSECT TEXT\nTEXTENDA DC    A(0)                       ADDRESS OF LAST BYTE OF TEXT\nTEXTLENG DC    A(0)                       TOTAL TEXT LENGTH\nTBLTBLAD DC    A(OPCODTBL)                OP-CODE TABLE POINTER\nPRNTDCBA DC    A(SYSPRINT)                SYSPRINT DCB ADDRESS\nOUTDCBA  DC    A(SYSOUT)                  SYSOUT DCB ADDRESS\n*\nTABLTABL DS    0A                      TABLE OF OP-CODE TABLE ADDRESSES\n         DC    A(OCTWO01)                  01XX OP-CODE TABLE\n         DC    A(OCTWOA7)                  A7X OP-CODE TABLE\n         DC    A(OCTWOB2)                  B2XX OP-CODE TABLE\n         DC    A(OCTWOB3)                  B3XX OP-CODE TABLE\n         DC    A(OCTWOE5)                  E5XX OP-CODE TABLE\n         DC    A(OCTWOED)                  EDXX OP-CODE TABLE\n         DC    XL4'FFFFFFFF'              END OF TABLE ENTRY\n*\nISINST   DC    X'00'                   01=TEXT MAY BE AN INSTRUCTION\nINSTFLAG DS    XL1                     INSTRUCTION FLAGS\nINSTMNEM DS    XL5                     INSTRUCTION MNEMONIC\nINSTLENG DS    XL1                     INSTRUCTION LENGTH\nINSTFMT  DS    XL1                     INSTRUCTION LENGTH\nINSTTEXT DS    XL6                     INSTRUCTION TEXT\n*\nCURRINFO DS    0F                      CURRENT PROCESSING INFO\nCURRMEMB DC    CL8' '                     MEMBER NAME\nCURRCSCT DC    CL8' '                     CSECT NAME\nCURRTEXT DC    A(0)                    ADDRESS OF CURRENT TEXT BYTE\nCURRAMOD DS    XL1                        REQUESTED CSECT AMODE\nCURRRMOD DS    XL1                        REQUESTED CSECT RMODE\nCURREND  EQU   *\n*\nPRTLINE  DS    0CL133                  PRINT LINE\nPRTCC    DC    CL1'1'                     CARRIAGE CONTROL BYYTE\nPRT      DC    CL132' '                   PRINT DATA LINE\n*\nPRTRETRN DS    0CL80                   PRINT READLMOD RETURNED DATA\n         DC    CL5' REQ='\nPRTREQST DS    CL5                        REQUESTED DATA TYPE\nPRTRERR  DC    CL5' ERR='\nPRTERROR DS    CL1                        ERROR INDICATOR\n         DC    CL8' CURSOR='\nPRTCURSR DS    CL8                        IEWBIND CURSOR\n         DC    CL8' RETCOD='\nPRTRETCD DS    CL8                        IEWBIND RETURN CODE\n         DC    CL8' RSNCOD='\nPRTRSNCD DS    CL8                        IEWBIND REASON CODE\n         DC    CL7' COUNT='\nPRTCOUNT DS    CL8                        IEWBIND COUNT\n         DC    CL1' '\n*\nCNTLCARD DS    0CL80              CONTROL STATEMENT\nCCMEMBER DS    CL8                   MEMBER NAME\n         DS    CL1\nCCCSECT  DS    CL8                   CSECT NAME\n         DS    CL63\n*\nTRCHAR   DC    256C' '            TRANSLATE HEX TO PRINTABLE CHARS\n         ORG   TRCHAR+C'0'\n         DC    C'0123456789ABCDEF'\n         ORG\n*\nCHECKHEX DC    256X'FF'           TRT TABLE TO CHECK FOR VALID HEX\n         ORG   CHECKHEX+C'A'\n         DC    6X'00'\n         ORG   CHECKHEX+C'0'\n         DC    10X'00'\n         ORG\n*\nCHECKZON DC    256X'FF'           TRT TABLE TO CHECK FOR ZONED DECIMAL\n         ORG   CHECKZON+C'0'\n         DC    10X'00'\n         ORG\n*\nCHECKLBL DC    256X'FF'           TRT TABLE TO CHECK LABEL CHARS\n         ORG   CHECKLBL+C'@'\n         DC    X'00'\n         ORG   CHECKLBL+C'$'\n         DC    X'00'\n         ORG   CHECKLBL+C'#'\n         DC    X'00'\n         ORG   CHECKLBL+C' '\n         DC    X'00'\n         ORG   CHECKLBL+C'A'\n         DC    9X'00'\n         ORG   CHECKLBL+C'J'\n         DC    9X'00'\n         ORG   CHECKLBL+C'S'\n         DC    8X'00'\n         ORG   CHECKLBL+C'0'\n         DC    10X'00'\n         ORG\n*\nTRHEX    DC    256C' '                 TRANSLATE TO MAKE REAL HEX\n         ORG   TRHEX+C'A'\n         DC    X'FAFBFCFDFEFF'\n         ORG   TRHEX+C'0'\n         DC    C'0123456789'\n         ORG\n*\nPRTCHAR  DC    256C'.'                 CHARACTER TRANSLATE TABLE\n         ORG   PRTCHAR+C' '                                   DRK JUN07\n         DC    C' '                                           DRK JUN07\n         ORG   PRTCHAR+C'A'                                   DRK JUN07\n         DC    C'ABCDEFGHI'                                   DRK JUN07\n         ORG   PRTCHAR+C'J'                                   DRK JUN07\n         DC    C'JKLMNOPQR'                                   DRK JUN07\n         ORG   PRTCHAR+C'S'                                   DRK JUN07\n         DC    C'STUVWXYZ'                                    DRK JUN07\n         ORG   PRTCHAR+C'0'                                   DRK JUN07\n         DC    C'0123456789'                                  DRK JUN07\n         ORG   ,                                              DRK JUN07\n***********************************************************************\n*TABLES OF INSTRUCTION OP-CODES. THE FIRST TABLE CONTAINS 256 ENTRIES,*\n*ONE FOR EACH POSSIBLE SINGLE-BYTE OP-CODE. FOLLOWING TABLES ARE FOR  *\n*THE INSTRUCTIONS HAVING MORE THAN A ONE-BYTE OP-CODE. EACH TABLE     *\n*ENTRY IS 10 BYTES LONG AAND CONTAINS:                                *\n*  BYTE  0   OP-CODE FIRST OR ONLY BYTE                               *\n*  BYTE  1   FOR 1.5 AND 2 BYTE OPCODES, THE SECOND OP-CODE BYTE      *\n*  BYTES 2-6 INSTRUCTION MNEMONIC FOR SINGLE-BYTE OP-CODES            *\n*  BYTE  2   '2' FOR 1.5 AND 2 BYTE OP-CODE INSTRUCTIONS              *\n*  BYTES 3-6 ADDRESS OF THE 1.5 OR 2 BYTE OP-CODE TABLE TO USE        *\n*  BYTE  7   INSTRUCTION FORMAT IDENTIFIER. THIS IDENTIFIES THE MEMORY*\n*            FORMAT AND CODING SYNTAX FOR THE INSTRUCTION (SEE THE EQU*\n*            INSTRUCTIONS FOR THE FORMAT NAMES)                       *\n*  BYTE  8   FLAGS: X'40'=FLOATING POINT INSTRUCTION, X'20'=PRIVILEGED*\n*  BYTE  9   IF THE INSTRUCTION SETS THE CONDITION CODE, THIS BYTE    *\n*            WILL CONTAIN THE NUMBER OF THE CONDITION CODE TABLE ENTRY*\n*            TO BE USED FOR FOLLOWING CONDITIONAL BRANCHES.           *\n*  BYTE 10   FLAG BYTE 1: X'80'=ODD TEST REQUIRED                     *\n*                         X'01'=R2 MUST BE 0,1,4,5,8,9,12, OR 13      *\n*  BYTE 11   FLAG BYTE 2: X'80'=R1 MUST BE 0,1,4,5,8,9,12, OR 13      *\n*                         X'40'=M3 MUST BE 0,1,4,5,6, OR 7            *\n*                         X'20'=INSTRUCTION BITS 16-25 MUST BE 0'S    *\n*                         X'10'=R1 MUST NOT EQUAL R2                  *\n*                         X'08'=R3 MUST BE AN EVEN NUMBERED REGISTER  *\n*                         X'04'=R2 MUST BE AN EVEN NUMBERED REGISTER  *\n*                         X'02'=R1 MUST BE AN EVEN NUMBERED REGISTER  *\n*                         X'01'=IF R2=0, OUTPUT 0, NOT R0             *\n***********************************************************************\n         DS    0F\nOPCODTBL DS    0XL12\n         DC    XL2'0000',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'0100',CL1'2',AL4(OCTWO01),XL5'0000000000'\n         DC    XL2'0200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'0300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'0400',CL5'SPM',AL1(RR3),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'0500',CL5'BALR',AL1(RR1),AL1(0),AL1(0),XL2'0001'\n         DC    XL2'0600',CL5'BCTR',AL1(RR1),AL1(0),AL1(0),XL2'0001'\n         DC    XL2'0700',CL5'BCR',AL1(RR4),AL1(0),AL1(0),XL2'0001'\n         DC    XL2'0800',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'0900',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'0A00',CL5'SVC',AL1(RR2),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'0B00',CL5'BSM',AL1(RR1),AL1(0),AL1(0),XL2'0001'\n         DC    XL2'0C00',CL5'BASSM',AL1(RR1),AL1(0),AL1(0),XL2'0001'\n         DC    XL2'0D00',CL5'BASR',AL1(RR1),AL1(0),AL1(0),XL2'0001'\n         DC    XL2'0E00',CL5'MVCL',AL1(RR1),AL1(0),AL1(1),XL2'0006'\n         DC    XL2'0F00',CL5'CLCL',AL1(RR1),AL1(0),AL1(2),XL2'0016'\n         DC    XL2'1000',CL5'LPR',AL1(RR1),AL1(0),AL1(6),XL2'0000'\n         DC    XL2'1100',CL5'LNR',AL1(RR1),AL1(0),AL1(7),XL2'0000'\n         DC    XL2'1200',CL5'LTR',AL1(RR1),AL1(0),AL1(8),XL2'0000'\n         DC    XL2'1300',CL5'LCR',AL1(RR1),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'1400',CL5'NR',AL1(RR1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'1500',CL5'CLR',AL1(RR1),AL1(0),AL1(2),XL2'0000'\n         DC    XL2'1600',CL5'OR',AL1(RR1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'1700',CL5'XR',AL1(RR1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'1800',CL5'LR',AL1(RR1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'1900',CL5'CR',AL1(RR1),AL1(0),AL1(2),XL2'0000'\n         DC    XL2'1A00',CL5'AR',AL1(RR1),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'1B00',CL5'SR',AL1(RR1),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'1C00',CL5'MR',AL1(RR1),AL1(0),AL1(0),XL2'0002'\n         DC    XL2'1D00',CL5'DR',AL1(RR1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'1E00',CL5'ALR',AL1(RR1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'1F00',CL5'SLR',AL1(RR1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'2000',CL5'LPDR',AL1(RR1),AL1(FP),AL1(10),XL2'0000'\n         DC    XL2'2100',CL5'LNDR',AL1(RR1),AL1(FP),AL1(7),XL2'0000'\n         DC    XL2'2200',CL5'LTDR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'2300',CL5'LCDR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'2400',CL5'HDR',AL1(RR1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'2500',CL5'LDXR',AL1(RR1),AL1(FP),AL1(0),XL2'0100'\n         DC    XL2'2600',CL5'MXR',AL1(RR1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'2700',CL5'MXDR',AL1(RR1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'2800',CL5'LDR',AL1(RR1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'2900',CL5'CDR',AL1(RR1),AL1(FP),AL1(2),XL2'0000'\n         DC    XL2'2A00',CL5'ADR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'2B00',CL5'SDR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'2C00',CL5'MDR',AL1(RR1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'2D00',CL5'DDR',AL1(RR1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'2E00',CL5'AWR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'2F00',CL5'SWR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'3000',CL5'LPER',AL1(RR1),AL1(FP),AL1(10),XL2'0000'\n         DC    XL2'3100',CL5'LNER',AL1(RR1),AL1(FP),AL1(7),XL2'0000'\n         DC    XL2'3200',CL5'LTER',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'3300',CL5'LCER',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'3400',CL5'HER',AL1(RR1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'3500',CL5'LEDR',AL1(RR1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'3600',CL5'AXR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'3700',CL5'SXR',AL1(RR1),AL1(FP),AL1(8),XL2'0180'\n         DC    XL2'3800',CL5'LER',AL1(RR1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'3900',CL5'CER',AL1(RR1),AL1(FP),AL1(2),XL2'0000'\n         DC    XL2'3A00',CL5'AER',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'3B00',CL5'SER',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'3C00',CL5'MDER',AL1(RR1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'3D00',CL5'DER',AL1(RR1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'3E00',CL5'AUR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'3F00',CL5'SUR',AL1(RR1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'4000',CL5'STH',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4100',CL5'LA',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4200',CL5'STC',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4300',CL5'IC',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4400',CL5'EX',AL1(RX1),AL1(0),AL1(0),XL2'8000'\n         DC    XL2'4500',CL5'BAL',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4600',CL5'BCT',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4700',CL5'BC',AL1(RX2),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4800',CL5'LH',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4900',CL5'CH',AL1(RX1),AL1(0),AL1(2),XL2'0000'\n         DC    XL2'4A00',CL5'AH',AL1(RX1),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'4B00',CL5'SH',AL1(RX1),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'4C00',CL5'MH',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4D00',CL5'BAS',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4E00',CL5'CVD',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'4F00',CL5'CVB',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'5000',CL5'ST',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'5100',CL5'LAE',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'5200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'5300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'5400',CL5'N',AL1(RX1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'5500',CL5'CL',AL1(RX1),AL1(0),AL1(2),XL2'0000'\n         DC    XL2'5600',CL5'O',AL1(RX1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'5700',CL5'X',AL1(RX1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'5800',CL5'L',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'5900',CL5'C',AL1(RX1),AL1(0),AL1(2),XL2'0000'\n         DC    XL2'5A00',CL5'A',AL1(RX1),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'5B00',CL5'S',AL1(RX1),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'5C00',CL5'M',AL1(RX1),AL1(0),AL1(0),XL2'0002'\n         DC    XL2'5D00',CL5'D',AL1(RX1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'5E00',CL5'AL',AL1(RX1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'5F00',CL5'SL',AL1(RX1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'6000',CL5'STD',AL1(RX1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'6100',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'6200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'6300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'6400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'6500',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'6600',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'6700',CL5'MXD',AL1(RX1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'6800',CL5'LD',AL1(RX1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'6900',CL5'CD',AL1(RX1),AL1(FP),AL1(2),XL2'0000'\n         DC    XL2'6A00',CL5'AD',AL1(RX1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'6B00',CL5'SD',AL1(RX1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'6C00',CL5'MD',AL1(RX1),AL1(FP),AL1(0),XL2'0180'\n         DC    XL2'6D00',CL5'DD',AL1(RX1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'6E00',CL5'AW',AL1(RX1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'6F00',CL5'SW',AL1(RX1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'7000',CL5'STE',AL1(RX1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'7100',CL5'MS',AL1(RX1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'7200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'7300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'7400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'7500',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'7600',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'7700',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'7800',CL5'LE',AL1(RX1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'7900',CL5'CE',AL1(RX1),AL1(FP),AL1(2),XL2'0000'\n         DC    XL2'7A00',CL5'AE',AL1(RX1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'7B00',CL5'SE',AL1(RX1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'7C00',CL5'MDE',AL1(RX1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'7D00',CL5'DE',AL1(RX1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'7E00',CL5'AU',AL1(RX1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'7F00',CL5'SU',AL1(RX1),AL1(FP),AL1(8),XL2'0000'\n         DC    XL2'8000',CL5'SSM',AL1(S1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'8100',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'8200',CL5'LPSW',AL1(S1),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'8300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'8400',CL5'BRXH',AL1(RSI1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'8500',CL5'BRXLE',AL1(RSI1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'8600',CL5'BXH',AL1(RS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'8700',CL5'BXLE',AL1(RS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'8800',CL5'SRL',AL1(RS2),AL1(0),AL1(0),XL2'0020'\n         DC    XL2'8900',CL5'SLL',AL1(RS2),AL1(0),AL1(0),XL2'0020'\n         DC    XL2'8A00',CL5'SRA',AL1(RS2),AL1(0),AL1(8),XL2'0020'\n         DC    XL2'8B00',CL5'SLA',AL1(RS2),AL1(0),AL1(9),XL2'0020'\n         DC    XL2'8C00',CL5'SRDL',AL1(RS2),AL1(0),AL1(0),XL2'0022'\n         DC    XL2'8D00',CL5'SLDL',AL1(RS2),AL1(0),AL1(0),XL2'0022'\n         DC    XL2'8E00',CL5'SRDA',AL1(RS2),AL1(0),AL1(8),XL2'0022'\n         DC    XL2'8F00',CL5'SLDA',AL1(RS2),AL1(0),AL1(9),XL2'0022'\n         DC    XL2'9000',CL5'STM',AL1(RS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'9100',CL5'TM',AL1(SI1),AL1(0),AL1(11),XL2'0000'\n         DC    XL2'9200',CL5'MVI',AL1(SI1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'9300',CL5'TS',AL1(S1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'9400',CL5'NI',AL1(SI1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'9500',CL5'CLI',AL1(SI1),AL1(0),AL1(2),XL2'0000'\n         DC    XL2'9600',CL5'OI',AL1(SI1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'9700',CL5'XI',AL1(SI1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'9800',CL5'LM',AL1(RS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'9900',CL5'TRACE',AL1(RS1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'9A00',CL5'LAM',AL1(RS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'9B00',CL5'STAM',AL1(RS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'9C00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'9D00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'9E00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'9F00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A000',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A100',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A500',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A600',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A700',CL1'2',AL4(OCTWOA7),XL5'0000000000'\n         DC    XL2'A800',CL5'MVCLE',AL1(RS1),AL1(0),AL1(1),XL2'800A'\n         DC    XL2'A900',CL5'CLCLE',AL1(RS1),AL1(0),AL1(13),XL2'800A'\n         DC    XL2'AA00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'AB00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'AC00',CL5'STNSM',AL1(SI1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'AD00',CL5'STOSM',AL1(SI1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'AE00',CL5'SIGP',AL1(RS1),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'AF00',CL5'MC',AL1(SI1),AL1(0),AL1(0),XL2'8000'\n         DC    XL2'B000',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B100',CL5'LRA',AL1(RX1),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B200',CL1'2',AL4(OCTWOB2),XL5'0000000000'\n         DC    XL2'B300',CL1'2',AL4(OCTWOB3),XL5'0000000000'\n         DC    XL2'B400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B500',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B600',CL5'STCTL',AL1(RS1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B700',CL5'LCTL',AL1(RS1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B800',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B900',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'BA00',CL5'CS',AL1(RS1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'BB00',CL5'CDS',AL1(RS1),AL1(0),AL1(1),XL2'000A'\n         DC    XL2'BC00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'BD00',CL5'CLM',AL1(RS2),AL1(0),AL1(2),XL2'0000'\n         DC    XL2'BE00',CL5'STCM',AL1(RS3),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'BF00',CL5'ICM',AL1(RS3),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'C000',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'C100',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'C200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'C300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'C400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'C500',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'C600',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'C700',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'C800',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'C900',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'CA00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'CB00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'CC00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'CD00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'CE00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'CF00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'D000',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'D100',CL5'MVN',AL1(SS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'D200',CL5'MVC',AL1(SS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'D300',CL5'MVZ',AL1(SS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'D400',CL5'NC',AL1(SS1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'D500',CL5'CLC',AL1(SS1),AL1(0),AL1(2),XL2'0000'\n         DC    XL2'D600',CL5'OC',AL1(SS1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'D700',CL5'XC',AL1(SS1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'D800',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'D900',CL5'MVCK',AL1(SS4),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'DA00',CL5'MVCP',AL1(SS4),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'DB00',CL5'MVCS',AL1(SS4),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'DC00',CL5'TR',AL1(SS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'DD00',CL5'TRT',AL1(SS1),AL1(0),AL1(3),XL2'0000'\n         DC    XL2'DE00',CL5'ED',AL1(SS1),AL1(0),AL1(8),XL2'0000'\n         DC    XL2'DF00',CL5'EDMK',AL1(SS1),AL1(0),AL1(8),XL2'0000'\n         DC    XL2'E000',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'E100',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'E200',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'E300',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'E400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'E500',CL1'2',AL4(OCTWOE5),XL5'0000000000'\n         DC    XL2'E600',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'E700',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'E800',CL5'MVCIN',AL1(SS1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'E900',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'EA00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'EB00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'EC00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'ED00',CL1'2',AL4(OCTWOED),XL5'0000000000'\n         DC    XL2'EE00',CL5'PLO',AL1(SS3),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'EF00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'F000',CL5'SRP',AL1(SS5),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'F100',CL5'MVO',AL1(SS2),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'F200',CL5'PACK',AL1(SS2),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'F300',CL5'UNPK',AL1(SS2),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'F400',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'F500',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'F600',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'F700',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'F800',CL5'ZAP',AL1(SS2),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'F900',CL5'CP',AL1(SS2),AL1(0),AL1(2),XL2'0000'\n         DC    XL2'FA00',CL5'AP',AL1(SS2),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'FB00',CL5'SP',AL1(SS2),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'FC00',CL5'MP',AL1(SS2),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'FD00',CL5'DP',AL1(SS2),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'FE00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'FF00',XL5'00',AL1(0),AL1(0),AL1(0),XL2'0000'\n         DC    12X'FF'              END OF TABLE\n***********************************************************************\n*TABLES OF TWO-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS 01               *\n***********************************************************************\n         DS    0F\nOCTWO01  DS    0XL12\n         DC    XL2'0101',CL5'PR',AL1(E1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'0102',CL5'UPT',AL1(E1),AL1(0),AL1(4),XL2'0000'\n         DC    XL2'0107',CL5'SCKPF',AL1(E1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'01FF',CL5'TRAP2',AL1(E1),AL1(0),AL1(0),XL2'0000'\n         DC    12X'FF'              END OF TABLE\n***********************************************************************\n*TABLES OF 1.5-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS A7               *\n***********************************************************************\n         DS    0F\nOCTWOA7  DS    0XL12\n         DC    XL2'A700',CL5'TMH',AL1(RI1),AL1(0),AL1(12),XL2'0000'\n         DC    XL2'A710',CL5'TML',AL1(RI1),AL1(0),AL1(12),XL2'0000'\n         DC    XL2'A740',CL5'BRC',AL1(RI1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A750',CL5'BRAS',AL1(RI1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A760',CL5'BRCT',AL1(RI1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A780',CL5'LHI',AL1(RI1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A7A0',CL5'AHI',AL1(RI1),AL1(0),AL1(9),XL2'0000'\n         DC    XL2'A7C0',CL5'MHI',AL1(RI1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'A7E0',CL5'CHI',AL1(RI1),AL1(0),AL1(2),XL2'0000'\n         DC    12X'FF'              END OF TABLE\n***********************************************************************\n*TABLES OF TWO-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS B2               *\n***********************************************************************\n         DS    0F\nOCTWOB2  DS    0XL12\n         DC    XL2'B202',CL5'STIDP',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B204',CL5'SCK',AL1(S3),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B205',CL5'STCK',AL1(S3),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'B206',CL5'SCKC',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B207',CL5'STCKC',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B208',CL5'SPT',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B209',CL5'STPT',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B20A',CL5'SPKA',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B20B',CL5'IPK',AL1(S2),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B20D',CL5'PTLB',AL1(S2),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B210',CL5'SPX',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B211',CL5'STPX',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B212',CL5'STAP',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B218',CL5'PC',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B219',CL5'SAC',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B21A',CL5'CFC',AL1(S3),AL1(0),AL1(4),XL2'8000'\n         DC    XL2'B221',CL5'IPTE',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B222',CL5'IPM',AL1(RRE2),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B223',CL5'IVSK',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B224',CL5'IAC',AL1(RRE2),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B225',CL5'SSAR',AL1(RRE2),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B226',CL5'EPAR',AL1(RRE2),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B227',CL5'ESAR',AL1(RRE2),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B228',CL5'PT',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B229',CL5'ISKE',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B22A',CL5'RRBE',AL1(RRE1),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B22B',CL5'SSKE',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B22C',CL5'TB',AL1(RRE1),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B22D',CL5'DXR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'\n         DC    XL2'B230',CL5'CSCH',AL1(S2),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B231',CL5'HSCH',AL1(S2),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B232',CL5'MSCH',AL1(S3),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B233',CL5'SSCH',AL1(S3),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B234',CL5'STSCH',AL1(S3),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B235',CL5'TSCH',AL1(S3),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B236',CL5'TPI',AL1(S3),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B237',CL5'SAL',AL1(S2),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B238',CL5'RSCH',AL1(S2),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B239',CL5'STCRW',AL1(S3),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B23A',CL5'STCPS',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B23B',CL5'RCHP',AL1(S2),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B23C',CL5'SCHM',AL1(S2),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B240',CL5'BAKR',AL1(RRE1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B241',CL5'CKSM',AL1(RRE1),AL1(0),AL1(1),XL2'8014'\n         DC    XL2'B244',CL5'SQDR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B245',CL5'SQER',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B246',CL5'STURA',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B247',CL5'MSTA',AL1(RRE2),AL1(0),AL1(0),XL2'0002'\n         DC    XL2'B248',CL5'PALB',AL1(RRE3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B249',CL5'EREG',AL1(RRE1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B24A',CL5'ESTA',AL1(RRE1),AL1(0),AL1(1),XL2'0002'\n         DC    XL2'B24B',CL5'LURA',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B24C',CL5'TAR',AL1(RRE1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'B24D',CL5'CPYA',AL1(RRE1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B24E',CL5'SAR',AL1(RRE1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B24F',CL5'EAR',AL1(RRE1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B252',CL5'MSR',AL1(RRE1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B254',CL5'MVPG',AL1(RRE1),AL1(0),AL1(1),XL2'0010'\n         DC    XL2'B255',CL5'MVST',AL1(RRE1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'B257',CL5'CUSE',AL1(RRE1),AL1(0),AL1(4),XL2'0006'\n         DC    XL2'B258',CL5'BSG',AL1(RRE1),AL1(0),AL1(0),XL2'0000'\n         DC    XL2'B25A',CL5'BSA',AL1(RRE1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B25D',CL5'CLST',AL1(RRE1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'B25E',CL5'SRST',AL1(RRE1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'B277',CL5'RP',AL1(S3),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B278',CL5'STCKE',AL1(S3),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'B279',CL5'SACF',AL1(S3),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'B27D',CL5'STSI',AL1(S3),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'B299',CL5'SRNM',AL1(S3),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B29C',CL5'STFPC',AL1(S3),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B29D',CL5'LFPC',AL1(S3),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B2A5',CL5'TRE',AL1(RRE1),AL1(0),AL1(1),XL2'8012'\n         DC    XL2'B2A6',CL5'CUUTF',AL1(RRE1),AL1(0),AL1(1),XL2'0016'\n         DC    XL2'B2A7',CL5'CUTFU',AL1(RRE1),AL1(0),AL1(1),XL2'0000'\n         DC    XL2'B2FF',CL5'TRAP4',AL1(S3),AL1(0),AL1(0),XL2'0000'\n         DC    12X'FF'              END OF TABLE\n***********************************************************************\n*TABLES OF TWO-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS B3               *\n***********************************************************************\n         DS    0F\nOCTWOB3  DS    0XL12\n         DC    XL2'B300',CL5'LPEBR',AL1(RRE1),AL1(FP),AL1(10),XL2'0000'\n         DC    XL2'B301',CL5'LNEBR',AL1(RRE1),AL1(FP),AL1(7),XL2'0000'\n         DC    XL2'B302',CL5'LTEBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'B303',CL5'LCEBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'B304',CL5'LDEBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B305',CL5'LXDBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'B306',CL5'LXEBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'B307',CL5'MXDBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'B308',CL5'KEBR',AL1(RRE1),AL1(FP),AL1(13),XL2'0000'\n         DC    XL2'B309',CL5'CEBR',AL1(RRE1),AL1(FP),AL1(13),XL2'0000'\n         DC    XL2'B30A',CL5'AEBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'B30B',CL5'SEBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'B30C',CL5'MDEBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B30D',CL5'DEBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B30E',CL5'MAEBR',AL1(RRF1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B30F',CL5'MSEBR',AL1(RRF1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B310',CL5'LPDBR',AL1(RRE1),AL1(FP),AL1(10),XL2'0000'\n         DC    XL2'B311',CL5'LNDBR',AL1(RRE1),AL1(FP),AL1(7),XL2'0000'\n         DC    XL2'B312',CL5'LTDBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'B313',CL5'LCDBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'B314',CL5'SQEBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B315',CL5'SQDBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B316',CL5'SQXBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'\n         DC    XL2'B317',CL5'MEEBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B318',CL5'KDBR',AL1(RRE1),AL1(FP),AL1(13),XL2'0000'\n         DC    XL2'B319',CL5'CDBR',AL1(RRE1),AL1(FP),AL1(13),XL2'0000'\n         DC    XL2'B31A',CL5'ADBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'B31B',CL5'SDBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'B31C',CL5'MDBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B31D',CL5'DDBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B31E',CL5'MADBR',AL1(RRF1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B31F',CL5'MSDBR',AL1(RRF1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B324',CL5'LDER',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B325',CL5'LXDR',AL1(RRE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'B326',CL5'LXER',AL1(RRE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'B336',CL5'SQXR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'\n         DC    XL2'B337',CL5'MEER',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B340',CL5'LPXBR',AL1(RRE1),AL1(FP),AL1(10),XL2'0180'\n         DC    XL2'B341',CL5'LNXBR',AL1(RRE1),AL1(FP),AL1(7),XL2'0180'\n         DC    XL2'B342',CL5'LTXBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0180'\n         DC    XL2'B343',CL5'LCXBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0180'\n         DC    XL2'B344',CL5'LEDBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B345',CL5'LDXBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'\n         DC    XL2'B346',CL5'LEXBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'\n         DC    XL2'B347',CL5'FIXBR',AL1(RRF2),AL1(FP),AL1(0),XL2'01C0'\n         DC    XL2'B348',CL5'KXBR',AL1(RRE1),AL1(FP),AL1(13),XL2'0180'\n         DC    XL2'B349',CL5'CXBR',AL1(RRE1),AL1(FP),AL1(13),XL2'0180'\n         DC    XL2'B34A',CL5'AXBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0180'\n         DC    XL2'B34B',CL5'SXBR',AL1(RRE1),AL1(FP),AL1(14),XL2'0180'\n         DC    XL2'B34C',CL5'MXBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'\n         DC    XL2'B34D',CL5'DXBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'\n         DC    XL2'B350',CL5'TBEDR',AL1(RRF2),AL1(FP),AL1(14),XL2'0040'\n         DC    XL2'B351',CL5'TBDR',AL1(RRF2),AL1(FP),AL1(14),XL2'0040'\n         DC    XL2'B353',CL5'DIEBR',AL1(RRF3),AL1(FP),AL1(1),XL2'8040'\n         DC    XL2'B357',CL5'FIEBR',AL1(RRF2),AL1(FP),AL1(0),XL2'0040'\n         DC    XL2'B358',CL5'THDER',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'B359',CL5'THDR',AL1(RRE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'B35B',CL5'DIDBR',AL1(RRF3),AL1(FP),AL1(1),XL2'8040'\n         DC    XL2'B35F',CL5'FIDBR',AL1(RRF2),AL1(FP),AL1(0),XL2'0040'\n         DC    XL2'B360',CL5'LPXR',AL1(RRE1),AL1(FP),AL1(10),XL2'0180'\n         DC    XL2'B361',CL5'LNXR',AL1(RRE1),AL1(FP),AL1(7),XL2'0180'\n         DC    XL2'B362',CL5'LTXR',AL1(RRE1),AL1(FP),AL1(8),XL2'0180'\n         DC    XL2'B363',CL5'LCXR',AL1(RRE1),AL1(FP),AL1(8),XL2'0180'\n         DC    XL2'B365',CL5'LXR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'\n         DC    XL2'B366',CL5'LEXR',AL1(RRE1),AL1(FP),AL1(0),XL2'0100'\n         DC    XL2'B367',CL5'FIXR',AL1(RRE1),AL1(FP),AL1(0),XL2'0180'\n         DC    XL2'B369',CL5'CXR',AL1(RRE1),AL1(FP),AL1(2),XL2'0180'\n         DC    XL2'B374',CL5'LZER',AL1(RRE2),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B375',CL5'LZDR',AL1(RRE2),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B376',CL5'LZXR',AL1(RRE2),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'B377',CL5'FIER',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B37F',CL5'FIDR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B384',CL5'SFPC',AL1(RRE2),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B38C',CL5'EFPC',AL1(RRE2),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B394',CL5'CEFBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B395',CL5'CDFBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B396',CL5'CXFBR',AL1(RRE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'B398',CL5'CFEBR',AL1(RRF2),AL1(FP),AL1(14),XL2'0040'\n         DC    XL2'B399',CL5'CFDBR',AL1(RRF2),AL1(FP),AL1(14),XL2'0040'\n         DC    XL2'B39A',CL5'CFXBR',AL1(RRF2),AL1(FP),AL1(14),XL2'0100'\n         DC    XL2'B3B4',CL5'CEFR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B3B5',CL5'CDFR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B3B6',CL5'CXFR',AL1(RRE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'B3B8',CL5'CFER',AL1(RRF2),AL1(FP),AL1(14),XL2'0040'\n         DC    XL2'B3B9',CL5'CFDR',AL1(RRF2),AL1(FP),AL1(14),XL2'0040'\n         DC    XL2'B3BA',CL5'CFXR',AL1(RRF2),AL1(FP),AL1(14),XL2'0140'\n         DC    12X'FF'              END OF TABLE\n***********************************************************************\n*TABLES OF TWO-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS E5               *\n***********************************************************************\n         DS    0F\nOCTWOE5  DS    0XL12\n         DC    XL2'E500',CL5'LASP',AL1(SSE1),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'E501',CL5'TPROT',AL1(SSE1),AL1(PR),AL1(1),XL2'0000'\n         DC    XL2'E50E',CL5'MVCSK',AL1(SSE1),AL1(PR),AL1(0),XL2'0000'\n         DC    XL2'E50F',CL5'MVCDK',AL1(SSE1),AL1(PR),AL1(0),XL2'0000'\n         DC    12X'FF'              END OF TABLE\n***********************************************************************\n*TABLES OF TWO-BYTE INSTRUCTIONS WHOSE FIRST BYTE IS ED               *\n***********************************************************************\n         DS    0F\nOCTWOED  DS    0XL12\n         DC    XL2'ED04',CL5'LDEB',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED05',CL5'LXDB',AL1(RXE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'ED06',CL5'LXEB',AL1(RXE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'ED07',CL5'MXDB',AL1(RXE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'ED08',CL5'KEB',AL1(RXE1),AL1(FP),AL1(13),XL2'0000'\n         DC    XL2'ED09',CL5'CEB',AL1(RXE1),AL1(FP),AL1(13),XL2'0000'\n         DC    XL2'ED0A',CL5'AEB',AL1(RXE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'ED0B',CL5'SEB',AL1(RXE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'ED0C',CL5'MDEB',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED0D',CL5'DEB',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED0E',CL5'MAEB',AL1(RXF1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED0F',CL5'MSEB',AL1(RXF1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED10',CL5'TCEB',AL1(RXE1),AL1(FP),AL1(1),XL2'0000'\n         DC    XL2'ED11',CL5'TCDB',AL1(RXE1),AL1(FP),AL1(1),XL2'0000'\n         DC    XL2'ED12',CL5'TCXB',AL1(RXE1),AL1(FP),AL1(1),XL2'0080'\n         DC    XL2'ED14',CL5'SQEB',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED15',CL5'SQDB',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED17',CL5'MEEB',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED18',CL5'KDB',AL1(RXE1),AL1(FP),AL1(13),XL2'0000'\n         DC    XL2'ED19',CL5'CDB',AL1(RXE1),AL1(FP),AL1(13),XL2'0000'\n         DC    XL2'ED1A',CL5'ADB',AL1(RXE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'ED1B',CL5'SDB',AL1(RXE1),AL1(FP),AL1(14),XL2'0000'\n         DC    XL2'ED1C',CL5'MDB',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED1D',CL5'DDB',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED1E',CL5'MADB',AL1(RXF1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED1F',CL5'MSDB',AL1(RXF1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED24',CL5'LDE',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED25',CL5'LXD',AL1(RXE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'ED26',CL5'LXE',AL1(RXE1),AL1(FP),AL1(0),XL2'0080'\n         DC    XL2'ED34',CL5'SQE',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED35',CL5'SQD',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    XL2'ED37',CL5'MEE',AL1(RXE1),AL1(FP),AL1(0),XL2'0000'\n         DC    12X'FF'              END OF TABLE\n*\n***********************************************************************\n*     ***** CONDITION CODE TABLE ENTRIES FOR THE CC COLUMN *****      *\n* IN THE TABLE, NON-NUMERIC ENTRIES GIVE THE INSTRUCTION MNEMONIC TO  *\n* BE USED WHEN THE MASK IN THE INSTRUCTION MATCHES THE COLUMN NUMBER. *\n* WHEN THE ENTRY IS NUMERIC, IT IS THE CONDITION TO BE USED, AND THE  *\n* MNEMONIC WILL BE BC OR BCR.                                         *\n***********************************************************************\n*            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F           *\n***********************************************************************\nCC01 DC CL48'NOP1  2  3  4  5  6  7  8  9  10 11 12 13 14 B  '\nCC02 DC CL48'NOP1  BH 3  BL 5  6  BNEBE 9  10 BNL12 BNH14 B  '\nCC03 DC CL48'NOP1  2  3  4  5  6  BNZBZ 9  10 11 12 13 14 B  '\nCC04 DC CL48'NOP1  2  3  4  5  6  BNEBE 9  10 11 12 13 14 B  '\nCC05 DC CL48'NOP1  BH 3  BL 5  6  BNEBE 9  10 BNL12 13 14 B  '\nCC06 DC CL48'NOPBO BP 3  4  5  6  BNZBZ 9  10 11 12 13 14 B  '\nCC07 DC CL48'NOP1  2  3  BM 5  6  BNZBZ 9  10 11 12 13 14 B  '\nCC08 DC CL48'NOP1  BP 3  BM 5  6  BNZBZ 9  10 BNM12 BNP14 B  '\nCC09 DC CL48'NOPBO BP 3  BM 5  6  BNZBZ 9  10 BNM12 BNPBNOB  '\nCC0A DC CL48'NOP1  BP 3  4  5  6  BNZBZ 9  10 11 12 13 14 B  '\nCC0B DC CL48'NOPBO 2  3  BM 5  6  BNZBZ 9  10 BNM12 13 BNOB  '\nCC0C DC CL48'NOPBO 2  3  4  5  6  BNZBZ 9  10 11 12 13 BNOB  '\nCC0D DC CL48'NOP1  BH 3  BL 5  6  BNEBE 9  10 11 12 13 14 B  '\nCC0E DC CL48'NOP1  BP 3  BM 5  6  BNZBZ 9  10 11 12 13 14 B  '\n***********************************************************************\n*  ***** MACHINE AND CODING FORMATS FOR THE FMT COLUMN                *\n***********************************************************************\n* THE FORMAT TABLE BELOW SHOWS FOR EACH FMT NUMBER THE INSTRUCTION    *\n* FORMAT NAME, MACHINE INSTRUCTION FORMAT, AND CODING FORMAT. THE     *\n* MACHINE INSTRUCTION SHOWS HOW THE INSTRUCTION IS FORMATTED IN MEMORY*\n* DURING EXECUTION, WHILE THE CODING FORMAT SHOWS HOW THE INSTRUCTION *\n* IS CODED BY THE ASSEMBLER PROGRAMMER.                               *\n* MACHINE INSTRUCTION FORMATS SHOW EACH NYBBLE (HALF-BYTE) OF THE     *\n* INSTRUCTION, AND THE DATA CONTAINED IN THAT NYBBLE. DATA CONTENT    *\n* ABBREVIATIONS ARE: OC=OP-CODE, R1-R4 ARE REGISTER OPERANDS, M1-M4   *\n* ARE MASK OPERANDS, I1-I4 ARE IMMEDIATE OPERANDS, LL IS A SINGLE     *\n* INSTRUCTION LENGTH, L1 AND L2 ARE OPERAND (1 AND 2) LENGTHS.        *\n***********************************************************************\nFP       EQU  64     FLOATING POINT INSTRUCTION\nPR       EQU  32     PRIVILEGED INSTRUCTION\nE1       EQU  1      OCOCOCOC                 <==> (NONE)\nRI1      EQU  2      OCOCR1OCI2I2I2I2         <==> R1,I2\nRR1      EQU  3      OCOCR1R2                 <==> R1,R2\nRR2      EQU  4      OCOCI1I1                 <==> I1\nRR3      EQU  5      OCOCR1--                 <==> R1\nRR4      EQU  29     OCOCM1R2                 <==> M1,R2\nRRE1     EQU  6      OCOCOCOC----R1R2         <==> R1,R2\nRRE2     EQU  7      OCOCOCOC----R1--         <==> R1\nRRE3     EQU  8      OCOCOCOC--------         <==> (NONE)\nRRF1     EQU  9      OCOCOCOCR1--R3R2         <==> R1,R3,R2\nRRF2     EQU  10     OCOCOCOCM3--R1R2         <==> R1,M3,R2\nRRF3     EQU  11     OCOCOCOCR3M4R1R2         <==> R1,R3,R2,M4\nRS1      EQU  12     OCOCR1R3B2D2D2D2         <==> R1,R3,D2(B2)\nRS2      EQU  13     OCOCR1--B2D2D2D2         <==> R1,D2(B2)\nRS3      EQU  14     OCOCR1M3B2D2D2D2         <==> R1,M3,D2(B2)\nRSI1     EQU  15     OCOCR1R3I2I2I2I2         <==> R1,R3,I2\nRX1      EQU  16     OCOCR1X2B2D2D2D2         <==> R1,D2(X2,B2)\nRX2      EQU  17     OCOCM1X2B2D2D2D2         <==> M1,D2(X2,B2)\nRXE1     EQU  18     OCOCR1X2B2D2D2D2----OCOC <==> R1,D2(X2,B2)\nRXF1     EQU  19     OCOCR3X2B2D2D2D2R1--OCOC <==> R1,R3,D2(X2,B2)\nS1       EQU  20     OCOC----B2D2D2D2         <==> D2(B2)\nS2       EQU  21     OCOCOCOC--------         <==> (NONE)\nS3       EQU  30     OCOCOCOCB2D2D2D2         <==> D2(B2)\nSI1      EQU  22     OCOCI2I2B1D1D1D1         <==> D1(B1),I2\nSS1      EQU  23     OCOCLLLLB1D1D1D1B2D2D2D2 <==> D1(LL,B1),D2(B2)\nSS2      EQU  24     OCOCL1L2B1D1D1D1B2D2D2D2 <==> D1(L1,B1),D2(L2,B2)\nSS3      EQU  25     OCOCR1R3B2D2D2D2B4D4D4D4 <==> R1,D2(B2),R3,D4(B4)\nSS4      EQU  26     OCOCR1R3B1D1D1D1B2D2D2D2 <==> D1(R1,B1),D2(B2),R3\nSS5      EQU  27     OCOCL1I3B1D1D1D1B2D2D2D2 <==> D1(L1,B1),D2(B2),I3\nSSE1     EQU  28     OCOCOCOCB1D1D1D1B2D2D2D2 <==> D1(B1),D2(B2)\n***********************************************************************\n*  PARAMETER AREA PASSED TO THE READLMOD SUBROUTINE                   *\n***********************************************************************\nPARMAREA DS    0F          READLMOD PARAMETER AREA\nPRMDDNAM DC    CL8'SYSLIB'    DDNAME FOR LOADLIB CONTAINING MEMBER\nPRMEMBER DC    CL8' '         MEMBER NAME\nPRMCSECT DC    CL8' '         CSECT NAME\nPRMREQST DC    CL8' '         NAME OF DATA TO BE RETRIEVED: ESD, RLD,\n*                                TEXT, SYM, IDRU, IDRL, IDRZ, IDRB,\n*                                NAME, OR MAP\nPRMCURSR DC    F'0'        CURSOR VALUE. CALLER SETS THIS TO ZERO\n*                             BEFORE A FIRST CALL FOR A SET OF DATA,\n*                             THEN LEAVES IT AS-IS WHEN RETURNING FOR\n*                             ADDITIONAL DATA UNTIL IT HAS ALL BEEN\n*                             RETURNED. CURRENT VALUE IS RETURNED BY\n*                             THIS SUBROUTINE AFTER EACH CALL.\nPRMRETCD DC    F'0'        RETURN CODE FROM IEWBIND (S/B ZERO)\nPRMRSNCD DC    F'0'        REASON CODE FROM IEWBIND (ZERO MEANS\n*                             MORE DATA OF THIS TYPE IS AVAILABLE AND\n*                             WILL BE RETURNED IN SUBSEQUENT CALLS.\n*                             4 MEANS THE DATA IN THE BUFFER IS ALL\n*                             THAT IS AVAILABLE OF THE REQUESTED TYPE\nPRMCOUNT DC    F'0'        NUMBER ELEMENTS AVAILABLE IN THE BUFFER\nPRMBUFAD DC    A(0)        ADDRESS OF THE DATA BUFFER HEADER. THE\n*                             HEADER IS 32 BYTES LONG, FOLLOWED BY\n*                             THE DATA ELEMENTS.\nPRMERROR DS    CL1         ERROR INDICATOR ON RETURN:\nPRMOK    EQU   C' '           SUCCESSFUL READLMOD CALL\nPRMPRMER EQU   C'P'           PARAMETER ERROR\nPRMACERR EQU   C'E'           IEWBIND MACRO ERROR OCCURRED\n*********************************************************************\n*             DCB'S                                                 *\n*********************************************************************\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,                      X\n               RECFM=FBA,LRECL=133\nSYSOUT   DCB   DSORG=PS,MACRF=PM,DDNAME=SYSOUT,                        X\n               RECFM=FB,LRECL=80\nSYSIN    DCB   DSORG=PS,MACRF=GM,DDNAME=SYSIN,EODAD=RCEOF,             X\n               RECFM=FB,LRECL=80\n         LTORG\nRESOURCE CSECT\n*********************************************************************\n*             REGISTER EQUATES                                      *\n*********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n***********************************************************************\n* THE TWO FOLLOWING DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF         *\n* EXTERNAL SYMBOL DICTIONARY (ESD) BUFFER:                            *\n*    ESDHEADR DESCRIBES THE BUFFER HEADER.                            *\n*    ESDENTRY DESCRIBES EACH ESD ENTRY THAT FOLLOWS THE HEADER.       *\n***********************************************************************\nESDHEADR DSECT ,    DESCRIBE THE IEWBUFF ESD BUFFER HEADER              01-IEWBU\nESDHBUFI DS    CL8  BUFFER EYECATCHER.                                  02-00073\nESDHBUFL DS    F    TOTAL BUFFER LENGTH INCLUDING THIS                  02-00074\nESDHVERS DS    AL1  VERSION OF BUFFER.                                  02-00077\n         DS    AL3  RESERVED. MUST BE ZERO.                             02-00078\nESDHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.                        02-00079\nESDHENTC DS    F    NUMBER ESDENTRY ELEMENTS CONTAINED IN THIS BUFFER   02-00080\nESDHNAMO DS    F    OFFSET OF NAME IN NAMES LIST AREA.                  02-00081\nESDHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.                  02-00082\nESDHEND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.                      02-00083\n*\nESDENTRY DSECT ,    DESCRIBE ESDENTRY. OCCURS ESDHENTC TIMES            01-IEWBU\nESDTYPE  DS    CL2  TYPE OF ESD ENTRY.                                  01-IEWBU\nESDTYPEQ DS    CL2  ESD RECORD TYPE QUALIFIER                           01-IEWBU\nESDNAMES DS    CL1  NAME SPACE OF SYMBOL                                01-IEWBU\nESDSCOPE DS    CL1  SCOPE OF THE SYMBOL                                 01-IEWBU\nESDNAME  DS    0CL6 SYMBOL REPRESENTED BY ESD RECORD                    01-IEWBU\nESDNAMEC DS    H      LENGTH OF THE NAME.                               01-IEWBU\nESDNAMEP DS    A      POINTS TO THE NAME OF THE SYMBOL (BLANK = $PRIV)  01-IEWBU\nESDSYMAT DS    BL1  SYMBOL ATTRIBUTE FLAGS                              01-IEWBU\nESDSTRNG EQU   X'80'  ON=STRONG REFERENCE OR DEFINITION                 01-IEWBU\nESDRNMBL EQU   X'40'  ON=THIS SYMBOL IS MAPPED,NOT RENAMED              01-IEWBU\nESDDESCL EQU   X'20'  ON=SYMBOL DEFINES OR REFERENCES A LINKAGE BLOCK   01-IEWBU\nESDMNGLD EQU   X'10'  ON=NAME MAY BE MANGLED                            01-IEWBU\nESDXPLNK EQU   X'08'  ON=USES XPLINK LINKAGE CONVENTIONS                01-IEWBU\n         DS    CL1                                                      01-IEWBU\nESDRESCS DS    0CL6 NAME OF OWNING OR CONTAINING SECTION                01-IEWBU\nESDRESCL DS    H       LENGTH OF THE RESIDENT SECTION NAME              01-IEWBU\nESDRESCP DS    A       POINTER TO NAME OF SECTION WHERE THIS SPEC. OF   01-IEWBU\n*                        THE SYMBOL RESIDES. FOR LD, PR.\nESDLENG  DS    F    LENGTH OF DEFINED ELEMENT                           01-IEWBU\nESDALIGN DS    XL1  ALIGNMENT SPECIFICATION FOR SD, PR                  01-IEWBU\nESDUSBLT DS    XL1  REUSABILITY OF SD                                   01-IEWBU\nESDAMODE DS    XL1  ADDRESSING MODE OF SD                               01-IEWBU\nESDRMODE DS    XL1  RMODE OF SD                                         01-IEWBU\nESDRECFM DS    H    RECORD FORMAT FOR CLASS                             01-IEWBU\nESDLOADF DS    BL1  LOAD ATTRIBUTES                                     01-IEWBU\nESDRO    EQU   X'80'   READ-ONLY                                        01-IEWBU\nESDNL    EQU   X'40'   DO NOT LOAD WITH MODULE                          01-IEWBU\nESDMOVE  EQU   X'20'   MOVEABLE                                         01-IEWBU\nESDSHR   EQU   X'10'   SHAREABLE                                        01-IEWBU\nESDDEFER EQU   X'08'   DEFERRED LOAD                                    01-IEWBU\nESDBINDF DS    BL1  BIND ATTRIBUTES                                     01-IEWBU\nESDGEND  EQU   X'80'   BINDER-GENERATED                                 01-IEWBU\nESDNOCLS EQU   X'40'   NO CLASS DATA AVAILABLE                          01-IEWBU\nESDVL    EQU   X'20'   VARIABLE LENGTH RECORDS                          01-IEWBU\nESDDESCD EQU   X'10'   DESCRIPTIVE DATA                                 01-IEWBU\nESDINIT  EQU   X'08'   HAS PART INITIALIZERS                            01-IEWBU\nESDFILLX EQU   X'04'   ILL HAS BEEN SET                                 01-IEWBU\nESDPADST EQU   X'02'   CLASS HAS PADDING AT START                       01-IEWBU\nESDBINDC DS    BL1  TYPE OF PROGRAM CODE DESCRIBED BY SYMBOL            01-IEWBU\nESDMETH  EQU   X'30'   BINDING METHOD                                   01-IEWBU\n*                        '00'B = CATENATE\n*                        '01'B = MERGE\n*                        '1-'B = RESERVED\nESDTXTTY EQU   X'0F'   TEXT TYPE                                        01-IEWBU\n*                        '0000'B = UNSPECIFIED\n*                        '0001'B = INSTRUCTIONS\n*                        '0010'B = DATA\n*                        '0011'B = TRANSLATOR DEFN\n         DS    XL1                                                      01-IEWBU\nESDXATCL DS    H    LENGTH OF XATTR CLASS NAME                          01-IEWBU\nESDXATCP DS    A    PTR TO EXTENDED ATTRIBUTES CLASS NAME               01-IEWBU\nESDXATOF DS    F    EXTENDED ATTRIBUTES OFFSET                          01-IEWBU\nESDSEGMN DS    H    OVERLAY SEGMENT NUMBER OF SECTION                   01-IEWBU\nESDREGN  DS    H    OVERLAY REGION NUMBER OF SECTION                    01-IEWBU\nESDSIGN  DS    CL8  INTERFACE SIGNATURE                                 01-IEWBU\nESDAUTOC DS    BL1  AUTOCALL SPEC. APPLIES TO REFERENCES                01-IEWBU\nESDNVRCL EQU   X'80'      NEVERCALL WAS SPECIFIED                       01-IEWBU\nESDMINOR EQU   X'40'      AUTOCALLED FROM LPA                           01-IEWBU\nESDSTAT  DS    BL1  STATUS                                              01-IEWBU\nESDRESLV EQU   X'80'      SYMBOL IS RESOLVED                            01-IEWBU\nESDACPRC EQU   X'40'      PROCESSED BY AUTOCALL                         01-IEWBU\nESDINCLD EQU   X'20'      INCLUDE ATTEMPTED                             01-IEWBU\nESDNOTFD EQU   X'10'      MEMBER NOT FOUND                              01-IEWBU\nESDEXTRN EQU   X'08'      RESOLVED OUTSIDE MODULE                       01-IEWBU\nESDNOCAL EQU   X'04'      NOCALL/NEVERCALL                              01-IEWBU\nESDNOREF EQU   X'02'      NO STRONG REFERENCES                          01-IEWBU\nESDLIBRY EQU   X'01'      SPECIAL CALL LIBRARY REQUESTED                01-IEWBU\nESDTGTL  DS    H    LENGTH OF THE TARGET.                               01-IEWBU\nESDTGTP  DS    A    POINTS TO NAME OF SECTION WHERE SYMBOL RESIDES. FOR 01-IEWBU\n*                      EXTERNAL REFERENCES.\n         DS    H                                                        01-IEWBU\nESDCNTCL DS    H    LENGTH OF THE CLASS                                 01-IEWBU\nESDCNTCP DS    A    POINTS TO NAME OF CONTAINING CLASS                  01-IEWBU\nESDELOFF DS    F    OFFSET WITHIN THE CLASS ELEMENT                     01-IEWBU\nESDCLOFF DS    F    OFFSET WITHIN THE CLASS SEGMENT                     01-IEWBU\n         DS    H                                                        01-IEWBU\nESDADAL  DS    H    ASSOCIATED DATA LENG                                01-IEWBU\nESDADAP  DS    A    POINTS TO ASSOCIATED DATA                           01-IEWBU\n         DS    F                                                        01-IEWBU\nESDPRTY  DS    F    BINDING SEQUENCE                                    01-IEWBU\nESDNTEND DS    0F                                                       01-IEWBU\n***********************************************************************\n* THE TWO FOLLOWING DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF NAME    *\n* BUFFER:                                                             *\n*    BNLHEADR DESCRIBES THE BUFFER HEADER.                            *\n*    BNLENTRY DESCRIBES EACH ENTRY THAT FOLLOWS THE HEADER.           *\n***********************************************************************\nBNLHEADR DSECT ,    DESCRIBES THE HEADER FOR THE IEWBUFF NAME BUFFER    01-IEWBU\nBNLHBUFI DS    CL8  BUFFER EYECATCHER.                                  02-00073\nBNLHBUFL DS    F    TOTAL BUFFER LENGTH, INCLUDING THIS                 02-00074\nBNLHVER  DS    AL1  VERSION OF BUFFER.                                  02-00077\n         DS    AL3                                                      02-00078\nBNLHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.                        02-00079\nBNLHENTC DS    F    NUMBER BNLENTRY ELEMENTS CONTAINED IN THIS BUFFER   02-00080\nHNAMO DS    F    OFFSET OF NAME IN NAMES LIST AREA.                     02-00081\nBNLHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.                  02-00082\nBNLHEND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.                      02-00083\n*                                                                       02-00121\nBNLENTRY DSECT ,    DESCRIBES NAME BUFFER ENTRY. OCCURS BNLHENTC TIMES  01-IEWBU\nBNLCLSL  DS    F    CLASS LENGTH (FOR CLASS NAMES)                      01-IEWBU\nBNLBINDF DS    XL1  FLAG BITS                                           01-IEWBU\nBNLBFGEN EQU   X'80'  GENERATED BY BINDER                               01-IEWBU\nBNLBFEMP EQU   X'40'  NO DATA PRESENT                                   01-IEWBU\nBNLBFVL  EQU   X'20'  VARYING LENGTH RECORDS                            01-IEWBU\nBNLBFDES EQU   X'10'  DESCRIPTIVE DATA (NON-TEXT)                       01-IEWBU\nBNLBFINI EQU   X'08'  CLASS HAS INITIAL DATA                            01-IEWBU\nBNLBFFIL EQU   X'04'  FILL CHARACTER SPECIFIED                          01-IEWBU\nBNLBFERR EQU   X'01'  CLASS VALIDATION ERROR                            01-IEWBU\nBNLPAD1  DS    XL1  1 BYTE PAD FOR BOUNDARY ALIGNMENT                   01-IEWBU\nBNLNAMEL DS    H    NBR SIGNIFICANT CHARS IN CLASS/SECTION NAME         01-IEWBU\nBNLNAMEP DS    AL4  POINTER TO CLASS OR SECTION NAME                    01-IEWBU\nBNLELEMC DS    F    NUMBER ELEMENTS IN CLASS OR SECT                    01-IEWBU\nBNLEND   DS    0F                                                       01-IEWBU\n***********************************************************************\n* THE TWO FOLLOWING DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF         *\n* RELOCATION DICTIONARY (RLD) BUFFER:                                 *\n*    RLDHEADR DESCRIBES THE BUFFER HEADER.                            *\n*    RLDENTRY DESCRIBES EACH RLD ENTRY THAT FOLLOWS THE HEADER.       *\n***********************************************************************\nRLDHEADR DSECT ,    DESCRIBE IEWBUFF RLD BUFFER HEADER                  01-IEWBU\nRLDHBUFI DS    CL8  BUFFER EYECATCHER.                                  02-00073\nRLDHBUFL DS    F    TOTAL BUFFER LENGTH, INCLUDING THIS                 02-00074\nRLDHVER  DS    AL1  VERSION OF BUFFER.                                  02-00077\n         DS    XL3                                                      02-00078\nRLDHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.                        02-00079\nRLDHENTC DS    F    NUMBER RLDENTRY ELEMENTS CONTAINED IN THIS BUFFER   02-00080\nRLDHNAMP DS    F    OFFSET OF NAME IN NAMES LIST AREA.                  02-00081\nRLDHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.                  02-00082\nRLDHEND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.                      02-00083\n*\nRLDENTRY DSECT ,    DESCRIBE RLD BUFFER ENTRY. OCCURS RLDHENTC TIMES    01-IEWBU\nRLDTYPE  DS    XL1  ADCON TYPE.                                         01-IEWBU\nRLDSTAT  DS    XL1  ADCON RELOCATION STATUS.                            01-IEWBU\nRLDRESNL DS    H    LENGTH OF THE RESIDENT.                             01-IEWBU\nRLDRESNP DS    A    POINTS TO NAME OF SECTION WHERE ADCON RESIDES       01-IEWBU\nRLDADCNL DS    H    LENGTH OF THE ADCON.                                01-IEWBU\nRLDRESCL DS    H    LENGTH OF THE RESIDENT CLASS NAME                   01-IEWBU\nRLDRESCP DS    A    POINTS TO NAME OF CLASS WHERE ADCON RESIDES         01-IEWBU\nRLDRESOF DS    F    OFFSET OF ADDRESS CONSTANT IN ELEMENT OR PART:      01-IEWBU\n*                      RLDRESPL=0: ELEMENT; RLDRESPL>0: PART\nRLDCLOF  DS    F    OFFSET OF THE ADDRESS WITHIN CLASS SEGMENT          01-IEWBU\nRLDADCNB DS    XL1  ADCON BOUNDARY SPECIFICATION.                       01-IEWBU\nRLDBNDAT DS    BL1  ADCON BOUNDARY STATUS                               01-IEWBU\nRLDDIR   EQU   X'80'   RELOCATION SIGN: '0' = POS; '1' = NEG            01-IEWBU\nRLDHOBST EQU   X'40'   SET HIGH ORDER BIT FROM AMODE OF TARGET          01-IEWBU\nRLDINTXT EQU   X'20'   INTERNAL/EXTERNAL: '0' = INT; '1' = EXT          01-IEWBU\nRLDHOBCH EQU   X'10'   HIGH ORDER BIT CHANGED BY BINDER                 01-IEWBU\nRLDPARTR EQU   X'08'   ADCON LOCATED IN PART                            01-IEWBU\nRLDXATCL DS    H    LENGTH OF EXTENDED ATTR CLASS NAME                  01-IEWBU\nRLDXATCP DS    A    POINTER TO EXTENDED ATTRIBUTES CLASS NAME           01-IEWBU\nRLDXATOF DS    F    OFFSET OF EXTENDED ATTRIBUTES IN THE ELEMENT        01-IEWBU\nRLDNAMSP DS    XL1  NAME SPACE OF REFERENCE                             01-IEWBU\n         DS    XL1                                                      01-IEWBU\nRLDTGTNL DS    H    LENGTH OF THE TARGET NAME                           01-IEWBU\nRLDTGTNP DS    A    POINTER TO NAME OF SYMBOL TO WHICH ADCON POINTS     01-IEWBU\n         DS    XL2                                                      01-IEWBU\nRLDRESPL DS    H    RESIDENT PART LENGTH                                01-IEWBU\nRLDRESPP DS    A    RESIDENT PART POINTER                               01-IEWBU\nRLDEND   DS    0F                                                       01-IEWBU\n***********************************************************************\n* THE TWO FOLLOWING DSECT DESCRIBES THE CONTENT OF AN IEWBUFF         *\n* TEXT BUFFER                                                         *\n***********************************************************************\nTXTHEADR DSECT ,    DESCRIBE THE IEWBUFF TEXT BUFFER HEADER             01-IEWBU\nTXTHBUFI DS    CL8  BUFFER EYECATCHER.                                  02-00073\nTXTHBUFL DS    F    TOTAL BUFFER LENGTH, INCLUDING THIS                 02-00074\nTXTHVER  DS    AL1  VERSION OF BUFFER.                                  02-00077\n         DS    AL3                                                      02-00078\nTXTHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.                        02-00079\nTXTHENTC DS    F    NUMBER TEXT BYTES CONTAINED IN THIS BUFFER          02-00080\nTXTHNAMO DS    F    OFFSET OF NAME IN NAMES LIST AREA.                  02-00081\nTXTHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.                  02-00082\nTXTHEND  DS    0F   BEGINNING OF TEXT AREA                              02-00083\n*\nTXTENTRY DSECT ,    DESCRIBES TEXT AREA\nTXTBYTE  DS    0C   TEXT BYTE. OCCURS TXTHENTC TIMES                    02-00083\n***********************************************************************\n* THE TWO FOLLOWING DSECTS DESCRIBE THE CONTENT OF AN IEWBUFF IDRL    *\n* BUFFER:                                                             *\n*    IDLHEADR DESCRIBES THE BUFFER HEADER.                            *\n*    IDLENTRY DESCRIBES EACH ENTRY THAT FOLLOWS THE HEADER.           *\n***********************************************************************\nIDLHEADR DSECT ,    DESCRIBE THE IEWBUFF IDRL BUFFER HEADER             01-IEWBU\nIDLHBUFI DS    CL8  BUFFER EYECATCHER.                                  02-00073\nIDLHBUFL DS    F    TOTAL BUFFER LENGTH, INCLUDING THIS                 02-00074\nIDLHVER  DS    AL1  VERSION OF BUFFER.                                  02-00077\n         DS    AL3                                                      02-00078\nIDLHENTL DS    F    LENGTH OF EACH BUFFER ENTRY.                        02-00079\nIDLHENTC DS    F    NUMBER IDLENTRY ELEMENTS CONTAINED IN THIS BUFFER   02-00080\nIDLHNAMO DS    F    OFFSET OF NAME IN NAMES LIST AREA.                  02-00081\nIDLHSTRP DS    F    ADDRESS OF BINDER NAMES LIST AREA.                  02-00082\nIDLHEND  DS    0F   BEGINNING OF 1ST BUFFER ENTRY.                      02-00083\n*                                                                       02-00121\nIDLENTRY DSECT ,    DESCRIBE IDRLENTRY. OCCURS IDLHENTC TIMES           01-IEWBU\nIDLPIDID DS    CL10 PROCESSOR IDENTIFICATION (PID ORDER NUMBER)         01-IEWBU\nIDLVER   DS    CL2  PROCESSOR VERSION  NUMBER.                          01-IEWBU\nIDLMODLV DS    CL2  PROCESSOR MODIFICATION LEVEL.                       01-IEWBU\nIDLDATPR DS    CL7  DATE OF COMPILATION OR ASSEMBLY (YYYYDDD)           01-IEWBU\n         DS    XL1                                                      01-IEWBU\nIDLRESNL DS    H    LENGTH OF THE RESIDENT.                             01-IEWBU\nIDLRESNP DS    AL4  POINTS TO NAME OF SECTION TO WHICH THIS APPLIES     01-IEWBU\nIDLEND   DS    0F                                                       01-IEWBU\n***********************************************************************\n* THIS DSECT DESCRIBES AN ENTRY IN THE LABEL TABLE                    *\n* THE TABLE ADDRESSES ARE LOCATED AT LBLTBADR, LBLTBEND, AND CURRLABL *\n* IF THE LENGTH OF LBLENTRY CHANGES, CHANGE HOLDLABL, AS WELL.        *\n***********************************************************************\nLBLDSECT DSECT ,                       DESCRIBES A LABEL TABLE ENTRY\nLBLENTRY DS    0CL16                   LABEL TABLE ENTRY\nLBLOFSET DS    F                           CSECT OFFSET TO THE LABEL\nLBLTYPE  DS    X                           ENTRY TYPE: 0C=DROP,10=USING\n*                                            18=DATA START, 1C=DATA END\n*                                            30=LABEL,40=ADCON,50=VCON\nLBLUREG  DS    X                           USING REGISTER\nLBLRLDLN DS    H                           LENGTH IF RLD ENTRY ELSE 0\nLBLLABEL DS    0CL8                        LABEL\nLBLINITU DS    XL4                         INITIAL REG VALUE FOR USING\n         DS    XL4\n***********************************************************************\n* DESCRIBES AN ENTRY IN AN OP-CODE TABLE                              *\n***********************************************************************\nOPCODES  DSECT ,                       DESCRIBES AN OP-CODE TABLE ENTRY\nOPCENTRY DS    0XL12                   OP-CODE TABLE ENTRY\nOPCODE1  DS    XL1                        OP-CODE BYTE 1\nOPCODE2  DS    XL1                        OP-CODE BYTE 2 OR ZERO\nOPCMNEM  DS    0CL5                       MNEMONIC -OR-\nOPCTWO2  DS    CL1                          '2' FOR 2-BYTE OP-CODES\n*                                           X'00' IF NOT AN OP-CODE\nOPCSRCH2 DS    AL4                          SRCH ADDRESS FOR 2-BYTE O-C\nOPCFORMT DS    XL1                        INSTRUCTION FORMAT CODE\nOPCFLAGS DS    XL1                        FLAGS: 40=FLOATING POINT INST\n*                                                20=PRIVILEGED\nOPCNDCOD DS    XL1                        CONDITION CODE TABLE LINE\nOPCFLAG1 DS    XL1                        FLAG BYTE\nOPCFLAG2 DS    XL1                        FLAG BYTE\nRESOURCE CSECT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SYSIN": {"ttr": 3849, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00R\\x01\\x16#_\\x01\\x16$\\x1f\\x12P\\x00\\x0b\\x00\\x01\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2016-08-22T00:00:00", "modifydate": "2016-08-28T12:50:52", "lines": 11, "newlines": 1, "modlines": 0, "user": "IBMUSER"}, "text": "DISTEST  DISTEST\nDATA 000020 00007F\nDATA 0002C8 00057F\nUSING 000000 000006 F 000000\nUSING 000006        3 000000\nULABL SAVEAREA 000038 072\nULABL MYLBL90  000090 002\nULABL MYLBL12C 00012C 004\nULABL MYLBL2CA 0002CA 002\nUCUTL NOLBL34C 00034C 004\nULABL NOLBL384 000384 004\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT234/FILE234.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT234", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}