{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012404000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE573.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE573.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x04'", "DS1TRBAL": "b'\\xa6j'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04I\\x00\\x0e\\x04J\\x00\\x02\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x12\\x7f\\x01\\x02\\x12\\x7f\"\"\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-05-07T00:00:00", "modifydate": "2002-05-07T22:22:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 446    FILE:  573\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT446.FILE573\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 5 MEMBERS COUNTED; CUMULATIVE SIZE IS 705 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   05/07/02    22:22:18    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x01\\x01\\x02\\x11\\x9f\\x01\\x02\\x11\\x9f\\x080\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-04-29T00:00:00", "modifydate": "2002-04-29T08:30:01", "lines": 14, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:   IEFUJV\n   Date:   Mon, 29 Apr 2002 16:22:15 +1000\n   From:   \"Ginnane, Shane\" <Shane.Ginnane@qr.com.au>\n     To:   sbgolob@attglobal.net\n\nSam,\n\nIEFUJV source to handle system symbolic substitution.  Just the\nsource - do you need info about installing as a usermod and\nsuch-like.  Has been tested to death - I can't find another way\nto crash it.\n\nCheers  ... Shane..\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE573": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00A\\x01\\x01\\x02_\\x01\\x02\\x12\\x7f\"!\\x009\\x00\\x02\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2001-01-25T00:00:00", "modifydate": "2002-05-07T22:21:41", "lines": 57, "newlines": 2, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 573 is from Shane Ginnane, and contains an IEFUJV exit    *   FILE 573\n//*           which allows for substitution of system symbols into  *   FILE 573\n//*           execution JCL.  There's a bit more, too.              *   FILE 573\n//*                                                                 *   FILE 573\n//*           email:  Shane.Ginnane@qr.com.au                       *   FILE 573\n//*                                                                 *   FILE 573\n//*       - - - - - - - - - - - - - - - - - - - - - - - - - - -     *   FILE 573\n//*                                                                 *   FILE 573\n//*        IEFUJV    SMF JOB VALIDATION - ALLOW JCL VARIABLES       *   FILE 573\n//*                                                                 *   FILE 573\n//*        MODULE NAME = IEFUJV                                     *   FILE 573\n//*                                                                 *   FILE 573\n//*        FUNCTION =                                               *   FILE 573\n//*                                                                 *   FILE 573\n//*           Provide access to system symbols in JCL               *   FILE 573\n//*           use a \"// SET \" statement to assign system symbols    *   FILE 573\n//*           to variables local to the job;                        *   FILE 573\n//*                                                                 *   FILE 573\n//*           e.g. \"// SET LPAR=&SYSNAME  \" resolves to             *   FILE 573\n//*                \"// SET LPAR=PROD      \"                         *   FILE 573\n//*                                                                 *   FILE 573\n//*           This may then be used in a DSNAME, such as ...        *   FILE 573\n//*                                                                 *   FILE 573\n//*           //DD1   DD  DSN=SYS1.&LPAR..MYLIB                     *   FILE 573\n//*                                                                 *   FILE 573\n//*         Warning:  Symbols are resolved at pre-conversion.       *   FILE 573\n//*                                                                 *   FILE 573\n//*            This is particularly relevant for date and time      *   FILE 573\n//*            where a job is placed on hold or crosses a day       *   FILE 573\n//*            boundary.                                            *   FILE 573\n//*                                                                 *   FILE 573\n//*            Likewise there are JES, MAS, and NJE issues.         *   FILE 573\n//*                                                                 *   FILE 573\n//*            Caveat emptor....                                    *   FILE 573\n//*                                                                 *   FILE 573\n//*         Notes =                                                 *   FILE 573\n//*                                                                 *   FILE 573\n//*            Trailing period on symbol may or may not be          *   FILE 573\n//*            included - has no effect on functionality.           *   FILE 573\n//*                                                                 *   FILE 573\n//*            Multiple symbols per card image is supported.        *   FILE 573\n//*                                                                 *   FILE 573\n//*            Continuation of \"SET\" card image is *not*            *   FILE 573\n//*            supported.  (Use multiple \"SET\" cards.)              *   FILE 573\n//*                                                                 *   FILE 573\n//*            Be aware of symbol substitution extending the        *   FILE 573\n//*            card beyond column 72 - this will be returned,       *   FILE 573\n//*            and will generally cause a JCL error.                *   FILE 573\n//*                                                                 *   FILE 573\n//*            Exit will clear the input area to accommodate the    *   FILE 573\n//*            situation where the resolved text is shorter.        *   FILE 573\n//*                                                                 *   FILE 573\n//*            Exit will copy an extra byte from the target to      *   FILE 573\n//*            ensure a blank at end.  This handles the scenario    *   FILE 573\n//*            where the resolved is longer, and comments           *   FILE 573\n//*            follow.                                              *   FILE 573\n//*                                                                 *   FILE 573\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEFUJV": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01'\\x00U\\x01\\x02\\x11\\x9f\\x01\\x02\\x11\\x9f\\x15I\\x01>\\x01>\\x00\\x00\\xd6\\xf0\\xf0\\xf0\\xf6\\xf6\\xf4@@@\"", "ispf": {"version": "01.39", "flags": 0, "createdate": "2002-04-29T00:00:00", "modifydate": "2002-04-29T15:49:55", "lines": 318, "newlines": 318, "modlines": 0, "user": "O000664"}, "text": "IEFUJV   TITLE 'SMF JOB VALIDATION- ALLOW JCL VARIABLES '\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = IEFUJV                                    *\n*                                                                     *\n*             FUNCTION =                                              *\n*                PROVIDE ACCESS TO SYSTEM SYMBOLS IN JCL              *\n*                USE A \"// SET \" STATEMENT TO ASSIGN SYSTEM SYMBOLS   *\n*                TO VARIABLES LOCAL TO THE JOB;                       *\n*                E.G. \"// SET LPAR=&SYSNAME  \" RESOLVES TO            *\n*                     \"// SET LPAR=PROD      \"                        *\n*                THIS MAY THEN BE USED IN A DSNAME, SUCH AS ...       *\n*                //DD1   DD  DSN=SYS1.&LPAR..MYLIB                    *\n*                                                                     *\n*              WARNING =                                              *\n*                 SYMBOLS ARE RESOLVED AT PRE-CONVERSION.             *\n*                                                                     *\n*                 THIS IS PARTICULARLY RELEVANT FOR DATE AND TIME     *\n*                 WHERE A JOB IS PLACED ON HOLD OR CROSSES A DAY      *\n*                 BOUNDARY.                                           *\n*                 LIKEWISE THERE ARE JES MAS AND NJE ISSUES           *\n*                                                                     *\n*                 CAVEAT EMPTOR                                       *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 TRAILING PERIOD ON SYMBOL MAY OR MAY NOT BE         *\n*                 INCLUDED - HAS NO EFFECT ON FUNCTIONALITY.          *\n*                                                                     *\n*                 MULTIPLE SYMBOLS PER CARD IMAGE IS SUPPORTED        *\n*                                                                     *\n*                 CONTINUATION OF \"SET\" CARD IMAGE IS *NOT* SUPPORTED *\n*                    (USE MULTIPLE \"SET\" CARDS)                       *\n*                                                                     *\n*                 BE AWARE OF SYMBOL SUBSTITUTION EXTENDING THE CARD  *\n*                 BEYOND COLUMN 72 - THIS WILL BE RETURNED, AND WILL  *\n*                 GENERALLY CAUSE A JCL ERROR.                        *\n*                                                                     *\n*                 EXIT WILL CLEAR THE INPUT AREA TO ACCOMODATE THE    *\n*                 SITUATION WHERE THE RESOLVED TEXT IS SHORTER        *\n*                                                                     *\n*                 EXIT WILL COPY AN EXTRA BYTE FROM THE TARGET TO     *\n*                 ENSURE A BLANK AT END. THIS HANDLES THE SCENARIO    *\n*                 WHERE THE RESOLVED IS LONGER, AND COMMENTS FOLLOW.  *\n*                                                                     *\n*             MODULE TYPE = PROCEDURE                                 *\n*                                                                     *\n*                PROCESSOR = HIGH LEVEL ASSEMBLER                     *\n*                                                                     *\n*                ATTRIBUTES = KEY 0, REENTRANT,                       *\n*                   SUPERVISOR STATE, ENABLED, NO LOCKS HELD          *\n*                                                                     *\n*             ENTRY POINTS = IEFUJV (ONLY ENTRY POINT)                *\n*                                                                     *\n*                LINKAGE =                                            *\n*                                                                     *\n*              REGISTER USAGE =                                       *\n*                    REGISTER  0       = WORK                         *\n*                    REGISTER  1       = INPUT PARAMETERS, THEN WORK  *\n*                    REGISTER  2       = WORK                         *\n*                    REGISTER  3       = ADDRESS OF COMMON EXIT       *\n*                                        PARAMETER AREA               *\n*                    REGISTER  4       = ADDRESS OF JCL IMAGE         *\n*                    REGISTER  5       = ADDRESS OF FLAG BYTE         *\n*                    REGISTER  6       = ADDRESS OF JES INIT PARMS    *\n*                    REGISTER  7       = ADDRESS OF SUBSYSTEM         *\n*                                        INDICATOR                    *\n*                    REGISTER  8       = ADDRESS OF ENVIRONMENT       *\n*                                        INDICATOR                    *\n*                    REGISTER  9       = LOOP COUNTER FOR JCL SCAN    *\n*                    REGISTER  10      = ADDRESS PTR FOR JCL SCAN     *\n*                    REGISTER  11      = UNUSED                       *\n*                    REGISTER  12      = ADDRESSABILITY TO IEFUJV     *\n*                                        CSECT                        *\n*                    REGISTER  13      = REGISTER SAVE AREA POINTER   *\n*                    REGISTER  14      = BAS RETURN REGISTER          *\n*                    REGISTER  15      = WORK REGISTER                *\n*                                                                     *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BSM 0,14 TO          *\n*                             RETURN IN CALLER'S MODE                 *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*                OUTPUT = RESOLVED JCL                                *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = ASASYMBM                                  *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = ASASYMBP                            *\n*                                                                     *\n*             TABLES = NONE                                           *\n*                                                                     *\n*             MACROS = SAVE, RETURN,WTO.                              *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\n         EJECT\nIEFUJV   CSECT ,\nIEFUJV   AMODE 31\nIEFUJV   RMODE 24\n*\n*\n***********************************************************************\n*\n* REGISTER EQUATES\n*\n***********************************************************************\nR00      EQU   00                      REGISTER 0\nR01      EQU   01                      REGISTER 1\nR02      EQU   02                      REGISTER 2\nR03      EQU   03                      REGISTER 3\nR04      EQU   04                      REGISTER 4\nR05      EQU   05                      REGISTER 5\nR06      EQU   06                      REGISTER 6\nR07      EQU   07                      REGISTER 7\nR08      EQU   08                      REGISTER 8\nR09      EQU   09                      REGISTER 9\nR10      EQU   10                      REGISTER 10\nR11      EQU   11                      REGISTER 11\nR12      EQU   12                      REGISTER 12\nR13      EQU   13                      REGISTER 13\nR14      EQU   14                      REGISTER 14\nR15      EQU   15                      REGISTER 15\n         EJECT\n***********************************************************************\n*                                                                     *\n* MAINLINE CODE; SAVE PASSED PARAMETERS, CALL THE VARIOUS SUBROUTINES *\n* AS NECESSARY.                                                       *\n*                                                                     *\n***********************************************************************\n         SAVE  (14,12),,IEFUJV_&SYSDATE._&SYSTIME\n         USING IEFUJV,R12              SET UP BASE ADDRESSABILITY\n         LR    R12,R15                 LOAD BASE REG WITH ENTRY POINT\n         LM    R03,R08,0(R01)          SAVE INPUT PARM LIST ADDRESSES\n         CLC   0(3,R07),=C'JES'        BATCH JOB?\n         BNE   FASTEXIT                NO; EXIT STAGE LEFT\n         CLI   0(R05),128              EXTENDED JCL CARD IMAGE ???\n         BNE   FASTEXIT                NO; EXIT STAGE LEFT\n*\n* CHECK FOR & CHARACTER IN THE CARD IMAGE\n*\n         XR    R00,R00                 CLEAR FOR SEARCH CHAR\n         ICM   R00,B'0001',=C'&&'      LOOKING FOR C'&'\n         LA    R09,71(R04)             POINT PAST STRING\n         LA    R10,2(R04)              OFFSET PAST \"//\" IN CARD\n         SRST  R09,R10                 \"&\" CHARACTER IN CARD IMAGE ??\n         BC    11,FASTEXIT             NO, NOT INTERESTED ...\n*\n* CHECK FOR OUR SPECIFIC CARD\n*\n         LA    R09,65                  LOOP COUNTER FOR CHECK\n         LA    R10,2(R04)              OFFSET INTO CARD IMAGE\nLOOPSET  DS    0H\n         CLC   0(5,R10),=C' SET '      (POTENTIALLY) ONE OF OUR CARDS ?\n         BE    CHECKVAR                YEP - GO CHECK THE REST OF IT\n         LA    R10,1(R10)              BUMP THE OFFSET\n         BCT   R09,LOOPSET             CHECK AT NEXT CHAR\n         B     FASTEXIT                END OF CARD; EXIT STAGE LEFT\nCHECKVAR DS    0H\n         LA    R10,5(R10)              BUMP PAST THE ' SET '\n         LA    R01,5\n         SR    R09,R01                 REDUCE THE LOOP COUNTER\n         BC    4,FASTEXIT              NEGATIVE - ALL DONE\nLOOPVARS DS    0H\n         CLI   0(R10),C' '             STILL GOT A BLANK ???\n         BNE   DOIT                    NUP - GO CHECK THE REST OF IT\n         LA    R10,1(R10)              BUMP THE OFFSET\n         BCT   R09,LOOPVARS            CHECK AT NEXT CHAR\n         B     FASTEXIT                END OF CARD; EXIT STAGE LEFT\nDOIT     DS    0H\n*\n* O.K., NOW WE HAVE A CARD TO PROCESS\n* CHECK FOR A BLANK TO LOCATE END OF PARAMETERS\n*\n         XR    R00,R00                 CLEAR FOR SEARCH CHAR\n         ICM   R00,B'0001',=C' '       LOOKING FOR A BLANK\n         LA    R02,72(R04)             POINT PAST STRING\n         SRST  R02,R10                 ANY BLANKS ??\n*        BC    11,SETLEN               DOESN'T MATTER - R02 IS CORRECT\n         LR    R11,R02                 SAVE ADDRESS FOR NEXT CHECK\n         SR    R02,R10                 GET LENGTH FOR ASASYMBM\n*\n* O.K., NOW WE HAVE A PARM FIELD TO PROCESS\n* LAST CHECK TO ENSURE THE \"&\" CHAR IS ACTUALLY *IN* THE PARAMETER\n*\n         XR    R00,R00                 CLEAR FOR SEARCH CHAR\n         ICM   R00,B'0001',=C'&&'      LOOKING FOR A \"&\"\n         SRST  R11,R10                 ANY SYMBOLICS ??\n         BC    11,FASTEXIT             NO, EXIT STAGE LEFT\n*\n         GETMAIN RU,LV=LGETMAIN,LOC=RES    GET STORAGE\n         LTR   R15,R15                 O.K.   ???\n         BNZ   FASTEXIT                NUP\n         XC    0(LGETMAIN,R01),0(R01)  ZERO THE AREA (MAX 256 BYTES)\n         ST    R13,4(R01)              SAVE CALLER'S SAVE AREA ADDR\n         ST    R01,8(R13)              SAVE MY SAVE AREA ADDRESS\n         LR    R13,R01                 SAVE/WORKAREA NOW READY FOR ME\n         USING WRKSAVE,R13             DSECT ADDRESSABILITY\n         USING SYMBP,MYSYMBP\n         USING SYMBT,MYSYMBT\n         ST    R10,SYMBPPATTERN@        SAVE IN SYMBP AREA\n         ST    R02,SYMBPPATTERNLENGTH   SAVE IN SYMBP AREA\n         MVC   TARGET(L'TARGET),BLANKS  BLANK OUT ENTIRE TARGET\n         LA    R01,TARGET               ADDRESS OF TARGET\n         ST    R01,SYMBPTARGET@         SAVE IN SYMBP AREA\n         MVC   TARGETLENGTH,=A(L'TARGET)  SET LENGTH OF TARGET\n         LA    R01,TARGETLENGTH         ADDRESS OF TARGET LENGTH\n         ST    R01,SYMBPTARGETLENGTH@   SAVE IN SYMBP AREA\n         LA    R01,RETURNCODE           ADDRESS OF RETURN CODE\n         ST    R01,SYMBPRETURNCODE@     SAVE IN SYMBP AREA\n         LA    R01,MYSYMBT              ADDRESS OF SYMBT (FLAGS)\n         ST    R01,SYMBPSYMBOLTABLE@    SAVE IN SYMBP AREA\n*   BE NICE TO GET SOME RETURN CODES BACK - SET APPROPRIATE FLAGS\n         OI    SYMBTFLAG0,SYMBTWARNSUBSTRINGS+SYMBTCHECKNULLSUBTEXT\n         OI    SYMBTFLAG1,SYMBTWARNNOSUB\n*\n         LINK  EP=ASASYMBM,MF=(E,MYSYMBP)\n         L     R15,RETURNCODE          O.K.     ????\n         C     R15,=H'16'              O.K.     ????\n         BH    RET_UNKN                UNKNOWN RETCODE - MMMM   ??\n         B     BRTBL(R15)              HOWS IT ALL LOOK ???\n         EJECT\nBRTBL    DS    0F\n         B     OK\n         B     RET4_W\n         B     RET8_W\n         B     RETC_W\n         B     RET10_W\nRET4_W   WTO   'IEFUJV RC=04 - SUBSTRING SUBSTITUTION IGNORED *',      X\n               ROUTCDE=11\n         B     OK\nRET8_W   WTO   'IEFUJV RC=08 - SYMBOL BUFFER TOO SMALL - REDUCE NUMBER X\n               OF SYMBOLS',ROUTCDE=11\n         B     OK\nRETC_W   WTO   'IEFUJV RC=12 - SUBSTITUTION LENGTH NULL. CONTINUING *',X\n               ROUTCDE=11\n         B     OK\nRET10_W  WTO   'IEFUJV RC=16 - NO SYSTEM SYMBOLS FOUND. CONTINUING *', X\n               ROUTCDE=11\n         B     OK\nRET_UNKN EQU   *\n         WTO   'IEFUJV - UNDOCUMENTED ASASYMBM RETCODE. NOTIFY SYSPROGSX\n               ',ROUTCDE=11\n         UNPK  UNPAKIT(9),RETURNCODE(5)\n         MVC   WTO_RENT,RC_WTO\n         MVC   WTO_RENT+4+5(8),UNPAKIT\n         TR    WTO_RENT+4+5(8),TRTAB-C'0'\n         WTO   MF=(E,WTO_RENT)\n         B     EXIT\n         EJECT\nOK       DS    0F\n         LR    R01,R02                 GET INPUT LENGTH\n         BCTR  R01,R00                 REDUCE FOR MOVE\n         EX    R01,BLANKIT             CLEAR PRIOR TO SUBSTITUTION\n         L     R01,TARGETLENGTH        GET THE LENGTH\n         EX    R01,MOVEEM              PUT IT BACK\n*\n* RETURN TO CALLER\n*\nEXIT     DS    0H\n         LR    R01,R13                 GET FREEMAIN ADDRESS\n         L     R13,4(,R13)             RESTORE CALLER'S R13 B4 FREEMAIN\n         FREEMAIN R,LV=LGETMAIN,A=(1)\nFASTEXIT DS    0H                      FASTEXIT; NO FREEMAIN\n         LM    14,12,12(13)            RESTORE CALLER'S REGISTERS\n         LA    R15,0                   PROCESS THE JOB\n         BSM   0,R14                   RETURN TO CALLER\n         EJECT\n***********************************************************************\n*\n*  CONSTANTS AND EQUATES\n*\n***********************************************************************\n         DS    0F\nBLANKS   DC    CL80' '                 AS IT SAYS\nTRTAB    DC    C'0123456789ABCDEF'     FOR DISPLAYABLE HEX\n*\nBLANKIT  MVC   0(*-*,R10),BLANKS       BLANK OUT CARD\nMOVEEM   MVC   0(*-*,R10),TARGET       MOVE SUBSTITUTED IMAGE BACK\n*\nRC_WTO   WTO   '* RC=XXXXXXXX ',MF=L\nRC_WTO_L EQU   *-RC_WTO\n         EJECT\n         LTORG\n***********************************************************************\n*\n* DSECTS\n*\n***********************************************************************\n*\n*              IEFUJV SAVE/WORKAREA (OBTAINED BY GETMAIN)\n*\nWRKBEGIN DSECT                         POINTED TO BY R13\nWRKSAVE      DS    9D                  18 WORD REGISTER SAVE AREA\nUNPAKIT      DS    2D\nWTO_RENT     DS    CL(RC_WTO_L)\n*\nMYSYMBP      DS    CL(SYMBP_LEN)       SYMBP AREA\nMYSYMBT      DS    CL(SYMBT_LEN)       SYMBP AREA\nRETURNCODE   DS    F                   RETURN CODE\nTARGETLENGTH DS    F                   LENGTH OF TARGET\nTARGET       DS    CL80                BIG ENOUGH TO HOLD THE TARGET\nWRKEND       EQU   *                   END OF SAVE/WORKAREA\nLGETMAIN     EQU   WRKEND-WRKBEGIN     LENGTH FOR GETMAIN\n*\n         ASASYMBP   ,                  MAPPING OF SYMBP AREA\n         END   IEFUJV\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IRAMPF": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x008\\x01\\x02\\x12\\x8f\\x01\\x02\\x12\\x8f\\x08T\\x010\\x010\\x00\\x00\\xd6\\xf0\\xf0\\xf0\\xf6\\xf6\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-05-08T00:00:00", "modifydate": "2002-05-08T08:54:38", "lines": 304, "newlines": 304, "modlines": 0, "user": "O000664"}, "text": "         TITLE 'IRAMPF - LIST AUX SLOT USAGE BY ASID'\n*        PRINT NOGEN\n*                                                                    *\n* DESCRIPTION:                                                       *\n*   MPF EXIT FOR LISTING HIGHEST AUX SLOT USERS GROUPED 5 AT A TIME. *\n*   THIS FUNTIONALITY ADDED BY SHANE GINNANE TO BASE CODE (ASIDLIST) *\n*   ORIGINALLY POSTED BY MARK ZELDEN.                                *\n*                                                                    *\n* USAGE:                                                             *\n*   DESIGNED TO BE USED WHEN AN IRA200E AND/OR IRA201E MESSAGE       *\n*   ISSUES.                                                          *\n*   MAY GIVE AN INDICATION OF POTENTIAL CANDIDATES FOR TERMINATION.  *\n*                                                                    *\n* ATTRIBUTES:                                                        *\n*   AMODE(31), RMODE(24), AC(1) REENTRANT                            *\n*                                                                    *\n* MACROS USED:                                                       *\n*   MODESET, SETLOCK                                                 *\n*   WTO (BRANCH ENTRY DUE TO POTENTIAL FOR LOCAL LOCK BEING HELD)    *\n*   WTO - MULTILINE                                                  *\n*   WTOR                                                             *\n*                                                                    *\n* MODULES CALLED:                                                    *\n*   NONE                                                             *\n*                                                                    *\n* REQUIREMENTS:                                                      *\n*   AC(1) DUE TO OBTAINING LOCKS. IF LOCKS ARE UNOBTAINABLE,         *\n*   PROCESSING CONTINUES AFTER ISSUING AN INFORMATIONAL WTO.         *\n*   POTENTIALLY THE SLOT COUNT COULD CHANGE WHILST THE CODE IS       *\n*   RUNNING IN THIS STATE, BUT THE VARIANCE SHOULD BE NEGLIGIBLE.    *\n*                                                                    *\n*   IF MORE FIELDS ARE NEEDED IN THE ASENTRY DSECT, ADD THEN AFTER   *\n*   THE FIELD \"ASTSLOT\", AND BEFORE FIELD \"ASENTL\".                  *\n*   THIS WILL ALLOW ASMAXENT TO RESOLVE CORRECTLY                    *\n*                                                                    *\n***\n*   MAINT:                                                           *\n*     DUE TO THE FACT THAT MPF EXITS NEED TO BE RE-ENTRANT, CODE     *\n*     REWORKED TO ACCOMPLISH THIS.                   SG. 31/01/2001  *\n*                                                                    *\n*     FIXED S0F8-8 BY MOVING MODESET                 SG. 17/10/2001  *\n*                                                                    *\n*                                                                    *\n***\n*\n*  REGISTER EQUATES AND USAGE\n*\n***\nR00      EQU   0                  LINKAGE REGISTER\nR01      EQU   1                  WORK REG\nR02      EQU   2                  WORK REG\nR03      EQU   3                  POINTS TO PARM / MAX # ASVT ENTRIES\nR04      EQU   4                  WORK - POINTS TO CURRENT ADDR IN ASVT\nR05      EQU   5                  WORK REG\nR06      EQU   6                  POINTS TO START OF DATA AREA\nR07      EQU   7                  ALLOCATED ASID COUNTER\nR08      EQU   8                  ASID COUNTER\nR09      EQU   9                  BASE REG FOR ASVT\nR10      EQU   10                 BASE REG FOR ASCB\nR11      EQU   11                 BASE REG FOR ASSB\nR12      EQU   12                 BASE REGISTER\nR14      EQU   14                 LINKAGE REGISTER (RETURN ADDRESS)\nR15      EQU   15                 LINKAGE REGISTER (ENTRY POINT)\n*\nIRAMPF   CSECT\nIRAMPF   AMODE 31\nIRAMPF   RMODE 24\n         B     START-IRAMPF(R15)\n         DC    AL1(START-*)\n         DC    C'IRAMPF &SYSDATE &SYSTIME '\nSTART    BAKR  R14,R00            BRANCH AND STACK (LINKAGE STACK)\n         LR    R12,R15            SET UP ADDRESSABILITY\n         USING IRAMPF,R12         SET UP BASE REGISTER\n*******************************************************************\n* POINT TO ASVT\n*******************************************************************\n         MODESET KEY=ZERO,MODE=SUP\n         L     R09,CVTPTR         POINT TO CVT  - X'10'\n         L     R09,CVTASVT-CVT(,R09)  POINT TO ASVT\n         USING ASVT,R09           MAP ASVT\n         LA    R04,ASVTENTY       POINT TO FIRST ENTRY IN TABLE\n         L     R03,ASVTMAXU       LOAD MAX NUMBER OF ENTRIES\n         XR    R08,R08            CLEAR ASID COUNTER\n         XR    R07,R07            CLEAR ASSIGNED ASID COUNTER\n         L     R06,=A(MY_AREA)    FIND THAT DATA\n         LA    R06,TRANSL(,R06)   SKIP THE \"TRANSIENT\" AREA\n         USING ASENTRY,R06\n*\n         LTR   R15,R15                 O.K. ??\n         BNZ   NOLOCKS                 NO ?? - TELL THE WORLD\n         SETLOCK OBTAIN,                                               X\n               TYPE=LOCAL,             LOCAL LOCK                      X\n               MODE=COND,                                              X\n               REGS=USE,               DO NOT CHANGE R11-R13           X\n               RELATED=LOCAL\n         C     R15,=F'8'               O.K. ??\n         BNL   NOLOCKS                 NO ?? - TELL THE WORLD\n         SETLOCK OBTAIN,                                               X\n               TYPE=CMS,               CROSS-MEMORY SERVICES           X\n               MODE=COND,                                              X\n               REGS=USE,               DO NOT CHANGE R11-R13           X\n               RELATED=CMS\n         C     R15,=F'8'               O.K. ??\n         BL    ASVTLOOP                NO ?? - WHAT THE HELL\nNOLOCKS  EQU   *\n         WTO   '****  UNABLE TO OBTAINS LOCK(S) - NUMBERS MAY BE MARGINX\n               ALLY INACCURATE',LINKAGE=BRANCH\n*\nASVTLOOP EQU   *\n*******************************************************************\n* THIS ROUTINE CHECKS EACH ASVT ENTRY.\n* IF THE HIGH ORDER BIT IS ON, THE ENTRY IS THE ADDRESS OF THE\n* NEXT AVAILABLE ASID (OR THE LAST ENTRY IF ZEROS).\n*******************************************************************\n         LA    R08,1(,R08)        BUMP ASID COUNTER\n         TM    0(R04),ASVTAVAL    IS THIS AN ASSIGNED  ASCB\n         BNO   CHKASCB            YES, BRANCH\n         LA    R04,4(,R04)        NO, POINT TO NEXT ENTRY IN ASVT\n         BCT   R03,ASVTLOOP       GO CHECK NEXT ASVT ENTRY\n         B     SORTEM             NO MORE ENTRIES - BRANCH\n*******************************************************************\n* CHECK ASCB FOR JOB OR START/LOGON/MOUNT\n*******************************************************************\nCHKASCB  EQU   *\n         L     R10,0(R04)         POINT TO ASCB\n         USING ASCB,R10           MAP IT\n         L     R05,ASCBJBNI       POINT TO JOBNAME\n         C     R05,=F'0'          WAS THIS A START/MOUNT/LOGON ?\n         BE    NOTAJOB            YES, BRANCH\n         MVC   ASNAME,0(R05)      MOVE ASNAME IN\n         B     SKIPSNAM\nNOTAJOB  EQU   *\n         L     R05,ASCBJBNS       POINT TO START/MOUNT/LOGON NAME\n         C     R05,=F'0'          NAME PRESENT ?\n         BNE   MOVESNAM           YES, BRANCH\n         MVC   ASNAME,=C'*STRTING' MOVE 'STRTING' INTO ASNAME\n         B     SKIPSNAM\nMOVESNAM EQU   *\n         MVC   ASNAME,0(R05)      MOVE ASNAME IN\nSKIPSNAM EQU   *\n         LA    R07,1(,R07)        ADD 1 TO TOTAL ACTIVE COUNTER\n         ST    R08,ASASID         SAVE ASID OF THIS ASCB\n         L     R11,ASCBASSB       ASSB PTR\n         USING ASSB,R11\n         L     R00,ASSBVSC        # VIO AUX PAGES\n         A     R00,ASSBNVSC       ADD # NON-VIO AUX PAGES\n         ST    R00,ASTSLOT        SAVE TOTAL SLOT COUNT\n         MVC   ASVIO,ASSBVSC      SAVE # VIO AUX PAGES\n         MVC   ASNVIO,ASSBNVSC    SAVE # NON-VIO AUX PAGES\n         LA    R04,4(,R04)        POINT TO NEXT ENTRY IN ASVT\n         LA    R06,ASENTL(,R06)   SKIP TO NEXT ENTRY IN TABLE\n         C     R07,ASMAXENT       AS MANY AS WE CAN ACCOMODATE ??\n         BNL   SORTEM             YEP - PULL THE PIN\n         BCT   R03,ASVTLOOP       GO CHECK NEXT ASVT ENTRY\n*******************************************************************\n* SUB ROUTINE TO SORT BY TOTAL USED SLOTS\n*******************************************************************\nSORTEM   EQU   *\nUNLOCK   SETLOCK RELEASE,         LET THE LOCKS GO                     X\n               TYPE=ALL,               LOCAL AND CMS                   X\n               REGS=USE,               DO NOT CHANGE R11-R13           X\n               RELATED=UNLOCK\n*\n         DROP  R11\n         L     R04,=A(MY_AREA)        FIND THAT DATA\n         USING TRANS,R04\n         XC    UPDATED,UPDATED    SET UP FLAG BYTE\n         ST    R07,ACTCOUNT       SAVE THE TOTAL ACTIVE ASIDS\nSTARTSRT EQU   *\n         L     R07,ACTCOUNT       GET THE TOTAL ACTIVE ASIDS\n         BCTR  R07,R00            DEC FOR COUNTER\n         L     R06,=A(MY_AREA)    FIND THAT DATA\n         LA    R06,TRANSL(,R06)   SKIP THE \"TRANSIENT\" AREA\n         NI    UPDATED,X'FF'-DIRTY  TURN OFF DIRTY BIT\nBUBBLE   EQU   *\n         CLC   ASTSLOT,ASENTL+20(R06)  N TOTSLOTS > (N+1) TOTSLOTS ???\n         BNL   SKIPSWAP           NO\n         XC    0(ASENTL,R06),ASENTL(R06)\n         XC    ASENTL(ASENTL,R06),0(R06)\n         XC    0(ASENTL,R06),ASENTL(R06)\n         OI    UPDATED,DIRTY      SHOW SOMETHING DONE\nSKIPSWAP EQU   *\n         LA    R06,ASENTL(,R06)\n         BCT   R07,BUBBLE\n         TM    UPDATED,DIRTY      ALEADY SORTED\n         BNO   SORTED             YEP\n         B     STARTSRT\nSORTED   EQU   *\n*******************************************************************\n* AT THIS POINT SORTED, SO DISPLAY 5 AT A TIME\n*******************************************************************\n         L     R06,=A(MY_AREA)    FIND THAT DATA\n         LA    R06,TRANSL(,R06)   SKIP THE \"TRANSIENT\" AREA\n         L     R07,ACTCOUNT       GET THE TOTAL ACTIVE ASIDS\n         MVC   M1,WTOLEN\n         MVC   M2,WTOLEN\n         MVC   M3,WTOLEN\n         MVC   M4,WTOLEN\n         MVC   M5,WTOLEN\nNEXTLOT  EQU   *\n         C     R07,=F'0'          ALL DONE ???\n         BE    RETURN             YES, GOODBYE\n         MVI   M1TEXT,C' '\n         MVC   M1TEXT+1(TEMPL-1),M1TEXT\n         MVI   M2TEXT,C' '\n         MVC   M2TEXT+1(TEMPL-1),M2TEXT\n         MVI   M3TEXT,C' '\n         MVC   M3TEXT+1(TEMPL-1),M2TEXT\n         MVI   M4TEXT,C' '\n         MVC   M4TEXT+1(TEMPL-1),M2TEXT\n         MVI   M5TEXT,C' '\n         MVC   M5TEXT+1(TEMPL-1),M2TEXT\n         LA    R02,M1TEXT\n         LA    R01,5\nMSGLOOP  EQU   *\n         MVC   0(TEMPL,R02),TEMPLATE\n         MVC   6(8,R02),ASNAME    MOVE HEX ASID\n         MVC   WORK3(2),ASASID+2  STORE \"HEX\" ASID\n         UNPK  WORK5,WORK3        ADD ZONES\n         TR    WORK5(4),HEXTAB-C'0'   TRANSLATE TO CHARACTERS\n         MVC   22(4,R02),WORK5    MOVE HEX ASID\n*\n         L     R11,ASTSLOT\n         CVD   R11,CVDWORK        CONVERT TO DECIMAL\n         ED    40(16,R02),CVDWORK     UNPACK AND EDIT\n         LA    R02,L'M1TEXT+2(R02)\n         LA    R06,ASENTL(,R06)\n         BCTR  R07,R00            REDUCE ASID COUNT\n         C     R07,=F'0'          ALL DONE ???\n         BE    SETUP              YES, ISSUE WTO\n         BCT   R01,MSGLOOP\nSETUP    EQU   *\n         XR    0,0                     CLEAR R0\n         WTO   TEXT=((T1,D),(M1,D),(M2,D),(M3,D),(M4,D),(M5,DE)),      X\n               DESC=1\n         LR    R11,R01\nWTOR     EQU   *\n         XC    ECB,ECB\n         XC    REPLY,REPLY\n         DROP  R09,R10\n         LA    R09,REPLY\n         LA    R10,ECB\n         WTOR  '*** N(EXT) OR F(INISH)   *****',(R09),1,(R10)\n         WAIT  ECB=ECB\n         DOM   MSG=(11)                ... AND DO IT AGAIN\n         CLI   REPLY,C'N'\n         BE    NEXTLOT\n         CLI   REPLY,C'F'\n         BNE   WTOR\n*====================================================\nRETURN   EQU   *\n         MODESET KEY=NZERO,MODE=PROB\n         LA    R15,0               SET RETURN CODE TO ZERO\n         PR                       PROGRAM RETURN (LINKAGE STACK)\n         EJECT\n* ====================================================================\nASMAXENT DC    A((32768-TRANSL)/ASENTL)     HOW MANY CAN WE HANDLE ???\nTEMPLATE DC    C'TASK: ????????, ASID: ',X'40202120'\n         DC    C', SLOT COUNT: ',X'40202020202020202020202020202120'\nTEMPL    EQU   *-TEMPLATE\nWTOLEN   DC    AL2(TEMPL)\nT1       DC    AL2(L'T1TEXT)\nT1TEXT   DC    CL50'*****    HIGHEST AUX SLOT USERS         *****'\n* ====================================================================\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATION TABLE FOR HEX TO CHAR\n         LTORG\nTRANS    DSECT                     MAPPER FOR TRANSIENT WORK AREAS\nECB      DS    A                   WTOR REPLY ECB\nREPLY    DS    C                   WTOR REPLY\nACTCOUNT DS    F\nUPDATED  DS    XL1\nDIRTY    EQU   X'80'\nCVDWORK  DS    D                  WORK AREA FOR CVD\nWORK3    DS    CL3                WORK AREA FOR HEX TO CHAR\nWORK5    DS    CL5                WORK AREA FOR HEX TO CHAR\nM1       DS    AL2\nM1TEXT   DS    CL(TEMPL)\nM2       DS    AL2\nM2TEXT   DS    CL(TEMPL)\nM3       DS    AL2\nM3TEXT   DS    CL(TEMPL)\nM4       DS    AL2\nM4TEXT   DS    CL(TEMPL)\nM5       DS    AL2\nM5TEXT   DS    CL(TEMPL)\n         DS    0D\nTRANSL   EQU   *-TRANS             LENGTH OF TRANSIENT AREA\n         SPACE\nASENTRY  DSECT                     MAPPER FOR WORK AREA\nASNAME   DS    D                   ADDRESS SPACE NAME\nASASID   DS    F                   ADDRESS SPACE ID\nASVIO    DS    F                   ADDRESS SPACE VIO SLOT COUNT\nASNVIO   DS    F                   ADDRESS SPACE NVIO SLOT COUNT\nASTSLOT  DS    F                   ADDRESS SPACE TOTAL SLOT COUNT\nASENTL   EQU   *-ASENTRY           LENGTH OF TABLE ENTRY\n         CVT DSECT=YES\n         IHAPSA\n         IHAASVT\n         IHAASCB\n         IHAASSB\n         DROP  12\n         CSECT\nMY_AREA  DS    32768X              32K BUFFER - CAREFUL WITH THIS !!\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT573/FILE573.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT573", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}