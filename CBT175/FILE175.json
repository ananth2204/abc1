{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011417000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1704794, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 18, "INMDSNAM": "CBT.V500.FILE175.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1704794, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1704794, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE175.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x1c\\x08'", "DS1TRBAL": "b'j\\xc8'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01<\\x00\\x0b\\x01>\\x00\\t\\x00\\x1d'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x91\\x17\\x7f\\x00\\x91\\x17\\x9f\\x088\\x00\\xbe\\x00U\\x00\\x00\\xc6\\xc3\\xc9\\xc3\\xc6\\xd4@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1991-06-26T00:00:00", "modifydate": "1991-06-28T08:38:00", "lines": 190, "newlines": 85, "modlines": 0, "user": "FCICFM"}, "text": "1  THE FOLLOWING MEMBERS ARE IN USE AT THE PHILIPS LIGHTING DATA CENTER BUT HAVE\n   NOT BEEN TESTED IN ANY OTHER ENVIRONMENT.  They are currently in use on\n   MVS/XA 2.2.3 with DFP3.1, JES2 2.2.3, ISPF/PDF V2R3M0, and TSO/E 2.0.\n   THEY ARE DISTRIBUTED WITHOUT ANY WARRANTY, EXPRESS OR IMPLIED.\n       Clark Morris, Philips Lighting 908-563-3575, home 201-743-1068\n       Laurel Fehr, Philips Lighting 908-563-3547\n       Philips Lighting, Department 5069\n       200 Franklin Square Drive CN6800\n       Somerset, NJ 08875-6800\n\n   Member   Description\n\n   COVERLET JCL to list PTF cover letters.\n   DDDEF    Sample JCL for concatenation DDDEF\n   DDDEFDS  Sample JCL to change a DDDEF\n   EXITU83  Usermod to Linkedit IBM and vendor supplied IEFU83 modules.\n   FNMU834  Usermod to cause assembly of NPM IEFU83 and IEFU84 modules.\n   IEAVMXIT The source for the lighting IEAVMXIT to not display rout code\n            messages generated by the IPO IEFACTRT SMF exit on the console.\n            Not in SMP because the module is in a lighting Linklisted library.\n   IEFACTRT Usermod to in\n   IMSLPA0  Usermod to install IMS SVC, Cleanup routine and ABEND routine.\n   IPOBASE  Usermod to install Assembler H options\n   LUT1A001 Macro to place date, time and level stamp from PANVALET in load\n            module.  Included here because some lighting source has the macro\n            generated from the lighting migration system.\n   LCDBSV2  Usermod to install DFHCSVC in MVS\n   LCDBSV6  Usermod to install DFHHPSVC in MVS\n   LCICS00  UCLIN for installing CICS modules in MVS\n   LPACPY1  Usermod to move ISPF/PDF load modules to ISPF LPA library\n   LPACPY2  Usermod to move ISPF load modules to ISPF LPA library\n   LPACPY3  Usermod to move TSO load modules from CMDLIB to CMDLPA\n   LPACPY4  UCLIN to add selected VS COBOL subroutines to COBOL LPA library\n   NAPC001  Usermod to install VS COBOL (2.4) options\n   NAPF001  Usermod to install VS Fortran (1.4) options\n   NAPF002  Usermod to install VS Fortran (1.4) subroutine options\n   NAPHCF1  Usermod to install customization of HCF module CHFMSGT\n   NAPIP01  Usermod to install PANVALET replacement for panel ISRECPY2\n   NAPIP03  Usermod to restrict non tech services personnel to allocation\n            on UNIT=TEST and force high level index to be the user-id on panel\n            ISRUAAP\n   NAPIP04  Usermod to panel ISRUAAP2 to restriction non-tech services personnel\n            to allocation on UNIT=TEST and high level index to user-id\n   NAPIP05  Usermod to panel ISRUADC1 to restrict non-tech services users to\n            deleting only data sets which have their user-id as high level index\n   NAPIP06  Usermod to panel ISRUADC2 to restrict non-tech services users to\n            from deleting a data set without in uncataloguing it.\n   NAPIP07  Usermod to panel ISRUARP1 to restrict non-tech services users to\n            renaming only data sets that have their user-id as high level index\n            and the new name must also have the user id as high level index.\n   NAPIP08  Usermod to panel ISRUARP2 to require non-tech services users to\n            recatalog when renaming\n   NAPIP09  Usermod to panel ISRUDA2 to restrict non-tech services users to\n            Cataloguing on TEST07 and then only data sets with their user-id as\n            high level index.  Also require ALL users to use 3.4 for uncatalog\n            to obtain a confirm function and restrict non-tech services users\n            to tapes which have their user-id as high level index.\n1  Member   Description\n\n   NAPIP10  Usermod to panel ISRUDLP to force CONFIRM DELETE to YES\n   NAPIP11  Usermod to panel ISRUDSLS to use the SHOWCMD as a confirmation panel\n            for uncatalog, prevent the entry of TSO commands on the data set\n            line, and restrict non tech services users to to deleting, renaming\n            and freeing space only for data sets with their user-id as high\n            level index and uncataloguing their own tapes.  All other 3.4\n            functions are allowed.\n   NAPIP12  Usermod to panel ISRUDSL0 to force SHOWCMD always on so that the\n            SHOWCMDS panel can be used as an enforcement and confirmation\n            mechanism.\n   NAPIP13  Usermod to panel ISRUTIL to add lighting options and restrict\n            certain options.\n   NAPIP14  Usermod to panel ISRECRA1 to use PANVALET version.\n   NAPIP15  Usermod to panel ISRECRA2 to use PANVALET version\n   NAPIP16  Usermod to panel ISREDM02 to use PANVALET version\n   NAPIP17  Usermod to panel ISREMOV2 to use PANVALET version\n   NAPIP18  Usermod to panel ISRERPL2 to use PANVALET version\n   NAPIP19  Usermod to panel ISR00003 to use PANVALET version\n   NAPJ001  Usermod to install J2XIT01 - a JES2 exit 1 to force Kodak Komstar\n            Fiche header if SYSOUT class = F or 4 and the device is PRT3 and the\n            form number does not begin with F.  The Komstar header, standard\n            header and standard trailer are suppressed if the form begins with\n            F.  This exit will also supress header and trailer pages for output\n            from our EMAIL system on all printers and for output from our\n            report management system (CA-DISPATCH) for local printers.\n   NAPJ002  Usermod to install J2XIT02 a JES2 Exit 2 to do the following.\n            1. Move the RIDJNAM to JCTINDEV if the DCTDEVTP is an internal\n               reader.  If the submitter is a started task set the last byte\n               of JCTINDEV to '+'.  If the submitter is a TSO user set the\n               last byte of JCTINDEV to '*'.\n            2. Set the default message class for TSO sign-ons to Z (print on\n               abend).\n            3. Set the message class for certain started tasks to the value in\n               the table else use the JES default class.\n   NAPJ003  Usermod to install J2XIT04 - JES2 Exit 4 to restrict submission of\n            JES2 commands to the started task named COMMAND\n   NAPJ004  Usermod to install J2XIT05 - JES2 Exit 5 to add $LF command that\n            lists output waiting to print based on various criteria including\n            form, first n bytes of the data set name (j=*x...), destination,\n            or sysout queue.\n   NAPJ005  Usermod to install J2XIT06 - JES2 Exit 6 - This exit is an upgrade\n            of the American Natural Resources Exit6 at the 1.3.3 level to the\n            2.2.0 level with automatic job class and priority determination\n            based on job card CPU time, TCAM queue usage, how many tape\n            drives a job uses, and the submitter of the job.  Two user SMF\n            records are produced, a SMF 247 record for TCAM queue usage and a\n            SMF 248 record for PROC usage.\n   NAPJ006  Usermod to install J2XIT09 - JES2 Exit 9 to handle lines exceeded\n            conditions where production jobs get 2.5 million lines or /*JOBPARM\n            LINES= lines before 722 abend, other jobs get JESDECK default or\n            /*JOBPARM LINES= lines, started tasks get unlimited lines and the\n            $HASP375 message is suppressed for the report management system\n            until it exceeds 2.5 million lines of output. Note that the EXIT 10\n            mentioned in the comments in the exit has not been implemented but\n            it is highlighted by an MVS MPF exit\n\n1  Member   Description\n\n   NAPJ007  Usermod to install J2XIT13 - JES2 Exit 13 - NJE mail validation and\n            rerouting exit for the Fischer EMAIL package.\n   NAPMM01  Usermod to add SMF248, the description of the SMF 248 proc usage\n            record to SYS1.MACLIB.\n   NAPMM02  Usermod to add SMF249, the description of the SMF 249 record which\n            was used to log illegal JCL at lighting when JES3 was the spooler\n            spooler\n   NAPMM04  Usermod to add GTEDAALC, one of the GTE dynamic allocation macros to\n            SYS1.MACLIB\n   NAPMM05  Usermod to add GTEDASET, one of the GTE dynamic allocation macros to\n            SYS1.MACLIB\n   NAPMM06  Usermod to add GTEDADAT, one of the GTE dynamic allocation macros to\n            SYS1.MACLIB\n   NAPMM07  Usermod to add GTEDADOC, documentation for the GTE dynamic\n            allocation macros to SYS1.MACLIB\n   NAPMM08  Usermod to add SMF247, the description of the SMF 247 - TCAM queue\n            usage record to SYS1.MACLIB\n   NAPMM09  Usermod to add PANAEXIT, a macro required by our PANVALET PANEXIT,\n            to SYS1.MACLIB\n   NAPMZ01  Usermod to put ERBMFRES, BNJMTERM, and DFSMRCL0 in IEAVTRML because\n            IBM requires it be done this way rather than via PARMLIB option\n   NAPM001  Usermod to force assembly of ERB3MJ2E - RMF Jes2 interface\n   NAPM002  Usermod to change IEFUSI to restrict TSO users to 2 megabytes above\n            the line\n   NAPM003  Usermod to install IEFACTRT- the SMF exit from the IPO libraries.\n            Lighting uses IEAVMXIT to suppress rout code 14 on the console\n   NAPM011  Usermod to link IGC244 into SYS1.NUCLEUS for IMS.\n   NAPTM01  Usermod to modify IKJPSCB - the description of the PSCB to add\n            equates for bits in PSCBATR2 for use by various program product\n            and IBM exits.\n   NAPTM02  Usermod to modify IKJEFFIE to describe the bits in the first byte\n            of IEEXITWD.\n   NAPT001  Usermod to install the IPO IKJEFF53 TSO STATUS CANCEL EXIT\n   NAPT002  Usermod to install IKJEFF10 - the lighting modified TSO submit exit\n            the changes $$$$$$ to the submitters user-id whereever it is found\n            in the JCL and disallow submissions of jobs containing SYSOUT=X and\n            MSGCLASS=X if the job name does not start with the user-id or $$$$$$\n   NAPT003B Usermod to install IKJEFLD - the TSO logon prompt exit in order to\n            suppress the full screen logon.\n   PUT1A003 The source for the lighting version of a CBT tape program to\n            do an IEBGENER type update of a PDS.  Lighting changes include using\n            the SPFEDIT and SYSIEWLP enqueues and doing them before the open\n            of the output file, removal of the RESERVE's, and addition of a\n            'NOREPLACE' option to allow prevention of overlay of an existing\n            member\n            Not in SMP because the module is in a lighting Linklisted library.\n   PUT1B033 The source for the lighting version of the Goddard MVT program ALIAS\n            to delete members of a PDS.  Lighting changes include usingthe\n            SPFEDIT and SYSIEWLP enqueues and doing them before the open of the\n            library with the members to be deleted, allowing the option of a\n            single member by the use of a PARM option (PARM=member-name), and\n            changing the return code for a member not found condition from 12 to\n            4.\n            Not in SMP because the module is in a lighting Linklisted library.\n\n1  Member   Description\n\n   SRCADD   Skeleton for adding an SRC usermod where no MOD entry exists\n   UM99901  Sample ACF2 Usermod\n   XHASP375 The source for a lighting MPF exit to change the descriptor code of\n            the $HASP375 message to 11 so that it is highlighted.  This works\n            in conjunction with our JES2 Exit 9 (J2XIT09).\n            Not in SMP because the module is in a lighting Linklisted library.\n   XIEF176I The source for a lighting MPF exit to respond to a writer waiting\n            for work message for sysout class L by issuing a P WTRLAUTO.  This\n            is used as a part of our automated syslog management.\n            Not in SMP because the module is in a lighting Linklisted library.\n   XIEF238D The source for a lighting MPF exit to respond 'WAIT' to any\n            IEF238D message which contains the 'WAIT' option.\n            Not in SMP because the module is in a lighting Linklisted library.\n   XIEF433D The source for a lighting MPF exit to respond 'NOHOLD' to any\n            IEF433D message.\n            Not in SMP because the module is in a lighting Linklisted library.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COVERLET": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x05\\x00\\x00\\x00\\x90&O\\x00\\x90'O\\x172\\x00\\xb8\\x00;\\x00\\xab\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@\"", "ispf": {"version": "01.05", "flags": 0, "createdate": "1990-09-21T00:00:00", "modifydate": "1990-10-01T17:32:00", "lines": 184, "newlines": 59, "modlines": 171, "user": "FCHLAY"}, "text": "//FCHLAY1  JOB (FC50690,FCFC),'LIST COVERLET   ',\n//             USER=,GROUP=,PASSWORD=,                         /*RACF*/\n//             NOTIFY=$$$$$$,\n//             CLASS=W,MSGCLASS=X,MSGLEVEL=(1,1)\n//*                                                           /*JCTRL*/\n//*  LIST COVER LETTERS                                       /*JCTRL*/\n//*\n//LIST1   EXEC PGM=GIMSMP,REGION=4096K\n//SMPCSI   DD  DSN=LCPSMPE.GLOBAL.CSI,DISP=SHR\n//SMPOUT   DD  SYSOUT=*\n//SMPRPT   DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SMPHOLD  DD  DUMMY\n//SMPPTFIN DD  DUMMY\n//SMPCNTL  DD  *\n  SET BOUNDARY(GLOBAL).           /* SET TO GLOBAL ZONE        */\n   LIST HOLDDATA\n       FORFMID(HNR1302,\n               HNV1303,\n               JNV1313,\n               JNV1323,\n               JNV1333,\n               JNV1343,\n               HBY2202,\n               HVT3205,\n               JVT3215) HOLDSYSTEM.\n/*\n//\nUL03872\nUL31152\nUL67996\nUY22213\nUY26857\nUY27489\nUY28880\nUY29052\nUY31129\nUY33009\nUY33687\nUY33721\nUY34005\nUY34353\nUY35127\nUY35536\nUY36252\nUY36659\nUY37448\nUY37520\nUY38888\nUY39277\nUY39668\nUY39711\nUY39793\nUY39922\nUY39923\nUY40121\nUY40125\nUY40829\nUY40830\nUY40831\nUY40832\nUY41041\nUY41231\nUY41232\nUY41308\nUY41495\nUY41783\nUY41806\nUY41812\nUY41964\nUY41965\nUY42039\nUY42111\nUY42372\nUY42451\nUY42499\nUY42526\nUY42683\nUY42684\nUY42813\nUY42981\nUY42987\nUY43013\nUY43298\nUY43371\nUY43603\nUY43605\nUY43607\nUY43657\nUY43658\nUY43661\nUY43662\nUY43663\nUY43748\nUY43837\nUY43907\nUY43908\nUY43909\nUY44120\nUY44169\nUY44170\nUY44174\nUY44211\nUY44304\nUY44424\nUY44436\nUY44549\nUY44757\nUY44767\nUY44812\nUY44820\nUY44881\nUY44922\nUY45049\nUY45094\nUY45126\nUY45131\nUY45168\nUY45173\nUY45197\nUY45198\nUY45243\nUY45310\nUY45489\nUY45535\nUY45537\nUY45584\nUY45654\nUY45726\nUY45744\nUY45822\nUY45906\nUY45907\nUY45964\nUY46111\nUY46156\nUY46176\nUY46287\nUY46389\nUY46454\nUY4658O\nUY46589\nUY46763\nUY46779\nUY46938\nUY47077\nUY47138\nUY47182\nUY47217\nUY47229\nUY47230\nUY47295\nUY47373\nUY47374\nUY47449\nUY47802\nUY47894\nUY47923\nUY48176\nUY48272\nUY49149\nUY90158\nUY90196\nUY90200\nUY90247\nUY90248\nUY90369\nUY90380\nUY90413\nUY90419\nUY90435\nUY90436\nUY90461\nUY90478\nUY90482\nUY90484\nUY90493\nUY90507\nUY90515\nUY90525\nUY90528\nUY90529\nUY90530\nUY90532).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDDEF": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x90\\x16O\\x00\\x90\\x16_\\x14R\\x00,\\x00\\x1b\\x00\\x15\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1990-06-13T00:00:00", "modifydate": "1990-06-14T14:52:00", "lines": 44, "newlines": 27, "modlines": 21, "user": "FCHLAY"}, "text": "//$$$$$$T  JOB (FC50690,FCFC),'SYSLIB DDDEF   ',\n//             USER=,GROUP=,PASSWORD=,                         /*RACF*/\n//             NOTIFY=$$$$$$,\n//             CLASS=W,MSGCLASS=X,MSGLEVEL=(1,1)\n//*                                                           /*JCTRL*/\n//* LIB: SYS2.SMPELIB.XA223    )\n//* DOC: THIS JOB RECEIVES AND APPLIES USERMODS FOR IPO UNDER RELEASE 5\n//*\n//UMOD1   EXEC PGM=GIMSMP,REGION=4096K,\n//             TIME=120\n//STEPLIB  DD  UNIT=3380,VOL=SER=DLIB01,\n//             DISP=SHR,DSN=MVSIPO1.LINKLIB\n//SMPCSI   DD  DSN=LCPSMPE.GLOBAL.CSI,DISP=SHR\n//SMPLOG   DD  DUMMY\n//SMPLOGA  DD  DUMMY\n//SMPOUT   DD  SYSOUT=*\n//SMPRPT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SMPPTFIN DD  DISP=SHR,DSN=SYS2.SMPELIB.XA223(NAPC001)\n//SMPCNTL  DD  *\n SET BDY(TARG0).\n UCLIN.\n REP DDDEF(SYSLIB)\n         CONCAT(\n                MODGEN\n                SMPMTSLB\n                MACLIB\n                PPMACDEF\n                JSXASM\n                AMODGEN\n                AGENLIB\n                HASPSRC\n                RMFMAC01\n                AJSXASM\n                VSCOSRC\n                VSFCCS\n                VSFLBS\n                BLMMACS\n                BLGMACS\n                        ) .\n ENDUCL.\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDDEFDS": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x90\\x16_\\x00\\x902_\\x167\\x00 \\x00\\x1a\\x00\\x0b\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1990-06-14T00:00:00", "modifydate": "1990-11-21T16:37:00", "lines": 32, "newlines": 26, "modlines": 11, "user": "FCHLAY"}, "text": "//$$$$$$T  JOB (FC50690,FCFC),'ISPLPA DDDEF   ',\n//             USER=,GROUP=,PASSWORD=,                         /*RACF*/\n//             NOTIFY=$$$$$$,\n//             CLASS=W,MSGCLASS=X,MSGLEVEL=(1,1)\n//*                                                           /*JCTRL*/\n//* LIB: SYS2.SMPELIB.XA223    )\n//* DOC: THIS JOB RECEIVES AND APPLIES USERMODS FOR IPO UNDER RELEASE 5\n//*\n//UMOD1   EXEC PGM=GIMSMP,REGION=4096K,\n//             TIME=120\n//SMPCSI   DD  DSN=LCPSMPE.GLOBAL.CSI,DISP=SHR\n//SMPOUT   DD  SYSOUT=*\n//SMPRPT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SMPPTFIN DD  DUMMY\n//SMPCNTL  DD  *\n SET BDY(TARG0).\n UCLIN.\n REP DDDEF(CAILIB) UNIT(3380) VOLUME(PAGE02)\n DA(SYS2.PHCAI.XA223.CAILIB) SHR .\n ENDUCL.\n/*\n//\n REP DDDEF(RESLIB13) UNIT(3380) VOLUME(XARES1)\n DA(IMSVS.RESLIB) SHR .\n REP DDDEF(LOADLIB) UNIT(3380) VOLUME(CICS04)\n DA(SYS1.CICS.LOADLIB) SHR .\n REP DDDEF(JES2LPA) UNIT(3380) VOLUME(XARES0)\n DA(SYS1.JES2LPA) SHR .\n REP DDDEF(JES2SRC) UNIT(3380) VOLUME(DLIB01)\n DA(SYS1.JES2SRC) SHR .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXITU83": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x18O\\x00\\x90\\x18O\\x17\\x18\\x003\\x003\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xe8\\xf2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-07-03T00:00:00", "modifydate": "1990-07-03T17:18:00", "lines": 51, "newlines": 51, "modlines": 0, "user": "FCHLY2"}, "text": "++USERMOD(EXITU83).\n++VER(Z038) FMID(HBB2102) REQ(FNMU834).\n++JCLIN.\n//EXIT83 EXEC PGM=IEV90,REGION=1024K,PARM='DECK,NOOBJ'\n//SYSIN     DD DSN=SYS1.NPM.V1R3M0.SFNMSRC1(FNMU83),DISP=SHR\n//SYSLIB    DD DSN=SYS1.NPM.V1R3M0.SFNMMAC1,DISP=SHR\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//          DD DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1    DD UNIT=WORK,SPACE=(CYL,(5))\n//SYSUT2    DD UNIT=WORK,SPACE=(CYL,(5))\n//SYSUT3    DD UNIT=WORK,SPACE=(CYL,(5))\n//SYSPRINT  DD SYSOUT=*\n//SYSPUNCH  DD DSN=&&OBJ1(FNMU83),UNIT=WORK,DISP=(,PASS),\n//             SPACE=(TRK,(10,1,1),RLSE),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//LINK83   EXEC PGM=IEWL,PARM='RENT,LET,LIST,XREF'\n//SYSPRINT  DD SYSOUT=*\n//SYSUT1    DD UNIT=WORK,SPACE=(1024,(400,20))\n//AFNMMOD1  DD DSN=SYS1.NPM.V1R3M0.SFNMLMD1,DISP=SHR\n//OBJ       DD DSN=&&OBJ1(FNMU83),DISP=SHR\n//SYSLMOD   DD DSN=SYS1.LPALIB,DISP=SHR\n//SYSLIN    DD *             LINKEDIT NPM SMF EXIT ROUTINES\n INCLUDE OBJ(FNMU83)               IEFU83 EXIT INTERFACE ROUTINE\n INCLUDE AFNMMOD1(FNMU83X1)        SMF RECORD CONTROL ROUTINE\n INCLUDE AFNMMOD1(FNMU83X2)        POST RTM RECORDS TO NPM\n ENTRY FNMU83\n NAME IEFU83(R)\n//EXIT84 EXEC PGM=IEV90,REGION=1024K,PARM='DECK,NOOBJ'\n//SYSIN     DD DSN=SYS1.NPM.V1R3M0.SFNMSRC1(FNMU84),DISP=SHR\n//SYSLIB    DD DSN=SYS1.NPM.V1R3M0.SFNMMAC1,DISP=SHR\n//          DD DSN=SYS1.MACLIB,DISP=SHR\n//          DD DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1    DD UNIT=WORK,SPACE=(CYL,(5))\n//SYSUT2    DD UNIT=WORK,SPACE=(CYL,(5))\n//SYSUT3    DD UNIT=WORK,SPACE=(CYL,(5))\n//SYSPRINT  DD SYSOUT=*\n//SYSPUNCH  DD DSN=&&OBJ1(FNMU84),UNIT=WORK,DISP=(,PASS),\n//             SPACE=(TRK,(10,1,1),RLSE),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//LINK84   EXEC PGM=IEWL,PARM='RENT,LET,LIST,XREF'\n//SYSPRINT  DD SYSOUT=*\n//SYSUT1    DD UNIT=WORK,SPACE=(1024,(400,20))\n//AFNMMOD1  DD DSN=SYS1.NPM.V1R3M0.SFNMLMD1,DISP=SHR\n//OBJ       DD DSN=&&OBJ1(FNMU83),DISP=SHR\n//SYSLMOD   DD DSN=SYS1.LPALIB,DISP=SHR\n//SYSLIN    DD *             LINKEDIT NPM SMF EXIT ROUTINES\n INCLUDE OBJ(FNMU84)               IEFU84 EXIT INTERFACE ROUTINE\n INCLUDE AFNMMOD1(FNMU83X1)        SMF RECORD CONTROL ROUTINE\n ENTRY FNMU84\n NAME IEFU84(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FNMU834": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x90\\x18O\\x00\\x90$\\x7f\\x179\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xe8\\xf2@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1990-07-03T00:00:00", "modifydate": "1990-09-04T17:39:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "FCHLY2"}, "text": "++USERMOD(FNMU834).\n++VER(Z038) FMID(HNR1302) PRE(UY39464,UY18697).\n++MACUPD(FNMU83) ASSEM(FNMU83).\n./ CHANGE NAME=FNMU83\n*        FORCE MACRO TO ASSEMBLE FOR NPM EXIT\n./ ENDUP\n++MACUPD(FNMU84) ASSEM(FNMU84).\n./ CHANGE NAME=FNMU84\n*        FORCE MACRO TO ASSEMBLE FOR NPM EXIT\n./ ENDUP\n++MOD(FNMU83X1) LKLIB(SFNMLMD1).\n++MOD(FNMU83X2) LKLIB(SFNMLMD1).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEAVMXIT": {"ttr": 769, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*          DATA SET IEAVMXITCM AT LEVEL 021 AS OF 03/30/90\nIEAVMXIT TITLE 'LIGHTING MESSAGE HANDLING EXIT            '             00001**3\n*/* LIB:  N/A                                                           00002\n*/* GDE:  GC28-1147 MVS/XA SPL USER EXITS                               00003\n*/* DOC:  THIS EXIT IS TAKEN FROM THE CANCWAIT SAMPLE ON PAGE 51        00004\n*/*       ON THE JOB LOG WITH STEP TERMINATION STATUS.                  00005\n*********************************************************************** 00006\n*                                                                     * 00007\n*             MODULE NAME = IEAVMXIT                                  * 00008**3\n*                                                                     * 00009\n*             DESCRIPTIVE NAME =  COMMUNICATIONS TASK USER EXIT TO    * 00010*19\n*                SUPPRESS ROUT CODE 14 MESSAGES                       * 00011*19\n*                                                                     * 00012\n*             PHILIPS LIGHTING 1990, THIS IS IN THE PUBLIC DOMAIN AND * 00013\n*             IS IN USE AT PHILIPS LIGHTING.  PLEASE FEEL FREE TO USE * 00014\n*             AT YOUR OWN RISK.  NO WARRANTY EXPRESS OR IMPLIED IS    * 00015**3\n*             GIVEN                                                   * 00016**3\n*                                                                     * 00017**3\n*                                                                     * 00018\n*                                                                     * 00019\n*              NOTES =                                                * 00020\n*                                                                     * 00021\n*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE * 00022\n*                    IF A DIFFERENT CHARACTER SET IS NEEDED.          * 00023\n*                                                                     * 00024\n*                 RESTRICTIONS = NONE                                 * 00025\n*                                                                     * 00026\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        * 00027\n*                    REGISTERS 0 TO 1  = WORK REGISTERS               * 00028\n*                    REGISTERS 2 TO 11 = SEE REGISTER EQUATES         * 00029*20\n*                    REGISTER  12      = ADDRESSABILITY TO IEAVMXIT   * 00030**3\n*                                        CSECT                        * 00031\n*                    REGISTER  13      = ADDRESSIBILITY TO DATA DSECT * 00032\n*                    REGISTERS 14,15   = WORK REGISTERS               * 00033\n*                                                                     * 00034\n*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        * 00035\n*                   BINARY ZEROES)                                    * 00036\n*                                                                     * 00037\n*             MODULE TYPE = PROCEDURE                                 * 00038\n*                                                                     * 00039\n*                PROCESSOR = ASM                                      * 00040\n*                                                                     * 00041\n*                MODULE SIZE = 1200 BYTES                             * 00042\n*                                                                     * 00043\n*                ATTRIBUTES = KEY 0, REENTRANT,                       * 00044\n*                   SUPERVISOR STATE, ENABLED, NO LOCKS HELD          * 00045\n*                                                                     * 00046\n*             ENTRY POINTS = IEAVMXIT (ONLY ENTRY POINT)              * 00047**3\n*                                                                     * 00048\n*                LINKAGE =                                            * 00049\n*                                                                     * 00050\n*                                                                     * 00051\n*             INPUT = REG1 POINTS TO THE ADDRESS OF THE               * 00052\n*                     COMMUNICATIONS TASK EXIT PARAMETER LIST (CTXT)  * 00053\n*                     REGS 0 AND 2-12 IRRELEVANT                        00054\n*                     REG 13, STANDARD SAVE AREA                        00055\n*                     REG 14, RETURN ADDRESS                            00056\n*                     REG 15, ENTRY POINT ADDRESS                       00057\n*                                                                     * 00058\n*             OUTPUT = NONE                                           * 00059\n*                                                                     * 00060\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   * 00061\n*                                                                     * 00062\n*                OUTPUT = NONE                                        * 00063\n*                                                                     * 00064\n*                RETURN CODE = ZERO                                   * 00065\n*                                                                     * 00066\n*             EXIT - ERROR = NONE                                     * 00067\n*                                                                     * 00068\n*                OUTPUT = NONE                                        * 00069\n*                                                                     * 00070\n*                RETURN CODE = ZERO                                   * 00071\n*                                                                     * 00072\n*             EXTERNAL REFERENCES =                                   * 00073\n*                                                                     * 00074\n*                ROUTINES = NONE                                      * 00075\n*                                                                     * 00076\n*                DATA AREAS = NONE                                    * 00077\n*                                                                     * 00078\n*                CONTROL BLOCKS = NONE                                * 00079\n*                                                                     * 00080\n*             TABLES = NONE                                           * 00081\n*                                                                     * 00082\n*             MACROS = SYS1.MACLIB IEZBITS, RETURN, SAVE              * 00083*20\n*                      SYS1.AMODGEN IEZVX100                          * 00084*20\n*                                                                     * 00085\n*             CHANGE ACTIVITY = NONE                                  * 00086\n*                                                                     * 00087\n*                                                                     * 00088\n*             ABEND CODES = NONE                                      * 00089\n*                                                                     * 00090\n*********************************************************************** 00091\n         EJECT                                                          00092\nIEAVMXIT CSECT ,                                                        00093**3\nIEAVMXIT AMODE 31                                                       00094**3\nIEAVMXIT RMODE ANY                                                      00095**3\n*                                                                       00096\n* CONSTANT ADDRESS EQAUTES                                              00097\n*                                                                       00098\nPSAAOLD  EQU    X'224',4    ADDRESS IN PSA OF CURRENT ASCB              00099\nASCBJBNI EQU    X'AC',4     ADDRESS IN JOBNAME IN ASCB                  00100\nCHSTEP   EQU    X'38',8     ADDRESS IN STEP NAME IN CSCB                00101\nCHPROCSN EQU    X'18',8     ADDRESS IN PROC STEP NAME IN CSCB           00102\n*                                                                       00103\n* CONSTANT EQUATES                                                      00104\n*                                                                       00105\nK0       EQU   00                  NON-RELOCATABLE CONSTANT 00          00106\nK1       EQU   01                  NON-RELOCATABLE CONSTANT 01          00107\nK2       EQU   02                  NON-RELOCATABLE CONSTANT 02          00108\nK3       EQU   03                  NON-RELOCATABLE CONSTANT 03          00109\nK4       EQU   04                  NON-RELOCATABLE CONSTANT 04          00110\nK5       EQU   05                  NON-RELOCATABLE CONSTANT 05          00111\nK6       EQU   06                  NON-RELOCATABLE CONSTANT 06          00112\nK7       EQU   07                  NON-RELOCATABLE CONSTANT 07          00113\nK8       EQU   08                  NON-RELOCATABLE CONSTANT 08          00114\nK9       EQU   09                  NON-RELOCATABLE CONSTANT 09          00115\nKA       EQU   10                  NON-RELOCATABLE CONSTANT 10          00116\nKB       EQU   11                  NON-RELOCATABLE CONSTANT 11          00117\nKC       EQU   12                  NON-RELOCATABLE CONSTANT 12          00118\nKD       EQU   13                  NON-RELOCATABLE CONSTANT 13          00119\nKE       EQU   14                  NON-RELOCATABLE CONSTANT 14          00120\nKF       EQU   15                  NON-RELOCATABLE CONSTANT 15          00121\n*                                                                       00122\n* CONSTANT EQUATES                                                      00123\n*                                                                       00124\nSPINPRVT EQU   230                 USE SUBPOOL 230 FOR GETMAIN          00125**5\nSUBPOOL  EQU   252                 USE SUBPOOL 252 FOR GETMAIN          00126**5\nCK       EQU   C'K'                CONSTANT CHAR 'K'                    00127\nCASTR    EQU   C'*'                CONSTANT CHAR '*'                    00128\nC0       EQU   C'0'                CONSTANT CHAR '0'                    00129\n         IEZBITS                                                        00130\n*                                                                       00131\n* REGISTER EQUATES                                                      00132\n*                                                                       00133\nR0       EQU   00                  REG  0 - WORK REG                    00134**3\nR1       EQU   01                  REG  1 - WORK/PARMETER REG           00135**3\nR2       EQU   02                  REG  2 - WORK REG                    00136**3\nR3       EQU   03                  REG  3 - POINTER TO THE CTXT         00137**3\nR4       EQU   04                  REG  4 - NOT USED                    00138*20\nR5       EQU   05                  REG  5 - NOT USED                    00139*20\nR6       EQU   06                  REG  6 - NOT USED                    00140*20\nR7       EQU   07                  REG  7 - PTR TO MSSG ROUTING AREA    00141*20\nR8       EQU   08                  REG  8 - UNUSED                      00142**3\nR9       EQU   09                  REG  9 - UNUSED                      00143**3\nR10      EQU   10                  REG 10 - UNUSED                      00144\nR11      EQU   11                  REG 11 - UNUSED                      00145\nR12      EQU   12                  REG 12 - CSECT BASE REG              00146\nR13      EQU   13                  REG 13 - DATA DSECT BASE REG         00147\nR14      EQU   14                  REG 14 - LINKAGE REGISTER            00148\nR15      EQU   15                  REG 15 - WORK REG                    00149\n         EJECT                                                          00150\n         SAVE  (14,12)                                                  00151**5\n         USING IEAVMXIT,R12        SET UP CSECT ADDRESSABILITY          00152**3\n         LR    R12,R15             LOAD BASE REGISTER                   00153\n         L     R3,0(,R1)           LOAD ADDRESS OF CTXT                 00154**1\n         USING CTXT,R3                                                  00155**1\n*        L     R4,CTXTTXPJ         POINT TO THE MESSAGE ATTRIBUTES      00156*20\n*        USING CTXTATTR,R4                                              00157*20\n*        LA    R5,CTXTTMSG         POINT TO THE MESSAGE AREA            00158*20\n*        USING MSGTEXT,R5                                               00159*20\n         L     R7,CTXTRCP          POINT TO MESSAGE ROUTING AREA        00160*21\n         USING CTXTROUT,R7                                              00161*21\n         TM    CTXTR002,CTXTR14     IS IT ROUT CODE 14                  00162**2\n         BZ    EXIT                 NO, EXIT                            00163**2\n         NI    CTXTR002,255-CTXTR14  AND OFF ROUT CODE 14 BIT           00164**8\n         OI    CTXTRFB1,CTXTRCRC       REQUEST TO CHANGE ROUT           00165*11\nEXIT     DS    0H                                                       00166**2\n         RETURN (14,12)                EXIT, NOTE RETURN CODE NOT GIVEN 00167**4\n* MSGTEXT  DSECT                                                        00168*20\n* MSGID    DS    CL8                                                    00169*20\n* JOBDATA  DS    CL8                                                    00170*20\n*          ORG   MSGTEXT                                                00171*20\n*          DS    CL4                                                    00172*20\n* WTORID   DS    CL8                                                    00173*20\n*          DS    CL25                                                   00174*20\n* WAITVAL  DS    CL4                                                    00175*20\n         IEZVX100                                                       00176**2\n         END                                                            00177**2\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFACTRT": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x90\\x17?\\x00\\x90\\x17?\\x157\\x02\\xf3\\x00\\xd8\\x02\\xf3\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1990-06-22T00:00:00", "modifydate": "1990-06-22T15:37:00", "lines": 755, "newlines": 216, "modlines": 755, "user": "FCHLAY"}, "text": "IEFACTRT TITLE 'SMF JOB/STEP TERMINATION EXIT ROUTINE     '\n*/* LIB:  IPO1.SAMPLIB(SMFTRTX)\n*/* GDE:  CBIPO MVS CUSTOMIZATION\n*/* DOC:  THIS SAMPLE SMF EXIT ROUTINE PUTS JOB SUMMARY MESSAGES\n*/*       TO THE JOB LOG WITH STEP TERMINATION STATUS.\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = IEFACTRT                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME =  CUSTOM-BUILT IPO SUPPLIED           *\n*                SMF EXIT ROUTINE TO PUT MESSAGES ON JOB LOG WITH     *\n*                STEP TERMINATION STATUS.                             *\n*                                                                     *\n*             COPYRIGHT = 5750 AAM                              MSPIPOJ\n*                         INTERNATIONAL BUSINESS MACHINES       MSEIPO4\n*                         CORPORATION, 1979, 1982,              MSPIPOI\n*                         1983                                    IPOXA\n*                                                                     *\n*             FUNCTION =                                              *\n*                PUT MESSAGES VIA WTO ON JOB LOG.                     *\n*                                                                     *\n*                OPERATION =                                          *\n*                   FOR JOB STEP TERMINATION PUT STATISTICS OF STEP.  *\n*                   FOR JOB TERMINATION PUT OUT JOB ENDED MESSAGE.    *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE *\n*                    IF A DIFFERENT CHARACTER SET IS NEEDED.          *\n*                    REQUIRES WTO EXIT ROUTINE, IEECVXIT, TO          *\n*                    SUPPRESS ROUTE CODE 14 FROM CONSOLE.             *\n*                                                                     *\n*                 RESTRICTIONS = NONE                                 *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 1  = WORK REGISTERS               *\n*                    REGISTERS 2 TO 5  = UNUSED                       *\n*                    REGISTER  6       = OUTPUT LINE REGISTER         *\n*                    REGISTER  7       = COMMON PARAMETER AREA        *\n*                    REGISTERS 8 TO 11 = UNUSED                       *\n*                    REGISTER  12      = ADDRESSABILITY TO IEFACTRT   *\n*                                        CSECT                        *\n*                    REGISTER  13      = ADDRESSIBILITY TO DATA DSECT *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        *\n*                   BINARY ZEROES)                                    *\n*                                                                     *\n*             MODULE TYPE = PROCEDURE                                 *\n*                                                                     *\n*                PROCESSOR = MUST BE ASSEMBLED WITH ASSEMBLER H       *\n*                   VERSION 2                                         *\n*                                                                     *\n*                MODULE SIZE = 1200 BYTES                             *\n*                                                                     *\n*                ATTRIBUTES = KEY 0, REENTRANT,                       *\n*                   SUPERVISOR STATE, ENABLED, NO LOCKS HELD          *\n*                                                                     *\n*             ENTRY POINTS = IEFACTRT (ONLY ENTRY POINT)              *\n*                                                                     *\n*                LINKAGE =                                            *\n*                                                                     *\n*                                                                     *\n*             INPUT = REG1 POINTS TO LIST OF FULLWORD ADDRESSES       *\n*                     AS FOLLOWS.                                     *\n*                 1.  PTR TO COMMON EXIT PARAMETER AREA\n*                 2.  PTR TO STEPNAME FIELD\n*                 3.  PTR TO PROGRAMMER NAME FIELD\n*                 4.  PTR TO JOB TCB CPU TIME FIELD\n*                 5.  PTR TO JOB ACCOUNTING FIELDS\n*                 6.  PTR TO STEP TCB CPU TIME FIELD\n*                 7.  PTR TO STEP ACCOUNTING FIELDS\n*                 8.  PTR TO CANCEL FLAG & STEP NUMBER\n*                 9.  PTR TO CONDITION CODE FIELD\n*                10.  PTR TO SMF RECORD TO BE WRITTEN\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH AND SET MODE  *\n*                             (BSM 0,14)                              *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = NONE                                      *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = NONE                                *\n*                                                                     *\n*             TABLES = NONE                                           *\n*                                                                     *\n*             MACROS = SAVE, WTO, RETURN, GETMAIN, FREEMAIN, ESTAE,   *\n*                      SETRP, IFASMFR, IEFJMR, IHASDWA, SPLEVEL       *\n*                                                                     *\n*             CHANGE ACTIVITY = HAS BEEN UPDATED TO RUN ON MVS/XA     *\n*                ON 31-BIT MODE ABOVE THE LINE.                       *\n*                IT PROVIDES THE TOTAL DEVICE CONNECT TIME IN MS      *\n*                FOR EACH STEP IN ADDITION TO THE EXCP COUNT          *\n*                THIS PROGRAM WILL NOT RUN ON MVS/370                 *\n*                                                                     *\n*             MESSAGES =                                              *\n*                STEP TERMINATION LINE AND JOB TERMINATION LINE.      *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\n         EJECT\nIEFACTRT CSECT ,\nIEFACTRT AMODE 31                                             IPOXA\nIEFACTRT RMODE ANY                                            IPOXA\n*\n* CONSTANT ADDRESS EQAUTES\n*\nPSAAOLD  EQU    X'224',4    ADDRESS IN PSA OF CURRENT ASCB\nASCBJBNI EQU    X'AC',4     ADDRESS IN JOBNAME IN ASCB\nCHSTEP   EQU    X'38',8     ADDRESS IN STEP NAME IN CSCB\nCHPROCSN EQU    X'18',8     ADDRESS IN PROC STEP NAME IN CSCB\n*\n* CONSTANT EQUATES\n*\nK0       EQU   00                  NON-RELOCATABLE CONSTANT 00\nK1       EQU   01                  NON-RELOCATABLE CONSTANT 01\nK2       EQU   02                  NON-RELOCATABLE CONSTANT 02\nK3       EQU   03                  NON-RELOCATABLE CONSTANT 03\nK4       EQU   04                  NON-RELOCATABLE CONSTANT 04\nK5       EQU   05                  NON-RELOCATABLE CONSTANT 05\nK6       EQU   06                  NON-RELOCATABLE CONSTANT 06\nK7       EQU   07                  NON-RELOCATABLE CONSTANT 07\nK8       EQU   08                  NON-RELOCATABLE CONSTANT 08\nK9       EQU   09                  NON-RELOCATABLE CONSTANT 09\nKA       EQU   10                  NON-RELOCATABLE CONSTANT 10\nKB       EQU   11                  NON-RELOCATABLE CONSTANT 11\nKC       EQU   12                  NON-RELOCATABLE CONSTANT 12\nKD       EQU   13                  NON-RELOCATABLE CONSTANT 13\nKE       EQU   14                  NON-RELOCATABLE CONSTANT 14\nKF       EQU   15                  NON-RELOCATABLE CONSTANT 15\n*\n* CONSTANT EQUATES\n*\nSUBPOOL  EQU   229                 USE SUBPOOL 229 FOR GETMAIN\nCK       EQU   C'K'                CONSTANT CHAR 'K'\nCASTR    EQU   C'*'                CONSTANT CHAR '*'\nC0       EQU   C'0'                CONSTANT CHAR '0'\n         IEZBITS\n*\n* REGISTER EQUATES\n*\nR00      EQU   00                  REG 00 - WORK REG\nR01      EQU   01                  REG 01 - WORK/PARMETER REG\nR02      EQU   02                  REG 02 - WORK REG\nR03      EQU   03                  REG 03 - WORK REG\nR04      EQU   04                  REG 04 - UNUSED\nR05      EQU   05                  REG 05 - UNUSED\nR06      EQU   06                  REG 06 - BASE FOR OUTPUT LINE\nR07      EQU   07                  REG 07 - BASE FOR COMMON PARM AREA\nR08      EQU   08                  REG 08 - BASE FOR BLDL LIST\nR09      EQU   09                  REG 09 - BASE FOR SMF RECORD\nR10      EQU   10                  REG 10 - UNUSED\nR11      EQU   11                  REG 11 - UNUSED\nR12      EQU   12                  REG 12 - CSECT BASE REG\nR13      EQU   13                  REG 13 - DATA DSECT BASE REG\nR14      EQU   14                  REG 14 - LINKAGE REGISTER\nR15      EQU   15                  REG 15 - WORK REG\n         EJECT\n* SPLEVEL IS CALLED TO REQUEST THE MVS/XA EXPANSION\n         SPLEVEL SET=2             GET XA LEVEL IF REQUIRED AS WE\n*                                  RUN IN 31-BIT MODE\n         SAVE  (14,12),,IEFACTRT_R01.0_&SYSDATE._&SYSTIME\n         USING IEFACTRT,R12        SET UP CSECT ADDRESSABILITY\n         LR    R12,R15             LOAD BASE REGISTER\n         USING DATA,R13            SET UP DATA DSECT ADDR.\n         USING JMR,R07             SET UP ADDRESSABILITY TO COMMON\n         L     R07,PARMEPRM-PARMS(K0,R01) COMMON AREA ADDRESS\n         TM    JMRINDC,JMRFIND     IS IT TIME SHARING USER?\n         BO    QUICKOUT            YES, EXIT BEFORE GETMAIN\n         GETMAIN RU,LV=LDATA,SP=SUBPOOL GET STORAGE           IPOXA\n         ST    R13,SAVEBK-SAVE(,R01) SAVE CALLER'S SAVE AREA ADDR\n         ST    R01,SAVEFW          SAVE MY SAVE AREA ADDRESS\n         LR    R15,R01             SAVE GETMAINED STORE ADDRESS\n         L     R01,SAVER1          RELOAD REGISTERS AFTER GETMAIN\n         L     R02,SAVER0          RELOAD REG2 WITH REG0 ENTRY  CODE\n         LR    R13,R15             LOAD REGISTER 13 WITH GETMAINED ADDR\n         MVC   PARMS(LPARMS),K0(R01) SAVE INPUT PARMS\n*\n*        SET UP RECOVERY ENVIRONMENT\n*\n         LA    R00,RTRYRTN1            RETRY ROUTINE - NO SDWA\n         ST    R00,ESTAPARM            STORE IN PARAMETER LIST\n         LA    R00,RTRYRTN2            RETRY ROUTINE - WITH SDWA\n         ST    R00,ESTAPARM+K4         STORE IN PARAMETER LIST\n         STM   R12,R13,ESTAPARM+K8     STORE BASE & DATA REG IN PARM\n         MVC   ESTAEW(LESTAEL),ESTAEL  MOVE IN ESTAE PARAMETER LIST\n         ESTAE RECOVERY,CT,PARAM=ESTAPARM,MF=(E,ESTAEW) SETUP RCVRY\n*\n*        DETERMINE REASON FOR ENTRY  STEP/JOB TERMINATION\n*\n         L     R09,PARMRECD        LOAD ADDRESS OF SMF RECORD\n         C     R02,R30CODE         WAS ENTRY CODE FOR REC30     MSEIPO4\n         BNE   EXIT                NO - EXIT                    MSEIPO4\n         USING SMFRCD30,R09                                     MSEIPO4\n         CLI   SMF30SON+1,K1       CHECK IF SSSEGMENT IS THERE  MSEIPO4\n         BL    EXIT                NO - EXIT                    MSEIPO4\n         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4\n         A     R04,SMF30SOF        POINT TO SS SEGMENT          MSEIPO4\n         USING SMF30PSS,R04                                     MSEIPO4\n         CLC   SMF30TYP,R30JOB     WAS IT JOB TERMINATION       MSEIPO4\n         BE    JOBTERM             YES, HANDLE JOB TERM         MSEIPO4\n         CLC   SMF30TYP,R30STEP    WAS IT STEP TERMINATION      MSEIPO4\n         BNE   EXIT                EXIT IF NOT                  MSEIPO4\n         DROP  R04                                              MSEIPO4\n         EJECT\n*\n*        HANDLE STEP TERMINATION CONDITIONS\n*\nSTEPTERM DS    0H                  ENTRY FROM STEP TERMINATION\n         LA    R06,WTO1TXT         GET ADDRESS OF WTO TEXT AREA\n         USING LINE2,R06           SET UP ADDRESSABILITY TO LINE\n         L     R01,PARMINDC        LOAD ADDRESS OF STEP NO\n         CLI   K1(R01),K1          IS IT STEP 1?\n         BNE   NOTFIRST            NO, BR PAST HEADER LINE\n         MVC   WTO1TXT,LINE3A      MOVE HEADER LINE 1 TO OUTPUT\n         BAL   R14,MSGRTN          PUT OUT LINE\n         MVC   WTO1TXT,LINE3       MOVE SECOND HEADER\n         BAL   R14,MSGRTN          PUT IT OUT\nNOTFIRST MVI   WTO1TXT,C' '        INIT OUTPUT LINE TO BLANKS\n         MVC   WTO1TXT+K1(L'WTO1TXT-K1),WTO1TXT COPY BLANKS\n         MVC   JOBNAME,JMRJOB      MOVE JOBNAME INTO LINE\n         L     R01,PSAAOLD         GET ADDRESS OF CURRENT ASCB\n         L     R01,ASCBJBNI(K0,R01) GET ADDRESS OF JOBNAME FIELD\n         CLI   CHPROCSN(R01),C' '  IS PROC STEP NAME BLANK?\n         BNH   NOPROC              YES, DO NOT MOVE IT IN\n         MVC   PROCSTEP,CHPROCSN(R01) MOVE IN PROC STEP NAME\nNOPROC   CLI   CHSTEP(R01),C' '    IS STEP NAME BLANK?\n         BNH   PUTMSG1             YES, DO NOT MOVE IT IN\n         MVC   STEPNAME,CHSTEP(R01) MOVE IN STEP NAME\n*                                                               MSEIPO4\n* GET INFORMATION FROM COMPLETION SEGMENT                       MSEIPO4\n*                                                               MSEIPO4\nPUTMSG1  DS    0H                  CONTINUE PROCESSING\n         CLI   SMF30TON+1,K1       DOES COMPL SEGM EXIST        MSEIPO4\n         BL    PUTMSG1A            NO - GOTO NEXT SEGMENT       MSEIPO4\n         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4\n         A     R04,SMF30TOF        POINT TO SS SEGMENT          MSEIPO4\n         USING SMF30CMP,R04                                     MSEIPO4\n         LA    R01,SMF30STI\n         SLR   R00,R00\n         ICM   R00,K3,SMF30SCC     GET COND CODE\n         BAL   R14,PRETCDE         CALL RETURN CODE ROUTINE\n         DROP  R04                                              MSEIPO4\n*                                                               MSEIPO4\n* GET INFORMATION FROM PERFORMANCE SECTION                      MSEIPO4\n*                                                               MSEIPO4\nPUTMSG1A DS    0H                  CONTINUE PROCESSING          MSEIPO4\n         CLI   SMF30PON+1,K1       DOES PERFORMANCE SECT EXIST  MSEIPO4\n         BL    PUTMSG1B            NO - GOTO NEXT SEGMENT       MSEIPO4\n         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4\n         A     R04,SMF30POF        POINT TO PERFORM SEGMENT     MSEIPO4\n         USING SMF30PRF,R04                                     MSEIPO4\n         L     R01,SMF30SRV        SET SERVICE UNITS USED       MSEIPO4\n         BAL   R14,PCOUNT          CALL CONVERT ROUTINE\n         MVC   SERV,DWORD+L'DWORD-L'SERV MOVE TO OUTPUT LINE\n         DROP  R04                                              MSEIPO4\n*                                                               MSEIPO4\n* GET INFORMATION FROM ID SEGMENT                               MSEIPO4\n*                                                               MSEIPO4\nPUTMSG1B DS    0H                  CONTINUE PROCESSING          MSEIPO4\n         CLI   SMF30ION+1,K1       DOES ID SEGMENT EXIST        MSEIPO4\n         BL    PUTMSG1C            NO - GOTO NEXT SEGMENT       MSEIPO4\n         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4\n         A     R04,SMF30IOF        POINT TO ID SEGMENT          MSEIPO4\n         USING SMF30ID,R04                                      MSEIPO4\n         LH    R01,SMF30PGN        GET PERFORMANCE GROUP NUM    MSEIPO4\n         BAL   R14,PCOUNT          CALL CONVERT ROUTINE\n         MVC   PG,DWORD+L'DWORD-L'PG MOVE TO OUTPUT LINE\n         TIME  BIN                 GET TIME IN HUNDREDS/SEC     MSEIPO4\n         LR    R01,R00             LOAD STEP TERM INTO REG 1    MSEIPO4\n         ICM   R00,15,SMF30SIT     LOAD STEP INIT TIME          MSEIPO4\n         BAL   R14,PCLOCK          CONVERT IT\n         MVC   CLOCK,DWORD+L'DWORD-L'CLOCK-K2 MOVE TO OUTPUT LINE\n         DROP  R04                                              MSEIPO4\n*                                                               MSEIPO4\n* GET INFORMATION FROM STORAGE AND PAGING SECTION               MSEIPO4\n*                                                               MSEIPO4\nPUTMSG1C DS    0H                  CONTINUE PROCESSING          MSEIPO4\n         CLI   SMF30RON+1,K1       DOES STORAGE SECTION EXIST   MSEIPO4\n         BL    PUTMSG1D            NO - GOTO NEXT SEGMENT       MSEIPO4\n         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4\n         A     R04,SMF30ROF        POINT TO ID SEGMENT          MSEIPO4\n         USING SMF30SAP,R04                                     MSEIPO4\n         L     R01,SMF30NSW        GET NUMBER OF SWAPS          MSEIPO4\n         BAL   R14,PCOUNT          CONVERT IT\n         MVC   SWAPS,DWORD+L'DWORD-L'SWAPS MOVE IT TO OUTPUT\n         L     R01,SMF30PGI        GET NUMBER OF PAGE INS       MSEIPO4\n         A     R01,SMF30PGO        ADD NUMBER OF PAGE OUTS      MSEIPO4\n         BAL   R14,PCOUNT          CONVERT COUNT\n         MVC   PAGE,DWORD+L'DWORD-L'PAGE MOVE TO OUTPUT LINE\n         L     R01,SMF30PSI        GET NUMBER OF SWAP PAGE INS  MSEIPO4\n         A     R01,SMF30PSO        ADD NUMBER OF SWAP PAGE OUTS MSEIPO4\n         BAL   R14,PCOUNT          CONVERT COUNT\n         MVC   SWAP,DWORD+L'DWORD-L'SWAP MOVE TO OUTPUT LINE\n         L     R01,SMF30VPI        GET NUMBER OF VIO PAGE INS   MSEIPO4\n         A     R01,SMF30VPO        ADD NUMBER OF VIO PAGE OUTS  MSEIPO4\n         BAL   R14,PCOUNT          CONVERT COUNT\n         MVC   VIO,DWORD+L'DWORD-L'VIO MOVE TO OUTPUT LINE\n         DROP  R04                                              MSEIPO4\n*                                                               MSEIPO4\n* GET INFORMATION FROM CPU ACCOUNTING SECTION                   MSEIPO4\n*                                                               MSEIPO4\nPUTMSG1D DS    0H                  CONTINUE PROCESSING          MSEIPO4\n         SLR   R00,R00             CLEAR REG 0\n         L     R01,PARMSTPC        LOAD STEP TCB CPU TIME ADDR\n         ICM   R01,K7,K0(R01)      LOAD STEP TCB CPU TIME       MSPIPOI\n         LA    R01,K0(,R01)        ZERO HIGH ORDER BYTE\n         BAL   R14,PCLOCK          CONVERT FOR OUTPUT\n         MVC   TCB,DWORD+L'DWORD-L'TCB-K1 MOVE TO OUTPUT LINE\n         CLI   SMF30CON+1,K1       DOES CPU/ACC SECTION EXIST   MSEIPO4\n         BL    PUTMSG1E            NO - GOTO NEXT SEGMENT       MSEIPO4\n         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4\n         A     R04,SMF30COF        POINT TO ID SEGMENT          MSEIPO4\n         USING SMF30CAS,R04                                     MSEIPO4\n         SLR   R00,R00             CLEAR REG 0\n         LR    R01,R00             CLEAR REG 1\n         ICM   R01,KF,SMF30CPS     LOAD SRB TIME                MSPIPOI\n         BAL   R14,PCLOCK          CONVERT IT\n         MVC   SRB,DWORD+L'DWORD-L'SRB-K1 MOVE IT TO OUTPUT LINE\n         DROP  R04                                              MSEIPO4\n*                                                               MSEIPO4\n* GET INFORMATION FROM I/O ACTIVITY SEGMENT                     MSEIPO4\n*                                                               MSEIPO4\nPUTMSG1E DS    0H                  CONTINUE PROCESSING          MSEIPO4\n         CLI   SMF30UON+1,K1       DOES I/O ACT SECTION EXIST   MSEIPO4\n         BL    PUTMSG1F            NO - GOTO NEXT SEGMENT       MSEIPO4\n         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4\n         A     R04,SMF30UOF        POINT TO ID SEGMENT          MSEIPO4\n         USING SMF30URA,R04                                     MSEIPO4\n         L     R01,SMF30TEP        GET TOTAL NUMBER OF EXCPS    MSEIPO4\n         BAL   R14,PCOUNT          CALL CONVERT ROUTINE\n         MVC   EXCP,DWORD+L'DWORD-L'EXCP MOVE TO OUTPUT LINE\n         TM    SMF30DCF,SMF30MFL   DEVICE CONNECT TIME CORRECT  IPOXA\n         BO    NDEVCON             NO                           IPOXA\n         L     R03,SMF30TCN        GET DEVICE CONNECT TIME      IPOXA\n* MULTIPLY DEVICE CONNECT TIME BY .128 TO GET MS                IPOXA\n         SLL   R03,7               MULTIPLY BY 128              IPOXA\n         SR    R02,R02             CLEAR R2                     IPOXA\n         D     R02,F1000           DIVIDE BY 1000               IPOXA\n         LR    R01,R03             PUT QUOTIENT IN R1 (MS)      IPOXA\n         DROP  R04                                              MSEIPO4\n         BAL   R14,PCOUNT          CALL CONVERT ROUTINE         IPOXA\n         MVC   CONN,DWORD+L'DWORD-L'CONN MOVE TO OUTPUT LINE    IPOXA\n         B     PUTMSG1F                                         IPOXA\nNDEVCON  DS    0H                                               IPOXA\n         MVC   CONN+2(4),=C'****'     NO DEVICE CONNECT TIME    IPOXA\nPUTMSG1F DS    0H                                               MSEIPO4\n         BAL   R14,MSGRTN          PUT LINE OUT\n         B     EXIT                BR TO EPILOGUE CODE\n         SPACE 3                                                MSEIPO4\n*                                                               MSEIPO4\n*        HANDLE JOB TERMINATION CONDITIONS                      MSEIPO4\n*                                                               MSEIPO4\nJOBTERM  DS    0H                  ENTRY ON JOB TERMINATION\n         MVC   WTO1TXT,LINE4       SET UP OUTPUT LINE\n         MVC   WTO1TXT+LINE4J(L'LINE4J),JMRJOB MOVE IN JOB NAME\n         L     R01,PARMPROG        LOAD ADDR OF PROGRAMMER NAME\n         MVC   WTO1TXT+LINE4N(L'LINE4N),K0(R01) MOVE IN PROG NAME\n         SLR   R00,R00             ZERO REG\n         LR    R01,R00             ZERO REG 1\n         L     R02,PARMJOBC        LOAD JOB TCB CPU TIME ADDR\n         ICM   R01,K7,K0(R02)      LOAD JOB TCB CPU TIME\n         BAL   R14,PCLOCK          CONVERT TIME FOR OUTPUT\n         MVC   WTO1TXT+LINE4C(L'LINE4C),DWORD+L'DWORD-L'LINE4C-K1\n*                                                               MSEIPO4\n* GET INFORMATION FROM ID SEGMENT                               MSEIPO4\n*                                                               MSEIPO4\n         CLI   SMF30ION+1,K1       DOES ID SEGMENT EXIST        MSEIPO4\n         BL    PUTMSG2             NO - GOTO NEXT SEGMENT       MSEIPO4\n         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4\n         A     R04,SMF30IOF        POINT TO ID SEGMENT          MSEIPO4\n         USING SMF30ID,R04                                      MSEIPO4\n         TIME  BIN                 GET TIME IN HUNDREDS/SEC     MSEIPO4\n         LR    R01,R00             GET JOB TERM TIME            MSEIPO4\n         ICM   R00,15,SMF30SIT     GET JOB INIT TIME            MSEIPO4\n         DROP  R04,R09                                          MSEIPO4\n         BAL   R14,PCLOCK          CONVERT TIME FOR OUTPUT\n         MVC   WTO1TXT+LINE4E(L'LINE4E),DWORD+L'DWORD-L'LINE4E-K2\n         BAL   R14,MSGRTN          PRINT LINE\nPUTMSG2  DS    0H                                               MSEIPO4\n*   FIND BULLETIN\n         LA    R08,BLDLWORK        LOAD ADDR OF BLDL LIST\n         USING BLDL,R08            SET UP ADDR. TO BLDL PARM LIST\n         LA    R01,K1              LOAD A 1\n         STH   R01,BLDLFF          STORE IN BLDL LIST\n         LA    R01,BLDLELEN        LOAD LENGTH OF BLDL ENTRY LEN\n         STH   R01,BLDLLL          STORE ENTRY LENGTH\n         MVC   BLDLNAME,=CL8'BULLETIN' LOAD PROGRAM NAME\n         LR    R00,R08             LOAD REG 0 WITH BLDL\n         BLDL  0,(0)               ISSUE BLDL FOR MODULE\n         LTR   R15,R15             WAS IT THERE?\n         BNZ   EXIT                NO, BR TO EXIT EPILOGUE\n         CLI   BLDLZ,K2            WAS IT OUT OF LINKLIST\n         BNL   EXIT                NO, BR TO EXIT PROLOGUE\n         LA    R02,BLDLNAME        GET BLDL ENTRY ADDRESS\n         MVC   LINKE,LINKL         MOVE IN LINK LIST FORM\n         LINK  DE=(2),SF=(E,LINKE) LINK TO BULLETIN ROUTINE\n         DROP  R08                 DROP BLDL DSECT\n         SPACE 3\nEXIT     DS    0H                  EXIT PROLOGUE\n         ESTAE 0                   CANCEL ESTAE EXIT\nRTRYRTN2 DS    0H                  ESTAE RETRY ROUTINE WITH SDWA\n*                                  JUST FREE STORAGE AND EXIT\n         LR    R01,R13             GET FREEMAIN ADDRESS\n         L     R13,SAVEBK          LOAD OLD REG 13\n         FREEMAIN RU,LV=LDATA,A=(1),SP=SUBPOOL FREE DATA DSECT STORAGE\nQUICKOUT DS 0H                     RETURN TO CALLER\n         LM    14,12,12(13)        RESTORE REGISTERS            IPOXA\n         LA    15,0                SET RETURN CODE              IPOXA\n         BSM   0,14                RETURN TO CALLER IN ITS MODE IPOXA\n         EJECT\nMSGRTN   DS    0H                  MESSAGE(WTO) ROUTINE\n         STM   R14,R01,SAVEAR2     SAVE A FEW REGISTERS\n         LA    R01,L'WTO1TXT+K4    GET LENGTH FOR WTO\n         STH   R01,WTO1LEN         STORE IN WTO PARM LIST\n         MVC   WTO1MCS,MCSFLAG     MOVE IN MCSFLAG\n         MVC   WTO1DESC,DESC       MOVE IN DESCRIPTOR CODES\n         MVC   WTO1ROUT,ROUT       MOVE IN ROUTE CODES\n         MVI   WTO1TXT,C'-'        MOVE IN MESSAGE PREFIX\n         WTO   MF=(E,WTO1)         ISSUE WTO\n         LM    R14,R01,SAVEAR2     RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n***********************************************************************\n*                                                                     *\n*  COUNT CONVERSION ROUTINE: CONVERTS BINARY TO CHARACTER OUTPUT      *\n*        INPUT   REG 1 HAS COUNT TO BE CONVERTED                      *\n*        OUTPUT  DWORD COUNTAINS CHARACTER OUTPUT FIELD               *\n*                                                                     *\n***********************************************************************\nPCOUNT   SAVE  (14,12)             SAVE CALLER'S REGISTERS\n         CVD   R01,DWORD           CONVERT COUNT TO DECIMAL\n         MVC   EDWORK2,EDMASK2     MOVE IN EDIT MASK\n         ED    EDWORK2,DWORD+K2    CONVERT TO CHARACTER\n         CP    DWORD,P99999        IS COUNT>99999?\n         BNH   NOFLOAT             NO, BR PAST FLOAT CODE\n         MVC   DWORD(L'DWORD-K1),EDWORK2+K2 SHIFT IT RIGHT 3 DEC DIGTS\n         MVI   DWORD+L'DWORD-K1,CK MOVE A 'K' FOR THOUSANDS\n         B     PCNTEX              BR TO RETURN\nNOFLOAT  MVC   DWORD,EDWORK2+K4    MOVE IN UNFLOATED COUNT\nPCNTEX   RETURN (14,12)            RETURN TO CALLER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  CLOCK CONVERSION ROUTINE: CONVERTS BINARY TO CHARACTER OUTPUT      *\n*        INPUT   REG 1 HAS FIRST TIME                                 *\n*                REG 0 HAS SECOND TIME\n*        OUTPUT  DWORD COUNTAINS CHARACTER OUTPUT FIELD               *\n*                                                                     *\n***********************************************************************\nPCLOCK   SAVE  (14,12)             SAVE CALLER'S REGISTERS\n         SR    R01,R00             GET TIME DIFFERENCE\n         BNL   LSTH24              IF DIFFERENCE>=0 THEN SKIP\n         A     R01,HR24            ELSE ADD 24 HOURS TO TIME\nLSTH24   DS    0H                  SKIPPED TO HERE\n         SLR   R00,R00             ZERO REG FOR DIVIDE\n         D     R00,F6              DIVIDE TIME BY 6\n         C     R01,TOVER           IF TIME<MAX THEN\n         BL    NOTOVER              BR TO CONVERT IT\n         MVI   DWORD,CASTR         ELSE OVERFLOW FILL WITH\n         MVC   DWORD+K1(L'DWORD-K1),DWORD ********\n         B     PCLKEX              BR TO RETURN\nNOTOVER  CVD   R01,DWORD           CONVERT TIME TO DECIMAL\n         MVC   EDWORK,EDMASK       MOVE IN EDIT MASK\n         ED    EDWORK,DWORD+K4     CONVERT TO CHARACTER\n         MVC   DWORD,EDWORK+K1     MOVE TO RETURN AREA\nPCLKEX   RETURN (14,12)            RETURN TO CALLER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  CONDITION CODE CONVERSION ROUTINE: CHARACTER OUTPUT INTO RC FIELD  *\n*        INPUT   REG 0 HAS            STEP TERM CONDTION CODE         *\n*                REG 1 HAS ADDRESS OF STEP TERM INDICATOR FIELD       *\n*        OUTPUT  FIELD RC OF OUTPUT LINE CONTAINS RETURN CODE         *\n*                                                                     *\n***********************************************************************\nPRETCDE  SAVE  (14,12)             SAVE CALLER'S REGISTERS\n         TM    K0(R01),SMF30FLH    WAS STEP FLUSHED             MSEIPO4\n         BNO   NOFLUSH             NO,BRANCH PAST\n         MVC   RC,=C'FLUSH'        MOVE IN FLUSHED MESSAGE\n         B     PRETEXT             BR TO RETURN\nNOFLUSH  TM    K0(R01),SMF30ABD    DID IT ABEND?                MSEIPO4\n         BO    STPABEND            YES, GO CONVERT ABEND CODE\n         N     R00,=A(X'FFF')      ZERO UNUSED PORTION\n         CVD   R00,RWORK           GET ADDRESS OF COND FIELD\n         MVC   RC-K1(L'RC+K1),=X'402020212020' MOVE IN EDIT MASK\n         ED    RC-K1(L'RC+K1),RWORK+K5 CONVERT RET CODE TO CHAR\n         B     PRETEXT             BR TO RETURN\nSTPABEND CLM   R00,2,=X'80'        WAS IT A USER ABEND CODE?\n         BL    SYSABND             NO, PROCESS SYSTEM ABEND CODE.\n         N     R00,=A(X'FFF')      TURN OFF X'80' BIT\n         CVD   R00,RWORK           CONVERT FOR OUTPUT\n         MVC   RC-K1(L'RC+K1),=X'402120202020' MOVE IN EDIT MASK\n         ED    RC-K1(L'RC+K1),RWORK+K5 CONVERT TO CHARACTER\n         MVI   RC,C'U'             MOVE IN 'U' USER ABEND\n         B     PRETEXT             BR TO RETURN\nSYSABND  STH   R00,RWORK           STORE ABEND CODE\n         UNPK  RWORK+K3(K5),RWORK(K3) ADD ZONES TO CC FIELD\n         TR    RWORK+K4(K3),TRTAB-C0 TRANSLATE TO CHARACTERS\n         MVC   RC+K2(L'RC-K2),RWORK+K4  MOVE TO OUTPUT LINE\n         MVC   RC(K2),=C'*S'       MOVE IN S FOR SYSTEM ABEND\nPRETEXT  RETURN (14,12)            RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*  ESTAE EXIT ROUTINE                                                 *\n*                                                                     *\n***********************************************************************\nRECOVERY DS    0H\n         USING *,R15               SET UP ADDRESSABILITY\n         LA    R04,K4              PUT 4 IN REGISTER FOR COMPARE\n         CR    R00,R04             IS SDWA PRESENT?\n         BNE   HAVESDWA            YES, BR TO PROCESS WITH SDWA\n         L     R00,K0(R02)         LOAD RETRY ADDRESS FROM PARAM LIST\n         LA    R15,K4              SET RETCODE TO RETRY ADDR IN R00\n         BR    R14                 RETURN TO PROCESSOR WITH RETRY ADDR\nHAVESDWA DS    0H                  ENTER HERE IF SDWA PRESENT\n         ST    R14,KC(R13)         SAVE RETURN ADDRESS\n         L     R02,K0(R01)         LOAD PARAM LIST ADDR FROM SDWA\n         L     R02,K4(R02)         LOAD RETRY ADDRESS\n         SETRP RC=4,,RETADDR=(2),RETREGS=YES,FRESDWA=YES,REGS=(14)\n         DROP  R15\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  ESTAE RETRY ROUTINE WHEN NO SDWA WAS PRESENT                       *\n*                                                                     *\n***********************************************************************\nRTRYRTN1 DS    0H                  RETRY ROUTINE WITH NO SDWA PRESENT\n         LM    R12,R13,K8(R01)     LOAD REGS FOR ESTAE PARM LIST\n         B     RTRYRTN2            AND GET OUT\n         EJECT\n*\n*  OUTPUT LINE DSECT FOR STEP TERMINATION MESSAGE\n*\nLINE2    DSECT\n         DS    C\nJOBNAME  DS    CL8                 JOB NAME\n         DS    C\nSTEPNAME DS    CL8                 STEPNAME\n         DS    C\nPROCSTEP DS    CL8                 PROCEDURE STEP NAME\n         DS    C\nRC       DS    XL5                 RETURN/ABEND CODE\n         DS    C\nEXCP     DS    XL6                 EXCP COUNT\n*DEVICE CONNECT TIME IS ALSO COLLECTED IN XA                     IPOXA\n         DS    C                                                 IPOXA\nCONN     DS    XL6                 DEVICE CONNECT TIME           IPOXA\n         DS    C\nTCB      DS    XL6                 TCB CPU TIME\n         DS    C\nSRB      DS    XL6                 SRB CPU TIME\n         DS    C\nCLOCK    DS    XL6                 ELAPSED TIME\n         DS    C\nSERV     DS    XL6                 SERVICE UNITS\n         DS    C\nPG       DS    XL3                 PERFORMANCE GROUP\n         DS    C\nPAGE     DS    XL5                 NUMBER OF PAGE-INS + PAGE OUTS IPOXA\n         DS    C\nSWAP     DS    XL5                 NUMBER OF PAGES XFER'D ON SWAP IPOXA\n         DS    C\nVIO      DS    XL5                 NUMBER OF PAGES XREF'D FOR VIO IPOXA\n         DS    C\nSWAPS    DS    XL5                 NUMBER OF SWAPS\nLLINE2   EQU   *-LINE2\n*\nBLDL     DSECT                     BLDL PARM LIST\nBLDLFF   DS   H                    TOTAL LENGTH OF PARMLIST\nBLDLLL   DS   H                    LENGTH OF EACH ENTRY\nBLDLNAME DS   CL8                  MEMBERNAME\nBLDLTTR  DS   XL3                  TTR OF MEMBER\nBLDLK    DS   X                    K FIELD\nBLDLZ    DS   X                    Z FIELD\nBLDLC    DS   X                    C FIELD\nBLDLUSER DS   CL44                 USER DATA FIELD\nBLDLELEN EQU  *-BLDLNAME\nBLDLLEN  EQU  *-BLDLFF\n*\nIEFACTRT CSECT\nLINE3    DS    0CL(LLINE2)         OUTPUT LINE HEADER\n         DC    C' '\n         DC    CL30'JOBNAME  STEPNAME PROCSTEP'\n         DC    C'RC'\n         DC    CL3' '\n         DC    C'EXCP'\n         DC    CL3' '                                             IPOXA\n         DC    C'CONN'                                            IPOXA\n         DC    CL4' '\n         DC    C'TCB'\n         DC    CL4' '\n         DC    C'SRB'\n         DC    CL2' '\n         DC    C'CLOCK'\n         DC    CL3' '\n         DC    C'SERV'\n         DC    CL2' '\n         DC    C'PG'\n         DC    CL2' '                                         IPOXA\n         DC    C'PAGE'\n         DC    CL2' '                                         IPOXA\n         DC    C'SWAP'\n         DC    CL3' '                                         IPOXA\n         DC    C'VIO'\n         DC    CL1' '\n         DC    C'SWAPS'\nLLINE3   EQU   *-LINE3\n         ORG   LINE3+LLINE2\n*\nLINE3A   DS    0CL(LLINE2)         OUTPUT LINE FIRST HEADER\n         DC    C' '\n         DC    CL48' '                                            IPOXA\n         DC    CL2'--'\n         DC    C'TIMINGS (MINS.)'\n         DC    CL2'--'\n         DC    CL12' '\n         DC    CL4'----'   12\n         DC    C'PAGING COUNTS'  3456\n         DC    CL3'---'   789\n         DC    CL6' '\n         ORG   LINE3A+LLINE2\n*\nLINE4    DC    CL(LLINE2)' '       JOB TERMINATION MESSAGE LINE\n         ORG   LINE4\n         DC    C' '\n         DC    C'XXXXXXXX ENDED.  NAME-XXXXXXXXXXXXXXXXXXXX TOTAL TCB CC\n               PU TIME=XXX.XX  TOTAL ELAPSED TIME=XXXX.X'\n*                012345678901234567890123456789012345678901234567890123\n*         50-> 45678901234567890123456789012345678901234567890123456789\n         ORG   LINE4+LLINE2\nLINE4J   EQU   1,8         OFFSET OF JOBNAME IN LINE4 TEXT\nLINE4N   EQU   23,20       OFFSET OF NAME IN LINE4 TEXT\nLINE4C   EQU   63,6        OFFSET OF TCB CUP TIME IN LINE4 TEXT\nLINE4E   EQU   90,6        OFFSET OF ELAPSED TIME IN LINE4 TEXT\n*\nR30CODE  DC    F'20'               CODE FOR NEW RECORD 30       MSEIPO4\nR30STEP  DC    H'4'                  STEP TERMINATION           MSEIPO4\nR30JOB   DC    H'5'                  JOB TERMINATION            MSEIPO4\nF6       DC    F'6'\nTOVER    DC    F'10000000'         OVERFLOW CONSTANT\nF1000    DC    F'1000'             ONE THOUSAND\nHR24     DC    A(24*60*60*100)     24 HRS IN .01 SECONDS\nMCSFLAG  DC    B'1000000000000100' ROUT, SUPRESS HARDCPY\n*                0123456789ABCDEF\nDESC     DC    B'0000000000000000' NO DEC CODES\n*                1234567890123456\nROUT     DC    B'0000000000000100' ROUT CODE=14\n*                1234567890123456\nEDMASK   DC    XL9'40202020214B202020'\nP99999   DC    P'99999'\nEDMASK2  DC    XL12'402020202020202020202120'\nTRTAB    DC    C'0123456789ABCDEF'\n*\n* DEFINE ESTAE LIST FORM\n*\nESTAEL   ESTAE MF=L               CREATE MODEL ESTAE PARM LIST\nLESTAEL  EQU   *-ESTAEL           NAME ITS LENGTH\n*\n* DEFINE LINK  LIST FORM\n*\nLINKL    LINK  DE=0,SF=L          CREATE MODEL LINK PARM LIST\nLLINKL   EQU   *-LINKL            NAME ITS LENGTH\n*\nDATA     DSECT\nSAVE     DS    18F              SAVE AREA FOR REGISTERS ON ENTRY\n         ORG   SAVE\nSAVEXX   DS    F\nSAVEBK   DS    F\nSAVEFW   DS    F\nSAVER14  DS    F\nSAVER15  DS    F\nSAVER0   DS    F\nSAVER1   DS    F\n         DS    11F\n*\nDWORD    DS    D\nRWORK    DS    D\n*\nLINKE    DS    XL(LLINKL)       LINK PARM LIST AREA\nESTAEW   DS    XL(LESTAEL)      ESTAE PARM LIST AREA\nESTAPARM DS    4F               PARAMETER LIST PASSED TO RETRY ROUTINE\n*              RETRY ROUTINE ADDRESS  NO SWDA OBTAINED\n*              RETRY ROUTINE ADDRESS  SWDA OBTAINED\n*              BASE REGISTER R12\n*              DATA REGISTER R13\n*\nSAVEAR2  DS    6F               INTERNAL SAVE REGISTER SAVE AREA\n*\nPARMS    DS    0F               PARMS PASSED IN REG 1 TO ROUTINE\nPARMEPRM DS    F                PTR TO COMMON EXIT PARAMETER AREA\nPARMSTEP DS    F                PTR TO STEPNAME FIELD\nPARMPROG DS    F                PTR TO PROGRAMMER NAME FIELD\nPARMJOBC DS    F                PTR TO JOB TCB CPU TIME FIELD\nPARMACCT DS    F                PTR TO JOB ACCOUNTING FIELDS\nPARMSTPC DS    F                PTR TO STEP TCB CPU TIME FIELD\nPARMSACT DS    F                PTR TO STEP ACCOUNTING FIELDS\nPARMINDC DS    F                PTR TO CANCEL FLAG & STEP NUMBER\nPARMCOND DS    F                PTR TO CONDITION CODE FIELD\nPARMRECD DS    F                PTR TO SMF RECORD TO BE WRITTEN\nLPARMS   EQU   *-PARMS\n*\nBLDLWORK DS    CL(BLDLLEN)\n*\nEDWORK   DC    XL9'00'\nEDWORK2  DC    XL12'00'\n*\nLWTO1    EQU   LLINE2+KA\n         DS    0F\nWTO1     DS    0CL(LWTO1)\nWTO1LEN  DS    XL2\nWTO1MCS  DS    XL2\nWTO1TXT  DS    CL(LLINE2)       MESSAGE TEXT\nWTO1DESC DS    XL2\nWTO1ROUT DS    XL2\n*\n         EJECT\n         IFASMFR 30                SMF TYPE 30 RECORD           MSEIPO4\nSMF30XA  EQU   X'04'               HEADER INDICATES MVS/XA RECORD IPOXA\n         EJECT\n         PRINT OFF\n         IEFJMR                    JMR MAPS COMMON PARAMETER AREA\n         EJECT\n         IHASDWA DSECT=YES         SDWA FOR ESTAE/SETRP MACRO\n         PRINT ON\nDATA     DSECT\n         DS    6D             RESERVE FOR ZAPS\nLDATA    EQU   *-DATA\nIEFACTRT CSECT\n         LTORG ,\n         DS    0D\nDATALEN  DC    0F'0',AL1(SUBPOOL),AL3(LDATA)\nMODLEN   EQU   *-IEFACTRT\nLPATCH   EQU   (MODLEN+K9)/KA/K8+K1 ADD 10% FOR PATCH AREA\nLPATCHL  DC    AL2(LPATCH*K8)\nSPATCH   DC    S(PATCH)\nPATCH    DC    (LPATCH)D'00'\n         SPLEVEL SET          RESET TO DEFAULT                  IPOXA\n         END   IEFACTRT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IMSLPA0": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x18O\\x00\\x90\\x18O\\x176\\x00\\x19\\x00\\x19\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xe8\\xf2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-07-03T00:00:00", "modifydate": "1990-07-03T17:36:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "FCHLY2"}, "text": "++ FUNCTION (IMSLPA0) .\n++ VER (Z038) .\n++MOD(IGC0024E) DISTLIB(RESLIB13) TXLIB(RESLIB13) .\n++MOD(DFSMRCL0) DISTLIB(RESLIB13) TXLIB(RESLIB13) .\n++MOD(DFSAFMD0) DISTLIB(RESLIB13) TXLIB(RESLIB13) .\n++ JCLIN .\n//*\n//STEP1 EXEC PGM=IEWL,\n//             REGION=512K,\n//             PARM='SIZE=(450K,92K),RENT,REFR,NCAL,LET,XREF,LIST'\n//SYSPRINT DD  SYSOUT=*\n//RESLIB   DD  DSN=IMSVS.RESLIB,DISP=SHR\n//SYSLMOD  DD  DSN=SYS3.LPALIB,DISP=SHR\n//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,(3,1))\n//SYSLIN   DD  *\n  INCLUDE RESLIB(IGC0024E)\n   NAME IGC0024E(R)             DBRC TYPE 4 SVC\n  INCLUDE RESLIB(DFSMRCL0)\n   NAME DFSMRCL0(R)             RESOURCE CLEAN-UP ROUTINE\n  SETCODE AC(1)\n  INCLUDE RESLIB(DFSAFMD0)\n   NAME DFSAFMD0(R)             FORMAT/DUMP ABEND RTN, SYS CNTRL.\n/*\n//**** END OF JCLIN DATA .\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IPOBASE": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x90\\x16O\\x00\\x90\\x16O\\x185\\x00\\x17\\x00 \\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-06-13T00:00:00", "modifydate": "1990-06-13T18:35:00", "lines": 23, "newlines": 32, "modlines": 0, "user": "FCHLAY"}, "text": "++ USERMOD(IPOBAS0) REWORK(1990130) .\n++ VER(Z038) FMID(HAH2100) PRE(UL90092) .\n++ SRC(IEV60) DISTLIB(ASAMPLIB) .\n    COPY ASMHMAC\n         OPTIONS DEFAULT=(ALIGN,  * CHECK ALIGNMENT OF ADDRESS         *\n               DECK,              * PUNCH OBJECT DECK ON SYSPUNCH      *\n               DELETE=DBCS,       * DELETE DOUBLE BYTE CHAR. SET       *\n               ESD,               * PRINT EXTERNAL SYMBOL DICTIONARY   *\n               FLAG=0,            * PRINT ALL ERROR MESSAGES           *\n               LINECOUNT=60,      * 60 LINES PER PAGE INCLUDES HEADING *\n               LIST,              * PRINT ASSEMBLER LISTING            *\n               NOBATCH,           * ONLY ASSEMBLE SYSIN SOURCE DECK    *\n               NOOBJECT,          * DO NOT GENERATE OBJ ON SYSLIN      *\n               NORENT,            * ASSUME NON-RE-ENTRANT              *\n               NOTEST,            * NO SSTS FOR TEST TRANSLATOR        *\n               RLD,               * PRINT RELOCATIN DICTIONARY         *\n               SYSPARMV(),        * SYSPARM VARIABLE IS NULL           *\n               XREF(FULL))        * PRINT CROSS REFERENCE OF ALL SYM.\n    GENPARM\n    END\n UCLIN .\n ADD MAC(ASMHMAC) GENASM(IEV60) .\n ENDUCL .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LCDBSV2": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17?\\x00\\x90\\x17?\\x162\\x00\\x03\\x00\\x03\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-22T00:00:00", "modifydate": "1990-06-22T16:32:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "FCHLAY"}, "text": "++ USERMOD (LCDBSV2) .\n++ VER (Z038)  FMID(LCICS00) .\n++ MOD(DFHCSVC) LMOD(IEANUC01) DISTLIB(LOADLIB) LKLIB(LOADLIB) .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LCDBSV6": {"ttr": 1037, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17?\\x00\\x90\\x17?\\x16I\\x00\\x03\\x00\\x03\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-22T00:00:00", "modifydate": "1990-06-22T16:49:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "FCHLAY"}, "text": "++ USERMOD (LCDBSV6) .\n++ VER (Z038)  FMID(LCICS00) .\n++ MOD(DFHHPSVC) DISTLIB(LOADLIB) LKLIB(LOADLIB) LMOD(IEANUC01) .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LCICS00": {"ttr": 1039, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x90\\x17\\x9f\\x00\\x90\\x17\\x9f\\x13&\\x00\\x1c\\x00\\x08\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1990-06-28T00:00:00", "modifydate": "1990-06-28T13:26:00", "lines": 28, "newlines": 8, "modlines": 0, "user": "FCHLAY"}, "text": "//$$$$$$T  JOB (FC50690,FCFC),'LCICS00 USERMOD',\n//             USER=,GROUP=,PASSWORD=,                         /*RACF*/\n//             NOTIFY=$$$$$$,\n//             CLASS=W,MSGCLASS=X,MSGLEVEL=(1,1)\n//*                                                           /*JCTRL*/\n//* LIB: SYS2.SMPELIB.XA223\n//* DOC: THIS JOB RECEIVES USERMODS FOR IPO UNDER RELEASE 5\n//*\n//UMOD1   EXEC PGM=GIMSMP,REGION=4096K,\n//             TIME=120\n//STEPLIB  DD  UNIT=3380,VOL=SER=DLIB01,\n//             DISP=SHR,DSN=MVSIPO1.LINKLIB\n//SMPCSI   DD  DSN=LCPSMPE.GLOBAL.CSI,DISP=SHR\n//SMPOUT   DD  SYSOUT=*\n//SMPRPT   DD  SYSOUT=*\n//SMPLIST  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SMPPTFIN DD  DISP=SHR,DSN=SYS2.SMPELIB.XA223(LCICS00)\n//SMPCNTL  DD  *\n  SET BDY(TARG0) .\n    UCLIN .\n      ADD SYSMOD(LCICS00) USERMOD FMID(LCICS00)\n          RECDATE(90179) RECTIME(13:20:00)\n          APPDATE(90179) APPTIME(13:20:00)\n          MOD(DFHCSVC,DFHHPSVC) .\n    ENDUCL .\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LPACPY1": {"ttr": 1041, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x16_\\x00\\x90\\x16_\\x15\\x01\\x00.\\x00.\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-14T00:00:00", "modifydate": "1990-06-14T15:01:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(LPACPY1).  /* MOVE ISPF/PDF MODULES TO ISPLPA */\n++VER(Z038) FMID(HDV2302).\n++MOVE (ISRALTDI) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRBRO  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRCONFG) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRECMBR) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISREDIT ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRFMT  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRFPR  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRFPT  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRJB1  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRJB2  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRLDSFA) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRNLENG) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRPCP  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRPTC  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRQCM  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRQC1  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRQC2  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRSCAN ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRSEPRM) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRSFM  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRSLENG) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRSSM  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRSUBS ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRSUBX ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRSUPC ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRUDA  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRUHC  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRUMC  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRUOLP ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRURS  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRYBI  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRYFI  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRYLI  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRYPI  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRYRFI ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRYRVI ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRYSI  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRYTI  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRYVI  ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRYXDR ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISRYXMB ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISR3277 ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISR3278 ) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISR3278T) SYSLIB(ISRLOAD) TOSYSLIB(ISPLPA) LMOD.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LPACPY2": {"ttr": 1043, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x16_\\x00\\x90\\x16_\\x15\\x07\\x00\\x15\\x00\\x15\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-14T00:00:00", "modifydate": "1990-06-14T15:07:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(LPACPY2).\n++VER(Z038) FMID(HIF2302).\n++MOVE (ISRALTDI) SYSLIB(ISPLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISPAPAUX) SYSLIB(ISPLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISPAPTT ) SYSLIB(ISPLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISPASUBS) SYSLIB(ISPLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISPICP  ) SYSLIB(ISPLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISPLLP  ) SYSLIB(ISPLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISPMAIN ) SYSLIB(ISPLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISPOPF  ) SYSLIB(ISPLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISPOPI  ) SYSLIB(ISPLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISPOPT  ) SYSLIB(ISPLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISPSUBS ) SYSLIB(ISPLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISPSUBX ) SYSLIB(ISPLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISPTASK ) SYSLIB(ISPLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISPTCM  ) SYSLIB(ISPLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISPTUTOR) SYSLIB(ISPLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISPUCM  ) SYSLIB(ISPLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISP3277 ) SYSLIB(ISPLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISP3278 ) SYSLIB(ISPLOAD) TOSYSLIB(ISPLPA) LMOD.\n++MOVE (ISP3278T) SYSLIB(ISPLOAD) TOSYSLIB(ISPLPA) LMOD.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LPACPY3": {"ttr": 1045, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x90\\x16_\\x00\\x900_\\x155\\x00$\\x00%\\x00\\x01\\xc6\\xc3\\xc8\\xd3\\xe8\\xf2@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1990-06-14T00:00:00", "modifydate": "1990-11-01T15:35:00", "lines": 36, "newlines": 37, "modlines": 1, "user": "FCHLY2"}, "text": "++USERMOD(LPACPY3).\n++VER(Z038) FMID(HTE21C2).\n++MOVE (ALLOCATE) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (CANCEL  ) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEFE11) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (EXEC    ) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (FREE    ) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEBEUI) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (STATUS  ) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEFY05) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEFY50) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEGAT ) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEGATD) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEGGO ) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEGCIV) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEGCPY) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEGDCB) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEGDEB) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEGEND) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEGLDR) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEGLSA) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEGLST) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEGMAP) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEGOFF) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEGPCH) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEGPSW) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEGQFY) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEGTCB) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEGVSR) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (IKJEGWHR) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (LISTBC  ) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (LOGOFF  ) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (OPERATOR) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (PROFILE ) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (SEND    ) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n++MOVE (SUBMIT  ) SYSLIB(CMDLIB) TOSYSLIB(CMDLPA) LMOD.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LPACPY4": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x90\\x16_\\x00\\x900_\\x15(\\x001\\x002\\x00\\x02\\xc6\\xc3\\xc8\\xd3\\xe8\\xf2@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1990-06-14T00:00:00", "modifydate": "1990-11-01T15:28:00", "lines": 49, "newlines": 50, "modlines": 2, "user": "FCHLY2"}, "text": "//$$$$$$Z  JOB (FC50690,FCFC),'UCLIN LPACPY4',MSGCLASS=X,\n//         NOTIFY=$$$$$$,CLASS=W,REGION=4096K\n//S1       EXEC PGM=GIMSMP,\n//         PARM='PROCESS=WAIT',\n//         DYNAMNBR=120\n//SMPCSI   DD DISP=SHR,DSN='LCPSMPE.GLOBAL.CSI'\n//*\n//*\n//SMPCNTL  DD *\nSET   BOUNDARY (TARG0)\n.\nUCLIN .\nADD LMOD(ILBOACP) SYSLIB(VSCLLPA).\nADD LMOD(ILBOACS) SYSLIB(VSCLLPA).\nADD LMOD(ILBOCHN) SYSLIB(VSCLLPA).\nADD LMOD(ILBOCKP) SYSLIB(VSCLLPA).\nADD LMOD(ILBOCMM) SYSLIB(VSCLLPA).\nADD LMOD(ILBOCVB) SYSLIB(VSCLLPA).\nADD LMOD(ILBODSP) SYSLIB(VSCLLPA).\nADD LMOD(ILBODTE) SYSLIB(VSCLLPA).\nADD LMOD(ILBOETB) SYSLIB(VSCLLPA).\nADD LMOD(ILBOEXT) SYSLIB(VSCLLPA).\nADD LMOD(ILBOINT) SYSLIB(VSCLLPA).\nADD LMOD(ILBOITB) SYSLIB(VSCLLPA).\nADD LMOD(ILBONTR) SYSLIB(VSCLLPA).\nADD LMOD(ILBOPRM) SYSLIB(VSCLLPA).\nADD LMOD(ILBOQIO) SYSLIB(VSCLLPA).\nADD LMOD(ILBOSCH) SYSLIB(VSCLLPA).\nADD LMOD(ILBOSMG) SYSLIB(VSCLLPA).\nADD LMOD(ILBOSPA) SYSLIB(VSCLLPA).\nADD LMOD(ILBOSTT) SYSLIB(VSCLLPA).\nADD LMOD(ILBOSYN) SYSLIB(VSCLLPA).\nADD LMOD(ILBOUST) SYSLIB(VSCLLPA).\nADD LMOD(ILBOUTB) SYSLIB(VSCLLPA).\nADD LMOD(ILBOVIO) SYSLIB(VSCLLPA).\nADD LMOD(ILBOVOC) SYSLIB(VSCLLPA).\nADD LMOD(ILBOWTB) SYSLIB(VSCLLPA).\nADD LMOD(ILBOXDI) SYSLIB(VSCLLPA).\nADD LMOD(ILBOATB) SYSLIB(VSCLLPA).\nADD LMOD(ILBOERR) SYSLIB(VSCLLPA).\nADD LMOD(ILBOIDB) SYSLIB(VSCLLPA).\nADD LMOD(ILBOINS) SYSLIB(VSCLLPA).\nADD LMOD(ILBOLBL) SYSLIB(VSCLLPA).\nADD LMOD(ILBOMSG) SYSLIB(VSCLLPA).\nADD LMOD(ILBOSPI) SYSLIB(VSCLLPA).\nADD LMOD(ILBOSRT) SYSLIB(VSCLLPA).\nADD LMOD(ILBOVMO) SYSLIB(VSCLLPA).\nADD LMOD(ILBOXMU) SYSLIB(VSCLLPA).\nENDUCL.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LUT1A001": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x04\\x00\\x00\\x00\\x90'\\x7f\\x00\\x90(_\\x16\\x16\\x00.\\x004\\x00\\x00\\xc6\\xc3\\xc8\\xc3\\xc6\\xd4@@@@\"", "ispf": {"version": "01.04", "flags": 0, "createdate": "1990-10-04T00:00:00", "modifydate": "1990-10-12T16:16:00", "lines": 46, "newlines": 52, "modlines": 0, "user": "FCHCFM"}, "text": ".********************************************************************** 00001\n.* MACRO DESCRIPTION                                                  * 00002\n.*                                                                    * 00003\n.*     THIS MACRO INSERTS A DATE TIME STAMP FOR ALL ASSEMBLER         * 00004**2\n.*     PROGRAMS SUBMITTED THROUGH PANVALET.  THE MACRO IS INSERTED    * 00005**2\n.*     BY THE PANVALET EXIT ROUTINE.                                  * 00006**2\n.*                                                                    * 00007\n.* INPUT                                                              * 00008\n.*     THE INPUT IS GENERATED FROM THE PANVALET BATCH SYSTEM.         * 00009\n.*                                                                    * 00010\n.* OUTPUT                                                             * 00011\n.*     THE OUTPUT OF THIS MACRO WILL PASS ONE OF TWO CONDITIONS:      * 00012\n.*            A. IF THE SOURCE CODE CONTAINS A CSECT CARD, THIS       * 00013**2\n.*               MACRO WILL GENERATE AT THE END OF THE PROGRAM.       * 00014**2\n.*               THE GENERATED DATA IS:                               * 00015**2\n.*                   STAMP='JJJPPPPPPPPPPMM/DD/YY HH.MM.SS  '         * 00016**2\n.*                   WHERE JJJ IS THE JULIAN DAY THIS PROGRAM WAS     * 00017**2\n.*                   WRITTEN TO A WORK FILE FOR COMPILE, PPPPPPPPPP   * 00018**2\n.*                   IS THE 1-10 CHARACTER PANVALET NAME OF THE       * 00019**2\n.*                   PROGRAM AND THE DATE AND TIME STAMP OF WRITING   * 00020\n.*                   FOLLOW                                           * 00020\n.*            B. IF THE SOURCE CODE DOES NOT CONTAIN A CSECT CARD     * 00021**2\n.*               (IE. CICS MAP) THIS MACRO WILL HAVE NO EFFECT.       * 00022**2\n.*                                                                    * 00023**2\n.*--------------------------------------------------------------------* 00024\n.*      RECORD OF CHANGES TO THIS MACRO  ----  LUT1A001               * 00025**2\n.*                                                                    * 00026\n.*  ID         DATE        DESCRIPTION OF CHANGE                      * 00027**2\n.*  ---      --------      ---------------------                      * 00028**2\n.*  RAW      06/24/83      MACRO CREATION DATE                        * 00029**2\n.*  DWL      11/07/85      DOCUMENTATION CHANGES                      * 00030**2\n.*                                                                    * 00031\n.*                                                                    * 00032\n.*                                                                    * 00033\n.*                                                                    * 00034\n.*--------------------------------------------------------------------* 00035\n.*                                                                      00036\n.*                                                                      00037\n         MACRO                                                          00038\n&SYMBOL  LUT1A001 &STAMP=                                               00039\n         AIF   (K'&SYSECT EQ 0).PANSKIP                                 00043\n         CSECT\n         LTORG\nPAN_VALET DC  CL32&STAMP.\n.PANSKIP ANOP                                                           00052\n         MEND                                                           00053\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPC001": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x16O\\x00\\x90\\x16O\\x18C\\x00`\\x00`\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-13T00:00:00", "modifydate": "1990-06-13T18:43:00", "lines": 96, "newlines": 96, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPC001).          /* NAME OF SERVICE SYSMOD            */\n++VER(Z038)                  /* SYSTEM RELEASE                    */\n          FMID(HCO2400).     /* THIS MUST ALREADY BE IN           */\n++SRCUPD(IKFCBL01)           /* SOURCE UPDATE TO TAKE PLACE       */\n          DISTLIB(VSCOSRC).  /* DDNAME OF DISTRIBUTION SOURCE LIB */\n./ CHANGE NAME=IKFCBL01\n*** START --- NORTH AMERICAN PHILIPS LIGHTING MOD PROLOG ------ NAPC001\n***                                                             NAPC001\n*** FUNCTION.  THIS MOD CUSTOMIZES THE COBOL COMPILER FOR       NAPC001\n***            LIGHTING NEEDS.  THIS WAS DONE AS AN ADD-        NAPC001\n***            ITION TO THE I.B.M SUGGESTED PROCEDURE OF        NAPC001\n***            APPLYING THESE OPTIONS VIA AN IEBUPDTE RUN.      NAPC001\n***            THIS GIVES US A BETTER RECORD OF WHAT WE HAVE    NAPC001\n***            DONE AND WILL PREVENT US FROM LOSING THESE       NAPC001\n***            OPTIONS IF IBM CHANGES THE VSCBL1 MACRO OR       NAPC001\n***            THE PPOPTIONS MEMBER IKFCBL01.                   NAPC001\n***                                                             NAPC001\n***            ANY OPTIONS WHICH ARE NOT THE IBM DEFAULTS ARE   NAPC001\n***            IDENTIFIED WITH A '+' AT THE BEGINNING OF THEIR  NAPC001\n***            EXPLANATIONS.                                    NAPC001\n***                                                             NAPC001\n*** DEPENDENCIES.  NORMAL IKFCBL01 DEPENDENCIES                 NAPC001\n***                                                             NAPC001\n*** REGISTER CONVENTIONS.                                       NAPC001\n***                                                             NAPC001\n***            NORMAL IBM CONVENTIONS FOR THIS MODULE           NAPC001\n***                                                             NAPC001\n*** CONTROL BLOCKS. (MAPPING MACROS FOLLOWED BY ATTRIBUTE)      NAPC001\n***                                                             NAPC001\n***            STANDARD IKFCBL01 CONVENTIONS                    NAPC001\n***                                                             NAPC001\n*** CHANGE ACTIVITY.                                            NAPC001\n***                                                             NAPC001\n***                                                             NAPC001\n*** AUTHOR.                                                     NAPC001\n***                                                             NAPC001\n***            THIS MOD WAS CODED WITH THE OPTIONS AND COMMENTS NAPC001\n***            SET UP BY MIKE ALTIERO FOR COBOL 2.4.            NAPC001\n***            CONTACT - MIKE ALTIERO, N. A. PHILIPS LIGHTING   NAPC001\n***                      201-429-3326                           NAPC001\n***                                                             NAPC001\n*** END --- NORTH AMERICAN PHILIPS LIGHTING JES3 MOD PROLOG --- NAPC001\n*/* LIB: SYS1.PPOPTION(IKFCBL01)\n*/* GDE: CBIPO MVS CUSTOMIZATION\n*/* DOC: OPTIONS FOR VS FORTRAN COMPILER\n*  5740-CB1 VS COBOL\n         VSCBL1  BATCH=BATCH,       - MULTIPLE COMPILATIONS            *\n               BUF=98304,           - BUFFER ALLOCATION FOR COMPILER   *\n               CALMOD=DYNAM,        - INCLUDE SUBPGMS AT OBJECT TIME   *\n               CMPMODE=CSYNTAX,     - SYNTAX CHECK-FULL COMP IF CLEAN  *\n               CNDENSE=CLIST,       - DONT PRODUCE CONDENSED LISTING   *\n               COUNTL=NOCOUNT,      * DONT PRODUCE VERB EXECUTION STAT *\n               DATAMAP=DMAP,        - PRODUCE DATA NAME LIST           *\n               DUMP=DUMP,           * ABEND FOR D LEVEL MESSAGES       *\n               ENDJOB=ENDJOB,       - PERFORM ENDJOB PROCESSING        *\n               FLOW=NOFLOW,         * NO FORMATTED TRACE AT ABEND      *\n               FLOWSIZ=99,          * NUMBER OF PROCEDURES IN FLOW     *\n               LIBRARY=RESIDENT,    - LIBRARY MANAGEMENT IN EFFECT     *\n               LINECNT=60,          * LINES PER PAGE- COMPILER PRINT   *\n               LITCHAR=APOST,       - LITERALS ENCLOSED IN (')         *\n               LSTCOMP=NOLST,       * LISTER FEATURE NOT USED          *\n               LSTDECK=NOFDECK,     * DONT PRODUCE UPDATED SOURCE DECK *\n               LSTONLY=NOLST,       * LISTER FEATURE NOT USED          *\n               LSTPCH=NOCDECK,      * DONT PUNCH UPDATED COPY LIBS     *\n               LSTPRC2=LCOL2,       * PROCEDURE DIVISION DOUBLE COL    *\n               LST132=L132,         * PRINT LINE 132 CHARACTERS LONG   *\n               LVL=NOLVL,           * FIPS FLAGGER NOT ACTIVE          *\n               MSGLEV=FLAGW,        * PRINT ALL WARNING AND ERROR MSGS *\n               NAME=NONAME,         * NO SEPARATE LOAD MODULES         *\n               NEWADV=NOADV,        - FIRST BYTE RESERVED - CONT CHAR  *\n               NUM=NONUM,           * USER LINE NUMBERS NOT USED       *\n               OPT=OPT,             - OPTIMIZE OBJECT CODE             *\n               PROCMAP=NOPMAP,      * DONT PRODUCE ASSEMBLER CODE      *\n               PUNCH=NODECK,        * DONT PUNCH OBJECT DECK           *\n               REFLIST=NOXREF,      * NO CROSS REFERENCE LISTING       *\n               SEQCHK=NOSEQ,        - DONT CHECK SOURCE SEQ NUMBERS    *\n               SIZE=499712,         - MAIN STORAGE AVAILABLE- COMPILER *\n               SORLIST=SOURCE,      * PRODUCE SOURCE LISTING           *\n               SPACE=SPACE1,        * LINE SPACING FOR SOURCE LIST     *\n               SREFLST=SXREF,       - PRODUCE SORTED XREF LISTING      *\n               STATE=NOSTATE,       * DONT PRODUCE STATE LISTING       *\n               STD=LANGLVL(2),      * USE 1974 ANS STANDARD            *\n               SUPPRES=SUPMAP,      - SUPPRESS  FOR E LEVEL MESSAGE    *\n               SYMDMP=NOSYMDMP,     * DONT PRODUCE FORMATTED DUMPS     *\n               SYSLIB=LIB,          - OPEN SYSLIB DATASET              *\n               SYSOUT=SYST,         * SYSOUT DATASET USED FOR DISPLAY  *\n               TERM=NOTERM,         * DONT PRODUCE MSGS/STATS TWICE    *\n               TEST=NOTEST,         * INTERACTIVE DEBUG NOT USED       *\n               TRNCATE=NOTRUNC,     * BINARY ITEMS-MOVE SPECIFICATION  *\n               TYPERUN=LOAD,        * PRODUCE INPUT TO LINKAGE EDITOR  *\n               VERB=VERB,           * PROC AND VERB NAMES/PROC NAMES   *\n               VRBREF=NOVBREF,      * DONT PRODUCE VERB XREF LISTING   *\n               VRBSUM=NOVBSUM,      * DONT PRODUCE VERB SUMMARY        *\n               ZWHENB=ZWB           * STRIP SIGN OF EXTERNAL DEC FLD\n         DC    C'NAPC001  06/13/90'                             NAPC001\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPF001": {"ttr": 1288, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x16_\\x00\\x90\\x16_\\x11\\x05\\x00J\\x00J\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-14T00:00:00", "modifydate": "1990-06-14T11:05:00", "lines": 74, "newlines": 74, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPF001).          /* NAME OF SERVICE SYSMOD            */\n++VER(Z038)                  /* SYSTEM RELEASE                    */\n          FMID(JFT1414).     /* THIS MUST ALREADY BE IN           */\n++SRC(IFX0OPTS)              /* SOURCE UPDATE TO TAKE PLACE       */\n          DISTLIB(VSFCCS).   /* DDNAME OF DISTRIBUTION SOURCE LIB */\n*** START --- NORTH AMERICAN PHILIPS LIGHTING MOD PROLOG ------ NAPF001\n***                                                             NAPF001\n*** FUNCTION.  THIS MOD CUSTOMIZES THE FORTRAN COMPILER FOR     NAPF001\n***            LIGHTING NEEDS.  IN ORDER TO SUPPORT DATA        NAPF001\n***            ANALYZER, LANG LEVEL IS SPECIFIED AS 66 RATHER   NAPF001\n***            THAN 77.  THE COMPILE PROC OVERRIDES THE LANG    NAPF001\n***            LEVEL DEFAULT AS WELL AS OTHERS WHICH HAVE BEEN  NAPF001\n***            SET FOR DATA ANALYZER.  FOR MORE INFORMATION     NAPF001\n***            REFER TO VS FORTRAN INSTALLATION AND             NAPF001\n***            CUSTOMIZATION MANUAL (SC26-3987 OR ITS SUCCESSOR)NAPF001\n***                                                             NAPF001\n***            ANY OPTIONS WHICH ARE NOT THE IBM DEFAULTS ARE   NAPF001\n***            IDENTIFIED WITH A '+' AT THE BEGINNING OF THEIR  NAPF001\n***            EXPLANATIONS.                                    NAPF001\n***                                                             NAPF001\n*** DEPENDENCIES.  NORMAL IFX0OPTS DEPENDENCIES                 NAPF001\n***                                                             NAPF001\n*** REGISTER CONVENTIONS.                                       NAPF001\n***                                                             NAPF001\n***            NORMAL IBM CONVENTIONS FOR THIS MODULE           NAPF001\n***                                                             NAPF001\n*** CONTROL BLOCKS. (MAPPING MACROS FOLLOWED BY ATTRIBUTE)      NAPF001\n***                                                             NAPF001\n***            STANDARD IFX0OPTS CONVENTIONS                    NAPF001\n***                                                             NAPF001\n*** CHANGE ACTIVITY.                                            NAPF001\n***                                                             NAPF001\n***                                                             NAPF001\n*** AUTHOR(S).                                                  NAPF001\n***                                                             NAPF001\n***            THIS MOD WAS CODED WITH THE OPTIONS AND COMMENTS NAPF001\n***            SET UP BY MIKE ALTIERO FOR FORTRAN 4.1.          NAPF001\n***            CONTACT - CLARK MORRIS, N. A. PHILIPS LIGHTING   NAPF001\n***                      201-429-3607                           NAPF001\n***                                                             NAPF001\n*** END --- NORTH AMERICAN PHILIPS LIGHTING JES3 MOD PROLOG --- NAPF001\n*/* LIB: SYS1.PPOPTION(IFX0OPTS)\n*/* GDE: CBIPO MVS CUSTOMIZATION\n*/* DOC: OPTIONS FOR VS FORTRAN COMPILER\n*  5748-FO3 VS FORTRAN\n         VSFORTC ADJ=IL(DIM),        * ADJUSTABLY DIMENSIONED ARRAYS   *\n               CHARLEN=500,          * MAX CHAR. LENGTH FOR VARIABLES  *\n               DATE=MDY,             * DATE FORMAT GENED BY COMPILER.  *\n               FIPS=NOFIPS,          * NO STANDARD LANGUAGE FLAGGING.  *\n               FLAG=S,               + SEVERE ERROR MESSAGES WRITTEN.  *\n               INSTERR=NOLIST,       * NO LIST OF COMPILER INST. MACRO.*\n               LANGLVL=66,           + CURRENT FORTRAN LEVEL.          *\n               LINECNT=60,           * MAX. LINES PER PAGE OF SOURCE.  *\n               NAME=MAIN,            * DEFAULT NAME GIVEN TO A MAIN PGM*\n               OBJATTR=NORENT,       * NO REENTERANT CODE GENERATED    *\n               OBJID=NOGOSTMT,       * NO INTERNAL SEQ. NUMBERS GENED. *\n               OBJLIST=NOLIST,       * NO LISTING OF OBJECT MODULE.    *\n               OBJPROG=OBJECT,       * OBJECT MODULE PRODUCED.         *\n               OPTIMIZ=0,            * NO OPTIMIZATION.                *\n               PUNCH=NODECK,         * NO OBJ MOD. IN CARD IMAGE FORM. *\n               SORCIN=FIXED,         * INPUT SOURCE IN FIXED FORMAT.   *\n               SORLIST=SOURCE,       * SOURCE LISTING IS PRODUCED.     *\n               SORTERM=NOTERMINAL,   + NO MESSAGES WRITTEN TERMINAL DS.*\n               SORXREF=NOXREF,       * NO CROSS REFERENCE LISTING.     *\n               SRCFLG=SRCFLG,        * ERROR MSG. INSERTED AFTER ERROR.*\n               STORMAP=NOMAP,        * NO SOURCE PGM NAMES & STMT LABEL*\n               SXM=NOSXM,            * FORMAT XREF LISTING IF PRODUCED *\n               SYM=NOSYM,            * NO SYM STMNTS. IN OBJECT TEXT.  *\n               SYMDUMP=SDUMP,        * GENERATE SYMBOL TABLE INFO      *\n               SYSTEM=OS/VS,         * OPERATING SYSTEM.               *\n               TEST=NOTEST,          * NO INPUT CREATED FOR DEBUG.     *\n               TRMFLG=NOTRMFLG       + ERRORS NOT WRITTEN TO TERM. DS\n         DC    C'NAPF001  06/14/90'                             NAPF001\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPF002": {"ttr": 1291, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x16_\\x00\\x90\\x16_\\x11\\x06\\x005\\x005\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-14T00:00:00", "modifydate": "1990-06-14T11:06:00", "lines": 53, "newlines": 53, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPF002).          /* NAME OF SERVICE SYSMOD            */\n++VER(Z038)                  /* SYSTEM RELEASE                    */\n          FMID(JFL1414).     /* THIS MUST ALREADY BE IN           */\n++SRC(IFYUATBL)              /* SOURCE UPDATE TO TAKE PLACE       */\n          DISTLIB(VSFLBS).   /* DDNAME OF DISTRIBUTION SOURCE LIB */\n*** START --- NORTH AMERICAN PHILIPS LIGHTING MOD PROLOG ------ NAPF002\n***                                                             NAPF002\n*** FUNCTION.  THIS MOD CUSTOMIZES THE FORTRAN COMPILER FOR     NAPF002\n***            LIGHTING NEEDS.  THE NUMBER OF UNITS ALLOWED IN  NAPF002\n***            THE UNIT ASSIGN TABLE IS INCREASED TO 99 FROM    NAPF002\n***            08.  THE USE OF MVS370 (NON-XA) IS EXPLICITLY    NAPF002\n***            CODED.  FOR MORE INFORMATION REFER TO VS FORTRAN NAPF002\n***            INSTALLATION AND CUSTOMIZATION MANUAL (SC26-3987 NAPF002\n***            OR ITS SUCCESSOR)                                NAPF002\n***                                                             NAPF002\n*** DEPENDENCIES.  NORMAL IFYUATBL DEPENDENCIES                 NAPF002\n***                                                             NAPF002\n*** REGISTER CONVENTIONS.                                       NAPF002\n***                                                             NAPF002\n***            NORMAL IBM CONVENTIONS FOR THIS MODULE           NAPF002\n***                                                             NAPF002\n*** CONTROL BLOCKS. (MAPPING MACROS FOLLOWED BY ATTRIBUTE)      NAPF002\n***                                                             NAPF002\n***            STANDARD IFYUATBL CONVENTIONS                    NAPF002\n***                                                             NAPF002\n*** CHANGE ACTIVITY.                                            NAPF002\n***            THE SOURCE IN VSFLBS AS DISTRIBUTED BY IBM HAD   NAPF002\n***            BAD SEQ. NOS. AND ALSO DIFFERED FROM THAT IN     NAPF002\n***            PPOPTION.  THE SOURCE IN VSFLBS WAS RESEQUENCED  NAPF002\n***            USING SPF EDIT AND FIXING THE 2 BAD SEQ NOS. SO  NAPF002\n***            THAT THEY AGREED WITH THOSE IN THIS MOD.         NAPF002\n***                                                             NAPF002\n*** AUTHOR(S).                                                  NAPF002\n***                                                             NAPF002\n***            THIS MOD WAS CODED WITH THE OPTIONS AND COMMENTS NAPF002\n***            SET UP BY MIKE ALTIERO FOR FORTRAN 4.1.          NAPF002\n***            CONTACT - CLARK MORRIS, N. A. PHILIPS LIGHTING   NAPF002\n***                      201-429-3607                           NAPF002\n***                                                             NAPF002\n*** END --- NORTH AMERICAN PHILIPS LIGHTING JES3 MOD PROLOG --- NAPF002\n*/* LIB: SYS1.PPOPTION(IFYUATBL)\n*/* GDE: CBIPO MVS CUSTOMIZATION\n*/* DOC: OPTIONS FOR VS FORTRAN LIBRARY\n*  5748-FO3 VS FORTRAN\n         VSFORTL ARCH=STD,           *   STANDARD MVS OR MVS/XA.       *\n               DECIMAL=PERIOD,       * DECIMAL INDICATOR CHARACTER.    *\n               UNTABLE=99,           + NUMBER UNITS IN ASSIGNMENT TBLE.*\n               ONLNRD=05,            * LARGEST I/O UNIT NUMBER-READ.   *\n               ONLNPCH=07,           * LARGEST I/O UNIT NUMBER-PUNCH.  *\n               OBJERR=06,            * LARGEST I/O UNIT NUMBER-WRITE.  *\n               SYSTEM=OS/VS          * OPERATING SYSTEM.\n         DC    C'NAPF002  06/14/90'                             NAPF002\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPHCF1": {"ttr": 1293, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x90%_\\x00\\x91\\x05?\\x16\\x15\\x009\\x006\\x00\\n\\xc6\\xc3\\xc8\\xc4\\xc1\\xe5@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1990-09-12T00:00:00", "modifydate": "1991-02-22T16:15:00", "lines": 57, "newlines": 54, "modlines": 10, "user": "FCHDAV"}, "text": "++ USERMOD (NAPHCF1) .\n++ VER (Z038) FMID(HHC2102) PRE(UY03090).\n++JCLIN.\n//STEP1    EXEC PGM=IEV90\n//SYSPUNCH DD  DSN=&&PUNCH(CHFMSGT),DISP=SHR\n//SYSIN  DD  SYS1.USERSRC(CHFMSGT),DISP=SHR\n//STEP2    EXEC PGM=IEWL\n//SYSPUNCH DD  DSN=&&PUNCH(CHFMSGT),DISP=SHR\n//SYSLMOD  DD  DSN=SYS1.LINKLIB,DISP=SHR\n//SYSLIN  DD  *\n  INCLUDE SYSPUNCH(CHFMSGT)\n  NAME CHFMSGT(R)\n++SRC (CHFMSGT) DISTLIB(USERSRC).\n* SOURCE TO GENERATE HCF CHFMSGT MODUAL\n*\n         CHFSTART\n         CHFMSG   NUM=1\n         CHFMSG   NUM=2\n         CHFMSG   NUM=3\n         CHFMSG   NUM=4\n         CHFMSG   NUM=5\n         CHFMSG   NUM=6\n         CHFMSG   NUM=7\n         CHFMSG   NUM=8\n         CHFMSG   NUM=9\n         CHFMSG   NUM=10\n         CHFMSG   NUM=11\n         CHFMSG   NUM=12\n         CHFMSG   NUM=13\n         CHFMSG   NUM=14\n         CHFMSG   NUM=15\n         CHFMSG   NUM=16\n         CHFMSG   NUM=17\n         CHFMSG   NUM=18\n         CHFMSG   NUM=19\n         CHFMSG   NUM=20\n         CHFMSG   NUM=21\n         CHFMSG   NUM=22\n         CHFMSG   NUM=23\n*\n         CHFCMD\n         CHFMISC  HCFMAXF=1400,LCVMAXF=700,NETSOL=NETSOL,              C\n               HCFMAXU=10,LCVMAXU=4\n         CHFHCF10\n         CHFLCV10\n         CHFHCF22\n         CHFLCV22\n         CHFLOCAT HCFRI,HCFSS,HCFSA,HCFFA\n         CHFLUS   LOC=HCFRI,LU1=JLLS3109,LU2=JLLS3110,LU3=JLLS3111,    C\n               LU4=JLLS3112\n         CHFLUS   LOC=HCFSA,LU1=JLLS5309,LU2=JLLS5310,LU3=JLLS5311,    C\n               LU4=JLLS5312\n         CHFLUS   LOC=HCFFA,LU1=JLLS5509,LU2=JLLS5510,LU3=JLLS5511,    C\n               LU4=JLLS5512\n         CHFLUS   LOC=HCFSS,LU1=JLLS4403\n         CHFEND\n* MACRO END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPIP01": {"ttr": 1295, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17\\x1f\\x00\\x90\\x17\\x1f\\x15\\x18\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-20T00:00:00", "modifydate": "1990-06-20T15:18:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPIP01) .\n++ VER(Z038) FMID(HDV2302) .\n++ MAC(ISRECPY2).\n)ATTR\n  # TYPE(OUTPUT) INTENS(HIGH) JUST(LEFT)\n)BODY\n%--------------------------  EDIT - CONFIRM COPY  ------------------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n%Data set attributes are inconsistent.  Truncation may result in the\n%right-most portions of some \"from\" records if copy is performed.\n+\n+   \"From\" data set attributes:\n+       Data set name:%&ZFROMDSN\n+       Record format:%&ZFROMRFM+\n+       Record Length:#ZFLN    +\n+\n+   \"Current\" data set attributes:\n+       Data set name:%&ZTODSN\n+       Record format:%&ZTORFM  +\n+       Record Length:#ZTLN    +\n+\n+Press%ENTER+key to allow copy with truncation.\n+Enter%END+command to cancel copy.\n)INIT\n\n  IF (&PACT = Y)\n     &ZTODSN = '&PCUR(&PMBR)'\n\n)END\n/*  NAPIP01 is the PANSPF replacement for the IBM ISRECPY2 panel */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NAPIP03": {"ttr": 1297, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x90\\x17\\x1f\\x00\\x90(_\\x16V\\x00U\\x00U\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-06-20T00:00:00", "modifydate": "1990-10-12T16:56:00", "lines": 85, "newlines": 85, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPIP03) .\n++ VER(Z038) FMID(HDV2302) PRE(UY37582).\n++ MAC(ISRUAAP).\n)BODY\n%------------------------  ALLOCATE NEW DATA SET  ------------------------------\n%COMMAND ===>_ZCMD                                                             +\n+\n+DATA SET NAME:%&DSNS                                        +\n+\n+   VOLUME SERIAL     %===>_ZALVOL+     (Blank for authorized default volume)%*+\n+   GENERIC UNIT      %===>_ZALUNIT +   (Generic group name or unit address)%*+\n+   SPACE UNITS       %===>_ZALSPAC   + (BLKS, TRKS, or CYLS)\n+   PRIMARY QUANTITY  %===>_ZAL1EX+     (In above units)\n+   SECONDARY QUANTITY%===>_ZAL2EX+     (In above units)\n+   DIRECTORY BLOCKS  %===>_ZALDIR+     (Zero for sequential data set)\n+   RECORD FORMAT     %===>_ZALRF +\n+   RECORD LENGTH     %===>_ZALLREC+\n+   BLOCK SIZE        %===>_ZALBLK+\n+   EXPIRATION DATE   %===>_ZALEXD    + (&ZDATEFD&Z4DATEF\n+                                        &Z2DATEJ&Z4DATEJ in Julian form\n+                                        &ZDR for retention period in days\n+                                        or blank)\n+\n+   (%*+Only one of these fields may be specified)\n+\n)INIT\n  .HELP = ISR32010\n  &ZCMD = &Z\n  &ZALEXD = &Z\n  &ZALUNIT = &Z\n  &X = TRUNC(&ZUSER,3)            /* Lighting restriction */\n  IF(&X \u00ac= 'FCH')                 /* Lighting restriction */\n    &ZALVOL = ' '                 /* Lighting restriction */\n    &ZALUNIT = 'TEST'             /* Lighting restriction */\n  &ZB = ' '\n  IF (&ZMVS22 = '0')\n    &Z4DATEF = &Z\n    &Z4DATEJ = &Z\n    &ZB = &Z\n  IF (&ZALSPAC = 'KILOBYTE')                          /* OY18924 */\n    &ZALSPAC = &Z                                     /* OY18924 */\n  IF (&ZALSPAC = 'MEGABYTE')                          /* OY18924 */\n    &ZALSPAC = &Z                                     /* OY18924 */\n)PROC\n  &X = TRUNC(&ZUSER,3)            /* Lighting restriction */\n  IF(&X \u00ac= 'FCH')                 /* Lighting restriction */\n    IF (&ZALVOL \u00ac= ' ')           /* Lighting restriction */\n      .MSG = LGTM030A\n    IF (&ZALUNIT \u00ac= 'TEST')       /* Lighting restriction */\n      .MSG = LGTM030A\n    &Y = TRUNC(&DSNS,6)           /* Lighting restriction */\n    IF (&Y \u00ac= &ZUSER)             /* Lighting restriction */\n      .MSG = LGTM010F             /* Lighting restriction */\n  IF ( &ZALVOL \u00ac= ' ' )\n    IF ( &ZALUNIT \u00ac= ' ' )\n      .MSG = ISRU233\n  &ZALSPC = TRANS (&ZALSPAC CYLS,CYLINDER TRKS,TRACK BLKS,BLOCK\n                            CYLINDERS,CYLINDER TRACKS,TRACK BLOCKS,BLOCK\n                            CYL,CYLINDER TRK,TRACK BLK,BLOCK\n                            C,CYLINDER T,TRACK B,BLOCK\n                            CYLINDER,CYLINDER TRACK,TRACK BLOCK,BLOCK\n                            MSG=ISRU052)\n  &ZALDIR = TRANS (&ZALDIR ' ',0 *,*)\n  &ZALLREC = TRANS (&ZALLREC ' ',0 *,*)\n  &ZALBLK = TRANS (&ZALBLK ' ',0 *,*)\n  VER (&ZALDIR,NUM)\n  VER (&ZAL1EX,NUM)\n  VER (&ZAL2EX,NUM)\n  VER (&ZALLREC,RANGE,0,32760)\n  VER (&ZALBLK,RANGE,1,32760)\n  VPUT( ZALVOL ZALSPC ZAL1EX ZAL2EX ZALDIR ZALRF ZALLREC ZALBLK ) PROFILE\n)END\n/* $SEG(ISRUAAP)  COMP(UTILITY)    PROD(MVS):                        */\n/*                                                                   */\n/* CHANGE ACTIVITY:                                                  */\n/*                                                                   */\n/* $H0= QUALITY  M230  861021  040100 : FT PTM 294                   */\n/*                                                                   */\n/* OY18924 - 89/01/11 - MVS 2.3 SPE development APAR to fulfill      */\n/*                      DFP 3.1 requirements.  BDO                   */\n/* OY22454 - 890426 - PULLED INTO WORK LIST FOR PE PTFS UY34584 AND  */\n/*                    UY36552 - NO CODE CHG. GT4045-AAB              */\n/*                           ***                                     */\n/* Lighting change NAPIP03 to restrict non-tech services allocation  */\n/*     to UNIT=TEST and force high level index to the user-id        */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NAPIP04": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x90\\x17\\x1f\\x00\\x90(_\\x16W\\x00I\\x00I\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-06-20T00:00:00", "modifydate": "1990-10-12T16:57:00", "lines": 73, "newlines": 73, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPIP04) .\n++ VER(Z038) FMID(HDV2302) PRE(UY37582).\n++ MAC(ISRUAAP2).\n)BODY\n%------------------------  ALLOCATE NEW DATA SET  ------------------------------\n%COMMAND ===>_ZCMD                                                             +\n+\n+DATA SET NAME:%&DSNS                                        +\n+\n+   VOLUME SERIAL     %===>_ZALVOL+     (Blank for authorized default volume)\n+   SPACE UNITS       %===>_ZALSPAC   + (BLKS, TRKS, or CYLS)\n+   PRIMARY QUANTITY  %===>_ZAL1EX+     (In above units)\n+   SECONDARY QUANTITY%===>_ZAL2EX+     (In above units)\n+   DIRECTORY BLOCKS  %===>_ZALDIR+     (Zero for sequential data set)\n+   RECORD FORMAT     %===>_ZALRF +\n+   RECORD LENGTH     %===>_ZALLREC+\n+   BLOCK SIZE        %===>_ZALBLK+\n+   EXPIRATION DATE   %===>_ZALEXD    + (&ZDATEFD&Z4DATEF\n+                                        &Z2DATEJ&Z4DATEJ in Julian form\n+                                        &ZDR for retention period in days\n+                                        or blank)\n+\n+\n)INIT\n  /* THIS PANEL ADDED FOR OZ86439 */\n  .HELP = ISR32010\n  &ZCMD = &Z\n  &ZALEXD = &Z\n  &ZALUNIT = &Z\n  &X = TRUNC(&ZUSER,3)    /* Lighting restriction */\n  IF(&X \u00ac= 'FCH')         /* Lighting restriction */\n    &ZALVOL = ' '         /* Lighting restriction */\n    &ZALUNIT = 'TEST'     /* Lighting restriction */\n  IF (&ZMVS22 = '0')\n    &Z4DATEF = &Z\n    &Z4DATEJ = &Z\n  IF (&ZALSPAC = 'KILOBYTE')                           /* OY18924 */\n    &ZALSPAC = &Z                                      /* OY18924 */\n  IF (&ZALSPAC = 'MEGABYTE')                           /* OY18924 */\n    &ZALSPAC = &Z                                      /* OY18924 */\n)PROC\n  &X = TRUNC(&ZUSER,3)    /* Lighting restriction */\n  IF(&X \u00ac= 'FCH')         /* Lighting restriction */\n    &ZALVOL = ' '         /* Lighting restriction */\n    &ZALUNIT = 'TEST'     /* Lighting restriction */\n    &Y = TRUNC(&DSNS,6)   /* Lighting restriction */\n    IF (&Y \u00ac= &ZUSER)     /* Lighting restriction */\n      .MSG = LGTM010F     /* Lighting restriction */\n  &ZALSPC = TRANS (&ZALSPAC CYLS,CYLINDER TRKS,TRACK BLKS,BLOCK\n                            CYLINDERS,CYLINDER TRACKS,TRACK BLOCKS,BLOCK\n                            CYL,CYLINDER TRK,TRACK BLK,BLOCK\n                            C,CYLINDER T,TRACK B,BLOCK\n                            CYLINDER,CYLINDER TRACK,TRACK BLOCK,BLOCK\n                            MSG=ISRU052)\n  &ZALDIR = TRANS (&ZALDIR ' ',0 *,*)\n  &ZALLREC = TRANS (&ZALLREC ' ',0 *,*)\n  &ZALBLK = TRANS (&ZALBLK ' ',0 *,*)\n  VER (&ZALDIR,NUM)\n  VER (&ZAL1EX,NUM)\n  VER (&ZAL2EX,NUM)\n  VER (&ZALLREC,RANGE,0,32760)\n  VER (&ZALBLK,RANGE,1,32760)\n  VPUT( ZALVOL ZALSPC ZAL1EX ZAL2EX ZALDIR ZALRF ZALLREC ZALBLK ) PROFILE\n)END\n/* $SEG(ISRUAAP2) COMP(UTILITY)    PROD(MVS):                        */\n/* CHANGE ACTIVITY:                                                  */\n/*                                                                   */\n/* OY18924 - 89/01/19 - MVS 2.3 SPE development APAR to fulfill      */\n/*                      DFP 3.1 requirements.  BDO                   */\n/* OY22454 - 890426 - THIS PART NEEDED TO BE PULLED IN FOR PE PTFS   */\n/*                    UY34584 AND UY36552 - NO CODE CHG. GT4045-AAB  */\n/* Lighting mod NAPIP04 to force allocation to UNIT=TEST and high     */\n/*     level index to user-id if sign-on is not Tech Services         */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NAPIP05": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17\\x1f\\x00\\x90\\x17\\x1f\\x157\\x00%\\x00%\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-20T00:00:00", "modifydate": "1990-06-20T15:37:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPIP05) .\n++ VER(Z038) FMID(HDV2302) .\n++ MAC(ISRUADC1).\n)ATTR\n  # TYPE(OUTPUT) INTENS(LOW) JUST(LEFT) CAPS(OFF)\n)BODY\n%----------------------------  CONFIRM DELETE  ---------------------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n+DATA SET NAME:%&DSNS                                        +\n+VOLUME:       %&DVOL  +\n+CREATION DATE:%&CRDT      +\n+\n+\n+INSTRUCTIONS:\n+\n+   Press%ENTER+key to confirm delete request.\n+      (The data set will be deleted#ZUUNCAT\n+\n+   Enter%END+command to cancel delete request.\n)INIT\n  .HELP=ISR32030\n  &ZCMD = &Z\n  &ZUUNCAT = TRANS ( &ZUCAT 0,'and uncataloged.)' 1,'but not uncataloged.)')\n  IF (&ZTERM = 3278KN, 3277KN)\n    &ZUUNCAT = TRANS ( &ZUCAT 0,'AND UNCATALOGED.)' 1,'BUT NOT UNCATALOGED.)')\n)PROC\n  IF (&ZCMD \u00ac= &Z)\n    .MSG = ISRU245\n  &X = TRUNC(&ZUSER,3)          /* Lighting restriction  */\n  IF (&X \u00ac= 'FCH')              /* Lighting restriction  */\n    &Y = TRUNC(&DSNS,6)         /* Lighting restriction  */\n    IF (&Y \u00ac= &ZUSER)           /* Lighting restriction  */\n      .MSG = LGTM010G           /* Lighting restriction  */\n)END\n/*  Lighting mod NAPIP05 to restrict non Tech Services users to only */\n/*      deleting data sets with their high level index               */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NAPIP06": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17\\x1f\\x00\\x90\\x17\\x1f\\x157\\x00/\\x00/\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-20T00:00:00", "modifydate": "1990-06-20T15:37:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPIP06) .\n++ VER(Z038) FMID(HDV2302) .\n++ MAC(ISRUADC2).\n)ATTR\n  # TYPE(OUTPUT) INTENS(LOW) JUST(LEFT) CAPS(OFF)\n)BODY\n%----------------------------  CONFIRM DELETE  ---------------------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n%\n+DATA SET NAME:%&DSNS                                        +\n+VOLUME:       %&DVOL  +\n+CREATION DATE:%&CRDT      +\n+\n+\n+INSTRUCTIONS:\n+\n%*******************************************************************************\n%* You have specified a volume serial for the data set you want deleted.       *\n%* The data set is also cataloged on that volume.  In addition to deleting     *\n%* the data set,  indicate below if you want the data set uncataloged.         *\n%*******************************************************************************\n+\n+Reply to uncatalog the data set ===>_ZUR+(YES or NO)\n%\n+\n+   Press%ENTER+key to confirm delete request.\n+\n+   Enter%END+command to cancel delete request.\n)INIT\n  .HELP=ISR32030\n  &ZCMD = &Z\n  &ZUR = YES\n  .CURSOR = ZUR\n  .ALARM = YES\n)PROC\n  IF (&ZCMD \u00ac= &Z)\n    .MSG = ISRU245\n  &RPY = TRUNC (&ZUR,1)\n  VER (&RPY,LIST,N,Y)\n  &X = TRUNC(&ZUSER,3)             /* Lighting restriction */\n  IF (&X \u00ac= 'FCH')                 /* Lighting restriction */\n    IF (&RPY \u00ac= 'Y')               /* Lighting restriction */\n      .MSG = LGTM010H              /* Lighting restriction */\n)END\n/* Lighting mod NAPIP06 to prevent non-tech services personell from  */\n/*     deleting a catalogued data set without uncataloguing it       */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NAPIP07": {"ttr": 1544, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17\\x1f\\x00\\x90\\x17\\x1f\\x158\\x00=\\x00=\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-20T00:00:00", "modifydate": "1990-06-20T15:38:00", "lines": 61, "newlines": 61, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPIP07) .\n++ VER(Z038) FMID(HDV2302) .\n++ MAC(ISRUARP1).\n)ATTR\n  # TYPE(OUTPUT) INTENS(LOW) JUST(LEFT) CAPS(OFF)\n)BODY\n%----------------------------  RENAME DATA SET  --------------------------------\n%COMMAND ===>_ZCMD                                                             +\n+\n+DATA SET NAME:%&DSNS                                        +\n+VOLUME:       %&ZUTVOL+\n+\n+ENTER NEW NAME BELOW:     (The data set will#ZURECAT\n+\n+ISPF LIBRARY:\n+   PROJECT%===>_PROJECT +\n+   GROUP  %===>_LIBRARY +\n+   TYPE   %===>_TYPE    +\n+\n+OTHER PARTITIONED OR SEQUENTIAL DATA SET:\n+   DATA SET NAME %===>_ODSN                                                   +\n+\n)INIT\n  .HELP = ISR32020\n  &ZCMD = &Z\n  &ZURECAT = TRANS ( &ZUCAT 0,'be recataloged.)'\n                            2,'not be cataloged.)')\n  IF (&ZTERM = 3278KN, 3277KN)\n    &ZURECAT = TRANS ( &ZUCAT 0,'BE RECATALOGED.)'\n                            2,'NOT BE CATALOGED.)')\n  IF ( &ODSN = ' ' )\n    .CURSOR = PROJECT\n  IF ( &ODSN \u00ac= ' ' )\n    .CURSOR = ODSN\n)PROC\n  &X = TRUNC(&ZUSER,3)               /* Lighting change */\n  IF (&X \u00ac= 'FCH')                   /* Lighting restriction */\n    &Y = TRUNC(&DSNS,6)              /* Lighting restriction */\n    IF (&Y \u00ac= &ZUSER)                /* Lighting restriction */\n     .MSG = LGTM010I                 /* Lighting restriction */\n  IF (&ODSN = ' ')\n    VER (&PROJECT,NB)\n    VER (&LIBRARY,NB)\n    VER (&TYPE,NB)\n    IF (&X \u00ac= 'FCH')                 /* Lighting restriction */\n      IF (&PROJECT \u00ac= &ZUSER)        /* Lighting restriction */\n        .MSG = LGTM010J              /* Lighting restriction */\n  ELSE                               /* Lighting change      */\n    VER (&ODSN,DSNAME)               /* Lighting change      */\n    IF (&X \u00ac= 'FCH')                 /* Lighting restriction */\n      &Y = TRUNC(&ODSN,1)            /* Lighting restriction */\n      IF (&Y = '''')                 /* Lighting restriction */\n        &W = .TRAIL                  /* Lighting restriction */\n        &Y = TRUNC(&W,6)             /* Lighting restriction */\n        IF (&Y \u00ac= &ZUSER)            /* Lighting restriction */\n          .MSG = LGTM010J            /* Lighting restriction */\n)END\n/*  Lighting mod NAPIP07 to restrict non-Tech services users to   */\n/*      renaming only data sets that have their user-id as a      */\n/*      high level index and to new names with their user-id as a */\n/*      high level index                                          */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NAPIP08": {"ttr": 1546, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17\\x1f\\x00\\x90\\x17\\x1f\\x159\\x000\\x000\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-20T00:00:00", "modifydate": "1990-06-20T15:39:00", "lines": 48, "newlines": 48, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPIP08) .\n++ VER(Z038) FMID(HDV2302) .\n++ MAC(ISRUARP2).\n)ATTR\n  # TYPE(OUTPUT) INTENS(LOW) JUST(LEFT) CAPS(OFF)\n)BODY\n%----------------------------  RENAME DATA SET  --------------------------------\n%COMMAND ===>_ZCMD                                                             +\n+\n+DATA SET NAME:%&DSNS                                        +\n+VOLUME:       %&ZUTVOL+\n+\n+ENTER NEW NAME BELOW:\n+\n+ISPF LIBRARY:\n+   PROJECT%===>_PROJECT +\n+   GROUP  %===>_LIBRARY +\n+   TYPE   %===>_TYPE    +\n+\n+OTHER PARTITIONED OR SEQUENTIAL DATA SET:\n+   DATA SET NAME %===>_ODSN                                                   +\n+\n%*******************************************************************************\n%* You have specified a volume serial for the data set you want renamed.       *\n%* The data set is also cataloged on that volume.  In addition to renaming     *\n%* the data set,  indicate below if you want the data set recataloged.         *\n%*******************************************************************************\n+\n+   Reply to recatalog the data set ===>_ZUR+(YES or NO)\n)INIT\n  .HELP = ISR32020\n  &ZCMD = &Z\n  &ZUR = YES\n)PROC\n  IF (&ODSN = ' ')\n    VER (&PROJECT,NB)\n    VER (&LIBRARY,NB)\n    VER (&TYPE,NB)\n  VER (&ODSN,DSNAME)\n  &RPY = TRUNC (&ZUR,1)\n  VER (&RPY,NB,LIST,N,Y)\n  &X = TRUNC(&ZUSER,3)                     /* Lighting restriction */\n  IF (&X \u00ac= 'FCH')                         /* Lighting restriction */\n    IF (&RPY \u00ac= 'Y')                       /* Lighting restriction */\n      .MSG = LGTM010K                      /* Lighting restriction */\n)END\n/* Lighting mod NAPIP08 to force non-tech services users to recatalog */\n/*     when renaming                                                  */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NAPIP09": {"ttr": 1548, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17\\x1f\\x00\\x90\\x17\\x1f\\x15I\\x00K\\x00K\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-20T00:00:00", "modifydate": "1990-06-20T15:49:00", "lines": 75, "newlines": 75, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPIP09) .\n++ VER(Z038) FMID(HDV2302) .\n++ MAC(ISRUDA2).\n)ATTR\n  \u00ac TYPE(INPUT) INTENS(NON)\n)BODY\n%----------------------------  DATA SET UTILITY  -------------------------------\n%OPTION  ===>_ZCMD                                                             +\n%\n%   A+- Allocate new data set                %C+- Catalog data set\n%   R+- Rename entire data set               %U+- Uncatalog data set\n%   D+- Delete entire data set               %S+- Data set information (short)\n%   blank+- Data set information\n+\n+ISPF LIBRARY:\n+   PROJECT%===>_PRJ0    +\n+   GROUP  %===>_LIB0    +\n+   TYPE   %===>_TYP0    +\n+\n+OTHER PARTITIONED OR SEQUENTIAL DATA SET:\n+   DATA SET NAME %===>_DSN                                                    +\n+   VOLUME SERIAL %===>_VOL   +  (If not cataloged, required for option \"C\")\n+\n+DATA SET PASSWORD%===>\u00acPSWD    +(If password protected)\n)INIT\n  .HELP = ISR32000\n  &ZCMD = TRANS(&OPT N,R E,D I,' ' V,U *,*)\n  IF ( &DSN = ' ' )\n    &VOL = &Z\n  IF ( &DSN \u00ac= ' ' )\n    .CURSOR = ZCMD\n  IF ( .CURSOR = ' ' )\n    .CURSOR = ZCMD\n)PROC\n  &OPT = TRANS(&ZCMD N,# E,# I,# V,# R,N D,E ' ',I U,V *,*)\n  VER(&OPT,LIST,A,N,E,I,C,V,S)\n  &X = TRUNC(&ZUSER,3)                /* Lighting change      */\n  IF ( &OPT = C )\n    VER(&VOL,NB)\n  IF ( &OPT = V )\n    .MSG = LGTM010L                   /* Lighting restriction */\n  /*  IF (&VOL \u00ac= ' ' )                  Lighting restriction */\n  /*      .MSG = ISRU230                 Lighting restriction */\n  IF ( &DSN = ' ' )\n    VER(&PRJ0,NB)\n    VER(&LIB0,NB)\n    VER(&TYP0,NB)\n    IF ( &OPT \u00ac= C )\n      IF (&VOL \u00ac= ' ' )\n        .MSG = ISRU232\n    ELSE                              /* Lighting restriction */\n      IF (&X \u00ac= 'FCH')                /* Lighting restriction */\n        IF (&PRJ \u00ac= &ZUSER)           /* Lighting restriction */\n          .MSG = LGTM010M             /* Lighting restriction */\n        if (&VOL \u00ac= 'TEST07')         /* Lighting restriction */\n          .MSG = LGTM010N             /* Lighting restriction */\n  ELSE                                /* Lighting change      */\n    VER (&DSN,DSNAME)                 /* Lighting change      */\n    IF (&X \u00ac= 'FCH')                  /* Lighting restriction */\n      IF (&OPT = 'C')                 /* Lighting restriction */\n        &Y = TRUNC(&DSN,1)            /* Lighting restriction */\n        IF (&Y = '''')                /* Lighting restriction */\n          &W = .TRAIL                 /* Lighting restriction */\n          &Y = TRUNC(&W,6)            /* Lighting restriction */\n          IF (&Y \u00ac= &ZUSER)           /* Lighting restriction */\n            .MSG = LGTM010M           /* Lighting restriction */\n        IF (&VOL \u00ac= 'TEST07')         /* Lighting restriction */\n           .MSG = LGTM010N            /* Lighting restriction */\n  VPUT ( PRJ0 LIB0 TYP0 ) PROFILE\n)END\n /* Lighting change NAPIP09 to restrict non tech services users to  */\n /*     to cataloguing on TEST07 and then only data sets with their */\n /*     user-id as high level index and require ALL users to use    */\n /*     3.4 for uncatalog to obtain a confirm function (and         */\n /*     restrict non-tech services to tapes with their user-id)     */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NAPIP10": {"ttr": 1551, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17\\x1f\\x00\\x90\\x17\\x1f\\x15P\\x008\\x008\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-20T00:00:00", "modifydate": "1990-06-20T15:50:00", "lines": 56, "newlines": 56, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPIP10) .\n++ VER(Z038) FMID(HDV2302) .\n++ MAC(ISRUDLP).\n%--------------------------- DATA SET LIST UTILITY -----------------------------\n%OPTION  ===>_ZCMD                                                             +\n%\n%  blank+- Display data set list%*         %P+ - Print data set list\n%  V    +- Display VTOC information only   %PV+- Print VTOC information only\n%\n+Enter one or both of the parameters below:\n+  DSNAME LEVEL %===>_ZDLDSNLV                                    +\n+  VOLUME       %===>_ZDLPVL+\n%\n%\n+  INITIAL DISPLAY VIEW    %===>_ZUPIV   +(VOLUME,SPACE,ATTRIB,TOTAL)\n+  CONFIRM DELETE REQUEST  %===> ALWAYS &ZUPCD+\n%\n%*+The following line commands will be available when the list is displayed:\n%\n%B+- Browse data set     %C+- Catalog data set     %F+- Free unused space\n%E+- Edit data set       %U+- Uncatalog data set   %=+- Repeat last command\n%D+- Delete data set     %P+- Print data set\n%R+- Rename data set     %X+- Print index listing\n%I+- Data set information%M+- Display member list\n%S+- Information (short) %Z+- Compress data set    %TSO command or CLIST\n)INIT\n  .HELP = ISR34000\n  IF (.MSG = &Z)\n    .CURSOR = ZCMD\n  &ZCMD = &ZUOPT\n  &ZUPIV = TRANS (&ZUVIEW 0,VOLUME 1,SPACE 2,ATTRIB 3,TOTAL *,VOLUME)\n  IF (&ZUCDR = &Z)\n    &ZUCDR = Y\n  &ZUPCD = 'YES'          /* Changed at Lighting to always yes */\n)PROC\n  IF (&ZCMD \u00ac= ' ')\n    VER (&ZCMD,LIST,P,V,PV)\n  &ZUOPT = TRUNC (&ZCMD,2)\n  IF (&ZUOPT = 'V ','PV')\n    VER (&ZDLPVL,NONBLANK)\n  IF (&ZUOPT = '  ','P ')\n    IF (&ZDLPVL = ' ')\n      VER (&ZDLDSNLV,NONBLANK,MSG=ISRU187)\n  &ZUCDR = TRUNC (&ZUPCD,1)\n  VER (&ZUCDR,NB,LIST,Y,N)\n  &ZUPCD = 'YES'          /* Changed at Lighting to always yes */\n  &ZVIEW = TRUNC (&ZUPIV,1)\n  VER (&ZVIEW,NB,LIST,V,S,A,T)\n  &ZUPIV = TRANS (&ZVIEW V,VOLUME S,SPACE A,ATTRIB T,TOTAL *,*)\n  &ZUVIEW = TRANS (&ZVIEW V,0 S,1 A,2 T,3 *,*)\n)END\n/* $SEG(ISRUDLP) COMP(DSLIST)  PROD(MVS):                            */\n/* $M0= ENHANC34 M230   860717  641747 :                             */\n/* $H0= DSLIST   M230   861016  040100 : FT PTM 294                  */\n /* Lighting change NAPIP10 to force the option CONFIRM DELETE to   */\n /*     always be yes                                               */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NAPIP11": {"ttr": 1553, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17\\x1f\\x00\\x90\\x17\\x1f\\x15Q\\x00I\\x00I\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-20T00:00:00", "modifydate": "1990-06-20T15:51:00", "lines": 73, "newlines": 73, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPIP11) .\n++ VER(Z038) FMID(HDV2302) .\n++ MAC(ISRUDSLS).\n%--------------------------- DATA SET LIST UTILITY -----------------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n+Data Set Name:%&ZUDSNS\n\n+Command before expansion:\n%     &ZULCMD\n\n+Command after expansion:\n%===> &ZULCMDX\n\n\n                     +\n%The expanded command field shown above can NOT be modified.+\n\n\n+Press%ENTER+key to process the command.\n+Enter%END+command to return without processing the command.\n%\n)INIT\n  .HELP = ISR34160\n&Y=TRUNC(&ZUSER,3)\nIF (.RESP \u00ac= END)\n  IF(&ZULCMDL\u00ac=0)\n    IF(&ZULCMDL=1)\n      &X=TRUNC(&ZUDSNS,6)\n      IF(&ZUSER\u00ac=&X)\n        IF(&Y\u00ac='FCH')\n          VER(&ZULCMD,LIST,B,E,END,I,M,P,S,X,?,MSG=LGTM010C)\n      VER(&ZULCMD,LIST,B,C,D,E,END,F,I,M,P,R,S,U,X,?,MSG=LGTM010B)\n      IF(&ZULCMD='U')\n        IF(&Y\u00ac='FCH')\n          VER (&ZUDVOL,NUM,MSG=LGTM010D)\n      IF(&ZULCMD='B','D','E','I','M','R','S','X')\n        .RESP=ENTER\n    ELSE\n      .MSG=LGTM010E\n)PROC\nIF (.RESP \u00ac= END)\n  IF (&ZCMD \u00ac= &Z)\n    .MSG = ISRU245\n  IF(&ZULCMDX = &Z)\n    .RESP = END\n  &Y=TRUNC(&ZUSER,3)\n  IF(&ZULCMDL\u00ac=0)\n    IF(&ZULCMDL=1)\n      &X=TRUNC(&ZUDSNS,6)\n      IF(&ZUSER\u00ac=&X)\n        IF(&Y\u00ac='FCH')\n          VER(&ZULCMD,LIST,B,E,END,I,M,P,S,X,?,MSG=LGTM010C)\n      VER(&ZULCMD,LIST,B,C,D,E,END,F,I,M,P,R,S,U,X,?,MSG=LGTM010B)\n      IF(&ZULCMD='U')\n        IF(&Y\u00ac='FCH')\n          VER (&ZUDVOL,NUM,MSG=LGTM010D)\n      IF(&ZULCMD='B','D','E','I','M','R','S','X')\n        .RESP=ENTER\n    ELSE\n      .MSG=LGTM010E\n)END\n/* $SEG(ISRUDSLS) COMP(DSLISTS)  PROD(MVS):                          */\n/* $M0= ENHANC34 M230   860717  641747 :                             */\n        .MSG=LGTM010E\n /* Lighting change NAPIP11 to use the SHOWCMDS panel as a          */\n /*     confirmation panel for uncatalog, an enforcement mechanism  */\n /*     to prevent entry of TSO commands on the data set line,      */\n /*     a restriction mechanism to allow non-tech services users to */\n /*     browse, edit, obtain a member list, print or display a      */\n /*     attributes of any data set but only delete, rename or free  */\n /*     space on their own disk data sets and uncatalog their own   */\n /*     tapes                                                       */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NAPIP12": {"ttr": 1556, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17\\x1f\\x00\\x90\\x17\\x1f\\x15Q\\x00-\\x00-\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-20T00:00:00", "modifydate": "1990-06-20T15:51:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPIP12) .\n++ VER(Z038) FMID(HDV2302) .\n++ MAC(ISRUDSL0).\n)ATTR DEFAULT($+_)\n  _ TYPE(INPUT)   INTENS(HIGH) CAPS(ON)\n  | AREA(DYNAMIC) SCROLL(ON) EXTEND(ON)\n 01 TYPE(DATAOUT) INTENS(LOW)\n 02 TYPE(DATAOUT) INTENS(LOW)\n 03 TYPE(DATAOUT) INTENS(LOW)\n 04 TYPE(DATAOUT) INTENS(LOW)\n 05 TYPE(DATAIN)  INTENS(LOW) CAPS(ON)\n 06 TYPE(DATAOUT) INTENS(LOW)\n 07 TYPE(DATAOUT) INTENS(LOW)\n 08 TYPE(DATAOUT) INTENS(LOW)\n 09 TYPE(DATAOUT) INTENS(LOW)\n 10 TYPE(DATAOUT) INTENS(LOW)\n)BODY WIDTH(80)\n$&ZDLTITLE                                                                     +\n$COMMAND ===>_ZCMD                      + USERID - &ZUSER     $SCROLL ===>_ZUSC+\n+\n|ZDATA ------------------------------------------------------------------------|\n|                                                                              |\n| -----------------------------------------------------------------------------|\n)INIT\n  .HELP = ISR34014\n  &X=TRUNC(&ZCMD,4)\n  IF(.MSG\u00ac=' ')\n    IF(&X='SHOW')\n      &ZCMD=' '\n  ELSE\n    &ZCMD='SHOWCMD'\n    .RESP=ENTER\n)PROC\n\n  &X=TRUNC(&ZCMD,4)\n  IF(&X='SHOW')\n    &X=TRUNC(&ZCMD,' ')\n    IF(.TRAIL\u00ac=' ')\n      .MSG=LGTM010A\n  VPUT (ZUSC) PROFILE\n)END\n/* $SEG(ISRUDSL0) COMP(DSLIST) PROD(MVS):                            */\n/* $L0= ENHANC34 M230   860717  641747 :                             */\n /* Lighting change NAPIP12 force SHOWCMDS always on so that the    */\n /*     SHOWCMDS panel can be used as an enforcement mechanism      */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NAPIP13": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17\\x1f\\x00\\x90\\x17\\x1f\\x15R\\x00^\\x00^\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-20T00:00:00", "modifydate": "1990-06-20T15:52:00", "lines": 94, "newlines": 94, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPIP13) .\n++ VER(Z038) FMID(HDV2302) .\n++ MAC(ISRUTIL).\n%-------------------------  UTILITY SELECTION MENU  ----------------------------\n%OPTION  ===>_ZCMD                                                             +\n%\n%    1 +LIBRARY    - Compress or print data set.  Print index listing.\n+                      Print, rename, delete, or browse members\n%    2 +DATASET    - Allocate, rename, delete, catalog, uncatalog, or\n+                      display information of an entire data set\n%    3 +MOVE/COPY  - Move, copy, or promote members or data sets\n%    4 +DSLIST     - Print or display (to process) list of data set names\n+                      Print or display VTOC information\n% &C05 +&RESEST\n%    6 +HARDCOPY   - Initiate hardcopy output\n%    8 +OUTLIST    - Display, delete, or print held job output\n% &C09 +&COMMAND\n% &C10 +&CONVERT\n%   11 +FORMAT     - Format definition for formatted data Edit/Browse\n%   12 +SUPERC     - Compare data sets (Standard dialog)\n%   13 +SUPERCE    - Compare data sets (Extended dialog)\n%   14 +SEARCH-FOR - Search data sets for strings of data\n% &C15 +&JESX\n% &C16 +&ACCOUNT\n%    B +Blocksize  - Calculate Blocksizes\n%    T +TCHSRVCS   - Technical Services Utilities\n%    V +VSAM/UTIL  - Vsam Utility\n)INIT\n  .HELP = ISR30000\n  &X = TRUNC(&ZUSER,3)\n  IF (&X = 'FCH' 'FCB' 'FCC')\n    &C05 = '   5'\n    &RESET = 'RESET      - Reset statistics for members of ISPF library'\n    &C09 = '   9'\n    &COMMAND = 'COMMANDS   - Create/change an application command table'\n    &C10 = '  10'\n    &CONVERT = 'CONVERT    - Convert old format menus/messages to new format'\n    &C15 = '  15'\n    &JESX = 'JESX       - Terminal Printer Control'\n    &C16 = '  16'\n    &ACCOUNT = 'Account    - Add/Update TSO User Ids'\n)PROC\n  &X = TRUNC(&ZUSER,3)\n  IF (&X = 'FCH' 'FCB' 'FCC')\n    &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                  1,'PGM(ISRUDA) PARM(ISRUDA1)'\n                  2,'PGM(ISRUDA) PARM(ISRUDA2)'\n                  3,'PGM(ISRUMC)'\n                  4,'PGM(ISRUDL) PARM(ISRUDLP)'\n                  5,'PGM(ISRURS)'\n                  6,'PGM(ISRUHC)'\n                  8,'PGM(ISRFLASH)  '\n                  9,'PANEL(ISPUCMA)'\n                 10,'PGM(ISRQCM) PARM(ISRQCMP)'\n                 11,'PGM(ISRFMT)'\n                 12,'PGM(ISRSSM)'\n                 13,'PGM(ISRSEPRM) NOCHECK'\n                 14,'PGM(ISRSFM)'\n                 15,'CMD(%JSXPRTC)'\n                 16,'PANEL(ACCT#P)'\n                  B,'PANEL(BLKOPT01)'\n                  T,'PGM(PNEXJ000)'\n                  V,'PANEL(VSMPN10) NEWAPPL(VSMU)'\n                ' ',' '\n                  *,'?' )\n  ELSE\n    &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                  1,'PGM(ISRUDA) PARM(ISRUDA1)'\n                  2,'PGM(ISRUDA) PARM(ISRUDA2)'\n                  3,'PGM(ISRUMC)'\n                  4,'PGM(ISRUDL) PARM(ISRUDLP)'\n                  6,'PGM(ISRUHC)'\n                  8,'PGM(ISRFLASH)'\n                 11,'PGM(ISRFMT)'\n                 12,'PGM(ISRSSM)'\n                 13,'PGM(ISRSEPRM) NOCHECK'\n                 14,'PGM(ISRSFM)'\n                  B,'PANEL(BLKOPT01)'\n                  T,'PGM(PNEXJ000)'\n                  V,'PANEL(VSMPN10) NEWAPPL(VSMU)'\n                ' ',' '\n                  *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n /*                                                                  */\n /* $SEG(ISRUTIL) COMP(SUPERCD) PROD(MVS):                           */\n /* CHANGE ACTIVITY:                                                 */\n /*    PN = REASON    RELEASE   DATE    ORIGIN   COMMENT             */\n /*    --   --------  --------  ------  ------ : ------------------  */\n /*   $L0 =    M230      100386  LUDLOW :                            */\n /*                                                                  */\n /* Lighting change NAPIP13 to add block size calculation (B), Tech */\n /*     services utilities (T), and VSAM-UTIL (V) options for all   */\n /*     users and JESX (15) and Account (16) for Tech services      */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NAPIP14": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x90\\x17\\x1f\\x00\\x90\\x17\\x1f\\x15'\\x00C\\x00C\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-20T00:00:00", "modifydate": "1990-06-20T15:27:00", "lines": 67, "newlines": 67, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPIP14) .\n++ VER(Z038) FMID(HDV2302) PRE(UY19668).\n++ MAC(ISRECRA1).\n)ATTR\n  \u00ac TYPE(INPUT) INTENS(NON)\n)BODY\n%----------------------------  EDIT - CREATE  ----------------------------------\n%COMMAND ===>_ZCMD                                                             +\n+\"CURRENT\" DATA SET:%&ZDSN&ZMEMBP\n+\n+TO ISPF LIBRARY:\n+   PROJECT%===>_ZCRPRJ1 +\n+   GROUP  %===>_ZCRLIB1 +\n+   TYPE   %===>_ZCRTYP1 +\n+   MEMBER %===>_ZCRMEM  +\n+\n+TO OTHER PARTITIONED DATA SET MEMBER:\n+   DATA SET NAME %===>_ZCRDSN\n+   VOLUME SERIAL %===>_ZCRVOL+  (If not cataloged)\n+\n+DATA SET PASSWORD%===>\u00acZCRPSWD +(If password protected)\n+\n+SPECIFY PACK OPTION FOR \"CREATE\" DATA SET%===>_ZEP+ (YES or NO)\n+\n+Press%ENTER+key to create.\n+Enter%END+command to cancel create.\n)INIT\n   .HELP = ISR2M610\n   &ZMEMBP = ' '         /* OZ86964 - ENSURE RESET TO BLANKS   */\n   IF (&ZMEMB \u00ac= ' ')\n     &ZMEMBP = '(&ZMEMB)'\n   IF (.MSG = ' ')   &ZCRMEM = '        '\n                     &ZCRPSWD = '        '\n /*******************************************************************/\n /*  REMOVING THE FOLLOWING LINE OF CODE                     OY10065*/\n /*******************************************************************/\n /*                  &ZCRDSN = &DSN                                 */\n   IF (&ZCRPRJ1 = ' ') &ZCRPRJ1 = &PRJ1\n                       &ZCRLIB1 = &LIB1\n                       &ZCRTYP1 = &TYP1\n   IF (&ZCRDSN \u00ac= ' ') .CURSOR = ZCRDSN\n   &ZEP = TRANS (&ZEP Y,YES N,NO)\n   IF (&PACT = Y)\n       &ZDSN = &PCUR\n       &ZMEMBP = '(&PMBR)'\n)PROC\n   IF (&ZCMD \u00ac= ' ') .MSG = ISPZ001\n   IF (&ZCRDSN = ' ')\n     VER (&ZCRPRJ1,NB)\n     VER (&ZCRLIB1,NB)\n     VER (&ZCRTYP1,NB)\n   VER (&ZCRDSN DSNAME)\n   VER (&ZEP,NONBLANK)\n   &ZEP = TRUNC (&ZEP,1)\n   VER (&ZEP,LIST,Y,N)\n)END\n /*                                                          */\n /* $SEG(ISRECRA1)  COMP(EDIT)  PROD(MVS):                   */\n /* CHANGE ACTIVITY -                                        */\n /*                                                          */\n /* OY10065 - 88/02/23 - DATA SET NAME FIELDS IS NOT BEING   */\n /*                      INITIALIZED TO THE DATA SET NAME    */\n /*                      FOR THE CREATE PANEL (ISRECRA1)     */\n /*                      WHEN THE DATA SET IS EDITED FROM A  */\n /*                      DATA SET LIST IN OPT34.             */\n /*                                                          */\n /*Lighting mod NAPIP14 to use PANSPF panel ISRECRA| instead of IBM */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NAPIP15": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17\\x1f\\x00\\x90\\x17\\x1f\\x15(\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-20T00:00:00", "modifydate": "1990-06-20T15:28:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPIP15) .\n++ VER(Z038) FMID(HDV2302) .\n++ MAC(ISRECRA2).\n)ATTR\n  # TYPE(OUTPUT) INTENS(HIGH) JUST(LEFT)\n)BODY\n%-------------------------  EDIT - CONFIRM CREATE  -----------------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n%Data set attributes are inconsistent.  Truncation may result in\n%the right-most portions of some records if create is performed.\n%\n+   \"Target\" data set attributes:\n+       Data set name:%&ZTARDSN\n+       Record format:%&ZTARRFM +\n+       Record length:#ZTARLN  +\n+\n+   \"Current\" data set attributes:\n+       Data set name:%&ZCURRDSN\n+       Record format:%&ZCURRRFM+\n+       Record length:#ZCURRL  +\n+\n+Press%ENTER+key to allow create with truncation.\n+Enter%END+command to cancel create.\n)INIT\n\n IF (&PACT = Y)\n    &ZCURRDSN = '&PCUR(&PMBR)'\n\n)END\n/* Lighting mod NAPIP15 to use PANSPF ISRECRA2 instead of IBM */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NAPIP16": {"ttr": 1800, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17\\x1f\\x00\\x90\\x17\\x1f\\x152\\x00Z\\x00Z\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-20T00:00:00", "modifydate": "1990-06-20T15:32:00", "lines": 90, "newlines": 90, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPIP16) .\n++ VER(Z038) FMID(HDV2302) .\n++ MAC(ISREDM02).\n)ATTR\n  \u00ac TYPE(INPUT) INTENS(NON)\n)BODY\n%----------------------------  EDIT - RECOVERY  --------------------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n%                  *****************************************\n%                  *        EDIT AUTOMATIC RECOVERY        *\n%                  *****************************************\n%\n+The following data set was being edited when a system failure or\n+task abend occurred:\n%\n+Data set:%&Z1                                                  +\n+&Z2      %&ZEDTVOL +\n%\n+Instructions:\n+   Press%ENTER+key to continue editing the data set, or\n+   Enter%END+command to return to the primary option menu, or\n+   Enter%DEFER+command to defer recovery of the specified data set, or\n+   Enter%CANCEL+command to cancel recovery of the data set.\n%\n+To continue editing a password protected data set, specify:\n+\n+   DATA SET PASSWORD%===>\u00acPSWD    +\n)INIT\n  .HELP = ISR2J000\n  .CURSOR = ZCMD\n  IF (&ZEDTMEM \u00ac= ' ')\n    &Z1 = '&ZEDTDSN(&ZEDTMEM)'\n  IF (&ZEDTMEM = ' ')\n    &Z1 = '&ZEDTDSN'\n  IF (&ZEDTVOL \u00ac= ' ')\n    &Z2 = 'Volume  :'\n  IF (&ZEDTVOL = ' ')\n    &Z2 = ' '\n /*                                                                           */\n /*  THE FOLLOWING LOGIC HAS BEEN ADDED FOR PANVALET ISPF OPTION.             */\n /*  PENDING RECOVERIES FROM PANVALET EDIT SESSIONS WILL BE DEFERRED,         */\n /*  SINCE THEY CAN NOT BE PROCESSED BY NORMAL PDF EDIT.                      */\n /*  THE TARGET DATASET NAME FOR THE RECOVERY DETERMINES WHETHER THE          */\n /*  EDIT WAS PANVALET OR NOT.  PANVALET EDIT USES THIS DATASET NAME:         */\n /*                                                                           */\n /*  '(PREFIX.)USERID.PANVALET.ISPFOPTN.EDITNNN'                              */\n /*                                                                           */\n /*  (PREFIX.) ============> TSO PREFIX, OMITTED IF SAME AS USERID            */\n /*  USERID. ==============> TSO USER ID                                      */\n /*  PANVALET.ISPFOPTN. ===> CAN BE CHANGED IN PANEL IPNE001                  */\n /*  EDITNNN ==============> NNN IS A UNIQUE PV EDIT SESSION NUMBER           */\n /*                                                                           */\n  &P1 = TRUNC(&ZEDTDSN,'.')              /* first qualifier of DSN            */\n  &P2 = .TRAIL                           /* remainder of DSN                  */\n  IF (&P2 \u00ac= ' ')                        /* more than one qualifier?          */\n    IF (&ZPREFIX \u00ac= ' ',&ZUSER)          /* TSO prefix in use?                */\n      IF (&P1 = &ZPREFIX)                /* is first qualifier prefix?        */\n        &P1 = TRUNC(&P2,'.')             /* next qualifier of DSN             */\n        &P2 = .TRAIL                     /* remainder of DSN                  */\n    IF (&P2 \u00ac= ' ')                      /* more qualifiers?                  */\n      IF (&P1 = &ZUSER)                  /* userid present in DSN?            */\n        &P1 = TRUNC(&P2,'.')             /* next qualifier of DSN             */\n        &P2 = .TRAIL                     /* remainder of DSN                  */\n        IF (&P2 \u00ac= ' ')                  /* more qualifiers?                  */\n          IF (&P1 = &PQL1)               /* PV edit dummy DSN?                */\n            &P1 = TRUNC(&P2,'.')         /* next qualifier of DSN             */\n            &P2 = .TRAIL                 /* remainder of DSN                  */\n            IF (&P2 \u00ac= ' ')              /* more qualifiers?                  */\n              IF (&P1 = &PQL2)           /* PV edit dummy DSN?                */\n                &P1 = TRUNC(&P2,'.')     /* next qualifier of DSN             */\n                &P2 = .TRAIL             /* remainder of DSN                  */\n                IF (&P2 = ' ')           /* right number of qualifiers?       */\n                  &P1 = TRUNC(&P1,4)     /* first four bytes                  */\n                  IF (&P1 = 'EDIT')      /* PV edit dummy dsn?                */\n                    &ZCMD = 'DEFER'      /* defer PV edit recovery            */\n                    .RESP = 'ENTER'      /* simulate 'enter' response         */\n /*                                                                           */\n /*  END OF LOGIC ADDED FOR PANVALET ISPF OPTION.                             */\n /*                                                                           */\n)PROC\n VER (&ZCMD LIST CANCEL CAN C DEFER DEF D)\n IF (&ZCMD \u00ac= ' ' )\n   &ZEDCMD = TRUNC (&ZCMD,1)\n IF (&ZCMD = ' ' )\n   &ZEDCMD = ' '\n &ZCMD = ' '\n VPUT (PSWD) PROFILE\n)END\n/* Lighting mod NAPIP16 to use PANSPF ISREDM02 instead of IBM */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NAPIP17": {"ttr": 1803, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17\\x1f\\x00\\x90\\x17\\x1f\\x153\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-20T00:00:00", "modifydate": "1990-06-20T15:33:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPIP17) .\n++ VER(Z038) FMID(HDV2302) .\n++ MAC(ISREMOV2).\n)ATTR\n  # TYPE(OUTPUT) INTENS(HIGH) JUST(LEFT)\n)BODY\n%--------------------------  EDIT - CONFIRM MOVE  ------------------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n%Data set attributes are inconsistent.  Truncation may result in the\n%right-most portions of some \"from\" records if move is performed.\n+\n+   \"From\" data set attributes:\n+       Data set name:%&ZFROMDSN\n+       Record format:%&ZFROMRFM+\n+       Record length:#ZFLN    +\n+\n+   \"Current\" data set attributes:\n+       Data set name:%&ZTODSN\n+       Record format:%&ZTORFM  +\n+       Record length:#ZTLN    +\n+\n+Press%ENTER+key to move with truncation.\n+Enter%END+command to cancel move.\n)INIT\n\n IF (&PACT = Y)\n    &ZTODSN = '&PCUR(&PMBR)'\n\n)END\n/* Lighting mod NAPIP17 to use PANSPF ISREMOV2 instead of IBM */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NAPIP18": {"ttr": 1805, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17\\x1f\\x00\\x90\\x17\\x1f\\x154\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-20T00:00:00", "modifydate": "1990-06-20T15:34:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPIP18) .\n++ VER(Z038) FMID(HDV2302) .\n++ MAC(ISRERPL2).\n)ATTR\n  # TYPE(OUTPUT) INTENS(HIGH) JUST(LEFT)\n)BODY\n%------------------------  EDIT - CONFIRM REPLACE  -----------------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n%Data set attributes are inconsistent.  Truncation may result in\n%the right-most portions of some records if replace is performed.\n%\n+   \"Target\" data set attributes:\n+       Data set name:%&ZTARDSN\n+       Record format:%&ZTARRFM +\n+       Record length:#ZTARLN  +\n+\n+   \"Current\" data set attributes:\n+       Data set name:%&ZCURRDSN\n+       Record format:%&ZCURRRFM+\n+       Record length:#ZCURRL  +\n+\n+Press%ENTER+key to allow replace with truncation.\n+Enter%END+command to cancel replace.\n)INIT\n\n IF (&PACT = Y)\n    &ZCURRDSN = '&PCUR(&PMBR)'\n\n)END\n/* Lighting mod NAPIP18 to use PANSPF ISRERPL2 instead of IBM */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NAPIP19": {"ttr": 1807, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17\\x1f\\x00\\x90\\x17\\x1f\\x15T\\x00/\\x00/\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-20T00:00:00", "modifydate": "1990-06-20T15:54:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPIP19) .\n++ VER(Z038) FMID(HDV2302) .\n++ MAC(ISR00003).\n%TUTORIAL -------------------- TABLE OF CONTENTS ---------------------- TUTORIAL\n%OPTION  ===>_ZCMD                                                             +\n+\n%                ----------------------------------------------\n                 | ISPF PROGRAM DEVELOPMENT FACILITY TUTORIAL |\n                 ----------------------------------------------\n+  The following topics are presented in sequence, or may be selected by\n   entering a one-character selection code in the option field:\n      %G+ GENERAL     - General information about ISPF\n      %0+ ISPF PARMS  - Specify terminal and user parameters\n      %1+ BROWSE      - Display source data or output listings\n      %2+ EDIT        - Create or change source data\n      %3+ UTILITIES   - Perform utility functions\n      %4+ FOREGROUND  - Invoke language processors in foreground\n      %5+ BATCH       - Submit job for language processing\n      %6+ COMMAND     - Enter TSO command or CLIST\n      %7+ DIALOG TEST - Perform dialog testing\n      %8+ LM UTILITY  - Perform library management functions\n      %P+ PANVALET    - Panvalet ISPF Option\n      %X+ EXIT        - Terminate ISPF using log and list defaults\n   The following topics will be presented only if explicitly selected:\n      %A+ APPENDIX A  - Dynamic allocation interface routine (DAIR) errors\n      %B+ APPENDIX B  - ISPF listing formats\n      %I+ INDEX       - Alphabetical index of tutorial topics\n)PROC\n   &ZSEL = TRANS(&ZCMD\n                G,ISR01000\n                0,ISP05000\n                1,ISR10000\n                2,ISR20000\n                3,ISR30000\n                4,ISR40000\n                5,ISR50000\n                6,ISR60010\n                7,ISR70000\n                8,ISR80000\n                P,TPV\n                X,ISP90100\n                A,*ISP93030\n                B,*ISR95000\n                I,*ISR91000\n                )\n)END\n/* Lighting mod NAPIP19 to use PANSPF ISR00003 instead of IBM */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NAPJ001": {"ttr": 1809, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x90\\x17/\\x00\\x90\\x17/\\x15%\\x02#\\x00\\x0c\\x02\\x1f\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-06-21T00:00:00", "modifydate": "1990-06-21T15:25:00", "lines": 547, "newlines": 12, "modlines": 543, "user": "FCHLAY"}, "text": "++ USERMOD (NAPJ001) .\n++ VER (Z038) FMID(HJE2221) /*\n MODULE J2XIT01     JES2 JOB HEADER EXIT                  */.\n++JCLIN.\n//STEP1    EXEC PGM=IEV90\n//SYSPUNCH DD  DSN=&&PUNCH(J2XIT01),DISP=SHR\n//SYSIN  DD  SYS1.JES2SRC(J2XIT01),DISP=SHR\n//STEP2    EXEC PGM=IEWL,PARM='RENT'\n//SYSPUNCH DD  DSN=&&PUNCH(J2XIT01),DISP=SHR\n//SYSLMOD  DD  DSN=SYS1.JES2LIB,DISP=SHR\n//SYSLIN  DD  *\n  INCLUDE SYSPUNCH(J2XIT01)\n  NAME J2XIT01(R)\n++SRC (J2XIT01) DISTLIB(JES2SRC).\n         TITLE 'JES2 EXIT 1 PRINT/PUNCH SEPARATOR EXIT'\n***********************************************************************\n*                                                                     *\n*        ENVIRONMENT   MVS XA 2.2.0                                   *\n*                                                                     *\n*        WRITTEN BY:                                                  *\n*                        CLARK F. MORRIS, DEPT.5069                   *\n*                        PHILIPS LIGHTING COMPANY                     *\n*                        PHILIPS SQUARE, CN6800                       *\n*                        SOMERSET, NJ 08875-6800                      *\n*                        (201) 563-3575  SHARE CODE WEJ               *\n*        USING EXIT1 ON THE JES2 MODS TAPE FROM                       *\n*                        JOHN V. HOOPER                               *\n*                        FIRST COMPUTER SERVICES                      *\n*                        420 BRUSHY MOUNTAIN ROAD                     *\n*                        WILKESBORO, N.C. 28697                       *\n*                        (919) 651-5414                               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                          KOMSTAR                                    *\n*                                                                     *\n*        SUPPORT EXISTS IN THIS EXIT FOR ONLINE KOMSTAR (KODAK).      *\n*        THE DEVICE NAMES OF PRINTER3 IS RESERVED FOR THIS            *\n*        DEVICE.                                                      *\n*                                                                     *\n*        SYSOUT CLASSES               ACTION                          *\n*                                                                     *\n*        F,4         IF THE FORM BEGINS WITH 'F' AND THE DEVICE IS    *\n*                    PRT3 - THE KOMSTAR, THE STANDARD HEADER AND      *\n*                    TRAILER PAGES ARE SUPPRESSED AND NO SETUP IS     *\n*                    DON FOR THE KOMSTAR.  IF THE FORM BEGINS WITH  . *\n*                    OTHER THAN F NATIVE COMMANDS ARE ISSUED TO THE   *\n*                    KOMSTAR TO GUARENTEE GOOD HEADERS.               *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*  CHANGES                                                            *\n*   LVL28 SUPPRESS HEADERS FOR ALL CADSDISP STARTED TASK PRINTOUTS    *\n*        DESTINED TO LOCAL PRINTERS                                   *\n*   LVLS29-30 FIX READER START TIME PROBLEM BY USING DIFFERENT FIELD  *\n*        AND CHECKING DATE FOR NUMERIC, ALSO ADDED ABILITY TO HANDLE  *\n*        INVALID DATE                                                 *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*              M A C R O S   U S E D   I N   J E S E X I T 1          *\n*                                                                     *\n*        01)  $BUFFER      SYS1.HASPSRC                               *\n*        02)  $CAT         SYS1.HASPSRC                               *\n*        03)  $DCT         SYS1.HASPSRC                               *\n*        04)  $ENTRY       SYS1.HASPSRC                               *\n*        05)  $FREEBUF     SYS1.HASPSRC                               *\n*        06)  $GETBUF      SYS1.HASPSRC                               *\n*        07)  $HASPEQU     SYS1.HASPSRC                               *\n*        08)  $HASPGBL     SYS1.HASPSRC                               *\n*        09)  $HCT         SYS1.HASPSRC                               *\n*        10)  $JCT         SYS1.HASPSRC                               *\n*        11)  $JOE         SYS1.HASPSRC                               *\n*        12)  $JQE         SYS1.HASPSRC                               *\n*        13)  $MIT         SYS1.HASPSRC                               *\n*        14)  $MODEND      SYS1.HASPSRC                               *\n*        15)  $MODULE      SYS1.HASPSRC                               *\n*        16)  $PBLOCK      SYS1.HASPSRC                               *\n*        17)  $PCE         SYS1.HASPSRC                               *\n*        18)  $PDDB        SYS1.HASPSRC                               *\n*        19)  $PPPWORK     SYS1.HASPSRC                               *\n*        20)  $PRPUT       SYS1.HASPSRC                               *\n*        21)  $RDT         SYS1.HASPSRC                               *\n*        22)  $RETURN      SYS1.HASPSRC                               *\n*        23)  $SAVE        SYS1.HASPSRC                               *\n*        24)  $SEPPDIR     SYS1.HASPSRC                               *\n*        25)  $SCAT        SYS1.HASPSRC                               *\n*        26)  $SVT         SYS1.HASPSRC                               *\n*        27)  $SYSPARM     SYS1.HASPSRC                               *\n*        28)  $XECB        SYS1.HASPSRC                               *\n*        29)  CVT          SYS1.AMODGEN                               *\n*        30)  IFGRPL       SYS1.MACLIB                                *\n*        31)  TIME         SYS1.MACLIB                                *\n*                                                                     *\n*                                                                     *\n*              L I N K A G E    E D I T O R    I N F O                *\n*                                                                     *\n*        SIZE:       4K                                               *\n*        ATTRIBUTES: REENTRANT, REUSEABLE, REFRESHABLE                *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\n         COPY  $HASPGBL\nJ2XIT01  $MODULE SYSP=(NOGEN,NOGEN,DATA,NOGEN,NOGEN),                  X\n               ENVIRON=JES2,                                           X\n               TITLE='JES2 EXIT1 PRINT/PUNCH SEPARATOR EXIT',          X\n               CVT,                GENERATE MVS CVT DSECT              X\n               RPL,                GENERATE MVS RPL DSECT              X\n               $HASPEQU,           GENERATE HASP EQUATES               X\n               $MODMAP,            GENERATE HASP MODULE MAP            X\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X\n               $HFAME,             GENERATE HASP HFAME DSECT           X\n               $JCT,               GENERATE HASP JCT DSECT             X\n               $JOE,               GENERATE HASP JOE DSECT             X\n               $JQE,               GENERATE HASP JQE DSECT             X\n               $DCT,               GENERATE HASP DCT DSECT             X\n               $RDT,               GENERATE HASP RDT DSECT             X\n               $SVT,               GENERATE HASP SSVT DSECT            X\n               $PCE,               GENERATE HASP PCE DSECT             X\n               $CAT,               GENERATE HASP CAT DSECT             X\n               $HCT,               GENERATE HASP HCT DSECT             X\n               $MIT,               GENERATE HASP MIT DSECT             X\n               $PDDB,              GENERATE HASP PDDB DSECT            X\n               $PADDR,             GENERATE HASP PADDR DSECT           X\n               $SCAT,              GENERATE HASP SCAT DSECT            X\n               $XECB,              GENERATE HASP XECB DSECT            X\n               $PPPWORK            GENERATE HASP PPPWORK DSECT\n         TITLE 'JES2 EXIT 1 PRINT/PUNCH SEPARATOR EXIT'\n***********************************************************************\n*                                                                     *\n*        WORK AREA USED BY THIS JES2 EXIT                             *\n*                                                                     *\n***********************************************************************\nBUFFER1  DSECT\n         DS    CL104               *****  RESERVED BY JES2 1.3.6 *****\nHDRADDR  DS    A\nWXEDHOUR DS    0CL3         HOURS FOR UNPACK\n         DS    CL1\nWX26TMDT DS    0CL16        FORMATTED TIME AND DATE             NAPJ047\nWXEDTIME DS    0CL8         TIME FORMATTED                      NAPJ047\n         DS    CL2          HOURS                               NAPJ047\nWXEDMIN  DS    0CL3         MINUTES FOR UNPACK                  NAPJ047\nWXEDPER1 DS    CL1                                              NAPJ047\n         DS    CL2          MINUTES                             NAPJ047\nWXEDSEC  DS    0CL3         SECONDS FOR UNPACK                  NAPJ047\nWXEDPER2 DS    CL1          RDR PERIOD 2                        NAPJ047\n         DS    CL2          SECONDS                             NAPJ047\nWXEDBOTH DS    0CL12        DATE FORMATTED IN GREGORIAN/JULIAN  NAPJ047\nWXEDDATE DS    0CL8         DATE FORMATTED IN GREGORIAN         NAPJ047\nWXEDMON  DS    CL2          EDITED MONTH                        NAPJ047\nWXEDDAY  DS    0CL3         EDITED DAY                          NAPJ047\nWXEDSL1  DS    CL1          SLASH                               NAPJ047\n         DS    CL2          EDITED DAY                          NAPJ047\nWXEDSL2  DS    CL1          SLASH                               NAPJ047\nWXEDJUL  DS    0CL6         EDITED JULIAN DATE\nWXEDYEAR DS    CL2          EDITED YEAR                         NAPJ047\nWXEDJULP DS    CL1          THE PERIOD\nWXEDJULD DS    CL3          THE JULIAN DAY\nWXDBLWRD DS    0D\nWXWORK1  DS    0F           WORK WORD                           NAPJ047\n         DS    CL1                                              NAPJ047\nWXJULDT  DS    0PL3         TEMP WORK DATE IN JULIAN            NAPJ047\nWXJULYR  DS    CL1                                              NAPJ047\nWXJULDAY DS    0PL2         TEMP JULIAN DAYS                    NAPJ047\n         DS    CL1                                              NAPJ047\nWXJULSGN DS    CL1          SIGN POSITION                       NAPJ047\n         DS    0F                                               NAPJ047\n         DS    0PL4\n         DS    CL2\nWX2DIGIT DS    0PL2\n         DS    CL1\nWXDBLSGN DS    XL1\nSAVETBL  DS    0CL52               AREA FOR COPY OF DATE TABLE\nMOENT    DS    0CL4                DATE TABLE ENTRY FOR FEBRUARY\nTBLDAY   DS    PL2\nTBLMON   DS    CL2\nFEBDAYS  DS    PL2\n         DS    CL46\nBYTEFND  DS    CL1\n*\n*\n*\n*\nHDRDSECT DSECT                     HASP HEADER DSECT\n         DS    CL104               *****  RESERVED BY JES2 1.3.6 *****\nWXKOMLN  DS    0CL121                                           NAPJ047\n         DS    CL4     000-003  X'014163FF'                     NAPJ047\n         DS    0CL20   004-023                                  NAPJ047\n         DS    CL2     004-005                                  NAPJ047\nWXKOMJBN DS    CL8     006-013  KOM JOB NAME                    NAPJ047\nWXKOMRST DS    0CL8    014-021  KOM TIME                        NAPJ047\nWXKOMRSD DS    0CL8    014-021  KOM DATE                        NAPJ047\nWXKOMACA DS    CL6     014-019  KOM JOB-ACCT 1ST 6 CHRS         NAPJ047\n         DS    CL2     020-021                                  NAPJ047\n         DS    CL2     022-023                                  NAPJ047\n         DS    0CL20   024-043                                  NAPJ047\n         DS    CL10    024-033                                  NAPJ047\nWXKOMCLN DS    0CL8    034-041  KOM JOB CLASS                   NAPJ047\nWXKOMACB DS    CL6     034-039  KOM JOB-ACCT LST 6 CHRS         NAPJ047\n         DS    CL2     040-041                                  NAPJ047\n         DS    CL2     042-043                                  NAPJ047\n         DS    0CL20   044-063                                  NAPJ047\n         DS    CL10    044-053                                  NAPJ047\nWXKOMNMA DS    0CL9    054-062  KOM 1ST 9 CHRS OF PROGRAMMER-NM NAPJ047\nWXKOMJID DS    CL8     054-061  KOM JOB NUMBER                  NAPJ047\n         DS    CL1     062-062                                  NAPJ047\n         DS    CL1     063-063                                  NAPJ047\n         DS    0CL20   064-083                                  NAPJ047\n         DS    CL10    064-073                                  NAPJ047\nWXKOMNMB DS    0CL9    074-082  KOM 2ND 9 CHRS OF PROGRAMMER-NM NAPJ047\nWXKOMDEV DS    CL8     074-081  KOM SUBMITTER                   NAPJ047\n         DS    CL1     082-082                                  NAPJ047\n         DS    CL1     083-083                                  NAPJ047\n         DS    0CL20   084-103                                  NAPJ047\n         DS    CL10    084-093                                  NAPJ047\nWXKOMNJI DS    0CL8    094-101  KOM NJE NODE                    NAPJ047\nWXKOMNMC DS    CL2     092-093  KOM LST 2 CHRS OF PROGRAMMER-NM NAPJ047\n         DS    CL6     094-101                                  NAPJ047\n         DS    CL2     102-103                                  NAPJ047\n         DS    CL2     104-105                                  NAPJ047\n         DS    CL15    106-120                                  NAPJ047\n         ORG\nJ2XIT01  CSECT ,                   RESTORE THE CSECT ENVIRONMENT\nJ2XIT01  AMODE 31\n         PRINT OFF\n         EJECT\n         PRINT ON\n***********************************************************************\n*                                                                     *\n*        EQUATED VARIABLES FOR SP 1.3.6 AND ABOVE                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nDCTDSECT EQU   DCT\nJCTDSECT EQU   JCT\nJOEDSECT EQU   JOE\nPCEDSECT EQU   PCE\nRDTDSECT EQU   RDT\nPPFLAG   EQU   PPPFLAG1,1\nPPKEY    EQU   PPPKEY,6\nPRLINECT EQU   PPPLNECT,4\nPDEVTYPE EQU   PPPDEVTP,4\nPWKJOE   EQU   PPPWKJOE,4\nPCHJOE   EQU   PPPCHJOE,4\nPCEJMTTR EQU   PPPLEBTR,4\nPCEEJRCB EQU   PPPEBRCB,4\n$SSVT    EQU   $SVT,4\n$SVRDT   EQU   SVTRDT,4\n         SPACE 3\n         USING JCT,R10             SET ADDRESSABILITY TO JCT\n.VEREND  ANOP\n         PRINT ON\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXIT MAIN ENTRY POINT                                        *\n*                                                                     *\n***********************************************************************\nJ2XIT01E $ENTRY BASE=R12\n         SPACE 1\n         $SAVE ,                   SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD BASE REGISTER\n         SLR   R15,R15             ZERO REGISTER 15 FOR RETURN CODE\n         LR    R2,R0               SAVE INPUT PARAMETER\n         LR    R3,R1               SAVE INPUT DCT ADDRESS\n         USING DCTDSECT,R3         SET ADDRESSABILITY TO DCT\n         TM    DCTPPSW,DCTPPSWS    SEE IF SEPARATORS REQUESTED\n         BO    EXITCHK             NO, GET OUT\n         CLI   JCTJOBID,C'S'       IS THIS A STARTED TASK?\n         BNE   CKKOM               NO, CHECK FOR KOMSTAR\n         CLC   JCTJNAME,C#EMC05P   IS THIS AN EMC PROVIDED PRINTOUT\n         BE    EXITCHK             YES, GO TO EXIT\n         CLC   JCTJNAME,C#EMC05T   IS THIS AN EMC PROVIDED PRINTOUT\n         BE    EXITCHK             YES, GO TO EXIT\n         CLC   JCTJNAME,C#CADS     IS THIS A DISPATCH CONTROLLED PRINT\n         BE    EXITCHK             YES, GO TO EXIT\nCKKOM    DS    0H\n         CLC   DCTDEVN,PRINTR3     IS THIS A KOMSTAR\n         BE    HDRCHK              YES, CHECK HEADER\n         CLC   DCTDEVN,PRT3        IS THIS A KOMSTAR\n         BNE   EXITCHK             NO, GET OUT\nHDRCHK   DS    0H\n         CLI   DCTFORMS,C'F'       DOES THE FORM-ID BEGIN WITH 'F'\n         BE    EXITCHK             YES, GO TO EXIT CHECK   E\n         LTR   R0,R0               IS THIS A HEADER PAGE?\n         BNZ   EXITCHK             NON-ZERO, NOT A HEADER, THUS EXIT\n         ICM   R4,B'1111',PCEUSER1 CHECK IF BUFFERS ALREADY OBTAINED\n         BNZ   GOTBUF\n         USING BUFFER1,R4\n         $GETBUF TYPE=HASP,FIX=YES,WAIT=YES GET A WORK BUFFER\n         ST    R1,PCEUSER1         SAVE ADDRESS OF BUFFER\n         LR    R4,R1\n         $GETBUF TYPE=HASP,FIX=YES,WAIT=YES GET A WORK BUFFER\n         ST    R1,HDRADDR\nGOTBUF   DS    0H\n         L     R8,HDRADDR          SAVE ADDRESS OF BUFFER\n         USING HDRDSECT,R8         SET ADDRESSABILITY TO HEADER LINE\n         EJECT\n***********************************************************************\n*                                                                     *\n*                      K O M S T A R                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*        PRODUCE THE PROPER NATIVE MODE COMMANDS FOR THE KODAK        *\n*        KOMSTAR UNIT IF REQUIRED FOR THE SYSOUT CLASS BEING          *\n*        PROCESSED.                                                   *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n*        WRITE KOMSTAR SETUP RECORD 1                                 *\n***********************************************************************\n         MVC   WXKOMLN,WXKOMC1     MOVE IN 1ST KOM LINE         NAPJ047\n         MVC   WXKOMJBN,JCTJNAME   MOVE IN JOB NAME             NAPJ047\n         LM    R0,R1,JCTRDRON      MOVE RDR START TIME AND DATE TO WRK\n         BAL   R9,EDITDTTM         PERFORM DATE TIME EDIT\n         MVC   WXKOMRSD,WXEDDATE   MOVE IN READER START DATE    NAPJ047\n         MVC   WXKOMDEV,JCTINDEV   MOVE IN SUBMITTER ID         NAPJ047\n         MVC   WXKOMNJI,JCTNONDE   MOVE IN ORIGINATING NODE ID  NAPJ047\n         BAL   R9,PRTLINE          PERFORM $PRPUT FOR KOM      NAPJ047\n         MVC   WXKOMLN,WXKOMC2     MOVE IN 2ND KOM LINE         NAPJ047\n         MVC   WXKOMRST,WXEDTIME   MOVE IN EDITED RDR START TIME\n         MVC   WXKOMCLN(L'JCTJCLAS),JCTJCLAS MOVE IN JOB CLASS  NAPJ047\n         MVC   WXKOMNMA,JCTPNAME   MOVE 1ST 9 CHRS OF PGMR NM   NAPJ047\n         MVC   WXKOMNMB,JCTPNAME+9 MOVE 2ND 9 CHRS OF PGMR NM   NAPJ047\n         MVC   WXKOMNMC,JCTPNAME+18  MV LST 2 CHRS OF PGMR NM   NAPJ047\n         BAL   R9,PRTLINE          PERFORM $PRPUT FOR KOM      NAPJ047\n         MVC   WXKOMLN,WXKOMC3     MOVE IN 3RD KOM LINE         NAPJ047\n*        MVC   WXKOMACA,  IF AVAILABLE MOVE IN 1ST PART OF ACCT\n*        MVC   WXKOMACB,  IF AVAILABLE MOVE IN LST PART OF ACCT\n         MVC   WXKOMJID,JCTJOBID   MOVE IN JCT JOB ID           NAPJ047\n         BAL   R9,PRTLINE          PERFORM $PRPUT FOR KOM      NAPJ047\nNEWFORM  DS    0H\n         MVC   WXKOMLN,WXKOMC4     MOVE IN 4TH KOM LINE         NAPJ047\n         BAL   R9,PRTLINE          PERFORM $PRPUT FOR KOM      NAPJ047\nEXITCHK  DS    0H\n         ICM   R4,B'1111',PCEUSER1 CHECK IF BUFFERS WERE OBTAINED\n         BZ    RETCHK\n         L     R8,HDRADDR          GET ADDRESS OF 2ND BUFFER\n         $FREEBUF (R4),TYPE=HASP   FREE FIRST WORK BUFFER\n         $FREEBUF (R8),TYPE=HASP   FREE SECOND WORK BUFFER\nRETCHK   DS    0H\n         SLR   R15,R15             ZERO OUT R15\n         ST    R15,PCEUSER1        STORE IN PCEUSER1\n         TM    DCTPPSW,DCTPPSWS    SEE IF SEPARATORS REQUESTED\n         BO    JESRET              NO, FINAL EXIT\n         CLI   JCTJOBID,C'S'       IS THIS A STARTED TASK\n         BNE   CKKOM2              NO, CHECK KOM\n         CLC   JCTJNAME,C#EMC05P   IS THIS AN EMC PROVIDED PRINTOUT\n         BE    EXITSUP             YES, SUPPRESS JES HEADERS\n         CLC   JCTJNAME,C#EMC05T   IS THIS AN EMC PROVIDED PRINTOUT\n         BE    EXITSUP             YES, SUPPRESS JES HEADERS\n         CLC   JCTJNAME,C#CADS     IS THIS A DISPATCH CONTROLLED PRINT\n         BNE   CKKOM2              NO, CHECK FOR KOMSTAR\nCKLOCAL  DS    0H\n         CLC   =C'PR',DCTDEVN      IS THIS A LOCAL PRINTER\n         BE    EXITSUP             YES, SUPPRESS JES HEADERS\nCKKOM2   DS    0H\n         CLC   DCTDEVN,PRINTR3     IS THIS A KOMSTAR\n         BE    FORMCHK             YES, CHECK FORMS\n         CLC   DCTDEVN,PRT3        IS THIS A KOMSTAR\n         BNE   JESRET              NO, FINAL EXIT\nFORMCHK  DS    0H\n         CLI   DCTFORMS,C'F'       DOES THE FORM-ID BEGIN WITH 'F'\n         BNE   JESRET              NO, DO NOT SUPPRESS HEADER\nEXITSUP  DS    0H\n         LA    R15,8               SET RETURN CODE TO SUPPRESS HEADER\nJESRET   DS    0H\n         $RETURN RC=(R15)          RETURN TO JES2\nPRTLINE  DS    0H\n         LA    R0,L'WXKOMLN        LOAD LINE LENGTH\n         LA    R1,WXKOMLN          LOAD ADDRESS OF SETUP COMMAND\n         $PRPUT DATA=(R1),LEN=(R0),COUNT=1,WAIT=YES,CC=M\n         BR    R9                  EXIT\n*        MVC   ROOMNBR,JCTROOMN    MOVE ROOM NUMBER TO BUFFER\nEDITDTTM DS    0H                  GET TIME AND DATE\n         ST    R1,WXWORK1          SAVE DATE\n         TRT   WXWORK1,TRTPNUM     IS THE DATE POSITIVE NUMERIC\n         BNP   BADDATE             NO SIGN OR SIGN IN NUMERIC PART\n         STC   R2,BYTEFND\n         CLI   BYTEFND,X'FF'       IS THIS A POSITIVE SIGN BYTE?\n         BNE   BADDATE             NO\n         MVC   SAVETBL,YEARTBL     SAVE A COPY OF DATE TABLE FOR UPDATE\n         LA    R6,SAVETBL-L'MOENT  LOAD ADDRESS OF DATE TABLE\n         MVC   WXEDJUL,MASKJUL     EDIT THE JULIAN DATE\n         ED    WXEDJUL,WXJULDT\n         TM    WXJULYR,X'01'       IT THIS AN ODD YEAR\n         BO    DAYLOOP             YES, CANNOT BE LEAP YEAR\n         TM    WXJULYR,X'12'       MAGIC LEAP YEAR MASK\n         BM    DAYLOOP             MIXED, CANNOT BE LEAP YEAR\n         MVC   FEBDAYS,P#29        CHANGE FEB TO 29 DAYS\nDAYLOOP  DS    0H                  SUBTRACT DAY/MONTH FROM TOTAL\n         LA    R6,L'MOENT(,R6)    INCREMENT TO NEXT DATE ENTRY\n         SP    WXJULDAY,0(L'TBLDAY,R6)  SUBTRACT DAYS IN THAT MONTH\n         BP    DAYLOOP             SEE IF ONLY PARTIAL MONTH REMAINDING\n         AP    WXJULDAY,0(L'TBLDAY,R6)  ADD BACK THE DAYS\n         OI    WXJULSGN,X'0F'           FORCE THE F ZONE\n         UNPK  WXEDDAY,WXJULDAY    UNPACK THE NUMBER OF DAYS\n         MVI   WXEDSL1,C'/'        INSERT DELIMITER\n         MVI   WXEDSL2,C'/'        INSERT DELIMITER\n         MVC   WXEDMON,TBLMON-MOENT(R6) MOVE MONTH (MM)\n         LR    R1,R0               SET UP TIME FOR CALCULATION\n         SLR   R0,R0               ZERO OUT R0\n         D     R0,F#100            DIVIDE BY 100 TO GET NO OF\n         SLR   R0,R0                SECONDS\n         D     R0,F#60             DIVIDE BY 60 TO GET NO. OF\n         CVD   R0,WXDBLWRD           MINUTES WITH REMAINDER IN\n         OI    WXDBLSGN,X'0F'        FORCE F ZONE\n         UNPK  WXEDSEC,WX2DIGIT      SECONDS\n         SLR   R0,R0\n         D     R0,=F'60'           DIVIDE BY 60 TO GET NO. OF\n         CVD   R0,WXDBLWRD           HOURS WITH REMAINDER IN\n         OI    WXDBLSGN,X'0F'       FORCE F ZONE\n         UNPK  WXEDMIN,WX2DIGIT      MINUTES\n         CVD   R1,WXDBLWRD         GET HOURS\n         OI    WXDBLSGN,X'0F'       FORCE F ZONE\n         UNPK  WXEDHOUR,WX2DIGIT\n         MVI   WXEDPER1,C'.'\n         MVI   WXEDPER2,C'.'                                    NAPJ047\n         BR    R9\nBADDATE  DS    0H\n         MVC   WX26TMDT,C#BADTMD\n         BR    R9\nTRTX     EQU   *-240\n         DC    C'0123456789ABCDEF'\nTRTPNUM  DS    0CL256\n         DC    XL16'000000000000000000000A0BFF0D0EFF' 00-0F\n         DC    XL16'000000000000000000000A0BFF0D0EFF' 10-1F\n         DC    XL16'000000000000000000000A0BFF0D0EFF' 20-2F\n         DC    XL16'000000000000000000000A0BFF0D0EFF' 30-3F\n         DC    XL16'000000000000000000000A0BFF0D0EFF' 40-4F\n         DC    XL16'000000000000000000000A0BFF0D0EFF' 50-5F\n         DC    XL16'000000000000000000000A0BFF0D0EFF' 60-6F\n         DC    XL16'000000000000000000000A0BFF0D0EFF' 70-7F\n         DC    XL16'000000000000000000000A0BFF0D0EFF' 80-8F\n         DC    XL16'000000000000000000000A0BFF0D0EFF' 90-9F\n         DC    XL16'000000000000000000000A0BFF0D0EFF' A0-AF\n         DC    XL16'000000000000000000000A0BFF0D0EFF' B0-BF\n         DC    XL16'000000000000000000000A0BFF0D0EFF' C0-CF\n         DC    XL16'000000000000000000000A0BFF0D0EFF' D0-DF\n         DC    XL16'000000000000000000000A0BFF0D0EFF' E0-EF\n         DC    XL16'000000000000000000000A0BFF0D0EFF' F0-FF\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CONSTANTS USED BY THIS JES2 EXIT                             *\n*                                                                     *\n***********************************************************************\nF#60     DC    F'60'\nF#100    DC    F'100'\nC#CADS   DC    CL8'CADSDISP'\nC#EMC05P DC    CL8'JLEMC05P'\nC#EMC05T DC    CL8'JLEMC05T'\nC#BADTMD DS    0CL16\nC#BADTM  DC    CL8'BAD TIME'\nC#BADDT  DC    CL8'BAD DATE'\nP#29     DC    PL2'29'\nPRINTR3  DC    CL8'PRINTR3'\nPRT3     DC    CL8'PRT3   '\nYEARTBL  DS    0CL52\n         DC    PL2'31',CL2'01',PL2'28',CL2'02' JULIAN DATE\n         DC    PL2'31',CL2'03',PL2'30',CL2'04'   TO\n         DC    PL2'31',CL2'05',PL2'30',CL2'06' DAY AND MONTH\n         DC    PL2'31',CL2'07',PL2'31',CL2'08' CONVERSION\n         DC    PL2'30',CL2'09',PL2'31',CL2'10'  TABLE\n         DC    PL2'30',CL2'11',PL2'31',CL2'12'\n         DC    PL2'999',CL2'13'\n         SPACE 3\nMASK1    DC    X'402120202020'     EDIT MASK\nMASK2    DC    X'402021204B20204B2020' EDIT MASK\nMASK3    DC    X'402120'           EDIT MASK\nMASK4    DC    X'21204B20204B2020' EDIT MASK\nMASKJUL  DC    X'21204B202020'\nWXKOMC1  DS    0CL121                                           NAPJ047\n         DC    X'01'                                            NAPJ047\n         DC    X'4163FF'                                        NAPJ047\n         DC    C'W1'                                            NAPJ047\n         DC    CL8' '   JOBNAME                                 NAPJ047\n         DC    CL8' '   DATE                                    NAPJ047\n         DC    CL2' '                                           NAPJ047\n         DC    CL20'B108145T2 D$$$09'                           NAPJ047\n         DC    CL20'B208145B2 D$$$01'                           NAPJ047\n         DC    CL10'B308015T '                                  NAPJ047\n         DC    CL8' '                   SUBMITTR                NAPJ047\n         DC    CL2' '                                           NAPJ047\n         DC    CL10'B408015B '          NJE NODE                NAPJ047\n         DC    CL8' '                                           NAPJ047\n         DC    CL2' '                                           NAPJ047\n         DC    XL2'FC10'                                        NAPJ047\n         DC    XL15'00'                                         NAPJ047\nWXKOMC2  DS    0CL121                                           NAPJ047\n         DC    X'01'                                            NAPJ047\n         DC    X'4163FF'                                        NAPJ047\n         DC    CL10'B508125T3'                                  NAPJ047\n         DC    CL8' '          TIME                             NAPJ047\n         DC    CL2' '                                           NAPJ047\n         DC    CL10'B608125B3'                                  NAPJ047\n         DC    CL8' '           JOBCLASS                        NAPJ047\n         DC    CL2' '                                           NAPJ047\n         DC    CL10'B709053L1'                                  NAPJ047\n         DC    CL9' '    PGMR-ID 1-9                            NAPJ047\n         DC    CL1' '                                           NAPJ047\n         DC    CL10'B809083L1'                                  NAPJ047\n         DC    CL9' '    PGMR-ID 10-18                          NAPJ047\n         DC    CL1' '                                           NAPJ047\n         DC    CL10'B902113L1'                                  NAPJ047\n         DC    CL2' '    PGMR-ID 19-20                          NAPJ047\n         DC    CL8' '                                           NAPJ047\n         DC    XL2'FC10'                                        NAPJ047\n         DC    XL15'00'                                         NAPJ047\nWXKOMC3  DS    0CL121                                           NAPJ047\n         DC    X'01'                                            NAPJ047\n         DC    X'4163FF'                                        NAPJ047\n         DC    CL10'BA06027T5'                                  NAPJ047\n         DC    CL6' '      1ST 6 CHRS OF ACCT                   NAPJ047\n         DC    CL4' '                                           NAPJ047\n         DC    CL10'BB06037T4'                                  NAPJ047\n         DC    CL6' '      LST 6 CHRS OF ACCT                   NAPJ047\n         DC    CL4' '                                           NAPJ047\n         DC    CL10'BC08025B4'                                  NAPJ047\n         DC    CL8' '      DJC-NET-ID                           NAPJ047\n         DC    CL2' '                                           NAPJ047\n         DC    CL20'H2    064'                                  NAPJ047\n         DC    CL20'BD03164T1 S$$$'                             NAPJ047\n         DC    XL2'FC10'                                        NAPJ047\n         DC    XL15'00'                                         NAPJ047\nWXKOMC4  DS    0CL121                                           NAPJ047\n         DC    X'01'                                            NAPJ047\n         DC    X'4163FF'                                        NAPJ047\n         DC    CL20'11012836162227140912'                       NAPJ047\n         DC    CL20'20101'                                      NAPJ047\n         DC    CL20'G164066'                                    NAPJ047\n         DC    CL20'H1      S   R'                              NAPJ047\n         DC    CL20'Q1   PMEJES3'                               NAPJ047\n         DC    XL1'10'                                          NAPJ047\n         DC    XL16'00'                                         NAPJ047\n         EJECT\n         LTORG\n         EJECT\n         $MODEND\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPJ002": {"ttr": 2056, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x90\\x17/\\x00\\x900o\\x150\\x00\\xd9\\x00\\xd8\\x00\\x00\\xc6\\xc3\\xc8\\xc3\\xc6\\xd4@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-06-21T00:00:00", "modifydate": "1990-11-02T15:30:00", "lines": 217, "newlines": 216, "modlines": 0, "user": "FCHCFM"}, "text": "++ USERMOD (NAPJ002) .\n++ VER (Z038) FMID(HJE2221).\n++JCLIN.\n//STEP1    EXEC PGM=IEV90\n//SYSPUNCH DD  DSN=&&PUNCH(J2XIT02),DISP=SHR\n//SYSIN  DD  SYS1.JES2SRC(J2XIT02),DISP=SHR\n//STEP2    EXEC PGM=IEWL,PARM='RENT'\n//SYSPUNCH DD  DSN=&&PUNCH(J2XIT02),DISP=SHR\n//SYSLMOD  DD  DSN=SYS1.JES2LIB,DISP=SHR\n//SYSLIN  DD  *\n  INCLUDE SYSPUNCH(J2XIT02)\n  NAME J2XIT02(R)\n++SRC (J2XIT02) DISTLIB(JES2SRC).\nJOBC     TITLE 'Bar Ilan Job card scan routine'\n******************************************************************\n*                                                                *\n* Load module: EXIT002.     Library: Linklist.                   *\n*                           Environment: JES2 main task.         *\n*                                                                *\n*                                                                *\n*      This module contains exit 2 routine to for initial        *\n*   job setup.                                                   *\n*                                                                *\n*                                                                *\n******************************************************************\n         COPY  $HASPGBL\nJ2XIT02  $MODULE $MIT,                                             WEJ C\n               $BUFFER,                                                C\n               $HASPEQU,                                               C\n               $TAB,                                                   C\n               RPL,                                                    C\n               $PCE,                                                   C\n               $JQE,                                                   C\n               $JOE,                                                   C\n               $JCT,                                                   C\n               $IOT,                                                   C\n               $DCT,                                                   C\n               $HCT,                                                   C\n               $MODMAP\n         EJECT ,\n         DROP  ,                       Throw USINGs done by $MODULE\nJ2XIT02  AMODE 31\nJ2XIT02  RMODE 24\nJ2XIT02E $ENTRY BASE=R12\n***********************************************************************\n*                                                                     *\n*    Load module: J2XIT02.    Routine:  JOBCX2.                       *\n*                             Environment:  JES2 main task (HASPRDR). *\n*                                                                     *\n*   I N S T A L L A T I O N      J O B    C A R D   S C A N           *\n*                                                                     *\n*      This exit routine provides installation job-card support       *\n*    for general job initialization and manipulation. It is called    *\n*    before any JES2 job-card scan is done.                           *\n*                                                                     *\n*                                                                     *\n*        Registers on entry are:                                      *\n*                                                                     *\n*        Reg. 0:    0 ==> First JOB statement.                        *\n*                   4 ==> JOB continuation statement.                 *\n*                                                                     *\n*        Reg. 1:    --> A three word parameter list:                  *\n*                   Word 1 - Address of the statement image.          *\n*                                                                     *\n*                   Word 2 - Address of RDWFLAGX in PCE.              *\n*                      X'01' ==> JCL statement                        *\n*                      X'02' ==> Control statement                    *\n*                      X'04' ==> Job statement                        *\n*                      X'08' ==> Continue statement                   *\n*                      X'10' ==> Exit supplied next statement         *\n*                      X'20' ==> Error msg. supplied by exit          *\n*                                                                     *\n*                   Word 3 - ADDRESS of JCTXWRK field in the JCT.     *\n*                                                                     *\n*        Reg. 2-9 --- N/A                                             *\n*                                                                     *\n*        Reg. 10----==> JCT                                           *\n*                                                                     *\n*        Reg. 11----==> HCT                                           *\n*                                                                     *\n*        Reg. 12----- N/A                                             *\n*                                                                     *\n*        Reg. 13----==> HASPRDR PCE                                   *\n*                                                                     *\n*        Reg. 14----- Contains return address                         *\n*                                                                     *\n*        Reg. 15----- Contains entry point address                    *\n*                                                                     *\n*  Return codes:                                                      *\n*                                                                     *\n*       0 - All ok, continue normally.                                *\n*       4 - Same as 0, no more exit routines.                         *\n*       8 - Cancel job, queue to output.                              *\n*      12 - Cancel job, queue to purge, no output.                    *\n*                                                                     *\n*                                                                     *\n*  Routine description:                                               *\n*                                                                     *\n*     This routine will perform the following initialization steps:   *\n*                                                                     *\n*     1. If the current DCT is of an INTRDR, allocated to a TSU       *\n*        or STC, then default MSGCLASS to A regardless of the DCT     *\n*        supplied value.                                              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                        Written: Nov   23, 1986  Doron Shikmoni.     *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*          Maintenance   Log                                          *\n*          =================                                          *\n*                                                                     *\n*      Updated at Philips Lighting to Propagate the RIDJNAM as the WEJ*\n*      submitting device by moving it to JCTINDEV.  This in turn   WEJ*\n*      will be used by exit 6 to determine whether or not a job is WEJ*\n*      production (submitter is UCC7).  JCTINDEV is the source for WEJ*\n*      SMF26DEV on the job purge record so a better record of      WEJ*\n*      submissions is kept.                                        WEJ*\n*                        Clark Morris, Dept. 5069                  WEJ*\n*                        Philips Lighting Company                  WEJ*\n*                        Philips Square CN6800                     WEJ*\n*                        Somerset, NJ 08875-6800                   WEJ*\n*                        United States of America                  WEJ*\n*                        201-563-3575                              WEJ*\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING JCT,R10\n         USING HCT,R11\n         USING PCE,R13\n        $SAVE                          Save registers.\n         LR    R12,R15                 Load base register.\n         LR    R2,R1                   Preserve parm register.\n         EJECT\n***********************************************************************\n*                                                                     *\n*  If our device is an INTRDR, and it's owned by an STC or TSU,       *\n*  default MSGCLASS to 'A'; naturally, any job-card MSGCLASS will     *\n*  override this default.                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         LTR   R0,R0                   First job card call?\n         BNZ   X2MSGZ                  No. Skip MSGCLASS stuff.\n         CLI   JCTJOBID,C'T'           Is this a tso logon?\n         BNE   X2MSGB                  No. check if this is a job\n         CLI   JCTMCLAS,C'A'           Is default MSGCLASS=A?\n         BNE   X2MSGZ                  No. Skip MSGCLASS stuff.\n         MVI   JCTMCLAS,C'Z'           Set default MSGCLASS Z (dummy)\n         B     X2MSGZ                  Go to exit\nX2MSGB   DS    0H\n         CLI   JCTJOBID,C'J'           Is this a batch job?\n         BNE   X2MSGF                  No. Skip MSGCLASS stuff.\n         L     R9,PCEDCT               Point at DCT\n         USING DCT,R9\n         CLI   DCTDEVTP,DCTINR         Internal reader?\n         BNE   X2MSGZ                  No. Skip MSGCLASS stuff.\n         MVC   JCTINDEV,RIDJNAM        Move in name of INTRDR owner WEJ\n         CLI   RIDJBID,C'J'            Owner of INTRDR is a JOB ?\n         BE    X2MSGC                  Yes, don't modify MSGCLASS.  WEJ\n         MVI   JCTMCLAS,C'A'           Insert default MSGCLASS.\n         CLI   RIDJBID,C'S'            Owner of INTRDR is a STC ?   WEJ\n         BNE   X2MSGC                     no, check if tso sub      WEJ\n         MVI   JCTINDEV+7,C'+'         Force '+' in last chr of     WEJ\n         B     X2MSGZ                    JCTINDEV and go to X2MSGZ  WEJ\nX2MSGC   DS    0H\n         CLI   RIDJBID,C'T'            Owner of INTRDR is TSO sub?  WEJ\n         BNE   X2MSGZ                  No , go to exit              WEJ\n         MVI   JCTINDEV+7,C'*'         Force '*' in last chr of     WEJ\n         B     X2MSGZ                    JCTINDEV and go to X2MSGZ  WEJ\n*                                        RDRJBID to last byte of    WEJ\n*                                        JCTINDEV                   WEJ\nX2MSGF   DS    0H                      Check for CLASS              WEJ\n         LA    R1,TASKENT              Point to first entry in task WEJ\n         LA    R4,L'TASKENT            Set R4 with length of table  WEJ\n         LA    R5,LASTENT              Point to last entry          WEJ\n*        MVI   JCTMCLAS,C'P'           Default to Dispatch MSGCLASS WEJ\n*       previous instruction commented out to use jesdeck default   WEJ\nX2MSGG   DS    0H                      Check for CLASS              WEJ\n         CLC   JCTJNAME,0(R1)          Is Job name in table         WEJ\n         BE    X2MSGH                  Yes, move table MSGCLASS     WEJ\n         BL    X2MSGZ                  Not in table, go to exit     WEJ\n         BXLE  R1,R4,X2MSGG            Loop to next entry           WEJ\n         B     X2MSGZ                  Not in table, go to exit     WEJ\nX2MSGH   DS    0H                      Entry found                  WEJ\n         MVC   JCTMCLAS,L'ENTNAME(R1)  Move in CLASS from table     WEJ\n         B     X2MSGZ                  Go to exit                   WEJ\n         DROP  R9\nX2MSGZ   DS    0H\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*   Return to caller.                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nX2RET0   DS    0H\n         SLR   R15,R15\nX2RET    DS    0H\n        $RETURN RC=(R15)\nTASKENT  DS    0CL(L'ENTNAME+L'ENTMCLAS)\nENTNAME  DS    0CL8\n         DC    CL8'COMMAND '\nENTMCLAS DS    0CL1\n         DC    C'Z'\n         DC    CL8'INIT    '\n         DC    C'Z'\n         DC    CL8'J       '\n         DC    C'Z'\nLASTENT  DS    0CL(L'ENTNAME+L'ENTMCLAS)\n         DC    CL8'P       '\n         DC    C'Z'\n         EJECT ,\n         LTORG ,\n         $MODEND ,\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NAPJ003": {"ttr": 2306, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x90\\x17/\\x00\\x90\\x17/\\x17\"\\x00\\xac\\x00\\xac\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-06-21T00:00:00", "modifydate": "1990-06-21T17:22:00", "lines": 172, "newlines": 172, "modlines": 0, "user": "FCHLAY"}, "text": "++ USERMOD (NAPJ003) .\n++ VER (Z038) FMID(HJE2221).\n++JCLIN.\n//STEP1    EXEC PGM=IEV90\n//SYSPUNCH DD  DSN=&&PUNCH(J2XIT04),DISP=SHR\n//SYSIN  DD  SYS1.JES2SRC(J2XIT04),DISP=SHR\n//STEP2    EXEC PGM=IEWL,PARM='RENT'\n//SYSPUNCH DD  DSN=&&PUNCH(J2XIT04),DISP=SHR\n//SYSLMOD  DD  DSN=SYS1.JES2LIB,DISP=SHR\n//SYSLIN  DD  *\n  INCLUDE SYSPUNCH(J2XIT04)\n  NAME J2XIT04(R)\n++SRC (J2XIT04) DISTLIB(JES2SRC).\nCMDC     TITLE 'Lighting check for proper command submitter'\n******************************************************************\n*                                                                *\n* Load module: J2XIT04.     Library: Linklist.                   *\n*                           Environment: JES2 main task.         *\n*                                                                *\n*                                                                *\n*      This module contains exit 4 routine to do JES2 command    *\n*   if submitted by TSO, a job or a started task other than      *\n*   one named COMMAND.                                           *\n*                                                                *\n******************************************************************\n         COPY  $HASPGBL\nJ2XIT04  $MODULE $MIT,                                             WEJ C\n               $BUFFER,                                                C\n               $HASPEQU,                                               C\n               $TAB,                                                   C\n               RPL,                                                    C\n               $PCE,                                                   C\n               $JQE,                                                   C\n               $JOE,                                                   C\n               $JCT,                                                   C\n               $IOT,                                                   C\n               $DCT,                                                   C\n               $HCT,                                                   C\n               $MODMAP\nJ2XIT04  AMODE 31\nJ2XIT04  RMODE 24\n         EJECT ,\n         DROP  ,                     Discard USINGs done by $MODULE\nJ2XIT04E $ENTRY BASE=R12\n***********************************************************************\n*                                                                     *\n*    Load module: J2XIT04.    Routine:  J2XIT02E                      *\n*                             Environment:  JES2 main task (HASPRDR). *\n*                                                                     *\n*   I N S T A L L A T I O N      J C L / J E C L   S C A N            *\n*                                                                     *\n*      This exit routine provides installation control of JCL and     *\n*    JECL.  It also passes commands.  At lighting it is used to       *\n*    guarentee that JES2 commands are only submitted by a started     *\n*    task named COMMAND by blanking out the $ if they are not.        *\n*                                                                     *\n*                                                                     *\n*        Registers on entry are:                                      *\n*                                                                     *\n*        Reg. 0:    0 ==> JECL                                        *\n*                   4 ==> JCL                                         *\n*                                                                     *\n*        Reg. 1:    --> A three word parameter list:                  *\n*                   Word 1 - Address of the statement image.          *\n*                                                                     *\n*                   Word 2 - Address of RDWFLAGX in PCE.              *\n*                      X'01' ==> JCL statement                        *\n*                      X'02' ==> Control statement                    *\n*                      X'04' ==> Job statement                        *\n*                      X'08' ==> Continue statement                   *\n*                      X'10' ==> Exit supplied next statement         *\n*                      X'20' ==> Error msg. supplied by exit          *\n*                                                                     *\n*                   Word 3 - ADDRESS of JCTXWRK field in the JCT.     *\n*                                                                     *\n*        Reg. 2-9 --- N/A                                             *\n*                                                                     *\n*        Reg. 10----==> JCT, zero if this is a command                *\n*                                                                     *\n*        Reg. 11----==> HCT                                           *\n*                                                                     *\n*        Reg. 12----- N/A                                             *\n*                                                                     *\n*        Reg. 13----==> HASPRDR PCE                                   *\n*                                                                     *\n*        Reg. 14----- Contains return address                         *\n*                                                                     *\n*        Reg. 15----- Contains entry point address                    *\n*                                                                     *\n*  Return codes:                                                      *\n*                                                                     *\n*       0 - All ok, continue normally.                                *\n*       4 - Same as 0, no more exit routines.                         *\n*       8 - If JECL, change to //* and do not process, if JCL         *\n*           do normal processing                                      *\n*      12 - Cancel job, print the images thus far                     *\n*      16 - Cancel job, queue to purge, no output.                    *\n*                                                                     *\n*                                                                     *\n*  Routine description:                                               *\n*                                                                     *\n*     This routine will perform the following initialization steps:   *\n*                                                                     *\n*     1. If the input is JES2 JECL, and column 3 is $ (a command)     *\n*        and the submitter is not a started task called COMMAND set   *\n*        the return code to 12 and blank out the $                    *\n*                                                                     *\n*     Written by:                                                     *\n*                        Clark Morris, Dept. 5069                     *\n*                        Philips Lighting Company                     *\n*                        Philips Square CN6800                        *\n*                        Somerset, NJ 08875-6800                      *\n*                        United States of America                     *\n*                        201-563-3575 (WEJ)                           *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*          Maintenance   Log                                          *\n*          =================                                          *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n         USING HCT,R11\n         USING PCE,R13\n        $SAVE                          Save registers.\n         LR    R12,R15                 Load base register.\n         SLR   R15,R15                 Set reg 15 to 0\n         LR    R2,R1                   Preserve parm register.\n         EJECT\n***********************************************************************\n*                                                                     *\n*  If our device is an INTRDR, and it's owned by an STC or TSU,       *\n*  default MSGCLASS to 'A'; naturally, any job-card MSGCLASS will     *\n*  override this default.                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         LTR   R0,R0                   JES2 control statement?\n         BNZ   X4MSGD                  No. go to exit\n         L     R1,0(,R2)               Point to the control statement\n         CLI   2(R1),C'$'              Is this a command?\n         BNZ   X4MSGD                  No. go to exit\n         L     R9,PCEDCT               Point at DCT\n         USING DCT,R9\n         CLI   DCTDEVTP,DCTINR         Internal reader?\n         BNE   X4MSGD                  No. Command will be handled\n*                                      based on the init deck\n         CLI   RIDJBID,C'J'            Owner of INTRDR is a JOB ?\n         BE    X4MSGC                  Yes, Go to blank out $\n         CLI   RIDJBID,C'S'            Owner of INTRDR is a STC ?\n         BNE   X4MSGC                  No, go to blank out $\n         CLC   RIDJNAM,=C'COMMAND '    Is task name COMMAND\n         BE    X4MSGD                  Yes, go to exit\nX4MSGC   DS    0H\n         MVI   2(R1),C'?'              Change $ to ?\n         LA    R15,12                  Set reg 15 to 12\n         DROP  R9\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*   Return to caller.                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nX4MSGD   DS    0H\n        $RETURN RC=(R15)\n         EJECT ,\n         LTORG ,\n         $MODEND ,\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NAPJ004": {"ttr": 2310, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x90\\x17/\\x00\\x90#o\\x15\\x02\\x03\\xfa\\x03\\xfa\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xe8\\xf2@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-06-21T00:00:00", "modifydate": "1990-08-24T15:02:00", "lines": 1018, "newlines": 1018, "modlines": 0, "user": "FCHLY2"}, "text": "++ USERMOD (NAPJ004) .\n++ VER (Z038) FMID(HJE2221).\n++JCLIN.\n//STEP1    EXEC PGM=IEV90\n//SYSPUNCH DD  DSN=&&PUNCH(J2XIT05),DISP=SHR\n//SYSIN  DD  SYS1.JES2SRC(J2XIT05),DISP=SHR\n//STEP2    EXEC PGM=IEWL,PARM='NORENT'\n//SYSPUNCH DD  DSN=&&PUNCH(J2XIT05),DISP=SHR\n//SYSLMOD  DD  DSN=SYS1.JES2LIB,DISP=SHR\n//SYSLIN  DD  *\n  INCLUDE SYSPUNCH(J2XIT05)\n  NAME J2XIT05(R)\n++SRC (J2XIT05) DISTLIB(JES2SRC).\n*          DATA SET J2XIT05    AT LEVEL 014 AS OF 10/14/88\n*          DATA SET JESXA5     AT LEVEL 001 AS OF 11/20/86              00001**3\n* THIS SOFTWARE IS DISTRIBUTED \"AS IS\" WITH NO WARRANTIES EITHER        00002**3\n* EXPRESSED OR IMPLIED. NO GUARANTEES ARE ISSUED WITH THIS              00003**3\n* SOFTWARE. BY INSTALLING IT, YOU AGREE NOT TO HOLD ARTHUR              00004**3\n* ANDERSEN & CO. RESPONSIBLE FOR ANYTHING THAT MAY OCCUR BY ITS USE.    00005**3\n*******************************************************************     00006**3\n*                                                                 *     00007**3\n*   EXIT5 IS THE JES EXIT TO OVERRIDE OR MODIFY JES COMMAND       *     00008**3\n* PROCESSING. IT IS BEING USED TO ADD THE $DD (DISPLAY DISKS)     *     00009**3\n* AND $LF (LIST FORMS) COMMANDS, TO VALIDATE THE OPERANDS ON THE  *     00010**3\n* $TPRT COMMAMD, AND TO ADD PASSWORD TO SOME COMMANDS.            *     00011**3\n*                                                                 *     00012**3\n*               R O U T I N E S                                   *     00013**3\n*                                                                 *     00014**3\n*  MAINLINE:                                                      *     00015**3\n*   CHECKS THE COMMAND AGAINST THE TABLE OF COMMANDS. IF IT IS    *     00016**3\n* NOT FOUND, THE RC IS SET TO 0 TO ALLOW JES TO EXECUTE IT        *     00017**3\n* NORMALLY. IF IT IS FOUND, THE ROUTINE ASSOCIATED WITH IT,       *     00018**3\n* IF ANY, IS EXECUTED. IF THE TABLE INDICATES IT HAS A            *     00019**3\n* PASSWORD, THE PASSWORD ROUTINE IS CALLED. CONTROL IS RETURNED   *     00020**3\n* TO JES WITH THE RC SET BY THE CALLED ROUTINES.                  *     00021**3\n*                                                                 *     00022**3\n*                                                                 *     00023**3\n*                                                                 *     00024**3\n*                                                                 *     00025**3\n*  $LFRTNE                                                        *     00026**3\n*                                                                     * 00027**3\n*        THIS ROUTINE CAME FROM ANOTHER FILE ON THE SHARE TAPE.       * 00028**3\n*        IT WAS COPIED IN HERE WITHOUT ANY MODIFICATIONS.             * 00029**3\n*                                                                     * 00030**3\n*        THE $LF COMMAND HAS THE FOLLOWING SYNTAX:                    * 00031**3\n*        $L F,J=JN-NN,R=DEST1-DEST2,Q=CLASSES,L/S                     * 00032**3\n*                                                                     * 00033**3\n*        WHERE:                                                       * 00034**3\n*        J=JN-NN       - LIST FORMS FOR THE SPECIFIED JOB(S)          * 00035**3\n*        R=DEST1-DEST2 - LIST FORMS FOR THE SPECIFIED DESTINATION(S)  * 00036**3\n*        Q=CLASSES       LIST FORMS FOR THE SPECIFIED SYSOUT QUEUE(S) * 00037**3\n*                        UP TO 8 SYSOUT CLASSES MAY BE REQUESTED.     * 00038**3\n*                        DEFAULTS TO ALL SYSOUT CLASSES.              * 00039**3\n*        L/S             USE THE LONG OR SHORT COMMAND RESPONSE       * 00040**3\n*                        DEFAULTS TO SHORT 1 LINE RESPONSE.           * 00041**3\n*                                                                     * 00042**3\n*        WRITTEN BY:                                                  * 00043**3\n*                        JOHN V. HOOPER                               * 00044**3\n*                        NORTHWESTERN BANK                            * 00045**3\n*                        P.O. BOX 310                                 * 00046**3\n*                        NORTH WILKESBORO, N.C. 28674                 * 00047**3\n*                                                                     * 00048**3\n*        THE FOLLOWING RESPONSES WILL BE MADE BY THIS EXIT:           * 00049**3\n*                                                                     * 00050**3\n*        1)  THE HASP900 MESSAGE WILL BE ISSUED FOR EACH OUTPUT       * 00051**3\n*            GROUP WHICH MATCHES THE SELECTION CRITERIA.              * 00052**3\n*                                                                     * 00053**3\n*        $HASP900 JJJJJJJJ JOBNNNN RRRRRRRR Q=X F=FFFF NNNNNNNNN      * 00054**3\n*        $HASP900                  C=CCCC T=TTTT O=OOOO B=B HHHH      * 00055**3\n*                                                                     * 00056**3\n*            A)  JJJJJJJJ   - JOBNAME                                 * 00057**3\n*            B)  JOBNNNN    - JOB NUMBER                              * 00058**3\n*            C)  RRRRRRRR   - ROUTING (DESTINATION)                   * 00059**3\n*            D)  X          - SYSOUT QUEUE                            * 00060**3\n*            E)  FFFF       - SYSOUT FORM                             * 00061**3\n*            F)  NNNNNNNNNN - TOTAL NUMBER OF PRINT LINES FOR GROUP   * 00062**3\n*            G)  CCCC       - SYSOUT FCB                              * 00063**3\n*            H)  TTTT       - SYSOUT UCS                              * 00064**3\n*            I)  OOOO       - SYSOUT OVERLAY                          * 00065**3\n*            J)  B          - 3800 BURST INDICATOR (Y/N)              * 00066**3\n*            K)  HHHH       - HOLD INDICATOR (HOLD/    )              * 00067**3\n*                                                                     * 00068**3\n*                                                                     * 00069**3\n*        2)  THE HASP919 MESSAGE WILL BE ISSUED WHEN NO OUTPUT        * 00070**3\n*            GROUP MATCHES THE SELECTION CRITERIA.                    * 00071**3\n*                                                                     * 00072**3\n*        $HASP919 NO OUTPUT QUEUED                                    * 00073**3\n*                                                                     * 00074**3\n*                                                                     * 00075**3\n*        3)  THE HASP950 MESSAGE WILL BE ISSUED WHEN AN INVALID       * 00076**3\n*            OPERAND KEYWORD OR VALUE IS DETECTED.                    * 00077**3\n*                                                                     * 00078**3\n*        $HASP950 ......... INVALID OPERAND                           * 00079**3\n*                                                                     * 00080**3\n*                                                                     * 00081**3\n*  TSTPWD                                                             * 00082**3\n*   CHECK THE LAST OPERAND STARTS PWD=. IF NOT, ISSUE THE             * 00083**3\n* MESSAGE PLEASE REENTER THE COMMAND WITH THE PASSWORD. SET THE       * 00084**3\n* RC TO 16 FOR JES TO ABEND THE COMMAND. IF IT IS FOUND, COMPARE IT   * 00085**3\n* TO THE ONE IN THE TABLE. IF THEY ARE DIFFERENT, ISSUE THE           * 00086**3\n* MESSAGE INVALID PASSWORD AND SET THE RC TO 16. IF THEY ARE          * 00087**3\n* CORRECT, CLEAR THE PWD= FROM THE COMMAND SO JES WILL NOT SEE IT.    * 00088**3\n* LEAVE THE RETURN CODE UNCHANGED FROM THE PREVIOUS ROUTINE'S CALL.   * 00089**3\n*                                                                     * 00090**3\n*                                                                     * 00091**3\n*                                                                     * 00092**3\n* REGISTER USAGE:                                                     * 00093**3\n*                                                                     * 00094**3\n*     ENTRY       MAINLINE      $DDRTNE  $TPRT   $LFRTNE   TSTPWD     * 00095**3\n* R0             |             |        |MSGLEN |WORK     |MSGLEN     * 00096**3\n*                |             |        |       |         |           * 00097**3\n* R1             |             |        |       |WORK     |           * 00098**3\n*                |             |        |       |         |           * 00099**3\n* R2             |INCR IN TABLE|UCB     |       |WORK     |           * 00100**3\n*                |             |        |       |         |           * 00101**3\n* R3             |END OF TABLE |        |       |CURR OP  |           * 00102**3\n*                |             |        |       |         |           * 00103**3\n* R4             |             |CVT     |       |WORK     |           * 00104**3\n*                |             |        |       |         |           * 00105**3\n* R5  PTR TO CURR|PTR TO CURR)-|--------|-------|---------|---->      * 00106**3\n*     OPERAND PTR| OPERAND   ) |        |       |         |           * 00107**3\n* R6  INCR OF 4  |             |        |PTR TO |INCR     |PTR TO     * 00108**3\n*                |             |        |OP PTR |         |OP PTR     * 00109**3\n* R7  ADDR OF )--|-------------|--------|-------|---------|---->      * 00110**3\n*     LAST OP.)  |             |        |       |         |           * 00111**3\n* R8             | BALR REG ---|--------|-------|---------|---->      * 00112**3\n*                |             |        |       |         |           * 00113**3\n* R9  BASE REG)--|-------------|--------|-------|---------|---->      * 00114**3\n*                |             |        |       |         |           * 00115**3\n* R10            | PTR TO      |        |       |         | PTR TO    * 00116**3\n*                | CMD TABLE   |        |       |         | CMD TABLE * 00117**3\n* R11 HCT)-------|-------------|--------|-------|---------|---->      * 00118**3\n*                |             |        |       |         |           * 00119**3\n* R12            | ADDR OF RTNE|        |       |         |           * 00120**3\n*                | TO CALL     |        |       |         |           * 00121**3\n* R13 PCE)-------|-------------|--------|-------|---------|---->      * 00122**3\n*                |             |        |       |         |           * 00123**3\n* R14 RETURN ADDR|             | WORK   |       | WORK    |           * 00124**3\n*                |             |        |       |         |           * 00125**3\n* R15 ENTRY POINT| RC          |RC=0,8  |RC=0,16|RC=0,8   |RC=UNCHGED * 00126**3\n*                |             |        |       |         | OR 16     * 00127**3\n*                                                                     * 00128**3\n*                                                                     * 00129**3\n*                                                                     * 00130**3\n*  JES FIELDS USED:                                                   * 00131**3\n*                                                                     * 00132**3\n*   COMPNTER HAS FULLWORD POINTERS TO THE OPERANDS IN THE         *     00133**3\n*     COMMAND                                                     *     00134**3\n*   COMMAND CONTAINS THE COMMAND ON ENTRY, EITHER THE COMMAND     *     00135**3\n*     OR THE ERROR MESSAGE ON EXIT                                *     00136**3\n*******************************************************************     00137**3\n         PRINT  ON                                                      00138**3\n         EJECT                                                          00139**3\n*     MACRO TO BUILD ROUTINE AND PASSWORD TABLE                         00140**3\n         MACRO                                                          00141**3\n&NAME    TABENT &CLEN,&CMD,&RTN=,&PWD=                                  00142**3\n.GETRTN  AIF   ('&RTN' EQ '').NORTN                                     00143**3\n&NAME    DC    A(&RTN)            ADDRESS OF ROUTINE                    00144**3\n         AGO   .GETPWD                                                  00145**3\n.NORTN   DC    A(0)               NO ROUTINE                            00146**3\n.GETPWD  ANOP                                                           00147**3\n         DC    X'0&CLEN'          LENGTH OF CMD                         00148**3\n         AIF   ('&PWD' EQ '').NOPWD                                     00149**3\n         DC    X'80'              PWD ON                                00150**3\n         DC    CL4'&PWD'          PASSWORD                              00151**3\n         AGO   .CMD                                                     00152**3\n.NOPWD   DC    X'00'              PWD OFF                               00153**3\n         DC    CL4' '             NO PASSWORD                           00154**3\n.CMD     ANOP                                                           00155**3\n         DC    CL8'&CMD'          COMMAND                               00156**3\n         MEND                                                           00157**3\n         EJECT                                                          00158**3\n         EJECT                                                          00159**3\n         COPY  $HASPGBL                                                 00160**3\nJ2XIT05  $MODULE CVT,UCB,$BUFFER,$PCE,$JQE,$LRC,$JOE,$COMWORK,$JCT,    X00161**7\n               $CMB,$HCT,$MIT,$HASPEQU,RPL,                            X00162**3\n               $CAT,RESPA,$TRP,$RAT,$JOT,$JOE,                         X00163**3\n               SYSP=(GEN,GEN,DATA,GEN,GEN)                              00164**3\nJ2XIT05  AMODE 31                                                       00165*14\nJ2XIT05  RMODE 24                                                       00166*14\n         PRINT  ON                                                      00167**3\n         TITLE 'EXIT 5 FOR $LF COMMAND AND OTHERS '                     00168**5\n         EJECT                                                          00169**3\nJ2XIT05E $ENTRY BASE=R9                                                 00170**6\n         $SAVE                                                          00171**3\n         LR    R9,R15                                                   00172**3\n         SPACE 1                                                        00173**3\n*        $AMODE 31                                                      00174**4\n         SPACE 1                                                        00175**3\n         B     MAIN                                                     00176**3\n         EJECT                                                          00177**3\nENT1      DS    1A                                                      00178**3\n          DC    A(0)                                                    00179**3\n          DC    F'0'                                                    00180**3\n          DC    X'07'                                                   00181**3\n          DC    X'00'                                                   00182**3\n          DC    H'11'                                                   00183**3\n          DC    CL11' '                                                 00184**3\n         SPACE 2                                                        00185**3\nENT2      DS    1A                                                      00186**3\n          DC    A(0)                                                    00187**3\n          DC    F'0'                                                    00188**3\n          DC    X'12'                                                   00189**3\n          DC    X'00'                                                   00190**3\n          DC    H'18'                                                   00191**3\n         EJECT                                                          00192**3\nMAINRTNE DC    C'MAIN ROUTINE'                                          00193**3\n         SPACE  3                                                       00194**3\nMAIN     DS    0H                                                       00195**3\n         XR    R12,R12            CLEAR LENGTH REG                      00196**3\n*                                 SET UP FOR BXLE                       00197**3\n         LA    R3,ENDTBL-4        COMPARE TO END OF TABLE               00198**3\n         LA    R2,20              INCR OF TABLE ENTRY                   00199**3\n         LA    R10,CMDTBL         START OF TABLE                        00200**3\n         SPACE 3                                                        00201**3\nFNDCMD   IC    R12,4(R10)         GET LENGTH TO COMPARE-1               00202**3\n         EX    R12,CMDCMP         EXECUTE CLC BETWEEN CMD AND TABLE     00203**3\n         BNE   FNDCMDX            NOT IT, CHECK NEXT ENTRY              00204**3\n         SPACE 1                                                        00205**3\n*                                 THIS IS THE CMD, CHECK FOR PWD        00206**3\n         XR    R15,R15            INITIALIZE RC                         00207**3\n         CLI   5(R10),X'80'       PWD FLAG?                             00208**3\n         BNE   CALLRTN            NO, CALL ROUTINE                      00209**3\n         BAL   R8,TSTPWD          CALL PWD ROUTINE                      00210**3\n         LTR   R15,R15            PWD OK?                               00211**3\n         BNZ   FINISH             NO, SKIP ROUINE CALL                  00212**3\nCALLRTN  L     R12,0(R10)         GET RTN ADDR AND PWD FLAG             00213**3\n         LTR   R12,R12            ANY RTN?                              00214**3\n         BZ    FINISH             NO, ALL DONE                          00215**3\n         SPACE 1                                                        00216**3\n         BALR  R8,R12             BRANCH TO ROUTINE IN TABLE            00217**3\n         SPACE 2                                                        00218**3\n         B     FINISH             DONE WITH CMD                         00219**3\n         SPACE 2                                                        00220**3\n*                                 NOT THIS TABLE ENTRY                  00221**3\nFNDCMDX  DS    0H                                                       00222**3\n         BXLE  R10,R2,FNDCMD      CHECK NEXT ENTRY                      00223**3\n         SPACE 3                                                        00224**3\n*                                 FALLEN THROUGH - NOT IN TABLE         00225**3\nENDMAIN  DS    0H                                                       00226**3\n         LA    R15,0              PROCESS NORMALLY                      00227**3\n         SPACE  3                                                       00228**3\nFINISH   $RETURN  RC=(R15)        RETURN TO JES2.                   DDC 00229**3\n         EJECT                                                          00230**3\nCMDCMP   CLC   COMMAND+1(1),10(R10) EXECUTE FORM OF CLC                 00231**3\n         SPACE 3                                                        00232**3\n*                                 COMMAND AND PASSWORD TABLE            00233**3\n*        FORMAT OF TABENT MACRO:                                        00234**3\n*        TABENT COMMAND LENGTH-1(EXCLUDING $),                          00235**3\n*        COMMAND (EXCLUDING $)                                          00236**3\n*        RTN=ROUTINE NAME, IF ANY,                                      00237**3\n*        PWD=PASSWORD, IF ANY                                           00238**3\nCMDTBL   DS    0F                                                       00239**3\n*        TABENT 1,DD,RTN=$DDRTNE                                        00240**4\n         TABENT 1,LF,RTN=$LFRTNE                                        00241**3\n*        TABENT 1,TI,PWD=GUESS                                          00242**9\nENDTBL   DS  0H                                                         00243**3\n         SPACE 3                                                        00244**3\n         LTORG                                                          00245**3\n         EJECT                                                          00246**3\n*********************************************************************** 00247**3\n*                                                                     * 00248**3\n*   TSTPWD:                                                           * 00249**3\n*                                                                     * 00250**3\n* CHECK IF PASSWORD CODED, AND IF IT IS CORRECT. IF NOT, ISSUE        * 00251**3\n* THE PASSWORD MISSING OR INVALID PASSWORD MESSAGE AND SET THE        * 00252**3\n* RC TO 16 SO COMMAND NOT EXECUTED.                                   * 00253**3\n*                                                                     * 00254**3\n*********************************************************************** 00255**3\nTSTPWD   DS    0H                                                       00256**3\n         L     R7,0(R7)           POINT TO LAST OPERAND POINTER         00257**3\n         CLC   0(4,R7),=C'PWD='   IS THE LAST OPERAND PWD=?             00258**3\n         BNE   PWDNONE            NO, GO TO PASSWORD MISSING RTN        00259**3\n         SPACE 3                                                        00260**3\n         CLC   4(4,R7),6(R10)     COMPARE PWD TO TABLE PASSWORD         00261**3\n         BE    PWDCLR             CORRECT, CLEAR IN CMD, PASS TO IBM    00262**3\n         SPACE 2                                                        00263**3\n         MVC   COMMAND(16),PWDWRONG SET UP PASSWORD WRONG MESSAGE       00264**3\n         L     R0,=F'16'          AND ITS LENGTH                        00265**3\n         $STORE R0                SAVE FOR $RETURN                      00266**3\n         L     R15,=F'16'         SET UP RC TO ABEND CMD                00267**3\n         B     PWDEND             AND EXIT ROUTINE                      00268**3\n         SPACE 3                                                        00269**3\nPWDCLR   DS    0H                 CLEAR PWD FROM CMD                    00270**3\n         MVC   4(4,R7),=C'    '   BLANK OUT PASSWORD                    00271**3\n         SPACE 1                                                        00272**3\n         LA    R6,COMPNTER        POINT TO OPERAND POINTER              00273**3\n         SPACE 1                                                        00274**3\nCHECKNXT LR    R5,R6              SAVE LAST OPERAND LOOKED AT           00275**3\n         LA    R6,4(R6)           POINT TO NEXT OPERAND POINTER         00276**3\n         C     R7,0(R6)           IS THIS THE LAST OPERAND POINTER?     00277**3\n         BNE   CHECKNXT           NO, CHECK ANOTHER                     00278**3\n*                                 YES, THEN R5 POINTS TO IT             00279**3\n         SPACE 2                                                        00280**3\n         LR    R7,R5              PUT IN LAST OPERAND POINTER           00281**3\n         $STORE R7 SAVE FOR $RETURN                                     00282**3\n         B     PWDEND             LEAVE ROUTINE                         00283**3\n         SPACE 3                                                        00284**3\nPWDNONE  MVC   COMMAND(44),PWDMISS PUT IN MISSING PWD MSG               00285**3\n         L     R0,=F'44'          AND LENGTH                            00286**3\n         $STORE R0                SAVE FOR $RETURN                      00287**3\n         L     R15,=F'16'         RC TO ABEND CMD                       00288**3\n         B     PWDEND             LEAVE ROUTINE                         00289**3\n         SPACE 3                                                        00290**3\nPWDEND   BR    R8                 RETURN                                00291**3\n         LTORG                                                          00292**3\n         EJECT                                                          00293**3\n         EJECT                                                          00294**3\n$LFSAVE  DS    F                                                        00295**3\n$LFBEG   DC    C'$LF ROUTINE BEGINNING'                                 00296**3\n$LFRTNE  DS    0H                                                       00297**3\n         ST    R8,$LFSAVE                                               00298**3\n         EJECT                                                          00299**3\n*********************************************************************** 00300**3\n*                                                                     * 00301**3\n*        CLEAR THE COMMAND WORK AREA                                  * 00302**3\n*                                                                     * 00303**3\n*********************************************************************** 00304**3\n         SPACE 1                                                        00305**3\n         XC    $LFWORK(WORKLEN),$LFWORK CLEAR WORK AREA                 00306**3\n         SPACE 3                                                        00307**3\n*********************************************************************** 00308**3\n*                                                                     * 00309**3\n*        GET THE DEFAULT ROUTE CODE FOR $LF                           * 00310**3\n*                                                                     * 00311**3\n*********************************************************************** 00312**3\nGETROUT  L     R1,COMJROUT         LOAD COMMAND ROUTE CODE              00313**3\n         TM    COMFLAG,CMBFLAGW    IS THIS A RJE                        00314**3\n         BNO   GETROUTE            NO, BRANCH                           00315**3\n         CLM   R1,B'1100',$OWNNODE IS THIS OUR NODE AND RJE             00316**3\n         BNE   GETROUTE            NO, BRANCH                           00317**3\n         LH    R1,COMJRMT          LOAD THE REMOTE NUMBER               00318**3\n         BCTR  R1,0                MAKE NUMBER RELATIVE TO ZERO         00319**3\n         MH    R1,=Y(RATTLE)       MULTIPLY BY RAT LENGTH FOR OFFSET    00320**3\n         AL    R1,$RATABLE         POINT TO RAT ENTRY FOR THIS RJE      00321**3\n         L     R1,RATROUTE-RAT(,R1) PICK UP PROPER ROUTINE              00322**3\nGETROUTE ST    R1,LOWROUT          SET DEFAULT LOW ROUTE CODE           00323**3\n         ST    R1,HIGHROUT         AND HIGH ROUTE CODE                  00324**3\n*********************************************************************** 00325**3\n*                                                                     * 00326**3\n*        GET THE DEFAULT JOB RANGE FOR $LF                            * 00327**3\n*                                                                     * 00328**3\n*********************************************************************** 00329**3\nGETJRNG  SLR   R1,R1               SET DEFAULT LOW JOB NUMBER           00330**3\n         STH   R1,LOWJOB           SAVE LOW JOB NUMBER                  00331**3\n         LH    R1,$NUMJBNO         SET DEFAULT HIGH JOB NUMBER          00332**3\n         STH   R1,HIGHJOB          SAVE HIGH JOB NUMBER                 00333**3\n         MVI   JTYPE,C'*'          SET TO DISPLAY ALL JOB TYPES         00334**3\n*********************************************************************** 00335**3\n*                                                                     * 00336**3\n*        SET THE DEFAULT JOB OUTPUT CLASS AND CMD FORMAT              * 00337**3\n*                                                                     * 00338**3\n*********************************************************************** 00339**3\n         MVI   OUTCLASS,C'*'       SET TO ALL CLASSES                   00340**3\n         MVI   FORMAT,C'S'         SET TO SHORT FORM OF COMMAND         00341**3\n         MVI   MISCSW,X'00'        ZERO THE MISCELLANEOUS SWITCHES      00342**3\n         MVC   SAVEFORM,=CL8' '    BLANK OUT SAVE FORM                  00343**8\n         MVC   NAMEPRFX,=CL8' '    BLANK OUT NAME PREFIX                00344**9\n         EJECT                                                          00345**3\n*********************************************************************** 00346**3\n*                                                                     * 00347**3\n*        EXAMINE THE COMMAND OPERANDS                                 * 00348**3\n*                                                                     * 00349**3\n*********************************************************************** 00350**3\nCLFNSPEC BXH   R5,R6,CLFOK         IF NO MORE EXIT                      00351**3\n         L     R1,0(,R5)           POINT TO OPERAND                     00352**3\n         CLC   0(2,R1),=C'F='      FORM   SELECTION?                    00353**8\n         BE    CLFF                YES, BRANCH                          00354**8\n         CLC   0(2,R1),=C'J='      JOB(S) SELECTION?                    00355**8\n         BE    CLFJ                YES, BRANCH                          00356**8\n         CLC   0(2,R1),=C'R='      RJE(S) SELECTION?                    00357**3\n         BE    CLFR                YES, BRANCH                          00358**3\n         CLC   0(2,R1),=C'Q='      SYSOUT CLASS SELECTION?              00359**3\n         BE    CLFQ                YES, BRANCH                          00360**3\n         CLC   0(2,R1),=C'L '      LONG FORM OF COMMAND DESIRED?        00361**3\n         BE    CLFORM              YES, BRANCH                          00362**3\n         CLC   0(2,R1),=C'L,'      LONG FORM OF COMMAND DESIRED?        00363**3\n         BE    CLFORM              YES, BRANCH                          00364**3\n         CLC   0(2,R1),=C'S '      SHORT FORM OF COMMAND DESIRED?       00365**3\n         BE    CLFORM              YES, BRANCH                          00366**3\n         CLC   0(2,R1),=C'S,'      SHORT FORM OF COMMAND DESIRED?       00367**3\n         BE    CLFORM              YES, BRANCH                          00368**3\n         B     BADOPRND            ERROR EXIT                           00369**3\n         EJECT                                                          00370**3\n*********************************************************************** 00371**3\n*                                                                     * 00372**3\n*        PROCESS THE JOB (J) RANGE OR NAME PREFIX SUBPARAMETER        * 00373**9\n*                                                                     * 00374**3\n*********************************************************************** 00375**3\n         SPACE 1                                                        00376**3\nCLFJ     DS    0H                                                       00377**3\n         L     R1,0(R5)            POINT TO OPERAND                     00378**3\n         SLR   R15,R15             SET LENGTH TO ZERO                   00379**3\n         CLI   2(R1),C'*'          IS IT *JOB-NAME PREFIX               00380*13\n         BE    CLFJ5                                                    00381**9\n         LA    R1,3(R1)            INDEX PAST 'J=J'  ETC                00382**9\n         LR    R14,R1              SAVE START OF OPERAND                00383**3\n         MVI   LOWJOB,X'FF'        SET START OF PROCESSING INDICATOR    00384**3\nCLFJ1    CLI   0(R1),C'-'          END OF FIRST OPERAND                 00385**3\n         BE    CLFJ2               YES, BRANCH                          00386**3\n         CLI   0(R1),C','          END OF ALL OPERANDS                  00387**3\n         BE    CLFJ2               YES, BRANCH                          00388**3\n         CLI   0(R1),C' '          END OF ALL OPERANDS                  00389**3\n         BE    CLFJ2               YES, BRANCH                          00390**3\n         CLI   0(R1),C'0'          NUMERIC OPERAND                      00391**3\n         BL    BADOPRND            NO, ERROR                            00392**3\n         CLI   0(R1),C'9'          NUMERIC OPERAND                      00393**3\n         BH    BADOPRND            NO, ERROR                            00394**3\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR JOB NUMBER    00395**3\n         LA    R15,1(,R15)         ADD 1 TO OPERAND LENGTH              00396**3\n         B     CLFJ1               LOOP UNTIL DONE                      00397**3\nCLFJ2    LTR   R15,R15             TEST LENGTH                          00398**3\n         BZ    BADOPRND            ZERO, ERROR                          00399**3\n         BCTR  R15,0               MAKE MACHINE LENGTH                  00400**3\n         EX    R15,PACKJOB         PACK JOB NUMBER                      00401**3\n         CVB   R15,$DOUBLE         CONVERT TO BINARY                    00402**3\n         C     R15,=F'20000'       SEE IF NUMBER TOO LARGE              00403**3\n         BH    BADOPRND            YES, ERROR                           00404**3\n         CLI   0(R1),C'-'          LOW JOB OF RANGE                     00405**3\n         BE    CLFJ3               YES, BRANCH                          00406**3\n         STH   R15,HIGHJOB         SAVE HIGH JOB NUMBER                 00407**3\n         CLI   LOWJOB,X'FF'        IS THIS THE FIRST JOB NUMBER         00408**3\n         BNE   CLFJ4               NO, ALL DONE WITH NUMBER, BRANCH     00409**3\n         STH   R15,LOWJOB          SAVE LOW JOB NUMBER                  00410**3\n         B     CLFJ4               ALL DONE WITH NUMBER, BRANCH         00411**3\nCLFJ3    CLI   LOWJOB,X'FF'        HAS LOW JOB NUMBER ALREADY BEEN PROC 00412**3\n         BNE   BADOPRND            YES, ERROR                           00413**3\n         STH   R15,LOWJOB          SAVE LOW JOB NUMBER                  00414**3\n         LA    R1,1(,R1)           INCREMENT PAST '-'                   00415**3\n         LR    R14,R1              SAVE START OF OPERAND                00416**3\n         SLR   R15,R15             RESET LENGTH TO ZERO                 00417**3\n         B     CLFJ1               LOOP FOR NEXT NUMBER OF RANGE        00418**3\nPACKJOB  PACK  $DOUBLE,0(0,R14)    PACK JOB NUMBER                      00419**3\n         SPACE 1                                                        00420**3\nCLFJ4    L     R15,0(,R5)          POINT TO OPERAND                     00421**3\n         MVC   JTYPE,2(R15)        SET JOB TYPE                         00422**3\n         CLI   2(R15),C'J'         JOB?                                 00423**3\n         BE    CLFNSPEC            YES, GET NEXT SPECIFICATION          00424**3\n         CLI   2(R15),C'S'         STC?                                 00425**3\n         BE    CLFNSPEC            YES, GET NEXT SPECIFICATION          00426**3\n         CLI   2(R15),C'T'         TSU?                                 00427**3\n         BNE   BADOPRND            NO, ERROR                            00428**3\n         B     CLFNSPEC            GET NEXT SPECIFICATION               00429**3\nCLFJ5    DS    0H                  ROUTINE FOR JOB NAME SEARCH          00430**9\n         CLI   3(R1),C','          IS THE CHARACTER A COMMA             00431**9\n         BE    CLFJ9               YES, GO MOVE THE ENTRY               00432**9\n         CLI   3(R1),C' '          IS THE CHARACTER A SPACE             00433**9\n         BE    CLFJ9               YES, GO MOVE THE ENTRY               00434**9\n         CLI   3(R1),C'A'          IS THE CHARACTER AN A                00435**9\n         BL    CLFJ6               LESS THAN, GO CHECK NATIONAL         00436**9\n         CLI   3(R1),C'I'          IS THE CHARACTER AN I                00437**9\n         BNH   CLFJ7               EQUAL TO, OR LESS THAN, GO INCR      00438**9\n         CLI   3(R1),C'J'          IS THE CHARACTER AN J                00439**9\n         BL    BADOPRND            LESS THAN, ERROR                     00440**9\n         CLI   3(R1),C'R'          IS THE CHARACTER AN R                00441**9\n         BNH   CLFJ7               EQUAL TO, OR LESS THAN, GO INCR      00442**9\n         CLI   3(R1),C'S'          IS THE CHARACTER AN S                00443**9\n         BL    BADOPRND            LESS THAN, ERROR                     00444**9\n         CLI   3(R1),C'Z'          IS THE CHARACTER A Z                 00445**9\n         BNH   CLFJ7               EQUAL TO, OR LESS THAN, GO INCR      00446**9\n         CLI   3(R1),C'0'          IS THE CHARACTER A 0                 00447**9\n         BL    BADOPRND            LESS THAN, ERROR                     00448**9\n         CLI   3(R1),C'9'          IS THE CHARACTER A 9                 00449**9\n         BNH   CLFJ7               EQUAL TO, OR LESS THAN, GO INCR      00450**9\n         B     BADOPRND            ERROR                                00451**9\nCLFJ6    DS    0H                                                       00452**9\n         CLI   3(R1),C'@'          IS THE CHARACTER AN AT SIGN          00453**9\n         BE    CLFJ7               EQUAL, GO INCR                       00454**9\n         CLI   3(R1),C'#'          IS THE CHARACTER A POUND SIGN        00455**9\n         BE    CLFJ7               EQUAL, GO INCR                       00456**9\n         CLI   3(R1),C'$'          IS THE CHARACTER A DOLLAR SIGN       00457**9\n         BNE   BADOPRND            ERROR                                00458**9\nCLFJ7    DS    0H                                                       00459**9\n         LA    R1,1(,R1)           INCREMENT POINTER                    00460**9\n         LA    R15,1(,R15)         INCREMENT SIZE FIELD                 00461**9\n         CH    R15,=H'8'           IS FIELD 8                           00462*11\n         BNH   CLFJ5               EQUAL OR LESS, GO TO LOOP            00463**9\n         B     BADOPRND            ERROR                                00464**9\nCLFJ9    DS    0H                                                       00465**9\n         LTR   R15,R15             TEST LENGTH                          00466*13\n         BZ    BADOPRND            ZERO, ERROR                          00467*13\n         L     R14,0(,R5)          POINT TO BEGINNING OF OPERAND        00468**9\n         CLI   3(R14),C'0'         IS FIRST CHR NUMERIC                 00469*13\n         BNL   BADOPRND            YES, ERROR                           00470*13\n         BCTR  R15,R0              SET MACHINE LENGTH                   00471**9\n         STC   R15,CMPRSIZ         SAVE COMPARE SIZE                    00472**9\n         EX    R15,MOVEPRFX        EXECUTE MOVE OF NAME PREFIX          00473**9\n         LA    R1,3(,R1)           POINT TO DELIMITER                   00474**9\n         B     CLFNSPEC            GET NEXT SPECIFICATION               00475**9\nMOVEPRFX MVC   NAMEPRFX(0),3(R14)  MOVE NAME PREFIX                     00476**9\n         EJECT                                                          00477**3\n*********************************************************************** 00478**3\n*                                                                     * 00479**3\n*        PROCESS THE ROUTE CODE (R) SUBPARAMETER                      * 00480**3\n*                                                                     * 00481**3\n*                                                                     * 00482**3\n*                                                                     * 00483**3\n*    RANGES ALLOWED  -    ONLY ASCENDING RANGES ARE PERMITTED         * 00484**3\n*    --------------                                                   * 00485**3\n*    NNNNNRNNNN (-RMMMM)                                              * 00486**3\n*    NNNN.RNNNN (-RMMMM)                                              * 00487**3\n*    NAME.RNNNN (-RMMMM)                                              * 00488**3\n*                      -  RANGE OF REMOTES AT A GIVEN NODE            * 00489**3\n*                        (NAME IS 8-BYTE EBCDIC FROM A DESTID CARD    * 00490**3\n*    NNNNN(-NMMMM)     -  RANGE OF ALL REMOTES/UNITS AT GIVEN NODE    * 00491**3\n*    UNNNN(-UMMMM)     -  RANGE OF UNITS AT THE LOCAL NODE ONLY       * 00492**3\n*    RNNNN(-RMMMM)     -  RANGE OF REMOTES AT THE LOCAL NODE ONLY     * 00493**3\n*    NAME1(-NAME2)     -  AS ANY ONE OF THE ABOVE, BUT NO OTHERS      * 00494**3\n*    LOCAL             -  ALL SPECIAL LOCAL                           * 00495**3\n*                                                                     * 00496**3\n*********************************************************************** 00497**3\n         SPACE 1                                                        00498**3\nCLFR     L     R3,0(,R5)           POINT TO OPERAND                     00499**3\n         LA    R3,2(,R3)           INCREMENT PAST 'R='                  00500**3\n         SLR   R1,R1               SET ZERO LENGTH                      00501**3\n         LR    R4,R3               SAVE START OF OPERAND                00502**3\n         MVC   DEST1P1,=CL10' '    BLANK DEST1 PART1                    00503**3\n         MVC   DEST1P2,=CL10' '    BLANK DEST1 PART2                    00504**3\n         MVC   DEST2P1,=CL10' '    BLANK DEST2 PART1                    00505**3\nCLFRLOOP CLI   0(R4),C'-'          END OF FIRST OPERAND                 00506**3\n         BE    CLFR2               YES, BRANCH                          00507**3\n         CLI   0(R4),C','          END OF LAST OPERAND                  00508**3\n         BE    CLFR2               YES, BRANCH                          00509**3\n         CLI   0(R4),C' '          END OF LAST OPERAND                  00510**3\n         BE    CLFR2               YES, BRANCH                          00511**3\n         CLI   0(R4),C'.'          TWO PART DESTINATION                 00512**3\n         BE    CLFR1               YES, BRANCH                          00513**3\n         LA    R4,1(,R4)           INCREMENT TO NEXT CHAR OF DEST       00514**3\n         LA    R1,1(,R1)           ADD 1 TO LENGTH                      00515**3\n         B     CLFRLOOP            LOOP UNTIL DONE                      00516**3\nCLFR1    OI    MISCSW,TWOPART      SET TWO PART DEST INDICATION         00517**3\n         CLI   DEST1P1,C' '        HAS FIRST ALREADY BEEN SPECIFIED     00518**3\n         BNE   BADOPRND            YES, ERROR                           00519**3\n         B     CLFR2               GO PROCESS DEST FIELD                00520**3\nCLFR2    LTR   R1,R1               CHECK LENGTH OF DEST                 00521**3\n         BZ    BADOPRND            ZERO, ERROR                          00522**3\n         CH    R1,=H'10'           CHECK LENGTH OF DEST                 00523**3\n         BH    BADOPRND            GREATER THAN 10, ERROR               00524**3\n         BCTR  R1,0                MAKE MACHINE LENGTH                  00525**3\n         CLI   DEST1P1,C' '        HAS PART1 ALREADY BEEN SPECIFIED     00526**3\n         BNE   CLFR3               YES, BRANCH                          00527**3\n         EX    R1,MDEST1P1         MOVE DEST1 PART1                     00528**3\n         B     CLFR5               GET OUT                              00529**3\nCLFR3    TM    MISCSW,TWOPART      SEE IF TWO PART DEST INDICATION      00530**3\n         BZ    CLFR4               NO, BRANCH                           00531**3\n         CLI   DEST1P2,C' '        SEE IF PART2 ALREADY BEEN SPECIFIED  00532**3\n         BNE   CLFR4               YES, THIS IS THE SECOND DEST         00533**3\n         EX    R1,MDEST1P2         MOVE DEST1 PART2                     00534**3\n         B     CLFR5               GET OUT                              00535**3\nCLFR4    CLI   DEST2P1,C' '        SEE IF DEST2 ALREADY BEEN SPECIFIED  00536**3\n         BNE   BADOPRND            YES, ERROR                           00537**3\n         EX    R1,MDEST2P1         MOVE DEST2 PART1                     00538**3\n         B     CLFR5               GET OUT                              00539**3\nMDEST1P1 MVC   DEST1P1(0),0(R3)    MOVE DEST1 PART1                     00540**3\nMDEST1P2 MVC   DEST1P2(0),0(R3)    MOVE DEST1 PART2                     00541**3\nMDEST2P1 MVC   DEST2P1(0),0(R3)    MOVE DEST2 PART1                     00542**3\nCLFR5    CLI   0(R4),C'-'          SEE IF DESTINATION RANGE SPECIFIED   00543**3\n         BE    CLFR6               YES, BRANCH                          00544**3\n         CLI   0(R4),C'.'          SEE IF TWO PART DEST SPECIFIED       00545**3\n         BE    CLFR6               YES, BRANCH                          00546**3\n         B     CLFR10              GO CONVERT DEST TO ROUTE CODES       00547**3\nCLFR6    LA    R4,1(,R4)           INCREMENT PAST '-' OR '.'            00548**3\n         LR    R3,R4               SAVE START ADDRESS                   00549**3\n         SLR   R1,R1               RESET LENGTH TO ZERO                 00550**3\n         B     CLFRLOOP            LOOP FOR NEXT DESTINATION            00551**3\nCLFR10   DS    0H                                                       00552**3\n         MVC   COMDWORK(2),COMJNOD SET DEFAULT NODE                     00553**3\n         $DEST DEST1P1,COMDWORK,LEN=10 CONVERT DEST1 PART1              00554**3\n         BZ    BADOPRND            BAD DEST, ERROR                      00555**3\n         ST    R1,LOWROUT          SAVE ROUTE CODE                      00556**3\n         CLI   DEST1P2,C' '        CHECK IF TWO PART DEST               00557**3\n         BE    CLFR12              NO, BRANCH                           00558**3\nCLFR11   CLM   R1,B'0011',$ZEROES  SEE IF NODAL DESTINATION ONLY        00559**3\n         BNE   BADOPRND            NO, ERROR                            00560**3\n         CLM   R1,B'1100',$ZEROES  SEE IF NODE NUMBER SET               00561**3\n         BE    BADOPRND            NO, ERROR                            00562**3\n         ST    R1,COMDWORK         SET DEFAULT NODE FOR SECOND PART     00563**3\n         $DEST DEST1P2,COMDWORK,LEN=10 CONVERT DEST1 PART1              00564**3\n         BZ    BADOPRND            BAD DEST, ERROR                      00565**3\n         ST    R1,LOWROUT          SAVE ROUTE CODE                      00566**3\n         CLM   R1,B'1100',COMDWORK MAKE SURE NODE DEFAULTED             00567**3\n         BNE   BADOPRND            NO, ERROR                            00568**3\nCLFR12   MVC   HIGHROUT,LOWROUT    SET DEST RANGE TO EQUAL VALUES       00569**3\n         CLI   DEST2P1,C' '        WAS DEST RANGE SPECIFIED             00570**3\n         BE    CLFR13              NO, BRANCH                           00571**3\n         $DEST DEST2P1,COMDWORK,LEN=10 CONVERT DEST2 PART1              00572**3\n         BZ    BADOPRND            BAD DEST, ERROR                      00573**3\n         ST    R1,HIGHROUT         SAVE ROUTE CODE                      00574**3\nCLFR13   CLC   HIGHROUT,LOWROUT    CHECK FOR ASCENDING RANGE            00575**3\n         BL    BADOPRND            NO, ERROR                            00576**3\n         B     CLFNSPEC            LOOP TO NEXT SPECIFICATION           00577**3\n         EJECT                                                          00578**3\n*********************************************************************** 00579**3\n*                                                                     * 00580**3\n*        PROCESS THE SYSOUT CLASS (Q) SUBPARAMETER                    * 00581**3\n*                                                                     * 00582**3\n*********************************************************************** 00583**3\n         SPACE 1                                                        00584**3\nCLFQ     L     R1,0(,R5)           POINT TO OPERAND                     00585**3\n         LA    R1,2(,R1)           INCREMENT PAST 'Q='                  00586**3\n         LR    R14,R1              SAVE CLASS STRING ADDRESS            00587**3\n         SLR   R15,R15             SET LENGTH TO ZERO                   00588**3\nCLFQ1    CLI   0(R1),C' '          END OF CLASS STRING                  00589**3\n         BE    CLFQ2               YES, BRANCH                          00590**3\n         CLI   0(R1),C','          END OF CLASS STRING                  00591**3\n         BE    CLFQ2               YES, BRANCH                          00592**3\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF CLASS      00593**3\n         LA    R15,1(,R15)         ADD 1 TO LENGTH                      00594**3\n         B     CLFQ1               LOOP                                 00595**3\nCLFQ2    STC   R15,NUMCLASS        SAVE LENGTH                          00596**3\n         LTR   R15,R15             TEST LENGTH                          00597**3\n         BZ    BADOPRND            ZERO, ERROR                          00598**3\n         CH    R15,=H'8'           SEE IF GT 8                          00599**3\n         BH    BADOPRND            GREATER THAN 8, ERROR                00600**3\n         BCTR  R15,0               MAKE MACHINE LENGTH                  00601**3\n         EX    R15,MOVECLAS        SAVE CLASS STRING                    00602**3\n         EX    R15,TRTCLASS        TEST CLASSES                         00603**3\n         BNZ   BADOPRND            NOT VALID, ERROR                     00604**3\n         B     CLFNSPEC            GET NEXT SPECIFICATION               00605**3\nMOVECLAS MVC   OUTCLASS(0),0(R14)  MOVE SYSOUT CLASSES TO SAVE          00606**3\nTRTCLASS TRT   OUTCLASS(0),CLASSTBL TEST SYSOUT CLASSES                 00607**3\nCLASSTBL DC    256X'01'            VALID SYSOUT CLASSES                 00608**3\n         ORG   CLASSTBL+C'A'                                            00609**3\n         DC    9X'00'              CLASS A-I                            00610**3\n         ORG   CLASSTBL+C'J'                                            00611**3\n         DC    9X'00'              CLASS J-R                            00612**3\n         ORG   CLASSTBL+C'S'                                            00613**3\n         DC    8X'00'              CLASS S-Z                            00614**3\n         ORG   CLASSTBL+C'0'                                            00615**3\n         DC    10X'00'             CLASS 0-9                            00616**3\n         DC    6X'01'                                                   00617**3\n         EJECT                                                          00618**3\n*********************************************************************** 00619**8\n*                                                                     * 00620**8\n*        PROCESS THE FORMS (F=)  SUBPARAMETER                         * 00621**8\n*                                                                     * 00622**8\n*********************************************************************** 00623**8\n         SPACE 1                                                        00624**8\nCLFF     L     R1,0(,R5)           POINT TO OPERAND                     00625**8\n         LA    R1,2(,R1)           INCREMENT PAST 'F='                  00626**8\n         LR    R14,R1              SAVE FORMS STRING ADDRESS            00627**8\n         SLR   R15,R15             SET LENGTH TO ZERO                   00628**8\nCLFF1    CLI   0(R1),C' '          END OF CLASS STRING                  00629**8\n         BE    CLFF2               YES, BRANCH                          00630**8\n         CLI   0(R1),C','          END OF CLASS STRING                  00631**8\n         BE    CLFF2               YES, BRANCH                          00632**8\n         LA    R1,1(,R1)           INCREMENT TO NEXT CHAR OF CLASS      00633**8\n         LA    R15,1(,R15)         ADD 1 TO LENGTH                      00634**8\n         B     CLFF1               LOOP                                 00635**8\nCLFF2    DS    0H                  SAVE LENGTH                          00636**8\n         LTR   R15,R15             TEST LENGTH                          00637**8\n         BZ    BADOPRND            ZERO, ERROR                          00638**8\n         CH    R15,=H'8'           SEE IF GT 8                          00639**8\n         BH    BADOPRND            GREATER THAN 8, ERROR                00640**8\n         BCTR  R15,0               MAKE MACHINE LENGTH                  00641**8\n         EX    R15,MOVEFORM        MOVE IN FORM (NOTE, INIT BLANK)      00642**8\n         B     CLFNSPEC            GET NEXT SPECIFICATION               00643**8\nMOVEFORM MVC   SAVEFORM(0),0(R14)                                       00644**8\n*********************************************************************** 00645**3\n*                                                                     * 00646**3\n*        PROCESS THE COMMAND FORMAT (S/L) SUBPARAMETER                * 00647**3\n*                                                                     * 00648**3\n*********************************************************************** 00649**3\n         SPACE 1                                                        00650**3\nCLFORM   L     R15,0(,R5)          POINT TO OPERAND                     00651**3\n         MVC   FORMAT,0(R15)       SAVE COMMAND FORMAT                  00652**8\n         B     CLFNSPEC            GET NEXT SPECIFICATION               00653**3\n         EJECT                                                          00654**3\n*********************************************************************** 00655**3\n*                                                                     * 00656**3\n*        GET CHARACTERISTICS JOE AND PREPARE TO SCAN                  * 00657**3\n*                                                                     * 00658**3\n*********************************************************************** 00659**3\n         SPACE 1                                                        00660**3\nCLFOK    L     R2,$JOTABLE         GET ADDRESS OF JOT                   00661**3\n         USING JOT,R2                                                   00662**3\n         L     R4,JOTCHRQ-(JOENEXT-JOE) QUEUE HEAD                      00663**3\n         USING JOE,R4                                                   00664**3\n         N     R4,$ZEROFFF         ANY JOES?                            00665**3\n         BZ    ENDJOES             NO, SKIP JOE PROCESSING              00666**3\n*        ST    R4,JOEADDR          SAVE STARTING POINT                  00667**3\n         MVC   MESSAGE(90),INITRESP INITIALIZE RESPONSE BUFFER          00668**3\n         B     CHARJOES            BYPASS DC                            00669**3\nINITRESP DS    0CL90                                                    00670**3\n         DC    CL46'JJJJJJJJ JOBNNNN RRRRRRRR F=FFFFFFFF NNNNNNNNN'     00671**8\n         DC    CL46'         Q=Q     C=CCCC T=TTTT O=OOOO B=B HHHH'     00672**8\n         SPACE 1                                                        00673**3\nCHARJOES DS    0H                                                       00674**3\n         ALR   R4,R2               CALCULATE ACTUAL JOE ADDRESS         00675**3\n         ST    R4,JOEADDR          SAVE NEW CHARACTERISTICS JOE ADDR    00676**3\n*********************************************************************** 00677**3\n*        MOVE THE FORM NUMBER TO THE MESSAGE                          * 00678**3\n*********************************************************************** 00679**3\n         MVC   OFORM,JOEFORM       MOVE FORM TO MESSAGE                 00680**3\n*********************************************************************** 00681*10\n*        CHECK THE FORM FOR OUR VALUE                                 * 00682*10\n*********************************************************************** 00683*10\nCKFORM   CLI   SAVEFORM,C' '       DO WE WANT ALL FORMS         ?       00684*10\n         BE    CKDMNDFM            YES, BRANCH                          00685*10\n         CLC   OFORM,SAVEFORM      IS OUTPUT FORM OURFORM               00686*10\n         BNE   ENDCHAR             NO, GET NEXT JOE                     00687*12\nCKDMNDFM DS    0H                                                       00688*10\n         TM    JOEFLAGD,JOEFDFMS   DEMAND SETUP?                        00689**3\n         BZ    CHARFCB             NO, CONTINUE                         00690**3\n         MVC   OFORM+4(4),=C'DMND'   YES, PUT IN MSG                    00691**8\n*********************************************************************** 00692**3\n*        MOVE THE FCB  NUMBER TO THE MESSAGE                          * 00693**3\n*********************************************************************** 00694**3\nCHARFCB  MVC   OFCB,JOEFCB         MOVE FCB  TO MESSAGE                 00695**3\n         TM    JOEFLAGD,JOEFDFCB   DEMAND SETUP?                        00696**3\n         BZ    CHARUCS             NO, CONTINUE                         00697**3\n         MVC   OFCB(4),=C'DMND'    YES, PUT IN MSG                      00698**3\n*********************************************************************** 00699**3\n*        MOVE THE UCS  NUMBER TO THE MESSAGE                          * 00700**3\n*********************************************************************** 00701**3\nCHARUCS  MVC   OUCS,JOEUCS         MOVE UCS  TO MESSAGE                 00702**3\n         TM    JOEFLAGD,JOEFDUCS   DEMAND SETUP?                        00703**3\n         BZ    CHAROVL             NO, CONTINUE                         00704**3\n         MVC   OUCS(4),=C'DMND'    YES, PUT IN MSG                      00705**3\n*********************************************************************** 00706**3\n*        MOVE THE OVLY NUMBER TO THE MESSAGE                          * 00707**3\n*********************************************************************** 00708**3\nCHAROVL  MVC   OOVLY,JOEFLASH      MOVE OVLY TO MESSAGE                 00709**3\n*********************************************************************** 00710**3\n*        MOVE THE BURST INDICATOR TO THE MESSAGE                      * 00711**3\n*********************************************************************** 00712**3\n         MVI   OBURST,C'N'         ASSUME BURST=NO                      00713**3\n         TM    JOEFLAGC,JOEFCBRT   IS THIS BURST=YES                    00714**3\n         BZ    NOBURST             NO, BRANCH                           00715**3\n         MVI   OBURST,C'Y'         SET BURST=YES                        00716**3\nNOBURST  DS    0H                                                       00717**3\n         EJECT                                                          00718**3\n*********************************************************************** 00719**3\n*                                                                     * 00720**3\n*        SCAN WORK JOES AND JQES FOR MATCH ON DEST AND/OR JOB         * 00721**3\n*                                                                     * 00722**3\n*********************************************************************** 00723**3\n         SPACE 1                                                        00724**3\n*        LA    R4,JOEWKPTR-(JOECHNXT-JOE)  TRICKY START OF WRK QUE      00725**3\n         L     R4,JOEWKPTR               NOT SO TRICKY START OF WRK QUE 00726**3\n         N     R4,$ZEROFFF               TURN OFF HIGH BYTE             00727**3\nWORKJOES DS    0H                                                       00728**3\n         ALR   R4,R2               COMPUTE WORK JOE ADDRESS             00729**3\n*********************************************************************** 00730**3\n*        CHECK THE DESTINATION FOR OUR VALUES                         * 00731**3\n*********************************************************************** 00732**3\n         CLC   JOEROUT,LOWROUT     SEE IF LT OUR LOWER ROUTE CODE       00733**3\n         BL    ENDWORK             NO, BRANCH                           00734**3\n         CLC   JOEROUT,HIGHROUT    SEE IF GT OUR HIGHER ROUTE CODE      00735**3\n         BH    ENDWORK             YES, BRANCH                          00736**3\n*********************************************************************** 00737**8\n*        CHECK THE SYSOUT CLASS FOR OUR VALUE                         * 00738**8\n*********************************************************************** 00739**8\nCKCLASS  CLI   OUTCLASS,C'*'       DO WE WANT ALL SYSOUT CLASSES?       00740**8\n         BE    GOODCLAS            YES, BRANCH                          00741**8\n         SLR   R1,R1               CLEAR REG FOR IC                     00742**8\n         IC    R1,NUMCLASS         LOAD NUMBER OF OUTPUT CLASSES        00743**8\n         LA    R15,OUTCLASS        LOAD ADDRESS OF CLASS TABLE          00744**3\nCKCLASS1 CLC   JOECURCL,0(R15)     IS THIS THE CORRECT SYSOUT CLASS     00745**3\n         BE    GOODCLAS            YES, BRANCH                          00746**3\n         LA    R15,1(,R15)         INCREMENT TO NEXT CLASS ENTRY        00747**3\n         BCT   R1,CKCLASS1         LOOP                                 00748**3\n         B     ENDWORK             CLASS MISMATCH, BYPASS THIS JOE      00749**3\n         SPACE 1                                                        00750**3\nGOODCLAS L     R3,JOEJQE           GET JQE OFFSET                       00751**3\n         N     R3,$ZEROFFF         CLEAR THE HI-ORDER BYTE              00752**3\n         AL    R3,$JOBQPTR         CONVERT THE OFFSET TO ADDRESS        00753**3\n         USING JQE,R3              SET ADDRESSABILITY TO JQE            00754**3\n*********************************************************************** 00755**3\n*        CHECK THE JOB NUMBER FOR OUR VALUES                          * 00756**3\n*********************************************************************** 00757**3\n         CLI   JTYPE,C'*'          WANT ALL JOB NUMBERS?                00758*10\n         BE    CKJOBPFX            YES, BRANCH                          00759*10\nCKBATCH  CLI   JTYPE,C'J'          WANT BATCH JOBS?                     00760**3\n         BNE   CKSTC               NO, BRANCH                           00761**3\n         TM    JQEFLAG3,JQE3JOB    IS THIS A BATCH JOB                  00762**3\n         BZ    GOODTYPE            YES, BRANCH                          00763**3\n         B     ENDWORK             NO, IGNORE THIS JOE                  00764**3\nCKSTC    CLI   JTYPE,C'S'          WANT STARTED TASKS?                  00765**3\n         BNE   CKTSU               NO, BRANCH                           00766**3\n         TM    JQEFLAG3,JQE3STC    IS THIS A STARTED TASK               00767**3\n         BO    GOODTYPE            YES, BRANCH                          00768**3\n         B     ENDWORK             NO, IGNORE THIS JOE                  00769**3\nCKTSU    CLI   JTYPE,C'T'          WANT TSO USERS?                      00770**3\n         BNE   ENDWORK             NO, UNKNOWN REQUEST, GET OUT         00771**3\n         TM    JQEFLAG3,JQE3TSU    IS THIS A TSO USER                   00772**3\n         BNO   ENDWORK             NO, IGNORE THIS JOE                  00773**3\nGOODTYPE CLC   JQEJOBNO,LOWJOB     SEE IF LT OUR LOWER JOB NUMBER       00774**3\n         BL    ENDWORK             NO, IGNORE THIS JOE                  00775**3\n         CLC   JQEJOBNO,HIGHJOB    SEE IF GT OUR HIGHER JOB NUMBER      00776**3\n         BH    ENDWORK             YES, IGNORE THIS JOE                 00777**3\n*********************************************************************** 00778**3\n*        MOVE THE JOBNAME TO THE MESSAGE                              * 00779**3\n*********************************************************************** 00780**3\nCKJOBPFX DS    0H                                                       00781*11\n         CLI   NAMEPRFX,C' '       IS THIS LIMITED BY NAME PREFIX       00782*10\n         BE    GOODJOB             EQUAL, NOT LIMITED BY NAME PREFIX    00783*10\n         SLR   R1,R1               ZERO OUT R1                          00784*10\n         IC    R1,CMPRSIZ          GET SIZE OF COMPARE                  00785*10\n         EX    R1,PRFXCMPR         EXECUTE COMPARE                      00786*10\n         BNE   ENDWORK             IF NAME PREFIX NOT EQUAL, LOOP NEXT  00787*10\nGOODJOB  DS    0H                                                       00788*11\n         MVC   OJNAME,JQEJNAME     MOVE JOBNAME TO MESSAGE              00789*10\n*********************************************************************** 00790**3\n*        MOVE THE JOB NUMBER TO THE MESSAGE                           * 00791**3\n*********************************************************************** 00792**3\n         LH    R0,JQEJOBNO         LOAD JOB NUMBER                      00793**3\n         CVD   R0,$DOUBLE          CONVERT JOB NUMBER TO PACKED         00794**3\n         MVC   OJOBNO+2(6),=X'402020202120' SET EDIT MASK               00795**3\n         ED    OJOBNO+2(6),$DOUBLE+5  UNPACK JOB NUMBER TO MESSAGE      00796**3\n         MVC   OJOBNO+1(3),=C'JOB' ASSUME BATCH JOB                     00797**3\n         TM    JQEFLAG3,JQE3JOB    IS THIS A BATCH JOB                  00798**3\n         BZ    GOODJNO             YES, BRANCH                          00799**3\n         MVC   OJOBNO+1(3),=C'STC' ASSUME STARTED TASK                  00800**3\n         TM    JQEFLAG3,JQE3STC    IS THIS A STARTED TASK               00801**3\n         BO    GOODJNO             YES, BRANCH                          00802**3\n         MVC   OJOBNO+1(3),=C'TSU' ASSUME TSO LOGON                     00803**3\n         TM    JQEFLAG3,JQE3TSU    IS THIS A TSO LOGON                  00804**3\n         BO    GOODJNO             YES, BRANCH                          00805**3\n         MVC   OJOBNO+1(3),=C'XMT' ASSUME TRANSMITTER                   00806**3\nGOODJNO  DS    0H                                                       00807**3\n*********************************************************************** 00808**3\n*        SET THE BUSY INDICATOR IN THE MESSAGE                        * 00809**3\n*********************************************************************** 00810**3\n         MVI   OBUSYIND,C' '       BLANK THE BUSY INDICATOR             00811**3\n         TM    JOEFLAG1,JOE1BUSY   SEE IF BEING PRINTED/PUNCHED         00812**3\n         BZ    NOTBUSY             NO, BRANCH                           00813**3\n         MVI   OBUSYIND,C'*'       SET THE BUSY INDICATOR               00814**3\nNOTBUSY  DS    0H                                                       00815**3\n*********************************************************************** 00816**3\n*        MOVE THE SYSOUT CLASS TO THE MESSAGE                         * 00817**3\n*********************************************************************** 00818**3\n         MVC   OCLASS,JOECURCL     MOVE SYSOUT CLASS TO MESSAGE         00819**3\n*********************************************************************** 00820**3\n*        SET THE HOLD INDICATOR IN THE MESSAGE                        * 00821**3\n*********************************************************************** 00822**3\n         MVC   OHOLDIND,=C'    '   RESET HOLD INDICATOR                 00823**3\n         TM    JQEFLAG1,JQE1HLDA+JQE1HLD1 IS THIS JOB HELD              00824**3\n         BZ    HOLDSET             NO, BRANCH                           00825**3\n         MVC   OHOLDIND,=C'HOLD'   SET HOLD INDICATOR                   00826**3\n         B     NSELSET             NO, BRANCH                           00827**3\nHOLDSET  DS    0H                                                       00828**3\n*********************************************************************** 00829**3\n*        SET THE NON-SELECTABLE INDICATOR IN THE MESSAGE              * 00830**3\n*********************************************************************** 00831**3\n         TM    JOEFLAG2,JOE2SLEC   IS THIS JOE SELECTABLE               00832**3\n         BZ    NSELSET             YES, BRANCH                          00833**3\n         MVC   OHOLDIND,=C'NSEL'   SET NON-SELECTABLE INDICATOR         00834**3\nNSELSET  DS    0H                                                       00835**3\n*********************************************************************** 00836**3\n*        SET THE DESTINATION VALUE IN THE MESSAGE                     * 00837**3\n*********************************************************************** 00838**3\nCNVDEST  LA    R1,COMEWORK         POINT TO OUTPUT AREA                 00839**3\n         MVC   0(12,R1),=CL12' R'  ASSUME ' RJ2XIT05X      '            00840**3\n         SLR   R0,R0               CLEAR REG FOR ICM                    00841**3\n         CLC   $OWNNODE,JOEROUT    IS THIS OUR NODE                     00842**3\n         BE    CNVDEST1            YES, NO NODE NUMBERS                 00843**3\n         MVI   1(R1),C'N'          ASSUME NODE SPECIFICATION            00844**3\n         ICM   R0,B'0011',JOEROUT  LOAD NODE NUMBER                     00845**3\n         BNZ   CNVDEST2            NODE NUMBER NOT ZERO, CONVERT IT     00846**3\n         MVI   1(R1),C'U'          ELSE MUST BE SPECIAL UNIT            00847**3\nCNVDEST1 ICM   R0,B'0011',JOEROUT+2 LOAD REMOTE NUMBER                  00848**3\n         BNZ   CNVDEST2            REMOTE NUMBER NOT ZERO, CONVERT IT   00849**3\n         MVC   1(5,R1),=C'LOCAL'   ZERO, SET TO LOCAL                   00850**3\n         B     CNVDEST6            AND GET OUT                          00851**3\n         SPACE 1                                                        00852**3\nCNVDEST2 CVD   R0,$DOUBLE          CONVERT NODE/RMT NUMBER TO PACKED    00853**3\n         UNPK  2(5,R1),$DOUBLE     UNPACK NODE/RMT NUMBER               00854**3\n         OI    6(R1),X'F0'         MAKE NODE/RMT NUMBER PRINTABLE       00855**3\nCNVDEST3 CLI   2(R1),C'0'          IS HIGH BYTE ZERO                    00856**3\n         BNE   CNVDEST4            NO, GO SEE IF DONE                   00857**3\n         MVC   2(5,R1),3(R1)       SHIFT OFF HIGH ORDER ZERO BYTE       00858**3\n         B     CNVDEST3            LOOP UNTIL LEADING ZEROS GONE        00859**3\nCNVDEST4 CLI   1(R1),C'N'          SEE IF NODE SPECIFIED                00860**3\n         BNE   CNVDEST6            NO, DONE                             00861**3\n         ICM   R0,B'0011',JOEROUT+2 LOAD REMOTE NUMBER                  00862**3\n         BZ    CNVDEST6            ZERO, EXIT                           00863**3\nCNVDEST5 LA    R1,1(,R1)           INCREMENT TO NEXT CHARACTER          00864**3\n         CLI   1(R1),C' '          END OF NODE NUMBER?                  00865**3\n         BNE   CNVDEST5            NO, CONTINUE                         00866**3\n         MVI   1(R1),C'R'          SETUP FOR REMOTE NUMBER              00867**3\n         B     CNVDEST2            GO CONVERT REMOTE NUMBER             00868**3\n         SPACE 1                                                        00869**3\nCNVDEST6 MVC   ODEST,COMEWORK      MOVE CONVERTED DEST TO MESSAGE       00870**3\n         EJECT                                                          00871**3\n*********************************************************************** 00872**3\n*        SET THE OUTPUT LINE COUNT IN THE MESSAGE                     * 00873**3\n*********************************************************************** 00874**3\n         L     R1,JOERECCT         LOAD THE SYSOUT RECORD COUNT         00875**3\n         CVD   R1,$DOUBLE          CONVERT TO PACKED                    00876**3\n         MVC   OQTY,=X'40202020202020202120' SET EDIT MASK              00877**3\n         ED    OQTY,$DOUBLE+3      EDIT SYSOUT RECORD COUNT TO MESSAGE  00878**3\n*********************************************************************** 00879**3\n*                                                                     * 00880**3\n*        WRITE THE MESSAGE FOR THIS JOE                               * 00881**3\n*                                                                     * 00882**3\n*********************************************************************** 00883**3\n         LA    R0,46               WRITE FIRST MESSAGE                  00884**3\n         LA    R1,MSG1             LOAD ADDRESS OF MESSAGE              00885**3\n         $CWTO L=(R0),MSG=(R1),MSGID=900  DISPLAY MESSAGE               00886**3\n         CLI   FORMAT,C'S'         IS THIS THE SHORT FORM               00887**3\n         BE    SETFND              YES, BRANCH                          00888**3\n         LA    R0,46               SET TO LONG FORM LENGTH              00889**3\n         LA    R1,MSG2             LOAD ADDRESS OF MESSAGE              00890**3\n         $CWTO L=(R0),MSG=(R1),MSGID=900  DISPLAY MESSAGE               00891**3\nSETFND   OI    MISCSW,MATCH        TURN ON MATCH FOUND SWITCH           00892**3\n         B     ENDWORK             GO GET ANOTHER WORK JOE              00893**3\n         EJECT                                                          00894**3\nENDWORK  DS    0H                                                       00895**3\n         L     R4,JOECHNXT         GET OFFSET OF NEXT WORK JOE          00896**3\n         N     R4,$ZEROFFF         IS THIS THE END OF THE WORK JOES     00897**3\n         BZ    ENDCHAR             YES, BRANCH TO GET NEXT CHAR JOE     00898**3\n         B     WORKJOES            NO, PROCESS NEXT ONE                 00899**3\n         EJECT                                                          00900**3\nENDCHAR  DS    0H                                                       00901**3\n         L     R4,JOEADDR          GET PREV CHARACTERISTICS JOE ADDR    00902**3\n         L     R4,JOENEXT          POINT TO NEXT CHARACTERISTICS JOE    00903**3\n         N     R4,$ZEROFFF         IS THIS THE END OF THE JOE CHAIN     00904**3\n         BZ    ENDJOES             YES, EXIT                            00905**3\n         B     CHARJOES            NO, PROCESS NEXT ONE                 00906**3\n         EJECT                                                          00907**3\n*********************************************************************** 00908**3\n*                                                                     * 00909**3\n*        END OF ALL JOES.  IF NO MESSAGES WERE ISSUED, ISSUE          * 00910**3\n*        A MESSAGE THAT NO OUTPUT WAS QUEUED.                         * 00911**3\n*                                                                     * 00912**3\n*********************************************************************** 00913**3\nENDJOES  TM    MISCSW,MATCH        WAS A MATCH FOUND                    00914**3\n         BZ    NOUTPUT             NO, BRANCH                           00915**3\n         B     EXIT8               GET OUT                              00916**3\nNOUTPUT  $CWTO MSG='NO OUTPUT QUEUED',MSGID=919  ISSUE MESSAGE          00917**3\n         B     EXIT8               GET OUT                              00918**3\n         SPACE 1                                                        00919**3\n*********************************************************************** 00920**3\n*                                                                     * 00921**3\n*        INVALID $LF OPERAND                                          * 00922**3\n*                                                                     * 00923**3\n*********************************************************************** 00924**3\n         SPACE 1                                                        00925**3\nBADOPRND L     R1,0(0,R5)          POINT TO INVALID OPERAND             00926**3\n         MVC   COMMAND(9),0(R1)    MOVE 9 CHARACTERS OF OPERAND TO MSG  00927**3\n         MVC   COMMAND+9(16),=C' INVALID OPERAND' SET ERROR MSG         00928**3\n         LA    R0,25               SET MESSAGE LENGTH                   00929**3\n         $CWTO L=(R0),MSGID=950    WRITE ERROR MESSAGE                  00930**3\n         B     EXIT8               GET OUT                              00931**3\nPRFXCMPR CLC   NAMEPRFX(0),JQEJNAME EXECUTED COMPARE OF JOB NM PREFIX   00932*10\n         EJECT                                                          00933**3\n*********************************************************************** 00934**3\n*                                                                     * 00935**3\n*                    E X I T     R O U T I N E S                      * 00936**3\n*                                                                     * 00937**3\n*        RC = 00 - CONTINUE USING ANY ADDITIONAL EXITS                * 00938**3\n*        RC = 04 - CONTINUE WITHOUT USING ANY ADDITIONAL EXITS        * 00939**3\n*        RC = 08 - TERMINATE WITHOUT ANY MESSAGE                      * 00940**3\n*        RC = 12 - TERMINATE ISSUING THE \"OK\" MESSAGE                 * 00941**3\n*        RC = 16 - TERMINATE USING A USER SUPPLIED MESSAGE            * 00942**3\n*                                                                     * 00943**3\n*********************************************************************** 00944**3\nEXIT0    DS    0H                                                       00945**3\n         LA    R15,0               SET RETURN CODE TO 0                 00946**3\n         B     $LFEXIT             RETURN TO MAIN ROUTINE               00947**3\n         SPACE 3                                                        00948**3\nEXIT8    DS    0H                                                       00949**3\n         LA    R15,8               SET RETURN CODE TO 8                 00950**3\n         SPACE 3                                                        00951**3\n$LFEXIT  DS    0H                                                       00952**3\n         L     R8,$LFSAVE          RESTORE BAL REGISTER                 00953**3\n         BR    R8                  RETURN TO MAIN ROUTINE               00954**3\n         EJECT                                                          00955**3\n         LTORG                                                          00956**3\n         EJECT                                                          00957**3\n$LFWORK  DS    0F                  COMMAND WORK AREA                    00958**3\nJOEADDR  DS    F                   REGISTER SAVE AREA                   00959**3\nJTYPE    DS    C                   JOB TYPE (* OR JQEFLAG VALUE)        00960**3\nFORMAT   DS    C                   DISPLAY FORMAT (S / L)               00961**3\nMISCSW   DS    X                   MISCELLANEOUS SWITCHES               00962**3\nTWOPART  EQU   X'80'               TWO PART DESTINATION SPECIFIED       00963**3\nMATCH    EQU   X'40'               MATCH FOR OUTPUT FOUND               00964**3\nNUMCLASS DS    X                   NUMBER OF OUTPUT CLASSES FOLLOWING   00965**3\nOUTCLASS DS    CL8                 JOB OUTPUT CLASS / *                 00966**3\nSAVEFORM DS    CL8                 SAVE FORM IT                         00967**8\nCMPRSIZ  DS    X                   MACHINE LENGTH FOR PRFX CMPR INS.    00968*10\nNAMEPRFX DS    CL8                 NAME PREFIX                          00969*10\nLOWJOB   DS    H                   LOW JOB NUMBER FOR SEARCH            00970**3\nHIGHJOB  DS    H                   HIGH JOB NUMBER FOR SEARCH           00971**3\nLOWROUT  DS    F                   LOW ROUTE CODE FOR SEARCH            00972**3\nHIGHROUT DS    F                   HIGH ROUTE CODE FOR SEARCH           00973**3\nDEST1P1  DS    CL10                BEGINNING DEST PART 1                00974**3\nDEST1P2  DS    CL10                BEGINNING DEST PART 2                00975**3\nDEST2P1  DS    CL10                ENDING DEST PART 1                   00976**3\nMESSAGE  DS    CL100               MESSAGE WORK AREA                    00977**3\nWORKLEN  EQU   *-$LFWORK           LENGTH OF WORK AREA                  00978**3\n*                                                                       00979**3\nMSG1     EQU   MESSAGE             FIRST MESSAGE                        00980**3\nOJNAME   EQU   MESSAGE,8           OUTPUT JOBNAME                       00981*10\nOBUSYIND EQU   MESSAGE+8,1         OUTPUT BUSY (PRINTING/PUNCHING)      00982**3\nOJOBNO   EQU   MESSAGE+8,8         OUTPUT JOB NUMBER                    00983**3\nODEST    EQU   MESSAGE+16,10       OUTPUT DESTINATION                   00984**3\nOFORM    EQU   MESSAGE+28,8        OUTPUT FORM                          00985**8\nOQTY     EQU   MESSAGE+36,10       OUTPUT NUMBER OF LINES/CARDS         00986**3\nMSG2     EQU   MESSAGE+46          FIRST MESSAGE                        00987**3\nOCLASS   EQU   MESSAGE+57,1        OUTPUT CLASS                         00988**8\nOFCB     EQU   MESSAGE+65,4        OUTPUT FCB                           00989**3\nOUCS     EQU   MESSAGE+72,4        OUTPUT UCS                           00990**3\nOOVLY    EQU   MESSAGE+79,4        OUTPUT OVERLAY                       00991**3\nOBURST   EQU   MESSAGE+86,1        OUTPUT BURST INDICATOR               00992**3\nOHOLDIND EQU   MESSAGE+88,4        OUTPUT HOLD INDICATOR                00993**3\n         EJECT                                                          00994**3\n         SPACE 3                                                        00995**3\n*             CLASS IN MSG BELOW WILL BE REPLACED BY L OR F             00996**3\n* $TPRTMSG DC C'PLEASE REENTER THE COMMAND WITHOUT CLASS X'             00997**4\n* $TPRTEMS DC C'CLASS E ONLY GOES ON PRINTER12'                         00998**4\nPWDMISS  DC C'PLEASE REENTER THE COMMAND WITH THE PASSWORD'             00999**3\nPWDWRONG DC C'INVALID PASSWORD'                                         01000**3\n         LTORG                                                          01001**3\n         EJECT                                                          01002**3\n         $MODEND                                                        01003**3\n         END                                                            01004**3\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NAPJ005": {"ttr": 2817, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17/\\x00\\x90\\x17/\\x17\\x16\\x0f\\xe4\\x0f\\xe4\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-21T00:00:00", "modifydate": "1990-06-21T17:16:00", "lines": 4068, "newlines": 4068, "modlines": 0, "user": "FCHLAY"}, "text": "++ USERMOD (NAPJ005) .\n++ VER (Z038) FMID(HJE2221).\n++JCLIN.\n//STEP1    EXEC PGM=IEV90\n//SYSPUNCH DD  DSN=&&PUNCH(J2XIT06),DISP=SHR\n//SYSIN  DD  SYS1.JES2SRC(J2XIT06),DISP=SHR\n//STEP2    EXEC PGM=IEWL,PARM='RENT'\n//SYSPUNCH DD  DSN=&&PUNCH(J2XIT06),DISP=SHR\n//SYSLMOD  DD  DSN=SYS1.JES2LIB,DISP=SHR\n//SYSLIN  DD  *\n  INCLUDE SYSPUNCH(J2XIT06)\n  NAME J2XIT06(R)\n++SRC (J2XIT06) DISTLIB(JES2SRC).\n*          DATA SET J2XIT06    AT LEVEL 047 AS OF 07/07/89\nEXIT     TITLE 'PHILIPS LIGHTING (SHARE CD WEJ)  LOCAL HASP EXIT 6, CON*00001\n               VERTER JCL VALIDATION'                                   00002\n         SPACE 5                                                        00003\n         COPY  $HASPGBL                                                 00004\nJ2XIT06  $MODULE TITLE='PHILIPS LIGHTING (WEJ) HASP EXIT ROUTINES',    X00005\n               CVT,                GENERATE OS CVT DSECT               X00006\n               DEB,                GENERATE OS DEB DSECT               X00007\n               KEYS,               GENERATE OS KEYS DSECT              X00008\n               NEL,                GENERATE OS NEL DSECT               X00009\n               PSA,                GENERATE OS PSA DSECT               X00010\n               RESPA,              GENERATE JES FSI RESPA DSECT        X00011\n               RPL,                GENERATE OS RPL DSECT               X00012\n               SDWA,               GENERATE OS SDWA DSECT              X00013\n               TEXT,               GENERATE OS TEXT DSECT              X00014\n               WPL,                GENERATE OS WPL DSECT               X00015\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X00016\n               $CAT,               GENERATE HASP CAT DSECT             X00017\n               $CMB,               GENERATE HASP CMB DSECT             X00018\n               $CNVWORK,           GENERATE HASP CNVWORK DSECT         X00019\n               $COMWORK,           GENERATE HASP COMWORK DSECT         X00020\n               $DCT,               GENERATE HASP DCT DSECT             X00021\n               $DTE,               GENERATE HASP DTE DSECT          WEJ*00022\n               $DTECNV,            GENERATE HASP DTECNV DSECT       WEJ*00023\n               $ERA,               GENERATE HASP ERA DSECT          WEJ*00024\n               $HASPEQU,           GENERATE HASP EQUATES               X00025\n               $HCT,               GENERATE HASP HCT DSECT             X00026\n               $IOT,               GENERATE HASP IOT DSECT             X00027\n               $JCT,               GENERATE HASP JCT DSECT             X00028\n               $JOE,               GENERATE HASP JOE DSECT             X00029\n               $JOT,               GENERATE HASP JOT DSECT             X00030\n               $JQE,               GENERATE HASP JQE DSECT             X00031\n               $LRC,               GENERATE HASP LRC DSECT             X00032\n               $MIT,               GENERATE HASP MIT DSECT             X00033\n               $NHD,               GENERATE HASP NJE HEADER DSECTS     *00034*47\n               $PADDR,             GENERATE HASP PADDR DSECT           X00035**6\n               $PCE,               GENERATE HASP PCE DSECT             X00036**6\n               $PDDB,              GENERATE HASP PDDB DSECT            X00037\n               $PPPWORK,           GENERATE PPU WORK DSECT             X00038\n               $RDRWORK,           GENERATE RDR WORK DSECT             X00039\n               $RAT,               GENERATE RAT WORK DSECT             X00040\n               $TAB,               GENERATE TAB WORK DSECT             X00041\n               $TRP,               GENERATE TRP WORK DSECT          WEJ*00042\n               $TQE,               GENERATE HASP TQE DSECT          WEJ*00043\n               $XECB               GENERATE HASP XECB DSECT         WEJ 00044\n         TITLE 'JES2 EXIT 6 INTERNAL TEXT EXIT'                         00045\n*********************************************************************** 00046\n*                                                                     * 00047\n*        ENVIRONMENT   MVS SP 1.3.5  LEVEL 8804                    WEJ* 00048\n*                      JES2 FOR SP 1.3.6                              * 00049\n*                                                                     * 00050\n*        THIS JES2 EXIT PROGRAM IS DESIGNED TO RUN AT CONVERTER       * 00051\n*        TIME TO ENFORCE INSTALLATION JCL STANDARDS AND TO DETERMINE  * 00052\n*        THE APPROPRIATE JOB CLASS BASED ON DEVICE UTILIZATION.       * 00053\n*                                                                     * 00054\n*        VIOLATIONS OF JCL STANDARDS ARE DOCUMENTED BY MESSAGES       * 00055\n*        WRITTEN TO THE JES2 MESSAGE DATA SET FOR THE JOB AND         * 00056\n*        FLAGGED FOR JCL ERROR BY THE USE OF THE JES2 EXIT RETURN     * 00057\n*        CODE TO THE JES2 CONVERTER SUB-TASK.                         * 00058\n*                                                                     * 00059\n*        THIS EXIT USES THE INTERNAL TEXT DATA SET FOR ITS            * 00060\n*        PROCESSING.  JES2 PASSES EACH INTERNAL TEXT STATEMENT        * 00061\n*        TO THIS EXIT FOR EXAMINATION AND/OR MODIFICATION.  THE       * 00062\n*        EXIT WILL MAINTAIN A TABLE OF DATASET NAMES AND DEVICE       * 00063\n*        COUNTS TO BE USED AT END OF PROCESSING FOR DETERMINING       * 00064\n*        JOB CLASS.  THE ACB FOR THE MESSAGE DATA SET IS IN THE       * 00065\n*        PCE WORK AREA AND CAN BE USED TO ISSUE ERROR MESSAGES        * 00066\n*        TO THE JOB MESSAGE PORTION OF THE LISTING.                   * 00067\n*                                                                     * 00068\n*        ALSO, THE CONVERTER IS A DUMB ANIMAL WHEN IT COMES TO        * 00069\n*        SYNTAX CHECKING.  CHECKING IS MADE FOR KEYWORD VALUES,       * 00070\n*        BUT NONE IS MADE ON THE VALUE FOR THE KEYWORD.  IE.,         * 00071\n*        50 CHARACTER DATA SET NAMES, 20 CHARACTER VOLUME SERIAL      * 00072\n*        NUMBERS, AND NUMEROUS SYNTAX ERRORS CAN PASS UNDETECTED      * 00073\n*        THROUGH THE CONVERTER.  THESE ERRORS WILL BE CAUGHT BY       * 00074\n*        THE INTERPRETER WHEN THE JOB GOES INTO EXECUTION, BUT        * 00075\n*        THIS EXIT MUST PROCESS THEM.  CURRENTLY, ALL ERRORS OF       * 00076\n*        THIS TYPE WILL ISSUE A MESSAGE TO THE EFFECT OF AN INTERNAL  * 00077\n*        ERROR AND SET THE JOB TO CLASS=A.  THE ESTAE ROUTINE,        * 00078\n*        WHEN ENTERED FOR AN ABEND, WILL ALSO SET THE CLASS TO        * 00079\n*        'A' AND RECOVER TO PROTECT THE CONVERSION SUBTASK FROM       * 00080\n*        ABEND AND CONSEQUENT LOSS OF THE JOB.  THIS IS DONE BY       * 00081\n*        THE SEVERE ERROR RECOVERY ROUTINE TURNING OFF THE EXIT 6     * 00082\n*        BIT IN THE EXIT MASK FOR THE JOB.                            * 00083\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - WEJ * 00084\n*                                                                 WEJ * 00085\n*       CHANGES AT PHILIPS LIGHTING                               WEJ * 00086\n* 1. UPDATE USINGS FOR JES CTL BLOCKS TO JES2 1.3.6 NAMES.        WEJ * 00087\n* 2. ADD CONTROL BLOCKS $DTE AND $DTECNV TO PICK UP PSUEDO ACB    WEJ * 00088\n*    FOR JESMSG                                                   WEJ * 00089\n* 3. CHANGE ACCOUNT CODE CHECKING TO AGREE WITH LIGHTING          WEJ * 00090\n*    CONVENTIONS.                                                 WEJ * 00091\n* 4. GENERATE SMF248 RECORD FOR PROCLIB USAGE                     WEJ * 00092\n* 5. THE CHECK FOR MOUNTABLE DASD DEVICES IS ELIMINATED.          WEJ * 00093\n*                                                                 WEJ * 00094\n*********************************************************************** 00095\n         SPACE 2                                                        00096\n*********************************************************************** 00097\n*                                                                     * 00098\n*        CLASS DETERMINATION IS MADE BY KEEPING A COUNT OF ALL        * 00099\n*        OF THE MOUNTABLE DEVICES USED PER STEP.  THESE COUNTS        * 00100\n*        ARE SAVED IN AN INTERNAL TABLE TO BE PROCESSED AT END        * 00101\n*        OF INTERNAL TEXT.  ALSO SAVED IN THE TABLE ARE ENTRIES       * 00102\n*        FOR DD STATEMENTS WHICH USED MOUNTABLE DEVICES               * 00103\n*        FOR USE IN REFERBACKS AND UNIT=AFF.  IF THE UNIT             * 00104\n*        HAS NOT BEEN DETERMINED AT THE END OF PROCESSING             * 00105\n*        FOR A DD STATEMENT, THE CATALOG IS SEARCHED.                 * 00106*39\n*        CLASS IS SET ON THE BASIS OF THE MAXIMUM NUMBER OF TAPES     * 00107\n*        PER STEP, WHETHER OR NOT TCAM QUEUES ARE USED, THE PRIVELEGE * 00108*39\n*        OF THE SUBMITTER AND THE TIME PARAMETER IN THE JOB CARD.     * 00109*39\n*                                                                     * 00110\n*        THE JOB CLASSES ARE: A - PRODUCTION JOB WITH TAPE            * 00111*39\n*                             B - PRODUCTION OR TEST JOB TAKING MORE  * 00112*39\n*                                 THAN 29 SECONDS                     * 00113*39\n*                             C - CICS RELATED JOB                    * 00114*39\n*                             D - DATA BASE RELATED JOB               * 00115*39\n*                             F - PRODUCTION OR TEST JOB TAKING LESS  * 00116*39\n*                                 THAN 30 SECONDS, NO TAPE            * 00117*39\n*                             H - TEST JOB 2-N TAPES                  * 00118*39\n*                             I - TEST JOB WITH 1 TAPE                * 00119*39\n*                             J - TCAM JOB WITH 0-N TAPES, QNAME=PH/PQ* 00120*39\n*                             L - TCAM JOB WITH 0-N TAPES,            * 00121*39\n*                                 QNAME=ADMINMSG                      * 00122*39\n*                             N - CLASS FOR ACCESS JOBS SUBMITTED BY  * 00123*39\n*                             Q - UNKNOWN                             * 00124*39\n*                             S - SINGLE STREAM JOB SUBMISSION        * 00125*39\n*                             U - TECH SERVICES JOB 2-N TAPES         * 00126*39\n*                             V - TECH SERVICES JOB 1 TAPE            * 00127*39\n*                             W - TECH SERVICES JOB, NO TAPE          * 00128*39\n*                             X - TECH SERVICES JOB, SINGLE STREAM    * 00129*39\n*                             Z - DEDICATED SYSTEM BACKUPS            * 00130*39\n*                                                                     * 00131*39\n*        WHEN TESTING THIS EXIT UNDER THE TSO INTERFACE, THE LOCAL    * 00132\n*        VARIABLE &&TSO SHOULD BE CHANGED TO 'YES' FROM 'NO' TO       * 00133\n*        CHANGE THE $$WTO INSTRUCTIONS TO WTO INSTRUCTIONS AND        * 00134\n*        BYPASS THE ESTAE MACROS SO THAT THE TEST COMMAND CAN         * 00135\n*        DETERMINE THE ADDRESS OF THE ABEND.                          * 00136\n*                                                                     * 00137\n*                                                                     * 00138\n*        WRITTEN BY:                                                  * 00139\n*                        JOHN V. HOOPER                               * 00140\n*                        NORTHWESTERN BANK                            * 00141\n*                        P.O. BOX 310                                 * 00142\n*                        NORTH WILKESBORO, N.C. 28674                 * 00143\n*                                                                     * 00144\n*        UPDATED BY:                                                  * 00145\n*                        GLENN HARPER                                 * 00146\n*                        A.N.R. PRODUCTION COMPANY                    * 00147\n*                        5075 WESTHEIMER                              * 00148\n*                        HOUSTON, TEXAS  77056                        * 00149\n*                                                                 WEJ * 00150\n*                        CLARK MORRIS, DEPT. 5069                 WEJ * 00151\n*                        PHILIPS LIGHTING COMPANY                 WEJ * 00152\n*                        PHILIPS SQUARE, CN6800                   WEJ * 00153\n*                        SOMERSET, NJ 08875-6800                  WEJ * 00154\n*                        UNITED STATES OF AMERICA                 WEJ * 00155\n*                        201-563-3575                             WEJ * 00156\n*                                                                     * 00157\n*********************************************************************** 00158\n         SPACE                                                          00159\n*********************************************************************** 00160\n*                                                                     * 00161\n*        SET CONDITIONAL ASSEMBLY VARIABLES, AMODE, RMODE             * 00162\n*                                                                     * 00163\n*********************************************************************** 00164\nJ2XIT06  AMODE 31                                                       00165\nJ2XIT06  RMODE 24                                                       00166\n         LCLC &TSO                                                      00167\n         LCLC &CAMLST                                                   00168\n         LCLC &ERRMSG                                                   00169\n         LCLC &SDUMP                                                    00170\n         LCLC &FLUSH                                                    00171\n         LCLC &MODIFY                                                   00172\n         LCLC &UCBSEAR                                                  00173\n&TSO     SETC 'NO'         ASSEMBLE FOR TSO TESTING                     00174\n&CAMLST  SETC 'YES'        SEARCH CATALOG FOR DATASETS                  00175\n&ERRMSG  SETC 'YES'        PRODUCE JOB FAILED BY EXIT MESSAGE           00176\n&SDUMP   SETC 'YES'        PRODUCE CONSOLE DUMP FOR ABENDS              00177\n&FLUSH   SETC 'YES'        FLUSH JOB FOR STANDARDS VIOLATIONS           00178\n&MODIFY  SETC 'YES'        MODIFY JOB CLASS IN JCT AND JQE              00179\n&UCBSEAR SETC 'NO'         SEARCH THE DASD UCBS FOR UNMOUNTED VOLUMES   00180\n         EJECT                                                          00181\n*********************************************************************** 00182\n*                                                                     * 00183\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             * 00184\n*                                                                     * 00185\n*        R0       - CODE INDICATING STATUS OF CONVERSION              * 00186\n*            0  INDICATES A JCL STATEMENT HAS BEEN CONVERTED          * 00187\n*            4  INDICATES ALL JCL FOR A JOB HAS BEEN CONVERTED        * 00188\n*        R1       - ADDRESS OF 2-WORD PARAMETER LIST                  * 00189\n*           WORD 1 (+0)  ADDRESS OF A 16-BYTE WORK AREA               * 00190\n*           WORD 2 (+4)  IF R0 IS 0 ADDRESS OF LAST TEXT IMAGE        * 00191\n*           WORD 3 (+8)  ADDRESS OF THE DTE                        WEJ* 00192\n*           WORD 4 (+12) ADDRESS OF THE JCT                        WEJ* 00193\n*        R11      - ADDRESS OF THE HCT                                * 00194\n*        R13      - ADDRESS OF AN OS-STYLE SAVE AREA                  * 00195\n*        R14      - RETURN ADDRESS                                    * 00196\n*        R15      - ENTRY ADDRESS                                     * 00197\n*                                                                     * 00198\n*********************************************************************** 00199\n         SPACE 4                                                        00200\n*********************************************************************** 00201\n*                                                                     * 00202\n*        REGISTER USAGE WITH THIS EXIT:                               * 00203\n*                                                                     * 00204\n*        R0,R1    - PARM/WORK REGISTERS                               * 00205\n*        R4,R3    - WORK REGISTER FOR EACH TEXT KEY                   * 00206*19\n*        R5,R2    - WORK REGISTER                                     * 00207*19\n*        R6       - TEXT POINTER                                      * 00208\n*        R7       - SAVETABLE POINTER                                 * 00209\n*        R8       - POINTER TO DTE                                 WEJ* 00210\n*        R9       - BASE REGISTER #2                                  * 00211\n*        R10      - BASE REGISTER #3                                  * 00212\n*        R11      - ADDRESS OF THE HCT                                * 00213\n*        R12      - BASE REGISTER #1                                  * 00214\n*        R13      - WORKAREA POINTER                                  * 00215\n*        R14      - RETURN ADDRESS                                    * 00216\n*        R15      - RETURN CONDITION CODE                             * 00217\n*                                                                     * 00218\n*********************************************************************** 00219\n         EJECT                                                          00220\n*********************************************************************** 00221\n*                                                                     * 00222\n*        ACTUAL JES2 EXIT ENTRY POINT                                 * 00223\n*                                                                     * 00224\n*********************************************************************** 00225\nJ2XIT06E $ENTRY  BASE=(R12,R9,R10)                                      00226\n         SAVE  (14,12)        SAVE CALLERS REGISTERS                    00227\n         DROP  R13                                                      00228\n         USING DTE,R8         SET ADDRESSABILITY TO DTE            WEJ  00229\n         L     R8,8(,R1)      LOAD THE ADDRESS OF THE CURRENT DTE  WEJ  00230\n         LR    R12,R15        ESTABLISH BASE REGISTER                   00231\n         LA    R10,4095       SET SECOND                                00232\n         LA    R9,1(R12,R10)      BASE REGISTER                         00233\n         LA    R10,1(R10,R9)  SET THIRD BASE REGISTER                   00234\n         LR    R5,R0          SAVE REG 0                                00235*19\n         LR    R4,R1          SAVE ADDRESS OF PARAMETER POINTER     WEJ 00236*19\n         L     R6,0(,R4)      POINT TO EXIT WORK AREA               WEJ 00237*19\n         USING EXITWORK,R6                                          WEJ 00238\n         ICM   R1,B'1111',EXWKPTR1  GET WORK AREA POINTER           WEJ 00239\n         BZ    GETMAIN        NO, GO DO REQUIRED GETMAINS               00240\n         ST    R13,4(R1)      SAVE OLD SAVE ADDR IN NEW                 00241\n         ST    R1,8(R13)      SAVE NEW SAVE ADDR IN OLD                 00242\n         LR    R13,R1         SAVE NEW SAVE AND WORKAREA ADDRESS        00243\n         USING WORKAREA,R13   SET ADDRESSABILITY                        00244\n         L     R7,SUBTABLE    RESTORE SUB TABLE AREA                    00245\n         USING SAVTABLE,R7    SET ADDRESSABILITY                        00246\n         B     ENDGETM        BYPASS GETMAINS                           00247\n         SPACE 4                                                        00248\n*********************************************************************** 00249\n*                                                                     * 00250\n*        GET STORAGE FOR WORK AREAS ON FIRST ENTRY TO EXIT FOR        * 00251\n*        THE JOB                                                      * 00252\n*                                                                     * 00253\n*********************************************************************** 00254\nGETMAIN  DS    0H                                                       00255\n         LH    R0,GETLEN      LOAD GETMAIN SIZE                         00256\n         GETMAIN R,LV=(0)     GET CORE FOR DYNAMIC SAVE AREA            00257\n         LR    R3,R1          SAVE GETMAINED ADDRESS                    00258\n         LR    R0,R1          CLEAR                                     00259\n         LH    R1,GETLEN          ENTIRE                                00260\n         SLR   R15,R15                GETMAINED                         00261\n         MVCL  R0,R14                     TO ZEROS                      00262\n         ST    R13,4(R3)      SAVE OLD SAVE ADDR IN NEW                 00263\n         ST    R3,8(R13)      SAVE NEW SAVE ADDR IN OLD                 00264\n         LR    R13,R3         SAVE NEW SAVE AND WORKAREA ADDRESS        00265\n         ST    R13,EXWKPTR1   SAVE GETMAINED ADDRESS                    00266\n         L     R0,F#8192      LOAD GETMAIN SIZE                         00267\n*                             GET CORE FOR JCL TABLE                    00268\n         GETMAIN RU,LV=(0),BNDRY=PAGE                                   00269\n         LR    R7,R1          SAVE GETMAIN ADDRESS                      00270\n         ST    R7,SUBTABLE    STORE ADDR OF SUB TABLE AREA              00271\n         LR    R0,R7          CLEAR                                     00272\n         L     R1,F#8192          ENTIRE                                00273\n         SLR   R15,R15                GETMAINED                         00274\n         MVCL  R0,R14                     TO ZEROS                      00275\n         LA    R15,MSGRPL     LOAD OUTPUT RPL ADDRESS                   00276\n         ST    R15,OUTRPL     SAVE OUTPUT RPL ADDRESS                   00277\n         LA    R15,DCNVMSG    OBTAIN JESMSG OUTPUT ACB ADDRESS      WEJ 00278\n         ST    R15,OUTACB     SAVE OUTPUT ACB ADDRESS                   00279\nENDGETM  DS    0H                                                       00280\n         L     R1,12(,R4)     LOAD ADDRESS OF JCT                   WEJ 00281*19\n         ST    R1,JCTADDR     SAVE JCT ADDRESS                      WEJ 00282\n         EJECT                                                          00283\n*********************************************************************** 00284\n*        ESTABLISH ESTAE ENVIRONMENT                                  * 00285\n*********************************************************************** 00286\n         MVC   ESTAEL(LESTAEL),ESTAE INITIALIZE ESTAE LIST FORM         00287\n         STM   R14,R12,STAEREGS+12 SAVE CURRENT REGISTERS               00288\n         AIF   ('&TSO' EQ 'YES').TSO9                                   00289\n         ESTAE PARAM=(13),BRANCH=YES,SVEAREA=STAEREGS,KEY=1,           X00290\n               MF=(E,ESTAEL)                                            00291\n         L     R13,DCNVUWA    SAME AS EXWKPTR1                      WEJ 00292\n.TSO9    ANOP                                                           00293\n         DROP  R6             R6 WILL NO LONGER POINT TO WORK AREA  WEJ 00294\n         LTR   R0,R5          RESTORE REG 0 AND CHECK FOR INTERNAL  WEJ 00295*19\n         BNZ   EOF            GET OUT (ALL TEXT IMAGES PROCESSED)   WEJ 00296\n         L     R6,4(,R4)      LOAD TEXT STARTING ADDRESS            WEJ 00297*19\n         ST    R6,TEXTSTAR    SAVE TEXT STARTING ADDRESS            WEJ 00298\n         USING TEXT,R6        NOTE R6 POINTS TO TEXT                WEJ 00299\n         SPACE 4                                                        00300\n*********************************************************************** 00301\n*        SOME TYPES OF ERRORS DETECTED BY THE CONVERTER TURN ON BITS  * 00302\n*        IN THE JCTCNVRC FIELD WHICH WILL FAIL THE JOB WHEN THE       * 00303\n*        CONVERTER COMPLETES.  THESE BITS WILL BE TESTED, AND IF      * 00304\n*        THE JOB IS TO BE FAILED, ALL WORK AREAS WILL BE FREEMAINED   * 00305\n*        AND CONTROL RETURNED TO JES2.                                * 00306\n*********************************************************************** 00307\n         L     R14,JCTADDR    LOAD JCT ADDRESS                          00308\n         USING JCT,R14        SET ADDRESSABILITY TO JCT             WEJ 00309\n         LA    R15,JCTCJCL    SET JCL ERROR IN CONVERTER RETURN CODE    00310\n         C     R15,JCTCNVRC   TEST CONVERTER RETURN CODE                00311\n         BNE   RECORD1        NO, OK, BRANCH                            00312\n         LA    R15,4          TELL JES2 TO QUIT THIS EXIT               00313\n         ST    R15,RETCODE    AND SAVE THE RETURN CODE                  00314\n         B     ENDOFIT        CONVERTER HAS ALREADY FAILED JOB          00315\n         DROP  R14            DROP ADDRESSABILITY TO JCT                00316\n         SPACE 4                                                        00317\n*********************************************************************** 00318\n*        WE MUST DETERMINE IF THE CURRENT STATEMENT IS THE LAST       * 00319\n*        STATEMENT FOR THE STEP.  IF THE STATEMENT IS A DD STATEMENT  * 00320\n*        AND IT IS THE LAST STATEMENT OF THE STEP, THE TEXT INDICATOR * 00321\n*        WILL REFLECT LAST STATEMENT OF THE STEP.  IF, HOWEVER, THE   * 00322\n*        CURRENT STATEMENT IS AN EXEC STATEMENT AND IT HAS NO DD      * 00323\n*        STATEMENTS, THIS INDICATOR WILL NOT BE ON, SO WE HAVE TO     * 00324\n*        CHECK FOR THIS CONDITION ALSO.                               * 00325\n*********************************************************************** 00326\nRECORD1  TM    STRINDCS,LASTSTMT LAST STMT FOR STEP?                    00327\n         BO    RECORD3        YES, BRANCH                               00328\n         TM    STRINDCS,EXECSTR EXEC STMT?                              00329\n         BNO   RECORD2        NO, BRANCH                                00330\n         TM    STREINDC,ETXNODD STEP HAS NO DD STMTS?                   00331\n         BO    RECORD3        TRUE, ALSO LAST STMT FOR STEP             00332\n*********************************************************************** 00333\n*        AT THIS POINT THE STMT IS NOT THE LAST STMT FOR STEP         * 00334\n*********************************************************************** 00335\nRECORD2  NI    EOFIND,X'FE'   TURN OFF LAST STMT IND                    00336\n         B     RECORD4        GET OUT                                   00337\n*********************************************************************** 00338\n*        AT THIS POINT THE STMT IS THE LAST STMT FOR STEP             * 00339\n*********************************************************************** 00340\nRECORD3  OI    EOFIND,ENDSTEP TURN ON LAST STMT IND                     00341\nRECORD4  TM    STRINDCS,JOBSTR JOB STATEMENT?                           00342\n         BO    JOBCARD        YES, BRANCH                               00343\n         TM    STRINDCS,EXECSTR EXEC STATEMENT?                         00344\n         BO    EXECARD        YES, BRANCH                               00345\n         TM    STRINDCS,DDSTR DD STATEMENT?                             00346\n         BO    DDCARD         YES, BRANCH                               00347\n         TM    STRINDCS,PROCSTR PROC STATEMENT?                         00348\n         BO    PROCINST       YES, BRANCH BECAUSE PROC IN STREAM        00349\n         TM    STRINDCS,JDVBSTR JDT VERB STATEMENT?                     00350\n         BO    JDTCARD        YES, BRANCH                               00351\n*** IF NONE OF THE ABOVE FORGET IT  WILL BE CAUGHT BY CONVERTER         00352\n         B     GETNEXT        GO GET ANOTHER STATEMENT                  00353\n         EJECT                                                          00354\n*********************************************************************** 00355\n*        THE TEXT OF THE JOBCARD IS AS FOLLOWS:                       * 00356\n*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        * 00357\n*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          * 00358\n*            3)  3 BYTES OF MISCELLANEOUS INDICATORS                  * 00359\n*            4)  1 BYTE INDICATOR X'B4' INDICATING JOB POS PARAMS     * 00360\n*            5)  1 BYTE NUMBER OF POSITIONAL PARAMETERS               * 00361\n*                1ST POS PARAM IS JOBNAME                             * 00362\n*                2ND POS PARAM IS ACCT PARAM LIST                     * 00363\n*                3RD POS PARAM IS PGMR NAME                           * 00364\n*            5A) JOBNAME PRECEDED BY A 1 BYTE LENGTH FIELD            * 00365\n*            5B) HASP ACCOUNTING PARAMETERS PRECEDED BY A             * 00366\n*                1 BYTE LENGTH FIELD LOOKS LIKE THE FOLLOWING         * 00367\n*                THE 1ST HALF BYTE IS '8' IF MORE THAN 1 ACCT ENTRY   * 00368\n*                IF MORE THAN 1 ACCT ENTRY -                          * 00369\n*                THE 2ND HALF BYTE IS THE NUMBER OF ACCT ENTRIES      * 00370\n*                FOLLOWED BY A VARIABLE LENGTH LIST OF HASP PARAMETERS* 00371\n*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               * 00372\n*                IF ONLY 1 ACCT ENTRY -                               * 00373\n*                THE 2ND HALF BYTE IS THE LENGTH OF THE ACCT ENTRY    * 00374\n*                FOLLOWED BY THE ACCOUNTING ENTRY                     * 00375\n*            5C) PGMR NAME PRECEDED BY A 1 BYTE LENGTH FIELD          * 00376\n*            6)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS           * 00377\n*                EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF   * 00378\n*                POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF      * 00379\n*                SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD * 00380\n*                WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER * 00381\n*                POSITIONAL PARAMETER.                                * 00382\n*********************************************************************** 00383\n         SPACE 6                                                        00384\nJOBCARD  EQU   *                                                        00385\n*********************************************************************** 00386\n*        INITIALIZE ENTRY IN TABLE SINCE ONE MUST ALWAYS BE CREATED   * 00387\n*********************************************************************** 00388\nJOBINIT  L     R14,JCTADDR         LOAD JCT ADDRESS                     00389\n         USING JCT,R14             SET ADDRESSABILITY TO JCT        WEJ 00390\n         MVI   ENTRYTYP,TYPJOB     SET TO JOB ENTRY                     00391\n         MVC   JENTRY,BLANKS       BLANK ENTIRE JOB INFO                00392\n         ST    R7,LASTENT          SAVE ADDR OF LAST ENTRY              00393\n         ST    R7,FIRSTENT         SAVE ADDR OF FIRST ENTRY             00394\n         XC    CLASSFLD,CLASSFLD   ZERO DETERMINED JOB CLASS            00395\n         XC    MAXTIME,MAXTIME     CLEAR MAXIMUM CPU TIME               00396\n         TM    JCTJOBFL,JCTSTCJB   IS THIS A STARTED TASK?              00397\n         BNO   JOBINIT1            NO, BRANCH                           00398\n         OI    JOBIND,JOBSTC       TURN ON STC INDICATOR                00399\n         MVC   JCTROOMN,=C'USSM    '   FORCE ROOM NUMBER TO USSM        00400*45\n         MVC   NJHGROOM-NJH+JCTNJHDR,=C'USSM    '                   WEJ 00401*45\n         B     JOBINIT2            BRANCH                               00402*41\nJOBINIT1 TM    JCTJOBFL,JCTTSUJB   IS THIS A TSO USER?                  00403\n         BNO   CKAUTH0             NO, BRANCH                           00404**5\n         OI    JOBIND,JOBTSO       TURN ON TSO INDICATOR                00405\n         B     JOBINIT2            BRANCH                               00406*41\nCKAUTH0  DS    0H                                                   WEJ 00407**5\n         CLC   JCTINDEV,C#UCC7     IS SOURCE UCC7 STARTED TASK      WEJ 00408*36\n         BNE   CKAUTH1               YES, TURN ON PROD BIT.         WEJ 00409*41\nJOBISPRD DS    0H                                                   WEJ 00410*36\n         OI    JOBIND,JOBPROD    TURN ON PRODUCTION JOB INDICATOR       00411**5\n         B     JOBINIT2          GO TO FINISH INIT                  WEJ 00412**5\nCKAUTH1  DS    0H                                                   WEJ 00413**5\n         OI    JOBIND,JOBTEST    TURN ON TEST JOB INDICATOR             00414**5\n         CLI   JCTINDEV+7,C'*'   IF NOT TSO SUBMIT DO NO FURTHER    WEJ 00415**5\n         BNE   JOBINIT2             AUTHORITY CHECK                 WEJ 00416**5\n         CLC   C#FCH,JCTINDEV    IS THIS A TECH SUPPORT TSO SUBMIT  WEJ 00417**5\n         BNE   CKAUTH2               NO, CHECK FOR COMMUNICATIONS   WEJ 00418**5\n         OI    JOBIND,JOBTECH    TURN ON TECH SUPPORT INDICATOR     WEJ 00419**5\n         B     JOBINIT2          GO FINISH INITIALIZATION           WEJ 00420**5\nCKAUTH2  DS    0H                                                       00421**5\n         CLC   C#FCB,JCTINDEV    IS THIS AN OPERATIONS SUBMISSION?  WEJ 00422**5\n         BNE   CKAUTH3           NO, CHECK FOR COMMUNICATIONS       WEJ 00423**5\n         OI    JOBIND,JOBOPER    TURN ON OPERATIONS BIT             WEJ 00424**5\n         B     JOBINIT2          FINISH INITIALIZATION              WEJ 00425**5\nCKAUTH3  DS    0H                                                       00426**5\n         CLC   C#FCC,JCTINDEV    IS THIS AN COMMUNICATIONS SUBMIT?  WEJ 00427**5\n         BNE   JOBINIT2          NO, FINISH INITIALIZATION          WEJ 00428**5\n         OI    JOBIND,JOBCOMM    TURN ON COMMUNICATIONS BIT         WEJ 00429**5\n         DROP  R14                 DROP ADDRESSABILITY TO JCT           00430\n*********************************************************************** 00431\n*        INITIALIZE MSG HANDLER PARAMETERS ON FIRST ENTRY             * 00432\n*********************************************************************** 00433\nJOBINIT2 LA    R15,1               SET REG TO 1                         00434\n         ST    R15,CARDNO          SET CARD COUNT TO 1                  00435\n         XC    MSGCOUNT,MSGCOUNT   ZERO MESSAGE COUNTER                 00436\n         XC    RESOURCE,RESOURCE   CLEAR JES2 RESOURCES                 00437\n         MVI   INCLASS,C'A'        SET INPUT DEFAULT CLASS TO 'A'       00438\n         SPACE 4                                                        00439\n*********************************************************************** 00440\n*        START SCAN OF JOB CARD POSITIONAL PARAMETERS                 * 00441\n*            1ST POS PARAM IS ACCT NUMBER UNLESS ONLY 1 ENTRY         * 00442\n*            2ND POS PARAM IS BIN LOC UNLESS ONLY 2 ENTRIES           * 00443\n*            3RD POS PARAM IS EST TIME UNLESS ONLY 3 ENTRIES          * 00444\n*            LAST ENTRY IS ALWAYS PROGRAMMER NAME                     * 00445\n*********************************************************************** 00446\nJOBSTART XC    LASTEXEC,LASTEXEC NO PREVIOUS EXEC CARD                  00447\n         LA    R4,STRJKEY     LOAD START OF TRUE TEXT                   00448*19\n         ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS           00449*19\n         LA    R4,1(,R4)      INCR PAST JOB POSITIONAL PARM KEYWORD     00450*19\n         SLR   R15,R15        CLEAR REGISTER FOR IC                     00451\n         IC    R15,0(R4)      LOAD NUMBER OF POS SUBPARAMS              00452*19\n         CH    R15,H#3        SEE IF THREE (JOBNAME, ACCT, PGMRNAME)    00453\n         BNL   JOBCK1         YES, BRANCH                               00454\n         TM    JOBIND,JOBSTC+JOBTSO ARE ALL PARAMETERS REQUIRED?        00455\n         BM    JOBCK1         NO, BRANCH                                00456\n         LA    R15,P@2        SET ERROR NUMBER                          00457\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00458**7\n         B     JOBLOOP        BYPASS FIELDS                             00459**5\nJOBCK1   LA    R4,1(,R4)      INCR PAST NUM OF POS SUBPARAMS            00460*19\nJOBNM    DS    0H                                                       00461\n         SLR   R3,R3          CLEAR REG FOR ICM                         00462\n         ICM   R3,1,0(R4)     LOAD JOB NAME LENGTH                      00463*19\n         BZ    JOBNM2         LENGTH ZERO, DO NOT MOVE                  00464\n         CH    R3,H#8         SEE IF LENGTH > 8                         00465\n         BNH   JOBNM1         NO, CONTINUE                              00466\n         LA    R15,P@3        SET ERROR NUMBER                          00467\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00468**7\n         B     JOBLOOP        BYPASS FIELDS                             00469\nJOBNM1   DS    0H                                                       00470\n         BCTR  R3,0           MAKE MACHINE LENGTH                       00471\n*        EX    R3,MOVE1       MOVE JOB NAME TO SAVE TABLE               00472\n         LA    R3,1(,R3)      RESTORE LENGTH                            00473\nJOBNM2   LA    R4,1(R3,R4)    INCREMENT PAST JOB NAME                   00474*19\n         TM    JOBIND,JOBSTC+JOBTSO ARE ACCOUNTING/PGMR NAME REQUIRED?  00475\n         BM    JOBLOOP        NO, BRANCH                                00476\n         SPACE 4                                                        00477\nJOBACT   SLR   R5,R5          CLEAR REGISTER FOR ICM                    00478*19\n         ICM   R5,1,0(R4)     INSERT CONTROL BYTE                       00479*19\n         BNM   JOBACT1        HIGH BIT NOT ON, ONLY 1 PARAMETER         00480\n         N     R5,F#127       'AND' OUT THE HIGH ORDER BIT              00481*19\n         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE               00482*19\n         B     JOBACT2        BRANCH                                    00483\nJOBACT1  LA    R5,1           SET PARAM COUNT TO 1                      00484*19\n         EJECT                                                          00485\n*********************************************************************** 00486\n*        WE ARE CHECKING THE FIRST ACCOUNTING FIELD FOR FORMATTING    * 00487\n*        ERRORS.  THE LENGTH OF THE FIRST ACCOUNTING FIELD MUST BE 7. * 00488*16\n*                                                                     * 00489\n*        THE FIRST ACCOUNTING FIELD IS FORMATTED AS FOLLOWS:          * 00490\n*                                                                     * 00491\n*        1)  2 CHARACTER GROUP CODE, CURRENTLY ASSUMED ALPHA       WEJ* 00492\n*        2)  5 DIGIT BUDGET NUMBER                                 WEJ* 00493\n*                                                                     * 00494\n*********************************************************************** 00495\nJOBACT2  DS    0H                                                       00496\n         SLR   R3,R3          CLEAR REG FOR ICM                         00497\n         ICM   R3,1,0(R4)     LOAD PARAMETER LENGTH                     00498*19\n         BNZ   JOBACT2A       NOT ZERO, BRANCH                          00499\n         LA    R15,P@35       SET ERROR NUMBER                          00500\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00501**7\n         B     JOBACT17       BYPASS ACCT NUM                           00502\n*********************************************************************** 00503\n*        CHECK THE LENGTH OF THE FIRST ACCOUNTING FIELD FOR 7.     WEJ* 00504\n*********************************************************************** 00505\nJOBACT2A DS    0H                                                       00506\n         CH    R3,H#7         COMPARE LENGTH TO 7                   WEJ 00507\n         BE    JOBACT3        ACCT LENGTH = 7, BRANCH               WEJ 00508\n         LA    R15,P@4        SET ERROR NUMBER                          00509\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00510**7\n         B     JOBACT17       BYPASS FIELD                              00511\nJOBACT3  DS    0H                                                       00512**5\n         STC   R3,JACCTLEN    SAVE LENGTH OF ACCT NUM                   00513**5\n         BCTR  R3,0           MAKE MACHINE LENGTH                       00514**5\n         EX    R3,MOVE2       MOVE ACCT NUM TO SAVE TABLE               00515\n         EX    R3,MOVE16      MOVE ACCT NUM TO WORK AREA                00516\n         LA    R3,1(,R3)      RESTORE R3 TO TRUE SIZE OF FIELD      WEJ 00517*17\n*********************************************************************** 00518\n*        CURRENTLY ALL PHILIPS LIGHTING ACCT NUMBERS START WITH    WEJ* 00519\n*        'FC'.  THIS WILL PROBABLY CHANGE IN THE FUTURE AND THIS   WEJ* 00520\n*        CODE CHECKS THAT THE FIRST 2 DIGITS ARE ALPHABETIC        WEJ* 00521\n*                                                                  WEJ* 00522\n*                     A L L    J O B S                                * 00523\n*                                                                     * 00524\n*        1)  THE FIRST 2 CHARACTERS MUST BE ALPHABETIC             WEJ* 00525\n*        2)  THE BUDGET MUST BE 5 NUMERIC CHARACTERS               WEJ* 00526\n*********************************************************************** 00527\n         L     R2,=A(ALPHATBL) POINT TO ALPHA TRT TABLE             WEJ 00528**5\n         TRT   1(2,R4),0(R2)      TEST 1ST 2 CHRS FOR ALPHABETIC    WEJ 00529*19\n         BZ    JOBACT15                                             WEJ 00530**5\nJOBACT14 LA    R15,P@40           SET ERROR NUMBER                      00531\n         BAL   R14,MSGRTN         GO ISSUE ERROR MSG                    00532**7\nJOBACT15 DS    0H                                                       00533\n         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRT TABLE           WEJ 00534*16\n         TRT   3(5,R4),0(R2)     TEST CHRS 3-7 FOR NUMERIC          WEJ 00535*19\n         BZ    JOBACT18                                             WEJ 00536**5\nJOBACT17 LA    R15,P@41           SET ERROR NUMBER                      00537\n         BAL   R14,MSGRTN         GO ISSUE ERROR MSG                    00538**7\nJOBACT18 LA    R4,1(R3,R4)        INCREMENT PAST PARM                   00539*19\n         SLR   R3,R3              CLEAR REGISTER 3                      00540\n         IC    R3,0(,R4)          LOAD LENGTH OF NEXT PARM              00541*19\n         BCT   R5,JOBACT18        LOOP UNTIL ALL ACCT FIELDS DONE       00542*19\n         SPACE 4                                                        00543\n*********************************************************************** 00544\n*        SAVE THE PROGRAMMER NAME                                     * 00545\n*********************************************************************** 00546\nJOBPGMR  DS    0H                                                       00547\n         SLR   R3,R3          CLEAR REG 3                               00548\n         ICM   R3,1,0(R4)     LOAD PGMR NAME LENGTH                     00549*19\n         BZ    PGMREND        ZERO LENGTH, MISSING PARAM                00550\n         CH    R3,H#20        SEE IF LENGTH > 20                        00551\n         BNH   JOBPGMR1       NO, CONTINUE                              00552\n         LA    R15,P@5        SET ERROR NUMBER                          00553\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00554**7\n         B     JOBLOOP        BYPASS FIELDS                             00555\nJOBPGMR1 DS    0H                                                       00556\n         CH    R3,H#9         SEE IF LENGTH > 9                         00557\n         BNH   PGMR10         IF NOT > 9 , OK                           00558\n         LH    R3,H#9         MAKE LENGTH = 10                          00559\nPGMR10   BCTR  R3,0           MAKE MACHINE LENGTH                       00560\n         EX    R3,MOVE3       MOVE PGMR NAME TO SAVE TABLE              00561\n         ICM   R3,1,0(R4)     RELOAD PGMR NAME LENGTH                   00562*19\n         EJECT                                                          00563\n*********************************************************************** 00564\n*        IF THE JOB IS SUBMITTED FROM UCC7 IT IS CONSIDERED A      WEJ* 00565\n*        PRODUCTION JOB (EXIT 2 IS USED TO SET JCTINDEV TO THE     WEJ* 00566\n*        NAME OF THE OWNER OF AN INTERNAL READER SO IF UCC7        WEJ* 00567\n*        SUBMITS THE JOB THE FULL 8 CHARACTERS WILL BE UCC7        WEJ* 00568\n*        FOLLOWED BY 4 SPACES.  IF UCC7 IS NOT A STARTED TASK,     WEJ* 00569\n*        THE \"J\" OR \"T\" FOR JOB OR TSO-ID WILL BE IN POSITION OF   WEJ* 00570\n*        JCTINDEV.  CERTAIN TSO ID'S WILL BE RECOGNIZED AS         WEJ* 00571\n*        PRIVILEGED AND TREATED ACCORDINGLY                        WEJ* 00572\n*            A)  FCBXXX - OPERATIONS SUBMISSIONS                      * 00573\n*            B)  FCCXXX - COMMUNICATIONS SUBMISSIONS                  * 00574\n*            B)  FCHXXX - TECH SERVICES SUBMISSIONS                   * 00575\n*                                                                     * 00576\n*********************************************************************** 00577\nPGMREND  DS    0H                CHECK AUTHORITY                    WEJ 00578\n         B     JOBLOOP           LOOP BACK                          WEJ 00579\n         SPACE 2                                                        00580\n*********************************************************************** 00581\n*        JOB CLASS                                                    * 00582\n*********************************************************************** 00583\nJCLASS   CLI   0(R4),CLASSJK  SEE IF CLASS=KEY                          00584*19\n         BNE   JPERF          NO, BRANCH                                00585\n         MVC   INCLASS,3(R4)  SAVE INPUT CLASS                          00586*19\n         B     JOBLOOP        GO GET NEXT PARAM                         00587\n         SPACE 2                                                        00588\n*********************************************************************** 00589\n*        JOB PERFORM                                                  * 00590\n*********************************************************************** 00591\nJPERF    CLI   0(R4),PRFMJK   SEE IF PERFORM= KEY                       00592*19\n         BNE   JADDR          NO, BRANCH                                00593\n         B     JOBLOOP        PERFORM CONTROLLED BY ICS                 00594\n         SPACE 2                                                        00595\n*********************************************************************** 00596\n*        JOB ADDRSPC                                                  * 00597\n*********************************************************************** 00598\nJADDR    CLI   0(R4),ADRSPJK  SEE IF ADDRSPC= KEY                       00599*19\n         BNE   JPRTY          NO, BRANCH                                00600\n         TM    JOBIND,JOBPROD+JOBTECH+JOBSTC+JOBOPER+JOBCOMM ALLOW? WEJ 00601\n         BM    JOBLOOP        ADDRSPC OK ON JOB CARD                WEJ 00602\n         LA    R15,P@7        SET ERROR NUMBER                      WEJ 00603\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                    WEJ 00604**7\n         B     JOBLOOP        BYPASS FIELDS                         WEJ 00605\n         SPACE 4                                                        00606\n*********************************************************************** 00607\n*        JOB PRTY                                                     * 00608\n*********************************************************************** 00609\nJPRTY    CLI   0(R4),PRTYJK   SEE IF PRTY= KEY                          00610*19\n         BNE   JESTIME        NO, BRANCH                                00611\n         B     JOBLOOP        BYPASS CHECKING SINCE SET BY TIME     WEJ 00612**5\n*        LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR          WEJ 00613*19\n*        SLR   R5,R5          CLEAR REGISTER FOR ICM                WEJ 00614*19\n*        ICM   R5,1,0(R4)     INSERT NUMBER OF SUBPARAMETERS        WEJ 00615*19\n*        BZ    JOBLOOP        NONE, IGNORE                          WEJ 00616**5\n*        LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE           WEJ 00617*19\n*        SLR   R3,R3          CLEAR REGISTER FOR ICM                WEJ 00618**5\n*        ICM   R3,1,0(R4)     LOAD LENGTH OF PRTY VALUE             WEJ 00619*19\n*        BZ    JOBLOOP        ZERO, NULL VALUE, EXIT                WEJ 00620**5\n*        BCTR  R3,0           MAKE MACHINE LENGTH                   WEJ 00621**5\n*        EX    R3,PACK1       PACK PRTY                             WEJ 00622**5\n*        CP    DOUBLE,P#0     SEE IF PRTY=0                         WEJ 00623**5\n*        BE    JOBLOOP        YES, DEFAULT, ALWAYS OK               WEJ 00624**5\n*        B     JOBLOOP        PRTY OVERRIDDEN BY TIME CALC AT END   WEJ 00625**5\n         EJECT                                                          00626\n*********************************************************************** 00627\n*        JOB TIME                                                     * 00628\n*********************************************************************** 00629\nJESTIME  CLI   0(R4),TIMEJK   SEE IF TIME= KEY                          00630*19\n         BNE   JREGN          NO, BRANCH                                00631\n         LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR              00632*19\n         SLR   R5,R5          CLEAR REGISTER FOR ICM                    00633*19\n         ICM   R5,1,0(R4)     INSERT NUMBER OF SUBPARAMETERS            00634*19\n         BZ    JOBLOOP        NONE, IGNORE                              00635\n         STC   R5,SAVETCNT    SAVE THE NUMBER OF SUB-PARMS              00636*19\n         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE               00637*19\n         SLR   R3,R3          CLEAR REGISTER FOR ICM                    00638\n         ICM   R3,1,0(R4)     LOAD LENGTH OF FIRST TIME FIELD           00639*19\n         BZ    JESTIME4       ZERO, ONLY SECONDS ENTERED, GO CALC       00640\n         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH              00641**5\nJESTIME1 DS    0H                                                   WEJ 00642**5\n         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT                 00643**5\n         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ 00644**6\n         BNZ   JESTIME2       NOT NUMERIC                           WEJ 00645**5\n         EX    R3,PACK1       PACK TIME                                 00646\n         CVB   R15,DOUBLE     CONVERT TO BINARY                         00647\n         LTR   R15,R15        SEE IF ZERO                           WEJ 00648\n         BZ    JESTIME4       ZERO, ONLY SECONDS ENTERED, GO CALC       00649\n         CH    R15,H#1440     SEE IF TIME = 1440                        00650\n         BNE   JESTIME3       NO, BRANCH TO NEXT PARM                   00651\n         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM 1440?  WEJ 00652\n         BM    JESTIME3       YES, TIME=1440 OK ON JOB CARD             00653\n         LA    R15,P@9        SET ERROR NUMBER                          00654\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00655**7\n         B     JOBLOOP        GET OUT                                   00656\nJESTIME2 LA    R15,P@8        SET ERROR NUMBER                          00657\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00658**7\n         B     JOBLOOP        GET OUT                                   00659\nJESTIME3 DS    0H                                                       00660\n         MH    R15,H#60       MULTIPLY BY 60 TO GET TIME IN SECONDS     00661\n         ST    R15,MAXTIME    STORE TIME                                00662\nJESTIME4 DS    0H                                                       00663\n         CLI   SAVETCNT,X'01' CHK NUMBER OF SUB PARAMETERS              00664\n         BNH   JOBLOOP        NO, FINISHED                              00665\n         SLR   R5,R5          CLEAR REGISTER 5                          00666*19\n         ICM   R5,1,0(R4)     GET LENGTH OF FIRST SUBPARAMETER          00667*19\n         LA    R4,1(R5,R4)    POINT TO SECOND SUBPARAMETER              00668*19\n         SLR   R3,R3          ZERO OUT R3 FOR ICM                       00669\n         ICM   R3,1,0(R4)     INSERT LENGTH OF SUB-PARARM               00670*19\n         BZ    JOBLOOP        IF ZERO, FINISHED WITH TIME               00671\n         CH    R3,H#2         IS LENGTH GREATER THAN 2                  00672\n         BH    JESTIME2       YES, GO TO TIME ERROR                     00673\n         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH              00674**5\n         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT                 00675**5\n         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ 00676**6\n         BNZ   JESTIME2       NOT NUMERIC                           WEJ 00677**5\n         EX    R3,PACK1       PACK TIME                                 00678\n         CVB   R15,DOUBLE     CONVERT IT TO BINARY                      00679\n         CH    R15,H#60       IS THE NUMBER OF SECONDS NOT < 60         00680\n         BNL   JESTIME2       YES, GO TO ERROR                          00681\n         A     R15,MAXTIME    ADD PREVIOUSLY CALCULATED TIME, IF ANY    00682\n         ST    R15,MAXTIME    STORE RESULT                              00683\n         B     JOBLOOP        GO TO CHECK REST OF CARD.                 00684\n         EJECT                                                          00685\n*********************************************************************** 00686\n*        JOB REGION                                                   * 00687\n*********************************************************************** 00688\nJREGN    CLI   0(R4),REGINJK  SEE IF REGION= KEY                        00689*19\n         BNE   JTYPRUN        NO, BRANCH                                00690\n         LA    R4,1(,R4)      INCREMENT PAST KEYWORD                    00691*19\n         SLR   R3,R3          CLEAR REG FOR ICM                         00692\n         ICM   R3,1,0(R4)     LOAD SUBPARAMETER COUNT                   00693*19\n         BZ    JOBLOOP        NO SUBPARAMETERS, BRANCH                  00694\n         LA    R4,1(,R4)      INCREMENT PAST NUMBER OF FIELDS           00695*19\n         ICM   R3,1,0(R4)     LOAD LENGTH OF REGION PARAM               00696*19\n         BZ    JOBLOOP        ZERO, NULL, BRANCH                        00697\n         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED                00698\n         BNH   JREGN0         NO, CONTINUE                              00699\n         LA    R15,P@13       SET ERROR NUMBER                          00700\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00701**7\n         B     JOBLOOP        GET OUT                                   00702\nJREGN0   DS    0H                                                       00703\n         CH    R3,H#3         SEE IF AT LEAST 3 CHARACTERS              00704\n         BL    EXELOOP        NO, MAX IS 99K, IGNORE                    00705\n         LA    R15,0(R3,R4)   POINT TO LAST CHAR OF REGION SIZE         00706*19\n         NI    JLIBIND,255-JREGIONK TURN OFF REGION SIZE IN 'K' IND     00707\n         CLI   0(R15),C'K'    END IN 'K'                                00708\n         BNE   JREGN1         NO, BRANCH                                00709\n         BCTR  R3,0           REDUCE REGION LENGTH BY 1                 00710\n         OI    JLIBIND,JREGIONK REMEMBER REGION SIZE IN 'K'             00711\nJREGN1   DS    0H                                                       00712**5\n         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH              00713**5\n         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT                 00714**5\n         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ 00715**6\n         BNZ   JREGN4         NOT NUMERIC                           WEJ 00716**5\n         EX    R3,PACK1       PACK REGION SIZE                          00717\n         CVB   R15,DOUBLE     CONVERT REGION SIZE TO BINARY             00718\n         TM    JLIBIND,JREGIONK WAS REGION SPECIFIED IN 'K'             00719\n         BO    JREGN3         YES, BRANCH                               00720\n         SRA   R15,10         DIVIDE BY 1024 FOR 'K' VALUE              00721\nJREGN3   STH   R15,JREGION    STORE REGION SIZE IN TABLE                00722\n         B     JOBLOOP        BRANCH                                    00723\nJREGN4   LA    R15,P@14       SET ERROR NUMBER                          00724\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00725**7\n         B     JOBLOOP        GET OUT                                   00726\n         SPACE 4                                                        00727\n*********************************************************************** 00728\n*        JOB TYPRUN                                                   * 00729\n*********************************************************************** 00730\nJTYPRUN  CLI   0(R4),TYPRUNJK SEE IF TYPRUN= KEY                        00731*19\n         BNE   JOBLOOP        NO, BRANCH                                00732\n         LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR              00733*19\n         SLR   R5,R5          CLEAR REGISTER FOR ICM                    00734*19\n         ICM   R5,1,0(R4)     INSERT NUMBER OF SUBPARAMETERS            00735*19\n         BZ    JOBLOOP        NONE, IGNORE                              00736\n         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE               00737*19\n         SLR   R3,R3          CLEAR REGISTER FOR ICM                    00738\n         ICM   R3,1,0(R4)     LOAD LENGTH OF FIRST VALUE FIELD          00739*19\n         CH    R3,H#4         SEE IF CORRECT LENGTH                     00740\n         BNE   JOBLOOP        NO, EXIT                                  00741\n         CLC   C#HOLD,1(R4)    SEE IF TYPRUN=HOLD                       00742*19\n         BNE   JOBLOOP        NO, EXIT                                  00743\n         OI    JOBIND2,HELD   TURN ON HELD INDICATOR                    00744\n         EJECT                                                          00745\n*********************************************************************** 00746\n*        THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING         * 00747\n*        PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR       * 00748\n*        FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT      * 00749\n*        WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER     * 00750\n*        BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF       * 00751\n*        SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.        * 00752\n*        IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY    * 00753\n*        A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH      * 00754\n*        ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A         * 00755\n*        SINGLE SUBPARAMETER.                                         * 00756\n*********************************************************************** 00757\nJOBLOOP  L     R4,PARMADDR    RESTORE START OF PARAMETER ADDRESS        00758*19\n         SLR   R2,R2          CLEAR REGISTER FOR ICM                    00759**4\n         LA    R4,1(,R4)      INCREMENT PAST KEYWORD                    00760*19\n         ICM   R2,1,0(R4)     LOAD SUBPARAMETER COUNT                   00761*19\n         BNZ   JOBLOOP1       OK, BRANCH INTO ROUTINE                   00762\n         LA    R4,1(,R4)      NONE, INCREMENT PAST COUNT                00763*19\n         B     JOBLOOP5       AND GET OUT OF ROUTINE                    00764\nJOBLOOP1 LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR              00765*19\nJOBLOOP2 SLR   R5,R5          CLEAR REGISTER FOR ICM                    00766*19\n         ICM   R5,1,0(R4)     LOAD PARAMETER LENGTH                     00767*19\n         BNM   JOBLOOP3       HIGH BIT NOT ON, ONLY 1 PARAMETER         00768\n         N     R5,F#127       'AND' OUT THE HIGH ORDER BIT              00769*19\n         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE               00770*19\n         B     JOBLOOP4       BRANCH                                    00771\nJOBLOOP3 LA    R5,1           SET PARAM COUNT TO 1                      00772*19\nJOBLOOP4 SLR   R3,R3          CLEAR REGISTER FOR ICM                    00773\n         ICM   R3,1,0(R4)     LOAD PARAMETER LENGTH                     00774*19\n         LA    R4,1(R3,R4)    INCREMENT PAST PARM                       00775*19\n         BCT   R5,JOBLOOP4    LOOP UNTIL PROCESSED ALL PARMS            00776*19\n         BCT   R2,JOBLOOP2    LOOP UNTIL PROCESSED ALL PARMS            00777**4\nJOBLOOP5 ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS           00778*19\n*********************************************************************** 00779\n*        WE ARE LOOKING FOR INVALID KEYWORDS OR KEYWORDS HAVING       * 00780\n*        ILLEGAL VALUES OR OTHER THAN DEFAULT                         * 00781\n*********************************************************************** 00782\n*                                                                       00783\n*********************************************************************** 00784\n*        KEYWORD ENTRIES ARE NORMALLY AS FOLLOWS:                     * 00785\n*            1)  1 BYTE HEX KEYWORD                                   * 00786\n*            2)  1 BYTE NUMBER OF SUBPARAMETERS                       * 00787\n*            3)  LIST OF POSITIONAL SUBPARAMETERS EACH PRECEDED BY A  * 00788\n*                1 BYTE LENGTH FIELD                                  * 00789\n*        THERE ARE OCCASIONS WHEN THE POSITIONAL SUBPARAMETERS WILL   * 00790\n*        HAVE POSITIONAL SUBPARAMETERS THEMSELVES                     * 00791\n*        THIS WILL BE FLAGGED IN THE LENGTH FIELD FOR THAT SUBPARAM   * 00792\n*        BY A HIGH ORDER BIT IN THE FIELD.  IN THIS CASE, THIS IS NOT * 00793\n*        A LENGTH FIELD, BUT A COUNT OF SUBPARAMETERS, WHICH WILL BE  * 00794\n*        A LIST OF PARAMETERS, EACH PRECEDED BY A 1 BYTE LENGTH FIELD.* 00795\n*        THUS THE ENTRY FOR A SUBPARAMETER WITH SUBPARAMETERS WILL    * 00796\n*        APPEAR AS FOLLOWS:                                           * 00797\n*            1)  A 1 BYTE NUMBER OF SUBPARAMS AS INDICATED BY A       * 00798\n*                HIGH ORDER BIT                                       * 00799\n*            2)  A LIST OF SUBPARAMETERS EACH PRECEDED BY A 1 BYTE    * 00800\n*                LENGTH FIELD                                         * 00801\n*********************************************************************** 00802\n*                                                                       00803\nJOBPARMS CLI   0(R4),ENDK     END OF TEXT STRING?????                   00804*19\n         BNE   JCLASS         NO, BRANCH                                00805\n         SPACE                                                          00806\n*********************************************************************** 00807\n*        IF THE JOB CPU TIME LIMIT WAS NOT SPECIFIED ON THE JOB       * 00808\n*        CARD, THE ANR VERSION OF THE EXIT OVERRODE WITH 120       WEJ* 00809\n*        WHILE THE MODIFED VERSION WILL FORCE A PRIORITY 0 AND     WEJ* 00810\n*        USE THE SYSTEM DEFAULT                                    WEJ* 00811\n*********************************************************************** 00812\n         L     R14,JCTADDR                                              00813\n         USING JCT,R14                                                  00814\n         MVI   JCTPRIO,X'00'  SET PRIORITY TO ZERO                      00815\n         ICM   R15,B'1111',MAXTIME LOAD TIME FROM JOB CARD (IF ANY)     00816\n         BZ    GETNEXT        YES, GO TO GET NEXT RECORD                00817\n         L     R1,A#PTYPRF                                              00818\nJOBENDLP DS    0H                                                       00819\n         LA    R1,L'PRTYENT(,R1) POINT TO NEXT ENTRY                    00820\n         CLC   MAXTIME,0(R1)  COMPARE MAX TIME TO PRTY TABLE            00821\n         BH    JOBENDLP       LOOP WHILE GREATER THAN ENTRY             00822\n         MVC   JCTPRIO,L'PRTYTIME(R1)                                   00823\n         B     GETNEXT                                                  00824\n         DROP  R14                                                      00825\n         EJECT                                                          00826\n*********************************************************************** 00827\n*        THE TEXT OF THE EXEC CARD TEXT IS AS FOLLOWS                 * 00828\n*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        * 00829\n*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          * 00830\n*            3)  1 BYTE OF MISCELLANEOUS INDICATORS                   * 00831\n*            4)  1 BYTE INDICATOR X'94' INDICATING EXEC POS INFORMATN * 00832\n*            5)  1 BYTE NUMBER OF EXEC POSITIONAL PARAMETERS          * 00833\n*                THE 1ST POS PARAMETER IS THE STEP NAME               * 00834\n*                ALL OTHER POS PARAMETERS WILL BE IGNORED             * 00835\n*            6)  VARIABLE LENGTH LIST OF EXEC POS PARAMETERS          * 00836\n*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               * 00837\n*            7)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS           * 00838\n*                EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF   * 00839\n*                POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF      * 00840\n*                SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD * 00841\n*                WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER * 00842\n*                POSITIONAL PARAMETER.                                * 00843\n*********************************************************************** 00844\n         SPACE 4                                                        00845\nEXECARD  EQU   *                                                        00846\n*********************************************************************** 00847\n*        UPDATE LAST EXEC TABLE (IF NEEDED) WITH UNIT INFO            * 00848\n*********************************************************************** 00849\nEXECUPDT L     R7,LASTEXEC    LOAD ADDR OF LAST EXEC ENTRY              00850\n         LTR   R7,R7          SEE IF ADDR = 0                           00851\n         BZ    EUPDT1         IF ZERO, NO UPDATE, BRANCH                00852\n         MVC   ETAPES,TAPECNT MOVE STEP TAPE UNIT CNT TO TABLE          00853\n         MVC   EPRIVS,PRIVCNT MOVE STEP PRIV UNIT CNT TO TABLE          00854\n         XC    TAPECNT,TAPECNT ZERO TAPE UNIT CNT                       00855\n         XC    PRIVCNT,PRIVCNT ZERO PRIV UNIT CNT                       00856\n         XC    LASTEXEC,LASTEXEC ZERO ADDR OF LAST EXEC ENTRY           00857\nEUPDT1   TM    STREINDC,ETXPRCV STATEMENT INVOKE A PROCEDURE?           00858\n         BO    PROCARD        YES, BRANCH                               00859\n         SPACE 4                                                        00860\n*********************************************************************** 00861\n*        INITIALIZE NEW STEP ENTRY IN TABLE                           * 00862\n*********************************************************************** 00863\nEXECINIT LH    R15,ENTCOUNT   LOAD TABLE ENTRY COUNT                    00864\n         LA    R15,1(,R15)    ADD 1 TO COUNT                            00865\n         CH    R15,MAXENTS    SEE IF MAXIMUM REACHED                    00866\n         BNL   TBLFULL        MAXIMUM REACHED, TAKE DUMP & EXIT         00867\n         STH   R15,ENTCOUNT   STORE NEW ENTRY COUNT                     00868\n         L     R7,LASTENT     LOAD ADDR OF LAST ENTRY IN TABLE          00869\n         LA    R7,ENTLEN(,R7) INCREMENT TO NEXT ENTRY                   00870\n         ST    R7,LASTENT     SAVE ADDR OF LAST ENTRY IN TABLE          00871\n         ST    R7,LASTEXEC    SAVE ADDR OF LAST EXEC ENTRY              00872\n         MVI   ENTRYTYP,TYPEXEC  SET TO EXEC ENTRY                      00873\n         MVC   EENTRY,BLANKS     BLANK MOST OF EXEC INFO                00874\n         XC    ELIBIND(7),ELIBIND ZERO REST OF EXEC INFO                00875\n* * *    MVC   EREGION,H#512     SET DEFAULT REGION SIZE TO 512K    WEJ 00876\n         TM    STREINDC,ETXPROC  STATEMENT FROM A PROC??                00877\n         BNO   EINIT1            NO, BRANCH                             00878\n         MVC   EJSTEP,SAVEPROC   MOVE JOB STEP NAME TO TABLE            00879\nEINIT1   TM    STREINDC,ETXSTPLB STEP HAVE STEPLIB DD??                 00880\n         BNO   EINIT2            NO, BRANCH                             00881\n         OI    ELIBIND,ESTEPLIB  SET INDICATOR IN TABLE                 00882\nEINIT2   TM    JOBIND2,JOBLIB    DOES JOB HAVE JOBLIB??                 00883\n         BNO   EXECSTAR          NO, BRANCH                             00884\n         OI    ELIBIND,EJOBLIB   SET INDICATOR IN TABLE                 00885\n         SPACE 4                                                        00886\nEXECSTAR MVC   ECARDNO,CARDNO   SAVE CARD NUMBER OF THIS STATEMENT      00887\n         LA    R4,STREKEY       LOAD START OF TRUE TEXT                 00888*19\n         ST    R4,PARMADDR      SAVE START OF PARAMETER ADDRESS         00889*19\nEXECPARM CLI   0(R4),ENDK       END OF TEXT STRING?????                 00890*19\n         BE    PROCSEAR         YES, GO SEE IF FROM A PROC              00891\n         EJECT                                                          00892\n*********************************************************************** 00893\n*        EXEC STEPNAME                                                * 00894\n*********************************************************************** 00895\nESTEPN   CLI   0(R4),EXECK    SEE IF STEPNAME KEY                       00896*19\n         BNE   EPGM           NO, BRANCH                                00897\n         SLR   R5,R5          CLEAR REG FOR ICM                         00898*19\n         ICM   R5,1,1(R4)     LOAD NUMBER OF SUBPARAMS                  00899*19\n         BZ    EXELOOP        ZERO, NO STEP NAME                        00900\n         SLR   R3,R3          CLEAR REG FOR ICM                         00901\n         ICM   R3,1,2(R4)     LOAD LENGTH OF 1ST POS SUBPARAM           00902*19\n         BZ    EXELOOP        ZERO, NO STEP NAME, BRANCH                00903\n         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED                00904\n         BNH   ESTEPN0        NO, CONTINUE                              00905\n         LA    R15,P@11       SET ERROR NUMBER                          00906\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00907**7\n         B     EXELOOP        GET OUT                                   00908\nESTEPN0  DS    0H                                                       00909\n         BCTR  R3,0           MAKE MACHINE LENGTH                       00910\n         TM    STREINDC,ETXPROC STATEMENT FROM A PROC                   00911\n         BO    ESTEPN1        YES, THEN NAME IS PROC STEP NAME          00912\n         EX    R3,MOVE5       MOVE NAME TO JOBSTEP NAME                 00913\n         EX    R3,MOVE18      MOVE NAME TO JOBSTEP NAME                 00914\n         B     EXELOOP        BRANCH                                    00915\nESTEPN1  EX    R3,MOVE6       MOVE NAME TO PROCSTEP NAME                00916\n         EX    R3,MOVE19      MOVE NAME TO PROCSTEP NAME                00917\n         B     EXELOOP        BRANCH                                    00918\n         SPACE 3                                                        00919\n*********************************************************************** 00920\n*        EXEC PGM                                                     * 00921\n*********************************************************************** 00922\nEPGM     CLI   0(R4),PGMEK    SEE IF PGM= KEY                           00923*19\n         BNE   EREGN          NO, BRANCH                                00924\n         SLR   R3,R3          CLEAR REG FOR ICM                         00925\n         ICM   R3,1,2(R4)     LOAD LENGTH OF PGM NAME                   00926*19\n         BZ    EXELOOP        ZERO, NULL, BRANCH                        00927\n         BM    EXELOOP        HIGH BIT ON, REFERBACK, IGNORE            00928\n         CH    R3,H#8         SEE IF LENGTH > 8                         00929\n         BNH   EPGM1          NO, CONTINUE                              00930\n         LA    R15,P@12       SET ERROR NUMBER                          00931\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00932**7\n         B     EXELOOP        GET OUT                                   00933\nEPGM1    DS    0H                                                       00934\n         BCTR  R3,0           MAKE MACHINE LENGTH                       00935\n         EX    R3,MOVE7       MOVE PGM NAME TO TABLE                    00936\n         SPACE                                                          00937\n         AGO   .NOPGMS                                                  00938\n         CLC   PGMCICS,3(R4)  Q. CICS PGM NAME ?                        00939*19\n         BNE   CHK7074        NO, TRY 7074                              00940\n         OI    RESOURCE+1,PCICS YES, ATTACH 'CICS' RESOURCE             00941\n         B     EXELOOP        & GET NEXT EXEC PARM                      00942\nCHK7074  CLC   PGM7074,3(R4)  Q. PGM NAME 7074 ?                        00943*19\n         BNE   CHK1401        NO, TRY 1401                              00944\n         OI    RESOURCE+1,P7074 YES,ATTACH '7074' RESOURCE              00945\n         B     EXELOOP        & GET NEXT EXEC PARM                      00946\nCHK1401  CLC   PGM1401,3(R4)  Q. PGM NAME 1401 ?                        00947*19\n         BNE   CHKXMIT        NO, TRY XMISSIONS                         00948\n         OI    RESOURCE,P1401 YES, ATTACH '1401' RESOURCE               00949\n         B     EXELOOP        & GET NEXT EXEC PARM                      00950\nCHKXMIT  CLC   PGMXMIT,3(R4)  Q. PGM NAME XMISSIONS ?                   00951*19\n         BNE   EXELOOP        NO, GET NEXT EXEC PARM                    00952\n         OI    RESOURCE+1,PXMIT YES, ATTACH 'XMIT' RESOURCE             00953\n.NOPGMS  ANOP                                                           00954\n         B     EXELOOP        BRANCH                                    00955\n         SPACE 3                                                        00956\n*********************************************************************** 00957\n*        EXEC REGION                                                  * 00958\n*********************************************************************** 00959\nEREGN    CLI   0(R4),REGINEEK SEE IF REGION= KEY                        00960*19\n         BNE   EREGN@         NO, BRANCH                                00961\n         LA    R4,1(,R4)      INCREMENT PAST KEYWORD                    00962*19\n         SLR   R3,R3          CLEAR REG FOR ICM                         00963\n         ICM   R3,1,0(R4)     LOAD SUBPARAMETER COUNT                   00964*19\n         BZ    EXELOOP        NO SUBPARAMETERS, BRANCH                  00965\n         LA    R4,1(,R4)      INCREMENT PAST NUMBER OF FIELDS           00966*19\n         ICM   R3,1,0(R4)     LOAD LENGTH OF REGION PARAM               00967*19\n         BZ    EXELOOP        ZERO, NULL, BRANCH                        00968\n         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED                00969\n         BNH   EREGN0         NO, CONTINUE                              00970\n         LA    R15,P@13       SET ERROR NUMBER                          00971\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00972**7\n         B     EXELOOP        GET OUT                                   00973\nEREGN0   DS    0H                                                       00974\n*        CH    R3,H#3         SEE IF AT LEAST 3 CHARACTERS              00975\n*        BL    EXELOOP        NO, MAX IS 99K, IGNORE                    00976\n         LA    R15,0(R3,R4)   POINT TO LAST CHAR OF REGION SIZE         00977*19\n         NI    ELIBIND,255-EREGIONK TURN OFF REGION SIZE IN 'K' IND     00978\n         CLI   0(R15),C'K'    END IN 'K'                                00979\n         BNE   EREGN1         NO, BRANCH                                00980\n         BCTR  R3,0           REDUCE REGION LENGTH BY 1                 00981\n         OI    ELIBIND,EREGIONK REMEMBER REGION SIZE IN 'K'             00982\nEREGN1   DS    0H                                                       00983**5\n         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH              00984**5\n         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT                 00985**5\n         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ 00986**6\n         BNZ   EREGN4         NOT NUMERIC                           WEJ 00987**5\n         EX    R3,PACK1       PACK REGION SIZE                          00988\n         CVB   R15,DOUBLE     CONVERT REGION SIZE TO BINARY             00989\n         TM    ELIBIND,EREGIONK WAS REGION SPECIFIED IN 'K'             00990\n         BO    EREGN3         YES, BRANCH                               00991\n         SRA   R15,10         DIVIDE BY 1024 FOR 'K' VALUE              00992\nEREGN3   STH   R15,EREGION    STORE REGION SIZE IN TABLE                00993\n         B     EXELOOP        BRANCH                                    00994\nEREGN4   LA    R15,P@14       SET ERROR NUMBER                          00995\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        00996**7\n         B     EXELOOP        GET OUT                                   00997\n         EJECT                                                          00998\n*********************************************************************** 00999\n*        EXEC REGION.                                                 * 01000\n*********************************************************************** 01001\nEREGN@   CLI   0(R4),REGINPEK SEE IF REGION. KEY                        01002*19\n         BNE   ETIME          NO, BRANCH                                01003\n         LA    R4,1(,R4)      INCREMENT PAST KEYWORD                    01004*19\n         SLR   R5,R5          ZERO REGISTER                             01005*19\n         ICM   R5,1,0(R4)     LOAD NUMBER OF SUBPARAMS                  01006*19\n         BNZ   EREGN@01       NOT ZERO, BRANCH                          01007\n         LA    R15,P@13       SET ERROR NUMBER                          01008\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01009**7\n         B     EXELOOP        GET OUT                                   01010\nEREGN@01 DS    0H                                                       01011\n         CH    R5,H#2         CHECK NUMBER OF SUBPARAMS                 01012*19\n         BNH   EREGN@02       NOT > 2, OK                               01013\n         LA    R15,P@13       SET ERROR NUMBER                          01014\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01015**7\n         B     EXELOOP        GET OUT                                   01016\nEREGN@02 DS    0H                                                       01017\n         LA    R4,1(,R4)      INCREMENT PAST NUMBER OF SUBPARAMETERS    01018*19\n         SLR   R3,R3          ZERO REGISTER                             01019\n         ICM   R3,1,0(R4)     LOAD LENGTH OF STEPNAME                   01020*19\n         BNZ   EREGN@03       NOT ZERO, BRANCH                          01021\n         LA    R15,P@13       SET ERROR NUMBER                          01022\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01023**7\n         B     EXELOOP        GET OUT                                   01024\nEREGN@03 DS    0H                                                       01025\n         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED                01026\n         BNH   EREGN@04       NO, CONTINUE                              01027\n         LA    R15,P@13       SET ERROR NUMBER                          01028\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01029**7\n         B     EXELOOP        GET OUT                                   01030\nEREGN@04 DS    0H                                                       01031\n         BCTR  R3,0           MAKE MACHINE LENGTH                       01032\n         EX    R3,COMPARE3    SEE IF OVERRIDE FOR CURRENT STEP          01033\n         BNE   EXELOOP        NO, GET OUT                               01034\n         LA    R4,2(R4,R3)    SET REG TO START OF 2ND PARAM             01035*19\n         ICM   R3,1,0(R4)     LOAD LENGTH OF 2ND PARAM                  01036*19\n         BZ    EXELOOP        ZERO, NULL, BRANCH                        01037\n         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED                01038\n         BNH   EREGN@05       NO, CONTINUE                              01039\n         LA    R15,P@13       SET ERROR NUMBER                          01040\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01041**7\n         B     EXELOOP        GET OUT                                   01042\nEREGN@05 DS    0H                                                       01043\n*        CH    R3,H#3         SEE IF AT LEAST 3 CHARACTERS              01044\n*        BL    EXELOOP        NO, MAX IS 99K, IGNORE                    01045\n         LA    R15,0(R3,R4)   POINT TO LAST CHAR OF REGION SIZE         01046*19\n         NI    ELIBIND,255-EREGIONK TURN OFF REGION SIZE IN 'K' IND     01047\n         CLI   0(R15),C'K'    END IN 'K'                                01048\n         BNE   EREGN@1        NO, BRANCH                                01049\n         BCTR  R3,0           REDUCE REGION LENGTH BY 1                 01050\n         OI    ELIBIND,EREGIONK REMEMBER REGION SIZE IN 'K'             01051\nEREGN@1  DS    0H                                                       01052**5\n         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH              01053**5\n         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT                 01054**5\n         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ 01055**6\n         BNZ   EREGN@4        NOT NUMERIC                           WEJ 01056**5\n         EX    R3,PACK1       PACK REGION SIZE                          01057\n         CVB   R15,DOUBLE     CONVERT REGION SIZE TO BINARY             01058\n         TM    ELIBIND,EREGIONK WAS REGION SPECIFIED IN 'K'             01059\n         BO    EREGN@3        YES, BRANCH                               01060\n         SRA   R15,10         DIVIDE BY 1024 FOR 'K' VALUE              01061\nEREGN@3  STH   R15,EREGION    STORE REGION SIZE IN TABLE                01062\n         B     EXELOOP        BRANCH                                    01063\nEREGN@4  LA    R15,P@14       SET ERROR NUMBER                          01064\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01065**7\n         B     EXELOOP        GET OUT                                   01066\n         EJECT                                                          01067\n*********************************************************************** 01068\n*        EXEC TIME                                                    * 01069\n*********************************************************************** 01070\nETIME    CLI   0(R4),TIMEEEK  SEE IF TIME= KEY                          01071*19\n         BNE   ETIME@         NO, BRANCH                                01072\n         LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR              01073*19\n         SLR   R5,R5          CLEAR REGISTER FOR ICM                    01074*19\n         ICM   R5,1,0(R4)     LOAD NUMBER OF SUBPARAMETERS              01075*19\n         BZ    EXELOOP        ZERO, IGNORE                              01076\n         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE               01077*19\nETIME1   SLR   R3,R3          CLEAR REGISTER FOR ICM                    01078\n         ICM   R3,1,0(R4)     LOAD LENGTH OF FIRST TIME FIELD           01079*19\n         CH    R3,H#4         COMPARE LENGTH TO 4                       01080\n         BL    EXELOOP        LT 4, GET OUT                             01081\n         BE    ETIME1A        EQ 4, COMPARE                             01082\n         LA    R15,P@15       SET ERROR NUMBER                          01083\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01084**7\n         B     EXELOOP        GET OUT                                   01085\nETIME1A  DS    0H                                                       01086\n         CLC   C#1440,1(R4)     SEE IF TIME = 1440                      01087*19\n         BNE   EXELOOP        NO, BRANCH                                01088\n         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM 1440? WEJ  01089\n         BM    EXELOOP        YES, TIME=1440 OK ON JOB CARD             01090\n         LA    R15,P@16       SET ERROR NUMBER                          01091\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01092**7\n         B     EXELOOP        GET OUT                                   01093\n         EJECT                                                          01094\n*********************************************************************** 01095\n*        EXEC TIME.                                                   * 01096\n*********************************************************************** 01097\nETIME@   CLI   0(R4),TIMEPEK  SEE IF TIME. KEY                          01098*19\n         BNE   EPERF          NO, BRANCH                                01099\n         SLR   R3,R3          ZERO WORK REG                             01100\n         SLR   R5,R5          ZERO WORK REG                             01101*19\n         LA    R4,1(,R4)      INCREMENT PAST KEYWORD                    01102*19\n         ICM   R5,1,0(R4)     LOAD NUMBER OF SUBPARAMS                  01103*19\n         BZ    EXELOOP        NO SUBPARAMS, BRANCH                      01104\n         CH    R5,H#3         SEE IF MORE THAN 3 SUBPARAMS              01105*19\n         BNH   ETIME@0A       NO, BRANCH                                01106\n         LA    R15,P@15       SET ERROR NUMBER                          01107\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01108**7\n         B     EXELOOP        GET OUT                                   01109\nETIME@0A DS    0H                                                       01110\n         LA    R4,1(,R4)      INCREMENT PAST NUMBER OF SUBPARAMETERS    01111*19\n         CH    R5,H#2         SEE IF AT LEAST 2 SUBPARAMS               01112*19\n         BL    EXELOOP        ONLY ONE, IGNORE STEPNAME                 01113\n         ICM   R3,1,0(R4)     LOAD LENGTH OF STEPNAME                   01114*19\n         BZ    EXELOOP        NO STEPNAME, BRANCH                       01115\n         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED                01116\n         BNH   ETIME@0B       NO, BRANCH                                01117\n         LA    R15,P@15       SET ERROR NUMBER                          01118\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01119**7\n         B     EXELOOP        GET OUT                                   01120\nETIME@0B DS    0H                                                       01121\n         BCTR  R3,0           MAKE MACHINE LENGTH                       01122\n         EX    R3,COMPARE3    SEE IF CORRECT STEPNAME                   01123\n         BNE   EXELOOP        NO, GET OUT                               01124\n         LA    R4,2(R4,R3)    LOAD ADDR OF 2ND SUBPARAM                 01125*19\n*              PRIOR USE OF R3 WAS AS A LENGTH REGISTER                 01126\n         IC    R3,0(R4)       LOAD LENGTH OF MINUTES PORTION            01127*19\n         CH    R3,H#4         COMPARE LENGTH TO 4                       01128\n         BL    EXELOOP        LT 4, GET OUT                             01129\n         BE    ETIME@0C       EQ 4, COMPARE                             01130\n         LA    R15,P@15       SET ERROR NUMBER                          01131\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01132**7\n         B     EXELOOP        GET OUT                                   01133\nETIME@0C DS    0H                                                       01134\n         CLC   C#1440,1(R4)     SEE IF TIME = 1440                      01135*19\n         BNE   EXELOOP        NO, BRANCH                                01136\n         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM 1440?  WEJ 01137\n         BM    EXELOOP        YES, TIME=1440 OK ON EXEC CARD        WEJ 01138\n         LA    R15,P@16       SET ERROR NUMBER                          01139\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01140**7\n         B     EXELOOP        GET OUT                                   01141\n         SPACE 4                                                        01142\n*********************************************************************** 01143\n*        EXEC PERFORM                                                 * 01144\n*********************************************************************** 01145\nEPERF    CLI   0(R4),PRFMEEK  SEE IF PERFORM= KEY                       01146*19\n         BNE   EPERF@         NO, BRANCH                                01147\n         TM    JOBIND,JOBTSO+JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM     01148\n         BM    EXELOOP        YES, PERFORM OK ON EXEC CARD              01149\n         LA    R15,P@17       SET ERROR NUMBER                          01150\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01151**7\n         B     EXELOOP        GET OUT                                   01152\n         SPACE 4                                                        01153\n*********************************************************************** 01154\n*        EXEC PERFORM.                                                * 01155\n*********************************************************************** 01156\nEPERF@   CLI   0(R4),PRFMPEK  SEE IF PERFORM. KEY                       01157*19\n         BNE   EADDR          NO, BRANCH                                01158\n         TM    JOBIND,JOBTSO+JOBSTC+JOBTECH+JOBPROD+JOBCOMM ALLOW IT    01159\n         BM    EXELOOP        YES, PERFORM OK ON EXEC CARD              01160\n         LA    R15,P@17       SET ERROR NUMBER                          01161\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01162**7\n         B     EXELOOP        GET OUT                                   01163\n         SPACE 4                                                        01164\n*********************************************************************** 01165\n*        EXEC ADDRSPC                                                 * 01166\n*********************************************************************** 01167\nEADDR    CLI   0(R4),ADRSPEEK SEE IF ADDRSPC= KEY                       01168*19\n         BNE   EADDR@         NO, BRANCH                                01169\n         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM ALLOW? WEJ 01170\n         BM    EXELOOP        YES, ADDRSPC OK ON EXEC CARD              01171\n         LA    R15,P@18       SET ERROR NUMBER                          01172\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01173**7\n         B     EXELOOP        GET OUT                                   01174\n         SPACE 4                                                        01175\n*********************************************************************** 01176\n*        EXEC ADDRSPC.                                                * 01177\n*********************************************************************** 01178\nEADDR@   CLI   0(R4),ADRSPPEK SEE IF ADDRSPC. KEY                       01179*19\n         BNE   EDPRTY         NO, BRANCH                                01180\n         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM ALLOW? WEJ 01181\n         BM    EXELOOP        YES, ADDRSPC OK ON EXEC CARD              01182\n         LA    R15,P@18       SET ERROR NUMBER                          01183\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01184**7\n         B     EXELOOP        GET OUT                                   01185\n         EJECT                                                          01186\n*********************************************************************** 01187\n*        EXEC DPRTY                                                   * 01188\n*********************************************************************** 01189\nEDPRTY   CLI   0(R4),SDPEEK   SEE IF  DPRTY= KEY                        01190*19\n         BNE   EDPRTY@        NO, BRANCH                                01191\n         TM    JOBIND,JOBSTC  SEE IF ALLOWED                            01192\n         BO    EXELOOP        YES, DPRTY OK ON EXEC CARD                01193\n         LA    R15,P@19       SET ERROR NUMBER                          01194\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01195**7\n         B     EXELOOP        GET OUT                                   01196\n         SPACE 4                                                        01197\n*********************************************************************** 01198\n*        EXEC DPRTY.                                                  * 01199\n*********************************************************************** 01200\nEDPRTY@  CLI   0(R4),SDPPEK   SEE IF  DPRTY. KEY                        01201*19\n         BNE   EXELOOP        NO, BRANCH                                01202\n         TM    JOBIND,JOBSTC  SEE IF ALLOWED                            01203\n         BO    EXELOOP        YES, DPRTY OK ON EXEC CARD                01204\n         LA    R15,P@19       SET ERROR NUMBER                          01205\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01206**7\n         B     EXELOOP        GET OUT                                   01207\n         EJECT                                                          01208\n*********************************************************************** 01209\n*        THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING         * 01210\n*        PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR       * 01211\n*        FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT      * 01212\n*        WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER     * 01213\n*        BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF       * 01214\n*        SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.        * 01215\n*        IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY    * 01216\n*        A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH      * 01217\n*        ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A         * 01218\n*        SINGLE SUBPARAMETER.                                         * 01219\n*********************************************************************** 01220\nEXELOOP  L     R4,PARMADDR    RESTORE START OF PARAMETER ADDRESS        01221*19\n         SLR   R2,R2          CLEAR REGISTER FOR ICM                    01222**4\n         LA    R4,1(,R4)      INCREMENT PAST KEYWORD                    01223*19\n         ICM   R2,1,0(R4)     LOAD SUBPARAMETER COUNT                   01224*19\n         BNZ   EXELOOP1       OK, BRANCH INTO ROUTINE                   01225\n         LA    R4,1(,R4)      NONE, INCREMENT PAST COUNT                01226*19\n         B     EXELOOP5       AND GET OUT OF ROUTINE                    01227\nEXELOOP1 LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR              01228*19\nEXELOOP2 SLR   R5,R5          CLEAR REGISTER FOR ICM                    01229*19\n         ICM   R5,1,0(R4)     LOAD PARAMETER LENGTH                     01230*19\n         BNM   EXELOOP3       HIGH BIT NOT ON, ONLY 1 PARAMETER         01231\n         N     R5,F#127       'AND' OUT THE HIGH ORDER BIT              01232*19\n         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE               01233*19\n         B     EXELOOP4       BRANCH                                    01234\nEXELOOP3 LA    R5,1           SET PARAM COUNT TO 1                      01235*19\nEXELOOP4 SLR   R3,R3          CLEAR REGISTER FOR ICM                    01236\n         ICM   R3,1,0(R4)     LOAD PARAMETER LENGTH                     01237*19\n         LA    R4,1(R3,R4)    INCREMENT PAST PARM                       01238*19\n         BCT   R5,EXELOOP4    LOOP UNTIL PROCESSED ALL PARMS            01239*19\n         BCT   R2,EXELOOP2    LOOP UNTIL PROCESSED ALL PARMS            01240**4\nEXELOOP5 ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS           01241*19\n         B     EXECPARM       CONTINUE                                  01242\n         EJECT                                                          01243\n*********************************************************************** 01244\n*        THE TEXT OF THE DD CARD TEXT IS AS FOLLOWS                   * 01245\n*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        * 01246\n*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          * 01247\n*            3)  1 BYTE OF MISCELLANEOUS INDICATORS                   * 01248\n*            4)  1 BYTE INDICATOR X'6E' INDICATING DD POS INFORMATION * 01249\n*            5)  1 BYTE NUMBER OF DD POSITIONAL PARAMETERS            * 01250\n*                THE 1ST POS PARAMETER IS THE DDNAME IF PRESENT       * 01251\n*                ALL OTHER POS PARAMETERS WILL BE IGNORED             * 01252\n*            6)  VARIABLE LENGTH LIST OF DD POS PARAMETERS            * 01253\n*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               * 01254\n*            7)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS           * 01255\n*                EACH IS PRECEDED BY A 1 BYTE KEY, 1 BYTE NUMBER OF   * 01256\n*                POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF      * 01257\n*                SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD * 01258\n*                WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER * 01259\n*                POSITIONAL PARAMETER.                                * 01260\n*********************************************************************** 01261\nDDCARD   TM    STRDINDC,DTXDDNM  SEE IF DD DDNAME= STATEMENT            01262\n         BO    GETNEXT        YES, BYPASS                               01263\n         TM    STRDINDC,DTXDYNAM SEE IF DD DYNAM STATEMENT              01264\n         BO    GETNEXT        YES, BYPASS                               01265\n         TM    STRDINDC,DTXSYSIN SEE IF DD INPUT SPOOL FILE             01266\n         BO    GETNEXT        YES, BYPASS                               01267\n         EJECT                                                          01268\n*********************************************************************** 01269\n*        INITIALIZE TEMPORARY ENTRY WHICH WILL BE USED                * 01270\n*        IF PRIV OR TAPE UNIT                                         * 01271\n*********************************************************************** 01272\n         MVI   UNITIND,X'00'   ZERO UNIT TYPE IND                       01273*12\n         MVI   UNITIND2,X'00'   ZERO UNIT PROCESSED INDICATOR           01274*12\n         MVI   DISPIND,X'00'   ZERO DISP IND                            01275*12\n         MVI   UNITCOUN,X'01'  SET DEFAULT UNIT COUNT TO 1              01276\n         MVI   TENTRY,C' '     BLANK OUT ENTIRE TEMP ENTRY              01277\n         MVC   TENTRY+1(L'TENTRY-1),TENTRY                              01278\n         XC    TTYPE,TTYPE     ZERO TEMPORARY UNIT TYPE                 01279\n         XC    TVOLSER,TVOLSER ZERO TEMP 1ST VOLSER                     01280\n         MVC   SAVEFORM,C#NOFORM SET SAVE FORM TO BLANKS WITH 0 LENGTH  01281\n         MVC   FCBFLAG,C'N'    SET FCB FOUND FLAG TO NO                 01282\nDDSTART  LA    R4,STRDKEY      LOAD START OF TRUE TEXT                  01283*19\n         ST    R4,PARMADDR     SAVE START OF PARAMETER ADDRESS          01284*19\nDDPARM   CLI   0(R4),ENDK      END OF TEXT STRING??                     01285*19\n         BE    DDEND           YES, GO CHECK FOR UPDATE                 01286\n         SPACE 4                                                        01287\n*********************************************************************** 01288\n*        DD DDNAME                                                    * 01289\n*********************************************************************** 01290\nDDDNAME  CLI   0(R4),DDK      SEE IF DDNAME KEY                         01291*19\n         BNE   DDDUMMY        NO, BRANCH                                01292\n         SLR   R5,R5          CLEAR REG FOR ICM                         01293*19\n         ICM   R5,1,1(R4)     LOAD NUMBER OF SUBPARAMS                  01294*19\n         BZ    DDLOOP         ZERO, NO SUBPARAMS                        01295\n         SLR   R3,R3          CLEAR REG FOR ICM                         01296\n         ICM   R3,1,2(R4)     LOAD LENGTH OF DDNAME                     01297*19\n         BZ    DDLOOP         YES, CONCATINATED DD, LOOP                01298\n         CH    R3,H#8         SEE IF MAX LENGTH EXCEEDED                01299\n         BNH   DDDNAMEA       NO, CONTINUE                              01300\n         LA    R15,P@20       SET ERROR NUMBER                          01301\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01302**7\n         B     DDLOOP         GET OUT                                   01303\nDDDNAMEA DS    0H                                                       01304\n         BCTR  R3,0           MAKE MACHINE LENGTH                       01305\n         EX    R3,MOVE8       MOVE DDNAME TO TEMP ENTRY                 01306\n         B     DDLOOP         GO GET NEXT PARAM                         01307\n         SPACE 4                                                        01308\n*********************************************************************** 01309\n*        DD DUMMY                                                     * 01310\n*********************************************************************** 01311\nDDDUMMY  CLI   0(R4),DUMMK    SEE IF DUMMY KEY                          01312*19\n         BE    GETNEXT        DUMMY STATEMENTS ARE IGNORED              01313\n         EJECT                                                          01314\n*********************************************************************** 01315\n*        DD DSNAME                                                    * 01316\n*********************************************************************** 01317\nDDSNAME  CLI   0(R4),DSNAMEK  SEE IF DSNAME KEY                         01318*19\n         BNE   DDISP          NO, BRANCH                                01319\n         SLR   R3,R3          CLEAR REG FOR ICM                         01320\n         ICM   R3,1,2(R4)     LOAD LENGTH OF DSN                        01321*19\n         BZ    DDLOOP         ZERO, NULL, BRANCH                        01322\n         BNM   DSNSTD         HIGH BIT NOT ON, STANDARD DSN             01323\n         CLI   4(R4),C'*'     SEE IF 1ST PARAM = * (REFERBACK)          01324*19\n         BE    DSNREFBK       YES, REFERBACK                            01325\n*********************************************************************** 01326\n*        DSNAME PROBABLY A GDG                                        * 01327\n*********************************************************************** 01328\nDSNGDG   N     R3,F#127       TURN OFF HIGH ORDER BIT                   01329\n         CH    R3,H#2         SEE IF TWO SUBPARAMS                      01330\n         BE    DSNGDGA        YES, BRANCH                               01331\n         LA    R15,P@21       SET ERROR NUMBER                          01332\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01333**7\n         B     DDLOOP         GET OUT                                   01334\nDSNGDGA  DS    0H                                                       01335\n         LA    R5,3(,R4)      LOAD ADDR OF START OF 1ST ENTRY           01336*19\n*              PRIOR USE OF R3 GUARENTEES HIGH ORDER ZEROS              01337\n         IC    R3,0(R5)       LOAD LENGTH OF 1ST ENTRY                  01338*19\n         CH    R3,H#35        SEE IF MAX LENGTH EXCEEDED                01339\n         BNH   DSNGDGB        NOT EXCEEDED, BRANCH                      01340\n         LA    R15,P@22       SET ERROR NUMBER                          01341\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01342**7\n         B     DDLOOP         GET OUT                                   01343\nDSNGDGB  DS    0H                                                       01344\n         BCTR  R3,0           MAKE MACHINE LENGTH                       01345\n         EX    R3,MOVE14      MOVE 1ST PART DSN TO TEMP ENTRY           01346\n         LA    R3,1(,R3)      MAKE TRUE LENGTH AGAIN                    01347\n         LA    R5,1(R3,R5)    INCREMENT TO 2ND ENTRY                    01348*19\n         LA    R2,TDSN        LOAD ADDR OF TEMPORARY DSN                01349**4\n         AR    R2,R3          LOAD ADDR WITHIN TDSN FOR GEN #           01350**4\n         LR    R15,R3         SAVE LENGTH OF 1ST PART DSN               01351\n         ICM   R3,1,0(R5)     LOAD LENGTH OF 2ND PART DSN               01352*19\n         BNZ   DSNGDGC        NOT ZERO, BRANCH                          01353\n         LA    R15,P@21       SET ERROR NUMBER                          01354\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01355**7\n         B     DDLOOP         GET OUT                                   01356\nDSNGDGC  DS    0H                                                       01357\n         AR    R15,R3         ADD NEW LENGTH OF 2ND PART TO 1ST         01358\n         CH    R15,H#42       SEE IF TOTAL LENGTH EXCEEDS MAX           01359\n         BNH   DSNGDGD        NO, BRANCH                                01360\n         LA    R15,P@22       SET ERROR NUMBER                          01361\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01362**7\n         B     DDLOOP         GET OUT                                   01363\nDSNGDGD  DS    0H                                                       01364\n         MVI   0(R2),C'('     PUT PARENS FOR GEN #                      01365**4\n         LA    R2,1(,R2)      INCREMENT TO START TRUE GEN #             01366**4\n         BCTR  R3,0           MAKE MACHINE LENGTH                       01367\n         EX    R3,MOVE15      MOVE GEN # TO TDSN                        01368\n         LA    R2,1(R3,R2)    INCREMENT TO END OF TDSN FIELD            01369**4\n         MVI   0(R2),C')'     FINISH PARENS FOR GEN #                   01370**4\n         B     DDLOOP         GO GET NEXT ENTRY                         01371\n         SPACE 4                                                        01372\n*********************************************************************** 01373\n*        DSNAME PROBABLY A REFERBACK                                  * 01374\n*********************************************************************** 01375\nDSNREFBK BAL   R14,REFBACK    GO TO REFERBACK RTN                       01376\n         MVC   TDSN,REFDSN    SAVE REFERBACK DSNAME                     01377\n         B     DDLOOP         GO GET NEXT ENTRY                         01378\n*********************************************************************** 01379\n*        DSNAME PROBABLY STANDARD                                     * 01380\n*********************************************************************** 01381\nDSNSTD   CH    R3,H#44        SEE IF > MAX LENGTH                       01382\n         BNH   DSNSTDA        NO, BRANCH                                01383\n         LA    R15,P@22       SET ERROR NUMBER                          01384\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01385**7\n         B     DDLOOP         GET OUT                                   01386\nDSNSTDA  DS    0H                                                       01387\n         CLC   3(8,R4),NULLFILE SEE IF DSN=NULLFILE                     01388*19\n         BE    GETNEXT        YES, DUMMY, IGNORE STATEMENT              01389\n         BCTR  R3,0           MAKE MACHINE LENGTH                       01390\n         EX    R3,MOVE9       MOVE DSN TO TEMP ENTRY                    01391\n         B     DDLOOP         GO GET NEXT ENTRY                         01392\n         EJECT                                                          01393\n*********************************************************************** 01394\n*        DD DISP                                                      * 01395\n*********************************************************************** 01396\nDDISP    CLI   0(R4),DISPK    SEE IF DISP= KEYWORD                      01397*19\n         BNE   DUNIT          NO, BRANCH                                01398\n         SLR   R5,R5          CLEAR REG FOR ICM                         01399*19\n         ICM   R5,1,1(R4)     LOAD NUMBER SUBPARAMS                     01400*19\n         BZ    DDLOOP         ZERO, NULL, BRANCH                        01401\n         LA    R4,2(,R4)      LOAD START ADDR OF SUBPARAMS              01402*19\n         CH    R5,H#3         SEE IF NUMBER > 3                         01403*19\n         BNH   DDISPA         NO, CONTINUE                              01404\n         LA    R15,P@23       SET ERROR NUMBER                          01405\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01406**7\n         B     DDLOOP         GET OUT                                   01407\nDDISPA   DS    0H                                                       01408\n         SLR   R2,R2          ZERO WORK REG                             01409**4\nDSPLOO1  LA    R2,1(,R2)      ADD 1 TO COUNTER                          01410**4\n         CR    R2,R5          SEE IF ALL PROCESSED                      01411*19\n         BH    DISPCHK        YES, GO CHECK RESULTS                     01412\n         SLR   R3,R3          ZERO WORK REG                             01413\n         IC    R3,0(,R4)      LOAD LEN OF PARAM                         01414*19\n         CH    R2,H#1         SEE IF 1ST PARAM                          01415**4\n         BE    DSPLOO2        YES, BRANCH TO PROCESS                    01416\n         CH    R2,H#2         SEE IF 2ND PARAM                          01417**4\n         BE    DSPLOO7        YES, BRANCH TO PROCESS                    01418\n         B     DSPLOO9        BRANCH TO PROCESS                         01419\n*********************************************************************** 01420\n*         FIRST DISP PARAMETER                                        * 01421\n*********************************************************************** 01422\nDSPLOO2  LTR   R3,R3          SEE IF LENGTH = 0                         01423\n         BZ    DSPLOO3        YES, GO SET TO NEW                        01424\n         CLC   C#NEW,1(R4)  SEE IF NEW                                  01425*19\n         BNE   DSPLOO4        NO, BRANCH                                01426\nDSPLOO3  OI    DISPIND,NEW    SET TO NEW                                01427\n         B     DSPLOO14       GO GET NEXT                               01428\nDSPLOO4  DS    0H                                                       01429\n         CLC   C#SHR,1(R4)    SEE IF SHR                                01430*19\n         BE    DSPLOO4A       NO, BRANCH                                01431\n         CLC   C#SHARE,1(R4)  SEE IF SHR                                01432*19\n         BNE   DSPLOO5        NO, BRANCH                                01433\nDSPLOO4A DS    0H                                                       01434\n         OI    DISPIND,SHR    SET TO SHR                                01435\n         B     DSPLOO14       GO GET NEXT                               01436\nDSPLOO5  CLC   =C'OLD',1(R4) SEE IF OLD                                 01437*19\n         BNE   DSPLOO6        NO, MUST BE \"MOD\", BRANCH                 01438\n         OI    DISPIND,OLD    SET TO OLD                                01439\n         B     DSPLOO14       GO GET NEXT                               01440\nDSPLOO6  OI    DISPIND,MOD    SET TO MOD                                01441\n         B     DSPLOO14       GO GET NEXT                               01442\n*********************************************************************** 01443\n*         SECOND DISP PARAMETER                                       * 01444\n*********************************************************************** 01445\nDSPLOO7  LTR   R3,R3          SEE IF LENGTH = 0                         01446\n         BNZ   DSPLOO9        NOT ZERO, NO DEFAULT                      01447\n         TM    DISPIND,NEW    SEE IF NEW                                01448**5\n         BO    DSPLOO8        NO, GO SET DEFAULT TO KEEP                01449**5\n         OI    DISPIND,DELETE SET DEFAULT TO DELETE FOR \"NEW\"           01450\n         B     DSPLOO14       GO GET NEXT                               01451\nDSPLOO8  OI    DISPIND,KEEP   SET TO KEEP                               01452\n         B     DSPLOO14       GO GET NEXT                               01453\n*********************************************************************** 01454\n*         THIRD DISP PARAMETER                                        * 01455\n*********************************************************************** 01456\nDSPLOO9  LTR   R3,R3          SEE IF LENGTH = 0                         01457\n         BZ    DSPLOO14       YES, USE DEFAULT OF PREVIOUS PARAMETER    01458\n         CLC   C#KEEP,1(R4)      SEE IF KEEP                            01459*19\n         BNE   DSPLOO10       NO, BRANCH                                01460\n         OI    DISPIND,KEEP   SET TO KEEP                               01461\n         B     DSPLOO14       GO GET NEXT                               01462\nDSPLOO10 DS    0H                                                       01463**3\n         CLC   C#PASS,1(R4)   SEE IF PASS                               01464*19\n         BNE   DSPLOO11       NO, BRANCH                                01465\n         OI    DISPIND,PASS   SET TO PASS                               01466\n         B     DSPLOO14       GO GET NEXT                               01467\nDSPLOO11 DS    0H                                                       01468**3\n         CLC   C#CATLG,1(R4)     SEE IF CATLG                           01469*19\n         BNE   DSPLOO12       NO, BRANCH                                01470\n         OI    DISPIND,CATLG  SET TO CATLG                              01471\n         B     DSPLOO14       GO GET NEXT                               01472\nDSPLOO12 DS    0H                                                       01473**3\n         CLC   C#DELETE,1(R4)  SEE IF DELETE                            01474*19\n         BNE   DSPLOO13       NO, GO SET TO \"UNCATLG\"                   01475\n         OI    DISPIND,DELETE SET TO DELETE                             01476\n         B     DSPLOO14       GO GET NEXT                               01477\nDSPLOO13 OI    DISPIND1,UNCATLG SET TO UNCATLG                          01478\nDSPLOO14 LA    R4,1(R3,R4)    INCREMENT TO NEXT ENTRY                   01479*19\n         B     DSPLOO1        LOOP                                      01480\n*********************************************************************** 01481\n*         CHECK RESULTS OF PROCESSING ALL DISP PARAMETERS             * 01482\n*         IF ONLY 1 DISP PARAMETER WAS ENTERED, THE DEFAULT           * 01483\n*         FOR THE SECOND PARAMETER MUST BE DETERMINED.                * 01484\n*********************************************************************** 01485\nDISPCHK  CH    R5,H#1         SEE IF ONLY 1 ENTRY                       01486*19\n         BNE   DDLOOP         NO, DO NOT SET DEFAULT                    01487\n         TM    DISPIND,NEW    SEE IF NEW                                01488**5\n         BZ    DISPCHK2       NO, BRANCH                                01489**5\n*********************************************************************** 01490\n*        DISP=NEW  DEFAULT TO DELETE                                  * 01491\n*********************************************************************** 01492\nDISPCHK1 OI    DISPIND,DELETE SET TO DELETE                             01493\n         B     DDLOOP         GET OUT                                   01494\n*********************************************************************** 01495\n*        DISP=OLD, MOD, OR SHR  DEFAULT TO KEEP                       * 01496\n*********************************************************************** 01497\nDISPCHK2 OI    DISPIND,KEEP   SET TO KEEP                               01498\n         B     DDLOOP         GO GET NEXT PARAM                         01499\n         EJECT                                                          01500\n*********************************************************************** 01501\n*        DD UNIT                                                      * 01502\n*********************************************************************** 01503\nDUNIT    CLI   0(R4),UNITK    SEE IF UNIT= PARAM                        01504*19\n         BNE   DAFF           NO, BRANCH                                01505\n*        TM    UNITIND2,UNITPRC  UNIT ALREADY PROCESSED                 01506*33\n*        BO    DDLOOP                                               WEJ 01507*33\n         SLR   R5,R5          CLEAR REGISTER                            01508*19\n         MVI   UNITIND2,UNITPRC                                         01509*12\n         ICM   R5,1,1(R4)     GET NUMBER OF POS SUBPARAMS               01510*19\n         BZ    DDLOOP         ZERO, NO POS SUBPARAMS                    01511\n         CH    R5,H#3         SEE IF NUMBER > 3                         01512*19\n         BNH   DUNITA         NO, CONTINUE                              01513\n         LA    R15,P@24       SET ERROR NUMBER                          01514\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01515**7\n         B     DDLOOP         GET OUT                                   01516\nDUNITA   DS    0H                                                       01517\n         LA    R4,2(,R4)      LOAD START OF POS PARAMS                  01518*19\n         ICM   R3,1,0(R4)     LOAD LENGTH OF SUBPARAM                   01519*19\n         BZ    UNITCTCK       ZERO, GO GET NEXT SUBPARAM                01520*19\n         CH    R3,H#8         SEE IF LENGTH > 8                         01521\n         BNH   UNITNM1        NO, CONTINUE                              01522*21\nDUNITER  DS    0H                                                   WEJ 01523*19\n         LA    R15,P@24       SET ERROR NUMBER                          01524\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01525**7\n         B     DDLOOP         GET OUT                                   01526\n*********************************************************************** 01527\n*        PROCESS UNIT NAME                                            * 01528\n*********************************************************************** 01529\nUNITNM1  SLR   R2,R2          CLEAR REG 2                               01530*19\n         LR    R15,R3         GET ADJUSTED VALUE OF SIZE            WEJ 01531*31\n         BCTR  R15,R0                                               WEJ 01532*31\n         LA    R1,DEVTABLE    LOAD ADDR OF DEV TABLE                    01533\n*********************************************************************** 01534\n*        SEARCH THE DEVICE TABLE FOR A MATCH ON UNIT NAME TO          * 01535\n*        DETERMINE THE ATTRIBUTES OF THE UNIT NAME.                   * 01536\n*********************************************************************** 01537\nUNITNM2  CLI   1(R1),X'00'    SEE IF END OF TABLE                       01538\n         BE    UNITNM3        YES, BRANCH                               01539\n         IC    R2,1(,R1)      GET TBL ENTRY LENGTH                  WEJ 01540*19\n         CR    R15,R2         CHECK LENGTH OF UNIT NAME TRUE LENGTH     01541*31\n         BL    UNITNM2A       NOT A MATCH                           WEJ 01542*33\n         EX    R2,COMPARE2    SEE IF UNIT NAME OR SUBSET MATCH      WEJ 01543*27\n         BE    UNITNM3        YES, BRANCH                               01544\nUNITNM2A DS    0H                                                   WEJ 01545**8\n         LA    R1,10(,R1)     INCREMENT TO NEXT ENTRY                   01546\n         B     UNITNM2        LOOP                                      01547\nUNITNM3  DS    0H                                                       01548*19\n         CLI   0(R1),X'F0'    IS THIS A STORAGE DISK TYPE           WEJ 01549*27\n         BNL   UNITNM4        YES,CHECK IF PRODUCTION               WEJ 01550*27\n         OC    UNITIND,0(R1)  'OR' IN THE UNIT TYPE BITS                01551\n         B     UNITCTCK       GO RESET UNIT NAME SIZE                   01552*19\nUNITNM4  DS    0H                                                   WEJ 01553**2\n         CH    R5,H#1         IS THERE MORE THAN ONE SUBPARAMETER   WEJ 01554*19\n         BH    UNITCTCK       YES, DO NOT CHANGE                    WEJ 01555*19\n         CR    R15,R2         CHECK LENGTH OF UNIT NAME TRUE LENGTH     01556*35\n         BNE   DDLOOP         NOT A MATCH                           WEJ 01557*35\n         B     DDLOOP         ALWAYS BRANCH BYPASSING COUNT CHANGE  WEJ 01558*38\n*        TM    JOBIND,JOBPROD PRODUCTION JOB?                       WEJ 01559*28\n*        BZ    DDLOOP         NO DO NOT CHANGE                      WEJ 01560*28\n         CLC   C#SORTWK,TDDN  IS DDNAME IS SORTWKXX                 WEJ 01561*14\n         BE    DDLOOP         YES, LOOP                             WEJ 01562*19\n         LR    R3,R1          SAVE TABLE POINTER IN R3              WEJ 01563*33\n         L     R4,PARMADDR    POINT TO BEGINNING AGAIN              WEJ 01564*19\n         LA    R14,4(R2,R4)   POINT TO NEXT PARM (CURR + 1 BYTE TXT WEJ 01565*33\n*                             LENGTH + TEXT LENGTH + 1 BYTE KEY +   WEJ 01566*32\n*                             1 BYTE COUNT FIELD)                   WEJ 01567*32\n         LH    R5,STRLTH      GET LENGTH OF TEXT                    WEJ 01568*30\n         LA    R15,2(,R5)     GET TEXT LENGTH PLUS 2 AND SAVE       WEJ 01569*24\n         STH   R15,STRLTH       RESULT                              WEJ 01570*30\n         LA    R5,STRDKEY(R5) SIZE OF MOVE = (CURR SIZE + START OF  WEJ 01571*28\n         SLR   R5,R14                         DD POINTER - NEXT     WEJ 01572*26\n         BCTR  R5,R0                          PARM POINTER -1)      WEJ 01573*35\n         LR    R15,R5         PUT SIZE OF MOVE IN BOTH R5 AND R15   WEJ 01574*24\n         MVCL  R4,R14         MOVE THE FIELD USING MVCL, NOTE THAT  WEJ 01575*19\n*                             R4 WILL POINT TO THE END OF TEXT      WEJ 01576*19\n         MVC   0(L'C#UNITC,R4),C#UNITC  MOVE KEY AND 1ST PARMS      WEJ 01577*19\n         EX    R2,MOVE23      MOVE THE UNIT NAME FROM TABLE         WEJ 01578*19\n         LA    R2,1(,R2)      GET TRUE SIZE                         WEJ 01579*33\n         STC   R2,2(,R4)      SAVE THE SIZE IN THE TEXT             WEJ 01580*33\n         LA    R4,L'C#UNITC+1(R2,R4) POINT TO COUNT SUB PARM        WEJ 01581*33\n         MVC   0(L'C#UNITCC,R4),C#UNITCC  MOVE SIZE AND END KEY     WEJ 01582*19\n         MVC   1(1,R4),0(R3)  MOVE IN UNIT COUNT                    WEJ 01583*33\n         L     R4,PARMADDR    RESTORE PTR TO START OF SHIFTED DD    WEJ 01584*19\n         B     DDPARM         GO TO REUSE SAME PARM POSITION        WEJ 01585*24\nUNITCTCK DS    0H                                                       01586*19\n         LA    R4,1(R3,R4)    INCREMENT TO THE COUNT POSITION       WEJ 01587*25\n         CH    R5,H#2         CHECK IF UNIT COUNT POSSIBLE          WEJ 01588*19\n         BL    DDLOOP                                               WEJ 01589*19\n         ICM   R3,1,0(R4)     GET LENGTH OF SECOND PARM             WEJ 01590*19\n         BZ    UNITLOO2                                             WEJ 01591*19\n         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH              01592**8\n         CLI   1(R4),C'P'     PARALLEL MOUNTING?                        01593*19\n         BNE   UNITCT1        NO, BRANCH                                01594\n         MVI   UNITCOUN,C'P'  SET UNIT COUNT TO 'P'                     01595\n         B     UNITLOO2                                                 01596*19\n*********************************************************************** 01597\n*        PROCESS UNIT COUNT                                           * 01598\n*********************************************************************** 01599\nUNITCT1  DS    0H                                                       01600*19\n         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT                 01601**5\n         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ 01602**6\n         BNZ   UNITLOO3       NOT NUMERIC                           WEJ 01603**5\n         EX    R3,PACK1       PACK UNIT COUNT                           01604\n         LA    R3,1(,R3)      MAKE ORIG LENGTH                          01605\n         CVB   R15,DOUBLE     CONVERT UNIT COUNT TO BIN                 01606\n         STC   R15,UNITCOUN   SAVE UNIT COUNT                           01607\nUNITLOO2 LA    R4,1(R3,R4)    INCREMENT TO NEXT ENTRY                   01608*19\n         CH    R5,H#3         CHECK IF 3RD PARAM                        01609*19\n         BNE   DDLOOP         IF NOT BYPASS                         WEJ 01610*19\n         ICM   R3,1,0(R4)     GET SIZE OF 3RD PARAM                 WEJ 01611*19\n         BZ    DDLOOP         IF ZERO BYPASS                        WEJ 01612*19\n         CH    R3,H#8         IS IT GREATER THAN 8                  WEJ 01613*19\n         BH    DUNITER        YES, GO TO PRINT SIZE MESSAGE         WEJ 01614*19\n         B     DDLOOP         GET NEXT PARAM                        WEJ 01615*19\nUNITLOO3 LA    R15,P@25       SET ERROR NUMBER                          01616\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01617**7\n         B     DDLOOP         GET OUT                                   01618\n         EJECT                                                          01619\n*********************************************************************** 01620\n*        DD UNIT=AFF                                                  * 01621\n*********************************************************************** 01622\nDAFF     CLI   0(R4),AFFMK    SEE IF UNIT=AFF= KEY                      01623*19\n         BNE   DVOL           NO, BRANCH                                01624\n         MVC   REFERBCK,BLANKS   BLANK ENTIRE FIELD                     01625\n         LA    R4,2(,R4)      LOAD ADDR OF AFF FIELD                    01626*19\n         SLR   R3,R3          CLEAR REG FOR ICM                         01627\n         ICM   R3,1,0(R4)     LOAD LENGTH OF DDNAME                     01628*19\n         BZ    DDLOOP         ZERO, NO AFF, GET NEXT PARAM              01629\n         CH    R3,H#8         SEE IF LENGTH > 8                         01630\n         BNH   DAFF01         NO, CONTINUE                              01631\n         LA    R15,P@24       SET ERROR NUMBER                          01632\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01633**7\n         B     DDLOOP         GET OUT                                   01634\nDAFF01   DS    0H                                                       01635\n         BCTR  R3,0           MAKE MACHINE LENGTH                       01636\n         EX    R3,MOVE10      MOVE DDNAME TO REFERBACK FIELD            01637\n         L     R7,LASTEXEC    LOAD ADDR LAST EXEC ENTRY                 01638\n         MVI   UNITIND,UNITFND SET UNIT FOUND IND                       01639\nAFFLOOP  LA    R7,ENTLEN(,R7) INCREMENT TO NEXT DD ENTRY                01640\n         CLI   ENTRYTYP,TYPEND END OF TABLE?                            01641\n         BE    DDLOOP          YES, BRANCH                              01642\n         CLC   REFDDN,DDDN     MATCH DDNAME?                            01643\n         BE    AFFOUND         YES, BRANCH                              01644\n         B     AFFLOOP         LOOP                                     01645\nAFFOUND  OC    UNITIND,DTYPE   SET UNIT TYPE FROM PREV                  01646\n         OI    UNITIND,AFF     TURN ON FOUND BY AFF IND                 01647\n         B     DDLOOP          GO PROCESS NEXT ENTRY                    01648\n         SPACE 4                                                        01649\n*********************************************************************** 01650\n*        DD VOL                                                       * 01651\n*********************************************************************** 01652\nDVOL     CLI   0(R4),VOLUMEK  SEE IF VOL= KEYWORD                       01653*19\n         BNE   DSER           NO, BRANCH                                01654\n         SLR   R5,R5                                                    01655*19\n         ICM   R5,1,1(R4)     LOAD NUM OF SUBPARAMS                     01656*19\n         BZ    DDLOOP         YES, GO GET NEXT PARAM                    01657\n         CH    R5,H#4         SEE IF AT LEAST 4 PARAMS                  01658*19\n         BL    DDLOOP         LESS THAN 4, NONE NEEDED                  01659\n         BNH   DVOL01         NO, CONTINUE                              01660\n         LA    R15,P@26       SET ERROR NUMBER                          01661\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01662**7\n         B     DDLOOP         GET OUT                                   01663\n*********************************************************************** 01664\n*        WE NEED ONLY THE 4TH PARAM (VOL COUNT)                       * 01665\n*********************************************************************** 01666\nDVOL01   DS    0H                                                       01667\n         SLR   R2,R2          ZERO WORK REG                             01668*24\n         LA    R4,2(,R4)      LOAD START OF SUBPARAMS                   01669*19\nVOLOOP1  LA    R2,1(,R2)      ADD 1 TO COUNTER                          01670**4\n         SLR   R3,R3          CLEAR REG FOR IC                          01671\n         IC    R3,0(,R4)      LOAD LENGTH OF SUBPARAM                   01672*19\n         CH    R2,H#4         SEE IF 4TH PARAM                          01673**4\n         BL    VOLOOP3        LESS THAN 4, GO GET NEXT                  01674\n         BH    DDLOOP         GREATER THAN 4, GET OUT                   01675\n         LTR   R3,R3          TEST LENGTH                               01676\n         BZ    DDLOOP         ZERO, GET OUT                             01677\n         CH    R3,H#8         SEE IF LENGTH > 8                         01678\n         BNH   VOLOOP1A       NO, CONTINUE                              01679\n         LA    R15,P@26       SET ERROR NUMBER                          01680\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01681**7\n         B     DDLOOP         GET OUT                                   01682\nVOLOOP1A DS    0H                                                       01683\n         LR    R15,R2         SAVE SUBPARAM COUNT                   WEJ 01684**5\n*********************************************************************** 01685\n*        CHECK VOLUME COUNT FOR NUMERIC                               * 01686\n*********************************************************************** 01687\n         BCTR  R3,R0          SET LENGTH TO MACHINE LENGTH              01688**5\n         L     R2,=A(NUMERTBL) POINT TO NUMERIC TRANLAT                 01689**5\n         EX    R3,TRT1        EXECUTE NUMERIC TRANSLATE TEST        WEJ 01690**6\n         BNZ   VOLOOP4        NOT NUMERIC                           WEJ 01691*13\n         EX    R3,PACK1       PACK VOLUME COUNT                         01692\n         LR    R2,R15         RESTORE SUBPARAM COUNT                WEJ 01693**5\n         LA    R3,1(,R3)      RESTORE LENGTH                            01694\n         CVB   R15,DOUBLE     CONVERT VOL COUNT TO BIN                  01695\n         STC   R15,VOLCNT     SAVE VOL CNT                              01696\nVOLOOP3  LA    R4,1(R3,R4)    INCRMENT TO NEXT POS SUBPARAM             01697*19\n         B     VOLOOP1        LOOP                                      01698\nVOLOOP4  LA    R15,P@27       SET ERROR NUMBER                          01699\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01700**7\n         B     DDLOOP         GO GET NEXT PARM                          01701\n         EJECT                                                          01702\n*********************************************************************** 01703\n*        DD VOL=SER                                                   * 01704\n*********************************************************************** 01705\nDSER     CLI   0(R4),SERMK    SEE IF VOL=SER= KEYWORD                   01706*19\n         BNE   DREF           NO, BRANCH                                01707\n*********************************************************************** 01708\n*        ALL WE NEED IS THE NUMBER OF VOL/SER'S                       * 01709\n*        AND THE 1ST VOLSER IN THE LIST IF PRESENT                    * 01710\n*********************************************************************** 01711\n         SLR   R5,R5          CLEAR REGISTER 5                          01712*19\n         ICM   R5,1,1(R4)     LOAD NUMBER OF SUBPARAMS                  01713*19\n         STC   R5,SERCNT      SAVE NUMBER OF VOL/SER'S                  01714*19\n         BZ    DDLOOP         ZERO SUBPARAMS, GET OUT                   01715\n         SLR   R3,R3          CLEAR REGISTER 3                          01716\n         ICM   R3,1,2(R4)     LOAD LEN OF 1ST VOLSER                    01717*19\n         BZ    DDLOOP         NULL VOLSER, GET OUT                      01718\n         CH    R3,H#6         SEE IF MAX LEN EXCEEDED                   01719\n         BNH   DSER01         NO, BRANCH                                01720\n         LA    R15,P@28       SET ERROR NUMBER                          01721\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01722**7\n         B     DDLOOP         GET OUT                                   01723\nDSER01   DS    0H                                                       01724\n         BCTR  R3,0           MAKE MACHINE LENGTH                       01725\n         EX    R3,MOVE13      MOVE 1ST VOLSER TO SAVE                   01726\n         B     DDLOOP         GO GET NEXT PARAM                         01727\n         SPACE 4                                                        01728\n*********************************************************************** 01729\n*        DD VOL=REF                                                   * 01730\n*********************************************************************** 01731\nDREF     CLI   0(R4),REFMK    SEE IF VOL=REF= KEYWORD                   01732*19\n         BNE   DLABEL         NO, BRANCH                                01733\n         SLR   R5,R5          CLEAR REG FOR ICM                         01734*19\n         ICM   R5,1,2(R4)     LOAD 'LENGTH' OF REFERBACK                01735*19\n         BZ    DDLOOP         ZERO LENGTH, NULL, BRANCH                 01736\n         BP    DREF00         HIGH BIT NOT ON, NOT A REFERBACK          01737\n         BAL   R14,REFBACK    GO TO REFERBACK ROUTINE                   01738\n         OI    UNITIND,UNITFND SET UNIT FOUND IND                       01739*12\n         OC    UNITIND,REFUNIT SAVE UNIT OF PREV DD                     01740\n         MVC   TVOLSER,REFVOL SAVE REFERBACK VOLSER                     01741\n         B     DDLOOP         GO GET NEXT PARAM                         01742\n*********************************************************************** 01743\n*        AT THIS POINT, THE REFERBACK IS PROBABLY TO A CATALOGED      * 01744\n*        DATA SET.                                                    * 01745\n*********************************************************************** 01746\nDREF00   CH    R5,H#44        SEE IF LENGTH OF DSNAME EXCEEDS MAX       01747*19\n         BNH   DREF00A        NO, BRANCH                                01748\n         LA    R15,P@34       SET ERROR NUMBER                          01749\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01750**7\n         B     DDLOOP         GET OUT                                   01751\nDREF00A  DS    0H                                                       01752\n         MVC   LDSN,BLANKS    BLANK DSNAME                              01753\n         BCTR  R5,0           MAKE MACHINE LENGTH                       01754*19\n         EX    R5,MOVE17      MOVE DSNAME TO SAVE                       01755*19\n         L     R7,FIRSTENT    LOAD START OF TABLE                       01756\n         LA    R7,ENTLEN(,R7) INCREMENT PAST JOB ENTRY                  01757\nDREF01   CLI   ENTRYTYP,TYPEDD  SEE IF DD ENTRY                         01758\n         BE    DREF02         YES, GO SEE IF MATCH                      01759\n         CLI   ENTRYTYP,TYPEND  SEE IF END OF TABLE                     01760\n         BE    DREF05         NOT FOUND, GO CHECK CATALOG               01761\n         B     DREF03         LOOP                                      01762\nDREF02   CLC   DDSN,3(R4)     SEE IF SAME DSNAME                        01763*19\n         BE    DREF04         YES, CHARGE FOR THE DSNAME                01764\nDREF03   LA    R7,ENTLEN(,R7) INCREMENT TO NEXT DD ENTRY                01765\n         B     DREF01         LOOP UNTIL DONE                           01766\nDREF04   DS    0H                                                       01767*12\n*        OI    UNITIND,UNITFND SET UNIT FOUND IND                       01768*12\n         OC    UNITIND,DTYPE  SAVE UNIT TYPE FROM TABLE                 01769\n         MVC   TVOLSER,DVOLSER SAVE VOLSER FROM TABLE                   01770\n         B     DDLOOP         GO GET NEXT PARAM                         01771\nDREF05   BAL   R2,LOCATE      GO READ CATALOG                           01772**4\n         LTR   R15,R15        TEST RETURN CODE                          01773\n         BNZ   DDLOOP         NOT CATALOGED, IGNORE IT                  01774\n         CLC   CAMLCNT,$ZEROS    ANY VOLUME ENTRIES?                WEJ 01775\n         BE    DDLOOP         NO, IGNORE IT                             01776\n         CLI   CAMVOL,X'00'   MAKE SURE THAT THERE IS A VOLSER          01777\n         BE    DDLOOP         NO, VSAM LIED AGAIN, IGNORE THIS ENTRY    01778\n         MVC   VOLCNT,CAMLCNT SAVE VOLUME COUNT                         01779\n         MVC   TVOLSER,CAMVOL SAVE VOLSER FROM CATALOG                  01780\n         TM    UCBTYP3,X'80'  TAPE UNIT?                                01781\n         BO    DREF06         YES, BRANCH                               01782\n         BAL   R2,UCBSEAR     NO, GO SEARCH UCBS FOR PRIV MOUNT         01783**4\n         B     DDLOOP         GO GET NEXT PARAM                         01784\nDREF06   OI    UNITIND,TAPE   TURN ON TAPE IND                          01785\n         B     DDLOOP         GO GET NEXT PARAM                         01786\n         SPACE 6                                                        01787\n*********************************************************************** 01788\n*        DD LABEL                                                     * 01789\n*********************************************************************** 01790\nDLABEL   CLI   0(R4),LABELK   SEE IF LABEL= KEYWORD                     01791*19\n         BNE   DEXPDT         NO, BRANCH                                01792\n         SLR   R5,R5          CLEAR REG FOR ICM                         01793*19\n         ICM   R5,1,1(R4)     LOAD NUMBER SUBPARAMS                     01794*19\n         CH    R5,H#2         SEE IF AT LEAST 2 SUBPARAMETERS           01795*19\n         BL    DDLOOP         NO, BRANCH                                01796\n         SLR   R3,R3          CLEAR REG FOR ICM                         01797\n         ICM   R3,1,2(R4)     LOAD LENGTH OF FIRST SUBPARAM             01798*19\n         LA    R4,3(R3,R4)    LOAD START ADDR OF SECOND SUBPARAMETER    01799*19\n         ICM   R3,1,0(R4)     LOAD LENGTH OF SECOND SUBPARAM            01800*19\n         CLC   C#BLP,1(R4)  SEE IF BLP PROCESSING                       01801*19\n         BNE   DDLOOP         NO, GET OUT                               01802\n*********************************************************************** 01803\n*        DO NOT ALLOW BLP                                             * 01804\n*********************************************************************** 01805\n         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM  ALLOWED?  01806\n         BM    DDLOOP         YES, GET OUT                              01807\n         B     DDLOOP         ALLOW EVERYONE TO USE BLP      OVERRIDE   01808\n         LA    R15,P@44       SET ERROR NUMBER                          01809\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01810**7\n         B     DDLOOP         GET OUT                                   01811\n         EJECT                                                          01812\n*********************************************************************** 01813\n*        DD LABEL=EXPDT                                               * 01814\n*********************************************************************** 01815\nDEXPDT   CLI   0(R4),EXPDTMK  SEE IF LABEL=EXPDT KEYWORD                01816*19\n         BNE   DINTRDR        NO, BRANCH                                01817\n         SLR   R5,R5          CLEAR REG FOR ICM                         01818*19\n         ICM   R5,1,1(R4)     LOAD NUMBER SUBPARAMS                     01819*19\n         BZ    DDLOOP         ZERO, NULL, BRANCH                        01820\n         LA    R4,2(,R4)      LOAD START ADDR OF SUBPARAMS              01821*19\n         SLR   R3,R3          CLEAR REG FOR ICM                         01822\n         ICM   R3,1,0(R4)     LOAD LENGTH OF FIRST SUBPARAM             01823*19\n         CH    R3,H#5         SEE IF LENGTH = 5                         01824\n         BNE   DDLOOP         NO, GET OUT                               01825\n         CLC   C#98000,1(R4)  SEE IF EXPDT=98000                        01826*19\n         BNE   DDLOOP         NO, GET OUT                               01827\n*********************************************************************** 01828\n*        DO NOT ALLOW EXPDT=98000 UNLESS AUTHORIZED                   * 01829\n*********************************************************************** 01830\n         TM    JOBIND,JOBSTC+JOBTECH+JOBPROD+JOBOPER+JOBCOMM ALLOW? WEJ 01831\n         BM    DDLOOP         YES, GO TO DDLOOP                     WEJ 01832\n         LA    R15,P@45       SET ERROR NUMBER                          01833\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        01834**7\n         B     DDLOOP         GO TO DDLOOP                          WEJ 01835\nDDSMF1   DS    0H                                                   WEJ 01836\n         BAL   R14,SMFWTM     GO WRITE SMF RECORD                       01837\n         B     DDLOOP         GET OUT                                   01838\n         SPACE 4                                                        01839\n*********************************************************************** 01840\n*        DD SYSOUT                                                    * 01841\n*********************************************************************** 01842\nDINTRDR  CLI   0(R4),SYSOUTK  SEE IF SYSOUT= KEYWORD                    01843*19\n         BNE   DDQNAME        NO, CHECK FOR QNAME                   WEJ 01844\n         SLR   R5,R5          ZERO OUT R5                           WEJ 01845*19\n         ICM   R5,1,1(R4)     GET NUMBER OF POSITIONAL SUB PARAMS.      01846*19\n         BZ    DDLOOP         IF NONE, GET NEXT PARAM.                  01847\n         CH    R5,H#3         ARE THERE 3 PARAMETERS                    01848*19\n         BNE   DDLOOP         NO, THERE IS NO FORM, GET NEXT PARAM      01849\n         SLR   R3,R3          ZERO OUT REGISTER 3                       01850\n         ICM   R3,1,2(R4)     GET LENGTH OF FIRST PARAMETER             01851*19\n         LA    R4,3(R3,R4)    POINT TO LENGTH OF NEXT PARAM             01852*19\n         ICM   R3,1,0(R4)     GET LENGTH OF NEXT PARAM                  01853*19\n         LA    R4,1(R3,R4)    POINT TO LENGTH OF NEXT PARM (FORM-ID)    01854*19\n         ICM   R3,1,0(R4)     GET LENGTH OF NEXT PARAM                  01855*19\n         BZ    DDLOOP         IF ZERO, GO TO GET NEXT PARAM             01856\n         CH    R3,H#8         IS LENGTH GREATER THAN 8                  01857\n         BNH   DDMVFORM       NO, GO TO MOVE FORM                       01858\n         LA    R15,P@38       SET ERROR POSITION                        01859\n         BAL   R14,MSGRTN     PERFORM ERROR ROUTINE                     01860**7\n         B     DDLOOP         GET NEXT PARAMETER                        01861\nDDMVFORM DS    0H                                                       01862\n         EX    R3,DDMVFRM     MOVE FORM-ID AND LENGTH TO SAVE AREA      01863\n         B     DDLOOP         GET NEXT PARAMETER                        01864\nDDMVFRM  MVC   SAVEFORM(0),0(R4)  EXECUTED MOVE OF FORM AND ITS LENGTH  01865*19\n*********************************************************************** 01866\n*        DD QNAME                                                     * 01867\n*********************************************************************** 01868\nDDQNAME  DS    0H                                                       01869\n         CLI   0(R4),QNAMEK   SEE IF QNAME= PARAMETER               WEJ 01870*19\n         BNE   DDFCB          IF NOT, CHECK FOR FCB=                WEJ 01871\n         SLR   R5,R5          CLEAR REGISTER FOR ICM                WEJ 01872*19\n         ICM   R5,1,1(R4)     INSERT NUMBER OF SUBPARAMETERS        WEJ 01873*19\n         BZ    DDLOOP         NONE, GET NEXT PARAMETER              WEJ 01874\n         MVI   SMFRTYPE,X'F7' SET RECORD TYPE FOR QNAME USE REC.    WEJ 01875\n         SLR   R3,R3          CLEAR REGISTER FOR ICM                WEJ 01876\n         IC    R3,2(,R4)      GET LENGTH                                01877*19\n         MVC   SAVEQNM,BLANKS BLANK OUT SAVE QNAME                  WEJ 01878\n         CLI   2(R4),X'08'    IS FIELD LENGTH 8                     WEJ 01879*19\n         BH    QERRORL        GO TO FLAG QNAME GREATER THAN 8       WEJ 01880\n         CLI   2(R4),X'00'    IS FIELD LENGTH 0                     WEJ 01881*19\n         BE    DDLOOP         YES, GET NEXT PARAMETER               WEJ 01882\n         BCTR  R3,R0          ADJUST FOR EXECUTED MOVE              WEJ 01883\n         EX    R3,QNMMOVE     MOVE QNAME                            WEJ 01884\n         CLI   2(R4),X'02'    IS FIELD LENGTH 2                     WEJ 01885*19\n         BE    QCHECK1        YES, CHECK FOR QUEUES PH AND PQ       WEJ 01886\n         CLI   2(R4),X'08'    IS FIELD LENGTH 8                     WEJ 01887*19\n         BNE   DDSMF1         NO, NOT SINGLE STREAMED QUEUE, GO LOG WEJ 01888\n         CLC   C#ADMMSG,3(R4)     IS QUEUE ADMINMSG                 WEJ 01889*19\n         BNE   DDSMF1         NO, NOT SINGLE STREAMED QUEUE, GO LOG WEJ 01890\n         CLI   TCMCLASS,C'L'  IS CLASS FORCE ALREADY = 'L'          WEJ 01891\n         BE    DDLOOP         YES, GET NEXT PARAMETER               WEJ 01892\n         CLI   TCMCLASS,X'00' IS CLASS FORCE NULL                   WEJ 01893\n         BNE   QERROR         NO, GO TO ERROR                       WEJ 01894\n         MVI   TCMCLASS,C'L'  MOVE 'L' TO TCMCLASS                  WEJ 01895\n         B     DDSMF1         GET NEXT PARAMETER                    WEJ 01896\nQNMMOVE  MVC   SAVEQNM(0),3(R4)  EXECUTED MOVE OF QNAME             WEJ 01897*19\nQCHECK1  DS    0H                                                   WEJ 01898\n         CLC   C#PH,3(R4)     IS QUEUE PH                           WEJ 01899*19\n         BE    QCHECK1A       YES, BYPASS NEXT COMPARE              WEJ 01900\n         CLC   C#PQ,3(R4)     IS QUEUE PQ                           WEJ 01901*19\n         BNE   DDSMF1         NO, NOT SINGLE STREAMED QUEUE         WEJ 01902\nQCHECK1A DS    0H                                                       01903\n         CLI   TCMCLASS,C'J'  IS CLASS FORCE ALREADY = 'J'          WEJ 01904\n         BE    DDSMF1         YES, GO LOG                           WEJ 01905\n         CLI   TCMCLASS,X'00' IS CLASS FORCE NULL                   WEJ 01906\n         BNE   QERROR         NO, GO TO ERROR                       WEJ 01907\n         MVI   TCMCLASS,C'J'  MOVE 'J' TO TCMCLASS                  WEJ 01908\n         B     DDLOOP         GET NEXT PARAMETER                    WEJ 01909\nQERROR   DS    0H                                                   WEJ 01910\n         LA    R15,P@50       SET ERROR NUMBER                      WEJ 01911\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                    WEJ 01912**7\n         B     DDLOOP         GET NEXT PARAMETER                    WEJ 01913\nQERRORL  DS    0H                                                   WEJ 01914\n         LA    R15,P@49       SET ERROR NUMBER                      WEJ 01915\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                    WEJ 01916**7\n         B     DDLOOP         GET NEXT PARAMETER                    WEJ 01917\n* * *    B     DDSMF1         GO LOG                                WEJ 01918\n* * *    B     DDLOOP         GET NEXT PARAMETER                    WEJ 01919\nDDFCB    DS    0H                                                       01920\n         CLI   0(R4),FCBK     IS THIS FCB=                              01921*19\n         BNE   DDLOOP         NO, GET NEXT PARAMETER                    01922\n         MVI   FCBFLAG,C'Y'   SET FCB FOUND FLAG TO YES                 01923\n         B     DDLOOP                                                   01924\n         SPACE 4                                                        01925\n*********************************************************************** 01926\n*        THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING         * 01927\n*        PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR       * 01928\n*        FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT      * 01929\n*        WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER     * 01930\n*        BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF       * 01931\n*        SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.        * 01932\n*        IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY    * 01933\n*        A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH      * 01934\n*        ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A         * 01935\n*        SINGLE SUBPARAMETER.                                         * 01936\n*********************************************************************** 01937\nDDLOOP   L     R4,PARMADDR    RESTORE START OF PARAMETER ADDRESS        01938*19\n         SLR   R2,R2          CLEAR REGISTER FOR ICM                    01939**4\n         LA    R4,1(,R4)      INCREMENT PAST KEYWORD                    01940*19\n         ICM   R2,1,0(R4)     LOAD SUBPARAMETER COUNT                   01941*19\n         BNZ   DDLOOP1        OK, BRANCH INTO ROUTINE                   01942\n         LA    R4,1(,R4)      NONE, INCREMENT PAST COUNT                01943*19\n         B     DDLOOP5        AND GET OUT OF ROUTINE                    01944\nDDLOOP1  LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR              01945*19\nDDLOOP2  SLR   R5,R5          CLEAR REGISTER FOR ICM                    01946*19\n         ICM   R5,1,0(R4)     LOAD PARAMETER LENGTH                     01947*19\n         BNM   DDLOOP3        HIGH BIT NOT ON, ONLY 1 PARAMETER         01948\n         N     R5,F#127       'AND' OUT THE HIGH ORDER BIT              01949*19\n         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE               01950*19\n         B     DDLOOP4        BRANCH                                    01951\nDDLOOP3  LA    R5,1           SET PARAM COUNT TO 1                      01952*19\nDDLOOP4  SLR   R3,R3          CLEAR REGISTER FOR ICM                    01953\n         ICM   R3,1,0(R4)     LOAD PARAMETER LENGTH                     01954*19\n         LA    R4,1(R3,R4)    INCREMENT PAST PARM                       01955*19\n         BCT   R5,DDLOOP4     LOOP UNTIL PROCESSED ALL PARMS            01956*19\n         BCT   R2,DDLOOP2     LOOP UNTIL PROCESSED ALL PARMS            01957**4\nDDLOOP5  ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS           01958*19\n         B     DDPARM         CONTINUE                                  01959\n         EJECT                                                          01960\n*********************************************************************** 01961\n*        THIS IS WHERE WE LOOK AT WHAT WE HAVE FOUND OUT ABOUT THE    * 01962\n*        DD STATEMENT WE HAVE JUST FINISHED PROCESSING.               * 01963\n*        THE FOLLOWING ARE LOOKED AT                                  * 01964\n*          1)  THE DISPOSITION FOR SOME DATA SETS                     * 01965\n*              MUST BE AUTHORIZED FOR OTHER THAT SHR                  * 01966\n*          2)  THE TEMPORARY ENTRY MUST BE SAVED IF UNIT IS A TAPE    * 01967\n*              OR A PRIV UNIT.                                        * 01968\n*          3)  IF THE ENTRY IS A TAPE OR PRIV, THE UNIT COUNT MUST BE * 01969\n*              ADDED TO THE RUNNING COUNT FOR THE STEP.               * 01970\n*********************************************************************** 01971\n*                                                                       01972\n*********************************************************************** 01973\n*        FORCE FCB, IF FCB NOT PRESENT AND SYSOUT=(CLASS,,FORM)       * 01974\n*********************************************************************** 01975\nDDEND    DS    0H                                                       01976\n         CLI   FCBFLAG,C'Y'       WAS FCB= FOUND                        01977\n         BE    DDEND10            YES                                   01978\n         CLI   SAVEFMLN,X'04'     IS SAVE FORM LENGTH > 4               01979\n         BNH   DDEND01            NO, DO NOT FORCE LENGTH               01980\n         MVI   SAVEFMLN,X'04'     FORCE LENGTH OF 4                     01981\nDDEND01  DS    0H                                                       01982\n         SLR   R3,R3              ZERO OUT REGISTER 3                   01983\n         ICM   R3,1,SAVEFMLN      LOAD LENGTH                           01984\n         BZ    DDEND10            BYPASS IF LENGTH ZERO                 01985\n         MVI   0(R4),FCBK         OVERLAY END KEY WITH FCB KEY          01986*19\n         MVI   1(R4),1            SET NUMBER OF SUB PARAMETERS TO 1     01987*19\n         EX    R3,MVDDFCB         MOVE SAVED FORM (FCB)                 01988\n         LA    R3,3(,R3)          GET SIZE OF ADDITION                  01989\n         LA    R4,0(R3,R4)        POINT TO NEW LOCATION OF ENDKEY       01990*19\n         MVI   0(R4),ENDK         MOVE END KEY TO NEW POSITION          01991*19\n         SLR   R0,R0              ZERO OUT REGISTER 1                   01992\n         ICM   R0,B'0011',STRLTH  GET STRING LENGTH FOR INCREMENT       01993\n         ALR   R0,R3              INCREMENT LENGTH                      01994\n         STCM  R0,B'0011',STRLTH  SAVE INCREMENTED LENGTH               01995\n         B     DDEND10                                                  01996\nMVDDFCB  MVC   2(0,R4),SAVEFORM   MOVE SAVED FORM                       01997*19\n*********************************************************************** 01998\n*        DO NOT ALLOW A DISP OF \"DELETE\" FOR SYSTEM DATA SETS.        * 01999\n*********************************************************************** 02000\nDDEND10  DS    0H                                                       02001\n         CLC   TDSN(5),C#SYS1 SEE IF SYS1. DATA SET                     02002\n         BE    DDEND20        YES, BRANCH TO FURTHER CHECK          WEJ 02003\n         CLC   TDSN(5),C#SYS2 SEE IF SYS2. DATA SET                     02004\n         BE    DDEND20        YES, BRANCH TO FURTHER CHECK          WEJ 02005\n         CLC   TDSN(3),C#LD    SEE IF LD. DATA SET                  WEJ 02006\n         BNE   DDEND40        NO, BRANCH TO NEXT CHECK              WEJ 02007\nDDEND20  TM    DISPIND,DELETE SEE IF DISP=DELETE                        02008\n         BNO   DDEND30        NO, BRANCH                                02009\n         TM    JOBIND,JOBTECH                 IS JOB AUTHORIZED     WEJ 02010\n         BZ    DDEND35        NO, GO TO ERROR MESSAGE                   02011\n*********************************************************************** 02012\n*        DO NOT ALLOW A DISP OF MOD FOR SYSTEM DATA SETS           WEJ* 02013\n*                                                                  WEJ* 02014\n*********************************************************************** 02015\nDDEND30  TM    DISPIND,MOD    SEE IF DISP=MOD                       WEJ 02016\n         BZ    DDEND40        NO   BRANCH                           WEJ 02017\n*        IF DISP = MOD, JOB MUST BE AUTHORIZED                      WEJ 02018\n         TM    JOBIND,JOBTECH                IS JOB AUTHORIZED      WEJ 02019\n         BO    DDEND40        YES, BRANCH                               02020\nDDEND35  LA    R15,P@29       SET ERROR NUMBER                          02021\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02022**7\n*********************************************************************** 02023\n*        IF UNIT HAS NOT BEEN DETERMINED, THE UNIT TYPE MUST          * 02024\n*        BE SEARCHED FOR IN THE FOLLOWING ORDER:                      * 02025\n*                                                                     * 02026\n*        1)  THE DSNAME TABLE MAINTAINED BY THIS EXIT SINCE THE       * 02027\n*            DATASET MAY HAVE BEEN CATALOGED OR PASSED BY A           * 02028\n*            PREVIOUS DD STATEMENT.                                   * 02029\n*        2)  THE SYSTEM CATALOG                                       * 02030\n*                                                                     * 02031\n*********************************************************************** 02032\nDDEND40  CLI   UNITIND,X'00'  SEE IF UNIT HAS BEEN DETERMINED           02033\n         BNE   DDEND150       YES, BRANCH                               02034\n         CLI   TDSN,C' '      SEE IF DSN SPECIFIED                      02035\n         BE    DDEND150       NOT SPECIFIED, GET OUT                    02036\n         CLI   TVOLSER,X'00'  SEE IF VOLSER SPECIFIED                   02037\n         BE    DDEND45        NO, GO SEARCH TABLE AND/OR CATALOG        02038\n         BAL   R2,UCBSEAR     NO, GO SEARCH UCBS FOR PRIV MOUNT         02039**4\n         B     DDEND150       GET OUT                                   02040\nDDEND45  TM    DISPIND,NEW    SEE IF THIS IS A NEW DATASET              02041\n         BO    DDEND150       YES, VOLSER WILL BE A WORK PACK           02042\n         L     R7,FIRSTENT    LOAD ADDR OF START OF TABLE               02043\n*********************************************************************** 02044\n*        SEARCH THE DSNAME TABLE MAINTAINED BY THIS EXIT              * 02045\n*********************************************************************** 02046\nDDEND50  LA    R7,ENTLEN(,R7) INCREMENT TO NEXT ENTRY                   02047\n         CLI   ENTRYTYP,TYPEND END OF TABLE?                            02048\n         BE    DDEND60        YES, GO CHECK CATALOG                     02049\n         TM    ENTRYTYP,TYPEDD DD ENTRY?                                02050\n         BNO   DDEND50        NO, LOOP                                  02051\n         CLC   DDSN,TDSN      DSN MATCH?                                02052\n         BNE   DDEND50        NO, LOOP                                  02053\n         OC    UNITIND,DTYPE  SAVE UNIT INFO                            02054\n         MVC   TVOLSER,DVOLSER SAVE VOLSER INFO                         02055\n         B     DDEND150       GET OUT                                   02056\n*********************************************************************** 02057\n*        SEARCH CATALOG FOR UNIT INFO                                 * 02058\n*********************************************************************** 02059\nDDEND60  DS    0H                                                       02060\n         AIF   ('&CAMLST' EQ 'YES').CAML1                               02061\n         B     DDEND150       BYPASS CAMLST NOP                         02062\n.CAML1   ANOP                                                           02063\n         CLC   TDSN(5),C#SYS1 SEE IF SYS1. DATA SET                     02064\n         BE    DDEND150       YES, NO NEED TO CAMLST                    02065\n         TM    STRDINDC,DTXSYOUT SEE IF DD OUTPUT SPOOL FILE            02066\n         BO    DDEND150       YES, NO NEED TO CAMLST                    02067\n         TM    JOBIND,JOBSTC                   IS LOCATE NEEDED?    WEJ 02068\n         BO    DDEND150       YES, NO NEED TO CAMLST                WEJ 02069\n         MVC   LDSN,TDSN      SAVE DSNAME                               02070\n         BAL   R2,LOCATE      GO READ CATALOG                           02071**4\n         LTR   R15,R15        TEST RETURN CODE                          02072\n         BZ    DDEND70        ZERO, BRANCH                              02073\n         CH    R15,H#8        DSNAME NOT FOUND OR GDG LEVEL?            02074\n         BE    DDEND90        YES, BRANCH                               02075\nDDEND70  CLC   CAMLCNT,$ZEROS    ANY VOLUME ENTRIES                 WEJ 02076\n         BE    DDEND150       NO, BRANCH                                02077\n         CLI   CAMVOL,X'00'   MAKE SURE THAT THERE IS A VOLSER          02078\n         BE    DDEND150       NO, VSAM LIED AGAIN, IGNORE THIS ENTRY    02079\n         MVC   VOLCNT,CAMLCNT SAVE VOLUME COUNT                         02080\n         MVC   TVOLSER,CAMVOL SAVE VOLSER FROM CATALOG                  02081\n         TM    UCBTYP3,X'80'  TAPE UNIT?                                02082\n         BZ    DDEND150       NO, GET OUT                               02083\nDDEND80  OI    UNITIND,TAPE   TURN ON TAPE IND                          02084\n         B     DDEND150       BYPASS ROUTINES                           02085\n         EJECT                                                          02086\n*********************************************************************** 02087\n*        DATA SET NOT FOUND, MAY BE GDG LEVEL                         * 02088\n*        DO A GENERIC LOCATE FOR THE DSNAME INDEX GIVEN               * 02089\n*********************************************************************** 02090\nDDEND90  MVC   SVC26DS,LDSN   MOVE DSNAME TO SVC26 AREA                 02091\n         LA    R1,43          LOAD MAXIMUM LENGTH OF DSN                02092\n         LA    R14,SVC26DS+42 LOAD ADDRESS OF END OF DSN                02093\nDDEND100 CLI   0(R14),C' '    SEE IF LAST CHAR DSN                      02094\n         BNE   DDEND110       YES, BRANCH                               02095\n         BCTR  R14,0          BACK UP DSN POINTER 1 POSITION            02096\n         BCT   R1,DDEND100    LOOP UNTIL FOUND                          02097\nDDEND110 LTR   R1,R1          TEST LENGTH                               02098\n         BZ    DDEND150       ZERO, NO DSN, BRANCH                      02099\n         STC   R1,SVC26DSL    SAVE LENGTH OF DSN                        02100\n         XC    CTGPL,CTGPL    ZERO PARM LIST                            02101\n         MVI   CTGPL,B'00000111' SET CTGOPTN1                           02102\n         MVI   CTGPL+2,B'00010001' SET CTGOPTN3                         02103\n         LA    R1,SVC26DSN    LOAD ADDRESS OF DSNAME                    02104\n         ST    R1,CTGPL+4     SET CTGENT                                02105\n         XC    CTGPL+8(4),CTGPL+8 ZERO CTGCAT                           02106\n         XC    CTGPL+18(4),CTGPL+18 ZERO CTGPSWD                        02107\n         LH    R1,H#5000      LOAD LENGTH OF WORK AREA                  02108\n         STH   R1,SVC26WRK    AND SAVE IT WORK AREA                     02109\n         LA    R1,SVC26WRK    LOAD ADDRESS OF WORK AREA                 02110\n         ST    R1,CTGPL+12    SET CTGWKA                                02111\n         LA    R1,CTGPL       LOAD ADDRESS OF WORK AREA                 02112\n         SVC   26             CALL CATALOG GENERIC SEARCH               02113\n         LTR   R15,R15        TEST RETURN CODE                          02114\n         BNZ   DDEND150       NOT ZERO, BRANCH                          02115\n*********************************************************************** 02116\n*        FOUND DATA SETS AT THE GIVEN INDEX LEVEL.  CHECK TO SEE      * 02117\n*        IF GDG LEVEL.                                                * 02118\n*********************************************************************** 02119\n         LH    R14,SVC26WRK+2 LOAD LENGTH OF AREA+4                     02120\n         SH    R14,H#4        SUBTRACT LENGTH OF PREFIX                 02121\n         SRDA  R14,32         SHIFT TO ODD REGISTER OF PAIR             02122\n         D     R14,F#45       DIVIDE BY LENGTH OF EACH ENTRY            02123\n         LTR   R5,15          TEST NUMBER OF DSNAMES RETURNED           02124*19\n         BZ    DDEND150       ZERO, NONE                                02125\n         BM    DDEND150       NEGATIVE, ERROR                           02126\n         LA    R4,SVC26WRK+4  POINT TO FIRST DSN                        02127*19\n         CLI   0(R4),C'B'     IS THIS A GDG BASE (VSAM CATALOG ONLY)    02128*19\n         BE    DDEND140       YES, BRANCH                               02129\n         CLI   0(R4),C'A'     IS THIS A NONVSAM ENTRY                   02130*19\n         BNE   DDEND150       NO, BRANCH                                02131\n         SLR   R15,R15        ZERO, REGISTER FOR IC                     02132\n         IC    R15,SVC26DSL   LOAD BASE DSN LENGTH                      02133\n         LA    R15,2(R15,R4)  POINT PAST TYPE, BASE, AND '.'            02134*19\n         CLI   0(R15),C'G'    POSSIBLE GDG                              02135\n         BNE   DDEND150       NO, BRANCH                                02136\n         CLI   5(R15),C'V'    POSSIBLE GDG                              02137\n         BNE   DDEND150       NO, BRANCH                                02138\n         CLI   8(R15),C' '    POSSIBLE GDG                              02139\n         BNE   DDEND150       NO, BRANCH                                02140\n         MVC   DOUBLE,0(R15)  SAVE DSN SUFFIX                           02141\n         OC    DOUBLE,GDGMASK TEST NUMERIC POSITIONS                    02142\n         CLC   DOUBLE,0(R15)  SEE IF CHANGED                            02143\n         BNE   DDEND150       YES, NOT GDG, BRANCH                      02144\n         OI    UNITIND,UNITGDG UNIT INFORMATION FROM GDG PROCESSING     02145\n*********************************************************************** 02146\n*        LOCATE INDIVIDUAL DATA SETS RETURNED FROM THE GENERIC        * 02147\n*        LOCATE FROM SVC26.  ALL ENTRIES ARE LOCATED TO GET THE       * 02148\n*        VOLUME COUNT IF 'PARALLEL' MOUNTING IS REQUESTED.            * 02149\n*********************************************************************** 02150\nDDEND120 MVC   LDSN,1(R4)     SAVE DSNAME                               02151*19\n         BAL   R2,LOCATE      GO READ CATALOG                           02152**4\n         LTR   R15,R15        TEST RETURN CODE                          02153\n         BNZ   DDEND140       NOT ZERO, SOMETHINGS WRONG, LOOP          02154\n         CLC   CAMLCNT,$ZEROS    ANY VOLUME ENTRIES                 WEJ 02155\n         BE    DDEND140       NO, BYPASS ENTRY                          02156\n         CLI   CAMVOL,X'00'   MAKE SURE THAT THERE IS A VOLSER          02157\n         BE    DDEND140       NO, VSAM LIED AGAIN, IGNORE THIS ENTRY    02158\n         MVC   TVOLSER,CAMVOL SAVE VOLSER FROM CATALOG                  02159\n         SLR   R15,R15        CLEAR REG FOR IC                          02160\n         IC    R15,VOLCNT     LOAD VOLUME COUNT                         02161\n         AH    R15,CAMLCNT    ADD CAMLST VOLUME COUNT                   02162\n         STC   R15,VOLCNT     SAVE NEW VOLUME COUNT                     02163\n         TM    UCBTYP3,X'80'  TAPE UNIT?                                02164\n         BO    DDEND130       YES, BRANCH                               02165\n         BAL   R2,UCBSEAR     NO, GO SEARCH UCBS FOR PRIV MOUNT         02166**4\n         B     DDEND140       GET OUT                                   02167\nDDEND130 OI    UNITIND,TAPE   TURN ON TAPE IND                          02168\nDDEND140 LA    R4,45(,R4)     INCREMENT TO NEXT ENTRY                   02169*19\n         BCT   R5,DDEND120    LOOP UNTIL DONE                           02170*19\n*********************************************************************** 02171\n*        PROCESS ONLY DD STATEMENTS WHICH ARE FOR MOUNTABLE           * 02172\n*        DEVICES.                                                     * 02173\n*********************************************************************** 02174\nDDEND150 TM    UNITIND,TAPE   IS THIS A TAPE DD?                        02175\n         BO    DDEND160       YES, BRANCH                               02176\n         TM    UNITIND,PRIV   IS THIS A PRIV DD?                        02177\n         BNO   DDEND240       NO, DO NOT SAVE                           02178\n*********************************************************************** 02179\n*        IF THIS STATEMENT REQUIRES A MOUNTABLE DISK PACK, WRITE      * 02180\n*        AN ERROR MESSAGE SINCE WE NO LONGER HAVE ANY MOUNTABLE       * 02181\n*        DISK PACKS.                                                  * 02182\n*********************************************************************** 02183\n*        LA    R15,P@48       SET ERROR NUMBER                          02184\n*        BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02185**7\n*********************************************************************** 02186\n*        IF THE UNIT WAS DETERMINED BY UNIT=AFF, DO NOT CHARGE        * 02187\n*        FOR THE DEVICE BUT SAVE THE TABLE ENTRY FOR POSSIBLE         * 02188\n*        REFERBACKS BY SUBSEQUENT STATEMENTS.                         * 02189\n*********************************************************************** 02190\nDDEND160 TM    UNITIND,AFF    UNIT=AFF DD STATEMENT                     02191\n         BO    DDEND230       YES, DO NOT ADD TO UNIT COUNTS            02192\n         CLI   TVOLSER,X'00'  VOLSER SPECIFIED??                        02193\n         BE    DDEND180       NO, BRANCH                                02194\n         L     R7,LASTEXEC    LOAD ADDR LAST EXEC ENTRY                 02195\n         EJECT                                                          02196\n*********************************************************************** 02197\n*        SEE IF THE VOLSER WAS USED PREVIOUSLY IN THIS STEP.          * 02198\n*        IF SO, DO NOT CHARGE FOR THE DEVICE BUT AGAIN SAVE THE       * 02199\n*        TABLE ENTRY FOR POSSIBLE REFERBACKS BY FOLLOWING             * 02200\n*        STATEMENTS.                                                  * 02201\n*********************************************************************** 02202\nDDEND170 LA    R7,ENTLEN(,R7) INCREMENT TO NEXT ENTRY                   02203\n         CLI   ENTRYTYP,TYPEND SEE IF END OF TABLE                      02204\n         BE    DDEND180       YES, NO MATCH, BRANCH                     02205\n         CLC   TVOLSER,DVOLSER SEE IF VOLSER ALREADY REFERENCED         02206\n         BE    DDEND230       YES, DO NOT CHARGE FOR IT                 02207\n         B     DDEND170       LOOP                                      02208\n*********************************************************************** 02209\n*        IF PARALLEL MOUNTING WAS REQUESTED, CHARGE THE GREATER       * 02210\n*        OF THE DEVICES SPECIFIED BY THE UNITCOUNT FIELD OR THE       * 02211\n*        NUMBER OF VOLUMES.                                           * 02212\n*********************************************************************** 02213\nDDEND180 CLI   UNITCOUN,C'P'  SEE IF PARALLEL MOUNTING                  02214\n         BE    DDEND190       YES, BRANCH                               02215\n         MVC   ADDCOUNT,UNITCOUN MOVE UNIT COUNT TO COMMON              02216\n         B     DDEND210       BRANCH                                    02217\nDDEND190 CLC   VOLCNT,SERCNT COMPARE VOL COUNT & SERIAL CNT             02218\n         BL    DDEND200       SERIAL COUNT GREATER                      02219\n         MVC   ADDCOUNT,VOLCNT MOVE VOLUME COUNT TO COMMON              02220\n         B     DDEND210       BRANCH                                    02221\nDDEND200 MVC   ADDCOUNT,SERCNT MOVE SERIAL COUNT TO COMMON              02222\n*********************************************************************** 02223\n*        ADD THE DEVICE COUNT TO THE APPROPRIATE ACCUMULATOR.         * 02224\n*********************************************************************** 02225\nDDEND210 SLR   R15,R15        ZERO WORK REG                             02226\n         IC    R15,ADDCOUNT   MOVE UNIT COUNT TO REG                    02227\n         TM    UNITIND,TAPE   IS THIS A TAPE DD?                        02228\n         BO    DDEND220       YES, BRANCH                               02229\n         AH    R15,PRIVCNT    ADD RUNNING COUNT TO THIS ONE             02230\n         STH   R15,PRIVCNT    SAVE NEW RUNNING COUNT                    02231\n         B     DDEND230       BRANCH                                    02232\nDDEND220 AH    R15,TAPECNT    ADD RUNNING COUNT TO THIS ONE             02233\n         STH   R15,TAPECNT    SAVE NEW RUNNING COUNT                    02234\n*********************************************************************** 02235\n*        SAVE THE CURRENT TEMPORARY ENTRY SINCE IT SPECIFIES A        * 02236\n*        MOUNTABLE DEVICE TYPE.                                       * 02237\n*********************************************************************** 02238\nDDEND230 OC    TTYPE,UNITIND  SAVE UNIT INFO                            02239\n         LH    R14,ENTCOUNT   LOAD TABLE ENTRY COUNT                    02240\n         LA    R14,1(,R14)    ADD 1 TO COUNT                            02241\n         CH    R14,MAXENTS    SEE IF MAXIMUM REACHED                    02242\n         BNL   TBLFULL        MAXIMUM REACHED, TAKE DUMP & EXIT         02243\n         STH   R14,ENTCOUNT   STORE NEW ENTRY COUNT                     02244\n         L     R7,LASTENT     LOAD ADDR OF LAST ENTRY                   02245\n         LA    R7,ENTLEN(,R7) INCREMENT TO NEXT ENTRY                   02246\n         MVI   ENTRYTYP,TYPEDD SET ENTRY TO DD                          02247\n         MVC   DENTRY,TENTRY  MOVE TEMPORARY ENTRY TO TABLE             02248\n         MVC   DVOLSER,TVOLSER MOVE TEMP VOLSER TO TABLE                02249\n         MVC   DTYPE,UNITIND  SAVE UNIT INDICATOR                       02250\n         ST    R7,LASTENT     SAVE ADDR OF LAST ENTRY                   02251\n*********************************************************************** 02252\n*        IF THE DD STATEMENT IS FOR A JOBLIB, STEPLIB, JOBCAT,        * 02253\n*        OR A STEPCAT, THE DISPOSITION MUST BE \"SHR\".                 * 02254\n*********************************************************************** 02255\nDDEND240 CLC   TDDN,C#JOBLIB  SEE IF JOBLIB DD                          02256\n         BE    DDEND250       YES, BRANCH                               02257\n         CLC   TDDN,C#STEPLI  SEE IF STEPLIB DD                         02258\n         BE    DDEND260       YES, BRANCH                               02259\n         CLC   TDDN,C#JOBCAT  SEE IF JOBCAT DD                          02260\n         BE    DDEND270       YES, BRANCH                               02261\n         CLC   TDDN,C#STEPCA  SEE IF STEPCAT DD                         02262\n         BE    DDEND270       YES, BRANCH                               02263\n         B     GETNEXT        NO, GET OUT                               02264\nDDEND250 DS    0H                                                       02265\nDDEND260 TM    DISPIND,SHR    SEE IF DISP=SHR                           02266\n         BO    GETNEXT        YES, BRANCH                               02267\n         CLI   TDSN,C'&&'     IS THIS A TEMP DATASET                    02268\n         BE    GETNEXT        YES DISP IS OK                            02269\n         LA    R15,P@33       SET ERROR NUMBER                          02270\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02271**7\n         B     GETNEXT        GET OUT                                   02272\n*********************************************************************** 02273\n*        IF THE DD STATEMENT IS FOR A JOBCAT OR A STEPCAT, THE        * 02274\n*        JOB MUST BE AUTHORIZED.                                      * 02275\n*********************************************************************** 02276\nDDEND270 TM    JOBIND,JOBSTC+JOBTECH+JOBCOMM  JOBCAT/STEPCAT ALLOWED    02277\n         BM    DDEND280       YES, BRANCH                               02278\n         LA    R15,P@43       SET ERROR NUMBER                          02279\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02280**7\nDDEND280 TM    DISPIND,SHR    SEE IF DISP=SHR                           02281\n         BO    GETNEXT        YES, BRANCH                               02282\n         LA    R15,P@33       SET ERROR NUMBER                          02283\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02284**7\n         B     GETNEXT        GO GET NEXT TEXT RECORD                   02285\n         EJECT                                                          02286\n*********************************************************************** 02287\n*        THE TEXT OF THE EXEC CARD WHICH CALLS A PROC IS AS FOLLOWS   * 02288\n*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        * 02289\n*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          * 02290\n*            3)  1 BYTE OF MISCELLANEOUS INDICATORS                   * 02291\n*            4)  1 BYTE INDICATOR X'94' INDICATING EXEC POS INFORMATN * 02292\n*            5)  1 BYTE NUMBER OF EXEC POSITIONAL PARAMETERS          * 02293\n*                THE 1ST POS PARAMETER IS THE JOB STEP NAME           * 02294\n*                THE 2ND POS PARAMETER IS THE PROC NAME               * 02295\n*            6)  VARIABLE LENGTH LIST OF EXEC POS PARAMETERS          * 02296\n*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               * 02297\n*            7)  THE REST OF THE RECORD WILL BE IGNORED               * 02298\n*********************************************************************** 02299\n         EJECT                                                          02300\n*                                                                       02301\n*********************************************************************** 02302\n*        THE TEXT OF THE PROC CARD WILL BE SAVED FOR SUBSEQUENT       * 02303\n*        EXEC CARD PROCESSING.  THE STEP NAME WILL BE SAVED FROM      * 02304\n*        THE PROC CARD AND AND A POINTER SAVED TO THE START OF        * 02305\n*        THE FIRST KEYWORD PARM.  AFTER THE NORMAL EXEC CARD HAS      * 02306\n*        BEEN PROCESSED, THE PROC CARD TEXT WILL BE PROCESSED         * 02307\n*        WHICH WILL OVERRIDE ANY PREVIOUSLY PROCESSED PARAMETERS      * 02308\n*        ON THE EXEC CARD.                                            * 02309\n*********************************************************************** 02310\n         SPACE 4                                                        02311\n*********************************************************************** 02312\n*        SAVE THE ENTIRE TEXT OF THE EXECUTE STATEMENT WHICH          * 02313\n*        CALLS A PROCEDURE SO THAT ALL PROC OVERRIDES MAY BE          * 02314\n*        PROCESSED.                                                   * 02315\n*********************************************************************** 02316\nPROCARD  EQU   *                                                        02317\nPROCSTAR LR    R14,R6         SAVE ADDRESS OF CURRENT RECORD            02318\n         LH    R15,STRLTH     LOAD LENGTH OF TEXT RECORD                02319\n         CH    R15,H#512      SEE IF LENGTH EXCEEDS 512 BYTES           02320\n         BNH   PROCSTAS       NO, BRANCH                                02321\n         LA    R15,P@30       SET ERROR NUMBER                          02322\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02323**7\n         B     GETNEXT        GET OUT                                   02324\nPROCSTAS DS    0H                                                       02325\n         LA    R0,PROCTXT     LOAD ADDR OF TEXT SAVE AREA               02326\n         LR    R1,R15         LET REG 1 ALSO CONTAIN THE LENGTH         02327\n         MVCL  R0,R14         MOVE TEXT STRING TO SAVE                  02328\n         LA    R6,PROCTXT     POINT TO START OF COPIED TEXT             02329\n         LA    R4,STREKEY     LOAD START OF TRUE TEXT                   02330*19\n         ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS           02331*19\n         LA    R4,1(,R4)      INCR PAST EXEC POS IND                    02332*19\n         SLR   R5,R5          CLEAR REG FOR ICM                         02333*19\n         ICM   R5,1,0(R4)     LOAD NUMBER OF SUBPARAMETERS              02334*19\n         BNZ   PROCEND1       NOT ZERO, BRANCH                          02335\n         LA    R4,1(,R4)      ZERO, INCREMENT PAST COUNT                02336*19\n         B     PROCEND3       GET OUT                                   02337\n*********************************************************************** 02338\n*        SAVE THE PROC STEP NAME                                      * 02339\n*********************************************************************** 02340\nPROCEND1 LA    R4,1(,R4)      INCREMENT PAST COUNT                      02341*19\n         MVC   SAVEPROC,BLANKS   BLANK ENTIRE STEP NAME SAVE            02342\n         SLR   R3,R3          CLEAR REG FOR ICM                         02343\n         ICM   R3,1,0(R4)     LOAD LENGTH OF JOB STEP NAME              02344*19\n         BZ    PROCENDB       IF ZERO, NO JOB STEP NAME                 02345\n         CH    R3,H#8         SEE IF LENGTH > 8                         02346\n         BNH   PROCENDA       NO, CONTINUE                              02347\n         LA    R15,P@31       SET ERROR NUMBER                          02348\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02349**7\n         B     GETNEXT        GET OUT                                   02350\nPROCENDA DS    0H                                                       02351\n         BCTR  R3,0           MAKE MACHINE LENGTH                       02352\n         EX    R3,MOVE4       MOVE STEP NAME TO SAVE AREA               02353\n         LA    R3,1(,R3)      RESET R3                                  02354\nPROCENDB DS    0H                                                       02355\n         LA    R4,1(R3,R4)    INCREMENT PAST CTL BYTES AND STEP NM      02356*19\n         BCT   R5,PROCENDC    DECREMENT BY ONE                          02357*19\n         B     PROCEND3       IF NO POSITIONAL PROC-NAME GO TO KYWD     02358\nPROCENDC DS    0H                                                       02359\n         ICM   R3,1,0(R4)     LOAD LENGTH OF SUBPARAMETER               02360*19\n         BZ    PROCENDD       IF LENGTH ZERO, ERROR                     02361*22\n         CH    R3,H#8         SEE IF LENGTH > 8                         02362\n         BNH   PROCENDE       NO, CONTINUE                              02363*22\nPROCENDD DS    0H                                                   WEJ 02364*22\n         LA    R15,P@36       SET ERROR NUMBER                          02365\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02366**7\n         B     GETNEXT        GET OUT                                   02367\nPROCENDE DS    0H                                                       02368*22\n         BCTR  R3,0           MAKE MACHINE LENGTH                       02369\n         MVI   SMFRTYPE,X'F8' SET RECORD TYPE FOR PROC NAME USE         02370\n         BAL   R14,SMFWTM     GO WRITE SMF RECORD                       02371\nPROCEND2 ICM   R3,1,0(R4)     LOAD LENGTH OF SUBPARAMETER               02372*19\n         LA    R4,1(R3,R4)    INCREMENT TO NEXT SUBPARAMETER            02373*19\n         BCT   R5,PROCEND2    LOOP UNTIL DONE                           02374*19\n*********************************************************************** 02375\n*        SAVE POINTER TO THE FIRST KEYWORD ON THE STATEMENT           * 02376\n*********************************************************************** 02377\nPROCEND3 DS    0H                                                       02378\n         CLI   0(R4),PROCEK   IS FIRST KEYWORD KEY FOR PROC=            02379*19\n         BNE   PROCEND5       NO, SAVE ADDR OF 1ST NON-PROC KEYWD       02380\n         LA    R4,2(,R4)      POINT TO SIZE (NO OF SUBS ASSUMED 1)      02381*19\n*              PRIOR USE WAS 1 BYTE FIELD SIZE                          02382\n         ICM   R3,1,0(R4)     LOAD LENGTH OF SUBPARAMETER               02383*19\n         CH    R3,H#8         SEE IF LENGTH > 8                         02384\n         BNH   PROCEND4       NO, CONTINUE                              02385\n         LA    R15,P@36       SET ERROR NUMBER                          02386\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02387**7\n         B     GETNEXT        GET OUT                                   02388\nPROCEND4 DS    0H                                                       02389\n         BCTR  R3,0           MAKE MACHINE LENGTH                       02390\n         MVI   SMFRTYPE,X'F8' SET RECORD TYPE FOR PROC NAME USE         02391\n         BAL   R14,SMFWTM     GO WRITE SMF RECORD                       02392\n         LA    R4,2(R3,R4)    POINT TO NEXT KEYWORD PARAMETER           02393*19\nPROCEND5 DS    0H                                                       02394\n         ST    R4,PROCTEXT    SAVE ADDRESS OF FIRST KEYWORD PARM        02395*19\n         B     GETNEXT        GET OUT                                   02396\n         SPACE 4                                                        02397\n*********************************************************************** 02398\n*        IF THE CURRENT EXECUTE STATEMENT IS FROM A PROCEDURE,        * 02399\n*        LOAD THE ADDRESS OF THE PREVIOUS STATEMENT WHICH CALLED      * 02400\n*        THE PROCEDURE AND RETURN TO THE EXECUTE CARD PROCESSOR       * 02401\n*        TO PROCESS THE OVERRIDES WHICH MAY HAVE BEEN ENTERED         * 02402\n*        ON THAT STATEMENT.                                           * 02403\n*********************************************************************** 02404\nPROCSEAR TM    STREINDC,ETXPROC STATEMENT FROM A PROCEDURE?             02405\n         BNO   GETNEXT        NO, GET OUT                               02406\n         XI    PROCIND,X'01'  FLIP-FLOP SWITCH                          02407\n         BZ    GETNEXT        NOW ZERO, ALREADY PROCESSED PROC TEXT     02408\n         L     R4,PROCTEXT    LOAD ADDR OF PROC TEXT                    02409*19\n         ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS           02410*19\n         B     EXECPARM       GO PROCESS ADDITIONAL TEXT                02411\n         EJECT                                                          02412\n*********************************************************************** 02413\n*        THE TEXT OF THE INSTREAM PROC CARD IS AS FOLLOWS             * 02414\n*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        * 02415\n*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          * 02416\n*********************************************************************** 02417\n         SPACE 4                                                        02418\nPROCINST DS    0H                                                       02419\n*********************************************************************** 02420\n*        CURRENTLY BYPASS ALL INTREAM PROC'S, LATER LOG THEM          * 02421\n*********************************************************************** 02422\n         B     GETNEXT        BYPASS CODE BECAUSE PICKING UP BAD DATA   02423\n         LA    R4,STREKEY+1   POINT TO 1ST POSITIONAL PARM CNT.         02424*19\n         SLR   R5,R5          CLEAR REG FOR ICM                         02425*19\n         ICM   R5,1,0(R4)     LOAD NUMBER OF SUBPARAMETERS              02426*19\n         BZ    GETNEXT        ZERO, ILLOGICAL SO EXIT                   02427\n*********************************************************************** 02428\n*        SAVE THE PROC NAME                                           * 02429\n*********************************************************************** 02430\nPROCINS1 LA    R4,1(,R4)      INCREMENT PAST COUNT                      02431*19\n         MVC   SAVEPROC,BLANKS   BLANK ENTIRE STEP NAME SAVE            02432\n         SLR   R3,R3          CLEAR REG FOR ICM                         02433\n         ICM   R3,1,0(R4)     LOAD LENGTH OF PROC NAME                  02434*19\n         BZ    GETNEXT        IF ZERO, NO PROC NAME SO BYPASS           02435\n         CH    R3,H#8         SEE IF LENGTH > 8                         02436\n         BNH   PROCINS2       NO, CONTINUE                              02437\n         LA    R15,P@37       SET ERROR NUMBER                          02438\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02439**7\n         B     GETNEXT        GET OUT                                   02440\nPROCINS2 DS    0H                                                       02441\n         BCTR  R3,0           MAKE MACHINE LENGTH                       02442\n         MVI   SMFRTYPE,X'F9' SET RECORD TYPE FOR INSTREAM PROC USE     02443\n         BAL   R14,SMFWTM     GO WRITE SMF RECORD                       02444\n         B     GETNEXT                                                  02445\n*********************************************************************** 02446\n*        THE TEXT OF THE JDT VERB CARD IS AS FOLLOWS                  * 02447\n*            1)  2 BYTE LENGTH OF TEXT STRING INCLUDING ITSELF        * 02448\n*            2)  1 BYTE INDICATOR COMMON TO ALL TEXT RECORDS          * 02449\n*            3)  1 BYTE OF MISCELLANEOUS INDICATORS                   * 02450\n*            4)  1 BYTE INDICATOR X'BE' INDICATING JDVT DEFINED VERB  * 02451\n*            5)  1 BYTE NUMBER OF JDT POSITIONAL PARAMETERS           * 02452\n*            6)  VARIABLE LENGTH LIST OF JDT POS PARAMETERS           * 02453\n*                EACH PRECEDED BY A 1 BYTE LENGTH FIELD               * 02454\n*            7)  VARIABLE LENGTH LIST OF KEYWORD PARAMETERS           * 02455\n*                EACH IS PRECEDED BY A 1 BYTE NUMBER OF               * 02456\n*                POSITIONAL SUBPARAMETERS PRESENT, AND A LIST OF      * 02457\n*                SUBPARAMETERS EACH PRECEDED BY A 1 BYTE LENGTH FIELD * 02458\n*                WHICH MAY BE ZERO IF OMITTED AND FOLLOWED BY ANOTHER * 02459\n*                POSITIONAL PARAMETER.                                * 02460\n*********************************************************************** 02461\n*                                                                       02462\n*********************************************************************** 02463\n*        THE TEXT OF THE JDT VERB CARD 'OUTPUT' WILL BE SAVED TO BE   * 02464\n*        USED WITH SYSOUT PROCESSING.  THE STEP NAME WILL BE SAVED    * 02465\n*        ALONG WITH THE VERB NAME, THE LABEL, AND THE SYSOUT CLASS    * 02466\n*        SPECIFIED.                                                   * 02467\n*********************************************************************** 02468\n         SPACE 4                                                        02469\nJDTCARD  EQU   *                                                        02470\n*********************************************************************** 02471\n*        SCAN THE JDT VERB CARD TO VERIFY IF IT IS A 'OUTPUT' CARD.   * 02472\n*********************************************************************** 02473\n         LA    R4,STRSKEY     LOAD START OF TRUE TEXT                   02474*19\n         ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS           02475*19\n         MVC   SAVEFORM,C#NOFORM SET SAVE FORM TO BLANKS WITH 0 LENGTH  02476\n         MVI   FCBFLAG,C'N'   SET FCB FOUND FLAG TO NO                  02477\n         CLI   0(R4),JDTVERBK  IS THIS A JDT VERB?                      02478*19\n         BE    JDTLOOP        YES, LOOP PAST IT BECAUSE OUTPUT ASSUMED  02479\n         SPACE 4                                                        02480\nJDTPARM  CLI   0(R4),ENDK     END OF TEXT STRING                        02481*19\n         BE    JDTCKFMV       YES, GO TO CHECK FCB MOVE                 02482\n*********************************************************************** 02483\n*        JDT DEFINED KEYWORD                                          * 02484\n*********************************************************************** 02485\n         CLI   0(R4),JDTKWDK  SEE IF JDT DEFINED KEYWORD                02486*19\n         BNE   JDTLOOP        NO, BRANCH                                02487\n         CLI   1(R4),X'02'    IS THIS A KEYWORD + 1 PARAMETER           02488*19\n         BNE   JDTLOOP        NO, THUS NOT CLASS OR FCB                 02489\n         CLI   2(R4),L'C#FORMS COULD THIS BE THE FORMS PARAMETER        02490*19\n         BNE   JDTCK3KY       NO CHECK FOR FCB                          02491\n         CLC   C#FORMS,3(R4)  IS THIS THE FORMS= KEYWORD                02492*19\n         BNE   JDTCK3KY       NO GO TO CHECK FOR 3 CHR KEYWORD          02493\n         SLR   R3,R3          ZERO OUT R3                               02494\n         ICM   R3,1,3+L'C#FORMS(R4) GET SIZE OF SECOND PARAM        WEJ 02495*19\n         BZ    JDTLOOP        IF ZERO IGNORE IT                         02496\n         CH    R3,H#8         IS IT GREATER THAN 8                      02497\n         BNH   JDTMVFM        NO, GO TO MOVE FORM TO HOLD               02498\n         LA    R15,P@39       POINT TO ERROR MESSAGE                    02499\n         BAL   R14,MSGRTN     PERFORM ERROR ROUTINE                     02500**7\n         B     JDTLOOP                                                  02501\nJDTMVFM  DS    0H                                                       02502\n         EX    R3,MOVEJDFM    EXECUTE MOVE OF FORM-ID INCLUING LEN      02503\n         B     JDTLOOP                                                  02504\nMOVEJDFM MVC   SAVEFORM(0),3+L'C#FORMS(R4)  EXECUTED MOVE               02505*19\nJDTCK3KY DS    0H                                                       02506\n         CLI   2(R4),X'03'    IS THIS A 3 CHARACTER KEYWORD             02507*19\n         BNE   JDTLOOP        NO, WE ARE NOT INTERESTED                 02508\n         CLC   C#FCB,3(R4)    IS THE KEYWORD FCB                        02509*19\n         BNE   JDTLOOP        NO, GO TO GET NEXT PARAM                  02510\n         MVI   FCBFLAG,C'Y'   SET FCB FOUND FLAG TO Y                   02511\n         B     JDTLOOP        GO TO GET NEXT PARAM                      02512\n         EJECT                                                          02513\n*********************************************************************** 02514\n*        THIS ROUTINE WILL INCREMENT PAST THE STRING(S) BEING         * 02515\n*        PROCESSED.  NOTE THAT FOLLOWING THE KEYWORD DESCRIPTOR       * 02516\n*        FIELD IS A COUNT OF SUBPARAMETERS.  FOLLOWING THE COUNT      * 02517\n*        WILL BE A LENGTH OR DESCRIPTOR FIELD.  IF THE HIGH ORDER     * 02518\n*        BIT IS ON, THE FIELD IS A COUNT FIELD OF THE NUMBER OF       * 02519\n*        SUBPARAMETERS WHICH THE SUBPARAMETER ITSELF MAY HAVE.        * 02520\n*        IF THIS IS TRUE, THE DESCRIPTOR FIELD WILL BE FOLLOWED BY    * 02521\n*        A LENGTH FIELD FOR THE FIRST SUBPARAMETER.  IF THE HIGH      * 02522\n*        ORDER BIT IS NOT ON, IT IS ONLY A LENGTH FIELD FOR A         * 02523\n*        SINGLE SUBPARAMETER.                                         * 02524\n*********************************************************************** 02525\nJDTLOOP  L     R4,PARMADDR    RESTORE START OF PARAMETER ADDRESS        02526*19\n         SLR   R2,R2          CLEAR REGISTER FOR ICM                    02527**4\n         LA    R4,1(,R4)      INCREMENT PAST KEYWORD                    02528*19\n         ICM   R2,1,0(R4)     LOAD SUBPARAMETER COUNT                   02529*19\n         BNZ   JDTLOOP1       OK, BRANCH INTO ROUTINE                   02530\n         LA    R4,1(,R4)      NONE, INCREMENT PAST COUNT                02531*19\n         B     JDTLOOP5       AND GET OUT OF ROUTINE                    02532\nJDTLOOP1 LA    R4,1(,R4)      INCREMENT PAST KEYWORD DESCR              02533*19\nJDTLOOP2 SLR   R5,R5          CLEAR REGISTER FOR ICM                    02534*19\n         ICM   R5,1,0(R4)     LOAD PARAMETER LENGTH                     02535*19\n         BNM   JDTLOOP3       HIGH BIT NOT ON, ONLY 1 PARAMETER         02536\n         N     R5,F#127       'AND' OUT THE HIGH ORDER BIT              02537*19\n         LA    R4,1(,R4)      INCREMENT PAST CONTROL BYTE               02538*19\n         B     JDTLOOP4       BRANCH                                    02539\nJDTLOOP3 LA    R5,1           SET PARAM COUNT TO 1                      02540*19\nJDTLOOP4 SLR   R3,R3          CLEAR REGISTER FOR ICM                    02541\n         ICM   R3,1,0(R4)     LOAD PARAMETER LENGTH                     02542*19\n         LA    R4,1(R3,R4)    INCREMENT PAST PARM                       02543*19\n         BCT   R5,JDTLOOP4    LOOP UNTIL PROCESSED ALL PARMS            02544*19\n         BCT   R2,JDTLOOP2    LOOP UNTIL PROCESSED ALL PARMS            02545**4\nJDTLOOP5 ST    R4,PARMADDR    SAVE START OF PARAMETER ADDRESS           02546*19\n         B     JDTPARM        CONTINUE                                  02547\nJDTCKFMV DS    0H                                                       02548\n         CLI   FCBFLAG,C'Y'   WAS FCB FOUND                             02549\n         BE    GETNEXT        YES, GET NEXT PARAM                       02550\n         CLI   SAVEFMLN,X'04' IS FORM LENGTH GREATER THAN 4             02551\n         BNH   JDTGETLN       NO, GO TO LOAD FORM LENGTH                02552\n         MVI   SAVEFMLN,X'04' SET LENGTH TO 4 SO ONLY 1ST 4 BYTES USED  02553\nJDTGETLN DS    0H                                                       02554\n         SLR   R3,R3          ZERO OUT R3                               02555\n         ICM   R3,1,SAVEFMLN LOAD FORM LENGTH                           02556\n         BZ    GETNEXT        IF ZERO, GET NEXT PARAMETER               02557\n         MVC   0(L'C#FCBKYJ,R4),C#FCBKYJ                                02558*19\n         EX    R3,MVJDTFCB                                              02559\n         LA    R3,L'C#FCBKYJ+1(,R3)                                     02560\n         SLR   R0,R0                                                    02561\n         ICM   R0,B'0011',STRLTH                                        02562\n         ALR   R0,R3                                                    02563\n         STCM  R0,B'0011',STRLTH                                        02564\n         LA    R4,0(R3,R4)                                              02565*19\n         MVI   0(R4),ENDK                                               02566*19\n         B     GETNEXT                                                  02567\nMVJDTFCB MVC   L'C#FCBKYJ(0,R4),SAVEFORM                                02568*19\n         SPACE 4                                                        02569\n*********************************************************************** 02570\n*        THIS ROUTINE WILL OBTAIN THE NEXT PARAMETER.                 * 02571\n*        ON OUTPUT REG 3 WILL CONTAIN LENGTH-1                        * 02572\n*          IF REG 3 IS ZERO EITHER THERE WAS AN ERROR OR NO PARM      * 02573\n*        THE LENGTH IS CHECKED TO BE NOT GREATER THAN 8               * 02574\n*          IF SO, AN ERROR MESSAGE IS RETURNED.                       * 02575\n*********************************************************************** 02576\nJDTGET   EQU   *                                                        02577\n         ST    R14,JDTRTN     SAVE RETURN ADDRESS                       02578\n         SLR   R3,R3          CLEAR REG FOR ICM                         02579\n         ICM   R3,1,1(R4)     LOAD LENGTH                               02580*19\n         BZR   R14            IF ZERO RETURN TO CALLER                  02581\n         CH    R3,H#8         SEE IF LENGTH > 8                         02582\n         BNH   JDTGETEX       NO, CONTINUE                              02583\n         LA    R15,P@1        INDICATE ERROR NUMBER                     02584\n         BAL   R14,MSGRTN     GO ISSUE ERROR MESSAGE                    02585**7\n         LA    R3,1           SIMULATE NO PARM FOUND                    02586\nJDTGETEX DS    0H                                                       02587\n         BCTR  R3,0           REDUCE TO MACHINE LENGTH                  02588\n         L     R14,JDTRTN     LOAD RETURN ADDRESS                       02589\n         BR    R14             AND RETURN TO CALLER                     02590\n         EJECT                                                          02591\n*********************************************************************** 02592\n*                                                                     * 02593\n*                         L O C A T E                                 * 02594\n*                                                                     * 02595\n*        ISSUE THE LOCATE MACRO TO OBTAIN THE REQUESTED UNIT TYPE     * 02596\n*        AND VOLSER INFORMATION.                                      * 02597\n*                                                                     * 02598\n*********************************************************************** 02599\nLOCATE   LA    R15,68         LOAD OPTION VALUE                         02600\n         SLL   R15,24         SHIFT OPTION TO HIGH BYTE                 02601\n         ST    R15,CAMLST     STORE INTO CAMLST AREA                    02602\n         LA    R15,LDSN       LOAD ADDR OF DSN                          02603\n         ST    R15,CAMLST+4   STORE INTO CAMLST AREA                    02604\n         XC    CAMLST+8(4),CAMLST+8 ZERO 3RD PARAM CAMLST AREA          02605\n         XC    LOCAREA(12),LOCAREA CLEAR FIRST PART OF THE WORK AREA    02606\n         LA    R15,LOCAREA    LOAD ADDR OF LOCATE WORK AREA             02607\n         ST    R15,CAMLST+12  STORE INTO CAMLST AREA                    02608\n         LOCATE CAMLST        READ CATALOG                              02609\n         BR    R2             RETURN TO CALLER                          02610**4\n         SPACE 4                                                        02611\n*********************************************************************** 02612\n*                                                                     * 02613\n*                         U C B S E A R                               * 02614\n*                                                                     * 02615\n*        SEARCH THE SYSTEM UCBS TO SEE IF THE REQUESTED DASD VOLUME   * 02616\n*        IS MOUNTED OR ONLY MOUNTED PRIVATE IN WHICH CASE IT WILL     * 02617\n*        BE DISMOUNTED AT END OF JOB.  IF NOT FOUND OR PRIVATE, IT    * 02618\n*        IS A 'PRIV' UNIT.                                            * 02619\n*                                                                     * 02620\n*********************************************************************** 02621\nUCBSEAR  DS    0H                                                       02622\n         AIF   ('&UCBSEAR' EQ 'YES').UCBS1                              02623\n         BR    R2             RETURN TO CALLER                          02624**4\n         AGO   .UCBS2                                                   02625\n.UCBS1   ANOP                                                           02626\n         STM   R14,R12,SAVEREGS SAVE REGISTERS                          02627\n         XC    LASTUCB,LASTUCB ZERO LAST EBCDIC UCB ADDR                02628\n         SLR   R5,R5          CLEAR REGISTER FOR ICM INSTR              02629*19\n         L     R4,16          LOAD CVT ADDR                             02630*19\n         L     R4,40(,R4)     LOAD ADDR OF UCB LOOKUP TABLE             02631*19\nUCBSEAR1 DS    0H                                                       02632\n         SLR   R5,R5          CLEAR REGISTER 5                          02633*19\n         ICM   R5,3,0(R4)     LOAD ADDR OF NEXT UCB                     02634*19\n         LA    R4,2(,R4)      INCREMENT TO NEXT LOOKUP ENTRY            02635*19\n         BZ    UCBSEAR1       ZERO, NULL ENTRY, LOOP                    02636\n         C     R5,LASTUCB     SEE IF ADDR > LAST UCB ADDR               02637*19\n         BL    UCBSEAR1       NO, OPCHAN DEVICE,LOOP                    02638\n         ST    R5,LASTUCB     SAVE LAST UCB ADDR                        02639*19\n         C     R5,X#FFFF      SEE IF END OF TABLE                       02640*19\n         BE    UCBSEAR2       YES, VOLSER NOT FOUND                     02641\n         TM    18(R5),32      DASD DEVICE?                              02642*19\n         BNO   UCBSEAR1       NO, LOOP                                  02643\n         TM    3(R5),128      ONLINE?                                   02644*19\n         BNO   UCBSEAR1       NO, LOOP                                  02645\n         CLC   TVOLSER,28(R5) SEE IF CAT. VOLSER IN UCB                 02646*19\n         BNE   UCBSEAR1       NO, LOOP                                  02647\n         TM    3(R5),X'24'    SEE IF PERM RES OR RESERVED               02648*19\n         BZ    UCBSEAR2       NOT EITHER, THEN MUST BE PRIV             02649\n         B     UCBSEAR3       GET OUT, NO CHARGE                        02650\nUCBSEAR2 OI    UNITIND,PRIV   SINCE VOLUME NOT MOUNTED, PRIV            02651\nUCBSEAR3 LM    R14,R12,SAVEREGS RESTORE REGISTERS                       02652\n         BR    R2             RETURN TO CALLER                          02653**4\n.UCBS2   ANOP                                                           02654\n         SPACE 4                                                        02655\n*********************************************************************** 02656\n*        UPDATE LAST EXEC TABLE (IF NEEDED) WITH UNIT INFO            * 02657\n*********************************************************************** 02658\nEOF      TM    JOBIND2,JOBFAIL WAS JOB FAILED BY EXIT?                  02659\n         BO    JOBERROR       YES, BRANCH                               02660\n         L     R7,LASTEXEC    LOAD ADDR OF LAST EXEC ENTRY              02661\n         LTR   R7,R7          SEE IF ADDR = 0                           02662\n         BZ    EOF1           IF ZERO, NO UPDATE, BRANCH                02663\n         MVC   ETAPES,TAPECNT MOVE STEP TAPE UNIT CNT TO TABLE          02664\n         MVC   EPRIVS,PRIVCNT MOVE STEP PRIV UNIT CNT TO TABLE          02665\n         XC    TAPECNT,TAPECNT ZERO TAPE UNIT CNT                       02666\n         XC    PRIVCNT,PRIVCNT ZERO PRIV UNIT CNT                       02667\n         EJECT                                                          02668\n*********************************************************************** 02669\n*        THIS ROUTINE SEARCHES THE TABLE SAVED FOR JOB, EXEC AND DD   * 02670\n*        ENTRIES TO DETERMINE THE MAXIMUM RESOURCES USED BY THE JOB   * 02671\n*        THIS INFORMATION WILL BE USED TO COMPARE AGAINST A CLASS     * 02672\n*        TABLE TO DETERMINE THE CLASS WHICH SHOULD BE SET FOR THE JOB.* 02673\n*********************************************************************** 02674\nEOF1     MVC   STEPMSG,MSG0CON    INITIALIZE STEP MESSAGE               02675*10\n         MVC   JOBMSG,MSG1CON     INITIALIZE JOB CLASS MESSAGE          02676*10\n         XC    MAXTAPE,MAXTAPE ZERO MAX FIELD                           02677\n         XC    MAXPRIV,MAXPRIV ZERO MAX FIELD                           02678\n         XC    MAXTOTAL,MAXTOTAL ZERO MAX FIELD                         02679\n         XC    MAXREGN,MAXREGN ZERO MAX FIELD                           02680\n         L     R7,FIRSTENT    LOAD START OF TABLE                       02681\n         CLC   ENTLEN(2,R7),H#0 SEE IF ONLY JOB ENTRY                   02682\n         BE    JOBERROR       ZEROS, NO OTHER ENTRIES, FLUSH JOB        02683\nEOFLOOP1 CLI   ENTRYTYP,TYPJOB SEE IF JOB ENTRY                         02684\n         BE    EOFJOB         YES, BRANCH                               02685\n         CLI   ENTRYTYP,TYPEXEC SEE IF EXEC ENTRY                       02686\n         BE    EOFEXEC        YES, BRANCH                               02687\n         CLI   ENTRYTYP,TYPEND SEE IF END OF TABLE                      02688\n         BE    EOFSCAN        YES, BRANCH                               02689\n         B     EOFLOOP2       LOOP                                      02690\n*********************************************************************** 02691\n*        PRODUCE A STEP RESOURCE STATISTICS MESSAGE FOR EACH STEP     * 02692\n*        TO BE WRITTEN TO THE JES2 MESSAGE DATA SET.                  * 02693\n*********************************************************************** 02694\nEOFEXEC  DS    0H             LOAD CARD NUMBER                          02695**7\n         MVC   CARDNO,ECARDNO MOVE EXEC CARDNO TO CARDNO                02696**7\n         MVC   STEPMSTP,EJSTEP   MOVE JOB STEP TO MESSAGE               02697*10\n         MVC   STEPMPST,EPSTEP  MOVE PROC STEP TO MESSAGE               02698*10\n         LH    R5,ETAPES      LOAD NUMBER OF TAPES FOR STEP             02699*19\n         CVD   R5,DOUBLE      CONVERT TO PACKED                         02700*19\n         MVC   STEPMTAP,EDMASK  SET MESSAGE EDIT MASK                   02701*10\n         ED    STEPMTAP,DOUBLE+5 EDIT NUMBER OF TAPES TO MESSAGE        02702*10\n         L     R5,MAXTIME     LOAD MAXIMUM CPU JOB CPU TIME             02703*19\n         CVD   R5,DOUBLE      CONVERT TO PACKED                         02704*19\n         MVC   STEPM+61(6),EDMASK  SET MESSAGE EDIT MASK                02705\n         ED    STEPM+61(6),DOUBLE+5 EDIT REGION SIZE TO MESSAGE         02706\n         LA    R15,STEPMSG    LOAD ADDRESS OF STEP MESSAGE              02707\n         BAL   R14,MSGRTN     GO PUT MESSAGE TO JES MESSAGE DATA SET    02708**7\n         SPACE 4                                                        02709\n*********************************************************************** 02710\n*        COMPARE THE RESOURCES USED BY THIS STEP TO THE MAXIMUM       * 02711\n*        RESOURCES USED BY PREVIOUS STEPS.  RETAIN THE GREATER        * 02712\n*        OF THE NUMBER OF RESOURCES.                                  * 02713\n*********************************************************************** 02714\nEOFCONT1 CLC   ETAPES,MAXTAPE COMPARE STEP TAPES TO PREV MAX            02715\n         BNH   EOFEXEC1       NOT GREATER, BRANCH                       02716\n         MVC   MAXTAPE,ETAPES MAKE CURR COUNT NEW COUNT                 02717\nEOFEXEC1 CLC   EPRIVS,MAXPRIV COMPARE STEP PRIVS TO PREV MAX            02718\n         BNH   EOFEXEC2       NOT GREATER, BRANCH                       02719\n         MVC   MAXPRIV,EPRIVS MAKE CURR COUNT NEW COUNT                 02720\nEOFEXEC2 LH    R5,EPRIVS      LOAD NUMBER OF PRIVS IN STEP              02721*19\n         AH    R5,ETAPES      ADD NUMBER OF TAPES                       02722*19\n         CH    R5,MAXTOTAL    COMPARE STEP TOT CNT TO PREV MAX          02723*19\n         BNH   EOFEXEC3       NOT GREATER, BRANCH                       02724\n         STH   R5,MAXTOTAL    MADE CURR TOTAL CNT NEW MAX               02725*19\nEOFEXEC3 CLC   EREGION,MAXREGN COMPARE STEP REGION TO PREV MAX          02726\n         BNH   EOFLOOP2       NOT GREATER, BRANCH                       02727\n         MVC   MAXREGN,EREGION MAKE CURR REGION NEW MAX                 02728\nEOFLOOP2 LA    R7,ENTLEN(,R7) INCREMENT TO NEXT ENTRY                   02729\n         B     EOFLOOP1       LOOP                                      02730\nEOFJOB   CLC   JREGION,MAXREGN COMPARE STEP REGION TO PREV MAX          02731\n         BNH   EOFLOOP2       NOT GREATER, BRANCH                       02732\n         MVC   MAXREGN,JREGION MAKE CURR REGION NEW MAX                 02733\n         B     EOFLOOP2       GO GET NEXT ENTRY                         02734\nEOFSCAN  CLC   MAXTAPE,$ZEROS    SEE IF ANY TAPES                   WEJ 02735\n         BE    EOFPACK        NO TAPES, GO CHECK FOR PRIV               02736\n         OI    RESOURCE,TAPES TURN ON TAPES RESOURCE                    02737\nEOFPACK  CLC   MAXPRIV,$ZEROS    SEE IF ANY PRIV                        02738\n         BE    EOFLJOB        NO, BRANCH                                02739\n         OI    RESOURCE,USERPACK TURN ON USERPACK RESOURCE              02740\nEOFLJOB  CLC   MAXTIME,F#15   SEE IF CPU TIME > 15                      02741\n         BNH   CLASSEAR       NO, BRANCH                                02742\n         OI    RESOURCE+1,LONGJOB TURN ON LONGJOB RESOURCE              02743\n         EJECT                                                          02744\n*********************************************************************** 02745\n*        THIS ROUTINE SEARCHES THE APPROPRIATE CLASS TABLES FOR       * 02746\n*        MATCHES ON RESOURCES USED TO DETERMINE THE CORRECT CLASS     * 02747\n*        FOR A JOB.  NOTE THAT EACH GROUP (TEST, PRODUCTION,          * 02748\n*        OPERATIONS, AND TECH SUPPORT HAVE CLASSES WHICH MAY BE       * 02749\n*        SPECIFIED IN ORDER TO BYPASS THE TABLES OR USED TO SINGLE    * 02750\n*        THREAD A SERIES OF JOBS BECAUSE THERE WILL ONLY BE ONE       * 02751\n*        INITIATOR SET TO THAT CLASS.                                 * 02752\n*********************************************************************** 02753\nCLASSEAR TM    JOBIND,JOBSTC+JOBTSO STC OR TSO                          02754\n         BM    NOCHANGE       YES, NO CHANGE OF CLASS                   02755\n         L     R14,JCTADDR    LOAD JCT ADDRESS                          02756*40\n         USING JCT,R14        SET ADDRESSABILITY TO JCT             WEJ 02757*40\n         MVC   CLASSFLD,INCLASS  SET NEW JOBCLASS TO CURRENT JOBCLS WEJ 02758\n         CLI   TCMCLASS,X'00' IS TCMCLASS NULL                      WEJ 02759\n         BE    CLASSCK1       YES, BYPASS SETTING OF TCAM CLASS     WEJ 02760\n         MVC   CLASSFLD,TCMCLASS  SET NEW JOBCLASS TO TCAM JOBCLASS WEJ 02761\nCLASSCK1 DS    0H                                                   WEJ 02762\n         XC    CARDNO,CARDNO     ZERO OUT CARD NO                   WEJ 02763**7\n         CLI   CLASSFLD,C'I'  CLASS 'I' OR GREATER                  WEJ 02764*20\n         BH    CLASSCKA       YES, BYPASS CLASS SET                 WEJ 02765*20\n         CLI   CLASSFLD,C'F'  CLASS = 'F' OR GREATER                WEJ 02766*20\n         BNL   SETCLASA       YES, SET A                            WEJ 02767*22\n         CLI   CLASSFLD,C'B'  CLASS = B?                            WEJ 02768**5\n         BNE   CLASSCKA       NO, BYPASS SETTING OF CLASS TO A      WEJ 02769**5\nSETCLASA DS   0H                                                    WEJ 02770**5\n         MVI   CLASSFLD,C'A'  SET CLASS TO A                        WEJ 02771**5\nCLASSCKA DS    0H                                                   WEJ 02772\n         TM    JOBIND,JOBPROD SEE IF PRODUCTION JOB                 WEJ 02773\n         BO    SETCLASS       YES, BRANCH                           WEJ 02774\n         CLI   CLASSFLD,C'A'  IS JOBCLASS = 'A'                     WEJ 02775*23\n         BNE   CLASSCK4       NO, CHECK AUTHORITY                   WEJ 02776*23\n         CLC   MAXTAPE,$ZEROS     IS MAX-TAPE  EQUAL 0              WEJ 02777\n         BE    SETCLASS       YES, GO SET CLASS                     WEJ 02778*23\n         CLC   MAXTAPE,H#1    IS NUMBER OF TAPES = 1                WEJ 02779\n         BNE   CLASSETH       NO, GO TO SET CLASS H                 WEJ 02780\n         MVI   CLASSFLD,C'I'  SET CLASS TO I                            02781\n         B     SETCLASS                                                 02782\nCLASSETH DS    0H                                                       02783\n         MVI   CLASSFLD,C'H'  FORCE JOBCLASS 'H'                    WEJ 02784\n         B     CLASSCK8       GO CHECK IF OVER 3 TAPES              WEJ 02785*40\nCLASSCK4 DS    0H                                                   WEJ 02786\n         CLI   CLASSFLD,C'J'  CLASS 'J' (TCAM CLASS)                WEJ 02787*24\n         BE    CLASSCK8       YES, GO CHECK OVER 3 TAPES            WEJ 02788*40\n         CLI   CLASSFLD,C'L'  CLASS 'L' (TCAM CLASS)                WEJ 02789*32\n         BE    CLASSCK8       YES, GO CHECK OVER 3 TAPES            WEJ 02790*40\n         CLI   CLASSFLD,C'S'  CLASS 'S' (SINGLE STREAM)             WEJ 02791*40\n         BE    CLASSCK8       YES, GO CHECK OVER 3 TAPES            WEJ 02792*40\n         CLI   CLASSFLD,C'N'  CLASS 'N' (CICS CLASS)                WEJ 02793*40\n         BE    CLASSCK5       NO, GO CHECK IF CICS SUBMIT           WEJ 02794*40\n         CLI   CLASSFLD,C'Q'  CLASS 'Q' (ADABAS CLASS)              WEJ 02795*40\n         BNE   CLASSCK5       NO, GO CHECK IF AUTHORIZED SUBMIT     WEJ 02796*44\nCLASSCK5 DS    0H                                                   WEJ 02797*40\n         CLC   JCTINDEV,C#JLCICS   IS SOURCE PRODUCTION CICS        WEJ 02798*37\n         BE    CLASSCK8       YES, GO CHECK IF OVER 3 TAPES         WEJ 02799*40\n         CLC   JCTINDEV,C#JLCICT   IS SOURCE TEST OR SIML. CICS     WEJ 02800*37\n         BE    CLASSCK8       YES, GO CHECK IF OVER 3 TAPES         WEJ 02801*40\nCLASSCK6 DS    0H                                                   WEJ 02802*40\n         TM    JOBIND,JOBTECH+JOBOPER+JOBCOMM TECH/COMM/OPER?       WEJ 02803\n         BZ    CLASSERR       NO, GO TO CLASS ERROR                 WEJ 02804\n         CLI   CLASSFLD,C'Z'  DEDICATED BACKUPS                     WEJ 02805*40\n         BE    SETCLASS       YES, GO USE THE CLASS                 WEJ 02806*40\n         CLI   CLASSFLD,C'X'  TECH SRV/COMM SINGLE STREAM           WEJ 02807*44\n         BE    SETCLASS       YES, GO USE THE CLASS                 WEJ 02808*44\n         CLI   CLASSFLD,C'T'  IS CLASS T THRU Y                     WEJ 02809*40\n         BL    CLASSCK8       NO, GO CHECK MAX TAPES                WEJ 02810*40\n         CLC   MAXTAPE,H#1    IS MAXTAPE =, <, OR > 1               WEJ 02811*40\n         BL    SETCLASW       LESS, GO SET CLASS W OR Y             WEJ 02812*40\n         BH    SETCLASU       GREATER, GO SET CLASS U               WEJ 02813*40\n         MVI   CLASSFLD,C'V'  SET JOB CLASS TO V                    WEJ 02814*40\n         B     SETCLASS                                             WEJ 02815*40\nSETCLASW DS    0H                                                       02816*40\n         MVI   CLASSFLD,C'W'  SET JOB CLASS TO V                    WEJ 02817*40\n         CLI   JCTPRIO,X'50'  IS PRIORITY LESS THAN 5               WEJ 02818*43\n         BL    SETCLASS       YES, GO TO COMMON SET CLASS           WEJ 02819*40\n         MVI   CLASSFLD,C'Y'  SET CLASS TO Y (TECH SERV EQUIVALENT  WEJ 02820*40\n         B     SETCLASS           OF F) AND GO TO COMMON SETCLASS   WEJ 02821*40\n         DROP  R14                                                  WEJ 02822*40\nSETCLASU DS    0H                                                       02823*40\n         MVI   CLASSFLD,C'U'  SET JOB CLASS TO U (2-TAPES TECH SRV) WEJ 02824*40\n         B     SETCLASS       GO TO COMMON SET CLASS                WEJ 02825*40\nCLASSCK8 DS    0H                                                       02826*40\n         CLC   MAXTAPE,H#3    IS MAX TAPES GREATER THAN 3           WEJ 02827\n         BNH   SETCLASS       NO, TREAT AS PRODUCTION               WEJ 02828\n         TM    JOBIND,JOBOPER SEE IF OPERATIONS JOB                 WEJ 02829\n         BO    SETCLASS       YES, TREAT AS PRODUCTION              WEJ 02830\n*********************************************************************** 02831*23\n*         TOO MANY TAPES                                              * 02832*23\n*********************************************************************** 02833*23\n         LA    R15,P@47       POINT TO ERROR MESSAGE                    02834\n         BAL   R14,MSGRTN     PERFORM ERROR ROUTINE                     02835**7\n         B     SETCLASS       GO TO SET CLASS                       WEJ 02836\nCLASSERR DS    0H                                                       02837\n         CLI   CLASSFLD,C'X'  IS CLASS SINGLE STREAM BATCH TECH SRV WEJ 02838*42\n         BNE   CLASSCKZ       NO, GO SET CLASS TO A AND RECHECK     WEJ 02839*42\n         MVI   CLASSFLD,C'S'  SET TO S, NORMAL SINGLE STREAM        WEJ 02840*42\n         B     CLASSCK8       GO CHECK FOR OVER 3 TAPE DRIVES       WEJ 02841*42\nCLASSCKZ DS    0H                                                       02842*42\n         CLI   CLASSFLD,C'Z'  IS CLASS DEDICATED SYSTEM BATCH       WEJ 02843*42\n         BNE   SETCLASA       NO, GO SET CLASS TO A AND RECHECK     WEJ 02844*42\n         LA    R15,P@46       LOAD ADDRESS OF MESSAGE                   02845\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        02846**7\n         B     SETCLASS       GO SET DEFAULT CLASS                 WEJ  02847\nSETCLASS DS    0H                                                       02848\n         L     R14,JCTADDR    LOAD JCT ADDRESS                      WEJ 02849\n         USING JCT,R14        SET ADDRESSABILITY TO JCT             WEJ 02850\n         CLI   CLASSFLD,C'B'  IS DERIVED CLASS > B                  WEJ 02851\n         BH    SETCLAS1       YES, DO NOT CHECK FOR FAST CLASS      WEJ 02852\n         CLC   MAXTAPE,$ZEROS IS MAX TAPES ZERO                     WEJ 02853\n         BNE   SETCLAS1       NO, DO NOT CHECK FOR FAST CLASS       WEJ 02854\n         CLI   JCTPRIO,X'50'  IS PRIORITY LESS THAN 5               WEJ 02855*43\n         BL    SETCLAS0       YES, SET CLASS TO B                   WEJ 02856**5\n         MVI   CLASSFLD,C'F'  SET CLASS TO F                        WEJ 02857*23\n         B     SETCLAS1                                             WEJ 02858**5\nSETCLAS0 DS    0H                                                   WEJ 02859**5\n         MVI   CLASSFLD,C'B'  SET CLASS TO B (NO TAPE)              WEJ 02860*23\nSETCLAS1 DS    0H                                                   WEJ 02861**5\n         CLC   INCLASS,CLASSFLD  WAS THE CLASS CHANGED                  02862\n         BE    NOCHANGE       NO, NO NEED TO CHANGE CLASS               02863\n         TM    JCTJOBFL,JCTTSCAN  WAS TYPRUN=SCAN SPECIFIED             02864\n         BO    NOCHANGE           YES  NO NEED TO CHANGE CLASS          02865\n         DROP  R14            DROP ADDRESSABILITY TO JCT                02866\n         MVC   JOBMCLAS,CLASSFLD MOVE NEW CLASS TO MESSAGE              02867*10\n         LA    R15,JOBMSG     LOAD ADDRESS OF JOB CLASS MESSAGE         02868*10\n         BAL   R14,MSGRTN     GO WRITE MESSAGE TO JES MESSAGE DATA SET  02869**7\n         EJECT                                                          02870\nCLEAR    DS    0H                                                       02871\n         CLI   CLASSFLD,C'A'  TEST NEW CLASS                            02872\n         BNL   CHGCLASS       NEW, GO RESET TO NEW CLASS                02873\nDEFAULT  MVI   CLASSFLD,C'A'  SET NEW CLASS TO 'A'                      02874\n*********************************************************************** 02875\n*                                                                     * 02876\n*              S E T     T H E    N E W    C L A S S                  * 02877\n*                                                                     * 02878\n*********************************************************************** 02879\nCHGCLASS DS    0H             CHANGE THE JOB CLASS                      02880\n         AIF   ('&MODIFY' NE 'YES').MODIFY1                             02881\n         L     R14,JCTADDR    LOAD JCT ADDRESS                          02882\n         USING JCT,R14        SET ADDRESSABILITY TO JCT             WEJ 02883\n         MVC   JCTJCLAS,CLASSFLD CHANGE CLASS IN JCT                    02884\n         MVC   JCTCLASS,CLASSFLD CHANGE CLASS IN JCT                    02885\n         DROP  R14            DROP ADDRESSABILITY TO JCT                02886\n.MODIFY1 ANOP                                                           02887\nNOCHANGE XC    RETCODE,RETCODE SET RETURN CODE TO ZERO                  02888\n         TM    JOBIND2,JOBFAIL WAS JOB FAILED BY EXIT?                  02889\n         BNO   ENDOFIT        BRANCH                                    02890\nJOBERROR DS    0H                                                       02891\n         AIF   ('&ERRMSG' NE 'YES').ERRMSGN                             02892\n         MVC   WTOLIST(LWTO2),WTO2 SET WTO LIST FORM                    02893\n         AIF   ('&TSO' NE 'YES').TSO1                                   02894\n         WTO   MF=(E,WTOLIST)                                           02895\n         AGO   .TSO2                                                    02896\n.TSO1    ANOP                                                           02897\n         $$WTO WTOLIST        WRITE ERROR MESSAGE                       02898\n.TSO2    ANOP                                                           02899\n         B     JOBERR1        BYPASS WTO LIST FORM                      02900\n         $MID  902                                                      02901\n         SPACE                                                          02902\nWTO2     WTO   '&MID.JOB TERMINATED BY STANDARDS ENFORCEMENT EXIT',    X02903\n               ROUTCDE=(2),DESC=(4),MF=L                                02904\nLWTO2    EQU   *-WTO2                                                   02905\n.ERRMSGN ANOP                                                           02906\nJOBERR1  DS    0H                                                       02907\n         AIF   ('&FLUSH' NE 'YES').FLUSHN                               02908\n         LA    R15,8          SET JOB FAIL RETURN CODE                  02909\n         ST    R15,RETCODE    AND SAVE IT                               02910\n*********************************************************************** 02911\n*        AT THIS POINT WE MUST CHANGE TO OUTPUT CLASS SO THE JCL      * 02912\n*        ERROR WILL PRINT.  THE PDDB CLASS WAS SET AT CONVERSION TIME * 02913\n*        AND IF THE MSGCLASS WAS FOR A DUMMY CLASS, I.E. ERROR ON     * 02914\n*        JOB CARD, THE JOB WILL FLUSH AND THE USER WOULD NOT SEE THE  * 02915\n*        ERROR MESSAGE(S).  THE PDDBS IN QUESTION ARE THOSE FOR THE   * 02916\n*        JOB LOG, JCL IMAGES, AND THE SYSTEM MESSAGES.  IF THE CLASS  * 02917\n*        WAS ALREADY A HELD CLASS IT WILL NOT BE CHANGED.             * 02918\n*********************************************************************** 02919\n         ICM   R4,B'1111',DCNVIOT GET ADDR OF THE IOT FOR TASK      WEJ 02920*19\n         BZ    ENDCHK              BYPASS CLASS RESET IF ZERO       WEJ 02921\n         USING IOT,R4             SET IOT  ADDRESSABILITY           WEJ 02922*19\n         L     R3,IOTPDDB         1ST PDDB OFFSET                       02923\n         ALR   R3,R4              CALCULATE ADDRESS                     02924*19\n         USING PDB,R3             SET PDDB ADDRESSABILITY           WEJ 02925\n         LA    R3,PDBLENG(,R3)    POINT PAST FIRST PDDB                 02926\n         CLC   C#$JLOG,PDBDDNAM   CHECK DDNAME                          02927\n         BNE   CHK$JCL                                                  02928\n         CLI   PDBCLASS,C'5'      IS IT DUMMY CLASS?                    02929**5\n         BNE   CHK$JCL             NO, CHECK NEXT                       02930\n         MVI   PDBCLASS,C'A'      CHANGE CLASS                          02931\n         NI    PDBFLAG1,255-PDB1NSOT  SHOW FOR SYSOUT                   02932\n         LA    R3,PDBLENG(,R3)    POINT TO NEXT PDDB                    02933\nCHK$JCL  DS    0H                                                       02934\n         CLC   C#$JCL,PDBDDNAM    CHECK DDNAME                          02935\n         BNE   CHK$SYS                                                  02936\n         CLI   PDBCLASS,C'5'      IS IT DUMMY CLASS?                    02937**5\n         BNE   CHK$SYS             NO, CHECK NEXT                       02938\n         MVI   PDBCLASS,C'A'      CHANGE CLASS                          02939\n         NI    PDBFLAG1,255-PDB1NSOT  SHOW FOR SYSOUT                   02940\n         LA    R3,PDBLENG(,R3)    POINT TO NEXT PDDB                    02941\nCHK$SYS  DS    0H                                                       02942\n         CLC   C#$SYSM,PDBDDNAM   CHECK DDNAME                          02943\n         BNE   ENDCHK                                                   02944\n         CLI   PDBCLASS,C'5'      IS IT DUMMY CLASS?                    02945**5\n         BNE   ENDCHK              NO, END OF CHECK                     02946\n         MVI   PDBCLASS,C'A'      CHANGE CLASS                          02947\n         NI    PDBFLAG1,255-PDB1NSOT  SHOW FOR SYSOUT                   02948\nENDCHK   DS    0H                                                       02949\n         DROP  R4,R3          DROP ADDRESSABILITY                       02950*19\n.FLUSHN  ANOP                                                           02951\n         EJECT                                                          02952\n*********************************************************************** 02953\n*                        C L E A N    U P                             * 02954\n*********************************************************************** 02955\nENDOFIT  DS    0H             END OF EXIT                               02956\n         AIF   ('&TSO' EQ 'YES').TSO10                                  02957\n***                           CANCEL ESTAE ENVIRONMENT                  02958\n         ESTAE 0,BRANCH=YES,SVEAREA=STAEREGS,KEY=1,MF=(E,ESTAEL)        02959\n         L     R13,DCNVUWA    LOAD SAVED WORK AREA                      02960\n.TSO10   ANOP                                                           02961\n         L     R0,F#8192      LOAD FREEMAIN LENGTH                      02962\n         L     R1,SUBTABLE    LOAD JCL SUB TABLE AREA ADDRESS           02963\n         FREEMAIN R,LV=(0),A=(1)                                        02964\n         L     R4,RETCODE     SAVE RETURN CODE                          02965*19\n         LH    R0,GETLEN      LOAD FREEMAIN SIZE                        02966\n         LR    R1,R13         SAVE WORKAREA ADDRESS                     02967\n         L     R13,4(,R13)    RESTORE ORIG REG 13                       02968\n         FREEMAIN R,LV=(0),A=(1)                                        02969\n         XC    DCNVUWA(4),DCNVUWA CLEAR WORKAREA POINTER IN DTE         02970\n         LR    R15,R4         SET RETURN CODE                           02971*19\n         RETURN (14,12),RC=(15) GO BACK TO JES2                         02972\n         SPACE 4                                                        02973\n*********************************************************************** 02974\n*        RETURN TO JES REQUESTING THE NEXT INTERNAL TEXT STATEMENT    * 02975\n*********************************************************************** 02976\nGETNEXT  L     R5,CARDNO      LOAD CARD NUMBER FIELD                    02977*19\n         LA    R5,1(,R5)      ADD 1 TO CARD NUMBER                      02978*19\n         ST    R5,CARDNO      STORE NEW CARD NUMBER                     02979*19\n         XC    RETCODE,RETCODE SET RETURN CODE TO ZERO                  02980\n         AIF   ('&TSO' EQ 'YES').TSO11                                  02981\n***                           CANCEL ESTAE ENVIRONMENT                  02982\n         ESTAE 0,BRANCH=YES,SVEAREA=STAEREGS,KEY=1,MF=(E,ESTAEL)        02983\n         L     R13,DCNVUWA       SAME AS EXWKPTR1                   WEJ 02984\n.TSO11   ANOP                                                           02985\n         L     R13,4(,R13)    RESTORE ORIG REG 13                       02986\n         SLR   R15,R15        SET RETURN CODE TO ZERO                   02987\n         RETURN (14,12),RC=(15) GO BACK TO JES2                         02988\n         EJECT                                                          02989\n*********************************************************************** 02990\n*                                                                     * 02991\n*                        M S G R T N                                  * 02992**7\n*                                                                     * 02993\n*        THIS ROUTINE WILL WRITE A MESSGE TO THE JES MESSAGE DATA     * 02994\n*        SET USING THE INDEX INTO THE MESSAGE TABLE PASSED BY         * 02995\n*        REGISTER 15 TO THE ROUTINE AND USE THE CARDNO FOR THE        * 02996\n*        STATEMENT NUMBER IN THE MESSAGE PREFIX.                      * 02997\n*                                                                     * 02998\n*********************************************************************** 02999\n         PUSH  USING                                                    03000\nMSGRTN   STM   R14,R12,SAVEREGS SAVE REGISTERS                          03001**7\n         L     R6,OUTRPL      GET BASE FOR RPL                          03002\n         USING IFGRPL,R6      SET ADDRESSABILITY                        03003\n         LR    R4,R15         SAVE ERROR POSITION                   WEJ 03004*19\n         L     R3,CARDNO      LOAD CARD NUMBER                          03005\n         CVD   R3,DOUBLE      CONVERT CARD NUMBER TO PACKED             03006\n         L     R5,MSGCOUNT    LOAD MESSAGE COUNTER                      03007*19\n         LTR   R5,R5          SEE IF FIRST MESSAGE                      03008*19\n         BNZ   MSGOUT         NO, DO NOT PUT HEADERS                    03009\n         MVI   BUFFER,C' '    BLANK OUT BUFFER                      WEJ 03010**8\n         MVC   BUFFER+1(L'BUFFER-1),BUFFER                          WEJ 03011**8\n         MVC   BUFFER(L'HEADER1),HEADER1 MOVE HEADER LINE1 TO BUFF  WEJ 03012**8\n         BAL   R2,PUTMSG      GO WRITE TO MSG DATA SET                  03013**4\n         MVI   BUFFER,C'-'    SET UP HEADER LINE 2                  WEJ 03014**8\n         MVI   BUFFER+1,C' '  SET UP HEADER LINE 2                  WEJ 03015**8\n         MVC   BUFFER+2(L'BUFFER-2),BUFFER+1                        WEJ 03016*26\n         BAL   R2,PUTMSG      GO WRITE TO MSG DATA SET                  03017**4\nMSGOUT   LA    R5,1(,R5)      ADD 1 TO MESSAGE COUNT                    03018*19\n         MVI   BUFFER,C' '    BLANK OUT BUFFER                      WEJ 03019*32\n         MVC   BUFFER+1(L'BUFFER-1),BUFFER                          WEJ 03020*32\n         ST    R5,MSGCOUNT    SAVE MESSAGE COUNTER                      03021*19\n         CL    R4,F#8192      IS THIS A DISPLACEMENT OR AN ADDRESS      03022*19\n         BH    MSGOUT2        OVER 8192 IS AN ADDRESS                   03023*10\nMSGOUT1  DS    0H                                                       03024\n         MVC   MSGPREF,PREFIX MOVE MSG PREFIX TO JES2 BUFFER            03025\n         ED    MSGPREF(6),DOUBLE+5 EDIT CARD NUMBER TO PREFIX           03026\n         MVI   MSGTEXT,C' '   BLANK OUT MSGTEXT                         03027\n         MVC   MSGTEXT+1(L'MSGTEXT-1),MSGTEXT                           03028\n         AL    R4,A#MSSG      ADD ADDR OF MESSAGE TABLE TO MSG POS  WEJ 03029*19\nMSGOUT2  DS    0H                                                       03030*10\n         SLR   R3,R3          CLEAR REGISTER 3 FOR SIZE INSERT          03031\n         IC    R3,0(,R4)      GET SIZE OF MESSAGE                       03032*19\n         EX    R3,MOVEMSG     MOVE THE MESSAGE                          03033\nMSGOUT3  DS    0H                                                       03034\n         BAL   R2,PUTMSG      GO WRITE TO MSG DATA SET                  03035**4\n         CLI   7(R4),C'I'     IS THIS AN INFO MSSG (POS 7 = I)      WEJ 03036*19\n         BE    MSGOUT5        YES  DO NOT FAIL JOB                      03037\n         OI    JOBIND2,JOBFAIL TURN ON JOB FAILED IND                   03038\nMSGOUT5  LM    R14,R12,SAVEREGS RESTORE REGISTERS                       03039\n         BR    R14            RETURN TO CALLER                          03040\nMOVEMSG  MVC   MSGTEXT(0),1(R4)  MOVE PROPER MSG TO JES2 BUFFER     WEJ 03041*19\n         EJECT                                                          03042\n*********************************************************************** 03043\n*                                                                     * 03044\n*                          P U T M S G                                * 03045\n*                                                                     * 03046\n*        WRITE MESSAGE TO JES MESSAGE DATA SET                        * 03047\n*                                                                     * 03048\n*********************************************************************** 03049\nPUTMSG   DS    0H                                                       03050\n         MVI   RPLREQ,RPLPUT  OPERATION TO BE A PUT                     03051\n         L     R0,OUTACB      LOAD OUTPUT ACB ADDRESS                   03052\n         ST    R0,RPLDACB     SET IN ACB POINTER IN RPL                 03053\n         LA    R0,BUFFER      LOAD ADDR OF BUFFER                       03054\n         ST    R0,RPLAREA     POINT TO BUFFER                           03055\n         XC    RPLARG(4),RPLARG ZERO FIELD                              03056\n         MVI   RPLOPT1,RPLSEQ OPERATION TO BE SEQUENTIAL                03057\n         MVI   RPLOPT2,X'00'  ZERO FIELD                                03058\n         LA    R0,100         LOAD MESSAGE LENGTH                       03059\n         ST    R0,RPLRLEN     STORE MESSAGE LENGTH                      03060\n         XC    RPLBUFL(4),RPLBUFL ZERO FIELD                            03061\n         XC    RPLDDDD(4),RPLDDDD ZERO FIELD                            03062\n         ST    R13,PUTSAVE+72 SAVE SAVE AREA POINTER                    03063\n         LA    R13,PUTSAVE    SAVE AREA FOR ACCESS METHOD               03064\n         LA    R1,IFGRPL      LOAD ADDR OF RPL                          03065\n         PUT   RPL=(1)        WRITE TO MESSAGE DATA SET                 03066\n         L     R13,72(R13)    RESTORE SAVE AREA POINTER                 03067\n         LTR   R15,R15        TEST RETURN CODE                          03068\n         BZR   R2             BAD, GO BAG JOB                           03069**4\n         SPACE 2                                                        03070\n         MVC   WTOLIST(LWTO1),WTO1 SET WTO LIST FORM                    03071\n         AIF   ('&TSO' NE 'YES').TSO3                                   03072\n         WTO   MF=(E,WTOLIST)                                           03073\n         AGO   .TSO4                                                    03074\n.TSO3    ANOP                                                           03075\n         $$WTO WTOLIST        WRITE ERROR MESSAGE                       03076\n.TSO4    ANOP                                                           03077\n         B     JOBERROR       GET OUT                                   03078\n         SPACE                                                          03079\n         $MID  901                                                      03080\nWTO1     WTO   '&MID.PUT TO JOB MESSAGE DATA SET FAILED',              X03081\n               ROUTCDE=(2),DESC=(4),MF=L                                03082\nLWTO1    EQU   *-WTO1                                                   03083\n         DROP  R6                                                       03084\n         POP   USING                                                    03085\n         EJECT                                                          03086\n*********************************************************************** 03087\n*                                                                     * 03088\n*                          R E F B A C K                              * 03089\n*                                                                     * 03090\n*        THIS ROUTINE HANDLES DSN AND VOLSER REFERBACKS.  THE SAVE    * 03091\n*        TABLE WILL BE SEARCHED FROM THE BEGINNING FOR JOBSTEP AND/OR * 03092\n*        PROCSTEP ENTRY AND THEN WITHIN THE DD ENTRIES FOR THAT STEP. * 03093\n*        IF THE ENTRY IS FOUND, THE UNIT AND DSNAME INFORMATION WILL  * 03094\n*        BE SAVED, IF NOT, A RETURN IS MADE TO THE CALLING RTN.       * 03095\n*                                                                     * 03096\n*********************************************************************** 03097\n*                                                                       03098\nREFBACK  SLR   R3,R3          CLEAR WORK REGISTER                       03099\n         SLR   R5,R5          CLEAR WORK REGISTER                       03100*19\n         SLR   R2,R2          CLEAR WORK REGISTER                       03101**4\n         IC    R2,2(,R4)      LOAD NUMBER OF DSN SUBPARAMETERS          03102*19\n         N     R2,F#127       'AND' OUT THE HIGH ORDER BIT              03103**4\n         LA    R4,3(,R4)      LOAD START OF REFBK ENTRIES               03104*19\n         CLI   0(R4),X'01'    SEE IF LEN OF 1ST POS = 1                 03105*19\n         BNE   DDLOOP         NO, DSN(MEMBER) PDS DISK ONLY, IGNORE     03106\n         CLI   1(R4),C'*'     SEE IF REFERBACK                          03107*19\n         BNE   DDLOOP         NO, DSN(MEMBER) PDS DISK ONLY, IGNORE     03108\n         CH    R2,H#4         SEE IF NUMBER PARAMS > 4                  03109**4\n         BNH   REFBACKA       NO, CONTINUE                              03110\n         LA    R15,P@32       SET ERROR NUMBER                          03111\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        03112**7\n         B     DDLOOP         GET OUT                                   03113\nREFBACKA DS    0H                                                       03114\n         MVC   REFERBCK,BLANKS   BLANK ENTIRE WORK AREA                 03115\n         XC    REFUNIT,REFUNIT ZERO REFERBACK UNIT FEEDBACK             03116\n         XC    REFVOL,REFVOL  ZERO REFERBACK VOLSER FIELD               03117\n         MVC   REFDSN,BLANKS  BLANK ENTIRE REFERBACK DSNAME FIELD       03118\nREFLOOP1 LA    R5,1(,R5)      ADD 1 TO COUNT                            03119*19\n         CR    R5,R2          SEE IF COUNT EXCEEDED                     03120*19\n         BH    REFSEAR        YES, GO SEARCH BACK                       03121\n         ICM   R3,1,0(R4)     LOAD LENGTH OF ENTRY                      03122*19\n         BZ    ERROR32        ZERO, GO TO ERROR 32                      03123\n         CH    R3,H#8         SEE IF LENGTH > 8                         03124\n         BH    ERROR32        NO, CONTINUE                              03125\n         BCTR  R3,0           MAKE MACHINE LENGTH                       03126\n         CH    R5,H#1         SEE IF 1ST ENTRY                          03127*19\n         BE    REFLOOP2       YES, IGNORE                               03128\n         CH    R5,H#2         SEE IF 2ND ENTRY                          03129*19\n         BE    REF#2          YES, GO PROCESS IT                        03130\n         CH    R5,H#3         SEE IF 3RD ENTRY                          03131*19\n         BE    REF#3          YES, GO PROCESS IT                        03132\n*        THIS MUST BE THE 4TH ENTRY                                     03133\nREF#4    EX    R3,MOVE10      MOVE DDN TO SEARCH FIELD                  03134\n         B     REFLOOP2       BRANCH                                    03135\nERROR32  DS    0H                                                       03136\n         LA    R15,P@32       SET ERROR NUMBER                          03137\n         BAL   R14,MSGRTN     GO ISSUE ERROR MSG                        03138**7\n         B     DDLOOP         GET OUT                                   03139\nREF#3    CH    R2,H#3         SEE IF ONLY 3 ENTRIES                     03140**4\n         BE    REF#3B         YES, MUST BE DDNAME                       03141\n*        IF NOT DDNAME, MUST BE PROCSTEP NAME                           03142\nREF#3A   EX    R3,MOVE11      MOVE ENTRY TO PSTEP ENTRY                 03143\n         B     REFLOOP2       BRANCH                                    03144\nREF#3B   EX    R3,MOVE10      MOVE ENTRY TO DDNAME                      03145\n         B     REFLOOP2       BRANCH                                    03146\nREF#2    CH    R2,H#2         SEE IF ONLY 2 ENTRIES                     03147**4\n         BE    REF#2B         ONLY 2, MUST BE DDNAME                    03148\n*        IF 3 OR 4 ENTRIES, THIS ENTRY MUST BE FOR JOBSTEP              03149\nREF#2A   EX    R3,MOVE12      MOVE ENTRY TO JSTEP                       03150\n         B     REFLOOP2       BRANCH                                    03151\nREF#2B   EX    R3,MOVE10      MOVE ENTRY TO DDNAME                      03152\nREFLOOP2 LA    R4,2(R3,R4)    INCREMENT TO NEXT ENTRY                   03153*19\n         B     REFLOOP1       LOOP                                      03154\nREFSEAR  L     R7,LASTEXEC    LOAD ADDR OF LAST EXEC CARD               03155\n*        IF REFERBACK WITHIN CURRENT STEP, THIS ADDR WILL BE            03156\n*        USED FOR START OF SEARCH                                       03157\n         MVI   REFFLAG,AFF    SET UNIT AFFINITY TO YES                  03158\n         CLI   REFJSTEP,C' '  SEE IF JSTEP PART OF SEARCH               03159\n         BE    REFSEAR5       NO, SAME STEP WE ARE IN                   03160\n         MVI   REFFLAG,X'00'  SET UNIT AFFINITY TO NO                   03161\n         CLI   REFPSTEP,C' '  SEE IF PROCSTEP PART OF SEARCH            03162\n         BE    REFSEAR1       BLANK, NO PROCSTEP                        03163\n         LA    R3,15          SET COMPARE LENGTH FOR JS & PS            03164\n         B     REFSEAR2       BRANCH                                    03165\nREFSEAR1 LA    R3,7           SET COMPARE LENGTH FOR JS ONLY            03166\nREFSEAR2 L     R7,FIRSTENT    LOAD START OF TABLE                       03167\nREFSEAR3 LA    R7,ENTLEN(,R7) INCREMENT PAST JOB ENTRY                  03168\n         CLI   ENTRYTYP,TYPEXEC SEE IF EXEC ENTRY                       03169\n         BE    REFSEAR4       YES, GO COMPARE                           03170\n         CLI   ENTRYTYP,TYPEND  SEE IF END OF TABLE                     03171\n         BE    REFNO          NOT FOUND, PROBABLE JCL ERROR, EXIT       03172\n         B     REFSEAR3       LOOP                                      03173\nREFSEAR4 EX    R3,COMPARE1    SEE IF RIGHT STEP                         03174\n         BE    REFSEAR5       YES, GO SEARCH FOR DDNAME                 03175\n         B     REFSEAR3       LOOP FOR NEXT ENTRY                       03176\nREFSEAR5 LA    R7,ENTLEN(,R7) INCREMENT TO NEXT DD ENTRY                03177\n         TM    ENTRYTYP,TYPEDD SEE IF DD ENTRY                          03178\n         BNO   REFNO          DDNAME NOT FOUND, EXIT                    03179\nREFSEAR6 CLC   REFDDN,DDDN    MATCH DDNAME????                          03180\n         BNE   REFSEAR5       NO, LOOP FOR NEXT DD                      03181\nREFOUND  MVC   REFDSN(L'DDSN),DDSN SAVE DSNAME                          03182\n         MVC   REFUNIT,DTYPE  SAVE UNIT INFO                            03183\n         OC    REFUNIT,REFFLAG SET AFFINITY BIT                         03184\n         MVC   REFVOL,DVOLSER SAVE VOLSER INFO                          03185\nREFNO    BR    R14            RETURN                                    03186\n         EJECT                                                          03187\n*********************************************************************** 03188\n*                                                                     * 03189\n*                          T B L F U L L                              * 03190\n*                                                                     * 03191\n*        THE INTERNAL DD TABLE IS FULL.  ISSUE THE APPROPRIATE        * 03192\n*        MESSAGE AND EXIT WITH A JCL ERROR.                           * 03193\n*                                                                     * 03194\n*********************************************************************** 03195\nTBLFULL  MVC   WTOLIST(LWTO3),WTO3 SET WTO LIST FORM                    03196\n         AIF   ('&TSO' NE 'YES').TSO5                                   03197\n         WTO   MF=(E,WTOLIST)                                           03198\n         AGO   .TSO6                                                    03199\n.TSO5    ANOP                                                           03200\n         $$WTO WTOLIST        WRITE ERROR MESSAGE                       03201\n.TSO6    ANOP                                                           03202\n         L     R14,JCTADDR    LOAD JCT ADDRESS                          03203\n         USING JCT,R14        SET ADDRESSABILITY TO JCT             WEJ 03204\n         NI    JCTXMASK,X'FD' TURN OF EXIT6 FLAG                        03205\n         DROP  R14            DROP ADDRESSABILITY                       03206\n         B     JOBERROR       EXIT WITH A SEVERE ERROR AND NO RETURN    03207\n         SPACE                                                          03208\n         $MID  903                                                      03209\nWTO3     WTO   '&MID.MAXIMUM ENTRIES IN INTERNAL TABLE EXCEEDED',      X03210\n               ROUTCDE=(2),DESC=(4),MF=L                                03211\nLWTO3    EQU   *-WTO3                                                   03212\n         EJECT                                                          03213\n*********************************************************************** 03214\n*                                                                     * 03215\n*                          S M F W T M                                * 03216\n*                                                                     * 03217\n*        THIS ROUTINE GETS CONTROL FOR SOME OF THE ERRORS AND WILL    * 03218\n*        WRITE AN SMF RECORD TO RECORD THE ERROR FOR FUTURE REPORTING * 03219\n*                                                                     * 03220\n*********************************************************************** 03221\nSMFWTM   DS    0H                                                       03222\n         USING TEXT,R6                    R6 POINTS TO THE TEXT OR A    03223\n*                                         COPY OF IT                    03224\n         STM   R14,R12,SAVEREGS           SAVE THE REGISTERS            03225\n         GETMAIN R,LV=L'SMF248            GET SOME STORAGE          WEJ 03226\n         LR    R8,R1                      SAVE ADDRESS                  03227\n         USING SMFDSECT,R8                ESTABLISH ADDRESSABILITY      03228\n         L     R14,JCTADDR                LOAD JCT ADDRESS              03229\n         USING JCT,R14                    ESTABLISH ADDRESSABILITY  WEJ 03230\n         MVC   SM248RST,JCTRDRON          STORE READER START TIME   WEJ 03231\n         MVC   SM248RSD,JCTRDTON          STORE READER START DATE   WEJ 03232\n         MVC   SM248JBN,JCTJMRJN          MOVE JOBNAME              WEJ 03233\n         MVC   SM248UIF,JCTUSEID          MOVE USERID               WEJ 03234\n         MVC   SM248DEV,JCTINDEV          MOVE INPUT DEVICE         WEJ 03235\n         MVC   SM248IGP,JCTNONDE          MOVE NODE NAME TO ORIG GP WEJ 03236\n         MVC   SM248PS3,JCTPROCN+4        MOVE LAST 2 BYTES OF PROC WEJ 03237\n*                                              DDNAME               WEJ 03238\n         DROP  R14                                                      03239\n         MVC   SM248LEN,H#LSM248          MOVE IN LENGTH OF HEADER  WEJ 03240\n         MVI   SM248FLG,X'02'             MOVE IN SMF FLAGS         WEJ 03241\n         MVC   SM248RTY,SMFRTYPE          MOVE IN RECORD TYPE       WEJ 03242\n         MVC   SM248PNM,BLANKS            BLANK OUT PROCNAME        WEJ 03243\n         CLI   SMFRTYPE,X'F7'             IS THIS A QNAME RECORD    WEJ 03244\n         BE    GETDDN                     YES, GO HANDLE IT         WEJ 03245\n         EX    R3,MOVEPNM                 MOVE PROC NAME                03246\n         MVC   SM248STM,SAVEPROC          MOVE PROC STEP NAME       WEJ 03247\n         CLI   SMFRTYPE,X'F9'             IS IT INSTREAM?               03248\n         BNE   GETSID                     NO GO TO GET SYS ID           03249\n         MVC   SM248PS3,C#ASTRSK          MOVE ASTERISKS                03250\n         B     GETSID                     GO TO GET SYSID           WEJ 03251\nMOVEPNM  MVC   SM248PNM(0),1(R4) MOVE PROC NAME TO SAVE AREA        WEJ 03252*19\nGETDDN   DS    0H                                                   WEJ 03253\n         MVC   SM248PS3,BLANKS            MOVE BLANKS TO UNUSED FLD WEJ 03254\n         MVC   SM247DDN,TDDN              MOVE IN DD NAME           WEJ 03255\n         MVC   SM247QNM,SAVEQNM           MOVE IN QNAME IF ANY      WEJ 03256\nGETSID   L     R1,16                      -> CVT                        03257\n         L     R1,196(,R1)                -> SMCA                       03258\n         MVC   SM248SID,16(R1)            MOVE SYSTEM ID            WEJ 03259\n         TIME  BIN                        GET THE TIME              WEJ 03260\n         STM   R0,R1,SM248TME             GET THE TIME              WEJ 03261\n         SMFWTM (8)                       WRITE THE RECORD          WEJ 03262\n         LR    R1,R8                                                    03263\n         FREEMAIN R,LV=L'SMF248,A=(1)     FREE SOME STORAGE             03264\n         LM    R14,R12,SAVEREGS           RESTORE REGISTERS             03265\n         BR    R14                        RETURN TO CALLER              03266\n         DROP  R8                                                   WEJ 03267\n         USING J2XIT06E,R12,R9,R10                                      03268\n* MOVE1  MVC   JNAME(0),1(R4) MOVE JOBNAME TO SAVE TABLE                03269*19\nMOVE2    MVC   JACCTNO(0),1(R4) MOVE ACCOUNT NO TO SAVE TABLE           03270*19\nMOVE3    MVC   JPGMRNM(0),1(R4) MOVE PROGRAMMER NAME TO SAVE TABLE      03271*19\nMOVE4    MVC   SAVEPROC(0),1(R4) MOVE JOB STEP NAME TO SAVE AREA        03272*19\nMOVE5    MVC   EJSTEP(0),3(R4) MOVE JOB STEP NAME TO TABLE              03273*19\nMOVE6    MVC   EPSTEP(0),3(R4) MOVE PROC STEP NAME TO TABLE             03274*19\nMOVE7    MVC   EPGMNM(0),3(R4) MOVE STEP PGM NAME TO TABLE              03275*19\nMOVE8    MVC   TDDN(0),3(R4)   MOVE DDNAME TO TEMP DD ENTRY             03276*19\nMOVE9    MVC   TDSN(0),3(R4)   MOVE DSN TO TEMP DD ENTRY                03277*19\nMOVE10   MVC   REFDDN(0),1(R4) MOVE DDNAME TO REFERBACK                 03278*19\nMOVE11   MVC   REFPSTEP(0),1(R4) MOVE PROCSTEP NAME TO REFERBACK        03279*19\nMOVE12   MVC   REFJSTEP(0),1(R4) MOVE JOBSTEP NAME TO REFERBACK         03280*19\nMOVE13   MVC   TVOLSER(0),3(R4) SAVE 1ST VOLSER FROM DD                 03281*19\nMOVE14   MVC   TDSN(0),1(R5)  MOVE 1ST PART GDG DSN TO TEMP             03282*19\nMOVE15   MVC   0(0,R2),1(R5)  MOVE 2ND PART GDG DSN TO TEMP             03283*19\nMOVE16   MVC   JACCT(0),1(R4) MOVE ACCOUNT NO TO WORK AREA              03284*19\nMOVE17   MVC   LDSN(0),3(R4)  MOVE VOL=SER DSNAME TO SAVE               03285*19\nMOVE18   MVC   CURSTEP(0),3(R4) SAVE JOB  STEP NAME                     03286*19\nMOVE19   MVC   CURSTEP(0),3(R4) SAVE PROC STEP NAME                     03287*19\nMOVE20   MVC   JDVERB(0),2(R4)   MOVE JDT VERB  TO TABLE                03288*19\nMOVE21   MVC   JDLABEL(0),2(R4)  MOVE JDT LABEL TO TABLE                03289*19\nMOVE22   MVC   0(0,R4),0(R14)    SHIFT DD TEXT                          03290*19\nMOVE23   MVC   3(0,R4),2(R3)     MOVE UNIT NAME FROM TABLE              03291*33\nPACK1    PACK  DOUBLE,1(0,R4) GENERIC PACK INSTRUCTION              WEJ 03292*19\nTRT1     TRT   1(0,R4),0(R2)  GENERIC TRT INSTRUCTION               WEJ 03293*19\nCOMPARE1 CLC   REFERBCK(0),EENTRY SEE IF REFERBACK STEPS MATCH          03294\nCOMPARE2 CLC   1(0,R4),2(R1)  SEE IF UNIT NAME IN TABLE                 03295*19\nCOMPARE3 CLC   1(0,R4),EPSTEP SEE IF PROC OVERRIDE STEPNAME MATCH       03296*19\nCOMPARE4 CLC   2(0,R4),C#OUTPUT  IS THIS VERB \"OUTPUT\"                  03297*19\nCOMPARE5 CLC   2(0,R4),C#CLASS   IS THIS KEYWORD \"CLASS\"                03298*19\n         EJECT                                                          03299\n*********************************************************************** 03300\n*                                                                     * 03301\n*                          S T A E R T R Y                            * 03302\n*                                                                     * 03303\n*        RESTORE ORIGINAL REGISTERS AND GET OUT                       * 03304\n*                                                                     * 03305\n*********************************************************************** 03306\nSTAERTRY LR    R13,R1         RESTORE GETMAINED AREA ADDRESS            03307\n         LM    R14,R12,STAEREGS+12 RESTORE REGISTERS                    03308\n         CLI   RECURS,X'FF'   SEE IF RECURSIVE ABEND                    03309\n         BE    JOBERR1        YES, GET OUT AS QUICKLY AS POSSIBLE       03310\n         MVI   RECURS,X'FF'   SET RECURSIVE ABEND INDICATOR             03311\n         B     CLEAR          GET OUT                                   03312\n         EJECT                                                          03313\n         LTORG                                                          03314\n         SPACE 2                                                        03315\n*********************************************************************** 03316\n*        TABLES USED BY EXIT                                          * 03317\n*********************************************************************** 03318\n*                                                                       03319\n*********************************************************************** 03320\n*        FORMAT OF TABLE IS AS FOLLOWS                                * 03321\n*        1)  A 1 BYTE PRODUCTION SYSOUT CLASS                         * 03322\n*        2)  A 1 BYTE TEST SYSOUT CLASS IF USED IN TEST JOB           * 03323\n*********************************************************************** 03324\nPSYSOUT  EQU   *              PRODUCTION-ONLY SYSOUT CLASSES            03325\n         DC    C'E',C'A'      PRODUCTION IMPACT PRINTER                 03326\n         DC    C'N',C'S'      PRODUCTION XEROX SIMPLEX CLASS            03327\n         DC    C'M',C'D'      PRODUCTION XEROX DUPLEX  CLASS            03328\n         DC    X'FF'          END OF TABLE                              03329\n*                                                                       03330\n*********************************************************************** 03331\n*        FORMAT OF TABLE IS AS FOLLOWS                                * 03332\n*        1)  A 1 BYTE UNIT ATTRIBUTE TYPE                             * 03333\n*            X'00'  UNIMPORTANT DEVICE TYPE                           * 03334\n*            X'02'  TAPE DEVICE                                       * 03335\n*            X'04'  PRIVATE MOUNT DISK DEVICE                         * 03336\n*            X'08'  VIO                                               * 03337\n*        2)  A 1 BYTE MACHINE LENGTH OF ENTRY                         * 03338\n*        3)  AN 8 BYTE FIELD CONTAINING THE DEVICE NAME LEFT JUSTIFIED* 03339\n*********************************************************************** 03340\nDEVTABLE EQU   *              DEVICE NAME TABLE                         03341\n         DC    X'F4',X'04',CL8'SYSDA'    SYSDA                          03342*37\n         DC    X'F4',X'04',CL8'SYSSQ'    SYSDA                          03343*37\n         DC    X'F2',X'03',CL8'DISK'     SYSDA                          03344*37\n         DC    X'F4',X'03',CL8'WORK'     SYSDA                          03345*37\n         DC    X'00',X'03',CL8'SYSP'     SYSDA                          03346*29\n         DC    X'00',X'03',CL8'TEST'     SYSDA                          03347*29\n         DC    X'00',X'07',CL8'SYSALLDA' SYSDA                          03348*29\n         DC    X'00',X'03',CL8'3375'     SYSDA                          03349*29\n         DC    X'00',X'03',CL8'3380'     SYSDA                          03350*37\n         DC    X'02',X'03',CL8'TAPE'     TAPE                           03351*29\n         DC    X'02',X'03',CL8'3400'     TAPE                           03352*29\n         DC    X'04',X'03',CL8'PRIV'     PRIV                           03353*29\n         DC    X'08',X'03',CL8'VIO'      VIO                            03354*29\n         DC    10X'00'         END OF TABLE                             03355\n         EJECT                                                          03356\n*********************************************************************** 03357\n*        CONSTANTS USED BY EXIT                                       * 03358\n*********************************************************************** 03359\n*                                                                       03360\nBLANKS   DC    44C' '         CONSTANT STRING OF BLANKS                 03361\n* DEFTIME DC   X'A9',X'01',X'04',CL4'0120',X'FE' DFLT CPU TIME INTEXT   03362**5\n* ZEROES DC    8C'0'          CHARACTER CONSTANT 8 ZEROES               03363**5\nGDGMASK  DC    C'G0000V00'    GDG SUFFIX MASK                           03364\nX#FFFF   DC    F'65535'       FULLWORD CONSTANT X'0000FFFF'             03365\nMAXENTS  DC    Y(8192/ENTLEN) MAX ENTRIES IN 8K TABLE                   03366\nGETLEN   DC    AL2(GETSIZE)   SIZE OF GETMAIN AREA                      03367\nA#MSSG   DC    A(MESSAGES)    ADDRESS OF BEGINING OF MESSAGE TABLE  WEJ 03368\nA#PTYPRF DC    A(PRTYTBL-L'PRTYENT) ADDRESS OF ENT BEFORE PRTY TBL  WEJ 03369\n* F#1    DC    F'1'           FULLWORD CONSTANT '1'                     03370**6\nF#15     DC    F'15'          FULLWORD CONSTANT '15'                    03371\nF#45     DC    F'45'          FULLWORD CONSTANT '45'                    03372\n* F#120  DC    F'120'         FULLWORD CONSTANT '120'                   03373**6\nF#127    DC    F'127'         FULLWORD CONSTANT '127'                   03374\nF#8192   DC    F'8192'        CONSTANT FULLWORD 8192                    03375\nH#0      DC    H'0'           HALFWORD CONSTANT '0'                     03376\nH#1      DC    H'1'           HALFWORD CONSTANT '1'                     03377\nH#2      DC    H'2'           HALFWORD CONSTANT '2'                     03378\nH#3      DC    H'3'           HALFWORD CONSTANT '3'                     03379\nH#4      DC    H'4'           HALFWORD CONSTANT '4'                     03380\nH#5      DC    H'5'           HALFWORD CONSTANT '5'                     03381\nH#6      DC    H'6'           HALFWORD CONSTANT '6'                     03382\nH#7      DC    H'7'           HALFWORD CONSTANT '7'                     03383\nH#8      DC    H'8'           HALFWORD CONSTANT '8'                     03384\nH#9      DC    H'9'           HALFWORD CONSTANT '9'                 WEJ 03385\nH#10     DC    H'10'          HALFWORD CONSTANT '10'                    03386\nH#12     DC    H'12'          HALFWORD CONSTANT '12'                    03387\nH#13     DC    H'13'          HALFWORD CONSTANT '13'                    03388\nH#20     DC    H'20'          HALFWORD CONSTANT '20'                    03389\nH#35     DC    H'35'          HALFWORD CONSTANT '35'                    03390\nH#42     DC    H'42'          HALFWORD CONSTANT '42'                    03391\nH#44     DC    H'44'          HALFWORD CONSTANT '44'                    03392\nH#45     DC    H'45'          HALFWORD CONSTANT '45'                    03393\nH#50     DC    H'50'          HALFWORD CONSTANT '50'                    03394\nH#60     DC    H'60'          HALFWORD CONSTANT '60'                    03395\nH#90     DC    H'90'          HALFWORD CONSTANT '90'                    03396\nH#120    DC    H'120'         HALFWORD CONSTANT '120'                   03397\nH#512    DC    H'512'         HALFWORD CONSTANT '512'                   03398\nH#1440   DC    H'1440'        HALFWORD CONSTANT '1440'                  03399\nH#5000   DC    H'5000'        HALFWORD CONSTANT '5000'                  03400\nH#LSM248 DC    AL2(L'SMF248)  LENGTH OF SMF248 RECORD               WEJ 03401\nP#0      DC    P'0'           PACKED CONSTANT '0'                       03402\nC#ASTRSK DC    CL2'**'        CHARACTER CONSTANT OF **              WEJ 03403\nC#PH     DC    CL2'PH'        CHARACTER CONSTANT 'PH'               WEJ 03404\nC#PQ     DC    CL2'PQ'        CHARACTER CONSTANT 'PQ'               WEJ 03405\nC#LD     DC    CL3'LD.'       CHARACTER CONSTANT 'LD.'              WEJ 03406*27\nC#SHR    DC    CL3'SHR'       CHARACTER CONSTANT 'SHR'                  03407\nC#NEW    DC    CL3'NEW'       CHARACTER CONSTANT 'NEW'                  03408\nC#MOD    DC    CL3'MOD'       CHARACTER CONSTANT 'MOD'                  03409\nC#BLP    DC    CL3'BLP'       CHARACTER CONSTANT 'BLP'                  03410\nC#FCC    DC    CL3'FCC'       CHARACTER CONSTANT 'FCC'              WEJ 03411\nC#FCH    DC    CL3'FCH'       CHARACTER CONSTANT 'FCH'              WEJ 03412\nC#HOLD   DC    CL4'HOLD'      CHARACTER CONSTANT 'HOLD'                 03413\nC#KEEP   DC    CL4'KEEP'      CHARACTER CONSTANT 'KEEP'                 03414\nC#PASS   DC    CL4'PASS'      CHARACTER CONSTANT 'PASS'                 03415\nC#1440   DC    CL4'1440'      CHARACTER CONSTANT '1440'             WEJ 03416\nC#SYS1   DC    CL5'SYS1.'     SYS1. PREFIX CONSTANT                 WEJ 03417\nC#SYS2   DC    CL5'SYS2.'     SYS2. PREFIX CONSTANT                 WEJ 03418\nC#CATLG  DC    CL5'CATLG'     CHARACTER CONSTANT 'CATLG'                03419\nC#CLASS  DC    CL5'CLASS'     CHARACTER CONSTANT 'CLASS'                03420\nC#FORMS  DC    CL5'FORMS'     CHARACTER CONSTANT 'FORMS'                03421\nC#SHARE  DC    CL5'SHARE'     CHARACTER CONSTANT 'SHARE'                03422\nC#98000  DC    CL5'98000'     CHARACTER CONSTANT '98000'                03423\nC#DELETE DC    CL6'DELETE'    CHARACTER CONSTANT 'DELETE'               03424\nC#LOCATE DC    CL6'LOCATE'    CHARACTER CONSTANT 'DELETE'               03425\nC#SORTWK DC    CL6'SORTWK'    CHARACTER CONSTANT 'SORTWK'               03426*15\nC#OUTPUT DC    CL6'OUTPUT'    CHARACTER CONSTANT 'OUTPUT'               03427\nC#SYS106 DC    CL6'SYS106'    CHARACTER CONSTANT 'SYS106'               03428\nC#UNCAT  DC    CL7'UNCATLG'   CHARACTER CONSTANT 'UNCATLG'              03429\nNULLFILE DC    CL8'NULLFILE'  CHARACTER CONSTANT NULLFILE               03430\nC#JOBLIB DC    CL8'JOBLIB'    CHARACTER CONSTANT 'JOBLIB'               03431\nC#STEPLI DC    CL8'STEPLIB'   CHARACTER CONSTANT 'STEPLIB'              03432\nC#JOBCAT DC    CL8'JOBCAT'    CHARACTER CONSTANT 'JOBCAT'               03433\nC#STEPCA DC    CL8'STEPCAT'   CHARACTER CONSTANT 'STEPCAT'              03434\nC#$JLOG  DC    CL8'$JES2LOG'  CHARACTER CONSTANT '$JES2LOG'             03435\nC#$JCL   DC    CL8'$JCLIMG'   CHARACTER CONSTANT '$JCLIMG'              03436\nC#$SYSM  DC    CL8'$SYSMSGS'  CHARACTER CONSTANT '$SYSMSGS'         WEJ 03437\nC#JLCICS DC    CL8'JLCICSP+'  CHARACTER CONSTANT 'JLCICSP+'         WEJ 03438*37\nC#JLCICT DC    CL8'JLCICST+'  CHARACTER CONSTANT 'JLCICST+'         WEJ 03439*37\nC#UCC7   DC    CL8'UCC7   +'  CHARACTER CONSTANT 'UCC7   +'         WEJ 03440*36\nC#ADMMSG DC    CL8'ADMINMSG'  CHARACTER CONSTANT 'ADMINMSG'         WEJ 03441\nC#NOFORM DS    0CL(L'C#NOFML+L'C#NOFMID)                                03442\nC#NOFML  DC    AL1(0)                                                   03443\nC#NOFMID DC    CL8' '                                                   03444\nC#FCBKYJ DS    0CL(L'C#FCBJDK+L'C#FCBJDN+L'C#FCBJDL+L'C#FCB)            03445\nC#FCBJDK DC    AL1(JDTKWDK)                                             03446\nC#FCBJDN DC    AL1(2)                                                   03447\nC#FCBJDL DC    AL1(L'C#FCB)                                             03448\nC#FCB    DC    C'FCB'         CHARACTER CONSTANT 'FCB'                  03449\nC#UNITC  DS    0CL(L'C#UNITK+L'C#UNITPM)                            WEJ 03450**8\nC#UNITK  DC    AL1(UNITK)                                               03451**8\nC#UNITPM DC    AL1(2)                                                   03452**8\nC#UNITCC DS    0CL(L'C#UNITCL+L'C#UNITCT+L'C#UNITND)                    03453*10\nC#UNITCL DC    AL1(1)                                                   03454**8\nC#UNITCT DC    C'0'                                                     03455*29\nC#UNITND DC    AL1(ENDK)                                                03456*10\n         SPACE                                                          03457\n*              PGM NAME THAT ADD JES2 RESOURCES                         03458\n*GMCICS  DC    C'DFHSIP'      CICS PGMNAME                              03459\n*GM7074  DC    C'IIOEM74'     7074 PGMNAME                              03460\n*GM1401  DC    C'IIQE14'      1401 PGMNAME                              03461\n*GMXMIT  DC    C'BSCXMIT1'    XMISSION PGMNAME                          03462\n         EJECT                                                          03463\nHEADER1  DC    C' STMT NO. MESSAGE'                                     03464**8\nPREFIX   DS    0CL11          NORMAL MESSAGE PREFIX                     03465\nEDMASK   DC    X'402020202020' EDIT MASK FOR MESSAGES                   03466**8\n         DC    CL5' '                                                   03467**5\nESTAE    ESTAE STAEXIT,CT,XCTL=NO,PURGE=NONE,ASYNCH=NO,RECORD=YES,     X03468\n               TERM=NO,MF=L                                             03469\n         EJECT                                                          03470\nMSG0CON  DS    0CL78                                                    03471*13\n         DC    AL1(L'MSG0-1)                                        WEJ 03472*10\nMSG0     DC    C'J2U660I XXXXXXXX XXXXXXXX TAPES= XXXXX       JOB CARD *03473**8\n               TIME = XXXXXX SECONDS'                               WEJ 03474**8\nMSG1CON  DS    0CL23                                                    03475*13\n         DC    AL1(L'MSG1-1)                                        WEJ 03476*10\nMSG1     DC    C'J2U661I CLASS SET TO X'                                03477*13\nPRTYTBL  DS    0F                                                       03478\nPRTYENT  DS    0CL(L'PRTYTIME+L'PRTYPRIO)                               03479\nPRTYTIME DC    FL4'9'                                                   03480\nPRTYPRIO DC    X'70'                                                    03481\n         DC    FL4'19'                                                  03482\n         DC    X'60'                                                    03483\n         DC    FL4'29'                                                  03484\n         DC    X'50'                                                    03485\n         DC    FL4'59'                                                  03486\n         DC    X'40'                                                    03487\n         DC    FL4'119'                                                 03488\n         DC    X'30'                                                    03489\n         DC    FL4'239'                                                 03490\n         DC    X'20'                                                    03491\n         DC    FL4'479'                                                 03492\n         DC    X'10'                                                    03493\n         DC    XL4'FFFFFFFF'    HIGH VALUE IS USED FOR COMPARE LOGICAL  03494\n         DC    X'00'                                                    03495\nMESSAGES DS    0CL90          MESSAGE TABLE                             03496\nM1       DC    AL1(L'M1C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE      03497\nM1C      DC    C'J2U601F LENGTH OF A PARAMETER EXCEEDS 8 CHARACTERS'    03498\nM2       DC    AL1(L'M2C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE      03499\nM2C      DC    C'J2U602F JOBNAME, ACCOUNTING INFORMATION, OR PROGRAMMERX03500\n                NAME MISSING ON THE JOB CARD'                           03501\nM3       DC    AL1(L'M3C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE      03502\nM3C      DC    C'J2U603F LENGTH OF JOBNAME EXCEEDS MAXIMUM OF 8 CHARACTX03503\n               ERS'                                '                    03504\nM4       DC    AL1(L'M4C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE      03505\nM4C      DC    C'J2U604E INVALID LENGTH OF THE ACCOUNTING FIELD'        03506\nM5       DC    AL1(L'M5C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE      03507\nM5C      DC    C'J2U605F LENGTH OF PROGRAMMER NAME FIELD ON THE JOB CARX03508\n               D EXCEEDS MAXIMUM OF 20 CHARACTERS'                      03509*16\nM6       DC    AL1(L'M6C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE      03510\nM6C      DC    C'J2U606E UNAUTHORIZED USE OF THE PERFORM KEYWORD ON THEX03511\n                JOB CARD'  OPEN MESSAGE, NOT USED                       03512\nM7       DC    AL1(L'M7C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE      03513\nM7C      DC    C'J2U607I UNAUTHORIZED USE OF THE ADDRSPC KEYWORD ON THEX03514\n                JOB CARD'                                               03515\nM8       DC    AL1(L'M8C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE      03516\nM8C      DC    C'J2U608F TIME VALUE ON THE JOB CARD IS NOT NUMERIC'     03517\nM9       DC    AL1(L'M9C-1)   LENGTH OF FOLLOWING MESSAGE FOR MOVE      03518\nM9C      DC    C'J2U609I UNAUTHORIZED USE OF TIME=1440 ON THE JOB CARD' 03519\nM10      DC    AL1(L'M10C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03520\nM10C     DC    C'J2U610E UNAUTHORIZED USE OF THE REGION KEYWORD ON THE X03521\n               JOB CARD'                           '                    03522\nM11      DC    AL1(L'M11C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03523\nM11C     DC    C'J2U611F LENGTH OF THE STEP NAME ON THE EXECUTE CARD EXX03524\n               CEEDS MAXIMUM OF 8 CHARACTERS'                           03525\nM12      DC    AL1(L'M12C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03526\nM12C     DC    C'J2U612F LENGTH OF THE PROGRAM NAME ON THE EXECUTE CARDX03527\n                EXCEEDS MAXIMUM OF 8 CHARACTERS'                        03528\nM13      DC    AL1(L'M13C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03529\nM13C     DC    C'J2U613F INVALID FORMAT FOR THE REGION PARAMETER ON THEX03530\n                EXECUTE CARD'                                           03531\nM14      DC    AL1(L'M14C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03532\nM14C     DC    C'J2U614F REGION SIZE ON THE EXECUTE CARD IS NOT NUMERICX03533\n               '                                                        03534\nM15      DC    AL1(L'M15C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03535\nM15C     DC    C'J2U615F INVALID FORMAT FOR THE TIME PARAMETER ON THE EX03536\n               XECUTE CARD'                        '                    03537\nM16      DC    AL1(L'M16C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03538\nM16C     DC    C'J2U616I UNAUTHORIZED USE OF TIME=1440 ON THE EXECUTE CX03539\n               ARD'                                                     03540\nM17      DC    AL1(L'M17C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03541\nM17C     DC    C'J2U617E  USE OF THE PERFORM KEYWORD ON THE EXECUTE CARX03542\n                NOT ALLOWED, SECTION 3, PAGE 7'                         03543\nM18      DC    AL1(L'M18C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03544\nM18C     DC    C'J2U618E USE OF THE ADDRSPC KEYWORD ON THE EXECUTE CARDX03545\n                NOT ALLOWED, SECTION 3, PAGE 7'                         03546\nM19      DC    AL1(L'M19C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03547\nM19C     DC    C'J2U619E  USE OF THE DPRTY KEYWORD ON THE EXECUTE CARD X03548\n               NOT ALLOWED, SECTION  3, PAGE 7'                         03549\nM20      DC    AL1(L'M20C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03550\nM20C     DC    C'J2U620F LENGTH OF THE DDNAME ON THE DD CARD EXCEEDS THX03551\n               E MAXIMUM OF 8 CHARACTERS'                               03552\nM21      DC    AL1(L'M21C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03553\nM21C     DC    C'J2U621F INVALID FORMAT FOR THE DSNAME PARAMETER ON THEX03554\n                DD CARD'                                                03555\nM22      DC    AL1(L'M22C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03556\nM22C     DC    C'J2U622F LENGTH OF THE DSNAME ON THE DD CARD EXCEEDS THX03557\n               E MAXIMUM OF 44 CHARACTERS'                              03558\nM23      DC    AL1(L'M23C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03559\nM23C     DC    C'J2U623F INVALID FORMAT FOR THE DISP PARAMETER ON THE DX03560\n               D CARD'                                                  03561\nM24      DC    AL1(L'M24C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03562\nM24C     DC    C'J2U624F INVALID FORMAT FOR THE UNIT PARAMETER ON THE DX03563\n               D CARD'                                                  03564\nM25      DC    AL1(L'M25C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03565\nM25C     DC    C'J2U625F UNIT COUNT WITHIN THE UNIT PARAMETER ON THE DDX03566\n                CARD IS NOT NUMERIC'                                    03567\nM26      DC    AL1(L'M26C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03568\nM26C     DC    C'J2U626F INVALID FORMAT FOR THE VOLUME PARAMETER ON THEX03569\n                DD CARD'                                                03570\nM27      DC    AL1(L'M27C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03571\nM27C     DC    C'J2U627F VOLUME COUNT WITHIN THE VOLUME PARAMETER ON THX03572\n               E DD CARD IS NOT NUMERIC'                                03573\nM28      DC    AL1(L'M28C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03574\nM28C     DC    C'J2U628F LENGTH OF THE VOLSER PARAMETER(S) ON THE DD CAX03575\n               RD EXCEEDS MAXIMUM OF 6 CHARACTERS' '                    03576\nM29      DC    AL1(L'M29C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03577\nM29C     DC    C'J2U629E UNAUTHORIZED DISPOSITION SPECIFIED FOR A SYSTEX03578\n               M DATA SET'                                              03579\nM30      DC    AL1(L'M30C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03580\nM30C     DC    C'J2U630E INTERNAL ERROR - LENGTH OF THE INTERNAL TEXT  X03581\n               OF AN EXECUTE CARD EXCEEDS 512 CHARS'                    03582\nM31      DC    AL1(L'M31C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03583\nM31C     DC    C'J2U631F LENGTH OF THE PROC STEP NAME ON THE EXECUTE CAX03584\n               RD EXCEEDS MAXIMUM OF 8 CHARACTERS'                      03585\nM32      DC    AL1(L'M32C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03586\nM32C     DC    C'J2U632F INVALID FORMAT FOR THE REFERBACK SUBPARAMETER *03587\n                ON THE DD CARD'                                         03588\nM33      DC    AL1(L'M33C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03589\nM33C     DC    C'J2U633E INVALID DISPOSITION ON A JOBLIB, STEPLIB, JOBCX03590\n               CAT, OR STEPCAT DD CARD'                                 03591\nM34      DC    AL1(L'M34C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03592\nM34C     DC    C'J2U634F THE LENGTH OF THE DSNAME ON A VOLUME REFERBACKX03593\n                EXCEEDS A MAXIMUM OF 44 CHARACTERS'                     03594\nM35      DC    AL1(L'M35C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03595\nM35C     DC    C'J2U635E THE REQUIRED ACCOUNTING FIELD ON THE JOB CARD X03596\n               WAS NOT SPECIFIED'                                       03597\nM36      DC    AL1(L'M36C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03598\nM36C     DC    C'J2U636E LENGTH OF PROC-NAME IN EXECUTE CARD EXCEEDS THX03599\n               MAXIMUM OF 8 BYTES'                                      03600\nM37      DC    AL1(L'M37C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03601\nM37C     DC    C'J2U637E LENGTH OF PROC-NAME IN IN-STREAM PROC CARD EXCX03602\n               EEDS THE MAXIMUM OF 8 BYTES'                             03603\nM38      DC    AL1(L'M38C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03604\nM38C     DC    C'J2U638E LENGTH OF FORM-ID IN SYSOUT= GREATER THAN 8 CHX03605\n                ARACTERS'                                               03606\nM39      DC    AL1(L'M39C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03607\nM39C     DC    C'J2U639E LENGTH OF FORMS PARAMETER ON OUTPUT CARD GREATX03608\n                ER THAN 8 CHARACTERS'                                   03609\nM40      DC    AL1(L'M40C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03610\nM40C     DC    C'J2U640E FIRST 2 DIGITS OF ACCOUNT FIELD ARE NOT ALPHABX03611\n               ETIC, SECTION 3, PAGE 4'                                 03612\nM41      DC    AL1(L'M41C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03613\nM41C     DC    C'J2U641E POSITIONS 3 - 7 OF THE FIRST ACCOUNT FIELD AREX03614\n                NOT NUMERIC, SECTION 3, PAGE 4'                         03615\nM42      DC    AL1(L'M42C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03616\nM42C     DC    C'J2U642I JOB WILL ISSUE LOCATE'  OPEN MESSAGE           03617\nM43      DC    AL1(L'M43C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03618\nM43C     DC    C'J2U643I UNAUTHORIZED USE OF JOBCAT OR STEPCAT DD STATEX03619\n               MENT'                                                    03620\nM44      DC    AL1(L'M44C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03621\nM44C     DC    C'J2U644I UNAUTHORIZED USE OF BYPASS LABEL PROCESSING (B*03622\n               LP)'                                                     03623\nM45      DC    AL1(L'M45C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03624\nM45C     DC    C'J2U645I UNAUTHORIZED ATTEMPT TO BYPASS TMS WITH LABEL=X03625\n               EXPDT=98000'                         '                   03626\nM46      DC    AL1(L'M46C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03627\nM46C     DC    C'J2U646I JOB REQUIREMENTS EXCEED THOSE ALLOWED FOR THE X03628\n               JOB CLASS REQUESTED'                                     03629\nM47      DC    AL1(L'M47C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03630\nM47C     DC    C'J2U647I MORE THAN 3 TAPES IN ANY ONE STEP IN A TEST JO*03631\n               B'                                                       03632\nM48      DC    AL1(L'M48C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03633\nM48C     DC    C'J2U648I OPEN MESSAGE'                                  03634\nM49      DC    AL1(L'M49C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03635\nM49C     DC    C'J2U649F QNAME IS GREATER THAN 8 CHARACTERS'            03636\nM50      DC    AL1(L'M50C-1)  LENGTH OF FOLLOWING MESSAGE FOR MOVE      03637\nM50C     DC    C'J2U650E QNAME=ADMINMSG IN SAME JOB AS EITHER QNAME=PH X03638\n               OR QNAME=PQ, JOB NOT RUN'                            WEJ 03639\n*          DATA SET J2XIT06CMA AT LEVEL 003 AS OF 09/05/88              03640\nP@1      EQU   M1-MESSAGES                                              03641\nP@2      EQU   M2-MESSAGES                                              03642\nP@3      EQU   M3-MESSAGES                                              03643\nP@4      EQU   M4-MESSAGES                                              03644\nP@5      EQU   M5-MESSAGES                                              03645\nP@6      EQU   M6-MESSAGES                                              03646\nP@7      EQU   M7-MESSAGES                                              03647\nP@8      EQU   M8-MESSAGES                                              03648\nP@9      EQU   M9-MESSAGES                                              03649\nP@10     EQU   M10-MESSAGES                                             03650\nP@11     EQU   M11-MESSAGES                                             03651\nP@12     EQU   M12-MESSAGES                                             03652\nP@13     EQU   M13-MESSAGES                                             03653\nP@14     EQU   M14-MESSAGES                                             03654\nP@15     EQU   M15-MESSAGES                                             03655\nP@16     EQU   M16-MESSAGES                                             03656\nP@17     EQU   M17-MESSAGES                                             03657\nP@18     EQU   M18-MESSAGES                                             03658\nP@19     EQU   M19-MESSAGES                                             03659\nP@20     EQU   M20-MESSAGES                                             03660\nP@21     EQU   M21-MESSAGES                                             03661\nP@22     EQU   M22-MESSAGES                                             03662\nP@23     EQU   M23-MESSAGES                                             03663\nP@24     EQU   M24-MESSAGES                                             03664\nP@25     EQU   M25-MESSAGES                                             03665\nP@26     EQU   M26-MESSAGES                                             03666\nP@27     EQU   M27-MESSAGES                                             03667\nP@28     EQU   M28-MESSAGES                                             03668\nP@29     EQU   M29-MESSAGES                                             03669\nP@30     EQU   M30-MESSAGES                                             03670\nP@31     EQU   M31-MESSAGES                                             03671\nP@32     EQU   M32-MESSAGES                                             03672\nP@33     EQU   M33-MESSAGES                                             03673\nP@34     EQU   M34-MESSAGES                                             03674\nP@35     EQU   M35-MESSAGES                                             03675\nP@36     EQU   M36-MESSAGES                                             03676\nP@37     EQU   M37-MESSAGES                                             03677\nP@38     EQU   M38-MESSAGES                                             03678\nP@39     EQU   M39-MESSAGES                                             03679\nP@40     EQU   M40-MESSAGES                                             03680\nP@41     EQU   M41-MESSAGES                                             03681\nP@42     EQU   M42-MESSAGES                                             03682\nP@43     EQU   M43-MESSAGES                                             03683\nP@44     EQU   M44-MESSAGES                                             03684\nP@45     EQU   M45-MESSAGES                                             03685\nP@46     EQU   M46-MESSAGES                                             03686\nP@47     EQU   M47-MESSAGES                                             03687\nP@48     EQU   M48-MESSAGES                                             03688\nP@49     EQU   M49-MESSAGES                                             03689\nP@50     EQU   M50-MESSAGES                                             03690\nALPHATBL DS    0CL256                                               WEJ 03691**5\n         DC    X'FF0102030405060708090A0B0C0D0E0F'    X 00-0F       WEJ 03692**5\n         DC    X'101112131415161718191A1B1C1D1E1F'    X 10-1F       WEJ 03693**5\n         DC    X'202122232425262728292A2B2C2D2E2F'    X 20-2F       WEJ 03694**5\n         DC    X'303132333435363738393A3B3C3D3E3F'    X 30-3F       WEJ 03695**5\n         DC    X'404142434445464748494A4B4C4D4E4F'    X 40-4F       WEJ 03696**5\n         DC    X'505152535455565758595A5B5C5D5E5F'    X 50-5F       WEJ 03697**5\n         DC    X'606162636465666768696A6B6C6D6E6F'    X 60-6F       WEJ 03698**5\n         DC    X'707172737475767778797A7B7C7D7E7F'    X 70-7F       WEJ 03699**5\n         DC    X'808182838485868788898A8B8C8D8E8F'    X 80-8F       WEJ 03700**5\n         DC    X'909192939495969798999A9B9C9D9E9F'    X 90-9F       WEJ 03701**5\n         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'    X A0-AF       WEJ 03702**5\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'    X B0-BF       WEJ 03703**5\n         DC    X'C0000000000000000000000000000000'    X C0-CF       WEJ 03704**5\n         DC    X'D0000000000000000000000000000000'    X D0-DF       WEJ 03705**5\n         DC    X'E0E10000000000000000000000000000'    X E0-EF       WEJ 03706**5\n         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'    X F0-FF       WEJ 03707**5\nNUMERTBL DS    0CL256                                               WEJ 03708**5\n         DC    X'FF0102030405060708090A0B0C0D0E0F'    X 00-0F       WEJ 03709**5\n         DC    X'101112131415161718191A1B1C1D1E1F'    X 10-1F       WEJ 03710**5\n         DC    X'202122232425262728292A2B2C2D2E2F'    X 20-2F       WEJ 03711**5\n         DC    X'303132333435363738393A3B3C3D3E3F'    X 30-3F       WEJ 03712**5\n         DC    X'404142434445464748494A4B4C4D4E4F'    X 40-4F       WEJ 03713**5\n         DC    X'505152535455565758595A5B5C5D5E5F'    X 50-5F       WEJ 03714**5\n         DC    X'606162636465666768696A6B6C6D6E6F'    X 60-6F       WEJ 03715**5\n         DC    X'707172737475767778797A7B7C7D7E7F'    X 70-7F       WEJ 03716**5\n         DC    X'808182838485868788898A8B8C8D8E8F'    X 80-8F       WEJ 03717**5\n         DC    X'909192939495969798999A9B9C9D9E9F'    X 90-9F       WEJ 03718**5\n         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'    X A0-AF       WEJ 03719**5\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'    X B0-BF       WEJ 03720**5\n         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'    X C0-CF       WEJ 03721**5\n         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'    X D0-DF       WEJ 03722**5\n         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'    X E0-EF       WEJ 03723**5\n         DC    X'00000000000000000000FAFBFCFDFEFF'    X F0-FF       WEJ 03724**5\n         EJECT                                                          03725\n*********************************************************************** 03726**7\n*                                                                     * 03727**7\n*                          S T A E X I T                              * 03728**7\n*                                                                     * 03729**7\n*        THIS ROUTINE GETS CONTROL FOR EVERY ABEND OCCURRING IN       * 03730**7\n*        THE EXIT.  THIS ROUTINE WILL ISSUE AN APPROPRIATE MESSAGE    * 03731**7\n*        TO THE OPERATOR AND TAKE A CONSOLE DUMP FOR PROBLEM          * 03732**7\n*        RESOLUTION.  RETRY WILL BE ATTEMPTED FOR ALL ABENDS          * 03733**7\n*        WHICH WILL JUST SET THE JOB CLASS TO \"A\" AND TERMINATE.      * 03734**7\n*        NOTE THAT THERE IS A RECURSION CHECK TO PROTECT FROM         * 03735**7\n*        ABEND LOOPS.                                                 * 03736**7\n*                                                                     * 03737**7\n*********************************************************************** 03738**7\n         PUSH  USING                                                    03739**7\n         DROP  R9,R10,R12                                               03740**7\nSTAEXIT  LR    R8,R15         SET NEW BASE ADDR                         03741**7\n         USING STAEXIT,R8     SET ADDRESSABILITY                        03742**7\n         LA    R15,12         SET R15 TO 12                         WEJ 03743**7\n         CR    R0,R15         SEE IF CORE AVAILABLE                     03744**7\n         BE    STAENO         NO, BRANCH                                03745**7\n         SAVE  (14,12)        SAVE REGISTERS                            03746**7\n         SPACE 1                                                        03747**7\n         L     R4,0(R1)       LOAD PARAMETER ADDRESS                    03748*19\n         L     R11,STAEREGS+64-WORKAREA(R4) RESTORE HCT ADDRESS         03749*19\n         LA    R3,STAESAVE-WORKAREA(R4) LOAD ADDRESS OF NEW SAVE        03750*19\n         ST    R3,8(,R13)     SAVE NEW SAVE ADDRESS IN OLD              03751**7\n         ST    R13,4(,R3)     SAVE OLD SAVE ADDRESS IN NEW              03752**7\n         LR    R13,R3         SET NEW SAVE ADDRESS                      03753**7\n         LR    R3,R1          SAVE SDR2 ADDRESS                         03754**7\n         LA    R0,L'WTO4      LOAD LENGTH OF MESSAGE                    03755**7\n         LA    R1,WTOLIST-WORKAREA(R4) LOAD ADDRESS OF WTO LIST FORM    03756*19\n         MVC   0(LWTO4,R1),WTO4 SET WTO LIST FORM                       03757**7\n         AIF   ('&TSO' NE 'YES').TSO7                                   03758**7\n         WTO   MF=(E,(R1))                                              03759**7\n         AGO   .TSO8                                                    03760**7\n.TSO7    ANOP                                                           03761**7\n         $$WTO (R1)           WRITE ERROR MESSAGE                       03762**7\n.TSO8    ANOP                                                           03763**7\n         CLI   RECURS-WORKAREA(R4),X'FF'   SEE IF RECURSIVE ABEND       03764*19\n         BE    STAENO         YES, TELL ABEND NOT TO RETRY              03765**7\n         AIF   ('&SDUMP' EQ 'YES').SDUMP1                               03766**7\n         B     STAE1          BYPASS SDUMP SWITCH                       03767**7\n.SDUMP1  ANOP                                                           03768**7\n         SDUMP HDR='JES2 EXIT6 CONVERTER TIME ESTAE'                    03769**7\nSTAE1    DS    0H                                                       03770**7\n         L     R13,4(,R13)    RESTORE ORIGINAL REG 13                   03771**7\n         LR    R1,R3          RESTORE SDWA ADDRESS                      03772**7\n         L     R0,=A(STAERTRY)  LOAD RETRY ADDRESS                      03773*10\n         SETRP REGS=(14,12),DUMP=IGNORE,RC=4,FRESDWA=YES,              X03774**7\n               RETADDR=(0)                                              03775*10\nSTAENO   L     R0,=A(STAERTRY)  LOAD RETRY ADDRESS                      03776**7\n         LA    R15,4          SET RETURN CODE TO RETRY                  03777**7\n         BR    R14            GO RETRY                                  03778**7\n         SPACE 2                                                        03779**7\n         $MID  904                                                      03780**7\nWTO4     WTO   '&MID.JES EXIT6 ABEND',                                 X03781**7\n               ROUTCDE=(2),DESC=(4),MF=L                                03782**7\nLWTO4    EQU   *-WTO4                                                   03783**7\n         LTORG                                                      WEJ 03784**7\n         SPACE 1                                                        03785**7\n         DROP  R8             DROP LOCAL ADDRESSABILITY                 03786**7\n         SPACE 2                                                        03787**7\n         POP   USING                                                    03788**7\nWORKAREA DSECT                                                          03789\nSAVEAREA DS    18F            NEW SAVE AREA                             03790\nSAVEREGS DS    18F            ROUTINE REGISTER SAVE AREA                03791\nSTAEREGS DS    18F            REGISTERS FOR ESTAE RECOVERY              03792\nSTAESAVE DS    18F            SAVE AREA FOR ESTAE ROUTINE               03793\nPUTSAVE  DS    19F            PUT SAVE AREA                             03794\nJCTADDR  DS    A              ADDRESS OF JCT                            03795\nJDTRTN   DS    A              RETURN ADDRESS FROM JDTGET                03796\nTEXTSTAR DS    F              START ADDRESS OF INTERNAL TEXT        WEJ 03797\nSAVER13  DS    F              SAVE AREA FOR REG 13 ON PUT RPL           03798\nSAVER15  DS    F         TEMP SAVE AREA FOR REG 15 ON TEST              03799\nSUBWORK  DS    F              ADDR OF TEXT PROCESSER WORK AREA          03800\nSUBTABLE DS    F              ADDRESS OF AREA FOR JCL STMT TABLE        03801\nWTOSAVE  DS    4F             SAVE AREA FOR REG 14 - 1 BEFORE WTO'S     03802\nDOUBLE   DS    D              DOUBLE WORD FOR PACK & CVB                03803\nFIRSTENT DS    F              SAVE AREA FOR FIRST SAVE TABLE ENTRY      03804\nLASTENT  DS    F              SAVE AREA FOR LAST SAVE TABLE ENTRY       03805\nLASTEXEC DS    F              ADDR OF LAST EXEC TABLE ENTRY             03806\nPROCTEXT DS    F              ADDR OF SAVED KEYWORD TEXT FROM PROC STMT 03807\nRETCODE  DS    F              SAVE AREA FOR RETURN CODE                 03808\nTAPECNT  DS    H              COUNT OF TAPE UNITS USED IN STEP          03809\nPRIVCNT  DS    H              COUNT OF PRIV UNITS USED IN STEP          03810\nENTCOUNT DS    H              NUMBER OF ACTIVE ENTRIES IN TABLE         03811\nUNITCOUN DS    XL1            COUNT OF UNITS FOR THIS DD                03812\n*        THIS MAY ALSO BE 'P' FOR PARALLEL MOUNTING                     03813\nEOFIND   DS    C              END OF FILE INDICATORS                    03814\nENDSTEP  EQU   1              LAST STATEMENT OF STEP IND                03815\nLASTBLK  EQU   2              BLOCK WITH LAST EXEC STMT PROCESSED       03816\nSAVETCNT DS    XL1            SAVE AREA FOR NO. OF TIME SUB-PARMS   WEJ 03817\nSAVEPROC DS    CL8            STEPNAME WHICH CALLS PROC                 03818\nSAVEFORM DS    0CL9           SYSOUT FORM-ID LENGTH AND FORM-ID         03819\nSAVEFMLN DS    AL1            SYSOUT FORM-ID LENGTH (IF ANY)            03820\nSAVEFMID DS    CL8            SYSOUT FORM-ID (IF ANY)                   03821\nFCBFLAG  DS    CL1            Y - FCB ON DD OR OUTPUT CARD              03822\nSAVEQNM  DS    CL8            QNAME FROM DD CARD                        03823\nPROCIND  DS    C              PROCESS PROCEDURE TEXT INDICATOR          03824\n*        X'01' INDICATES NEED TO PROCESS PROCEDURE OVERRIDE TEXT        03825\nJOBIND   DS    C              JOB RELATED INDICATORS                    03826\nJOBSTC   EQU   1              JOB IS A STARTED TASK                     03827\nJOBTSO   EQU   2              JOB IS A TSO LOGON                        03828\nJOBCOMM  EQU   8              JOB IS FOR COMMUNICATIONS                 03829\nJOBTECH  EQU   16             JOB IS FOR TECH SUPPORT                   03830\nJOBPROD  EQU   32             JOB IS A PRODUCTION JOB                   03831\nJOBTEST  EQU   64             JOB IS A TEST JOB                         03832\nJOBOPER  EQU   128            JOB IS A OPERATIONS JOB                   03833\nJOBIND2  DS    C              JOB RELATED INDICATORS                    03834\nHELD     EQU   1              JOB HAD TYPRUN=HOLD                       03835\nJOBFAIL  EQU   2              JOB FAILED EXIT TESTING                   03836\nJOBLIB   EQU   4              JOB HAD A JOBLIB STMT                     03837\nDISPIND  DS    C              DD ENTRY DISPOSITION                      03838\nNEW      EQU   1              DISP=NEW                                  03839\nOLD      EQU   2              DISP=OLD                                  03840\nSHR      EQU   4              DISP=SHR                                  03841\nMOD      EQU   8              DISP=MOD                                  03842\nCATLG    EQU   16             STEP COMPLETION DISP=CATLG                03843\nPASS     EQU   32             STEP COMPLETION DISP=PASS                 03844\nKEEP     EQU   64             STEP COMPLETION DISP=KEEP                 03845\nDELETE   EQU   128            STEP COMPLETION DISP=DELETE               03846\nDISPIND1 DS    C              DD ENTRY DISPOSITION                      03847\nUNCATLG  EQU   1              STEP COMPLETION DISP=UNCATLG              03848\nUNITIND  DS    C              DD ENTRY UNIT TYPE                        03849\nTAPE     EQU   2              UNIT USED WAS A TAPE                      03850\nPRIV     EQU   4              UNIT USED WAS A PRIV DISK PACK            03851\nVIO      EQU   8              UNIT WAS VIO                              03852\nAFF      EQU   16             UNIT WAS DETERMINED BY AFF                03853\nUNITGDG  EQU   32             UNIT TYPE(S) FROM GDG PROCESSING          03854\nUNITFND  EQU   128            UNIT TYPE HAS BEEN FOUND                  03855\nUNITIND2 DS    X                                                        03856*12\nUNITPRC  EQU   1              UNIT= HAS BEEN FOUND                  WEJ 03857*12\nREFFLAG  DS    XL1            REF FLAG SET FOR UNIT AFFINITY            03858\nJACCT    DS    CL14           ACCOUNT NUMBER (1ST ACCT INFO FIELD)      03859\nTENTRY   DS    0CL53          TEMPORARY DD TEXT TABLE ENTRY             03860\nTDDN     DS    CL8            TEMP DDNAME                               03861\nTTYPE    DS    C              TEMP UNIT TYPE                            03862\nTDSN     DS    CL44           TEMP DSN (FULL)                           03863\nTVOLSER  DS    CL6            TEMP 1ST VOLSER OF DATA SET               03864\nLDSN     DS    CL44           DSNAME USED BY LOCATE                     03865\nSVC26DSN DS    0CL44          DSNAME USED BY SVC26                      03866\nSVC26DSL DS    CL1            LENGTH OF DSN                             03867\nSVC26DS  DS    CL43           ACTUAL DSNAME INDEX                       03868\nREFERBCK DS    0CL25          REFERBACK WORK AREA                       03869\nREFJSTEP DS    CL8            REFERBACK JOBSTEP NAME                    03870\nREFPSTEP DS    CL8            REFERBACK PROCSTEP NAME                   03871\nREFDDN   DS    CL8            REFERBACK DDNAME                          03872\nREFUNIT  DS    C              REFERBACK PREV UNIT TYPE                  03873\nREFDSN   DS    CL44           REFERBACK DSN                             03874\nREFVOL   DS    CL6            REFERBACK PREF DD 1ST VOLSER              03875\nVOLCNT   DS    XL1            VOLUME COUNT FROM UNIT=                   03876\nSERCNT   DS    XL1            SERIAL COUNT FROM VOL=SER=                03877\nADDCOUNT DS    XL1            WILL CONTAIN # OF UNITS FOR DD            03878\nRECURS   DS    CL1            RECURSIVE ABEND INDICATOR                 03879\nCARDNO   DS    F              CARD NUMBER FOR MSG ROUTINE               03880\nMSGCOUNT DS    F              MESSAGE COUNT FOR MSG ROUTINE             03881\nOUTRPL   DS    F              ADDR OF OUTPUT RPL                        03882\nOUTACB   DS    F              ADDR OF JOB MESSAGE DATASET ACB           03883\nPARMADDR DS    F              ADDR OF START OF CURRENT TEXT ENTRY       03884\nMAXTAPE  DS    H              MAX TAPES PER STEP USED                   03885\nMAXPRIV  DS    H              MAX PRIVS PER STEP USED                   03886\nMAXTOTAL DS    H              MAX TOTAL DEVICES PER STEP USED           03887\nMAXREGN  DS    H              MAX STEP REGION SIZE                      03888\nMAXTIME  DS    F              MAXIMUM CPU TIME                          03889\n         SPACE                                                          03890\nRESOURCE DS    XL2            JES2 RESOURCES                            03891\n*              RESOURCE BYTE ZERO                                       03892\nTESTING  EQU   128                     JES2 'TESTING' RESOURCE          03893\nPROD     EQU   64                      JES2 'PROD'  RESOURCE            03894\nTAPES    EQU   32                      JES2 'TAPES' RESOURCE            03895\nUSERPACK EQU   8                       JES2 'USERPACK' RESOURCE         03896\nP1401    EQU   2                       JES2 '1401' RESOURCE             03897\n*              RESOURCE - BYTE ONE(1)                                   03898\nPCICS    EQU   128                     JES2 'CICS' RESOURCE             03899\nP7074    EQU   64                      JES2 '7074' RESOURCE             03900\nPXMIT    EQU   32                      JES2 'XMIT'/'COMTEN' RESOURCE    03901\nLONGJOB  EQU   8                       JES2 'LONGJOB' RESOURCE          03902\nDEDICATE EQU   4                       JES2 'DEDICATE' RESOURCE         03903\n*                                                                       03904\nCLASSFLD DS    C          JOB CLASS AS DETERMINED FROM TABLE        WEJ 03905\nTCMCLASS DS    C          JOB CLASS FOR TCAM OUTPUT, X'00' IF NONE  WEJ 03906\n         EJECT                                                          03907\nINCLASS  DS    C              CLASS FROM JOB TEXT RECORD                03908\nSMFRTYPE DS    C              SMF RECORD LOG TYPE                       03909\nCURSTEP  DS    CL8            CURRENT STEP NAME                         03910\nDEFDPRTY DS    XL2            MAX DPRTY VALUE ALLOWED AFTER AUTH CHECK  03911\n         SPACE 3                                                        03912\nCAMLST   CAMLST NAME,TDSN,,LOCAREA LOCATE PARAM AREA                    03913\n         DS    0D                                                       03914\nLOCAREA  DS    0CL266         LOCATE CAMLST WORK AREA                   03915\nCAMLCNT  DS    H              VOLUMES IN LIST                           03916\nCAMLUNIT DS    0CL4           UNIT TYPE FOR 1ST VOLUME                  03917\nUCBTYP1  DS    CL1            UCB TYPE BYTE 1                           03918\nUCBTYP2  DS    CL1            UCB TYPE BYTE 2                           03919\nUCBTYP3  DS    CL1            UCB TYPE BYTE 3                           03920\n*        X'80' IN UCBTYP3 INDICATES TAPE DEVICE                         03921\nUCBTYP4  DS    CL1            UCB TYPE BYTE 4                           03922\nCAMVOL   DS    CL6            1ST VOLSER IN DATA SET                    03923\n         DS    CL254          REST OF WORK AREA                         03924\nLASTUCB  DS    F              SAVE AREA FOR LAST UCB ADDR PROCESSED     03925\n         DS    CL1            EDIT FILL CHAR FOR MSG PREFIX             03926\nSTEPMSG  DS    0CL78          STEP RESOURCE MESSAGE                     03927*13\n         DS    X                                                    WEJ 03928*10\nSTEPM    DS    0CL77                                                    03929*13\n         DS    CL8                                        1- 8      WEJ 03930*10\nSTEPMSTP DS    CL8                                        9-16      WEJ 03931*10\n         DS    CL1                                       17-17      WEJ 03932*10\nSTEPMPST DS    CL8                                       18-25      WEJ 03933*10\n         DS    CL7                                       26-32      WEJ 03934*10\nSTEPMTAP DS    CL6                                       33-38      WEJ 03935*10\n         DS    CL23                                      39-61      WEJ 03936*10\nSTEPMSEC DS    CL6                                       62-69      WEJ 03937*10\n         DS    CL8                                       70-77      WEJ 03938*10\nJOBMSG   DS    0CL22          STEP RESOURCE MESSAGE                     03939*13\n         DS    X                                                    WEJ 03940*10\nJOBM     DS    0CL21                                                    03941*13\n         DS    CL21                                                 WEJ 03942**7\nJOBMCLAS DS    CL1                                                  WEJ 03943**7\n* ERRORMSG DS  0CL100         ERROR MESSAGE                             03944**7\n*          DS  CL10           MESSAGE PREFIX                            03945**7\n* ERRORM   DC  CL90' '                                                  03946**7\nMSGPREF  DS    0CL11          ERROR MESSAGE PREFIX                      03947\n         DS    C              EDIT FILL CHARACTER                       03948\nBUFFER   DS    0CL100         JES2 MESSAGE AREA                         03949\n         DS    CL10           REST OF MESSAGE PREFIX                    03950\nMSGTEXT  DS    CL90           TEXT OF ERROR MESSAGE                     03951\nMSGRPL   DS    19F            SKELETON RPL FOR OUTPUT MSG DATA SET      03952\nWTOLIST  DS    CL120          SET WTO LIST FORM                         03953\nPROCTXT  DS    CL512          SAVE AREA FOR PROC CARD TEXT              03954\nCTGPL    DS    XL40           CATALOG MANAGEMENT PARAMETER LIST         03955\n         SPACE 3                                                        03956\nESTAEL   ESTAE STAEXIT,CT,XCTL=NO,PURGE=NONE,ASYNCH=NO,RECORD=YES,     X03957\n               TERM=NO,MF=L                                             03958\nLESTAEL  EQU   *-ESTAEL                                                 03959\nSVC26WRK DS    CL5000         SVC26 WORK AREA                           03960\nGETSIZE  EQU   *-WORKAREA     LENGTH OF WORK AREA                       03961\n         EJECT                                                          03962\nSAVTABLE DSECT                                                          03963\n*********************************************************************** 03964\n*        THIS TABLE HAS 4 ENTRY TYPES                                 * 03965\n*            THE 1ST ENTRY IN THE TABLE WILL BE FOR THE JOB CARD      * 03966\n*            THE 2ND ENTRY IN THE TABLE WILL BE FOR THE 1ST EXEC CARD * 03967\n*            FOLLOWING THE EXEC ENTRY WILL BE ANY JDT ENTRIES FOR     * 03968\n*                THIS STEP.  THE OUTPUT JCL STMT IS A JDT ENTRY.      * 03969\n*            FOLLOWING THE JDT ENTRY WILL BE ANY DD ENTRIES FOR THE   * 03970\n*                STEP WHICH PASS OR CATLG PRIVATE DISK PACKS OR TAPES * 03971\n*            THE EXEC CARD ENTRY AND SUBSEQUENT DD ENTRIES WILL BE    * 03972\n*                REPEATED FOR ALL STEPS OF THE JOB.                   * 03973\n*            THE JDT CARD MAY BE IN ANY ORDER DEPENDING ON JCL.       * 03974\n*********************************************************************** 03975\nENTLEN   EQU   40             LENGTH OF EACH TABLE ENTRY                03976\nENTRYTYP DS    C              TABLE ENTRY TYPE                          03977\nTYPEND   EQU   0              SIGNIFIES END OF TABLE                    03978\nTYPJOB   EQU   1              SIGNIFIES A JOB ENTRY                     03979\nTYPEXEC  EQU   2              SIGNIFIES AN EXEC ENTRY                   03980\nTYPEDD   EQU   4              SIGNIFIES A DD ENTRY                      03981\nTYPEJDT  EQU   8              SIGNIFIES A JDT ENTRY                     03982\n*********************************************************************** 03983\n*                                                                     * 03984\n*                      J O B                                          * 03985\n*                                                                     * 03986\n*********************************************************************** 03987\nJENTRY   DS    0CL39          JOB STATEMENT ENTRY                       03988\nJNAME    DS    CL8            JOB NAME                                  03989\nJPGMRNM  DS    CL9            PROGRAMMER NAME (1ST 9  BYTES ONLY)   WEJ 03990\n* JINDEV DS    CL8    WILL USE JCT INPUT DEVICE                         03991\nJACCTNO  DS    CL7            ACCOUNT NUMBER (1ST ACCT INFO FIELD)  WEJ 03992\nJACCTLEN DS    C              ACCOUNT NUMBER LENGTH                     03993\nJLIBIND  DS    X              JOB HAD REGION                            03994\nJREGIONK EQU   4              REGION SPECIFIED IN 'K'                   03995\nJREGION  DS    H              STEP REGION SIZE                          03996\n         ORG   JENTRY                                                   03997\n*********************************************************************** 03998\n*                                                                     * 03999\n*                     E X E C                                         * 04000\n*                                                                     * 04001\n*********************************************************************** 04002\nEENTRY   DS    0CL39          EXEC STATEMENT ENTRY                      04003\nEJSTEP   DS    CL8            JOB STEP NAME                             04004\nEPSTEP   DS    CL8            PROC STEP NAME                            04005\nEPGMNM   DS    CL8            PGM NAME                                  04006\nELIBIND  DS    C              STEP HAD JOBLIB OR STEPLIB                04007\nESTEPLIB EQU   1              STEPLIB PRESENT                           04008\nEJOBLIB  EQU   2              JOBLIB PRESENT                            04009\nEREGIONK EQU   4              REGION SPECIFIED IN 'K'                   04010\nEREGION  DS    H              STEP REGION SIZE                          04011\nETAPES   DS    H              TAPE UNITS USED IN STEP                   04012\nEPRIVS   DS    H              PRIV UNITS USED IN STEP                   04013\nECARDNO  DS    F              CARD NUMBER OF THIS STATEMENT             04014\n         ORG   JENTRY                                                   04015\n*********************************************************************** 04016\n*                                                                     * 04017\n*                       D D                                           * 04018\n*                                                                     * 04019\n*********************************************************************** 04020\nDENTRY   DS    0CL39          DD STATEMENT ENTRY                        04021\nDDDN     DS    CL8            DDNAME                                    04022\nDTYPE    DS    C              TYPE OF UNIT FOR THIS FILE                04023\nDTAPE    EQU   2              UNIT = TAPE                               04024\nDPRIV    EQU   4              UNIT = PRIV OR PRIV-1                     04025\nDDSN     DS    CL24           DSN FOR THIS FILE (1ST 24 CHARS ONLY)     04026\nDVOLSER  DS    CL6            FIRST VOL/SER OF DATA SET                 04027\n         ORG   JENTRY                                                   04028\n*********************************************************************** 04029\n*                                                                     * 04030\n*                     J D T                                           * 04031\n*                                                                     * 04032\n*********************************************************************** 04033\nJDENTRY  DS    0CL39          JDT STATEMENT ENTRY                       04034\nJDVERB   DS    CL8            JDT VERB NAME                             04035\nJDLABEL  DS    CL8            JDT VERB LABEL                            04036\nJDSTEP   DS    CL8            STEP JDT VERB WAS IN                      04037\nJDCLASS  DS    C              CLASS PRESENT ON OUTPUT STATEMENT         04038\n         EJECT                                                          04039\n*********************************************************************** 04040\n*        DESCRIPTION OF THE 16 BYTE WORK AREA PROVIDED BY THE CALLER  * 04041\n*            OF EXIT6                                                 * 04042\n*********************************************************************** 04043\nEXITWORK DSECT                                                          04044\nEXWKPTR1 DS    A                                                        04045\n         DS    XL12                                                     04046\n         EJECT                                                          04047\nSMFDSECT DSECT                                                          04048\n         COPY  SMF247                                               WEJ 04049\n         ORG   SMFDSECT                                             WEJ 04050\n         COPY  SMF248                                               WEJ 04051\nJ2XIT06  CSECT ,                                                    WEJ 04052\n        $MODEND                                                         04053\n         END                                                            04054\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NAPJ006": {"ttr": 4359, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17/\\x00\\x90\\x17/\\x17\\x18\\x00\\xb9\\x00\\xb9\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-21T00:00:00", "modifydate": "1990-06-21T17:18:00", "lines": 185, "newlines": 185, "modlines": 0, "user": "FCHLAY"}, "text": "++ USERMOD (NAPJ006) .\n++ VER (Z038) FMID(HJE2221).\n++JCLIN.\n//STEP1    EXEC PGM=IEV90\n//SYSPUNCH DD  DSN=&&PUNCH(J2XIT09),DISP=SHR\n//SYSIN  DD  SYS1.JES2SRC(J2XIT09),DISP=SHR\n//STEP2    EXEC PGM=IEWL,PARM='RENT'\n//SYSPUNCH DD  DSN=&&PUNCH(J2XIT09),DISP=SHR\n//SYSLMOD  DD  DSN=SYS1.JES2LPA,DISP=SHR\n//SYSLIN  DD  *\n  INCLUDE SYSPUNCH(J2XIT09)\n  NAME J2XIT09(R)\n++SRC (J2XIT09) DISTLIB(JES2SRC).\n*          DATA SET J2XIT09    AT LEVEL 009 AS OF 12/10/89\nJ2XIT09  TITLE 'WFB - EXIT 009 - JOB OUTPUT OVERFLOW'                   00001**5\n*********************************************************************** 00002\n*                                                                     * 00003\n* MODULE NAME: J2XIT09                                                * 00004**5\n*                                                                     * 00005\n* ENVIRONMENT: USER ADDRESS SPACE (MVS CONVENTIONS MUST BE USED)      * 00006\n*                                                                     * 00007\n* DESCRIPTIVE NAME: JES2 EXIT 009 - LINE EXCESSION OVERFLOW HANDLING  * 00008**5\n*           (ORIGINALLY USED FOR TSO/E TRANSMIT LINE LIMITATION)      * 00009**5\n* AUTHOR: TOM LITNEY                                                  * 00010\n*         WELLS FARGO BANK, N.A. (WFB)                                * 00011\n*         525 MARKET STREET, MAC 0103-141                             * 00012\n*         SAN FRANCISCO, CALIFORNIA  94163                            * 00013\n*         (415) 396-7883                                              * 00014\n* CHANGED BY : CLARK MORRIS                                           * 00015**5\n*         PHILIPS LIGHTING, DEPT 5069                                 * 00016**5\n*         PHILIPS SQUARE, CN6800                                      * 00017**5\n*         SOMERSET, NEW JERSEY 08875-6800                             * 00018**5\n*         (201) 563-3575                                              * 00019**5\n*                                                                     * 00020\n* FMID: HJE2226 (MVS/SP-JES2 2.2.0)                               TL1 * 00021**5\n*                                                                     * 00022\n* DATE WRITTEN: JANUARY 1985                                          * 00023\n*                                                                     * 00024\n* CHANGE HISTORY:                                                     * 00025\n*  MM/YY  WHO          WHAT                                       ID# * 00026\n*  05/86  TOM LITNEY   CHANGES FOR JES2 SP 2.1.5                  TL1 * 00027\n*  12/89  CLARK MORRIS CHANGED FUNCTION AND INSTALLED ON JES2 XA  CFM * 00028**5\n*                      2.2.0                                          * 00029**5\n*                                                                     * 00030**5\n* PURPOSE: THE LINES EXCESSION ROUTINE IS CHANGED SO THAT PRODUCTION  * 00031**4\n*          JOBS ARE CANCELLED IF THEY EXCEED 2.5 MILLION LINES OR THE * 00032**5\n*          LINE LIMIT IN THE JOBPARM CARD (PRODUCTION JOBS ARE THOSE  * 00033**5\n*          SUBMITTED BY UCC7 OR A SPECIAL SUBMISSION STARTED TASK     * 00034**5\n*          CALLED COMMAND).  ALL OTHER JOBS AND TSO SIGN-ONS WILL BE  * 00035**5\n*          CANCELLED IF THE /*JOBPARM LINE LIMIT IS EXCEEDED OR, IF   * 00036**5\n*          NO JOBPARM LINE LIMIT IS PRESENT, THE INITIALIZATION DECK  * 00037**5\n*          LINE LIMIT IS EXCEEDED.  STARTED TASKS WILL BE EXEMPT FROM * 00038**7\n*          THIS CHECKING AND THE HASP375 MESSAGE WILL BE SUPPRESSED   * 00039**5\n*          FOR THE STARTED TASK CADSDISP (DISPATCH, A REPORT          * 00040**5\n*          MANAGEMENT SYSTEM) UNTIL 2.5 MILLION LINES ARE EXCEEDED.   * 00041**5\n*          EXIT 10 HAS BEEN INSTALLED TO CHANGE THE DESCRIPTOR CODE   * 00042**5\n*          OF THE HASP375 MESSAGE TO EVENTUAL ACTION SO THAT IT IS    * 00043**5\n*          HIGHLIGHTED AND REMAINS ON THE SCREEN                      * 00044**5\n*                                                                     * 00045**5\n* ENTRY POINT: J2XIT09                                                * 00046**5\n*                                                                     * 00047\n* REGISTERS ON INPUT:                                                 * 00048\n*     R0: N/A                                                         * 00049\n*     R1: ADDRESS OF 7-WORD PARAMETER LIST WITH THE FOLLOWING LAYOUT: * 00050\n*         WORD 1 (+0)  JCTLINES OR JCTPUNCH VALUE                     * 00051\n*         WORD 2 (+4)  JCTPAGES VALUE                                 * 00052\n*         WORD 3 (+8)  JCTMXOUT VALUE                                 * 00053\n*         WORD 4 (+12) USERS INCREMENT FOR RECORDS                    * 00054\n*         WORD 5 (+16) USERS INCREMENT FOR PAGES                      * 00055\n*         WORD 6 (+20) USERS INCREMENT FOR BYTES                      * 00056\n*         WORD 7 (+24) OUTPUT OVERFLOW FLAG                           * 00057\n*              BIT 0   =0  CARDS HAVE NOT EXCEEDED THE LIMIT          * 00058\n*                      =1  CARDS HAVE EXCEEDED THE ESTIMATE           * 00059\n*              BIT 1   =0  LINES HAVE NOT EXCEEDED THE LIMIT          * 00060\n*                      =1  LINES HAVE EXCEEDED THE ESTIMATE           * 00061\n*              BIT 2   =0  PAGES HAVE NOT EXCEEDED THE LIMIT          * 00062\n*                      =1  PAGES HAVE EXCEEDED THE ESTIMATE           * 00063\n*              BIT 3   =0  BYTES HAVE NOT EXCEEDED THE LIMIT          * 00064\n*                      =1  BYTES HAVE EXCEEDED THE ESTIMATE           * 00065\n*              BIT 4-31    NOT APPLICABLE                             * 00066\n*     R2-R6: N/A                                                      * 00067\n*     R7 : ADDRESS OF THE JCT                                         * 00068\n*     R8-R10: N/A                                                     * 00069\n*     R11: ADDRESS OF THE SSVT                                        * 00070\n*     R12: N/A                                                        * 00071\n*     R13: OS-STYLE 18-WORD SAVE AREA                                 * 00072\n*     R14: RETURN ADDRESS                                             * 00073\n*     R15: ENTRY ADDRESS                                              * 00074\n*                                                                     * 00075\n* REGISTERS ON RETURN:                                                * 00076\n*     R0 : IF THE RETURN CODE IN R15 IS 8 THEN:                       * 00077\n*              BIT 0   =0 USE INSTALLATION CURRENT EXCESSIVE          * 00078\n*                         OUTPUT OPTION VALUE                         * 00079\n*                      =1 USE VALUE SPECIFIED IN BITS 24-31 AS        * 00080\n*                         EXCESSIVE OUTPUT VALUE                      * 00081\n*              BIT 1   =0 USE OUTPUT OVERFLOW INCREMENT AS SPECIFIED  * 00082\n*                         ON ESTLNCT, ESTPUN, ESTPAGE, OR ESTBYTE.    * 00083\n*                      =1 USE THE OUTPUT OVERFLOW INCREMENT AS        * 00084\n*                         SUPPLIED BY THE EXIT ROUTINE IN THE         * 00085\n*                         PARAMETER LIST                              * 00086\n*              BIT 2   =0 SEND DEFAULT ERROR MESSAGE ($HASP375) TO    * 00087\n*                         THE OPERATOR                                * 00088\n*                      =1 SUPPRESS DEFAULT MESSAGE                    * 00089\n*              BIT 3-23  N/A                                          * 00090\n*              BIT 24-31 =0 CONTINUE PROCESSING                       * 00091\n*                        =1 ABEND (722) WITHOUT A DUMP                * 00092\n*                        =2 ABEND (722) WITH A DUMP                   * 00093\n*     R1-R14: N/A                                                     * 00094\n*     R15 : A RETURN CODE                                             * 00095\n*           =0 PERFORM ANY ADDITIONAL EXITS ASSOCIATED WITH THIS EXIT.* 00096\n*              PERFORM STANDARD JOB OUTPUT OVERFLOW PROCESSING BASED  * 00097\n*              ON THE INT= AND OPT= KEYWORDS ON THE ESTLNCT, ESTPUN,  * 00098\n*              ESTPAGE, AND ESTBYTE INITIALIZATIN PARAMETERS          * 00099\n*           =4 DO NOT PERFORM ANY ADDITIONAL EXITS.                   * 00100\n*              PERFORM STANDARD JOB OUTPUT OVERFLOW PROCESSING BASED  * 00101\n*              ON THE INT= AND OPT= KEYWORDS ON THE ESTLNCT, ESTPUN,  * 00102\n*              ESTPAGE, AND ESTBYTE INITIALIZATIN PARAMETERS          * 00103\n*           =8 TAKE ACTION BASED ON RETURN PROCESSING FLAGS IN R0.    * 00104\n*              SEE R0 ABOVE.                                          * 00105\n*                                                                     * 00106\n*********************************************************************** 00107\n         EJECT                                                          00108\n         COPY $HASPGBL                 COPY HASP GLOBALS                00109\n         EJECT                                                          00110\nJ2XIT09  AMODE 31                                                       00111**4\nJ2XIT09  RMODE 24                                                       00112**4\nJ2XIT09  $MODULE                                                       C00113**4\n               RPL,                    REQ'D BY $BUFFER                C00114\n               $HASPEQU,               REQ'D FOR REG CONVENTIONS       C00115\n               $MIT,                   REQ'D FOR EXIT MASK             C00116\n               $BUFFER,                REQ'D FOR JCT                   C00117\n               $JCT                    REQ'D TO GET JOBNAME, ETC.       00118\n         EJECT                                                          00119\nJ2XIT09E $ENTRY BASE=R12               EXIT ROUTINE ENTRY POINT         00120**4\n         SAVE  (14,12)                 SAVE CALLERS REGISTERS           00121**2\n         LR    R12,R15                 LOAD LOCAL BASE REGISTER         00122\n         SLR   R15,R15                 SET DEFAULT RETURN CODE          00123\n         EJECT                                                          00124\n*********************************************************************** 00125\n*  SET UP ADDRESSIBILITY AND TEST FOR TSO USER AND PUNCH OVERFLOW. IF * 00126\n*  NO RETURN.  IF YES, IT MUST BE TSO/E TRANSMIT UP PUNCH LIMIT, SET  * 00127\n*  FLAGS, AND RETURN.                                                 * 00128\n*********************************************************************** 00129\n         USING JCT,R7                  ESTABLISH ADDRESSIBILITY     TL1 00130\n         TM    24(R1),B'01000000'      LINES EXCEED THE LIMIT??         00131**2\n         BZ    RETURN                  NO, RETURN                       00132\n         CLI   JCTJOBID,C'S'           STARTED TASK???                  00133**2\n         BNE   CHKJOB                  NO, CHECK FOR PRODUCTION JOB     00134**5\n         CLC   JCTJNAME,=C'CADSDISP'   IS THIS DISPATCH                 00135**6\n         BNE   RETURN                  NO, RETURN                       00136**5\n         CLC   JCTLINES,=F'2000000'    IS JCT LINES > 2 MILLION LNS.    00137**5\n         BH    RETURN                  YES, RETURN                      00138**5\n         L     R0,=X'20000000'         SET FLAG BYTES IN R0             00139**5\n         B     RETURN8                 GO TO SET RETURN CODE TO 8       00140**5\nCHKJOB   DS    0H                                                       00141**5\n*                                                                       00142**5\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - * 00143**5\n*  AT LIGHTING, PRODUCTION JOBS ARE SUBMITTED BY THE JOB SCHEDULER    * 00144**5\n*  UCC7 (NOW CA7 FROM COMPUTER ASSOCIATES).  EXIT 2 IS USED TO PLACE  * 00145**5\n*  THE ID OF THE SUBMITTER IN JCTINDEV WITH THE FORMAT THAT TSO       * 00146**5\n*  SUBMITTERS ARE THE TSO ID AND AN * IN POSITION 8, STARTED TASK     * 00147**5\n*  SUBMITTERS ARE THE STARTED TASK NAME WITH A PLUS SIGN IN POSITION  * 00148**5\n*  8, AND JOB SUBMITTERS ARE THE JOBNAME.                             * 00149**5\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - * 00150**5\n*                                                                       00151**5\n         CLC   JCTINDEV,=C'UCC7   +'   PRODUCTION JOB???                00152**5\n*        BE    CKLINES                 NO, GO TO KILL JOB               00153**9\n*        CLC   JCTINDEV,=C'COMMAND+'   PRODUCTION JOB???                00154**9\n         BNE   KILLJOB                 NO, GO TO KILL JOB               00155**8\nCKLINES  DS    0H                                                       00156**8\n         CLC   JCTLINES,=F'2500000'    IS JCT LINES < 2.5 MILLION LNS.  00157**5\n         BL    RETURN                  YES, RETURN                      00158**5\nKILLJOB  DS    0H                                                       00159**5\n         L     R0,=X'80000002'         SET FLAG BYTES IN R0 FOR 722     00160**5\n*                                      WITH A DUMP                      00161**5\nRETURN8  DS    0H                      RETURN CALLERS REG 14            00162**5\n         LA    R15,8                   SET RETURN CODE TO 8             00163**5\n         EJECT                                                          00164\nRETURN   DS    0H                      RETURN CALLERS REG 14            00165**2\n         RETURN (14,12),RC=(15)        RETURN CALLERS REGISTERS         00166**3\n         DROP R12                      DROP ADDRESSABILITY              00167\n         EJECT                                                          00168\n         LTORG                                                          00169\n        $MODEND                                                         00170\n         END                                                            00171\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPJ007": {"ttr": 4363, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17/\\x00\\x90\\x17/\\x17\\x19\\x00s\\x00s\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-21T00:00:00", "modifydate": "1990-06-21T17:19:00", "lines": 115, "newlines": 115, "modlines": 0, "user": "FCHLAY"}, "text": "++ USERMOD (NAPJ007) .\n++ VER (Z038) FMID(HJE2221).\n++JCLIN.\n//STEP1    EXEC PGM=IEV90\n//SYSPUNCH DD  DSN=&&PUNCH(J2XIT13),DISP=SHR\n//SYSIN  DD  SYS1.JES2SRC(J2XIT13),DISP=SHR\n//STEP2    EXEC PGM=IEWL,PARM='RENT'\n//SYSPUNCH DD  DSN=&&PUNCH(J2XIT13),DISP=SHR\n//SYSLMOD  DD  DSN=SYS1.JES2LIB,DISP=SHR\n//SYSLIN  DD  *\n  INCLUDE SYSPUNCH(J2XIT13)\n  NAME J2XIT13(R)\n++SRC (J2XIT13) DISTLIB(JES2SRC).\n*          DATA SET J2XIT13    AT LEVEL 012 AS OF 07/09/89\nEXIT     TITLE 'PHILIPS LIGHTING NJE/TSO/E SYSOUT VALIDATION FOR  , CON*00001**2\n               EMC2/TAO/PROFS INTERFACE'                                00002**5\n         SPACE 5                                                        00003\n         COPY  $HASPGBL                                                 00004\n         PRINT GEN                                                      00005**3\nJ2XIT13  $MODULE TITLE='PHILIPS LIGHTING (WEJ) HASP EXIT ROUTINES',    X00006**2\n               RPL,                GENERATE HASP RPL    DSECT          X00007**5\n               $BUFFER,            GENERATE HASP BUFFER DSECT          X00008**5\n               $CAT,               GENERATE HASP CAT DSECT             X00009\n               $HCT,               GENERATE HASP HCT DSECT             X00010\n               $JCT,               GENERATE HASP JCT DSECT             X00011\n               $PADDR,             GENERATE HASP JCT DSECT             X00012**3\n               $PDDB,              GENERATE HASP PDDB DSECT            X00013**8\n               $JQE,               GENERATE HASP JQE DSECT             X00014\n               $MIT,               GENERATE HASP MIT DSECT             X00015\n               $PCE,               GENERATE HASP PCE DSECT             X00016\n               $NHD,               GENERATE HASP NDJ AND NJH DSECTS    X00017**8\n               $HASPEQU                                                 00018**2\n         TITLE 'JES2 EXIT 6 INTERNAL TEXT EXIT'                         00019\n*********************************************************************** 00020\n*                                                                     * 00021\n*        ENVIRONMENT   MVS SP 2.2.0                                   * 00022**8\n*                      JES2 FOR SP 2.2.0 (XA)                         * 00023**8\n*                                                                     * 00024\nJ2XIT13  AMODE 31                                                       00025**2\nJ2XIT13  RMODE 24                                                       00026**2\n         EJECT                                                          00027\n*********************************************************************** 00028\n*                                                                     * 00029\n*        REGISTER CONTENTS ON ENTRY TO THIS EXIT ROUTINE:             * 00030\n*                                                                     * 00031\n*        R0 - N/A                                                     * 00032**8\n*        R1       - ADDRESS OF 2-WORD PARAMETER LIST                  * 00033\n*           WORD 1 (+0)  ADDRESS OF THE NETWORK JOB HEADER            * 00034**8\n*           WORD 2 (+4)  ADDRESS OF THE NETWORK DATA SET HEADER       * 00035**8\n*           WORD 3 (+8)  ADDRESS OF THE PDDB                          * 00036**8\n*           WORD 4 (+12) ADDRESS OF THE SYSID OF LOGGED ON USER       * 00037**8\n*           WORD 5 (+16) ADDRESS OF THE 70 BYTE DELETE MESSAGE        * 00038**8\n*        R11      - ADDRESS OF THE HCT                                * 00039\n*        R13      - ADDRESS OF AN OS-STYLE SAVE AREA                  * 00040\n*        R14      - RETURN ADDRESS                                    * 00041\n*        R15      - ENTRY ADDRESS                                     * 00042\n*                                                                     * 00043\n*********************************************************************** 00044\n         SPACE 4                                                        00045\n*********************************************************************** 00046\n*                                                                     * 00047\n*        REGISTER USAGE WITH THIS EXIT:                               * 00048\n*                                                                     * 00049\n*        R0,R1    - PARM/WORK REGISTERS                               * 00050\n*        R3       - ADDR OF THE NJH                                   * 00051**8\n*        R4       - ADDR OF THE NDH                                   * 00052**8\n*        R5       - ADDR OF THE PDDB                                  * 00053**8\n*        R6       - OPEN                                              * 00054**8\n*        R7       - OPEN                                              * 00055**8\n*        R8       - OPEN                                           WEJ* 00056**8\n*        R9       - OPEN                                           WEJ* 00057**8\n*        R10      - OPEN                                           WEJ* 00058**8\n*        R11      - ADDRESS OF THE HCT                                * 00059\n*        R12      - BASE REGISTER #1                                  * 00060\n*        R13      - WORKAREA POINTER                                  * 00061\n*        R14      - RETURN ADDRESS                                    * 00062\n*        R15      - RETURN CONDITION CODE                             * 00063\n*                                                                     * 00064\n*********************************************************************** 00065\n         EJECT                                                          00066\n*********************************************************************** 00067\n*                                                                     * 00068\n*        ACTUAL JES2 EXIT ENTRY POINT                                 * 00069\n*                                                                     * 00070\n*********************************************************************** 00071\nJ2XIT13E $ENTRY  BASE=R12                                               00072**2\n         $SAVE                                                          00073**2\n         LR    R12,R15                                                  00074**8\n         LM    R3,R5,0(R1)             GET POINTERS TO NJH,NDH,PDDB     00075**8\n         USING NJH,R3                                                   00076**8\n         USING NDH,R4                                                   00077**8\n         USING PDB,R5                                                   00078*10\n         CLI   PDBCLASS,C'A'              IS SYSOUT CLASS=A             00079**8\n         BNE   EXIT                       NO, GET OUT                   00080**8\n         TM    NDHGFLG2,NDHGF2PU          IS THIS PUNCH                 00081**8\n         BZ    EXIT                       NO, GET OUT                   00082**8\n         CLC   PDBDRMT,=H'0'              IS DEST REMOTE ZERO           00083**8\n         BNE   EXIT                       NO, GET OUT                   00084**8\n         CLC   NDHGXWTR,=CL8' '           IS EXTERNAL WRITER FLD BLANK  00085*11\n         BE    EXIT                       YES, GET OUT                  00086*11\n         CLC   NDHGXWTR,=XL8'00'          IS EXTERNAL WTR FLD LOW-VALUE 00087*11\n         BE    EXIT                       YES, GET OUT                  00088*11\n         CLC   NDHGXWTR(2),=C'FC'         ARE 1ST 2 CHARS OF EXTERNAL   00089*12\n*                                           WRITER FIELD FC (TSO USER)  00090*12\n         BNE   CHGCLASS                   NO , USE IT                   00091*12\n         CLC   NDHGXWTR+6(2),=C'  '       ARE LAST 2 CHARS OF EXTERNAL  00092*12\n*                                           WRITER FLD BLANK (CONFIRM   00093*12\n*                                           TSO USER ID)                00094*12\n         BE    EXIT                       YES, EXIT                     00095*12\nCHGCLASS DS    0H                                                       00096*12\n         MVI   PDBCLASS,C'N'              CHANGE CLASS TO N             00097**8\nEXIT     DS    0H                                                       00098**8\n         $RETURN RC=0                                                   00099**8\n         $MODEND                                                        00100**2\n         END                                                            00101**2\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPMM01": {"ttr": 4609, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17/\\x00\\x90\\x17/\\x17X\\x00,\\x00,\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-21T00:00:00", "modifydate": "1990-06-21T17:58:00", "lines": 44, "newlines": 44, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPMM01) .\n++ VER(Z038) FMID(HBB2102) .\n++ MAC(SMF248) DISTLIB(AMACLIB) SYSLIB(MACLIB) .\n*** START --- NORTH AMERICAN PHILIPS LIGHTING MOD PROLOG ------ NAPMM01\n***                                                             NAPMM01\n*** FUNCTION.  TO ADD THE DESCRIPTION OF THE USER SMF248 RECORD NAPMM01\n***         (PROC USAGE RECORD).                                NAPMM01\n***                                                             NAPMM01\n*** CHANGE ACTIVITY.                                            NAPMM01\n***                                                             NAPMM01\n***            NONE                                             NAPMM01\n***                                                             NAPMM01\n*** AUTHOR(S).                                                  NAPMM01\n***                                                             NAPMM01\n***            CLARK MORRIS, DEPT 5065                          NAPMM01\n***            NORTH AMERICAN PHILIPS LIGHTING CORP.            NAPMM01\n***            1 WESTINGHOUSE PLAZA                             NAPMM01\n***            BLOOMFIELD, NJ 07003                             NAPMM01\n***                                                             NAPMM01\n*** END --- NORTH AMERICAN PHILIPS LIGHTING MVS MOD PROLOG ---- NAPMM01\n         EJECT                                                  NAPMM01\n* THIS RECORD IS WRITTEN BY JES3 USER EXIT IATUX33 WHEN AN      NAPMM01\n*     '// EXEC PROC=PROCNAME' CARD IS FOUND                     NAPMM01\n*                                                               NAPMM01\n         DS    0F       ALIGN TO FULL WORD BOUNDRY              NAPMM01\nSMF248   DS    0CL76    ALL OF SMF248 RECORD INCLUDING RDW      NAPMM01\nSMF248HD DS    0CL42    COMMON PORTION OF MOST SMF JOB          NAPMM01\n*                           ORIENTED RECORDS (INCLUDING RDW)    NAPMM01\nSM248LEN DS    BL2      RECORD LENGTH                           NAPMM01\nSM248SEG DS    BL2      SEGMENT DESCRIPTOR                      NAPMM01\nSM248FLG DS    BL1      HEADER FLAG BYTE                        NAPMM01\nSM248RTY DS    BL1      RECORD TYPE 248 (X'F8')                 NAPMM01\nSM248TME DS    BL4      TOD FROM TIME MACRO BINARY              NAPMM01\nSM248DTE DS    PL4      DATE FROM TIME MACRO                    NAPMM01\nSM248SID DS    CL4      SYSTEM INDICATOR                        NAPMM01\nSM248JBN DS    CL8      JOB NAME                                NAPMM01\nSM248RST DS    BL4      RDR START TIME, TIME JOB CARD 1ST READ  NAPMM01\nSM248RSD DS    PL4      READER START DATE                       NAPMM01\nSM248UIF DS    CL8      USER IDENTIFICATION FIELD               NAPMM01\nSM248DEV DS    CL8      LOG INPUT DEV NAME OF WHERE JOB READ    NAPMM01\nSM248IGP DS    CL8      LOG INPUT DEV GROUP NAME(JOB SOURCE)    NAPMM01\nSM248PS3 DS    CL2      PROCEDURE DD NAME SUFFIX                NAPMM01\nSM248PNM DS    CL8      PROCEDURE NAME (FROM EXEC CARD)         NAPMM01\nSM248STM DS    CL8      STEP NAME      (FROM EXEC CARD)         NAPMM01\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPMM02": {"ttr": 4611, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17/\\x00\\x90\\x17/\\x18\\x11\\x00-\\x00-\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-21T00:00:00", "modifydate": "1990-06-21T18:11:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPMM02) .\n++ VER(Z038) FMID(HBB2102) .\n++ MAC(SMF249) DISTLIB(AMACLIB) SYSLIB(MACLIB) .\n*** START --- NORTH AMERICAN PHILIPS LIGHTING MOD PROLOG ------ NAPMM02\n***                                                             NAPMM02\n*** FUNCTION.  TO ADD THE DESCRIPTION OF THE USER SMF249 RECORD NAPMM02\n***         (PROC USAGE RECORD).                                NAPMM02\n***                                                             NAPMM02\n*** CHANGE ACTIVITY.                                            NAPMM02\n***                                                             NAPMM02\n***            NONE                                             NAPMM02\n***                                                             NAPMM02\n*** AUTHOR(S).                                                  NAPMM02\n***                                                             NAPMM02\n***            CLARK MORRIS, DEPT 5065                          NAPMM02\n***            NORTH AMERICAN PHILIPS LIGHTING CORP.            NAPMM02\n***            1 WESTINGHOUSE PLAZA                             NAPMM02\n***            BLOOMFIELD, NJ 07003                             NAPMM02\n***                                                             NAPMM02\n*** END --- NORTH AMERICAN PHILIPS LIGHTING MVS MOD PROLOG ---- NAPMM02\n         EJECT                                                  NAPMM02\n* THIS RECORD IS WRITTEN BY JES3 USER EXITS IATUX33 AND IATUX34 NAPMM02\n*     WHEN A JOB CONTAINS JCL THAT THE EXIT IS SET TO LOG       NAPMM02\n*     THE RECORD CONTAINS COLUMNS 1-72 OF THE CARD THAT WAS     NAPMM02\n*     LOGGED PLUS ORIGIN INFORMATION                            NAPMM02\n*                                                               NAPMM02\n         DS    0F       ALIGN TO FULL WORD BOUNDRY              NAPMM02\nSMF249   DS    0CL132   ALL OF SMF249 RECORD INCLUDING RDW      NAPMM02\nSMF249HD DS    0CL42    COMMON PORTION OF MOST SMF JOB          NAPMM02\n*                           ORIENTED RECORDS (INCLUDING RDW)    NAPMM02\nSM249LEN DS    BL2      RECORD LENGTH                           NAPMM02\nSM249SEG DS    BL2      SEGMENT DESCRIPTOR                      NAPMM02\nSM249FLG DS    BL1      HEADER FLAG BYTE                        NAPMM02\nSM249RTY DS    BL1      RECORD TYPE 248 (X'F8')                 NAPMM02\nSM249TME DS    BL4      TOD FROM TIME MACRO BINARY              NAPMM02\nSM249DTE DS    PL4      DATE FROM TIME MACRO                    NAPMM02\nSM249SID DS    CL4      SYSTEM INDICATOR                        NAPMM02\nSM249JBN DS    CL8      JOB NAME                                NAPMM02\nSM249RST DS    BL4      RDR START TIME, TIME JOB CARD 1ST READ  NAPMM02\nSM249RSD DS    PL4      READER START DATE                       NAPMM02\nSM249UIF DS    CL8      USER IDENTIFICATION FIELD               NAPMM02\nSM249DEV DS    CL8      LOG INPUT DEV NAME OF WHERE JOB READ    NAPMM02\nSM249IGP DS    CL8      LOG INPUT DEV GROUP NAME(JOB SOURCE)    NAPMM02\nSM249PS3 DS    CL2      PROCEDURE DD NAME SUFFIX                NAPMM02\nSM249CRD DS    CL72     CARD IMAGE FROM JOB BEING LOGGED        NAPMM02\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPMM04": {"ttr": 4613, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17/\\x00\\x90\\x17/\\x18\\x12\\x00j\\x00j\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-21T00:00:00", "modifydate": "1990-06-21T18:12:00", "lines": 106, "newlines": 106, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPMM04) .\n++ VER(Z038) FMID(HBB2102) .\n++ MAC(GTEDAALC) DISTLIB(AMACLIB) SYSLIB(MACLIB) .\n         MACRO\n&LABEL   GTEDAALC  &NM,&VERB=AL,&ERRMSG=YES\n.*\n.*          +-----------------------------------------------+\n.*          |  See macro GTEDADOC for documentation of the  |\n.*          |  use of this and other GTEDAxxx macros.       |\n.*          +-----------------------------------------------+\n.*\n*\n**********************************************************************\n***   PERFORM DYNAMIC ALLOCATION USING A DATA AREA CREATED         ***\n***   BY MACRO GTEDADAT, AND POINTERS/DATA SET BY MACRO GTEDASET.  ***\n**********************************************************************\n*\n**********************************************************************\n***   SET VERB CODE INTO S99RB.                                    ***\n***   MAPPING MACRO IEFZB4D0 MUST APPEAR IN THE SOURCE.            ***\n**********************************************************************\n*\n&LABEL   LA    1,&NM.RB\n.*\n.VBAL    AIF   ('&VERB' NE 'AL').VBUN\n         MVI   (S99VERB-S99RB)(1),S99VRBAL   SET VERB, DSN ALLOC\n         AGO   .VBEND\n.VBUN    AIF   ('&VERB' NE 'UN').VBCC\n         MVI   (S99VERB-S99RB)(1),S99VRBUN   SET VERB, DSN UNALLOC\n         AGO   .VBEND\n.VBCC    AIF   ('&VERB' NE 'CC').VBDC\n         MVI   (S99VERB-S99RB)(1),S99VRBCC   SET VERB, CONCATENATE\n         AGO   .VBEND\n.VBDC    AIF   ('&VERB' NE 'DC').VBRI\n         MVI   (S99VERB-S99RB)(1),S99VRBDC   SET VERB, DECONCATENATE\n         AGO   .VBEND\n.VBRI    AIF   ('&VERB' NE 'RI').VBDN\n         MVI   (S99VERB-S99RB)(1),S99VRBRI   SET VERB, REMOVE IN-USE\n         AGO   .VBEND\n.VBDN    AIF   ('&VERB' NE 'DN').VBIN\n         MVI   (S99VERB-S99RB)(1),S99VRBDN   SET VERB, DDN ALLOC\n         AGO   .VBEND\n.VBIN    AIF   ('&VERB' NE 'IN').VBEND\n         MVI   (S99VERB-S99RB)(1),S99VRBIN   SET VERB, REQUEST INFO\n         AGO   .VBEND\n.VBEND   ANOP\n.*\n*\n**********************************************************************\n***    DO DYNAMIC ALLOCATION                                       ***\n**********************************************************************\n*\n         LA    1,&NM.RBP                ADDRESS OF PTR TO SVC-99 RB\n         SVC   99                       DYNALLOC\n         ST    15,&NM.S99RC             SAVE RETURN CODE FROM SVC-99\n.*\n.*********************************************************************\n.**                                                                ***\n.**   IF &ERRMSG=NO, DO NOT EVER GENERATE CODE FOR IKJEFF18        ***\n.**                                                                ***\n.*********************************************************************\n.*\n         AIF   ('&ERRMSG' EQ 'NO').NOPR\n.*\n*\n**********************************************************************\n***    IF R/C FROM DYNAMIC ALLOCATION NOT ZERO,                    ***\n***    EXECUTE THE IKJEFF18 (DAIRFAIL) PROGRAM TO PRODUCE          ***\n***    ERROR MESSAGES.                                             ***\n**********************************************************************\n*\n         CNOP  2,4                      ALIGN FOR BRANCH INSTRUCTION\n         LTR   15,15                    IF RETURN CODE IS GOOD\n         BZ    EXZ&SYSNDX                 BRANCH TO END OF ROUTINE\n         BAL   1,EXA&SYSNDX  BRANCH AROUND LIST\n*\n**********************************************************************\n***    EXCEPTIONS, DON'T USE IKJEFF18 FOR THESE VERB/ERROR COMBOS  ***\n***                                                                ***\n         DC    H'1'          NUMBER OF MEMBERS IN THIS LIST\n         DC    X'02,0438'    VERB 02 ERR 0438 DDNAME NOT FOUND\n***                                                                ***\n**********************************************************************\n*\nEXA&SYSNDX LA    2,2(0,1)                    R2 IS POINTER TO COMBOS\n           LH    1,0(0,1)                    R1 IS COUNT OF COMBOS\n           LA    15,&NM.RB                   R15 IS BASE OF RB\n*\n           CLC   (S99VERB-S99RB)(1,15),0(2)  IF NO MATCH ON VERB\n           BNE   *+14                          BRANCH TO END OF LOOP\n           CLC   (S99ERROR-S99RB)(2,15),1(2) ELSE IF ERRCDE MATCHES\n           BE    EXZ&SYSNDX                    BRANCH TO ENDING\n           LA    2,6(0,2)                    POINT TO NEXT ENTRY\n           BCT   1,*-24                      LOOP BACK UP TIL EOL\n*\n         LA    1,&NM.DFPRM              POINT TO IKJEFF18 PARM BLOCK\n         CNOP  0,4                      ALIGN FOR FOLLOWING BAL\n         BAL   15,*+20                  LOAD CONST ADDR AND BRANCH\n         DC    A(*+8)                   ADDR OF LINK PARM LIST\n         DC    A(0)                     ADDR OF DCB (NONE)\n         DC    CL8'IKJEFF18'            EP NAME\n         SVC   6                        LINK\n*\n.NOPR    ANOP\nEXZ&SYSNDX NOPR  0                        END POINT\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NAPMM05": {"ttr": 4616, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17/\\x00\\x90\\x17/\\x18\\x12\\x00Y\\x00Y\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-21T00:00:00", "modifydate": "1990-06-21T18:12:00", "lines": 89, "newlines": 89, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPMM05) .\n++ VER(Z038) FMID(HBB2102) .\n++ MAC(GTEDASET) DISTLIB(AMACLIB) SYSLIB(MACLIB) .\n         MACRO\n&LABEL   GTEDASET &NM,&CPPLPTR=\n.*\n.*          +-----------------------------------------------+\n.*          |  See macro GTEDADOC for documentation of the  |\n.*          |  use of this and other GTEDAxxx macros.       |\n.*          +-----------------------------------------------+\n.*\n*\n**********************************************************************\n***   SET POINTERS AND DATA FOR DYNAMIC ALLOCATION IN DATA AREAS   ***\n***   CREATED BY MACRO GTEDADAT.                                   ***\n**********************************************************************\n*\n**********************************************************************\n***      PLACE ADDRESS OF S99RB INTO S99RBPTR.                     ***\n**********************************************************************\n*\n&LABEL   LA    1,&NM.RB                       ==> R1 POINTS TO S99RB\n         ST    1,&NM.RBP                          FILL IN S99RBPTR\n         OI    &NM.RBP,X'80'                      TURN ON HI BIT\n*\n**********************************************************************\n***      FILL IN S99RB REQUEST BLOCK.                              ***\n***      MAPPING MACRO IEFZB4D0 MUST APPEAR IN SOURCE.             ***\n**********************************************************************\n*\n         MVI   (S99RBLN-S99RB)(1),X'14'           FILL IN LENGTH\n         MVI   (S99VERB-S99RB)(1),X'00'           ZERO VERB CODE\n         XC    (S99FLAG1-S99RB)(4,1),(S99FLAG1-S99RB)(1)   ZERO FLAGS1\n         OI    (S99FLAG1-S99RB)(1),S99ONCNV       SET FLAGS1 OK CONVRT\n         OI    (S99FLAG1-S99RB)(1),S99NOMNT       SET FLAGS1 NO MOUNT\n         LA    2,&NM.TUPL                     ==> R2 POINTS TO TUPL\n         ST    2,(S99TXTPP-S99RB)(0,1)            TUPL ADDR INTO RB\n         XC    (S99FLAG2-S99RB)(4,1),(S99FLAG2-S99RB)(1)   ZERO FLAGS2\n*\n**********************************************************************\n***  BUILD TUPL.                                                   ***\n***  KEY OF LAST TEXT UNIT MUST BE X'FF..'                         ***\n**********************************************************************\n*\n         LA    1,&NM.TU                       ==> R1 POINTS TO TUNITS\n         XR    0,0                                CLEAR R0 FOR COUNTER\n         XR    15,15                              CLEAR R15 WORK REG\n*\nRBA&SYSNDX CLI (S99TUKEY-S99TUNIT)(1),X'FF'       IF KEY IS X'FF..'\n         BE    RBD&SYSNDX                           BRANCH OUT OF LOOP\n         ST    1,0(0,2)                           ADDR OF KEY TO TUPL\n         LA    2,4(0,2)                           INCR POINTER TO TUPL\n*\n         ICM   0,3,(S99TUNUM-S99TUNIT)(1)         TU NUM TO R0\n         LA    1,4(0,1)                           R1 POINTS BEYOND NUM\n         LTR   0,0                                IF TU NUM IS 0\n         BZ    RBA&SYSNDX                         PROCESS NEXT TU\n*\n         ICM   15,3,0(1)                          TU LEN TO R15\n         LA    1,2(15,1)                          PNT BEYND LEN & PARM\n         BCT   0,*-8                              DO FOR EACH LEN+PARM\n*\n         B     RBA&SYSNDX                         PROCESS NEXT TU\n*\nRBD&SYSNDX LA  15,4(0,0)                          POINT TO LAST\n         SR    2,15                                 TUPL ENTRY\n         OI    0(2),S99TUPLN                      MARK LAST TUPL ENTRY\n*\n**********************************************************************\n***  FILL IN THE DAIRFAIL PARAMETER BLOCK.                         ***\n***  IKJEFFDF DFDSECT=YES,DFDSEC2=YES MUST APPEAR IN SOURCE.       ***\n**********************************************************************\n*\n         MVC   &NM.DFPRM+(DFS99RBP-DFDSECTD)(4),&NM.RBP *PTR TO RB\n*\n         LA    1,&NM.S99RC\n         ST    1,&NM.DFPRM+(DFRCP-DFDSECTD)             *PTR TO S99RC\n*\n         LA    1,&NM.F02EP\n         ST    1,&NM.DFPRM+(DFJEFF02-DFDSECTD)          *PTR TO EP\n*\n         LA    1,&NM.ID\n         ST    1,&NM.DFPRM+(DFIDP-DFDSECTD)             *PTR TO SW+ID\n*\n         MVC   &NM.DFPRM+(DFCPPLP-DFDSECTD)(4),&CPPLPTR *PTR TO CPPL\n*\n         XC  &NM.DFPRM+(DFBUFP-DFDSECTD)(4),&NM.DFPRM+(DFBUFP-DFDSECTD)\n*                                                       *ZERO BUFF ADDR\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NAPMM06": {"ttr": 4619, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17/\\x00\\x90\\x17/\\x18\\x12\\x04x\\x04x\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-21T00:00:00", "modifydate": "1990-06-21T18:12:00", "lines": 1144, "newlines": 1144, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPMM06) .\n++ VER(Z038) FMID(HBB2102) .\n++ MAC(GTEDADAT) DISTLIB(AMACLIB) SYSLIB(MACLIB) .\n         MACRO\n&NM      GTEDADAT  &MAP=,&DDNAM=,&DSNAM=,&MEMBR=,&STATS=,              X\n               &NDISP=,&CDISP=,                                        X\n               &TRK=,&CYL=,&BLKLN=,&PRIME=,&SECND=,&DIR=,&RLSE=,       X\n               &SPFRM=,&ROUND=,&VLSER=,&PRIVT=,&VLSEQ=,&VLCNT=,        X\n               &VLRDS=,&UNIT=,&UNCNT=,&PARAL=,&SYSOU=,&SPGNM=,&SFMNO=, X\n               &OUTLM=,&CLOSE=,&COPYS=,&LABEL=,&DSSEQ=,&PASPR=,        X\n               &INOUT=,&EXPDT=,&RETPD=,&DUMMY=,&FCBIM=,&FCBAV=,        X\n               &QNAME=,&TERM=,&UCS=,&UFOLD=,&UVRFY=,&DCBDS=,&DCBDD=,   X\n               &SUSER=,&SHOLD=,&MSVGP=,&SSNM=,&PROT=,&BFALN=,&BFTEK=,  X\n               &BLKSZ=,&BUFIN=,&BUFL=,&BUFMX=,&BUFNO=,&BUFOF=,&BUFOU=, X\n               &BUFRQ=,&BUFSZ=,&CODE=,&CPRI=,&DEN=,&DSORG=,&EROPT=,    X\n               &GNCP=,&INTVL=,&KYLEN=,&LIMCT=,&LRECL=,&MODE=,&NCP=,    X\n               &OPTCD=,&PCIR=,&PCIS=,&PRTSP=,&RECFM=,&RSRVF=,&RSRVS=,  X\n               &SOWA=,&STACK=,&THRSH=,&TRTCH=,&IPLTX=,&DIAGN=,&FUNC=,  X\n               &FRID=,&PASSW=,&PERMA=,&CNVRT=,                         X\n               &RTDDN=,&RTDSN=,&RTORG=,       <== FOR DSN ALLOCATION   X\n               &INDDN=,&INDSN=,&INORG=,       <== FOR INFO RETRIEVAL   X\n               &RTMEM=,&RTSTA=,&RTNDP=,&RTCDP=,&RTLIM=,&RTATT=,        X\n               &RTLST=,&RTTYP=,&RELNO=,                                X\n               &RTVOL=,&SSPRM=,&TCBAD=,&REMOV=,&UNALC=\n.*\n.*          +-----------------------------------------------+\n.*          |  See macro GTEDADOC for documentation of the  |\n.*          |  use of this and other GTEDAxxx macros.       |\n.*          +-----------------------------------------------+\n.*\n           LCLA  &TUPLEN\n&TUPLEN    SETA  0\n*\n&NM        DS  0D                       ALIGN FOR GETMAIN\n*\n**********************************************************************\n***        TEXT UNITS FOR SVC99                                    ***\n**********************************************************************\n*\n&NM.TU     DS  0F   TEXT UNITS FOR SVC99\n.*\n.*********************************************************************\n.***       DSNAME ALLOCATION TEXT UNITS - VERB CODE 01             ***\n.*********************************************************************\n.*\n.TUDDNAM   AIF ('&DDNAM' EQ '').TUDSNAM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDDNA#\n           DS  XL6\n&NM.DDNAM  DS  CL8                      DDNAME\n           AGO .TUDSNAM\n.TUDDNA#   ANOP\n           DC  X'0001,0001,0008'\n&NM.DDNAM  DC  CL8'&DDNAM'              DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDSNAM   AIF ('&DSNAM' EQ '').TUMEMBR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDSNA#\n           DS  XL6\n&NM.DSNAM  DS  CL44                     DATASET NAME\n           AGO .TUMEMBR\n.TUDSNA#   ANOP\n           DC  X'0002,0001,002C'        DATASET NAME (NEXT LINE)\n&NM.DSNAM  DC  CL44'&DSNAM'\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUMEMBR   AIF ('&MEMBR' EQ '').TUSTATS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUMEMB#\n&NM.MEMKY  DS  XL6\n&NM.MEMBR  DS  CL8                      MEMBER NAME\n           AGO .TUSTATS\n.TUMEMB#   ANOP\n&NM.MEMKY  DC  X'0003,0001,0008'\n&NM.MEMBR  DC  CL8'&MEMBR'              MEMBER NAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSTATS   AIF ('&STATS' EQ '').TUNDISP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSTAT#\n&NM.STATS  DS  XL7                      STATUS\n           AGO .TUNDISP\n.TUSTAT#   AIF ('&STATS' NE 'OLD').TUSTAT2\n&NM.STATS  DC  X'0004,0001,0001,01'     STATUS=OLD\n           AGO .TUNDISP\n.TUSTAT2   AIF ('&STATS' NE 'MOD').TUSTAT4\n&NM.STATS  DC  X'0004,0001,0001,02'     STATUS=MOD\n           AGO .TUNDISP\n.TUSTAT4   AIF ('&STATS' NE 'NEW').TUSTAT8\n&NM.STATS  DC  X'0004,0001,0001,04'     STATUS=NEW\n           AGO .TUNDISP\n.TUSTAT8   AIF ('&STATS' NE 'SHR').TUNDISP\n&NM.STATS  DC  X'0004,0001,0001,08'     STATUS=SHR\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUNDISP   AIF ('&NDISP' EQ '').TUCDISP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUNDIS#\n&NM.NDISP  DS  XL7                      NORMAL DISP\n           AGO .TUCDISP\n.TUNDIS#   AIF ('&NDISP' NE 'UNCATLG').TUNDIS2\n&NM.NDISP  DC  X'0005,0001,0001,01'     NORMAL DISP=UNCATLG\n           AGO .TUCDISP\n.TUNDIS2   AIF ('&NDISP' NE 'CATLG').TUNDIS4\n&NM.NDISP  DC  X'0005,0001,0001,02'     NORMAL DISP=CATLG\n           AGO .TUCDISP\n.TUNDIS4   AIF ('&NDISP' NE 'DELETE').TUNDIS8\n&NM.NDISP  DC  X'0005,0001,0001,04'     NORMAL DISP=DELETE\n           AGO .TUCDISP\n.TUNDIS8   AIF ('&NDISP' NE 'KEEP').TUCDISP\n&NM.NDISP  DC  X'0005,0001,0001,08'     NORMAL DISP=KEEP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCDISP   AIF ('&CDISP' EQ '').TUTRK\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCDIS#\n&NM.CDISP  DS  XL7                      COND DISP\n           AGO .TUTRK\n.TUCDIS#   AIF ('&CDISP' NE 'UNCATLG').TUCDIS2\n&NM.CDISP  DC  X'0006,0001,0001,01'     COND DISP=UNCATLG\n           AGO .TUTRK\n.TUCDIS2   AIF ('&CDISP' NE 'CATLG').TUCDIS4\n&NM.CDISP  DC  X'0006,0001,0001,02'     COND DISP=CATLG\n           AGO .TUTRK\n.TUCDIS4   AIF ('&CDISP' NE 'DELETE').TUCDIS8\n&NM.CDISP  DC  X'0006,0001,0001,04'     COND DISP=DELETE\n           AGO .TUTRK\n.TUCDIS8   AIF ('&CDISP' NE 'KEEP').TUTRK\n&NM.CDISP  DC  X'0006,0001,0001,08'     COND DISP=KEEP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUTRK     AIF ('&TRK' EQ '').TUCYL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUTRKA\n&NM.TRK    DS  XL4                      TRK\n           AGO .TUCYL\n.TUTRKA    ANOP\n&NM.TRK    DC  X'0007,0000'             TRK\n           AGO .TUPRIME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCYL     AIF ('&CYL' EQ '').TUBLKLN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCYLA\n&NM.CYL    DS  XL4                      CYL\n           AGO .TUBLKLN\n.TUCYLA    ANOP\n&NM.CYL    DC  X'0008,0000'             CYL\n           AGO .TUPRIME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBLKLN   AIF ('&BLKLN' EQ '').TUPRIME\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBLKL#\n           DS  XL6\n&NM.BLKLN  DS  AL3                      AVERAGE BLOCK LENGTH\n           AGO .TUPRIME\n.TUBLKL#   ANOP\n           DC  X'0009,0001,0003'\n&NM.BLKLN  DC  AL3(&BLKLN)              AVERAGE BLOCK LENGTH\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPRIME   AIF ('&PRIME' EQ '').TUSECND\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPRIM#\n           DS  XL6\n&NM.PRIME  DS  AL3                      PRIMARY SPACE QUANTITY\n           AGO .TUSECND\n.TUPRIM#   ANOP\n           DC  X'000A,0001,0003'\n&NM.PRIME  DC  AL3(&PRIME)              PRIMARY SPACE QUANTITY\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSECND   AIF ('&SECND' EQ '').TUDIR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSECN#\n           DS  XL6\n&NM.SECND  DS  AL3                      SECONDARY SPACE QUANTITY\n           AGO .TUDIR\n.TUSECN#   ANOP\n           DC  X'000B,0001,0003'\n&NM.SECND  DC  AL3(&SECND)              SECONDARY SPACE QUANTITY\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDIR     AIF ('&DIR' EQ '').TURLSE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDIRA\n           DS  XL6\n&NM.DIR    DS  AL3                      NUMBER OF DIRECTORY BLOCKS\n           AGO .TURLSE\n.TUDIRA    ANOP\n           DC  X'000C,0001,0003'\n&NM.DIR    DC  AL3(&DIR)                NUMBER OF DIRECTORY BLOCKS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURLSE    AIF ('&RLSE' EQ '').TUSPFRM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURLSEA\n&NM.RLSE   DS  XL4                      RLSE\n           AGO .TUSPFRM\n.TURLSEA   ANOP\n&NM.RLSE   DC  X'000D,0000'             RLSE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSPFRM   AIF ('&SPFRM' EQ '').TUROUND\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSPFR#\n&NM.SPFRM  DS  XL7                      SPACE FORMAT\n           AGO .TUROUND\n.TUSPFR#   AIF ('&SPFRM' NE 'ALX').TUSPFR4\n&NM.SPFRM  DC  X'000E,0001,0001,02'     ALX\n           AGO .TUROUND\n.TUSPFR4   AIF ('&SPFRM' NE 'MXIG').TUSPFR8\n&NM.SPFRM  DC  X'000E,0001,0001,04'     MXIG\n           AGO .TUROUND\n.TUSPFR8   AIF ('&SPFRM' NE 'CONTIG').TUROUND\n&NM.SPFRM  DC  X'000E,0001,0001,08'     CONTIG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUROUND   AIF ('&ROUND' EQ '').TUVLSER\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUROUN#\n&NM.ROUND  DS  XL4                      ROUND\n           AGO .TUVLSER\n.TUROUN#   ANOP\n&NM.ROUND  DC  X'000F,0000'             ROUND\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLSER   AIF ('&VLSER' EQ '').TUPRIVT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLSE#\n           DS  XL6\n&NM.VLSER  DS  CL6                      VOLUME SERIAL NUMBER\n           AGO .TUPRIVT\n.TUVLSE#   ANOP\n           DC  X'0010,0001,0006'\n&NM.VLSER  DC  CL6'&VLSER'              VOLUME SERIAL NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPRIVT   AIF ('&PRIVT' EQ '').TUVLSEQ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPRIV#\n&NM.PRIVT  DS  XL4                      PVT\n           AGO .TUVLSEQ\n.TUPRIV#   ANOP\n&NM.PRIVT  DC  X'0011,0000'             PVT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLSEQ   AIF ('&VLSEQ' EQ '').TUVLCNT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLSQ#\n           DS  XL6\n&NM.VLSEQ  DS  AL2                      VOLUME SEQUENCE NUMBER\n           AGO .TUVLCNT\n.TUVLSQ#   ANOP\n           DC  X'0012,0001,0002'\n&NM.VLSEQ  DC  AL2(&VLSEQ)              VOLUME SEQUENCE NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLCNT   AIF ('&VLCNT' EQ '').TUVLRDS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLCN#\n           DS  XL6\n&NM.VLCNT  DC  AL1                      VOLUME COUNT\n           AGO .TUVLRDS\n.TUVLCN#   ANOP\n           DC  X'0013,0001,0001'\n&NM.VLCNT  DC  AL1(&VLCNT)              VOLUME COUNT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUVLRDS   AIF ('&VLRDS' EQ '').TUUNIT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUVLRD#\n           DS  XL6\n&NM.VLRDS  DS  CL44                     VOLUME REF TO THIS DSN\n           AGO .TUUNIT\n.TUVLRD#   ANOP\n           DC  X'0014,0001,002C'        VOLUME REF TO DSN (BELOW)\n&NM.VLRDS  DC  CL44'&VLRDS'\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUNIT    AIF ('&UNIT' EQ '').TUUNCNT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUNITA\n           DS  XL6\n&NM.UNIT   DS  CL6                      UNIT\n           AGO .TUUNCNT\n.TUUNITA   ANOP\n           DC  X'0015,0001,0006'\n&NM.UNIT   DC  CL6'&UNIT'               UNIT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUNCNT   AIF ('&UNCNT' EQ '').TUPARAL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUNCN#\n           DS  XL6\n&NM.UNCNT  DS  AL1                      UNIT COUNT\n           AGO .TUPARAL\n.TUUNCN#   ANOP\n           DC  X'0016,0001,0001'\n&NM.UNCNT  DC  AL1(&UNCNT)              UNIT COUNT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPARAL   AIF ('&PARAL' EQ '').TUSYSOU\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPARA#\n&NM.PARAL  DS  XL4                      PARALLEL MOUNT\n           AGO .TUSYSOU\n.TUPARA#   ANOP\n&NM.PARAL  DC  X'0017,0000'             PARALLEL MOUNT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSYSOU   AIF ('&SYSOU' EQ '').TUSPGNM\n           AIF ('&SYSOU' NE '*').TUSYSO2\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSYSO#\n&NM.SYSOU  DS  XL4                      SYSOUT=*\n           AGO .TUSPGNM\n.TUSYSO#   ANOP\n&NM.SYSOU  DC  X'0018,0000'             SYSOUT=*\n           AGO .TUSPGNM\n.TUSYSO2   ANOP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSYS##\n           DS  XL6\n&NM.SYSOU  DS  CL1                      SYSOUT CLASS\n           AGO .TUSPGNM\n.TUSYS##   ANOP\n           DC  X'0018,0001,0001'\n&NM.SYSOU  DC  CL1'&SYSOU'              SYSOUT CLASS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSPGNM   AIF ('&SPGNM' EQ '').TUSFMNO\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSPGN#\n           DS  XL6\n&NM.SPGNM  DS  CL8                      SYSOUT PROGRAM NAME\n           AGO .TUSFMNO\n.TUSPGN#   ANOP\n           DC  X'0019,0001,0008'\n&NM.SPGNM  DC  CL8'&SPGNM'              SYSOUT PROGRAM NAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSFMNO   AIF ('&SFMNO' EQ '').TUOUTLM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSFMN#\n           DS  XL6\n&NM.SFMNO  DS  CL4                      SYSOUT FORM NAME/NUMBER\n           AGO .TUOUTLM\n.TUSFMN#   ANOP\n           DC  X'001A,0001,0004'\n&NM.SFMNO  DC  CL4'&SFMNO'              SYSOUT FORM NAME/NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUOUTLM   AIF ('&OUTLM' EQ '').TUCLOSE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUOUTL#\n           DS  XL6\n&NM.OUTLM  DS  AL3                      OUTLIM\n           AGO .TUCLOSE\n.TUOUTL#   ANOP\n           DC  X'001B,0001,0003'\n&NM.OUTLM  DC  AL3(&OUTLM)              OUTLIM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCLOSE   AIF ('&CLOSE' EQ '').TUCOPYS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCLOS#\n&NM.CLOSE  DS  XL4                      FREE=CLOSE\n           AGO .TUCOPYS\n.TUCLOS#   ANOP\n&NM.CLOSE  DC  X'001C,0000'             FREE=CLOSE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCOPYS   AIF ('&COPYS' EQ '').TULABEL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCOPY#\n           DS  XL6\n&NM.COPYS  DS  AL1                      COPIES\n           AGO .TULABEL\n.TUCOPY#   ANOP\n           DC  X'001D,0001,0001'\n&NM.COPYS  DC  AL1(&COPYS)              COPIES\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TULABEL   AIF ('&LABEL' EQ '').TUDSSEQ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TULABE#\n&NM.LABEL  DS  XL7                      LABEL\n           AGO .TUDSSEQ\n.TULABE#   AIF ('&LABEL' NE 'NL').TULABE2\n&NM.LABEL  DC  X'001E,0001,0001,01'     LABEL=NL\n           AGO .TUDSSEQ\n.TULABE2   AIF ('&LABEL' NE 'SL').TULABE3\n&NM.LABEL  DC  X'001E,0001,0001,02'     LABEL=SL\n           AGO .TUDSSEQ\n.TULABE3   AIF ('&LABEL' NE 'NSL').TULABE4\n&NM.LABEL  DC  X'001E,0001,0001,04'     LABEL=NSL\n           AGO .TUDSSEQ\n.TULABE4   AIF ('&LABEL' NE 'SUL').TULABE5\n&NM.LABEL  DC  X'001E,0001,0001,0A'     LABEL=SUL\n           AGO .TUDSSEQ\n.TULABE5   AIF ('&LABEL' NE 'BLP').TULABE6\n&NM.LABEL  DC  X'001E,0001,0001,10'     LABEL=BLP\n           AGO .TUDSSEQ\n.TULABE6   AIF ('&LABEL' NE 'LTM').TULABE7\n&NM.LABEL  DC  X'001E,0001,0001,21'     LABEL=LTM\n           AGO .TUDSSEQ\n.TULABE7   AIF ('&LABEL' NE 'AL').TULABE8\n&NM.LABEL  DC  X'001E,0001,0001,40'     LABEL=AL\n           AGO .TUDSSEQ\n.TULABE8   AIF ('&LABEL' NE 'AUL').TUDSSEQ\n&NM.LABEL  DC  X'001E,0001,0001,48'     LABEL=AUL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDSSEQ   AIF ('&DSSEQ' EQ '').TUPASPR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDSSE#\n           DS  XL6\n&NM.DSSEQ  DS  AL2                      LABEL= DATASET SEQUENCE NUMBER\n           AGO .TUPASPR\n.TUDSSE#   ANOP\n           DC  X'001F,0001,0002'\n&NM.DSSEQ  DC  AL2(&DSSEQ)              LABEL= DATASET SEQUENCE NUMBER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPASPR   AIF ('&PASPR' EQ '').TUINOUT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINOUT   AIF ('&INOUT' EQ '').TUEXPDT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINOU#\n&NM.INOUT  DS  XL7                      LABEL=IN OR OUT\n           AGO .TUEXPDT\n.TUINOU#   AIF ('&INOUT' NE 'IN').TUINOU2\n&NM.INOUT  DC  X'0021,0001,0001,40'     LABEL=IN\n           AGO .TUEXPDT\n.TUINOU2   AIF ('&INOUT' NE 'OUT').TUEXPDT\n&NM.INOUT  DC  X'0021,0001,0001,80'     LABEL=OUT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUEXPDT   AIF ('&EXPDT' EQ '').TURETPD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUEXPD#\n           DS  XL6\n&NM.EXPDT  DS  CL5                      EXPDT\n           AGO .TURETPD\n.TUEXPD#   ANOP\n           DC  X'0022,0001,0005'\n&NM.EXPDT  DC  CL5'&EXPDT'              EXPDT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURETPD   AIF ('&RETPD' EQ '').TUDUMMY\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURETP#\n           DS  XL6\n&NM.RETPD  DS  AL2                      RETPD\n           AGO .TUDUMMY\n.TURETP#   ANOP\n           DC  X'0023,0001,0002'\n&NM.RETPD  DC  AL2(&RETPD)              RETPD\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDUMMY   AIF ('&DUMMY' EQ '').TUFCBIM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDUMM#\n&NM.DUMMY  DS  XL4                      DD DUMMY / DSN=NULLFILE\n           AGO .TUFCBIM\n.TUDUMM#   ANOP\n&NM.DUMMY  DC  X'0024,0000'             DD DUMMY / DSN=NULLFILE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUFCBIM   AIF ('&FCBIM' EQ '').TUFCBAV\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUFCBI#\n           DS  XL6\n&NM.FCBIM  DS  CL4                      FCB\n           AGO .TUFCBAV\n.TUFCBI#   ANOP\n           DC  X'0025,0001,0004'\n&NM.FCBIM  DC  CL4'&FCBIM'              FCB\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUFCBAV   AIF ('&FCBAV' EQ '').TUQNAME\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUFCBA#\n&NM.FCBAV  DS  XL7                      FCB VERIFY OR ALIGN\n           AGO .TUQNAME\n.TUFCBA#   AIF ('&FCBAV' NE 'VERIFY').TUFCBA2\n&NM.FCBAV  DC  X'0026,0001,0001,04'     FCB VERIFY\n           AGO .TUQNAME\n.TUFCBA2   AIF ('&FCBAV' NE 'ALIGN').TUQNAME\n&NM.FCBAV  DC  X'0026,0001,0001,08'     FCB ALIGN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUQNAME   AIF ('&QNAME' EQ '').TUTERM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUTERM    AIF ('&TERM' EQ '').TUUCS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUTERMA\n&NM.TERM   DS  XL4                      TERM=TS / DSN(*)\n           AGO .TUUCS\n.TUTERMA   ANOP\n&NM.TERM   DC  X'0028,0000'             TERM=TS / DSN(*)\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUCS     AIF ('&UCS' EQ '').TUUFOLD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUCSA\n           DS  XL6\n&NM.UCS    DS  CL4                      UCS CHARACTER SET\n           AGO .TUUFOLD\n.TUUCSA    ANOP\n           DC  X'0029,0001,0004'\n&NM.UCS    DC  CL4'&UCS'                UCS CHARACTER SET\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUFOLD   AIF ('&UFOLD' EQ '').TUUVRFY\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUFOL#\n&NM.UFOLD  DS  XL4                      UCS FOLD\n           AGO .TUUVRFY\n.TUUFOL#   ANOP\n&NM.UFOLD  DC  X'002A,0000'             UCS FOLD\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUUVRFY   AIF ('&UVRFY' EQ '').TUDCBDS\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUVRF#\n&NM.UVRFY  DS  XL4                      UCS VERIFY\n           AGO .TUDCBDS\n.TUUVRF#   ANOP\n&NM.UVRFY  DC  X'002B,0000'             UCS VERIFY\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDCBDS   AIF ('&DCBDS' EQ '').TUDCBDD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDCBS#\n           DS  XL6\n&NM.DCBDS  DS  CL44                     DCB REFERENCE TO DSN\n           AGO .TUDCBDD\n.TUDCBS#   ANOP\n           DC  X'002C,0001,0003'        DCB REFERENCE TO DSN (BELOW)\n&NM.DCBDS  DC  CL44'&DCBDS'\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDCBDD   AIF ('&DCBDD' EQ '').TUSUSER\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDCBD#\n           DS  XL6\n&NM.DCBDD  DS  CL8                      DCB REFERENCE TO DDNAME\n           AGO .TUSUSER\n.TUDCBD#   ANOP\n           DC  X'002D,0001,0008'\n&NM.DCBDD  DC  CL8'&DCBDD'              DCB REFERENCE TO DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSUSER   AIF ('&SUSER' EQ '').TUSHOLD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSUSE#\n           DS  XL6\n&NM.SUSER  DS  CL8                      SYSOUT DESTINATION\n           AGO .TUSHOLD\n.TUSUSE#   ANOP\n           DC  X'0058,0001,0008'\n&NM.SUSER  DC  CL8'&SUSER'              SYSOUT DESTINATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSHOLD   AIF ('&SHOLD' EQ '').TUMSVGP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUSHOL#\n&NM.SHOLD  DS  XL4                      SYSOUT HOLD=YES\n           AGO .TUMSVGP\n.TUSHOL#   ANOP\n&NM.SHOLD  DC  X'0059,0000'             SYSOUT HOLD=YES\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUMSVGP   AIF ('&MSVGP' EQ '').TUSSNM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSSNM    AIF ('&SSNM' EQ '').TUSSPRM\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUSSPRM   AIF ('&SSPRM' EQ '').TUPROT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPROT    AIF ('&PROT' EQ '').TUBFALN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.*\n.*********************************************************************\n.***          DCB ATTRIBUTE TEXT UNITS - VERB CODE 01              ***\n.*********************************************************************\n.*\n.TUBFALN   AIF ('&BFALN' EQ '').TUBFTEK\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBFAL#\n&NM.BFALN  DS  XL7                      BFALN\n           AGO .TUBFTEK\n.TUBFAL#   AIF ('&BFALN' NE 'F').TUBFAL2\n&NM.BFALN  DC  X'002E,0001,0001,01'     BFALN=F\n           AGO .TUBFTEK\n.TUBFAL2   AIF ('&BFALN' NE 'D').TUBFTEK                        MI04303\n&NM.BFALN  DC  X'002E,0001,0001,02'     BFALN=D\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBFTEK   AIF ('&BFTEK' EQ '').TUBLKSZ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBFTE#\n&NM.BFTEK  DS  XL7                      BFTEK\n           AGO .TUBLKSZ\n.TUBFTE#   AIF ('&BFTEK' NE 'D').TUBFTE2\n&NM.BFTEK  DC  X'002F,0001,0001,08'     BFTEK=D\n           AGO .TUBLKSZ\n.TUBFTE2   AIF ('&BFTEK' NE 'E').TUBFTE3\n&NM.BFTEK  DC  X'002F,0001,0001,10'     BFTEK=E\n           AGO .TUBLKSZ\n.TUBFTE3   AIF ('&BFTEK' NE 'R').TUBFTE4\n&NM.BFTEK  DC  X'002F,0001,0001,20'     BFTEK=R\n           AGO .TUBLKSZ\n.TUBFTE4   AIF ('&BFTEK' NE 'S').TUBFTE5\n&NM.BFTEK  DC  X'002F,0001,0001,40'     BFTEK=S\n           AGO .TUBLKSZ\n.TUBFTE5   AIF ('&BFTEK' NE 'A').TUBLKSZ\n&NM.BFTEK  DC  X'002F,0001,0001,60'     BFTEK=A\n           AGO .TUBLKSZ\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBLKSZ   AIF ('&BLKSZ' EQ '').TUBUFIN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBLKS#\n           DS  XL6\n&NM.BLKSZ  DS  AL2                      BLKSIZE\n           AGO .TUBUFIN\n.TUBLKS#   ANOP\n           DC  X'0030,0001,0002'\n&NM.BLKSZ  DC  AL2(&BLKSZ)              BLKSIZE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFIN   AIF ('&BUFIN' EQ '').TUBUFL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFI#\n           DS  XL6\n&NM.BUFIN  DS  AL1                      BUFIN\n           AGO .TUBUFL\n.TUBUFI#   ANOP\n           DC  X'0031,0001,0001'\n&NM.BUFIN  DC  AL1(&BUFIN)              BUFIN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFL    AIF ('&BUFL' EQ '').TUBUFMX\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFLA\n           DS  XL6\n&NM.BUFL   DC  AL2                      BUFL\n           AGO .TUBUFMX\n.TUBUFLA   ANOP\n           DC  X'0032,0001,0002'\n&NM.BUFL   DC  AL2(&BUFL)               BUFL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFMX   AIF ('&BUFMX' EQ '').TUBUFNO\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFM#\n           DS  XL6\n&NM.BUFMX  DS  AL1                      BUFMAX\n           AGO .TUBUFNO\n.TUBUFM#   ANOP\n           DC  X'0033,0001,0001'\n&NM.BUFMX  DC  AL1(&BUFMX)              BUFMAX\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFNO   AIF ('&BUFNO' EQ '').TUBUFOF\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFN#\n           DS  XL6\n&NM.BUFNO  DC  AL1                      BUFNO\n           AGO .TUBUFOF\n.TUBUFN#   ANOP\n           DC  X'0034,0001,0001'\n&NM.BUFNO  DC  AL1(&BUFNO)              BUFNO\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFOF   AIF ('&BUFOF' EQ '').TUBUFOU\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&BUFOF' NE 'L').TUBUFO2\n           AIF ('&MAP' NE 'ONLY').TUBUFF#\n&NM.BUFOF  DS  XL7                      BUFOFF=L\n           AGO .TUBUFOU\n.TUBUFF#   ANOP\n&NM.BUFOF  DC  X'0035,0001,0001,80'     BUFOFF=L\n           AGO .TUBUFOU\n.TUBUFO2   ANOP\n           AIF ('&MAP' NE 'ONLY').TUBUF##\n           DS  XL6\n&NM.BUFOF  DS  AL1                      BUFOFF\n           AGO .TUBUFOU\n.TUBUF##   ANOP\n           DC  X'0035,0001,0001'\n&NM.BUFOF  DC  AL1(&BUFOF)              BUFOFF\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFOU   AIF ('&BUFOU' EQ '').TUBUFRQ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFO#\n           DS  XL6\n&NM.BUFOU  DS  AL1                      BUFOUT\n           AGO .TUBUFRQ\n.TUBUFO#   ANOP\n           DC  X'0036,0001,0001'\n&NM.BUFOU  DC  AL1(&BUFOU)              BUFOUT\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFRQ   AIF ('&BUFRQ' EQ '').TUBUFSZ\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFR#\n           DS  XL6\n&NM.BUFRQ  DS  AL1                      BUFRQ\n           AGO .TUBUFSZ\n.TUBUFR#   ANOP\n           DC  X'0037,0001,0001'\n&NM.BUFRQ  DC  AL1(&BUFRQ)              BUFRQ\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUBUFSZ   AIF ('&BUFSZ' EQ '').TUCODE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUBUFS#\n           DS  XL6\n&NM.BUFSZ  DS  AL2                      BUFSIZE\n           AGO .TUCODE\n.TUBUFS#   ANOP\n           DC  X'0038,0001,0002'\n&NM.BUFSZ  DC  AL2(&BUFSZ)              BUFSIZE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCODE    AIF ('&CODE' EQ '').TUCPRI\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCPRI    AIF ('&CPRI' EQ '').TUDEN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDEN     AIF ('&DEN' EQ '').TUDSORG\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDENA\n&NM.DEN    DS  XL7                      DEN\n           AGO .TUDSORG\n.TUDENA    AIF ('&DEN' NE '0').TUDE2\n&NM.DEN    DC  X'003B,0001,0001,03'     DEN=0  (200 BPI, 7-TRACK)\n           AGO .TUDSORG\n.TUDE2     AIF ('&DEN' NE '1').TUDE3\n&NM.DEN    DC  X'003B,0001,0001,43'     DEN=1  (556 BPI, 7-TRACK)\n           AGO .TUDSORG\n.TUDE3     AIF ('&DEN' NE '2').TUDE4\n&NM.DEN    DC  X'003B,0001,0001,83'     DEN=2  (800 BPI, 7/9-TRACK)\n           AGO .TUDSORG\n.TUDE4     AIF ('&DEN' NE '3').TUDE5\n&NM.DEN    DC  X'003B,0001,0001,C3'     DEN=3  (1600 BPI, 9-TRACK)\n           AGO .TUDSORG\n.TUDE5     AIF ('&DEN' NE '4').TUDSORG\n&NM.DEN    DC  X'003B,0001,0001,D3'     DEN=4  (6250 BPI, 9-TRACK)\n           AGO .TUDSORG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUDSORG   AIF ('&DSORG' EQ '').TUEROPT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUDSOR#\n&NM.DSORG  DS  XL8                      DSORG\n           AGO .TUEROPT\n.TUDSOR#   AIF ('&DSORG' NE 'VS').TUDSOR2\n&NM.DSORG  DC  X'003C,0001,0002,0008'   DSORG=VS\n           AGO .TUEROPT\n.TUDSOR2   AIF ('&DSORG' NE 'TQ').TUDSOR3\n&NM.DSORG  DC  X'003C,0001,0002,0020'   DSORG=TQ\n           AGO .TUEROPT\n.TUDSOR3   AIF ('&DSORG' NE 'TX').TUDSOR4\n&NM.DSORG  DC  X'003C,0001,0002,0040'   DSORG=TX\n           AGO .TUEROPT\n.TUDSOR4   AIF ('&DSORG' NE 'GS').TUDSOR5\n&NM.DSORG  DC  X'003C,0001,0002,0080'   DSORG=GS\n           AGO .TUEROPT\n.TUDSOR5   AIF ('&DSORG' NE 'PO').TUDSOR6\n&NM.DSORG  DC  X'003C,0001,0002,0200'   DSORG=PO\n           AGO .TUEROPT\n.TUDSOR6   AIF ('&DSORG' NE 'POU').TUDSOR7\n&NM.DSORG  DC  X'003C,0001,0002,0300'   DSORG=POU\n           AGO .TUEROPT\n.TUDSOR7   AIF ('&DSORG' NE 'MQ').TUDSOR8\n&NM.DSORG  DC  X'003C,0001,0002,0400'   DSORG=MQ\n           AGO .TUEROPT\n.TUDSOR8   AIF ('&DSORG' NE 'CQ').TUDSOR9\n&NM.DSORG  DC  X'003C,0001,0002,0800'   DSORG=CQ\n           AGO .TUEROPT\n.TUDSOR9   AIF ('&DSORG' NE 'CX').TUDSORA\n&NM.DSORG  DC  X'003C,0001,0002,1000'   DSORG=CX\n           AGO .TUEROPT\n.TUDSORA   AIF ('&DSORG' NE 'DA').TUDSORB\n&NM.DSORG  DC  X'003C,0001,0002,2000'   DSORG=DA\n           AGO .TUEROPT\n.TUDSORB   AIF ('&DSORG' NE 'DAU').TUDSORC\n&NM.DSORG  DC  X'003C,0001,0002,2100'   DSORG=DAU\n           AGO .TUEROPT\n.TUDSORC   AIF ('&DSORG' NE 'PS').TUDSORD\n&NM.DSORG  DC  X'003C,0001,0002,4000'   DSORG=PS\n           AGO .TUEROPT\n.TUDSORD   AIF ('&DSORG' NE 'PSU').TUEROPT\n&NM.DSORG  DC  X'003C,0001,0002,4100'   DSORG=PSU\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUEROPT   AIF ('&EROPT' EQ '').TUGNCP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUEROP#\n&NM.EROPT  DS  XL7                      EROPT\n           AGO .TUGNCP\n.TUEROP#   AIF ('&EROPT' NE 'T').TUEROP2\n&NM.EROPT  DC  X'003D,0001,0001,10'     EROPT=T\n           AGO .TUGNCP\n.TUEROP2   AIF ('&EROPT' NE 'ABE').TUEROP3\n&NM.EROPT  DC  X'003D,0001,0001,20'     EROPT=ABE\n           AGO .TUGNCP\n.TUEROP3   AIF ('&EROPT' NE 'SKP').TUEROP4\n&NM.EROPT  DC  X'003D,0001,0001,40'     EROPT=SKP\n           AGO .TUGNCP\n.TUEROP4   AIF ('&EROPT' NE 'ACC').TUGNCP\n&NM.EROPT  DC  X'003D,0001,0001,80'     EROPT=ACC\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUGNCP    AIF ('&GNCP' EQ '').TUINTVL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUGNCPA\n           DS  XL6\n&NM.GNCP   DC  AL1                      GNCP\n           AGO .TUINTVL\n.TUGNCPA   ANOP\n           DC  X'003E,0001,0001'                                MI04303\n&NM.GNCP   DC  AL1(&GNCP)               GNCP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINTVL   AIF ('&INTVL' EQ '').TUKYLEN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUKYLEN   AIF ('&KYLEN' EQ '').TULIMCT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUKYLE#\n           DS  XL6\n&NM.KYLEN  DS  AL1                      KEYLEN\n           AGO .TULIMCT\n.TUKYLE#   ANOP\n           DC  X'0040,0001,0001'\n&NM.KYLEN  DC  AL1(&KYLEN)              KEYLEN\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TULIMCT   AIF ('&LIMCT' EQ '').TULRECL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TULRECL   AIF ('&LRECL' EQ '').TUMODE\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TULREC#\n           DS  XL6\n&NM.LRECL  DS  AL2                      LRECL\n           AGO .TUMODE\n.TULREC#   ANOP\n           DC  X'0042,0001,0002'\n&NM.LRECL  DC  AL2(&LRECL)              LRECL\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUMODE    AIF ('&MODE' EQ '').TUNCP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUNCP     AIF ('&NCP' EQ '').TUOPTCD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUNCPA\n           DS  XL6\n&NM.NCP    DS  AL1                      NCP\n           AGO .TUOPTCD\n.TUNCPA    ANOP\n           DC  X'0044,0001,0001'\n&NM.NCP    DC  AL1(&NCP)                NCP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUOPTCD   AIF ('&OPTCD' EQ '').TUPCIR\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUOPTC#\n&NM.OPTCD  DS  XL7                      OPTCD\n           AGO .TUPCIR\n.TUOPTC#   AIF ('&OPTCD' NE 'W').TUPCIR\n&NM.OPTCD  DC  X'0045,0001,0001,80'     OPTCD=W\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPCIR    AIF ('&PCIR' EQ '').TUPCIS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPCIS    AIF ('&PCIS' EQ '').TUPRTSP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPRTSP   AIF ('&PRTSP' EQ '').TURECFM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPRTS#\n&NM.PRTSP  DS  XL7                      PRTSP\n           AGO .TURECFM\n.TUPRTS#   AIF ('&PRTSP' NE '0').TUPRTS2\n&NM.PRTSP  DC  X'0048,0001,0001,01'     PRTSP=0\n           AGO .TURECFM\n.TUPRTS2   AIF ('&PRTSP' NE '1').TUPRTS3\n&NM.PRTSP  DC  X'0048,0001,0001,09'     PRTSP=1\n           AGO .TURECFM\n.TUPRTS3   AIF ('&PRTSP' NE '2').TUPRTS4\n&NM.PRTSP  DC  X'0048,0001,0001,11'     PRTSP=2\n           AGO .TURECFM\n.TUPRTS4   AIF ('&PRTSP' NE '3').TURECFM\n&NM.PRTSP  DC  X'0048,0001,0001,19'     PRTSP=3\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURECFM   AIF ('&RECFM' EQ '').TURSRVF\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURECF#\n&NM.RECFM  DS  XL7                      RECFM=F\n           AGO .TURSRVF\n.TURECF#   AIF ('&RECFM' NE 'F').TURECF2\n&NM.RECFM  DC  X'0049,0001,0001,80'     RECFM=F\n           AGO .TURSRVF\n.TURECF2   AIF ('&RECFM' NE 'FA').TURECF3\n&NM.RECFM  DC  X'0049,0001,0001,84'     RECFM=FA\n           AGO .TURSRVF\n.TURECF3   AIF ('&RECFM' NE 'FB').TURECF4\n&NM.RECFM  DC  X'0049,0001,0001,90'     RECFM=FB\n           AGO .TURSRVF\n.TURECF4   AIF ('&RECFM' NE 'FBA').TURECF5\n&NM.RECFM  DC  X'0049,0001,0001,94'     RECFM=FBA\n           AGO .TURSRVF\n.TURECF5   AIF ('&RECFM' NE 'V').TURECF6\n&NM.RECFM  DC  X'0049,0001,0001,40'     RECFM=V\n           AGO .TURSRVF\n.TURECF6   AIF ('&RECFM' NE 'VB').TURECF7\n&NM.RECFM  DC  X'0049,0001,0001,50'     RECFM=VB\n           AGO .TURSRVF\n.TURECF7   AIF ('&RECFM' NE 'U').TURSRVF\n&NM.RECFM  DC  X'0049,0001,0001,C0'     RECFM=U\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURSRVF   AIF ('&RSRVF' EQ '').TURSRVS\n.TURSRVS   AIF ('&RSRVS' EQ '').TUSOWA\n.TUSOWA    AIF ('&SOWA' EQ '').TUSTACK\n.TUSTACK   AIF ('&STACK' EQ '').TUTHRSH\n.TUTHRSH   AIF ('&THRSH' EQ '').TUTRTCH\n.TUTRTCH   AIF ('&TRTCH' EQ '').TUIPLTX\n.TUIPLTX   AIF ('&IPLTX' EQ '').TUDIAGN\n.TUDIAGN   AIF ('&DIAGN' EQ '').TUFUNC\n.TUFUNC    AIF ('&FUNC' EQ '').TUFRID\n.TUFRID    AIF ('&FRID' EQ '').TUPASSW\n.*\n.*********************************************************************\n.***       NON-JCL DYNAMIC ALLOCATION FUNCTIONS - VERB CODE 01     ***\n.*********************************************************************\n.*\n.TUPASSW   AIF ('&PASSW' EQ '').TUPERMA\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUPERMA   AIF ('&PERMA' EQ '').TUCNVRT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUPERM#\n&NM.PERMA  DS  XL4                      PERMANENT ALLOCATION\n           AGO .TUCNVRT\n.TUPERM#   ANOP\n&NM.PERMA  DC  X'0052,0000'             PERMANENT ALLOCATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUCNVRT   AIF ('&CNVRT' EQ '').TURTDDN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUCNVR#\n&NM.CNVRT  DS  XL4                      CONVERTABLE ALLOCATION\n           AGO .TURTDDN\n.TUCNVR#   ANOP\n&NM.CNVRT  DC  X'0053,0000'             CONVERTABLE ALLOCATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTDDN   AIF ('&RTDDN' EQ '').TURTDSN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTDD#\n           DS  XL4\n           DS  XL2                      LEN OF RETURNED DDNAME\n&NM.RTDDN  DS  CL8                      RETURNED DDNAME\n           AGO .TURTDSN\n.TURTDD#   ANOP\n           DC  X'0055,0001'\n           DC  XL2'0008'                LEN OF RETURNED DDNAME\n&NM.RTDDN  DC  CL8' '                   RETURNED DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTDSN   AIF ('&RTDSN' EQ '').TURTORG\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTDS#\n           DS  XL4\n           DS  AL2                      LEN OF RETURNED DSNAME\n&NM.RTDSN  DS  CL44                     RETURNED DSNAME\n           AGO .TURTORG\n.TURTDS#   ANOP\n           DC  X'0056,0001'\n           DC  AL2(44)                  LEN OF RETURNED DSNAME\n&NM.RTDSN  DC  CL44' '                  RETURNED DSNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTORG   AIF ('&RTORG' EQ '').TURTVOL\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTOR#\n           DS  XL6\n&NM.RTORG  DS  XL2                      RETURNED DSORG\n           AGO .TURTVOL\n.TURTOR#   DC  X'0057,0001,0002'\n&NM.RTORG  DC  XL2'0000'                RETURNED DSORG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTVOL   AIF ('&RTVOL' EQ '').TUREMOV\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTVO#\n           DS  XL4\n           DS  XL2                      LEN OF RETURNED VOLSER\n&NM.RTVOL  DS  CL6                      RETURNED VOLSER\n           AGO .TUREMOV\n.TURTVO#   ANOP\n           DC  X'005D,0001'\n           DC  XL2'0006'                LEN OF RETURNED VOLSER\n&NM.RTVOL  DC  CL6' '                   RETURNED VOLSER\n.*\n.*********************************************************************\n.***       UNALLOCATE - VERB CODE 02                               ***\n.*********************************************************************\n.*\n.TUREMOV   AIF ('&REMOV' EQ '').TUUNALC\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUREMO#\n&NM.REMOV  DS  XL4                      REMOVE INUSE EVEN IF PERMANENT\n           AGO .TUUNALC\n.TUREMO#   ANOP\n&NM.REMOV  DC  X'0008,0000'             REMOVE INUSE EVEN IF PERMANENT\n.*\n.TUUNALC   AIF ('&UNALC' EQ '').TUTCBAD\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUUNAL#\n&NM.UNALC  DS  XL4                      UNALLOCATE EVEN IF PERMANENT\n           AGO .TUTCBAD\n.TUUNAL#   ANOP\n&NM.UNALC  DC  X'0007,0000'             UNALLOCATE EVEN IF PERMANENT\n.*\n.*********************************************************************\n.***       REMOVE IN-USE ATTRIBUTE - VERB CODE 05                  ***\n.*********************************************************************\n.*\n.TUTCBAD   AIF ('&TCBAD' EQ '').TUINDDN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUTCBA#\n           DS  XL6\n&NM.TCBAD  DS  XL4                      TCB ADDRESS\n           AGO .TUINDDN\n.TUTCBA#   ANOP\n           DC  X'0001,0001,0004'\n&NM.TCBAD  DS  XL4                      TCB ADDRESS\n.*\n.*********************************************************************\n.***       RETURN INFORMATION - VERB CODE 07                       ***\n.*********************************************************************\n.*\n.TUINDDN   AIF ('&INDDN' EQ '').TUINDSN\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINDD#\n           DS  XL4\n           DS  XL2                      LEN OF RETURNED DDNAME\n&NM.INDDN  DS  CL8                      RETURNED DDNAME\n           AGO .TUINDSN\n.TUINDD#   ANOP\n           DC  X'0004,0001'\n           DC  XL2'0008'                LEN OF RETURNED DDNAME\n&NM.INDDN  DC  CL8' '                   RETURNED DDNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINDSN   AIF ('&INDSN' EQ '').TUINORG\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINDS#\n           DS  XL4\n           DS  AL2                      LEN OF RETURNED DSNAME\n&NM.INDSN  DS  CL44                     RETURNED DSNAME\n           AGO .TUINORG\n.TUINDS#   ANOP\n           DC  X'0005,0001'\n           DC  AL2(44)                  LEN OF RETURNED DSNAME\n&NM.INDSN  DC  CL44' '                  RETURNED DSNAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUINORG   AIF ('&INORG' EQ '').TURTMEM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TUINOR#\n           DS  XL6\n&NM.INORG  DS  XL2                      RETURNED DSORG\n           AGO .TURTMEM\n.TUINOR#   DC  X'000A,0001,0002'\n&NM.INORG  DC  XL2'0000'                RETURNED DSORG\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTMEM   AIF ('&RTMEM' EQ '').TURTSTA\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTME#\n           DS  XL6\n&NM.RTMEM  DS  CL8                      RETURNED MEMBER NAME\n           AGO .TURTSTA\n.TURTME#   ANOP\n           DC  X'0006,0001,0008'\n&NM.RTMEM  DC  CL8' '                   RETURNED MEMBER NAME\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTSTA   AIF ('&RTSTA' EQ '').TURTNDP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTST#\n           DS  XL6\n&NM.RTSTA  DS  XL1                      RETURNED DATASET STATUS\n           AGO .TURTNDP\n.TURTST#   ANOP\n           DC  X'0007,0001,0001'\n&NM.RTSTA  DS  XL1'00'                  RETURNED DATASET STATUS\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTNDP   AIF ('&RTNDP' EQ '').TURTCDP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTND#\n           DS  XL6\n&NM.RTNDP  DS  XL1                      RETURNED NORMAL DISP\n           AGO .TURTCDP\n.TURTND#   ANOP\n           DC  X'0008,0001,0001'\n&NM.RTNDP  DS  XL1'00'                  RETURNED NORMAL DISP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTCDP   AIF ('&RTCDP' EQ '').TURTLIM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTCD#\n           DS  XL6\n&NM.RTCDP  DS  XL1                      RETURNED CONDITIONAL DISP\n           AGO .TURTLIM\n.TURTCD#   ANOP\n           DC  X'0009,0001,0001'\n&NM.RTCDP  DS  XL1'00'                  RETURNED CONDITIONAL DISP\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTLIM   AIF ('&RTLIM' EQ '').TURTATT\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTLI#\n           DS  XL6\n&NM.RTLIM  DS  XL2                      RETURNED LIMIT SPECIFICATION\n           AGO .TURTATT\n.TURTLI#   ANOP\n           DC  X'000B,0001,0002'\n&NM.RTLIM  DS  XL2'0000'                RETURNED LIMIT SPECIFICATION\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTATT   AIF ('&RTATT' EQ '').TURTLST\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTAT#\n           DS  XL6\n&NM.RTATT  DS  XL1                      RETURNED D.A. ATTRIBUTE\n           AGO .TURTLST\n.TURTAT#   ANOP\n           DC  X'000C,0001,0001'\n&NM.RTATT  DS  XL1'00'                  RETURNED D.A. ATTRIBUTE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTLST   AIF ('&RTLST' EQ '').TURTTYP\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTLS#\n           DS  XL6\n&NM.RTLST  DS  XL1                      RETURNED LAST ENTRY SPEC.\n           AGO .TURTTYP\n.TURTLS#   ANOP\n           DC  X'000D,0001,0001'\n&NM.RTLST  DS  XL1'00'                  RETURNED LAST ENTRY SPEC.\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURTTYP   AIF ('&RTTYP' EQ '').TURELNO\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURTTY#\n           DS  XL6\n&NM.RTTYP  DS  XL1                      RETURNED DATASET TYPE\n           AGO .TURELNO\n.TURTTY#   ANOP\n           DC  X'000E,0001,0001'\n&NM.RTTYP  DS  XL1'00'                  RETURNED DATASET TYPE\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TURELNO   AIF ('&RELNO' EQ '').TUENDM\n&TUPLEN    SETA &TUPLEN+1\n           AIF ('&MAP' NE 'ONLY').TURELN#\n           DS  XL6\n&NM.RELNO  DS  XL2                      RETURNED RELATIVE REQUEST NO.\n           AGO .TUENDM\n.TURELN#   ANOP\n           DC  X'000F,0001,0002'\n&NM.RELNO  DS  XL2'0000'                RETURNED RELATIVE REQUEST NO.\n.*\n.*********************************************************************\n.***       MARK END OF LIST OF TEXT UNITS                          ***\n.*********************************************************************\n.*\n.TUENDM    AIF ('&MAP' NE 'ONLY').TUENDU#\n           DS  XL1                      END OF LIST MARKER\n           AGO .TUEND\n.TUENDU#   ANOP\n           DC  X'FF'                    END OF LIST MARKER\n.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n.TUEND     ANOP\n.*\n**********************************************************************\n***        REQUEST BLOCKS FOR SVC99                                ***\n**********************************************************************\n*\n&NM.RBP    DS  A                        POINTER TO REQUEST BLOCK\n&NM.RB     DS  5A                       REQUEST BLOCK\n&NM.TUPL   DS  &TUPLEN.A                TEXT UNIT POINTER LIST\n*\n**********************************************************************\n***        DAIRFAIL PARAMETER BLOCK & MISCELLANEOUS STORAGE        ***\n**********************************************************************\n*\n&NM.DFPRM  DS  6F                       PARM BLOCK FOR IKJEFF18\n*\n&NM.S99RC  DS  F                        STORAGE AREA FOR SVC 99 R/C\n           AIF ('&MAP' NE 'ONLY').DF2\n&NM.F02EP  DS  F                        STORGE AREA FOR EP OF IKJEFF18\n&NM.ID     DS  XL2                      DAIRFAIL SWITCHES & CALLER ID\n           AGO .DF3\n.DF2       ANOP\n&NM.F02EP  DC  F'0'                     STORGE AREA FOR EP OF IKJEFF18\n&NM.ID     DC  X'0032'                  DAIRFAIL SWITCHES & CALLER ID\n.DF3       ANOP\n*\n**********************************************************************\n***        EQUATE FOR TOTAL LENGTH                                 ***\n**********************************************************************\n*\n           DS  0D                       ALIGN FOR GETMAIN\n&NM.LEN    EQU *-&NM                    TOTAL LENGTH\n           MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NAPMM07": {"ttr": 5126, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17/\\x00\\x90\\x17/\\x18\\x12\\x00\\xef\\x00\\xef\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-21T00:00:00", "modifydate": "1990-06-21T18:12:00", "lines": 239, "newlines": 239, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPMM07) .\n++ VER(Z038) FMID(HBB2102) .\n++ MAC(GTEDADOC) DISTLIB(AMACLIB) SYSLIB(MACLIB) .\n         MACRO\n&LABEL   GTEDADOC\n*\n*  +----------------------------------------------------------------+\n*  |  This is an explanation of the GTE Dynamic Allocation macros.  |\n*  |                                                                |\n*  |         Chuck Hoffman                                          |\n*  |         Systems Programming                                    |\n*  |         GTE Laboratories - Technical Computation Center        |\n*  |         40 Sylvan Road                                         |\n*  |         Waltham, MA  02254                                     |\n*  |                               617/466-2131  v/n 679-2131       |\n*  +----------------------------------------------------------------+\n*\n* PURPOSE:\n*     DAIR/IKJDAIR is now being maintained only for compatability with\n* older programs.  IBM states that all new applications should be\n* written using SVC-99 rather than DAIR.  The purpose of these macros\n* is to make the use of SVC-99 and IKJEFF18 (DAIRFAIL messages) easy\n* from assembler programs.\n*\n* REFERENCE:\n*     The user of these routines should have available the IBM manual:\n* 'GC28-0627, OS/VS2 MVS Systems Programming Library:  Job Management'\n* which describes SVC-99.  A detailed knowledge of SVC-99 is not\n* necessary.\n*\n* FUNCTION:\n*     GTEDADAT - Allocates space at assembly time for control blocks.\n*                Generates literals and constants.\n*     GTEDASET - Initializes control blocks at exection time.\n*     GTEDAALC - Invokes SVC-99 and IKJEFF18.\n*\n*\n* GTEDADAT - creating control blocks.\n*\n* 1.  The name of the control blocks is limited to three characters,\n*     because it is used as a prefix for data items in the generated\n*     control blocks.\n*                okay:  ABC      GTEDADAT ...\n*                  no:  ABCD     GTEDADAT ...\n*\n* 2.  The use of MAP=ONLY will produce DS entries without initializing\n*     the contents of the blocks.\n*          DC entries:  ABC      GTEDADAT ...\n*          DS entries:  ABC      GTEDADAT MAP=ONLY,...\n*\n* 3.  The names of text unit operands are the same as those used in the\n*     'Job Management' manual.  For instance, DSNAM and DDNAM rather\n*     than DSNAME and DDNAME.  By limiting operands to five characters,\n*     labels can be created using the 3-character block name as a\n*     prefix, followed by the 5-character (max) operand name.  The\n*     dataset name in the example in 2, above, would be labeled\n*     ABCDSNAM.\n*           -------------------------------------------------\n*           ---  There is one exception because IBM uses  ---\n*           ---  the same last 5 characters for infor-    ---\n*           ---  mation retrieval with two different      ---\n*           ---  SVC-99 verb codes.  If using the DSN     ---\n*           ---  Allocation SVC-99 verb (X'01') use the   ---\n*           ---  IBM names on the left.  If using the     ---\n*           ---  Information Retrieval SVC-99 verb (X'07')---\n*           ---  use the GTE names on the right:          ---\n*           ---                                           ---\n*           ---     DSN Alloc.        Info. Retrieval     ---\n*           ---       RTDDN              INDDN            ---\n*           ---       RTDSN              INDSN            ---\n*           ---       RTORG              INORG            ---\n*           -------------------------------------------------\n*\n* 4.  Text unit operands come in three flavors (refer to 'Job\n*     Management')\n*\n*     A.  Those for which an explicit value is supplied, e.g. DDNAME.\n*\n*              code:  ADC      GTEDADAT DDNAM=FILEA\n*\n*         generated: +         DC     X'0001,0001,0008'\n*                    +ADCDDNAM DC     CL8'FILEA'\n*\n*     B.  Those which are either on or off:  e.g. Space type TRK\n*\n*              code:  ADC      GTEDADAT DDNAM=FILEA,TRK=YES\n*\n*         generated: +         DC     X'0001,0001,0008'\n*                    +ADCDDNAM DC     CL8'FILEA'\n*                    +ADCTRK   DC     X'0007,0000'\n*         ----------------------------------------------------------\n*         ---  Note.  Information retrieval is in this category. ---\n*         ----------------------------------------------------------\n*\n*     C.  Those for which there is a choice which can be coded,\n*         e.g. Dataset organization.\n*\n*              code:  ADC      GTEDADAT DDNAM=FILEA,TRK=YES,DSORG=PS\n*\n*         generated: +         DC     X'0001,0001,0008'\n*                    +ADCDDNAM DC     CL8'FILEA'\n*                    +ADCTRK   DC     X'0007,0000'\n*                    +ADCDSORG DC     X'003C,0001,0002,4000'\n*\n*   NOTE 1. -\n*     Each operand generates a text unit which begins with a two-byte\n*     key.  Each operand generates a label.  The label may be at the\n*     key, as in ADCTRK and ADCDSORG, above, or it may be at the\n*     literal, as in ADCDDNAM, above.  Location of the label is based\n*     on a best guess of anticipated use of that text unit.\n*\n*   NOTE 2. -\n*     Setting a key value to X'0000' will cause SVC-99 to ignore that\n*     text unit.  After executing GTEDASET which builds a list of\n*     pointers to the text units, values in the text units can be\n*     changed at will.\n*\n*   NOTE 3. -\n*     At this time, not all operands generate executable code, and\n*     those which do may be in error.  If you discover errors or need\n*     new functions, call Systems Programming.\n*\n*\n* GTEDASET - setting addresses in control blocks\n*\n* 1.  This macro needs to be executed once before the GTEDAALC macro\n*     executes.  It simply links together the control blocks generated\n*     by GTEDADAT.  After this macro has been executed, there is no\n*     problem changing values in the control blocks.\n*\n* 2.  The CPPLPTR operand is the name of a fullword.  If the program is\n*     a TSO Command Processor, the fullword must contain the address of\n*     the Command Processor Parameter List (CPPL).  If the program is\n*     not a Command Processor, the fullword should contain the address\n*     of a fake CPPL, or ERRMSG=NO should be coded in the GTEDAALC\n*     macro (below).\n*\n*\n* GTEDAALC - executing SVC-99 and IKJEFF18\n*\n* 1.  This macro is executed once each time you want SVC-99 to\n*     execute.\n*\n* 2.  The choice of VERB= are as follows.  Again, keywords correspond\n*     to names in the 'Job Management' manual.\n*       VERB=AL  dsn allocation        VERB=UN  dsn or ddn unallocation\n*       VERB=CC  concatenation         VERB=DC  deconcatenation\n*       VERB=RI  remove in-use         VERB=DN  ddn allocation\n*       VERB=IN  information retrieveal\n*\n*     Concatenation and deconcatenation aren't yet supported, but they\n*     will be.\n*\n* 3.  This macro has the ERRMSG=NO operand to suppress creating code to\n*     return the SVC-99 failure messages to the TSO terminal.  Use this\n*     operand when the CPPLPTR operand of the GTEDASET macro points to\n*     a fullword which does not contain the address of a CPPL.  When\n*     this operand is used, the SVC-99 return code and the error and\n*     info codes are still available to your program.  Only the writing\n*     of an error message to the terminal is suppressed.  E.g.:\n*\n*                         GTEDAALC  ADC,VERB=AL,ERRMSG=NO\n*\n*     Places the return and error/info codes in these areas:\n*\n*               +ADCS99RC DS     F        SVC-99 RETURN CODE\n*\n*               +ADCERROR DS     H        SVC-99 ERROR CODE\n*               +ADCINFO  DS     H        SVC-99 INFO CODE\n*\n*     The error and info codes are contiguous, and the error code is\n*     aligned on a fullword boundry.\n*\n*\n* MAPPING MACROS:\n*     The following mapping macros must appear in the source.  Base\n* registers do not need to be assigned.\n*\n*     IEFZB4D0                             Maps SVC-99 blocks\n*     IKJEFFDF DFDSECT=YES,DFDSEC2=YES     Maps IKJEFF18 control blocks\n* ---------------------------------------------------------------------\n         EJECT\n* ---------------------------------------------------------------------\n*                        *** EXAMPLE ***\n*\n* We want to allocate member CURVES of CAH0.PDS.DATA to file FT12F001,\n* and we want to allocate member SPLINE of the same dataset to file\n* FT14F001.  Dataset status should be SHR, and sequential organization\n* will be used.  Further, we want the program to be reenterable, so all\n* variable data will be located in storage obtained with GETMAIN.\n*\n* Choose operands for the GTEDADAT macro by reference to the 'Job\n* Management' manual.\n*\n*\n*\n*             PRINT NOGEN\n*    EXMPL1   LINKSAVE BASE=12,GETMAIN=YES           LINKAGE CNVNTNS\n*             LR    5,1                              HOLD CPPL ADDRESS\n*             GETMAIN R,LV=1024                      GET WORK STORAGE\n*             LR    11,1                             ADDRESSABILITY OF\n*             USING AREA1,11                           WORK STORAGE\n*              .       .\n*             ST    5,CPPLADDR                       SAVE CPPL ADDRESS\n*              .       .\n*              .       .\n*             MVC   XYZ(XYZLEN),ABC                  COPY TO WORK AREA\n*             GTEDASET XYZ,CPPLPTR=CPPLADDR          SET POINTERS\n*              .       .\n*              .       .\n*             GTEDAALC XYZ,VERB=AL                   ALLOCATE FT12F001\n*              .       .\n*              .       .\n*             MVC   XYZMEMBR,=C'SPLINE  '            CHANGE MEMBER NME\n*             MVC   XYZDDNAM,=C'FT14F001'            CHANGE FILE NAME\n*             GTEDAALC XYZ,VERB=AL                   ALLOCATE FT14F001\n*              .       .\n*              .       .\n*    ENDUP    FREEMAIN R,LV=1024,A=(11)              FREE STORAGE\n*             XR    15,15                            ZERO R/C\n*             LINKBACK                               LINKAGE CNVNTNS\n*              .       .\n*              .       .\n*              .       .\n*    ABC      GTEDADAT DSNAM=CAH0.PDS.DATA,MEMBR=CURVES,              X\n*                   DDNAM=FT12F001,STATS=SHR,CNVRT=YES\n*              .       .\n*              .       .\n*    AREA1    DSECT\n*    CPPLADDR DS    F\n*    XYZ      GTEDADAT MAP=ONLY,DSNAM=CAH0.PDS.DATA,MEMBR=CURVES,     X\n*                   DDNAM=FT12F001,STATS=SHR,CNVRT=YES\n*              .       .\n*              .       .\n*             IEFZB4D0\n*             IKJEFFDF DFDSECT=YES,DFDSEC2=YES\n*             END\n* ---------------------------------------------------------------------\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NAPMM08": {"ttr": 5131, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17/\\x00\\x90\\x17/\\x18\\x13\\x00.\\x00.\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-21T00:00:00", "modifydate": "1990-06-21T18:13:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPMM08) .\n++ VER(Z038) FMID(HBB2102) .\n++ MAC(SMF247) DISTLIB(AMACLIB) SYSLIB(MACLIB) .\n*** START --- NORTH AMERICAN PHILIPS LIGHTING MOD PROLOG ------ NAPMM08\n***                                                             NAPMM08\n*** FUNCTION.  TO ADD THE DESCRIPTION OF THE USER SMF247 RECORD NAPMM08\n***         (MISC USAGE ERROR RECORD).                          NAPMM08\n***                                                             NAPMM08\n*** CHANGE ACTIVITY.                                            NAPMM08\n***                                                             NAPMM08\n***            NONE                                             NAPMM08\n***                                                             NAPMM08\n*** AUTHOR(S).                                                  NAPMM08\n***                                                             NAPMM08\n***            CLARK MORRIS, DEPT 5069                          NAPMM08\n***            PHILIPS LIGHTING COMPANY                         NAPMM08\n***            PHILIPS SQUARE CN6800                            NAPMM08\n***            SOMERSET, NJ 08875-6800                          NAPMM08\n***                                                             NAPMM08\n*** END --- NORTH AMERICAN PHILIPS LIGHTING MVS MOD PROLOG ---- NAPMM08\n         EJECT                                                  NAPMM08\n* THIS RECORD IS WRITTEN BY JES2 USER EXIT6 J2XIT06 WHEN        NAPMM08\n*     CERTAIN ERROR CONDITIONS ARED DETECTED                    NAPMM08\n*                                                               NAPMM08\n         DS    0F       ALIGN TO FULL WORD BOUNDRY              NAPMM08\nSMF247   DS    0CL76    ALL OF SMF247 RECORD INCLUDING RDW      NAPMM08\nSMF247HD DS    0CL42    COMMON PORTION OF MOST SMF JOB          NAPMM08\n*                           ORIENTED RECORDS (INCLUDING RDW)    NAPMM08\nSM247LEN DS    BL2      RECORD LENGTH                           NAPMM08\nSM247SEG DS    BL2      SEGMENT DESCRIPTOR                      NAPMM08\nSM247FLG DS    BL1      HEADER FLAG BYTE                        NAPMM08\nSM247RTY DS    BL1      RECORD TYPE 247 (X'F7')                 NAPMM08\nSM247TME DS    BL4      TOD FROM TIME MACRO BINARY              NAPMM08\nSM247DTE DS    PL4      DATE FROM TIME MACRO                    NAPMM08\nSM247SID DS    CL4      SYSTEM INDICATOR                        NAPMM08\nSM247JBN DS    CL8      JOB NAME                                NAPMM08\nSM247RST DS    BL4      RDR START TIME, TIME JOB CARD 1ST READ  NAPMM08\nSM247RSD DS    PL4      READER START DATE                       NAPMM08\nSM247UIF DS    CL8      USER IDENTIFICATION FIELD               NAPMM08\nSM247DEV DS    CL8      LOG INPUT DEV NAME OF WHERE JOB READ    NAPMM08\nSM247IGP DS    CL8      LOG INPUT DEV GROUP NAME(JOB SOURCE)    NAPMM08\nSM247SUB DS    CL1      DD RECORD SUB-TYPE                      NAPMM08\nSM247LGC EQU   C'C'     QNAME USED ON DD CARD                   NAPMM08\n         DS    CL1      UNUSED                                  NAPMM08\nSM247DDN DS    CL8      DDNAME FROM DD CARD                     NAPMM08\nSM247QNM DS    CL8      NAME OF QUEUE IF QNAME ELSE BLANK       NAPMM08\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPMM09": {"ttr": 5133, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17/\\x00\\x90\\x17/\\x18\\x14\\x008\\x008\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-21T00:00:00", "modifydate": "1990-06-21T18:14:00", "lines": 56, "newlines": 56, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPMM09) .\n++ VER(Z038) FMID(HBB2102) .\n++ MAC(PANAEXIT) DISTLIB(AMACLIB) SYSLIB(MACLIB) .\n.**********************************************************************\n.* MACRO DESCRIPTION  PANAEXIT-USERMOD NAPMM09                        *\n.*                                                                    *\n.*     THIS MACRO INSERTS A DATE TIME STAMP FOR ALL ASSEMBLER         *\n.*     PROGRAMS SUBMITTED THROUGH PANVALET.  THE MACRO IS INSERTED    *\n.*     BY THE PANVALET EXIT ROUTINE.                                  *\n.*                                                                    *\n.* INPUT                                                              *\n.*     THE INPUT IS GENERATED FROM THE PANVALET BATCH SYSTEM.         *\n.*                                                                    *\n.* OUTPUT                                                             *\n.*     THE OUTPUT OF THIS MACRO WILL PASS ONE OF TWO CONDITIONS:      *\n.*            A. IF THE SOURCE CODE CONTAINS A CSECT CARD, THIS       *\n.*               MACRO WILL GENERATE AT THE END OF THE PROGRAM.       *\n.*               THE GENERATED DATA IS:                               *\n.*                   LEVEL=???,         3 POSITION LEVEL.             *\n.*                   DATE=MM/DD/YY,     DATE.                         *\n.*                   NAME=PGM. NAME     (UP TO 10 CHARACTERS).        *\n.*                   ASSEMBLED ON &SYSDATE AT &SYSTIME                *\n.*                                                                    *\n.*            B. IF THE SOURCE CODE DOES NOT CONTAIN A CSECT CARD     *\n.*               (IE. CICS MAP) THIS MACRO WILL HAVE NO EFFECT.       *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n.*      RECORD OF CHANGES TO THIS MACRO  ----  PANAEXIT               *\n.*                                                                    *\n.*  ID         DATE        DESCRIPTION OF CHANGE                      *\n.*  ---      --------      ---------------------                      *\n.*  RAW      06/24/83      MACRO CREATION DATE                        *\n.*  DWL      11/07/85      DOCUMENTATION CHANGES                      *\n.*  CFM      02/19/89      MADE AN MVS MACRO BY USERMOD NAPMM09 SO    *\n.*                         ALWAYS PRESENT FOR PANVALET ASSEMBLIES     *\n.*                                                                    *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n.*\n.*\n         MACRO\n&SYMBOL  PANAEXIT &LEVEL=,&DATE=,&NAME=\n         LCLC  &LCLBLNK\n         LCLC  &LCLNAME\n         LCLC  &LCLWORK\n         AIF   (K'&SYSECT EQ 0).PANSKIP\n&LCLBLNK SETC  '        '                ASSIGN BLANKS (8).\n&LCLWORK SETC  '&NAME'.'&LCLBLNK'        PAD NAME WITH BLANKS.\n&LCLNAME SETC  '&LCLWORK'(1,7)           TRUNCATE TO SEVEN CHARACTERS.\n@&LCLNAME CSECT\n         DC   CL80'LEVEL=&LEVEL.'\n         DC   CL80'LAST ACCESSED=&DATE.'\n         DC   CL80'NAME=&NAME.'\n         DC   CL80'ASSEMBLED ON &SYSDATE. AT &SYSTIME. '\n.PANSKIP ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPMZ01": {"ttr": 5135, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x18O\\x00\\x90\\x18O\\x18\\x00\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xe8\\xf2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-07-03T00:00:00", "modifydate": "1990-07-03T18:00:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "FCHLY2"}, "text": "++ USERMOD (NAPMZ01) .\n++ VER (Z038) FMID(HBB2102) .\n++ ZAP(IEAVTRML) DISTLIB(AOSC5).\n   NAME  IEAVTRML\n   VER   00 0000000000000000\n   VER   0C 0000000000000000\n   VER   18 0000000000000000\n   REP   00 C5D9C2D4C6D9C5E2            ERBMFRES\n   REP   0C C2D5D1D4E3C5D9D4            BNJMTERM\n   REP   18 C4C6E2D4D9C3D3F0            DFSMRCL0\n   IDRDATA NAPMZ01\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPM001": {"ttr": 5378, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x90\\x16o\\x00\\x90\\x16o\\x11)\\x00\\x10\\x00\\x0e\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-06-15T00:00:00", "modifydate": "1990-06-15T11:29:00", "lines": 16, "newlines": 14, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPM001).          /* NAME OF SERVICE SYSMOD            */\n++VER(Z038)                  /* SYSTEM RELEASE                    */\n          FMID(HRM3502).     /* THIS MUST ALREADY BE IN           */\n++MACUPD(ERB3MJ2E)           /* MACRO  UPDATE TO TAKE PLACE       */\n          ASSEM(ERB3MJ2E).   /* DDNAME OF DISTRIBUTION SOURCE LIB */\n./ CHANGE NAME=ERB3MJ2E\n./ ENDUP\n++SRC(ERB3MJ2E).             /* SOURCE UPDATE TO TAKE PLACE       */\nERB3MJ2E\n++MOD(ERB3MJ2E) LMOD(ERB3GMFC). /* MOD UPDATE TO TAKE PLACE       */\n*** START ---     PHILIPS LIGHTING MOD PROLOG       ----------- NAPM001\n***                                                             NAPM001\n*** FUNCTION.  THIS MOD ASSEMBLES THE JES2 INTERFACE USED       NAPM001\n***            BY RMF MONITOR III                               NAPM001\n***                                                             NAPM001\n*** END ---  PHILIPS LIGHTING MOD PROLOG            ----------- NAPM001\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPM002": {"ttr": 5380, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x90\\x17?\\x00\\x90\\x17?\\x13\\x03\\x00\\xe5\\x00\\xe5\\x00\\x01\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-06-22T00:00:00", "modifydate": "1990-06-22T13:03:00", "lines": 229, "newlines": 229, "modlines": 1, "user": "FCHLAY"}, "text": "++ USERMOD (NAPM002) .\n++ VER (Z038) FMID(HBB2102).\n++JCLIN.\n//STEP1    EXEC PGM=IEV90\n//SYSPUNCH DD  DSN=&&PUNCH(IEFUSI),DISP=SHR\n//SYSIN  DD  SYS1.USERSRC(IEFUSI),DISP=SHR\n//STEP2    EXEC PGM=IEWL,PARM='RENT'\n//SYSPUNCH DD  DSN=&&PUNCH(IEFUSI),DISP=SHR\n//SYSLMOD  DD  DSN=SYS1.LPALIB,DISP=SHR\n//SYSLIN  DD  *\n  INCLUDE SYSPUNCH(IEFUSI)\n  NAME IEFUSI(R)\n++SRC (IEFUSI) DISTLIB(USERSRC).\nIEFUSI   TITLE 'SMF STEP INITIATION EXIT ROUTINE                '\n*/* LIB: IPO1.SAMPLIB(SMFUSIX)\n*/* GDE: CBIPO MVS CUSTOMIZATION\n*/* DOC: THIS IS SAMPLE SMF EXIT ROUTINE TO SET REGION SIZE\n*/*      AND REGION LIMIT (BELOW AND ABOVE 16MB) FOR ALL JOBS\n***********************************************************************\n**                                                                    *\n*             MODULE NAME = IEFUSI                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  CUSTOM-BUILT  IPO SUPPLIED          *\n*                SMF EXIT ROUTINE TO LIMIT GETMAIN FOR ALL JOBS       *\n*                                                                     *\n*             COPYRIGHT = 5750 AAM                                    *\n*                         INTERNATIONAL BUSINESS MACHINES CORPORATION *\n*                         1983                                        *\n*                                                                     *\n*             FUNCTION =                                              *\n*                BASED ON THE REQUESTED REGION SIZE BELOW 16MB,       *\n*                CALCULATES THE REGION LIMIT BELOW 16MB AS BEING      *\n*                THE REGION SIZE PLUS N TIMES 64K.                    *\n*                IT ALSO SETS A REGION SIZE AND LIMIT ABOVE 16MB.     *\n*                                                                     *\n*                                                                     *\n*                OPERATION =                                          *\n*                   INVOKED AT STEP INITIATION TIME AND ACTIVATED FOR *\n*                   ALL JOBS.                                         *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE *\n*                    IF A DIFFERENT CHARACTER SET IS NEEDED.          *\n*                                                                     *\n*                 RESTRICTIONS = NONE                                 *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTER  0       = UNUSED                       *\n*                    REGISTER  1       = ADDRESS OF INPUT PARAMETERS  *\n*                    REGISTER  2       = UNUSED                       *\n*                    REGISTER  3       = ADDRESS OF COMMON EXIT       *\n*                                        PARAMETER AREA               *\n*                    REGISTER  4       = ADDRESS OF JOB STEP NAME     *\n*                    REGISTER  5       = ADDRESS OF PROGRAM NAME      *\n*                    REGISTER  6       = ADDRESS OF ACCOUNTING INFO   *\n*                    REGISTER  7       = ADDRESS OF VSM PARM LIST     *\n*                    REGISTER  8       = ADDRESS OF SRM INFORMATION   *\n*                    REGISTERS 9       = UNUSED                       *\n*                    REGISTERS 10      = WORK REGISTER                *\n*                    REGISTERS 11      = WORK REGISTER                *\n*                    REGISTER  12      = ADDRESSABILITY TO IEFUSI     *\n*                                        CSECT                        *\n*                    REGISTER  13      = CALLERS SAVE AREA ADDRESS    *\n*                    REGISTER  14      = WORK REGISTER                *\n*                    REGISTER  15      = WORK REGISTER                *\n*                                                                     *\n*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        *\n*                   BINARY ZEROES)                                    *\n*                                                                     *\n*             MODULE TYPE = PROCEDURE                                 *\n*                                                                     *\n*                PROCESSOR = ASSEMBLER H VERSION 2                    *\n*                                                                     *\n*                MODULE SIZE =      BYTES                             *\n*                                                                     *\n*                ATTRIBUTES = KEY 0, REENTRANT,                       *\n*                   SUPERVISOR STATE, ENABLED, NO LOCKS HELD          *\n*                                                                     *\n*             ENTRY POINTS = IEFUSI (ONLY ENTRY POINT)                *\n*                                                                     *\n*                LINKAGE =                                            *\n*                                                                     *\n*                                                                     *\n*             INPUT = REG1 POINTS TO A LIST OF FOUR-BYTE ADRESSES AS  *\n*                     FOLLOWS:                                        *\n*                     1. ADDRESS OF COMMON EXIT PARAMETER AREA        *\n*                     2. ADDRESS OF AN 8-BYTE AREA CONTAINING         *\n*                        THE JOB STEP NAME FROM THE EXEC STATEMENT.   *\n*                     3. ADDRESS OF AN 8-BYTE AREA CONTAINING         *\n*                        THE PROGRAM NAME FROM THE EXEC STATEMENT.    *\n*                     4. ADDRESS OF AN AREA CONTAINING THE ACCOUNTING *\n*                        INFORMATION FROM THE EXEC STATEMENT.         *\n*                     5. ADDRESS OF A SIX-WORD AREA CONTAINING REGION *\n*                        LIMIT VALUES.                                *\n*                     6. ADDRESS OF A WORD CONTAINING THE PERFORMANCE *\n*                        GROUP NUMBER AND A FLAG INDICATING A V=R JOB.*\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BSM 0,14 TO          *\n*                             RETURN IN CALLER'S MODE                 *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = NONE                                      *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = NONE                                *\n*                                                                     *\n*             TABLES = NONE                                           *\n*                                                                     *\n*             MACROS = SAVE, RETURN                                   *\n*                                                                     *\n*             CHANGE ACTIVITY = THIS IS A NEW SMF EXIT WHICH IS       *\n*                PROVIDED FOR MVS/XA IPO.                             *\n*                IT WILL RUN IN31-BIT MODE ABOVE THE LINE             *\n*                                                                     *\n*             MESSAGES =                                              *\n*                NONE                                                 *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n*  MODIFIED AT LIGHTING TO RESTRICT TSO USERS AND THE BATCH TMP TO    *\n*  2 MEGABYTES ABOVE THE LINE                                         *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nIEFUSI   CSECT ,                       CSECT NAME DECLARED\nIEFUSI   AMODE 31\nIEFUSI   RMODE ANY\n*\n*\n*\n* REGISTER EQUATES\n*\nR00      EQU   00                      REGISTER 0\nR01      EQU   01                      REGISTER 1\nR02      EQU   02                      REGISTER 2\nR03      EQU   03                      REGISTER 3\nR04      EQU   04                      REGISTER 4\nR05      EQU   05                      REGISTER 5\nR06      EQU   06                      REGISTER 6\nR07      EQU   07                      REGISTER 7\nR08      EQU   08                      REGISTER 8\nR09      EQU   09                      REGISTER 9\nR10      EQU   10                      REGISTER 10\nR11      EQU   11                      REGISTER 11\nR12      EQU   12                      REGISTER 12\nR13      EQU   13                      REGISTER 13\nR14      EQU   14                      REGISTER 14\nR15      EQU   15                      REGISTER 15\n         EJECT\n         SAVE  (14,12),,IEFUSI_&SYSDATE._&SYSTIME\n         USING IEFUSI,R12              SET UP BASE ADDRESSABILITY\n*\n* NOTE THAT NO SAVE_AREA WAS GETMAINED SINCE THIS ROUTINE\n*      CALLS NO OTHER ROUTINE OR ISSUES ANY SVC'S\n*\n         LR    R12,R15                 LOAD BASE REG WITH ENTRY POINT\n         LM    R03,R08,0(R01)          LOAD INPUT PARM LIST ADDRESSES\n*\n*    R03 = ADDRESS OF COMMON PARAMETER EXIT ARE\n*    R04 = ADDRESS OF 8-BYTE AREA CONTAINING JOB STEP NAME\n*    R05 = ADDRESS OF 8-BYTE AREA CONTAINING PROGRAM NAME\n*    R06 = ADDRESS OF AREA CONTAINING ACCOUNTING INFORMATION\n*    R07 = ADDRESS OF SIX-WORD AREA CONTAINING REGION LIMIT VALUES\n*    R08 = ADDRESS OF WORD CONTAINING PERFORMANCE GROUP NUMBER\n*\n         USING REGION,R07              ADDRESSABILITY FOR REGION DSECT\n         OI    REGFLAGS,X'80'          SET THAT IEFUSI CONTROLS REGIONS\n         TM    0(R08),X'80'            V=R JOB?\n         BO    EXIT                    YES USE DEFAULT VALUES\n         L     R10,REGSZREQ            GET REQUESTED REGION SIZE\n         LTR   R10,R10                 IS IT ZERO\n         BZ    EXIT                    YES USE DEFAULT VALUES\n         AL    R10,N64K                ADD N64K TO REGION SIZE BELOW\n         ST    R10,REGLIMB             SET IT AS REGION LIMIT BELOW\n         MVC   REGSIZB,REGSZREQ        SET REGION BELOW\n         MVC   REGSIZA,REG32MB         SET REGION SIZE ABOVE TO 32MB\n         MVC   REGLIMA,REG32MB         SET REGION LIMIT ABOVE TO 32MB\n         CLC   =C'IKJEFT01',0(R05)    IS CALLER THE TERMINAL MONITOR\n         BNE   EXIT                   NO, EXIT\n         MVC   REGSIZA,REG2MB         SET REGION SIZE ABOVE TO 2MB\n         MVC   REGLIMA,REG2MB         SET REGION LIMIT ABOVE TO 2MB\n*\n* RETURN TO CALLER\n*\nEXIT     DS    0H\n         LM    14,12,12(13)            RESTORE REGISTERS\n         LA    15,0                    SET RETURN CODE TO ZERO\n         BSM   0,14                    RETURN TO CALLER IN ITS MODE\n         EJECT\n*\n*  DATA AREA\n*\nREG32MB  DC    F'33554432'         REGION SIZE OF 32MB\nREG2MB   DC    F'2097152'          REGION SIZE OF 2MB\nN64K     DC    F'65536'            64K\n*\n*\n* PATCH AREA\n*\n         DS    0F\nMODLEN   EQU   *-IEFUSI           EQUATE FOR MODULE LENGTH(- PATCH)\nPTCHLEN  EQU   ((MODLEN+7)/8+7)/8*8 PATCH AREA LENGTH EQUATE\nPTCHLNTH DC    Y(PTCHLEN)          LENGTH OF PATCH AREA\nPTCHBASE DC    S(PATCH)            BASE DISPLACED ADDRESS OF PATCH\nPATCH    DC    XL(PTCHLEN)'00'     PATCH AREA\nREGION   DSECT\nREGFLAGS DS    F                   FLAG WORD\nREGSZREQ DS    F                   REGION SIZE REQUESTED\nREGLIMB  DS    F                   REGION LIMIT BELOW 16MB\nREGSIZB  DS    F                   REGION SIZE BELOW 16MB\nREGLIMA  DS    F                   REGION LIMIT ABOVE 16MB\nREGSIZA  DS    F                   REGION SIZE ABOVE 16MB\n         END   IEFUSI\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPM003": {"ttr": 5385, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x90\\x17?\\x00\\x90\\x17?\\x159\\x02\\xfa\\x02\\xdf\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1990-06-22T00:00:00", "modifydate": "1990-06-22T15:39:00", "lines": 762, "newlines": 735, "modlines": 0, "user": "FCHLAY"}, "text": "++ USERMOD (NAPM003) .\n++ VER (Z038) FMID(HBB2102).\n++JCLIN.\n//STEP1    EXEC PGM=IEV90\n//SYSPUNCH DD  DSN=&&PUNCH(IEFACTRT),DISP=SHR\n//SYSIN  DD  SYS1.USERSRC(IEFACTRT),DISP=SHR\n++SRC (IEFACTRT) DISTLIB(USERSRC).\nIEFACTRT TITLE 'SMF JOB/STEP TERMINATION EXIT ROUTINE     '\n*/* LIB:  IPO1.SAMPLIB(SMFTRTX)\n*/* GDE:  CBIPO MVS CUSTOMIZATION\n*/* DOC:  THIS SAMPLE SMF EXIT ROUTINE PUTS JOB SUMMARY MESSAGES\n*/*       TO THE JOB LOG WITH STEP TERMINATION STATUS.\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = IEFACTRT                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME =  CUSTOM-BUILT IPO SUPPLIED           *\n*                SMF EXIT ROUTINE TO PUT MESSAGES ON JOB LOG WITH     *\n*                STEP TERMINATION STATUS.                             *\n*                                                                     *\n*             COPYRIGHT = 5750 AAM                              MSPIPOJ\n*                         INTERNATIONAL BUSINESS MACHINES       MSEIPO4\n*                         CORPORATION, 1979, 1982,              MSPIPOI\n*                         1983                                    IPOXA\n*                                                                     *\n*             FUNCTION =                                              *\n*                PUT MESSAGES VIA WTO ON JOB LOG.                     *\n*                                                                     *\n*                OPERATION =                                          *\n*                   FOR JOB STEP TERMINATION PUT STATISTICS OF STEP.  *\n*                   FOR JOB TERMINATION PUT OUT JOB ENDED MESSAGE.    *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE *\n*                    IF A DIFFERENT CHARACTER SET IS NEEDED.          *\n*                    REQUIRES WTO EXIT ROUTINE, IEECVXIT, TO          *\n*                    SUPPRESS ROUTE CODE 14 FROM CONSOLE.             *\n*                                                                     *\n*                 RESTRICTIONS = NONE                                 *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 1  = WORK REGISTERS               *\n*                    REGISTERS 2 TO 5  = UNUSED                       *\n*                    REGISTER  6       = OUTPUT LINE REGISTER         *\n*                    REGISTER  7       = COMMON PARAMETER AREA        *\n*                    REGISTERS 8 TO 11 = UNUSED                       *\n*                    REGISTER  12      = ADDRESSABILITY TO IEFACTRT   *\n*                                        CSECT                        *\n*                    REGISTER  13      = ADDRESSIBILITY TO DATA DSECT *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        *\n*                   BINARY ZEROES)                                    *\n*                                                                     *\n*             MODULE TYPE = PROCEDURE                                 *\n*                                                                     *\n*                PROCESSOR = MUST BE ASSEMBLED WITH ASSEMBLER H       *\n*                   VERSION 2                                         *\n*                                                                     *\n*                MODULE SIZE = 1200 BYTES                             *\n*                                                                     *\n*                ATTRIBUTES = KEY 0, REENTRANT,                       *\n*                   SUPERVISOR STATE, ENABLED, NO LOCKS HELD          *\n*                                                                     *\n*             ENTRY POINTS = IEFACTRT (ONLY ENTRY POINT)              *\n*                                                                     *\n*                LINKAGE =                                            *\n*                                                                     *\n*                                                                     *\n*             INPUT = REG1 POINTS TO LIST OF FULLWORD ADDRESSES       *\n*                     AS FOLLOWS.                                     *\n*                 1.  PTR TO COMMON EXIT PARAMETER AREA\n*                 2.  PTR TO STEPNAME FIELD\n*                 3.  PTR TO PROGRAMMER NAME FIELD\n*                 4.  PTR TO JOB TCB CPU TIME FIELD\n*                 5.  PTR TO JOB ACCOUNTING FIELDS\n*                 6.  PTR TO STEP TCB CPU TIME FIELD\n*                 7.  PTR TO STEP ACCOUNTING FIELDS\n*                 8.  PTR TO CANCEL FLAG & STEP NUMBER\n*                 9.  PTR TO CONDITION CODE FIELD\n*                10.  PTR TO SMF RECORD TO BE WRITTEN\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH AND SET MODE  *\n*                             (BSM 0,14)                              *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = NONE                                      *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = NONE                                *\n*                                                                     *\n*             TABLES = NONE                                           *\n*                                                                     *\n*             MACROS = SAVE, WTO, RETURN, GETMAIN, FREEMAIN, ESTAE,   *\n*                      SETRP, IFASMFR, IEFJMR, IHASDWA, SPLEVEL       *\n*                                                                     *\n*             CHANGE ACTIVITY = HAS BEEN UPDATED TO RUN ON MVS/XA     *\n*                ON 31-BIT MODE ABOVE THE LINE.                       *\n*                IT PROVIDES THE TOTAL DEVICE CONNECT TIME IN MS      *\n*                FOR EACH STEP IN ADDITION TO THE EXCP COUNT          *\n*                THIS PROGRAM WILL NOT RUN ON MVS/370                 *\n*                                                                     *\n*             MESSAGES =                                              *\n*                STEP TERMINATION LINE AND JOB TERMINATION LINE.      *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\n         EJECT\nIEFACTRT CSECT ,\nIEFACTRT AMODE 31                                             IPOXA\nIEFACTRT RMODE ANY                                            IPOXA\n*\n* CONSTANT ADDRESS EQAUTES\n*\nPSAAOLD  EQU    X'224',4    ADDRESS IN PSA OF CURRENT ASCB\nASCBJBNI EQU    X'AC',4     ADDRESS IN JOBNAME IN ASCB\nCHSTEP   EQU    X'38',8     ADDRESS IN STEP NAME IN CSCB\nCHPROCSN EQU    X'18',8     ADDRESS IN PROC STEP NAME IN CSCB\n*\n* CONSTANT EQUATES\n*\nK0       EQU   00                  NON-RELOCATABLE CONSTANT 00\nK1       EQU   01                  NON-RELOCATABLE CONSTANT 01\nK2       EQU   02                  NON-RELOCATABLE CONSTANT 02\nK3       EQU   03                  NON-RELOCATABLE CONSTANT 03\nK4       EQU   04                  NON-RELOCATABLE CONSTANT 04\nK5       EQU   05                  NON-RELOCATABLE CONSTANT 05\nK6       EQU   06                  NON-RELOCATABLE CONSTANT 06\nK7       EQU   07                  NON-RELOCATABLE CONSTANT 07\nK8       EQU   08                  NON-RELOCATABLE CONSTANT 08\nK9       EQU   09                  NON-RELOCATABLE CONSTANT 09\nKA       EQU   10                  NON-RELOCATABLE CONSTANT 10\nKB       EQU   11                  NON-RELOCATABLE CONSTANT 11\nKC       EQU   12                  NON-RELOCATABLE CONSTANT 12\nKD       EQU   13                  NON-RELOCATABLE CONSTANT 13\nKE       EQU   14                  NON-RELOCATABLE CONSTANT 14\nKF       EQU   15                  NON-RELOCATABLE CONSTANT 15\n*\n* CONSTANT EQUATES\n*\nSUBPOOL  EQU   229                 USE SUBPOOL 229 FOR GETMAIN\nCK       EQU   C'K'                CONSTANT CHAR 'K'\nCASTR    EQU   C'*'                CONSTANT CHAR '*'\nC0       EQU   C'0'                CONSTANT CHAR '0'\n         IEZBITS\n*\n* REGISTER EQUATES\n*\nR00      EQU   00                  REG 00 - WORK REG\nR01      EQU   01                  REG 01 - WORK/PARMETER REG\nR02      EQU   02                  REG 02 - WORK REG\nR03      EQU   03                  REG 03 - WORK REG\nR04      EQU   04                  REG 04 - UNUSED\nR05      EQU   05                  REG 05 - UNUSED\nR06      EQU   06                  REG 06 - BASE FOR OUTPUT LINE\nR07      EQU   07                  REG 07 - BASE FOR COMMON PARM AREA\nR08      EQU   08                  REG 08 - BASE FOR BLDL LIST\nR09      EQU   09                  REG 09 - BASE FOR SMF RECORD\nR10      EQU   10                  REG 10 - UNUSED\nR11      EQU   11                  REG 11 - UNUSED\nR12      EQU   12                  REG 12 - CSECT BASE REG\nR13      EQU   13                  REG 13 - DATA DSECT BASE REG\nR14      EQU   14                  REG 14 - LINKAGE REGISTER\nR15      EQU   15                  REG 15 - WORK REG\n         EJECT\n* SPLEVEL IS CALLED TO REQUEST THE MVS/XA EXPANSION\n         SPLEVEL SET=2             GET XA LEVEL IF REQUIRED AS WE\n*                                  RUN IN 31-BIT MODE\n         SAVE  (14,12),,IEFACTRT_R01.0_&SYSDATE._&SYSTIME\n         USING IEFACTRT,R12        SET UP CSECT ADDRESSABILITY\n         LR    R12,R15             LOAD BASE REGISTER\n         USING DATA,R13            SET UP DATA DSECT ADDR.\n         USING JMR,R07             SET UP ADDRESSABILITY TO COMMON\n         L     R07,PARMEPRM-PARMS(K0,R01) COMMON AREA ADDRESS\n         TM    JMRINDC,JMRFIND     IS IT TIME SHARING USER?\n         BO    QUICKOUT            YES, EXIT BEFORE GETMAIN\n         GETMAIN RU,LV=LDATA,SP=SUBPOOL GET STORAGE           IPOXA\n         ST    R13,SAVEBK-SAVE(,R01) SAVE CALLER'S SAVE AREA ADDR\n         ST    R01,SAVEFW          SAVE MY SAVE AREA ADDRESS\n         LR    R15,R01             SAVE GETMAINED STORE ADDRESS\n         L     R01,SAVER1          RELOAD REGISTERS AFTER GETMAIN\n         L     R02,SAVER0          RELOAD REG2 WITH REG0 ENTRY  CODE\n         LR    R13,R15             LOAD REGISTER 13 WITH GETMAINED ADDR\n         MVC   PARMS(LPARMS),K0(R01) SAVE INPUT PARMS\n*\n*        SET UP RECOVERY ENVIRONMENT\n*\n         LA    R00,RTRYRTN1            RETRY ROUTINE - NO SDWA\n         ST    R00,ESTAPARM            STORE IN PARAMETER LIST\n         LA    R00,RTRYRTN2            RETRY ROUTINE - WITH SDWA\n         ST    R00,ESTAPARM+K4         STORE IN PARAMETER LIST\n         STM   R12,R13,ESTAPARM+K8     STORE BASE & DATA REG IN PARM\n         MVC   ESTAEW(LESTAEL),ESTAEL  MOVE IN ESTAE PARAMETER LIST\n         ESTAE RECOVERY,CT,PARAM=ESTAPARM,MF=(E,ESTAEW) SETUP RCVRY\n*\n*        DETERMINE REASON FOR ENTRY  STEP/JOB TERMINATION\n*\n         L     R09,PARMRECD        LOAD ADDRESS OF SMF RECORD\n         C     R02,R30CODE         WAS ENTRY CODE FOR REC30     MSEIPO4\n         BNE   EXIT                NO - EXIT                    MSEIPO4\n         USING SMFRCD30,R09                                     MSEIPO4\n         CLI   SMF30SON+1,K1       CHECK IF SSSEGMENT IS THERE  MSEIPO4\n         BL    EXIT                NO - EXIT                    MSEIPO4\n         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4\n         A     R04,SMF30SOF        POINT TO SS SEGMENT          MSEIPO4\n         USING SMF30PSS,R04                                     MSEIPO4\n         CLC   SMF30TYP,R30JOB     WAS IT JOB TERMINATION       MSEIPO4\n         BE    JOBTERM             YES, HANDLE JOB TERM         MSEIPO4\n         CLC   SMF30TYP,R30STEP    WAS IT STEP TERMINATION      MSEIPO4\n         BNE   EXIT                EXIT IF NOT                  MSEIPO4\n         DROP  R04                                              MSEIPO4\n         EJECT\n*\n*        HANDLE STEP TERMINATION CONDITIONS\n*\nSTEPTERM DS    0H                  ENTRY FROM STEP TERMINATION\n         LA    R06,WTO1TXT         GET ADDRESS OF WTO TEXT AREA\n         USING LINE2,R06           SET UP ADDRESSABILITY TO LINE\n         L     R01,PARMINDC        LOAD ADDRESS OF STEP NO\n         CLI   K1(R01),K1          IS IT STEP 1?\n         BNE   NOTFIRST            NO, BR PAST HEADER LINE\n         MVC   WTO1TXT,LINE3A      MOVE HEADER LINE 1 TO OUTPUT\n         BAL   R14,MSGRTN          PUT OUT LINE\n         MVC   WTO1TXT,LINE3       MOVE SECOND HEADER\n         BAL   R14,MSGRTN          PUT IT OUT\nNOTFIRST MVI   WTO1TXT,C' '        INIT OUTPUT LINE TO BLANKS\n         MVC   WTO1TXT+K1(L'WTO1TXT-K1),WTO1TXT COPY BLANKS\n         MVC   JOBNAME,JMRJOB      MOVE JOBNAME INTO LINE\n         L     R01,PSAAOLD         GET ADDRESS OF CURRENT ASCB\n         L     R01,ASCBJBNI(K0,R01) GET ADDRESS OF JOBNAME FIELD\n         CLI   CHPROCSN(R01),C' '  IS PROC STEP NAME BLANK?\n         BNH   NOPROC              YES, DO NOT MOVE IT IN\n         MVC   PROCSTEP,CHPROCSN(R01) MOVE IN PROC STEP NAME\nNOPROC   CLI   CHSTEP(R01),C' '    IS STEP NAME BLANK?\n         BNH   PUTMSG1             YES, DO NOT MOVE IT IN\n         MVC   STEPNAME,CHSTEP(R01) MOVE IN STEP NAME\n*                                                               MSEIPO4\n* GET INFORMATION FROM COMPLETION SEGMENT                       MSEIPO4\n*                                                               MSEIPO4\nPUTMSG1  DS    0H                  CONTINUE PROCESSING\n         CLI   SMF30TON+1,K1       DOES COMPL SEGM EXIST        MSEIPO4\n         BL    PUTMSG1A            NO - GOTO NEXT SEGMENT       MSEIPO4\n         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4\n         A     R04,SMF30TOF        POINT TO SS SEGMENT          MSEIPO4\n         USING SMF30CMP,R04                                     MSEIPO4\n         LA    R01,SMF30STI\n         SLR   R00,R00\n         ICM   R00,K3,SMF30SCC     GET COND CODE\n         BAL   R14,PRETCDE         CALL RETURN CODE ROUTINE\n         DROP  R04                                              MSEIPO4\n*                                                               MSEIPO4\n* GET INFORMATION FROM PERFORMANCE SECTION                      MSEIPO4\n*                                                               MSEIPO4\nPUTMSG1A DS    0H                  CONTINUE PROCESSING          MSEIPO4\n         CLI   SMF30PON+1,K1       DOES PERFORMANCE SECT EXIST  MSEIPO4\n         BL    PUTMSG1B            NO - GOTO NEXT SEGMENT       MSEIPO4\n         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4\n         A     R04,SMF30POF        POINT TO PERFORM SEGMENT     MSEIPO4\n         USING SMF30PRF,R04                                     MSEIPO4\n         L     R01,SMF30SRV        SET SERVICE UNITS USED       MSEIPO4\n         BAL   R14,PCOUNT          CALL CONVERT ROUTINE\n         MVC   SERV,DWORD+L'DWORD-L'SERV MOVE TO OUTPUT LINE\n         DROP  R04                                              MSEIPO4\n*                                                               MSEIPO4\n* GET INFORMATION FROM ID SEGMENT                               MSEIPO4\n*                                                               MSEIPO4\nPUTMSG1B DS    0H                  CONTINUE PROCESSING          MSEIPO4\n         CLI   SMF30ION+1,K1       DOES ID SEGMENT EXIST        MSEIPO4\n         BL    PUTMSG1C            NO - GOTO NEXT SEGMENT       MSEIPO4\n         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4\n         A     R04,SMF30IOF        POINT TO ID SEGMENT          MSEIPO4\n         USING SMF30ID,R04                                      MSEIPO4\n         LH    R01,SMF30PGN        GET PERFORMANCE GROUP NUM    MSEIPO4\n         BAL   R14,PCOUNT          CALL CONVERT ROUTINE\n         MVC   PG,DWORD+L'DWORD-L'PG MOVE TO OUTPUT LINE\n         TIME  BIN                 GET TIME IN HUNDREDS/SEC     MSEIPO4\n         LR    R01,R00             LOAD STEP TERM INTO REG 1    MSEIPO4\n         ICM   R00,15,SMF30SIT     LOAD STEP INIT TIME          MSEIPO4\n         BAL   R14,PCLOCK          CONVERT IT\n         MVC   CLOCK,DWORD+L'DWORD-L'CLOCK-K2 MOVE TO OUTPUT LINE\n         DROP  R04                                              MSEIPO4\n*                                                               MSEIPO4\n* GET INFORMATION FROM STORAGE AND PAGING SECTION               MSEIPO4\n*                                                               MSEIPO4\nPUTMSG1C DS    0H                  CONTINUE PROCESSING          MSEIPO4\n         CLI   SMF30RON+1,K1       DOES STORAGE SECTION EXIST   MSEIPO4\n         BL    PUTMSG1D            NO - GOTO NEXT SEGMENT       MSEIPO4\n         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4\n         A     R04,SMF30ROF        POINT TO ID SEGMENT          MSEIPO4\n         USING SMF30SAP,R04                                     MSEIPO4\n         L     R01,SMF30NSW        GET NUMBER OF SWAPS          MSEIPO4\n         BAL   R14,PCOUNT          CONVERT IT\n         MVC   SWAPS,DWORD+L'DWORD-L'SWAPS MOVE IT TO OUTPUT\n         L     R01,SMF30PGI        GET NUMBER OF PAGE INS       MSEIPO4\n         A     R01,SMF30PGO        ADD NUMBER OF PAGE OUTS      MSEIPO4\n         BAL   R14,PCOUNT          CONVERT COUNT\n         MVC   PAGE,DWORD+L'DWORD-L'PAGE MOVE TO OUTPUT LINE\n         L     R01,SMF30PSI        GET NUMBER OF SWAP PAGE INS  MSEIPO4\n         A     R01,SMF30PSO        ADD NUMBER OF SWAP PAGE OUTS MSEIPO4\n         BAL   R14,PCOUNT          CONVERT COUNT\n         MVC   SWAP,DWORD+L'DWORD-L'SWAP MOVE TO OUTPUT LINE\n         L     R01,SMF30VPI        GET NUMBER OF VIO PAGE INS   MSEIPO4\n         A     R01,SMF30VPO        ADD NUMBER OF VIO PAGE OUTS  MSEIPO4\n         BAL   R14,PCOUNT          CONVERT COUNT\n         MVC   VIO,DWORD+L'DWORD-L'VIO MOVE TO OUTPUT LINE\n         DROP  R04                                              MSEIPO4\n*                                                               MSEIPO4\n* GET INFORMATION FROM CPU ACCOUNTING SECTION                   MSEIPO4\n*                                                               MSEIPO4\nPUTMSG1D DS    0H                  CONTINUE PROCESSING          MSEIPO4\n         SLR   R00,R00             CLEAR REG 0\n         L     R01,PARMSTPC        LOAD STEP TCB CPU TIME ADDR\n         ICM   R01,K7,K0(R01)      LOAD STEP TCB CPU TIME       MSPIPOI\n         LA    R01,K0(,R01)        ZERO HIGH ORDER BYTE\n         BAL   R14,PCLOCK          CONVERT FOR OUTPUT\n         MVC   TCB,DWORD+L'DWORD-L'TCB-K1 MOVE TO OUTPUT LINE\n         CLI   SMF30CON+1,K1       DOES CPU/ACC SECTION EXIST   MSEIPO4\n         BL    PUTMSG1E            NO - GOTO NEXT SEGMENT       MSEIPO4\n         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4\n         A     R04,SMF30COF        POINT TO ID SEGMENT          MSEIPO4\n         USING SMF30CAS,R04                                     MSEIPO4\n         SLR   R00,R00             CLEAR REG 0\n         LR    R01,R00             CLEAR REG 1\n         ICM   R01,KF,SMF30CPS     LOAD SRB TIME                MSPIPOI\n         BAL   R14,PCLOCK          CONVERT IT\n         MVC   SRB,DWORD+L'DWORD-L'SRB-K1 MOVE IT TO OUTPUT LINE\n         DROP  R04                                              MSEIPO4\n*                                                               MSEIPO4\n* GET INFORMATION FROM I/O ACTIVITY SEGMENT                     MSEIPO4\n*                                                               MSEIPO4\nPUTMSG1E DS    0H                  CONTINUE PROCESSING          MSEIPO4\n         CLI   SMF30UON+1,K1       DOES I/O ACT SECTION EXIST   MSEIPO4\n         BL    PUTMSG1F            NO - GOTO NEXT SEGMENT       MSEIPO4\n         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4\n         A     R04,SMF30UOF        POINT TO ID SEGMENT          MSEIPO4\n         USING SMF30URA,R04                                     MSEIPO4\n         L     R01,SMF30TEP        GET TOTAL NUMBER OF EXCPS    MSEIPO4\n         BAL   R14,PCOUNT          CALL CONVERT ROUTINE\n         MVC   EXCP,DWORD+L'DWORD-L'EXCP MOVE TO OUTPUT LINE\n         TM    SMF30DCF,SMF30MFL   DEVICE CONNECT TIME CORRECT  IPOXA\n         BO    NDEVCON             NO                           IPOXA\n         L     R03,SMF30TCN        GET DEVICE CONNECT TIME      IPOXA\n* MULTIPLY DEVICE CONNECT TIME BY .128 TO GET MS                IPOXA\n         SLL   R03,7               MULTIPLY BY 128              IPOXA\n         SR    R02,R02             CLEAR R2                     IPOXA\n         D     R02,F1000           DIVIDE BY 1000               IPOXA\n         LR    R01,R03             PUT QUOTIENT IN R1 (MS)      IPOXA\n         DROP  R04                                              MSEIPO4\n         BAL   R14,PCOUNT          CALL CONVERT ROUTINE         IPOXA\n         MVC   CONN,DWORD+L'DWORD-L'CONN MOVE TO OUTPUT LINE    IPOXA\n         B     PUTMSG1F                                         IPOXA\nNDEVCON  DS    0H                                               IPOXA\n         MVC   CONN+2(4),=C'****'     NO DEVICE CONNECT TIME    IPOXA\nPUTMSG1F DS    0H                                               MSEIPO4\n         BAL   R14,MSGRTN          PUT LINE OUT\n         B     EXIT                BR TO EPILOGUE CODE\n         SPACE 3                                                MSEIPO4\n*                                                               MSEIPO4\n*        HANDLE JOB TERMINATION CONDITIONS                      MSEIPO4\n*                                                               MSEIPO4\nJOBTERM  DS    0H                  ENTRY ON JOB TERMINATION\n         MVC   WTO1TXT,LINE4       SET UP OUTPUT LINE\n         MVC   WTO1TXT+LINE4J(L'LINE4J),JMRJOB MOVE IN JOB NAME\n         L     R01,PARMPROG        LOAD ADDR OF PROGRAMMER NAME\n         MVC   WTO1TXT+LINE4N(L'LINE4N),K0(R01) MOVE IN PROG NAME\n         SLR   R00,R00             ZERO REG\n         LR    R01,R00             ZERO REG 1\n         L     R02,PARMJOBC        LOAD JOB TCB CPU TIME ADDR\n         ICM   R01,K7,K0(R02)      LOAD JOB TCB CPU TIME\n         BAL   R14,PCLOCK          CONVERT TIME FOR OUTPUT\n         MVC   WTO1TXT+LINE4C(L'LINE4C),DWORD+L'DWORD-L'LINE4C-K1\n*                                                               MSEIPO4\n* GET INFORMATION FROM ID SEGMENT                               MSEIPO4\n*                                                               MSEIPO4\n         CLI   SMF30ION+1,K1       DOES ID SEGMENT EXIST        MSEIPO4\n         BL    PUTMSG2             NO - GOTO NEXT SEGMENT       MSEIPO4\n         LR    R04,R09             GET RECORD ADDRESS           MSEIPO4\n         A     R04,SMF30IOF        POINT TO ID SEGMENT          MSEIPO4\n         USING SMF30ID,R04                                      MSEIPO4\n         TIME  BIN                 GET TIME IN HUNDREDS/SEC     MSEIPO4\n         LR    R01,R00             GET JOB TERM TIME            MSEIPO4\n         ICM   R00,15,SMF30SIT     GET JOB INIT TIME            MSEIPO4\n         DROP  R04,R09                                          MSEIPO4\n         BAL   R14,PCLOCK          CONVERT TIME FOR OUTPUT\n         MVC   WTO1TXT+LINE4E(L'LINE4E),DWORD+L'DWORD-L'LINE4E-K2\n         BAL   R14,MSGRTN          PRINT LINE\nPUTMSG2  DS    0H                                               MSEIPO4\n*   FIND BULLETIN\n         LA    R08,BLDLWORK        LOAD ADDR OF BLDL LIST\n         USING BLDL,R08            SET UP ADDR. TO BLDL PARM LIST\n         LA    R01,K1              LOAD A 1\n         STH   R01,BLDLFF          STORE IN BLDL LIST\n         LA    R01,BLDLELEN        LOAD LENGTH OF BLDL ENTRY LEN\n         STH   R01,BLDLLL          STORE ENTRY LENGTH\n         MVC   BLDLNAME,=CL8'BULLETIN' LOAD PROGRAM NAME\n         LR    R00,R08             LOAD REG 0 WITH BLDL\n         BLDL  0,(0)               ISSUE BLDL FOR MODULE\n         LTR   R15,R15             WAS IT THERE?\n         BNZ   EXIT                NO, BR TO EXIT EPILOGUE\n         CLI   BLDLZ,K2            WAS IT OUT OF LINKLIST\n         BNL   EXIT                NO, BR TO EXIT PROLOGUE\n         LA    R02,BLDLNAME        GET BLDL ENTRY ADDRESS\n         MVC   LINKE,LINKL         MOVE IN LINK LIST FORM\n         LINK  DE=(2),SF=(E,LINKE) LINK TO BULLETIN ROUTINE\n         DROP  R08                 DROP BLDL DSECT\n         SPACE 3\nEXIT     DS    0H                  EXIT PROLOGUE\n         ESTAE 0                   CANCEL ESTAE EXIT\nRTRYRTN2 DS    0H                  ESTAE RETRY ROUTINE WITH SDWA\n*                                  JUST FREE STORAGE AND EXIT\n         LR    R01,R13             GET FREEMAIN ADDRESS\n         L     R13,SAVEBK          LOAD OLD REG 13\n         FREEMAIN RU,LV=LDATA,A=(1),SP=SUBPOOL FREE DATA DSECT STORAGE\nQUICKOUT DS 0H                     RETURN TO CALLER\n         LM    14,12,12(13)        RESTORE REGISTERS            IPOXA\n         LA    15,0                SET RETURN CODE              IPOXA\n         BSM   0,14                RETURN TO CALLER IN ITS MODE IPOXA\n         EJECT\nMSGRTN   DS    0H                  MESSAGE(WTO) ROUTINE\n         STM   R14,R01,SAVEAR2     SAVE A FEW REGISTERS\n         LA    R01,L'WTO1TXT+K4    GET LENGTH FOR WTO\n         STH   R01,WTO1LEN         STORE IN WTO PARM LIST\n         MVC   WTO1MCS,MCSFLAG     MOVE IN MCSFLAG\n         MVC   WTO1DESC,DESC       MOVE IN DESCRIPTOR CODES\n         MVC   WTO1ROUT,ROUT       MOVE IN ROUTE CODES\n         MVI   WTO1TXT,C'-'        MOVE IN MESSAGE PREFIX\n         WTO   MF=(E,WTO1)         ISSUE WTO\n         LM    R14,R01,SAVEAR2     RESTORE REGISTERS\n         BR    R14                 RETURN TO CALLER\n***********************************************************************\n*                                                                     *\n*  COUNT CONVERSION ROUTINE: CONVERTS BINARY TO CHARACTER OUTPUT      *\n*        INPUT   REG 1 HAS COUNT TO BE CONVERTED                      *\n*        OUTPUT  DWORD COUNTAINS CHARACTER OUTPUT FIELD               *\n*                                                                     *\n***********************************************************************\nPCOUNT   SAVE  (14,12)             SAVE CALLER'S REGISTERS\n         CVD   R01,DWORD           CONVERT COUNT TO DECIMAL\n         MVC   EDWORK2,EDMASK2     MOVE IN EDIT MASK\n         ED    EDWORK2,DWORD+K2    CONVERT TO CHARACTER\n         CP    DWORD,P99999        IS COUNT>99999?\n         BNH   NOFLOAT             NO, BR PAST FLOAT CODE\n         MVC   DWORD(L'DWORD-K1),EDWORK2+K2 SHIFT IT RIGHT 3 DEC DIGTS\n         MVI   DWORD+L'DWORD-K1,CK MOVE A 'K' FOR THOUSANDS\n         B     PCNTEX              BR TO RETURN\nNOFLOAT  MVC   DWORD,EDWORK2+K4    MOVE IN UNFLOATED COUNT\nPCNTEX   RETURN (14,12)            RETURN TO CALLER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  CLOCK CONVERSION ROUTINE: CONVERTS BINARY TO CHARACTER OUTPUT      *\n*        INPUT   REG 1 HAS FIRST TIME                                 *\n*                REG 0 HAS SECOND TIME\n*        OUTPUT  DWORD COUNTAINS CHARACTER OUTPUT FIELD               *\n*                                                                     *\n***********************************************************************\nPCLOCK   SAVE  (14,12)             SAVE CALLER'S REGISTERS\n         SR    R01,R00             GET TIME DIFFERENCE\n         BNL   LSTH24              IF DIFFERENCE>=0 THEN SKIP\n         A     R01,HR24            ELSE ADD 24 HOURS TO TIME\nLSTH24   DS    0H                  SKIPPED TO HERE\n         SLR   R00,R00             ZERO REG FOR DIVIDE\n         D     R00,F6              DIVIDE TIME BY 6\n         C     R01,TOVER           IF TIME<MAX THEN\n         BL    NOTOVER              BR TO CONVERT IT\n         MVI   DWORD,CASTR         ELSE OVERFLOW FILL WITH\n         MVC   DWORD+K1(L'DWORD-K1),DWORD ********\n         B     PCLKEX              BR TO RETURN\nNOTOVER  CVD   R01,DWORD           CONVERT TIME TO DECIMAL\n         MVC   EDWORK,EDMASK       MOVE IN EDIT MASK\n         ED    EDWORK,DWORD+K4     CONVERT TO CHARACTER\n         MVC   DWORD,EDWORK+K1     MOVE TO RETURN AREA\nPCLKEX   RETURN (14,12)            RETURN TO CALLER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*  CONDITION CODE CONVERSION ROUTINE: CHARACTER OUTPUT INTO RC FIELD  *\n*        INPUT   REG 0 HAS            STEP TERM CONDTION CODE         *\n*                REG 1 HAS ADDRESS OF STEP TERM INDICATOR FIELD       *\n*        OUTPUT  FIELD RC OF OUTPUT LINE CONTAINS RETURN CODE         *\n*                                                                     *\n***********************************************************************\nPRETCDE  SAVE  (14,12)             SAVE CALLER'S REGISTERS\n         TM    K0(R01),SMF30FLH    WAS STEP FLUSHED             MSEIPO4\n         BNO   NOFLUSH             NO,BRANCH PAST\n         MVC   RC,=C'FLUSH'        MOVE IN FLUSHED MESSAGE\n         B     PRETEXT             BR TO RETURN\nNOFLUSH  TM    K0(R01),SMF30ABD    DID IT ABEND?                MSEIPO4\n         BO    STPABEND            YES, GO CONVERT ABEND CODE\n         N     R00,=A(X'FFF')      ZERO UNUSED PORTION\n         CVD   R00,RWORK           GET ADDRESS OF COND FIELD\n         MVC   RC-K1(L'RC+K1),=X'402020212020' MOVE IN EDIT MASK\n         ED    RC-K1(L'RC+K1),RWORK+K5 CONVERT RET CODE TO CHAR\n         B     PRETEXT             BR TO RETURN\nSTPABEND CLM   R00,2,=X'80'        WAS IT A USER ABEND CODE?\n         BL    SYSABND             NO, PROCESS SYSTEM ABEND CODE.\n         N     R00,=A(X'FFF')      TURN OFF X'80' BIT\n         CVD   R00,RWORK           CONVERT FOR OUTPUT\n         MVC   RC-K1(L'RC+K1),=X'402120202020' MOVE IN EDIT MASK\n         ED    RC-K1(L'RC+K1),RWORK+K5 CONVERT TO CHARACTER\n         MVI   RC,C'U'             MOVE IN 'U' USER ABEND\n         B     PRETEXT             BR TO RETURN\nSYSABND  STH   R00,RWORK           STORE ABEND CODE\n         UNPK  RWORK+K3(K5),RWORK(K3) ADD ZONES TO CC FIELD\n         TR    RWORK+K4(K3),TRTAB-C0 TRANSLATE TO CHARACTERS\n         MVC   RC+K2(L'RC-K2),RWORK+K4  MOVE TO OUTPUT LINE\n         MVC   RC(K2),=C'*S'       MOVE IN S FOR SYSTEM ABEND\nPRETEXT  RETURN (14,12)            RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*  ESTAE EXIT ROUTINE                                                 *\n*                                                                     *\n***********************************************************************\nRECOVERY DS    0H\n         USING *,R15               SET UP ADDRESSABILITY\n         LA    R04,K4              PUT 4 IN REGISTER FOR COMPARE\n         CR    R00,R04             IS SDWA PRESENT?\n         BNE   HAVESDWA            YES, BR TO PROCESS WITH SDWA\n         L     R00,K0(R02)         LOAD RETRY ADDRESS FROM PARAM LIST\n         LA    R15,K4              SET RETCODE TO RETRY ADDR IN R00\n         BR    R14                 RETURN TO PROCESSOR WITH RETRY ADDR\nHAVESDWA DS    0H                  ENTER HERE IF SDWA PRESENT\n         ST    R14,KC(R13)         SAVE RETURN ADDRESS\n         L     R02,K0(R01)         LOAD PARAM LIST ADDR FROM SDWA\n         L     R02,K4(R02)         LOAD RETRY ADDRESS\n         SETRP RC=4,,RETADDR=(2),RETREGS=YES,FRESDWA=YES,REGS=(14)\n         DROP  R15\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*  ESTAE RETRY ROUTINE WHEN NO SDWA WAS PRESENT                       *\n*                                                                     *\n***********************************************************************\nRTRYRTN1 DS    0H                  RETRY ROUTINE WITH NO SDWA PRESENT\n         LM    R12,R13,K8(R01)     LOAD REGS FOR ESTAE PARM LIST\n         B     RTRYRTN2            AND GET OUT\n         EJECT\n*\n*  OUTPUT LINE DSECT FOR STEP TERMINATION MESSAGE\n*\nLINE2    DSECT\n         DS    C\nJOBNAME  DS    CL8                 JOB NAME\n         DS    C\nSTEPNAME DS    CL8                 STEPNAME\n         DS    C\nPROCSTEP DS    CL8                 PROCEDURE STEP NAME\n         DS    C\nRC       DS    XL5                 RETURN/ABEND CODE\n         DS    C\nEXCP     DS    XL6                 EXCP COUNT\n*DEVICE CONNECT TIME IS ALSO COLLECTED IN XA                     IPOXA\n         DS    C                                                 IPOXA\nCONN     DS    XL6                 DEVICE CONNECT TIME           IPOXA\n         DS    C\nTCB      DS    XL6                 TCB CPU TIME\n         DS    C\nSRB      DS    XL6                 SRB CPU TIME\n         DS    C\nCLOCK    DS    XL6                 ELAPSED TIME\n         DS    C\nSERV     DS    XL6                 SERVICE UNITS\n         DS    C\nPG       DS    XL3                 PERFORMANCE GROUP\n         DS    C\nPAGE     DS    XL5                 NUMBER OF PAGE-INS + PAGE OUTS IPOXA\n         DS    C\nSWAP     DS    XL5                 NUMBER OF PAGES XFER'D ON SWAP IPOXA\n         DS    C\nVIO      DS    XL5                 NUMBER OF PAGES XREF'D FOR VIO IPOXA\n         DS    C\nSWAPS    DS    XL5                 NUMBER OF SWAPS\nLLINE2   EQU   *-LINE2\n*\nBLDL     DSECT                     BLDL PARM LIST\nBLDLFF   DS   H                    TOTAL LENGTH OF PARMLIST\nBLDLLL   DS   H                    LENGTH OF EACH ENTRY\nBLDLNAME DS   CL8                  MEMBERNAME\nBLDLTTR  DS   XL3                  TTR OF MEMBER\nBLDLK    DS   X                    K FIELD\nBLDLZ    DS   X                    Z FIELD\nBLDLC    DS   X                    C FIELD\nBLDLUSER DS   CL44                 USER DATA FIELD\nBLDLELEN EQU  *-BLDLNAME\nBLDLLEN  EQU  *-BLDLFF\n*\nIEFACTRT CSECT\nLINE3    DS    0CL(LLINE2)         OUTPUT LINE HEADER\n         DC    C' '\n         DC    CL30'JOBNAME  STEPNAME PROCSTEP'\n         DC    C'RC'\n         DC    CL3' '\n         DC    C'EXCP'\n         DC    CL3' '                                             IPOXA\n         DC    C'CONN'                                            IPOXA\n         DC    CL4' '\n         DC    C'TCB'\n         DC    CL4' '\n         DC    C'SRB'\n         DC    CL2' '\n         DC    C'CLOCK'\n         DC    CL3' '\n         DC    C'SERV'\n         DC    CL2' '\n         DC    C'PG'\n         DC    CL2' '                                         IPOXA\n         DC    C'PAGE'\n         DC    CL2' '                                         IPOXA\n         DC    C'SWAP'\n         DC    CL3' '                                         IPOXA\n         DC    C'VIO'\n         DC    CL1' '\n         DC    C'SWAPS'\nLLINE3   EQU   *-LINE3\n         ORG   LINE3+LLINE2\n*\nLINE3A   DS    0CL(LLINE2)         OUTPUT LINE FIRST HEADER\n         DC    C' '\n         DC    CL48' '                                            IPOXA\n         DC    CL2'--'\n         DC    C'TIMINGS (MINS.)'\n         DC    CL2'--'\n         DC    CL12' '\n         DC    CL4'----'   12\n         DC    C'PAGING COUNTS'  3456\n         DC    CL3'---'   789\n         DC    CL6' '\n         ORG   LINE3A+LLINE2\n*\nLINE4    DC    CL(LLINE2)' '       JOB TERMINATION MESSAGE LINE\n         ORG   LINE4\n         DC    C' '\n         DC    C'XXXXXXXX ENDED.  NAME-XXXXXXXXXXXXXXXXXXXX TOTAL TCB CC\n               PU TIME=XXX.XX  TOTAL ELAPSED TIME=XXXX.X'\n*                012345678901234567890123456789012345678901234567890123\n*         50-> 45678901234567890123456789012345678901234567890123456789\n         ORG   LINE4+LLINE2\nLINE4J   EQU   1,8         OFFSET OF JOBNAME IN LINE4 TEXT\nLINE4N   EQU   23,20       OFFSET OF NAME IN LINE4 TEXT\nLINE4C   EQU   63,6        OFFSET OF TCB CUP TIME IN LINE4 TEXT\nLINE4E   EQU   90,6        OFFSET OF ELAPSED TIME IN LINE4 TEXT\n*\nR30CODE  DC    F'20'               CODE FOR NEW RECORD 30       MSEIPO4\nR30STEP  DC    H'4'                  STEP TERMINATION           MSEIPO4\nR30JOB   DC    H'5'                  JOB TERMINATION            MSEIPO4\nF6       DC    F'6'\nTOVER    DC    F'10000000'         OVERFLOW CONSTANT\nF1000    DC    F'1000'             ONE THOUSAND\nHR24     DC    A(24*60*60*100)     24 HRS IN .01 SECONDS\nMCSFLAG  DC    B'1000000000000100' ROUT, SUPRESS HARDCPY\n*                0123456789ABCDEF\nDESC     DC    B'0000000000000000' NO DEC CODES\n*                1234567890123456\nROUT     DC    B'0000000000000100' ROUT CODE=14\n*                1234567890123456\nEDMASK   DC    XL9'40202020214B202020'\nP99999   DC    P'99999'\nEDMASK2  DC    XL12'402020202020202020202120'\nTRTAB    DC    C'0123456789ABCDEF'\n*\n* DEFINE ESTAE LIST FORM\n*\nESTAEL   ESTAE MF=L               CREATE MODEL ESTAE PARM LIST\nLESTAEL  EQU   *-ESTAEL           NAME ITS LENGTH\n*\n* DEFINE LINK  LIST FORM\n*\nLINKL    LINK  DE=0,SF=L          CREATE MODEL LINK PARM LIST\nLLINKL   EQU   *-LINKL            NAME ITS LENGTH\n*\nDATA     DSECT\nSAVE     DS    18F              SAVE AREA FOR REGISTERS ON ENTRY\n         ORG   SAVE\nSAVEXX   DS    F\nSAVEBK   DS    F\nSAVEFW   DS    F\nSAVER14  DS    F\nSAVER15  DS    F\nSAVER0   DS    F\nSAVER1   DS    F\n         DS    11F\n*\nDWORD    DS    D\nRWORK    DS    D\n*\nLINKE    DS    XL(LLINKL)       LINK PARM LIST AREA\nESTAEW   DS    XL(LESTAEL)      ESTAE PARM LIST AREA\nESTAPARM DS    4F               PARAMETER LIST PASSED TO RETRY ROUTINE\n*              RETRY ROUTINE ADDRESS  NO SWDA OBTAINED\n*              RETRY ROUTINE ADDRESS  SWDA OBTAINED\n*              BASE REGISTER R12\n*              DATA REGISTER R13\n*\nSAVEAR2  DS    6F               INTERNAL SAVE REGISTER SAVE AREA\n*\nPARMS    DS    0F               PARMS PASSED IN REG 1 TO ROUTINE\nPARMEPRM DS    F                PTR TO COMMON EXIT PARAMETER AREA\nPARMSTEP DS    F                PTR TO STEPNAME FIELD\nPARMPROG DS    F                PTR TO PROGRAMMER NAME FIELD\nPARMJOBC DS    F                PTR TO JOB TCB CPU TIME FIELD\nPARMACCT DS    F                PTR TO JOB ACCOUNTING FIELDS\nPARMSTPC DS    F                PTR TO STEP TCB CPU TIME FIELD\nPARMSACT DS    F                PTR TO STEP ACCOUNTING FIELDS\nPARMINDC DS    F                PTR TO CANCEL FLAG & STEP NUMBER\nPARMCOND DS    F                PTR TO CONDITION CODE FIELD\nPARMRECD DS    F                PTR TO SMF RECORD TO BE WRITTEN\nLPARMS   EQU   *-PARMS\n*\nBLDLWORK DS    CL(BLDLLEN)\n*\nEDWORK   DC    XL9'00'\nEDWORK2  DC    XL12'00'\n*\nLWTO1    EQU   LLINE2+KA\n         DS    0F\nWTO1     DS    0CL(LWTO1)\nWTO1LEN  DS    XL2\nWTO1MCS  DS    XL2\nWTO1TXT  DS    CL(LLINE2)       MESSAGE TEXT\nWTO1DESC DS    XL2\nWTO1ROUT DS    XL2\n*\n         EJECT\n         IFASMFR 30                SMF TYPE 30 RECORD           MSEIPO4\nSMF30XA  EQU   X'04'               HEADER INDICATES MVS/XA RECORD IPOXA\n         EJECT\n         PRINT OFF\n         IEFJMR                    JMR MAPS COMMON PARAMETER AREA\n         EJECT\n         IHASDWA DSECT=YES         SDWA FOR ESTAE/SETRP MACRO\n         PRINT ON\nDATA     DSECT\n         DS    6D             RESERVE FOR ZAPS\nLDATA    EQU   *-DATA\nIEFACTRT CSECT\n         LTORG ,\n         DS    0D\nDATALEN  DC    0F'0',AL1(SUBPOOL),AL3(LDATA)\nMODLEN   EQU   *-IEFACTRT\nLPATCH   EQU   (MODLEN+K9)/KA/K8+K1 ADD 10% FOR PATCH AREA\nLPATCHL  DC    AL2(LPATCH*K8)\nSPATCH   DC    S(PATCH)\nPATCH    DC    (LPATCH)D'00'\n         SPLEVEL SET          RESET TO DEFAULT                  IPOXA\n         END   IEFACTRT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPM011": {"ttr": 5640, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17\\x9f\\x00\\x90\\x17\\x9f\\x14 \\x00\\x03\\x00\\x03\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-28T00:00:00", "modifydate": "1990-06-28T14:20:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "FCHLAY"}, "text": "++ FUNCTION (NAPM011) .\n++ VER (Z038) .\n++ MOD(IGC244) LMOD(IEANUC01) DISTLIB(RESLIB13) LKLIB(RESLIB13) .\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPTM01": {"ttr": 5642, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x90\\x17\\x9f\\x00\\x90\\x17\\x9f\\x14\\x00\\x00\\x17\\x00\\x17\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-06-28T00:00:00", "modifydate": "1990-06-28T14:00:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPTM01) .\n++ VER(Z038) FMID(HTE21C2) PRE(UY37890).\n++ MACUPD(IKJPSCB)                                   .\n./ CHANGE NAME=IKJPSCB\n*** START --- NORTH AMERICAN PHILIPS LIGHTING MOD PROLOG ------ NAPTM01\n***                                                             NAPTM01\n*** FUNCTION.  MODIFY THE CONTROL BLOCK TO SUPPORT VARIOUS      NAPTM01\n***            PRODUCT USER EXITS BY DEFINING PSCBATR2,         NAPTM01\n***            INSTALLATION DEFINABLE DATA AS A 15 BIT STRING   NAPTM01\n***            WITH EQUATES FOR THE BITS                        NAPTM01\n***                                                             NAPTM01\n*** CHANGE ACTIVITY.                                            NAPTM01\n***                                                             NAPTM01\n***                                                             NAPTM01\n*** AUTHOR(S).                                                  NAPTM01\n***                                                             NAPTM01\n***            CLARK MORRIS, NORTH AMERICAN PHILIPS LIGHTING    NAPTM01\n***            201-563-3575                                     NAPTM01\n***                                                             NAPTM01\n*** END --- NORTH AMERICAN PHILIPS LIGHTING TSO MOD PROLOG ---- NAPTM01\nPSCBLGTS EQU   X'80'      APPLICATION SUPERVISOR AUTHORITY      NAPTM01\nPSCBLGTT EQU   X'40'      TECH SERVICES AUTHORITY               NAPTM01\nPSCBLGTL EQU   X'20'      PROD LIBRARY UPDATE AUTHORITY         NAPTM01\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPTM02": {"ttr": 5644, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x90\\x17\\x9f\\x00\\x90\\x17\\x9f\\x14\\x00\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-06-28T00:00:00", "modifydate": "1990-06-28T14:00:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD(NAPTM02) .\n++ VER(Z038) FMID(HTE21C2) PRE(UY28203).\n++ MACUPD(IKJEFFIE)                                  .\n./ CHANGE NAME=IKJEFFIE\n*** START --- NORTH AMERICAN PHILIPS LIGHTING MOD PROLOG ------ NAPTM02\n***                                                             NAPTM02\n*** FUNCTION.  MODIFY THE CONTROL BLOCK TO SUPPORT IKJEFF10     NAPTM02\n***            AT LIGHTING.  IEEXITWD IS REDEFINED AS A BIT     NAPTM02\n***            SWITCH IN A WAY THAT THE DEFINITION CAN BE       NAPTM02\n***            MOVED TO A GETMAINED AREA WITH LITTLE TROUBLE    NAPTM02\n***            IF NECESSARY                                     NAPTM02\n***                                                             NAPTM02\n*** CHANGE ACTIVITY.                                            NAPTM02\n***                                                             NAPTM02\n***                                                             NAPTM02\n*** AUTHOR(S).                                                  NAPTM02\n***                                                             NAPTM02\n***            CLARK MORRIS, NORTH AMERICAN PHILIPS LIGHTING    NAPTM02\n***            201-563-3575                                     NAPTM02\n***                                                             NAPTM02\n*** END --- NORTH AMERICAN PHILIPS LIGHTING TSO MOD PROLOG ---- NAPTM02\n*  AT LIGHTING THE FOLLOWING REDEFINITION IS USED\n         ORG   IEEXITWD                                         NAPTM02\nIEEXITU1 DS    XL1        . BIT SWITCH FOR TRACKING             NAPTM02\nUSRRPTMS EQU   X'80'      ON - REPEAT THE MESSAGE               NAPTM02\nUSRPURGE EQU   X'40'      ON - /*PURGE CARD ALREADY SUBMITTED   NAPTM02\nUSRJOBCL EQU   X'20'      ON - A VALID JOBCLASS WAS FOUND ON    NAPTM02\n*                              THE JOBCARD                      NAPTM02\nUSRMSGDN EQU   X'10'      ON -                                  NAPTM02\nUSRMSGRP EQU   X'08'                                            NAPTM02\nIEEXITUR DS    XL3        . REMAINDER OF EXIT WORD              NAPTM02\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPT001": {"ttr": 5646, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00\\x00\\x00\\x90\\x17\\x8f\\x00\\x90\\x17\\x9f\\x13'\\x02W\\x02W\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "1990-06-27T00:00:00", "modifydate": "1990-06-28T13:27:00", "lines": 599, "newlines": 599, "modlines": 0, "user": "FCHLAY"}, "text": "++ USERMOD (NAPT001) .\n++ VER (Z038) FMID(HTE21C2).\n++JCLIN.\n//STEP1    EXEC PGM=IEV90\n//SYSPUNCH DD  DSN=&&PUNCH(IKJEFF53),DISP=SHR\n//SYSIN  DD  SYS1.USERSRC(IKJEFF53),DISP=SHR\n++SRC (IKJEFF53) DISTLIB(USERSRC).\n*          DATA SET IKJEFF53CM AT LEVEL 002 AS OF 05/19/88\nIKJEFF53 TITLE 'MVS CUSTOM-BUILT IPO SUPPLIED FIB INSTALLATION EXIT    C00001**2\n                        '                                               00002**2\n*/*                                                                     00003**2\n*/* LIB: IPO1.SAMPLIB(IKJEFF53)                                         00004**2\n*/* GDE: CBIPO MVS CUSTOMIZATION                                        00005**2\n*/* DOC: THIS IS THE ASSEMBLER SOURCE CODE FOR THE                      00006**2\n*/*      SAMPLE MVS CUSTOM-BUILT IPO TSO OUTPUT, STATUS AND             00007**2\n*/*      CANCEL EXIT ROUTINE.                                           00008**2\n*/*                                                                     00009**2\n*             MODULE NAME = IKJEFF53                                  * 00010**2\n*                                                                     * 00011**2\n*             DESCRIPTIVE NAME =  MVS CUSTOM-BUILT IPO                * 00012**2\n*                SUPPLIED FIB EXIT FOR TSO                            * 00013**2\n*                CANCEL, OUTPUT AND STATUS COMMANDS                   * 00014**2\n*                                                                     * 00015**2\n*             FUNCTION =                                              * 00016**2\n*                VALIDITY CHECKS JOBNAME ON A CANCEL, OUTPUT OR       * 00017**2\n*                STATUS FIB (FOREGROUND INITIATED BACKGROUND)         * 00018**2\n*                COMMAND.  ALLOWS FOR STATUS WITH JOBNAME 'TSO'       * 00019**2\n*                                                                     * 00020**2\n*                OPERATION =                                          * 00021**2\n*                   STATUS:  IF JOBNAME IS NOT 'TSO' RETURN TO        * 00022**2\n*                   CALLER SINCE ANY JOBNAME WILL BE ALLOWED.         * 00023**2\n*                   IF JOBNAME IS 'TSO' PUT OUT LIST OF USERIDS       * 00024**2\n*                   WITH ADDRESS SPACE ID AND TERMINAL ADDRESS        * 00025**2\n*                   OR SYMBOLIC TERMINAL NAME (TSO/VTAM).             * 00026**2\n*                   RETURN TO CALLER WITH RETURN CODE OF 12 TO        * 00027**2\n*                   SKIP JOBNAME SEARCH FOR 'TSO'.                    * 00028**2\n*                                                                     * 00029**2\n*                   OUTPUT:  FIRST CHECK IF THE USER HAS OPERATOR     * 00030**2\n*                   AUTHORITY.  IF YES, ALLOW THE USER TO OUTPUT      * 00031**2\n*                   ANY JOBNAME.  IF THE USER DOES NOT HAVE OPERATOR  * 00032**2\n*                   AUTHORITY COMPARE THE USERID WITH THE JOBNAME     * 00033**2\n*                   PASSED.  IF THE JOBNAME IS NOT THE USERID OR      * 00034**2\n*                   DOES NOT START WITH THE USERID, THE JOBNAME       * 00035**2\n*                   IS REJECTED BY FIRST RETURNING TO THE CALLER      * 00036**2\n*                   AN ERROR MESSAGE AND A RETURN CODE REQUESTING     * 00037**2\n*                   THAT THE MESSAGE BE ISSUED VIA THE PUTLINE        * 00038**2\n*                   MECHANISM.  WHEN REENTERED FOR THE JOBNAME,       * 00039**2\n*                   THE EXIT ISSUES A RETURN CODE REJECTING THE       * 00040**2\n*                   JOBNAME.                                          * 00041**2\n*                                                                     * 00042**2\n*                   CANCEL:  FIRST CHECK IF THE USER HAS OPERATOR     * 00043**2\n*                   AUTHORITY.  IF YES, ALLOW THE USER TO CANCEL      * 00044**2\n*                   ANY JOBNAME (THE MVS SYSTEM WILL PREVENT THE      * 00045**2\n*                   USER FROM CANCELLING STARTED TASKS AND TSO        * 00046**2\n*                   SESSIONS).  IF THE USER DOES NOT HAVE OPERATOR    * 00047**2\n*                   AUTHORITY COMPARE THE USERID WITH THE JOBNAME     * 00048**2\n*                   PASSED.  IF THE JOBNAME IS NOT THE USERID PLUS    * 00049**2\n*                   AT LEAST ONE CHARACTER, THE JOBNAME IS REJECTED   * 00050**2\n*                   BY FIRST RETURNING TO THE CALLER AN ERROR         * 00051**2\n*                   MESSAGE AND A RETURN CODE REQUESTING THAT THE     * 00052**2\n*                   THAT THE MESSAGE BE ISSUED VIA THE PUTLINE        * 00053**2\n*                   MECHANISM.  WHEN REENTERED FOR THE JOBNAME,       * 00054**2\n*                   THE EXIT ISSUES A RETURN CODE REJECTING THE       * 00055**2\n*                   JOBNAME.                                          * 00056**2\n*                                                                     * 00057**2\n*              NOTES =                                                * 00058**2\n*                                                                     * 00059**2\n*                 DEPENDENCIES = CHARACTER IS EBCDIC.  REASSEMBLE     * 00060**2\n*                    IF A DIFFERENT CHARACTER SET IS NEEDED.          * 00061**2\n*                                                                     * 00062**2\n*                 RESTRICTIONS = USES SPKA FORM OF MODESET MACRO      * 00063**2\n*                    INSTRUCTION SO MUST RUN SUPERVISOR STATE.        * 00064**2\n*                                                                     * 00065**2\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        * 00066**2\n*                    REGISTERS 0,1     = WORK REGISTERS               * 00067**2\n*                    REGISTER  2       = MODESET KEYADDR              * 00068**2\n*                    REGISTER  3       = WORK REGISTER                * 00069**2\n*                    REGISTERS 4       = ADDRESSABILITY TO EXIT       * 00070**2\n*                                              PARAMETER LIST         * 00071**2\n*                    REGISTER  5       = RETURN CODE / ASVT MAXUSERS  * 00072**2\n*                    REGISTERS 6,7,8,9 = WORK REGISTERS               * 00073**2\n*                    REGISTER  10      = ADDRESSABILITY TO REJECT     * 00074**2\n*                                              MESSAGE GETMAINED AREA * 00075**2\n*                    REGISTER  11      = ADDRESSABILITY TO GETMAINED  * 00076**2\n*                                              DATA AREA              * 00077**2\n*                    REGISTER  12      = ADDRESSABILITY TO IKJEFF53   * 00078**2\n*                                              CSECT                  * 00079**2\n*                    REGISTER  13      = SAVE AREA REGISTER           * 00080**2\n*                    REGISTERS 14,15   = WORK REGISTERS               * 00081**2\n*                                                                     * 00082**2\n*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        * 00083**2\n*                   'ZAP*'S)                                          * 00084**2\n*                                                                     * 00085**2\n*             MODULE TYPE = PROCEDURE                                 * 00086**2\n*                                                                     * 00087**2\n*                PROCESSOR = ASM                                      * 00088**2\n*                                                                     * 00089**2\n*                MODULE SIZE = 1K                                     * 00090**2\n*                                                                     * 00091**2\n*                ATTRIBUTES = PROTECT KEY 1, REENTRANT,               * 00092**2\n*                   SUPERVISOR STATE                                  * 00093**2\n*                                                                     * 00094**2\n*             ENTRY POINTS = IKJEFF53 (ONLY ENTRY POINT)              * 00095**2\n*                                                                     * 00096**2\n*                LINKAGE =                                            * 00097**2\n*                   IKJEFF51:  (CANCEL OR STATUS COMMAND) VIA CALL    * 00098**2\n*                   IKJCT469:  (OUTPUT COMMAND) VIA CALL              * 00099**2\n*                                                                     * 00100**2\n*             INPUT = REGISTER 1 POINTS TO PARAMETER LIST MAPPED      * 00101**2\n*                BY IKJEFFIE MACRO                                    * 00102**2\n*                                                                     * 00103**2\n*             OUTPUT = SEE EXIT TOPICAL HEADING BELOW                 * 00104**2\n*                                                                     * 00105**2\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   * 00106**2\n*                                                                     * 00107**2\n*                OUTPUT = NONE                                        * 00108**2\n*                                                                     * 00109**2\n*                RETURN CODE = ZERO                                   * 00110**2\n*                                                                     * 00111**2\n*             EXIT - ERROR = AT PROGRAM END VIA BRANCH REGISTER 14    * 00112**2\n*                                                                     * 00113**2\n*                OUTPUT = MESSAGEP SET IN THE INPUT PARAMETER LIST.   * 00114**2\n*                   IF RETURN IS FROM STATUS FOR JOBNAME 'TSO' THEN   * 00115**2\n*                   RETURN CODE IS 12 AND NO MESSAGE WILL BE ISSUED.  * 00116**2\n*                                                                     * 00117**2\n*                RETURN CODE =                                        * 00118**2\n*                   4  - ISSUE PROMPT AND RETURN REPLY   (IEPROMPT)   * 00119**2\n*                   8  - ISSUE MESSAGE AND RETURN        (IEMSG)      * 00120**2\n*                   12 - REJECT THIS JOB                 (IEREJECT)   * 00121**2\n*                   16 - TERMINATE THIS COMMAND          (IEABORT)    * 00122**2\n*                   (THIS VERSION USES ERROR CODE 8 AND 12)           * 00123**2\n*                                                                     * 00124**2\n*             EXTERNAL REFERENCES =                                   * 00125**2\n*                                                                     * 00126**2\n*                ROUTINES = NONE                                      * 00127**2\n*                                                                     * 00128**2\n*                DATA AREAS = NONE                                    * 00129**2\n*                                                                     * 00130**2\n*                CONTROL BLOCKS = PARMLIST, CVT, ASVT, ASCB, TSB      * 00131**2\n*                                                                     * 00132**2\n*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    * 00133**2\n*                BEGINNING AT LABEL DATA.                             * 00134**2\n*                                                                     * 00135**2\n*             MACROS = IKJEFFIE, FREEMAIN, GETMAIN, SAVE, TPUT, CVT,  * 00136**2\n*                      IKJTSB, IKTTSBX                                * 00137**2\n*                                                                     * 00138**2\n*             CHANGE ACTIVITY =                                         00139**2\n*                                                                     * 00140**2\n*                COMPARE OF USERID AND JOBNAME LENGTH MOVED        CUJ* 00141**2\n*                CHECK FOR INVALID JOBNAME ADDED                   INJ* 00142**2\n*                                                                     * 00143**2\n*             MESSAGES =                                              * 00144**2\n*                                                                     * 00145**2\n*                NO MESSAGES ARE ISSUED BY THIS MODULE UNLESS         * 00146**2\n*                STATUS IS ISSUED FOR JOBNAME 'TSO'.                  * 00147**2\n*                MESSAGE TEXTS ARE, HOWEVER, PASSED BACK TO THE       * 00148**2\n*                CALLER IN AN AREA GETMAINED BY THIS EXIT.            * 00149**2\n*                FOR CANCEL THE MESSAGE IS THAT FOUND AT LABEL        * 00150**2\n*                REJTEXT1.  FOR OUTPUT THE MESSAGE IS THAT FOUND      * 00151**2\n*                AT LABEL REJTEXT2.  FOR STATUS WITH JOBAME 'TSO'     * 00152**2\n*                TPUT IS USED TO PUT OUT LINES OF OUTPUT WHICH        * 00153**2\n*                GIVE USERID, ADDRESS SPACE ID AND TERMINAL           * 00154**2\n*                ADDRESS.  A HEADER LINE IS FOUND AT LABEL            * 00155**2\n*                HEADER AND A TRAILER LINE IS FOUND AT LABEL          * 00156**2\n*                USERS.  IF THIS MODULE ISSUED ITS OWN PUTLINE'S OR   * 00157**2\n*                PUTGET'S WITH SECOND LEVELS, IT WOULD NEED TO DO     * 00158**2\n*                MODESET TO KEY 0 BEFORE ISSUING THE MESSAGE(S).      * 00159**2\n*                THEN DO A MODESET BACK TO KEY 1 BEFORE RETURNING     * 00160**2\n*                TO THE CALLER.                                       * 00161**2\n*                                                                     * 00162**2\n*             ABEND CODES = NONE                                      * 00163**2\n*                                                                     * 00164**2\n*********************************************************************** 00165**2\n         EJECT                                                          00166**2\nIKJEFF53 CSECT                                                          00167**2\n         SAVE  (14,12),,IKJEFF53.IPO.&SYSTIME..&SYSDATE SAVE REGISTERS  00168**2\n*                                      WITH CSECT IDENTIFIER            00169**2\n         BALR  R12,0                   BRANCH AND LOAD REGISTER 12      00170**2\nPSTART   DS    0H                      LABEL USED WHEN ESTABLISHING     00171**2\n         USING PSTART,R12              CSECT ADDRESSABILITY             00172**2\n         L     R0,SIZDATD              LOAD REGISTER 0 WITH SIZE FOR    00173**2\n*                                      GETMAIN                          00174**2\n         GETMAIN R,LV=(0)              ISSUE REGISTER FORM OF GETMAIN   00175**2\n*                                      FOR AREA IN SUBPOOL 0            00176**2\n         LR    R11,R1                  LOAD REGISTER 11 WITH ADDRESS OF 00177**2\n*                                      GETMAINED AREA                   00178**2\n         USING DATD,R11                ESTABLISH ADDRESSABILITY TO      00179**2\n*                                      GETMAINED AREA                   00180**2\n         ST    R13,SAVEAREA+4          SAVE REGISTER 13 FOR SAVEAREA    00181**2\n*                                      CHAINING                         00182**2\n         LM    R0,R1,20(R13)           RELOAD REGISTERS 0 AND 1 FROM    00183**2\n*                                      PREVIOUS SAVEAREA                00184**2\n         ST    R11,8(,R13)             SAVE ADDRESS OF CURRENT SAVEAREA 00185**2\n         LR    R13,R11                 LOAD REGISTER 13 WITH ADDRESS OF 00186**2\n*                                      CURRENT SAVEAREA                 00187**2\n         LR    R4,R1                   LOAD REGISTER 4 WITH POINTER TO  00188**2\n*                                      PARAMETER LIST                   00189**2\n         USING IEPARML,R4              ESTABLISH ADDRESSABILITY TO      00190**2\n*                                      PARAMETER LIST (USES             00191**2\n*                                      IKJEFFIE MAPPING MACRO)          00192**2\n         LA    R5,IECONTIN             INITIALIZE REGISTER 5 FOR RETURN 00193**2\n*                                      CODE FOR NORMAL CASE - JOBNAME   00194**2\n*                                      IS GOOD AND COMMAND SHOULD       00195**2\n*                                      CONTINUE PROCESSING              00196**2\n         SPACE 2                                                        00197**2\n*********************************************************************** 00198**2\n*                                                                     * 00199**2\n*        ALWAYS DO PROCESSING                                         * 00200**2\n*                                                                     * 00201**2\n*********************************************************************** 00202**2\n         SPACE 2                                                        00203**2\n         L     R6,IECODEP              LOAD COMMAND CODE POINTER        00204**2\n         CLI   0(R6),IECANCEL          SEE IF COMMAND IS CANCEL         00205**2\n         BE    PROCESS                 YES....CONTINUE PROCESSING       00206**2\n         CLI   0(R6),IEOUTPUT          SEE IF COMMAND IS OUTPUT         00207**2\n         BE    PROCESS                 YES....CONTINUE PROCESSING       00208**2\n         CLI   0(R6),IESTATUS          SEE IF COMMAND IS STATUS         00209**2\n         BNE   ENDPROC                 NO.....DO NO PROCESSING          00210**2\n*                                      IF INVALID CODE                  00211**2\n         SPACE 2                                                        00212**2\n*********************************************************************** 00213**2\n*                                                                     * 00214**2\n*        SEE IF SECOND TIME ENTRY FOR A JOB -                         * 00215**2\n*           MESSAGE POINTER NOT ZERO                                  * 00216**2\n*                                                                     * 00217**2\n*********************************************************************** 00218**2\n         SPACE 2                                                        00219**2\nPROCESS  DS    0H                                                       00220**2\n         L     R6,IEMSGP               LOAD MESSAGE POINTER             00221**2\n         LTR   R6,R6                   SEE IF MESSAGE ISSUED FOR LAST   00222**2\n*                                      ENTRY                            00223**2\n         BNZ   FREEMESS                YES....GO FREE MESSAGE BUFFER    00224**2\n         SPACE 2                                                        00225**2\n*********************************************************************** 00226**2\n*                                                                     * 00227**2\n*        DETERMINE IF THIS IS FOR CANCEL                              * 00228**2\n*           NO.....GO TO OUTPUT ROUTINE                               * 00229**2\n*           YES....IF USER HAS OPERATOR AUTHORITY THEN O.K.           * 00230**2\n*              ELSE CHECK IF JOBNAME IS VALID FOR CANCEL              * 00231**2\n*              CANCEL NEEDS JOBNAME EQUAL TO USERID                   * 00232**2\n*              PLUS AT LEAST ONE CHARACTER                            * 00233**2\n*                                                                     * 00234**2\n*********************************************************************** 00235**2\n         SPACE 2                                                        00236**2\nVALIDITY DS    0H                                                       00237**2\n         L     R6,IECODEP              LOAD COMMAND POINTER             00238**2\n         CLI   0(R6),IECANCEL          SEE IF COMMAND IS CANCEL         00239**2\n         BNE   OUTPUT                  NO.....GO SEE IF OUTPUT COMMAND  00240**2\n         EXTRACT PSCBADDR,'S',FIELDS=PSB,MF=(E,EXTLIST)                 00241**2\n*                                      GET ADDRESS OF PROTECTED STEP    00242**2\n*                                      CONTROL BLOCK                    00243**2\n         L     R1,PSCBADDR             LOAD POINTER TO PSCB             00244**2\n         TM    PSCBATR1(R1),PSCBCTRL   SEE IF USER HAS OPERATOR         00245**2\n*                                      AUTHORITY                        00246**2\n         BO    ENDPROC                 YES....GO TO END OF PROCEDURE    00247**2\n*                                      O.K. TO CANCEL ANY JOBNAME       00248**2\n         L     R15,IEIDLENP            LOAD USERID LENGTH POINTER       00249**2\n         CLI   0(R15),0                CHECK WHETHER JOBNAME IS VALID   00250**2\n         BE    BADJOBN                 JOBNAME IS INVALID IF USERID     00251**2\n*                                      IS NOT AVAILABLE (LENGTH=0 FOR   00252**2\n*                                      FOR TSO COMMANDS IN BACKGROUND)  00253**2\n         SLR   R14,R14                 ZERO REGISTER 14                 00254**2\n         IC    R14,0(,R15)             INSERT USERID LENGTH INTO        00255**2\n*                                      REGISTER 14 AND LOAD             00256**2\n         L     R6,IENAMELP             LOAD JOBNAME LENGTH POINTER  CUJ 00257**2\n         CH    R14,0(,R6)              SEE IF USERID LENGTH IS      CUJ 00258**2\n*                                      SHORTER THAN JOBNAME LENGTH  CUJ 00259**2\n         BNL   BADJOBN                 NO.....GO BUILD INVALID      CUJ 00260**2\n*                                      JOBNAME MESSAGE              CUJ 00261**2\n         L     R6,IEUSRIDP             LOAD USERID POINTER          CUJ 00262**2\n         L     R1,IEJOBNMP             LOAD JOBNAME POINTER         CUJ 00263**2\n         BCTR  R14,0                   DECREMENT R14 FOR            CUJ 00264**2\n         EX    R14,JOBNCOMP            EXECUTE OF COMPARE           CUJ 00265**2\n         BNE   BADJOBN                 NO.....GO BUILD INVALID JOBNAME  00266**2\n*                                      MESSAGE                          00267**2\n         B     ENDPROC                 GO ACCEPT JOBNAME                00268**2\n         SPACE 2                                                        00269**2\n*********************************************************************** 00270**2\n*                                                                     * 00271**2\n*        SEE IF THIS IS OUTPUT COMMAND                                * 00272**2\n*           NO.....GO TO STATUS ROUTINE                               * 00273**2\n*           YES....IF USER HAS OPERATOR AUTHORITY THEN O.K.           * 00274**2\n*              ELSE CHECK IF JOBNAME IS VALID FOR OUTPUT              * 00275**2\n*              OUTPUT NEEDS JOBNAME EQUAL TO USERID OR                * 00276**2\n*              EQUAL TO USERID PLUS AT LEAST ONE CHARACTER            * 00277**2\n*                                                                     * 00278**2\n*********************************************************************** 00279**2\n         SPACE 2                                                        00280**2\nOUTPUT   DS    0H                                                       00281**2\n         CLI   0(R6),IEOUTPUT          SEE IF COMMAND IS OUTPUT         00282**2\n         BNE   STATUS                  NO.....GO SEE IF STATUS COMMAND  00283**2\n         EXTRACT PSCBADDR,'S',FIELDS=PSB,MF=(E,EXTLIST)                 00284**2\n*                                      GET ADDRESS OF PROTECTED STEP    00285**2\n*                                      CONTROL BLOCK                    00286**2\n         L     R1,PSCBADDR             LOAD POINTER TO PSCB             00287**2\n         TM    PSCBATR1(R1),PSCBCTRL   SEE IF USER HAS OPERATOR         00288**2\n*                                      AUTHORITY                        00289**2\n         BO    ENDPROC                 YES....GO TO END OF PROCEDURE    00290**2\n*                                      O.K. TO OUTPUT ANY JOBNAME       00291**2\n         L     R15,IEIDLENP            LOAD USERID LENGTH POINTER       00292**2\n         CLI   0(R15),0                CHECK WHETHER JOBNAME IS VALID   00293**2\n         BE    BADJOBN                 JOBNAME IS INVALID IF USERID     00294**2\n*                                      IS NOT AVAILABLE (LENGTH=0 FOR   00295**2\n*                                      FOR TSO COMMANDS IN BACKGROUND)  00296**2\n         SLR   R14,R14                 ZERO REGISTER 14                 00297**2\n         IC    R14,0(,R15)             INSERT USERID LENGTH INTO        00298**2\n*                                      REGISTER 14                      00299**2\n         L     R6,IENAMELP             LOAD JOBNAME LENGTH POINTER  CUJ 00300**2\n         CH    R14,0(,R6)              SEE IF USERID LENGTH         CUJ 00301**2\n*                                      IS EQUAL TO OR SHORTER       CUJ 00302**2\n*                                      THAN JOBNAME LENGTH          CUJ 00303**2\n         BH    BADJOBN                 NO.....GO BUILD INVALID      CUJ 00304**2\n*                                      JOBNAME MESSAGE              CUJ 00305**2\n         L     R6,IEUSRIDP             LOAD USERID POINTER          CUJ 00306**2\n         L     R1,IEJOBNMP             LOAD JOBNAME POINTER         CUJ 00307**2\n         BCTR  R14,0                   DECREMENT R14 FOR                00308**2\n         EX    R14,JOBNCOMP            EXECUTE OF COMPARE               00309**2\n         BE    ENDPROC                 EQUAL..RETURN TO CALLER          00310**2\n         SPACE 2                                                        00311**2\n*********************************************************************** 00312**2\n*                                                                     * 00313**2\n*        REJECT THIS INVALID JOBNAME AND BUILD INVALID JOBNAME        * 00314**2\n*           MESSAGE                                                   * 00315**2\n*                                                                     * 00316**2\n*********************************************************************** 00317**2\n         SPACE 2                                                        00318**2\nBADJOBN  DS    0H                      BUILD BAD JOBNAME MESSAGE        00319**2\n         L     R0,GETMINFO             SUBPOOL 0, LENGTH DECIMAL 84     00320**2\n         GETMAIN R,LV=(0)              GET MESSAGE BUFFER               00321**2\n         ST    R1,IEMSGP               STORE POINTER TO MESSAGE BUFFER  00322**2\n*                                      INTO PARAMETER LIST              00323**2\n         LR    R10,R1                  LOAD REGISTER 10 WITH ADDRESS OF 00324**2\n*                                      GETMAINED AREA                   00325**2\n         USING REJMSG,R10              ESTABLISH REGISTER 10 AS BASE    00326**2\n*                                      FOR REJECT MESSAGE DSECT         00327**2\n         MVI   REJMSG,BLANK            INITIALIZE BUFFER WITH BLANKS    00328**2\n         MVC   REJMSG+1(83),REJMSG                                      00329**2\n         MVC   REJMLEN(2),HALF84       PUT IN MAXIMUM MESSAGE LENGTH    00330**2\n         MVC   REJJOB(4),JOBWORD       PUT IN WORD 'JOB'                00331**2\n         L     R1,IENAMELP             LOAD JOBNAME LENGTH POINTER      00332**2\n         LH    R15,0(,R1)              LOAD JOBNAME LENGTH              00333**2\n         LR    R14,R15                 LOAD REGISTER 14 WITH LENGTH     00334**2\n         BCTR  R14,0                   DECREMENT REGISTER 14 FOR MOVE   00335**2\n         L     R1,IEJOBNMP             LOAD JOBNAME POINTER             00336**2\n         EX    R14,MOVEJOBN            INSERT THE BAD JOBNAME           00337**2\n         AH    R15,HALF2               INDEX PAST BLANK AFTER JOBNAME   00338**2\n         LR    R5,R15                  LOAD REGISTER 5 AS TEMPORARY     00339**2\n*                                      SAVE AREA FOR REGISTER 15        00340**2\n         SPACE 2                                                        00341**2\n*********************************************************************** 00342**2\n*                                                                     * 00343**2\n*        DIFFERENT MESSAGE TEXTS FOR CANCEL AND OUTPUT                * 00344**2\n*                                                                     * 00345**2\n*********************************************************************** 00346**2\n         SPACE 2                                                        00347**2\n         L     R1,IECODEP              LOAD COMMAND POINTER             00348**2\n         CLI   0(R1),IECANCEL          SEE IF COMMAND IS CANCEL         00349**2\n         BNE   OUTPMESS                NO.....GO TO OUTPUT MESSAGE      00350**2\n         ALR   R10,R5                  OFFSET MESSAGE IN BUFFER         00351**2\n         MVC   REJSLOT-1(66),REJTEXT1  MOVE IN TEXT FOR CANCEL          00352**2\n         B     SETRC                   GO SET RETURN CODE               00353**2\nOUTPMESS DS    0H                                                       00354**2\n         ALR   R10,R5                  OFFSET MESSAGE IN BUFFER         00355**2\n         MVC   REJSLOT-1(69),REJTEXT2  MOVE IN TEXT FOR OUTPUT          00356**2\nSETRC    DS    0H                                                       00357**2\n         LA    R5,IEMSG                SET RETURN CODE TO PROMPT        00358**2\n         B     ENDPROC                 GO TO RETURN                     00359**2\n         SPACE 2                                                        00360**2\n*********************************************************************** 00361**2\n*                                                                     * 00362**2\n*        SEE IF THIS IS STATUS COMMAND                                * 00363**2\n*           NO.....GO TO END OF PROCEDURE                             * 00364**2\n*           YES....CHECK IF NAME IS 'TSO'                             * 00365**2\n*              NO.....GO TO END OF PROCEDURE                          * 00366**2\n*              YES....PUT OUT USERIDS, ASIDS, AND ADDRESSES           * 00367**2\n*                                                                     * 00368**2\n*********************************************************************** 00369**2\n         SPACE 2                                                        00370**2\nSTATUS   DS    0H                                                       00371**2\n         CLI   0(R6),IESTATUS          SEE IF COMMAND IS STATUS         00372**2\n         BNE   ENDPROC                 NO.....GO TO END OF PROCEDURE    00373**2\n         L     R1,IEJOBNMP             LOAD POINTER TO JOBNAME          00374**2\n         CLC   TSOWORD,0(R1)           SEE IF JOBNAME IS 'TSO'          00375**2\n         BNE   ENDPROC                 NO.....GO TO END OF PROCEDURE    00376**2\n         L     R1,IENAMELP             LOAD POINTER TO JOBNAME LENGTH   00377**2\n         CLC   HALF3,0(R1)             SEE IF JOBNAME LENGTH IS 3       00378**2\n         BNE   ENDPROC                 NO.....GO TO END OF PROCEDURE    00379**2\n         L     R15,CVTPTR              LOAD POINTER TO CVT              00380**2\n         USING CVTMAP,R15              ESTABLISH ADDRESSABILITY TO CVT  00381**2\n         L     R6,CVTASVT              LOAD POINTER TO ASVT             00382**2\n         DROP  R15                     DROP ADDRESSABILITY TO CVT       00383**2\n         L     R5,ASVTMAXU(R6)         LOAD MAXIMUM NUMBER OF ADDRESS   00384**2\n*                                      SPACES                           00385**2\n         LA    R6,ASVTENTY-4(R6)       LOAD ADDRESS OF FIRST ASVT ENTRY 00386**2\n*                                      MINUS 4                          00387**2\n         LA    R3,0                    ZERO OUT USER COUNTER            00388**2\n         TPUT  HEADER,L'HEADER         PUT OUT HEADER LINE              00389**2\n         SPACE 2                                                        00390**2\n*********************************************************************** 00391**2\n*                                                                     * 00392**2\n*        GO DOWN THE ADDRESS SPACE VECTOR TABLE                       * 00393**2\n*           SEE IF ADDRESS SPACE CONTROL BLOCK IS FOR A TSO USER      * 00394**2\n*              YES....GET ADDRESS SPACE ID, USERID, AND PHYSICAL      * 00395**2\n*                     TERMINAL ADDRESS AND OUTPUT LINE                * 00396**2\n*              NO.....GO CHECK NEXT ASCB                              * 00397**2\n*                                                                     * 00398**2\n*********************************************************************** 00399**2\n         SPACE 2                                                        00400**2\nASCBNEXT DS    0H                                                       00401**2\n         LTR   R5,R5                   SEE IF MAXUSER COUNTER ZERO      00402**2\n         BZ    LASTASCB                YES....GO HANDLE LAST ASCB       00403**2\n         BCTR  R5,0                    DECREMENT MAXUSER COUNTER        00404**2\n         MVI   LINE,C' '               BLANK OUT THE OUTPUT LINE        00405**2\n         MVC   LINE+1(L'LINE-1),LINE                                    00406**2\n         LA    R6,4(R6)                LOAD ADDRESS OF NEXT ASVT ENTRY  00407**2\n         L     R7,0(R6)                LOAD ADDRESS OF ACSB             00408**2\n         USING ASCB,R7                 ESTABLISH ADDRESSABILITY TO ASCB 00409**2\n         TM    0(R6),X'80'             SEE IF ASID IS AVAILABLE         00410**2\n         BO    ASCBNEXT                YES....GO ON TO NEXT ASVT ENTRY  00411**2\n         CLC   ASCBASCB(4),ASCBWORD    ENSURE CONTROL BLOCK IS VALID    00412**2\n         BNE   ASCBNEXT                NO.....GO ON TO NEXT ASVT ENTRY  00413**2\n         L     R8,ASCBTSB              LOAD ADDRESS OF TSB              00414**2\n         USING TSB,R8                  ESTABLISH ADDRESSABILITY TO TSB  00415**2\n         LTR   R8,R8                   SEE IF ADDRESS ZERO - NOT TSO    00416**2\n         BZ    ASCBNEXT                ZERO...GO ON TO NEXT ASVT ENTRY  00417**2\n         MODESET EXTKEY=ZERO,SAVEKEY=(2)  MODESET AND SAVE OLD KEY      00418**2\n         TM    TSBFLG5,TSBVTAM         SEE IF THIS IS A TSO/VTAM TSB    00419**2\n         BO    GETTSBX                 YES....GO GET TSB EXTENSION      00420**2\n         LH    R8,TSBLINE              GET BINARY LINE ADDRESS          00421**2\n         STH   R8,PACK                 STORE ADDRESS IN WORKAREA        00422**2\n         UNPK  PACK+3(5),PACK(3)       UNPACK THE ADDRESS               00423**2\n         MVC   LINEADDR,PACK+4         MOVE UNPACKED ADDRESS INTO LINE  00424**2\n         TR    LINEADDR,TRT-240        TRANSLATE TO EBCDIC              00425**2\n         B     MODEREST                GO MODESET AND RESTORE OLD KEY   00426**2\nGETTSBX  DS    0H                                                       00427**2\n         L     R9,TSBEXTNT             GET ADDRESS OF TSB EXTENSION     00428**2\n         USING TSBX,R9                 ESTABLISH ADDRESSABILITY TO TSBX 00429**2\n         TM    TSBXFLG1,TSBXWREC       SEE IF TERMINAL AWAITING RECON   00430**2\n         BNO   GETSYM                  NO.....GO GET SYMBOLIC NAME      00431**2\n         MVC   LINESYM(8),DISCON       MOVE IN DISCON'D                 00432**2\n         B     MODEREST                GO MODESET AND RESTORE OLD KEY   00433**2\nGETSYM   DS    0H                                                       00434**2\n         MVC   LINESYM(8),TSBTRMID     MOVE IN TERMINAL SYMBOLIC NAME   00435**2\n         DROP  R8,R9                                                    00436**2\nMODEREST DS    0H                                                       00437**2\n         MODESET KEYADDR=(2)           MODESET AND RESTORE OLD KEY      00438**2\n         L     R8,ASCBJBNS             LOAD POINTER TO JOBNAME FIELD    00439**2\n         LTR   R8,R8                   SEE IF POINTER IS ZERO           00440**2\n         BZ    STARTING                YES....GO MOVE IN 'STARTING'     00441**2\n         MVC   LINEUSID,0(R8)          MOVE USERID TO PRINT LINE        00442**2\n         B     EDITASID                GO EDIT ASID TO EBCDIC           00443**2\nSTARTING DS    0H                                                       00444**2\n         MVC   LINEUSID,STRTWORD       MOVE 'STARTING' TO PRINT LINE    00445**2\nEDITASID DS    0H                                                       00446**2\n         LH    R8,ASCBASID             LOAD ADDRESS SPACE ID            00447**2\n         CVD   R8,PACK                 CONVERT TO DECIMAL               00448**2\n         MVC   CHAR,EDMSK              MOVE EDIT MASK TO CHAR           00449**2\n         ED    CHAR,PACK+4             EDIT TO ASID TO EBCDIC           00450**2\n         MVC   LINEASID,CHAR+5         MOVE THREE CHARS TO PRINT LINE   00451**2\n         LA    R1,LINE                 LOAD POINTER TO LINE             00452**2\n         TPUT  (R1),L'LINE             PUT OUT OUTPUT LINE              00453**2\n         LA    R3,1(R3)                ADD 1 TO USER COUNT              00454**2\n         B     ASCBNEXT                GO ON TO NEXT ASVT ENTRY         00455**2\n         DROP  R7                                                       00456**2\n         SPACE 2                                                        00457**2\n*********************************************************************** 00458**2\n*                                                                     * 00459**2\n*        AT END OF ASVT CHAIN SO PUT OUT TSO USER COUNT               * 00460**2\n*           AND SET RETURN CODE FOR USERID REJECT                     * 00461**2\n*           TO AVOID SEARCH FOR JOBNAME 'TSO'                         * 00462**2\n*                                                                     * 00463**2\n*********************************************************************** 00464**2\n         SPACE 2                                                        00465**2\nLASTASCB DS    0H                                                       00466**2\n         CVD   R3,PACK                 CONVERT USER COUNT TO DECIMAL    00467**2\n         MVC   CHAR,EDMSK              MOVE EDIT MASK TO CHAR           00468**2\n         ED    CHAR,PACK+4             CONVERT DECIAML COUNT TO EBCDIC  00469**2\n         MVC   LINE(4),CHAR+4          MOVE IN COUNT                    00470**2\n         MVC   LINE+4(L'USERS),USERS   MOVE IN MESSAGE                  00471**2\n         LA    R1,LINE                 LOAD POINTER TO OUTPUT LINE      00472**2\n         TPUT  (R1),L'LINE             PUT OUT COUNT MESSAGE            00473**2\n         LA    R5,IEREJECT             TREAT AS IF JOBNAME REJECTED     00474**2\n         B     ENDPROC                 GO TO END OF PROCEDURE           00475**2\n         SPACE 2                                                        00476**2\n*********************************************************************** 00477**2\n*                                                                     * 00478**2\n*        SECOND TIME ENTRY (FREE MESSAGE BUFFER)                      * 00479**2\n*                                                                     * 00480**2\n*********************************************************************** 00481**2\n         SPACE 2                                                        00482**2\nFREEMESS DS    0H                                                       00483**2\n         L     R1,IEMSGP               LOAD POINTER TO GETMAINED AREA   00484**2\n         L     R0,GETMINFO             LOAD SUBPOOL NUMBER AND LENGTH   00485**2\n*                                      OF GETMAINED AREA                00486**2\n         FREEMAIN  R,LV=(0),A=(1)      FREE MESSAGE BUFFER              00487**2\n         SLR   R6,R6                   ZERO OUT MESSAGE POINTER ENTRY   00488**2\n         ST    R6,IEMSGP               IN PARMLIST                      00489**2\n         LA    R5,IEREJECT             SET RETURN CODE TO 12 - DELETE   00490**2\n*                                      ENTRY                            00491**2\n         SPACE 2                                                        00492**2\n*********************************************************************** 00493**2\n*                                                                     * 00494**2\n*        RETURN TO CALLER (STATUS, CANCEL, OR OUTPUT COMMAND)         * 00495**2\n*                                                                     * 00496**2\n*********************************************************************** 00497**2\n         SPACE 2                                                        00498**2\nENDPROC  DS    0H                                                       00499**2\n         L     R13,4(,R13)             RESTORE REGISTER 13              00500**2\n         L     R0,SIZDATD              LOAD REGISTER 0 WITH SIZE OF     00501**2\n*                                      GETMAINED AREA                   00502**2\n         LR    R1,R11                  LOAD REGISTER 1 WITH ADDRESS OF  00503**2\n*                                      GETMAINED AREA                   00504**2\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA              00505**2\n         LR    R15,R5                  LOAD REGISTER 15 WITH RETURN     00506**2\n*                                      CODE                             00507**2\n         L     R14,12(,R13)            LOAD REGISTER 14 WITH RETURN     00508**2\n*                                      ADDRESS                          00509**2\n         LM    R0,R12,20(R13)          RESTORE REGISTERS                00510**2\n         BR    R14                     RETURN VIA REGISTER 14           00511**2\n         EJECT                                                          00512**2\n******** CONSTANTS AND DSECTS *********                                 00513**2\nDATA     DS    0H                                                       00514**2\nJOBNCOMP CLC   0(0,R6),0(R1)                                            00515**2\nMOVEJOBN MVC   REJSLOT(0),0(R1)                                         00516**2\nHALF84   DC    H'84'                                                    00517**2\nHALF2    DC    H'2'                                                     00518**2\nHALF3    DC    H'3'                                                     00519**2\nJOBWORD  DC    CL4'JOB '                                                00520**2\nBLANK    EQU   C' '                                                     00521**2\nDATD     DSECT                                                          00522**2\n         DS    0F                                                       00523**2\nSAVEAREA DS    18F                                                      00524**2\nEXTLIST  EXTRACT MF=L                                                   00525**2\nPSCBADDR DS    F                                                        00526**2\nPSCBATR1 EQU   16                                                       00527**2\nPSCBCTRL EQU   X'80'                                                    00528**2\nPACK     DS    D                                                        00529**2\nCHAR     DS    CL8                                                      00530**2\nLINE     DS    CL26                                                     00531**2\n         ORG   LINE+1                                                   00532**2\nLINEUSID DS    CL8                                                      00533**2\n         ORG   LINE+11                                                  00534**2\nLINEASID DS    CL3                                                      00535**2\n         ORG   LINE+17                                                  00536**2\nLINEADDR DS    CL3                                                      00537**2\n         ORG   LINE+17                                                  00538**2\nLINESYM  DS    CL8                                                      00539**2\n         ORG                                                            00540**2\n         DS    0D                                                       00541**2\nENDDATD  EQU   *                                                        00542**2\nIKJEFF53 CSECT                                                          00543**2\n         DS    0F                                                       00544**2\nSIZDATD  DC    AL1(0)                                                   00545**2\n         DC    AL3(ENDDATD-DATD)                                        00546**2\nREJTEXT1 DC    CL66'REJECTED - JOBNAME MUST BE YOUR USERID PLUS AT LEASC00547**2\n               T ONE CHARACTER'                                         00548**2\nREJTEXT2 DC    CL69'REJECTED - JOBNAME MUST BE YOUR USERID OR MUST STARC00549**2\n               T WITH YOUR USERID'                                      00550**2\nHEADER   DC    CL21'  USERID  ASID  LINE '                              00551**2\nEDMSK    DC    XL8'4020202020202120'                                    00552**2\nUSERS    DC    CL20' USERS ARE LOGGED ON'                               00553**2\nTRT      DC    CL16'0123456789ABCDEF'                                   00554**2\nTSOWORD  DC    CL3'TSO'                                                 00555**2\nASCBWORD DC    CL4'ASCB'                                                00556**2\nSTRTWORD DC    CL8'STARTING'                                            00557**2\nDISCON   DC    CL8'DISCON''D'                                           00558**2\nGETMINFO DS    0F                      SUBPOOL AND LENGTH FOR GETMAIN   00559**2\n*                                      OF MESSAGE AREA                  00560**2\nGETMSP   DC    AL1(0)                                                   00561**2\nGETMLEN  DC    AL3(84)                                                  00562**2\nPATCH    DC    8CL4'ZAP*'                                               00563**2\nR0       EQU   00                      EQUATES FOR REGISTERS 0-15       00564**2\nR1       EQU   01                                                       00565**2\nR2       EQU   02                                                       00566**2\nR3       EQU   03                                                       00567**2\nR4       EQU   04                                                       00568**2\nR5       EQU   05                                                       00569**2\nR6       EQU   06                                                       00570**2\nR7       EQU   07                                                       00571**2\nR8       EQU   08                                                       00572**2\nR9       EQU   09                                                       00573**2\nR10      EQU   10                                                       00574**2\nR11      EQU   11                                                       00575**2\nR12      EQU   12                                                       00576**2\nR13      EQU   13                                                       00577**2\nR14      EQU   14                                                       00578**2\nR15      EQU   15                                                       00579**2\nASVTENTY EQU   528                                                      00580**2\nASVTMAXU EQU   516                                                      00581**2\nREJMSG   DSECT                         DSECT FOR RETURN MESSAGE         00582**2\nREJMLEN  DS    H                                                        00583**2\nREJJOB   DS    CL4                                                      00584**2\nREJSLOT  DS    CL9                                                      00585**2\n         IKJEFFIE IETYPE=OUTPUT                                         00586**2\n         IKJTSB   LIST=YES,EXT=NO                                       00587**2\n         IKTTSBX                                                        00588**2\n         IHAASCB DSECT=YES                                              00589**2\n         CVT DSECT=YES                                                  00590**2\n         END   IKJEFF53                                                 00591**2\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPT002": {"ttr": 5898, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x90\\x17\\x8f\\x00\\x90\\x17\\x9f\\x13(\\x01x\\x01x\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1990-06-27T00:00:00", "modifydate": "1990-06-28T13:28:00", "lines": 376, "newlines": 376, "modlines": 0, "user": "FCHLAY"}, "text": "++ USERMOD (NAPT002) .\n++ VER (Z038) FMID(HTE21C2).\n++JCLIN.\n//STEP1    EXEC PGM=IEV90\n//SYSPUNCH DD  DSN=&&PUNCH(IKJEFF10),DISP=SHR\n//SYSIN  DD  SYS1.USERSRC(IKJEFF10),DISP=SHR\n++SRC (IKJEFF10) DISTLIB(USERSRC).\n*          DATA SET IKJEFF10   AT LEVEL 003 AS OF 12/09/85\nIKJEFF10 CSECT ,                                                NAPT002 00001\n*** START --- NORTH AMERICAN PHILIPS LIGHTING MOD PROLOG ------ NAPT002 00002\n***                                                             NAPT002 00003\n*** FUNCTION.                                                   NAPT002 00004\n***       1. ALLOW UTILITY JOBS BY RECOGNIZING A SPECIAL USER   NAPT002 00005\n***          ID OF $$$$$$ WHICH WOULD BE CHANGED TO THE         NAPT002 00006\n***          SUBMITTERS ID WHEN IT IS FOUND IN THE JOB NAME     NAPT002 00007\n***          AND WHICH WILL BE SEARCHED FOR AND REPLACED        NAPT002 00008\n***          ANYWHERE ELSE IT OCCURS IN THE JCL (BUT NOT THE    NAPT002 00009\n***          DATA.                                              NAPT002 00010\n***                                                             NAPT002 00011\n***       2. DISALLOW SUBMISSION OF JOBS WITH A MESSAGE CLASS   NAPT002 00012\n***          OR SYOUT OF X OR Y  WHICH CANNOT BE LOOKED AT BY   NAPT002 00013\n***          THE SUBMITTER.  (FCH, FCI, CURRENT FIRST SHIFT     NAPT002 00014\n***          OPERATOR AND GENERIC OPERATOR SIGNONS CAN SUBMIT   NAPT002 00015\n***          JOBS WITH ANY JOB NAME, TEST JOBS WILL BE FORCED   NAPT002 00016\n***          TO 7 CHRS IF THEY ARE 6 CHRS AND NOT THE SUBMITTER NAPT002 00017\n***          LEGAL JOB NAMES ARE THE SUBMITTERS-ID OR THE       NAPT002 00018\n***          SUBMITTER'S ID PLUS 1 CHARACTER.                   NAPT002 00019\n***                                                             NAPT002 00020\n*** DEPENDENCIES.                                               NAPT002 00021\n***                                                             NAPT002 00022\n***         1. NORMAL LINKAGE CONVENTIONS ARE USED.             NAPT002 00023\n***         2. THE MODULE IS RE-ENTRANT AND DOES NOT CALL ANY   NAPT002 00024\n***            SUBROUTINES OR USE SYSTEM SERVICES OTHER THAN    NAPT002 00025\n***            GETMAIN/FREEMAIN                                 NAPT002 00026\n***                                                             NAPT002 00027\n*** REGISTER CONVENTIONS.                                       NAPT002 00028\n***                                                             NAPT002 00029\n***         R1  - AFFECTED BY TRT INSTRUCTION                   NAPT002 00030\n***         R2  - AFFECTED BY TRT INSTRUCTION                   NAPT002 00031\n***         R3  - POINTER TO SUBMITTER'S USER-ID                NAPT002 00032\n***         R4  - NOT USED                                      NAPT002 00033\n***         R5  - WORK REGISTER FOR SIZE OF FIELDS              NAPT002 00034\n***         R6  - POINTER TO THE CARD IMAGE                     NAPT002 00035\n***         R7  - BASE REGISTER FOR SUBMIT SECONDARY DSECT      NAPT002 00036\n***         R8  - POINTER TO THE MESSAGE AREA (TO/FROM USER)    NAPT002 00037\n***         R9  - BASE REGISTER FOR SUBMIT DSECT                NAPT002 00038\n***         R10 - BASE REGISTER FOR SUBROUTINE                  NAPT002 00039\n***         R11 - SIZE REGISTER FOR FIELD SCANS                 NAPT002 00040\n***         R12 - POINTER TO FIELD TO BE SCANNED                NAPT002 00041\n***                                                             NAPT002 00042\n*** CONTROL BLOCKS. (MAPPING MACROS FOLLOWED BY ATTRIBUTE)      NAPT002 00043\n***                                                             NAPT002 00044\n***         IKJEFFIE - TYPE=SUBMIT GENERATES                    NAPT002 00045\n***             IEDSECTD - GENERAL POINTERS AND FLAGS           NAPT002 00046\n***             IESUBCTD - SUBMIT POINTERS AND FLAGS            NAPT002 00047\n***                                                             NAPT002 00048\n***                                                             NAPT002 00049\n*** CHANGE ACTIVITY.                                            NAPT002 00050\n***                                                             NAPT002 00051\n***      CHANGES BY C F MORRIS, WESTINGHOUSE LAMP               NAPT002 00052\n***    1. REMOVE THE GETMAIN AND FREEMAIN FOR THE SAVE AREA     NAPT002 00053\n***       SINCE THEY ARE NOT NEEDED BECAUSE NOTHING IS          NAPT002 00054\n***       CALLED.                                               NAPT002 00055\n***    2. CHECK FOR 6 CHR USER-ID PLUS 1 CHR OR 6 CHR USER-ID   NAPT002 00056\n***       EQUAL TO THAT OF THE SUBMITTER OR 6 QUESTION MARKS    NAPT002 00057\n***       (??????) PLUS 1 CHR AS VALID JOB NAME.  IF 6          NAPT002 00058\n***       QUESTION MARKS REPLACE WITH USER-ID OF SUBMITTER AND  NAPT002 00059\n***       AND TURN ON SWITCHES TO SCAN FOR ?????? IN ALL JCL    NAPT002 00060\n***       REMOVE GENERAL DYNAMICS CODE.                         NAPT002 00061\n***    CHANGES 1-23 TO GET THE EXIT CODED RIGHT                 NAPT002 00062\n***    CHANGES 24-28 TO JUST REJECT JOBS WHICH GO TO MSGCLASS   NAPT002 00063\n***        X AND LACK THE SUBMITTERS ID IN THE JOB NAME AND     NAPT002 00064\n***        TO TREAT $$$$$$ THE SAME AS 6 QUESTION MARKS.        NAPT002 00065\n***    CHANGES 29-34 TO REJECT JOBS WHICH CONTAIN MSGCLASS=X    NAPT002 00066\n***        OR SYSOUT=X AND WHICH ARE NOT SUBMITTED BY           NAPT002 00067\n***        AUTHORIZED SUBMITTERS, ALLOW AUTHORIZED SUBMITTERS   NAPT002 00068\n***        TO SUBMIT IF TSO USER-ID FORMATTED JOB NAME, AND     NAPT002 00069\n***        VERIFY SUBMISSION DESIRED OF NON-TSO JOB BY          NAPT002 00070\n***        AUTHORIZED SUBMITTERS.                               NAPT002 00071\n***                                                             NAPT002 00072\n***    02/15/85-02/19/85 - FORCE A JCL ERROR ON THE CARD WITH   NAPT002 00073\n***        THE OFFENDING MESSAGE (SYSOUT) CLASS, IF CARD NOT    NAPT002 00074\n***        FLAGGED AS A JOB CARD, ALSO REPEAT THE SUBMIT        NAPT002 00075\n***        FAILURE MESSAGE.  I WOULD HAVE PURGED THE JOB BUT    NAPT002 00076\n***        THE DEVELOPERS OF JES3 IN THEIR INFINITE LACK OF     NAPT002 00077\n***        WISDOM AND REFUSAL OF JES2 COMPATIBILITY DO NOT      NAPT002 00078\n***        RECOGNIZE THE /*PURGE                                NAPT002 00079\n***                                                             NAPT002 00080\n***   03/07/85                                                  NAPT002 00081\n***        JES3 MODIFIED TO USE /*PURGE BY RECOGNITION IN       NAPT002 00082\n***        IATUX33 AND SETTING OPERATOR CANCEL NO PRINT BIT     NAPT002 00083\n***                                                             NAPT002 00084\n***   06/21/85                                                  NAPT002 00085\n***        REMOVE JCLERROR CONSTANT AND CHANGE SMP MOD ID TO    NAPT002 00086\n***        NAPT002                                              NAPT002 00087\n***                                                             NAPT002 00088\n***   09/24/85                                                  NAPT002 00089\n***        ALWAYS CHANGE $$$$$$ AND ?????? TO SUBMITTER USER-ID NAPT002 00090\n***                                                             NAPT002 00091\n*** AUTHOR(S).                                                  NAPT002 00092\n***                                                             NAPT002 00093\n***          THIS WAS WRITTEN USING THE IKJEFF10 SOURCE FROM    NAPT002 00094\n***          GENERAL DYNAMICS ON THE C. B. T. TAPE.             NAPT002 00095\n***          CLARK MORRIS, NORTH AMERICAN PHILIPS LIGHTING      NAPT002 00096\n***          SHARE CODE WEJ, 201-429-3607                       NAPT002 00097\n***                                                             NAPT002 00098\n*** END --- NORTH AMERICAN PHILIPS LIGHTING TSO MOD PROLOG ---- NAPT002 00099\nR0       EQU   0                                                NAPT002 00100\nR1       EQU   1                                                NAPT002 00101\nR2       EQU   2                                                NAPT002 00102\nR3       EQU   3                                                NAPT002 00103\nR4       EQU   4                                                NAPT002 00104\nR5       EQU   5                                                NAPT002 00105\nR6       EQU   6                                                NAPT002 00106\nR7       EQU   7                                                NAPT002 00107\nR8       EQU   8                                                NAPT002 00108\nR9       EQU   9                                                NAPT002 00109\nR10      EQU   10                                               NAPT002 00110\nR11      EQU   11                                               NAPT002 00111\nR12      EQU   12                                               NAPT002 00112\nR13      EQU   13                                               NAPT002 00113\nR14      EQU   14                                               NAPT002 00114\nR15      EQU   15                                               NAPT002 00115\n         SPACE 2                                                NAPT002 00116\nSTART    DS    0H                 START IT UP                   NAPT002 00117\n         STM   R14,R12,12(R13)    SAVE REGISTERS                NAPT002 00118\n         BALR  R10,0              LOAD R10                      NAPT002 00119\n         USING *,R10              USE R10 AS BASE REG           NAPT002 00120\n         LR    R9,R1              SAVE POINTER TO POINTER       NAPT002 00121\n         XC    8(4,R13),8(R13)    TELL OS NO CURRENT SAVE AREA  NAPT002 00122\n         SPACE 2                                                NAPT002 00123\n         L     R9,0(R9)           SAVE POINTER TO SUBMIT DSECT  NAPT002 00124\n         USING IEDSECTD,R9        SET R9 POINTER TO SUBMIT DATA NAPT002 00125\n         L     R7,IESUBCTP        LOAD R7 WITH ADDR SUB POINTER NAPT002 00126\n         USING IESUBCTD,R7        MAKE R7 POINTER TO 2ND DSECT  NAPT002 00127\n         L     R8,IEMSGP          LOAD R8 WITH MESSAGE TO REPLY NAPT002 00128\n         LTR   R8,R8              IS THERE A MESSAGE THERE?     NAPT002 00129\n         BZ    CHKJOB             KEEP LOOKING                  NAPT002 00130\n         TM    IEEXITWD,X'80'     IF REPEAT MESSAGE FLAG SET    NAPT002 00131\n         BNO   FREEMSG               UNSET FLAG AND REPEAT      NAPT002 00132\n         NI    IEEXITWD,X'7F'        THE MESSAGE                NAPT002 00133\n         B     MSGSEND                                          NAPT002 00134\nFREEMSG  DS    0H                                               NAPT002 00135\n         FREEMAIN R,LV=WORKLTH,A=(8) FREE MESSAGE AREA          NAPT002 00136\n         SLR   R8,R8              ZERO OUT MESSAGE POINTER      NAPT002 00137\n         ST    R8,IEMSGP                                        NAPT002 00138\n         L     R8,IEREPLYP        GET ADDR OF REPLY (IF ANY)    NAPT002 00139\n         LTR   R8,R8              IF ZERO GO TO ABORT CYCLE     NAPT002 00140\n         BZ    ABORT1                                           NAPT002 00141\n         CLI   1(R8),X'04'        IF REPLY SIZE LESS THAN 2     NAPT002 00142\n         BL    MORCHK               REPEAT THE MESSAGE          NAPT002 00143\n         CLI   1(R8),X'05'        IF REPLY SIZE NOT = 3 OR ANS  NAPT002 00144\n         BH    MORCHK               NOT YES AND NOT NO REPEAT   NAPT002 00145\n         BE    CHKYES               THE MESSAGE                 NAPT002 00146\n         CLC   =C'NO',2(R8)       IF ANSWER IS NO, GO TO ABORT  NAPT002 00147\n         BE    ABORT1               CYCLE                       NAPT002 00148\n         B     MORCHK                                           NAPT002 00149\nCHKYES   DS    0H                                               NAPT002 00150\n         CLC   =C'YES',2(R8)      IF ANSWER IS YES SUBMIT THE   NAPT002 00151\n         BNE   MORCHK                JOB                        NAPT002 00152\n         MVI   IEEXITWD,X'00'     SUPPRESS FURTHER CHECKING     NAPT002 00153\n         L     R6,IECARDP         POINT TO JCL CARD             NAPT002 00154\n         LTR   R6,R6               IF ZERO ADDRESS GO TO FINISH NAPT002 00155\n         BZ    ABORT2                OF THE ABORT CYCLE         NAPT002 00156\n         L     R3,IEUSRIDP       GET ADDR OF USER-ID IN R3      NAPT002 00157\n         B     CHKCARD                                          NAPT002 00158\nABORT1   DS    0H                                               NAPT002 00159\n         L     R6,IECARDP         POINT TO JCL CARD             NAPT002 00160\n         LTR   R6,R6             IF CARD POINTER ZERO           NAPT002 00161\n         BZ    ABORT2              GO TO ACTUAL ABORT           NAPT002 00162\n         TM    IESTMTYP,IESJOB   IF JOB CARD AND NOT            NAPT002 00163\n         BZ    ABORT1A              CONTINUATION FORCE DO NOT   NAPT002 00164\n         TM    IESTMTYP,IESCONTN    FORCE JCL ERROR             NAPT002 00165\n         BZ    ABORT2                                           NAPT002 00166\nABORT1A  DS    0H                                                       00167\n         TM    IEEXITWD,X'40'    IF /* PURGE ALREADY SUBMITTED  NAPT002 00168\n         BO    ABORT2              GO TO ACTUAL ABORT           NAPT002 00169\n         OI    IEEXITWD,X'40'    SET EXIT WORD TO SHOW PURGE    NAPT002 00170\n         MVC   1(7,R6),=C'*PURGE '  CARD SUBMITTED, SUBMIT IT   NAPT002 00171\n         LA    R15,IERETURN         SET UP TO RETURN TO EXIT TO NAPT002 00172\n         B     RETURN                ABORT SUMBIT               NAPT002 00173\nCHKJOB   DS    0H                                               NAPT002 00174\n         L     R6,IECARDP         POINT TO JCL CARD             NAPT002 00175\n         LTR   R6,R6             IF CARD POINTER ZERO           NAPT002 00176\n         BZ    ABORT2              GO TO FORCE BAD JCL          NAPT002 00177\n         L     R3,IEUSRIDP       GET ADDR OF USER-ID IN R3      NAPT002 00178\n         TM    IESTMTYP,IESCONTN  IS THIS A CONTINUATION?       NAPT002 00179\n         BO    CHKCARD            ..YES, CHECK FOR MESSAGE CLAS NAPT002 00180\n         TM    IESTMTYP,IESJOB    IS THIS A JOB CARD?           NAPT002 00181\n         BO    CHKJOB1            ..YES, GO SEE IF VALID JOB NM NAPT002 00182\nCHKCARD  DS    0H                                               NAPT002 00183\n         LA    R11,62             GET INITIAL LENGTH FOR TRT    NAPT002 00184\n         LA    R12,3(,R6)         POINT TO STARTING CHR FOR TRT NAPT002 00185\nTRTLOOP  DS    0H                                               NAPT002 00186\n         EX    R11,TRTINS         EXECUTE TRT FOR QUESTION MARK NAPT002 00187\n         BZ    MORECARD           IF NO QUESTION MK OR $ EXIT   NAPT002 00188\n*                                    WITH CHECK FOR MORE CARD   NAPT002 00189\n         CLC   0(6,R1),=C'??????' IF SIX QUESTION MARKS OR 6    NAPT002 00190\n         BE    CNGUSER              DOLLAR SIGNS GO TO CHNG USR NAPT002 00191\n         CLC   0(6,R1),=C'$$$$$$'                               NAPT002 00192\n         BE    CNGUSER                                          NAPT002 00193\n         CLC   0(8,R1),=C'MSGCLASS' IF NOT MSGCLASS GO TO CHECK NAPT002 00194\n         BNE   CHKSYSOT               SYSOUT                    NAPT002 00195\n         CLI   9(R1),C'X'           IF MSGCLASS X OR Y GO TO    NAPT002 00196\n         BE    CHKVALID               CHECK IF SUBMITTER VALID  NAPT002 00197\n         CLI   9(R1),C'Y'                                       NAPT002 00198\n         BE    CHKVALID                                         NAPT002 00199\nBUMP11   DS    0H                                               NAPT002 00200\n         LA    R1,11(,R1)         INCREMENT PAST MSGCLASS       NAPT002 00201\n         B     CHKR1END                                         NAPT002 00202\nCHKSYSOT DS    0H                                               NAPT002 00203\n         CLC   0(7,R1),=C'SYSOUT=' IF NOT SYSOUT GO TO CHECK    NAPT002 00204\n         BNE   BUMP1                  NEXT CHAR                 NAPT002 00205\n         CLI   7(R1),C'X'          IF SYSOUT CLASS X OR Y GO TO NAPT002 00206\n         BE    CHKVALID               CHECK IF SUBMITTER VALID  NAPT002 00207\n         CLI   7(R1),C'Y'                                       NAPT002 00208\n         BE    CHKVALID                                         NAPT002 00209\n         CLI   8(R1),C'X'                                       NAPT002 00210\n         BE    CHKVALID                                         NAPT002 00211\n         CLI   8(R1),C'Y'                                       NAPT002 00212\n         BE    CHKVALID                                         NAPT002 00213\nBUMP8    DS    0H                                               NAPT002 00214\n         LA    R1,08(,R1)         INCREMENT PAST SYSOUT         NAPT002 00215\n         B     CHKR1END                                         NAPT002 00216\nCNGUSER  DS    0H                                               NAPT002 00217\n         MVC   0(6,R1),0(R3)      MOVE IN USER-ID               NAPT002 00218\n         LA    R1,6(,R1)          BUMP R1                       NAPT002 00219\n         B     CHKR1END                                         NAPT002 00220\nBUMP1    DS    0H                                               NAPT002 00221\n         LA    R1,1(,R1)                                        NAPT002 00222\nCHKR1END DS    0H                                               NAPT002 00223\n         LA    R11,65(,R6)        GET NEW SIZE FOR TRT AND IF   NAPT002 00224\n         SR    R11,R1                NEGATIVE CARD IS DONE      NAPT002 00225\n         BM    MORECARD                                         NAPT002 00226\n         LR    R12,R1                                           NAPT002 00227\n         B     TRTLOOP                                          NAPT002 00228\nTRTINS   TRT   0(1,R12),SPCCHTBL                                NAPT002 00229\nMORECARD DS    0H                                               NAPT002 00230\n         MVI   0(R7),IETJOB+IETEXEC+IETDD+IETJES+IETCOMNT       NAPT002 00231\n*               RETURN JOB, EXEC, DD, JES AND COMMENT CARDS     NAPT002 00232\n         LA    R15,IECONTIN       RETURN CODE OF ZERO           NAPT002 00233\n         B     RETURN             GET OUT OF HERE               NAPT002 00234\nCHKJOB1  DS    0H                                               NAPT002 00235\n         LA    R12,2(,R6)         POINT R12 TO JOBNAME          NAPT002 00236\n         LR    R1,R12             GUARANTEE R1 GOOD             NAPT002 00237\n         TRT   0(9,R12),SPACETBL  CHECK FOR LOC OF SPACE        NAPT002 00238\n         BZ    INVALID               IF NONE BY COL 11, BAD JOB NAPT002 00239\n*                                       NAME                    NAPT002 00240\n         LR    R5,R1              GET SIZE OF JOB NAME          NAPT002 00241\n         SR    R5,R12                                           NAPT002 00242\n         CLC   0(6,R12),=C'??????' IF JOB NAME = 6 QUESTION     NAPT002 00243\n         BE    SETUSER                MARKS OR $$$$$$ MOVE IN   NAPT002 00244\n         CLC   0(6,R12),=C'$$$$$$'    USER-ID                   NAPT002 00245\n         BNE   CHKJOB1A                                         NAPT002 00246\nSETUSER  DS    0H                                               NAPT002 00247\n         MVC   0(6,R12),0(R3)     MOVE IN USER-ID               NAPT002 00248\nCHKJOB1A DS    0H                                               NAPT002 00249\n         MVI   IEEXITWD,X'00'     SET EXITWORD TO ALLOW JOB     NAPT002 00250\n         CH    R5,=H'8'           IF JOB NAME IS 8 CHRS OR LESS NAPT002 00251\n         BE    CHKJOB2               THAN 6 CHRS CHECK IF OPER, NAPT002 00252\n         CH    R5,=H'6'              SYS ENG, OR TECH SERVICES  NAPT002 00253\n         BL    CHKJOB2               IS SUBMITTER               NAPT002 00254\n         CLC   0(6,R12),0(R3)     IF JOB-NAME IS NOT THE SAME   NAPT002 00255\n         BNE   CHKJOB2             AS THE USER-ID (OR THE 1ST   NAPT002 00256\n*                                  6 CHARACTERS CHANGED TO THE  NAPT002 00257\n*                                  USER ID) GO TO CHECK         NAPT002 00258\n*                                  SUBMITTER                    NAPT002 00259\nSETCHECK DS    0H                                               NAPT002 00260\n         LA    R12,8(R12)         POINT R12 TO COL 11           NAPT002 00261\n         LA    R11,55             SET SIZE FOR TRT              NAPT002 00262\n         B     TRTLOOP            GO TO THE TRANSLATE AND TEST  NAPT002 00263\n*                                   LOOP                        NAPT002 00264\n*                                                               NAPT002 00265\nCHKJOB2  DS    0H                                               NAPT002 00266\n         MVI   IEEXITWD,X'01'     SET EXITWORD TO CHK PRIV JOB  NAPT002 00267\n         CLC   0(2,R12),=C'FC'    IF TEST JOB AND SIZE IS 6 OR  NAPT002 00268\n         BNE   CHKJOB3               7 CHARACTERS SET EXITWORD  NAPT002 00269\n         CH    R5,=H'7'              BACK TO NO CHECKING.       NAPT002 00270\n         BH    CHKJOB3               IF THE SEVENTH CHARACTER   NAPT002 00271\n         CH    R5,=H'6'              IS BLANK, MOVE IN A $ TO   NAPT002 00272\n         BL    CHKJOB3               THE SEVENTH CHARACTER      NAPT002 00273\n         MVI   IEEXITWD,X'00'                                   NAPT002 00274\n         BH    CHKJOB3                                          NAPT002 00275\n         MVI   6(R12),C'$'                                      NAPT002 00276\nCHKJOB3  DS    0H                                               NAPT002 00277\n         CLC   0(6,R3),=C'FCBSH1' IF OPERATIONS 1ST SHIFT,      NAPT002 00278\n         BE    CHKLSTHD              OR ANY OPERATOR CHECK FOR  NAPT002 00279\n         CLC   0(5,R3),=C'FCBOP'     LISTHDR JOB AND            NAPT002 00280\n         BNE   CHKJOB4               AUTOMATICALLY ALLOW IT TO  NAPT002 00281\nCHKLSTHD DS    0H                    BE SUBMITTED               NAPT002 00282\n         CLC   =C'LISTHDR ',0(R12)                              NAPT002 00283\n         BNE   SETCHECK                                         NAPT002 00284\n         MVI   IEEXITWD,X'00'                                   NAPT002 00285\n         B     SETCHECK                                         NAPT002 00286\nCHKJOB4  DS    0H            IF SYSTEMS ENGINEERING OR TECHINAL NAPT002 00287\n         CLC   0(3,R3),=C'FCH'       SERVICES SET UP TO ALLOW   NAPT002 00288\n         BE    SETCHECK              SUBMISSION OF ANY JOB      NAPT002 00289**2\n         CLC   0(3,R3),=C'FCI'       EVEN IF IT HAS A MESSAGE   NAPT002 00290\n         BE    SETCHECK              CLASS OF X OR Y            NAPT002 00291\n         MVI   IEEXITWD,X'02'     SET EXITWORD TO CHK NON-PRIV  NAPT002 00292\n         B     SETCHECK           AND GO TO CHECK THE JOB CARD  NAPT002 00293\nCHKVALID DS    0H                                               NAPT002 00294\n         CLI   IEEXITWD,X'00'     IF EXIT WORD NOT SET FOR      NAPT002 00295\n         BE    BUMP8                 CHECKING GO CHK AFTER      NAPT002 00296\n*                                    MSGCLASS                   NAPT002 00297\nINVALID  DS    0H                                               NAPT002 00298\n         CLI   IEEXITWD,X'01'     IF PRIVILEGED SUBMITTER CHK   NAPT002 00299\n         BE    MORCHK                                           NAPT002 00300\n         GETMAIN R,LV=WORKLTH     GET SOME STORAGE              NAPT002 00301\n         LA    R8,0(,R1)          SET R8 TO POINT AT STORAGE    NAPT002 00302\n         USING WORKAREA,R8        WORKAREA IS DSECT             NAPT002 00303\n         MVC   WORKLGTH,=AL2(WORKLTH) STORE MESSAGE AREA LENGTH NAPT002 00304\n*                                    IN WORKAREA                NAPT002 00305\n         MVC   WORKMSG,MSGCONST   MOVE IN INVALID MSG           NAPT002 00306\n         ST    R8,IEMSGP          STORE POINTER TO MESSAGE AWAY NAPT002 00307\n         OI    IEEXITWD,X'80'     SET EXIT WORD TO SIGNAL       NAPT002 00308\n*                                    REPEAT OF MESSAGE          NAPT002 00309\nMSGSEND  DS    0H                                               NAPT002 00310\n         LA    R15,IEMSG          SET RETURN CODE               NAPT002 00311\n         B     RETURN             RETURN                        NAPT002 00312\nMORCHK   DS    0H                                               NAPT002 00313\n         GETMAIN R,LV=WORKLTH     GET SOME STORAGE              NAPT002 00314\n         LA    R8,0(,R1)          SET R8 TO POINT AT STORAGE    NAPT002 00315\n         USING WORKAREA,R8        WORKAREA IS DSECT             NAPT002 00316\n         MVC   WORKLGTH,=AL2(WORKLTH) STORE MESSAGE AREA LENGTH NAPT002 00317\n*                                    IN WORKAREA                NAPT002 00318\n         MVC   WORKMSG,MSGCONSR   MOVE IN REQUEST FOR REPLY     NAPT002 00319\n         DROP  R8                                               NAPT002 00320\n         ST    R8,IEMSGP          STORE POINTER TO MESSAGE AWAY NAPT002 00321\n         LA    R15,IEPROMPT       SET RETURN CODE TO REPLY      NAPT002 00322\n         B     RETURN             RETURN                        NAPT002 00323\nABORT2   DS    0H                                               NAPT002 00324\n         SLR   R15,R15            ZERO OUT EXITWORD             NAPT002 00325\n         ST    R15,IEEXITWD                                     NAPT002 00326\n         LA    R15,IEABORT                                      NAPT002 00327\n         MVI   0(R7),IETJOB       RETURN ONLY JOB CARDS         NAPT002 00328\n         B     RETURN                                           NAPT002 00329\nRETURN   DS    0H                                               NAPT002 00330\n         ST    R15,16(,R13)       STORE RETURN CODE             NAPT002 00331\n         LM    R14,R12,12(R13)    RESTORE REGISTERS             NAPT002 00332\n         BR    R14                RETURN                        NAPT002 00333\n         EJECT                                                  NAPT002 00334\n         DS    0F                                               NAPT002 00335\nSPACETBL DS    0CL256             TABLE FOR TRT FOR SPACES      NAPT002 00336\n         DC    64X'00'                                          NAPT002 00337\n         DC    X'40'              SPACE POSITION                NAPT002 00338\n         DC    191X'00'                                         NAPT002 00339\nSPCCHTBL DS    0CL256             TABLE FOR TRT FOR QUESTION MK NAPT002 00340\n         DC    91X'00'                                          NAPT002 00341\n         DC    X'5B'              $ POSITION                    NAPT002 00342\n         DC    19X'00'                                          NAPT002 00343\n         DC    X'6F'              QUESTION MARK (?) POSITION    NAPT002 00344\n         DC    100X'00'                                         NAPT002 00345\n         DC    X'D4'              M POSITION                    NAPT002 00346\n         DC    13X'00'                                          NAPT002 00347\n         DC    X'E2'              S POSITION                    NAPT002 00348\n         DC    30X'00'                                          NAPT002 00349\nMSGCONST DC    C'*** JOB NOT SUBMITTED, IF MSGCLASS = X OR Y, JOBNAME M*00350\n               UST BE 6 OR 7  BYTES WITH THE FIRST 6 BEING YOUR USER-ID*00351\n                OR $$$$$$ '                                     NAPT002 00352\nMSGCONSR DC    C'+++ DO YOU WISH TO SUBMIT A JOB WITH MESSAGE CLASS OR *00353**2\n               SYSOUT OF X OR Y THAT IS NOT A USER-ID PLUS 1 CH, REPLY *00354\n               YES OR NO  '                                     NAPT002 00355\n         EJECT                                                  NAPT002 00356\n         LTORG                                                  NAPT002 00357\n         EJECT                                                  NAPT002 00358\nWORKAREA DSECT                                                  NAPT002 00359\nWORKLGTH DS    CL2                                              NAPT002 00360\nWORKMSG  DC    C'*** JOB NOT SUBMITTED, IF MSGCLASS = X OR Y, JOBNAME M*00361\n               UST BE 6 OR 7  BYTES WITH THE FIRST 6 BEING YOUR USER-ID*00362\n                OR $$$$$$ '                                     NAPT002 00363\nWORKLTH  EQU   *-WORKLGTH                                       NAPT002 00364\n         IKJEFFIE IETYPE=SUBMIT   SUBMIT DSECT                  NAPT002 00365\n         CSECT ,                                                NAPT002 00366\n         DC    C'NAPT002 10/19/85'                              NAPT002 00367**2\n         END   ,                                                NAPT002 00368\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPT003": {"ttr": 6151, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x90#o\\x00\\x90#\\x8f\\x13#\\x00\\x03\\x00g\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1990-08-24T00:00:00", "modifydate": "1990-08-26T13:23:00", "lines": 3, "newlines": 103, "modlines": 0, "user": "FCHLAY"}, "text": "++ USERMOD (NAPT003) .\n++ VER (Z038) FMID(HTE21C2).\n++ MOD (IKJEFLD)  LKLIB (LT1LOAD) LMOD(IKJEFLA) DISTLIB(AOST4).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAPT003B": {"ttr": 6153, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90#\\x8f\\x00\\x90#\\x8f\\x13\\x18\\x00g\\x00g\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-08-26T00:00:00", "modifydate": "1990-08-26T13:18:00", "lines": 103, "newlines": 103, "modlines": 0, "user": "FCHLAY"}, "text": "++ USERMOD (NAPT003) .\n++ VER (Z038) FMID(HTE21C2).\n++JCLIN.\n//STEP1    EXEC PGM=IEV90\n//SYSPUNCH DD  DSN=&&PUNCH(IKJEFLD),DISP=SHR\n//SYSIN  DD  SYS1.USERSRC(IKJEFLD),DISP=SHR\n++MOD (IKJEFLD) LMOD(IKJEFLA) TXLIB(SMPWRK3) DISTLIB(AOST4).\n++SRC (IKJEFLD) DISTLIB(USERSRC).\n*          DATA SET IKJEFLD    AT LEVEL 002 AS OF 12/11/87\nIKJEFLD TITLE 'IKJEFLD LOGON PROMPT EXIT FROM HUBER           '         00001**2\n*********************************************************************** 00002\n*/* COMP TSO                                                            00003\n*/* DOC  THIS IS THE ASSEMBLER SOURCE CODE FOR THE LOGON PREPROMPT      00004\n*/*      EXIT.                                                          00005\n*/*                                                                     00006\n*             MODULE NAME = IKJEFLD                                   * 00007\n*                                                                     * 00008\n*             DESCRIPTIVE NAME =  HUBER SUPPLIED LOGON PRE-PROMPT     * 00009\n*                EXIT                                                 * 00010\n*                                                                     * 00011\n*             FUNCTION =                                              * 00012\n*                BYPASS PROVIDING FULL SCREEN LOGON                   * 00013\n*                                                                     * 00014\n*                OPERATION =                                          * 00015\n*                   TURN ON CONTROL SWITCH THAT CAUSES BYPASS OF      * 00016\n*                   LOGON PROMPT PANEL                                * 00017\n*                                                                     * 00018\n*                                                                     * 00019\n*              NOTES =                                                * 00020\n*                                                                     * 00021\n*                 NONE                                                * 00022\n*                                                                     * 00023\n*                 RESTRICTIONS = NONE                                 * 00024\n*                                                                     * 00025\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        * 00026\n*                    REGISTERS 1       = POINTS TO PARAMETER LIST     * 00027\n*                    REGISTER  2       = NOT USED                     * 00028\n*                    REGISTER  3       = NOT USED                     * 00029\n*                    REGISTERS 4       = NOT USED                     * 00030\n*                    REGISTER  5       = NOT USED                     * 00031\n*                    REGISTERS 6,7,8,9 = NOT USED                     * 00032\n*                    REGISTER  10      = NOT USED                     * 00033\n*                    REGISTER  11      = NOT USED                     * 00034\n*                    REGISTER  12      = NOT USED                     * 00035\n*                    REGISTER  13      = SAVE AREA REGISTER           * 00036\n*                    REGISTER  14      = RETURN REGISTER              * 00037\n*                    REGISTER  15      = WORK REGISTER                * 00038\n*                                                                     * 00039\n*             MODULE TYPE = PROCEDURE                                 * 00040\n*                                                                     * 00041\n*                PROCESSOR = ASM                                      * 00042\n*                                                                     * 00043\n*                MODULE SIZE = 1K                                     * 00044\n*                                                                     * 00045\n*                ATTRIBUTES = PROTECT KEY 1, REENTRANT,               * 00046\n*                   SUPERVISOR STATE                                  * 00047\n*                                                                     * 00048\n*             ENTRY POINTS = IKJEFLD  (ONLY ENTRY POINT)              * 00049\n*                                                                     * 00050\n*                LINKAGE =                                            * 00051\n*                                                                     * 00052\n*             INPUT = REGISTER 1 POINTS TO PARAMETER                    00053\n*                                                                     * 00054\n*                                                                     * 00055\n*                                                                     * 00056\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   * 00057\n*                                                                     * 00058\n*                OUTPUT = NONE                                        * 00059\n*                                                                     * 00060\n*                RETURN CODE = ZERO                                   * 00061\n*                                                                     * 00062\n*             EXIT - ERROR = AT PROGRAM END VIA BRANCH REGISTER 14    * 00063\n*                                                                     * 00064\n*                OUTPUT = A MODIFIED SWITCH                           * 00065\n*                                                                     * 00066\n*                RETURN CODE =                                        * 00067\n*                   0                                                 * 00068\n*                                                                     * 00069\n*             EXTERNAL REFERENCES =                                   * 00070\n*                                                                     * 00071\n*                ROUTINES = NONE                                      * 00072\n*                                                                     * 00073\n*                DATA AREAS = NONE                                    * 00074\n*                                                                     * 00075\n*                                                                     * 00076\n*                                                                     * 00077\n*                                                                     * 00078\n*             ABEND CODES = NONE                                      * 00079\n*                                                                     * 00080\n*********************************************************************** 00081\nR1       EQU    1                                                       00082\nR15      EQU    15                                                      00083\nIKJEFLD  CSECT                                                          00084\n         SAVE  (14,12),,IKJEFLD.HUBER.&SYSTIME..&SYSDATE SAVE REGISTERS 00085\n*                                      WITH CSECT IDENTIFIER            00086\n*        BALR  R12,0                   NOT NEEDED                       00087\nPSTART   DS    0H                      LABEL USED WHEN ESTABLISHING     00088\n*        USING PSTART,R12              CSECT ADDRESSABILITY, NOT NEEDED 00089\n         L     R15,0(,R1)              GET ADDRESS OF PARAMETERS        00090\n         L     R15,0(,R15)             GET ADDRESS OF CONTROL AREA      00091**2\n         OI    2(R15),X'20'            SET ON PANEL BYPASS SWITCH       00092\n         RETURN (14,12),RC=0           RETURN TO CALLER                 00093\n         END                                                            00094**2\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PUT1A003": {"ttr": 6156, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*          DATA SET PUT1A003   AT LEVEL 001 AS OF 02/06/91\n*          DATA SET PUT1A003   AT LEVEL 004 AS OF 02/06/91              00001\nPUT1A003 TITLE 'PUT1A003  -  COPY TEMPORARY DATA SET INTO SPF MEMBER'   00002\n*********************************************************************** 00003\n*                                                                     * 00004\n*                                                                     * 00005\n*        PURPOSE/FUNCTION:                                            * 00006\n*                                                                     * 00007\n*              1. COPY A 'CARD' DECK FROM A TEMPORARY DATA SET INTO   * 00008\n*                 AN SPF LIBRARY, MAINTAINING INTEGRITY BY            * 00009\n*                 ENQUEUING ON 'SPFEDIT' /DSNAME                      * 00010\n*                 IF NON-REPLACEMENT IS REQUIRED A PARM OF            * 00011\n*                 NOREPLACE CAN BE CODED TO CAUSE AN ABEND 11 AND     * 00012\n*                 NON-REPLACEMENT IF THE MEMBER ALREADY EXISTS        * 00013\n*        OUTPUT:                                                      * 00014\n*              PDS MEMBER                                             * 00015\n*              DIRECTORY ENTRY                                        * 00016\n*                                                                     * 00017\n*        RETURN CODES:                                                * 00018\n*              0 = NORMAL COMPLETION                                  * 00019\n*              4 = SPF LIBRARY DIRECTORY WAS FULL OR DIRECTORY I/O    * 00020\n*                  ERROR OCCURRED                                     * 00021\n*                                                                     * 00022\n*        DATA SETS REQUIRED:                                          * 00023\n*              SYSPRINT - DATA SET TO RECEIVE MESSAGES                * 00024\n*              SYSUT1 - DATA SET CONTAINING OBJECT DECK               * 00025\n*              SYSUT2 - PDS TO RECEIVE OBJECT DECK                    * 00026\n*                                                                     * 00027\n*                                                                     * 00028\n*        REGISTER USAGE:                                              * 00029\n*              R12 - BASE REGISTER (RBASE)                            * 00030\n*              R13 - SAVE/WORK AREA POINTER (RSAVE)                   * 00031\n*                                                                     * 00032\n*                                                                     * 00033\n*        ABEND CODES:                                                 * 00034\n*              2 - SYSPRINT DATA SET WOULD NOT OPEN                   * 00035\n*              3 - MEMBER NOT GIVEN ON SYSUT2 DD STATEMENT            * 00036\n*              4 - SYSUT1 DATA SET WOULD NOT OPEN                     * 00037\n*              5 - SYSUT2 DATA SET WOULD NOT OPEN                     * 00038\n*              6 - IMPOSSIBLE RETURN FROM STOW                        * 00039\n*                                                                     * 00040\n*********************************************************************** 00041\n*  CHANGES IN 1991                                                    * 00042\n*  JAN 02 - FEB 06 - UPGRADE MOST TAGS TO TAKE ADVANTAGE OF ASSEM H.  * 00043\n*                    ADD NOREPLACE OPTION WITH ABEND IF DUPLICATE     * 00044\n*                    REMOVE RESERVE SINCE ENQUEUE IS DONE BEFORE OPEN * 00045\n*                        AND TESTS CAN CAUSE ABEND                    * 00046\n*                    REMOVE USE OF IEFUCBOB AND IEZDEB MACROS SINCE   * 00047\n*                        RESERVE NOT USED.                            * 00048\n*                                                                     * 00049\n*********************************************************************** 00050\n         EJECT                                                          00051\n*********************************************************************** 00052\n*                                                                     * 00053\n*              MACRO DEFINITIONS                                      * 00054\n*                                                                     * 00055\n*********************************************************************** 00056\n         MACRO                                                          00057\n         XRABEND &N,&DUMP,&STEP                                         00058\nXRABEND&N ABEND &N,&DUMP,&STEP                                          00059\n         MEND                                                           00060\n         EJECT                                                          00061\n*********************************************************************** 00062\n*                                                                     * 00063\n*              REGISTER EQUATES                                       * 00064\n*                                                                     * 00065\n*********************************************************************** 00066\nPUT1A003 CSECT                                                          00067\nR0                 EQU  0                                               00068\nR1                 EQU  1                                               00069\nR2                 EQU  2                                               00070\nR3                 EQU  3                                               00071\nR4                 EQU  4                                               00072\nR5                 EQU  5                                               00073\nR6                 EQU  6                                               00074\nR7                 EQU  7                                               00075\nR8                 EQU  8                                               00076\nR9                 EQU  9                                               00077\nR10                EQU  10                                              00078\nR11                EQU  11                                              00079\nR12                EQU  12                                              00080\nR13                EQU  13                                              00081\nR14                EQU  14                                              00082\nR15                EQU  15                                              00083\nRPARM              EQU  R1              POINTER TO PARM INFORMATION     00084\nRBASE              EQU  R12             BASE REGISTER                   00085\nRSAVE              EQU  R13             SAVE/WORK AREA POINTER          00086\n         EJECT                                                          00087\n*********************************************************************** 00088\n*                                                                     * 00089\n*              PUT1A003 ENTRY POINT                                   * 00090\n*                                                                     * 00091\n*********************************************************************** 00092\nXR000    STM   R14,R12,12(R13)          SAVE REGISTERS                  00093\n         LR    RBASE,R15                SET UP BASE REGISTER            00094\n         LR    R2,RPARM                 SAVE PARM ADDRESS               00095\n         USING XR000,RBASE                                              00096\n         GETMAIN R,LV=XR_WORK_LENGTH    GET CORE FOR SAVE/WORK AREA     00097\n         ST    R1,8(0,R13)              LINK BOTH                       00098\n         ST    R13,4(0,R1)              SAVEAREAS                       00099\n         LR    RSAVE,R1                 GET ADDR OF SAVE/WORK AREA      00100\n         USING XRWORK,RSAVE                                             00101\n         MVI   XW_REPLACE_SWITCH,C'Y'   SET THE REPLACE SWITCH TO THE   00102\n*                                         DEFAULT OF Y (YES-REPLACE)    00103\n         L     R1,0(,R2)                GET ADDRESS OF THE PARM AREA    00104\n         LH    R3,0(,R1)                IF THE PARM SIZE IS ZERO,       00105\n         LTR   R3,R3                      ASSUME THE DEFAULT OF         00106\n         BZ    XR_PARM_DONE               REPLACE                       00107\n         CH    R3,=H'7'                 IF THE PARM SIZE IS 7 AND THE   00108\n         BNE   XR_CHK_NO_REPLACE          PARM IS REPLACE, VALUE IS OK  00109\n         CLC   =C'REPLACE',2(R1)          ELSE IF THE SIZE IS 7 IT IS   00110\n         BE    XR_PARM_DONE               BAD                           00111\n         B     XR_BAD_PARM                                              00112\nXR_CHK_NO_REPLACE  DS  0H                                               00113\n         CH    R3,=H'9'                 IF THE PARM SIZE ISN'T 9, THE   00114\n         BNE   XR_BAD_PARM                PARM IS BAD                   00115\n         CLC   =C'NOREPLACE',2(R1)      IF THE PARM ISN'T NOREPLACE     00116\n         BNE   XR_BAD_PARM                THE PARM IS BAD               00117\n         MVI   XW_REPLACE_SWITCH,C'N'   SET THE REPLACE SWITCH TO N     00118\nXR_PARM_DONE       DS 0H                                                00119\n         MVI   XW_FLAG_BYTE_2,0         CLEAR FLAGS                     00120\n         MVC   XW_MEMBER_NAME,XC_BLANKS INITIALIZE OBJECT DECK ID       00121\n         EJECT                                                          00122\n*********************************************************************** 00123\n*                                                                     * 00124\n*              OPEN DATA SETS                                         * 00125\n*                                                                     * 00126\n*********************************************************************** 00127\n         MVC   XW_SYSPRINT_DCB,SYSPRINT INSTALL DCB IN WORKAREA         00128\n         LA    R1,XW_SYSPRINT_DCB       GET DCB ADDR                    00129\n         ST    R1,XW_DCB_ADDR_LIST      STORE DCB ADDRS IN OPEN PLIST   00130\n         OC    XW_DCB_ADDR_LIST,XC_SYSPRT_OPN_LST OR IN FLAG BYTES      00131\n         OPEN  MF=(E,XW_DCB_ADDR_LIST)  OPEN LISTING DCBS               00132\n         USING IHADCB,R1                                                00133\n         LA    R1,XW_SYSPRINT_DCB       GET DCB ADDR                    00134\n         TM    DCBOFLGS,X'10'           DID DCB OPEN?                   00135\n         BNO   XR_ABEND_WTO_2           BRANCH IF NO - ABEND            00136\n         EJECT                                                          00137\n*********************************************************************** 00138\n*                                                                     * 00139\n*              COPY OBJECT DECK TO LIBRARY                            * 00140\n*                                                                     * 00141\n*********************************************************************** 00142\n         MVC   XW_SYSUT1_DCB,SYSUT1     INSTALL DCB IN WORKAREA         00143\n         MVC   XW_SYSUT2_DCB,SYSUT2     INSTALL DCB IN WORKAREA         00144\n         LA    R0,XW_SYSUT1_DCB         GET DCB ADDR                    00145\n         LA    R1,XW_SYSUT2_DCB         GET DCB ADDR                    00146\n         STM   R0,R1,XW_DCB_OPN_CLS_LST STORE DCB ADDRS IN OPEN PLIST   00147\n         OC    XW_DCB_OPN_CLS_LST,XC_SYSUT2_OPN_LST OR IN FLAG BYTES    00148\n         USING IHADCB,R1                                                00149\n         LA    R0,XW_DCB_EXIT_LIST      GET ADDR OF DCB EXIT LIST       00150\n         O     R0,DCBRECFM              OR IN RECFM BITS                00151\n         ST    R0,DCBEXLST              STORE EXIT LIST ADDR / RECFM    00152\n         DROP  R1                                                       00153\n         LA    R0,XW_JFCB               GET JFCB AREA ADDR              00154\n         ST    R0,XW_DCB_EXIT_LIST      STORE JFCB ADDR IN EXIT LIST    00155\n         MVI   XW_DCB_EXIT_LIST,X'87'   SET JFCB AREA/END OF LIST BITS  00156\n         XC    XW_JFCB,XW_JFCB          ZERO OUT JFCB                   00157\n         RDJFCB MF=(E,XW_DCB_OPN_CLS_LST+4) READ IN JFCB                00158\n         NC    XW_JFCB,XW_JFCB          IS JFCB STILL ZERO?             00159\n         BZ    XR_ABEND_WTO_5           BRANCH IF YES - NO JFCB - ABEND 00160\n         CLC   JFCBELNM,XC_BLANKS       MEMBER SPECIFIED?               00161\n         BE    XR_ABEND_WTO_3           BRANCH IF NO - ABEND            00162\n         MVC   XW_MEMBER_NAME,JFCBELNM  SAVE MEMBER NAME                00163\n         NC    JFCBLKSI,JFCBLKSI        IF BLKSIZE NOT ZERO GO TO       00164\n         BNZ   XR_ABEND_WTO_7             ABEND7                        00165\n         NC    JFCLRECL,JFCLRECL        IF LRECL NOT ZERO GO TO ABEND7  00166\n         BNZ   XR_ABEND_WTO_7                                           00167\n         CLI   JFCRECFM,X'00'           IF RECFM NOT LOW-VALUE GO TO    00168\n         BNZ   XR_ABEND_WTO_8             ABEND8                        00169\n         BAL   R14,XR_ENQUEUE_SYSUT2    ENQ ON SYSUT2                   00170\n         OPEN  MF=(E,XW_DCB_OPN_CLS_LST) OPEN DCB FOR SYSUT1 & SYSUT2   00171\n         USING IHADCB,R6                                                00172\n         LA    R6,XW_SYSUT1_DCB         GET DCB ADDR                    00173\n         TM    DCBOFLGS,X'10'           DID DCB OPEN?                   00174\n         BNO   XRABEND4                 BRANCH IF NO - ABEND            00175\n         LA    R6,XW_SYSUT2_DCB         GET DCB ADDR                    00176\n         TM    DCBOFLGS,X'10'           DID DCB OPEN?                   00177\n         BNO   XR_ABEND_WTO_5           BRANCH IF NO - ABEND            00178\n         CLI   XW_REPLACE_SWITCH,C'N'   BYPASS BLDL IF REPLACE ALLOWED  00179\n         BNE   XR_GET_SYSUT2_BUF                                        00180\n         LA    R15,1                                                    00181\n         STH   R15,XW_BLDL_COUNT                                        00182\n         LA    R15,74                                                   00183\n         STH   R15,XW_BLDL_ENTRY_LEN                                    00184\n         BLDL  (R6),XW_BLDL_LIST       DO THE BLDL FOR SYSUT2           00185\n         LTR   R15,R15                 IF ENTRY FOUND GO TO ABEND FOR   00186\n         BZ    XR_DUPLICATE_ENTRY        DUPLICATE                      00187\n         C     R15,=F'4'               IF RETURN CODE IS NOT 4 GO TO    00188\n         BNE   XR_BAD_DIRECT_READ         ABEND FOR BAD READ            00189\nXR_GET_SYSUT2_BUF  DS  0H                                               00190\n         LH    R0,DCBBLKSI              GET SIZE OF A BLOCK             00191\n         DROP  R6                                                       00192\n         GETMAIN R,LV=(0)               GET BUFFER OF APPROPRIATE SIZE  00193\n         ST    R1,XW_SYSUT2_BUF_ADDR    SAVE BUFFER ADDRESS             00194\n         BAL   R14,XR_SYSUT2_SET_PTRS   GO SET UP BUFFER POINTERS       00195\n         MVC   XW_SYSUT2_DECB,XRWRITE   INSTALL DECB IN WORKAREA        00196\n         EJECT                                                          00197\n*********************************************************************** 00198\n*                                                                     * 00199\n*              COPY OBJECT DECK                                       * 00200\n*                                                                     * 00201\n*********************************************************************** 00202\nXR_READ_CARD       DS  0H                                               00203\n         BAL   R14,XR_READ_SYSUT1       READ A CARD                     00204\n         BAL   R14,XR_WR_SYSUT2_REC WRITE IT OUT                        00205\n         B     XR_READ_CARD             LOOP TIL EOF                    00206\n         EJECT                                                          00207\n*********************************************************************** 00208\n*                                                                     * 00209\n*              STOW MEMBER IN DIRECTORY                               * 00210\n*                                                                     * 00211\n*********************************************************************** 00212\nXR_END_CARD_RTN    DS  0H                                               00213\n         XC    XW_STOW_TTRC,XW_STOW_TTRC CLEAR TTR AND CONTROL BYTE     00214\n         OI    XW_FLAG_BYTE_2,XW_CLEAR_BUFFER                           00215\n*                                     INDICATE FLUSH OF SHORT BUFFER    00216\n         BAL   R14,XR_WR_SYSUT2_REC WRITE IT OUT                        00217\n         STOW  XW_SYSUT2_DCB,XW_STOW_ADDR_LIST,R                        00218\n*                                       STOW MEMBER NAME/TTR/STAMP      00219\n         B     XR_STOW_BRANCH_TBL(R15)  BRANCH ON STOW RETURN CODE      00220\nXR_STOW_BRANCH_TBL DS  0H               MEMBER REPLACED                 00221\n         B     XR_MEMBER_REPLACED       MEMBER REPLACED                 00222\n         B     XR_ABEND_WTO_6           IMPOSSIBLE CONDITION WITH R OPT 00223\n         B     XR_MEMBER_ADDED          MEMBER ADDED - NOT FOUND        00224\n         B     XR_DIRECTORY_FULL        DIRECTORY FULL                  00225\n         B     XR_DIRECTRY_IO_ERR       DIRECTORY I/O ERROR             00226\nXR_MEMBER_REPLACED DS  0H               POINT TO MESSAGE                00227\n         LA    R2,XC_MEMBR_REPL_MSSG    POINT TO MESSAGE                00228\n         LA    R3,L'XC_MEMBR_REPL_MSSG-1 GET MSG LEN MINUS ONE FOR EX   00229\n         B     XR_PRINT_MESSAGE         GO PRINT MESSAGES               00230\nXR_MEMBER_ADDED    DS 0H                                                00231\n         LA    R2,XC_MEMBR_ADD_MSSG POINT TO MESSAGE                    00232\n         LA    R3,L'XC_MEMBR_ADD_MSSG-1 GET MSG LEN MINUS ONE FOR EX    00233\n         B     XR_PRINT_MESSAGE         GO PRINT MESSAGES               00234\nXR_DIRECTORY_FULL  DS  0H               POINT TO MESSAGE                00235\n         LA    R2,XC_DIRECT_FUL_MSSG    POINT TO MESSAGE                00236\n         LA    R3,L'XC_DIRECT_FUL_MSSG-1 GET MSG LEN MINUS ONE FOR EX   00237\n         OI    XW_FLAG_BYTE_2,XW_DIRECTORY_ERROR OBJLIB DIRECTORY ERROR 00238\n         B     XR_PRINT_MESSAGE         GO PRINT MESSAGE                00239\nXR_DIRECTRY_IO_ERR DS  0H                                               00240\n         LA    R2,XC_IO_ERROR_MSSG POINT TO MESSAGE                     00241\n         LA    R3,L'XC_IO_ERROR_MSSG-1  GET MSG LEN MINUS ONE FOR EX    00242\n         OI    XW_FLAG_BYTE_2,XW_DIRECTORY_ERROR OBJLIB DIRECTORY ERROR 00243\n         B     XR_PRINT_MESSAGE         GO PRINT MESSAGE                00244\nXR_PRINT_MESSAGE   DS  0H                                               00245\n         MVI   XW_PRINT_LINE,C' '       BLANK OUT PRINT LINE            00246\n         MVC   XW_PRINT_LINE+1(L'XW_PRINT_LINE-1),XW_PRINT_LINE         00247\n         EX    R3,XR_MOVE_BUF_MSSG      MOVE MESSAGE INTO LIST BUFFER   00248\n         MVI   XW_PRINT_CTL_CHR,XR_PAGE_EJECT FORCE EJECT ON NEXT WRITE 00249\n         MVC   XW_PRINT_LINE+8(8),XW_MEMBER_NAME INSERT OBJECT ID       00250\n         BAL   R14,XR_WRITE_PRINT       OUTPUT MESSAGE                  00251\n         EJECT                                                          00252\n*********************************************************************** 00253\n*                                                                     * 00254\n*              CLOSE/DEQ OBJECT DATA SETS AND FREE OBJECT BUFFER      * 00255\n*                                                                     * 00256\n*********************************************************************** 00257\n         LA    R1,XW_SYSUT2_DCB         GET DCB ADDRESS                 00258\n         USING IHADCB,R1                                                00259\n         LH    R0,DCBBLKSI              GET BLOCKSIZE (BUFFER SIZE)     00260\n         DROP  R1                                                       00261\n         L     R1,XW_SYSUT2_BUF_ADDR    GET BUFFER ADDRESS              00262\n         FREEMAIN R,LV=(0),A=(1)        FREE OBJECT BUFFER              00263\n         CLOSE MF=(E,XW_DCB_OPN_CLS_LST) CLOSE OBJECT DATA SETS         00264\n         DEQ   MF=(E,XW_ENQ_DEQ_WORK)   DEQ ON OBJECT LIBRARY           00265\n         FREEPOOL XW_SYSUT1_DCB         FREE BUFFER POOL FOR SYSUT1 DS  00266\n         EJECT                                                          00267\n*********************************************************************** 00268\n*                                                                     * 00269\n*              CLOSE LISTING DATA SET                                 * 00270\n*                                                                     * 00271\n*********************************************************************** 00272\n         CLOSE MF=(E,XW_DCB_ADDR_LIST)  CLOSE LISTING DATA SET          00273\n         FREEPOOL XW_SYSPRINT_DCB       FREE BUFFER POOL FOR SYSPRINT   00274\n         EJECT                                                          00275\n*********************************************************************** 00276\n*                                                                     * 00277\n*              TERMINATION                                            * 00278\n*                                                                     * 00279\n*********************************************************************** 00280\n         L     R2,4(0,RSAVE)            GET PREVIOUS SAVEAREA ADDRESS   00281\n         SR    R15,R15                  SET RETURN CODE TO ZERO         00282\n         TM    XW_FLAG_BYTE_2,XW_DIRECTORY_ERROR                        00283\n*                                      DID OBJLIB PDS DIR ERROR OCCUR?  00284\n         BZ    XR_END_JOB_1             BRANCH IF NO - RTN CODE = 0     00285\n         LA    R15,4                    YES - RETURN CODE = 4           00286\nXR_END_JOB_1       DS  0H               SAVE RTN CODE ACROSS FREEMAIN   00287\n         LR    R3,R15                   SAVE RTN CODE ACROSS FREEMAIN   00288\n         FREEMAIN R,LV=XR_WORK_LENGTH,A=(RSAVE) FREE SAVE/WORK AREA     00289\n         LR    R15,R3                   SET RETURN CODE                 00290\n         LR    R13,R2                   SET SAVEAREA ADDRESS            00291\n         L     R14,12(0,R13)            GET RETURN ADDRESS              00292\n         LM    R0,R12,20(R13)           RESTORE REGISTERS               00293\n         BR    R14                      RETURN TO CALLER                00294\n         EJECT                                                          00295\n*********************************************************************** 00296\n*                                                                     * 00297\n*              WRITE LISTING DATA SET                                 * 00298\n*                                                                     * 00299\n*********************************************************************** 00300\nXR_WRITE_PRINT     DS  0H                                               00301\n         LA    R0,XW_PRINT_LINE         GET ADDRESS OF LISTING BUFFER   00302\n         ST    R14,XW_IO_ROUT_RETURN SAVE RETURN ADDRESS                00303\n         PUT   XW_SYSPRINT_DCB,(0)      PUT A LINE TO THE LISTING       00304\n         L     R14,XW_IO_ROUT_RETURN GET RETURN ADDRESS                 00305\n         BR    R14                      RETURN TO CALLER                00306\n         EJECT                                                          00307\n*********************************************************************** 00308\n*                                                                     * 00309\n*              READ OBJECT DATA SET                                   * 00310\n*                                                                     * 00311\n*********************************************************************** 00312\nXR_READ_SYSUT1     DS  0H                                               00313\n         ST    R14,XW_IO_ROUT_RETURN SAVE RETURN ADDRESS                00314\n         GET   XW_SYSUT1_DCB,XW_INP_REC_WORK                            00315\n*                                    GET A CARD FROM THE OBJECT DECK    00316\n         L     R14,XW_IO_ROUT_RETURN GET RETURN ADDRESS                 00317\n         BR    R14                      RETURN TO CALLER                00318\n         EJECT                                                          00319\n*********************************************************************** 00320\n*                                                                     * 00321\n*              WRITE OBJECT DATA SET                                  * 00322\n*                                                                     * 00323\n*********************************************************************** 00324\nXR_WR_SYSUT2_REC   DS  0H                                               00325\n         ST    R14,XW_IO_ROUT_RETURN SAVE RETURN ADDRESS                00326\n         STM   R3,R5,XW_IO_REG_SAVE    SAVE WORK REGISTERS              00327\n         LM    R3,R5,XW_BUFFR_REG_SAVE  LOAD BUFFER CONTROL REGISTERS   00328\n         TM    XW_FLAG_BYTE_2,XW_CLEAR_BUFFER                           00329\n*                                      IS THIS A BUFFER FLUSH CALL?     00330\n         BO    XR_WR_SYSUT2_SHORT       BRANCH IF YES                   00331\n         MVC   0(L'XW_INP_REC_WORK,R3),XW_INP_REC_WORK                  00332\n*                                            MOVE CARD IMAGE TO BUFFER  00333\n         BXLE  R3,R4,XR_SYSUT2_FILL_BUFF BRANCH IF NOT END OF BUFFER    00334\n         B     XR_WR_SYSUT2_FULL        GO OUTPUT FULL BUFFER           00335\nXR_WR_SYSUT2_SHORT DS  0H                                               00336\n         S     R3,XW_SYSUT2_BUF_ADDR    GET SIZE OF SHORT BUFFER        00337\n         BZ    XR_SET_SYSUT2_REGS       BRANCH IF NOTHING TO FLUSH      00338\n         LA    R4,XW_SYSUT2_DCB         GET DCB ADDR                    00339\n         USING IHADCB,R4                                                00340\n         LH    R5,DCBBLKSI              GET STANDARD BLOCKSIZE          00341\n         STH   R3,DCBBLKSI              STORE SHORT BLOCKSIZE           00342\nXR_WR_SYSUT2_FULL  DS  0H                                               00343\n         L     R3,XW_SYSUT2_BUF_ADDR    POINT TO OUTPUT BUFFER          00344\n         WRITE XW_SYSUT2_DECB,SF,XW_SYSUT2_DCB,(R3),MF=E                00345\n*                                               WRITE OUT THE BLOCK     00346\n         CHECK XW_SYSUT2_DECB           WAIT FOR COMPLETION             00347\n         TM    XW_FLAG_BYTE_2,XW_CLEAR_BUFFER                           00348\n*                                      IS THIS A BUFFER FLUSH CALL?     00349\n         BNO   XR_SYSUT2_FILL_BUFF      BRANCH IF NO                    00350\n         NI    XW_FLAG_BYTE_2,X'FF'-XW_CLEAR_BUFFER RESET FLUSH FLAG    00351\n         STH   R5,DCBBLKSI              RESET ORIGINAL BLOCKSIZE        00352\n         DROP  R4                                                       00353\nXR_SYSUT2_FILL_BUFF DS 0H                                               00354\n         STM   R3,R5,XW_BUFFR_REG_SAVE  SAVE NEW BUFFER CONTROL REGS    00355\n         LM    R3,R5,XW_IO_REG_SAVE    RESTORE WORK REGISTERS           00356\n         L     R14,XW_IO_ROUT_RETURN GET RETURN ADDRESS                 00357\n         BR    R14                                                      00358\nXR_SYSUT2_SET_PTRS DS  0H                                               00359\n         STM   R3,R5,XW_IO_REG_SAVE    SAVE WORK REGISTERS              00360\n         ST    R14,XW_IO_ROUT_RETURN SAVE RETURN ADDRESS                00361\nXR_SET_SYSUT2_REGS DS  0H                                               00362\n         L     R3,XW_SYSUT2_BUF_ADDR    GET ADDRESS OF BUFFER           00363\n         LA    R4,L'XW_INP_REC_WORK     GET LRECL                       00364\n         LR    R5,R3                                                    00365\n         USING IHADCB,R14                                               00366\n         LA    R14,XW_SYSUT2_DCB        GET DCB ADDR                    00367\n         AH    R5,DCBBLKSI              GET END OF BUFFER ADDR          00368\n         SR    R5,R4                    POINT TO LAST RECORD IN BUFFER  00369\n         DROP  R14                                                      00370\n         STM   R3,R5,XW_BUFFR_REG_SAVE  SET BUFFER CONTROL REGISTERS    00371\n         LM    R3,R5,XW_IO_REG_SAVE    RESTORE WORK REGISTERS           00372\n         L     R14,XW_IO_ROUT_RETURN GET RETURN ADDRESS                 00373\n         BR    R14                      RETURN TO CALLER                00374\n         EJECT                                                          00375\n*********************************************************************** 00376\n*                                                                     * 00377\n*              ENQ ON SYSUT2 DATA SET                                 * 00378\n*                                                                     * 00379\n*********************************************************************** 00380\n*                                                                       00381\nXR_ENQUEUE_SYSUT2  DS  0H                                               00382\n         ST    R14,XW_IO_ROUT_RETURN         SAVE RETURN ADDRESS        00383\n         MVC   XW_ENQ_DEQ_WORK(XC_ENQ_LIST_LENGTH),XC_ENQUEUE_LIST      00384\n*                                      MOVE ENQ LIST TO WORKAREA        00385\n         ENQ   (,XW_JFCB),MF=(E,XW_ENQ_DEQ_WORK) ENQ ON SPF DATA SET    00386\nXR_ENQUEUE_EXIT    DS  0H                                               00387\n         L     R14,XW_IO_ROUT_RETURN         RETURN TO CALLER           00388\n         BR    R14                                                      00389\n         EJECT                                                          00390\n*********************************************************************** 00391\n*                                                                     * 00392\n*              ABEND ROUTINES                                         * 00393\n*                                                                     * 00394\n*********************************************************************** 00395\nXR_ABEND_WTO_2     DS  0H                                               00396\n         WTO   'PUT1A003 - SYSPRINT WILL NOT OPEN '                     00397\n         XRABEND 2                      SYSPRINT WOULD NOT OPEN         00398\nXR_ABEND_WTO_3     DS  0H                                               00399\n         WTO   'PUT1A003 - NO MEMBER NAME FOR SYSUT2'                   00400\n         XRABEND 3                      SYSUT2 MEMBER NOT GIVEN         00401\nXR_ABEND_WTO_4     DS  0H                                               00402\n         WTO   'PUT1A003 - SYSUT1 WILL NOT OPEN'                        00403\n         XRABEND 4                      SYSUT1 WOULD NOT OPEN           00404\nXR_ABEND_WTO_5     DS  0H                                               00405\n         WTO   'PUT1A003 - SYSUT2 WILL NOT OPEN'                        00406\n         XRABEND 5                      SYSUT2 WOULD NOT OPEN           00407\nXR_ABEND_WTO_6     DS  0H                                               00408\n         WTO   'PUT1A003 - BAD RETURN FROM DIRECTORY UPDATE'            00409\n         XRABEND 6                      BAD DIRECTORY UPDATE            00410\nXR_ABEND_WTO_7     DS  0H                                               00411\n         WTO   'PUT1A003 - SYSUT2 JCL BLKSIZE OR LRECL NOT ZERO'        00412\n         XRABEND 7                      BLKSIZE OR LRECL IN JCL         00413\nXR_ABEND_WTO_8     DS  0H                                               00414\n         WTO   'PUT1A003 - SYSUT2 RECFM IN JCL'                         00415\n         XRABEND 8                      RECFM IN JCL ABEND              00416\nXR_BAD_PARM        DS  0H                                               00417\n         WTO   'PUT1A003 - PARM NOT BLANK, REPLACE OR NOREPLACE'        00418\n         XRABEND 9                      RECFM IN JCL ABEND              00419\nXR_BAD_DIRECT_READ DS  0H                                               00420\n         WTO   'PUT1A003 - BAD READ OF DIRECTORY FOR FILE SPECIFIED IN *00421\n               SYSUT2'                                                  00422\n         XRABEND 10                     RECFM IN JCL ABEND              00423\nXR_DUPLICATE_ENTRY DS  0H                                               00424\n         WTO   'PUT1A003 - NOREPLACE SPECIFIED, MEMBER ALREADY IN THE L*00425\n               IBRARY SPECIFIED BY SYSUT2'                              00426\n         XRABEND 11                     DUPLICATE ENTRY ABEND           00427\n         EJECT                                                          00428\n*********************************************************************** 00429\n*                                                                     * 00430\n*              CONSTANTS                                              * 00431\n*                                                                     * 00432\n*********************************************************************** 00433\nXC_BLANKS DC   CL8' '                                                   00434\nXC_ENQUEUE_QNAME   DC  CL8'SPFEDIT '    QNAME FOR ENQ/DEQ OF OBJ        00435\nXC_MEMBR_REPL_MSSG DC  C'MEMBER XXXXXXXX REPLACED IN LIBRARY'           00436\nXC_MEMBR_ADD_MSSG  DC  C'MEMBER XXXXXXXX ADDED TO LIBRARY'              00437\nXC_DIRECT_FUL_MSSG DC  C'MEMBER XXXXXXXX NOT USABLE - DIRECTORY FULL'   00438\nXC_IO_ERROR_MSSG   DC                                                  *00439\n               C'MEMBER XXXXXXXX NOT USABLE - DIRECTORY I/O ERROR'      00440\n         EJECT                                                          00441\n*********************************************************************** 00442\n*                                                                     * 00443\n*              OPEN/CLOSE, ENQ/DEQ AND WRITE PARAMETER LISTS          * 00444\n*                                                                     * 00445\n*********************************************************************** 00446\n*                                      OPEN LIST FOR LISTING DCBS       00447\nXC_SYSPRT_OPN_LST OPEN (0,(OUTPUT)),MF=L                                00448\nXC_SYSPRT_OPN_LSTL EQU *-XC_SYSPRT_OPN_LST                              00449\n*                                      OPEN LIST FOR OBJECT DCBS        00450\nXC_SYSUT2_OPN_LST OPEN (0,(INPUT),0,(OUTPUT)),MF=L                      00451\nXC_SYSUT2_OPN_LSTL EQU  *-XC_SYSUT2_OPN_LST                             00452\n*              ENQ/DEQ LIST FOR OBJ/XSYM                                00453\nXC_ENQUEUE_LIST    ENQ (XC_ENQUEUE_QNAME,0,E,44,SYSTEM),MF=L            00454\nXC_ENQ_LIST_LENGTH EQU *-XC_ENQUEUE_LIST                                00455\n*              RESERVE LIST                                             00456\nXC_RESERVE_LIST    RESERVE (XC_ENQUEUE_QNAME,0,E,44,SYSTEMS),          *00457\n               UCB=0,MF=L                                               00458\nXC_RESERV_LST_LNGTH EQU *-XC_RESERVE_LIST                               00459\n         WRITE XRWRITE,SF,MF=L          WRITE LIST FOR OBJECT DATE SET  00460\nXC_SYSUT2_DECB_LNGTH EQU *-XRWRITE                                      00461\n         EJECT                                                          00462\n*********************************************************************** 00463\n*                                                                     * 00464\n*              EXECUTED INSTRUCTIONS                                  * 00465\n*                                                                     * 00466\n*********************************************************************** 00467\nXR_MOVE_BUF_MSSG MVC XW_PRINT_LINE+1(0),0(R2)                           00468\n*                             MOVE MESSAGE INTO LIST BUFFER             00469\n         EJECT                                                          00470\n*********************************************************************** 00471\n*                                                                     * 00472\n*              LITERAL POOL                                           * 00473\n*                                                                     * 00474\n*********************************************************************** 00475\n         LTORG                                                          00476\n         EJECT                                                          00477\n*********************************************************************** 00478\n*                                                                     * 00479\n*              DCB FOR WRITING LISTING                                * 00480\n*                                                                     * 00481\n*********************************************************************** 00482\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,BLKSIZE=121,LRECL=121,         *00483\n               MACRF=(PM),RECFM=FM                                      00484\nSYSPRINT_DCB_LNGTH EQU *-SYSPRINT                                       00485\n         EJECT                                                          00486\n*********************************************************************** 00487\n*                                                                     * 00488\n*              DCB FOR READING OBJECT DECK                            * 00489\n*                                                                     * 00490\n*********************************************************************** 00491\nSYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,EODAD=XR_END_CARD_RTN,LRECL=80,  *00492\n               MACRF=(GM),RECFM=FB                                      00493\nSYSUT1_DCB_LENGTH EQU *-SYSUT1                                          00494\n         EJECT                                                          00495\n*********************************************************************** 00496\n*                                                                     * 00497\n*              DCB FOR WRITING OBJECT MEMBER                          * 00498\n*                                                                     * 00499\n*********************************************************************** 00500\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PO,LRECL=80,MACRF=(W),RECFM=FB,     *00501\n               EXLST=0                                                  00502\nSYSUT2_DCB_LENGTH EQU *-SYSUT2                                          00503\n         EJECT                                                          00504\n*********************************************************************** 00505\n*                                                                     * 00506\n*              SAVE/WORK AREA DSECT                                   * 00507\n*                                                                     * 00508\n*********************************************************************** 00509\nXRWORK   DSECT                                                          00510\nXW_SAVE_AREA       DS  18F              STANDARD OS SAVEAREA            00511\nXW_IO_ROUT_RETURN  DS  F                RTN ADDR FROM I/O ROUTINES      00512\nXW_BUFFR_REG_SAVE  DS  3F               OBJLIB BUFFER CONTROL REGISTERS 00513\nXW_IO_REG_SAVE     DS  3F               I/O ROUTINE WORKREG SAVEAREA    00514\n*                                      LISTING DCBS OPEN/CLOSE LIST     00515\nXW_DCB_ADDR_LIST   DS  XL(XC_SYSPRT_OPN_LSTL)                           00516\n*                                      OBJECT DCBS OPEN/CLOSE LIST      00517\nXW_DCB_OPN_CLS_LST DS  XL(XC_SYSUT2_OPN_LSTL)                           00518\nXW_DCB_EXIT_LIST   DS  A                XSYMBOL/SYSUT2 DCB EXIT LIST    00519\nXW_SYSUT2_BUF_ADDR DS  A                ADDRESS OF OBJLIB OUTPUT BUFFER 00520\n                   DS  0F                                               00521\n*                          LIST AREA FOR BLDL SEARCH                    00522\nXW_BLDL_LIST       DS  0CL76                                            00523\nXW_BLDL_COUNT      DS  H                                                00524\nXW_BLDL_ENTRY_LEN  DS  H                                                00525\nXW_STOW_ADDR_LIST  DS  0XL12            STOW LIST                       00526\nXW_MEMBER_NAME     DS  CL8              OBJECT ID                       00527\nXW_STOW_TTRC       DS  XL4              TTR AND CONTROL BYTE            00528\nXW_FLAG_BYTE_2     DS  X                SECOND FLAG BYTE                00529\nXW_CLEAR_BUFFER    EQU  X'10'           CLEAR OBJLIB SHORT BUFFER       00530\nXW_DIRECTORY_ERROR EQU  X'04'           OBJLIB DIRECTORY WAS FULL OR    00531\n*                                       DIRECTORY I/O ERROR OCCURRED    00532\n                   DS  XL62             USER AREA FOR DIRECTORY ENTRY   00533\n*                                                                       00534\n                   DS  0F                                               00535\n*                                      DECB FOR OBJECT LIBRARY WRITES   00536\nXW_SYSUT2_DECB     DS  XL(XC_SYSUT2_DECB_LNGTH)                         00537\n                   DS  0F                                               00538\nXW_SYSPRINT_DCB    DS  XL(SYSPRINT_DCB_LNGTH) LISTING OUTPUT DCB        00539\n                   DS  0F                                               00540\nXW_SYSUT1_DCB      DS  XL(SYSUT1_DCB_LENGTH) OBJECT INPUT DCB           00541\n                   DS  0F                                               00542\nXW_SYSUT2_DCB      DS  XL(SYSUT2_DCB_LENGTH) OBJECT OUTPUT DCB          00543\n                   DS  0F                                               00544\nXW_JFCB            DS  0XL176           OBJECT JFCB                     00545\n         IEFJFCBN LIST=YES                                              00546\nXW_INP_REC_WORK    DS  XL80             OBJECT DECK CARD INPUT AREA     00547\n*                                      SYSUT2 ENQ/DEQ/RESERVE PARMS     00548\nXW_ENQ_DEQ_WORK    DS  XL(XC_RESERV_LST_LNGTH)                          00549\nXW_PRINT_LINE      DS  0CL121           LISTING INPUT/OUTPUT AREA       00550\nXW_PRINT_CTL_CHR   DS  C                CONTROL CHARACTER               00551\nXW_PRINT_DETAIL    DS  CL120            DATA AREA OF PRINT LINE         00552\nXW_REPLACE_SWITCH  DS  C                                                00553\nXR_PAGE_EJECT      EQU  X'89'           SKIP TO CH1 AFTER PRINTING      00554\nXR_WORK_LENGTH     EQU  *-XRWORK                                        00555\n         EJECT                                                          00556\n*********************************************************************** 00557\n*                                                                     * 00558\n*              DSECT FOR DCB                                          * 00559\n*                                                                     * 00560\n*********************************************************************** 00561\n         DCBD  DSORG=PS,DEVD=DA                                         00562\n         LUT1A001 STAMP='037PUT1A003  02/06/91  9.34.18  '              00563\n         END   PUT1A003                                                 00564\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PUT1B033": {"ttr": 6409, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*          DATA SET PUT1B033   AT LEVEL 001 AS OF 02/04/91\n*          DATA SET PUT1B033   AT LEVEL 003 AS OF 01/22/91              00001\n*          DATA SET PUT1B033   AT LEVEL 002 AS OF 01/22/91              00002\n*          DATA SET PUT1B033CM AT LEVEL 024 AS OF 10/25/90              00003\n*          DATA SET PUT1B033CM AT LEVEL 023 AS OF 10/25/90              00004\n*********************************************************************** 00005\n*                           *              *                            00006\n*                           *   PUT1B033   *                            00007\n*                           *              *                            00008\n*                           ****************                            00009\n*                                                                       00010\n*   SUMMARY:                                                            00011\n*      DATA SET UTILITY TO ADD, DELETE, & RENAME MEMBER & ALIAS NAMES.  00012\n*                                                                       00013\n*********************************************************************** 00014\n*                                                                       00015\n*   ABBREVIATIONS:                                                      00016\n*      @         ADDRESS.                                               00017\n*      CALC      CALCULATE.                                             00018\n*      CHAR      CHARACTER.                                             00019\n*      CC        CONDITION CODE; CARRIAGE CONTROL.                      00020\n*      HSA       HIGHER SAVE AREA.                                      00021\n*      INSTR     INSTRUCTION.                                           00022\n*      PACK DEC  PACKED DECIMAL.                                        00023\n*      REG       REGISTER(S).                                           00024\n*      SA        SAVE AREA.                                             00025\n*                                                                       00026\n*   CONVENTIONS:                                                        00027\n*                                                                       00028\n*   DESCRIPTION:                                                        00029\n*                                                                       00030\n*      PUT1B033 IS A PARTITIONED DATA SET UTILITY PROGRAM TO RENAME     00031\n*      MEMBERS, ADD ALIAS NAMES TO MEMBERS, AND DELETE MEMBERS.         00032\n*                                                                       00033\n*      CONTROL STATEMENTS ARE FUNRISHED AS CARD IMAGES ON SYSIN.        00034\n*      AT PRESENT 3 STATEMENTS ARE RECOGNIZED:                          00035\n*         RENAME MEMBER=_,NEWNAME=_                                     00036\n*         ALIAS MEMBER=_,NEWNAME=_                                      00037\n*         DELETE MEMBER=_                                               00038\n*      (UNDERLINES REPRESENT USER-SUPPLIED MEMBER NAMES.)               00039\n*      THE RENAME, ALIAS, AND DELETE STATEMENTS RENAME, ADD AN ALIAS    00040\n*      TO, AND DELETE A MEMBER, RESPECTIVELY.                           00041\n*      MEMBER SPECIFIES THE NAME OF THE EXISTING MEMBER; NEWNAME        00042\n*      SPECIFIES THE NEW NAME OF THE RENAMED MEMBER OR THE ALIAS TO     00043\n*      BE ADDED.                                                        00044\n*                                                                       00045\n*      STATEMENTS MUST BE IN COLUMNS 1-71 AND CANNOT BE CONTINUED.      00046\n*      OPERATION AND OPERAND FIELDS MUST BE WRITTEN WITH NO EMBEDDED    00047\n*      BLANKS AND MUST BE SEPARATED FROM EACH OTHER BY AT LEAST ONE     00048\n*      BLANK.  THE STATEMENT IS TERMINATED BY THE FIRST BLANK AFTER     00049\n*      THE START OF THE OPERAND FIELD OR COLUMN 72, WHICHEVER COMES     00050\n*      FIRST.                                                           00051\n*                                                                       00052\n*      THE CONTROL CARD AND MESSAGES CONCERNING PERFORMANCE ARE         00053\n*      WRITTEN ON SYSPRINT, WHICH IS RECFM=FBA, LRECL=121 AND HAS       00054\n*      A DEFAULT OF BLKSIZE=1210.                                       00055\n*                                                                       00056\n*      THE PARTITIONED DATA SET TO BE PROCESSED IS FURNISHED BY SYSUT1. 00057\n*      THE RETURN CODE IS SET TO INDICATE PROGRAM PERFORMANCE AND THE   00058\n*      VALUE FOR THE STEP IS REPORTED ON SYSPRINT.  (SEE MESSAGES.)     00059\n*                                                                       00060\n*   EXAMPLES:                                                           00061\n*      1.  THE FOLLOWING JOB STEP WOULD LEAVE THE LIBRARY ON SYSUT1     00062\n*      AS IT WAS WHEN THE STEP BEGAN IF THERE ALREADY WAS A MEMBER      00063\n*      NAMED A AND THERE WERE NO MEMBERS NAMED B OR C.  OTHERWISE       00064\n*      ONE OR MORE OF THE OPERATIONS WOULD FAIL AND GIVE APPROPRIATE    00065\n*      ERROR MESSAGES.                                                  00066\n*         // EXEC PGM=PUT1B033,REGION=30K                               00067\n*         //SYSPRINT DD SYSOUT=A                                        00068\n*         //SYSUT1 DD DSN=USERID.LIB.LOAD,DISP=OLD                      00069\n*         //SYSIN DD *                                                  00070\n*          ALIAS MEMBER=A,NEWNAME=B                                     00071\n*          RENAME MEMBER=B,NEWNAME=C                                    00072\n*          DELETE MEMBER=C                                              00073\n*                                                                       00074\n*   INPUT:                                                              00075\n*      SYSIN     CONTROL STATEMENTS:                                    00076\n*                CARD 1-N:                                              00077\n*                   COL 1-71:                                           00078\n*                      0-N BLANKS.                                      00079\n*                      OPERATION:                                       00080\n*                         RENAME -- RENAME A MEMBER.                    00081\n*                         ALIAS -- ADD AN ALIAS TO A MEMBER.            00082\n*                         DELETE -- DELETE A MEMBER.                    00083\n*                      1-N BLANKS.                                      00084\n*                      OPERAND:  COMMA SEPARATES; BLANK ENDS.           00085\n*                         (_ IS A MEMBER NAME.)                         00086\n*                         MEMBER=_ -- EXISTING MEMBER NAME.             00087\n*                         NEWNAME=_ -- NEW MEMBER NAME.                 00088\n*                         (BOTH ARE REQUIRED FOR RENAME & ALIAS;        00089\n*                         ONLY MEMBER=_ IS REQUIRED FOR DELETE.)        00090\n*   INPUT/OUTPUT:                                                       00091\n*      SYSUT1    PARTITIONED DATA SET TO BE MODIFIED.                   00092\n*   OUTPUT:                                                             00093\n*      SYSPRINT  PRINTED PROGRAM EXECUTION LOG:                         00094\n*                A PROGRAM AND RUN IDENTIFICATION IS PRINTED, FOLLOWED  00095\n*                BY ALTERNATING CONTROL STATEMENTS AND ERROR MESSAGES,  00096\n*                FOLLOWED BY THE END MESSAGE REPORTING THE RETURN CODE. 00097\n*                                                                       00098\n*   MESSAGES:                                                           00099\n*                                                                       00100\n*      FOLLOWING IS INFORMATION ABOUT SYSPRINT MESSAGES.  THIS CONSISTS 00101\n*      OF THE RETURN CODE, THE MESSAGE ITSELF (IN COLLATING SEQUENCE),  00102\n*      AND AN EXPLANATION.                                              00103\n*      0.   ACTION COMPLETED.  THE REQUESTED ACTION WAS SUCCESSFULLY    00104\n*              FINISHED.                                                00105\n*      16.  DIRECTORY FULL.  THERE IS NO MORE SPACE IN THE PARTITIONED  00106\n*              DATA SET DIRECTORY BLOCKS.                               00107\n*      12.  DUPLICATE NAME.  A MEMBER ALREADY EXISTS WITH THE NAME      00108\n*              GIVEN FOR NEWNAME=_.                                     00109\n*      8.   GETMAIN FAILED.  STOW DID NOT FIND ENOUGH SPACE AVAILABLE   00110\n*              FOR ITS GETMAIN.                                         00111\n*      20.  I/O ERROR.  AN I/O ERROR WAS ENCOUNTERED WHEN ATTEMPTING TO 00112\n*              PROCESS THE PARTITIONED DATA SET DIRECTORY.              00113\n*      4.   INVALID FORMAT.  THE CONTROL CARD WAS IMPROPERLY WRITTEN.   00114\n*      12.  MEMBER NOT FOUND.  THE MEMBER NAME GIVEN FOR MEMBER=_ DOES  00115\n*              NOT EXIST.                                               00116\n*      8.   SYSUT1 NOT OPEN.  STOW DETECTED THAT THE SYSUT1 DCB WAS NOT 00117\n*              CORRECTLY OPENED.                                        00118\n*                                                                       00119\n*   ERRORS:                                                             00120\n*      USER ABEND 1 - 'SYSIN' DIDN'T OPEN                               00121\n*      USER ABEND 2 - 'SYSPRINT' DIDN'T OPEN                            00122\n*      USER ABEND 3 - 'SYSUT1' DIDN'T OPEN                              00123\n*                                                                       00124\n*   TERMINATION:                                                        00125\n*      ERROR RETURNS:                                                   00126\n*      RETURN CODE:                                                     00127\n*         THE RETURN CODE INDICATES THE MOST SERIOUS ERROR CONDITION    00128\n*         ENCOUNTERED AS FOLLOWS:                                       00129\n*          0  ALL REQUESTS PERFORMED SUCCESSFULLY.                      00130\n*          4  INVALID CONTROL STATEMENT.                                00131\n*          8  ENVIRONMENT PRECLUDES OPERATION.                          00132\n*         12  LOGICAL INCONSISTENCY IN REQUESTED ACTION.                00133\n*         16  DATA SET STATUS PREVENTS OPERATION.                       00134\n*         20  I/O ERROR ON DATA SET.                                    00135\n*         FOR SPECIFICS SEE MESSAGES.                                   00136\n*         THE CODE IS REPORTED ON SYSPRINT AT THE END OF THE PROGRAM.   00137\n*                                                                       00138\n*   GLOSSARY:                                                           00139\n*      BLDLC     C BYTE OF TTRC IN BLDL LIST FOR PDS DIRECTORY ENTRY.   00140\n*      BLDLCON   BYTE FOR CONCATENATION NUMBER IN BLDL LIST.            00141\n*      EDIT      NUMBER EDITING WORK AREA.                              00142\n*      ENDMSG    PROGRAM TERMINATION MESSAGE.                           00143\n*      LINPRINT  PRINT LINE AREA FOR SYSPRINT.                          00144\n*      LIST      SHARED AREA FOR BLDL AND STOW LIST.                    00145\n*      MEMBER    OLD MEMBER NAME AREA.                                  00146\n*      MSGNTR    # BYTES IN LONGEST ERROR MESSAGE.                      00147\n*      MSGTBL    TABLE OF ERROR MESSAGES & RETURN CODES.                00148\n*      MVC1      PATTERN MVC INSTR.                                     00149\n*      NAME      MEMBER NAME IN BLDL & STOW LIST.                       00150\n*      NEWNAME   NEW MEMBER NAME AREA.                                  00151\n*      PACKED    DOUBLE WORK AREA FOR PACKED DECIMAL.                   00152\n*      PAT1      EDIT PATTERN FOR RETURN CODE.                          00153\n*      PAT2      EDIT PATTERN FOR RUN TIME.                             00154\n*      RTRNCODE  FULLWORD RETURN CODE.                                  00155\n*      STOWC     C BYTE OF TTRC IN STOW LIST FOR PDS DIRECTORY ENTRY.   00156\n*      SW1       BIT SWITCHES FOR CONTROL OPERANDS:                     00157\n*                1. MEMBER= FOUND.                                      00158\n*                2. NEWNAME= FOUND.                                     00159\n*      TIME      2 FULLWORD WORK AREA FOR RUN TIME.                     00160\n*      XLSPRINT  SYSPRINT DCB EXIT LIST.                                00161\n*                                                                       00162\n*   TECHNIQUE:                                                          00163\n*      1.  THE SAME AREA IS USED FOR THE BLDL LIST AND THE STOW LIST.   00164\n*      THE LATTER PART OF THE BLDL LIST IS MOVED FORWARD TO FORM THE    00165\n*      STOW LIST.                                                       00166\n*                                                                       00167\n*   HISTORY:                                                            00168\n*      IEBFGR                                                           00169\n*      -- --- --:  ORIGINATED BY FRANK G. ROSS,                         00170\n*         GODDARD SPACE FLIGHT CENTER (GSFC),                           00171\n*         GREENBELT, MARYLAND, 20771.                                   00172\n*      14 JUN 71:  MODIFIED BY CARL WRANDLE BARTH,                      00173\n*         SPACE AND EARTH SCIENCES COMPUTING CENTER (SESCC),            00174\n*         GSFC.                                                         00175\n*      PUT1B033                                                         00176\n*      13 OCT 73:  REWRITTEN TO CORRECT, UPDATE, AND MODIFY BY          00177\n*         DANIEL A. KIRK, SESCC.                                        00178\n*         1.  RENAMED CSECT TO ALIAS FROM IEBFGR.                       00179\n*         2.  ADDED SYSPRINT EXLST FOR DEFAULT BLKSIZE=1210.            00180\n*         3.  REPLACE CNSRV & GOBCK MACROS FOR RENT LINKAGE TO SIMPLE   00181\n*         SAVE AND RETURN LINKAGE.                                      00182\n*         4.  ADDED RETURN CODES AND CHANGED MESSAGE HANDLING.          00183\n*         5.  ADDED RETURN CODE TO SYSPRINT END MESSAGE AND SHORTENED   00184\n*         MESSAGES.                                                     00185\n*         6.  CHANGED SYSPRINT HEADER LINE INCLUDING DYNAMIC PGM ID     00186\n*         AND RUN TIME.                                                 00187\n*         7.  REMOVED UNIMPLEMENTED ADD AND REPL COMMANDS AND RELATED   00188\n*         ERROR MESSAGE.                                                00189\n*         8.  CORRECTED CONTROL CARD SCAN.                              00190\n*         9.  EXTENDED ERROR HANDLING FOR RELEASE 21 STOW.              00191\n*         10.  REMOVED CHANGE COMMAND (ALIAS FOR RENAME).               00192\n*         11.  CHANGED NEWMEM KEYWORD TO NEWNAME.                       00193\n*       3 FEB 77:  MODIFIED BY DANIEL A. KIRK OF THE RENAMED            00194\n*         ADVANCED SOFTWARE SYSTEMS DEVELOPMENT SECTION,                00195\n*         SCIENCE AND APPLICATIONS COMPUTING CENTER,                    00196\n*         SCIENCES DIRECTORATE,                                         00197\n*         GSFC.                                                         00198\n*         1.  CHANGED SYSPRINT FROM PUT LOCATE MODE TO PUT MOVE MODE    00199\n*         SO THAT UNDER TSO THE PRINT LINE RELATING TO THE SYSIN CARD   00200\n*         ENTERED WILL COME AFTER THAT ENTRY RATHER THAN AFTER THE      00201\n*         THE NEXT ENTRY.                                               00202\n*      02 MAR 77: FRANK PAJERSKI,CODE 531                               00203\n*         1. UPDATE MACROS, BLKSIZE, ETC. FOR THE M&DO 360'S.           00204\n*         2. CHECK FOR 'GOOD' OPEN.                                     00205\n*                                                                       00206\n*      02 JAN 90 - 22 JAN 91: CLARK MORRIS, PHILIPS LIGHTING.           00207\n*         1. CHANGE NAME TO PUT1B033, ALLOW DELETE BY PARM ( 1 MEMBER)  00208\n*         2. CHANGE RETURN CODE FOR NOT FOUND CONDITION FROM 12 TO 4    00209\n*         3. ADD SPFEDIT AND SYSIEWLP ENQUEUES BEFORE LIBRARY OPEN.     00210\n*                                                                       00211\n*********************************************************************** 00212\n*                                                                       00213\nPUT1B033 CSECT                                                          00214\n*                                                                       00215\n*********************************************************************** 00216\n*                                                                       00217\n*   IDENTIFICATION & LINKAGE:                                           00218\n*                                                                       00219\n         SAVE  (14,12),,PUT1B033                                        00220\n         LR    R12,R15                                                  00221\n         USING PUT1B033,R12                                             00222\n         LR    R15,R13                                                  00223\n         LA    R13,SAVEAREA                                             00224\n         ST    R15,SAVEAREA+4                                           00225\n         ST    R13,8(,R15)                                              00226\n*                                                                       00227\n*********************************************************************** 00228\n*                                                                       00229\n         COPY WEJREGEQ                                                  00230\n*                                                                       00231\n*********************************************************************** 00232\n*   BEGIN.                                                              00233\n*                                                                       00234\n         L     R2,0(,R1)         GET ADDRESS OF PARM AREA               00235\n         OPEN  (SYSPRINT,(OUTPUT))   OPEN PRINT FILE                    00236\n         TM    SYSPRINT+48,X'10' IF BAD OPEN GO TO ABEND                00237\n         BNO   BADOPEN2                                                 00238\n         LH    R3,0(,R2)         GET LENGTH OF PARM                     00239\n         LTR   R3,R3             IF ZERO, INPUT IS FROM CARDS           00240\n         BZ    OPEN1                                                    00241\n         CH    R3,=H'8'          IF PARM SIZE GREATER THAN 8, BAD NAME  00242\n         BH    BADPARM             SO WRITE MESSAGE AND ABEND           00243\n         BCTR  R3,R0             ELSE ADJUST IT FOR AN MVC AND MOVE     00244\n         EX    R3,MVPARM           THE NAME TO THE NAME PARM AREA       00245\n         B     OPEN2               AND BYPASS OPEN OF SYSIN             00246\nMVPARM   MVC   MEMBER(0),2(R2)                                          00247\nOPEN1    DS    0H                                                       00248\n         OPEN (SYSIN,(INPUT))                                           00249\n         TM    SYSIN+48,X'10'    IF BAD OPEN OF SYSIN GO TO ABEND       00250\n         BNO   BADOPEN1                                                 00251\nOPEN2    DS    0H                                                       00252\n         CALL  PUT1S001,(SYSUT1,DSNAREA,WORKADDR),VL                    00253\n         LTR   R2,R15                                                   00254\n         BNZ   BADENQ                                                   00255\n         OPEN  (SYSUT1,(OUTPUT))                                        00256\n         TM    SYSUT1+48,X'10'                                          00257\n         BNO   BADOPEN3                                                 00258\n*   PRINT HEADER.                                                       00259\n         MVC   TTLPGMNM,5(R12)  PUT PGM-ID IN PRINT HEADER LINE         00260\n         TIME  DEC * GET CURRENT TIME.                                  00261\n         SRL   R1,4 * REMOVE PLUS SIGN.                                 00262\n         ST    R1,TIME * SAVE YEAR & DAY.                               00263\n         ST    R0,TIME+4 * SAVE HOURS, MINUTES, SECONDS, ETC.           00264\n         MVC   TTLDTTME,PAT2 * PUT EDIT PATTERN IN                      00265\n*                                       * PRINT LINE.                   00266\n         ED    TTLDTTME,TIME+1 * PUT YEAR DAY, HOUR,                    00267\n*                 * MINUTE & SECOND IN PRINT LINE.                      00268\n         MVC   TTLDSNAM,DSNAME                                          00269\n         CLC     MEMBER,=CL8' '    IS MEMBER NAME BLANK                 00270\n         BE      READ                                                   00271\n         MVC     PRTCOMM,=C'PARM DELETE OF MEMBER='                     00272\n         MVC     PRTMEMB,MEMBER                                         00273\n         ZAP     LINEADV,=P'2'                                          00274\n         MVI     PRTCTLCH,C'0'                                          00275\n         BAL     R14,PUTPRINT                                           00276\n         BAL     R14,DELMEMBR      PERFORM DELETE MEMBER ROUTINE        00277\n         B       CLOSEPRT                                               00278\n*********************************************************************** 00279\n*   READ CONTROL CARDS.                                                 00280\n*                                                                       00281\nREAD     DC       0H'0'                                                 00282\n         GET      SYSIN,CARD * GET NEXT CONTROL CARD.                   00283\n         MVI      SW1,B'00000000' * RESET ALL SWITCHES.                 00284\n*   PRINT CONTROL CARD.                                                 00285\n         MVI      PRTCTLCH,C'0'   SET TO DOUBLE SPACE                   00286\n         ZAP      LINEADV,=P'2'                                         00287\n         MVC      PRTCARD,CARD * COPY CONTROL CARD TO                   00288\n*                                     * PRINT LINE.                     00289\n         BAL      R14,PUTPRINT * PRINT LINE.                            00290\n         CLI      CARD,C'*' * IS THIS A COMMENT CARD                    00291\n         BE       READ      * YES, GET NEXT CARD                        00292\n         LA       R3,CARD   * LOAD @ BYTE AT BEGINNING OF CARD          00293\n         LA       R6,71     * LOAD @ CMD LAST BYTE.                     00294\n*********************************************************************** 00295\n*   DETERMINE FUNCTION REQUESTED.                                       00296\n*                                                                       00297\nFINDFUNC DC       0H'0'                                                 00298\n         EX       R6,TRTNOTSP       SCAN FOR NOT SPACE                  00299\n         BNZ      CHKOPER  * GO TO CHECK OPERATOR                       00300\n         LA       R15,36   * SET CODE FOR ENTIRE CARD BLANK             00301\n         B        CARDERR                                               00302\nCHKOPER  DS       0H                                                    00303\n         CLC      =C'DELETE ',0(R1) * TEST DELETE & CONTROL STRING.     00304\n         BE       DELETE * DELETE FUNCTION REQUESTED.                   00305\n         CLC      =C'RENAME ',0(R1) * TEST RENAME & CONTROL STRING.     00306\n         BE       CHANGE * RENAME FUNCTION REQUESTED.                   00307\n         CLC      =C'ALIAS ',0(R1) * TEST ALIAS & CONTROL STRING.       00308\n         BE       ALIAS1 * ALIAS FUNCTION REQUESTED.                    00309\n*********************************************************************** 00310\n*   SIGNAL INVALID CONTROL CARD.                                        00311\n*                                                                       00312\nCARDBAD  DC       0H'0' * INVALID CONTROL CARD.                         00313\n         LA       R15,40 * LOAD PERFORMANCE FOR BAD CONTROL CODE        00314\n         B        CARDERR                                               00315\nCARDERR  DS       0H                                                    00316\n         BAL      R14,QUALITY * RECORD PERFORMANCE.                     00317\n         B        READ                                                  00318\n*********************************************************************** 00319\n*   ADD AN ALIAS.                                                       00320\n*                                                                       00321\nALIAS1   DC       0H'0' * DO ALIAS FUNCTION.                            00322\n         LA       R6,CARD+70                                            00323\n         LA       R3,5(,R1) * INCR CARD CURRENT BYTE PTR.               00324\n         SR       R6,R3       GET REMAINDER SIZE                        00325\n         BAL      R14,OPDSCN * SCAN CONTROL CARD FOR OPERANDS.          00326\n         TM       SW1,B'11000000' * TEST MEMBERE& OLDRMEMBERTNAME BITS. 00327\n         BO       MOVENAME *  ALL REQUIRED OPERANDS NOT FURNISHED.      00328\n         LA       R15,28  * SET PERFORMANCE CODE FOR MISSING OPERAND    00329\n         B        CARDERR                                               00330\nMOVENAME DS       0H                                                    00331\n         MVC      NAME,MEMBER * PUT MEMBER NAME IN BLDL LIST.           00332\n         BLDL     SYSUT1,LIST * SEARCH FOR MEMBER NAME.                 00333\n         LTR      R15,R15 * TEST BLDL RETURN CODE.                      00334\n         BZ       ALIAS2 * BLDL SUCCESSFUL.                             00335\n         LA       R15,8 * LOAD PERFORMANCE CODE.                        00336\n         BAL      R14,QUALITY * RECORD PERFORMANCE.                     00337\n         B        READ                                                  00338\nALIAS2   DC       0H'0'                                                 00339\n         MVC      NAME,NEWNAME * PUT ALIAS NAME IN STOW LIST.           00340\n         MVC      STOWC(63),BLDLC * CVT BLDL LIST TO STOW LIST.         00341\n         OI       STOWC,B'10000000' * SET ALIAS BIT.                    00342\n         STOW     SYSUT1,NAME,A * STOW ALIAS NAME.                      00343\n         BAL      R14,QUALITY * RECORD PERFORMANCE.                     00344\n         B        READ                                                  00345\n*********************************************************************** 00346\n*   RENAME A MEMBER.                                                    00347\n*                                                                       00348\nCHANGE   DC       0H'0' * DO CHANGE FUNCTION.                           00349\n         LA       R3,6(,R1) * INCR CARD CURRENT BYTE PTR.               00350\n         BAL      R14,OPDSCN * SCAN CONTROL CARD FOR OPERANDS.          00351\n         TM       SW1,B'11000000' * TEST MEMBERE& OLDRMEMBERTNAME BITS. 00352\n         BO       CHNGNAME * ALL OPERANDS PRESENT                       00353\n         LA       R15,28  * SET PERFORMANCE CODE FOR MISSING OPERAND    00354\n         B        CARDERR                                               00355\nCHNGNAME DS       0H                                                    00356\n         STOW     SYSUT1,MEMBER,C * ISSUE CHANGE STOW.                  00357\n         MVC      PRTMEMB,MEMBER                                        00358\n         MVC      PRTNEWN,NEWNAME                                       00359\n         BAL      R14,QUALITY * RECORD PERFORMANCE.                     00360\n         B        READ                                                  00361\n*********************************************************************** 00362\n*   DELETE A MEMBER.                                                    00363\n*                                                                       00364\nDELETE   DC       0H'0' * DO DELETE FUNCTION.                           00365\n         LA       R3,6(,R1) * INCR CARD CURRENT BYTE PTR.               00366\n         BAL      R14,OPDSCN * SCAN CONTROL CARD FOR OPERANDS.          00367\n         TM       SW1,B'10000000' * TEST MEMBER NAME BIT.               00368\n         BO       PERFDEL * ALL REQUIRED OPERANDS  FURNISHED.           00369\n         LA       R15,28  * SET PERFORMANCE CODE FOR MISSING OPERAND    00370\n         B        CARDERR                                               00371\nPERFDEL  DS       0H                                                    00372\n         BAL      R14,DELMEMBR     PERFORM ACTUAL DELETE ROUTINE        00373\n         B        READ                                                  00374\n*********************************************************************** 00375\n*   DO THE ACTUAL DELETE                                                00376\nDELMEMBR DS       0H                                                    00377\n         ST       R14,DELMEMEX                                          00378\n         STOW     SYSUT1,MEMBER,D * ISSUE DELETE STOW.                  00379\n         MVC      PRTMEMB,MEMBER                                        00380\n         BAL      R14,QUALITY * RECORD PERFORMANCE.                     00381\n         L        R14,DELMEMEX                                          00382\n         BR       R14   EXIT FROM ACTUAL DELETE ROUTINE                 00383\nDELMEMEX DC       F'0',C'DELMEMEX'                                      00384\n*********************************************************************** 00385\n*   END OF PROCESSING.                                                  00386\n*                                                                       00387\nEND      DC       0H'0'                                                 00388\n         CLOSE    SYSIN                                                 00389\nCLOSEPRT DS       0H                                                    00390\n*   PRINT RETURN CODE.                                                  00391\n         MVC      LINPRINT+1(L'ENDMSG),ENDMSG * PUT END MSG IN         *00392\n                                              * PRINT LINE.             00393\n         L        R15,RTRNCODE * LOAD RETURN CODE.                      00394\n         CVD      R15,PACKED * CALC PACK DEC RETURN CODE.               00395\n         MVC      EDIT,PAT1 * PUT PATTERN IN EDIT FIELD.                00396\n         ED       EDIT,PACKED+6 * EDIT RETURN CODE.                     00397\n         CLI      EDIT+2,C' ' * TEST RETCOD 10S DIGIT & BLANK.          00398\n         BNE      RETCOD10 * RETCOD >= 10.                              00399\n         MVC      LINPRINT+L'ENDMSG+1(1),EDIT+3 * PUT RETCOD IN        *00400\n                                                * PRINT LINE.           00401\n         B        RETPRT                                                00402\nRETCOD10 DC       0H'0'                                                 00403\n         MVC      LINPRINT+L'ENDMSG+1(2),EDIT+2 * PUT RETCOD IN        *00404\n                                                * PRINT LINE.           00405\nRETPRT   DC       0H'0' * CLOSE ALL DATA SETS.                          00406\n         BAL      R14,PUTPRINT * PRINT LINE.                            00407\n         CLOSE    (SYSPRINT,,SYSUT1) * CLOSE  PRINT & PDS DATA SETS.    00408\n         CALL  PUT1S001,(SYSUT1,DSNAREA,WORKADDR),VL                    00409\n         L        R15,RTRNCODE * LOAD RETURN CODE.                      00410\n         L     R13,SAVEAREA+4      A(HSA)                               00411\n         RETURN   (14,12),T,RC=(15) * LOAD REG, KEEP RETCOD, & RETURN.  00412\n*********************************************************************** 00413\n*   BAL ROUTINES.                                                       00414\n*********************************************************************** 00415\n*   SCAN CONTROL CARD OPERAND FIELD.                                    00416\n*                                                                       00417\nOPDSCN   DC       0H'0'                                                 00418\n         ST       R14,OPDSCNEX                                          00419\n         EX       R6,TRTNOTSP                                           00420\n         BNZ      OPDSCN2                                               00421\n         LA       R15,28  * SET PERFORMANCE CODE FOR MISSING OPERAND    00422\n         B        CARDERR                                               00423\nOPDSCN2  DC       0H'0'                                                 00424\n         CLC      =C'MEMBER=',0(R1) * TEST MEMBER & OPERAND STRING.     00425\n         BE       MEMBEROP * MEMBER KEYWORD FOUND.                      00426\n         CLC      =C'NEWNAME=',0(R1) * TEST NEWNAME & OPERAND STRING.   00427\n         BE       NEWNAMOP * NEWNAME KEYWORD FOUND.                     00428\n         LA       R15,28  * SET PERFORMANCE CODE FOR MISSING OPERAND    00429\n         B        CARDERR                                               00430\nMEMBEROP DC       0H'0'                                                 00431\n         OI       SW1,B'10000000' * SET MEMBER FOUND BIT.               00432\n         LA       R3,7(,R1) * INCR CARD CURRENT BYTE PTR FOR KEYWORD.   00433\n         LA       R4,MEMBER * LOAD @ MEMBER NAME AREA.                  00434\n         B        MEMBNAME                                              00435\nNEWNAMOP DC       0H'0'                                                 00436\n         OI       SW1,B'01000000' * SET NEWNAME FOUND BIT.              00437\n         LA       R3,8(,R1) * INCR CARD CURRENT BYTE PTR FOR KEYWORD.   00438\n         LA       R4,NEWNAME * LOAD @ NEW MEMBER NAME AREA.             00439\nMEMBNAME DC       0H'0'                                                 00440\n         MVC   0(8,R4),=CL8' '    BLANK NAME AREA                       00441\nMEMBCHAR DC       0H'0'                                                 00442\n         LA       R6,CARD+71            POINT TO END OF CARD            00443\n         SR       R6,R3 * TEST @ CARD CURRENT BYTE & @ CMD LAST BYTE.   00444\n         CH       R6,=H'1'      IS THERE ROOM FOR A 1 BYTE NAME         00445\n         BNH      BADNAME1                                              00446\n         EX       R6,TRTDELIM                                           00447\n         BZ       BADNAME2                                              00448\n         LR       R7,R1         SAVE POINTER TO DELIMITER               00449\n         SR       R1,R3                                                 00450\n         BNP      BADNAME1      IF FIRST CHAR A DELIMITER, BAD CARD     00451\n         CH       R1,=H'8'      IS NAME GREATER THAN 8 CHARACTERS       00452\n         BH       BADNAME2                                              00453\n         BCTR     R1,R0    * CALC MVC INSTR # BYTES.                    00454\n         EX       R1,MVC1 * PUT NAME IN PROPER NAME AREA.               00455\n         CLI      0(R7),C' ' IS THIS THE END OF THE OPERAND             00456\n         BE       OPDSCNLD    YES, EXIT                                 00457\n         LA       R1,1(,R7)  NO, POINT R1 TO NEXT OPERAND               00458\n         B        OPDSCN2                                               00459\nOPDSCNLD DS       0H                                                    00460\n         L        R14,OPDSCNEX                                          00461\n         BR       R14                                                   00462\nOPDSCNEX DC       F'0',C'OPDSCNEX'                                      00463\nBADNAME1 DS       0H                                                    00464\n         LA       R15,44    SET PERFORMANCE CODE TO NAME MISSING        00465\n         B        CARDERR                                               00466\nBADNAME2 DS       0H                                                    00467\n         LA       R15,32    SET PERFORMANCE CODE TO NAME NOT 1-8 CHAR   00468\n         B        CARDERR                                               00469\n*********************************************************************** 00470\n*   PRINT A LINE.                                                       00471\n*                                                                       00472\nPUTPRINT DC       0H'0' * WRITE PRINT LINE & INIT LINE AREA.            00473\n         ST       R14,PUTPRTEX                                          00474\n         SP       LINELEFT,LINEADV   SUBTRACT LINE ADVANCE COUNT        00475\n         BP       PUTDETL         GO TO PUT DETAIL                      00476\n         AP       PGCNT,=P'1'                                           00477\n         UNPK     TTLPGCNT,PGCNT                                        00478\n         OI       TTLPGCNT+L'TTLPGCNT-1,C'0' FORCE F ZONE ON LSC        00479\n         LA       R0,TTLLINE                                            00480\n         BAL      R14,PUTLINE                                           00481\n         MVI      PRTCTLCH,C'0'                                         00482\n         ZAP      LINELEFT,=P'58'                                       00483\nPUTDETL  DS       0H                                                    00484\n         LA       R0,LINPRINT                                           00485\n         BAL      R14,PUTLINE                                           00486\n         ZAP      LINEADV,=P'1'                                         00487\n         MVI      PRTCTLCH,C' ' * BLANK 1ST  CHAR.                      00488\n         MVC      LINPRINT+1(L'LINPRINT-1),LINPRINT  BLNK RST OF LINE.  00489\n         L        R14,PUTPRTEX                                          00490\n         BR       R14                                                   00491\nPUTPRTEX DC       F'0',C'PUTPRTEX'                                      00492\nPUTLINE  DC       0H'0' * WRITE PRINT LINE                              00493\n         ST       R14,PUTLINEX                                          00494\n         PUT      SYSPRINT,(R0)     * WRITE PRINT LINE.                 00495\n         L        R14,PUTLINEX                                          00496\n         BR       R14                                                   00497\nPUTLINEX DC       F'0',C'PUTLINEX'                                      00498\n*********************************************************************** 00499\n*   PRINT MESSAGES AND RECORD HIGHEST RETURN CODE.                      00500\n*                                                                       00501\nQUALITY  DC       0H'0'                                                 00502\n         ST       R14,QUALITEX                                          00503\n         SRL      R15,2 * DIVIDE CODE BY 4 TO GET ENTRY # (ORIGIN 0).   00504\n         MH       R15,=AL2(MSGNTR+1) * CALC MSG TABLE ENTRY OFFSET.     00505\n         LA       R11,MSGTBL * LOAD @ MSG TABLE.                        00506\n         AR       R11,R15 * CALC @ MSG TABLE ENTRY.                     00507\n*   PRINT ERROR MESSAGE.                                                00508\n         MVC      PRTCOMM(MSGNTR),1(R11) * PUT MSG IN PRINT LINE.       00509\n         BAL      R14,PUTPRINT * PRINT LINE.                            00510\n         SR       R0,R0 * LOAD 0.                                       00511\n         IC       R0,0(R11) * LOAD CURRENT RETURN CODE.                 00512\n         C        R0,RTRNCODE * TEST CURRENT AND MAX RETURN CODES.      00513\n         BNH      QUALITLD * CURRENT \u00ac> MAX RETURN CODE.                00514\n         ST       R0,RTRNCODE * SET NEW MAX RETURN CODE.                00515\nQUALITLD DS       0H                                                    00516\n         L        R14,QUALITEX                                          00517\n         BR       R14                                                   00518\nQUALITEX DC       F'0',C'QUALITEX'                                      00519\n*********************************************************************** 00520\n*   EXIT ROUTINES.                                                      00521\n*********************************************************************** 00522\n*********************************************************************** 00523\n*   DCB STORAGE.                                                        00524\n*********************************************************************** 00525\nSYSIN    DCB      DDNAME=SYSIN,DSORG=PS,MACRF=GM,                      *00526\n               RECFM=FB,LRECL=80,                                      *00527\n               EODAD=END * CONTROL DATA SET.                            00528\n*********************************************************************** 00529\nSYSPRINT DCB      DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,                   *00530\n               RECFM=FBA,LRECL=121                                      00531\n*********************************************************************** 00532\nSYSUT1   DCB      DDNAME=SYSUT1,DSORG=PO,MACRF=W * PDS DATA SET.        00533\n*********************************************************************** 00534\n*   LITERAL STORAGE.                                                    00535\n*********************************************************************** 00536\n         LTORG                                                          00537\n*********************************************************************** 00538\n*   STRUCTURED STORAGE.                                                 00539\n*********************************************************************** 00540\n*   LIST FOR BLDL AND STOW MACROS.                                      00541\n*                                                                       00542\nLIST     DC       H'1' * # LIST ENTRIES.                                00543\n         DC       H'76' * # ENTRY BYTES.                                00544\nNAME     DC       CL8' ' * MEMBER NAME.                                 00545\n         DC       X'000000' * TTR.                                      00546\nBLDLCON  DC       X'00' * CONCATENATION #.                              00547\n         DC       X'00' * LIBRARY FOUND CODE.                           00548\nBLDLC    DC       X'00' * ALIAS, TTRN, AND # USER DATA BYTES.           00549\n         DC       CL62' ' * USER DATA.                                  00550\n         ORG      BLDLCON * REDEFINE LIST FOR STOW.                     00551\nSTOWC    DS       X'00' * ALIAS, TTRN, AND # USER DATA BYTES.           00552\n         DS       CL62' ' * USER DATA.                                  00553\n         ORG                                                            00554\n*********************************************************************** 00555\n*   OLD AND NEW MEMBER NAMES FOR STOW RENAME AND GENERAL USE.           00556\n*                                                                       00557\nMEMBER   DC       CL8' ' * OLD MEMBER NAME AREA.                        00558\nNEWNAME  DC       D'0'   * NEW MEMBER NAME AREA.                        00559\n*********************************************************************** 00560\n*   MESSAGE TABLE WITH RETURN CODE AND MESSAGE TEXT.                    00561\n*                                                                       00562\nMSGNTR   EQU      16 * MAX # BYTES IN A MESSAGE.                        00563\nMSGTBL   DC       0X'00' * ENTIRE MESSAGE TABLE.                        00564\nM000     DC       AL1(00),CL(MSGNTR)'ACTION COMPLETED'                  00565\nM004     DC       AL1(12),CL(MSGNTR)'DUPLICATE NAME'                    00566\nM008     DC       AL1(04),CL(MSGNTR)'MEMBER NOT FOUND'                  00567\nM012     DC       AL1(16),CL(MSGNTR)'DIRECTORY FULL'                    00568\nM016     DC       AL1(20),CL(MSGNTR)'I/O ERROR'                         00569\nM020     DC       AL1(16),CL(MSGNTR)'SYSUT1 NOT OPEN'                   00570\nM024     DC       AL1(16),CL(MSGNTR)'GETMAIN FAILED'                    00571\nM028     DC       AL1(12),CL(MSGNTR)'MISSING OPERAND'                   00572\nM032     DC       AL1(12),CL(MSGNTR)'NAME NOT 1-8 CH'                   00573\nM036     DC       AL1(04),CL(MSGNTR)'CARD BLANK    '                    00574\nM040     DC       AL1(12),CL(MSGNTR)'BAD OPERATION '                    00575\nM044     DC       AL1(12),CL(MSGNTR)'NAME MISSING  '                    00576\n*********************************************************************** 00577\n*   ELEMENT STORAGE.                                                    00578\n*********************************************************************** 00579\nCARD     DC       CL80' ' * CONTROL CARD AREA.                          00580\nTTLLINE  DS       0CL121                                                00581\nTTLCHR   DC       C'1'                                          000-000 00582\nTTLPGMNM DC       CL8' '                                        001-008 00583\n         DC       CL08' RUN AT '                                009-016 00584\nTTLDTTME DC       CL16' '                                       017-032 00585\n         DC       CL15' FOR LIBRARY - '                         033-047 00586\nTTLDSNAM DC       CL44' '                                       048-091 00587\n         DC       CL21' '                                       092-112 00588\n         DC       CL5'PAGE '                                    113-117 00589\nTTLPGCNT DC       CL3'000'                                      118-120 00590\nLINELEFT DC       P'000'                                                00591\nLINEADV  DC       P'1'                                                  00592\nPGCNT    DC       P'0'                                                  00593\nDSNAREA  DS       0CL52      DATA SET NAME AND MEMBER FROM ENQ SUB      00594\nDSNAME   DC       CL44' '      PUT1S001                                 00595\nDSMEMBER DC       CL8' '                                                00596\nEDIT     DC       CL4' ' * EDIT AREA.                                   00597\nENDMSG   DC       C'PUT1B033.  END.  RETURN CODE=' * END PGM MSG.       00598\nLINPRINT DS       0CL121  * SYSPRINT PRINT LINE.                        00599\nPRTCTLCH DC       C' '                                                  00600\nPRTCARD  DS       0CL80                                                 00601\nPRTCOMM  DC       CL22'                      '                          00602\nPRTMEMB  DC       CL8' '                                                00603\n         DC       C' '                                                  00604\nPRTNEWN  DC       CL8' '                                                00605\n         DC       CL41' '                                               00606\n         DC       CL40' '                                               00607\nMVC1     MVC      0(0,R4),0(R3) * KEYWORD OPERAND SAVING INSTR.         00608\nTRTNOTSP TRT      0(0,R3),NOTSPTBL * CHECK FOR NOT SPACE                00609\nTRTDELIM TRT      0(0,R3),DELIMTBL * CHECK FOR SPACE OR COMMA           00610\nNOTSPTBL DC       256X'01'                                              00611\n         ORG      NOTSPTBL+X'40'                                        00612\n         DC       X'00'                                                 00613\n         ORG                                                            00614\nDELIMTBL DC       XL256'00'                                             00615\n         ORG      DELIMTBL+X'40'                                        00616\n         DC       X'01'                                                 00617\n         ORG      DELIMTBL+C','                                         00618\n         DC       X'01'                                                 00619\n         ORG                                                            00620\nPACKED   DC       D'0' * PACKED DECIMAL WORK AREA.                      00621\nPAT1     DC       X'40202120' * RETURN CODE PATTERN.                    00622\nPAT2     DC       X'402021204B2020204B202020204B2020' * TIME PATTERN.   00623\nRTRNCODE DC       F'0' * PGM RETURN CODE.                               00624\nWORKADDR DC       F'0' * USED BY PUT1S001, DON'T CHANGE                 00625\nSW1      DC       B'00000000' * CONTROL OPERAND BIT SWITCHES.           00626\nTIME     DC       2F'0' * CURRENT TIME (000YYDDDHHMMSS--).              00627\nSAVEAREA DC    18F'0'                                                   00628\n         SPACE 2                                                        00629\nBADOPEN1 DS    0H                                                       00630\n         WTO   'PUT1B033-001 UNABLE TO OPEN SYSIN'                      00631\n         ABEND 1                                                        00632\nBADOPEN2 DS    0H                                                       00633\n         WTO   'PUT1B033-002 UNABLE TO OPEN SYSPRINT'                   00634\n         ABEND 2                                                        00635\nBADOPEN3 DS    0H                                                       00636\n         WTO   'PUT1B033-003 UNABLE TO OPEN SYSUT1'                     00637\n         ABEND 3                                                        00638\nBADPARM  DS    0H                                                       00639\n         WTO   'PUT1B033-004 PARM (MEMBER-NAME TO BE DELETED) GREATER T+00640\n               HAN 8 BYTES'                                             00641\n         ABEND 4                                                        00642\nBADENQ   DS    0H                                                       00643\n         WTO   'PUT1B033-004 UNABLE TO ENQ FILE RELATED TO SYSUT1 OR DC+00644\n               B INFORMATION IN JCL'                                    00645\n         ABEND (R2)                                                     00646\n         LUT1A001 STAMP='035PUT1B033  02/04/91 13.59.27  '              00647\n         END                                                            00648\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SRCADD": {"ttr": 6666, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x90\\x17/\\x00\\x90\\x17/\\x17\\x06\\x00\\r\\x00\\x0e\\x00\\x07\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-06-21T00:00:00", "modifydate": "1990-06-21T17:06:00", "lines": 13, "newlines": 14, "modlines": 7, "user": "FCHLAY"}, "text": "++ USERMOD (NAPJ001) .\n++ VER (Z038) FMID(HJE2221).\n++JCLIN.\n//STEP1    EXEC PGM=IEV90\n//SYSPUNCH DD  DSN=&&PUNCH(XXX),DISP=SHR\n//SYSIN  DD  SYS1.JES2SRC(XXX),DISP=SHR\n//STEP2    EXEC PGM=IEWL,PARM='RENT'\n//SYSPUNCH DD  DSN=&&PUNCH(XXX),DISP=SHR\n//SYSLMOD  DD  DSN=SYS1.JES2LIB,DISP=SHR\n//SYSLIN  DD  *\n  INCLUDE SYSPUNCH(XXX)\n  NAME XXX(R)\n++SRC (XXX) DISTLIB(JES2SRC).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SRCADDUS": {"ttr": 6668, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x90\\x17?\\x00\\x90\\x17?\\x133\\x00\\r\\x00\\r\\x00\\x01\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1990-06-22T00:00:00", "modifydate": "1990-06-22T13:33:00", "lines": 13, "newlines": 13, "modlines": 1, "user": "FCHLAY"}, "text": "++ USERMOD (NAPJ001) .\n++ VER (Z038) FMID(HBB2102).\n++JCLIN.\n//STEP1    EXEC PGM=IEV90\n//SYSPUNCH DD  DSN=&&PUNCH(XXX),DISP=SHR\n//SYSIN  DD  SYS1.USERSRC(XXX),DISP=SHR\n//STEP2    EXEC PGM=IEWL\n//SYSPUNCH DD  DSN=&&PUNCH(XXX),DISP=SHR\n//SYSLMOD  DD  DSN=SYS1.LPALIB,DISP=SHR\n//SYSLIN  DD  *\n  INCLUDE SYSPUNCH(XXX)\n  NAME XXX(R)\n++SRC (XXX) DISTLIB(USERSRC).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SRCADDXA": {"ttr": 6670, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\\x17\\x8f\\x00\\x90\\x17\\x8f\\x17\\x18\\x00\\x07\\x00\\x07\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-06-27T00:00:00", "modifydate": "1990-06-27T17:18:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "FCHLAY"}, "text": "++ USERMOD (NAPM003) .\n++ VER (Z038) FMID(HBB2102).\n++JCLIN.\n//STEP1    EXEC PGM=IEV90\n//SYSPUNCH DD  DSN=&&PUNCH(XXX),DISP=SHR\n//SYSIN  DD  SYS1.USERSRC(XXX),DISP=SHR\n++SRC (XXX) DISTLIB(USERSRC).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SVCJARS": {"ttr": 6672, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x90\"/\\x00\\x90\"/\\x15\\x11\\x00\\x10\\x00\\x10\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1990-08-10T00:00:00", "modifydate": "1990-08-10T15:11:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "FCHLAY"}, "text": "//$$$$$$Z  JOB (FC50690,FCFC),'SVC251 JARS  ',MSGCLASS=X,\n//         NOTIFY=$$$$$$,CLASS=W\n//*\n//*\n//*\n//LNKSVC EXEC PGM=HEWL,PARM='MAP,XREF,RENT,REUS,AC=1'\n//SYSLMOD DD DISP=SHR,DSN=SYS1.LPALIB\n//DSTLIB  DD DISP=SHR,DSN=SYS2.PHLAN.TMON.CICS.R80.LOADLIB\n//SYSUT1  DD UNIT=SYSDA,SPACE=(TRK,(30,30))\n//SYSPRINT DD SYSOUT=*\n//SYSLIN  DD *\n INCLUDE DSTLIB($CRSVC)\n ENTRY $CRSVC\n NAME IGC0025A(R)       <== XXX IS DETERMINED BY THE USER.\n/*                          EXAMPLE SVC 238 = IGC0023H.\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UM99901": {"ttr": 6913, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x10/\\x00\\x91\\x10/\\x180\\x003\\x003\\x00\\x00\\xc6\\xc3\\xc8\\xd3\\xc1\\xe8@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-12T00:00:00", "modifydate": "1991-04-12T18:30:00", "lines": 51, "newlines": 51, "modlines": 0, "user": "FCHLAY"}, "text": "++USERMOD (UM99901)\n   /* *******************************************************\n      *                                                     *\n      *  UM99901 IS A SAMPLE USERMOD USED TO MAINTAIN THE   *\n      *  CA-ACF2 FIELD DEFINITION RECORD (FDR). THIS SAMPLE *\n      *  USERMOD ILLUSTRATES THE METHOD USED TO APPLY       *\n      *  CHANGES TO THE SKK DISTRIBUTED FDR USING SMP.      *\n      *                                                     *\n      *  IT IS RECOMMENDED THAT THE INSTALLATION ACCUMULATE *\n      *  ITS FDR UPDATES IN THIS MEMBER TO FACILITATE       *\n      *  REINSTALLATION AND CHANGE TRACKING. TXLIB OPERANDS *\n      *  ON THE ++SRC(UPD) AND ++MAC(UPD) STATEMENTS PROVIDE*\n      *  A CONVENIENT WAY FOR THE INSTALLATION TO MAINTAIN  *\n      *  ITS OWN SOURCE VERSIONS.                           *\n      *                                                     *\n      ******************************************************* */ .\n++VER (Z038) FMID(ACF5200) .\n++MACUPD (USERLID)  DISTLIB(ACFAMAC) .\n./ CHANGE NAME=USERLID\n***      COPY  USERLID INCLUDED VIA COPY IN LIDREC              UM99901\n./ ENDUP\n++MACUPD (USERCFDE) DISTLIB(ACFAMAC) .\n./ CHANGE NAME=USERCFDE\n***      COPY  USERCFDE INCLUDED VIA COPY IN ACFFDR             UM99901\n./ ENDUP\n++SRCUPD (ACFFDR)   DISTLIB(ACFAMAC) .\n./ CHANGE NAME=ACFFDR\n               RULE='SYS1.ACF.RULES', RULES                     UM99901X\n               LID='SYS1.ACF.LOGONIDS', LOGONID                 UM99901X\n               INFO='SYS1.ACF.INFOSTG', INFO-STG                UM99901X\n               BRULE='SYS1.ACF.BKRULES', RULES-B                UM99901X\n               BLID='SYS1.ACF.BKLIDS', LOGONID-B                UM99901X\n               BINFO='SYS1.ACF.BKINFO' INFO-STG-B               UM99901\n               RULE='SYS1.ACF.ALTRULES', RULES                  UM99901X\n               LID='SYS1.ACF.ALTLIDS', LOGONID                  UM99901X\n               INFO='SYS1.ACF.ALTINFO', INFO-STG                UM99901X\n               BRULE='SYS1.ACF.ABKRULES', RULES-B               UM99901X\n               BLID='SYS1.ACF.ABKLIDS', LOGONID-B               UM99901X\n               BINFO='SYS1.ACF.ABKINFO' INFO-STG-B              UM99901\n         @HEADER LID,UID,NAME,PHONE                             UM99901\n         @SMF  PSWD=0 INVALID PASSWORD/AUTHORITY                UM99901X\n               DSN=0, DSN AND PROG VIO/LOG/TRACE                UM99901X\n               LID=0, LOGONID MODIFICAITON JOURNAL              UM99901X\n               RULE=0, ACCESS RULE MODIFICATION JOURNAL         UM99901X\n               JTRACE=0, RESTRICTED LOGONID JOB LOG             UM99901X\n               COMMAND=0, TSO COMMAND RECORDS                   UM99901X\n               INFO=0, INFO STG MODIFICATION JOURNAL            UM99901X\n               RSRC=,0, RESOURCE VIO/LOG/TRACE                  UM99901X\n               ACF2=230, COMBINED SMF RECORD (R400)             UM99901X\n         @UID  LID                                              UM99901\n./ ENDUP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XHASP375": {"ttr": 6915, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*          DATA SET XHASP375CM AT LEVEL 019 AS OF 03/29/90\nXHASP375 TITLE 'LIGHTING MESSAGE HANDLING EXIT            '             00001*18\n*/* LIB:  N/A                                                           00002\n*/* GDE:  GC28-1147 MVS/XA SPL USER EXITS                               00003\n*/* DOC:  THIS EXIT IS TAKEN FROM THE CANCWAIT SAMPLE ON PAGE 51        00004\n*/*       ON THE JOB LOG WITH STEP TERMINATION STATUS.                  00005\n*********************************************************************** 00006\n*                                                                     * 00007\n*             MODULE NAME = XHASP375                                  * 00008*18\n*                                                                     * 00009\n*             DESCRIPTIVE NAME =  COMMUNICATIONS TASK USER EXIT FOR   * 00010\n*                MESSAGE $HASP375                                       00011*18\n*                                                                     * 00012\n*             PHILIPS LIGHTING 1990, THIS IS IN THE PUBLIC DOMAIN AND * 00013\n*             IS IN USE AT PHILIPS LIGHTING.  PLEASE FEEL FREE TO USE * 00014\n*             AT YOUR OWN RISK.  NO WARRANTY EXPRESS OR IMPLIED IS    * 00015**3\n*             GIVEN                                                   * 00016**3\n*                                                                     * 00017**3\n*             FUNCTION =                                              * 00018\n*                FORCE MESSAGE $HASP375 TO BE NON DELETABLE           * 00019*18\n*                                                                     * 00020\n*                                                                     * 00021\n*              NOTES =                                                * 00022\n*                                                                     * 00023\n*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE * 00024\n*                    IF A DIFFERENT CHARACTER SET IS NEEDED.          * 00025\n*                                                                     * 00026\n*                 RESTRICTIONS = NONE                                 * 00027\n*                                                                     * 00028\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        * 00029\n*                    REGISTERS 0 TO 1  = WORK REGISTERS               * 00030\n*                    REGISTERS 2 TO 11 = SEE EQUATES FOR R2-R11       * 00031*18\n*                    REGISTER  12      = ADDRESSABILITY TO XHASP375   * 00032*18\n*                                        CSECT                        * 00033\n*                    REGISTER  13      = ADDRESSIBILITY TO DATA DSECT * 00034\n*                    REGISTERS 14,15   = WORK REGISTERS               * 00035\n*                                                                     * 00036\n*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        * 00037\n*                   BINARY ZEROES)                                    * 00038\n*                                                                     * 00039\n*             MODULE TYPE = PROCEDURE                                 * 00040\n*                                                                     * 00041\n*                PROCESSOR = ASM                                      * 00042\n*                                                                     * 00043\n*                ATTRIBUTES = KEY 0, REENTRANT,                       * 00044\n*                   SUPERVISOR STATE, ENABLED, NO LOCKS HELD          * 00045\n*                                                                     * 00046\n*             ENTRY POINTS = XHASP375 (ONLY ENTRY POINT)              * 00047*18\n*                                                                     * 00048\n*                LINKAGE =                                            * 00049\n*                                                                     * 00050\n*                                                                     * 00051\n*             INPUT = REG1 POINTS TO THE ADDRESS OF THE               * 00052\n*                     COMMUNICATIONS TASK EXIT PARAMETER LIST (CTXT)  * 00053\n*                     REGS 0 AND 2-12 IRRELEVANT                        00054\n*                     REG 13, STANDARD SAVE AREA                        00055\n*                     REG 14, RETURN ADDRESS                            00056\n*                     REG 15, ENTRY POINT ADDRESS                       00057\n*                                                                     * 00058\n*             OUTPUT = NONE                                           * 00059\n*                                                                     * 00060\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   * 00061\n*                                                                     * 00062\n*                OUTPUT = NONE                                        * 00063\n*                                                                     * 00064\n*                RETURN CODE = ZERO                                   * 00065\n*                                                                     * 00066\n*             EXIT - ERROR = NONE                                     * 00067\n*                                                                     * 00068\n*                OUTPUT = NONE                                        * 00069\n*                                                                     * 00070\n*                RETURN CODE = ZERO                                   * 00071\n*                                                                     * 00072\n*             EXTERNAL REFERENCES =                                   * 00073\n*                                                                     * 00074\n*                ROUTINES = NONE                                      * 00075\n*                                                                     * 00076\n*                DATA AREAS = NONE                                    * 00077\n*                                                                     * 00078\n*                CONTROL BLOCKS = NONE                                * 00079\n*                                                                     * 00080\n*             TABLES = NONE                                           * 00081\n*                                                                     * 00082\n*             MACROS = SYS1.MACLIB IEZBITS, PANAEXIT, RETURN, SAVE    * 00083*19\n*                      SYS1.AMODGEN IEZVX100                          * 00084*19\n*                                                                     * 00085\n*             CHANGE ACTIVITY = NONE                                  * 00086\n*                                                                     * 00087\n*                                                                     * 00088\n*             ABEND CODES = NONE                                      * 00089\n*                                                                     * 00090\n*********************************************************************** 00091\n         EJECT                                                          00092\nXHASP375 CSECT ,                                                        00093*18\nXHASP375 AMODE 31                                                       00094*18\nXHASP375 RMODE ANY                                                      00095*18\n*                                                                       00096\n* CONSTANT ADDRESS EQAUTES                                              00097\n*                                                                       00098\nPSAAOLD  EQU    X'224',4    ADDRESS IN PSA OF CURRENT ASCB              00099\nASCBJBNI EQU    X'AC',4     ADDRESS IN JOBNAME IN ASCB                  00100\nCHSTEP   EQU    X'38',8     ADDRESS IN STEP NAME IN CSCB                00101\nCHPROCSN EQU    X'18',8     ADDRESS IN PROC STEP NAME IN CSCB           00102\n*                                                                       00103\n* CONSTANT EQUATES                                                      00104\n*                                                                       00105\nK0       EQU   00                  NON-RELOCATABLE CONSTANT 00          00106\nK1       EQU   01                  NON-RELOCATABLE CONSTANT 01          00107\nK2       EQU   02                  NON-RELOCATABLE CONSTANT 02          00108\nK3       EQU   03                  NON-RELOCATABLE CONSTANT 03          00109\nK4       EQU   04                  NON-RELOCATABLE CONSTANT 04          00110\nK5       EQU   05                  NON-RELOCATABLE CONSTANT 05          00111\nK6       EQU   06                  NON-RELOCATABLE CONSTANT 06          00112\nK7       EQU   07                  NON-RELOCATABLE CONSTANT 07          00113\nK8       EQU   08                  NON-RELOCATABLE CONSTANT 08          00114\nK9       EQU   09                  NON-RELOCATABLE CONSTANT 09          00115\nKA       EQU   10                  NON-RELOCATABLE CONSTANT 10          00116\nKB       EQU   11                  NON-RELOCATABLE CONSTANT 11          00117\nKC       EQU   12                  NON-RELOCATABLE CONSTANT 12          00118\nKD       EQU   13                  NON-RELOCATABLE CONSTANT 13          00119\nKE       EQU   14                  NON-RELOCATABLE CONSTANT 14          00120\nKF       EQU   15                  NON-RELOCATABLE CONSTANT 15          00121\n*                                                                       00122\n* CONSTANT EQUATES                                                      00123\n*                                                                       00124\nSPINPRVT EQU   230                 USE SUBPOOL 230 FOR GETMAIN          00125**5\nSUBPOOL  EQU   252                 USE SUBPOOL 252 FOR GETMAIN          00126**5\nCK       EQU   C'K'                CONSTANT CHAR 'K'                    00127\nCASTR    EQU   C'*'                CONSTANT CHAR '*'                    00128\nC0       EQU   C'0'                CONSTANT CHAR '0'                    00129\n         IEZBITS                                                        00130\n*                                                                       00131\n* REGISTER EQUATES                                                      00132\n*                                                                       00133\nR0       EQU   00                  REG  0 - WORK REG                    00134**3\nR1       EQU   01                  REG  1 - WORK/PARMETER REG           00135**3\nR2       EQU   02                  REG  2 - WORK REG                    00136**3\nR3       EQU   03                  REG  3 - POINTER TO THE CTXT         00137**3\nR4       EQU   04                  REG  4 - NOT USED                    00138*19\nR5       EQU   05                  REG  5 - NOT USED                    00139*19\nR6       EQU   06                  REG  6 - NOT USED                    00140*19\nR7       EQU   07                  REG  7 - NOT USED                    00141*19\nR8       EQU   08                  REG  8 - PTR TO THE DESCRIPTOR CODE  00142*18\nR9       EQU   09                  REG  9 - UNUSED                      00143**3\nR10      EQU   10                  REG 10 - UNUSED                      00144\nR11      EQU   11                  REG 11 - UNUSED                      00145\nR12      EQU   12                  REG 12 - CSECT BASE REG              00146\nR13      EQU   13                  REG 13 - DATA DSECT BASE REG         00147\nR14      EQU   14                  REG 14 - LINKAGE REGISTER            00148\nR15      EQU   15                  REG 15 - WORK REG                    00149\n         EJECT                                                          00150\n         SAVE  (14,12)                                                  00151**5\n         USING XHASP375,R12        SET UP CSECT ADDRESSABILITY          00152*18\n         LR    R12,R15             LOAD BASE REGISTER                   00153\n         L     R3,0(,R1)           LOAD ADDRESS OF CTXT                 00154**1\n         USING CTXT,R3                                                  00155**1\n*        L     R4,CTXTTXPJ         POINT TO THE MESSAGE ATTRIBUTES      00156*19\n*        USING CTXTATTR,R4                                              00157*19\n*        LA    R5,CTXTTMSG         POINT TO THE MESSAGE AREA            00158*19\n*        USING MSGTEXT,R5                                               00159*19\n*        L     R7,CTXTRCP          POINT TO MESSAGE ROUTING AREA        00160*19\n*        USING CTXTROUT,R7                                              00161*19\n         L     R8,CTXTDCP           YES, POINT TO DESCRIPTOR CODE       00162*11\n         USING CTXTDESC,R8                                              00163*11\n         MVC   CTXTDESC,DESCCD11    SET TO DESC CODE 11                 00164*12\n         DROP  R8                                                       00165*11\n         OI    CTXTRFB1,CTXTRCDC       REQUEST TO CHANGE DESC           00166*11\nEXIT     DS    0H                                                       00167**2\n         RETURN (14,12)                EXIT, NOTE RETURN CODE NOT GIVEN 00168**4\nDESCCD11 DC    B'0000000000100000' SET TO DESC CODE 11                  00169*13\n*                1234567890123456                                       00170*12\nMSGTEXT  DSECT                                                          00171**2\nMSGID    DS    CL8                                                      00172**2\nJOBDATA  DS    CL8                                                      00173**2\n         ORG   MSGTEXT                                                  00174**2\n         DS    CL4                                                      00175**2\nWTORID   DS    CL8                                                      00176**2\n         DS    CL25                                                     00177*14\nWAITVAL  DS    CL4                                                      00178*17\n         IEZVX100                                                       00179**2\n         END                                                            00180**2\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XIEF176I": {"ttr": 6919, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*          DATA SET XIEF176ICM AT LEVEL 004 AS OF 05/13/90\n*          DATA SET XIEF176ICM AT LEVEL 003 AS OF 03/29/90              00001**1\nXIEF176I TITLE 'LIGHTING MESSAGE HANDLING EXIT            '             00002**1\n*/* LIB:  N/A                                                           00003**1\n*/* GDE:  GC28-1147 MVS/XA SPL USER EXITS                               00004**1\n*/* DOC:  THIS EXIT IS TAKEN FROM THE CANCWAIT SAMPLE ON PAGE 51        00005**1\n*/*       ON THE JOB LOG WITH STEP TERMINATION STATUS.                  00006**1\n*********************************************************************** 00007**1\n*                                                                     * 00008**1\n*             MODULE NAME = XIEF176I                                  * 00009**1\n*                                                                     * 00010**1\n*             DESCRIPTIVE NAME =  COMMUNICATIONS TASK USER EXIT FOR   * 00011**1\n*                MESSAGE IEF176I                                      * 00012**1\n*                                                                     * 00013**1\n*             PHILIPS LIGHTING 1990, THIS IS IN THE PUBLIC DOMAIN AND * 00014**1\n*             IS IN USE AT PHILIPS LIGHTING.  PLEASE FEEL FREE TO USE * 00015**1\n*             AT YOUR OWN RISK.  NO WARRANTY EXPRESS OR IMPLIED IS    * 00016**1\n*             GIVEN                                                   * 00017**1\n*                                                                     * 00018**1\n*             FUNCTION =                                              * 00019**1\n*                ISSUE 'P WTRLAUTO' IF WRITER WATING FOR WORK IS      * 00020**1\n*                CLASS L                                              * 00021**1\n*              NOTES =                                                * 00022**1\n*                                                                     * 00023**1\n*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE * 00024**1\n*                    IF A DIFFERENT CHARACTER SET IS NEEDED.          * 00025**1\n*                                                                     * 00026**1\n*                 RESTRICTIONS = NONE                                 * 00027**1\n*                                                                     * 00028**1\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        * 00029**1\n*                    REGISTERS 0 TO 1  = WORK REGISTERS               * 00030**1\n*                    REGISTERS 2 TO 11 = SEE REGISTER EQUATES BELOW   * 00031**1\n*                    REGISTER  12      = ADDRESSABILITY TO XIEF176I   * 00032**1\n*                                        CSECT                        * 00033**1\n*                    REGISTER  13      = ADDRESSIBILITY TO DATA DSECT * 00034**1\n*                    REGISTERS 14,15   = WORK REGISTERS               * 00035**1\n*                                                                     * 00036**1\n*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        * 00037**1\n*                   BINARY ZEROES)                                    * 00038**1\n*                                                                     * 00039**1\n*             MODULE TYPE = PROCEDURE                                 * 00040**1\n*                                                                     * 00041**1\n*                PROCESSOR = ASM                                      * 00042**1\n*                                                                     * 00043**1\n*                ATTRIBUTES = KEY 0, REENTRANT,                       * 00044**1\n*                   SUPERVISOR STATE, ENABLED, NO LOCKS HELD          * 00045**1\n*                                                                     * 00046**1\n*             ENTRY POINTS = XIEF176I (ONLY ENTRY POINT)              * 00047**1\n*                                                                     * 00048**1\n*                LINKAGE =                                            * 00049**1\n*                                                                     * 00050**1\n*                                                                     * 00051**1\n*             INPUT = REG1 POINTS TO THE ADDRESS OF THE               * 00052**1\n*                     COMMUNICATIONS TASK EXIT PARAMETER LIST (CTXT)  * 00053**1\n*                     REGS 0 AND 2-12 IRRELEVANT                        00054**1\n*                     REG 13, STANDARD SAVE AREA                        00055**1\n*                     REG 14, RETURN ADDRESS                            00056**1\n*                     REG 15, ENTRY POINT ADDRESS                       00057**1\n*                                                                     * 00058**1\n*             OUTPUT = NONE                                           * 00059**1\n*                                                                     * 00060**1\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   * 00061**1\n*                                                                     * 00062**1\n*                OUTPUT = NONE                                        * 00063**1\n*                                                                     * 00064**1\n*                RETURN CODE = ZERO                                   * 00065**1\n*                                                                     * 00066**1\n*             EXIT - ERROR = NONE                                     * 00067**1\n*                                                                     * 00068**1\n*                OUTPUT = NONE                                        * 00069**1\n*                                                                     * 00070**1\n*                RETURN CODE = ZERO                                   * 00071**1\n*                                                                     * 00072**1\n*             EXTERNAL REFERENCES =                                   * 00073**1\n*                                                                     * 00074**1\n*                ROUTINES = NONE                                      * 00075**1\n*                                                                     * 00076**1\n*                DATA AREAS = NONE                                    * 00077**1\n*                                                                     * 00078**1\n*                CONTROL BLOCKS = NONE                                * 00079**1\n*                                                                     * 00080**1\n*             TABLES = NONE                                           * 00081**1\n*                                                                     * 00082**1\n*             MACROS = SYS1.MACLIB FREEMAIN, GETMAIN, IEZBITS,        * 00083**1\n*                          IEZMGCR, PANAEXIT, RETURN, SAVE            * 00084**1\n*                      SYS1.AMODGEN IEZVX100, MGCR                    * 00085**1\n*                                                                     * 00086**1\n*             CHANGE ACTIVITY = NONE                                  * 00087**1\n*                                                                     * 00088**1\n*                                                                     * 00089**1\n*             ABEND CODES = NONE                                      * 00090**1\n*                                                                     * 00091**1\n*********************************************************************** 00092**1\n         EJECT                                                          00093**1\nXIEF176I CSECT ,                                                        00094**1\nXIEF176I AMODE 31                                                       00095**1\nXIEF176I RMODE ANY                                                      00096**1\n*                                                                       00097**1\n* CONSTANT ADDRESS EQAUTES                                              00098**1\n*                                                                       00099**1\nPSAAOLD  EQU    X'224',4    ADDRESS IN PSA OF CURRENT ASCB              00100**1\nASCBJBNI EQU    X'AC',4     ADDRESS IN JOBNAME IN ASCB                  00101**1\nCHSTEP   EQU    X'38',8     ADDRESS IN STEP NAME IN CSCB                00102**1\nCHPROCSN EQU    X'18',8     ADDRESS IN PROC STEP NAME IN CSCB           00103**1\n*                                                                       00104**1\n* CONSTANT EQUATES                                                      00105**1\n*                                                                       00106**1\nK0       EQU   00                  NON-RELOCATABLE CONSTANT 00          00107**1\nK1       EQU   01                  NON-RELOCATABLE CONSTANT 01          00108**1\nK2       EQU   02                  NON-RELOCATABLE CONSTANT 02          00109**1\nK3       EQU   03                  NON-RELOCATABLE CONSTANT 03          00110**1\nK4       EQU   04                  NON-RELOCATABLE CONSTANT 04          00111**1\nK5       EQU   05                  NON-RELOCATABLE CONSTANT 05          00112**1\nK6       EQU   06                  NON-RELOCATABLE CONSTANT 06          00113**1\nK7       EQU   07                  NON-RELOCATABLE CONSTANT 07          00114**1\nK8       EQU   08                  NON-RELOCATABLE CONSTANT 08          00115**1\nK9       EQU   09                  NON-RELOCATABLE CONSTANT 09          00116**1\nKA       EQU   10                  NON-RELOCATABLE CONSTANT 10          00117**1\nKB       EQU   11                  NON-RELOCATABLE CONSTANT 11          00118**1\nKC       EQU   12                  NON-RELOCATABLE CONSTANT 12          00119**1\nKD       EQU   13                  NON-RELOCATABLE CONSTANT 13          00120**1\nKE       EQU   14                  NON-RELOCATABLE CONSTANT 14          00121**1\nKF       EQU   15                  NON-RELOCATABLE CONSTANT 15          00122**1\n*                                                                       00123**1\n* CONSTANT EQUATES                                                      00124**1\n*                                                                       00125**1\nSPINPRVT EQU   230                 USE SUBPOOL 230 FOR GETMAIN          00126**1\nSUBPOOL  EQU   252                 USE SUBPOOL 252 FOR GETMAIN          00127**1\nCK       EQU   C'K'                CONSTANT CHAR 'K'                    00128**1\nCASTR    EQU   C'*'                CONSTANT CHAR '*'                    00129**1\nC0       EQU   C'0'                CONSTANT CHAR '0'                    00130**1\n         IEZBITS                                                        00131**1\n*                                                                       00132**1\n* REGISTER EQUATES                                                      00133**1\n*                                                                       00134**1\nR0       EQU   00                  REG  0 - WORK REG                    00135**1\nR1       EQU   01                  REG  1 - WORK/PARMETER REG           00136**1\nR2       EQU   02                  REG  2 - WORK REG                    00137**1\nR3       EQU   03                  REG  3 - POINTER TO THE CTXT         00138**1\nR4       EQU   04                  REG  4 - PTR TO THE MSSG ATTRIBUTES  00139**1\nR5       EQU   05                  REG  5 - PTR TO THE MESSAGE AREA     00140**1\nR6       EQU   06                  REG  6 - POINTER TO THE REPLY        00141**1\nR7       EQU   07                  REG  7 - PTR TO MSSG ROUTING AREA    00142**1\nR8       EQU   08                  REG  8 - USED BY EXECUTED MOVE       00143**1\nR9       EQU   09                  REG  9 - UNUSED                      00144**1\nR10      EQU   10                  REG 10 - UNUSED                      00145**1\nR11      EQU   11                  REG 11 - UNUSED                      00146**1\nR12      EQU   12                  REG 12 - CSECT BASE REG              00147**1\nR13      EQU   13                  REG 13 - DATA DSECT BASE REG         00148**1\nR14      EQU   14                  REG 14 - LINKAGE REGISTER            00149**1\nR15      EQU   15                  REG 15 - WORK REG                    00150**1\n         EJECT                                                          00151**1\n         SAVE  (14,12)                                                  00152**1\n         USING XIEF176I,R12        SET UP CSECT ADDRESSABILITY          00153**1\n         LR    R12,R15             LOAD BASE REGISTER                   00154**1\n         L     R3,0(,R1)           LOAD ADDRESS OF CTXT                 00155**1\n         USING CTXT,R3                                                  00156**1\n         L     R4,CTXTTXPJ         POINT TO THE MESSAGE ATTRIBUTES      00157**1\n         USING CTXTATTR,R4                                              00158**1\n         LA    R5,CTXTTMSG         POINT TO THE MESSAGE AREA            00159**1\n         USING MSGTEXT,R5                                               00160**1\n         L     R7,CTXTRCP          POINT TO MESSAGE ROUTING AREA        00161**1\n         USING CTXTROUT,R7                                              00162**1\n         CLC   WAITRESN,CLASLCON   IS THE REASON CLASS=L (SYSLOG)       00163**1\n         BNE   EXIT                NO, EXIT                             00164**1\n*********************************************************************** 00165**1\n*                                                                     * 00166**1\n*        DYNAMIC STORAGE FOR THIS MODULE IS BEING OBTAINED BELOW THE  * 00167**1\n*        16-MEG LINE BECAUSE SVC 34 REQUIRES THE MGCR PARAMETER LIST  * 00168**1\n*        TO BE IN 24-BIT ADDRESSABLE STORAGE                          * 00169**1\n*                                                                     * 00170**1\n*********************************************************************** 00171**1\n         GETMAIN RU,LV=DATAEND,SP=SPINPRVT,LOC=BELOW OBTAIN DYNAMIC     00172**1\n*                                                    STORAGE            00173**1\n         USING DATAAREA,R1                                              00174**1\n         ST    R13,SAVEPR13     SAVE THE SAVE AREA POINTER IN THE NEW   00175**1\n         ST    R1,8(,R13)           AREA AND R1 IN THE PRIOR ONE        00176**1\n         LR    R13,R1 POINT R13 TO THE DATA AREA                        00177**1\n         DROP  R1                                                       00178**1\n         USING DATAAREA,R13                                             00179**1\n         XC    MGCRPL(MGCRLTH),MGCRPL  CLEAR OUT THE REPLY AREA         00180**1\n         XC    CTXTROUT(2),CTXTROUT    CLEAR OUT THE ROUT CODE          00181**1\n         MVC   MGCRLGTH,STOPCONL       MOVE IN COMMAND LENGHT           00182**1\n         MVC   COMMAND,STOPCON         MOVE IN THE STOP COMMAND         00183**1\n         SLR   R0,R0                                                    00184**1\n         MGCR  MGCRPL                  ISSUE THE MESSAGE                00185**1\n         MVC   MGCRLGTH,STRTCONL       MOVE IN COMMAND LENGHT           00186**4\n         MVC   COMMAND(L'STRTCON),STRTCON  MOVE IN 'S P,M=PHUT1113'     00187**4\n*                                      SUBMIT JOB TO TELL UCC7 TO       00188**4\n*                                      SUBMIT PRINT SYSLOG JOB          00189**4\n         SLR   R0,R0                                                    00190**4\n         MGCR  MGCRPL                  ISSUE THE MESSAGE                00191**4\n         LR    R8,R13                  RESTORE THE SAVE AREA POINTER    00192**1\n         L     R13,SAVEPR13                                             00193**1\n         FREEMAIN RU,LV=DATAEND,A=(R8),SP=SPINPRVT  FREE THE DATA AREA  00194**1\n         DROP  R13                                                      00195**1\n         OI    CTXTRFB1,CTXTRCRC       REQUEST TO CHANGE ROUT           00196**1\nEXIT     DS    0H                                                       00197**1\n         RETURN (14,12)                EXIT, NOTE RETURN CODE NOT GIVEN 00198**1\nIEF176I  DC    CL7'IEF176I'                                             00199**1\nSTOPCONL DC    AL1(MGCRTEXT-MGCRPL+L'STOPCON)                           00200**1\nSTOPCON  DC    C'P WTRLAUTO'                                            00201**1\nSTRTCONL DC    AL1(MGCRTEXT-MGCRPL+L'STRTCON)                           00202**4\nSTRTCON  DC    C'S P,M=PHUT1113'                                        00203**4\nCLASLCON DC    C'CLASS=L'                                               00204**3\nDATAAREA DSECT                                                          00205**1\n         DS    0D                                                       00206**1\nSAVEAREA DS    0CL72                                                    00207**1\nSAVEPL1  DS    F                                                        00208**1\nSAVEPR13 DS    F                                                        00209**1\nSAVENX13 DS    F                                                        00210**1\nSAVE1412 DS    15F                                                      00211**1\n         DS    0F                                                       00212**1\nMGCR     IEZMGCR DSECT=NO                                               00213**1\n         ORG   MGCRTEXT                                                 00214**1\nCOMMAND  DS    CL(L'STOPCON)                                            00215**2\n         ORG                                                            00216**1\nDATAEND  EQU   *-DATAAREA                                               00217**1\nMSGTEXT  DSECT                                                          00218**1\nMSGID    DS    CL8                                                      00219**1\nJOBDATA  DS    CL8                                                      00220**1\n         ORG   MSGTEXT                                                  00221**1\n         DS    CL34                                                     00222**1\nWAITRESN DS    CL(L'CLASLCON)                                           00223**2\n         IEZVX100                                                       00224**1\n         END                                                            00225**1\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XIEF238D": {"ttr": 6924, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*          DATA SET XIEF238DCM AT LEVEL 003 AS OF 03/29/90\nXIEF238D TITLE 'LIGHTING MESSAGE HANDLING EXIT            '             00001**2\n*/* LIB:  N/A                                                           00002\n*/* GDE:  GC28-1147 MVS/XA SPL USER EXITS                               00003\n*/* DOC:  THIS EXIT IS TAKEN FROM THE CANCWAIT SAMPLE ON PAGE 51        00004\n*/*       ON THE JOB LOG WITH STEP TERMINATION STATUS.                  00005\n*********************************************************************** 00006\n*                                                                     * 00007\n*             MODULE NAME = XIEF238D                                  * 00008**2\n*                                                                     * 00009\n*             DESCRIPTIVE NAME =  COMMUNICATIONS TASK USER EXIT FOR   * 00010\n*                MESSAGE IEF238D                                      * 00011**2\n*                                                                     * 00012\n*             PHILIPS LIGHTING 1990, THIS IS IN THE PUBLIC DOMAIN AND * 00013\n*             IS IN USE AT PHILIPS LIGHTING.  PLEASE FEEL FREE TO USE * 00014\n*             AT YOUR OWN RISK.  NO WARRANTY EXPRESS OR IMPLIED IS    * 00015**3\n*             GIVEN                                                   * 00016**3\n*                                                                     * 00017**3\n*             FUNCTION =                                              * 00018\n*                REPLY WAIT IF THE MESSAGE ALLOWS WAIT AS A REPLY     * 00019**2\n*                                                                     * 00020\n*                                                                     * 00021\n*              NOTES =                                                * 00022\n*                                                                     * 00023\n*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE * 00024\n*                    IF A DIFFERENT CHARACTER SET IS NEEDED.          * 00025\n*                                                                     * 00026\n*                 RESTRICTIONS = NONE                                 * 00027\n*                                                                     * 00028\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        * 00029\n*                    REGISTERS 0 TO 1  = WORK REGISTERS               * 00030\n*                    REGISTERS 2 TO 11 = SEE REGISTER EQUATES BELOW   * 00031**3\n*                    REGISTER  12      = ADDRESSABILITY TO XIEF238D   * 00032**2\n*                                        CSECT                        * 00033\n*                    REGISTER  13      = ADDRESSIBILITY TO DATA DSECT * 00034\n*                    REGISTERS 14,15   = WORK REGISTERS               * 00035\n*                                                                     * 00036\n*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        * 00037\n*                   BINARY ZEROES)                                    * 00038\n*                                                                     * 00039\n*             MODULE TYPE = PROCEDURE                                 * 00040\n*                                                                     * 00041\n*                PROCESSOR = ASM                                      * 00042\n*                                                                     * 00043\n*                ATTRIBUTES = KEY 0, REENTRANT,                       * 00044\n*                   SUPERVISOR STATE, ENABLED, NO LOCKS HELD          * 00045\n*                                                                     * 00046\n*             ENTRY POINTS = XIEF238D (ONLY ENTRY POINT)              * 00047**2\n*                                                                     * 00048\n*                LINKAGE =                                            * 00049\n*                                                                     * 00050\n*                                                                     * 00051\n*             INPUT = REG1 POINTS TO THE ADDRESS OF THE               * 00052\n*                     COMMUNICATIONS TASK EXIT PARAMETER LIST (CTXT)  * 00053\n*                     REGS 0 AND 2-12 IRRELEVANT                        00054\n*                     REG 13, STANDARD SAVE AREA                        00055\n*                     REG 14, RETURN ADDRESS                            00056\n*                     REG 15, ENTRY POINT ADDRESS                       00057\n*                                                                     * 00058\n*             OUTPUT = NONE                                           * 00059\n*                                                                     * 00060\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   * 00061\n*                                                                     * 00062\n*                OUTPUT = NONE                                        * 00063\n*                                                                     * 00064\n*                RETURN CODE = ZERO                                   * 00065\n*                                                                     * 00066\n*             EXIT - ERROR = NONE                                     * 00067\n*                                                                     * 00068\n*                OUTPUT = NONE                                        * 00069\n*                                                                     * 00070\n*                RETURN CODE = ZERO                                   * 00071\n*                                                                     * 00072\n*             EXTERNAL REFERENCES =                                   * 00073\n*                                                                     * 00074\n*                ROUTINES = NONE                                      * 00075\n*                                                                     * 00076\n*                DATA AREAS = NONE                                    * 00077\n*                                                                     * 00078\n*                CONTROL BLOCKS = NONE                                * 00079\n*                                                                     * 00080\n*             TABLES = NONE                                           * 00081\n*                                                                     * 00082\n*             MACROS = SYS1.MACLIB FREEMAIN, GETMAIN, IEZBITS,        * 00083**3\n*                          IEZMGCR, PANAEXIT, RETURN, SAVE            * 00084**3\n*                      SYS1.AMODGEN IEZVX100, MGCR                    * 00085**3\n*                                                                     * 00086**3\n*             CHANGE ACTIVITY = NONE                                  * 00087\n*                                                                     * 00088\n*                                                                     * 00089\n*             ABEND CODES = NONE                                      * 00090\n*                                                                     * 00091\n*********************************************************************** 00092\n         EJECT                                                          00093\nXIEF238D CSECT ,                                                        00094**2\nXIEF238D AMODE 31                                                       00095**2\nXIEF238D RMODE ANY                                                      00096**2\n*                                                                       00097\n* CONSTANT ADDRESS EQAUTES                                              00098\n*                                                                       00099\nPSAAOLD  EQU    X'224',4    ADDRESS IN PSA OF CURRENT ASCB              00100\nASCBJBNI EQU    X'AC',4     ADDRESS IN JOBNAME IN ASCB                  00101\nCHSTEP   EQU    X'38',8     ADDRESS IN STEP NAME IN CSCB                00102\nCHPROCSN EQU    X'18',8     ADDRESS IN PROC STEP NAME IN CSCB           00103\n*                                                                       00104\n* CONSTANT EQUATES                                                      00105\n*                                                                       00106\nK0       EQU   00                  NON-RELOCATABLE CONSTANT 00          00107\nK1       EQU   01                  NON-RELOCATABLE CONSTANT 01          00108\nK2       EQU   02                  NON-RELOCATABLE CONSTANT 02          00109\nK3       EQU   03                  NON-RELOCATABLE CONSTANT 03          00110\nK4       EQU   04                  NON-RELOCATABLE CONSTANT 04          00111\nK5       EQU   05                  NON-RELOCATABLE CONSTANT 05          00112\nK6       EQU   06                  NON-RELOCATABLE CONSTANT 06          00113\nK7       EQU   07                  NON-RELOCATABLE CONSTANT 07          00114\nK8       EQU   08                  NON-RELOCATABLE CONSTANT 08          00115\nK9       EQU   09                  NON-RELOCATABLE CONSTANT 09          00116\nKA       EQU   10                  NON-RELOCATABLE CONSTANT 10          00117\nKB       EQU   11                  NON-RELOCATABLE CONSTANT 11          00118\nKC       EQU   12                  NON-RELOCATABLE CONSTANT 12          00119\nKD       EQU   13                  NON-RELOCATABLE CONSTANT 13          00120\nKE       EQU   14                  NON-RELOCATABLE CONSTANT 14          00121\nKF       EQU   15                  NON-RELOCATABLE CONSTANT 15          00122\n*                                                                       00123\n* CONSTANT EQUATES                                                      00124\n*                                                                       00125\nSPINPRVT EQU   230                 USE SUBPOOL 230 FOR GETMAIN          00126**5\nSUBPOOL  EQU   252                 USE SUBPOOL 252 FOR GETMAIN          00127**5\nCK       EQU   C'K'                CONSTANT CHAR 'K'                    00128\nCASTR    EQU   C'*'                CONSTANT CHAR '*'                    00129\nC0       EQU   C'0'                CONSTANT CHAR '0'                    00130\n         IEZBITS                                                        00131\n*                                                                       00132\n* REGISTER EQUATES                                                      00133\n*                                                                       00134\nR0       EQU   00                  REG  0 - WORK REG                    00135**3\nR1       EQU   01                  REG  1 - WORK/PARMETER REG           00136**3\nR2       EQU   02                  REG  2 - WORK REG                    00137**3\nR3       EQU   03                  REG  3 - POINTER TO THE CTXT         00138**3\nR4       EQU   04                  REG  4 - PTR TO THE MSSG ATTRIBUTES  00139**3\nR5       EQU   05                  REG  5 - PTR TO THE MESSAGE AREA     00140**3\nR6       EQU   06                  REG  6 - POINTER TO THE REPLY        00141**3\nR7       EQU   07                  REG  7 - PTR TO MSSG ROUTING AREA    00142**3\nR8       EQU   08                  REG  8 - USED FOR EXECUTE TO MV REPL 00143**3\nR9       EQU   09                  REG  9 - UNUSED                      00144**3\nR10      EQU   10                  REG 10 - UNUSED                      00145\nR11      EQU   11                  REG 11 - UNUSED                      00146\nR12      EQU   12                  REG 12 - CSECT BASE REG              00147\nR13      EQU   13                  REG 13 - DATA DSECT BASE REG         00148\nR14      EQU   14                  REG 14 - LINKAGE REGISTER            00149\nR15      EQU   15                  REG 15 - WORK REG                    00150\n         EJECT                                                          00151\n         SAVE  (14,12)                                                  00152**5\n         USING XIEF238D,R12        SET UP CSECT ADDRESSABILITY          00153**2\n         LR    R12,R15             LOAD BASE REGISTER                   00154\n         L     R3,0(,R1)           LOAD ADDRESS OF CTXT                 00155**1\n         USING CTXT,R3                                                  00156**1\n         L     R4,CTXTTXPJ         POINT TO THE MESSAGE ATTRIBUTES      00157**5\n         USING CTXTATTR,R4                                              00158**1\n         LA    R5,CTXTTMSG         POINT TO THE MESSAGE AREA            00159**7\n         USING MSGTEXT,R5                                               00160**4\n         L     R7,CTXTRCP          POINT TO MESSAGE ROUTING AREA        00161**5\n         USING CTXTROUT,R7                                              00162**5\n         CLC   WAITVAL,WAITCON      IS THERE A WAIT OPTION?             00163*17\n         BNE   EXIT                 NO, GO TO EXIT                      00164*16\n         LA    R6,WAITMSG           YES, SET UP TO REPLY WAIT           00165*10\n*********************************************************************** 00166**1\n*                                                                     * 00167**1\n*        DYNAMIC STORAGE FOR THIS MODULE IS BEING OBTAINED BELOW THE  * 00168**1\n*        16-MEG LINE BECAUSE SVC 34 REQUIRES THE MGCR PARAMETER LIST  * 00169**1\n*        TO BE IN 24-BIT ADDRESSABLE STORAGE                          * 00170**1\n*                                                                     * 00171**1\n*********************************************************************** 00172**1\n         GETMAIN RU,LV=DATAEND,SP=SPINPRVT,LOC=BELOW OBTAIN DYNAMIC     00173**1\n*                                                    STORAGE            00174**1\n         USING DATAAREA,R1                                              00175**1\n         ST    R13,SAVEPR13     SAVE THE SAVE AREA POINTER IN THE NEW   00176**4\n         ST    R1,8(,R13)           AREA AND R1 IN THE PRIOR ONE        00177**4\n         LR    R13,R1 POINT R13 TO THE DATA AREA                        00178**4\n         DROP  R1                                                       00179**1\n         USING DATAAREA,R13                                             00180**1\n         XC    MGCRPL(MGCRLTH),MGCRPL  CLEAR OUT THE REPLY AREA         00181**4\n         XC    CTXTROUT(2),CTXTROUT    CLEAR OUT THE ROUT CODE          00182**4\n         SLR   R8,R8                   SET UP TO GET THE LENGTH OF      00183*10\n         IC    R8,0(,R6)                   THE REPLY TEXT               00184*10\n         EX    R8,MVREPLY              MOVE THE REPLY TEXT              00185*10\n         MVC   REPLY,CTXTRPID          MOVE IN THE REPLY ID             00186*10\n         LA    R8,MGCRTEXT-MGCRPL+1(,R8)   SET UP THE LENGTH OF THE     00187*10\n         STC   R8,MGCRLGTH                     REPLY                    00188*10\n         SLR   R0,R0                                                    00189**2\n         MGCR  MGCRPL                  ISSUE THE MESSAGE                00190**4\n         LR    R8,R13                  RESTORE THE SAVE AREA POINTER    00191*15\n         L     R13,SAVEPR13                                             00192**4\n         FREEMAIN RU,LV=DATAEND,A=(R8),SP=SPINPRVT  FREE THE DATA AREA  00193*15\n         B     CNGROUT                                                  00194**6\nMVREPLY  MVC   MGCRTEXT(0),1(R6)       EXECUTED MOVE OF REPLY TEXT      00195**6\n         DROP  R13                                                      00196**6\nCNGROUT  DS    0H                                                       00197**2\n         OI    CTXTRFB1,CTXTRCRC       REQUEST TO CHANGE ROUT           00198*11\nEXIT     DS    0H                                                       00199**2\n         RETURN (14,12)                EXIT, NOTE RETURN CODE NOT GIVEN 00200**4\nWAITMSG  DS    0CL(L'WAITLGTH+L'WAITTXT)                                00201**2\nWAITLGTH DC    AL1(L'WAITTXT-1)                                         00202*10\nWAITTXT  DC    C'REPLY XX,WAIT'                                         00203**8\nWAITCON  DC    C'WAIT'                                                  00204*14\nDATAAREA DSECT                                                          00205**2\n         DS    0D                                                       00206**2\nSAVEAREA DS    0CL72                                                    00207**2\nSAVEPL1  DS    F                                                        00208**2\nSAVEPR13 DS    F                                                        00209**2\nSAVENX13 DS    F                                                        00210**2\nSAVE1412 DS    15F                                                      00211**2\n         DS    0F                                                       00212**2\nMGCR     IEZMGCR DSECT=NO                                               00213**2\n         ORG   MGCRTEXT                                                 00214**2\nCOMMAND  DS    CL6                                                      00215**2\nREPLY    DS    CL2                                                      00216**2\nREPLYMSG DS    CL50                                                     00217**2\n         ORG                                                            00218**2\nDATAEND  EQU   *-DATAAREA                                               00219**2\nMSGTEXT  DSECT                                                          00220**2\nMSGID    DS    CL8                                                      00221**2\nJOBDATA  DS    CL8                                                      00222**2\n         ORG   MSGTEXT                                                  00223**2\n         DS    CL4                                                      00224**2\nWTORID   DS    CL8                                                      00225**2\n         DS    CL25                                                     00226*14\nWAITVAL  DS    CL4                                                      00227*17\n         IEZVX100                                                       00228**2\n         END                                                            00229**2\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XIEF433D": {"ttr": 7172, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*          DATA SET XIEF433DCM AT LEVEL 003 AS OF 03/29/90\nXIEF433D TITLE 'LIGHTING MESSAGE HANDLING EXIT            '             00001**2\n*/* LIB:  N/A                                                           00002\n*/* GDE:  GC28-1147 MVS/XA SPL USER EXITS                               00003\n*/* DOC:  THIS EXIT IS TAKEN FROM THE CANCWAIT SAMPLE ON PAGE 51        00004\n*/*       ON THE JOB LOG WITH STEP TERMINATION STATUS.                  00005\n*********************************************************************** 00006\n*                                                                     * 00007\n*             MODULE NAME = XIEF433D                                  * 00008**2\n*                                                                     * 00009\n*             DESCRIPTIVE NAME =  COMMUNICATIONS TASK USER EXIT FOR   * 00010\n*                MESSAGE IEF433D                                      * 00011**2\n*                                                                     * 00012\n*             PHILIPS LIGHTING 1990, THIS IS IN THE PUBLIC DOMAIN AND * 00013\n*             IS IN USE AT PHILIPS LIGHTING.  PLEASE FEEL FREE TO USE * 00014\n*             AT YOUR OWN RISK.  NO WARRANTY EXPRESS OR IMPLIED IS    * 00015**3\n*             GIVEN                                                   * 00016**3\n*                                                                     * 00017**3\n*             FUNCTION =                                              * 00018\n*                AUTOMATICALLY ISSUE NOHOLD REPLY TO IEF433D          * 00019**2\n*                                                                     * 00020\n*              NOTES =                                                * 00021\n*                                                                     * 00022\n*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE * 00023\n*                    IF A DIFFERENT CHARACTER SET IS NEEDED.          * 00024\n*                                                                     * 00025\n*                 RESTRICTIONS = NONE                                 * 00026\n*                                                                     * 00027\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        * 00028\n*                    REGISTERS 0 TO 1  = WORK REGISTERS               * 00029\n*                    REGISTERS 2 TO 11 = SEE REGISTER EQUATES BELOW   * 00030**3\n*                    REGISTER  12      = ADDRESSABILITY TO XIEF433D   * 00031**2\n*                                        CSECT                        * 00032\n*                    REGISTER  13      = ADDRESSIBILITY TO DATA DSECT * 00033\n*                    REGISTERS 14,15   = WORK REGISTERS               * 00034\n*                                                                     * 00035\n*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        * 00036\n*                   BINARY ZEROES)                                    * 00037\n*                                                                     * 00038\n*             MODULE TYPE = PROCEDURE                                 * 00039\n*                                                                     * 00040\n*                PROCESSOR = ASM                                      * 00041\n*                                                                     * 00042\n*                ATTRIBUTES = KEY 0, REENTRANT,                       * 00043\n*                   SUPERVISOR STATE, ENABLED, NO LOCKS HELD          * 00044\n*                                                                     * 00045\n*             ENTRY POINTS = XIEF433D (ONLY ENTRY POINT)              * 00046**2\n*                                                                     * 00047\n*                LINKAGE =                                            * 00048\n*                                                                     * 00049\n*                                                                     * 00050\n*             INPUT = REG1 POINTS TO THE ADDRESS OF THE               * 00051\n*                     COMMUNICATIONS TASK EXIT PARAMETER LIST (CTXT)  * 00052\n*                     REGS 0 AND 2-12 IRRELEVANT                        00053\n*                     REG 13, STANDARD SAVE AREA                        00054\n*                     REG 14, RETURN ADDRESS                            00055\n*                     REG 15, ENTRY POINT ADDRESS                       00056\n*                                                                     * 00057\n*             OUTPUT = NONE                                           * 00058\n*                                                                     * 00059\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   * 00060\n*                                                                     * 00061\n*                OUTPUT = NONE                                        * 00062\n*                                                                     * 00063\n*                RETURN CODE = ZERO                                   * 00064\n*                                                                     * 00065\n*             EXIT - ERROR = NONE                                     * 00066\n*                                                                     * 00067\n*                OUTPUT = NONE                                        * 00068\n*                                                                     * 00069\n*                RETURN CODE = ZERO                                   * 00070\n*                                                                     * 00071\n*             EXTERNAL REFERENCES =                                   * 00072\n*                                                                     * 00073\n*                ROUTINES = NONE                                      * 00074\n*                                                                     * 00075\n*                DATA AREAS = NONE                                    * 00076\n*                                                                     * 00077\n*                CONTROL BLOCKS = NONE                                * 00078\n*                                                                     * 00079\n*             TABLES = NONE                                           * 00080\n*                                                                     * 00081\n*             MACROS = SYS1.MACLIB FREEMAIN, GETMAIN, IEZBITS,        * 00082**3\n*                          IEZMGCR, PANAEXIT, RETURN, SAVE            * 00083**3\n*                      SYS1.AMODGEN IEZVX100, MGCR                    * 00084**3\n*                                                                     * 00085**3\n*             CHANGE ACTIVITY = NONE                                  * 00086\n*                                                                     * 00087\n*                                                                     * 00088\n*             ABEND CODES = NONE                                      * 00089\n*                                                                     * 00090\n*********************************************************************** 00091\n         EJECT                                                          00092\nXIEF433D CSECT ,                                                        00093**2\nXIEF433D AMODE 31                                                       00094**2\nXIEF433D RMODE ANY                                                      00095**2\n*                                                                       00096\n* CONSTANT ADDRESS EQAUTES                                              00097\n*                                                                       00098\nPSAAOLD  EQU    X'224',4    ADDRESS IN PSA OF CURRENT ASCB              00099\nASCBJBNI EQU    X'AC',4     ADDRESS IN JOBNAME IN ASCB                  00100\nCHSTEP   EQU    X'38',8     ADDRESS IN STEP NAME IN CSCB                00101\nCHPROCSN EQU    X'18',8     ADDRESS IN PROC STEP NAME IN CSCB           00102\n*                                                                       00103\n* CONSTANT EQUATES                                                      00104\n*                                                                       00105\nK0       EQU   00                  NON-RELOCATABLE CONSTANT 00          00106\nK1       EQU   01                  NON-RELOCATABLE CONSTANT 01          00107\nK2       EQU   02                  NON-RELOCATABLE CONSTANT 02          00108\nK3       EQU   03                  NON-RELOCATABLE CONSTANT 03          00109\nK4       EQU   04                  NON-RELOCATABLE CONSTANT 04          00110\nK5       EQU   05                  NON-RELOCATABLE CONSTANT 05          00111\nK6       EQU   06                  NON-RELOCATABLE CONSTANT 06          00112\nK7       EQU   07                  NON-RELOCATABLE CONSTANT 07          00113\nK8       EQU   08                  NON-RELOCATABLE CONSTANT 08          00114\nK9       EQU   09                  NON-RELOCATABLE CONSTANT 09          00115\nKA       EQU   10                  NON-RELOCATABLE CONSTANT 10          00116\nKB       EQU   11                  NON-RELOCATABLE CONSTANT 11          00117\nKC       EQU   12                  NON-RELOCATABLE CONSTANT 12          00118\nKD       EQU   13                  NON-RELOCATABLE CONSTANT 13          00119\nKE       EQU   14                  NON-RELOCATABLE CONSTANT 14          00120\nKF       EQU   15                  NON-RELOCATABLE CONSTANT 15          00121\n*                                                                       00122\n* CONSTANT EQUATES                                                      00123\n*                                                                       00124\nSPINPRVT EQU   230                 USE SUBPOOL 230 FOR GETMAIN          00125**5\nSUBPOOL  EQU   252                 USE SUBPOOL 252 FOR GETMAIN          00126**5\nCK       EQU   C'K'                CONSTANT CHAR 'K'                    00127\nCASTR    EQU   C'*'                CONSTANT CHAR '*'                    00128\nC0       EQU   C'0'                CONSTANT CHAR '0'                    00129\n         IEZBITS                                                        00130\n*                                                                       00131\n* REGISTER EQUATES                                                      00132\n*                                                                       00133\nR0       EQU   00                  REG  0 - WORK REG                    00134**3\nR1       EQU   01                  REG  1 - WORK/PARMETER REG           00135**3\nR2       EQU   02                  REG  2 - WORK REG                    00136**3\nR3       EQU   03                  REG  3 - POINTER TO THE CTXT         00137**3\nR4       EQU   04                  REG  4 - PTR TO THE MSSG ATTRIBUTES  00138**3\nR5       EQU   05                  REG  5 - PTR TO THE MESSAGE AREA     00139**3\nR6       EQU   06                  REG  6 - POINTER TO THE REPLY        00140**3\nR7       EQU   07                  REG  7 - PTR TO MSSG ROUTING AREA    00141**3\nR8       EQU   08                  REG  8 - USED BY EXECUTED MOVE       00142**3\nR9       EQU   09                  REG  9 - UNUSED                      00143**3\nR10      EQU   10                  REG 10 - UNUSED                      00144\nR11      EQU   11                  REG 11 - UNUSED                      00145\nR12      EQU   12                  REG 12 - CSECT BASE REG              00146\nR13      EQU   13                  REG 13 - DATA DSECT BASE REG         00147\nR14      EQU   14                  REG 14 - LINKAGE REGISTER            00148\nR15      EQU   15                  REG 15 - WORK REG                    00149\n         EJECT                                                          00150\n         SAVE  (14,12)                                                  00151**5\n         USING XIEF433D,R12        SET UP CSECT ADDRESSABILITY          00152**2\n         LR    R12,R15             LOAD BASE REGISTER                   00153\n         L     R3,0(,R1)           LOAD ADDRESS OF CTXT                 00154**1\n         USING CTXT,R3                                                  00155**1\n         L     R4,CTXTTXPJ         POINT TO THE MESSAGE ATTRIBUTES      00156**5\n         USING CTXTATTR,R4                                              00157**1\n         LA    R5,CTXTTMSG         POINT TO THE MESSAGE AREA            00158**7\n         USING MSGTEXT,R5                                               00159**4\n         L     R7,CTXTRCP          POINT TO MESSAGE ROUTING AREA        00160**5\n         USING CTXTROUT,R7                                              00161**5\n         LA    R6,NOHLDMSG          YES, SET UP TO REPLY NOHOLD         00162*10\n*********************************************************************** 00163**1\n*                                                                     * 00164**1\n*        DYNAMIC STORAGE FOR THIS MODULE IS BEING OBTAINED BELOW THE  * 00165**1\n*        16-MEG LINE BECAUSE SVC 34 REQUIRES THE MGCR PARAMETER LIST  * 00166**1\n*        TO BE IN 24-BIT ADDRESSABLE STORAGE                          * 00167**1\n*                                                                     * 00168**1\n*********************************************************************** 00169**1\n         GETMAIN RU,LV=DATAEND,SP=SPINPRVT,LOC=BELOW OBTAIN DYNAMIC     00170**1\n*                                                    STORAGE            00171**1\n         USING DATAAREA,R1                                              00172**1\n         ST    R13,SAVEPR13     SAVE THE SAVE AREA POINTER IN THE NEW   00173**4\n         ST    R1,8(,R13)           AREA AND R1 IN THE PRIOR ONE        00174**4\n         LR    R13,R1 POINT R13 TO THE DATA AREA                        00175**4\n         DROP  R1                                                       00176**1\n         USING DATAAREA,R13                                             00177**1\n         XC    MGCRPL(MGCRLTH),MGCRPL  CLEAR OUT THE REPLY AREA         00178**4\n         XC    CTXTROUT(2),CTXTROUT    CLEAR OUT THE ROUT CODE          00179**4\n         SLR   R8,R8                   SET UP TO GET THE LENGTH OF      00180*10\n         IC    R8,0(,R6)                   THE REPLY TEXT               00181*10\n         EX    R8,MVREPLY              MOVE THE REPLY TEXT              00182*10\n         MVC   REPLY,CTXTRPID          MOVE IN THE REPLY ID             00183*10\n         LA    R8,MGCRTEXT-MGCRPL+1(,R8)   SET UP THE LENGTH OF THE     00184*10\n         STC   R8,MGCRLGTH                     REPLY                    00185*10\n         SLR   R0,R0                                                    00186**2\n         MGCR  MGCRPL                  ISSUE THE MESSAGE                00187**4\n         LR    R8,R13                  RESTORE THE SAVE AREA POINTER    00188*15\n         L     R13,SAVEPR13                                             00189**4\n         FREEMAIN RU,LV=DATAEND,A=(R8),SP=SPINPRVT  FREE THE DATA AREA  00190*15\n         B     CNGROUT                                                  00191**6\nMVREPLY  MVC   MGCRTEXT(0),1(R6)       EXECUTED MOVE OF REPLY TEXT      00192**6\n         DROP  R13                                                      00193**6\nCNGROUT  DS    0H                                                       00194**2\n         OI    CTXTRFB1,CTXTRCRC       REQUEST TO CHANGE ROUT           00195*11\nEXIT     DS    0H                                                       00196**2\n         RETURN (14,12)                EXIT, NOTE RETURN CODE NOT GIVEN 00197**4\nIEF433D  DC    CL7'IEF433D'                                             00198**2\nNOHLDMSG DS    0CL(L'NOHLLGTH+L'NOHLTXT)                                00199**2\nNOHLLGTH DC    AL1(L'NOHLTXT-1)                                         00200*10\nNOHLTXT  DC    C'REPLY XX,NOHOLD'                                       00201**8\nDATAAREA DSECT                                                          00202**2\n         DS    0D                                                       00203**2\nSAVEAREA DS    0CL72                                                    00204**2\nSAVEPL1  DS    F                                                        00205**2\nSAVEPR13 DS    F                                                        00206**2\nSAVENX13 DS    F                                                        00207**2\nSAVE1412 DS    15F                                                      00208**2\n         DS    0F                                                       00209**2\nMGCR     IEZMGCR DSECT=NO                                               00210**2\n         ORG   MGCRTEXT                                                 00211**2\nCOMMAND  DS    CL6                                                      00212**2\nREPLY    DS    CL2                                                      00213**2\nREPLYMSG DS    CL50                                                     00214**2\n         ORG                                                            00215**2\nDATAEND  EQU   *-DATAAREA                                               00216**2\nMSGTEXT  DSECT                                                          00217**2\nMSGID    DS    CL8                                                      00218**2\nJOBDATA  DS    CL8                                                      00219**2\n         ORG   MSGTEXT                                                  00220**2\n         DS    CL4                                                      00221**2\nWTORID   DS    CL8                                                      00222**2\n         DS    CL25                                                     00223*14\nWAITVAL  DS    CL4                                                      00224*17\n         IEZVX100                                                       00225**2\n         END                                                            00226**2\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT175/FILE175.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT175", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}