{"INMR01": {"INMLRECL": 80, "INMFNODE": "NODENAME", "INMFUID": "P390", "INMTNODE": "NO", "INMTUID": "WHERE", "INMFTIME": "20030411182501000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 6080, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "DIST.MATRIX.V2.SAMPLE.SOURCE", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"DIST.MATRIX.V2.SAMPLE.SOURCE": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 6080, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 32, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3339, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "030101", "DS1SCEXT": "b'\\x80\\x17\\xc0'", "DS1SCALO": "b'P\\x00\\x00\\x0f'", "DS1LSTAR": "b'\\x00\\x1b\\x06'", "DS1TRBAL": "b'\\x9f\\xc6'"}, "COPYR2": {"deb": "b'\\x0b\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0bP\\x00\\x04\\x8a\\x1b('", "extents": ["b'\\x0b\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0bP\\x00\\x04\\x8a\\x1b('", "b'X\\xf3\\xe6\\xb8\\x00\\x00\\x05\\x1e\\x00\\n\\x05\\x1f\\x00\\x02\\x00\\x08'", "b'X\\xf3\\xe6\\xb8\\x00\\x00\\x05 \\x00\\r\\x05 \\x00\\x0e\\x00\\x02'", "b'X\\xf3\\xe6\\xb8\\x00\\x00\\x05\\x11\\x00\\x00\\x05\\x11\\x00\\x01\\x00\\x02'", "b'X\\xf3\\xe6\\xb8\\x00\\x00\\x05\\x11\\x00\\x03\\x05\\x11\\x00\\x04\\x00\\x02'", "b'X\\xf3\\xe6\\xb8\\x00\\x00\\x05\\x11\\x00\\x06\\x05\\x11\\x00\\x07\\x00\\x02'", "b'X\\xf3\\xe6\\xb8\\x00\\x00\\x05\\x0f\\x00\\r\\x05\\x0f\\x00\\x0e\\x00\\x02'", "b'X\\xf3\\xe6\\xb8\\x00\\x00\\x05\\x16\\x00\\x01\\x05\\x16\\x00\\x02\\x00\\x02'", "b'X\\xf3\\xe6\\xb8\\x00\\x00\\x05\\x0f\\x00\\x07\\x05\\x0f\\x00\\x08\\x00\\x02'", "b'X\\xf3\\xe6\\xb8\\x00\\x00\\x05\\x0f\\x00\\x0b\\x05\\x0f\\x00\\x0c\\x00\\x02'", "b'X\\xf3\\xe6\\xb8\\x00\\x00\\x051\\x00\\n\\x051\\x00\\x0b\\x00\\x02'", "b'X\\xf3\\xe6\\xb8\\x00\\x00\\x051\\x00\\x0c\\x051\\x00\\r\\x00\\x02'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"ASMASSOC": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x01\\x01%\\x1f\\x01\\x03\\t\\x0f\\x05C\\x00V\\x00O\\x00\\x12\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2001-09-08T00:00:00", "modifydate": "2003-03-31T05:43:00", "lines": 86, "newlines": 79, "modlines": 18, "user": "IBMUSER"}, "text": "         TITLE 'ASMASSOC ASSEMBLER MATRIX CLIENT EXAMPLE'\n* ******************************************************************* *\n* PROGRAM NAME: ASMASSOC                                              *\n* AUTHOR      : EXSPANS SYSTEMS INC.                                  *\n* DATE        :                                                       *\n* FUNCTION    : THIS PROGRAM DEMONSTRATES THE MATRIX API IN ASSEMBLER *\n*             : ASSOCIATE A VIRTUAL WORK AREA WITH A FILE             *\n* OPERATING SYSTEM: OS/390                                            *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ******************************************************************* *\n*\nASMASSOC AENTRY\n*\n         MVC   SPCNAM,=CL4'NAME'\n         MVC   DSN,=CL44'DATA.SET.NAME'\n*\n* CALL MATRIX TO ASSOCIATE THE SPACE WITH THE DATASET\n*\n         LA    R9,MXUSMSTX           ADDR USER AREA\n         USING MXMSGREC,R9\n*\nAAAAA    CALLMXFI TYPE=ASSOC,PREFIX=MX,PARM=PLST@,                    ++\n               WANAME=SPCNAM,           SPACE NAME                    ++\n               DSN=DSN,                 DSNAME                        ++\n               SYNC=YES,                YES/NO(R?)                    ++\n               RETOK=EXIT,              BRANCH IF RET OK              ++\n               DSPTCHD=BUG,                    IF DISPATCHED          ++\n               REQFAIL=RET04,                  REQUEST FAILED         ++\n               QUIESC=EXIT,                    MATRIX SHUTTING DOWN   ++\n               NOTFND=EXIT,                           NOT RUNNING     ++\n               SOS=EXIT,                       SHORT ON STORAGE       ++\n               NOTSUP=BUG,                     INVALID REQUEST        ++\n               LOCKED=BBBBB,                   BUSY                   ++\n               NOTINIT=BBBBB,                  NOT READY YET          ++\n               ERROR=EXIT\n*\n* ALTERNATE EXAMPLE OF SAME CALL WITH CONDITION TESTING REMOVED\n*\nBBBBB    CALLMXFI TYPE=ASSOC,PREFIX=MX,PARM=PLST@,                    ++\n               WANAME=SPCNAM,           SPACE NAME                    ++\n               DSN=DSN,                 DSNAME                        ++\n               SYNC=YES                 YES/NO(R?)\n         LTR   R15,R15                  CHECK RETURN CODE\n         BNZ   AAAAA                    NOT ZERO\n         B     EXIT\n*\n* THERE WAS AN ERROR HANDLING REQUEST\n*\nRET04    DS    0H\n         CLI   MXMSGRET,C' '          DID SERVER RETURN A MESSAGE\n         BE    ERRMSG                 NO\n         MVC   WTOMSG(WMSG1L),WMSG1   INITIALIZE MESSAGE\n         MVC   WTOMSG+15(L'MXMSGRET),MXMSGRET\n         WTO   MF=(E,WTOMSG)\n         B     EXIT\n         DROP  R9\n*\nBUG      DS    0H\n         WTO   'ASMASSOC BUG IN APPLICATION'\n         B     EXIT\n*\nERRMSG   DS    0H\n         WTO   'ASMASSOC REQUEST FAILED'\n*\nEXIT     DS    0H\n         AEXIT\n*\nWMSG1    WTO  'ASMASSOC FAILED: 123456789012345678901234567890123456789X\n               0',MF=L\nWMSG1L   EQU  *-WMSG1\n*\n         ADYNAM\nPLST@    DS   D\n         SRUSPLST DSECT=NO,PREFIX=MX,LEN=MXMSGLEN\nDSN      DS   CL44\nSPCNAM   DS   CL4\nWTOMSG   WTO  'ASMASSOC FAILED: 123456789012345678901234567890123456789X\n               0',MF=L\n         ADYNEND\n*\n* GLOBAL DUMMY SECTIONS\n*\n         MXREQCOD PREFIX=MXUS\n         MXMSGREC DSECT=YES,PREFIX=MX\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMCONN": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x16\\x01\\x00\\x11\\x0f\\x01\\x03\\t\\x0f\\x05E\\x00\\x81\\x00x\\x00\\r\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2000-04-19T00:00:00", "modifydate": "2003-03-31T05:45:16", "lines": 129, "newlines": 120, "modlines": 13, "user": "IBMUSER"}, "text": "         TITLE 'ASMCONN ASSEMBLER MATRIX CLIENT EXAMPLE'\n* ******************************************************************* *\n* PROGRAM NAME: ASMCONN                                               *\n* AUTHOR      : EXSPANS SYSTEMS INC.                                  *\n* DATE        :                                                       *\n* FUNCTION    : THIS PROGRAM DEMONSTRATES THE MATRIX API IN ASSEMBLER *\n*             : CONNECT TO MATRIX THEN CONNECT TO A VIRTUAL WORK AREA *\n*             :                                                       *\n* OPERATING SYSTEM: OS/390                                            *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ******************************************************************* *\n*\nASMCONN  AENTRY\n*\n         MVC   SYSNAME,=CL4'MTRX'          NAME OF MATRIX TO USE\n         MVC   SPCNAM,=CL4'SPCA'           NAME OF SPACE TO CONNECT TO\n*\n* OBTAIN ACCESS TO MATRIX. SAVE TOKEN IN VARIABLE ACCESS\n*\n         LA    R9,MXUSMSTX          OBTAIN ADDRESSIBILITY TO MESSAGE\n         USING MXMSGREC,R9\n*\n         SRVACCES PREFIX=MX,PARM=PLST@,                               ++\n               SYSNAME=SYSNAME,                                       ++\n               ERROR=CONNFAIL\n         ST    R1,ACCESS                   SAVE ACCESS TOKEN\n*\n* CALL MATRIX TO ASSOCIATE THE SPACE WITH THE DATASET\n*\n* THIS SHOWS THE CONNECT USING SYSNAME TO IDENTIFY THE INSTANCE OF\n* MATRIX TO USE. IT IS PREFERABLE TO USE ATOK WHEN MULTIPLE INVOCATIONS\n* OF MATRIX ARE MADE.\n* ALL OF THE OPTIONAL CONDITIONS ARE GIVEN\n*\nAAAAA    CALLMXCN TYPE=CONNECT,PREFIX=MX,PARM=PLST@,                  ++\n               WANAME=SPCNAM,           SPACE NAME                    ++\n               TOKEN=TOKEN,             TOKEN                         ++\n               SYSNAME=SYSNAME,         NAME OF MATRIX I WANT TO USE  ++\n               SYNC=YES,                YES/NO(R?)                    ++\n               RETOK=EXIT,              BRANCH IF RET OK              ++\n               DSPTCHD=BUG,                    IF DISPATCHED          ++\n               REQFAIL=RET04,                  REQUEST FAILED         ++\n               QUIESC=EXIT,                    MATRIX SHUTTING DOWN   ++\n               NOTFND=EXIT,                           NOT RUNNING     ++\n               SOS=EXIT,                       SHORT ON STORAGE       ++\n               NOTSUP=BUG,                     INVALID REQUEST        ++\n               LOCKED=BBBBB,                   BUSY                   ++\n               NOTINIT=BBBBB,                  NOT READY YET          ++\n               ERROR=EXIT\n*\n* SHORT FORM OF CONNECT MACRO. THIS USES ATOK TO IDENTIFY THE MATRIX\n* INSTANCE TO USE. IT COULD USE SYSNAME AS ABOVE.\n*\nBBBBB    CALLMXCN TYPE=CONNECT,PREFIX=MX,PARM=PLST@,                  ++\n               ATOK=ACCESS,             ACCESS TOKEN                  ++\n               WANAME=SPCNAM,           SPACE NAME                    ++\n               TOKEN=TOKEN              TOKEN\n         LTR   R15,R15                  CHECK RETURN CODE\n         BNZ   AAAAA                    NOT ZERO\n         B     EXIT\n*\n* DISCONNECT FROM A TABLE\n*\nDISCON   CALLMXCN TYPE=DISCONN,PREFIX=MX,PARM=PLST@,                  ++\n               ATOK=ACCESS,             ACCESS TOKEN                  ++\n               TOKEN=TOKEN,             TOKEN                         ++\n               SYNC=YES,                YES/NO(R?)                    ++\n               RETOK=EXIT,              BRANCH IF RET OK              ++\n               DSPTCHD=BUG,                    IF DISPATCHED          ++\n               REQFAIL=RET04,                  REQUEST FAILED         ++\n               QUIESC=EXIT,                    MATRIX SHUTTING DOWN   ++\n               NOTFND=EXIT,                           NOT RUNNING     ++\n               SOS=EXIT,                       SHORT ON STORAGE       ++\n               NOTSUP=BUG,                     INVALID REQUEST        ++\n               LOCKED=DISCON,                  BUSY                   ++\n               NOTINIT=DISCON,                 NOT READY YET          ++\n               ERROR=EXIT\n*\nDDDDD    CALLMXCN TYPE=DISCONN,PREFIX=MX,PARM=PLST@,                  ++\n               ATOK=ACCESS,             ACCESS TOKEN                  ++\n               TOKEN=TOKEN,             TOKEN                         ++\n               SYNC=YES\n         LTR   R15,R15                  CHECK RETURN CODE\n         BNZ   ERRMSG                   NOT ZERO\n         B     EXIT\n*\n* THERE WAS AN ERROR HANDLING REQUEST\n*\nRET04    DS    0H\n         CLI   MXRCRETX,C' '          DID SERVER RETURN A MESSAGE\n         BE    ERRMSG                 NO\n         MVC   WTOMSG(WMSG1L),WMSG1   INITIALIZE MESSAGE\n         MVC   WTOMSG+15(L'MXRCRETX),MXRCRETX\n         WTO   MF=(E,WTOMSG)\n         B     EXIT\n*\nBUG      DS    0H\n         WTO   'ASMCONN BUG IN APPLICATION'\n         B     EXIT\n*\nCONNFAIL DS    0H\n         LA    R5,=CL40'FAILED TO CONNECT TO TABLE'\n         B     EXIT\n*\nERRMSG   DS    0H\n         WTO   'ASMCONN REQUEST FAILED'\n*\nEXIT     DS    0H\n         AEXIT\n*\nWMSG1    WTO  'ASMCONN FAILED:  123456789012345678901234567890123456789X\n               0',MF=L\nWMSG1L   EQU  *-WMSG1\n*\n         ADYNAM\nPLST@    DS   D\nTOKEN    DS   D\nACCESS   DS   F\nSPCNAM   DS   CL4\nSYSNAME  DS   CL4\n         SRUSPLST DSECT=NO,PREFIX=MX,LEN=MXMSGLEN\nWTOMSG   WTO  'ASMCONN FAILED:  123456789012345678901234567890123456789X\n               0',MF=L\n         ADYNEND\n         MXREQCOD PREFIX=MXUS\n         MXMSGREC DSECT=YES,PREFIX=MX\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMCOPY": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00E\\x01\\x01%\\x1f\\x01\\x03\\t\\x0f\\x05E\\x00c\\x00`\\x00\\x04\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-09-08T00:00:00", "modifydate": "2003-03-31T05:45:45", "lines": 99, "newlines": 96, "modlines": 4, "user": "IBMUSER"}, "text": "         TITLE 'ASMCOPY PERFORM COPY WORKAREA TO WORK AREA'\n* ******************************************************************* *\n* PROGRAM NAME: ASMCOPY                                               *\n* AUTHOR      : EXSPANS SYSTEM AND SOFTWARE DEV. INC.                 *\n*             :                                                       *\n* FUNCTION    : DEMONSTRATE COPY BETWEEN WORK AREAS                   *\n*             : TO COPY A WORK AREA                                   *\n*             :                                                       *\n* OPERATING SYSTEM: OS/390                                            *\n* ******************************************************************* *\n*\nASMCOPY  AENTRY\n*\n         MVC   FSPCNAM,=CL4'FROM'  FROM WORK AREA NAME\n         MVC   FROMADDR,=D'321457548'  ADDRESS TO COPY FROM\n         MVC   LENGTH,=F'200000'   NUMBER OF BYTES TO COPY\n         MVC   TSPCNAM,=CL4'TOXX'  DESTINATION WA NAME\n         MVC   TOADDR,=D'0'        DESTINATION ADDRESS\n*\n* CALL MATRIX TO COPY THE DATA\n*\n         LA    R9,MXUSMSTX          OBTAIN ADDRESSIBILITY TO MESSAGE\n         USING MXMSGREC,R9\n*\nCALLMX   CALLMXCC PREFIX=MX,PARM=PLST@,                               ++\n               FROMNAME=FSPCNAM,                                      ++\n               FROMADDR=FROMADDR,                                     ++\n               TONAME=TSPCNAM,                                        ++\n               TOADDR=TOADDR,                                         ++\n               LENGTH=LENGTH,                                         ++\n               SYNC=YES,                                              ++\n               RETOK=CALLMX2,                                         ++\n               DSPTCHD=BUG,        I ASKED FOR SYNCH SO THIS IS BUG   ++\n               REQFAIL=RET04,      REQUEST FAILED                     ++\n               QUIESC=ERRMSG,                                         ++\n               NOTFND=ERRMSG,                                         ++\n               SOS=ERRMSG,                                            ++\n               NOTSUP=ERRMSG,                                         ++\n               LOCKED=ERRMSG,                                         ++\n               NOTINIT=ERRMSG,                                        ++\n               ERROR=ERRMSG\n*\n* ALTERNATE COPY\n*\nCALLMX2  CALLMXCC PREFIX=MX,PARM=PLST@,                               ++\n               FROMNAME=FSPCNAM,                                      ++\n               FROMADDR=FROMADDR,                                     ++\n               TONAME=TSPCNAM,                                        ++\n               TOADDR=TOADDR,                                         ++\n               LENGTH=LENGTH,                                         ++\n               SYNC=NO             ASYNC\n*\n* CHECK RETURN CODE\n*\n         C     R15,=F'36'          WAS IT DISPATCHED\n         BE    EXIT                SHOULD BE BECAUSE IT WAS ASYNC\n         LTR   R15,R15             CHECK RETURN CODE\n         BZ    BUG\n         B     ERRMSG\n*\n* THERE WAS AN ERROR HANDLING REQUEST\n*\nRET04    DS    0H\n         CLI   MXRCRETX,C' '       DID MATRIX RETURN A MESSAGE\n         BE    ERRMSG                 NO\n         MVC   WTOMSG(WMSG1L),WMSG1   INITIALIZE MESSAGE\n         MVC   WTOMSG+15(L'MXRCRETX),MXRCRETX\n         WTO   MF=(E,WTOMSG)\n         B     EXIT\n*\nBUG      DS    0H\n         WTO   'ASMCOPY BUG IN APPLICATION'\n         B     EXIT\n*\nERRMSG   DS    0H\n         WTO   'ASMCOPY REQUEST FAILED'\n*\nEXIT     DS    0H\n         AEXIT\n*\nWMSG1    WTO  'ASMCOPY FAILED:  123456789012345678901234567890123456789X\n               0',MF=L\nWMSG1L   EQU  *-WMSG1\n*\n         ADYNAM\nPLST@    DS   D\nFROMADDR DS   D\nTOADDR   DS   D\nLENGTH   DS   D\n         SRUSPLST DSECT=NO,PREFIX=MX,LEN=MXMSGLEN\nFSPCNAM  DS   CL4\nTSPCNAM  DS   CL4\nWTOMSG   WTO  'ASMCOPY FAILED:  123456789012345678901234567890123456789X\n               0',MF=L\n         ADYNEND\n         MXREQCOD PREFIX=MXUS\n         MXMSGREC DSECT=YES,PREFIX=MX\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMCRTWA": {"ttr": 20, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00P\\x01\\x01%\\x1f\\x01\\x01%\\x1f\\x16\\x18\\x00I\\x00F\\x00\\x03\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-09-08T00:00:00", "modifydate": "2001-09-08T16:18:50", "lines": 73, "newlines": 70, "modlines": 3, "user": "IBMUSER"}, "text": "         TITLE 'ASMCRTWA PERFORM CREATE WORKAREA'\n* ******************************************************************* *\n* PROGRAM NAME: ASMCRTWA                                              *\n* AUTHOR      : EXSPANS SYSTEM AND SOFTWARE DEV. INC.                 *\n*             :                                                       *\n* FUNCTION    : DEMONSTRATE CREATION OF A VIRTUAL WORK AREA           *\n*             :                                                       *\n* OPERATING SYSTEM: OS/390                                            *\n* ******************************************************************* *\n*\nASMCRTWA AENTRY\n*\n         MVC   SPCNAM,=CL4'NAME'       WORK AREA NAME\n         MVC   BYTESIZE,=D'3500000000' SIZE OF VIRTUAL WORK AREA\n*\n* CALL MATRIX TO CREATE WORK AREA\n*\n         LA    R9,MXUSMSTX          OBTAIN ADDRESSIBILITY TO MESSAGE\n         USING MXMSGREC,R9\n*\nCALLMX   CALLMXCW PREFIX=MX,PARM=PLST@,NAME=SPCNAM,                   ++\n               SIZE=BYTESIZE,                                         ++\n               SYNC=YES,                YES/NO(R?)                    ++\n               RETOK=CALLMX2,                                         ++\n               DSPTCHD=BUG,                                           ++\n               REQFAIL=RET04,                                         ++\n               QUIESC=EXIT,                                           ++\n               NOTFND=EXIT,                                           ++\n               SOS=EXIT,                                              ++\n               NOTSUP=BUG,                                            ++\n               LOCKED=CALLMX,                                         ++\n               NOTINIT=CALLMX,                                        ++\n               ERROR=EXIT\n*\n* ALTERNATE FORM\n*\nCALLMX2  CALLMXCW PREFIX=MX,PARM=PLST@,NAME=SPCNAM,                   ++\n               SIZE=BYTESIZE,                                         ++\n               SYNC=YES\n*\n         LTR   R15,R15\n         BNZ   ERRMSG\n*\n         B     EXIT\n*\nRET04    DS    0H\n         CLI   MXRCRETX,C' '          DID SERVER RETURN A MESSAGE\n         BE    ERRMSG                 YES\n         MVC   MSG,MXRCRETX           DISPLAY THE REURNED MESSAGE\n         B     EXIT\n*\nERRMSG   DS    0H\n         WTO   'ASMCRTWA: ERROR PROCESSING REQUEST'\n         B     EXIT\n*\nBUG      DS    0H\n         WTO   'ASMCRTWA: ENVIRONMENTAL ERROR'\n*\nEXIT     DS    0H\n*\n         AEXIT\n*\n         ADYNAM\nPLST@    DS   D\nBYTESIZE DS   D\n         SRUSPLST DSECT=NO,PREFIX=MX,LEN=MXMSGLEN\nSPCNAM   DS   CL4\nMSG      DS   CL40\n         ADYNEND\n*\n         MXREQCOD PREFIX=MXUS\n         MXMSGREC DSECT=YES,PREFIX=MX\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMDELWA": {"ttr": 22, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x004\\x01\\x01%\\x1f\\x01\\x01%\\x1f\\x16 \\x00E\\x00E\\x00\\x02\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-09-08T00:00:00", "modifydate": "2001-09-08T16:20:34", "lines": 69, "newlines": 69, "modlines": 2, "user": "IBMUSER"}, "text": "         TITLE 'ASMDELWA PERFORM DELETE SPACE'\n* ******************************************************************* *\n* PROGRAM NAME: ASMDELWA                                              *\n* AUTHOR      : EXSPANS SYSTEM AND SOFTWARE DEV. INC.                 *\n*             :                                                       *\n* FUNCTION    : DEMONSTRATE MATRIX API. DELETE WORK AREA              *\n*             :                                                       *\n* OPERATING SYSTEM: OS/390                                            *\n* ******************************************************************* *\n*\nASMDELWA AENTRY\n*\n         MVC   SPCNAM,=CL4'NAME'   WORK AREA NAME TO DELETE\n*\n* CALL MATRIX TO DELETE THE SPACE\n*\n         LA    R9,MXUSMSTX\n         USING MXMSGREC,R9\n*\n         CALLMXDW PREFIX=MX,PARM=PLST@,NAME=SPCNAM,                   ++\n               SYNC=YES,                YES/NO(R?)                    ++\n               FORCE=NO,                YES/NO(R?)                    ++\n               RETOK=EXIT,                                            ++\n               DSPTCHD=BUG,                                           ++\n               REQFAIL=RET04,                                         ++\n               QUIESC=EXIT,                                           ++\n               NOTFND=EXIT,                                           ++\n               SOS=EXIT,                                              ++\n               NOTSUP=BUG,                                            ++\n               LOCKED=CALLMX,                                         ++\n               NOTINIT=CALLMX,                                        ++\n               ERROR=EXIT\n*\n* ALTERNATE FORM OF DELETE WA\n*\nCALLMX   CALLMXDW PREFIX=MX,PARM=PLST@,NAME=SPCNAM,                   ++\n               SYNC=YES,                                              ++\n               FORCE=NO\n         LTR   R15,R15\n         BZ    EXIT\nERRMSG   WTO   'ASMDELWA: ERROR DELETEING WORK AREA'\n         B     EXIT\n*\nRET04    DS    0H\n         CLI   MXRCRETX,C' '          DID SERVER RETURN A MESSAGE\n         BE    ERRMSG                 NO\n         MVC   MSG,MXRCRETX           DISPLAY THE REURNED MESSAGE\n         B     EXIT\n         DROP  R9\n*\nBUG      DS    0H\n         WTO   'BUG IN MATRIX'\n         B     EXIT\n*\nEXIT     DS    0H\n         AEXIT\n*\n         ADYNAM\nPLST@    DS   D\n         SRUSPLST DSECT=NO,PREFIX=MX,LEN=MXMSGLEN\nSPCNAM   DS   CL4\nFORCE    DS   CL1\nMSG      DS   CL40\n         ADYNEND\n*\n         MXREQCOD PREFIX=MXUS\n         MXMSGREC DSECT=YES,PREFIX=MX\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMDISAS": {"ttr": 1546, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00%\\x01\\x01%\\x1f\\x01\\x03\\t\\x0f\\x05H\\x00C\\x00@\\x00\\t\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2001-09-08T00:00:00", "modifydate": "2003-03-31T05:48:25", "lines": 67, "newlines": 64, "modlines": 9, "user": "IBMUSER"}, "text": "         TITLE 'ASMDISAS PERFORM DISASSOCIATE WORKAREA '\n* ******************************************************************* *\n* PROGRAM NAME: ASMDISAS                                              *\n* AUTHOR      : EXSPANS SYSTEM AND SOFTWARE DEV. INC.                 *\n*             :                                                       *\n* FUNCTION    : MATRIX API EXAMPLE. DISASSOCIATE A WORK AREA FROM A   *\n*             : FILE                                                  *\n*             :                                                       *\n* OPERATING SYSTEM: OS/390                                            *\n* ******************************************************************* *\n*\nASMDISAS AENTRY\n*\n         MVC   SPCNAM,=CL4'NAME'       WORK AREA NAME\n*\n* CALL MATRIX TO DISASSOCIATE THE SPACE FROM ITS FILE\n*\n         LA    R9,MXUSMSTX          OBTAIN ADDRESSIBILITY TO MESSAGE\n         USING MXMSGREC,R9\n*\n         CALLMXFI TYPE=DISASSOC,PREFIX=MX,PARM=PLST@,                 ++\n               WANAME=SPCNAM,           VWA NAME                      ++\n               SYNC=YES,                                              ++\n               RETOK=EXIT,                                            ++\n               DSPTCHD=BUG,             BUG BCOZ THIS IS SYNC         ++\n               REQFAIL=RET04,                                         ++\n               QUIESC=EXIT,                                           ++\n               NOTFND=EXIT,                                           ++\n               SOS=EXIT,                                              ++\n               NOTSUP=BUG,                                            ++\n               LOCKED=CALLMX2,          RETRY                         ++\n               NOTINIT=CALLMX2,                                       ++\n               ERROR=EXIT\n*\n* ALTERNATE FORM\n*\nCALLMX2  CALLMXFI TYPE=DISASSOC,PREFIX=MX,PARM=PLST@,                 ++\n               WANAME=SPCNAM,           VWA NAME                      ++\n               SYNC=YES\n         LTR   R15,R15\n         BZ    EXIT\n*\nERRMSG   DS    0H\n         WTO   'ERROR ASSOCIATING WORK AREA'\n         B     EXIT\n*\nRET04    DS    0H\n         CLI   MXRCRETX,C' '          DID SERVER RETURN A MESSAGE\n         BE    ERRMSG                 NO\n         MVC   MSG,MXRCRETX           DISPLAY THE REURNED MESSAGE\n         B     EXIT\nBUG      DS    0H\n         WTO   'BUG IN MATRIX'\nEXIT     DS    0H\n         AEXIT\n*\n         ADYNAM\nPLST@    DS   D\n         SRUSPLST DSECT=NO,PREFIX=MX,LEN=MXMSGLEN\nDSN      DS   CL44\nSPCNAM   DS   CL4\nMSG      DS   CL40\n         ADYNEND\n*\n         MXREQCOD PREFIX=MXUS\n         MXMSGREC DSECT=YES,PREFIX=MX\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMREAD": {"ttr": 1548, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00&\\x01\\x00\\x11\\x0f\\x01\\x03\\t\\x0f\\x05I\\x00k\\x00`\\x00\\x1d\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2000-04-19T00:00:00", "modifydate": "2003-03-31T05:49:26", "lines": 107, "newlines": 96, "modlines": 29, "user": "IBMUSER"}, "text": "         TITLE 'ASMREAD ASSEMBLER MATRIX CLIENT EXAMPLE'\n* ******************************************************************* *\n* PROGRAM NAME: ASMREAD                                               *\n* AUTHOR      : EXSPANS SYSTEMS INC.                                  *\n* DATE        :                                                       *\n* FUNCTION    : THIS PROGRAM DEMONSTRATES THE MATRIX API IN ASSEMBLER *\n*             : CONNECT TO MATRIX AND READ FROM A VIRTUAL WORK AREA   *\n*             :                                                       *\n* OPERATING SYSTEM: OS/390                                            *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ******************************************************************* *\n*\nASMREAD AENTRY\n*\n         MVC   TOKEN,0(R1)             GET TOKEN FOR WORK AREA\n         MVC   FROMADDR,=D'3000000000' ADDRESS TO READ FROM\n*\n         MVC   SYSNAME,=CL4'MTRX'      NAME OF MATRIX INSTANCE\n*\n         LA    R9,MXUSMSTX             GET ADDRESSIBILITY TO PARMS\n         USING MXMSGREC,R9\n*\n* OBTAIN ACCESS TO MATRIX. THIS RETURNS THE ACCESS TOKEN IN R1 FOR USE\n* WITH OTHER SERVER ACCESS CALLS.IT ALSO PRIMES THE TOKEN IN THE\n* MESSAGE AND SO CALLS WITH THE SAME PREFIX DO NOT NEED TO RESPECIFY\n* THE ATOK AS SHOWN IN FIRST EXAMPLE.\n*\n         SRVACCES PREFIX=MX,PARM=PLST@,                               ++\n               SYSNAME=SYSNAME,                                       ++\n               RETOK=AAAAA\n         B     EXIT                     RETURN CODE IN R15\n*\n* CALL MATRIX TO READ A DATA FROM A WORK AREA\n* FULL FORM\n*\nAAAAA    DS    0H\n         ST    R1,SAVETOK\nAAAA1    CALLMXRD PREFIX=MX,PARM=PLST@,                               ++\n               ATOK=(SAVETOK),          ACCESS TOKEN                  ++\n               TOKEN=TOKEN,             TOKEN FROM CONNECT            ++\n               DEST=DATAAREA,           READ DATA TO HERE             ++\n               READLEN=1999,            LENGTH TO READ                ++\n               FROMADDR=FROMADDR,       ADDRESS TO READ FROM          ++\n               RETOK=EXIT,              BRANCH IF RET OK              ++\n               DSPTCHD=BUG,                    IF DISPATCHED          ++\n               REQFAIL=RET04,                  REQUEST FAILED         ++\n               QUIESC=EXIT,                    MATRIX SHUTTING DOWN   ++\n               NOTFND=EXIT,                           NOT RUNNING     ++\n               SOS=EXIT,                       SHORT ON STORAGE       ++\n               NOTSUP=BUG,                     INVALID REQUEST        ++\n               LOCKED=BBBBB,                   BUSY                   ++\n               NOTINIT=BBBBB,                  NOT READY YET          ++\n               ERROR=EXIT\n*\n* SHORT FORM. NOTICE NO ACCESS TOKEN OR SERVER NAME USED. THE SRVACCES\n* WITH THE SAME PREFIX AS THIS PRIMES THE PARAMETERS.\n*\nBBBBB    CALLMXRD PREFIX=MX,PARM=PLST@,                               ++\n               TOKEN=TOKEN,             TOKEN FROM CONNECT            ++\n               DEST=DATAAREA,           READ DATA TO HERE             ++\n               READLEN=1999,            LENGTH TO READ                ++\n               FROMADDR=FROMADDR        ADDRESS TO READ FROM\n*\n         LTR   R15,R15                  CHECK RETURN CODE\n         BNZ   AAAA1                    NOT ZERO = READ FAILED\n         B     EXIT                     RC = 0 READ OK\n*\n* THERE WAS AN ERROR HANDLING REQUEST\n*\nRET04    DS    0H\n         CLI   MXRCRETX,C' '          DID SERVER RETURN A MESSAGE\n         BE    ERRMSG                 NO\n         MVC   WTOMSG(WMSG1L),WMSG1   INITIALIZE MESSAGE\n         MVC   WTOMSG+15(L'MXRCRETX),MXRCRETX RETURNED MESSAGE\n         WTO   MF=(E,WTOMSG)\n         B     EXIT\n*\nBUG      DS    0H\n         WTO   'ASMREAD BUG IN APPLICATION'\n         B     EXIT\n*\nERRMSG   DS    0H\n         WTO   'ASMREAD REQUEST FAILED'\n*\nEXIT     DS    0H\n         AEXIT\n*\nWMSG1    WTO  'ASMREAD FAILED:  123456789012345678901234567890123456789X\n               0',MF=L\nWMSG1L   EQU  *-WMSG1\n*\n         ADYNAM\nPLST@    DS   D\n         SRUSPLST DSECT=NO,PREFIX=MX,LEN=MXMSGLEN\nTOKEN    DS   D\nFROMADDR DS   D\nSYSNAME  DS   CL4\nSAVETOK  DS   F\nWTOMSG   WTO  'ASMREAD FAILED:  123456789012345678901234567890123456789X\n               0',MF=L\nDATAAREA DS   CL4000\n         ADYNEND\n*\n         MXREQCOD PREFIX=MXUS\n         MXMSGREC DSECT=YES,PREFIX=MX\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMSCAN": {"ttr": 1551, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00P\\x01\\x01%\\x1f\\x01\\x03\\t\\x0f\\x05I\\x00a\\x00c\\x00\\x04\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2001-09-08T00:00:00", "modifydate": "2003-03-31T05:49:50", "lines": 97, "newlines": 99, "modlines": 4, "user": "IBMUSER"}, "text": "         TITLE 'ASMSCAN ASSEMBLER MATRIX CLIENT EXAMPLE'\n* ******************************************************************* *\n* PROGRAM NAME: ASMEXMPL                                              *\n* AUTHOR      : EXSPANS SYSTEMS INC.                                  *\n* DATE        :                                                       *\n* FUNCTION    : THIS PROGRAM DEMONSTRATES THE MATRIX API IN ASSEMBLER *\n*             : SEARCH A VIRTUAL WORK AREA FOR SPECIFIED DATA         *\n*             :                                                       *\n* OPERATING SYSTEM: OS/390                                            *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ******************************************************************* *\n*\nASMSCAN AENTRY\n*\n         MVC   TOKEN,0(R1)              GET TOKEN FOR WORK AREA\n         MVC   DATAAREA(14),=CL14'FIND THIS DATA'\n         MVC   STARTAT,=D'1000000000'\n         MVC   SCANLEN,=D'200000'\n*\n         MVC   WANAME,=CL4'NAME'\n*\n* CALL MATRIX TO SCAN A WORK AREA FOR DATA\n*\n         LA    R9,MXUSMSTX             GET ADDRESSIBILITY TO MESSAGE\n         USING MXMSGREC,R9\n*\n         CALLMXSR PREFIX=MX,PARM=PLST@,                               ++\n               TOKEN=TOKEN,             TOKEN FROM CONNECT            ++\n               DATA=DATAAREA,                                         ++\n               STARTAT=STARTAT,                                       ++\n               SCANLEN=SCANLEN,                                       ++\n               ARGLEN=14,                                             ++\n               RETOK=FOUNDIT,           BRANCH IF RET OK              ++\n               DSPTCHD=BUG,                    IF DISPATCHED          ++\n               REQFAIL=RET04,                  REQUEST FAILED         ++\n               QUIESC=EXIT,                    MATRIX SHUTTING DOWN   ++\n               NOTFND=EXIT,                           NOT RUNNING     ++\n               SOS=EXIT,                       SHORT ON STORAGE       ++\n               NOTSUP=BUG,                     INVALID REQUEST        ++\n               LOCKED=BBBBB,                   BUSY                   ++\n               NOTINIT=BBBBB,                  NOT SCANY YET          ++\n               ERROR=EXIT\n*\nBBBBB    CALLMXSR PREFIX=MX,PARM=PLST@,                               ++\n               WANAME=WANAME,           SEARCH THIS WORK AREA         ++\n               DATA=DATAAREA,                                         ++\n               STARTAT=STARTAT,                                       ++\n               SCANLEN=SCANLEN,                                       ++\n               ARGLEN=14\n*\n         LTR   R15,R15                  CHECK RETURN CODE\n         BNZ   ERRMSG                   NOT ZERO\nFOUNDIT  DS    0H\n         MVC   FOUNDAT,MXMSHOFF         DATA WAS FOUND AT\n         B     EXIT\n*\n* THERE WAS AN ERROR HANDLING REQUEST\n*\nRET04    DS    0H\n         CLI   MXRCRETX,C' '          DID SERVER RETURN A MESSAGE\n         BE    ERRMSG                 NO\n         MVC   WTOMSG(WMSG1L),WMSG1   INITIALIZE MESSAGE\n         MVC   WTOMSG+15(L'MXRCRETX),MXRCRETX\n         WTO   MF=(E,WTOMSG)\n         B     EXIT\n*\nBUG      DS    0H\n         WTO   'ASMSCAN BUG IN APPLICATION'\n         B     EXIT\n*\nERRMSG   DS    0H\n         WTO   'ASMSCAN REQUEST FAILED'\n*\nEXIT     DS    0H\n         AEXIT\n*\nWMSG1    WTO  'ASMSCAN FAILED:  123456789012345678901234567890123456789X\n               0',MF=L\nWMSG1L   EQU  *-WMSG1\n*\n         ADYNAM\nPLST@    DS   D\n         SRUSPLST DSECT=NO,PREFIX=MX,LEN=MXMSGLEN\nTOKEN    DS   D\nWTOMSG   WTO  'ASMSCAN FAILED:  123456789012345678901234567890123456789X\n               0',MF=L\nSTARTAT  DS   D                START SEARCH HERE\nSCANLEN  DS   D                LENGTH TO SCAN\nFOUNDAT  DS   D                DATA WAS FOUND HERE\nWANAME   DS   CL4\nDATAAREA DS   CL1000\n         ADYNEND\n*\n         MXREQCOD PREFIX=MXUS\n         MXMSGREC DSECT=YES,PREFIX=MX\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMSWAP": {"ttr": 1794, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00S\\x01\\x01%\\x1f\\x01\\x03\\t\\x0f\\x05Q\\x00L\\x00J\\x00\\x05\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-09-08T00:00:00", "modifydate": "2003-03-31T05:51:53", "lines": 76, "newlines": 74, "modlines": 5, "user": "IBMUSER"}, "text": "         TITLE 'ASMSWAP PERFORM WORKAREA SWAP'\n* ******************************************************************* *\n* PROGRAM NAME: ASMSWAP                                               *\n*             :                                                       *\n* AUTHOR      : EXSPANS SYSTEM AND SOFTWARE DEV. INC.                 *\n*             :                                                       *\n* FUNCTION    : DEMONSTRATE MATRIX API FOR WORK AREA SWAP.            *\n*             :                                                       *\n* OPERATING SYSTEM: OS/390                                            *\n* ******************************************************************* *\n*\nASMSWAP  AENTRY\n*\n         MVC   FSPCNAM,=CL4'FNAM'   FROM WA NAME\n         MVC   TSPCNAM,=CL4'TNAM'   TO WORK AREA NAME\n*\n* CALL MATRIX TO SWAP THE WORK AREAS\n*\n         LA    R9,MXUSMSTX          OBTAIN ADDRESSIBILITY TO MESSAGE\n         USING MXMSGREC,R9\n*\nCALLMX   CALLMXXC PREFIX=MX,PARM=PLST@,                               ++\n               SOURCE=FSPCNAM,                                        ++\n               TARGET=TSPCNAM,                                        ++\n               EXINUSE=NO,          DO NOT EXCHANGE WHILE IN USE      ++\n               SYNC=YES,                                              ++\n               RETOK=CALLMX2,                                         ++\n               DSPTCHD=BUG,                                           ++\n               REQFAIL=RET04,                                         ++\n               QUIESC=EXIT,                                           ++\n               NOTFND=EXIT,                                           ++\n               SOS=EXIT,                                              ++\n               NOTSUP=BUG,                                            ++\n               LOCKED=CALLMX,                                         ++\n               NOTINIT=CALLMX,                                        ++\n               ERROR=EXIT\n*\n* EXAMPLE OF SHORT FORM\n*\nCALLMX2  CALLMXXC PREFIX=MX,PARM=PLST@,                               ++\n               SOURCE=FSPCNAM,                                        ++\n               TARGET=TSPCNAM,                                        ++\n               EXINUSE=NO,          EXCHANGE WHILE IN USE             ++\n               SYNC=YES\n         LTR   R15,R15\n         BZ    EXIT\n         C     R15,=F'4'            MESSAGE RETURNED?\n         BE    RET04                YES, DISPLAY IT\nERRMSG   DS    0H\n         WTO   'ERROR SWAPPING WORK AREAS'\n         B     EXIT\nBUG      DS    0H\n         WTO   'SERIOUS ENVIRONMENTAL ERROR'\n         B     EXIT\n*\nRET04    DS    0H\n         CLI   MXRCRETX,C' '          DID SERVER RETURN A MESSAGE\n         BE    ERRMSG                 NO\n         MVC   MSG,MXRCRETX           DISPLAY THE REURNED MESSAGE\n         B     EXIT\n*\nEXIT     DS    0H\n*\n         AEXIT\n*\n         ADYNAM\nPLST@    DS   D\n         SRUSPLST DSECT=NO,PREFIX=MX,LEN=MXMSGLEN\nFSPCNAM  DS   CL4\nTSPCNAM  DS   CL4\nMSG      DS   CL40\n         ADYNEND\n*\n         MXREQCOD PREFIX=MXUS\n         MXMSGREC DSECT=YES,PREFIX=MX\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMTALCC": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00@\\x00\\x991?\\x01\\x03\\t\\x0f\\x05R\\x00i\\x00\\xd4\\x00E\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "1999-11-09T00:00:00", "modifydate": "2003-03-31T05:52:40", "lines": 105, "newlines": 212, "modlines": 69, "user": "IBMUSER"}, "text": "         TITLE 'ASMTALCC ALLOCATE A CELL IN A TABLE'\n* ******************************************************************* *\n* PROGRAM NAME: ASMTALCC                                              *\n* COPYRIGHT (C) EXSPANS SYSTEM AND SOFTWARE DEV. INC. 1999            *\n* AUTHOR      : SIMON SPANCHAK                                        *\n* DATE        : OCT 1999                                              *\n* FUNCTION    : ALLOCATE A CELL IN A TABLE                            *\n*             :                                                       *\n* OPERATING SYSTEM: OS/390                                            *\n* ------------------------------------------------------------------- *\n* MODIFICATION LOG:                                                   *\n* ******************************************************************* *\n*\nASMTALCC AENTRY\n*\n* CONNECT TO MATRIX SERVER\n*\n         LA    R9,MXUSMSTX          OBTAIN ADDRESSIBILITY TO MESSAGE\n         USING MXMSGREC,R9\n*\n         MVC   SYSNAME,=CL4'MTRX'  THIS FUNCTION MUST BE CONNECTED\n         XC    @PLST,@PLST             CLEAR PARAMETER LIST\n*\n         SRVACCES PREFIX=MX,PARM=@PLST, CONNECT TO MATRIX SERVER      ++\n               SYSNAME=SYSNAME,                                       ++\n               ERROR=MXTRET\n         ST    R1,SYSTOK           SAVE MATRIX ACCESS TOKEN\n*\n         MVC   TBLNAM,=CL4'TBL1'   TABLE NAME\n         L     R4,=F'133'          CELL SIZE\n*\n* COORINATE OF CELL TO ALLOCATE IS 1,2,3\n*\n         LA    R0,1\n         ST    R0,DIMTAB           DIM 1\n         LA    R0,2\n         ST    R0,DIMTAB+4         DIM 2\n         LA    R0,3\n         ST    R0,DIMTAB+8         DIM 3\n*\n* CONNECT TO THE TABLE AND GET AN ACCESS TOKEN\n*\n         MXTABLES CONNECT,NAME=TBLNAM,TOKEN=TBLTOK,ERROR=MXTRET,      ++\n               ATOK=(SYSTOK)\n*\n* ALLOCATE A CELL\n*\n         MXTABLES ALLOCCELL,COORDS=DIMTAB,                            ++\n               ATOK=(SYSTOK),                                         ++\n               TOKEN=(TBLTOK),                                        ++\n               PREFIX=MX,SYNC=YES,                                     +\n               PARM=@PLST,                                             +\n               RESULT=DWDWORK,                                         +\n               CELLSIZE=(R4)\n*\n*  DISCONNECT FROM TABLE\n*\n         LR    R8,R15            SAVE RETCODE\n         MXTABLES DISCONNECT,TOKEN=(TBLTOK),ATOK=(SYSTOK)\n         LR    R15,R8            RESTORE RETCODE\n*\n         LTR   R15,R15\n         BZ    PROGXIT           ALL WENT WELL\nMXTRET   DS    0H\n         C     R15,=F'4'         MESSAGE RETURNED\n         BE    RET04             YES\nRET041   DS    0H\n         WTO   'ERROR OCCURRED'\n         LA    R15,12\n         B     PROGXIT\n*\nRET04    DS    0H\n         CLI   MXRCRETX,C' '          DID SERVER RETURN A MESSAGE\n         BE    RET041                 YES\n         LA    R5,MXRCRETX            POINT AT RETURNED MESSAGE\n         B     PROGXIT\n*\n*\nPROGXIT  DS    0H\n         AEXIT\n*\n         ADYNAM\n@PLST    DS    D\nDWDWORK  DS    D\n         SRUSPLST DSECT=NO,PREFIX=MX,LEN=MXMSGLEN\nTBLTOK   DS    F\nTBLNAM   DS    CL4\nSYSTOK   DS    F\nSYSNAME  DS    CL4\nDIMTAB   DS    12F\nDIMTABL  EQU   (*-DIMTAB)/4\n*\n         ADYNEND\n*\n* ******************************************************************* *\n* GLOBAL DUMMY SECTIONS\n* ******************************************************************* *\n*\n         PRINT NOGEN\n*\n         MXREQCOD PREFIX=MXUS\n         MXMSGREC DSECT=YES,PREFIX=MX\n         MXTUREC DSECT=YES,PREFIX=MX\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMTCRTT": {"ttr": 4620, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00#\\x00\\x99)\\x7f\\x01\\x03\\t/\\x00\\x10\\x00Q\\x00\\xb2\\x00@\\xd7\\xf3\\xf9\\xf0@@@@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "1999-10-24T00:00:00", "modifydate": "2003-04-02T00:10:23", "lines": 81, "newlines": 178, "modlines": 64, "user": "P390"}, "text": "         TITLE 'ASMTCRTT PERFORM CREATE TABLE'\n* ******************************************************************* *\n* PROGRAM NAME: ASMTCRTT                                              *\n* COPYRIGHT (C) EXSPANS SYSTEM AND SOFTWARE DEV. INC. 1999            *\n* AUTHOR      : SIMON SPANCHAK                                        *\n* DATE        : OCT 1999                                              *\n* FUNCTION    : EXAMPLE API CALL TO CREATE A TABLE                    *\n*             :                                                       *\n* OPERATING SYSTEM: OS/390                                            *\n* ------------------------------------------------------------------- *\n* MODIFICATION LOG:                                                   *\n* ******************************************************************* *\n*\nASMTCRTT AENTRY\n         MVC   TBLNAM,=CL4'TBL1'   TABLE NAME\n         MVC   DATANAME,=CL4'DATA' NAME OF DATA WA\n         MVC   INDXNAME,=CL4'INDX' NAME OF INDEX WA\n         XC    SZCELL,SZCELL       CELL SIZE = ZERO\n         LA    R2,DIMENS           ADDR OF DIMENSION TABLE\n         LA    R8,3                NUMBER OF DIMENSIONS\n*\n* CREATE TABLE\n*\n         LA    R9,MXUSMSTX          OBTAIN ADDRESSIBILITY TO MESSAGE\n         USING MXMSGREC,R9\n*\nCREATTBL MXTABLES CREATE,PREFIX=MX,DATAWA=DATANAME,                   ++\n               SYSNAME=CL4'MTRX',                                     ++\n               SYNC=YES,                                              ++\n               PARM=@PLST,                                            ++\n               INDEXWA=INDXNAME,                                      ++\n               NAME=TBLNAM,                                           ++\n               CELLSIZE=(SZCELL),                                     ++\n               DIMS=(R2),                                             ++\n               NUMDIMS=(R8),                                          ++\n               OWNER=SHARED\n*\n         LTR   R15,R15           CHECK RET CODE\n         BZ    GOODEXIT\n         C     R15,=F'4'         MSG RET?\n         BNE   RET041\n*\nMSGRET   DS    0H\n         CLI   MXRCRETX,C' '          DID SERVER RETURN A MESSAGE\n         BE    RET041                 YES\n         LA    R5,MXRCRETX            DISPLAY THE REURNED MESSAGE\n         LA    R15,4                  SET RET CODE\n         B     PROGXIT\n*\nRET041   DS    0H\n         WTO 'ERROR OCCURRED'\n         LA    R15,12                 SET RET CODE\n         B     PROGXIT\n*\nGOODEXIT DS    0H\n         WTO 'TABLE CREATED'\n         SR    R15,R15                SET RET CODE\n*\nPROGXIT  DS    0H\n         AEXIT\n*\nDIMENS   DC   F'10'\n         DC   F'05'\n         DC   F'03'\n*\n         ADYNAM\n@PLST    DS   D\nDWDWORK  DS   D\n         SRUSPLST DSECT=NO,PREFIX=MX,LEN=MXMSGLEN\nSZCELL   DS   F\nTBLNAM   DS   CL4\nINDXNAME DS   CL4\nDATANAME DS   CL4\n         ADYNEND\n*\n         PRINT NOGEN\n*\n         MXREQCOD PREFIX=MXUS\n         MXMSGREC DSECT=YES,PREFIX=MX\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMTDELT": {"ttr": 1292, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x008\\x00\\x991?\\x01\\x03\\t\\x0f\\x058\\x00F\\x00\\x7f\\x00 \\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1999-11-09T00:00:00", "modifydate": "2003-03-31T05:38:38", "lines": 70, "newlines": 127, "modlines": 32, "user": "IBMUSER"}, "text": "         TITLE 'MXUTDELT PERFORM DELETE TABLE'\n* ******************************************************************* *\n* PROGRAM NAME: MXUTDELT                                              *\n* COPYRIGHT (C) EXSPANS SYSTEM AND SOFTWARE DEV. INC. 1999            *\n* AUTHOR      : SIMON SPANCHAK                                        *\n* DATE        : OCT 1999                                              *\n* FUNCTION    : EXAMPLE API CALL TO DELETE A TABLE                    *\n*             :                                                       *\n* OPERATING SYSTEM: OS/390                                            *\n* ------------------------------------------------------------------- *\n* MODIFICATION LOG:                                                   *\n* ******************************************************************* *\n*\nMXUTDELT AENTRY\n         L     R2,0(R1)            ADDR TABLE NAME\n         L     R3,4(R1)            ACCESS TOKEN\n*\n         MVC   TBLNAM,0(R2)        TABLE NAME\n*\n         LA    R9,MXUSMSTX          OBTAIN ADDRESSIBILITY TO MESSAGE\n         USING MXMSGREC,R9\n*\n* DELETE A TABLE\n*\n         MXTABLES DELETE,NAME=TBLNAM,                                 ++\n               PARM=@PLST,                                            ++\n               PREFIX=MX,                                             ++\n               ATOK=(R3),                                             ++\n               SYNC=YES,                                              ++\n               FORCE=NO\n*\n         LTR   R15,R15            CHECK RET CODE\n         BZ    PROGXIT\n         C     R15,=F'4'          CHECK FOR RETURNED MESSAGE\n         BE    RET04\n*\n         LA     R15,12            SET RET CODE\n         B      PROGXIT\n*\n*\nRET04    DS    0H\n         CLI   MXRCRETX,C' '          DID SERVER RETURN A MESSAGE\n         BE    RET041                 YES\n         LA    R5,MXRCRETX            DISPLAY THE REURNED MESSAGE\n         LA    R15,4\n         B     PROGXIT\nRET041   DS    0H\n         WTO 'PROGRAM ERROR'\n         LA    R15,12\n*\nPROGXIT  DS    0H\n         AEXIT\n*\n         ADYNAM\n@PLST    DS    D\n         SRUSPLST DSECT=NO,PREFIX=MX,LEN=MXMSGLEN\nTBLNAM   DS    CL4\n*\n         ADYNEND\n*\n* ******************************************************************* *\n* GLOBAL DUMMY SECTIONS\n* ******************************************************************* *\n*\n         PRINT NOGEN\n*\n         MXREQCOD PREFIX=MXUS\n         MXMSGREC DSECT=YES,PREFIX=MX\n*\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMWRITE": {"ttr": 6916, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x008\\x01\\x01%\\x1f\\x01\\x03\\x10\\x1f\\x05F\\x00W\\x00W\\x00\\x01\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-09-08T00:00:00", "modifydate": "2003-04-11T05:46:38", "lines": 87, "newlines": 87, "modlines": 1, "user": "IBMUSER"}, "text": "         TITLE 'ASMWRITE ASSEMBLER MATRIX CLIENT EXAMPLE'\n* ******************************************************************* *\n* PROGRAM NAME: ASMEXMPL                                              *\n* AUTHOR      : EXSPANS SYSTEMS INC.                                  *\n* DATE        :                                                       *\n* FUNCTION    : THIS PROGRAM DEMONSTRATES THE MATRIX API IN ASSEMBLER *\n*             :                                                       *\n*             :                                                       *\n* OPERATING SYSTEM: OS/390                                            *\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ******************************************************************* *\n*\nASMWRITE AENTRY\n*\n         MVC   TOKEN,0(R1)              GET TOKEN FOR WORK AREA\n         MVC   TOADDR,=D'1565789876'    ADDRESS TO WRITE TO\n*\n* CALL MATRIX TO WRITE DATA TO A WORK AREA\n*\n         LA    R9,MXUSMSTX          OBTAIN ADDRESSIBILITY TO MESSAGE\n         USING MXMSGREC,R9\n*\nAAAAA    CALLMXWR PREFIX=MX,PARM=PLST@,                               ++\n               TOKEN=TOKEN,             TOKEN FROM CONNECT            ++\n               DEST=TOADDR,                                           ++\n               WRTLEN=1999,                                           ++\n               FROMADDR=DATAAREA,                                     ++\n               SYNC=YES,                YES/NO(R?)                    ++\n               RETOK=EXIT,              BRANCH IF RET OK              ++\n               DSPTCHD=BUG,                    IF DISPATCHED          ++\n               REQFAIL=RET04,                  REQUEST FAILED         ++\n               QUIESC=EXIT,                    MATRIX SHUTTING DOWN   ++\n               NOTFND=EXIT,                           NOT RUNNING     ++\n               SOS=EXIT,                       SHORT ON STORAGE       ++\n               NOTSUP=BUG,                     INVALID REQUEST        ++\n               LOCKED=BBBBB,                   BUSY                   ++\n               NOTINIT=BBBBB,                  NOT WRITEY YET         ++\n               ERROR=EXIT\n*\nBBBBB    CALLMXWR PREFIX=MX,PARM=PLST@,                               ++\n               TOKEN=TOKEN,             TOKEN FROM CONNECT            ++\n               DEST=TOADDR,                                           ++\n               WRTLEN=1999,                                           ++\n               FROMADDR=DATAAREA,                                     ++\n               SYNC=YES                 YES/NO(R?)\n         LTR   R15,R15                  CHECK RETURN CODE\n         BNZ   AAAAA                    NOT ZERO\n         B     EXIT\n*\n* THERE WAS AN ERROR HANDLING REQUEST\n*\nRET04    DS    0H\n         CLI   MXRCRETX,C' '          DID SERVER RETURN A MESSAGE\n         BE    ERRMSG                 NO\n         MVC   WTOMSG(WMSG1L),WMSG1   INITIALIZE MESSAGE\n         MVC   WTOMSG+15(L'MXRCRETX),MXRCRETX\n         WTO   MF=(E,WTOMSG)\n         B     EXIT\n*\nBUG      DS    0H\n         WTO   'ASMWRITE BUG IN APPLICATION'\n         B     EXIT\n*\nERRMSG   DS    0H\n         WTO   'ASMWRITE REQUEST FAILED'\n*\nEXIT     DS    0H\n         AEXIT\n*\nWMSG1    WTO  'ASMWRITE FAILED: 123456789012345678901234567890123456789X\n               0',MF=L\nWMSG1L   EQU  *-WMSG1\n*\n         ADYNAM\nPLST@    DS   D\n         SRUSPLST DSECT=NO,PREFIX=MX,LEN=MXMSGLEN\nTOKEN    DS   D\nTOADDR   DS   D\nWTOMSG   WTO  'ASMWRITE FAILED: 123456789012345678901234567890123456789X\n               0',MF=L\nDATAAREA DS   CL4000\n         ADYNEND\n*\n         MXREQCOD PREFIX=MXUS\n         MXMSGREC DSECT=YES,PREFIX=MX\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COBEXMP": {"ttr": 4358, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x19\\x00\\x98(\\x9f\\x01\\x03\\t\\x1f\"Y\\x01\\xa7\\x00\\xe4\\x01\\xa7\\xd7\\xf3\\xf9\\xf0@@@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "1998-10-16T00:00:00", "modifydate": "2003-04-01T22:59:19", "lines": 423, "newlines": 228, "modlines": 423, "user": "P390"}, "text": "         CBL LIB\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. 'COBEXMPL'.\n      *\n      * THIS PROGRAM ILLUSTRATES EXAMPLES OF MATRIX API CALLS\n      * THIS PROGRAM DOES NOT PERFORM ANY USEFUL APPLICATIONS\n      * FUNCTION AND DOES NOT NECESARILY ILLUSTRATE GOOD PROGRAMMING\n      * PRACTICE.\n      *\n      * AUTHOR: SIMON SPANCHAK\n      *\n      *\n       ENVIRONMENT DIVISION.\n       CONFIGURATION SECTION.\n      ***************** ALTERED **************************************\n       SOURCE-COMPUTER. IBM-370.\n       OBJECT-COMPUTER. IBM-370.\n      ***************** ALTERED - END ********************************\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-EYE-CATCHER.\n           05  WS-PROGRAM-NAME             PIC X(08) VALUE 'MATRIX'.\n           05  FILLER                      PIC X(24)\n               VALUE ' WORKING-STORAGE'.\n       01  WS-MESSAGE                      PIC X(40).\n       01  WS-SAVE-KEY                     PIC 9(9) COMP.\n       01 TOKEN-1                     PIC X(20).\n       01 TOKEN-2                     PIC X(20).\n       01 WS-DSNAME1                  PIC X(44).\n       01 FOUND-ADDR                  PIC 9(9).\n       01 WS-DATA-AREA                PIC X(200)\n               VALUE 'M1M2M3M4M5M6M8M9M0OIQUEUFDJHXUJE123456M70000'.\n      *\n      * COPY MATRIX INTERFACE PLIST\n      *\n             COPY MXPLIST.\n      *\n      * ===========================\n      *\n      *\n      * LINKAGE SECTION\n      *\n       LINKAGE SECTION.\n       EJECT\n      *\n      *    PROCEDURE DIVISION\n      *\n       PROCEDURE DIVISION.\n\n       0000-MAINLINE.\n      *\n      *    OBTAIN AN ACCESS TOKEN FOR MATRIX\n      *\n           DISPLAY 'ACCESS MATRIX'.\n           MOVE MATRIX-ACCESS TO MATRIX-REQUEST.\n           MOVE LOW-VALUES    TO MATRIX-ACCESS-TOKEN.\n           MOVE 'MTRX'        TO MATRIX-ACCESS-NAME.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE NOT = 0\n           THEN PERFORM 9000-MESSAGE\n                GOBACK.\n      *\n      *    CREATE WORK AREAS\n      *\n           DISPLAY 'CREATE A WORK AREA VWA1'.\n           MOVE MATRIX-CREATE-WA TO MATRIX-REQUEST.\n           MOVE 'VWA1'        TO MATRIX-CREATEWA-NAME.\n           MOVE 3200000000    TO MATRIX-CREATEWA-SIZE.\n           MOVE MATRIX-SYNC   TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n           DISPLAY 'CREATE WORK AREA VWA2'.\n           MOVE MATRIX-CREATE-WA TO MATRIX-REQUEST.\n           MOVE 'VWA2'        TO MATRIX-CREATEWA-NAME.\n           MOVE 3200000       TO MATRIX-CREATEWA-SIZE.\n           MOVE MATRIX-SYNC   TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    COPY DATA FROM WORKSPACE 1 TO OTHER SPACE\n      *\n           DISPLAY 'COPY DATA FROM WORKSPACE 1 TO WA2'.\n           MOVE MATRIX-COPY-WA TO MATRIX-REQUEST.\n           MOVE 'VWA1' TO MATRIX-COPY-FROM-WANAME.\n           MOVE 'VWA2' TO MATRIX-COPY-TO-WANAME.\n           MOVE 50000  TO MATRIX-COPY-LENGTH.\n           MOVE 0      TO MATRIX-COPY-FROM-ADDRESS.\n           MOVE 0      TO MATRIX-COPY-TO-ADDRESS.\n           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    CONNECT TO WORKSPACE2\n      *\n           DISPLAY 'CONNECT TO WORKSPACE2 '.\n           MOVE MATRIX-CONNECT-WA TO MATRIX-REQUEST.\n           MOVE 'VWA2'      TO MATRIX-CONNECT-WA-NAME.\n           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n                MOVE MATRIX-RETURN-CONNECT-TOKEN TO TOKEN-2\n           ELSE PERFORM 9000-MESSAGE\n                GO TO 1000-DELETE-ALL.\n      *\n      *    WRITE TO WORKSPACE\n      *\n           DISPLAY 'WRITE SYNC TO WORKSPACE 2 '.\n           MOVE MATRIX-WRITE-WA TO MATRIX-REQUEST.\n           MOVE TOKEN-2 TO MATRIX-WRITE-TOKEN.\n           MOVE 100     TO MATRIX-WRITE-TO-ADDRESS.\n           MOVE 200     TO MATRIX-WRITE-LENGTH.\n           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG WS-DATA-AREA.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n           DISPLAY 'WRITE ASYNCH TO WORKSPACE 2 '.\n           MOVE MATRIX-WRITE-WA TO MATRIX-REQUEST.\n           MOVE TOKEN-2 TO MATRIX-WRITE-TOKEN.\n           MOVE 100     TO MATRIX-WRITE-TO-ADDRESS.\n           MOVE 200     TO MATRIX-WRITE-LENGTH.\n           MOVE MATRIX-ASYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG WS-DATA-AREA.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    READ FROM WORKSPACE2\n      *\n           DISPLAY 'READ FROM WORKSPACE2 '.\n           MOVE MATRIX-READ-WA TO MATRIX-REQUEST.\n           MOVE TOKEN-2 TO MATRIX-READ-TOKEN.\n           MOVE 100     TO MATRIX-READ-FROM-ADDRESS.\n           MOVE 200     TO MATRIX-READ-LENGTH.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG WS-DATA-AREA.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n                DISPLAY MATRIX-ACTUAL-LEN-READ\n                DISPLAY WS-DATA-AREA\n           ELSE PERFORM 9000-MESSAGE.\n      *\n           MOVE 'DEV.SPACE.AAAA' TO WS-DSNAME1.\n      *\n      *    SAVE DATA IN WORKSPACE 2 TO A FILE\n      *\n           DISPLAY 'SAVE DATA FROM WORKSPACE 2 TO A FILE'.\n           MOVE MATRIX-SAVE-WA TO MATRIX-REQUEST.\n           MOVE 'VWA2' TO MATRIX-SAVE-WA-NAME.\n           MOVE WS-DSNAME1 TO MATRIX-SAVE-DSNAME.\n           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      * SET RECORD SIZE IN A WORKAREA\n      *\n           DISPLAY 'SET WORKSPACE RECORD SIZE'.\n           MOVE  MATRIX-SET-RECSIZE TO MATRIX-REQUEST.\n           MOVE TOKEN-2 TO MATRIX-SET-RECSIZE-TOKEN.\n           MOVE 80      TO MATRIX-NEW-REC-SIZE.\n           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    LOAD DATA INTO A WORKSPACE 1 FROM FILE\n      *\n           DISPLAY 'LOAD DATA INTO WORKSPACE 1 '.\n           MOVE MATRIX-LOAD-WA TO MATRIX-REQUEST.\n           MOVE 'VWA1' TO MATRIX-LOAD-WA-NAME.\n           MOVE WS-DSNAME1 TO MATRIX-LOAD-WA-DSNAME.\n           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    ASSOCIATE A WORK AREA WITH A DATASET\n      *\n           DISPLAY 'ASSOCIATE WORKAREA'.\n           MOVE MATRIX-FILEASSOCIATE  TO MATRIX-REQUEST.\n           MOVE MATRIX-ASSOCIATE-WA  TO MATRIX-ASSOC-TYPE.\n           MOVE 'VWA2' TO MATRIX-ASSOC-WA-NAME.\n           MOVE WS-DSNAME1 TO MATRIX-ASSOC-DSNAME.\n           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    SEARCH IN WORKSPACE\n      *\n           DISPLAY 'SEARCH IN WORKSPACE 2 '.\n           MOVE MATRIX-SEARCH-WA TO MATRIX-REQUEST.\n           MOVE TOKEN-2 TO MATRIX-SEARCH-TOKEN.\n           MOVE LOW-VALUES TO MATRIX-SEARCH-WA-NAME.\n           MOVE 100    TO MATRIX-SEARCH-START-ADDRESS.\n           MOVE 150000 TO MATRIX-SEARCH-SCAN-LENGTH.\n           MOVE 2      TO MATRIX-SEARCH-DATA-LENGTH.\n           MOVE 'M7'   TO MATRIX-SEARCH-DATA.\n           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG OMITTED.\n           IF RETURN-CODE = 0\n           THEN MOVE MATRIX-RETURN-FOUND-ADDRESS TO FOUND-ADDR\n                DISPLAY 'STUFF FOUND AT ', FOUND-ADDR\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      * ALTERNATE SEARCH IN WORKSPACE\n      *\n           DISPLAY 'ALTERNATE SEARCH IN WORKSPACE 2 '.\n           MOVE MATRIX-SEARCH-WA TO MATRIX-REQUEST.\n           MOVE 'VWA2' TO MATRIX-SEARCH-WA-NAME.\n           MOVE 100    TO MATRIX-SEARCH-START-ADDRESS.\n           MOVE 150000 TO MATRIX-SEARCH-SCAN-LENGTH.\n           MOVE 2      TO MATRIX-SEARCH-DATA-LENGTH.\n           MOVE 'M7'   TO MATRIX-SEARCH-DATA.\n           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN MOVE MATRIX-RETURN-FOUND-ADDRESS TO FOUND-ADDR\n                DISPLAY 'STUFF FOUND AT ', FOUND-ADDR\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    CONNECT TO WORKSPACE1\n      *\n           DISPLAY 'CONNECT TO WORKSPACE1 '.\n           MOVE MATRIX-CONNECT-WA TO MATRIX-REQUEST.\n           MOVE 'VWA1'      TO MATRIX-CONNECT-WA-NAME.\n           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n                MOVE MATRIX-RETURN-CONNECT-TOKEN TO TOKEN-1\n           ELSE PERFORM 9000-MESSAGE\n                GO TO 1000-DELETE-ALL.\n      *\n      *    LOCK A WORKSPACE\n      *\n           DISPLAY 'LOCK WORKAREA'.\n           MOVE MATRIX-LOCK-WA  TO MATRIX-REQUEST.\n           MOVE TOKEN-1 TO MATRIX-LOCK-TOKEN.\n           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN MOVE MATRIX-RETURN-KEY TO WS-SAVE-KEY\n                DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      * ADJUST SIZE OF WORK SPACE\n      *\n           DISPLAY 'ADJUST SIZE OF WORKSPACE 1'.\n           MOVE  MATRIX-SET-VWASIZE TO MATRIX-REQUEST.\n           MOVE 'VWA1'    TO MATRIX-ADJUST-NAME.\n           MOVE 3200000 TO MATRIX-ADJUST-SIZE.\n           MOVE WS-SAVE-KEY TO MATRIX-ADJUST-KEY.\n           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    UNLOCK A WORKSPACE\n      *\n           DISPLAY 'UNLOCK WORKAREA'.\n           MOVE MATRIX-UNLOCK-WA  TO MATRIX-REQUEST.\n           MOVE TOKEN-1 TO MATRIX-LOCK-TOKEN.\n           MOVE WS-SAVE-KEY TO MATRIX-LOCK-KEY.\n           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG WS-DATA-AREA.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    DISASSOCIATE A WORK AREA FROM A DATASET\n      *\n           DISPLAY 'DISASSOCIATE WORKAREA'.\n           MOVE MATRIX-FILEASSOCIATE  TO MATRIX-REQUEST.\n           MOVE MATRIX-DISASSOCIATE-WA  TO MATRIX-ASSOC-TYPE.\n           MOVE 'VWA2' TO MATRIX-ASSOC-WA-NAME.\n           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    DISCONNECT FROM WORK SPACE2\n      *\n           DISPLAY 'DISCONNECT FROM WORKSPACE2 '.\n           MOVE MATRIX-DISCONNECT-WA TO MATRIX-REQUEST.\n           MOVE TOKEN-2 TO MATRIX-DISCONNECT-TOKEN.\n           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG OMITTED.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    EXCHANGE WORK SPACES\n      *\n           DISPLAY 'EXCHANGE WORKSPACES'.\n           MOVE MATRIX-EXCHANGE      TO MATRIX-REQUEST.\n           MOVE 'VWA1'    TO MATRIX-EXCHANGE-SOURCE-NAME.\n           MOVE 'VWA2'    TO MATRIX-EXCHANGE-TARGET-NAME.\n           MOVE MATRIX-FORCE TO MATRIX-EXCHANGE-INUSE.\n           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    POST EVENT\n      *\n           DISPLAY 'POST EVENT'.\n           MOVE MATRIX-POST-EVENT TO MATRIX-REQUEST.\n           MOVE 'AAAAAAAA' TO MATRIX-EVENT-NAME.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    WAIT ON EVENT\n      *\n           DISPLAY 'WAIT ON EVENT'.\n           MOVE MATRIX-WAIT-EVENT TO MATRIX-REQUEST.\n           MOVE 'AAAAAAAA' TO MATRIX-EVENT-NAME.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    RESET EVENT\n      *\n           DISPLAY 'RESET EVENT'.\n           MOVE MATRIX-RESET-EVENT TO MATRIX-REQUEST.\n           MOVE 'AAAAAAAA' TO MATRIX-EVENT-NAME.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    DELETE EVENT\n      *\n           DISPLAY 'DELETE EVENT'.\n           MOVE MATRIX-DELETE-EVENT TO MATRIX-REQUEST.\n           MOVE 'AAAAAAAA' TO MATRIX-EVENT-NAME.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    DELETE WA1\n      *\n       1000-DELETE-ALL.\n           DISPLAY 'DELETE WORKSPACE VWA1'.\n           MOVE MATRIX-DELETE-WA TO MATRIX-REQUEST.\n           MOVE 'VWA1' TO MATRIX-DELETEWA-NAME.\n           MOVE MATRIX-FORCE TO MATRIX-DELETEWA-FORCE.\n           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    DELETE WA2\n      *\n           DISPLAY 'DELETE WORKSPACE VWA2'.\n           MOVE MATRIX-DELETE-WA TO MATRIX-REQUEST.\n           MOVE 'VWA2' TO MATRIX-DELETEWA-NAME.\n           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *\n       1000-EXIT.\n           GOBACK.\n      *\n      ******************************************************************\n      * DISPLAY RETURN CODE VALUES                                     *\n      ******************************************************************\n      *\n       9000-MESSAGE.\n           IF RETURN-CODE = 4\n                MOVE 'REQUEST FAILED' TO WS-MESSAGE\n                DISPLAY WS-MESSAGE\n                MOVE  MATRIX-RETURN-MESSAGE TO WS-MESSAGE\n              ELSE IF RETURN-CODE = 8\n                 MOVE 'MATRIX IS QUIESCING' TO WS-MESSAGE\n              ELSE IF RETURN-CODE = 12\n                 MOVE 'MATRIX NOT FOUND' TO WS-MESSAGE\n              ELSE IF RETURN-CODE = 16\n                 MOVE 'INSUFFICIENT STORAGE' TO WS-MESSAGE\n              ELSE IF RETURN-CODE = 20\n                 MOVE 'REQUEST NOT SUPPORTED' TO WS-MESSAGE\n              ELSE IF RETURN-CODE = 24\n                 MOVE 'APPLICATION IS LOCKED' TO WS-MESSAGE\n              ELSE IF RETURN-CODE = 28\n                 MOVE 'APPLICATION NOT INITIALIZED' TO WS-MESSAGE\n              ELSE IF RETURN-CODE = 32\n                 MOVE 'ERROR IN REQUEST' TO WS-MESSAGE\n              ELSE IF RETURN-CODE = 36\n                 MOVE 'REQUEST DISPATCHED' TO WS-MESSAGE.\n\n           DISPLAY WS-MESSAGE.\n       9000-EXIT.\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COBTBL": {"ttr": 5892, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1e\\x00\\x12\\x00\\x992?\\x01\\x03\\t?\\x07G\\x01C\\x01\\x9e\\x00\\xc3\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.30", "flags": 0, "createdate": "1999-11-19T00:00:00", "modifydate": "2003-04-03T07:47:12", "lines": 323, "newlines": 414, "modlines": 195, "user": "IBMUSER"}, "text": "         CBL LIB\n       IDENTIFICATION DIVISION.\n       PROGRAM-ID. 'COBTBL'.\n      *\n      * THIS PROGRAM ILLUSTRATES EXAMPLES OF MATRIX API CALLS\n      * THIS PROGRAM DOES NOT PERFORM ANY USEFUL APPLICATIONS\n      * FUNCTION AND DOES NOT NECESARILY ILLUSTRATE GOOD PROGRAMMING\n      * PRACTICE.\n      *\n       ENVIRONMENT DIVISION.\n       CONFIGURATION SECTION.\n      ***************** ALTERED **************************************\n       SOURCE-COMPUTER. IBM-370.\n       OBJECT-COMPUTER. IBM-370.\n      ***************** ALTERED - END ********************************\n       INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n\n       DATA DIVISION.\n       FILE SECTION.\n\n       WORKING-STORAGE SECTION.\n\n       01  WS-EYE-CATCHER.\n           05  WS-PROGRAM-NAME             PIC X(08) VALUE 'MATRIX'.\n           05  FILLER                      PIC X(24)\n               VALUE ' WORKING-STORAGE'.\n       01  WS-MESSAGE                      PIC X(64).\n       01  WS-SAVE-KEY                     PIC 9(9) COMP.\n      *\n      * COPY MATRIX INTERFACE PLIST\n      *\n             COPY MXPLIST.\n      *\n      * ===========================\n      *\n       01 TABLTOK-1                   PIC X(4).\n       01 TABLTOK-2                   PIC X(4).\n       01 WS-DSNAME1                  PIC X(44).\n       01 FOUND-ADDR                  PIC 9(9).\n       01 WS-DATA-AREA                PIC X(200).\n       01 TABLE-COORD.\n           03 COORD-LIST              OCCURS 3 PIC 9(9) COMP.\n      *\n      * LINKAGE SECTION\n      *\n       LINKAGE SECTION.\n      *\n      *    PROCEDURE DIVISION\n      *\n       EJECT\n       PROCEDURE DIVISION.\n\n       0000-MAINLINE.\n      *\n      *    OBTAIN AN ACCESS TOKEN FOR MATRIX\n      *\n           DISPLAY 'ACCESS MATRIX'.\n           MOVE MATRIX-ACCESS TO MATRIX-REQUEST.\n           MOVE 'MTRX' TO MATRIX-ACCESS-NAME.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE NOT= 0\n           THEN PERFORM 9000-MESSAGE\n                GOBACK.\n      *\n      *    CREATE A WORK AREA\n      *\n           DISPLAY 'CREATE DATA WORK AREA DIV1'.\n           MOVE MATRIX-CREATE-WA TO MATRIX-REQUEST.\n           MOVE 'DIV1' TO MATRIX-CREATEWA-NAME.\n           MOVE 32000000   TO MATRIX-CREATEWA-SIZE.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n           DISPLAY 'CREATE INDEX WORK AREA DIV2'.\n           MOVE MATRIX-CREATE-WA TO MATRIX-REQUEST.\n           MOVE \"DIV2\" TO MATRIX-CREATEWA-NAME.\n           MOVE 320000   TO MATRIX-CREATEWA-SIZE.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n           DISPLAY 'CREATE DATA WORK AREA DIV3'.\n           MOVE MATRIX-CREATE-WA TO MATRIX-REQUEST.\n           MOVE \"DIV3\" TO MATRIX-CREATEWA-NAME.\n           MOVE 2000000   TO MATRIX-CREATEWA-SIZE.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n           DISPLAY 'CREATE A TABLE FROM DIV1 AND DIV2'\n           MOVE MATRIX-CREATE-TABLE TO MATRIX-REQUEST.\n           MOVE 'TBL1' TO  MATRIX-TABLE-NAME.\n           MOVE 3 TO MATRIX-TABLE-NUM-DIMS.\n           MOVE 100  TO MATRIX-TABLE-DIMENSIONS(1).\n           MOVE 20  TO MATRIX-TABLE-DIMENSIONS(2).\n           MOVE 176 TO MATRIX-TABLE-DIMENSIONS(3).\n           MOVE \"DIV2\" TO MATRIX-TABLE-INDEX-NAME.\n           MOVE \"DIV1\" TO MATRIX-TABLE-DATA-NAME.\n           MOVE ZERO   TO MATRIX-TABLE-CELL-SIZE.\n           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n*\n           DISPLAY 'CREATE A FIXED LEN TABLE'\n           MOVE MATRIX-CREATE-TABLE TO MATRIX-REQUEST.\n           MOVE 'TBL2' TO  MATRIX-TABLE-NAME.\n           MOVE 3 TO MATRIX-TABLE-NUM-DIMS.\n           MOVE 100  TO MATRIX-TABLE-DIMENSIONS(1).\n           MOVE 20  TO MATRIX-TABLE-DIMENSIONS(2).\n           MOVE 176 TO MATRIX-TABLE-DIMENSIONS(3).\n           MOVE SPACES TO MATRIX-TABLE-INDEX-NAME.\n           MOVE \"DIV3\" TO MATRIX-TABLE-DATA-NAME.\n           MOVE 133    TO MATRIX-TABLE-CELL-SIZE.\n           MOVE MATRIX-SYNC TO MATRIX-REQUEST-FLAG.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      * CONNECT TO A TABLE\n      *\n           DISPLAY 'CONNECT TO TABLE 1'.\n           MOVE 'TBL1' TO MATRIX-CONNECT-TABLE-NAME.\n           CALL 'MXTABLEC'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN MOVE MATRIX-RETURN-TABLE-TOKEN TO TABLTOK-1\n                DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    ALLOCATE A CELL  (1,4,7)\n      *\n           DISPLAY 'ALLOCATE A CELL IN TABLE 1'\n           MOVE TABLTOK-1 TO MATRIX-ALLOC-TABLE-TOKEN.\n           MOVE 200       TO MATRIX-ALLOC-CELL-SIZE.\n      *\n           MOVE 1      TO COORD-LIST(1).\n           MOVE 4      TO COORD-LIST(2).\n           MOVE 7      TO COORD-LIST(3).\n           CALL 'MXTABLEA'  USING MATRIX-REQUEST-MSG TABLE-COORD.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    READ DATA FROM TABLE\n      *\n           DISPLAY 'READ DATA FROM TABLE 1'\n           MOVE TABLTOK-1 TO MATRIX-READ-TABLE-TOKEN.\n           MOVE 1      TO COORD-LIST(1).\n           MOVE 4      TO COORD-LIST(2).\n           MOVE 7      TO COORD-LIST(3).\n           CALL 'MXTABLER'  USING MATRIX-REQUEST-MSG WS-DATA-AREA\n                                  TABLE-COORD.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n                DISPLAY WS-DATA-AREA\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    WRITE DATA TO TABLE\n      *\n           DISPLAY 'WRITE DATA TO TABLE 1'\n           MOVE TABLTOK-1 TO MATRIX-WRITE-TABLE-TOKEN.\n           MOVE 1      TO COORD-LIST(1).\n           MOVE 4      TO COORD-LIST(2).\n           MOVE 7      TO COORD-LIST(3).\n           CALL 'MXTABLEW'  USING MATRIX-REQUEST-MSG WS-DATA-AREA\n                                  TABLE-COORD.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    DISCONNECT FROM TABLE 1\n      *\n           DISPLAY 'DISCONNECT FROM TABLE 1'.\n           MOVE TABLTOK-1 TO MATRIX-DISCON-TABLE-TOKEN.\n           CALL 'MXTABLED'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      * CONNECT TO A TABLE\n      *\n           DISPLAY 'CONNECT TO TABLE 2'.\n           MOVE 'TBL2' TO MATRIX-CONNECT-TABLE-NAME.\n           CALL 'MXTABLEC'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN MOVE MATRIX-RETURN-TABLE-TOKEN TO TABLTOK-2\n                DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    READ DATA FROM TABLE\n      *\n           DISPLAY 'READ DATA FROM TABLE 2'\n           MOVE TABLTOK-2 TO MATRIX-READ-TABLE-TOKEN.\n           MOVE 1      TO COORD-LIST(1).\n           MOVE 4      TO COORD-LIST(2).\n           MOVE 7      TO COORD-LIST(3).\n           CALL 'MXTABLER'  USING MATRIX-REQUEST-MSG WS-DATA-AREA\n                                  TABLE-COORD.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n                DISPLAY WS-DATA-AREA\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    WRITE DATA TO TABLE\n      *\n           DISPLAY 'WRITE DATA TO TABLE 2'\n           MOVE TABLTOK-2 TO MATRIX-WRITE-TABLE-TOKEN.\n           MOVE 2      TO COORD-LIST(1).\n           MOVE 3      TO COORD-LIST(2).\n           MOVE 6      TO COORD-LIST(3).\n           CALL 'MXTABLEW'  USING MATRIX-REQUEST-MSG WS-DATA-AREA\n                                  TABLE-COORD.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    TRY ALLOCATE A CELL IN FIXED LEN TABLE\n      *\n           DISPLAY 'TRY TO ALLOCATE A CELL IN TABLE 2'\n           MOVE TABLTOK-2 TO MATRIX-ALLOC-TABLE-TOKEN.\n           MOVE 200       TO MATRIX-ALLOC-CELL-SIZE.\n      *\n           MOVE 2      TO COORD-LIST(1).\n           MOVE 3      TO COORD-LIST(2).\n           MOVE 2      TO COORD-LIST(3).\n           CALL 'MXTABLEA'  USING MATRIX-REQUEST-MSG TABLE-COORD.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    DISCONNECT FROM TABLE 2\n      *\n      *    DISPLAY 'DISCONNECT FROM TABLE 2'.\n      *    MOVE TABLTOK-2 TO MATRIX-DISCON-TABLE-TOKEN.\n      *    CALL 'MXTABLED'  USING MATRIX-REQUEST-MSG.\n      *    IF RETURN-CODE = 0\n      *    THEN DISPLAY 'REQUEST SUCCESSFUL'\n      *    ELSE PERFORM 9000-MESSAGE.\n      *\n      *    LOAD TABLE FROM FILES\n      *\n           DISPLAY 'LOAD TABLE TBX1 FROM P390'\n           MOVE MATRIX-LOAD-TABLE TO MATRIX-REQUEST.\n           MOVE 'TBX1'    TO MATRIX-LOAD-TABLE-NAME .\n           MOVE 'P390'    TO MATRIX-LOAD-TABLE-DSNAME.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    SAVE TABLE TO FILES\n      *\n           DISPLAY 'SAVE TABLE TBX1 TO SIMO'\n           MOVE MATRIX-SAVE-TABLE TO MATRIX-REQUEST.\n           MOVE 'TBX1'    TO MATRIX-SAVE-TABLE-NAME .\n           MOVE 'SIMO'    TO MATRIX-SAVE-TABLE-DSNAME.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      * DELETE TABLE 2 WITH FORCE BECAUSE STILL CONNECTED\n      *\n           DISPLAY 'DELETE TABLE 2 USING FORCE'.\n           MOVE MATRIX-DELETE-TABLE TO MATRIX-REQUEST.\n           MOVE 'TBL2' TO MATRIX-DELETE-TABLE-NAME.\n           MOVE MATRIX-FORCE TO MATRIX-DELETE-TABLE-FORC.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *    DELETE TABLE TBL1 WITHOUT FORCE BECAUSE I DISCONNECTED\n      *\n           DISPLAY 'DELETE TABLE 1 WITH NO FORCE'.\n           MOVE MATRIX-DELETE-TABLE TO MATRIX-REQUEST.\n           MOVE 'TBL1' TO MATRIX-DELETE-TABLE-NAME.\n           MOVE MATRIX-NO-FORCE TO MATRIX-DELETE-TABLE-FORC.\n           CALL 'MXSTUB'  USING MATRIX-REQUEST-MSG.\n           IF RETURN-CODE = 0\n           THEN DISPLAY 'REQUEST SUCCESSFUL'\n           ELSE PERFORM 9000-MESSAGE.\n      *\n      *\n       1000-EXIT.\n           GOBACK.\n      *\n      ******************************************************************\n      * DISPLAY RETURN CODE VALUES                                     *\n      ******************************************************************\n      *\n       9000-MESSAGE.\n           IF RETURN-CODE = 4\n                MOVE 'REQUEST FAILED' TO WS-MESSAGE\n                DISPLAY WS-MESSAGE\n                MOVE  MATRIX-RETURN-MESSAGE TO WS-MESSAGE\n              ELSE IF RETURN-CODE = 8\n                 MOVE 'MATRIX IS QUIESCING' TO WS-MESSAGE\n              ELSE IF RETURN-CODE = 12\n                 MOVE 'MATRIX NOT FOUND' TO WS-MESSAGE\n              ELSE IF RETURN-CODE = 16\n                 MOVE 'INSUFFICIENT STORAGE' TO WS-MESSAGE\n              ELSE IF RETURN-CODE = 20\n                 MOVE 'REQUEST NOT SUPPORTED' TO WS-MESSAGE\n              ELSE IF RETURN-CODE = 24\n                 MOVE 'APPLICATION IS LOCKED' TO WS-MESSAGE\n              ELSE IF RETURN-CODE = 28\n                 MOVE 'APPLICATION NOT INITIALIZED' TO WS-MESSAGE\n              ELSE IF RETURN-CODE = 32\n                 MOVE 'ERROR IN REQUEST' TO WS-MESSAGE\n              ELSE IF RETURN-CODE = 36\n                 MOVE 'REQUEST DISPATCHED' TO WS-MESSAGE.\n\n           DISPLAY WS-MESSAGE.\n       9000-EXIT.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TESTOPMX": {"ttr": 6667, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00S\\x01\\x00\\x16o\\x01\\x03\\x10\\x1f\\x05E\\x00\\x9e\\x00J\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "2000-06-14T00:00:00", "modifydate": "2003-04-11T05:45:53", "lines": 158, "newlines": 74, "modlines": 0, "user": "IBMUSER"}, "text": "*\n* THIS PROGRAM DEMONSTRATES THE USE OF OPENMX\n* OPENMX IS USED IN PLACE OF A STANDARD OPEN MACRO\n* IT CRETAES A SHARED DATASPACE AND LOADS THE FILE INTO IT\n* THEN READS THE RECORDS FROM THE DATASPACE\n* WHEN THE FILE IS CLOSED THE DATASPACE WITH THE DATA IN IT\n* ARE LEFT UNDER MATRIX CONTROL, SO THAT NEXT TIME FILE IS ACCESSED\n* IT IS ACCESSED IN THE DATA SPACE AT HIGH SPEED.\n* THE READ AND GET MACROS ARE USED AS STANDARD AND ONLY THE OPEN\n* AND CLOSE MACROS NEED TO BE REPLACED\n*\nTESTOPMX AENTRY\n*\n* OBTAIN STORAGE FOR DCB AND I/O WORK AREAS\n*\n         LA    R2,IOBLKL       LENGTH OF IO BLOCK\n         STORAGE OBTAIN,LENGTH=(R2),LOC=BELOW,COND=YES\n         LTR   R15,R15\n         BNZ   RETN12          SOS\n*\n         LR    R3,R1            STORAGE FOR IO BLOK\n         MVC   0(IOBLKL,R3),IOBLK\n         USING IHADCB,R3\n*\n*  FORMAT A DCB AND OPEN THE FILE FOR INPUT\n*\nOPENFILE DS    0H\n         MVC   DCBDDNAM,DDNAME      THIS IS THE DDNAME\n         MVI   DCBMACR1,DCBMRGET+DCBMRLCG MAKE IT GET LOCATE\n         MVI   DCBMACR2,0           MAKE IT GET LOCATE\n*\n         LA    R1,EOF1              AT END OF FILE GO HERE\n         O     R1,=X'80000000'      IN 31 BIT ADDRESSING MODE\n         ST    R1,SSIOEOF@-IOBLK(R3)\n         LA    R1,SSIOEOF-IOBLK(R3) EOF ADDR\n         STCM  R1,7,DCBEODA         END OF DATA ADDR\n*\n* OPEN THE DCB POINTED AT BY R3\n* NORMALLY DONE WITH AN OPEN MACRO AS COMMENTED HERE\n*\n*\n*        LA    R2,SSIOOPN-IOBLK(R3)  @ OPEN LIST\n*        XC    0(SSIOOPNL,R2),0(R2)\n*        MVI   0(R2),X'84'           31 BIT OPEN\n*        OPEN ((R3),INPUT),MF=(E,(R2)),MODE=31  OPEN FILE\n*\n* INSTEAD WE USE OPENMX\n*\n         OPENMX  PLIST=OPMXPLST,       OPEN FILE IN MATRIX            ++\n               DCB=(R3),                                              ++\n               SYSNAME=CL4'MTRX',      SERVER NAME                    ++\n               VWA=CL4'TST1'           VIRTUAL WORK AREA NAME\n*\n         LTR   R15,R15\n         BNZ   OPNFAIL\n         TM    DCBOFLGS,DCBOFOPN    IS IT NOW OPEN?\n         BNO   OPNFAIL              NO ERROR\n*\n* READ THE RECORDS FROM THE FILE\n*\n         XC    RECCNT,RECCNT\n*\n* SEE THAT THE DATA ACCESS MACRO'S ARE UNCHANGED\n*\nREADLOOP DS    0H\n         GET   (R3)                 READ THE RECORD\n         LH    R4,DCBLRECL          RECORD LENGTH READ\n         LR    R7,R1                @ INPUT BUFFER\n*\n*        GET   (R3),(R7)            READ THE RECORD\n*\n         LA    R0,1\n         L     R1,RECCNT\n         ALR   R1,R0                LENGTH OF RECORD\n         ST    R1,RECCNT\n*\n         B     READLOOP             CONTINUE READING\n*\n* DISPLAY A MESSAGE ABOUT NUMBER OF RECORDS READ FROM MATRIX\n*\nEOF1     DS    0H\n         MVC   WTOWORK(WTOWORKL),WTOTEXT\n         L     R0,RECCNT\n         CVD   R0,DWDWORK\n         UNPK  WTOWORK+27(8),DWDWORK\n         OI    WTOWORK+34,X'F0'\n         WTO   MF=(E,WTOWORK)\n*\n         SR    R5,R5               SET RETURN CODE\nEOF      DS    0H\n         WTO 'END OF FILE'\n*\n* CLOSE THE FILE. NORMALLY YOU USE A CLOSE MACRO\n* WE JUST REPLACE IT WITH A CLOSEMX\n*\n*        LA    R2,SSIOCLS-IOBLK(R3)  @ CLOSE LIST\n*        XC    0(SSIOCLSL,R2),0(R2)  CLEAR PLIST\n*        MVI   0(R2),X'80'           31 BIT CLOSE\n*        CLOSE ((R3)),MF=(E,(R2)),MODE=31  CLOSE FILE\n*\n         CLOSEMX DCB=(R3)\n*\n         DROP  R3\n*\n         LA    R2,IOBLKL       LENGTH OF IO BLOCK\n         STORAGE RELEASE,ADDR=(R3),LENGTH=(R2)\n         WTO 'TESTOPMX I/O BLOCK RELEASED'\n         LR    R15,R5            RETURN CODE\n         B     PROGXIT\n*\nRETN12   DS    0H\n         LA    R15,12            RET CODE\n         B     PROGXIT\nOPNFAIL  DS    0H\n         WTO   'OPEN FAILED'\n         LA    R15,4             RETURN CODE\nPROGXIT  DS    0H\n         AEXIT\n*\nDDNAME   DC    CL8'FILE1'\nWTOTEXT  DS    0F\n         WTO   'NUMBER OF RECORDS READ=********',MF=L\n*\nIOBLK    DS    0F\nSSIODCB  DCB   DSORG=PS,MACRF=(PL)\nSSIOCLS  CLOSE (,),MF=L,MODE=31            CLOSE LIST\nSSIOCLSL EQU   *-SSIOCLS\nSSIOOPN  OPEN  (,),MF=L,MODE=31            OPEN LIST\nSSIOOPNL EQU   *-SSIOOPN\n         DS    0F\n         PUSH  USING\nSSIOEOF  DS    0F                AT END OF FILE GO TO EOF\n         BASR  R15,0\n         USING *,R15\n         L     R14,SSIOEOF@      AT END OF FILE GO TO EOF\n         BSM   R0,R14            AT END OF FILE GO TO EOF\nSSIOEOF@ DC    F'0'              AT END OF FILE GO TO EOF\n         POP   USING\nIOBLKL   EQU   *-IOBLK\n*\n* ------------------------------------------------------------------- *\n*\n         ADYNAM\nDWDWORK  DS    D\nWTOWORK  DS    0F\n         WTO   'NUMBER OF RECORDS READ=********',MF=L\nWTOWORKL EQU   *-WTOWORK\nNUMBLOKS DS    F\nFILENUM  DS    F\nSEGNUM   DS    F\nRECADDR  DS    F\nRECCNT   DS    F\nOPMXPLST DS    3F\n*\n         ADYNEND\n*\n         DCBD  DSORG=PS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT622/CBT.V500.FILE622.PDS/SAMPSRCE.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT622/CBT.V500.FILE622.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}