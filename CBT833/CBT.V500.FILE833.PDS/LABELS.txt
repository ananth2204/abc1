/* REXX                                                              */
/*
   This service is designed to help you remember meaning of
   ISPF labels.
   Read LAIDUG file to learn more about this service.

   Call Format:

   LABELS ( |RESTORE|QUIT|CLOSE|DELETE)

   blank   - merging of labels will be performed.
   RESTORE - if you like to restore labels from table.
             Do not use this option when table is already opened.
   QUIT    - to finish with table without saving.
   CLOSE   - to save current table and finish with it.
   DELETE  - to delete old version of table.

   Author: Alexander I. Vasilenko,
           LUXOFT, Moscow.
           e-mail: ali_vas@mail.ru
                   Alexander.I.Vasilenko@boeing.com
*/
Address ISREDIT
'MACRO (PARMS) NOPROCESS'
/*Address ISPEXEC CONTROL ERRORS RETURN*/
Address ISPEXEC CONTROL ERRORS RETURN
  CALL ON ERROR
/*                                                                   */
upper parms
Fparm = subword(parms,1,1)
if Fparm = '?' then
  call Show_help

/*       Main line                                                   */
CmdList   = 'RESTORE QUIT CLOSE DELETE'
Label     = ''
Blank     = '.'
Line      = 0
Panel_end = 0
lversion  = 'V 1.0'  /* current version of this tools */
UserName  = UserID()
DSTable   = UserName".LAID.TABLES"
FileLabeled = 0 /* means that no one label was found in the file */
PurgeNeeded = 0    /* does purge process is needed     */
/*                 */
if words(parms) > 0 then do
  if pos(Fparm,CmdList) = 0 then
    call Show_help
end
Address ISREDIT
"(MYSTATE) = USER_STATE"  /* remember user status */
"(STYPE) = SESSION"     /* get know session type view or edit */
"(CMEM) = MEMBER"       /* get know edited member name */
"(LASTLN) = LINENUM .ZLAST" /* num of lines in file */
Address ISPEXEC
"VGET ZSCRMAXD"
if ZSCRMAXD > 40 then
  Lscr = 'LAID000'
else
  Lscr = 'LAID00S'
Call CheckDSTable
  /* check if at least one label exist in file */
Address ISREDIT "LOCATE FIRST LABEL"
if RC = 0 then do
  FileLabeled = 1
end
else
  FileLabeled = 0
Address ISREDIT "USER_STATE = (MYSTATE)"

Call ParseParms
"TBSORT "CMEM" FIELDS(LINE,N,A)"
"CONTROL DISPLAY LOCK"
"ADDPOP ROW(05) COLUMN(8)"
"TBTOP "CMEM
if PurgeNeeded then
  call PurgeTable  /* delete all strings with DEL = D */

do while ¬Panel_end
  call DisplayPanel
end
"REMPOP"

Address ISPEXEC "LIBDEF LAIDTBL"
if RC > 0 then call AllocError LIBDEF
exit 0
/*                    */
Show_help:
eoh = 0
do line = 3 until eoh
  if substr(sourceline(line + 1),1,2) = '*/' then
    eoh = 1
  say sourceline(line)
end
exit 0

DisplayPanel:
"TBDISPL "CMEM" PANEL("Lscr")"
if RC = 8 then
  Panel_end = 1
select
  when zcmd = 'QUIT' then do
    call CloseTable 'END'
  end
  when zcmd = 'CLOSE' then do
    call CloseTable 'CLOSE' 'LIBRARY(LAIDTBL)'
  end
  when cmd = 'E' then do
    "TBMOD "CMEM" SAVE(TLBL COMMENT)"
  end
  when cmd = 'D' then do
    "TBSCAN "CMEM" ARGLIST(LINE) CONDLIST(EQ)"
    "TBDELETE "CMEM
    Address ISREDIT "RES LAB "Tlbl Tlbl   /* remove label from file */
  end
  when cmd = 'L' then do
    Label = Tlbl
    Address ISREDIT 'LOCATE 'Label
    Panel_end = 1
  end
  when pfkpresd = 'PF03' then do
    Panel_end = 1
  end
  otherwise
end
cmd  = ''
zcmd = ''
RCode = 0
return

PrepareStat:
TLpanel_end = 0
"CONTROL DISPLAY LOCK"
"ADDPOP ROW(10) COLUMN(10)"
do until TLpanel_end
  call DisplayStat
end
return

DisplayStat:
"DISPLAY PANEL(LAIDTL0)"
select
  when cmd = 'D' then do /* we want to delete old table */
    cmd = ''
    "TBEND "CMEM
    "TBERASE "CMEM" LIBRARY(LAIDTBL)"
    TLpanel_end = 1
    exit
  end
  when cmd = 'S' then do /* applaing old table to edited file */
    cmd = ''
    TLpanel_end = 1
    return
  end
  when pfkpresd = 'PF03' then do
    cmd = ''
    TLpanel_end = 1
  end
  otherwise
    cmd = ''
end
return

CheckDSTable:
/* Check if user table data set exist */
x = LISTDSI("'"DSTable"'")
if x > 4 then do
  Address TSO "ALLOCATE FI(DINAM) DA('"DSTable"') NEW DSORG(PO)",
              "LRECL(80) BLKSIZE(8000) RECFM(F,B) DSNTYPE(LIBRARY)",
              "SPACE(10,30) TRACKS"
  if RC = 0 then
    Address TSO "FREE FI(DINAM)"
  else
    call AllocError ALLOC
end
Address ISPEXEC "LIBDEF LAIDTBL DATASET ID('"DSTable"') STACK"
if RC > 0 then call AllocError LIBDEF
call GetStat
return

GetStat:
"TBSTATS "CMEM" CDATE4D(CRDATE) UDATE4D(UPDATE) CTIME(CRTIME)",
              "UTIME(UPTIME) STATUS1(ST1) STATUS2(ST2) STATUS3(ST3)",
              "LIBRARY(LAIDTBL)"
if (ST2 = 1) then do                 /* table is not opend */
  if (ST1 = 1) then do                   /* table exist in lib */
    "TBOPEN "CMEM" WRITE LIBRARY(LAIDTBL)"
  end
  else do
    "TBCREATE "CMEM" WRITE KEYS(LINE TLBL) NAMES(DEL COMMENT) REPLACE"
    if RC > 4 then call Abend TBCREATE
  end
end
return

CloseTable:
arg op trg /* op may be END, CLOSE or ERASE */
Address ISPEXEC "TB"||op CMEM trg
Address ISPEXEC "LIBDEF LAIDTBL"
if RC > 0 then call AllocError LIBDEF
call OperWarn
exit 0

RestoreLabels:
/* Tlbl - label is got from table */
if ST2 = 1 then do  /* table is not open in this logical screen */
  call GetStat  /* to open table if it is not opend yet */
end
do Line = 1 to LastLn
  "TBTOP "CMEM
  "TBSCAN "CMEM" ARGLIST(LINE) CONDLIST(EQ)"
  if RC = 0 then
    Address ISREDIT "LABEL "line" = "Tlbl 0 /* set label */
end
return

MergeLabels:
do xLine = 1 to LastLn
  Address ISREDIT '(XLAB,VAR2) = LABEL 'xLine /* ask label */
  call FindLine xLine
  if LineExist then do
    if iLab ¬= xLab then do
      if xLab ¬= '' then do
/* We must change old label to new one. But before we must mark    */
/* to discard new label from the table if it exist.                */
/* We must also discard this line with old label.                  */
        Del = 'D'
        "TBMOD "CMEM            /*  mark line to delete */
        PurgeNeeded = 1
        call FindLabel xLab
        if LabelExist then do
          Del = 'D'
          "TBMOD "CMEM            /*  mark line to delete */
          iComment = aComment
        end
/* Add new label */
        Del = ''
        Tlbl = xLab
        Line = iLine
        Comment = iComment      /* use old comment */
        "TBADD "CMEM" SAVE(D COMMENT)"
      end
      else do
/* if we have deleted label from file, it must be deleted from table */
/* it will occurs only if ST2 > 1                                    */
        if ST2 > 1 then do
          Del = 'D'
          "TBMOD "CMEM             /* mark line to delete */
          PurgeNeeded = 1
        end
      end
    end
  end
  else do  /* new label is found in the file */
    if xLab ¬= '' then do
      Comment = ''      /* new label has not comment */
      call FindLabel xLab
      if LabelExist then do
        Del = 'D'
        "TBMOD "CMEM            /*  mark line to delete */
        PurgeNeeded = 1
        Comment = aComment
      end
      Del = ''
      Tlbl = xLab
      Line = xLine
      "TBADD "CMEM" SAVE(D COMMENT)"
    end
  end
end
return

FindLine:
arg Line
"TBTOP "CMEM
"TBSCAN "CMEM" ARGLIST(LINE) CONDLIST(EQ)"
if RC = 8 then do /* this line does not exist in the table */
  LineExist = 0
  iComment = ''
  iLab = ''
end
else do /* if line in the table exist (so label exist too) */
  LineExist = 1
  iLine = Line
  iLab = Tlbl
  iComment = Comment
end
return

FindLabel:
arg Tlbl
"TBTOP "CMEM
"TBSCAN "CMEM" ARGLIST(TLBL) CONDLIST(EQ)"
if RC = 8 then do /* this label does not exist in the table */
  LabelExist = 0
  aComment = ''
  aLab = ''
end
else do
  LabelExist = 1
  aLine = Line
  aComment = Comment /* save comment */
  aLab = Tlbl
end
return

ParseParms:
upper Parms
select
  when parms = '' then do
    if ST1 = 1 then do
      if ST2 = 1 then do
        call PrepareStat
        Call MergeLabels
        Call PurgeTable
        Call RestoreLabels
      end
      else do
        Call MergeLabels
        if PurgeNeeded then do
          Call PurgeTable
          Call RestoreLabels
        end
      end
    end
    else do /* if a new table */
      if FileLabeled then
        Call MergeLabels
      else
        Call LabelError
    end
  end
  when parms = 'RESTORE' then do
    if ST1 = 1 then do
      Call RestoreLabels
    end
    else
      Call TableError
  end
  when Fparm = 'CLOSE' then do
    if FileLabeled then
      call CloseTable 'CLOSE' 'LIBRARY(LAIDTBL)'
    else
      Call Label2Error
  end
  when Fparm = 'DELETE' then do
    if ST1 = 1 then do
      Address ISPEXEC "TBEND "CMEM
      call CloseTable 'ERASE' 'LIBRARY(LAIDTBL)'
    end
    else
      Call TableError
  end
  when Fparm = 'QUIT'   then do
    call CloseTable 'END'
  end
  otherwise  /* parm error */
    call ParmError
end
return

PurgeTable:
"TBTOP "CMEM
Purged = 0
Del  = 'D'
do until Purged
  "TBSCAN "CMEM" ARGLIST(DEL) CONDLIST(EQ)"
  if RC = 8 then do
    Purged = 1
    iterate
  end
  "TBDELETE "CMEM
end
PurgeNeeded = 0
return

ParmError:
ZEDSMSG = "Parameters."
ZEDLMSG = "Incorrect parameter strins was entered."
Address ISPEXEC "SETMSG MSG(ISRZ001)"
exit

LabelError:
ZEDSMSG = "Labels not found."
ZEDLMSG = "No one label was found in the file and table does not exist."
Address ISPEXEC "SETMSG MSG(ISRZ001)"
exit

Label2Error:
ZEDSMSG = "Labels not found."
ZEDLMSG = "No one label was found in the file."
Address ISPEXEC "SETMSG MSG(ISRZ001)"
exit

TableError:
ZEDSMSG = "Table not found."
ZEDLMSG = "Table does not exist in "DSTable"."
Address ISPEXEC "SETMSG MSG(ISRZ001)"
exit

NoAvalError:
ZEDSMSG = "Not available to WRITE."
ZEDLMSG = "It is possible you perform RESTORE over restored table."
Address ISPEXEC "SETMSG MSG(ISRZ001)"
exit

OperWarn:
ZEDSMSG = op "performed."
ZEDLMSG = "Table "CMEM" in not accessible more."
Address ISPEXEC "SETMSG MSG(ISRZ001)"
exit

AllocError:
arg opt
say "Error occurs during "opt DSTable" data set."
exit

Abend:
arg text
say 'ABEND occurs with 'text' service.'
exit

ERROR:
trace o
if RC < 9 then do
  return RC
end
  say 'Error in string - 'SIGL', RC - 'RC
  say sourceline(SIGL)
  Address ISPEXEC "LIBDEF LAIDTBL"
exit RC
FAILURE:
trace o
say 'Failure occurs.'
  Address ISPEXEC "LIBDEF LAIDTBL"
exit
