{"INMR01": {"INMLRECL": 80, "INMFNODE": "BVOMM", "INMFUID": "RLRICE", "INMTNODE": "BVOMM", "INMTUID": "RLRICE", "INMFTIME": "20090709161734000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 4000, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "RLRICE.DITTO.MACLIB", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"RLRICE.DITTO.MACLIB": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 4000, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 32, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3339, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 0}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x06\\xb0\\x00\\x04y`P'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x06\\xb0\\x00\\x04y`P'", "b'X\\xe2\\x160\\x00\\x00\\x00\\x1e\\x00\\x05\\x00\\x1e\\x00\\x08\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"ABCODES": {"ttr": 17, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n         ABCODES\n*--------------------------------------------------------------------*\n*                                                                    *\n*        ABEND REASONS                                               *\n*                                                                    *\n*--------------------------------------------------------------------*\nABEND001 EQU   1     NOT USED\nABEND002 EQU   2     ABEND REQUESTED BY INPUT MODULE\nABEND003 EQU   3     ABEND REQUESTED BY OUTPUT MODULE\nABEND004 EQU   4     GETMAIN FAILED FOR TRACE TABLE\nABEND005 EQU   5     GETMAIN FAILED FOR INPUT I/O AREA\nABEND006 EQU   6     GETMAIN FAILED FOR OUTPUT I/O AREA\nABEND007 EQU   7     VDEFINE FAILED\nABEND008 EQU   8     DAIR FAILED DURING MAINLINE TERMINATION\nABEND009 EQU   9     INVALID COMMAND PASSED TO TSO MODULE\nABEND010 EQU   10    I/O ERROR IN EXCP MODULE\nABEND011 EQU   11    DITTDAIR RETURNED UNEXPECTED STATUS\nABEND012 EQU   12    UNABLE TO DETERMINE CONSOLE ID (STC MODE ONLY)\nABEND013 EQU   13    UNABLE TO DETERMINE FUNCTION WITHIN 'DITTALOC'\nABEND014 EQU   14    STATUS OTHER THAN 'OK' RETURNED FROM 'DITTEXCP'\nABEND015 EQU   15    DEBCHK TYPE=ADD FAILED IN 'DITTDAIR'\nABEND016 EQU   16    'DITTDAIR' COULD NOT LOCATE A DEB\nABEND017 EQU   17    DEBCHK TYPE=DELETE FAILED IN 'DITTDAIR'\nABEND018 EQU   18    I/O ERROR\nABEND019 EQU   19    RECORD WITH LENGTH=ZERO DETECTED\nABEND020 EQU   20    INVALID DISK ADDRESS\nABEND021 EQU   21    RECORD WITH NO DATA, BUT COUNT DOESN'T AGREE\nABEND022 EQU   22    'COUNT' INFO HAS A KEY LENGTH, COMMKEY = ZERO\nABEND023 EQU   23    'COUNT' INFO HAS DATA LENGTH, COMMCRCD = ZERO\nABEND024 EQU   24    CURRENT RECORD ADDRESS (DASDCRCD) WAS ZERO\nABEND025 EQU   25    PEOT REACHED DURING BSR\nABEND026 EQU   26    PEOT REACHED DURING BSF\nABEND027 EQU   27    I/O NOT ALLOWED DURING REW\nABEND028 EQU   28    PEOT REACHED DURING REW\nABEND029 EQU   29    I/O NOT ALLOWED DURING RUN\nABEND030 EQU   30    PEOT REACHED DURING RUN\nABEND031 EQU   31    SENSE COMMAND FAILED FOLLOWING SUCCESSFUL I/O\nABEND032 EQU   32    SENSE COMMAND FAILED FOLLOWING I/O ERROR\nABEND033 EQU   33    SENSE COMMAND FAILED FOLLOWING SUCCESSFUL I/O\nABEND034 EQU   34    I/O NOT ALLOWED DURING READ FWD IN TMAP MODULE\nABEND035 EQU   35    UCBSCAN ERROR IN DITTDAIR\nABEND999 EQU  999    ABEND REQUESTED BY USER\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BITFLAG": {"ttr": 19, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ".* ------------------------------------------------------------------ *\n.*                                                                    *\n.*           THIS MACRO VERIFIES AND CONVERTS FLAGS USED IN THE       *\n.*           IFLAGS AND OFLAGS PARAMETERS OF THE 'DITTFUNC' MACRO.    *\n.*                                                                    *\n.*           ANY VALUES ALLOWED MUST HAVE A CORRESPONDING EQUATE      *\n.*           DITTCOMM.                                                *\n.*                                                                    *\n.* ------------------------------------------------------------------ *\n         MACRO\n         BITFLAG &IN\n         LCLC &WORK\n         LCLA &SUB\n         GBLC &FLGBYTE(8)\n         AIF  (N'&IN GT 8).TOOMANY\n&FLGBYTE(1) SETC '0'\n&FLGBYTE(2) SETC '0'\n&FLGBYTE(3) SETC '0'\n&FLGBYTE(4) SETC '0'\n&FLGBYTE(5) SETC '0'\n&FLGBYTE(6) SETC '0'\n&FLGBYTE(7) SETC '0'\n&FLGBYTE(8) SETC '0'\n         AIF  (N'&IN EQ 0).PROC30\n&SUB     SETA 1\n.PROC00  ANOP\n         AIF  (&SUB GT N'&IN).PROC30\n&WORK    SETC '&IN(&SUB)'\n         AIF  ('&WORK' EQ 'DEBLOCK').PROC10\n         AIF  ('&WORK' EQ 'VREC').PROC10\n         AIF  ('&WORK' EQ 'REBLOCK').PROC10\n         AIF  ('&WORK' EQ 'HEX').PROC10\n         MNOTE 12,'FLAGS PARAMETER '' &WORK '' IS INVALID'\n         AGO  .PROC20\n.PROC10  ANOP\n&FLGBYTE(&SUB) SETC '$&WORK'\n.PROC20  ANOP\n&SUB     SETA &SUB+1\n         AGO  .PROC00\n.PROC30  ANOP\n         MEXIT\n.TOOMANY ANOP\n         MNOTE 12,'TOO MANY FLAGS (8 IS MAXIMUM)'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DAIRBLOK": {"ttr": 21, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*--------------------------------------------------------------------*\n*                                                                    *\n*        DYNAMIC ALLOCATION MODULE (DITTDAIR) INTERFACE BLOCK        *\n*                                                                    *\n*--------------------------------------------------------------------*\n         MACRO\n&NAME    DAIRBLOK &TYPE=\n         AIF      ('&TYPE' EQ 'DSECT').DSECT\n&NAME    DS       0C\n         AGO      .NODSECT\n.DSECT   ANOP\n         AIF      (T'&NAME EQ 'O').NONAME\n&NAME    DSECT\n.NODSECT ANOP\nDAIRCMMD DC    X'00'               COMMAND\n$DAIRACQ EQU   C'A'                .. ALLOCATE\n$DAIRREL EQU   C'R'                .. RELEASE\n$DAIRLOC EQU   C'L'                .. LOCATE DYNAMIC BLOCK\nDAIRTYPE DC    X'00'               TYPE OF RESOURCE\n$DAIRCUU EQU   X'80'               .. RESOURCE IS A DEVICE\nDAIRSTAT DC    X'00'               STATUS RETURNED FROM DITTDAIR\n$DAIRSOK EQU   C' '                .. GOOD STATUS\n$DAIRSDE EQU   C'1'                .. DAIR ERROR\n$DAIRSLE EQU   C'2'                .. LOCATE ERROR\n$DAIRSIR EQU   C'3'                .. INVALID REQUEST\n$DAIRSNU EQU   C'4'                .. UNIT DOES NOT EXIST\n$DAIRSTE EQU   C'5'                .. DEVICE TYPE IS NOT SUPPORTED\n$DAIRSRE EQU   C'6'                .. INVALID RESOURCE TYPE\n$DAIRSDP EQU   C'7'                .. 2ND ALLOCATE FOR SAME DEVICE\n$DAIRSOF EQU   C'8'                .. DEVICE IS OFFLINE\n$DAIRSAL EQU   C'9'                .. DEVICE ALLOCATED TO ANOTHER USER\n$DAIRSUD EQU   C'A'                .. 3420 WITH NEITHER 1600 OR 6250\n$DAIRS16 EQU   C'B'                .. DRIVE DOES NOT ALLOW 1600\n$DAIRS62 EQU   C'C'                .. DRIVE DOES NOT ALLOW 6250\n$DAIRSD1 EQU   C'D'                .. DENSITY NOT ALLOWED ON 3480'S\n$DAIRSD2 EQU   C'E'                .. DENSITY NOT ALLOWED ON DASD'S\nDAIRCUU  DC    XL2'0000'           CUU OF DEVICE TO ALLOCATE/RELEASE\nDAIRAREA DC    AL4(0)              ADDRESS OF DYNAMICALLY ACQUIRED     +\n                                      DCB/IOB/ECB/CCW AREA\nDAIRERR  DC    X'0000'             SVC99 ERROR CODE\nDAIRINFO DC    X'0000'             SVC99 INFO CODE\nDAIRR15  DC    XL4'00'             SVC99 RETURN CODE (REG 15)\n         MEXIT\n.NONAME  ANOP\n         MNOTE    12,'NAME REQUIRED WHEN TYPE=DSECT'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTCOMM": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00(\\x01\\x08\\x17\\x7f\\x01\\t\\t\\x8f\\x10\\x02\\x01w\\x01u\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2008-06-25T00:00:00", "modifydate": "2009-04-08T10:02:28", "lines": 375, "newlines": 373, "modlines": 0, "user": "RLRICE"}, "text": "*---------------------------------------------------------------------*\n*                                                                     *\n*          COMMON AREA MAPPING MACRO.                                 *\n*                                                                     *\n*     THIS MACRO WILL GENERATE EITHER THE 'COMMON' MODULE CSECT OR    *\n*     A DSECT TO MAP THE 'COMMON' MODULE.  'COMMON' IS USED FOR       *\n*     CONSTANTS AND WORK AREAS THAT ARE COMMON TO SEVERAL MODULES.    *\n*                                                                     *\n*     NOTE THAT A CHANGE TO COMMON MAY REQUIRE A RE-ASSEMBLY OF MOST  *\n*     OR ALL 'DITTO' MODULES.                                         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         MACRO\n&NAME    DITTCOMM &TYPE=\n         AIF   ('&TYPE' EQ 'DSECT').DSECT\n&NAME    DS    0H\n         AGO   .NODSECT\n.DSECT   ANOP\n         AIF   (T'&NAME EQ 'O').NONAME\n&NAME    DSECT\n.NODSECT ANOP\n*---------------------------------------------------------------------*\n*                                                                     *\n*          ADDRESS CONSTANTS                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL4'1STX'\nCOMM1ST  DC    A(0)                ADDRESS OF FIRST TRACE ENTRY\n         DC    CL4'LAST'\nCOMMLAST DC    A(0)                ADDRESS OF LAST TRACE ENTRY\n         DC    CL4'CURR'\nCOMMCURR DC    A(0)                CURRENT TRACE ENTRY\n         DC    CL4'TRCE'\nCOMMTRCE DC    A(COMMTR00)         TRACE ROUTINE ENTRY POINT\n         DC    CL4'COMM'\nACOMM    DC    A(DITTCOMM)         COMMON MODULE\n         DC    CL4'ALOC'\nAALOC    DC    V(DITTALOC)         'ACQ/REL' FUNCTION\n         DC    CL4'ATTN'\nAATTN    DC    V(DITTATTN)         TSO ATTENTION EXIT\n         DC    CL4'AUTH'\nAAUTH    DC    V(DITTAUTH)         DYNAMIC AUTHORIZATION\n         DC    CL4'CARD'\nACARD    DC    V(DITTCARD)         CARD INPUT COMMAND INTERPRETER\n         DC    CL4'CDI1'\nACDI1    DC    V(DITTCDI1)         CARD READER\n         DC    CL4'CDO1'\nACDO1    DC    V(DITTCDO1)         CARD PUNCH\n         DC    CL4'CMD '\nACMD     DC    V(DITTCMD)          COMMAND TABLE\n         DC    CL4'CONS'\nACONS    DC    V(DITTCONS)         CONSOLE INPUT COMMAND INTERPRETER\n         DC    CL4'DAIR'\nADAIR    DC    V(DITTDAIR)         DAIR INTERFACE\n         DC    CL4'DAI1'\nADAI1    DC    V(DITTDAI1)         DASD READER\n         DC    CL4'EXCP'\nAEXCP    DC    V(DITTEXCP)         EXCP INTERFACE\n         DC    CL4'INQ '\nAINQ     DC    V(DITTINQ)          STC MODE INQUIRY FUNCTION\n         DC    CL4'ISP '\nAISP     DC    A(0)                SPF INTERFACE\n         DC    CL4'MAIN'\nAMAIN    DC    V(DITTMAIN)         BATCH JOB/STC MAINLINE\n         DC    CL4'PARM'\nAPARM    DC    V(DITTPARM)         PARAMETER CONVERTER\n         DC    CL4'PRMD'\nAPRMD    DC    V(DITTPRMD)         DENSITY PARAMETER CHECKER\n         DC    CL4'PRMO'\nAPRMO    DC    V(DITTPRMO)         OPTION PARAMETER CHECKER\n         DC    CL4'PRMV'\nAPRMV    DC    V(DITTPRMV)         VOLSER RANGE CHECKER\n         DC    CL4'PRO1'\nAPRO1    DC    V(DITTPRO1)         DATA PRINT\n         DC    CL4'PRT '\nAPRT     DC    V(DITTPRT)          PRINT MODULE\n         DC    CL4'STAE'\nASTAE    DC    V(DITTSTAE)         STAE EXIT\n         DC    CL4'TINT'\nATINT    DC    V(DITTTINT)         TAPE INITIALIZATION\n         DC    CL4'TMAP'\nATMAP    DC    V(DITTTMAP)         TAPE MAP\n         DC    CL4'TPI1'\nATPI1    DC    V(DITTTPI1)         TAPE READ\n         DC    CL4'TPI2'\nATPI2    DC    V(DITTTPI2)         TAPE FORWARD SPACE FILE (FSF)\n         DC    CL4'TPI3'\nATPI3    DC    V(DITTTPI3)         TAPE BACK SPACE RECORD (BSR)\n         DC    CL4'TPI4'\nATPI4    DC    V(DITTTPI4)         TAPE BACK SPACE FILE (BSF)\n         DC    CL4'TPO1'\nATPO1    DC    V(DITTTPO1)         TAPE OUTPUT\n         DC    CL4'TPO2'\nATPO2    DC    V(DITTTPO2)         TAPE REWIND (REW)\n         DC    CL4'TPO3'\nATPO3    DC    V(DITTTPO3)         TAPE REWIND/UNLOAD (RUN)\n         DC    CL4'TPO4'\nATPO4    DC    V(DITTTPO4)         TAPE MARK (WTM)\n         DC    CL4'TSOM'\nATSOM    DC    V(DITTTSOM)         TSO ENVIRONMENT MAINLINE\n         DC    CL4'TSO1'\nATSO1    DC    V(DITTTSO1)         TSO ENVIRONMENT 'PRINT'\n         DC    CL4'TSO2'\nATSO2    DC    V(DITTTSO2)         TMAP\n         DC    CL4'TSO3'\nATSO3    DC    V(DITTTSO3)         TSO MODE INQUIRY FUNCTION\n         DC    CL4'VTOC'\nAVTOC    DC    V(DITTVTOC)         DASD VTOC\n         DC    CL4'XXXX'\nAXXXX    DC    V(DITTXXXX)         DUMMY CSECT (USED BY STAE EXIT)\n         DC    CL4'NPUT'\nACOMMIOI DC    A(0)                INPUT BUFFER ADDRESS\n         DC    CL4'OPUT'\nACOMMIOO DC    A(0)                OUTPUT BUFFER ADDRESS\n* * * *                                                    * * * *\n* * * * THE FOLLOWING 2 FIELDS ARE POSITIONALLY DEPENDENT  * * * *\n* * * *                                                    * * * *\nCOMMCCOM DC    A(0)                COMMUNICATION PARAMETER LIST\nCOMMASID DC    A(0)                ADDRESS SPACE ID\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*          FULLWORD CONSTANTS/WORK AREAS                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         DC    CL8'FULLWORD'\nCOMMCECB DC    F'0'                CONSOLE ECB\nCOMMCNAM DC    CL8' '              CONSOLE NAME\nCOMMDYHD DC    A(0)                DYNAMIC ALLOCATION CHAIN START\nCOMMDYTL DC    A(0)                DYNAMIC ALLOCATION CHAIN TRAIL\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*          PACKED DECIMAL                                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL8'DECIMAL '\nCOMMP0   DC    P'0'                CONSTANT\nCOMMP1   DC    P'1'                CONSTANT\nCOMMP5   DC    P'5'                CONSTANT\nCOMMP60  DC    P'60'               CONSTANT\nCOMMP65  DC    P'65'               CONSTANT\nCOMMP100 DC    P'100'              CONSTANT\nCOMMLINE DC    PL3'0'              LINE COUNT\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*          FLAGS                                                      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL8'FLAGS   '\nCOMMFLAG DC    X'00'               MAINLINE/INTERCOMMUNICATION FLAGS\n$ABEND   EQU   X'80'               .. ABEND REQUEST FLAG\n$COMMCLS EQU   X'40'               .. CLOSE FILES INDICATOR\n$COMMCER EQU   X'20'               .. INVALID/INCOMPLETE COMMAND\n$COMMEOF EQU   X'10'               .. END OF FILE\n$COMM1ST EQU   X'08'               .. FIRST TIME FLAG\n$COMMFE  EQU   X'04'               .. EOF DUE TO TAPE MARK OR DASD EOF\n$ABORT   EQU   X'02'               .. ABORT CURRENT FUNCTION\n$COMMEOJ EQU   X'01'               .. END OF JOB IN PROGRESS\nCOMMATTN DC    X'00'               TSO ENVIRONMENT ATTENTION FLAG\n$ATTN    EQU   X'80'               .. ATTENTION EXIT DRIVEN\nCOMMIFLG DC    X'00'               INPUT FLAGS/INDICATORS\nCOMMOFLG DC    X'00'               OUTPUT FLAGS/INDICATORS\n*---------------------------------------------------------------------*\n*          FLAG DEFINITIONS FOR COMMIFLG AND COMMOFLG                 *\n*---------------------------------------------------------------------*\n$DEBLOCK EQU   X'80'               .. DEBLOCK RECORDS\n$VREC    EQU   X'40'               .. VARIABLE LENGTH RECORDS\n$REBLOCK EQU   X'20'               .. REBLOCK RECORDS\n$HEX     EQU   X'10'               .. PRINT IN HEX\n$NEWBLOK EQU   X'01'               .. NEW BLOCK JUST READ\n*---------------------------------------------------------------------*\n*   FLAGS SET BY OPTIONAL PARAMETERS TO INDICATE THEY ARE IN EFFECT   *\n*---------------------------------------------------------------------*\nCOMMPFLG DC    X'00'               OPTIONAL PARAMETERS IN EFFECT\n$COMMRCS EQU   X'80'               .. LIMITED NUMBER OF RECORDS\n$COMMFLS EQU   X'40'               .. LIMITED NUMBER OF FILES\n$COMMDEN EQU   X'20'               .. DENSITY SPECIFIED\n$COMMOPT EQU   X'10'               .. OPTION SPECIFIED\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nCOMMED1  DC    X'4020206B202021'   CONSTANT\nCOMMED2  DC    X'402020202021'     CONSTANT\nCOMMHXPK DC    X'00AABBCCDDEEFF000000000000000000'\n         DC    X'00010203040506070809000000000000'\nCOMMVHEX DC    256X'FF'            VALID HEX VALUES\n         ORG   COMMVHEX+C'A'\n         DC    6X'00'\n         ORG   COMMVHEX+C'0'\n         DC    10X'00'\n         ORG   COMMVHEX+256\nCOMMVDEC DC    256X'FF'            VALID DECIMAL VALUES\n         ORG   COMMVDEC+C'0'\n         DC    10X'00'\n         ORG   COMMVDEC+256\nCOMM1F   DC    32X'1F'             CONSTANT\nCOMMDWRD DC    D'0'                DOUBLE WORD WORK AREA\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n*          CHARACTER                                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL8'CHAR    '\n         SPACE 2\nCOMMENV  DC    C' '                ENVIRONMENT\n$ENVJOB  EQU   C'J'                .. JOB\n$ENVSTC  EQU   C'S'                .. STARTED TASK\n$ENVTSO  EQU   C'T'                .. TSO USER\nCOMMBLKS DC    CL120' '            CONSTANT\nCMD      DC    CL67' '             TSO COMMAND I/O AREA\nSAMPLE   DC    CL67' '             COMMAND EXAMPLE\nCMD01    DC    CL60' '             FOR TSO\nCMD02    DC    CL60' '             FOR TSO\nCMD03    DC    CL60' '             FOR TSO\nCMD04    DC    CL60' '             FOR TSO\nCMD05    DC    CL60' '             FOR TSO\nMSG01    DC    CL79' '             FOR TSO\nMSG02    DC    CL79' '             FOR TSO\nMSG03    DC    CL79' '             FOR TSO\nMSG04    DC    CL79' '             FOR TSO\nMSG05    DC    CL79' '             FOR TSO\nTAPE01   DC    CL70' '             ALLOCATED TAPE DRIVES DISPLAY AREA\nDASD01   DC    CL70' '             ALLOCATED DASD UNITS DISPLAY AREA\nKEYLEN   DC    CL6' '              KEY LENGTH\nDATALEN  DC    CL6' '              DATA LENGTH\nDISKADDR DS    0CL11               DISK ADDRESS\nDISKCYL  DC    CL4' '              .. DISK ADDRESS (CYLINDER NUMBER)\n         DC    C'-'                .. DELIMITER\nDISKHEAD DC    CL2' '              .. DISK ADDRESS (HEAD NUMBER)\n         DC    C'-'                .. DELIMITER\nDISKREC  DC    CL3' '              .. DISK ADDRESS (RECORD NUMBER)\nDATA     DC    CL79' '             DATA FOR SPF TABLES\n*---------------------------------------------------------------------*\n*                                                                     *\n*          PARAMETERS/INPUT-OUTPUT UNITS AND MODULE ADDRESSES         *\n*                                                                     *\n*---------------------------------------------------------------------*\n         DC    CL8'PARMS   '\nCOMMINM  DC    A(0)                INPUT MODULE ADDRESS\nCOMMIND  DC    A(0)                INPUT DYNAMIC BLOCK ADDRESS\nCOMMOUTM DC    A(0)                OUTPUT MODULE ADDRESS\nCOMMOUTD DC    A(0)                OUTPUT DYNAMIC BLOCK ADDRESS\nCOMMCRCD DC    A(0)                ADDRESS OF CURRENT RECORD\nCOMMKEY  DC    A(0)                DASD PHYSICAL KEY'S ADDRESS\nCOMMCRCL DC    H'0'                CURRENT RECORD LENGTH\nCOMMLRCL DC    H'0'                LOGICAL RECORD LENGTH\nCOMMBLSZ DC    H'0'                OUTPUT BLOCK SIZE ON RE-BLOCK\nCOMMINU  DC    XL3'000000'         INPUT DEVICE CUU\nCOMMOUTU DC    XL3'000000'         OUTPUT DEVICE CUU\nCOMMFILS DC    PL2'0'              NUMBER OF FILES TO PROCESS\nCOMMRCDS DC    PL2'0'              NUMBER OF RECORDS TO PROCESS\nCOMMDEN  DC    X'00'               DENSITY REQUESTED (SEE 370 REF CARD\n$DEN1600 EQU   X'C3'               .. 1600 BPI        FOR A LIST OF\n$DEN6250 EQU   X'D3'               .. 6250 BPI        TAPE COMMANDS)\n$DEN3480 EQU   X'00'               .. 3480 DENSITY\nCOMMLOV  DC    CL6' '              LOW OR ONLY VOLSER FOR 'INT' COMMAND\nCOMMHIV  DC    CL6' '              HIGH VOLSER IF RANGE GIVEN ON 'INT'\nCOMMDADR DS    0XL5                DASD DISK ADDRESS\nCOMMDCYL DS    XL2                 .. CYLINDER NUMBER\nCOMMDHD  DS    XL2                 .. HEAD NUMBER\nCOMMDREC DS    X                   .. RECORD NUMBER\nCOMMCNT  DS    0XL8                CKD 'COUNT' INFO\nCNTADDR  DS    0XL5                .. DISK ADDRESS\nCNTCYL   DS    XL2                 .... CYLINDER NUMBER\nCNTHEAD  DS    XL2                 .... HEAD NUMBER\nCNTREC   DS    X                   .... RECORD NUMBER\nCNTL     DS    0XL3                .. KEY AND DATA LENGTH\nCNTKEYL  DS    X                   .... KEY LENGTH\nCNTDATAL DS    XL2                 .... DATA LENGTH\nCOMMCNTL EQU   *-COMMCNT           .. COUNT INFO LENGTH\nCOMMPANL DS    CL8                 PANEL NAME FOR OUTPUT DISPLAY (TSO)\nCOMMINQ  DS    CL8                 INQUIRY QUALIFIER\nCOMMOPT  DS    CL8' '              GENERIC OPTION\n*--------------------------------------------------------------------*\n*                                                                    *\n*        TRACE DATA                                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\n         DS    0F                  ALIGNMENT\nCOMMTRD1 DC    XL8'0000000000000000'\nCOMMTRD2 DC    XL8'0000000000000000'\n*--------------------------------------------------------------------*\n*                                                                    *\n*        TRACE ROUTINE ENTRY POINT                                   *\n*                                                                    *\n*--------------------------------------------------------------------*\nCOMMTR00 DS    0H\n         EJECT\n         USING DITTCOMM,R11        ADDRESSABILITY\n         USING MODPRFX,R12         MODULE PREFIX ADDRESSABILITY\n         USING TRENTRY,R3          DEFINE DSECT BASE\n         STM   R0,R15,COMMSAVE     SAVE REGISTERS\n         CLI   COMMDYHD,X'02'      CORRUPTED?\n         BE    ABCDEFGH\n         L     R3,COMMCURR         GET CURRENT TRACE ENTRY ADDRESS\n         C     R3,COMMLAST         IS CURRENT LAST??\n         BL    COMMTR10            NO\n         L     R3,COMM1ST          RESTART TRACE TABLE\n         B     COMMTR20            ENTER THE TRACE DATA\nCOMMTR10 DS    0H\n         LA    R3,TRENTRYL(R3)     ADVANCE 1 TRACE ENTRY\nCOMMTR20 DS    0H\n         ST    R3,COMMCURR         SAVE CURRENT ENTRY\n         MVC   TRMODNM,PFXMODNM    MOVE MODULE NAME TO TRACE TABLE\n         MVC   TRID,0(R14)         MOVE TRACE ID\n         MVC   TRDATA1,COMMTRD1    MOVE TRACE DATA 1\n         MVC   TRDATA2,COMMTRD2    MOVE TRACE DATA 2\n         XC    COMMTRD1,COMMTRD1   CLEAR DATA 1\n         XC    COMMTRD2,COMMTRD2   CLEAR DATA 2\n         TM    XTRFLAG,$XTRACE     EXTERNAL TRACE ON??\n         BNO   COMMTR40            NO\n         TM    XTRFLAG,$XTROPEN    IS EXTERNAL TRACE FILE OPEN??\n         BO    COMMTR30            YES\n         OPEN  (XTRDCB,OUTPUT)     OPEN EXTERNAL TRACE FILE\n         OI    XTRFLAG,$XTROPEN    INDICATE TRACE IS OPEN\nCOMMTR30 DS    0H\n         PUT   XTRDCB,0(R3)        WRITE TO EXTERNAL TRACE\n         B     COMMTR50\nCOMMTR40 DS    0H\n         TM    XTRFLAG,$XTROPEN    IS TRACE FILE OPEN?\n         BNO   COMMTR50            NO\n         CLOSE XTRDCB              CLOSE EXTERNAL TRACE FILE\n         NI    XTRFLAG,255-$XTROPEN\nCOMMTR50 DS    0H\n         LM    R0,R15,COMMSAVE     RESTORE REGISTERS\n         B     8(R14)              EXIT TO CALLING ROUTINE\nCOMMSAVE DC    16F'0'              REGISTER SAVE AREA\nXTRFLAG  DC    X'00'               EXTERNAL TRACE FILE FLAGS\n$XTRACE  EQU   X'80'               .. EXTERNAL TRACE REQUESTED\n$XTROPEN EQU   X'40'               .. EXTERNAL TRACE IS OPEN\nXTRDCB   DCB   DDNAME=DITTRACE,    EXTERNAL TRACE DCB                  +\n               DSORG=PS,           .. SEQUENTIAL FILE                  +\n               RECFM=FB,           .. FIXED BLOCKED FILE               +\n               LRECL=TRENTRYL,     .. RECORD SIZE                      +\n               BLKSIZE=100*TRENTRYL,  BLOCK SIZE                       +\n               MACRF=PM            MACRO FORM\nABCDEFGH DS    0H\n         ABEND 1234,DUMP,,USER\n         SPACE 2\n*--------------------------------------------------------------------*\n*                                                                    *\n*        TRACE TABLE ENTRY                                           *\n*                                                                    *\n*--------------------------------------------------------------------*\nTRENTRY  DSECT\nTRMODNM  DS    CL8                 MODULE NAME\nTRID     DS    CL8                 'ID'\nTRDATA1  DS    XL8                 TRACE DATA 1\nTRDATA2  DS    CL8                 TRACE DATA 2\nTRENTRYL EQU   *-TRENTRY\n         SPACE 2\n*--------------------------------------------------------------------*\n*                                                                    *\n*        MODULE PREFIX                                               *\n*                                                                    *\n*--------------------------------------------------------------------*\n         DITTPRFX TYPE=DSECT\n         EJECT\n         AIF   ('&TYPE' EQ 'DSECT').MEXIT\n*--------------------------------------------------------------------*\n*                                                                    *\n*        REGISTER EQUATES                                            *\n*                                                                    *\n*--------------------------------------------------------------------*\n         COPY REGEQU\n         AGO   .MEXIT\n.NONAME  ANOP\n         MNOTE 12,'NAME IS REQUIRE WHEN TYPE=DSECT'\n.MEXIT   ANOP\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTFUNC": {"ttr": 23, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*--------------------------------------------------------------------*\n*                                                                    *\n*              FUNCTION DEFINITION MACRO                             *\n*                                                                    *\n*        CODED:                                                      *\n*                                                                    *\n*          DITTFUNC FUNC,                                            *\n*                   REQPARM=(PRMNAME1,PRMNAME2,PRMNAME3,........,..),*\n*                   OPTPARM=(PRMNAME1,PRMNAME2,PRMNAME3,........,..),*\n*                   IN1=MODULE,       INPUT MODULE FOR BATCH AND STC *\n*                   IN2=MODULE,       INPUT MODULE FOR TSO           *\n*                   IFLAGS=(XXXX,XXX),                               *\n*                   OUT1=MODULE,      OUTPUT MODULE FOR BATCH AND STC*\n*                   OUT2=MODULE,      OUTPUT MODULE FOR TSO          *\n*                   OFLAGS=(XXXX,XXX),                               *\n*                   EXAMPLE1='COMMAND EXAMPLE TEXT FOR BATCH MODE',  *\n*                   EXAMPLE2='COMMAND EXAMPLE TEXT FOR STC AND TSO', *\n*                   DESC='DESCRIPTION OF COMMAND',                   *\n*                   PANEL=SPFPANEL,                                  *\n*                   ENV=(<JOB,><STC,><TSO>)                          *\n*                                                                    *\n*          MACRO PARAMETERS:                                         *\n*                                                                    *\n*              FUNC      A 1-4 CHARACTERS THAT WILL BECOME A VALID   *\n*                        'DITTO' COMMAND (CP, TT, TPD, ETC).         *\n*                                                                    *\n*              REQPARM   SPECIFIES REQUIRED PARAMETERS.              *\n*                                                                    *\n*              OPTPARM   SPECFIES OPTIONAL PARAMETERS                *\n*                                                                    *\n*              OPTVAL    VALID VALUES FOR OPTION PARAMETER           *\n*                                                                    *\n*              IN1       BATCH/STC INPUT MODULE NAME SUFFIX          *\n*              IN2       TSO INPUT MODULE NAME SUFFIX                *\n*              IFLAGS    FLAGS FOR INPUT MODULE                      *\n*                                                                    *\n*              OUT1      BATCH/STC OUTPUT MODULE NAME SUFFIX         *\n*              OUT2      TSO OUTPUT MODULE NAME SUFFIX               *\n*              OFLAGS    OUTPUT MODULE FLAGS                         *\n*                                                                    *\n*              EXAMPLE1  1-80 CHARACTER EXAMPLE OF COMMAND FOR BATCH *\n*              EXAMPLE2  1-80 CHARACTER EXAMPLE OF COMMAND FOR STC   *\n*                             AND TSO                                *\n*                                                                    *\n*              DESC      1-80 CHARACTER DESCRIPTION OF COMMAND       *\n*                                                                    *\n*              PANEL     1-8 CHARACTER SPF PANEL NAME FOR TSO        *\n*                                                                    *\n*              ENV       ENVIRONMENTS THIS FUNCTION IS TO BE         *\n*                        AVAILABLE IN.  THE AVAILABLE OPTIONS FOR    *\n*                        ENV ARE JOB, STC, AND TSO.                  *\n*                                                                    *\n*--------------------------------------------------------------------*\n         MACRO\n&NAME    DITTFUNC &FUNC,                                               +\n               &REQPARM=,                                              +\n               &OPTPARM=,                                              +\n               &OPTVAL=,                                               +\n               &IN1=,                                                  +\n               &IN2=,                                                  +\n               &IFLAGS=,                                               +\n               &OUT1=,                                                 +\n               &OUT2=,                                                 +\n               &OFLAGS=,                                               +\n               &EXAMPLE1=,                                             +\n               &EXAMPLE2=,                                             +\n               &DESC=,                                                 +\n               &ENV=,                                                  +\n               &PANEL=\n         LCLA  &SUB,&MACID,&NBR\n         LCLC  &REQ(10),&OPT(10),&FLAGS,&WORK1,&WORK2\n         LCLC  &ENVJOB,&FNCSTC,&ENVTSO\n         GBLC  &FLDN(50),&FLDID(50),&FLGBYTE(8),&OPTV(8)\n         AIF   (T'&FUNC EQ 'O').ERR0020\n         AIF   (K'&FUNC GT 4).ERR0030\n         AIF   (T'&EXAMPLE1 EQ 'O' AND T'&EXAMPLE2 EQ 'O').ERR0040\n         AIF   (T'&DESC    EQ 'O').ERR0050\n         AIF   (T'&ENV     EQ 'O').ERR0080\n         AIF   (N'&ENV     GT 3).ERR0090\n&SUB     SETA  1\n&ENVJOB  SETC  '00'\n&FNCSTC  SETC  '00'\n&ENVTSO  SETC  '00'\n.FNC0010 ANOP\n         AIF   (&SUB GT N'&ENV).FNC0090\n         AIF   ('&ENV(&SUB)' EQ 'JOB').FNC0020\n         AIF   ('&ENV(&SUB)' EQ 'STC').FNC0040\n         AIF   ('&ENV(&SUB)' EQ 'TSO').FNC0060\n         MNOTE 12,'INVALID ENTRY IN ENV PARAMETER'\n         MEXIT\n.FNC0020 ANOP\n         AIF   ('&ENVJOB' EQ '00').FNC0030\n         MNOTE 12,'''JOB'' SPECIFIED TWICE IN ENV PARAMETER'\n         MEXIT\n.FNC0030 ANOP\n&ENVJOB  SETC  '$FUNCJOB'\n         AGO   .FNC0080\n.FNC0040 ANOP\n         AIF   ('&FNCSTC' EQ '00').FNC0050\n         MNOTE 12,'''STC'' SPECIFIED TWICE IN ENV PARAMETER'\n         MEXIT\n.FNC0050 ANOP\n&FNCSTC  SETC   '$FUNCSTC'\n         AGO   .FNC0080\n.FNC0060 ANOP\n         AIF   ('&ENVTSO' EQ '00').FNC0070\n         MNOTE 12,'''TSO'' SPECIFIED TWICE IN ENV PARAMETER'\n         MEXIT\n.FNC0070 ANOP\n&ENVTSO  SETC  '$FUNCTSO'\n.FNC0080 ANOP\n&SUB     SETA  &SUB+1\n         AGO   .FNC0010\n.FNC0090 ANOP\n&MACID   SETA  &SYSNDX\n&NAME    DS    0F                       ALIGNMENT\n         DC    AL2(F&MACID-*)           LENGTH OF THIS ENTRY\n         DC    CL4'&FUNC'               FUNCTION ID\n&NBR     SETA  K'&FUNC\n         DC    AL2(&NBR)                LENGTH OF FUNCTION ID\n         DC    AL1(&ENVJOB+&FNCSTC+&ENVTSO)   ENVIRONMENTS\n&SUB     SETA  1\n.FNC0100 ANOP\n&REQ(&SUB) SETC '00'\n&OPT(&SUB) SETC '00'\n         AIF   (K'&REQPARM(&SUB) EQ 0).FNC0120\n&FLDSUB  SETA  0\n.FNC0110 ANOP\n&FLDSUB  SETA  &FLDSUB+1\n         AIF   ('&FLDN(&FLDSUB)' EQ '').ERR0010\n         AIF   ('&FLDN(&FLDSUB)' NE '&REQPARM(&SUB)').FNC0110\n&REQ(&SUB) SETC '&FLDID(&FLDSUB)'\n.FNC0120 ANOP\n         AIF   (K'&OPTPARM(&SUB) EQ 0).FNC0140\n&FLDSUB  SETA  0\n.FNC0130 ANOP\n&FLDSUB  SETA  &FLDSUB+1\n         AIF   ('&FLDN(&FLDSUB)' EQ '').BADOPT\n         AIF   ('&FLDN(&FLDSUB)' NE '&OPTPARM(&SUB)').FNC0130\n&OPT(&SUB) SETC '&FLDID(&FLDSUB)'\n.FNC0140 ANOP\n&SUB     SETA  &SUB+1\n         AIF   (&SUB LT 11).FNC0100\n         AIF  (T'&OPTVAL EQ 'O').FNC0142\n&SUB     SETA 1\n.FNC0141 ANOP\n&WORK1   SETC '&OPTVAL(&SUB)'\n         AIF   (K'&WORK1 GT 8).ERR0120\n&OPTV(&SUB) SETC '&WORK1'\n         AIF   (N'&OPTVAL EQ &SUB).FNC0142\n&SUB     SETA  &SUB+1\n         AGO   .FNC0141\n.FNC0142 ANOP\n&NBR     SETA  N'&REQPARM\n         DC    AL2(&NBR)                NUMBER OF REQUIRED PARMS\n&NBR     SETA  N'&OPTPARM\n         DC    AL2(&NBR)                NUMBER OF OPTIONAL PARMS\n&NBR     SETA  N'&OPTVAL\n         DC    AL2(&NBR)                NUMBER OF VALUES FOR OPTION\n         DC    XL10'&REQ(1)&REQ(2)&REQ(3)&REQ(4)&REQ(5)&REQ(6)&REQ(7)&R+\n               EQ(8)&REQ(9)&REQ(10)'\n         DC    XL10'&OPT(1)&OPT(2)&OPT(3)&OPT(4)&OPT(5)&OPT(6)&OPT(7)&R+\n               EQ(8)&OPT(9)&OPT(10)'\n         AIF   (T'&IN1 EQ 'O').FNC0150\n         AIF   (K'&IN1 GT 4).ERR0060\n         DC    AL2(A&IN1-DITTCOMM)      BATCH/STC INPUT MODULE DISP\n         AGO   .FNC0160\n.FNC0150 ANOP\n         DC    XL2'0000'                NO BATCH/STC INPUT MODULE\n.FNC0160 ANOP\n         AIF   (T'&IN2 EQ 'O').FNC0170\n         AIF   (K'&IN2 GT 4).ERR0090\n         DC    AL2(A&IN2-DITTCOMM)      TSO INPUT MODULE DISPLACEMENT\n         AGO   .FNC0180\n.FNC0170 ANOP\n         DC    XL2'0000'                NO TSO INPUT MODULE\n.FNC0180 ANOP\n         AIF   (T'&OUT1 EQ 'O').FNC0190\n         AIF   (K'&OUT1 GT 4).ERR0070\n         DC    AL2(A&OUT1-DITTCOMM)     BATCH/STC OUTPUT MODULE DISP\n         AGO   .FNC0200\n.FNC0190 ANOP\n         DC    XL2'0000'                NO BATCH/STC OUTPUT MODULE\n.FNC0200 ANOP\n         AIF   (T'&OUT2 EQ 'O').FNC0210\n         AIF   (K'&OUT2 GT 4).ERR0100\n         DC    AL2(A&OUT2-DITTCOMM)     TSO OUTPUT MODULE ADDRESS DISP\n         AGO   .FNC0220\n.FNC0210 ANOP\n         DC    XL2'0000'                NO TSO OUTPUT MODULE\n.FNC0220 ANOP\n         AIF   (T'&IFLAGS EQ 'O').FNC0230\n         BITFLAG &IFLAGS\n&WORK1   SETC '&FLGBYTE(1)+&FLGBYTE(2)+&FLGBYTE(3)+&FLGBYTE(4)'\n&WORK2   SETC '&FLGBYTE(5)+&FLGBYTE(6)+&FLGBYTE(7)+&FLGBYTE(8)'\n         DC    AL1(&WORK1+&WORK2)       INPUT MODULE FLAGS\n         AGO   .FNC0240\n.FNC0230 ANOP\n         DC    B'00000000'              INPUT MODULE FLAGS\n.FNC0240 ANOP\n         AIF   (T'&OFLAGS EQ 'O').FNC0250\n         BITFLAG &OFLAGS\n&WORK1   SETC '&FLGBYTE(1)+&FLGBYTE(2)+&FLGBYTE(3)+&FLGBYTE(4)'\n&WORK2   SETC '&FLGBYTE(5)+&FLGBYTE(6)+&FLGBYTE(7)+&FLGBYTE(8)'\n         DC    AL1(&WORK1+&WORK2)       OUTPUT MODULE FLAGS\n         AGO   .FNC0260\n.FNC0250 ANOP\n         DC    B'00000000'              OUTPUT MODULE FLAGS\n.FNC0260 ANOP\n         AIF   (T'&EXAMPLE1 EQ 'O').FNC0270\n         DC    CL80&EXAMPLE1\n         AGO   .FNC0280\n.FNC0270 ANOP\n         DC    CL80' '                  NO BATCH MODE EXAMPLE\n.FNC0280 ANOP\n         AIF   (T'&EXAMPLE2 EQ 'O').FNC0290\n         DC    CL80&EXAMPLE2\n         AGO   .FNC0300\n.FNC0290 ANOP\n         DC    CL80' '                  NO STC/TSO MODE EXAMPLE\n.FNC0300 ANOP\n         DC    CL80&DESC\n         AIF   (T'&PANEL EQ 'O').FNC0310\n         DC    CL8'&PANEL'              PANEL NAME\n         AGO   .FNC0320\n.FNC0310 ANOP\n         DC    CL8' '                   NO PANEL NAME\n.FNC0320 ANOP\n         AIF   (T'&OPTVAL EQ 'O').GENEND\n&SUB     SETA  1\n.FNC0330 ANOP\n         DC    CL8'&OPTV(&SUB)'         VALID VALUE FOR OPTION\n         AIF   (&SUB EQ N'&OPTVAL).GENEND\n&SUB     SETA  &SUB+1\n         AGO   .FNC0330\n.GENEND  ANOP\nF&MACID  DS   0F\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'INVALID REQUIRED PARAMETER'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'FUNCTION IS REQUIRED'\n         MEXIT\n.ERR0030 ANOP\n         MNOTE 12,'FUNCTION NAME TOO LONG (1-4 CHARACTERS ONLY)'\n         MEXIT\n.ERR0040 ANOP\n         MNOTE 12,'NO COMMAND EXAMPLE GIVEN'\n         MEXIT\n.ERR0050 ANOP\n         MNOTE 12,'NO COMMAND DESCRIPTION'\n         MEXIT\n.ERR0060 ANOP\n         MNOTE 12,'BATCH/STC INPUT MODULE NAME SUFFIX TOO LONG'\n         MEXIT\n.ERR0070 ANOP\n         MNOTE 12,'OUTPUT MODULE NAME SUFFIX TOO LONG'\n         MEXIT\n.ERR0080 ANOP\n         MNOTE 12,'ENVIRONMENT (ENV) IS A REQUIRED PARAMETER'\n         MEXIT\n.ERR0090 ANOP\n         MNOTE 12,'TSO INPUT MODULE NAME SUFFIX TOO LONG'\n         MEXIT\n.ERR0100 ANOP\n         MNOTE 12,'TSO OUTPUT MODULE NAME SUFFIX TOO LONG'\n         MEXIT\n.ERR0110 ANOP\n         MNOTE 12,'NUMBER OF VALUES IN OPTVAL MUST BE 8 OR LESS'\n         MEXIT\n.ERR0120 ANOP\n         MNOTE 12,'A VALUE IN OPTVAL IS MORE THAN 8 CHARACTERS IN LENGT+\n               H'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTPRFX": {"ttr": 260, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ".* ------------------------------------------------------------------ *\n.*                                                                    *\n.*       ALL MODULES START WITH A COMMON PREFIX SET OF INSTRUCTIONS   *\n.*       AND EYECATCHER.  THIS ALLOWS THE TRACE ROUTINE AND THE       *\n.*       ABEND EXITS TO DETERMINE WHICH MODULE IS IN CONTROL.         *\n.*                                                                    *\n.* ------------------------------------------------------------------ *\n         MACRO\n&NAME    DITTPRFX &SAVE,&DESC,&TYPE=CSECT\n         AIF   ('&TYPE' EQ 'DSECT').L0010\n         AIF   (T'&SAVE EQ 'O').ERR0010\n         AIF   (T'&DESC EQ 'O').ERR0020\n         AIF   (T'&NAME EQ 'O').ERR0030\n&NAME    CSECT\n         USING &NAME,R12                                                ASE00100\n         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS                 ASE00110\n         LR    R12,R15             LOAD PERMANENT BASE                  ASE00120\n         LR    R2,R13              SAVE OLD REGISTER SAVE AREA ADDRESS  ASE00130\n         LA    R13,&SAVE           POINT TO OUR SAVE AREA               ASE00140\n         ST    R13,8(R2)           CHAIN FORWARD                        ASE00150\n         ST    R2,4(R13)           CHAIN BACKWARD                       ASE00160\n         B     @@000001            BYPASS ID/TIME/DESCRIPTION\n         DC    CL8'&NAME'          MODULE NAME\n         DC    CL8'&SYSDATE'       DATE OF ASSEMBLY\n         DC    CL6'&SYSTIME'       TIME OF ASSEMBLY\n         DC    C&DESC\n@@000001 DS    0H\n         MEXIT\n.L0010   ANOP\nMODPRFX  DSECT\n         STM   R14,R12,12(R13)     SAVE ENTRY REGISTERS                 ASE00110\n         LR    R12,R15             LOAD PERMANENT BASE                  ASE00120\n         LR    R2,R13              SAVE OLD REGISTER SAVE AREA ADDRESS  ASE00130\n         LA    R13,0               POINT TO SAVE AREA                   ASE00140\n         ST    R13,8(R2)           CHAIN FORWARD                        ASE00150\n         ST    R2,4(R13)           CHAIN BACKWARD                       ASE00160\n         B     0(R0)               BRANCH AROUND MOD NAME/TIME/DESC\nPFXMODNM DS    CL8                 MODULE NAME\nPFXMODDT DS    CL8                 ASSEMBLY DATE\nPFXMODTM DS    CL6                 ASSEMBLY TIME\nPFXMODDS DS    C                   DESCRIPTION\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'SAVE AREA NAME IS REQUIRED'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'DESCRIPTION IS REQUIRED'\n         MEXIT\n.ERR0030 ANOP\n         MNOTE 12,'CSECT NAME IS REQUIRED'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTRACE": {"ttr": 263, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ".* ------------------------------------------------------------------*\n.*                                                                   *\n.*                        TRACE MACRO                                *\n.*                                                                   *\n.*       THE TRACE FUNCTION ALWAYS CAPTURES THE CSECT NAME (TAKEN    *\n.*       FROM THE MODULE PREFIX DATA) AND A TRACE ID (SPECIFIED ON   *\n.*       THIS MACRO OR \"**NOID**\" IF THE ID PARAMETER IS OMITTED.    *\n.*                                                                   *\n.*       ONE OR TWO DATA ELEMENTS (8 BYTES EACH) MAY BE CAPTURED AT  *\n.*       ANY TRACE POINT.  THE DATA TO BE CAPTURED MAY BE SPECIFIED  *\n.*       IN EITHER OF TWO WAYS: DATA1 OR RDATA1 AND DATA2 OR RDATA2. *\n.*       DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE AS ARE DATA2 AND    *\n.*       RDATA2.  DATA1 AND DATA2 SPECIFY THE ADDRESS OF DATA TO BE  *\n.*       CAPTURED, RDATA1 AND RDATA2 SPECIFY A REGISTER WHOSE        *\n.*       CONTENTS ARE TO BE CAPTURED.                                *\n.*                                                                   *\n.*       FOR EXAMPLE:                                                *\n.*                                                                   *\n.*                 DITTRACE ID=POINTA,DATA1=VALUE1,RDATA2=R4         *\n.*                                                                   *\n.*          IN THIS CASE THE TRACE ENTRY WOULD INCLUDE THE CSECT     *\n.*          NAME, THE ID DATA \"POINTA\", 8 BYTES OF DATA BEGINNING    *\n.*          AT VALUE1'S ADDRESS AND THE CONTENTS OF REGISTER 4.      *\n.*                                                                   *\n.*       NOTE: REGISTER 14 IS THE ONLY REGISTER ALTERED BY THE       *\n.*             EXECUTION OF A TRACE MACRO, ALL OTHER REGISTERS MAY   *\n.*             BE TRACED WITHOUT LOSING THEIR CONTENTS.              *\n.*                                                                   *\n.* ------------------------------------------------------------------*\n         MACRO\n&NAME    DITTRACE &ID=,&DATA1=,&DATA2=,&RDATA1=,&RDATA2=\n         AIF   (T'&DATA1 NE 'O' AND T'&RDATA1 NE 'O').ERR0010\n         AIF   (T'&DATA2 NE 'O' AND T'&RDATA2 NE 'O').ERR0020\n         AIF   ('&SYSPARM' EQ 'NOTRACE').MEXIT\n         AIF   (T'&DATA1 EQ 'O').DATA020\n         AIF   ('&DATA1'(1,1) EQ '(').DATA010\n         LA    R14,&DATA1         DATA ADDRESS\n         MVC   COMMTRD1,0(R14)    MOVE DATA\n         AGO   .DATA030\n.DATA010 ANOP\n         MVC   COMMTRD1,0.&DATA1  MOVE DATA\n         AGO   .DATA030\n.DATA020 ANOP\n         AIF   (T'&RDATA1 EQ 'O').DATA030\n         STCM  &RDATA1,15,COMMTRD1\n.DATA030 ANOP\n         AIF   (T'&DATA2 EQ 'O').DATA050\n         AIF   ('&DATA2'(1,1) EQ '(').DATA040\n         LA    R14,&DATA2         DATA ADDRESS\n         MVC   COMMTRD2,0(R14)    MOVE DATA\n         AGO   .DATA060\n.DATA040 ANOP\n         MVC   COMMTRD2,0.&DATA2  MOVE DATA\n         AGO   .DATA060\n.DATA050 ANOP\n         AIF   (T'&RDATA2 EQ 'O').DATA060\n         STCM  &RDATA2,15,COMMTRD2\n.DATA060 ANOP\n         BAL   R14,COMMTR00       ENTER TRACE ROUTINE\n         AIF      (T'&ID EQ 'O').NOID\n&NAME    DC    CL8'&ID'           TRACE ID\n         AGO   .ID\n.NOID    ANOP\n&NAME    DC    CL8'**NOID**'\n.ID      ANOP\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'DATA1 AND RDATA1 ARE MUTUALLY EXCLUSIVE'\n         MEXIT\n.ERR0020 ANOP\n         MNOTE 12,'DATA2 AND RDATA2 ARE MUTUALLY EXCLUSIVE'\n.MEXIT   ANOP\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DITTTLBL": {"ttr": 266, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*---------------------------------------------------------------------*\n*                                                                     *\n*         TAPE LABEL DSECTS                                           *\n*                                                                     *\n*---------------------------------------------------------------------*\n          SPACE 1\n*---------------------------------------------------------------------*\n*        VOL1 DSECT                                                   *\n*---------------------------------------------------------------------*\nVOL1     DSECT\nVOL1ID   DS    CL4                'VOL1'\nVOL1VOL  DS    CL6                VOLUME SERIAL NUMBER\n         DS    X                  RESERVED\nVOL1VTOC DS    XL10               VTOC ADDRESS (DASD ONLY)\n         DS    XL16               RESERVED\nVOL1OWN  DS    CL14               OWNER AND ADDRESS CODE\n         DS    CL29               RESERVED\n         SPACE 2\n*---------------------------------------------------------------------*\n*        HDR1/EOV1/EOF1 DSECT                                         *\n*---------------------------------------------------------------------*\nHDR1     DSECT\nHDR1ID   DS    CL4                'HDR1'/'EOV1'/'EOF1'\nHDR1DSN  DS    CL17               DATASET NAME\nHDR1SER  DS    CL6                DATASET SERIAL NUMBER\nHDR1VSEQ DS    CL4                VOLUME SEQUENCE NUMBER\nHDR1DSEQ DS    CL4                DATASET SEQUENCE NUMBER\nHDR1GENR DS    CL4                GENERATION NUMBER\nHDR1VER  DS    CL2                VERSION NUMBER\nHDR1CDTE DS    CL6                CREATION DATE\nHDR1EXPD DS    CL6                EXPIRATION DATE\nHDR1SEC  DS    CL1                SECURITY\nHDR1BLKC DS    CL6                BLOCK COUNT\nHDR1SYS  DS    CL13               SYSTEM ID\n         DS    CL7                RESERVED\n         SPACE 2\n*---------------------------------------------------------------------*\n*        HDR2/EOV2/EOF2 DSECT                                         *\n*---------------------------------------------------------------------*\nHDR2     DSECT\nHDR2ID   DS    CL4                'HDR2'/'EOV2'/'EOF2'\nHDR2RF   DS    CL1                RECORD FORMAT\nHDR2BLSZ DS    CL5                BLOCK SIZE\nHDR2RSZ  DS    CL5                RECORD SIZE\nHDR2DEN  DS    CL1                TAPE DENSITY\nHDR2DPOS DS    CL1                DATASET POSITION\nHDR2JOB  DS    CL17               JOB/JOB STEP IDENTIFICATION\nHDR2RT   DS    CL2                RECORDING TECHNIQUE\nHDR2CC   DS    CL1                CONTROL CHARACTER\n         DS    CL1                RESERVED\nHDR2BLKA DS    CL1                BLOCK ATTRIBUTE\n         DS    CL8                RESERVED\nHDR2CKPT DS    CL1                CHECKPOINT DATASET ID\n         DS    CL32               RESERVED\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DYNBLOK": {"ttr": 776, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*--------------------------------------------------------------------*\n*                                                                    *\n*        DYNAMICALLY ACQUIRED RESOURCE BLOCK                         *\n*                                                                    *\n*      THIS MACRO WILL GENERATE A DSECT TO MAP THE AREA ACQUIRED     *\n*      TO REPRESENT A DEVICE.  THIS AREA WILL CONTAIN STORAGE FOR    *\n*      AN INITIALIZED AND \"OPENED\" DCB, AN IOB, AN ECB, 8 CCW'S, AND *\n*      CONTROL INFORMATION.                                          *\n*                                                                    *\n*--------------------------------------------------------------------*\n         MACRO\n&NAME    DYNBLOK  &TYPE=\n         AIF      ('&TYPE' EQ 'DSECT').DSECT\n         AIF      ('&TYPE' EQ 'SHORT').DSECT\n&NAME    DS       0C\n         AGO      .NODSECT\n.DSECT   ANOP\n         AIF      (T'&NAME EQ 'O').NONAME\n&NAME    DSECT\n.NODSECT ANOP\nDYNNEXT  DC    A(0)                ADDRESS OF NEXT BLOCK IN CHAIN\nDYNPREV  DC    A(0)                ADDRESS OF PREVIOUS BLOCK IN CHAIN\nDYNEYE   DC    CL8'DYNBLOK'        EYECATCHER\nDYNSTAT  DC    X'00'               STATUS FLAGS\n$DYNPEOT EQU   X'80'               .. TAPE IS AT PEOT\n$DYNTM   EQU   X'40'               .. TAPE MARK READ\n$DYNEOF  EQU   X'20'               .. DASD EOF RECORD READ\n$DYNPROT EQU   X'10'               .. TAPE IS FILE-PROTECTED\nDYNCUU   DC    XL2'0000'           CUU OF DEVICE\nDYNVOL   DC    CL6' '              DASD VOLSER\nDYNDDNAM DC    CL8' '              DD NAME\nDYNECB   DC    F'0'                AREA FOR ECB\nDYNDEBA  DC    A(0)                DEB ADDRESS\n         AIF   ('&TYPE' EQ 'SHORT').MEXIT\nDYNDCB   DC    (DYNDCBL)X'00'      AREA FOR DCB\nDYNIOB   DC    (IOBLEN)X'00'       AREA FOR IOB\nDYNCCW   DS    0D\nDYNCCW1  DS    XL8                 CCW #1\nDYNCCW2  DS    XL8                 CCW #2\nDYNCCW3  DS    XL8                 CCW #3\nDYNCCW4  DS    XL8                 CCW #4\nDYNCCW5  DS    XL8                 CCW #5\nDYNCCW6  DS    XL8                 CCW #6\nDYNCCW7  DS    XL8                 CCW #7\nDYNCCW8  DS    XL8                 CCW #8\nDYNHDADR DS    0XL4                MAX DISK ADDRESS\nDYNHCYL  DC    XL2'0'              .. HIGH CYLINDER NUMBER\nDYNHHEAD DC    XL2'0'              .. HIGH HEAD NUMBER\nDYNBLOKL EQU   *-DYNNEXT           LENGTH OF DYNAMIC BLOCK\n.MEXIT   ANOP\n         MEXIT\n.NONAME  ANOP\n         MNOTE    12,'NAME REQUIRED WHEN TYPE=DSECT'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EXCPBLOK": {"ttr": 269, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*--------------------------------------------------------------------*\n*                                                                    *\n*        'DITTEXCP' INTERFACE BLOCK                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\n         MACRO\n&NAME    EXCPBLOK &TYPE=\n         AIF      ('&TYPE' EQ 'DSECT').DSECT\n&NAME    DS       0A\n         AGO      .NODSECT\n.DSECT   ANOP\n         AIF      (T'&NAME EQ 'O').NONAME\n&NAME    DSECT\n.NODSECT ANOP\nEXCPDYN  DC    A(0)                DYNAMIC BLOCK ADDRESS\nEXCPLEN  DC    AL2(0)              LENGTH ACTUALLY USED BY THE I/O\nEXCPSTAT DC    X'00'               EXCP MODULE STATUS\n$EXCPOK  EQU   X'00'               .. ALL OK\n$EXCPRNF EQU   C'1'                .. RECORD NOT FOUND\n$EXCPIOE EQU   C'X'                .. I/O ERROR\n$EXCPNA  EQU   C'Z'                .. COMMAND NOT ALLOWED AT PEOT\n         MEXIT\n.NONAME  ANOP\n         MNOTE    12,'NAME REQUIRED WHEN TYPE=DSECT'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FUNCBLOK": {"ttr": 271, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*--------------------------------------------------------------------*\n*                                                                    *\n*      DSECT TO MAP THE FUNCTION ENTRIES IN MODULE 'DITTCMD'         *\n*                                                                    *\n*--------------------------------------------------------------------*\nFUNCBLOK DSECT\nFUNCELEN DS    AL2                ENTRY LENGTH\nFUNCCMD  DS    CL4                COMMAND NAME\nFUNCFLEN DS    AL2                LENGTH OF COMMAND NAME\nFUNCENV  DS    X                  ENVIRONMENTS COMMAND IS AVAILABLE IN\n$FUNCJOB EQU   X'80'              .. AVAILABLE IN BATCH JOB MODE\n$FUNCSTC EQU   X'40'              .. AVAILABLE IN STARTED TASK MODE\n$FUNCTSO EQU   X'20'              .. AVAILABLE IN TSO MODE\nFUNCNREQ DS    AL2                NUMBER OF REQUIRED PARAMETERS\nFUNCNOPT DS    AL2                NUMBER OF OPTIONAL PARAMETERS\nFUNCOPN  DS    AL2                NUMBER OF VALID VALUES FOR OPTION\nFUNCREQ  DS    XL10               REQUIRED PARAMETER ID'S\nFUNCOPT  DS    XL10               OPTIONAL PARAMETER ID'S\nFUNCIN1  DS    AL2                BATCH/STC INPUT MODULE DISPLACEMENT\nFUNCIN2  DS    AL2                TSO INPUT MODULE DISPLACEMENT\nFUNCOUT1 DS    AL2                BATCH/STC OUTPUT MODULE DISPLACEMENT\nFUNCOUT2 DS    AL2                TSO OUTPUT MODULE DISPLACEMENT\nFUNCIFLG DS    X                  INPUT MODULE FLAGS\nFUNCOFLG DS    X                  OUTPUT MODULE FLAGS\nFUNCEX1  DS    CL80               EXAMPLE OF COMMAND FOR BATCH\nFUNCEX2  DS    CL80               EXAMPLE OF COMMAND FOR STC AND TSO\nFUNCDESC DS    CL80               DESCRIPTION OF COMMAND\nFUNCPANL DS    CL8                PANEL NAME FOR TSO DISPLAY\nFUNCOPV  DS    0C                 VALID VALUES FOR OPTION\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "KEYWD": {"ttr": 273, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*--------------------------------------------------------------------*\n*                                                                    *\n*        KEYWD TO PARAMETER ID CONVERSION MACRO.  THIS MACRO IS ONLY *\n*        USED WITH THE BATCH JOB (CARD-INPUT) MODE.  RELATING        *\n*        MULTIPLE KEYWORDS TO THE SAME INTERNAL PARAMETER ALLOWS     *\n*        THE USER TO CODE COMMAND STATMENTS WITH GREATER FLEXABILITY.*\n*                                                                    *\n*        FOR EXAMPLE IF THE COMMAND IS \"TP\", THE REQUIRED PARAMETER  *\n*        IS \"CUUIN\".  YOU MAY ALLOW THE USE OF \"IN=\", 'CUUIN=\",      *\n*        \"INCUU=\", OR \"I=\" TO SPECIFY THE INPUT UNIT.  THIS ALLOWS   *\n*        THE USER TO USE WHICHEVER SPELLING IS MOST CONVENIENT FOR   *\n*        THEM TO REMEMBER.                                           *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*                                                                    *\n*        CODED:                                                      *\n*                                                                    *\n*          KEYWD &KEY,PARM=&PARM                                     *\n*                                                                    *\n*        MACRO PARAMETERS:                                           *\n*           &PARM          INTERNAL PARAMETER NAME.  VALUES CODED AS *\n*                          &PARM MUST BE DEFINED THROUGH A \"PARM\"    *\n*                          STATEMENT IN THE \"PARMGEN\" MACRO.         *\n*                                                                    *\n*  -------------------------------------------------------------     *\n*        EXAMPLE:                                                    *\n*                                                                    *\n*        KEYWD IN,PARM=CUUIN                                         *\n*        KEYWD CUUIN,PARM=CUUIN                                      *\n*                                                                    *\n*        IN THESE EXAMPLES, THE KEYWDS 'IN' AND 'CUUIN' ARE          *\n*        RELATED TO AN INTERNAL NAME 'CUUIN'.  CUUIN MUST BE DEFINED *\n*        AS A PARAMETER IN THE 'PARMGEN' MACRO.                      *\n*                                                                    *\n*--------------------------------------------------------------------*\n         MACRO\n         KEYWD &KEY,&PARM=\n         GBLC  &FLDN(50),&FLDID(50)\n         LCLA  &FLDSUB,&LEN\n&FLDSUB  SETA  1\n.KEYWD10 ANOP\n         AIF   (K'&FLDN(&FLDSUB) EQ 0).BADPARM\n         AIF   ('&FLDN(&FLDSUB)' EQ '&PARM').KEYWD20\n&FLDSUB  SETA  &FLDSUB+1\n         AGO   .KEYWD10\n.KEYWD20 ANOP\n&LEN     SETA  K'&KEY\n         DC    AL2(&LEN)              KEYWORD LENGTH\n         DC    CL8'&KEY'              KEYWORD\n         DC    CL8'&PARM'             INTERNAL PARM NAME\n         DC    XL1'&FLDID(&FLDSUB)'   PARAMETER ID\n         MEXIT\n.BADPARM ANOP\n         MNOTE 12,'INVALID INTERNAL PARAMETER'\n         MEXIT\n.NOKEY   ANOP\n         MNOTE 12,'KEYWD IS REQUIRED'\n         MEXIT\n.NOPARM  ANOP\n         MNOTE 12,'PARAMETER IS REQUIRED'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PARM": {"ttr": 530, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*--------------------------------------------------------------------*\n*                                                                    *\n*        PARAMETER DEFINITION MACRO                                  *\n*                                                                    *\n*        CODED:                                                      *\n*                                                                    *\n*          PARM PRMNAME,TYPE,RESULT,                                 *\n*               CHECKER=,                                            *\n*               PFLGS=,                                              *\n*               MMSG='MESSAGE TEXT',                                 *\n*               EMSG=' ERROR MESSAGE TEXT',                          *\n*               REQWTOR='WTOR TEXT'                                  *\n*                                                                    *\n*        MACRO PARAMETERS:                                           *\n*           &PRMNAME       A 1-8 CHARACTER NAME FOR THIS PARAMETER   *\n*                                                                    *\n*           &RESULT        THE LABEL IN 'DITTCOMM' THAT NAMES THE    *\n*                             AREA WHERE THE CONVERTED RESULT IS     *\n*                             TO BE STORED.                          *\n*                                                                    *\n*           &TYPE          FIELD RESULT TYPE.  VALID TYPES ARE:      *\n*                             CUU  FOR UNIT ADDRESSES                *\n*                             BIN  FOR BINARY VALUES (HALFWORD)      *\n*                             DEC  FOR PACKED DECIMAL                *\n*                             CHAR FOR CHARACTER                     *\n*                             ADDR FOR DISK ADDRESSES                *\n*                                                                    *\n*           &CHECKER=      1-4 CHARATER SUFFIX OF AN OPTIONAL MODULE *\n*                          TO DO PARAMETER VALIDITY CHECKING.  FOR   *\n*                          MOST PARAMETERS THE BASIC CHECKING IS     *\n*                          SUFFICIENT (NUMERIC FIELDS WILL ALWAYS    *\n*                          BE CHECKED FOR VALIDITY FOR EXAMPLE).     *\n*                                                                    *\n*           &PFLGS=        THESE FLAGS ARE COPIED TO 'COMMPFLG'      *\n*                          IF THIS PARAMETER IS USED ON A COMMAND.   *\n*                          PARAMETERS SUCH AS 'RECORDS' MODIFY A     *\n*                          COMMAND.  ALL VALUES SPECIFIED HERE SHOULD*\n*                          REFERENCE THE EQUATES ASSOCIATED WITH     *\n*                          THE 'COMMPFLG' FIELD IN THE 'DITTCOMM'    *\n*                          MACRO.                                    *\n*                                                                    *\n*           &MMSG=         A 1-80 CHARACTER MESSAGE THAT WILL BE     *\n*                          PRINTED IF THIS IS A REQUIRED PARAMETER   *\n*                          ON A COMMAND AND IT IS OMMMITED.          *\n*                                                                    *\n*           &EMSG=         A MESSAGE THAT IS TO BE SENT WHEN IN      *\n*                          CONSOLE MODE VIA A WTO WHEN THE DATA      *\n*                          FOR THIS PARAMETER WAS INVALID.           *\n*                                                                    *\n*           &REQWTOR=      A MESSAGE THAT WILL BE SENT TO THE        *\n*                          OPERATOR VIA A 'WTOR' MACRO TO REQUEST    *\n*                          THIS PARAMETER WHIN IN STARTED TASK MODE. *\n*                                                                    *\n*                                                                    *\n*  -------------------------------------------------------------     *\n*        EXAMPLE:                                                    *\n*                                                                    *\n*        PARM  CUUIN,CUU,COMMINU,                                    *\n*              MMSG='NO INPUT CUU SPECIFIED',                        *\n*              REQWTOR='ENTER FROM CUU'                              *\n*                                                                    *\n*        IN THIS EXAMPLE:  PRMNAME IS 'CUUIN' (WHICH MAY BE          *\n*                            REFERENCED IN THE KEYWD AND PARMID      *\n*                            MACROS AS &PARM, AND IN THE DITTFUNC    *\n*                            MACRO AS OPTPARM OR REQPARM VALUES.     *\n*                                                                    *\n*                          TYPE IS 'CUU'                             *\n*                                                                    *\n*                          RESULT IS 'COMMINU' WHICH MUST BE A LABEL *\n*                            IN 'DITTCOMM'                           *\n*                                                                    *\n*                          MMSG IS 'NO INPUT CUU SPECIFIED'          *\n*                                                                    *\n*                          REQWTOR IS 'ENTER FROM CUU'               *\n*                                                                    *\n*--------------------------------------------------------------------*\n         MACRO\n&NAME    PARM  &PRMNAME,                                               +\n               &TYPE,                                                  +\n               &RESULT,                                                +\n               &CHECKER=,                                              +\n               &PFLGS=,                                                +\n               &MMSG=,                                                 +\n               &EMSG=,                                                 +\n               &REQWTOR=\n         LCLA  &FLDSUB,&NBR\n         LCLC  &TYP,&ATOC\n         GBLA  &NBRPRMS\n         GBLB  &NOCODE,&NBRGEN\n         GBLC  &FLDN(50),&FLDID(50)\n         AIF   (&NBRGEN).LBL0000\n&FLDID(01) SETC '01'\n&FLDID(02) SETC '02'\n&FLDID(03) SETC '03'\n&FLDID(04) SETC '04'\n&FLDID(05) SETC '05'\n&FLDID(06) SETC '06'\n&FLDID(07) SETC '07'\n&FLDID(08) SETC '08'\n&FLDID(09) SETC '09'\n&FLDID(10) SETC '10'\n&FLDID(11) SETC '11'\n&FLDID(12) SETC '12'\n&FLDID(13) SETC '13'\n&FLDID(14) SETC '14'\n&FLDID(15) SETC '15'\n&FLDID(16) SETC '16'\n&FLDID(17) SETC '17'\n&FLDID(18) SETC '18'\n&FLDID(19) SETC '19'\n&FLDID(20) SETC '20'\n&FLDID(21) SETC '21'\n&FLDID(22) SETC '22'\n&FLDID(23) SETC '23'\n&FLDID(24) SETC '24'\n&FLDID(25) SETC '25'\n&FLDID(26) SETC '26'\n&FLDID(27) SETC '27'\n&FLDID(28) SETC '28'\n&FLDID(29) SETC '29'\n&FLDID(30) SETC '30'\n&FLDID(31) SETC '31'\n&FLDID(32) SETC '32'\n&FLDID(33) SETC '33'\n&FLDID(34) SETC '34'\n&FLDID(35) SETC '35'\n&FLDID(36) SETC '36'\n&FLDID(37) SETC '37'\n&FLDID(38) SETC '38'\n&FLDID(39) SETC '39'\n&FLDID(40) SETC '40'\n&FLDID(41) SETC '41'\n&FLDID(42) SETC '42'\n&FLDID(43) SETC '43'\n&FLDID(44) SETC '44'\n&FLDID(45) SETC '45'\n&FLDID(46) SETC '46'\n&FLDID(47) SETC '47'\n&FLDID(48) SETC '48'\n&FLDID(49) SETC '49'\n&FLDID(50) SETC '50'\n&NBRGEN  SETB  1\n.LBL0000 ANOP\n&NBR     SETA  &SYSNDX\n&FLDSUB  SETA  0\n.LBL0010 ANOP\n&FLDSUB  SETA  &FLDSUB+1\n         AIF   (&FLDSUB GT &NBRPRMS).LBL0020\n         AIF   ('&PRMNAME' NE '&FLDN(&FLDSUB)').LBL0010\n         MNOTE 12,'PARAMETER - &PRMNAME - IS DUPLICATED'\n         MEXIT\n.LBL0020 ANOP\n         AIF    (&NBRPRMS EQ 50).LBL0170\n&NBRPRMS SETA   &NBRPRMS+1\n&FLDN(&NBRPRMS)  SETC '&PRMNAME'\n         AIF   ('&TYPE' EQ 'BIN').LBL0030\n         AIF   ('&TYPE' EQ 'CUU').LBL0040\n         AIF   ('&TYPE' EQ 'DECIMAL').LBL0050\n         AIF   ('&TYPE' EQ 'CHAR').LBL0060\n         AIF   ('&TYPE' EQ 'ADDR').LBL0070\n         MNOTE 12,'INVALID PARM TYPE'\n         MEXIT\n.LBL0030 ANOP\n&TYP     SETC  '01'\n         AGO   .LBL0080\n.LBL0040 ANOP\n&TYP     SETC  '02'\n         AGO   .LBL0080\n.LBL0050 ANOP\n&TYP     SETC  '04'\n         AGO   .LBL0080\n.LBL0060 ANOP\n&TYP     SETC  '08'\n         AGO   .LBL0080\n.LBL0070 ANOP\n&TYP     SETC  '10'\n.LBL0080 ANOP\n         AIF   (T'&RESULT  EQ 'O').LBL0130\n         AIF   (T'&MMSG    EQ 'O').LBL0140\n         AIF   (T'&EMSG    EQ 'O').LBL0150\n         AIF   (T'&REQWTOR EQ 'O').LBL0160\n         AIF   (&NOCODE).EXIT\n&NAME    DC    AL2(P&NBR-*)       LENGTH OF THIS ENTRY\n         DC    CL8'&PRMNAME'      FIELD NAME\n         DC    AL2(&RESULT-DITTCOMM) RESULT FIELD ADDRESS OFFSET\n         DC    AL2(L'&RESULT)     LENGTH OF RESULT FIELD\n         DC    X'&FLDID(&FLDSUB)' FIELD ID\n         DC    X'&TYP'            FIELD DESCRIPTOR\n         AIF   (T'&PFLGS EQ 'O').LBL0090\n         DC    AL1(&PFLGS)        PROCESSING FLAGS\n         AGO   .LBL0100\n.LBL0090 ANOP\n         DC    X'00'              PROCESSING FLAGS\n.LBL0100 ANOP\n         AIF   (T'&CHECKER EQ 'O').LBL0110\n         DC    AL2(A&CHECKER-DITTCOMM)     CHECKER DISPLACEMENT\n         AGO   .LBL0120\n.LBL0110 ANOP\n         DC    AL2(0)             NO CHECKER FOR THIS FIELD\n.LBL0120 ANOP\n         DC    AL4(MMSG&NBR)      MESSAGE FOR MISSING FIELDS\n         DC    AL4(WTO&NBR)       ADDRESS OF WTO\n         DC    AL4(EWTO&NBR)      ADDRESS OF ERROR WTO\n         DC    AL4(WTOR&NBR)      ADDRESS OF WTOR\nMMSG&NBR DC    AL2(MMSGE&NBR-MMSGB&NBR)\nMMSGB&NBR DS   0C\n          DC   C&MMSG\nMMSGE&NBR DS   0C\nWTO&NBR  WTO   &MMSG,             WTO FOR MISSING FIELDS               +\n               CONSNAME=,         .. CONSOLE NAME                      +\n               MF=L               .. LIST FORM OF MACRO\nEWTO&NBR WTO   &EMSG,             WTO FOR INVALID DATA                 +\n               CONSNAME=,         .. CONSOLE NAME                      +\n               MF=L               .. LIST FORM OF MACRO\nWTOR&NBR WTOR  &REQWTOR,          WTOR MESSAGE IF STARTED TASK         +\n               ,                  .. REPLY AREA PROVIDED BY EXEC FORM  +\n               CONSNAME=,         .. CONSOLE NAME                      +\n               80,                .. REPLY AREA LENGTH                 +\n               ,                  .. ECB PROVIDED BY EXECUTE FORM      +\n               MF=L               .. LIST FORM\nP&NBR    DS    0H\n         MEXIT\n.LBL0130 ANOP\n         MNOTE 12,'NO RESULT FIELD SPECIFIED'\n         MEXIT\n.LBL0140 ANOP\n         MNOTE 12,'NO MISSING PARM MESSAGE SPECIFIED'\n         MEXIT\n.LBL0150 ANOP\n         MNOTE 12,'NO ERROR MESSAGE SPECIFIED'\n         MEXIT\n.LBL0160 ANOP\n         MNOTE 12,'NO WTOR MESSAGE SPECIFIED'\n         MEXIT\n.LBL0170 ANOP\n         MNOTE 12,'MORE THAN 50 PARAMETERS DEFINED, GLOBALS WILL HAVE T+\n               O BE ENLARGED'\n.EXIT    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARMBLOK": {"ttr": 276, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*--------------------------------------------------------------------*\n*                                                                    *\n*        'DITTPARM INTERFACE BLOCK                                   *\n*                                                                    *\n*--------------------------------------------------------------------*\n         MACRO\n&NAME    PARMBLOK &TYPE=\n         AIF      ('&TYPE' EQ 'DSECT').DSECT\n&NAME    DS       0A\n         AGO      .NODSECT\n.DSECT   ANOP\n         AIF      (T'&NAME EQ 'O').NONAME\n&NAME    DSECT\n.NODSECT ANOP\nPARMWTO  DC    A(0)                ADDRESS OF WTO FOR 'DITTPARM'\nPARMMSGA DC    A(0)                MESSAGE ADDRESS\nPARMOPV  DC    A(0)                VALID VALUES FOR OPTIONAL PARMS\nPARMOPN  DC    H'0'                NUMBER OF VALID VALUES FOR OPT PARMS\nPARMCMMD DC    X'00'               COMMAND\n$PARMLOC EQU   X'80'               .. LOCATE PARAMETER AND VALIDATE\n$PARMWTO EQU   X'40'               .. ISSUE WTOR PROMPT FOR PARAMETER\n$PARMEWTO EQU  X'20'               .. ISSUE ERROR WTO/PROMPT FOR PARM\n$PARMMIS EQU   X'10'               .. RETURN MESSAGE FOR MISSING PARMS\n$PARMINT EQU   X'08'               .. INITIALIZE PARMS IN DITTCOMM\nPARMPARM DC    X'00'               PARAMETER ID TO LOCATE\nPARMWORK DC    CL44' '             OPERAND OF CORRESPONDING PARAMETER\nPARMWLEN DC    XL2'0000'           LENGTH OF OPERAND\nPARMFLAG DC    X'00'               FLAGS/INDICATORS\n$PARMOK  EQU   X'80'               .. PARAMETER FOUND/OPERAND GOOD\n$PARMCAN EQU   X'40'               .. OPERATOR REQUESTED 'CANCEL'\n$PARMCKE EQU   X'20'               .. ERROR FOUND BY CHECKER MODULE\n         MEXIT\n.NONAME  ANOP\n         MNOTE    12,'NAME REQUIRED WHEN TYPE=DSECT'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARMGEN": {"ttr": 278, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ".* ----------------------------------------------------------------- *\n.*                                                                   *\n.*       PARAMETER DEFINITIONS                                       *\n.*                                                                   *\n.*       ANY PARAMETERS REFERENCED IN THE KEYWD, PARMID, AND         *\n.*       THE DITTFUNC (REQPARM AND OPTPARM PARAMETERS) MACROS        *\n.*       MUST BE DEFINED IN THIS MACRO.                              *\n.*                                                                   *\n.* ------------------------------------------------------------------*\n         MACRO\n         PARMGEN &GEN=\n         GBLB  &NOCODE\n         AIF   ('&GEN' NE 'NO').GEN\n&NOCODE  SETB  1\n.GEN     ANOP\n         PARM  CUUIN,CUU,COMMINU,                                      +\n               MMSG='NO INPUT CUU SPECIFIED',                          +\n               EMSG='INVALID INPUT CUU SPECIFIED',                     +\n               REQWTOR='ENTER FROM CUU'\n         PARM  CUUOUT,CUU,COMMOUTU,                                    +\n               MMSG='NO OUTPUT CUU SPECIFIED',                         +\n               EMSG='INVALID OUTPUT CUU SPECIFIED',                    +\n               REQWTOR='ENTER OUTPUT CUU'\n         PARM  FILES,DECIMAL,COMMFILS,                                 +\n               PFLGS=$COMMFLS,                                         +\n               MMSG='NUMBER OF FILES NOT SPECIFIED',                   +\n               EMSG='INVALID NUMBER OF FILES SPECIFIED',               +\n               REQWTOR='ENTER NUMBER OF FILES NNN'\n         PARM  RECORDS,DECIMAL,COMMRCDS,                               +\n               PFLGS=$COMMRCS,                                         +\n               MMSG='NUMBER OF RECORDS NOT SPECIFIED',                 +\n               EMSG='INVALID NUMBER OF RECORDS SPECIFIED',             +\n               REQWTOR='ENTER NUMBER OF RECORDS NNN'\n         PARM  RECSIZE,BIN,COMMLRCL,                                   +\n               MMSG='LOGICAL RECORD LENGTH NOT SPECIFIED',             +\n               EMSG='INVALID LOGICAL RECORD LENGTH SPECIFIED',         +\n               REQWTOR='ENTER LOGICAL RECORD SIZE'\n         PARM  UNIT,CUU,COMMINU,                                       +\n               MMSG='NO DEVICE NAME GIVE (CUU)',                       +\n               EMSG='INVALID DEVICE CUU GIVEN',                        +\n               REQWTOR='ENTER DEVICE CUU'\n         PARM  BLKSIZE,BIN,COMMBLSZ,                                   +\n               MMSG='NO OUTPUT BLOCK SIZE GIVEN',                      +\n               EMSG='INVALID OUTPUT BLOCK SIZE GIVEN',                 +\n               REQWTOR='ENTER OUTPUT BLOCK SIZE NNNNN'\n         PARM  DENSITY,CHAR,COMMDWRD,                                  +\n               CHECKER=PRMD,                                           +\n               PFLGS=$COMMDEN,                                         +\n               MMSG='RECORDING DENSITY NOT GIVEN',                     +\n               EMSG='INVALID RECORDING DENSITIY',                      +\n               REQWTOR='ENTER RECORDING DENSITY (1600 OR 6250)'\n         PARM  LOWVOL,CHAR,COMMLOV,                                    +\n               MMSG='VOLSER NOT GIVEN FOR TAPE INITIALIZATION',        +\n               EMSG='INVALID VOLSER GIVEN FOR TAPE INITIALIZATION',    +\n               REQWTOR='ENTER VOLSER'\n         PARM  HIGHVOL,CHAR,COMMHIV,                                   +\n               CHECKER=PRMV,                                           +\n               MMSG='SHOULD NEVER BE ISSUED',                          +\n               EMSG='INVALID VOLSER GIVEN FOR UPPER LIMIT',            +\n               REQWTOR='ENTER HIGH VOLSER'\n         PARM  DISKADDR,ADDR,COMMDADR,                                 +\n               MMSG='DISK ADDRESS NOT SPCIFIED',                       +\n               EMSG='INVALID DISK ADDRESS',                            +\n               REQWTOR='ENTER DISK ADDRESS (CCCCHHR)'\n         PARM  INQQUAL,CHAR,COMMINQ,                                   +\n               MMSG='INQUIRY PARAMETER NOT GIVEN',                     +\n               EMSG='INVALID INQUIRY PARAMETER',                       +\n               REQWTOR='ENTER INQUIRY PARAMETER'\n         PARM  OPT,CHAR,COMMOPT,                                       +\n               CHECKER=PRMO,                                           +\n               PFLGS=$COMMOPT,                                         +\n               MMSG='INTERNAL ERROR, OPTION PARM BEING REQUESTED',     +\n               EMSG='OPTION PARAMETER IS INVALID',                     +\n               REQWTOR='ENTER OPTION PARAMETER'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARMID": {"ttr": 513, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*--------------------------------------------------------------------*\n*                                                                    *\n*        DITTO USES AN 'ID' INTERNALLY FOR IDENTIFYING FIELDS.  THE  *\n*        FIELD ID'S ARE SEQUENTIALLY ASSIGNED NUMBERS, THE FIRST     *\n*        FIELD DEFINED IN THE PARMGEN MACRO WILL BE FIELD '01',      *\n*        THE SECOND WILL BE '02', AND SO ON.  IF PARAMETERS ARE      *\n*        ADDED TO THE PARMGEN MACRO OR IF THE PARAMETERS WERE TO     *\n*        TO BE RE-ARRANGED, ANY REFERENCES TO THE FIELD ID'S WOULD   *\n*        HAVE TO BE CHANGED ACCORDINGLY.  THIS MACRO WILL SEARCH     *\n*        THE ASSEMBLER GLOBAL VARIABLE 'FLDN' AND DETERMINE THE      *\n*        FIELD ID.                                                   *\n*                                                                    *\n*        OUTPUT FROM THE MACRO IS A 'DC' INSTRUCTION:                *\n*              DC      X'..'                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\n         MACRO\n&NAME    PARMID &PRMNAME\n         AIF   (T'&PRMNAME EQ 'O').LBL0100\n         LCLA  &FLDSUB\n         GBLA  &NBRPRMS\n         GBLC  &FLDN(50),&FLDID(50)\n&FLDSUB  SETA  1\n.LBL0010 ANOP\n         AIF   ('&PRMNAME' EQ '&FLDN(&FLDSUB)').LBL0020\n&FLDSUB  SETA  &FLDSUB+1\n         AIF   (&FLDSUB LE &NBRPRMS).LBL0010\n         MNOTE 12,'PARAMETER - &PRMNAME - IS NOT DEFINED'\n         MEXIT\n.LBL0020 ANOP\n&NAME    DC    X'&FLDID(&FLDSUB)' FIELD ID\n         MEXIT\n.LBL0100 ANOP\n         MNOTE 12,'NO PARAMETER NAME SPECIFIED'\n.EXIT    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRTBLOK": {"ttr": 515, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*--------------------------------------------------------------------*\n*                                                                    *\n*        PRINTER REQUEST BLOCK                                       *\n*                                                                    *\n*--------------------------------------------------------------------*\n         MACRO\n&NAME    PRTBLOK  &TYPE=\n         AIF      ('&TYPE' EQ 'DSECT').DSECT\n&NAME    DS       0C\n         AGO      .NODSECT\n.DSECT   ANOP\n         AIF      (T'&NAME EQ 'O').NONAME\n&NAME    DSECT\n.NODSECT ANOP\nPRTCMMD  DC    X'00'               COMMAND\n$PRTHEAD EQU   X'80'               .. INITIAL HEADINGS\n$PRTCMD  EQU   X'40'               .. PRINT COMMAND\n$PRTDATA EQU   X'20'               .. PRINT DATA\nPRTCC    DC    C' '                CARRIAGE CONTROL\nPRTDATA  DC    CL120' '            PRINT DATA\n         MEXIT\n.NONAME  ANOP\n         MNOTE    12,'NAME REQUIRED WHEN TYPE=DSECT'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REGEQU": {"ttr": 517, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "R0       EQU    0\nR1       EQU    1\nR2       EQU    2\nR3       EQU    3\nR4       EQU    4\nR5       EQU    5\nR6       EQU    6\nR7       EQU    7\nR8       EQU    8\nR9       EQU    9\nR10      EQU    10\nR11      EQU    11\nR12      EQU    12\nR13      EQU    13\nR14      EQU    14\nR15      EQU    15\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STATMSG": {"ttr": 774, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&LABEL   STATMSG &STAT=,                                               +\n               &FLAGS=,                                                +\n               &MESSAGE=\nMSGB&SYSNDX DS 0F\n&LABEL   DC    AL2(MSGE&SYSNDX-MSGB&SYSNDX)      LENGTH OF ENTRY\n         DC    AL1(&STAT)                        DAIR STATUS\n         AIF   (T'&FLAGS NE 'O').LBL0010\n         DC    AL1(0)                            NO FLAGS\n         AGO   .LBL0020\n.LBL0010 ANOP\n         DC    AL1(&FLAGS)                       FLAGS\n.LBL0020 ANOP\n         WTO   &MESSAGE,                                               +\n               CONSNAME=,                        CONSOLE NAME          +\n               MF=L                              MACRO FORM\nMSGE&SYSNDX DS 0F\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VDEF": {"ttr": 519, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*        THIS MACRO GENERATES PARAMETER LISTS USED BY THE TSO MODE    *\n*        MAINLINE 'DITTTSOM' TO DEFINE VARIABLES TO SPF.  MULTIPLE    *\n*        FIELDS MAY BE DEFINED IN ONE EXPANSION OF THIS MACRO.  ALL   *\n*        FIELDS DEFINED IN ONE VDEF MACRO MUST BE THE SAME LENGTH.    *\n*                                                                     *\n*        PARAMETER \"FIELDS\" MUST PAIRED VALUES:                       *\n*                                                                     *\n*            FOR EXAMPLE FIELDS=(VAR1,DATA1,VAR2,DATA2)               *\n*                                                                     *\n*            IN THIS CASE THE VARIABLE NAMES ARE VAR1 AND VAR2, AND   *\n*            THE CORRESPONDING DATA IS IN 'DITTCOMM' AT LABELS DATA1  *\n*            AND DATA2.                                               *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         MACRO\n&LBL     VDEF  &FIELDS=,&LENGTH=\n         LCLA  &WORK1,&WORK2,&FLDCNT,&SUB1,&SUB2\n         AIF   (N'&FIELDS EQ 0).ERR0000\n&WORK1   SETA  N'&FIELDS/2\n&WORK2   SETA  &WORK1*2\n         AIF   (&WORK2 NE N'&FIELDS).ERR0010\n&LBL     DC    F'&LENGTH'\n&SUB1    SETA  1\n&SUB2    SETA  2\n.MAIN010 ANOP\n         DC    CL8'&FIELDS(&SUB1)'\n         DC    AL2(&FIELDS(&SUB2)-DITTCOMM)\n         AIF   (&SUB2 EQ N'&FIELDS).MAIN020\n&SUB1    SETA  &SUB1+2\n&SUB2    SETA  &SUB2+2\n         AGO   .MAIN010\n.MAIN020 ANOP\n         DC    X'FF'\n         MEXIT\n.ERR0000 ANOP\n         MNOTE 12,'NO FIELDS SPECIFIED'\n         MEXIT\n.ERR0010 ANOP\n         MNOTE 12,'MIS-MATCHED FIELD NAME/FIELD ADDRESS'\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT809/CBT.V500.FILE809.PDS/MACLIB.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT809/CBT.V500.FILE809.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}