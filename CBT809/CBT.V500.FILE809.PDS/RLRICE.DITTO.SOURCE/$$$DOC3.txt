
I added this member for those types who would like to understand the
"nuts and bolts" of how DITTO is designed.



DITTO was written as a learning exercise.  I "cut my teeth" on DOS and
when I began working with MVS, I wanted to learn how things like
handling abends, communicating with the operator, etc worked under MVS.
One of the first utilities that I learned to use on DOS was DITTO.  I
don't know how anyone gets by without DITTO (I never found a bug in
DITTO either).  I found that MVS has many good utilities, but nothing
quite like DITTO.

DITTO
    1) determines its environment (batch, STC, TSO)
    2) intercepts abends (ESTAE)
    3) dynamically allocates/frees devices
    4) performs EXCP I/O to tape and dasd
    5) communicates with the operator (in STC mode)
    6) uses SPF panels
    7) I found out that not all MVS's are created equal... some use JES2
       and others use JES3.  If you use JES3, and you don't allow BLP
       processing, and the tape is standard labelled, you must know the
       volser before you use the tape (even if you are only going to
       read it).  One of the main uses of DITTO is to find out what is
       on a tape by "breaking the rules", like not having to know
       volsers or data set names.  At times you may have a tape with
       "botched" labels or some other non-standard situation.  DITTO
       can allow you to position the tape where you want it, copy
       portions, back space, forward space, write tape marks anywhere...
       To get around JES, tape management systems, RACF, etc DITTO
       bypasses OPEN and "opens" the data sets itself.  So DITTO uses
       some APF required services and builds its own DEB (another
       learning experience).


At the high level the flow of DITTO is:

   1) DITTINIT determines the environment (batch, STC, or TSO)
   2) if the environment is batch or STC
         a) call the batch/STC mainline DITTMAIN
         b) if batch, DITTMAIN will call DITTCARD to obtain a command
             . DITTCARD will call DITTCDI1 to read the control records
             . DITTCARD will call DITTPARM to convert the parameters
                  one at a time into internal format.
             . DITTCARD will determine if the command was valid and
                  if all required parameters were present.
             . If the command was not valid an error message will be
                  printed and DITTCARD will look for the next command.
             . If some required parameter was invalid or missing, a
                  message will be printed for each and DITTCARD will
                  look for the next valid command.
             . If the command and all parameters were valid and present,
                  the input module address, output module address,
                  input module processing options byte, output module
                  processing options byte will be set then DITTCARD will
                  return to DITTMAIN.
         c) if STC, DITTMAIN will call DITTCONS to obtain a command.
             . DITTCONS issues a WTOR asking for a command
             . DITTCONS will verify the command and call DITTPARM to
                  convert the parameters one at a time into internal
                  format.
             . if the command was not valid, DITTCONS will issue a
                  WTO explaining the command was not valid and issue
                  another WTOR for asking for a valid command.
             . if a required parameter is missing or invalid, DITTCONS
                  will issue a WTO explaining which parameter is
                  missing or invalid and a WTOR asking for the parameter.
             . if the command is valid and all required parameters are
                  entered the input module address, output module
                  address, input module processing options byte, output
                  module processing options byte will be set then
                  DITTCONS will return to DITTMAIN.
         d) After DITTCARD or DITTCONS returns with a valid command,
            DITTMAIN calls DITTDAIR to locate the "DYNBLOK" for the
            input and output devices (except for card, punch, or print).
            The exception to this is command "ACQ" which allocates the
            devices and builds the "DYNBLOK"s.  The DYNBLOK address for
            the input device and output device are in the common area.
         e) After the input and output device are located, DITTMAIN
            enters an input-output loop.  Some commands do not have
            both an input and output module, if the command is input-
            only, the output module address will be zero.  Likewise if
            the command is output-only, the input module address will
            be zero.  The loop continues until either the input or
            output module signals "end-of-file".  Note that "end-of-file"
            can be set by output modules... for example the WTM command
            is output only, so the output module signals eof when it has
            written the requested number of tape marks.
         f) When eof is signalled, DITTMAIN performs "reset"... the
            input module address and processing options are cleared,
            output module address and processing options are cleard,
            input and output DYNBLOK addresses are cleared, DITTPARM
            is called to reset all parameters from the previous command.
         g) go back to step "b"

      if the environment is TSO, call the TSO mainline DITTTSOM.
         a) DITTTSOM defines the SPF variables.
         b) DITTTSOM builds the menu data and displays the menu panel.
         c) DITTTSOM verifies the command is valid and calls DITTPARM
               to convert the parameters to internal format.
         d) if the command is not valid, a message is added to the menu
               panel and the menu is displayed again.
         e) if a parameter is invalid or a required parameter is missing,
               a message is added to the menu explaining the problem and
               the menu is displayed again.
         f, g, h would be the same as steps d, e, and f for batch and STC modes.
         i) go to step b.

   3) The batch/STC or TSO mainlines return control to DITTINIT.
      DITTINIT frees the trace table and work areas and terminates.




All parameter conversion is performed by DITTPARM whether in batch, STC,
or TSO environment.  This reduced the amount of code over-all, and if
any special conversion technique was needed for a parameter, the same
code could be used for any other parameter with the same internal format.
The resultant value for all parameters is a field in DITTCOMM.  The
parameter definition table specifies the internal field name, internal
field id, format, displacement of the field into DITTCOMM, length of
the field in DITTCOMM, and messages to issue if the parameter is missing
or invalid.  Each parameter causes an entry to be added to an assembler
GLOBAL variable.  On commands the required and optional parameters
on the DITTFUNC macro reference the field names in this GLOBAL variable.
Part of the output of the DITTFUNC macro is two tables that contain up
10 parameter id fields.  This is how DITTO knows which fields are valid,
and required or optional for each command.  For STC and TSO modes the
order of the field names in the REQPARM parameter defines the order the
command parameters must be entered.  For batch mode, DITTCARD keeps a
table of the parameters entered on the command, then makes sure all the
parameters in the REQPARM list are in the table.
