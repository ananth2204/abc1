{"INMR01": {"INMLRECL": 80, "INMFNODE": "BVOMM", "INMFUID": "RLRICE", "INMTNODE": "BVOMM", "INMTUID": "RLRICE", "INMFTIME": "20090709161559000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1410864, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 4000, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "RLRICE.DITTO.SOURCE", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1410864, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1410864, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"RLRICE.DITTO.SOURCE": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 4000, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3339, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 0}, "COPYR2": {"deb": "b'\\x02\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x06\\xb0\\x00\\x04y`@'", "extents": ["b'\\x02\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x06\\xb0\\x00\\x04y`@'", "b'X\\xe2)\\xe0\\x00\\x00\\x001\\x00\\x01\\x002\\x00\\x07\\x00\\x16'", "b'X\\xe2)\\xe0\\x00\\x00\\x002\\x00\\x08\\x003\\x00\\x03\\x00\\x0b'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$DOC": {"ttr": 17, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "  MEMBER    DESCRIPTION\n  $$$DOC    THIS MEMBER\n  ASMJCL    SAMPLE JCL TO ASSEMBLE AND LINKEDIT DITTO\n  DITTAUTH  DYNAMIC AUTH/DE-AUTH (TSO ENVIROMENT)\n  DITTALOC  ACQ/REL COMMANDS\n  DITTATTN  TSO ATTENTION EXIT\n  DITTCARD  BATCH ENVIRONMENT COMMAND READER\n  DITTCDI1  CARD READER\n  DITTCDO1  CARD PUNCH\n  DITTCMD   COMMANDS TABLE\n  DITTCOMM  COMMON DATA MODULE\n  DITTCONS  STC ENVIRONMENT COMMAND READER\n  DITTDAIR  SYSTEM DAIR INTERFACE\n  DITTDAI1  DASD READER\n  DITTEXCP  EXCP I/O MODULE\n  DITTINIT  INITIALIZATION/TERMINATION MODULE\n  DITTINQ   BATCH/STC INQ FUNCTION\n  DITTMAIN  BATCH/STC MAINLINE\n  DITTPARM  PARAMETER CONVERTER\n  DITTPRMD  DENSITY PARAMETER EDIT CHECKER\n  DITTPRMO  'OPTION' PARAMETER EDIT CHECKER\n  DITTPRMV  VOLSER PARAMETER EDIT CHECKER\n  DITTPRO1  'PRINT' OUTPUT\n  DITTPRT   PRINTER\n  DITTSTAE  STAE EXIT\n  DITTTINT  TAPE INITIALIZATION COMMAND\n  DITTTMAP  TAPE MAP COMMAND\n  DITTTPI1  TAPE READER\n  DITTTPI2  FORWARD SPACE FILE COMMAND\n  DITTTPI3  BACK-SPACE RECORDS COMMAND\n  DITTTPI4  BACK-SPACE FILE COMMAND\n  DITTTPO1  TAPE OUTPUT\n  DITTTPO2  TAPE REWIND COMMAND\n  DITTTPO3  TAPE REWIND-UNLOAD COMMAND\n  DITTTPO4  WRITE TAPE MARK COMMAND\n  DITTTSOM  TSO ENVIRONMENT MAINLINE\n  DITTTSO1  TSO ENVIRONMENT DATA DISPLAY\n  DITTTSO2  TSO ENVIRONMENT TAPE MAP\n  DITTTSO3  TSO ENVIRONMENT INQ FUNCTION\n  DITTXXXX  DUMMY END OF LOAD MODULE\n  JCL       SAMPLE JCL TO EXECUTE DITTO IN BATCH\n  PROC      SAMPLE JCL TO EXECUTE DITTO AS A STARTED TASK\n  TSODITTO  SAMPLE CLIST TO EXECUTE DITTO FROM TSO\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$DOC2": {"ttr": 19, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "                       Installing DITTO\n\n1)  Allocate a SOURCE, MACLIB, ISPPLIB or ISPPENU, and if you want\n    to keep DITTO in its own loadlib a LOADLIB that must be APF\n    authorized.\n\n    Space estimates:\n                         3380 tracks   Directory blocks      DCB\n         SOURCE              30               10          FB, 80, 3120\n         MACLIB               5                5          FB, 80, 3120\n         ISPPLIB or ISPPENU   2                2          FB, 80, 3120\n         LOADLIB              1                1          U, 6144\n\n   ** You do need separate SOURCE and MACLIBs.\n\n\n2)  DITTO bypasses opens so it must run APF authorized.  In the TSO\n    environment DITTO will dynamically authorize and de-authorize itself\n    if you have an SVC for this purpose.  Add the code necessary to\n    invoke your SVC in source member DITTAUTH.\n\n3)  Edit the ASMJCL member of the SOURCE library:\n\n         a)  Change the JOBCARD to your site's requirements\n         b)  Change the MACLIB references to the name you gave to the\n             DITTO maclib.\n         c)  Change the SOURCE library references to the name you gave\n             the DITTO source lib.\n         d)  Change the LOADLIB references to the name you gave the\n             DITTO loadlib or the name of an existing APF authorized\n             library.\n\n4)  Run the ASMJCL member to assemble and link DITTO (should produce\n    about 75,000 lines of print).\n\n5)  If you want to run DITTO as a started task, add a PROC to one of\n    your JES proclibs (member \"PROC\" in the SOURCE library may be used\n    as a sample).\n\n6)  If you want to use DITTO from a TSO session:\n       a) the panels must be available so either add the ISPPLIB or\n          ISPPENU library to your logon proc or allocate it in a CLIST\n          or REXX exec.\n       b) The LOADLIB must be available so add it to your LINKLST or\n          your logon proc or allocate it in a CLIST or REXX exec.\n       c) If you want to do tape functions, the user must have MOUNT\n          authority.\n\n\n\n\n                        Using DITTO\n\nBATCH job\nWhen running as a batch job, DITTO reads its control statements from\nSYSIN.  Control statements must contain the string '$$DITTO ' in columns\n1 to 8.  Parameters are specified by keywords.  Control statements may\nspan more than one control statement (that is \"continued\").  To indicate\nthat a statement is continued, code a comma and a blank after the last\nkeyword/value on the current statement, for example:\n\n     $$DITTO TT,IN=xxx,\n     $$DITTO    OUT=yyy,\n     $$DITTO    FILES=3\n\n  in this example the command is a tape-to-tape copy, input device is\n  unit 'xxx', the output device is unit 'yyy', and 3 files would be\n  copied.\n\nKeywords may be specified in any order and must be delimited from the\nvalue by an equal (=) sign.  Keyword/values must be separated from\neach other by commas.  A blank indicates end-of-statement.  Comments\nmay be coded on control statements after the first blank.\n\nFor a list of the commands available, execute DITTO and specifiy command\n'XXX' ($$DITTO XXX).\n\n\n\nSTARTED TASK\nWhen running as a started task DITTO will prompt the operator for\ncommands.  Parameters are positional.  If the operator omits a parameter\nor the value specified is invalid, DITTO will prompt the operator with a\nmessage explaining that a parameter was omitted or was invalid and will\nallow the parameter to be entered without having to re-key the entire\ncommand.  If you did omit a parameter or one was invalid and you would\nrather abort the command, you may enter 'CANCEL' to the prompt for the\nmissing or invalid parameter and DITTO will prompt for a new command.\nIf you know the command you want to use, but you can't remember all of\nthe parameters or you can't remember their order, enter the command\nwith a question mark (?) and DITTO will respond with a sample of the\ncommand.  For example if you want to do a tape-to-tape copy, the command\nis 'TT'.  If you enter 'TT,?' to the command prompt, DITTO will respond\nwith 'TT,INCUU,OUTCUU,# OF FILES', and will prompt for a command again.\nYou could have just entered 'TT' and DITTO would have prompted for the\ninput device, then the output device, and then the number of files one\nparameter at a time (since this is more time consuming, you may want to\nuse the question mark method).  Some parameters are optional, like the\nnumber of records on the TP command.  If you omit the number of records,\nDITTO assumes you want the entire file printed, it will not prompt for\nomitted optional parameters... you may print a lot more than you had in\nmind.  If you omit a required parameter and optional parameters, DITTO\nwill prompt for the missing required ones, not the optional ones.  If\nyou want to enter the optional parameter (to limit the number of records\nfor example), you may want to enter 'CANCEL' to the prompt for the\nmissing required parameter and re-enter the entire command with the\noptional value specified.  If you enter an optional parameter with an\ninvalid value (like alpha characters in RECORDS), DITTO will prompt to\nto allow a valid value to be entered.\n\n\nTSO\nIn TSO mode DITTO prompts for commands and parameters with ISPF panels.\nParameters are positional, just like in started task mode.  Rather than\nprompting for missing and invalid parameters, DITTO resends the menu\nscreen with error messages explaining the problem.  Tape and disk reads\nalways read one physical block at a time.  If you asked for de-blocking,\nthe logical records in the block will be separated.  Data is displayed\nin ISPF tables.  The data may be browsed forward and backward one\nphysical block at a time.  To use tape commands, the user must have\nMOUNT authority.  DITTO issues WAITs that may cause your TSO session\nto 'hang' waiting I/O, especially tape... I would not use DITTO from\nmy TSO session without being physically close the to tape drive.\n\n\n\nGENERAL\nThe commands and print are as similar to IBM's DOS/DITTO as I could make\nthem.  One significant difference is the 'ACQ' command.  The 'ACQ'\ncommand allocates devices to DITTO.  This prevents MVS from allocating\nthe device to another user between commands (you wouldn't want to get\nthe tape positioned where you want it only to have another job cause\nit to be re-wound).  Also MVS has a nasty habit of rewinding and\nunloading tapes when they are allocated, if you allocated tapes for each\ncommand, MVS would rewind and unload it each time.  The 'REL' command\nis the complement command to 'ACQ' and releases devices (of course all\ndevices are released when DITTO terminates).\n\nDITTO bypasses MVS open.  This means you can read data whether you should\nbe authorized or not.  It also means anyone else who has access to DITTO\ncan do the same.  There are no SMF records generated either, so not\nonly are security measures bypassed, there is no trace of the access\nat all.  If you use DITTO to write on a tape, tape management systems\nlike TMS are not aware of the update either.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$$DOC3": {"ttr": 23, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\nI added this member for those types who would like to understand the\n\"nuts and bolts\" of how DITTO is designed.\n\n\n\nDITTO was written as a learning exercise.  I \"cut my teeth\" on DOS and\nwhen I began working with MVS, I wanted to learn how things like\nhandling abends, communicating with the operator, etc worked under MVS.\nOne of the first utilities that I learned to use on DOS was DITTO.  I\ndon't know how anyone gets by without DITTO (I never found a bug in\nDITTO either).  I found that MVS has many good utilities, but nothing\nquite like DITTO.\n\nDITTO\n    1) determines its environment (batch, STC, TSO)\n    2) intercepts abends (ESTAE)\n    3) dynamically allocates/frees devices\n    4) performs EXCP I/O to tape and dasd\n    5) communicates with the operator (in STC mode)\n    6) uses SPF panels\n    7) I found out that not all MVS's are created equal... some use JES2\n       and others use JES3.  If you use JES3, and you don't allow BLP\n       processing, and the tape is standard labelled, you must know the\n       volser before you use the tape (even if you are only going to\n       read it).  One of the main uses of DITTO is to find out what is\n       on a tape by \"breaking the rules\", like not having to know\n       volsers or data set names.  At times you may have a tape with\n       \"botched\" labels or some other non-standard situation.  DITTO\n       can allow you to position the tape where you want it, copy\n       portions, back space, forward space, write tape marks anywhere...\n       To get around JES, tape management systems, RACF, etc DITTO\n       bypasses OPEN and \"opens\" the data sets itself.  So DITTO uses\n       some APF required services and builds its own DEB (another\n       learning experience).\n\n\nAt the high level the flow of DITTO is:\n\n   1) DITTINIT determines the environment (batch, STC, or TSO)\n   2) if the environment is batch or STC\n         a) call the batch/STC mainline DITTMAIN\n         b) if batch, DITTMAIN will call DITTCARD to obtain a command\n             . DITTCARD will call DITTCDI1 to read the control records\n             . DITTCARD will call DITTPARM to convert the parameters\n                  one at a time into internal format.\n             . DITTCARD will determine if the command was valid and\n                  if all required parameters were present.\n             . If the command was not valid an error message will be\n                  printed and DITTCARD will look for the next command.\n             . If some required parameter was invalid or missing, a\n                  message will be printed for each and DITTCARD will\n                  look for the next valid command.\n             . If the command and all parameters were valid and present,\n                  the input module address, output module address,\n                  input module processing options byte, output module\n                  processing options byte will be set then DITTCARD will\n                  return to DITTMAIN.\n         c) if STC, DITTMAIN will call DITTCONS to obtain a command.\n             . DITTCONS issues a WTOR asking for a command\n             . DITTCONS will verify the command and call DITTPARM to\n                  convert the parameters one at a time into internal\n                  format.\n             . if the command was not valid, DITTCONS will issue a\n                  WTO explaining the command was not valid and issue\n                  another WTOR for asking for a valid command.\n             . if a required parameter is missing or invalid, DITTCONS\n                  will issue a WTO explaining which parameter is\n                  missing or invalid and a WTOR asking for the parameter.\n             . if the command is valid and all required parameters are\n                  entered the input module address, output module\n                  address, input module processing options byte, output\n                  module processing options byte will be set then\n                  DITTCONS will return to DITTMAIN.\n         d) After DITTCARD or DITTCONS returns with a valid command,\n            DITTMAIN calls DITTDAIR to locate the \"DYNBLOK\" for the\n            input and output devices (except for card, punch, or print).\n            The exception to this is command \"ACQ\" which allocates the\n            devices and builds the \"DYNBLOK\"s.  The DYNBLOK address for\n            the input device and output device are in the common area.\n         e) After the input and output device are located, DITTMAIN\n            enters an input-output loop.  Some commands do not have\n            both an input and output module, if the command is input-\n            only, the output module address will be zero.  Likewise if\n            the command is output-only, the input module address will\n            be zero.  The loop continues until either the input or\n            output module signals \"end-of-file\".  Note that \"end-of-file\"\n            can be set by output modules... for example the WTM command\n            is output only, so the output module signals eof when it has\n            written the requested number of tape marks.\n         f) When eof is signalled, DITTMAIN performs \"reset\"... the\n            input module address and processing options are cleared,\n            output module address and processing options are cleard,\n            input and output DYNBLOK addresses are cleared, DITTPARM\n            is called to reset all parameters from the previous command.\n         g) go back to step \"b\"\n\n      if the environment is TSO, call the TSO mainline DITTTSOM.\n         a) DITTTSOM defines the SPF variables.\n         b) DITTTSOM builds the menu data and displays the menu panel.\n         c) DITTTSOM verifies the command is valid and calls DITTPARM\n               to convert the parameters to internal format.\n         d) if the command is not valid, a message is added to the menu\n               panel and the menu is displayed again.\n         e) if a parameter is invalid or a required parameter is missing,\n               a message is added to the menu explaining the problem and\n               the menu is displayed again.\n         f, g, h would be the same as steps d, e, and f for batch and STC modes.\n         i) go to step b.\n\n   3) The batch/STC or TSO mainlines return control to DITTINIT.\n      DITTINIT frees the trace table and work areas and terminates.\n\n\n\n\nAll parameter conversion is performed by DITTPARM whether in batch, STC,\nor TSO environment.  This reduced the amount of code over-all, and if\nany special conversion technique was needed for a parameter, the same\ncode could be used for any other parameter with the same internal format.\nThe resultant value for all parameters is a field in DITTCOMM.  The\nparameter definition table specifies the internal field name, internal\nfield id, format, displacement of the field into DITTCOMM, length of\nthe field in DITTCOMM, and messages to issue if the parameter is missing\nor invalid.  Each parameter causes an entry to be added to an assembler\nGLOBAL variable.  On commands the required and optional parameters\non the DITTFUNC macro reference the field names in this GLOBAL variable.\nPart of the output of the DITTFUNC macro is two tables that contain up\n10 parameter id fields.  This is how DITTO knows which fields are valid,\nand required or optional for each command.  For STC and TSO modes the\norder of the field names in the REQPARM parameter defines the order the\ncommand parameters must be entered.  For batch mode, DITTCARD keeps a\ntable of the parameters entered on the command, then makes sure all the\nparameters in the REQPARM list are in the table.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$$DOC4": {"ttr": 260, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x14\\x01\\t\\t\\x7f\\x01\\t\\t\\x7f\\x15W\\x00\\x16\\x00\\x16\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2009-04-07T00:00:00", "modifydate": "2009-04-07T15:57:14", "lines": 22, "newlines": 22, "modlines": 0, "user": "RLRICE"}, "text": "Ditto as developed (mostly) around 1984-1985 or so.  Before MVS/XA,\nMVS/ESA, OS/390, z/OS, 31-bit mode...\n\nDITTO was written when most tapes were still the 3420 \"round reels\".\nAnyone who was around then knows that there was no end to the way\na round-reel tape could be botched.  Every now and then you needed\nto get the normal access methods and system out of the way so you\ncould 'see' what was on a tape or try to salvage data.  DITTO allowed\nyou to position the tape with no regard for tape labels (sometimes\nthey were what was botched), tape marks, whatever.  You can print,\ncopy the tape, write tape marks, forward space, back space, skip\ntape marks, whatever at any time.\n\nTo do its job, DITTO 'bends' some rules.  For one it builds its\nown DEB.  It would then issue a DEBCHK to add the DEB to the\nDEB chain.  Somewhere around MVS/ESA this started causing the\nentire system to crash.  I have learned that if you issue an EXCP\nwhile in key 0, the system allows you to provide a DEB that is\nnot on the DEB chain.  I have removed the code that does the DEBCHK\nand switch to key 0 immediately before issuing EXCPs.  Both DEBCHK\nand switching to key 0 require APF authorization.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASMJCL": {"ttr": 5633, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00U\\x01\\x03#?\\x01\\t\\x19\\x0f\\x11\\x14\\x00\\\\\\x00_\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2003-08-21T00:00:00", "modifydate": "2009-07-09T11:14:55", "lines": 92, "newlines": 95, "modlines": 0, "user": "RLRICE"}, "text": "//ASMDITTO JOB\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*    1) CHANGE JOB CARD                                             *\n//*    2) CHANGE MACLIB TO YOUR DITTO MACRO LIBRARY NAME              *\n//*    3) CHANGE SOURCE TO YOUR DITTO SOURCE LIBRARY NAME             *\n//*    4) CHANGE LOADLIB TO AN APF AUTHORIZED LIBRARY NAME            *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//ASM      PROC NAME=,\n//             LIST='SYSOUT=*'\n//ASM      EXEC PGM=IEV90,COND=(4,LT),\n//             REGION=4096K,\n//             PARM='LINECOUNT(55),DECK,NOOBJECT,XREF(SHORT)'\n//SYSPRINT DD  &LIST\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//         DD  DSN=........DITTO.MACLIB,DISP=SHR       <------- 2\n//SYSPUNCH DD  DSN=&&WK,DISP=MOD\n//SYSIN    DD  DSN=........DITTO.SOURCE(&NAME),DISP=SHR <------- 3\n// PEND\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           ALLOCATE WORK FILE                                      *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//ALLOC    EXEC PGM=IEFBR14\n//WK       DD DSN=&&WK,DISP=(NEW,PASS),\n//            UNIT=SYSDA,\n//            SPACE=(TRK,(15,15)),\n//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           ASSEMBLE ALL MODULES                                    *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//ALOC EXEC ASM,NAME=DITTALOC        'ACQ/REL' COMMAND\n//ATTN EXEC ASM,NAME=DITTATTN        TSO ATTENTION EXIT\n//AUTH EXEC ASM,NAME=DITTAUTH        DYNAMIC AUTHORIZATION\n//CARD EXEC ASM,NAME=DITTCARD        CARD READER\n//CDI1 EXEC ASM,NAME=DITTCDI1        CARD-INPUT COMMAND INTERPRETER\n//CMD  EXEC ASM,NAME=DITTCMD         COMMAND TABLE\n//CDO1 EXEC ASM,NAME=DITTCDO1        CARD OUTPUT\n//COMM EXEC ASM,NAME=DITTCOMM        GLOBAL OR 'COMMON' DATA\n//CONS EXEC ASM,NAME=DITTCONS        CONSOLE-INPUT COMMAND INTERPRETER\n//DAIR EXEC ASM,NAME=DITTDAIR        DAIR INTERFACE\n//DAI1 EXEC ASM,NAME=DITTDAI1        DASD READER\n//EXCP EXEC ASM,NAME=DITTEXCP        EXCP INTERFACE\n//INIT EXEC ASM,NAME=DITTINIT        INITIALIZATION\n//INQ  EXEC ASM,NAME=DITTINQ         STC INQUIRE FUNCTION\n//MAIN EXEC ASM,NAME=DITTMAIN        BATCH/STC MAINLINE\n//PARM EXEC ASM,NAME=DITTPARM        PARAMETER CONVERTER\n//PRMD EXEC ASM,NAME=DITTPRMD        TAPE DENSITY CONVERTER/CHECKER\n//PRMO EXEC ASM,NAME=DITTPRMO        'OPT' PARAMETER CHECKER\n//PRMV EXEC ASM,NAME=DITTPRMV        VOLSER RANGE CHECKER\n//PRO1 EXEC ASM,NAME=DITTPRO1        DATA PRINT\n//PRT  EXEC ASM,NAME=DITTPRT         PRINTER\n//STAE EXEC ASM,NAME=DITTSTAE        STAE EXIT\n//TINT EXEC ASM,NAME=DITTTINT        'INT' COMMAND\n//TMAP EXEC ASM,NAME=DITTTMAP        'TMAP' COMMAND\n//TPI1 EXEC ASM,NAME=DITTTPI1        TAPE READER\n//TPI2 EXEC ASM,NAME=DITTTPI2        FORWARD SPACE FILE (FSF)\n//TPI3 EXEC ASM,NAME=DITTTPI3        BACK-SPACE RECORD (BSR)\n//TPI4 EXEC ASM,NAME=DITTTPI4        BACK-SPACE FILE (BSF)\n//TPO1 EXEC ASM,NAME=DITTTPO1        TAPE OUTPUT\n//TPO2 EXEC ASM,NAME=DITTTPO2        REWIND (REW)\n//TPO3 EXEC ASM,NAME=DITTTPO3        REWIND/UNLOAD (RUN)\n//TPO4 EXEC ASM,NAME=DITTTPO4        WRITE TAPE MARK (WTM)\n//TSOM EXEC ASM,NAME=DITTTSOM        TSO ENVIRONMENT MAINLINE\n//TSO1 EXEC ASM,NAME=DITTTSO1        TSO DATA 'PRINT'\n//TSO2 EXEC ASM,NAME=DITTTSO2        TSO ENVIRONMENT 'TMAP'\n//TSO3 EXEC ASM,NAME=DITTTSO3        TSO ENVIRONMENT INQUIRE FUNCTION\n//VTOC EXEC ASM,NAME=DITTVTOC        DASD VTOC\n//XXXX EXEC ASM,NAME=DITTXXXX        DUMMY MODULE FOR STAE EXIT\n//* ----------------------------------------------------------------- *\n//*                                                                   *\n//*           LINKEDIT DITTO                                          *\n//*                                                                   *\n//* ----------------------------------------------------------------- *\n//LINK     EXEC PGM=HEWLH096,REGION=512K,\n//             PARM='LIST,MAP,LET,XREF,NCAL,AC=1'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(15,15))\n//SYSLMOD  DD  DSN=xxxxxxxxxxxxx,DISP=SHR        <---------- 4\n//SYSLIN   DD  DSN=&&WK,DISP=OLD\n//         DD  *\n  ENTRY DITTINIT\n  NAME DITTO(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTALOC": {"ttr": 3077, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              UNIT ALLOCATION                                        *\n*                                                                     *\n*    THIS MODULE INTERFACES WITH 'DITTDAIR' TO ALLOCATE OR RELEASE    *\n*    DEVICES.  ALLOCATING A DEVICE AS A SEPARATE COMMAND PREVENTS     *\n*    ANOTHER JOB OR TASK FROM ALLOCATING THE DEVICE BETWEEN DITTO     *\n*    COMMANDS.                                                        *\n*                                                                     *\n*    WHEN INVOKED AS AN INPUT MODULE, THE REQUEST IS 'ALLOCATE'       *\n*    (ACQ), WHEN INVOKED AS AN OUTPUT MODULE, THE REQUEST IS          *\n*    'RELEASE' (REL).  THIS MODULE DOES NO I/O AND SIGNALS EOF AT     *\n*    ITS EXIT.                                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTALOC DITTPRFX ALOCSAVE,'ALLOCATE DEVICE'\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY,        TRACE ENTRY                         +\n               DATA1=COMMINU       .. TRACE CUU RECEIVED\n         TM    COMMFLAG,$COMMCLS   'CLOSE' IN PROGRESS?\n         BO    ALOC9900            YES.. NOTHING FOR US TO DO\nALOC0010 DS    0H\n         MVI   DAIRTYPE,$DAIRCUU   LOCATE DYNBLOCK BY CUU\n         MVC   DAIRCUU,COMMINU     MOVE UNIT ADDRESS\n         C     R12,COMMINM         RUNNING AS INPUT MODULE?\n         BE    ALOC0020            YES.. THEN FUNCTION IS 'ACQ'\n         C     R12,COMMOUTM        RUNNING AS OUTPUT MODULE?\n         BE    ALOC0030            YES.. THEN FUNCTION IS 'REL'\n         ABEND ABEND013,DUMP,,USER ABEND WITH REASON\nALOC0020 DS    0H\n         DITTRACE ID=ALOCACQ       TRACE CALLS TO DAIR MODULE\n         MVI   DAIRCMMD,$DAIRACQ   ALLOCATION REQUEST\n         B     ALOC0040\nALOC0030 DS    0H\n         DITTRACE ID=ALOCREL       TRACE CALLS TO DAIR MODULE\n         MVI   DAIRCMMD,$DAIRREL   RELEASE REQUEST\nALOC0040 DS    0H\n         LA    R1,DAIRBLOK         DAIR REQUEST BLOCK\n         L     R15,ADAIR           DAIR MODULE ADDRESS\n         BALR  R14,R15             LINK TO DAIR MODULE\n         CLI   DAIRSTAT,$DAIRSLE   DYNAMIC BLOCK NOT LOCATED?\n         BE    ALOC0050            YES.. TEST FOR RELEASE FUNCTION\n         CLI   DAIRSTAT,$DAIRSOK   DAIR SUCCESSFUL?\n         BNE   ALOC0400            NO, EXAMINE FURTHER\n         OI    COMMFLAG,$COMMEOF   SIGNAL EOF (STOP INPUT-OUTPUT)\n         B     ALOC9900            EXIT\nALOC0050 DS    0H\n         CLI   DAIRCMMD,$DAIRREL   WAS FUNCTION 'RELEASE'?\n         BNE   ALOC0400            NO\n         LA    R2,NOTALOCM         SET MESSAGE BLOCK ADDRESS\n         B     ALOC0420            ISSUE MESSAGE(S)\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              ERROR ROUTINES                                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nALOC0400 DS    0H\n         LA    R2,MSGTABLE         MESSAGE TABLE ADDRESS\n         USING MSGDSECT,R2         DEFINE BASE\nALOC0410 DS    0H\n         CLI   MSGSTAT,X'FF'       END OF TABLE?\n         BE    ALOC0450            UNKNOWN STATUS FROM DITTDAIR\n         CLC   MSGSTAT,DAIRSTAT    STATUS MESSAGE LOCATED?\n         BE    ALOC0420            YES\n         AH    R2,MSGLEN           NEXT MESSAGE\n         B     ALOC0410            CONTINUE SEARCH\nALOC0420 DS    0H\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,MSGWTO         LENGTH FROM WTO\n         SH    R1,H5               MINUS WTO PREFIX LENGTH + 1\n         CLI   COMMENV,$ENVTSO     RUNNING AS A TSO USER?\n         BE    ALOC0440            YES\n         EX    R1,PRTMSGM          MOVE MESSAGE TEXT\n         MVI   PRTCC,C' '          CARRIAGE CONTROL\n         MVI   PRTCMMD,$PRTCMD     MOVE COMMAND\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ADDRESS\n         BALR  R14,R15             LINK TO PRINT MODULE\n         CLI   COMMENV,$ENVSTC     RUNNING AS A STARTED TASK?\n         BNE   ALOC0480            NO... CANCELLED ON ANY STATUS\n         LA    R3,MSGWTO           WTO ADDRESS\n         TM    MSGFLAG,$ABORT      ABORT ON THIS ERROR?\n         BO    ALOC0470            YES\n         ST    R3,PARMWTO          PASS ADDRESS TO PARAMETER MODULE\n         MVI   PARMCMMD,$PARMEWTO  ISSUE PROVIDED WTO\nALOC0430 DS    0H\n         MVC   PARMPARM,UNITID     'ID' FOR UNIT\n         LA    R1,PARMBLOK         PARAMETER BLOCK\n         L     R15,APARM           PARAMETER CONVERTER BLOCK\n         BALR  R14,R15             LINK TO 'DITTPARM'\n         TM    PARMFLAG,$PARMCAN   OPERATOR REQUEST 'CANCEL'?\n         BO    ALOC0600            YES\n         TM    PARMFLAG,$PARMOK    WAS A GOOD UNIT ENTERED?\n         BO    ALOC0010            YES .. ATTEMPT TO REQUEST AGAIN\n         B     ALOC0430            ASK FOR CUU AGAIN\nALOC0440 DS    0H\n         EX    R1,TSOMSGM          MOVE MESSAGE TEXT TO 'MSG02'\n         B     ALOC0480            AND EXIT\nALOC0450 DS    0H\n         OI    COMMFLAG,$ABORT+$ABEND\n         CLI   COMMENV,$ENVTSO     RUNNING IN TSO ENVIRONMENT?\n         BE    ALOC0460            YES\n         MVC   PRTDATA(ALOCM01L),ALOCM01 ERROR MESSAGE\n         MVI   PRTCC,C' '          CARRIAGE CONTROL\n         MVI   PRTCMMD,$PRTCMD     MOVE COMMAND\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ADDRESS\n         BALR  R14,R15             LINK TO PRINT MODULE\n         B     ALOC9900            AND EXIT\nALOC0460 DS    0H\n         MVC   MSG01(ALOCM01L),ALOCM01\n         B     ALOC9900            AND EXIT\nALOC0470 DS    0H\n         WTO   MF=(E,(3)),         ISSUE WTO                           +\n               CONSNAME=COMMCNAM   .. CONSOLE NAME\nALOC0480 DS    0H\n         OI    COMMFLAG,$ABORT     ABORT THIS COMMAND\n         B     ALOC9900            AND EXIT\nALOC0600 DS    0H\n         OI    COMMFLAG,$ABORT     SET ABORT FLAG\n         DITTRACE ID=CANCEL\n         WTO   'ALLOCATE REQUEST CANCELLED',                           +\n               CONSNAME=COMMCNAM   .. CONSOLE NAME\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nALOC9900 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\nPRTMSGM  MVC   PRTDATA(0),MSGWTO+4 MOVE MESSAGE TEXT\nTSOMSGM  MVC   MSG02(0),MSGWTO+4   MOVE MESSAGE TEXT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS/CONSTANTS                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nALOCSAVE DC    18F'0'              REGISTER SAVE AREA\nH5       DC    H'5'                CONSTANT\n         PARMGEN GEN=NO            INVOKE PARMGEN TO DEFINE FIELD ID'S\nUNITID   PARMID UNIT               GENERATE FIELD ID FOR 'UNIT'\nALOCM01  DC    C'UNKNOWN DITTDAIR STATUS RETURNED (INTERNAL ERROR)'\nALOCM01L EQU   *-ALOCM01\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC ALLOCATION/DE-ALLOCATION REQUEST BLOCK         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDAIRBLOK DAIRBLOK\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PARAMETER CONVERSION REQUEST BLOCK                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARMBLOK PARMBLOK\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              ERROR MESSAGE/FLAGS                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nNOTALOCM STATMSG STAT=$DAIRSLE,                                        +\n               FLAGS=,                                                 +\n               MESSAGE='UNIT IS NOT ALLOCATED'\nMSGTABLE DS    0F\n         STATMSG STAT=$DAIRSDE,                                        +\n               FLAGS=$ABORT,                                           +\n               MESSAGE='DAIR ERROR (INTERAL ERROR)'\n         STATMSG STAT=$DAIRSLE,                                        +\n               FLAGS=,                                                 +\n               MESSAGE='DYNAMIC BLOCK COULD NOT BE LOCATED'\n         STATMSG STAT=$DAIRSIR,                                        +\n               FLAGS=$ABORT,                                           +\n               MESSAGE='INVALID DAIR REQUEST (INTERNAL ERROR)'\n         STATMSG STAT=$DAIRSNU,                                        +\n               FLAGS=,                                                 +\n               MESSAGE='UNIT DOES NOT EXIST'\n         STATMSG STAT=$DAIRSTE,                                        +\n               FLAGS=,                                                 +\n               MESSAGE='DEVICE IS NOT A SUPPORTED DEVICE TYPE'\n         STATMSG STAT=$DAIRSRE,                                        +\n               FLAGS=$ABORT,                                           +\n               MESSAGE='INVALID RESOURCE TYPE (INTERNAL ERROR)'\n         STATMSG STAT=$DAIRSDP,                                        +\n               FLAGS=,                                                 +\n               MESSAGE='DEVICE IS ALREADY ALLOCATED'\n         STATMSG STAT=$DAIRSOF,                                        +\n               FLAGS=,                                                 +\n               MESSAGE='DEVICE IS OFFLINE'\n         STATMSG STAT=$DAIRSAL,                                        +\n               FLAGS=,                                                 +\n               MESSAGE='DEVICE IS ALLOCATED TO ANOTHER USER'\n         STATMSG STAT=$DAIRSUD,                                        +\n               FLAGS=,                                                 +\n               MESSAGE='3420 UNIT DOES NOT ALLOW 1600 OR 6250 BPI'\n         STATMSG STAT=$DAIRS16,                                        +\n               FLAGS=,                                                 +\n               MESSAGE='3420 UNIT DOES NOT ALLOW 1600 BPI'\n         STATMSG STAT=$DAIRS62,                                        +\n               FLAGS=,                                                 +\n               MESSAGE='3420 UNIT DOES NOT ALLOW 6250 BPI'\n         STATMSG STAT=$DAIRSD1,                                        +\n               FLAGS=$ABORT,                                           +\n               MESSAGE='DENSITY MAY NOT BE SPECIFIED FOR 3480'\n         STATMSG STAT=$DAIRSD2,                                        +\n               FLAGS=$ABORT,                                           +\n               MESSAGE='DENSITY MAY NOT BE SPECIFIED FOR DASD UNITS'\n         DC    X'FFFF'\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n         ABCODES\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MESSAGE DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSGDSECT DSECT\nMSGLEN   DS   AL2              LENGTH OF THIS ENTRY\nMSGSTAT  DS   X                CORRESPONDS TO 'DAIRSTAT' VALUE\nMSGFLAG  DS   X                FLAGS\nMSGWTO   DS   0F               WTO MESSAGE (IF RUNNING AS A STC)\n         END  DITTALOC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTATTN": {"ttr": 4109, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              TSO ATTENTION EXIT                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTATTN DITTPRFX ATTNSAVE,'TSO ATTENTION EXIT'\n         USING DITTCOMM,R11        SPECIFY BASE\n         L     R11,8(R1)           SET COMM AREA ADDRESS\n         DITTRACE ID=ATTNHUT\n         OI    COMMATTN,$ATTN      SET ATTENTION EXIT FLAG\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 GET OUT OF DODGE                     ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nATTNSAVE DC    18F'0'              REGISTER SAVE AREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         SPACE 2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTAUTH": {"ttr": 5636, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x006\\x01\\t\\t\\x7f\\x01\\t\\x19\\x0f\\x11\\x15\\x00:\\x00A\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2009-04-07T00:00:00", "modifydate": "2009-07-09T11:15:36", "lines": 58, "newlines": 65, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*             DYNAMIC AUTHORIZATION                                   *\n*                                                                     *\n*       R1 Contains the request type:                                 *\n*           R1 = Zero, turn on authorization                          *\n*           R1 Non zero, turn off authorization                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTAUTH DITTPRFX AUTHSAVE,'DYNAMIC AUTHORIZATION'\n         USING DITTCOMM,R11        DEFINE COMM AREA BASE\n         DITTRACE ID=ENTRY         TRACE ENTRY\n         LTR   R1,R1               TURN OFF?\n         BNZ   AUTH0010            YES..\n         DITTRACE ID=AUTHON\n***\n***   ADD YOUR DYNAMIC AUTHORIZATION CODE HERE\n***\n\n         B     AUTH9900            AND EXIT\nAUTH0010 DS    0H\n         DITTRACE ID=AUTHOFF\n***\n***   ADD YOUR DYNAMIC DE-AUTHORIZATION CODE HERE\n***\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXIT POINT                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nAUTH9900 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS/CONSTANTS                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nAUTHSAVE DC    18F'0'              REGISTER SAVE AREA\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         END  DITTAUTH\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DITTCARD": {"ttr": 3083, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              CARD COMMAND INPUT ROUTINE                             *\n*                                                                     *\n*      This module processes card-input commands.  This module        *\n*      is called by 'DITTMAIN' when DITTO is running as a JOB         *\n*      (not a started task or TSO session).                           *\n*                                                                     *\n*      Since cards may be used as commands or as data, and to         *\n*      keep this module from being too complicated, all card          *\n*      reading is done by a separate module 'DITTCDI1'.               *\n*                                                                     *\n*      Since the same parameters will be required by card-input,      *\n*      console-input, and TSO-input, parameter conversion is          *\n*      performed by a separate module.  This was to eliminate as      *\n*      much duplication of code as possible.  Also if a new           *\n*      parameter is required, only one module would have to be        *\n*      changed to convert it.  The parameter converter is 'DITTPARM'. *\n*                                                                     *\n*      If the command is undefined or all parameters are not          *\n*      entered or are in error, messages will be printed identifying  *\n*      the invalid command or parameter and error indicators will     *\n*      be set in 'DITTCOMM'.                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCARD DITTPRFX CARDSAVE,'CARD-INPUT COMMAND INTERPRETER'\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY         TRACE ENTRY\nCARD0010 DS    0H\n         DITTRACE ID=NEWCMMD       TRACE NEW COMMAND READS\n         L     R15,ACDI1           CARD INPUT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO CARD INPUT\n         TM    COMMFLAG,$COMMEOF   END OF FILE?\n         BO    CARD9900            YES, EXIT\n         DITTRACE ID=CARD,                                             +\n               DATA1=COMMCRCD+0,                                       +\n               DATA2=COMMCRCD+8\n         L     R3,COMMCRCD         CARD RECORD\n         LH    R4,COMMCRCL         LENGTH OF I/O AREA\n         LA    R1,0(R3,R4)         END OF I/O AREA +1\n         BCTR  R1,0                END OF I/O AREA\nCARD0020 DS    0H\n         CLI   0(R3),C' '          AT LEAST A BLANK?\n         BNE   CARD0030            YES\n         LA    R3,1(R3)            TRY NEXT ONE\n         BCT   R4,CARD0020         LOOP\n         B     CARD0010            NOTHING FOUND, READ NEXT RECORD\nCARD0030 DS    0H\n         CLI   0(R1),C' '          AT LEAST A BLANK?\n         BH    CARD0040            YES\n         BCTR  R1,0                BACK UP\n         BCT   R4,CARD0030         LOOP BACK\n         B     CARD0010            NOTHING FOUND, READ NEXT RECORD\nCARD0040 DS    0H\n         BAL   R14,CARD8000        FIND COMMAND ON INPUT RECORD\n         CLC   CARDXTR,CARDWORK    EXTERNAL TRACE REQUEST?\n         BE    CARD3000            YES\n         L     R5,ACMD             FUNCTION TABLE ADDRESS\n         USING FUNCBLOK,R5         DEFINE ADDRESSIBLITY\n         DITTRACE ID=SCANSTRT,     TRACE COMMAND TABLE SCAN START      +\n               DATA1=CARDWORK      .. COMMAND BEING SEARCHED FOR\nCARD0070 DS    0H\n         DITTRACE ID=SCANCMD,      TRACE COMMAND TABLE SCAN            +\n               DATA1=FUNCCMD       .. COMMAND IN CURRENT TABLE ENTRY\n         CLI   FUNCELEN,X'FF'      END OF TABLE?\n         BE    CARDERR1            YES, INVALID COMMAND\n         TM    FUNCENV,$FUNCJOB    APPLICABLE TO BATCH JOB MODE?\n         BNO   CARD0080            NO.. SKIP THIS COMMAND\n         LH    R1,CARDWLEN         ENTERED LENGTH\n         CH    R1,FUNCFLEN         FUNCTION LENGTH MATCH?\n         BNE   CARD0080            NO\n         BCTR  R1,0                ADJUST FOR EXECUTE\n         EX    R1,CARDFCLC         CHECK FUNCTION CODE\n         BE    CARD0090            COMMAND LOCATED\nCARD0080 DS    0H\n         AH    R5,FUNCELEN         ADD ENTRY LENGTH\n         B     CARD0070            LOOP\nCARD0090 DS    0H\n         DITTRACE ID=CMDFND        TRACE COMMAND FOUND\n         CLI   0(R3),C'?'          COMMAND EXAMPLE WANTED?\n         BE    CARD0200            YES\n         CLC   FUNCCMD,LISTFNC     XXX FUNCTION?\n         BE    CARD1000            YES\n         XC    CARDRQCT,CARDRQCT   CLEAR # REQ PARMS FOUND\n         XC    CARDOPCT,CARDOPCT   CLEAR # OPT PARMS FOUND\n         XC    REQTABLE,REQTABLE   CLEAR FOUND REQ PARM ID'S\nCARD0100 DS    0H\n         DITTRACE ID=PARMSCAN      TRACE PARAMETER SEARCH START\n         LTR   R4,R4               ANY DATA LEFT IN RECORD?\n         BZ    CARD0180            NO, TEST PARAMETERS\n         MVC   CARDWORK,COMMBLKS   INITIALIZE WORK AREA\n         BAL   R14,CARD8000        GET NEXT KEYWORD\n         BAL   R14,CARD2000        SEARCH KEYWORDS\n         CLI   CARDPID,X'FF'       VALID PARAMETER?\n         BE    CARDERR2            NO.. INVALID KEYWORD\n         LA    R6,FUNCREQ          REQUIRED PARAMETER ID'S\n         SR    R2,R2               CLEAR REGISTER\n         ICM   R2,3,FUNCNREQ       NUMBER OF REQUIRED PARAMETERS\n         BZ    CARD0150            NO REQUIRED PARAMETERS\n         DITTRACE ID=REQSCAN       TRACE REQUIRED PARM TABLE SCAN\nCARD0110 DS    0H\n         CLC   CARDPID,0(R6)       VALID REQUIRED PARM?\n         BE    CARD0120            YES\n         LA    R6,1(R6)            NEXT ENTRY\n         BCT   R2,CARD0110         LOOP\n         B     CARD0150            TRY FOR OPTIONAL KEYWORD\nCARD0120 DS    0H\n         LTR   R4,R4               ANY DATA LEFT IN RECORD?\n         BZ    CARDERR5            NO, TEST PARAMETERS\n         BAL   R14,CARD8000        GET OPERAND\n         DITTRACE ID=REQPARM       TRACE REQUIRED PARM CONVERSION\n         MVI   PARMCMMD,$PARMLOC   MOVE COMMAND\n         MVC   PARMPARM,CARDPID    PASS FIELD ID\n         MVC   PARMWORK,CARDWORK   PASS DATA\n         MVC   PARMWLEN,CARDWLEN   PASS DATA LENGTH\n         MVC   PARMOPN,FUNCOPN     NUMBER OF VALUES FOR OPTIONAL PARMS\n         LA    R1,FUNCOPV          VALUES FOR OPTIONAL PARMS\n         ST    R1,PARMOPV          PASS ADDRESS TO PARM CONVERTER\n         LA    R1,PARMBLOK         PARAMETER CONVERTER PARMS\n         L     R15,APARM           PARAMETER CONVERTER ENTRY POINT\n         BALR  R14,R15             LINK TO PARM CONVERTER\n         TM    PARMFLAG,$PARMOK    PARAMETER OKEE AND DOKEE?\n         BNO   CARDERR3            NO...\n         LA    R1,REQTABLE         FOUND PARM TABLE\nCARD0130 DS    0H\n         CLI   0(R1),X'00'         AVAILABLE SLOT?\n         BE    CARD0140            YES\n         CLC   CARDPID,0(R1)       SAME PARAMETER?\n         BE    CARD0100            YES.. DON'T COUNT IT TWICE\n         LA    R1,1(R1)            TRY NEXT BYTE\n         B     CARD0130            LOOP\nCARD0140 DS    0H\n         MVC   0(1,R1),CARDPID     SAVE PARAMETER ID\n         LH    R1,CARDRQCT         REQUIRED PARAMETERS FOUND\n         LA    R1,1(R1)            ADD 1\n         STH   R1,CARDRQCT         SAVE TOTAL\n         B     CARD0100            PROCESS NEXT PARAMETER\nCARD0150 DS    0H\n         DITTRACE ID=OPTSCAN       TRACE OPTIONAL PARM TABLE SCAN\n         SR    R2,R2               CLEAR REGISTER\n         ICM   R2,3,FUNCNOPT       NUMBER OF OPTIONAL PARAMETERS\n         BZ    CARDERR2            UNKNOWN KEYWORD\n         LA    R6,FUNCOPT          FIRST OPTIONAL PARAMETER ID\nCARD0160 DS    0H\n         CLC   CARDPID,0(R6)       VALID PARM ID?\n         BE    CARD0170            YES\n         LA    R6,1(R6)            NEXT ENTRY\n         BCT   R2,CARD0160         LOOP\n         B     CARDERR2            KEYWORD IS UNKNOWN\nCARD0170 DS    0H\n         LTR   R4,R4               ANY DATA LEFT?\n         BZ    CARDERR5            NO\n         BAL   R14,CARD8000        GET OPERAND\n         DITTRACE ID=OPTPARM       TRACE OPTIONAL PARM CONVERSION\n         MVI   PARMCMMD,$PARMLOC   MOVE COMMAND\n         MVC   PARMPARM,CARDPID    PASS FIELD ID\n         MVC   PARMWORK,CARDWORK   PASS DATA\n         MVC   PARMWLEN,CARDWLEN   PASS DATA LENGTH\n         MVC   PARMOPN,FUNCOPN     NUMBER OF VALUES FOR OPTIONAL PARMS\n         LA    R1,FUNCOPV          VALUES FOR OPTIONAL PARMS\n         ST    R1,PARMOPV          PASS ADDRESS TO PARM CONVERTER\n         LA    R1,PARMBLOK         PARAMETER CONVERTER PARMS\n         L     R15,APARM           PARAMETER CONVERTER ENTRY POINT\n         BALR  R14,R15             LINK TO PARAMETER CONVERTER\n         TM    PARMFLAG,$PARMOK    PARAMETER OKEE AND DOKEE?\n         BNO   CARDERR3            NO...\n         LH    R1,CARDOPCT         OPTIONAL PARAMETERS FOUND\n         LA    R1,1(R1)            ADD 1\n         STH   R1,CARDOPCT         SAVE TOTAL\n         B     CARD0100            PROCESS NEXT PARAMETER\nCARD0180 DS    0H\n         DITTRACE ID=PARMCHK       TRACE PARAMETER CHECK\n         CLC   FUNCNREQ,CARDRQCT   ALL REQUIRED PARAMETERS FOUND?\n         BNE   CARDERR4            NO\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,FUNCIN1        INPUT MODULE ADDRESS DISPLACEMENT\n         BZ    CARD0190            NO INPUT MODULE\n         LA    R2,DITTCOMM(R1)     INPUT MODULE ADDRESS ADDRESS\n         MVC   COMMINM,0(R2)       INPUT MODULE ADDRESS\n         MVC   COMMIFLG,FUNCIFLG   INPUT MODULE FLAGS\nCARD0190 DS    0H\n         ICM   R1,3,FUNCOUT1       OUTPUT MODULE ADDRESS DISPLACEMENT\n         BZ    CARD9900            NO OUTPUT MODULE\n         LA    R2,DITTCOMM(R1)     OUTPUT MODULE ADDRESS ADDRESS\n         MVC   COMMOUTM,0(R2)      OUTPUT MODULE ADDRESS\n         MVC   COMMOFLG,FUNCOFLG   OUTPUT MODULE FLAGS\n         B     CARD9900            EXIT\nCARD0200 DS    0H\n         MVC   CARDM06A,CARDWORK   MOVE COMMAND\n         OC    CARDM06A,COMMBLKS   MAKE IT ALL PRINTABLE\n         MVC   CARDM06B,FUNCEX1    MOVE EXAMPLE OF COMMAND\n         LA    R1,CARDM06          POINT TO MESSAGE\n         BAL   R9,CARD8200         LINK TO PRINT ROUTINE\n         B     CARD0010            LOOK FOR NEXT COMMAND\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              LIST AVAILABLE COMMANDS                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCARD1000 DS    0H\n         DITTRACE ID=LISTCMDS      TRACE START OF LIST\n         L     R5,ACMD             FUNCTIONS TABLE ADDRESS\n         MVI   PRTCMMD,$PRTHEAD    REQUEST HEADING\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\nCARD1010 DS    0H\n         DITTRACE ID=LISTFUNC      TRACE EACH FUNCTION\n         CLI   FUNCELEN,X'FF'      END OF TABLE?\n         BE    CARD1030            YES\n         TM    FUNCENV,$FUNCJOB    COMMAND APPLICABLE TO BATCH JOB?\n         BNO   CARD1020            NO\n         MVC   CARDM07A,FUNCCMD    MOVE COMMAND\n         MVC   CARDM07B,FUNCDESC   MOVE DESCRIPTION\n         MVI   PRTCMMD,$PRTCMD     SET COMMAND\n         MVC   PRTDATA(CARDM07L),CARDM07\n         MVI   PRTCC,C'0'          DOUBLE SPACE CARRIAGE CONTROL\n         MVI   PRTCMMD,$PRTDATA    SET COMMAND\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         MVC   CARDM08A,FUNCEX1    MOVE EXAMPLE OF COMMAND\n         MVC   PRTDATA(CARDM08L),CARDM08\n         MVI   PRTCC,C' '          SINGLE SPACE CARRIAGE CONTROL\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\nCARD1020 DS    0H\n         AH    R5,FUNCELEN         NEXT FUNCTION\n         B     CARD1010            LIST NEXT FUNCTION\nCARD1030 DS    0H\n         MVC   PRTDATA(CARDM10L),CARDM10\n         MVI   PRTCC,C'-'          TRIPLE SPACE CARRIAGE CONTROL\n         MVI   PRTCMMD,$PRTDATA    SET COMMAND\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         LA    R2,KEYWDTBL         FIRST KEYWORD/PARM\n         USING KEYWDSCT,R2         DEFINE BASE\nCARD1040 DS    0H\n         CLI   0(R2),X'FF'         END OF TABLE?\n         BE    CARD0010            YES\n         CLC   KEYWD,KEYWDPRM      KEYWORD AND ALIAS THE SAME?\n         BE    CARD1050            DON'T PRINT IT\n         MVC   CARDM11K,KEYWD      SET KEYWORD\n         MVC   CARDM11A,KEYWDPRM   SET KEYWORD ALIAS\n         MVC   PRTDATA(CARDM11L),CARDM11\n         MVI   PRTCMMD,$PRTDATA    SET COMMAND\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\nCARD1050 DS    0H\n         LA    R2,KEYWDDLN(R2)     NEXT KEYWORD\n         B     CARD1040            PRINT ALL PARMS/ALIASES\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              LOCATE KEYWORDS                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCARD2000 DS    0H\n         LA    R2,KEYWDTBL         KEYWORD TABLE\n         MVI   CARDPID,X'FF'       ASSUME INVALID KEYWORD\nCARD2010 DS    0H\n         CLI   KEYWDLEN,X'FF'      END OF TABLE?\n         BER   R14                 YES\n         LH    R1,KEYWDLEN         KEYWORD LENGTH\n         CH    R1,CARDWLEN         MATCHING LENGTHS?\n         BNE   CARD2020            NO\n         BCTR  R1,0                ADJUST\n         EX    R1,KEYWDCLC         KEYWORD LOCATED?\n         BE    CARD2030            YES\nCARD2020 DS    0H\n         LA    R2,KEYWDDLN(R2)     NEXT KEYWORD\n         B     CARD2010            CHECK IT\nCARD2030 DS    0H\n         MVC   CARDPID,KEYWDPID    MOVE PARAMETER ID\n         BR    R14                 EXIT\nKEYWDCLC CLC   KEYWD(0),CARDWORK   CHECK FOR MATCHING KEYWORDS\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXTERNAL TRACE                                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCARD3000 DS    0H\n         DITTRACE ID=XTRACE\n         BAL   R14,CARD8000        FIND TRACE OPTION (ON OR OFF)\n         CLC   CARDON,CARDWORK     TURN TRACE ON?\n         BE    CARD3010            YES\n         CLC   CARDOFF,CARDWORK    TURN TRACE OFF?\n         BE    CARD3030            YES\n         LA    R1,CARDM15          INVALID EXTERNAL TRACE COMMAND\n         B     CARD3050            PRINT MESSAGE\nCARD3010 DS    0H\n         TM    XTRFLAG,$XTRACE     TRACE ALREADY ON?\n         BO    CARD3020            YES\n         DITTRACE ID=TRACEON\n         OI    XTRFLAG,$XTRACE     SIGNAL EXTERNAL TRACE ON\n         LA    R1,CARDM09          TRACE ACTIVATED MESSAGE\n         B     CARD3050            PRINT MESSAGE\nCARD3020 DS    0H\n         DITTRACE ID=DUPON\n         LA    R1,CARDM12          TRACE ALREADY ACTIVE\n         B     CARD3050            PRINT MESSAGE\nCARD3030 DS    0H\n         TM    XTRFLAG,$XTRACE     TRACE ON?\n         BNO   CARD3040            NO\n         DITTRACE ID=TRACEOFF\n         LA    R1,CARDM13          TRACE DE-ACTIVATED MESSAGE\n         NI    XTRFLAG,255-$XTRACE RESET FLAG\n         B     CARD3050            PRINT MESSAGE\nCARD3040 DS    0H\n         DITTRACE ID=DUPOFF\n         LA    R1,CARDM14          TRACE NOT ACTIVE MESSAE\nCARD3050 DS    0H\n         BAL   R9,CARD8200         PRINT MESSAGE\n         B     CARD0010            READ NEXT COMMAND\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              INPUT PARSER                                           *\n*         R1, R2, R15 ARE WORK REGISTERS                              *\n*         R3 HAS CURRENT INPUT ADDRESS                                *\n*         R4 LENGTH REMAINING ON INPUT                                *\n*         R14 IS RETURN ADDRESS                                       *\n*                                                                     *\n*         ON EXIT 'CARDWORK' CONTAINS DATA FOUND TO NEXT DELIMITER    *\n*         UP TO 50 BYTES MAX, 'CARDWLEN' WILL BE SET TO THE LENGTH.   *\n*         R3 WILL BE UPDATED PAST THE DELIMITER AND R4 WILL REFLECT   *\n*         LENGTH LEFT FOLLOWING THE DELIMITER.                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCARD8000 DS    0H\n         ST    R14,PARSESAV        SAVE RETURN ADDRESS\n         DITTRACE ID=PARSE\n         XC    CARDWORK,CARDWORK   CLEAR WORK AREA\n         XC    CARDWLEN,CARDWLEN   CLEAR LENGTH\n         LTR   R4,R4               ANY DATA LEFT IN RECORD?\n         BZ    CARD8040            NO..\n         LA    R1,CARDWORK         WORK AREA\n         SR    R2,R2               CLEAR LENGTH COUNTER\n         LA    R15,L'CARDWORK      MAXIMUM LENGTH\nCARD8010 DS    0H\n         CLI   0(R3),C' '          BLANK?\n         BE    CARD8030            YES\n         CLI   0(R3),C','          COMMA?\n         BE    CARD8030            YES\n         CLI   0(R3),C'='          EQUAL SIGN?\n         BE    CARD8030            YES\n         MVC   0(1,R1),0(R3)       MOVE IT\n         LA    R2,1(R2)            COUNT IT\n         LA    R3,1(R3)            NEXT\n         LA    R1,1(R1)            NEXT\n         BCT   R4,CARD8020         DECREMENT COUNT\n         STH   R2,CARDWLEN         SAVE CURRENT LENGTH\n         B     CARD8040            LENGTH EXHAUSTED.. STOP SCAN\nCARD8020 DS    0H\n         BCT   R15,CARD8010        LOOP\nCARD8030 DS    0H\n         STH   R2,CARDWLEN         SAVE WORK AREA ACTIVE LENGTH\n         LA    R3,1(R3)            SKIP DELIMITER\n         BCTR  R4,0                REMOVE DELIMITER LENGTH\nCARD8040 DS    0H\n         DITTRACE ID=PARSEEND,     PARSE COMPLETE                      +\n               DATA1=CARDWORK,     .. OUTPUT VALUE                     +\n               DATA2=CARDWLEN      .. OUTPUT LENGTH\n         L     R14,PARSESAV        RESTORE RETURN ADDRESS\n         BR    R14                 LENGTH EXHAUSTED, EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          MESSAGE PRINTING                                           *\n*                                                                     *\n*        R1 SHOULD POINT TO A 2-BYTE LENGTH PREFIXING THE MESSAGE     *\n*        TEXT.                                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCARD8200 DS    0H\n         MVI   PRTCMMD,$PRTCMD     PRINT COMMAND\n         LH    R15,0(R1)           MESSAGE LENGTH\n         BCTR  R15,0               ADJUST FOR EXECUTE\n         EX    R15,MSGMVC          MOVE THE MESSAGE\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT ROUTINE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT ROUTINE\n         BR    R9                  RETURN\nMSGMVC   MVC   PRTDATA(0),2(R1)    MOVE MESSAGE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              ERROR ROUTINES                                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCARDERR1 DS    0H\n         OI    COMMFLAG,$COMMCER   SIGNAL COMMAND ERROR\n         OC    CARDWORK,COMMBLKS   MAKE ALL POSITIONS PRINTABLE\n         MVC   CARDM01M,CARDWORK   MOVE FUNCTION\n         LA    R1,CARDM01          POINT TO MESAGE\n         BAL   R9,CARD8200         LINK TO PRINT ROUTINE\n         B     CARD9900            EXIT\nCARDERR2 DS    0H\n         OI    COMMFLAG,$COMMCER   SIGNAL COMMAND ERROR\n         OC    CARDWORK,COMMBLKS   MAKE ALL POSITIONS PRINTABLE\n         MVC   CARDM02M,CARDWORK   MOVE KEYWORD\n         LA    R1,CARDM02          POINT TO MESSAGE\n         BAL   R9,CARD8200         LINK TO PRINT ROUTINE\n         B     CARD9900            EXIT\nCARDERR3 DS    0H\n         OI    COMMFLAG,$COMMCER   SIGNAL COMMAND ERROR\n         L     R1,PARMMSGA         RETURNED MESSAGE'S ADDRESS\n         BAL   R9,CARD8200         LINK TO PRINT ROUTINE\n         OC    CARDWORK,COMMBLKS   MAKE ALL POSITIONS PRINTABLE\n         MVC   CARDM03M,CARDWORK   MOVE OPERAND\n         LA    R1,CARDM03          POINT TO MESSAGE\n         BAL   R9,CARD8200         LINK TO PRINT ROUTINE\n         B     CARD9900            EXIT\nCARDERR4 DS    0H\n         OI    COMMFLAG,$COMMCER   SIGNAL COMMAND ERROR\n         LA    R1,CARDM04          POINT TO MESSAGE\n         BAL   R9,CARD8200         LINK TO PRINT ROUTINE\n         SR    R2,R2               CLEAR REGISTER\n         ICM   R2,3,FUNCNREQ       NUMBER OF REQUIRED PARAMETERS\n         LA    R6,FUNCREQ          FIRST REQUIRED PARAMETER\n         DITTRACE ID=LISTREQ       TRACE LISTING MISSING PARMS\nCARDE401 DS    0H\n         LA    R1,REQTABLE         FOUND PARM TABLE\nCARDE402 DS    0H\n         CLI   0(R1),X'00'         EMPTY SLOT?\n         BE    CARDE403            YES, NO NEED TO LOOK FURTHER\n         CLC   0(1,R6),0(R1)       WAS THIS PARAMETER FOUND?\n         BE    CARDE404            YES\n         LA    R1,1(R1)            NEXT FOUND PARAMETER ID\n         B     CARDE402            TRY THIS ONE\nCARDE403 DS    0H\n         MVI   PARMCMMD,$PARMMIS   MOVE COMMAND\n         MVC   PARMPARM,0(R6)      MOVE PARAMETER ID\n         LA    R1,PARMBLOK         PARAMETER CONVERTER PARMS\n         L     R15,APARM           PARAMETER CONVERTER ENTRY POINT\n         BALR  R14,R15             LINK TO PARAMETER CONVERTER\n         L     R1,PARMMSGA         RETURNED MESSAGE ADDRESS\n         BAL   R9,CARD8200         PRINT RETURNED MESSAGE\nCARDE404 DS    0H\n         LA    R6,1(R6)            NEXT PARAMETER\n         BCT   R2,CARDE401         LOOK FOR THIS PARAMETER\n         B     CARD9900            EXIT\nCARDERR5 DS    0H\n         OI    COMMFLAG,$COMMCER   SIGNAL COMMAND ERROR\n         OC    CARDWORK,COMMBLKS   MAKE ALL POSITIONS PRINTABLE\n         MVC   CARDM05M,CARDWORK   MOVE KEYWORD\n         LA    R1,CARDM05          POINT TO MESSAGE\n         BAL   R9,CARD8200         LINK TO PRINT ROUTINE\n         B     CARD9900            EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCARD9900 DS    0H\n         DITTRACE ID=EXIT          TRACE EXITS\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              CARD-INPUT FUNCTION EXECUTED INSTRUCTIONS              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCARDFCLC CLC   FUNCCMD(0),CARDWORK  CORRECT COMMAND?\nCARDCMVC MVC   PRTDATA+8(0),0(R15)  MOVE COMMAND(S) TO PRINT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              CARD-INPUT FUNCTION WORK AREAS                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCARDSAVE DC    18F'0'              REGISTER SAVE AREA\nPARSESAV DS    A                   PARSE ROUTINE RETURN ADDRESS\nCARDWLEN DC    H'0'                CURRENT PARSER OUTPUT LENGTH\nCARDRQCT DC    H'0'                REQUIRED PARAMETERS COUNT FOUND\nCARDOPCT DC    H'0'                OPTIONAL PARAMETERS COUNT FOUND\nCARDWORK DC    CL50' '             PARSER OUTPUT WORK AREA\nREQTABLE DC    XL10'00'            FOUND REQUIRED PARAMETER TABLE\nCARDPID  DC    X'FF'               PARAMETER ID FROM KEYWD TABLE\nCARDXTR  DC    C'TRACE'            EXTERNAL TRACE COMMAND\nCARDON   DC    C'ON'               CONSTANT\nCARDOFF  DC    C'OFF'              CONSTANT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              CARD-INPUT FUNCTION PRINT MODULE INTERFACE             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              CARD-INPUT FUNCTION PARAMETER SEARCH INTERFACE         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARMBLOK PARMBLOK\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLISTFNC  DC    CL4'XXX '\nCARDM01  DC    AL2(CARDM01L-2)\n         DC    C'INVALID CARD INPUT FUNCTION: '\nCARDM01M DC    CL50' '\nCARDM01L EQU   *-CARDM01\nCARDM02  DC    AL2(CARDM02L-2)\n         DC    C'INVALID KEYWORD IN CARD INPUT FUNCTION: '\nCARDM02M DC    CL44' '\nCARDM02L EQU   *-CARDM02\nCARDM03  DC    AL2(CARDM03L-2)\n         DC    C'INVALID OPERAND IN CARD INPUT FUNCTION: '\nCARDM03M DC    CL44' '\nCARDM03L EQU   *-CARDM03\nCARDM04  DC    AL2(CARDM04L-2)\n         DC    C'REQUIRED PARAMETERS OMITTED'\nCARDM04L EQU   *-CARDM04\nCARDM05  DC    AL2(CARDM05L-2)\n         DC    C'PARAMETER SPECIFIED WITH NO OPERAND: '\nCARDM05M DC    CL44' '\nCARDM05L EQU   *-CARDM05\nCARDM06  DC    AL2(CARDM06L-2)\n         DC    C'EXAMPLE OF COMMAND- '\nCARDM06A DC    CL8' '\n         DC    C' - '\nCARDM06B DC    CL80' '\nCARDM06L EQU   *-CARDM06\nCARDM07  DC    C'COMMAND: '\nCARDM07A DC    CL4' '\n         DC    CL18' '\nCARDM07B DC    CL80' '\nCARDM07L EQU   *-CARDM07\nCARDM08  DC    C'EXAMPLE OF COMMAND:'\n         DC    CL12' '\nCARDM08A DC    CL80' '\nCARDM08L EQU   *-CARDM08\nCARDM09  DC    AL2(CARDM09L)\nCARDM09M DC    C'EXTERNAL TRACE ACTIVATED'\nCARDM09L EQU   *-CARDM09M\nCARDM10  DC    CL20'KEYWORD ALIASES --  '\n         DC    CL08' PARM   '\n         DC    CL02' '\n         DC    CL08' ALIAS  '\nCARDM10L EQU   *-CARDM10\nCARDM11  DC    CL20' '\nCARDM11K DC    CL08' '\n         DC    CL02' '\nCARDM11A DC    CL08' '\nCARDM11L EQU   *-CARDM11\nCARDM12  DC    AL2(CARDM12L)\nCARDM12M DC    C'EXTERNAL TRACE ALREADY ACTIVE'\nCARDM12L EQU   *-CARDM12M\nCARDM13  DC    AL2(CARDM13L)\nCARDM13M DC    C'EXTERNAL TRACE DE-ACTIVATED'\nCARDM13L EQU   *-CARDM13M\nCARDM14  DC    AL2(CARDM14L)\nCARDM14M DC    C'EXTERNAL TRACE NOT ACTIVE'\nCARDM14L EQU   *-CARDM14M\nCARDM15  DC    AL2(CARDM15L)\nCARDM15M DC    C'INVALID TRACE COMMAND (USE ''TRACE ON'' OR ''TRACE OFF+\n               '')'\nCARDM15L EQU   *-CARDM15M\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DEFINE PARAMETERS                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         PARMGEN GEN=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DEFINE KEYWORDS                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nKEYWDTBL DS    0H\n         KEYWD BLKSIZE,PARM=BLKSIZE\n         KEYWD COUNT,PARM=RECORDS\n         KEYWD CUUIN,PARM=CUUIN\n         KEYWD CUUOUT,PARM=CUUOUT\n         KEYWD DENSITY,PARM=DENSITY\n         KEYWD DISKADDR,PARM=DISKADDR\n         KEYWD FILES,PARM=FILES\n         KEYWD FROMVOL,PARM=LOWVOL\n         KEYWD HIGHVOL,PARM=HIGHVOL\n         KEYWD IN,PARM=CUUIN\n         KEYWD INCUU,PARM=CUUIN\n         KEYWD LRECL,PARM=RECSIZE\n         KEYWD LOWVOL,PARM=LOWVOL\n         KEYWD OPT,PARM=OPT\n         KEYWD OPTION,PARM=OPT\n         KEYWD OUT,PARM=CUUOUT\n         KEYWD OUTCUU,PARM=CUUOUT\n         KEYWD RECSIZE,PARM=RECSIZE\n         KEYWD RECORDS,PARM=RECORDS\n         KEYWD RECS,PARM=RECORDS\n         KEYWD TOVOL,PARM=HIGHVOL\n         KEYWD UNIT,PARM=UNIT\n         KEYWD VOLSER,PARM=LOWVOL\n         DC    X'FFFF'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              FUNCTION TABLE DSECT                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  FUNCBLOK\n         SPACE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              KEYWORD TABLE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nKEYWDSCT DSECT\nKEYWDLEN DS    AL2                KEYWORD LENGTH\nKEYWD    DS    CL8                KEYWORD\nKEYWDPRM DS    CL8                INTERNAL PARM NAME\nKEYWDPID DS    X                  KEYWORD PARAMETER ID\nKEYWDDLN EQU   *-KEYWDSCT         TABLE ENTRY LENGTH\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         END  DITTCARD\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DITTCDI1": {"ttr": 268, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              CARD INPUT MODULE                                      *\n*                                                                     *\n*      THIS IS THE CARD-READER MODULE.  IT IS INVOKED BE EITHER       *\n*      THE MAINLINE MODULE OR THE CARD-INPUT COMMAND MODULE.  BY      *\n*      USING ONE MODULE TO READ THE SYSIN DATA WHETHER IT IS FOR      *\n*      DATA OR COMMANDS, IT SIMPLIFIES THE LOGIC OF THE OTHER         *\n*      MODULES.  THE CARD-INPUT COMMAND MODULE IS NOT COMPLICATED     *\n*      WITH LOGIC TO DETERMINE IF IT IS TO FIND A COMMAND OR DATA     *\n*      AND MAINLINE IS NOT COMPLICATED BY LOGIC TO SIGNAL A CARD      *\n*      READER MODULE TO LOOK FOR COMMANDS OR FOR DATA.  THE CARD-     *\n*      INPUT COMMAND MODULE SIGNALS THIS MODULE TO SEARCH FOR A       *\n*      COMMAND BY LOADING A NON-ZERO VALUE IN REGISTER 1 BEFORE       *\n*      LINKING TO THIS MODULE.  END-OF-FILE IS SIGNALED ON            *\n*      REACHING END-OF-DATA,  WHEN THE NUMBER OF RECORDS TO PROCESS   *\n*      IS REACHED, OR WHEN A NEW COMMAND IS ENCOUNTERD IN THE         *\n*      INPUT STREAM.  THIS MODULE ASSUMES A RECORD LENGTH OF 80       *\n*      FOR SYSIN.  COMMANDS ARE IDENTIFIED BY THE CHARACTERS          *\n*      '$$DITTO' IN COLUMNS 1-7.   COLUMNS 73-80 ARE IGNORED ON       *\n*      COMMANDS.                                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCDI1 DITTPRFX CARDSAVE,'CARD READER MODULE'\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY         TRACE ENTRY\n         TM    COMMFLAG,$COMMCLS   'CLOSE FILES' CALL?\n         BO    CARD9900            YES... EXIT\n         TM    COMMFLAG,$COMMEOJ   END OF JOB IN PROGRESS?\n         BNO   CARD0010            NO\n         TM    CARDFLAG,$CARDOPN   IS THE FILE OPEN?\n         BNO   CARD9900            NO, EXIT\n         DITTRACE ID=CLOSE         TRACE SYSIN CLOSE\n         CLOSE SYSIN               CLOSE INPUT FILE\n         NI    CARDFLAG,255-$CARDOPN FILE NOT OPEN\n         B     CARD9900            EXIT\nCARD0010 DS    0H\n         TM    CARDFLAG,$CARDOPN   IS FILE OPEN\n         BO    CARD0020            YES, BYPASS OPEN\n         DITTRACE ID=OPEN          TRACE SYSIN OPEN\n         OPEN  (SYSIN,INPUT)       OPEN SYSIN\n         OI    CARDFLAG,$CARDOPN   FLAG OPEN\nCARD0020 DS    0H\n         TM    CARDFLAG,$CARDEOF   REAL EOF FOUND?\n         BO    CARD8010            YES\n         MVC   COMMCRCD,ACOMMIOI   INITIALIZE CURRENT ADDRESS\n         XC    COMMCRCL,COMMCRCL   ZERO DATA LENGTH\n         TM    COMMFLAG,$COMM1ST   FIRST TIME THROUGH?\n         BNO   CARD0030            NO\n         ZAP   CARDRCDS,COMMP0     INITIALIZE RECORD COUNTER\nCARD0030 DS    0H\n         NI    COMMFLAG,255-$COMMEOF TURN OFF EOF FLAG\n         TM    CARDFLAG,$CARDNP    LAST CARD NOT PROCESSED?\n         BO    CARD0040            NO\n         DITTRACE ID=READ          TRACE SYSIN READ\n         GET   SYSIN,CARDRECD      READ A CONTROL RECORD\n         CLC   DITTABND,CARDRECD   ABEND REQUEST?\n         BNE   CARD0040            NO\n         DITTRACE ID=ABEND         TRACE JUST BEFORE ABENDING\n         ABEND ABEND999,DUMP,,USER BLOW THIS THING\nCARD0040 DS    0H\n         NI    CARDFLAG,255-$CARDNP TURN OFF NOT PROCESSED FLAG\n         C     R12,COMMINM         RUNNING AS A COMMAND?\n         BE    CARD0100            YES.. READ DATA\n         MVC   CARDM03D,CARDRECD   COPY CONTROL RECORD\n         MVC   PRTDATA(CARDM03L),CARDM03\n         BAL   R9,PRT0000          PRINT CONTROL STATEMENT\n         CLC   CTLCARD,CARDRECD    IS THIS A CONTROL CARD?\n         BNE   CARD0080            NO.. TEST FOR INCOMPLETE STATEMENT\n         LA    R1,CARDRECD+8       POINT PAST CONTROL CARD ID\n         L     R2,COMMCRCD         CURRENT DATA ADDRESS\n         LH    R3,COMMCRCL         CURRENT LENGTH\n         LA    R4,62               MAX DATA ON A STATEMENT\nCARD0050 DS    0H\n         CLI   0(R1),C' '          END OF STATEMENT?\n         BE    CARD0060            YES\n         CLC   CARDCONT,0(R1)      CONTINUATION ', ' ?\n         BE    CARD0070            YES\n         MVC   0(1,R2),0(R1)       MOVE DATA TO INPUT I/O AREA\n         LA    R1,1(R1)            NEXT\n         LA    R2,1(R2)            NEXT\n         LA    R3,1(R3)            1 MORE IN LENGTH\n         BCT   R4,CARD0050         LOOP\nCARD0060 DS    0H\n         DITTRACE ID=CMDEND,       TRACE END OF COMMAND STATEMENT      +\n               RDATA1=R3,          .. CAPTURE COMMAND LENGTH           +\n               DATA2=ACOMMIOI      .. CAPTURE SOME OF COMMAND\n         NI    CARDFLAG,255-$CARDCTT   TURN OFF CONTINUATION FLAG\n         STH   R3,COMMCRCL         SET DATA LENGTH\n         MVC   COMMCRCD,ACOMMIOI   RESET DATA ADDRESS\n         B     CARD9900            EXIT THIS MODULE\nCARD0070 DS    0H\n         DITTRACE ID=CONTINUE      TRACE CONTINUATION\n         MVC   0(1,R2),0(R1)       MOVE DATA TO INPUT I/O AREA\n         LA    R2,1(R2)            NEXT\n         LA    R3,1(R3)            1 MORE IN LENGTH\n         ST    R2,COMMCRCD         SAVE CURRENT ADDRESS\n         STH   R3,COMMCRCL         SAVE CURRENT LENGTH\n         OI    CARDFLAG,$CARDCTT   SET CONTINUATION FLAG\n         B     CARD0030            READ NEXT RECORD\nCARD0080 DS    0H\n         TM    CARDFLAG,$CARDCTT   IMCOMPLETE COMMAND?\n         BNO   CARD0090            NO\n         MVC   PRTDATA(CARDM01L),CARDM01\n         BAL   R9,PRT0000          PRINT MESSAGE\n         NI    CARDFLAG,255-$CARDCTT   TURN OFF CONTINUATION FLAG\n         B     CARD0020            READ UNTIL COMPLETE COMMAND\nCARD0090 DS    0H\n         MVC   PRTDATA(CARDM02L),CARDM02\n         BAL   R9,PRT0000          PRINT MESSAGE\n         B     CARD0020            READ UNTIL COMPLETE COMMAND\nCARD0100 DS    0H\n         CLC   CTLCARD,CARDRECD    IS THIS A CONTROL CARD?\n         BE    CARD0130            YES\nCARD0110 DS    0H\n         TM    COMMPFLG,$COMMRCS   RECORD LIMIT GIVEN?\n         BNO   CARD0120            NO\n         CP    CARDRCDS,COMMRCDS   ENOUGH RECORDS PROCESSED?\n         BE    CARD0140            YES\nCARD0120 DS    0H\n         LA    R1,CARDRECD         POINT PAST CONTROL CARD ID\n         ST    R1,COMMCRCD         SET CURRENT RECORD ADDRESS\n         MVC   COMMCRCL,H80        SET CURRENT RECORD LENGTH\n         AP    CARDRCDS,COMMP1     ADD 1 TO RECORDS\n         B     CARD9900            EXIT THIS MODULE\nCARD0130 DS    0H\n         OI    CARDFLAG,$CARDNP    LAST CARD NOT PROCESSED\nCARD0140 DS    0H\n         OI    COMMFLAG,$COMMEOF   SIGNAL PSEUDO EOF\n         B     CARD9900            EXIT\nCARD8000 DS    0H\n         OI    CARDFLAG,$CARDEOF   SIGNAL REAL EOF\n         TM    CARDFLAG,$CARDCTT   INCOMPLETE COMMAND AT EOF?\n         BNO   CARD8010            NO\n         MVC   PRTDATA(CARDM04L),CARDM04\n         BAL   R9,PRT0000          PRINT MESSAGE\nCARD8010 DS    0H\n         DITTRACE ID=EOF           TRACE SYSIN END OF FILE\n         OI    COMMFLAG,$COMMEOF   SIGNAL END OF FILE\n         B     CARD9900            AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MESSAGE PRINTING                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         MVI   PRTCMMD,$PRTCMD     SET COMMAND\n         LA    R1,PRTBLOK          PRINTER INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             PRINT MESSAGE\n         BR    R9                  RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCARD9900 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS/CONSTANTS                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCARDSAVE DC    18F'0'              REGISTER SAVE AREA\nH80      DC    H'80'               CONSTANT\nCARDFLAG DC    X'00'               SWITCHES/FLAGS\n$CARDOPN EQU   X'80'               .. FILE OPEN INDICATOR\n$CARDNP  EQU   X'40'               .. LAST CARD NOT PROCESSED\n$CARDEOF EQU   X'20'               .. END OF FILE INDICATOR\n$CARDCTT EQU   X'10'               .. COMMAND CONTINUATION\nCTLCARD  DC    C'$$DITTO'          CONTROL CARD IDENTIFIER\nDITTABND DC    C'$$ABEND'          ABEND REQUEST\nCARDCONT DC    C', '               CONTINUATION\nCARDM01  DC    C'** INCOMPLETE COMMAND, SKIPPING UNTIL COMPLETE COMMAND+\n                STATEMENT'\nCARDM01L EQU   *-CARDM01\nCARDM02  DC    C'** INVALID DITTO CONTROL STATEMENT OR MISSPLACED SYSIN+\n                DATA'\nCARDM02L EQU   *-CARDM02\nCARDM03  DC    C'CONTROL STATEMENT: '\nCARDM03D DC    CL72' '\nCARDM03L EQU   *-CARDM03\nCARDM04  DC    C'** LAST CONTROL STATEMENT IS AN INCOMPLETE COMMAND'\nCARDM04L EQU   *-CARDM04\nCARDRCDS DC    PL5'0'              RECORD COUNTER\nCARDRECD DC    CL80' '             SYSIN I/O AREA\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              READER DCB                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSYSIN    DCB   DDNAME=SYSIN,                                           +\n               EODAD=CARD8000,                                         +\n               DSORG=PS,                                               +\n               MACRF=GM,                                               +\n               RECFM=FB,                                               +\n               LRECL=80\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n         ABCODES\n         SPACE 2\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         END  DITTCDI1\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTCDO1": {"ttr": 274, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              CARD OUTPUT MODULE                                     *\n*                                                                     *\n*      THIS IS THE CARD PUNCH MODULE.  A RECORD LENGTH OF 80          *\n*      IS ASSUMED FOR THE CARD-PUNCH.  IF A RECORD IS LESS THAN       *\n*      80 CHARACTERS, THE CARD WILL BE PADDED TO THE RIGHT WITH       *\n*      BLANKS.  IF A RECORD IS MORE THAN 80 BYTES, IT WILL BE         *\n*      TRUNCATED AT 80.  VARIABLE LENGTH RECORDS WILL HAVE THE        *\n*      LENGTH DATA (THE FIRST FOUR BYTES) REMOVED.                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCDO1 DITTPRFX CARDSAVE,'CARD PUNCH MODULE'\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY         TRACE ENTRY\n         TM    COMMFLAG,$COMMCLS   'CLOSE FILES' CALL?\n         BO    CARD9900            YES.. EXIT\n         TM    COMMFLAG,$COMMEOJ   END OF JOB IN PROGRESS??\n         BNO   CARD0010            NO\n         TM    CARDFLAG,$CARDOPN   IS THE FILE OPEN??\n         BNO   CARD9900            NO, EXIT\n         DITTRACE ID=CLOSE         TRACE SYSPUNCH CLOSE\n         CLOSE SYSPUNCH            CLOSE PUNCH FILE\n         NI    CARDFLAG,255-$CARDOPN FILE NOT OPEN\n         B     CARD9900            EXIT\nCARD0010 DS    0H\n         TM    CARDFLAG,$CARDOPN   IS FILE OPEN\n         BO    CARD0020            YES, BYPASS OPEN\n         DITTRACE ID=OPEN          TRACE SYSPUNCH OPEN\n         OPEN  (SYSPUNCH,OUTPUT)   OPEN SYSPUNCH\n         OI    CARDFLAG,$CARDOPN   FLAG OPEN\nCARD0020 DS    0H\n         L     R3,ACOMMIOO         OUTPUT BUFFER ADDRESS\n         MVC   0(80,R3),COMMBLKS   INITIALIZE I/O AREA\n         LH    R1,COMMCRCL         LOAD CURRENT RECORD LENGTH\n         CH    R1,H80              TOO LONG??\n         BNH   CARD0030            NO\n         LH    R1,H80              LIMIT TO 80 BYTES\nCARD0030 DS    0H\n         L     R2,COMMCRCD         CURRENT RECORD ADDRESS\n         EX    R1,CARDOMVC         MOVE DATA TO OUTPUT\n         PUT   SYSPUNCH,0(R3)      PUNCH THE CARD\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCARD9900 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXECUTED INSTRUCTIONS                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCARDOMVC MVC   0(0,R3),0(R2)       MOVE DATA TO OUTPUT AREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS/CONSTANTS                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCARDSAVE DC    18F'0'              REGISTER SAVE AREA\nH80      DC    H'80'               CONSTANT\nCARDFLAG DC    X'00'               SWITCHES/FLAGS\n$CARDOPN EQU   X'80'               .. FILE OPEN INDICATOR\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              READER DCB                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSYSPUNCH DCB   DDNAME=SYSPUNCH,                                        +\n               DSORG=PS,                                               +\n               MACRF=PM,                                               +\n               RECFM=FB,                                               +\n               LRECL=80\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n         SPACE 2\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         END  DITTCDO1\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTCMD": {"ttr": 2825, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\t\\x10?\\x01\\t\\x10?\\x087\\x01j\\x01j\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-04-13T00:00:00", "modifydate": "2009-04-13T08:37:00", "lines": 362, "newlines": 362, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*            FUNCTION DEFINITION TABLE                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         PARMGEN GEN=NO\nDITTCMD  CSECT\n         DITTFUNC ACQ,                                                 +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='ACQUIRE A TAPE OR DASD DEVICE',                   +\n               EXAMPLE1='ACQ,UNIT=CUU <,DENSITY=6250>',                +\n               EXAMPLE2='ACQ,CUU <,6250>',                             +\n               REQPARM=(UNIT),                                         +\n               OPTPARM=(DENSITY),                                      +\n               IN1=ALOC,                                               +\n               IN2=ALOC\n         DITTFUNC BSF,                                                 +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='BACK SPACE FILE (TAPE ONLY)',                     +\n               EXAMPLE1='BSF,IN=488,FILES=1',                          +\n               EXAMPLE2='BSF,CUU,# OF FILES',                          +\n               REQPARM=(CUUIN,FILES),                                  +\n               IN1=TPI4,                                               +\n               IN2=TPI4\n         DITTFUNC BSR,                                                 +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='BACK SPACE RECORDS (TAPE ONLY)',                  +\n               EXAMPLE1='BSR,IN=488,RECORDS=1',                        +\n               EXAMPLE2='BSR,CUU,# OF RECORDS',                        +\n               REQPARM=(CUUIN,RECORDS),                                +\n               IN1=TPI3,                                               +\n               IN2=TPI3\n         DITTFUNC CC,                                                  +\n               ENV=(JOB),                                              +\n               DESC='CARD TO CARD (CARD IN, CARD PUNCH OUT)',          +\n               EXAMPLE1='CC <,RECORDS=100>',                           +\n               OPTPARM=(RECORDS),                                      +\n               IN1=CDI1,                                               +\n               OUT1=CDO1\n         DITTFUNC CD,                                                  +\n               ENV=(JOB),                                              +\n               DESC='CARD TO PRINT IN VERTICAL HEX',                   +\n               EXAMPLE1='CD <,RECORDS=100>',                           +\n               OPTPARM=(RECORDS),                                      +\n               IN1=CDI1,                                               +\n               OUT1=PRO1,                                              +\n               OFLAGS=(HEX)\n         DITTFUNC CP,                                                  +\n               ENV=(JOB),                                              +\n               DESC='CARD TO PRINT (CHARACTER ONLY)',                  +\n               EXAMPLE1='CP <,RECORDS=100>',                           +\n               OPTPARM=(RECORDS),                                      +\n               IN1=CDI1,                                               +\n               OUT1=PRO1\n         DITTFUNC DD,                                                  +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='DISK TO PRINT (VERTICAL HEX)',                    +\n               REQPARM=(CUUIN,DISKADDR,RECORDS),                       +\n               EXAMPLE1='DD,IN=1C8,DISKADDR=000100001,RECORDS=10',     +\n               EXAMPLE2='DD,CUU,CCCCHHRRR,# OF RECORDS',               +\n               IN1=DAI1,                                               +\n               IN2=DAI1,                                               +\n               OUT1=PRO1,                                              +\n               OUT2=TSO1,                                              +\n               PANEL=DITTDD,                                           +\n               OFLAGS=(HEX)\n         DITTFUNC DP,                                                  +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='DISK TO PRINT (CHARACTER ONLY)',                  +\n               REQPARM=(CUUIN,DISKADDR,RECORDS),                       +\n               EXAMPLE1='DP,IN=1C8,DISKADDR=000100001,RECORDS=10',     +\n               EXAMPLE2='DP,CUU,CCCCHHRRR,# OF RECORDS',               +\n               IN1=DAI1,                                               +\n               IN2=DAI1,                                               +\n               OUT1=PRO1,                                              +\n               OUT2=TSO1,                                              +\n               PANEL=DITTDP\n         DITTFUNC DDD,                                                 +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='DISK TO PRINT DEBLOCKED (VERTICAL HEX)',          +\n               REQPARM=(CUUIN,DISKADDR,RECSIZE,RECORDS),               +\n               EXAMPLE1='DDD,IN=1C8,DISKADDR=000100001,RECSIZE=80,RECOR+\n               DS=50',                                                 +\n               EXAMPLE2='DDD,1C8,CCCCHHRRR,RECSIZE,# OF RECORDS',      +\n               IN1=DAI1,                                               +\n               IN2=DAI1,                                               +\n               IFLAGS=(DEBLOCK),                                       +\n               OUT1=PRO1,                                              +\n               OUT2=TSO1,                                              +\n               PANEL=DITTDDD,                                          +\n               OFLAGS=(HEX)\n         DITTFUNC DDDV,                                                +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='DISK TO PRINT DEBLOCKED (VERTICAL HEX,RECFM=V)',  +\n               REQPARM=(CUUIN,DISKADDR,RECORDS),                       +\n               EXAMPLE1='DDDV,IN=1C8,DISKADDR=000100001,RECORDS=50',   +\n               EXAMPLE2='DDDV,1C8,CCCCHHRRR,# OF RECORDS',             +\n               IN1=DAI1,                                               +\n               IN2=DAI1,                                               +\n               IFLAGS=(DEBLOCK,VREC),                                  +\n               OUT1=PRO1,                                              +\n               OUT2=TSO1,                                              +\n               PANEL=DITTDDDV,                                         +\n               OFLAGS=(HEX)\n         DITTFUNC DPD,                                                 +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='DISK TO PRINT DEBLOCKED (CHARACTER ONLY)',        +\n               REQPARM=(CUUIN,DISKADDR,RECSIZE,RECORDS),               +\n               EXAMPLE1='DPD,IN=1C8,DISKADDR=000100001,RECSIZE=80,RECOR+\n               DS=50',                                                 +\n               EXAMPLE2='DPD,CUU,CCCCHHRRR,RECSIZE,# OF RECORDS',      +\n               IN1=DAI1,                                               +\n               IN2=DAI1,                                               +\n               IFLAGS=(DEBLOCK),                                       +\n               OUT1=PRO1,                                              +\n               OUT2=TSO1,                                              +\n               PANEL=DITTDPD\n         DITTFUNC DPDV,                                                +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='DISK TO PRINT DEBLOCKED (CHARACTER ONLY,RECFM=V)',+\n               REQPARM=(CUUIN,DISKADDR,RECORDS),                       +\n               EXAMPLE1='DPDV,IN=1C8,DISKADDR=000100001,RECORDS=50',   +\n               EXAMPLE2='DPDV,CUU,CCCCHHRRR,# OF RECORDS',             +\n               IN1=DAI1,                                               +\n               IN2=DAI1,                                               +\n               IFLAGS=(DEBLOCK,VREC),                                  +\n               OUT1=PRO1,                                              +\n               OUT2=TSO1,                                              +\n               PANEL=DITTDPDV\n         DITTFUNC FSF,                                                 +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='FORWARD SPACE FILE (TAPE ONLY)',                  +\n               EXAMPLE1='FSF,IN=488,FILES=1',                          +\n               EXAMPLE2='FSF,CUU,# OF FILES',                          +\n               REQPARM=(CUUIN,FILES),                                  +\n               IN1=TPI2,                                               +\n               IN2=TPI2\n         DITTFUNC FSR,                                                 +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='FORWARD SPACE RECORDS (TAPE ONLY)',               +\n               EXAMPLE1='FSR,IN=488,RECORDS=1',                        +\n               EXAMPLE2='FSR,CUU,# OF RECORDS',                        +\n               REQPARM=(CUUIN,RECORDS),                                +\n               IN1=TPI1,                                               +\n               IN2=TPI1\n         DITTFUNC INT,                                                 +\n               ENV=(JOB,STC),                                          +\n               DESC='INITIALIZE TAPE WITH STANDARD VOLSER',            +\n               EXAMPLE1='INT,IN=488,VOLSER=000001 <,HIGHVOL=000999>',  +\n               EXAMPLE2='INT,CUU,LOWVOL <,HIGHVOL>',                   +\n               REQPARM=(CUUIN,LOWVOL),                                 +\n               OPTPARM=(HIGHVOL),                                      +\n               IN1=TINT\n         DITTFUNC INQ,                                                 +\n               ENV=(STC,TSO),                                          +\n               DESC='INQUIRE ON DITTO STATUS (ALLOCATED UNITS, TRACE)',+\n               EXAMPLE2='INQ,TAPE OR INQ,DASD OR INQ,TRACE',           +\n               REQPARM=(INQQUAL),                                      +\n               IN1=INQ,                                                +\n               IN2=TSO3,                                               +\n               PANEL=DITTINQ\n         DITTFUNC REL,                                                 +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='RELEASE A DEVICE',                                +\n               EXAMPLE1='REL,UNIT=488',                                +\n               EXAMPLE2='REL,CUU',                                     +\n               REQPARM=(UNIT),                                         +\n               OUT1=ALOC,                                              +\n               OUT2=ALOC\n         DITTFUNC REW,                                                 +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='REWIND TAPE',                                     +\n               EXAMPLE1='REW,OUT=488',                                 +\n               EXAMPLE2='REW,CUU',                                     +\n               REQPARM=(CUUOUT),                                       +\n               OUT1=TPO2,                                              +\n               OUT2=TPO2\n         DITTFUNC RUN,                                                 +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='REWIND AND UNLOAD TAPE',                          +\n               EXAMPLE1='RUN,OUT=488',                                 +\n               EXAMPLE2='RUN,CUU',                                     +\n               REQPARM=(CUUOUT),                                       +\n               OUT1=TPO3,                                              +\n               OUT2=TPO3\n         DITTFUNC TC,                                                  +\n               ENV=(JOB),                                              +\n               DESC='TAPE TO CARDS',                                   +\n               REQPARM=(CUUIN),                                        +\n               OPTPARM=(RECORDS),                                      +\n               EXAMPLE1='TC,IN=488 <,RECORDS=10>',                     +\n               IN1=TPI1,                                               +\n               OUT1=CDO1\n         DITTFUNC TD,                                                  +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='TAPE TO PRINT IN VERTICAL HEX',                   +\n               REQPARM=(CUUIN),                                        +\n               OPTPARM=(RECORDS),                                      +\n               EXAMPLE1='TD,IN=488 <,RECORDS=10>',                     +\n               EXAMPLE2='TD,CUU <,# OF RECORDS>',                      +\n               IN1=TPI1,                                               +\n               IN2=TPI1,                                               +\n               OUT1=PRO1,                                              +\n               OUT2=TSO1,                                              +\n               OFLAGS=(HEX),                                           +\n               PANEL=DITTTD\n         DITTFUNC TDD,                                                 +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='TAPE TO PRINT DEBLOCKED IN VERTICAL HEX',         +\n               REQPARM=(CUUIN,RECSIZE),                                +\n               OPTPARM=(RECORDS),                                      +\n               EXAMPLE1='TDD,IN=488,RECSIZE=80 <,RECORDS=10>',         +\n               EXAMPLE2='TDD,CUU,RECSIZE <,# OF RECORDS>',             +\n               IN1=TPI1,                                               +\n               IN2=TPI1,                                               +\n               IFLAGS=(DEBLOCK),                                       +\n               OUT1=PRO1,                                              +\n               OUT2=TSO1,                                              +\n               OFLAGS=(HEX),                                           +\n               PANEL=DITTTDD\n         DITTFUNC TDDV,                                                +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='TAPE TO PRINT DEBLOCKED VARIABLE LENGTH RECORDS IN+\n                VERTICAL HEX',                                         +\n               REQPARM=(CUUIN),                                        +\n               OPTPARM=(RECORDS),                                      +\n               EXAMPLE1='TDDV,IN=488 <,RECORDS=10>',                   +\n               EXAMPLE2='TDDV,CUU <,# OF RECORDS>',                    +\n               IN1=TPI1,                                               +\n               IN2=TPI1,                                               +\n               IFLAGS=(DEBLOCK,VREC),                                  +\n               OUT1=PRO1,                                              +\n               OUT2=TSO1,                                              +\n               OFLAGS=(HEX),                                           +\n               PANEL=DITTTDDV\n         DITTFUNC TP,                                                  +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='TAPE TO PRINT (CHARACTER ONLY)',                  +\n               REQPARM=(CUUIN),                                        +\n               OPTPARM=(RECORDS),                                      +\n               EXAMPLE1='TP,IN=488 <,RECORDS=10>',                     +\n               EXAMPLE2='TP,CUU <,# OF RECORDS>',                      +\n               IN1=TPI1,                                               +\n               IN2=TPI1,                                               +\n               OUT1=PRO1,                                              +\n               OUT2=TSO1,                                              +\n               PANEL=DITTTP\n         DITTFUNC TPD,                                                 +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='TAPE TO PRINT DEBLOCKED (CHARACTER ONLY)',        +\n               REQPARM=(CUUIN,RECSIZE),                                +\n               OPTPARM=(RECORDS),                                      +\n               EXAMPLE1='TPD,IN=488,RECSIZE=80 <,RECORDS=10>',         +\n               EXAMPLE2='TPD,CUU,RECSIZE <,# OF RECORDS>',             +\n               IN1=TPI1,                                               +\n               IN2=TPI1,                                               +\n               IFLAGS=(DEBLOCK),                                       +\n               OUT1=PRO1,                                              +\n               OUT2=TSO1,                                              +\n               PANEL=DITTTPD\n         DITTFUNC TPDV,                                                +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='TAPE TO PRINT DEBLOCKED VARIABLE LENGTH RECORDS (C+\n               HARACTER ONLY)',                                        +\n               REQPARM=(CUUIN),                                        +\n               EXAMPLE1='TPDV,IN=488, <,RECORDS=10>',                  +\n               EXAMPLE2='TPDV,CUU, <,# OF RECORDS>',                   +\n               IN1=TPI1,                                               +\n               IN2=TPI1,                                               +\n               IFLAGS=(DEBLOCK,VREC),                                  +\n               OUT1=PRO1,                                              +\n               OUT2=TSO1,                                              +\n               PANEL=DITTTPDV\n         DITTFUNC TMAP,                                                +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='PRINT TAPE VTOC',                                 +\n               EXAMPLE1='TMAP,IN=488 <,OPTION=FULLTAPE>',              +\n               EXAMPLE2='TMAP,CUU <,FULLTAPE>',                        +\n               REQPARM=(CUUIN),                                        +\n               OPTPARM=(OPT),                                          +\n               IN1=TMAP,                                               +\n               IN2=TSO2,                                               +\n               PANEL=DITTTMAP,                                         +\n               OPTVAL=(FULL,FULLTAPE,ALL)\n         DITTFUNC TT,                                                  +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='TAPE TO TAPE COPY',                               +\n               REQPARM=(CUUIN,CUUOUT,FILES),                           +\n               EXAMPLE1='TT,IN=488,OUT=48A,FILES=2',                   +\n               EXAMPLE2='TT,INCUU,OUTCUU,# OF FILES',                  +\n               IN1=TPI1,                                               +\n               IN2=TPI1,                                               +\n               OUT1=TPO1,                                              +\n               OUT2=TPO1\n         DITTFUNC TTR,                                                 +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='TAPE TO TAPE COPY REBLOCKED',                     +\n               REQPARM=(CUUIN,CUUOUT,RECSIZE,BLKSIZE,FILES),           +\n               EXAMPLE1='TTR,IN=488,OUT=48A,RECSIZE=80,BLKSIZE=3120,FIL+\n               ES=3',                                                  +\n               EXAMPLE2='TTR,CUUIN,CUUOUT,RECSIZE,BLKSIZE,# OF FILES', +\n               IN1=TPI1,                                               +\n               IN2=TPI1,                                               +\n               IFLAGS=(DEBLOCK),                                       +\n               OUT1=TPO1,                                              +\n               OUT2=TPO1,                                              +\n               OFLAGS=(REBLOCK)\n         DITTFUNC TTRV,                                                +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='TAPE TO TAPE COPY VARIABLE LENGTH RECORDS REBLOCKE+\n               D',                                                     +\n               REQPARM=(CUUIN,CUUOUT,BLKSIZE,FILES),                   +\n               EXAMPLE1='TTRV,IN=488,OUT=48A,BLKSIZE=12000,FILES=3',   +\n               EXAMPLE2='TTRV,CUUIN,CUUOUT,BLKSIZE,# OF FILES',        +\n               IN1=TPI1,                                               +\n               IN2=TPI1,                                               +\n               IFLAGS=(DEBLOCK,VREC),                                  +\n               OUT1=TPO1,                                              +\n               OUT2=TPO1,                                              +\n               OFLAGS=(REBLOCK)\n         DITTFUNC WTM,                                                 +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='WRITE TAPE MARKS',                                +\n               EXAMPLE1='WTM,OUT=488 <,COUNT=5>',                      +\n               EXAMPLE2='WTM,CUU <,# OF TAPE MARKS>',                  +\n               REQPARM=(CUUOUT),                                       +\n               OPTPARM=(RECORDS),                                      +\n               OUT1=TPO4,                                              +\n               OUT2=TPO4\n         DITTFUNC VTOC,                                                +\n               ENV=(JOB,STC,TSO),                                      +\n               DESC='LIST VTOC OF DASD DEVICE',                        +\n               EXAMPLE1='VTOC,CUU',                                    +\n               EXAMPLE2='VTOC,IN=CUU',                                 +\n               REQPARM=(CUUIN),                                        +\n               OPTPARM=,                                               +\n               IN1=VTOC,                                               +\n               IN2=VTOC\n         DITTFUNC XXX,                                                 +\n               ENV=(JOB,STC),                                          +\n               DESC='LIST AVAILABLE FUNCTIONS',                        +\n               REQPARM=,                                               +\n               OPTPARM=,                                               +\n               EXAMPLE1='XXX',                                         +\n               EXAMPLE2='XXX'\n         DC    X'FFFF'\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              CARD-INPUT TABLE DSECT                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  FUNCBLOK\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               COMMON MODULE MAP                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         COPY REGEQU\n         END  DITTCMD\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTCOMM": {"ttr": 277, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM CSECT\n         DITTCOMM\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTCONS": {"ttr": 513, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*           CONSOLE COMMAND INPUT MODULE                              *\n*                                                                     *\n*      THIS MODULE PROCESSES CONSOLE-INPUT COMMANDS.  THIS MODULE     *\n*      IS CALLED BY 'DITTMAIN' WHEN DITTO IS RUNNING AS A STARTED     *\n*      TASK (NOT A JOB).                                              *\n*                                                                     *\n*      SINCE THE SAME PARAMETERS WILL BE REQUIRED BY CARD-INPUT       *\n*      OR CONSOLE-INPUT, THE PARAMETER CONVERSION IS PERFORMED        *\n*      BY A SEPARATE MODULE THAT IS CALLED BY BOTH INPUT COMMAND      *\n*      MODULES.  THIS WAS TO ELIMINATE AS MUCH DUPLICATION OF         *\n*      CODE AS POSSIBLE.  ALSO IF A NEW PARAMETER IS REQUIRED,        *\n*      ONLY ONE MODULE USUALLY NEEDS TO BE CHANGED. THE PARAMETER     *\n*      CONVERSION MODULE IS 'DITTPARM'.                               *\n*                                                                     *\n*      IF THE COMMAND IS UNDEFINED OR ALL PARAMETERS ARE NOT          *\n*      ENTERED OR ARE IN ERROR, WTO'S WILL BE ISSUED IDENTIFYING      *\n*      THE INVALID COMMAND OR PARAMETER, AND THE OPERATOR WILL        *\n*      BE PROMPTED FOR MISSING OR INCORRECT INFORMATION.              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCONS DITTPRFX CONSSAVE,'CONSOLE COMMAND MODULE'\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY         TRACE ENTRY\nCONS0010 DS    0H\n         DITTRACE ID=NEWCMMD       TRACE NEW COMMAND READS\n         XC    COMMCECB,COMMCECB   CLEAR CONSOLE ECB\n         MVC   CONSAREA,COMMBLKS   INITIALIZE REPLY AREA\n         LA    R3,COMMCECB         ECB ADDRESS\n         WTOR  'ENTER A DITTO COMMAND',  MESSAGE TEXT FOR CONSOLE      +\n               CONSAREA,           .. REPLY AREA                       +\n               80,                 .. LENGTH OF REPLY AREA             +\n               (R3),               .. CONSOLE ECB                      +\n               CONSNAME=COMMCNAM   .. CONSOLE NAME\n         WAIT  1,ECB=(R3)          WAIT FOR OPERATOR\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,7,CONSMID        MESSAGE ID FROM LAST WTO\n         BZ    CONS0020            NO OUTSTANDING MESSAGE\n         DOM   MSG=(R1)            DELETE THE MESSAGE\n         XC    CONSMID,CONSMID     CLEAR THE ID\nCONS0020 DS    0H\n         CLC   CONSEOJ,CONSAREA    'EOJ' COMMAMND?\n         BNE   CONS0030            NO\n         OI    COMMFLAG,$COMMEOF   SIGNAL END OF FILE\n         B     CONS9900            EXIT\nCONS0030 DS    0H\n         LA    R3,CONSAREA         WTOR REPLY AREA\n         LA    R4,80               MAX LENGTH OF REPLY\n         LA    R1,0(R3,R4)         END OF I/O AREA +1\n         BCTR  R1,0                END OF I/O AREA\nCONS0050 DS    0H\n         CLI   0(R3),C' '          AT LEAST A BLANK?\n         BNE   CONS0060            YES\n         LA    R3,1(R3)            TRY NEXT ONE\n         BCT   R4,CONS0050         LOOP\n         B     CONS0010            NOTHING FOUND ISSUE MSG AGAIN\nCONS0060 DS    0H\n         CLI   0(R1),C' '          AT LEAST A BLANK?\n         BH    CONS0070            YES\n         BCTR  R1,0                BACK UP\n         BCT   R4,CONS0060         LOOP BACK\n         B     CONS0010            NOTHING FOUND ISSUE MSG AGAIN\nCONS0070 DS    0H\n         MVC   PRTDATA(CONSM01L),CONSM01\n         MVC   PRTDATA+8(80),CONSAREA MOVE CONSOLE REPLY\n         MVI   PRTCMMD,$PRTCMD     MOVE PRINT COMMAND\n         BAL   R9,PRT0000          PRINT\n         CLC   CONSXTR,CONSAREA    'TRACE' COMMAND?\n         BE    CONS2000            YES\n         MVC   CONSWORK,COMMBLKS   INITIALIZE WORK AREA\n         BAL   R14,CONS7000        FIND COMMAND ON INPUT RECORD\n         L     R5,ACMD             COMMAND TABLE ADDRESS\n         USING FUNCBLOK,R5         DEFINE ADDRESSIBLITY\n         DITTRACE ID=SCANSTRT,     TRACE COMMAND TABLE SCAN START      +\n               DATA1=CONSWORK      .. CAPTURE THE COMMAND\nCONS0090 DS    0H\n         DITTRACE ID=SCANCMD       TRACE COMMAND TABLE SCAN\n         CLI   FUNCELEN,X'FF'      END OF TABLE?\n         BE    CONSERR1            YES, INVALID COMMAND\n         TM    FUNCENV,$FUNCSTC    DOES THIS COMMAND APPLY?\n         BNO   CONS0100            NO\n         LH    R1,CONSWLEN         GET LENGTH\n         CH    R1,FUNCFLEN         FUNCTION LENGTH MATCH?\n         BNE   CONS0100            NO\n         BCTR  R1,0                ADJUST FOR EXECUTE\n         EX    R1,CONSFCLC         CHECK FUNCTION CODE\n         BE    CONS0110            COMMAND LOCATED\nCONS0100 DS    0H\n         AH    R5,FUNCELEN         ADD ENTRY LENGTH\n         B     CONS0090            LOOP\nCONS0110 DS    0H\n         DITTRACE ID=CMMDFND       TRACE COMMAND FOUND\n         CLI   0(R3),C'?'          COMMAND EXAMPLE WANTED?\n         BE    CONS0500            YES\n         CLC   FUNCCMD,LISTFNC     XXX FUNCTION?\n         BE    CONS1000            YES\n         SR    R6,R6               CLEAR FOR NUMBER OF REQ PARMS\n         ICM   R6,3,FUNCNREQ       NUMBER OF REQUIRED PARAMETERS\n         BZ    CONS0150            NONE ... TRY FOR OPTIONAL PARMS\n         LA    R7,FUNCREQ          FIRST REQUIRED PARAMETER\nCONS0120 DS    0H\n         DITTRACE ID=PARMSCAN      TRACE PARAMETER SEARCH START\n         LTR   R4,R4               ANY DATA LEFT IN REPLY?\n         BZ    CONS0300            START PROMPTING OPERATOR FOR THEM\n         MVC   CONSWORK,COMMBLKS   INITIALIZE WORK AREA\n         BAL   R14,CONS7000        GET PARAMETER\n         DITTRACE ID=REQPARM       TRACE REQUIRED PARM CONVERSION\n         MVI   PARMCMMD,$PARMLOC   'LOCATE' COMMAND\nCONS0130 DS    0H\n         MVC   PARMPARM,0(R7)      PASS FIELD ID\n         MVC   PARMWORK,CONSWORK   PASS DATA\n         MVC   PARMWLEN,CONSWLEN   PASS DATA LENGTH\n         LA    R1,FUNCOPV          FIRST VALID VALUE FOR 'OPT'\n         ST    R1,PARMOPV          PASS ADDRESS TO DITTPARM\n         MVC   PARMOPN,FUNCOPN     NUMBER OF VALID VALUES\n         LA    R1,PARMBLOK         PARAMETER CONVERTER PARMS\n         L     R15,APARM           PARAMETER CONVERTER ENTRY PONT\n         BALR  R14,R15             LINK TO PARAMETER CONVERTER\n         TM    PARMFLAG,$PARMCAN   OPERATOR REQUEST 'CANCEL'?\n         BO    CONS0600            YES... ABORT THIS COMMAND\n         TM    PARMFLAG,$PARMOK    PARAMETER OKEE AND DOKEE?\n         BO    CONS0140            YES\n         L     R1,PARMMSGA         RETURNED MESSAGE ADDRESS\n         SR    R15,R15             CLEAR REGISTER\n         ICM   R15,3,0(R1)         TEXT LENGTH\n         BCTR  R15,0               FOR EXECUTE\n         EX    R15,PRTMMVC         MOVE TEXT TO PRINT I/O AREA\n         MVC   CONSWTO+4(80),COMMBLKS\n         EX    R15,WTOMMVC         MOVE MESSAGE\n         MVI   PRTCMMD,$PRTCMD\n         BAL   R9,PRT0000          PRINT MESSAGE\n         CLC   PARMPARM,HIVOLID    WAS THIS 'HIGH VOLSER' OF A RANGE?\n         BE    CONS0610            YES.. FORCE OPERATOR TO RE-ENTER\n         LA    R1,CONSWTO          POINT TO OUR WTO\n         ST    R1,PARMWTO          PASS ADDRESS BACK TO DITTPARM\n         MVI   PARMCMMD,$PARMEWTO  INDICATE ERROR MSG WTO AND PROMPT\n         B     CONS0130            RE-DRIVE PARAMETER MODULE\nCONS0140 DS    0H\n         LA    R7,1(R7)            NEXT REQUIRED PARAMETER\n         BCT   R6,CONS0120         PROCESS NEXT PARAMETER\n* ------------------------------------------------------------------- *\n*        ALL REQUIRED PARAMETERS HAVE BEEN PROCESSED.                 *\n*        NOW PROCESS ANY OPTIONAL PARAMETERS.                         *\n* ------------------------------------------------------------------- *\nCONS0150 DS    0H\n         SR    R6,R6               CLEAR FOR NUMBER OF OPTIONAL PARMS\n         ICM   R6,3,FUNCNOPT       NUMBER OF OPTIONAL PARAMETERS\n         BZ    CONS0400            NONE ... ALL DONE\n         LA    R7,FUNCOPT          FIRST OPTIONAL PARAMETER\nCONS0160 DS    0H\n         LTR   R4,R4               ANY DATA LEFT IN REPLY?\n         BZ    CONS0400            NO\n         MVC   CONSWORK,COMMBLKS   INITIALIZE WORK AREA\n         BAL   R14,CONS7000        GET PARAMETER\n         DITTRACE ID=OPTPARM       TRACE OPTIONAL PARM CONVERSION\n         MVI   PARMCMMD,$PARMLOC   'LOCATE' COMMAND\nCONS0170 DS    0H\n         MVC   PARMPARM,0(R7)      FIELD ID\n         MVC   PARMWORK,CONSWORK   DATA\n         MVC   PARMWLEN,CONSWLEN   DATA LENGTH\n         LA    R1,FUNCOPV          FIRST VALID VALUE FOR 'OPT'\n         ST    R1,PARMOPV          PASS ADDRESS TO DITTPARM\n         MVC   PARMOPN,FUNCOPN     NUMBER OF VALID VALUES\n         LA    R1,PARMBLOK         PARAMETER CONVERTER PARMS\n         L     R15,APARM           PARAMETER CONVERTER ENTRY POINT\n         BALR  R14,R15             LINK TO PARAMETER CONVERTER\n         TM    PARMFLAG,$PARMCAN   OPERATOR REQUEST 'CANCEL'?\n         BO    CONS0190            YES... OPTIONAL PARAMETER NOT USED\n         TM    PARMFLAG,$PARMOK    PARAMETER OKEE AND DOKEE?\n         BO    CONS0180            YES\n         L     R1,PARMMSGA         RETURNED MESSAGE ADDRESS\n         SR    R15,R15             CLEAR REGISTER\n         ICM   R15,3,0(R1)         TEXT LENGTH\n         BCTR  R15,0               FOR EXECUTE\n         EX    R15,PRTMMVC         MOVE MESSAGE\n         MVC   CONSWTO+4(80),COMMBLKS\n         EX    R15,WTOMMVC         MOVE MESSAGE\n         MVI   PRTCMMD,$PRTCMD\n         BAL   R9,PRT0000          PRINT MESSAGE\n         CLC   PARMPARM,HIVOLID    WAS THIS 'HIGH VOLSER' OF A RANGE?\n         BE    CONS0610            YES.. FORCE OPERATOR TO RE-ENTER\n         LA    R1,CONSWTO          POINT TO OUR WTO\n         ST    R1,PARMWTO          PASS ADDRESS BACK TO DITTPARM\n         MVI   PARMCMMD,$PARMEWTO  INDICATE ERROR MSG WTO AND PROMPT\n         B     CONS0170            RE-DRIVE PARAMETER MODULE\nCONS0180 DS    0H\n         LA    R7,1(R7)            NEXT OPTIONAL PARAMETER\n         BCT   R6,CONS0160         PROCESS NEXT PARAMETER\n         B     CONS0400            ALL OPTIONAL PARAMETERS DONE\nCONS0190 DS    0H\n         WTO   'OPTIONAL PARAMETER REMOVED FROM CURRENT COMMAND',      +\n               CONSNAME=COMMCNAM   CONSOLE NAME\n         B     CONS0180            CONTINUE WITH NEXT OPTIONAL PARM\n         SPACE 2\n* ------------------------------------------------------------------- *\n*        OPERATOR COMMAND EXHAUSTED.  WE STILL NEED SOME REQUIRED     *\n*        PARAMETERS.  START PROMPTING OPERATOR FOR THEM.              *\n* ------------------------------------------------------------------- *\nCONS0300 DS    0H\n         DITTRACE ID=MISSING       ENTRY INTO MISSING PARM PROMPTS\nCONS0310 DS    0H\n         DITTRACE ID=PROMPT3       TRACE EACH ITERATION\n         MVI   PARMCMMD,$PARMWTO   INDICATE PROMPT FOR PARAMETER\nCONS0320 DS    0H\n         MVC   PARMPARM,0(R7)      FIELD ID\n         MVC   PARMWORK,CONSWORK   DATA\n         MVC   PARMWLEN,CONSWLEN   DATA LENGTH\n         LA    R1,PARMBLOK         PARAMETER CONVERTER PARMS\n         L     R15,APARM           PARAMETER CONVERTER ENTRY POINT\n         BALR  R14,R15             LINK TO PARAMETER CONVERTER\n         TM    PARMFLAG,$PARMCAN   OPERATOR REQUET 'CANCEL'?\n         BO    CONS0600            YES... ABORT THIS COMMAND\n         TM    PARMFLAG,$PARMOK    PARAMETER OK?\n         BO    CONS0330            YES\n         DITTRACE ID=BADPARM3      TRACE INVALID PARAMETER\n         MVI   PARMCMMD,$PARMEWTO  REQUEST ERROR MSG WTO AND PROMPT\n         B     CONS0320            TRY AGAIN\nCONS0330 DS    0H\n         DITTRACE ID=GOODPRM3      TRACE GOOD PARAMETER\n         LA    R7,1(R7)            NEXT REQUIRED PARAMETER\n         BCT   R6,CONS0310         PROCESS NEXT PARAMETER\n* ------------------------------------------------------------------- *\n*        ALL PARAMETERS PROCESSED.  PASS INPUT AND OUTPUT MODULE      *\n*        ADDRESSES AND FLAGS.                                         *\n* ------------------------------------------------------------------- *\nCONS0400 DS    0H\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,FUNCIN1        INPUT MODULE ADDRESS DISPLACEMENT\n         BZ    CONS0410            NO INPUT MODULE\n         LA    R2,DITTCOMM(R1)     INPUT MODULE ADDRESS ADDRESS\n         MVC   COMMINM,0(R2)       INPUT MODULE ADDRESS\n         MVC   COMMIFLG,FUNCIFLG   INPUT MODULE FLAGS\nCONS0410 DS    0H\n         ICM   R1,3,FUNCOUT1       OUTPUT MODULE ADDRESS DISPLACEMENT\n         BZ    CONS9900            NO OUTPUT MODULE\n         LA    R2,DITTCOMM(R1)     OUTPUT MODULE ADDRESS ADDRESS\n         MVC   COMMOUTM,0(R2)      OUTPUT MODULE ADDRESS\n         MVC   COMMOFLG,FUNCOFLG   OUTPUT MODULE FLAGS\n         B     CONS9900            EXIT\n* ------------------------------------------------------------------- *\n*        ISSUE EXAMPLE WTO FOR OPERATOR.                              *\n* ------------------------------------------------------------------- *\nCONS0500 DS    0H\n         DITTRACE ID=EXAMPLE       TRACE POINT\n         MVC   CONSWTO+4(80),FUNCEX2\n         WTO   MF=(E,CONSWTO),     ISSUE WTO OF COMMAND EXAMPLE        +\n               CONSNAME=COMMCNAM   CONSOLE NAME\n         STCM  R1,7,CONSMID        SAVE WTO MESSAGE ID FOR DOM\n         B     CONS0010            REQUEST ANOTHER COMMAND\n* ------------------------------------------------------------------- *\n*        COMMAND CANCELLED BY OPERATOR                                *\n* ------------------------------------------------------------------- *\nCONS0600 DS    0H\n         DITTRACE ID=CANCEL        TRACE POINT\n         MVI   PRTCC,C' '          SINGLE SPACE\n         MVC   PRTDATA(CONSM04L),CONSM04\n         BAL   R9,PRT0000          LINK TO PRINT MODULE\n         B     CONS0620            INFORM OPERATOR\nCONS0610 DS    0H\n         DITTRACE ID=RANGERR       TRACE POINT\n         MVI   PRTCC,C' '          SINGLE SPACE\n         MVC   PRTDATA(CONSM05L),CONSM05\n         BAL   R9,PRT0000          LINK TO PRINT MODULE\n         WTO   CONSNAME=COMMCNAM,  ISSUE WTO FOR REASON                +\n               MF=(E,CONSWTO)\nCONS0620 DS    0H\n         WTO   'CURRENT COMMAND CANCELLED',                            +\n               CONSNAME=COMMCNAM   CONSOLE NAME\n         B     CONS0010            REQUEST ANOTHER COMMAND\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              LIST AVAILABLE COMMANDS                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCONS1000 DS    0H\n         DITTRACE ID=LISTCMDS      TRACE START OF LIST\n         L     R5,ACMD             FUNCTIONS TABLE ADDRESS\n         BAL   R9,PRT0000          LINK TO PRINT MODULE\nCONS1010 DS    0H\n         DITTRACE ID=LISTFUNC      TRACE EACH FUNCTION\n         CLI   FUNCELEN,X'FF'      END OF TABLE?\n         BE    CONS0010            YES\n         TM    FUNCENV,$FUNCSTC    DOES THIS COMMAND APPLY?\n         BNO   CONS1020            NO\n         MVC   CONSM01C,FUNCCMD    MOVE COMMAND\n         MVC   CONSM01D,FUNCDESC   MOVE DESCRIPTION\n         MVI   PRTCMMD,$PRTDATA    SET COMMAND\n         MVC   PRTDATA(CONSM01L),CONSM01\n         MVI   PRTCC,C'0'          DOUBLE SPACE CARRIAGE CONTROL\n         MVI   PRTCMMD,$PRTDATA    SET COMMAND\n         BAL   R9,PRT0000          LINK TO PRINT MODULE\n         MVC   CONSM02C,FUNCEX2    MOVE EXAMPLE OF COMMAND\n         MVC   PRTDATA(CONSM02L),CONSM02\n         MVI   PRTCC,C' '          SINGLE SPACE CARRIAGE CONTROL\n         BAL   R9,PRT0000          LINK TO PRINT MODULE\nCONS1020 DS    0H\n         AH    R5,FUNCELEN         NEXT FUNCTION\n         B     CONS1010            LIST NEXT FUNCTION\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXTERNAL TRACE CONTROL                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCONS2000 DS    0H\n         DITTRACE ID=XTRACE\n         CLC   CONSON,CONSAREA+6   TRACE ON?\n         BE    CONS2010            YES\n         CLC   CONSOFF,CONSAREA+6  TRACE OFF?\n         BE    CONS2030            YES\n         WTO   'INVALID EXTERNAL TRACE COMMAND (USE ''TRACE ON'' OR ''T+\n               RACE OFF'')',                                           +\n               CONSNAME=COMMCNAM\n         MVC   PRTDATA(CONSM06L),CONSM06\n         BAL   R9,PRT0000          PRINT MESSAGE\n         B     CONS0010            REQUEST ANOTHER COMMAND\nCONS2010 DS    0H\n         DITTRACE ID=TRACEON\n         TM    XTRFLAG,$XTRACE     TRACE ALREADY ON?\n         BO    CONS2020            YES\n         OI    XTRFLAG,$XTRACE     SET EXTERNAL TRACE FLAG\n         WTO   'EXTERNAL TRACE ACTIVATED',                             +\n               CONSNAME=COMMCNAM\n         MVC   PRTDATA(CONSM03L),CONSM03\n         BAL   R9,PRT0000          PRINT THE MESSAGE\n         B     CONS0010            REQUEST ANOTHER COMMAND\nCONS2020 DS    0H\n         DITTRACE ID=DUPON\n         WTO   'EXTERNAL TRACE ALREADY ACTIVE',                        +\n               CONSNAME=COMMCNAM\n         MVC   PRTDATA(CONSM07L),CONSM07\n         BAL   R9,PRT0000          PRINT THE MESSAGE\n         B     CONS0010            REQUEST ANOTHER COMMAND\nCONS2030 DS    0H\n         TM    XTRFLAG,$XTRACE     EXTERNAL TRACE FLAG ON?\n         BNO   CONS2040            NO\n         DITTRACE ID=TRACEOFF\n         NI    XTRFLAG,255-$XTRACE TURN OFF FLAG\n         WTO   'EXTERNAL TRACE DE-ACTIVATED',                          +\n               CONSNAME=COMMCNAM\n         MVC   PRTDATA(CONSM08L),CONSM08\n         BAL   R9,PRT0000          PRINT THE MESSAGE\n         B     CONS0010            REQUEST ANOTHER COMMAND\nCONS2040 DS    0H\n         DITTRACE ID=DUPOFF\n         WTO   'EXTERNAL TRACE NOT ACTIVE',                            +\n               CONSNAME=COMMCNAM\n         MVC   PRTDATA(CONSM09L),CONSM09\n         BAL   R9,PRT0000          PRINT THE MESSAGE\n         B     CONS0010            REQUEST ANOTHER COMMAND\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              INPUT PARSER                                           *\n*         'CONSWORK' SHOULD BE INITIALIZED BEFORE INVOKING            *\n*         R1, R2, R15 ARE WORK REGISTERS                              *\n*         R3 HAS CURRENT INPUT ADDRESS                                *\n*         R4 LENGTH REMAINING ON INPUT                                *\n*         R14 IS RETURN ADDRESS                                       *\n*                                                                     *\n*         ON EXIT 'CONSWORK' CONTAINS DATA FOUND TO NEXT DELIMITER,   *\n*         UPTO 8 BYTES.  'CONSWLEN' CONTAINS ITS LENGTH.              *\n*         R3 WILL BE UPDATED PAST THE DELIMITER AND R4 WILL           *\n*         REFLECT LENGTH LEFT FOLLOWING THE DELIMITER.                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCONS7000 DS    0H\n         LTR   R4,R4               ANY DATA LEFT IN RECORD?\n         BZR   R14                 NO.. EXIT\n         XC    CONSWORK,CONSWORK   CLEAR WORK AREA\n         LA    R1,CONSWORK         POINT TO WORK AREA\n         SR    R2,R2               CLEAR LENGTH COUNTER\n         LA    R15,44              MAXIMUM LENGTH\nCONS7010 DS    0H\n         CLI   0(R3),C' '          BLANK?\n         BE    CONS7030            YES\n         CLI   0(R3),C','          COMMA?\n         BE    CONS7030            YES\n         MVC   0(1,R1),0(R3)       MOVE IT\n         LA    R2,1(R2)            COUNT IT\n         LA    R3,1(R3)            NEXT\n         LA    R1,1(R1)            NEXT\n         BCT   R4,CONS7020         DECREMENT COUNT\n         STH   R2,CONSWLEN         SAVE CURRENT LENGTH\n         BR    R14                 LENGTH EXHAUSTED, EXIT HERE\nCONS7020 DS    0H\n         BCT   R15,CONS7010        LOOP\nCONS7030 DS    0H\n         STH   R2,CONSWLEN         SAVE WORK AREA ACTIVE LENGTH\n         LA    R3,1(R3)            SKIP DELIMITER\n         BCTR  R4,0                REMOVE DELIMITER LENGTH\n         BR    R14                 EXIT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT ROUTINE                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         LA    R1,PRTBLOK          PRINT INTERFACE PARAMETERS\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT\n         BR    R9                  RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              ERROR ROUTINES                                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCONSERR1 DS    0H\n         OI    COMMFLAG,$COMMCER   SIGNAL INVALID COMMAND\n         WTO   'INVALID CONSOLE COMMAND',                              +\n               CONSNAME=COMMCNAM   .. CONSOLE NAME\n         STCM  R1,7,CONSMID        SAVE MESSAGE ID FOR DOM\n         B     CONS9900            EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCONS9900 DS    0H\n         DITTRACE ID=EXIT,         TRACE EXITS                         +\n               DATA1=COMMINM,      .. INPUT MODULE ADDRESS             +\n               DATA2=COMMOUTM      .. OUTPUT MODULE ADDRESS\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              CONS-INPUT FUNCTION EXECUTED INSTRUCTIONS              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCONSFCLC CLC   FUNCCMD(0),CONSWORK  CORRECT COMMAND?\nCONSCMVC MVC   PRTDATA(0),0(R15)    MOVE COMMAND(S) TO PRINT\nWTOMMVC  MVC   CONSWTO+4(0),2(R1)   MOVE MESSAGE TEXT TO WTO\nPRTMMVC  MVC   PRTDATA(0),2(R1)     MOVE MESSAGE TEXT TO PRINT I/O\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              CONS-INPUT FUNCTION WORK AREAS                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCONSSAVE DC    18F'0'              REGISTER SAVE AREA\nCONSWORK DC    CL44' '             PARSER OUTPUT WORK AREA\nCONSWLEN DC    H'0'                CURRENT PARSER OUTPUT LENGTH\nCONSMID  DC    XL3'000000'         MESSAGE ID FROM LAST WTO\nCONSEOJ  DC    C'EOJ '             'END OF JOB' COMMAND\nCONSCAN  DC    C'CANCEL '          'CANCEL' COMMAND\nCONSXTR  DC    C'TRACE '           'TRACE' COMMAND\nCONSON   DC    C'ON '              CONSTANT\nCONSOFF  DC    C'OFF '             CONSTANT\nCONSAREA DC    CL80' '             CONSOLE REPLY AREA\nCONSWTO  WTO   '                                                       +\n                                        ',                             +\n               CONSNAME=,                                              +\n               MF=L\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PARAMETER CONVERTER INTERFACE BLOCK                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARMBLOK PARMBLOK\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              CONSTANTS                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nLISTFNC  DC    C'XXX '\nCONSM01  DC    C'COMMAND: '\nCONSM01C DC    CL4' '\n         DC    C'   DESCRIPTION:'\nCONSM01D DC    CL80' '\nCONSM01L EQU   *-CONSM01\nCONSM02  DC    C'EXAMPLE OF COMMAND:'\n         DC    CL12' '\nCONSM02C DC    CL80' '\nCONSM02L EQU   *-CONSM02\nCONSM03  DC    C'EXTERNAL TRACE ACTIVATED'\nCONSM03L EQU   *-CONSM03\nCONSM04  DC    C'COMMAND CANCELLED BY OPERATOR'\nCONSM04L EQU   *-CONSM04\nCONSM05  DC    C'INCONSISTENT PARAMETERS, COMMAND ABORTED'\nCONSM05L EQU   *-CONSM05\nCONSM06  DC    C'INVALID TRACE COMMAND (USE ''TRACE ON'' OR ''TRACE OFF+\n               '')'\nCONSM06L EQU   *-CONSM06\nCONSM07  DC    C'EXTERNAL TRACE ALREADY ACTIVE'\nCONSM07L EQU   *-CONSM07\nCONSM08  DC    C'EXTERNAL TRACE DE-ACTIVATED'\nCONSM08L EQU   *-CONSM08\nCONSM09  DC    C'EXTERNAL TRACE NOT ACTIVE'\nCONSM09L EQU   *-CONSM09\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DEFINE PARAMETERS                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         PARMGEN GEN=NO\nHIVOLID  PARMID HIGHVOL\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              FUNCTION TABLE DSECT                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  FUNCBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         END  DITTCONS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTDAIR": {"ttr": 525, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         MACRO\n&NAME    MSG   &TEXT\n         LCLA  &LEN\n&LEN     SETA  (K'&TEXT)-2\n&NAME    DS    0C\n         DC    AL2(&LEN)           LENGTH OF MESSAGE\n         DC    C&TEXT              MESSAGE\n         MEND\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC ALLOCATION ROUTINE  (DAIR) INTERFACE           *\n*                                                                     *\n*      THIS MODULE INTERFACES WITH THE SYSTEM DYNAMIC ALLOCATION      *\n*      ROUTINES (DAIR).  A REQUEST MUST SPECIFY THE TYPE OF ALLOCATE  *\n*      (UNIT IS ONLY TYPE SO FAR) AND ASSOCIATED PARAMETERS.          *\n*      WHEN A DEVICE IS ALLOCATED, IT IS ADDED TO A CHAIN ANCHORED    *\n*      IN 'DITTCOMM'.  THIS MODULE ACQUIRES STORAGE FOR THE DCB,      *\n*      IOB, ECB, AND CCW'S.  THIS STORAGE IS MAPPED BY THE 'DYNBLOK'  *\n*      DSECT.                                                         *\n*                                                                     *\n*      ON DE-ALLOCATION REQUESTS THE DYNAMIC BLOCK IS LOCATED ON THE  *\n*      CHAIN, THE DCB IS \"CLOSED\", THE UNIT DE-ALLOCATED, AND THE     *\n*      CONTROL BLOCK STORAGE IS FREED.                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTDAIR DITTPRFX DAIRSAVE,'DYNAMIC ALLOCATION INTERFACE'\n         LR    R10,R1              SAVE PARAMETER BLOCK ADDRESS\n         USING DAIRBLOK,R10        ADDRESS IT\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY,        TRACE ENTRY                         +\n               DATA1=DAIRCMMD,     .. CAPTURE COMMAND                  +\n               DATA2=DAIRCUU       .. CAPTURE CUU\n         MVI   DAIRSTAT,$DAIRSOK   CLEAR STATUS BYTE\n         TM    DAIRTYPE,$DAIRCUU   UNIT ALLOCATION/DEALLOCATION?\n         BNO   DAIR2040            NO... INVALID TYPE\n         ICM   R6,15,COMMDYHD      POINT TO HEAD OF CHAIN\n         USING DYNBLOK,R6          SPECIFY BASE\nDAIR0010 DS    0H\n         BZ    DAIR0030            NO DYNAMIC BLOCK FOR THIS CUU\n         CLC   DYNCUU,DAIRCUU      CORRECT UNIT?\n         BE    DAIR0020            YES\n         ICM   R6,15,DYNNEXT       LOAD ADDRESS OF NEXT BLOCK\n         B     DAIR0010            LOOP\nDAIR0020 DS    0H\n         DITTRACE ID=DYNLOC,       DYN BLOCK LOCATED                   +\n               RDATA1=R6           CAPTURE DYNBLOK ADDRESS\n         CLI   DAIRCMMD,$DAIRACQ   ALLOCATE REQUEST?\n         BE    DAIR2050            YES .. ALREADY ALLOCATED\n         CLI   DAIRCMMD,$DAIRREL   RELEASE REQUEST\n         BE    DAIR0600            YES\n         CLI   DAIRCMMD,$DAIRLOC   LOCATE REQUEST?\n         BNE   DAIR2010            INVALID REQUEST\n         STCM  R6,15,DAIRAREA      RETURN ADDRESS OF DYNAMIC BLOCK\n         MVI   DAIRSTAT,$DAIRSOK   GOOD STATUS\n         B     DAIR9900            EXIT TO CALLER\nDAIR0030 DS    0H\n         DITTRACE ID=NODYN         DYN BLOCK NOT LOCATED\n         CLI   DAIRCMMD,$DAIRREL   RELEASE REQUEST?\n         BE    DAIR2000            YES .. NOT LOCATED\n         CLI   DAIRCMMD,$DAIRLOC   LOCATE REQUEST?\n         BE    DAIR2000            YES .. NOT LOCATED\n         CLI   DAIRCMMD,$DAIRACQ   ALLOCTE REQUEST?\n         BNE   DAIR2010            NO .. INVALID REQUEST\n         DITTRACE ID=NEWALLOC      TRACE NEW ALLOCATION REQUESTS\n         XC    UCBTOKEN,UCBTOKEN   CLEAR THE TOKEN\n         XC    UCBWORK,UCBWORK     CLEAR THE WORK AREA TOO\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        LOCATE THE UCB                                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDAIR0040 DS    0H\n         DITTRACE ID=UCBSCAN,                                          +\n               DATA1=UCBADDR,                                          +\n               DATA2=UCBTOKEN\n         SR    R1,R1               'TURN ON' REQUEST\n         L     R15,AAUTH           DITTAUTH ENTRY POINT\n         BALR  R14,R15             LINK TO DITTAUTH\n         MODESET MODE=SUP,         ENTER SUPERVISOR STATE, KEY ZERO    +\n               KEY=ZERO\n         UCBSCAN ADDRESS,          LOCATE UCB, RETURN ITS ADDRESS      +\n               UCBPTR=UCBADDR,     .. RETURNED ADDRESS                 +\n               WORKAREA=UCBWORK,   .. WORK AREA                        +\n               DYNAMIC=YES,        .. INCLUDE DYNAMICALLY ADDED        +\n               PIN,                .. DON'T LET ANYONE DELETE IT       +\n               TEXT=UCBTEXT,       .. REASON FOR PIN                   +\n               PTOKEN=UCBTOKEN     .. TOKEN\n         LR    R2,R15              SAVE UCBSCAN RC\n         DITTRACE ID=UCB_RC,                                           +\n               RDATA1=R2\n         MODESET MODE=PROB,        PROBLEM STATE, USER KEY             +\n               KEY=NZERO\n         LA    R1,1                'TURN OFF' REQUEST\n         L     R15,AAUTH           DITTAUTH ENTRY POINT\n         BALR  R14,R15             LINK TO DITTAUTH\n         LTR   R2,R2               END OF DEVICES?\n         BNZ   DAIR2020            YES.. NOT VALID\n         ICM   R5,15,UCBADDR       UCB ADDRESS\n         USING UCBOB,R5            ADDRESS UCB\n         DITTRACE ID=UCB,          TRACE EACH UCB EXAMINED             +\n               RDATA1=R5,          .. UCB BLOCK ADDRESS                +\n               DATA2=UCBCHAN       .. DEVICE ADDRESS (NAME)\n         CLC   DAIRCUU,UCBCHAN     CORRECT DEVICE?\n         BNE   DAIR0040            NO\nDAIR0050 DS    0H\n         DITTRACE ID=UCBLOC,       TRACE UCB HAS BEEN LOCATED          +\n               RDATA1=R5,          .. CAPTURE UCB ADDRESS              +\n               DATA2=UCBTBYT3      .. CAPTURE UNIT TYPE\nDAIR0060 DS    0H\n         TM    UCBSTAT,UCBONLI     IS DEVICE ONLINE?\n         BNO   DAIR2060            NO\n         TM    UCBTBYT3,UCB3DACC   IS THIS A DASD UNIT?\n         BO    DAIR0170            YES\n         TM    UCBSTAT,UCBALOC     IS DEVICE ALREADY ALLOCATED?\n         BO    DAIR2070            YES\n         TM    UCBTBYT3,UCB3TAPE   IS THIS A TAPE UNIT?\n         BO    DAIR0070            YES\n         B     DAIR2030            DEVICE TYPE IS NOT ALLOWED\nDAIR0070 DS    0H\n         DITTRACE ID=ALOCTAPE      ALLOCATING A TAPE UNIT\n         CLI   UCBTBYT4,UCB3480    IS THIS A 3480?\n         BE    DAIR0140            YES\n         DITTRACE ID=ALOC3420      ALLOCATE REQUESTED FOR A 3420\n         TM    COMMPFLG,$COMMDEN   WAS A DENSITY REQUESTED?\n         BO    DAIR0100            YES\n         TM    UCBTBYT1,UCBD6250   6250 BPI DRIVE?\n         BO    DAIR0080            YES\n         TM    UCBTBYT2,UCBDUDN2   1600 AND 6250?\n         BO    DAIR0080            YES.. GO WITH 6250\n         TM    UCBTBYT1,UCBD1600   1600 BPI DRIVE?\n         BO    DAIR0090            YES\n         TM    UCBTBYT2,UCBDUDN1   800 AND 1600?\n         BO    DAIR0090            YES\n         DITTRACE ID=UNSP3420      UNSUPPORTED 3420\n         MVI   DAIRSTAT,$DAIRSUD   UNSUPPORTED 3420 (NOT 1600 OR 6250)\n         B     DAIR9900            AND EXIT\nDAIR0080 DS    0H\n         DITTRACE ID=DFLT6250      SETTING DENSITY TO 6250 BY DEFAULT\n         MVI   COMMDEN,$DEN6250    SET 6250 DENSITY\n         B     DAIR0160            ALLOCATE THE DEVICE\nDAIR0090 DS    0H\n         DITTRACE ID=DFLT1600      SETTING DENSITY TO 1600 BY DEFAULT\n         MVI   COMMDEN,$DEN1600    SET 1600 DENSITY\n         B     DAIR0160            ALLOCATE THE DEVICE\nDAIR0100 DS    0H\n         DITTRACE ID=CHECKDEN      CHECK DENSITY\n         CLI   COMMDEN,$DEN6250    6250 BPI REQUESTED?\n         BE    DAIR0120            YES\n         DITTRACE ID=CHK1600       CHECKING 1600\n         TM    UCBTBYT1,UCBD1600   1600 BPI DRIVE?\n         BO    DAIR0110            YES... VALID REQUEST\n         TM    UCBTBYT2,UCBDUDN1   800/1600 BPI DRIVE?\n         BO    DAIR0110            YES... VALID REQUEST\n         TM    UCBTBYT2,UCBDUDN2   1600/6250 BPI DRIVE?\n         BO    DAIR0110            YES... VALID REQUEST\n         DITTRACE ID=1600INV       DRIVE WILL NOT ALLOW 1600\n         MVI   DAIRSTAT,$DAIRS16   DRIVE WILL NOT ALLOW 1600\n         B     DAIR9900            EXIT\nDAIR0110 DS    0H\n         DITTRACE ID=1600OK        1600 IS A-OK\n         MVI   COMMDEN,$DEN1600    SET 1600 BPI\n         B     DAIR0160            ALLOCATE THE DRIVE\nDAIR0120 DS    0H\n         DITTRACE ID=CHK6250       CHECKING 6250\n         TM    UCBTBYT1,UCBD6250   6250 BPI DRIVE?\n         BO    DAIR0130            YES... VALID REQUEST\n         TM    UCBTBYT2,UCBDUDN2   1600/6250 BPI DRIVE?\n         BO    DAIR0130            YES.. VALID REQUEST\n         DITTRACE ID=6250INV       DRIVE WILL NOT ALLOW 6250\n         MVI   DAIRSTAT,$DAIRS62   DRIVE WILL NOT ALLOW 6250\n         B     DAIR9900            EXIT\nDAIR0130 DS    0H\n         DITTRACE ID=6250OK        6250 IS A-OK\n         MVI   COMMDEN,$DEN6250    SET DENSITY TO 6250\n         B     DAIR0160            ALLOCATE THE DRIVE\nDAIR0140 DS    0H\n         DITTRACE ID=ALOC3480\n         TM    COMMPFLG,$COMMDEN   WAS DENSITY SPECIFIED?\n         BNO   DAIR0150            NO.. GOOD (NOT ALLOWED ON 3480'S)\n         MVI   DAIRSTAT,$DAIRSD1   DENSITY MAY NOT BE SPECIFIED\n         B     DAIR9900            EXIT\nDAIR0150 DS    0H\n         DITTRACE ID=3480OK        3480 DENSITY OK\n         MVI   COMMDEN,$DEN3480    SET 3480 DENSITY\n* ------------------------------------------------------------------- *\n*                                                                     *\n*       CONSTRUCT SVC99 PARAMETER LIST FOR TAPE ALLOCATION            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDAIR0160 DS    0H\n         DITTRACE ID=TAPE99\n         MVC   SVC99DDN(4),DAIRTAPE MOVE 'TAPE'\n         UNPK  COMMDWRD(5),DAIRCUU(3) UNPACK CUU\n         MVZ   COMMDWRD(4),DAIR0F0F   TURN OFF ZONES\n         TR    COMMDWRD(4),DAIRHXCH   TRANSLATE TO CHARACTER\n         MVC   SVC99DDN+4(4),COMMDWRD MOVE UNPACKED CUU\n         MVC   SVC99DSN,COMMBLKS      INITIALIZE DATASET NAME\n         MVC   SVC99DSN(L'SVC99DDN),SVC99DDN\n         MVC   SVC99UTX,COMMBLKS   INITIALIZE UNIT NAME\n         MVC   SVC99UTX(3),COMMDWRD+1 MOVE CUU TO 'UNIT'\n         MVI   SVC99STT,4          INITIAL STATUS 'NEW'\n         XC    SVC99P1A(SVC99PL),SVC99P1A\n         LA    R1,SVC99RB          DYNALLOC REQUEST BLOCK\n         USING S99RB,R1            DEFINE DSECT BASE\n         MVI   S99VERB,S99VRBAL    MOVE 'ALLOCATE' VERB\n         LA    R1,SVC99DD          DD NAME ADDRESS\n         ST    R1,SVC99P1A         STORE THE ADDRESS\n         LA    R1,SVC99DS          DSN NAME ADDRESS\n         ST    R1,SVC99P2A         STORE THE ADDRESS\n         LA    R1,SVC99UT          UNIT NAME ADDRESS\n         ST    R1,SVC99P3A         STORE THE ADDRESS\n         LA    R1,SVC99ST          INITIAL STATUS (NEW)\n         ST    R1,SVC99P4A         STORE THE ADDRESS\n         LA    R1,SVC99DP          NORMAL TERMINATION DISP (KEEP)\n         ST    R1,SVC99P5A         STORE THE ADDRESS\n         LA    R1,SVC99DFP         DEFERRED MOUNT\n         ST    R1,SVC99P6A         STORE THE ADDRESS\n         OI    SVC99P6A,X'80'      SET END OF LIST\n         BAL   R9,DAIR1000         LINK TO SVC99 ROUTINE\n         CLI   DAIRSTAT,$DAIRSOK   SVC99 A-OK?\n         BE    DAIR0180            YES, CONTINUE\n         DITTRACE ID=TAPEFAIL      TRACE TAPE ALLOCATION FAILURE\n         B     DAIR9900            GO TO ERROR ROUTINE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*       CONSTRUCT SVC99 PARAMETER LIST FOR DASD ALLOCATION            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDAIR0170 DS    0H\n         DITTRACE ID=DASD99\n         TM    COMMPFLG,$COMMDEN   WAS A DENSITY REQUESTED?\n         BO    DAIR2080            YES.. NOT ALLOWED ON DASD\n         UNPK  COMMDWRD(5),DAIRCUU(3) UNPACK CUU\n         MVZ   COMMDWRD(4),DAIR0F0F   TURN OFF ZONES\n         TR    COMMDWRD(4),DAIRHXCH   TRANSLATE TO CHARACTER\n         MVC   SVC99DDN(4),DAIRDASD MOVE 'DASD'\n         MVC   SVC99DDN+4(4),COMMDWRD MOVE UNPACKED CUU\n         MVC   SVC99UTX,SYSALLDA   SET UNIT NAME\n         MVC   SVC99VLX,UCBVOLI    SET VOLSER\n         MVI   SVC99STT,1          INITIAL STATUS 'OLD'\n         XC    SVC99P1A(SVC99PL),SVC99P1A\n         LA    R1,SVC99RB          DYNALLOC REQUEST BLOCK\n         USING S99RB,R1            DEFINE DSECT BASE\n         MVI   S99VERB,S99VRBAL    MOVE 'ALLOCATE' VERB\n         LA    R1,SVC99DD          DD NAME ADDRESS\n         ST    R1,SVC99P1A         STORE THE ADDRESS\n         LA    R1,SVC99UT          UNIT NAME ADDRESS\n         ST    R1,SVC99P2A         STORE THE ADDRESS\n         LA    R1,SVC99VOL         VOLSER ADDRESS\n         ST    R1,SVC99P3A         STORE THE ADDRESS\n         LA    R1,SVC99ST          INITIAL STATUS (OLD)\n         ST    R1,SVC99P4A         STORE THE ADDRESS\n         OI    SVC99P4A,X'80'      SET END OF LIST\n         BAL   R9,DAIR1000         LINK TO SVC99 ROUTINE\n         CLI   DAIRSTAT,$DAIRSOK   SVC99 A-OK?\n         BE    DAIR0180            YES, CONTINUE\n         DITTRACE ID=DASDFAIL      TRACE DASD ALLOCATION FAILURE\n         B     DAIR9900            GO TO ERROR ROUTINE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        INITIALIZE DYNAMIC BLOCK                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDAIR0180 DS    0H\n         DITTRACE ID=UNITOK        TRACE SUCESSFUL DAIR CALLS\n         LA    R1,COMMDYHD         SAVE LAST BLOCK ADDRESS\n         ICM   R6,15,COMMDYHD      HEAD OF CHAIN\nDAIR0190 DS    0H\n         BZ    DAIR0200            END OF CHAIN FOUND\n         LR    R1,R6               SAVE LAST BLOCK ADDRESS\n         ICM   R6,15,DYNNEXT       NEXT BLOCK\n         B     DAIR0190            LOOP\nDAIR0200 DS    0H\n         LR    R6,R1               RESTORE BASE REG\n         LA    R0,DYNBLOKL         LENGTH OF DYNAMIC BLOCK\n         GETMAIN R,LV=(0)          ACQUIRE STORAGE FOR DYNAMIC BLOCK\n         DITTRACE ID=DYNGETM,      TRACE DYNAMIC BLOCK ACQUIRED        +\n               RDATA1=R2           .. SAVE DYNBLOCK ADDRESS\n         LR    R2,R1               SAVE STORAGE ADDRESS\n         LR    R0,R1               COPY STORAGE ADDRESS\n         LA    R1,DYNBLOKL         STORAGE SIZE\n         SR    R15,R15             SECOND LENGTH = 0\n         MVCL  R0,R14              CLEAR THE STORAGE\n         ST    R2,DYNNEXT          CHAIN TO NEXT BLOCK\n         DROP  R6\n         USING DYNBLOK,R2          SWAP BASE\n         ST    R6,DYNPREV          CHAIN BACKWARD\n         LR    R6,R2               LOAD PERM BASE REG\n         STCM  R6,15,DAIRAREA      PASS BLOCK ADDRESS BACK\n         DROP  R2\n         USING DYNBLOK,R6          RESTORE BASE\n         GETMAIN RU,LV=128         ACQUIRE STORAGE FOR DEB\n         ST    R1,DYNDEBA          SAVE DEB STORAGE ADDRESS\n         LR    R7,R1               SAVE DEB STORAGE ADDRESS\n         DITTRACE ID=DEBGETM,      TRACE DEB STORAGE ACQUIRED          +\n               RDATA1=R7           .. SAVE STORAGE ADDRESS\n         LA    R3,DYNIOB           IOB IN DYNAMIC BLOCK\n         LA    R4,DYNDCB           DCB IN DYNAMIC BLOCK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*          REGISTERS AT THIS TIME:                                    *\n*                                                                     *\n*             R3  IOB STORAGE WITHIN DYNAMIC BLOCK                    *\n*             R4  DCB STORAGE WITHIN DYNAMIC BLOCK                    *\n*             R5  UCB ADDRESS OF DEVICE ALLOCATED                     *\n*             R6  DYNAMIC BLOCK ADDRESS                               *\n*             R7  DEB STORAGE ADDRESS                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         MVC   DYNCUU,DAIRCUU      MOVE CUU\n         MVC   DYNVOL,UCBVOLI      COPY VOLSER\n* ------------------------------------------------------------------- *\n*           INITIALIZE IOB                                            *\n* ------------------------------------------------------------------- *\n         USING IOB,R3\n         USING IHADCB,R4                DEFINE BASE\n         USING DEB,R7\n         MVI   IOBFLAG1,X'02'      SET FLAG BYTE 1\n         ST    R4,IOBDCBPT         SET DCB ADDRESS\n* ------------------------------------------------------------------- *\n*           INITIALIZE DCB                                            *\n* ------------------------------------------------------------------- *\n         TM    UCBTBYT3,UCB3DACC   DASD UNIT?\n         BO    DAIR0210            YES\n         MVC   DYNDCB(DYNDCBL),TAPEDCB  INITIALIZE THE DCB\n         B     DAIR0220\nDAIR0210 DS    0H\n         MVC   DYNDCB(DYNDCBL),DASDDCB  INITIALIZE THE DCB\nDAIR0220 DS    0H\n         MVC   DCBDDNAM,SVC99DDN   SET DDNAME USED\n         MVC   DYNDDNAM,SVC99DDN   SET DDNAME USED\n         LA    R1,DEBBASIC         DEB BASIC SECTION ADDRESS\n         ST    R1,DCBDEBAD         INSERT DEB ADDRESS\n         ST    R3,DCBIOBA          INSERT IOB ADDRESS\n         MVC   DCBMACRF,DCBMACR    COPY DCB MACRO FORMAT PARAMETERS\n         MVC   DCBIFLGS,DCBIFLG    COPY I/O ERROR FLAGS\n         OI    DCBOFLGS,DCBOFOPN   INDICATE DCB IS OPEN\n* ------------------------------------------------------------------- *\n*           INITIALIZE DEB                                            *\n* ------------------------------------------------------------------- *\n         XC    DEBPREFX(DEBPREFE-DEBPREFX),DEBPREFX  CLEAR PREFIX\n         XC    DEBBASIC(DEBBASND-DEBBASIC),DEBBASIC  CLEAR BASIC\n         USING PSA,R0              DEFINE PSA BASE\n         MVC   DEBTCBAD,PSATNEW    SET TCB ADDRESS\n         MVI   DEBAMLNG,16         SET ACCESS METHOD SECTION LENGTH\n         MVI   DEBOFLGS,DEBDSOLD   DISPOSITION 'OLD'\n         MVI   DEBOPATB,DEBLEAVE+DEBOUTPT\n         MVI   DEBNMEXT,1          SET NUMBER OF EXTENTS\n         MVI   DEBPRIOR,X'EB'      SET PRIORITY\n         ST    R4,DEBDCBAD         INSERT ASSOCIATED DCB ADDRESS\n         MVI   DEBDEBID,X'0F'      IDENTIFY THIS AS A DEB\n         ST    R5,DEBSUCBA         UCB ASSOCIATED\n         L     R1,CVTPTR           CVT ADDRESS\n         USING CVT,R1              DEFINE CVT BASE\n         MVC   DEBAPPAD,CVTXAPG    SET I/O APPENDAGE VECTOR TABLE ADDR\n         TM    UCBTBYT3,UCB3DACC   DASD UNIT?\n         BO    DAIR0230            YES\n         MVC   DEBSDVM,COMMDEN     SET DENSITY\n         B     DAIR0240\nDAIR0230 DS    0H\n         MVI   DEBEXSCL,4          SET EXTENT SCALE\n         LA    R1,DEBBASND         DASD EXTENTION TO DEB\n         USING DEBDASD,R1          DEFINE BASE\n         XC    DEBDASD(DEBDASDE-DEBDASD),DEBDASD\n         MVI   DEBDVMOD,X'D8'      SET FILE MASK\n         STCM  R5,7,DEBUCBA        SET UCB ADDRESS\n         MVC   DEBENDCC,XFFFF      SET TO HIGH VALUE\n         MVC   DEBNMTRK,XFFFF      SET TO HIGH VALUE\n* ------------------------------------------------------------------- *\n*           ADD DEB TO DEBCHAIN FROM TCB AND TO DEBTABLE              *\n* ------------------------------------------------------------------- *\nDAIR0240 DS    0H\n         AGO   .A\n         DITTRACE ID=ADDDEB        ADDING DEB TO DEBTABLE\n         CLI   COMMENV,$ENVTSO     TSO ENVIRONMENT?\n         BNE   DAIR0250            NO\n         SR    R1,R1               'TURN ON' REQUEST\n         L     R15,AAUTH           DITTAUTH ENTRY POINT\n         BALR  R14,R15             LINK TO DITTAUTH\nDAIR0250 DS    0H\n         MODESET MODE=SUP,KEY=ZERO SWITCH TO SUPERVISOR STATE, KEY ZERO\n         USING PSA,R0              DEFINE PSA BASE\n         L     R1,PSATNEW          OUR TCB ADDRESS FROM THE PSA\n         USING TCB,R1              DEFINE BASE\n         L     R15,TCBDEB          FIRST DEB ON DEB CHAIN\n         LA    R2,DEBBASIC         'BASIC' PORTION OF DEB\nDAIR0260 DS    0H\n         STCM  R15,7,DEBDEBB       INSERT PREVIOUS ADDRESS INTO OUR DEB\n         CS    R15,R2,TCBDEB       ADD OUR DEB TO CHAIN\n         BNE   DAIR0260            UNSUCCESSFUL... TRY AGAIN\n         DEBCHK (R4),              USE DEBCHK (REFERENCE DCB NOT DEB)  +\n               AM=EXCP,            .. EXCP ACCESS METHOD               +\n               TYPE=ADD            .. ADD A DEB TO DEBTABLE\n         LR    R2,R15              SAVE RETURN CODE\n         MODESET MODE=PROB,KEY=NZERO    PROBLEM STATE, PROBLEM KEY\n         CLI   COMMENV,$ENVTSO     TSO ENVIRONMENT?\n         BNE   DAIR0270            NO\n         LA    R1,1                'TURN OFF' REQUEST\n         L     R15,AAUTH           DITTAUTH ENTRY POINT\n         BALR  R14,R15             LINK TO DITTAUTH\nDAIR0270 DS    0H\n         DITTRACE ID=DEBCHK,       TRACE DEBCHK STATUS                 +\n               RDATA1=R2           .. SAVE RETURN CODE\n         LTR   R2,R2               DEBCHK SUCCESFUL?\n         BNZ   DAIR0330            NO\n         DITTRACE ID=DEBDONE       TRACE SUCCESSFUL COMPLETION\n.A       ANOP\n         CLC   DAIRDASD,DYNDDNAM   DASD?\n         BE    DAIR0320\n         CLI   COMMDEN,$DEN1600    1600 BPI?\n         BE    DAIR0280            YES\n         CLI   COMMDEN,$DEN6250    6250 BPI?\n         BE    DAIR0300            YES\n         B     DAIR9900            EXIT\nDAIR0280 DS    0H\n         CLI   COMMENV,$ENVTSO     TSO ENVIRONMENT?\n         BE    DAIR0290            YES\n         MVC   PRTDATA(DAIRM01L),DAIRM01\n         BAL   R14,PRT0000         PRINT DENSITY MESSAGE\n         CLI   COMMENV,$ENVJOB     RUNNING AS A JOB?\n         BE    DAIR9900            YES\n         WTO   'DRIVE ALLOCATED WITH DENSITY 1600 BPI',                +\n               CONSNAME=COMMCNAM\n         B     DAIR9900            EXIT\nDAIR0290 DS    0H\n         MVC   MSG01(DAIRM01L),DAIRM01 MOVE MESSAGE\n         B     DAIR9900            AND EXIT\nDAIR0300 DS    0H\n         CLI   COMMENV,$ENVTSO     TSO ENVIRONMENT?\n         BE    DAIR0310            YES\n         MVC   PRTDATA(DAIRM02L),DAIRM02\n         BAL   R14,PRT0000         PRINT DENSITY MESSAGE\n         CLI   COMMENV,$ENVJOB     RUNNING AS A JOB?\n         BE    DAIR9900            YES\n         WTO   'DRIVE ALLOCATED WITH DENSITY 6250 BPI',                +\n               CONSNAME=COMMCNAM\n         B     DAIR9900            EXIT\nDAIR0310 DS    0H\n         MVC   MSG01(DAIRM02L),DAIRM02 MOVE MESSAGE\n         B     DAIR9900            AND EXIT\n* ------------------------------------------------------------------  *\n*    CALL DASD MODULE TO INTIALIZE VOLSER AND MAX CYLINDER AND HEAD.  *\n*                                                                     *\n*    NOTE ALSO THAT AT THIS TIME, DAIR WILL HAVE BEEN CALLED BY       *\n*    'DITTALOC' WHILE 'DITTALOC' IS RUNNING AS THE INPUT MODULE AND   *\n*    ONLY WHEN THE 'FIRST PASS' FLAG IS ON.  WHEN 'FIRST PASS' FLAG   *\n*    IS ON AND THE VOLSER IN THE DYNBLOCK IS BLANK, 'DITTDAI1' ONLY   *\n*    DOES THE INITIALIZATION PORTION OF ITS PROCESSING.               *\n*                                                                     *\n* ------------------------------------------------------------------  *\nDAIR0320 DS    0H\n         ST    R6,COMMIND          SET DYNAMIC BLOCK ADDRESS FOR 'DAI1'\n         L     R15,ADAI1           DASD READER ENTRY POINT\n         BALR  R14,R15             LINK TO DASD MODULE FOR INITIALIZE\n         B     DAIR9900            AND EXIT\nDAIR0330 DITTRACE ID=DEBAFAIL,     TRACE DEB ADD FAILURES              +\n               RDATA1=R2           .. CAPTURE DEBCHK RETURN CODE\n         ABEND ABEND015,DUMP,,USER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              RELEASE DYNAMICALLY ALLOCATED RESOURCES                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDAIR0600 DS    0H\n         DITTRACE ID=UNITFREE      TRACE DE-ALLOCATIONS\nDAIR0610 DS    0H\n         LA    R4,DYNDCB           DCB FOR THIS UNIT\n         USING IHADCB,R4           DEFINE DSECT BASE\n         AGO   .B\n         CLI   COMMENV,$ENVTSO     TSO ENVIRONMENT?\n         BNE   DAIR0620            NO\n         SR    R1,R1               'TURN ON' REQUEST\n         L     R15,AAUTH           DITTAUTH ENTRY POINT\n         BALR  R14,R15             LINK TO DITTAUTH\nDAIR0620 DS    0H\n         MODESET MODE=SUP,KEY=ZERO SWITCH TO SUPERVISOR STATE, KEY ZERO\n         DEBCHK (R4),              USE DEBCHK (REFERENCE DCB NOT DEB)  +\n               TYPE=DELETE         .. TO DELETE THE DEB FROM DEBTABLE\n         LR    R2,R15              SAVE RETURN CODE\n         DITTRACE ID=DEBDEL,       TRACE DEB DELETIONS                 +\n               RDATA1=R2           .. CAPTURE RETURN CODE\n         LTR   R2,R2               DEBCHK SUCCESSFUL?\n         BNZ   DAIR0710            NO\nDAIR0630 DS    0H\n         L     R7,DYNDEBA          DEB ADDRESS IN THIS DYN BLOCK\n         LA    R2,DEBBASIC         BASIC PORTION OF DEB\n         L     R1,PSATNEW          CURRENT TCB ADDRESS FROM PSA\n         USING TCB,R1              DEFINE DCB BASE\n         SR    R3,R3               CLEAR REGISTER\n         ICM   R3,7,TCBDEB+1       1ST DEB ON DEB CHAIN\n         LA    R4,TCBDEB           ADDRESS'S ADDRESS\nDAIR0640 DS    0H\n         DITTRACE ID=DAIR0640,     TRACE POINT                         +\n               RDATA1=R3,          .. SAVE DEB'S ADDRESS               +\n               RDATA2=R4           .. SAVE ADDRESS'S ADDRESS\n         CR    R3,R2               IS THIS THE CORRECT DEB?\n         BE    DAIR0660            YES\n         LA    R4,DEBDEBAD-DEBBASIC(R3)   NEXT DEB ADDRESS ADDRESS\n         ICM   R3,7,DEBDEBB-DEBBASIC(R3)  NEXT DEB\n         BNZ   DAIR0640            CHECK AGAIN\n         MODESET MODE=PROB,KEY=NZERO\n         CLI   COMMENV,$ENVTSO     TSO ENVIRONMENT?\n         BNE   DAIR0650            NO\n         LA    R1,1                'TURN OFF' REQUEST\n         L     R15,AAUTH           DITTAUTH ENTRY POINT\n         BALR  R14,R15             LINK TO DITTAUTH\nDAIR0650 DS    0H\n         DITTRACE ID=LOSTDEB       COULDN'T FIND THE DEB\n         ABEND ABEND016,DUMP,,USER\nDAIR0660 DS    0H\n         ICM   R2,7,DEBDEBB        NEXT DEB ON CHAIN\n         ICM   R2,8,0(R4)          SAVE ACCESS METHOD SECTION LENGTH\n         ICM   R3,15,0(R4)         CS WILL USE ALL 4 BYTES\n         DITTRACE ID=DAIR0660,     TRACE POINT                         +\n               RDATA1=R2,          .. 'NEXT' DEB'S ADDRESS             +\n               RDATA2=R3           .. 'DEBDEBAD' IN PREVIOUS DEB\n         CS    R3,R2,0(R4)         REMOVE DEB FROM DEB CHAIN\n         BNE   DAIR0630            SOMETHING CHANGED, TRY AGAIN\n         MODESET MODE=PROB,        RETURN TO OUR NORMAL SELF           +\n               KEY=NZERO\n         CLI   COMMENV,$ENVTSO     TSO ENVIRONMENT?\n         BNE   DAIR0670            NO\n         LA    R1,1                'TURN OFF' REQUEST\n         L     R15,AAUTH           DITTAUTH ENTRY POINT\n         BALR  R14,R15             LINK TO DITTAUTH\n.B       ANOP\nDAIR0670 DS    0H\n         L     R1,DYNDEBA          DEB STORAGE ADDRESS\n         FREEMAIN R,               FREE DEB STORAGE                    +\n               A=(1),                                                  +\n               LV=128\n         LA    R1,SVC99RB          DYNALLOC REQUEST BLOCK\n         USING S99RB,R1            DEFINE DSECT BASE\n         MVI   S99VERB,S99VRBUN    MOVE 'DE-ALLOCATE' VERB\n         MVC   SVC99DDN,DYNDDNAM   MOVE DD NAME\n         XC    SVC99P1A(SVC99PL),SVC99P1A\n         LA    R1,SVC99DD          DD NAME ADDRESS\n         ST    R1,SVC99P1A         STORE THE ADDRESS\n         OI    SVC99P1A,X'80'      SET END OF LIST\n         BAL   R9,DAIR1000         INVOKE DYNAMIC ALLOCATION ROUTINES\n         CLI   DAIRSTAT,$DAIRSOK   DAIR SUCCESSFUL?\n         BE    DAIR0680            YES, CONTINUE\n         DITTRACE ID=RELFAIL       TRACE DE-ALLOCATION FAILURE\n         OI    COMMFLAG,$ABEND     SIGNAL ABEND REQUEST\n         B     DAIR9900            EXIT\nDAIR0680 DS    0H\n         ICM   R1,15,DYNNEXT       'FWD' POINTER\n         BZ    DAIR0690            NO 'FWD' POINTER\n         MVC   4(4,R1),DYNPREV     RECHAIN-BWD\nDAIR0690 DS    0H\n         ICM   R1,15,DYNPREV       'BWD' POINTER\n         BZ    DAIR0700            NO 'BWD' POINTER\n         MVC   0(4,R1),DYNNEXT     RE-CHAIN FWD\nDAIR0700 DS    0H\n         LA    R0,DYNBLOKL         LENGTH OF DYNAMIC BLOCK\n         FREEMAIN R,               FREE THE STORAGE                    +\n               A=(R6),                                                 +\n               LV=(0)\n         B     DAIR9900            EXIT TO CALLER\nDAIR0710 DS    0H\n         MODESET MODE=PROB,        RETURN TO OUR NORMAL SELF           +\n               KEY=NZERO\n         CLI   COMMENV,$ENVTSO     TSO ENVIRONMENT?\n         BNE   DAIR0720            NO\n         LA    R1,1                'TURN OFF' REQUEST\n         L     R15,AAUTH           DITTAUTH ENTRY POINT\n         BALR  R14,R15             LINK TO DITTAUTH\nDAIR0720 DS    0H\n         DITTRACE ID=DEBDFAIL,     TRACE DEB DELETE FAILURES           +\n               RDATA1=R2           .. CAPTURE DEBCHK RETURN CODE\n         ABEND ABEND017,DUMP,,USER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              INVOKE DYNAMIC ALLOCATION ROUTINES                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDAIR1000 DS    0H\n         OI    SVC99PTR,X'80'      ENSURE BIT IS SET\n         LA    R1,SVC99RB          REQUEST BLOCK\n         MVI   S99RBLN,S99RBEND-S99RB ZAP IN LENGTH\n         LA    R15,SVC99P1A        DD NAME ADDRESS ADDRESS\n         ST    R15,S99TXTPP        STORE IN REQUEST BLOCK\n         DITTRACE ID=CALLDAIR,     TRACE CALL TO DAIR                  +\n               DATA1=SVC99PTR      .. CAPTURE DAIR RB POINTER ADDRESS\n         LA    R1,SVC99PTR         POINTER ADDRESS\n         DYNALLOC                  INVOKE DAIR ROUTINES\n         STCM  R15,15,DAIRR15      SAVE RETURN CODE\n         LA    R1,SVC99RB          REQUEST BLOCK\n         USING S99RB,R1            DEFINE DSECT BASE\n         MVC   DAIRERR,S99ERROR    MOVE ERROR CODE\n         MVC   DAIRINFO,S99INFO    MOVE REASON CODE\n         DITTRACE ID=DAIRRC,       TRACE DAIR RETURN                   +\n               RDATA1=R15,         .. SAVE R15                         +\n               DATA2=DAIRERR       .. REASON FOR VALUE IN R15\n         LTR   R15,R15             DAIR SUCCESSFUL?\n         BZR   R9                  YES\n         MVI   DAIRSTAT,$DAIRSDE   INDICATE ERROR FROM DAIR CALL\n         L     R15,ACLASS2         CLASS 2 MESSAGE TABLE\n         CLI   DAIRERR,X'02'       CLASS 2 ERROR?\n         BE    DAIR1010            YES\n         L     R15,ACLASS3         CLASS 3 MESSAGE TABLE\n         CLI   DAIRERR,X'03'       CLASS 3 ERROR?\n         BE    DAIR1010            YES\n         L     R15,ACLASS4         CLASS 4 MESSAGE TABLE\n         CLI   DAIRERR,X'04'       CLASS 4 ERROR?\n         BNER  R9                  NO\nDAIR1010 DS    0H\n         OI    COMMFLAG,$ABORT     TURN ON ABORT FLAG\n         SR    R14,R14             CLEAR REGISTER\n         IC    R14,DAIRERR+1       MESSAGE DISP\n         AR    R15,R14             MESSAGE ADDRESS POINTER\n         L     R14,0(R15)          MESSAGE BLOCK ADDRESS\n         USING MSGDSECT,R14        DEFINE DSECT BASE\n         LH    R15,MSGMSGL         MESSAGE LENGTH\n         BCTR  R15,0               ADJUST LENGTH\n         EX    R15,PRTMSGM         MOVE MESSAGE TO PRINT\n         CLI   COMMENV,$ENVTSO     TSO ENVIRONMENT?\n         BE    DAIR1020            YES\n         MVI   PRTCC,C' '          CARRIAGE CONTROL\n         BAL   R14,PRT0000         LINK TO PRINT MODULE\n         BR    R9                  RETURN\nDAIR1020 DS    0H\n         EX    R15,TSOMSGM         MOVE MESSAGE\n         BR    R9                  RETURN\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              ERROR CONDITIONS                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDAIR2000 DS    0H\n         MVI   DAIRSTAT,$DAIRSLE   UNSUCCESSFUL LOCATE ON REL/LOC\n         B     DAIR9900            EXIT\nDAIR2010 DS    0H\n         MVI   DAIRSTAT,$DAIRSIR   INVALID REQUEST\n         B     DAIR9900            EXIT\nDAIR2020 DS    0H\n         MVI   DAIRSTAT,$DAIRSNU   UNIT DOES NOT EXIST (ALLOCATE)\n         B     DAIR9900            EXIT\nDAIR2030 DS    0H\n         MVI   DAIRSTAT,$DAIRSTE   INVALID DEVICE TYPE\n         B     DAIR9900            EXIT\nDAIR2040 DS    0H\n         OI    COMMFLAG,$ABORT     SET ABORT FLAG\n         MVI   DAIRSTAT,$DAIRSRE   INVALID RESOURCE TYPE\n         B     DAIR9900            EXIT\nDAIR2050 DS    0H\n         MVI   DAIRSTAT,$DAIRSDP   SECOND ALLOCATE FOR SAME DEVICE\n         B     DAIR9900            EXIT\nDAIR2060 DS    0H\n         MVI   DAIRSTAT,$DAIRSOF   DEVICE OFFLINE\n         B     DAIR9900            EXIT\nDAIR2070 DS    0H\n         MVI   DAIRSTAT,$DAIRSAL   DEVICE ALREADY ALLOCATED\n         B     DAIR9900            EXIT\nDAIR2080 DS    0H\n         MVI   DAIRSTAT,$DAIRSD2   DENSITY NOT ALLOWED ON DASD\n         B     DAIR9900            EXIT\nPRT0000  DS    0H\n         ST    R14,PRTSAVE         SAVE R14\n         MVI   PRTCMMD,$PRTCMD     REQUEST PRINT\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         L     R14,PRTSAVE         RESTORE R14\n         BR    R14                 RETURN\nDAIR9900 DS    0H\n         DITTRACE ID=EXIT          TRACE\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXECUTED INSTRUCTIONS                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTMSGM  MVC   PRTDATA(0),MSGMSG   MOVE MESSAGE TO PRINT AREA\nTSOMSGM  MVC   MSG01(0),MSGMSG     MOVE MESSAGE TO PRINT AREA\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              CONSTANTS                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDAIRTAPE DC    C'TAPE'\nDAIRDASD DC    C'DASD'\nSYSALLDA DC    C'SYSALLDA'\nDAIR0F0F DC    16X'0F'\nDAIRHXCH DC    C'0123456789ABCDEF'\nXFFFF    DC    X'FFFF'\nUCBTEXT  DC    CL58'PINNED BY DITTO'\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDAIRSAVE DC    18F'0'                  REGISTER SAVE AREA\nPRTSAVE  DC    A(0)                    R14 SAVED DURING 'PRT0000'\nACLASS2  DC    A(CLASS2)               CLASS '2' ERROR MESSAGES\nACLASS3  DC    A(CLASS3)               CLASS '3' ERROR MESSAGES\nACLASS4  DC    A(CLASS4)               CLASS '4' ERROR MESSAGES\nUCBADDR  DC    A(0)                    UCB ADDRESS\nUCBTOKEN DC    8X'00'\n         DC    CL16'DAIR PARM BLOCK'\nSVC99PTR DC    A(X'80000000'+SVC99RB)  DYNALLOC POINTER\nSVC99RB  DC    (S99RBEND-S99RB)X'00'   DYNALLOC REQUEST BLOCK\nSVC99P1A DC    A(0)                    DAIR TEXT UNIT ADDRESSES\nSVC99P2A DC    A(0)\nSVC99P3A DC    A(0)\nSVC99P4A DC    A(0)\nSVC99P5A DC    A(0)\nSVC99P6A DC    A(0)\nSVC99P7A DC    A(0)\nSVC99P8A DC    A(0)\nSVC99P9A DC    A(0)\nSVC99PL  EQU   *-SVC99P1A              PARAMETER LIST LENGTH\nSVC99DD  DC    AL2(DALDDNAM)           KEY FOR DATASET NAME\n         DC    AL2(0001)               NUMBER OF LENGTH/ENTRIES\n         DC    AL2(8)                  LENGTH OF ENTRY\nSVC99DDN DC    CL8'TAPEXXX '           DATASET NAME\nSVC99DS  DC    AL2(DALDSNAM)           KEY FOR DATASET NAME\n         DC    AL2(0001)               NUMBER OF LENGTH/ENTRIES\n         DC    AL2(44)                 LENGTH OF ENTRY\nSVC99DSN DC    CL44'TAPEXXX'           DATASET NAME\nSVC99UT  DC    AL2(DALUNIT)            KEY FOR UNIT\n         DC    AL2(0001)               NUMBER OF LENGTH/ENTRIES\n         DC    AL2(8)                  LENGTH OF ENTRY\nSVC99UTX DC    CL8' '                  UNIT\nSVC99ST  DC    AL2(DALSTATS)           KEY FOR STATUS\n         DC    AL2(0001)               NUMBER OF LENGTH/ENTRIES\n         DC    AL2(1)                  LENGTH OF ENTRY\nSVC99STT DC    X'04'                   STATUS -NEW-\nSVC99DP  DC    AL2(DALNDISP)           KEY FOR STATUS\n         DC    AL2(0001)               NUMBER OF LENGTH/ENTRIES\n         DC    AL2(1)                  LENGTH OF ENTRY\nSVC99DSP DC    X'08'                   NORMAL DISPOSITION -KEEP-\nSVC99DFP DC    AL2(DALDEFER)           KEY FOR DEFERRED MOUNT\n         DC    AL2(0000)               NUMBER OF LENGTH/ENTRIES\nSVC99VOL DC    AL2(DALVLSER)           KEY FOR VOLSER\n         DC    AL2(0001)               NUMBER OF LENGTH/ENTRIES\n         DC    AL2(6)                  LENGTH OF ENTRY\nSVC99VLX DC    CL6' '                  VOLSER\n         SPACE 2\nTAPEDCB  DCB   MACRF=EXCP,             MODEL TAPE DCB                  +\n               DDNAME=TAPEXXXX,                                        +\n               DEVD=TA,                                                +\n               DSORG=PS\nDASDDCB  DCB   MACRF=EXCP,             MODEL DASD DCB                  +\n               DDNAME=DASDXXXX,                                        +\n               DEVD=DA,                                                +\n               DSORG=PS\nDAIRM01  DC    C'DRIVE ALLOCATED WITH DENSITY 1600 BPI'\nDAIRM01L EQU   *-DAIRM01\nDAIRM02  DC    C'DRIVE ALLOCATED WITH DENSITY 6250 BPI'\nDAIRM02L EQU   *-DAIRM02\nUCBWORK  DC    XL100'00'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINTER INTERFACE BLOCK                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              CLASS 2 DYNAMIC ALLOCATION MESSAGES ADCONS             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCLASS2   DS   0A\n         DC   A(0)                UNUSED\n         DC   A(E0204)            ADDRESS OF MESSAGE FOR CODE '0204'\n         DC   A(E0208)            ADDRESS OF MESSAGE FOR CODE '0208'\n         DC   A(E020C)            ADDRESS OF MESSAGE FOR CODE '020C'\n         DC   A(E0210)            ADDRESS OF MESSAGE FOR CODE '0210'\n         DC   A(E0214)            ADDRESS OF MESSAGE FOR CODE '0214'\n         DC   A(E0218)            ADDRESS OF MESSAGE FOR CODE '0218'\n         DC   A(E021C)            ADDRESS OF MESSAGE FOR CODE '021C'\n         DC   A(E0220)            ADDRESS OF MESSAGE FOR CODE '0220'\n         DC   A(E0224)            ADDRESS OF MESSAGE FOR CODE '0224'\n         DC   A(E0228)            ADDRESS OF MESSAGE FOR CODE '0228'\n         DC   A(E022C)            ADDRESS OF MESSAGE FOR CODE '022C'\n         DC   A(E0230)            ADDRESS OF MESSAGE FOR CODE '0230'\n         DC   A(E0234)            ADDRESS OF MESSAGE FOR CODE '0234'\n         DC   A(E0238)            ADDRESS OF MESSAGE FOR CODE '0238'\n         DC   A(E023C)            ADDRESS OF MESSAGE FOR CODE '023C'\n         DC   A(E0240)            ADDRESS OF MESSAGE FOR CODE '0240'\n         DC   A(E0244)            ADDRESS OF MESSAGE FOR CODE '0244'\n         DC   A(E0248)            ADDRESS OF MESSAGE FOR CODE '0248'\n         DC   A(E024C)            ADDRESS OF MESSAGE FOR CODE '024C'\n         DC   A(E0250)            ADDRESS OF MESSAGE FOR CODE '0250'\n         DC   A(E0254)            ADDRESS OF MESSAGE FOR CODE '0254'\n         DC   A(E0258)            ADDRESS OF MESSAGE FOR CODE '0258'\n         DC   A(E025C)            ADDRESS OF MESSAGE FOR CODE '025C'\n         DC   A(E0260)            ADDRESS OF MESSAGE FOR CODE '0260'\n         DC   A(E0264)            ADDRESS OF MESSAGE FOR CODE '0264'\n         DC   A(E0268)            ADDRESS OF MESSAGE FOR CODE '0268'\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              CLASS 3 DYNAMIC ALLOCATION MESSAGES ADCONS             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCLASS3   DS   0A\n         DC   A(0)                UNUSED\n         DC   A(E0304)            ADDRESS OF MESSAGE FOR CODE '0304'\n         DC   A(E0308)            ADDRESS OF MESSAGE FOR CODE '0308'\n         DC   A(E030C)            ADDRESS OF MESSAGE FOR CODE '030C'\n         DC   A(E0310)            ADDRESS OF MESSAGE FOR CODE '0310'\n         DC   A(E0314)            ADDRESS OF MESSAGE FOR CODE '0314'\n         DC   A(E0318)            ADDRESS OF MESSAGE FOR CODE '0318'\n         DC   A(E031C)            ADDRESS OF MESSAGE FOR CODE '031C'\n         DC   A(E0320)            ADDRESS OF MESSAGE FOR CODE '0320'\n         DC   A(E0324)            ADDRESS OF MESSAGE FOR CODE '0324'\n         DC   A(E0328)            ADDRESS OF MESSAGE FOR CODE '0328'\n         DC   A(E032C)            ADDRESS OF MESSAGE FOR CODE '032C'\n         DC   A(E0330)            ADDRESS OF MESSAGE FOR CODE '0330'\n         DC   A(E0334)            ADDRESS OF MESSAGE FOR CODE '0334'\n         DC   A(E0338)            ADDRESS OF MESSAGE FOR CODE '0338'\n         DC   A(E033C)            ADDRESS OF MESSAGE FOR CODE '033C'\n         DC   A(E0340)            ADDRESS OF MESSAGE FOR CODE '0340'\n         DC   A(E0344)            ADDRESS OF MESSAGE FOR CODE '0344'\n         DC   A(E0348)            ADDRESS OF MESSAGE FOR CODE '0348'\n         DC   A(E034C)            ADDRESS OF MESSAGE FOR CODE '034C'\n         DC   A(E0350)            ADDRESS OF MESSAGE FOR CODE '0350'\n         DC   A(E0354)            ADDRESS OF MESSAGE FOR CODE '0354'\n         DC   A(E0358)            ADDRESS OF MESSAGE FOR CODE '0358'\n         DC   A(E035C)            ADDRESS OF MESSAGE FOR CODE '035C'\n         DC   A(E0360)            ADDRESS OF MESSAGE FOR CODE '0360'\n         DC   A(E0364)            ADDRESS OF MESSAGE FOR CODE '0364'\n         DC   A(E0368)            ADDRESS OF MESSAGE FOR CODE '0368'\n         DC   A(E036C)            ADDRESS OF MESSAGE FOR CODE '037C'\n         DC   A(E0370)            ADDRESS OF MESSAGE FOR CODE '0370'\n         DC   A(E0374)            ADDRESS OF MESSAGE FOR CODE '0374'\n         DC   A(E0378)            ADDRESS OF MESSAGE FOR CODE '0378'\n         DC   A(E037C)            ADDRESS OF MESSAGE FOR CODE '038C'\n         DC   A(E0380)            ADDRESS OF MESSAGE FOR CODE '0380'\n         DC   A(E0384)            ADDRESS OF MESSAGE FOR CODE '0384'\n         DC   A(E0388)            ADDRESS OF MESSAGE FOR CODE '0388'\n         DC   A(E038C)            ADDRESS OF MESSAGE FOR CODE '038C'\n         DC   A(E0390)            ADDRESS OF MESSAGE FOR CODE '0390'\n         DC   A(E0394)            ADDRESS OF MESSAGE FOR CODE '0394'\n         DC   A(E0398)            ADDRESS OF MESSAGE FOR CODE '0398'\n         DC   A(E039C)            ADDRESS OF MESSAGE FOR CODE '039C'\n         DC   A(E03A0)            ADDRESS OF MESSAGE FOR CODE '03A0'\n         DC   A(E03A4)            ADDRESS OF MESSAGE FOR CODE '03A4'\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              CLASS 4 DYNAMIC ALLOCATION MESSAGES ADCONS             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCLASS4   DS   0A\n         DC   A(0)                UNUSED\n         DC   A(E0404)            ADDRESS OF MESSAGE FOR CODE '0404'\n         DC   A(E0408)            ADDRESS OF MESSAGE FOR CODE '0408'\n         DC   A(E040C)            ADDRESS OF MESSAGE FOR CODE '040C'\n         DC   A(E0410)            ADDRESS OF MESSAGE FOR CODE '0410'\n         DC   A(E0414)            ADDRESS OF MESSAGE FOR CODE '0414'\n         DC   A(E0418)            ADDRESS OF MESSAGE FOR CODE '0418'\n         DC   A(E041C)            ADDRESS OF MESSAGE FOR CODE '041C'\n         DC   A(E0420)            ADDRESS OF MESSAGE FOR CODE '0420'\n         DC   A(E0424)            ADDRESS OF MESSAGE FOR CODE '0424'\n         DC   A(E0428)            ADDRESS OF MESSAGE FOR CODE '0428'\n         DC   A(E042C)            ADDRESS OF MESSAGE FOR CODE '042C'\n         DC   A(E0430)            ADDRESS OF MESSAGE FOR CODE '0430'\n         DC   A(E0434)            ADDRESS OF MESSAGE FOR CODE '0434'\n         DC   A(E0438)            ADDRESS OF MESSAGE FOR CODE '0438'\n         DC   A(E043C)            ADDRESS OF MESSAGE FOR CODE '043C'\n         DC   A(E0440)            ADDRESS OF MESSAGE FOR CODE '0440'\n         DC   A(E0444)            ADDRESS OF MESSAGE FOR CODE '0444'\n         DC   A(E0448)            ADDRESS OF MESSAGE FOR CODE '0448'\n         DC   A(E044C)            ADDRESS OF MESSAGE FOR CODE '044C'\n         DC   A(E0450)            ADDRESS OF MESSAGE FOR CODE '0450'\n         DC   A(E0454)            ADDRESS OF MESSAGE FOR CODE '0454'\n         DC   A(E0458)            ADDRESS OF MESSAGE FOR CODE '0458'\n         DC   A(E045C)            ADDRESS OF MESSAGE FOR CODE '045C'\n         DC   A(E0460)            ADDRESS OF MESSAGE FOR CODE '0460'\n         DC   A(E0464)            ADDRESS OF MESSAGE FOR CODE '0464'\n         DC   A(E0468)            ADDRESS OF MESSAGE FOR CODE '0468'\n         DC   A(E046C)            ADDRESS OF MESSAGE FOR CODE '047C'\n         DC   A(E0470)            ADDRESS OF MESSAGE FOR CODE '0470'\n         DC   A(E0474)            ADDRESS OF MESSAGE FOR CODE '0474'\n         DC   A(E0478)            ADDRESS OF MESSAGE FOR CODE '0478'\n         DC   A(E047C)            ADDRESS OF MESSAGE FOR CODE '048C'\n         DC   A(E0480)            ADDRESS OF MESSAGE FOR CODE '0480'\n         DC   A(E0484)            ADDRESS OF MESSAGE FOR CODE '0484'\n         DC   A(E0488)            ADDRESS OF MESSAGE FOR CODE '0488'\n         DC   A(E048C)            ADDRESS OF MESSAGE FOR CODE '048C'\n         DC   A(E0490)            ADDRESS OF MESSAGE FOR CODE '0490'\n         DC   A(E0494)            ADDRESS OF MESSAGE FOR CODE '0494'\n         DC   A(E0498)            ADDRESS OF MESSAGE FOR CODE '0498'\n         DC   A(E049C)            ADDRESS OF MESSAGE FOR CODE '049C'\n         DC   A(E04A0)            ADDRESS OF MESSAGE FOR CODE '04A0'\n         DC   A(E04A4)            ADDRESS OF MESSAGE FOR CODE '04A4'\n         DC   A(E04A8)            ADDRESS OF MESSAGE FOR CODE '04A8'\n         DC   A(E04AC)            ADDRESS OF MESSAGE FOR CODE '04AC'\n         DC   A(E04B0)            ADDRESS OF MESSAGE FOR CODE '04B0'\n         DC   A(E04B4)            ADDRESS OF MESSAGE FOR CODE '04B4'\n         DC   A(E04B8)            ADDRESS OF MESSAGE FOR CODE '04B8'\n         DC   A(E04BC)            ADDRESS OF MESSAGE FOR CODE '04BC'\n         DC   A(E04C0)            ADDRESS OF MESSAGE FOR CODE '04C0'\n         DC   A(E04C4)            ADDRESS OF MESSAGE FOR CODE '04C4'\n         DC   A(E04C8)            ADDRESS OF MESSAGE FOR CODE '04C8'\n         DC   A(E04CC)            ADDRESS OF MESSAGE FOR CODE '04CC'\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              CLASS 2 DYNAMIC ALLOCATION MESSAGES                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nE0204   MSG    'INSUFFICIENT STORAGE'\nE0208   MSG    'MANUAL SAYS THIS IS A RESERVED CODE'\nE020C   MSG    'REQUEST FOR SHARED DEVICE CANNOT BE HONORED'\nE0210   MSG    'DATASET IN USE'\nE0214   MSG    'UNIT NOT AVAILABLE'\nE0218   MSG    'VOLUME NOT MOUNTED'\nE021C   MSG    'UNIT NAME UNDEFINED'\nE0220   MSG    'REQUESTED VOLUME NOT AVAILABLE'\nE0224   MSG    'ELIGIBLE DEVICE TYPE(S) DO NOT CONTAIN ENOUGH UNITS'\nE0228   MSG    'SPECIFIED VOLUME OR UNIT IN USE BY SYSTEM OR RESERVED U+\n               NIT'\nE022C   MSG    'VOLUME MOUNTED ON INELIGIBLE PERMANENTLY RESIDENT OR RE+\n               SERVED UNIT'\nE0230   MSG    'PERMANENTLY RESIDENT OR RESERVED VOLUME ON REQUIRED UNI+\n               T'\nE0234   MSG    'MORE THAN ONE DEVICE REQUIRED FOR REQUEST SPECIFIYING A+\n                SPECIFIC UNIT'\nE0238   MSG    'NO SPACE AVAILABLE IN TIOT'\nE023C   MSG    'REQUIRED CATALOG NOT MOUNTED'\nE0240   MSG    'REQUESTED DEVICE IS A CONSOLE'\nE0244   MSG    'TELECOMMUNICATION DEVICE NOT ACCESSABLE'\nE0248   MSG    'MSS VIRTUAL VOLUME CANNOT BE MOUNTED'\nE024C   MSG    'OPERATING-SYSTEM-MANAGED RESOURCE UNAVAILABE TO SUBSYST+\n               EM'\nE0250   MSG    'SUBSYSTEM RESOURCE NOT AVAILABLE'\nE0254   MSG    'TIOT CURRENTLY UNVAILABLE'\nE0258   MSG    'INSUFFICIENT NUMBER OF NON-RESTRICTED UNITS'\nE025C   MSG    'REQUESTED DEVICE IS BOXED (VARIED OFFLINE)'\nE0260   MSG    'UNIT DOES NOT MEET STATUS REQUIREMENTS'\nE0264   MSG    'INVALID REQUEST DUE TO CURRENT UNIT STATUS'\nE0268   MSG    'TAPE DEVICE IS BROKEN'\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              CLASS 3 DYNAMIC ALLOCATION MESSAGES                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nE0304   MSG    'ASSIGNED BY DAIR'\nE0308   MSG    'ASSIGNED BY DAIR'\nE030C   MSG    'ASSIGNED BY DAIR'\nE0310   MSG    'ASSIGNED BY DAIR'\nE0314   MSG    'ASSIGNED BY DAIR'\nE0318   MSG    'ASSIGNED BY DAIR'\nE031C   MSG    'ASSIGNED BY DAIR'\nE0320   MSG    'ASSIGNED BY DAIR'\nE0324   MSG    'ASSIGNED BY DAIR'\nE0328   MSG    'ASSIGNED BY DAIR'\nE032C   MSG    'ASSIGNED BY DAIR'\nE0330   MSG    'ASSIGNED BY DAIR'\nE0334   MSG    'ASSIGNED BY DAIR'\nE0338   MSG    'ASSIGNED BY DAIR'\nE033C   MSG    'RESERVED'\nE0340   MSG    'RESERVED'\nE0344   MSG    'RESERVED'\nE0348   MSG    'RESERVED'\nE034C   MSG    'RESERVED'\nE0350   MSG    'RESERVED'\nE0354   MSG    'RESERVED'\nE0358   MSG    'OVERRIDING DISPOSITION OF DELETE INVALID FOR DATASET AL+\n               LOCATED SHR'\nE035C   MSG    'INVALID PARM IN TEXT UNIT (INTERNAL ERROR)'\nE0360   MSG    'INVALID KEY IN TEXT UNIT (INTERNAL ERROR)'\nE0364   MSG    'JOBLIB/STEPLIB/JOBCAT/STEPCAT SPECIFIED AS DDNAME'\nE0368   MSG    'AUTHORIZED FUNCTION REQUESTED'\nE036C   MSG    'INVALID PARAMETER LIST FORMAT'\nE0370   MSG    'RESERVED'\nE0374   MSG    'INVALID # SPECIFIED IN TEXT UNIT (INTERNAL ERROR)'\nE0378   MSG    'DUPLICATE KEY IN TEXT UNITS (INTERNAL ERROR)'\nE037C   MSG    'INVALID LENGTH IN TEXT UNIT (INTERNAL ERROR)'\nE0380   MSG    'MUTUALLY EXCLUSIVE KEYS IN TEXT UNITS (INTERNAL ERROR)'\nE0384   MSG    'REQUIRED KEY NOT SPECIFIED IN TEXT UNITS (INTERNAL ERRO+\n               R)'\nE0388   MSG    'REQUIRED KEY NOT SPECIFIED IN TEXT UNITS (INTERNAL ERRO+\n               R)'\nE038C   MSG    'DUPLICATE DDNAMES (CONCATENATION)'\nE0390   MSG    'GDG GROUP NAME SPECIFIED WITH RELATIVE GENERATION EXCEE+\n               DS 35 CHARACTERS'\nE0394   MSG    'STATUS AND RELATIVE GENERATION ARE INCOMPATIBLE'\nE0398   MSG    'VOLUME SEQUENCE NUMBER EXCEEDS NUMBER OF VOLUMES'\nE039C   MSG    'DEVICE TYPE AND VOLUME ARE INCOMPATIBLE'\nE03A0   MSG    'SUBSYSTEM DETECTED AN INVALID PARAMETER'\nE03A4   MSG    'UNABLE TO PROTECT DATASET/VOLUME BECAUSE OF CONFLICTING+\n                KEYWORD SPECIFICATION'\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              CLASS 4 DYNAMIC ALLOCATION MESSAGES                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nE0404   MSG    'RESERVED'\nE0408   MSG    'RESERVED'\nE040C   MSG    'RESERVED'\nE0410   MSG    'SPECIFIED DDNAME UNAVAILABLE'\nE0414   MSG    'RESERVED'\nE0418   MSG    'RESERVED'\nE041C   MSG    'RESERVED'\nE0420   MSG    'SPECIFIED DDNAME ASSOCIATED WITH AN OPEN DATASET'\nE0424   MSG    'DECONCATENATION WOULD RESULT IN DUPLICATE DDNAME'\nE0428   MSG    'RESERVED'\nE042C   MSG    'RESERVED'\nE0430   MSG    'RESERVED'\nE0434   MSG    'DDNAME IN DDNAME ALLOCATION IS ASSOCIATED WITH A CONVER+\n               TABLE OR NON-PERMANENTLY ALLOCATED RESOURCE'\nE0438   MSG    'SPECIFIED DDNAME NOT FOUND'\nE043C   MSG    'SYSTEM COULD NOT DEALLOCATE ENOUGH RESOURCES BEING HELD+\n                FOR REUSE TO MEET CONTROL LIMIT'\nE0440   MSG    'SPECIFIED DDNAME NOT FOUND'\nE0444   MSG    'RELATIVE ENTRY NUMBER SPECIFIED IN INFORMATION RETRIEVA+\n               L REQUEST NOT FOUND'\nE0448   MSG    'REQUEST FOR DATASET FAILED-DATASET ALREADY EXISTS'\nE044C   MSG    'REQUEST WITH DISPOSITION DELETE FAILED- DATASET MAY BE +\n               DELETED AT ANY TIME'\nE0450   MSG    'REQUEST EXCEEDS LIMIT OF 1635 CONCURRENT ALLOCATIONS'\nE0454   MSG    'GDG GROUP NAME'\nE0458   MSG    'DSNAME IN DCB REFERENCE OR VOLUME REFERENCE IS A GDG GR+\n               OUP NAME'\nE045C   MSG    'SPECIFIED DSNAME TO BE DEALLOCATED IS MEMBER OF A PERMA+\n               NENTLY-CONCATENATED GROUP'\nE0460   MSG    'SPECIFIED DSNAME OR MEMBER NOT ASSOCIATED WITH SPECIFIE+\n               D DDNAME'\nE0464   MSG    'SPECIFIED DDNAME FOR DEALLOCATION IS A PRIVATE CATALOG'\nE0468   MSG    'ERROR WHILE ALLOCATING OR OPENING A PRIVATE CATALOG'\nE046C   MSG    'REMOTE WORK STATION NOT DEFINED TO JES'\nE0470   MSG    'USER NOT AUTHORIZED FOR JES REQUESTS'\nE0474   MSG    'ERROR WHILE ATTEMPTING TO SELECT OPTIMUM DEVICE'\nE0478   MSG    'UNABLE TO PROCESS JES REQUEST'\nE047C   MSG    'UNABLE TO ESTABLISH ESTAE ENVIRONMENT'\nE0480   MSG    'NUMBER OF UNITS NEEDED EXCEEDS LIMIT'\nE0484   MSG    'REQUEST DENIED BY OPERATOR'\nE0488   MSG    'GDG PATTERN DSCB NOT MOUNTED'\nE048C   MSG    'GDG PATTERM DSCB NOT FOUND'\nE0490   MSG    'ERROR CHANGING ALLOCATION ASSIGNMENTS'\nE0494   MSG    'ERROR PROCESSING OS CVOL'\nE0498   MSG    'MSS VIRTUAL VOLUME NOT ACCESSIBLE'\nE049C   MSG    'MSS VIRTUAL VOLUME NOT DEFINED'\nE04A0   MSG    'SPECIFIED MSVGP NAME NOT DEFINED'\nE04A4   MSG    'SUBSYSTEM REQUEST IN ERROR'\nE04A8   MSG    'SUBSYSTEM DOES NOT SUPPORT ALLOCATION VIA KEY DALSSNM'\nE04AC   MSG    'SUBSYSTEM NOT OPERATIONAL'\nE04B0   MSG    'SUBSYSTEM DOES NOT EXIST'\nE04B4   MSG    'PROTECT REQUEST NOT PROCESSED, RACF NOT ACTIVE'\nE04B8   MSG    'MSS NOT INITIALIZED FOR ALLOCATION'\nE04BC   MSG    'MSS VOLUME SELECT ERROR'\nE04C0   MSG    'PROTECT REQUEST FAILED, USER NOT DEFINED TO RACF'\nE04C4   MSG    'MAXIMUM REFERBACK LIMIT EXCEEDED'\nE04C8   MSG    'NON-ZERO RETURN CODE FROM COMMON ALLOCATION OR JFCB HOU+\n               SEKEEPING'\nE04CC   MSG    'INVALID REFERENCE TO OUTPUT JCL STATEMENT'\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              ERROR MESSAGE TABLE DSECT                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMSGDSECT DSECT\nMSGMSGL  DS    AL2                MESSAGE LENGTH\nMSGMSG   DS    0C                 MESSAGE TEXT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC DEVICE BLOCK                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK  TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC ALLOCATE/DE-ALLOCATE REQUEST BLOCK             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDAIRBLOK DAIRBLOK TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              ABEND CODE EQUATES                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ABCODES\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS COMMUNICATIONS VECTOR TABLE                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CVT   DSECT=YES\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS UNIT CONTROL BLOCK                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEFUCBOB\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS IOB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZIOB\nIOBLEN   EQU  *-IOB\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS DCB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DCBD DSORG=PS\nDYNDCBL  EQU    *-IHADCB\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS PSA DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA DSECT=YES,LIST=NO\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS TCB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IKJTCB LIST=NO\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS DEB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZDEB LIST=YES\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS DAIR INTERFACE DSECTS/EQUATES                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEFZB4D0\n         IEFZB4D2\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DITTDAI1": {"ttr": 3339, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*--------------------------------------------------------------------*\n*                                                                    *\n*              DASD INPUT MODULE                                     *\n*                                                                    *\n*--------------------------------------------------------------------*\nDITTDAI1 DITTPRFX DASDSAVE,'DASD READER MODULE'\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY         TRACE ENTRY\n         TM    COMMFLAG,$COMMCLS   CLOSE FILE INDICATOR??\n         BO    DASD9900            YES\n         L     R10,COMMIND         DYNAMIC BLOCK ADDRESS\n         USING DYNBLOK,R10         SPECIFY BASE\n         LA    R9,DYNIOB           IOB WITHIN DYNBLOCK\n         USING IOB,R9              DEFINE BASE\n         TM    COMMFLAG,$COMM1ST   FIRST PASS??\n         BNO   DASD0010            NO\n         ST    R10,EXCPDYN         PASS DYNAMIC BLOCK ADRESS TO EXCP\n         ZAP   DASDRCDS,COMMP0     ZERO RECORD COUNTER\n         XC    DASDCRCD,DASDCRCD   CLEAR CURRENT RECORD ADDRESS\n         XC    DASDREM,DASDREM     CLEAR REMAINING BLOCK AMOUNT\n         DITTRACE ID=CCWINIT       TRACE INTIALIZE ROUTINE\n         MVC   DYNCCW(CCWL),SRCHCCW INITIALIZE CCW STRING\n         LA    R1,IOBCC            SEARCH ADDRESS\n         STCM  R1,7,DYNCCW1+1      SET SEARCH DATA ADDRESS\n         LA    R1,DYNCCW1          SEARCH CCW ADDRESS\n         STCM  R1,7,DYNCCW2+1      SET TRANSFER ADDRESS IN TIC CCW\n         L     R1,ACOMMIOI         INPUT BUFFER\n         STCM  R1,7,DYNCCW3+1      SET DATA BUFFER ADDRESS\n         OC    IOBCC(5),IOBCC      HIGH ADDRESS DETERMINED?\n         BNZ   DASD0010            YES\n*--------------------------------------------------------------------*\n*                                                                    *\n*        DYNBLOK INITIALIZATION                                      *\n*                                                                    *\n*     THIS MODULE IS CALLED BY 'DITTDAIR' DURING ALLOCATION OF A     *\n*     DASD DEVICE.  THIS PORTION OF PROCESSING DETERMINES THE DASD'S *\n*     DEVICE'S MAX CYLINDER AND HEAD NUMBERS.                        *\n*                                                                    *\n*--------------------------------------------------------------------*\n         MVC   IOBCC(5),VTOCPTRA   SET DISK ADDRESS FOR VTOC POINTER\n         BAL   R8,DASD0250         READ VTOC POINTER RECORD\n         CLI   EXCPSTAT,$EXCPOK    READ SUCCESSFULLY?\n         BNE   DASD0400            NO\n         L     R1,DASDCRCD         INPUT BUFFER ADDRESS\n         USING VTOCPTR,R1          DEFINE VTOC POINTER BASE\n         MVC   IOBCC(5),VTOCADDR   SET DISK ADDRESS TO VTOC'S ADDRESS\n         DITTRACE ID=READFMT4,     READING FORMAT 4 RECORD             +\n               DATA1=IOBCC         .. INCLUDE DISK ADDRESS USED\n         BAL   R8,DASD0250         READ FORMAT 4 RECORD\n         CLI   EXCPSTAT,$EXCPOK    READ SUCCESSFULLY?\n         BNE   DASD0400            NO\n         L     R1,DASDCRCD         INPUT BUFFER ADDRESS\n         USING FMT4,R1             DEFINE FORMAT 4 RECORD BASE\n         MVC   DYNHDADR,DS4DEVSZ   SAVE MAX CYLINDER AND HEAD NUMBERS\n         B     DASD9900            'INITIALIZATION' COMPLETE\nDASD0010 DS    0H\n         LA    R2,DYNDCB           DCB WITHIN DYNBLOK\n         USING IHADCB,R2           DEFINE DSECT BASE\n         NI    COMMIFLG,255-$NEWBLOK TURN OFF NEW BLOCK INDICATOR\nDASD0020 DS    0H\n         TM    COMMPFLG,$COMMRCS   RECORD COUNT GIVEN??\n         BNO   DASD0030            NO, BYPASS RECORD COUNT CHECK\n         CP    DASDRCDS,COMMRCDS   READ ENOUGH RECORDS??\n         BE    DASD0530            YES, SIGNAL END OF FILE\nDASD0030 DS    0H\n         TM    COMMIFLG,$DEBLOCK   DEBLOCKING RECORDS??\n         BNO   DASD0100            NO\n         DITTRACE ID=NEXTRECD,     CALLED FOR NEXT RECORD,             +\n               DATA1=DASDCRCD,     .. CURRENT RECORD'S ADDRESS         +\n               DATA2=DASDREM       .. LENGTH REMAINING\n         OC    DASDREM,DASDREM     ANY LENGTH REMAINING??\n         BZ    DASD0100            NO.. NEED ANOTHER RECORD\n         DITTRACE ID=DEBLOCK       LENGTH REMAINING, DEBLOCK RECORD\nDASD0040 DS    0H\n         ICM   R3,15,DASDCRCD      CURRENT RECORD ADDRESS\n         BZ    DASD0460            ERROR\n         SR    R2,R2               CLEAR REGISTER\n         TM    COMMIFLG,$VREC      VARIABLE LENGTH RECORDS??\n         BO    DASD0050            YES\n         ICM   R2,3,COMMLRCL       LOGICAL RECORD SIZE\n         B     DASD0060            CONTINUE\nDASD0050 DS    0H\n         ICM   R2,3,0(R3)          RECORD SIZE\nDASD0060 DS    0H\n         TM    COMMIFLG,$NEWBLOK   NEW BLOCK JUST READ??\n         BO    DASD0070            YES, LEAVE CURRENT ADDRESS\n         AR    R3,R2               BRING INPUT ADDRESS FORWARD\nDASD0070 DS    0H\n         TM    COMMIFLG,$VREC      VARIABLE LENGTH RECORDS??\n         BNO   DASD0080            NO, RECORD LENGTH WILL BE THE SAME\n         ICM   R2,3,0(R3)          LENGTH OF NEW RECORD\n         BZ    DASD0420         ...RECORD LENGTH ZERO.. INVALID\nDASD0080 DS    0H\n         CLM   R2,3,DASDREM        LONGER THAN REMAINING LENGTH??\n         BNH   DASD0090            NO\n         ICM   R2,3,DASDREM        OTHERWISE LIMIT LENGTH\nDASD0090 DS    0H\n         ST    R3,DASDCRCD         SAVE CURRENT RECORD ADDRESS\n         ST    R3,COMMCRCD         PASS CURRENT RECORD ADDRESS\n         STH   R2,COMMCRCL         PASS CURRENT RECORD LENGTH\n         DITTRACE ID=LREC,         RECORD ADDRESS AND LENGTH           +\n               RDATA1=R3,          .. LOGICAL RECORD'S ADDRESS         +\n               RDATA2=R2           .. LOGICAL RECORD'S LENGTH\n         SR    R3,R3               CLEAR REGISTER\n         ICM   R3,3,DASDREM        REMAINING SIZE\n         SR    R3,R2               COMPUTE REMAINING SIZE\n         STCM  R3,3,DASDREM        SAVE REMAINING SIZE\n         AP    DASDRCDS,COMMP1     ADD 1 TO RECORD COUNT\n         B     DASD9900            EXIT\nDASD0100 DS    0H\n         DITTRACE ID=NEXTBLOK      READ NEXT PHYSICAL RECORD\n         BAL   R8,DASD0200         LINK TO I/O\n         TM    COMMIFLG,$DEBLOCK   DEBLOCKING RECORDS??\n         BNO   DASD0130            NO\n         TM    COMMIFLG,$VREC      VARIABLE LENGTH RECORDS?\n         BNO   DASD0040            NO\n         SR    R0,R0               CLEAR REGISTER\n         L     R3,DASDCRCD         BLOCK ADDRESS\n         ICM   R0,3,0(R3)          LENGTH FROM BDW (MAYBE)\n         SH    R0,H4               MINUS BDW LENGTH\n         BNH   DASD0040            INSUFFICIENT LENGTH\n         LA    R3,4(R3)            FIRST RDW IN THE BLOCK\n         SR    R2,R2               CLEAR REGISTER\nDASD0110 DS    0H\n         ICM   R2,3,0(R3)          RECORD LENGTH FROM RDW\n         BZ    DASD0420            RECORD WITH LENGTH = ZERO!\n         SR    R0,R2               MINUS LENGTH OF THIS RECORD\n         BM    DASD0040            NEGATIVE... LENGTHS DON'T ADD UP\n         BZ    DASD0120            ZERO.. LENGTHS MATCH\n         AR    R3,R2               NEXT RDW ADDRESS\n         B     DASD0110            LOOP\nDASD0120 DS    0H\n         L     R3,DASDCRCD         BLOCK ADDRESS\n         ICM   R2,3,0(R3)          BLOCK LENGTH\n         SH    R2,H4               MINUS BDW LENGTH\n         STCM  R2,3,DASDREM        SET LENGTH REMAINING\n         LA    R3,4(R3)            FIRST LOGICAL RECORD'S ADDRESS\n         ST    R3,DASDCRCD         SET RECORD ADDRESS\n         B     DASD0040            DEBLOCK FIRST RECORD\nDASD0130 DS    0H\n         DITTRACE ID=PHYRECD,      PHYSICAL BLOCK                      +\n               DATA1=DASDCRCD,     .. PHYSICAL BLOCK ADDRESS           +\n               DATA2=DASDREM       .. PHYSICAL BLOCK SIZE\n         MVC   COMMCRCD,DASDCRCD   PASS RECORD ADDRESS\n         MVC   COMMCRCL,DASDREM    PASS RECORD LENGTH\n         AP    DASDRCDS,COMMP1     ADD 1 TO RECORD COUNT\n         B     DASD9900            EXIT\n*---------------------------------------------------------------------*\n*                                                                     *\n*                    LINK TO EXCP FOR ACTUAL I/O                      *\n*                                                                     *\n*---------------------------------------------------------------------*\nDASD0200 DS    0H\n         TM    COMMFLAG,$COMM1ST   FIRST PASS?\n         BNO   DASD0210            NO\n         MVC   IOBCC(5),COMMDADR   SET DISK ADDRESS\n         B     DASD0240            SKIP DISK ADDRESS UPDATE\nDASD0210 DS    0H\n         SR    R1,R1               CLEAR REGISTER\n         IC    R1,IOBR             RECORD NUMBER\n         LA    R1,1(R1)            NEXT RECORD\n         STC   R1,IOBR             SAVE RECORD NUMBER\n         DITTRACE ID=NEWREC,DATA1=IOBCC\n         MVC   COMMDADR,IOBCC      SAVE DISK ADDRESS\n         B     DASD0240            READ WITH NEW RECORD NUMBER\nDASD0220 DS    0H\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,IOBHH          CURRENT HEAD NUMBER\n         LA    R1,1(R1)            NEXT HEAD\n         STCM  R1,3,IOBHH          SAVE HEAD NUMBER\n         MVI   IOBR,1              START OVER AT RECORD 1\n         DITTRACE ID=NEWHEAD,DATA1=IOBCC\n         MVC   COMMDADR,IOBCC      SAVE DISK ADDRESS\n         CLM   R1,3,DYNHHEAD       TIME FOR NEW CYLINDER?\n         BL    DASD0240            NO\nDASD0230 DS    0H\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,IOBCC          CURRENT CYLINDER NUMBER\n         LA    R1,1(R1)            NEXT CYLINDER\n         STCM  R1,3,IOBCC          SAVE CYLINDER NUMBER\n         XC    IOBHH,IOBHH         SET HEAD TO ZERO\n         MVI   IOBR,1              START OVER AT RECORD 1\n         DITTRACE ID=NEWCYL,DATA1=IOBCC\n         MVC   COMMDADR,IOBCC      SAVE DISK ADDRESS\n         CLM   R1,3,DYNHCYL        BEYOND MAX CYLINDER?\n         BNL   DASD0500            YES.. WHOA!\nDASD0240 DS    0H\n         CLC   DYNHCYL,IOBCC       INVALID CYLINDER\n         BL    DASD0430            YES\n         CLC   DYNHHEAD,IOBHH      INVALID DISK ADDRESS?\n         BL    DASD0430            YES\nDASD0250 DS    0H\n         SR    R1,R1               CLEAR REGISTER\n         IC    R1,IOBR             .. SUBTRACT 1 FROM RECORD NUMBER\n         BCTR  R1,0                   BECAUSE WE ALWAYS DO A READ\n         STC   R1,IOBR                COUNT, KEY, AND DATA\n         DITTRACE ID=DASDIO,       TRACE I/O'S                         +\n               DATA1=IOBCC         .. DISK ADDRESS USED FOR I/O\n         XC    COMMKEY,COMMKEY     CLEAR KEY'S ADDRESS\n         LA    R1,EXCPBLOK         EXCP INTERFACE PARAMETER LIST\n         L     R15,AEXCP           EXCP MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO EXCP INTERFACE\n         SR    R1,R1               CLEAR REGISTER\n         IC    R1,IOBR             .. ADD 1 BACK TO RECORD NUMBER\n         LA    R1,1(R1)               BECAUSE WE ALWAYS DO A READ\n         STC   R1,IOBR                COUNT, KEY, AND DATA\n         CLI   EXCPSTAT,$EXCPRNF   RECORD NOT FOUND?\n         BE    DASD0220            YES, TRY NEXT HEAD\n         L     R1,ACOMMIOI         I/O AREA ADDRESS\n         MVC   COMMCNT,0(R1)       MOVE CKD COUNT INFO TO COMM\n         CLI   EXCPSTAT,$EXCPOK    I/O SUCCESSFUL?\n         BNE   DASD0400            NO..\n         CLC   CNTADDR,IOBCC       DID I READ THE RECORD I WANTED?\n         BL    DASD0220            NO.. TRACK WRAPPED\n         OI    COMMIFLG,$NEWBLOK   TURN ON NEW BLOCK INDICATOR\n         MVC   DASDREM,CNTDATAL    SET DATA LENGTH\n         LA    R1,COMMCNTL(R1)     COUNT IS NOT PART OF RECORD'S DATA\n         SR    R0,R0               CLEAR REG 0\n         ICM   R0,1,CNTKEYL        KEY LENGTH\n         BZ    DASD0260            NO KEY\n         DITTRACE ID=KEYADDR,      KEYED RECORD                        +\n               RDATA1=R1\n         ST    R1,COMMKEY          SET KEY'S ADDRESS\n         AR    R1,R0               PLUS KEY'S LENGTH\nDASD0260 DS    0H\n         DITTRACE ID=BLOKADDR,     PHYSICAL DATA'S ADDRESS             +\n               RDATA1=R1,          .. DATA ADDRESS                     +\n               DATA2=DASDREM       .. REMAINING LENGTH\n         ST    R1,DASDCRCD         SET DATA'S ADDRESS\n         BR    R8                  RETURN\n*---------------------------------------------------------------------*\n*                                                                     *\n*                    ERROR ROUTINES                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\nDASD0400 DS    0H\n         CLC   CNTADDR,IOBCC       RECORD ADDRESS PRESENT IN I/O AREA?\n         BNE   DASD0410            NO\n         OC    CNTL,CNTL           KEY LENGTH AND DATA LENGTH = ZERO?\n         BZ    DASD0520            YES.. EOF RECORD\nDASD0410 DS    0H\n         LA    R3,DYNIOB           IOB USED FOR I/O\n         DITTRACE ID=READERR       TRACE READ ERRORS\n         ABEND ABEND018,DUMP,,USER\nDASD0420 DS    0H\n         DITTRACE ID=ZERORECL      TRACE LRECL = ZERO\n         ABEND ABEND019,DUMP,,USER\nDASD0430 DS    0H\n         DITTRACE ID=BADADDR       BAD DISK ADDRESS\n         TM    COMMFLAG,$COMM1ST   FIRST PASS?\n         BO    DASD0440            YES... USER ENTERED A BAD ADDRESS\n         ABEND ABEND020,DUMP,,USER\nDASD0440 DS    0H\n         DITTRACE ID=USERBAD       BAD DISK ADDRESS\n         OI    COMMFLAG,$ABORT     SET ABORT FLAG\n         CLI   COMMENV,$ENVTSO     TSO ENVIRONMENT?\n         BE    DASD0450            YES\n         MVC   PRTDATA(DASDM02L),DASDM02\n         MVI   PRTCMMD,$PRTCMD     PRINT COMMAND\n         LA    R1,PRTBLOK          PRINT PARAMETER BLOCK\n         L     R15,APRT            PRINT ENTRY POINT\n         BALR  R14,R15             PRINT BAD ADDRESS MESSAGE\n         CLI   COMMENV,$ENVJOB     BATCH ENVIRONMENT?\n         BE    DASD9900            YES EXIT\n         WTO   'INVALID DISK ADDRESS (CYLINDER OR HEAD NUMBER TOO HIGH)+\n               ',CONSNAME=COMMCNAM\n         B     DASD9900            AND EXIT\nDASD0450 DS    0H\n         MVC   MSG01(DASDM02L),DASDM02\n         B     DASD9900            AND EXIT\nDASD0460 DS    0H\n         DITTRACE ID=ZEROCRCD      CURRENT RECORD ADDRESS WAS ZERO\n         ABEND ABEND024,DUMP,,USER\n*---------------------------------------------------------------------*\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nDASD0500 DS    0H\n         DITTRACE ID=EOV           END OF VOLUME\n         CLI   COMMENV,$ENVTSO     TSO ENVIRONMENT?\n         BE    DASD0510            YES\n         MVC   PRTDATA(DASDM01L),DASDM01\n         MVI   PRTCMMD,$PRTDATA    PRINT COMMAND\n         LA    R1,PRTBLOK          PRINT PARAMETER BLOCK\n         L     R15,APRT            PRINT ENTRY POINT\n         BALR  R14,R15             PRINT EOV MESSAGE\n         CLI   COMMENV,$ENVSTC     STC ENVIRONMENT?\n         BNE   DASD0530            NO\n         WTO   'END OF VOLUME REACHED, COMMAND HALTED',                +\n               CONSNAME=COMMCNAM   .. CONSOLE ID\n         B     DASD0530            SET EOF AND EXIT\nDASD0510 DS    0H\n         MVC   MSG01(DASDM01L),DASDM01\n         B     DASD0530\nDASD0520 DS    0H\n         DITTRACE ID=EOFRECD\n         MVI   DYNSTAT,$DYNEOF     SET EOF RECORD READ\n         TM    COMMPFLG,$COMMRCS   'RECORDS' IN EFFECT?\n         BNO   DASD0530            NO\n         DITTRACE ID=FORCEOF       EOF FORCED BY EOF RECORD\n         OI    COMMFLAG,$COMMFE    EOF FORCED BY EOF RECORD\nDASD0530 DS    0H\n         DITTRACE ID=EOF\n         OI    COMMFLAG,$COMMEOF   SIGNAL EOF\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MODULE EXIT POINT                                     *\n*                                                                    *\n*--------------------------------------------------------------------*\nDASD9900 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n         SPACE 2\n*--------------------------------------------------------------------*\n*                                                                    *\n*              WORK AREAS/CONSTANTS                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\nSRCHCCW  CCW   X'31',*,CC,5        SEARCH FOR RECORD BY RECORD ID\nTICCCW   CCW   X'08',SRCHCCW,0,8   TRANSFER IN CHANNEL\nREADCCW  CCW   X'1E',*,SILI,65535  READ COUNT, KEY, AND DATA\nCCWL     EQU   *-SRCHCCW           CCW STRING LENGTH\nDASDSAVE DC    18F'0'              REGISTER SAVE AREA\nDASDCRCD DC    A(0)                CURRENT RECORD ADDRESS\nH4       DC    H'4'                CONSTANT\nDASDREM  DC    H'0'                LENGTH REMAINING IN RECORD\nDASDRCDS DC    PL5'0'              RECORD COUNTER\nVTOCPTRA DC    X'0000000003'       VTOC POINTER DISK ADDRESS\nDASDM01  DC    C'END OF VOLUME REACHED, COMMAND HALTED'\nDASDM01L EQU   *-DASDM01\nDASDM02  DC    C'DISK ADDRESS INVALID (CYLINDER OR HEAD NUMBER TOO HIGH+\n               )'\nDASDM02L EQU   *-DASDM02\n         LTORG\n*--------------------------------------------------------------------*\n*                                                                    *\n*              EXCP INTERFACE BLOCK                                  *\n*                                                                    *\n*--------------------------------------------------------------------*\nEXCPBLOK EXCPBLOK\n*--------------------------------------------------------------------*\n*                                                                    *\n*              PRINT MODULE INTERFACE                                *\n*                                                                    *\n*--------------------------------------------------------------------*\nPRTBLOK  PRTBLOK\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              REGISTER EQUATES                                      *\n*                                                                    *\n*--------------------------------------------------------------------*\n         COPY  REGEQU\nSILI     EQU   X'20'\nCC       EQU   X'40'\n         ABCODES\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              COMMON MODULE DSECT                                   *\n*                                                                    *\n*--------------------------------------------------------------------*\nDITTCOMM DITTCOMM TYPE=DSECT\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              DYNAMIC BLOCK DSECT                                   *\n*                                                                    *\n*--------------------------------------------------------------------*\nDYNBLOK  DYNBLOK TYPE=DSECT\n         EJECT\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MVS IOB DSECT                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\n         IEZIOB\nIOBLEN   EQU  *-IOB\n*--------------------------------------------------------------------*\n*                                                                    *\n*              MVS DCB DSECT                                         *\n*                                                                    *\n*--------------------------------------------------------------------*\n         DCBD DSORG=PS\nDYNDCBL  EQU   *-IHADCB\n*--------------------------------------------------------------------*\n*                                                                    *\n*              VTOC POINTER RECORD                                   *\n*                                                                    *\n*--------------------------------------------------------------------*\nVTOCPTR  DSECT\nVTOCVOL1 DS   CL4                VOL1 RECORD IDENTIFIER 'VOL1'\nVTOCSER  DS   CL6                VOLSER\n         DS   X\nVTOCADDR DS   XL5                VTOC'S DISK ADDRESS\n         DS   CL64\n*--------------------------------------------------------------------*\n*                                                                    *\n*              FORMAT 4 LABEL                                        *\n*                                                                    *\n*--------------------------------------------------------------------*\nFMT4     DSECT\n         IECSDSL1  4             GENERATE FORMAT 4 RECORD MAP\n         END  DITTDAI1\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTEXCP": {"ttr": 1037, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXCP INTERFACE                                         *\n*                                                                     *\n*       THIS MODULE INITIATES ALL EXCP I/O.  THE CCW STRING WILL      *\n*       ALREADY HAVE BEEN PLACED IN THE DYNAMIC BLOCK (DYNCCW).       *\n*       THIS MODULE REMOVES THE DUPLICATION OF THE EXCP AND THE       *\n*       ERROR CHECKING.                                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTEXCP DITTPRFX EXCPSAVE,'EXCP INTERFACE'\n         USING DITTCOMM,R11        SPECIFY BASE\n         LR    R10,R1              SAVE PARAMETER BLOCK ADDRESS\n         USING EXCPBLOK,R10        DEFINE ADDRESSABILITY\n         DITTRACE ID=ENTRY         TRACE ENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                    BUILD IOB AND INITIATE I/O                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXCP0010 DS    0H\n         L     R2,EXCPDYN          DYNAMIC BLOCK IN USE\n         USING DYNBLOK,R2          DEFINE DYNBLOK ADDRESSABILITY\n         LA    R3,DYNIOB           IOB WITHIN DYNBLOK\n         USING IOB,R3              DEFINE DSECT BASE\n         CLC   EXCPTAPE,DYNDDNAM   IS THIS A TAPE I/O?\n         BNE   EXCP0020            NO\n         TM    DYNSTAT,$DYNPEOT    TAPE AT PHYSICAL EOT?\n         BNO   EXCP0020            NO.. ANYTHING IS ACCEPTABLE\n         CLI   DYNCCW,X'07'        REWIND CCW?\n         BE    EXCP0020            YES.. ALLOWABLE\n         CLI   DYNCCW,X'0F'        REWIND/UNLOAD CCW?\n         BNE   EXCP0200            NO.. DON'T ALLOW\nEXCP0020 DS    0H\n         CLC   EXCPDASD,DYNDDNAM   DASD I/O?\n         BNE   EXCP0030            NO\n         DITTRACE ID=DASDADDR,                                         +\n               DATA1=IOBCC\nEXCP0030 DS    0H\n         MVI   DYNSTAT,0           CLEAR ALL INDICATORS\n         LA    R1,DYNCCW           CCW STRING ADDRESS\n         ST    R1,IOBSTART         INSERT CCW STRING ADDRESS\n         LA    R1,DYNECB           INPUT FILE ECB\n         STCM  R1,7,IOBECBPB       INSERT ECB ADDRESS\n         LA    R1,DYNDCB           DCB FOR THIS IOB\n         ST    R1,IOBDCBPT         INSERT DCB ADDRESS\n         DITTRACE ID=STARTIO,      TRACE I/O'S                         +\n               DATA1=IOBSTART,                                         +\n               DATA2=DYNCCW\n         XC    DYNECB,DYNECB       CLEAR ECB\n         SR    R1,R1               REQUEST AUTHORIZATION\n         L     R15,AAUTH\n         BALR  R14,R15             MAKE SURE WE'RE AUTHORIZED\n         MODESET KEY=ZERO\n         EXCP  IOBSTDRD            START THE I/O\n         MODESET KEY=NZERO\n         LA    R1,1                AUTHORIZATION OFF\n         L     R15,AAUTH\n         BALR  R14,R15             UN-AUTHORIZE\n         WAIT  ECB=DYNECB          WAIT FOR I/O COMPLETION\n         CLI   DYNECB,X'44'        SHOULD I RETRY\n         BE    EXCP0020            YES\n         CLI   DYNECB,X'7F'        I/O SUCCESSFUL??\n         BNE   EXCP0090            NO\n         SR    R0,R0               CLEAR REGISTER\n         SR    R1,R1               CLEAR REGISTER\n         CLC   EXCPTAPE,DYNDDNAM   IS THIS A TAPE I/O?\n         BE    EXCP0060            YES\n         LA    R14,DYNCCW1         FIRST CCW\n         LA    R15,8               NUMBER OF CCW'S POSSIBLE\nEXCP0040 DS    0H\n         CLI   0(R14),X'06'        READ DATA?\n         BE    EXCP0050            YES\n         CLI   0(R14),X'86'        READ DATA?\n         BE    EXCP0050            YES\n         CLI   0(R14),X'0E'        READ KEY AND DATA?\n         BE    EXCP0050            YES\n         CLI   0(R14),X'8E'        READ KEY AND DATA?\n         BE    EXCP0050            YES\n         CLI   0(R14),X'1E'        READ COUNT, KEY, AND DATA?\n         BE    EXCP0050            YES\n         CLI   0(R14),X'9E'        READ COUNT, KEY, AND DATA?\n         BE    EXCP0050            YES\n         LA    R14,L'DYNCCW1(R14)  NEXT CCW\n         BCT   R15,EXCP0040        CHECK NEXT CCW\n         B     EXCP0080            NO LENGTH FROM THIS I/O\nEXCP0050 DS    0H\n         ICM   R0,3,6(R14)         LENGTH FROM CCW\n         B     EXCP0070\nEXCP0060 DS    0H\n         CLI   DYNCCW,X'02'        IS THIS A 'READ FORWARD' CCW?\n         BNE   EXCP0080            NO\n         ICM   R0,3,DYNCCW1+6      LENGTH FROM CCW\nEXCP0070 DS    0H\n         ICM   R1,3,IOBSTDRD+14    RESIDUAL LENGTH\n         SR    R0,R1               MINUS RESIDUAL LENGTH\n         STH   R0,EXCPLEN          SET LENGTH ACTUALLY READ\n         DITTRACE ID=DATALEN,      TRACE POINT                         +\n               RDATA1=R0           .. CAPTURE DATA LENGTH\nEXCP0080 DS    0H\n         DITTRACE ID=GOODIO,       I/O SUCCESSFUL                      +\n               DATA1=IOBFLAG1,     .. SAVE IOBFLAG1                    +\n               DATA2=IOBFLAG3      .. SAVE IOBFLAG3\n         MVI   EXCPSTAT,$EXCPOK    SET STATUS\n         B     EXCP9900            AND EXIT\nEXCP0090 DS    0H\n         DITTRACE ID=IOERROR,      TRACE I/O ERRORS                    +\n               DATA1=IOBFLAG1,     .. SAVE IOBFLAG1                    +\n               DATA2=IOBFLAG3      .. SAVE IOBFLAG3\n         TM    IOBFLAG1,IOBIOERR   UNIT EXCEPTION?\n         BO    EXCP0100            YES ...\n         DC    H'0'\n         LA    R1,SENSECCW         SENSE CCW ADDRESS\n         ST    R1,IOBSTART         INSERT SENSE CCW ADDRESS\n         XC    DYNECB,DYNECB       CLEAR ECB\n         EXCP  IOBSTDRD            START THE SENSE I/O\n         WAIT  ECB=DYNECB          WAIT FOR I/O COMPLETION\n         CLI   DYNECB,X'7F'        SENSE SUCCESSFUL?\n         BNE   EXCP0310            NO..\n         DITTRACE ID=ERRSENSE,     TRACE SENSE DATA                    +\n               DATA1=SENSE,        .. BYTES 0-7                        +\n               DATA2=SENSE+8       .. BYTES 8-15\n         ABEND ABEND010,DUMP,,USER ABEND\nEXCP0100 DS    0H\n         CLC   EXCPTAPE,DYNDDNAM   WAS THIS A TAPE I/O?\n         BE    EXCP0120            YES\n         TM    IOBSENS1,X'08'      RECORD NOT FOUND?\n         BO    EXCP0110            YES\n         OI    EXCPSTAT,$EXCPIOE   I/O ERROR\n         B     EXCP9900            AND EXIT\nEXCP0110 DS    0H\n         OI    EXCPSTAT,$EXCPRNF   RECORD NOT FOUND\n         B     EXCP9900            AND EXIT\nEXCP0120 DS    0H\n         DITTRACE ID=UNITEX        UNIT EXCEPTION\n         LA    R1,SENSECCW         SENSE CCW ADDRESS\n         ST    R1,IOBSTART         INSERT SENSE CCW ADDRESS\n         XC    DYNECB,DYNECB       CLEAR ECB\n         EXCP  IOBSTDRD            START THE SENSE I/O\n         WAIT  ECB=DYNECB          WAIT FOR I/O COMPLETION\n         DITTRACE ID=UXSENSE,      TRACE SENSE DATA FOR UNIT EXCEPTION +\n               DATA1=SENSE,        .. BYTES 0-7                        +\n               DATA2=SENSE+8       .. BYTES 8-15\n         CLI   DYNECB,X'7F'        SENSE SUCCESSFUL?\n         BNE   EXCP0320            NO..\n         CLI   SENSE04,$S4TPIND    TAPE INDICATE (PHYSICAL EOT)?\n         BE    EXCP0150            YES\n         LA    R1,DYNCCW           FIRST CCW\nEXCP0130 DS    0H\n         CLI   0(R1),X'01'         WRITE CCW?\n         BE    EXCP0160            YES\n         CLI   0(R1),X'1F'         WRITE TAPE-MARK CCW?\n         BE    EXCP0160            YES\n         TM    4(R1),CHAINCMD      CHAINED COMMANDS?\n         BNO   EXCP0140            NO\n         LA    R1,8(R1)            NEXT CCW\n         B     EXCP0130            CHECK ALL CCW'S\nEXCP0140 DS    0H\n*\n*\n*      IF ANYONE CAN FIGURE OUT HOW TO DETECT THE RESET KEY, I WOULD\n*      CERTAINLY LIKE TO HEAR FROM YOU.\n*\n*      DITTO SHOULD PROBABLY BE SMARTER AND TEST FOR OTHER CONDITIONS\n*      BEFORE ASSUMING THE EXCEPTION WAS FOR A TAPE MARK.\n*\n*\n         DITTRACE ID=TAPEMARK      TRACE TAPE MARK FOUND\n         MVI   DYNSTAT,$DYNTM      INDICATE TAPE MARK\n         B     EXCP9900            EXIT.. STATUS TM\nEXCP0150 DS    0H\n         DITTRACE ID=TAPEIND       TRACE PHYSICAL EOT\n         MVI   DYNSTAT,$DYNPEOT+$DYNTM  SET TAPE MARK+PEOT FLAGS\n         B     EXCP9900            EXIT.. STATUS PHYSICAL EOT\nEXCP0160 DS    0H\n         TM    SENSE01,$S1FILEP    FILE PROTECT ON?\n         BNO   EXCP0170            NO\n         DITTRACE ID=FILEPROT      FILE PROTECT IS ON\n         MVI   DYNSTAT,$DYNPROT    TAPE IS FILE PROTECTED\n         B     EXCP9900            EXIT\nEXCP0170 DS    0H\n         DITTRACE ID=WRITERR       I/O ERROR DURING WRITE OR WTM\n         OI    EXCPSTAT,$EXCPIOE   I/O ERROR\n         B     EXCP9900            AND EXIT\nEXCP0200 DS    0H\n         DITTRACE ID=NOTALLOW      I/O NOT ALLOWED WHILE AT PEOT\n         MVI   EXCPSTAT,$EXCPNA    SET NOT ALLOWED STATUS\n         B     EXCP9900\nEXCP0300 DS    0H\n         ABEND ABEND031,DUMP,,USER ABEND\nEXCP0310 DS    0H\n         ABEND ABEND032,DUMP,,USER ABEND\nEXCP0320 DS    0H\n         ABEND ABEND033,DUMP,,USER ABEND\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXCP9900 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS/CONSTANTS                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSENSECCW CCW   4,SENSE,SILI,SENSEL SENSE CCW\nEXCPSAVE DC    18F'0'              REGISTER SAVE AREA\nEXCPTAPE DC    CL4'TAPE'           CONSTANT\nEXCPDASD DC    CL4'DASD'           CONSTANT\nSENSE    DS    0C\nSENSE00  DC    X'00'               SENSE BYTE 0\n$S0CREJ  EQU   X'80'               .. COMMAND REJECT\n$S0IVREQ EQU   X'40'               .. INTERVENTION REQUIRED\n$S0BUSO  EQU   X'20'               .. BUS OUT\n$S0EQCHK EQU   X'10'               .. EQUIPMENT CHECK\n$S0DACHK EQU   X'08'               .. DATA CHECK\n$S0DOVRN EQU   X'04'               .. DATA OVER-RUN\n$S0WDCT0 EQU   X'02'               .. WORD COUNT ZERO\n$S0DCNVC EQU   X'01'               .. DATA CONVERTER CHECK\n* ------------------------------------------------------------------- *\n*           3480 CODES ARE THE SAME WITH THE FOLLOW EXCEPTIONS        *\n* ------------------------------------------------------------------- *\n$S0UCTIM EQU   X'02'               .. UNIT CHECK TIMING\n$S0ASSGN EQU   X'01'               .. UNIT IS ASSIGNED ELSEWHERE\n         SPACE 3\nSENSE01  DC    X'00'               SENSE BYTE 1\n$S1NOISE EQU   X'80'               .. NOISE\n$S1TUSTA EQU   X'40'               .. TAPE UNIT STATUS A\n$S1TUSTB EQU   X'20'               .. TAPE UNIT STATUS B\n$S17TRK  EQU   X'10'               .. 7 TRACK TAPE UNIT\n$S1LDPT  EQU   X'08'               .. LOAD POINT\n$S1WRTST EQU   X'04'               .. WRITE STATUS\n$S1FILEP EQU   X'02'               .. FILE PROTECT\n$S1NCPBL EQU   X'01'               .. NOT CAPABLE\n* ------------------------------------------------------------------- *\n*           3480 CODES ARE THE SAME WITH THE FOLLOW EXCEPTIONS        *\n* ------------------------------------------------------------------- *\n$S1LBLKF EQU   X'80'               .. LOCATE BLOCK FAILED\n$S1ON    EQU   X'40'               .. DRIVE ONLINE TO CONTROL UNIT\n$S1SEQ   EQU   X'10'               .. RECORD OUT OF SEQUENCE\n         SPACE 3\nSENSE02  DC    X'00'               SENSE BYTE 2\n* ------------------------------------------------------------------- *\n*           3480 CODES                                                *\n* ------------------------------------------------------------------- *\n$S2PATH  EQU   X'20'               PATHING\n$S2ADAPT EQU   X'10'               0=CU0, 1=CU1\n$S2MICRO EQU   X'08'               MICRO PROCESSOR: 0=CU0, 1=CU1\n$S2BLOCK EQU   X'01'               BLOCK ID POSITIONAL INDICATOR\n         SPACE 3\nSENSE03  DC    X'00'               SENSE BYTE 3\n$S3RWRC  EQU   X'80'               .. READ/WRITE VERT. REDUNDANCY CHECK\n$S3MTES  EQU   X'40'               .. MULTI-TRACK ERROR/SKEW\n$S3END   EQU   X'20'               .. END\n$S3VCC   EQU   X'10'               .. VERTICAL/CYCLIC CHECK\n$S31600C EQU   X'08'               .. 1600 ENVIRONMENT CHECK\n$S3BBSCU EQU   X'04'               .. BACKWARD BPI SET IN CONTROL UNIT\n$S3CP    EQU   X'02'               .. CENTRAL PROCESSOR\n$S3CMP   EQU   X'01'               .. COMPARE\n         SPACE 3\nSENSE04  DC    X'00'               SENSE BYTE 4\n$S4ALUMP EQU   X'80'               .. ALU/MP HARDWARE ERROR\n$S4REJTU EQU   X'40'               .. REJECT TAPE UNIT\n$S4TPIND EQU   X'20'               .. TAPE INDICATE\n$S4WTVCR EQU   X'10'               .. WRITE TRIGGER VERT. REDUNDANCY CK\n$S4MICRO EQU   X'08'               .. MICRO PROGRAM DETECTED ERROR\n$S4LWRD  EQU   X'04'               .. LOOP WRITE TO READ ERROR\n$S4TUCHK EQU   X'02'               .. TAPE UNIT CHECK\n$S4RSV1  EQU   X'01'               .. RESERVED\n         SPACE 3\nSENSE05  DC    X'00'               SENSE BYTE 5\n$S5NSUB1 EQU   X'80'               .. NEW SUBSYSTEM\n$S5NSUB2 EQU   X'40'               .. NEW SUBSYSTEM\n$S5WTMCK EQU   X'20'               .. WRITE TAPE MARK CHECK\n$S5IDBST EQU   X'10'               .. ID BURST\n$S5SRDCK EQU   X'08'               .. START READ CHECK\n$S5PART  EQU   X'04'               .. PARTIAL RECORD\n$S5EPATM EQU   X'02'               .. EXCESSIVE POST-AMBLE OR TAPE MARK\n$S5RPQ   EQU   X'01'               .. RPQ\n         SPACE 3\nSENSE06  DC    X'00'               SENSE BYTE 6\n$S67TRK  EQU   X'80'               .. 7 TRACK\n$S6WRTCF EQU   X'40'               .. WRITE CURRENT FAILURE\n$S6DDEN  EQU   X'20'               .. DUAL DENSITY\n$S6N1600 EQU   X'10'               .. DENSITY NOT 1600\n$S6RSV5  EQU   X'08'               .. RESERVED\n$S6RSV6  EQU   X'04'               .. RESERVED\n$S6RSV7  EQU   X'02'               .. RESERVED\n$S6RSV8  EQU   X'01'               .. RESERVED\n         SPACE 3\nSENSE07  DC    X'00'               SENSE BYTE 7\n$S7LAMP  EQU   X'80'               .. LAMP FAILURE\n$S7BOTL  EQU   X'40'               .. TAPE BOTTOM LEFT\n$S7BOTR  EQU   X'20'               .. TAPE BOTTOM RIGHT\n$S7RESET EQU   X'10'               .. RESET KEY\n$S7SECUR EQU   X'08'               .. DATA SECURITY ERASE\n$S7ERASE EQU   X'04'               .. ERASE HEAD\n$S7AIR   EQU   X'02'               .. AIR BEARING FAILURE\n$S7LOAD  EQU   X'01'               .. LOAD FAILURE\n         SPACE 3\nSENSE08  DC    X'00'               SENSE BYTE 8\n$S8IBG   EQU   X'80'               .. INTERBLOCK GAP DETECTED IN WRITE\n$S8FEED  EQU   X'40'               .. FEAD THROUGH\n$S8RSV1  EQU   X'20'               .. RESERVED\n$S8EBRDC EQU   X'10'               .. EARLY BEGIN READ-BACK CHECK\n$S8EERBC EQU   X'08'               .. EARLY END READ-BACK CHECK\n$S8SBRBC EQU   X'04'               .. SLOW BEGIN READ-BACK CHECK\n$S8SERBC EQU   X'02'               .. SLOW END READ-BACK CHECK\n$S8VELRR EQU   X'01'               .. VELOCITY RETRY/RESTART\n         SPACE 3\nSENSE09  DC    X'00'               SENSE BYTE 9\n$S96250  EQU   X'80'               .. 6250 ERROR CORRECTION\n$S9VELCH EQU   X'40'               .. VELOCITY CHANGE WHILE WRITING\n$S9CHBUF EQU   X'20'               .. CHANNEL BUFFER CHECK\n$S9CRC   EQU   X'10'               .. CYCLIC REDUNDANCY CHECK III\n$S938032 EQU   X'08'               .. 3803-2\n$S9RSV1  EQU   X'04'               .. RESERVED\n$S9RSV2  EQU   X'02'               .. RESERVED\n$S9RSV3  EQU   X'01'               .. RESERVED\n         SPACE 3\nSENSE10  DC    X'00'               SENSE BYTE 10\n$S10CMDR EQU   X'80'               .. COMMAND STATUS REJECT\n$S10RSV1 EQU   X'40'               .. RESERVED\n$S10CTLR EQU   X'20'               .. CONTROL STATUS REJECT\n$S10NBLK EQU   X'10'               .. NO BLOCK ON RECORD READ-BACK\n$S10NWTM EQU   X'08'               .. WTM NOT DETECTED\n$S10TACH EQU   X'04'               .. TACHOMETER START FAILURE\n$S10RSV2 EQU   X'02'               .. RESERVED\n$S10VEL  EQU   X'01'               .. VELOCITY\n         SPACE 3\nSENSE11  DC    X'00'               SENSE BYTE 11  (PROCESSOR 1 ERRORS)\n$S11BPAR EQU   X'80'               .. BUS PARITY LCL STRG REG ADDR ERR\n$S11RSV1 EQU   X'40'               .. RESERVED\n$S11ROSP EQU   X'20'               .. LOW READ-ONLY STORAGE PARITY MP1\n$S11DCOD EQU   X'10'               .. INSTRUCTION DECODE ERROR MP1\n$S11MP   EQU   X'08'               .. MICRO PROGRAM DETECTED ERROR MP1\n$S11DBP  EQU   X'04'               .. DATA BUS PARITY CHECK MP1\n$S11RSV2 EQU   X'02'               .. RESERVED\n$S11BOC  EQU   X'01'               .. BRANCH ON CONDITION MP1\n         SPACE 3\nSENSE12  DC    X'00'               SENSE BYTE 12 (PROCESSOR 2 ERRORS)\n$S12BPAR EQU   X'80'               .. BUS PARITY LCL STRG REG ADDR ERR\n$S12RSV1 EQU   X'40'               .. RESERVED\n$S12ROSP EQU   X'20'               .. LOW READ-ONLY STORAGE PARITY MP2\n$S12DCOD EQU   X'10'               .. INSTRUCTION DECODE ERROR MP2\n$S12MP   EQU   X'08'               .. MICRO PROGRAM DETECTED ERROR MP2\n$S12DBP  EQU   X'04'               .. DATA BUS PARITY CHECK MP2\n$S12RSV2 EQU   X'02'               .. RESERVED\n$S12BOC  EQU   X'01'               .. BRANCH ON CONDITION MP2\n         SPACE 3\nSENSE13  DC    X'00'               SENSE BYTE 13\n$S13RSV1 EQU   X'80'               .. RESERVED\n$S13RSV2 EQU   X'40'               .. RESERVED\n$S13RSV3 EQU   X'20'               .. RESERVED\n$S13RSV4 EQU   X'10'               .. RESERVED\n$S13RSV5 EQU   X'08'               .. RESERVED\n$S13RSV6 EQU   X'04'               .. RESERVED\n$S13RSV7 EQU   X'02'               .. RESERVED\n$S13RSV8 EQU   X'01'               .. RESERVED\n         SPACE 3\nSENSE14  DC    X'00'               SENSE BYTE 14\n$S14RSV1 EQU   X'80'               .. RESERVED\n$S14RSV2 EQU   X'40'               .. RESERVED\n$S14RSV3 EQU   X'20'               .. RESERVED\n$S14RSV4 EQU   X'10'               .. RESERVED\n$S14RSV5 EQU   X'08'               .. RESERVED\n$S14RSV6 EQU   X'04'               .. RESERVED\n$S14RSV7 EQU   X'02'               .. RESERVED\n$S14RSV8 EQU   X'01'               .. RESERVED\n         SPACE 3\nSENSE15  DC    X'00'               SENSE BYTE 15\n$S15RSV1 EQU   X'80'               .. RESERVED\n$S15RSV2 EQU   X'40'               .. RESERVED\n$S15RSV3 EQU   X'20'               .. RESERVED\n$S15RSV4 EQU   X'10'               .. RESERVED\n$S15RSV5 EQU   X'08'               .. RESERVED\n$S15RSV6 EQU   X'04'               .. RESERVED\n$S15RSV7 EQU   X'02'               .. RESERVED\n$S15RSV8 EQU   X'01'               .. RESERVED\nSENSEL   EQU   *-SENSE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXCP STATUS BLOCK                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXCPBLOK EXCPBLOK TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\nCHAINCMD EQU   X'40'\nSILI     EQU   X'20'\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              ABEND CODES                                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ABCODES\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC BLOCK DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS IOB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZIOB\nIOBLEN   EQU  *-IOB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS DCB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DCBD DSORG=PS\nDYNDCBL  EQU   *-IHADCB\n         END  DITTEXCP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTINIT": {"ttr": 1290, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*                       INITIALIZATION                                *\n*                                                                     *\n*      THE FUNCTION OF THE INITIALIZATION MODULE IS TO ACQUIRE        *\n*      STORAGE FOR THE TRACE TABLE, INPUT I/O AREA, OUTPUT I/O AREA,  *\n*      AND DETERMINE THE ENVIRONMENT.                                 *\n*                                                                     *\n*      IF THE ENVIRONMENT IS 'JOB' OR 'STC', CONTROL WILL BE GIVEN    *\n*      TO 'DITTMAIN', THE BATCH JOB AND STC MAINLINE.  IF THE         *\n*      ENVIRONMENT IS 'TSO', CONTROL WILL BE GIVEN TO 'DITTTSOM',     *\n*      THE TSO ENVIRONMENT MAINLINE.                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTINIT DITTPRFX INITSAVE,'INITIALIZATION MODULE'\n         L     R11,VCOMM           COMMON MODULE ADDRESS\n         USING DITTCOMM,R11        SPECIFY BASE\n         GETMAIN RC,LV=TRSIZE      GETMAIN TRACE TABLE AREA\n         LTR   R15,R15             GETMAIN SUCCESSFUL??\n         BNZ   ERR0000             NO\n         ST    R1,INITATRC         SAVE TRACE AREA ADDRESS\n         LA    R1,32(R1)           ADD 32\n         SRL   R1,5                SHIFT OUT LOW BIT(S)\n         SLL   R1,5                32 BYTE BOUNDARY\n         ST    R1,COMM1ST          INITIALIZE TOP OF TABLE ADDRESS\n         ST    R1,COMMCURR         INITIALIZE CURRENT ENTRY ADDRESS\n         A     R1,=A(TRSIZE-64)    LAST ENTRY'S ADDRESS\n         ST    R1,COMMLAST         INITIALIZE LAST ENTRY'S ADDRESS\n         L     R2,ASTAE            STAE EXIT ENTRY POINT\n*        ESTAE (R2),               SET ESTAE\n*              CT,                 .. CREATING NEW ESTAE\n*              PARAM=(R11),        .. ESTAE WILL NEED COMM AREA ADDRESS\n*              XCTL=YES,           .. KEEP ESTAE SET ACROSS XCTL\n*              PURGE=NONE,         .. TRY NOT TO PURGE I/O REQUESTS\n*              ASYNCH=YES,         .. ALLOW ASYNCHRONOUS EVENTS\n*              TERM=YES            .. ESTAE ACTIVE FOR X22 ABENDS\n         LA    R2,COMMCCOM         EXTRACT RESULT AREA\n         EXTRACT (R2),'S',FIELDS=(COMM,ASID)\n         LOCASCB ASID=COMMASID+2   LOCATE ASCB FOR OUR ADDRESS SPACE\n         LTR   R1,R1               WAS LOCATE SUCCESSFUL??\n         BM    INIT0030            NO, ASSUME JOB\n         DITTRACE ID=ASID,         ASID DETERMINED                     +\n               RDATA1=R1           .. CAPTURE ASCB ADDRESS\n         USING ASCB,R1             DEFINE BASE\n         L     R15,ASCBJBNI        JOB NAME ADDRESS\n         LA    R15,0(R15)          CLEAR HIGH BIT(S)\n         LTR   R15,R15             JOB NAME PRESENT??\n         BNZ   INIT0030            YES\n         L     R2,ASCBOUCB         OUCB ADDRESS FROM ASCB\n         L     R15,AINIT10         31-BIT CODE STARTING POINT\n         BSM   R0,R15              SET AMODE TO 31\nINIT0010 DS    0H\n         USING OUCB,R2             DEFINE OUCB ADDRESSABILITY\n         TM    OUCBYFL,OUCBSTT     STARTED TASK?\n         BO    INIT0040            YES\n         TM    OUCBYFL,OUCBLOG     TSO USER?\n         BO    INIT0050            YES\n         LA    R15,INIT0020        24-BIT CODE STARTING POINT\n         BSM   R0,R15              SET AMODE TO 24\nINIT0020 DS    0H\n         WTO   'UNSUPPORTED ENVIRONMENT'\n         ABEND 1,DUMP,,USER\nINIT0030 DS    0H\n         DITTRACE ID=ENVJOB\n         MVI   COMMENV,$ENVJOB     ENVIRONMENT IS BATCH JOB\n         B     INIT0060\nINIT0040 DS    0H\n         DITTRACE ID=ENVSTC\n         MVI   COMMENV,$ENVSTC     ENVIRONMENT IS 'STARTED TASK'\n         B     INIT0060\nINIT0050 DS    0H\n         DITTRACE ID=ENVTSO\n         MVI   COMMENV,$ENVTSO     ENVIRONMENT IT 'TSO USER'\nINIT0060 DS    0H\n         LA    R15,INIT0070        24-BIT CODE STARTING POINT\n         BSM   R0,R15              SET AMODE TO 24\nINIT0070 DS    0H\n         GETMAIN RC,LV=65535       ACQUIRE INPUT I/O AREA\n         LTR   R2,R15              GETMAIN SUCCESSFUL?\n         BNZ   ERR0010             NO\n         ST    R1,ACOMMIOI         SET INPUT I/O AREA ADDRESS\n         GETMAIN RC,LV=65535       ACQUIRE OUTPUT I/O AREA\n         LTR   R2,R15              GETMAIN SUCCESSFUL?\n         BNZ   ERR0020             NO\n         ST    R1,ACOMMIOO         SET OUTPUT I/O AREA ADDRESS\n         DITTRACE ID=ENV,          TRACE ENVIRONMENT DETERMINED        +\n               DATA1=COMMENV       .. ENVIRONMENT FLAG\n         CLI   COMMENV,$ENVTSO     RUNNING AS A TSO USER?\n         BE    TSO0000             YES\n         L     R15,AMAIN           BATCH/STC MAINLINE ENTRY POINT\n         BALR  R14,R15             LINK TO BATCH/STC MAINLINE\n         B     INIT9900            AND EXIT\nTSO0000  DS    0H\n         L     R15,ATSOM           TSO MAINLINE ENTRY POINT\n         BALR  R14,R15             LINK TO TSO MAINLINE\nINIT9900 DS    0H\n         DITTRACE ID=EXIT          TRACE\n         ESTAE 0                   TERMINATE ESTAE EXIT\n         ICM   R1,15,INITATRC      TRACE AREA ADDRESS\n         BZ    INIT9910            NOT ACQUIRED\n         FREEMAIN R,A=(1),LV=TRSIZE FREEMAIN TRACE AREA\n         ICM   R1,15,ACOMMIOI      INPUT AREA ADDRESS\n         BZ    INIT9910            NOT ACQUIRED\n         FREEMAIN R,A=(1),LV=65535 FREEMAIN INPUT AREA\n         ICM   R1,15,ACOMMIOO      OUTPUT AREA ADDRESS\n         BZ    INIT9910            NOT ACQUIRED\n         FREEMAIN R,A=(1),LV=65535 FREEMAIN OUTPUT AREA\nINIT9910 DS    0H\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO OPERATING SYSTEM           ASE01700\nERR0000  DS    0H\n         ABEND ABEND004,DUMP,,USER GETMAIN FOR TRACE TABLE FAILED\nERR0010  DS    0H\n         ABEND ABEND005,DUMP,,USER GETMAIN FOR INPUT I/O AREA FAILED\nERR0020  DS    0H\n         ABEND ABEND006,DUMP,,USER GETMAIN FOR OUTPUT I/O AREA FAILED\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXTERNAL CSECT ADDRESSES                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVCOMM    DC    V(DITTCOMM)         COMMON MODULE ADDRESS\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              CONSTANTS                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nAINIT10  DC    A(INIT0010+X'80000000')\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINITSAVE DC    9D'0'               REGISTER SAVE AREA\nINITATRC DC    A(0)                TRACE TABLE AREA ADDRESS\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\nTRSIZE   EQU  (500*32)\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         ABCODES\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              ADDRESS SPACE CONTROL BLOCK                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAASCB\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              RESOURCE MANAGER USER CONTROL BLOCK                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IRAOUCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTINQ": {"ttr": 5384, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00F\\x01\\t\\x18\\x9f\\x01\\t\\x18\\x9f\\x13P\\x01\\x04\\x01\\x04\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-07-08T00:00:00", "modifydate": "2009-07-08T13:50:46", "lines": 260, "newlines": 260, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              STC MODE INQUIRY                                       *\n*                                                                     *\n*    WHEN RUNNING IN STC MODE, THIS MODULE PROVIDES THE OPERATOR      *\n*    WITH A WAY TO DISPLAY ALLOCATED TAPES, DASD'S, AND THE EXTERNAL  *\n*    TRACE STATUS.                                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTINQ  DITTPRFX INQSAVE,'STC MODE INQUIRE FUNCTION'\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY,        TRACE ENTRY                         +\n               DATA1=COMMINQ       .. INQUIRE PARAMETER\n         TM    COMMFLAG,$COMMCLS   CLOSE-UP CALL?\n         BO    INQ9910             YES.. JUST EXIT\n         CLC   INQTAPE,COMMINQ     DISPLAY TAPES?\n         BE    INQ0010             YES\n         CLC   INQDASD,COMMINQ     DISPLAY DASD'S?\n         BE    INQ0100             YES\n         CLC   INQTRACE,COMMINQ    DISPLAY TRACE STATUS?\n         BE    INQ0200             YES\n         LA    R8,INQM01           INVALID INQUIRE REQUEST\n         BAL   R9,WTO0000          DISPLAY MESSAGE AND PRINT IT\n         B     INQ9900             AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              LIST ALLOCATED TAPE DRIVES                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINQ0010  DS    0H\n         DITTRACE ID=TAPEINQ\n         NI    INQFLAG,255-$INQFND RESET 'FOUND' FLAG\n         ICM   R2,15,COMMDYHD      FIRST DYNAMIC BLOCK\n         USING DYNBLOK,R2          DEFINE BASE\n         BZ    INQ0300             NOTHING ON THE CHAIN\nINQ0020  DS    0H\n         CLC   INQTAPE,DYNDDNAM    IS THIS A TAPE?\n         BNE   INQ0070             NO\n         OI    INQFLAG,$INQFND     SET FOUND FLAG\n         MVC   INQM02UNT,DYNDDNAM+4 COPY DEVICE NUMBER\n         L     R1,DYNDEBA          DEB ADDRESS FROM DYNAMIC BLOCK\n         USING DEB,R1              DEFINE BASE\n         CLI   DEBSDVM,$DEN1600    1600 BPI?\n         BE    INQ0030             YES\n         CLI   DEBSDVM,$DEN6250    6250 BPI?\n         BE    INQ0040             YES\n         CLI   DEBSDVM,$DEN3480    3480 DRIVE?\n         BE    INQ0050             YES\n         MVC   INQM02TYP,INQUNKN   UNKNOWN DENSITY OR TYPE\n         MVC   INQM02BPI,COMMBLKS  SET 'BPI' TO BLANKS\n         B     INQ0060\nINQ0030  DS    0H\n         MVC   INQM02TYP,INQ1600   SET TYPE TO 1600\n         MVC   INQM02BPI,INQBPI    SET 'BPI' IN MESSAGE\n         B     INQ0060\nINQ0040  DS    0H\n         MVC   INQM02TYP,INQ6250   SET TYPE TO 6250\n         MVC   INQM02BPI,INQBPI    SET 'BPI' IN MESSAGE\n         B     INQ0060\nINQ0050  DS    0H\n         MVC   INQM02TYP,INQ3480   SET TYPE TO 3480\n         MVC   INQM02BPI,COMMBLKS  SET 'BPI' TO BLANKS\nINQ0060  DS    0H\n         LA    R8,INQM02           MESSAGE'S ADDRESS\n         BAL   R9,WTO0000          ISSUE WTO AND PRINT MESSAGE\nINQ0070  DS    0H\n         ICM   R2,15,DYNNEXT       NEXT BLOCK ON CHAIN\n         BNZ   INQ0020             LOOP\n         TM    INQFLAG,$INQFND     ANY TAPES FOUND?\n         BNO   INQ0300             NO\n         B     INQ9900             EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              LIST ALLOCATED DASD                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINQ0100  DS    0H\n         DITTRACE ID=DASDINQ\n         NI    INQFLAG,255-$INQFND RESET 'FOUND' FLAG\n         ICM   R2,15,COMMDYHD      FIRST DYNAMIC BLOCK\n         BZ    INQ0300             NOTHING ON THE CHAIN\nINQ0110  DS    0H\n         CLC   INQDASD,DYNDDNAM    IS THIS A DASD?\n         BNE   INQ0120             NO\n         OI    INQFLAG,$INQFND     SET FOUND FLAG\n         MVC   INQM03UNT,DYNDDNAM+4 COPY DEVICE NUMBER\n         MVC   INQM03VOL,DYNVOL    COPY VOLSER\n         LA    R8,INQM03           MESSAGE'S ADDRESS\n         BAL   R9,WTO0000          ISSUE WTO AND PRINT MESSAGE\nINQ0120  DS    0H\n         ICM   R2,15,DYNNEXT       NEXT BLOCK ON CHAIN\n         BNZ   INQ0110             LOOP\n         TM    INQFLAG,$INQFND     ANY TAPES FOUND?\n         BNO   INQ0300             NO\n         B     INQ9900             EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DISPLAY EXTERNAL TRACE STATUS                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINQ0200  DS    0H\n         DITTRACE ID=INQTRACE\n         TM    XTRFLAG,$XTRACE     EXTERNAL TRACE ACTIVE?\n         BNO   INQ0210             ON\n         LA    R8,INQM04           MESSAGE'S ADDRESS\n         BAL   R9,WTO0000          ISSUE WTO AND PRINT\n         B     INQ9900             AND EXIT\nINQ0210  DS    0H\n         LA    R8,INQM05           MESSAGE'S ADDRESS\n         BAL   R9,WTO0000          ISSUE WTO AND PRINT\n         B     INQ9900             AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              NO UNITS OF REQUESTED TYPE ALLOCATED                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINQ0300  DS    0H\n         LA    R8,INQM06           MESSAGE'S ADDRESS\n         BAL   R9,WTO0000          ISSUE WTO AND PRINT MESSAGE\n         B     INQ9900             AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              ISSUE WTO'S AND PRINT MESSAGE TEXT                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWTO0000  DS    0H\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,0(R8)          MESSAGE TEXT'S LENGTH\n         BCTR  R1,0                ADJUST FOR EXECUTE'S\n         EX    R1,PRTMVC           MOVE DATA TO PRINT AREA\n         LA    R14,WTOL            LIST FORM WTO'S ADDRESS\n         USING WPL,R14             DEFINE WPL BASE\n         MVC   WPLTXT(50),COMMBLKS CLEAR MESSAGE IN WTO LIST FORM\n         EX    R1,WTOMVC           MOVE TEXT TO WTO MESSAGE\n         MVI   PRTCMMD,$PRTCMD     SET COMMAND\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             PRINT MESSAGE\n         WTO   CONSNAME=COMMCNAM,  ISSUE WTO                           +\n               MF=(E,WTOL)\n         BR    R9                  RETURN\nPRTMVC   MVC   PRTDATA(0),2(R8)    MOVE MESSAGE TEXT\nWTOMVC   MVC   WPLTXT(0),2(R8)     MOVE MESSAGE TEXT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINQ9900  DS    0H\n         OI    COMMFLAG,$COMMEOF   SET EOF FLAG\nINQ9910  DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS/CONSTANTS                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINQSAVE  DC    18F'0'              REGISTER SAVE AREA\nWTOL     WTO   '....5...10....5...20....5...30....5...40....5...50',   +\n               CONSNAME=,                                              +\n               MF=L\nINQFLAG  DC    X'00'               FLAGS/SWITCHES\n$INQFND  EQU   X'80'               .. UNIT OF REQUEST TYPE FOUND\nINQTAPE  DC    C'TAPE'\nINQDASD  DC    C'DASD'\nINQTRACE DC    C'TRACE'\nINQ1600  DC    C'1600'\nINQ6250  DC    C'6250'\nINQ3480  DC    C'3480'\nINQUNKN  DC    C'UNKN'\nINQBPI   DC    C'BPI'\nINQM01   DC    AL2(INQM01L)\nINQM01M  DC    C'INVALID INQUIRE PARAMETER'\nINQM01L  EQU   *-INQM01M\nINQM02   DC    AL2(INQM02L)\nINQM02M  DS    0C\n         DC    C'TAPE UNIT '\nINQM02UNT DC   CL04' '\n         DC    C' IS ALLOCATED AS '\nINQM02TYP DC   CL04' '\nINQM02BPI DC   CL03' '\nINQM02L  EQU   *-INQM02M\nINQM03   DC    AL2(INQM03L)\nINQM03M  DS    0C\n         DC    C'DASD VOLUME '\nINQM03VOL DC   CL06' '\n         DC    C' IS ALLOCATED ON UNIT '\nINQM03UNT DS   CL04' '\nINQM03L  EQU   *-INQM03M\nINQM04   DC    AL2(INQM04L)\nINQM04M  DC    C'EXTERNAL TRACE IS ACTIVE'\nINQM04L  EQU   *-INQM04M\nINQM05   DC    AL2(INQM05L)\nINQM05M  DC    C'EXTERNAL TRACE IS NOT ACTIVE'\nINQM05L  EQU   *-INQM05M\nINQM06   DC    AL2(INQM06L)\nINQM06M  DC    C'NONE ALLOCATED'\nINQM06L  EQU   *-INQM06M\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n         ABCODES\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC UNITS BLOCK DSECT                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS IOB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZIOB\nIOBLEN   EQU  *-IOB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS DCB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DCBD  DSORG=PS\nDYNDCBL  EQU   *-IHADCB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS DEB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZDEB LIST=NO\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WTO (WPL) DSECT                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZWPL DSECT=YES\n         END  DITTINQ\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTMAIN": {"ttr": 1544, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*                   BATCH JOB AND STC MAINLINE                        *\n*                                                                     *\n*      IF DITTO IS RUNNING AS A BATCH JOB, MAIN WILL LINK TO THE      *\n*      CARD INPUT COMMAND MODULE 'DITTCARD', AND COMMANDS WILL BE     *\n*      READ FROM 'SYSIN'.  IF DITTO IS A STARTED TASK, MAIN WILL      *\n*      LINK TO THE CONSOLE COMMAND INPUT MODULE 'DITTCONS', AND       *\n*      COMMANDS WILL BE ENTERED INTERACTIVELY.                        *\n*                                                                     *\n*      THE COMMAND MODULE WILL THEN SIGNAL WHETHER OR NOT THE         *\n*      COMMAND AND ALL REQUIRED PARAMETERS WERE ENTERED AND VALID,    *\n*      OR NOT.  IF NOT AN ERROR MESSAGE IS PRINTED AND THE NEXT       *\n*      COMMAND IS REQUESTED.  IF A GOOD COMMAND WAS ENTERED, THE      *\n*      COMMAND MODULE WILL HAVE PLACED THE INPUT AND OUTPUT MODULE    *\n*      ADDRESSES IN THE 'COMMON' MODULE 'DITTCOMM'.                   *\n*                                                                     *\n*      MAIN THEN ENTERS A INPUT-OUTPUT LOOP.  THE INPUT MODULE IS     *\n*      INVOKED, THEN THE OUTPUT MODULE, BACK TO THE INPUT MODULE      *\n*      AND SO ON UNTIL END-OF-FILE IS SIGNALLED.  THEN A 'CLOSE'      *\n*      INDICATOR IS SET AND INPUT AND OUTPUT ARE INVOKED AGAIN TO     *\n*      ALLOW THEM ANY 'CLEAN-UP' AND TO CLOSE THEIR FILES IF          *\n*      NECESSARY.                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTMAIN DITTPRFX MAINSAVE,'MAINLINE PROGRAM'\n         USING DITTCOMM,R11        SPECIFY BASE\n         USING DYNBLOK,R2          DEFINE DYNAMIC BLOCK BASE\n         CLI   COMMENV,$ENVJOB     RUNNING AS A JOB?\n         BE    INIT0010            YES... NO CIB TO WORRY ABOUT\n         ICM   R1,15,COMMCCOM      COMMUNICATION PARM LIST PRESENT?\n         BZ    ERR0010             NO...\n         DITTRACE ID=CONSCOMM,     TRACE COMMUNICATION PARM LIST       +\n               RDATA1=R1           .. CAPTURE COMM ADDRESS IN TRACE\n         USING CCOM,R1             DEFINE BASE\n         L     R1,COMCIBPT         CIB ADDRESS FROM COMM PARM LIST\n         DITTRACE ID=CONSCIB,      TRACE CIB LOCATED                   +\n               RDATA1=R1           .. CAPTURE CIB ADDRESS\n         USING CIB,R1              DEFINE CIB BASE\n         AH    R1,CIBXOFF          PLUS OFFSET TO CIBX\n         USING CIBX,R1\n         MVC   COMMCNAM,CIBXCNNM   SAVE CONSOLE NAME\n         DITTRACE ID=CONSNAME,     TRACE CONSOLE NAME                  +\n               DATA1=COMMCNAM      .. CAPTURE CONSOLE NAME\nINIT0010 DS    0H\n         MVI   PRTCMMD,$PRTHEAD    SET COMMAND\n         LA    R1,PRTBLOK          POINT TO PRINTER PARAMETER BLOCK\n         L     R15,APRT            ENTRY POINT OF PRINT MODULE\n         BALR  R14,R15             LINK TO PRINT MODULE\nMAIN0010 DS    0H\n         DITTRACE ID=NEWCMMD       TRACE\n         MVI   COMMPFLG,X'00'      CLEAR ANY OPTIONAL INDICATORS\n         NI    COMMFLAG,255-$ABORT CLEAR ABORT FLAG IF SET\n         NI    COMMFLAG,255-$COMMCER AND COMMAND ERROR FLAG IF SET\n         CLI   COMMENV,$ENVJOB     RUNNING AS A JOB?\n         BE    MAIN0020            YES\n         CLI   COMMENV,$ENVSTC     RUNNING AS A STARTED TASK?\n         BE    MAIN0030            YES\n         WTO   'INTERNAL ERROR, ENVIRONMENT NOT DETERMINED'\n         ABEND 2,DUMP,,USER\nMAIN0020 DS    0H\n         L     R15,ACARD           CARD-INPUT COMMAND MODULE\n         BALR  R14,R15             ENTER CARD-INPUT MODULE\n         B     MAIN0040            CHECK FOR 'EOJ'\nMAIN0030 DS    0H\n         L     R15,ACONS           CONSOLE COMMAND MODULE ENTRY POINT\n         BALR  R14,R15             ENTER CONSOLE-INPUT\n         B     MAIN0040            CHECK FOR 'EOJ'\nMAIN0040 DS    0H\n         TM    COMMFLAG,$COMMEOF   END OF FILE ENCOUNTERED?\n         BO    MAIN9900            YES, EXIT\n         TM    COMMFLAG,$COMMCER   INPUT COMMAND ERROR?\n         BNO   MAIN0050            NO\n         MVC   PRTDATA(MSG001L),MSG001\n         BAL   R9,MAINPRT          PRINT MESSAGE\n         B     MAIN0010            GO TO NEXT RECORD\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        LOCATE THE DYNAMIC BLOCKS FOR THE INPUT AND OUTPUT MODULES.  *\n*        HAVING THIS CODE HERE RATHER THAN IN THE INPUT AND OUTPUT    *\n*        MODULES ELEMINATES THE DUPLICATE CODE THAT WOULD HAVE TO BE  *\n*        IN EACH MODULE.                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0050 DS    0H\n         CLC   COMMINM,AALOC       IS THE INPUT MODULE 'DITTALOC'?\n         BE    MAIN0110            YES.. BYPASS\n         OC    COMMINM,COMMINM     INPUT MODULE FOR THIS COMMAND?\n         BZ    MAIN0080            NO\n         OC    COMMINU,COMMINU     INPUT CUU PRESENT?\n         BZ    MAIN0080            NO\n         DITTRACE ID=ALOCIN\n         MVI   DAIRCMMD,$DAIRLOC   LOCATE COMMAND\n         MVI   DAIRTYPE,$DAIRCUU   LOCATE DYNBLOK BY CUU\n         MVC   DAIRCUU,COMMINU     CUU TO LOCATE\n         LA    R1,DAIRBLOK         DAIR MODULE PARAMETER BLOCK\n         L     R15,ADAIR           DAIR MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO DAIR MODULE\n         CLI   DAIRSTAT,$DAIRSOK   DAIR SUCCESSFUL?\n         BE    MAIN0070            YES\n         CLI   DAIRSTAT,$DAIRSLE   DYNBLOK NOT LOCATED?\n         BE    MAIN0060            YES\n         ABEND ABEND011,DUMP,,USER UNEXPECTED STATUS FROM DITTDAIR\nMAIN0060 DS    0H\n         DITTRACE ID=INNOTACQ\n         MVC   PRTDATA(MSG007L),MSG007   MOVE MESSAGE\n         BAL   R9,MAINPRT          PRINT MESSAGE\n         CLI   COMMENV,$ENVSTC     RUNNING AS A STARTED TASK?\n         BNE   MAIN0170            NO\n         WTO   'INPUT UNIT NOT ALLOCATED, COMMAND ABORTED',            +\n               CONSNAME=COMMCNAM   .. CONSOLE NAME\n         B     MAIN0170            RE-INITIALIZE PARAMETERS\nMAIN0070 DS    0H\n         L     R1,COMMINM          INPUT MODULE ENTRY POINT\n         USING MODPRFX,R1\n         ICM   R2,15,DAIRAREA      DYNAMIC BLOCK ADDRESS\n         CLC   PFXMODDS(4),DYNDDNAM     UNIT CONSISTENT?\n         BNE   MAIN0280            NO..\n         ST    R2,COMMIND          SAVE DYNAMIC BLOCK ADDRESS\nMAIN0080 DS    0H\n         OC    COMMOUTM,COMMOUTM   OUTPUT MODULE FOR THIS COMMAND?\n         BZ    MAIN0110            NO\n         OC    COMMOUTU,COMMOUTU   OUTPUT CUU PRESENT?\n         BZ    MAIN0110            NO\n         DITTRACE ID=ALOCOUT\n         MVI   DAIRCMMD,$DAIRLOC   LOCATE COMMAND\n         MVI   DAIRTYPE,$DAIRCUU   LOCATE DYNBLOK BY CUU\n         MVC   DAIRCUU,COMMOUTU    CUU TO LOCATE\n         LA    R1,DAIRBLOK         DAIR MODULE PARAMETER BLOCK\n         L     R15,ADAIR           DAIR MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO DAIR MODULE\n         CLI   DAIRSTAT,$DAIRSOK   DAIR SUCCESSFUL?\n         BE    MAIN0100            YES\n         CLI   DAIRSTAT,$DAIRSLE   DYNBLOK NOT LOCATED?\n         BE    MAIN0090            YES\n         ABEND ABEND011,DUMP,,USER UNEXPECTED STATUS FROM DITTDAIR\nMAIN0090 DS    0H\n         DITTRACE ID=OUTNTACQ\n         MVC   PRTDATA(MSG008L),MSG008   MOVE MESSAGE\n         BAL   R9,MAINPRT          PRINT MESSAGE\n         CLI   COMMENV,$ENVSTC     RUNNING AS A STARTED TASK?\n         BNE   MAIN0170            NO\n         WTO   'OUTPUT UNIT NOT ALLOCATED, COMMAND ABORTED',           +\n               CONSNAME=COMMCNAM   .. CONSOLE NAME\n         B     MAIN0170            RE-INITIALIZE PARAMETERS\nMAIN0100 DS    0H\n         L     R1,COMMOUTM         OUTPUT MODULE ENTRY POINT\n         ICM   R2,15,DAIRAREA      DYNAMIC BLOCK ADDRESS\n         CLC   PFXMODDS(4),DYNDDNAM     UNIT CONSISTENT?\n         BNE   MAIN0290            NO..\n         ST    R2,COMMOUTD         SAVE OUTPUT DYNAMIC BLOCK ADDRESS\nMAIN0110 DS    0H\n         DITTRACE ID=FIRST,        TRACE ENTRY INTO I/O LOOP           +\n               DATA1=COMMIND,      .. INPUT DYNAMIC BLOCK ADDRESS      +\n               DATA2=COMMOUTD      .. OUTPUT DYNAMIC BLOCK ADDRESS\n         OI    COMMFLAG,$COMM1ST   SIGNAL FIRST TIME\nMAIN0120 DS    0H\n         DITTRACE ID=CALLIN        TRACE\n         ICM   R15,15,COMMINM      INPUT MODULE ADDRESS\n         BZ    MAIN0130            ZERO .. DON'T ATTEMPT TO INVOKE IT\n         BALR  R14,R15             INVOKE INPUT ROUTINE\n         TM    COMMFLAG,$ABEND     ABEND SET BY INPUT?\n         BO    MAIN0260            YES\n         TM    COMMFLAG,$ABORT     ABORT SET BY INPUT?\n         BO    MAIN0240            YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        NOTE THAT THE EOF FLAG MAY BE SET BY AN OUTPUT ROUTINE.      *\n*        THIS IS THE CASE WHEN THE FUNCTION REQUIRES AN OUTPUT        *\n*        ROUTINE ONLY SUCH AS 'REW' OR 'RUN'.                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0130 DS    0H\n         TM    COMMFLAG,$COMMEOF   END OF FILE ON INPUT?\n         BO    MAIN0150            YES ...\n         DITTRACE ID=CALLOUT       TRACE\n         ICM   R15,15,COMMOUTM     OUTPUT MODULE ADDRESS\n         BZ    MAIN0140            ZERO .. DON'T ATTEMPT TO INVOKE IT\n         BALR  R14,R15             INVOKE OUTPUT ROUTINE\n         TM    COMMFLAG,$ABEND     ABEND SET BY OUTPUT?\n         BO    MAIN0270            YES\n         TM    COMMFLAG,$ABORT     ABORT SET BY OUTPUT?\n         BO    MAIN0250            YES\n         TM    COMMFLAG,$COMMEOF   EOF SET BY OUTPUT?\n         BO    MAIN0150            YES\nMAIN0140 DS    0H\n         DITTRACE ID=FIRSTOFF      NO LONGER FIRST PASS\n         NI    COMMFLAG,255-$COMM1ST TURN OFF FIRST TIME FLAG\n         B     MAIN0120            LOOP 'TILL END OF FILE\nMAIN0150 DS    0H\n         DITTRACE ID=CLOSE         'CLOSE' IN PROGRESS\n         NI    COMMFLAG,255-$COMM1ST TURN OFF FIRST TIME FLAG\n         OI    COMMFLAG,$COMMCLS   INDICATE CLOSE FILES\n         ICM   R15,15,COMMINM      INPUT MODULE ADDRESS\n         BZ    MAIN0160            NO INPUT MODULE\n         BALR  R14,R15             ALLOW INPUT TO DO ANY CLEAN-UP\nMAIN0160 DS    0H\n         ICM   R15,15,COMMOUTM     OUTPUT MODULE ADDRESS\n         BZ    MAIN0170            NO OUTPUT MODULE\n         BALR  R14,R15             ALLOW OUTPUT TO DO ANY CLEAN-UP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*           CURRENT COMMAND IS TERMINATING                            *\n*                                                                     *\n*    IF THE COMMAND IS BEING ABORTED, NO FURTHER MESSAGES ARE ISSUED. *\n*    IF THE COMMAND HAS INPUT FROM TAPE OR DASD, AND AN 'END-OF-FILE' *\n*    WAS REACHED (MAY HAVE BEEN END-OF-TAPE), ISSUE A MESSAGE TO      *\n*    INDICATE THE REASON THE COMMAND STOPPED... THIS IS MAY HELP      *\n*    ELIMINATE CONFUSION WHEN A NUMBER OF RECORDS WAS SPECIFIED ON    *\n*    THE COMMAND, BUT EOF WAS REACHED BEFORE THE REQUESTED NUMBER OF  *\n*    RECORDS WAS READ.                                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAIN0170 DS    0H\n         DITTRACE ID=TERMCMD\n         TM    COMMFLAG,$ABORT     WAS ABORT FLAG SET?\n         BO    MAIN0230            YES\n         ICM   R2,15,COMMIND       INPUT DYNAMIC BLOCK PRESENT?\n         BZ    MAIN0230            NO.. RE-INITIALIZE\n         CLC   MAINTAPE,DYNDDNAM   WAS THIS A TAPE INPUT COMMAND?\n         BE    MAIN0190            YES\n         TM    COMMFLAG,$COMMFE    EOF FORCED TO TO EOF RECORD?\n         BNO   MAIN0230            NO.. RE-INITIALIZE\n         CLI   COMMENV,$ENVJOB     BATCH JOB?\n         BE    MAIN0180            YES\n         WTO   'EOF FOUND ON INPUT, COMMAND TERMINATED',               +\n               CONSNAME=COMMCNAM\nMAIN0180 DS    0H\n         MVC   PRTDATA(MSG011L),MSG011\n         BAL   R9,MAINPRT          PRINT MESSAGE\n         B     MAIN0230            RE-INITIALIZE\nMAIN0190 DS    0H\n         TM    DYNSTAT,$DYNPEOT    PHYSICAL END OF TAPE REACHED?\n         BO    MAIN0210            YES\n         TM    COMMFLAG,$COMMFE    EOF FORCED BY TAPEMARK?\n         BNO   MAIN0230            NO.. RE-INITIALIZE\n         CLI   COMMENV,$ENVJOB     RUNNING AS A JOB?\n         BE    MAIN0200            YES\n         WTO   'TAPE MARK READ ON INPUT, COMMAND TERMINATED',          +\n               CONSNAME=COMMCNAM\nMAIN0200 DS    0H\n         MVC   PRTDATA(MSG013L),MSG013\n         BAL   R9,MAINPRT          PRINT MESSAGE\n         B     MAIN0230            RE-INITIALIZE\nMAIN0210 DS    0H\n         CLI   COMMENV,$ENVJOB     BATCH JOB?\n         BE    MAIN0220            YES\n         WTO   'PHYSICAL END OF TAPE REACHED ON INPUT, COMMAND TERMINAT+\n               ED',                                                    +\n               CONSNAME=COMMCNAM\nMAIN0220 DS    0H\n         MVC   PRTDATA(MSG012L),MSG012\n         BAL   R9,MAINPRT          PRINT MESSAGE\nMAIN0230 DS    0H\n         DITTRACE ID=REINIT\n         NI    COMMFLAG,255-$COMMCLS TURN OFF CLOSE FLAG\n         NI    COMMFLAG,255-$COMMEOF TURN OFF EOF FLAG\n         NI    COMMFLAG,255-$COMMFE  TURN OFF FORCED EOF FLAG\n         XC    COMMINM,COMMINM     CLEAR MODULE ADDRESS\n         XC    COMMOUTM,COMMOUTM   CLEAR MODULE ADDRESS\n         XC    COMMIND,COMMIND     CLEAR DYNAMIC BLOCK ADDRESS\n         XC    COMMOUTD,COMMOUTD   CLEAR DYNAMIC BLOCK ADDRESS\n         MVI   PARMCMMD,$PARMINT   INITIALIZE COMMAND\n         LA    R1,PARMBLOK         PARAMETER CONVERTER PARAMETER BLOCK\n         L     R15,APARM           PARAMETER CONVERTER ENTRY POINT\n         BALR  R14,R15             LINK TO 'DITTPARM' TO RE-INITIALIZE\n         B     MAIN0010            GET NEXT COMMAND\nMAIN0240 DS    0H\n         DITTRACE ID=ABORTIN       INPUT ABORTED CURRENT FUNCTION\n         MVC   PRTDATA(MSG002L),MSG002   MOVE MESSAGE\n         BAL   R9,MAINPRT          PRINT MESSAGE\n         B     MAIN0170            RE-INITIALIZE PARAMETERS\nMAIN0250 DS    0H\n         DITTRACE ID=ABORTOUT      OUTPUT ABORTED CURRENT FUNCTION\n         MVC   PRTDATA(MSG003L),MSG003   MOVE MESSAGE\n         BAL   R9,MAINPRT          PRINT MESSAGE\n         CLI   COMMENV,$ENVSTC     RUNNING AS A STARTED TASK?\n         BNE   MAIN0010            NO\n         WTO   'COMMAND ABORTED, CHECK SYSPRINT FOR EXPLANTION',       +\n               CONSNAME=COMMCNAM   .. CONSOLE NAME\n         B     MAIN0170            RE-INITIALIZE PARAMETERS\nMAIN0260 DS    0H\n         DITTRACE ID=ABENDIN       INPUT REQUESTED ABEND\n         MVC   PRTDATA(MSG004L),MSG004   MOVE MESSAGE\n         BAL   R9,MAINPRT          PRINT MESSAGE\n         ABEND ABEND002,DUMP,,USER ABEND US\nMAIN0270 DS    0H\n         DITTRACE ID=ABENDOUT      OUTPUT REQUESTED ABEND\n         MVC   PRTDATA(MSG005L),MSG005   MOVE MESSAGE\n         BAL   R9,MAINPRT          PRINT MESSAGE\n         ABEND ABEND003,DUMP,,USER ABEND US\nMAIN0280 DS    0H\n         DITTRACE ID=XINUNIT       INCONSISTENT UNIT TYPE AND FUNCTION\n         MVC   PRTDATA(MSG009L),MSG009   MOVE MESSAGE\n         BAL   R9,MAINPRT          PRINT MESSAGE\n         CLI   COMMENV,$ENVSTC     RUNNING AS A STARTED TASK?\n         BNE   MAIN0010            NO\n         WTO   'INPUT UNIT TYPE INCONSISTENT WITH COMMAND, COMMAND ABOR+\n               TED',                                                   +\n               CONSNAME=COMMCNAM   .. CONSOLE NAME\n         B     MAIN0170            RE-INITIALIZE PARAMETERS\nMAIN0290 DS    0H\n         DITTRACE ID=XOUTUNIT      INCONSISTENT UNIT TYPE AND FUNCTION\n         MVC   PRTDATA(MSG010L),MSG010   MOVE MESSAGE\n         BAL   R9,MAINPRT          PRINT MESSAGE\n         CLI   COMMENV,$ENVSTC     RUNNING AS A STARTED TASK?\n         BNE   MAIN0010            NO\n         WTO   'OUTPUT UNIT TYPE INCONSISTENT WITH COMMAND, COMMAND ABO+\n               RTED',                                                  +\n               CONSNAME=COMMCNAM   .. CONSOLE NAME\n         B     MAIN0170            RE-INITIALIZE PARAMETERS\nERR0010  DS    0H\n         WTO   'COMM ADDRESS FROM EXTRACT IS ZERO, UNABLE TO DETERMINE +\n               CONSOLE NAME'\n         ABEND ABEND012,DUMP,,USER\nMAINPRT  DS    0H\n         MVI   PRTCMMD,$PRTCMD     SET COMMAND\n         LA    R1,PRTBLOK          PRINT PARAMETER BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         BR    R9                  RETURN\nMAIN9900 DS    0H\n         DITTRACE ID=EXIT          TRACE\n         L     R3,COMMDYHD         FIRST BLOCK ON CHAIN\nMAIN9910 DS    0H\n         LTR   R2,R3               ADDRESS PRESENT?\n         BZ    MAIN9920            ALL HAVE BEEN RELEASED\n         DITTRACE ID=RELDYN,       TRACE RELEASE                       +\n               RDATA1=R2           .. SAVE DYNAMIC BLOCK ADDRESS\n         L     R3,DYNNEXT          NEXT DYNAMIC BLOCK ADDRESS\n         MVI   DAIRCMMD,$DAIRREL   SET COMMAND (RELEASE)\n         MVI   DAIRTYPE,$DAIRCUU   SET TYPE OF LOCATE (BY CUU)\n         MVC   DAIRCUU,DYNCUU      SET CUU\n         LA    R1,DAIRBLOK         PARAMETER BLOCK ADDRESS\n         L     R15,ADAIR           'DITTDAIR' ENTRY POINT\n         BALR  R14,R15             RELEASE THIS RESOURCE\n         CLI   DAIRSTAT,$DAIRSOK   SUCCESSFULLY RELEASED?\n         BE    MAIN9910            YES\n         MVC   MSG6DD,DYNDDNAM     COPY DD NAME\n         UNPK  MSG615(3),DAIRR15+3(2)\n         MVZ   MSG615,MAINHX0F     TURN OFF ZONES\n         TR    MSG615,MAINHXCH     TRANSLATE TO PRINTABLE\n         MVI   MSG615+2,C' '       RESTORE BLANK\n         UNPK  MSG6ER(5),DAIRERR(3)\n         MVZ   MSG6ER,MAINHX0F     TURN OFF ZONES\n         TR    MSG6ER,MAINHXCH     TRANSLATE TO PRINTABLE\n         MVI   MSG6ER+4,C' '       RESTORE BLANK\n         UNPK  MSG6IN(5),DAIRINFO(3)\n         MVZ   MSG6IN,MAINHX0F     TURN OFF ZONES\n         TR    MSG6IN,MAINHXCH     TRANSLATE TO PRINTABLE\n         MVI   MSG6IN+4,C' '       RESTORE BLANK\n         MVC   PRTDATA(MSG006L),MSG006   MOVE MESSAGE\n         MVI   PRTCC,C'0'          DOUBLE SPACE\n         BAL   R9,MAINPRT          PRINT MESSAGE\n         ABEND ABEND008,DUMP,,USER ABEND\nMAIN9920 DS    0H\n         DITTRACE ID=RELDONE       DYNAMIC RELEASES ARE COMPLETE\n         NI    COMMFLAG,255-$COMMEOF      TURN EOF FLAG\n         OI    COMMFLAG,$COMMEOJ   SIGNAL END OF JOB IN PROGRESS\n         L     R15,ACDI1           CARD READ MODULE ENTRY POINT\n         BALR  R14,R15             CLOSE SYSIN\n         L     R15,ACDO1           CARD PUNCH MODULE ENTRY POINT\n         BALR  R14,R15             CLSOE SYSPUNCH\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             CLOSE SYSPRINT\n         TM    XTRFLAG,$XTROPEN    EXTERNAL TRACE FILE OPEN?\n         BNO   MAIN9930            NO\n         LA    R2,XTRDCB           EXTERNAL TRACE DCB\n         CLOSE ((R2))              CLOSE EXTERNAL TRACE\nMAIN9930 DS    0H\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO OPERATING SYSTEM           ASE01700\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE INTERFACE                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PARAMETER CONVERTER INTERFACE                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARMBLOK PARMBLOK\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC ALLOCATION INTERFACE                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDAIRBLOK DAIRBLOK TYPE=CSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              CONSTANTS                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAINHX0F DC    8X'0F'\nMAINHXCH DC    C'0123456789ABCDEF'\nMAINTAPE DC    C'TAPE'\nMSG001   DC    C'COMMAND/PARM ERROR, CONTINUING WITH NEXT COMMAND'\nMSG001L  EQU   *-MSG001\nMSG002   DC    C'COMMAND ABORTED BY INPUT PROCESSING, CONTINUING WITH N+\n               EXT COMMAND'\nMSG002L  EQU   *-MSG002\nMSG003   DC    C'COMMAND ABORTED BY OUTPUT PROCESSING, CONTINUING WITH +\n               NEXT COMMAND'\nMSG003L  EQU   *-MSG003\nMSG004   DC    C'EXECUTION ABORTED BY INPUT PROCESSING'\nMSG004L  EQU   *-MSG004\nMSG005   DC    C'EXECUTION ABORTED BY OUTPUT PROCESSING'\nMSG005L  EQU   *-MSG005\nMSG006   DC    CL21'DYNAMIC RELEASE FAILED, DDNAME='\nMSG6DD   DC    CL08' '\n         DC    CL06', R15='\nMSG615   DC    CL02' '\n         DC    CL09' DAIRERR='\nMSG6ER   DC    CL04' '\n         DC    CL10' DAIRINFO='\nMSG6IN   DC    CL04' '\nMSG006L  EQU   *-MSG006\nMSG007   DC    C'INPUT UNIT NOT ALLOCATED, COMMAND WILL BE ABORTED'\nMSG007L  EQU   *-MSG007\nMSG008   DC    C'OUTPUT UNIT NOT ALLOCATED, COMMAND WILL BE ABORTED'\nMSG008L  EQU   *-MSG008\nMSG009   DC    C'INPUT UNIT INCONSISTENT WITH COMMAND, COMMAND ABORTED'\nMSG009L  EQU   *-MSG009\nMSG010   DC    C'OUTPUT UNIT INCONSISTENT WITH COMMAND, COMMAND ABORTED+\n               '\nMSG010L  EQU   *-MSG010\nMSG011   DC    C'EOF FOUND ON INPUT, COMMAND TERMINATED'\nMSG011L  EQU   *-MSG011\nMSG012   DC    C'PHYSICAL END OF TAPE REACHED ON INPUT, COMMAND TERMINA+\n               TED'\nMSG012L  EQU   *-MSG012\nMSG013   DC    C'TAPE MARK READ ON INPUT, COMMAND TERMINATED'\nMSG013L  EQU   *-MSG013\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nMAINSAVE DC    18F'0'              REGISTER SAVE AREA\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         ABCODES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC RESOURCE CONTROL BLOCK                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK TYPE=SHORT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMUNICATION PARAMETER LIST                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCCOM     DSECT\n         IEZCOM\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              CONSOLE INPUT BUFFER                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCIB      IEZCIB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTPARM": {"ttr": 1798, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              PARAMETER SEARCH ROUTINE/TABLE                         *\n*                                                                     *\n*     THIS MODULE IS LINKED TO BY THE CARD-INPUT COMMAND MODULE       *\n*     'DITTCARD', THE CONSOLE-INPUT COMMAND MODULE 'DITTCONS', AND    *\n*     THE TSO-INPUT COMMAND MODULE 'DITTTSO'.                         *\n*                                                                     *\n*     SINCE THE SAME PARAMETERS CAN BE ENTERED FROM EACH SOURCE,      *\n*     A COMMON PARAMETER CONVERTER ROUTINE ELIMINATED DUPLICATION     *\n*     OF CODE.  ALSO NEW PARAMETERS SHOULD ONLY REQUIRE MODIFICATION  *\n*     OF ONE MODULE.                                                  *\n*                                                                     *\n*     THIS MODULE ALSO WILL RETURN A MESSAGE FOR REQUIRED PARAMETERS  *\n*     THAT WERE NOT ENTERED.  THE CONSOLE-INPUT MODE ALLOWS THE       *\n*     OPERATOR TO BE PROMPTED FOR MISSING PARAMETERS, THE PROMPT      *\n*     IS ISSUEED FROM THIS MODULE.                                    *\n*                                                                     *\n*     TO ALLOW SPECIALIZED CHECKING OF INDIVIDUAL PARAMETERS WITHOUT  *\n*     CODING SECTIONS IN THIS MODULE FOR SPECIFIC FIELDS, AN EDITOR/  *\n*     CHECKER MODULE NAME MY BE CODED IN THE 'PARM' MACRO WHICH       *\n*     DEFINES THE PARAMETER.  THE 'PARMBLOK' ADDRESS WILL BE PASSED   *\n*     TO ANY EDITOR/CHECKER MODULE IN R10, ALLOWING THE EDITOR/       *\n*     CHECKER MODULE TO DETERMINE WHICH FIELD IS BEING CHECKED        *\n*     (ONE EDITOR/CHECKER COULD BE USED FOR MULTIPLE PARAMETERS).     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTPARM DITTPRFX PARMSAVE,'PARAMETER CONVERSION MODULE'\n         LR    R10,R1              COPY PARAMETER BLOCK ADDRESS\n         USING PARMBLOK,R10        SPECIFY BASE\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY,        TRACE ENTRY                         +\n               DATA1=PARMWTO,      .. TRACE 1ST PART OF BLOCK          +\n               DATA2=PARMWORK      .. TRACE MOST ALL OF REMAINDER\n         XC    PARMMSGA,PARMMSGA   CLEAR MESSAGE ADDRESS\n         NI    PARMFLAG,255-$PARMOK-$PARMCAN   RESET FLAGS\n         LA    R6,PARMTBLE         PARAMETER TABLE\n         USING PARMD,R6            ADDRESSIBILITY\n         CLI   PARMCMMD,$PARMINT   INITIALIZE PARAMETERS??\n         BE    PARM0500            YES\n         DITTRACE ID=PARMSTRT      TRACE TABLE SEARCH START\nPARM0010 DS    0H\n         CLI   PARMELEN,X'FF'      END OF TABLE??\n         BE    PARM8000            YES .. INVALID PARAMETER ID\n         CLC   PARMID,PARMPARM     CORRECT PARAMETER??\n         BE    PARM0020            YES\n         AH    R6,PARMELEN         ADD ENTRY LENGTH\n         B     PARM0010            LOOP\nPARM0020 DS    0H\n         DITTRACE ID=PARMFND       TRACE PARAMETER FOUND\n         CLI   PARMCMMD,$PARMWTO   PROMPT OPERATOR FOR PARM??\n         BE    PARM0230            YES\n         CLI   PARMCMMD,$PARMEWTO  ERROR MSG/PROMPT FOR PARM??\n         BE    PARM0240            YES\n         CLI   PARMCMMD,$PARMMIS   RETURN MESSAGE FOR MISSING PARM?\n         BE    PARM0220            YES\nPARM0030 DS    0H\n         DITTRACE ID=PARMCNV       TRACE PARAMETER FOUND\n         TM    PARMDSCR,$PARMBIN   HEX FIELD??\n         BO    PARM0050            YES\n         TM    PARMDSCR,$PARMCUU   CUU FIELD??\n         BO    PARM0080            YES\n         TM    PARMDSCR,$PARMDEC   DECIMAL FIELD??\n         BO    PARM0130            YES\n         TM    PARMDSCR,$PARMCHR   CHARACTER FIELD??\n         BO    PARM0160            YES\n         TM    PARMDSCR,$PARMADR   ADDRESS FIELD?\n         BO    PARM0180            YES\nPARM0040 DS    0H\n         DITTRACE ID=UNKNPARM      TRACE PARAMETER TYPE UNKNOWN\n         B     PARM9900            EXIT\nPARM0050 DS    0H\n         DITTRACE ID=PARMBIN       TRACE BINARY PARAMETER CONVERSION\n         LH    R2,PARMWLEN         LOAD WORK AREA LENGTH\n         BCTR  R2,0                ADJUST IT\n         EX    R2,PARMTRT2         CHECK FOR VALID DECIMAL VALUE\n         BNZ   PARM0060            NOT VALID\n         EX    R2,PARMPACK         PACK THE NUMBER\n         CVB   R1,COMMDWRD         CONVERT TO BINARY\n         CH    R1,PARMHBIG         VALUE TOO BIG??\n         BH    PARM0070            YES, EXIT\n         ST    R1,COMMDWRD         STORE RESULT IN BINARY\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,PARMADDR       PARAMETER RESULT OFFSET\n         LA    R1,DITTCOMM(R1)     OUTPUT FIELD\n         LA    R2,COMMDWRD+3       END OF BINARY RESULT\n         LH    R3,PARMLEN          PARAMETER LENGTH\n         BCTR  R3,0                ADJUST IT\n         SR    R2,R3               FIRST BYTE TO MOVE FROM\n         EX    R3,HEXMVC           MOVE RESULT\n         SR    R15,R15             CLEAR REGISTER\n         ICM   R15,3,PARMCDSP      DISPLACEMENT TO CHECKER ADDRESS\n         BZ    PARM0400            NO CHECKER.. ALL IS WELL\n         DITTRACE ID=BINCHECK      TRACE CALL TO FIELD CHECKER\n         L     R15,DITTCOMM(R15)   CHECKER ENTRY POINT FROM DITTCOMM\n         BALR  R14,R15             LINK TO CHECKER\n         TM    PARMFLAG,$PARMCKE   ERROR DETECTED BY CHECKER??\n         BNO   PARM0400            NO.. ALL IS A-OK\n         NI    PARMFLAG,255-$PARMCKE    RESET THE FLAG\n         B     PARM9900            EXIT WITHOUT SETTING 'OK' FLAG\nPARM0060 DS    0H\n         DITTRACE ID=ODDBIN        BINARY FIELD WITH ODD NBR OF DIGITS\n         MVC   PARMM01P,PARMNAME   SET PARM NAME IN MESSAGE\n         LA    R1,PARMM01          MESSAGE LENGTH/DATA ADDRESS\n         ST    R1,PARMMSGA         RETURN MESSAGE ADDRESS\n         B     PARM9900            EXIT WITHOUT SETTING 'OK' FLAG\nPARM0070 DS    0H\n         DITTRACE ID=BIGBIN        BINARY FIELD WITH ODD NBR OF DIGITS\n         MVC   PARMM02P,PARMNAME   SET PARM NAME IN MESSAGE\n         LA    R1,PARMM02          MESSAGE LENGTH/DATA ADDRESS\n         ST    R1,PARMMSGA         RETURN MESSAGE ADDRESS\n         B     PARM9900            EXIT WITHOUT SETTING 'OK' FLAG\nPARM0080 DS    0H\n         DITTRACE ID=PARMCUU       TRACE CUU PARAMETER CONVERSION\n         CLC   PARMWLEN,H4         FOUR DIGIT CUU?\n         BE    PARM0100            YES\n         CLC   PARMWLEN,H3         THREE DIGIT CUU?\n         BNE   PARM0110            NO\nPARM0090 DS    0H\n         MVC   PARMWORK+3(1),PARMWORK+2\n         MVC   PARMWORK+2(1),PARMWORK+1\n         MVC   PARMWORK+1(1),PARMWORK\n         MVI   PARMWORK,C'0'       INSERT A LEADING ZERO\nPARM0100 DS    0h\n         TRT   PARMWORK(4),COMMVHEX CHECK FOR VALID HEX\n         BNZ   PARM0120            NOT VALID\n         NC    PARMWORK,COMM1F     CLEAR HIGH 3 BITS\n         TR    PARMWORK,COMMHXPK   TRANSLATE FOR HEX PACKING\n         PACK  COMMDWRD(3),PARMWORK(5) PACK THE VALUE\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,PARMADDR       PARAMETER RESULT OFFSET\n         LA    R1,DITTCOMM(R1)     OUTPUT FIELD\n         MVC   0(2,R1),COMMDWRD    MOVE THE PARAMETER VALUE\n         SR    R15,R15             CLEAR REGISTER\n         ICM   R15,3,PARMCDSP      DISPLACEMENT TO CHECKER ADDRESS\n         BZ    PARM0400            NO CHECKER.. ALL IS WELL\n         DITTRACE ID=CUUCHECK      TRACE CALL TO FIELD CHECKER\n         L     R15,DITTCOMM(R15)   CHECKER ENTRY POINT FROM DITTCOMM\n         BALR  R14,R15             LINK TO CHECKER\n         TM    PARMFLAG,$PARMCKE   ERROR DETECTED BY CHECKER??\n         BNO   PARM0400            NO.. ALL IS A-OK\n         NI    PARMFLAG,255-$PARMCKE    RESET THE FLAG\n         B     PARM9900            EXIT WITHOUT SETTING 'OK' FLAG\nPARM0110 DS    0H\n         DITTRACE ID=BADCUUL\n         MVC   PARMM03P,PARMNAME   SET PARM NAME IN MESSAGE\n         LA    R1,PARMM03          MESSAGE LENGTH/DATA ADDRESS\n         ST    R1,PARMMSGA         RETURN MESSAGE ADDRESS\n         B     PARM9900            EXIT\nPARM0120 DS    0H\n         DITTRACE ID=BADCUUD\n         MVC   PARMM04P,PARMNAME   SET PARM NAME IN MESSAGE\n         LA    R1,PARMM04          MESSAGE LENGTH/DATA ADDRESS\n         ST    R1,PARMMSGA         RETURN MESSAGE ADDRESS\n         B     PARM9900            EXIT\nPARM0130 DS    0H\n         DITTRACE ID=PARMDEC       TRACE DECIMAL PARAMETER CONVERSION\n         LH    R2,PARMWLEN         WORK AREA LENGTH\n         SRL   R2,1                DIVIDE LENGTH BY 2\n         LA    R2,1(R2)            ADD 1\n         CH    R2,PARMLEN          VALUE TOO LONG??\n         BH    PARM0140            YES, EXIT\n         LH    R2,PARMWLEN         WORK AREA LENGTH\n         BCTR  R2,0                ADJUST IT\n         EX    R2,PARMTRT2         CHECK FOR VALID DECIMAL VALUE\n         BNZ   PARM0150            NOT VALID\n         EX    R2,PARMPACK         PACK THE NUMBER\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,PARMADDR       PARAMETER RESULT OFFSET\n         LA    R1,DITTCOMM(R1)     OUTPUT FIELD\n         LH    R2,PARMLEN          MAX RESULT LENGTH\n         BCTR  R2,0                ADJUST LENGTH\n         SLL   R2,4                SHIFT LENGTH FOUR BITS\n         EX    R2,PARMZAP          MOVE RESULT\n         SR    R15,R15             CLEAR REGISTER\n         ICM   R15,3,PARMCDSP      DISPLACEMENT TO CHECKER ADDRESS\n         BZ    PARM0400            NO CHECKER.. ALL IS WELL\n         DITTRACE ID=DECCHECK      TRACE CALL TO FIELD CHECKER\n         L     R15,DITTCOMM(R15)   CHECKER ENTRY POINT FROM DITTCOMM\n         BALR  R14,R15             LINK TO CHECKER\n         TM    PARMFLAG,$PARMCKE   ERROR DETECTED BY CHECKER??\n         BNO   PARM0400            NO.. ALL IS A-OK\n         NI    PARMFLAG,255-$PARMCKE    RESET THE FLAG\n         B     PARM9900            EXIT WITHOUT SETTING 'OK' FLAG\nPARM0140 DS    0H\n         DITTRACE ID=BADDECL\n         MVC   PARMM05P,PARMNAME   SET PARM NAME IN MESSAGE\n         LA    R1,PARMM05          MESSAGE ADDRESS\n         ST    R1,PARMMSGA         SET MESSAGE\n         B     PARM9900            EXIT WITHOUT SETTING 'OK' FLAG\nPARM0150 DS    0H\n         DITTRACE ID=BADDECD\n         MVC   PARMM06P,PARMNAME   SET PARM NAME IN MESSAGE\n         LA    R1,PARMM06          MESSAGE ADDRESS\n         ST    R1,PARMMSGA         SET MESSAGE\n         B     PARM9900            EXIT WITHOUT SETTING 'OK' FLAG\nPARM0160 DS    0H\n         DITTRACE ID=PARMCHAR      TRACE CHARACTER FIELDS\n         LH    R2,PARMWLEN         WORK AREA LENGTH\n         CH    R2,PARMLEN          TOO LONG??\n         BH    PARM0170            YES.. EXIT\n         LH    R3,PARMADDR         RESULT OFFSET INTO DITTCOMM\n         LA    R3,DITTCOMM(R3)     RESULT FIELD\n         LH    R1,PARMLEN          FULL LENGTH\n         BCTR  R1,0                ADJUST IT\n         EX    R1,CHARINIT         INITIALIZE CHARACTER FIELD\n         BCTR  R2,0                ADJUST ACTUAL DATA LENGTH\n         EX    R2,CHARMVC          MOVE CHARACTER FIELD TO RESULT\n         SR    R15,R15             CLEAR REGISTER\n         ICM   R15,3,PARMCDSP      DISPLACEMENT TO CHECKER ADDRESS\n         BZ    PARM0400            NO CHECKER.. ALL IS WELL\n         DITTRACE ID=CHCHECK       TRACE CALL TO FIELD CHECKER\n         L     R15,DITTCOMM(R15)   CHECKER ENTRY POINT FROM DITTCOMM\n         BALR  R14,R15             LINK TO CHECKER\n         TM    PARMFLAG,$PARMCKE   ERROR DETECTED BY CHECKER??\n         BNO   PARM0400            NO.. ALL IS A-OK\n         NI    PARMFLAG,255-$PARMCKE    RESET THE FLAG\n         B     PARM9900            EXIT WITHOUT SETTING 'OK' FLAG\nPARM0170 DS    0H\n         MVC   PARMM07P,PARMNAME   SET PARM NAME IN MESSAGE\n         LA    R1,PARMM07          MESSAGE ADDRESS\n         ST    R1,PARMMSGA         SET MESSAGE ADDRESS\n         B     PARM9900            EXIT WITHOUT SETTING 'OK' FLAG\nPARM0180 DS    0H\n         DITTRACE ID=PARMADDR,     TRACE DISK ADDRESS CONVERSION       +\n               DATA1=PARMWLEN,     .. DATA LENGTH                      +\n               DATA2=PARMWORK      .. DATA\n         LH    R2,PARMWLEN         LOAD WORK AREA LENGTH\n         CH    R2,H9               PROPER LENGTH?\n         BNE   PARM0190            NO..\n         BCTR  R2,0                ADJUST IT\n         EX    R2,PARMTRT2         CHECK FOR VALID DECIMAL VALUE\n         BNZ   PARM0200            NOT VALID\n         SR    R2,R2               CLEAR REGISTER\n         ICM   R2,3,PARMADDR       PARAMETER RESULT OFFSET\n         LA    R2,DITTCOMM(R2)     OUTPUT FIELD ADDRESS\n         PACK  COMMDWRD,PARMWORK(4)    PACK CYLINDER NUMBER\n         CVB   R1,COMMDWRD         CONVERT TO BINARY\n         STCM  R1,3,0(R2)          SET CYLINDER NUMBER\n         PACK  COMMDWRD,PARMWORK+4(2)  PACK HEAD NUMBER\n         CVB   R1,COMMDWRD         CONVERT TO BINARY\n         STCM  R1,3,2(R2)          SET HEAD NUMBER\n         PACK  COMMDWRD,PARMWORK+6(3)  PACK RECORD NUMBER\n         CVB   R1,COMMDWRD         CONVERT TO BINARY\n         STC   R1,4(R2)            SET RECORD NUMBER\n         CLI   4(R2),0             RECORD NUMBER = ZERO?\n         BE    PARM0210            YES.. INVALID RECORD NUMBER\n         ICM   R15,3,PARMCDSP      DISPLACEMENT TO CHECKER ADDRESS\n         BZ    PARM0400            NO CHECKER.. ALL IS WELL\n         DITTRACE ID=ADRCHECK      TRACE CALL TO FIELD CHECKER\n         L     R15,DITTCOMM(R15)   CHECKER ENTRY POINT FROM DITTCOMM\n         BALR  R14,R15             LINK TO CHECKER\n         TM    PARMFLAG,$PARMCKE   ERROR DETECTED BY CHECKER??\n         BNO   PARM0400            NO.. ALL IS A-OK\n         NI    PARMFLAG,255-$PARMCKE    RESET THE FLAG\n         B     PARM9900            EXIT WITHOUT SETTING 'OK' FLAG\nPARM0190 DS    0H\n         DITTRACE ID=ADRLEN        INCORRECT DISK ADDRESS LENGTH\n         MVC   PARMM08P,PARMNAME   SET PARM NAME IN MESSAGE\n         LA    R1,PARMM08          MESSAGE LENGTH/DATA ADDRESS\n         ST    R1,PARMMSGA         RETURN MESSAGE ADDRESS\n         B     PARM9900            EXIT WITHOUT SETTING 'OK' FLAG\nPARM0200 DS    0H\n         DITTRACE ID=BADADR        INVALID VALUE IN DISK ADDRESS\n         MVC   PARMM06P,PARMNAME   SET PARM NAME IN MESSAGE\n         LA    R1,PARMM06          MESSAGE LENGTH/DATA ADDRESS\n         ST    R1,PARMMSGA         RETURN MESSAGE ADDRESS\n         B     PARM9900            EXIT WITHOUT SETTING 'OK' FLAG\nPARM0210 DS    0H\n         DITTRACE ID=BADREC        INVALID RECORD NUMBER IN DISK ADDR\n         LA    R1,PARMM09          MESSAGE LENGTH/DATA ADDRESS\n         ST    R1,PARMMSGA         RETURN MESSAGE ADDRESS\n         B     PARM9900            EXIT WITHOUT SETTING 'OK' FLAG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              RETURN MESSAGE FOR MISSING PARMS                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARM0220 DS    0H\n         MVC   PARMMSGA,PARMMMSG   RETURN 'MISSING' PARM MESSAGE\n         B     PARM9900\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PROMPT OPERATOR FOR PARAMETERS                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARM0230 DS    0H\n         ICM   R3,15,PARMMWTO      WTO ADDRESS\n         B     PARM0250            ISSUE WTO\nPARM0240 DS    0H\n         DITTRACE ID=PARMEWTO\n         ICM   R3,15,PARMWTO       MESSAGE PROVIDED BY CALLER?\n         BNZ   PARM0250            YES\n         ICM   R3,15,PARMIWTO      WTO ADDRESS (FOR ERROR MSG)\nPARM0250 DS    0H\n         XC    PARMWTO,PARMWTO     CLEAR ADDRESS\n         MVI   PRTCC,C' '          SINGLE SPACE\n         MVC   PRTDATA(L'PARMMSG1),PARMMSG1\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,0(R3)          LENGTH FROM WTO\n         SH    R1,H5               MINUS WTO PREFIX LENGTH + 1\n         EX    R1,WTOMSG           MOVE TEXT FROM WTO\n         LA    R1,PRTBLOK          PRINT PARAMETER BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         WTO   MF=(E,(R3)),        ISSUE WTO                           +\n               CONSNAME=COMMCNAM   .. CONSOLE ID\n         LR    R4,R1               SAVE WTO MESSAGE ID\n         MVC   WTOAREA(WTOAREAL),COMMBLKS    CLEAR REPLY AREA\n         LA    R5,COMMCECB         ECB ADDRESS\n         XC    COMMCECB,COMMCECB   CLEAR ECB\n         LA    R2,WTOAREA          REPLY AREA ADDRESS\n         ICM   R3,15,PARMWTOR      WTOR ADDRESS\n         WTOR  ,(R2),,(R5),        ISSUE WTOR FOR PROMPT               +\n               CONSNAME=COMMCNAM,  .. CONSOLE ID                       +\n               MF=(E,(R3))         .. MACRO FORM\n         WAIT  1,ECB=(R5)          WAIT FOR OPERATOR'S RESPONSE\n         DOM   MSG=(R4)            DELETE WTO MESSAGE\n         MVI   PRTCC,C' '          SINGLE SPACE\n         MVC   PRTDATA(L'PARMMSG2),PARMMSG2\n         MVC   PRTDATA+L'PARMMSG2(WTOAREAL),WTOAREA\n         LA    R1,PRTBLOK          PRINT PARAMETER BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         CLC   PARMCAN,WTOAREA     DID OPERATOR REQUEST COMMAND CANCEL?\n         BE    PARM0600            YES\n         XC    PARMWLEN,PARMWLEN   ZERO DATA LENGTH\n         XC    PARMWORK,PARMWORK   CLEAR WORK AREA\n         LA    R1,WTOAREA          DATA ADDRESS\n         LA    R2,80               MAXIMUM DATA LENGTH\nPARM0260 DS    0H\n         CLI   0(R1),C' '          AT LEAST A BLANK??\n         BH    PARM0270            YES\n         LA    R1,1(R1)            NEXT ONE\n         BCT   R2,PARM0260         LOOP\n         B     PARM0230            NOTHING??? RE-ISSUE WTO/WTOR\nPARM0270 DS    0H\n         SR    R3,R3               CLEAR FOR LENGTH\n         LA    R4,PARMWORK         OUTPUT WORK AREA\nPARM0280 DS    0H\n         CLI   0(R1),C' '          MORE THAN A BLANK??\n         BNH   PARM0290            NO\n         LA    R3,1(R3)            ADD 1 TO LENGTH\n         MVC   0(1,R4),0(R1)       MOVE IT\n         LA    R1,1(R1)            NEXT ONE\n         LA    R4,1(R4)            NEXT ONE\n         BCT   R2,PARM0280         CONTINUE\nPARM0290 DS    0H\n         STH   R3,PARMWLEN         SAVE DATA LENGTH\n         B     PARM0030            GO PROCESS DATA\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXIT POINT IF PARM WAS PROCESSED SUCCESSFULLY          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARM0400 DS    0H\n         DITTRACE ID=PARMGOOD      TRACE GOOD PARAMETER INDICATION\n         OI    PARMFLAG,$PARMOK    PARMETER AND OPERAND ARE OK\n         OC    COMMPFLG,PARMPFLG   TURN ON INDICATORS IF ANY\n         B     PARM9900            EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              RE-INITIALIZE ALL PARAMETERS AS 'CLEAN-UP'             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARM0500 DS    0H\n         DITTRACE ID=INITSTRT      TRACE TABLE SCAN START\nPARM0510 DS    0H\n         CLI   PARMELEN,X'FF'      END OF TABLE??\n         BE    PARM0560            YES .. INVALID PARAMETER ID\n         LH    R2,PARMADDR         RESULT'S OFFSET INTO DITTCOMM\n         LA    R2,DITTCOMM(R2)     RESULT'S ADDRESS\n         LH    R3,PARMLEN          RESULT LENGTH\n         LTR   R3,R3               LENGTH ZERO??\n         BZ    PARM0550            YES\n         BCTR  R3,0                ADJUST FOR XC\n         TM    PARMDSCR,$PARMBIN   BINARY??\n         BO    PARM0520            YES\n         TM    PARMDSCR,$PARMCUU   UNIT ADDRESS??\n         BO    PARM0520            YES\n         TM    PARMDSCR,$PARMADR   DISK ADDRESS??\n         BO    PARM0520            YES\n         TM    PARMDSCR,$PARMDEC   DECIMAL??\n         BO    PARM0530            YES\n         TM    PARMDSCR,$PARMCHR   CHARACTER??\n         BO    PARM0540            YES\n         DITTRACE ID=INITUNKN,     TRACE UNKNOWN PARM TYPE             +\n               DATA1=PARMNAME,     .. CAPTURE PARM NAME                +\n               RDATA2=R6           .. CAPTURE ITS ADDRESS\n         B     PARM0550\nPARM0520 DS    0H\n         EX    R3,INITXC           CLEAR TO BINARY ZEROS\n         B     PARM0550\nPARM0530 DS    0H\n         SLL   R3,4                SHIFT TO 'LENGTH 1' BITS\n         EX    R3,INITZAP          SET TO ZERO\n         B     PARM0550\nPARM0540 DS    0H\n         EX    R3,INITMVC          INITIALIZE TO BLANKS\nPARM0550 DS    0H\n         AH    R6,PARMELEN         ADD ENTRY LENGTH\n         B     PARM0510            LOOP\nPARM0560 DS    0H\n         DITTRACE ID=INITGOOD      INITIALIZATION COMPLETE\n         OI    PARMFLAG,$PARMOK    INITIALIZATION OK\n         B     PARM9900            EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              OPERATOR REQUESTED CURRENT COMMAND TO BE ABORTED       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARM0600 DS    0H\n         DITTRACE ID=CANCEL        TRACE COMMAND CANCELLED\n         OI    PARMFLAG,$PARMCAN   SET 'CANCEL' FLAG\n         B     PARM9900            AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PARAMETER 'ID' PASSED WAS INVALID (INTERNAL ERROR)     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARM8000 DS    0H\n         DITTRACE ID=PARMINV       TRACE INVALID PARAMETER ID\n         DC    H'0'                BLOW OURSELVES AWAY\n         DC    C'INVALID PARAMETER ID ENCOUNTERED'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARM9900 DS    0H\n         DITTRACE ID=EXIT          TRACE GOOD PARAMETER INDICATION\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXECUTED INSTRUCTIONS                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARMTRT1 TRT   PARMWORK(0),COMMVHEX   CHECK FOR VALID HEX/CUU\nPARMMVC  MVC   0(0,R1),COMMDWRD       MOVE HEX/CHAR VALUES\nPARMTRT2 TRT   PARMWORK(0),COMMVDEC   CHECK FOR VALID DECIMAL\nPARMPACK PACK  COMMDWRD,PARMWORK(0)   MOVE DECIMAL VALUES\nPARMZAP  ZAP   0(0,R1),COMMDWRD       MOVE THE RESULT\nHEXMVC   MVC   0(0,R1),0(R2)          MOVE THE RESULT\nCHARINIT MVC   0(0,R3),COMMBLKS       INITIALIZE TO BLANKS\nCHARMVC  MVC   0(0,R3),PARMWORK       MOVE PARAMETER TO RESULT\nINITXC   XC    0(0,R2),0(R2)          CLEAR TO BINARY ZEROS\nINITZAP  ZAP   0(0,R2),COMMP0         SET TO ZERO\nINITMVC  MVC   0(0,R2),COMMBLKS       INTIALIZE TO BLANKS\nWTOMSG   MVC   PRTDATA+L'PARMMSG1(0),4(R3)\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PARAMETER-SEARCH MODULE WORK AREAS                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARMSAVE DC    18F'0'              REGISTER SAVE AREA\nWTOAREA  DC    0F'0',CL80' '       WTOR REPLY AREA\nWTOAREAL EQU   *-WTOAREA\nPARMHBIG DC    H'32767'            LARGEST ALLOWABLE HEX VALUE\nH3       DC    H'3'                CONSTANT\nH4       DC    H'4'                CONSTANT\nH5       DC    H'5'                CONSTANT\nH9       DC    H'9'                CONSTANT\nPARMCAN  DC    C'CANCEL '          CONSTANT\nPARMMSG1 DC    C'OPERATOR PROMPT:' CONSTANT\nPARMMSG2 DC    C'OPERATOR REPLY:'  CONSTANT\nPARMM01  DC    AL2(PARMM01L)\n         DC    C' HEX VALUE SPECIFIED WITH ODD NUMBER OF DIGITS FOR PAR+\n               AMETER:'\nPARMM01P DC    CL8' '\nPARMM01L EQU   (*-PARMM01)-2\nPARMM02  DC    AL2(PARMM02L)\n         DC    C' HEX VALUE SPECIFIED WITH VALUE TOO LARGE FOR PARAMETE+\n               R:'\nPARMM02P DC    CL8' '\nPARMM02L EQU   (*-PARMM02)-2\nPARMM03  DC    AL2(PARMM03L)\n         DC    C' CUU VALUE FOR PARAMETER '\nPARMM03P DC    CL8' '\n         DC    C' MUST CONTAIN 3 CHARACTERS'\nPARMM03L EQU   (*-PARMM03)-2\nPARMM04  DC    AL2(PARMM04L)\n         DC    C' CUU VALUE FOR PARAMETER '\nPARMM04P DC    CL8' '\n         DC    C' CONTAINS INVALID DATA'\nPARMM04L EQU   (*-PARMM04)-2\nPARMM05  DC    AL2(PARMM05L)\n         DC    C' DECIMAL VALUE TOO LONG FOR PARAMETER '\nPARMM05P DC    CL8' '\nPARMM05L EQU   (*-PARMM05)-2\nPARMM06  DC    AL2(PARMM06L)\n         DC    C' DECIMAL VALUE FOR PARAMETER '\nPARMM06P DC    CL8' '\n         DC    C' CONTAINS NON-NUMERIC DATA'\nPARMM06L EQU   (*-PARMM06)-2\nPARMM07  DC    AL2(PARMM07L)\n         DC    C' VALUE FOR PARAMETER '\nPARMM07P DC    CL8' '\n         DC    C' IS TOO LONG'\nPARMM07L EQU   (*-PARMM07)-2\nPARMM08  DC    AL2(PARMM08L)\n         DC    C' VALUE FOR PARAMETER '\nPARMM08P DC    CL8' '\n         DC    C' MUST BE 9 DIGITS (CCCCHHRRR)'\nPARMM08L EQU   (*-PARMM08)-2\nPARMM09  DC    AL2(PARMM09L)\n         DC    C' RECORD NUMBER ZERO IS NOT ALLOWED'\nPARMM09L EQU   (*-PARMM09)-2\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXTERNAL ROUTINE ADDRESSES                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINTER PARAMETER BLOCK                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PARAMETER TABLE                                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARMTBLE DS    0H\n         PARMGEN GEN=YES\n         DC    X'FFFF'\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PARAMETER TABLE DSECT                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARMD    DSECT\nPARMELEN DS    XL2                 ENTRY LENGTH\nPARMNAME DS    CL8                 PARAMETER NAME\nPARMADDR DS    AL2                 RESULT FIELD OFFSET INTO DITTCOMM\nPARMLEN  DS    AL2                 LENGTH OF RESULT FIELD\nPARMID   DS    X                   PARAMETER ID\nPARMDSCR DS    X                   PARAMETER DESCRIPTOR\n$PARMBIN EQU   X'01'               .. FIELD IS BINARY\n$PARMCUU EQU   X'02'               .. FIELD IS A 'CUU'\n$PARMDEC EQU   X'04'               .. FIELD IS DECIMAL\n$PARMCHR EQU   X'08'               .. FIELD IS CHARACTER\n$PARMADR EQU   X'10'               .. FIELD IS DISK ADDRESS\nPARMPFLG DS    X                   PROCESSING FLAGS\nPARMCDSP DS    AL2                 FIELD CHECKER E.P. DISPLACEMENT\nPARMMMSG DS    AL4                 ADDRESS OF MESSAGE FOR MISSING PARM\nPARMMWTO DS    AL4                 ADDRESS OF WTO FOR MISSING PARM\nPARMIWTO DS    AL4                 ADDRESS OF WTO FOR INVALID DATA\nPARMWTOR DS    AL4                 ADDRESS OF WTOR FOR PARM PROMPT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PARAMETER REQUEST/STATUS                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARMBLOK PARMBLOK TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         END  DITTPARM\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DITTPRMD": {"ttr": 2054, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              TAPE DENSITY PARAMETER CONVERTER/CHECKER               *\n*                                                                     *\n*    THE TAPE DENSITY PARAMETER IS DEFINED IN THE 'PARMGEN' MACRO     *\n*    AS HAVING FIELD 'COMMDWRD' AS ITS OUTPUT FIELD.  BY THE TIME     *\n*    'DITTPARM' CALLS THIS MODULE, THE VALUE SPECIFIED WILL HAVE      *\n*    BEEN MOVED INTO 'COMMDWRD', LEFT JUSTIFIED PADDED WITH BLANKS.   *\n*    THIS MODULE CHECKS THE VALUE (MUST BE EITHER 1600 OR 6250) AND   *\n*    CONVERTS THIS INTO THE TAPE COMMAND TO SET THE DESITY TO THE     *\n*    REQUESTED MODE.  THE TAPE DENSITY MODE COMMANDS ARE DOCUMENTED   *\n*    IN THE OLD \"ASSEMBLER\" REFERENCE CARD (NOW A PINK BOOK).         *\n*                                                                     *\n*    THE PARAMETER REQUEST BLOCK 'PARMBLOK' ADDRESS WILL BE PASSED    *\n*    TO THIS MODULE IN R10.                                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTPRMD DITTPRFX PRMDSAVE,'CONVERT/CHECK TAPE DENSITY'\n         USING DITTCOMM,R11        SPECIFY BASE\n         USING PARMBLOK,R10        SPECIFY BASE\n         DITTRACE ID=ENTRY,        TRACE ENTRY                         +\n               DATA1=COMMDWRD      .. SAVE REQUESTED VALUE IN TRACE\nPRMD0010 DS    0H\n         CLC   DEN1600,COMMDWRD    1600 BPI?\n         BE    PRMD0020            YES\n         CLC   DEN6250,COMMDWRD    6250 BPI?\n         BE    PRMD0030            YES\n         OI    PARMFLAG,$PARMCKE   SET 'ERROR' FLAG\n         LA    R1,PRMDM01          MESSAGE ADDRESS\n         ST    R1,PARMMSGA         RETURN THE ADDRESS\n         DITTRACE ID=BADDEN        TRACE BAD DENSITY REQUEST\n         B     PRMD9900            AND EXIT\nPRMD0020 DS    0H\n         DITTRACE ID=DEN1600       1600 BPI SELECTED\n         MVI   COMMDEN,$DEN1600    SET MODE TO 1600 BPI\n         B     PRMD9900            AND EXIT\nPRMD0030 DS    0H\n         DITTRACE ID=DEN6250       6250 BPI SELECTED\n         MVI   COMMDEN,$DEN6250    SET MODE TO 6250 BPI\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRMD9900 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS/CONSTANTS                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRMDSAVE DC    18F'0'              REGISTER SAVE AREA\nDEN1600  DC    C'1600 '\nDEN6250  DC    C'6250 '\nPRMDM01  DC    AL2(PRMDM01L)\n         DC    C' INVALID DENSITY REQUEST (ONLY 1600 AND 6250 ARE VALID+\n               )'\nPRMDM01L EQU   (*-PRMDM01)-2\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PARAMETER CONVERSION REQUEST BLOCK                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARMBLOK PARMBLOK\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         END  DITTPRMD\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DITTPRMO": {"ttr": 2057, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              OPTION PARAMETER CHECKER                               *\n*                                                                     *\n*    THE 'OPT' PARAMETER WAS INVENTED TO SERVE MULTIPLE PURPOSES.     *\n*    IT IS ALWAYS AN 'OPTIONAL' PARAMETER.  THE ONLY EDIT CHECKING    *\n*    FOR 'OPT' IS TO VERIFY THAT IT MATCHES ONE OF THE VALUES         *\n*    SPECIFIED IN THE 'OPTVAL=' PARAMETER OF THE 'DITTFUNC' MACRO     *\n*    DEFINING THE CURRENT FUNCTION.                                   *\n*                                                                     *\n*    THE PARAMETER REQUEST BLOCK 'PARMBLOK' ADDRESS WILL BE PASSED    *\n*    TO THIS MODULE IN R10.                                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTPRMO DITTPRFX PRMOSAVE,'OPT PARAMETER CHECKER'\n         USING DITTCOMM,R11        SPECIFY BASE\n         USING PARMBLOK,R10        SPECIFY BASE\n         DITTRACE ID=ENTRY         TRACE ENTRY\nPRMO0010 DS    0H\n         L     R1,PARMOPV          FIRST VALID OPTION VALUE\n         LH    R2,PARMOPN          NUMBER OF VALID VALUES\nPRMO0020 DS    0H\n         CLC   COMMOPT,0(R1)       VALID OPTION VALUE?\n         BE    PRMO0030            YES, EXIT\n         LA    R1,8(R1)            NEXT OPTION\n         BCT   R2,PRMO0020         LOOP\n         OI    PARMFLAG,$PARMCKE   SET 'ERROR' FLAG\n         LA    R1,PRMOM01          MESSAGE ADDRESS\n         ST    R1,PARMMSGA         RETURN THE ADDRESS\n         DITTRACE ID=BADOPT        TRACE BAD DENSITY REQUEST\n         B     PRMO9900            AND EXIT\nPRMO0030 DS    0H\n         DITTRACE ID=GOODOPT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRMO9900 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS/CONSTANTS                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRMOSAVE DC    18F'0'              REGISTER SAVE AREA\nPRMOM01  DC    AL2(PRMOM01L)\n         DC    C'INVALID VALUE FOR OPTIONAL PARAMETER'\nPRMOM01L EQU   (*-PRMOM01)-2\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PARAMETER CONVERSION REQUEST BLOCK                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARMBLOK PARMBLOK\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         END  DITTPRMO\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTPRMV": {"ttr": 2060, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              TAPE VOLSER PARAMETER CONVERTER/CHECKER                *\n*                                                                     *\n*    THE TAPE INITIALIZATION FUNCTION WILL INITIALIZE 1 TAPE WITH A   *\n*    GIVEN VOLSER, OR A NUMBER OF TAPES WITH A SPECIFIED RANGE.       *\n*    VOLSERS NEED NOT BE ALL NUMERIC.  IF ONLY 1 TAPE IS TO BE        *\n*    INITIALIZED, ANY 1 TO 6 CHARACTER VOLSER WILL BE ACCEPTED.       *\n*    IF A RANGE IS TO BE INITIALIZED, AT LEAST THE LAST CHARACTER     *\n*    MUST BE NUMERIC.  THE \"PREFIX\" WILL BE PROPAGATED TO ALL TAPES   *\n*    INITIALIZED AND MUST BE IDENTICAL IN THE LOW AND HIGH VOLSERS    *\n*    IN THE INT COMMAND.  THE \"SUFFIX\" WILL BE INCREMENTED 1 DIGIT    *\n*    ON EACH SUCCESSIVE INIT UNTIL THE HIGH VOLSER IS REACHED.        *\n*    THE PREFIX WILL BE DETERMINED BY SCANNING THE VOLSER GIVEN       *\n*    BACKWARDS TO THE FIRST NON-NUMERIC VALUE.                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTPRMV DITTPRFX PRMVSAVE,'CHECK VOLSER RANGE'\n         USING DITTCOMM,R11        SPECIFY BASE\n         USING PARMBLOK,R10        SPECIFY BASE\n         DITTRACE ID=ENTRY,        TRACE ENTRY                         +\n               DATA1=COMMLOV,      .. SAVE LOW VOLSER                  +\n               DATA2=COMMHIV       .. SAVE HIGH VOLSER\nPRMV0010 DS    0H\n         LA    R1,COMMLOV+(L'COMMLOV-1)   LAST CHARACTER OF LOW VOLSER\n         LA    R2,COMMHIV+(L'COMMHIV-1)   LAST CHARACTER OF HIGH VOLSER\n         LA    R3,L'COMMLOV        MAXIMUM DIGITS\nPRMV0020 DS    0H\n         CLI   0(R1),C'0'          VALID DIGIT??\n         BL    PRMV0030            NO\n         CLI   0(R1),C'9'          VALID DIGIT??\n         BH    PRMV0030            NO\n         CLI   0(R2),C'0'          VALID DIGIT??\n         BL    PRMV0050            NO..\n         CLI   0(R2),C'9'          VALID DIGIT??\n         BH    PRMV0050            NO..\n         BCTR  R1,0                MINUS 1\n         BCTR  R2,0                MINUS 1\n         BCT   R3,PRMV0020         LOOP\n         B     PRMV0040            ALL NUMERIC, CHECK FOR LOW > HIGH\nPRMV0030 DS    0H\n         CH    R3,VOLSERL          VOLSER ALL NON-NUMERIC??\n         BE    PRMV0060            YES... CAN'T BE A RANGE\n         BCTR  R3,0                MINUS 1\n         EX    R3,PFXCLC           CHECK LOW TO HIGH VOLSER PREFIX\n         BNE   PRMV0070            PREFIXES DON'T MATCH\nPRMV0040 DS    0H\n         CLC   COMMHIV,COMMLOV     LOW > HIGH??\n         BH    PRMV9900            NO.. ALL'S WELL\n         LA    R1,PRMVM01          MESSAGE ADDRESS\n         ST    R1,PARMMSGA         RETURN MESSAGE ADDRESS\n         B     PRMV0080            SET ERROR FLAG\nPRMV0050 DS    0H\n         LA    R1,PRMVM02          MESSAGE ADDRESS\n         ST    R1,PARMMSGA         RETURN MESSAGE ADDRESS\n         B     PRMV0080\nPRMV0060 DS    0H\n         LA    R1,PRMVM03          MESSAGE ADDRESS\n         ST    R1,PARMMSGA         RETURN MESSAGE ADDRESS\n         B     PRMV0080\nPRMV0070 DS    0H\n         LA    R1,PRMVM04          MESSAGE ADDRESS\n         ST    R1,PARMMSGA         RETURN MESSAGE ADDRESS\nPRMV0080 DS    0H\n         OI    PARMFLAG,$PARMCKE   SET 'ERROR' INDICATOR\n         B     PRMV9900            AND EXIT\nPFXCLC   CLC   COMMLOV(0),COMMHIV  CHECK PREFIXES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRMV9900 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS/CONSTANTS                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRMVSAVE DC    18F'0'              REGISTER SAVE AREA\nVOLSERL  DC    AL2(L'COMMLOV)\nPRMVM01  DC    AL2(PRMVM01L)\n         DC    C' RANGE LOW LIMIT IS LARGER THAN RANGE HIGH LIMIT'\nPRMVM01L EQU   (*-PRMVM01)-2\nPRMVM02  DC    AL2(PRMVM02L)\n         DC    C' INVALID CHARACTER IN VOLSER'\nPRMVM02L EQU   (*-PRMVM02)-2\nPRMVM03  DC    AL2(PRMVM03L)\n         DC    C' RANGES ARE NOT VALID WITH ALL NON-NUMERIC VOLSER, COM+\n               MAND WILL BE ABORTED'\nPRMVM03L EQU   (*-PRMVM03)-2\nPRMVM04  DC    AL2(PRMVM04L)\n         DC    C' PREFIXES MUST MATCH ON LOW AND HIGH VALUE OF A RANGE'\nPRMVM04L EQU   (*-PRMVM04)-2\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PARAMETER CONVERSION REQUEST BLOCK                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARMBLOK PARMBLOK\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         END  DITTPRMV\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DITTPRO1": {"ttr": 2064, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*            DATA PRINT                                               *\n*                                                                     *\n*       THIS IS MODULE PRODUCES THE STANDARD OR VERTICAL HEX PRINT    *\n*       OUTPUT.  IT IS ALWAYS LINKED TO FROM 'DITTMAIN' AS AN OUTPUT  *\n*       MODULE.  THE PRINT LINES ARE BUILT AND PASSED TO 'DITTPRT'    *\n*       TO DO THE ACTUAL PRINTING.                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTPRO1 DITTPRFX PRTSAVE,'DATA PRINT'\n         USING DITTCOMM,R11        ADDRESS IT\n         DITTRACE ID=ENTRY         TRACE ENTRY\nPRT0010  DS    0H\n         TM    COMMFLAG,$COMMEOF   EOF FLAG ON?\n         BO    PRT0070             YES\n         DITTRACE ID=RECORD        TRACE STARTING RECORD PRINT\n         ICM   R10,15,COMMIND      INPUT DYNAMIC BLOCK ADDRESS\n         BZ    PRT0030             NO DYNAMIC BLOCK...\n         USING DYNBLOK,R10         DEFINE BASE\n         CLC   PRTDASD,DYNDDNAM    INPUT FROM DASD?\n         BNE   PRT0030             NO\n         TM    COMMIFLG,$NEWBLOK   NEW BLOCK JUST READ?\n         BNO   PRT0030             NO\n         MVC   DASDVOL,DYNVOL      COPY VOLSER\n         SR    R1,R1               CLEAR REGISTER\n         IC    R1,CNTREC           RECORD NUMBER FROM 'COUNT'\n         CVD   R1,COMMDWRD         CONVERT TO DECIMAL\n         MVC   EDWORK,EDWORD2      INTIALIZE WITH EDIT WORD\n         ED    EDWORK,COMMDWRD+5   EDIT RECORD NUMBER\n         MVC   DASDREC,EDWORK+3    COPY RECORD NUMBER\n         IC    R1,CNTKEYL          KEY LENGTH FROM 'COUNT'\n         CVD   R1,COMMDWRD         CONVERT TO DECIMAL\n         MVC   EDWORK,EDWORD3      INITIALIZE WITH EDIT WORD\n         ED    EDWORK,COMMDWRD+5   EDIT KEY LENGTH\n         MVC   DASDKL,EDWORK+3     COPY KEY LENGTH\n         ICM   R1,3,CNTHEAD        HEAD NUMBER FROM 'COUNT'\n         CVD   R1,COMMDWRD         CONVERT TO DECIMAL\n         MVC   EDWORK,EDWORD2      INTIALIZE WITH EDIT WORD\n         ED    EDWORK,COMMDWRD+5   EDIT HEAD NUMBER\n         MVC   DASDHEAD,EDWORK+4   COPY RECORD NUMBER\n         ICM   R1,3,CNTCYL         CYLINDER NUMBER FROM 'COUNT'\n         CVD   R1,COMMDWRD         CONVERT TO DECIMAL\n         MVC   EDWORK,EDWORD2      INTIALIZE WITH EDIT WORD\n         ED    EDWORK,COMMDWRD+5   EDIT CYLINDER NUMBER\n         MVC   DASDCYL,EDWORK+2    COPY CYLINDER NUMBER\n         ICM   R1,3,CNTDATAL       DATA LENGTH FROM 'COUNT'\n         CVD   R1,COMMDWRD         CONVERT TO DECIMAL\n         MVC   EDWORK,EDWORD3      INTIALIZE WITH EDIT WORD\n         ED    EDWORK,COMMDWRD+5   EDIT DATA LENGTH\n         MVC   DASDDL,EDWORK+1     COPY DATA LENGTH\n         MVI   PRTCC,C'-'          TRIPLE SPACE\n         MVC   PRTAREA(DASDMSGL),DASDMSG\n         BAL   R8,PRT0100          PRINT DASD ADDRESS MESSAGE\n         BAL   R8,PRT0100          PRINT BLANK LINE\n         SR    R4,R4               CLEAR REGISTER\n         ICM   R4,1,CNTKEYL        PICK UP KEY LENGTH\n         BZ    PRT0020             NO KEY\n         L     R3,COMMKEY          KEY'S ADDRESS\n         MVC   PRTAREA1,KEYHEAD    MOVE 'KEY' TO LINE HEADING1 AREA\n         MVC   PRTAREA2,COMMBLKS   CLEAR LINE HEADING 2\n         ZAP   PRT100,P0           RESET SCALE OFFSET COUNTER\n         BAL   R9,PRT0040          PRINT KEY\n         BAL   R8,PRT0100          PRINT BLANK LINE\nPRT0020  DS    0H\n         TM    COMMIFLG,$DEBLOCK   IS INPUT DEBLOCKING RECORDS?\n         BO    PRT0030             YES.. PRINT LOGICAL RECORD\n         L     R3,COMMCRCD         DATA'S ADDRESS\n         SR    R4,R4               CLEAR REGISTER\n         ICM   R4,3,CNTDATAL       PICK UP DATA LENGTH\n         BZ    PRT9900             ALL DONE\n         MVC   PRTAREA1,DATAHEAD   MOVE 'DATA' TO LINE HEADING 1 AREA\n         MVC   PRTAREA2,COMMBLKS   CLEAR LINE HEADING 2\n         ZAP   PRT100,P0           RESET SCALE OFFSET COUNTER\n         BAL   R9,PRT0040          PRINT DATA\n         B     PRT9900             AND EXIT\nPRT0030  DS    0H\n         L     R3,COMMCRCD         DATA'S ADDRESS\n         SR    R4,R4               CLEAR REGISTER\n         ICM   R4,3,COMMCRCL       CURRENT RECORD LENGTH\n         MVC   PRTAREA,PRTAREA-1   INITIALIZE PRINT LINE\n         MVC   PRTAREA1,=C'RECORD SIZE '\n         CVD   R4,COMMDWRD         CONVERT RECORD LENGTH TO DECIMAL\n         MVC   PRTAREA2,EDWORD1    INITIALIZE WITH EDIT WORD\n         ED    PRTAREA2,COMMDWRD+5 EDIT RECORD LENGTH\n         ZAP   PRT100,P0           RESET SCALE OFFSET COUNTER\n         BAL   R9,PRT0040          PRINT DATA\n         B     PRT9900             AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        DATA PRINTING.  AT ENTRY THIS CODE EXPECTS R3 TO BE THE      *\n*        DATA ADDRESS, R4 TO BE THE DATA LENGTH, AND R9 TO BE THE     *\n*        RETURN ADDRESS.                                              *\n*                                                                     *\n*        R1, R2, R3, R4, R14, AND R15 WILL BE MODIFIED                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0040  DS    0H\n         DITTRACE ID=PRT0040,      TRACE POINT                         +\n               RDATA1=R3,          .. DATA ADDRESS                     +\n               RDATA2=R4           .. DATA LENGTH\n         LR    R2,R4               COPY RECORD LENGTH\n         CH    R2,H100             TOO MUCH FOR 1 LINE?\n         BNH   PRT0050             NO, CONTINUE\n         LH    R2,H100             LIMIT LENGTH TO 100\nPRT0050  DS    0H\n         DITTRACE ID=PRT0050,      TRACE POINT                         +\n               RDATA1=R11,         .. COMM AREA ADDRESS                +\n               RDATA2=R12          .. BASE ADDRESS\n         BCTR  R2,0                ADJUST FOR EXECUTES\n         EX    R2,CHARMVC          MOVE DATA TO PRINT AREA 3\n         EX    R2,PRTTR            TRANSLATE OUT UNPRINTABLES\n         BAL   R8,PRT0100          PRINT\n         TM    COMMOFLG,$HEX       PRINTING IN HEX?\n         BNO   PRT0060             NO\n         EX    R2,CHARMVC          MOVE DATA TO PRINT AREA 3\n         EX    R2,ZONEMVC          PREPARE FOR ZONES\n         EX    R2,HEXCHAR          TRANSLATE HEX TO CHARACTER\n         BAL   R8,PRT0100          PRINT\n         EX    R2,CHARMVC          MOVE DATA TO PRINT AREA 3\n         EX    R2,NUMRMVC          PREPARE FOR NUMERICS\n         EX    R2,HEXCHAR          TRANSLATE HEX TO CHARACTER\n         BAL   R8,PRT0100          PRINT\n         EX    R2,SCALEMVC         MOVE SCALE\n         MVC   PRTPR100,EDWORD4    INITIALIZE WITH EDIT WORD\n         ED    PRTPR100,PRT100     EDIT SCALE OFFSET\n         BAL   R8,PRT0100          PRINT\n         BAL   R8,PRT0100          PRINT BLANK LINE\n         AP    PRT100,P10          ADD TO SCALE OFFSET\nPRT0060  DS    0H\n         LA    R2,1(R2)            RESET LENGTH\n         AR    R3,R2               BRING INPUT ADDRESS FORWARD\n         SR    R4,R2               COMPUTE LENGTH REMAINING\n         BNZ   PRT0040             REPEAT 'TILL ALL LENGTH DONE\n         BR    R9                  RETURN\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0070  DS    0H\n         DITTRACE ID=EOF\n         B     PRT9900             AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0100  DS    0H\n         MVI   PRTCMMD,$PRTDATA    INSERT PRINT COMMAND\n         MVC   PRTDATA,PRTAREA     MOVE DATA TO PRINT\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         MVC   PRTAREA,PRTAREA-1   INITIALIZE PRINT LINE\n         BR    R8                  RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT9900  DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXECUTED INSTRUCTIONS                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCHARMVC  MVC   PRTAREA3(0),0(R3)   MOVE DATA TO PRINT AREA\nPRTTR    TR    PRTAREA3(0),CHARTBL TRANSLATE OUT UNPRINTABLES\nZONEMVC  MVN   PRTAREA3(0),HEX0000 PREPARE FOR ZONE TRANSLATE\nNUMRMVC  MVZ   PRTAREA3(0),HEX0000 PREPARE FOR NUMERIC TRANSLATE\nHEXCHAR  TR    PRTAREA3(0),HEXTBL  TRANSLATE HEX TO CHARACTER\nSCALEMVC MVC   PRTAREA3(0),SCALE   MOVE SCALE\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINTABLE CHARACTERS TABLE                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\n*                   0 1 2 3 4 5 6 7 8 9 A B C D E F                     DUT09680\nCHARTBL  DC    XL16'40404040404040404040404040404040'     X'00' - X'0F' DUT09690\n         DC    XL16'40404040404040404040404040404040'     X'10' - X'1F' DUT09700\n         DC    XL16'40404040404040404040404040404040'     X'20' - X'2F' DUT09710\n         DC    XL16'40404040404040404040404040404040'     X'30' - X'3F' DUT09720\n         DC    XL16'404040404040404040404A4B4C4D4E4F'     X'40' - X'4F' DUT09730\n         DC    XL16'504040404040404040405A5B5C5D5E5F'     X'50' - X'5F' DUT09740\n         DC    XL16'60614040404040404040406B6C6D6E6F'     X'60' - X'6F' DUT09750\n         DC    XL16'404040404040404040407A7B7C7D7E7F'     X'70' - X'7F' DUT09760\n         DC    XL16'40404040404040404040408B8C8D8E8F'     X'80' - X'8F' DUT09770\n         DC    XL16'40404040404040404040409B9C9D9E9F'     X'90' - X'9F' DUT09780\n         DC    XL16'4040404040404040404040ABACADAEAF'     X'A0' - X'AF' DUT09790\n         DC    XL16'4040404040404040404040BBBCBDBEBF'     X'B0' - X'BF' DUT09800\n         DC    XL16'40C1C2C3C4C5C6C7C8C9404040404040'     X'C0' - X'CF' DUT09810\n         DC    XL16'40D1D2D3D4D5D6D7D8D9404040404040'     X'D0' - X'DF' DUT09820\n         DC    XL16'4040E2E3E4E5E6E7E8E9404040404040'     X'E0' - X'EF' DUT09830\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'     X'F0' - X'FF' DUT09840\n*                                                                       DUT09680\nHEXTBL   DC    CL16'0123456789ABCDEF'                    X'00' - X'0F'  DUT09690\n         DC    CL16'1               '                    X'10' - X'1F'  DUT09690\n         DC    CL16'2               '                    X'20' - X'2F'  DUT09690\n         DC    CL16'3               '                    X'30' - X'3F'  DUT09690\n         DC    CL16'4               '                    X'40' - X'4F'  DUT09690\n         DC    CL16'5               '                    X'50' - X'5F'  DUT09690\n         DC    CL16'6               '                    X'60' - X'6F'  DUT09690\n         DC    CL16'7               '                    X'70' - X'7F'  DUT09690\n         DC    CL16'8               '                    X'80' - X'8F'  DUT09690\n         DC    CL16'9               '                    X'90' - X'9F'  DUT09690\n         DC    CL16'A               '                    X'A0' - X'AF'  DUT09690\n         DC    CL16'B               '                    X'B0' - X'BF'  DUT09690\n         DC    CL16'C               '                    X'C0' - X'CF'  DUT09690\n         DC    CL16'D               '                    X'D0' - X'DF'  DUT09690\n         DC    CL16'E               '                    X'E0' - X'EF'  DUT09690\n         DC    CL16'F               '                    X'F0' - X'FF'  DUT09690\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE INTERCOMMUNICATION                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE WORK AREAS                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTSAVE  DC    18F'0'              REGISTER SAVE AREA\nH100     DC    H'100'              CONSTANT\nPRTFLAG  DC    X'00'               FLAGS/SWITCHES\nHEX0000  DC    100X'00'\nEDWORD1  DC    X'4020206B202120'   CONSTANT\nEDWORD2  DC    X'F02020202020'     CONSTANT\nEDWORD3  DC    X'402020202120'     CONSTANT\nEDWORD4  DC    X'402020202020'     CONSTANT\nPRT100   DC    PL3'0'              SCALE OFFSET COUNTER\nP0       DC    P'0'                CONSTANT\nP10      DC    P'10'               CONSTANT\nPRTDASD  DC    C'DASD'             CONSTANT\nKEYHEAD  DC    CL12'KEY'\nDATAHEAD DC    CL12'DATA'\nEDWORK   DC    CL6' '\n         DC    C' '\nPRTAREA  DS    0CL121              PRINT LINE\nPRTAREA1 DC    CL12' '             COMMENT AREA\nPRTAREA2 DC    CL7' '              RECORD SIZE AREA\n         DC    C' '                SPACE\n         ORG   *-6\nPRTPR100 DC    CL6' '\nPRTAREA3 DC    100C' '\nDASDMSG  DS    0C\n         DC    C' VOLSER '\nDASDVOL  DC    CL6' '\n         DC    C'   DASD ADDRESS:'\nDASDCYL  DC    CL4' '\n         DC    C'-'\nDASDHEAD DC    CL2' '\n         DC    C'-'\nDASDREC  DC    CL3' '\n         DC    C'   KEY LENGTH='\nDASDKL   DC    CL4' '\n         DC    C'   DATA LENGTH='\nDASDDL   DC    CL5' '\nDASDMSGL EQU   *-DASDMSG\nSCALE    DC    C'1...+...10....+...20....+...30....+...40....+...50....+\n               +...60....+...70....+...80....+...90....+..100'\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC BLOCK DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK TYPE=SHORT\n         END  DITTPRO1\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTPRT": {"ttr": 2310, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE                                           *\n*                                                                     *\n*      THIS MODULE DOES ALL PRINTING FOR DITTO... ALL COMMANDS,       *\n*      MESSAGES, AND SYSOUT OUTPUT IS DONE BY THIS MODULE.  ANY       *\n*      MODULE EXCEPT THE TRACE ROUTINE IN 'DITTCOMM' MAY LINK TO      *\n*      THIS MODULE.                                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTPRT  DITTPRFX PRTSAVE,'PRINTER MODULE'\n         USING DITTCOMM,R11        ADDRESS IT\n         LR    R10,R1              SAVE INPUT PARAMETER ADDRESS\n         USING PRTBLOK,R10         SPECIFY BASE\n         DITTRACE ID=ENTRY,        TRACE ENTRY                         +\n               DATA1=PRTFLAG       .. CAPTURE FLAG STATUS\n         TM    COMMFLAG,$COMMEOJ   END OF JOB IN PROGRESS??\n         BNO   PRT0010             NO\n         TM    PRTFLAG,$PRTOPEN    IS PRINT FILE OPEN??\n         BNO   PRT9900             NO, EXIT\n         DITTRACE ID=CLOSE         TRACE PRINTER CLOSES\n         CLOSE PRINTER             OTHERWISE CLOSE PRINT FILE\n         NI    PRTFLAG,255-$PRTOPEN TURN OFF OPEN FLAG\n         B     PRT9900             EXIT THIS MODULE\nPRT0010  DS    0H\n         TM    PRTFLAG,$PRTOPEN    IS PRINT FILE OPEN??\n         BO    PRT0020             YES, BYPASS OPEN\n         DITTRACE ID=OPEN          TRACE PRINTER OPENS\n         OPEN  (PRINTER,OUTPUT)    OPEN PRINTER FILE\n         OI    PRTFLAG,$PRTOPEN    INDICATE PRINT FILE IS OPEN\nPRT0020  DS    0H\n         CLI   PRTCMMD,$PRTHEAD    FORCED HEADING??\n         BE    PRT0080             YES\n         CLI   PRTCMMD,$PRTDATA    PRINTING DATA?\n         BE    PRT0040             YES..\n* ------------------------------------------------------------------- *\n*                                                                     *\n*         PRINTING A COMMAND                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DITTRACE ID=PRINTCMD      PRINTING A COMMAND OR COMMAND MSG\n         TM    PRTFLAG,$PRTDATA    WAS DATA PRINTED LAST TIME?\n         BNO   PRT0030             NO\n         BAL   R9,PRT0090          PRINT A NEW HEADING\nPRT0030  DS    0H\n         NI    PRTFLAG,255-$PRTDATA    TURN DATA FLAG OFF\n         OI    PRTFLAG,$PRTCMD     TURN COMMAND FLAG ON\n         BAL   R9,PRT0060          PRINT COMMAND\n         B     PRT9900             AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*         PRINTING DATA                                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0040  DS    0H\n         DITTRACE ID=PRTDATA\n         TM    PRTFLAG,$PRTCMD     WAS A COMMAND PRINTED LAST TIME?\n         BNO   PRT0050             NO\n         BAL   R9,PRT0090          PRINT NEW HEADING\nPRT0050  DS    0H\n         NI    PRTFLAG,255-$PRTCMD TURN OFF COMMAND PRINTED\n         OI    PRTFLAG,$PRTDATA    TURN ON DATA PRINTED\n         BAL   R9,PRT0060          PRINT DATA\n         B     PRT9900             AND EXIT\nPRT0060  DS    0H\n         PUT   PRINTER,PRTCC       PRINT THE REQUESTED LINE\n         AP    COMMLINE,COMMP1     ADD 1 TO LINE COUNT\n         CLI   PRTCC,C' '          SINGLE SPACE??\n         BE    PRT0070             YES\n         AP    COMMLINE,COMMP1     ADD 1 TO LINE COUNT\n         CLI   PRTCC,C'0'          DOUBLE SPACE??\n         BE    PRT0070             YES\n         AP    COMMLINE,COMMP1     ADD 1 TO LINE COUNT\nPRT0070  DS    0H\n         MVI   PRTCC,C' '          CLEAR CARRIAGE CONTROL\n         MVC   PRTDATA,PRTCC       CLEAR PRINT DATA\n         CP    COMMLINE,COMMP60    IS PAGE FULL??\n         BLR   R9                  NO, EXIT\n         DITTRACE ID=PAGEFULL      PAGE FULL\n         B     PRT0090\nPRT0080  DS    0H\n         DITTRACE ID=FORCEDHD      FORCED HEADING\n         BAL   R9,PRT0090          PRINT HEADING\n         B     PRT9900             AND EXIT\nPRT0090  DS    0H\n         DITTRACE ID=HEADING\n         AP    PRTPAGE,COMMP1      ADD 1 TO PAGE COUNT\n         MVC   PRPAGE,=X'4020206B202021'\n         ED    PRPAGE,PRTPAGE      EDIT PAGE NUMBER\n         PUT   PRINTER,DITTHEAD    PRINT HEADING\n         ZAP   COMMLINE,COMMP1     RESET LINE COUNT\n         AP    COMMLINE,COMMP1     RESET LINE COUNT\n         BR    R9                  PRINTING DONE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT9900  DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE WORK AREAS                                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTSAVE  DC    18F'0'              REGISTER SAVE AREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*   THE BITS IN PRTFLAG ALSO HAVE DEFINITIONS IN THE 'PRTCMMD'        *\n*   FIELD OF THE 'PRTBLOK' DSECT ($PRTCMD AND $PRTDATA).  IF NEW      *\n*   FLAGS ARE DEFINED IN PRTFLAG, YOU MUST USE BITS OTHER THAN THE    *\n*   ONES USED FOR $PRTCMD AND $PRTDATA.                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTFLAG  DC    X'00'               FLAGS/SWITCHES\n$PRTOPEN EQU   X'80'               .. FILE OPEN\nPRTPAGE  DC    PL3'0'              PAGE COUNTER\nDITTHEAD DC    C'1'                CARRIAGE CONTROL\n         DC    CL108'            OS/DITTO'\n         DC    C'PAGE '\nPRPAGE   DC    CL7' '              PAGE NUMBER\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE PRINTER DCB                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRINTER  DCB   DDNAME=SYSPRINT,                                        +\n               DSORG=PS,                                               +\n               RECFM=FBA,                                              +\n               LRECL=121,                                              +\n               MACRF=PM\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE INTERCOMMUNICATION                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK TYPE=DSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         END  DITTPRT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTSTAE": {"ttr": 2315, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              STAE EXIT                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         MACRO\n&NAME    MSG   &A,&B,&C,&D\n         LCLC  &TEXT\n         AIF   (T'&A EQ 'O').NOTEXT\n&TEXT    SETC  '&A'\n         AIF   (T'&B EQ 'O').M0010\n&TEXT    SETC  '&TEXT.,&B'\n         AIF   (T'&C EQ 'O').M0010\n&TEXT    SETC  '&TEXT.,&C'\n         AIF   (T'&D EQ 'O').M0010\n&TEXT    SETC  '&TEXT.,&D'\n.M0010   ANOP\n&NAME    DC    AL2(&NAME.E-&NAME)\n         DC    AL2(0)\n         DC    &TEXT\n&NAME.E  EQU   *\n         MEXIT\n.NOTEXT  MNOTE 12,'NO TEXT'\n         MEND\nDITTSTAE DITTPRFX STAESAVE,'STAE EXIT'\n         L     R11,VCOMM                SET COMM AREA BASE\n         USING DITTCOMM,R11             DEFINE COMM AREA BASE\n         MVI   STAEFLAG,0               RESET ALL STAE FLAGS\n* ------------------------------------------------------------------- *\n*              DETERMINE ABEND CODE                                   *\n* ------------------------------------------------------------------- *\n         CH    R0,H12                   SDWA PROVIDED?\n         BNE   STAE0010                 YES\n         LR    R15,R1                   COPY ABEND CODE\n         SRL   R1,12                    SHIFT OUT USER CODE IF PRESENT\n         STCM  R1,3,STAESCDE            SAVE SYSTEM ABEND CODE\n         STCM  R15,3,STAEUCDE           SAVE USER ABEND CODE\n         NI    STAEUCDE,X'0F'           TURN OFF ANY SYSTEM CODE BITS\n         B     STAE0020                 CHECK FOR DITTDUMP DD\nSTAE0010 DS    0H\n         OI    STAEFLAG,$SDWA           SDWA IS PRESENT\n         LR    R3,R1                    COPY SDWA ADDRESS\n         USING SDWA,R3                  DEFINE SDWA ADDRESSABILITY\n         SR    R15,R15                  CLEAR REGISTER\n         ICM   R15,3,SDWACMPC           SYSTEM CODE\n         SRL   R15,4                    SHIFT OUT USER BITS\n         STCM  R15,3,STAESCDE           SAVE SYSTEM CODE\n         MVC   STAEUCDE,SDWACMPC+1      COPY USER CODE\n         NI    STAEUCDE,X'0F'           TURN OFF ANY SYSTEM CODE BITS\n* ------------------------------------------------------------------- *\n*              DETERMINE IF DITTDUMP DD STATEMENT IS PRESENT          *\n* ------------------------------------------------------------------- *\nSTAE0020 DS    0H\n         EXTRACT TIOTADDR,FIELDS=TIOT   REQUEST TIOT ADDRESS\n         L     R2,TIOTADDR              OUR TIOT'S ADDRESS\n         USING TIOT1,R2                 DEFINE TIOT ADDRESSABILITY\n         SR    R1,R1                    CLEAR FOR TIOT ENTRY LENGTH\nSTAE0030 DS    0H\n         ICM   R1,1,TIOELNGH            INSERT LENGTH OF THIS ENTRY\n         BZ    STAE0050                 DITTDUMP DOES NOT EXIST\n         CLC   TIOEDDNM,=CL8'DITTDUMP'  IS THIS THE DITTDUMP DD?\n         BE    STAE0040                 YES\n         AR    R2,R1                    ADDRESS OF NEXT TIOT ENTRY\n         B     STAE0030                 CHECK AGAIN\nSTAE0040 DS    0H\n         OI    STAEFLAG,$DUMPDD         DITTDUMP DD IS PRESENT\n         OPEN  (DITTDUMP,OUTPUT)        OPEN STAE OUTPUT\n         OI    STAEFLAG,$PRTOPEN        INDICATE PRINT IS OPEN\n         BAL   R10,HEAD0000             PRINT STAE HEADING\nSTAE0050 DS    0H\n         OC    STAEUCDE,STAEUCDE        USER CODE?\n         BNZ   STAE0060                 YES\n         MVC   PRABTYPE,TYPESYS         SYSTEM ABEND\n         UNPK  PRABCODE(5),STAESCDE(3)  UNPACK ABEND CODE\n         MVZ   PRABCODE,HEX0000         PREPARE FOR TRANSLATE\n         TR    PRABCODE,HEXCHAR         TRANSLATE TO PRINTABLE\n         MVI   PRABCODE,C' '            BLANK OUT FIRST DIGIT\n         MVI   PRABCODE+4,C' '          RESTORE THE BLANK\n         B     STAE0070                 PRINT ABEND CODE MESSAGE\nSTAE0060 DS    0H\n         MVC   PRABTYPE,TYPEUSER        SYSTEM ABEND\n         LH    R1,STAEUCDE              USER CODE\n         CVD   R1,STAEDWRD              CONVERT TO DECIMAL\n         UNPK  PRABCODE(5),STAEDWRD+6(3)\n         MVI   PRABCODE+3,C' '          RESTORE THE BLANK\n         MVI   PRABCODE+4,C' '          RESTORE THE BLANK\nSTAE0070 DS    0H\n         LA    R15,STAEM01\n         BAL   R10,PRT0000        PRINT ABEND MESSAGE\n* ------------------------------------------------------------------- *\n*              DETERMINE MODULE IN CONTROL AT TIME OF ABEND           *\n* ------------------------------------------------------------------- *\n         TM    STAEFLAG,$SDWA          SDWA PRESENT?\n         BNO   STAE0120                NO\n         CLC   SDWANXT1,ACOMM          ADDRESS TOO LOW?\n         BL    STAE0130                YES.. NOT IN DITTO\n         CLC   SDWANXT1,AXXXX          ADDRESS TOO HIGH?\n         BH    STAE0130                YES.. NOT IN DITTO\n         LA    R1,AXXXX-4              LAST MODULE ID/ADDRESS\n         B     STAE0090                ENTER LOOP\nSTAE0080 DS    0H\n         CLC   ISP,0(R1)               IS THIS THE ISP MODULE ENTRY?\n         BE    STAE0090                YES.. IGNORE IT\n         CLC   SDWANXT1,4(R1)          ADDRESS WITHIN THIS CSECT?\n         BH    STAE0100                YES\n         CLC   0(R1),ACOMM-4           COMMON AREA JUST CHECKED?\n         BE    STAE0110                YES.. SHOULD BE A LOGIC ERROR\nSTAE0090 DS    0H\n         SH    R1,H8                   PREVIOUS MODULE ID/ADDRESS\n         B     STAE0080                CONTINUE THE SEARCH\nSTAE0100 DS    0H\n         MVC   PRCSECT,0(R1)           MOVE CSECT NAME\n         L     R1,4(R1)                CSECT NAME\n         L     R2,SDWANXT1             ABEND POINT\n         SR    R2,R1                   DISPLACEMENT INTO ABENDING CSECT\n         ST    R2,STAEDWRD             SAVE DISPLACEMENT\n         UNPK  PRDISP(9),STAEDWRD(5)\n         MVZ   PRDISP,HEX0000          PREPARE FOR TRANSLATE\n         TR    PRDISP,HEXCHAR          TRANSLATE TO PRINTABLE\n         MVI   PRDISP+8,C' '           RESTORE THE BLANK\n         LA    R15,STAEM02\n         BAL   R10,PRT0000             PRINT CSECT/DISP MESSAGE\n         B     STAE0200                PROCESS COMMON AREA\nSTAE0110 DS    0H\n         LA    R15,STAEM03\n         BAL   R10,PRT0000             PRINT\n         B     STAE0200                PROCESS COMMON AREA\nSTAE0120 DS    0H\n         LA    R15,STAEM04\n         BAL   R10,PRT0000             PRINT\n         B     STAE0200                PROCESS COMMON AREA\nSTAE0130 DS    0H\n         LA    R15,STAEM05\n         BAL   R10,PRT0000        PRINT\n* ------------------------------------------------------------------- *\n*              DUMP COMMON AREA                                       *\n* ------------------------------------------------------------------- *\nSTAE0200 DS    0H\n         LA    R15,STAEM07             *-------------*\n         BAL   R10,PRT0000             PRINT\n         LA    R15,STAEM08             *             *\n         BAL   R10,PRT0000             PRINT\n         LA    R15,STAEM19             * COMMON AREA *\n         BAL   R10,PRT0000             PRINT\n         LA    R15,STAEM08             *             *\n         BAL   R10,PRT0000             PRINT\n         LA    R15,STAEM07             *-------------*\n         BAL   R10,PRT0000             PRINT\n         LA    R15,STAEM20\n         BAL   R10,PRT0000             PRINT\n         LR    R2,R11                  SET COMMON AREA ADDRESS\n         LA    R3,COMMTR00-DITTCOMM    COMMON AREA LENGTH\n         BAL   R9,STAE0900             DUMP COMMON AREA\n* ------------------------------------------------------------------- *\n*              DUMP DYNAMIC BLOCKS                                    *\n* ------------------------------------------------------------------- *\n         ICM   R8,15,COMMDYHD          FIRST DYNAMIC BLOCK\n         BNZ   STAE0210                PROCESS DYNAMIC BLOCKS\n         LA    R15,STAEM06\n         BAL   R10,PRT0000             NO DYNAMIC BLOCKS\n         B     STAE0400                PROCESS TRACE TABLE\nSTAE0210 DS    0H\n         BAL   R10,HEAD0000            FORCE HEADING\nSTAE0220 DS    0H\n         ST    R8,STAEDWRD             SAVE DYNAMIC BLOCK'S ADDRESS\n         USING DYNBLOK,R8\n         UNPK  PRDYNADR(9),STAEDWRD(5) UNPACK DYNAMIC BLOCK'S ADDRESS\n         MVZ   PRDYNADR,HEX0000        PREPARE FOR TRANSLATE\n         TR    PRDYNADR,HEXCHAR        TRANSLATE ADDRESS TO PRINTABLE\n         MVI   PRDYNADR+8,C' '         RESTORE THE BLANK\n         LA    R15,STAEM07             *---------------*\n         BAL   R10,PRT0000             PRINT\n         LA    R15,STAEM08             *               *\n         BAL   R10,PRT0000             PRINT\n         LA    R15,STAEM09             * DYNAMIC BLOCK *\n         BAL   R10,PRT0000             PRINT\n         LA    R15,STAEM08             *               *\n         BAL   R10,PRT0000             PRINT\n         LA    R15,STAEM07             *---------------*\n         BAL   R10,PRT0000             PRINT\n         LA    R15,STAEM20\n         BAL   R10,PRT0000             PRINT\n         UNPK  PRDYNNXT(9),DYNNEXT(5)\n         MVZ   PRDYNNXT,HEX0000        PREPARE FOR TRANSLATE\n         TR    PRDYNNXT,HEXCHAR        TRANSLATE TO PRINTABLE\n         MVI   PRDYNNXT+8,C' '         RESTORE BLANK\n         UNPK  PRDYNPRV(9),DYNPREV(5)\n         MVZ   PRDYNPRV,HEX0000        PREPARE FOR TRANSLATE\n         TR    PRDYNPRV,HEXCHAR        TRANSLATE TO PRINTABLE\n         MVI   PRDYNPRV+8,C' '         RESTORE BLANK\n         UNPK  PRDYNCUU(5),DYNCUU(3)\n         MVZ   PRDYNCUU,HEX0000        PREPARE FOR TRANSLATE\n         TR    PRDYNCUU,HEXCHAR        TRANSLATE TO PRINTABLE\n         MVI   PRDYNCUU,C' '           RESTORE BLANK\n         MVI   PRDYNCUU+4,C' '         RESTORE BLANK\n         MVC   PRDYNDDN,DYNDDNAM       COPY DDNAME\n         MVC   PRDYNDVL,DYNVOL         COPY DISK VOLSER\n         UNPK  PRDYNECB(9),DYNECB(5)\n         MVZ   PRDYNECB,HEX0000        PREPARE FOR TRANSLATE\n         TR    PRDYNECB,HEXCHAR        TRANSLATE TO PRINTABLE\n         MVI   PRDYNECB+8,C' '         RESTORE BLANK\n         LA    R15,STAEM10\n         BAL   R10,PRT0000             PRINT\n         LR    R2,R8                   COPY DYNBLOCK ADDRESS\n         LA    R3,DYNBLOKL             DYNBLOCK LENGTH\n         BAL   R9,STAE0900             DUMP DYNBLOCK\n         ICM   R8,15,DYNNEXT           NEXT ON CHAIN\n         BNZ   STAE0220                PROCESS ALL ON CHAIN\n* ------------------------------------------------------------------- *\n*              'CLOSE' DCB'S IN DYNAMIC BLOCKS                        *\n* ------------------------------------------------------------------- *\nSTAE0300 DS    0H\n         ICM   R8,15,COMMDYHD          FIRST DYNAMIC BLOCK\n         CLI   COMMENV,$ENVTSO         TSO ENVIRONMENT?\n         BNE   STAE0310                NO\n         SR    R1,R1                   'TURN ON' REQUEST\n         L     R15,AAUTH               DITTAUTH ENTRY POINT\n         BALR  R14,R15                 LINK TO DITTAUTH\nSTAE0310 DS    0H\n         MODESET MODE=SUP,KEY=ZERO     ENTER SUPERVISOR STATE, KEY ZERO\nSTAE0320 DS    0H\n         LA    R4,DYNDCB               DCB FOR THIS UNIT\n         USING IHADCB,R4               DEFINE DSECT BASE\n         DEBCHK (R4),                  DEBCHK (REFERENCE DCB NOT DEB)  +\n               TYPE=DELETE             .. DELETE THE DEB FROM DEBTABLE\n         LTR   R15,R15                 DEBCHK SUCCESSFUL?\n         BNZ   STAE0370                NO.. TRY CLEAN-UP FOR NEXT BLOCK\nSTAE0330 DS    0H\n         L     R7,DYNDEBA              DEB ADDRESS IN THIS DYN BLOCK\n         USING DEB,R7                  DEFINE DEB BASE\n         LA    R2,DEBBASIC             BASIC PORTION OF DEB\n         USING PSA,R0                  DEFINE PSA BASE\n         L     R1,PSATNEW              CURRENT TCB ADDRESS FROM PSA\n         USING TCB,R1                  DEFINE DCB BASE\n         SR    R3,R3                   CLEAR REGISTER\n         ICM   R3,7,TCBDEB+1           1ST DEB ON DEB CHAIN\n         LA    R4,TCBDEB               ADDRESS'S ADDRESS\nSTAE0340 DS    0H\n         CR    R3,R2                   IS THIS THE CORRECT DEB?\n         BE    STAE0350                YES\n         LA    R4,DEBDEBAD-DEBBASIC(R3)   NEXT DEB ADDRESS ADDRESS\n         ICM   R3,7,DEBDEBB-DEBBASIC(R3)  NEXT DEB\n         BNZ   STAE0340                CHECK AGAIN\n         MVC   STAEM12D,DYNDDNAM       COPY DDNAME\n         LA    R15,STAEM12\n         BAL   R10,PRT0000             COULD NOT LOCATE DEB...\n         B     STAE0370                TRY CLEAN-UP FOR NEXT BLOCK\nSTAE0350 DS    0H\n         ICM   R2,7,DEBDEBB            NEXT DEB ON CHAIN\n         ICM   R2,8,0(R4)              SAVE ACCESS METHOD SECT LENGTH\n         ICM   R3,15,0(R4)             CS WILL USE ALL 4 BYTES\n         CS    R3,R2,0(R4)             REMOVE DEB FROM DEB CHAIN\n         BNE   STAE0330                SOMETHING CHANGED, TRY AGAIN\n         MVC   STAEM13D,DYNDDNAM       COPY DDNAME\n         LA    R15,STAEM13\n         BAL   R10,PRT0000             CLEAN-UP COMPLETE\n         B     STAE0370                TRY CLEAN-UP FOR NEXT BLOCK\nSTAE0360 DS    0H\n         MVC   STAEM14D,DYNDDNAM       COPY DDNAME\n         STC   R2,STAEDWRD             SAVE RETURN CODE\n         UNPK  STAEM14R(3),STAEDWRD(2)\n         MVZ   STAEM14R,HEX0000        PREPARE FOR TRANSLATE\n         TR    STAEM14R,HEXCHAR        TRANSLATE TO PRINTABLE\n         MVI   STAEM14R+2,C' '         RESTORE THE BLANK\n         LA    R15,STAEM14\n         BAL   R10,PRT0000             DEBCHK TYPE=DELETE FAILED\nSTAE0370 DS    0H\n         ICM   R8,15,DYNNEXT           NEXT DYNAMIC BLOCK\n         BNZ   STAE0320                TRY CLEAN-UP FOR THIS BLOCK\n         MODESET MODE=PROB,KEY=NZERO\n         CLI   COMMENV,$ENVTSO         TSO ENVIRONMENT?\n         BNE   STAE0380                NO\n         LA    R1,1                    'TURN OFF' REQUEST\n         L     R15,AAUTH               DITTAUTH ENTRY POINT\n         BALR  R14,R15                 LINK TO DITTAUTH\nSTAE0380 DS    0H\n* ------------------------------------------------------------------- *\n*              PROCESS TRACE TABLE                                    *\n* ------------------------------------------------------------------- *\nSTAE0400 DS    0H\n         L     R8,COMM1ST              FIRST TRACE ENTRY\n         USING TRENTRY,R8              DEFINE BASE\n         BAL   R10,HEAD0000            FORCE HEADING\nSTAE0410 DS    0H\n         LA    R15,STAEM07             *-------------*\n         BAL   R10,PRT0000             PRINT\n         LA    R15,STAEM08             *             *\n         BAL   R10,PRT0000             PRINT\n         LA    R15,STAEM15             * TRACE TABLE *\n         BAL   R10,PRT0000             PRINT\n         LA    R15,STAEM08             *             *\n         BAL   R10,PRT0000             PRINT\n         LA    R15,STAEM07             *-------------*\n         BAL   R10,PRT0000             PRINT\n         LA    R15,STAEM20\n         BAL   R10,PRT0000             PRINT\n         LA    R15,STAEM16             TRACE DATA HEADING 1\n         BAL   R10,PRT0000             PRINT\n         LA    R15,STAEM17             TRACE DATA HEADING 2\n         BAL   R10,PRT0000             PRINT\n         LA    R15,STAEM20\n         BAL   R10,PRT0000             PRINT\nSTAE0420 DS    0H\n         MVC   PRDATA1C,COMMBLKS       CLEAR DATA 1 (CHARACTER)\n         MVC   PRDATA1H,COMMBLKS       CLEAR DATA 1 (HEX)\n         MVC   PRDATA2C,COMMBLKS       CLEAR DATA 2 (CHARACTER)\n         MVC   PRDATA2H,COMMBLKS       CLEAR DATA 1 (HEX)\n         MVC   PRCURR,COMMBLKS         CLEAR CURRENT ENTRY EYECATCHER\n         MVC   PRMODNM,TRMODNM         COPY MODULE NAME\n         MVC   PRTRID,TRID             COPY TRACE ID\n         MVC   PRDATA1C,TRDATA1        COPY DATA1\n         L     R15,ATABLE2             TRANSLATE TABLE ADDRESS\n         TR    PRDATA1C,0(R15)         TRANSLATE OUT UNPRINTABLES\n         UNPK  PRDATA1H+0(9),TRDATA1+0(5)\n         UNPK  PRDATA1H+8(9),TRDATA1+4(5)\n         MVZ   PRDATA1H,HEX0000        PREPARE FOR TRANSLATE\n         TR    PRDATA1H,HEXCHAR        TRANSLATE TO PRINTABLE\n         MVI   PRDATA1H+16,C' '        RESTORE THE BLANK\n         MVC   PRDATA2C,TRDATA2        COPY DATA1\n         TR    PRDATA2C,0(R15)         TRANSLATE OUT UNPRINTABLES\n         UNPK  PRDATA2H+0(9),TRDATA2+0(5)\n         UNPK  PRDATA2H+8(9),TRDATA2+4(5)\n         MVZ   PRDATA2H,HEX0000        PREPARE FOR TRANSLATE\n         TR    PRDATA2H,HEXCHAR        TRANSLATE TO PRINTABLE\n         MVI   PRDATA2H+16,C' '        RESTORE THE BLANK\n         C     R8,COMMCURR             IS THIS THE CURRENT ENTRY?\n         BNE   STAE0430                NO\n         MVC   PRCURR,CURRENT          SET CURRENT\nSTAE0430 DS    0H\n         LA    R15,STAEM18\n         BAL   R10,PRT0000             PRINT\n         C     R8,COMMLAST             LAST ENTRY JUST PRINTED?\n         BE    STAE9900                YES.. EXIT\n         LA    R8,TRENTRYL(R8)         NEXT TRACE ENTRY\n         CP    LINECT,P0               NEW PAGE JUST STARTED?\n         BE    STAE0410                YES.. PRINT SECONDARY HEADINGS\n         B     STAE0420                PROCESS THIS ENTRY\n* ------------------------------------------------------------------- *\n*              DUMP REQUESTED STORAGE                                 *\n*                                                                     *\n*              R2 IS STORAGE ADDRESS                                  *\n*              R3 IS STORAGE LENGTH                                   *\n*              R9 IS RETURN ADDRESS                                   *\n*                                                                     *\n*              R1, R10, R14, AND R15 WILL BE ALTERED                  *\n* ------------------------------------------------------------------- *\nSTAE0900 DS    0H\n         LA    R15,STAEM11             CLEAR MESSAGE AREA\n         ST    R2,STAEDWRD             SAVE ADDRESS\n         UNPK  DUMPADDR(9),STAEDWRD(5)\n         MVZ   DUMPADDR,HEX0000        PREPARE FOR TRANSLATE\n         TR    DUMPADDR,HEXCHAR        TRANSLATE TO PRINTABLE\n         MVI   DUMPADDR+8,C' '         RESTORE THE BLANK\n         UNPK  WORKHEX1(9),00(5,R2)    UNPACK FOR HEX\n         UNPK  WORKHEX2(9),04(5,R2)    UNPACK FOR HEX\n         UNPK  WORKHEX3(9),08(5,R2)    UNPACK FOR HEX\n         UNPK  WORKHEX4(9),12(5,R2)    UNPACK FOR HEX\n         UNPK  WORKHEX5(9),16(5,R2)    UNPACK FOR HEX\n         UNPK  WORKHEX6(9),20(5,R2)    UNPACK FOR HEX\n         UNPK  WORKHEX7(9),24(5,R2)    UNPACK FOR HEX\n         UNPK  WORKHEX8(9),28(5,R2)    UNPACK FOR HEX\n         MVZ   WORKHEX1,HEX0000        PREPARE FOR TRANSLATE\n         MVZ   WORKHEX2,HEX0000        PREPARE FOR TRANSLATE\n         MVZ   WORKHEX3,HEX0000        PREPARE FOR TRANSLATE\n         MVZ   WORKHEX4,HEX0000        PREPARE FOR TRANSLATE\n         MVZ   WORKHEX5,HEX0000        PREPARE FOR TRANSLATE\n         MVZ   WORKHEX6,HEX0000        PREPARE FOR TRANSLATE\n         MVZ   WORKHEX7,HEX0000        PREPARE FOR TRANSLATE\n         MVZ   WORKHEX8,HEX0000        PREPARE FOR TRANSLATE\n         TR    WORKHEX1,HEXCHAR        TRANSLATE TO PRINTABLE\n         TR    WORKHEX2,HEXCHAR        TRANSLATE TO PRINTABLE\n         TR    WORKHEX3,HEXCHAR        TRANSLATE TO PRINTABLE\n         TR    WORKHEX4,HEXCHAR        TRANSLATE TO PRINTABLE\n         TR    WORKHEX5,HEXCHAR        TRANSLATE TO PRINTABLE\n         TR    WORKHEX6,HEXCHAR        TRANSLATE TO PRINTABLE\n         TR    WORKHEX7,HEXCHAR        TRANSLATE TO PRINTABLE\n         TR    WORKHEX8,HEXCHAR        TRANSLATE TO PRINTABLE\n         MVI   WORKHEX1+8,C' '         RESTORE BLANK\n         MVI   WORKHEX2+8,C' '         RESTORE BLANK\n         MVI   WORKHEX3+8,C' '         RESTORE BLANK\n         MVI   WORKHEX4+8,C' '         RESTORE BLANK\n         MVI   WORKHEX5+8,C' '         RESTORE BLANK\n         MVI   WORKHEX6+8,C' '         RESTORE BLANK\n         MVI   WORKHEX7+8,C' '         RESTORE BLANK\n         MVI   WORKHEX8+8,C' '         RESTORE BLANK\n         LR    R1,R3                   COPY DATA LENGTH\n         CH    R1,H32                  TOO MUCH?\n         BNH   STAE0910                NO\n         LH    R1,H32                  LIMIT TO 32\nSTAE0910 DS    0H\n         BCTR  R1,0                    RELATIVE TO ZERO\n         EX    R1,CHARMVC              MOVE CHARACTER PORTION\n         L     R15,ATABLE1             TRANSLATE TABLE ADDRESS\n         EX    R1,CHARTR               TRANSLATE OUT UNPRINTABLES\n         IC    R1,WORKLEN(R1)          CONVERT LENGTH TO OUTPUT LENGTH\n         EX    R1,WORKMVC              MOVE WORK DATA TO OUTPUT\n         LA    R15,STAEM11\n         BAL   R10,PRT0000             PRINT\n         LA    R2,32(R2)               NEXT 32 BYTES\n         SH    R3,H32                  MINUS 1 LINE'S WORTH\n         BH    STAE0900                KEEP UP THE GOOD WORK\n         BR    R9                      WE'VE DONE OUR DAMAGE\nSTAE9900 DS    0H\n         TM    STAEFLAG,$PRTOPEN       IS PRINT OPEN?\n         BNO   STAE9910                NO\n         CLOSE DITTDUMP                CLOSE PRINT DCB\nSTAE9910 DS    0H\n         LM    R14,R12,12(R13)         RESTORE CALLER'S REGISTERS\n         L     R13,4(R13)              RESTORE CALLERS SAVE AREA\n         SR    R15,R15                 REQUEST CONTINUATION OF ABEND\n         BR    R14                     EXIT TO RTM\nPRT0000  DS    0H\n         TM    STAEFLAG,$DUMPDD        WAS DUMP DD PRESENT?\n         BNOR  R10                     NO.. NO NEED TO PROCEED FURTHER\n         MVC   STAECC,4(R15)           SAVE CARRIAGE CONTROL\n         PUT   DITTDUMP,0(R15)         PRINT\n         AP    LINECT,P1               ADD TO LINE COUNT\n         CLI   STAECC,C' '             SINGLE SPACE?\n         BE    PRT0010                 YES\n         AP    LINECT,P1               ADD TO LINE COUNT\n         CLI   STAECC,C'0'             DOUBLE SPACE?\n         BE    PRT0010                 YES\n         AP    LINECT,P1               ADD TO LINE COUNT\nPRT0010  DS    0H\n         CP    LINECT,P55              TIME FOR HEADING?\n         BLR   R10                     NO\nHEAD0000 DS    0H\n         TM    STAEFLAG,$DUMPDD        WAS DUMP DD PRESENT?\n         BNOR  R10                     NO.. NO NEED TO PROCEED FURTHER\n         AP    PAGECT,P1               ADD TO PAGE COUNT\n         MVC   HEADPAGE,EDWORD1        INITIALIZE WITH EDIT WORD\n         ED    HEADPAGE,PAGECT         EDIT PAGE COUNT\n         PUT   DITTDUMP,HEADING        PRINT HEADING\n         ZAP   LINECT,P0               RESET LINE COUNT\n         BR    R10                     EXIT\n* ------------------------------------------------------------------- *\n*              EXECUTED INSTRUCTIONS                                  *\n* ------------------------------------------------------------------- *\nCHARMVC  MVC   DUMPCHAR(0),0(R2)       MOVE CHARACTER DATA TO DUMP\nCHARTR   TR    DUMPCHAR(0),TABLE1\nWORKMVC  MVC   DUMPHEX(0),DUMPWORK\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS/CONSTANTS                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nSTAESAVE DC    18F'0'              REGISTER SAVE AREA\nSTAEDWRD DC    D'0'\nVCOMM    DC    V(DITTCOMM)         COMM AREA ADDRESS\nATABLE1  DC    A(TABLE1)\nATABLE2  DC    A(TABLE2)\nTIOTADDR DC    A(0)                TIOT ADDRESS\nH8       DC    H'8'                CONSTANT\nH12      DC    H'12'               CONSTANT\nH32      DC    H'32'               CONSTANT\nSTAESCDE DC    XL2'0000'           SYSTEM ABEND CODE\nSTAEUCDE DC    XL2'0000'           USER ABEND CODE\nSTAEFLAG DC    X'00'               FLAGS\n$DUMPDD  EQU   X'80'               .. DITTDUMP DD IS PRESENT\n$SDWA    EQU   X'40'               .. SDWA IS PRESENT\n$PRTOPEN EQU   X'20'               .. PRINT DCB IS OPEN\nSTAECC   DC    C' '                SAVE CARRIAGE CONTROL\nEDWORD1  DC    X'402020202120'     CONSTANT\nTYPESYS  DC    CL06'SYSTEM'        CONSTANT\nTYPEUSER DC    CL06'USER'          CONSTANT\nISP      DC    CL4'ISP '\nCURRENT  DC    CL16'<--CURRENT ENTRY'\nHEX0000  DC    16X'00'             CONSTANT\nHEXCHAR  DC    C'0123456789ABCDEF' CONSTANT\nLINECT   DC    PL3'0'              LINE COUNT\nPAGECT   DC    PL3'0'              PAGE COUNT\nP0       DC    P'0'                CONSTANT\nP1       DC    P'1'                CONSTANT\nP55      DC    P'55'               CONSTANT\nWORKLEN  DS    0C                  DATA LENGTH       PRINT LENGTH\n         DC    AL1(01)                 01                 02\n         DC    AL1(03)                 02                 04\n         DC    AL1(05)                 03                 06\n         DC    AL1(07)                 04                 08\n*\n         DC    AL1(10)                 05                 11\n         DC    AL1(12)                 06                 13\n         DC    AL1(14)                 07                 15\n         DC    AL1(16)                 08                 17\n*\n         DC    AL1(19)                 09                 20\n         DC    AL1(21)                 10                 22\n         DC    AL1(23)                 11                 24\n         DC    AL1(25)                 12                 26\n*\n         DC    AL1(28)                 13                 29\n         DC    AL1(30)                 14                 31\n         DC    AL1(32)                 15                 33\n         DC    AL1(34)                 16                 35\n*\n         DC    AL1(39)                 17                 40\n         DC    AL1(41)                 18                 42\n         DC    AL1(43)                 19                 44\n         DC    AL1(45)                 20                 46\n*\n         DC    AL1(48)                 21                 49\n         DC    AL1(50)                 22                 51\n         DC    AL1(52)                 23                 53\n         DC    AL1(54)                 24                 55\n*\n         DC    AL1(57)                 25                 58\n         DC    AL1(59)                 26                 60\n         DC    AL1(61)                 27                 62\n         DC    AL1(63)                 28                 64\n*\n         DC    AL1(66)                 29                 67\n         DC    AL1(68)                 30                 69\n         DC    AL1(70)                 31                 71\n         DC    AL1(72)                 32                 73\nDUMPWORK DS    0C\nWORKHEX1 DC    CL08' '\n         DC    CL01' '\nWORKHEX2 DC    CL08' '\n         DC    CL01' '\nWORKHEX3 DC    CL08' '\n         DC    CL01' '\nWORKHEX4 DC    CL08' '\n         DC    CL03' '\nWORKHEX5 DC    CL08' '\n         DC    CL01' '\nWORKHEX6 DC    CL08' '\n         DC    CL01' '\nWORKHEX7 DC    CL08' '\n         DC    CL01' '\nWORKHEX8 DC    CL08' '\n         DC    CL01' '\nHEADING  DC    AL2(HEADINGL)\n         DC    AL2(0)\n         DC    CL111'1            DITTO STAE EXIT'\n         DC    C'PAGE'\nHEADPAGE DC    CL06' '\nHEADINGL EQU   *-HEADING\nSTAEM01  DC    AL2(STAEM01L)\n         DC    AL2(0)\n         DC    C'0 DITTO HAS ABENDED WITH '\nPRABTYPE DC    CL06' '\n         DC    C' CODE '\nPRABCODE DC    CL03' '\n         DC    CL02' '\nSTAEM01L EQU   *-STAEM01\nSTAEM02  DC    AL2(STAEM02L)\n         DC    AL2(0)\n         DC    C'0 ABENDING CSECT NAME: DITT'\nPRCSECT  DC    CL4' '\n         DC    C'  ABEND AT DISPLACEMENT +'\nPRDISP   DC    CL8' '\n         DC    C' '\nSTAEM02L EQU   *-STAEM02\nSTAEM03  MSG   C'0 LOGIC ERROR IN CSECT LOCATING CODE, STAE EXIT TERMIN+\n               ATING'\nSTAEM04  MSG   C'0 SDWA NOT PRESENT, UNABLE TO DETERMINE CSECT AND DISP+\n               LACEMENT'\nSTAEM05  MSG   C'0 ABEND DID NOT OCCUR WITHIN DITTO CODE'\nSTAEM06  MSG   C'0 NO DYNAMIC BLOCKS FOUND'\nSTAEM07  MSG   C' ',C'*',118C'-',C'*'\nSTAEM08  MSG   C' ',C'*',118C' ',C'*'\nSTAEM09  DC    AL2(STAEM09L)\n         DC    AL2(0)\n         DC    C' ',C'*'\n         DC    CL42' '\n         DC    CL25'DYNAMIC BLOCK AT ADDRESS '\nPRDYNADR DC    CL08' '\n         DC    CL43' '\n         DC    C'*'\nSTAEM09L EQU   *-STAEM09\nSTAEM10  DC    AL2(STAEM10L)\n         DC    AL2(0)\n         DC    C'NEXT:'\nPRDYNNXT DC    CL8' '\n         DC    C'   PREVIOUS:'\nPRDYNPRV DC    CL8' '\n         DC    C'   DEVICE CUU:'\nPRDYNCUU DC    CL3' '\n         DC    C'   DDNAME:'\nPRDYNDDN DC    CL8' '\n         DC    C'   VOLSER (IF DASD):'\nPRDYNDVL DC    CL06' '\n         DC    C'   ECB:'\nPRDYNECB DC    CL8' '\n         DC    C' '\nSTAEM10L EQU   *-STAEM10\nSTAEM11  DC    AL2(STAEM11L)\n         DC    AL2(0)\nDUMPADDR DC    CL08' '\n         DC    CL03' '\nDUMPHEX  DC    CL73' '\n         DC    CL03' '\nDUMPCHAR DC    CL32' '\nSTAEM11L EQU   *-STAEM11\nSTAEM12  DC    AL2(STAEM12L)\n         DC    AL2(0)\n         DC    C'0 CLEAN-UP UNSUCCESSFUL FOR DDNAME:'\nSTAEM12D DC    CL8' '\n         DC    C', COULD NOT LOCATE DEB'\nSTAEM12L EQU   *-STAEM12\nSTAEM13  DC    AL2(STAEM13L)\n         DC    AL2(0)\n         DC    C'0 CLEAN-UP SUCCESSFUL FOR DDNAME:'\nSTAEM13D DC    CL8' '\nSTAEM13L EQU   *-STAEM13\nSTAEM14  DC    AL2(STAEM14L)\n         DC    AL2(0)\n         DC    C'0 CLEAN-UP UNSUCCESSFUL FOR DDNAME:'\nSTAEM14D DC    CL8' '\n         DC    C', DEBCHK TYPE=DELETE FAILED, RC='\nSTAEM14R DC    CL02' '\n         DC    C' '\nSTAEM14L EQU   *-STAEM14\nSTAEM15  DC    AL2(STAEM15L)\n         DC    AL2(0)\n         DC    C' '\n         DC    CL01'*'\n         DC    CL54' '\n         DC    CL11'TRACE TABLE'\n         DC    CL53' '\n         DC    CL01'*'\nSTAEM15L EQU   *-STAEM15\nSTAEM16  DC    AL2(STAEM16L)\n         DC    AL2(0)\n         DC    C' '\n         DC    CL08' MODULE '\n         DC    CL04' '\n         DC    CL08'TRACE ID'\n         DC    CL04' '\n         DC    CL25'*---- TRACE DATA 1 -----*'\n         DC    CL04' '\n         DC    CL25'*---- TRACE DATA 2 -----*'\nSTAEM16L EQU   *-STAEM16\nSTAEM17  DC    AL2(STAEM17L)\n         DC    AL2(0)\n         DC    C' '\n         DC    CL24' '\n         DC    CL25'  CHAR         HEX       '\n         DC    CL04' '\n         DC    CL25'  CHAR         HEX       '\nSTAEM17L EQU   *-STAEM17\nSTAEM18  DC    AL2(STAEM18L)\n         DC    AL2(0)\n         DC    C' '\nPRMODNM  DC    CL08' '            MODULE NAME\n         DC    CL04' '\nPRTRID   DC    CL08' '            TRACE ID\n         DC    CL04' '\nPRDATA1C DC    CL08' '            TRACE DATA1 IN CHARACTER\n         DC    CL01' '\nPRDATA1H DC    CL16' '            TRACE DATA1 IN HEX\n         DC    CL04' '\nPRDATA2C DC    CL08' '            TRACE DATA2 IN CHARACTER\n         DC    CL01' '\nPRDATA2H DC    CL16' '            TRACE DATA2 IN HEX\n         DC    CL01' '\nPRCURR   DC    CL16' '            CURRENT ENTRY EYECATCHER\nSTAEM18L EQU   *-STAEM18\nSTAEM19  DC    AL2(STAEM19L)\n         DC    AL2(0)\n         DC    C' '\n         DC    CL01'*'\n         DC    CL54' '\n         DC    CL11'COMMON AREA'\n         DC    CL53' '\n         DC    CL01'*'\nSTAEM19L EQU   *-STAEM19\nSTAEM20  MSG   C' '\nDITTDUMP DCB   DSORG=PS,          STAE EXIT PRINT DCB                  +\n               DDNAME=DITTDUMP,   .. DDNAME                            +\n               LRECL=125,         .. RECORD SIZE                       +\n               BLKSIZE=1632,      .. BLOCK SIZE                        +\n               RECFM=VBA,         .. RECORD FORMAT                     +\n               MACRF=PM           .. MACRO FORMAT\n         LTORG\nTABLE1   DS    0C   0 1 2 3 4 5 6 7 8 9 A B C D E F\n         DC    XL16'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'  X'00'-X'0F'\n         DC    XL16'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'  X'10'-X'1F'\n         DC    XL16'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'  X'20'-X'2F'\n         DC    XL16'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'  X'30'-X'3F'\n         DC    XL16'404B4B4B4B4B4B4B4B4B4A4B4C4D4E4F'  X'40'-X'4F'\n         DC    XL16'504B4B4B4B4B4B4B4B4B5A5B5C5D5E5F'  X'50'-X'5F'\n         DC    XL16'60614B4B4B4B4B4B4B4B4B6B6C6D6E6F'  X'60'-X'6F'\n         DC    XL16'4B4B4B4B4B4B4B4B4B797A7B7C7D7E7F'  X'70'-X'7F'\n         DC    XL16'4B8182838485868788894B4B4B4B4B4B'  X'80'-X'8F'\n         DC    XL16'4B9192939495969798994B4B4B4B4B4B'  X'90'-X'9F'\n         DC    XL16'4B4BA2A3A4A5A6A7A8A94B4B4B4B4B4B'  X'A0'-X'AF'\n         DC    XL16'4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B4B'  X'B0'-X'BF'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C94B4B4B4B4B4B'  X'C0'-X'CF'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D94B4B4B4B4B4B'  X'D0'-X'DF'\n         DC    XL16'E04BE2E3E4E5E6E7E8E94B4B4B4B4B4B'  X'E0'-X'EF'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F94B4B4B4B4B4B'  X'F0'-X'FF'\nTABLE2   DS    0C   0 1 2 3 4 5 6 7 8 9 A B C D E F\n         DC    XL16'40404040404040404040404040404040'  X'00'-X'0F'\n         DC    XL16'40404040404040404040404040404040'  X'10'-X'1F'\n         DC    XL16'40404040404040404040404040404040'  X'20'-X'2F'\n         DC    XL16'40404040404040404040404040404040'  X'30'-X'3F'\n         DC    XL16'404040404040404040404A4B4C4D4E4F'  X'40'-X'4F'\n         DC    XL16'504040404040404040405A5B5C5D5E5F'  X'50'-X'5F'\n         DC    XL16'60614040404040404040406B6C6D6E6F'  X'60'-X'6F'\n         DC    XL16'404040404040404040797A7B7C7D7E7F'  X'70'-X'7F'\n         DC    XL16'40818283848586878889404040404040'  X'80'-X'8F'\n         DC    XL16'40919293949596979899404040404040'  X'90'-X'9F'\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'  X'A0'-X'AF'\n         DC    XL16'40404040404040404040404040404040'  X'B0'-X'BF'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9404040404040'  X'C0'-X'CF'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'  X'D0'-X'DF'\n         DC    XL16'E040E2E3E4E5E6E7E8E9404040404040'  X'E0'-X'EF'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'  X'F0'-X'FF'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMICALLY ACQUIRED RESOURCE BLOCK                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DCB DSECT                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DCBD     DSORG=PS\nDYNDCBL  EQU      *-IHADCB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PSA DSECT                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHAPSA   DSECT=YES,LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              TCB DSECT                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IKJTCB   LIST=NO\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DEB DSECT                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZDEB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              IOB DSECT                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZIOB\nIOBLEN   EQU   *-IOB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DIAGNOSTIC WORK AREA DSECT                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IHASDWA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              TASK INPUT/OUTPUT TABLE (TIOT)                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DSECT\n         IEFTIOT1\n         END  DITTSTAE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTTINT": {"ttr": 4111, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              TAPE INITIALIZATION                                    *\n*                                                                     *\n*       THIS MODULE PERFORMS THE 'INT' FUNCTION                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTTINT DITTPRFX TINTSAVE,'TAPE INITIALIZE'\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY         TRACE ENTRY\n         TM    COMMFLAG,$COMMCLS   CLOSE FILE INDICATOR??\n         BO    TINT9900            YES\n         TM    COMMFLAG,$COMM1ST   FIRST PASS??\n         BNO   TINT0010            NO\n         MVC   VOLSER,COMMLOV      INITIALIZE VOLSER\nTINT0010 DS    0H\n         L     R10,COMMIND         DYNAMIC BLOCK ADDRESS\n         USING DYNBLOK,R10         SPECIFY BASE\n         ST    R10,EXCPDYN         PASS DYNAMIC BLOCK ADDRESS TO EXCP\n         LA    R2,DYNDCB           POINT TO DCB\n         USING IHADCB,R2           ADDRESS DCB\nTINT0020 DS    0H\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,MOUNTWTO       LENGTH IN WTO\n         SH    R1,VOLSERL          MINUS LENGTH OF VOLSER\n         LA    R1,MOUNTWTO(R1)     FIRST CHARACTER OF VOLSER\n         MVC   0(L'VOLSER,R1),VOLSER   INSERT VOLSER INTO WTO\n         WTO   MF=(E,MOUNTWTO),    ISSUE MOUNT WTO                     +\n               CONSNAME=COMMCNAM   .. CONSOLE ID\n         DITTRACE ID=IO            TRACE I/O INITIATION\n         MVC   DYNCCW(INITCCWL),REWCCW  INITIALIZE CCW'S\n         LA    R1,EXCPBLOK         EXCP PARAMETER BLOCK\n         L     R15,AEXCP           EXCP INTERFACE ENTRY POINT\n         BALR  R14,R15             LINK TO EXCP MODULE\n         TM    DYNSTAT,$DYNPROT    FILE PROTECTED?\n         BO    TINT0080            YES\n         CLI   EXCPSTAT,$EXCPOK    I/O SUCESSFUL?\n         BNE   TINT0400            NO\n         CLC   COMMHIV,COMMBLKS    HIGH VOLSER ALL BLANK?\n         BE    TINT0070            YES.. EXIT\n         CLC   VOLSER,COMMHIV      REACHED UPPER LIMIT?\n         BNL   TINT0070            YES.. EXIT\n         MVC   PACK1,PACK1-1       RESET TO ALL ZEROS\n         LA    R1,PACK1+6          LAST DIGIT IN WORK AREA\n         LA    R2,VOLSER+5         LAST DIGIT IN VOLSER\n         LA    R3,6                MAX DIGITS\nTINT0030 DS    0H\n         CLI   0(R2),C'0'          VALID DIGIT?\n         BL    TINT0040            NO\n         MVC   0(1,R1),0(R2)       COPY THE DIGIT\n         BCTR  R1,0                PREVIOUS DIGIT\n         BCTR  R2,0                PREVIOUS DIGIT\n         BCT   R3,TINT0030         LOOP\nTINT0040 DS    0H\n         PACK  PACK2,PACK1         PACK NUMERIC PORTION\n         AP    PACK2,COMMP1        ADD 1 TO VOLSER\n         UNPK  PACK1,PACK2         UNPACK NEXT VOLSER OR VOLSER SUFFIX\n         OI    PACK1+6,X'F0'       CHANGE SIGN\n         LA    R1,PACK1+6          LAST DIGIT IN WORK AREA\n         LA    R2,VOLSER+5         LAST DIGIT IN VOLSER\n         LA    R3,6                MAX DIGITS\nTINT0050 DS    0H\n         CLI   0(R2),C'0'          VALID DIGIT?\n         BL    TINT0060            NO.. INITIALIZE THE TAPE\n         MVC   0(1,R2),0(R1)       COPY THE DIGIT\n         BCTR  R1,0                PREVIOUS DIGIT\n         BCTR  R2,0                PREVIOUS DIGIT\n         BCT   R3,TINT0050         LOOP\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                    UNLOAD CURRENT TAPE                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTINT0060 DS    0H\n         DITTRACE ID=UNLOAD\n         MVC   DYNCCW(RUNCCWL),RUNCCW   INITIALIZE CCW\n         LA    R1,EXCPBLOK         EXCP PARAMETER BLOCK\n         L     R15,AEXCP           EXCP INTERFACE ENTRY POINT\n         BALR  R14,R15             LINK TO EXCP MODULE\n         CLI   EXCPSTAT,$EXCPOK    I/O SUCESSFUL?\n         BNE   TINT0400            NO\n         B     TINT0020            INITIALIZE THE NEXT TAPE\nTINT0070 DS    0H\n         DITTRACE ID=INITDONE      TAPE OR RANGE INITIALIZED\n         OI    COMMFLAG,$COMMEOF   SET END-OF-FILE FLAG\n         B     TINT9900            EXIT\nTINT0080 DS    0H\n         DITTRACE ID=FILEPROT      TAPE IS FILE PROTECTED\n         WTO   'OUTPUT TAPE IS FILE PROTECTED (NO WRITE RING)',        +\n               CONSNAME=COMMCNAM\n         B     TINT0060            UNLOAD THE TAPE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                    ERROR ROUTINES                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTINT0400 DS    0H\n         LA    R2,DYNBLOK          POINT TO DYNAMIC BLOCK\n         LA    R3,DYNDCB           POINT TO DCB\n         LA    R4,DYNIOB           POINT TO IOB\n         LA    R5,DYNECB           POINT TO ECB\n         DITTRACE ID=BADIO         TRACE I/O FAILURES\n         DC    H'0'                ABEND\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTINT9900 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO OPERATING SYSTEM           ASE01700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORKAREAS/CONSTANTS                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREWCCW   CCW   X'07',*,CHAINCMD+SILI,1      REWIND CCW\nWRITECCW CCW   X'01',VOL1,CHAINCMD+SILI,80  WRITE CCW\nWTMCCW1  CCW   X'1F',*,CHAINCMD+SILI,1      WRITE TAPE MARK CCW\nWTMCCW2  CCW   X'1F',*,SILI,1               WRITE TAPE MARK CCW\nINITCCWL EQU   *-REWCCW\nRUNCCW   CCW   X'0F',*,SILI,1               REWIND/UNLOAD CCW\nRUNCCWL  EQU   *-RUNCCW\nTINTSAVE DC    18F'0'              REGISTER SAVE AREA\nCHAINCMD EQU   X'40'              CHAIN CCW COMMANDS\nSILI     EQU   X'20'              SUPPRESS INCORRECT LENGTH INDICATION\nVOLSERL  DC    AL2(L'VOLSER)      LENGTH OF VOLSER\n         DC    C'0'\nPACK1    DC    CL7'0'             VOLSER WORK AREA\nPACK2    DC    PL4'0'             VOLSER WORK AREA\nVOL1     DS    0C                 <--+\n         DC    CL04'VOL1'            |VOLUME SERIAL RECORD\nVOLSER   DC    CL06' '               |\n         DC    CL70' '            <--+\nMOUNTWTO WTO   'MOUNT TAPE TO BE INITIALIZED WITH VOLSER XXXXXX',      +\n               CONSNAME=,                                              +\n               MF=L\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXCP INTERFACE PARAMETERS                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXCPBLOK EXCPBLOK\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n         ABCODES\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC BLOCK DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS IOB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZIOB\nIOBLEN   EQU  *-IOB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS DCB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DCBD DSORG=PS\nDYNDCBL  EQU   *-IHADCB\n         END  DITTTINT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTTMAP": {"ttr": 5132, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              TAPE MAP 'TMAP' MODULE                                 *\n*                                                                     *\n*       THIS MODULE PERFORMS THE 'TMAP' FUNCTION.  'HDR1', 'HDR2',    *\n*       'EOF1', AND 'EOF2' RECORDS ARE \"WATCHED\" FOR, AND WHEN        *\n*       ENCOUNTERED, THE RELATIVE FILE NUMBER AND FILE NAME ARE       *\n*       PRINTED.  BY DEFAULT TMAP WILL STOP WHEN 2 TAPE MARKS IN      *\n*       A ROW WITH NO INTERVIENING DATA ARE FOUND (LOGICAL-END-OF-    *\n*       TAPE).  THE OPTIONS 'FULL', 'FULLTAPE', OR 'ALL' WILL CAUSE   *\n*       THE TAPE TO BE READ TO THE REFLECTIVE MARKER OR OFF THE END   *\n*       OF THE REEL.                                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTTMAP DITTPRFX TAPESAVE,'TAPE ''VTOC'' MODULE'\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY         TRACE ENTRY\n         TM    COMMFLAG,$COMMCLS   CLOSE FILES?\n         BO    EXIT0000            YES.. EXIT\n         ZAP   FILECT,COMMP0       ZERO FILES COUNTER\n         MVI   TAPEFLAG,00         INITIALIZE FLAGS\nTAPE0010 DS    0H\n         L     R10,COMMIND         DYNAMIC BLOCK ADDRESS\n         USING DYNBLOK,R10         SPECIFY BASE\n         ST    R10,EXCPDYN         PASS DYNAMIC BLOCK ADDRESS TO EXCP\n         LA    R2,DYNDCB           DCB ADDRESS\n         USING IHADCB,R2           DEFINE DSECT BASE\n         DITTRACE ID=CCWINIT       TRACE INTIALIZE ROUTINE\n         L     R1,ACOMMIOI         INPUT BUFFER\n         STCM  R1,7,REWCCW+1       RELOCATE I/O ADDRESS\n         STCM  R1,7,READCCW+1      RELOCATE I/O ADDRESS\n         DITTRACE ID=REWIND        TRACE INITIAL REWIND\n         MVC   DYNCCW,REWCCW       INITIALIZE THE CCW\n         LA    R1,EXCPBLOK         EXCP INTERFACE BLOCK\n         L     R15,AEXCP           EXCP MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO EXCP MODULE\n         CLI   EXCPSTAT,$EXCPOK    EXCP SUCCESSFUL?\n         BNE   TAPE0400            NO\n         DITTRACE ID=GOODREW       REWIND SUCCESSFUL\nTAPE0020 DS    0H\n         DITTRACE ID=READFWD       TRACE READ FORWARD\n         MVC   DYNCCW,READCCW      INITIALIZE THE CCW\n         LA    R1,EXCPBLOK         EXCP INTERFACE BLOCK\n         L     R15,AEXCP           EXCP MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO EXCP MODULE\n         CLI   EXCPSTAT,$EXCPNA    I/O NOT ALLOWED?\n         BE    TAPE0050            NOT ALLOWED\n         TM    DYNSTAT,$DYNPEOT    PHYSICAL EOT REACHED?\n         BO    TAPE0220            YES\n         CLI   DYNSTAT,$DYNTM      TAPE MARK READ?\n         BE    TAPE0200            YES\n         CLI   EXCPSTAT,$EXCPOK    EXCP SUCCESSFUL?\n         BNE   TAPE0400            NO\n         TM    TAPEFLAG,$TAPEFHD   FILE HEADING ALREADY PRINTED??\n         BO    TAPE0030            YES\n         BAL   R9,HEAD0000         PRINT FILE HEADING\n         OI    TAPEFLAG,$TAPEFHD   SET HEADING FLAG\nTAPE0030 DS    0H\n         NI    TAPEFLAG,255-$TAPETM    TURN OFF TAPE MARK FLAG\n         CLC   EXCPLEN,H80         WAS LENGTH 80?\n         BNE   TAPE0040            NO\n         TM    TAPEFLAG,$TAPEDTA   DATA FLAG ON??\n         BO    TAPE0020            YES... READ ANOTHER BLOCK\n         ICM   R1,7,READCCW+1      I/O AREA USED\n         CLC   TAPEVOL1,0(R1)      'VOL1' RECORD??\n         BE    VOL10000            YES\n         CLC   TAPEHDR1,0(R1)      'HDR1' RECORD??\n         BE    HDR10000            YES\n         CLC   TAPEEOV1,0(R1)      'EOV1' RECORD??\n         BE    EOV10000            YES\n         CLC   TAPEEOF1,0(R1)      'EOF1' RECORD??\n         BE    EOF10000            YES\n         CLC   TAPEHDR2,0(R1)      'HDR2' RECORD??\n         BE    HDR20000            YES\n         CLC   TAPEEOF2,0(R1)      'EOF2' RECORD??\n         BE    EOF20000            YES\n         CLC   TAPEEOV2,0(R1)      'EOV2' RECORD??\n         BE    EOV20000            YES\nTAPE0040 DS    0H\n         DITTRACE ID=DATA          TRACE DATA ENCOUNTERED\n         TM    TAPEFLAG,$TAPEDTA   IS TAPE DATA FLAG ON??\n         BO    TAPE0020            YES... READ ANOTHER BLOCK\n         OI    TAPEFLAG,$TAPEDTA   SET DATA FLAG\n         MVI   PRTCMMD,$PRTDATA    PRINT COMMAND\n         MVI   PRTCC,C' '          SINGLE SPACE\n         MVC   PRTDATA(L'DATAMSG),DATAMSG\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         B     TAPE0020            READ ANOTHER BLOCK FROM THE TAPE\nTAPE0050 DS    0H\n         DITTRACE ID=NOTALLOW      I/O NOT ALLOWED BY EXCP\n         ABEND ABEND034,DUMP,,USER ABEND\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                    TAPE MARK HAS JUST BEEN READ                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE0200 DS    0H\n         DITTRACE ID=TAPEMARK,     TRACE TAPE MARK ENCOUNTERED         +\n               DATA1=TAPEFLAG      .. CAPTURE FLAG SETTING\n         NI    TAPEFLAG,255-$TAPEDTA   RESET DATA FLAG\n         NI    TAPEFLAG,255-$TAPEFHD   RESET FILE HEADING FLAG\n         TM    TAPEFLAG,$TAPETM    TAPE MARK FLAG ALREADY ON??\n         BO    TAPE0210            YES ... TWO IN A ROW IS LOGICAL EOT\n         OI    TAPEFLAG,$TAPETM    SET TAPE MARK FLAG\n         B     TAPE0020            READ ANOTHER BLOCK\nTAPE0210 DS    0H\n         TM    TAPEFLAG,$TAPEEOT   ALREADY REACHED LEOT?\n         BO    TAPE0020            DON'T SEND LEOT MESSAGE AGAIN\n         DITTRACE ID=LEOT          LOGICAL END OF TAPE\n         OI    TAPEFLAG,$TAPEEOT   INDICATE LOGICAL EOT REACHED\n         MVI   PRTCMMD,$PRTDATA\n         MVI   PRTCC,C'-'          TRIPLE SPACE\n         MVC   PRTDATA(L'LEOTMSG),LEOTMSG\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         CLC   FULLTAPE,COMMOPT    FULL TAPE?\n         BE    TAPE0020            YES, KEEP ON TRUCKIN'\n         CLC   FULL,COMMOPT        FULL TAPE?\n         BE    TAPE0020            YES, KEEP ON TRUCKIN'\n         CLC   ALL,COMMOPT         FULL TAPE?\n         BE    TAPE0020            YES, KEEP ON TRUCKIN'\n         OI    COMMFLAG,$COMMEOF   OTHERWISE EOF ON 2 TAPE MARKS\n         B     EXIT0000            AND EXIT\nTAPE0220 DS    0H\n         DITTRACE ID=PEOT          LOGICAL END OF TAPE\n         MVI   PRTCMMD,$PRTDATA\n         MVI   PRTCC,C'-'          TRIPLE SPACE\n         MVC   PRTDATA(L'PEOTMSG),PEOTMSG\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         OI    COMMFLAG,$COMMEOF   SIGNAL 'END OF FILE'\n         B     EXIT0000            EXIT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                    ERROR ROUTINES                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE0400 DS    0H\n         LA    R3,DYNIOB           IOB USED FOR I/O\n         DITTRACE ID=IOERR         TRACE I/O ERRORS\n         ABEND ABEND017,DUMP,,USER\nTAPE0410 DS    0H\n         DITTRACE ID=ZERORECL      TRACE LRECL = ZERO\n         ABEND ABEND018,DUMP,,USER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT HEADING FOR NEW PHYSICAL FILE                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nHEAD0000 DS    0H\n         AP    FILECT,COMMP1       ADD 1 TO FILE COUNT\n         MVC   PRFILE,COMMED2      INITIALIZE WITH EDIT WORD\n         ED    PRFILE,FILECT       EDIT FILE NUMBER\n         MVC   PRTDATA(HEADMSGL),HEADMSG\n         MVI   PRTCMMD,$PRTDATA    REQUEST PRINT\n         MVI   PRTCC,C'0'          DOUBLE SPACE\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         BR    R9                  RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              VOL1 RECORD PROCESSING                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVOL10000 DS    0H\n         USING VOL1,R1             DEFINE DSECT BASE\n         DITTRACE ID=VOL1          TRACE VOL1\n         MVC   PRVOL,VOL1VOL       MOVE VOLUME SERIAL NUMBER\n         MVC   PRTDATA(VOL1MSGL),VOL1MSG\n         B     LBL0000             PRINT LABEL DATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              HDR1 RECORD PROCESSING                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nHDR10000 DS    0H\n         USING HDR1,R1             DEFINE DSECT BASE\n         DITTRACE ID=HDR1          TRACE HDR1\n         MVC   PRDSN,HDR1DSN       DATASET NAME\n         MVC   PRVSEQ,HDR1VSEQ     VOLUME SEQUENCE\n         MVC   PRDSEQ,HDR1DSEQ     DATASET SEQUENCE\n         MVC   PRCDTE,HDR1CDTE     CREATE DATE\n         MVC   PREXPD,HDR1EXPD     EXPIRATION DATE\n         MVC   PRTDATA(HDR1MSGL),HDR1MSG\n         B     LBL0000             PRINT LABEL DATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EOF1 RECORD PROCESSING                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEOF10000 DS    0H\n         DITTRACE ID=EOF1          TRACE EOF1\n         MVC   PRBLKC,HDR1BLKC     BLOCK COUNT\n         MVC   PRTDATA(EOF1MSGL),EOF1MSG\n         B     LBL0000             PRINT LABEL DATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EOV1 RECORD PROCESSING                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEOV10000 DS    0H\n         DITTRACE ID=EOV1          TRACE EOV1\n         MVC   PRTDATA(L'EOV1MSG),EOV1MSG\n         B     LBL0000             PRINT LABEL DATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              HDR2 RECORD PROCESSING                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nHDR20000 DS    0H\n         USING HDR2,R1             DEFINE DSECT BASE\n         DITTRACE ID=HDR2          TRACE HDR2\n         MVC   PRRF,HDR2RF         RECORD FORMAT\n         MVC   PRBLSZ,HDR2BLSZ     BLOCK SIZE\n         MVC   PRRSZ,HDR2RSZ       RECORD SIZE\n         MVC   PRDEN,HDR2DEN       TAPE DENSITY\n         MVC   PRJOB,HDR2JOB       JOB/JOB STEP\n         MVC   PRTDATA(HDR2MSGL),HDR2MSG\n         B     LBL0000             PRINT LABEL DATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EOF2 RECORD PROCESSING                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEOF20000 DS    0H\n         DITTRACE ID=EOF2          TRACE EOF2\n         MVC   PRTDATA(L'EOF2MSG),EOF2MSG\n         B     LBL0000             PRINT LABEL DATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EOV2 RECORD PROCESSING                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEOV20000 DS    0H\n         DITTRACE ID=EOV2          TRACE EOV2\n         MVC   PRTDATA(L'EOV2MSG),EOV2MSG\n         B     LBL0000             PRINT LABEL DATA\nLBL0000  DS    0H\n         MVI   PRTCMMD,$PRTDATA    REQUEST PRINT\n         MVI   PRTCC,C' '          SINGLE SPACE\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         B     TAPE0020            READ ANOTHER BLOCK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORKAREAS/CONSTANTS                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREWCCW   CCW   X'07',*,SILI,1      REWIND CCW\nREADCCW  CCW   X'02',*,SILI,65535  READ FORWARD CCW\nTAPESAVE DC    18F'0'              REGISTER SAVE AREA\nH80      DC    H'80'               CONSTANT\nTAPEFLAG DC    X'00'               SWITCHES/FLAGS\n$TAPETM  EQU   X'80'               .. TAPE MARK JUST READ\n$TAPEEOT EQU   X'40'               .. LOGICAL EOT REACHED\n$TAPEDTA EQU   X'20'               .. DATA FILE FOUND\n$TAPEFHD EQU   X'10'               .. FILE HEADING PRINTED\nFILECT   DC    PL3'0'              FILES COUNTER\nFULLTAPE DC    CL8'FULLTAPE'\nFULL     DC    CL8'FULL'\nALL      DC    CL8'ALL'\nTAPEVOL1 DC    C'VOL1'             CONSTANT\nTAPEHDR1 DC    C'HDR1'             CONSTANT\nTAPEHDR2 DC    C'HDR2'             CONSTANT\nTAPEEOF1 DC    C'EOF1'             CONSTANT\nTAPEEOF2 DC    C'EOF2'             CONSTANT\nTAPEEOV1 DC    C'EOV1'             CONSTANT\nTAPEEOV2 DC    C'EOV2'             CONSTANT\nHEADMSG  DS    0C\n         DC    C'* * * * * * * * * * * * * * * * * PHYSICAL FILE #'\nPRFILE   DC    CL6' '\n         DC    C' * * * * * * * * * * * * * * * * *'\nHEADMSGL EQU   *-HEADMSG\nLEOTMSG  DC    C'=============================== LOGICAL END OF TAPE ==+\n               ====================='\nPEOTMSG  DC    C'=============================== PHYSICAL END OF TAPE =+\n               ====================='\nDATAMSG  DC    C'DATA'\nVOL1MSG  DS    0C\n         DC    C'VOL1 VOLSER '\nPRVOL    DC    CL6' '\nVOL1MSGL EQU   *-VOL1MSG\nHDR1MSG  DS    0C\n         DC    C'HDR1 DSN='\nPRDSN    DC    CL17' '\n         DC    C' VOLSEQ='\nPRVSEQ   DC    CL4' '\n         DC    C' DATASET SEQ='\nPRDSEQ   DC    CL4' '\n         DC    C' CREATE DATE='\nPRCDTE   DC    CL6' '\n         DC    C' EXPIRE DATE='\nPREXPD   DC    CL6' '\nHDR1MSGL EQU   *-HDR1MSG\nHDR2MSG  DS    0C\n         DC    C'HDR2 RECORD FORMAT='\nPRRF     DC    C' '\n         DC    C' BLOCK SIZE='\nPRBLSZ   DC    CL5' '\n         DC    C' RECORD SIZE='\nPRRSZ    DC    CL5' '\n         DC    C' DENSITY='\nPRDEN    DC    C' '\n         DC    C' JOB/JOBSTEP='\nPRJOB    DC    CL17' '\nHDR2MSGL EQU   *-HDR2MSG\nEOF1MSG  DS    0C\n         DC    C'EOF1 BLOCK COUNT='\nPRBLKC   DC    CL6' '\nEOF1MSGL EQU   *-EOF1MSG\nEOF2MSG  DC    C'EOF2'\nEOV1MSG  DC    C'EOV1'\nEOV2MSG  DC    C'EOV2'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT REQUEST BLOCK                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXCP INTEFACE BLOCK                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXCPBLOK EXCPBLOK\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              TAPE LABEL DSECTS                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  DITTTLBL\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\nSILI     EQU   X'20'\n         ABCODES\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC BLOCK DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS IOB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZIOB\nIOBLEN   EQU  *-IOB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS DCB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DCBD DSORG=PS\nDYNDCBL  EQU  *-IHADCB\n         END  DITTTMAP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DITTTPI1": {"ttr": 4357, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              TAPE INPUT MODULE                                      *\n*                                                                     *\n*       THIS IS THE TAPE INPUT MODULE.  IT IS INVOKED BY THE          *\n*       MAINLINE MODULE 'DITTMAIN'.  FOR BATCH AND STC MODES          *\n*       RECORD DEBLOCKING WILL BE PERFORMED BY THIS MODULE IF         *\n*       REQUESTED BY THE COMMAND (TPD, TDD,..).                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTTPI1 DITTPRFX TAPESAVE,'TAPE READER MODULE'\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY         TRACE ENTRY\n         TM    COMMFLAG,$COMMCLS   CLOSE FILE INDICATOR??\n         BO    TAPE9900            YES\n         TM    COMMFLAG,$COMM1ST   FIRST PASS??\n         BNO   TAPE0010            NO\n         ZAP   TAPERCDS,COMMP0     ZERO RECORD COUNTER\n         ZAP   FILECT,COMMP0       ZERO FILES COUNTER\n         XC    TAPECRCD,TAPECRCD   CLEAR CURRENT RECORD ADDRESS\n         XC    TAPEREM,TAPEREM     CLEAR REMAINING BLOCK AMOUNT\nTAPE0010 DS    0H\n         L     R10,COMMIND         DYNAMIC BLOCK ADDRESS\n         ST    R10,EXCPDYN         PASS DYNAMIC BLOCK ADRESS TO EXCP\n         USING DYNBLOK,R10         SPECIFY BASE\n         LA    R2,DYNDCB           DCB WITHIN DYNBLOK\n         USING IHADCB,R2           DEFINE DSECT BASE\n         DITTRACE ID=CCWINIT       TRACE INTIALIZE ROUTINE\n         L     R1,ACOMMIOI         INPUT BUFFER\n         STCM  R1,7,READCCW+1      RELOCATE BUFFER ADDRESS\n         NI    COMMIFLG,255-$NEWBLOK TURN OFF NEW BLOCK INDICATOR\nTAPE0020 DS    0H\n         TM    COMMPFLG,$COMMRCS   RECORD COUNT GIVEN??\n         BNO   TAPE0030            NO, BYPASS RECORD COUNT CHECK\n         CP    TAPERCDS,COMMRCDS   READ ENOUGH RECORDS??\n         BE    TAPE7030            YES, SIGNAL END OF FILE\nTAPE0030 DS    0H\n         TM    COMMIFLG,$DEBLOCK   DEBLOCKING RECORDS??\n         BNO   TAPE0100            NO\n         DITTRACE ID=NEXTRECD,     CALLED FOR NEXT RECORD              +\n               DATA1=TAPECRCD,     .. CURRENT RECORD ADDRESS           +\n               DATA2=TAPEREM       .. LENGTH REMAINING\n         OC    TAPEREM,TAPEREM     ANY LENGTH REMAINING??\n         BZ    TAPE0100            NO.. NEED ANOTHER RECORD\n         DITTRACE ID=DEBLOCK       DEBLOCK NEXT RECORD\nTAPE0040 DS    0H\n         ICM   R3,15,TAPECRCD      CURRENT RECORD ADDRESS\n         BZ    TAPE0410            ERROR\n         SR    R2,R2               CLEAR REGISTER\n         TM    COMMIFLG,$VREC      VARIABLE LENGTH RECORDS??\n         BO    TAPE0050            YES\n         ICM   R2,3,COMMLRCL       LOGICAL RECORD SIZE\n         B     TAPE0060            CONTINUE\nTAPE0050 DS    0H\n         ICM   R2,3,0(R3)          RECORD SIZE\nTAPE0060 DS    0H\n         TM    COMMIFLG,$NEWBLOK   NEW BLOCK JUST READ??\n         BO    TAPE0070            YES, LEAVE CURRENT ADDRESS\n         AR    R3,R2               BRING INPUT ADDRESS FORWARD\nTAPE0070 DS    0H\n         TM    COMMIFLG,$VREC      VARIABLE LENGTH RECORDS??\n         BNO   TAPE0080            NO, RECORD LENGTH WILL BE THE SAME\n         ICM   R2,3,0(R3)          LENGTH OF NEW RECORD\n         BZ    TAPE0410         ...RECORD LENGTH ZERO.. INVALID\nTAPE0080 DS    0H\n         CLM   R2,3,TAPEREM        LONGER THAN REMAINING LENGTH??\n         BNH   TAPE0090            NO\n         ICM   R2,3,TAPEREM        OTHERWISE LIMIT LENGTH\nTAPE0090 DS    0H\n         ST    R3,TAPECRCD         SAVE CURRENT RECORD ADDRESS\n         ST    R3,COMMCRCD         PASS CURRENT RECORD ADDRESS\n         STH   R2,COMMCRCL         PASS CURRENT RECORD LENGTH\n         DITTRACE ID=LREC,         RECORD ADDRESS AND LENGTH           +\n               RDATA1=R3,          .. RECORD'S ADDRESS                 +\n               RDATA2=R2           .. RECORD'S LENGTH\n         LH    R3,TAPEREM          REMAINING SIZE\n         SR    R3,R2               COMPUTE REMAINING SIZE\n         STH   R3,TAPEREM          SAVE REMAINING SIZE\n         AP    TAPERCDS,COMMP1     ADD 1 TO RECORD COUNT\n         B     TAPE9900            EXIT\nTAPE0100 DS    0H\n         DITTRACE ID=NEXTBLOK      READ NEXT PHYSICAL RECORD\n         MVC   DYNCCW,READCCW      INITIALIZE THE CCW\n         LA    R1,EXCPBLOK         EXCP INTERFACE PARAMETER LIST\n         L     R15,AEXCP           EXCP MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO EXCP INTERFACE\n         CLI   EXCPSTAT,$EXCPNA    I/O NOT ALLOWED?\n         BE    TAPE0140            NOT ALLOWED\n         TM    DYNSTAT,$DYNPEOT    PHYSICAL END OF TAPE?\n         BO    TAPE7020            YES\n         CLI   DYNSTAT,$DYNTM      TAPE MARK READ?\n         BE    TAPE7000            YES\n         OI    COMMIFLG,$NEWBLOK   TURN ON NEW BLOCK INDICATOR\n         SR    R3,R3               CLEAR REGISTER\n         ICM   R3,7,READCCW+1      I/O AREA ADDRESS\n         ST    R3,TAPECRCD         SAVE CURRENT RECORD ADDRESS\n         MVC   TAPEREM,EXCPLEN     SAVE DATA LENGTH\n         TM    COMMIFLG,$DEBLOCK   DEBLOCKING RECORDS??\n         BNO   TAPE0130            NO\n         TM    COMMIFLG,$VREC      VARIABLE LENGTH RECORDS?\n         BNO   TAPE0040            NO\n         SR    R0,R0               CLEAR REGISTER\n         ICM   R0,3,0(R3)          LENGTH FROM BDW (MAYBE)\n         SH    R0,H4               MINUS BDW LENGTH\n         BNH   TAPE0040            INSUFFICIENT LENGTH\n         LA    R3,4(R3)            FIRST RDW IN THE BLOCK\n         SR    R2,R2               CLEAR REGISTER\nTAPE0110 DS    0H\n         ICM   R2,3,0(R3)          RECORD LENGTH FROM RDW\n         BZ    TAPE0410            RECORD WITH LENGTH = ZERO!\n         SR    R0,R2               MINUS LENGTH OF THIS RECORD\n         BM    TAPE0040            NEGATIVE... LENGTHS DON'T ADD UP\n         BZ    TAPE0120            ZERO.. LENGTHS MATCH\n         AR    R3,R2               NEXT RDW ADDRESS\n         B     TAPE0110            LOOP\nTAPE0120 DS    0H\n         DITTRACE ID=ITADDSUP      COULDN'T THINK OF A BETTER COMMENT\n         L     R3,TAPECRCD         BLOCK ADDRESS\n         ICM   R2,3,0(R3)          BLOCK LENGTH\n         SH    R2,H4               MINUS BDW LENGTH\n         STCM  R2,3,TAPEREM        SET LENGTH REMAINING\n         LA    R3,4(R3)            FIRST LOGICAL RECORD'S ADDRESS\n         ST    R3,TAPECRCD         SET RECORD ADDRESS\n         B     TAPE0040            DEBLOCK FIRST RECORD\nTAPE0130 DS    0H\n         DITTRACE ID=PHYRECD,      PHYSICAL RECORD                     +\n               DATA1=TAPECRCD,     .. PHYSICAL BLOCK'S ADDRESS         +\n               DATA2=TAPEREM       .. PHYSICAL BLOCK'S LENGTH\n         MVC   COMMCRCD,TAPECRCD   PASS RECORD ADDRESS\n         MVC   COMMCRCL,TAPEREM    PASS RECORD LENGTH\n         AP    TAPERCDS,COMMP1     ADD 1 TO RECORD COUNT\n         B     TAPE9900            EXIT\nTAPE0140 DS    0H\n         DITTRACE ID=NOTALLOW\n         CLI   COMMENV,$ENVTSO     RUNNING AS A TSO USER?\n         BE    TAPE0160            YES\n         CLI   COMMENV,$ENVJOB     RUNNING AS A BATCH JOB?\n         BE    TAPE0150            YES\n         WTO   'READ NOT ALLOWED WHILE TAPE IS AT PHYSICAL EOT',       +\n               CONSNAME=COMMCNAM\nTAPE0150 DS    0H\n         MVI   PRTCMMD,$PRTCMD     SET PRINT COMMAND\n         MVC   PRTDATA(NAMSGL),NAMSG\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             PRINT MESSAGE\n         OI    COMMFLAG,$ABORT     SET ABORT FLAG\n         B     TAPE9900            AND EXIT\nTAPE0160 DS    0H\n         MVC   MSG01(NAMSGL),NAMSG SET MESSAGE\n         OI    COMMFLAG,$ABORT     SET ABORT FLAG\n         B     TAPE9900            AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                    ERROR ROUTINES                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE0400 DS    0H\n         LA    R3,DYNIOB           IOB USED FOR I/O\n         DITTRACE ID=READERR       TRACE READ ERRORS\n         ABEND ABEND017,DUMP,,USER\nTAPE0410 DS    0H\n         DITTRACE ID=ZERORECL      TRACE LRECL = ZERO\n         ABEND ABEND018,DUMP,,USER\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                    TAPE MARK PROCESSING                             *\n*                                                                     *\n* NOTE: THE TAPE MARK FLAG IN 'DITTCOMM' WILL BE SET BY 'DITTEXCP'.   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE7000 DS    0H\n         DITTRACE ID=TAPEMARK      TRACE TAPE MARKS\n         AP    FILECT,COMMP1       ADD 1 TO FILE COUNT\n         TM    COMMPFLG,$COMMFLS   MULTIPLE FILES??\n         BNO   TAPE7010            NO\n         CP    FILECT,COMMFILS     ENOUGH FILES PROCESSED??\n         BL    TAPE9900            NO\nTAPE7010 DS    0H\n         TM    COMMPFLG,$COMMRCS   'RECORDS' IN EFFECT?\n         BNO   TAPE7030            NO, NORMAL EOF\n         DITTRACE ID=FORCEOF       EOF FORCED BY TAPE MARK\n         OI    COMMFLAG,$COMMFE    EOF FORCED BY TAPE MARK\n         B     TAPE7030            OTHERWISE SIGNAL 'EOF'\nTAPE7020 DS    0H\n         DITTRACE ID=PEOT\nTAPE7030 DS    0H\n         DITTRACE ID=EOF           TRACE SYSIN END OF FILE\n         OI    COMMFLAG,$COMMEOF   SIGNAL END OF FILE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE9900 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS/CONSTANTS                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPESAVE DC    18F'0'              REGISTER SAVE AREA\nTAPECRCD DC    A(0)                CURRENT RECORD ADDRESS\nH4       DC    H'4'                CONSTANT\nTAPEREM  DC    H'0'                LENGTH REMAINING IN RECORD\nTAPERCDS DC    PL5'0'              RECORD COUNTER\nFILECT   DC    PL5'0'              FILES COUNTER\nREADCCW  CCW   X'02',*,SILI,65535  READ FORWARD CCW\nNAMSG    DC    C'READ NOT ALLOWED WHILE TAPE IS AT PHYSICAL EOT'\nNAMSGL   EQU   *-NAMSG\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT REQUEST BLOCK                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXCP INTERFACE BLOCK                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXCPBLOK EXCPBLOK\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\nSILI     EQU   X'20'\n         ABCODES\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC BLOCK DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS IOB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZIOB\nIOBLEN   EQU  *-IOB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS DCB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DCBD DSORG=PS\nDYNDCBL  EQU   *-IHADCB\n         END  DITTTPI1\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTTPI2": {"ttr": 4364, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              FORWARD SPACE FILE                                     *\n*                                                                     *\n*       THIS ROUTINE PERFORMS THE FSF FUNCTION.                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTTPI2 DITTPRFX TAPESAVE,'TAPE FORWARD SPACE FILE MODULE'\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY         TRACE ENTRY\n         TM    COMMFLAG,$COMMCLS   CLOSE FILE INDICATOR??\n         BO    TAPE9900            YES\n         TM    COMMFLAG,$COMM1ST   FIRST PASS??\n         BNO   TAPE0010            NO\n         ZAP   TAPEFILS,COMMP0     ZERO FILES COUNTER\nTAPE0010 DS    0H\n         L     R10,COMMIND         DYNAMIC BLOCK ADDRESS\n         USING DYNBLOK,R10         SPECIFY BASE\n         ST    R10,EXCPDYN         PASS DYNAMIC BLOCK ADDRESS TO EXCP\n         LA    R2,DYNDCB           DCB WITHIN DYNBLOK\n         USING IHADCB,R2           DEFINE DSECT BASE\n         DITTRACE ID=CCWINIT       TRACE INTIALIZE ROUTINE\n         L     R1,ACOMMIOI         INPUT BUFFER\n         STCM  R1,7,FSFCCW+1       RELOCATE BUFFER ADDRESS\nTAPE0020 DS    0H\n         MVC   DYNCCW,FSFCCW       INITIALIZE THE CCW\n         LA    R1,EXCPBLOK         EXCP INTERFACE PARAMETERS\n         L     R15,AEXCP           EXCP MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO EXCP INTERFACE\n         CLI   EXCPSTAT,$EXCPNA    ATTEMPT WHILE AT PEOT?\n         BE    TAPE0030            YES\n         TM    DYNSTAT,$DYNPEOT    EOT REACHED?\n         BO    TAPE0060            YES\n         CLI   EXCPSTAT,$EXCPOK    I/O SUCCESSFUL??\n         BNE   TAPE0400            NO\n         AP    TAPEFILS,COMMP1     ADD 1 TO FILES FORWARDED\n         CP    TAPEFILS,COMMFILS   PROCESSED ENOUGH FILES??\n         BL    TAPE0020            NO\n         OI    COMMFLAG,$COMMEOF   SET END-OF-FILE FLAG\n         B     TAPE9900            EXIT\nTAPE0030 DS    0H\n         DITTRACE ID=NOTALLOW\n         CLI   COMMENV,$ENVTSO     TSO ENVIRONMENT?\n         BE    TAPE0050            YES\n         CLI   COMMENV,$ENVJOB     RUNNING AS A BATCH JOB?\n         BE    TAPE0040            YES\n         WTO   'FSF NOT ALLOWED WHILE TAPE IS AT PHYSICAL EOT',        +\n               CONSNAME=COMMCNAM\nTAPE0040 DS    0H\n         MVI   PRTCMMD,$PRTCMD     SET COMMAND\n         MVC   PRTDATA(NAMSGL),NAMSG\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT ENTRY POINT\n         BALR  R14,R15             PRINT MESSAGE\n         OI    COMMFLAG,$ABORT     SET ABORT FLAG\n         B     TAPE9900            AND EXIT\nTAPE0050 DS    0H\n         MVC   MSG01(NAMSGL),NAMSG SET MESSAGE\n         OI    COMMFLAG,$ABORT     SET ABORT FLAG\n         B     TAPE9900            AND EXIT\nTAPE0060 DS    0H\n         DITTRACE ID=PEOT\n         OI    COMMFLAG,$COMMEOF   SET EOF FLAG\n         B     TAPE9900            AND EXIT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                    ERROR ROUTINES                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE0400 DS    0H\n         LA    R2,DYNBLOK          DYNAMIC BLOCK\n         LA    R3,DYNDCB           DCB\n         LA    R4,DYNIOB           IOB\n         LA    R5,DYNECB           ECB\n         DITTRACE ID=BADIO         TRACE I/O FAILURES\n         DC    H'0'                ABEND\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE9900 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS/CONSTANTS                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPESAVE DC    18F'0'              REGISTER SAVE AREA\nTAPEFILS DC    PL5'0'              FILES COUNTER\nFSFCCW   CCW   X'3F',*,SILI,1      FORWARD SPACE FILE CCW\nNAMSG    DC    C'FSF NOT ALLOWED WHILE TAPE IS AT PHYSICAL EOT'\nNAMSGL   EQU   *-NAMSG\nEOTMSG   DC    C'FSF STOPPED DUE TO REACHING PHYSICAL EOT'\nEOTMSGL  EQU   *-EOTMSG\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE REQUEST BLOCK                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXCP INTERFACE BLOCK                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXCPBLOK EXCPBLOK\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\nSILI     EQU   X'20'\n         ABCODES\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC BLOCK DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS IOB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZIOB\nIOBLEN   EQU  *-IOB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS DCB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DCBD DSORG=PS\nDYNDCBL  EQU   *-IHADCB\n         END  DITTTPI2\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTTPI3": {"ttr": 4609, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              TAPE BACK-SPACE RECORDS                                *\n*                                                                     *\n*       THIS ROUTINE PERFORMS THE BSR FUNCTION.                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTTPI3 DITTPRFX TAPESAVE,'TAPE BACK SPACE RECORD MODULE'\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY         TRACE ENTRY\n         TM    COMMFLAG,$COMMCLS   CLOSE FILE INDICATOR??\n         BO    TAPE9900            YES\nTAPE0010 DS    0H\n         L     R10,COMMIND         DYNAMIC BLOCK ADDRESS\n         USING DYNBLOK,R10         SPECIFY BASE\n         ST    R10,EXCPDYN         PASS DYNAMIC BLOCK ADDRESS TO EXCP\n         LA    R2,DYNDCB           POINT TO DCB\n         USING IHADCB,R2           ADDRESS DCB\n         DITTRACE ID=CCWINIT       TRACE INTIALIZE ROUTINE\n         L     R1,ACOMMIOI         POINT TO INPUT BUFFER\n         STCM  R1,7,BSRCCW+1       RELOCATE BUFFER ADDRESS\nTAPE0020 DS    0H\n         LA    R4,1                ASSUME 1 BLOCK\n         TM    COMMPFLG,$COMMRCS   NUMBER TO READ GIVEN??\n         BNO   TAPE0030            NO\n         ZAP   COMMDWRD,COMMRCDS   MOVE TO DOUBLE WORD\n         CVB   R4,COMMDWRD         CONVERT TO BINARY\n         LTR   R4,R4               WAS IT > ZERO??\n         BZ    TAPE0040            NO\n         BM    TAPE0040            NO\nTAPE0030 DS    0H\n         MVC   DYNCCW,BSRCCW       INITIALIZE THE CCW\n         LA    R1,EXCPBLOK         EXCP INTERFACE PARAMETERS\n         L     R15,AEXCP           EXCP INTERFACE ENTRY POINT\n         BALR  R14,R15             LINK TO EXCP INTERFACE\n         CLI   EXCPSTAT,$EXCPNA    I/O ALLOWED?\n         BE    TAPE0050            NOT ALLOWED\n         TM    DYNSTAT,$DYNPEOT    PHYSICAL EOT REACHED?\n         BO    TAPE0080            YES..\n         TM    DYNSTAT,$DYNTM      TAPE MARK READ?\n         BO    TAPE0090            YES..\n         CLI   EXCPSTAT,$EXCPOK    I/O SUCCESSFUL?\n         BNE   TAPE0400            NO\n         BCT   R4,TAPE0030         READ ALL REQUESTED\nTAPE0040 DS    0H\n         DITTRACE ID=BSRDONE       TRACE ALL DONE\n         OI    COMMFLAG,$COMMEOF   SET END-OF-FILE FLAG\n         B     TAPE9900            EXIT\nTAPE0050 DS    0H\n         DITTRACE ID=NOTALLOW\n         CLI   COMMENV,$ENVTSO     TSO USER?\n         BE    TAPE0070            YES\n         CLI   COMMENV,$ENVJOB     BATCH JOB?\n         BE    TAPE0060            YES\n         WTO   'BSR NOT ALLOWED WHILE TAPE IS AT PHYSICAL EOT',        +\n               CONSNAME=COMMCNAM\nTAPE0060 DS    0H\n         MVI   PRTCMMD,$PRTCMD     SET COMMAND\n         MVC   PRTDATA(NAMSGL),NAMSG\n         LA    R1,PRTBLOK          PRINT INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             PRINT MESSAGE\n         OI    COMMFLAG,$ABORT     SET ABORT FLAG\n         B     TAPE9900            EXIT\nTAPE0070 DS    0H\n         MVC   MSG01(NAMSGL),NAMSG SET MESSAGE\n         OI    COMMFLAG,$ABORT     SET ABORT FLAG\n         B     TAPE9900            EXIT\nTAPE0080 DS    0H\n         DITTRACE ID=PEOT\n         ABEND ABEND025,DUMP,,USER ABEND\nTAPE0090 DS    0H\n         DITTRACE ID=TAPEMARK\n         OI    COMMFLAG,$COMMFE    SET EOF FLAG\n         TM    COMMPFLG,$COMMRCS   'RECORDS' IN EFFECT?\n         BNO   TAPE9900            NO\n         OI    COMMFLAG,$COMMFE    EOF FORCED BY TAPE MARK\n         B     TAPE9900            EXIT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                    ERROR ROUTINES                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE0400 DS    0H\n         LA    R3,DYNIOB           POINT TO IOB\n         LA    R2,DYNBLOK          POINT TO DYNAMIC BLOCK\n         LA    R4,DYNDCB           POINT TO DCB\n         LA    R5,DYNECB           POINT TO ECB\n         DITTRACE ID=BADIO         TRACE I/O FAILURES\n         DC    H'0'                ABEND\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE9900 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO OPERATING SYSTEM           ASE01700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORKAREAS/CONSTANTS                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPESAVE DC    18F'0'              REGISTER SAVE AREA\nBSRCCW   CCW   X'27',*,SILI,24     BACK-SPACE-BLOCK CCW\nNAMSG    DC    C'BSR NOT ALLOWED WHILE TAPE IS AT PHYSICAL EOT'\nNAMSGL   EQU   *-NAMSG\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXCP MODULE INTERFACE BLOCK                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXCPBLOK EXCPBLOK\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\nSILI     EQU   X'20'\n         ABCODES\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC BLOCK DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS IOB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZIOB\nIOBLEN   EQU  *-IOB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS DCB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DCBD DSORG=PS\nDYNDCBL  EQU   *-IHADCB\n         END  DITTTPI3\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTTPI4": {"ttr": 4614, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              TAPE BACK SPACE FILE                                   *\n*                                                                     *\n*       THIS ROUTINE PERFORMS THE BSF FUNCTION                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTTPI4 DITTPRFX TAPESAVE,'TAPE BACK SPACE FILE MODULE'\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY         TRACE ENTRY\n         TM    COMMFLAG,$COMMCLS   CLOSE FILE INDICATOR??\n         BO    TAPE9900            YES\n         TM    COMMFLAG,$COMM1ST   FIRST PASS??\n         BNO   TAPE0010            NO\n         ZAP   TAPEFILS,COMMP0     ZERO FILES COUNTER\nTAPE0010 DS    0H\n         L     R10,COMMIND         DYNAMIC BLOCK ADDRESS\n         USING DYNBLOK,R10         SPECIFY BASE\n         ST    R10,EXCPDYN         PASS DYNAMIC BLOCK ADDRESS TO EXCP\n         LA    R2,DYNDCB           POINT TO DCB\n         USING IHADCB,R2           ADDRESS DCB\n         DITTRACE ID=CCWINIT       TRACE INTIALIZE ROUTINE\n         L     R1,ACOMMIOI         POINT TO INPUT BUFFER\n         STCM  R1,7,BSFCCW+1       RELOCATE BUFFER ADDRESS\nTAPE0020 DS    0H\n         MVC   DYNCCW,BSFCCW       INITIALIZE THE CCW\n         LA    R1,EXCPBLOK         EXCP MODULE PARAMETERS\n         L     R15,AEXCP           EXCP MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO EXCP MODULE\n         CLI   EXCPSTAT,$EXCPNA    I/O ALLOWED?\n         BE    TAPE0030            NOT ALLOWED\n         TM    DYNSTAT,$DYNPEOT    END OF TAPE REACHED?\n         BO    TAPE0060            YES\n         CLI   EXCPSTAT,$EXCPOK    I/O SUCCESSFUL??\n         BNE   TAPE0400            NO\n         AP    TAPEFILS,COMMP1     ADD 1 TO FILES BACK-SPACED\n         CP    TAPEFILS,COMMFILS   PROCESSED ENOUGH FILES??\n         BL    TAPE0020            NO\n         OI    COMMFLAG,$COMMEOF   SET END-OF-FILE FLAG\n         B     TAPE9900            EXIT\nTAPE0030 DS    0H\n         DITTRACE ID=NOTALLOW\n         CLI   COMMENV,$ENVTSO     TSO USER?\n         BE    TAPE0050            YES\n         CLI   COMMENV,$ENVJOB     BATCH JOB?\n         BE    TAPE0040            YES\n         WTO   'BSF NOT ALLOWED WHILE TAPE IS AT PHYSICAL EOT',        +\n               CONSNAME=COMMCNAM\nTAPE0040 DS    0H\n         MVI   PRTCMMD,$PRTCMD     SET PRINT COMMAND\n         MVC   PRTDATA(NAMSGL),NAMSG\n         LA    R1,PRTBLOK          PRINTER INTERFACE ADDRESS\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             PRINT MESSAGE\n         OI    COMMFLAG,$ABORT     SET ABORT FLAG\n         B     TAPE9900            AND EXIT\nTAPE0050 DS    0H\n         MVC   MSG01(NAMSGL),NAMSG SET MESSAGE\n         OI    COMMFLAG,$ABORT     SET ABORT FLAG\n         B     TAPE9900            AND EXIT\nTAPE0060 DS    0H\n         DITTRACE ID=PEOT\n         ABEND ABEND026,DUMP,,USER ABEND\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                    ERROR ROUTINES                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE0400 DS    0H\n         LA    R2,DYNBLOK          POINT TO DYNAMIC BLOCK\n         LA    R3,DYNDCB           POINT TO DCB\n         LA    R4,DYNIOB           POINT TO IOB\n         LA    R5,DYNECB           POINT TO ECB\n         DITTRACE ID=BADIO         TRACE I/O FAILURES\n         DC    H'0'                ABEND\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE9900 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO OPERATING SYSTEM           ASE01700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORKAREAS/CONSTANTS                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nBSFCCW   CCW   X'2F',*,SILI,1      BACK SPACE FILE CCW\nTAPESAVE DC    18F'0'              REGISTER SAVE AREA\nTAPEFILS DC    PL5'0'              FILES COUNTER\nNAMSG    DC    C'BSF NOT ALLOWED WHILE TAPE IS AT PHYSICAL EOT'\nNAMSGL   EQU   *-NAMSG\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE REQUEST BLOCK                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXCP MODULE PARAMETER BLOCK                            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXCPBLOK EXCPBLOK\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\nSILI     EQU   X'20'\n         ABCODES\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC BLOCK DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS IOB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZIOB\nIOBLEN   EQU  *-IOB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS DCB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DCBD DSORG=PS\nDYNDCBL  EQU   *-IHADCB\n         END  DITTTPI4\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTTPO1": {"ttr": 4619, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*        TAPE OUTPUT MODULE.                                          *\n*                                                                     *\n*        THIS MODULE DOES 'NORMAL' TAPE OUTPUT.  OUTPUT CAN BE        *\n*        COPIED BLOCK-FOR-BLOCK FROM INPUT TO OUTPUT OR CAN BE        *\n*        RE-BLOCKED TO THE SPECIFIED BLOCK SIZE.  ON END OF FILE      *\n*        A TAPE-MARK WILL BE WRITTEN TO THE OUTPUT.                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTTPO1 DITTPRFX TAPESAVE,'TAPE OUTPUT MODULE'\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY         TRACE ENTRY\n         L     R10,COMMOUTD        DYNAMIC BLOCK ADDRESS\n         USING DYNBLOK,R10         SPECIFY BASE\n         ST    R10,EXCPDYN         PASS DYNAMIC BLOCK ADDRESS TO EXCP\n         TM    COMMFLAG,$COMMCLS   CLOSE FILE INDICATOR??\n         BO    TAPE0090            YES\n         TM    COMMFLAG,$COMM1ST   FIRST PASS??\n         BNO   TAPE0010            NO\n         MVC   TAPECRCD,ACOMMIOO   STARTING ADDRESS IN OUTPUT BLOCK\n         MVC   TAPEREM,COMMBLSZ    CLEAR REMAINING BLOCK AMOUNT\n         ZAP   TAPEBLKS,COMMP0     RESET BLOCK COUNT\nTAPE0010 DS    0H\n         ICM   R1,15,COMMIND       INPUT DYNAMIC BLOCK ADDRESS\n         BZ    TAPE0020            NO DYNAMIC BLOCK FOR INPUT\n         CLC   TAPETAPE,DYNDDNAM-DYNBLOK(R1)\n         BNE   TAPE0020            NOT TAPE\n         TM    DYNSTAT-DYNBLOK(R1),$DYNTM\n         BO    TAPE0090            END OF THIS LOGICAL FILE\nTAPE0020 DS    0H\n         LA    R2,DYNDCB           POINT TO DCB\n         USING IHADCB,R2           ADDRESS DCB\n         DITTRACE ID=CCWINIT       TRACE INTIALIZE ROUTINE\n         L     R1,ACOMMIOO         POINT TO INPUT BUFFER\n         STCM  R1,7,WRITECCW+1     RELOCATE BUFFER ADDRESS\n         STCM  R1,7,WTMCCW+1       RELOCATE BUFFER ADDRESS\nTAPE0030 DS    0H\n         TM    COMMOFLG,$REBLOCK   RE-BLOCKING RECORDS??\n         BNO   TAPE0050            NO, OUTPUT INDIVIDUAL BLOCK\n         CLC   COMMCRCL,COMMBLSZ   IS RECORD LONGER THAN MAX BLOCK??\n         BH    TAPE0410            YES, NO WAY JOSE\n         CLC   COMMCRCL,TAPEREM    WILL RECORD FIT IN THIS BLOCK??\n         BH    TAPE0060            NO, OUTPUT THIS BLOCK\nTAPE0040 DS    0H\n         DITTRACE ID=ADDBLOCK      TRACE ADDITIONS TO BLOCK\n         SR    R0,R0               CLEAR REGISTER\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R0,3,TAPEREM        LOAD BLOCK SIZE LEFT\n         ICM   R1,3,COMMCRCL       LENGTH OF NEW RECORD\n         SR    R0,R1               SUBTRACT LENGTH OF NEW RECORD\n         STH   R0,TAPEREM          SAVE LENGTH LEFT\nTAPE0050 DS    0H\n         DITTRACE ID=COPYRECD      TRACE COPY OF INPUT TO OUTPUT BLOCK\n         L     R0,COMMCRCD         GET RECORD ADDRESS\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,COMMCRCL       GET RECORD LENGTH\n         L     R2,TAPECRCD         GET CURRENT OUTPUT ADDRESS\n         LR    R3,R1               COPY RECORD ADDRESS\n         MVCL  R2,R0               MOVE RECORD TO OUTPUT\n         L     R2,TAPECRCD         LOAD CURRENT ADDRESS\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,COMMCRCL       GET RECORD LENGTH\n         AR    R2,R1               ADD CURRENT RECORD LENGTH\n         ST    R2,TAPECRCD         SAVE TAPE OUTPUT ADDRESS\n         TM    COMMOFLG,$REBLOCK   RE-BLOCKING RECORDS??\n         BO    TAPE9900            YES, DON'T WRITE 'TILL BLOCK FULL\nTAPE0060 DS    0H\n         SR    R0,R0               CLEAR REGISTER\n         ICM   R0,3,COMMCRCL       GET RECORD LENGTH\n         TM    COMMOFLG,$REBLOCK   RE-BLOCKING RECORDS??\n         BNO   TAPE0070            NO, USE CURRENT RECORD SIZE\n         ICM   R0,3,COMMBLSZ       LOAD BLOCK SIZE\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,TAPEREM        UNUSED PORTION\n         SR    R0,R1               SUBTRACT UNUSED PORTION\nTAPE0070 DS    0H\n         STH   R0,WRITECCW+6       STORE THE RECORD LENGTH\nTAPE0080 DS    0H\n         DITTRACE ID=WRITE         TRACE WRITES TO TAPE\n         MVC   DYNCCW,WRITECCW     INITIALIZE THE CCW\n         LA    R1,EXCPBLOK         EXCP INTERFACE PARAMETERS\n         L     R15,AEXCP           EXCP MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO EXCP MODULE\n         CLI   EXCPSTAT,$EXCPNA    I/O ALLOWED?\n         BE    TAPE0130            NOT ALLOWED\n         TM    DYNSTAT,$DYNPROT    FILE PROTECT ON?\n         BO    TAPE0190            YES\n         TM    DYNSTAT,$DYNPEOT    END OF TAPE REACHED?\n         BO    TAPE0160            YES\n         CLI   EXCPSTAT,$EXCPOK    WRITE SUCCESSFUL??\n         BNE   TAPE0400            NO\n         AP    TAPEBLKS,COMMP1     ADD 1 TO BLOCKS WRITTEN TO TAPE\n         SR    R1,R1               CLEAR REGISTER\n         MVC   TAPECRCD,ACOMMIOO   SAVE CURRENT RECORD ADDRESS\n         MVC   TAPEREM,COMMBLSZ    RESET BLOCK SIZE\n         TM    COMMOFLG,$REBLOCK   RE-BLOCKING RECORDS??\n         BO    TAPE0040            YES, INSERT NEW RECORD\n         B     TAPE9900            EXIT\nTAPE0090 DS    0H\n         TM    COMMOFLG,$REBLOCK   RE-BLOCKING RECORDS??\n         BNO   TAPE0100            NO, WRITE END OF FILE TAPE MARK\n         CLC   TAPEREM,COMMBLSZ    IS FULL BLOCK STILL AVAILABLE??\n         BE    TAPE0100            YES, LAST BLOCK IS EMPTY\n         SR    R1,R1               CLEAR FOR LENGTH\n         ICM   R1,3,COMMBLSZ       LOAD BLOCK SIZE\n         SH    R1,TAPEREM          SUBTRACT UNUSED PORTION\n         STH   R1,WRITECCW+6       STORE THE RECORD LENGTH\n         MVC   DYNCCW,WRITECCW     COPY CCW\n         DITTRACE ID=LASTWRT       TRACE LAST BLOCK WRITES\n         LA    R1,EXCPBLOK         EXCP INTERFACE PARAMETERS\n         L     R15,AEXCP           EXCP MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO EXCP MODULE\n         CLI   EXCPSTAT,$EXCPOK    WRITE SUCCESSFUL??\n         BNE   TAPE0400            NO\nTAPE0100 DS    0H\n         MVC   DYNCCW,WTMCCW       MOVE WTM CCW\n         DITTRACE ID=WRITETM       TRACE TAPE MARK WRITES\n         LA    R1,EXCPBLOK         EXCP INTERFACE PARAMETERS\n         L     R15,AEXCP           EXCP MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO EXCP MODULE\n         CLI   EXCPSTAT,$EXCPOK    WRITE SUCCESSFUL??\n         BNE   TAPE0400            NO\n         MVC   PRBLKS,BLKSEDWD     MOVE EDIT WORD\n         ED    PRBLKS,TAPEBLKS     EDIT BLOCKS WRITTEN\n         CLI   COMMENV,$ENVTSO     TSO ENVIRONMENT?\n         BE    TAPE0110            YES\n         MVC   PRTDATA(BLKSMSGL),BLKSMSG\n         MVI   PRTCC,C'0'          MOVE CARRIAGE CONTROL\n         LA    R1,PRTBLOK          POINT TO PRINT BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         B     TAPE0120\nTAPE0110 DS    0H\n         LA    R1,BLKSMSG          MESSAGE ADDRESS\n         LA    R0,BLKSMSGL         MESSAGE LENGTH\n         TPUT  (R1),(R0)           SEND BLOCKS WRITTEN MESSAGE\nTAPE0120 DS    0H\n         MVC   TAPECRCD,ACOMMIOO   STARTING ADDRESS IN OUTPUT BLOCK\n         MVC   TAPEREM,COMMBLSZ    CLEAR REMAINING BLOCK AMOUNT\n         ZAP   TAPEBLKS,COMMP0     RESET BLOCK COUNT\n         B     TAPE9900            EXIT\nTAPE0130 DS    0H\n         DITTRACE ID=NOTALLOW\n         CLI   COMMENV,$ENVTSO     TSO USER?\n         BE    TAPE0150            YES\n         CLI   COMMENV,$ENVJOB     BATCH JOB?\n         BE    TAPE0140            YES\n         WTO   'TAPE OUTPUT NOT ALLOWED WHILE TAPE IS AT PHYSICAL EOT',+\n               CONSNAME=COMMCNAM\nTAPE0140 DS    0H\n         MVI   PRTCMMD,$PRTCMD     SET PRINTER COMMAND\n         MVC   PRTDATA(NAMSGL),NAMSG\n         LA    R1,PRTBLOK          PRINTER INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             PRINT MESSAGE\n         OI    COMMFLAG,$ABORT     SET ABORT FLAG\n         B     TAPE9900            AND EXIT\nTAPE0150 DS    0H\n         MVC   MSG01(NAMSGL),NAMSG SET MESSAGE\n         OI    COMMFLAG,$ABORT     SET ABORT FLAG\n         B     TAPE9900            AND EXIT\nTAPE0160 DS    0H\n         DITTRACE ID=PEOT\n         CLI   COMMENV,$ENVTSO     TSO USER?\n         BE    TAPE0180            YES\n         CLI   COMMENV,$ENVJOB     BATCH JOB?\n         BE    TAPE0170            YES\n         WTO   'PHYSICAL EOT REACHED ON OUTPUT COMMAND TERMINATED',    +\n               CONSNAME=COMMCNAM\nTAPE0170 DS    0H\n         MVI   PRTCMMD,$PRTDATA    SET PRINTER COMMAND\n         MVC   PRTDATA(PEOTMSGL),PEOTMSG\n         LA    R1,PRTBLOK          PRINTER INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             PRINT MESSAGE\n         OI    COMMFLAG,$COMMEOF   SET EOF FLAG\n         B     TAPE9900            AND EXIT\nTAPE0180 DS    0H\n         MVC   MSG01(PEOTMSGL),PEOTMSG\n         OI    COMMFLAG,$COMMEOF   SET EOF FLAG\n         B     TAPE9900            AND EXIT\nTAPE0190 DS    0H\n         DITTRACE ID=FILEPROT\n         CLI   COMMENV,$ENVTSO     TSO USER?\n         BE    TAPE0210            YES\n         CLI   COMMENV,$ENVJOB     BATCH JOB?\n         BE    TAPE0200            YES\n         WTO   'OUTPUT TAPE IS FILE PROTECTED (NO WRITE RING)',        +\n               CONSNAME=COMMCNAM\nTAPE0200 DS    0H\n         MVI   PRTCMMD,$PRTDATA    SET PRINTER COMMAND\n         MVC   PRTDATA(PROTMSGL),PROTMSG\n         LA    R1,PRTBLOK          PRINTER INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             PRINT MESSAGE\n         OI    COMMFLAG,$COMMEOF   SET EOF FLAG\n         B     TAPE9900            AND EXIT\nTAPE0210 DS    0H\n         MVC   MSG01(PROTMSGL),PROTMSG\n         OI    COMMFLAG,$COMMEOF   SET EOF FLAG\n         B     TAPE9900            AND EXIT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                    ERROR ROUTINES                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE0400 DS    0H\n         LA    R3,DYNIOB           POINT TO IOB\n         DITTRACE ID=WRITERR       TRACE I/O ERRORS\n         DC    H'0'                ABEND\nTAPE0410 DS    0H\n         OI    COMMFLAG,$ABORT     ABORT CURRENT FUNCTION\n         CLI   COMMENV,$ENVTSO     TSO ENVIRONMENT?\n         BE    TAPE0420            YES\n         MVC   PRTDATA(LONGMSGL),LONGMSG\n         MVI   PRTCC,C'0'          MOVE CARRIAGE CONTROL\n         LA    R1,PRTBLOK          POINT TO PRINT BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO PRINT MODULE\n         CLI   COMMENV,$ENVSTC     RUNNING AS A STARTED TASK??\n         BNE   TAPE9900            NO\n         WTO   'RECORD ENCOUNTERED THAT IS LONGER THAN MAXIMUM OUTPUT B+\n               LOCK SIZE',                                             +\n               CONSNAME=COMMCNAM\n         B     TAPE9900            EXIT\nTAPE0420 DS    0H\n         MVC   MSG02(LONGMSGL),LONGMSG\n         B     TAPE9900            EXIT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE9900 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO OPERATING SYSTEM           ASE01700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORKAREAS/CONSTANTS                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWRITECCW CCW   X'01',*,SILI,0      WRITE CCW\nWTMCCW   CCW   X'1F',*,SILI,24     WRITE TAPE MARK CCW\nTAPESAVE DC    18F'0'              REGISTER SAVE AREA\nTAPECRCD DC    A(0)                CURRENT RECORD ADDRESS\nTAPEREM  DC    H'0'                LENGTH REMAINING IN RECORD\nTAPEBLKS DC    PL5'0'              BLOCKS WRITTEN TO OUTPUT\nBLKSEDWD DC    X'402020206B2020206B202120'\nTAPETAPE DC    CL4'TAPE'           CONSTANT\nLONGMSG  DC    C'* * * * * * TAPE RECORD ENCOUNTERED ON INPUT LONGER TH+\n               AN MAXIMUM OUTPUT BLOCK SIZE * * * * * *'\nLONGMSGL EQU   *-LONGMSG\nBLKSMSG  DS    0C\nPRBLKS   DC    CL12' '\n         DC    C' BLOCKS AND TAPE MARK WRITTEN TO OUTPUT'\nBLKSMSGL EQU   *-BLKSMSG\nNAMSG    DC    C'TAPE OUTPUT NOT ALLOWED WHILE TAPE IS AT PHYSICAL EOT'\nNAMSGL   EQU   *-NAMSG\nPEOTMSG  DC    C'PHYSICAL EOT REACHED ON OUTPUT, COMMAND TERMINATED'\nPEOTMSGL EQU   *-PEOTMSG\nPROTMSG  DC    C'OUTPUT TAPE IS FILE PROTECTED (NO WRITE RING), COMMAND+\n               TERMINATED'\nPROTMSGL EQU   *-PROTMSG\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXCP INTERFACE BLOCK                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXCPBLOK EXCPBLOK\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\nSILI     EQU   X'20'\n         ABCODES\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC BLOCK DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS IOB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZIOB\nIOBLEN   EQU  *-IOB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS DCB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DCBD DSORG=PS\nDYNDCBL  EQU   *-IHADCB\n         END  DITTTPO1\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTTPO2": {"ttr": 4868, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              TAPE REWIND                                            *\n*                                                                     *\n*       THIS MODULE PERFORMS THE REW FUNCTION                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTTPO2 DITTPRFX TAPESAVE,'TAPE REWIND MODULE'\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY         TRACE ENTRY\nTAPE0010 DS    0H\n         TM    COMMFLAG,$COMMCLS   CLOSE FILE INDICATOR??\n         BO    TAPE9900            YES\n         L     R10,COMMOUTD        DYNAMIC BLOCK ADDRESS\n         USING DYNBLOK,R10         SPECIFY BASE\n         ST    R10,EXCPDYN         PASS DYNAMIC BLOCK ADDRESS TO EXCP\n         LA    R2,DYNDCB           POINT TO DCB\n         USING IHADCB,R2           ADDRESS DCB\n         DITTRACE ID=CCWINIT       TRACE INTIALIZE ROUTINE\n         L     R1,ACOMMIOI         POINT TO INPUT BUFFER\n         STCM  R1,7,REWCCW+1       RELOCATE BUFFER ADDRESS\nTAPE0020 DS    0H\n         MVC   DYNCCW,REWCCW       INITIALIZE THE CCW\n         LA    R1,EXCPBLOK         EXCP INTERFACE PARAMETERS\n         L     R15,AEXCP           EXCP MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO EXCP MODULE\n         CLI   EXCPSTAT,$EXCPNA    I/O NOT ALLOWED?\n         BE    TAPE0030            NOT ALLOWED\n         TM    DYNSTAT,$DYNPEOT    PHYSICAL EOT REACHED?\n         BO    TAPE0040            YES\n         CLI   EXCPSTAT,$EXCPOK    I/O SUCCESSFUL??\n         BNE   TAPE0400            NO\n         OI    COMMFLAG,$COMMEOF   SET END-OF-FILE FLAG\n         B     TAPE9900            EXIT\nTAPE0030 DS    0H\n         DITTRACE ID=NOTALLOW\n         ABEND ABEND027,DUMP,,USER ABEND\nTAPE0040 DS    0H\n         DITTRACE ID=PEOT\n         ABEND ABEND028,DUMP,,USER ABEND\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                    ERROR ROUTINES                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE0400 DS    0H\n         LA    R2,DYNBLOK          POINT TO DYNAMIC BLOCK\n         LA    R3,DYNDCB           POINT TO DCB\n         LA    R4,DYNIOB           POINT TO IOB\n         LA    R5,DYNECB           POINT TO ECB\n         DITTRACE ID=BADIO         TRACE I/O FAILURES\n         DC    H'0'                ABEND\n         B     TAPE9900            EXIT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE9900 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO OPERATING SYSTEM           ASE01700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORKAREAS/CONSTANTS                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREWCCW   CCW   X'07',*,SILI,1      REWIND CCW\nTAPESAVE DC    18F'0'              REGISTER SAVE AREA\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT REQUEST BLOCK                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXCP INTERFACE BLOCK                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXCPBLOK EXCPBLOK\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\nSILI     EQU   X'20'\n         ABCODES\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC BLOCK DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS IOB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZIOB\nIOBLEN   EQU  *-IOB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS DCB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DCBD DSORG=PS\nDYNDCBL  EQU   *-IHADCB\n         END  DITTTPO2\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTTPO3": {"ttr": 4872, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              TAPE REWIND AND UNLOAD                                 *\n*                                                                     *\n*       THIS ROUTINE PERFORMS THE RUN FUNCTION                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTTPO3 DITTPRFX TAPESAVE,'TAPE REWIND/UNLOAD MODULE'\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY         TRACE ENTRY\nTAPE0010 DS    0H\n         TM    COMMFLAG,$COMMCLS   CLOSE FILE INDICATOR??\n         BO    TAPE9900            YES\n         L     R10,COMMOUTD        DYNAMIC BLOCK ADDRESS\n         USING DYNBLOK,R10         SPECIFY BASE\n         ST    R10,EXCPDYN         PASS DYNAMIC BLOCK ADDRESS TO EXCP\n         LA    R2,DYNDCB           POINT TO DCB\n         USING IHADCB,R2           ADDRESS DCB\n         DITTRACE ID=CCWINIT       TRACE INTIALIZE ROUTINE\n         L     R1,ACOMMIOO         POINT TO INPUT BUFFER\n         STCM  R1,7,RUNCCW+1       RELOCATE BUFFER ADDRESS\nTAPE0020 DS    0H\n         MVC   DYNCCW,RUNCCW       INITIALIZE THE CCW\n         LA    R1,EXCPBLOK         EXCP INTERFACE PARAMETERS\n         L     R15,AEXCP           EXCP MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO EXCP MODULE\n         CLI   EXCPSTAT,$EXCPNA    I/O ALLOWED?\n         BE    TAPE0030            NOT ALLOWED\n         TM    DYNSTAT,$DYNPEOT    PHYSICAL EOT?\n         BO    TAPE0040            YES\n         CLI   EXCPSTAT,$EXCPOK    I/O SUCCESSFUL??\n         BNE   TAPE0400            NO\n         OI    COMMFLAG,$COMMEOF   SET END-OF-FILE FLAG\n         B     TAPE9900            EXIT\nTAPE0030 DS    0H\n         DITTRACE ID=NOTALLOW\n         ABEND ABEND029,DUMP,,USER ABEND\nTAPE0040 DS    0H\n         DITTRACE ID=PEOT\n         ABEND ABEND030,DUMP,,USER ABEND\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                    ERROR ROUTINES                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE0400 DS    0H\n         LA    R2,DYNBLOK          POINT TO DYNAMIC BLOCK\n         LA    R3,DYNDCB           POINT TO DCB\n         LA    R4,DYNIOB           POINT TO IOB\n         LA    R5,DYNECB           POINT TO ECB\n         DITTRACE ID=BADIO         TRACE I/O FAILURES\n         DC    H'0'\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE9900 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO OPERATING SYSTEM           ASE01700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORKAREAS/CONSTANTS                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRUNCCW   CCW   X'0F',*,SILI,1      READ FORWARD CCW\nTAPESAVE DC    18F'0'              REGISTER SAVE AREA\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT REQUEST BLOCK                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXCP INTERFACE BLOCK                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXCPBLOK EXCPBLOK\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\nSILI     EQU   X'20'\n         ABCODES\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC BLOCK DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS IOB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZIOB\nIOBLEN   EQU  *-IOB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS DCB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DCBD DSORG=PS\nDYNDCBL  EQU   *-IHADCB\n         END  DITTTPO3\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTTPO4": {"ttr": 4876, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              WRITE TAPE MARK                                        *\n*                                                                     *\n*       THIS MODULE PERFORMS THE WTM FUNCTION                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTTPO4 DITTPRFX TAPESAVE,'TAPE MARK MODULE'\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY         TRACE ENTRY\nTAPE0010 DS    0H\n         TM    COMMFLAG,$COMMCLS   CLOSE FILE INDICATOR??\n         BO    TAPE9900            YES\n         L     R10,COMMOUTD        DYNAMIC BLOCK ADDRESS\n         USING DYNBLOK,R10         SPECIFY BASE\n         ST    R10,EXCPDYN         PASS DYNAMIC BLOCK ADDRESS TO EXCP\n         LA    R2,DYNDCB           POINT TO DCB\n         USING IHADCB,R2           ADDRESS DCB\n         DITTRACE ID=CCWINIT       TRACE INTIALIZE ROUTINE\n         L     R1,ACOMMIOI         POINT TO INPUT BUFFER\n         STCM  R1,7,WTMCCW+1       RELOCATE BUFFER ADDRESS\nTAPE0020 DS    0H\n         ZAP   TAPEMRKS,COMMP0     ZERO MARKS WRITTEN\n         LA    R4,1                ASSUME 1 TAPE MARK\n         TM    COMMPFLG,$COMMRCS   NUMBER TO WRITE GIVEN??\n         BNO   TAPE0030            NO\n         ZAP   COMMDWRD,COMMRCDS   MOVE TO DOUBLE WORD\n         CVB   R4,COMMDWRD         CONVERT TO BINARY\n         LTR   R4,R4               WAS IT > ZERO??\n         BZ    TAPE0040            NO\n         BM    TAPE0040            NO\nTAPE0030 DS    0H\n         MVC   DYNCCW,WTMCCW       INITIALIZE THE CCW\n         LA    R1,EXCPBLOK         EXCP INTERFACE PARAMETERS\n         L     R15,AEXCP           EXCP MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO EXCP MODULE\n         CLI   EXCPSTAT,$EXCPNA    I/O ALLOWED?\n         BE    TAPE0060            NOT ALLOWED\n         TM    DYNSTAT,$DYNPROT    TAPE FILE PROTECTED?\n         BO    TAPE0120            YES\n         TM    DYNSTAT,$DYNPEOT    PHYSICAL EOT REACHED?\n         BO    TAPE0090            YES\n         CLI   EXCPSTAT,$EXCPOK    I/O SUCCESSFUL??\n         BNE   TAPE0400            NO\n         AP    TAPEMRKS,COMMP1     ADD 1 TO NUMBER WRITTEN\n         BCT   R4,TAPE0030         WRITE ALL REQUESTED\nTAPE0040 DS    0H\n         OI    COMMFLAG,$COMMEOF   SET END-OF-FILE FLAG\n         MVC   PRMRKS,MRKSEDWD     MOVE EDIT WORD\n         ED    PRMRKS,TAPEMRKS     EDIT NUMBER WRITTEN\n         CLI   COMMENV,$ENVTSO     TSO ENVIRONMENT?\n         BE    TAPE0050            YES\n         MVI   PRTCC,C'0'          DOUBLE SPACE\n         MVI   PRTCMMD,$PRTDATA    PRINT\n         MVC   PRTDATA(MRKSMSGL),MRKSMSG\n         LA    R1,PRTBLOK          PASS PARAMETER BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             PRINT TAPE MARKS MESSAGE\n         B     TAPE9900            EXIT\nTAPE0050 DS    0H\n         MVC   MSG01(MRKSMSGL),MRKSMSG\n         B     TAPE9900            EXIT\nTAPE0060 DS    0H\n         DITTRACE ID=NOTALLOW\n         CLI   COMMENV,$ENVTSO     TSO USER?\n         BE    TAPE0080            YES\n         CLI   COMMENV,$ENVJOB     BATCH JOB?\n         BE    TAPE0070            YES\n         WTO   'WTM NOT ALLOWED WHILE TAPE IS AT PHYSICAL EOT',        +\n               CONSNAME=COMMCNAM\nTAPE0070 DS    0H\n         MVI   PRTCMMD,$PRTCMD     SET PRINT COMMAND\n         MVC   PRTDATA(NAMSGL),NAMSG\n         LA    R1,PRTBLOK          PRINTER INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             PRINT MESSAGE\n         OI    COMMFLAG,$ABORT     SET ABORT FLAG\n         B     TAPE9900            AND EXIT\nTAPE0080 DS    0H\n         MVC   MSG01(NAMSGL),NAMSG SET MESSAGE\n         OI    COMMFLAG,$ABORT     SET ABORT FLAG\n         B     TAPE9900            AND EXIT\nTAPE0090 DS    0H\n         DITTRACE ID=PEOT\n         CLI   COMMENV,$ENVTSO     TSO USER?\n         BE    TAPE0110            YES\n         CLI   COMMENV,$ENVJOB     BATCH JOB?\n         BE    TAPE0100            YES\n         WTO   'PHYSICAL EOT REACHED, WTM TERMINATED',                 +\n               CONSNAME=COMMCNAM\nTAPE0100 DS    0H\n         MVI   PRTCMMD,$PRTDATA    SET PRINT COMMAND\n         MVC   PRTDATA(PEOTMSGL),PEOTMSG\n         LA    R1,PRTBLOK          PRINTER INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             PRINT MESSAGE\n         OI    COMMFLAG,$COMMEOF   SET EOF FLAG\n         B     TAPE9900            AND EXIT\nTAPE0110 DS    0H\n         MVC   MSG01(PEOTMSGL),PEOTMSG  SET MESSAGE\n         OI    COMMFLAG,$COMMEOF   SET EOF FLAG\n         B     TAPE9900            AND EXIT\nTAPE0120 DS    0H\n         DITTRACE ID=FILEPROT\n         CLI   COMMENV,$ENVTSO     TSO USER?\n         BE    TAPE0140            YES\n         CLI   COMMENV,$ENVJOB     BATCH JOB?\n         BE    TAPE0130            YES\n         WTO   'OUTPUT TAPE IS FILE PROTECTED (NO WRITE RING)',        +\n               CONSNAME=COMMCNAM\nTAPE0130 DS    0H\n         MVI   PRTCMMD,$PRTDATA    SET PRINT COMMAND\n         MVC   PRTDATA(PROTMSGL),PROTMSG\n         LA    R1,PRTBLOK          PRINTER INTERFACE BLOCK\n         L     R15,APRT            PRINT MODULE ENTRY POINT\n         BALR  R14,R15             PRINT MESSAGE\n         OI    COMMFLAG,$COMMEOF   SET EOF FLAG\n         B     TAPE9900            AND EXIT\nTAPE0140 DS    0H\n         MVC   MSG01(PROTMSGL),PROTMSG SET MESSAGE\n         OI    COMMFLAG,$COMMEOF   SET EOF FLAG\n         B     TAPE9900            AND EXIT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                    ERROR ROUTINES                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE0400 DS    0H\n         LA    R2,DYNBLOK          POINT TO DYNAMIC BLOCK\n         LA    R3,DYNDCB           POINT TO DCB\n         LA    R4,DYNIOB           POINT TO IOB\n         LA    R5,DYNECB           POINT TO ECB\n         DITTRACE ID=BADIO         TRACE I/O FAILURES\n         DC    H'0'                ABEND\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE9900 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO OPERATING SYSTEM           ASE01700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORKAREAS/CONSTANTS                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nWTMCCW   CCW   X'1F',*,SILI,24     WRITE-TAPE-MARK CCW\nTAPESAVE DC    18F'0'              REGISTER SAVE AREA\nMRKSEDWD DC    X'402020206B2020206B202120'\nTAPEMRKS DC    PL5'0'              TAPE MARKS WRITTEN\nMRKSMSG  DS    0C\nPRMRKS   DC    CL12' '\n         DC    C' TAPE MARKS WRITTEN TO OUTPUT'\nMRKSMSGL EQU   *-MRKSMSG\nNAMSG    DC    C'WTM NOT ALLOWED WHILE TAPE IS AT PHYSICAL EOT'\nNAMSGL   EQU   *-NAMSG\nPEOTMSG  DC    C'PHYSICAL EOT REACHED, WTM TERMINATED'\nPEOTMSGL EQU   *-PEOTMSG\nPROTMSG  DC    C'OUTPUT TAPE IS FILE PROTECTED (NO WRITE RING), COMMAND+\n                TERMINATED'\nPROTMSGL EQU   *-PROTMSG\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PRINT MODULE INTERFACE BLOCK                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRTBLOK  PRTBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXCP INTERFACE BLOCK                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXCPBLOK EXCPBLOK\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\nSILI     EQU   X'20'\n         ABCODES\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC BLOCK DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS IOB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZIOB\nIOBLEN   EQU  *-IOB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS DCB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DCBD DSORG=PS\nDYNDCBL  EQU   *-IHADCB\n         END  DITTTPO4\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTTSOM": {"ttr": 3592, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              TSO MAINLINE                                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTTSOM DITTPRFX TSOMSAVE,'TSO MAINLINE PROGRAM'\n         USING DITTCOMM,R11        SPECIFY BASE\n         USING DYNBLOK,R3          DEFINE BASE\n         LOAD  EP=ISPLINK          LOAD SPF INTERFACE\n         ST    R0,AISP             SAVE SPF INTERFACE ADDRESS\n         LA    R2,CMDPARM          'CMD' VDEF PARAMETERS\n         BAL   R10,VDEF0000        LINK TO 'VDEF'\n         LA    R2,KLPARM           'KEYLEN' VDEF PARAMETERS\n         BAL   R10,VDEF0000        LINK TO 'VDEF'\n         LA    R2,DLPARM           'DATALEN' VDEF PARAMETERS\n         BAL   R10,VDEF0000        LINK TO 'VDEF'\n         LA    R2,ADDRPARM         'DISKADDR' VDEF PARAMETERS\n         BAL   R10,VDEF0000        LINK TO 'VDEF'\n         LA    R2,DATAPARM         'DATA' VDEF PARAMETERS\n         BAL   R10,VDEF0000        LINK TO 'VDEF'\n         LA    R2,SAMPPARM         'SAMPLE' VDEF PARAMETERS\n         BAL   R10,VDEF0000        LINK TO 'VDEF'\n         LA    R2,DCMDPARM         'CMD01-CMD05' VDEF PARAMETERS\n         BAL   R10,VDEF0000        LINK TO 'VDEF'\n         LA    R2,TAPEPARM         'TAPE01' VDEF PARAMETERS\n         BAL   R10,VDEF0000        LINK TO 'VDEF'\n         LA    R2,DASDPARM         'DASD01' VDEF PARAMETERS\n         BAL   R10,VDEF0000        LINK TO 'VDEF'\n         LA    R2,MSGPARM          'MSG01-MSG05' VDEF PARAMETERS\n         BAL   R10,VDEF0000        LINK TO 'VDEF'\n         L     R2,AATTN            ATTENTION EXIT ADDRESS\n         STAX  (R2),               SET ATTENTION EXIT                  +\n               USADDR=(R11)        .. COMM AREA ADDRESS WILL BE HELPFUL\nMENU0000 DS    0H\n         DITTRACE ID=MENU\n         LA    R1,CMD01            FIRST COMMAND DISPLAY AREA\n         LA    R2,50               NUMBER OF DISPLAYABLE COMMANDS\n         L     R5,ACMD             FUNCTION TABLE ADDRESS\n         USING FUNCBLOK,R5         DEFINE ADDRESSIBLITY\nMENU0010 DS    0H\n         CLI   FUNCELEN,X'FF'      END OF TABLE??\n         BE    MENU0030            YES.. EXIT\n         TM    FUNCENV,$FUNCTSO    DOES THIS COMMAND APPLY?\n         BNO   MENU0020            NO\n         MVC   0(L'FUNCCMD,R1),FUNCCMD\n         LA    R1,6(R1)            NEXT COMMAND AREA\n         BCT   R2,MENU0020         1 LESS LEFT\n         B     MENU0030            ALL USED UP\nMENU0020 DS    0H\n         AH    R5,FUNCELEN         NEXT COMMAND\n         B     MENU0010            LOOP\nMENU0030 DS    0H\n         MVC   CMD,MAINCMD         RESTORE SAVED COMMAND\n         MVC   TAPE01,COMMBLKS     INITIALIZE ALLOCATED UNITS AREA\n         MVC   TAPE01(MAINM01L),MAINM01 MOVE IN 'NONE' MESSAGE\n         ICM   R3,15,COMMDYHD      FIRST DYNAMIC BLOCK\n         BZ    MENU0090            NO DEVICES ALLOCATED\n         LA    R4,TAPE01           FIRST UNIT IN DISPLAY AREA\n         LA    R5,6                NUMBER OF UNITS DISPLAYABLE\n         USING TAPEDSCT,R4         DEFINE BASE\nMENU0040 DS    0H\n         CLC   TSOTAPE,DYNDDNAM    IS THIS A TAPE UNIT?\n         BNE   MENU0080            NOPE\n         MVC   TAPECUU(TAPEL),COMMBLKS   INTIALIZE THIS ENTRY\n         MVC   TAPECUU,DYNDDNAM+5  MOVE CUU FROM DDNAME\n         L     R1,DYNDEBA          DEB ADDRESS\n         USING DEB,R1              DEFINE DEB BASE\n         CLI   DEBSDVM,$DEN1600    1600 BPI DENSITY?\n         BE    MENU0050            YES\n         CLI   DEBSDVM,$DEN6250    6250 BPI DENSITY?\n         BE    MENU0060            YES\n         CLI   DEBSDVM,$DEN3480    3480 DRIVE?\n         BNE   MENU0070            NO\n         MVC   TAPEDEN(MAINM02L),MAINM02\n         B     MENU0070\nMENU0050 DS    0H\n         MVC   TAPEDEN(MAINM03L),MAINM03\n         B     MENU0070\nMENU0060 DS    0H\n         MVC   TAPEDEN(MAINM04L),MAINM04\nMENU0070 DS    0H\n         LA    R4,TAPEL(R4)        NEXT DISPLAY AREA\n         BCT   R5,MENU0080         MINUS 1 DISPLAY AREA\n         B     MENU0090            ALL DISPLAY AREA USED\nMENU0080 DS    0H\n         ICM   R3,15,DYNNEXT       NEXT DYNAMIC BLOCK\n         BNZ   MENU0040            CONTINUE\nMENU0090 DS    0H\n         MVC   DASD01,COMMBLKS     INITIALIZE ALLOCATED UNITS AREA\n         MVC   DASD01(MAINM01L),MAINM01 MOVE IN 'NONE' MESSAGE\n         ICM   R3,15,COMMDYHD      FIRST DYNAMIC BLOCK\n         BZ    MENU0120            NO DEVICES ALLOCATED\n         LA    R4,DASD01           FIRST UNIT IN DISPLAY AREA\n         LA    R5,4                NUMBER OF UNITS DISPLAYABLE\n         USING DASDDSCT,R4         DEFINE BASE\nMENU0100 DS    0H\n         CLC   TSOTAPE,DYNDDNAM    IS THIS A TAPE UNIT?\n         BE    MENU0110            YES\n         MVC   DASDCUU(DASDL),COMMBLKS   INTIALIZE THIS ENTRY\n         MVC   DASDCUU,DYNDDNAM+5  COPY DASD CUU\n         MVC   DASDVOL,DYNVOL      MOVE VOLSER\n         LA    R4,DASDL(R4)        NEXT DISPLAY AREA\n         BCT   R5,MENU0110         MINUS 1 DISPLAY AREA\n         B     MENU0120            ALL DISPLAY AREA USED\nMENU0110 DS    0H\n         ICM   R3,15,DYNNEXT       NEXT DYNAMIC BLOCK\n         BNZ   MENU0100            CONTINUE\nMENU0120 DS    0H\n         LA    R1,DISPPARM         DISPLAY PARAMETERS\n         L     R15,AISP            SPF ENTRY POINT\n         BALR  R14,R15             LINK TO SPF\n         TM    COMMATTN,$ATTN      ATTENTION DRIVEN DURING MENU?\n         BO    ATTN0000            YES\n         CH    R15,H8              END/RETURN REQUESTED?\n         BE    MAIN9900            YES.. GO TO THE HOUSE\n         CLC   ABENDCMD,CMD        ABEND?\n         BE    ABEND000            YES\n         MVC   SAMPLE,COMMBLKS     CLEAR MESSAGE\n         MVC   MSG01,COMMBLKS      CLEAR MESSAGE\n         MVC   MSG02,COMMBLKS      CLEAR MESSAGE\n         MVC   MSG03,COMMBLKS      CLEAR MESSAGE\n         MVC   MSG04,COMMBLKS      CLEAR MESSAGE\n         MVC   MSG05,COMMBLKS      CLEAR MESSAGE\nMAIN0010 DS    0H\n         DITTRACE ID=NEWCMMD       TRACE\n         MVC   MAINCMD,CMD         SAVE USER'S COMMAND\n         CLC   TRACECMD,CMD        EXTERNAL TRACE?\n         BE    XTRACE00            YES\n         MVI   COMMPFLG,X'00'      CLEAR ANY OPTIONAL INDICATORS\n         NI    COMMFLAG,255-$ABORT CLEAR ABORT FLAG IF SET\n         NI    COMMFLAG,255-$COMMCER AND COMMAND ERROR FLAG IF SET\n         LA    R3,CMD              COMMAND INPUT AREA\n         LA    R4,L'CMD            MAX LENGTH OF REPLY\n         LA    R1,CMD+(L'CMD-1)    LAST BYTE OF COMMAND DATA\nTSO0000  DS    0H\n         CLI   0(R1),C' '          BLANK?\n         BH    TSO0010             NO\n         BCTR  R1,0                MINUS 1\n         BCT   R4,TSO0000          LOOP\n         B     TSO0020             NO DATA AT ALL\nTSO0010  DS    0H\n         BAL   R14,PARSE000        FIND COMMAND ON INPUT RECORD\n         OC    TSOWLEN,TSOWLEN     COMMAND PRESENT?\n         BNZ   TSO0030             YES\nTSO0020  DS    0H\n         MVC   MSG01(TSOM001L),TSOM001\n         B     MENU0030            REBUILD MENU\nTSO0030  DS    0H\n         L     R5,ACMD             FUNCTION TABLE ADDRESS\n         DITTRACE ID=SCANSTRT,     TRACE COMMAND TABLE SCAN START      +\n               DATA1=TSOWORK       .. CAPTURE THE COMMAND\nTSO0040  DS    0H\n         DITTRACE ID=SCANCMD       TRACE COMMAND TABLE SCAN\n         CLI   FUNCELEN,X'FF'      END OF TABLE??\n         BE    TSO0060             YES, INVALID COMMAND\n         TM    FUNCENV,$FUNCTSO    DOES THIS COMMAND APPLY?\n         BNO   TSO0050             NO\n         LH    R1,TSOWLEN          GET LENGTH\n         CH    R1,FUNCFLEN         FUNCTION LENGTH MATCH??\n         BNE   TSO0050             NO\n         BCTR  R1,0                AJUST FOR EXECUTE\n         EX    R1,TSOFCLC          CHECK FUNCTION CODE\n         BE    TSO0070             FOUND IT\nTSO0050  DS    0H\n         AH    R5,FUNCELEN         ADD ENTRY LENGTH\n         B     TSO0040             LOOP\nTSO0060  DS    0H\n         MVC   MSG01(TSOM002L),TSOM002\n         B     MENU0030            REBUILD MENU\nTSO0070  DS    0H\n         DITTRACE ID=CMMDFND       TRACE COMMAND FOUND\n         CLI   0(R3),C'?'          COMMAND EXAMPLE WANTED??\n         BNE   TSO0080             NO\n         DITTRACE ID=EXAMPLE       TRACE POINT\n         MVC   SAMPLE,FUNCEX2      MOVE COMMAND EXAMPLE\n         B     MENU0030            RE-BUILD MENU\nTSO0080  DS    0H\n         SR    R6,R6               CLEAR FOR NUMBER OF REQ PARMS\n         ICM   R6,3,FUNCNREQ       NUMBER OF REQUIRED PARAMETERS\n         BZ    TSO0120             NONE... TRY FOR OPTIONAL PARMS\n         LA    R7,FUNCREQ          FIRST REQUIRED PARAMETER\nTSO0090  DS    0H\n         DITTRACE ID=PARMSCAN      TRACE PARAMETER SEARCH START\n         LTR   R4,R4               ANY DATA LEFT IN REPLY??\n         BZ    TSO0300             NO... REQUIRED PARMS ARE MISSING\n         MVC   TSOWORK,COMMBLKS    INITIALIZE WORK AREA\n         BAL   R14,PARSE000        GET PARAMETER\n         OC    TSOWLEN,TSOWLEN     PARAMETER FOUND?\n         BZ    TSO0300             NO\n         DITTRACE ID=REQPARM       TRACE REQUIRED PARM CONVERSION\n         MVI   PARMCMMD,$PARMLOC   'LOCATE' COMMAND\nTSO0100  DS    0H\n         MVC   PARMPARM,0(R7)      PASS FIELD ID\n         MVC   PARMWORK,TSOWORK    PASS DATA\n         MVC   PARMWLEN,TSOWLEN    PASS DATA LENGTH\n         LA    R1,FUNCOPV          FIRST VALID VALUE FOR 'OPT'\n         ST    R1,PARMOPV          PASS ADDRESS TO DITTPARM\n         MVC   PARMOPN,FUNCOPN     NUMBER OF VALID VALUES\n         LA    R1,PARMBLOK         PARAMETER CONVERTER PARMS\n         L     R15,APARM           PARAMETER CONVERTER ENTRY PONT\n         BALR  R14,R15             LINK TO PARAMETER CONVERTER\n         TM    PARMFLAG,$PARMOK    PARAMETER OKEE AND DOKEE??\n         BO    TSO0110             YES\n         L     R1,PARMMSGA         MESSAGE ADDRESS\n         LH    R2,0(R1)            MESSAGE LENGTH\n         BCTR  R2,0                FOR EXECUTE\n         EX    R2,PARMMSGE         MOVE MESSAGE\n         B     MENU0030            RE-BUILD MENU\nTSO0110  DS    0H\n         LA    R7,1(R7)            NEXT REQUIRED PARAMETER\n         BCT   R6,TSO0090          PROCESS NEXT PARAMETER\n* ------------------------------------------------------------------- *\n*        ALL REQUIRED PARAMETERS HAVE BEEN PROCESSED.                 *\n*        NOW PROCESS ANY OPTIONAL PARAMETERS.                         *\n* ------------------------------------------------------------------- *\nTSO0120  DS     0H\n         SR    R6,R6               CLEAR FOR NUMBER OF OPTIONAL PARMS\n         ICM   R6,3,FUNCNOPT       NUMBER OF OPTIONAL PARAMETERS\n         BZ    TSO0160             NONE..\n         LA    R7,FUNCOPT          FIRST OPTIONAL PARAMETER\nTSO0130  DS    0H\n         LTR   R4,R4               ANY DATA LEFT IN REPLY??\n         BZ    PROC0000            NO\n         MVC   TSOWORK,COMMBLKS    INITIALIZE WORK AREA\n         BAL   R14,PARSE000        GET PARAMETER\n         OC    TSOWLEN,TSOWLEN     PARAMETER FOUND?\n         BZ    TSO0150             NO, PARAMETER OMITTED\n         DITTRACE ID=OPTPARM       TRACE OPTIONAL PARM CONVERSION\n         MVI   PARMCMMD,$PARMLOC   'LOCATE' COMMAND\nTSO0140  DS    0H\n         MVC   PARMPARM,0(R7)      FIELD ID\n         MVC   PARMWORK,TSOWORK    DATA\n         MVC   PARMWLEN,TSOWLEN    DATA LENGTH\n         LA    R1,FUNCOPV          FIRST VALID VALUE FOR 'OPT'\n         ST    R1,PARMOPV          PASS ADDRESS TO DITTPARM\n         MVC   PARMOPN,FUNCOPN     NUMBER OF VALID VALUES\n         LA    R1,PARMBLOK         PARAMETER CONVERTER PARMS\n         L     R15,APARM           PARAMETER CONVERTER ENTRY POINT\n         BALR  R14,R15             LINK TO PARAMETER CONVERTER\n         TM    PARMFLAG,$PARMOK    PARAMETER OKEE AND DOKEE??\n         BO    TSO0150             YES\n         L     R1,PARMMSGA         MESSAGE ADDRESS\n         LH    R2,0(R1)            MESSAGE LENGTH\n         BCTR  R2,0                FOR EXECUTE\n         EX    R2,PARMMSGE         MOVE MESSAGE\n         B     MENU0030            REBUILD MENU\nTSO0150  DS    0H\n         LA    R7,1(R7)            NEXT OPTIONAL PARAMETER\n         BCT   R6,TSO0130          PROCESS NEXT PARAMETER\nTSO0160  DS    0H\n         LTR   R4,R4               ANY EXTRANEOUS DATA?\n         BZ    PROC0000            NO\n         MVC   MSG01(TSOM003L),TSOM003\n         B     MENU0030            REBUILD MENU\n         SPACE 2\n* ------------------------------------------------------------------- *\n*        OPERATOR COMMAND EXHAUSTED.  WE STILL NEED SOME REQUIRED     *\n*        PARAMETERS.  BUILD MESSAGES FOR UP TO 5 MISSING PARMS.       *\n* ------------------------------------------------------------------- *\nTSO0300  DS    0H\n         DITTRACE ID=MISSING       ENTRY INTO MISSING PARM PROMPTS\n         LA    R2,5                NUMBER OF MESSAGE AREAS\n         LA    R3,MSG01            FIRST MESSAGE AREA\n         MVI   PARMCMMD,$PARMMIS   RETURN MESSAGE FOR MISSING PARMS\nTSO0310  DS    0H\n         MVC   PARMPARM,0(R7)      FIELD ID\n         LA    R1,PARMBLOK         PARAMETER CONVERTER PARMS\n         L     R15,APARM           PARAMETER CONVERTER ENTRY POINT\n         BALR  R14,R15             LINK TO PARAMETER CONVERTER\n         L     R1,PARMMSGA         MESSAGE ADDRESS\n         LH    R14,0(R1)           MESSAGE LENGTH\n         BCTR  R14,0               FOR EXECUTE\n         EX    R14,PARMMSGM        MOVE MESSAGE\n         LA    R3,L'MSG01(R3)      NEXT MESSAGE AREA\n         BCT   R2,TSO0320          ACCOUNT FOR MESSAGE AREA USED\n         B     MENU0030            ALL AREAS USED\nTSO0320  DS    0H\n         LTR   R4,R4               WAS ANY COMMAND DATA LEFT?\n         BNZ   MENU0030            YES.. ONLY ISSUE MESSAGE FOR 1 PARM\n         LA    R7,1(R7)            NEXT REQUIRED PARAMETER\n         BCT   R6,TSO0310          PROCESS NEXT PARAMETER\n         B     MENU0030            ALL AREAS USED\n* ------------------------------------------------------------------- *\n*        ALL PARAMETERS PROCESSED.  PASS INPUT AND OUTPUT MODULE      *\n*        ADDRESSES AND FLAGS.                                         *\n* ------------------------------------------------------------------- *\nPROC0000 DS    0H\n         MVC   COMMPANL,FUNCPANL   PANEL NAME FOR DISPLAY\n         MVC   COMMIFLG,FUNCIFLG   INPUT MODULE FLAGS\n         MVC   COMMOFLG,FUNCOFLG   OUTPUT MODULE FLAGS\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,FUNCIN2        INPUT MODULE ADDRESS DISPLACEMENT\n         BZ    PROC0010            NO INPUT MODULE\n         LA    R2,DITTCOMM(R1)     INPUT MODULE ADDRESS ADDRESS\n         MVC   COMMINM,0(R2)       INPUT MODULE ADDRESS\nPROC0010 DS    0H\n         ICM   R1,3,FUNCOUT2       TSO OUTPUT MODULE ADDRESS DISP\n         BZ    PROC0030            NO OUTPUT MODULE\nPROC0020 DS    0H\n         LA    R2,DITTCOMM(R1)     OUTPUT MODULE ADDRESS ADDRESS\n         MVC   COMMOUTM,0(R2)      OUTPUT MODULE ADDRESS\nPROC0030 DS    0H\n         MVC   CMD,COMMBLKS        CLEAR COMMAND AREA\n         CLC   COMMINM,AALOC       IS INPUT MODULE 'ALOC'?\n         BE    PROC0090            YES\n         OC    COMMINM,COMMINM     IS THERE AN INPUT MODULE?\n         BZ    PROC0060            NO\n         OC    COMMINU,COMMINU     IS THERE AN INPUT UNIT?\n         BZ    PROC0060            NO\n         DITTRACE ID=ALOCIN        ALLOCATE INPUT\n         MVI   DAIRCMMD,$DAIRLOC   DAIR COMMAND\n         MVI   DAIRTYPE,$DAIRCUU   LOCATE DYNAMIC BLOCK BY CUU\n         MVC   DAIRCUU,COMMINU     SET CUU\n         LA    R1,DAIRBLOK         DAIR PARAMETERS\n         L     R15,ADAIR           DAIR MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO DAIR INTERFACE\n         CLI   DAIRSTAT,$DAIRSOK   DAIR SUCCESSFUL?\n         BE    PROC0050            YES\n         CLI   DAIRSTAT,$DAIRSLE   DYNAMIC BLOCK NOT LOCATED?\n         BE    PROC0040            YES\n         ABEND ABEND011,DUMP,,USER UNEXPECTED STATUS FROM DITTDAIR\nPROC0040 DS    0H\n         MVC   MSG01(MAINM06L),MAINM06\n         B     MENU0030            REBUILD MENU\nPROC0050 DS    0H\n         L     R1,COMMINM          INPUT MODULE ADDRESS\n         USING MODPRFX,R1          DEFINE BASE\n         ICM   R3,15,DAIRAREA      DYNAMIC BLOCK ADDRESS\n         CLC   PFXMODDS(4),DYNDDNAM   UNIT CONSISTENT?\n         BNE   PROC0200            NO\n         ST    R3,COMMIND          SAVE DYNAMIC BLOCK ADDRESS\nPROC0060 DS    0H\n         OC    COMMOUTM,COMMOUTM   IS THERE AN OUTPUT MODULE?\n         BZ    PROC0090            NO\n         OC    COMMOUTU,COMMOUTU   IS THERE AN OUTPUT DEVICE?\n         BZ    PROC0090            NO\n         DITTRACE ID=ALOCOUT       ALLOCATE INPUT\n         MVI   DAIRCMMD,$DAIRLOC   DAIR COMMAND\n         MVI   DAIRTYPE,$DAIRCUU   LOCATE DYNAMIC BLOCK BY CUU\n         MVC   DAIRCUU,COMMOUTU    SET CUU\n         LA    R1,DAIRBLOK         DAIR PARAMETERS\n         L     R15,ADAIR           DAIR MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO DAIR INTERFACE\n         CLI   DAIRSTAT,$DAIRSOK   DAIR SUCCESSFUL?\n         BE    PROC0080            YES\n         CLI   DAIRSTAT,$DAIRSLE   DYNAMIC BLOCK NOT LOCATED?\n         BE    PROC0070            YES\n         ABEND ABEND011,DUMP,,USER UNEXPECTED STATUS FROM DITTDAIR\nPROC0070 DS    0H\n         DITTRACE ID=OUTNTACQ\n         MVC   MSG01(MAINM07L),MAINM07\n         B     MENU0030            REBUILD MENU\nPROC0080 DS    0H\n         L     R1,COMMOUTM         OUTPUT MODULE ADDRESS\n         ICM   R3,15,DAIRAREA      DYNAMIC BLOCK ADDRESS\n         CLC   PFXMODDS(4),DYNDDNAM   UNIT CONSISTENT?\n         BNE   PROC0210            NO\n         ST    R3,COMMOUTD         SAVE DYNAMIC BLOCK ADDRESS\nPROC0090 DS    0H\n         DITTRACE ID=FIRST,        TRACE ENTRY INTO I/O LOOP           +\n               DATA1=COMMIND,                                          +\n               DATA2=COMMOUTD\n         OI    COMMFLAG,$COMM1ST   SIGNAL FIRST TIME\nPROC0100 DS    0H\n         TM    COMMATTN,$ATTN      ATTENTION EXIT DRIVEN?\n         BO    ATTN0010            YES\n         DITTRACE ID=CALLIN        TRACE\n         ICM   R15,15,COMMINM      INPUT MODULE ADDRESS\n         BZ    PROC0110            ZERO .. DON'T ATTEMPT TO INVOKE IT\n         SR    R1,R1               NO INPUT PARAMETER FROM MAIN\n         BALR  R14,R15             CALL INPUT\n         TM    COMMFLAG,$ABEND     ABEND SET BY INPUT??\n         BO    PROC0180            YES\n         TM    COMMFLAG,$ABORT     ABORT SET BY INPUT??\n         BO    PROC0130            YES\n         CLC   RTNCMD,CMD          'RETURN' COMMAND?\n         BE    PROC0130            YES\n         CLC   EXITCMD,CMD         'EXIT' COMMAND?\n         BE    PROC0130            YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        NOTE THAT THE EOF FLAG MAY BE SET BY AN OUTPUT ROUTINE.      *\n*        THIS IS THE CASE WHEN THE FUNCTION REQUIRES AN OUTPUT        *\n*        ROUTINE ONLY SUCH AS 'REW' OR 'RUN'.                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPROC0110 DS    0H\n         TM    COMMFLAG,$COMMEOF   END OF FILE ON INPUT??\n         BO    PROC0130            YES...\n         TM    COMMATTN,$ATTN      ATTENTION EXIT DRIVEN?\n         BO    ATTN0010            YES\n         DITTRACE ID=CALLOUT       TRACE\n         ICM   R15,15,COMMOUTM     OUTPUT MODULE ADDRESS\n         BZ    PROC0120            ZERO .. DON'T ATTEMPT TO INVOKE IT\n         SR    R1,R1               NO INPUT PARAMETER FROM MAIN\n         BALR  R14,R15             CALL OUTPUT\n         TM    COMMFLAG,$ABEND     ABEND SET BY OUTPUT??\n         BO    PROC0190            YES\n         TM    COMMFLAG,$ABORT     ABORT SET BY OUTPUT??\n         BO    PROC0130            YES\n         TM    COMMFLAG,$COMMEOF   END OF FILE ON OUTPUT??\n         BO    PROC0130            YES...\n         CLC   RTNCMD,CMD          'RETURN' COMMAND?\n         BE    PROC0130            YES\n         CLC   EXITCMD,CMD         'EXIT' COMMAND?\n         BE    PROC0130            YES\nPROC0120 DS    0H\n         NI    COMMFLAG,255-$COMM1ST TURN OFF FIRST TIME FLAG\n         B     PROC0100            LOOP 'TILL END OF FILE\nPROC0130 DS    0H\n         DITTRACE ID=CLOSE         'CLOSE' IN PROGRESS\n         NI    COMMFLAG,255-$COMM1ST TURN OFF FIRST TIME FLAG\n         OI    COMMFLAG,$COMMCLS   INDICATE CLOSE FILES\n         ICM   R15,15,COMMINM      INPUT MODULE ADDRESS\n         BZ    PROC0140            NO INPUT MODULE\n         BALR  R14,R15             ALLOW INPUT TO DO ANY CLEAN-UP\nPROC0140 DS    0H\n         ICM   R15,15,COMMOUTM     OUTPUT MODULE ADDRESS\n         BZ    PROC0150            NO OUTPUT MODULE\n         BALR  R14,R15             ALLOW OUTPUT TO DO ANY CLEAN-UP\nPROC0150 DS    0H\n         TM    COMMFLAG,$ABORT     COMMAND ABORTED?\n         BNO   PROC0160            NO\n         MVC   MSG05(MAINM05L),MAINM05\n         B     PROC0170            RE-INITIALIZE\nPROC0160 DS    0H\n         MVC   MSG05(MAINM09L),MAINM09\n         ICM   R3,15,COMMIND       INPUT DYNAMIC BLOCK ADDRESS\n         BZ    PROC0170            NO DYNAMIC BLOCK\n         CLC   TSOTAPE,DYNDDNAM    INPUT FROM TAPE?\n         BE    PROCX160            YES\n         TM    COMMFLAG,$COMMFE    EOF FORCED BY DASD EOF RECORD?\n         BNO   PROC0170            NO\n         MVC   MSG01(MAINM14L),MAINM14\n         B     PROC0170            RE-INITIALIZE\nPROCX160 DS    0H\n         TM    DYNSTAT,$DYNPEOT    PHYSICAL END OF TAPE REACHED?\n         BO    PROCX165            YES\n         TM    COMMFLAG,$COMMFE    EOF FORCED BY TAPE MARK?\n         BNO   PROC0170            NO, RE-INITIALIZE\n         MVC   MSG01(MAINM15L),MAINM15\n         B     PROC0170            RE-INITIALIZE\nPROCX165 DS    0H\n         MVC   MSG01(MAINM16L),MAINM16\n         B     PROC0170            RE-INITIALIZE\nPROC0170 DS    0H\n         DITTRACE ID=REINIT\n         NI    COMMFLAG,255-$COMMCLS TURN OFF CLOSE FLAG\n         NI    COMMFLAG,255-$COMMEOF TURN OFF EOF FLAG\n         NI    COMMFLAG,255-$COMMFE  TURN OFF FORCED EOF FLAG\n         XC    COMMINM,COMMINM     CLEAR MODULE ADDRESS\n         XC    COMMINU,COMMINU     CLEAR INPUT UNIT ADDRESS\n         XC    COMMOUTM,COMMOUTM   CLEAR MODULE ADDRESS\n         XC    COMMOUTU,COMMOUTU   CLEAR OUTPUT UNIT ADDRESS\n         B     MENU0030            RE-BUILD MENU\nPROC0180 DS    0H\n         DITTRACE ID=ABENDIN       INPUT REQUESTED ABEND\n         ABEND ABEND002,DUMP,,USER ABEND WITH REASON\nPROC0190 DS    0H\n         DITTRACE ID=ABENDOUT      OUTPUT REQUESTED ABEND\n         ABEND ABEND003,DUMP,,USER ABEND WITH REASON\nPROC0200 DS    0H\n         MVC   MSG01(MAINM12L),MAINM12\n         B     PROC0170            EXIT THIS COMMAND\nPROC0210 DS    0H\n         MVC   MSG01(MAINM13L),MAINM13\n         B     PROC0170            EXIT THIS COMMAND\n* ------------------------------------------------------------------- *\n*                                                                     *\n*           EXTERNAL TRACE CONTROL                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nXTRACE00 DS    0H\n         DITTRACE ID=XTRACE\n         CLC   ONCMD,CMD+6         TURN TRACE ON?\n         BE    XTRACE10            YES\n         CLC   OFFCMD,CMD+6        TURN TRACE OFF?\n         BE    XTRACE30            YES\n         MVC   MSG01(MAINM17L),MAINM17\n         B     MENU0030            BUILD MENU\nXTRACE10 DS    0H\n         DITTRACE ID=TRACEON\n         TM    XTRFLAG,$XTRACE     TRACE ALREADY ON?\n         BO    XTRACE20            YES\n         OI    XTRFLAG,$XTRACE     SET EXTERNAL TRACE FLAG\n         MVC   MSG01(MAINM08L),MAINM08\n         B     MENU0030            AND BUILD MENU\nXTRACE20 DS    0H\n         DITTRACE ID=DUPON\n         MVC   MSG01(MAINM18L),MAINM18\n         B     MENU0030            BUILD MENU\nXTRACE30 DS    0H\n         DITTRACE ID=TRACEOFF\n         TM    XTRFLAG,$XTRACE     TRACE ON?\n         BNO   XTRACE40            NO\n         MVC   MSG01(MAINM19L),MAINM19\n         NI    XTRFLAG,255-$XTRACE RESET FLAG\n         B     MENU0030            AND BUILD MENU\nXTRACE40 DS    0H\n         DITTRACE ID=DUPOFF\n         MVC   MSG01(MAINM20L),MAINM20\n         B     MENU0030            BUILD MENU\n         SPACE 2\nABEND000 DS    0H\n         DITTRACE ID=ABEND\n         ABEND ABEND999,DUMP,,USER ABEND AT OPERATOR'S REQUEST\nVDEF0000 DS    0H\n         USING VDEFDSCT,R2         DEFINE BASE\n         DITTRACE ID=VDEF,         TRACE CALLS FOR VARIABLE DEFINITIONS+\n               DATA1=VDEFNAME      .. CAPTURE VARIABLE BEING DEFINED\n         ST    R2,DEFLEN           SET VARIABLE LENGTH ADDRESS\n         OI    DEFLEN,X'80'        SET END OF LIST\n         LA    R3,VDEFNAME         1ST NAME/DISPLACEMENT\n         USING VDEFNAME,R3         DEFINE BASE\nVDEF0010 DS    0H\n         CLI   VDEFNAME,X'FF'      END OF LIST?\n         BER   R10                 YES.. ALL DONE\n         ST    R3,DEFNAME          SET VARIABLE NAME ADDRESS\n         SR    R1,R1               CLEAR REGISTER\n         ICM   R1,3,VDEFDISP       DISPLACEMENT TO VARIABLE IN 'COMM'\n         AR    R1,R11              VARIABLE'S ADDRESS\n         ST    R1,DEFADDR          SET ADDRESS\n         LA    R1,DEFPARM          VDEF PARM LIST\n         L     R15,AISP            SPF ENTRY POINT\n         BALR  R14,R15             LINK TO SPF TO DEFINE VARIABLE\n         LTR   R4,R15              SPF RETURN CODE ZERO?\n         BNZ   VDEF0020            NO\n         LA    R3,VDEFNDL(R3)      NEXT NAME/DISPLACEMENT\n         B     VDEF0010            LOOP\nVDEF0020 DS    0H\n         DITTRACE ID=VDEFFAIL,     TRACE DEFINITION FAILURES           +\n               RDATA1=R4\n         ABEND ABEND007,DUMP,,USER\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              INPUT PARSER                                           *\n*         R1, R2, R15 ARE WORK REGISTERS                              *\n*         R3 HAS CURRENT INPUT ADDRESS                                *\n*         R4 LENGTH REMAINING ON INPUT                                *\n*         R14 IS RETURN ADDRESS                                       *\n*                                                                     *\n*         ON EXIT 'TSOWORK' CONTAINS DATA FOUND TO NEXT DELIMITER,    *\n*         UP TO 44 BYTES.  'TSOWLEN' CONTAINS ITS LENGTH.             *\n*         R3 WILL BE UPDATED PAST THE DELIMITER AND R4 WILL           *\n*         REFLECT LENGTH LEFT FOLLOWING THE DELIMITER.                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARSE000 DS    0H\n         LTR   R4,R4               ANY DATA LEFT IN RECORD??\n         BZR   R14                 NO.. EXIT\n         SR    R2,R2               CLEAR LENGTH COUNTER\n         XC    TSOWORK,TSOWORK     CLEAR WORK AREA\nPARSE010 DS    0H\n         CLI   0(R3),C' '          BLANK?\n         BH    PARSE020            NO\n         LA    R3,1(R3)            NEXT\n         BCT   R4,PARSE010         LOOP\n         B     PARSE050            NO DATA\nPARSE020 DS    0H\n         LA    R1,TSOWORK          POINT TO WORK AREA\n         LA    R15,44              MAXIMUM LENGTH\nPARSE030 DS    0H\n         CLI   0(R3),C' '          BLANK??\n         BE    PARSE050            YES\n         CLI   0(R3),C','          COMMA??\n         BE    PARSE050            YES\n         MVC   0(1,R1),0(R3)       MOVE IT\n         LA    R2,1(R2)            COUNT IT\n         LA    R3,1(R3)            NEXT\n         LA    R1,1(R1)            NEXT\n         BCT   R4,PARSE040         DECREMENT COUNT\n         STH   R2,TSOWLEN          SAVE CURRENT LENGTH\n         BR    R14                 LENGTH EXHAUSTED, EXIT HERE\nPARSE040 DS    0H\n         BCT   R15,PARSE030        LOOP\nPARSE050 DS    0H\n         STH   R2,TSOWLEN          SAVE WORK AREA ACTIVE LENGTH\n         LA    R3,1(R3)            SKIP DELIMITER\n         BCTR  R4,0                REMOVE DELIMITER LENGTH\n         BR    R14                 EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              ATTENTION EXIT                                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nATTN0000 DS    0H\n         DITTRACE ID=MENUSTAX      ATTENTION ENTERED WHILE IN MENU\n         LA    R1,MAINM10          MAINLINE INTERRUPTED\n         LA    R0,MAINM10L         TEXT LENGTH\n         TPUT  (R1),(R0)           ISSUE MESSAGE\n         B     MAIN9910            AND EXIT\nATTN0010 DS    0H\n         DITTRACE ID=FUNCSTAX\n         LA    R1,MAINM11          FUNCTION INTERRUPTED\n         LA    R0,MAINM11L         TEXT LENGTH\n         TPUT  (R1),(R0)           ISSUE MESSAGE\n         NI    COMMATTN,255-$ATTN  RESET ATTENTION FLAG\n         L     R2,AATTN            ATTENTION EXIT ADDRESS\n         STAX  (R2),               RE-ESTABLISH ATTENTION EXIT         +\n               USADDR=(R11)        .. COMM AREA ADDRESS WILL BE HELPFUL\n         B     PROC0130            INTERRUPT CURRENT I/O LOOP\nMAIN9900 DS    0H\n         STAX  ,                   CANCEL ANY STAX EXIT\nMAIN9910 DS    0H\n         DITTRACE ID=EXIT          TRACE\n         L     R2,COMMDYHD         FIRST BLOCK ON CHAIN\nMAIN9920 DS    0H\n         LTR   R3,R2               ADDRESS PRESENT??\n         USING DYNBLOK,R3          DEFINE BASE\n         BZ    MAIN9930            ALL HAVE BEEN RELEASED\n         DITTRACE ID=RELDYN,       TRACE RELEASE                       +\n               RDATA1=R2           .. SAVE DYNAMIC BLOCK ADDRESS\n         L     R2,DYNNEXT          NEXT DYNAMIC BLOCK ADDRESS\n         MVI   DAIRCMMD,$DAIRREL   SET COMMAND (RELEASE)\n         MVI   DAIRTYPE,$DAIRCUU   SET TYPE OF LOCATE (BY CUU)\n         MVC   DAIRCUU,DYNCUU      SET CUU\n         LA    R1,DAIRBLOK         PARAMETER BLOCK ADDRESS\n         L     R15,ADAIR           'DITTDAIR' ENTRY POINT\n         BALR  R14,R15             RELEASE THIS RESOURCE\n         CLI   DAIRSTAT,$DAIRSOK   SUCCESSFULLY RELEASED??\n         BE    MAIN9920            YES\n         ABEND ABEND008,DUMP,,USER ABEND\nMAIN9930 DS    0H\n         DITTRACE ID=RELDONE       DYNAMIC RELEASES ARE COMPLETE\n         TM    XTRFLAG,$XTROPEN    EXTERNAL TRACE FILE OPEN??\n         BNO   MAIN9940            NO\n         LA    R2,XTRDCB           EXTERNAL TRACE DCB\n         CLOSE ((R2))              CLOSE EXTERNAL TRACE\nMAIN9940 DS    0H\n         DELETE EP=ISPLINK         RELEASE SPF INTERFACE PROGRAM\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 GET OUT OF DODGE                     ASE01700\n* ------------------------------------------------------------------- *\n*                                                                     *\n*               EXECUTED INSTRUCTIONS                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOFCLC  CLC   FUNCCMD(0),TSOWORK   CORRECT COMMAND??\nPARMMSGE MVC   MSG01(0),2(R1)       MOVE ERROR MESSAGE\nPARMMSGM MVC   0(0,R3),2(R1)        MOVE 'MISSING' MESSAGE\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              PARAMETER CONVERTER INTERFACE                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPARMBLOK PARMBLOK\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC ALLOCATION INTERFACE                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDAIRBLOK DAIRBLOK TYPE=CSECT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              CONSTANTS/WORK AREAS                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOWORK  DC    CL44' '             PARSER OUTPUT WORK AREA\nTSOWLEN  DC    H'0'                CURRENT PARSER OUTPUT LENGTH\nDEFPARM  DC    A(VARDEF)         'VDEFINE' COMMAND\nDEFNAME  DC    A(0)              VARIABLE NAME\nDEFADDR  DC    A(0)              VARIABLE'S DATA ADDRESS\nDEFFORM  DC    A(CHARFORM)       VARIABLE FORMAT\nDEFLEN   DC    A(0)              VARIABLE LENGTH\nDISPPARM DC    A(DISPLAY)        'DISPLAY' COMMAND\n         DC    A(PANLNAME+X'80000000')\nVARDEF   DC    CL8'VDEFINE'      SPF 'VDEFINE' COMMAND\nDISPLAY  DC    CL8'DISPLAY'      SPF 'DISPLAY' COMMAND\nCHARFORM DC    CL4'CHAR'\nPANLNAME DC    CL8'DITTMENU'     PANEL NAME\nTSOTAPE  DC    CL4'TAPE'\nTRACECMD DC    C'TRACE '\nONCMD    DC    C'ON '\nOFFCMD   DC    C'OFF '\nABENDCMD DC    C'ABEND '\nRTNCMD   DC    C'RETURN '\nEXITCMD  DC    C'EXIT '\nMAINCMD  DC    CL67' '\n         SPACE 1\nCMDPARM  VDEF  LENGTH=67,                                              +\n               FIELDS=(CMD,CMD)\nKLPARM   VDEF  LENGTH=06,                                              +\n               FIELDS=(KEYLEN,KEYLEN)\nDLPARM   VDEF  LENGTH=06,                                              +\n               FIELDS=(DATALEN,DATALEN)\nADDRPARM VDEF  LENGTH=11,                                              +\n               FIELDS=(DISKADDR,DISKADDR)\nDATAPARM VDEF  LENGTH=79,                                              +\n               FIELDS=(DATA,DATA)\nSAMPPARM VDEF  LENGTH=67,                                              +\n               FIELDS=(SAMPLE,SAMPLE)\nDCMDPARM VDEF  LENGTH=60,                                              +\n               FIELDS=(CMD01,CMD01,                                    +\n               CMD02,CMD02,                                            +\n               CMD03,CMD03,                                            +\n               CMD04,CMD04,                                            +\n               CMD05,CMD05)\nTAPEPARM VDEF  LENGTH=60,                                              +\n               FIELDS=(TAPE01,TAPE01)\nDASDPARM VDEF  LENGTH=60,                                              +\n               FIELDS=(DASD01,DASD01)\nMSGPARM  VDEF  LENGTH=79,                                              +\n               FIELDS=(MSG01,MSG01,                                    +\n               MSG02,MSG02,                                            +\n               MSG03,MSG03,                                            +\n               MSG04,MSG04,                                            +\n               MSG05,MSG05)\nMAINHX0F DC    8X'0F'\nMAINHXCH DC    C'0123456789ABCDEF'\nTSOM001  DC    C'ENTER A DITTO COMMAND'\nTSOM001L EQU   *-TSOM001\nTSOM002  DC    C'INVALID DITTO COMMAND'\nTSOM002L EQU   *-TSOM002\nTSOM003  DC    C'EXTRANEOUS DATA IN COMMAND, RE-ENTER'\nTSOM003L EQU   *-TSOM003\nMAINM01  DC    C'NONE'\nMAINM01L EQU   *-MAINM01\nMAINM02  DC    C'3480'\nMAINM02L EQU   *-MAINM02\nMAINM03  DC    C'1600'\nMAINM03L EQU   *-MAINM03\nMAINM04  DC    C'6250'\nMAINM04L EQU   *-MAINM04\nMAINM05  DC    C'COMMAND ABORTED'\nMAINM05L EQU   *-MAINM05\nMAINM06  DC    C'INPUT UNIT NOT ALLOCATED, COMMAND ABORTED'\nMAINM06L EQU   *-MAINM06\nMAINM07  DC    C'OUTPUT UNIT NOT ALLOCATED, COMMAND ABORTED'\nMAINM07L EQU   *-MAINM07\nMAINM08  DC    C'EXTERNAL TRACE ACTIVATED'\nMAINM08L EQU   *-MAINM08\nMAINM09  DC    C'LAST FUNCTION TERMINATED NORMALLY'\nMAINM09L EQU   *-MAINM09\nMAINM10  DC    C'DITTO TERMINATED DUE TO ATTENTION INTERRUPT'\nMAINM10L EQU   *-MAINM10\nMAINM11  DC    C'CURRENT FUNCTION TERMINATED DUE TO ATTENTION INTERRUPT+\n               '\nMAINM11L EQU   *-MAINM11\nMAINM12  DC    C'INPUT DEVICE INCONSISTENT WITH COMMAND, COMMAND ABORTE+\n               D'\nMAINM12L EQU   *-MAINM12\nMAINM13  DC    C'OUTPUT DEVICE INCONSISTENT WITH COMMAND, COMMAND ABORT+\n               ED'\nMAINM13L EQU   *-MAINM13\nMAINM14  DC    C'EOF REACHED ON INPUT, COMMAND TERMINATED'\nMAINM14L EQU   *-MAINM14\nMAINM15  DC    C'TAPE MARK READ ON INPUT, COMMAND TERMINATED'\nMAINM15L EQU   *-MAINM15\nMAINM16  DC    C'PHYSICAL END OF TAPE REACHED ON INPUT, COMMAND TERMINA+\n               TED'\nMAINM16L EQU   *-MAINM16\nMAINM17  DC    C'INVALID TRACE COMMAND (''TRACE ON'' OR ''TRACE OFF'')'\nMAINM17L EQU   *-MAINM17\nMAINM18  DC    C'TRACE ALREADY ACTIVE'\nMAINM18L EQU   *-MAINM18\nMAINM19  DC    C'TRACE DE-ACTIVATED'\nMAINM19L EQU   *-MAINM19\nMAINM20  DC    C'TRACE NOT ACTIVE'\nMAINM20L EQU   *-MAINM20\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSOMSAVE DC    18F'0'              REGISTER SAVE AREA\nH8       DC    H'8'                CONSTANT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         ABCODES\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC RESOURCE CONTROL BLOCK                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK TYPE=SHORT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              FUNCTION TABLE BLOCK                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY FUNCBLOK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              VARIABLE PARAMETERS                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVDEFDSCT DSECT\nVDEFLEN  DS    AL4      VARIABLE LENGTH\nVDEFNAME DS    CL8      VARIABLE NAME\nVDEFDISP DS    AL2      DISPLACEMENT INTO 'DITTCOMM'\nVDEFNDL  EQU   *-VDEFNAME   NAME+DISPLACEMENT DATA LENGTH\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              ALLOCATED TAPE DEVICE DISPLAY                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPEDSCT DSECT\nTAPECUU  DS   CL3\n         DS   C\nTAPEDEN  DS   CL4\n         DS   CL2\nTAPEL    EQU  *-TAPEDSCT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              ALLOCATED DASD DEVICE DISPLAY                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDASDDSCT DSECT\nDASDCUU  DS   CL3\n         DS   C\nDASDVOL  DS   CL6\n         DS   CL5\nDASDL    EQU  *-DASDDSCT\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DATA EXTENT BLOCK                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZDEB LIST=NO\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTTSO1": {"ttr": 3853, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*                  CHARACTER ONLY DATA DISPLAY                        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTTSO1 DITTPRFX TSO1SAVE,'CHARACTER ONLY DATA DISPLAY'\n         USING DITTCOMM,R11        DEFINE COMM AREA BASE\n         DITTRACE ID=ENTRY         TRACE ENTRY\n         TM    COMMFLAG,$COMMCLS   CLOSING TIME?\n         BO    TSO0500             YES...\n         DITTRACE ID=DEFTABLE      TRACE TABLE DEFINITION\n         LA    R1,TBLEPARM         'DITTDATA' TABLE PARMS\n         L     R15,AISP            SPF INTERFACE ADDRESS\n         BALR  R14,R15             LINK TO SPF TO DEFINE TABLE\n         CH    R15,H4              SUCCESSFUL?\n         BH    ERR0010             NO...\n         L     R10,COMMIND         INPUT DYNAMIC BLOCK ADDRESS\n         USING DYNBLOK,R10         DEFINE BASE\n         CLC   TSOTAPE,DYNDDNAM    WAS INPUT FROM TAPE?\n         BE    TSO0020             YES...\n         SR    R1,R1               CLEAR REGISTER\n         IC    R1,COMMDREC         RECORD NUMBER\n         CVD   R1,COMMDWRD         CONVERT TO DECIMAL\n         MVC   EDWORK,EDWORD1      INITIALIZE WITH EDIT WORD\n         ED    EDWORK,COMMDWRD+5   EDIT RECORD NUMBER\n         MVC   DISKREC,EDWORK+3    COPY RECORD NUMBER\n         IC    R1,CNTKEYL          KEY LENGTH\n         CVD   R1,COMMDWRD         CONVERT TO DECIMAL\n         MVC   KEYLEN,EDWORD2      INITIALIZE WITH EDIT WORD\n         ED    KEYLEN,COMMDWRD+5   EDIT KEY LENGTH\n         ICM   R1,3,COMMDCYL       CYLINDER NUMBER\n         CVD   R1,COMMDWRD         CONVERT TO DECIMAL\n         MVC   EDWORK,EDWORD1      INITIALIZE WITH EDIT WORD\n         ED    EDWORK,COMMDWRD+5   EDIT CYLINDER NUMBER\n         MVC   DISKCYL,EDWORK+2    COPY CYLINDER NUMBER\n         ICM   R1,3,COMMDHD        HEAD NUMBER\n         CVD   R1,COMMDWRD         CONVERT TO DECIMAL\n         MVC   EDWORK,EDWORD1      INITIALIZE WITH EDIT WORD\n         ED    EDWORK,COMMDWRD+5   EDIT HEAD NUMBER\n         MVC   DISKHEAD,EDWORK+4   COPY HEAD NUMBER\n         ICM   R1,3,CNTDATAL       DATA LENGTH FROM COUNT\n         CVD   R1,COMMDWRD         CONVERT TO DECIMAL\n         MVC   DATALEN,EDWORD2     INITIALIZE WITH EDIT WORD\n         ED    DATALEN,COMMDWRD+5  EDIT DATA LENGTH\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DISPLAY 'KEY' IF PRESENT                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         SR    R3,R3               CLEAR REGISTER\n         ICM   R3,1,CNTKEYL        KEY LENGTH\n         BZ    TSO0010             NO 'KEY' TO DISPLAY\n         ICM   R4,15,COMMKEY       KEY'S ADDRESS\n         BZ    ERR0030             KEY LENGTH WITH NO KEY ADDRESS?\n         DITTRACE ID=DISPKEY,      TRACE                               +\n               RDATA1=R3,          .. KEY'S LENGTH                     +\n               RDATA2=R4           .. KEY'S ADDRESS\n         MVC   DATAAREA,COMMBLKS   INITIALIZE WORK AREA\n         MVC   KEYHEAD,=C'KEY'     SET HEADING\n         BAL   R9,TSO0100          BUILD DETAIL FOR KEY\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DISPLAY DATA                                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSO0010  DS    0H\n         DITTRACE ID=DISPDATA\n         SR    R3,R3               CLEAR REGISTER\n         ICM   R3,3,CNTDATAL       DATA LENGTH\n         BZ    TSO0300             NO DATA... DISPLAY THE TABLE\n         ICM   R4,15,COMMCRCD      DATA'S ADDRESS\n         BZ    ERR0040             DATA LENGTH WITH NO DATA ADDRESS?\n         TM    COMMOFLG,$DEBLOCK   DEBLOCKING RECORDS?\n         BO    TSO0030             YES..\n         MVC   DATAHEAD,=C'DATA'   SET HEADING\n         BAL   R9,TSO0100          BUILD DETAIL FOR DATA\n         B     TSO0300             DISPLAY TABLE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              TAPE DATA                                              *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSO0020  DS    0H\n         DITTRACE ID=TAPEDATA\n         SR    R3,R3               CLEAR REGISTER\n         ICM   R3,3,COMMCRCL       DATA LENGTH\n         BZ    ERR0040             NO DATA...\n         ICM   R4,15,COMMCRCD      DATA'S ADDRESS\n         BZ    ERR0040             DATA LENGTH WITH NO DATA ADDRESS?\n         CVD   R3,COMMDWRD         CONVERT TO DECIMAL\n         MVC   DATALEN,EDWORD2     INITIALIZE WITH EDIT WORD\n         ED    DATALEN,COMMDWRD+5  EDIT BLOCK SIZE\n         TM    COMMOFLG,$DEBLOCK   DEBLOCKING RECORDS?\n         BO    TSO0030             YES..\n         MVC   DATAHEAD,=C'DATA'   SET HEADING\n         BAL   R9,TSO0100          BUILD DETAIL FOR DATA\n         B     TSO0300             DISPLAY TABLE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DISPLAY DATA 1 LOGICAL RECORD AT A TIME                *\n*                                                                     *\n*         R3 IS FULL LENGTH OF DATA                                   *\n*         R4 IS ADDRESS OF FIRST LOGICAL RECORD                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSO0030  DS    0H\n         DITTRACE ID=DEBLOCK\n         TM    COMMOFLG,$VREC      VARIABLE LENGTH RECORDS?\n         BNO   TSO0060             NOPE\n         LR    R5,R3               COPY DATA LENGTH\n         LR    R6,R4               COPY DATA ADDRESS\nTSO0040  DS    0H\n         SH    R5,H4               MINUS LENGTH OF BDW\n         BNH   TSO0060             TOO SHORT... WELL TRY ANYWAY\n         LA    R6,4(R6)            FIRST RDW (MAYBE)\n         SR    R1,R1               CLEAR REGISTER\nTSO0050  DS    0H\n         ICM   R1,3,0(R6)          RECORD LENGTH FROM RDW\n         CR    R5,R1               RDW WITHIN REASON?\n         BL    TSO0060             NO.. ASSUME RECFM=V (NOT VB)\n         AR    R6,R1               NEXT RECORD'S ADDRESS\n         SR    R5,R1               CALCULATE LENGTH REMAINING IN BLOCK\n         BH    TSO0050             CHECK OUT THIS LOGICAL RECORD\n         BNZ   TSO0060             RDW'S DON'T ADD UP TO BDW'S\n         SH    R3,H4               MINUS BDW LENGTH\n         LA    R4,4(R4)            SKIP BDW\nTSO0060  DS    0H\n         LR    R5,R3               SAVE DATA LENGTH\n         LR    R6,R4               SAVE DATA ADDRESS\nTSO0070  DS    0H\n         ICM   R3,3,COMMLRCL       LOGICAL RECORD LENGTH\n         TM    COMMOFLG,$VREC      VARIABLE LENGTH RECORDS?\n         BNO   TSO0080             NO\n         ICM   R3,3,0(R6)          LENGTH FROM RECORD\nTSO0080  DS    0H\n         CR    R3,R5               LONGER THAN LENGTH LEFT?\n         BNH   TSO0090             NO\n         LR    R3,R5               LIMIT LENGTH TO LENGTH LEFT\nTSO0090  DS    0H\n         LR    R4,R6               COPY RECORD'S ADDRESS\n         LR    R7,R3               SAVE LENGTH USED FOR THIS RECORD\n         DITTRACE ID=LREC,         TRACE EACH LOGICAL RECORD           +\n               RDATA1=R3,          .. LOGICAL RECORD'S LENGTH          +\n               RDATA2=R4           .. LOGICAL RECORD'S ADDRESS\n         MVC   RECHEAD,=C'RECORD SIZE'\n         CVD   R3,COMMDWRD         CONVERT TO DECIMAL\n         MVC   RECSIZE,EDWORD2     INITIALIZE WITH EDIT WORD\n         ED    RECSIZE,COMMDWRD+5  EDIT LOGICAL RECORD SIZE\n         BAL   R9,TSO0100          BUILD DETAIL LINES FOR THIS RECORD\n         AR    R6,R7               NEXT LOGICAL RECORD'S ADDRESS\n         SR    R5,R7               MINUS LENGTH OF LAST RECORD\n         BH    TSO0070             BUILD DATA FOR EACH LOGICAL RECORD\n         B     TSO0300             DISPLAY THE TABLE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              BUILD DETAIL LINES AND ADD THEM TO THE TABLE           *\n*                                                                     *\n*         AT ENTRY:  R3 LENGTH OF DATA                                *\n*                    R4 ADDRESS OF DATA                               *\n*                    R9 RETURN ADDRESS                                *\n*                                                                     *\n*         REGISTERS 1, 2, 3, 4, 14, AND 15 WILL BE ALTERED            *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSO0100  DS    0H\n         DITTRACE ID=STRTBLD,      TRACE POINT                         +\n               RDATA1=R3,          .. DATA ADDRESS                     +\n               RDATA2=R4           .. DATA LENGTH\n         ZAP   TSOOFF,P0           RESET OFFSET COUNTER\nTSO0110  DS    0H\n         LR    R2,R3               COPY RECORD LENGTH\n         CH    R2,H50              TOO MUCH FOR 1 LINE??\n         BNH   TSO0120             NO, CONTINUE\n         LH    R2,H50              LIMIT LENGTH TO 50\nTSO0120  DS    0H\n         BCTR  R2,0                ADJUST FOR EXECUTES\n         DITTRACE ID=DETAIL,       TRACE POINT                         +\n               RDATA1=R2           .. LENGTH USED FOR DETAIL\n         EX    R2,DATAMVC          MOVE TO 'DATAAREA'\n         EX    R2,DATATR           TRANSLATE OUT UNPRINTABLES\n         TM    COMMOFLG,$HEX       DISPLAY IN HEX?\n         BO    TSO0130             YES\n         CP    TSOOFF,P0           FIRST LINE OF RECORD?\n         BE    TSO0130             YES... SKIP OFFSET\n         MVC   DATAOFF,EDWORD2     INITIALIZE WITH EDIT WORD\n         ED    DATAOFF,TSOOFF      EDIT OFFSET\n         MVI   DATAPLUS,C'+'       MOVE PLUS SIGN\nTSO0130  DS    0H\n         BAL   R8,TSO0400          ADD ROW TO TABLE\n         TM    COMMOFLG,$HEX       DISPLAY IN HEX?\n         BNO   TSO0150             NO\n         EX    R2,DATAMVC          MOVE TO 'DATAAREA'\n         EX    R2,ZONEMVC          PREPARE FOR ZONES TRANSLATE\n         EX    R2,HEXTR            TRANSLATE ZONES TO DISPLAYABLE\n         BAL   R8,TSO0400          ADD ROW TO TABLE\n         EX    R2,DATAMVC          MOVE TO 'DATAAREA'\n         EX    R2,NUMRMVC          PREPARE FOR NUMERICS TRANSLATE\n         EX    R2,HEXTR            TRANSLATE NUMERICS TO DISPLAYABLE\n         BAL   R8,TSO0400          ADD ROW TO TABLE\n         EX    R2,SCALEMVC         MOVE TO SCALE\n         CP    TSOOFF,P0           FIRST LINE OF RECORD?\n         BE    TSO0140             YES... SKIP OFFSET\n         MVC   DATAOFF,EDWORD2     INITIALIZE WITH EDIT WORD\n         ED    DATAOFF,TSOOFF      EDIT OFFSET\n         MVI   DATAPLUS,C'+'       MOVE PLUS SIGN\nTSO0140  DS    0H\n         BAL   R8,TSO0400          ADD ROW TO TABLE\n         BAL   R8,TSO0400          ADD ROW TO TABLE\nTSO0150  DS    0H\n         LA    R2,1(R2)            RESET LENGTH\n         AR    R4,R2               BRING INPUT ADDRESS FORWARD\n         AP    TSOOFF,P50          ADD TO DATA OFFSET\n         SR    R3,R2               COMPUTE LENGTH REMAINING\n         BNZ   TSO0110             REPEAT 'TILL ALL LENGTH DONE\n         TM    COMMOFLG,$HEX       DISPLAYING IN HEX?\n         BO    TSO0160             YES\n         BAL   R8,TSO0400          ADD BLANK LINE TO TABLE\nTSO0160  DS    0H\n         DITTRACE ID=BLDDONE\n         BR    R9                  BUILD DONE\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DISPLAY TABLE                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSO0300  DS    0H\n         DITTRACE ID=DISPLAY\n         LA    R1,TOPPARM          'TBTOP' PARAMETERS\n         L     R15,AISP            SPF INTERFACE ADDRESS\n         BALR  R14,R15             LINK TO SPF FOR 'TBTOP'\n         LA    R1,COMMPANL         PANEL NAME ADDRESS\n         ST    R1,DISPPANL         SET ADDRESS IN PARMLIST\n         OI    DISPPANL,X'80'      SET END OF LIST\n         LA    R1,DISPPARM         DISPLAY PARAMETERS\n         L     R15,AISP            SPF INTERFACE ADDRESS\n         BALR  R14,R15             LINK TO SPF TO DISPLAY\n         B     TSO9900             AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              ADD ROWS TO SPF TABLE                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSO0400  DS    0H\n         DITTRACE ID=ADDROW\n         MVC   DATA,DATAAREA       COPY DATA\n         LA    R1,ADDPARM          SPF TBADD PARMS\n         L     R15,AISP            SPF INTERFACE ENTRY POINT\n         BALR  R14,R15             LINK TO SPF\n         LTR   R15,R15             TBADD SUCCESSFUL?\n         BNZ   ERR0020             NO\n         MVC   DATAAREA,COMMBLKS   RE-INITIALIZE WORK AREA\n         BR    R8                  RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSO0500  DS    0H\n         DITTRACE ID=EOF\n         B     TSO9900             EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         DITTRACE ID=CREFAIL,      TBCREATE FAILED                     +\n               RDATA1=R15          .. CAPTURE RETURN CODE\n         CVD   R15,COMMDWRD        CONVERT RETURN CODE TO DECIMAL\n         MVC   MSG001RC,EDWORD3    INITIALIZE WITH EDIT WORD\n         ED    MSG001RC,COMMDWRD+6 EDIT RETURN CODE\n         LA    R1,MSG001           MESSAGE TEXT ADDRESS\n         LA    R0,MSG001L          MESSAGE TEXT LENGTH\n         B     TPUT0000            DISPLAY MESSAGE\nERR0020  DS    0H\n         DITTRACE ID=ADDFAIL,      TBADD FAILED                        +\n               RDATA1=R15          .. CAPTURE RETURN CODE\n         CVD   R15,COMMDWRD        CONVERT RETURN CODE TO DECIMAL\n         MVC   MSG002RC,EDWORD3    INITIALIZE WITH EDIT WORD\n         ED    MSG002RC,COMMDWRD+6 EDIT RETURN CODE\n         LA    R1,MSG002           MESSAGE TEXT ADDRESS\n         LA    R0,MSG002L          MESSAGE TEXT LENGTH\n         B     TPUT0000            DISPLAY MESSAGE\nERR0030  DS    0H\n         ABEND ABEND022,DUMP,,USER ABEND\nERR0040  DS    0H\n         ABEND ABEND023,DUMP,,USER ABEND\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DISPLAY TPUT MESSAGES                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTPUT0000 DS    0H\n         TPUT  (R1),(R0)           DISPLAY TPUT MESSAGE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXIT POINT                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSO9900  DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXECUTED INSTRUCTIONS                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDATAMVC  MVC   DATADATA(0),0(R4)   MOVE DATA TO DETAIL AREA\nDATATR   TR    DATADATA(0),CHARTBL TRANSLATE OUT UNDISPLAYABLES\nZONEMVC  MVN   DATADATA(0),HEX0000 NULLIFY NUMERICS\nNUMRMVC  MVZ   DATADATA(0),HEX0000 NULLIFY ZONES\nHEXTR    TR    DATADATA(0),HEXCHAR TRANSLATE TO DISPLAYABLE\nSCALEMVC MVC   DATADATA(0),SCALE   MOVE SCALE\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORK AREAS/CONSTANTS                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTSO1SAVE DC    18F'0'              REGISTER SAVE AREA\nTBLEPARM DC    A(TBCREATE)         VERB ADDRESS\n         DC    A(NTABLE)           TABLE NAME ADDRESS\n         DC    A(0)                NO 'KEY' NAMES\n         DC    A(NDATA)            VARIABLES LIST\n         DC    A(NOWRITE)          IN CORE ONLY\n         DC    A(REPLACE+X'80000000')\nADDPARM  DC    A(TBADD)            VERB ADDRESS\n         DC    A(NTABLE+X'80000000')\nTOPPARM  DC    A(TBTOP)            VERB ADDRESS\n         DC    A(NTABLE+X'80000000')\nDISPPARM DC    A(TBDISPL)          VERB ADDRESS\n         DC    A(NTABLE)           TABLE NAME\nDISPPANL DC    A(0)                PANEL NAME ADDRESS\nH4       DC    H'4'                CONSTANT\nH50      DC    H'50'               CONSTANT\nHEX0000  DC    50X'00'             CONSTANT\nTSOOFF   DC    PL3'0'              DATA OFFSET\nP0       DC    P'0'                CONSTANT\nP50      DC    P'50'               CONSTANT\nTBCREATE DC    CL8'TBCREATE'       TABLE CREATE VERB\nTBADD    DC    CL8'TBADD'          TABLE ADD VERB\nTBTOP    DC    CL8'TBTOP'          TABLE TOP VERB\nTBDISPL  DC    CL8'TBDISPL'        TABLE DISPLAY VERB\nNTABLE   DC    CL8'TSO1DATA'       TABLE NAME\nNDATA    DC    C'(DATA)'           VARIABLE NAMES LIST\nNOWRITE  DC    CL8'NOWRITE'        CONSTANT\nREPLACE  DC    CL8'REPLACE'        CONSTANT\nTSOTAPE  DC    C'TAPE'             CONSTANT\n         SPACE\nDATAAREA DS    0CL79\n         DC    CL18' '\n         ORG   DATAAREA\nKEYHEAD  DS    CL3                 'KEY'\n         ORG   DATAAREA\nDATAHEAD DS    CL4                 'DATA'\n         ORG   DATAAREA\nRECHEAD  DS    CL11                'RECORD SIZE'\n         DS    C\nRECSIZE  DS    CL6                 LOGICAL RECORD SIZE\n         ORG   DATAAREA+18\n         DC    CL02' '\nDATAPLUS DC    C' '\nDATAOFF  DC    CL6' '              LINE'S OFFSET FROM FRONT OF RECORD\n         DC    CL02' '\nDATADATA DC    CL50' '             DATA AREA\n         SPACE\nSCALE    DC    C'....+...10....+...20....+...30....+...40....+...50'\nEDWORK   DC    CL6' '\nEDWORD1  DC    X'F02120202020'\nEDWORD2  DC    X'402020202120'\nEDWORD3  DC    X'40202120'         RETURN CODE EDIT WORD\nMSG001   DS    0C\n         DC    C'TBCREATE FAILED, RETURN CODE='\nMSG001RC DC    CL4' '\n         DC    C' (DECIMAL)'\nMSG001L  EQU   *-MSG001\nMSG002   DS    0C\n         DC    C'TBADD FAILED, RETURN CODE='\nMSG002RC DC    CL4' '\n         DC    C' (DECIMAL)'\nMSG002L  EQU   *-MSG002\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DISPLAYABLE CHARACTERS TABLE                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\n*                   0 1 2 3 4 5 6 7 8 9 A B C D E F                     DUT09680\nCHARTBL  DC    XL16'40404040404040404040404040404040'     X'00' - X'0F' DUT09690\n         DC    XL16'40404040404040404040404040404040'     X'10' - X'1F' DUT09700\n         DC    XL16'40404040404040404040404040404040'     X'20' - X'2F' DUT09710\n         DC    XL16'40404040404040404040404040404040'     X'30' - X'3F' DUT09720\n         DC    XL16'404040404040404040404A4B4C4D4E4F'     X'40' - X'4F' DUT09730\n         DC    XL16'504040404040404040405A5B5C5D5E5F'     X'50' - X'5F' DUT09740\n         DC    XL16'60614040404040404040406B6C6D6E6F'     X'60' - X'6F' DUT09750\n         DC    XL16'404040404040404040407A7B7C7D7E7F'     X'70' - X'7F' DUT09760\n         DC    XL16'40404040404040404040408B8C8D8E8F'     X'80' - X'8F' DUT09770\n         DC    XL16'40404040404040404040409B9C9D9E9F'     X'90' - X'9F' DUT09780\n         DC    XL16'4040404040404040404040ABACADAEAF'     X'A0' - X'AF' DUT09790\n         DC    XL16'4040404040404040404040BBBCBDBEBF'     X'B0' - X'BF' DUT09800\n         DC    XL16'40C1C2C3C4C5C6C7C8C9404040404040'     X'C0' - X'CF' DUT09810\n         DC    XL16'40D1D2D3D4D5D6D7D8D9404040404040'     X'D0' - X'DF' DUT09820\n         DC    XL16'4040E2E3E4E5E6E7E8E9404040404040'     X'E0' - X'EF' DUT09830\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'     X'F0' - X'FF' DUT09840\n*                   0 1 2 3 4 5 6 7 8 9 A B C D E F                     DUT09680\nHEXCHAR  DC    CL16'0123456789ABCDEF'                     X'00' - X'0F' DUT09690\n         DC    CL16'1               '                     X'10' - X'1F' DUT09700\n         DC    CL16'2               '                     X'20' - X'2F' DUT09700\n         DC    CL16'3               '                     X'30' - X'3F' DUT09700\n         DC    CL16'4               '                     X'40' - X'4F' DUT09700\n         DC    CL16'5               '                     X'50' - X'5F' DUT09700\n         DC    CL16'6               '                     X'60' - X'6F' DUT09700\n         DC    CL16'7               '                     X'70' - X'7F' DUT09700\n         DC    CL16'8               '                     X'80' - X'8F' DUT09700\n         DC    CL16'9               '                     X'90' - X'9F' DUT09700\n         DC    CL16'A               '                     X'A0' - X'AF' DUT09700\n         DC    CL16'B               '                     X'B0' - X'BF' DUT09700\n         DC    CL16'C               '                     X'C0' - X'CF' DUT09700\n         DC    CL16'D               '                     X'D0' - X'DF' DUT09700\n         DC    CL16'E               '                     X'E0' - X'EF' DUT09700\n         DC    CL16'F               '                     X'F0' - X'FF' DUT09700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC BLOCK DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK  TYPE=SHORT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         ABCODES\n         END  DITTTSO1\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTTSO2": {"ttr": 5121, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              TAPE MAP 'TMAP' MODULE                                 *\n*                                                                     *\n*       THIS MODULE PERFORMS THE 'TMAP' FUNCTION FOR THE TSO          *\n*       ENVIRONMENT.  'HDR1', 'HDR2', 'EOF1', AND 'EOF2' ARE WATCHED  *\n*       FOR, AND WHEN ENCOUNTERED, THE RELATIVE FILE NUMBER AND FILE  *\n*       NAME ARE PRINTED.  BY DEFAULT TMAP WILL STOP WHEN 2 TAPE      *\n*       MARKS IN A ROW WITH NO INTERVIENING DATA ARE FOUND.  THE      *\n*       OPTIONS 'FULL', 'FULLTAPE', OR 'ALL' WILL CAUSE THE TAPE TO   *\n*       BE READ TO THE REFLECTIVE MARKER OR OFF THE END OF THE REEL.  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTTSO2 DITTPRFX TMAPSAVE,'TAPE ''VTOC'' MODULE'\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY         TRACE ENTRY\n         TM    COMMFLAG,$COMMCLS   CLOSE FILES?\n         BO    EXIT0000            YES.. EXIT\n         ZAP   FILECT,COMMP0       ZERO FILES COUNTER\n         MVI   TAPEFLAG,00         INITIALIZE FLAGS\n         LA    R1,TBLEPARM         DEFINE TABLE PARMS\n         L     R15,AISP            SPF INTERFACE ENTRY POINT\n         BALR  R14,R15             LINK TO SPF TO DEFINE TABLE\n         CH    R15,H4              DEFINE SUCCESSFUL?\n         BH    ERR0010             NO\nTAPE0010 DS    0H\n         L     R10,COMMIND         DYNAMIC BLOCK ADDRESS\n         USING DYNBLOK,R10         SPECIFY BASE\n         ST    R10,EXCPDYN         PASS DYNAMIC BLOCK ADDRESS TO EXCP\n         LA    R2,DYNDCB           DCB ADDRESS\n         USING IHADCB,R2           DEFINE DSECT BASE\n         DITTRACE ID=CCWINIT       TRACE INTIALIZE ROUTINE\n         L     R1,ACOMMIOI         INPUT BUFFER\n         STCM  R1,7,REWCCW+1       RELOCATE I/O ADDRESS\n         STCM  R1,7,READCCW+1      RELOCATE I/O ADDRESS\n         DITTRACE ID=REWIND        TRACE INITIAL REWIND\n         MVC   DYNCCW,REWCCW       INITIALIZE THE CCW\n         LA    R1,EXCPBLOK         EXCP INTERFACE BLOCK\n         L     R15,AEXCP           EXCP MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO EXCP MODULE\n         CLI   EXCPSTAT,$EXCPOK    EXCP SUCCESSFUL?\n         BNE   TAPE0400            NO\n         DITTRACE ID=GOODREW       REWIND SUCCESSFUL\nTAPE0020 DS    0H\n         DITTRACE ID=READFWD       TRACE READ FORWARD\n         MVC   DYNCCW,READCCW      INITIALIZE THE CCW\n         LA    R1,EXCPBLOK         EXCP INTERFACE BLOCK\n         L     R15,AEXCP           EXCP MODULE ENTRY POINT\n         BALR  R14,R15             LINK TO EXCP MODULE\n         TM    DYNSTAT,$DYNPEOT    PHYSICAL END OF TAPE REACHED?\n         BO    TAPE0230            YES\n         CLI   DYNSTAT,$DYNTM      TAPE MARK READ?\n         BE    TAPE0200            YES\n         CLI   EXCPSTAT,$EXCPOK    EXCP SUCCESSFUL?\n         BNE   TAPE0400            NO\n         TM    TAPEFLAG,$TAPEFHD   FILE HEADING ALREADY PERFORMED?\n         BO    TAPE0030            YES\n         AP    FILECT,COMMP1       ADD 1 TO FILE COUNT\n         MVC   PRFILE,COMMED2      INITIALIZE WITH EDIT WORD\n         ED    PRFILE,FILECT       EDIT FILE NUMBER\n         MVC   DATA(HEADMSGL),HEADMSG\n         BAL   R9,ADD0000          ADD A LINE TO TABLE\n         OI    TAPEFLAG,$TAPEFHD   SET HEADING FLAG\nTAPE0030 DS    0H\n         NI    TAPEFLAG,255-$TAPETM    TURN OFF TAPE MARK FLAG\n         CLC   EXCPLEN,H80         WAS LENGTH 80?\n         BNE   TAPE0040            NO\n         TM    TAPEFLAG,$TAPEDTA   DATA FLAG ON??\n         BO    TAPE0020            YES... READ ANOTHER BLOCK\n         ICM   R1,7,READCCW+1      I/O AREA USED\n         CLC   TAPEVOL1,0(R1)      'VOL1' RECORD??\n         BE    VOL10000            YES\n         CLC   TAPEHDR1,0(R1)      'HDR1' RECORD??\n         BE    HDR10000            YES\n         CLC   TAPEEOV1,0(R1)      'EOV1' RECORD??\n         BE    EOV10000            YES\n         CLC   TAPEEOF1,0(R1)      'EOF1' RECORD??\n         BE    EOF10000            YES\n         CLC   TAPEHDR2,0(R1)      'HDR2' RECORD??\n         BE    HDR20000            YES\n         CLC   TAPEEOF2,0(R1)      'EOF2' RECORD??\n         BE    EOF20000            YES\n         CLC   TAPEEOV2,0(R1)      'EOV2' RECORD??\n         BE    EOV20000            YES\nTAPE0040 DS    0H\n         DITTRACE ID=DATA          TRACE DATA ENCOUNTERED\n         TM    TAPEFLAG,$TAPEDTA   IS TAPE DATA FLAG ON??\n         BO    TAPE0020            YES... READ ANOTHER BLOCK\n         OI    TAPEFLAG,$TAPEDTA   SET DATA FLAG\n         MVC   DATA(L'DATAMSG),DATAMSG\n         BAL   R9,ADD0000          ADD A LINE TO TABLE\n         B     TAPE0020            READ ANOTHER BLOCK FROM THE TAPE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                    TAPE MARK HAS JUST BEEN READ                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE0200 DS    0H\n         DITTRACE ID=TAPEMARK,     TRACE TAPE MARK ENCOUNTERED         +\n               DATA1=TAPEFLAG      .. CAPTURE FLAG SETTING\n         TM    TAPEFLAG,$TAPETM    TAPE MARK FLAG ALREADY ON??\n         BO    TAPE0210            YES ... TWO IN A ROW IS EOT\n         OI    TAPEFLAG,$TAPETM    SET TAPE MARK FLAG\n         NI    TAPEFLAG,255-$TAPEDTA   RESET DATA FLAG\n         NI    TAPEFLAG,255-$TAPEFHD   RESET FILE HEADING FLAG\n         B     TAPE0020            READ ANOTHER BLOCK\nTAPE0210 DS    0H\n         TM    TAPEFLAG,$TAPEEOT   LOGCIAL END OF TAPE ALREADY REACHED?\n         BO    TAPE0220            DON'T RESEND LOGICAL EOT MESSAGE\n         OI    TAPEFLAG,$TAPEEOT   SET LOGICAL EOT FLAG\n         DITTRACE ID=TAPEPEOT      END OF TAPE\n         MVC   DATA(L'LEOTMSG),LEOTMSG\n         BAL   R9,ADD0000          LINK TO PRINT MODULE\nTAPE0220 DS    0H\n         CLC   FULL,COMMOPT        FULL OPTION?\n         BE    TAPE0020            YES\n         CLC   FULLTAPE,COMMOPT    FULLTAPE OPTION?\n         BE    TAPE0020            YES\n         CLC   ALL,COMMOPT         ALL OPTION?\n         BE    TAPE0020            YES\n         B     TAPE0240            STOP ON LOGICAL-END-OF-TAPE\nTAPE0230 DS    0H\n         DITTRACE ID=TAPEPEOT      PHYSICAL EOT REACHED\n         MVC   DATA(L'PEOTMSG),PEOTMSG\n         BAL   R9,ADD0000          LINK TO PRINT MODULE\nTAPE0240 DS    0H\n         OI    COMMFLAG,$COMMEOF   SET EOF FLAG\n         DITTRACE ID=TBTOP         TRACE\n         LA    R1,TOPPARM          PERFORM 'TBTOP'\n         L     R15,AISP            SPF INTERFACE ENTRY POINT\n         BALR  R14,R15             LINK TO SPF\n         LTR   R15,R15             TBTOP SUCCESSFUL?\n         BNZ   ERR0030             NO\n         DITTRACE ID=TBDISPL       TRACE\n         LA    R1,COMMPANL         PANEL NAME ADDRESS\n         ST    R1,DISPPANL         SET PANEL NAME ADDRESS\n         OI    DISPPANL,X'80'      SET END OF LIST\n         LA    R1,DISPPARM         DISPLAY TABLE PARAMETERS\n         L     R15,AISP            SPF INTERFACE ENTRY POINT\n         BALR  R14,R15             LINK TO SPF\n         LTR   R15,R15             RC=ZERO?\n         BZ    EXIT0000            YES\n         CH    R15,H8              END?\n         BE    EXIT0000            YES\n         CVD   R15,COMMDWRD        CONVERT TO DECIMAL\n         MVC   MSG004RC,RCEDWD     INITIALIZE WITH EDIT WORD\n         ED    MSG004RC,COMMDWRD+6 EDIT RETURN CODE\n         LA    R1,MSG004           MESSAGE TEXT\n         LA    R0,MSG004L          MESSAGE LENGTH\n         B     ERR0090             ISSUE MESSAGE\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*                    ERROR ROUTINES                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nTAPE0400 DS    0H\n         LA    R3,DYNIOB           IOB USED FOR I/O\n         DITTRACE ID=IOERR         TRACE I/O ERRORS\n         DC    H'0'                ABEND\nTAPE0410 DS    0H\n         DITTRACE ID=ZERORECL      TRACE LRECL = ZERO\n         DC    H'0'                ABEND\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              VOL1 RECORD PROCESSING                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVOL10000 DS    0H\n         USING VOL1,R1             DEFINE DSECT BASE\n         DITTRACE ID=VOL1          TRACE VOL1\n         MVC   PRVOL,VOL1VOL       MOVE VOLUME SERIAL NUMBER\n         MVC   DATA(VOL1MSGL),VOL1MSG\n         BAL   R9,ADD0000          ADD A LINE TO TABLE\n         B     TAPE0020            READ ANOTHER BLOCK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              HDR1 RECORD PROCESSING                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nHDR10000 DS    0H\n         USING HDR1,R1             DEFINE DSECT BASE\n         DITTRACE ID=HDR1          TRACE HDR1\n         MVC   PRDSN,HDR1DSN       DATASET NAME\n         MVC   PRVSEQ,HDR1VSEQ     VOLUME SEQUENCE\n         MVC   PRDSEQ,HDR1DSEQ     DATASET SEQUENCE\n         MVC   PRCDTE,HDR1CDTE     CREATE DATE\n         MVC   PREXPD,HDR1EXPD     EXPIRATION DATE\n         MVC   DATA(HDR1MSGL),HDR1MSG\n         BAL   R9,ADD0000          ADD A LINE TO TABLE\n         B     TAPE0020            READ ANOTHER BLOCK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EOF1 RECORD PROCESSING                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEOF10000 DS    0H\n         DITTRACE ID=EOF1          TRACE EOF1\n         MVC   PRBLKC,HDR1BLKC     BLOCK COUNT\n         MVC   DATA(EOF1MSGL),EOF1MSG\n         BAL   R9,ADD0000          ADD A LINE TO TABLE\n         B     TAPE0020            READ ANOTHER BLOCK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EOV1 RECORD PROCESSING                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEOV10000 DS    0H\n         DITTRACE ID=EOV1          TRACE EOV1\n         MVC   DATA(L'EOV1MSG),EOV1MSG\n         BAL   R9,ADD0000          ADD A LINE TO TABLE\n         B     TAPE0020            READ ANOTHER BLOCK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              HDR2 RECORD PROCESSING                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nHDR20000 DS    0H\n         USING HDR2,R1             DEFINE DSECT BASE\n         DITTRACE ID=HDR2          TRACE HDR2\n         MVC   PRRF,HDR2RF         RECORD FORMAT\n         MVC   PRBLSZ,HDR2BLSZ     BLOCK SIZE\n         MVC   PRRSZ,HDR2RSZ       RECORD SIZE\n         MVC   PRDEN,HDR2DEN       TAPE DENSITY\n         MVC   PRJOB,HDR2JOB       JOB/JOB STEP\n         MVC   DATA(HDR2MSGL),HDR2MSG\n         BAL   R9,ADD0000          ADD A LINE TO TABLE\n         B     TAPE0020            READ ANOTHER BLOCK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EOF2 RECORD PROCESSING                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEOF20000 DS    0H\n         DITTRACE ID=EOF2          TRACE EOF2\n         MVC   DATA(L'EOF2MSG),EOF2MSG\n         BAL   R9,ADD0000          ADD A LINE TO TABLE\n         B     TAPE0020            READ ANOTHER BLOCK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EOV2 RECORD PROCESSING                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEOV20000 DS    0H\n         DITTRACE ID=EOV2          TRACE EOV2\n         MVC   DATA(L'EOV2MSG),EOV2MSG\n         BAL   R9,ADD0000          ADD A LINE TO TABLE\n         B     TAPE0020            READ ANOTHER BLOCK\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              ADD ROWS TO SPF TABLE                                  *\n*                                                                     *\n* ------------------------------------------------------------------- *\nADD0000  DS    0H\n         DITTRACE ID=TBADD,        TRACE TABLE ADD                     +\n               DATA1=DATA,         .. FIRST 8 BYTES                    +\n               DATA2=DATA+8        .. NEXT 8 BYTES\n         LA    R1,ADDPARM          'TBADD' PARAMETERS\n         L     R15,AISP            SPF INTERFACE ENTRY POINT\n         BALR  R14,R15             LINK TO SPF\n         LTR   R15,R15             TBADD SUCCESSFUL?\n         BNZ   ERR0020             NO\n         MVC   DATA,COMMBLKS       CLEAR VARIABLE 'DATA'\n         BR    R9                  RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              SPF ERRORS                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         DITTRACE ID=CREFAIL,      TBCREATE FAILED                     +\n               RDATA1=R15          .. CAPTURE RETURN CODE\n         CVD   R15,COMMDWRD        CONVERT RETURN CODE TO DECIMAL\n         MVC   MSG001RC,RCEDWD     INITIALIZE WITH EDIT WORD\n         ED    MSG001RC,COMMDWRD+6 EDIT RETURN CODE\n         LA    R1,MSG001           MESSAGE TEXT ADDRESS\n         LA    R0,MSG001L          MESSAGE TEXT LENGTH\n         TPUT  (R1),(R0)           SEND MESSAGE\n         B     EXIT0000            AND EXIT\nERR0020  DS    0H\n         DITTRACE ID=ADDFAIL,      TBCREATE FAILED                     +\n               RDATA1=R15          .. CAPTURE RETURN CODE\n         CVD   R15,COMMDWRD        CONVERT RETURN CODE TO DECIMAL\n         MVC   MSG002RC,RCEDWD     INITIALIZE WITH EDIT WORD\n         ED    MSG002RC,COMMDWRD+6 EDIT RETURN CODE\n         LA    R1,MSG002           MESSAGE TEXT ADDRESS\n         LA    R0,MSG002L          MESSAGE TEXT LENGTH\n         B     ERR0090\nERR0030  DS    0H\n         DITTRACE ID=TOPFAIL,      TBCREATE FAILED                     +\n               RDATA1=R15          .. CAPTURE RETURN CODE\n         CVD   R15,COMMDWRD        CONVERT RETURN CODE TO DECIMAL\n         MVC   MSG003RC,RCEDWD     INITIALIZE WITH EDIT WORD\n         ED    MSG003RC,COMMDWRD+6 EDIT RETURN CODE\n         LA    R1,MSG003           MESSAGE TEXT ADDRESS\n         LA    R0,MSG003L          MESSAGE TEXT LENGTH\n         B     ERR0090\nERR0090  DS    0H\n         TPUT  (R1),(R0)           SEND MESSAGE\n         B     EXIT0000            AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORKAREAS/CONSTANTS                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nREWCCW   CCW   X'07',*,SILI,1      REWIND CCW\nREADCCW  CCW   X'02',*,SILI,65535  READ FORWARD CCW\nTMAPSAVE DC    18F'0'              REGISTER SAVE AREA\nTBLEPARM DC    A(TBCREATE)         VERB ADDRESS\n         DC    A(NTABLE)           TABLE NAME ADDRESS\n         DC    A(0)                NO 'KEY' NAMES\n         DC    A(NDATA)            VARIABLES LIST\n         DC    A(NOWRITE)          IN CORE ONLY\n         DC    A(REPLACE+X'80000000')\nADDPARM  DC    A(TBADD)            VERB ADDRESS\n         DC    A(NTABLE+X'80000000')\nTOPPARM  DC    A(TBTOP)            VERB ADDRESS\n         DC    A(NTABLE+X'80000000')\nDISPPARM DC    A(TBDISPL)          VERB ADDRESS\n         DC    A(NTABLE)           TABLE NAME ADDRESS\nDISPPANL DC    A(0)                PANEL NAME ADDRESS\nH4       DC    H'4'                CONSTANT\nH8       DC    H'8'                CONSTANT\nH80      DC    H'80'               CONSTANT\nTAPEFLAG DC    X'00'               SWITCHES/FLAGS\n$TAPETM  EQU   X'80'               .. TAPE MARK JUST READ\n$TAPEDTA EQU   X'40'               .. DATA FILE FOUND\n$TAPEFHD EQU   X'20'               .. FILE HEADING PRINTED\n$TAPEEOT EQU   X'10'               .. LOGICAL EOT REACHED\nFILECT   DC    PL3'0'              FILES COUNTER\nFULL     DC    CL8'FULL'           CONSTANT\nFULLTAPE DC    CL8'FULLTAPE'       CONSTANT\nALL      DC    CL8'ALL'            CONSTANT\nTBCREATE DC    CL8'TBCREATE'\nTBADD    DC    CL8'TBADD'\nTBTOP    DC    CL8'TBTOP'\nTBDISPL  DC    CL8'TBDISPL'\nNTABLE   DC    CL8'TMAPDATA'\nNDATA    DC    C'(DATA)'\nNOWRITE  DC    CL8'NOWRITE'\nREPLACE  DC    CL8'REPLACE'\nPANLNAME DC    CL8'DITTTSO2'\nTAPEVOL1 DC    C'VOL1'             CONSTANT\nTAPEHDR1 DC    C'HDR1'             CONSTANT\nTAPEHDR2 DC    C'HDR2'             CONSTANT\nTAPEEOF1 DC    C'EOF1'             CONSTANT\nTAPEEOF2 DC    C'EOF2'             CONSTANT\nTAPEEOV1 DC    C'EOV1'             CONSTANT\nTAPEEOV2 DC    C'EOV2'             CONSTANT\nMSG001   DC    C'TBCREATE FAILED, RETURN CODE='\nMSG001RC DC    CL4' '\n         DC    C' (DECIMAL)'\nMSG001L  EQU   *-MSG001\nMSG002   DC    C'TBADD FAILED, RETURN CODE='\nMSG002RC DC    CL4' '\n         DC    C' (DECIMAL)'\nMSG002L  EQU   *-MSG002\nMSG003   DC    C'TBTOP FAILED, RETURN CODE='\nMSG003RC DC    CL4' '\n         DC    C' (DECIMAL)'\nMSG003L  EQU   *-MSG003\nMSG004   DC    C'TBDISPL FAILED, RETURN CODE='\nMSG004RC DC    CL4' '\n         DC    C' (DECIMAL)'\nMSG004L  EQU   *-MSG004\nRCEDWD   DC    X'40202120'\nHEADMSG  DS    0C\n         DC    C'* * * * * * * * * * * * * * PHYSICAL FILE #'\nPRFILE   DC    CL6' '\n         DC    C' * * * * * * * * * * * * * * *'\nHEADMSGL EQU   *-HEADMSG\nLEOTMSG  DC    C'=============================== LOGICAL END OF TAPE ==+\n               ====================='\nPEOTMSG  DC    C'=============================== PHYSICAL END OF TAPE =+\n               ====================='\nDATAMSG  DC    C'DATA'\nVOL1MSG  DS    0C\n         DC    C'VOL1 VOLSER '\nPRVOL    DC    CL6' '\nVOL1MSGL EQU   *-VOL1MSG\nHDR1MSG  DS    0C\n         DC    C'HDR1 DSN='\nPRDSN    DC    CL17' '\n         DC    C' VOLSEQ='\nPRVSEQ   DC    CL4' '\n         DC    C' D/S SEQ='\nPRDSEQ   DC    CL4' '\n         DC    C' CREATE='\nPRCDTE   DC    CL6' '\n         DC    C' EXPIRE='\nPREXPD   DC    CL6' '\nHDR1MSGL EQU   *-HDR1MSG\nHDR2MSG  DS    0C\n         DC    C'HDR2 RECFM='\nPRRF     DC    C' '\n         DC    C' BLKSZ='\nPRBLSZ   DC    CL5' '\n         DC    C' LRECL='\nPRRSZ    DC    CL5' '\n         DC    C' DENSITY='\nPRDEN    DC    C' '\n         DC    C' JOB/JOBSTEP='\nPRJOB    DC    CL17' '\nHDR2MSGL EQU   *-HDR2MSG\nEOF1MSG  DS    0C\n         DC    C'EOF1 BLOCK COUNT='\nPRBLKC   DC    CL6' '\nEOF1MSGL EQU   *-EOF1MSG\nEOF2MSG  DC    C'EOF2'\nEOV1MSG  DC    C'EOV1'\nEOV2MSG  DC    C'EOV2'\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              EXCP INTEFACE BLOCK                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXCPBLOK EXCPBLOK\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              TAPE LABEL DSECTS                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  DITTTLBL\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\nSILI     EQU   X'20'\n         ABCODES\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC BLOCK DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS IOB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZIOB\nIOBLEN   EQU  *-IOB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS DCB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DCBD DSORG=PS\nDYNDCBL  EQU  *-IHADCB\n         END  DITTTSO2\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTTSO3": {"ttr": 4106, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*              TSO INQUIRE FUNCTION                                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTTSO3 DITTPRFX INQSAVE,'TSO MODE INQUIRE FUNCTION'\n         USING DITTCOMM,R11        SPECIFY BASE\n         DITTRACE ID=ENTRY         TRACE ENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         DITTRACE ID=EXIT          TRACE EXIT\n         L     R13,4(R13)          RESTORE REGISTER 13                  ASE01670\n         LM    R14,R12,12(R13)     RESTORE ALL OTHER REGISTERS          ASE01680\n         SR    R15,R15             GIVE GOOD RETURN CODE                ASE01690\n         BR    R14                 RETURN TO CALLER                     ASE01700\n         SPACE 2\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              WORKAREAS/CONSTANTS                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINQSAVE  DC    18F'0'              REGISTER SAVE AREA\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              REGISTER EQUATES                                       *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY REGEQU\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              COMMON MODULE DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              DYNAMIC BLOCK DSECT                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK TYPE=DSECT\n         EJECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS IOB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZIOB\nIOBLEN   EQU  *-IOB\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MVS DCB DSECT                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DCBD DSORG=PS\nDYNDCBL  EQU  *-IHADCB\n         END  DITTTSO3\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DITTVTOC": {"ttr": 2817, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01'\\x00\\x17\\x01\\t\\t\\x8f\\x01\\t\\t\\x9f\\x17\\x06\\x01Y\\x00h\\x00\\x00\\xd9\\xd3\\xd9\\xc9\\xc3\\xc5@@@@\"", "ispf": {"version": "01.39", "flags": 0, "createdate": "2009-04-08T00:00:00", "modifydate": "2009-04-09T17:06:17", "lines": 345, "newlines": 104, "modlines": 0, "user": "RLRICE"}, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*       DASD VOLUME VTOC                                              *\n*                                                                     *\n*       THE PRINT LINES ARE BUILT AND PASSED TO 'DITTPRT' TO DO       *\n*       THE ACTUAL PRINTING.                                          *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTVTOC DITTPRFX VTOCSAVE,'DASD VTOC'\n         USING DITTCOMM,R11           ADDRESS IT\n         DITTRACE ID=ENTRY            TRACE ENTRY\nVTOC0010 DS    0H\n         TM    COMMFLAG,$COMMEOF      EOF FLAG ON?\n         BO    VTOC0150               YES\n         CLI   COMMENV,$ENVTSO        TSO ENVIRONMENT?\n         BNE   VTOC0015               NO\n         LA    R1,TBCREATE_PARMS\n         L     R15,AISP               ISPLINK ENTRY POINT\n         BALR  R14,R15                CREATE TABLE\n         MVC   DATA,COMMBLKS          INITIALIZE DATA\nVTOC0015 DS    0H\n         L     R10,COMMIND            DYNAMIC BLOCK ADDRESS\n         USING DYNBLOK,R10\n         USING IOB,DYNIOB\n         ST    R10,EXCPDYN            PASS ADDRESS TO DITTEXCP\n         L     R6,ACOMMIOI            INPUT I/O AREA ADDRESS\n         MVC   IOBCC(5),VTOCPTR       SET VTOC ADDRESS\n         BAL   R7,VTOC0100            READ\n         MVC   IOBCC(5),23(R6)        COPY VTOC ADDRESS\n         DITTRACE ID=VTOCADDR,                                         +\n               DATA1=IOBCC\n         BAL   R7,VTOC0100            READ\n         USING FORMAT_4,R6\n         MVC   VTOCXTNT,DS4VTOCE+2    SAVE VTOC EXTENTS\n         DITTRACE ID=VTOCXTNT,                                         +\n               DATA1=VTOCLOW,                                          +\n               DATA2=VTOCHIGH\n         MVC   PR_DSN,COMMBLKS\n         MVC   PR_DSN(L'VTOC_DSN),VTOC_DSN\n         MVC   PR_DSN+L'VTOC_DSN(6),DYNVOL\n         LA    R2,VTOCLOW\n         BAL   R8,VTOC0120            EDIT EXTENT\n         MVC   PR_LOW,PR_EXTENT       COPY EDITED EXTENT\n         LA    R2,VTOCHIGH\n         BAL   R8,VTOC0120            EDIT EXTENT\n         MVC   PR_HIGH,PR_EXTENT      COPY EDITED EXTENT\n         MVC   PRTDATA(PR01_L),PR01\n         BAL   R8,PRT0000             PRINT\n         MVC   IOBCC(4),VTOCLOW       START AT LOW EXTENT\n         MVI   IOBR,1                 FORCE RECORD TO 1\nVTOC0020 DS    0H\n         BAL   R7,VTOC0100            READ\n         CLI   EXCPSTAT,$EXCPOK       I/O OK?\n         BNE   VTOC0040               NO\n         USING FORMAT_1,R6\n         CLI   DS1FMTID,C'1'          FORMAT 1 RECORD?\n         BNE   VTOC0060               NO\n         MVC   PR_DSN,DS1DSNAM        COPY DATA SET NAME\n         LA    R3,DS1EXT1             1ST EXTENT\n         LA    R4,3                   NBR OF EXTENTS\n         BAL   R7,VTOC0110\n         OC    DS1PTRDS,DS1PTRDS      FORMAT-3 DISK ADDRESS?\n         BZ    VTOC0060               NO\n         MVC   SAVEFMT1,IOBCC         SAVE CURRENT FORMAT-1 ADDRESS\n         MVC   IOBCC(5),DS1PTRDS      SET DISK ADDRESS\n         BAL   R7,VTOC0100            READ THE FORMAT-3\n         USING FORMAT_3,R6\n         LA    R3,DS3EXT1             FIRST EXTENT\n         LA    R4,4                   FOUR EXTENTS\n         BAL   R7,VTOC0110            PROCESS THESE EXTENTS\n         LA    R3,DS3ADEXT            LAST NINE EXTENTS\n         LA    R4,9                   NINE EXTENTS\n         BAL   R7,VTOC0110            PROCESS THESE EXTENTS\n         MVC   IOBCC(5),SAVEFMT1      RESTORE FORMAT-1 ADDRESS\n         B     VTOC0060\nVTOC0030 DS    0H\n         DITTRACE ID=WRAP\nVTOC0040 DS    0H\n         DITTRACE ID=VTOC0040,                                         +\n               DATA1=IOBCC,                                            +\n               DATA2=VTOCHIGH\n         CLC   IOBCC(4),VTOCHIGH      AT END OF VTOC?\n         BE    VTOC0070               YES\n         SR    R1,R1\n         ICM   R1,3,IOBHH             HEAD NUMBER\n         LA    R1,1(,R1)              NEXT HEAD NBR\n         CLM   R1,3,DYNHHEAD          AT HIGH HEAD NBR?\n         BL    VTOC0050               NO\n         ICM   R1,3,IOBCC             CYLINDER NBR\n         LA    R1,1(,R1)              NEXT CYLINDER\n         STCM  R1,3,IOBCC             UPDATE CYLINDER NBR\n         DITTRACE ID=NEXT_CYL,                                         +\n               RDATA1=R1\n         XC    IOBHH,IOBHH            RESET HEAD\n         MVI   IOBR,1                 RESET RECORD NBR\n         B     VTOC0020\nVTOC0050 DS    0H\n         DITTRACE ID=NEXTHEAD,                                         +\n               RDATA1=R1\n         STCM  R1,3,IOBHH             UPDATE HEAD NBR\n         MVI   IOBR,1                 RESET RECORD NBR\n         B     VTOC0020\nVTOC0060 DS    0H\n         SR    R1,R1\n         IC    R1,IOBR                RECORD NBR\n         LA    R1,1(,R1)              NEXT RECORD\n         STC   R1,IOBR                UPDATE RECORD NBR\n         DITTRACE ID=NEXT_REC,                                         +\n               RDATA1=R1\n         B     VTOC0020\nVTOC0070 DS    0H\n         CLI   COMMENV,$ENVTSO        TSO ENVIRONMENT?\n         BNE   VTOC0150               NO\n         LA    R1,TBTOP_PARMS         TBTOP PARMS\n         L     R15,AISP               ISPLINK ENTRY POINT\n         BALR  R14,R15                ISSUE TBTOP\n         LA    R1,TBDISP_PARMS        TBDISP PARMS\n         L     R15,AISP               ISPLINK ENTRY POINT\n         BALR  R14,R15                DISPLAY TABLE\n         B     VTOC0150               EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVTOC0100 DS    0H\n         DITTRACE ID=EXCP,                                             +\n               DATA1=IOBCC\n         SR    R1,R1\n         IC    R1,IOBR\n         BCTR  R1,0\n         STC   R1,IOBR\n         LA    R1,EXCPBLOK\n         L     R15,AEXCP              DITTEXCP ENTRY POINT\n         BALR  R14,R15                LINK TO DITTEXCP\n         DITTRACE ID=EXCPSTAT,                                         +\n               DATA1=EXCPSTAT\n         SR    R1,R1\n         IC    R1,IOBR\n         LA    R1,1(,R1)\n         STC   R1,IOBR\n         CLC   0(5,R6),IOBCC          TRACK WRAP?\n         BL    VTOC0030               YES.. GO TO NEXT HEAD\n         DITTRACE ID=DATA,                                             +\n               DATA1=0(R6),                                            +\n               DATA2=52(R6)\n         BR    R7\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVTOC0110 DS    0H\n         DITTRACE ID=EXTENT,                                           +\n               RDATA1=R3,                                              +\n               DATA2=2(R3)\n         OC    2(8,R3),2(R3)          ALL ZERO?\n         BZR   R7                     YES\n         LA    R2,2(,R3)              EXTENT LOW\n         BAL   R8,VTOC0120            FORMAT\n         MVC   PR_LOW,PR_EXTENT       COPY EDITED EXTENT\n         LA    R2,6(,R3)              EXTENT HIGH\n         BAL   R8,VTOC0120            FORMAT\n         MVC   PR_HIGH,PR_EXTENT      COPY EDITED EXTENT\n         MVC   PRTDATA(PR01_L),PR01\n         BAL   R8,PRT0000             PRINT\n         MVC   PR_DSN,COMMBLKS        CLEAR THE DSN\n         LA    R3,10(,R3)             NEXT EXTENT\n         BCT   R4,VTOC0110            LOOP\n         BR    R7\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVTOC0120 DS    0H\n         USING EXTENT,R2\n         SR    R0,R0\n         ICM   R0,3,EXTENT_C          CYLINDER NUMBER\n         CVD   R0,COMMDWRD            CONVERT TO DECIMAL\n         MVC   EDIT_AREA,EDIT_WORD    INITIALIZE\n         ED    EDIT_AREA,COMMDWRD+5   EDIT CYLINDER\n         MVC   PR_CYL,EDIT_AREA+2     COPY CYLINDER\n         ICM   R0,3,EXTENT_H          HEAD NUMBER\n         CVD   R0,COMMDWRD            CONVERT TO DECIMAL\n         MVC   EDIT_AREA,EDIT_WORD    INITIALIZE\n         ED    EDIT_AREA,COMMDWRD+5   EDIT HEAD NUMBER\n         MVC   PR_HEAD,EDIT_AREA+4    COPY HEAD NUMBER\n         BR    R8\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVTOC0150 DS    0H\n         DITTRACE ID=EOF\n         OI    COMMFLAG,$COMMEOF      SET EOF\n         B     VTOC9900               AND EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPRT0000  DS    0H\n         CLI   COMMENV,$ENVTSO        TSO ENVIRONMENT?\n         BE    PRT0010                YES\n         MVI   PRTCMMD,$PRTDATA       INSERT PRINT COMMAND\n         LA    R1,PRTBLOK             PRINT INTERFACE BLOCK\n         L     R15,APRT               PRINT MODULE ENTRY POINT\n         BALR  R14,R15                LINK TO PRINT MODULE\n         BR    R8                     RETURN\nPRT0010  DS    0H\n         MVC   DATA(PR01_L),PR01      COPY DATA\n         LA    R1,TBADD_PARMS         TBADD PARMS\n         L     R15,AISP               ISPLINK ENTRY POINT\n         BALR  R14,R15                ADD A ROW TO THE TABLE\n         BR    R8\n* ------------------------------------------------------------------- *\n*                                                                     *\n*              MODULE EXIT POINT                                      *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVTOC9900 DS    0H\n         DITTRACE ID=EXIT             TRACE EXIT\n         L     R13,4(R13)             RESTORE REGISTER 13               ASE01670\n         LM    R14,R12,12(R13)        RESTORE ALL OTHER REGISTERS       ASE01680\n         SR    R15,R15                GIVE GOOD RETURN CODE             ASE01690\n         BR    R14                    RETURN TO CALLER                  ASE01700\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nVTOCSAVE DC    18F'0'              REGISTER SAVE AREA\n\nTBCREATE_PARMS DS    0A\n               DC    A(TBCREATE)         VERB ADDRESS\n               DC    A(NTABLE)           TABLE NAME ADDRESS\n               DC    A(0)                NO 'KEY' NAMES\n               DC    A(NDATA)            VARIABLES LIST\n               DC    A(NOWRITE)          IN CORE ONLY\n               DC    A(REPLACE+X'80000000')\n\nTBADD_PARMS    DS    0A\n               DC    A(TBADD)            VERB ADDRESS\n               DC    A(NTABLE+X'80000000')\n\nTBTOP_PARMS    DS    0A\n               DC    A(TBTOP)            VERB ADDRESS\n               DC    A(NTABLE+X'80000000')\n\nTBDISP_PARMS   DS    0A\n               DC    A(TBDISPL)          VERB ADDRESS\n               DC    A(NTABLE)\n               DC    A(PANEL_NAME+X'80000000')\n\nTBCREATE DC    CL8'TBCREATE'\nTBADD    DC    CL8'TBADD'\nTBTOP    DC    CL8'TBTOP'\nTBDISPL  DC    CL8'TBDISPL'\nNTABLE   DC    CL8'TSO1DATA'\nNDATA    DC    CL8'(DATA)'\nNOWRITE  DC    CL8'NOWRITE'\nREPLACE  DC    CL8'REPLACE'\nPANEL_NAME DC  CL8'DITTVTOC'\n\nVTOCPTR  DC    X'0000000003'       VTOC POINTER (CYL 0, HEAD 0, REC 3)\n\nVTOC_DSN DC    C'VTOC OF '\n\nVTOCXTNT DS    0CL08\nVTOCLOW  DS    CL4                 VTOC EXTENT LOW\nVTOCHIGH DS    CL4                 VTOC EXTENT HIGH\n\nSAVEFMT1 DS    XL5                 SAVED FORMAT 1 ADDRESS\n\nPR01     DS    0C\n         DC    C' '\nPR_DSN   DC    CL44' '\n         DC    CL02' '\nPR_LOW   DC    CL07' '\n         DC    CL02' '\nPR_HIGH  DC    CL07' '\nPR01_L   EQU   *-PR01\n\nPR_EXTENT DS   0C\nPR_CYL    DC   CL4' '\n          DC   C'-'\nPR_HEAD   DC   CL2' '\n\nEDIT_AREA DC   XL6'F02020202020'\n\nEDIT_WORD DC   XL6'F02020202020'\n\n         LTORG\n\nPRTBLOK  PRTBLOK\nEXCPBLOK EXCPBLOK TYPE=CSECT\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDITTCOMM DITTCOMM TYPE=DSECT\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDYNBLOK  DYNBLOK  TYPE=DSECT\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFORMAT_1 DSECT\n         DS    CL08              COUNT\n         IECSDSL1 1\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFORMAT_3 DSECT\n         DS    CL08              COUNT\n         IECSDSL1 3\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFORMAT_4 DSECT\n         DS    CL08              COUNT\n         DS    CL44              VTOC FORMAT-4 \"DSN\"\n         IECSDSL1 4\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXTENT   DSECT\nEXTENT_C DS    XL2\nEXTENT_H DS    XL2\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         IEZIOB\nIOBLEN   EQU   *-IOB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DCBD  DSORG=PS\nDYNDCBL  EQU   *-IHADCB\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         COPY  REGEQU\n         END   DITTVTOC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DITTXXXX": {"ttr": 27, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "DITTXXXX CSECT\n         DC    CL8'DITTXXXX'\n         DC    CL8'&SYSDATE'\n         DC    CL6'&SYSTIME'\n         DC    C'END OF DITTO LOAD MODULE'\n         END   DITTXXXX\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JCL": {"ttr": 29, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//........ JOB .........\n//DITTO    EXEC PGM=DITTO\n//STEPLIB  DD DSN=...LOADLIB...,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSPUNCH DD SYSOUT=*\n//DITTDUMP DD SYSOUT=*\n//DITTRACE DD SYSOUT=*\n//SYSIN    DD *\n$$DITTO XXX\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PROC": {"ttr": 31, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//DITTO    EXEC PGM=DITTO\n//STEPLIB  DD DSN=...LOADLIB...,DISP=SHR\n//ABNLIGNR DD DUMMY\n//SYSPRINT DD SYSOUT=*\n//SYSPUNCH DD SYSOUT=*\n//DITTRACE DD SYSOUT=*\n//DITTDUMP DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSODITTO": {"ttr": 258, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PROC 0 DEBUG\n  ISPEXEC LIBDEF ISPPLIB DATASET +\n    ID('...ISPPLIB...')\n  ISPEXEC  CONTROL ERRORS RETURN\n  ISPEXEC  SELECT PGM(DITTO) NEWAPPL(DITT) PASSLIB\nEXIT CODE(4)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT809/CBT.V500.FILE809.PDS/SOURCE.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT809/CBT.V500.FILE809.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}