In a recent note, McKown, John said:

 Date:         Fri, 11 Aug 2006 08:08:08 -0500

 I just checked the z/OS v1.8 book. It states that stdout and
 stderr can be allocated to a legacy dataset, but that stdin must
 be allocated to an UNIX file (not a legacy dataset).

 http://publibz.boulder.ibm.com/cgi-bin/bookmgr_OS390/BOOKS ...
 /bpxza570/TSOECMDS.TSOBPXBATCH.2

Has anyone ever wondered why the residual restriction?

Or, you can search the archives of this list for Rob Zenuk's
BPXSPOOL, a simple Rexx EXEC that bypasses the restriction.

-- gil
--
StorageTek
INFORMATION made POWERFUL

------------------------------------------------------------------
and here it is .......

Approved-By:  Robzenuk@AOL.COM
Message-ID:  <1d4.1e8f4406.2da6da14@aol.com>
Date:         Thu, 8 Apr 2004 12:38:44 EDT
Reply-To:     MVS OpenEdition <MVS-OE@VM.MARIST.EDU>
Sender:       MVS OpenEdition <MVS-OE@VM.MARIST.EDU>
From:         Robert Zenuk <Robzenuk@aol.com>
Subject:      Re: File copy in OMVS

As already mentioned BPXBATCH will do the trick if you want to do
this from JCL.  If you want to issue any command from inside
REXX, you can call BPXBATCH inside your REXX EXEC.

/* rexx */
 parse arg usscmd
"BPXBATCH SH" usscmd
 exit RC

Using either approach requires the use of the standard streams
STDOUT and STDERR if you want to actually see what happened.  You
can ALLOC these in your JCL (using the DD PATH statements) or you
can ALLOC them in your EXEC, either works.  If you do not ALLOC
STDOUT or STDERR your command may or may not work and you have no
visibility either way.

Here is some basic BPXBATCH JCL:

//jobcard...
//***************************************************************
//* RUN BPXBATCH TO EXECUTE A UNIX COMMAND OR SCRIPT            *
//***************************************************************
//BPXBATCH EXEC PGM=BPXBATCH,PARM='SH cp /u/user1/* /u/user2'
//STDOUT   DD   PATH='/tmp/bpxbatch.stdout',PATHOPTS=(OWRONLY,OCREAT),
//         PATHMODE=SIRWXU
//STDERR   DD   PATH='/tmp/bpxbatch.stderr',PATHOPTS=(OWRONLY,OCREAT),
//         PATHMODE=SIRWXU

If you want the output to be readable in the SPOOL after the run
then you must use an IEBGENER step (or OCOPY or, or ,or) to read
the HFS file to a viewable SYSOUT.

Here is some JCL demonstrating a BPXBATCH approach using JCL IF
and IEBGENER to print:

//jobcard...
//***************************************************************
//* NOTE: Since Unix is case sensitive, it is mandatory that    *
//*       The JCL members be editted with CAPS OFF to insure    *
//*       the correct commands will be executed.                *
//***************************************************************
/*JOBPARM SYSAFF=*
//***************************************************************
//* RUN BPXBATCH TO EXECUTE A UNIX COMMAND OR SCRIPT            *
//***************************************************************
//BPXBATCH EXEC PGM=BPXBATCH,PARM='SH cp /u/user1/* /u/user2'
//STDOUT   DD   PATH='/tmp/bpxbatch.stdout',PATHOPTS=(OWRONLY,OCREAT),
//         PATHMODE=SIRWXU
//STDERR   DD   PATH='/tmp/bpxbatch.stderr',PATHOPTS=(OWRONLY,OCREAT),
//         PATHMODE=SIRWXU
//***************************************************************
//* PRINT STDOUT IF BPXBATCH GETS RC=0                          *
//***************************************************************
//         IF   (BPXBATCH.RC = 0) THEN
//***************************************************************
//PRTOUT   EXEC PGM=IEBGENER
//SYSPRINT DD   SYSOUT=Z
//SYSUT1   DD   PATH='/tmp/bpxbatch.stdout',PATHOPTS=(ORDONLY),
//         FILEDATA=TEXT,BLKSIZE=255,PATHDISP=(DELETE,DELETE)
//SYSUT2   DD   SYSOUT=*
//SYSIN    DD   DUMMY
//***************************************************************
//* PRINT STDOUT IF BPXBATCH GETS RC^=0                         *
//***************************************************************
//         ELSE
//***************************************************************
//PRTERR   EXEC PGM=IEBGENER
//SYSPRINT DD   SYSOUT=Z
//SYSUT1   DD   PATH='/tmp/bpxbatch.stderr',PATHOPTS=(ORDONLY),
//         FILEDATA=TEXT,BLKSIZE=255,PATHDISP=(DELETE,DELETE)
//SYSUT2   DD   SYSOUT=*
//SYSIN    DD   DUMMY
//***************************************************************
//         ENDIF

In REXX you can run commands from the IBM provided OSHELL REXX
EXEC found in SYS1.SBPXEXEC.  This works in batch and foreground.

If the REXX EXEC will be running in TSO foreground, then you
could EXECIO the HFS file into a temporary dataset and
EDIT/VIEW/BROWSE it or use the USS provided OBROWSE or OEDIT
services to work with the HFS file in ISPF Browse or ISPF Edit
(requires the SBPXEXEC and SPBXPENU datasets to be allocated).

Here is a generic EXEC to run any USS command and browse the results:

/******************************* REXX ********************************/
/* Purpose: Execute USS commands from TSO and browse results         */
/*                                                                   */
/* Syntax: USSCMD cmd                                                */
/*                                                                   */
/* Parms: cmd      - Any UNIX Systems Services Command               */
/*                                                                   */
/* Notes: Will execute USS commands, shell scripts and REXX EXECs    */
/*                                                                   */
/*                           Change Log                              */
/* Name           Purpose                                  date      */
/* -------------  ---------------------------------------  --------  */
/* R. Zenuk       Initial creation                         Nov 2000  */
/* R. Zenuk       Will display USS REXX output             07/11/01  */
/* R. Zenuk       Added test for a valid ISPF environment  07/18/01  */
/* R. Zenuk       Streamlined code                         07/20/01  */
/* R. Zenuk       Added ACTIVATE in case SPBXEXEC missing  07/21/01  */
/*                                                                   */
/*********************************************************************/
/* Test for a valid ISPF environment                                 */
/*********************************************************************/
"ISPQRY"
if RC <> 0 then
    do
     say 'A valid ISPF environment does not exist'
     exit(99)
    end
/*********************************************************************/
/* Accept USS Command (retain lower case)                            */
/*********************************************************************/
parse arg cmd
if cmd = '' then
    do
     zedlmsg = 'A valid Unix System Services command must be entered'
     address ISPEXEC
    "SETMSG MSG(ISRZ000)"
     exit(98)
    end
/*********************************************************************/
/* Allocate the BPX EXEC PDS                                         */
/*********************************************************************/
"ALLOC F(SYSUEXEC) DA('SYS1.SBPXEXEC') SHR REU"
"ALTLIB ACTIVATE USER(EXEC)"
address ISPEXEC "LIBDEF ISPPLIB DATASET ID('SYS1.SBPXPENU') STACK"
/*********************************************************************/
/* Command prefix                                                    */
/*********************************************************************/
cmdpfx = 'BPXBATCH SH'
/*********************************************************************/
/* Set STDOUT and STDERR file names                                  */
/*********************************************************************/
stdout = '/tmp/'||userid()||'-bpxbatch-stdout-'||time('s')
stderr = '/tmp/'||userid()||'-bpxbatch-stderr-'||time('s')
/*********************************************************************/
/* Allocate STDOUT and STDERR for messages and errors                */
/*********************************************************************/
if ussalloc("STDOUT" stdout) <> 0 then exit(97)
if ussalloc("STDERR" stderr) <> 0 then exit(96)
/*********************************************************************/
/* Use BPXBATCH to execute the requested UNIX System Services CMD    */
/*********************************************************************/
cmdpfx cmd
EXITRC = RC / 256
/*********************************************************************/
/* If RC <> 0 BROWSE STDERR to determine the error (if not empty)    */
/*********************************************************************/
if EXITRC <> 0 then
    do
/*********************************************************************/
/* If STDERR is not empty, set the OBROWSE file to STDERR            */
/*********************************************************************/
     if filectr("TESTERR" stderr) > 0 then
        do
         zedlmsg = 'Error during execution of command:' cmd 'RC='EXITRC
         viewfile = stderr
        end
     else
/*********************************************************************/
/* If STDERR is empty and RC>0 use STDOUT (could be a REXX EXEC)     */
/*********************************************************************/
        do
         zedlmsg = 'USS REXX EXEC or an error with:' cmd 'RC='EXITRC
         viewfile = stdout
        end
    end
else
/*********************************************************************/
/* If RC=0 browse STDOUT to review the output                        */
/*********************************************************************/
    do
     zedlmsg = 'Successful execution of command:' cmdpfx cmd
     viewfile = stdout
    end
/*********************************************************************/
/* Display message and OBROWSE the correct output file               */
/*********************************************************************/
address ISPEXEC
"SETMSG MSG(ISRZ000)"
address TSO
"OBROWSE" viewfile
/*********************************************************************/
/* Shutdown                                                          */
/*********************************************************************/
Shutdown: nop
/*********************************************************************/
/* Free and remove STDOUT and STDERR files                           */
/*********************************************************************/
           call ussfree "STDOUT" stdout
           call ussfree "STDERR" stderr
/*********************************************************************/
/* Free SYSUEXEC                                                     */
/*********************************************************************/
          "ALTLIB DEACTIVATE USER(EXEC)"
          "FREE F(SYSUEXEC)"
           address ISPEXEC "LIBDEF ISPPLIB"
           exit EXITRC
/*********************************************************************/
/* Allocate STDxxx files                                             */
/*********************************************************************/
ussalloc: parse arg dd file
          "ALLOCATE FILE("dd") PATH('"file"')",
          "PATHOPTS(OWRONLY,OCREAT,OTRUNC) PATHMODE(SIRWXU)"
           ALLOCRC = RC
           if ALLOCRC <> 0 then say dd 'ALLOC Error RC='ALLOCRC
           return ALLOCRC
/*********************************************************************/
/* Free and remove STDxxx files                                      */
/*********************************************************************/
ussfree: parse arg dd file
         "FREE F("dd")"
          FREERC = RC
          if FREERC <> 0 then say dd 'FREE Error RC='FREERC
         "BPXBATCH SH rm -f" file
          return RC
/*********************************************************************/
/* Count the records in a USS file                                   */
/*********************************************************************/
filectr: parse arg dd file
          if ussalloc(dd file) <> 0 then return 0
/*********************************************************************/
/* Read all the lines of STDERR                                      */
/*********************************************************************/
         "EXECIO * DISKR" dd "(STEM LINES. FINIS"
          EXECIORC = RC
          if EXECIORC <> 0 then
             do
              say dd 'EXECIO DISKR Error RC='EXECIORC
              return 0
             end
         "FREE F("dd")"
          return lines.0

This is basic stuff that works on any z/OS release and back to
OS/390 2.5 (I didn't test it with anything before that).  Once
you get to z/OS 1.4, there were some modules added to the base
that you used to have to download from the z/OS USS Tips and
Tricks page.  One in particular is BPXWUNIX.  This allows you to
redirect STDOUT and STDERR to a SYSOUT dataset.  This makes life
a lot easier.  Here is a little EXEC that wraps BPXWUNIX that I
think makes it easy to use:

/* BPXSPOOL - redirects STDOUT and STDERR to the JES2 Spool from JCL */
parse arg command
if syscalls('ON') <> 0 then exit(RC)
EXITRC = BPXWUNIX(command,'DD:stdin','DD:stdout','DD:stderr','0')
exit(EXITRC)

And JCL to run it:

//jobcard...
//*******************************************************************
//* EXECUTE A USS COMMAND USING BPXSPOOL                            *
//*******************************************************************
//USSCMD   EXEC PGM=IKJEFT01,PARM='BPXSPOOL cp /u/user1/* /u/user2'
//SYSEXEC  DD   DSN=your.exec.pds,DISP=SHR
//SYSTSPRT DD   SYSOUT=*
//SYSTSIN  DD   DUMMY
//STDOUT   DD   SYSOUT=*
//STDERR   DD   SYSOUT=*
//STDIN    DD   DUMMY

You would need to add a //STEPLIB to the downloaded version of
BPXWUNIX if you are not a z/OS 1.4 or above.

Hope This Helps,

Rob

