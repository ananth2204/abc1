/****************************** REXX *********************************/
/*  Purpose: Use BPXWUNIX to redirect STDOUT and STDERR to SYSOUT    */
/*-------------------------------------------------------------------*/
/*  Syntax:  BPXJCL  command                                         */
/*-------------------------------------------------------------------*/
/*  Parms: command    - Any USS command OR VAR=VALUE  pairs          */
/*                                                                   */
/* Notes: Continuation in LONGCMD is supported.  The default  char   */
/*        is  '\'.  Change cchar if a different character is desired */
/*        If a LONGCMD DD is found, anything in it is concatentated  */
/*        to the end of the PARM field (if present).                 */
/*                                                                   */
/* Basic JCL  Example:                                               */
/*                                                                   */
/*        //BPXJCL   EXEC  PGM=IKJEFT01,                             */
/*        //         PARM='BPXJCL wc  -l;echo'                       */
/*        //SYSEXEC  DD    DSN=your.rexx.pds,DISP=SHR                */
/*        //SYSTSPRT DD    SYSOUT=*                                  */
/*        //STDOUT   DD    SYSOUT=*                                  */
/*        //STDERR   DD    SYSOUT=*                                  */
/*        //SYSTSIN  DD    DUMMY                                     */
/*        //LONGCMD  DD    *                                         */
/*         111111\                                                   */
/*         222222                                                    */
/*         333333                                                    */
/*         444444\                                                   */
/*         555555                                                    */
/*        //STDIN     DD    *                                        */
/*         aaaaaaaaaaaaaaaaaa                                        */
/*         bbbbbbbbbbbbbbbbbb                                        */
/*         cccccccccccccccccc                                        */
/*         dddddddddddddddddd                                        */
/*         eeeeeeeeeeeeeeeeee                                        */
/*                                                                   */
/* Basic JCL Example  results:                                       */
/*                                                                   */
/*               5                                                   */
/*        111111222222 333333  444444555555                          */
/*                                                                   */
/*        VAR=VALUE pairs only work when the LONGCMD DD is present   */
/*        and the first character of the parm string is '?' followed */
/*        by space delimited VAR=VALUE pairs (no syntax checking).   */
/*        Imbedded "symbols" follow strict JCL Symbolic rules and    */
/*        must begin with a '&' and end with a '.' ('?', '&' and '.' */
/*        can be changed in the default settings).                   */
/*                                                                   */
/* Symbolic Substitution JCL  Example:                               */
/*                                                                   */
/*        //BPXJCL   EXEC  PGM=IKJEFT01,                             */
/*        //         PARM='BPXJCL ?A=9 B=8 C=7'                      */
/*        //SYSEXEC   DD   DSN=your.rexx.pds,DISP=SHR                */
/*        //SYSTSPRT  DD   SYSOUT=*                                  */
/*        //STDOUT    DD   SYSOUT=*                                  */
/*        //STDERR    DD   SYSOUT=*                                  */
/*        //SYSTSIN   DD   DUMMY                                     */
/*        //LONGCMD   DD   *                                         */
/*        wc  -l;                                                    */
/*        echo  \                                                    */
/*         11&A.1&A.1\                                               */
/*         222222                                                    */
/*         33&B.3&B.3                                                */
/*         444444\                                                   */
/*         555&C.&C.55;                                              */
/*        //STDIN     DD    *                                        */
/*         aaaaaaaaaaaaaaaaaa                                        */
/*         bbbbbbbbbbbbbbbbbb                                        */
/*         cccccccccccccccccc                                        */
/*         dddddddddddddddddd                                        */
/*         eeeeeeeeeeeeeeeeee                                        */
/*                                                                   */
/* Symbolic Substitution JCL Example results:                        */
/*                                                                   */
/*               5                                                   */
/*        119191222222 338383  4444445557755                         */
/*                                                                   */
/*********************************************************************/
/*                       Change  Log                                 */
/*                                                                   */
/*  Author        Date       Reason                                  */
/*  --------    ---------   ---------------------------------------- */
/*  R. Zenuk    Jan 2005   Initial Creation                          */
/*  R. Zenuk    01/16/07   Added STDIN and LONGCMD support           */
/*  R. Zenuk    01/26/07   Added LONGCMD continuation support ('\')  */
/*  R. Zenuk    02/08/07   Added Symbolic substitution support       */
/*                                                                   */
/*********************************************************************/
/*  Accept  command                                                  */
/*********************************************************************/
parse  arg command
say mvsvar('SYSNAME') mvsvar('SYMDEF','JOBNAME') date()  time()
/*********************************************************************/
/*  Set  defaults                                                    */
/*********************************************************************/
sub   =  'NO'              /* Default to no symbolic substitution    */
cont  =  'NO'              /* Start value for continuations          */
cchar =  '\'               /* Default continuation character         */
schar =  '?'               /* Default substitution signal character  */
vchar =  '&'               /* Default symbol begin character         */
tchar =  '.'               /* Default symbol termination character   */
/*********************************************************************/
/*  Check if there is any STDIN  data                                */
/*********************************************************************/
LRC  = listdsi('STDIN' 'FILE')
if LRC = 0 | (LRC <> 0 & sysreason  = 3) then
do
"EXECIO * DISKR STDIN  (STEM STDIN. FINIS"
if stdin.0 <> 0  then
do
say
say 'STDIN contents  ('stdin.0' lines):'
say
do i=1 to  stdin.0
say stdin.i
end
end
end
/*********************************************************************/
/*  Check if there is a LONGCMD  DD                                  */
/*********************************************************************/
LRC  = listdsi('LONGCMD' 'FILE')
if LRC = 0 | (LRC <> 0 &  sysreason = 3) then
do
/*********************************************************************/
/*  Determine if Symbolic Substitution is required                   */
/*********************************************************************/
if left(command,1) = schar then
do
command =  right(command,length(command)-1)
vars = words(command)
sub =  'YES'
say
say 'Symbol substitution  is progress:'
say
do v=1 to  vars
varpair =  word(command,v)
parse var varpair var.v '=' value.v  .
say  var.v 'will be replaced with'  value.v
end
say
command =  ''
end
/*********************************************************************/
/*  Read LONGCMD DD  input                                           */
/*********************************************************************/
"EXECIO * DISKR LONGCMD (STEM LONGCMD. FINIS"
if  longcmd.0 <> 0 then
do
say
say 'Original LONGCMD  contents:'
say
do l=1 to  longcmd.0
/*********************************************************************/
/*  Continuation  support                                            */
/*********************************************************************/
if left(reverse(strip(longcmd.l)),1) = cchar  then
do
prev =  cont
cont =  'YES'
end
else
do
prev =  cont
cont =  'NO'
end
/*********************************************************************/
/*  Determine how to concatenate the lines (flush or  space)         */
/*********************************************************************/
select
when prev = 'YES' & cont = 'YES'  then
command =  command||strip(strip(longcmd.l),'T',cchar)
when prev = 'NO' & cont = 'YES'  then
command = command  strip(strip(longcmd.l),'T',cchar)
when prev = 'YES' & cont = 'NO'  then
command =  command||strip(longcmd.l)
otherwise
command = command  strip(longcmd.l)
end
say  longcmd.l
end
end
end
/*********************************************************************/
/*  Perform Symbolic Substitution if appropriate                     */
/*********************************************************************/
if  sub = 'YES' then
do s=1 to  vars
var =  vchar||var.s||tchar
command =  chgstr(command,value.s,var)
end
/*********************************************************************/
/*  Command being executed                                           */
/*********************************************************************/
say
cmdlen  = length(command)
say 'Executing command ('cmdlen 'bytes):'  command
say
exit  BPXWUNIX(command,'DD:stdin','DD:stdout','DD:stderr','0')
/*********************************************************************/
/*  Change symbolic to value                                         */
/*********************************************************************/
chgstr:  procedure
if arg() <>  3 then
return 'chgstr: missing args, must have string, new and  old'
string =  arg(1)
new =  arg(2)
old =  arg(3)
lnew =  length(new)
lold =  length(old)
x =  1
do  forever
if  pos(old,string,x) = 0 then return  string
x =  pos(old,string,x)
string =  insert(new,delstr(string,x,lold),x-1,lnew)
x = x + length(new)
end

