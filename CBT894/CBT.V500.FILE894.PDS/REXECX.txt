In a message dated 4/24/2007 8:44:17 AM US Mountain Standard Time,
fabrice.vallet@mpsa.com writes:

We try to use RSH in batch to execute commande on Unix remote
system with:

//RSH31 EXEC PGM=RSH
//      PARM='/-d -l p723487  ylai0057 ls -ali PASLA*  '

It's ok but we want to trap a non zero return code?

The RSH always return 00 whereas in the sysprint we have a
message with:

EZA5046I  rsh invoked;
Data socket = 1   Control socket = 3
ls: 0653-341 The file PASLA* does not exist.
EZA5048I  rsh complete

Do you have some an idea  ?
---------------------------------------------------------------

Subject:  Re: RSH return code
From:     Robert Zenuk <Robzenuk@aol.com>
Date:     4/24/2007 12:53 PM

RSH and REXEC only give the RC for the RSH or REXEC process
itself.  Was it able to connect and send the command?  If so,
RC=0.  Nice to know, but usually not what you want.  The only way
that I know to do this is to scrape the SYSPRINT with a REXX
EXEC.  This is not foolproof, but can work and may require some
tailoring for specific commands.

The REXECX REXX EXEC is designed to work with REXEC, but could
easily be changed to RSH.  It appends a ';echo RC=$?' to end of
any command.  The REXX EXEC then looks for the eyecatcher 'RC='
to find the RC and exits with that value so your JCL reports the
correct RC.

REXECX REXX EXEC

/****************************** REXX *********************************/
/*  Purpose: REXEC in batch to return a valid RC from the Remote CMD */
/*-------------------------------------------------------------------*/
/*  Syntax:  REXECX host  command                                    */
/*-------------------------------------------------------------------*/
/*  Parms: HOST       - IP Address or DNS name for  target host      */
/*        COMMAND    -  Command to execute on the remote  host       */
/*                                                                   */
/* Notes: Requires a valid NETRC file in the  JCL                    */
/*                                                                   */
/*********************************************************************/
/*                       Change  Log                                 */
/*                                                                   */
/*  Author        Date       Reason                                  */
/*  --------    ---------   ---------------------------------------- */
/*  R.  Zenuk    Sep 2004   Initial  Creation                        */
/*                                                                   */
/*********************************************************************/
/*  Accept  parms                                                    */
/*********************************************************************/
parse  arg host  command
/*********************************************************************/
/*  If NETRC is allocated, open and  parse                           */
/*********************************************************************/
if  listdsi("NETRC" "FILE") = 0 then
do
"EXECIO * DISKR NETRC (STEM NETRC. FINIS"
do n=1 to  netrc.0
parse var netrc.n .  hostname . uid . pw .
if hostname  = host then leave
end
end
else
do
say  'NETRC file is missing RC=20'
exit  20
end
/*********************************************************************/
/*  Format the REXEC command and append the ECHO  RC=$?              */
/*********************************************************************/
"REXEC  -l" uid "-p" pw host command";echo RC=$?"
if RC <> 0 then exit  RC
/*********************************************************************/
/*  Read the contents of the OUTPUT DD (Remote  output)              */
/*********************************************************************/
"EXECIO  * DISKR OUTPUT (STEM OUTPUT.  FINIS"
/*********************************************************************/
/*  Display the  output                                              */
/*********************************************************************/
do  o=1 to output.0
say  strip(output.o)
end
/*********************************************************************/
/*  Check last line for RC= string and EXIT with the CMDRC value ($?) */
/*********************************************************************/
last  = output.0
if left(output.last,3) = 'RC=' then
do
parse var output.last 'RC=' cmdrc  .
exit cmdrc
end
else
do
say  'Error: Did not find RC= in the last line'
say 'Last  line was:' output.last
exit 12
end


Sample JCL:

//jobcard...
//***************************************************************
//*  REXEC  COMMANDS                                            *
//***************************************************************
//REXEC     EXEC  PGM=IKJEFT01,
//         PARM='REXECX  yourserverdsnname ls -ali PASLA*'
//SYSEXEC  DD    DSN=your.EXEC,DISP=SHR
//OUTPUT   DD    UNIT=VIO,SPACE=(TRK,(1,10),RLSE),RECFM=VB,LRECL=1000
//NETRC     DD   DSN=your.NETRC(yourmem),DISP=SHR
//SYSPRINT DD    SYSOUT=*
//SYSTSPRT DD   SYSOUT=*
//SYSTSIN  DD    DUMMY

Let me know if this came through without the indentation (I hate
it when that happens) and I'll send you a copy directly.

Hope This Helps,
Rob

