/******************************* REXX ********************************/
/* Purpose: Select specific spool output and write it to unique dirs */
/*-------------------------------------------------------------------*/
/* Syntax:  SDSF2ZFS                                                 */
/*-------------------------------------------------------------------*/
/* Parms: PATTERN   - Valid SDSF PREFIX value (def: current jobname) */
/*        LPAR      - Valid SDSF SYSNAME value (def: all LPAR's)     */
/*        PATH      - Path to output location                        */
/*        MODE      - Path mode (i.e. rwx=644)                       */
/*                                                                   */
/* Return Codes: 00 - Good                                           */
/*               12 - Probable TSO command error                     */
/*               16 - SDSF errors                                    */
/*               20 - Path missing                                   */
/*               21 - Root path exists and is not a directory        */
/*               98 - USS Dubbing error                              */
/*               99 - SDSF initialization error                      */
/*                                                                   */
/*********************************************************************/
/*                      Change Log                                   */
/*                                                                   */
/*  Author       Date      Reason                                    */
/*  --------    ---------  ----------------------------------------- */
/*  R. Zenuk    Sep 2012   Initial Creation                          */
/*                                                                   */
/*********************************************************************/
/* Accept the JOB prefix                                             */
/*********************************************************************/
 parse arg pattern lpar path mode .
 if pattern = '' then
    pattern = mvsvar('SYMDEF','JOBNAME')
 if lpar = '' then
    lpar = '*'
 if path = '' then
    do
     say 'PATH missing, RC=20'
     exit 20
    end
 if mode = '' then
    mode = '644'
 isfprefix  = pattern
 isfsysname = lpar
 out.0 = 0
/*********************************************************************/
/* Dub the address space                                             */
/*********************************************************************/
 if syscalls('ON') > 1 then exit 98
/*********************************************************************/
/* Check if the root path exists                                     */
/*********************************************************************/
 path = strip(path,'T','/')
 RETVAL = ussapi('stat' path 'stat.')
 select
/*********************************************************************/
/* If missing create it                                              */
/*********************************************************************/
   when RETVAL <> 0 | ERRNO <> 0 | ERRNOJR <> 0 then
        fd = ussapi('mkdir' path '777')
/*********************************************************************/
/* If not a directory exit RC=21                                     */
/*********************************************************************/
   when stat.ST_TYPE <> S_ISDIR then
        do
         say '"root"' path 'exists and is not a directory, RC=21'
         exit 21
        end
   otherwise nop
 end
/*********************************************************************/
/* Invoke SDSF DA using the prefix                                   */
/*********************************************************************/
 if isfcalls('ON') <> 0 then exit 99
 call sdsfapi "ISFEXEC H"
/*********************************************************************/
/* Find the matching jobnames                                        */
/*********************************************************************/
 do j=1 to isfrows
/*********************************************************************/
/* Select the jobname and allocate all the output sysout datasets    */
/*********************************************************************/
    say jname.j jobid.j
    call sdsfapi "ISFACT H TOKEN('"token.j"') PARM(NP ?) (PREFIX $"
/*********************************************************************/
/* Create the target directory                                       */
/*********************************************************************/
    jobpath = path'/'jname.j':'jobid.j
    fd = ussapi('mkdir' jobpath mode)
/*********************************************************************/
/* Read the DD list for each job                                     */
/*********************************************************************/
    do d=1 to $ddname.0
       call sdsfapi "ISFACT H TOKEN('"$token.d"') PARM(NP SA)"
/*********************************************************************/
/* Read each SYSOUT                                                  */
/*********************************************************************/
       say jname.j $ddname.d isfddname.d isfdsname.d
       address TSO "EXECIO * DISKR" isfddname.1 "(STEM OUT. FINIS"
       say jname.j $ddname.d isfddname.1 isfdsname.1 'RECORDS='out.0
/*********************************************************************/
/* Write the output file                                             */
/*********************************************************************/
       filepath = jobpath'/'$ddname.d
       fd = ussapi('writefile' filepath mode 'out.')
       drop out.
    end
 end
 say
 call isfcalls 'OFF'
 exit 0
/*********************************************************************/
/* SDSF error conditions                                             */
/*********************************************************************/
 sdsfapi: parse arg sdsfcall
          address SDSF sdsfcall
          select
/*********************************************************************/
/* Ignorable conditions                                              */
/*********************************************************************/
            when isfmsg = '' then return
            when isfmsg = 'DATA SET ALLOCATED' then return
/*********************************************************************/
/* Real errors - always RC=16                                        */
/*********************************************************************/
            otherwise
                 do
                  say isfmsg
                  say
                  do e=1 to isfmsg2.0
                     say sdsfcall right(e,2)':' isfmsg2.e
                  end
                  exit 16
                 end
          end
/*********************************************************************/
/* USS API subroutine                                                */
/*********************************************************************/
 ussapi: parse arg usscmd
         address SYSCALL usscmd
         say 'RETVAL='RETVAL 'ERRNO='ERRNO 'ERRNOJR='ERRNOJR,
             'CMD='usscmd
         if ERRNO <> 0 | ERRNOJR <> 0 then
            do
             say center(' 'usscmd' ',76,'-')
             address SYSCALL 'strerror' ERRNO ERRNOJR 'err.'
             say
             say err.SE_ERRNO
             say
             parse var err.SE_REASON . '15'x errmsg
             say errmsg
             say
             say err.SE_ACTION
             say center(' 'usscmd' ',76,'-')
            end
         return RETVAL
