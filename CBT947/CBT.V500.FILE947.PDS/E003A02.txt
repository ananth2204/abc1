Effectively handling packed-unsigned decimals


PACKED AND UNPACKED DATA FIELDS

Our system uses a lot of packed-unsigned decimals to capture
account numbers, codes, dates, and many other items in order
to save storage.  All the savings are made at the cost of longer
processing time.  However, if we can handle them effectively,
the processing time can still be reduced.

Many programs may have their own way to pack or unpack a
field.  Some of them may have used Assembler subroutines to
do the job, but the easiest and fastest way is to define two
fields in working storage and redefine them in the required
way.

If you have a maximum of 10 bytes to pack or unpack, define a
10-digit signed decimal with an implied decimal place field -
PIC S9(10)V9 - and a similar field which is in packed format -
PIC S9(10)V9 COMP-3.  Both must have an initial value of
zero, and must be redefined in order to truncate the last bytes.

  WORKING-STORAGE SECTION.
  01  PACKED-UNSIGN-WORK-AREA.
      05    PACK-10                 PIC  S9(10)V9    COMP-3  VALUE +0.
      05    FILLER  REDEFINES  PACK-10.
            10   PACK-5-BYTES       PIC  X(5).
            10   FILLER             PIC  X.
      05    FILLER  REDEFINES  PACK-10.
            10   FILLER             PIC  X(1).
            10   PACK-4-BYTES       PIC  X(4).
            10   FILLER             PIC  X.
      05    FILLER  REDEFINES  PACK-10.
            10   FILLER             PIC  X(2).
            10   PACK-3-BYTES       PIC  X(3).
            10   FILLER             PIC  X.
      05    FILLER  REDEFINES  PACK-10.
            10   FILLER             PIC  X(3).
            10   PACK-2-BYTES       PIC  X(2).
            10   FILLER             PIC  X.
******************************
      05    UNPK-10                 PIC  S9(10)V9            VALUE +0.
      05    FILLER  REDEFINES  UNPK-10.
            10   UNPACK-10-BYTES    PIC  X(10).
            10   FILLER             PIC  X.
      05    FILLER  REDEFINES  UNPK-10.
            10   FILLER             PIC  X(2).
            10   UNPACK-8-BYTES     PIC  X(8).
            10   FILLER             PIC  X.
      05    FILLER  REDEFINES  UNPK-10.
            10   FILLER             PIC  X(4).
            10   UNPACK-6-BYTES     PIC  X(6).
            10   FILLER             PIC  X.
      05    FILLER  REDEFINES  UNPK-10.
            10   FILLER             PIC  X(6).
            10   UNPACK-4-BYTES     PIC  X(4).
            10   FILLER             PIC  X.
  PROCEDURE DIVISION.
  TO-UNPACK-10-DIGIT-ACNO.
       MOVE  PACKED-ACNO            TO   PACK-5-BYTES.
       MOVE  PACK-10                TO   UNPK-10.
       MOVE  UNPACK-10-BYTES        TO   UNPACKED-ACNO.
  TO-UNPACK-6-DIGIT-DATE.
       MOVE  PACKED-DATE            TO   PACK-3-BYTES.
       MOVE  PACK-10                TO   UNPK-10.
       MOVE  UNPACK-6-BYTES         TO   UNPACKED-DATE.
  TO-UNPACK-4-DIGIT-CODE.
       MOVE  PACKED-CODE            TO   PACK-2-BYTES.
       MOVE  PACK-10                TO   UNPK-10.
       MOVE  UNPACK-4-BYTES         TO   UNPACKED-CODE.
 *SIMILAR FOR OTHER NUMBER OF DIGITS.
  TO-PACK-10-DIGIT-ACNO.
       MOVE  UNPACKED-ACNO          TO   UNPACK-10-BYTES.
       MOVE  UNPK-10                TO   PACK-10.
       MOVE  PACK-5-BYTES           TO   PACKED-ACNO.
  TO-PACK-6-DIGIT-DATE.
       MOVE  UNPACKED-DATE          TO   UNPACK-6-BYTES.
       MOVE  UNPK-10                TO   PACK-10.
       MOVE  PACK-3-BYTES           TO   PACKED-DATE.
  TO-PACK-4-DIGIT-CODE.
       MOVE  UNPACKED-CODE          TO   UNPACK-4-BYTES.
       MOVE  UNPK-10                TO   PACK-10.
       MOVE  PACK-2-BYTES           TO   PACKED-CODE.
 *SIMILAR FOR OTHER NUMBER OF DIGITS.

NOTES

o      The implied decimal must be specified for PACK-10.

o      When you follow the same method to define the fields,
      MOVE PACK-10 TO UNPK-10 generates only an UNPK
      instruction; and MOVE UNPK-10 TO PACK-10 generates
      PACK and ZAP instructions.

o      If the receiving fields are defined without a sign then each
      MOVE statement generates one more 0I instruction.

o      If the implied decimal is not specified for UNPK-10 then
      each MOVE statement generates one more MVO instruction.


CHECKING AND MOVING OF PACKED-UNSIGNED DATA FIELDS

When packed-unsigned decimals are used in the system, you
may need to check their content or move some specific data
into them.  In this case you may define the specific data in
working storage as follows.

 WORKING-STORAGE SECTION.
 01  PACKED-UNSIGN-WORK-AREA.
     05    PACKED-DATA             PIC  S9(10)V9   COMP-3   VALUE +1234567890.0.
     05    FILLER  REDEFINES  PACKED-DATA.
           10   PACK-1234          PIC  X(2).
           10   PACK-567890        PIC  X(3).
           10   FILLER             PIC  X.
     05    PACKED-FIELD-1          PIC  X(2).
     05    PACKED-FIELD-2          PIC  X(3).
 PROCEDURE DIVISION.
**************************************************************
*    Both the following procedures perform the same task     *
*    ie       If PACKED-FIELD-1 contains x'1234' then        *
*                move X'567890' to PACKED-FIELD-2.           *
**************************************************************
 NORMAL-WAY-TO-CHECK-AND-MOVE.
      MOVE  PACKED-FIELD-1         TO   PACK-2-BYTES.
      MOVE  PACK-10 TO             UNPK-10.
      IF  UNPACK-4-BYTES           =   '1234'
           MOVE  '567890'          TO   UNPACK-6-BYTES
           MOVE  UNPK-10           TO   PACK-10
           MOVE  PACK-3-BYTES      TO   PACKED-FIELD-2.
 SHORTER-WAY-TO-CHECK-AND-MOVE.
      MOVE  1234                   TO   PACK-10.
      IF  PACKED-FIELD-1           =   PACK-2-BYTES
           MOVE  567890            TO   PACK-10
           MOVE  PACK-3-BYTES      TO   PACKED-FIELD-2.
 SHORTEST-WAY-TO-CHECK-AND-MOVE.
      IF  PACKED-FIELD-1           =    PACK-1234
           MOVE  PACK-567890       TO   PACKED-FIELD-2.

Chwee Tee Ng
Project Analyst
Bank of China (Singapore)

