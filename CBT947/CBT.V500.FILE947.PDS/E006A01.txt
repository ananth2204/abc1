Issue a POWER command from batch

The program source which follows allows a POWER command
to be issued either from a batch job stream or from a calling
program. Don't try calling it from a CICS program because the
ECBs will put CICS into a wait state.

From a batch job you would supply the power command to be
issued on the PARM operand of the EXEC statement, ie:

      // EXEC PWRCMD,PARM='A LST,MYJOB,CLASS=X'

If the POWER command is a PDISPLAY command, any
messages that would appear on the console, assuming the
command was issued at the console, will be printed on
SYSLST. If problems occur, a return code of 16 is set.

PWRCMD may also be called from another program;
remember that PWRCMD does write to SYSLST, though. An
example of how it may be called from another Assembler
program is shown below. I am sure you could work out how to
call it from PL/I or COBOL.

Here is an example of how to call PWRCMD from another
Assembler program:

         CDLOAD PWRCMD             LOAD PWRCMD INTO GETVIS
         LTR   R15,R15             LOAD WORK OK ?
         BNZ   ERRCDLOD            ...NO
         LR    R15,R1              SET UP ENTRY ADDRESS TO PWRCMD
         LA    R1,PSEUDOPP         LOAD ADDRESS OF PSEUDO PARM POINTER
         LA    R13,SAVEAREA        LOAD ADDRESS OF SAVEAREA
         BALR  R14,R15             GO CALL PWRCMD
         LTR   R15,R15             POWER COMMAND WORK OK ?
         BNZ   ERRPCMD             ...NO
*
         OTHER PROGRAM CODE  ETC
*
SAVEAREA DS    9D
PSEUDOPP DC    A(PSEUDOP)           PSEUDO PARM POINTER
PSEUDOP  EQU   *                    PSEUDO PARM
         DC    Y(PSEUDOPL)           LENGTH
         DC    C'D LST,FREE'        YOUR POWER COMMAND
PSEUDOPL EQU   *-PSEUDOP-2          LENGTH OF PSEUDO PARM

PWRCMD has been tested and works on both VSE/SP 3.1.2
and VSE/ESA 1.2.0. Saving registers on entry, restoring them
at EOJ and then branching on R14 with a return code in R15
does work for a VSE main program from about VSE/SP 2.
PWRCMD has unlimited access to all queue entries, like the
VSE central operator, and any valid POWER command can be
issued and will be processed. You might like to add some code
to screen out certain commands. For audit purposes the VSE
jobname and the command to be issued are written to SYSLOG
and SYSLST. Values for PXPRETCD and PXPFBKCD may
be found in the PWRSPL DSECT, and values for IJBXFCT,
IJBXRETC, and IJBXREAS in the MAPXPCCB DSECT. The
above fields appear in the error messages should anything fail.

There are three in-line macros:

o      MESSAGE - issue messages to SYSLST/SYSLOG or both.

o      SAVEWORK - save and restore work registers for nesting.

o      B2X - convert return codes to printable hex.


PWRCMD

*% PWRCMD   - DESCRIPTION                                             %
*% ISSUE A POWER COMMAND FROM BATCH VIA PARM                          %
         EJECT
*% MACRO - MESSAGE                                                    %
*%         ERROR MESSAGE TO SYSLOG ETC                                %
         MACRO
&LABEL   MESSAGE &LINE,&ADDR=,&LENGTH=,&TYPE=CONS
         LCLA &LEN,&LOC,&X,&SCHAR
         AIF  ('&LABEL' EQ '').NOLABEL
&LABEL   DS    0H
.NOLABEL ANOP
         AIF  ('&TYPE' NE 'BOTH').BYPBOTH
         OI    FLAGCTL,FLGCONS+FLGPRT
.BYPBOTH ANOP
         AIF  ('&TYPE' NE 'CONS').BYPCONS
         OI    FLAGCTL,FLGCONS
.BYPCONS ANOP
         AIF  ('&TYPE' NE 'PRT').BYPPRT
         OI    FLAGCTL,FLGPRT
.BYPPRT  ANOP
         AIF  ('&ADDR' EQ '').LITERAL
         AIF  ('&LENGTH' NE '').LENOK
         LA    R1,&ADDR                  ADDRESS OF LINE TO BE PUNCHED
         LH    R0,&ADDR.L                LENGTH OF LINE ASSUMED
         BAL   BALREG,SHOWIT
         MEXIT
.*                                       ADDRESS OF LINE SUPPLIED
.LENOK   ANOP
         AIF  (T'&LENGTH NE 'A').LEN2
         LA    R1,&ADDR                  ADDRESS OF LINE TO BE PUNCHED
         LH    R0,&LENGTH                LENGTH OF LINE
         BAL   BALREG,SHOWIT
         MEXIT
.*                                       LITERAL LENGTH SUPPLIED
.LEN2    ANOP
         LA    R1,&ADDR                  ADDRESS OF LINE TO BE PUNCHED
         LH    R0,=Y(&LENGTH-1)          LENGTH OF LINE
         BAL   BALREG,SHOWIT
         MEXIT
.*                                    LINE SUPPLIED AS A LITERAL
.*                                    THE NEXT BIT CHECKS FOR SPECIAL
.*                                    CHARACTERS IN &LINE SO WE CAN
.*                                    CALCULATE A CORRECT LENGTH VALUE
.LITERAL ANOP
&SCHAR   SETA 0
&LOC     SETA 2
&X       SETA K'&LINE-2
.*
.LOOP    ANOP
         AIF   ('&LINE'(&LOC,1) EQ '''').UPSCHAR
         AIF   ('&LINE'(&LOC,1) EQ '&&'(1,1)).UPSCHAR
         AGO .BYPUPS
.UPSCHAR ANOP
&SCHAR   SETA &SCHAR+1
.BYPUPS  ANOP
&X       SETA &X-1
         AIF   ('&X' EQ '0').CONT01
&LOC     SETA &LOC+1
         AGO .LOOP
.CONT01  ANOP
         AIF   ('&SCHAR' EQ '0').CONT02
&SCHAR   SETA &SCHAR/2
.CONT02  ANOP
&LEN     SETA K'&LINE-3-&SCHAR           ASSEMBLER LENGTH OF LINE
         LA    R1,=C&LINE                ADDRESS OF MESSAGE
         LH    R0,=Y(&LEN)               LENGTH OF MESSAGE
         BAL   BALREG,SHOWIT
         MEND
*% END                                                                %
         EJECT
*% MACRO - SAVEWORK                                                   %
*%         SAVE WORK REGISTERS ( R2,R3,R4,R5 ) AND BALREG, AND ALLOW  %
*% RESTORE OF SAME REGISTERS. THE MACRO HAS 4 DIFFERENT FORMATS :     %
*%                                                                    %
*% TYPE = SAVE   - SAVE REGISTERS, LEVEL= MUST BE SPECIFIED           %
*%        REST   - RESTORE REGISTERS, LEVEL= MUST BE SPECIFIED AND    %
*%                 MATCH LEVEL= WHEN SAVE WAS DONE SO THE SAME SET    %
*%                 OF REGISTERS IS RESTORED.                          %
*%        SET    - SPECIFY HOW MANY SAVEAREAS VIA NUMLEVS=            %
*%        DEFINE - DEFINE THE BLOCK OF SAVE AREA'S                    %
         MACRO
&LABEL   SAVEWORK &TYPE=,&NUMLEVS=,&LEVEL=
         GBLA &CURLEV,&MAXLEV
         LCLA &OFFSET
.*                                      CHECK TYPE OK
         AIF  ('&TYPE' EQ 'SAVE').TYPEOK
         AIF  ('&TYPE' EQ 'REST').TYPEOK
         AIF  ('&TYPE' EQ 'SET').TYPEOK
         AIF  ('&TYPE' EQ 'DEFINE').TYPEOK
         MNOTE 16,'INVALID TYPE SPECIFIED'
         MEXIT
.TYPEOK  ANOP
         AIF  ('&LABEL' EQ '').NOLABEL
.*                                      KICK OUT LABEL IF REQUIRED
         AIF  ('&LABEL' EQ '').NOLABEL
&LABEL   DS    0H
.NOLABEL ANOP
.*                                      SELECT ON TYPE
         AIF  ('&TYPE' EQ 'SAVE').SAVE
         AIF  ('&TYPE' EQ 'REST').REST
         AIF  ('&TYPE' EQ 'DEFINE').DEFINE
.*                                      DEFAULT TO TYPE=SET
         AIF  ('&NUMLEVS' EQ '').NLEVERR
&MAXLEV  SETA  &NUMLEVS                 SET GLOBAL CONSTANT
         MEXIT
.NLEVERR ANOP
         MNOTE 16,'NUMLEVS MUST BE SPECIFIED ON SET COMMAND'
         MEXIT
.*                                      DEFINE SAVEAREA BLOCK
.DEFINE  ANOP
         DS    0D
SAVEWORK DC    CL20'SAVEWORK  EYECATCHER'
         DC    (&MAXLEV*5)F'0'
         MEXIT
.*                                      SAVE REGISTERS
.SAVE    ANOP
         AIF  ('&LEVEL' EQ '').SLEVERR
&CURLEV  SETA  &CURLEV+1
         AIF  ('&CURLEV' GT '&MAXLEV').MAXLERR
&OFFSET  SETA  &CURLEV*20
&LEVEL   EQU   &OFFSET                  EQU SO REST HAS SAME OFFSET
         STM   R2,R5,SAVEWORK+&LEVEL
         ST    BALREG,SAVEWORK+&LEVEL+16
         MEXIT
.SLEVERR ANOP
         MNOTE 16,'LEVEL MUST BE SPECIFIED ON SAVE COMMAND'
         MEXIT
.MAXLERR ANOP
         MNOTE 16,'MAXIMUM NUMBER OF SAVEAREAS EXCEEDED'
         MEXIT
.*                                      RESTORE REGISTERS
.REST    ANOP
         AIF  ('&LEVEL' EQ '').RLEVERR
         LM    R2,R5,SAVEWORK+&LEVEL
         L     BALREG,SAVEWORK+&LEVEL+16
         MEXIT
.RLEVERR  ANOP
         MNOTE 16,'LEVEL MUST BE SPECIFIED ON REST COMMAND'
         MEXIT
         MEND
*% END                                                                %
         EJECT
*% MACRO - B2X                                                        %
*%         CONVERT A BINARY TO PRINTABLE HEX AND MOVE                 %
         MACRO
&LABEL   B2X &OUTPUT,&INPUT
         UNPK  #UNPKWRK(L'&INPUT*2+1),&INPUT.(L'&INPUT+1)
         TR    #UNPKWRK(L'&INPUT*2),PRINTHEX
         MVC   &OUTPUT,#UNPKWRK
         MEND
*% END                                                                %
         EJECT
*% DSECTS                                                             %
         PRINT ON,GEN
         MAPCOMR                       DSECT OF COMREG
         MAPXPCCB                      DSECT OF XPCC BLOCK ETC
         PWRSPL TYPE=MAP               DSECT OF SPOOL PARAM LIST
*% END                                                                %
         EJECT
*% START OF MODULE                                                    %
         PRINT ON,GEN
MODSTART CSECT
         DC    CL8'PWRCMD  '       MODULE NAME STORAGE MARKER
*% REGISTER EQUATES                                                   %
R0       EQU   0             -  MACROS LINKAGE ETC
R1       EQU   1             -  MACROS LINKAGE ETC
R2       EQU   2             WORK REG
R3       EQU   3             WORK REG
R4       EQU   4             WORK REG
R5       EQU   5             WORK REG
XPCCBREG EQU   6             XPCCB CONTROL BLOCK
R7       EQU   7             REPLY BUFFER
R8       EQU   8             PXPUSER & PXUUSER DSECTS
BALREG   EQU   9             BRANCH AND LINK REGISTER
BASE1    EQU   10            BASE REG 1
BASE2    EQU   11            BASE REG 2
BASE3    EQU   12            BASE REG 3
R12      EQU   12
R13      EQU   13            -  SAVEAREA
R14      EQU   14            -  MACROS LINKAGE ETC
R15      EQU   15            -  MACROS LINKAGE ETC
*% OTHER EQUATES                                                      %
POSTBIT  EQU   X'80'               MASK FOR A POSTED ECB
RBUFSIZE EQU   4*1024              REPLY BUFFER SIZE IN K
*% END EQUATES                                                        %
         EJECT
*% START OF CODE                                                      %
PWRCMD   CSECT
         STM   R14,R12,12(R13)     SAVE REGISTERS
         BALR  BASE1,0             LOAD BASE REG ONE
         USING *,BASE1,BASE2,BASE3 ESTABLISH ADDRESABILITY
         LA    BASE2,4095(BASE1)   LOAD BASE REG TWO
         LA    BASE2,1(BASE2)
         LA    BASE3,4095(BASE2)   LOAD BASE REG THREE
         LA    BASE3,1(BASE3)
         ST    R13,SAVEAREA+4      SAVE R13 FOR GOING BACK
         LA    R13,SAVEAREA        POINT TO SAVE AREA
         SAVEWORK TYPE=SET,NUMLEVS=20
         CR    R1,R15              WAS A PARM SUPPLIED
         BE    NOPARM              NO !!
         XR    R2,R2               CLEAR R2
         ICM   R2,B'0111',1(R1)    LOAD ADDR OF PARM
         XR    R3,R3               CLEAR R3
         ICM   R3,B'0011',0(R2)    LOAD LENGTH BYTES OF PARM
         C     R3,=F'71'           CHECK LENGTH
         BL    *+8                 OK SO DO EXECUTE
         L     R3,=F'71'           REP AS TOO LONG
         BCTR  R3,R0               MAKE A MACHINE LENGTH
         LA    R2,2(R2)            UP R2 TO POINT TO PARM DATA
         EX    R3,MOVEPOWC         MOVE POWER COMMAND INTO SPL LIST
         OPEN  PRINTER
         COMRG                     GET COMREG ADDRESS
         USING COMREG,R1           ADDRESSING
         MVC   JOBNAME,COMNAME     MOVE JOB NAME FOR MSG
         MVC   ISSCMD,CMDCFLD      MOVE THE COMMAND FOR MSG
         MESSAGE ADDR=MSGICMD,TYPE=BOTH
         B     BYPMVCX1
MOVEPOWC MVC   CMDCFLD(*-*),0(R2)  VARIABLE MOVE FOR POWER COMMAND
BYPMVCX1 DS    0H
         LA    XPCCBREG,XPCCBLK          LOAD ADDRESS OF XPCCB BLOCK
         USING IJBXPCCB,XPCCBREG         DUMMY SECTION FOR XPCCB BLOCK
         LA    R7,REPLBUF          LOAD THE ADDR OF BUFFER
         USING RECPRFIX,R7         DSECT FOR POWER RECORD REFIX
         XPCC XPCCB=(XPCCBREG),FUNC=IDENT      IDENTIFY MYSELF
         B     *+4(R15)            BRANCH ON RETURN CODE
         B     IDENTOK             RC = 0      ALL     OK
         B     IDENTOK             RC = 4      THIS IS OK
         B     ERRXPCC             RC = 8
         B     ERRXPCC             RC = 12     SHOULD BE N/A
         B     ERRXPCC             RC = 16     SHOULD BE N/A
IDENTOK  DS    0H
         XPCC XPCCB=(XPCCBREG),FUNC=CONNECT    CONNECT TO POWER
         LTR   R15,R15             ZERO RETURN CODE ?
         BNZ   ERRXPCC             ...NO
         SETIME 120,INTECB         INSTALL WAIT INTERVAL OF TWO MINS
         LA    R3,IJBXCECB         LOAD ADDRESS OF CONNECTION ECB
         ST    R3,LISTCECB         COMPLETE WAITLIST
         WAITM WAITLIST            WAIT FOR CONNECTION OR 2 MINS
         TM    IJBXCECB+2,POSTBIT  CONNECTION COMPLETE?
         BNO   ERRTOUT             ...NO, SO ISSUE TIMEOUT MESSAGE
         LA    R8,IJBXSUSR         GET ADDR OF USER DATA TO BE SENT
         USING PXUUSER,R8          ADDRESSABILITY FOR DSECT
         MVI   PXUBTYP,PXUBTSPL    IND BUFFER TYPE IS SPOOL
         XC    PXUACT1,PXUACT1     CLEAR ACTION BYTE
         XC    CMDGPW,CMDGPW       CLEAR PASSWORD FOR NO CHECKS
DOSENDR  DS    0H
         XPCC XPCCB=(XPCCBREG),FUNC=SENDR
         LTR   R15,R15             ZERO RETURN CODE ?
         BNZ   ERRXPCC             ...NO
         LA    R3,IJBXSECB         LOAD ADDRESS OF SENDR ECB
         WAIT  (R3)                WAIT FOR SENDER ECB TO BE POSTED
         CLI   IJBXREAS,X'00'      REASON CODE OK ?
         BNE   ERRREAS             ...NO
         LA    R8,IJBXRUSR         GET ADDR OF RECEIVED USER DATA
         USING PXPUSER,R8          ADDRESSABILITY FOR DSECT
         CLI   PXPRETCD,PXP00OK    POWER RETURN CODE OK ?
         BNE   ERRPOW              ...NO
         BAL   BALREG,PRNTREP      PRINT THE REPLY BUFFER
         CLI   PXPFBKCD,PXP00EOD   WAS LAST BUFFER END OF DATA ?
         BE    DODISC              ...YES
         XC    IJBXBLN,IJBXBLN     ZERO LENGTH BUFFER TO BE SENT
         LA    R8,IJBXSUSR         GET ADDR OF USER DATA TO BE SENT
         USING PXUUSER,R8          ADDRESSABILITY FOR DSECT
         XC    PXUBTYP,PXUBTYP     CLEAR BUFFER TYPE
         MVI   PXUACT1,PXUATRMR    INDICATE SEND MORE MESSAGES
         B     DOSENDR
DODISC   DS    0H
         XPCC XPCCB=(XPCCBREG),FUNC=DISCONN    DISCONNECT FROM POWER
         LTR   R15,R15             ZERO RETURN CODE ?
         BNZ   ERRXPCC             ...NO
         XPCC XPCCB=(XPCCBREG),FUNC=TERMIN     TERMINATE XPCC
         LTR   R15,R15             ZERO RETURN CODE ?
         BNZ   ERRXPCC             ...NO
         B     RETURN
*% END                                                                %
         EJECT
*% RETURN                                                             %
RETURN   DS    0H                  EOJ ROUTINE
         CLOSE PRINTER
         L     R15,RETCODE         LOAD THE RETURN CODE
         L     R13,SAVEAREA+4      RESTORE SAVE AREA ADDRESS
         L     R14,12(R13)         RESTORE REGISTERS APART FROM R15
         LM    R0,R12,20(R13)      WHICH HAS THE RETURN CODE
         BR    R14                 BACK WE GO
*% END                                                                %
         EJECT
*% SUB ROUTINE PRINT THE REPLY BUFFER                                 %
PRNTREP  DS    0H
         SAVEWORK TYPE=SAVE,LEVEL=SWRKPRP
         LA    R7,REPLBUF         LOAD ADDR OF BUFFER
         USING RECPRFIX,R7        DSECT FOR POWER RECORD PREFIX
BUFLEFT  EQU   R3
         XR    BUFLEFT,BUFLEFT    CLEAR REG
         ICM   BUFLEFT,B'0111',IJBXSLN  LENGTH OF BUFFER TO PROCESS
         BZ    PREPRET            NOTHING TO PRINT
PREPLOOP DS    0H
         LH    R2,RECLNGTH         LOAD LENGTH BYTES
         LA    R7,RECPRFXL(R7)     UP R7 TO POINT TO DATA
         LR    R1,R7               ADDRESS OF DATA
         AR    R7,R2               UP BY LENGTH OF RECORD FOR NEXT
         BCTR  R2,0                MAKE A MACHINE LENGTH
         LR    R0,R2               LOAD REG FOR CALL
         OI    FLAGCTL,FLGPRT      TO THE PRINTER
         BAL   BALREG,SHOWIT       GO PRINT ROUTINE
         LA    R2,RECPRFXL+1(R2)   TOTAL LENGTH DATA + HEADER
         SR    BUFLEFT,R2          CALC LENGTH OF BUFFER STILL TO DO
         LTR   BUFLEFT,BUFLEFT     ALL DONE ?
         BZ    PREPRET             ...YES
         B     PREPLOOP            LOOP ROUND
PREPRET  DS    0H
         SAVEWORK TYPE=REST,LEVEL=SWRKPRP
         BR    BALREG
*% END                                                                %
         EJECT
*% EXTENDED ERROR HANDLING                                            %
NOPARM   DS    0H
         MESSAGE 'NO PARM SUPPLIED ON // EXEC'
         MVC   RETCODE,=F'16'      RETURN CODE 16
         B     RETURN
ERRTOUT  MESSAGE 'TIMEOUT HAS OCCURRED'
         MVC   RETCODE,=F'16'      RETURN CODE 16
         B     RETURN
ERRPOW   DS    0H
         USING PXPUSER,R8          ADDRESSABILITY FOR DSECT
         MVC   RETCODE,=F'16'      RETURN CODE 16
         B2X   CODE1,PXPRETCD      POWER RETURN CODE
         B2X   CODE2,PXPFBKCD      POWER FEEDBACK CODE
         MESSAGE ADDR=MSGRETS,TYPE=BOTH
         B     RETURN
ERRXPCC  DS    0H
         ST    R15,RETCODE         SAVE RETURN CODE FOR EOJ
         STCM  R15,B'0001',XPCCRC  SAVE RC FOR MSG
         B2X   XPCODE1,IJBXFCT     FUNCTION BYTE
         B2X   XPCODE2,IJBXRETC    XPCC RETURN CODE
         B2X   XPRCR15,XPCCRC      XPCC RETURN CODE R15
         MESSAGE ADDR=MSGXPRC,TYPE=BOTH
         B     RETURN
ERRREAS  DS    0H
         MVC   RETCODE,=F'16'      SET RETURN CODE 16
         B2X   XPREAS,IJBXREAS     RAESON CODE
         MESSAGE ADDR=MSGREAS,TYPE=BOTH
         B     RETURN
*% END                                                                %
         EJECT
*% SUB ROUTINE TO DISPLAY MESSAGES                                    %
*%                                                                    %
*%    A 'BAL' IS MADE TO THIS ROUTINE WHEN THE IN-LINE MACRO MESSAGE  %
*% IS USED, R0 = MACHINE LENGTH OF MESSAGE & R1 = ADDRESS OF THE      %
*% MESSAGE                                                            %
*%                                                                    %
SHOWIT   DS    0H
         SAVEWORK TYPE=SAVE,LEVEL=SWRKPRT       SAVE BALREG ETC
         MVI   MESSAREA,X'40'      BLANK FOR ASA CTL CHAR + ROLL MOVE
         MVC   MESSAREA+1(L'MESSAREA-1),MESSAREA   CLEAR IT
         MVC   MESSAREA+1(L'MESSHEAD),MESSHEAD     MESSAGE PREFIX
         LR    R2,R0
         CH    R2,=Y(132-L'MESSHEAD)  LOGIC CHK MAX MSG LENGTH ?
         BNH   SHWLENOK               ...NO
         LH    R2,=Y(132-L'MESSHEAD)  ...YES  SO FIRST 72 BYTES ONLY
SHWLENOK DS    0H
         EX    R2,MOVEMESS
         TM    FLAGCTL,FLGCONS     CONSOLE ?
         BZ    SHWPRT              ...NO
         PUT   CONSOLE,MESSAREA    OUTPUT TO SYSLOG
SHWPRT   DS    0H
         TM    FLAGCTL,FLGPRT      PRINTER ?
         BZ    SHWRET              ...NO
         PUT   PRINTER,MESSAREA    OUTPUT TO SYSLST
SHWRET   DS    0H
         NI    FLAGCTL,X'FF'-FLGCONS-FLGPRT     RESET FLAGS
         SAVEWORK TYPE=REST,LEVEL=SWRKPRT       RESTORE BALREG ETC
         BR    BALREG              RETURN
MOVEMESS MVC   MESSAREA+L'MESSHEAD+1(*-*),0(R1)   MOVE THE MESSAGE
*% END                                                                %
         EJECT
*% CONSTANTS                                                          %
SAVEAREA DS    9D                   SAVEAREA
RETCODE  DC    F'0'                 RETURN CODE
XPCCRC   DS    X                    XPCC R15 RETURN CODE ERROR PROC
         SAVEWORK TYPE=DEFINE
WAITLIST DC    A(INTECB)           INTECB = 1ST ELEMENT OF WAITLIST
LISTCECB DC    A(0)                IJBXCECB = 2ND ELEM. OF WAITLIST
LISTEND  DC    X'FF'               INDICATE END OF WAITLIST
INTECB   DS    F                   ECB USED TO WAIT FOR TIMER INTERVALS
MESSHEAD DC    C'PWRCMD : '         HEADER FOR ALL MESSAGES
MESSAREA DC    CL133' '
FLAGCTL  DC    X'00'                CONTROL FLAG
FLGCONS  EQU   B'00000001'          CONSOLE MESSAGE
FLGPRT   EQU   B'00000010'          PRINTER MESSAGE
#UNPKWRK DS    CL32                 UNPK WORK AREA
PRINTHEX EQU   *-240                START ADDRESS FOR TRANTAB
         DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'
PWRREQ   PWRSPL TYPE=GEN,FUNC=COMMAND,USERID=SYSCMD,REQ=CTL,PRFX=CMD
XPCCBLK  XPCCB  APPL=SYSCMD,TOAPPL=SYSPWR,BUFFER=(PWRREQ,CMDGLEN),     C
               REPAREA=(REPLBUF,RBUFSIZE)
*% END                                                                %
         EJECT
*% MESSAGE CONSTANTS                                                  %
MSGICMD  DS    0H
         DC    C' JOB = '
JOBNAME  DC    CL8' '
         DC    C' CMD = '
ISSCMD   DC    CL71' '
MSGICMDE EQU   *
MSGICMDL DC    Y((MSGICMDE-MSGICMD)-1)
MSGRETS  DS    0H
         DC    C' REQUEST TO POWER FAILED   PXPRETCD = '
CODE1    DC    C'  '
         DC    C' PXPFBKCD = '
CODE2    DC    C'  '
MSGRETSE EQU   *
MSGRETSL DC    Y((MSGRETSE-MSGRETS)-1)
MSGXPRC  DS    0H
         DC    C' XPCC REQUEST FAILED  R15 = '
XPRCR15  DC    C'  '
         DC    C' IJBXFCT  = '
XPCODE1  DC    C'  '
         DC    C' IJBXRETC = '
XPCODE2  DC    C'  '
MSGXPRCE EQU   *
MSGXPRCL DC    Y((MSGXPRCE-MSGXPRC)-1)
MSGREAS  DS    0H
         DC    C' BAD REASON CODE '
         DC    C' IJBXREAS = '
XPREAS   DC    C'  '
MSGREASE EQU   *
MSGREASL DC    Y((MSGREASE-MSGREAS)-1)
*% END                                                                %
         EJECT
*% START OF LTORG POOL                                                %
         LTORG
*% END                                                                %
         EJECT
*% DTF FOR FILES                                                      %
         PRINT ON,NOGEN
CONSOLE  DTFCN DEVADDR=SYSLOG,                                         C
               IOAREA1=CONSWORK,                                       C
               TYPEFLE=CMBND,                                          C
               BLKSIZE=65,                                             C
               INPSIZE=65,                                             C
               WORKA=YES
CONSWORK DS     CL144
PRINTER  DTFPR DEVADDR=SYSLST,                                         C
               IOAREA1=REPORT1,IOAREA2=REPORT2,                        C
               BLKSIZE=133,                                            C
               CTLCHR=ASA,                                             C
               WORKA=YES
REPORT1  DS     CL133
REPORT2  DS     CL133
REPLBUF  DC     (RBUFSIZE)X'00'         DEFINE REPLY BUFFER AREA
*% END                                                                %
         END   PWRCMD
John Brunton
System Programmer
Cannon Lincoln Assurance (UK)      c J Brunton & Cannon Lincoln Assurance 1992

