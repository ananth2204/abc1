VSE batch operator

The following program was developed to allow VSE operator
commands to be issued from a batch jobstream.  Our
environment is VSE/SP 3.2 with CICS 1.7 running under
VM/SP HPO 5. The VSEMCDS program takes advantage of
SVC 30 which was introduced with VSE/SP 3.x.x.  An article
in CICS Update provided some information on enabling SVC
30 in a VSE/SP 2.1.x environment.

VSECMDS allows most VSE console commands to be issued
from a batch job.  In addition, two pseudo commands have also
been implemented to provide some control over when and
where commands are issued.  Although SVC 30 allows
commands to be issued there are no provisions for obtaining
the response that may have resulted from the command.  For
instance, if you were to issue a PRTY command via SVC 30
you have no way of determining or retrieving the output from
the command for further analysis.  This tends to restrict the
usefulness of being able to issue commands via SVC 30 but
there are still some functions which can be successfully
handled.  In addition, SVC 30 does issue a return code to
indicate whether the command was successfully processed or
rejected.  If this return code is greater than 4 the remaining
VSECMDS statements will be flushed and the VSE return code
will be set to the value returned by SVC 30.  An SVC 30 return
code of 4 means the command processor was busy.
VSECMDS  will try to re-issue the command for several
minutes and if unsuccessful will flush the remaining
VSECMDS statements and set the VSE return code to a non-
zero value.

The two psuedo commands implemented are a CPU command
and a WAIT command.  The CPU command is used to make
sure the commands are issued on the right CPU.  In a multi-
CPU environment this can be very important.  The format for
the command is:

      CPU nnnnnn

Where nnnnnn is the 6 digit CPU-id of the CPU you wish to
run on.  The command must begin in column 1, be followed by
exactly 1 space, and then the 6 digit CPU-id.  If the specified
CPU-id does not match that of the CPU running the batch job,
the remaining VSECMDS control statements are flushed and
the VSE return code is set to a non-zero value.

The 'WAIT' command has two formats.  The first format is
used to wait for a specified number of seconds.

      WAIT nnn

Where nnn is a 1-3 digit number specifying the number of
seconds to wait.  After the specified time expires the next
VSECMDS control statement will be processed.

The second format is used to wait until a specified partition
becomes free.

      WAIT partid

where partid is a 2 character partition id, eg F1, BG, etc.
When the specified partition becomes free, ie it has a jobname
of 'NO NAME', the next VSECMDS control statement is
processed.  If the specified partition does not free up after
several minutes the remaining VSECMDS statements are
flushed and the VSE return code is set to a non-zero value.

In addition to the two pseudo commands there is a slight
modification to the normal syntax of commands which are
preceded by a repl-id.  Normally if you were to issue a
command at the console such as 'MSG F2' you would be
prompted with the repl-id which you should use for your
response.  This repl-id cannot always be predicted ahead of
time and may vary depending on the tasks running in the
partition.  To handle this situation and allow VSECMDS to
issue the MSG command and properly handle responses to it,
the repl-id is not actually coded on the VSECMDS statement.
Instead the two character partition id is substituted for it and
the actual repl-id will be determined from the VSE Operator
Reply Element table for the specified partition.  If a repl-id
cannot be determined after several minutes, the remaining
VSECMDS statements are flushed and the VSE return code is
set to a non-zero value.  Also if you attempt to issue a MSG to
an inactive partition the remaining VSECMDS statements are
flushed and the VSE return code is set to a non-zero value.
The following examples may help illustrate the various
commands and formats.


EXAMPLE 1

// EXEC VSECMDS
MSG F2
F2 CEMT I TAS          notice that F2 is substituted for the repl-id
F2                     EOB to clear the outstanding reply
/*


EXAMPLE 2

// EXEC VSECMDS
CPU 123456             make sure we are running on the right CPU
MSG F2                 MSG to CICS
F2 CSMT SHUT,Y         shut it down immediately
WAIT F2                wait for the partition to become free
Z NET,QUICK            terminate VTAM
WAIT F3                wait for the partition to become free
PEND                   shut down POWER
/*


EXAMPLE 3

// EXEC VSECMDS
/LLOG STOP            stop CA-LOOK logging
WAIT 60               wait 60 seconds for command to complete
/SERV Q SHUT          shutdown CA-LOOK
WAIT 60               wait 60 seconds for command to complete
MSG F2                msg to CICS
F2 CJSI STOP,OFF      stop JARS
F2                    EOB
MSG F6                msg to CICS
F6 CJSI STOP,OFF      stop JARS
F6                    EOB
/*

As mentioned earlier, if you were to try and issue a MSG to an
inactive partition VSECMDS would flush the remaining
statements, possibly discarding statements which you would
like to go ahead and issue.  It is useful sometimes to not issue
all commands via the same execution of VSECMDS. See
Examples 4 and 5.


EXAMPLE 4

// EXEC VSECMDS
MSG F2
F2 CJSI STOP,OFF
F2
MSG F6
F6 CJSI STOP,OFF
F6
/*

This would fail to issue the commands in F6 if F2 was not
active. Instead you might do the following so that the F6
commands are issued regardless of whether F2 is active or not.


EXAMPLE 5

// EXEC VSECMDS
MSG F2
F2 CJSI STOP,OFF
F2
// EXEC VSECMDS
MSG F6
F6 CJSI STOP,OFF
F6
/*


VSECMDS

*                           V S E C M D S                             *
*  A PROGRAM WHICH ALLOWS BATCH JOBSTREAMS TO ISSUE VSE CONSOLE CMDS  *
         PRINT NOGEN
COMREG   MAPCOMR
SYSCOM   SYSCOM
ASDSECT  DSECT
ASCCB    DS    2D
ASUSCCB  DS    F
ASUCCW   DS    F
ASCUT    DS    F
ASOCTID  DS    H
ASREPLY  DS    CL3
ASCCHQP  DS    X
ASFLAG   DS    X
ASRSTAT  EQU   X'40'
ASPT     DS    CL3
         DS    CL2
ASDLEN   EQU   *-ASDSECT
VSECMDS  CSECT
         BALR  R12,0
         USING *,R12
         B     BEGIN
         DC    CL16'VSECMDS 02/20/89'
BEGIN    EQU   *
         LA    R9,0                         RETURN CODE
         MVC   MESSAGE(L'MSGVSE),MSGVSE
         EXCP  CONSOLE
         WAIT  CONSOLE
         OPEN  IJSYSIN                      OPEN SYSIPT
READ     EQU   *
*  READ NEXT RECORD FROM SYSIPT                                       *
         GET   IJSYSIN                     GET A COMMAND
         MVC   MESSAGE(50),IO              ECHO TO SYSLST
         EXCP  SYSLST
         WAIT  SYSLST
CHKCMD   EQU   *
         LA    R3,IO                       POINT TO IT
         MVI   REPLY,C'N'                  RESET REPLY SWT
         LA    R4,3(,R3)                   POINT PAST KEYWORD
         CLC   0(4,R3),=C'MSG '            IS IT MSG PARTID?
         BE    LOOKPP
         CLC   0(4,R3),=C'CPU '            IS IT CPUID?
         BE    CPUID
         CLC   0(5,R3),=C'WAIT '           IS IT A WAIT
         BNE   PROCESS                     NO, MUST BE A REAL COMMAND
*  WAIT AND MSG STMTS ARE PROCESSED HERE                              *
*  WAIT FORMAT IS 'WAIT NNN' OR 'WAIT PARTID', WHERE NNN IS A TIME    *
*  INTERVAL AND PARTID IS PARTITION ID.                               *
         EXCP  CONSOLE                     ECHO WAIT TO CONSOLE
         WAIT  CONSOLE
         LA    R4,4(,R3)                   POINT PAST KEYWORD
LOOKPP   EQU   *
         MVC   TIME,=C'000000'             INIT WORK AREA
         LA    R10,20                      MAX SPACES TO SCAN
SCANT    EQU   *                           SCAN PAST SPACES
         LA    R4,1(,R4)                   LOOK AT NEXT CHAR
         CLI   0(R4),C' '                  IS IT A SPACE
         BNE   GETSECS                     NO, FINISHED WITH SCAN
         BCT   R10,SCANT                   GO SCAN SOME MORE
         B     NOTNUM
GETSECS  EQU   *
         LA    R10,3                       MAX DIGITS
         LA    R8,TIME+2                   WORK AREA
SCANG    EQU   *                           SCAN NUMERIC WAIT INTERVAL
         CLI   0(R4),C'0'                  IS IT NUMERIC?
         BL    CHKPRTN                     NO
         CLI   0(R4),C'9'                  IS IT NUMERIC
         BH    CHKPRTN                     NO
         MVC   0(1,R8),0(R4)               MOVE A DIGIT
         LA    R4,1(,R4)                   LOOK AT NEXT CHAR
         CLI   0(R4),C' '                  IS IT A SPACE
         BE    CNVRT                       YES, FINISIHED
         LA    R8,1(,R8)                   NO, BUMP TARGET BY 1
         BCT   R10,SCANG                   BACK FOR MORE
         LA    R10,1(,R10)                 ADJUST FOR 3 DIGIT INTERVAL
CNVRT    EQU   *
         LA    R4,TIME+3                  POINT TO WORK AREA
         SR    R4,R10                     ADJUST START OF NUMERIC FIELD
         PACK  DWORD,0(3,R4)              CONVERT INTERVAL
         CVB   R15,DWORD                  PUT IT INTO R15
         SETIME (R15),TECBLK              AND WAIT
         WAIT  TECBLK
         B     READ                       GET NEXT COMMAND
* COME HERE TO DETERMINE PARTID ON WAIT AND MSG STMTS                 *
* THERE IS AN ASSUMPTION HERE THAT 12 PARTITIONS ARE GENNED           *
CHKPRTN  EQU   *
         LA    R5,12                        NUMBER OF PARTITIONS
         SR    R6,R6                        CLEAR R6-DISPL INTO PIB2TAB
         LA    R7,PTAB                      ADDR OF PARTID TABLE
LOOPP    EQU   *
         LA    R6,16(,R6)                   DISPL INTO PIB2TAB
         CLC   0(3,R4),0(R7)                IS IT THE RIGHT PARTID?
         BE    PARTN                        YES,R6 HAS DISPL NOW
         LA    R7,3(,R7)                    NEXT PARTID
         BCT   R5,LOOPP                     BACK AGAIN
         B     NOTPID                       SOMETHING WRONG
PARTN    EQU   *
         L     R5,X'14'                     GET ACTIVE PARTITION
         USING COMREG,R5
         LH    R5,BGCOMPT                   GET BG COMREG
         LH    R2,PIB2PTR                   GET PIB2TAB
         LA    R2,0(R6,R2)                  GET PARTN COMREG
         LH    R5,0(R2)
         LA    R10,10                       LOOP COUNT
PLOOP    EQU   *
         CLC   0(5,R3),=C'WAIT '            IS IT A WAIT STMT
         BE    PWAIT                        YES, PROCESS IT
         CLC   0(4,R3),=C'MSG '             IS IT A MSG STMT
         BNE   PROCESS
         LA    R9,12                        SET RETURN CODE
         CLC   COMNAME(8),=CL8'NO NAME '    MSG FOR INACTIVE PARTITION?
         BE    QUITERR
         MVC   PTN+5(2),0(R4)               PUT PARTID IN RESOURCE ID
* WE CREATE A LOCK FOR THE PARTITION WE WILL BE DOING A 'MSG' TO.     *
* WE DO NOT WANT MULTIPLE COPIES OF 'VSECMDS' TRYING TO COMMUNICATE   *
* WITH THE SAME PARTITION AT THE SAME TIME. HOWEVER, LOCKING THE      *
* RESOURCE AND WAITING CREATES THE POSSIBILITY OF A 'DEADLY EMBRACE'  *
* IF WE HAVE MULTIPLE 'VSECMDS' RUNNING AND TRYING TO DO MSG'S TO     *
* MULTIPLE PARTITIONS.                                                *
         LOCK  PTN,FAIL=WAIT
         LA    R9,0                         SET RETURN CODE
         B     PROCESS
*  COME HERE TO WAIT FOR A SPECIFIC PARTITION TO BECOME FREE          *
PWAIT    EQU   *
         CLC   COMNAME(8),=CL8'NO NAME '    IS IT FREE?
         BE    READ
         SETIME 30,TECBLK                   WAIT AROUND
         WAIT  TECBLK
         BCT   R10,PWAIT                    GO BACK AND CHK AGAIN
         MVC   MESSAGE(L'MSGPTN),MSGPTN     PARTITION NEVER FREED UP
         LA    R9,12                        SET RETURN CODE
         B     QUITERR
*  COME HERE TO PROCESS COMMANDS OTHER THAN WAIT AND CPU              *
PROCESS  EQU   *
         ST    R3,CMDADDR                 SAVE ADDRESS OF COMMAND
         LA    R10,79                     LENGTH OF SCAN
SCANS    EQU   *
         LA    R4,0(R10,R3)               POINT R4 TO NEXT CHAR
         CLI   0(R4),C' '                 IS IT A SPACE
         BNE   SAVELEN                    NO, FINISHED WITH SCAN
         BCT   R10,SCANS                  GO SCAN SOME MORE
         MVC   MESSAGE(L'MSGERR),MSGERR
         LA    R9,12                      SET RETURN CODE
         B     QUITERR
SAVELEN  EQU   *
         LA    R10,1(,R10)                ADJUST LENGTH UP BY 1
         STH   R10,CMDLEN                 SAVE IT FOR SVC30
         CLC   0(3,R3),=C'F2 '            CHK FOR REPLID
         BE    REPLYID
         CLC   0(3,R3),=C'F3 '            CHK FOR REPLID
         BE    REPLYID
         CLC   0(3,R3),=C'F4 '            CHK FOR REPLID
         BE    REPLYID
         CLC   0(3,R3),=C'F5 '            CHK FOR REPLID
         BE    REPLYID
         CLC   0(3,R3),=C'F6 '            CHK FOR REPLID
         BE    REPLYID
         CLC   0(3,R3),=C'F7 '            CHK FOR REPLID
         BE    REPLYID
         CLC   0(3,R3),=C'F8 '            CHK FOR REPLID
         BE    REPLYID
         CLC   0(3,R3),=C'F9 '            CHK FOR REPLID
         BE    REPLYID
         CLC   0(3,R3),=C'FA '            CHK FOR REPLID
         BE    REPLYID
         CLC   0(3,R3),=C'FB '            CHK FOR REPLID
         BE    REPLYID
         CLC   0(3,R3),=C'BG '            CHK FOR REPLID
         BE    REPLYID
         B     CMD
* COME HERE TO DETERMINE WHAT A SPECIFIC PARTITIONS REPLID IS         *
REPLYID  EQU   *
         LA    R7,24                      NUMBER OF 5 SEC WAITS
LOOPM    EQU   *
         ASYSCOM R5
         USING SYSCOM,R5
         ICM   R5,7,IJBASYAD                ASYNCH OP CMD TAB
         DROP  R5
         L     R5,0(R5)                     POINT TO ORE
         USING ASDSECT,R5
         LA    R6,16                        LOOP COUNTER
LOOPM01  EQU   *
         TM    ASFLAG,ASRSTAT               CHK FOR REPLID
         BZ    LOOPM02
         CLC   0(2,R3),ASPT                 IS IT THE ONE WE WANT
         BE    FIXRID                       YES, GO INSERT REPLID
LOOPM02  EQU   *
         LA    R5,ASDLEN(R5)                NEXT ONE
         BCT   R6,LOOPM01                   LOOP BACK
         SETIME 05,TECBLK                   WAIT AWHILE
         WAIT  TECBLK
         BCT   R7,LOOPM                     GO SCAN AGAIN
         MVC   MESSAGE(L'MSGFAIL),MSGFAIL   DID NOT FIND REPLID
         EXCP  CONSOLE
         WAIT  CONSOLE
         EXCP  SYSLST
         WAIT  SYSLST
         MVC   MESSAGE(L'MSGBYP),MSGBYP
         MVC   MESSAGE+18(30),IO
         LA    R9,12                       SET RETURN CODE
         B     QUITERR
FIXRID   EQU   *
         MVC   0(2,R3),ASREPLY+1            ONLY USE LAST 2 OF REPLYID
         MVI   REPLY,C'Y'                   INDICATE WE WANT TO REPLY
CMD      EQU   *
         LA    R10,5                        RETRY COUNT FOR BUSY
*  COME HERE TO ISSUE SVC 30 TO PERFORM THE COMMAND                   *
SVC30    EQU   *
         LA    R1,CMDLEN                    SETUP PARMLIST FOR SVC30
         SLR   0,0
         SVC   30
         LTR   R15,R15                      ERRORS?
         BZ    OK
         LR    R9,R15                       PUT INTO RETURN CODE
         C     R15,=F'4'                    BUSY, RETRY COMMAND
         BE    BUSY
         C     R15,=F'8'                    COMMAND TOO LONG
         BE    TRUNC
         MVC   MESSAGE(L'MSGERR),MSGERR
         B     QUITERR
*  COME HERE TO PROCESS CPU STMT                                      *
*  WE WANT TO MAKE SURE WE ARE RUNNING ON THE RIGHT CPU               *
CPUID    EQU   *
         LA    R10,10
         EXTRACT ID=CPUID,AREA=CPUSTOR,LEN=(10)
         MVC   DWORD(3),CPUSTOR+1
         UNPK  CPUSTOR(8),DWORD(4)
         CLC   4(6,R3),CPUSTOR+1            IS IT THE RIGHT CPU?
         BE    READ
         MVC   MESSAGE(L'MSGCPU),MSGCPU
         LA    R9,12                        SET RETURN CODE
         B     QUITERR
*  COMMAND PROCESSOR WAS BUSY, WE WILL WAIT AND RETRY                 *
BUSY     EQU   *
         SETIME 02,TECBLK                   WAIT 2 SECONDS
         WAIT  TECBLK
         BCT   R10,SVC30                    TRY IT AGAIN
         MVC   MESSAGE(L'MSGBUSY),MSGBUSY
         B     QUITERR                      GIVE UP
NOTNUM   EQU   *
         MVC   MESSAGE(L'MSGWAIT),MSGWAIT
         LA    R9,12                        SET RETURN CODE
         B     QUITERR
NOTPID   EQU   *
         MVC   MESSAGE(L'MSGPID),MSGPID
         LA    R9,12                        SET RETURN CODE
         B     QUITERR
TRUNC    EQU   *
         MVC   MESSAGE(L'MSGTRN),MSGTRN
         B     QUITERR
* COMMAND PROCESSED OK. MAY NEED TO WAIT IF PROCESSING REPLIDS        *
OK       EQU   *
         CLI   REPLY,C'Y'                   PROCESSING REPLYS
         BNE   READ
         SETIME 05,TECBLK                   GIVE MORE TIME TO UPDATE
         WAIT  TECBLK
         B     READ                         YES, GO BACK FOR MORE
* WRITE ERROR MESSAGES TO CONSOLE AND SYSLST                          *
QUITERR  EQU   *
         EXCP  CONSOLE                      ERR MSG TO CONSOLE
         WAIT  CONSOLE
         EXCP  SYSLST                       ERR MSG TO SYSLST ALSO
         WAIT  SYSLST
*  FLUSH REST OF CONTROL CARDS IF ERRORS ENCOUNTERED                  *
READE    EQU   *                            BYPASS REST OF COMMANDS
         GET   IJSYSIN
         MVC   MESSAGE(L'MSGBYP),MSGBYP
         MVC   MESSAGE+18(30),IO
         EXCP  CONSOLE
         WAIT  CONSOLE
         EXCP  SYSLST
         WAIT  SYSLST
         B     READE
EOJ      EQU   *
         CLOSE IJSYSIN
*  END WITH A RETURN CODE AND UNLOCK ANY RESOURCES                    *
EOJRC    EQU   *
         UNLOCK ALL
         EOJ   RC=(R9)
         CNOP  2,4
CMDLEN   DC    H'0'
CMDADDR  DC    A(0)
CONSOLE  CCB   SYSLOG,WRITECCW
SYSLST   CCB   SYSLST,LSTCCW
WRITECCW CCW   1,MESSAGE,0,L'MESSAGE
LSTCCW   CCW   9,MESSAGE,0,L'MESSAGE
TECBLK   TECB
REPLY    DC    C'N'
DWORD    DC    D'0'
CPUSTOR  DC    CL10' '
TIME     DC    C'000000'
MESSAGE  DC    CL50' '
PTAB     DC    C'BG FB FA F9 F8 F7 F6 F5 F4 F3 F2 F1 '
MSGPID   DC    C'VSE002:  INVALID PARTITION ID              '
MSGVSE   DC    C'VSE003:  BATCH VSE AR COMMAND PROCESSOR    '
MSGERR   DC    C'VSE004:  INVALID COMMAND                   '
MSGTRN   DC    C'VSE005:  COMMAND TRUNCATED                 '
MSGWAIT  DC    C'VSE006:  INVALID INTERVAL ON WAIT STATEMENT'
MSGBYP   DC    C'VSE007:  BYPASSED-                         '
MSGBUSY  DC    C'VSE008:  COMMAND PROCESSOR BUSY            '
MSGFAIL  DC    C'VSE009:  FAILED TO FIND ACTIVE REPLY ID    '
MSGPTN   DC    C'VSE010:  PARTITION NOT AVAILABLE           '
MSGCPU   DC    C'VSE011:  CPU-ID DID NOT MATCH              '
IO       DC    CL80' '
IJSYSIN  DTFDI DEVADDR=SYSIPT,IOAREA1=IO,EOFADDR=EOJ,RECSIZE=80
         PRINT GEN
* PARTITION RESOURCE ID TO ENQUEUE ON, PP WILL BE REPLACED WITH PARTID*
PTN      DTL   NAME=$PPVSECMD
         EQUREGS
         END

Stanley A Stewart
Technical Services Manager
St John Medical Center (USA)

