Setting return codes from within COBOL

With the advent of conditional JCL, control of job execution is
now a reality. The return code may be tested and appropriate
remedial action taken. However, there is no standard way to set
a return code from within a COBOL program. The following
Assembler program may be CALLed from a COBOL program
to set the return code.

* $$ JOB JNM=RCPOST,CLASS=0,DISP=D
* $$ PUN DISP=I
// JOB RCPOST  -  ASSEMBLE AND CATALOG RC SUBROUTINE
// OPTION LIST,DECK
// EXEC ASSEMBLY,SIZE=128K
         PUNCH '// JOB LIBRCAT'
         PUNCH '// EXEC LIBR,PARM=''ACCESS SUBLIB=PRD1.BASE'''
         PUNCH '   CATALOG RCPOST.OBJ REPLACE=YES'
RCPOST   START 0
*         NOTE:  REGISTER NOT SAVED - NO RETURN TO CALLER        *
         LR    3,15                LOAD BASE REGISTER
         USING RCPOST,3
         L     5,0(0,1)            SAVE ADDRESS OF PASSED RC
         L     15,0(0,5)           LOAD RC INTO REGISTER 15
         EOJ   RC=(15)
         END
/*
// EXEC ASSEMBLY,SIZE=128K
         PUNCH '/*'
         PUNCH '/&&'
         END
/*
/&
* $$ EOJ

The following is an example of the coding needed to set the
return code from a COBOL program and use of it to control job
flow.

In the WORKING-STORAGE section code:

 01  RCODE                   PIC 9(8) COMP VALUE 0.

In the PROCEDURE DIVISION code:

*  SET RETURN CODE FOR CONDITIONAL JCL
*     100 = QUARTERLY RUN, ANYTHING ELSE IS NOT QUARTERLY RUN
     MOVE 100 TO RCODE.
     CALL 'RCPOST' USING RCODE.


JCL EXAMPLE

Place the following three lines at the start of a job to override
the default handling of return codes:

// ON $ABEND GOTO ABORT
// ON $RC GE 16 CONTINUE
// ON $RC GT 4 AND $RC LT 16 GOTO ABORT

The following tests the maximum return code, and takes
appropriate action:

// IF $MRC=0100 THEN
// GOTO QTRLY
// whatever steps you want
 .
 .
 .
/. QTRLY

Frank A Braman
Systems Programmer
St Johnsbury Trucking Co  (USA)      c St Johnsbury Trucking Co 1992

