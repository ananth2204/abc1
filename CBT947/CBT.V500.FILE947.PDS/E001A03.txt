On-line VSE messages under VM

When working in a VM/VSE environment it is sometimes
really frustrating not to be able to display VSE error messages
on-line.  In order to facilitate this we copied the
VSE.MESSAGES.ONLINE file from VSE to VM.  We named
it VSEMESG ONLINE, and built the following program,
which is able to read, format and display the requested help
information.  A parameter value of '?' displays a one-line help
text.  Make sure that the C'n' (line 95) really is a lower case
(non-capital) 'n'.

         MACRO
&LBL     CLS
&LBL     CNOP   0,8
         STM    R1,R2,*+52
         BAL    R1,*+12
         DC     CL8'CONWAIT'
         SVC    202
         DC     AL4(1)
         LA     R2,009
         BCR    0,0
         BAL    R1,*+12
         DC     X'1900000020FF0001'
         DIAG   R1,R2,X'0058'
         LM     R1,R2,*+8
         B      *+12
         DS     2F
         MEND
VSEHELP  CSECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         BALR  R12,0                   * REGISTER 12 IS BASE REGISTER
         USING *,R12                   * NOTIFY ASSEMBLER
         STM   R14,R13,0(R13)          * SAVE OLD REGISTERS
         ST    R13,SAVEAREA            * SAVE REGISTER STORE PLACE
         B     VSEHSTRT                * BRANCH TO THE START
         DC    C'NAME: VSEHELP FACILITY, ASSEMBLED: '
         DC    C'&SYSDATE '
         DC    C'&SYSTIME'
         DC    C', AUTHOR: R.T. HEEMSKERK'
         TITLE 'BUILD UP WORD TABLES'
VSEHSTRT CLI   8(R1),X'FF'
         BE    NOMESG
         CLI   8(R1),C'?'
         BE    HELP
         MVC   ERRMESG(8),8(R1)        * ERROR MESG NUMBER IS PARAMETER
         FSSTATE FSCB=INFILE,ERROR=NOFILE  * FIND FIRST VSEMESG ONLINE
         FSOPEN FSCB=INFILE            * OPEN IT
         FSREAD FSCB=INFILE            * READ FIRST LINE
         LR    R2,R0                   * SAVE LENGTH IN REGISTER 2
         L     R7,=A(SPECTAB)          * TABLE FOR OFTEN USED WORDS
         MVC   TRANSTAB(256),BUFFER+16 * TRANSLATION TABLE IN 1ST LINE
         LA    R5,BUFFER               * REGISTER 5
         LA    R5,272(R5)              *   BEING POINTER INTO 1ST LINE
         S     R2,=F'272'              * 272 CHAR'S = TRANSTAB + HEADER
         XR    R3,R3                   * REGISTER 3 WILL CONTAIN CHAR'S
SPECFILL IC    R3,0(R5)                * INPUT CHARACTER FROM LINE
         STC   R3,SPECMOVE+1           *   = LENGTH OF WORD - 1
         STC   R3,0(R7)                *   INTO SPECIALS TABLE
SPECMOVE MVC   1(1,R7),1(R5)           * LENGTH MODIFIED BY R3
         LA    R7,32(R7)               * R7 POINT TO NEXT IN SPECTABLE
         LA    R3,1(R3)                * R3 = LENGTH OF WORD
         AR    R5,R3                   * UPDATE LINE POINTER REGISTER 5
         LA    R5,1(R5)                *   PAST LENGTH BYTE + WORD
         SR    R2,R3                   * UPDATE RESTING LINE LENGTH
         BCT   R2,SPECFILL             * IF NOT ZERO GET NEXT SPECIAL
         L     R7,=A(WOORDTAB)         * TABLE FOR LESS COMMON WORDS
         LA    R6,8                    * COUNTER FOR NUMBER OF LINES
LOOP1    FSREAD FSCB=INFILE            * READ A LINE
         LR    R2,R0                   * STORE LENGTH INTO REGISTER 2
         S     R2,=F'12'               * 1ST 12 BYTES NOT OF INTEREST
         LA    R5,BUFFER               * REGISTER 5 POINTER INTO LINE
         LA    R5,12(R5)               * PAST 1ST 12 BYTES
REPEAT   IC    R3,0(R5)                * INSERT CHARACTER FROM LINE
         STC   R3,MOVE+1               *   = LENGTH OF WORD - 1
         STC   R3,0(R7)                *   INTO WORDS TABLE
MOVE     MVC   1(1,R7),1(R5)           * LENGTH MODIFIED BY R3
         LA    R7,16(R7)               * NEXT ENTRY IN WORDS TABLE
         LA    R3,1(R3)                * = LENGTH OF WORD
         AR    R5,R3                   * UPDATE LINE POINTER
         LA    R5,1(R5)                *   PAST LENGTH BYTE + WORD
         SR    R2,R3                   * UPDATE RESTING LINE LENGTH
         BCT   R2,REPEAT               * IF NOT ZERO NEXT WORD
         BCT   R6,LOOP1                * NEXT LINE, IF NOT ZERO
         TITLE 'FIND THE LINE CONTAINING THE ERROR CODE'
FINDCODE FSREAD FSCB=INFILE,ERROR=NOTFOUND * READ NEXT LINE
         LR    R2,R0                   * REMEMBER LENGTH IN REGISTER 2
         A     R2,=A(BUFFER)           * + BUFFER ADDRESS = END OF DATA
         LA    R6,8                    * LENGTH OF ERROR CODE
LOOPJE   L     R5,=A(BUFFER)           * ADDRESS OF MESG FILE LINE
         AR    R5,R6                   * OFFSET INTO ERROR CODE
         CLI   3(R5),C'n'              * 'n' IS ANY NUMBER
         BE    ISSMALLN                * IF EQUAL, REPLACE THAT N
         BCT   R6,LOOPJE               * NEXT CHARACTER IN ERROR CODE
         B     XLATE                   * LAST DONE, GO COMPARE
ISSMALLN LA    R4,ERRMESG              * ADDRESS OF REQUESTED MESG-ID
         AR    R4,R6                   *   + OFFSET INTO ERROR CODE
         MVC   3(1,R5),0(R4)           * MOVE INTO MESG FILE LINE
         BCT   R6,LOOPJE               * GO FOR NEXT CHARACTER
XLATE    TR    BUFFER+3(8),TRANSUPP    * TRANSLATE MSGCODE TO UPPERCASE
         CLC   BUFFER+3(8),ERRMESG     * IS IT THE REQUESTED ONE?
         BL    FINDCODE                * NOT YET, GO TO NEXT LINE
         BH    NOTFOUND                * PAST CODE => IT DOESN'T EXIST
         TITLE 'PROCESS THE ERROR MESSAGE'
         CLS                           * CLEAR THE SCREEN
         WRTERM ERRMESG,8              * FIRST SCREEN LINE = ERRORCODE
         WRTERM ' '                    * EMPTY LINE
         LA    R5,BUFFER               * REGISTER 5 POINTER INTO LINE
         LA    R5,12(R5)               * 1ST 12 BYTES NOT OF INTEREST
LOOPMESG IC    R3,0(R5)                * LENGTH OF INPUT-LINE-PART
         LA    R5,1(R5)                * POINT PAST LENGTH BYTE
         LA    R4,OUTBUF               * REG 4 POINTER IN SCREEN OUTPUT
NEXTCHAR MVC   LETTER(1),0(R5)         * GET NEXT CHARACTER IN INPUT
         TR    LETTER(1),TRANSTAB      * TRANSLATE WITH MESG-TRANSL-TAB
         CLI   LETTER,X'9C'            * OUTCOME A X'9C' CHARACTER?
         BE    SPECIAL                 * THEN SPECIAL PROCESSING
         CLI   LETTER,X'B1'            * X'B1' MEANT TO BE BOLDFACE
         BE    IGNORE                  * NOT IMPLEMENTED
         CLI   LETTER,X'B2'            * X'B2' MEANT END BOLDFACE
         BE    IGNORE                  * NOT IMPLEMENTED
         B     UPDATER4                * SKIP NEXT
JUSTSPCE MVI   LETTER,C' '             * LET LETTER IS A SPACE
UPDATER4 MVC   0(1,R4),LETTER          * PUT CHARACTER IN SCREEN OUTPUT
         LA    R4,1(R4)                * UPDATE SCREEN OUTPUT POINTER
IGNORE   LA    R5,1(R5)                * POINT TO NEXT INPUT CHARACTER
DONE     BCT   R3,NEXTCHAR             * NOT LAST OF INPUT PART? NEXT!
         S     R4,=A(OUTBUF)           * POINTER OUTPUT - STARTOUTPUT
         WRTERM OUTBUF,(R4)            *   = LENGTH; OUTPUT TO SCREEN
         CLR   R5,R2                   * END OF LINE?
         BNL   ENDMESG                 * THEN GO CLOSE ETC.
         CLI   0(R5),X'00'             * NEXT CHARACTER IS X'00' ?
         BNE   LOOPMESG                * NO, GO PROCESS NEXT INPUT PART
         WRTERM ' '                    * YES, WRITE BLANK LINE
         LA    R5,1(R5)                * POINT PAST X'00' CHARACTER
         B     LOOPMESG                * GO PROCESS NEXT INPUT PART
         TITLE 'PROCESSING OF SPECIAL CHARACTERS'
SPECIAL  CLI   0(R5),X'20'             * IF CHARACTER'S X-VALUE < 20
         BL    ISSPEC                  * THEN FIND IT IN OFTEN USED TAB
         BE    JUSTSPCE                * IF = 20 THEN MAKE IT A SPACE
         CLI   0(R5),X'30'             * IF CHARACTER'S X-VALUE < 30
         BL    NEWLINE                 * THEN DO TAB PROCESSING
         BE    TIMES3                  * IF = 30 THEN NEXT CHAR 3 TIMES
         LH    R6,0(R5)                * ELSE IN COMMON WORD TABLE
         N     R6,=X'000003FF'         * LAST 10 BYTES = WORD NUMBER
         SLL   R6,4                    * TIMES 16 = OFFSET IN TABLE
         A     R6,=A(WOORDTAB)         * + ADDRESS TABLE = ABSOLUTE ADD
         TM    0(R5),X'08'             * IF '08' BIT NOT SET
         BZ    NOSPACE                 * SKIP FOLLOWING 2 LINES
         MVI   0(R4),C' '              * IF SET, MOVE A SPACE BEFORE
         LA    R4,1(R4)                * UPDATE SCREEN OUTPUT POINTER
NOSPACE  XR    R7,R7                   * MAKE REGISTER 7 ZERO
         IC    R7,0(R6)                * GET LENGTH OF THE WORD - 1
         STC   R7,MOVE2+1              * TO BE MOVED
         STC   R7,TRANSL+1             * AND PERHAPS TO BE UPPERCASE'D
MOVE2    MVC   0(1,R4),1(R6)           * LENGTH MODIFIED BY R7
         LR    R8,R4                   * SAVE SCREEN OUTPUT POINTER
         AR    R4,R7                   * UPDATE SCREEN OUTPUT POINTER
         LA    R4,1(R4)                *   WITH WORDLENGTH
         TM    0(R5),X'10'             * IF '10' BIT NOT SET
         BZ    CHCK1ST                 * SKIP THE FOLLOWING LINE
TRANSL   TR    0(1,R8),TRANSUPP        * MAKE WORD UPCASE, LENGTH MODIF
CKCK1ST  TM    0(R5),X'20'             * IF '20' BIT NOT SET
         BZ    CHCKENDS                * SKIP THE FOLLOWING LINE
         TR    0(1,R8),TRANSUPP        * MAKE FIRST CHARACTER UPPERCASE
CHCKENDS TM    0(R5),X'04'             * IF '04' BIT NOT SET
         BZ    NOENDSP                 * SKIP THE FOLLOWING 2 LINES
         MVI   0(R4),C' '              * PUT SPACE AFTER THE WORD
         LA    R4,1(R4)                * UPDATE SCREEN OUTPUT POINTER
NOENDSP  LA    R5,2(R5)                * 2 INPUT BYTES DONE
         BCTR  R3,0                    * UPDATE INPUT PART POINTER
         B     DONE                    * RETURN
NEWLINE  L     R9,=A(OUTBUF)           * ADDRESS OF SCREEN OUPUT BUFFER
         LA    R9,5(R9)                * PLUS 5 INTO REGISTER 9
         CLR   R4,R9                   * CURRENT POINTER </= REGISTER 9
         BNH   MAKETAB                 * THEN DON'T OUTPUT YET
         S     R4,=A(OUTBUF)           * OUTPUT POINTER - STARTOUTPUT
         WRTERM OUTBUF,(R4)            * IS OUTPUT LENGTH; OUTPUT
         L     R4,=A(OUTBUF)           * RESET OUTPUT SCREEN POINTER
MAKETAB  MVI   0(R4),C' '              * INPUT A SERIES OF 5 SPACES
         MVC   1(5,R4),0(R4)           * INTO SCREEN OUTPUT BUFFER
         L     R4,=A(OUTBUF)           * RESET OUTPUT SCREEN POINTER
         LA    R4,5(R4)                * TO TAB-POSITION
         LA    R5,1(R5)                * UPDATE INPUT POINTER
         B     DONE                    * RETURN
TIMES3   MVC   0(1,R4),1(R5)           * INPUT A SERIES OF 3 CHARACTERS
         MVC   1(2,R4),0(R4)           * INTO SCREEN OUTPUT BUFFER
         LA    R4,3(R4)                * UPDATE SCREEN OUTPUT POINTER
         LA    R5,2(R5)                * UPDATE INPUT POINTER
         BCTR  R3,0                    * UPDATE INPUT PART POINTER
         B     DONE                    * RETURN
ISSPEC   XR    R6,R6                   * MAKE REGISTER 6 ZERO
         IC    R6,0(R5)                * INPUT WORD NUMBER
         SLL   R6,5                    * TIMES 32 = OFFSET IN TABLE
         A     R6,=A(SPECTAB)          * + ADDRESS TABLE = ABSOLUTE ADD
         XR    R7,R7                   * MAKE REGISTER 7 ZERO
         IC    R7,0(R6)                * GET LENGTH OF WORD - 1
         LA    R7,1(R7)                * + 1 = LENGTH OF WORD
         LA    R6,1(R6)                * POINT TO WORD ITSELF
LOOP2    CLI   0(R6),X'B1'             * X'B1' MEANT TO BE BOLDFACE
         BE    NXTLOOP2                * NOT IMPLEMENTED
         CLI   0(R6),X'B2'             * X'B2' MEANT END BOLDFACE
         BE    SPACEIT                 * IMPLEMENTED AS A SPACE
         MVC   0(1,R4),0(R6)           * PUT CHAR INTO SCREEN OUTPUT
         B     UPR4                    * GO UPDATE OUTPUT POINTER
SPACEIT  MVI   0(R4),C' '              * INSERT SPACE IN SCREEN OUTPUT
UPR4     LA    R4,1(R4)                * UPDATE SCREEN OUTPUT POINTER
NXTLOOP2 LA    R6,1(R6)                * UPDATE WORD POINTER
         BCT   R7,LOOP2                * ALL CHARACTERS OF WORD DONE?
         LA    R5,1(R5)                * THEN UPDATE INPUT POINTER
         B     DONE                    * RETURN
         TITLE 'ERROR MESSAGES AND ENDING LINKAGE'
NOFILE   WRTERM 'FILE VSEMESG ONLINE * NOT FOUND'
         MVC   RC,=F'24'               * SET RETURNCODE 24
         B     EINDE                   * END OF PROGRAM
NOTFOUND WRTERM 'ERROR CODE NOT FOUND' *
         MVC   RC,=F'28'               * SET RETURNCODE 28
ENDMESG  FSCLOSE FSCB=INFILE           * CLOSE INPUT FILE
EINDE    L     R13,SAVEAREA            * GET REGISTER SAVE ADDRESS
         LM    R14,R11,0(R13)          * RESTORE OLD REGISTERS
         L     R15,RC                  * GET RETURNCODE
         BR    R14                     * RETURN TO CMS
NOMESG   WRTERM 'NO ERROR CODE SPECIFIED'
         MVC   RC,=F'24'               * SET RETURNCODE 24
         B     EINDE
HELP     WRTERM 'FORMAT: VSEHELP MSG-ID'
         B     EINDE
         TITLE 'VARIABLES, CONSTANTS AND TABLES'
SAVEAREA DS    F                       * STORE FOR REGISTER 13
RC       DC    F'0'                    * STORE FOR RETURNCODE INIT 0
ERRMESG  DS    CL8                     * STORE FOR ERRORMESG CODE
LETTER   DS    C                       * STORE FOR INPUT CHARACTER
OUTBUF   DS    CL80                    * STORE FOR SCREEN OUTPUT
INFILE   FSCB  'VSEMESG ONLINE *',BUFFER=BUFFER,BSIZE=16384
TRANSTAB DS    128CL2                  * STORE FOR TRANSLATION TABLE
TRANSUPP DC    X'000102030405060708090A0B0C0D0E0F'
         DC    X'101112131415161718191A1B1C1D1E1F'
         DC    X'202122232425262728292A2B2C2D2E2F'
         DC    X'303132333435363738393A3B3C3D3E3F'
         DC    X'404142434445464748494A4B4C4D4E4F'
         DC    X'505152535455565758595A5B5C5D5E5F'
         DC    X'606162636465666768696A6B6C6D6E6F'
         DC    X'707172737475767778797A7B7C7D7E7F'
         DC    X'80C1C2C3C4C5C6C7C8C98A8B8C8D8E8F'
         DC    X'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F'
         DC    X'A0A1E2E3E4E5E6E7E8E9AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'
         LTORG                         * LITERAL POOL INSERTED HERE
         DS    0D                      * ALIGN
BUFFER   EQU   *                       *
BUFDUM   CSECT                         *
         DS    32CL128                 * 4K INPUT BUFFER
WOORDTAB DC    128CL128' '             * COMMON WORD TABLE
SPECTAB  DC    32CL32' '               * FAST OFTEN USED WORD TABLE
         END

R T Heemskerk
Systems Programmer (The Netherlands)

