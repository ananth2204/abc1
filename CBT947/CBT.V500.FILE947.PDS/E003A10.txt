Storage dump utility

When I started programming in COBOL, after having been an
Assembly language programmer, I quickly noticed that there
was no equivalent of the PDUMP macro.  To address this
deficiency I created a subroutine to provide a facility for
producing a DITTO DDD (hexadecimal and character) format
storage dump from within a COBOL program.

This subroutine, which I called HEXPRINT, contains its own
DTFPR so that the dump is not mixed in with any other reports
being produced.  This DTF writes to SYS055, which suits our
installation because that programmer logical unit is not used by
any other task.  This, of course, may be changed to suit
particular installation requirements.

To set up HEXPRINT the following line must be inserted in
your JCL.

      // ASSGN SYS055.SYSLST

Two arguments are required for the subroutine call: ARG-1,
which is a 2-byte packed-signed field containing the length of
the field to be dumped (up to 600 bytes can be dumped); and
ARG-2, which is the name (label) of the start of the field to be
dumped.

To dump 200 bytes from the start of WS-WORK-FIELD, in
COBOL.

WORKING-STORAGE SECTION.
01  WS-HEXPRT-LENGTH            PIC S9(3) COMP-3 VALUE 200.
01  WS-WORK-FIELD               PIC X(450).
PROCEDURE DIVISION.
    CALL 'HEXPRINT' USING WS-HEXPRT-LNTH
                          WS-WORK-FIELD.

To dump 200 bytes from the address pointed to by the label
WORKFLD, in Assembler.

   HXPRLGTH DC    P'200'
   WORKFLD  DS    CL'450'
            CALL  HEXPRINT,(HXPRLGTH,WORKFLD)
* PROGRAM-       HEXPRINT                                             *
* DEFINITION-    THIS SUBROUTINE IS USED TO PRINT A RECORD IN BOTH    *
*                CHARACTER AND HEXADECIMAL FORMAT.                    *
* INPUT-         (1) ADDRESS OF A 2 BYTE FIELD CONTAINING THE LENGTH  *
*                    OF THE RECORD TO BE PRINTED IN PACKED SIGNED     *
*                    FORMAT. THIS LENGTH MAY NOT EXCEED 600 BYTES.    *
*                (2) ADDRESS OF RECORD TO BE PRINTED.                 *
* OUTPUT-        THIS PROGRAM CONTAINS ITS OWN PRINT DTF SO NO DATA   *
*                IS PASSED BACK TO THE CALLING PROGRAM.               *
*                THE PRINT DTF USES SYS055.                           *
* CALL SEQUENCE- TO PRINT RECORD       CALL 'HEXPRINT' USING LENGTH   *
*                                                            RECORD.  *
* NOTE -       THE FIRST CALL WILL AUTOMATICALLY OPEN THE PRINT FILE. *
         TITLE 'HEXPRINT - RECORD DUMP'
HEXPRINT START 0
         PRINT NOGEN
*        *** INITIALISATION ***                                       *
INITIAL  EQU   *
         SAVE  (14,12)                 SAVE REGS OF CALLING PROGRAM
         USING *,R15                   REG 15 BASE REG
         LR    R12,R15                 LOAD REG 12 - WILL BE BASE REG
         DROP  R15                     REG 15 NO LONGER BASE REG
         USING HEXPRINT,R12            REG 12 NOW BASE REGISTER
         ST    R13,SAVR13              SAVE CALLING PROG SAVE AREA ADDR
         L     R2,0(R1)                ADDRESS OF LENGTH PARAMETER
         L     R3,4(R1)                ADDRESS OF RECORD TO PRINT
         CLI   SW1ST,X'00'             1ST TIME
         BNE   PAGECHK                 NO- BYPASS
         SPACE 3
OPEN     EQU   *
         OPEN  HEXPR1A
         MVI   SW1ST,X'FF'             FILE NOW OPEN
         SPACE 3
PAGECHK  EQU   *
         CLI   HEADDATE,C' '           DO WE HAVE DATE
         BNE   PC0010                  YES- BYPASS
         LA    R13,SAVEAREA            LOAD SAVE AREA ADDRESS
         CALL  DAYDATE,(DATE,HEADDATE,FN)
PC0010   EQU   *
         CP    LINECTR,KP54            DO WE HAVE A FULL PAGE
         BL    CHKPARMS                NO- BYPASS
         BAL   R14,HEAD                PRINT HEADING
         EJECT
*        *** CHECK INPUT PARAMETERS ***                               *
CHKPARMS EQU   *
         MVC   LENGTH(2),=2X'00'       ZERO HIGH ORDER 2 BYTES
         MVC   LENGTH+2(2),0(R2)       MOVE LENGTH PARAMETER
         UNPCK LEN(3),0(2,R2)
         NC    LEN(3),=X'0F0F0F'       ZERO ZONES
         TRT   LEN(3),TSTTBLE1
         BZ    CK0010                  NO NUMERIC ERRORS
         LA    R8,ERRORS               ERROR MESSAGE
         B     ERROR
CK0010   EQU   *
         UNPK  LEN(3),0(2,R2)
         NI    LEN+2,X'F0'             ZERO NUMERIC OF LAST BYTE
         CLI   LEN+2,X'C0'             SIGN C
         BE    CK0020                  YES - OK
         CLI   LEN+2,X'F0'             SIGN F
         BE    CK0020                  YES - OK
         LA    R8,ERRORS               ERROR MESSAGE
         B     ERROR
CK0020   EQU   *
         CP    LENGTH,KP0              IS IT ZERO
         BNE   CK0030                  NO- BYPASS
         LA    R8,ERROR+35             ERROR MESSAGE
         B     ERROR
CK0030   EQU   *
         CP    LENGTH,KP600            LONGER THAN 600 BYTES
         BNH   WRITE                   NO- BYPASS
         LA    R8,ERRORS+70            ERROR MESSAGE
         B     ERROR
         EJECT
*        *** FORMAT PRINT LINE ***                                    *
WRITE    EQU   *
         AP    RECCTR,KP1              COUNT RECORDS
         MVC   POUT1+1(3),=C'REC'
         MVC   POUT1+4(8),EDREC        EDIT RECORD COUNT
         ED    POUT1+4(8),RECCTR
         DP    LENGTH,KP100            DIVIDE BY 100
         MVC   DWORD,HEXZEROS          ZERO FILL DOUBLE WORD
         MVC   DWORD+6(2),NUMLINES     MOVE NUMBER OF 100 BYTE SEGMENTS
         CVB   R4,DWORD                SET UP LOOP COUNTER
         LA    R13,REFNUM              ADDRESS OF REFERENCE NUMBERS
         CP    NUMLINES,KP0            ANY FULL 100 BYTE SEGMENTS
         BE    WR0030                  NO- BYPASS
WR0020   EQU   *
         LA    R5,100                  YES- LENGTH LOOP COUNTER = 100
         B     WR0040
WR0030   EQU   *
         MVC   DWORD,HEXZEROS          ZERO FILL DOUBLE WORD
         MVC   DWORD+6(2),LENREM       MOVE LENGTH OF PART SEGMENT
         CVB   R5,DWORD                SET UP LOOP COUNTER
WR0040   EQU   *
         LA    R8,CHARLINE             ADDRESS OF CHARACTER LINE
         LA    R9,HEXLINE1             ADDRESS OF HEX CHAR LINE 1
         LA    R10,HEXLINE2            ADDRESS OF HEX CHAR LINE 2
         LA    R11,REFLINE             ADDRESS OF REFERENCE LINE
         MVC   0(2,R11),0(R13)         MOVE 1ST TWO REFERENCE NUMBERS
         LA    R11,2(R11)              BUMP REGISTER
         LA    R13,2(R13)              BUMP REGISTER
WR0050   EQU   *
         MVC   0(1,R8),0(R3)           MOVE CHARACTER TO O/P
         SR    R6,R6                   ZERO REGISTER
         IC    R6,0(R3)                MOVE IN BYTE OF DATA
         SRL   R6,4                    LOOK AT HIGH ORDER HALF BYTE
         LA    R7,TABLE                ADDRESS OF CONVERSION TABLE
         AR    R7,R6                   DISPLACE ALONG TABLE
         MVC   0(1,R9),0(R7)           MOVE HEX CHARACTER TO O/P
         SR    R6,R6                   ZERO REGISTER
         IC    R6,0(R3)                MOVE IN SAME BYTE OF DATA
         N     R6,=X'0000000F'         ZERO HIGH ORDER HALF BYTE
         LA    R7,TABLE                ADDRESS OF CONVERSION TABLE
         AR    R7,R6                   DISPLACE ALONG TABLE
         MVC   0(1,R10),0(R7)          MOVE HEX CHARACTER TO O/P
         MVC   0(1,R11),0(R13)         MOVE REFERENCE TO O/P
         LA    R3,1(R3)                BUMP REGISTER
         LA    R8,1(R8)                BUMP REGISTER
         LA    R9,1(R9)                BUMP REGISTER
         LA    R10,1(R10)              BUMP REGISTER
         LA    R11,1(R11)              BUMP REGISTER
         LA    R13,1(R13)              BUMP REGISTER
         BCT   R5,WR0050               LOOP IF NOT ZERO
         BAL   R14,PRINT               GO FINISH FORMATTING PRINT LINES
         MVI   CHARLINE,X'40'          CLEAR ALL OUTPUT WORK AREAS
         MVC   CHARLINE+1(99),CHARLINE
         MVC   HEXLINE1,X'40'
         MVC   HEXLINE1+1(99),HEXLINE1
         MVI   HEXLINE2,X'40'
         MVC   HEXLINE2+1(99),HEXLINE2
         MVI   REFLINE,X'40'
         MVC   REFLINE+1(101),REFLINE
         CH    R4,=H'0'                LAST SEGMENT PRINTED
         BE    RETURN                  YES- BYPAS
         BCT   R4,WR0020               LOOP IF NOT ZERO
         CP    LENREM,KP0              ANY PART SEGMENTS TO PRINT
         BNE   WR0030                  YES
         SPACE 3
RETURN   EQU   *
         L     R13,SAVR13              LOAD CALLING PROG SAVE AREA ADDR
         RETURN (14,12)
         SPACE 3
ERROR    EQU   *
         MVI   POUT1,C'0'              DOUBLE SPACE
         AP    RECCTR,KP1              COUNT RECORDS
         MVC   POUT1+1(3),=C'REC'
         MVC   POUT1+4(8),EDREC        EDIT RECORD COUNT
         ED    POUT1+4(8),RECCTR
         MVC   POUT1+16(35),0(R8)      MOVE ERROR MESSAGE
         BAL   R14,WRITER              PRINT IT
         B     RETURN
         EJECT
*        *** HEADER ROUTINE ***                                       *
HEAD     EQU   *
         ST    R14,HDSAVR14           SAVE BAL REGISTER
         AP    PAGECTR,KP1             ADD 1 TO PAGE COUNTER
         ZAP   LINECTR,KP0             ZERO LINE COUNTER
         MVI   POUT1,C'1'              SKIP TO NEW PAGE
         MVC   HEADPAGE,EDPAGE         MOVE IN PAGE NUMBER
         ED    HEADPAGE,PAGECTR
         MVC   POUT1+1(132),HEADLINE   MOVE HEADER
         BAL   R14,WRITER              GO PRINT IT
         L     R14,HDSAVR14            RESTORE BAL REGISTER
         BR    R14                     BRANCH BACK
HDSAVR14 DS    F
         EJECT
*        *** MOVE PRINT LINES TO OUTPUT AREA ***                      *
PRINT    EQU   *
         ST    R14,PRSAVR14            SAVE BAL REGISTER
         CP    LINECTR,KP54
         BL    PR0010
         BAL   R14,HEAD
PR0010   EQU   *
         MVI   POUT1,C'0'              SKIP 1 LINE BEFORE PRINTING
         MVC   POUT1+18(100),CHARLINE  MOVE CHARACTER LINE
         BAL   R14,WRITER              GO PRINT IT
         MVC   POUT1+18(100),HEXLINE1  MOVE 1ST HEX LINE
         BAL   R14,WRITER              GO PRINT IT
         MVC   POUT1+18(100),HEXLINE2  MOVE 2ND HEX LINE
         BAL   R14,WRITER              GO PRINT IT
         MVC   POUT1+16(102),REFLINE   MOVE REFERENCE LINE
         BAL   R14,WRITER              GO PRINT IT
         L     R14,PRSAVR14            RESTORE BAL REGISTER
         BR    R14                     BRANCH BACK
PRSAVR14 DS    F
         EJECT
*        *** PRINT THE LINE ***                                       *
WRITER   EQU   *
         ST    R14,WTSAVR14            SAVE BAL REGISTER
         CLI   POUT1,C'0'             IS IT DOUBLE SPACE
         BNE   WT0010                  NO- BYPASS
         AP    LINECTR,KP2             YES- ADD 2 TO LINE COUNTER
         B     WT0020
WT0010   EQU   *
         AP    LINECTR,KP1             ADD 1 TO LINE COUNTER
WT0020   EQU   *
         PUT   HEXPR1A                 PRINT LINE
         MVC   POUT1,POUT1-1           CLEAR PRINT AREA
         L     R14,WTSAVR14            RESTORE BAL REGISTER
         BR    R14                     BRANCH BACK
WTSAVR14 DS    F
         SPACE 3
HEXPR1A  DTFPR                                                         C
               DEVADDR=SYS055,                                         C
               BLKSIZE=133,                                            C
               CTLCHR=ASA,                                             C
               IOAREA1=POUT1
         EJECT
*        *** WORK AREAS AND CONSTANTS ***                             *
SAVR13   DS    F
SAVEAREA DS    9D
SW1ST    DC    X'00'
HEXZEROS DC    8X'0'
KP0      DC    P'0'
KP1      DC    P'1'
KP2      DC    P'2'
KP54     DC    P'54'
KP100    DC    P'100'
KP600    DC    P'600'
TSTTBLE1 DC    X'000000000000000000000A0B0C0D0E0F'
TABLE    DC    C'0123456789ABCDEF'
DWORD    DS    D
LEN      DS    CL3
LENGTH   DS    PL4'0'
         ORG   LENGTH
NUMLINES DS    PL2
LENREM   DS    PL2
PAGECTR  DC    PL3'0'
LINECTR  DC    P'99'
RECCTR   DC    PL4'0'
EDPAGE   DC    X'402020202120'
EDREC    DC    X'4020202020202120'
DATE     DC    6C' '
FN       DC    C'0'
HEADLINE DS    0CL132
         DC    CL70'HEXPRINT - RECORD DUMP'
HEADDATE DC    29C' '
         DC    23C' '
         DC    C'PAGE'
HEADPAGE DS    CL6
CHARLINE DC    100C' '
HEXLINE1 DC    100C' '
HEXLINE2 DC    100C' '
REFLINE  DC    102C' '
REFNUM   DC    C'  1.......10........20........30........40........50'
         DC    C'........60........70........80........90.......100'
         DC    C'101......110.......120.......130.......140.......150'
         DC    C'.......160.......170.......180.......190.......200'
         DC    C'201......210.......220.......230.......240.......250'
         DC    C'.......260.......270.......280.......290.......300'
         DC    C'301......310.......320.......330.......340.......350'
         DC    C'.......360.......370.......380.......390.......400'
         DC    C'401......410.......420.......430.......440.......450'
         DC    C'.......460.......470.......480.......490.......500'
         DC    C'501......510.......520.......530.......540.......550'
         DC    C'.......560.......570.......580.......590.......600'
ERRORS   DC    C'*** INVALID LENGTH PARAMETER       '
         DC    C'*** ZERO LENGTH SPECIFED           '
         DC    C'*** LENGTH TOO GREAT - 600 BYTE MAX'
         DC    CL1' '
POUT1    DS    CL133
         LTORG
         NED   HEXPRINT

Andrew Gardiner
Systems  Programmer
St George Building Society Ltd (Australia)

