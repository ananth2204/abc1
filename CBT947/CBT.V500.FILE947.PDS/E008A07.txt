Unique dynamic partition tables

One of the enhancements introduced with VSE/ESA is the
ability to generate more than 12 partitions by using dynamic
partitions. Although the definition and use of dynamic
partitions is relatively straightforward, there are some less than
desirable aspects.


DTR$DYNC SHORTCOMINGS

One of the biggest shortcomings is that the dynamic class table
cannot be renamed or moved from IJSYSRS.SYSLIB. For
single VSE shops this may not present a problem. However, in
multi-VSE shops, such as ours, where IJSYSRS is shared
between all systems, it means that each VSE system must use
the same dynamic class table This may not always be desirable.
For one thing, you're limited to a total of 10 dynamic classes to
be allocated to the entire shared VSE network. In many cases
10 is sufficient since you can assign two or more classes to
each VSE and then define multiple partitions within those
classes. However, if, for operational reasons, you need to
define a single partition within each dynamic class, the limit
can be reached very quickly.

Furthermore, suppose you wanted certain partitions, such as
CICS or a system monitor, to use the same dynamic partition in
each VSE system. Each partition would probably require
unique partition labels and/or assignments. This could not be
easily achieved because dynamic class start-up would invoke
the same start-up JCL PROC regardless of the system in which
it was running. Although you could code the start-up JCL
PROC to execute $COMVAR or some other routine to check
CPU-id and then invoke a specific PROC based on the results,
that could prove to be cumbersome and less efficient.


SOLUTION

To overcome these problems I've developed a fully automated
method that allows each VSE system to have a unique dynamic
class table while sharing a common IJSYSRS.SYSLIB. Using
this method, you can define for each system the maximum of
10 classes, using the same or different classes and partition
attributes within each system.

My method is really quite simple. It involves each system
cataloguing and activating its own dynamic class table during
IPL. Since the table name and SUBLIB must remain the same
for each VSE system, I was faced only with the problem of
serializing the cataloguing process to prevent the table for one
system from being prematurely overlaid by the table for
another system. This situation later proved to be very likely in
our environment since IPLs for multiple VSE systems are
initiated at nearly the same time from an operator screen in VM.

To handle the serialization problem I coded the DYNMGR
program shown below. DYNMGR works in conjunction with
conditional JCL and a single-record VSAM file defined on a
shared VSAM user catalog to act as a lock file. When one
system is ready to catalog its table, DYNMGR is invoked to
see if another table is already being catalogued. If not, the file
is enqueued, marked as update-in-progress, and DYNMGR sets
a return code, indicating that the catalog and table load can
take place. The file is then closed and control returns to the
JCL member where the dynamic partition table is loaded and
activated. After the load and activation, DYNMGR is again
invoked to dequeue the file and make it available to other
systems.

If an update is already in progress when an enqueue is
requested by another system, DYNMGR issues an
informational message then waits a short time and retries the
enqueue. After three attempts, a return code is set, indicating
that the file is permanently enqueued, and the operator is
notified. If the enqueue is obtained, the requesting system
continues. The dequeue process is also designed to wait for file
access in the event of the file being open to another system
while that system checks the status. The entire
enqueue/catalog/load/dequeue process takes only about 15
seconds and operators are kept informed by informational
messages.

With a little effort, this method can be implemented using a
member on a shared VSE SUBLIB instead of a shared VSAM
file. I chose VSAM since I already had a shared VSAM user
catalog defined to my VSE systems.


EXAMPLES

Shown below is the SYSTEM2 JCL member that drives the
dynamic partition process along with the source code for the
DYNMGR program, related PROCs, and the IDCAMS
DEFINE for the DYNLOCK file. Note that the SYSTEM2 JCL
member invokes a PROC instead of having the start-up steps
coded directly within the JCL member. This was done to allow
the start-up member to be dynamically changed without having
to remember to delete the old POWER queue entry and re-
submit a new one. CPCMD and ARCMD are programs that
generate commands and pass them to VM and VSE,
respectively, for execution. ARCMD also builds commands
based on passed parameters. In the example, the IPL2 PARM
causes ARCMD to generate queue-delete commands with a 15-
day-old date to delete obsolete POWER queue entries. Other,
similar programs are available to issue console commands.
Some have been presented in earlier issues of VSE Update.


TAIL-END OF BG ASI PROC

  .
  .
  .
ASSGN SYS063,DISK,PERM,VOL=VOL253,SHR
ASSGN SYS066,DISK,PERM,VOL=VOL009,SHR
// PWR PRELEASE RDR,SYSTEM2
/(
/&


STARTUP MEMBER THAT STAYS IN THE READER

// JOB SYSTEM2 INITIALIZATION
// OPTION LOG
// EXEC PROC=SYSTEM2
/*
/&
**********************************************************************
***  Startup proc...                                               ***
**********************************************************************
// EXEC LIBR
ACCESS SUBLIB=IJSYSRS.SYSLIB
CATALOG SYSTEM2.PROC DATA=YES REPLACE=YES EOD=/(
// ON $RC GT 0 CONTINUE
NOLOG ****************************************************************
NOLOG ***                                                          ***
NOLOG ***  Issue CP commands...                                    ***
NOLOG ***                                                          ***
NOLOG ****************************************************************
// EXEC CPCMD,PARM='SET RUN ON'
// EXEC CPCMD,PARM='SET WNG OFF'
// EXEC CPCMD,PARM='SET MSG OFF'
// EXEC CPCMD,PARM='SP RDR CONT'
// EXEC CPCMD,PARM='COUPLE 0C2 VTAM320 0C2'
// EXEC CPCMD,PARM='COUPLE 0C6 VSE1 OC6'
NOLOG ****************************************************************
NOLOG ***                                                          ***
NOLOG ***  Set VSE options, perform IPL routine...                 ***
NOLOG ***                                                          ***
NOLOG ****************************************************************
// EXEC ARCMD,PARM='PRTY BG=F9=F8,FB,F7,F6,F4,F5,G,FA,F3,F2,F1'
// EXEC ARCMD,PARM='PRTYIO F1,F2 F3 FA,DYNC,F5,F4,F6,F7,FB,F8=F9=BG'
// EXEC ARCMD,PARM='STACK MAPX|MAP|MAP CLASS=ALL|'
// EXEC ARCMD,PARM='IPL2'
NOLOG ****************************************************************
NOLOG ***                                                          ***
NOLOG ***  Load/activate dynamic partitions...                     ***
NOLOG ***                                                          ***
NOLOG ****************************************************************
// ON $RC GT 0 GOTO ERROR
// EXEC DYNMGR,PARM='ENQUEUE,VSE2    '    ENQUEUE FILE
// EXEC PROC=DYNVSE2                      RE-CATALOG DYNPART TABLE
// EXEC ARCMD,PARM='PLOAD DYNC,FORCE'     ACTIVATE DYNPART TABLE
// EXEC DYNMGR,PARM='DEQUEUE,VSE2    '    DEQUEUE FILE
NOLOG ****************************************************************
NOLOG ***                                                          ***
NOLOG ***  Release VTAM and system monitor...                      ***
NOLOG ***                                                          ***
NOLOG ****************************************************************
// PWR PRELEASE RDR,VTAM
// PWR PRELEASE RDR,EXPLORE
NOLOG ****************************************************************
NOLOG ***                                                          ***
NOLOG ***  Start virtual reader to allow job submits from VM...    ***
NOLOG ***                                                          ***
NOLOG ****************************************************************
// EXEC ARCMD,PARM='PSTART RDR,OFC,X,2'
// GOTO EXIT
NOLOG ****************************************************************
NOLOG ***                                                          ***
NOLOG ***  Error occurred, notify operator...                      ***
NOLOG ***                                                          ***
NOLOG ****************************************************************
/. ERROR
// PAUSE Error during system start-up.  Notify Tech Support...
/. EXIT
/(


DTR$DYNC PARTITION TABLE FOR VSE2

// EXEC LIBR
A S=IJSYSRS.SYSLIB
CATALOG DYNVSE2.PROC REPLACE=YES DATA=YES EOD=/%
// EXEC LIBR
A S=IJSYSRS.SYSLIB
CATALOG DTR$DYNC.Z REPLACE=YES EOD=/¬
----------v------vvvv----vvvvv--vvvvv---vvv--vvvvvvvv-vv------v---------
          CLASS  ALLOC   SIZE   SP-GETV LUBS PROFILE  MAX-P   ENABLED

CLASS=    G        10      500     64   155  $GJCL2   01      Y

READER=   00C
PRINTERS= 00E,01E
PUNCHES=  00D

CLASS=    H         6      512     64   100  $HJCL2   01      Y

READER=   00C
PRINTERS= 00E
PUNCHES=  00D
/¬
/%
/*


SOURCE FOR DYNMGR

         PUNCH ' PHASE DYNMGR,*'
         TITLE 'DYNMGR - DYNAMIC PARTITION LOCK MANAGER'
**********************************************************************
***                                                                ***
***  Program Name  - DYNMGR - Dynamic Partition Lock File Handler  ***
***      Function  - Works as a lock file handler to serialize     ***
***                  updates to DTR$DYNC on IJSYSRS.SYSLIB.        ***
***                                                                ***
***                  When a VSE system is ready to update, this    ***
***                  program enqueues the lock file (if not al-    ***
***                  ready in use) and sets a return code          ***
***                  indicating that the catalog and activation    ***
***                  process can take place.  Other systems        ***
***                  requesting an enqueue during this time will   ***
***                  wait and retry up to 3 times.  After the      ***
***                  catalog, this program dequeues the lock       ***
***                  file making it available to other systems.    ***
***                                                                ***
***     JCL Parms  - ENQUEUE   This causes the lock file to be     ***
***                            enqueued for this system until      ***
***                            the dynamic partition table has     ***
***                            been catalogued.                    ***
***                                                                ***
***                - DEQUEUE   This causes the lock file to be     ***
***                            dequeued and made available to      ***
***                            other systems.                      ***
***                                                                ***
***                - VSEID     Name of VSE system or other         ***
***                            descriptive information.            ***
***                                                                ***
***                                                                ***
***    Invocation  - From start-up JCL member which is released    ***
***                  for execution during IPL.  For example:       ***
***                                                                ***
***    // JOB STARTUP
***    // EXEC DYNMGR,PARM='ENQUEUE,VSE2'     <== enqueue file     ***
***    // EXEC PROC=CATLOG1                   <== catalogue table  ***
***    // EXEC ARPGM,PARM='PLOAD DYNC,FORCE'  <== user pgm or      ***
***       (OR // PAUSE...)                        manual load      ***
***    // EXEC DYNMGR,PARM='DEQUEUE,VSE2'     <== dequeue file     ***
***    /*                                                          ***
***    /&                                                          ***
***                                                                ***
**********************************************************************
         PRINT GEN
BEGIN    START 0
         BALR  R3,0
         USING *,R3,R4
         LA    R3,0(R3)
         LA    R4,2048(R3)
         LA    R4,2048(R4)
***  Edit & save JCL parms...                                      ***
         CR    R1,R15                  Parm present?
         BE    NOPARM                  No
         L     R6,0(1)                 Load addr of parm len/data
         MVC   JCLPARM,2(R6)           Save type-of-request
         CLC   =C'ENQUEUE',2(R6)       Enqueue?
         BE    DYNOPEN
         CLC   =C'DEQUEUE',2(R6)       Dequeue?
         BNE   NOPARM
         ZAP   UPIPCT,=P'0'            Clear retry counter
***  Open file...                                                  ***
DYNOPEN  LA    R7,3                    Max number of open retries
DYNO1    LA    R1,DYNLOCK
         LA    R13,VSAVERG             VSAM save area
         OPEN  (R1)
         LTR   R15,R15                 Open OK?
         BZ    DYNCONT
         MVC   CDATA(55),=C'DYN0033  Waiting for enqueue. File=DYNLOCK.C
               ..          '
         BAL   R2,CONPUT               Display message
         SETIME 20,TECB2               Set WAIT ECB
         WAIT  TECB2
         BCT   R7,DYNO1                Decr number of open retries
         MVC   CDATA(55),=C'DYN0001  Error during OPEN of DYNLOCK.     C
                           '
         B     ERROR
**********************************************************************
***  Process jclparm...                                            ***
**********************************************************************
DYNCONT  BAL   R2,DYNGET               Read control record
         CLC   =C'ENQUEUE',JCLPARM     Enqueue?
         BE    CKUPIP
*** MUST BE DEQUEUE REQUEST...
         MVC   DYNSTAT,=CL4' '         Turn off upip flag
         MVC   DYNVSEID,=CL8' '        CLear VSE name
         BAL   R2,DYNPUT               Update control rec
         BAL   R2,DYNCLOSE             Close file
         MVC   CDATA(55),=C,'DYN0037  Enqueue released. File=DYNLOCK...C
                           '
         BAL   R2,CONPUT               Display message
         B     FINISH
CKUPIP   CLC   =C'UPIP',DYNSTAT        Another update in progress?
         BNE   SETUPIP                 No
         BAL   R2,DYNCLOSE             Close file
         CP    UPIPCT,=P'3'            Reached max tries?
         BNL   UPIPFAIL                Yes
         MVC   CDATA(55),=C'DYN0033  Waiting for enqueue. File=DYNLOCK.X
               ..          '
         BAL   R2,CONPUT               Display message
         SETIME 20,TECB2               Set WAIT ECB
         WAIT  TECB2
         AP    UPIPCT,=P'1'            Add 1 to attempts
         B     DYNOPEN
SETUPIP  MVC   CDATA(55),=C'DYN0035  Enqueue obtained. File=DYNLOCK... C
                           '
         BAL   R2,CONPUT               Display message
         MVC   DYNSTAT,=C'UPIP'        Turn on upip flag
         MVC   DYNVSEID,JCLVSEID       Name of enqueuing VSE system
         BAL   R2,DYNPUT               Update control rec
         BAL   R2,DYNCLOSE             Close file
         B     FINISH
UPIPFAIL MVC   CDATA(55),=C'DYN0009  DYNLOCK permanently enqueued.     C
                           '
         B     ERROR
***  Error handler & return...                                     ***
NOPARM   MVC   CDATA(55),=C'DYN0011  Missing or invalid parm on EXEC stC
               atement.    '
ERROR    DS    0H
         BAL   R2,CONPUT               Display message
         MVC   CDATA(55),=C'DYN0111  Contact Technical Support.        C
                           '
         BAL   R2,CONPUT               Display message
         ICM   R15,B'1111',RC08        Set return code of 8
         B     RETURN
***
FINISH   ICM   R15,B'1111',RC00        Set return code of zero
RETURN   EOJ   RC=(R15)
***  Close lock file...                                            ***
DYNCLOSE LA    R1,DYNLOCK              Control file
         LA    R13,VSAVERG             VSAM save area
         CLOSE (R1)
         LTR   R15,R15                 Good return code?
         BZR   R2
         MVC   CDATA(55),=C'DYN0007  Error during CLOSE of DYNLOCK.    C
                           '
         B     ERROR
***  Update lock file...                                           ***
DYNPUT   LA    R1,DYNLOCK1             Point to sequential RPL
         LA    R13,VSAVERG             VSAM save area
         PUT   RPL=(R1)
         LTR   R15,R15                 Good return code?
         BZR   R2
         MVC   CDATA(55),=C'DYN0005  Error writing to DYNLOCK.         C
                           '
         B     ERROR
***  Process jclparm...                                            ***
DYNGET   LA    R1,DYNLOCK1             Point to sequential RPL
         LA    R13,VSAVERG             VSAM save area
         GET   RPL=(R1)
         LTR   R15,R15                 Good return code?
         BZR   R2
         MVC   CDATA(55),=C'DYN0003  Error during read from DYNLOCK.   C
                           '
         B     ERROR
***  DISPLAY ON CONSOLE                                            ***
CONPUT   MVC   CCW+6(2),=AL2(L'CDATA)
         LA    R1,CCB
         EXCP  (R1)
         WAIT  (R1)
         BR    R2
***           S T O R A G E    D E F I N I T I O N S               ***
         DC    C'STORAGE DEFINITIONS'
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
***
JCLPARM  DS    0CL16                   Parm passed on EXEC stmt
JCLRQST  DS    CL7                     ENQUEUE or DEQUEUE
         DS    C                       Delimiter
JCLVSEID DS    CL8                     VSE-ID
***
UPIPCT   DC    PL2'0'                  Retries because of UPIP
RC00     DC    X'00000000'             RC=0
RC08     DC    X'00000008'             RC=8
TECB2    TECB                          Timer ECB
VSAVERG  DS    9D                      VSAM RSA
***  Lock file record layout                                       ***
DYNREC   DS    0CL20
DYNKEY   DS    CL8                     Always $$SYSTEM
DYNSTAT  DS    CL4                     UPIP or blank
DYNVSEID DS    CL8                     Name of enqueuing VSE system
         LTORG
***  Dynamic partition lock file                                   ***
DYNLOCK  ACB   AM=VSAM,                                                C
               MACRF=(KEY,SEQ,OUT),                                    C
               STRNO=2
***
DYNLOCK1 RPL   AM=VSAM,                                                C
               ACB=DYNLOCK,                                            C
               AREA=DYNREC,                                            C
               AREALEN=20,                                             C
               OPTCD=(KEY,SEQ,UPD,MVE),                                C
               ARG=DYNKEY
***  Console                                                       ***
CCB      CCB   SYSLOG,CCW
CCW      CCW   9,CDATA,0,1
CDATA    DS    CL60
***
         END   BEGIN
***  Define for DYNLOCK...                                         ***
***                                                                ***
***  Note:  The following 20-byte header record should be added    ***
***         after the file is defined.                             ***
***                                                                ***
***         $$SYSTEM************                                   ***
***                                                                ***
**********************************************************************
   DELETE (DYNAMIC.PTN.LOCK.FILE) PURGE                                -
           CATALOG (UCS01.UC.USERCAT.SHARED)
   DEFINE CLUSTER                                                      -
           (NAME(DYNAMIC.PTN.LOCK.FILE)                                -
            INDEXED                                                    -
            RECORDSIZE(20 20)                                          -
            CYL(1 1)                                                   -
            KEYS(8 0)                                                  -
            FREESPACE(5 5)                                             -
            SHAREOPTIONS(4))                                           -
          DATA                                                         -
           (NAME(DYNAMIC.PTN.LOCK.FILE.DATA) CISZ(4096))               -
          INDEX                                                        -
           (NAME(DYNAMIC.PTN.LOCK.FILE.INDEX))                         -
          CATALOG (UCS01.UC.USERCAT.SHARED)

Steve Bernard
Senior Systems Programmer
Arkansas Farm Bureau Insurance (USA)

