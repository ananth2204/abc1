A scheduling program

If your shop has a one-shift operation and does not have an
automatic job scheduler, it is difficult to schedule resource-
intensive batch jobs.  If the operator releases such a job before
leaving, users working late can experience problems.  The
problem is exacerbated if the job needs to close CICS files for
update.

The following short program entitled 'Waiter', gets around this
problem in an effective, if inelegant manner.  The first step of
the resource-hungry job executes 'Waiter', which issues a VSE
wait for the number of minutes specified in SYSIPT (see job
example below).  Thus if the operator releases the job at 17:00
and sets a wait period of 4 hours, the resource intensive part of
the job will not start until 21:00.  Hopefully, at this time all
users will have gone home.

        PRINT NOGEN
        TITLE 'WAIT - WAITS ''N'' SECONDS AS SPECIFIED IN SYSIPT'
*   REGISTER USAGE
*   R1    -  WORK, TECB ADDRESS FOR SETIMER
*   R2-R6 -  WORK REGISTERS
*   R7    -  SETIMER VALUE
*   R9    -  ERROR FLAG
*   R11   -  PROGRAM BASE
*   R15   -  VSE/SP RETURN CODE
* SYNTAX:
* WAIT PERIOD IN MINUTES MUST BE SPECIFIED STARTING IN COLUMN 1,
* ACCEPTABLE RANGE 1-9999. LEADING ZEROES ARE ACCEPTABLE, EG 0010
* (IE WAIT 10 MINUTES). THE PROGRAM ONLY READS THE FIRST 4 DIGITS,
* ADDITIONAL DIGITS ARE IGNORED.
*
* EXAMPLE OF USE :
* // JOB WAIT FOUR HOURS, THEN EXECUTE MYPROGRAM
* /*
* /. STEP1
* // LIBDEF *,SEARCH=LIB.SUBLIB
* // EXEC WAITER
* 240         (WAIT 240 MINUTES/4 HRS)
* /*
* // IF $RC GT 0 THEN     EXIT JOB IF PROBLEM OCCURRED
* // GOTO $EOJ
* /*
* /. STEP2
* // EXEC MYPROGRAM  (CAN'T RUN THIS DURING PRIME SHIFT)
* /*
* /&
*
* PLS NOTE: BECAUSE OF PROGRAM OVERHEADS ETC, THE ELAPSED TIME MAY VARY
* FROM THAT SPECIFIED BY A FEW SECONDS. THIS UTILITY IS NOT INTENDED
* TO BE A STOPWATCH.
WAITER   CSECT
         BALR  R11,0
         USING *,R11
         XR    R9,R9               INITIALIZE ERROR FLAG
         XR    R7,R7               INITIALIZE MINUTES
* M A I N L I N E
* OPEN FILES
         OPEN  PRINTFL             OPEN PRINT FILE
         OPEN  CARDFL              OPEN CARD FILE
* EDIT INPUT CARD - ONLY THE FIRST CARD IS READ.
         GET   CARDFL
         B     CARDEDIT             EDIT 1 CARD ONLY
CARDEOF  EQU   *
* EXIT IF BAD CARD
         LTR   R7,R7                  IF BAD VALUE
         BZ    BADEXIT
         BM    BADEXIT                GIVE UP
* WAIT SPECIFIED PERIOD
         LR    R1,R7
         SETIME (1),TIMEBLK           SET THE TIMER
         WAIT (1)                     WAIT FOR THE POST
* TELL USER HOW LONG WE'VE WAITED FOR
         B     TELL
         B     WAITEXIT               GO AROUND ERROR HANDLER
* ERROR HANDLER
BADEXIT  DS    0H
         MVC PRTBUF+1(26),=CL26'** INVALID CONTROL CARD **'
         PUT   PRINTFL
         LA    R9,8                   SET RETCODE
* NORMAL EXIT POINT
WAITEXIT DS    0H
         CLOSE CARDFL              CLOSE CARD FILE
         CLOSE PRINTFL             CLOSE PRINT FILE
         LR    R15,R9              GET RETCODE
         EOJ   RC=(15)
         DS    0F
TIMEBLK  TECB                          TIMER EVENT CONTROL BLOCK
         EJECT
* TELL - PRINT WAIT TIME ON SYSLST
* INPUT  - WORK4 = RIGHT-ADJUSTED WAIT TIME
* OUTPUT - PRTBUF
TELL     DS    0H
         LA    R2,4                   CHAR COUNT
         LA    R1,WORK4               R1 => WAIT PERIOD FLD
         LA    R3,PRTBUF+1            R3 => PRINT BUFFER
         XR    R4,R4                  SET LEADING ZERO FLAG
LOOPT    DS    0H                     DO UNTIL END OF FLD
         LTR   R4,R4                  TEST LEADING ZERO FLAG
         BNZ   MOVEIT                 BYPASS IF PAST LEADING ZEROES
         CLI   0(R1),C'0'             TEST FOR ZERO
         BE    ZERO                   BYPASS LEADING ZEROES
         LA    R4,1                   SET LEADING FLAG
MOVEIT   DS    0H
         MVC   0(1,R3),0(R1)          MOVE TO PRINT BUFFER
         LA    R3,1(R3)               BUMP PRINT BUFFER PTR
ZERO     DS    0H
         LA    R1,1(R1)               BUMP WAIT FLD PTR
         BCT   R2,LOOPT               AROUND WE GO
         C     R7,=F'58'              IF 1 MINUTE (ADJUSTED)
         BH    MULT
         MVC   1(16,R3),=CL16'MINUTE IS UP ***'
         B     NEXT
MULT     DS    0H                     ELSE
         MVC   1(18,R3),=CL18'MINUTES ARE UP ***'
NEXT     DS    0H
         PUT   PRINTFL
         B     WAITEXIT               NORMAL EXIT, ALL'S WELL
         EJECT
* CARDEDIT - EDIT INPUT CARD
* INPUT  - CARDBUF
* OUTPUT - R7 = REQUIRED TIME PERIOD IN MINUTES
CARDEDIT DS    0H
* IF BAD FORMAT CARD, NOTIFY & BAIL OUT
         CLC   CARDBUF(4),=CL4'    '        IF BAD CARD
         BE    BADEXIT                      NOTIFY & GIVE UP
* CHECK WAIT PERIOD (MINUTES)
         LA    R1,CARDBUF+3           R1 => END CHAR OF INPUT
         LA    R2,4                   R2 = NO. OF CHARS ALLOWED
         LA    R3,WORK4+3             R3 => END OF WORK AREA
LOOP1    DS    0H                     DO UNTIL ALL CHARS PROCESSED
         CLI   0(R1),C' '             IF BLANK
         BE    BLANK                  BYPASS
         CLI   0(R1),C'0'             IF BAD CHAR
         BL    BADEXIT                GIVE UP
         CLI   0(R1),C'9'             IF BAD CHAR
         BH    BADEXIT                GIVE UP
         MVC   0(1,R3),0(R1)          SAVE CHAR
         BCTR  R3,0                   DECR BUFFER PTR
BLANK    DS    0H
         BCTR  R1,0                   DECR BUFFER PTR
         BCT   R2,LOOP1               PLAY IT AGAIN, SAM !
* CONVERT INPUT TO BINARY
         LA    R1,WORK4+3              POINT TO END OF WORKAREA
         LA    R2,4                    R2 = NO. OF CHARS ALLOWED
         XR    R5,R5                   CLEAR WORK REGISTER
         LA    R3,1
LOOP2    DS    0H                      DO UNTIL ALL CHARS PROCESSED
         IC    R5,0(R1)                GET DIGIT
         SLL   R5,4                    CLEAR OUT 'CHAR' PART
         ICM   R5,B'0010',X'00'        CLEAR OUT 'CHAR' PART
         O     R5,=XL4'0C'             PLUG IN SIGN
         ST    R5,DWORD+4              PUT IN DOUBLE WORD
         CVB   R5,DWORD                CONVERT TO BINARY
         MR    R4,R3                   TIMES POSITIONAL VALUE
         AR    R7,R5                   ADD TO RESULT
         MH    R3,=H'10'               BUMP POSITIONAL VALUE
         BCTR  R1,0                    DECR BUFFER PTR
         BCT   R2,LOOP2                FINISHED YET ?
* CONVERT INPUT TO MINUTES
         M     R6,=F'60'               TIMES 60
         BCTR  R7,0                    LESS 2 SECS FOR PROGRAM OVERHEAD
         BCTR  R7,0                    (GUESSTIMATE)
         B     CARDEOF                 ONLY READ 1 CARD
WORK4    DC    CL4'0000'
DWORD    DC    D'0'
CARDBUF  DC    CL80' '
         EJECT
DATAAREA DS    0F
         LTORG
* REGISTER EQUATES
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R9       EQU   9
R11      EQU   11
R15      EQU   15
PRTBUF   DC    CL132' '              PRINT BUFFER
* DTF'S, ACB'S ETC.
         DS    0F
PRINTFL  DTFPR DEVADDR=SYSLST,     PRINT FILE DTF                      C
               DEVICE=1403,                                            C
               BLKSIZE=132,                                            C
               CTLCHR=ASA,                                             C
               IOAREA1=PRTBUF,                                         C
               RECFORM=FIXUNB
         DS    0F
CARDFL   DTFCD DEVADDR=SYSIPT,     CARD FILE DTF                       C
               BLKSIZE=80,                                             C
               EOFADDR=CARDEOF,                                        C
               IOAREA1=CARDBUF
         END
/*

David Roth (Australia)

