Processing EXEC PARM values with COBOL

Our application development group works with three different
operating systems: MVS, VSE, and PC-DOS. In MVS and PC-
DOS environments it is very simple in a COBOL program to
have access to the information passed in an EXEC PARM or in
the command line. You must only code a structure in the
LINKAGE SECTION with a halfword length field and a field
for the character string. After entry to the PROCEDURE
DIVISION the values are available.

In VSE it is not possible to get this information in COBOL.
The normal mainline routine in COBOL does not establish the
addressability to the parameter present from VSE.

Then I found an example Assembler program in the Calling
and Called Programs chapter of the IBM DOS/VS COBOL
Compiler and Library Programmers Guide (SC28-6478). Based
on this example I wrote the interface which is explained in this
article. This interface must be linked as an entry point for all
COBOL mainlines that will have access to EXEC parameter
values in VSE. The COBOL LINKAGE SECTION is the same
as in the other environments. In the PROCEDURE DIVISION
we must code a fixed named entry point before the first
statement (see sample program).

Assembler interface routine

// JOB UPXEPARC  COMPILE SUBROUTINE
// OPTION DECK,SXREF
// EXEC ASSEMBLY,SIZE=256K
EPAR       TITLE 'UPXEPARC  -  CALL COBOL MAIN AS A SUBPROG'
       SPACE 3
UPXEPARC CSECT
       SPACE 3
*  REGISTER-USAGE
R0        EQU   0
R1        EQU   1      PARMLIST
R2        EQU   2      WORKREG
R3        EQU   3
R4        EQU   4
R5        EQU   5
R6        EQU   6
R7        EQU   7
R8        EQU   8
R9        EQU   9
R10       EQU   10
R11       EQU   11
R12       EQU   12      BASEREG
R13       EQU   13      ADDRESS OF OWN SAVE AREA
R14       EQU   14      RETURN ADDR / BALREG
R15       EQU   15      ENTRY ADDR
       EJECT
       SAVE  (14,12)                  SAVE REGS IN CALLERS AREA
       LR    R12,R15                  LOAD BASE ADDR
       USING UPXEPARC,R12
       B     BEGIN
       DC    CL8'UPXEPARC'                 PROGRAM NAME
* **       DC    C'&SYSDATE '              DATE OF ASSEMBLY
* **       DC    C'&SYSTIME '              TIME OF ASSEMBLY
       DC    C'AUTHOR: WILLI J. KUHN'
BEGIN  DS    0H
       ST    R13,SAVEAREA+4           SAVE PREVIOUS SAVEAREA ADDR
       LR    R2,R13                   SAVE REG 13
       LA    R13,SAVEAREA             LOAD OWN SAVEAREA ADDR
       ST    R13,8(R2)                CHAIN IT TO PREVIOUS AREA
       SPACE
*  IF R1 = R15 - THERE IS NO EXEC PARAMETER
*  IN THIS CASE LOAD A DUMMY FOR COBOL
       CR    R1,R15                   COMPARE REGISTER
       BNE   ILBDSET                  PARAMETER PRESENT
       LA    R1,DUMMYP                ELSE LOAD DUMMY
       SPACE
*  CALL ILBDSET0 TO SET A SWITCH X'FF' IN ILBDMNS0
*  THIS IS NECESSARY TO TELL COBOL TO ACT IN STANDARD LINKAGE
ILBDSET  L     R15,=V(ILBDSET0)       LOAD V-CONST
       BALR  R14,R15                  AND CALL
       SPACE
*  NOW CALL THE COBOL MAIN ROUTINE
*  THE COBOL PROGRAM MUST USE AN ENTRY NAMED IN THE FOLLOWING
*  V-CONST AND A USING PARAMETER OR LIST.
*  REG1 WILL BE UNCHANGED FROM THE INITIAL ENTRY OR POINT TO DUMMY
       L     R15,=V(CBLEPAR)          LOAD V-CONST
       BALR  R14,R15                  AND CALL
       SPACE
EXIT   DS    0H
       L     R13,SAVEAREA+4
       L     R14,12(R13)              LOAD RETURN ADDR
       SPACE
       RETURN (0,12)                  LEAVE RC IN R15 UNCHANGED
       EJECT
*  CONSTANTS/AREAS/LITERALS                                    *
SAVEAREA DS    18F                    MAIN SAVE AREA
DUMMYP DC    X'80'                    HIGH ORDER BIT ON
       DC    AL3(NULLPARM)            ADDR NULL STRING
NULLPARM DC    F'0'                   NULL STRING
       SPACE 2
       LTORG
       SPACE 3
       END
/*
/&

Sample COBOL program

// JOB UPXCTMBP    COMPILE
// OPTION CATAL
   PHASE UPXCTMBP,*
// EXEC FCOBOL
 CBL LIB,LANGLVL(2),APOST,NOADV,BUF=2048
 CBL CLIST,NOSEQ,SUPMAP,NOTRUNC,SXREF,DMAP
       IDENTIFICATION DIVISION.
       PROGRAM-ID. UPXCTMBP.
       EJECT
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. IBM-4381.
       OBJECT-COMPUTER. IBM-4381.
      *
       SPECIAL-NAMES.
         DECIMAL-POINT IS COMMA.
      *
       INPUT-OUTPUT SECTION.
      *
       FILE-CONTROL.
      *
       EJECT
       DATA DIVISION.
      *
       FILE SECTION.
      *
       EJECT
       WORKING-STORAGE SECTION.
       77  PGRMID                 PIC X(8)       VALUE 'UPXCTMBP'.
       EJECT
       LINKAGE SECTION.
       01  EXEC-PARM.
         02 EXEC-PARM-LENGTH            PIC S9(4)  COMP.
         02 EXEC-PARM-STRING.
            03 EXEC-PARM-CHAR       PIC X
                 OCCURS 0 TO 100 DEPENDING ON EXEC-PARM-LENGTH.
       EJECT
       PROCEDURE DIVISION.
         ENTRY 'CBLEPAR' USING EXEC-PARM.
         MOVE EXEC-PARM-LENGTH TO EXEC-PARM-LENGTH.
         DISPLAY EXEC-PARM-LENGTH.
         IF EXEC-PARM-LENGTH NOT = ZERO
            DISPLAY EXEC-PARM-STRING.
      *
         STOP RUN.
/*
   INCLUDE UPXEPARC
   ENTRY UPXEPARC
// EXEC LNKEDT
/&

Sample JCL for testing

// JOB UPXCTMBP    TEST
// EXEC UPXCTMBP,PARM='TEST-PARAMETER'
/&

Willi Kuhn
Freelance Systems Programmer (Germany)            c Willi Kuhn 1992

