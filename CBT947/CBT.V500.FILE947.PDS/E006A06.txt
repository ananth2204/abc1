File generation datasets under VSE

MVS contains a feature that to my knowledge is not available
in VSE. That feature is Generation DataSets (GDS). For those
not familiar with the term a GDS enables multiple versions of a
file to be maintained, each being updated in succession. Any
version of the GDS can be read at the user's option.

To get a similar function to work on VSE I wrote a program
that makes use of VSE JCL symbolic parameters. The program
accesses a VSAM file containing information relating to each
GDS, updates the GDS control file if necessary, and passes the
GDS version to be accessed as a return code. The JCL takes
the return code, sets it up as a PARM, and modifies the VSAM
DLBL via symbolic parameters.

It should be noted that even though I use the GDS function for
VSAM files, there is no reason why it couldn't be used for
non-VSAM disk files or even tape files.


RESTRICTIONS

The number of versions maintained for a GDS is limited to 10.
VSE can handle return codes up to 4095 but return codes equal
to 16 or more are usually considered to be a serious problem by
some IBM system programs. A limit of 10 seems to be a
reasonable limitation, but if you feel otherwise it is a simple
program change.

The file name for each version of a GDS must be identical
except for the version number. The version number will be a V
followed by a 4-digit number. For example:

      SAMPLE.VSAM.GDS.FILE.V0001
      SAMPLE.VSAM.GDS.FILE.V0002

All versions of the GDS must be defined to VSAM prior to
use. Information will be passed back to the user via return
codes. The user can use the return codes in conditional JCL to
make the GDS work. It should be pointed out that only the last
return code can be returned so you should have only one 'read'
or one 'write' command in the JCL and it must be the last one.
You can use other commands preceding the read or write. The
return codes used are listed in Figure 1.

The GDS name used as input to the GDS program is 8-
characters long and uniquely identifies the GDS. I use a
standard name in the following format (the standards can be
altered):

      XSSGDSNN

where NN is the sequential number; GDS remains constant as
GDS; SS is the system code (eg 'AR' for accounts receivable,
'AP' for accounts payable, etc.); X is either 'P' for production
or 'T' for test.

For example, if I were setting up the first GDS for an accounts
receivable system in a production environment I would give it a
name of PARGDS01.

Program input is free form, but the fields must be input in the
sequence shown in Figure 2 with at least one blank between
each field, except between the sign and the version in which
case there is no space.

A log is written to the console so all activity can be traced
easily as the job progresses.  There are four types of data
logged:

The following line always shows:

         REQUEST=> X------DUPLICATES THE INPUT YOU SUPPLIED--->

The following is returned if an error occurs:

         ERROR  => X--ERROR MESSAGE--X

The following line displays informational messages:

         X------INFO------X

The following line displays the return information after
processing GDS:

      RETURN => XX OF YY MM/DD/YY HH/MM RC=NN <----DESCRIPT---->

where XX is the current version of the GDS; YY is the
maximum number of versions of this GDS; MM/DD/YY is the
date and time of the last update; NN is the return code; and
DESCRIPT is a description of the GDS.

I'm running on VSE/SP 3.1 and CICS 1.7 but other releases
that allow conditional JCL and symbolic parameters should not
be a problem.

Figure 3 shows a summary of field usage by command.


SAMPLE INPUTS

Sample inputs to the program (phase name=ZZGDS) are as
follows:

o      Create a production GDS with 5 versions:
      PMSGDS01 CREATE 5 RECYCLED.ERRORS

o      Write to a GDS:
      PMSGDS01 WRITE

o      Read current version:
      PMSGDS01 READ

o      Read previous version:
      PMSGDS01 READ -1

o      Read previous 3:
      PMSGDS01 READ V3

o      Delete 1 version of GDS:
      PMSGDS01 DELETE 1

o      Delete entire GDS from control:
      PMSGDS01 DELETE 99


SAMPLE JCL USING GDS CONTROL PROGRAM

   01 * $$ JOB JNM=ZZTSTGDS,CLASS=P,DISP=D,USER=ANGELO
   02 * $$ LST FNO=1PTW,DISP=D,CLASS=Z
   03 // JOB ZZ0001 SAMPLE GDS JCL
   04 // OPTION LOG,NODUMP
   05 // ON $ABEND OR $CANCEL GOTO PROBLEM
   06 // ASSGN SYS007,SYSIPT
   07 // EXEC ZZGDS,SIZE=ZZGDS
   08 PZZGDS01 DELETE 99
   09 PZZGDS01 CREATE 5 TRANSACTION.RECYCLE
   10 PZZGDS01 WRITE
   11 /*
   12 // IF $RC = 0 OR $RC > 10 THEN
   13 // PAUSE PROBLEM WITH GDS RETURN CODE
   14 // SETPARM ZZA=$RC
   15 // ASSGN SYS007,SYSIPT
   16 // EXEC ZZGDS,SIZE=ZZGDS
   17 PZZGDS01 WRITE
   18 /*
   19 // IF $RC = 0 OR $RC > 10 THEN
   20 // PAUSE PROBLEM WITH GDS RETURN CODE
   21 // SETPARM ZZB=$RC
   22 * PROCESS FIRST GDS
   23 // DLBL SORTOUT,'SAMPLE.VSAM.GDS.FILE.V&ZZA',,VSAM,CAT=YOURCAT
   24 // EXEC SORT,SIZE=96K
   25  SORT FIELDS=(1,13,A),FORMAT=BI,WORK=1
   26  RECORD TYPE=F,LENGTH=80
   27  INPFIL SYSIPT
   28  OUTFIL TOL,BLKSIZE=80
   29  SUM FIELDS=NONE
   30  END
   31  ZZA INPUT 001
   32  ZZA INPUT 002
   33 /*
   34 // DLBL FILE,'SAMPLE.VSAM.GDS.FILE.V&ZZA',,VSAM,CAT=YOURCAT
   35 // EXEC IDCAMS,SIZE=AUTO
   36    PRINT INFILE(FILE) SKIP(0) COUNT(10)
   37 /*
   38 * PROCESS SECOND GDS
   39 // DLBL SORTOUT,'SAMPLE.VSAM.GDS.FILE.V&ZZB',,VSAM,CAT=YOURCAT
   40 // EXEC SORT,SIZE=96K
   41  SORT FIELDS=(1,13,A),FORMAT=BI,WORK=1
   42  RECORD TYPE=F,LENGTH=80
   43  INPFIL SYSIPT
   44  OUTFIL TOL,BLKSIZE=80
   45  SUM FIELDS=NONE
   46  END
   47 ZZB INPUT 001
   48 ZZB INPUT 002
   49 /*
   50 // DLBL FILE,'SAMPLE.VSAM.GDS.FILE.V&ZZB',,VSAM,CAT=YOURCAT
   51 // EXEC IDCAMS,SIZE=AUTO
   52    PRINT INFILE(FILE) SKIP(0) COUNT(10)
   53 /*
   54 // GOTO LISTLOG
   55 /. PROBLEM
   56 * PROBLEM ENCOUNTERED
   57 /. LISTLOG
   58 // EXEC LISTLOG
   59 /&
   60 * $$ EOJ


      Explanation of JCL (using the line numbers).

05      If any programs abend or operator cancels job go to
      'problem' at line 55.

08      Delete entire GDS.

09      Create a GDS with 5 versions.

10      I want to write to next version of the GDS.

12      If return code is not in the range of 1-10 a version was not
      returned in which case the pause at line 13 will print on the
      console.

Note: I know pauses should not be used in a production
environment but this is for illustration only.

14      Set PARM ZZA (you pick this name) equal to the return
      code (the next GDS version to be written). Note: the name
      you pick does not have to be 3 positions long, however by
      doing this you will be replacing the 4 symbolic characters
      in the label (the symbolic name as used in the label will be
      preceded by &) with the 4-digit return code; therefore there
      will be no shifting  of the name in the label.

17      I want to write the next version of the GDS.

21      Set PARM ZZB (you pick this name) equal to the return
      code  (the next GDS version to be written).

23      This is the label for the GDS you are going to write. Note
      the use of &ZZA. The & indicates that what follows is a
      parameter and it points to the ZZA defined by line 14.
      ZZA is a 4-position field containing the version number of
      the GDS. For example, if the version number is 2 then
      ZZA = 0002 and the label as processed will be changed
      from V&ZZA to V0002. The actual file would have
      previously been defined with V0001 to V0005 as the suffix
      (assuming a 5 version GDS).

34      See explanation for line 23 above for details on the
      meaning of &ZZA for this DLBL. &ZZA will be replaced
      with exactly the same version as in line 23.

39       See explanation for line 23 above for details on the
      meaning of &ZZB for this DLBL. &ZZB will be replaced
      with the version determined at line 21.


SAMPLE VSAM FILE DEFINITIONS

The following is a sample VSAM file definition for a GDS that
will have a maximum of three versions:

          DEFINE CLUSTER( -
                 NAME(SAMPLE.VSAM.GDS.FILE.V0001) -
                   VOLUMES(123456) REUSE -
                   NONINDEXED TRACKS(15 15) RECORDFORMAT(UNDEF) -
                   RECORDSIZE(200 12000) SPEED FOR(0) NOALLOCATION) -
                 CATALOG(YOUR.USER.CATALOG)
          DEFINE CLUSTER( -
                 NAME(SAMPLE.VSAM.GDS.FILE.V0002) -
                   VOLUMES(123456) REUSE -
                   NONINDEXED TRACKS(15 15) RECORDFORMAT(UNDEF) -
                   RECORDSIZE(200 12000) SPEED FOR(0) NOALLOCATION) -
                 CATALOG(YOUR.USER.CATALOG)
          DEFINE CLUSTER( -
                 NAME(SAMPLE.VSAM.GDS.FILE.V0003) -
                   VOLUMES(123456) REUSE -
                   NONINDEXED TRACKS(15 15) RECORDFORMAT(UNDEF) -
                   RECORDSIZE(200 12000) SPEED FOR(0) NOALLOCATION) -
                 CATALOG(YOUR.USER.CATALOG)


TO INSTALL THE BATCH PROGRAM

Define the GDS control file to VSAM. Naturally you should
change the data to meet your shop standards. The sample
below was set up for 3380 DASD.

          DEFINE CLUSTER( -
                   NAME(GDS.CONTROL.FILE) VOLUMES(123456) -
                     INDEXED SHR(4 3) RECORDS(50 25) -
                     RECORDSIZE(60 60) KEYS(8 0) FREESPACE(0 0) SPEED -
                     TO(99365)) -
                 DATA( -
                   NAME(GDS.CONTROL.FILE.DATA) CISZ(4096)) -
                 INDEX( -
                   NAME(GDS.CONTROL.FILE.INDEX) CISZ(1024)) -
                 CATALOG(YOUR.USER.CATALOG)

Put a DLBL in the standard label area.

         // DLBL ZZGDSK,'GDS.CONTROL.FILE',,VSAM,CAT=YOURCAT

Compile the batch program. I used phase name ZZGDS. Note:
the program contains several macros. They are used to
maintain consistency, eliminate redundancy, and simplify
coding. You can put the coding in-line if you like.

Initialize the GDS.CONTROL.FILE. The control file must be
initialized before using it. This is done by executing phase
ZZGDS with an input card containing INITIALIZE in column
1, for example:

         // ASSGN SYS007,SYSIPT
         // EXEC ZZGDS,SIZE=ZZGDS
         INITIALIZE
         /*

Use JCL similar to the sample JCL described above to test the
system.


ON-LINE ACCESS TO GDS CONTROL FILE

The GDS control file can be accessed on-line using a CICS
command level program. The on-line program is not essential
to the processing of the GDS files but it does enable you to
browse the GDS control file. It also enables you to change the
file description, the current version (especially useful when
testing, however this can also be done in batch), and the
maximum number of versions.

To use this program, you must do the following:

o      Add the following to your CICS tables (or use RDO):

PCT table:

             ZZGD     DFHPCT TYPE=ENTRY,TRANSID=ZZGD,PROGRAM=ZZGD01,  X
                            SPURGE=YES

                   *** PPT TABLE   ***

             ZZGD01   DFHPPT TYPE=ENTRY,PROGRAM=ZZGD01,               X
                            PGMLANG=ASSEMBLER
             ZZGDS01  DFHPPT TYPE=ENTRY,MAPSET=ZZGDS01

FCT table:

             ZZGDSK   DFHFCT TYPE=DATASET,DATASET=ZZGDSK,             X
                            ACCMETH=VSAM,FILSTAT=(ENABLED,CLOSED),    X
                            RECFORM=(FIXED,BLOCKED),                  X
                            SERVREQ=(BROWSE,READ,UPDATE),STRNO=2

o      Insert your company name in the BMS MAP macros and
      compile  the MAP and DSECT.

o      Compile the program (use Assembler option NOPROLOG
      for the command level preprocessor). For example:

                // EXEC DFHEAP1$,SIZE=300K
                *ASM XOPTS(LINECOUNT(78) NOPROLOG)
                <--- SOURCE CODE HERE --->

o      Use trans ZZGD to access the transaction. The use of the
      program is self-explanatory but be aware of the following:

      o      You can use a generic prefix when entering the GDS-
            id. The program will display the record that is equal to
            or greater than this value. You can use the PF keys to
            browse from there.

      o      For updating, simply display the record you want,
            make the change, and press PF9.

The GDS control file display/update screen looks like Figure 4.

Most fields are self-explanatory, but note the following:

o      You can display or update an existing record, but you can't
      add or delete a record.

o      The 'job that last updated GDS' is the batch job name that
      established the GDS or the one that wrote to the GDS.
      'Reads' do not update this field. If the GDS record is
      updated on-line then this field will contain 'CICS'
      followed by the 3-position DFHSNT operator-id.


ZZGDS

GDS      TITLE 'JOB ZZGDS PSEUDO GENERATION DATASET PROCESSING'
* THE PURPOSE OF THIS PROGRAM IS TO PROVIDE THE VSE USER WITH THE
* ABILITY TO USE GENERATION DATASETS (GDS).
*        * * * * * * * * *   N O T E   * * * * * * * * *
*
* BEFORE THE FILE IS USED FOR THE FIRST TIME, IT MUST BE INITIALIZED.
* THIS IS DONE BY SIMPLY RUNNING THIS JOB WITH AN INPUT CARD CONTAINING
* 'INITIALIZE' STARTING IN COLUMN 1.
* THERE WILL BE A MAX OF 10 VERSIONS OF A DATASET.
* RETURN CODES WILL BE AS FOLLOWS:
*     00  SUCCESSFUL COMPLETION FOR OPTIONS CREATE, DELETE, USED
*  01-10  VERSION OF GDS REQUESTED
*     12  I/O ERROR
*     13  INPUT REQUEST IS IN ERROR
*     15  GDS RECORD NOT FOUND
*     20-24 PROBLEM INITIALIZING FILE
*         IF YOU ENCOUNTER A PROBLEM WHEN INITIALIZING THE FILE THE
*         FOLLOWING MESSAGE WILL APPEAR ON THE CONSOLE:
*               'ERROR  => FILE INIT PROB. RC=XX,R15=YY,FDBK=ZZ'
*         . WHERE 'XX' = VALUE IN FIELD 'RETNCODE'.
*            BY LOOKING AT ROUTINE 'INITFILE' YOU CAN DETERMINE WHICH
*            VSAM MACRO HAD THE PROBLEM.
*         . WHERE 'YY' = HEX VALUE IN REGISTER 15.
*            CHECK 'VSE/VSAM COMMANDS AND MACROS' FOR THE MEANING OF
*            THIS CODE. THEY ARE LISTED UNDER THE TOPIC 'RETURN CODES
*            FOR REQUEST MACROS'.
*         . WHERE 'ZZ' = HEX VALUE IN 'FDBK' FROM THE REQUEST MACRO.
*            CHECK 'VSE/VSAM MESSAGES AND CODES' FOR THE MEANING OF
*            THIS CODE. THEY ARE LISTED UNDER THE TOPIC 'RETURN CODES
*            FROM REQUEST MACROS'.
*   ----------------------------------------------------------------
* INPUT REQUEST CARD IS FREEFORM WITH AT LEAST 1 SPACE BETWEEN EACH
* FIELD:
*         MAX <-- INPUT FIELD REQUIREMENTS BY COMMAND (X=REQUIRED)
*         LTH CREATE DELETE STATUS READ WRITE                    .
* PDSID     8   X      X      X     X     X                      .
* COMMAND   8   X      X      X     X     X                      .
* SIGN      1                       0                            .
* VERSION   2   X      O            O                            .
* DESCR    30   X                                                .
*
*  NOTE: SIGN CAN BE 'V' (FOR ACTUAL VERSION) OR '-' FOR RELATIVE
*    VERSION IF NOT CURRENT VERSION. THERE MUST BE NO BLANKS BETWEEN
*    SIGN AND VERSION #. IF YOU WANT THE CURRENT VERSION SIMPLY LEAVE
*    SIGN & VERSION BLANK.
*    USING VERSION '99' FOR DELETE WILL PURGE THE GDS RECORD FROM THE
*    FILE.
         EJECT
* MACRO DEFINITIONS
         MACRO
         REGIS
* MACRO        ==> REGIS
* PARAMETERS   ==> NONE
* PURPOSE      ==> ASSIGN TAGS TO REGISTERS

Editor's note: register equates go here.

         MACRO
&NAME    BEGIN &SUB
* MACRO        ==> BEGIN &SUB
* PARAMETERS   ==>  &SUB = NONE - NORMAL PHASE
*                   &SUB = SUB  - CALLED SUBROUTINE
* PURPOSE      ==> USED BY ASSEMBLER PHASES TO ESTABLISH REGISTER SAVE
*                  AREAS AND BY CALLED SUBROUTINES TO ESTABLISH RETURN
*                  LINKAGE AS WELL.
         DS    0H
&NAME    EQU   *
         AIF   ('&SUB' EQ 'SUB').ITSSUB
         BALR  R15,R0              LOAD R15
         USING *,R15               ADDRESSABILITY
         CNOP  0,4
         BAL   R13,*+4+(18*4)      NO CALLING PROG, FAKE IT
SAV$$RGP DC    18F'0'
         DROP  R15
         BALR  R15,R0              IT'S A PHASE, LOAD R15
.ITSSUB  ANOP
         USING *,R15               ADDRESSABILITY
         SAVE  (14,12)             STORE REG 14 THRU 12 IN CALLING PROG
         ST    R13,SAV$$REG+4      STORE R13 IN MY SAVE AREA
         MVC   8(4,R13),SAVADCON   PASS BACK ADDRESS OF MY SAVE AREA
         L     R13,SAVADCON        PUT ADDR OF MY SAVE AREA IN R13
         B     CONTIN$$
SAV$$REG DC    18F'0'
MAX$$RET DC    F'0'                USED TO STORE MAX RETURN CODE
SAVADCON DC    A(SAV$$REG)
         DS    0H
CONTIN$$ EQU   *
         DROP  R15
         MEND
ZZGDS    START 0
         EJECT
         PRINT NOGEN
         REGIS
ZZGDSK   ACB   MACRF=(SEQ,DIR,OUT),EXLST=GDSEXLST
GDSEXLST EXLST AM=VSAM,EODAD=GDSEND
GDSRPL   RPL   ACB=ZZGDSK,AREA=GDSDATA,AREALEN=060,OPTCD=(DIR),        C
               ARG=WGDSID,RECLEN=60
GDSRPLS  RPL   ACB=ZZGDSK,AREA=GDSDATA,AREALEN=060,OPTCD=(SEQ,NUP),    C
               ARG=WGDSID,RECLEN=60
CONSOLE  DTFCN DEVADDR=SYSLOG,IOAREA1=CONSIO,TYPEFLE=CMBND,WORKA=YES,  C
               BLKSIZE=70,INPSIZE=10
CONSIO   DS    CL70
CARDS    DTFCD DEVADDR=SYS007,IOAREA1=CARDIN,BLKSIZE=80,TYPEFLE=INPUT, C
               DEVICE=2540,EOFADDR=LASTCD,RECFORM=FIXUNB
         EJECT
START    BEGIN
         BALR  R3,R0
         USING *,R3
         OPEN  CARDS,CONSOLE,ZZGDSK
         COMRG
         MVC   CURDATE(2),0(R1)
         MVC   CURDATE+2(2),3(R1)
         MVC   CURDATE+4(2),6(R1)
         MVC   CURJOB,24(R1)
         GETIME STANDARD
         ST    R1,FULL
         UNPK  WORK,FULL
         MVC   CURTIME,WORK
* GET OPTION REQUEST
GETOPT   EQU   *
         GET   CARDS
* DISPLAY REQUEST ON CONSOLE
         MVC   MESSAGE,MESSAGE-1
         MVC   MESSAGE(9),=C'REQUEST=>'
         MVC   MESSAGE+10(60),CARDIN
         BAL   R9,PUTCON
* IS USER REQUESTING FILE TO BE INITIALIZED?
         CLC   =C'INITIALIZE',CARDIN
         BE    INITFILE            GO INITIALIZE THE FILE
* FORMAT INPUT DATA
         MVC   WAREA,WAREA-1
         ZAP   WVERSION,ZERO
         L     R8,=A(CARDIN)
* GDSID
         TRT   0(80,R8),FIELDDLM
         CLI   0(R1),EOR           END OF RECORD?
         BE    INPERROR             .. YES
         ST    R1,DLMLOC           STORE FIELD-DELIM LOCATION
         SR    R1,R8               LENGTH OF FIELD
         CH    R1,=H'8'            LENGTH VALID?
         BH    INPERROR             .. NO
         BCTR  R1,R0               DECREMENT LENGTH
         STC   R1,*+5
         MVC   WGDSID(0),0(R8)
* COMMAND
         L     R8,DLMLOC
         TRT   0(80,R8),FIELDSTR
         CLI   0(R1),EOR           END OF RECORD?
         BE    INPERROR             .. YES
         LR    R8,R1               R8 POINTS TO NEXT FIELD
         TRT   0(80,R8),FIELDDLM
         CLI   0(R1),EOR           END OF RECORD?
         BE    INPERROR             .. YES
         ST    R1,DLMLOC           STORE FIELD-DELIM LOCATION
         SR    R1,R8               LENGTH OF FIELD
         CH    R1,=H'8'            LENGTH VALID?
         BH    INPERROR             .. NO
         BCTR  R1,R0               DECREMENT LENGTH
         STC   R1,*+5              OVERLAY LENGTH IN NEXT INSTRUCTION
         MVC   WCOMMAND(0),0(R8)
* SIGN (- OR V) AND VERSION #
         L     R8,DLMLOC
         TRT   0(80,R8),FIELDSTR
         CLI   0(R1),EOR           END OF RECORD?
         BE    COMPLETE             .. YES
         LR    R8,R1               R8 POINTS TO NEXT FIELD
         TRT   0(80,R8),FIELDDLM
         CLI   0(R1),EOR           END OF RECORD?
         BE    COMPLETE             .. YES
         ST    R1,DLMLOC           STORE FIELD-DELIM LOCATION
         SR    R1,R8               LENGTH OF FIELD
         CLI   0(R8),MINUS
         BE    VALSIGN
         CLI   0(R8),VER
         BE    VALSIGN
         B     VERSION             IT'S THE VERSION #
VALSIGN  MVC   WSIGN,0(R8)
         LA    R8,1(R8)            STEP BY SIGN
         BCTR  R1,R0               DECREMENT LENGTH
         B     VERSION
* VERSION
VERSION  CH    R1,=H'2'            LENGTH VALID?
         BH    INPERROR             .. NO
         BCTR  R1,R0               DECREMENT LENGTH
         STC   R1,*+11             LENGTH OF SENDING FIELD
         MVZ   *+7(1),=X'10'       LENGTH OF RECEIVING FIELD
         PACK  WVERSION(0),0(0,R8)
         MVN   WVERSION+1(1),SIGN
* WAS VERSION NUMERIC
         CLI   0(R8),C'0'
         BL    INPERROR
         CLI   0(R8),C'9'
         BH    INPERROR
         CLI   1(R8),BLANK         1 POSITION VERSION?
         BE    DESCRIPT             .. YES
         CLI   1(R8),C'0'
         BL    INPERROR
         CLI   1(R8),C'9'
         BH    INPERROR
* DESCRIPTION
DESCRIPT L     R8,DLMLOC
         TRT   0(80,R8),FIELDSTR
         CLI   0(R1),EOR           END OF RECORD?
         BE    COMPLETE             .. YES
         LR    R8,R1               R8 POINTS TO NEXT FIELD
         TRT   0(80,R8),FIELDDLM
         CLI   0(R1),EOR           END OF RECORD?
         BE    COMPLETE             .. YES
         ST    R1,DLMLOC           STORE FIELD-DELIM LOCATION
         SR    R1,R8               LENGTH OF FIELD
         CH    R1,=H'30'           LENGTH OK?
         BNH   *+8                  .. YES
         L     R1,=A(30)            .. NO, MAKE IT 30
         BCTR  R1,R0               DECREMENT LENGTH
         STC   R1,*+5
         MVC   WDESCR(0),0(R8)
         B     COMPLETE
         EJECT
* OPTION REQUEST HAS BEEN REFORMATTED
COMPLETE EQU   *
         CLC   CREATE,WCOMMAND
         BE    OPCREATE
         CLC   DELETE,WCOMMAND
         BE    OPDELETE
         CLC   READ,WCOMMAND
         BE    OPREAD
         CLC   WRITE,WCOMMAND
         BE    OPWRITE
         CLC   STATUS,WCOMMAND
         BE    OPSTATUS
         B     INPERROR            INVALID COMMAND
* CREATE NEW GDS
OPCREATE EQU   *
         CP    WVERSION,MAXVERSN
         BNH   OPCVOK
         MVC   MESSAGE,MESSAGE-1   VERSION > MAX
         MVC   MESSAGE(L'MESSOVM),MESSOVM
         BAL   R9,PUTCON
         ZAP   RETNCODE,=P'13'
         B     GETOPT
OPCVOK   L     R13,=A(SAV$$REG)
         MODCB RPL=GDSRPL,OPTCD=NUP
         BAL   R9,GETGDS
         CLC   WGDSID,GGDSID
         BNE   OPCOKAY
         MVC   MESSAGE,MESSAGE-1   ATTEMPTING TO DUP GDS
         MVC   MESSAGE(L'MESSDUP),MESSDUP
         BAL   R9,PUTCON
         ZAP   RETNCODE,=P'13'
         B     GETOPT
OPCOKAY  MVC   GDSDATA,GDSDATA-1
         MVC   GGDSID,WGDSID
         ZAP   GCURVER,ZERO
         ZAP   GMAXVER,WVERSION
         MVC   GDATE,CURDATE
         MVC   GTIME,CURTIME
         MVC   GJOB,CURJOB
         MVC   GDESCR,WDESCR
         BAL   R9,PUTGDS
         ZAP   RETNCODE,ZERO
         BAL   R9,DISPLAY
         B     GETOPT
* DELETE GDS
OPDELETE EQU   *
         L     R13,=A(SAV$$REG)
         MODCB RPL=GDSRPL,OPTCD=UPD
         BAL   R9,GETGDS
         CLC   WGDSID,GGDSID
         BE    OPDOKAY
         MVC   MESSAGE,MESSAGE-1   NO RECORD FOUND
         MVC   MESSAGE(L'MESSNRF),MESSNRF
         BAL   R9,PUTCON
         ZAP   RETNCODE,=P'15'
         B     GETOPT
OPDOKAY  EQU   *
         CP    WVERSION,=P'99'
         BE    OPDALL              DELETE ENTIRE GDS
         CP    WVERSION,GMAXVER
         BL    OPDVOK
         MVC   MESSAGE,MESSAGE-1   VERSION TOO HIGH
         MVC   MESSAGE(L'MESSVER),MESSVER
         BAL   R9,PUTCON
         ZAP   RETNCODE,=P'13'
         B     GETOPT
* DELETE VERSIONS OF GDS
OPDVOK   ZAP   REQVER,WVERSION
         ZAP   WORKVER,GCURVER
         CP    GCURVER,ZERO
         BNE   OPDLOOP             GDS NEVER USED
         MVC   MESSAGE,MESSAGE-1   1ST GDS NEVER WRITTEN
         MVC   MESSAGE(L'MESSNFL),MESSNFL
         BAL   R9,PUTCON
         ZAP   RETNCODE,=P'13'
         B     GETOPT
OPDLOOP  CP    REQVER,ZERO
         BE    OPDVRSET            VERSION SET
         SP    REQVER,ONE
         SP    WORKVER,ONE
         CP    WORKVER,ZERO
         BNE   OPDLOOP
         ZAP   WORKVER,GMAXVER     RESET TO MAX
         B     OPDLOOP
OPDVRSET MVC   GDATE,CURDATE       ADJUST GDS RECORD
         MVC   GTIME,CURTIME
         MVC   GJOB,CURJOB
         ZAP   GCURVER,WORKVER
         BAL   R9,PUTGDS
         ZAP   RETNCODE,ZERO
         BAL   R9,DISPLAY
         B     GETOPT
* DELETE ENTIRE GDS
OPDALL   L     R13,=A(SAV$$REG)
         ERASE RPL=GDSRPL
         MVC   GDSDATA,GDSDATA-1
         MVC   MESSAGE,MESSAGE-1   RECORD DELETED
         MVC   MESSAGE(L'MESSDEL),MESSDEL
         BAL   R9,PUTCON
         ZAP   RETNCODE,ZERO
         B     GETOPT
* READ GDS
OPREAD   EQU   *
         L     R13,=A(SAV$$REG)
         MODCB RPL=GDSRPL,OPTCD=NUP
         BAL   R9,GETGDS
         CLC   WGDSID,GGDSID
         BE    OPROKAY
         MVC   MESSAGE,MESSAGE-1   NO RECORD FOUND
         MVC   MESSAGE(L'MESSNRF),MESSNRF
         BAL   R9,PUTCON
         ZAP   RETNCODE,=P'15'
         B     GETOPT
OPROKAY  CP    GCURVER,ZERO
         BNE   OPRNOT1
         MVC   MESSAGE,MESSAGE-1   1ST GDS NEVER WRITTEN
         MVC   MESSAGE(L'MESSNFL),MESSNFL
         BAL   R9,PUTCON
         ZAP   RETNCODE,=P'13'
         B     GETOPT
OPRNOT1  CP    WVERSION,GMAXVER
         BL    OPRVOK
         MVC   MESSAGE,MESSAGE-1   VERSION TOO HIGH
         MVC   MESSAGE(L'MESSVER),MESSVER
         BAL   R9,PUTCON
         ZAP   RETNCODE,=P'13'
         B     GETOPT
OPRVOK   CLI   WSIGN,VER
         BNE   OPRNOSP             NOT SPECIFIC
         ZAP   RETNCODE,WVERSION   WANTS SPECIFIC VERSION
         BAL   R9,DISPLAY
         B     GETOPT
OPRNOSP  CP    WVERSION,ZERO
         BE    OPRMINUS            WANTS CURRENT VERSION
         CLI   WSIGN,MINUS
         BE    OPRMINUS
         MVC   MESSAGE,MESSAGE-1   NO SIGN BEFORE VERSION
         MVC   MESSAGE(L'MESSNSGN),MESSNSGN
         BAL   R9,PUTCON
         ZAP   RETNCODE,=P'13'
         B     GETOPT
OPRMINUS ZAP   REQVER,WVERSION
         ZAP   WORKVER,GCURVER
OPRLOOP  CP    REQVER,ZERO
         BE    OPRVRSET            VERSION SET
         SP    REQVER,ONE
         SP    WORKVER,ONE
         CP    WORKVER,ZERO
         BNE   OPRLOOP
         ZAP   WORKVER,GMAXVER     RESET TO MAX
         B     OPRLOOP
OPRVRSET ZAP   RETNCODE,WORKVER
         BAL   R9,DISPLAY
         B     GETOPT
* WRITE GDS
OPWRITE  EQU   *
         L     R13,=A(SAV$$REG)
         MODCB RPL=GDSRPL,OPTCD=UPD
         BAL   R9,GETGDS
         CLC   WGDSID,GGDSID
         BE    OPWOKAY
         MVC   MESSAGE,MESSAGE-1   NO RECORD FOUND
         MVC   MESSAGE(L'MESSNRF),MESSNRF
         BAL   R9,PUTCON
         ZAP   RETNCODE,=P'15'
         B     GETOPT
OPWOKAY  EQU   *
         CP    GCURVER,GMAXVER     AT MAX VERSION?
         BL    *+10
         ZAP   GCURVER,ZERO        RESET FOR VER 1
         AP    GCURVER,ONE
         MVC   GDATE,CURDATE
         MVC   GTIME,CURTIME
         MVC   GJOB,CURJOB
         BAL   R9,PUTGDS
         ZAP   RETNCODE,GCURVER    SET RETURN CODE
         BAL   R9,DISPLAY
         B     GETOPT
* STATUS OF GDS
OPSTATUS EQU   *
         L     R13,=A(SAV$$REG)
         MODCB RPL=GDSRPL,OPTCD=NUP
         BAL   R9,GETGDS
         CLC   WGDSID,GGDSID
         BE    OPSOKAY
         MVC   MESSAGE,MESSAGE-1   NO RECORD FOUND
         MVC   MESSAGE(L'MESSNRF),MESSNRF
         BAL   R9,PUTCON
         ZAP   RETNCODE,=P'15'
         B     GETOPT
OPSOKAY  ZAP   RETNCODE,ZERO
         BAL   R9,DISPLAY
         B     GETOPT
         EJECT
* PROCESS GDS MASTER
GETGDS   EQU   *
         L     R13,=A(SAV$$REG)
         GET   RPL=GDSRPL
         BR    R9
PUTGDS   EQU   *
         L     R13,=A(SAV$$REG)
         PUT   RPL=GDSRPL
         LTR   R15,R15
         BZR   R9
         ZAP   RETNCODE,=P'12'     I/O ERROR
         BR    R9
* DISPLAY GDS RECORD
DISPLAY  ST    R9,HOLDR9
         MVC   MESSAGE,MESSAGE-1
         MVC   MESSAGE(L'MESSRTN),MESSRTN
         UNPK  MESSAGE+10(2),GCURVER
         OI    MESSAGE+11,FSIGN
         UNPK  MESSAGE+16(2),GMAXVER
         OI    MESSAGE+17,FSIGN
         MVC   MESSAGE+19(2),GDATE
         MVC   MESSAGE+22(2),GDATE+2
         MVC   MESSAGE+25(2),GDATE+4
         MVC   MESSAGE+28(2),GTIME
         MVC   MESSAGE+31(2),GTIME+2
         UNPK  MESSAGE+37(2),RETNCODE
         OI    MESSAGE+38,FSIGN
         MVC   MESSAGE+40(30),GDESCR
         BAL   R9,PUTCON
         L     R9,HOLDR9
         BR    R9
* PUT CONSOLE MESSAGES
* RESPONSE EXPECTED
PUTCONR  MVC   RESPONSE,BLANKS
         PUTR  CONSOLE,MESSAGE,RESPONSE
         OC    RESPONSE,BLANKS    FORCE UPPER CASE
         BR    R9
* NO RESPONSE EXPECTED
PUTCON   PUT   CONSOLE,MESSAGE
         BR    R9
* INPUT REQUEST IS IN ERROR
INPERROR EQU   *
         MVC   MESSAGE,MESSAGE-1
         MVC   MESSAGE(L'MESSINP),MESSINP
         BAL   R9,PUTCON
         ZAP   RETNCODE,=P'13'
         B     GETOPT
* END OF JOB PROCESSING
LASTCD   EQU   *
ENDJOB   EQU   *
         CLOSE CARDS,CONSOLE,ZZGDSK
         ZAP   DOUBLE,RETNCODE
         CVB   R15,DOUBLE
         EOJ   RC=(15)
         EJECT
* INITIALIZE THE FILE
INITFILE EQU   *
         MVC   GDSDATA,GDSDATA-1  BLANK THE RECORD AREA
* WRITE A BLANK RECORD
         ZAP   RETNCODE,=P'20'
         L     R13,=A(SAV$$REG)
         PUT   RPL=GDSRPLS
         LTR   R15,R15
         BNZ   INITPROB
* CLOSE & OPEN FILE TO BREAK AWAY FROM INITIAL LOAD
         CLOSE ZZGDSK
         OPEN  ZZGDSK
* MODIFY RPL - FOR UPDATE
         ZAP   RETNCODE,=P'21'
         L     R13,=A(SAV$$REG)
         MODCB RPL=GDSRPLS,OPTCD=(UPD)
         LTR   R15,R15
         BNZ   INITPROB
* RETRIEVE RECORD FOR UPDATE
         ZAP   RETNCODE,=P'22'
         L     R13,=A(SAV$$REG)
         GET   RPL=GDSRPLS
         LTR   R15,R15
         BNZ   INITPROB
* ERASE RECORD
         ZAP   RETNCODE,=P'23'
         L     R13,=A(SAV$$REG)
         ERASE RPL=GDSRPLS
         LTR   R15,R15
         BNZ   INITPROB
* RELEASE RPL
         ZAP   RETNCODE,=P'24'
         L     R13,=A(SAV$$REG)
         ENDREQ RPL=GDSRPLS
         LTR   R15,R15
         BNZ   INITPROB
* FILE INITIALIZED SUCESSFULLY
         ZAP   RETNCODE,ZERO
         MVC   MESSAGE,MESSAGE-1
         MVC   MESSAGE(L'MESSINOK),MESSINOK
         BAL   R9,PUTCON
         B     GETOPT
* PROBLEM OCCURRED WHILE INITIALIZING THE FILE
GDSEND   EQU   *
INITPROB EQU   *
         MVC   MESSAGE,MESSAGE-1
         MVC   MESSAGE(L'MESSINIT),MESSINIT
         UNPK  MESSAGE+29(2),RETNCODE DISPLAY RETURN CODE
         MVZ   MESSAGE+30(1),SIGN
         STC   R15,FULL
         UNPK  DOUBLE(3),FULL(2)
         MVC   MESSAGE+36(2),DOUBLE   R15 VALUE
         L     R13,=A(SAV$$REG)
         SHOWCB RPL=GDSRPLS,AREA=FULL,LENGTH=4,FIELDS=FDBK
         LTR   R15,R15
         BNZ   *+16
         UNPK  DOUBLE(3),FULL+3(2)
         MVC   MESSAGE+44(2),DOUBLE   FEEDBACK VALUE
         BAL   R9,PUTCON
         B     ENDJOB
         EJECT
* CONSTANTS AND WORK AREAS
         LTORG
HIVALUE  EQU   X'FF'
EOR      EQU   X'FF'
MINUS    EQU   C'-'
VER      EQU   C'V'
BLANK    EQU   C' '
FSIGN    EQU   X'F0'
CREATE   DC    C'CREATE'
DELETE   DC    C'DELETE'
READ     DC    C'READ'
WRITE    DC    C'WRITE'
STATUS   DC    C'STATUS'
BLANKS   DC    CL10' '
ZERO     DC    P'0'
ONE      DC    P'1'
SIGN     DC    X'FC'
DOUBLE   DS    D
FULL     DS    F
DLMLOC   DS    F
HOLDR9   DS    F
RPLUSED  DS    F
MAXVERSN DC    P'10'
RETNCODE DC    PL2'0'
CURDATE  DS    CL6 MMDDYY
CURTIME  DS    CL4 HHMM
CURJOB   DS    CL8 CURRENT JOB EXECUTING
WORK     DS    CL6
REQVER   DS    PL2
WORKVER  DS    PL2
CARDIN   DS    CL80
         DC    X'FF' <== MUST FOLLOW CARDIN
* REFORMATTED REQUEST OPTION
         DC    C' '
WAREA    DS    0CL49
WGDSID   DS    CL8
WCOMMAND DS    CL8   CREATE, DELETE, USED, SELECT, STATUS
WSIGN    DS    CL1   +/- (+ ASSUMED), OR 'V' FOR EXACT VERSION
WVERSION DS    PL2
WDESCR   DS    CL30
* GDS MASTER RECORD
         DC    C' '
GDSDATA  DS    0CL60
GGDSID   DS    CL8
GCURVER  DS    PL2   CURRENT VERSION
GMAXVER  DS    PL2   MAX # OF VERSIONS (MAX 10)
GDATE    DS    CL6   DATE LAST VERSION CREATED
GTIME    DS    CL4   TIME LAST VERSION CREATED (HHMM)
GJOB     DS    CL8   JOB THAT LAST UPDATED GDS
GDESCR   DS    CL30
         ORG   GDSDATA+60
         DC    C' '
MESSAGE  DS    CL70
*                ....5...10...15...20...25...30...35...40...45...50
MESSINIT DC    C'ERROR  => FILE INIT PROB. RC=  ,R15=  ,FDBK=  '
MESSINOK DC    C'FILE INITIALIZED SUCESSFULLY'
MESSRTN  DC    C'RETURN => XX OF XX MM/DD/YY HH:MM RC=XX'
MESSDUP  DC    C'ERROR  => ATTEMPTING TO DUPLICATE GDS.'
MESSNRF  DC    C'ERROR  => NO GDS RECORD FOUND.'
MESSOVM  DC    C'ERROR  => VERSIONS > 10.'
MESSINP  DC    C'ERROR  => INPUT REJECTED.'
MESSVER  DC    C'ERROR  => VERSION TOO HIGH.'
MESSNFL  DC    C'ERROR  => 1ST GDS NEVER WRITTEN.'
MESSNSGN DC    C'ERROR  => NO SIGN BEFORE VERSION.'
MESSDEL  DC    C'ABOVE GDS DELETED.'
RESPONSE DS    CL10
         EJECT
* * * * * USED TO LOCATE FIELD DELIMETERS
FIELDDLM EQU   *     0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    XL16'00000000000000000000000000000000' 0
         DC    XL16'00000000000000000000000000000000' 1
         DC    XL16'00000000000000000000000000000000' 2
         DC    XL16'00000000000000000000000000000000' 3
         DC    XL16'40000000000000000000000000000000' 4
         DC    XL16'00000000000000000000000000000000' 5
         DC    XL16'00000000000000000000000000000000' 6
         DC    XL16'00000000000000000000000000000000' 7
         DC    XL16'00000000000000000000000000000000' 8
         DC    XL16'00000000000000000000000000000000' 9
         DC    XL16'00000000000000000000000000000000' A
         DC    XL16'00000000000000000000000000000000' B
         DC    XL16'00000000000000000000000000000000' C
         DC    XL16'00000000000000000000000000000000' D
         DC    XL16'00000000000000000000000000000000' E
         DC    XL16'000000000000000000000000000000FF' F
* * * * * USED TO LOCATE FIELD STARTS
FIELDSTR EQU   *     0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    XL16'11111111111111111111111111111111' 0
         DC    XL16'11111111111111111111111111111111' 1
         DC    XL16'11111111111111111111111111111111' 2
         DC    XL16'11111111111111111111111111111111' 3
         DC    XL16'00111111111111111111111111111111' 4
         DC    XL16'11111111111111111111111111111111' 5
         DC    XL16'11111111111111111111111111111111' 6
         DC    XL16'11111111111111111111111111111111' 7
         DC    XL16'11111111111111111111111111111111' 8
         DC    XL16'11111111111111111111111111111111' 9
         DC    XL16'11111111111111111111111111111111' A
         DC    XL16'11111111111111111111111111111111' B
         DC    XL16'11111111111111111111111111111111' C
         DC    XL16'11111111111111111111111111111111' D
         DC    XL16'11111111111111111111111111111111' E
         DC    XL16'111111111111111111111111111111FF' F
         END   START


ZZGD01

ZZGD     TITLE 'CICS ZZGD01 - ACCESS GENERATION DATASET CONTROL FILE'
* THE PURPOSE OF THIS PROGRAM IS TO READ AND UPDATE THE GDS CONTROL
* FILE.  YOU CAN'T ADD OR DELETE, ONLY READ OR UPDATE.
*     CALLING TRANSACTION: ZZGD
*     INPUT:
*        USER: GDS-NAME OR USER CAN START AT BEGINNING OF FILE
*        FILE: ZZGDSK
*     MAPSET: ZZGDS01
*        MAPS: MAP01
*     NOTE:    COMPILED WITH OPTION 'NOPROLOG'
         PRINT NOGEN
         EJECT
* MACRO DEFINITIONS
         MACRO
&NAME    BLANK &TO,&COUNT
* MACRO      ==> BLANK
* PARAMETERS ==> &TO     = AREA TO BE BLANKED
*                &COUNT  = SIZE OF AREA TO BE BLANKED
* PURPOSE    ==> USED BY ASSEMBLER PROGRAMS TO BLANK AREAS
         LCLA  &B
&B       SETA  &COUNT-1
&NAME    MVI   &TO,C' '      BLANK FIRST POSITION
         MOVL  &TO+1,&TO,&B
* MACRO END BLANK
         MEND
         MACRO
&NAME    MOVL  &TO,&FROM,&COUNT
* MACRO      ==> MOVL
* PARAMETERS ==> &TO     = AREA TO BE MOVED TO
*                &FROM   = AREA TO BE MOVED FROM
*                &COUNT  = LENGTH OF MOVE
* PURPOSE    ==> USED BY ASSEMBLER PROGRAMS FOR MOVES > 256 BYTES
         GBLA  &A
         LCLA  &B
&B       SETA  &COUNT
.PN      ANOP
         AIF   (&B LE 256).DO
&NAME    MVC   &TO+&A.(256),&FROM+&A   256 BYTE MOVE
&A       SETA  &A+256
&B       SETA  &B-256
         MOVL  &TO,&FROM,&B
         MEXIT
.DO      ANOP
&NAME    MVC   &TO+&A.(&B),&FROM+&A    LESS THAN 256 BYTE MOVE
&A       SETA  0
* MACRO END MOVL
         MEND
         MACRO
         REGIS
* MACRO        ==> REGIS
* PARAMETERS   ==> NONE
* PURPOSE      ==> ASSIGN TAGS TO REGISTERS

Editor's note: register equates go here.

         MEND
         MACRO
&NAME    MOVLR &FLDS,&FLDE,&REGFROM,&REGTO
* MACRO      ==> MOVLR
* PARAMETERS ==> &FLDS    = START OF RECEIVING FIELD
*                &FLDE    = END OF RECEIVING FIELD
*                &REGFROM = REGISTER CONTAINING ADDRESS OF 'FROM' FIELD
*                &REGTO   = WORK REGISTER
* PURPOSE    ==> USED BY ASSEMBLER PROGRAMS TO MOVE AN AREA OF UNKNOWN
*                LENGTH TO A RECEIVING AREA. FROM AREA ADDRESS IS IN
*                A REGISTER
         LA    R1,&FLDE       END OF FIELD
         LA    &REGTO,&FLDS   START OF FIELD
         SR    R1,&REGTO
         LA    R1,1(R1)       R1 CONTAINS LENGTH OF FIELD
         B     *+22           BYPASS NEXT 4 INSTRUCTIONS
         SH    R1,=H'256'     DECREMENT R1 BY MAX MOVE LENGTH
         MVC   0(256,&REGTO),0(&REGFROM) MOVE MAX LENGTH
         LA    &REGTO,256(&REGTO)     INCREMENT POINTER
         LA    &REGFROM,256(&REGFROM) INCREMENT POINTER
         CH    R1,=H'256'     CHECK REMAINING LENGTH
         BNL   *-22           DO MAX MOVE
         CH    R1,=H'1'       CHECK REMAINING LENGTH
         BL    *+16           NO MORE LEFT
         BCTR  R1,0           DECREMENT LENGTH BY 1
         STC   R1,*+5         DO SHORT MOVE
         MVC   0(0,&REGTO),0(&REGFROM) LENGTH < 256
* MACRO END MOVLR
         MEND
         MACRO
&NAME    NULLS &FLDS,&FLDE,&REG
* MACRO      ==> NULLS
* PARAMETERS ==> &FLDS   = START OF FIELD TO RECEIVE NULLS
*                &FLDE   = END OF FIELD TO RECEIVE NULLS
*                &REG    = WORK REGISTER
* PURPOSE    ==> USED BY ASSEMBLER PROGRAMS TO MOVE NULLS (X'00')
*                TO AN AREA (USEFULL FOR CICS SCREENS)
         LA    R1,&FLDE       END OF FIELD
         LA    &REG,&FLDS     START OF FIELD
         SR    R1,&REG
         LA    R1,1(R1)       R1 CONTAINS LENGTH OF FIELD
         B     *+18           BYPASS NEXT 3 INSTRUCTIONS
         SH    R1,=H'256'     DECREMENT R1 BY MAX MOVE LENGTH
         XC    0(256,&REG),0(&REG) SET TO NULLS (LENGTH = 256)
         LA    &REG,256(&REG) INCREMENT POINTER
         CH    R1,=H'256'     CHECK REMAINING LENGTH
         BNL   *-18           DO MAX MOVE
         CH    R1,=H'1'       CHECK REMAINING LENGTH
         BL    *+16           NO MORE LEFT
         BCTR  R1,0           DECREMENT LENGTH BY 1
         STC   R1,*+5         DO SHORT MOVE
         XC    0(0,&REG),0(&REG) SET TO NULLS (LENGTH < 256)
* MACRO END NULLS
         MEND
         EJECT
* DEFINE DYNAMIC STORAGE
DFHEISTG DSECT
         DFHEISTG             NEEDED BECAUSE OF OPTION 'NOPROLOG'
* C O M M A R E A
COMAREAS DS    0H       START OF COMMAREA
* GDS MASTER RECORD
GDSDATA  DS    0CL60
GGDSID   DS    CL8
GCURVER  DS    PL2   CURRENT VERSION
GMAXVER  DS    PL2   MAX # OF VERSIONS (MAX 10)
GDATE    DS    CL6   DATE LAST VERSION CREATED
GTIME    DS    CL4   TIME LAST VERSION CREATED (HHMM)
GJOB     DS    CL8   JOB THAT LAST UPDATED GDS
GDESCR   DS    CL30
         ORG   GDSDATA+60
GDSID    DS    CL8      REQUESTED GDS-ID
PREVKEY  DS    CL8      PREVIOUS KEY (FOR FILE BROWSING)
COMAREAE DS    0H       END OF COMMAREA
OPERID   DS    CL3
TIME     DS    PL8      ABSOLUTE TIME
CURDATE  DS    CL10
CURTIME  DS    CL8
UPDATE   DS    CL1      IF 'ON' A FIELD HAS BEEN UPDATED
* CHANGE INFO
WCURVER  DS    CL2   CURRENT VERSION
WMAXVER  DS    CL2   MAX # OF VERSIONS (MAX 10)
WDESCR   DS    CL30
WDESCHG  DS    CL1   IF 'ON' DESCRIPTION WAS CHANGED
WCURCHG  DS    CL1   IF 'ON' CURRENT VER WAS CHANGED
WMAXCHG  DS    CL1   IF 'ON' MAX VER WAS CHANGED
HOLD10   DS    F
HOLD10A  DS    F
HOLD10B  DS    F
HOLD10C  DS    F
YEAR     DS    F
COMLEN   DS    H        COMMAREA LENGTH
         EJECT
         COPY  ZZGDS01             MAP COPYBOOK
         DFHEIEND
         EJECT
***           MAINLINE        ***
         REGIS
ZZGD01   DFHEIENT CODEREG=(3,5),DATAREG=(11,12),EIBREG=(6)
         CLC   EIBCALEN,=H'0'     CHECK FOR 1ST TIME ENTRY
         BH    COMRETND            ... RETURN TRANSID
         SPACE 3
* 1ST TIME IN PROGRAM
         BAL   R10,CLEARMAP
         BAL   R10,SETTIME
         BLANK GDSID,8
         BLANK GGDSID,8
         BLANK PREVKEY,8
         MVC   SM1DATEO,CURDATE
         MVC   SM1TIMEO,CURTIME
         EXEC  CICS SEND MAP('MAP01') MAPSET('ZZGDS01') ERASE FREEKB
         B     RETURN              RETURN WITH COMMAREA
         SPACE 3
* NOT THE FIRST TIME IN PROGRAM
COMRETND EQU   *
         L     R10,DFHEICAP    ADDRESSABILITY TO COMMAREA
         ST    R13,DFHEIR13
         MOVLR COMAREAS,COMAREAE,R10,R13
         L     R13,DFHEIR13
         SPACE 2
* CHECK FOR INITIAL FILE INPUT DATA
         MVC   GDSID,GGDSID    THIS IS THE KEY CURRENTLY DISPLAYED
         EXEC  CICS HANDLE CONDITION MAPFAIL(ERMAPFL) ERROR(ERMISC)    X
               LENGERR(ERLENTH)
         EXEC  CICS HANDLE AID PF2(RECFIRST) PF4(EXIT)                 X
               PF7(RECPREV) PF8(RECNEXT) PF9(RECUPDAT)
         EXEC  CICS RECEIVE MAP('MAP01') MAPSET('ZZGDS01')
         SPACE 2
* ASKING FOR SPECIFIC GDS?
         OC    SGDSIDI,SGDSIDI    WAS GDSID ENTERED?
         BZ    *+10                 ... NO  - RETAIN PREVIOUS REQUEST
         MVC   GDSID,SGDSIDI        ... YES - POST NEW REQUEST
         B     GETNEXT
         SPACE 2
* WANT FIRST GDS RECORD
RECFIRST EQU   *
         MVC   GDSID,LOVALUES
         B     GETNEXT
         SPACE 2
* WANT NEXT GDS RECORD
RECNEXT  EQU   *
         MVC   GDSID,GGDSID       ID OF CURRENT RECORD
         EXEC  CICS HANDLE CONDITION NOTFND(RNENDBR) NOTOPEN(ERNOTOPN) X
               ENDFILE(ENDNEXT)
         EXEC  CICS STARTBR DATASET('ZZGDSK') RIDFLD(GDSID)
         EXEC  CICS READNEXT DATASET('ZZGDSK') INTO(GDSDATA)           X
               RIDFLD(GDSID) LENGTH(RECLENTH)
         CLC   GGDSID,PREVKEY  SAME KEY AS PREVIOUS ONE?
         BNE   RNENDBR         ... NO
         EXEC  CICS READNEXT DATASET('ZZGDSK') INTO(GDSDATA)           X
               RIDFLD(GDSID) LENGTH(RECLENTH)
RNENDBR  EXEC  CICS ENDBR DATASET('ZZGDSK')
         MVC   PREVKEY,GGDSID
         BAL   R10,MAPBUILD
         EXEC  CICS SEND MAP('MAP01') MAPSET('ZZGDS01') ERASE FREEKB
         MVC   SMESSAGO,BLANKS
         B     RETURN
ENDNEXT  EXEC  CICS ENDBR DATASET('ZZGDSK')
         MVI   PREVKEY,HIVALUE
         BAL   R10,CLEARMAP
         MVC   MESSAGS(L'MESS07),MESS07
         B     DISPERR
         SPACE 2
* WANT PREVIOUS GDS RECORD
RECPREV  EQU   *
         MVC   GDSID,GGDSID       GET CURRENT KEY
         EXEC  CICS HANDLE CONDITION NOTFND(RPENDBR) NOTOPEN(ERNOTOPN) X
               ENDFILE(ENDPREV)
         EXEC  CICS STARTBR DATASET('ZZGDSK') RIDFLD(GDSID)
         EXEC  CICS READPREV DATASET('ZZGDSK') INTO(GDSDATA)           X
               RIDFLD(GDSID) LENGTH(RECLENTH)
         CLC   GGDSID,PREVKEY  SAME KEY AS PREVIOUS ONE?
         BNE   RPENDBR         ... NO
         EXEC  CICS READPREV DATASET('ZZGDSK') INTO(GDSDATA)           X
               RIDFLD(GDSID) LENGTH(RECLENTH)
RPENDBR  EXEC  CICS ENDBR DATASET('ZZGDSK')
         MVC   PREVKEY,GGDSID
         BAL   R10,MAPBUILD
         EXEC  CICS SEND MAP('MAP01') MAPSET('ZZGDS01') ERASE FREEKB
         MVC   SMESSAGO,BLANKS
         B     RETURN
ENDPREV  EXEC  CICS ENDBR DATASET('ZZGDSK')
         MVI   PREVKEY,HIVALUE
         BAL   R10,CLEARMAP
         MVC   MESSAGS(L'MESS08),MESS08
         B     DISPERR
         SPACE 2
* WANT TO UPDATE THE GDS
RECUPDAT EQU   *
         MVI   UPDATE,OFF         OFF UNTIL A VALID CHANGE
         MVI   WDESCHG,OFF
         MVI   WCURCHG,OFF
         MVI   WMAXCHG,OFF
         MVC   GDSID,GGDSID
         MVC   WDESCR,GDESCR      INITIALLY ASSUME THAT NONE OF THE
         UNPK  WMAXVER,GMAXVER     .. FIELDS WILL BE UPDATED AND
         MVZ   WMAXVER+1(1),SIGN   .. USE DATA FROM MASTER RECORD
         UNPK  WCURVER,GCURVER     .. FOR DISPLAY.
         MVZ   WCURVER+1(1),SIGN
         SPACE 1
* SAVE DESCRIPTION CHANGE IF ANY
         OC    SDESCRI,SDESCRI    WAS FIELD ENTERED?
         BZ    *+14                 ... NO
         MVC   WDESCR,SDESCRI       ... YES, MAKE CHANGE
         MVI   WDESCHG,ON
         CLI   SDESCRF,DFHBMEOF   WAS FIELD ERASED?
         BNE   *+14                 ... NO
         MVC   WDESCR,BLANKS        ... YES, THEN BLANK IT
         MVI   WDESCHG,ON
         SPACE 1
* SAVE MAX VERSION CHANGE IF ANY
         OC    SMAXVERI,SMAXVERI  WAS FIELD ENTERED?
         BZ    *+14                 ... NO
         MVC   WMAXVER,SMAXVERI
         MVI   WMAXCHG,ON
         SPACE 1
* SAVE CURRENT VERSION CHANGE IF ANY
         OC    SCURVERI,SCURVERI  WAS FIELD ENTERED?
         BZ    *+14                 ... NO
         MVC   WCURVER,SCURVERI
         MVI   WCURCHG,ON
         SPACE 1
* GET RECORD
         EXEC  CICS HANDLE CONDITION NOTFND(ERNOTFND) NOTOPEN(ERNOTOPN)
         EXEC  CICS READ DATASET('ZZGDSK') INTO(GDSDATA) RIDFLD(GDSID) X
               LENGTH(RECLENTH) EQUAL UPDATE
         MVC   PREVKEY,GGDSID
         BAL   R10,CLEARMAP
         BAL   R10,SETTIME
* APPLY CHANGES
         SPACE 1
* DESCRIPTION
         CLI   WDESCHG,ON         WAS THERE A CHANGE?
         BNE   RECUBDES            ... NO
         MVC   GDESCR,WDESCR      APPLY CHANGE TO RECORD
         MVI   UPDATE,ON
RECUBDES EQU   *
         SPACE 1
* MAXIMUM VERSION
         CLI   WMAXCHG,ON         WAS THERE A CHANGE?
         BE    *+20                ... YES
         UNPK  WMAXVER,GMAXVER     ... NO, POST ORIGINAL DATA
         MVZ   WMAXVER+1(1),SIGN
         B     RECUBMAX
         MVZ   TWOZEROS,WMAXVER
         CLC   TWOZEROS,C00
         BE    *+14               IT'S NUMERIC
         MVC   SERRMAXO,MESS20
         B     RECUBMAX
         CLC   WMAXVER,=C'10'
         BNH   *+14
         MVC   SERRMAXO,MESS22
         B     RECUBMAX
         PACK  GMAXVER,WMAXVER    APPLY CHANGE TO RECORD
         MVN   GMAXVER+1(1),SIGN
         MVI   UPDATE,ON
RECUBMAX EQU   *
         SPACE 1
* CURRENT VERSION
         CLI   WCURCHG,ON         WAS THERE A CHANGE?
         BNE   RECUBCUR            ... NO
         MVZ   TWOZEROS,WCURVER
         CLC   TWOZEROS,C00
         BE    *+14               IT'S NUMERIC
         MVC   SERRCURO,MESS20
         B     RECUBCUR
         PACK  WORKA,WCURVER
         MVN   WORKA+3(1),SIGN
         CP    WORKA,GMAXVER       CURRENT VERSION CAN'T EXCEED MAX
         BNH   *+14
         MVC   SERRCURO,MESS21
         B     RECUBCUR
         ZAP   GCURVER,WORKA      APPLY CHANGE TO RECORD
         MVI   UPDATE,ON
RECUBCUR EQU   *
         SPACE 1
         CLI   UPDATE,ON
         BNE   NOUPDATE           NOTHING VALIDLY UPDATED
         MVC   GDATE(2),CURDATE
         MVC   GDATE+2(2),CURDATE+3
         MVC   GDATE+4(2),CURDATE+8
         MVC   GTIME(2),CURTIME
         MVC   GTIME+2(2),CURTIME+3
         MVC   GJOB,BLANKS
         EXEC  CICS ASSIGN OPID(OPERID)
         MVC   GJOB(4),=C'CICS'
         MVC   GJOB+4(3),OPERID
         BAL   R10,MAPBUILD  GO BUILD MAP
         MVC   SDESCRO,WDESCR     PUT CHANGES (IF ANY) TO SCREEN
         MVC   SMAXVERO,WMAXVER
         MVC   SCURVERO,WCURVER
         BLANK MESSAGS,50
         MVC   MESSAGS(L'MESS06),MESS06
         MVC   SMESSAGO,MESSAGS
         EXEC  CICS REWRITE DATASET('ZZGDSK') FROM(GDSDATA)
         B     PUTUPSCR
* NO UPDATING IS TAKING PLACE. RELEASE HOLD ON RECORD.
NOUPDATE EQU   *
         BAL   R10,MAPBUILD  GO BUILD MAP
         MVC   SDESCRO,WDESCR     PUT CHANGES (IF ANY) TO SCREEN
         MVC   SMAXVERO,WMAXVER
         MVC   SCURVERO,WCURVER
         EXEC  CICS UNLOCK DATASET('ZZGDSK')
         B     PUTUPSCR
PUTUPSCR BAL   R10,SETTIME
         MVC   SM1DATEO,CURDATE
         MVC   SM1TIMEO,CURTIME
         EXEC  CICS SEND MAP('MAP01') MAPSET('ZZGDS01') ERASE FREEKB
         B     RETURN
         SPACE 2
* READ THE GDS FILE
         SPACE 2
* NO UPDATE, ACCEPT GT OR EQ
GETNEXT  EQU   *
         EXEC  CICS HANDLE CONDITION NOTFND(ERNOTFND) NOTOPEN(ERNOTOPN)
         EXEC  CICS READ DATASET('ZZGDSK') INTO(GDSDATA) RIDFLD(GDSID) X
               LENGTH(RECLENTH) GTEQ
         MVC   PREVKEY,GGDSID
         BAL   R10,MAPBUILD  GO BUILD MAP
         EXEC  CICS SEND MAP('MAP01') MAPSET('ZZGDS01') ERASE FREEKB
         B     RETURN
         SPACE 2
* SET TIME AND POST TO MAP
SETTIME  EQU   *
         ST    R10,HOLD10A
         EXEC  CICS ASKTIME ABSTIME(TIME)
         EXEC  CICS FORMATTIME ABSTIME(TIME)                           X
               MMDDYY(CURDATE) YEAR(YEAR) DATESEP('/')                 X
               TIME(CURTIME) TIMESEP(':')
         L     R10,YEAR
         CVD   R10,DOUBLE
         UNPK  CURDATE+6(4),DOUBLE
         MVZ   CURDATE+9(1),SIGN
         L     R10,HOLD10A
         BR    R10
         SPACE 2
* CLEAR MESSAGE AREA
CLEARMSG EQU   *
         ST    R10,HOLD10B
         MVI   SMESSAGO,BLANK      CLEAR ERROR FIELD
         MVC   SMESSAGO+1(L'SMESSAGO-1),SMESSAGO
         L     R10,HOLD10B
         BR    R10
         SPACE 2
* CLEAR MAP
CLEARMAP EQU   *
         ST    R10,HOLD10C
         NULLS MAP01O,ZZGDS01T,R10
         L     R10,HOLD10C
         BR    R10
         SPACE 2
* SET UP DISPLAY
MAPBUILD EQU   *
         ST    R10,HOLD10
         BAL   R10,CLEARMSG
         BAL   R10,SETTIME        RESET AND POST DATE/TIME
         MVC   SM1DATEO,CURDATE
         MVC   SM1TIMEO,CURTIME
         MVC   SGDSIDO,GGDSID
         MVC   SDESCRO,GDESCR
         UNPK  SCURVERO,GCURVER
         MVZ   SCURVERO+1,SCURVERO
         UNPK  SMAXVERO,GMAXVER
         MVZ   SMAXVERO+1,SMAXVERO
         MVC   SDATLSTO+2(4),=C'/  /'
         MVC   SDATLSTO(2),GDATE
         MVC   SDATLSTO+3(2),GDATE+2
         MVC   SDATLSTO+6(2),GDATE+4
         MVI   STIMUPDO+2,C':'
         MVC   STIMUPDO(2),GTIME
         MVC   STIMUPDO+3(2),GTIME+2
         MVC   SLSTJOBO,GJOB
         L     R10,HOLD10
         BR    R10
         EJECT
* EXIT PROGRAM
         SPACE 2
* EXPECT TO COME BACK
RETURN   EQU   *
         MVC   COMLEN,=AL2(COMAREAE-COMAREAS) LENGTH OF COMMAREA
         EXEC  CICS RETURN TRANSID('ZZGD') COMMAREA(COMAREAS)          X
               LENGTH(COMLEN)
         SPACE 3
* EXIT TRANSACTION (RETURN TO CICS)
EXIT     EQU   *
         EXEC  CICS SEND CONTROL ERASE FREEKB
         EXEC  CICS RETURN
         SPACE 3
         EJECT
* ERROR HANDLING ROUTINES
         SPACE 2
* NO RECORD FOUND
ERNOTFND EQU   *
         MVC   MESSAGS(L'MESS01),MESS01
         B     DISPERR
         SPACE 2
* FILE 'ZZGDSK' NOT OPEN
ERNOTOPN EQU   *
         MVC   MESSAGS(L'MESS02),MESS02
         B     DISPERR
         SPACE 2
* MAP FAIL
ERMAPFL  EQU   *
         BAL   R10,CLEARMSG       CLEAR MESSAGE AREA
         MVC   MESSAGS(L'MESS03),MESS03
         MVC   SMESSAGO,MESSAGS
         BAL   R10,SETTIME
         MVC   SM1DATEO,CURDATE
         MVC   SM1TIMEO,CURTIME
         EXEC  CICS SEND MAP('MAP01') MAPSET('ZZGDS01') FREEKB FRSET
         B     RETURN             COME BACK TO INITIAL SCREEN
         SPACE 2
* MISCELLANEOUS ERROR
ERMISC   EQU   *
         EXEC  CICS HANDLE CONDITION ERROR
         MVC   MESSAGS(L'MESS04),MESS04
         B     DISPERR
         SPACE 2
* FILE LENGTH ERROR
ERLENTH  EQU   *
         MVC   MESSAGS(L'MESS05),MESS05
         B     DISPERR
         SPACE 2
* AN ERROR HAS OCCURRED. DISPLAY APPROPRIATE MESSAGE.
DISPERR  EQU   *
         BAL   R10,CLEARMAP       CLEAR MAP
         MVC   SGDSIDO,GDSID
         MVC   SMESSAGO,MESSAGS    MOVE MESSAGE TO OUTPUT
         BLANK MESSAGS,50
         BAL   R10,SETTIME
         MVC   SM1DATEO,CURDATE
         MVC   SM1TIMEO,CURTIME
         EXEC  CICS SEND MAP('MAP01') MAPSET('ZZGDS01') FREEKB
         B     RETURN
         EJECT
* CONSTANTS AND WORK AREAS
         LTORG
TWOZEROS DC    C'00'
C00      DC    C'00'
C99      DC    C'99'
LOVALUES DC    8X'00'
HIVALUES DC    2X'FF'
RECLENTH DC    H'60'
DOUBLE   DS    D
SIGN     DC    X'FC'
ZERO     DC    P'0'
ONE      DC    P'1'
WORKA    DS    CL4
BLANKS   DC    CL30' '
BLANK    EQU   C' '
HIVALUE  EQU   X'FF'
ON       EQU   X'FF'
OFF      EQU   X'00'
* ERROR MESSAGES
MESS01   DC    C'NO RECORD FOUND FOR THIS KEY'
MESS02   DC    C'ZZGDSK FILE NOT OPEN'
MESS03   DC    C'MAP FAIL, PRESS CLEAR THEN REENTER DATA'
MESS04   DC    C'MISCELLANEOUS ERROR'
MESS05   DC    C'FILE LENGTH ERROR'
MESS06   DC    C'RECORD HAS BEEN UPDATED'
MESS07   DC    C'READING > LAST RECORD, PRESS PF7 TO GET LAST'
MESS08   DC    C'READING < FIRST RECORD, PRESS PF8 TO GET FIRST'
MESS20   DC    CL20'ERROR - NOT NUMERIC'
MESS21   DC    CL20'ERROR - > MAX'
MESS22   DC    CL20'ERROR - > 10'
MESSAGS  DS    CL50
         EJECT
         PRINT GEN
         COPY  DFHBMSCA
         COPY  DFHAID
         END   ZZGD01


ZZGDS01

* MAPSET=ZZGDS01  MAP=MAP01    NAME=VSAM GENERATION DATA SETS
ZZGDS01  DFHMSD TYPE=&SYSPARM,MODE=INOUT,CTRL=(FREEKB,FRSET),          X
               TIOAPFX=YES,STORAGE=AUTO,LANG=ASM
MAP01    DFHMDI SIZE=(24,80),LINE=1,COLUMN=1,MAPATTS=(COLOR,HILIGHT),  X
               DSATTS=(COLOR,HILIGHT),EXTATT=YES
SPROGID  DFHMDF LENGTH=006,POS=(01,01),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP),                                          X
               INITIAL='ZZGD01'
         DFHMDF LENGTH=040,POS=(01,17),                                X
               COLOR=NEUTRAL,HILIGHT=REVERSE,                          X
               ATTRB=(BRT,ASKIP),                                      X
               INITIAL=' Y O U R    C O M P A N Y    N A M E    '
         DFHMDF LENGTH=001,POS=(01,59),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP)
         DFHMDF LENGTH=005,POS=(01,64),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP),                                          X
               INITIAL='DATE:'
SM1DATE  DFHMDF LENGTH=010,POS=(01,70),                                X
               COLOR=NEUTRAL,HILIGHT=REVERSE,                          X
               ATTRB=(BRT,ASKIP),                                      X
               INITIAL='MM/DD/YYYY'
         DFHMDF LENGTH=011,POS=(02,01),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(FSET,ASKIP),                                     X
               INITIAL='ZZGDS01(01)'
         DFHMDF LENGTH=008,POS=(02,31),                                X
               COLOR=YELLOW,HILIGHT=REVERSE,                           X
               ATTRB=(BRT,ASKIP),                                      X
               INITIAL=' V S A M'
         DFHMDF LENGTH=001,POS=(02,41),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP)
         DFHMDF LENGTH=005,POS=(02,64),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP),                                          X
               INITIAL='TIME:'
SM1TIME  DFHMDF LENGTH=008,POS=(02,70),                                X
               COLOR=NEUTRAL,HILIGHT=REVERSE,                          X
               ATTRB=(BRT,ASKIP),                                      X
               INITIAL='HH:MM:SS'
         DFHMDF LENGTH=001,POS=(02,79),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP)
         DFHMDF LENGTH=042,POS=(03,16),                                X
               COLOR=YELLOW,HILIGHT=REVERSE,                           X
               ATTRB=(BRT,ASKIP),                                      X
               INITIAL=' G E N E R A T I O N    D A T A    S E T S'
         DFHMDF LENGTH=001,POS=(03,60),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP)
         DFHMDF LENGTH=029,POS=(06,05),                                X
               COLOR=BLUE,HILIGHT=REVERSE,                             X
               ATTRB=(ASKIP),                                          X
               INITIAL='GDS-NAME.....................'
         DFHMDF LENGTH=001,POS=(06,35),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP)
SGDSID   DFHMDF LENGTH=008,POS=(06,38),                                X
               COLOR=GREEN,HILIGHT=UNDERLINE,                          X
               ATTRB=(BRT,UNPROT,IC),                                  X
               INITIAL='        '
         DFHMDF LENGTH=001,POS=(06,47),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP)
         DFHMDF LENGTH=029,POS=(08,05),                                X
               COLOR=BLUE,HILIGHT=REVERSE,                             X
               ATTRB=(ASKIP),                                          X
               INITIAL='DESCRIPTION..................'
         DFHMDF LENGTH=001,POS=(08,35),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP)
SDESCR   DFHMDF LENGTH=030,POS=(08,38),                                X
               COLOR=GREEN,HILIGHT=UNDERLINE,                          X
               ATTRB=(BRT,UNPROT),                                     X
               INITIAL='                              '
         DFHMDF LENGTH=001,POS=(08,69),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP)
         DFHMDF LENGTH=029,POS=(10,05),                                X
               COLOR=BLUE,HILIGHT=REVERSE,                             X
               ATTRB=(ASKIP),                                          X
               INITIAL='CURRENT VERSION..............'
         DFHMDF LENGTH=001,POS=(10,35),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP)
SCURVER  DFHMDF LENGTH=002,POS=(10,38),                                X
               COLOR=GREEN,HILIGHT=UNDERLINE,                          X
               ATTRB=(BRT,NUM)
         DFHMDF LENGTH=001,POS=(10,41),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP)
SERRCUR  DFHMDF LENGTH=020,POS=(10,47),                                X
               COLOR=RED,HILIGHT=BLINK,                                X
               ATTRB=(BRT,ASKIP),                                      X
               INITIAL='                    '
         DFHMDF LENGTH=001,POS=(10,68),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP)
         DFHMDF LENGTH=029,POS=(12,05),                                X
               COLOR=BLUE,HILIGHT=REVERSE,                             X
               ATTRB=(ASKIP),                                          X
               INITIAL='MAXIMUM NUMBER OF VERSIONS...'
         DFHMDF LENGTH=001,POS=(12,35),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP)
SMAXVER  DFHMDF LENGTH=002,POS=(12,38),                                X
               COLOR=GREEN,HILIGHT=UNDERLINE,                          X
               ATTRB=(BRT,NUM)
         DFHMDF LENGTH=001,POS=(12,41),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP)
SERRMAX  DFHMDF LENGTH=020,POS=(12,47),                                X
               COLOR=RED,HILIGHT=BLINK,                                X
               ATTRB=(BRT,ASKIP),                                      X
               INITIAL='                    '
         DFHMDF LENGTH=001,POS=(12,68),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP)
         DFHMDF LENGTH=029,POS=(14,05),                                X
               COLOR=BLUE,HILIGHT=REVERSE,                             X
               ATTRB=(ASKIP),                                          X
               INITIAL='DATE LAST VERSION CREATED....'
         DFHMDF LENGTH=001,POS=(14,35),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP)
SDATLST  DFHMDF LENGTH=008,POS=(14,38),                                X
               COLOR=NEUTRAL,HILIGHT=OFF,                              X
               ATTRB=(BRT,ASKIP)
         DFHMDF LENGTH=001,POS=(14,47),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP)
         DFHMDF LENGTH=029,POS=(16,05),                                X
               COLOR=BLUE,HILIGHT=REVERSE,                             X
               ATTRB=(ASKIP),                                          X
               INITIAL='TIME LAST VERSION UPDATED....'
         DFHMDF LENGTH=001,POS=(16,35),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP)
STIMUPD  DFHMDF LENGTH=005,POS=(16,38),                                X
               COLOR=NEUTRAL,HILIGHT=OFF,                              X
               ATTRB=(BRT,ASKIP)
         DFHMDF LENGTH=001,POS=(16,44),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP)
         DFHMDF LENGTH=029,POS=(18,05),                                X
               COLOR=BLUE,HILIGHT=REVERSE,                             X
               ATTRB=(ASKIP),                                          X
               INITIAL='JOB THAT LAST UPDATED GDS....'
         DFHMDF LENGTH=001,POS=(18,35),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP)
SLSTJOB  DFHMDF LENGTH=008,POS=(18,38),                                X
               COLOR=NEUTRAL,HILIGHT=OFF,                              X
               ATTRB=(BRT,ASKIP),                                      X
               INITIAL='        '
         DFHMDF LENGTH=001,POS=(18,47),                                X
               COLOR=BLUE,HILIGHT=OFF,                                 X
               ATTRB=(ASKIP)
SMESSAG  DFHMDF LENGTH=050,POS=(22,01),                                X
               COLOR=RED,HILIGHT=BLINK,                                X
               ATTRB=(BRT,ASKIP)
         DFHMDF LENGTH=054,POS=(23,01),                                X
               COLOR=PINK,HILIGHT=OFF,                                 X
               ATTRB=(BRT,ASKIP),                                      X
               INITIAL='ENTER GDS-ID AND PRESS ENTER OR USE APPROPRIATE*
                PF KEY'
         DFHMDF LENGTH=001,POS=(23,56),                                X
               COLOR=PINK,HILIGHT=OFF,                                 X
               ATTRB=(BRT,ASKIP)
         DFHMDF LENGTH=074,POS=(24,01),                                X
               COLOR=PINK,HILIGHT=REVERSE,                             X
               ATTRB=(BRT,ASKIP),                                      X
               INITIAL=' PF2=1ST-RECORD   4=EXIT   7=PREVIOUS-RECORD   X
               8=NEXT-RECORD   9=UPDATE   '
         DFHMDI TYPE=FINAL
         END

Angelo Sileo
Manager Technical Services
Patrick Media Group (USA)                         c Angelo Sileo 1992

