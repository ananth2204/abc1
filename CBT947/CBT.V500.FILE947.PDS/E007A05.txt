System unit record file reset

This program offers a solution to the problem that occurs when
a system unit record file, SYSRDR, SYSIPT, SYSPCH, or
SYSLST, is reassigned to disk (or tape) and the job cancels
leaving the system file opened to the wrong device or possibly
unassigned.

This program uses a $JOBACCT exit program to scan the
assignments for the first four LUBTAB positions and, when
necessary, reset the assignment using the MSAT macro.

The first time the program is executed in a partition it stores the
current assignments in the standard job accounting user save
area. Subsequent executions compare the stored values with the
current assignment values. If an assignment (PUBTAB index)
is not equal to the value stored during the first execution, the
program uses the MSAT macro to set a new permanent
assignment equal to the original assignment.

The program uses the 1K user save area provided when VSE is
IPLed with job accounting support turned on. A minimal check
is done to make sure we can use this area. The initial value of
the area is all X'00'. If the program finds a value other than hex
zero or a flag value set by a previous execution of itself, it will
exit back to job control.

The program works on a VSE/SP Release 3 system. I don't
know if it will work on any other versions/releases of VSE.

The supervisor must be IPLed with job accounting support.

Be aware of any other job accounting exit programs. This
program may cause problems for them. If you are using a
specialized $JOBACCT program already, be very careful when
merging this code with your existing program.

This program must be link edited into IJSYSRS.SYSLIB to
replace the IBM supplied $JOBACCT.



         TITLE '$JOBACCT PROGRAM TO RESET SYS LUB ASSIGNMANTS AT EOJ'
         PUNCH ' PHASE $JOBACCT,S,NOAUTO,SVA'
JOBACCT CSECT
         USING *,R12
         B     JA0000                  JUMP AROUND EYECATCHER STUFF
         DC    C'$JOBACCT - RESET UNIT RECORD PERM ASSIGNMENTS '
         DC    C'MKOSANKE '
         DC    C'02/22/92 '
* +---------------------------------------------------------------+
* | ADDRESS DATA AREAS USED BY THE PROGRAM                        |
* | CHECK USER SAVE AREA, MAKE SURE WE CAN USE IT...              |
* +---------------------------------------------------------------+
JA0000   LR    R2,R15                  POINT R2 TO JOBACCT TABLE
         USING JATABLE,R2              ADDRESS JOBACCT TABLE
         USING JASAVEA,R13             ADDRESS JOBACCT SAVE AREA
         CLC   JASFLAG,=D'0'           CHECK FLAG AREA FOR ZEROS
         BE    JA0005                  CONTINUE PROCESSING
         CLC   JASFLAG,SYSAFLAG        CHECK FOR OUR CODE
         BNE   JA0099            EXIT, SOMEONE ELSE IS IN HERE???
* +---------------------------------------------------------------+
* | GETVIS FOR THE CCB USED LATER IN THE PROGRAM                  |
* | ADDRESS PARTITION COMM REG                                    |
* +---------------------------------------------------------------+
JA0005   LA    R0,GSIZE                LOAD SIZE OF GETVIS
         GETVIS LENGTH=(0)             GET SOME STORAGE
         LR    R11,R15                 SAVE RETURN CODE, CHECK LATER
         ST    R1,SAVEVIS              SAVE ADDRESS OF STORAGE
         COMRG ,                       MAKE COMM REG ADDRESABLE
         USING COMREG,R1               ADDRESS COMM REG
         ST    R1,SAVER1               SAVE R1 VALUE FOR RESTORE
* +---------------------------------------------------------------+
* | MAKE SURE WE ARE AT THE END OF THE VSE JOB                    |
* +---------------------------------------------------------------+
         TM    CCODE,X'EF'             CODE = 10 (NORMAL EOJ)
         BNZ   JA0010                  YES, GO CHECK STUFF
         CLI   RECTYPE,C'L'            CHECK FOR LAST STEP
         BNE   JA0095                  RETURN TO VSE
* +---------------------------------------------------------------+
* | GET INTO THE LUBTAB FOR THIS PARTITION                        |
* | R3 USED AS WORK REGISTER                                      |
* | R4 POINTS TO FIRST ENTRY IN SAVED VALUE TABLE                 |
* | R5 POINTS TO FIRST SYS LUB (SYSRDR)                           |
* | R7 USED AS A LOOP COUNTER AND WORK REGISTER                   |
* | R8 HOLDS LOGUNIT VALUE FOR MSAT MACRO                         |
* | R10 USED AS WORK REGISTER                                     |
* +---------------------------------------------------------------+
JA0010   LH    R7,PID                  PUT PIK IN R7
         SRL   R7,4                    SHIFT HI ORDER TO LOW ORDER
         LH    R3,FICLPT               FIRST IN CLASS POINTER
         AR    R3,R7                   GET INDEX TO PROGRAMMER LUB
         SR    R10,R10                 CLEAR R10 FOR NEW VALUE
         IC    R10,0(R3)               GET INDEX FROM FICL
         LH    R5,LUBPT                POINT TO LUBTAB
         AR    R5,R10                  TWO BYTES PER LUB
         AR    R5,R10                  NOW POINTS TO PROGRAMMER LUB
         LH    R6,NICLPT               GET NEXT IN CLASS LIST POINTER
         SR    R10,R10                 CLEAR WORK REG
         IC    R10,0(R6)               POINT TO SYSLUBS
         SR    R5,R10                  TWO BYTES PER LUB
         SR    R5,R10                  POINTING TO SYSLUBS
         LA    R8,0                    SET LOGUNIT IN MSAT MACRO
         LA    R7,4                    SET LOOP COUNTER
         LA    R4,STABLE               POINT TO CURRENT VALUES
JA0020   STH   R8,0(R4)                SAVE LOGUNIT NUMBER
         SR    R10,R10                 CLEAR WORK REG
         IC    R10,0(R5)               GET SYSIPT OFFSET
         STH   R10,2(R4)               SAVE INDEX TO PUB TAB
         SLL   R10,3                   EACH ENTRY HAS 8 BYTES
         LH    R15,PUBPT               POINT TO PUBTAB
         AR    R15,R10                 ADD OFFSET INTO PUB
         MVC   HALFWORD(2),0(R15)      SAVE CUU FOR CONVERT
         UNPK  PRINTHEX(5),HALFWORD(3) SET 4 BYTES.
         NC    PRINTHEX(4),=X'0F0F0F0F' KILL ZONE BITS
         TR    PRINTHEX(4),HEXTRT      TRANSLATE TO CHAR.
         MVC   4(4,R4),PRINTHEX        MOVE TO TABLE POSITION
         LA    R5,2(R5)                POINT TO NEXT LUB ENTRY
         LA    R4,8(R4)                POINT TO NEXT STABLE ENTRY
         LA    R8,1(R8)                POINT TO NEXT LOGUNIT
         BCT   R7,JA0020               LOOK AT NEXT LUB
* +---------------------------------------------------------------+
* | IF WE HAVE BEEN HERE BEFORE, CONTINUE AT JA0030               |
* | OTHERWISE STORE THE CURRENT VALUES AND SET OUR FLAG           |
* +---------------------------------------------------------------+
         CLC   JASFLAG(8),SYSAFLAG     CHECK FOR OUR CODE
         BE    JA0030                  GOOD STUFF, GO PROCESS
         MVC   JASFLAG(8),SYSAFLAG     INSERT OUR CODE
         MVC   JASASGN(32),STABLE      SAVE OUR PERM VALUES
         B     JA0095                  WAIT FOR NEXT PASS
* +---------------------------------------------------------------+
* | RESET INDEXES TO CURRENT AND STORED VALUE TABLES..            |
* +---------------------------------------------------------------+
JA0030   LA    R7,4                    LOAD LOOP COUNTER
         LA    R3,JASASGN              POINT TO STORED VALUES
         LA    R4,STABLE               POINT TO CURRENT VALUES
         LA    R9,SYSTABL              POINT TO SYS UNITS TABLE
* +---------------------------------------------------------------+
* | IF THIS ENTRY IS EQUAL TO STORED, CONTINUE AT JA0050          |
* | OTHERWISE, ASSIGN LOGUNIT TO ORIGINAL PHYUNIT...              |
* |            SET UP AND PRINT A MESSAGE                         |
* +---------------------------------------------------------------+
JA0040   CLC   2(2,R3),2(R4)           COMPARED STORED TO CURRENT
         BE    JA0050                  GO LOOK AT NEXT ENTRY
         MSAT  ID=NPM,LOGUNIT=(S,0(R3)),PHYUNIT=(S,2(R3))
         LTR   R11,R11                 CHECK RETURN CODE FROM GETVIS
         BNZ   JA0050                  GO EXIT ON NON-ZERO R11
         MVC   AMSG+3(3),0(R9)         MOVE SYS NUM RDR IPT PCH LST
         MVC   BMSG+3(3),0(R9)         MOVE SYS NUM RDR IPT PCH LST
         MVC   AMSG+25(3),5(R4)        MOVE CURRENT CUU
         MVC   AMSG+35(3),5(R3)        MOVE PERM CUU
         MVC   BMSG+21(3),5(R3)        MOVE PERM CUU
         LA    R2,LSTCCWA              GET REASSIGN MESSAGE ADDRESS
         CLI   3(R4),X'FE'             CHECK FOR NA OR IGN IN LUBTAB
         BL    JA0045                  GO USE REASSIGN MESSAGE
         LA    R2,LSTCCWB              GET ASSIGN MESSAGE ADDRESS
JA0045   L     R1,SAVEVIS              POINT R1 TO OUR STORAGE
         MVC   0(GSIZE,R1),LSTCCB      PUT CCB IN VIS
         STCM  R2,7,9(R1)              STICK MESSAGE ADDRESS INTO CCB
         EXCP  (1)                     PRINT REASSIGN INFO LINE
         WAIT  (1)
* +---------------------------------------------------------------+
* | POINT TO NEXT ENTRY AND LOOP BACK FOR ANOTHER CHECK           |
* +---------------------------------------------------------------+
JA0050   L     R1,SAVER1               RESET R1 TO COM REG
         LA    R3,8(R3)                POINT TO NEXT STORED ENTRY
         LA    R4,8(R4)                POINT TO NEXT CURRENT ENTRY
         LA    R9,3(R9)                POINT TO NEXT SYS NUM
         BCT   R7,JA0040               LOOK AT NEXT LUB
* +---------------------------------------------------------------+
* | FREE THE STORAGE WE REQUESTED EARLIER - AND EXIT TO JOB CTL   |
* +---------------------------------------------------------------+
JA0095   LTR   R11,R11                 CHECK RETURN CODE FROM GETVIS
         BNZ   JA0099                  GO EXIT ON NON-ZERO R11
         LA    R0,GSIZE                LOAD SIZE OF GETVIS
         L     R1,SAVEVIS              LOAD VIS ADDRESS
         FREEVIS LENGTH=(0)            RELEASE THE STORAGE
JA0099   SR    R15,R15                 CLEAR RETURN CODE REGISTER
         BR    R14                     RETURN TO CALLER
* +---------------------------------------------------------------+
* | CONSTANT AND VARIABLE STORAGE USED BY THIS PROGRAM            |
* +---------------------------------------------------------------+
         LTORG ,
         DS    0D
LSTCCB   CCB   SYSLST,*-*
GSIZE    EQU   *-LSTCCB
LSTCCWA  CCW   X'0B',*-*,X'40',1
         CCW   X'01',AMSG,X'00',L'AMSG
AMSG     DC    C'SYSXXX REASSIGNED FROM X''CUU'' TO X''CUU'''
LSTCCWB  CCW   X'0B',*-*,X'40',1
         CCW   X'01',BMSG,X'00',L'BMSG
BMSG     DC    C'SYSXXX ASSIGNED TO X''CUU'''
SAVEVIS  DS    F                  STORE ADDRESS FROM GETVIS
SAVER1   DS    F                  STORE ADDRESS OF PART COMM REG
HALFWORD DS    H                  USED TO CONVERT TO READABLE HEX
PRINTHEX DS    CL5                USED TO CONVERT TO READABLE HEX
HEXTRT   DC    C'0123456789ABCDEF' USED TO CONVERT TO READABLE HEX
SYSTABL  DC    C'RDRIPTPCHLST'    LIST OF VALUES FOR DISPLAY
SYSAFLAG DC    CL8'SYSASSGN'      FLAG OUR USER SAVE AREA
* +---------------------------------------------------------------+
* | JOB ACCOUNT TABLE                                             |
* +---------------------------------------------------------------+
JATABLE  CSECT
JOBNAME  DS    D       JOB NAME
USERINFO DS    2D      JOB USER INFORMATION
PARTID   DS    H       PARTITION ID
CCODE    DS    X       STEP CANCEL CODE
RECTYPE  DS    C       JA TABLE RECORD TYPE S OR L
* +---------------------------------------------------------------+
* | USER SAVE AREA                                                |
* +---------------------------------------------------------------+
JASAVEA  CSECT
JASFLAG  DS    D       SAVE AREA FLAG
JASASGN  DS    4D      NORMAL PERM ASSIGNS FOR RDR, IPT, PCH AND LST
STABLE   DS    4D      CURRENT PERM ASSIGNS FOR RDR, IPT, PCH AND LST
* +---------------------------------------------------------------+
* | COPY MEMBERS AND MACROS                                       |
* +---------------------------------------------------------------+
         MAPCOMR         MAPS COM REG
         DFHREGS         REGISTER EQUATE <FROM CICS>
         END JOBACCT

Monte L Kosanke
Consultant (USA)                        c Monte L Kosanke 1992

