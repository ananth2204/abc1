Displaying the VSE lock file

In order to find out what is holding up a VSE machine, it is
sometimes useful to know which machine is locking a
resource. The following EXEC and module will present this
information in a readable form.

I had originally intended to convert the whole thing to
Assembler after the logic was working correctly, but the
performance of the mixed REXX and Assembler seems to be
acceptable. Because full tracks are read, we find that a three-
cylinder lock file can be read in under half a minute.

To set up VSELOCK:

1      Assemble FLOCK

2      LOAD FLOCK

3      GENMOD FLOCK (DOS

4      Modify LINK machine and address in VSELOCK EXEC

5      Add your virtual machine CPU-ids to VSELOCK in vmid

6      Enter 'VSELOCK'.


VSELOCK EXEC

/*********************************
* Read and display VSE lock file *
*********************************/
               ... change 2 lines for your installation ...
owner = 'MAINT'      /* owner of Lock File in directory */
cuu =  'F41'         /* virtual address   ,,     ,,     */
address COMMAND
'ERASE VSE LOCK A'
'EXECIO * CP (SKIP STRING DET 100'
'EXECIO * CP (SKIP STRING LINK' owner cuu '100 RR READ'
'AC 100 Z'
'SET DOS ON'
'ASSGN SYS000 Z'
'DLBL LOCKFLE Z DSN DOS LOCK FILE (SYS000'
call 'FLOCK' 'LSTART','EXTENT'
lcc = c2d(left(lstart,2))
lhh = c2d(substr(lstart,3,2))
firstrec = 1         /* first record not yet read */
lr = 0
eof = 0
call 'FLOCK' 'LREC.',lcc,lhh,'1' /* read Lock File descriptor */
rec1 = lrec.1
trct = 1             /* count of tracks read */
ncpus = c2d(substr(rec1,3,2))    /* sharing machines  */
nblk  = c2d(substr(rec1,7,2))    /* no of data blocks */
nent  = c2d(substr(rec1,9,2))    /* entries per block */
lent  = c2d(substr(rec1,11,2))   /* entry length      */
rec#  = c2d(substr(rec1,15,2))   /* blocks per track  */
reclim = rec#                    /* remember it       */
trck# = c2d(substr(rec1,17,2))   /* tracks per cyl.   */
ntracks = (nblk+1)/rec#          /* number of tracks  */
rec# = lrec.0  /* no. of useful blocks on first track */
cpulist = substr(rec1,12,ncpus*8)   /* all sharing CPU-ids */
k = 0
do j=1 to ncpus*8 by 8        /* remember all ids */
   cpuid.k = substr(cpulist,j+2,6)
   cpuid.k = vmid(cpuid.k)    /* convert to virtual machine id */
   k = k+1
end
         /**********************************
         * Look at all blocks in lock file *
         **********************************/
lrec = readnext()    /* already seen first block (descriptor) */
do forever
   lrec = readnext()
   if eof then leave
   bents = c2d(substr(lrec,3,2))     /* entries in this block */
   if bents>0 then
   do p=5 to 5+(bents-1)*lent by lent
      rname = substr(lrec,p,12)     /* resource name */
      do k=0 to ncpus-1
         cpulock.k = '00'
      end
      do k=0 to ncpus-1
         lflag = c2x(substr(lrec,p+12+k,1))
         if lflag¬='00'x then cpulock.k = lflag    /* some locking */
         else cpulock.k = '00'
      end
      do k=0 to ncpus-1
         if cpulock.k¬='00' then 'EXECIO 1 DISKW VSE LOCK A0 (STRING' ,
            left(rname,12) c2x(rname) left(cpuid.k,8) '  'opt(cpulock.k)
      end
   end
end
'SET DOS OFF'
'EXECIO 0 DISKW VSE LOCK A0 (FINIS'
'XEDIT VSE LOCK A (PROF XLOCK'
exit rc
/*********************
* Return next record *
*********************/
readnext:
lr = lr+1            /* next record */
if lr>rec# | firstrec then
do until lr¬>rec# | eof      /* next track  */
   if firstrec then
   do
      call 'FLOCK' 'LREC.',lcc,lhh,reclim
      rec# = lrec.0
   end
   else
   do
      lr = 1
      lhh = lhh+1
      if lhh>trck#-1 then
      do                /* next cylinder */
         lhh = 0
         lcc = lcc+1
      end
      trct = trct+1
      if trct>ntracks then eof = 1  /* last track has been passed */
      else call 'FLOCK' 'LREC.',lcc,lhh,reclim
      rec# = lrec.0     /* number of blocks with anything useful  */
   end
   firstrec = 0
end
return lrec.lr
/*********************************************************
* Return lock options separated into LOCKOPT and CONTROL *
*********************************************************/
opt:
arg lopt .
if left(lopt,1)='1' then control = 'E'
else control = 'S'
return right(lopt,1)'     'control
/***************************************************
* Work out virtual machine name from serial number *
***************************************************/
vmid:
parse arg id .
if id='FFB100025890'x then return 'CICSA   '
if id='FFA100025890'x then return 'CICSB   '
if id='FFD100025890'x then return 'DOSTEST '
         ... put all your machines' cpu ids here ...
if id='FF1800925890'x then return 'DYNAMCMS'
return c2x(left(id,4))    /* can't find this one, use cpu-id */


XLOCK XEDIT

/********************************************
* Profile for editing VSE lock file display *
********************************************/
address XEDIT
'SET SCALE OFF'
'SET PREFIX OFF'
'SET TOFEOF OFF'
'SET PREFIX NULLS'
'SET RESERVED 3 H' ,
'      <---------- Resource name ----------> Machine  Lock  Control'
'SET RESERVED 4 H' ,
'      <-- char --> <---- hexadecimal ----->  name   Option'
'SET CURLINE ON 5'
'SET LINEND OFF'
'SET PF1 HELP RESNAMES'
'SET PF4 TOP#SORT * A 1 12 39 46'       /* sort by resource name */
'SET PF5 TOP#SORT * A 39 46 1 12'       /* sort by machine name  */
'SET LINEND ON;
'SET RESERVED -3 H' ,
'PF1: Help    PF4: Sort by resource    PF5: Sort by machine'
'SORT * A 1 12 39 46'                   /* sort by resource name */


RESNAMES HELPCMS

            +-----------------------+
            |                       |
            | Common resource names |
            | on VSE lock file      |
            |                       |
            +-----------------------+

Resource name      Meaning
-------------      -------
Avvvvvv...
         The VTOC on volume "vvvvvv" is locked, probably
         during an OPEN. One machine waiting for a reply to
         an overlap message will lock out other OPENs to the
         same volume. This is a good reason not to have
         duplicate vol-ids on mini-disks used by VSE machines
         sharing a lock file if they are defined as SHR in
         the IPL procedure.
Cvvvvvv...
         LIBR has locked a library on volume "vvvvvv" during
         an update.
IJQFLEvvvvvv..
         The POWER Q file on volume "vvvvvv" is locked,
         normally for only a couple of seconds, whilst one
         sharing system is updating or scanning it.
Vvvvvvv....
         VSAM has locked something on volume "vvvvvv". These
         resource names will usually take up 99% of the lock
         file.

         ****************************************************
         * For full information on the rest of the resource *
         * name see the appropriate logic manuals.          *
         ****************************************************

            +--------------+
            |              |
            | Lock Options |
            |              |
            +--------------+

+----------------------------------------------------------------+
| LOCKOPT|CONTROL  |      Meaning                                |
|--------+---------+---------------------------------------------|
|    1   |   E     |   No other user is allowed concurrent use   |
|        |---------+---------------------------------------------|
|        |   S     |   Other 'S' users allowed concurrent use,   |
|        |         |   but no concurrent 'E' user allowed        |
|--------+---------+---------------------------------------------|
|    2   |   E     |   No other 'E' user gets concurrent use,    |
|        |         |   but other 'S' users allowed               |
|        |---------+---------------------------------------------|
|        |   S     |   Other 'S' users allowed and, in addition, |
|        |         |   one 'E' user is allowed                   |
|--------+---------+---------------------------------------------|
|    4   |   E     |   No other 'E' user from another system is  |
|        |         |   allowed. However, other 'S' users from    |
|        |         |   other systems may have concurrent use.    |
|        |---------+---------------------------------------------|
|        |   S     |   Other 'S' users and, in addition, one 'E' |
|        |         |   user from another system is allowed.      |
+----------------------------------------------------------------+


FLOCK ASSEMBLE

FLOCK    TITLE 'READ FROM VSE LOCK FILE ON 100 AND RETURN RECORDS'
**********************************************************************
* FLOCK is called in the following ways from REXX:                   *
*      1.  CALL FLOCK VAR,EXTENT                                     *
*                returns the start extent for lock file as cccc hh r *
*                                                                    *
*                          'EXTENT' is literal                       *
*                                                                    *
*      2.  CALL FLOCK VAR,CCCC,HH,BLOCKS                             *
*                returns a track at disk address CCC HH on           *
*                device address 100 and puts all records with lock   *
*                information into stem variable VAR.                 *
*                BLOCKS is how many blocks to read.                  *
*                                                                    *
*        NB   'VAR' is a REXX variable name and must be in quotes.   *
*             to be more efficient 'FLOCK' should be in quotes.      *
*             these pairs of quotes must be separate:                *
*             eg 'FLOCK' 'LREC',cc,hh,nrec                           *
*                                                                    *
* Macros used are DIAG and REGEQU    (in DMSGPI and DMSOM if VM/XA)  *
**********************************************************************
                                                  SPACE
FLOCK    CSECT
         USING *,R12
         LR    R12,R15             SET UP BASE REGISTER
         ST    R14,SAVRET
         LR    R13,R0              BASE FOR EXTENDED FUNCTION PLIST
         USING EFPLIST,R13
                                                  SPACE
         L     R1,EARGLIST
                                                  SPACE
*           GET VARIABLE NAME
         LM    R5,R6,0(R1)         VARIABLE NAME & LENGTH
         BCTR  R6,R0               EXECUTE LENGTH
         EX    R6,MVVAR            MOVE VARIABLE TO OUR AREA
         LA    R6,VNAME+1(R6)      BYTE AFTER VARIABLE NAME
         ST    R6,AVEND            SAVE ADDRESS
         MVC   SHVNAML,4(R1)       MOVE LENGTH
         MVC   SAVNAML,4(R1)       SAVE ELSEWHERE
                                                  SPACE
*           CHECK FOR EXTENT REQUEST
         LM    R5,R6,8(R1)         CYL. NO & LENGTH
         CLC   EXTENT,0(R5)        BRANCH IF
         BE    QEXTENT              EXTENT REQUESTED
                                                  SPACE
*           GET CYLINDER NUMBER
         BCTR  R6,R0               EXECUTE LENGTH
         EX    R6,PACKW            PACKED CYL.
         CVB   R6,DWORK            HEX CYL.
         STCM  R6,B'0011',CC       PUT INTO DISK ADDRESS
                                                  SPACE
*           GET HEAD NUMBER
         LM    R5,R6,16(R1)        HEAD NO & LENGTH
         BCTR  R6,R0               EXECUTE LENGTH
         EX    R6,PACKW            PACKED HEAD
         CVB   R6,DWORK            HEX HEAD
         STCM  R6,B'0011',HH        PUT INTO DISK ADDRESS
                                                  SPACE
*           GET NO OF RECORDS TO READ
         LM    R5,R6,24(R1)        RECORD COUNT & LENGTH
         BCTR  R6,R0               EXECUTE LENGTH
         EX    R6,PACKW            PACKED COUNT
         CVB   R6,DWORK            HEX COUNT
         STH   R6,RLIMIT           PUT INTO REC. COUNTER
                                                  SPACE
                                                  EJECT
*        **************************************************
*        * READ THE REQUESTED NUMBER OF RECORDS ON A TRACK*
*        * THE RECORDS WILL BE RETURNED IN STEM VARIABLES *
*        **************************************************
                                                  SPACE
         LA    R2,DEVADDR          DEVICE ADDRESS
         LA    R3,CCWS             READ CCW CHAIN
         SLA   R6,3                MULTIPLY NO. OF BLOCKS
         LA    R7,READCCWS-8(R6)    BY LENGTH OF CCW
         NI    4(R7),X'FF'-X'40'   UNCHAIN NTH READ CCW
         DIAG  R2,R3,X'20'         DO GENERAL I/O
         BNZ   QERROR              SOMETHING WRONG
                                                  SPACE
         LA    R7,BUFFER1          FIRST RECORD
         LH    R8,RLIMIT           RECORDS PER TRACK
QRECOUT  EQU   *
         NC    2,(2,R7),2(R7)      IF THESE BYTES ARE ZERO THEN
         BZ    QNORET               THERE IS NOTHING IN THE BLOCK
                                                  SPACE
         L     R9,CURSTEM          ADDRESS OF CURRENT STEM NO.
         L     R3,AVEND            WHERE TO PUT IT
         MVC   0(R3,3),0(R9)       MOVE ".NN" TO VARIABLE NAME
         L     R2,SAVNAML          GET VARIABLE LENGTH
         SR    R0,R0
         IC    R0,2(R9)            LENGTH OF N OR NN
         AR    R2,R0               ADD THIS TO ORIGINAL LENGTH
         LA    R1,L'BUFFER1        RECORD LENGTH
         BAL   R10,QRETVAR         RETURN VARIABLE
                                                  SPACE
         LA    R9,3(R9)           NEXT STEM NO.
         ST    R9,CURSTEM          REMEMBER IT
QNORET   EQU   *
         LA    R7,L'BUFFER1(R7)    NEXT RECORD
         BCT   R8,QRECOUT          LOOK AT ALL RECORDS
                                                  SPACE
*        ***************************************
*        * RETURN NUMBER OF VARIABLES IN VAR.0 *
*        ***************************************
         L     R7,CURSTEM          NEXT STEM NUMBER ADDRESS
         BCTR  R7,R0               LESS 3 FOR
         BCTR  R7,R0                HIGHEST ONE
         BCTR  R7,R0                 RETURNED
         AR    R2,R0               ADD THIS TO ORIGINAL LENGTH
         SR    R1,R1
         IC    R1,2(R7)            LENGTH OF N OR NN
         L     R2,SAVNAML          LENGTH OF VAR.
         LA    R2,1(R2)            LENGTH OF VAR.0
         L     R3,AVEND            WHERE TO PUT "0"
         MVI   0(R3),C'0'          SET UP VAR.0
         BAL   R10,QRETVAR         HOW MANY VARIABLES RETURNED
                                                  SPACE 2
*               ******************
*               * EXIT TO CALLER *
*               ******************
         L     R14,SAVRET          RETURN
         BR    R14
                                                  EJECT
***************************************************
*        RETURN DATA INTO REXX VARIABLE           *
*                                                 *
*          R7  = ADDRESS OF DATA                  *
*          R1  = LENGTH OF DATA                   *
*          R10 = RETURN ADDRESS                   *
*          R2  = LENGTH OF VARIABLE NAME IN VNAME *
***************************************************
                                                  SPACE
QRETVAR  DS    0H
         ST    R7,SHVVALA          ADDRESS OF VALUE
         ST    R1,SHVVALL          LENGTH OF VALUE
         ST    R2,SHVNAML          LENGTH OF VARIABLE NAME
         LA    R0,RFPLIST          PARAMETER LIST
         L     R1,ADNAME           SET UP TO CALL 'EXECCOM'
         SVC   202
         DC    AL4(1)
         LTR   R15,R15
         BM    QERROR
         BR    R10                 RETURN
                                                  SPACE
AVEND    DC    A(0)    ADDRESS OF END OF VARIABLE NAME
MVVAR    MVC   VNAME(0),0(R5)
VNAME    DC    CL16' '
COMMNAME DC    CL8'EXECCOMM'
ADNAME   DC    0A(0),X'02',AL3(COMMNAME)
                                                  SPACE
*        EXTENDED PLIST TO CALL EXECCOMM
RFPLIST  DS    0D
RCOMVERB DC    A(COMMNAME)
RBEGARGS DC    F'0'
RENDARGS DC    F'0'
RFBLOCK  DC    A(SHVBLOK)
RARGLIST DC    F'0'
RFUNRET  DC    F'0'
                                                  SPACE
SHVBLOK  DS    0D     SHARED VARIABLE PLIST ELEMENT
SHVNEXT  DC    A(0)          CHAIN POINTER
SHVUSER  DC    F'0'          PRIVATE USE
SHVCODE  DC    C'S'          FUNCTION CODE (SET VARIABLE)
SHVRET   DC    X'00'         RETURN CODE
         DC    H'0'
SHVBUFL  DC    F'0'          LENGTH OF'FETCH' VALUE BUFFER
SHVNAMA  DC    A(VNAME)      ADDRESS OF VARIABLE NAME
SHVNAML  DC    F'0'          LENGTH OF VARIABLE NAME
SHVVALA  DC    A(0)          ADDRESS OF VALUE BUFFER
SHVVALL  DC    F'0'          LENGTH OF VALUE BUFFER
SHVBLEN  EQU   *-SHVBLOK     LENGTH OF BLOCK
SAVNAML  DC    F'0'          LENGTH OF VARIABLE NAME AS SUPPLIED
                                                  SPACE
******************************************************
* A TABLE OF NUMBERS IS USED RATHER THAN WORKING     *
* THEM OUT BECAUSE THE STORAGE USED IS IRRELEVANT    *
* AND FEWER INSTRUCTIONS ARE NEEDED                  *
*----------------------------------------------------*
* INCREASE STEMNOS TABLE FOR LARGER TRACKS THAN 3380 *
******************************************************
CURSTEM  DC    A(STEMNOS)
         DC    C'0 ',X'1'
STEMNOS  DC    C'1 ',X'1',C'2 ',X'1',C'3 ',X'1',C'4 ',X'1',C'5 ',X'1'
         DC    C'6 ',X'1',C'7 ',X'1',C'8 ',X'1',C'9 ',X'1',C'10',X'2'
         DC    C'11',X'2',C'12',X'2',C'13',X'2',C'14',X'2',C'15',X'2'
         DC    C'16',X'2',C'17',X'2',C'18',X'2',C'19',X'2',C'20',X'2'
         DC    C'21',X'2',C'22',X'2',C'23',X'2',C'24',X'2',C'25',X'2'
         DC    C'26',X'2',C'27',X'2',C'28',X'2',C'29',X'2',C'30',X'2'
         DC    C'31',X'2',C'32',X'2',C'33',X'2',C'34',X'2',C'35',X'2'
         DC    C'36',X'2',C'37',X'2',C'38',X'2',C'39',X'2',C'40',X'2'
         DC    C'41',X'2',C'42',X'2',C'43',X'2',C'44',X'2',C'45',X'2'
         DC    C'46',X'2'
                                                  EJECT
************************************************
*          OPEN FILE TO GET EXTENT INFORMATION *
************************************************
                                                  SPACE
QEXTENT  DS    0H
         CNOP  0,4
         LA    R1,=C'$$BOPEN '     OPEN LOCKFLE
         BAL   R0,SVC02
         DC    A(LOCKFLE)
SVC02    SVC   2                   'SET DOS ON' FOR THIS
                                                  SPACE
         MVC   STEXTENT,LOCKFLES+2 GET START OF EXTENT FROM DTF
         LA    R7,STEXTENT
         LA    R1,L'STEXTENT
         L     R2,SAVNAML          LENGTH OF VARIABLE NAME
         BAL   R10,QRETVAR         RETURN EXTENT INFO
         L     R14,SAVRET          RETURN TO CMS
         BR    R14
                                                  SPACE 3
LOCKFLE  DC    0D'0'               BASIC DTFSD
         DC    5F'0'               CCB ETC.
         DC    X'20'               DTF TYPE
         DC    X'02'               INPUT FILE
         DC    CL7'LOCKFLE'
         DC    XL107'00'           PADDING
LOCKFLES EQU   LOCKFLE+58   SEEK ADDRESS OF START OF EXTENT
                                                  SPACE 3
STEXTENT DS    XL5
EXTENT   DC    C'EXTENT'
                                                  EJECT
***********************************************************
*          ERROR ROUTINE                                  *
*   ALL ERRORS WILL CAUSE A NULL VALUE TO BE RETURNED     *
*                                                         *
*   R15 IS NEGATIVE FOR ERRORS FROM EXECCOM               *
*   R15 = 3 FOR WRONG LENGTH RECORD                       *
*   SEE MANUAL FOR OTHER I/O ERRORS FROM DIAG X'20'       *
***********************************************************
         SPACE
QERROR   DS    0H
         SR    R1,R1               ENSURE NULL VALUE RETURNED
         L     R2,SAVNAML          LENGTH OF VARIABLE NAME
         BAL   R10,QRETVAR          TO EXEC
         L     R14,SAVRET          RETURN TO CMS
         BR    R14
                                                  EJECT
DWORK    DS    D
SAVRET   DC    F'0'       R14 ON ENTRY
RLIMIT   DC    Y((CCWSEND-READCCWS)/8)
PACKW    PACK  DWORK,0(0,R5)
DEVADDR  EQU   X'0100'             DEVICE ADDRESS
                                                  SPACE
BBCCHHR  DS    0XL7                DISK ADDRESS
         DC    X'0000'
CC       DS    XL2
HH       DS    XL2
R        DC    X'01'
                                                  SPACE
**********************************************************
* CHANGE NUMBER OF READ CCWS FOR LARGER TRACKS THAN 3380 *
**********************************************************
CCWS     CCW   7,BBCCHHR,X'40',6
         CCW   X'31',CC,X'40',5
         CCW   8,*-8,0,0
READCCWS CCW   6,BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+1*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+2*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+3*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+4*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+5*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+6*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+7*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+8*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+9*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+10*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+11*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+12*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+13*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+14*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+15*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+16*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+17*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+18*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+19*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+20*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+21*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+22*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+23*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+24*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+25*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+26*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+27*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+28*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+29*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+30*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+31*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+32*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+33*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+34*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+35*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+36*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+37*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+38*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+39*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+40*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+41*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+42*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+43*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+44*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+45*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+46*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+47*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+48*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+49*L'BUFFER1,X'40',L'BUFFER1
         CCW   6,BUFFER1+50*L'BUFFER1,X'40',L'BUFFER1
CCWSEND  EQU   *
                                                  SPACE
         LTORG
         REGEQU
                                                  SPACE 5
*        ENSURE I/O BUFFERS START ON A 1K BOUNDARY
*        SO THAT NONE CROSSES A PAGE BOUNDARY
         ORG   FLOCK+1024*((*+1023-FLOCK)/1024)
BUFFER1  DS    0CL512   STORAGE PASSED THIS IS USED FOR MORE BUFFERS
                                                  SPACE 3
EFPLIST  DSECT
ECOMVERB DS    F
EBEGARGS DS    F
EENDARGS DS    F
EFBLOCK  DS    F
EARGLIST DS    F
EFUNRET  DS    F
         END

John Illingworth
Empire Stores (UK)

