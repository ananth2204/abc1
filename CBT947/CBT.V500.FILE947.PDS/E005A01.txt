Coding SVA eligible programs

This article is designed to introduce the coding requirements
for writing a Shared Virtual Area (SVA) resident phase. I will
first give an overview of the SVA, its contents, and the SVA
programming requirements. Next, I will discuss the two
programs provided and the SVA coding necessary to meet the
SVA programming requirements.

The Shared Virtual Area (SVA) is used to contain frequently
used programs. It is built by IPL in the high end of virtual
storage on VSE/SP systems and either the high end of virtual
storage or immediately following the supervisor on VSE/ESA
systems. The SVA contains:

o      A System Directory List (SDL) of either descriptors of
      SVA resident programs (phases) or in-storage directory
      entries of highly used programs (phases). An SDL entry
      contains all the information required to satisfy the
      fetch/load services of VSE. Entries in the SDL are copies
      of specific library directory entries. An entry is built for
      each phase that IPL will load into the SVA.

o      Highly used programs (phases) located in the SVA can be
      shared between partitions (virtual library). These programs
      run with the PSW of the requesting task. SVA resident
      programs must be relocatable and re-enterable.

If a program is not in the virtual library it is loaded into the
requesting partition. A phase loaded into the SVA is loaded at
the next available double word boundary.

The SVA command is used at system IPL to reserve space for
additional SVA entries. The SVA command is used to increase
the SVA size beyond that set by the VSE system at IPL. The
IPL program automatically allocates space in the SVA using
loadlist found in the system sublibrary. Many IBM licenced
products are shipped with loadlist. The phases the system loads
into the SVA during start-up are prefixed with the characters
$SVA. To obtain the names of phases in the loadlist use the
LIBR access command ACCESS IJSYSRS.SYSLIB followed
by the list command LIST $SVA*.PHASE.

The SVALIST macro is used to create a private SVA loadlist.
For example, to assemble a loadlist with the name $SVAUSER
code the following job stream:

      // J0B LOADLIST
      // LIBDEF PHASE,CATALOG=IJSYSRS.SYSLIB
      // OPTION CATAL
      // EXEC ASSEMBLY
         SVALIST $SVAUSER,(phase1),(phase2),(phasen)
         END
      /*
      // EXEC LNKEDT
      /&

The first operand of the SVALIST macro is the phase name for
the new loadlist. The second through nth operands are the
names of the phases that you want to be loaded into the SVA
automatically during start-up.

The LIST=loadlist command may be issued following the SET
SDL command for a user loadlist. The phase names in the list
are located by VSE using the LIBDEF search string that is
active and loads the phases into the SVA. This additional space
allocation is for SDL entries, phases, and system GETVIS.

The SET SDL command is issued to cause SDL entries to be
built and phases to be loaded into the SVA. As shipped with
VSE, user SVA programs are added to a VSE background
procedure whose name is USERBG. The user phase names are
added between the SET SDL command and the /* statement. A
phase catalogued as SVA eligible (SVA operand in the linkage
editor PHASE statement) is loaded into the SVA, if it is
catalogued in the system sublibrary IJSYSRS.SYSLIB and a
phase of the same name is already in the SVA, or if a phase of
that name had been specified in the SET SDL command. If the
phase has an entry in the SDL, that entry is updated.

The SET SDL must be issued from the background (BG)
partition and may be given any time after IPL. It may be issued
any number of times. Following the SET SDL command are
one or more statements in the format 'name,SVA', where name
is any valid phase name and SVA indicates whether or not the
phase is to be loaded into the SVA. If SVA was specified and
the phase is SVA eligible, the job control program will cause
the phase to be loaded into the SVA. If the phase is not found a
message is issued and a dummy entry is made in the SDL.

The two programs presented below demonstrate the coding
necessary to execute a program from the SVA. Program one
(HCLSTSVA) is a driver program whose only function is to
fetch the SVA resident program (HCPRTSVA). HCPRTSVA is
an Assembler program that demonstrates a coding technique for
running in the SVA. HCPRTSVA must be added to your SET
SDL procedure to be loaded into the SVA. HCPRTSVA prints
the formatted contents of all SVA table entries, the formatted
contents of each SDL entry, an interpreted dump of the
occupied SVA, and an interpreted dump of system GETVIS.
The interpreted dumps are optional. They are used for
debugging SVA phases or data areas. The interpreted hex
dump of occupied SVA and system GETVIS is requested by
submitting a // UPSI 1 with the HCLSTSVA job stream. A //
UPSI 01 will cause a PDUMP of the SVA to verify directory
format, locations contents, and data areas when the program
thinks there is not an SVA or when changes in VSE cause
incorrect output. The // UPSI 01 is helpful in making changes
to HCPRTSVA and verifying SVA contents and format.

Since SVA resident programs must be relocatable and re-
enterable these SVA programs cannot use data areas within the
program to store data. To satisfy this requirement HCPRTSVA
issues the GETVIS macro to request the storage for the work
area. This work area is referenced via a dummy section
(DSECT) that is pointed to by register 8. The macros issued by
the HCPRTSVA program are documented at the beginning
along with the register usage. The macros that generate a
DSECT to map the SVA data areas, system communications
region, and communication region are hard-coded. These
DSECTs can be compared to the macros in your VSE system
library for any changes between VSE releases. Having these
macros hard-coded in the program helps you to determine if
changes have been made between releases that will affect the
execution output of the program as well as making the program
easier to read.

HCPRTSVA first prints a heading containing the date and the
CPU-id. If you ever need access to the CPU-id, this code can
be used. The second heading line prints the information shown
in Figure 1 followed by a heading line that shows the start of
the SDL.

Each data line in the body of the report contains information
about an entry in the SDL. This information includes the areas
shown in Figure 2.

Note that the CCB and CCW used in the HCPRTSVA are
made relocatable in the GETVIS obtained work area. Also, the
PDUMP used to print the SVA area is hard-coded to make it
re-entrant.


HCLSTSVA

     PRINT NOGEN
     TITLE 'HCLSTSVA. DRIVER FOR HCPRTSVA PROGRAM'
     PUNCH  ' PHASE HCLSTSVA,* '
MAINLINE START 0
*/*DOC*+------------------------------------------------------------+*/
*/*DOC*| PROCEDURE: FETCH PROGRAM TO      | SECTION:                |*/
*/*DOC*|  PRINT CONTENTS OF VSE/SP SVA    | CONTROLLING CSECT       |*/
*/*DOC*|------------------------------------------------------------|*/
*/*DOC*|                                                            |*/
*/*DOC*+------------------------------------------------------------+*/
R0       EQU   0 .                 EQUATE                            */
R1       EQU   1 .                 ALL                               */
R2       EQU   2 .                 THE                               */
R3       EQU   3 .                 REGISTERS                         */
R4       EQU   4 .                 TO                                */
R5       EQU   5 .                 SYMBOLS                           */
R6       EQU   6 .                 SO                                */
R7       EQU   7 .                 THAT                              */
R8       EQU   8 .                 REGISTER                          */
R9       EQU   9 .                 USAGE                             */
R10      EQU   10 .                MAY                               */
R11      EQU   11 .                BE                                */
R12      EQU   12 .                TRACED                            */
R13      EQU   13 .                IN THE                            */
R14      EQU   14 .                CROSS REFERENCE                   */
R15      EQU   15 .                LISTING                           */
*/*------------------------------------------------------------------*/
         BALR  R11,0                 /* ESTABLISH ADDRESSABILITY.    */
         USING *,R11                 /* IDENTIFY BASE REGISTER.      */
         LA    R13,SAVEAREA          /* POINT TO SAVE-AREA.          */
         LA    R14,RETURN            /* SET UP RETURN REGISTER.      */
         FETCH HCPRTSVA              /* LOAD AND EXECUTE PHASE.      */
RETURN   EQU   *                     /* EXIT TO VSE                  */
         EOJ                         /* END OF JOB                   */
*------------------------------------/*                              */
SAVEAREA DS    18F                   /* REGISTER SAVEAREA            */
*/*------------------------------------------------------------------*/
         END


HCPRTSVA

         TITLE '      <<<<   S V A    D U M P    U T I L I T Y   >>>>  .
                 P R O D U C T I V I T Y    A I D'
         PUNCH   '  PHASE HCPRTSVA,*,SVA  '
         PRINT NOGEN
HCPRTSVA START 0
*/*DOC*+------------------------------------------------------------+*/
*/*DOC*| PROCEDURE:                            | SECTION:           |*/
*/*DOC*|   PRINT CONTENTS OF VSE/SP  SVA       |  CONTROLLING CSECT |*/
*/*DOC*|------------------------------------------------------------|*/
*/*DOC*|                                                            |*/
*/*DOC*|                                                            |*/
*/*DOC*|HCPRTSVA IS RE-ENTRANT, SELF-RELOCATING AND SVA-ELIGIBLE.   |*/
*/*DOC*|THIS PROGRAM DISPLAYS THE FOLLOWING INFORMATION ON 'SYSLST':|*/
*/*DOC*|                                                            |*/
*/*DOC*|      1.  FORMATTED CONTENTS OF ALL SVA TABLE ENTRIES.      |*/
*/*DOC*|      2.  FORMATTED CONTENTS OF EACH SDL ENTRY.             |*/
*/*DOC*|      3.  INTERPRETED DUMP OF OCCUPIED SVA.                 |*/
*/*DOC*|      4.  INTERPRETED DUMP OF SYSTEM GETVIS AREA, IF PRESENT|*/
*/*DOC*|                                                            |*/
*/*DOC*| IF A // UPSI 1 STATEMENT IS SUBMITTED WITH THE JCL THE     |*/
*/*DOC*| OCCUPIED PART OF THE SVA IS PRINTED. LOTS OF PAPER!        |*/
*/*DOC*|                                                            |*/
*/*DOC*| IF A // UPSI 01 STATEMENT IS SUBMITTED WITH THE JCL A      |*/
*/*DOC*| PDUMP IS REQUESTED. THIS IS FOR TESTING TO GET A DUMP OF   |*/
*/*DOC*| SVA TO VERIFY DIRECTORY AND LOCATION CONTENTS WHEN THE     |*/
*/*DOC*| PROGRAM THINKS THERE IS NOT AN SVA.                        |*/
*/*DOC*|                                                            |*/
*/*DOC*|************************************************************|*/
*/*DOC*|                                                            |*/
*/*DOC*|                                                            |*/
*/*DOC*|       R E G I S T E R    U S A G E                         |*/
*/*DOC*|                                                            |*/
*/*DOC*|       0                   WORK.                            |*/
*/*DOC*|       1                   WORK.                            |*/
*/*DOC*|       2                   WORK.                            |*/
*/*DOC*|       3                   SVA BASE REGISTER.               |*/
*/*DOC*|       4                   ADDRESS POINTER FOR DUMP.        |*/
*/*DOC*|       5                   END OF DUMP, OR OCCUPIED SVA.    |*/
*/*DOC*|       6                   START OF SYSTEM GETVIS AREA.     |*/
*/*DOC*|       7                   END OF VIRTUAL STORAGE.          |*/
*/*DOC*|       8                   PARTITION GETVIS BASE REGISTER.  |*/
*/*DOC*|       9                   INTERNAL RETURN.                 |*/
*/*DOC*|       10                  WORK.                            |*/
*/*DOC*|       11                  WORK.                            |*/
*/*DOC*|       12                  PROGRAM BASE REGISTER.           |*/
*/*DOC*|       13                  SAVE AREA.                       |*/
*/*DOC*|       14                  INTERNAL RETURN.                 |*/
*/*DOC*|       15                  WORK.                            |*/
*/*DOC*|                                                            |*/
*/*DOC*| MACROS USED: MACROS ARE IN IJSYSRS.SYSLIB                  |*/
*/*DOC*| ------------                                               |*/
*/*DOC*|                                                            |*/
*/*DOC*|        GETVIS                                              |*/
*/*DOC*|        COMRG                                               |*/
*/*DOC*|        EOJ                                                 |*/
*/*DOC*|        EXCP                                                |*/
*/*DOC*|        WAIT                                                |*/
*/*DOC*|        CCB                                                 |*/
*/*DOC*|        MAPDNTRY                                            |*/
*/*DOC*|        MAPCOMR                                             |*/
*/*DOC*|        SYSCOM                                              |*/
*/*DOC*|        MAPSVAHD                                            |*/
*/*DOC*|                                                            |*/
*/*DOC*|------------------------------------------------------------|*/
*/*DOC*| MAINTENANCE HISTORY.                                       |*/
*/*DOC*|                                                            |*/
*/*DOC*+------------------------------------------------------------+*/
         SPACE 1                                                     */
**********************************************************************/
*                                                                    */
**********     R E G I S T E R    E Q U A T E S     ******************/
*                                                                    */
**********************************************************************/
         SPACE 1                                                     */
R0       EQU   0 .                 EQUATE                            */
R1       EQU   1 .                 ALL                               */
R2       EQU   2 .                 THE                               */
R3       EQU   3 .                 REGISTERS                         */
R4       EQU   4 .                 TO                                */
R5       EQU   5 .                 SYMBOLS                           */
R6       EQU   6 .                 SO                                */
R7       EQU   7 .                 THAT                              */
R8       EQU   8 .                 REGISTER                          */
R9       EQU   9 .                 USAGE                             */
RA       EQU   10 .                MAY                               */
R10      EQU   10                                                    */
RB       EQU   11 .                BE                                */
R11      EQU   11                                                    */
RC       EQU   12 .                TRACED                            */
R12      EQU   12                                                    */
RD       EQU   13 .                IN THE                            */
R13      EQU   13                                                    */
RE       EQU   14 .                CROSS-REFERENCE                   */
R14      EQU   14                                                    */
RF       EQU   15 .                LISTING                           */
R15      EQU   15                                                    */
         TITLE 'HCPRTSVA INITIALIZATION '
         BALR  R12,0                 /*ESTABLISH BASE REGISTER.      */
         USING *,R12                 /*                              */
         USING WORKAREA,R8           /*POINTER FOR GETVIS DATA AREA. */
*/*------------------------------------------------------------------*/
*        HCLIC &TYPE=DM,             /* DOS MONITORS SYSTEM          */
*              &RETURN=EOJ,          /*                              */
*              &RELO=,               /*                              */
*              &PRODUCT=9576-DM3,    /* PRODUCT ID                   */
*              &DATE=03/01/84,       /*                              */
*              &VM=01.00,            /* VERSION MOD                  */
*              &PHASE=HCPRTSVA       /* PHASE NAME                   */
*/*------------------------------------------------------------------*/
*/*                                  /*                              */
*/*------------------------------------------------------------------*/
*/*   H O U S E K E E P I N G                                        */
*/*------------------------------------------------------------------*/
         GETVIS ADDRESS=(R8),        /*       GET PARTITION WORK-AREA*/C
               LENGTH=WORKSIZE       /*                              */
         LTR   R15,R15               /*WAS THE GETVIS SUCCESSFUL ?   */
         BZ    GOTVIS                /*IF YES, USE THE SUPPLIED ADDR */
         LA    R8,WORKSIZE+4         /*OTHERWISE-ASSUME NO SIZE USED.*/
GOTVIS   EQU   *                     /*                              */
         XC    LINES,LINES           /*CLEAR LINE COUNTERS           */
         XC    LINECT,LINECT         /*                              */
         MVI   BLANK,C' '            /*INITIALIZE BLANK CONSTANT.    */
         MVC   PRINTO,PRINTO-1       /*BLANK OUT PRINT LINE.         */
         MVI   Z0,X'00'              /*INITIALIZE ZONE CONSTANT.     */
         MVC   CCB(16),PRCCB         /*COPY CCB INTO GETVIS AREA.    */
         LA    R1,CCW                /*POINT TO WORKING COPY OF CCW  */
         STCM  R1,X'07',CCB+9        /*POINT THE CCB TO WORKING CCW  */
         MVC   CCW,PRCCW             /*COPY CCW INTO GETVIS AREA.    */
         LA    R1,PRINTO             /*GET I/O AREA ADDRESS.         */
         STCM  R1,X'07',CCW+1        /*PUT I/O AREA ADDRESS IN CCW.  */
         MVI   CCW,X'89'             /*SKIP TO TOP OF PAGE           */
*------------------------------------/*                              */
         SR    R3,R3                 /*CLEAR WORK REGISTER           */
         USING COMREG,R1             /*                              */
         COMRG                       /*                              */
         MVC   HOLDDATE,JOBDATE      /*MM/DD/YY                      */
         MVC   HOLDUPSI,UPSI         /*SAVE UPSI BYTE                */
         IC    R3,SYSLINE            /*GET SYSLST LINE COUNT         */
         BCTR  R3,R0                 /*MINUS 1 FOR HEADING           */
         STC   R3,LINES+1            /*SAVE SYSLST LINE COUNT        */
         STC   R3,LINECT+1           /*                              */
         L     R7,EOCADR             /*GET ADDR OF END OF VIRT STOR  */
         DROP  R1                    /*                              */
         L     R1,X'80'              /*GET SYSCOM START ADDRESS.     */
         USING SYSCOM,R1             /*SYSTEM COMMUNICATION AREA     */
         L     R3,IJBRASLN           /*A(RAS LINKAGE)  IJBRASLN      */
         MVC   HOLDCPU,1(R3)         /*                              */
         L     R3,IJBSVA             /*GET SVA START ADDRESS.        */
         USING DSVA,R3               /* SVA AREA                     */
         LA    R3,0(R3)              /*CLEAR HIGH ORDER BITS         */
         ST    R3,SAVESTRT           /*SAVE START ADDRESS            */
         L     R5,DSVAEND            /*POINTER FOR END   OF SVA DUMP.*/
         L     R6,IJBSVIS            /*GET GETVIS START ADDRESS.     */
*------------------------------------/*                              */
         DROP R1                     /*                              */
*------------------------------------/*                              */
         BCTR  R7,0                  /*DECREMENT BY 1.               */
         CLC   ZEROES,DSVATIME       /*NOTHING IN SVA ?              */
         BNE   SVAPRES               /*                              */
         MVC   PRINTO(14),=C'NO SVA ACTIVE.'                         */
         BAL   R14,PRINT             /*                              */
         MVC   PRINTO(13),TITLE      /*                              */
         BAL   R14,PRINT             /*                              */
         B     EXIT                  /*NOTHING TO PRINT, SO EXIT.    */
*------------------------------------/*                              */
         TITLE 'HCPRTSVA  PRINT TABLE ENTIRES'
*/*------------------------------------------------------------------*/
*        P R I N T    S V A    T A B L E    E N T R I E S            */
*/*------------------------------------------------------------------*/
SVAPRES  EQU   *                     /*                              */
         TM    HOLDUPSI,X'01'        /*USE  PDUMP TO VERIFY OUTPUT ? */
         BO    PDUMPIT               /*YES PRINT SVA VIA PDUMP       */
         B     BYPASS                /*    PRINT SVA HEADER          */
*------------------------------------/*                              */
PDUMPIT  EQU   *                     /*                              */
*                                    /*                              */
*        REENTRANT 'PDUMP' ROUTINE * /*                              */
*                                    /*                              */
         ST    R3,STARTEND           /*SET UP ADDRESSES              */
         ST    R7,STARTEND+4         /*TO MAKE 'PDUMP' REENTRANT.    */
         LA    R1,=CL8'$$BPDUMP'     /*IDENTIFY TRANSIENT TO BE FETCH*/
         LA    R0,STARTEND           /*POINT TO START / END ADDRESSES*/
         SVC   2                     /*CALL 'PDUMP.                  */
*------------------------------------/*                              */
BYPASS   EQU   *                     /*                              */
         TITLE 'HCSVAPRT  PRINT SVA HEADER INFORMATION'
*/*------------------------------------------------------------------*/
*        P R I N T    S V A    H E A D E R                           */
*/*------------------------------------------------------------------*/
         BAL   R14,PRINT             /*SPACE.                        */
         BAL   R14,PRINT             /*SPACE.                        */
         MVC   PRINTO(L'HDR1),HDR1   /*MOVE IN HEADER                */
         USING COMREG,R1             /*                              */
         MVC   PRINTO+61(8),HOLDDATE /*GET THE DATE                  */
         MVC   UNPKA(5),HOLDCPU      /*PRINT CPU ID                  */
         BAL   R14,UNPK              /*                              */
         MVC   PRINTO+75(9),=C'CPU ID = '                            */
         MVC   PRINTO+84(10),UNPKO   /*CPUID                         */
         BAL   R14,PRINT             /*                              */
         MVC   PRINTO+45(11),TITLE   /*UNDERLINE TITLE.              */
         BAL   R14,PRINT             /*PRINT UNDERLINE               */
         BAL   R14,PRINT             /*SPACE AFTER HEADING           */
         MVC   PRINTO(105),SVATITLE  /*                              */
         BAL   R14,PRINT             /* PRINT SVA HEADING ONE        */
         MVC   PRINTO(105),TITLE     /*UNDERLINE TITLE               */
         BAL   R14,PRINT             /*                              */
         BAL   R14,PRINT             /*SPACE.                        */
         ST    R3,UNPKA              /*SVA START ADDRESS.            */
*------------------------------------/*                              */
         LR    R1,R3                 /*SVA START ADDRESS             */
         BAL   R14,ADDRSUB           /*CONVERT TO PRINTABLE HEX      */
         MVC   PRINTO(8),PRINTWRK    /* MOVE TO OUTPUT LINE          */
*------------------------------------/*                              */
         L     R1,DSVATIME           /*LAST UPDATE TIME/DATE         */
         ST    R1,UNPKA              /*                              */
         BAL   R14,UNPK              /* CONVERT TO PRINTABLE         */
         MVC   PRINTO+12(16),UNPKO   /* MOVE TO PRINT LINE           */
*------------------------------------/*                              */
         L     R1,DSVAVL             /*START OF VIRTUAL LIBRARY      */
         BAL   R14,ADDRSUB           /*CONVERT TO PRINTABLE HEX      */
         MVC   PRINTO+33(8),PRINTWRK /* MOVE TO OUTPUT LINE          */
*------------------------------------/*                              */
         L     R1,DSVAFPTR           /* PNTR TO NEXT FREE SVA ENTRY  */
         BAL   R14,ADDRSUB           /*CONVERT TO PRINTABLE HEX      */
         MVC   PRINTO+44(8),PRINTWRK /* MOVE TO OUTPUT LINE          */
*------------------------------------/*                              */
         L     R1,DSVAEND            /* END OF SVA PROGRAM AREA      */
         BAL   R14,ADDRSUB           /*CONVERT TO PRINTABLE HEX      */
         MVC   PRINTO+55(8),PRINTWRK /* MOVE TO OUTPUT LINE          */
*------------------------------------/*                              */
         L     R1,DSVASDL            /*GET ADDRESS OF SDL FROM SVA.  */
         LA    R1,4(R1)              /*ADJUST TO CORRECT VALUE.      */
         BAL   R14,ADDRSUB           /* CONVERT TO PRINTABLE         */
         MVC   PRINTO+65(8),PRINTWRK /* MOVE TO PRINT LINE           */
*------------------------------------/*                              */
         L     R1,DSVAFSDL           /* ADDR OF NEXT SDL ENTRY       */
         BAL   R14,ADDRSUB           /*CONVERT TO PRINTABLE HEX      */
         MVC   PRINTO+76(8),PRINTWRK /* MOVE TO OUTPUT LINE          */
*------------------------------------/*                              */
         LH    R1,DSVAENT            /* NUMBER OF SDL ENTRIES        */
         BCTR  R1,0                  /* DECREMENT BY ONE             */
         CVD   R1,UNPKA              /*CREATE PACKED FORMAT.         */
         MVC   PRINTO+86(4),=X'4020202021'         SET UP EDIT FIELD.*/
         ED    PRINTO+86(4),UNPKA+6  /*PUT NUMBER ENTIRES  IN LINE.  */
*------------------------------------/*                              */
         LH    R1,DSVALENT           /* LENGTH OF A SDL ENTRY        */
         BAL   R14,ADDRSUB           /*CONVERT TO PRINTABLE HEX      */
         MVC   PRINTO+97(4),PRINTWRK+4  MOVE TO OUTPUT LINE          */
*------------------------------------/*                              */
         BAL   R14,PRINT             /*                              */
*------------------------------------/*                              */
         TITLE 'HCPRTSVA  PRINT THE SDL LIST'
*--------------------------------------------------------------------*/
*        P R I N T    S Y S T E M    D I R E C T O R Y    L I S T    */
*--------------------------------------------------------------------*/
         BAL   R14,PRINT             /*SPACE.                        */
         BAL   R14,PRINT             /*SPACE.                        */
         MVC   PRINTO(25),=C'SYSTEM DIRECTORY DISPLAY:'              */
         MVC   PRINTO+39(14),=C'START OF SDL ='                      */
         L     R4,DSVASDL            /*GET ADDRESS OF SDL FROM SVA.  */
         LA    R4,4(R4)              /*ADJUST TO CORRECT VALUE.      */
         ST    R4,UNPKA              /*                              */
         BAL   R14,UNPK              /*                              */
         MVC   PRINTO+54(8),UNPKO    /*                              */
         BAL   R14,PRINT             /*                              */
         MVC   PRINTO(25),TITLE      /*UNDERLINE TITLE.              */
         BAL   R14,PRINT             /*                              */
         BAL   R14,PRINT             /*SPACE.                        */
         MVC   PRINTO(94),SDLTITLE   /*                              */
         BAL   R14,PRINT             /*                              */
         MVC   PRINTO(94),TITLE      /*                              */
         BAL   R14,PRINT             /*                              */
         BAL   R14,PRINT             /*SPACE.                        */
*/*----------------------------------/*                              */
PRINTSDL EQU   *                     /*                              */
         CR    R4,R5                 /* NO END OF SDL FOUND IN SVA ? */
         BH    ENDIT                 /*GIVE UP IF END NOT FOUND.     */
         ST    R4,UNPKA              /*SDL ENTRY ADDRESS.            */
         USING SDLENTRY,R4           /* SVA SDL DSECT ADDRESSIBILITY */
         LR    R1,R4                 /*SDL ENTRY ADDR INTO REG 1     */
         BAL   R14,ADDRSUB           /*CONVERT TO PRINTABLE HEX      */
         MVC   PRINTO(8),PRINTWRK    /* MOVE TO OUTPUT LINE          */
         MVC   PRINTO+11(8),SDLENAM  /*PHASE-NAME.                   */
*                                    /*                              */
         MVC   PRINTO+22(3),=C'YES'  /*DEFAULT TO IN THE SVA         */
         TM    SDLEPFL,SDLEBSD       /*IN SVA                        */
         BO    CKSYSLIB              /*                              */
         MVC   PRINTO+22(3),=C' NO'  /*NOT IN THE SVA                */
*                                    /*                              */
CKSYSLIB EQU   *                     /*                              */
         MVC   PRINTO+31(3),=C'YES'  /*DEFAULT TO IN IJSYSRS.SYSLIB  */
         TM    SDLEPFL,SDLEBPC       /*IN PRIVATE LIBRARY            */
         BNO   CKLOAD                /*NO, MUST BE IN SYSLIB         */
*                                    /*YES, SET NOT IN SYSLIB FLAG   */
         MVC   PRINTO+31(3),=C' NO'  /*PHASE NOT  IN IJSYSRS.SYSLIB  */
*                                    /*                              */
CKLOAD   EQU   *                     /*                              */
         MVC   PRINTO+40(3),=C'YES'  /*DEFAULT TO PHASE LOADABLE     */
         TM    SDLEPFL,SDLEBSE       /*SVA ELIGIBLE                  */
         BO    GETLNK                /*YES                           */
*                                    /*NO                            */
         MVC   PRINTO+40(3),=C' NO'  /*PHASE NOT LOADABLE            */
*                                    /*                              */
GETLDSET EQU   *                     /*                              */
         MVC   PRINTO+40(3),=C'YES'  /*DEFAULT TO PHASE ELIGIBLE     */
         TM    SDLESWT,SDLECLS       /*SVA ELIGIBLE FROM SET SDL SVA */
         BO    GETLNK                /*YES,                          */
*                                    /*NO, RESET FLAG                */
         MVC   PRINTO+40(3),=C' NO'  /*PHASE NOT LOADABLE            */
*                                    /*                              */
GETLDMVE EQU   *                     /*                              */
         MVC   PRINTO+40(3),=C'YES'  /*DEFAULT TO PHASE LOADABLE     */
         TM    SDLESWT,SDLECLM       /*SVA ELIGIBLE FROM SET SDL MOVE*/
         BO    GETLNK                /*YES, ALREADY SET TO YES       */
*                                    /*NO, RESET FLAG                */
         MVC   PRINTO+40(3),=C' NO'  /*PHASE NOT LOADABLE            */
*                                    /*                              */
GETLNK   EQU   *                     /*                              */
         L     R1,SDLELPT            /*LOAD POINT AT LNKEDT TIME     */
         BAL   R14,ADDRSUB           /*CONVERT TO PRINTABLE HEX      */
         MVC   PRINTO+50(8),PRINTWRK /*LOAD  POINT AT LNKEDT TIME.   */
*                                    /*                              */
         L     R1,SDLEENP            /*ENTRY POINT AT LNKEDT TIME.   */
         BAL   R14,ADDRSUB           /*CONVERT TO PRINTABLE HEX      */
         MVC   PRINTO+59(8),PRINTWRK /*LOAD  POINT AT LNKEDT TIME.   */
*                                    /*                              */
         L     R2,SDLEPLN            /*LENGTH OF PHASE IN BYTES      */
         CVD   R2,UNPKA              /*CREATE PACKED FORMAT.         */
         MVC   PRINTO+67(7),=X'402020202021D2'     SET UP EDIT FIELD.*/
         ED    PRINTO+67(6),UNPKA+5  /*PUT STORAGE ADDRESS IN LINE.  */
*                                    /*                              */
         L     R1,SDLESTR            /*PARTN START AT LNKEDT TIME.   */
         BAL   R14,ADDRSUB           /*CONVERT TO PRINTABLE HEX      */
         MVC   PRINTO+76(8),PRINTWRK /*PARTITION START ADDR AT LNKEDT*/
*                                    /*                              */
         L     R1,SDLESVAP           /*ENTRY POINT OF PHASE IN SVA.  */
         BAL   R14,ADDRSUB           /*CONVERT TO PRINTABLE HEX      */
         MVC   PRINTO+85(8),PRINTWRK /*ENTRY POINT OF PHASE IN SVA.  */
*                                    /*                              */
         BAL   R14,PRINT             /*                              */
*------------------------------------/*                              */
         AH    R4,DSVALENT           /*POINT TO NEXT SDL TABLE ENTRY.*/
         CLC   X8FS,SDLENAM          /*LAST ENTRY IN SDL ?           */
         BNE   PRINTSDL              /*REPEAT FOR EACH SDL ENTRY.    */
*------------------------------------/*                              */
         DROP  R4                    /*THROUGH WITH SDL DSECT        */
         TM    HOLDUPSI,X'80'        /*PRINT OCCUPIED SVA AREA ?     */
         BNO   CKGETVIS              /*NO, CHECK FOR GETVIS PRINT    */
*--------------------------------------------------------------------*/
*        P R I N T    S V A    H E A D E R                           */
*--------------------------------------------------------------------*/
         MVI   LINES+1,X'01'         /*FORCE SKIP TO TOP OF PAGE     */
         BAL   R14,PRINT             /* SPACE.                       */
         MVC   PRINTO(19),=C'DUMP OF SVA PHASES:'                    */
         MVC   PRINTO+26(27),=C'START OF SVA PROGRAM AREA ='         */
         L     R4,SAVESTRT           /*                              */
         ST    R4,UNPKA              /*START ADDR FOR SVA-RES PHASES */
         BAL   R14,UNPK              /*                              */
         MVC   PRINTO+54(8),UNPKO    /*                              */
         MVC   PRINTO+98(34),=C'(LINES WITH ALL ZEROS NOT PRINTED)'  */
         BAL   R14,PRINT             /*                              */
         MVC   PRINTO(18),TITLE      /*UNDERLINE TITLE.              */
         BAL   R14,PRINT             /*                              */
         BAL   R14,PRINT             /*SPACE.                        */
*--------------------------------------------------------------------*/
*        D U M P    S H A R E D    V I R T U A L    A R E A          */
*--------------------------------------------------------------------*/
         SRL   R4,5                  /*ROUND DOWN TO NEAREST         */
         SLL   R4,5                  /*32 BYTE BOUNDARY.             */
*                                    /*R5 POINTS TO END OF USED SVA  */
         BAL   R9,DUMP               /*DUMP ALL OF OCCUPIED SVA.     */
*                                    /*                              */
CKGETVIS LTR   R6,R6                 /*WAS SYS GETVIS AREA DEFINED?  */
         BZ    EXIT                  /*IF NOT, DUMP IS COMPLETE.     */
         TM    HOLDUPSI,X'80'        /*PRINT OCCUPIED GETVIS AREA ?  */
         BNO   EXIT                  /*NO, DUMP IS COMPLETE PRINT    */
*------------------------------------/*                              */
*--------------------------------------------------------------------*/
*        P R I N T    G E T V I S    H E A D E R                     */
*--------------------------------------------------------------------*/
         MVI   LINES+1,X'01'         /*FORCE SKIP TO TOP OF PAGE     */
         BAL   R14,PRINT             /*SPACE.                        */
         MVC   PRINTO(27),=C'DUMP OF SYSTEM GETVIS AREA:'            */
         MVC   PRINTO+31(22),=C'START OF GETVIS AREA ='              */
         ST    R6,UNPKA              /*SYSTEM GETVIS START ADDRESS.  */
         BAL   R14,UNPK              /*                              */
         MVC   PRINTO+54(8),UNPKO    /*                              */
         LR    R2,R6                 /*GET START OF GETVIS ADDRESS.  */
         BAL   R14,EDITSIZE          /*PLACE IN OUTPUT IN FORM -----K*/
         MVC   PRINTO+63(8),=X'7E402020202021D2'   SET UP EDIT FIELD.*/
         ED    PRINTO+64(6),UNPKA+5  /*PUT STORAGE ADDRESS IN LINE.  */
         MVC   PRINTO+98(34),=C'(LINES WITH ALL ZEROS NOT PRINTED)'  */
         BAL   R14,PRINT             /*                              */
         MVC   PRINTO(26),TITLE      /*UNDERLINE TITLE.              */
         BAL   R14,PRINT             /*                              */
         BAL   R14,PRINT             /*SPACE.                        */
*--------------------------------------------------------------------*/
*        D U M P    O F    S Y S T E M    G E T V I S    A R E A     */
*--------------------------------------------------------------------*/
         LR    R4,R6                 /*JUMP TO START OF GETVIS.      */
         LR    R5,R7                 /*POINT TO END OF VIRTUAL STOR  */
         BAL   R9,DUMP               /*DUMP SYSTEM GETVIS AREA.      */
         B     EXIT                  /*DUMP COMPLETED.               */
*------------------------------------/*                              */
*--------------------------------------------------------------------*/
*        E O J                                                       */
*--------------------------------------------------------------------*/
ENDIT    EQU   *                     /*                              */
         BAL   R14,PRINT             /*SPACE.                        */
         MVC   PRINTO(28),=C'END OF SVA BEFORE END OF SDL'           */
         BAL   R14,PRINT             /*                              */
*                                    /*GO RETURN TO MAINLINE         */
*                                    /*                              */
EXIT     EQU   *                     /*                              */
         BAL   R14,PRINT             /*SPACE.                        */
         MVC   PRINTO(25),=C'END OF SVA / GETVIS DUMP.'              */
         MVC   PRINTO+29(24),=C'END OF VIRTUAL STORAGE ='            */
         ST    R7,UNPKA              /*END OF VIRTUAL STORAGE ADDRESS*/
         BAL   R14,UNPK              /*                              */
         MVC   PRINTO+54(8),UNPKO    /*                              */
         LA    R2,1(R7)              /*GET END OF VITUAL STORAGE     */
         BAL   R14,EDITSIZE          /*PLACE IN OUTPUT IN FORM -----K*/
         MVC   PRINTO+63(8),=X'7E402020202021D2'   SET UP EDIT FIELD.*/
         ED    PRINTO+64(6),UNPKA+5  /*PUT STORAGE ADDRESS IN LINE.  */
         BAL   R14,PRINT             /*                              */
         MVC   PRINTO(24),TITLE      /*                              */
         BAL   R14,PRINT             /*                              */
         EOJ                         /*                              */
         TITLE 'HCPRTSVA INTERNAL SUBROUTINES'
*--------------------------------------------------------------------*/
*                                                                    */
*                                                                    */
*        I N T E R N A L    S U B R O U T I N E S                    */
*                                                                    */
*--------------------------------------------------------------------*/
DUMP     EQU   *                     /*                              */
         CR    R4,R5                 /*ALL OF REQUESTED AREA DUMPED? */
         BCR   2,R9                  /*IF YES, RETURN NOW.           */
*                                    /*IF NOT, KEEP PRINTING.        */
         CLI   0(R4),X'00'           /*IS THE 1ST CHARACTER ZERO ?   */
         BNE   DUMPLINE              /*IF NOT PRINT THIS NONZERO LINE*/
         CLC   1(31,R4),0(R4)        /*CHECK IF ALL OTHERS ARE ZERO  */
         BE    SKIPLINE              /*IF YES, DON'T PRINT THIS LINE.*/
DUMPLINE EQU   *                     /*                              */
         ST    R4,UNPKA              /*ADDR OF DATA BEING PRINTED.   */
         MVC   PRINTO+98(16),0(R4)   /*PLACE PRINTABLE CHARS IN LINE.*/
         MVC   PRINTO+116(16),16(R4) /*                              */
         TR    PRINTO+98(34),PRNTABLE *REMOVE UNPRINTABLE CHARACTERS.*/
         MVC   UNPKA+4(32),0(R4)     /*                              */
         BAL   R14,UNPK              /*                              */
         MVC   PRINTO(8),UNPKO       /*                              */
*--------------------------------------------------------------------*/
*                                                                    */
*        FOLLOWING ROUTINE SPACES OUT THE 64 HEX CHARACTERS ON A LINE*/
*        IN GROUPS OF 'SEG' CHARACTERS EACH.                         */
*                                                                    */
*--------------------------------------------------------------------*/
SEG      EQU   8                 LINE SEGMENT CONSTANT = 8 CHAR / SEG*/
*--------------------------------------------------------------------*/
         LA    R10,SEG               /*SET BYTES / SEGMENT CONSTANT. */
         LA    R2,PRINTO+14          /*POINT TO OUTPUT LINE POSITION.*/
         LA    R15,UNPKO+8           /*POINT TO INPUT CHAR LOCATION. */
         LA    R11,63(R15)           /*POINT TO END OF INPUT DATA.   */
LINELOOP EQU   *                     /*                              */
         MVC   0(SEG,R2),0(R15)      /*MOVE A SEGMENT TO OUTPUT LINE.*/
         LA    R2,SEG+2(R2)          /*POINT TO NEXT OUTPUT POSITION.*/
         BXLE  R15,R10,LINELOOP      /*REPEAT FOR ENTIRE LINE.       */
         MVC   PRINTO+12(32/SEG*(SEG+2)),PRINTO+14  SPLIT DUMP IN TWO*/
*                                    /*                              */
         BAL   R14,PRINT             /*                              */
SKIPLINE EQU   *                     /*                              */
         LA    R4,32(R4)         POINT TO NEXT 32 BYTES FOR NEXT LINE*/
         B     DUMP                  /*KEEP PRINTING SVA/GETVIS AREA */
*------------------------------------/*                              */
PRINT    EQU   *                     /*                              */
         LA    R1,CCB                /*POINT TO WORKING COPY OF CCB  */
         EXCP  (1)                   /*EXECUTE CHANNEL PROGRAM       */
         LA    R1,CCB                /*POINT TO WORKING COPY OF CCB  */
         WAIT  (1)                   /*WAIT FOR COMPLETION.          */
         MVI   CCW,X'09'             /*RESET TO SPACE 1 LINE         */
         MVC   PRINTO,PRINTO-1       /*BLANK OUT PRINT LINE.         */
         LH    R2,LINES              /*GET LINE COUNTER.             */
         BCT   R2,NEXTLINE           /*DECREMENT BY 1, */
*/*                                  /* TEST IF IT WENT ZERO         */
         MVI   CCW,X'89'             /*IF END OF PAGE-SKIP NEXT TIME */
         LH    R2,LINECT             /*  THEN RESET COUNT.           */
NEXTLINE EQU   *                     /*                              */
         STH   R2,LINES              /*SAVE NEW VALUE FOR LINE COUN  */
         BR    R14                   /*RETURN.                       */
*------------------------------------/*                              */
EDITSIZE EQU   *                     /*                              */
         SLL   R2,8                  /*CLEAR HIGH BYTE.              */
         SRL   R2,18                 /*DIVIDE BY 1 5.                */
         CVD   R2,UNPKA              /*CREATE PACKED FORMAT.         */
         BR    R14                   /*RETURN.                       */
*------------------------------------/*                              */
UNPK     EQU   *                     /*                              */
         UNPK  UNPK1(15),UNPKA(8)    /*                              */
         UNPK  UNPK1+15(1),UNPK1+14(1)                               */
         UNPK  UNPK2(15),UNPKA+8(8)  /*                              */
         UNPK  UNPK2+15(1),UNPK2+14(1)                               */
         UNPK  UNPK3(15),UNPKA+16(8) /*                              */
         UNPK  UNPK3+15(1),UNPK3+14(1)                               */
         UNPK  UNPK4(15),UNPKA+24(8) /*                              */
         UNPK  UNPK4+15(1),UNPK4+14(1)                               */
         UNPK  UNPK5(15),UNPKA+32(8)  *                              */
         UNPK  UNPK5+15(1),UNPK5+14(1)                               */
         UNPK  UNPK6(15),UNPKA+40(8)  *                              */
         UNPK  UNPK6+15(1),UNPK6+14(1)                               */
         MVZ   UNPK1(96),Z0          /*STRIP OFF ANY ZONE BITS.      */
         TR    UNPK1(96),HEXTABLE    /*REPLACE WITH CORRESP. CHAR    */
         MVC   UNPKO(96),UNPK1       /*MOVE PRINTABLE CHARS TO OUTPUT*/
         MVC   UNPK1(96),Z0          /*INITIALIZE INPUT AREA.        */
         BR    R14                   /*RETURN.                       */
*------------------------------------/*                              */
*/*                                  /*                              */
*/*------------------------------------------------------------------*/
*/*    THIS ROUTINE IS USED TO CONVERT ADDRESSES FOR PRINTING        */
*/*    R1  USED AS BAL COUNT REG                                     */
*/*    R4  USED AS WORK REG                                          */
*/*    R5  USED AS WORK REG (SAVED AND RESTORED.)                    */
*/*    R7  POINTS TO OUTPUT                                          */
*/*    R14 RETURN REGISTER                                           */
*/*    R15 CONTAINS ADDRESS TO PRINT                                 */
*/*------------------------------------------------------------------*/
ADDRSUB  EQU   *                     /*                              */
         ST    R14,RETURN14          /*SAVE RETURN ADDRESS           */
         LA    14,PRNTWRK            /*BUILD PRINT AREA              */
         LR    R10,R1                /*VALUE TO CONVERT IN R1 AND R10*/
         LR    R11,R10               /*VALUE TO CONVERT IN R10 & R11 */
         SRL   R10,4                 /*MOVE THE ZONES TO NUMERIC BITS*/
         N     R11,=X'0F0F0F0F'      /*MASK OFF 1ST 4 BITS OF        */
*                                    /* EACH BYTE.                   */
         N     R10,=X'0F0F0F0F'      /*IN BOTH THE ZONE & NUMERIC REG*/
         LA    R1,8                  /*NUMBER OF BYTES * 2           */
ADDRSUB2 EQU   *                     /*                              */
         STC   R11,0(R14,R1)         /*STORE THE NUMERIC BYTE        */
         BCTR  R1,0                  /*DECREMENT R1  BY 1            */
         STC   R10,0(R14,R1)         /*STORE THE ZONE BYTE           */
         SRDL  R10,8                 /*SHIFT TO THE NEXT BYTE        */
         BCT   R1,ADDRSUB2           /*GO DO THE NEXT BYTE           */
         TR    1(8,R14),TRANTABA     /*TRANSLATE IT                  */
         L     R14,RETURN14          /*LOAD RETURN ADDRESS           */
         BR    R14                   /*RETURN WHEN THROUGH           */
*/*------------------------------------------------------------------*/
TRANTABA DC    C'0123456789ABCDEF'
*/*------------------------------------------------------------------*/
*                                    /*                              */
         LTORG                       /* ALL LITERALS BEFORE WORKAREA */
         TITLE 'HCPRTSVA - CONSTANTS AREA'
*---------------------------------------------------------------------/
*                                                                    */
*                                                                    */
*        D A T A    A R E A                                          */
*                                                                    */
*--------------------------------------------------------------------*/
PRCCB    CCB   SYSLST,PRCCW
PRCCW    CCW   9,*-*,X'20',132
*
X8FS     DC    8X'FF'
ZEROES   DC    8X'00'
HEXTABLE DC    C'0123456789ABCDEF'
PRNTABLE EQU   *
         DC    CL16'                '  0X
         DC    CL16'                '  1X
         DC    CL16'                '  2X
         DC    CL16'                '  3X
         DC    CL16'           .<(+.'  4X
         DC    CL16'           $*); '  5X
         DC    CL16'-/         ,%_>?'  6X
         DC    CL16'          :#@''="' 7X
         DC    CL16'                '  8X
         DC    CL16'                '  9X
         DC    CL16'                '  AX
         DC    CL16'                '  BX
         DC    CL16' ABCDEFGHI      '  CX
         DC    CL16' JKLMNOPQR      '  DX
         DC    CL16'  STUVWXYZ      '  EX
         DC    CL16'0123456789      '  FX
*
SVATITLE DC    CL105'SVA ADDR    SVA LAST UPDATED    SVA START   NEXT SX
               VA   SVA END   SDL START  NEXT SDL  # IN SDL  ENTRY LEN'
*
SDLTITLE DC    CL94'SDL ADDR  PHASENAME  IN SVA  IN SYSLIB  LOADABLE  LX
               D POINT  ENTRY    SIZE   SVA ADDR SVA ENTRY'
TITLE    DC    105C'-'             UNDERLINE FOR TITLES.
HDR1     DC    C'HANNA && ASSOCIATES, INC. EDMOND OKLAHOMA     SVA LISTX
               ING'
WORKSIZE DC    A(WORKEND-WORKAREA) REQUIRED GETVIS AREA LENGTH.
         TITLE 'HCPRTSVA DSECTS'
WORKAREA DSECT                     WORK AREA LOCATED IN GETVIS
WORKSTRT DS    0D                  START OF WORK AREA
DBLWRDWK DS    D
CCB      DS    2D                  DUMMY CCB FOR GETVIS AREA
CCW      DS    D                   DUMMY CCW FOR GETVIS AREA
*/* N O T E --->                 /* UNPKA MUST BEGIN ON DBLWRD BNDRY */
UNPKA    DS    CL48                INPUT  AREA FOR 'UNPK' - HEX BYTES.
UNPKO    DS    CL96                OUTPUT AREA FOR 'UNPK' - CHARACTERS.
SAVESTRT DS    F
STARTEND DS    2F                  BEGINNING / END OF SVA.
RETURN14 DS    F                     /* ADDRESS OF CALLER RETURN     */
LINES    DS    H                   LINE COUNTER FOR 'PRINT'.
LINECT   DS    H                   SYSLST LINE COUNT FROM COMREG
PRNTWRK  DS    0CL9                  /*                              */
         DS    C
PRINTWRK DS    CL8
HOLDUPSI DS    X                   UPSI BYTE FROM COMREG
HOLDDATE DS    CL8                 MM/DD/YY FROM COMREG
HOLDCPU  DS    XL5                 CPU ID HOLD
BLANK    DS    C                   BLANK CONSTANT MUST PRECEED 'PRINTO'
PRINTO   DS    CL132               'PRINT' OUTPUT LINE.
Z0       DS    X                   ZONE CONSTANT, MUST PRECEED 'UNPK1'.
UNPK1    DS    CL16                OUTPUT
UNPK2    DS    CL16                       WORK
UNPK3    DS    CL16                            SPACE
UNPK4    DS    CL16                                  FOR
UNPK5    DS    CL16                                      'UNPK'
UNPK6    DS    CL16                                             ROUTINE
WORKEND  EQU   *
         SPACE 2
*        PRINT GEN
         SPACE 2
*        MAPSVAHD
         MAPSVAHD
         SPACE 2
*SYSCOM  SYSCOM
SYSCOM   SYSCOM
         SPACE 2
*        MAPCOMR
         MAPCOMR
         SPACE 2
*        MAPDNTRY
         MAPDNTRY
         SPACE 2
*-------------------------------------------------------------*
*------- SDL       DUMMY CONTROL SECTION  --------------------*
*-------------------------------------------------------------*
         SPACE 1
SDLENTRY DSECT .                  DIRECTORY ENTRY
SDLENAM  DS    CL8             0  DIRECTORY NAME FIELD
         DS    XL1             8  RESERVED
SLDEDEF1 DS    XL1             9  ATTTRIBUTES FOR DE
SDLDDTYP EQU   X'80'              TYPE OF ENTRY = TYPE
SDLDDHLX EQU   X'40'              TYPE OF ENTRY = HIGH LEVEL INDEX
SDLDDDIR EQU   X'20'              TYPE OF ENTRY = DIRECTORY
*              X'10' - X'01'      RESERVED
*
SDLEPRBA DS    XL6             A  PRBA OF MEMBER
SDLECONT DS    XL2            10  NUMBER OF CONTIGUOUS LBS
         DS    XL2            12  RESERVED
SDLEPFL  DS    XL1            14  FLAGS
*--------------------------------------------------------------
SDLEBSR  EQU   X'80'              SELF RELOCATING PHASE
SDLEBRL  EQU   X'40'              RELOCATING PHASE
SDLEBSE  EQU   X'20'              SVA ELIGIBLE
SDLEBSD  EQU   X'10'              PHASE IN SVA
SDLEBPC  EQU   X'08'              PCIL FLAG FOR INCORE DIRECTORY
SDLEBNF  EQU   X'04'              NOT FOUND FLAG (INCORE DIRECTORY)
SDLEBAC  EQU   X'02'              ENTRY ACTIVE (INCORE DIRECTORY)
*        EQU   X'01'              RESERVED
*--------------------------------------------------------------
SDLESWT  DS    XL1            15  SWITCHES
*--------------------------------------------------------------
SDLECLM  EQU   X'80'              MOVE MODE FLAG  FROM SET SDL
SDLECLS  EQU   X'40'              SVA ELIG. FLAG  FROM SET SDL
*--------------------------------------------------------------
         DS    XL2            16  RESERVED
SDLEPLN  DS    XL4            18  LENGTH OF PHASE(TXT) IN BYTES
SDLELPT  DS    XL4            1C  LOAD POINT AT LINKEDIT TIME
SDLEENP  DS    XL4            20  ENTRY POINT AT LINKEDIT TIME
SDLESTR  DS    XL4            24  PARTITION START AT LINKEDIT
SDLERLD  DS    XL2            28  NUMBER OF RLD ITEMS
SDLERLDA DS    XL6            2A  PRBA OF FIRST RLD ITEM, IF ANY
         DS    XL8            30  RESERVED
SDLESVAP DS    XL4            38  ENTRY POINT OF PHASE IN SVA
SDLEIDEN DS    XL4            3C  LIBRARY BLOCK ID
SDLEALIB DS    XL4            40  ADDRESS OF LIB-DEF-TAB
SDLEASLB DS    XL4            44  ADDRESS OF SUBLIB-DEF-TAB
*--------------------------------------------------------------
SDLENGTH EQU   *-SDLENTRY         LENGTH OF ENTRY (X'72' DEC 48)
         SPACE 2
         END   HCPRTSVA


Mark Hanna
President
Hanna & Associates Inc (USA)                      c Hanna & Associates Inc 1992

