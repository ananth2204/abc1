{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012546000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE662.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE662.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x04'", "DS1TRBAL": "b'\\xbb\\x00'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xb6\\x00\\x05\\x04\\xb6\\x00\\t\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04D\\x00\\x00\\x01\\x042/\\x01\\x042/\\x18T\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf8@@@'", "ispf": {"version": "04.68", "flags": 0, "createdate": "2004-11-17T00:00:00", "modifydate": "2004-11-17T18:54:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-468"}, "text": "REGULAR CBT TAPE - VERSION 468    FILE:  662\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT468.FILE662\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 16 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,131 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/17/04    18:54:12    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00D\\x01\\x04\\x03o\\x01\\x042\\x1f\\tH\\x00\\x92\\x00\\t\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "2004-02-05T00:00:00", "modifydate": "2004-11-16T09:48:44", "lines": 146, "newlines": 9, "modlines": 0, "user": "MMSMAK"}, "text": "This file contains code used to provide an automated bridge between the\nCA-1 tape management system and the FakeTape(tm) facility of FLEX-ES.\nThis contribution will require a lot of tailoring to your environment.\n\nIt is based upon the TSSO Automated Operator Facility (AOF), for which\nsee File 404 of the CBT tape. It uses a network connection between the\nMVS system and Unixware (or Linux) to issue remote commands which create\nthe FakeTape(tm) file and MOUNT it on the desired unit address. This may\nrequire a network bridge to route traffic between the networks and may\nneed TCP/IP routing changes in MVS and in Unixware (or Linux).\nThe members are;\n\n$DOC     -  You are reading it.\nFAKEAOF  -  TSSO AOF TABENTRY statements for CA-1 messages.\n            Include these with a COPY FAKEAOF statement in AOF source.\nFSF      -  Assembler source for a program which reads the CA-1 TMC to\n            find the first available SCRATCH tape. The characteristics\n            of the TMC have to be specified as Assembler variables at\n            the start of the program. You will need macros from File 172\n            of the CBT tape and from CA-1 to be able to assemble this\n            program. This program invokes the program \"SETVAR\" from\n            File 270 of the CBT tape to return the volume serial in the\n            TSO variable \"FAKETAPE\".\nFTAPE     - A clist which is invoked under TSSO to process requests for\n            SCRATCH tapes. It tests whether the tape unit is on a string\n            of tapes defined for FakeTape(tm) use and if so it invokes\n            FSF to find a SCRATCH tape. Then it issues a REXEC to\n            the Unixware (or Linux) Userid \"flexes\" with the appropriate\n            password to create a file with a VOL1 label for that tape.\n            That VOL1 is then converted into a FakeTape(tm) file in the\n            appropriate directory, which is then MOUNTed by FLEX-ES on\n            the right unit address. Note that this file may already\n            exist, it overwrites it anyway. Thus you do not have to\n            manage expired fake tapes. MVS opens the file, checks the\n            volume serial in the label VOL1, CA-1 checks that it is a\n            SCRATCH tape, updates the TMC and the tape file is then\n            written. Code is included to cater for multiple simultaneous\n            SCRATCH mounts with some crude placemat allocation. These\n            files should be regularly monitored lest they proliferate.\n            Note that Unixware (and Linux) commands are case sensitive.\nSTAPE     - A clist which is invoked under TSSO to process requests for\n            specific tapes. It tests whether the tape unit is one\n            defined for FakeTape(tm) use and if so issues a REXEC to\n            the Unixware (or Linux) Userid \"flexes\" with the appropriate\n            password to MOUNT the appropriate file by FLEX-ES on the\n            right unit address. MVS opens the file, checks the\n            volume serial in the label and processes the \"tape\".\n            Note that Unixware (and Linux) commands are case sensitive.\nKTAPE     - A clist which is invoked under TSSO to process requests to\n            demount tapes. This replaces the FDONE clist in the previous\n            release of this code. Now it also ensures that Flex-ES\n            unmounts the FakeTape file. It still attempts to delete the\n            placemat file for that volume. It does not care whether the\n            placemat exists or not - it will cease to do so anyway.\n\nAGCO UK Ltd. replaced an IBM Multiprise 2003 mainframe running OS390\nR2.10 in February 2004 with an IBM X-series server running FLEX-ES under\nSCO Unixware. The same OS390 R2.10 system was copied across. We run a\nmixed workload with a few TSO Users, about 60 IMS Users and overnight\nbatch. We have a worldwide network which was SNA but is now mostly IP.\nWe have successfully tested Enterprise Extender over the FLEX-ES\nemulated OSA card.  We ordered a three channel adaptor card supplied by\nFundamental Software Inc., the vendors of FLEX-ES to drive a 3745, local\nprinters and tapes.\nWe installed four daisy chained SCSI tape decks as well as having eight\nIBM 3490-E drives connected via one channel of the PCA.  As may be\nexpected tape performance is poor, but it has always been our intention\nto replace tapes with FakeTape(tm) anyway. To that end we defined in the\nIODF a string of 3480 tape drives for use with this facility.  We also\ndefined an additional EDT with the MIS standard name CART pointing to\nthese drives. Thus we can switch FakeTape(tm) on and off by activating\nthe appropriate EDT, either at IPL or by a dynamic software-only change\nusing HCD. Because they have different device types in their catalog\nentries there is no confusion of fake or real tapes. To be sure we use a\nseparate range of tape numbers in the TMC for FakeTape(tm).\n\nUPDATE July 2004\n================\nThat's what we thought. Turns out MVS is smart enough to know it can\nread a 3480 on a 3490 drive. Too smart for its own good - we kept\ngetting requests for FakeTapes on real drives. The good members of\nIBM-MAIN provided the answer; you have to define a Manual Tape Library\nand put FakeTapes under SMS. That's what we did and it worked a treat.\nWe were confused by the CA documentation of their support for Tape\nLibraries in CA-1, we thought they only supported real physical robots.\nIn fact the support is the same and the CA-1 Usermod CL05228 was applied\nand works very well. We did have one unscheduled IPL when I tried to use\na command issuing program to add 500 tapes to the SMS tape catalog.\nThe flood of LIBRARY ADD commands overwhelmed MCS and we lost all\ncommand processing. We now only add ten tapes at a time.\nAnother problem arose when a tape volume was used on a drive one day and\nthe drive was not used again until several days later when by chance\nthe same volume was requested on the same drive. Unfortunately the tape\nhad been used, so whichever bit of software remembered that tape was\nthere got it wrong, leading to an S813 abend. We have now modified\ndismount processing to break the Flex-ES connection between the tape\ndrive and the FakeTape file. We hope this will fix that problem, but as\nit is such a rare occurrence we can't for the moment guarantee it.\nDue to file size limits in UnixWare or Flex-ES we have had to split the\ndisk space we use for FakeTape files. Odd numbered tapes are stored in\nthe /scratch5 directory, all others in /scratch6. These are mount points\nfor partitions on our IBM X300 disk expansion unit.\n\nUPDATE November 2004\n====================\nThis was working so well we decided to do our offsite backups to\nFakeTape and then copy the dumps to real 3490's. This scheme did indeed\nreduce the backup window considerably, although the elapsed time of the\nwhole operation was about the same. However, it did throw up one problem\nwhich I have solved with this update.\nPreviously FTAPE would allocate a PLACEMAT file to ensure that only one\nmount request would use any particular scratch tape. If the placemat\nfile existed then the tape was in the process of being used although the\nTMC had not yet been updated, so FTAPE would try for another scratch\nvolume.  This works fine, but if you are dumping all your disks there is\na good chance that there will be an enqueue on the VTOC of the disk\nwhere you want to allocate the placemat. The whole process will then\nhang until the dump ends, which is not good for throughput.  I have\ntherefore changed FTAPE to use the Catalog as a placeholder, merely\ncreating a catalog entry for a placemat file, not the actual file\nitself.  This entry is deleted by KTAPE.  It happens that I use the\nDAYOWEEK program from CBT file 172 in the construction of the volume\nserial for the catalog entry, but this is not mandatory. Any system\nvariable or constant could be used, I just wanted as much granularity\nas I could get in six characters.\n\nComments and ideas for improvement are welcomed, email to;\n\ndavecartwright@uk.agcocorp.com\n\nThe Corporate information;\nAGCO Corporation, headquartered in Duluth, Georgia, is a global designer,\nmanufacturer and distributor of agricultural equipment and related\nreplacement parts.  AGCO products are distributed in over 140 countries.\nAGCO offers a full product line including tractors, combines, hay tools,\nsprayers, forage, tillage equipment and implements through more than 8,600\nindependent dealers and distributors around the world.\nAGCO products are distributed under the brand names;\nAGCO, Agco Allis, AgcoStar, Ag-Chem, Challenger, Farmhand, Fendt,\nFieldstar, Gleaner, Glencoe, Hesston, LOR*AL, Massey-Ferguson,\nNew Idea, Rogator, SISU Diesel Engines, Soilteq, Spra-Coupe,\nSunflower, Terra-Gator, Tye, Valtra, White, and Willmar.\nAGCO provides retail financing through AGCO Finance in North America\nand through Agricredit in the United Kingdom, France, Germany, Ireland,\nSpain and Brazil.\nIn 2002, AGCO had net sales of USD 2.9 billion.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$ZDOC": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\"\\x01\\x04\\t?\\x01\\x04\\t?\\x10E\\x00>\\x000\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2004-04-02T00:00:00", "modifydate": "2004-04-02T10:45:22", "lines": 62, "newlines": 48, "modlines": 0, "user": "MMSMAK"}, "text": "#\n#        PDSDOC *Documentation on archive experiments.................*\n#\nWhen AGCO bought the TServer they specified an additional IBM EXP300\ndisk array. This provided an extra 640GB of space in a SCSI RAID\nconfiguration specifically to accommodate FakeTape(tm) files.\n\nI soon found that SCO Unixware 7 does not support disk partitions over\n512GB in size, leaving me with one large and one small partition.  In\norder to make the most use possible of this disk space I decided to\nwrite the FakeTape file to the small partition (/scratch6) and then use\nthe GZIP program provided with UnixWare to archive the 'tape' to the\nlarger disk partition (/scratch5) which would become our back-end tape\nvault. In order to be able to dump a 3390-3 to one tape I specified a\nFlex-ES paramameter \"maxwritesize=2500\" on the MOUNT command sent to\nflexes in the FTAPE clist.  I found that although SCO UnixWare itself\nsupported files larger than 2 Gb, not all the supplied utilities did.\nGZIP level 1.2.4 supplied with SCO Unixware 7 was one program that did\nnot, so I had to install the Beta GZIP release 1.3.3 which included\nlarge file support. This installed easily after I downloaded it from\n                http://www.gzip.org/\nI wrote a Unix shell script to perform the archiving and invoked that as\na background task at the end of the FDONE clist called at dismount time.\nAnother shell script invoked GZIP to decompress the zipped FakeTape file\nback to /scratch6 when a particular volume serial was mounted using the\nSTAPE clist.  Obviously this had to run in real time before the MOUNT\nfor the 'tape'could be issued.\n\nFrom a tape management viewpoint this scheme worked very well. It\nprovided an order of magnitude increase in the size of the tape library\nand separated active tapes from archived ones. Unfortunately the CPU\ncost of running GZIP was quite large, and MVS would more or less stop\nwhilst GZIP was running. To reduce the impact I used minimal levels of\ncompression and reduced the file size to 1Gb, giving me many more\nmulti-volume files. I attempted to lower the priority of the archiving\nscript which was running asynchronously anyway by calling GZIP with\n\"nice -19\" and similarly invoked the shell script with \"nice -19\", but\nto no avail. Even though Unix showed GZIP running with priority zero the\nUsers on IMS terminals experienced response times of several minutes\nrather than sub-second.  This scheme had to be abandoned until the march\nof Moore's Law provides me with enough horsepower to do it.\n\nIn order to maximise the space available for FakeTape files I re-sliced\nthe EXP300 into two equal partitions each of 320GB.  The TSSO clists\nhave been updated to put odd numbered tapes on /scratch5, everything\nelse on /scratch6.  That includes not only even numbered tapes, but also\ntapes  with alphabetic serials or serials less than six characters long.\nI have reverted to a tape size of 2GB which gives adequate capacity with\nhopefully few problems. The members used in these experiments are;\n\nVTAPE1  - Unix shell script to compress a FakeTape file.\nVTAPE2  - Unix shell script to uncompress a FakeTape file.\nZTAPE   - A version of FTAPE\nZDONE   - A version of FDONE\nZSTAPE  - A version of STAPE\n\nNote that the commands in the Unix shell scripts have been folded to fit\nwithin this card-image PDS. In practice the commands must all be in one\n(long) line. This is noted within the member.  The REXEC calls to invoke\nthese scripts have been left in the TSSO clists, but have been commented\nout and the partiton balancing code added.\nI welcome comments and suggestions.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE662": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04D\\x00\\x00\\x01\\x042/\\x01\\x042/\\x18T\\x00y\\x00y\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf8@@@'", "ispf": {"version": "04.68", "flags": 0, "createdate": "2004-11-17T00:00:00", "modifydate": "2004-11-17T18:54:00", "lines": 121, "newlines": 121, "modlines": 0, "user": "CBT-468"}, "text": "//***FILE 662 is from Dave Cartwright and contains a system to      *   FILE 662\n//*           provide an automated bridge between CA-1 and FLEX-ES  *   FILE 662\n//*           Faketape.  A detailed description of this system      *   FILE 662\n//*           follows below.                                        *   FILE 662\n//*                                                                 *   FILE 662\n//*     Comments and ideas for improvement are welcomed,            *   FILE 662\n//*     email to:                                                   *   FILE 662\n//*                                                                 *   FILE 662\n//*     davecartwright@uk.agcocorp.com                              *   FILE 662\n//*                                                                 *   FILE 662\n//*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *   FILE 662\n//*                                                                 *   FILE 662\n//*     This file contains code used to provide an automated        *   FILE 662\n//*     bridge between the CA-1 tape management system and the      *   FILE 662\n//*     FakeTape(tm) facility of FLEX-ES.  This contribution        *   FILE 662\n//*     will require a lot of tailoring to your environment.        *   FILE 662\n//*                                                                 *   FILE 662\n//*     It is based upon the TSSO Automated Operator Facility       *   FILE 662\n//*     (AOF), for which see File 404 of the CBT tape.  It uses     *   FILE 662\n//*     a network connection between the MVS system and Unixware    *   FILE 662\n//*     (or Linux) to issue remote commands which create the        *   FILE 662\n//*     FakeTape(tm) file and MOUNT it on the desired unit          *   FILE 662\n//*     address. This may require a network bridge to route         *   FILE 662\n//*     traffic between the networks and may need TCP/IP routing    *   FILE 662\n//*     changes in MVS and in Unixware (or Linux).  The members     *   FILE 662\n//*     are;                                                        *   FILE 662\n//*                                                                 *   FILE 662\n//*     $DOC     -  You are reading it.                             *   FILE 662\n//*                                                                 *   FILE 662\n//*     FAKEAOF  -  TSSO AOF TABENTRY statements for CA-1           *   FILE 662\n//*                 messages.  Include these with a COPY            *   FILE 662\n//*                 FAKEAOF statement in AOF source.                *   FILE 662\n//*                                                                 *   FILE 662\n//*     FSF      -  Assembler source for a program which reads      *   FILE 662\n//*                 the CA-1 TMC to find the first available        *   FILE 662\n//*                 SCRATCH tape. The characteristics of the TMC    *   FILE 662\n//*                 have to be specified as Assembler variables     *   FILE 662\n//*                 at the start of the program. You will need      *   FILE 662\n//*                 macros from File 172 of the CBT tape and        *   FILE 662\n//*                 from CA-1 to be able to assemble this           *   FILE 662\n//*                 program. This program invokes the program       *   FILE 662\n//*                 \"SETVAR\" from File 270 of the CBT tape to       *   FILE 662\n//*                 return the volume serial in the TSO variable    *   FILE 662\n//*                 \"FAKETAPE\".                                     *   FILE 662\n//*                                                                 *   FILE 662\n//*     FTAPE     - A clist which is invoked under TSSO to          *   FILE 662\n//*                 process requests for SCRATCH tapes. It tests    *   FILE 662\n//*                 whether the tape unit is on a string of         *   FILE 662\n//*                 tapes defined for FakeTape(tm) use and if so    *   FILE 662\n//*                 it invokes FSF to find a SCRATCH tape. Then     *   FILE 662\n//*                 it issues a REXEC to the Unixware (or Linux)    *   FILE 662\n//*                 Userid \"flexes\" with the appropriate            *   FILE 662\n//*                 password to create a file with a VOL1 label     *   FILE 662\n//*                 for that tape.  That VOL1 is then converted     *   FILE 662\n//*                 into a FakeTape(tm) file in the appropriate     *   FILE 662\n//*                 directory, which is then MOUNTed by FLEX-ES     *   FILE 662\n//*                 on the right unit address. MVS opens the        *   FILE 662\n//*                 file, checks the volume serial in the label     *   FILE 662\n//*                 VOL1, CA-1 checks that it is a SCRATCH tape,    *   FILE 662\n//*                 updates the TMC and the tape file is then       *   FILE 662\n//*                 written. Code is included to cater for          *   FILE 662\n//*                 multiple simultaneous SCRATCH mounts with       *   FILE 662\n//*                 some crude placemat allocation. These files     *   FILE 662\n//*                 should be regularly monitored lest they         *   FILE 662\n//*                 proliferate.  Note that Unixware (and Linux)    *   FILE 662\n//*                 commands are case sensitive.                    *   FILE 662\n//*                                                                 *   FILE 662\n//*     STAPE     - A clist which is invoked under TSSO to          *   FILE 662\n//*                 process requests for specific tapes. It         *   FILE 662\n//*                 tests whether the tape unit is one defined      *   FILE 662\n//*                 for FakeTape(tm) use and if so issues a         *   FILE 662\n//*                 REXEC to the Unixware (or Linux) Userid         *   FILE 662\n//*                 \"flexes\" with the appropriate password to       *   FILE 662\n//*                 MOUNT the appropriate file by FLEX-ES on the    *   FILE 662\n//*                 right unit address. MVS opens the file,         *   FILE 662\n//*                 checks the volume serial in the label and       *   FILE 662\n//*                 processes the \"tape\".  Note that Unixware       *   FILE 662\n//*                 (and Linux) commands are case sensitive.        *   FILE 662\n//*                                                                 *   FILE 662\n//*     FDONE     - A clist which is invoked under TSSO to          *   FILE 662\n//*                 process requests to demount tapes. It           *   FILE 662\n//*                 attempts to delete the placemat file for        *   FILE 662\n//*                 that volume. It does not care whether the       *   FILE 662\n//*                 placemat exists or not - it will cease to       *   FILE 662\n//*                 do so anyway.                                   *   FILE 662\n//*                                                                 *   FILE 662\n//*     $ZDOC     - Documentation on archiving experiments          *   FILE 662\n//*     VTAPE1    - See $ZDOC                                       *   FILE 662\n//*     VTAPE2    - See $ZDOC                                       *   FILE 662\n//*     ZTAPE     - See $ZDOC                                       *   FILE 662\n//*     ZDONE     - See $ZDOC                                       *   FILE 662\n//*     ZSTAPE    - See $ZDOC                                       *   FILE 662\n//*                                                                 *   FILE 662\n//*     AGCO UK Ltd. replaced an IBM Multiprise 2003 mainframe      *   FILE 662\n//*     running OS390 R2.10 in February 2004 with an IBM            *   FILE 662\n//*     X-series server running FLEX-ES under SCO Unixware. The     *   FILE 662\n//*     same OS390 R2.10 system was copied across. We run a         *   FILE 662\n//*     mixed workload with a few TSO Users, about 60 IMS Users     *   FILE 662\n//*     and overnight batch. We have a worldwide network which      *   FILE 662\n//*     was SNA but is now mostly IP.  We have successfully         *   FILE 662\n//*     tested Enterprise Extender over the FLEX-ES emulated OSA    *   FILE 662\n//*     card.  We ordered a three channel adaptor card supplied     *   FILE 662\n//*     by Fundamental Software Inc., the vendors of FLEX-ES to     *   FILE 662\n//*     drive a 3745, local printers and tapes.                     *   FILE 662\n//*                                                                 *   FILE 662\n//*     We installed four daisy chained SCSI tape decks as well     *   FILE 662\n//*     as having eight IBM 3490-E drives connected via one         *   FILE 662\n//*     channel of the PCA.  As may be expected tape performance    *   FILE 662\n//*     is poor, but it has always been our intention to replace    *   FILE 662\n//*     tapes with FakeTape(tm) anyway. To that end we defined      *   FILE 662\n//*     in the IODF a string of 3480 tape drives for use with       *   FILE 662\n//*     this facility.  We also defined an additional EDT with      *   FILE 662\n//*     the MIS standard name CART pointing to these drives.        *   FILE 662\n//*     Thus we can switch FakeTape(tm) on and off by activating    *   FILE 662\n//*     the appropriate EDT, either at IPL or by a dynamic          *   FILE 662\n//*     software-only change using HCD. Because they have           *   FILE 662\n//*     different device types in their catalog entries there is    *   FILE 662\n//*     no confusion of fake or real tapes. To be sure we use a     *   FILE 662\n//*     separate range of tape numbers in the TMC for               *   FILE 662\n//*     FakeTape(tm).                                               *   FILE 662\n//*                                                                 *   FILE 662\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@INDEX": {"ttr": 527, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "FAKEAOF          *TSSO AOF DEFINITIONS FOR FAKETAPE....................*\nFSF              *DIRECTLY READ THE CA-1 TMC TO FIND A SCRATCH TAPE....*\nFTAPE            *TSSO CLIST TO PROCESS SCRATCH TAPES USING FAKETAPE..*/\nKTAPE            *TSSO CLIST TO UNLOAD FAKETAPES......................*/\nSTAPE            *TSSO CLIST TO PROCESS SPECIFIC TAPES USING FAKETAPE.*/\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FAKEAOF": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00Y\\x01\\x04\\x03\\x0f\\x01\\x04\\x18\\x8f\\t \\x00\\x12\\x00\\n\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2004-01-30T00:00:00", "modifydate": "2004-07-06T09:20:59", "lines": 18, "newlines": 10, "modlines": 0, "user": "MMSMAK"}, "text": "***********************************************************************\n* PROCESS TAPE MOUNT MESSAGES USING FAKETAPE(R) PROCESSING\n*        PDSDOC *TSSO AOF DEFINITIONS FOR FAKETAPE....................*\n* 05JUL04 DHC  REPLACE FDONE BY KTAPE, WITH UNIT\n* 25FEB04 DHC  ADD TEST FOR SPECIFIC ADDRESS RANGE\n* 29JAN04 DHC  TESTING\n***********************************************************************\n*\n         TABENTRY MSG=TMS001,ACTION=OSCMD,ECHO=YES,                    X\n               TEST=((S,19,3,'048')),     ONLY FAKE 3480'S             X\n               TEXT='.%FTAPE  \\W,   04\\'\n         TABENTRY MSG=TMS009,ACTION=OSCMD,ECHO=YES,                    X\n               TEST=((S,19,3,'048')),     ONLY FAKE 3480'S             X\n               TEXT='.%STAPE  \\W,   04\\ \\W,   05\\'\n         TABENTRY MSG=TMS014,ACTION=OSCMD,ECHO=NO,                     X\n               TEST=((S,19,3,'048'),(SX,16,3,' R ')), ONLY KEEP 3480   X\n               TEXT='.%KTAPE  \\W,   04\\ \\W,   05\\'\n*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FDONE": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00R\\x01\\x04\\x03_\\x01\\x04\\x03_\\x10!\\x00\\x0c\\x00\\x0c\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-02-04T00:00:00", "modifydate": "2004-02-04T10:21:52", "lines": 12, "newlines": 12, "modlines": 0, "user": "MMSMAK"}, "text": "PROC 1 VOL DEBUG\n /*                                                                  */\n /*      PDSDOC *TSSO CLIST TO PROCESS SCRATCH TAPES USING FAKETAPE..*/\n /*                                                                  */\n  IF &DEBUG = DEBUG THEN CONTROL MSG LIST CONLIST SYMLIST FLUSH ASIS\n                    ELSE CONTROL NOMSG NOLIST FLUSH ASIS\n  SET PLACEMAT = 'OPS.FAKETAPE.T&VOL'\n  LISTDSI &PLACEMAT\n  IF &LASTCC NE 0 THEN EXIT(0)\n  DELETE &PLACEMAT\n  EXIT CODE(0)\n /*                                                                  */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FSF": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01U\\x005\\x01\\x03\\x18O\\x01\\x04&\\x0f\\t6\\x01\\xeb\\x01\\x0e\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.85", "flags": 0, "createdate": "2003-07-03T00:00:00", "modifydate": "2004-09-16T09:36:35", "lines": 491, "newlines": 270, "modlines": 0, "user": "MMSMAK"}, "text": "//ASMH EXEC PGM=ASMA90,PARM=(NODECK,OBJECT,NOESD,NORLD,NOXREF,RENT)\nFSF      TITLE 'FAKETAPE SCRATCH FINDER'\n***********************************************************************\n*        PDSDOC *DIRECTLY READ THE CA-1 TMC TO FIND A SCRATCH TAPE....*\n*                                                                     *\n*        PROGRAM ID. :             FSF                                *\n*                                                                     *\n*        DATE WRITTEN :            JULY      2003                     *\n*                                                                     *\n*        AUTHOR :                  D.H.CARTWRIGHT.                    *\n*        COPYRIGHT:                AGCO UK  LTD.                      *\n*                                                                     *\n*        LOCATION :                COVENTRY                           *\n*                                  ENGLAND                            *\n*                                                                     *\n*        HISTORY  :                                                   *\n*                                                                     *\n* 29JAN04  DHC  ADD PARM PROCESSING FOR THE 'N'TH SCRATCH TAPE        *\n*               ACTUAL ENQUEUE REMOVED, DATA LISTS REMAIN             *\n* 26NOV03  DHC  CHANGE TO SELECT 3480 FOR FAKETAPE               *3480*\n* 06JUL03  DHC  OUR TMC HAS CRAP AT THE BEGINNING, SWITCH TO BDAM     *\n* 03JUL03  DHC  STARTED WRITING                                       *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        PURPOSE                                                      *\n*       ---------                                                     *\n*                                                                     *\n* THIS PROGRAM IS INTENDED FOR USE ON AN MVS SYSTEM RUNNING UNDER THE *\n* FLEX-ES EMULATOR FROM FUNDAMENTAL SOFTWARE INC.. IT IS INTENDED TO  *\n* HELP THE AUTOMATION OF FAKETAPE(TM) OPERATIONS BY FINDING THE       *\n* VOLUME SERIAL OF A SCRATCH TAPE TO BE ASSIGNED TO A FAKETAPE(TM)    *\n* FILE IN A CA-1 ENVIRONMENT. IT DOES THIS BY READING THE TMC         *\n* DIRECTLY.                                                           *\n*                                                                     *\n* ALL TRADEMARKS ARE ACKNOWLEDGED.                                    *\n* THIS PROGRAM USES THE 'SETVAR' PROGRAM FROM FILE 270 OF THE CBT     *\n* TAPE (HTTP://WWW.CBTTAPE.ORG/) AND WAS INITIALLY BASED ON CODE      *\n* FROM THE 'TMS' PROGRAM IN FILE 183 OF THE CBT TAPE. THE WORK        *\n* OF KERMIT KISER AND GILBERT SAINT FLOUR IS GRATEFULLY ACKNOWLEDGED. *\n* IT REQUIRES FILE 172 FROM THE CBT TAPE AND THE CA-1 MACRO LIBRARY   *\n* FOR ASSEMBLY.                                                       *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        LIMITATIONS                                                  *\n*       ------------                                                  *\n*                                                                     *\n*  UNAVOIDABLY THERE ARE SOME INSTALLATION SPECIFIC VARIABLES. THESE  *\n*  ARE SET BY ASSEMBLER VARIABLES BEFORE INSTALLATION.                *\n*                                                                     *\n*  IN ORDER TO HANDLE MULTIPLE SIMULTANEOUS TAPE MOUNTS I HAVE ADDED  *\n*  A PARM OF A NUMERIC VALUE 'N' TO ALLOW THE PROGRAM TO RETURN THE   *\n*  'N'TH FREE SCRATCH TAPE. THIS MEANT I HAD TO CHOOSE WHETHER TO USE *\n*  TSO CP PARM PROCESSING OR TRADITIONAL BATCH PROGRAM PARMS. AS I    *\n*  HAVE EXPERIENCE OF BATCH PARM PROCESSING THIS PROGRAM NO LONGER    *\n*  RUNS AS A CP. AN INVALID PARM WILL RESULT IN RC=16, AS WILL MOST   *\n*  OTHER FAILURES.                                                    *\n*                                                                     *\n*  THIS PROGRAM SHOULD BE REWRITTEN USING ONLY CA MACROS TO ACCESS    *\n*  THE TMC. IF ANYONE DOES THAT, PLEASE SEND ME A COPY.               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*       INPUT                                                         *\n*       -----                                                         *\n*                                                                     *\n* 1)PARM   - A PARM FIELD WITH A NUMERIC VALUE BETWEN 0 AND 255.      *\n*            THE PROGRAM WILL RETURN THE 'N'TH FREE SCRATCH TAPE.     *\n*            NO PARM, ZERO AND ONE ARE SYNONYMOUS AND WILL RETURN     *\n*            THE FIRST FREE SCRATCH TAPE.                             *\n*                                                                     *\n* 2)CAITMC - A DD STATEMENT TO POINT TO THE TMC. IF THIS IS NOT       *\n*            PRESENT A PREDEFINED DSNAME IS DYNAMICALLY ALLOCATED.    *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*       OUTPUT                                                        *\n*       ------                                                        *\n*                                                                     *\n* 1)FAKETAPE - A TSO VARIABLE IS SET CONTAINING THE VOLUME SERIAL OF  *\n*              THE FIRST 3490 STARTING AT A PREDEFINED RANGE THAT IS  *\n*              CONSIDERED 'SCRATCH' BY CA-1.                          *\n*                                                                     *\n***********************************************************************\n         EJECT\n         PRINT ON,GEN              SHOW MACRO EXPANSIONS\n*        PRINT ON,NOGEN            SUPPRESS MACRO EXPANSIONS\n         SPACE 1\nFSF      CSECT ,                   MAIN CSECT\n         SPACE 1\n***********************************************************************\n*        INSTALLATION DEPENDENT VALUES                                *\n***********************************************************************\n         SPACE 1\n&BLKSZ   SETA  8840                TMC BLOCKSIZE\n&CARTS   SETA  140000              FIRST 3480 IN RANGE\n&TMCDSN  SETC  'CSOFT.CA1R524.TMC' TMC DSNAME\n         SPACE 1\n***********************************************************************\n*        REGISTER EQUATES AND USAGES.                                 *\n***********************************************************************\n         SPACE 1\nR0       EQU   0\nR1       EQU   1                   WORK\nR2       EQU   2                   DCB TABLE POINTER,STRING LENGTH\nREG2     EQU   R2                  WORK REGISTER IN 'SCAN' MACRO\nR3       EQU   3                   WORK\nR4       EQU   4                   LINKAGE RETURN\nR5       EQU   5                   TMC RECORD BASE\nR6       EQU   6                   WORK/TMC RECORD LENGTH\nR7       EQU   7                   WORK/TMC END OF BLOCK\nR8       EQU   8                   BUFFER POINTER\nR9       EQU   9                   TMC DCB POINTER\nR10      EQU   10                  WORK\nR11      EQU   11                  PARM OR CPPL POINTER\nR12      EQU   12                  BASE REGISTER 1\nR13      EQU   13                  SAVE AREA / DATA BASE REG\nR14      EQU   14                  .\nR15      EQU   15                  .\n         SPACE 1\n         ZCSECT GETMAIN=1,WKLEN=LWORK HOUSEKEEPING\n         USING CLOSET,R13          ESTABLISH WORK AREA ADDSESSABILITY\n         LR    R11,R1              SAVE CPPL POINTER\n         USING CPPL,R11            ESTABLISH CPPL ADDRESSABILITY\n         SPACE 2\n         GOSUB INITIAL             PERFORM INITIALISATION\n         EJECT\n***********************************************************************\n*        MAIN PROCESSING ROUTINE                                      *\n***********************************************************************\n         SPACE 1\nMAINLINE DS    0H                  PROGRAM FUNCTION\n         LA    R9,DCB1             POINT TO INPUT FILE\n         USING IHADCB,R9           ESTABLISH DCB ADDRESSABILITY\n         LA    R6,340              SET TMCRECORD LENGTH\n         LH    R7,DCBBLKSI         AND BLOCKSIZE\n         LA    R7,0(R7,R5)         END OF BLOCK\n         LH    R1,NTH              GET PARM VALUE\n         SPACE 1\nMAINLOOP DS    0H                  PROGRAM FUNCTION\n         CLI   0(R5),X'FF'         IS IT A DSNB RECORD?\n         BE    QUIT16              WHOOPS, OVERSHOT. NO SCRATCH\n         USING TMRECORD,R5         ESTABLISH RECORD ADDRESSABILITY\n         CLC   TMVOLSER,CRANGE     HAVE WE REACHED THE RIGHT RANGE?\n         BL    MAINUP              NO, CARRY ON DEBLOCKING\n*        DC    A(0)                ABEND S0C1                   *DEBUG*\n*        CLI   TMTRTCH,TM36TRK     IS IT A 3490?                 *3480*\n         CLI   TMTRTCH,TM18TRK     IS IT A 3480?                 *3480*\n         BNE   MAINUP              NO, GO LOOK AT NEXT RECORD\n         TM    TMFLAG1,TMSCRTCH    IS IT A SCRATCH TAPE?\n         BNO   MAINUP              NO, GO LOOK AT NEXT RECORD\n         TM    TMFLAG1,TMDELET     IS IT ACTIVE?\n         BO    MAINUP              NO, GO LOOK AT NEXT RECORD\n         BCT   R1,*+4+4            ONLY RETURN THE 'N'TH TAPE\n         B     SETTSO              CONVEY ANSWER TO CALLER\n         STH   R1,NTH              SAVE NEW PARM VALUE\n         SPACE 1\nMAINUP   DS    0H                  GO ROUND FOR NEXT TMC RECORD\n         BXLE  R5,R6,MAINLOOP      BUMP RECORD POINTER AND TEST\n*        DC    A(0)                ABEND S0C1                  *DEBUG*\n         SPACE 1\n         FREEBUF (9),(8)           FREE PREVIOUS BUFFER\n         GETBUF (9),(8)            GET A BUFFER TO READ INTO\n         LTR   R5,R8               COPY IT\n         BZ    QUIT16              EXIT IF NO BUFFER\n         L     R4,BLKREF           GET LAST RECORD NUMBER\n         LA    R4,1(,R4)           INCREMENT TO NEXT RECORD\n         ST    R4,BLKREF           AND SAVE IT\n         LA    R4,BLKREF+1         POINT TO BLOCK NUMBER\n         READ  DECB1,DI,(9),(8),'S',0,(4),MF=E GET RECORD\n         CHECK DECB1                   WAIT FOR COMPLETION (OR SYNAD)\n         LA    R6,340              SET TMCRECORD LENGTH\n         LH    R7,DCBBLKSI         AND BLOCKSIZE\n         LA    R7,0(R7,R5)         END OF BLOCK\n         LH    R1,NTH              GET PARM VALUE\n         B     MAINLOOP            GO PROCESS NEXT BLOCK\n         SPACE 1\n********************************************************************\n*        BUILD UPDTLIST (SETVAR PARM LIST)                         *\n********************************************************************\nSETTSO   DS    0H                  TELL CALLER THE NEXT SCRATCH VOLUME\n         LA    R3,MAJORENQ         USE ENQ NAME AS VARIABLE\n         ST    R3,LOCPTR           SET POINTER\n         LA    R3,L'MAJORENQ       GET ITS LENGTH\n         ST    R3,LOCLEN           AND PUT IT IN THE LIST\n         LA    R3,TMVOLSER         POINT TO THE VOLUME SERIAL\n         ST    R3,VALPTR           AND PUT IT IN THE LIST\n         LA    R3,6                LENGTH OF THAT\n         ST    R3,VALLEN           IN THE LIST\n         MVC   UPDTUPT,CPPLUPT     UPT\n         MVC   UPDTECT,CPPLECT     ECT\n         LA    R3,ECB\n         ST    R3,UPDTECB          ECB\n         LA    R3,UPLIST\n         ST    R3,UPDTUPL          UPLIST\n         LA    R1,UPDTLIST         POINT TO SETVAR PARM LIST\n         LINK  EP=SETVAR,MF=(L,SETVAR)  GO SET THE VARIABLE\n         EJECT\n***********************************************************************\n*        END OF PROCESSING. TIDY UP AND LEAVE.                        *\n***********************************************************************\n         SPACE 1\nSTOPPGM  DS    0H                  NOW SHUTTING DOWN\n         CLOSE MF=(E,OPENLIST)     CLOSE THE TMC\n         SR    R15,R15             SET ZERO RETURN CODE\n         SPACE 2\nENDOFPGM DS    0H                  NOW SHUTTING DOWN\n         ZRETURN RC=(15)           EXIT PROGRAM\n         SPACE 2\nQUIT16   DS    0H                  ERROR EXIT\n         LA    R15,16              SET RETURN CODE\n         B     ENDOFPGM            AND GO OUT THE EXIT\n         TITLE 'INITIALISATION PROCESSING'\n***********************************************************************\n*        OPEN SUPPLIED DD CARDS ETC.                                  *\n***********************************************************************\n         SPACE 1\nINITIAL  DS    0H                  PROGRAM INITIALISATION\n         RIN   ,                   SUBROUTINE ENTRY\n         MVC   BONEYARD(SKELEND),SKELETON  MAKE RE-ENTRANT CONROLBLOCKS\n*\n*        PARM PROCESSING\n*\n         L     R1,0(,R11)          GET ADDRESS OF PARM\n         LH    R2,0(,R1)           GET LENGTH OF PARM\n         LTR   R2,R2               TEST LENGTH\n         BZ    NULLPARM            NO PARM\n         CH    R2,=H'3'            TEST MAXIMUM LENGTH\n         BH    QUIT16              ERROR IN PARM FIELD\n         BCTR  R2,0                DECREMENT FOR EXECUTE\n         EX    R2,PRMTEST1         TEST IF GE ZERO\n         BL    QUIT16              NO, WRONG\n         EX    R2,PRMTEST2         TEST IF LE NINES\n         BH    QUIT16              NO, WRONG\n         EX    R2,PRMPACK          PACK THE PARM\n         OI    PARMPACK+7,X'0F'    ENSURE SIGNED\n         CVB   R4,PARMPACK         GET BINARY VALUE OF PARM\n         LTR   R4,R4               IS IT GT ZERO?\n         BZ    NULLPARM            NO, SET TO ONE\n         CH    R4,=H'1'            TEST FOR VALUE ONE\n         BE    NULLPARM            ERROR IN PARM FIELD\n         CH    R4,=H'255'          TEST MAXIMUM VALUE\n         BH    QUIT16              ERROR IN PARM FIELD\n         STH   R4,NTH              SAVE THAT VALUE\n         B     PARMDONE            FINISHED PARM PROCESING\n         SPACE 1\nPRMTEST1 CLC   2(*-*,R1),=CL3'000' TEST FOR NUMERIC DATA      *EXECUTE*\nPRMTEST2 CLC   2(*-*,R1),=CL3'999' TEST FOR NUMERIC DATA      *EXECUTE*\nPRMPACK  PACK  PARMPACK,2(*-*,R1)  CONVERT PARM TO PACKED     *EXECUTE*\n         SPACE 1\nNULLPARM DS    0H                  PROCESSING FOR NULL, ZERO OR ONE\n         LA    R4,1                SET DEFAULT VALUE\n         STH   R4,NTH              SAVE THAT VALUE\n*        B     PARMDONE            FINISHED PARM PROCESING\n         SPACE 2\nPARMDONE DS    0H                  END OF PARM PROCESSING\n         EJECT ,\n         LA    R2,ADDRTIOT         POINT TO TIOT ADDRESS HOLDER\n         EXTRACT (2),'S',FIELDS=(TIOT),MF=(E,GETTIOT) GET TIOT ADDRESS\n         SR    R0,R0               SET ZERO COMPARATOR\n         LR    R15,R0              AND LENGTH\n         ICM   R1,B'1111',ADDRTIOT GET TIOT ADDRESS\n         BZ    ALLOCTMC            HUH? UNLIKELY, BUT WHAT THE HECK\n         LA    R1,24(,R1)          POINT AT FIRST DD ENTRY\nINLOOP1  DS    0H                  SCAN THE TIOT\n         C     R0,0(,R1)           HAVE WE REACHED THE END?\n         BE    ALLOCTMC            YES, REQUIRED DD NOT FOUND\n         CLC   =CL8'CAITMC',4(R1)  LOOK FOR MY DDNAME\n         BE    INSETUP1            IT IS THERE, GO OPEN IT\n         IC    R15,0(,R1)          GET LENGTH OF ENTRY\n         LA    R1,0(R15,R1)        POINT TO NEXT ENTRY\n         B     INLOOP1             GO TEST IT\n         SPACE 2\nALLOCTMC DS    0H                  NO DD CARD, CREATE ONE\n*\n*        ALLOCATE & OPEN THE TAPE MANAGEMENT CATALOG (TMC)\n*\n         LA    R1,=A(S99RB+VL)\n         SVC   99                      ALLOCATE THE TMC DATA SET\n         LTR   R15,R15\n         BNZ   QUIT16                  SVC99 FAILED, QUIT\n*----------------------------------------------------------------------\nINSETUP1 DS    0H                  CARRY ON WITH INITIALISATION\n         LA    R9,DCB1             POINT TO DCB\n         STCM  R9,B'0111',OPENLIST+1 SAVE ADDRESS\n         OPEN  MF=(E,OPENLIST) OPEN IT\n         LTR   R15,R15\n         BNZ   QUIT16\n         LA    R1,340              SET TMC RECORD LENGTH\n         LH    R7,DCBBLKSI         AND BLOCKSIZE\n         SR    R6,R6               CLEAR EVEN REGISTER\n         ST    R6,ECB              CLEAR ECB\n         ST    R6,BLKREF           SET POINTER TO ZERO\n         DR    R6,R1               FIND BLOCKING FACTOR\n         ST    R7,BLOCKING         SAVE THAT VALUE\n         SPACE 2\n*----------------------------------------------------------------------\n*\n*        PROCESS SEGMENT RECORDS TO DETERMINE THE\n*        BLOCK NUMBER OF MY TMCBASE RECORD\n*\n*----------------------------------------------------------------------\n*LOOP\nSCANSEG1 DS    0H                  READ  TMSCTL#1\n         GETBUF (9),(8)            GET A BUFFER TO READ INTO\n         LTR   R5,R8               COPY IT\n         BZ    QUIT16              EXIT IF NO BUFFER\n         LA    R4,BLKREF+1         POINT TO BLOCK NUMBER\n         READ  DECB1,DI,(9),(8),'S',0,(4),MF=E\n         CHECK DECB1                   WAIT FOR COMPLETION (OR SYNAD)\n         L     R5,DECB1+12         PICK UP BUFFER ADDRESS\n         CLC   =C'TMSCTL#1',TMSCTL#1   IS THIS THE RIGHT RECORD?\n         BNE   QUIT16                  NO, QUIT\n         L     R7,RANGE                SET START VOLSER\n         LA    R1,H1VOLLOW             POINT TO 1ST VOL-SER RANGE\n         LH    R2,TMCEXTNT             MAX NUMBER OF VOL-SER RANGES\n*--LOOP\nSCANSEG4 CL    R7,000(,R1)             COMPARE TO H1VOLLOW (LOW-VOL)\n         BL    SCANSEG5                NOT IN THIS RANGE\n         CL    R7,004(,R1)             COMPARE TO H1VOLHGH (HIGH-VOL)\n         BNH   SCANSEG9                YES, EXIT LOOP\nSCANSEG5 LA    R1,012(,R1)             NEXT RANGE\n         BCT   R2,SCANSEG4             NEXT RANGE IN TMSCTL#1\n*--ENDLOOP\n         B     QUIT16                  VOLSER NOT FOUND, QUIT\n*\nSCANSEG9 A     R7,008(,R1)             ADJUST BLK NUMBER\n         SR    R6,R6               CLEAR EVEN REGISTER\n         D     R6,BLOCKING         FIND PHYSICAL BLOCK\n         CL    R7,DCB1+16              IS IT TOO HIGH?\n         BH    QUIT16                  YES, QUIT\n         ST    R7,BLKREF               STORE RECORD NUMBER\n*----------------------------------------------------------------------\n*\n*        READ THE TMC RECORD FOR THE FIRST IN THE SCRATCH RANGE\n*\n*----------------------------------------------------------------------\n         FREEBUF (9),(8)           FREE PREVIOUS BUFFER\n         GETBUF (9),(8)            GET A BUFFER TO READ INTO\n         LTR   R5,R8               COPY IT\n         BZ    QUIT16              EXIT IF NO BUFFER\n         LA    R4,BLKREF+1         POINT TO BLOCK NUMBER\n         READ  DECB1,DI,(9),(8),'S',0,(4),MF=E GET RECORD FOR VOLSER\n         CHECK DECB1                   WAIT FOR COMPLETION (OR SYNAD)\n*\n         SPACE 2\nINITIALX DS    0H                  END OF INITIALISATION\n         ROUT  ,                   RETURN TO CALLER\n         TITLE 'DATA AREAS'\nBEGSNAP  DS    0D                  SNAP DATA AREAS FOLLOWING\n***********************************************************************\n*        CONSTANTS AND WORK AREAS                                     *\n***********************************************************************\n         SPACE 2\n         DS    0F                  GET ADDRESSES ALIGNED\nMAJORENQ DC    CL8'FAKETAPE'       MAJOR QNAME FOR ENQUEUE\nMINORENQ DC    CL6'VOLSER'         MINOR QNAME FOR ENQUEUE\nRANGE    DC    AL4(&CARTS)         START VOLUME OF TAPE RANGE\nCRANGE   DC    CL8'&CARTS'         START VOLUME OF TAPE RANGE (CHARS)\n         SPACE 1\n*------- BLOCS POUR ALLOCATION DYNAMIQUE DES FICHIERS ----------------\nS99RB    DC    A(X'14010000',0,S99TUPL,0,0)\nS99TUPL  DC    A(S99T1,S99T2,S99T4+VL)\nS99T1    DC    AL2(1,1,6),C'CAITMC'     DDNAME\nS99T2    DC    AL2(2,1,L'TMCDSN)        DSNAME\nTMCDSN   DC    C'&TMCDSN'               TMC DSNAME\nS99T4    DC    AL2(4,1,1),X'08',0F'0'   DISP=SHR\nDS1RECFF EQU   X'80'  10.. ....    F - FIXED LENGTH\nDS1RECFV EQU   X'40'  01.. ....    V - VARIABLE LENGTH\nDS1RECFU EQU   X'C0'  11.. ....    U - UNDEFINED LENGTH\nDS1RECFT EQU   X'20'  ..1. ....    T - TRACK OVERFLOW\nDS1RECFB EQU   X'10'  ...1 ....    B - BLOCKED\nDS1RECFS EQU   X'08'  .... 1...    FIXED LENGTH: (X'88')\nDS1RECFA EQU   X'04'  .... .10.    ANSI CONTROL CHARACTER\nDS1RECMC EQU   X'02'  .... .01.    MACHINE CONTROL CHARACTER\nVL       EQU   X'80000000'         END OF LIST\n         TITLE 'LITERAL POOL'\n***********************************************************************\n*        LITERAL POOL                                                 *\n***********************************************************************\n         SPACE 1\n         LTORG ,                   LITERAL POOL GOES HERE\n         TITLE 'DCB''S AND I/O CONTROL TABLES'\n*        PUSH  PRINT               SAVE PRINT STATUS\n*        PRINT ON,NOGEN            SUPPRESS MACRO EXPANSIONS\n***********************************************************************\n*        SKELETON CONTROL BLOCKS                                      *\n***********************************************************************\n         SPACE 1\nSKELETON DS    0F                  START OF SKELETON CONTROL BLOCKS\nEYECATCH DC    CL8'IEHIBALL'       EYE CATCHER\n         DC    PL8'0'              WORK AREA\n         DC    H'0'                BINARY VALUE OF PARM\n         DC    AL2(0)              PADDING\nCAITMC   DCB   DSORG=DA,MACRF=RICS,OPTCD=R,DDNAME=CAITMC,BUFL=&BLKSZ\n         SPACE 1\n         EXTRACT 0,'S',,FIELDS=(TIOT),MF=L CONTROL LIST\n         SPACE 1\n         OPEN  0,MF=L\n         SPACE 1\n         READ  DECB0,DI,CAITMC,0,'S','S',0,MF=L\n         SPACE 1\n         ENQ   (MAJORENQ,MINORENQ,E,6,SYSTEM),RET=USE,MF=L\n         SPACE 1\n         LINK  EP=SETVAR,SF=L      GO SET THE VARIABLE\n         SPACE 1\nSKELEN   EQU   *-SKELETON          SIZE OF THE SKELETON\n         TITLE 'DSECT MAPS'\n**********************************************************************\n*        HOUSEKEEPING STORAGE AREA\n**********************************************************************\n         SPACE 1\nCLOSET   DSECT ,                   KEEP ALL OUR SKELETONS HERE\n         DS    18F                 STANDARD SAVE AREA\n         RIN   GENERATE            SUB-ROUTINE SAVE AREA\nADDRTIOT DS    F                   ADDRESS OF TIOT\nBLKREF   DS    F                   ADDRESS OF BLOCK\nBLOCKING DS    F                   TMC BLOCKING FACTOR\nECB      DS    F                   AN ECB\n*\nUPDTLIST DS    0F\nUPDTUPT  DS    F\nUPDTECT  DS    F\nUPDTECB  DS    F\nUPDTUPL  DS    F\n*\nUPLIST   DS    0F\nLOCPTR   DS    AL4\nLOCLEN   DS    FL4\nVALPTR   DS    AL4\nVALLEN   DS    FL4\n         SPACE 2\nBONEYARD DS    0F                  LAY SKELETON HERE\n         DS    CL8'IEHIBALL'       EYE CATCHER\nPARMPACK DS    PL8'0'              WORK AREA\nNTH      DS    XL2'00'             BINARY VALUE OF PARM\n         DS    AL2(0)              PADDING\nDCB1     DCB   DSORG=DA,MACRF=RICS,OPTCD=R,DDNAME=CAITMC,BUFL=&BLKSZ\n         SPACE 1\nGETTIOT  EXTRACT ADDRTIOT,'S',,FIELDS=(TIOT),MF=L CONTROL LIST\n         SPACE 1\nOPENLIST OPEN  DCB1,MF=L\n         SPACE 1\nREADLIST READ  DECB1,DI,DCB1,0,'S','S',0,MF=L\n         SPACE 1\nENQLIST  ENQ   (MAJORENQ,MINORENQ,E,6,SYSTEM),RET=USE,MF=L\n         SPACE 1\nSETVAR   LINK  EP=SETVAR,SF=L      GO SET THE VARIABLE\n         SPACE 1\nSKELEND  EQU   *-BONEYARD          SIZE OF THE SKELETON (=SKELEN?)\n         SPACE 2\nLWORK    EQU   *-CLOSET            SIZE OF THE CLOSET\n*\n         EJECT\n         DCBD  DSORG=PS,DEVD=DA    DCB DSECT\n         SPACE 2\nCPPL     IKJCPPL ,\n         TITLE 'INPUT RECORD'\n***********************************************************************\n*   MAPPING OF TMC VOLUME RECORD                                      *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         PRINT GEN\n         TMMTMREC PREFIX=TM,LIST=YES,DSECT=YES  SOFTWARE.CA1R524.CAIMAC\n         SPACE 3\n         END\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SOFTWARE.CA1R524.CAIMAC            TMMTMREC\n//         DD DISP=SHR,DSN=MMS.MAK.ASM                        CBT172\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200\n//*\n//LKED    EXEC PGM=HEWL,PARM='MAP,REUS',COND=(8,LE)\n//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)\n//SYSPRINT DD SYSOUT=*\n//SYSLMOD  DD DISP=SHR,DSN=MMS.MAK.LOAD(FSF)\n//*  //SYSLMOD  DD DISP=SHR,DSN=SYSL.AGCO.LINKLIB(FSF)\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FTAPE": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01!\\x00P\\x01\\x04\\x02\\x9f\\x01\\x042\\x0f\\x10D\\x00G\\x004\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.33", "flags": 0, "createdate": "2004-01-29T00:00:00", "modifydate": "2004-11-15T10:44:50", "lines": 71, "newlines": 52, "modlines": 0, "user": "MMSMAK"}, "text": "PROC 1 UNIT DEBUG\n /*                                                                  */\n /*      PDSDOC *TSSO CLIST TO PROCESS SCRATCH TAPES USING FAKETAPE..*/\n /*                                                                  */\n  IF &DEBUG = DEBUG THEN CONTROL MSG LIST CONLIST SYMLIST FLUSH ASIS\n                    ELSE CONTROL NOMSG NOLIST FLUSH ASIS\n  /*                                                                  */\n   SET LOOP = 0\n   SET HH = &SUBSTR(1:2,&SYSTIME)\n   SET MM = &SUBSTR(4:5,&SYSTIME)\n   SET SS = &SUBSTR(7,&SYSTIME)\n   DAYOWEEK\n   SET DAYNUM = &LASTCC\n   SET VOL = '&DAYNUM.&HH.&MM.&SS'\n   SET CMDRESP = NOWHERE\n  /*                                                                  */\n  CA1: SET &LOOP = &LOOP + 1\n  IF &LOOP EQ 20 THEN GOTO LOOPING\n  CALL *(FSF)  '&LOOP'\n  SET FSC = &LASTCC\n  IF &FSC NE 0 THEN +\n    DO\n     OSWTO FSF HAD RC &FSC\n     GOTO LOOPING\n    END\n  SET PLACEMAT = 'OPS.FAKETAPE.T&FAKETAPE'\n  LISTC ENT(&PLACEMAT)\n  IF &LASTCC EQ 0 THEN +\n     GOTO CA1\n  DEFINE NVSAM (NAME(&PLACEMAT) DEVT('3380') VOLUMES(&VOL))\n  IF &LASTCC NE 0 THEN +\n     GOTO CA1\n  SET TYPE = &SUBSTR(6,&FAKETAPE)\n /*                                                                  */\n /* HERE INSERT REXEC CODE TO PERFORM FAKETAPE FUNCTIONS ON SERVER   */\n /*                                                                  */\n  REXEC -l flexes -p abcdef1 180.7.16.36 echo +\n       \"VOL1&FAKETAPE\"  > asciifile\n  SET RC1 = &LASTCC\n  IF &RC1 NE 0 THEN OSWTO CALL1 HAD RC &RC1\n  SELECT (&TYPE)\n  WHEN (1 | 3 | 5 | 7 | 9) DO\n    REXEC -l flexes -p abcdef1 180.7.16.36  +\n         bin/asctfake -x ebcdic asciifile /scratch5/T&FAKETAPE..fake\n    SET RC2 = &LASTCC\n    IF &RC2 NE 0 THEN OSWTO CALL2 HAD RC &RC2\n   REXEC -l flexes -p abcdef1 180.7.16.36 echo mount +\n          &UNIT /scratch5/T&FAKETAPE..fake +\n          \"'maxwritesize=2000'\" | +\n          /usr/flexes/bin/flexescli localhost tserver1\n    SET RC3 = &LASTCC\n    IF &RC3 NE 0 THEN OSWTO CALL3 HAD RC &RC3\n    END\n  OTHERWISE DO\n    REXEC -l flexes -p abcdef1 180.7.16.36  +\n         bin/asctfake -x ebcdic asciifile /scratch6/T&FAKETAPE..fake\n    SET RC2 = &LASTCC\n    IF &RC2 NE 0 THEN OSWTO CALL2 HAD RC &RC2\n   REXEC -l flexes -p abcdef1 180.7.16.36 echo mount +\n          &UNIT /scratch6/T&FAKETAPE..fake +\n          \"'maxwritesize=2000'\" | +\n          /usr/flexes/bin/flexescli localhost tserver1\n    SET RC3 = &LASTCC\n    IF &RC3 NE 0 THEN OSWTO CALL3 HAD RC &RC3\n    END\n  END\n /*                                                                  */\n  EXIT CODE(0)\n /*                                                                  */\n LOOPING: OSWTOH COULD NOT GET A SCRATCH TAPE\n  EXIT CODE(8)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "KTAPE": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00(\\x01\\x04\\x03_\\x01\\x042\\x0f\\x10D\\x00\\x0f\\x00\\x0c\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "2004-02-04T00:00:00", "modifydate": "2004-11-15T10:44:28", "lines": 15, "newlines": 12, "modlines": 0, "user": "MMSMAK"}, "text": "PROC 2 UNIT VOL DEBUG\n /*                                                                  */\n /*      PDSDOC *TSSO CLIST TO UNLOAD FAKETAPES......................*/\n /*                                                                  */\n  IF &DEBUG = DEBUG THEN CONTROL MSG LIST CONLIST SYMLIST FLUSH ASIS\n                    ELSE CONTROL NOMSG NOLIST FLUSH ASIS\n  REXEC -l flexes -p abcdef1 180.7.16.36 echo mount &UNIT OFFLINE | +\n         /usr/flexes/bin/flexescli localhost tserver1\n  SET RC1 = &LASTCC\n  IF &RC1 NE 0 THEN OSWTO CALL1 HAD RC &RC1\n  SET PLACEMAT = 'OPS.FAKETAPE.T&VOL'\n  DELETE &PLACEMAT NSCR\n /*                                                                  */\n  EXIT CODE(0)\n /*                                                                  */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STAPE": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00(\\x01\\x04\\x03\\x0f\\x01\\x04\\t\\x1f\\x108\\x00\\x1e\\x00\\x11\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2004-01-30T00:00:00", "modifydate": "2004-03-31T10:38:28", "lines": 30, "newlines": 17, "modlines": 0, "user": "MMSMAK"}, "text": "PROC 2 UNIT VOL DEBUG\n /*                                                                  */\n /*      PDSDOC *TSSO CLIST TO PROCESS SPECIFIC TAPES USING FAKETAPE.*/\n /*                                                                  */\n  IF &DEBUG = DEBUG THEN CONTROL MSG LIST CONLIST SYMLIST FLUSH ASIS\n                    ELSE CONTROL NOMSG NOLIST FLUSH ASIS\n  SET TYPE = &SUBSTR(6,&VOL)\n /*                                                                  */\n /* HERE INSERT REXEC CODE TO PERFORM FAKETAPE FUNCTIONS ON SERVER   */\n /*                                                                  */\n /*   REXEC -l flexes -p abcdef1 180.7.16.36 VTAPE2 T&VOL.           */\n  SELECT (&TYPE)\n  WHEN (1 | 3 | 5 | 7 | 9) DO\n    REXEC -l flexes -p abcdef1 180.7.16.36 echo mount +\n           &UNIT /scratch5/T&VOL..fake  | +\n           /usr/flexes/bin/flexescli localhost tserver1\n     SET RC3 = &LASTCC\n     IF &RC3 NE 0 THEN OSWTO CALL1 HAD RC &RC3\n    END\n  OTHERWISE DO\n    REXEC -l flexes -p abcdef1 180.7.16.36 echo mount +\n           &UNIT /scratch6/T&VOL..fake  | +\n           /usr/flexes/bin/flexescli localhost tserver1\n     SET RC3 = &LASTCC\n     IF &RC3 NE 0 THEN OSWTO CALL1 HAD RC &RC3\n    END\n  END\n /*                                                                  */\n  EXIT CODE(0)\n /*                                                                  */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VTAPE1": {"ttr": 783, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x008\\x01\\x04\\t?\\x01\\x04\\t?\\x10C\\x00\\x13\\x00\\x13\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-04-02T00:00:00", "modifydate": "2004-04-02T10:43:38", "lines": 19, "newlines": 19, "modlines": 0, "user": "MMSMAK"}, "text": "#!/bin/bash\n#\n#        PDSDOC *Shell script to archive FakeTape files using GZIP....*\n#\n# First check for an argument\n#\n if \u00dd \"$#\" -ne 1 \u00a8; then\n  echo \"usage: $0 <volser>\"\n  exit 1\n fi\n# now compress the tape to archive directory *UNFOLD NEXT LINE AT '+'*\n  nice -19 /usr/local/bin/gzip -1 -c -f /scratch6/$1.fake > +\n        /scratch5/$1.fake.gz 2>>/home/flexes/tserver1/VTAPE1.log\n if \u00dd \"$?\" -eq 0 \u00a8; then\n  rm /scratch6/$1.fake\n  exit 0\n fi\necho \"Tape $1 needs to be moved\"\nexit 1\n", "mimetype": "text/x-shellscript", "datatype": "ebcdic", "extension": ".x-shellscript"}, "VTAPE2": {"ttr": 785, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x12\\x01\\x04\\t?\\x01\\x04\\t?\\x10D\\x00\\x0e\\x00\\x0e\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-04-02T00:00:00", "modifydate": "2004-04-02T10:44:12", "lines": 14, "newlines": 14, "modlines": 0, "user": "MMSMAK"}, "text": "#!/bin/bash\n#\n#        PDSDOC *Shell script to unarchive FakeTape files using GZIP..*\n#\n# First check for an argument\n#\n if \u00dd \"$#\" -ne 1 \u00a8; then\n  echo \"usage: $0 <volser>\"\n  exit 1\n fi\n# now decompress the tape to active directory *UNFOLD NEXT LINE AT '+'*\n /usr/local/bin/gzip -c -d /scratch5/$1.fake.gz > +\n           /scratch6/$1.fake 2>>/home/flexes/tserver1/VTAPE2.log\nexit 0\n", "mimetype": "text/x-shellscript", "datatype": "ebcdic", "extension": ".x-shellscript"}, "ZDONE": {"ttr": 787, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x007\\x01\\x04\\t?\\x01\\x04\\t?\\x10!\\x00\\x0f\\x00\\x0f\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-04-02T00:00:00", "modifydate": "2004-04-02T10:21:37", "lines": 15, "newlines": 15, "modlines": 0, "user": "MMSMAK"}, "text": "PROC 1 VOL DEBUG\n /*                                                                  */\n /*      PDSDOC *TSSO CLIST TO PROCESS FAKETAPES USING GZIP..........*/\n /*                                                                  */\n  IF &DEBUG = DEBUG THEN CONTROL MSG LIST CONLIST SYMLIST FLUSH ASIS\n                    ELSE CONTROL NOMSG NOLIST FLUSH ASIS\n  SET PLACEMAT = 'OPS.FAKETAPE.T&VOL'\n /*   REXEC -l flexes -p abcdef1 180.7.16.36 nice -19 +              */\n /*            /usr/flexes/VTAPE1 T&VOL. &&                          */\n /*    SET RC1 = &LASTCC                                             */\n /*    IF &RC1 NE 0 THEN OSWTO CALL1 HAD RC &RC1                     */\n  DELETE &PLACEMAT\n /*                                                                  */\n  EXIT CODE(0)\n /*                                                                  */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ZSTAPE": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00$\\x01\\x04\\t?\\x01\\x04\\t?\\x10#\\x00\\x1e\\x00\\x1e\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-04-02T00:00:00", "modifydate": "2004-04-02T10:23:24", "lines": 30, "newlines": 30, "modlines": 0, "user": "MMSMAK"}, "text": "PROC 2 UNIT VOL DEBUG\n /*                                                                  */\n /*      PDSDOC *TSSO CLIST TO PROCESS SPECIFIC TAPES USING FAKETAPE.*/\n /*                                                                  */\n  IF &DEBUG = DEBUG THEN CONTROL MSG LIST CONLIST SYMLIST FLUSH ASIS\n                    ELSE CONTROL NOMSG NOLIST FLUSH ASIS\n  SET TYPE = &SUBSTR(6,&VOL)\n /*                                                                  */\n /* HERE INSERT REXEC CODE TO PERFORM FAKETAPE FUNCTIONS ON SERVER   */\n /*                                                                  */\n /*   REXEC -l flexes -p abcdef1 180.7.16.36 VTAPE2 T&VOL.           */\n  SELECT (&TYPE)\n  WHEN (1 | 3 | 5 | 7 | 9) DO\n    REXEC -l flexes -p abcdef1 180.7.16.36 echo mount +\n           &UNIT /scratch5/T&VOL..fake  | +\n           /usr/flexes/bin/flexescli localhost tserver1\n     SET RC3 = &LASTCC\n     IF &RC3 NE 0 THEN OSWTO CALL1 HAD RC &RC3\n    END\n  OTHERWISE DO\n    REXEC -l flexes -p abcdef1 180.7.16.36 echo mount +\n           &UNIT /scratch6/T&VOL..fake  | +\n           /usr/flexes/bin/flexescli localhost tserver1\n     SET RC3 = &LASTCC\n     IF &RC3 NE 0 THEN OSWTO CALL1 HAD RC &RC3\n    END\n  END\n /*                                                                  */\n  EXIT CODE(0)\n /*                                                                  */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ZTAPE": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00Y\\x01\\x04\\t?\\x01\\x04\\t?\\x10\\x19\\x00F\\x00F\\x00\\x00\\xd4\\xd4\\xe2\\xd4\\xc1\\xd2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-04-02T00:00:00", "modifydate": "2004-04-02T10:19:59", "lines": 70, "newlines": 70, "modlines": 0, "user": "MMSMAK"}, "text": "PROC 1 UNIT DEBUG\n /*                                                                  */\n /*      PDSDOC *TSSO CLIST TO PROCESS SCRATCH TAPES USING FAKETAPE..*/\n /*                                                                  */\n  IF &DEBUG = DEBUG THEN CONTROL MSG LIST CONLIST SYMLIST FLUSH ASIS\n                    ELSE CONTROL NOMSG NOLIST FLUSH ASIS\n  FREE FI(FAKE)\n  FREE ATTR(MARKER)\n  ATTR MARKER LRECL(80) BLKSIZE(0) DSORG(PS) RECFM(F B)\n  SET LOOP = 0\n  CA1: SET &LOOP = &LOOP + 1\n  IF &LOOP EQ 15 THEN GOTO LOOPING\n  CALL *(FSF)  '&LOOP'\n  SET FSC = &LASTCC\n  IF &FSC NE 0 THEN +\n    DO\n     OSWTO FSF HAD RC &FSC\n     GOTO LOOPING\n    END\n  SET PLACEMAT = 'OPS.FAKETAPE.T&FAKETAPE'\n  LISTDSI &PLACEMAT\n  IF &LASTCC EQ 0 THEN +\n     GOTO CA1\n  ALLOC FI(FAKE) DA(&PLACEMAT) USING(MARKER) +\n        SPACE(1) TRACKS UNIT(DISK) NEW CATALOG\n  IF &LASTCC NE 0 THEN +\n     GOTO CA1\n  SET TYPE = &SUBSTR(6,&FAKETAPE)\n /*                                                                  */\n /* HERE INSERT REXEC CODE TO PERFORM FAKETAPE FUNCTIONS ON SERVER   */\n /*                                                                  */\n  REXEC -l flexes -p abcdef1 180.7.16.36 echo +\n       \"VOL1&FAKETAPE\"  > asciifile\n  SET RC1 = &LASTCC\n  IF &RC1 NE 0 THEN OSWTO CALL1 HAD RC &RC1\n  SELECT (&TYPE)\n  WHEN (1 | 3 | 5 | 7 | 9) DO\n    REXEC -l flexes -p abcdef1 180.7.16.36  +\n         bin/asctfake -x ebcdic asciifile /scratch5/T&FAKETAPE..fake\n    SET RC2 = &LASTCC\n    IF &RC2 NE 0 THEN OSWTO CALL2 HAD RC &RC2\n   REXEC -l flexes -p abcdef1 180.7.16.36 echo mount +\n          &UNIT /scratch5/T&FAKETAPE..fake +\n          \"'maxwritesize=2000'\" | +\n          /usr/flexes/bin/flexescli localhost tserver1\n    SET RC3 = &LASTCC\n    IF &RC3 NE 0 THEN OSWTO CALL3 HAD RC &RC3\n    END\n  OTHERWISE DO\n    REXEC -l flexes -p abcdef1 180.7.16.36  +\n         bin/asctfake -x ebcdic asciifile /scratch6/T&FAKETAPE..fake\n    SET RC2 = &LASTCC\n    IF &RC2 NE 0 THEN OSWTO CALL2 HAD RC &RC2\n   REXEC -l flexes -p abcdef1 180.7.16.36 echo mount +\n          &UNIT /scratch6/T&FAKETAPE..fake +\n          \"'maxwritesize=2000'\" | +\n          /usr/flexes/bin/flexescli localhost tserver1\n    SET RC3 = &LASTCC\n    IF &RC3 NE 0 THEN OSWTO CALL3 HAD RC &RC3\n    END\n  END\n /*                                                                  */\n  FREE ATTR(MARKER)\n  FREE FI(FAKE)\n /* DELETE &PLACEMAT                                                 */\n  EXIT CODE(0)\n /*                                                                  */\n LOOPING: OSWTOH COULD NOT GET A SCRATCH TAPE\n  FREE ATTR(MARKER)\n  EXIT CODE(8)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT662/FILE662.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT662", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}