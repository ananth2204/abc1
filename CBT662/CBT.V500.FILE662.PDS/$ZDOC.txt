#
#        PDSDOC *Documentation on archive experiments.................*
#
When AGCO bought the TServer they specified an additional IBM EXP300
disk array. This provided an extra 640GB of space in a SCSI RAID
configuration specifically to accommodate FakeTape(tm) files.

I soon found that SCO Unixware 7 does not support disk partitions over
512GB in size, leaving me with one large and one small partition.  In
order to make the most use possible of this disk space I decided to
write the FakeTape file to the small partition (/scratch6) and then use
the GZIP program provided with UnixWare to archive the 'tape' to the
larger disk partition (/scratch5) which would become our back-end tape
vault. In order to be able to dump a 3390-3 to one tape I specified a
Flex-ES paramameter "maxwritesize=2500" on the MOUNT command sent to
flexes in the FTAPE clist.  I found that although SCO UnixWare itself
supported files larger than 2 Gb, not all the supplied utilities did.
GZIP level 1.2.4 supplied with SCO Unixware 7 was one program that did
not, so I had to install the Beta GZIP release 1.3.3 which included
large file support. This installed easily after I downloaded it from
                http://www.gzip.org/
I wrote a Unix shell script to perform the archiving and invoked that as
a background task at the end of the FDONE clist called at dismount time.
Another shell script invoked GZIP to decompress the zipped FakeTape file
back to /scratch6 when a particular volume serial was mounted using the
STAPE clist.  Obviously this had to run in real time before the MOUNT
for the 'tape'could be issued.

From a tape management viewpoint this scheme worked very well. It
provided an order of magnitude increase in the size of the tape library
and separated active tapes from archived ones. Unfortunately the CPU
cost of running GZIP was quite large, and MVS would more or less stop
whilst GZIP was running. To reduce the impact I used minimal levels of
compression and reduced the file size to 1Gb, giving me many more
multi-volume files. I attempted to lower the priority of the archiving
script which was running asynchronously anyway by calling GZIP with
"nice -19" and similarly invoked the shell script with "nice -19", but
to no avail. Even though Unix showed GZIP running with priority zero the
Users on IMS terminals experienced response times of several minutes
rather than sub-second.  This scheme had to be abandoned until the march
of Moore's Law provides me with enough horsepower to do it.

In order to maximise the space available for FakeTape files I re-sliced
the EXP300 into two equal partitions each of 320GB.  The TSSO clists
have been updated to put odd numbered tapes on /scratch5, everything
else on /scratch6.  That includes not only even numbered tapes, but also
tapes  with alphabetic serials or serials less than six characters long.
I have reverted to a tape size of 2GB which gives adequate capacity with
hopefully few problems. The members used in these experiments are;

VTAPE1  - Unix shell script to compress a FakeTape file.
VTAPE2  - Unix shell script to uncompress a FakeTape file.
ZTAPE   - A version of FTAPE
ZDONE   - A version of FDONE
ZSTAPE  - A version of STAPE

Note that the commands in the Unix shell scripts have been folded to fit
within this card-image PDS. In practice the commands must all be in one
(long) line. This is noted within the member.  The REXEC calls to invoke
these scripts have been left in the TSSO clists, but have been commented
out and the partiton balancing code added.
I welcome comments and suggestions.
