         TITLE 'BURN - TERMINATE A JOB OR ADDRESS SPACE'
********************************************************************
*        'BURN' - TSO COMMAND TO TERMINATE AN ADDRESS SPACE        *
********************************************************************
*
*        WRITTEN BY.     JOSEPH REICHMAN
*
*        DATE WRITTEN.   NOVEMBER 01 2012.
*
*        DATE UPDATED.
*
*        ATTRIBUTES.     RE-ENTRANT.  APF-AUTHORIZED TSO COMMAND.
*
*        DESCRIPTION.
*
*         THIS TSO COMMAND ALLOWS SYSTEMS PROGRAMMERS TO
*         TERMINATE NEARLY ANY ADDRESS SPACE IN THE SYSTEM
*         IF THAT ADDRESS SPACE IS CAUSING TROUBLE AND IT
*         IS DIFFICULT TO GET RID OF IT BY CONVENTIONAL MEANS.
*
*        SYNTAX.
*
*         BURN  Ý JOBNAME(jobname) | ASID(hhhh)  ¨
*               Ý JOB(jobname)     | ASID(hhhh)  ¨
*
*          Answer the prompts, and enter the job number to
*           be burned, in hex.
*
*          * is a wildcard in the JOBNAME, if entered as jjj*
*
*          If no JOB or ASID entered, then the program will
*           issue a message and terminate.
*
*          If J entered, the program will prompt for jobname.
*
*          If A entered, the program will prompt for ASID number.
*
*          If an incorrect prompt is entered, the program will
*           prompt for a correct answer.
*
*          If 3 incorrect tries are entered, then the program
*           will terminate.  (This is a convenient way to get out
*           of the program.)
*
*
*        LOG OF CHANGES.
*
*
*
********************************************************************
         EJECT
*                                BEGIN WORK AREA FOR REENTRANCY
         WSDSECT
MYPPL    DS   7F
WSANS    DS    F
WSASID   DS    X
         DS    X
WS_ASID  DS    PL2
WORK_ASID DS   CL4                     WORK ASID
         DS    X
RTMSAVE  DS    CL72
WSJOB    DS    CL8
INNAME   DC    CL8' '
SAVE2    DS    F
DBLWD    DS    D
ASID_BUFF DS   CL80
BURNED    DS   CL80
*
BURNCMD  DC    CL5'BURN '
ASKMSG   DC    CL40'NOT A TSO USER STARTING. OK?'
PPL_ECB  DS    F
MODESET_LIST MODESET KEY=ZERO,MODE=SUP,MF=L
*
MODESET_LIST1 MODESET KEY=NZERO,MODE=PROB,MF=L
*
REPLY    DS    CL10
ERRMSG   DS    0CL50
         ORG   ERRMSG
         DC    CL50' '
         ORG   ERRMSG
EMSG     DC    C'BURN000I:           NOT FOUND'
         ORG
SAVE14T3 DS     6F
ESTAELST ESTAEX ,MF=L              ESTAEX PARAMETER LIST                  92
WRKASID  DC    CL4' '
         ESTPARM
         WSEND
*                                  END WORK AREA FOR REENTRANCY
BURN     BEGIN  BASE=RBASE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*                                  TEST IF PROGRAM IS RUN AUTHORIZED.
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         STM    R14,R3,SAVE14T3    TESTAUTH USES THESE REGISTERS
         TESTAUTH FCTN=1           ARE WE AUTHORIZED?
         LTR    R15,R15            TEST THE RETURN CODE.
         BNZ    NOTAUTHM           NOT ZERO, TELL NOT AUTHORIZED.
         LM     R14,R3,SAVE14T3    RESTORE REGS USED BY TESTAUTH
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
RCPPL    EQU    7                  COMMAND PROCESSOR PARAMETER LIST
RPPL     EQU    8                  PARSER PARAMETER LIST
RSAVE    EQU    13
RBASE    EQU    12
RCVT     EQU    11
RASCB    EQU    10
RASVT    EQU    9
RCNT     EQU    8
RPSCB    EQU    6
RPDL     EQU    5
XLNK     EQU    14
         SPACE  5
         L      R1,4(,R13)                   GET ORIGINAL R13
         L      R1,24(,R1)                   POINT TO ORIGINAL R1
         USING  CPPL,RCPPL
         LR     RCPPL,R1                     RCPPL
         LA     RPPL,MYPPL                   PARSE PARAMETER LIST
         USING  PPL,RPPL                     USING
         LA     R0,PPL_WK_LEN
         STORAGE OBTAIN,LENGTH=(R0),SP=0     GET STORAGE FOR PPL
         ST    R1,PPLUWA                     STORE WORKREA
         MVC   ASIDS-PPL_WORK(4,R1),=4X'FF'  MOVE ENDPTR
         USING PPL_WORK,R1
         L     R3,X'10'                      CVT
         USING CVT,R3
         L     R3,CVTASVT                    ASVT POINTER
         DROP  R3
         USING ASVT,R3
         DROP  R1
         MVC    PPLUPT,CPPLUPT               PICK IT UP
         MVC    PPLECT,CPPLECT               FROM CP PARM
         XC     PPL_ECB,PPL_ECB               PRIME
         LA     R1,PPL_ECB
         ST     R1,PPLECB
         MVC    PPLPCL,=A(CANCEL)            IKJPARMS
         LA     R1,WSANS                     ANSWER AREA
         ST     R1,PPLANS
         XC     WSANS,WSANS
         MVC    PPLCBUF,CPPLCBUF             CPPL BUF
         XC     PPLVEWA,PPLVEWA              * NO VEWA
         CALLTSSR EP=IKJPARS,MF=(E,PPL)
VALIDATE DS    0H
         MVC   WSJOB,=8C' '                  INITIALIZE TO SPACES
         L     RPDL,WSANS
         USING  PARSEAT,RPDL
*
*        VALIDATE JOBNAME
*
         CLI   JOBNAME+1,0              Q. JOBNAME NAME ENTERED
         BE    GET_ASID                 NO; CHECK ASID
         TM    JOBX+6,X'80'             Q. JOBNAME ENTERED
         BZ    GET_ASID                 A; NO
         L     R1,JOBX                  GET JOB PARAMETER
         LH    R2,JOBX+4                GET LENGTH
         BCTR  R2,0
         EX    R2,MOVEJOB
         B     GET_ASID
MOVEJOB  MVC   WSJOB(0),0(R1)
*
*        VALIDATE ASID
*
GET_ASID DS    0H
         CLI   ASID+1,0                 Q. ONLY NAME ENTERED
         BNE   LIST_ASID                NO; CHECK IF THERE IS A JOB
         TM    ASIDX+6,X'80'            ASID ENTERED
         BNZ   LIST_ASID
         CLC   WSJOB,=8C' '             Q. ANYTHING ENTERED
         BNE   LIST_ASID
         TPUT  NOPARM,L'NOPARM          NO PARAMS ENTERED
         B     FINISH_UP
LIST_ASID DS   0H
         L     R11,PPLUWA               GET PARSE PARAMETER LIST
         USING PPL_WORK,R11             ADDRESS DSECT
         CLC   JOBERCTR,=H'3'           MAX REACHED?
         BE    FINISH_UP                GET OUT
         CLC   ASIDERCTR,=H'3'
         BE    FINISH_UP
         LA    R10,ASIDS
         TPUT  ASIDLIST,L'ASIDLIST      ASID LIST MESSAGES
         LA    R9,0                     R9 --> PUT CTR
ADDR_LOOP DS  0H
         CLC  0(4,R10),=X'FFFFFFFF'     Q. END
         BE   JOB_END                    YES
         TPUT  0(R10),27                WRITE OUT ASID
         LA    R10,27(,R10)             NEXT ENTRY
         B     ADDR_LOOP
JOB_END  DS    0H
         DROP  R11
         TPUT  BURNMESS,L'BURNMESS
         TPUT  VALHEX,L'VALHEX
TGET     DS    0H
         TGET  ASID_BUFF,L'ASID_BUFF
         OC    ASID_BUFF(L'ASID_BUFF),=80X'40'
*------------------------------------------------------------*
*            R9 --> INPUT CTR YOU GET 3 CHANCES              *
*                    FOR ALL ERRORS                          *
*------------------------------------------------------------*
         LTR   R1,R1                    Q. ANY INPUT
         BNZ   HEX_ASID
         AH    R9,=H'1'                 ADD 1 TO COUNTER
         CH    R9,=H'3'                 3 TIMES ?
         BE    FINISH_UP                GO HOME
         B     JOB_END                  TRY AGAIN
HEX_ASID DS    0H
         CH    R1,=H'4'                 4 OR LESS ENTERED
         BH    MOVE_ASID                NO; CHECK IF ONLY 1
*------------------------------------------------------------*
*            INPUT IS 4 OR LESS                              *
*------------------------------------------------------------*
         MVC   WORK_ASID,=4CL1'0'       INITIALIZE TO ZEROS
         LA    R2,ASID_BUFF             POINT TO END OF BUFFER
         LA    R2,0(R1,R2)              POINT TO END
         BCTR  R2,0                     DOWN BY 1
         LA    R3,WORK_ASID+3           POINT TO END WORK
ASID_LP   DS   0H
         MVC   0(1,R3),0(R2)            MOVE LAST DIGIT
         BCTR  R3,0                     DOWN BY 1
         BCTR  R2,0                     DITTO
         BCT   R1,ASID_LP               LOOP THRU
         LA    R15,VAL_ASID             VALIDATE USR INP
         BALR  R14,R15                  VALIDATE
         LTR   R15,R15
         BZ    CONV_ASID                CONVERT IT
         AH    R9,=H'1'                 ADD 1 TO CTR
         CH    R9,=H'3'                 5 TIMES
         BE    FINISH_UP                GO HOME
         B     INVADD                   ISSUE MESSAGE
*------------------------------------------------------------*
*            INPUT IS GREATER THEN 4                         *
*------------------------------------------------------------*
MOVE_ASID DS   0H
         SH    R1,=H'4'                 LEAVE 4 BYTES
         LA    R2,ASID_BUFF             POINT TO BUFFER
         LA    R2,0(R1,R2)              POINT TO SIGNIFICANT
         MVC   WORK_ASID,0(R2)          MOVE IT
         LA    R15,VAL_ASID             VALIDATE USR INPUT
         BALR  R14,R15                  VALIDATE
         LTR   R15,R15
         BZ    CONV_ASID                CONVERT IT
         AH    R9,=H'1'                 ADD 1 TO CTR
         CH    R9,=H'3'                 3 TIMES
         BE    FINISH_UP                GO HOME
         B     INVADD                   ISSUE MESSAGE
CONV_ASID DS   0H
         MVC   WRKASID(4),WORK_ASID     SAVE UNTRANSLATED ASID
         TR    WORK_ASID(4),TRTABLE     TRANSLATE TO HEX
         PACK  WSASID(3),WORK_ASID(5)   STRIP SIGN
CALL_TERM DS   0H
         MVC   MODESET_LIST(MODESET_LEN),MODESET_CONS

         MODESET MF=(E,MODESET_LIST)

         LH   R10,WSASID                SET ASID
         LR   R9,R13                    SAVE R13
         LA   R13,RTMSAVE               RTM SAVE AREA
         CALLRTM TYPE=MEMTERM,ASID=(R10),COMPCOD=100
RETRYC03 DS    0H                       retry from c03
         LR    R13,R9                   RESTORE R13
         LTR   R15,R15                  WAS IT BURNED
         BZ    BURNY                    YES IT WAS
         MVC   BURNED,BURNNO            MOVE IN MESSAGE
         LA    R10,BURNED               GET MESSAGE
         MVC   JOBNO-BURNNO(8,R10),WSJOB     MOVE IN JOB
         MVC   ASIDNO-BURNNO(4,R10),WRKASID
         TPUT  BURNED,L'BURNED
         B     SETOFF                   SET AUTHORIZATION OFF
BURNY    DS    0H
         MVC   BURNED,BURNOK
         LA    R10,BURNED               MOVE MESSAGE
         MVC   JOBYES-BURNOK(8,R10),WSJOB
         MVC   ASIDYES-BURNOK(4,R10),WRKASID
         TPUT  BURNED,L'BURNED
SETOFF   DS    0H
         MVC   MODESET_LIST1(MODESET_LEN1),MODESET_CONS1
*
         MODESET MF=(E,MODESET_LIST1)
         B     FREENOUT
NOTAUTHM DS    0H
         TPUT  AUTHMSG,L'AUTHMSG
         EXIT  RC=0
*
FREENOUT DS    0H                  FREE GOTTEN STORAGE AND GET OUT.

*
FINISH_UP DS   0H
         LA    R0,PPL_WK_LEN
         LA    RPPL,MYPPL
         L     R1,PPLUWA
*
         STORAGE RELEASE,LENGTH=(R0),ADDR=(R1),SP=0 RELEASE WORKAREA    =(R0),AD
*
         EXIT  RC=0
*
*
*
INVADD   DS    0H
         TPUT  INVADDR,L'INVADDR
         B     TGET
*
*
*
ASIDLOOK DS    0D
         STM   R14,R12,12(R13)     STORE USER REGISTERS
         LR    R12,R15             R12 BASE AT THIS POINT
         USING ASIDLOOK,R12        ADDRESS EXIT
         USING ASCB,R6             ASCB ADDRESS
         L     R2,0(,R1)           GET PDE ENTRY
         L     R3,X'10'            CVT
         USING CVT,R3
         L     R3,CVTASVT          ASVT POINTER
         DROP  R3
         USING ASVT,R3
         L     R4,ASVTMAXU         MAXIMUM ASID
         LA    R5,ASVTFRST         STARTING ASID
         XR    R3,R3               CLEAR R3
         LH    R3,4(,R2)           LENGTH
         BCTR  R3,0                for execute
         L     R2,0(,R2)           GET TEXT
         L     R7,4(,R1)           GET WORK AREA
         USING PPL_WORK,R7
         STH   R3,PARMLEN          SAVE LENGTH
         LA    R11,ASIDS           GET ASID ENTRY
*
*
*
         LA    R2,1(R3,R2)         POINT TO END
         BCTR  R2,0                BACK ONE
         BCTR  R2,0                ONE MORE
         MVC   WORKASID,=4C'0'     INITIALIZE ASID
         MVC   WORKASID+2(2),0(R2) move asid in
         TR    0(2,R2),TRTABLE     TRANSLATE A - F -> X'0A - 0F'
         PACK  WSASID(2),0(3,R2)   MAKE ASID 1 BYTE
         XR    R8,R8               CLEAR R8
         IC    R8,WSASID           GET ASID IN QUESTION
         SLL   R8,2                MULTIPLY BY 4
         LA    R5,0(R8,R5)         POINT TO ASCB ENTRY
         LA    R15,GETASCB         GET ASCB ENTRY
         BALR  R14,R15
         CLC   0(4,R6),=C'ASCB'    Sanity check
         BE    SET_JOB#            OK
         TPUT  INV_ADD,L'INV_ADD   invalid asid
         LH    R9,ASIDERCTR        GET ERROR CTR
         CH    R9,=H'3'            More than 3 ?
         BL    ASIDRE              No. Retry.
         LA    R15,12              Yes. Code 12.
         B     RETURN
ASIDRE   DS    0H
         AH    R9,=H'1'            1 MORE
         STH   R9,ASIDERCTR        STORE IT
         LA    R15,8               Code 8.
         B     RETURN
SET_JOB# DS    0H
         LA    R15,SET_JOBNAME
         BALR  R14,R15
         CLC   0(4,R11),=4X'FF'    Was Jobname entered
         BE    SET_IT              No set it
         LA    R10,ASIDS           Get asid
IS_IT    DS    0H
         CLC   ASID#-ASIDS(4,R10),WORKASID
         BNE   CK_END              IT IS OKAY
         LA    R10,JOB#-ASIDS(R10) Point to asid
         LA    R11,ASIDS           Point to beginning
         B     SET_IT
CK_END   DS    0H
         CLC   0(4,R10),=X'FFFFFFFF'
         BE    MISMAT              MisMatch
         LA    R10,27(,R10)        Next
         B     IS_IT
MISMAT   DS    0H
         TPUT  PARMMIS,L'PARMMIS
         LH    R9,ASIDERCTR        Get Error counter
         CH    R9,=H'3'            Max Error
         BL    SETRE               Reprompt
         LA    R15,12              Parameter mismatch
         B     RETURN
SETRE    DS    0H
         AH    R9,=H'1'            1 MORE
         STH   R9,ASIDERCTR        STORE IT
         LA    R15,8               Parameter mismatch
         B     RETURN
SET_IT   DS    0H
         LA    R15,SET_ENTRY       SET TABLE ENTRY
         BALR  R14,R15             GO FOR IT
         XR    R15,R15             GOOD RETURN
RETURN   DS    0H
         L     R14,12(,R13)
         LM    0,12,20(R13)
         BR    R14
*
*
*
ERROR0   DS    0H
         MVC   ERRMSG+24(8),=CL8'BURNED'
ERROR    DS    0H
         MVC   ERRMSG+11(8),INNAME
         TPUT  ERRMSG,50
         B     RETURN
*
*  JOBX EXIT
*
JOBLOOK  DS    0D
         STM   R14,R12,12(R13)     STORE USER REGISTERS
         LR    R12,R15             R12 BASE AT THIS POINT
         USING JOBLOOK,R12         ADDRESS EXIT
         USING ASCB,R6
         L     R2,0(,R1)           GET PDE ENTRY
         XR    R3,R3               CLEAR R3
         LH    R3,4(,R2)           LENGTH
         L     R2,0(,R2)           GET TEXT
         BCTR  R3,0                FOR EXECUTE
         L     R7,4(,R1)           GET WORK AREA
         STH   R3,PARMLEN          SAVE LENGTH
         LA    R11,ASIDS           ADDRESS DSECT
         L     R3,X'10'            CVT
         USING CVT,R3              ADDRESS CVT
         L     R3,CVTASVT          ASVT POINTER
         DROP  R3
         USING ASVT,R3
         L     R4,ASVTMAXU         MAXIMUM ASID
         LA    R5,ASVTFRST         STARTING ASID
         MVC   JOBNME,=8C' '       SPACE IT OUT
         LH    R3,PARMLEN          GET LENGTH
         EX    R3,SET_JOB          MOVE JOB
JOB_NAME DS    0H
         LA    R15,GETASCB         RTN ENTRY POINT
         BALR  R14,R15             GET ASCB
         LTR   R4,R4               ALL DONE
         BNZ   GET_JOB
         LA    R15,ASIDS
         CR    R11,R15             GET ANY JOBS
         BE    JOB_ERR             NO; JOBNAME NOT FOUND
         B     GOOD_RET1           OTHERWISE RETURN
GET_JOB  DS    0H
         L     R10,ASCBJBNI        INITIATOR JOB
         LTR   R10,R10             ANY ADDRESS
         BNZ   IS_JOB
         L     R10,ASCBJBNS        STARTED TASK
IS_JOB   DS    0H
         TRT   JOBNME,ASTBL        LOOK FOR AN ASTERISK
         BZ    NOWILD
         LA    R15,JOBNME          GET BEGINNING ADDRESS
         SR    R1,R15              FIND TRUE LENGTH
         LA    R15,SET_ENTRY       ADD TO TABLE
         BCTR  R1,0                DECREMENT BY 1
         B     EXEC                EXEC COMPARE
NOWILD   DS    0H
         LA    R1,7                8 bytes trailing blanks
EXEC     EX    R1,COMP             excute compare
         BNE   JOB_NAME
*
*   WILDCARD NO NEED TO CHECK ENTRY FOR VALID ASID
*
         CLM   R2,B'0001',=C'*'    Wild Card Found?
         BE    SET_IT#             Then set it
         CLC   0(4,R11),=4X'FF'    Asid entered
         BE    SET_IT#             No; set entry
         UNPK  WORKASID(5),ASCBASID-ASCB(3,R6)
         TR    WORKASID,TRTBL
         CLC   ASID#-ASIDS(4,R11),WORKASID
         BE    SET_IT#             IT IS OKAY
         TPUT  PARMMIS,L'PARMMIS
         LH    R9,JOBERCTR         Get error counter
         CH    R9,=H'3'            More than 3
         BL    JOBRE
         LA    R15,12
         B     RETURN1
JOBRE    DS    0H
         AH    R9,=H'1'            ADD 1
         STH   R9,JOBERCTR         ADD IT
         LA    R15,8               PARAMETER MISMATCH
         B     RETURN1
SET_IT#  DS    0H
         LA    R15,SET_ENTRY       ADD TO TABLE
         BALR  R14,R15             ADD IT
         B     JOB_NAME            LOOK FOR MORE
COMP     CLC   0(0,R10),JOBNME     Q-IS THIS THE JOB NAME WE LOOK FOR?
         LA    R15,4               RETURN CODE 4
         B     RETURN1             FINISH UP
*
JOB_ERR  DS    0H
         TPUT  NOJOB,L'NOJOB
         LH    R9,JOBERCTR         GET ERROR CTR
         CH    R9,=H'3'            MAX ERROR COUNTER?
         BL    REJOB               RE-PROMPT
         LA    R15,12
         B     RETURN1             GO BACK
REJOB    DS    0H
         AH    R9,=H'1'            1 MORE
         STH   R9,JOBERCTR         STORE IT
         LA    R15,8
         B     RETURN1
GOOD_RET1 DS    0H
         XR    R15,R15             GOOD RETURN
RETURN1  DS    0H
         L     R14,12(,R13)
         LM    0,12,20(R13)
         BR    R14
SET_JOB  MVC   JOBNME(0),0(R2)
*
*   GETASCB GET ASCB ENTRY POINTED TO BY ASVT
*
GETASCB  DS    0H
         DROP   R12              DROP BASE
         USING  *,R15
*       R6 --> ASCB
*  CHECK VECTOR TABLE ADDRESS FOR VALID ADDRESS
*
*
SCAN_ASVT DS   0H
         TM    0(R5),X'80'     ASCB USED
         BO    ASCB_NEXT
         L     R6,0(,R5)       GET ASCB ENTRY
         LTR   R6,R6           Q. AVALID ADDRESS
         BNZ   BUMP_ASVT       SCAN ASVT
         XR    R4,R4           CLEAR ASVT COUNT
         BR    XLNK            GO BACK
BUMP_ASVT DS   0H
         A     R5,=F'4'        NEXT
         BCTR  R4,0            DECREMENT MAX COUNT
         BR    XLNK            GO BACK
ASCB_NEXT DS   0H
         A     R5,=F'4'        NEXT
         BCT   R4,GETASCB      NEXT
         BR    XLNK
*
*    ASID FOUND SET THE JOBNAME
*
SET_JOBNAME DS 0H
         USING  *,R15
         L    R10,ASCBJBNI     INITIATOR JOB
         LTR  R10,R10          ANY ADDRESS
         BNZ  MOVE_JOB
         L    R10,ASCBJBNS     STARTED TASK
MOVE_JOB DS   0H
         MVC  JOBNME,0(R10) MOVE JOBNAME
         BR   XLNK
*
*   ASID OR JOBNAME FOUND SET IT IN THE TABLE
*
SET_ENTRY DS   0H
         USING  *,R15
         MVC   0(5,R11),=C'ASID='        MOVE ASID LITERAL
         UNPK  5(5,R11),ASCBASID(3)      UNPK ASID
         TR    5(4,R11),TRTBL
         MVI   10(R11),X'40'
         MVC   11(8,R11),=C'JOBNAME='
         MVC   19(8,R11),0(R10)          MOVE JOB IN
         LA    R11,27(,R11)              NEXT
         MVC   0(4,R11),=4X'FF'          SET END MARKER
         BR    R14
*
*     VALID DATE THAT THE ASID IS IN THE TABLE
*
VAL_ASID DS   0H
         USING *,R15
         L     R7,PPLUWA          RESET ADDRESSING
         LA    R10,ASIDS          GET LIST OF ASIDS
ASID_LOOP DS   0H
         CLC   0(4,R10),=4X'FF'   END OF TABLE
         BE    ERR_INPUT          NOT ON LIST
         CLC   WORK_ASID,5(R10)   Q, ON LIST
         BE    ONLIST             YES;
         LA    R10,27(,R10)       BUMP UP TABLE
         B     ASID_LOOP
ERR_INPUT DS   0H
         LA    R15,4              ERROR
         BR    R14                GO BACK
ONLIST   DS    0H
         MVC   WSJOB,JOB#-ASIDS(R10) MOVE JOBNAME
         XR    R15,R15            EVERYTHING OK
         BR    R14                GO BACK
*
INVADDR  DC    C'ASID ENTERED NOT ON LIST. PLEASE RE-ENTER...'
BURNMESS DC    C'WHICH ADDRESS SPACE WOULD YOU LIKE TO BURN ?'
VALHEX   DC    C'  ENTER ITS VALUE IN HEX:'
INVASID  DC    C'ENTER VALID HEX CHARACTERS FOR ASID:'
NOPARM   DC  C'AT LEAST ONE PARAMETER MUST BE ENTERED: JOBNAME OR ASID'
ASIDLIST DC    C'THE FOLLOWING ASID ARE VALID FOR THE JOBNAME:'
LOADFAIL DC    C'Recovery routine load failed.....'
INV_ADD  DC    C'ASID NOT FOUND ..'
JOBNTFD  DC    C'JOBNAME NOT FOUND..'
AUTHMSG  DC    C'IKJ56500I COMMAND BURN NOT FOUND'
PARMMIS  DC    C'PARAMETER MISMATCH'
NOJOB    DC    C'JOBNAME NOT FOUND'
BURNOK   DS    0CL80
         DC    C'JOBNAME '
JOBYES   DC    C'XXXXXXXX'
         DC    C' FOR '
         DC    C'ASID '
ASIDYES  DC    CL4' '
         DC    C' BURNED'
RESOK    EQU   *-BURNOK
         DC    (80-RESOK)C' '
BURNNO   DS    0CL080
         DC    C'JOBNAME '
JOBNO    DC    C'XXXXXXXX'
         DC    C' FOR '
         DC    C'ASID '
ASIDNO   DC    CL4' '
         DC    C' NOT BURNED'
RESNO    EQU   *-BURNNO
         DC   (80-RESNO)C' '
TRTABLE  DS    0CL255
         DC    193X'00'
         DC    X'0A0B0C0D0E0F'
         DC    41X'00'
         DC    C'0123456789'
*
TRTBL    DC   0CL255
         DC   240X'00'
         DC   C'0123456789ABCDEF'
*
ASTBL    DC   255X'00'
         ORG  ASTBL+C'*'
         DC   C'*'
         ORG
*
MODESET_CONS MODESET KEY=ZERO,MODE=SUP,MF=L
MODESET_LEN EQU *-MODESET_CONS
*
MODESET_CONS1 MODESET KEY=NZERO,MODE=PROB,MF=L
MODESET_LEN1 EQU *-MODESET_CONS1
*
         LTORG
         DS    0D
CANCEL   IKJPARM DSECT=PARSEAT
JOBNAME  IKJKEYWD
         IKJNAME  'JOBNAME',SUBFLD=JOB
ASID     IKJKEYWD
         IKJNAME  'ASID',SUBFLD=ASIDF
DUMP     IKJKEYWD
         IKJNAME  'DUMP',SUBFLD=DUMPF
*
*   SUBFIELDS
*
JOB     IKJSUBF
JOBX     IKJIDENT 'JOBNAME',FIRST=ANY,MAXLNTH=8,PROMPT='JOBNAME',VALIDCX
               K=JOBLOOK,OTHER=ANY,ASTERISK
ASIDF    IKJSUBF
ASIDX    IKJIDENT 'ASID',FIRST=ALPHANUM,OTHER=ALPHANUM,PROMPT='ASID',VAX
               LIDCK=ASIDLOOK
DUMPF    IKJSUBF
DUMPX    IKJIDENT 'DUMP',FIRST=ALPHA,MAXLNTH=3
         IKJENDP
ADDR     DS    0H
MOVE     MVC   INNAME(8),0(R2)      IF A TSO COMMAND PARAMETER
CLCCMD   CLC   0(0,R2),BURNCMD      IS IT BURN COMMAND?
PACK     PACK  PAREA(0),INNAME(0)
K8       DC    H'8'
PAREA    DC    D'0'
K70      DC    X'00000070'
         CVT   DSECT=YES,LIST=YES
 EJECT
         IHAASVT
 EJECT
         IHAASCB
 EJECT
         IKJCPPL
 EJECT
         IKJPPL
PPL_LEN  EQU   *-PPL
PPL_WORK   DSECT
JOBNME     DS   CL8
PARMLEN    DS   H
WORKASID   DS   CL4
ASIDERCTR  DS   H
JOBERCTR   DS   H
           DS   C
ASIDS      EQU  *
ASIDLIT    DS   CL5
ASID#      DS   CL4
           DS   X
JOBLIT     DS   CL9
JOB#       DS   CL8
PPLLEN     EQU  *-ASIDS
           DS    100CL(PPLLEN)        100 ENTRIES
PPL_WK_LEN EQU  *-PPL_WORK
 EJECT
         IKJPSCB
         END   BURN
