{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011059000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 470288, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 15, "INMDSNAM": "CBT.V500.FILE024.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE024.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\n\\x05'", "DS1TRBAL": "b'\\xa8\\xf0'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x009\\x00\\x0b\\x00:\\x00\\x06\\x00\\x0b'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x00\\t\\x01\\x19!O\\x01\\x19!O\\x15P\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-08-02T00:00:00", "modifydate": "2019-08-02T15:50:09", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-498"}, "text": "REGULAR CBT TAPE - VERSION 498    FILE:  024\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT498.FILE024\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 58 MEMBERS COUNTED; CUMULATIVE SIZE IS 4,183 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   08/02/19    15:50:09    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00k\\x00k\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:39", "lines": 107, "newlines": 107, "modlines": 0, "user": "FILE024"}, "text": "************************************************************************\n***                     DUMP TRANSFER UTILITY                        ***\n************************************************************************\n\n  'XFERDUMP' IS A SOFTWARE SYSTEM THAT ARCHIVES 'SYS1.DUMPXX' DATA\nTO TAPE FOR A SPECIFIED PERIOD OF TIME, PLUS AUTOMATICALLY CLEARING\nTHE DUMP DATASETS AS WELL AS MAINTAINING AN ENTRY IN AN 'INDEX'\nDATASET OF THE DUMP TITLES WITH THEIR ASSOCIATED TAPE VOLSER TO WHICH\nTHEY WERE ARCHIVED.\n\n  THE ORIGINAL SOFTWARE WAS WRITTEN BY HOWARD DEAN OF 'AMERICAN\nPRESIDENTIAL LINES', CALIFORNIA.  THE PRESENT SOFTWARE IN PRODUCTION\nAT MCI TELECOMMUNICATIONS CORPORATION HAS BEEN MODIFIED QUITE EXTEN-\nSIVELY AS WELL ADDITION OF OTHER DESIRABLE FEATURES TO SUCH A SYSTEM.\n\nBELOW IS A LIST OF ALL THE MEMBERS WITHIN THIS LIBRARY &\nA BRIEF DESCRIPTION:\n\n\nMODULE      DESCRIPTION\n========    ============================================================\n\n$$DOC       THIS MEMBER\nAPUT        MACRO TO INVOKE 'EPUTL' INSTEAD\n            OF TPUT\nASMHC       ASSEMBLE ONLY FOR XFERDUMP PROGRAMS\nASMHCL      ASSEMBLE/LINK FOR XFERDUMP PROGRAMS\nBXFER       CLIST FOR INVOKING ISPF 'BROWSE'\n            FROM EITHER READY MODE OR AN ISPF\n            ENVIORNMENT.\nCALL#       INTERNAL STRUCTURED MACROS USED\n            BY XFER UTILITY\nCPPL        INNER MACRO FOR TSOENTER/TSOLEAVE\nCSPL        INNER MACRO FOR TSOENTER/TSOLEAVE\nDATA#       INTERNAL STRUCTURED MACROS USED\n            BY XFER UTILITY\n            INTERNAL STRUCTURED MACROS USED BY XFER UTILITY\nDO          INTERNAL STRUCTURED MACROS USED BY XFER UTILITY\nDOWHILE     INTERNAL STRUCTURED MACROS USED BY XFER UTILITY\nDOWHLOR     INTERNAL STRUCTURED MACROS USED BY XFER UTILITY\nELSE        INTERNAL STRUCTURED MACROS USED BY XFER UTILITY\nENDDO       INTERNAL STRUCTURED MACROS USED BY XFER UTILITY\nENDIF       INTERNAL STRUCTURED MACROS USED BY XFER UTILITY\nEND#        INTERNAL STRUCTURED MACROS USED BY XFER UTILITY\nENDDATA#    INTERNAL STRUCTURED MACROS USED BY XFER UTILITY\nENTRE#      INTERNAL STRUCTURED MACROS USED BY XFER UTILITY\nEOJ         EXIT  RETURN MACRO - NON/TSO\n            ENVIORNMENT\nEPUTL       PUTLINE SUBROUTINE TO ACCEPT PARM\n            LIST \"ABOVE THE LINE\"\nEXFER       CLIST FOR INVOKING ISPF 'EDIT'\n            FROM EITHER READY MODE OR AN ISPF\n            ENVIRONMENT\nEXIT#       INTERNAL STRUCTURED MACROS USED BY XFER UTILITY\nGENC#       INTERNAL STRUCTURED MACROS USED BY XFER UTILITY\nIEXIT#      INTERNAL STRUCTURED MACROS USED BY XFER UTILITY\nIF          INTERNAL STRUCTURED MACROS USED BY XFER UTILITY\nIFOR        INTERNAL STRUCTURED MACROS USED BY XFER UTILITY\nINIT#       INTERNAL STRUCTURED MACROS USED BY XFER UTILITY\nINUSE       INNER MACRO FOR\n            TSOENTER/TSOLEAVE/SETREG/EOJ\nIOPL        INNER MACRO FOR TSOENTER/TSOLEAVE\nJULDATE     INNER CLIST FOR EXTRACTING\n            TIME/DATE/DAY OF WEEK\nLUSE        INNER MACRO FOR\n            TSOENTER/TSOLEAVE/SETREG/EOJ\nLDROP       INNER MACRO FOR\n            TSOENTER/TSOLEAVE/SETREG/EOJ\nMAKEDAY     CLIST TO INITIALIZE DUMP TRANSFER\n            PDS\nREGS        MACRO TO SET REGISTERS\nSEQCK       INTERNAL MACROS\nSETREG      ENTRY SETUP MACRO  - NON/TSO\n            ENVIORNMENT\nSMFID       SUBROUTINE TO MAP THE 'SMC' & RETRIEVE THE SYSTEM SMFID\nSS#XFER     CLIST THAT 'FRONT-ENDS' THE \"XIX\" CLIST FOR ISPF DIALOG MNGR\nSS#XFR00    ISPF PANEL FOR INVOKCATION OF THE \"XIX\" CLIST\nSSXFR00     ISPF MSGS FOR THE 'XFERDUMP' ISPF DIALOG FUNCTION\nTSOENTER    MACRO TO SET UP COMMAND PROCESSOR\n            ENVIRONMENT\nTSOLEAVE    MACRO TO RETURN TO TMP (USED\n            W/TSOENTER)\nUNTIL       INTERNAL STRUCTURED MACROS\nUNTILOR     INTERNAL STRUCTURED MACROS\nXABSM       BRANCH AND SET MODE MACRO FOR\n            MVS/XA 31BIT CODING\nXFERCPU     TSO COMMAND SUBROUTINE TO DETERMINE SMFID\nXFERJOB     JOB TO TRANSFER SYSTEM DUMP\n            DATASET TO TAPE\nXFERINST    HINTS ON INSTALLATION OF THE DUMP\n            TRANSFER UTILITY\nXFERUTIL    TSO COMMAND SUBROUTINE TO\n            DETERMINE DUMP DATASET VOLUME\n            SERIAL.\nXFERVOL     SUBROUTINE OF XFERUTIL TO\n            DETERMINE VOLUME SERIAL #\nXFERWTO     PROGRAM TO ISSUE WTO FROM SYSIN\n            (USED WITH CLISTS)\nXFER1       CLIST INVOKED UNDER TMP IN BATCH\n            TO UPDATE XFER PDS\nXFER2       CLIST INVOKED UNDER TMP IN BATCH\n            TO UPDATE XFER PDS\nXFR1DUMP    PRDMP SYSIN CONTROL CARD MEMBER\nXFR2DUMP    PRDMP SYSIN CONTROL CARD MEMBER\nXIX         CLIST TO INQUIRE INTO THE DUMP\n            TITLE DATABASE\nXIXHELP     HELP MEMBER FOR XIX CLIST\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE024": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x00U\\x01\\x19!O\\x01\\x19!O\\x15I\\x00\\x12\\x00\\x12\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-08-02T00:00:00", "modifydate": "2019-08-02T15:49:55", "lines": 18, "newlines": 18, "modlines": 0, "user": "CBT-498"}, "text": "//***FILE 024 IS A COPY OF XFERDUMP FROM MCI.  THIS FILE            *   FILE 024\n//*           IS IN IEBUPDTE SYSIN FORMAT.  FOR ADDITIONAL          *   FILE 024\n//*           INFORMATION SEE THE MEMBER CALLED $$DOC.              *   FILE 024\n//*                                                                 *   FILE 024\n//*           XFERDUMP IS A SOFTWARE SYSTEM THAT ARCHIVES           *   FILE 024\n//*           'SYS1.DUMPXX' DATA TO TAPE FOR A SPECIFIED PERIOD     *   FILE 024\n//*           OF TIME, PLUS AUTOMATICALLY CLEARING THE DUMP         *   FILE 024\n//*           DATASETS AS WELL AS MAINTAINING AN ENTRY IN AN        *   FILE 024\n//*           'INDEX' DATASET OF THE DUMP TITLES WITH THEIR         *   FILE 024\n//*           ASSOCIATED TAPE VOLSER TO WHICH THEY WERE ARCHIVED.   *   FILE 024\n//*                                                                 *   FILE 024\n//*           THE ORIGINAL SOFTWARE WAS WRITTEN BY HOWARD DEAN OF   *   FILE 024\n//*           KAISER PERMANENTE IN WALNUT CREEK, CALIFORNIA.        *   FILE 024\n//*           THE PRESENT SOFTWARE IN PRODUCTION AT MCI             *   FILE 024\n//*           TELECOMMUNICATIONS CORPORATION HAS BEEN MODIFIED      *   FILE 024\n//*           QUITE EXTENSIVELY, AS WELL AS HAVING THE ADDITION     *   FILE 024\n//*           OF OTHER DESIRABLE FEATURES TO SUCH A SYSTEM.         *   FILE 024\n//*                                                                 *   FILE 024\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "APUT": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x85\\x00\\x85\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:39", "lines": 133, "newlines": 133, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         AGO   .AMEND\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         AGO   .AMEND\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BXFER": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00!\\x00!\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:39", "lines": 33, "newlines": 33, "modlines": 0, "user": "FILE024"}, "text": "PROC 1 DSNAME DEBUG\n/* ***************************************************************** */\n/*                                                                   */\n/* \"BXFER/BROWSE\" RECURSIVE CLIST                                    */\n/*  WRITTEN 13MAR86, WILLIAM SMITH, SYNTEX CORPORATION               */\n/*    . SIMPLE RECURSIVE CLIST TO DIRECTLY INVOKE THE PDF BROWSE     */\n/*      SERVICE FROM WITHIN ISPF OR FROM READY MODE TSO              */\n/*    . EXISTENCE OF DATA SET IS VERIFIED PRIOR TO EDIT ENTRY        */\n/*    . MUST RUN WITH TSO/E REL 2.1 OR HIGHER                        */\n/*                                                                   */\n/*  MODIFIED 12/30/86, GENE L. LEW, MCI TELECOMM CORP.               */\n/*                                                                   */\n/* ***************************************************************** */\nIF &DEBUG = DEBUG THEN -\n   CONTROL MSG LIST CONLIST SYMLIST\nELSE -\n   CONTROL NOMSG NOLIST NOCONLIST NOSYMLIST\nIF &SYSDSN(&DSNAME.) = OK THEN -\n   DO\n     IF &SYSISPF = ACTIVE THEN -\n        DO\n          ISPEXEC BROWSE DATASET(&DSNAME.)\n          EXIT\n        END\n     ELSE -\n        ISPSTART CMD(%BXFER &DSNAME. &DEBUG)\n   END\nELSE -\n   DO\n     CLR3270\n     WRITE ***** &DSNAME. DOES NOT EXIST... TRY AGAIN *****\n     EXIT\n   END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CALL#": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x17\\x00\\x17\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:39", "lines": 23, "newlines": 23, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         CALL# &MODNAME\n.*\n         GBLC  &GLREG                            LINK REGISTER\n.*\n         AIF   ('&MODNAME' EQ '').ERR01          IS ADDR SUPPLIED ?\n         AIF   (N'&MODNAME GT 1).ERR01\n         AGO   .OK\n.ERR01   MNOTE 12,'YS000022-ROUTINE ADDRESS NOT SPECIFIED OR INVALID'\n         MEXIT\n.*\n.OK      ANOP\n         SPACE\n         AIF   ('&MODNAME'(1,1) EQ '(').CODE010  IS ADDRESS IN REG ?\n.*\n         BAL   &GLREG,&MODNAME                   BRANCH ON SUBROUTINE\n         AGO   .CODE020\n.CODE010 ANOP\n         BALR  &GLREG,&MODNAME(1)                BRANCH ON SUBROUTINE\n.CODE020 ANOP\n         SPACE\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CPPL": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x15\\x00\\x15\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:39", "lines": 21, "newlines": 21, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n&X       CPPL  &Y,&DSECT=NO\n***********************************************************************\n*                                                                     *\n*             COMMAND   PROCESSOR   PARAMETER   LIST                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         AIF   ('&DSECT' NE 'NO').DSECT\nCPPL     DS    0A .                     COMMAND PROC PARM LIST\n         AGO   .COM\n.DSECT   ANOP\nCPPL     DSECT ,                        COMMAND PROC PARM LIST\n.COM     ANOP\nCPPLCBUF DC    A(0) .                   COMMAND BUFFER ADDR\nCPPLUPT  DC    A(0) .                   USER PROF. TAB\nCPPLPSCB DC    A(0) .                   PROT STEP CB\nCPPLECT  DC    A(0) .                   ENV. CTL TABLE\nCPPLLEN  EQU   *-CPPL .                 LENGTH\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSPL": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x17\\x00\\x17\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:39", "lines": 23, "newlines": 23, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         CSPL  &DSECT=,                                     @HMD78174\n         AIF   ('&DSECT' EQ 'NO').DS0A                      @HMD78174\n.* RELEASE 20 SUPPORT CODE -- 20035                         @HMD78174\nCSPL     DSECT                                              @HMD78174\n         AGO    .GEN                                        @HMD78174\n.DS0A    ANOP                                               @HMD78174\nCSPL     DS      0A           COMMAND SCAN PARAMETER LIST   @HMD78174\n.GEN     ANOP\n***********************************************************************\n*    THE COMMAND SCAN PARAMETER LIST (CSPL) IS A LIST OF ADDRESSES    *\n*    PASSED FROM THE INVOKER TO COMMAND SCAN VIA REGISTER 1           *\n***********************************************************************\n         SPACE\nCSPLUPT  DS    A        PTR TO  UPT\nCSPLECT  DS    A        PTR TO  ECT\nCSPLECB  DS    A        PTR TO  CP'S ECB\nCSPLFLG  DS    A        PTR TO  FLAG WORD WHICH IS OBTAINED & FREED\n*                       BY CALLER. BIT 0 SET TO 0= SYNTAX CHECKING OF\n*                       COMMAND NAME.\nCSPLOA   DS    A        PTR TO OUTPUT AREA (CSOA DSECT)\nCSPLCBUF DS    A        PTR TO COMMAND BUFFER\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DATA#": {"ttr": 534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x15\\x00\\x15\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:39", "lines": 21, "newlines": 21, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         DATA#\n.*\n.*       DEFINE VARIABLES\n.*\n         GBLC  &REENT                            CODE TYPE INDICATOR\n         GBLC  &MYCSECT                          CSECT NAME\n.*\n.*       SET UP GLOBAL VARIABLES\n.*\n         SEQCK ENTRE                             CHANGE A STACK\n.*\n.*       GENERATE CODE\n.*\n         AIF   ('&REENT' EQ 'N').CODE001         IS CODE REENT ?\n         SPACE\n&MYCSECT SETC  '&SYSECT'\nZLINDSCT DSECT                                   DSECT FOR REMOTE CORE\n.CODE001 ANOP\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DO": {"ttr": 536, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:39", "lines": 31, "newlines": 31, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         DO    &MODNAME\n         GBLA  &GDOCNT,&GDOLVL,&GIFLVL,&GDOSTK(16),&GDOIFST(16)\n         GBLC  &GLREG\n         LCLC  &LBLYSS\n.*\n         AIF   ('&MODNAME' EQ '').ERR01\n         AIF   ('&MODNAME' NE 'BELOW').ERR01\n         AGO   .OK\n.ERR01   MNOTE 12,'YS000030-PARAMETER NOT SPECIFIED OR INVALID'\n         MEXIT\n.*\n.OK      ANOP\n         SEQCK DO\n.*\n&GDOCNT  SETA  &GDOCNT+3\n&GDOLVL  SETA  &GDOLVL+1\n&GDOSTK(&GDOLVL) SETA &GDOCNT\n&GDOIFST(&GDOLVL) SETA &GIFLVL\n.*\n         SPACE\n.*\n&GDOCNT  SETA  &GDOCNT-1\n.*\n&LBLYSS  SETC  'ZLDO&GDOCNT'\n&LBLYSS  DS    0H                                LOOP START\n.*\n&GDOCNT  SETA  &GDOCNT+1\n         SPACE\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOWHILE": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00S\\x00S\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:39", "lines": 83, "newlines": 83, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         DOWHILE &OPND1,&RELA,&OPND2,&OPCD\n.*\n.**********************************************************************\n.*       DEFINE VARIABLES                                             *\n.**********************************************************************\n.*\n         GBLA  &GDOCNT,&GDOLVL,&GIFLVL,&GDOSTK(16),&GDOIFST(16),&GDWCNT\n         GBLB  &DWORSW#\n         LCLC  &LOC\n         LCLC  &LBLYSS\n         LCLA  &I,&J,&K                          'AND' LOOP COUNTERS\n.*\n         SEQCK DOWHILE\n.*\n         SPACE\n         AIF   (&DWORSW# EQ 1).L10\n&GDOCNT  SETA  &GDOCNT+2\n.*\n&LBLYSS  SETC  'ZLDO&GDOCNT'                   TO GET OPCODE IN COL 10\n&LBLYSS  DS    0H                                LOOP START\n.*\n&GDOCNT  SETA  &GDOCNT+1\n&GDOLVL  SETA  &GDOLVL+1\n&GDOSTK(&GDOLVL) SETA &GDOCNT\n&GDOIFST(&GDOLVL) SETA &GIFLVL\n.*\n.L10     ANOP\n&GDOCNT  SETA  &GDOCNT+1\n&LOC     SETC  'ZLDO'.'&GDOCNT'\n&GDOCNT  SETA  &GDOCNT-1\n.*\n.**********************************************************************\n.*       GENERATE CODE TO TEST CONDITION AND BRANCH                   *\n.**********************************************************************\n.*\n&J       SETA  0                                 FIRST DELIMITER NUMBER\n&I       SETA  1                                 FIRST PARM NUMBER\n.*\n.LOOPAND ANOP                                    LOOP THRU PARMS\n&J       SETA  &J+1                        TRY NEXT PARM AS DELIMITER\n         AIF   (&J GT N'&SYSLIST).ENDAND         IS IT END OF PARMS ?\n         AIF   ('&SYSLIST(&J)' NE '*AND*').LOOPAND  IS IT DELIMITER ?\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN 2 DELIMITERS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND1       MUST BE 4 OR 1 PARM\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND1  ANOP                                    GEN. TEST AND BRANCH\n         AIF   (&K EQ 1).GENOP1                  DO WE HAVE 1 PARM ?\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&LOC\n         AGO   .GENOK\n.GENOP1  ANOP                                    GEN CODE WITH 1 PARM\n         GENC  &SYSLIST(&I),,,,&LOC\n.GENOK   ANOP                                    GEN IS DONE\n.*\n&I       SETA  &J+1                  SET POINTER TO NEXT SET OF PARMS\n         AGO   .LOOPAND                          REPEAT LOOP\n.*\n.ENDAND  ANOP                                    END OF LOOP\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN LAST DELIMTRS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND2       MUST BE 4 OR 1\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND2  ANOP                                  GEN LAST TEST & BRANCH\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&LOC\n.*\n.**********************************************************************\n.*       ANALIZE 'OR' CONDITION                                       *\n.**********************************************************************\n.*\n         AIF   (&DWORSW# EQ 0).CODE020         IF NO DOWHLOR,SKIP NEXT\n&LBLYSS  SETC  'ZLDO&GDOCNT'                   TO GET OPCODE IN COL 10\n&LBLYSS  DS    0H                                BODY OF LOOP FOLLOWS\n.CODE020 ANOP\n.*\n&GDWCNT  SETA  &GDWCNT+1\n&DWORSW# SETB  0\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOWHLOR": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00T\\x00T\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:39", "lines": 84, "newlines": 84, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         DOWHLOR &OPND1,&RELA,&OPND2,&OPCD\n.*\n.**********************************************************************\n.*       DEFINE VARIABLES                                             *\n.**********************************************************************\n.*\n         GBLA  &GDOCNT,&GDOLVL,&GIFLVL,&GDOSTK(16),&GDOIFST(16),&GDWCNT\n         GBLB  &DWORSW#\n         GBLC  &GTYPE\n         LCLA  &I,&J,&K                          'AND' LOOP COUNTERS\n         LCLB  &ANDSW\n         LCLC  &ORLOC\n         LCLC  &LOC\n         LCLC  &LBLYSS\n.*\n         SEQCK DOWHLOR                           PRED/SUCCESSOR CHECK\n.*\n         SPACE\n         AIF   (&DWORSW# EQ 1).L10  IF THERE IS OTHER DOWHLOR,SKIP NEXT\n&DWORSW# SETB  1                               INDICATE-DOWHLOR DONE\n&GDOCNT  SETA  &GDOCNT+2\n.*\n&LBLYSS  SETC  'ZLDO&GDOCNT'                   TO GET OPCODE IN COL 10\n&LBLYSS  DS    0H                                LOOP START\n.*\n&GDOCNT  SETA  &GDOCNT+1\n&GDOLVL  SETA  &GDOLVL+1\n&GDOSTK(&GDOLVL) SETA &GDOCNT\n&GDOIFST(&GDOLVL) SETA &GIFLVL\n.*\n.L10     ANOP\n&LOC     SETC  'ZLDO'.'&GDOCNT'\n.*\n.**********************************************************************\n.*       GENERATE CODE TO TEST CONDITION AND BRANCH                   *\n.**********************************************************************\n.*\n&ORLOC   SETC  'ZLAD&SYSNDX'\n&ANDSW   SETB  0                                 ASSUME - NO *AND*\n&J       SETA  0                                 FIRST DELIMITER NUMBER\n&I       SETA  1                                 FIRST PARM NUMBER\n.*\n.LOOPAND ANOP                                    LOOP THRU PARMS\n&J       SETA  &J+1                        TRY NEXT PARM AS DELIMITER\n         AIF   (&J GT N'&SYSLIST).ENDAND         IS IT END OF PARMS ?\n         AIF   ('&SYSLIST(&J)' NE '*AND*').LOOPAND  IS IT DELIMITER ?\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN 2 DELIMITERS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND1       MUST BE 4 OR 1 PARM\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND1  ANOP                                    GEN. TEST AND BRANCH\n&GTYPE   SETC  'DOWHILE'                         CHANGE FLAG FOR GENC\n&ANDSW   SETB  1                                 INDICATE - *AND* FOUND\n         AIF   (&K EQ 1).GENOP1                  DO WE HAVE 1 PARM ?\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&ORLOC\n         AGO   .GENOK\n.GENOP1  ANOP                                    GEN CODE WITH 1 PARM\n         GENC  &SYSLIST(&I),,,,&ORLOC\n.GENOK   ANOP                                    GEN IS DONE\n&GTYPE   SETC  'DOWHLOR'                         RESTORE FLAG FOR GENC\n.*\n&I       SETA  &J+1                  SET POINTER TO NEXT SET OF PARMS\n         AGO   .LOOPAND                          REPEAT LOOP\n.*\n.ENDAND  ANOP                                    END OF LOOP\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN LAST DELIMTRS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND2       MUST BE 4 OR 1\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND2  ANOP                                  GEN LAST TEST & BRANCH\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&LOC\n.*\n         AIF   (&ANDSW EQ 0).CODE040             IS THERE *AND* PARM ?\n&ORLOC   DS    0H                                CONDITIONS ARE FALSE\n.CODE040 ANOP\n.*\n         SPACE\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ELSE": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x18\\x00\\x18\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:39", "lines": 24, "newlines": 24, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         ELSE  ,\n         GBLA  &GIFLVL,&GDOLVL,&GIFSTK(16),&GIFDOST(16)\n         LCLA  &WKA1\n         LCLC  &LBLYSS\n         SEQCK ELSE\n         SPACE\n         AIF   (&GIFLVL EQ 0).ER1\n&WKA1    SETA  &GIFSTK(&GIFLVL)/3*3\n         AIF   (&WKA1 NE &GIFSTK(&GIFLVL)).ER1\n&GIFSTK(&GIFLVL) SETA &GIFSTK(&GIFLVL)+1\n         B     ZLIF&GIFSTK(&GIFLVL)              SKIP ALTERNATE BRANCH\n.*       ***************** TO MAKE STATEMENT IN COLUMN 10 *******\n&LBLYSS  SETC  'ZLIF&WKA1'\n&LBLYSS  DS    0H                                ALTERNATE BRANCH START\n.*\n         AIF   (&GIFDOST(&GIFLVL) EQ &GDOLVL).L10\n         MNOTE 8,'ENDDO/UNTIL/WHILE MISSING WITHIN IF SET'\n.L10     ANOP\n         SPACE\n         MEXIT\n.ER1     MNOTE 8,'ELSE NOT PRECEDED BY IF'\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "END#": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:39", "lines": 30, "newlines": 30, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         END#  &CSECT\n.*\n.*       DEFINE VARIABLES\n.*\n         GBLC  &REENT                            CODE TYPE INDICATOR\n.*\n.*       CHECK INPUT PARAMETERS\n.*\n         AIF   ('&CSECT' NE '').OK               IS CSECT NAME SUPPLIED\n         MNOTE 12,'YS000001-CSECT NAME WAS NOT SPECIFIED'\n         MEXIT\n.*\n.*       SET UP GLOBAL VARIABLES\n.*\n.OK      ANOP\n         SEQCK ENTRE                             CLOSE A STACK\n         SEQCK EXIT                              CLOSE A STACK\n.*\n.*       GENERATE CODE\n.*\n         SPACE\n         AIF   ('&REENT' EQ 'N').CODE001         IS CODE REENT ?\nZLINDSCT DSECT                                   DSECT FOR REMOTE CORE\nZLINSIZE EQU   *-ZLINSAVE                        DSECT LENGTH\n.CODE001 ANOP\nZLIN9999 EQU   *\n         END   &CSECT\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENDDATA#": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00.\\x00.\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:39", "lines": 46, "newlines": 46, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         ENDDATA#\n.*\n.**********************************************************************\n.*       DEFINE VARIABLES                                             *\n.**********************************************************************\n.*\n         GBLC  &REENT,&MYCSECT\n         GBLA  &GIFLVL,&GDOLVL                   IF/DO LEVEL\n         GBLA  &GDWCNT\n         GBLB  &IFORSW#,&UNORSW#,&DWORSW#\n.*\n.**********************************************************************\n.*       CHECK INPUT PARAMETERS                                       *\n.**********************************************************************\n.*\n         AIF   (&GIFLVL EQ 0).L10\n         MNOTE 8,'YS000016-MISSING ENDIF STATEMENT(S)'\n&GIFLVL  SETA  0\n.L10     ANOP\n         AIF   (&GDOLVL EQ 0).L15\n         MNOTE 8,'YS000017-MISSING ENDDO/UNTIL STATEMENT(S)'\n&GDOLVL  SETA  0\n&GDWCNT  SETA  0\n.L15     ANOP\n         AIF   (&IFORSW# EQ 0).L17\n         MNOTE 8,'YS000018-MISSING IF FOLLOWING IFOR(S)'\n&IFORSW# SETB  0\n.L17     ANOP\n         AIF   (&UNORSW# EQ 0).L17A\n         MNOTE 8,'YS000019-MISSING UNTIL FOLLOWING UNTILOR(S)'\n&UNORSW# SETB  0\n.L17A    ANOP\n         AIF   (&DWORSW# EQ 0).L17B\n         MNOTE 8,'YS000020-MISSING DOWHILE FOLLOWING DOWHLOR(S)'\n&DWORSW# SETB  0\n.L17B    ANOP\n.*\n         SEQCK EXIT                              PRED/SUCCESSOR CHECK\n.*\n         AIF   ('&REENT' EQ 'N').CODE001\n         SPACE\n&MYCSECT CSECT                                   CSECT CONTINUATION\n.CODE001 ANOP\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENDDO": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x19\\x00\\x19\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:39", "lines": 25, "newlines": 25, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         ENDDO\n         GBLA  &GDWCNT,&GDOLVL,&GIFLVL,&GDOSTK(16),&GDOIFST(16)\n         LCLC  &LBLYSS\n         SEQCK ENDDO\n         SPACE\n         AIF   (&GDOLVL EQ 0).ER1\n         AIF   (&GDWCNT EQ 0).ER1\n&GDOSTK(&GDOLVL) SETA &GDOSTK(&GDOLVL)-1\n         B     ZLDO&GDOSTK(&GDOLVL)              REPEAT LOOP\n&GDOSTK(&GDOLVL) SETA &GDOSTK(&GDOLVL)+2\n.************************* TO MAKE STATEMENT IN COLUMN 10 *******\n&LBLYSS  SETC  'ZLDO&GDOSTK(&GDOLVL)'\n&LBLYSS  DS    0H                                LOOP END\n.****************************************************************\n         AIF   (&GDOIFST(&GDOLVL) EQ &GIFLVL).L10\n         MNOTE 8,'ENDIF STATEMENT(S) MISSING WITHIN DO LOOP'\n.L10     ANOP\n&GDOLVL  SETA  &GDOLVL-1\n&GDWCNT  SETA  &GDWCNT-1\n         SPACE\n         MEXIT\n.ER1     MNOTE 8,'ENDDO NOT PRECEDED BY DOWHILE'\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENDIF": {"ttr": 783, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x14\\x00\\x14\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:39", "lines": 20, "newlines": 20, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         ENDIF  ,\n         GBLA  &GIFLVL,&GDOLVL,&GIFSTK(16),&GIFDOST(16)\n         LCLC  &LBLYSS\n         SEQCK ENDIF\n         SPACE\n         AIF   (&GIFLVL EQ 0).ER1\n.************************* TO MAKE STATEMENT IN COLUMN 10 *******\n&LBLYSS  SETC  'ZLIF&GIFSTK(&GIFLVL)'\n&LBLYSS  DS    0H                                END OF (IF)-BRANCH(ES)\n.****************************************************************\n         AIF   (&GIFDOST(&GIFLVL) EQ &GDOLVL).L10\n         MNOTE 8,'ENDDO/UNTIL/WHILE MISSING WITHIN IF SET'\n.L10     ANOP\n&GIFLVL  SETA  &GIFLVL-1\n         SPACE\n         MEXIT\n.ER1     MNOTE 8,'ENDIF NOT PRECEDED BY IF'\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENTRE#": {"ttr": 785, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00M\\x00M\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:39", "lines": 77, "newlines": 77, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         ENTRE# &MODNAME,&SAREA=YES\n.*\n.**********************************************************************\n.*       DEFINE VARIABLES                                             *\n.**********************************************************************\n.*\n         GBLA  &GEXCNT                           COUNTER FOR LABELS\n         GBLB  &IEXSW#                           IEXIT CONTROL SWITCH\n         GBLC  &SAVE#                            SAVE AREA FOR LINK REG\n         GBLC  &GLREG                            LINK REGISTER\n         GBLC  &EXLIS                            LISTING TYPE INDICATOR\n         GBLC  &STARTEX                          FIRST MODULE NAME\n         GBLC  &ENTNAME                          CURRENT MOD NAME\n.*\n.**********************************************************************\n.*       CHECK INPUT PARAMETERS                                       *\n.**********************************************************************\n.*\n         AIF   ('&MODNAME' EQ '').ERR01          IS MODNAME SUPPLIED ?\n.*\n         AIF   ('&SAREA' EQ '').ERR02            IS SAVAREA SUPPLIED ?\n         AIF   (N'&SAREA GT 1).ERR02             IS THERE ONE SAREA ?\n.*\n         AGO   .OK\n.ERR01   MNOTE 12,'YS000012-MODULE NAME MISSING'\n         MEXIT\n.ERR02   MNOTE 12,'YS000013-&&SAREA NOT SUPPLIED OR INVALID'\n         MEXIT\n.*\n.**********************************************************************\n.*       SET UP GLOBAL VARIABLES                                      *\n.**********************************************************************\n.*\n.OK      ANOP\n.*       SET UP COUNTER INITIAL VALUE FOR LABELS OF EXIT#-MACRO\n&GEXCNT  SETA  &GEXCNT+1\n         SEQCK ENTRE                             PRED/SUCCESSOR CHECK\n.*       CHANGE COUNTER FOR SECOND LABEL\n&GEXCNT  SETA  &GEXCNT+1\n&IEXSW#  SETB  0                                 TURN OFF IEXIT SWITCH\n&SAVE#   SETC  '&SAREA'                          SET LINK REG SAREA\n&ENTNAME SETC  '&MODNAME'                        SET CURRENT MOD NAME\n.*\n.**********************************************************************\n.*       GENERATE CODE                                                *\n.**********************************************************************\n.*\n         AIF   ('&EXLIS' EQ 'Y').CODE010         IS PRINT GEN ?\n         PUSH  PRINT\n         PRINT NOGEN\n.CODE010 ANOP\n         SPACE\n&MODNAME DS    0H                                ROUTINE ENTRY POINT\n         AIF   ('&STARTEX' EQ '&ENTNAME').CODE020  IS IT FIRST MODULE ?\n.*\n         AIF   ('&SAREA' EQ 'NO').CODE020        IS THERE ANY SAREA ?\n.*\n         AIF   ('&SAREA' NE 'YES').CODE030       IS SAREA STANDARD ?\n.*       NEXT STATEMENT USES SECOND LABEL OF EXIT# TO SAVE LINK REG\n         ST    &GLREG,ZLEX&GEXCNT                SAVE LINK REGISTER\n         AGO   .CODE020\n.CODE030 ANOP\n         AIF   ('&SAREA'(1,1) NE '(').CODE040    IS SAREA REG ?\n         LR    &SAREA(1),&GLREG                  SAVE LINK REGISTER\n         AGO   .CODE020\n.CODE040 ANOP\n         ST    &GLREG,&SAREA                     SAVE LINK REGISTER\n.*\n.CODE020 ANOP\n.*\n.*       CHANGE COUNTER BACK FOR FIRST LABEL-IT WILL BE USED IN\n.*       SUBSEQUENT MACRO-IEXIT#\n&GEXCNT  SETA  &GEXCNT-1\n         SPACE\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EOJ": {"ttr": 788, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00Z\\x00Z\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:39", "lines": 90, "newlines": 90, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n&NAME    EOJ   &RC=0,&LOG=NO,&XA=YES                           HD JUN86\n         GBLA  &SIDX\n         GBLB  &SREG\n         GBLB  &XAW                                            HD JUN86\n         GBLB  &IDS(255)\n         GBLB  &CRENT(255)        ON IF CODE=RENT FROM SETREG\n         GBLC  &IDP(255)\n         GBLC  &POOL(255)         SUBPOOL FROM SETREG\n         GBLC  &LV(255)           LENGTH FROM SETREG\n         GBLC  &SYSSPLV           CHECK SPLEVEL MACRO SETTING  HD JUN86\n         LCLC  &IDE\n         LCLC  &RCR,&NAM,&SID\n         LCLB  &RTYPE\n&XAW     SETB  ('&SYSSPLV' EQ '2' OR '&XA' EQ 'YES')           HD JUN86\n&NAM     SETC  '&NAME'\n&SID     SETC  '&SIDX'\n         AIF   (&SREG).OK\n         MNOTE *,'SHAME ON YOU USING EOJ WITHOUT SETREG'\n&NAM     L     13,4(13)           GET OLD REGISTER SAVE AREA\n         AGO   .RET\n.OK      ANOP\n&NAM     DC    0H'0'\n         AIF   ('&RC' EQ '').RCNR1\n         AIF   ('&RC'(1,1) NE '(').RCNR1\n&RTYPE   SETB  1\n.RCNR1   ANOP\n&IDS(&SIDX) SETB (&IDS(&SIDX) AND '&LOG' EQ 'YES')\n         AIF   (NOT &IDS(&SIDX)).NOLOG SOMEBODY DOESNT WANT TO LOG\n&IDE     SETC  'END   '.'&IDP(&SIDX)'\n         WTO   '&IDE',ROUTCDE=11  LOG THE PROGRAM OFF\n.NOLOG   ANOP\n         AIF   (NOT &CRENT(&SIDX)).NORENT\n         LR    1,13               SAVE MY SAVEAREA ADDRESS\n         L     13,4(13)           GET BACK SAVE AREA POINTER\n         AIF   ('&RC' EQ '').FREE1\n         AIF   (NOT &RTYPE).FREE1\n         ST    &RC(1),16(,13) SAVE RET CODE IN R15 PLACE\n.FREE1   ANOP\n         L     0,$SPLV&SID        GET SP+LV\n         FREEMAIN R,LV=(0),A=(1)  DO FREEMAIN\n         AGO   .RET\n.NORENT  ANOP\n         L     13,4(13)           BACK SAVEAREA POINTER\n.RET     ANOP\n.RETTEST AIF   (&RTYPE).R9\n         AIF   ('&RC' EQ '').RETEQ0 *   MESSAGE, ASSUME ZERO\n         AIF   (T'&RC NE 'N').REGLD1 *  RETURN NUMBER?\n         AIF   (&RC EQ 0).R0       *    RC=0\n         AGO   .REGLA                   * LOAD ADDRESS ON RC\n.RETEQ0  MNOTE *,'*** WARNING *** RC=0 (ZERO) ASSUMED '\n         AGO   .R0\n.REGLD1  L     15,&RC .                 LOAD SAVED RETURN CODE\n         AGO   .BR14\n.REGLA   LA    15,&RC .                 LOAD REQUESTED RETURN CODE\n         AGO   .BR14\n.R9      AIF   (&CRENT(&SIDX)).R0\n         ST    &RC(1),16(,13)           SAVE RETURN CODE\n.R0      XC    8(4,13),8(13) .          CLEAR FWD CHAIN PTR\n         LM    14,12,12(13) .           RELOAD CALLERS' REGS\n.*                                                             HD JUN86\n         AIF   (NOT &XAW).X001                                 HD JUN86\n         OI    15(13),X'01'             SET RETURN INDICATOR   HD JUN86\n         AGO   .X002                                           HD JUN86\n.X001    ANOP                                                  HD JUN86\n         MVI   12(13),X'FF'             SET RETURN INDICATOR   HD JUN86\n.X002    ANOP                                                  HD JUN86\n.*                                                             HD JUN86\n         AIF   (&RTYPE).R00\n         XR    15,15 .                  CLEAR RETURN CODE\n.R00     BR    14 .                     RETURN TO CALLER\n         AGO   .END\n.BR14    XC    8(4,13),8(13) .          CLEAR FWD CHAIN PTR\n         LM    0,12,20(13) .            LOAD SAVED REGS\n         L     14,12(0,13) .            AND RETURN\n.*                                                             HD JUN86\n         AIF   (NOT &XAW).X003                                 HD JUN86\n         OI    15(13),X'01'             SET RETURN INDICATOR   HD JUN86\n         AGO   .X004                                           HD JUN86\n.X003    ANOP                                                  HD JUN86\n         MVI   12(13),X'FF'             SET RETURN INDICATOR   HD JUN86\n.X004    ANOP                                                  HD JUN86\n.*                                                             HD JUN86\n         BR    14 .                     RETURN TO CALLER\n.END     ANOP\n.* NOW DECREMENT SIDX BACK TO PREVIOUS LEVEL\n         AIF   (&SIDX EQ 1).RET2  *NEVER DECR LESS THAN 1*\n&SIDX    SETA  &SIDX-1\n.RET2    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EPUTL": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00Q\\x01\\x185/\\x01\\x19!O\\x129\\x00\\xcb\\x00\\xcb\\x00\\x01\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2018-12-18T00:00:00", "modifydate": "2019-08-02T12:39:51", "lines": 203, "newlines": 203, "modlines": 1, "user": "SBGOLOB"}, "text": "EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*  CLEANED A BIT  . . . 08/17\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATER  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUMENTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFORE R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nR3       EQU   3                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\n         DS    0D\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   R14,R12,12(R13)    SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES,SP=0       RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    R1,8(,R13)         OUR SAVE AREA POINTER\n         ST    R13,4(,R1)         POINTER TO CALLER'S SAVE AREA\n         LR    R13,R1             @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(,R13)        POINT TO CALLER'S RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 RC IF BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 RC IF BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(,RML)              MESSAGE LENGTH\n         STH   R15,PUTLEN               PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(,R2)       @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(,R2)               REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    R2,R13                   @OUR SAVE AREA\n         LR    R3,R15                   SAVE RETURN CODE\n         L     R13,4(,R13)              @CALLER'S SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,R3                   RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLER'S REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXFER": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:39", "lines": 30, "newlines": 30, "modlines": 0, "user": "FILE024"}, "text": "PROC 1 DSNAME DEBUG\n/* ***************************************************************** */\n/*                                                                   */\n/* \"EDIT\" RECURSIVE CLIST                                            */\n/*  WRITTEN 13MAR86, WILLIAM SMITH, SYNTEX TECHNICAL SUPPORT         */\n/*    . SIMPLE RECURSIVE CLIST TO DIRECTLY INVOKE THE PDF EDIT       */\n/*      SERVICE FROM WITHIN ISPF OR FROM READY MODE TSO              */\n/*    . EXISTENCE OF DATA SET IS VERIFIED PRIOR TO EDIT ENTRY        */\n/*                                                                   */\n/* ***************************************************************** */\nIF &DEBUG = DEBUG THEN -\n   CONTROL MSG LIST CONLIST SYMLIST\nELSE -\n   CONTROL NOMSG NOLIST NOCONLIST NOSYMLIST\nIF &SYSDSN(&DSNAME.) = OK THEN -\n   DO\n     IF &SYSISPF = ACTIVE THEN -\n        DO\n          ISPEXEC EDIT DATASET(&DSNAME.)\n          EXIT\n        END\n     ELSE -\n        ISPSTART CMD(%EXFER &DSNAME. &DEBUG)\n   END\nELSE -\n   DO\n     CLR3270\n     WRITE ***** &DSNAME. DOES NOT EXIST... TRY AGAIN *****\n     EXIT\n   END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EXIT#": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00}\\x00}\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:39", "lines": 125, "newlines": 125, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         EXIT# &RC=(15)\n.*\n.**********************************************************************\n.*       DEFINE VARIABLES                                             *\n.**********************************************************************\n.*\n         GBLA  &GIFLVL,&GDOLVL                   IF/DO LEVEL\n         GBLA  &GEXCNT,&GDWCNT                   COUNTERS FOR LABELS\n         GBLB  &IFORSW#,&UNORSW#,&DWORSW#\n         GBLB  &IEXSW#                           IEXIT CONTROL SWITCH\n         GBLC  &SAVE#                            SAVE AREA FOR LINK REG\n         GBLC  &GLREG                            LINK REGISTER\n         GBLC  &REENT                            CODE TYPE INDICATOR\n         GBLC  &EXLIS                            LISTING TYPE INDICATOR\n         GBLC  &STARTEX                          FIRST MODULE NAME\n         GBLC  &ENTNAME                          CURRENT MOD NAME\n         LCLC  &LBLYSS                           TO GENERATE LABELS\n.*\n.**********************************************************************\n.*       CHECK INPUT PARAMETERS                                       *\n.**********************************************************************\n.*\n         AIF   (&GIFLVL EQ 0).L10\n         MNOTE 8,'YS000016-MISSING ENDIF STATEMENT(S)'\n&GIFLVL  SETA  0\n.L10     ANOP\n         AIF   (&GDOLVL EQ 0).L15\n         MNOTE 8,'YS000017-MISSING ENDDO/UNTIL/WHILE STATEMENT(S)'\n&GDOLVL  SETA  0\n&GDWCNT  SETA  0\n.L15     ANOP\n         AIF   (&IFORSW# EQ 0).L17\n         MNOTE 8,'YS000018-MISSING IF FOLLOWING IFOR(S)'\n&IFORSW# SETB  0\n.L17     ANOP\n         AIF   (&UNORSW# EQ 0).L17A\n         MNOTE 8,'YS000019-MISSING UNTIL FOLLOWING UNTILOR(S)'\n&UNORSW# SETB  0\n.L17A    ANOP\n         AIF   (&DWORSW# EQ 0).L17B\n         MNOTE 8,'YS000020-MISSING DOWHILE FOLLOWING DOWHLOR(S)'\n&DWORSW# SETB  0\n.L17B    ANOP\n.*\n         AIF   ('&RC'(1,1) EQ '(' AND '&RC' NE '(15)').ERR010\n         AGO   .OK\n.ERR010  ANOP\n         MNOTE 12,'YS000021 - &RC. IS INVALID PARAMETER'\n         MEXIT\n.*\n.**********************************************************************\n.*       SET UP GLOBAL VARIABLES                                      *\n.**********************************************************************\n.*\n.OK      ANOP\n         SEQCK EXIT                              PRED/SUCCESSOR CHECK\n.*\n.**********************************************************************\n.*       GENERATE CODE                                                *\n.**********************************************************************\n.*\n         SPACE\n         AIF   ('&RC' EQ '(15)').CODE010         IS RET.CODE IN REG15 ?\n         LA    15,&RC.(0,0)                      LOAD RETURN CODE\n.CODE010 ANOP\n.*\n         AIF   (&IEXSW# EQ 0).CODE015            IS IEXIT PRESENTED ?\n.*       GENERATE FIRST LABEL OF EXIT# TO BRANCH ON FROM IEXIT#\n&LBLYSS  SETC  'ZLEX&GEXCNT'                     GEN LABEL FOR IEXIT\n&LBLYSS  DS    0H\n&IEXSW#  SETB  0                                 TURN OFF IEXIT SWITCH\n.CODE015 ANOP\n.*\n.*       CHANGE COUNTER FOR SECOND LABEL OF EXIT# - LABEL OF SAREA\n&GEXCNT  SETA  &GEXCNT+1\n.*\n         AIF   ('&STARTEX' NE '&ENTNAME').CODE020  IS IT FIRST MODULE ?\n         B     ZLINEXIT                          EXIT FROM ROUTINE\n         AGO   .CODE040\n.*\n.CODE020 ANOP\n         AIF   ('&SAVE#' EQ 'YES').CODE030       IS SAREA STANDARD ?\n         AIF   ('&SAVE#' EQ 'NO').CODE050        IS THERE ANY SAREA ?\n         AIF   ('&SAVE#'(1,1) EQ '(').CODE060    IS SAREA REG ?\n.*\n.*       SAVE AREA IS USER SUPPLIED ADDRESS\n         L     &GLREG,&SAVE#                     RESTORE LINK REG\n         BR    &GLREG                            RETURN TO CALLER\n         AGO   .CODE040\n.*\n.CODE030 ANOP\n.*       NEXT STATEMENT USES SECOND LABEL TO RESTORE LINK REG\n         L     &GLREG,ZLEX&GEXCNT                RESTORE LINK REG\n         BR    &GLREG                            RETURN TO CALLER\n         AIF   ('&REENT' EQ 'N').CODE070         IS CODE REENT ?\nZLINDSCT DSECT\n.CODE070 ANOP\n.*\n.*       GENERATE SECOND LABEL OF EXIT# TO SAVE LINK REG\n&LBLYSS  SETC  'ZLEX&GEXCNT'                     GET LABEL\n&LBLYSS  DC    F'0'                              LINK REG SAVE AREA\n.*\n         AIF   ('&REENT' EQ 'N').CODE080         IS CODE REENT ?\n&SYSECT  CSECT\n.CODE080 ANOP\n.*\n         AGO   .CODE040\n.*\n.CODE050 ANOP\n         BR    &GLREG                            RETURN TO CALLER\n         AGO   .CODE040\n.*\n.CODE060 ANOP\n         LA    &GLREG,0&SAVE#                    RESTORE LINK REG\n         BR    &GLREG                            RETURN TO CALLER\n.*\n.CODE040 ANOP\n.*\n         SPACE\n         AIF   ('&EXLIS' EQ 'Y').CODE090         IS PRINT GEN ?\n         POP   PRINT\n.CODE090 ANOP\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GENC": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x99\\x00\\x99\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:39", "lines": 153, "newlines": 153, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         GENC  &P1,&REL,&P2,&OP,&LABEL\n         GBLC  &GTYPE\n         LCLB  &TRUEB#\n         LCLC  &WKC1\n&TRUEB#  SETB  1\n         AIF   ('&GTYPE' EQ 'WHILE' OR '&GTYPE' EQ 'IFOR').L05\n         AIF   ('&GTYPE' EQ 'UNTILOR' OR '&GTYPE' EQ 'WHILEOR').L05\n         AIF   ('&GTYPE' EQ 'DOWHLOR').L05\n&TRUEB#  SETB  0\n.L05     ANOP\n         AIF   ('&OP' EQ '').L100\n         AIF   ('&P1' EQ '' OR '&REL' EQ '' OR '&P2' EQ '').ER1\n&WKC1    SETC  'BNE'\n         AIF   ('&REL' EQ 'EQ' AND &TRUEB# EQ 0).L10\n         AIF   ('&REL' EQ 'NE' AND &TRUEB# EQ 1).L10\n&WKC1    SETC  'BNH'\n         AIF   ('&REL' EQ 'GT' AND &TRUEB# EQ 0).L10\n         AIF   ('&REL' EQ 'LE' AND &TRUEB# EQ 1).L10\n&WKC1    SETC  'BNL'\n         AIF   ('&REL' EQ 'LT' AND &TRUEB# EQ 0).L10\n         AIF   ('&REL' EQ 'GE' AND &TRUEB# EQ 1).L10\n&WKC1    SETC  'BE'\n         AIF   ('&REL' EQ 'NE' AND &TRUEB# EQ 0).L10\n         AIF   ('&REL' EQ 'EQ' AND &TRUEB# EQ 1).L10\n&WKC1    SETC  'BL'\n         AIF   ('&REL' EQ 'GE' AND &TRUEB# EQ 0).L10\n         AIF   ('&REL' EQ 'LT' AND &TRUEB# EQ 1).L10\n&WKC1    SETC  'BH'\n         AIF   ('&REL' EQ 'LE' AND &TRUEB# EQ 0).L10\n         AIF   ('&REL' EQ 'GT' AND &TRUEB# EQ 1).L10\n         AGO   .ER2\n.L10     ANOP\n         AIF   ('&OP' EQ 'BCT').L40\n         AIF   ('&OP' EQ 'BXLE').L50\n         AIF   ('&OP' EQ 'BXH').L50\n         AIF   ('&OP' EQ 'TM').L20\n         AIF   ('&OP' EQ 'CLC').L30\n         AIF   ('&OP' EQ 'CLI').L30\n         AIF   ('&OP' EQ 'C').L30\n         AIF   ('&OP' EQ 'CH').L30\n         AIF   ('&OP' EQ 'CL').L30\n         AIF   ('&OP' EQ 'CR').L30\n         AIF   ('&OP' EQ 'CLR').L30\n         AIF   ('&OP' EQ 'CP').L30\n         AIF   ('&OP' EQ 'EX').L30\n         AIF   ('&OP' EQ 'LTR').L70\n         AGO   .ER3\n.L20     ANOP\n         AIF   ('&WKC1' EQ 'BNE').L25\n         AIF   ('&WKC1' NE 'BE').ER2\n&WKC1    SETC  'BO'\n         AGO   .L30\n.L25     ANOP\n&WKC1    SETC  'BNO'\n.L30     ANOP\n         &OP   &P1,&P2\n         &WKC1 &LABEL\n         MEXIT\n.L40     ANOP\n         AIF   ('&WKC1' NE 'BNE').ER2\n         AIF   ('&P2' NE '0').ER4\n         BCT   &P1,&LABEL\n         MEXIT\n.L50     ANOP\n         AIF   ('&OP' EQ 'BXLE' AND '&WKC1' NE 'BNH').ER2\n         AIF   ('&OP' EQ 'BXH' AND '&WKC1' NE 'BH').ER2\n         &OP   &P1,&P2,&LABEL\n         MEXIT\n.L70     ANOP\n         AIF   ('&P2' NE '0').ER4\n         &OP   &P1,&P1\n         &WKC1 &LABEL\n         MEXIT\n.L100    ANOP\n         AIF   ('&REL' NE '' OR '&P2' NE '').ER4\n         AIF   (&TRUEB# EQ 1).L105\n&WKC1    SETC  'BNE'\n         AIF   ('&P1' EQ 'EQUAL').L110\n&WKC1    SETC  'BE'\n         AIF   ('&P1' EQ 'NOTEQUAL').L110\n&WKC1    SETC  'BNL'\n         AIF   ('&P1' EQ 'LOW').L110\n&WKC1    SETC  'BL'\n         AIF   ('&P1' EQ 'NOTLOW').L110\n&WKC1    SETC  'BNH'\n         AIF   ('&P1' EQ 'HIGH').L110\n&WKC1    SETC  'BH'\n         AIF   ('&P1' EQ 'NOTHIGH').L110\n&WKC1    SETC  'BNZ'\n         AIF   ('&P1' EQ 'ZERO').L110\n         AIF   ('&P1' EQ 'ZEROS').L110\n&WKC1    SETC  'BZ'\n         AIF   ('&P1' EQ 'NOTZERO').L110\n&WKC1    SETC  'BNO'\n         AIF   ('&P1' EQ 'ONES').L110\n         AIF   ('&P1' EQ 'OVERFLOW').L110\n&WKC1    SETC  'BO'\n         AIF   ('&P1' EQ 'NOTONES').L110\n&WKC1    SETC  'BNP'\n         AIF   ('&P1' EQ 'PLUS').L110\n&WKC1    SETC  'BP'\n         AIF   ('&P1' EQ 'NOTPLUS').L110\n&WKC1    SETC  'BNM'\n         AIF   ('&P1' EQ 'MINUS').L110\n         AIF   ('&P1' EQ 'MIXED').L110\n&WKC1    SETC  'BM'\n         AIF   ('&P1' EQ 'NOTMINUS').L110\n         AGO   .ER4\n.L105    ANOP\n&WKC1    SETC  'BE'\n         AIF   ('&P1' EQ 'EQUAL').L110\n&WKC1    SETC  'BNE'\n         AIF   ('&P1' EQ 'NOTEQUAL').L110\n&WKC1    SETC  'BL'\n         AIF   ('&P1' EQ 'LOW').L110\n&WKC1    SETC  'BNL'\n         AIF   ('&P1' EQ 'NOTLOW').L110\n&WKC1    SETC  'BH'\n         AIF   ('&P1' EQ 'HIGH').L110\n&WKC1    SETC  'BNH'\n         AIF   ('&P1' EQ 'NOTHIGH').L110\n&WKC1    SETC  'BZ'\n         AIF   ('&P1' EQ 'ZERO').L110\n         AIF   ('&P1' EQ 'ZEROS').L110\n&WKC1    SETC  'BNZ'\n         AIF   ('&P1' EQ 'NOTZERO').L110\n&WKC1    SETC  'BO'\n         AIF   ('&P1' EQ 'ONES').L110\n         AIF   ('&P1' EQ 'OVERFLOW').L110\n&WKC1    SETC  'BNO'\n         AIF   ('&P1' EQ 'NOTONES').L110\n&WKC1    SETC  'BP'\n         AIF   ('&P1' EQ 'PLUS').L110\n&WKC1    SETC  'BNP'\n         AIF   ('&P1' EQ 'NOTPLUS').L110\n&WKC1    SETC  'BM'\n         AIF   ('&P1' EQ 'MINUS').L110\n         AIF   ('&P1' EQ 'MIXED').L110\n&WKC1    SETC  'BNM'\n         AIF   ('&P1' EQ 'NOTMINUS').L110\n         AGO   .ER4\n.L110    ANOP\n         &WKC1 &LABEL\n         MEXIT\n.ER1     MNOTE 8,'REQUIRED OPERAND MISSING'\n         MEXIT\n.ER2     MNOTE 8,'INVALID RELATION'\n         MEXIT\n.ER3     MNOTE 8,'INVALID OPCODE'\n         MEXIT\n.ER4     MNOTE 8,'INVALID OPERAND'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEXIT#": {"ttr": 1038, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x19\\x00\\x19\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 25, "newlines": 25, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         IEXIT# &RC=(15)\n.*\n         GBLA  &GEXCNT                           COUNTER FOR LABELS\n         GBLB  &IEXSW#                           IEXIT CONTROL SWITCH\n.*\n         AIF   ('&RC'(1,1) EQ '(' AND '&RC' NE '(15)').ERR010\n         AGO   .OK\n.ERR010  ANOP\n         MNOTE 12,'YS000021 - &RC. IS INVALID PARAMETER'\n         MEXIT\n.*\n.OK      ANOP\n         SEQCK IEXIT\n&IEXSW#  SETB  1                                 TURN ON IEXIT SWITCH\n         SPACE\n.*\n         AIF   ('&RC' EQ '(15)').CODE010         IS RET.CODE IN REG15 ?\n         LA    15,&RC.(0,0)                      LOAD RETURN CODE\n.CODE010 ANOP\n.*\n.*       NEXT STATEMENT USES FIRST LABEL OF EXIT# TO BRANCH ON\n         B     ZLEX&GEXCNT                       BRANCH TO EXIT POINT\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IF": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00N\\x00N\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 78, "newlines": 78, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         IF    &OPND1,&RELA,&OPND2,&OPCD\n.*\n.**********************************************************************\n.*       DEFINE VARIABLES                                             *\n.**********************************************************************\n.*\n         GBLA  &GIFCNT,&GIFLVL,&GDOLVL,&GIFSTK(16),&GIFDOST(16)\n         GBLB  &IFORSW#                          'IFOR' INDICATOR\n         LCLC  &LOC\n         LCLC  &LBLYSS\n         LCLA  &I,&J,&K                          'AND' LOOP COUNTERS\n.*\n         SEQCK IF\n.*\n         SPACE\n         AIF   (&IFORSW# EQ 1).L10          IF THERE IS IFOR,SKIP NEXT\n&GIFCNT  SETA  &GIFCNT+3\n&GIFLVL  SETA  &GIFLVL+1\n&GIFSTK(&GIFLVL) SETA &GIFCNT\n&GIFDOST(&GIFLVL) SETA &GDOLVL\n.*\n.L10     ANOP\n&LOC     SETC  'ZLIF'.'&GIFCNT'\n.*\n.**********************************************************************\n.*       GENERATE CODE TO TEST CONDITION AND BRANCH                   *\n.**********************************************************************\n.*\n&J       SETA  0                                 FIRST DELIMITER NUMBER\n&I       SETA  1                                 FIRST PARM NUMBER\n.*\n.LOOPAND ANOP                                    LOOP THRU PARMS\n&J       SETA  &J+1                        TRY NEXT PARM AS DELIMITER\n         AIF   (&J GT N'&SYSLIST).ENDAND         IS IT END OF PARMS ?\n         AIF   ('&SYSLIST(&J)' NE '*AND*').LOOPAND  IS IT DELIMITER ?\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN 2 DELIMITERS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND1       MUST BE 4 OR 1 PARM\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND1  ANOP                                    GEN. TEST AND BRANCH\n         AIF   (&K EQ 1).GENOP1                  DO WE HAVE 1 PARM ?\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&LOC\n         AGO   .GENOK\n.GENOP1  ANOP                                    GEN CODE WITH 1 PARM\n         GENC  &SYSLIST(&I),,,,&LOC\n.GENOK   ANOP                                    GEN IS DONE\n.*\n&I       SETA  &J+1                  SET POINTER TO NEXT SET OF PARMS\n         AGO   .LOOPAND                          REPEAT LOOP\n.*\n.ENDAND  ANOP                                    END OF LOOP\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN LAST DELIMTRS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND2       MUST BE 4 OR 1\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND2  ANOP                                  GEN LAST TEST & BRANCH\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&LOC\n.*\n.**********************************************************************\n.*       ANALIZE 'OR' CONDITION                                       *\n.**********************************************************************\n.*\n         AIF   (&IFORSW# EQ 0).CODE020        IF NO IFOR,SKIP NEXT\n&GIFCNT  SETA  &GIFCNT-1\n&LBLYSS  SETC  'ZLIF&GIFCNT'                  TO GET OPCODE IN COL 10\n&LBLYSS  DS    0H                                MAIN BRANCH START\n&GIFCNT  SETA  &GIFCNT+1\n.*\n.CODE020 ANOP\n&IFORSW# SETB  0\n         SPACE\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IFOR": {"ttr": 1284, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00O\\x00O\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 79, "newlines": 79, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         IFOR  &OPND1,&RELA,&OPND2,&OPCD\n.*\n.**********************************************************************\n.*       DEFINE VARIABLES                                             *\n.**********************************************************************\n.*\n         GBLA  &GIFCNT,&GIFLVL,&GDOLVL,&GIFSTK(16),&GIFDOST(16)\n         GBLB  &IFORSW#\n         GBLC  &GTYPE\n         LCLA  &I,&J,&K                          'AND' LOOP COUNTERS\n         LCLB  &ANDSW\n         LCLC  &ORLOC\n         LCLC  &LOC\n.*\n         SEQCK IFOR\n.*\n         SPACE\n         AIF   (&IFORSW# EQ 1).L10     IF THERE IS OTHER IFOR,SKIP NEXT\n&IFORSW# SETB  1\n&GIFCNT  SETA  &GIFCNT+3\n&GIFLVL  SETA  &GIFLVL+1\n&GIFSTK(&GIFLVL) SETA &GIFCNT\n&GIFDOST(&GIFLVL) SETA &GDOLVL\n.*\n.L10     ANOP\n&GIFCNT  SETA  &GIFCNT-1\n&LOC     SETC  'ZLIF'.'&GIFCNT'\n&GIFCNT  SETA  &GIFCNT+1\n.*\n.**********************************************************************\n.*       GENERATE CODE TO TEST CONDITION AND BRANCH                   *\n.**********************************************************************\n.*\n&ORLOC   SETC  'ZLAD&SYSNDX'\n&ANDSW   SETB  0                                 ASSUME - NO *AND*\n&J       SETA  0                                 FIRST DELIMITER NUMBER\n&I       SETA  1                                 FIRST PARM NUMBER\n.*\n.LOOPAND ANOP                                    LOOP THRU PARMS\n&J       SETA  &J+1                        TRY NEXT PARM AS DELIMITER\n         AIF   (&J GT N'&SYSLIST).ENDAND         IS IT END OF PARMS ?\n         AIF   ('&SYSLIST(&J)' NE '*AND*').LOOPAND  IS IT DELIMITER ?\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN 2 DELIMITERS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND1       MUST BE 4 OR 1 PARM\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND1  ANOP                                    GEN. TEST AND BRANCH\n&GTYPE   SETC  'IF'                              CHANGE FLAG FOR GENC\n&ANDSW   SETB  1                                 INDICATE - *AND* FOUND\n         AIF   (&K EQ 1).GENOP1                  DO WE HAVE 1 PARM ?\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&ORLOC\n         AGO   .GENOK\n.GENOP1  ANOP                                    GEN CODE WITH 1 PARM\n         GENC  &SYSLIST(&I),,,,&ORLOC\n.GENOK   ANOP                                    GEN IS DONE\n&GTYPE   SETC  'IFOR'                            RESTORE FLAG FOR GENC\n.*\n&I       SETA  &J+1                  SET POINTER TO NEXT SET OF PARMS\n         AGO   .LOOPAND                          REPEAT LOOP\n.*\n.ENDAND  ANOP                                    END OF LOOP\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN LAST DELIMTRS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND2       MUST BE 4 OR 1\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND2  ANOP                                  GEN LAST TEST & BRANCH\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&LOC\n.*\n         AIF   (&ANDSW EQ 0).CODE040             IS THERE *AND* PARM ?\n&ORLOC   DS    0H                                CONDITIONS ARE FALSE\n.CODE040 ANOP\n.*\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INIT#": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x01+\\x01+\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 299, "newlines": 299, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         INIT# &CSECT,&BASEREG=,&EXEC=,                                X\n               &REGS=YES,&CODE=NORENT,&SP=0,                           X\n               &LNKREG=(14),&PATCH=(128,ZLINPTCH),                     X\n               &LIST=YES,&EXLIST=YES,                                  X\n               &SAVE=(14,12),&ID=*,&REL=,                              X\n               &RC=(15),&USTART=NO,&UEND=NO\n.*\n.**********************************************************************\n.*       MACRO DESCRIPTION                                            *\n.**********************************************************************\n.*                                                                    *\n.*                              YURY STRASHNOY                        *\n.*                              @/YSS - 07/27/81                      *\n.*                              ----------------                      *\n.*                                                                    *\n.*       INIT# MYNAME,BASEREG=(12),EXEC=MAINLINE  MINIMUM SET OF PARM *\n.*                                                                    *\n.*                                                                    *\n.*       INIT# MYNAME,                   MYNAME-CSECT NAME            *\n.*             BASEREG=(12,3,9),         12,3,9 - BASE REGS           *\n.*             EXEC=MAINLINE,            START EXECUTION FROM MAINLINE*\n.*             REGS=YES,                 GEN.STANDARD REGS EQUATION   *\n.*             CODE=NORENT,SP=0,         NONREENTRABLE CODE           *\n.*             LNKREG=(14),              REG.14 - LINK REGISTER       *\n.*             PATCH=(128,ZLINPTCH),     PATCH - ZLINPTCH DC 128H'0'  *\n.*             LIST=YES,EXLIST=YES,      PRINT GEN IS OK              *\n.*             SAVE=(14,12),ID=*,        SAVE (14,12),,*              *\n.*             REL=03.02.01,             RELEASE NUMBER-DC'03.02.01'  *\n.*             RC=(15)                   RETURN CODE IN REG15         *\n.*                                                                    *\n.*       INIT# MYNAME,                   MYNAME-CSECT NAME            *\n.*             BASEREG=(12),             12 - BASE REGISTER           *\n.*             EXEC=MAINLINE,            START EXECUTION FROM MAINLINE*\n.*             REGS=NO,                  DO NOT GENER REGS EQUATION   *\n.*             CODE=RENT,SP=255,         REENTERABLE CODE,SUBPOOL=255 *\n.*             LNKREG=(11),              REG.11 - LINK REGISTER       *\n.*             PATCH=(120),              PATCH -          DC 120H'0'  *\n.*             LIST=NO,EXLIST=NO,        PRINT NOGEN                  *\n.*             SAVE=(14,12),ID=YURY,     SAVE (14,12),,YURY           *\n.*             REL=,                     NO RELEASE NUMBER SPECIFIED  *\n.*             RC=4                      RETURN CODE IS 4             *\n.*                                                                    *\n.**********************************************************************\n.*\n.**********************************************************************\n.*       DEFINE VARIABLES                                             *\n.**********************************************************************\n.*\n         LCLA  &I,&N                             COUNTERS\n         GBLC  &GLREG                            GLOBAL LINK REGISTER\n         GBLC  &REENT                            CODE TYPE INDICATOR\n         GBLC  &STARTEX                          START POINT NAME\n         GBLC  &LIS,&EXLIS                       LISTING TYPE INDICATOR\n         LCLC  &VMTMDT,&PATLBL                   TIME STAMP;PATCH LABEL\n         LCLC  &BASPARM\n.*\n.**********************************************************************\n.*       CHECK INPUT PARAMETERS                                       *\n.**********************************************************************\n.*\n         AIF   ('&CSECT' EQ '').ERR01            SPECIFY CSECT NAME\n.*\n         AIF   ('&BASEREG' EQ '').ERR02          SPECIFY BASE REGISTERS\n         AIF   ('&BASEREG'(1,1) NE '(').ERR02\n         AIF   (N'&BASEREG GT 11 OR N'&BASEREG EQ 0).ERR02\n&I       SETA  0                                 ZERO OUT COUNTER\n.CHKBASE ANOP\n&I       SETA  &I+1\n         AIF   ('&BASEREG(&I)' EQ '').ERR02      SPECIFY BASE REGISTER\n         AIF   ('&BASEREG(&I)' GT '12' OR '&BASEREG(&I)' LT '2').ERR02\n         AIF   ('&BASEREG(&I)' GT '9' AND '&BASEREG(&I)' LT '10').ERR02\n         AIF   ('&LNKREG(1)' EQ '&BASEREG(&I)').ERR07\n         AIF   (N'&BASEREG GT &I).CHKBASE        CHECK NEXT BASE REG\n.*\n         AIF   ('&EXEC' EQ '').ERR03             SPECIFY START POINT\n.*\n         AIF   ('&REGS' NE 'YES' AND '&REGS' NE 'NO').ERR04\n         AIF   ('&CODE' NE 'NORENT' AND '&CODE' NE 'RENT').ERR05\n         AIF   ('&SP' EQ '' AND '&CODE' EQ 'RENT').ERR06\n.*\n         AIF   ('&LNKREG' EQ '').ERR07\n         AIF   ('&LNKREG'(1,1) NE '(').ERR07\n         AIF   (N'&LNKREG NE 1).ERR07\n         AIF   ('&LNKREG(1)' GT '14' OR '&LNKREG(1)' LT '2').ERR07\n         AIF   ('&LNKREG(1)' GT '9' AND '&LNKREG(1)' LT '10').ERR07\n         AIF   ('&LNKREG(1)' GT '12' AND '&LNKREG(1)' LT '14').ERR07\n.*\n         AIF   (N'&PATCH GT 2).ERR08\n         AIF   ('&LIST' NE 'YES' AND '&LIST' NE 'NO').ERR09\n         AIF   ('&EXLIST' NE 'YES' AND '&EXLIST' NE 'NO').ERR10\n         AIF   (K'&REL GT 8).ERR11\n.*\n         AGO   .OK\n.ERR01   MNOTE 12,'YS000001-CSECT NAME WAS NOT SPECIFIED'\n         MEXIT\n.ERR02   MNOTE 12,'YS000002-&&BASEREG DEFINES INVALID BASE REGISTER'\n         MEXIT\n.ERR03   MNOTE 12,'YS000003-&&EXEC DOES NOT DEFINE START POINT'\n         MEXIT\n.ERR04   MNOTE 12,'YS000004-&&REGS MUST BE ''YES'' OR ''NO'''\n         MEXIT\n.ERR05   MNOTE 12,'YS000005-&&CODE MUST BE ''RENT'' OR ''NORENT'''\n         MEXIT\n.ERR06   MNOTE 12,'YS000006-&&SP DOES NOT DEFINE SUBPOOL NUMBER'\n         MEXIT\n.ERR07   MNOTE 12,'YS000007-&&LNKREG DEFINES INVALID LINK REGISTER'\n         MEXIT\n.ERR08   MNOTE 12,'YS000008-&&PATCH HAS TOO MANY SUBPARAMETERS'\n         MEXIT\n.ERR09   MNOTE 12,'YS000009-&&LIST MUST BE ''YES'' OR ''NO'''\n         MEXIT\n.ERR10   MNOTE 12,'YS000010-&&EXLIST MUST BE ''YES'' OR ''NO'''\n         MEXIT\n.ERR11   MNOTE 12,'YS000011-&&REL HAS TOO MANY CHARACTERS'\n         MEXIT\n.*\n.**********************************************************************\n.*       SET UP GLOBAL VARIABLES                                      *\n.**********************************************************************\n.*\n.OK      ANOP\n         SEQCK INIT                              SET UP STACK\n.*\n&REENT   SETC  'N'                               ASSUME NONREENTRENT\n         AIF   ('&CODE' EQ 'NORENT').REENTOK     IS CODE NORENT ?\n&REENT   SETC  'Y'                               CODE IS REENTRENT\n.REENTOK ANOP\n.*\n&EXLIS   SETC  'N'                               ASSUME CODE NOGEN\n         AIF   ('&EXLIST' EQ 'NO').EXLISOK       IS CODE NOGEN ?\n&EXLIS   SETC  'Y'                               CODE IS PRINT GEN\n.EXLISOK ANOP\n.*\n&LIS     SETC  'N'                               ASSUME PRINT NOGEN\n         AIF   ('&LIST' EQ 'NO').LISOK           IS ALL LISTING NOGEN ?\n&LIS     SETC  'Y'                               LISTING IS PRINT GEN\n.LISOK   ANOP\n.*\n&GLREG   SETC  '&LNKREG(1)'                      SET UP GLOBAL LINK REG\n.*\n&STARTEX SETC  '&EXEC'                           START POINT\n.*\n.**********************************************************************\n.*       GENERATE CODE                                                *\n.**********************************************************************\n.*\n         AIF   ('&LIS' EQ 'Y').CODE010           IS PRINT GEN ?\n         PRINT NOGEN\n.CODE010 ANOP\n.*\n         SPACE\n&CSECT   CSECT\n         SPACE\n         AIF   ('&REGS' EQ 'NO').CODE020         DO WE DEFINE REGS ?\nR0       EQU   0                                 REGISTERS EQUATES\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE\n.CODE020 ANOP\n.*\n.*       GENERATE MACRO 'SAVE' TO SAVE REGISTERS\n.*\n         AIF   ('&LIS' EQ 'N').CODE025           IS PRINT NOGEN ?\n         MNOTE '         SAVE  &SAVE,,&ID'       DISPLAY MACRO-CALL\n.CODE025 ANOP\n         SAVE  &SAVE,,&ID                        SAVE REGISTERS\n         SPACE\n.*\n&N       SETA  K'&BASEREG-2\n&BASPARM SETC  '&BASEREG'(2,&N)\n         USING &CSECT,&BASPARM                   DEFINE BASE REGISTERS\n.*\n&I       SETA  1                                 COUNTER IS 1\n         LR    &BASEREG(1),15                    LOAD BASE REGISTER\n.CODE030 ANOP\n&I       SETA  &I+1                              INCREASE REGS COUNTER\n         AIF   (N'&BASEREG LT &I).CODE040        ARE THERE MORE REGS ?\n         LA    &BASEREG(&I),4095(&BASEREG(&I-1)) LOAD BASE REGISTER\n         LA    &BASEREG(&I),1(&BASEREG(&I))      LOAD BASE REGISTER\n         AGO   .CODE030                          GET NEXT REGISTER\n.CODE040 ANOP\n.*\n         AIF   ('&REENT' EQ 'N').CODE050         IS CODE REENT ?\n         USING ZLINSAVE,13                       SET UP DSECT BASE\n         SPACE\n         AIF   ('&LIS' EQ 'N').CODE055\n         MNOTE '         GETMAIN R,LV=ZLINSIZE,SP=&SP'\n.CODE055 ANOP\n         GETMAIN R,LV=ZLINSIZE,SP=&SP            GET DYNAMIC CORE\n         SPACE\n         LR    &LNKREG(1),13                     PREV SAVE AREA ADDR\n         LR    13,1                              LOAD DSECT BASE\n         L     0,20(&LNKREG(1))                  RELOAD R0 FROM SAREA\n         L     1,24(&LNKREG(1))                  RELOAD R1 FROM SAREA\n         L     15,16(&LNKREG(1))                 RELOAD 15 FROM SAREA\n         AGO   .CODE060\n.*\n.CODE050 ANOP\n         LR    &LNKREG(1),13                     PREV SAVE AREA ADDR\n         LA    13,ZLINSAVE                       NEW SAVE AREA ADDR\n.CODE060 ANOP\n         ST    &LNKREG(1),ZLINSAVE+4             SAVE PREV SAREA ADDR\n         ST    13,8(&LNKREG(1))                  SAVE MY SAREA ADDR\n.*\n         SPACE\n         B     &EXEC                             EXECUTE MAIN ROUTINE\nZLINEXIT EQU   *                                 RETURN POINT\n         SPACE\n.*\n         AIF   ('&REENT' EQ 'N').CODE070         IS CODE REENT ?\n         LR    &LNKREG(1),15                     SAVE RETURN CODE\n         LR    1,13                              FREEMAIN CORE ADDR\n         L     13,ZLINSAVE+4                     LOAD CALLER SAREA ADDR\n         SPACE\n         AIF   ('&LIS' EQ 'N').CODE075           IS PRINT NOGEN ?\n         MNOTE '         FREEMAIN R,LV=ZLINSIZE,A=(1),SP=&SP'\n.CODE075 ANOP\n         FREEMAIN R,LV=ZLINSIZE,A=(1),SP=&SP\n         SPACE\n         LR    15,&LNKREG(1)                     RESTORE RETURN CODE\n.*\n.*       GENERATE MACRO 'RETURN' TO RETURN TO CALLER\n.*\n         AIF   ('&LIS' EQ 'N').CODE077           IS PRINT NOGEN ?\n         MNOTE '         RETURN &SAVE,RC=&RC'\n.CODE077 ANOP\n         RETURN &SAVE,RC=&RC\n         AGO   .CODE080\n.*\n.CODE070 ANOP\n         L     13,ZLINSAVE+4                     LOAD CALLER SAREA ADDR\n.*\n.*       GENERATE MACRO 'RETURN' TO RETURN TO CALLER\n.*\n         AIF   ('&LIS' EQ 'N').CODE085           IS PRINT NOGEN ?\n         MNOTE '         RETURN &SAVE,RC=&RC'\n.CODE085 ANOP\n         RETURN &SAVE,RC=&RC\n.*\n.CODE080 ANOP\n.*\n         SPACE\n         AIF   ('&REENT' EQ 'N').CODE090         IS CODE REENT ?\nZLINDSCT DSECT                                   REMOTE CORE DSECT\nZLINSAVE DC    18F'0'                            REGISTERS SAVE AREA\n&CSECT   CSECT                                   CSECT CONTINUATION\n         AGO   .CODE100\n.CODE090 ANOP\nZLINSAVE DC    18F'0'                            REGISTERS SAVE AREA\n         DC    A(ZLIN9999)                       CHECK MACRO 'END#'\n.*\n.CODE100 ANOP\n         DC    CL8'&CSECT'                       CSECT NAME\n         AIF   ('&REL' EQ '').NOREL              IS RELEASE SPECIFIED ?\n         DC    CL4'REL:'                         RELEASE ID\n         DC    CL8'&REL'                         RELEASE NUMBER\n.NOREL   ANOP\n         SPACE\n         DC    CL10' ASM.TIME '                  TIME STAMP HEADER\n&VMTMDT  SETC  '&SYSTIME'(1,2)\n         DC    CL2'&VMTMDT'                      ASSEMBLY TIME (HH)\n         DC    C':'                              COLON\n&VMTMDT  SETC  '&SYSTIME'(4,2).' '\n         DC    CL3'&VMTMDT'                      ASSEMBLY TIME (MM)\n&VMTMDT  SETC  '&SYSDATE'(1,8)\n         DC    CL8'&VMTMDT'                      DATE (MM/DD/YY)\n.*\n         AIF   ('&PATCH' EQ '').NOPATCH          IS PATCH REQUIRED ?\n         AIF   ('&PATCH(1)' EQ '').NOPATCH       IS PATCH REQUIRED ?\n&PATLBL  SETC  '&PATCH(2)'                       SET PATCH LABEL\n         SPACE\n         DS    0H\n         DC    CL8' YSPATCH'                     PATCH INITIAL ID\n&PATLBL  DC    &PATCH(1).H'0'                    PATCH AREA\n         DC    CL8'ENDPATCH'                     PATCH FINAL ID\n.NOPATCH ANOP\n         SPACE\n.*\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INUSE": {"ttr": 1293, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 28, "newlines": 28, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n&NAME    INUSE &FOOLASM\n         GBLB  &LUSED\n         GBLC  &USENM(50),&USEW(25)\n         LCLA  &A,&D,&B\n         LCLB  &F\n         LCLC  &X1,&X2\n         AIF   ('&NAME' EQ '').CHK\n&NAME    DS    0H .                     NAME DEFINED\n.CHK     AIF   (&LUSED).GO\n         MNOTE 0,'USER ERROR - LUSE NEVER USED, NO KNOWN BASE REGS'\n         MEXIT\n.GO      SPACE 2\n&A       SETA  1\n*              THE FOLLOWING REGISTER(S) IN USE:\n*                LOCATION           BASE\n.LOOP    AIF   ('&USEW(&A)' EQ '').MENDX\n&D       SETA  (&A*2)-1\n&X1      SETC  '&USENM(&D)'.'           '\n&X2      SETC  '&USENM(&D+1)'.'            '\n         MNOTE *,'&X1&X2    &USEW(&A)'\n&A       SETA  &A+1\n&F       SETB  1\n         AGO   .LOOP\n.MENDX   AIF   (&F).MEXIT\n*              ** NO REGISTERS CURRENTLY IN USE **\n.MEXIT   SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IOPL": {"ttr": 1295, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x13\\x00\\x13\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 19, "newlines": 19, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         IOPL     &DSECT=,                                  *HMD 05/78*\n         AIF  ('&DSECT' EQ 'NO').NODSECT                    *HMD 05/78*\nIOPL     DSECT                                              *HMD 05/78*\n         AGO   .DSCT                                        *HMD 05/78*\n.NODSECT ANOP                                               *HMD 05/78*\nIOPL     DS    0A                                           *HMD 05/78*\n.DSCT    ANOP                                               *HMD 05/78*\n***********************************************************************\n*    THE I/O SERVICE ROUTINE PARAMETER LIST (IOPL) IS A LIST OF       *\n*    FULLWORD ADDRESSES PASSED BY THE INVOKER OF ANY I/O SERVICE      *\n*    ROUTINE TO THE APPROPRIATE SERVICE ROUTINE VIA REGISTER ONE.     *\n***********************************************************************\n         SPACE\nIOPLUPT  DS    A        PTR TO UPT\nIOPLECT  DS    A        PTR TO ECT\nIOPLECB  DS    A        PTR TO USER'S ECB\nIOPLIOPB DS    A        PTR TO THE I/O SERVICE RTN PARM BLOCK\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JULDATE": {"ttr": 1297, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00E\\x00E\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 69, "newlines": 69, "modlines": 0, "user": "FILE024"}, "text": "PROC 0 DATE()\nGLOBAL MONTH DAY YEAR\nGLOBAL JULIAN SHOP WEEKDAY\nGLOBAL CDEBUG\n/*********************************************************************/\n/*  WRITTEN 05/03/85,  HOWARD M. DEAN, SYNTEX CORPORATION            */\n/*  MODIFIED 12/30/86, GENE L. LEW, MCI TELECOMM CORP.               */\n/*********************************************************************/\nIF &CDEBUG EQ YES THEN CONTROL LIST CONLIST SYMLIST PROMPT MSG\n    ELSE CONTROL NOMSG NOLIST\n/*-------------------------------------------------------------------*/\n/* THE FOLLOWING CLIST PERFORMS THESE FUNCTIONS:                     */\n/*                                                                   */\n/* TAKES ANY VALID GREGORIAN DATE IN THIS CENTURY AND                */\n/* CALCULATES THE JULIAN DATE, THE DAY OF THE WEEK, AND              */\n/* A 'SHOP DATE' IE- THE NUMBER OF DAYS ELAPSED BETWEEN              */\n/* THE INPUT DATE AND JAN. 1, 1900. THUS IF YOU FEED                 */\n/* THIS CLIST 2 DATES, THE DIFFERENCE BETWEEN THE TWO                */\n/* SHOP DATES EQUALS THE NUMBER OF ELAPSED DAYS BETWEEN              */\n/* THE TWO.                                                          */\n/*                                                                   */\n/* THE FORMATS OF THE GLOBAL VARIABLES ARE AS FOLLOWS:               */\n/*                                                                   */\n/* INPUT - MONTH=MM, DAY=DD, YEAR=YY                                 */\n/*         FOR EXAMPLE: 01 01 76                                     */\n/*         NOTE - 1 1 76 WILL NOT WORK.                              */\n/*                                                                   */\n/* INPUT - DATE(SYSDATE)  - SETS VARIABLES FOR TODAY'S DATE          */\n/*         DATE(MM/DD/YY) - SETS VARIABLES FOR THE DATE SPECIFIED    */\n/*                                                                   */\n/* OUTPUT - JULIAN=YYDDD, IE 99365 FOR 12/31/99                      */\n/* SHOP   - DD..DD, IE, 36523 FOR THE SAME DATE                      */\n/* WEEKDAY - MONDAY, TUESDAY, WEDNESDAY, ETC.                        */\n/*-------------------------------------------------------------------*/\nERROR +\nDO\n  SET &LASTCC EQ 4\n  EXIT\nEND\nIF  &STR(&DATE) NE &STR() THEN                                         -\n   DO\n      IF &STR(&DATE) EQ &STR(SYSDATE) THEN                             -\n         DO\n           SET &MONTH EQ &SUBSTR(1:2,&SYSDATE)\n           SET &DAY   EQ &SUBSTR(4:5,&SYSDATE)\n           SET &YEAR  EQ &SUBSTR(7:8,&SYSDATE)\n         END\n      ELSE                                                             -\n         DO\n           SET &MONTH EQ &SUBSTR(1:2,&STR(&DATE))\n           SET &DAY   EQ &SUBSTR(4:5,&STR(&DATE))\n           SET &YEAR  EQ &SUBSTR(7:8,&STR(&DATE))\n         END\n   END\nSET &JULIAN = &SUBSTR(&EVAL((&MONTH*3)-2):+\n              &EVAL(&MONTH*3),000031059090120151181212243273304334)\nSET &JULIAN = &JULIAN + &DAY\nIF &YEAR//4 = 0 AND &MONTH GT 2 THEN SET &JULIAN = &JULIAN + 1\nSET &SHOP = &JULIAN\nSET &L = &LENGTH(&JULIAN)\nSET &JULIAN = &STR(X00&JULIAN)\nSET &JULIAN = &STR(&YEAR)+\n              &STR(&SUBSTR(&EVAL(&L+1):+\n              &EVAL(&LENGTH(&JULIAN)),&JULIAN))\nSET &SHOP = &EVAL(&YEAR*365) + &EVAL((&YEAR-1)/4) + &SHOP - 1\nSET &WEEKDAY = &SUBSTR(&EVAL(((&SHOP//7)*6)+1):+\n               &EVAL(((&SHOP//7)*6)+6),   +\n               MON  TUESWEDNES THURS   FRI SATUR   SUN)\nSET &WEEKDAY = &SUBSTR(&EVAL(6-&LENGTH(&WEEKDAY)+1):6,&WEEKDAY)DAY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LDROP": {"ttr": 1538, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00Q\\x00Q\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 81, "newlines": 81, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n&NAME    LDROP &W1,&W2\n         GBLB  &LUSED\n         GBLC  &USENM(50),&USEW(25)\n         LCLA  &A,&B,&C,&D,&E\n         LCLB  &F\n         LCLC  &X1,&X2\n         AIF   ('&NAME' EQ '').NONAME\n&NAME    DS    0H .                     NAME DEFINED\n.NONAME  AIF   (&LUSED).CNTU\n         MNOTE 8,'USER ERROR - LUSE HAS NEVER BEEN USED'\n         MEXIT\n.CNTU    ANOP\n&C       SETA  N'&SYSLIST\n         AIF   (&C GT 0).OK1\n         MNOTE 4,'NO OPERAND(S) ON LDROP, MACRO IGNORED'\n         MEXIT\n.OK1     AIF   ('&W1' EQ '*').DROPALL\n&A       SETA  1\n.LOOP    AIF   (&A GT &C).MEND\n&X1      SETC  '&SYSLIST(&A)'\n&B       SETA  1\n&F       SETB  0\n.LL1     AIF   ('&USEW(&B)' EQ '&X1').DROPIT\n         AIF   ('&USEW(&B)' EQ '').LL1A\n&B       SETA  &B+1\n         AIF   (&B LE 25).LL1\n.LL1A    AIF   (&F).GETNEXT\n         MNOTE 8,'USER ERROR - &SYSLIST(&A) NOT LUSED'\n.GETNEXT ANOP\n&A       SETA  &A+1\n         AGO   .LOOP\n.DROPIT  ANOP\n&D       SETA  (&B*2)-1\n         MNOTE *,'&USEW(&B) WAS BASE FOR &USENM(&D)&USENM(&D+1)'\n.*       CLEAN UP USEW ARRAY FIRST\n&E       SETA  &B                       SET POINTER\n.CL1     AIF   (&E EQ 25).NULLAST\n&USEW(&E) SETC '&USEW(&E+1)'\n&E       SETA  &E+1\n         AIF   ('&USEW(&E)' EQ '').CL2\n         AGO   .CL1\n.NULLAST ANOP\n&USEW(25) SETC ''\n.*       NOW - THE HARD PART, CLEAN UP USENM\n.CL2     AIF   (&D GE 49).NULBOTH\n&USENM(&D) SETC '&USENM(&D+2)'\n&USENM(&D+1) SETC '&USENM(&D+3)'\n&D       SETA  &D+2\n         AIF   ('&USENM(&D)' EQ '').GOTO\n         AGO   .CL2\n.NULBOTH ANOP\n&USENM(49) SETC ''\n&USENM(50) SETC ''\n.GOTO    AIF   (&F).LL1                 TRY AGAIN\n         DROP  &SYSLIST(&A) .           GEN DROP STMT\n&F       SETB  1                        NO MULTI-DROPS\n         AGO   .LL1                     CLEAN ANY REMAINING ENTRIES\n.DROPALL MNOTE *,'ALL KNOWN BASE REGISTERS BEING DROPPED'\n&B       SETA  1\n.DD1     AIF   ('&USEW(&B)' EQ '').DDONE\n         MNOTE *,'&USEW(&B) WAS BASE FOR &USENM(&B*2-1)&USENM(&B*2)'\n&B       SETA  &B+1\n&F       SETB  1\n         AGO   .DD1\n.DDONE   AIF   (&F).DDTWO\n         MNOTE 4,'** NO REGISTERS IN USE TO BE LDROP''ED **'\n         MEXIT\n.DDTWO   ANOP\n&A       SETA  1\n.CLEAR   AIF   (&A GT 25).MEND\n         AIF   ('&USEW(&A)' EQ '').NODRP\n         DROP  &USEW(&A) .                  GENERATE DROP STMT\n.NODRP   ANOP\n&USEW(&A) SETC ''\n&B       SETA  (&A*2)-1\n&USENM(&B) SETC ''\n&USENM(&B+1) SETC ''\n&A       SETA  &A+1\n         AGO   .CLEAR\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LUSE": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00B\\x00B\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 66, "newlines": 66, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n&NAME    LUSE  &WHERE,&W1,&W2\n         GBLB  &LUSED\n         GBLC  &USENM(50),&USEW(25)\n         LCLA  &A,&B,&C,&D,&E\n         LCLC  &X1,&X2\n         AIF   ('&NAME' EQ '').NONAME\n&NAME    DS    0H .           DEFINE NAME\n.NONAME  AIF   (N'&SYSLIST LE 15).OK1\n         MNOTE 16,'OPERAND ERROR - TOO MANY OPERANDS, MACRO ABORTED'\n         MEXIT\n.OK1     AIF   (N'&SYSLIST LT 2).ERR\n&A       SETA  1\n&C       SETA  N'&SYSLIST\n.OKX     AIF   ('&SYSLIST(&A)' NE '').INCR\n         MNOTE 16,'OPERAND ERROR - NULL OPERAND'\n         MEXIT\n.INCR    AIF   (&A EQ &C).GEN\n&A       SETA  &A+1\n         AGO   .OKX\n.GEN     AIF   (&C NE 2).RECURSE\n&A       SETA  1\n.FNULL   AIF   ('&USEW(&A)' EQ '').HNULL\n&A       SETA  &A+1\n         AIF   (&A LE 25).FNULL\n         MNOTE 16,'LUSE USER ERROR - TOO MANY LUSE WITHOUT LDROP'\n         MEXIT\n.HNULL   ANOP\n&D       SETA  (&A*2)-1\n&E       SETA  K'&WHERE-8\n&X1      SETC  '&WHERE'\n         AIF   (&E LE 0).COMMON\n         AIF   (&E LE 8).SETX2\n&E       SETA  8\n.SETX2   ANOP\n&X2      SETC  '&WHERE'(9,&E)\n.COMMON  ANOP\n&USENM(&D)     SETC           '&X1'\n&USENM(&D+1) SETC '&X2'\n&USEW(&A) SETC '&W1'\n&E       SETA  1\n.MATCH   AIF   (&E GE &A).GENUSE\n         AIF   ('&USEW(&E)' EQ '&USEW(&A)').MN0\n&E       SETA  &E+1\n         AGO   .MATCH\n.MN0     MNOTE 0,'** WARNING **  REGISTER '\n         MNOTE *,'&USEW(&E) PREVIOUSLY LUSED AS BASE FOR'\n&D       SETA  (&E*2)-1\n         MNOTE *,'&USENM(&D)&USENM(&D+1) - NEW USING CREATED'\n&E       SETA  &E+1\n         AGO   .MATCH\n.GENUSE  USING &WHERE,&W1 .   GEN USING STMT\n         AIF   (&LUSED).MEND\n&LUSED   SETB  1\n         SPACE 1\n         MEXIT\n.RECURSE ANOP\n&B       SETA  2\n.RCU     AIF   (&B GT &C).MEND\n         LUSE  &WHERE&X1,&SYSLIST(&B)\n&B       SETA  &B+1\n&E       SETA  &E+4096\n&X1      SETC  '+'.'&E'\n         AGO   .RCU\n.ERR     MNOTE 16,'OPERAND ERROR - NEED 2 OR MORE OPERANDS, MACRO EXIT'\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MAKEDAY": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00#\\x00#\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 35, "newlines": 35, "modlines": 0, "user": "FILE024"}, "text": "PROC 0 DEBUG\nIF &DEBUG EQ DEBUG THEN CONTROL LIST CONLIST SYMLIST PROMPT\n   ELSE CONTROL NOMSG NOLIST NOPROMPT NOFLUSH\nERROR RETURN\n/*********************************/\n/*                               */\n/*  INITIALIZE 'XFER' DATASET    */\n/*                               */\n/*********************************/\nDEL 'OP.P.XFERDUMP.INDEX' PURGE\nFREE  DA('OP.P.XFERDUMP.INDEX') FI(INPUT)\nALLOC DA('OP.P.XFERDUMP.INDEX') SP(5,1) CYL DIR(60) NEW CATALOG -\n      RECFM(F B) LRECL(80) BLKSIZE(3120) UNIT(3380) VOL(DLIB01)\nSET &X EQ 1\nCONTROL NOFLUSH\nDO WHILE(&X LT 32)\n   IF &X LT 10 THEN SET &X EQ &STR(0&X)\n   FREE  FI(INPUT)\n   ALLOC FI(INPUT) DA('OP.P.XFERDUMP.INDEX(DAY&X)') OLD\n   OPENFILE INPUT OUTPUT\n   /* INSURE 80 BYTE RECORDS */\n   SET &INPUT EQ -\n   &STR(PAD............)\n   SET &INPUT EQ -\n   &INPUT&STR(...................................)\n   SET &INPUT EQ -\n   &INPUT&STR(..............................)\n   /* INSURE 80 BYTE RECORDS */\n   PUTFILE INPUT\n   CLOSFILE INPUT\n   WRITE MEMBER DAY&X WRITTEN\n   SET &X EQ &X + 1\nEND\nWRITE PROCESS COMPLETE\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REGS": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00*\\x00*\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 42, "newlines": 42, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         REGS\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        FIXED POINT REGISTERS                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nR0       EQU   0        *USED BY O.S.\nR1       EQU   1        *USED BY O.S. // ADDRESS OF PARAMETER LIST\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13       *USED BY O.S. // SAVE-AREA ADDRESS\nR14      EQU   14       *USED BY O.S. // RETURN ADDRESS\nR15      EQU   15       *USED BY O.S. // ENTRY-PT ADDR, RETURN CODE\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        FLOATING POINT REGISTERS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nF0       EQU   0\nF2       EQU   2\nF4       EQU   4\nF6       EQU   6\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SEQCK": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x9f\\x00\\x9f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 159, "newlines": 159, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         SEQCK &TYPE\n         GBLC  &GTYPE,&GTYPEP\n&GTYPE   SETC  '&TYPE'\n         AIF   ('&GTYPE' EQ 'INIT').INIT\n         AIF   ('&GTYPE' EQ 'ENTRE').ENTRE\n         AIF   ('&GTYPE' EQ 'DO').DO\n         AIF   ('&GTYPE' EQ 'DOWHILE').DOWHILE\n         AIF   ('&GTYPE' EQ 'DOWHLOR').DOWHILE\n         AIF   ('&GTYPE' EQ 'UNTIL').UNTIL\n         AIF   ('&GTYPE' EQ 'UNTILOR').UNTILOR\n         AIF   ('&GTYPE' EQ 'WHILE').WHILE\n         AIF   ('&GTYPE' EQ 'WHILEOR').WHILEOR\n         AIF   ('&GTYPE' EQ 'ENDDO').ENDDO\n         AIF   ('&GTYPE' EQ 'DOEND').DOEND\n         AIF   ('&GTYPE' EQ 'IF').IF\n         AIF   ('&GTYPE' EQ 'IFOR').IF\n         AIF   ('&GTYPE' EQ 'ELSE').ELSE\n         AIF   ('&GTYPE' EQ 'ENDIF').ENDIF\n         AIF   ('&GTYPE' EQ 'IEXIT').IEXIT\n         AIF   ('&GTYPE' EQ 'EXIT').EXIT\n         MNOTE 8,'SEQCK FAILED'\n         MEXIT\n.INIT    ANOP\n         AIF   ('&GTYPEP' EQ '').OKXIT\n         AGO   .ER1\n.ENTRE   ANOP\n         AIF   ('&GTYPEP' EQ 'INIT').OKXIT\n         AIF   ('&GTYPEP' EQ 'EXIT').OKXIT\n         AGO   .ER1\n.DO      ANOP\n         AIF   ('&GTYPEP' EQ 'ENTRE').OKXIT\n         AIF   ('&GTYPEP' EQ 'DO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOWHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AIF   ('&GTYPEP' EQ 'IF').OKXIT\n         AIF   ('&GTYPEP' EQ 'ELSE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AGO   .ER1\n.DOWHILE ANOP\n         AIF   ('&GTYPEP' EQ 'ENTRE').OKXIT\n         AIF   ('&GTYPEP' EQ 'DO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOWHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AIF   ('&GTYPEP' EQ 'IF').OKXIT\n         AIF   ('&GTYPEP' EQ 'ELSE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOWHLOR').OKXIT\n         AGO   .ER1\n.UNTIL   ANOP\n         AIF   ('&GTYPEP' EQ 'DO').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTILOR').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AGO   .ER1\n.UNTILOR ANOP\n         AIF   ('&GTYPEP' EQ 'DO').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTILOR').OKXIT\n         AGO   .ER1\n.WHILE   ANOP\n         AIF   ('&GTYPEP' EQ 'DO').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILEOR').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AIF   ('&GTYPEP' EQ 'IEXIT').OKXIT\n         AGO   .ER1\n.WHILEOR ANOP\n         AIF   ('&GTYPEP' EQ 'DO').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AIF   ('&GTYPEP' EQ 'IEXIT').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILEOR').OKXIT\n         AGO   .ER1\n.DOEND   ANOP\n         AIF   ('&GTYPEP' EQ 'DO').OKXIT\n         AGO   .ER1\n.ENDDO   ANOP\n         AIF   ('&GTYPEP' EQ 'DOWHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AIF   ('&GTYPEP' EQ 'IEXIT').OKXIT\n.IF      ANOP\n         AIF   ('&GTYPEP' EQ 'ENTRE').OKXIT\n         AIF   ('&GTYPEP' EQ 'DO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOWHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AIF   ('&GTYPEP' EQ 'IF').OKXIT\n         AIF   ('&GTYPEP' EQ 'ELSE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AIF   ('&GTYPEP' EQ  'IFOR').OKXIT\n         AGO   .ER1\n.ELSE    ANOP\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'IF').OKXIT\n         AIF   ('&GTYPEP' EQ 'ELSE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AIF   ('&GTYPEP' EQ 'IEXIT').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AGO   .ER1\n.ENDIF   ANOP\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'IF').OKXIT\n         AIF   ('&GTYPEP' EQ 'ELSE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AIF   ('&GTYPEP' EQ 'IEXIT').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AGO   .ER1\n.IEXIT   ANOP\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'IF').OKXIT\n         AIF   ('&GTYPEP' EQ 'ELSE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENTRE').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AGO   .ER1\n.EXIT    ANOP\n         AIF   ('&GTYPEP' EQ 'ENTRE').OKXIT\n         AIF   ('&GTYPEP' EQ 'UNTIL').OKXIT\n         AIF   ('&GTYPEP' EQ 'WHILE').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDDO').OKXIT\n         AIF   ('&GTYPEP' EQ 'ENDIF').OKXIT\n         AIF   ('&GTYPEP' EQ 'DOEND').OKXIT\n         AGO   .ER1\n.ER1     MNOTE 8,'COMMAND OUT-OF-SEQUENCE'\n.OKXIT   ANOP\n&GTYPEP  SETC  '&GTYPE'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SETREG": {"ttr": 1551, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\xdd\\x00\\xdd\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 221, "newlines": 221, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n&NAME    SETREG  &R1,&R2,&R3,&R4,&R5,&R6,&R7,&R8,&R9,&R10,&R11,&R12,&COC\n               DE=NORENT,&PARM=,&EQU=YES,&ID=NO,&SD=YES,               C\n               &SP=0,&LVA=0,&CLEAR=(NO,00),&CPR=NO,&VER=YES,           C\n               &BASE=\n         GBLA  &SIDX\n         GBLB  &SREG\n         GBLB  &SDMAP             GLOBAL TO TURN OF S/A MAP\n         GBLB  &IDS(255)          GLOBAL FOR ID LOGOFF FOR EOJ\n         GBLB  &CRENT(255)        GLOBAL TO TELL EOJ CODE=RENT\n         GBLC  &IDP(255)          GLOBAL WHICH CONTAINS ID\n         GBLC  &POOL(255),&LV(255) GLOBAL FOR SUBPOOL & LENGTH\n         LCLA  &A1,&A2,&A3\n         LCLB  &REG,&MAP           EQUATE SWITCH\n         LCLC  &C(10),&SID,&CDE,&RA,&RB\n         LCLC  &SECT\n         LCLC  &CPYR,&CRX,&CBX    COPYRIGHT STATEMENT       *HMD 04/85*\n&SECT    SETC  '&SYSECT'          SET DEFAULT CSECT NAME\n         AIF   ('&CPR' EQ 'NO').NOCPR                       *HMD 04/85*\n&CPYR    SETC  '&SECT. - COPYRIGHT (C) 1986 HOWARD M. DEAN' *HMD 12/85*\n&CRX     SETC  'CR'.'&SYSNDX'                               *HMD 12/85*\n&CBX     SETC  'CB'.'&SYSNDX'                               *HMD 12/85*\n.NOCPR   ANOP\n         AIF   (T'&BASE EQ 'O').NBASE\n&SECT    SETC  '&BASE(1)'\n.NBASE   ANOP\n&REG     SETB  (&SREG)             SET WHETHER TO MAKE EQUATES\n&MAP     SETB  (&SDMAP)            SET FOR SAVE AREA MAP\n&SIDX    SETA  &SIDX+1             INCREMENT INDEX LEVEL\n&SID     SETC  '&SIDX'\n&A1      SETA  1                   SET COUNTER TO INITIAL VALUE\n&A2      SETA  2                   SET POINTER TO INITIAL VALUE\n&IDS(&SIDX) SETB  ('&ID' EQ 'YES')   SET INDICATOR FOR LOGON,OFF\n&IDP(&SIDX) SETC '&SECT'.' (VERSION '.'&SYSDATE'.' '.'&SYSTIME'.')'\n&CRENT(&SIDX) SETB ('&CODE' EQ 'RENT') SET INDICATOR FOR EOJ\n         AIF   (T'&R1 EQ 'O').DEF  SET DEFAULT AND NO ADDITIONAL REGS\n         AIF   ('&R1' GE '2' AND '&R1' LE '12').ROK1 1ST OK\n         AIF   ('&R1'(1,1) EQ 'R').ROK1\n         MNOTE 4,'&R1 INVALID FIRST OPERAND. 12 ASSUMED'\n.DEF     ANOP                      ENTRY FOR DEFAULT OF 12\n&RA      SETC  '12'               SET DEFAULT BASE REGISTER\n&A1      SETA  0                   NO ADDITIONAL BASES\n         AGO   .CONT1              GO ASSMB. MACRO\n.ROK1    ANOP\n&RA      SETC  '&R1'\n.ROK     AIF   (T'&SYSLIST(&A2) EQ 'O').CONTA  IF NO MORE CONTINUE\n         AIF   ('&SYSLIST(&A2)' GE '2' AND '&SYSLIST(&A2)' LE '12').S1\n         AIF   ('&SYSLIST(&A2)'(1,1) EQ 'R').S1\n         MNOTE 4,'OPERAND &A2 INVALID. GENERATION STOPPED HERE'\n.CONTA   ANOP\n&A1      SETA  &A1-1               ONE LESS FOR ADDITIONAL REG\n         AGO   .CONT1\n.S1      ANOP\n&C(&A1)  SETC  ','.'&SYSLIST(&A2)'   SET ONE REGISTER\n&A1      SETA  &A1+1               POINT TO NEXT POSITION\n&A2      SETA  &A2+1               POINT TO NEXT POSITION\n         AIF   (&A1 NE 11).ROK    ALLOW ONLY 10 BASE REGISTERS\n         MNOTE 4,'TOO MANY REGISTERS SPECIFIED. 10 ASSUMED'\n&A1      SETA  10                  NUMBER OF ADDITIONAL REGISTERS\n.CONT1   ANOP\n&A3      SETA  &A1                 SET POSITION OF LAST REGISTER\n         AIF   ('&CODE' EQ 'RENT' OR '&CODE' EQ 'NORENT').CODE1\n         MNOTE 0,'INVALID CODE PARAMETER. NORENT ASSUMED'\n&CDE     SETC  'NORENT'            DEFAULT\n         AGO   .CODE2\n.CODE1   ANOP\n&CDE     SETC  '&CODE'             SET CODE SPECIFICATION\n.CODE2   ANOP\n         AIF   ('&CDE' EQ 'RENT' OR '&LVA' EQ '0').CODE3    *HMD 12/85*\n         MNOTE 0,'ADDITIONAL STORAGE SPECIFIED - REENTRANCY FORCED'\n&CDE     SETC  'RENT'                                       *HMD 12/85*\n.CODE3   ANOP                                               *HMD 12/85*\n         LUSE  &SECT,15           TEMP ADDRESSING\n&NAME    SAVE  (14,12),,&IDP(&SIDX) SAVE REGS AND POST ID\n         AIF   ('&CPR' EQ 'NO').NOCPR1                      *HMD 04/85*\n         ENTRY &CRX                                         *HMD 12/85*\n         B     &CBX                                         *HMD 12/85*\n&CRX     DC    C'&CPYR'           COPYRIGHT NOTICE          *HMD 12/85*\n&CBX     DS 0H                    COPYRIGHT BRANCH POINT    *HMD 04/85*\n.NOCPR1  ANOP                                               *HMD 04/85*\n         LDROP 15 .                LDROP TEMP ADDRESSING\n         LR    &RA,15             SET FIRST BASE\n         LUSE  &SECT,&RA&C(1)&C(2)&C(3)&C(4)&C(5)&C(6)&C(7)&C(8)&C(9)&CC\n               (10)   SET UP LUSE\n         AIF   (&A3 EQ 0).CKRENT1\n         LA    &SYSLIST(&A3+1),2048 .     GET HALF THE DISPLACEMENT\n         SLL   &SYSLIST(&A3+1),1 .      DOUBLE TO GET 4096\n&A2      SETA  1                   POINT TO FIRST OPERAND\n.S3      ANOP\n         LA    &SYSLIST(&A2+1),0(&SYSLIST(&A3+1),&SYSLIST(&A2)) .     LC\n               OAD ADDITIONAL BASE REGISTER\n&A1      SETA  &A1-1               SUB FROM COUNTER\n&A2      SETA  &A2+1               ADD TO POINTER\n         AIF   (&A1 NE 0).S3       IF MORE KEEP ON TRUCKIN\n.CKRENT1 AIF   ('&CDE' EQ 'NORENT').NORENT1\n&POOL(&SIDX) SETC '&SP'           SET THE SUBPOOL NUMBER\n&LV(&SIDX) SETC '&LVA'            SET LENGTH FOR GETMAIN\n         CNOP  0,4            FOR ALIGNMENT\n         BAL   1,*+8          BRANCH AROUND SP+LV\n$SPLV&SID DS    0F             USED BY LOAD\n         DC    AL1(&POOL(&SIDX)) SUBPOOL\n         AIF   (&MAP OR '&SD' EQ 'NO').ABS\n         DC    AL3((((USERWORK-SAVEAREA)+(&LV(&SIDX))+7)/8)*8) LENGTH\n         AGO   .RND\n.ABS     ANOP\n         DC    AL3(((72+&LV(&SIDX)+7)/8)*8)                  LENGTH\n.RND     ANOP\n         L     0,$SPLV&SID    GET SP+LV\n         SVC   10             DO GETMAIN\n         AIF   (T'&CLEAR EQ 'O').LMSAVE GO IF NO CLEAR\n         AIF   ('&CLEAR(1)' EQ 'NO').LMSAVE DO NOT CLEAR\n         XC    0(72,1),0(1) .      CLEAR REGISTER SAVE AREA\n&RB      SETC  '00'                DEFAULT BINARY ZERO\n         AIF   (N'&CLEAR EQ 1).BIN0 DEFAULT TO BINARY ZERO\n&RB      SETC  '&CLEAR(2)'         SET CLEAR CHARACTER\n.BIN0    LA    2,72(1)             POINT TO 'TO' ADDRESS\n         L     3,$SPLV&SID         GET 'TO' LENGTH          *HMD 12/85*\n         N     3,$CLR&SID          CLEAR HI-ORDER BITS      *HMD 12/85*\n         S     3,$LEN&SID          SUBTRACT SAVE AREA       *HMD 12/85*\n         BNP   $DES&SID            IF ONLY A SAVE AREA      *HMD 12/85*\n         LA    4,0                 GET 'FROM' ADDRESS (DUMMY)\n         LA    5,X'&RB.'           GET FILL CHARACTER\n         SLL   5,24                PUT IN HIGH BYTE AND CLEAR LENGTH\n         MVCL  2,4                 CLEAR STORAGE FAST       *HMD 12/85*\n         CNOP  0,4                 ALIGNMENT                *HMD 12/85*\n         B     $DES&SID            BRANCH AROUND CONSTANTS  *HMD 12/85*\n$CLR&SID DC    F'16777215'         CLEAR HIGH ORDER BITS    *HMD 12/85*\n$LEN&SID DC    F'72'               LENGTH CONSTANT -        *HMD 12/85*\n$DES&SID EQU   *                   END OF CONSTANT AREA\n         AGO   .LMSAVE\n.NORENT1 ANOP\n         LA    1,SAVE&SYSNDX .     POINT TO SAVE AREA\n.LMSAVE  ST    13,4(1) .           SAVE OLD SAVE AREA ADDRESS\n         ST    1,8(13) .           SAVE NEW SAVE AREA ADDRESS\n         LR    13,1 .              GET NEW SAVE AREA ADDRESS\n         AIF   ('&CDE' EQ 'RENT').NOSAV\n         B     SEND&SYSNDX .      BRANCH AROUND NON-EXECUTABLE CODE\nSAVE&SYSNDX  DC    18F'0' .        NON-REENTRANT PROGRAM SAVE AREA\nSEND&SYSNDX    DC  0H'0' .         END OF SAVE AREA TO BRANCH AROUND\n.NOSAV   ANOP\n         AIF   (NOT &IDS(&SIDX)).DOEQU NO ID LOG TO PROGRAMMER\n&RA      SETC  'BEGIN '.'&IDP(&SIDX)' SET LOGON MESSAGE\n         WTO   '&RA',ROUTCDE=11 . LOG THE PROGRAM ON\n.DOEQU   AIF   (&REG OR '&EQU' EQ 'NO').NOEQU\n         SPACE 2\n*****    REGISTER EQUATES    *****\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\n         SPACE 2\n*****    MISC EQUATES    *****\n         SPACE 2\nBRANCH   EQU   240\nNOP      EQU   15\nON       EQU   255\nOFF      EQU   0\n         SPACE 2\n.NOEQU   AIF   (&MAP OR '&SD' EQ 'NO').NOMAP\n*****    SAVE AREA DSECT    *****\n         SPACE 2\nSAVEAREA DSECT ,                  SAVE AREA DUMMY SECTION\nPL1      DC    F'0' .             AREA USED BY PL/I\nLASTSAVE DC    F'0' .             ADDRESS OF LAST SAVE AREA\nNEXTSAVE DC    F'0' .             ADDRESS OF NEXT SAVE AREA\nREGE     DC    F'0' .             SAVE AREA FOR REGISTER 14\nREGF     DC    F'0' .             SAVE AREA FOR REGISTER 15\nREG0     DC    F'0' .             SAVE AREA FOR REGISTER 0\nREG1     DC    F'0' .             SAVE AREA FOR REGISTER 1\nREG2     DC    F'0' .             SAVE AREA FOR REGISTER 2\nREG3     DC    F'0' .             SAVE AREA FOR REGISTER 3\nREG4     DC    F'0' .             SAVE AREA FOR REGISTER 4\nREG5     DC    F'0' .             SAVE AREA FOR REGISTER 5\nREG6     DC    F'0' .             SAVE AREA FOR REGISTER 6\nREG7     DC    F'0' .             SAVE AREA FOR REGISTER 7\nREG8     DC    F'0' .             SAVE AREA FOR REGISTER 8\nREG9     DC    F'0' .             SAVE AREA FOR REGISTER 9\nREGA     DC    F'0' .             SAVE AREA FOR REGISTER 10\nREGB     DC    F'0' .             SAVE AREA FOR REGISTER 11\nREGC     DC    F'0' .             SAVE AREA FOR REGISTER 12\nUSERWORK DS    0C\n&SYSECT  CSECT .                  RESTORE PROGRAM ADDRESSING\n         LUSE  SAVEAREA,13        SET DSECT ADDRESSING\n         AGO   .YMAP\n.NOMAP   ANOP\n&SYSECT  CSECT  .\n.YMAP    ANOP\n         SPACE 3\n         AIF   (T'&PARM EQ 'O').EXIT  PARM NOT WANTED\n         AIF   ('&PARM'(1,1) EQ '(').PREG REGISTER NOTATION\n         L     15,4(13) .         GET OLD SAVEAREA ADDRESS\n&RA      SETC  '&PARM(1)'         GET PARM DATA\n         MVC   &RA.(4),24(15) .   MOVE PARM POINTER TO USER\n         AGO   .EXIT\n.PREG    ANOP\n         L     15,4(13) .         GET OLD SAVE AREA ADDRESS\n&RA      SETC  '&PARM(1)'         GET PARM DATA\n         L     &RA,24(15) .       PASS OLD REG 1 (PARM POINTER) TO USER\n.EXIT    ANOP\n&SREG    SETB  1\n&SDMAP   SETB  1\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SMFID": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00&\\x00&\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 38, "newlines": 38, "modlines": 0, "user": "FILE024"}, "text": "*---------------------------------------------------------------------*\n*                                                                     *\n*                          S M F I D                                  *\n*                                                                     *\n*   THIS SUBROUTINE RETURNS A SINGLE FOUR CHARACTER VARIABLE TO THE   *\n*   CALLER CONTAINING THE FOUR CHARACTER SMF SYSTEM ID.               *\n*                                                                     *\n*   CALLING SEQUENCE:      CALL SMFID ( ID )                          *\n*                                                                     *\n*   THE SMFID IS LOCATED IN THE SYSTEM MANAGEMENT CONTROL AREA, A     *\n*   CONTROL BLOCK POINTED TO BY THE CVT.                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE\nSMFID    CSECT\nSMFID    RMODE 24\nSMFID    AMODE 24\nR1       EQU   1\nR2       EQU   2\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE\n         USING *,R15               DECLARE BASE REGISTER\n         SAVE  (14,12),,*          SAVE CALLER'S REGISTERS\n         SPACE\n         L     R2,0(R1)            LOAD ADDRESS OF RETURN AREA\n         L     R1,CVTPTR           LOAD ADDRESS OF CVT\n         L     R1,(CVTSMCA-CVT)(R1)  LOAD ADDRESS OF SMCA\n         MVC   0(4,R2),(SMCASID-SMCABASE)(R1)   COPY SMF ID TO USER\n         LM    R14,R12,12(R13)     RESTORE REGISTERS\n         SR    R15,R15             CLEAR RETURN CODE\n         BR    R14                 RETURN TO CALLER\n         PRINT NOGEN\n         CVT   DSECT=YES           MAP THE CVT\n         IEESMCA ,                 MAP THE SMCA\n         END   SMFID\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SS#XFER": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00+\\x00+\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 43, "newlines": 43, "modlines": 0, "user": "FILE024"}, "text": "PROC 0 DEBUG\nGLOBAL MONTH DAY YEAR\nGLOBAL JULIAN SHOP WEEKDAY\nGLOBAL CDEBUG\n/* ***************************************************************** */\n/* CLIST:    SS#XFER                                                 */\n/*                                                                   */\n/* AUTHOR:   GENE L. LEW, MCI TELECOMMUNICATIONS CORP.               */\n/*                                                                   */\n/* FUNCTION: DRIVER FOR 'XFERDUMP/ISPF' INTERFACE THAT CALLS         */\n/*           THE 'XFERDUMP' CLIST, \"XIX\".                            */\n/*                                                                   */\n/* DATE:     JANUARY 06, 1987                                        */\n/* ***************************************************************** */\nIF &DEBUG = DEBUG THEN -\n   CONTROL MSG LIST CONLIST SYMLIST\nELSE -\n   CONTROL NOMSG NOLIST NOCONLIST NOSYMLIST\nIF &SYSISPF = ACTIVE THEN -\n   DO\n     ISPEXEC DISPLAY PANEL(SS#XFR00)\n     IF &LASTCC = 8 THEN -\n       EXIT\n     ELSE IF &SSTODAY = YES THEN -\n       SET &PARM = &STR(TODAY)\n     ELSE IF &SSYEST = YES THEN -\n       SET &PARM = &STR(YESTERDAY)\n     ELSE -\n       DO\n         SET &AA = )\n         SET &PARM = D(&SSDATE&STR(&AA)\n       END\n     %XIX &PARM\n     EXIT\n   END\nELSE -\n   DO\n     WRITE ********************************\n     WRITE YOU MUST EXECUTE THIS CLIST FROM\n     WRITE WITHIN ISPF!!\n     WRITE ********************************\n   END\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SS#XFR00": {"ttr": 1800, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00.\\x00.\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 46, "newlines": 46, "modlines": 0, "user": "FILE024"}, "text": "+-----------------------% XFER Dump Transfer Inquiry +--------------------------\n%Option  ===>_ZCMD                                                             +\n%                                                           +Userid   - &ZUSER\n%                                                           +Time     - &ZTIME\n+   Inquire on today's dumps.......%===>_SSTODAY+           +Terminal - &ZTERM\n%                                                           +PF Keys  - &ZKEYS\n+   Inquire on yesterday's dumps...%===>_SSYEST+            +Cpuid    - &CPUID\n%                                                           +Date     - &ZDATE\n+   Inquire on tomorrow's dumps....%===>_SSTOMR+\n%\n%\n+   Day of month for inquiry.......%===>_SSDATE+  (1 thru 31, depending\n+                                                            upon month)\n%\n%\n%\n+Enter%END+command to terminate application.\n%\n)INIT\n  .HELP = ISP00003      /* Help for this panel                     */\n  /*---------------------------------------------------------------*/\n  /*      This is the primary panel for 'XFERDUMP' inquiry         */\n  /*---------------------------------------------------------------*/\n  &SSTODAY = 'YES'\n  &SSYEST  = 'NO'\n  &SSTOMR  = 'NO'\n  &SSDATE  = ' '\n)PROC\n\n  IF  (&SSTODAY = YES)\n    VER (&SSYEST,LIST,NO,MSG=SSXFR001)\n    VER (&SSTOMR,LIST,NO,MSG=SSXFR000)\n  IF  (&SSYEST = YES)\n    VER (&SSTODAY,LIST,NO,MSG=SSXFR002)\n    VER (&SSTOMR,LIST,NO,MSG=SSXFR000)\n  IF  (&SSTOMR = YES)\n    .MSG = SSXFR000\n    VER (&SSYEST,LIST,NO,MSG=SSXFR001)\n    VER (&SSTOMR,LIST,NO,MSG=SSXFR000)\n  IF  (&SSDATE \u00ac= ' ')\n    VER (&SSDATE,RANGE,01,31,MSG=SSXFR003)\n    VER (&SSTODAY,LIST,NO,MSG=SSXFR004)\n    VER (&SSYEST,LIST,NO,MSG=SSXFR001)\n    VER (&SSTOMR,LIST,NO,MSG=SSXFR000)\n\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SSXFR00": {"ttr": 1802, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 14, "newlines": 14, "modlines": 0, "user": "FILE024"}, "text": "SSXFR000                                  .ALARM=YES\n'Silly, I can\"t fortell the future!  Do I look like a crystal ball?'\n\nSSXFR001                                  .ALARM=YES\n'You can\"t have (2) \"YES\" values, it doesn't make sense...'\n\nSSXFR002                                  .ALARM=YES\n'You can\"t have (2) \"YES\" values, it doesn't make sense...'\n\nSSXFR003                                  .ALARM=YES\n'There are only (1) ===> (31) days in most months...'\n\nSSXFR004                                  .ALARM=YES\n'Please choose either \"TODAY\" by itself or give a numerical date'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOENTER": {"ttr": 1804, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x87\\x00\\x87\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 135, "newlines": 135, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n&NAYME   TSOENTER &FAKE,&BASE=12,&REGS=YES,&PL=,                       +\n               &WORK=0,&DSECT=NO,&SP=0,&CPR=NO              *HMD 04/85*\n.*\n         GBLC  &R\n         LCLA  &A\n         LCLC  &NAME                    TO HOLD CSECT NAME    @HMD78174\n         LCLB  &OPTS(8),&BIT\n         LCLC  &BASEREG\n         LCLC  &SECT                    CURRENT CSECT NAME    @HMD78174\n         LCLC  &YEAR                                          @HMD86107\n         LCLC  &LAB1,&LAB2,&LAB3,&LAB4  LABEL VARIABLES       @HMD86107\n.*\n&YEAR    SETC  '19'.'&SYSDATE'(7,8)                           @HMD76107\n&SECT    SETC  '&SYSECT'                SET CONTROL SECT NAME @HMD78174\n&NAME    SETC  '&NAYME'                 HOLD CSECT NAME       @HMD78174\nTSODSECT DSECT ,                        DEFINE NAME OF DSECT\nTSOSAVE  DS    18F .                    FIRST SAVE AREA\n         CPPL  DSECT=NO                 PARAMETER LIST\n&A       SETA  1\n.A1      AIF   (&A GT N'&PL).L1\n&OPTS(1) SETB  ((&OPTS(1))OR('&PL(&A)' EQ 'MESSAGE'))\n&OPTS(2) SETB  ((&OPTS(2))OR('&PL(&A)' EQ 'PARSE'))\n&OPTS(3) SETB  ((&OPTS(3))OR('&PL(&A)' EQ 'IO'))\n&OPTS(4) SETB  ((&OPTS(4))OR('&PL(&A)' EQ 'CSCAN'))\n&OPTS(5) SETB  ((&OPTS(5))OR('&PL(&A)' EQ 'DAIR'))\n&A       SETA  &A+1\n         AGO   .A1\n.L1      ANOP\nTSOECB   DS    F .                      DEFINE COMMAND ECB\n.LL1     AIF   (NOT &OPTS(1)).L2\n         MNOTE 0,'MESSAGE PARM LIST UNDEFINED'\n.L2      AIF   (NOT &OPTS(2)).L3\n         PPL   DSECT=NO                 PARSE PARM LIST\n.L3      AIF   (NOT &OPTS(3)).L4\n         IOPL  DSECT=NO                 I/O PARAMETER LIST\n.L4      AIF   (NOT &OPTS(4)).L5\n         CSPL  DSECT=NO                 CMD SCAN PARM LIST\n.L5      AIF   (NOT &OPTS(5)).L6\n         DAPL  DSECT=NO                 DAIR PARM LIST\n.L6      ANOP\nTSOWORK  DS    0D .                     ALIGN TO DOUBLE-WORD\nTSOUSER  EQU   * .                      GIVE ALTERNATE NAME\n         AIF   ('&REGS' NE 'YES').NOREGS\n         EJECT\n         REGS\n&R       SETC  'R'\n.NOREGS  AIF   ('&DSECT' EQ 'NO').GEN\n         MEXIT\n.GEN     EJECT                                                @HMD78174\n         AIF   ('&NAME' EQ '').NONAME                         @HMD78174\n&NAME    CSECT                                                @HMD78174\n         AGO   .GEN1                                          @HMD78174\n.NONAME  AIF   ('&SECT' NE '').GEN0                           @HMD78174\n         MNOTE 16,'CSECT NAME MISSING, GENERATION TERMINATED'\n         MEXIT                                                @HMD86107\n.GEN0    ANOP                                                 @HMD78174\n&SECT    CSECT                                                @HMD78174\n&NAME    SETC  '&SECT'            SET NAME TO CSECT NAME      @HMD78174\n.GEN1    ANOP                                                 @HMD78174\n&LAB1    SETC  'IHB'.'&SYSNDX'    SET LABEL NAME            *HMD 04/86*\n&LAB2    SETC  'IHC'.'&SYSNDX'    SET LABEL NAME            *HMD 04/86*\n&LAB3    SETC  'IHD'.'&SYSNDX'    SET LABEL NAME            *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         B     &LAB1-&NAME.(,15)        BRANCH AROUND IDS     @HMD78174\n         DC    AL1(&LAB1-&LAB2)         LENGTH OF ID AREA   *HMD 04/86*\n&LAB2    DC    C'&NAME  &SYSDATE'       PGM ID AND DATE     *HMD 04/85*\n         AIF   ('&CPR' EQ 'NO').NOCPR   BYPASS COPYRIGHT    *HMD 04/85*\n         DC    C' COPYRIGHT (C) &YEAR HOWARD M. DEAN'       *HMD 04/85*\n.NOCPR   ANOP                                               *HMD 04/85*\n         SPACE 1                                            *HMD 04/86*\n&LAB1    DS    0H                       POINT TO BRANCH TO    @HMD78174\n         STM   14,12,12(13)             SAVE REGISTERS      *HMD 04/86*\n         AIF   (T'&BASE NE 'N').LUSE1\n&BASEREG SETC  '&R&BASE'\n         AGO   .LUSE2\n.LUSE1   ANOP\n&BASEREG SETC  '&BASE'\n.LUSE2   ANOP\n         LUSE  &NAME,&BASEREG           PERMANANT BASE        @HMD78174\n         CNOP  0,4                      ALIGNMENT             @HMD78174\n         L     &BASEREG,&LAB3-&NAME.(,15)\n*                                       ESTABLISH BASE REG  *HMD 04/86*\n         B     &LAB3+L'&LAB3            BRANCH AROUND ADDR  *HMD 04/86*\n         SPACE 1\n&LAB3    DC    A(&NAME)                 CSECT ADDRESS       *HMD 04/86*\n         SPACE 1\n         LR    &R.2,1 .                 SAVE CPPL POINTER\n         CNOP  0,4 .                    PROPER ALIGNMENT\n         BAL   &R.1,*+8 .               BRANCH AROUND SP+LV\nTSOLEN   DC    0XL4'00' .               DEFINE ACCESS NAME\n         DC    AL1(&SP) .               SUBPOOL VALUE\n         DC    AL3((((TSOUSER-TSODSECT)+(&WORK)+7)/8)*8) .  AREA LENGTH\n         L     0,TSOLEN .               LOAD SP AND LV\n         SVC   10 .                     ISSUE REGMAIN SVC\n         ST    13,4(,1) .               CHAIN\n         ST    1,8(,13) .               SAVE\n         LR    &R.13,1 .                AREAS\n         LUSE  TSODSECT,&R.13 .         ESTABLISH ADDRESSABILITY\n         MVC   CPPL(CPPLLEN),0(&R.2) .  COPY PARM LIST\n         AIF   (NOT &OPTS(2)).NPARSE\n         MVC   PPLUPT(4),CPPLUPT .      USER PROFILE TAB\n         MVC   PPLECT(4),CPPLECT\n         MVC   PPLCBUF(4),CPPLCBUF      INIT CMD BUFFER       @HMD78174\n         LA    &R.0,PPLRANS .              LOAD ANSWER PLACE\n         ST    &R.0,PPLANS\n         LA    &R.0,TSOECB\n         ST    &R.0,PPLECB\n&BIT     SETB  1\n.NPARSE  AIF   (NOT &OPTS(3)).NIO\n         MVC   IOPLECT(4),CPPLECT\n         MVC   IOPLUPT(4),CPPLUPT\n         AIF   (&BIT).Q1\n         LA    &R.0,TSOECB\n.Q1      ST    &R.0,IOPLECB\n&BIT     SETB  1\n.NIO     AIF   (NOT &OPTS(5)).NDAIR\n         MVC   DAPLUPT(4),CPPLUPT\n         MVC   DAPLECT(4),CPPLECT\n         MVC   DAPLPSCB(4),CPPLPSCB\n         AIF   (&BIT).Q2\n&BIT     SETB  1\n         LA    &R.0,TSOECB\n.Q2      ST    &R.0,DAPLECB\n.NDAIR   AIF   (NOT &OPTS(4)).NCSCAN\n         MVC   CSPLUPT(4),CPPLUPT\n         MVC   CSPLECT(4),CPPLECT\n         MVC   CSPLCBUF(4),CPPLCBUF     INIT CMD BUFFER       @HMD78174\n         AIF   (&BIT).Q3\n&BIT     SETB  1\n         LA    &R.0,TSOECB\n.Q3      ST    &R.0,CSPLECB\n.NCSCAN  INUSE\n         EJECT\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOLEAVE": {"ttr": 1807, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00(\\x00(\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 40, "newlines": 40, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n&NAME    TSOLEAVE &SPLV=TSOLEN,&ISN=,&RETCODE=0\n         GBLC  &R\n         LCLB  &RTYPE\n.*       TSOLEAVE MACRO                  BRUCE M. DANE\n.*       LAST UPDATED:                  06 NOV 1973\n.*       MACRO GENERATES RE-ENTRANT CODE\n.*\n&NAME    LR    1,&R.13 .                LOAD RETURN ADDRESS\n         L     &R.13,4(0,&R.13) .       LOAD REGISTER POINTER\n         AIF   ('&RETCODE' EQ '').FREE1\n         AIF   ('&RETCODE'(1,1) NE '(').FREE1\n         ST    &RETCODE(1),16(,&R.13) . SAVE RETURN CODE IN R15 PLACE\n&RTYPE   SETB  1\n.FREE1   ANOP\n*        RETURN DYNAMIC SAVE AREA TO SYSTEM\n         L     0,&SPLV .                LOAD SP/LEN TO FREE\n         FREEMAIN R,LV=(0),A=(1) .      ISSUE FREEMAIN\n.RETTEST AIF   (&RTYPE).R0\n         AIF   ('&RETCODE' EQ '').RETEQ0 * MESSAGE, ASSUME ZERO\n         AIF   (T'&RETCODE NE 'N').REGLD1 * RETURN NUMBER?\n         AIF   (&RETCODE EQ 0).R0       * RETCODE=0\n         AGO   .REGLA                   * LOAD ADDRESS ON RETCODE\n.RETEQ0  MNOTE *,'*** WARNING *** RETCODE ASSUMED ZERO (0)'\n         AGO   .R0\n.REGLD1  L     &R.15,&RETCODE .         LOAD SAVED RETURN CODE\n         AGO   .BR14\n.REGLA   LA    &R.15,&RETCODE .         LOAD REQUESTED RETURN CODE\n         AGO   .BR14\n.R0      LM    14,12,12(13) .           RELOAD CALLERS' REGS\n         AIF   (&RTYPE).R00\n         XR    15,15 .                  CLEAR RETURN CODE\n.R00     BR    14 .                     RETURN TO CALLER\n         AGO   .ISNCHEK\n.BR14    LM    0,12,20(13) .            LOAD SAVED REGS\n         L     14,12(0,13) .            AND RETURN\n         BR    14 .                     RETURN TO CALLER\n.ISNCHEK AIF   ('&ISN' EQ '').MEND\n         &ISN\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UNTIL": {"ttr": 1809, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00U\\x00U\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 85, "newlines": 85, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         UNTIL &OPND1,&RELA,&OPND2,&OPCD\n.*\n.**********************************************************************\n.*       DEFINE VARIABLES                                             *\n.**********************************************************************\n.*\n         GBLA  &GDOCNT,&GDOLVL,&GIFLVL,&GDOSTK(16),&GDOIFST(16)\n         GBLB  &UNORSW#                       'UNTILOR' INDICATOR\n         LCLC  &LOC\n         LCLC  &LBLYSS\n         LCLA  &I,&J,&K                          'AND' LOOP COUNTERS\n.*\n         SEQCK UNTIL\n.*\n.**********************************************************************\n.*       CHECK INPUT PARAMETERS                                       *\n.**********************************************************************\n.*\n         SPACE\n         AIF   (&GDOLVL EQ 0).ER1\n         AIF   (&GDOIFST(&GDOLVL) EQ &GIFLVL).L10\n         MNOTE 8,'ENDIF STATEMENT(S) MISSING WITHIN DO LOOP'\n.L10     ANOP\n.*\n.**********************************************************************\n.*       GENERATE CODE TO TEST CONDITION AND BRANCH                   *\n.**********************************************************************\n.*\n&GDOSTK(&GDOLVL) SETA &GDOSTK(&GDOLVL)-1\n&LOC     SETC  'ZLDO'.'&GDOSTK(&GDOLVL)'\n.*\n&J       SETA  0                                 FIRST DELIMITER NUMBER\n&I       SETA  1                                 FIRST PARM NUMBER\n.*\n.LOOPAND ANOP                                    LOOP THRU PARMS\n&J       SETA  &J+1                        TRY NEXT PARM AS DELIMITER\n         AIF   (&J GT N'&SYSLIST).ENDAND         IS IT END OF PARMS ?\n         AIF   ('&SYSLIST(&J)' NE '*AND*').LOOPAND  IS IT DELIMITER ?\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN 2 DELIMITERS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND1       MUST BE 4 OR 1 PARM\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND1  ANOP                                    GEN. TEST AND BRANCH\n         AIF   (&K EQ 1).GENOP1                  DO WE HAVE 1 PARM ?\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&LOC\n         AGO   .GENOK\n.GENOP1  ANOP                                    GEN CODE WITH 1 PARM\n         GENC  &SYSLIST(&I),,,,&LOC\n.GENOK   ANOP                                    GEN IS DONE\n.*\n&I       SETA  &J+1                  SET POINTER TO NEXT SET OF PARMS\n         AGO   .LOOPAND                          REPEAT LOOP\n.*\n.ENDAND  ANOP                                    END OF LOOP\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN LAST DELIMTRS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND2       MUST BE 4 OR 1\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND2  ANOP                                  GEN LAST TEST & BRANCH\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&LOC\n.*\n&GDOSTK(&GDOLVL) SETA &GDOSTK(&GDOLVL)+2\n.*\n.**********************************************************************\n.*       ANALIZE 'OR' CONDITION                                       *\n.**********************************************************************\n.*\n         AIF   (&UNORSW# EQ 0).CODE020        IF NO UNTILOR,SKIP NEXT\n&LBLYSS  SETC  'ZLDO&GDOSTK(&GDOLVL)'          TO GET OPCODE IN COL 10\n&LBLYSS  DS    0H                                LOOP END\n.*\n.CODE020 ANOP\n&UNORSW# SETB  0\n&GDOLVL  SETA  &GDOLVL-1\n         SPACE\n         MEXIT\n.ER1     MNOTE 8,'UNTIL NOT PRECEDED BY DO'\n&UNORSW# SETB  0\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UNTILOR": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00N\\x00N\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 78, "newlines": 78, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n         UNTILOR &OPND1,&RELA,&OPND2,&OPCD\n.*\n.**********************************************************************\n.*       DEFINE VARIABLES                                             *\n.**********************************************************************\n.*\n         GBLA  &GDOCNT,&GDOLVL,&GDOSTK(16)\n         GBLB  &UNORSW#                       'UNTILOR' INDICATOR\n         GBLC  &GTYPE\n         LCLA  &I,&J,&K                          'AND' LOOP COUNTERS\n         LCLB  &ANDSW\n         LCLC  &ORLOC\n         LCLA  &WKA1\n         LCLC  &LOC\n.*\n         SEQCK UNTILOR\n.*\n         SPACE\n         AIF   (&GDOLVL EQ 0).ER1\n&WKA1    SETA  &GDOSTK(&GDOLVL)+1\n&LOC     SETC  'ZLDO'.'&WKA1'\n.*\n.**********************************************************************\n.*       GENERATE CODE TO TEST CONDITION AND BRANCH                   *\n.**********************************************************************\n.*\n&ORLOC   SETC  'ZLAD&SYSNDX'\n&ANDSW   SETB  0                                 ASSUME - NO *AND*\n&J       SETA  0                                 FIRST DELIMITER NUMBER\n&I       SETA  1                                 FIRST PARM NUMBER\n.*\n.LOOPAND ANOP                                    LOOP THRU PARMS\n&J       SETA  &J+1                        TRY NEXT PARM AS DELIMITER\n         AIF   (&J GT N'&SYSLIST).ENDAND         IS IT END OF PARMS ?\n         AIF   ('&SYSLIST(&J)' NE '*AND*').LOOPAND  IS IT DELIMITER ?\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN 2 DELIMITERS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND1       MUST BE 4 OR 1 PARM\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND1  ANOP                                    GEN. TEST AND BRANCH\n&GTYPE   SETC  'UNTIL'                           CHANGE FLAG FOR GENC\n&ANDSW   SETB  1                                 INDICATE - *AND* FOUND\n         AIF   (&K EQ 1).GENOP1                  DO WE HAVE 1 PARM ?\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&ORLOC\n         AGO   .GENOK\n.GENOP1  ANOP                                    GEN CODE WITH 1 PARM\n         GENC  &SYSLIST(&I),,,,&ORLOC\n.GENOK   ANOP                                    GEN IS DONE\n&GTYPE   SETC  'UNTILOR'                         RESTORE FLAG FOR GENC\n.*\n&I       SETA  &J+1                  SET POINTER TO NEXT SET OF PARMS\n         AGO   .LOOPAND                          REPEAT LOOP\n.*\n.ENDAND  ANOP                                    END OF LOOP\n&K       SETA  &J-&I       * SET NUMBER OF PARMS BETWEEN LAST DELIMTRS\n         AIF   (&K EQ 4 OR &K EQ 1).OKAND2       MUST BE 4 OR 1\n         MNOTE 8,'REQUIRED OPERAND INVALID OR MISSING'\n         MEXIT\n.*\n.OKAND2  ANOP                                  GEN LAST TEST & BRANCH\n         GENC  &SYSLIST(&I),&SYSLIST(&I+1),&SYSLIST(&I+2),             X\n               &SYSLIST(&I+3),&LOC\n.*\n         AIF   (&ANDSW EQ 0).CODE040             IS THERE *AND* PARM ?\n&ORLOC   DS    0H                                CONDITIONS ARE FALSE\n.CODE040 ANOP\n.*\n&UNORSW# SETB  1\n.*\n         SPACE\n.*\n         MEXIT\n.ER1     MNOTE 8,'UNTILOR NOT PRECEDED BY DO'\n         SPACE\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XABSM": {"ttr": 2052, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x13\\x00\\x13\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 19, "newlines": 19, "modlines": 0, "user": "FILE024"}, "text": "         MACRO\n&LAB     XABSM &MODE=24\n         AIF   ('&LAB' EQ '').NOLAB CHECK FOR LABEL\n&LAB     DS    0H                  MVS/XA SET MODE MACRO\n.NOLAB   ANOP\n         AIF   ('&MODE' EQ '31').XAON\n         AIF   ('&MODE' EQ '24').XAOFF\n         MNOTE 8,'MODE &MODE INVALID'\n.XAON    ANOP                      GO TO 31 BIT MODE\n         CNOP  2,4                 FORCE FULL WORD ALIGNMENT\n         LA    R1,*+14 .              POINT TO AMODE = 31 CODE\n         O     R1,*+6 .               TURN ON AMODE = 31 BIT\n         BSM   0,R1 .                 BRANCH TO AMODE = 31 CODE\n         DC    X'80000000'         AMODE = 31 BIT\n         AGO   .MACEND\n.XAOFF   LA    R1,*+6 .               POINT TO AMODE = 24 CODE\n         BSM   0,R1 .                 BRANCH TO AMODE = 24 CODE\n.MACEND  ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XFERCPU": {"ttr": 2054, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00K\\x00K\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 75, "newlines": 75, "modlines": 0, "user": "FILE024"}, "text": "XFER     TITLE 'XFER CPUID TO SYSTSOUT'\n*---------------------------------------------------------------------*\n*  PROGRAM:  XFERCPU                                                  *\n*                                                                     *\n*  AUTHOR:   GENE L. LEW, MCI TELECOMMUNICATIONS CORPORATION          *\n*                                                                     *\n*  DATE:     JANUARY 6, 1987                                          *\n*                                                                     *\n*  FUNCTION: RETRIEVES THE SMFID/CPUID ON WHICH THIS PROGRAM          *\n*            EXECUTES, THEN WRITES IT OUT TO DD(SYSTSOUT).            *\n*            THIS IS A PROGRAM THAT IS MEANT TO RUN IN BATCH          *\n*            UNDER THE TMP ONLY.                                      *\n*                                                                     *\n*  NOTES:    THIS PROGRAM WAS WRITTEN TO SUPPLEMENT THE 'XFERDUMP'    *\n*            UTILITY SYSTEM BY PROVIDING THE SYSTEM SMFID FROM        *\n*            WHICH 'XFERDUMP' RUNS.                                   *\n*---------------------------------------------------------------------*\n         EJECT\nXFERCPU  RMODE 24                     SET RESIDENCY MODE\nXFERCPU  AMODE 24                     SET ADDRESSING MODE\nXFERCPU  TSOENTER REGS=YES,PL=(CPPL,IO,CSCAN),WORK=WORKSIZE,SP=1\n         CALL  SMFID,(CPUID)          GET THE 'SMFID' OF THE SYSTEM\n         LTR   15,15                  DID WE RETURN 'OK'?\n         BNZ   END                    NO, SOMETHING WRONG, GET OUT\n         MVC   SYSID,CPUID\n         XC    IOPLPTG(16),IOPLPTG\n         LA    R1,TSOECB              GET ECB ADDRESS\n         ST    R1,IOPLECB             SAVE IN IOPL\n         XC    TSOECB,TSOECB          CLEAR ECB\n         PUTLINE PARM=PTPB,OUTPUT=(BUFFER,TERM,SINGLE,INFOR),          X\n               MF=(E,IOPL)\n**\n**  END OF PROGRAM\n**\nEND      TSOLEAVE ISN=LTORG\n         SPACE 2\n***\n***   CONSTANTS\n***\n*\n* SPACES TO TRANSLATE FROM LOWER CASE TO UPPER CASE\n*\nCPUID    DC    CL8' '\nBUFFER   DC    A(1),A(MSGBUFF),A(0)\nMSGBUFF  DC    H'36',H'0'\n         DC    C'XFER/DUMP CPUID ==> '\nSYSID    DC    CL6' '\n         DC    C'                   '\n*\n         EJECT\n***\n***  DYNAMIC STORAGE AREA\n***\nTSODSECT DSECT          RESUME USER DSECT\n         ORG  TSOUSER\nIOPLPTG  DS   4F\nCSOUT    DS   3F\nPTPB     PUTLINE MF=L\nCMDLEN   DS   F\nCOMMAND  DS   CL127\nALIGN    DS   F\nTJIDLIST DS   0CL12\n         DS   3A\nTJIDTEST DS   F\nINPUT    DS   CL127\nWORKSIZE EQU  *-TSOUSER\n         EJECT\n         IKJPGPB\n         EJECT\n         IKJCSOA\n         EJECT\n         IKJPSCB\n         EJECT\n         CVT   LIST=YES,DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XFERDOC": {"ttr": 2057, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00&\\x00&\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 38, "newlines": 38, "modlines": 0, "user": "FILE024"}, "text": "*-----------------------  X F E R D U M P  ----------------------------*\n*       S V C    D U M P    T R A N S F E R     P R O C E D U R E      *\n*          M V S /  E X T E N D E D    A R C H I T E C T U R E         *\n*----------------------------------------------------------------------*\n\nThe XFERDUMP procedure will transfer the MVS/XA SVC dumps from\ndisk to tape and create an index entry in the dump index\ndataset, \"OP.P.XFERDUMP.INDEX\".\n\nThe name of the dataset on tape will be \"OP.P.XFERDUMP.TAPExx\"\nwhere \"xx\" is either 00, 01, 02, 03, etc., corresponding to the\nassociated \"SYS1.DUMPxx\" dataset name.\n\nTo find the volume containing the current tape, use the \"%XIX\" clist to\nbrowse the dump index dataset.  The file number of each dump on tape is\none higher than the number of the dump dataset. For example,\n\"SYS1.DUMP00\" on tape 009999 would be named \"OP.P.XFERDUMP.TAPE00\" and\nreside on file 1.\n\nIt is important that the cataloged procedure \"XFERDUMP\" be used to\ntransfer dump datasets to tape because the internally called CLISTS\nwill update the dump index dataset (\"OP.P.XFERDUMP.INDEX\"). The listing\nfrom the run of this procedure will, in its job message log, also have\nthe dump titles and volume serial number of the tape in an easily\nreadable format. The MASTER TRACE table will be printed along with\na SUMMARY dump.\n\nTo transfer full dump datasets to tape (I would wait for a least\nTHREE datasets to fill), enter the following SOF command at the\nsystem console:\n\n    > /XFERDUMP\n\nIf, for some reason, SOF is not available, the dumps can be transfered\nby entering:\n\n    > S JOBRDR,N=XFERDUMP\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XFERINST": {"ttr": 2059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x16\\x00\\x16\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 22, "newlines": 22, "modlines": 0, "user": "FILE024"}, "text": "**** INSTALLATION OF XFER DUMP INDEX UTILITY ****\n\n1)  ASSEMBLE/LINK 'XFERVOL' INTO A LOADLIB\n2)  ASSEMBLE/LINK 'XFERUTIL' WITH THE 'XFERVOL' LOADLIB AVAILABLE\n      AS A 'SYSLIB' ON THE LINK STEP\n3)  PLACE 'XFERUTIL' IN A 'LINKLIST' DATASET\n4)  ASSEMBLE/LINK 'XFERWTO' AND PLACE IN LINKLIST DATASET\n5)  ASSEMBLE/LINK 'XFERCPU' AND PLACE IN LINKLIST DATASET\n6)  PLACE 'XFER1' AND 'XFER2' CLISTS IN YOUR SYSTEM CLIST LIBRARY\n7)  PLACE 'XIX' 'JULDATE', 'BXFER',' AND 'EXFER', CLISTS IN YOUR\n      SYSTEM CLIST LIBRARY\n8)  ALLOCATE A PARTITIONED DATASET WITH THE FOLLOWING:\n      RECFM(FB) LRECL(80) BLKSIZE(XXXXXX) DSORG(PO) DIR(XX)\n9)  EDIT 'MAKEDAY' CLIST FOR CORRECT DATASET NAME AS ALLOCATED ABOVE\n10) RUN 'MAKEDAY' TO INITIALIZE THE PDS FOR 'XFERDUMP'\n11) TAILOR THE ' XFERJOB' JOBSTREAM FOR YOUR INSTALLTAION.\n      ADD THE APPROPRIATE QUANTITY OF STEPS FOR THE CORRESPONDING\n      QUANTITY OF DUMP DATASETS ON THE SYSTEM(S).\n12) PLACE THE EDITED 'XFERJOB' IN A JOBRDR DEFINED LIBRARY\n13) SET AMDPRDMP OPTIONS IN PARMLIB FOR THE 'XFERJOB'\n14) MAKE SURE THE STEP THAT INVOKES THE TSO 'TMP' HAS THE CORRECT\n    CLIST LIBRARIES ALLOCATED\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XFERJOB": {"ttr": 2061, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\xb0\\x00\\xb0\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 176, "newlines": 176, "modlines": 0, "user": "FILE024"}, "text": "//XFRDMP JOB (ACCT DATA)\n//*********************************************************************\n//***                       M V S / X A                              **\n//***                     X F E R D U M P                            **\n//***                                                                **\n//***  THIS JOB WILL TRANSFER ALL THE 'SYS1.DUMPXX' DATASETS         **\n//***  ON A PARTICULAR SYSTEM TO TAPE.  THE DUMP TITLES AND TAPE     **\n//***  VOLUME WILL BE RECORED IN AN INDEX DATA SET FOR LATER         **\n//***  PERUSAL UNDER ISPF.  THE TITLES ARE STORED IN DATASET         **\n//***  'OP.P.XFERDUMP.INDEX' AND THE ENTRIES CAN BE BROWSED USING    **\n//***  THE 'XIX' CLIST UNDER TSO OR SELECTING THE 'XFERDUMP'         **\n//***  OPTION FROM ISPF.                                             **\n//***                                                                **\n//***  THE FOLLOWING SERVICES ARE PROVIDED:                          **\n//***                                                                **\n//***  (1) UPDATE DUMP TRANFER INDEX ('OP.P.XFERDUMP.INDEX')         **\n//***        WITH DUMP TITLES/TAPE VOLSER                            **\n//***  (2) TRANSFER 'SYS1.DUMPXX' DATASETS TO TAPE                   **\n//***  (3) WRITE TAPE VOLUME SERIAL TO OPERATOR/PROGRAMMER           **\n//***  (4) WRITE DUMP TITLES TO OPERATOR/PROGRAMMER                  **\n//***                                                                **\n//*********************************************************************\n//*-------------------------------------------------------------------*\n//*       'XFERDMP0-XFERDMP4' PRINTS \"TITLE\" OF DUMP DATASETS         *\n//*-------------------------------------------------------------------*\n//XFERDMP0 EXEC PGM=IKJEFT01,PARM=AMDPRDMP,REGION=512M\n//TAPE      DD   DSNAME=SYS1.DUMP00,DISP=SHR\n//SYSUT1    DD   UNIT=SYSDA,SPACE=(4104,(5000,500),RLSE)\n//SYSTSPRT  DD   SYSOUT=*\n//SYSTSIN   DD   DUMMY\n//SYSIN     DD   DSN=SYS1.PRODUCTS.CNTL(XFR1DUMP),DISP=SHR\n//SYSPRINT  DD   SYSOUT=*\n//PRINTER   DD   SYSOUT=*\n//SERIAL    DD   DSN=OP.P.XFERDUMP.INDEX,DISP=OLD\n//*\n//XFERDMP1 EXEC PGM=IKJEFT01,PARM=AMDPRDMP,REGION=512M\n//TAPE      DD   DSNAME=SYS1.DUMP01,DISP=SHR\n//SYSUT1    DD   UNIT=SYSDA,SPACE=(4104,(5000,500),RLSE)\n//SYSTSPRT  DD   SYSOUT=*\n//SYSTSIN   DD   DUMMY\n//SYSIN     DD   DSN=SYS1.PRODUCTS.CNTL(XFR1DUMP),DISP=SHR\n//SYSPRINT  DD   SYSOUT=*\n//PRINTER   DD   SYSOUT=*\n//SERIAL    DD   DSN=OP.P.XFERDUMP.INDEX,DISP=OLD\n//*\n//XFERDMP2 EXEC PGM=IKJEFT01,PARM=AMDPRDMP,REGION=512M\n//TAPE      DD   DSNAME=SYS1.DUMP02,DISP=SHR\n//SYSUT1    DD   UNIT=SYSDA,SPACE=(4104,(5000,500),RLSE)\n//SYSTSPRT  DD   SYSOUT=*\n//SYSTSIN   DD   DUMMY\n//SYSIN     DD   DSN=SYS1.PRODUCTS.CNTL(XFR1DUMP),DISP=SHR\n//SYSPRINT  DD   SYSOUT=*\n//PRINTER   DD   SYSOUT=*\n//SERIAL    DD   DSN=OP.P.XFERDUMP.INDEX,DISP=OLD\n//*\n//XFERDMP3 EXEC PGM=IKJEFT01,PARM=AMDPRDMP,REGION=512M\n//TAPE      DD   DSNAME=SYS1.DUMP03,DISP=SHR\n//SYSUT1    DD   UNIT=SYSDA,SPACE=(4104,(5000,500),RLSE)\n//SYSTSPRT  DD   SYSOUT=*\n//SYSTSIN   DD   DUMMY\n//SYSIN     DD   DSN=SYS1.PRODUCTS.CNTL(XFR1DUMP),DISP=SHR\n//SYSPRINT  DD   SYSOUT=*\n//PRINTER   DD   SYSOUT=*\n//SERIAL    DD   DSN=OP.P.XFERDUMP.INDEX,DISP=OLD\n//*\n//XFERDMP4 EXEC PGM=IKJEFT01,PARM=AMDPRDMP,REGION=512M\n//TAPE      DD   DSNAME=SYS1.DUMP04,DISP=SHR\n//SYSUT1    DD   UNIT=SYSDA,SPACE=(4104,(5000,500),RLSE)\n//SYSTSPRT  DD   SYSOUT=*\n//SYSTSIN   DD   DUMMY\n//SYSIN     DD   DSN=SYS1.PRODUCTS.CNTL(XFR1DUMP),DISP=SHR\n//SYSPRINT  DD   SYSOUT=*\n//PRINTER   DD   SYSOUT=*\n//SERIAL    DD   DSN=OP.P.XFERDUMP.INDEX,DISP=OLD\n//*\n//*-------------------------------------------------------------------*\n//*       'INDEX1-INDEX2' UPDATE THE 'INDEX' & RUN 'XFERDUMP'         *\n//*-------------------------------------------------------------------*\n//INDEX1    EXEC PGM=IKJEFT01,PARM='%XFER1',REGION=512M\n//SYSPROC   DD   DSNAME=SYS1.PRODUCTS.CLIST,DISP=SHR\n//SYSTSPRT  DD   DSNAME=OP.T.XFERDUMP.TEMP,DISP=(,CATLG,DELETE),\n//   UNIT=TEMP,\n//   SPACE=(TRK,(15,5),RLSE),\n//   DCB=(BLKSIZE=3120,LRECL=80,RECFM=FB)\n//SYSTSIN   DD   DUMMY\n//SYSUT2    DD   DSNAME=OP.P.XFERDUMP.TAPE00,\n//   DISP=(,PASS,DELETE),\n//   VOL=(,RETAIN),\n//   DCB=(BLKSIZE=4104,LRECL=4104,RECFM=F),\n//   UNIT=TAPE,LABEL=(1,SL,RETPD=14)\n//SERIAL    DD   DSN=OP.P.XFERDUMP.INDEX,DISP=OLD\n//*\n//INDEX2   EXEC PGM=IKJEFT01,PARM='%XFER2',REGION=1024K\n//SYSPROC  DD   DSNAME=SYS1.PRODUCTS.CLIST,DISP=SHR\n//SYSTSPRT DD   SYSOUT=*\n//SYSTSIN  DD   DUMMY\n//TEMP     DD   DSN=OP.T.XFERDUMP.TEMP,DISP=(OLD,DELETE)\n//INDEX    DD   DSN=OP.P.XFERDUMP.INDEX,DISP=OLD\n//*\n//*-------------------------------------------------------------------*\n//*       'TRANDMP0-TRANDMP4' COPIES THE DUMP(S) TO TAPE              *\n//*-------------------------------------------------------------------*\n//*\n//TRANDMP0  EXEC PGM=IKJEFT01,PARM=AMDPRDMP,REGION=512M\n//TAPE      DD   DSNAME=SYS1.DUMP00,DISP=SHR\n//SYSUT2    DD   DSNAME=OP.P.XFERDUMP.TAPE00,DISP=(OLD,PASS),\n//    UNIT=TAPE,LABEL=(1,SL,RETPD=14),\n//    VOL=(,RETAIN,REF=*.INDEX1.SYSUT2)\n//SYSTSPRT  DD   SYSOUT=*\n//SYSTSIN   DD   DUMMY\n//SYSPRINT  DD   SYSOUT=*\n//PRINTER   DD   SYSOUT=*\n//SYSUDUMP  DD   SYSOUT=*\n//SYSIN     DD   DSNAME=SYS1.PRODUCTS.CNTL(XFR2DUMP),DISP=SHR\n//*\n//TRANDMP1  EXEC PGM=IKJEFT01,PARM=AMDPRDMP,REGION=512M\n//TAPE      DD   DSNAME=SYS1.DUMP01,DISP=SHR\n//SYSUT2    DD   DSNAME=OP.P.XFERDUMP.TAPE01,DISP=(,PASS),\n//    UNIT=TAPE,LABEL=(2,SL,RETPD=14),\n//    VOL=(,RETAIN,REF=*.TRANDMP0.SYSUT2)\n//SYSTSPRT  DD   SYSOUT=*\n//SYSTSIN   DD   DUMMY\n//SYSPRINT  DD   SYSOUT=*\n//PRINTER   DD   SYSOUT=*\n//SYSUDUMP  DD   SYSOUT=*\n//SYSIN     DD   DSNAME=SYS1.PRODUCTS.CNTL(XFR2DUMP),DISP=SHR\n//*\n//TRANDMP2  EXEC PGM=IKJEFT01,PARM=AMDPRDMP,REGION=512M\n//TAPE      DD   DSNAME=SYS1.DUMP02,DISP=SHR\n//SYSUT2    DD   DSNAME=OP.P.XFERDUMP.TAPE02,DISP=(,PASS),\n//    UNIT=TAPE,LABEL=(3,SL,RETPD=14),\n//    VOL=(,RETAIN,REF=*.TRANDMP0.SYSUT2)\n//SYSTSIN   DD   DUMMY\n//SYSTSPRT  DD   SYSOUT=*\n//SYSPRINT  DD   SYSOUT=*\n//PRINTER   DD   SYSOUT=*\n//SYSUDUMP  DD   SYSOUT=*\n//SYSIN     DD   DSNAME=SYS1.PRODUCTS.CNTL(XFR2DUMP),DISP=SHR\n//*\n//TRANDMP3  EXEC PGM=IKJEFT01,PARM=AMDPRDMP,REGION=512M\n//TAPE      DD   DSNAME=SYS1.DUMP03,DISP=SHR\n//SYSUT2    DD   DSNAME=OP.P.XFERDUMP.TAPE03,DISP=(,PASS),\n//    UNIT=TAPE,LABEL=(4,SL,RETPD=14),\n//    VOL=(,RETAIN,REF=*.TRANDMP0.SYSUT2)\n//SYSTSIN   DD   DUMMY\n//SYSTSPRT  DD   SYSOUT=*\n//SYSPRINT  DD   SYSOUT=*\n//PRINTER   DD   SYSOUT=*\n//SYSUDUMP  DD   SYSOUT=*\n//SYSIN     DD   DSNAME=SYS1.PRODUCTS.CNTL(XFR2DUMP),DISP=SHR\n//*\n//TRANDMP4  EXEC PGM=IKJEFT01,PARM=AMDPRDMP,REGION=512M\n//TAPE      DD   DSNAME=SYS1.DUMP04,DISP=SHR\n//SYSUT2    DD   DSNAME=OP.P.XFERDUMP.TAPE04,DISP=(,PASS),\n//    UNIT=TAPE,LABEL=(5,SL,RETPD=14),\n//    VOL=(,RETAIN,REF=*.TRANDMP0.SYSUT2)\n//SYSTSIN   DD   DUMMY\n//SYSTSPRT  DD   SYSOUT=*\n//SYSPRINT  DD   SYSOUT=*\n//PRINTER   DD   SYSOUT=*\n//SYSUDUMP  DD   SYSOUT=*\n//SYSIN     DD   DSNAME=SYS1.PRODUCTS.CNTL(XFR2DUMP),DISP=SHR\n//*-------------------------------------------------------------------*\n//*    COMPRESS 'INDEX' DATASET TO FREE UP UNUSED SPACE               *\n//*-------------------------------------------------------------------*\n//COMPRESS EXEC PGM=IEBCOPY,REGION=1024K\n//SYSPRINT  DD SYSOUT=*\n//IN1       DD DSN=OP.P.XFERDUMP.INDEX,DISP=OLD\n//OUT1      DD DSN=OP.P.XFERDUMP.INDEX,DISP=OLD\n//SYSUT3    DD DSN=&&TEMP1,UNIT=SYSDA,DISP=(,DELETE,DELETE),\n//          SPACE=(CYL,(2,2))\n//SYSUT4    DD DSN=&&TEMP2,UNIT=SYSDA,DISP=(,DELETE,DELETE),\n//          SPACE=(CYL,(2,2))\n//SYSIN     DD *\n            COPY OUTDD=OUT1,INDD=((IN1,R))\n/*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XFERUTIL": {"ttr": 2065, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00I\\x00I\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 73, "newlines": 73, "modlines": 0, "user": "FILE024"}, "text": "XFER     TITLE 'XFER TAPE VOLUME SERIAL NUMBER TO SYSTSOUT'\n*---------------------------------------------------------------------*\n*  PROGRAM:  XFERUTIL                                                 *\n*                                                                     *\n*  AUTHOR:   HOWARD DEAN, AMERICAN PRESIDENTAIL LINES                 *\n*  MODIFIED: GENE LEW, MCI TELECOMMUNICATIONS CORP., JANUARY 1987     *\n*                                                                     *\n*  DATE:     JUNE 1985                                                *\n*                                                                     *\n*  FUNCTION: RETRIEVES THE VOLSER OF THE TAPE WHICH 'XFERDUMP'        *\n*            USED TO UNLOAD THE DUMP DATASETS AT A PARTICULAR         *\n*            EXECUTION.  THIS IS A PROGRAM THAT IS MEANT              *\n*            TO RUN IN BATCH UNDER THE TMP ONLY.                      *\n*---------------------------------------------------------------------*\n         EJECT\nXFERUTIL RMODE 24                     SET RESIDENCY MODE\nXFERUTIL AMODE 24                     SET ADDRESSING MODE\nXFERUTIL TSOENTER REGS=YES,PL=(CPPL,IO,CSCAN),WORK=WORKSIZE,SP=1\n         MVC   DDNAME,=C'SYSUT2  '    LOAD THE DDNAME FOR TAPE VOL\n         CALL  XFERVOL,(DDNAME),VL    RETRIEVE THE TAPE VOLSER\n         LTR   15,15                  CHECK RETURN CODE FROM SUBROUTINE\n         BNZ   END                    IF (\u00ac0), THEN GET OUT\n         MVC   VOLUME,DDNAME          MOVE THE TAPE VOLSER TO VAR NAME\n         XC    IOPLPTG(16),IOPLPTG\n         LA    R1,TSOECB              GET ECB ADDRESS\n         ST    R1,IOPLECB             SAVE IN IOPL\n         XC    TSOECB,TSOECB          CLEAR ECB\n         PUTLINE PARM=PTPB,OUTPUT=(BUFFER,TERM,SINGLE,INFOR),          X\n               MF=(E,IOPL)\n**\n**  END OF PROGRAM\n**\nEND      TSOLEAVE ISN=LTORG\n         SPACE 2\n***\n***   CONSTANTS\n***\n*\n* SPACES TO TRANSLATE FROM LOWER CASE TO UPPER CASE\n*\nDDNAME   DC    CL8' '\nBUFFER   DC    A(1),A(MSGBUFF),A(0)\nMSGBUFF  DC    H'36',H'0'\n         DC    C'XFER TAPE VOL/SER = '\nVOLUME   DC    CL6' '\n         DC    C'                   '\n*\n         EJECT\n***\n***  DYNAMIC STORAGE AREA\n***\nTSODSECT DSECT          RESUME USER DSECT\n         ORG  TSOUSER\nIOPLPTG  DS   4F\nCSOUT    DS   3F\nPTPB     PUTLINE MF=L\nCMDLEN   DS   F\nCOMMAND  DS   CL127\nALIGN    DS   F\nTJIDLIST DS   0CL12\n         DS   3A\nTJIDTEST DS   F\nINPUT    DS   CL127\nWORKSIZE EQU  *-TSOUSER\n         EJECT\n         IKJPGPB\n         EJECT\n         IKJCSOA\n         EJECT\n         IKJPSCB\n         EJECT\n         CVT   LIST=YES,DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XFERVOL": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x82\\x00\\x82\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 130, "newlines": 130, "modlines": 0, "user": "FILE024"}, "text": "XFER     TITLE 'XFERVOL - GETS XFER TAPE VOLUME NUMBER'\n***********************************************************************\n*                                                                     *\n*                        XFERVOL                                      *\n*                                                                     *\n*                XFER SDUMPS INDEX SUPPORT                            *\n*                                                                     *\n* ABSTRACT: GETS VOLSER OF XFER TAPE. TAPE DD-NAME PASSED TO PROGRAM  *\n*                                                                     *\n* INPUT: R1 -> A(PARM FIELD)                                          *\n*              PARM FIELD = XFER TAPE DD-NAME                         *\n*                                                                     *\n* OUTPUT:             : XFER TAPE VOL=SER=XXXXXX                      *\n*                                                                     *\n* RETURN CODES:R15=0 - SUCCESSFUL EXECUTION OF PROGRAMM               *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*  REGISTERS:   15 - ENTRY ADDRESS & RETURN CODE                      *\n*               14 - RETURN ADDRESS                                   *\n*               13 - SAVE AREA ADDRESS                                *\n*               12 - CSECT BASE                                       *\n*               11 - TIOT DSECT BASE                                  *\n*               10 - UCB DSECT BASE                                   *\n*                9 -                                                  *\n*                8 -                                                  *\n*                7 -                                                  *\n*                6 - WORK REG                                         *\n*                5 -                                                  *\n*                4 - WORK REG                                         *\n*                3 - WORK REG                                         *\n*                2 - WORK REG                                         *\n*                1 - LIST PARAM ADDRESS                               *\n*                0 -                                                  *\n***********************************************************************\n         EJECT\n***********************************************************************\n*               XFERVOL CODE                                          *\n***********************************************************************\n         SPACE 3\n*                            ******************************************\n*                            *     DSECTS  AREAS.                     *\n*                            ******************************************\n         SPACE 2\nTIODSECT DSECT\n         IEFTIOT1                 MAP OF TIOT\n         EJECT\n         IEFUCBOB LIST=YES        MAP OF UCB\n         EJECT\n*                            ******************************************\n*                            *   XFERVOL CSECT INITIALIZATION.        *\n*                            ******************************************\n         SPACE 2\n         INIT# XFERVOL,BASEREG=(12),                                   X\n               EXEC=MAINLINE,REL=02.01.00,                             X\n               ID=COPYRIGHT_(C)_HOWARD_M._DEAN_1985,                   X\n               EXLIST=YES\n         SPACE\n         USING UCBCMSEG,RA        UCB DSECT BASE\n         USING TIOT1,RB           TIOT DSECT BASE\n         EJECT\n*                            ******************************************\n*                            *    WORK FIELDS.                        *\n*                            ******************************************\n         SPACE\nXFDDNAME DC    CL8' '             INPUT DD-NAME\nTESTNAME DC    CL8' '             INPUT DD-NAME\nADDRTIOT DC    A(0)               TIOT ADDRESS\nSAVEIN   DC    A(0)\n*\nTVOLSER  DC    CL6' '             XFER TAPE VOL=SER\n*---------------------------------------------------------------------*\n*        PROGRAM MESSAGES                                             *\n*---------------------------------------------------------------------*\n         SPACE\nWTO001   WTO   'YS-001 DD-NAME NOT FOUND IN TIOT    ',ROUTCDE=(2,11),  X\n               MF=L\n         EJECT\n*                            ******************************************\n*                            * MAINLINE- MAIN ROUTINE OF THE XFERVOL  *\n*                            ******************************************\n         SPACE 2\n         ENTRE# MAINLINE\n         SPACE\n***********************************************************************\n*        GET XFER TAPE DD-NAME FROM INPUT PARM FIELD                  *\n***********************************************************************\n         SPACE\n         L     R4,0(R1)           R3=ADDRESS OF PARM FIELD\n         ST    R4,SAVEIN          SAVE INPUT PARM ADDRESS\n         MVC   XFDDNAME,0(R4)\n         SPACE\n*---------------------------------------------------------------------*\n*        GET TIOT AND THEN UCB ADDRESS FOR OUR DD-NAME                *\n*---------------------------------------------------------------------*\n         SPACE\n         EXTRACT ADDRTIOT,'S',FIELDS=(TIOT)  LOAD TIOT ADD.IN BASE REG\n         L     RB,ADDRTIOT\n         LA    RB,TIOENTRY       ADDRESS OF FIRST DD-ENTRY\n         USING TIOENTRY,RB\n         DOWHILE XFDDNAME,NE,TIOEDDNM,CLC\n            IF TIOELNGH,EQ,X'00',CLI\n               WTO   MF=(E,WTO001)      DDNAME NOT FOUND\n               IEXIT# RC=12\n            ENDIF\n            SR   R3,R3\n            IC   R3,TIOELNGH\n            LA   RB,0(R3,RB)\n         ENDDO\n         ICM   RA,B'0111',TIOEFSRT    LOAD UCB ADDRESS INTO BASE REG\n         SPACE\n***********************************************************************\n*        GET VOL=SER FROM UCB AND RETURN TO CALLER                    *\n***********************************************************************\n         SPACE\n         L     R4,SAVEIN\n         MVC   0(8,R4),=CL8' '\n         MVC   0(8,R4),UCBVOLI\n         SPACE\n         EXIT# RC=0\n         EJECT\n*                            ******************************************\n*                            *     LITERALS                           *\n*                            ******************************************\n         SPACE\n         LTORG\n         SPACE 3\n         END#  XFERVOL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XFERWTO": {"ttr": 2308, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00,\\x00,\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 44, "newlines": 44, "modlines": 0, "user": "FILE024"}, "text": "WTO      TITLE 'SEND SYSTSPRT FROM BATCH TMP TO OPERATOR'\n*---------------------------------------------------------------------*\n*  PROGRAM:  XFERWTO                                                  *\n*                                                                     *\n*  AUTHOR:   HOWARD DEAN, AMERICAN PRESIDENTAIL LINES                 *\n*  MODIFIED: GENE LEW, MCI TELECOMMUNICATIONS CORP., JANUARY 1987     *\n*                                                                     *\n*  DATE:     JUNE 1985                                                *\n*                                                                     *\n*  FUNCTION: WRITES THE OUTPUT FROM 'XFER1/XFER2' CLIST TO THE        *\n*            THE \"PROGRAMMER\", WHICH IS THE 'INDEX' DATASET FOR       *\n*            'XFERDUMP'.                                              *\n*---------------------------------------------------------------------*\n         SPACE\nXFERWTO  CSECT\nXFERWTO  RMODE 24                     SET RESIDENCY MODE\nXFERWTO  AMODE 24                     SET ADDRESSING MODE\n         SETREG 12,CODE=RENT\n         OPEN (SYSIN,INPUT)\n         MVI  BUFFER,C'*'\n         MVC  BUFFER+1(79),BUFFER\n         WTO  MF=(E,WTOLIST)\nGETIT    GET  SYSIN,BUFFER\n         CLC  =C'READY',BUFFER      IS IT READY?\n         BE   GETIT                 BYPASS THIS RECORD\n         CLC  =C'END',BUFFER        IS IT END?\n         BE   GETIT                 BYPASS THIS RECORD\n         WTO  MF=(E,WTOLIST)\n         B    GETIT\nEOFIN    DS   0H                    END OF FILE/SYSIN\n         CLOSE SYSIN\n         MVI  BUFFER,C'*'\n         MVC  BUFFER+1(79),BUFFER\n         WTO  MF=(E,WTOLIST)\n         EOJ  RC=0\n         EJECT\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,LRECL=80,BLKSIZE=800,RECFM=FB,    X\n               BUFNO=2,MACRF=GM,EODAD=EOFIN\n         EJECT\nWTOLIST  WTO  'A234567890B234567890C234567890D234567890E234567890F23456X\n               7890G234567890H234567890',                              X\n               ROUTCDE=(2,11),DESC=(4,6),MF=L\nBUFFER   EQU   WTOLIST+4\n         END   XFERWTO\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XFER1": {"ttr": 2310, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00@\\x00@\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 64, "newlines": 64, "modlines": 0, "user": "FILE024"}, "text": "PROC 0 DEBUG\nGLOBAL MONTH DAY YEAR\nGLOBAL JULIAN SHOP WEEKDAY\nGLOBAL CDEBUG\n/**********************************************************************/\n/*   \"XFER1\" IS A CLIST TO DRIVE THE 'XFERDUMP' UTILITIES.            */\n/*                                                                    */\n/* >>> AUTHOR    06/25/85 - HOWARD M. DEAN, SYNTEX CORP.              */\n/* >>> INSTALLED 06/25/85 - HOWARD M. DEAN                            */\n/* >>> UPDATED   06/25/85 - HOWARD M. DEAN                            */\n/* >>> UPDATED   12/29/86 - GENE L. LEW, MCI TELECOMMUNICATIONS CORP. */\n/**********************************************************************/\n/**                                                                  **/\n/** CHECK FOR PROPER ENVIRONMENT                                     **/\n/**                                                                  **/\nIF  &SYSENV EQ FORE THEN -\n    DO\n      WRITE *-------------------------------------------*\n      WRITE *  THIS CLIST CAN ONLY BE EXECUTED IN THE   *\n      WRITE *  BACKGROUND AS PART OF THE XFERDUMP PROC  *\n      WRITE *-------------------------------------------*\n      CONTROL FLUSH\n      EXIT CODE(99)\n    END\n/**                                                                  **/\nIF &DEBUG EQ DEBUG THEN -\n   DO\n     SET &CDEBUG EQ &STR(YES)\n     CONTROL MSG LIST CONLIST SYMLIST PROMPT FLUSH\n   END\nELSE -\n   DO\n     SET &CDEBUG EQ &STR(NO)\n     CONTROL MAIN NOMSG NOPROMPT NOLIST\n   END\n/**                                                                  **/\n/** CHECK FOR PROPER ENVIRONMENT                                     **/\n/**                                                                  **/\nIF  &SYSENV EQ FORE THEN -\n    DO\n      WRITE *-------------------------------------------*\n      WRITE *  THIS CLIST CAN ONLY BE EXECUTED IN THE   *\n      WRITE *  BACKGROUND AS PART OF THE XFERDUMP PROC  *\n      WRITE *-------------------------------------------*\n      CONTROL FLUSH\n      EXIT CODE(99)\n    END\nOPENFILE SYSUT2 OUTPUT\nSET &SYSUT2 = &STR(INITIALIZE TAPE VOLUME)\nPUTFILE  SYSUT2\nCLOSFILE SYSUT2\nCONTROL MSG\n%JULDATE DATE(SYSDATE)\nWRITE %%------------------------------------------------%%\nWRITE %% TODAY IS &WEEKDAY &MONTH &DAY &YEAR - &JULIAN  %%\nWRITE %% THE CURRENT TIME OF DAY IS &SYSTIME            %%\nWRITE %%------------------------------------------------%%\nXFERCPU\nXFERUTIL\n/*                                                                    */\n/*  SET THE 'SYSDSCAN' VALUES BELOW TO THE NUMBER OF DUMP DATASETS    */\n/*                                                                    */\nSYSDSCAN 00:04\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XFER2": {"ttr": 2312, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x9e\\x00\\x9e\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 158, "newlines": 158, "modlines": 0, "user": "FILE024"}, "text": "PROC 0 DEBUG IX('OP.P.XFERDUMP.INDEX')\nIF &DEBUG EQ DEBUG THEN CONTROL LIST CONLIST SYMLIST NOFLUSH MSG PROMPT\n   ELSE CONTROL NOFLUSH NOMSG NOPROMPT NOLIST\n/**********************************************************************/\n/* >>> AUTHOR    06/25/85 - HOWARD M. DEAN, SYNTEX CORP.              */\n/* >>> INSTALLED 06/25/85 - HOWARD M. DEAN                            */\n/* >>> UPDATED   06/25/85 - HOWARD M. DEAN                            */\n/* >>> UPDATED   12/29/86 - GENE L. LEW, MCI TELECOMM CORP.           */\n/**********************************************************************/\n/**                                                                  **/\n/** CHECK FOR PROPER ENVIRONMENT                                     **/\n/**                                                                  **/\nIF  &SYSENV EQ FORE THEN -\n    DO\n      WRITE *-------------------------------------------*\n      WRITE *  THIS CLIST CAN ONLY BE EXECUTED IN THE   *\n      WRITE *  BACKGROUND AS PART OF THE XFERDUMP PROC  *\n      WRITE *-------------------------------------------*\n      CONTROL FLUSH\n      EXIT CODE(99)\n    END\n/**                                                                  **/\n/** SET UP VARIABLES                                                 **/\n/**                                                                  **/\nSET &SYSD2 EQ &SUBSTR(4:5,&STR(&SYSDATE))\nSET &SW     EQ 0\nSET &CALL   EQ &STR(#)\nSET &NAME   EQ &STR(')&IX(DAY&SYSD2)&STR(')\nSET &PREFIX EQ &STR(OP)\nSET &HNAME  EQ &STR(')&PREFIX..T.XFERDUMP.DATA&STR(')\nSET &INAME  EQ &STR(')&PREFIX..T.WTO.DATA&STR(')\n/**                                                                  **/\n/**  SET UP FILES                                                    **/\n/**                                                                  **/\nDEL &HNAME PURGE\nFREE  FI(HOLD INDEX)\nALLOC FI(INDEX) DA(&NAME)  SHR\nALLOC FI(HOLD)  DA(&HNAME) NEW CATALOG -\n      SP(100,10) TRACKS RELEASE UNIT(TEMP)\n/**                                                                  **/\n/**  OPEN FILES AND PRIME INPUT                                      **/\n/**                                                                  **/\nOPENFILE INDEX INPUT\nOPENFILE TEMP  INPUT               /* ALLOCATED IN XFERDUMP PROC */\nOPENFILE HOLD  OUTPUT\nGETFILE  INDEX\n/**                                                                  **/\n/**  SET UP ERROR HANDLING ROUTINE                                   **/\n/**                                                                  **/\nERROR -\n   DO\n     IF &LASTCC = 400 THEN SET &SW EQ 1\n     RETURN\n   END\n/**                                                                  **/\n/** BEGIN PROCESSING                                                 **/\n/**                                                                  **/\nIF &SUBSTR(1:18,&INDEX) EQ &STR(DUMPS FOR &SYSDATE) THEN -\n   DO\n     SET &SW   EQ 0\n     SET &HOLD EQ &NSTR(&INDEX)       /* DON'T DROP HEADER RECORD */\n     PUTFILE HOLD\n     DO  WHILE &SW EQ 0               /* READ TO END OF FILE */\n       GETFILE INDEX                  /* AND WRITE TO HOLD FILE */\n       IF &SW EQ 0 THEN -\n         DO\n           SET &HOLD EQ &NSTR(&INDEX)\n           PUTFILE HOLD\n         END\n     END\n     SET &HOLD = &STR(*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-)\n     SET &HOLD = &HOLD&STR(-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*)\n     PUTFILE HOLD                     /* PUT OUT A SEPERATOR LINE */\n     SET &HOLD = &STR(DUMPS FOR &SYSDATE)\n     PUTFILE HOLD\n     SET &SW EQ 0\n       DO WHILE &SW EQ 0\n         GETFILE TEMP\n         IF &SW EQ 0 THEN -\n           DO\n             SET &HOLD EQ &NSTR(&TEMP)\n             IF  &SUBSTR(1:3,&HOLD) EQ &STR(END)   THEN SET &SW EQ 1\n             IF  &SUBSTR(1:5,&HOLD) EQ &STR(READY) THEN SET &SW EQ 1\n             IF  &SW EQ 0 THEN PUTFILE HOLD\n           END\n       END\n   END\n/**                                                                  **/\nELSE -\n   DO\n     SET &HOLD EQ &STR(DUMPS FOR &SYSDATE)\n     PUTFILE  HOLD\n     SET &SW EQ 0\n     DO WHILE &SW EQ 0\n       GETFILE TEMP\n       IF &SW EQ 0 THEN -\n         DO\n          SET &HOLD EQ &NSTR(&TEMP)\n          IF  &SUBSTR(1:3,&HOLD) EQ &STR(END)   THEN SET &SW EQ 1\n          IF  &SUBSTR(1:5,&HOLD) EQ &STR(READY) THEN SET &SW EQ 1\n          IF  &SW EQ 0 THEN PUTFILE HOLD\n         END\n     END\n   END\n/**                                                                  **/\n/** UPDATE THE PDS                                                   **/\n/**                                                                  **/\nCLOSFILE TEMP\nCLOSFILE INDEX\nCLOSFILE HOLD\n/**                                                                  **/\nOPENFILE INDEX OUTPUT\nOPENFILE HOLD  INPUT\nSET &SW EQ 0\nDO WHILE &SW EQ 0\n   GETFILE HOLD\n   IF &SW EQ 0 THEN -\n     DO\n       SET &INDEX EQ &NSTR(&HOLD)\n       PUTFILE INDEX\n     END\nEND\n/**                                                                  **/\nCLOSFILE INDEX\nCLOSFILE HOLD\n/**                                                                  **/\n/** WRITE TO THE OPERATOR                                            **/\n/**                                                                  **/\nDEL &INAME PURGE\nFREE  FI(SYSIN)\nALLOC FI(SYSIN) DA(&INAME) NEW CATALOG -\n      SP(100,10) TRACKS RELEASE UNIT(TEMP)\n/**                                                                  **/\nCLOSFILE TEMP                    /* RESET TO BEGINNING OF FILE */\nOPENFILE TEMP  INPUT\nOPENFILE SYSIN OUTPUT\n/**                                                                  **/\nSET &SW EQ 0\nDO WHILE &SW EQ 0\n  GETFILE TEMP\n  IF &SW EQ 0 THEN -\n    DO\n      SET &SYSIN EQ &NSTR(&TEMP)\n      IF  &SUBSTR(1:3,&SYSIN) EQ &STR(END)   THEN SET &SW EQ 1\n      IF  &SUBSTR(1:5,&SYSIN) EQ &STR(READY) THEN SET &SW EQ 1\n      IF  &SW EQ 0 THEN PUTFILE SYSIN\n    END\nEND\nCLOSFILE TEMP\nCLOSFILE SYSIN\n&CALL XFERWTO\n/**                                                                  **/\n/** CLEAN UP AND EXIT                                                **/\n/**                                                                  **/\nDEL  &HNAME PURGE\nDEL  &INAME PURGE\nFREE FI(HOLD INDEX SYSIN)\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XFR1DUMP": {"ttr": 2316, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x02\\x00\\x02\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 2, "newlines": 2, "modlines": 0, "user": "FILE024"}, "text": "  TITLE\n  END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XFR2DUMP": {"ttr": 2318, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\x02\\x00\\x02\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 2, "newlines": 2, "modlines": 0, "user": "FILE024"}, "text": "  NEWTAPE\n  END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XIX": {"ttr": 2320, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00\\xdb\\x00\\xdb\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 219, "newlines": 219, "modlines": 0, "user": "FILE024"}, "text": "PROC 0 D() TODAY YESTERDAY TOMORROW DEBUG\nGLOBAL MONTH DAY YEAR\nGLOBAL JULIAN SHOP WEEKDAY\nGLOBAL CDEBUG\n/**********************************************************************/\n/*>>> AUTHOR    06/27/85 - HOWARD M. DEAN, SYNTEX CORP.               */\n/*>>> INSTALLED 06/27/85 - HOWARD M. DEAN                             */\n/*>>> UPDATED   07/01/85 - HOWARD M. DEAN                             */\n/*>>> UPDATED   12/30/86 - GENE L. LEW, MCI TELECOMMUNICATIONS CORP.  */\n/**********************************************************************/\n/*                                                                    */\n/**********************************************************************/\n/*    CLIST TO INQUIRE INTO THE DUMP INDEX DATASET                    */\n/**********************************************************************/\n/*                                                                    */\n/* )STARTHELP                                                         */\n/* )F FUNCTION  -                                                     */\n/*    THE XIX COMMAND IS A CLIST USED TO INQUIRE INTO THE SYSTEM      */\n/*    DUMP INDEX DATASET. THE DUMP TITLES ASSOCIATED WITH A TAPE      */\n/*    VOLUME ARE LISTED ALONG WITH THE TAPE VOLUME SERIAL             */\n/*    NUMBER.                                                         */\n/*                                                                    */\n/*    THE DUMP DATASET INDEX, \"OP.P.XFERDUMP.INDEX\", IS A WRAP-AROUND */\n/*    PARTITIONED DATASET. EACH MEMBER IS ASSOCIATED WITH A DAY       */\n/*    OF THE MONTH.  ONE MEMBER  MAY CONTAIN AN INDEX OF              */\n/*    MULTIPLE DUMP TAPES FOR A PARTICULAR DAY. THE PREVIOUS          */\n/*    MONTH'S INDEX MEMBER IS OVERLAYED BY THE CURRENT DUMP TAPE      */\n/*    INDEX MEMBER.                                                   */\n/*                                                                    */\n/*    THIS CLIST WORKS IN CONJUNCTION WITH THE \"XFERDUMP\" CATALOGED   */\n/*    PROCEDURE. THAT PROCEDURE UPDATES THE INDEX DATA SET BASED ON   */\n/*    THE CURRENT DAY OF THE WEEK.                                    */\n/*                                                                    */\n/*    IF THE PROPER OPERANDS ARE ENTERED, ISPF \"BROWSE\" SERVICES ARE  */\n/*    INVOKED AGAINST THE SPECIFIED DUMP INDEX MEMBER.                */\n/*                                                                    */\n/* )X SYNTAX -  %XIX D(XX)/TODAY/YESTERDAY/TOMORROW                   */\n/*                                                                    */\n/*    REQUIRED - NONE                                                 */\n/*    ALIAS    - NONE                                                 */\n/*    DEFAULTS - TODAY                                                */\n/*                                                                    */\n/*    ALL OPERANDS ARE KEYWORDS                                       */\n/*    ONLY ONE OPERAND MAY BE SPECIFIED, BUT NONE ARE REQUIRED        */\n/*                                                                    */\n/*    UPON ENTERING \"BROWSE\", YOU MAY SEE THE CHARACTERS \"PAD\"        */\n/*    FOLLOWED BY 77 DOTS. THIS MEANS THAT THERE HAS NEVER BEEN       */\n/*    A DUMP TRANSFERED ON THAT PARTICULAR DAY SINCE THE INDEX        */\n/*    WAS INITIALIZED.                                                */\n/*                                                                    */\n/* )O OPERANDS -                                                      */\n/*                                                                    */\n/*    ALL OPERANDS ARE KEYWORDS                                       */\n/*    NONE ARE REQUIRED; ONLY ONE MAY BE SPECIFIED                    */\n/*                                                                    */\n/* ))D(XX) -                                                          */\n/*    SPECIFIES THE DAY OF THE MONTH FOR WHICH YOU WOULD LIKE THE     */\n/*    DUMP INDEX DISPLAYED. IF THIS OPERAND IS SPECIFIED, THE INDEX   */\n/*    DATASET IS SEARCHED FOR A MEMBER CORRESPONDING TO THE DAY       */\n/*    NUMBER \"XX\". THAT MEMBER IS SUBSEQUENTLY \"BROWSED\" VIA ISPF/PDF.*/\n/*                                                                    */\n/*    \"XX\" MUST BE A NUMERIC VALUE BETWEEN 1 AND 31.                  */\n/*                                                                    */\n/* ))TODAY -                                                          */\n/*    SPECIFIES THE DUMP INDEX MEMBER CORRESPONDING TO TODAY'S        */\n/*    TRANSFERED DUMP DATASETS. THIS MEMBER MAY OR MAY NOT            */\n/*    CONTAIN A CURRENT ENTRY. HOWEVER, YOU CAN EASILY TELL IF        */\n/*    YOU ARE LOOKING AT LAST MONTH'S ENTRY OR THE INITIALIZING       */\n/*    PAD ENTRY BY EXAMINING THE CONTENTS UNDER \"BROWSE\".             */\n/*                                                                    */\n/* ))YESTERDAY -                                                      */\n/*    LIKE THE \"TODAY\" OPERAND, THIS KEYWORD SELECTS A MEMBER         */\n/*    FROM THE DUMP INDEX DATASET. HOWEVER, THE SELECTED MEMBER       */\n/*    CORRESPONDS TO A DAY NUMBER ONE LESS THAN THE CURRENT DAY.      */\n/*    IF THE FIRST OF THE MONTH, \"YESTERDAY\" BROWSES THE LAST         */\n/*    DAY OF THE PREVIOUS MONTH.  THUS, YOU \"BROWSE\" THE ENTRY        */\n/*    CORRESPONDING TO \"YESTERDAY'S\" DAY OF THE MONTH.                */\n/*                                                                    */\n/* ))TOMORROW -                                                       */\n/*    SPECIFIES THAT YOU WOULD LIKE TO SEE \"TOMORROW'S\" DUMP          */\n/*    DATASET INDEX. IN EFFECT, THIS OPERAND SHOULD PREDICT           */\n/*    WHICH DUMPS WILL OCCUR TOMORROW AND ON WHICH TAPE               */\n/*    VOLUMES THEY WILL RESIDE. THIS SEEMS LIKE AN IMPOSSIBLE         */\n/*    TASK, BUT IN MVS ALL THINGS ARE POSSIBLE.                       */\n/*                                                                    */\n/* )ENDHELP                                                           */\n/*                                                                    */\n/******************************************************/\n/** SET UP DEBUG ENVIRONMENT - FOR THIS LEVEL ONLY   **/\n/******************************************************/\n/*                                                                    */\nIF &DEBUG EQ DEBUG THEN +\n   CONTROL LIST CONLIST SYMLIST NOFLUSH PROMPT MSG\n   ELSE CONTROL NOMSG NOPROMPT NOFLUSH NOLIST\n/*                                                                    */\n/**********************************************/\n/** IF NO OPERANDS ENTERED; DEFAULT TO TODAY **/\n/**********************************************/\nIF &D EQ  &STR() -\n      AND &TODAY     EQ &STR() -\n      AND &YESTERDAY EQ &STR() -\n      AND &TOMORROW  EQ &STR() THEN SET &TODAY EQ TODAY\n/*                                                                    */\n/************************************************************/\n/** CALL SUBROUTINE TO GET THE CURRENT DATE                **/\n/** \"JULDATE\" WILL FORMAT THE GLOBAL VARIABLES             **/\n/************************************************************/\n%JULDATE DATE(SYSDATE)\n/**                                                                  **/\n/** SET UP VARIALBES                                                 **/\n/**                                                                  **/\nSET  &NULL EQ &STR()\nSET  &SW   EQ 0\nDO WHILE &SW EQ 0\nIF &SW EQ 0 THEN -\n  DO\n   IF &D NE &NULL THEN -\n     DO\n       IF &DATATYPE(&D) NE NUM  OR &LENGTH(&STR(&D)) GT 2) THEN -\n         DO\n           WRITE ******************************************\n           WRITE ENTRY FOR DAY NUMBER NOT VALID - TRY AGAIN\n           WRITE ******************************************\n           EXIT CODE(94)\n         END\n       ELSE -\n       IF  &D LT 1 OR &D GT 31 THEN -\n         DO\n           WRITE *********************************************\n           WRITE ENTRY FOR DAY NUMBER OUT OF RANGE - TRY AGAIN\n           WRITE *********************************************\n           EXIT CODE(95)\n          END\n       IF &TODAY NE &NULL -\n                 OR &YESTERDAY NE &NULL -\n                 OR &TOMORROW  NE &NULL -\n                 THEN -\n         DO\n           WRITE *************************************************\n           WRITE IF YOU ENTER A SPECIFIC DAY NUMBER, YOU CANNOT\n           WRITE ENTER TODAY, YESTERDAY, OR TOMORROW\n           WRITE TRY THIS CLIST AGAIN - THIS TIME CORRECTLY!!\n           WRITE **************************************************\n           EXIT CODE(91)\n         END\n       ELSE -\n         DO\n           SET &D EQ &STR(&D)\n           IF &LENGTH(&STR(&D)) EQ 1 THEN SET &D EQ &STR(0&D)\n           %BXFER 'OP.P.XFERDUMP.INDEX(DAY&D)'\n           SET &SW EQ 1\n         END\n     END\n  END\nIF &SW EQ 0 THEN -\n   IF &TODAY EQ TODAY THEN -\n      IF &YESTERDAY NE &NULL OR &TOMORROW NE &NULL THEN -\n         DO\n           WRITE ******************************************************\n           WRITE CHOOSE ONLY ONE OPTION - YESTERDAY, TODAY, OR TOMORROW\n           WRITE ******************************************************\n           EXIT CODE(98)\n           SET &SW EQ 1\n         END\n       ELSE -\n         DO\n           SET &DAY EQ &STR(&DAY)\n           IF  &LENGTH(&STR(&DAY)) EQ 1 THEN SET &DAY EQ &STR(0&DAY)\n           %BXFER 'OP.P.XFERDUMP.INDEX(DAY&DAY)'\n           SET &SW EQ 1\n         END\nIF &SW EQ 0 THEN -\n   IF  &YESTERDAY EQ YESTERDAY THEN -\n     IF &TODAY NE &NULL OR &TOMORROW NE &NULL THEN -\n         DO\n           WRITE ******************************************************\n           WRITE CHOOSE ONLY ONE OPTION - YESTERDAY, TODAY, OR TOMORROW\n           WRITE ******************************************************\n           EXIT CODE(98)\n         END\n     ELSE -\n         DO\n           SET &DAY EQ &DAY - 1\n           IF  &DAY EQ 0 THEN -\n              DO\n                /**************************************************/\n                /** CALCULATE THE LAST DAY OF THE PREVIOUS MONTH **/\n                /**************************************************/\n                SET &MONTH EQ &MONTH - 1\n                IF  &MONTH EQ 0 THEN SET &MONTH EQ 12\n                SET &DAY   EQ &SUBSTR(&EVAL(&MONTH*2):+\n                    &EVAL((&MONTH*2)+1),0312831303130313130313031)\n                IF &YEAR//4 EQ 0 AND &MONTH EQ 2 THEN SET &DAY EQ 29\n              END\n           SET &DAY EQ &STR(&DAY)\n           IF  &LENGTH(&STR(&DAY)) EQ 1 THEN SET &DAY EQ &STR(0&DAY)\n           %BXFER 'OP.P.XFERDUMP.INDEX(DAY&DAY)'\n           SET &SW EQ 1\n         END\nIF &SW EQ 0 THEN -\n   IF &TOMORROW EQ TOMORROW THEN -\n      IF &TODAY NE &NULL OR &YESTERDAY NE &NULL THEN -\n         DO\n           WRITE ******************************************************\n           WRITE CHOOSE ONLY ONE OPTION - YESTERDAY, TODAY, OR TOMORROW\n           WRITE ******************************************************\n           EXIT CODE(98)\n         END\n     ELSE -\n         DO\n           WRITE ***********************************************\n           WRITE SILLY! I CAN'T FORTELL THE FUTURE\n           WRITE DOES THIS TERMINAL LOOK LIKE A CRYSTAL BALL?\n           WRITE (DON'T ANSWER THAT!!)\n           WRITE ***********************************************\n           EXIT CODE(97)\n           END\nEND\nEXIT CODE(0)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XIXHELP": {"ttr": 2564, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00@\\x00\\x87\\x03/\\x00\\x87\\x03/\\x15F\\x00E\\x00E\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1987-02-01T00:00:00", "modifydate": "1987-02-01T15:46:40", "lines": 69, "newlines": 69, "modlines": 0, "user": "FILE024"}, "text": ")F FUNCTION  -\n   THE XIX COMMAND IS A CLIST USED TO INQUIRE INTO THE SYSTEM\n   DUMP INDEX DATASET. THE DUMP TITLES ASSOCIATED WITH A TAPE\n   VOLUME ARE LISTED ALONG WITH THE TAPE VOLUME SERIAL\n   NUMBER.\n\n   THE DUMP DATASET INDEX, \"OP.P.XFERDUMP.DATA\", IS A WRAP-AROUND\n   PARTITIONED DATASET. EACH MEMBER IS ASSOCIATED WITH A DAY\n   OF THE MONTH.  ONE MEMBER  MAY CONTAIN AN INDEX OF\n   MULTIPLE DUMP TAPES FOR A PARTICULAR DAY. THE PREVIOUS\n   MONTH'S INDEX MEMBER IS OVERLAYED BY THE CURRENT DUMP TAPE\n   INDEX MEMBER.\n\n   THIS CLIST WORKS IN CONJUNCTION WITH THE \"XFERDUMP\" CATALOGED\n   PROCEDURE. THAT PROCEDURE UPDATES THE INDEX DATA SET BASED ON\n   THE CURRENT DAY OF THE WEEK.\n\n   IF THE PROPER OPERANDS ARE ENTERED, ISPF \"BROWSE\" SERVICES ARE\n   INVOKED AGAINST THE SPECIFIED DUMP INDEX MEMBER.\n\n)X SYNTAX -  %XIX D(XX)/TODAY/YESTERDAY/TOMORROW\n\n   REQUIRED - NONE\n   ALIAS    - NONE\n   DEFAULTS - TODAY\n\n   ALL OPERANDS ARE KEYWORDS\n   ONLY ONE OPERAND MAY BE SPECIFIED, BUT NONE ARE REQUIRED\n\n   UPON ENTERING \"BROWSE\", YOU MAY SEE THE CHARACTERS \"PAD\"\n   FOLLOWED BY 77 DOTS. THIS MEANS THAT THERE HAS NEVER BEEN\n   A DUMP TRANSFERED ON THAT PARTICULAR DAY SINCE THE INDEX\n   WAS INITIALIZED.\n\n)O OPERANDS -\n\n   ALL OPERANDS ARE KEYWORDS\n   NONE ARE REQUIRED; ONLY ONE MAY BE SPECIFIED\n\n))D(XX) -\n   SPECIFIES THE DAY OF THE MONTH FOR WHICH YOU WOULD LIKE THE\n   DUMP INDEX DISPLAYED. IF THIS OPERAND IS SPECIFIED, THE INDEX\n   DATASET IS SEARCHED FOR A MEMBER CORRESPONDING TO THE DAY\n   NUMBER \"XX\". THAT MEMBER IS SUBSEQUENTLY \"BROWSED\" VIA ISPF/PDF.\n\n   \"XX\" MUST BE A NUMERIC VALUE BETWEEN 1 AND 31.\n\n))TODAY -\n   SPECIFIES THE DUMP INDEX MEMBER CORRESPONDING TO TODAY'S\n   TRANSFERED DUMP DATASETS. THIS MEMBER MAY OR MAY NOT\n   CONTAIN A CURRENT ENTRY. HOWEVER, YOU CAN EASILY TELL IF\n   YOU ARE LOOKING AT LAST MONTH'S ENTRY OR THE INITIALIZING\n   PAD ENTRY BY EXAMINING THE CONTENTS UNDER \"BROWSE\".\n\n))YESTERDAY -\n   LIKE THE \"TODAY\" OPERAND, THIS KEYWORD SELECTS A MEMBER\n   FROM THE DUMP INDEX DATASET. HOWEVER, THE SELECTED MEMBER\n   CORRESPONDS TO A DAY NUMBER ONE LESS THAN THE CURRENT DAY.\n   IF THE FIRST OF THE MONTH, \"YESTERDAY\" BROWSES THE LAST\n   DAY OF THE PREVIOUS MONTH.  THUS, YOU \"BROWSE\" THE ENTRY\n   CORRESPONDING TO \"YESTERDAY'S\" DAY OF THE MONTH.\n\n))TOMORROW -\n   SPECIFIES THAT YOU WOULD LIKE TO SEE \"TOMORROW'S\" DUMP\n   DATASET INDEX. IN EFFECT, THIS OPERAND SHOULD PREDICT\n   WHICH DUMPS WILL OCCUR TOMORROW AND ON WHICH TAPE\n   VOLUMES THEY WILL RESIDE. THIS SEEMS LIKE AN IMPOSSIBLE\n   TASK, BUT IN MVS ALL THINGS ARE POSSIBLE.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT024/FILE024.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT024", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}